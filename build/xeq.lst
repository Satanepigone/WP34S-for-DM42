ARM GAS  /tmp/ccQlyisH.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"xeq.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.find_section_bounds,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	find_section_bounds:
  27              	.LVL0:
  28              	.LFB19:
  29              		.file 1 "src/xeq.c"
   1:src/xeq.c     **** /* This file is part of 34S.
   2:src/xeq.c     ****  * 
   3:src/xeq.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/xeq.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/xeq.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/xeq.c     ****  * (at your option) any later version.
   7:src/xeq.c     ****  * 
   8:src/xeq.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/xeq.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/xeq.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/xeq.c     ****  * GNU General Public License for more details.
  12:src/xeq.c     ****  * 
  13:src/xeq.c     ****  * You should have received a copy of the GNU General Public License
  14:src/xeq.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/xeq.c     ****  */
  16:src/xeq.c     **** 
  17:src/xeq.c     **** #ifndef REALBUILD
  18:src/xeq.c     **** 
  19:src/xeq.c     **** #if defined(WIN32) && !defined(QTGUI) && !defined(IOS) && !defined(__GNUC__) && !defined(DM42)
  20:src/xeq.c     **** 
  21:src/xeq.c     **** #include <stdlib.h>  // sleep
  22:src/xeq.c     **** #include "win32.h"
  23:src/xeq.c     **** #define sleep _sleep
  24:src/xeq.c     **** #define strtoull _strtoui64
  25:src/xeq.c     **** 
  26:src/xeq.c     **** #else
  27:src/xeq.c     **** 
  28:src/xeq.c     **** #ifdef DM42
  29:src/xeq.c     **** #include "dmcp.h"
ARM GAS  /tmp/ccQlyisH.s 			page 2


  30:src/xeq.c     **** #else
  31:src/xeq.c     **** #include <unistd.h>
  32:src/xeq.c     **** #include <sys/time.h>
  33:src/xeq.c     **** extern unsigned long long strtoull(const char *, char **, int);
  34:src/xeq.c     **** #endif
  35:src/xeq.c     **** 
  36:src/xeq.c     **** #endif
  37:src/xeq.c     **** 
  38:src/xeq.c     **** #include <stdio.h>   // (s)printf
  39:src/xeq.c     **** #include <string.h>
  40:src/xeq.c     **** #include <stdlib.h>
  41:src/xeq.c     **** 
  42:src/xeq.c     **** #endif // not REALBUILD
  43:src/xeq.c     **** 
  44:src/xeq.c     **** #ifdef IOS
  45:src/xeq.c     **** #include <stdarg.h>
  46:src/xeq.c     **** #endif
  47:src/xeq.c     **** 
  48:src/xeq.c     **** #if __GNUC__ >= 4 && __GNUC_MINOR__ >= 6
  49:src/xeq.c     **** #define GNUC_POP_ERROR
  50:src/xeq.c     **** #pragma GCC diagnostic push
  51:src/xeq.c     **** #pragma GCC diagnostic ignored "-Warray-bounds"
  52:src/xeq.c     **** #endif
  53:src/xeq.c     **** 
  54:src/xeq.c     **** #define XEQ_INTERNAL 1
  55:src/xeq.c     **** #define DM42SAFE
  56:src/xeq.c     **** #include "xeq.h"
  57:src/xeq.c     **** #include "storage.h"
  58:src/xeq.c     **** #include "decn.h"
  59:src/xeq.c     **** #include "complex.h"
  60:src/xeq.c     **** #include "stats.h"
  61:src/xeq.c     **** #include "display.h"
  62:src/xeq.c     **** #include "consts.h"
  63:src/xeq.c     **** #include "int.h"
  64:src/xeq.c     **** #include "date.h"
  65:src/xeq.c     **** #include "lcd.h"
  66:src/xeq.c     **** #include "xrom.h"
  67:src/xeq.c     **** #include "alpha.h"
  68:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
  69:src/xeq.c     **** #include "stopwatch.h"
  70:src/xeq.c     **** #endif
  71:src/xeq.c     **** #ifndef DM42
  72:src/xeq.c     **** #include "printer.h"
  73:src/xeq.c     **** #endif
  74:src/xeq.c     **** #undef DM42SAFE
  75:src/xeq.c     **** 
  76:src/xeq.c     **** #include "pretty.h"
  77:src/xeq.c     **** 
  78:src/xeq.c     **** 
  79:src/xeq.c     **** #include "xrom_targets.c"	// Generated by PP
  80:src/xeq.c     **** 
  81:src/xeq.c     **** /* Define the number of program Ticks that must elapse between flashing the
  82:src/xeq.c     ****  * RCL annunciator.
  83:src/xeq.c     ****  */
  84:src/xeq.c     **** #define TICKS_PER_FLASH	(5)
  85:src/xeq.c     **** 
  86:src/xeq.c     **** /*
ARM GAS  /tmp/ccQlyisH.s 			page 3


  87:src/xeq.c     ****  *  A program is running
  88:src/xeq.c     ****  */
  89:src/xeq.c     **** FLAG Running;
  90:src/xeq.c     **** FLAG XromRunning;
  91:src/xeq.c     **** 
  92:src/xeq.c     **** #ifndef CONSOLE
  93:src/xeq.c     **** /*
  94:src/xeq.c     ****  *  A program has just stopped
  95:src/xeq.c     ****  */
  96:src/xeq.c     **** FLAG JustStopped;
  97:src/xeq.c     **** #endif
  98:src/xeq.c     **** 
  99:src/xeq.c     **** /*
 100:src/xeq.c     ****  *  Count down counter for a programmed pause
 101:src/xeq.c     ****  */
 102:src/xeq.c     **** volatile unsigned char Pause;
 103:src/xeq.c     **** 
 104:src/xeq.c     **** /*
 105:src/xeq.c     ****  *  Some long running function has called busy();
 106:src/xeq.c     ****  */
 107:src/xeq.c     **** FLAG Busy;
 108:src/xeq.c     **** 
 109:src/xeq.c     **** /*
 110:src/xeq.c     ****  *  Error code
 111:src/xeq.c     ****  */
 112:src/xeq.c     **** SMALL_INT Error;
 113:src/xeq.c     **** 
 114:src/xeq.c     **** /*
 115:src/xeq.c     ****  *  Indication of PC wrap around
 116:src/xeq.c     ****  */
 117:src/xeq.c     **** FLAG PcWrapped;
 118:src/xeq.c     **** 
 119:src/xeq.c     **** /*
 120:src/xeq.c     ****  *  Currently executed function
 121:src/xeq.c     ****  */
 122:src/xeq.c     **** s_opcode XeqOpCode;
 123:src/xeq.c     **** 
 124:src/xeq.c     **** /*
 125:src/xeq.c     ****  *  Temporary display (not X)
 126:src/xeq.c     ****  */
 127:src/xeq.c     **** SMALL_INT ShowRegister;
 128:src/xeq.c     **** 
 129:src/xeq.c     **** /*
 130:src/xeq.c     ****  *  User code being called from XROM
 131:src/xeq.c     ****  */
 132:src/xeq.c     **** SMALL_INT XromUserPc;
 133:src/xeq.c     **** SMALL_INT UserLocalRegs;
 134:src/xeq.c     **** 
 135:src/xeq.c     **** /* We need various different math contexts.
 136:src/xeq.c     ****  * More efficient to define these globally and reuse them as needed.
 137:src/xeq.c     ****  */
 138:src/xeq.c     **** decContext Ctx;
 139:src/xeq.c     **** 
 140:src/xeq.c     **** /*
 141:src/xeq.c     ****  * A buffer for instruction display
 142:src/xeq.c     ****  */
 143:src/xeq.c     **** char TraceBuffer[25];
ARM GAS  /tmp/ccQlyisH.s 			page 4


 144:src/xeq.c     **** 
 145:src/xeq.c     **** /*
 146:src/xeq.c     ****  *  Total Size of the return stack
 147:src/xeq.c     ****  */
 148:src/xeq.c     **** SMALL_INT RetStkSize;
 149:src/xeq.c     **** 
 150:src/xeq.c     **** /*
 151:src/xeq.c     ****  *  Number of remaining program steps
 152:src/xeq.c     ****  */
 153:src/xeq.c     **** SMALL_INT ProgFree;
 154:src/xeq.c     **** 
 155:src/xeq.c     **** /*
 156:src/xeq.c     ****  * The actual top of the return stack
 157:src/xeq.c     ****  */
 158:src/xeq.c     **** unsigned short *RetStk;
 159:src/xeq.c     **** 
 160:src/xeq.c     **** /*
 161:src/xeq.c     ****  *  The location of the RPN stack
 162:src/xeq.c     ****  */
 163:src/xeq.c     **** REGISTER *StackBase;
 164:src/xeq.c     **** 
 165:src/xeq.c     **** #ifdef INFRARED
 166:src/xeq.c     **** /*
 167:src/xeq.c     ****  *  Is tracing active?
 168:src/xeq.c     ****  */
 169:src/xeq.c     **** FLAG Tracing;
 170:src/xeq.c     **** #endif
 171:src/xeq.c     **** 
 172:src/xeq.c     **** /*
 173:src/xeq.c     **** *	Indicates that a coordinate converstion has just happened
 174:src/xeq.c     **** */
 175:src/xeq.c     **** #ifdef RP_PREFIX
 176:src/xeq.c     **** SMALL_INT RectPolConv; // 1 - R->P just done; 2 - P->R just done
 177:src/xeq.c     **** #endif
 178:src/xeq.c     **** 
 179:src/xeq.c     **** /*
 180:src/xeq.c     ****  *  Check if the current PC is in XROM
 181:src/xeq.c     ****  */
 182:src/xeq.c     **** int is_xrom(void) {
 183:src/xeq.c     **** 	return isXROM(state_pc());
 184:src/xeq.c     **** }
 185:src/xeq.c     **** 
 186:src/xeq.c     **** /*
 187:src/xeq.c     ****  *  Shift the return stack.
 188:src/xeq.c     ****  *  The distance is in levels.
 189:src/xeq.c     ****  *  If argument is negative, return stack will shrink.
 190:src/xeq.c     ****  *  Returns 1 if unsuccessful (error is set)
 191:src/xeq.c     ****  */
 192:src/xeq.c     **** int move_retstk(int distance)
 193:src/xeq.c     **** {
 194:src/xeq.c     **** #ifndef REALBUILD
 195:src/xeq.c     **** 	// Sanity check
 196:src/xeq.c     **** 	if (XromFlags.xIN) {
 197:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 198:src/xeq.c     **** 		return 1;
 199:src/xeq.c     **** 	}
 200:src/xeq.c     **** #endif
ARM GAS  /tmp/ccQlyisH.s 			page 5


 201:src/xeq.c     **** 	if (RetStkSize + RetStkPtr + distance < 0) {
 202:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 203:src/xeq.c     **** 		return 1;
 204:src/xeq.c     **** 	}
 205:src/xeq.c     **** 	xcopy(RetStk + RetStkPtr + distance, RetStk + RetStkPtr, (-RetStkPtr) << 1);
 206:src/xeq.c     **** 	RetStk += distance;
 207:src/xeq.c     **** 	RetStkSize += distance;
 208:src/xeq.c     **** 	return 0;
 209:src/xeq.c     **** }
 210:src/xeq.c     **** 
 211:src/xeq.c     **** /*
 212:src/xeq.c     ****  *  How many stack levels with local data have we?
 213:src/xeq.c     ****  */
 214:src/xeq.c     **** int local_levels(void) {
 215:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 216:src/xeq.c     **** }
 217:src/xeq.c     **** 
 218:src/xeq.c     **** /*
 219:src/xeq.c     ****  *  How many local registers have we?
 220:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 221:src/xeq.c     ****  */
 222:src/xeq.c     **** int local_regs_rarg(enum rarg op) {
 223:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 224:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 225:src/xeq.c     **** }
 226:src/xeq.c     **** 
 227:src/xeq.c     **** /*
 228:src/xeq.c     ****  *  How many local registers have we?
 229:src/xeq.c     ****  */
 230:src/xeq.c     **** int local_regs(void) {
 231:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 232:src/xeq.c     **** }
 233:src/xeq.c     **** 
 234:src/xeq.c     **** /*
 235:src/xeq.c     ****  *  How many global registers have we?
 236:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 237:src/xeq.c     ****  */
 238:src/xeq.c     **** unsigned int global_regs_rarg(enum rarg op) {
 239:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 240:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 241:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 242:src/xeq.c     **** 	}
 243:src/xeq.c     **** 	else
 244:src/xeq.c     **** 		return NumRegs;
 245:src/xeq.c     **** }
 246:src/xeq.c     **** 
 247:src/xeq.c     **** /*
 248:src/xeq.c     ****  *  How many global registers have we?
 249:src/xeq.c     ****  */
 250:src/xeq.c     **** unsigned int global_regs(void) {
 251:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 252:src/xeq.c     **** }
 253:src/xeq.c     **** 
 254:src/xeq.c     **** 
 255:src/xeq.c     **** #if defined(CONSOLE)
 256:src/xeq.c     **** // Console screen only
 257:src/xeq.c     **** unsigned int get_local_flags(void) {
ARM GAS  /tmp/ccQlyisH.s 			page 6


 258:src/xeq.c     **** 	if (LocalRegs == 0)
 259:src/xeq.c     **** 		return 0;
 260:src/xeq.c     **** 	return RetStk[LocalRegs + 1];
 261:src/xeq.c     **** }
 262:src/xeq.c     **** #endif
 263:src/xeq.c     **** 
 264:src/xeq.c     **** void version(enum nilop op) {
 265:src/xeq.c     **** 	State2.version = 1;
 266:src/xeq.c     **** 	if (!State2.runmode)
 267:src/xeq.c     **** 		display();
 268:src/xeq.c     **** }
 269:src/xeq.c     **** 
 270:src/xeq.c     **** void cmd_off(enum nilop op) {
 271:src/xeq.c     **** 	shutdown();
 272:src/xeq.c     **** }
 273:src/xeq.c     **** 
 274:src/xeq.c     **** #ifndef state_pc
 275:src/xeq.c     **** unsigned int state_pc(void) {
 276:src/xeq.c     **** 	return State.pc;	
 277:src/xeq.c     **** }
 278:src/xeq.c     **** #endif
 279:src/xeq.c     **** static void raw_set_pc(unsigned int pc) {
 280:src/xeq.c     **** 	State.pc = pc;
 281:src/xeq.c     **** 	update_program_bounds(0);
 282:src/xeq.c     **** }
 283:src/xeq.c     **** 
 284:src/xeq.c     **** /*
 285:src/xeq.c     ****  *  Where do the program regions start?
 286:src/xeq.c     ****  */
 287:src/xeq.c     **** #ifdef DM42
 288:src/xeq.c     **** static s_opcode * RegionTab[] = {
 289:src/xeq.c     **** 	NULL,
 290:src/xeq.c     **** 	NULL,
 291:src/xeq.c     **** 	NULL,
 292:src/xeq.c     **** 	xrom
 293:src/xeq.c     **** };
 294:src/xeq.c     **** void init_RegionTab (void) {
 295:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 296:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 297:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 298:src/xeq.c     **** }
 299:src/xeq.c     **** #else
 300:src/xeq.c     **** static const s_opcode *const RegionTab[] = {
 301:src/xeq.c     **** 	Prog,
 302:src/xeq.c     **** 	UserFlash.prog,
 303:src/xeq.c     **** 	BackupFlash._prog,
 304:src/xeq.c     **** 	xrom
 305:src/xeq.c     **** };
 306:src/xeq.c     **** #endif
 307:src/xeq.c     **** /*
 308:src/xeq.c     ****  *  Size of a program segment
 309:src/xeq.c     ****  */
 310:src/xeq.c     **** int sizeLIB(int region) {
 311:src/xeq.c     **** 	if (region == REGION_XROM)
 312:src/xeq.c     **** 		return xrom_size;
 313:src/xeq.c     **** 	else
 314:src/xeq.c     **** 		return (int)RegionTab[region][-1];
ARM GAS  /tmp/ccQlyisH.s 			page 7


 315:src/xeq.c     **** }
 316:src/xeq.c     **** 
 317:src/xeq.c     **** 
 318:src/xeq.c     **** /*
 319:src/xeq.c     ****  *  Get an opcode, check for double length codes
 320:src/xeq.c     ****  */
 321:src/xeq.c     **** static opcode get_opcode( const s_opcode *loc )
 322:src/xeq.c     **** {
 323:src/xeq.c     **** 	opcode r = *loc;
 324:src/xeq.c     **** 	if ( isDBL(r) ) {
 325:src/xeq.c     **** 		r |= loc[1] << 16;
 326:src/xeq.c     **** 	}
 327:src/xeq.c     **** 	return r;
 328:src/xeq.c     **** }
 329:src/xeq.c     **** 
 330:src/xeq.c     **** 
 331:src/xeq.c     **** /* 
 332:src/xeq.c     ****  * Return the program memory location specified.
 333:src/xeq.c     ****  */
 334:src/xeq.c     **** opcode getprog(unsigned int pc) {
 335:src/xeq.c     **** 
 336:src/xeq.c     **** 	const int region = nLIB(pc);
 337:src/xeq.c     **** 	int offset = offsetLIB(pc);
 338:src/xeq.c     **** 
 339:src/xeq.c     **** 	if (offset < 0 || offset >= sizeLIB(region))
 340:src/xeq.c     **** 		return OP_NIL | OP_END;
 341:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 342:src/xeq.c     **** }
 343:src/xeq.c     **** 
 344:src/xeq.c     **** 
 345:src/xeq.c     **** /* 
 346:src/xeq.c     ****  * Return the physical start-address of the current program
 347:src/xeq.c     ****  */
 348:src/xeq.c     **** const s_opcode *get_current_prog(void) {
 349:src/xeq.c     **** 
 350:src/xeq.c     **** 	const int region = nLIB(ProgBegin);
 351:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 352:src/xeq.c     **** }
 353:src/xeq.c     **** 
 354:src/xeq.c     **** 
 355:src/xeq.c     **** /*
 356:src/xeq.c     ****  *  Set PC with sanity check
 357:src/xeq.c     ****  */
 358:src/xeq.c     **** void set_pc(unsigned int pc) {
 359:src/xeq.c     **** 	if (isRAM(pc)) {
 360:src/xeq.c     **** 		if (pc > ProgSize)
 361:src/xeq.c     **** 			pc = ProgSize;
 362:src/xeq.c     **** 		if (pc > 1 && isDBL(Prog_1[pc - 1]))
 363:src/xeq.c     **** 			pc--;
 364:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 365:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 366:src/xeq.c     **** 		if (pc > n - 1)
 367:src/xeq.c     **** 			pc = n - 1;
 368:src/xeq.c     **** 		if (pc > startLIB(pc) && isDBL(getprog(pc - 1)))
 369:src/xeq.c     **** 			--pc;
 370:src/xeq.c     **** 	}
 371:src/xeq.c     **** 	raw_set_pc(pc);
ARM GAS  /tmp/ccQlyisH.s 			page 8


 372:src/xeq.c     **** }
 373:src/xeq.c     **** 
 374:src/xeq.c     **** 
 375:src/xeq.c     **** 
 376:src/xeq.c     **** /* Locate the beginning and end of a section from a PC that points anywhere within
 377:src/xeq.c     ****  */
 378:src/xeq.c     **** static unsigned short int find_section_bounds(const unsigned int pc, const int endp, unsigned short
  30              		.loc 1 378 119 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 379:src/xeq.c     **** 	unsigned short int top, bottom;
  35              		.loc 1 379 2 view .LVU1
 380:src/xeq.c     **** 
 381:src/xeq.c     **** 	if (endp && State2.runmode) { 
  36              		.loc 1 381 2 view .LVU2
  37              		.loc 1 381 5 is_stmt 0 view .LVU3
  38 0000 71B1     		cbz	r1, .L2
  39              		.loc 1 381 11 discriminator 1 view .LVU4
  40 0002 194B     		ldr	r3, .L14
  41 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
  42 0006 5B06     		lsls	r3, r3, #25
  43 0008 0AD5     		bpl	.L2
 382:src/xeq.c     **** 		// Use the current program as bounds
 383:src/xeq.c     **** 		top = ProgBegin;
  44              		.loc 1 383 3 is_stmt 1 view .LVU5
  45              		.loc 1 383 9 is_stmt 0 view .LVU6
  46 000a 184B     		ldr	r3, .L14+4
  47 000c 1968     		ldr	r1, [r3]
  48              	.LVL1:
 384:src/xeq.c     **** 		bottom = ProgEnd;
  49              		.loc 1 384 3 is_stmt 1 view .LVU7
  50 000e B1F8EC37 		ldrh	r3, [r1, #2028]
  51              		.loc 1 384 10 is_stmt 0 view .LVU8
  52 0012 B1F8EE07 		ldrh	r0, [r1, #2030]
  53              	.LVL2:
 385:src/xeq.c     **** 		if (top == 0)
  54              		.loc 1 385 3 is_stmt 1 view .LVU9
  55 0016 012B     		cmp	r3, #1
  56 0018 38BF     		it	cc
  57 001a 0123     		movcc	r3, #1
  58              	.LVL3:
 386:src/xeq.c     **** 			top = 1;
 387:src/xeq.c     **** 	}
 388:src/xeq.c     **** 	else if (isXROM(pc)) {
 389:src/xeq.c     **** 		top = addrXROM(1);
 390:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 391:src/xeq.c     **** 	} 
 392:src/xeq.c     **** 	else if (isLIB(pc)) {
 393:src/xeq.c     **** 		top = startLIB(pc);
 394:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
 395:src/xeq.c     **** 	}
 396:src/xeq.c     **** 	else {
 397:src/xeq.c     **** 		top = State2.runmode;  // step 001 if not entering a program
 398:src/xeq.c     **** 		bottom = ProgSize;
 399:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQlyisH.s 			page 9


 400:src/xeq.c     **** 	*p_top = top;
  59              		.loc 1 400 2 view .LVU10
  60              		.loc 1 400 9 is_stmt 0 view .LVU11
  61 001c 1380     		strh	r3, [r2]	@ movhi
 401:src/xeq.c     **** 	return bottom;
  62              		.loc 1 401 2 is_stmt 1 view .LVU12
 402:src/xeq.c     **** }
  63              		.loc 1 402 1 is_stmt 0 view .LVU13
  64 001e 7047     		bx	lr
  65              	.LVL4:
  66              	.L2:
 388:src/xeq.c     **** 		top = addrXROM(1);
  67              		.loc 1 388 7 is_stmt 1 view .LVU14
 388:src/xeq.c     **** 		top = addrXROM(1);
  68              		.loc 1 388 11 is_stmt 0 view .LVU15
  69 0020 830B     		lsrs	r3, r0, #14
 388:src/xeq.c     **** 		top = addrXROM(1);
  70              		.loc 1 388 10 view .LVU16
  71 0022 032B     		cmp	r3, #3
  72 0024 0FD0     		beq	.L13
 392:src/xeq.c     **** 		top = startLIB(pc);
  73              		.loc 1 392 7 is_stmt 1 view .LVU17
 392:src/xeq.c     **** 		top = startLIB(pc);
  74              		.loc 1 392 10 is_stmt 0 view .LVU18
  75 0026 10F4404F 		tst	r0, #49152
  76 002a 14D0     		beq	.L5
 393:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  77              		.loc 1 393 3 is_stmt 1 view .LVU19
  78              	.LBB1307:
  79              	.LBB1308:
 314:src/xeq.c     **** }
  80              		.loc 1 314 24 is_stmt 0 view .LVU20
  81 002c 1049     		ldr	r1, .L14+8
  82              	.LVL5:
 314:src/xeq.c     **** }
  83              		.loc 1 314 32 view .LVU21
  84 002e 51F82330 		ldr	r3, [r1, r3, lsl #2]
  85              	.LBE1308:
  86              	.LBE1307:
 394:src/xeq.c     **** 	}
  87              		.loc 1 394 10 view .LVU22
  88 0032 33F8021C 		ldrh	r1, [r3, #-2]
 393:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  89              		.loc 1 393 9 view .LVU23
  90 0036 00F44043 		and	r3, r0, #49152
 394:src/xeq.c     **** 	}
  91              		.loc 1 394 10 view .LVU24
  92 003a 5818     		adds	r0, r3, r1
  93              	.LVL6:
 393:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  94              		.loc 1 393 7 view .LVU25
  95 003c 0133     		adds	r3, r3, #1
  96 003e 9BB2     		uxth	r3, r3
  97              	.LVL7:
 394:src/xeq.c     **** 	}
  98              		.loc 1 394 3 is_stmt 1 view .LVU26
  99              	.LBB1310:
ARM GAS  /tmp/ccQlyisH.s 			page 10


 100              	.LBI1307:
 310:src/xeq.c     **** 	if (region == REGION_XROM)
 101              		.loc 1 310 5 view .LVU27
 102              	.LBB1309:
 311:src/xeq.c     **** 		return xrom_size;
 103              		.loc 1 311 2 view .LVU28
 314:src/xeq.c     **** }
 104              		.loc 1 314 3 view .LVU29
 314:src/xeq.c     **** }
 105              		.loc 1 314 3 is_stmt 0 view .LVU30
 106              	.LBE1309:
 107              	.LBE1310:
 394:src/xeq.c     **** 	}
 108              		.loc 1 394 10 view .LVU31
 109 0040 80B2     		uxth	r0, r0
 110              	.LVL8:
 400:src/xeq.c     **** 	return bottom;
 111              		.loc 1 400 2 is_stmt 1 view .LVU32
 400:src/xeq.c     **** 	return bottom;
 112              		.loc 1 400 9 is_stmt 0 view .LVU33
 113 0042 1380     		strh	r3, [r2]	@ movhi
 401:src/xeq.c     **** }
 114              		.loc 1 401 2 is_stmt 1 view .LVU34
 115              		.loc 1 402 1 is_stmt 0 view .LVU35
 116 0044 7047     		bx	lr
 117              	.LVL9:
 118              	.L13:
 389:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 119              		.loc 1 389 3 is_stmt 1 view .LVU36
 390:src/xeq.c     **** 	} 
 120              		.loc 1 390 3 view .LVU37
 390:src/xeq.c     **** 	} 
 121              		.loc 1 390 10 is_stmt 0 view .LVU38
 122 0046 0B4B     		ldr	r3, .L14+12
 123 0048 1888     		ldrh	r0, [r3]
 124              	.LVL10:
 389:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 125              		.loc 1 389 7 view .LVU39
 126 004a 4CF20103 		movw	r3, #49153
 390:src/xeq.c     **** 	} 
 127              		.loc 1 390 10 view .LVU40
 128 004e 40F44040 		orr	r0, r0, #49152
 129              	.LVL11:
 400:src/xeq.c     **** 	return bottom;
 130              		.loc 1 400 2 is_stmt 1 view .LVU41
 400:src/xeq.c     **** 	return bottom;
 131              		.loc 1 400 9 is_stmt 0 view .LVU42
 132 0052 1380     		strh	r3, [r2]	@ movhi
 401:src/xeq.c     **** }
 133              		.loc 1 401 2 is_stmt 1 view .LVU43
 134              		.loc 1 402 1 is_stmt 0 view .LVU44
 135 0054 7047     		bx	lr
 136              	.LVL12:
 137              	.L5:
 397:src/xeq.c     **** 		bottom = ProgSize;
 138              		.loc 1 397 3 is_stmt 1 view .LVU45
 397:src/xeq.c     **** 		bottom = ProgSize;
ARM GAS  /tmp/ccQlyisH.s 			page 11


 139              		.loc 1 397 15 is_stmt 0 view .LVU46
 140 0056 044B     		ldr	r3, .L14
 398:src/xeq.c     **** 	}
 141              		.loc 1 398 10 view .LVU47
 142 0058 0449     		ldr	r1, .L14+4
 143              	.LVL13:
 397:src/xeq.c     **** 		bottom = ProgSize;
 144              		.loc 1 397 15 view .LVU48
 145 005a 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 398:src/xeq.c     **** 	}
 146              		.loc 1 398 10 view .LVU49
 147 005c 0968     		ldr	r1, [r1]
 397:src/xeq.c     **** 		bottom = ProgSize;
 148              		.loc 1 397 7 view .LVU50
 149 005e C3F38013 		ubfx	r3, r3, #6, #1
 150              	.LVL14:
 398:src/xeq.c     **** 	}
 151              		.loc 1 398 3 is_stmt 1 view .LVU51
 398:src/xeq.c     **** 	}
 152              		.loc 1 398 10 is_stmt 0 view .LVU52
 153 0062 4888     		ldrh	r0, [r1, #2]
 154              	.LVL15:
 400:src/xeq.c     **** 	return bottom;
 155              		.loc 1 400 2 is_stmt 1 view .LVU53
 400:src/xeq.c     **** 	return bottom;
 156              		.loc 1 400 9 is_stmt 0 view .LVU54
 157 0064 1380     		strh	r3, [r2]	@ movhi
 401:src/xeq.c     **** }
 158              		.loc 1 401 2 is_stmt 1 view .LVU55
 159              		.loc 1 402 1 is_stmt 0 view .LVU56
 160 0066 7047     		bx	lr
 161              	.L15:
 162              		.align	2
 163              	.L14:
 164 0068 00000000 		.word	StateWhileOn
 165 006c 00000000 		.word	main_ram
 166 0070 00000000 		.word	.LANCHOR0
 167 0074 00000000 		.word	xrom_size
 168              		.cfi_endproc
 169              	.LFE19:
 171              		.section	.text.reg_address,"ax",%progbits
 172              		.align	1
 173              		.p2align 2,,3
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu fpv4-sp-d16
 179              	reg_address:
 180              	.LVL16:
 181              	.LFB89:
 403:src/xeq.c     **** 
 404:src/xeq.c     **** 
 405:src/xeq.c     **** /* Increment the passed PC.  Account for wrap around but nothing else.
 406:src/xeq.c     ****  * Return the updated PC.
 407:src/xeq.c     ****  * Set PcWrapped on wrap around
 408:src/xeq.c     ****  */
 409:src/xeq.c     **** unsigned int do_inc(const unsigned int pc, int endp) {
ARM GAS  /tmp/ccQlyisH.s 			page 12


 410:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 411:src/xeq.c     **** 	unsigned short int top = 0;
 412:src/xeq.c     **** 	unsigned short int bottom = 0;
 413:src/xeq.c     **** 
 414:src/xeq.c     **** 	PcWrapped = 0;
 415:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 416:src/xeq.c     **** 
 417:src/xeq.c     **** 	if (npc > bottom) {
 418:src/xeq.c     **** 		PcWrapped = 1;
 419:src/xeq.c     **** 		return top;
 420:src/xeq.c     **** 	}
 421:src/xeq.c     **** 	return npc;
 422:src/xeq.c     **** }
 423:src/xeq.c     **** 
 424:src/xeq.c     **** /* Decrement the passed PC.  Account for wrap around but nothing else.
 425:src/xeq.c     ****  * Return the updated PC.
 426:src/xeq.c     ****  * Set PcWrapped on wrap around
 427:src/xeq.c     ****  */
 428:src/xeq.c     **** unsigned int do_dec(unsigned int pc, int endp) {
 429:src/xeq.c     **** 	unsigned short int top = 0;
 430:src/xeq.c     **** 	unsigned short int bottom = 0;
 431:src/xeq.c     **** 
 432:src/xeq.c     **** 	PcWrapped = 0;
 433:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 434:src/xeq.c     **** 
 435:src/xeq.c     **** 	if (pc <= top) {
 436:src/xeq.c     **** 		PcWrapped = 1;
 437:src/xeq.c     **** 		pc = bottom;
 438:src/xeq.c     **** 	}
 439:src/xeq.c     **** 	else
 440:src/xeq.c     **** 		--pc;
 441:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 442:src/xeq.c     **** 		--pc;
 443:src/xeq.c     **** 	return pc;
 444:src/xeq.c     **** }
 445:src/xeq.c     **** 
 446:src/xeq.c     **** /* Increment the PC keeping account of wrapping around and stopping
 447:src/xeq.c     ****  * programs on such.  Return non-zero if we wrapped.
 448:src/xeq.c     ****  */
 449:src/xeq.c     **** int incpc(void) {
 450:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 451:src/xeq.c     **** 	return PcWrapped;
 452:src/xeq.c     **** }
 453:src/xeq.c     **** 
 454:src/xeq.c     **** void decpc(void) {
 455:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 456:src/xeq.c     **** }
 457:src/xeq.c     **** 
 458:src/xeq.c     **** /*
 459:src/xeq.c     ****  * Update the pointers to the current program delimited by END statements
 460:src/xeq.c     ****  */
 461:src/xeq.c     **** void update_program_bounds(const int force) {
 462:src/xeq.c     **** 	unsigned int pc = state_pc();
 463:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 464:src/xeq.c     **** 		State.pc = pc = 1;
 465:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 466:src/xeq.c     **** 		return;
ARM GAS  /tmp/ccQlyisH.s 			page 13


 467:src/xeq.c     **** 	for (PcWrapped = 0; !PcWrapped; pc = do_inc(pc, 0)) {
 468:src/xeq.c     **** 		ProgEnd = pc;
 469:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 470:src/xeq.c     **** 			break;
 471:src/xeq.c     **** 		}
 472:src/xeq.c     **** 	}
 473:src/xeq.c     **** 	for (pc = state_pc();;) {
 474:src/xeq.c     **** 		const unsigned int opc = pc;
 475:src/xeq.c     **** 		pc = do_dec(opc, 0);
 476:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 477:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 478:src/xeq.c     **** 			break;
 479:src/xeq.c     **** 		}
 480:src/xeq.c     **** 	}
 481:src/xeq.c     **** }
 482:src/xeq.c     **** 
 483:src/xeq.c     **** /* Determine where in program space the PC really is
 484:src/xeq.c     ****  */
 485:src/xeq.c     **** unsigned int user_pc(unsigned int pc) {
 486:src/xeq.c     **** 	unsigned int n = 1;
 487:src/xeq.c     **** 	unsigned int base;
 488:src/xeq.c     **** 
 489:src/xeq.c     **** #ifndef REALBUILD
 490:src/xeq.c     **** 	if (pc == 0 || isXROM(pc))
 491:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 492:src/xeq.c     **** #else
 493:src/xeq.c     **** 	if (pc == 0)
 494:src/xeq.c     **** 		return 0;
 495:src/xeq.c     **** #endif
 496:src/xeq.c     **** 	base = startLIB(pc);
 497:src/xeq.c     **** 	while (base < pc) {
 498:src/xeq.c     **** 		base = do_inc(base, 0);
 499:src/xeq.c     **** 		if (PcWrapped)
 500:src/xeq.c     **** 			return n;
 501:src/xeq.c     **** 		++n;
 502:src/xeq.c     **** 	}
 503:src/xeq.c     **** 	return n;
 504:src/xeq.c     **** }
 505:src/xeq.c     **** 
 506:src/xeq.c     **** /* Given a target user PC, figure out the real matching PC
 507:src/xeq.c     ****  */
 508:src/xeq.c     **** unsigned int find_user_pc(unsigned int target) {
 509:src/xeq.c     **** 	unsigned int upc = state_pc();
 510:src/xeq.c     **** 	const int libp = isLIB(upc);
 511:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 512:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 513:src/xeq.c     **** #ifndef REALBUILD
 514:src/xeq.c     **** 	if (isXROM(upc))
 515:src/xeq.c     **** 		return addrXROM(target);
 516:src/xeq.c     **** #endif
 517:src/xeq.c     **** 	while (n++ < target) {
 518:src/xeq.c     **** 		const unsigned int oldbase = base;
 519:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 520:src/xeq.c     **** 		if (PcWrapped)
 521:src/xeq.c     **** 			return oldbase;
 522:src/xeq.c     **** 	}
 523:src/xeq.c     **** 	return base;
ARM GAS  /tmp/ccQlyisH.s 			page 14


 524:src/xeq.c     **** }
 525:src/xeq.c     **** 
 526:src/xeq.c     **** 
 527:src/xeq.c     **** /* Set a flag to indicate that a complex operation has taken place
 528:src/xeq.c     ****  * The flag disappears with the next command executed.
 529:src/xeq.c     ****  */
 530:src/xeq.c     **** static void set_was_complex(void) {
 531:src/xeq.c     **** 	State2.wascomplex = 1;
 532:src/xeq.c     **** }
 533:src/xeq.c     **** 
 534:src/xeq.c     **** 
 535:src/xeq.c     **** /* Produce an error and stop
 536:src/xeq.c     ****  */
 537:src/xeq.c     **** int report_err(const unsigned int e) {
 538:src/xeq.c     **** 	if (Error == ERR_NONE) {
 539:src/xeq.c     **** 		Error = e;
 540:src/xeq.c     **** 		if (e == ERR_NONE) {
 541:src/xeq.c     **** 			error_message(e); // "Running Program"
 542:src/xeq.c     **** 			return 0;
 543:src/xeq.c     **** 		}
 544:src/xeq.c     **** 	}
 545:src/xeq.c     **** 	return 1;
 546:src/xeq.c     **** }
 547:src/xeq.c     **** 
 548:src/xeq.c     **** 
 549:src/xeq.c     **** /* Display a warning
 550:src/xeq.c     ****  */
 551:src/xeq.c     **** int report_warn(const unsigned int e) {
 552:src/xeq.c     **** 	if (Running) {
 553:src/xeq.c     **** 		return report_err(e);
 554:src/xeq.c     **** 	}
 555:src/xeq.c     **** 	error_message(e);
 556:src/xeq.c     **** #ifndef CONSOLE
 557:src/xeq.c     **** 	State2.disp_freeze = 0;
 558:src/xeq.c     **** 	JustDisplayed = 1;
 559:src/xeq.c     **** 	ShowRPN = 1;
 560:src/xeq.c     **** #endif
 561:src/xeq.c     **** 	return e != ERR_NONE;
 562:src/xeq.c     **** }
 563:src/xeq.c     **** 
 564:src/xeq.c     **** 
 565:src/xeq.c     **** /* Doing something in the wrong mode */
 566:src/xeq.c     **** void bad_mode_error(void) {
 567:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 568:src/xeq.c     **** }
 569:src/xeq.c     **** 
 570:src/xeq.c     **** 
 571:src/xeq.c     **** /* User command to produce an error */
 572:src/xeq.c     **** void cmderr(unsigned int arg, enum rarg op) {
 573:src/xeq.c     **** 	report_err(arg);
 574:src/xeq.c     **** }
 575:src/xeq.c     **** 
 576:src/xeq.c     **** 
 577:src/xeq.c     **** /* User command to display a warning */
 578:src/xeq.c     **** void cmdmsg(unsigned int arg, enum rarg op) {
 579:src/xeq.c     **** 	error_message(arg);
 580:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 15


 581:src/xeq.c     **** 
 582:src/xeq.c     **** 
 583:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE)
 584:src/xeq.c     **** #include <stdlib.h>
 585:src/xeq.c     **** static void error(const char *fmt, ...) {
 586:src/xeq.c     **** 	va_list ap;
 587:src/xeq.c     **** 	va_start(ap, fmt);
 588:src/xeq.c     **** 	vprintf(fmt, ap);
 589:src/xeq.c     **** 	va_end(ap);
 590:src/xeq.c     **** 	putchar('\n');
 591:src/xeq.c     **** 	exit(1);
 592:src/xeq.c     **** }
 593:src/xeq.c     **** 
 594:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); printf("illegal opcode 0x%08x\n", op); } while (
 595:src/xeq.c     **** #else
 596:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); } while (0)
 597:src/xeq.c     **** #endif
 598:src/xeq.c     **** 
 599:src/xeq.c     **** /* Real rounding mode access routine
 600:src/xeq.c     ****  */
 601:src/xeq.c     **** static enum rounding get_rounding_mode() {
 602:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 603:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 604:src/xeq.c     **** 		DEC_ROUND_UP, DEC_ROUND_DOWN,
 605:src/xeq.c     **** 		DEC_ROUND_CEILING, DEC_ROUND_FLOOR
 606:src/xeq.c     **** 	};
 607:src/xeq.c     **** 	return (enum rounding) modes[UState.rounding_mode];
 608:src/xeq.c     **** }
 609:src/xeq.c     **** 
 610:src/xeq.c     **** void op_roundingmode(enum nilop op) {
 611:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 612:src/xeq.c     **** }
 613:src/xeq.c     **** 
 614:src/xeq.c     **** void rarg_roundingmode(unsigned int arg, enum rarg op) {
 615:src/xeq.c     **** 	UState.rounding_mode = arg;
 616:src/xeq.c     **** }
 617:src/xeq.c     **** 
 618:src/xeq.c     **** 
 619:src/xeq.c     **** /* Pack a number into our DPD register format
 620:src/xeq.c     ****  */
 621:src/xeq.c     **** 
 622:src/xeq.c     **** void packed_from_number(decimal64 *r, const decNumber *x) {
 623:src/xeq.c     **** 	decContext ctx64;
 624:src/xeq.c     **** 
 625:src/xeq.c     **** 	decContextDefault(&ctx64, DEC_INIT_DECIMAL64);
 626:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 627:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 628:src/xeq.c     **** }
 629:src/xeq.c     **** 
 630:src/xeq.c     **** void packed128_from_number(decimal128 *r, const decNumber *x) {
 631:src/xeq.c     **** 	decContext ctx128;
 632:src/xeq.c     **** 
 633:src/xeq.c     **** 	decContextDefault(&ctx128, DEC_INIT_DECIMAL128);
 634:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 635:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 636:src/xeq.c     **** }
 637:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 16


 638:src/xeq.c     **** // Repack a decimal128 to decimal64
 639:src/xeq.c     **** void packed_from_packed128(decimal64 *r, const decimal128 *s) {
 640:src/xeq.c     **** 	decNumber temp;
 641:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 642:src/xeq.c     **** }
 643:src/xeq.c     **** 
 644:src/xeq.c     **** // Repack a decimal64 to decimal128
 645:src/xeq.c     **** void packed128_from_packed(decimal128 *r, const decimal64 *s) {
 646:src/xeq.c     **** 	decNumber temp;
 647:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 648:src/xeq.c     **** }
 649:src/xeq.c     **** 
 650:src/xeq.c     **** /*
 651:src/xeq.c     ****  *  User command to round to a specific number of digits
 652:src/xeq.c     ****  */
 653:src/xeq.c     **** void rarg_round(unsigned int arg, enum rarg op) {
 654:src/xeq.c     **** 	decNumber res, x;
 655:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 656:src/xeq.c     **** 
 657:src/xeq.c     **** 	if (is_intmode()) {
 658:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 659:src/xeq.c     **** 		return;
 660:src/xeq.c     **** 	}
 661:src/xeq.c     **** 
 662:src/xeq.c     **** 	setlastX();
 663:src/xeq.c     **** 	getX(&x);
 664:src/xeq.c     **** 	if (op == RARG_ROUND)
 665:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 666:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 667:src/xeq.c     **** 		decNumberRoundDecimals(&res, &x, arg, rm);
 668:src/xeq.c     **** 	setX(&res);
 669:src/xeq.c     **** }
 670:src/xeq.c     **** 
 671:src/xeq.c     **** /* Check if a value is bogus and error out if so.
 672:src/xeq.c     ****  * A value is bogus if it is infinite, NaN *and* flag D is not set.
 673:src/xeq.c     ****  * If flag D is set, these values are allowed through just fine.
 674:src/xeq.c     ****  */
 675:src/xeq.c     **** static int check_special(const decNumber *x) {
 676:src/xeq.c     **** 	decNumber y;
 677:src/xeq.c     **** 	decimal64 z;
 678:src/xeq.c     **** 	decimal128 d;
 679:src/xeq.c     **** 	if (is_dblmode()) {
 680:src/xeq.c     **** 		packed128_from_number(&d, x);
 681:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 682:src/xeq.c     **** 	}
 683:src/xeq.c     **** 	else 
 684:src/xeq.c     **** 	{
 685:src/xeq.c     **** 		packed_from_number(&z, x);
 686:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 687:src/xeq.c     **** 	}
 688:src/xeq.c     **** 	if (decNumberIsSpecial(&y)) {
 689:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 690:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 691:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 692:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 693:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 694:src/xeq.c     **** 			else
ARM GAS  /tmp/ccQlyisH.s 			page 17


 695:src/xeq.c     **** 				report_err(ERR_INFINITY);
 696:src/xeq.c     **** 			return 1;
 697:src/xeq.c     **** 		}
 698:src/xeq.c     **** 	}
 699:src/xeq.c     **** 	return 0;
 700:src/xeq.c     **** }
 701:src/xeq.c     **** 
 702:src/xeq.c     **** 
 703:src/xeq.c     **** int stack_size(void) {
 704:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 705:src/xeq.c     **** 		return 4;
 706:src/xeq.c     **** 	return 8;
 707:src/xeq.c     **** }
 708:src/xeq.c     **** 
 709:src/xeq.c     **** REGISTER *get_stack(int pos) {
 710:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 711:src/xeq.c     **** }
 712:src/xeq.c     **** 
 713:src/xeq.c     **** static REGISTER *get_stack_top(void) {
 714:src/xeq.c     **** 	return get_stack(stack_size()-1);
 715:src/xeq.c     **** }
 716:src/xeq.c     **** 
 717:src/xeq.c     **** void copyreg(REGISTER *d, const REGISTER *s) {
 718:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 719:src/xeq.c     **** }
 720:src/xeq.c     **** 
 721:src/xeq.c     **** void copyreg_n(int d, int s) {
 722:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 723:src/xeq.c     **** }
 724:src/xeq.c     **** 
 725:src/xeq.c     **** /* Lift the stack one level.
 726:src/xeq.c     ****  */
 727:src/xeq.c     **** void lift(void) {
 728:src/xeq.c     **** 	const int n = stack_size();
 729:src/xeq.c     **** 	int i;
 730:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 731:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 732:src/xeq.c     **** }
 733:src/xeq.c     **** 
 734:src/xeq.c     **** static int get_lift(void) {
 735:src/xeq.c     **** 	return State2.state_lift;
 736:src/xeq.c     **** }
 737:src/xeq.c     **** 
 738:src/xeq.c     **** void lift_if_enabled(void) {
 739:src/xeq.c     **** 	if (get_lift())
 740:src/xeq.c     **** 		lift();
 741:src/xeq.c     **** }
 742:src/xeq.c     **** 
 743:src/xeq.c     **** static void lift2_if_enabled(void) {
 744:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 745:src/xeq.c     **** 	lift_if_enabled();
 746:src/xeq.c     **** 	if (C_LOCKED) {
 747:src/xeq.c     **** 		lift_if_enabled();
 748:src/xeq.c     **** 	}
 749:src/xeq.c     **** 	else {
 750:src/xeq.c     **** 		lift();
 751:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQlyisH.s 			page 18


 752:src/xeq.c     **** #else
 753:src/xeq.c     **** 	lift_if_enabled();
 754:src/xeq.c     **** 	lift();
 755:src/xeq.c     **** #endif
 756:src/xeq.c     **** }
 757:src/xeq.c     **** 
 758:src/xeq.c     **** void set_lift(void) {
 759:src/xeq.c     ****     State2.state_lift = 1;
 760:src/xeq.c     **** }
 761:src/xeq.c     **** 
 762:src/xeq.c     **** static void clr_lift(void) {
 763:src/xeq.c     ****     State2.state_lift = 0;
 764:src/xeq.c     **** }
 765:src/xeq.c     **** 
 766:src/xeq.c     **** static void lower(void) {
 767:src/xeq.c     **** 	const int n = stack_size();
 768:src/xeq.c     **** 	int i;
 769:src/xeq.c     **** 
 770:src/xeq.c     **** 	for (i=1; i<n; i++)
 771:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 772:src/xeq.c     **** }
 773:src/xeq.c     **** 
 774:src/xeq.c     **** static void lower2(void) {
 775:src/xeq.c     **** 	const int n = stack_size();
 776:src/xeq.c     **** 	int i;
 777:src/xeq.c     **** 
 778:src/xeq.c     **** 	for (i=2; i<n; i++)
 779:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 780:src/xeq.c     **** }
 781:src/xeq.c     **** 
 782:src/xeq.c     **** 
 783:src/xeq.c     **** void setlastX(void) {
 784:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 785:src/xeq.c     **** }
 786:src/xeq.c     **** 
 787:src/xeq.c     **** static void setlastXY(void) {
 788:src/xeq.c     **** 	setlastX();
 789:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 790:src/xeq.c     **** }
 791:src/xeq.c     **** 
 792:src/xeq.c     **** 
 793:src/xeq.c     **** decNumber *getRegister(decNumber *r, int index) {
 794:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 795:src/xeq.c     **** 	if (is_dblmode())
 796:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 797:src/xeq.c     **** 	else
 798:src/xeq.c     **** 		decimal64ToNumber(&(reg->s), r);
 799:src/xeq.c     **** 	return r;
 800:src/xeq.c     **** }
 801:src/xeq.c     **** 
 802:src/xeq.c     **** void setRegister(int index, const decNumber *x) {
 803:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 804:src/xeq.c     **** 	decNumber dn;
 805:src/xeq.c     **** 
 806:src/xeq.c     **** 	if (! check_special(x)) {	/* This correctly deals with infinities and NaN based on flag D */
 807:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 808:src/xeq.c     **** 		if (is_dblmode())
ARM GAS  /tmp/ccQlyisH.s 			page 19


 809:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 810:src/xeq.c     **** 		else
 811:src/xeq.c     **** 			packed_from_number(&(reg->s), &dn);
 812:src/xeq.c     **** 	}
 813:src/xeq.c     **** }
 814:src/xeq.c     **** 
 815:src/xeq.c     **** decNumber *getX(decNumber *x) {
 816:src/xeq.c     **** 	return getRegister(x, regX_idx);
 817:src/xeq.c     **** }
 818:src/xeq.c     **** 
 819:src/xeq.c     **** void setX(const decNumber *x) {
 820:src/xeq.c     **** 	setRegister(regX_idx, x);
 821:src/xeq.c     **** }
 822:src/xeq.c     **** 
 823:src/xeq.c     **** void getY(decNumber *y) {
 824:src/xeq.c     **** 	getRegister(y, regY_idx);
 825:src/xeq.c     **** }
 826:src/xeq.c     **** 
 827:src/xeq.c     **** void setY(const decNumber *y) {
 828:src/xeq.c     **** 	setRegister(regY_idx, y);
 829:src/xeq.c     **** }
 830:src/xeq.c     **** 
 831:src/xeq.c     **** static void getZ(decNumber *z) {
 832:src/xeq.c     **** 	getRegister(z, regZ_idx);
 833:src/xeq.c     **** }
 834:src/xeq.c     **** 
 835:src/xeq.c     **** #if 0
 836:src/xeq.c     **** static void setZ(const decNumber *z) {
 837:src/xeq.c     **** 	setRegister(regZ_idx, z);
 838:src/xeq.c     **** }
 839:src/xeq.c     **** #endif
 840:src/xeq.c     **** 
 841:src/xeq.c     **** static void getT(decNumber *t) {
 842:src/xeq.c     **** 	getRegister(t, regT_idx);
 843:src/xeq.c     **** }
 844:src/xeq.c     **** 
 845:src/xeq.c     **** void getXY(decNumber *x, decNumber *y) {
 846:src/xeq.c     **** 	getX(x);
 847:src/xeq.c     **** 	getY(y);
 848:src/xeq.c     **** }
 849:src/xeq.c     **** 
 850:src/xeq.c     **** void setXY(const decNumber *x, const decNumber *y) {
 851:src/xeq.c     **** 	setX(x);
 852:src/xeq.c     **** 	setY(y);
 853:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 854:src/xeq.c     **** 	CLEAR_POLAR_READY;
 855:src/xeq.c     **** #endif
 856:src/xeq.c     **** }
 857:src/xeq.c     **** 
 858:src/xeq.c     **** void getXYZ(decNumber *x, decNumber *y, decNumber *z) {
 859:src/xeq.c     **** 	getXY(x, y);
 860:src/xeq.c     **** 	getZ(z);
 861:src/xeq.c     **** }
 862:src/xeq.c     **** 
 863:src/xeq.c     **** #if 0
 864:src/xeq.c     **** void setXYZ(const decNumber *x, const decNumber *y, const decNumber *z) {
 865:src/xeq.c     **** 	setXY(x, y);
ARM GAS  /tmp/ccQlyisH.s 			page 20


 866:src/xeq.c     **** 	setZ(z);
 867:src/xeq.c     **** }
 868:src/xeq.c     **** #endif
 869:src/xeq.c     **** 
 870:src/xeq.c     **** void getXYZT(decNumber *x, decNumber *y, decNumber *z, decNumber *t) {
 871:src/xeq.c     **** 	getXYZ(x, y, z);
 872:src/xeq.c     **** 	getT(t);
 873:src/xeq.c     **** }
 874:src/xeq.c     **** 
 875:src/xeq.c     **** void getYZ(decNumber *y, decNumber *z) {
 876:src/xeq.c     **** 	getY(y);
 877:src/xeq.c     **** 	getZ(z);
 878:src/xeq.c     **** }
 879:src/xeq.c     **** 
 880:src/xeq.c     **** void roll_down(enum nilop op) {
 881:src/xeq.c     **** 	REGISTER r;
 882:src/xeq.c     **** 	copyreg(&r, StackBase);
 883:src/xeq.c     **** 	lower();
 884:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 885:src/xeq.c     **** }
 886:src/xeq.c     **** 
 887:src/xeq.c     **** void roll_up(enum nilop op) {
 888:src/xeq.c     **** 	REGISTER r;
 889:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 890:src/xeq.c     **** 	lift();
 891:src/xeq.c     **** 	copyreg(StackBase, &r);
 892:src/xeq.c     **** }
 893:src/xeq.c     **** 
 894:src/xeq.c     **** void cpx_roll_down(enum nilop op) {
 895:src/xeq.c     **** 	roll_down(OP_RDOWN);
 896:src/xeq.c     **** 	roll_down(OP_RDOWN);
 897:src/xeq.c     **** 	set_was_complex();
 898:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 899:src/xeq.c     **** 	CLEAR_POLAR_READY;
 900:src/xeq.c     **** #endif
 901:src/xeq.c     **** }
 902:src/xeq.c     **** 
 903:src/xeq.c     **** void cpx_roll_up(enum nilop op) {
 904:src/xeq.c     **** 	roll_up(OP_RUP);
 905:src/xeq.c     **** 	roll_up(OP_RUP);
 906:src/xeq.c     **** 	set_was_complex();
 907:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 908:src/xeq.c     **** 	CLEAR_POLAR_READY;
 909:src/xeq.c     **** #endif
 910:src/xeq.c     **** }
 911:src/xeq.c     **** 
 912:src/xeq.c     **** void cpx_enter(enum nilop op) {
 913:src/xeq.c     **** #ifdef ENTRY_RPN
 914:src/xeq.c     **** 	if(	State2.state_lift || (XromRunning || Running) ) {
 915:src/xeq.c     **** //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same exception
 916:src/xeq.c     **** 		lift();
 917:src/xeq.c     **** 		lift();
 918:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 919:src/xeq.c     **** 		set_was_complex();
 920:src/xeq.c     **** 	}
 921:src/xeq.c     **** #else
 922:src/xeq.c     **** 	lift();
ARM GAS  /tmp/ccQlyisH.s 			page 21


 923:src/xeq.c     **** 	lift();
 924:src/xeq.c     **** 	copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 925:src/xeq.c     **** 	set_was_complex();
 926:src/xeq.c     **** #endif
 927:src/xeq.c     **** }
 928:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 929:src/xeq.c     **** 
 930:src/xeq.c     **** void convert_regK ( enum trig_modes i ) { // needed to change the displayed angular part in polar m
 931:src/xeq.c     **** 	decNumber k;
 932:src/xeq.c     **** 
 933:src/xeq.c     **** 	enum trig_modes j = get_trig_mode();
 934:src/xeq.c     **** 	if (i==j) return; // no mode change
 935:src/xeq.c     **** 	getRegister(&k, regK_idx);
 936:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 937:src/xeq.c     **** 		case TRIG_DEG:
 938:src/xeq.c     **** 			dn_divide(&k, &k, &const_360);
 939:src/xeq.c     **** 			break;
 940:src/xeq.c     **** 		case TRIG_RAD:
 941:src/xeq.c     **** 			dn_divide(&k, &k, &const_2PI);
 942:src/xeq.c     **** 			break;
 943:src/xeq.c     **** 		case TRIG_GRAD:
 944:src/xeq.c     **** 			dn_divide(&k, &k, &const_400);
 945:src/xeq.c     **** 		default:;
 946:src/xeq.c     **** 	}
 947:src/xeq.c     **** 	switch (i) { // convert to new angular units
 948:src/xeq.c     **** 		case TRIG_DEG:
 949:src/xeq.c     **** 			dn_multiply(&k, &k, &const_360);
 950:src/xeq.c     **** 			break;
 951:src/xeq.c     **** 		case TRIG_RAD:
 952:src/xeq.c     **** 			dn_multiply(&k, &k, &const_2PI);
 953:src/xeq.c     **** 			break;
 954:src/xeq.c     **** 		case TRIG_GRAD:
 955:src/xeq.c     **** 			dn_multiply(&k, &k, &const_400);
 956:src/xeq.c     **** 		default:;
 957:src/xeq.c     **** 	}
 958:src/xeq.c     **** 	setRegister(regK_idx, &k);
 959:src/xeq.c     **** }
 960:src/xeq.c     **** 
 961:src/xeq.c     **** void finish_cpx_entry ( int lift );
 962:src/xeq.c     **** void stack_begin ( int zero_y ); // defined in keys.c - needed so it can be called here
 963:src/xeq.c     **** 
 964:src/xeq.c     **** void cpx_pi (enum nilop op) {
 965:src/xeq.c     **** 	switch (op) {
 966:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 967:src/xeq.c     **** 		if (!REAL_FLAG && !IMAG_FLAG) {
 968:src/xeq.c     **** 			stack_begin( 1 );
 969:src/xeq.c     **** 			SET_REAL;
 970:src/xeq.c     **** 		}
 971:src/xeq.c     **** 		copyreg(StackBase, get_const(OP_PI, is_dblmode()));
 972:src/xeq.c     **** 		break;
 973:src/xeq.c     **** 	case OP_PIB: // command line present - multiplies contents by pi
 974:src/xeq.c     **** 		State2.state_lift = 0;
 975:src/xeq.c     **** 		process_cmdline();
 976:src/xeq.c     **** 		State2.state_lift = 0;
 977:src/xeq.c     **** 		{
 978:src/xeq.c     **** 			decNumber r;
 979:src/xeq.c     **** 			getX(&r);
ARM GAS  /tmp/ccQlyisH.s 			page 22


 980:src/xeq.c     **** 			dn_multiply (&r, &const_PI, &r);
 981:src/xeq.c     **** 			setX(&r);
 982:src/xeq.c     **** 		}
 983:src/xeq.c     **** 	default:;
 984:src/xeq.c     **** 	}
 985:src/xeq.c     **** 	CLEAR_POLAR_READY;
 986:src/xeq.c     **** }
 987:src/xeq.c     **** 
 988:src/xeq.c     **** void cpx_nop(enum nilop op) { // miscellaneous complex operations
 989:src/xeq.c     **** 	reset_shift();
 990:src/xeq.c     **** 	switch (op) {
 991:src/xeq.c     **** 	case OP_CYES: // set flag to allow complex mode to be entered - can be called at any time
 992:src/xeq.c     **** 	        SET_CPX_YES;
 993:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 994:src/xeq.c     **** 		CLEAR_IMAG;
 995:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
 996:src/xeq.c     **** 		return;
 997:src/xeq.c     **** 	case OP_C_ON: // start complex mode - only called if CPX_ENABLED and C_LOCK_OFF
 998:src/xeq.c     **** 		if (UState.stack_depth) { // save prior stack size 
 999:src/xeq.c     **** 			INIT_8;
1000:src/xeq.c     **** 		}
1001:src/xeq.c     **** 		else {
1002:src/xeq.c     **** 			INIT_4;
1003:src/xeq.c     **** 		}
1004:src/xeq.c     **** 		LOCK_C;
1005:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
1006:src/xeq.c     **** 		break;
1007:src/xeq.c     **** 	case OP_CNO: // reset flag so that complex mode cannot be entered
1008:src/xeq.c     **** 		if (!C_LOCKED) { 
1009:src/xeq.c     **** 			SET_CPX_NO;
1010:src/xeq.c     **** 			UNLOCK_C; //just in case
1011:src/xeq.c     **** 			return;
1012:src/xeq.c     **** 		}
1013:src/xeq.c     **** 		SET_CPX_NO;
1014:src/xeq.c     **** 	case OP_C_OFF: // exit complex mode - only called if CPX_ENABLED and C_LOCK_ON
1015:src/xeq.c     **** 		finish_cpx_entry(1);
1016:src/xeq.c     **** 		UNLOCK_C;
1017:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
1018:src/xeq.c     **** 		State2.wascomplex = 0;
1019:src/xeq.c     **** 		return;
1020:src/xeq.c     **** 	case OP_C_MIM: // change sign of imaginary part
1021:src/xeq.c     **** 		{
1022:src/xeq.c     **** 		decNumber y;
1023:src/xeq.c     **** 		getY(&y);
1024:src/xeq.c     **** 		dn_minus(&y, &y);
1025:src/xeq.c     **** 		setY(&y);
1026:src/xeq.c     **** 		}
1027:src/xeq.c     **** 		break;
1028:src/xeq.c     **** 	case OP_C_MRE: // change sign of real part
1029:src/xeq.c     **** 		{
1030:src/xeq.c     **** 		decNumber x;
1031:src/xeq.c     **** 		getX(&x);
1032:src/xeq.c     **** 		dn_minus(&x, &x);
1033:src/xeq.c     **** 		setX(&x);
1034:src/xeq.c     **** 		}
1035:src/xeq.c     **** 		break;
1036:src/xeq.c     **** 	case OP_C_IM: // zero real part
ARM GAS  /tmp/ccQlyisH.s 			page 23


1037:src/xeq.c     **** 		zero_X();
1038:src/xeq.c     **** 		break;
1039:src/xeq.c     **** 	case OP_C_RE: // zero imag part
1040:src/xeq.c     **** 		zero_Y();
1041:src/xeq.c     **** 		break;
1042:src/xeq.c     **** 	case OP_CPXI: // use i to display complex numbers
1043:src/xeq.c     **** 		SET_CPX_I;
1044:src/xeq.c     **** 		break;
1045:src/xeq.c     **** 	case OP_CPXJ: // use j to display complex numbers
1046:src/xeq.c     **** 		SET_CPX_J;
1047:src/xeq.c     **** 		break;
1048:src/xeq.c     **** 	default:;
1049:src/xeq.c     **** 	}
1050:src/xeq.c     **** 	set_was_complex();
1051:src/xeq.c     **** 	CLEAR_POLAR_READY;
1052:src/xeq.c     **** }
1053:src/xeq.c     **** #endif
1054:src/xeq.c     **** 
1055:src/xeq.c     **** void cpx_fill(enum nilop op) {
1056:src/xeq.c     **** 	const int n = stack_size();
1057:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
1058:src/xeq.c     **** 	int i;
1059:src/xeq.c     **** 
1060:src/xeq.c     **** 	for (i=2; i<n; i++)
1061:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
1062:src/xeq.c     **** 	set_was_complex();
1063:src/xeq.c     **** }
1064:src/xeq.c     **** 
1065:src/xeq.c     **** void fill(enum nilop op) {
1066:src/xeq.c     **** 	const int n = stack_size();
1067:src/xeq.c     **** 	int i;
1068:src/xeq.c     **** 
1069:src/xeq.c     **** 	for (i=1; i<n; i++)
1070:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
1071:src/xeq.c     **** }
1072:src/xeq.c     **** 
1073:src/xeq.c     **** void drop(enum nilop op) {
1074:src/xeq.c     **** 	if (op == OP_DROPXY) {
1075:src/xeq.c     **** 		lower2();
1076:src/xeq.c     **** 		set_was_complex();
1077:src/xeq.c     **** 	} else
1078:src/xeq.c     **** 		lower();
1079:src/xeq.c     **** }
1080:src/xeq.c     **** 
1081:src/xeq.c     **** #ifndef is_intmode
1082:src/xeq.c     **** int is_intmode(void) {
1083:src/xeq.c     **** 	return UState.intm;
1084:src/xeq.c     **** }
1085:src/xeq.c     **** #endif
1086:src/xeq.c     **** 
1087:src/xeq.c     **** int is_dblmode(void) {
1088:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
1089:src/xeq.c     **** }
1090:src/xeq.c     **** 
1091:src/xeq.c     **** int is_usrdblmode(void) {
1092:src/xeq.c     **** 	if (XromFlags.xIN)
1093:src/xeq.c     **** 		return XromFlags.mode_double;
ARM GAS  /tmp/ccQlyisH.s 			page 24


1094:src/xeq.c     **** 	return is_dblmode();
1095:src/xeq.c     **** }
1096:src/xeq.c     **** 
1097:src/xeq.c     **** /* Convert a possibly signed string to an integer
1098:src/xeq.c     ****  */
1099:src/xeq.c     **** int s_to_i(const char *s) {
1100:src/xeq.c     **** 	int x = 0;
1101:src/xeq.c     **** 	int neg;
1102:src/xeq.c     **** 
1103:src/xeq.c     **** 	if (*s == '-') {
1104:src/xeq.c     **** 		s++;
1105:src/xeq.c     **** 		neg = 1;
1106:src/xeq.c     **** 	} else {
1107:src/xeq.c     **** 		if (*s == '+')
1108:src/xeq.c     **** 			s++;
1109:src/xeq.c     **** 		neg = 0;
1110:src/xeq.c     **** 	}
1111:src/xeq.c     **** 
1112:src/xeq.c     **** 	for (;;) {
1113:src/xeq.c     **** 		const char c = *s++;
1114:src/xeq.c     **** 
1115:src/xeq.c     **** 		if (c < '0' || c > '9')
1116:src/xeq.c     **** 			break;
1117:src/xeq.c     **** 		x = 10 * x + (c - '0');
1118:src/xeq.c     **** 	}
1119:src/xeq.c     **** 	if (neg)
1120:src/xeq.c     **** 		return -x;
1121:src/xeq.c     **** 	return x;
1122:src/xeq.c     **** }
1123:src/xeq.c     **** 
1124:src/xeq.c     **** /* Convert a string in the given base to an unsigned integer
1125:src/xeq.c     ****  */
1126:src/xeq.c     **** unsigned long long int s_to_ull(const char *s, unsigned int base) {
1127:src/xeq.c     **** 	unsigned long long int x = 0;
1128:src/xeq.c     **** 
1129:src/xeq.c     **** 	for (;;) {
1130:src/xeq.c     **** 		unsigned int n;
1131:src/xeq.c     **** 		const char c = *s++;
1132:src/xeq.c     **** 
1133:src/xeq.c     **** 		if (c >= '0' && c <= '9')
1134:src/xeq.c     **** 			n = c - '0';
1135:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
1136:src/xeq.c     **** 			n = c - 'A' + 10;
1137:src/xeq.c     **** 		else
1138:src/xeq.c     **** 			break;
1139:src/xeq.c     **** 		if (n >= base)
1140:src/xeq.c     **** 			break;
1141:src/xeq.c     **** 		x = x * base + n;
1142:src/xeq.c     **** 	}
1143:src/xeq.c     **** 	return x;
1144:src/xeq.c     **** }
1145:src/xeq.c     **** 
1146:src/xeq.c     **** const char *get_cmdline(void) {
1147:src/xeq.c     **** 	if (CmdLineLength) {
1148:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
1149:src/xeq.c     **** 		return Cmdline;
1150:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQlyisH.s 			page 25


1151:src/xeq.c     **** 	return NULL;
1152:src/xeq.c     **** }
1153:src/xeq.c     **** 
1154:src/xeq.c     **** #if 0
1155:src/xeq.c     **** static int fract_convert_number(decNumber *x, const char *s) {
1156:src/xeq.c     **** 	if (*s == '\0') {
1157:src/xeq.c     **** 		report_err(ERR_DOMAIN);
1158:src/xeq.c     **** 		return 1;
1159:src/xeq.c     **** 	}
1160:src/xeq.c     **** 	decNumberFromString(x, s, &Ctx);
1161:src/xeq.c     **** 	return check_special(x);
1162:src/xeq.c     **** }
1163:src/xeq.c     **** #endif
1164:src/xeq.c     **** 
1165:src/xeq.c     **** /* Return 1 if the command line contains an error and also set an appropriate
1166:src/xeq.c     ****  * error message.
1167:src/xeq.c     ****  */
1168:src/xeq.c     **** int is_bad_cmdline(void)
1169:src/xeq.c     **** {
1170:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
1171:src/xeq.c     **** 	if (CmdLineDot == 2) {
1172:src/xeq.c     **** 		char *p;
1173:src/xeq.c     **** 
1174:src/xeq.c     **** 		// Check if there's a non-zero digit after the last decimal mark
1175:src/xeq.c     **** 		p = Cmdline + CmdLineLength;
1176:src/xeq.c     **** 		for (;;) {
1177:src/xeq.c     **** 			p--;
1178:src/xeq.c     **** 			if (*p >= '1' && *p <= '9')
1179:src/xeq.c     **** 				return 0;
1180:src/xeq.c     **** 			if (*p == '.')
1181:src/xeq.c     **** 				break;
1182:src/xeq.c     **** 		}
1183:src/xeq.c     **** 
1184:src/xeq.c     **** 		reset_shift();
1185:src/xeq.c     **** 		error_message(ERR_DOMAIN);
1186:src/xeq.c     **** 		State2.invalid_disp = 1;
1187:src/xeq.c     **** 		return 1;
1188:src/xeq.c     **** 	}
1189:src/xeq.c     **** #endif
1190:src/xeq.c     **** 	return 0;
1191:src/xeq.c     **** }
1192:src/xeq.c     **** 
1193:src/xeq.c     **** /* Process the command line if any
1194:src/xeq.c     ****  */
1195:src/xeq.c     **** void process_cmdline(void) {
1196:src/xeq.c     **** 	decNumber a, b, x, t;
1197:src/xeq.c     **** 
1198:src/xeq.c     **** 	if (CmdLineLength) {
1199:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
1200:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
1201:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1202:src/xeq.c     **** 		char cmdline[CMDLINELEN + 2];
1203:src/xeq.c     **** #else
1204:src/xeq.c     **** 		char cmdline[CMDLINELEN + 1];
1205:src/xeq.c     **** #endif
1206:src/xeq.c     **** 
1207:src/xeq.c     **** 		xcopy(cmdline, Cmdline, CMDLINELEN + 1);
ARM GAS  /tmp/ccQlyisH.s 			page 26


1208:src/xeq.c     **** 
1209:src/xeq.c     **** 		cmdline[CmdLineLength] = '\0';
1210:src/xeq.c     **** 		if (!is_intmode()) {
1211:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1212:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E' || cmdline[CmdLineLength-1] == 'D')
1213:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1214:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
1215:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
1216:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
1217:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
1218:src/xeq.c     **** 			}
1219:src/xeq.c     **** #else
1220:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E')
1221:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1222:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
1223:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
1224:src/xeq.c     **** #endif
1225:src/xeq.c     **** 			if (0
1226:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
1227:src/xeq.c     **** 			    || CmdLineEex
1228:src/xeq.c     **** #endif
1229:src/xeq.c     **** #if FRACTION_MODE_INPUT & 4
1230:src/xeq.c     **** 			    || cmdlinedot == 1
1231:src/xeq.c     **** #endif
1232:src/xeq.c     **** 			   )
1233:src/xeq.c     **** 				UState.fract = 0;
1234:src/xeq.c     **** 		}
1235:src/xeq.c     **** 		CmdLineLength = 0;
1236:src/xeq.c     **** 		lift_if_enabled();
1237:src/xeq.c     **** 		set_lift();
1238:src/xeq.c     **** 		CmdLineDot = 0;
1239:src/xeq.c     **** 		CmdLineEex = 0;
1240:src/xeq.c     **** 		if (is_intmode()) {
1241:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
1242:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
1243:src/xeq.c     **** 			setX_int_sgn(x, sgn);
1244:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
1245:src/xeq.c     **** 			char *d0, *d1, *d2;
1246:src/xeq.c     **** 			int neg;
1247:src/xeq.c     **** 
1248:src/xeq.c     **** 			if (bad_cmdline)
1249:src/xeq.c     **** 				return;
1250:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 8)
1251:src/xeq.c     **** 			UState.fract = 1;
1252:src/xeq.c     **** #endif
1253:src/xeq.c     **** 			if (cmdline[0] == '-') {
1254:src/xeq.c     **** 				neg = 1;
1255:src/xeq.c     **** 				d0 = cmdline+1;
1256:src/xeq.c     **** 			} else {
1257:src/xeq.c     **** 				neg = 0;
1258:src/xeq.c     **** 				d0 = cmdline;
1259:src/xeq.c     **** 			}
1260:src/xeq.c     **** 			d1 = find_char(d0, '.');
1261:src/xeq.c     **** 			*d1++ = '\0';
1262:src/xeq.c     **** 			d2 = find_char(d1, '.');
1263:src/xeq.c     **** 			*d2++ = '\0';
1264:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
ARM GAS  /tmp/ccQlyisH.s 			page 27


1265:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
1266:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1267:src/xeq.c     **** 			if (d2 == d1+1) { // ND change starts here; if dots are adjacent...
1268:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
1269:src/xeq.c     **** 				decNumberZero(&x); // and zero x
1270:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
1271:src/xeq.c     **** 				UState.improperfrac = 1;
1272:src/xeq.c     **** #endif
1273:src/xeq.c     **** 			}
1274:src/xeq.c     **** 			else
1275:src/xeq.c     **** #endif
1276:src/xeq.c     **** 			{
1277:src/xeq.c     **** 				decNumberFromString(&a, d1, &Ctx);
1278:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1279:src/xeq.c     **** 				UState.improperfrac = 0;
1280:src/xeq.c     **** #endif
1281:src/xeq.c     **** 			}
1282:src/xeq.c     **** 			dn_divide(&t, &a, &b);
1283:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
1284:src/xeq.c     **** 			if (!decNumberIsSpecial(&t))
1285:src/xeq.c     **** #endif
1286:src/xeq.c     **** 				dn_add(&x, &x, &t);
1287:src/xeq.c     **** 			if (neg)
1288:src/xeq.c     **** 				dn_minus(&x, &x);
1289:src/xeq.c     **** 			setX(&x);
1290:src/xeq.c     **** 		} else {
1291:src/xeq.c     **** 			decNumberFromString(&x, cmdline, &Ctx);
1292:src/xeq.c     **** 			setX(&x);
1293:src/xeq.c     **** 		}
1294:src/xeq.c     **** 		set_entry();
1295:src/xeq.c     **** #ifndef DM42
1296:src/xeq.c     **** 		print_trace( TRACE_DATA_ENTRY, 1 );
1297:src/xeq.c     **** #endif
1298:src/xeq.c     **** 	}
1299:src/xeq.c     **** }
1300:src/xeq.c     **** 
1301:src/xeq.c     **** void process_cmdline_set_lift(void) {
1302:src/xeq.c     **** 	process_cmdline();
1303:src/xeq.c     **** 	set_lift();
1304:src/xeq.c     **** }
1305:src/xeq.c     **** 
1306:src/xeq.c     **** 
1307:src/xeq.c     **** /*
1308:src/xeq.c     ****  *  Return a pointer to a numbered register.
1309:src/xeq.c     ****  *  If locals are enabled and a non existent local register
1310:src/xeq.c     ****  *  is accessed, the respective global register is returned.
1311:src/xeq.c     ****  *  Error checking must be done outside this routine.
1312:src/xeq.c     ****  *  We force the beginning of the local registers on an even stack position.
1313:src/xeq.c     ****  *  This ensures 32 bit alignment of the decima64 object.
1314:src/xeq.c     ****  */
1315:src/xeq.c     **** /*
1316:src/xeq.c     ****  *  If working in double precision, register numbers must be remapped
1317:src/xeq.c     ****  */
1318:src/xeq.c     **** static decimal64 *reg_address(int n, decimal64 *const regs, decimal64 *const named_regs) {
 182              		.loc 1 1318 90 is_stmt 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccQlyisH.s 			page 28


 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
1319:src/xeq.c     **** 	const int dbl = is_dblmode();
 187              		.loc 1 1319 2 view .LVU58
 188              	.LBB1311:
 189              	.LBI1311:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 190              		.loc 1 1087 5 view .LVU59
 191              	.LBB1312:
1088:src/xeq.c     **** }
 192              		.loc 1 1088 2 view .LVU60
1088:src/xeq.c     **** }
 193              		.loc 1 1088 24 is_stmt 0 view .LVU61
 194 0000 154B     		ldr	r3, .L25
 195 0002 1B68     		ldr	r3, [r3]
 196              	.LBE1312:
 197              	.LBE1311:
1318:src/xeq.c     **** 	const int dbl = is_dblmode();
 198              		.loc 1 1318 90 view .LVU62
 199 0004 10B4     		push	{r4}
 200              		.cfi_def_cfa_offset 4
 201              		.cfi_offset 4, -4
 202              	.LBB1315:
 203              	.LBB1313:
1088:src/xeq.c     **** }
 204              		.loc 1 1088 24 view .LVU63
 205 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 206              	.LBE1313:
 207              	.LBE1315:
1320:src/xeq.c     **** 
1321:src/xeq.c     **** 	if (n < regX_idx)
 208              		.loc 1 1321 5 view .LVU64
 209 000a 6328     		cmp	r0, #99
 210              	.LBB1316:
 211              	.LBB1314:
1088:src/xeq.c     **** }
 212              		.loc 1 1088 24 view .LVU65
 213 000c 44F20103 		movw	r3, #16385
 214 0010 03EA0403 		and	r3, r3, r4
 215              	.LVL17:
1088:src/xeq.c     **** }
 216              		.loc 1 1088 24 view .LVU66
 217              	.LBE1314:
 218              	.LBE1316:
 219              		.loc 1 1321 2 is_stmt 1 view .LVU67
 220              		.loc 1 1321 5 is_stmt 0 view .LVU68
 221 0014 10DD     		ble	.L23
1322:src/xeq.c     **** 		return regs + n + (dbl ? n : 0);
1323:src/xeq.c     **** 
1324:src/xeq.c     **** 	n -= regX_idx;
 222              		.loc 1 1324 2 is_stmt 1 view .LVU69
1325:src/xeq.c     **** 	// Lettered register
1326:src/xeq.c     **** 	if (XromFlags.xIN)
 223              		.loc 1 1326 6 is_stmt 0 view .LVU70
 224 0016 1149     		ldr	r1, .L25+4
 225              	.LVL18:
 226              		.loc 1 1326 5 view .LVU71
ARM GAS  /tmp/ccQlyisH.s 			page 29


 227 0018 91F90140 		ldrsb	r4, [r1, #1]
 228 001c 002C     		cmp	r4, #0
1324:src/xeq.c     **** 	// Lettered register
 229              		.loc 1 1324 4 view .LVU72
 230 001e A0F16401 		sub	r1, r0, #100
 231              	.LVL19:
 232              		.loc 1 1326 2 is_stmt 1 view .LVU73
 233              		.loc 1 1326 5 is_stmt 0 view .LVU74
 234 0022 13DB     		blt	.L24
1327:src/xeq.c     **** 		return (decimal64 *) (XromStack + n);
1328:src/xeq.c     **** 	if (dbl)
 235              		.loc 1 1328 2 is_stmt 1 view .LVU75
 236              		.loc 1 1328 5 is_stmt 0 view .LVU76
 237 0024 B3F5804F 		cmp	r3, #16384
1329:src/xeq.c     **** 		n = (n << 1) - STACK_SIZE - EXTRA_REG;
 238              		.loc 1 1329 3 is_stmt 1 view .LVU77
 239              		.loc 1 1329 10 is_stmt 0 view .LVU78
 240 0028 04BF     		itt	eq
 241 002a 4900     		lsleq	r1, r1, #1
 242              	.LVL20:
 243              		.loc 1 1329 5 view .LVU79
 244 002c 0C39     		subeq	r1, r1, #12
 245              	.LVL21:
1330:src/xeq.c     **** 	return named_regs + n;
 246              		.loc 1 1330 2 is_stmt 1 view .LVU80
 247              		.loc 1 1330 20 is_stmt 0 view .LVU81
 248 002e 02EBC100 		add	r0, r2, r1, lsl #3
1331:src/xeq.c     **** }
 249              		.loc 1 1331 1 view .LVU82
 250 0032 5DF8044B 		ldr	r4, [sp], #4
 251              		.cfi_remember_state
 252              		.cfi_restore 4
 253              		.cfi_def_cfa_offset 0
 254 0036 7047     		bx	lr
 255              	.LVL22:
 256              	.L23:
 257              		.cfi_restore_state
1322:src/xeq.c     **** 
 258              		.loc 1 1322 3 is_stmt 1 view .LVU83
1322:src/xeq.c     **** 
 259              		.loc 1 1322 19 is_stmt 0 view .LVU84
 260 0038 B3F5804F 		cmp	r3, #16384
1322:src/xeq.c     **** 
 261              		.loc 1 1322 15 view .LVU85
 262 003c 4FEAC002 		lsl	r2, r0, #3
 263              	.LVL23:
1322:src/xeq.c     **** 
 264              		.loc 1 1322 15 view .LVU86
 265 0040 08BF     		it	eq
 266 0042 0201     		lsleq	r2, r0, #4
1322:src/xeq.c     **** 
 267              		.loc 1 1322 19 view .LVU87
 268 0044 8818     		adds	r0, r1, r2
 269              	.LVL24:
 270              		.loc 1 1331 1 view .LVU88
 271 0046 5DF8044B 		ldr	r4, [sp], #4
 272              		.cfi_remember_state
ARM GAS  /tmp/ccQlyisH.s 			page 30


 273              		.cfi_restore 4
 274              		.cfi_def_cfa_offset 0
 275 004a 7047     		bx	lr
 276              	.LVL25:
 277              	.L24:
 278              		.cfi_restore_state
1327:src/xeq.c     **** 	if (dbl)
 279              		.loc 1 1327 3 is_stmt 1 view .LVU89
1327:src/xeq.c     **** 	if (dbl)
 280              		.loc 1 1327 10 is_stmt 0 view .LVU90
 281 004c 0448     		ldr	r0, .L25+8
 282              		.loc 1 1331 1 view .LVU91
 283 004e 5DF8044B 		ldr	r4, [sp], #4
 284              		.cfi_restore 4
 285              		.cfi_def_cfa_offset 0
1327:src/xeq.c     **** 	if (dbl)
 286              		.loc 1 1327 10 view .LVU92
 287 0052 00EB0110 		add	r0, r0, r1, lsl #4
 288              		.loc 1 1331 1 view .LVU93
 289 0056 7047     		bx	lr
 290              	.L26:
 291              		.align	2
 292              	.L25:
 293 0058 00000000 		.word	main_ram
 294 005c 00000000 		.word	XromParams
 295 0060 00000000 		.word	XromLocal
 296              		.cfi_endproc
 297              	.LFE89:
 299              		.section	.text.retstk_up,"ax",%progbits
 300              		.align	1
 301              		.p2align 2,,3
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	retstk_up:
 308              	.LFB149:
1332:src/xeq.c     **** 
1333:src/xeq.c     **** REGISTER *get_reg_n(int n) {
1334:src/xeq.c     **** 	const int dbl = is_dblmode();
1335:src/xeq.c     **** 
1336:src/xeq.c     **** 	if (n >= CONST_REG_BASE) {
1337:src/xeq.c     **** 		n -= CONST_REG_BASE;
1338:src/xeq.c     **** 		return get_const(n, dbl);
1339:src/xeq.c     **** 	}
1340:src/xeq.c     **** 	if (n >= FLASH_REG_BASE)
1341:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
1342:src/xeq.c     **** 
1343:src/xeq.c     **** 	if (n >= LOCAL_REG_BASE && local_regs() > 0) {
1344:src/xeq.c     **** 		// local register on the return stack
1345:src/xeq.c     **** 		n -= LOCAL_REG_BASE;
1346:src/xeq.c     **** 		if (dbl)
1347:src/xeq.c     **** 			n <<= 1;
1348:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
1349:src/xeq.c     **** 	}
1350:src/xeq.c     **** 	return (REGISTER *) reg_address(n, Regs + TOPREALREG - NumRegs, Regs + regX_idx);
1351:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 31


1352:src/xeq.c     **** 
1353:src/xeq.c     **** 
1354:src/xeq.c     **** REGISTER *get_flash_reg_n(int n) {
1355:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
1356:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
1357:src/xeq.c     **** }
1358:src/xeq.c     **** 
1359:src/xeq.c     **** 
1360:src/xeq.c     **** /*
1361:src/xeq.c     ****  *  Get a constatnt by index and mode
1362:src/xeq.c     ****  *  In case of a conversion, a private copy is returned
1363:src/xeq.c     ****  */
1364:src/xeq.c     **** REGISTER *get_const(int index, int dbl)
1365:src/xeq.c     **** {
1366:src/xeq.c     **** 	static REGISTER result;
1367:src/xeq.c     **** 	const int i = cnsts[index].index;
1368:src/xeq.c     **** 	if (dbl) {
1369:src/xeq.c     **** 		if (i <= 1 || i >= 128)
1370:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
1371:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
1372:src/xeq.c     **** 	}
1373:src/xeq.c     **** 	else {
1374:src/xeq.c     **** 		if (i < 128)
1375:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
1376:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
1377:src/xeq.c     **** 	}
1378:src/xeq.c     **** 	return &result;
1379:src/xeq.c     **** }
1380:src/xeq.c     **** 
1381:src/xeq.c     **** 
1382:src/xeq.c     **** /*  Some conversion routines to take decimals and produce integers
1383:src/xeq.c     ****  *  This is for opaque storage, no conversion takes place.
1384:src/xeq.c     ****  */
1385:src/xeq.c     **** long long int get_reg_n_int(int index) {
1386:src/xeq.c     **** 	long long int ll;
1387:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
1388:src/xeq.c     **** 	return ll;
1389:src/xeq.c     **** }
1390:src/xeq.c     **** 
1391:src/xeq.c     **** void set_reg_n_int(int index, long long int ll) {
1392:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
1393:src/xeq.c     **** }
1394:src/xeq.c     **** 
1395:src/xeq.c     **** /* Get an integer from a register
1396:src/xeq.c     ****  */
1397:src/xeq.c     **** unsigned long long int get_reg_n_int_sgn(int index, int *sgn) {
1398:src/xeq.c     **** 	if (is_intmode()) {
1399:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
1400:src/xeq.c     **** 	} else {
1401:src/xeq.c     **** 		decNumber n;
1402:src/xeq.c     **** 
1403:src/xeq.c     **** 		getRegister(&n, index);
1404:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
1405:src/xeq.c     **** 	}
1406:src/xeq.c     **** }
1407:src/xeq.c     **** 
1408:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 32


1409:src/xeq.c     **** /* Get an integer from X
1410:src/xeq.c     ****  */
1411:src/xeq.c     **** long long int getX_int(void) {
1412:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
1413:src/xeq.c     **** }
1414:src/xeq.c     **** 
1415:src/xeq.c     **** unsigned long long int getX_int_sgn(int *sgn) {
1416:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
1417:src/xeq.c     **** }
1418:src/xeq.c     **** 
1419:src/xeq.c     **** /*
1420:src/xeq.c     ****  *  Forced conversion from real to intger
1421:src/xeq.c     ****  *  Leaves integer mode active on return!
1422:src/xeq.c     ****  */
1423:src/xeq.c     **** static void int_from_register(int out, int in) {
1424:src/xeq.c     **** 	int sgn;
1425:src/xeq.c     **** 	unsigned long long int val;
1426:src/xeq.c     **** 	
1427:src/xeq.c     **** 	UState.intm = 0;	// Force real mode access
1428:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1429:src/xeq.c     **** 
1430:src/xeq.c     **** 	UState.intm = 1;	// Force integer access
1431:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1432:src/xeq.c     **** }
1433:src/xeq.c     **** 
1434:src/xeq.c     **** /* Put an integer into a register
1435:src/xeq.c     ****  */
1436:src/xeq.c     **** void set_reg_n_int_sgn(int index, unsigned long long int val, int sgn) {
1437:src/xeq.c     **** 	if (is_intmode()) {
1438:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
1439:src/xeq.c     **** 	} else {
1440:src/xeq.c     **** 		decNumber t;
1441:src/xeq.c     **** 
1442:src/xeq.c     **** 		ullint_to_dn(&t, val);
1443:src/xeq.c     **** 		if (sgn)
1444:src/xeq.c     **** 			dn_minus(&t, &t);
1445:src/xeq.c     **** 		setRegister(index, &t);
1446:src/xeq.c     **** 	}
1447:src/xeq.c     **** }
1448:src/xeq.c     **** 
1449:src/xeq.c     **** /* 
1450:src/xeq.c     ****  *  Forced conversion from integer to register format.
1451:src/xeq.c     ****  *  Leaves integer mode off after conversion.
1452:src/xeq.c     ****  *  Destination may be in XROM register space
1453:src/xeq.c     ****  */
1454:src/xeq.c     **** static void register_from_int(int out, int in, int called_from_xin) {
1455:src/xeq.c     **** 	int sgn;
1456:src/xeq.c     **** 	unsigned long long int val;
1457:src/xeq.c     **** 	const int xin = XromFlags.xIN;
1458:src/xeq.c     **** 	
1459:src/xeq.c     **** 	if (called_from_xin)
1460:src/xeq.c     **** 		XromFlags.xIN = 0;
1461:src/xeq.c     **** 	UState.intm = 1;
1462:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1463:src/xeq.c     **** 
1464:src/xeq.c     **** 	XromFlags.xIN = xin;
1465:src/xeq.c     **** 	UState.intm = 0;
ARM GAS  /tmp/ccQlyisH.s 			page 33


1466:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1467:src/xeq.c     **** }
1468:src/xeq.c     **** 
1469:src/xeq.c     **** 
1470:src/xeq.c     **** /* Put an integer into X
1471:src/xeq.c     ****  * Integer registers are always single precision!
1472:src/xeq.c     ****  */
1473:src/xeq.c     **** void setX_int(long long int val) {
1474:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
1475:src/xeq.c     **** }
1476:src/xeq.c     **** 
1477:src/xeq.c     **** 
1478:src/xeq.c     **** void setX_int_sgn(unsigned long long int val, int sgn) {
1479:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
1480:src/xeq.c     **** }
1481:src/xeq.c     **** 
1482:src/xeq.c     **** 
1483:src/xeq.c     **** 
1484:src/xeq.c     **** /*
1485:src/xeq.c     ****  *  Set the register value explicitely
1486:src/xeq.c     ****  */
1487:src/xeq.c     **** void zero_regs(REGISTER *dest, int n) {
1488:src/xeq.c     **** #if 0
1489:src/xeq.c     **** 	if (is_intmode())
1490:src/xeq.c     **** 		xset(dest, 0, n << 3);
1491:src/xeq.c     **** 	else {
1492:src/xeq.c     **** 		REGISTER *const zero = get_reg_n(CONST_REG_BASE + OP_ZERO);
1493:src/xeq.c     **** 		const int reg_size = is_dblmode() ? sizeof(decimal128) : sizeof(decimal64);
1494:src/xeq.c     **** 		char *d = (char *) dest;
1495:src/xeq.c     **** 		int i;
1496:src/xeq.c     **** 		for (i = 0; i < n; ++i, d += reg_size)
1497:src/xeq.c     **** 			copyreg((REGISTER *) d, zero);
1498:src/xeq.c     **** 	}
1499:src/xeq.c     **** #else
1500:src/xeq.c     **** 	// This works for all modes
1501:src/xeq.c     **** 	// no it doesn't -- it leaves varying values of zero around
1502:src/xeq.c     **** 	xset(dest, 0, n << (3 + is_dblmode()));
1503:src/xeq.c     **** #endif
1504:src/xeq.c     **** }
1505:src/xeq.c     **** 
1506:src/xeq.c     **** void move_regs(REGISTER *dest, REGISTER *src, int n) {
1507:src/xeq.c     **** 	if (is_dblmode())
1508:src/xeq.c     **** 		n <<= 1;
1509:src/xeq.c     **** 	xcopy(dest, src, n << 3);
1510:src/xeq.c     **** }
1511:src/xeq.c     **** 
1512:src/xeq.c     **** 
1513:src/xeq.c     **** /* Zero a register
1514:src/xeq.c     ****  */
1515:src/xeq.c     **** static void set_zero(REGISTER *x) {
1516:src/xeq.c     **** 	zero_regs(x, 1);
1517:src/xeq.c     **** }
1518:src/xeq.c     **** 
1519:src/xeq.c     **** void zero_X(void) {
1520:src/xeq.c     **** 	set_zero(StackBase);
1521:src/xeq.c     **** }
1522:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 34


1523:src/xeq.c     **** void zero_Y(void) {
1524:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
1525:src/xeq.c     **** }
1526:src/xeq.c     **** 
1527:src/xeq.c     **** void clrx(enum nilop op) {
1528:src/xeq.c     **** 	zero_X();
1529:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1530:src/xeq.c     **** 	if (C_LOCKED) {
1531:src/xeq.c     **** 		zero_Y();
1532:src/xeq.c     **** 		if (POLAR_DISPLAY) {
1533:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
1534:src/xeq.c     **** 			set_zero(get_reg_n(regK_idx));
1535:src/xeq.c     **** 		}
1536:src/xeq.c     **** 		CLEAR_REAL;
1537:src/xeq.c     **** 		CLEAR_IMAG;
1538:src/xeq.c     **** 	}
1539:src/xeq.c     **** #endif
1540:src/xeq.c     **** 	clr_lift();
1541:src/xeq.c     **** }
1542:src/xeq.c     **** 
1543:src/xeq.c     **** /* Zero out the stack
1544:src/xeq.c     ****  */
1545:src/xeq.c     **** void clrstk(enum nilop op) {
1546:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
1547:src/xeq.c     **** 	set_lift();
1548:src/xeq.c     **** }
1549:src/xeq.c     **** 
1550:src/xeq.c     **** 
1551:src/xeq.c     **** /* Zero out all registers excluding the stack and lastx
1552:src/xeq.c     ****  */	
1553:src/xeq.c     **** void clrreg(enum nilop op) {
1554:src/xeq.c     **** 	const int local = local_regs();
1555:src/xeq.c     **** 	process_cmdline_set_lift();
1556:src/xeq.c     **** 
1557:src/xeq.c     **** 	// erase register memory
1558:src/xeq.c     **** 	zero_regs(get_reg_n(0), global_regs());
1559:src/xeq.c     **** 
1560:src/xeq.c     **** 	// Clear A, B, C & D if they aren't part of the stack
1561:src/xeq.c     **** 	if (stack_size() != 8)
1562:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
1563:src/xeq.c     **** 
1564:src/xeq.c     **** 	// Clear J & K but not I and L since they are last X.
1565:src/xeq.c     **** 	zero_regs(get_reg_n(regJ_idx), 2);
1566:src/xeq.c     **** 
1567:src/xeq.c     **** 	// erase local registers but keep them allocated
1568:src/xeq.c     **** 	if (local)
1569:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
1570:src/xeq.c     **** }
1571:src/xeq.c     **** 
1572:src/xeq.c     **** 
1573:src/xeq.c     **** /* Clear the subroutine return stack
1574:src/xeq.c     ****  */
1575:src/xeq.c     **** void clrretstk(void) {
1576:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
1577:src/xeq.c     **** }
1578:src/xeq.c     **** 
1579:src/xeq.c     **** void clrretstk_pc(void) {
ARM GAS  /tmp/ccQlyisH.s 			page 35


1580:src/xeq.c     **** 	clrretstk();
1581:src/xeq.c     **** 	raw_set_pc(0);
1582:src/xeq.c     **** 	update_program_bounds(1);
1583:src/xeq.c     **** }
1584:src/xeq.c     **** 
1585:src/xeq.c     **** 
1586:src/xeq.c     **** /*
1587:src/xeq.c     ****  *  Command to allow access to constants and small integers
1588:src/xeq.c     ****  */
1589:src/xeq.c     **** void cmdconst(unsigned int arg, enum rarg op) {
1590:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
1591:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX || op == RARG_IND_CONST_CMPLX) {
1592:src/xeq.c     **** #else
1593:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX) {
1594:src/xeq.c     **** #endif
1595:src/xeq.c     **** 		lift2_if_enabled();
1596:src/xeq.c     **** 		zero_Y();
1597:src/xeq.c     **** 		set_was_complex();
1598:src/xeq.c     **** 	} else
1599:src/xeq.c     **** 		lift_if_enabled();
1600:src/xeq.c     **** 
1601:src/xeq.c     **** 	if (op == RARG_INTNUM || op == RARG_INTNUM_CMPLX)
1602:src/xeq.c     **** 		setX_int_sgn(arg, 0);
1603:src/xeq.c     **** 	else if (is_intmode())
1604:src/xeq.c     **** 		bad_mode_error();
1605:src/xeq.c     **** 	else 
1606:src/xeq.c     **** 		copyreg(StackBase, get_const(arg, is_dblmode()));
1607:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1608:src/xeq.c     **** 	CLEAR_POLAR_READY;
1609:src/xeq.c     **** #endif
1610:src/xeq.c     **** }
1611:src/xeq.c     **** 
1612:src/xeq.c     **** 
1613:src/xeq.c     **** /* Store/recall code here.
1614:src/xeq.c     ****  * These two are pretty much the same so we define some utility routines first.
1615:src/xeq.c     ****  */
1616:src/xeq.c     **** 
1617:src/xeq.c     **** /* Do a basic STO/RCL arithmetic operation.
1618:src/xeq.c     ****  */
1619:src/xeq.c     **** static int storcl_op(unsigned short opr, int index, decNumber *r, int rev) {
1620:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
1621:src/xeq.c     **** 
1622:src/xeq.c     **** 	getX(x);
1623:src/xeq.c     **** 	getRegister(y, index);
1624:src/xeq.c     **** 	if (rev) {
1625:src/xeq.c     **** 		x = y;
1626:src/xeq.c     **** 		y = &a;
1627:src/xeq.c     **** 	}
1628:src/xeq.c     **** 
1629:src/xeq.c     **** 	switch (opr) {
1630:src/xeq.c     **** 	case 1:
1631:src/xeq.c     **** 		dn_add(r, y, x);
1632:src/xeq.c     **** 		break;
1633:src/xeq.c     **** 	case 2:
1634:src/xeq.c     **** 		dn_subtract(r, y, x);
1635:src/xeq.c     **** 		break;
1636:src/xeq.c     **** 	case 3:
ARM GAS  /tmp/ccQlyisH.s 			page 36


1637:src/xeq.c     **** 		dn_multiply(r, y, x);
1638:src/xeq.c     **** 		break;
1639:src/xeq.c     **** 	case 4:
1640:src/xeq.c     **** 		dn_divide(r, y, x);
1641:src/xeq.c     **** 		break;
1642:src/xeq.c     **** 	case 5:
1643:src/xeq.c     **** 		dn_min(r, y, x);
1644:src/xeq.c     **** 		break;
1645:src/xeq.c     **** 	case 6:
1646:src/xeq.c     **** 		dn_max(r, y, x);
1647:src/xeq.c     **** 		break;
1648:src/xeq.c     **** 	default:
1649:src/xeq.c     **** 		return 1;
1650:src/xeq.c     **** 	}
1651:src/xeq.c     **** 	return 0;
1652:src/xeq.c     **** }
1653:src/xeq.c     **** 
1654:src/xeq.c     **** static int storcl_intop(unsigned short opr, int index, long long int *r, int rev) {
1655:src/xeq.c     **** 	long long int x, y;
1656:src/xeq.c     **** 
1657:src/xeq.c     **** 	x = getX_int();
1658:src/xeq.c     **** 	y = get_reg_n_int(index);
1659:src/xeq.c     **** 
1660:src/xeq.c     **** 	if (rev) {
1661:src/xeq.c     **** 		const long long int t = x;
1662:src/xeq.c     **** 		x = y;
1663:src/xeq.c     **** 		y = t;
1664:src/xeq.c     **** 	}
1665:src/xeq.c     **** 
1666:src/xeq.c     **** 	switch (opr) {
1667:src/xeq.c     **** 	case 1:
1668:src/xeq.c     **** 		*r = intAdd(y, x);
1669:src/xeq.c     **** 		break;
1670:src/xeq.c     **** 	case 2:
1671:src/xeq.c     **** 		*r = intSubtract(y, x);
1672:src/xeq.c     **** 		break;
1673:src/xeq.c     **** 	case 3:
1674:src/xeq.c     **** 		*r = intMultiply(y, x);
1675:src/xeq.c     **** 		break;
1676:src/xeq.c     **** 	case 4:
1677:src/xeq.c     **** 		*r = intDivide(y, x);
1678:src/xeq.c     **** 		break;
1679:src/xeq.c     **** 	case 5:
1680:src/xeq.c     **** 		*r = intMin(y, x);
1681:src/xeq.c     **** 		break;
1682:src/xeq.c     **** 	case 6:
1683:src/xeq.c     **** 		*r = intMax(y, x);
1684:src/xeq.c     **** 		break;
1685:src/xeq.c     **** 	default:
1686:src/xeq.c     **** 		return 1;
1687:src/xeq.c     **** 	}
1688:src/xeq.c     **** 	return 0;
1689:src/xeq.c     **** }
1690:src/xeq.c     **** 
1691:src/xeq.c     **** /* We've got a STO operation to do.
1692:src/xeq.c     ****  */
1693:src/xeq.c     **** void cmdsto(unsigned int arg, enum rarg op) {
ARM GAS  /tmp/ccQlyisH.s 			page 37


1694:src/xeq.c     **** 	if (op == RARG_STO) {
1695:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
1696:src/xeq.c     **** 	} else {
1697:src/xeq.c     **** 		if (is_intmode()) {
1698:src/xeq.c     **** 			long long int r;
1699:src/xeq.c     **** 
1700:src/xeq.c     **** 			if (storcl_intop(op - RARG_STO, arg, &r, 0))
1701:src/xeq.c     **** 				illegal(op);
1702:src/xeq.c     **** 			set_reg_n_int(arg, r);
1703:src/xeq.c     **** 		} else {
1704:src/xeq.c     **** 			decNumber r;
1705:src/xeq.c     **** 
1706:src/xeq.c     **** 			if (storcl_op(op - RARG_STO, arg, &r, 0))
1707:src/xeq.c     **** 				illegal(op);
1708:src/xeq.c     **** 			setRegister(arg, &r);
1709:src/xeq.c     **** 		}
1710:src/xeq.c     **** 	}
1711:src/xeq.c     **** }
1712:src/xeq.c     **** 
1713:src/xeq.c     **** /* We've got a RCL operation to do.
1714:src/xeq.c     ****  */
1715:src/xeq.c     **** static void do_rcl(int index, enum rarg op) {
1716:src/xeq.c     **** 	if (op == RARG_RCL) {
1717:src/xeq.c     **** 		REGISTER temp;
1718:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
1719:src/xeq.c     **** 		lift_if_enabled();
1720:src/xeq.c     **** 		copyreg(StackBase, &temp);
1721:src/xeq.c     **** 	} else {
1722:src/xeq.c     **** 		if (is_intmode()) {
1723:src/xeq.c     **** 			long long int r;
1724:src/xeq.c     **** 
1725:src/xeq.c     **** 			if (storcl_intop(op - RARG_RCL, index, &r, 1))
1726:src/xeq.c     **** 				illegal(op);
1727:src/xeq.c     **** 			setlastX();
1728:src/xeq.c     **** 			setX_int(r);
1729:src/xeq.c     **** 		} else {
1730:src/xeq.c     **** 			decNumber r;
1731:src/xeq.c     **** 
1732:src/xeq.c     **** 			if (storcl_op(op - RARG_RCL, index, &r, 1))
1733:src/xeq.c     **** 				illegal(op);
1734:src/xeq.c     **** 			setlastX();
1735:src/xeq.c     **** 			setX(&r);
1736:src/xeq.c     **** 		}
1737:src/xeq.c     **** 	}
1738:src/xeq.c     **** }
1739:src/xeq.c     **** 
1740:src/xeq.c     **** void cmdrcl(unsigned int arg, enum rarg op) {
1741:src/xeq.c     **** 	do_rcl(arg, op);
1742:src/xeq.c     **** }
1743:src/xeq.c     **** 
1744:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1745:src/xeq.c     **** void cmdflashrcl(unsigned int arg, enum rarg op) {
1746:src/xeq.c     **** 	do_rcl(FLASH_REG_BASE + arg, op - RARG_FLRCL + RARG_RCL);
1747:src/xeq.c     **** }
1748:src/xeq.c     **** #endif
1749:src/xeq.c     **** 
1750:src/xeq.c     **** /* And the complex equivalents for the above.
ARM GAS  /tmp/ccQlyisH.s 			page 38


1751:src/xeq.c     ****  * We pair registers arg & arg+1 to provide a complex number
1752:src/xeq.c     ****  */
1753:src/xeq.c     **** static int storcl_cop(unsigned short opr, int index, decNumber *r1, decNumber *r2, int rev) {
1754:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
1755:src/xeq.c     **** 
1756:src/xeq.c     **** 	getXY(x + 0, x + 1);
1757:src/xeq.c     **** 	getRegister(y + 0, index);
1758:src/xeq.c     **** 	getRegister(y + 1, index + 1);
1759:src/xeq.c     **** 
1760:src/xeq.c     **** 	if (rev) {
1761:src/xeq.c     **** 		x = y;
1762:src/xeq.c     **** 		y = a;
1763:src/xeq.c     **** 	}
1764:src/xeq.c     **** 
1765:src/xeq.c     **** 	switch (opr) {
1766:src/xeq.c     **** 	case 1:
1767:src/xeq.c     **** 		cmplxAdd(r1, r2, y + 0, y + 1, x + 0, x + 1);
1768:src/xeq.c     **** 		break;
1769:src/xeq.c     **** 	case 2:
1770:src/xeq.c     **** 		cmplxSubtract(r1, r2, y + 0, y + 1, x + 0, x + 1);
1771:src/xeq.c     **** 		break;
1772:src/xeq.c     **** 	case 3:
1773:src/xeq.c     **** 		cmplxMultiply(r1, r2, y + 0, y + 1, x + 0, x + 1);
1774:src/xeq.c     **** 		break;
1775:src/xeq.c     **** 	case 4:
1776:src/xeq.c     **** 		cmplxDivide(r1, r2, y + 0, y + 1, x + 0, x + 1);
1777:src/xeq.c     **** 		break;
1778:src/xeq.c     **** 	default:
1779:src/xeq.c     **** 		return 1;
1780:src/xeq.c     **** 	}
1781:src/xeq.c     **** 	return 0;
1782:src/xeq.c     **** }
1783:src/xeq.c     **** 
1784:src/xeq.c     **** 
1785:src/xeq.c     **** void cmdcsto(unsigned int arg, enum rarg op) {
1786:src/xeq.c     **** 	decNumber r1, r2;
1787:src/xeq.c     **** 	REGISTER *t1, *t2;
1788:src/xeq.c     **** 
1789:src/xeq.c     **** 	t1 = get_reg_n(arg);
1790:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
1791:src/xeq.c     **** 
1792:src/xeq.c     **** 	if (op == RARG_CSTO) {
1793:src/xeq.c     **** 		copyreg(t1, StackBase);
1794:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
1795:src/xeq.c     **** 	} else {
1796:src/xeq.c     **** 		if (is_intmode())
1797:src/xeq.c     **** 			bad_mode_error();
1798:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
1799:src/xeq.c     **** 			illegal(op);
1800:src/xeq.c     **** 		else {
1801:src/xeq.c     **** 			setRegister(arg, &r1);
1802:src/xeq.c     **** 			setRegister(arg + 1, &r2);
1803:src/xeq.c     **** 		}
1804:src/xeq.c     **** 	}
1805:src/xeq.c     **** 	set_was_complex();
1806:src/xeq.c     **** }
1807:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 39


1808:src/xeq.c     **** static void do_crcl(int index, enum rarg op) {
1809:src/xeq.c     **** 	decNumber r1, r2;
1810:src/xeq.c     **** 
1811:src/xeq.c     **** 	if (op == RARG_CRCL) {
1812:src/xeq.c     **** 		REGISTER x, y;
1813:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
1814:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
1815:src/xeq.c     **** 		lift2_if_enabled();
1816:src/xeq.c     **** 		copyreg(StackBase, &x);
1817:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
1818:src/xeq.c     **** 	} else {
1819:src/xeq.c     **** 		if (is_intmode())
1820:src/xeq.c     **** 			bad_mode_error();
1821:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
1822:src/xeq.c     **** 			illegal(op);
1823:src/xeq.c     **** 		else {
1824:src/xeq.c     **** 			setlastXY();
1825:src/xeq.c     **** 			setXY(&r1, &r2);
1826:src/xeq.c     **** 		}
1827:src/xeq.c     **** 	}
1828:src/xeq.c     **** 	set_was_complex();
1829:src/xeq.c     **** }
1830:src/xeq.c     **** 
1831:src/xeq.c     **** void cmdcrcl(unsigned int arg, enum rarg op) {
1832:src/xeq.c     **** 	do_crcl(arg, op);
1833:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1834:src/xeq.c     **** 	CLEAR_POLAR_READY;
1835:src/xeq.c     **** #endif
1836:src/xeq.c     **** }
1837:src/xeq.c     **** 
1838:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1839:src/xeq.c     **** void cmdflashcrcl(unsigned int arg, enum rarg op) {
1840:src/xeq.c     **** 	do_crcl(FLASH_REG_BASE + arg, op - RARG_FLCRCL + RARG_CRCL);
1841:src/xeq.c     **** }
1842:src/xeq.c     **** #endif
1843:src/xeq.c     **** 
1844:src/xeq.c     **** /*
1845:src/xeq.c     ****  *  "Alien" RCL commands to convert registers originally stored in a different format
1846:src/xeq.c     ****  */
1847:src/xeq.c     **** // RCL of an integer value
1848:src/xeq.c     **** void cmdircl(unsigned int arg, enum rarg op) {
1849:src/xeq.c     **** 	if (is_intmode())
1850:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
1851:src/xeq.c     **** 	else
1852:src/xeq.c     **** 		register_from_int(regX_idx, arg, 0);
1853:src/xeq.c     **** }
1854:src/xeq.c     **** 
1855:src/xeq.c     **** // RCL of a single or double precision real value
1856:src/xeq.c     **** void cmdrrcl(unsigned int arg, enum rarg op) {
1857:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
1858:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
1859:src/xeq.c     **** 
1860:src/xeq.c     **** 	if (rcl_dbl && arg >= regX_idx && arg <= regK_idx) {
1861:src/xeq.c     **** 		// dRCL is not valid for lettered registers
1862:src/xeq.c     **** 		report_err(ERR_RANGE);
1863:src/xeq.c     **** 		return;
1864:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQlyisH.s 			page 40


1865:src/xeq.c     **** 
1866:src/xeq.c     **** 	UState.mode_double = rcl_dbl; // Force reading in requested format
1867:src/xeq.c     **** 	if (is_intmode()) {
1868:src/xeq.c     **** 		int_from_register(regX_idx, arg);
1869:src/xeq.c     **** 		UState.mode_double = was_dbl;
1870:src/xeq.c     **** 	}
1871:src/xeq.c     **** 	else {
1872:src/xeq.c     **** 		decNumber x;
1873:src/xeq.c     **** 		getRegister(&x, arg);
1874:src/xeq.c     **** 
1875:src/xeq.c     **** 		UState.mode_double = was_dbl; // Force access in original mode
1876:src/xeq.c     **** 		setX(&x);
1877:src/xeq.c     **** 	}
1878:src/xeq.c     **** }
1879:src/xeq.c     **** 
1880:src/xeq.c     **** 
1881:src/xeq.c     **** /* SWAP x with the specified register
1882:src/xeq.c     ****  */
1883:src/xeq.c     **** void swap_reg(REGISTER *a, REGISTER *b) {
1884:src/xeq.c     **** 	REGISTER t;
1885:src/xeq.c     **** 
1886:src/xeq.c     **** 	copyreg(&t, a);
1887:src/xeq.c     **** 	copyreg(a, b);
1888:src/xeq.c     **** 	copyreg(b, &t);
1889:src/xeq.c     **** }
1890:src/xeq.c     **** 
1891:src/xeq.c     **** void cmdswap(unsigned int arg, enum rarg op) {
1892:src/xeq.c     **** 	int idx;
1893:src/xeq.c     **** 
1894:src/xeq.c     **** 	if (op == RARG_CSWAPX)
1895:src/xeq.c     **** 		idx = regX_idx;
1896:src/xeq.c     **** 	else if (op == RARG_CSWAPZ)
1897:src/xeq.c     **** 		idx = regZ_idx;
1898:src/xeq.c     **** 	else
1899:src/xeq.c     **** 		idx = regX_idx + (int)(op - RARG_SWAPX);
1900:src/xeq.c     **** 
1901:src/xeq.c     **** 	swap_reg(get_reg_n(idx), get_reg_n(arg));
1902:src/xeq.c     **** 
1903:src/xeq.c     **** 	if (op >= RARG_CSWAPX) {
1904:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
1905:src/xeq.c     **** 		set_was_complex();
1906:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1907:src/xeq.c     **** 	CLEAR_POLAR_READY;
1908:src/xeq.c     **** #endif
1909:src/xeq.c     **** 	}
1910:src/xeq.c     **** }
1911:src/xeq.c     **** 
1912:src/xeq.c     **** 
1913:src/xeq.c     **** /* View a specified register
1914:src/xeq.c     ****  */
1915:src/xeq.c     **** void cmdview(unsigned int arg, enum rarg op) {
1916:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
1917:src/xeq.c     **** 
1918:src/xeq.c     **** 	State2.wascomplex = cmplx;
1919:src/xeq.c     **** 	ShowRegister = arg;
1920:src/xeq.c     **** 	State2.disp_freeze = 0;
1921:src/xeq.c     **** 	display();
ARM GAS  /tmp/ccQlyisH.s 			page 41


1922:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
1923:src/xeq.c     **** }
1924:src/xeq.c     **** 
1925:src/xeq.c     **** 
1926:src/xeq.c     **** /* Get the stack size */
1927:src/xeq.c     **** void get_stack_size(enum nilop op) {
1928:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
1929:src/xeq.c     **** }
1930:src/xeq.c     **** 
1931:src/xeq.c     **** void get_word_size(enum nilop op) {
1932:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
1933:src/xeq.c     **** }
1934:src/xeq.c     **** 
1935:src/xeq.c     **** void get_sign_mode(enum nilop op) {
1936:src/xeq.c     **** 	static const unsigned char modes[4] = {
1937:src/xeq.c     **** 		0x02,		// 2's complement
1938:src/xeq.c     **** 		0x01,		// 1's complement
1939:src/xeq.c     **** 		0x00,		// unsigned
1940:src/xeq.c     **** 		0x81		// sign and mantissa
1941:src/xeq.c     **** 	};
1942:src/xeq.c     **** 	const unsigned char v = modes[(int)int_mode()];
1943:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
1944:src/xeq.c     **** }
1945:src/xeq.c     **** 
1946:src/xeq.c     **** void get_base(enum nilop op) {
1947:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
1948:src/xeq.c     **** }
1949:src/xeq.c     **** 
1950:src/xeq.c     **** #ifdef DM42
1951:src/xeq.c     ****  long int DM42_Ticker () {
1952:src/xeq.c     ****     long int f, t;
1953:src/xeq.c     ****     t = get_rtc_ticks();
1954:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
1955:src/xeq.c     ****     return f;
1956:src/xeq.c     ****  }
1957:src/xeq.c     **** #endif
1958:src/xeq.c     **** /* Get the current ticker value */
1959:src/xeq.c     **** void op_ticks(enum nilop op) {
1960:src/xeq.c     **** #if !defined(CONSOLE)
1961:src/xeq.c     ****     setX_int_sgn(Ticker, 0);
1962:src/xeq.c     **** #else 
1963:src/xeq.c     ****     struct timeval tv;
1964:src/xeq.c     ****     long long int t;
1965:src/xeq.c     ****     gettimeofday(&tv, NULL);
1966:src/xeq.c     ****     t = tv.tv_sec * 10 + tv.tv_usec / 100000;
1967:src/xeq.c     ****     setX_int_sgn(t, 0);
1968:src/xeq.c     **** #endif
1969:src/xeq.c     **** }
1970:src/xeq.c     **** 
1971:src/xeq.c     **** /* Display the battery voltage */
1972:src/xeq.c     **** void op_voltage(enum nilop op) {
1973:src/xeq.c     **** 	decNumber t, u;
1974:src/xeq.c     **** #ifdef REALBUILD
1975:src/xeq.c     **** 	unsigned long long int v = 19 + Voltage;
1976:src/xeq.c     **** #elif defined(DM42)
1977:src/xeq.c     **** 	int v = get_vbat();
1978:src/xeq.c     **** 	v = v / 100;
ARM GAS  /tmp/ccQlyisH.s 			page 42


1979:src/xeq.c     **** #else
1980:src/xeq.c     **** 	unsigned long long int v = 32;
1981:src/xeq.c     **** #endif
1982:src/xeq.c     **** 
1983:src/xeq.c     **** 	if (is_intmode()) {
1984:src/xeq.c     **** 		setX_int_sgn(v, 0);
1985:src/xeq.c     **** 	} else {
1986:src/xeq.c     **** 		ullint_to_dn(&t, v);
1987:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
1988:src/xeq.c     **** 		setX(&u);
1989:src/xeq.c     **** 	}
1990:src/xeq.c     **** }
1991:src/xeq.c     **** 
1992:src/xeq.c     **** /*
1993:src/xeq.c     ****  *  Commands to determine free memory
1994:src/xeq.c     ****  */
1995:src/xeq.c     **** int free_mem(void) {
1996:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
1997:src/xeq.c     **** }
1998:src/xeq.c     **** 
1999:src/xeq.c     **** int free_flash(void) {
2000:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
2001:src/xeq.c     **** }
2002:src/xeq.c     **** 
2003:src/xeq.c     **** void get_mem(enum nilop op) {
2004:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
2005:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
2006:src/xeq.c     **** 		 op == OP_FLASHQ ? free_flash() :
2007:src/xeq.c     **** 		 global_regs(),
2008:src/xeq.c     **** 		 0);
2009:src/xeq.c     **** }
2010:src/xeq.c     **** 
2011:src/xeq.c     **** 
2012:src/xeq.c     **** /* Check if a keystroke is pending in the buffer, if so return it to the specified
2013:src/xeq.c     ****  * register, if not skip the next step.
2014:src/xeq.c     ****  */
2015:src/xeq.c     **** void cmdkeyp(unsigned int arg, enum rarg op) {
2016:src/xeq.c     **** 	int cond = LastKey == 0;
2017:src/xeq.c     **** 	if (!cond) {
2018:src/xeq.c     **** 		int k = LastKey - 1;
2019:src/xeq.c     **** 		LastKey = 0;
2020:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
2021:src/xeq.c     **** 	}
2022:src/xeq.c     **** 	fin_tst(cond);
2023:src/xeq.c     **** }
2024:src/xeq.c     **** 
2025:src/xeq.c     **** /*
2026:src/xeq.c     ****  *  Get a key code from a register and translate it from row/colum to internal
2027:src/xeq.c     ****  *  Check for valid arguments
2028:src/xeq.c     ****  */
2029:src/xeq.c     **** static int get_keycode_from_reg(unsigned int n)
2030:src/xeq.c     **** {
2031:src/xeq.c     **** 	int sgn;
2032:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
2033:src/xeq.c     **** 	if ( c < 0 )
2034:src/xeq.c     **** 		report_err(ERR_RANGE);
2035:src/xeq.c     **** 	return c;
ARM GAS  /tmp/ccQlyisH.s 			page 43


2036:src/xeq.c     **** }
2037:src/xeq.c     **** 
2038:src/xeq.c     **** /*
2039:src/xeq.c     ****  *  Take a row/column key code and feed it to the keyboard buffer
2040:src/xeq.c     ****  *  This stops program execution first to make sure, the key is not
2041:src/xeq.c     ****  *  read in by KEY? again.
2042:src/xeq.c     ****  */
2043:src/xeq.c     **** void cmdputkey(unsigned int arg, enum rarg op)
2044:src/xeq.c     **** {
2045:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
2046:src/xeq.c     **** 
2047:src/xeq.c     **** 	if (c >= 0) {
2048:src/xeq.c     **** 		set_running_off();
2049:src/xeq.c     **** 		put_key(c);
2050:src/xeq.c     **** 	}
2051:src/xeq.c     **** }
2052:src/xeq.c     **** 
2053:src/xeq.c     **** /*
2054:src/xeq.c     ****  *  Return the type of the keycode in register n
2055:src/xeq.c     ****  *  returns 0-9 for digits, 10 for ., +/-, EEX, 11 for f,g,h, 12 for all other keys.
2056:src/xeq.c     ****  *  Invalid codes produce an error.
2057:src/xeq.c     ****  */
2058:src/xeq.c     **** void cmdkeytype(unsigned int arg, enum rarg op)
2059:src/xeq.c     **** {
2060:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
2061:src/xeq.c     **** 	if ( c >= 0 ) {
2062:src/xeq.c     **** 		const char types[] = {
2063:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
2064:src/xeq.c     **** 			12, 12, 12, 11, 11, 11,
2065:src/xeq.c     **** 			12, 12, 10, 10, 12, 12,
2066:src/xeq.c     **** 			12,  7,  8,  9, 12, 12,
2067:src/xeq.c     **** 			12,  4,  5,  6, 12, 12,
2068:src/xeq.c     **** 			12,  1,  2,  3, 12, 12,
2069:src/xeq.c     **** 			12,  0, 10, 12, 12 };
2070:src/xeq.c     **** 		lift_if_enabled();
2071:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
2072:src/xeq.c     **** 	}
2073:src/xeq.c     **** }
2074:src/xeq.c     **** 
2075:src/xeq.c     **** 
2076:src/xeq.c     **** /* Check which operating mode we're in -- integer or real -- they both
2077:src/xeq.c     ****  * vector through this routine.
2078:src/xeq.c     ****  */
2079:src/xeq.c     **** void check_mode(enum nilop op) {
2080:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
2081:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
2082:src/xeq.c     **** 
2083:src/xeq.c     **** 	fin_tst(intmode == desired);
2084:src/xeq.c     **** }
2085:src/xeq.c     **** 
2086:src/xeq.c     **** 
2087:src/xeq.c     **** /* Check if DBLON is active
2088:src/xeq.c     ****  */
2089:src/xeq.c     **** void check_dblmode(enum nilop op) {
2090:src/xeq.c     **** 	fin_tst(is_dblmode());
2091:src/xeq.c     **** }
2092:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 44


2093:src/xeq.c     **** void op_query_xtal(enum nilop op) {
2094:src/xeq.c     **** 	fin_tst(Xtal);
2095:src/xeq.c     **** }
2096:src/xeq.c     **** 
2097:src/xeq.c     **** void op_query_print(enum nilop op) {
2098:src/xeq.c     **** #ifdef INFRARED
2099:src/xeq.c     **** 	fin_tst(1);
2100:src/xeq.c     **** #else
2101:src/xeq.c     **** 	fin_tst(0);
2102:src/xeq.c     **** #endif
2103:src/xeq.c     **** }
2104:src/xeq.c     **** 
2105:src/xeq.c     **** /* Save and restore the entire stack to sequential registers */
2106:src/xeq.c     **** static int check_stack_overlap(unsigned int arg) {
2107:src/xeq.c     **** 	const int n = stack_size();
2108:src/xeq.c     **** 
2109:src/xeq.c     **** 	if (arg + n <= global_regs() || arg >= NUMREG) {
2110:src/xeq.c     **** 		return n;
2111:src/xeq.c     **** 	}
2112:src/xeq.c     **** 	report_err(ERR_STK_CLASH);
2113:src/xeq.c     **** 	return 0;
2114:src/xeq.c     **** }
2115:src/xeq.c     **** 
2116:src/xeq.c     **** void cmdstostk(unsigned int arg, enum rarg op) {
2117:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
2118:src/xeq.c     **** 
2119:src/xeq.c     **** 	for (i=0; i<n; i++)
2120:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
2121:src/xeq.c     **** }
2122:src/xeq.c     **** 
2123:src/xeq.c     **** void cmdrclstk(unsigned int arg, enum rarg op) {
2124:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
2125:src/xeq.c     **** 
2126:src/xeq.c     **** 	for (i=0; i<n; i++)
2127:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
2128:src/xeq.c     **** }
2129:src/xeq.c     **** 
2130:src/xeq.c     **** 
2131:src/xeq.c     **** /*
2132:src/xeq.c     ****  *  Move up the return stack, skipping any local variables
2133:src/xeq.c     ****  */
2134:src/xeq.c     **** static void retstk_up(void)
2135:src/xeq.c     **** {
 309              		.loc 1 2135 1 is_stmt 1 view -0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
2136:src/xeq.c     **** 	if (RetStkPtr < 0) {
 314              		.loc 1 2136 2 view .LVU95
 315              		.loc 1 2136 6 is_stmt 0 view .LVU96
 316 0000 1A4B     		ldr	r3, .L39
2135:src/xeq.c     **** 	if (RetStkPtr < 0) {
 317              		.loc 1 2135 1 view .LVU97
 318 0002 70B4     		push	{r4, r5, r6}
 319              		.cfi_def_cfa_offset 12
 320              		.cfi_offset 4, -12
ARM GAS  /tmp/ccQlyisH.s 			page 45


 321              		.cfi_offset 5, -8
 322              		.cfi_offset 6, -4
 323              		.loc 1 2136 6 view .LVU98
 324 0004 1C68     		ldr	r4, [r3]
 325 0006 B4F9E227 		ldrsh	r2, [r4, #2018]
 326              		.loc 1 2136 5 view .LVU99
 327 000a 002A     		cmp	r2, #0
 328 000c 01DB     		blt	.L37
 329              	.L27:
2137:src/xeq.c     **** 		int sp = RetStkPtr++;
2138:src/xeq.c     **** 		unsigned int s = RetStk[sp++];
2139:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
2140:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
2141:src/xeq.c     **** 			RetStkPtr = sp;
2142:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
2143:src/xeq.c     **** 			LocalRegs = 0;
2144:src/xeq.c     **** 			while (sp < 0) {
2145:src/xeq.c     **** 				s = RetStk[sp];
2146:src/xeq.c     **** 				if (isLOCAL(s)) {
2147:src/xeq.c     **** 					LocalRegs = sp;
2148:src/xeq.c     **** 					break;
2149:src/xeq.c     **** 				}
2150:src/xeq.c     **** 				++sp;
2151:src/xeq.c     **** 				if (isHIDDEN(s))
2152:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
2153:src/xeq.c     **** 			}
2154:src/xeq.c     **** 		}
2155:src/xeq.c     **** 	}
2156:src/xeq.c     **** }
 330              		.loc 1 2156 1 view .LVU100
 331 000e 70BC     		pop	{r4, r5, r6}
 332              		.cfi_remember_state
 333              		.cfi_restore 6
 334              		.cfi_restore 5
 335              		.cfi_restore 4
 336              		.cfi_def_cfa_offset 0
 337 0010 7047     		bx	lr
 338              	.L37:
 339              		.cfi_restore_state
 340              	.LBB1317:
2137:src/xeq.c     **** 		int sp = RetStkPtr++;
 341              		.loc 1 2137 3 is_stmt 1 view .LVU101
2138:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 342              		.loc 1 2138 26 is_stmt 0 view .LVU102
 343 0012 174B     		ldr	r3, .L39+4
2137:src/xeq.c     **** 		int sp = RetStkPtr++;
 344              		.loc 1 2137 21 view .LVU103
 345 0014 511C     		adds	r1, r2, #1
2138:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 346              		.loc 1 2138 26 view .LVU104
 347 0016 1D68     		ldr	r5, [r3]
2137:src/xeq.c     **** 		int sp = RetStkPtr++;
 348              		.loc 1 2137 21 view .LVU105
 349 0018 A4F8E217 		strh	r1, [r4, #2018]	@ movhi
 350              	.LVL26:
2138:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 351              		.loc 1 2138 3 is_stmt 1 view .LVU106
ARM GAS  /tmp/ccQlyisH.s 			page 46


2138:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 352              		.loc 1 2138 26 is_stmt 0 view .LVU107
 353 001c 35F81230 		ldrh	r3, [r5, r2, lsl #1]
 354              	.LVL27:
2139:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 355              		.loc 1 2139 3 is_stmt 1 view .LVU108
2139:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 356              		.loc 1 2139 7 is_stmt 0 view .LVU109
 357 0020 1A0B     		lsrs	r2, r3, #12
 358              	.LVL28:
2139:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 359              		.loc 1 2139 6 view .LVU110
 360 0022 22F00202 		bic	r2, r2, #2
 361 0026 012A     		cmp	r2, #1
 362 0028 F1D1     		bne	.L27
2140:src/xeq.c     **** 			RetStkPtr = sp;
 363              		.loc 1 2140 4 is_stmt 1 view .LVU111
2140:src/xeq.c     **** 			RetStkPtr = sp;
 364              		.loc 1 2140 10 is_stmt 0 view .LVU112
 365 002a C3F30B03 		ubfx	r3, r3, #0, #12
 366              	.LVL29:
2140:src/xeq.c     **** 			RetStkPtr = sp;
 367              		.loc 1 2140 7 view .LVU113
 368 002e 0B44     		add	r3, r3, r1
 369              	.LVL30:
2141:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 370              		.loc 1 2141 4 is_stmt 1 view .LVU114
2143:src/xeq.c     **** 			while (sp < 0) {
 371              		.loc 1 2143 14 is_stmt 0 view .LVU115
 372 0030 0022     		movs	r2, #0
2141:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 373              		.loc 1 2141 14 view .LVU116
 374 0032 A4F8E237 		strh	r3, [r4, #2018]	@ movhi
 375              	.LVL31:
2143:src/xeq.c     **** 			while (sp < 0) {
 376              		.loc 1 2143 4 is_stmt 1 view .LVU117
2143:src/xeq.c     **** 			while (sp < 0) {
 377              		.loc 1 2143 14 is_stmt 0 view .LVU118
 378 0036 A4F8DE27 		strh	r2, [r4, #2014]	@ movhi
2144:src/xeq.c     **** 				s = RetStk[sp];
 379              		.loc 1 2144 4 is_stmt 1 view .LVU119
 380 003a 6FF00046 		mvn	r6, #-2147483648
 381              	.L31:
2144:src/xeq.c     **** 				s = RetStk[sp];
 382              		.loc 1 2144 4 is_stmt 0 view .LVU120
 383 003e 9919     		adds	r1, r3, r6
 384 0040 05EB4101 		add	r1, r5, r1, lsl #1
 385 0044 03E0     		b	.L33
 386              	.LVL32:
 387              	.L32:
2151:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 388              		.loc 1 2151 8 view .LVU121
 389 0046 032A     		cmp	r2, #3
2150:src/xeq.c     **** 				if (isHIDDEN(s))
 390              		.loc 1 2150 5 view .LVU122
 391 0048 03F10103 		add	r3, r3, #1
 392              	.LVL33:
ARM GAS  /tmp/ccQlyisH.s 			page 47


2151:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 393              		.loc 1 2151 5 is_stmt 1 view .LVU123
2151:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 394              		.loc 1 2151 8 is_stmt 0 view .LVU124
 395 004c 0AD0     		beq	.L38
 396              	.LVL34:
 397              	.L33:
2145:src/xeq.c     **** 				if (isLOCAL(s)) {
 398              		.loc 1 2145 5 is_stmt 1 view .LVU125
2150:src/xeq.c     **** 				if (isHIDDEN(s))
 399              		.loc 1 2150 5 view .LVU126
2144:src/xeq.c     **** 				s = RetStk[sp];
 400              		.loc 1 2144 10 view .LVU127
 401 004e 002B     		cmp	r3, #0
 402 0050 DDDA     		bge	.L27
2145:src/xeq.c     **** 				if (isLOCAL(s)) {
 403              		.loc 1 2145 15 is_stmt 0 view .LVU128
 404 0052 31F8020F 		ldrh	r0, [r1, #2]!
 405              	.LVL35:
2146:src/xeq.c     **** 					LocalRegs = sp;
 406              		.loc 1 2146 5 is_stmt 1 view .LVU129
2146:src/xeq.c     **** 					LocalRegs = sp;
 407              		.loc 1 2146 9 is_stmt 0 view .LVU130
 408 0056 020B     		lsrs	r2, r0, #12
2146:src/xeq.c     **** 					LocalRegs = sp;
 409              		.loc 1 2146 8 view .LVU131
 410 0058 012A     		cmp	r2, #1
 411 005a F4D1     		bne	.L32
2147:src/xeq.c     **** 					break;
 412              		.loc 1 2147 6 is_stmt 1 view .LVU132
2147:src/xeq.c     **** 					break;
 413              		.loc 1 2147 16 is_stmt 0 view .LVU133
 414 005c A4F8DE37 		strh	r3, [r4, #2014]	@ movhi
2148:src/xeq.c     **** 				}
 415              		.loc 1 2148 6 is_stmt 1 view .LVU134
 416              	.LBE1317:
 417              		.loc 1 2156 1 is_stmt 0 view .LVU135
 418 0060 70BC     		pop	{r4, r5, r6}
 419              		.cfi_remember_state
 420              		.cfi_restore 6
 421              		.cfi_restore 5
 422              		.cfi_restore 4
 423              		.cfi_def_cfa_offset 0
 424 0062 7047     		bx	lr
 425              	.L38:
 426              		.cfi_restore_state
 427              	.LBB1318:
2152:src/xeq.c     **** 			}
 428              		.loc 1 2152 6 is_stmt 1 view .LVU136
2152:src/xeq.c     **** 			}
 429              		.loc 1 2152 12 is_stmt 0 view .LVU137
 430 0064 C0F30B00 		ubfx	r0, r0, #0, #12
 431              	.LVL36:
2152:src/xeq.c     **** 			}
 432              		.loc 1 2152 9 view .LVU138
 433 0068 0344     		add	r3, r3, r0
 434              	.LVL37:
ARM GAS  /tmp/ccQlyisH.s 			page 48


2152:src/xeq.c     **** 			}
 435              		.loc 1 2152 9 view .LVU139
 436 006a E8E7     		b	.L31
 437              	.L40:
 438              		.align	2
 439              	.L39:
 440 006c 00000000 		.word	main_ram
 441 0070 00000000 		.word	RetStk
 442              	.LBE1318:
 443              		.cfi_endproc
 444              	.LFE149:
 446              		.section	.text.flag_word,"ax",%progbits
 447              		.align	1
 448              		.p2align 2,,3
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 452              		.fpu fpv4-sp-d16
 454              	flag_word:
 455              	.LVL38:
 456              	.LFB196:
2157:src/xeq.c     **** 
2158:src/xeq.c     **** 
2159:src/xeq.c     **** /* Search from the given position for the specified numeric label.
2160:src/xeq.c     ****  */
2161:src/xeq.c     **** unsigned int find_opcode_from(unsigned int pc, const opcode l, const int flags) {
2162:src/xeq.c     **** 	unsigned short int top;
2163:src/xeq.c     **** 	int count;
2164:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
2165:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
2166:src/xeq.c     **** 
2167:src/xeq.c     **** 	count = 1 + find_section_bounds(pc, endp, &top);
2168:src/xeq.c     **** 	count -= top;
2169:src/xeq.c     **** 	while (count--) {
2170:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
2171:src/xeq.c     **** 		// If we don't find the label, we may search a little too far if many double word
2172:src/xeq.c     **** 		// instructions are in the code, but this doesn't do any harm.
2173:src/xeq.c     **** 		if (getprog(pc) == l)
2174:src/xeq.c     **** 			return pc;
2175:src/xeq.c     **** 		pc = do_inc(pc, endp);
2176:src/xeq.c     **** 	}
2177:src/xeq.c     **** 	if (errp)
2178:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2179:src/xeq.c     **** 	return 0;
2180:src/xeq.c     **** }
2181:src/xeq.c     **** 
2182:src/xeq.c     **** 
2183:src/xeq.c     **** unsigned int find_label_from(unsigned int pc, unsigned int arg, int flags) {
2184:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
2185:src/xeq.c     **** }
2186:src/xeq.c     **** 
2187:src/xeq.c     **** 
2188:src/xeq.c     **** 
2189:src/xeq.c     **** /* Handle a GTO/GSB instruction
2190:src/xeq.c     ****  */
2191:src/xeq.c     **** static void gsbgto(unsigned int pc, int gsb, unsigned int oldpc) {
2192:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
ARM GAS  /tmp/ccQlyisH.s 			page 49


2193:src/xeq.c     **** 	raw_set_pc(pc);
2194:src/xeq.c     **** 	if (gsb) {
2195:src/xeq.c     **** 		if (!Running && !XromRunning) {
2196:src/xeq.c     **** 			// XEQ or hot key from keyboard
2197:src/xeq.c     **** 			clrretstk();
2198:src/xeq.c     **** 			set_running_on();
2199:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
2200:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
2201:src/xeq.c     **** 				oldpc = pc;
2202:src/xeq.c     **** 		}
2203:src/xeq.c     **** 		if (-RetStkPtr >= (XromFlags.xIN ? XROM_RET_STACK_SIZE : RetStkSize)) {
2204:src/xeq.c     **** 			// Stack is full
2205:src/xeq.c     **** 			report_err(ERR_RAM_FULL);
2206:src/xeq.c     **** 			// clrretstk();
2207:src/xeq.c     **** 		}
2208:src/xeq.c     **** 		else {
2209:src/xeq.c     **** 			// Push PC on return stack
2210:src/xeq.c     **** 			RetStk[--RetStkPtr] = oldpc;
2211:src/xeq.c     **** 		}
2212:src/xeq.c     **** 	}
2213:src/xeq.c     **** }
2214:src/xeq.c     **** 
2215:src/xeq.c     **** // Handle a RTN
2216:src/xeq.c     **** static void do_rtn(int plus1) {
2217:src/xeq.c     **** 	unsigned short pc;
2218:src/xeq.c     **** 
2219:src/xeq.c     **** 	if (RetStkPtr >= 0) {
2220:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
2221:src/xeq.c     **** 		clrretstk();
2222:src/xeq.c     **** 		raw_set_pc(ProgBegin);
2223:src/xeq.c     **** 	}
2224:src/xeq.c     **** 	else {
2225:src/xeq.c     **** 		// Normal RTN within program
2226:src/xeq.c     **** 		// Pop any LOCALS off the stack, increment sp
2227:src/xeq.c     **** 		retstk_up();
2228:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
2229:src/xeq.c     **** 		raw_set_pc(pc);
2230:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
2231:src/xeq.c     **** 		if (plus1 && getprog(pc) != (OP_NIL | OP_POPUSR))
2232:src/xeq.c     **** 			if (incpc())
2233:src/xeq.c     **** 				decpc();
2234:src/xeq.c     **** 	}
2235:src/xeq.c     **** 	if (RetStkPtr == 0) {
2236:src/xeq.c     **** 		// RTN with empty stack stops
2237:src/xeq.c     **** 		set_running_off();
2238:src/xeq.c     **** 	}
2239:src/xeq.c     **** }
2240:src/xeq.c     **** 
2241:src/xeq.c     **** // RTN and RTN+1
2242:src/xeq.c     **** void op_rtn(enum nilop op) {
2243:src/xeq.c     **** 	if (! Running && ! XromRunning) {
2244:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
2245:src/xeq.c     **** 		clrretstk_pc();
2246:src/xeq.c     **** 	}
2247:src/xeq.c     **** 	else
2248:src/xeq.c     **** 		do_rtn(op == OP_RTNp1 ? 1 : 0);
2249:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 50


2250:src/xeq.c     **** 
2251:src/xeq.c     **** 
2252:src/xeq.c     **** // Called by XEQ, GTO and CAT browser
2253:src/xeq.c     **** void cmdgtocommon(int gsb, unsigned int pc) {
2254:src/xeq.c     **** 	if (pc == 0)
2255:src/xeq.c     **** 		set_running_off();
2256:src/xeq.c     **** 	else
2257:src/xeq.c     **** 		gsbgto(pc, gsb, state_pc());
2258:src/xeq.c     **** }
2259:src/xeq.c     **** 
2260:src/xeq.c     **** 
2261:src/xeq.c     **** // Common part of XEQUSR and XEQ'...' from XROM
2262:src/xeq.c     **** // Command pushes 4 values on stack, needs to be followed by POPUSR
2263:src/xeq.c     **** static void usergsb_common(unsigned short int target) {
2264:src/xeq.c     **** 	const unsigned int pc = state_pc();
2265:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
2266:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
2267:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
2268:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
2269:src/xeq.c     **** 
2270:src/xeq.c     **** 	XromUserPc = 0;			     // Hide information irrelevant to user code
2271:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
2272:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
2273:src/xeq.c     **** 	if (! Running)
2274:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
2275:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
2276:src/xeq.c     **** }
2277:src/xeq.c     **** 
2278:src/xeq.c     **** 
2279:src/xeq.c     **** // XEQUSR
2280:src/xeq.c     **** // Command fills the stack and calls the user's code.
2281:src/xeq.c     **** // Needs to be followed by POPUSR
2282:src/xeq.c     **** void do_usergsb(enum nilop op) {
2283:src/xeq.c     **** 	usergsb_common(XromUserPc);
2284:src/xeq.c     ****         fill(OP_FILL);
2285:src/xeq.c     **** }
2286:src/xeq.c     **** 
2287:src/xeq.c     **** 
2288:src/xeq.c     **** // POPUSR
2289:src/xeq.c     **** void op_popusr(enum nilop op) {
2290:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
2291:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
2292:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
2293:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
2294:src/xeq.c     **** }
2295:src/xeq.c     **** 
2296:src/xeq.c     **** /* Tests if the user program is at the top level */
2297:src/xeq.c     **** void isTop(enum nilop op) {
2298:src/xeq.c     **** 	int top = 0;
2299:src/xeq.c     **** 
2300:src/xeq.c     **** 	if (Running) {
2301:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
2302:src/xeq.c     **** 	}
2303:src/xeq.c     **** 	fin_tst(top);
2304:src/xeq.c     **** }
2305:src/xeq.c     **** 
2306:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 51


2307:src/xeq.c     **** // LBL?
2308:src/xeq.c     **** void cmdlblp(unsigned int arg, enum rarg op) {
2309:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
2310:src/xeq.c     **** }
2311:src/xeq.c     **** 
2312:src/xeq.c     **** 
2313:src/xeq.c     **** void cmdgto(unsigned int arg, enum rarg op) {
2314:src/xeq.c     **** 	unsigned int lbl;
2315:src/xeq.c     **** 	if (is_xrom())
2316:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
2317:src/xeq.c     **** 	else
2318:src/xeq.c     **** 		lbl = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
2319:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
2320:src/xeq.c     **** }
2321:src/xeq.c     **** 
2322:src/xeq.c     **** unsigned int findmultilbl(const opcode o, int flags) {
2323:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
2324:src/xeq.c     **** 	unsigned int lbl;
2325:src/xeq.c     **** 
2326:src/xeq.c     **** 	lbl = find_opcode_from(0, dest, 0);					// RAM
2327:src/xeq.c     **** 	if (lbl == 0)
2328:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
2329:src/xeq.c     **** 	if (lbl == 0)
2330:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
2331:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
2332:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2333:src/xeq.c     **** 	return lbl;
2334:src/xeq.c     **** }
2335:src/xeq.c     **** 
2336:src/xeq.c     **** // LBL?'...'
2337:src/xeq.c     **** void cmdmultilblp(const opcode o, enum multiops mopr) {
2338:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
2339:src/xeq.c     **** }
2340:src/xeq.c     **** 
2341:src/xeq.c     **** void cmdmultigto(const opcode o, enum multiops mopr) {
2342:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
2343:src/xeq.c     **** 		// In XROM the command behaves differently!
2344:src/xeq.c     **** 		unsigned short int target = findmultilbl(o, 0);
2345:src/xeq.c     **** 		if (target != 0)
2346:src/xeq.c     **** 			usergsb_common(target); 
2347:src/xeq.c     **** 		else
2348:src/xeq.c     **** 			incpc();
2349:src/xeq.c     **** 	}
2350:src/xeq.c     **** 	else {
2351:src/xeq.c     **** 		cmdgtocommon(mopr != DBL_GTO, findmultilbl(o, FIND_OP_ERROR));
2352:src/xeq.c     **** 	}
2353:src/xeq.c     **** }
2354:src/xeq.c     **** 
2355:src/xeq.c     **** static void branchtoalpha(int is_gsb, char buf[]) {
2356:src/xeq.c     **** 	unsigned int op;
2357:src/xeq.c     **** 
2358:src/xeq.c     **** 	op = OP_DBL + (DBL_LBL << DBL_SHIFT);
2359:src/xeq.c     **** 	op |= buf[0] & 0xff;
2360:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
2361:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
2362:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
2363:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 52


2364:src/xeq.c     **** 
2365:src/xeq.c     **** void cmdalphagto(unsigned int arg, enum rarg op) {
2366:src/xeq.c     **** 	char buf[14];
2367:src/xeq.c     **** 
2368:src/xeq.c     **** 	xset(buf, '\0', sizeof(buf));
2369:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
2370:src/xeq.c     **** }
2371:src/xeq.c     **** 
2372:src/xeq.c     **** static void do_branchalpha(int is_gsb) {
2373:src/xeq.c     **** 	char buf[4];
2374:src/xeq.c     **** 
2375:src/xeq.c     **** 	xcopy(buf, Alpha, 3);
2376:src/xeq.c     **** 	buf[3] = '\0';
2377:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
2378:src/xeq.c     **** }
2379:src/xeq.c     **** 
2380:src/xeq.c     **** void op_gtoalpha(enum nilop op) {
2381:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
2382:src/xeq.c     **** }
2383:src/xeq.c     **** 
2384:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2385:src/xeq.c     **** int get_dispmode_digs(int *pdigs)
2386:src/xeq.c     **** {
2387:src/xeq.c     **** 	int dispmode = UState.dispmode;
2388:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
2389:src/xeq.c     **** 
2390:src/xeq.c     **** 	if (dispdigs >= 12) {
2391:src/xeq.c     **** 		dispdigs -= 12;
2392:src/xeq.c     **** 		dispmode += 4;
2393:src/xeq.c     **** 		if (dispmode >= 6) {
2394:src/xeq.c     **** 			dispmode -= 2;
2395:src/xeq.c     **** 			dispdigs += 4;
2396:src/xeq.c     **** 		}
2397:src/xeq.c     **** 	}
2398:src/xeq.c     **** 	*pdigs = dispdigs;
2399:src/xeq.c     **** 	return dispmode;
2400:src/xeq.c     **** }
2401:src/xeq.c     **** 
2402:src/xeq.c     **** void set_dispmode_digs(int dispmode, int dispdigs)
2403:src/xeq.c     **** {
2404:src/xeq.c     **** 	if (dispmode >= 4) {
2405:src/xeq.c     **** 		dispmode -= 4;
2406:src/xeq.c     **** 		dispdigs += 12;
2407:src/xeq.c     **** 		if (dispdigs >= 16) {
2408:src/xeq.c     **** 			dispdigs -= 4;
2409:src/xeq.c     **** 			dispmode += 2;
2410:src/xeq.c     **** 		}
2411:src/xeq.c     **** 	}
2412:src/xeq.c     **** 	UState.dispmode = dispmode;
2413:src/xeq.c     **** 	UState.dispdigs = dispdigs;
2414:src/xeq.c     **** }
2415:src/xeq.c     **** #endif
2416:src/xeq.c     **** 
2417:src/xeq.c     **** void cmddisp(unsigned int arg, enum rarg op) {
2418:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2419:src/xeq.c     **** 	int dispdigs;
2420:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
ARM GAS  /tmp/ccQlyisH.s 			page 53


2421:src/xeq.c     **** #ifdef DM42
2422:src/xeq.c     **** 	switch (op) {
2423:src/xeq.c     **** 	case RARG_STD:
2424:src/xeq.c     **** 	  dispmode = MODE_STD;
2425:src/xeq.c     **** 	  break;
2426:src/xeq.c     **** 	case RARG_FIX:
2427:src/xeq.c     **** 	  dispmode = MODE_FIX;
2428:src/xeq.c     **** 	  break;
2429:src/xeq.c     **** 	case RARG_SCI:
2430:src/xeq.c     **** 	  dispmode = MODE_SCI;
2431:src/xeq.c     **** 	  break;
2432:src/xeq.c     **** 	case RARG_ENG:
2433:src/xeq.c     **** 	  dispmode = MODE_ENG;
2434:src/xeq.c     **** 	  break;
2435:src/xeq.c     **** 	case RARG_SIG:
2436:src/xeq.c     **** 	  dispmode = MODE_SIG;
2437:src/xeq.c     **** 	  break;
2438:src/xeq.c     **** 	case RARG_SIG0:
2439:src/xeq.c     **** 	  dispmode = MODE_SIG0;
2440:src/xeq.c     **** 	  break;
2441:src/xeq.c     **** 	default:;
2442:src/xeq.c     **** 	}
2443:src/xeq.c     **** 	if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2444:src/xeq.c     **** 	  report_err(ERR_RANGE);
2445:src/xeq.c     **** 	  return;
2446:src/xeq.c     **** 	}
2447:src/xeq.c     **** #else	
2448:src/xeq.c     **** 	if (op != RARG_DISP)
2449:src/xeq.c     **** 		dispmode = (op - RARG_STD) + MODE_STD;
2450:src/xeq.c     **** 	else if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2451:src/xeq.c     **** 		report_err(ERR_RANGE);
2452:src/xeq.c     **** 		return;
2453:src/xeq.c     **** 	}
2454:src/xeq.c     **** #endif
2455:src/xeq.c     **** 	set_dispmode_digs(dispmode, arg);
2456:src/xeq.c     **** #else
2457:src/xeq.c     **** 	UState.dispdigs = arg;
2458:src/xeq.c     **** 	if (op != RARG_DISP)
2459:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
2460:src/xeq.c     **** #endif
2461:src/xeq.c     **** 	op_float(OP_FLOAT);
2462:src/xeq.c     **** }
2463:src/xeq.c     **** 
2464:src/xeq.c     **** 
2465:src/xeq.c     **** /* Metric / Imperial conversion code */
2466:src/xeq.c     **** decNumber *convC2F(decNumber *r, const decNumber *x) {
2467:src/xeq.c     **** 	decNumber s;
2468:src/xeq.c     **** 
2469:src/xeq.c     **** 	dn_multiply(&s, x, &const_9on5);
2470:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
2471:src/xeq.c     **** }
2472:src/xeq.c     **** 
2473:src/xeq.c     **** decNumber *convF2C(decNumber *r, const decNumber *x) {
2474:src/xeq.c     **** 	decNumber s;
2475:src/xeq.c     **** 
2476:src/xeq.c     **** 	dn_subtract(&s, x, &const_32);
2477:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
ARM GAS  /tmp/ccQlyisH.s 			page 54


2478:src/xeq.c     **** }
2479:src/xeq.c     **** 
2480:src/xeq.c     **** decNumber *convDB2AR(decNumber *r, const decNumber *x) {
2481:src/xeq.c     **** 	decNumber t;
2482:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
2483:src/xeq.c     **** 	return decNumberPow10(r, &t);
2484:src/xeq.c     **** }
2485:src/xeq.c     **** 
2486:src/xeq.c     **** decNumber *convAR2DB(decNumber *r, const decNumber *x) {
2487:src/xeq.c     **** 	decNumber t;
2488:src/xeq.c     **** 	dn_log10(&t, x);
2489:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
2490:src/xeq.c     **** }
2491:src/xeq.c     **** 
2492:src/xeq.c     **** decNumber *convDB2PR(decNumber *r, const decNumber *x) {
2493:src/xeq.c     **** 	decNumber t;
2494:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
2495:src/xeq.c     **** 	return decNumberPow10(r, &t);
2496:src/xeq.c     **** }
2497:src/xeq.c     **** 
2498:src/xeq.c     **** decNumber *convPR2DB(decNumber *r, const decNumber *x) {
2499:src/xeq.c     **** 	decNumber t;
2500:src/xeq.c     **** 	dn_log10(&t, x);
2501:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
2502:src/xeq.c     **** }
2503:src/xeq.c     **** 
2504:src/xeq.c     **** /* Scale conversions */
2505:src/xeq.c     **** void do_conv(decNumber *r, unsigned int arg, const decNumber *x) {
2506:src/xeq.c     **** 	decNumber m;
2507:src/xeq.c     **** 	const unsigned int conv = arg / 2;
2508:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
2509:src/xeq.c     **** 
2510:src/xeq.c     **** 	if (conv > NUM_CONSTS_CONV) {
2511:src/xeq.c     **** 		decNumberCopy(r, x);
2512:src/xeq.c     **** 		return;
2513:src/xeq.c     **** 	}
2514:src/xeq.c     **** 
2515:src/xeq.c     **** 	decimal64ToNumber(&CONSTANT_CONV(conv), &m);
2516:src/xeq.c     **** 
2517:src/xeq.c     **** 	if (dirn == 0)		// metric to imperial
2518:src/xeq.c     **** 		dn_divide(r, x, &m);
2519:src/xeq.c     **** 	else			// imperial to metric
2520:src/xeq.c     **** 		dn_multiply(r, x, &m);
2521:src/xeq.c     **** }
2522:src/xeq.c     **** 
2523:src/xeq.c     **** void cmdconv(unsigned int arg, enum rarg op) {
2524:src/xeq.c     **** 	decNumber x, r;
2525:src/xeq.c     **** 
2526:src/xeq.c     **** 	if (is_intmode())
2527:src/xeq.c     **** 		return;
2528:src/xeq.c     **** 
2529:src/xeq.c     **** 	getX(&x);
2530:src/xeq.c     **** 	do_conv(&r, arg, &x);
2531:src/xeq.c     **** 	setlastX();
2532:src/xeq.c     **** 	setX(&r);
2533:src/xeq.c     **** }
2534:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 55


2535:src/xeq.c     **** /*  Finish up a test -- if the value is non-zero, the test passes.
2536:src/xeq.c     ****  *  If it is zero, the test fails.
2537:src/xeq.c     ****  */
2538:src/xeq.c     **** void fin_tst(const int a) {
2539:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
2540:src/xeq.c     **** 	if (Running || XromRunning) {
2541:src/xeq.c     **** 		if (! a && incpc())
2542:src/xeq.c     **** 			decpc();
2543:src/xeq.c     **** 	}
2544:src/xeq.c     **** 	else
2545:src/xeq.c     **** 		DispMsg = msg;
2546:src/xeq.c     **** #ifdef INFRARED
2547:src/xeq.c     **** 	if (Tracing) {
2548:src/xeq.c     **** 		print_justified( msg );
2549:src/xeq.c     **** 		Tracing = 0;
2550:src/xeq.c     **** 	}
2551:src/xeq.c     **** #endif
2552:src/xeq.c     **** }
2553:src/xeq.c     **** 
2554:src/xeq.c     **** 
2555:src/xeq.c     **** /* Skip a number of instructions forwards */
2556:src/xeq.c     **** void cmdskip(unsigned int arg, enum rarg op) {
2557:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2558:src/xeq.c     **** 	unsigned int pc;
2559:src/xeq.c     **** 
2560:src/xeq.c     **** 	if (op == RARG_CASE) {
2561:src/xeq.c     **** 		int sgn;
2562:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
2563:src/xeq.c     **** 		if (sgn || arg >= 100) {
2564:src/xeq.c     **** 			report_err(ERR_RANGE);
2565:src/xeq.c     **** 			return;
2566:src/xeq.c     **** 		}
2567:src/xeq.c     **** 	}
2568:src/xeq.c     **** 
2569:src/xeq.c     **** 	if (isXROM(origpc))
2570:src/xeq.c     **** 		pc = origpc + arg;
2571:src/xeq.c     **** 	else {
2572:src/xeq.c     **** 		while (arg-- && !incpc());
2573:src/xeq.c     **** 		if (PcWrapped) {
2574:src/xeq.c     **** 			report_err(ERR_RANGE);
2575:src/xeq.c     **** 		}
2576:src/xeq.c     **** 		pc = state_pc();
2577:src/xeq.c     **** 	}
2578:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSF, origpc);
2579:src/xeq.c     **** }
2580:src/xeq.c     **** 
2581:src/xeq.c     **** /* Skip backwards */
2582:src/xeq.c     **** void cmdback(unsigned int arg, enum rarg op) {
2583:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2584:src/xeq.c     **** 	unsigned int pc = origpc;
2585:src/xeq.c     **** 
2586:src/xeq.c     **** 	if (isXROM(origpc))
2587:src/xeq.c     **** 		pc -= arg + 1;
2588:src/xeq.c     ****         else if (arg) {
2589:src/xeq.c     **** 		if ( Running ) {
2590:src/xeq.c     **** 			// Handles the case properly that we are on last step
2591:src/xeq.c     **** 			pc = do_dec(pc, 1);
ARM GAS  /tmp/ccQlyisH.s 			page 56


2592:src/xeq.c     **** 		}
2593:src/xeq.c     **** 		do {
2594:src/xeq.c     **** 			pc = do_dec(pc, 1);
2595:src/xeq.c     **** 		} while (--arg && !PcWrapped);
2596:src/xeq.c     **** 		if (PcWrapped) {
2597:src/xeq.c     **** 			report_err(ERR_RANGE);
2598:src/xeq.c     **** 			return;
2599:src/xeq.c     **** 		}
2600:src/xeq.c     **** 	}
2601:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSB, origpc);
2602:src/xeq.c     **** }
2603:src/xeq.c     **** 
2604:src/xeq.c     **** 
2605:src/xeq.c     **** /* Append a character to the command line
2606:src/xeq.c     ****  */
2607:src/xeq.c     **** static void append_cmdline(char c) {
2608:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
2609:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
2610:src/xeq.c     **** }
2611:src/xeq.c     **** 
2612:src/xeq.c     **** /* Make sure exponent stays within allowed limits.
2613:src/xeq.c     ****  * was_digit_entered: 0: sign was changed
2614:src/xeq.c     ****  *                    1: new digit was entered
2615:src/xeq.c     ****  */
2616:src/xeq.c     **** static void exponent_adjusted(int was_digit_entered)
2617:src/xeq.c     **** {
2618:src/xeq.c     **** 	const int dbl = is_dblmode();
2619:src/xeq.c     **** 	int i;
2620:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
2621:src/xeq.c     **** 	const int neg_type_dc = get_reg_n_int_sgn(0, &i);
2622:src/xeq.c     **** #else
2623:src/xeq.c     **** 	const int neg_type_dc = SP_NEG_EXP_ENTRY_TYPE_DC;
2624:src/xeq.c     **** #endif
2625:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DC == -1
2626:src/xeq.c     **** 	const int neg_lim_dc = get_reg_n_int_sgn(1, &i);
2627:src/xeq.c     **** #else
2628:src/xeq.c     **** 	const int neg_lim_dc = SP_NEG_EXP_ENTRY_LIMIT_DC;
2629:src/xeq.c     **** #endif
2630:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DS == -1
2631:src/xeq.c     **** 	const int neg_type_ds = get_reg_n_int_sgn(2, &i);
2632:src/xeq.c     **** #else
2633:src/xeq.c     **** 	const int neg_type_ds = SP_NEG_EXP_ENTRY_TYPE_DS;
2634:src/xeq.c     **** #endif
2635:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DS == -1
2636:src/xeq.c     **** 	const int neg_lim_ds = get_reg_n_int_sgn(3, &i);
2637:src/xeq.c     **** #else
2638:src/xeq.c     **** 	const int neg_lim_ds = SP_NEG_EXP_ENTRY_LIMIT_DS;
2639:src/xeq.c     **** #endif
2640:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DC == -1
2641:src/xeq.c     **** 	const int pos_type_dc = get_reg_n_int_sgn(4, &i);
2642:src/xeq.c     **** #else
2643:src/xeq.c     **** 	const int pos_type_dc = SP_POS_EXP_ENTRY_TYPE_DC;
2644:src/xeq.c     **** #endif
2645:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DC == -1
2646:src/xeq.c     **** 	const int pos_lim_dc = get_reg_n_int_sgn(5, &i);
2647:src/xeq.c     **** #else
2648:src/xeq.c     **** 	const int pos_lim_dc = SP_POS_EXP_ENTRY_LIMIT_DC;
ARM GAS  /tmp/ccQlyisH.s 			page 57


2649:src/xeq.c     **** #endif
2650:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DS == -1
2651:src/xeq.c     **** 	const int pos_type_ds = get_reg_n_int_sgn(6, &i);
2652:src/xeq.c     **** #else
2653:src/xeq.c     **** 	const int pos_type_ds = SP_POS_EXP_ENTRY_TYPE_DS;
2654:src/xeq.c     **** #endif
2655:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DS == -1
2656:src/xeq.c     **** 	const int pos_lim_ds = get_reg_n_int_sgn(7, &i);
2657:src/xeq.c     **** #else
2658:src/xeq.c     **** 	const int pos_lim_ds = SP_POS_EXP_ENTRY_LIMIT_DS;
2659:src/xeq.c     **** #endif
2660:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1
2661:src/xeq.c     **** 	const int exp_chs_dc = get_reg_n_int_sgn(8, &i);
2662:src/xeq.c     **** #else
2663:src/xeq.c     **** 	const int exp_chs_dc = SP_EXP_ENTRY_CHS_DC;
2664:src/xeq.c     **** #endif
2665:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DS == -1
2666:src/xeq.c     **** 	const int exp_chs_ds = get_reg_n_int_sgn(9, &i);
2667:src/xeq.c     **** #else
2668:src/xeq.c     **** 	const int exp_chs_ds = SP_EXP_ENTRY_CHS_DS;
2669:src/xeq.c     **** #endif
2670:src/xeq.c     **** 	const int dp_neg_type_dc = DP_NEG_EXP_ENTRY_TYPE_DC;
2671:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
2672:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
2673:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
2674:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
2675:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
2676:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
2677:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
2678:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
2679:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
2680:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2681:src/xeq.c     **** 	const int large_exp_entry = 1;
2682:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
2683:src/xeq.c     **** #else
2684:src/xeq.c     **** 	const int large_exp_entry = 0;
2685:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex + 1];
2686:src/xeq.c     **** #endif
2687:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1 || SP_NEG_EXP_ENTRY_TYPE_DC != SP_NEG_EXP_ENTRY_TYPE_DS \
2688:src/xeq.c     ****     || SP_NEG_EXP_ENTRY_LIMIT_DC == -1 || SP_NEG_EXP_ENTRY_LIMIT_DC != SP_NEG_EXP_ENTRY_LIMIT_DS \
2689:src/xeq.c     ****     || SP_POS_EXP_ENTRY_TYPE_DC == -1 || SP_POS_EXP_ENTRY_TYPE_DC != SP_POS_EXP_ENTRY_TYPE_DS \
2690:src/xeq.c     ****     || SP_POS_EXP_ENTRY_LIMIT_DC == -1 || SP_POS_EXP_ENTRY_LIMIT_DC != SP_POS_EXP_ENTRY_LIMIT_DS \
2691:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC != SP_EXP_ENTRY_CHS_DS \
2692:src/xeq.c     ****     || SP_EXP_ENTRY_ZERO_DC == -1 || SP_EXP_ENTRY_ZERO_DC != SP_EXP_ENTRY_ZERO_DS \
2693:src/xeq.c     ****     || ((DP_NEG_EXP_ENTRY_TYPE_DC != DP_NEG_EXP_ENTRY_TYPE_DS \
2694:src/xeq.c     ****          || DP_NEG_EXP_ENTRY_LIMIT_DC != DP_NEG_EXP_ENTRY_LIMIT_DS \
2695:src/xeq.c     ****          || DP_POS_EXP_ENTRY_TYPE_DC != DP_POS_EXP_ENTRY_TYPE_DS \
2696:src/xeq.c     ****          || DP_POS_EXP_ENTRY_LIMIT_DC != DP_POS_EXP_ENTRY_LIMIT_DS \
2697:src/xeq.c     ****          || DP_EXP_ENTRY_CHS_DC != DP_EXP_ENTRY_CHS_DS \
2698:src/xeq.c     ****          || DP_EXP_ENTRY_ZERO_DC != DP_EXP_ENTRY_ZERO_DS) && defined(LARGE_EXPONENT_ENTRY))
2699:src/xeq.c     **** 	const int flag_D = get_user_flag(NAN_FLAG);
2700:src/xeq.c     **** #else
2701:src/xeq.c     **** 	const int flag_D = 0;
2702:src/xeq.c     **** #endif
2703:src/xeq.c     **** #ifndef SHIFT_EXPONENT
2704:src/xeq.c     **** 	int negative;
2705:src/xeq.c     **** #endif
ARM GAS  /tmp/ccQlyisH.s 			page 58


2706:src/xeq.c     **** 	int emax;
2707:src/xeq.c     **** 
2708:src/xeq.c     **** 	/* Figure out the range limit for the exponent */
2709:src/xeq.c     **** 	if (!large_exp_entry && dbl) {
2710:src/xeq.c     **** 		emax = 999;
2711:src/xeq.c     **** 	}
2712:src/xeq.c     **** 	else {
2713:src/xeq.c     **** 		int emax_plus, emax_minus;
2714:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
2715:src/xeq.c     **** 
2716:src/xeq.c     **** 		if ((neg_type_dc >= 1 && neg_type_dc <= 9)
2717:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
2718:src/xeq.c     **** 		    || (pos_type_dc >= 1 && pos_type_dc <= 3)
2719:src/xeq.c     **** 		    || (pos_type_ds >= 1 && pos_type_ds <= 3)
2720:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2721:src/xeq.c     **** 		    || (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9)
2722:src/xeq.c     **** 		    || (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9)
2723:src/xeq.c     **** 		    || (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2724:src/xeq.c     **** 		    || (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2725:src/xeq.c     **** #endif
2726:src/xeq.c     **** 		   ) {
2727:src/xeq.c     **** 			// Exponent limits have to be calculated at run-time
2728:src/xeq.c     **** 
2729:src/xeq.c     **** 			for (i = 0; i < CmdLineLength; ++i) {
2730:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2731:src/xeq.c     **** 				if (Cmdline[i] == 'E' || Cmdline[i] == 'D')
2732:src/xeq.c     **** #else
2733:src/xeq.c     **** 				if (Cmdline[i] == 'E')
2734:src/xeq.c     **** #endif
2735:src/xeq.c     **** 					break;
2736:src/xeq.c     **** 				else if (Cmdline[i] == '.')
2737:src/xeq.c     **** 					dot = i;
2738:src/xeq.c     **** 				else if (Cmdline[i] != '0') {
2739:src/xeq.c     **** 					last_nonzero = i - (dot != 0);
2740:src/xeq.c     **** 					if (first_nonzero < 0)
2741:src/xeq.c     **** 						first_nonzero = i - (dot != 0);
2742:src/xeq.c     **** 				}
2743:src/xeq.c     **** 			}
2744:src/xeq.c     **** 			if (first_nonzero < 0) { // Mantissa is zero.
2745:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DC == -1
2746:src/xeq.c     **** 				const int zero_dc = (get_user_flag(1) << 1) | get_user_flag(0);
2747:src/xeq.c     **** #else
2748:src/xeq.c     **** 				const int zero_dc = SP_EXP_ENTRY_ZERO_DC;
2749:src/xeq.c     **** #endif
2750:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DS == -1
2751:src/xeq.c     **** 				const int zero_ds = (get_user_flag(3) << 1) | get_user_flag(2);
2752:src/xeq.c     **** #else
2753:src/xeq.c     **** 				const int zero_ds = SP_EXP_ENTRY_ZERO_DS;
2754:src/xeq.c     **** #endif
2755:src/xeq.c     **** 				const int dp_zero_dc = DP_EXP_ENTRY_ZERO_DC;
2756:src/xeq.c     **** 				const int dp_zero_ds = DP_EXP_ENTRY_ZERO_DS;
2757:src/xeq.c     **** 
2758:src/xeq.c     **** 				if (large_exp_entry && dbl) {
2759:src/xeq.c     **** 					if ((dp_zero_dc == 1 && dp_zero_ds == 1)
2760:src/xeq.c     **** 					    || (dp_zero_dc == 1 && !flag_D)
2761:src/xeq.c     **** 					    || (dp_zero_ds == 1 && flag_D)) {
2762:src/xeq.c     **** 						// Double precision: Allow any exponent
ARM GAS  /tmp/ccQlyisH.s 			page 59


2763:src/xeq.c     **** 						// within configured limits if any.
2764:src/xeq.c     **** 						emax_plus = emax_minus = 9999;
2765:src/xeq.c     **** 						goto check_limits;
2766:src/xeq.c     **** 					}
2767:src/xeq.c     **** 					else if ((dp_zero_dc == 2 && dp_zero_ds == 2)
2768:src/xeq.c     **** 					         || (dp_zero_dc == 2 && !flag_D)
2769:src/xeq.c     **** 					         || (dp_zero_ds == 2 && flag_D)) {
2770:src/xeq.c     **** 						// Double precision: Allow any exponent
2771:src/xeq.c     **** 						// even outside of configured limits.
2772:src/xeq.c     **** 						emax = 9999;
2773:src/xeq.c     **** 						goto do_not_check_limits;
2774:src/xeq.c     **** 					}
2775:src/xeq.c     **** 					goto zero_has_one_significant_digit;
2776:src/xeq.c     **** 				}
2777:src/xeq.c     **** 				if ((zero_dc == 1 && zero_ds == 1)
2778:src/xeq.c     **** 				    || (zero_dc == 1 && !flag_D)
2779:src/xeq.c     **** 				    || (zero_ds == 1 && flag_D)) {
2780:src/xeq.c     **** 					// Allow any exponent within configured limits if any.
2781:src/xeq.c     **** 					emax_plus = emax_minus = 999;
2782:src/xeq.c     **** 					goto check_limits;
2783:src/xeq.c     **** 				}
2784:src/xeq.c     **** 				else if ((zero_dc == 2 && zero_ds == 2)
2785:src/xeq.c     **** 				         || (zero_dc == 2 && !flag_D)
2786:src/xeq.c     **** 				         || (zero_ds == 2 && flag_D)) {
2787:src/xeq.c     **** 					// Allow any exponent even outside of configured limits.
2788:src/xeq.c     **** 					emax = 999;
2789:src/xeq.c     **** 					goto do_not_check_limits;
2790:src/xeq.c     **** 				}
2791:src/xeq.c     **** 				else {
2792:src/xeq.c     **** zero_has_one_significant_digit:
2793:src/xeq.c     **** 					// Treat zero as if it had one significant digit.
2794:src/xeq.c     **** 					first_nonzero = 0;
2795:src/xeq.c     **** 					dot = 1;
2796:src/xeq.c     **** 				}
2797:src/xeq.c     **** 			}
2798:src/xeq.c     **** 			else if (dot == 0)
2799:src/xeq.c     **** 				dot = i;
2800:src/xeq.c     **** 		}
2801:src/xeq.c     **** 
2802:src/xeq.c     **** 		if (large_exp_entry && dbl) {
2803:src/xeq.c     **** 			// Double precision mode
2804:src/xeq.c     **** 			if (flag_D && dp_neg_type_dc != dp_neg_type_ds) {
2805:src/xeq.c     **** 				if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 3) {
2806:src/xeq.c     **** 					// Don't allow denormal numbers
2807:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2808:src/xeq.c     **** 				}
2809:src/xeq.c     **** 				else if (dp_neg_type_ds >= 4 && dp_neg_type_ds <= 6) {
2810:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2811:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2812:src/xeq.c     **** 				}
2813:src/xeq.c     **** 				else if (dp_neg_type_ds >= 7 && dp_neg_type_ds <= 9) {
2814:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2815:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2816:src/xeq.c     **** 				}
2817:src/xeq.c     **** 				else {
2818:src/xeq.c     **** 					// Fixed limit
2819:src/xeq.c     **** 					emax_minus = dp_neg_lim_ds;
ARM GAS  /tmp/ccQlyisH.s 			page 60


2820:src/xeq.c     **** 				}
2821:src/xeq.c     **** 			}
2822:src/xeq.c     **** 			else {
2823:src/xeq.c     **** 				if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 3) {
2824:src/xeq.c     **** 					// Don't allow denormal numbers
2825:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2826:src/xeq.c     **** 				}
2827:src/xeq.c     **** 				else if (dp_neg_type_dc >= 4 && dp_neg_type_dc <= 6) {
2828:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2829:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2830:src/xeq.c     **** 				}
2831:src/xeq.c     **** 				else if (dp_neg_type_dc >= 7 && dp_neg_type_dc <= 9) {
2832:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2833:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2834:src/xeq.c     **** 				}
2835:src/xeq.c     **** 				else {
2836:src/xeq.c     **** 					// Fixed limit
2837:src/xeq.c     **** 					emax_minus = dp_neg_lim_dc;
2838:src/xeq.c     **** 				}
2839:src/xeq.c     **** 			}
2840:src/xeq.c     **** 
2841:src/xeq.c     **** 			if (flag_D && dp_pos_type_dc != dp_pos_type_ds) {
2842:src/xeq.c     **** 				if (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2843:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2844:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2845:src/xeq.c     **** 				else
2846:src/xeq.c     **** 					// Fixed limit
2847:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2848:src/xeq.c     **** 			}
2849:src/xeq.c     **** 			else {
2850:src/xeq.c     **** 				if (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2851:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2852:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2853:src/xeq.c     **** 				else
2854:src/xeq.c     **** 					// Fixed limit
2855:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2856:src/xeq.c     **** 			}
2857:src/xeq.c     **** 
2858:src/xeq.c     **** 			goto check_limits;
2859:src/xeq.c     **** 		}
2860:src/xeq.c     **** 
2861:src/xeq.c     **** 		if (flag_D && neg_type_dc != neg_type_ds) {
2862:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 3) {
2863:src/xeq.c     **** 				// Don't allow denormal numbers
2864:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2865:src/xeq.c     **** 			}
2866:src/xeq.c     **** 			else if (neg_type_ds >= 4 && neg_type_ds <= 6) {
2867:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2868:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2869:src/xeq.c     **** 			}
2870:src/xeq.c     **** 			else if (neg_type_ds >= 7 && neg_type_ds <= 9) {
2871:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2872:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2873:src/xeq.c     **** 			}
2874:src/xeq.c     **** 			else {
2875:src/xeq.c     **** 				// Fixed limit
2876:src/xeq.c     **** 				emax_minus = neg_lim_ds;
ARM GAS  /tmp/ccQlyisH.s 			page 61


2877:src/xeq.c     **** 			}
2878:src/xeq.c     **** 		}
2879:src/xeq.c     **** 		else {
2880:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 3) {
2881:src/xeq.c     **** 				// Don't allow denormal numbers
2882:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2883:src/xeq.c     **** 			}
2884:src/xeq.c     **** 			else if (neg_type_dc >= 4 && neg_type_dc <= 6) {
2885:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2886:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2887:src/xeq.c     **** 			}
2888:src/xeq.c     **** 			else if (neg_type_dc >= 7 && neg_type_dc <= 9) {
2889:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2890:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2891:src/xeq.c     **** 			}
2892:src/xeq.c     **** 			else {
2893:src/xeq.c     **** 				// Fixed limit
2894:src/xeq.c     **** 				emax_minus = neg_lim_dc;
2895:src/xeq.c     **** 			}
2896:src/xeq.c     **** 		}
2897:src/xeq.c     **** 
2898:src/xeq.c     **** 		if (flag_D && pos_type_dc != pos_type_ds) {
2899:src/xeq.c     **** 			if (pos_type_ds >= 1 && pos_type_ds <= 3)
2900:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2901:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2902:src/xeq.c     **** 			else
2903:src/xeq.c     **** 				// Fixed limit
2904:src/xeq.c     **** 				emax_plus = pos_lim_ds;
2905:src/xeq.c     **** 		}
2906:src/xeq.c     **** 		else {
2907:src/xeq.c     **** 			if (pos_type_dc >= 1 && pos_type_dc <= 3)
2908:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2909:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2910:src/xeq.c     **** 			else
2911:src/xeq.c     **** 				// Fixed limit
2912:src/xeq.c     **** 				emax_plus = pos_lim_dc;
2913:src/xeq.c     **** 		}
2914:src/xeq.c     **** 
2915:src/xeq.c     **** check_limits:
2916:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2917:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
2918:src/xeq.c     **** 		    && (dp_neg_type_ds != neg_type_ds || dp_neg_lim_ds != neg_lim_ds)) {
2919:src/xeq.c     **** 			if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9) {
2920:src/xeq.c     **** 				if (dp_neg_type_ds % 3 == 2) { // low limit
2921:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_ds)
2922:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2923:src/xeq.c     **** 				}
2924:src/xeq.c     **** 				else if (dp_neg_type_ds % 3 == 0) { // high limit
2925:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_ds)
2926:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2927:src/xeq.c     **** 				}
2928:src/xeq.c     **** 			}
2929:src/xeq.c     **** 			if (dp_neg_lim_ds < 0 && emax_minus < 0)
2930:src/xeq.c     **** 				emax_minus = 0;
2931:src/xeq.c     **** 		}
2932:src/xeq.c     **** 		else if (large_exp_entry && dbl
2933:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
ARM GAS  /tmp/ccQlyisH.s 			page 62


2934:src/xeq.c     **** 		                         && dp_neg_lim_dc == dp_neg_lim_ds))
2935:src/xeq.c     **** 		         && (dp_neg_type_dc != neg_type_dc || dp_neg_lim_dc != neg_lim_dc)) {
2936:src/xeq.c     **** 			if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9) {
2937:src/xeq.c     **** 				if (dp_neg_type_dc % 3 == 2) { // low limit
2938:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_dc)
2939:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2940:src/xeq.c     **** 				}
2941:src/xeq.c     **** 				else if (dp_neg_type_dc % 3 == 0) { // high limit
2942:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_dc)
2943:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2944:src/xeq.c     **** 				}
2945:src/xeq.c     **** 			}
2946:src/xeq.c     **** 			if (dp_neg_lim_dc < 0 && emax_minus < 0)
2947:src/xeq.c     **** 				emax_minus = 0;
2948:src/xeq.c     **** 		}
2949:src/xeq.c     **** 		else if (flag_D && (neg_type_dc != neg_type_ds || neg_lim_dc != neg_lim_ds)) {
2950:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 9) {
2951:src/xeq.c     **** 				if (neg_type_ds % 3 == 2) { // low limit
2952:src/xeq.c     **** 					if (emax_minus > neg_lim_ds)
2953:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2954:src/xeq.c     **** 				}
2955:src/xeq.c     **** 				else if (neg_type_ds % 3 == 0) { // high limit
2956:src/xeq.c     **** 					if (emax_minus < neg_lim_ds)
2957:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2958:src/xeq.c     **** 				}
2959:src/xeq.c     **** 			}
2960:src/xeq.c     **** 			if (neg_lim_ds < 0 && emax_minus < 0)
2961:src/xeq.c     **** 				emax_minus = 0;
2962:src/xeq.c     **** 		}
2963:src/xeq.c     **** 		else {
2964:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 9) {
2965:src/xeq.c     **** 				if (neg_type_dc % 3 == 2) { // low limit
2966:src/xeq.c     **** 					if (emax_minus > neg_lim_dc)
2967:src/xeq.c     **** 						emax_minus = neg_lim_dc;
2968:src/xeq.c     **** 				}
2969:src/xeq.c     **** 				else if (neg_type_dc % 3 == 0) { // high limit
2970:src/xeq.c     **** 					if (emax_minus < neg_lim_dc)
2971:src/xeq.c     **** 						emax_minus = neg_lim_dc;
2972:src/xeq.c     **** 				}
2973:src/xeq.c     **** 			}
2974:src/xeq.c     **** 			if (neg_lim_dc < 0 && emax_minus < 0)
2975:src/xeq.c     **** 				emax_minus = 0;
2976:src/xeq.c     **** 		}
2977:src/xeq.c     **** 
2978:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2979:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
2980:src/xeq.c     **** 		    && (dp_pos_type_ds != pos_type_ds || dp_pos_lim_ds != pos_lim_ds)) {
2981:src/xeq.c     **** 			if (dp_pos_type_ds == 2) { // low limit
2982:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_ds)
2983:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2984:src/xeq.c     **** 			}
2985:src/xeq.c     **** 			else if (dp_pos_type_ds == 3) { // high limit
2986:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_ds)
2987:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2988:src/xeq.c     **** 			}
2989:src/xeq.c     **** 			if (dp_pos_lim_ds < 0 && emax_plus < 0)
2990:src/xeq.c     **** 				emax_plus = 0;
ARM GAS  /tmp/ccQlyisH.s 			page 63


2991:src/xeq.c     **** 		}
2992:src/xeq.c     **** 		else if (large_exp_entry && dbl
2993:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
2994:src/xeq.c     **** 		                         && dp_pos_lim_dc == dp_pos_lim_ds))
2995:src/xeq.c     **** 		         && (dp_pos_type_dc != pos_type_dc || dp_pos_lim_dc != pos_lim_dc)) {
2996:src/xeq.c     **** 			if (dp_pos_type_dc == 2) { // low limit
2997:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_dc)
2998:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2999:src/xeq.c     **** 			}
3000:src/xeq.c     **** 			else if (dp_pos_type_dc == 3) { // high limit
3001:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_dc)
3002:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
3003:src/xeq.c     **** 			}
3004:src/xeq.c     **** 			if (dp_pos_lim_dc < 0 && emax_plus < 0)
3005:src/xeq.c     **** 				emax_plus = 0;
3006:src/xeq.c     **** 		}
3007:src/xeq.c     **** 		else if (flag_D && (pos_type_dc != pos_type_ds || pos_lim_dc != pos_lim_ds)) {
3008:src/xeq.c     **** 			if (pos_type_ds == 2) { // low limit
3009:src/xeq.c     **** 				if (emax_plus < pos_lim_ds)
3010:src/xeq.c     **** 					emax_plus = pos_lim_ds;
3011:src/xeq.c     **** 			}
3012:src/xeq.c     **** 			else if (pos_type_ds == 3) { // high limit
3013:src/xeq.c     **** 				if (emax_plus > pos_lim_ds)
3014:src/xeq.c     **** 					emax_plus = pos_lim_ds;
3015:src/xeq.c     **** 			}
3016:src/xeq.c     **** 			if (pos_lim_ds < 0 && emax_plus < 0)
3017:src/xeq.c     **** 				emax_plus = 0;
3018:src/xeq.c     **** 		}
3019:src/xeq.c     **** 		else {
3020:src/xeq.c     **** 			if (pos_type_dc == 2) { // low limit
3021:src/xeq.c     **** 				if (emax_plus < pos_lim_dc)
3022:src/xeq.c     **** 					emax_plus = pos_lim_dc;
3023:src/xeq.c     **** 			}
3024:src/xeq.c     **** 			else if (pos_type_dc == 3) { // high limit
3025:src/xeq.c     **** 				if (emax_plus > pos_lim_dc)
3026:src/xeq.c     **** 					emax_plus = pos_lim_dc;
3027:src/xeq.c     **** 			}
3028:src/xeq.c     **** 			if (pos_lim_dc < 0 && emax_plus < 0)
3029:src/xeq.c     **** 				emax_plus = 0;
3030:src/xeq.c     **** 		}
3031:src/xeq.c     **** 
3032:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
3033:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
3034:src/xeq.c     **** 		    && (dp_exp_chs_ds != exp_chs_ds)) {
3035:src/xeq.c     **** 			if (dp_exp_chs_ds == 0) {
3036:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3037:src/xeq.c     **** 				if (emax_minus < emax_plus)
3038:src/xeq.c     **** 					emax = emax_minus;
3039:src/xeq.c     **** 				else
3040:src/xeq.c     **** 					emax = emax_plus;
3041:src/xeq.c     **** 			}
3042:src/xeq.c     **** 			else if (dp_exp_chs_ds == 3) {
3043:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3044:src/xeq.c     **** 				if (emax_minus > emax_plus)
3045:src/xeq.c     **** 					emax = emax_minus;
3046:src/xeq.c     **** 				else
3047:src/xeq.c     **** 					emax = emax_plus;
ARM GAS  /tmp/ccQlyisH.s 			page 64


3048:src/xeq.c     **** 			}
3049:src/xeq.c     **** 			else {
3050:src/xeq.c     **** 				if (dp_exp_chs_ds == 2 && !was_digit_entered)
3051:src/xeq.c     **** 					return;
3052:src/xeq.c     **** 				if (*p == 'D')
3053:src/xeq.c     **** 					emax = emax_minus;
3054:src/xeq.c     **** 				else
3055:src/xeq.c     **** 					emax = emax_plus;
3056:src/xeq.c     **** 			}
3057:src/xeq.c     **** 		}
3058:src/xeq.c     **** 		else if (large_exp_entry && dbl
3059:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
3060:src/xeq.c     **** 		         && (dp_exp_chs_dc != exp_chs_dc)) {
3061:src/xeq.c     **** 			if (dp_exp_chs_dc == 0) {
3062:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3063:src/xeq.c     **** 				if (emax_minus < emax_plus)
3064:src/xeq.c     **** 					emax = emax_minus;
3065:src/xeq.c     **** 				else
3066:src/xeq.c     **** 					emax = emax_plus;
3067:src/xeq.c     **** 			}
3068:src/xeq.c     **** 			else if (dp_exp_chs_dc == 3) {
3069:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3070:src/xeq.c     **** 				if (emax_minus > emax_plus)
3071:src/xeq.c     **** 					emax = emax_minus;
3072:src/xeq.c     **** 				else
3073:src/xeq.c     **** 					emax = emax_plus;
3074:src/xeq.c     **** 			}
3075:src/xeq.c     **** 			else {
3076:src/xeq.c     **** 				if (dp_exp_chs_dc == 2 && !was_digit_entered)
3077:src/xeq.c     **** 					return;
3078:src/xeq.c     **** 				if (*p == 'D')
3079:src/xeq.c     **** 					emax = emax_minus;
3080:src/xeq.c     **** 				else
3081:src/xeq.c     **** 					emax = emax_plus;
3082:src/xeq.c     **** 			}
3083:src/xeq.c     **** 		}
3084:src/xeq.c     **** 		else if (flag_D && exp_chs_dc != exp_chs_ds) {
3085:src/xeq.c     **** 			if (exp_chs_ds == 0) {
3086:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3087:src/xeq.c     **** 				if (emax_minus < emax_plus)
3088:src/xeq.c     **** 					emax = emax_minus;
3089:src/xeq.c     **** 				else
3090:src/xeq.c     **** 					emax = emax_plus;
3091:src/xeq.c     **** 			}
3092:src/xeq.c     **** 			else if (exp_chs_ds == 3) {
3093:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3094:src/xeq.c     **** 				if (emax_minus > emax_plus)
3095:src/xeq.c     **** 					emax = emax_minus;
3096:src/xeq.c     **** 				else
3097:src/xeq.c     **** 					emax = emax_plus;
3098:src/xeq.c     **** 			}
3099:src/xeq.c     **** 			else {
3100:src/xeq.c     **** 				if (exp_chs_ds == 2 && !was_digit_entered)
3101:src/xeq.c     **** 					return;
3102:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3103:src/xeq.c     **** 				if (*p == 'D')
3104:src/xeq.c     **** #else
ARM GAS  /tmp/ccQlyisH.s 			page 65


3105:src/xeq.c     **** 				if (*p == '-')
3106:src/xeq.c     **** #endif
3107:src/xeq.c     **** 					emax = emax_minus;
3108:src/xeq.c     **** 				else
3109:src/xeq.c     **** 					emax = emax_plus;
3110:src/xeq.c     **** 			}
3111:src/xeq.c     **** 		}
3112:src/xeq.c     **** 		else {
3113:src/xeq.c     **** 			if (exp_chs_dc == 0) {
3114:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3115:src/xeq.c     **** 				if (emax_minus < emax_plus)
3116:src/xeq.c     **** 					emax = emax_minus;
3117:src/xeq.c     **** 				else
3118:src/xeq.c     **** 					emax = emax_plus;
3119:src/xeq.c     **** 			}
3120:src/xeq.c     **** 			else if (exp_chs_dc == 3) {
3121:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3122:src/xeq.c     **** 				if (emax_minus > emax_plus)
3123:src/xeq.c     **** 					emax = emax_minus;
3124:src/xeq.c     **** 				else
3125:src/xeq.c     **** 					emax = emax_plus;
3126:src/xeq.c     **** 			}
3127:src/xeq.c     **** 			else {
3128:src/xeq.c     **** 				if (exp_chs_dc == 2 && !was_digit_entered)
3129:src/xeq.c     **** 					return;
3130:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3131:src/xeq.c     **** 				if (*p == 'D')
3132:src/xeq.c     **** #else
3133:src/xeq.c     **** 				if (*p == '-')
3134:src/xeq.c     **** #endif
3135:src/xeq.c     **** 					emax = emax_minus;
3136:src/xeq.c     **** 				else
3137:src/xeq.c     **** 					emax = emax_plus;
3138:src/xeq.c     **** 			}
3139:src/xeq.c     **** 		}
3140:src/xeq.c     **** 	}
3141:src/xeq.c     **** 
3142:src/xeq.c     **** do_not_check_limits:
3143:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3144:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3145:src/xeq.c     **** 	p++;
3146:src/xeq.c     **** #  else
3147:src/xeq.c     **** 	if (*p == '-')
3148:src/xeq.c     **** 		p++;
3149:src/xeq.c     **** #  endif
3150:src/xeq.c     **** 	/* Check if the current exponent exceeds the range.
3151:src/xeq.c     **** 	 * If so, shift it back until it doesn't.
3152:src/xeq.c     **** 	 * Also remove leading zeros.
3153:src/xeq.c     **** 	 */
3154:src/xeq.c     **** 	while (s_to_i(p) > emax || *p == '0') {
3155:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
3156:src/xeq.c     **** 			p[i] = p[i + 1];
3157:src/xeq.c     **** 		CmdLineLength--;
3158:src/xeq.c     **** 	}
3159:src/xeq.c     **** #else
3160:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3161:src/xeq.c     **** 	negative = (*p == 'D');
ARM GAS  /tmp/ccQlyisH.s 			page 66


3162:src/xeq.c     **** 	p++;
3163:src/xeq.c     **** #  else
3164:src/xeq.c     **** 	if (*p == '-') {
3165:src/xeq.c     **** 		p++;
3166:src/xeq.c     **** 		negative = 1;
3167:src/xeq.c     **** 	}
3168:src/xeq.c     **** 	else negative = 0;
3169:src/xeq.c     **** #  endif
3170:src/xeq.c     **** 	// Display a warning if the exponent is out of range.
3171:src/xeq.c     **** 	if ((i = s_to_i(p)) > emax) {
3172:src/xeq.c     **** 		if (was_digit_entered) {
3173:src/xeq.c     **** 			CmdLineLength--;
3174:src/xeq.c     **** 			if (large_exp_entry && dbl ? i > 9999 : i > 999) {
3175:src/xeq.c     **** 				report_warn(ERR_TOO_LONG);
3176:src/xeq.c     **** 				return;
3177:src/xeq.c     **** 			}
3178:src/xeq.c     **** 		}
3179:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3180:src/xeq.c     **** 		else if (('D' | 1) == 'E')
3181:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3182:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3183:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3184:src/xeq.c     **** 		else
3185:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3186:src/xeq.c     **** #  else
3187:src/xeq.c     **** 		else if (negative) {
3188:src/xeq.c     **** 			scopy(p - 1, p);
3189:src/xeq.c     **** 			CmdLineLength--;
3190:src/xeq.c     **** 		}
3191:src/xeq.c     **** 		else {
3192:src/xeq.c     **** 			xcopy(p + 1, p, CMDLINELEN - 1 - CmdLineEex);
3193:src/xeq.c     **** 			*p = '-';
3194:src/xeq.c     **** 			CmdLineLength++;
3195:src/xeq.c     **** 		}
3196:src/xeq.c     **** #  endif
3197:src/xeq.c     **** 		if (negative)
3198:src/xeq.c     **** 			report_warn(ERR_TOO_SMALL);
3199:src/xeq.c     **** 		else
3200:src/xeq.c     **** 			report_warn(ERR_TOO_BIG);
3201:src/xeq.c     **** 	}
3202:src/xeq.c     **** #endif
3203:src/xeq.c     **** }
3204:src/xeq.c     **** 
3205:src/xeq.c     **** /* We've encountered a CHS while entering the command line.
3206:src/xeq.c     ****  */
3207:src/xeq.c     **** static void cmdlinechs(void) {
3208:src/xeq.c     **** 	if (CmdLineEex) {
3209:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3210:src/xeq.c     **** 		// 'D' instead of 'E' indicates a negative exponent.
3211:src/xeq.c     **** 		// Four-digit exponents wouldn't fit into Cmdline if we used 'E-'.
3212:src/xeq.c     **** 		if (('D' | 1) == 'E')
3213:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3214:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3215:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3216:src/xeq.c     **** 		else
3217:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3218:src/xeq.c     **** #else
ARM GAS  /tmp/ccQlyisH.s 			page 67


3219:src/xeq.c     **** 		const unsigned int pos = CmdLineEex + 1;
3220:src/xeq.c     **** 		if (CmdLineLength <= pos) {
3221:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
3222:src/xeq.c     **** 				append_cmdline('-');
3223:src/xeq.c     **** 		} else if (Cmdline[pos] == '-') {
3224:src/xeq.c     **** 			if (CmdLineLength != pos)
3225:src/xeq.c     **** 				xcopy(Cmdline + pos, Cmdline + pos + 1, CmdLineLength-pos);
3226:src/xeq.c     **** 			CmdLineLength--;
3227:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3228:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
3229:src/xeq.c     **** 			Cmdline[pos] = '-';
3230:src/xeq.c     **** 			CmdLineLength++;
3231:src/xeq.c     **** 		}
3232:src/xeq.c     **** #endif
3233:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC == 1 \
3234:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DS == -1 || SP_EXP_ENTRY_CHS_DS == 1 \
3235:src/xeq.c     ****     || ((DP_EXP_ENTRY_CHS_DC == 1 || DP_EXP_ENTRY_CHS_DS == 1) && defined(LARGE_EXPONENT_ENTRY))
3236:src/xeq.c     **** 		exponent_adjusted(0);
3237:src/xeq.c     **** #endif
3238:src/xeq.c     **** 	} else {
3239:src/xeq.c     **** 		if (Cmdline[0] == '-') {
3240:src/xeq.c     **** 			if (CmdLineLength > 1)
3241:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
3242:src/xeq.c     **** 			CmdLineLength--;
3243:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3244:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
3245:src/xeq.c     **** 			Cmdline[0] = '-';
3246:src/xeq.c     **** 			CmdLineLength++;
3247:src/xeq.c     **** 		}
3248:src/xeq.c     **** 	}
3249:src/xeq.c     **** }
3250:src/xeq.c     **** 
3251:src/xeq.c     **** /* Execute a tests command
3252:src/xeq.c     ****  */
3253:src/xeq.c     **** static void do_tst(int cmp, const enum tst_op op) {
3254:src/xeq.c     **** 	int a = 0;
3255:src/xeq.c     **** 	int iszero, isneg;
3256:src/xeq.c     **** 
3257:src/xeq.c     **** 	process_cmdline_set_lift();
3258:src/xeq.c     **** 
3259:src/xeq.c     **** 	if (is_intmode()) {
3260:src/xeq.c     **** 		unsigned long long int xv, yv;
3261:src/xeq.c     **** 		int xs, ys;
3262:src/xeq.c     **** 
3263:src/xeq.c     **** 		xv = extract_value(getX_int(), &xs);
3264:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
3265:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
3266:src/xeq.c     **** 			ys = 0;
3267:src/xeq.c     **** 		} else
3268:src/xeq.c     **** 			yv = extract_value(get_reg_n_int(cmp), &ys);
3269:src/xeq.c     **** 
3270:src/xeq.c     **** 		if (xv == 0 && yv == 0)
3271:src/xeq.c     **** 			iszero = 1;
3272:src/xeq.c     **** 		else
3273:src/xeq.c     **** 			iszero = (xv == yv) && (xs == ys);
3274:src/xeq.c     **** 
3275:src/xeq.c     **** 		if (xs == ys) {		// same sign
ARM GAS  /tmp/ccQlyisH.s 			page 68


3276:src/xeq.c     **** 			if (xs)		// both negative
3277:src/xeq.c     **** 				isneg = xv > yv;
3278:src/xeq.c     **** 			else		// both positive
3279:src/xeq.c     **** 				isneg = xv < yv;
3280:src/xeq.c     **** 		} else
3281:src/xeq.c     **** 			isneg = xs;	// opposite signs
3282:src/xeq.c     **** 	} else {
3283:src/xeq.c     **** 		decNumber t, x, r;
3284:src/xeq.c     **** 
3285:src/xeq.c     **** 		getX(&x);
3286:src/xeq.c     **** 		if (decNumberIsNaN(&x))
3287:src/xeq.c     **** 			goto flse;
3288:src/xeq.c     **** 
3289:src/xeq.c     **** 		getRegister(&t, cmp);
3290:src/xeq.c     **** 		if (decNumberIsNaN(&t))
3291:src/xeq.c     **** 			goto flse;
3292:src/xeq.c     **** 
3293:src/xeq.c     **** 		if (op == TST_APX) {
3294:src/xeq.c     **** 			decNumberRnd(&x, &x);
3295:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
3296:src/xeq.c     **** 				decNumberRnd(&t, &t);
3297:src/xeq.c     **** 		}
3298:src/xeq.c     **** 		dn_compare(&r, &x, &t);
3299:src/xeq.c     **** 		iszero = dn_eq0(&r);
3300:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
3301:src/xeq.c     **** 	}
3302:src/xeq.c     **** 
3303:src/xeq.c     **** 	switch (op) {
3304:src/xeq.c     **** 	case TST_APX:
3305:src/xeq.c     **** 	case TST_EQ:	a = iszero;		break;
3306:src/xeq.c     **** 	case TST_NE:	a = !iszero;		break;
3307:src/xeq.c     **** 	case TST_LT:	a = isneg && !iszero;	break;
3308:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
3309:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
3310:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
3311:src/xeq.c     **** 	default:	a = 0;			break;
3312:src/xeq.c     **** 	}
3313:src/xeq.c     **** 
3314:src/xeq.c     **** flse:	fin_tst(a);
3315:src/xeq.c     **** }
3316:src/xeq.c     **** 
3317:src/xeq.c     **** void check_zero(enum nilop op) {
3318:src/xeq.c     **** 	int neg;
3319:src/xeq.c     **** 	int zero;
3320:src/xeq.c     **** 
3321:src/xeq.c     **** 	if (is_intmode()) {
3322:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
3323:src/xeq.c     **** 		zero = (xv == 0);
3324:src/xeq.c     **** 	} else {
3325:src/xeq.c     **** 		decNumber x;
3326:src/xeq.c     **** 		getX(&x);
3327:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
3328:src/xeq.c     **** 		zero = dn_eq0(&x);
3329:src/xeq.c     **** 	}
3330:src/xeq.c     **** 	if (op == OP_Xeq_pos0)
3331:src/xeq.c     **** 		fin_tst(zero && !neg);
3332:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
ARM GAS  /tmp/ccQlyisH.s 			page 69


3333:src/xeq.c     **** 		fin_tst(zero && neg);
3334:src/xeq.c     **** }
3335:src/xeq.c     **** 
3336:src/xeq.c     **** void cmdtest(unsigned int arg, enum rarg op) {
3337:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
3338:src/xeq.c     **** }
3339:src/xeq.c     **** 
3340:src/xeq.c     **** static void do_ztst(const decNumber *re, const decNumber *im, enum tst_op op) {
3341:src/xeq.c     **** 	decNumber x, y;
3342:src/xeq.c     **** 
3343:src/xeq.c     **** 	process_cmdline_set_lift();
3344:src/xeq.c     **** 	if (is_intmode()) {
3345:src/xeq.c     **** 		bad_mode_error();
3346:src/xeq.c     **** 		return;
3347:src/xeq.c     **** 	}
3348:src/xeq.c     **** 	getXY(&x, &y);
3349:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
3350:src/xeq.c     **** 		fin_tst(0);
3351:src/xeq.c     **** 		return;
3352:src/xeq.c     **** 	}
3353:src/xeq.c     **** 	fin_tst((op == TST_EQ) == (dn_eq(&x, re) && dn_eq(&y, im)));
3354:src/xeq.c     **** }
3355:src/xeq.c     **** 
3356:src/xeq.c     **** void cmdztest(unsigned int arg, enum rarg op) {
3357:src/xeq.c     **** 	decNumber re, im;
3358:src/xeq.c     **** 	getRegister(&re, arg);
3359:src/xeq.c     **** 	getRegister(&im, arg + 1);
3360:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
3361:src/xeq.c     **** }
3362:src/xeq.c     **** 
3363:src/xeq.c     **** static int incdec(unsigned int arg, int inc) {
3364:src/xeq.c     **** 	if (is_intmode()) {
3365:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3366:src/xeq.c     **** 		int xs;
3367:src/xeq.c     **** 		unsigned long long int xv;
3368:src/xeq.c     **** 
3369:src/xeq.c     **** 		if (inc)
3370:src/xeq.c     **** 			x = intAdd(x, 1LL);
3371:src/xeq.c     **** 		else
3372:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3373:src/xeq.c     **** 		set_reg_n_int(arg, x);
3374:src/xeq.c     **** 
3375:src/xeq.c     **** 		xv = extract_value(x, &xs);
3376:src/xeq.c     **** 		return xv != 0;
3377:src/xeq.c     **** 	} else {
3378:src/xeq.c     **** 		decNumber x, y;
3379:src/xeq.c     **** 
3380:src/xeq.c     **** 		getRegister(&x, arg);
3381:src/xeq.c     **** 		if (inc)
3382:src/xeq.c     **** 			dn_inc(&x);
3383:src/xeq.c     **** 		else
3384:src/xeq.c     **** 			dn_dec(&x);
3385:src/xeq.c     **** 		setRegister(arg, &x);
3386:src/xeq.c     **** 		decNumberTrunc(&y, &x);
3387:src/xeq.c     **** 		return ! dn_eq0(&y);
3388:src/xeq.c     **** 	}
3389:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 70


3390:src/xeq.c     **** 
3391:src/xeq.c     **** void cmdlincdec(unsigned int arg, enum rarg op) {
3392:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
3393:src/xeq.c     **** }
3394:src/xeq.c     **** 
3395:src/xeq.c     **** void cmdloopz(unsigned int arg, enum rarg op) {
3396:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
3397:src/xeq.c     **** }
3398:src/xeq.c     **** 
3399:src/xeq.c     **** void cmdloop(unsigned int arg, enum rarg op) {
3400:src/xeq.c     **** 	if (is_intmode()) {
3401:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3402:src/xeq.c     **** 		int xs;
3403:src/xeq.c     **** 		unsigned long long int xv;
3404:src/xeq.c     **** 
3405:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE)
3406:src/xeq.c     **** 			x = intAdd(x, 1LL);
3407:src/xeq.c     **** 		else
3408:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3409:src/xeq.c     **** 		set_reg_n_int(arg, x);
3410:src/xeq.c     **** 
3411:src/xeq.c     **** 		xv = extract_value(x, &xs);
3412:src/xeq.c     **** 		if (op == RARG_ISG)
3413:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
3414:src/xeq.c     **** 		else if (op == RARG_DSE)
3415:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
3416:src/xeq.c     **** 		else if (op == RARG_ISE)
3417:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
3418:src/xeq.c     **** 		else // if (op == RARG_DSL)
3419:src/xeq.c     **** 			fin_tst(! (xs != 0 && xv > 0));		// < 0
3420:src/xeq.c     **** 		return;
3421:src/xeq.c     **** 	} else {
3422:src/xeq.c     **** 		decNumber x, i, f, n, u;
3423:src/xeq.c     **** 
3424:src/xeq.c     **** 		getRegister(&x, arg);
3425:src/xeq.c     **** 
3426:src/xeq.c     **** 		// Break the number into the important bits
3427:src/xeq.c     **** 		// nnnnn.fffii
3428:src/xeq.c     **** 		dn_abs(&f, &x);
3429:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
3430:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
3431:src/xeq.c     **** 		if (decNumberIsNegative(&x))
3432:src/xeq.c     **** 			dn_minus(&n, &n);
3433:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
3434:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
3435:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
3436:src/xeq.c     **** 		dn_mul100(&x, &i);
3437:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
3438:src/xeq.c     **** 		if (dn_eq0(&i))
3439:src/xeq.c     **** 			dn_1(&i);
3440:src/xeq.c     **** 
3441:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE) {
3442:src/xeq.c     **** 			dn_add(&n, &n, &i);
3443:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3444:src/xeq.c     **** 			if (op == RARG_ISE)
3445:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
3446:src/xeq.c     **** 			else
ARM GAS  /tmp/ccQlyisH.s 			page 71


3447:src/xeq.c     **** 				fin_tst(dn_ge0(&x));
3448:src/xeq.c     **** 		} else {
3449:src/xeq.c     **** 			dn_subtract(&n, &n, &i);
3450:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3451:src/xeq.c     **** 			if (op == RARG_DSL)
3452:src/xeq.c     **** 				fin_tst(dn_le0(&x));
3453:src/xeq.c     **** 			else
3454:src/xeq.c     **** 				fin_tst(dn_lt0(&x));
3455:src/xeq.c     **** 		}
3456:src/xeq.c     **** 
3457:src/xeq.c     **** 		// Finally rebuild the result
3458:src/xeq.c     **** 		if (decNumberIsNegative(&n)) {
3459:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
3460:src/xeq.c     **** 		} else
3461:src/xeq.c     **** 			dn_add(&x, &n, &u);
3462:src/xeq.c     **** 		setRegister(arg, &x);
3463:src/xeq.c     **** 	}
3464:src/xeq.c     **** }
3465:src/xeq.c     **** 
3466:src/xeq.c     **** 
3467:src/xeq.c     **** /* Shift a real number by 10 to the specified power
3468:src/xeq.c     ****  */
3469:src/xeq.c     **** void op_shift_digit(unsigned int n, enum rarg op) {
3470:src/xeq.c     **** 	decNumber x;
3471:src/xeq.c     **** 	int adjust = n;
3472:src/xeq.c     **** 
3473:src/xeq.c     **** 	if (is_intmode()) {
3474:src/xeq.c     **** 		bad_mode_error();
3475:src/xeq.c     **** 		return;
3476:src/xeq.c     **** 	}
3477:src/xeq.c     **** 	getX(&x);
3478:src/xeq.c     **** 	setlastX();
3479:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
3480:src/xeq.c     **** 		return;
3481:src/xeq.c     **** 	if (op == RARG_SRD)
3482:src/xeq.c     **** 		adjust = -adjust;
3483:src/xeq.c     **** 	x.exponent += adjust;
3484:src/xeq.c     **** 	setX(&x);
3485:src/xeq.c     **** }
3486:src/xeq.c     **** 
3487:src/xeq.c     **** 
3488:src/xeq.c     **** /* Return a pointer to the byte with the indicated flag in it.
3489:src/xeq.c     ****  * also return a byte with the relevant bit mask set up.
3490:src/xeq.c     ****  * Also, handle local flags.
3491:src/xeq.c     ****  */
3492:src/xeq.c     **** static unsigned short int *flag_word(int n, unsigned short int *mask) {
 457              		.loc 1 3492 71 is_stmt 1 view -0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              		@ link register save eliminated.
3493:src/xeq.c     **** 	unsigned short int *p;
 462              		.loc 1 3493 2 view .LVU141
3494:src/xeq.c     **** 
3495:src/xeq.c     **** 	if (n >= LOCAL_FLAG_BASE) {
 463              		.loc 1 3495 2 view .LVU142
 464              		.loc 1 3495 5 is_stmt 0 view .LVU143
ARM GAS  /tmp/ccQlyisH.s 			page 72


 465 0000 6F28     		cmp	r0, #111
3492:src/xeq.c     **** 	unsigned short int *p;
 466              		.loc 1 3492 71 view .LVU144
 467 0002 10B4     		push	{r4}
 468              		.cfi_def_cfa_offset 4
 469              		.cfi_offset 4, -4
 470              		.loc 1 3495 5 view .LVU145
 471 0004 29DD     		ble	.L42
3496:src/xeq.c     **** 		n -= LOCAL_FLAG_BASE;
 472              		.loc 1 3496 3 is_stmt 1 view .LVU146
 473              		.loc 1 3496 5 is_stmt 0 view .LVU147
 474 0006 7038     		subs	r0, r0, #112
 475              	.LVL39:
3497:src/xeq.c     **** 		if (n > XROM_SYSTEM_FLAG_BASE && XromFlags.xIN) {
 476              		.loc 1 3497 3 is_stmt 1 view .LVU148
 477              		.loc 1 3497 6 is_stmt 0 view .LVU149
 478 0008 0828     		cmp	r0, #8
 479 000a 04DD     		ble	.L43
 480              		.loc 1 3497 33 discriminator 1 view .LVU150
 481 000c 174B     		ldr	r3, .L54
 482 000e 93F90120 		ldrsb	r2, [r3, #1]
 483 0012 002A     		cmp	r2, #0
 484 0014 15DB     		blt	.L44
 485              	.L43:
3498:src/xeq.c     **** 			// XROM special
3499:src/xeq.c     **** 			p = &XromFlagWord;
3500:src/xeq.c     **** 		}
3501:src/xeq.c     **** 		else if (LocalRegs & 1) {
 486              		.loc 1 3501 8 is_stmt 1 view .LVU151
 487              		.loc 1 3501 12 is_stmt 0 view .LVU152
 488 0016 164B     		ldr	r3, .L54+4
 489 0018 1B68     		ldr	r3, [r3]
 490 001a B3F9DE27 		ldrsh	r2, [r3, #2014]
3502:src/xeq.c     **** 			// Odd frame: flags are at end of frame
3503:src/xeq.c     **** 			p = RetStk + LocalRegs + local_levels() - 1;
 491              		.loc 1 3503 44 view .LVU153
 492 001e 154B     		ldr	r3, .L54+8
3501:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 493              		.loc 1 3501 11 view .LVU154
 494 0020 D407     		lsls	r4, r2, #31
 495              		.loc 1 3503 44 view .LVU155
 496 0022 1B68     		ldr	r3, [r3]
3501:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 497              		.loc 1 3501 11 view .LVU156
 498 0024 1ED5     		bpl	.L45
 499              		.loc 1 3503 4 is_stmt 1 view .LVU157
 500              	.LBB1319:
 501              	.LBI1319:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 502              		.loc 1 214 5 view .LVU158
 503              	.LBB1320:
 215:src/xeq.c     **** }
 504              		.loc 1 215 2 view .LVU159
 215:src/xeq.c     **** }
 505              		.loc 1 215 57 is_stmt 0 view .LVU160
 506 0026 002A     		cmp	r2, #0
 507 0028 B8BF     		it	lt
ARM GAS  /tmp/ccQlyisH.s 			page 73


 508 002a 33F81240 		ldrhlt	r4, [r3, r2, lsl #1]
 509              	.LBE1320:
 510              	.LBE1319:
 511              		.loc 1 3503 44 view .LVU161
 512 002e 02F10042 		add	r2, r2, #-2147483648
 513 0032 B4BF     		ite	lt
 514 0034 C4F30B04 		ubfxlt	r4, r4, #0, #12
 515              	.LBB1322:
 516              	.LBB1321:
 517 0038 0024     		movge	r4, #0
 518              	.LBE1321:
 519              	.LBE1322:
 520 003a 013A     		subs	r2, r2, #1
 521 003c 2244     		add	r2, r2, r4
 522              		.loc 1 3503 6 view .LVU162
 523 003e 03EB4203 		add	r3, r3, r2, lsl #1
 524              	.LVL40:
 525              	.L44:
3504:src/xeq.c     **** 		}
3505:src/xeq.c     **** 		else {
3506:src/xeq.c     **** 			// Even frame: Flags are at beginning of frame
3507:src/xeq.c     **** 			p = RetStk + LocalRegs + 1;
3508:src/xeq.c     **** 		}
3509:src/xeq.c     **** 	}
3510:src/xeq.c     **** 	else
3511:src/xeq.c     **** 		p = UserFlags;
3512:src/xeq.c     **** 
3513:src/xeq.c     **** 	if (mask != NULL)
 526              		.loc 1 3513 2 is_stmt 1 view .LVU163
 527              		.loc 1 3513 5 is_stmt 0 view .LVU164
 528 0042 21B1     		cbz	r1, .L47
3514:src/xeq.c     **** 		*mask = 1 << (n & 15);
 529              		.loc 1 3514 3 is_stmt 1 view .LVU165
 530              		.loc 1 3514 19 is_stmt 0 view .LVU166
 531 0044 00F00F04 		and	r4, r0, #15
 532              		.loc 1 3514 13 view .LVU167
 533 0048 0122     		movs	r2, #1
 534 004a A240     		lsls	r2, r2, r4
 535              		.loc 1 3514 9 view .LVU168
 536 004c 0A80     		strh	r2, [r1]	@ movhi
 537              	.L47:
3515:src/xeq.c     **** 	return p + (n >> 4);
 538              		.loc 1 3515 2 is_stmt 1 view .LVU169
 539              		.loc 1 3515 16 is_stmt 0 view .LVU170
 540 004e 0011     		asrs	r0, r0, #4
 541              	.LVL41:
3516:src/xeq.c     **** }
 542              		.loc 1 3516 1 view .LVU171
 543 0050 03EB4000 		add	r0, r3, r0, lsl #1
 544 0054 5DF8044B 		ldr	r4, [sp], #4
 545              		.cfi_remember_state
 546              		.cfi_restore 4
 547              		.cfi_def_cfa_offset 0
 548 0058 7047     		bx	lr
 549              	.LVL42:
 550              	.L42:
 551              		.cfi_restore_state
ARM GAS  /tmp/ccQlyisH.s 			page 74


3511:src/xeq.c     **** 
 552              		.loc 1 3511 3 is_stmt 1 view .LVU172
3511:src/xeq.c     **** 
 553              		.loc 1 3511 7 is_stmt 0 view .LVU173
 554 005a 054B     		ldr	r3, .L54+4
3511:src/xeq.c     **** 
 555              		.loc 1 3511 5 view .LVU174
 556 005c 1B68     		ldr	r3, [r3]
 557 005e 03F5FE63 		add	r3, r3, #2032
 558              	.LVL43:
3511:src/xeq.c     **** 
 559              		.loc 1 3511 5 view .LVU175
 560 0062 EEE7     		b	.L44
 561              	.LVL44:
 562              	.L45:
3507:src/xeq.c     **** 		}
 563              		.loc 1 3507 4 is_stmt 1 view .LVU176
3507:src/xeq.c     **** 		}
 564              		.loc 1 3507 27 is_stmt 0 view .LVU177
 565 0064 0132     		adds	r2, r2, #1
3507:src/xeq.c     **** 		}
 566              		.loc 1 3507 6 view .LVU178
 567 0066 03EB4203 		add	r3, r3, r2, lsl #1
 568              	.LVL45:
3507:src/xeq.c     **** 		}
 569              		.loc 1 3507 6 view .LVU179
 570 006a EAE7     		b	.L44
 571              	.L55:
 572              		.align	2
 573              	.L54:
 574 006c 00000000 		.word	XromParams
 575 0070 00000000 		.word	main_ram
 576 0074 00000000 		.word	RetStk
 577              		.cfi_endproc
 578              	.LFE196:
 580              		.section	.text.set_zero,"ax",%progbits
 581              		.align	1
 582              		.p2align 2,,3
 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 586              		.fpu fpv4-sp-d16
 588              	set_zero:
 589              	.LVL46:
 590              	.LFB105:
1515:src/xeq.c     **** 	zero_regs(x, 1);
 591              		.loc 1 1515 35 is_stmt 1 view -0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 0
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595              		@ link register save eliminated.
1516:src/xeq.c     **** }
 596              		.loc 1 1516 2 view .LVU181
 597              	.LBB1323:
 598              	.LBI1323:
1487:src/xeq.c     **** #if 0
 599              		.loc 1 1487 6 view .LVU182
ARM GAS  /tmp/ccQlyisH.s 			page 75


 600              	.LBB1324:
1502:src/xeq.c     **** #endif
 601              		.loc 1 1502 2 view .LVU183
 602              	.LBB1325:
 603              	.LBI1325:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 604              		.loc 1 1087 5 view .LVU184
 605              	.LBB1326:
1088:src/xeq.c     **** }
 606              		.loc 1 1088 2 view .LVU185
1088:src/xeq.c     **** }
 607              		.loc 1 1088 24 is_stmt 0 view .LVU186
 608 0000 074B     		ldr	r3, .L57
 609 0002 1B68     		ldr	r3, [r3]
 610 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 611 0008 44F20102 		movw	r2, #16385
 612 000c 1A40     		ands	r2, r2, r3
 613              	.LBE1326:
 614              	.LBE1325:
1502:src/xeq.c     **** #endif
 615              		.loc 1 1502 2 view .LVU187
 616 000e B2F5804F 		cmp	r2, #16384
 617 0012 0CBF     		ite	eq
 618 0014 1022     		moveq	r2, #16
 619 0016 0822     		movne	r2, #8
 620 0018 0021     		movs	r1, #0
 621 001a FFF7FEBF 		b	xset
 622              	.LVL47:
 623              	.L58:
1502:src/xeq.c     **** #endif
 624              		.loc 1 1502 2 view .LVU188
 625 001e 00BF     		.align	2
 626              	.L57:
 627 0020 00000000 		.word	main_ram
 628              	.LBE1324:
 629              	.LBE1323:
 630              		.cfi_endproc
 631              	.LFE105:
 633              		.section	.text.intResult,"ax",%progbits
 634              		.align	1
 635              		.p2align 2,,3
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
 639              		.fpu fpv4-sp-d16
 641              	intResult:
 642              	.LVL48:
 643              	.LFB237:
3517:src/xeq.c     **** 
3518:src/xeq.c     **** int get_user_flag(int n) {
3519:src/xeq.c     **** 	unsigned short mask;
3520:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
3521:src/xeq.c     **** 
3522:src/xeq.c     **** 	return (*f & mask)? 1 : 0;
3523:src/xeq.c     **** }
3524:src/xeq.c     **** 
3525:src/xeq.c     **** void put_user_flag(int n, int f) {
ARM GAS  /tmp/ccQlyisH.s 			page 76


3526:src/xeq.c     **** 	if (f)	set_user_flag(n);
3527:src/xeq.c     **** 	else	clr_user_flag(n);
3528:src/xeq.c     **** }
3529:src/xeq.c     **** 
3530:src/xeq.c     **** #ifndef set_user_flag
3531:src/xeq.c     **** void set_user_flag(int n) {
3532:src/xeq.c     **** 	unsigned short mask;
3533:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3534:src/xeq.c     **** 
3535:src/xeq.c     **** 	*f |= mask;
3536:src/xeq.c     **** }
3537:src/xeq.c     **** 
3538:src/xeq.c     **** void clr_user_flag(int n) {
3539:src/xeq.c     **** 	unsigned short mask;
3540:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3541:src/xeq.c     **** 
3542:src/xeq.c     **** 	*f &= ~mask;
3543:src/xeq.c     **** }
3544:src/xeq.c     **** #endif
3545:src/xeq.c     **** 
3546:src/xeq.c     **** void cmdflag(unsigned int arg, enum rarg op) {
3547:src/xeq.c     **** 	unsigned short mask;
3548:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
3549:src/xeq.c     **** 	int flg = *f & mask;
3550:src/xeq.c     **** 
3551:src/xeq.c     **** 	switch (op) {
3552:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
3553:src/xeq.c     **** 	case RARG_CF:	flg = 0;			   break;
3554:src/xeq.c     **** 	case RARG_FF:	flg = flg? 0 : 1;		   break;
3555:src/xeq.c     **** 
3556:src/xeq.c     **** 	case RARG_FS:	fin_tst(flg);			   return;
3557:src/xeq.c     **** 	case RARG_FC:	fin_tst(! flg);			   return;
3558:src/xeq.c     **** 
3559:src/xeq.c     **** 	case RARG_FSC:	fin_tst(flg); flg = 0;		   break;
3560:src/xeq.c     **** 	case RARG_FSS:	fin_tst(flg); flg = 1;		   break;
3561:src/xeq.c     **** 	case RARG_FSF:	fin_tst(flg); flg = flg ? 0 : 1;   break;
3562:src/xeq.c     **** 
3563:src/xeq.c     **** 	case RARG_FCC:	fin_tst(! flg);	flg = 0;	   break;
3564:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
3565:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
3566:src/xeq.c     **** 
3567:src/xeq.c     **** 	default:
3568:src/xeq.c     **** 		return;
3569:src/xeq.c     **** 	}
3570:src/xeq.c     **** 
3571:src/xeq.c     **** 	// And write the value back
3572:src/xeq.c     **** 	if (flg)
3573:src/xeq.c     **** 		*f |= mask;
3574:src/xeq.c     **** 	else
3575:src/xeq.c     **** 		*f &= ~mask;
3576:src/xeq.c     **** 
3577:src/xeq.c     **** 	if ( arg == A_FLAG ) {
3578:src/xeq.c     **** 		dot( BIG_EQ, flg );
3579:src/xeq.c     **** 		finish_display(); // BIG_EQ
3580:src/xeq.c     **** 	}
3581:src/xeq.c     **** }
3582:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 77


3583:src/xeq.c     **** /* Reset all flags to off/false
3584:src/xeq.c     ****  */
3585:src/xeq.c     **** void clrflags(enum nilop op) {
3586:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
3587:src/xeq.c     **** 	if (LocalRegs < 0) {
3588:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
3589:src/xeq.c     **** 	}
3590:src/xeq.c     **** }
3591:src/xeq.c     **** 
3592:src/xeq.c     **** 
3593:src/xeq.c     **** /* Integer word size
3594:src/xeq.c     ****  */
3595:src/xeq.c     **** void intws(unsigned int arg, enum rarg op) {
3596:src/xeq.c     **** 	if (is_intmode()) {
3597:src/xeq.c     **** 		int i, ss = stack_size();
3598:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
3599:src/xeq.c     **** 		long long int v;
3600:src/xeq.c     **** 
3601:src/xeq.c     **** 		for (i=0; i<ss; i++) {
3602:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
3603:src/xeq.c     **** 			UState.int_len = arg;
3604:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
3605:src/xeq.c     **** 			UState.int_len = oldlen;
3606:src/xeq.c     **** 		}
3607:src/xeq.c     **** 		v = mask_value(get_reg_n_int(regL_idx));
3608:src/xeq.c     **** 		UState.int_len = arg;
3609:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
3610:src/xeq.c     **** 	} else
3611:src/xeq.c     **** 	    UState.int_len = arg;
3612:src/xeq.c     **** }
3613:src/xeq.c     **** 
3614:src/xeq.c     **** 
3615:src/xeq.c     **** /* Convert from a real to a fraction
3616:src/xeq.c     ****  */
3617:src/xeq.c     **** 
3618:src/xeq.c     **** void get_maxdenom(decNumber *d) {
3619:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
3620:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
3621:src/xeq.c     **** }
3622:src/xeq.c     **** 
3623:src/xeq.c     **** void op_2frac(enum nilop op) {
3624:src/xeq.c     **** 	decNumber z, n, d, t;
3625:src/xeq.c     **** 
3626:src/xeq.c     **** 	if (UState.intm) {
3627:src/xeq.c     **** 		setX_int(1);
3628:src/xeq.c     **** 		return;
3629:src/xeq.c     **** 	}
3630:src/xeq.c     **** 
3631:src/xeq.c     **** 	getY(&z);			// Stack has been lifted already
3632:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
3633:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
3634:src/xeq.c     **** 	if (State2.runmode) {
3635:src/xeq.c     **** 		dn_divide(&t, &n, &d);
3636:src/xeq.c     **** 		dn_compare(&n, &t, &z);
3637:src/xeq.c     **** 		if (dn_eq0(&n))
3638:src/xeq.c     **** 			DispMsg = "y/x =";
3639:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
ARM GAS  /tmp/ccQlyisH.s 			page 78


3640:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
3641:src/xeq.c     **** 			DispMsg = "y/x \007\344<";
3642:src/xeq.c     **** 		else
3643:src/xeq.c     **** 			DispMsg = "y/x \007\344>";
3644:src/xeq.c     **** #else
3645:src/xeq.c     **** 			DispMsg = "y/x <";
3646:src/xeq.c     **** 		else
3647:src/xeq.c     **** 			DispMsg = "y/x >";
3648:src/xeq.c     **** #endif
3649:src/xeq.c     **** 	}
3650:src/xeq.c     **** }
3651:src/xeq.c     **** 
3652:src/xeq.c     **** void op_fracdenom(enum nilop op) {
3653:src/xeq.c     **** 	int s;
3654:src/xeq.c     **** 	unsigned long long int i;
3655:src/xeq.c     **** 
3656:src/xeq.c     **** 	i = getX_int_sgn(&s);
3657:src/xeq.c     **** 	if (i > 9999)
3658:src/xeq.c     **** 		UState.denom_max = 0;
3659:src/xeq.c     **** 	else if (i != 1)
3660:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
3661:src/xeq.c     **** 	else {
3662:src/xeq.c     **** 		setlastX();
3663:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
3664:src/xeq.c     **** 	}
3665:src/xeq.c     **** }
3666:src/xeq.c     **** 
3667:src/xeq.c     **** 
3668:src/xeq.c     **** /*  Switching from an integer mode to real mode
3669:src/xeq.c     ****  *  We convert the stack and LastX 
3670:src/xeq.c     ****  */
3671:src/xeq.c     **** static const unsigned short int StackRegMask[] = { 0x10f, 0x1ff };
3672:src/xeq.c     **** 
3673:src/xeq.c     **** void op_float(enum nilop op) {
3674:src/xeq.c     **** 
3675:src/xeq.c     **** 	if (is_intmode()) {
3676:src/xeq.c     **** 		int i;
3677:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
3678:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
3679:src/xeq.c     **** 			if (mask & 1) {
3680:src/xeq.c     **** 				// register belongs to stack
3681:src/xeq.c     **** 				register_from_int(i, i, op == OP_FLOAT_XIN);
3682:src/xeq.c     **** 			}
3683:src/xeq.c     **** 			else if (is_dblmode()) {
3684:src/xeq.c     **** 				// expand the other registers which have been left
3685:src/xeq.c     **** 				// in decimal64 format by the integer mode switch
3686:src/xeq.c     **** 				packed128_from_packed(&(get_reg_n(i)->d), Regs + i);
3687:src/xeq.c     **** 			}
3688:src/xeq.c     **** 		}
3689:src/xeq.c     **** 	}
3690:src/xeq.c     **** 	if (op != OP_FLOAT_XIN && op != OP_FLOAT_RCLM) {
3691:src/xeq.c     **** 		UState.fract = 0;
3692:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
3693:src/xeq.c     **** 	}
3694:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
3695:src/xeq.c     **** }
3696:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 79


3697:src/xeq.c     **** /*  Switch to integer mode.
3698:src/xeq.c     ****  *  We convert the stack and LastX
3699:src/xeq.c     ****  */
3700:src/xeq.c     **** static void switch_to_int(void) {
3701:src/xeq.c     **** 	int i;
3702:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
3703:src/xeq.c     **** 	const int dbl = is_dblmode();
3704:src/xeq.c     **** 
3705:src/xeq.c     **** 	for (i = regK_idx; i >= regX_idx; --i, mask <<= 1) {
3706:src/xeq.c     **** 		if (mask & 0x800) {
3707:src/xeq.c     **** 			// register belongs to stack
3708:src/xeq.c     **** 			int_from_register(i, i);
3709:src/xeq.c     **** 		}
3710:src/xeq.c     **** 		else if (dbl) {
3711:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
3712:src/xeq.c     **** 			packed_from_packed128(Regs + i, &(get_reg_n(i)->d));
3713:src/xeq.c     **** 		}
3714:src/xeq.c     **** 	}
3715:src/xeq.c     **** }
3716:src/xeq.c     **** 
3717:src/xeq.c     **** static void set_base(unsigned int b) {
3718:src/xeq.c     **** 	UState.int_base = b - 1;
3719:src/xeq.c     **** 	if (!is_intmode())
3720:src/xeq.c     **** 		switch_to_int();
3721:src/xeq.c     **** }
3722:src/xeq.c     **** 
3723:src/xeq.c     **** void set_int_base(unsigned int arg, enum rarg op) {
3724:src/xeq.c     **** 	if (arg < 2) {
3725:src/xeq.c     **** 		if (arg == 0)
3726:src/xeq.c     **** 			op_float(OP_FLOAT);
3727:src/xeq.c     **** 		else
3728:src/xeq.c     **** 			op_fract(OP_FRACT);
3729:src/xeq.c     **** 	} else
3730:src/xeq.c     **** 		set_base(arg);
3731:src/xeq.c     **** }
3732:src/xeq.c     **** 
3733:src/xeq.c     **** 
3734:src/xeq.c     **** void op_fract(enum nilop op) {
3735:src/xeq.c     **** 	op_float(OP_FLOAT);
3736:src/xeq.c     **** 	UState.fract = 1;
3737:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
3738:src/xeq.c     **** 		UState.improperfrac = 1;
3739:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
3740:src/xeq.c     **** 		UState.improperfrac = 0;
3741:src/xeq.c     **** }
3742:src/xeq.c     **** 
3743:src/xeq.c     **** #ifdef INCLUDE_USER_MODE
3744:src/xeq.c     **** /* Save and restore user state.
3745:src/xeq.c     ****  */
3746:src/xeq.c     **** void cmdsavem(unsigned int arg, enum rarg op) {
3747:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
3748:src/xeq.c     **** }
3749:src/xeq.c     **** 
3750:src/xeq.c     **** void cmdrestm(unsigned int arg, enum rarg op) {
3751:src/xeq.c     **** 	const int dbl = is_dblmode();
3752:src/xeq.c     **** 	const int intm = is_intmode();
3753:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
ARM GAS  /tmp/ccQlyisH.s 			page 80


3754:src/xeq.c     **** 
3755:src/xeq.c     **** 	// Fix things
3756:src/xeq.c     **** 	if ( UState.contrast == 0 )
3757:src/xeq.c     **** 		UState.contrast = 6;
3758:src/xeq.c     **** 
3759:src/xeq.c     **** 	if (intm != is_intmode()) {
3760:src/xeq.c     **** 		// Switch back to decimal or integer mode
3761:src/xeq.c     **** 		UState.intm = intm;
3762:src/xeq.c     **** 		if (intm)
3763:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
3764:src/xeq.c     **** 		else
3765:src/xeq.c     **** 			switch_to_int();
3766:src/xeq.c     **** 	}
3767:src/xeq.c     **** 	if (! is_intmode() && dbl != is_dblmode()) {
3768:src/xeq.c     **** 		// Switch back to double/single precision
3769:src/xeq.c     **** 		UState.mode_double = dbl;
3770:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
3771:src/xeq.c     **** 	}
3772:src/xeq.c     **** }
3773:src/xeq.c     **** #endif
3774:src/xeq.c     **** 
3775:src/xeq.c     **** /* Process a single digit.
3776:src/xeq.c     ****  */
3777:src/xeq.c     **** #if 0 // unused
3778:src/xeq.c     **** static int is_digit(const char c) {
3779:src/xeq.c     **** 	if (c >= '0' && c <= '9')
3780:src/xeq.c     **** 		return 1;
3781:src/xeq.c     **** 	return 0;
3782:src/xeq.c     **** }
3783:src/xeq.c     **** 
3784:src/xeq.c     **** static int is_xdigit(const char c) {
3785:src/xeq.c     **** 	if (is_digit(c) || (c >= 'A' && c <= 'F'))
3786:src/xeq.c     **** 		return 1;
3787:src/xeq.c     **** 	return 0;
3788:src/xeq.c     **** }
3789:src/xeq.c     **** #endif
3790:src/xeq.c     **** 
3791:src/xeq.c     **** static void digit(unsigned int c) {
3792:src/xeq.c     **** 	const int intm = is_intmode();
3793:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
3794:src/xeq.c     **** 
3795:src/xeq.c     **** 	if (Cmdline[0] == '-')
3796:src/xeq.c     **** 		lim++;
3797:src/xeq.c     **** 	if (intm) {
3798:src/xeq.c     **** 		if (c >= int_base()) {
3799:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3800:src/xeq.c     **** 			return;
3801:src/xeq.c     **** 		}
3802:src/xeq.c     **** 	} else {
3803:src/xeq.c     **** 		if (c >= 10) {
3804:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3805:src/xeq.c     **** 			return;
3806:src/xeq.c     **** 		}
3807:src/xeq.c     **** 
3808:src/xeq.c     **** 		if (CmdLineEex) {
3809:src/xeq.c     **** 			lim = CMDLINELEN;
3810:src/xeq.c     **** #ifdef SHIFT_EXPONENT
ARM GAS  /tmp/ccQlyisH.s 			page 81


3811:src/xeq.c     **** 			if (CmdLineLength >= lim) {
3812:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
3813:src/xeq.c     **** 
3814:src/xeq.c     **** 				if (*p == '-')
3815:src/xeq.c     **** 					p++;
3816:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
3817:src/xeq.c     **** 					p[0] = p[1];
3818:src/xeq.c     **** 					p++;
3819:src/xeq.c     **** 				}
3820:src/xeq.c     **** 				CmdLineLength--;
3821:src/xeq.c     **** 			}
3822:src/xeq.c     **** #endif
3823:src/xeq.c     **** 		}
3824:src/xeq.c     **** 		else {
3825:src/xeq.c     **** 			lim += CmdLineDot;
3826:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
3827:src/xeq.c     **** 			if (CmdLineDot >= 2) {
3828:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
3829:src/xeq.c     **** 				// Make space for the minus sign
3830:src/xeq.c     **** 				lim = CMDLINELEN - (Cmdline[0] != '-');
3831:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3832:src/xeq.c     **** 				lim += 1 + (find_char(Cmdline, '.')[1] == '.');
3833:src/xeq.c     **** #  else
3834:src/xeq.c     **** 				lim++;
3835:src/xeq.c     **** #  endif
3836:src/xeq.c     **** 			}
3837:src/xeq.c     **** #endif
3838:src/xeq.c     **** 		}
3839:src/xeq.c     **** 	}
3840:src/xeq.c     **** 	if (CmdLineLength >= lim
3841:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
3842:src/xeq.c     **** 		report_warn(ERR_TOO_LONG);
3843:src/xeq.c     **** 		return;
3844:src/xeq.c     **** 	}
3845:src/xeq.c     **** 
3846:src/xeq.c     **** 	if (c >= 10)
3847:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
3848:src/xeq.c     **** 	else {
3849:src/xeq.c     **** 		// Leading zeros in the exponent aren't visible to the user,
3850:src/xeq.c     **** 		// and they're removed automatically if digits are shifted,
3851:src/xeq.c     **** 		// so it's more consistent if they can't be entered, either.
3852:src/xeq.c     **** 		if (c == 0 && CmdLineEex) {
3853:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
3854:src/xeq.c     **** 				return;
3855:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3856:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'D')
3857:src/xeq.c     **** 				return;
3858:src/xeq.c     **** #else
3859:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == '-')
3860:src/xeq.c     **** 				return;
3861:src/xeq.c     **** #endif
3862:src/xeq.c     **** 		}
3863:src/xeq.c     **** 
3864:src/xeq.c     **** 		append_cmdline(c + '0');
3865:src/xeq.c     **** 
3866:src/xeq.c     **** 		if (CmdLineEex)
3867:src/xeq.c     **** 			exponent_adjusted(1);
ARM GAS  /tmp/ccQlyisH.s 			page 82


3868:src/xeq.c     **** 	}
3869:src/xeq.c     **** }
3870:src/xeq.c     **** 
3871:src/xeq.c     **** 
3872:src/xeq.c     **** void set_entry() {
3873:src/xeq.c     **** 	if (!Running && !XromRunning)
3874:src/xeq.c     **** 		State.entryp = 1;
3875:src/xeq.c     **** }
3876:src/xeq.c     **** 
3877:src/xeq.c     **** 
3878:src/xeq.c     **** /* Decode and process the specials.  These are niladic functions and
3879:src/xeq.c     ****  * commands with non-standard stack operation.
3880:src/xeq.c     ****  */
3881:src/xeq.c     **** static void specials(const opcode op) {
3882:src/xeq.c     **** 	int opm = argKIND(op);
3883:src/xeq.c     **** 
3884:src/xeq.c     **** 	switch (opm) {
3885:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
3886:src/xeq.c     **** 	case OP_3:	case OP_4:	case OP_5:
3887:src/xeq.c     **** 	case OP_6:	case OP_7:	case OP_8:
3888:src/xeq.c     **** 	case OP_9:	case OP_A:	case OP_B:
3889:src/xeq.c     **** 	case OP_C:	case OP_D:	case OP_E:
3890:src/xeq.c     **** 	case OP_F:
3891:src/xeq.c     **** 		digit(opm - OP_0);
3892:src/xeq.c     **** 		break;
3893:src/xeq.c     **** 
3894:src/xeq.c     **** 	case OP_DOT:
3895:src/xeq.c     **** 		if (is_intmode())
3896:src/xeq.c     **** 			break;
3897:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3898:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 13 + CmdLineDot) {
3899:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
3900:src/xeq.c     **** #else
3901:src/xeq.c     **** #  if defined(PRETTY_FRACTION_ENTRY)
3902:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + 2*CmdLineDot) {
3903:src/xeq.c     **** #  else
3904:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + CmdLineDot) {
3905:src/xeq.c     **** #  endif
3906:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '.'
3907:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
3908:src/xeq.c     **** #endif
3909:src/xeq.c     **** 				digit(0);
3910:src/xeq.c     **** 			CmdLineDot++;
3911:src/xeq.c     **** 			append_cmdline('.');
3912:src/xeq.c     **** 		}
3913:src/xeq.c     **** 		break;
3914:src/xeq.c     **** 
3915:src/xeq.c     **** 	case OP_EEX:
3916:src/xeq.c     **** 		if (is_intmode())
3917:src/xeq.c     **** 			break;
3918:src/xeq.c     **** 		else {
3919:src/xeq.c     **** #if INCLUDE_EEX_PI == 2
3920:src/xeq.c     **** 			const int eex_pi = 1;
3921:src/xeq.c     **** #elif INCLUDE_EEX_PI == 1
3922:src/xeq.c     **** 			const int eex_pi = get_user_flag(regL_idx);
3923:src/xeq.c     **** #else
3924:src/xeq.c     **** 			const int eex_pi = 0;
ARM GAS  /tmp/ccQlyisH.s 			page 83


3925:src/xeq.c     **** #endif
3926:src/xeq.c     **** 
3927:src/xeq.c     **** 			if (CmdLineDot == 2) {
3928:src/xeq.c     **** 				if (eex_pi) {
3929:src/xeq.c     **** 					// fraction entered (two dots); execute ENTER and enter pi
3930:src/xeq.c     **** 					if (is_bad_cmdline()) {
3931:src/xeq.c     **** 						if (Running || XromRunning)
3932:src/xeq.c     **** 							report_err(ERR_DOMAIN);
3933:src/xeq.c     **** 						break;
3934:src/xeq.c     **** 					}
3935:src/xeq.c     **** 					process_cmdline();
3936:src/xeq.c     **** 					lift();
3937:src/xeq.c     **** 					copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3938:src/xeq.c     **** 					set_lift();
3939:src/xeq.c     **** 				}
3940:src/xeq.c     **** 				break;
3941:src/xeq.c     **** 			}
3942:src/xeq.c     **** 			if (CmdLineEex || CmdLineLength >= CMDLINELEN)
3943:src/xeq.c     **** 				break;
3944:src/xeq.c     **** 			if (eex_pi && CmdLineLength == 0) {
3945:src/xeq.c     **** 				// empty command line: enter pi
3946:src/xeq.c     **** 				lift_if_enabled();
3947:src/xeq.c     **** 				copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3948:src/xeq.c     **** 				set_lift();
3949:src/xeq.c     **** 				break;
3950:src/xeq.c     **** 			}
3951:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 1)
3952:src/xeq.c     **** 			if (UState.fract)
3953:src/xeq.c     **** 				break;
3954:src/xeq.c     **** #endif
3955:src/xeq.c     **** 			if (CmdLineLength == 0)
3956:src/xeq.c     **** 				digit(1);
3957:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
3958:src/xeq.c     **** 			append_cmdline('E');
3959:src/xeq.c     **** 		}
3960:src/xeq.c     **** 		break;
3961:src/xeq.c     **** 
3962:src/xeq.c     **** 	case OP_CHS:
3963:src/xeq.c     **** 		if (CmdLineLength)
3964:src/xeq.c     **** 			cmdlinechs();
3965:src/xeq.c     **** 		else if (is_intmode()) {
3966:src/xeq.c     **** 			setX_int(intChs(getX_int()));
3967:src/xeq.c     **** 			set_lift();
3968:src/xeq.c     **** 		} else {
3969:src/xeq.c     **** 			decNumber x, r;
3970:src/xeq.c     **** 
3971:src/xeq.c     **** 			getX(&x);
3972:src/xeq.c     **** 			dn_minus(&r, &x);
3973:src/xeq.c     **** 			setX(&r);
3974:src/xeq.c     **** 			set_lift();
3975:src/xeq.c     **** 		}
3976:src/xeq.c     **** 		break;
3977:src/xeq.c     **** 
3978:src/xeq.c     **** 	case OP_CLX:
3979:src/xeq.c     **** 		if (Running)
3980:src/xeq.c     **** 			illegal(op);
3981:src/xeq.c     **** 		else if (CmdLineLength) {
ARM GAS  /tmp/ccQlyisH.s 			page 84


3982:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3983:src/xeq.c     **** 			if (CmdLineEex != 0 && Cmdline[CmdLineLength-1] == 'D') {
3984:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
3985:src/xeq.c     **** 				break;
3986:src/xeq.c     **** 			}
3987:src/xeq.c     **** #endif
3988:src/xeq.c     **** 			CmdLineLength--;
3989:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
3990:src/xeq.c     **** 				CmdLineEex = 0;
3991:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
3992:src/xeq.c     **** 				CmdLineDot--;
3993:src/xeq.c     **** 		} else
3994:src/xeq.c     **** 			clrx(OP_rCLX);
3995:src/xeq.c     **** 		break;
3996:src/xeq.c     **** 
3997:src/xeq.c     **** 	case OP_ENTER:
3998:src/xeq.c     **** #ifdef ENTRY_RPN
3999:src/xeq.c     **** 		if (CmdLineLength && !(XromRunning || Running) ) { 
4000:src/xeq.c     **** //exclude stack lift if there is something in the input line AND if NOT running code i.e. Xrom or p
4001:src/xeq.c     **** 			process_cmdline();     //JM
4002:src/xeq.c     **** 		} else {                       //JM
4003:src/xeq.c     **** 			process_cmdline();
4004:src/xeq.c     **** 			lift();
4005:src/xeq.c     **** 			if ( (XromRunning || Running) ) {//JMTEST Explicitly including standard functionality if code is
4006:src/xeq.c     **** 				clr_lift();
4007:src/xeq.c     **** 			}   
4008:src/xeq.c     **** 		}                              //JM
4009:src/xeq.c     **** #else
4010:src/xeq.c     **** 		process_cmdline();
4011:src/xeq.c     **** 		lift();
4012:src/xeq.c     **** 		clr_lift();
4013:src/xeq.c     **** #endif
4014:src/xeq.c     **** 		break;
4015:src/xeq.c     **** 
4016:src/xeq.c     **** 	case OP_SIGMAPLUS:
4017:src/xeq.c     **** 	case OP_SIGMAMINUS:
4018:src/xeq.c     **** 		if (is_intmode()) {
4019:src/xeq.c     **** 			bad_mode_error();
4020:src/xeq.c     **** 			break;
4021:src/xeq.c     **** 		}
4022:src/xeq.c     **** 		process_cmdline();
4023:src/xeq.c     **** 		clr_lift();
4024:src/xeq.c     **** 		setlastX();
4025:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
4026:src/xeq.c     **** 			sigma_plus();
4027:src/xeq.c     **** 		else
4028:src/xeq.c     **** 			sigma_minus();
4029:src/xeq.c     **** 		sigma_val(OP_sigmaN);
4030:src/xeq.c     **** 		break;
4031:src/xeq.c     **** 
4032:src/xeq.c     **** 	// Conditional tests vs registers....
4033:src/xeq.c     **** 	case OP_Xeq0:	case OP_Xlt0:	case OP_Xgt0:
4034:src/xeq.c     **** 	case OP_Xne0:	case OP_Xle0:	case OP_Xge0:
4035:src/xeq.c     **** 	case OP_Xapx0:
4036:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ZERO, (enum tst_op)(opm - OP_Xeq0));
4037:src/xeq.c     **** 		break;
4038:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
ARM GAS  /tmp/ccQlyisH.s 			page 85


4039:src/xeq.c     **** 		do_ztst(&const_0, &const_0, (enum tst_op)(opm - OP_Zeq0));
4040:src/xeq.c     **** 		break;
4041:src/xeq.c     **** 
4042:src/xeq.c     **** 	case OP_Xeq1:	case OP_Xlt1:	case OP_Xgt1:
4043:src/xeq.c     **** 	case OP_Xne1:	case OP_Xle1:	case OP_Xge1:
4044:src/xeq.c     **** 	case OP_Xapx1:
4045:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ONE, (enum tst_op)(opm - OP_Xeq1));
4046:src/xeq.c     **** 		break;
4047:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
4048:src/xeq.c     **** 		do_ztst(&const_1, &const_0, (enum tst_op)(opm - OP_Zeq1));
4049:src/xeq.c     **** 		break;
4050:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
4051:src/xeq.c     **** 		do_ztst(&const_0, &const_1, (enum tst_op)(opm - OP_Zeqi));
4052:src/xeq.c     **** 		break;
4053:src/xeq.c     **** 
4054:src/xeq.c     **** 	default:
4055:src/xeq.c     **** 		illegal(op);
4056:src/xeq.c     **** 	}
4057:src/xeq.c     **** }
4058:src/xeq.c     **** 
4059:src/xeq.c     **** enum trig_modes get_trig_mode(void) {
4060:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
4061:src/xeq.c     **** 		return TRIG_RAD;
4062:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
4063:src/xeq.c     **** 	return (enum trig_modes) UState.trigmode;
4064:src/xeq.c     **** }
4065:src/xeq.c     **** 
4066:src/xeq.c     **** void op_double(enum nilop op) {
4067:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
4068:src/xeq.c     **** 	const int intm = is_intmode();
4069:src/xeq.c     **** 	int i;
4070:src/xeq.c     **** 
4071:src/xeq.c     **** 	if (dbl != UState.mode_double) {
4072:src/xeq.c     **** 		// Mode switch
4073:src/xeq.c     **** 		if (dbl) {
4074:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
4075:src/xeq.c     **** 				// Need space for double precision stack
4076:src/xeq.c     **** 				cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
4077:src/xeq.c     **** 				if (Error) {
4078:src/xeq.c     **** 					return;
4079:src/xeq.c     **** 				}
4080:src/xeq.c     **** 			}
4081:src/xeq.c     **** 
4082:src/xeq.c     **** 			UState.mode_double = 1;
4083:src/xeq.c     **** 			if (! intm) {
4084:src/xeq.c     **** 				// Convert X to K to double precision
4085:src/xeq.c     **** 				// Avoid this in integer mode
4086:src/xeq.c     **** 				for (i = 0; i < STACK_SIZE + EXTRA_REG; ++i)
4087:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
4088:src/xeq.c     **** 			}
4089:src/xeq.c     **** 		}
4090:src/xeq.c     **** 		else {
4091:src/xeq.c     **** 			if (! intm) {
4092:src/xeq.c     **** 				// Convert X to K to single precision
4093:src/xeq.c     **** 				// Avoid this in integer mode
4094:src/xeq.c     **** 				for (i = STACK_SIZE + EXTRA_REG - 1; i >= 0; --i)
4095:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
ARM GAS  /tmp/ccQlyisH.s 			page 86


4096:src/xeq.c     **** 			}
4097:src/xeq.c     **** 			UState.mode_double = 0;
4098:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
4099:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
4100:src/xeq.c     **** 		}
4101:src/xeq.c     **** 	}
4102:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
4103:src/xeq.c     **** 	if (intm) {
4104:src/xeq.c     **** 		// Do the necessary conversions from integer mode
4105:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
4106:src/xeq.c     **** 	}
4107:src/xeq.c     **** }
4108:src/xeq.c     **** 
4109:src/xeq.c     **** void cmdpause(unsigned int arg, enum rarg op) {
4110:src/xeq.c     **** 	display();
4111:src/xeq.c     **** #ifndef CONSOLE
4112:src/xeq.c     **** 	// decremented in the low level heartbeat
4113:src/xeq.c     **** 	Pause = arg;
4114:src/xeq.c     **** 	GoFast = (arg == 0);
4115:src/xeq.c     **** #elif 0
4116:src/xeq.c     **** 	start_pause(arg);
4117:src/xeq.c     **** #else	
4118:src/xeq.c     **** #if defined(WIN32) && !defined(__GNUC__)
4119:src/xeq.c     **** #pragma warning(disable:4996)
4120:src/xeq.c     **** 	sleep(arg/10);
4121:src/xeq.c     **** #else
4122:src/xeq.c     **** 	usleep(arg * 100000);
4123:src/xeq.c     **** #endif
4124:src/xeq.c     **** #endif
4125:src/xeq.c     **** }
4126:src/xeq.c     **** 
4127:src/xeq.c     **** 
4128:src/xeq.c     **** 
4129:src/xeq.c     **** void op_setspeed(enum nilop op) {
4130:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
4131:src/xeq.c     **** 	update_speed(1);
4132:src/xeq.c     **** }
4133:src/xeq.c     **** 
4134:src/xeq.c     **** 
4135:src/xeq.c     **** void op_prompt(enum nilop op) {
4136:src/xeq.c     **** 	set_running_off();
4137:src/xeq.c     **** 	alpha_view_common(regX_idx);
4138:src/xeq.c     **** }
4139:src/xeq.c     **** 
4140:src/xeq.c     **** /* Test if a number is an integer or fractional */
4141:src/xeq.c     **** /* Special numbers are neither */
4142:src/xeq.c     **** void XisInt(enum nilop op) {
4143:src/xeq.c     **** 	decNumber x;
4144:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
4145:src/xeq.c     **** 	if ( is_intmode() )
4146:src/xeq.c     **** 		result = op_int;
4147:src/xeq.c     **** 	else if (decNumberIsSpecial(getX(&x)))
4148:src/xeq.c     **** 		result = 0;
4149:src/xeq.c     **** 	else
4150:src/xeq.c     **** 	        result = (is_int(&x) == op_int);
4151:src/xeq.c     **** 	fin_tst(result);
4152:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 87


4153:src/xeq.c     **** 
4154:src/xeq.c     **** /* Test if a number is an even or odd integer */
4155:src/xeq.c     **** /* fractional or special values are neither even nor odd */
4156:src/xeq.c     **** void XisEvenOrOdd(enum nilop op) {
4157:src/xeq.c     **** 	decNumber x;
4158:src/xeq.c     **** 	int odd = (op == OP_XisODD);
4159:src/xeq.c     **** 
4160:src/xeq.c     **** 	if (is_intmode()) {
4161:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
4162:src/xeq.c     **** 	} else {
4163:src/xeq.c     **** 		fin_tst(is_even(getX(&x)) == !odd);
4164:src/xeq.c     **** 	}
4165:src/xeq.c     **** }
4166:src/xeq.c     **** 
4167:src/xeq.c     **** 
4168:src/xeq.c     **** /* Test if a number is prime */
4169:src/xeq.c     **** void XisPrime(enum nilop op) {
4170:src/xeq.c     **** 	unsigned long long int i;
4171:src/xeq.c     **** 	int sgn;
4172:src/xeq.c     **** 
4173:src/xeq.c     **** 	i = getX_int_sgn(&sgn);
4174:src/xeq.c     **** 	if (!is_intmode()) {
4175:src/xeq.c     **** 		decNumber x;
4176:src/xeq.c     **** 
4177:src/xeq.c     **** 		getX(&x);
4178:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
4179:src/xeq.c     **** 			sgn = 1; // not prime
4180:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
4181:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
4182:src/xeq.c     **** 			i = 0xFFFFFFFFFFFFFFFFull;
4183:src/xeq.c     **** 	}
4184:src/xeq.c     **** 	fin_tst(sgn == 0 && isPrime(i));
4185:src/xeq.c     **** }
4186:src/xeq.c     **** 
4187:src/xeq.c     **** /* Test is a number is infinite.
4188:src/xeq.c     ****  */
4189:src/xeq.c     **** void isInfinite(enum nilop op) {
4190:src/xeq.c     **** 	decNumber x;
4191:src/xeq.c     **** 
4192:src/xeq.c     **** 	getX(&x);
4193:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
4194:src/xeq.c     **** }
4195:src/xeq.c     **** 
4196:src/xeq.c     **** /* Test for NaN.
4197:src/xeq.c     ****  * this could be done by testing x != x, but having a special command
4198:src/xeq.c     ****  * for it reads easier.
4199:src/xeq.c     ****  */
4200:src/xeq.c     **** void isNan(enum nilop op) {
4201:src/xeq.c     **** 	decNumber x;
4202:src/xeq.c     **** 
4203:src/xeq.c     **** 	getX(&x);
4204:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
4205:src/xeq.c     **** }
4206:src/xeq.c     **** 
4207:src/xeq.c     **** void isSpecial(enum nilop op) {
4208:src/xeq.c     **** 	decNumber x;
4209:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 88


4210:src/xeq.c     **** 	getX(&x);
4211:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
4212:src/xeq.c     **** }
4213:src/xeq.c     **** 
4214:src/xeq.c     **** void op_entryp(enum nilop op) {
4215:src/xeq.c     **** 	fin_tst(State.entryp);
4216:src/xeq.c     **** }
4217:src/xeq.c     **** 
4218:src/xeq.c     **** /* Bulk register operations */
4219:src/xeq.c     **** int reg_decode(int *s, int *n, int *d, int flash) {
4220:src/xeq.c     **** 	decNumber x, y;
4221:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
4222:src/xeq.c     **** 
4223:src/xeq.c     **** 	if (is_intmode()) {
4224:src/xeq.c     **** 		bad_mode_error();
4225:src/xeq.c     **** 		return 1;
4226:src/xeq.c     **** 	}
4227:src/xeq.c     **** 	getX(&x);			// sss.nnddd~
4228:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
4229:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
4230:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
4231:src/xeq.c     **** 
4232:src/xeq.c     **** 	if (rsrc < 0) {
4233:src/xeq.c     **** 		if (!flash)
4234:src/xeq.c     **** 			goto range_error;
4235:src/xeq.c     **** 		rsrc = -rsrc;
4236:src/xeq.c     **** 	}
4237:src/xeq.c     **** 	else
4238:src/xeq.c     **** 		flash = 0;
4239:src/xeq.c     **** 
4240:src/xeq.c     **** 	rdest = rsrc % 1000;		// ddd
4241:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
4242:src/xeq.c     **** 	num = rsrc % 100;		// nn
4243:src/xeq.c     **** 	rsrc /= 100;			// sss
4244:src/xeq.c     **** 
4245:src/xeq.c     **** 	mx_src = flash ? BackupFlash._numregs
4246:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
4247:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
4248:src/xeq.c     **** 	       : global_regs();
4249:src/xeq.c     **** 	if (rsrc >= mx_src)
4250:src/xeq.c     **** 		goto range_error;
4251:src/xeq.c     **** 
4252:src/xeq.c     **** 	if (d != NULL) {
4253:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
4254:src/xeq.c     **** 
4255:src/xeq.c     **** 		if (num == 0) {
4256:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
4257:src/xeq.c     **** 			if (flash || (rsrc >= LOCAL_REG_BASE) != (rdest >= LOCAL_REG_BASE))
4258:src/xeq.c     **** 				// source & destination in different memory areas
4259:src/xeq.c     **** 				num = mx_dest < mx_src ? mx_dest : mx_src;
4260:src/xeq.c     **** 			else {
4261:src/xeq.c     **** 				if (rsrc > rdest) {
4262:src/xeq.c     **** 					num = mx_src - rsrc;
4263:src/xeq.c     **** 					q = rsrc - rdest;
4264:src/xeq.c     **** 				}
4265:src/xeq.c     **** 				else {
4266:src/xeq.c     **** 					num = mx_dest - rdest;
ARM GAS  /tmp/ccQlyisH.s 			page 89


4267:src/xeq.c     **** 					q = rdest - rsrc;
4268:src/xeq.c     **** 				}
4269:src/xeq.c     **** 				if (num > q)
4270:src/xeq.c     **** 					num = q;
4271:src/xeq.c     **** 			}
4272:src/xeq.c     **** 		}
4273:src/xeq.c     **** 		if (rdest >= LOCAL_REG_BASE)
4274:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
4275:src/xeq.c     **** 		if (rdest + num > mx_dest)
4276:src/xeq.c     **** 			goto range_error;
4277:src/xeq.c     **** 		// Set pointer
4278:src/xeq.c     **** 		*d = rdest;
4279:src/xeq.c     **** 	}
4280:src/xeq.c     **** 	else {
4281:src/xeq.c     **** 		if (num == 0) {
4282:src/xeq.c     **** 			num = mx_src - rsrc;
4283:src/xeq.c     **** 		}
4284:src/xeq.c     **** 	}
4285:src/xeq.c     **** 	if (rsrc + num > mx_src)
4286:src/xeq.c     **** 		goto range_error;
4287:src/xeq.c     **** 
4288:src/xeq.c     **** 	// Now point to the correct source register
4289:src/xeq.c     **** 	*s = flash ? FLASH_REG_BASE + rsrc : rsrc;
4290:src/xeq.c     **** 	*n = num;
4291:src/xeq.c     **** 
4292:src/xeq.c     **** 	return 0;
4293:src/xeq.c     **** 
4294:src/xeq.c     **** range_error:
4295:src/xeq.c     **** 	report_err(ERR_RANGE);
4296:src/xeq.c     **** 	return 1;
4297:src/xeq.c     **** }
4298:src/xeq.c     **** 
4299:src/xeq.c     **** void op_regcopy(enum nilop op) {
4300:src/xeq.c     **** 	int s, n, d;
4301:src/xeq.c     **** 
4302:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 1))
4303:src/xeq.c     **** 		return;
4304:src/xeq.c     **** 	move_regs(get_reg_n(d), get_reg_n(s), n);
4305:src/xeq.c     **** }
4306:src/xeq.c     **** 
4307:src/xeq.c     **** void op_regswap(enum nilop op) {
4308:src/xeq.c     **** 	int s, n, d, i;
4309:src/xeq.c     **** 
4310:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 0) || s == d)
4311:src/xeq.c     **** 		return;
4312:src/xeq.c     **** 	else {
4313:src/xeq.c     **** 		if ((s > d && d + n > s) || (d > s && s + n > d))
4314:src/xeq.c     **** 			report_err(ERR_RANGE);
4315:src/xeq.c     **** 		else {
4316:src/xeq.c     **** 			for (i = 0; i < n; i++)
4317:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
4318:src/xeq.c     **** 		}
4319:src/xeq.c     **** 	}
4320:src/xeq.c     **** }
4321:src/xeq.c     **** 
4322:src/xeq.c     **** void op_regclr(enum nilop op) {
4323:src/xeq.c     **** 	int s, n;
ARM GAS  /tmp/ccQlyisH.s 			page 90


4324:src/xeq.c     **** 
4325:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0))
4326:src/xeq.c     **** 		return;
4327:src/xeq.c     **** 	zero_regs(get_reg_n(s), n);
4328:src/xeq.c     **** }
4329:src/xeq.c     **** 
4330:src/xeq.c     **** void op_regsort(enum nilop op) {
4331:src/xeq.c     **** 	int s, n;
4332:src/xeq.c     **** 	decNumber pivot, a;
4333:src/xeq.c     **** 	int beg[10], end[10], i;
4334:src/xeq.c     **** 
4335:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0) || n == 1)
4336:src/xeq.c     **** 		return;
4337:src/xeq.c     **** 
4338:src/xeq.c     **** 	/* Non-recursive quicksort */
4339:src/xeq.c     **** 	beg[0] = 0;
4340:src/xeq.c     **** 	end[0] = n;
4341:src/xeq.c     **** 	i = 0;
4342:src/xeq.c     **** 	while (i>=0) {
4343:src/xeq.c     **** 		int L = beg[i];
4344:src/xeq.c     **** 		int R = end[i] - 1;
4345:src/xeq.c     **** 		if (L<R) {
4346:src/xeq.c     **** 			const int pvt = s + L;
4347:src/xeq.c     **** 			getRegister(&pivot, pvt);
4348:src/xeq.c     **** 			while (L<R) {
4349:src/xeq.c     **** 				while (L<R) {
4350:src/xeq.c     **** 					getRegister(&a, s + R);
4351:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
4352:src/xeq.c     **** 						break;
4353:src/xeq.c     **** 					R--;
4354:src/xeq.c     **** 				}
4355:src/xeq.c     **** 				if (L<R)
4356:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
4357:src/xeq.c     **** 				while (L<R) {
4358:src/xeq.c     **** 					getRegister(&a, s + L);
4359:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
4360:src/xeq.c     **** 						break;
4361:src/xeq.c     **** 					L++;
4362:src/xeq.c     **** 				}
4363:src/xeq.c     **** 				if (L<R)
4364:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
4365:src/xeq.c     **** 			}
4366:src/xeq.c     **** 			setRegister(s + L, &pivot);
4367:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
4368:src/xeq.c     **** 				beg[i+1] = beg[i];
4369:src/xeq.c     **** 				end[i+1] = L;
4370:src/xeq.c     **** 				beg[i] = L+1;
4371:src/xeq.c     **** 			} else {
4372:src/xeq.c     **** 				beg[i+1] = L+1;
4373:src/xeq.c     **** 				end[i+1] = end[i];
4374:src/xeq.c     **** 				end[i] = L;
4375:src/xeq.c     **** 			}
4376:src/xeq.c     **** 			i++;
4377:src/xeq.c     **** 		} else
4378:src/xeq.c     **** 			i--;
4379:src/xeq.c     **** 	}
4380:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 91


4381:src/xeq.c     **** 
4382:src/xeq.c     **** 
4383:src/xeq.c     **** 
4384:src/xeq.c     **** /* Print a single program step nicely.
4385:src/xeq.c     ****  */
4386:src/xeq.c     **** static void print_step(const opcode op) {
4387:src/xeq.c     **** 	char buf[16];
4388:src/xeq.c     **** 	const unsigned int pc = state_pc();
4389:src/xeq.c     **** 	char *p = TraceBuffer;
4390:src/xeq.c     **** 
4391:src/xeq.c     **** 	if (isXROM(pc)) {
4392:src/xeq.c     **** 		*p++ = 'x';
4393:src/xeq.c     **** 	} else if (isLIB(pc)) {
4394:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
4395:src/xeq.c     **** 		*p++ = ' ';
4396:src/xeq.c     **** 	}
4397:src/xeq.c     **** 	if (pc == 0)
4398:src/xeq.c     **** 		scopy(p, "000:");
4399:src/xeq.c     **** 	else {
4400:src/xeq.c     **** 		p = num_arg_0(p, user_pc(pc), 3);
4401:src/xeq.c     **** 		*p++ = ':';
4402:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
4403:src/xeq.c     **** 		if (*p == '?')
4404:src/xeq.c     **** 			*p = '\0';
4405:src/xeq.c     **** 	}
4406:src/xeq.c     **** 	State2.disp_small = 1;
4407:src/xeq.c     **** 	DispMsg = TraceBuffer;
4408:src/xeq.c     **** }
4409:src/xeq.c     **** 
4410:src/xeq.c     **** 
4411:src/xeq.c     **** /* When stuff gets done, there are some bits of state that need
4412:src/xeq.c     ****  * to be reset -- SHOW, ->base change the display mode until something
4413:src/xeq.c     ****  * happens.  This should be called on that something.
4414:src/xeq.c     ****  */
4415:src/xeq.c     **** void reset_volatile_state(void) {
4416:src/xeq.c     **** 	// extern int IntMaxWindow;
4417:src/xeq.c     **** 	// IntMaxWindow = 0;
4418:src/xeq.c     **** 	State2.window = 0;
4419:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
4420:src/xeq.c     **** }
4421:src/xeq.c     **** 
4422:src/xeq.c     **** 
4423:src/xeq.c     **** /*
4424:src/xeq.c     ****  *  Called by any long running function
4425:src/xeq.c     ****  */
4426:src/xeq.c     **** void busy(void)
4427:src/xeq.c     **** {
4428:src/xeq.c     **** 	/*
4429:src/xeq.c     **** 	 *  Serve the hardware watch dog
4430:src/xeq.c     **** 	 */
4431:src/xeq.c     **** 	watchdog();
4432:src/xeq.c     **** 
4433:src/xeq.c     **** 	/*
4434:src/xeq.c     **** 	 *  Increase the speed
4435:src/xeq.c     **** 	 */
4436:src/xeq.c     **** 	update_speed(1);
4437:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 92


4438:src/xeq.c     **** 	/*
4439:src/xeq.c     **** 	 *  Indicate busy state to the user
4440:src/xeq.c     **** 	 */
4441:src/xeq.c     **** 	if (!Busy && !Running) {
4442:src/xeq.c     **** 		Busy = 1;
4443:src/xeq.c     **** 		message("Wait...", NULL);
4444:src/xeq.c     **** 	}
4445:src/xeq.c     **** }
4446:src/xeq.c     **** 
4447:src/xeq.c     **** /***************************************************************************
4448:src/xeq.c     ****  * Function dispatchers.
4449:src/xeq.c     ****  */
4450:src/xeq.c     **** 
4451:src/xeq.c     **** /*
4452:src/xeq.c     ****  *  Check for a call into XROM space.
4453:src/xeq.c     ****  *  Fix the pointer alignment on the go.
4454:src/xeq.c     ****  */
4455:src/xeq.c     **** #ifdef REALBUILD
4456:src/xeq.c     **** typedef unsigned long uintptr_t;
4457:src/xeq.c     **** #else
4458:src/xeq.c     **** #include <stdint.h>
4459:src/xeq.c     **** #endif
4460:src/xeq.c     **** 
4461:src/xeq.c     **** static const s_opcode *check_for_xrom_address(void *fp)
4462:src/xeq.c     **** {
4463:src/xeq.c     **** 	const s_opcode *xp = (const s_opcode *) ((uintptr_t ) fp & ~1);
4464:src/xeq.c     **** 	if (xp < xrom)
4465:src/xeq.c     **** 		return NULL;
4466:src/xeq.c     **** #ifndef REALBUILD
4467:src/xeq.c     **** 	// On the device, XROM is at the end so this is not needed
4468:src/xeq.c     **** 	if (xp >= xrom + xrom_size)
4469:src/xeq.c     **** 		return NULL;
4470:src/xeq.c     **** #endif
4471:src/xeq.c     **** 	return xp;
4472:src/xeq.c     **** }
4473:src/xeq.c     **** 
4474:src/xeq.c     **** /*
4475:src/xeq.c     ****  *  Check for a call into XROM space and dispatch it.
4476:src/xeq.c     ****  */
4477:src/xeq.c     **** static int dispatch_xrom(void *fp)
4478:src/xeq.c     **** {
4479:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
4480:src/xeq.c     **** 	if (xp == NULL)
4481:src/xeq.c     **** 		return 0;
4482:src/xeq.c     **** 	// set_lift();
4483:src/xeq.c     **** 	UserLocalRegs = LocalRegs;
4484:src/xeq.c     **** 	XromRunning = 1;
4485:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
4486:src/xeq.c     **** 	xeq_xrom();
4487:src/xeq.c     **** 	return 1;
4488:src/xeq.c     **** }
4489:src/xeq.c     **** 
4490:src/xeq.c     **** /*
4491:src/xeq.c     ****  *  Return an integer result from a decimal value, setting flags properly
4492:src/xeq.c     ****  */
4493:src/xeq.c     **** static long long int intResult(decNumber *r) {
 644              		.loc 1 4493 46 is_stmt 1 view -0
ARM GAS  /tmp/ccQlyisH.s 			page 93


 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 80
 647              		@ frame_needed = 0, uses_anonymous_args = 0
4494:src/xeq.c     **** 	unsigned long long int i;
 648              		.loc 1 4494 2 view .LVU190
4495:src/xeq.c     **** 	int s;
 649              		.loc 1 4495 2 view .LVU191
4496:src/xeq.c     **** 	decNumber ri, t;
 650              		.loc 1 4496 2 view .LVU192
4497:src/xeq.c     **** 
4498:src/xeq.c     **** 	decNumberRoundDigits(&t, r, 25, DEC_ROUND_HALF_EVEN);
 651              		.loc 1 4498 2 view .LVU193
4493:src/xeq.c     **** 	unsigned long long int i;
 652              		.loc 1 4493 46 is_stmt 0 view .LVU194
 653 0000 30B5     		push	{r4, r5, lr}
 654              		.cfi_def_cfa_offset 12
 655              		.cfi_offset 4, -12
 656              		.cfi_offset 5, -8
 657              		.cfi_offset 14, -4
 658 0002 95B0     		sub	sp, sp, #84
 659              		.cfi_def_cfa_offset 96
 660              		.loc 1 4498 2 view .LVU195
 661 0004 0323     		movs	r3, #3
 662 0006 1922     		movs	r2, #25
4493:src/xeq.c     **** 	unsigned long long int i;
 663              		.loc 1 4493 46 view .LVU196
 664 0008 0146     		mov	r1, r0
 665              		.loc 1 4498 2 view .LVU197
 666 000a 0BA8     		add	r0, sp, #44
 667              	.LVL49:
 668              		.loc 1 4498 2 view .LVU198
 669 000c FFF7FEFF 		bl	decNumberRoundDigits
 670              	.LVL50:
4499:src/xeq.c     **** 	decNumberTrunc(&ri, &t);
 671              		.loc 1 4499 2 is_stmt 1 view .LVU199
 672 0010 0BA9     		add	r1, sp, #44
 673 0012 02A8     		add	r0, sp, #8
 674 0014 FFF7FEFF 		bl	decNumberTrunc
 675              	.LVL51:
4500:src/xeq.c     **** 	set_carry(dn_eq(&ri, &t) ? 0 : 1);
 676              		.loc 1 4500 2 view .LVU200
 677              		.loc 1 4500 12 is_stmt 0 view .LVU201
 678 0018 0BA9     		add	r1, sp, #44
 679 001a 02A8     		add	r0, sp, #8
 680 001c FFF7FEFF 		bl	dn_eq
 681              	.LVL52:
 682              		.loc 1 4500 2 view .LVU202
 683 0020 B0FA80F0 		clz	r0, r0
 684 0024 4009     		lsrs	r0, r0, #5
 685 0026 FFF7FEFF 		bl	set_carry
 686              	.LVL53:
4501:src/xeq.c     **** 
4502:src/xeq.c     **** 	if (decNumberIsNaN(&t)) {
 687              		.loc 1 4502 2 is_stmt 1 view .LVU203
 688              		.loc 1 4502 6 is_stmt 0 view .LVU204
 689 002a 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 690              		.loc 1 4502 5 view .LVU205
ARM GAS  /tmp/ccQlyisH.s 			page 94


 691 002e 13F0300F 		tst	r3, #48
 692 0032 22D1     		bne	.L67
4503:src/xeq.c     **** 		report_err(ERR_DOMAIN);
4504:src/xeq.c     **** 		return 0;
4505:src/xeq.c     **** 	}
4506:src/xeq.c     **** 	if (decNumberIsSpecial(&t)) {
 693              		.loc 1 4506 2 is_stmt 1 view .LVU206
 694              		.loc 1 4506 5 is_stmt 0 view .LVU207
 695 0034 13F0700F 		tst	r3, #112
 696 0038 18D1     		bne	.L68
4507:src/xeq.c     **** 		set_overflow(1);
4508:src/xeq.c     **** 		return 0;
4509:src/xeq.c     **** 	}
4510:src/xeq.c     **** 	i = dn_to_ull(&ri, &s);
 697              		.loc 1 4510 2 is_stmt 1 view .LVU208
 698              		.loc 1 4510 6 is_stmt 0 view .LVU209
 699 003a 02A8     		add	r0, sp, #8
 700 003c 01A9     		add	r1, sp, #4
 701 003e FFF7FEFF 		bl	dn_to_ull
 702              	.LVL54:
 703 0042 0C46     		mov	r4, r1
4511:src/xeq.c     **** 	dn_abs(&t, &t);
 704              		.loc 1 4511 2 view .LVU210
 705 0044 0BA9     		add	r1, sp, #44
4510:src/xeq.c     **** 	dn_abs(&t, &t);
 706              		.loc 1 4510 6 view .LVU211
 707 0046 0546     		mov	r5, r0
 708              	.LVL55:
 709              		.loc 1 4511 2 is_stmt 1 view .LVU212
 710 0048 0846     		mov	r0, r1
 711              	.LVL56:
 712              		.loc 1 4511 2 is_stmt 0 view .LVU213
 713 004a FFF7FEFF 		bl	dn_abs
 714              	.LVL57:
4512:src/xeq.c     **** 	set_overflow(check_overflow(i) || dn_ge(&t, &const_2pow64));
 715              		.loc 1 4512 2 is_stmt 1 view .LVU214
 716              		.loc 1 4512 15 is_stmt 0 view .LVU215
 717 004e 2846     		mov	r0, r5
 718 0050 2146     		mov	r1, r4
 719 0052 FFF7FEFF 		bl	check_overflow
 720              	.LVL58:
 721              		.loc 1 4512 2 view .LVU216
 722 0056 E8B1     		cbz	r0, .L69
 723 0058 0120     		movs	r0, #1
 724              	.L63:
 725              		.loc 1 4512 2 discriminator 6 view .LVU217
 726 005a FFF7FEFF 		bl	set_overflow
 727              	.LVL59:
4513:src/xeq.c     **** 	return build_value(i, s);
 728              		.loc 1 4513 2 is_stmt 1 discriminator 6 view .LVU218
 729              		.loc 1 4513 9 is_stmt 0 discriminator 6 view .LVU219
 730 005e 019A     		ldr	r2, [sp, #4]
 731 0060 2846     		mov	r0, r5
 732 0062 2146     		mov	r1, r4
 733 0064 FFF7FEFF 		bl	build_value
 734              	.LVL60:
4514:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 95


 735              		.loc 1 4514 1 discriminator 6 view .LVU220
 736 0068 15B0     		add	sp, sp, #84
 737              		.cfi_remember_state
 738              		.cfi_def_cfa_offset 12
 739              		@ sp needed
 740 006a 30BD     		pop	{r4, r5, pc}
 741              	.LVL61:
 742              	.L68:
 743              		.cfi_restore_state
4507:src/xeq.c     **** 		return 0;
 744              		.loc 1 4507 3 is_stmt 1 view .LVU221
 745 006c 0120     		movs	r0, #1
 746 006e FFF7FEFF 		bl	set_overflow
 747              	.LVL62:
4508:src/xeq.c     **** 	}
 748              		.loc 1 4508 3 view .LVU222
4508:src/xeq.c     **** 	}
 749              		.loc 1 4508 10 is_stmt 0 view .LVU223
 750 0072 0020     		movs	r0, #0
 751 0074 0146     		mov	r1, r0
 752              		.loc 1 4514 1 view .LVU224
 753 0076 15B0     		add	sp, sp, #84
 754              		.cfi_remember_state
 755              		.cfi_def_cfa_offset 12
 756              		@ sp needed
 757 0078 30BD     		pop	{r4, r5, pc}
 758              	.L67:
 759              		.cfi_restore_state
4503:src/xeq.c     **** 		return 0;
 760              		.loc 1 4503 3 is_stmt 1 view .LVU225
 761              	.LVL63:
 762              	.LBB1331:
 763              	.LBI1331:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 764              		.loc 1 537 5 view .LVU226
 765              	.LBB1332:
 538:src/xeq.c     **** 		Error = e;
 766              		.loc 1 538 2 view .LVU227
 538:src/xeq.c     **** 		Error = e;
 767              		.loc 1 538 12 is_stmt 0 view .LVU228
 768 007a 0A4B     		ldr	r3, .L70
 538:src/xeq.c     **** 		Error = e;
 769              		.loc 1 538 5 view .LVU229
 770 007c 1A68     		ldr	r2, [r3]
 771 007e 2AB9     		cbnz	r2, .L64
 772              	.LVL64:
 773              	.LBB1333:
 774              	.LBI1333:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 775              		.loc 1 537 5 is_stmt 1 view .LVU230
 776              	.LBB1334:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 777              		.loc 1 539 3 view .LVU231
 778              	.LBE1334:
 779              	.LBE1333:
 780              	.LBE1332:
 781              	.LBE1331:
ARM GAS  /tmp/ccQlyisH.s 			page 96


4504:src/xeq.c     **** 	}
 782              		.loc 1 4504 10 is_stmt 0 view .LVU232
 783 0080 0020     		movs	r0, #0
 784              	.LBB1341:
 785              	.LBB1339:
 786              	.LBB1337:
 787              	.LBB1335:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 788              		.loc 1 539 9 view .LVU233
 789 0082 0122     		movs	r2, #1
 790              	.LBE1335:
 791              	.LBE1337:
 792              	.LBE1339:
 793              	.LBE1341:
4504:src/xeq.c     **** 	}
 794              		.loc 1 4504 10 view .LVU234
 795 0084 0146     		mov	r1, r0
 796              	.LBB1342:
 797              	.LBB1340:
 798              	.LBB1338:
 799              	.LBB1336:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 800              		.loc 1 539 9 view .LVU235
 801 0086 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 802              		.loc 1 540 3 is_stmt 1 view .LVU236
 803              	.LBE1336:
 804              	.LBE1338:
 805              	.LBE1340:
 806              	.LBE1342:
 807              		.loc 1 4514 1 is_stmt 0 view .LVU237
 808 0088 15B0     		add	sp, sp, #84
 809              		.cfi_remember_state
 810              		.cfi_def_cfa_offset 12
 811              		@ sp needed
 812 008a 30BD     		pop	{r4, r5, pc}
 813              	.LVL65:
 814              	.L64:
 815              		.cfi_restore_state
4504:src/xeq.c     **** 	}
 816              		.loc 1 4504 10 view .LVU238
 817 008c 0020     		movs	r0, #0
 818 008e 0146     		mov	r1, r0
 819              	.LVL66:
 820              		.loc 1 4514 1 view .LVU239
 821 0090 15B0     		add	sp, sp, #84
 822              		.cfi_remember_state
 823              		.cfi_def_cfa_offset 12
 824              		@ sp needed
 825 0092 30BD     		pop	{r4, r5, pc}
 826              	.LVL67:
 827              	.L69:
 828              		.cfi_restore_state
4512:src/xeq.c     **** 	return build_value(i, s);
 829              		.loc 1 4512 36 discriminator 2 view .LVU240
 830 0094 0449     		ldr	r1, .L70+4
 831 0096 0BA8     		add	r0, sp, #44
ARM GAS  /tmp/ccQlyisH.s 			page 97


 832 0098 FFF7FEFF 		bl	dn_lt
 833              	.LVL68:
4512:src/xeq.c     **** 	return build_value(i, s);
 834              		.loc 1 4512 2 discriminator 2 view .LVU241
 835 009c B0FA80F0 		clz	r0, r0
 836 00a0 4009     		lsrs	r0, r0, #5
 837 00a2 DAE7     		b	.L63
 838              	.L71:
 839              		.align	2
 840              	.L70:
 841 00a4 00000000 		.word	Error
 842 00a8 00000000 		.word	const_2pow64
 843              		.cfi_endproc
 844              	.LFE237:
 846              		.section	.text.check_stack_overlap,"ax",%progbits
 847              		.align	1
 848              		.p2align 2,,3
 849              		.syntax unified
 850              		.thumb
 851              		.thumb_func
 852              		.fpu fpv4-sp-d16
 854              	check_stack_overlap:
 855              	.LVL69:
 856              	.LFB146:
2106:src/xeq.c     **** 	const int n = stack_size();
 857              		.loc 1 2106 50 is_stmt 1 view -0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 0, uses_anonymous_args = 0
 861              		@ link register save eliminated.
2107:src/xeq.c     **** 
 862              		.loc 1 2107 2 view .LVU243
 863              	.LBB1369:
 864              	.LBI1369:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 865              		.loc 1 703 5 view .LVU244
 866              	.LBB1370:
 704:src/xeq.c     **** 		return 4;
 867              		.loc 1 704 2 view .LVU245
 704:src/xeq.c     **** 		return 4;
 868              		.loc 1 704 8 is_stmt 0 view .LVU246
 869 0000 194B     		ldr	r3, .L83
 870 0002 1A68     		ldr	r2, [r3]
 704:src/xeq.c     **** 		return 4;
 871              		.loc 1 704 6 view .LVU247
 872 0004 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 873              		.loc 1 704 5 view .LVU248
 874 0008 1B07     		lsls	r3, r3, #28
 875              	.LBE1370:
 876              	.LBE1369:
2106:src/xeq.c     **** 	const int n = stack_size();
 877              		.loc 1 2106 50 view .LVU249
 878 000a 30B4     		push	{r4, r5}
 879              		.cfi_def_cfa_offset 8
 880              		.cfi_offset 4, -8
 881              		.cfi_offset 5, -4
ARM GAS  /tmp/ccQlyisH.s 			page 98


 882              	.LBB1375:
 883              	.LBB1373:
 704:src/xeq.c     **** 		return 4;
 884              		.loc 1 704 5 view .LVU250
 885 000c 25D5     		bpl	.L77
 886              	.LBB1371:
 887              	.LBI1371:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 888              		.loc 1 182 5 is_stmt 1 view .LVU251
 889              	.LBB1372:
 183:src/xeq.c     **** }
 890              		.loc 1 183 2 view .LVU252
 183:src/xeq.c     **** }
 891              		.loc 1 183 9 is_stmt 0 view .LVU253
 892 000e B2F8E037 		ldrh	r3, [r2, #2016]
 893              	.LBE1372:
 894              	.LBE1371:
 704:src/xeq.c     **** 		return 4;
 895              		.loc 1 704 27 view .LVU254
 896 0012 9B0B     		lsrs	r3, r3, #14
 897 0014 032B     		cmp	r3, #3
 898 0016 1BD0     		beq	.L82
 899              	.L79:
 900 0018 0823     		movs	r3, #8
 706:src/xeq.c     **** }
 901              		.loc 1 706 9 view .LVU255
 902 001a 1C46     		mov	r4, r3
 903              	.L73:
 904              	.LVL70:
 706:src/xeq.c     **** }
 905              		.loc 1 706 9 view .LVU256
 906              	.LBE1373:
 907              	.LBE1375:
2109:src/xeq.c     **** 		return n;
 908              		.loc 1 2109 2 is_stmt 1 view .LVU257
 909              	.LBB1376:
 910              	.LBB1377:
 911              	.LBB1378:
 912              	.LBB1379:
 913              	.LBB1380:
1088:src/xeq.c     **** }
 914              		.loc 1 1088 24 is_stmt 0 view .LVU258
 915 001c B2F8E857 		ldrh	r5, [r2, #2024]
 916              	.LBE1380:
 917              	.LBE1379:
 918              	.LBB1383:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 919              		.loc 1 240 24 view .LVU259
 920 0020 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 921              	.LBE1383:
 922              	.LBB1384:
 923              	.LBB1381:
1088:src/xeq.c     **** }
 924              		.loc 1 1088 24 view .LVU260
 925 0024 44F20101 		movw	r1, #16385
 926              	.LBE1381:
 927              	.LBE1384:
ARM GAS  /tmp/ccQlyisH.s 			page 99


 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 928              		.loc 1 239 5 view .LVU261
 929 0028 2940     		ands	r1, r1, r5
 930 002a B1F5804F 		cmp	r1, #16384
 931              	.LBB1385:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 932              		.loc 1 240 13 view .LVU262
 933 002e 08BF     		it	eq
 934 0030 0C3A     		subeq	r2, r2, #12
 935              	.LBE1385:
 936              	.LBE1378:
 937              	.LBE1377:
 938              	.LBE1376:
2109:src/xeq.c     **** 		return n;
 939              		.loc 1 2109 10 view .LVU263
 940 0032 0344     		add	r3, r3, r0
 941              	.LBB1390:
 942              	.LBI1376:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 943              		.loc 1 250 14 is_stmt 1 view .LVU264
 944              	.LBE1390:
 251:src/xeq.c     **** }
 945              		.loc 1 251 2 view .LVU265
 946              	.LVL71:
 947              	.LBB1391:
 948              	.LBB1389:
 949              	.LBI1377:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 950              		.loc 1 238 14 view .LVU266
 951              	.LBB1388:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 952              		.loc 1 239 2 view .LVU267
 953              	.LBB1386:
 954              	.LBI1379:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 955              		.loc 1 1087 5 view .LVU268
 956              	.LBB1382:
1088:src/xeq.c     **** }
 957              		.loc 1 1088 2 view .LVU269
 958              	.LBE1382:
 959              	.LBE1386:
 960              	.LBB1387:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 961              		.loc 1 240 3 view .LVU270
 241:src/xeq.c     **** 	}
 962              		.loc 1 241 3 view .LVU271
 241:src/xeq.c     **** 	}
 963              		.loc 1 241 67 is_stmt 0 view .LVU272
 964 0034 08BF     		it	eq
 965 0036 5210     		asreq	r2, r2, #1
 966              	.LVL72:
 241:src/xeq.c     **** 	}
 967              		.loc 1 241 67 view .LVU273
 968              	.LBE1387:
 969              	.LBE1388:
 970              	.LBE1389:
 971              	.LBE1391:
ARM GAS  /tmp/ccQlyisH.s 			page 100


2109:src/xeq.c     **** 		return n;
 972              		.loc 1 2109 5 view .LVU274
 973 0038 9342     		cmp	r3, r2
 974 003a 06D9     		bls	.L72
2109:src/xeq.c     **** 		return n;
 975              		.loc 1 2109 31 discriminator 1 view .LVU275
 976 003c 6F28     		cmp	r0, #111
 977 003e 04D8     		bhi	.L72
 978              	.LBB1392:
 979              	.LBI1392:
2106:src/xeq.c     **** 	const int n = stack_size();
 980              		.loc 1 2106 12 is_stmt 1 view .LVU276
 981              	.LVL73:
 982              	.LBB1393:
2112:src/xeq.c     **** 	return 0;
 983              		.loc 1 2112 2 view .LVU277
 984              	.LBB1394:
 985              	.LBI1394:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 986              		.loc 1 537 5 view .LVU278
 987              	.LBB1395:
 538:src/xeq.c     **** 		Error = e;
 988              		.loc 1 538 2 view .LVU279
 538:src/xeq.c     **** 		Error = e;
 989              		.loc 1 538 12 is_stmt 0 view .LVU280
 990 0040 0A4B     		ldr	r3, .L83+4
 991 0042 1C68     		ldr	r4, [r3]
 992              	.LVL74:
 538:src/xeq.c     **** 		Error = e;
 993              		.loc 1 538 5 view .LVU281
 994 0044 64B9     		cbnz	r4, .L80
 995              	.LVL75:
 996              	.LBB1396:
 997              	.LBI1396:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 998              		.loc 1 537 5 is_stmt 1 view .LVU282
 999              	.LBB1397:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1000              		.loc 1 539 3 view .LVU283
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1001              		.loc 1 539 9 is_stmt 0 view .LVU284
 1002 0046 0C22     		movs	r2, #12
 1003 0048 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 1004              		.loc 1 540 3 is_stmt 1 view .LVU285
 1005              	.LVL76:
 1006              	.L72:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 1007              		.loc 1 540 3 is_stmt 0 view .LVU286
 1008              	.LBE1397:
 1009              	.LBE1396:
 1010              	.LBE1395:
 1011              	.LBE1394:
 1012              	.LBE1393:
 1013              	.LBE1392:
2114:src/xeq.c     **** 
 1014              		.loc 1 2114 1 view .LVU287
ARM GAS  /tmp/ccQlyisH.s 			page 101


 1015 004a 2046     		mov	r0, r4
 1016              	.LVL77:
2114:src/xeq.c     **** 
 1017              		.loc 1 2114 1 view .LVU288
 1018 004c 30BC     		pop	{r4, r5}
 1019              		.cfi_remember_state
 1020              		.cfi_restore 5
 1021              		.cfi_restore 4
 1022              		.cfi_def_cfa_offset 0
 1023 004e 7047     		bx	lr
 1024              	.LVL78:
 1025              	.L82:
 1026              		.cfi_restore_state
 1027              	.LBB1401:
 1028              	.LBB1374:
 704:src/xeq.c     **** 		return 4;
 1029              		.loc 1 704 44 view .LVU289
 1030 0050 074B     		ldr	r3, .L83+8
 704:src/xeq.c     **** 		return 4;
 1031              		.loc 1 704 41 view .LVU290
 1032 0052 93F90130 		ldrsb	r3, [r3, #1]
 1033 0056 002B     		cmp	r3, #0
 1034 0058 DEDB     		blt	.L79
 1035              	.L77:
 1036 005a 0423     		movs	r3, #4
 705:src/xeq.c     **** 	return 8;
 1037              		.loc 1 705 10 view .LVU291
 1038 005c 1C46     		mov	r4, r3
 1039 005e DDE7     		b	.L73
 1040              	.LVL79:
 1041              	.L80:
 705:src/xeq.c     **** 	return 8;
 1042              		.loc 1 705 10 view .LVU292
 1043              	.LBE1374:
 1044              	.LBE1401:
 1045              	.LBB1402:
 1046              	.LBB1400:
 1047              	.LBB1399:
 1048              	.LBB1398:
 1049 0060 0024     		movs	r4, #0
 1050              	.LVL80:
 705:src/xeq.c     **** 	return 8;
 1051              		.loc 1 705 10 view .LVU293
 1052              	.LBE1398:
 1053              	.LBE1399:
 1054              	.LBE1400:
 1055              	.LBE1402:
2114:src/xeq.c     **** 
 1056              		.loc 1 2114 1 view .LVU294
 1057 0062 2046     		mov	r0, r4
 1058              	.LVL81:
2114:src/xeq.c     **** 
 1059              		.loc 1 2114 1 view .LVU295
 1060 0064 30BC     		pop	{r4, r5}
 1061              		.cfi_restore 5
 1062              		.cfi_restore 4
 1063              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccQlyisH.s 			page 102


 1064 0066 7047     		bx	lr
 1065              	.L84:
 1066              		.align	2
 1067              	.L83:
 1068 0068 00000000 		.word	main_ram
 1069 006c 00000000 		.word	Error
 1070 0070 00000000 		.word	XromParams
 1071              		.cfi_endproc
 1072              	.LFE146:
 1074              		.section	.text.is_xrom,"ax",%progbits
 1075              		.align	1
 1076              		.p2align 2,,3
 1077              		.global	is_xrom
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1081              		.fpu fpv4-sp-d16
 1083              	is_xrom:
 1084              	.LFB3:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 1085              		.loc 1 182 19 is_stmt 1 view -0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 0
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 1089              		@ link register save eliminated.
 183:src/xeq.c     **** }
 1090              		.loc 1 183 2 view .LVU297
 183:src/xeq.c     **** }
 1091              		.loc 1 183 9 is_stmt 0 view .LVU298
 1092 0000 054B     		ldr	r3, .L86
 1093 0002 1B68     		ldr	r3, [r3]
 1094 0004 B3F8E007 		ldrh	r0, [r3, #2016]
 1095 0008 800B     		lsrs	r0, r0, #14
 184:src/xeq.c     **** 
 1096              		.loc 1 184 1 view .LVU299
 1097 000a A0F10300 		sub	r0, #3
 1098 000e B0FA80F0 		clz	r0, r0
 1099 0012 4009     		lsrs	r0, r0, #5
 1100 0014 7047     		bx	lr
 1101              	.L87:
 1102 0016 00BF     		.align	2
 1103              	.L86:
 1104 0018 00000000 		.word	main_ram
 1105              		.cfi_endproc
 1106              	.LFE3:
 1108              		.section	.text.move_retstk,"ax",%progbits
 1109              		.align	1
 1110              		.p2align 2,,3
 1111              		.global	move_retstk
 1112              		.syntax unified
 1113              		.thumb
 1114              		.thumb_func
 1115              		.fpu fpv4-sp-d16
 1117              	move_retstk:
 1118              	.LVL82:
 1119              	.LFB4:
 193:src/xeq.c     **** #ifndef REALBUILD
ARM GAS  /tmp/ccQlyisH.s 			page 103


 1120              		.loc 1 193 1 is_stmt 1 view -0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 196:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1124              		.loc 1 196 2 view .LVU301
 196:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1125              		.loc 1 196 6 is_stmt 0 view .LVU302
 1126 0000 1A4B     		ldr	r3, .L99
 196:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1127              		.loc 1 196 5 view .LVU303
 1128 0002 93F90130 		ldrsb	r3, [r3, #1]
 1129 0006 002B     		cmp	r3, #0
 1130 0008 25DB     		blt	.L97
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1131              		.loc 1 201 2 is_stmt 1 view .LVU304
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1132              		.loc 1 201 19 is_stmt 0 view .LVU305
 1133 000a 194B     		ldr	r3, .L99+4
 193:src/xeq.c     **** #ifndef REALBUILD
 1134              		.loc 1 193 1 view .LVU306
 1135 000c 70B5     		push	{r4, r5, r6, lr}
 1136              		.cfi_def_cfa_offset 16
 1137              		.cfi_offset 4, -16
 1138              		.cfi_offset 5, -12
 1139              		.cfi_offset 6, -8
 1140              		.cfi_offset 14, -4
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1141              		.loc 1 201 19 view .LVU307
 1142 000e 1A68     		ldr	r2, [r3]
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1143              		.loc 1 201 17 view .LVU308
 1144 0010 184D     		ldr	r5, .L99+8
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1145              		.loc 1 201 19 view .LVU309
 1146 0012 B2F9E217 		ldrsh	r1, [r2, #2018]
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1147              		.loc 1 201 17 view .LVU310
 1148 0016 2B68     		ldr	r3, [r5]
 1149 0018 0B44     		add	r3, r3, r1
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1150              		.loc 1 201 5 view .LVU311
 1151 001a C342     		cmn	r3, r0
 1152 001c 0446     		mov	r4, r0
 1153 001e 13D4     		bmi	.L98
 205:src/xeq.c     **** 	RetStk += distance;
 1154              		.loc 1 205 2 is_stmt 1 view .LVU312
 1155 0020 154E     		ldr	r6, .L99+12
 1156 0022 3368     		ldr	r3, [r6]
 205:src/xeq.c     **** 	RetStk += distance;
 1157              		.loc 1 205 27 is_stmt 0 view .LVU313
 1158 0024 0818     		adds	r0, r1, r0
 1159              	.LVL83:
 205:src/xeq.c     **** 	RetStk += distance;
 1160              		.loc 1 205 60 view .LVU314
 1161 0026 4A42     		rsbs	r2, r1, #0
 205:src/xeq.c     **** 	RetStk += distance;
ARM GAS  /tmp/ccQlyisH.s 			page 104


 1162              		.loc 1 205 2 view .LVU315
 1163 0028 03EB4000 		add	r0, r3, r0, lsl #1
 1164 002c 03EB4101 		add	r1, r3, r1, lsl #1
 1165 0030 5200     		lsls	r2, r2, #1
 1166 0032 FFF7FEFF 		bl	xcopy
 1167              	.LVL84:
 206:src/xeq.c     **** 	RetStkSize += distance;
 1168              		.loc 1 206 2 is_stmt 1 view .LVU316
 206:src/xeq.c     **** 	RetStkSize += distance;
 1169              		.loc 1 206 9 is_stmt 0 view .LVU317
 1170 0036 3368     		ldr	r3, [r6]
 207:src/xeq.c     **** 	return 0;
 1171              		.loc 1 207 13 view .LVU318
 1172 0038 2868     		ldr	r0, [r5]
 206:src/xeq.c     **** 	RetStkSize += distance;
 1173              		.loc 1 206 9 view .LVU319
 1174 003a 03EB4403 		add	r3, r3, r4, lsl #1
 207:src/xeq.c     **** 	return 0;
 1175              		.loc 1 207 13 view .LVU320
 1176 003e 2044     		add	r0, r0, r4
 1177 0040 2860     		str	r0, [r5]
 206:src/xeq.c     **** 	RetStkSize += distance;
 1178              		.loc 1 206 9 view .LVU321
 1179 0042 3360     		str	r3, [r6]
 207:src/xeq.c     **** 	return 0;
 1180              		.loc 1 207 2 is_stmt 1 view .LVU322
 208:src/xeq.c     **** }
 1181              		.loc 1 208 2 view .LVU323
 208:src/xeq.c     **** }
 1182              		.loc 1 208 9 is_stmt 0 view .LVU324
 1183 0044 0020     		movs	r0, #0
 209:src/xeq.c     **** 
 1184              		.loc 1 209 1 view .LVU325
 1185 0046 70BD     		pop	{r4, r5, r6, pc}
 1186              	.LVL85:
 1187              	.L98:
 202:src/xeq.c     **** 		return 1;
 1188              		.loc 1 202 3 is_stmt 1 view .LVU326
 1189              	.LBB1415:
 1190              	.LBI1415:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1191              		.loc 1 537 5 view .LVU327
 1192              	.LBB1416:
 538:src/xeq.c     **** 		Error = e;
 1193              		.loc 1 538 2 view .LVU328
 538:src/xeq.c     **** 		Error = e;
 1194              		.loc 1 538 12 is_stmt 0 view .LVU329
 1195 0048 0C4B     		ldr	r3, .L99+16
 538:src/xeq.c     **** 		Error = e;
 1196              		.loc 1 538 5 view .LVU330
 1197 004a 1A68     		ldr	r2, [r3]
 1198 004c 52B9     		cbnz	r2, .L93
 1199              	.LVL86:
 1200              	.LBB1417:
 1201              	.LBI1417:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1202              		.loc 1 537 5 is_stmt 1 view .LVU331
ARM GAS  /tmp/ccQlyisH.s 			page 105


 1203              	.LBB1418:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1204              		.loc 1 539 3 view .LVU332
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1205              		.loc 1 539 9 is_stmt 0 view .LVU333
 1206 004e 0B22     		movs	r2, #11
 1207 0050 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 1208              		.loc 1 540 3 is_stmt 1 view .LVU334
 1209              	.LBE1418:
 1210              	.LBE1417:
 1211              	.LBE1416:
 1212              	.LBE1415:
 203:src/xeq.c     **** 	}
 1213              		.loc 1 203 10 is_stmt 0 view .LVU335
 1214 0052 0120     		movs	r0, #1
 1215              	.LVL87:
 209:src/xeq.c     **** 
 1216              		.loc 1 209 1 view .LVU336
 1217 0054 70BD     		pop	{r4, r5, r6, pc}
 1218              	.LVL88:
 1219              	.L97:
 1220              		.cfi_def_cfa_offset 0
 1221              		.cfi_restore 4
 1222              		.cfi_restore 5
 1223              		.cfi_restore 6
 1224              		.cfi_restore 14
 1225              	.LBB1420:
 1226              	.LBI1420:
 192:src/xeq.c     **** {
 1227              		.loc 1 192 5 is_stmt 1 view .LVU337
 192:src/xeq.c     **** {
 1228              		.loc 1 192 5 is_stmt 0 view .LVU338
 1229              	.LBE1420:
 197:src/xeq.c     **** 		return 1;
 1230              		.loc 1 197 3 is_stmt 1 view .LVU339
 1231              	.LBB1427:
 1232              	.LBB1421:
 1233              	.LBI1421:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1234              		.loc 1 537 5 view .LVU340
 1235              	.LBB1422:
 538:src/xeq.c     **** 		Error = e;
 1236              		.loc 1 538 2 view .LVU341
 538:src/xeq.c     **** 		Error = e;
 1237              		.loc 1 538 12 is_stmt 0 view .LVU342
 1238 0056 094B     		ldr	r3, .L99+16
 538:src/xeq.c     **** 		Error = e;
 1239              		.loc 1 538 5 view .LVU343
 1240 0058 1A68     		ldr	r2, [r3]
 1241 005a 2AB9     		cbnz	r2, .L92
 1242              	.LVL89:
 1243              	.LBB1423:
 1244              	.LBI1423:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1245              		.loc 1 537 5 is_stmt 1 view .LVU344
 1246              	.LBB1424:
ARM GAS  /tmp/ccQlyisH.s 			page 106


 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1247              		.loc 1 539 3 view .LVU345
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1248              		.loc 1 539 9 is_stmt 0 view .LVU346
 1249 005c 0722     		movs	r2, #7
 1250 005e 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 1251              		.loc 1 540 3 is_stmt 1 view .LVU347
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1252              		.loc 1 539 9 is_stmt 0 view .LVU348
 1253 0060 0120     		movs	r0, #1
 1254              	.LVL90:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1255              		.loc 1 539 9 view .LVU349
 1256 0062 7047     		bx	lr
 1257              	.LVL91:
 1258              	.L93:
 1259              		.cfi_def_cfa_offset 16
 1260              		.cfi_offset 4, -16
 1261              		.cfi_offset 5, -12
 1262              		.cfi_offset 6, -8
 1263              		.cfi_offset 14, -4
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1264              		.loc 1 539 9 view .LVU350
 1265              	.LBE1424:
 1266              	.LBE1423:
 1267              	.LBE1422:
 1268              	.LBE1421:
 1269              	.LBE1427:
 1270              	.LBB1428:
 1271              	.LBB1419:
 1272 0064 0120     		movs	r0, #1
 1273              	.LVL92:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1274              		.loc 1 539 9 view .LVU351
 1275              	.LBE1419:
 1276              	.LBE1428:
 209:src/xeq.c     **** 
 1277              		.loc 1 209 1 view .LVU352
 1278 0066 70BD     		pop	{r4, r5, r6, pc}
 1279              	.LVL93:
 1280              	.L92:
 1281              		.cfi_def_cfa_offset 0
 1282              		.cfi_restore 4
 1283              		.cfi_restore 5
 1284              		.cfi_restore 6
 1285              		.cfi_restore 14
 1286              	.LBB1429:
 1287              	.LBB1426:
 1288              	.LBB1425:
 209:src/xeq.c     **** 
 1289              		.loc 1 209 1 view .LVU353
 1290 0068 0120     		movs	r0, #1
 1291              	.LVL94:
 209:src/xeq.c     **** 
 1292              		.loc 1 209 1 view .LVU354
 1293              	.LBE1425:
ARM GAS  /tmp/ccQlyisH.s 			page 107


 1294              	.LBE1426:
 1295              	.LBE1429:
 1296 006a 7047     		bx	lr
 1297              	.L100:
 1298              		.align	2
 1299              	.L99:
 1300 006c 00000000 		.word	XromParams
 1301 0070 00000000 		.word	main_ram
 1302 0074 00000000 		.word	RetStkSize
 1303 0078 00000000 		.word	RetStk
 1304 007c 00000000 		.word	Error
 1305              		.cfi_endproc
 1306              	.LFE4:
 1308              		.section	.text.local_levels,"ax",%progbits
 1309              		.align	1
 1310              		.p2align 2,,3
 1311              		.global	local_levels
 1312              		.syntax unified
 1313              		.thumb
 1314              		.thumb_func
 1315              		.fpu fpv4-sp-d16
 1317              	local_levels:
 1318              	.LFB5:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1319              		.loc 1 214 24 is_stmt 1 view -0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 0
 1322              		@ frame_needed = 0, uses_anonymous_args = 0
 1323              		@ link register save eliminated.
 215:src/xeq.c     **** }
 1324              		.loc 1 215 2 view .LVU356
 215:src/xeq.c     **** }
 1325              		.loc 1 215 9 is_stmt 0 view .LVU357
 1326 0000 074B     		ldr	r3, .L105
 1327 0002 1B68     		ldr	r3, [r3]
 1328 0004 B3F9DE37 		ldrsh	r3, [r3, #2014]
 215:src/xeq.c     **** }
 1329              		.loc 1 215 57 view .LVU358
 1330 0008 002B     		cmp	r3, #0
 1331 000a 01DB     		blt	.L104
 1332 000c 0020     		movs	r0, #0
 216:src/xeq.c     **** 
 1333              		.loc 1 216 1 view .LVU359
 1334 000e 7047     		bx	lr
 1335              	.L104:
 215:src/xeq.c     **** }
 1336              		.loc 1 215 25 discriminator 1 view .LVU360
 1337 0010 044A     		ldr	r2, .L105+4
 1338 0012 1268     		ldr	r2, [r2]
 215:src/xeq.c     **** }
 1339              		.loc 1 215 57 discriminator 1 view .LVU361
 1340 0014 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 1341 0018 C0F30B00 		ubfx	r0, r0, #0, #12
 1342 001c 7047     		bx	lr
 1343              	.L106:
 1344 001e 00BF     		.align	2
 1345              	.L105:
ARM GAS  /tmp/ccQlyisH.s 			page 108


 1346 0020 00000000 		.word	main_ram
 1347 0024 00000000 		.word	RetStk
 1348              		.cfi_endproc
 1349              	.LFE5:
 1351              		.section	.text.local_regs_rarg,"ax",%progbits
 1352              		.align	1
 1353              		.p2align 2,,3
 1354              		.global	local_regs_rarg
 1355              		.syntax unified
 1356              		.thumb
 1357              		.thumb_func
 1358              		.fpu fpv4-sp-d16
 1360              	local_regs_rarg:
 1361              	.LVL95:
 1362              	.LFB6:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1363              		.loc 1 222 35 is_stmt 1 view -0
 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
 1367              		@ link register save eliminated.
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1368              		.loc 1 223 2 view .LVU363
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1369              		.loc 1 223 53 is_stmt 0 view .LVU364
 1370 0000 A0F17E03 		sub	r3, r0, #126
 1371 0004 012B     		cmp	r3, #1
 1372 0006 144B     		ldr	r3, .L116
 1373 0008 23D9     		bls	.L113
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1374              		.loc 1 223 53 discriminator 1 view .LVU365
 1375 000a 8028     		cmp	r0, #128
 1376 000c 11D0     		beq	.L114
 1377              	.LBB1430:
 1378              	.LBI1430:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1379              		.loc 1 1087 5 is_stmt 1 view .LVU366
 1380              	.LBB1431:
1088:src/xeq.c     **** }
 1381              		.loc 1 1088 2 view .LVU367
1088:src/xeq.c     **** }
 1382              		.loc 1 1088 12 is_stmt 0 view .LVU368
 1383 000e 1B68     		ldr	r3, [r3]
1088:src/xeq.c     **** }
 1384              		.loc 1 1088 24 view .LVU369
 1385 0010 B3F8E827 		ldrh	r2, [r3, #2024]
 1386 0014 44F20100 		movw	r0, #16385
 1387              	.LVL96:
1088:src/xeq.c     **** }
 1388              		.loc 1 1088 24 view .LVU370
 1389              	.LBE1431:
 1390              	.LBE1430:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1391              		.loc 1 223 73 view .LVU371
 1392 0018 1040     		ands	r0, r0, r2
 1393 001a A0F58040 		sub	r0, r0, #16384
 1394 001e B0FA80F0 		clz	r0, r0
ARM GAS  /tmp/ccQlyisH.s 			page 109


 1395 0022 4009     		lsrs	r0, r0, #5
 1396 0024 0230     		adds	r0, r0, #2
 1397              	.L109:
 224:src/xeq.c     **** }
 1398              		.loc 1 224 2 is_stmt 1 discriminator 8 view .LVU372
 1399              	.LBB1432:
 1400              	.LBI1432:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1401              		.loc 1 214 5 discriminator 8 view .LVU373
 1402              	.LBB1433:
 215:src/xeq.c     **** }
 1403              		.loc 1 215 2 discriminator 8 view .LVU374
 215:src/xeq.c     **** }
 1404              		.loc 1 215 9 is_stmt 0 discriminator 8 view .LVU375
 1405 0026 B3F9DE37 		ldrsh	r3, [r3, #2014]
 215:src/xeq.c     **** }
 1406              		.loc 1 215 57 discriminator 8 view .LVU376
 1407 002a 002B     		cmp	r3, #0
 1408 002c 08DB     		blt	.L115
 1409              	.L112:
 1410 002e 0020     		movs	r0, #0
 1411              	.LBE1433:
 1412              	.LBE1432:
 225:src/xeq.c     **** 
 1413              		.loc 1 225 1 view .LVU377
 1414 0030 7047     		bx	lr
 1415              	.LVL97:
 1416              	.L114:
 225:src/xeq.c     **** 
 1417              		.loc 1 225 1 view .LVU378
 1418 0032 1B68     		ldr	r3, [r3]
 224:src/xeq.c     **** }
 1419              		.loc 1 224 2 is_stmt 1 view .LVU379
 1420              	.LBB1436:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1421              		.loc 1 214 5 view .LVU380
 1422              	.LBB1434:
 215:src/xeq.c     **** }
 1423              		.loc 1 215 2 view .LVU381
 215:src/xeq.c     **** }
 1424              		.loc 1 215 9 is_stmt 0 view .LVU382
 1425 0034 B3F9DE37 		ldrsh	r3, [r3, #2014]
 215:src/xeq.c     **** }
 1426              		.loc 1 215 57 view .LVU383
 1427 0038 002B     		cmp	r3, #0
 1428              	.LBE1434:
 1429              	.LBE1436:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1430              		.loc 1 223 53 view .LVU384
 1431 003a 4FF00300 		mov	r0, #3
 1432              	.LVL98:
 1433              	.LBB1437:
 1434              	.LBB1435:
 215:src/xeq.c     **** }
 1435              		.loc 1 215 57 view .LVU385
 1436 003e F6DA     		bge	.L112
 1437              	.L115:
ARM GAS  /tmp/ccQlyisH.s 			page 110


 215:src/xeq.c     **** }
 1438              		.loc 1 215 25 view .LVU386
 1439 0040 064A     		ldr	r2, .L116+4
 1440 0042 1268     		ldr	r2, [r2]
 215:src/xeq.c     **** }
 1441              		.loc 1 215 57 view .LVU387
 1442 0044 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1443 0048 C3F30B03 		ubfx	r3, r3, #0, #12
 1444 004c 43FA00F0 		asr	r0, r3, r0
 1445 0050 7047     		bx	lr
 1446              	.LVL99:
 1447              	.L113:
 215:src/xeq.c     **** }
 1448              		.loc 1 215 57 view .LVU388
 1449 0052 1B68     		ldr	r3, [r3]
 1450              	.LBE1435:
 1451              	.LBE1437:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1452              		.loc 1 223 53 view .LVU389
 1453 0054 0220     		movs	r0, #2
 1454              	.LVL100:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1455              		.loc 1 223 53 view .LVU390
 1456 0056 E6E7     		b	.L109
 1457              	.L117:
 1458              		.align	2
 1459              	.L116:
 1460 0058 00000000 		.word	main_ram
 1461 005c 00000000 		.word	RetStk
 1462              		.cfi_endproc
 1463              	.LFE6:
 1465              		.section	.text.get_reg_limit,"ax",%progbits
 1466              		.align	1
 1467              		.p2align 2,,3
 1468              		.syntax unified
 1469              		.thumb
 1470              		.thumb_func
 1471              		.fpu fpv4-sp-d16
 1473              	get_reg_limit:
 1474              	.LVL101:
 1475              	.LFB246:
4515:src/xeq.c     **** 
4516:src/xeq.c     **** 
4517:src/xeq.c     **** #ifndef UNIVERSAL_DISPATCH
4518:src/xeq.c     **** 
4519:src/xeq.c     **** 
4520:src/xeq.c     **** /*
4521:src/xeq.c     ****  *  Call a monadic function by reusing the decimal code for integer mode
4522:src/xeq.c     ****  */
4523:src/xeq.c     **** long long int intMonadic(long long int x) {
4524:src/xeq.c     **** 	int s;
4525:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
4526:src/xeq.c     **** 	decNumber rx, r;
4527:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4528:src/xeq.c     **** 
4529:src/xeq.c     **** 	if (isNULL(monfuncs[f].mondreal))
4530:src/xeq.c     **** 		bad_mode_error();
ARM GAS  /tmp/ccQlyisH.s 			page 111


4531:src/xeq.c     **** 	else {
4532:src/xeq.c     **** 		FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4533:src/xeq.c     **** #ifndef REALBUILD
4534:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4535:src/xeq.c     **** 			bad_mode_error();
4536:src/xeq.c     **** 		else 
4537:src/xeq.c     **** #endif
4538:src/xeq.c     **** 		{
4539:src/xeq.c     **** 			ullint_to_dn(&rx, vx);
4540:src/xeq.c     **** 			if (s)
4541:src/xeq.c     **** 				dn_minus(&rx, &rx);
4542:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
4543:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4544:src/xeq.c     **** 			else
4545:src/xeq.c     **** 				return intResult(&r);
4546:src/xeq.c     **** 		}
4547:src/xeq.c     **** 	}
4548:src/xeq.c     **** 	return 0;
4549:src/xeq.c     **** }
4550:src/xeq.c     **** 
4551:src/xeq.c     **** /*
4552:src/xeq.c     ****  *  Call a dyadic function by reusing the decimal code for integer mode
4553:src/xeq.c     ****  */
4554:src/xeq.c     **** long long int intDyadic(long long int y, long long int x) {
4555:src/xeq.c     **** 	int sx, sy;
4556:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4557:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
4558:src/xeq.c     **** 	decNumber rx, ry, r;
4559:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4560:src/xeq.c     **** 
4561:src/xeq.c     **** 	if (isNULL(dyfuncs[f].dydreal))
4562:src/xeq.c     **** 		bad_mode_error();
4563:src/xeq.c     **** 	else {
4564:src/xeq.c     **** 		FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4565:src/xeq.c     **** 
4566:src/xeq.c     **** #ifndef REALBUILD
4567:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4568:src/xeq.c     **** 			bad_mode_error();
4569:src/xeq.c     **** 		else 
4570:src/xeq.c     **** #endif
4571:src/xeq.c     **** 		{
4572:src/xeq.c     **** 			ullint_to_dn(&rx, vx);	if (sx) dn_minus(&rx, &rx);
4573:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
4574:src/xeq.c     **** 
4575:src/xeq.c     **** 			if (NULL == fp(&r, &ry, &rx))
4576:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4577:src/xeq.c     **** 			else
4578:src/xeq.c     **** 				return intResult(&r);
4579:src/xeq.c     **** 		}
4580:src/xeq.c     **** 	}
4581:src/xeq.c     **** 	return 0;
4582:src/xeq.c     **** }
4583:src/xeq.c     **** 
4584:src/xeq.c     **** 
4585:src/xeq.c     **** /* Dispatch routine for niladic functions.
4586:src/xeq.c     ****  */
4587:src/xeq.c     **** static void niladic(const opcode op) {
ARM GAS  /tmp/ccQlyisH.s 			page 112


4588:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
4589:src/xeq.c     **** 
4590:src/xeq.c     **** 	process_cmdline();
4591:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
4592:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
4593:src/xeq.c     **** 			bad_mode_error();
4594:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
4595:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
4596:src/xeq.c     **** 			if (dispatch_xrom(fp))
4597:src/xeq.c     **** 				return;
4598:src/xeq.c     **** 			else {
4599:src/xeq.c     **** 				switch (NILADIC_NUMRESULTS(niladics[idx])) {
4600:src/xeq.c     **** 				case 2:	lift_if_enabled();
4601:src/xeq.c     **** 				case 1:	lift_if_enabled();
4602:src/xeq.c     **** 				default:
4603:src/xeq.c     **** 					fp((enum nilop)idx);
4604:src/xeq.c     **** 					break;
4605:src/xeq.c     **** 				}
4606:src/xeq.c     **** 			}
4607:src/xeq.c     **** 		}
4608:src/xeq.c     **** 	} else
4609:src/xeq.c     **** 		illegal(op);
4610:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
4611:src/xeq.c     **** #ifdef ENTRY_RPN
4612:src/xeq.c     **** 	if (idx != OP_rCLX) // in entry_rpn mode, lift must be on after enter so the second part below isn
4613:src/xeq.c     **** #else
4614:src/xeq.c     **** 	if ( (idx != OP_rCLX) && ( ((idx != OP_CENTER) ) && (C_LOCKED) ) ) // don't turn on lift after CEN
4615:src/xeq.c     **** #endif
4616:src/xeq.c     **** #else
4617:src/xeq.c     **** 	if (idx != OP_rCLX) // normally, just don't turn on lift after CLX
4618:src/xeq.c     **** #endif
4619:src/xeq.c     **** 		set_lift();
4620:src/xeq.c     **** }
4621:src/xeq.c     **** 
4622:src/xeq.c     **** 
4623:src/xeq.c     **** /* Dispatch routine for monadic operations.
4624:src/xeq.c     ****  * Since these functions take an argument from the X register, save it in
4625:src/xeq.c     ****  * lastx and then replace it with their result, we can factor out the common
4626:src/xeq.c     ****  * stack manipulatin code.
4627:src/xeq.c     ****  */
4628:src/xeq.c     **** static void monadic(const opcode op)
4629:src/xeq.c     **** {
4630:src/xeq.c     **** 	unsigned int f;
4631:src/xeq.c     **** 	process_cmdline_set_lift();
4632:src/xeq.c     **** 
4633:src/xeq.c     **** 	f = argKIND(op);
4634:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4635:src/xeq.c     **** 		if (is_intmode()) {
4636:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
4637:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
4638:src/xeq.c     **** 				if (dispatch_xrom(fp))
4639:src/xeq.c     **** 					return;
4640:src/xeq.c     **** 				else {
4641:src/xeq.c     **** 					long long int x = getX_int();
4642:src/xeq.c     **** 					x = fp(x);
4643:src/xeq.c     **** 					setlastX();
4644:src/xeq.c     **** 					setX_int(x);
ARM GAS  /tmp/ccQlyisH.s 			page 113


4645:src/xeq.c     **** 				}
4646:src/xeq.c     **** 			} else
4647:src/xeq.c     **** 				bad_mode_error();
4648:src/xeq.c     **** 		} else {
4649:src/xeq.c     **** 			if (! isNULL(monfuncs[f].mondreal)) {
4650:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4651:src/xeq.c     **** 				if (dispatch_xrom(fp))
4652:src/xeq.c     **** 					return;
4653:src/xeq.c     **** 				else {
4654:src/xeq.c     **** 					decNumber x, r;
4655:src/xeq.c     **** 					getX(&x);
4656:src/xeq.c     **** 					if (NULL == fp(&r, &x))
4657:src/xeq.c     **** 						set_NaN(&r);
4658:src/xeq.c     **** 					setlastX();
4659:src/xeq.c     **** 					setX(&r);
4660:src/xeq.c     **** 				}
4661:src/xeq.c     **** 			} else
4662:src/xeq.c     **** 				bad_mode_error();
4663:src/xeq.c     **** 		}
4664:src/xeq.c     **** 	} else
4665:src/xeq.c     **** 		illegal(op);
4666:src/xeq.c     **** }
4667:src/xeq.c     **** 
4668:src/xeq.c     **** static void monadic_cmplex(const opcode op) {
4669:src/xeq.c     **** 	decNumber x, y, rx, ry;
4670:src/xeq.c     **** 	unsigned int f;
4671:src/xeq.c     **** 
4672:src/xeq.c     **** 	process_cmdline_set_lift();
4673:src/xeq.c     **** 
4674:src/xeq.c     **** 	f = argKIND(op);
4675:src/xeq.c     **** 
4676:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4677:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
4678:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
4679:src/xeq.c     **** 			if (dispatch_xrom(fp))
4680:src/xeq.c     **** 				return;
4681:src/xeq.c     **** 			else {
4682:src/xeq.c     **** 				getXY(&x, &y);
4683:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
4684:src/xeq.c     **** 				setlastXY();
4685:src/xeq.c     **** 				setXY(&rx, &ry);
4686:src/xeq.c     **** 				set_was_complex();
4687:src/xeq.c     **** 			}
4688:src/xeq.c     **** 		} else
4689:src/xeq.c     **** 			bad_mode_error();
4690:src/xeq.c     **** 	} else
4691:src/xeq.c     **** 		illegal(op);
4692:src/xeq.c     **** }
4693:src/xeq.c     **** 
4694:src/xeq.c     **** /***************************************************************************
4695:src/xeq.c     ****  * Dyadic function handling.
4696:src/xeq.c     ****  */
4697:src/xeq.c     **** 
4698:src/xeq.c     **** /* Dispatch routine for dyadic operations.
4699:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4700:src/xeq.c     ****  * common stack manipulation.
4701:src/xeq.c     ****  */
ARM GAS  /tmp/ccQlyisH.s 			page 114


4702:src/xeq.c     **** static void dyadic(const opcode op) {
4703:src/xeq.c     **** 
4704:src/xeq.c     **** 	unsigned int f;
4705:src/xeq.c     **** 	process_cmdline_set_lift();
4706:src/xeq.c     **** 
4707:src/xeq.c     **** 	f = argKIND(op);
4708:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4709:src/xeq.c     **** 		if (is_intmode()) {
4710:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
4711:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
4712:src/xeq.c     **** 				if (dispatch_xrom(fp))
4713:src/xeq.c     **** 					return;
4714:src/xeq.c     **** 				else {
4715:src/xeq.c     **** 					long long int x = getX_int();
4716:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4717:src/xeq.c     **** 					x = fp(y, x);
4718:src/xeq.c     **** 					setlastX();
4719:src/xeq.c     **** 					lower();
4720:src/xeq.c     **** 					setX_int(x);
4721:src/xeq.c     **** 				}
4722:src/xeq.c     **** 			} else
4723:src/xeq.c     **** 				bad_mode_error();
4724:src/xeq.c     **** 		} else {
4725:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydreal)) {
4726:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4727:src/xeq.c     **** 				if (dispatch_xrom(fp))
4728:src/xeq.c     **** 					return;
4729:src/xeq.c     **** 				else {
4730:src/xeq.c     **** 					decNumber x, y, r;
4731:src/xeq.c     **** 					getXY(&x, &y);
4732:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
4733:src/xeq.c     **** 						set_NaN(&r);
4734:src/xeq.c     **** 					setlastX();
4735:src/xeq.c     **** 					lower();
4736:src/xeq.c     **** 					setX(&r);
4737:src/xeq.c     **** 				}
4738:src/xeq.c     **** 			} else
4739:src/xeq.c     **** 				bad_mode_error();
4740:src/xeq.c     **** 		}
4741:src/xeq.c     **** 	} else
4742:src/xeq.c     **** 		illegal(op);
4743:src/xeq.c     **** }
4744:src/xeq.c     **** 
4745:src/xeq.c     **** static void dyadic_cmplex(const opcode op) {
4746:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
4747:src/xeq.c     **** 	unsigned int f;
4748:src/xeq.c     **** 
4749:src/xeq.c     **** 	process_cmdline_set_lift();
4750:src/xeq.c     **** 
4751:src/xeq.c     **** 	f = argKIND(op);
4752:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4753:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
4754:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
4755:src/xeq.c     **** 			if (dispatch_xrom(fp))
4756:src/xeq.c     **** 				return;
4757:src/xeq.c     **** 			else {
4758:src/xeq.c     **** 				getXYZT(&x1, &y1, &x2, &y2);
ARM GAS  /tmp/ccQlyisH.s 			page 115


4759:src/xeq.c     **** 
4760:src/xeq.c     **** 				fp(&xr, &yr, &x2, &y2, &x1, &y1);
4761:src/xeq.c     **** 
4762:src/xeq.c     **** 				setlastXY();
4763:src/xeq.c     **** 				lower2();
4764:src/xeq.c     **** 				setXY(&xr, &yr);
4765:src/xeq.c     **** 				set_was_complex();
4766:src/xeq.c     **** 			}
4767:src/xeq.c     **** 		} else
4768:src/xeq.c     **** 			bad_mode_error();
4769:src/xeq.c     **** 	} else
4770:src/xeq.c     **** 		illegal(op);
4771:src/xeq.c     **** }
4772:src/xeq.c     **** 
4773:src/xeq.c     **** /* Dispatch routine for triadic operations.
4774:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4775:src/xeq.c     ****  * common stack manipulation.
4776:src/xeq.c     ****  */
4777:src/xeq.c     **** static void triadic(const opcode op) {
4778:src/xeq.c     **** 	unsigned int f;
4779:src/xeq.c     **** 	process_cmdline_set_lift();
4780:src/xeq.c     **** 
4781:src/xeq.c     **** 	f = argKIND(op);
4782:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
4783:src/xeq.c     **** 		if (is_intmode()) {
4784:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
4785:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
4786:src/xeq.c     **** 				if (dispatch_xrom(fp))
4787:src/xeq.c     **** 					return;
4788:src/xeq.c     **** 				else {
4789:src/xeq.c     **** 					long long int x = getX_int();
4790:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4791:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
4792:src/xeq.c     **** 					x = fp(z, y, x);
4793:src/xeq.c     **** 					setlastX();
4794:src/xeq.c     **** 					lower();
4795:src/xeq.c     **** 					lower();
4796:src/xeq.c     **** 					setX_int(x);
4797:src/xeq.c     **** 				}
4798:src/xeq.c     **** 			} else
4799:src/xeq.c     **** 				bad_mode_error();
4800:src/xeq.c     **** 		} else {
4801:src/xeq.c     **** 			if (! isNULL(trifuncs[f].trireal)) {
4802:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
4803:src/xeq.c     **** 				if (dispatch_xrom(fp))
4804:src/xeq.c     **** 					return;
4805:src/xeq.c     **** 				else {
4806:src/xeq.c     **** 					decNumber x, y, z, r;
4807:src/xeq.c     **** 					getXYZ(&x, &y, &z);
4808:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
4809:src/xeq.c     **** 						set_NaN(&r);
4810:src/xeq.c     **** 					setlastX();
4811:src/xeq.c     **** 					lower();
4812:src/xeq.c     **** 					lower();
4813:src/xeq.c     **** 					setX(&r);
4814:src/xeq.c     **** 				}
4815:src/xeq.c     **** 			} else
ARM GAS  /tmp/ccQlyisH.s 			page 116


4816:src/xeq.c     **** 				bad_mode_error();
4817:src/xeq.c     **** 		}
4818:src/xeq.c     **** 	} else
4819:src/xeq.c     **** 		illegal(op);
4820:src/xeq.c     **** }
4821:src/xeq.c     **** 
4822:src/xeq.c     **** 
4823:src/xeq.c     **** #else // UNIVERSAL_DISPATCH
4824:src/xeq.c     **** 
4825:src/xeq.c     **** 
4826:src/xeq.c     **** /*
4827:src/xeq.c     ****  *  Call functions by reusing the decimal code for integer mode
4828:src/xeq.c     ****  */
4829:src/xeq.c     **** static long long int universal_dispatch_int(long long int y, long long int x, unsigned int dyadic)
4830:src/xeq.c     **** {
4831:src/xeq.c     **** 	int sx, sy;
4832:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4833:src/xeq.c     **** 	unsigned long long int vy;
4834:src/xeq.c     **** 	decNumber rx, ry, r;
4835:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4836:src/xeq.c     **** 	void (*function_pointer)(void);
4837:src/xeq.c     **** 
4838:src/xeq.c     **** #ifdef SHORT_POINTERS
4839:src/xeq.c     **** 	unsigned short compact_pointer;
4840:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4841:src/xeq.c     **** #else
4842:src/xeq.c     **** 	void (*compact_pointer)(void);
4843:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4844:src/xeq.c     **** #endif
4845:src/xeq.c     **** 
4846:src/xeq.c     **** 	if (dyadic) {
4847:src/xeq.c     **** 		vy = extract_value(y, &sy);
4848:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4849:src/xeq.c     **** 	}
4850:src/xeq.c     **** 	else {
4851:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4852:src/xeq.c     **** 	}
4853:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4854:src/xeq.c     **** 		bad_mode_error();
4855:src/xeq.c     **** 	}
4856:src/xeq.c     **** 	else {
4857:src/xeq.c     **** 		function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4858:src/xeq.c     **** #ifndef REALBUILD
4859:src/xeq.c     **** 		if (check_for_xrom_address(function_pointer) != NULL) {
4860:src/xeq.c     **** 			bad_mode_error();
4861:src/xeq.c     **** 		}
4862:src/xeq.c     **** 		else
4863:src/xeq.c     **** #endif
4864:src/xeq.c     **** 		{
4865:src/xeq.c     **** 			void *result;
4866:src/xeq.c     **** 
4867:src/xeq.c     **** 			ullint_to_dn(&rx, vx);		if (sx) dn_minus(&rx, &rx);
4868:src/xeq.c     **** 			if (dyadic) {
4869:src/xeq.c     **** 				ullint_to_dn(&ry, vy);		if (sy) dn_minus(&ry, &ry);
4870:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r, &ry, &rx);
4871:src/xeq.c     **** 			}
4872:src/xeq.c     **** 			else {
ARM GAS  /tmp/ccQlyisH.s 			page 117


4873:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r, &rx);
4874:src/xeq.c     **** 			}
4875:src/xeq.c     **** 			if (NULL == result) {
4876:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4877:src/xeq.c     **** 			}
4878:src/xeq.c     **** 			else {
4879:src/xeq.c     **** 				return intResult(&r);
4880:src/xeq.c     **** 			}
4881:src/xeq.c     **** 		}
4882:src/xeq.c     **** 	}
4883:src/xeq.c     **** 	return 0;
4884:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
4885:src/xeq.c     **** }
4886:src/xeq.c     **** 
4887:src/xeq.c     **** 
4888:src/xeq.c     **** long long int intMonadic(long long int x)
4889:src/xeq.c     **** {
4890:src/xeq.c     **** 	return universal_dispatch_int(0, x, 0);
4891:src/xeq.c     **** }
4892:src/xeq.c     **** 
4893:src/xeq.c     **** long long int intDyadic(long long int y, long long int x)
4894:src/xeq.c     **** {
4895:src/xeq.c     **** 	return universal_dispatch_int(y, x, 1);
4896:src/xeq.c     **** }
4897:src/xeq.c     **** 
4898:src/xeq.c     **** 
4899:src/xeq.c     **** /*
4900:src/xeq.c     ****  *  Universal dispatch function for niladic, monadic, dyadic and triadic functions, both real and c
4901:src/xeq.c     ****  */
4902:src/xeq.c     **** static void universal_dispatch(const opcode op, const unsigned int operands, const unsigned int com
4903:src/xeq.c     **** {
4904:src/xeq.c     **** 	const int intmode = is_intmode();
4905:src/xeq.c     **** 	volatile long long int ix; // declared volatile to avoid bogus warning about variable possibly bei
4906:src/xeq.c     **** 	const unsigned int f = argKIND(op);
4907:src/xeq.c     **** 	void (*function_pointer)(void);
4908:src/xeq.c     **** 
4909:src/xeq.c     **** #ifdef SHORT_POINTERS
4910:src/xeq.c     **** 	unsigned short compact_pointer;
4911:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4912:src/xeq.c     **** #else
4913:src/xeq.c     **** 	void (*compact_pointer)(void);
4914:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4915:src/xeq.c     **** #endif
4916:src/xeq.c     **** 
4917:src/xeq.c     **** 	process_cmdline();
4918:src/xeq.c     **** 	if (operands != 0) {
4919:src/xeq.c     **** 		set_lift();
4920:src/xeq.c     **** 	}
4921:src/xeq.c     **** 	switch (operands) {
4922:src/xeq.c     **** 	default:
4923:src/xeq.c     **** 	case 0:
4924:src/xeq.c     **** 		if (f >= NUM_NILADIC) {
4925:src/xeq.c     **** illegal:
4926:src/xeq.c     **** 			illegal(op);
4927:src/xeq.c     **** 			goto finish_niladic;
4928:src/xeq.c     **** 		}
4929:src/xeq.c     **** 		if (intmode && NILADIC_NOTINT(niladics[f])) {
ARM GAS  /tmp/ccQlyisH.s 			page 118


4930:src/xeq.c     **** 			goto bad_mode;
4931:src/xeq.c     **** 		}
4932:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)niladics[f].niladicf;
4933:src/xeq.c     **** 		break;
4934:src/xeq.c     **** 
4935:src/xeq.c     **** 	case 1:
4936:src/xeq.c     **** 		if (f >= NUM_MONADIC)
4937:src/xeq.c     **** 			goto illegal;
4938:src/xeq.c     **** 		if (intmode)
4939:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].monint;
4940:src/xeq.c     **** 		else if (complex)
4941:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondcmplx;
4942:src/xeq.c     **** 		else
4943:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4944:src/xeq.c     **** 		break;
4945:src/xeq.c     **** 
4946:src/xeq.c     **** 	case 2:
4947:src/xeq.c     **** 		if (f >= NUM_DYADIC)
4948:src/xeq.c     **** 			goto illegal;
4949:src/xeq.c     **** 		if (intmode)
4950:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydint;
4951:src/xeq.c     **** 		else if (complex)
4952:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydcmplx;
4953:src/xeq.c     **** 		else
4954:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4955:src/xeq.c     **** 		break;
4956:src/xeq.c     **** 
4957:src/xeq.c     **** 	case 3:
4958:src/xeq.c     **** 		if (f >= NUM_TRIADIC)
4959:src/xeq.c     **** 			goto illegal;
4960:src/xeq.c     **** 		if (intmode)
4961:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].triint;
4962:src/xeq.c     **** 		else
4963:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].trireal;
4964:src/xeq.c     **** 		break;
4965:src/xeq.c     **** 	}
4966:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4967:src/xeq.c     **** 		if (operands != 0) {
4968:src/xeq.c     **** 			// The original niladic() function doesn't invoke
4969:src/xeq.c     **** 			// bad_mode_error() if the function pointer is null.
4970:src/xeq.c     **** 			// TODO:  Verify that this behavior is really needed.
4971:src/xeq.c     **** bad_mode:
4972:src/xeq.c     **** 			bad_mode_error();
4973:src/xeq.c     **** 		}
4974:src/xeq.c     **** 		goto finish_niladic;
4975:src/xeq.c     **** 	}
4976:src/xeq.c     **** 	function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4977:src/xeq.c     **** 	if (dispatch_xrom(function_pointer)) {
4978:src/xeq.c     **** 		return;
4979:src/xeq.c     **** 	}
4980:src/xeq.c     **** 	if (operands == 0) {
4981:src/xeq.c     **** 		switch (NILADIC_NUMRESULTS(niladics[f])) {
4982:src/xeq.c     **** 		case 2:		lift_if_enabled(); // fall through
4983:src/xeq.c     **** 		case 1:		lift_if_enabled(); break;
4984:src/xeq.c     **** 		}
4985:src/xeq.c     **** 		((FP_NILADIC)function_pointer)((enum nilop)f);
4986:src/xeq.c     **** finish_niladic:
ARM GAS  /tmp/ccQlyisH.s 			page 119


4987:src/xeq.c     **** 		// If an error occurred, we end up here even if a non-niladic function was called.
4988:src/xeq.c     **** 		// set_lift() is always called for non-niladic functions so calling it again does no harm.
4989:src/xeq.c     **** 		if (f != OP_rCLX) {
4990:src/xeq.c     **** 			set_lift();
4991:src/xeq.c     **** 		}
4992:src/xeq.c     **** 	}
4993:src/xeq.c     **** 	else if (intmode) {
4994:src/xeq.c     **** 		long long int iy;
4995:src/xeq.c     **** 		long long int iz;
4996:src/xeq.c     **** 
4997:src/xeq.c     **** 		ix = getX_int();
4998:src/xeq.c     **** 		iy = get_reg_n_int(regY_idx);
4999:src/xeq.c     **** 		switch (operands) {
5000:src/xeq.c     **** 		default:
5001:src/xeq.c     **** 		case 1:
5002:src/xeq.c     **** 			ix = ((FP_MONADIC_INT)function_pointer)(ix);
5003:src/xeq.c     **** 			break;
5004:src/xeq.c     **** 
5005:src/xeq.c     **** 		case 2:
5006:src/xeq.c     **** 			ix = ((FP_DYADIC_INT)function_pointer)(iy, ix);
5007:src/xeq.c     **** 			break;
5008:src/xeq.c     **** 
5009:src/xeq.c     **** 		case 3:
5010:src/xeq.c     **** 			iz = get_reg_n_int(regZ_idx);
5011:src/xeq.c     **** 			ix = ((FP_TRIADIC_INT)function_pointer)(iz, iy, ix);
5012:src/xeq.c     **** 			break;
5013:src/xeq.c     **** 		}
5014:src/xeq.c     **** 		goto finish_x;
5015:src/xeq.c     **** 	}
5016:src/xeq.c     **** 	else {
5017:src/xeq.c     **** 		decNumber x, y, z, t, r1;
5018:src/xeq.c     **** 
5019:src/xeq.c     **** 		if (operands + complex <= 2) {
5020:src/xeq.c     **** 			getXY(&x, &y);
5021:src/xeq.c     **** 		}
5022:src/xeq.c     **** 		else {
5023:src/xeq.c     **** 			getXYZT(&x, &y, &z, &t);
5024:src/xeq.c     **** 		}
5025:src/xeq.c     **** 
5026:src/xeq.c     **** 		if (complex) {
5027:src/xeq.c     **** 			decNumber r2;
5028:src/xeq.c     **** 
5029:src/xeq.c     **** 			if (operands == 1) {
5030:src/xeq.c     **** 				((FP_MONADIC_CMPLX)function_pointer)(&r1, &r2, &x, &y);
5031:src/xeq.c     **** 			}
5032:src/xeq.c     **** 			else {
5033:src/xeq.c     **** 				((FP_DYADIC_CMPLX)function_pointer)(&r1, &r2, &z, &t, &x, &y);
5034:src/xeq.c     **** 			}
5035:src/xeq.c     **** 			setlastXY();
5036:src/xeq.c     **** 			if (operands != 1) {
5037:src/xeq.c     **** 				lower2();
5038:src/xeq.c     **** 			}
5039:src/xeq.c     **** 			setXY(&r1, &r2);
5040:src/xeq.c     **** 			set_was_complex();
5041:src/xeq.c     **** 		}
5042:src/xeq.c     **** 		else { // real
5043:src/xeq.c     **** 			void *result;
ARM GAS  /tmp/ccQlyisH.s 			page 120


5044:src/xeq.c     **** 
5045:src/xeq.c     **** 			switch (operands) {
5046:src/xeq.c     **** 			default:
5047:src/xeq.c     **** 			case 1:
5048:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r1, &x);
5049:src/xeq.c     **** 				break;
5050:src/xeq.c     **** 
5051:src/xeq.c     **** 			case 2:
5052:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r1, &y, &x);
5053:src/xeq.c     **** 				break;
5054:src/xeq.c     **** 
5055:src/xeq.c     **** 			case 3:
5056:src/xeq.c     **** 				result = ((FP_TRIADIC_REAL)function_pointer)(&r1, &z, &y, &x);
5057:src/xeq.c     **** 				break;
5058:src/xeq.c     **** 			}
5059:src/xeq.c     **** 			if (NULL == result) {
5060:src/xeq.c     **** 				set_NaN(&r1);
5061:src/xeq.c     **** 			}
5062:src/xeq.c     **** finish_x:
5063:src/xeq.c     **** 			setlastX();
5064:src/xeq.c     **** 			switch (operands) {
5065:src/xeq.c     **** 			case 3:		lower(); // fall through
5066:src/xeq.c     **** 			case 2:		lower(); break;
5067:src/xeq.c     **** 			}
5068:src/xeq.c     **** 			if (!intmode) {
5069:src/xeq.c     **** 				setX(&r1);
5070:src/xeq.c     **** 			}
5071:src/xeq.c     **** 			else {
5072:src/xeq.c     **** 				setX_int(ix);
5073:src/xeq.c     **** 			}
5074:src/xeq.c     **** 		}
5075:src/xeq.c     **** 	}
5076:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
5077:src/xeq.c     **** }
5078:src/xeq.c     **** 
5079:src/xeq.c     **** 
5080:src/xeq.c     **** static void niladic(const opcode op)
5081:src/xeq.c     **** {
5082:src/xeq.c     **** 	universal_dispatch(op, 0, 0);
5083:src/xeq.c     **** }
5084:src/xeq.c     **** 
5085:src/xeq.c     **** static void monadic(const opcode op)
5086:src/xeq.c     **** {
5087:src/xeq.c     **** 	universal_dispatch(op, 1, 0);
5088:src/xeq.c     **** }
5089:src/xeq.c     **** 
5090:src/xeq.c     **** static void monadic_cmplex(const opcode op)
5091:src/xeq.c     **** {
5092:src/xeq.c     **** 	universal_dispatch(op, 1, 1);
5093:src/xeq.c     **** }
5094:src/xeq.c     **** 
5095:src/xeq.c     **** static void dyadic(const opcode op)
5096:src/xeq.c     **** {
5097:src/xeq.c     **** 	universal_dispatch(op, 2, 0);
5098:src/xeq.c     **** }
5099:src/xeq.c     **** 
5100:src/xeq.c     **** static void dyadic_cmplex(const opcode op)
ARM GAS  /tmp/ccQlyisH.s 			page 121


5101:src/xeq.c     **** {
5102:src/xeq.c     **** 	universal_dispatch(op, 2, 1);
5103:src/xeq.c     **** }
5104:src/xeq.c     **** 
5105:src/xeq.c     **** static void triadic(const opcode op)
5106:src/xeq.c     **** {
5107:src/xeq.c     **** 	universal_dispatch(op, 3, 0);
5108:src/xeq.c     **** }
5109:src/xeq.c     **** 
5110:src/xeq.c     **** 
5111:src/xeq.c     **** #endif // UNIVERSAL_DISPATCH
5112:src/xeq.c     **** 
5113:src/xeq.c     **** 
5114:src/xeq.c     **** /*
5115:src/xeq.c     ****  *  Helper to check the maximum allowed register number, 
5116:src/xeq.c     ****  *  depending on command flags and current allocation.
5117:src/xeq.c     ****  *  This needs to be seperate because its called twice for indirect arguments
5118:src/xeq.c     ****  */
5119:src/xeq.c     **** static unsigned int get_reg_limit(unsigned int cmd, unsigned int arg)
5120:src/xeq.c     **** {
 1476              		.loc 1 5120 1 is_stmt 1 view -0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 0
 1479              		@ frame_needed = 0, uses_anonymous_args = 0
5121:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1480              		.loc 1 5121 2 view .LVU392
5122:src/xeq.c     **** 
5123:src/xeq.c     **** 	if (arg < TOPREALREG) {
 1481              		.loc 1 5123 2 view .LVU393
 1482              		.loc 1 5123 5 is_stmt 0 view .LVU394
 1483 0000 6329     		cmp	r1, #99
5120:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1484              		.loc 1 5120 1 view .LVU395
 1485 0002 38B5     		push	{r3, r4, r5, lr}
 1486              		.cfi_def_cfa_offset 16
 1487              		.cfi_offset 3, -16
 1488              		.cfi_offset 4, -12
 1489              		.cfi_offset 5, -8
 1490              		.cfi_offset 14, -4
5120:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1491              		.loc 1 5120 1 view .LVU396
 1492 0004 0446     		mov	r4, r0
 1493              		.loc 1 5123 5 view .LVU397
 1494 0006 16D8     		bhi	.L119
5124:src/xeq.c     **** 		// Range checking for registers against variable boundary
5125:src/xeq.c     **** 		lim = global_regs_rarg((enum rarg) cmd) - 1;
 1495              		.loc 1 5125 3 is_stmt 1 view .LVU398
 1496              	.LVL102:
 1497              	.LBB1438:
 1498              	.LBI1438:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1499              		.loc 1 238 14 view .LVU399
 1500              	.LBB1439:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1501              		.loc 1 239 2 view .LVU400
 1502              	.LBB1440:
 1503              	.LBI1440:
ARM GAS  /tmp/ccQlyisH.s 			page 122


1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1504              		.loc 1 1087 5 view .LVU401
 1505              	.LBB1441:
1088:src/xeq.c     **** }
 1506              		.loc 1 1088 2 view .LVU402
1088:src/xeq.c     **** }
 1507              		.loc 1 1088 12 is_stmt 0 view .LVU403
 1508 0008 294B     		ldr	r3, .L139
 1509 000a 1A68     		ldr	r2, [r3]
1088:src/xeq.c     **** }
 1510              		.loc 1 1088 24 view .LVU404
 1511 000c B2F8E817 		ldrh	r1, [r2, #2024]
 1512              	.LVL103:
1088:src/xeq.c     **** }
 1513              		.loc 1 1088 24 view .LVU405
 1514 0010 44F20103 		movw	r3, #16385
 1515              	.LBE1441:
 1516              	.LBE1440:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1517              		.loc 1 239 5 view .LVU406
 1518 0014 0B40     		ands	r3, r3, r1
 1519 0016 B3F5804F 		cmp	r3, #16384
 1520 001a 2ED0     		beq	.L120
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1521              		.loc 1 239 19 view .LVU407
 1522 001c 8028     		cmp	r0, #128
 1523 001e 39D0     		beq	.L136
 244:src/xeq.c     **** }
 1524              		.loc 1 244 3 is_stmt 1 view .LVU408
 244:src/xeq.c     **** }
 1525              		.loc 1 244 10 is_stmt 0 view .LVU409
 1526 0020 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1527              	.LVL104:
 1528              	.L124:
 244:src/xeq.c     **** }
 1529              		.loc 1 244 10 view .LVU410
 1530 0024 2349     		ldr	r1, .L139+4
 1531              	.LBE1439:
 1532              	.LBE1438:
 1533              		.loc 1 5125 7 view .LVU411
 1534 0026 0138     		subs	r0, r0, #1
 1535              	.LVL105:
 1536              		.loc 1 5125 7 view .LVU412
 1537 0028 2501     		lsls	r5, r4, #4
 1538              	.LVL106:
 1539              	.L125:
5126:src/xeq.c     **** 	}
5127:src/xeq.c     **** 	else if (argcmds[cmd].local) {
5128:src/xeq.c     **** 		// Range checking for local registers
5129:src/xeq.c     **** 		lim = NUMREG - 1 + local_regs_rarg((enum rarg) cmd);
5130:src/xeq.c     **** 	}
5131:src/xeq.c     **** 	if (argcmds[cmd].cmplx) {
 1540              		.loc 1 5131 2 is_stmt 1 view .LVU413
 1541              		.loc 1 5131 18 is_stmt 0 view .LVU414
 1542 002a 2944     		add	r1, r1, r5
 1543 002c 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 1544              		.loc 1 5131 5 view .LVU415
ARM GAS  /tmp/ccQlyisH.s 			page 123


 1545 002e D906     		lsls	r1, r3, #27
 1546 0030 10D5     		bpl	.L126
 1547              	.L137:
5132:src/xeq.c     **** 		// one short of the last avialable register for complex access
5133:src/xeq.c     **** 		--lim;
 1548              		.loc 1 5133 3 is_stmt 1 view .LVU416
 1549 0032 0138     		subs	r0, r0, #1
 1550              	.LVL107:
 1551              	.L118:
5134:src/xeq.c     **** 	}
5135:src/xeq.c     **** 	else if (cmd == RARG_STOSTK || cmd == RARG_RCLSTK) {
5136:src/xeq.c     **** 		// avoid stack clash error in these commands
5137:src/xeq.c     **** 		lim -= stack_size() - 1;
5138:src/xeq.c     **** 	}
5139:src/xeq.c     **** 	return lim;
5140:src/xeq.c     **** }
 1552              		.loc 1 5140 1 is_stmt 0 view .LVU417
 1553 0034 38BD     		pop	{r3, r4, r5, pc}
 1554              	.LVL108:
 1555              	.L119:
5127:src/xeq.c     **** 		// Range checking for local registers
 1556              		.loc 1 5127 7 is_stmt 1 view .LVU418
5127:src/xeq.c     **** 		// Range checking for local registers
 1557              		.loc 1 5127 23 is_stmt 0 view .LVU419
 1558 0036 1F49     		ldr	r1, .L139+4
 1559              	.LVL109:
5127:src/xeq.c     **** 		// Range checking for local registers
 1560              		.loc 1 5127 23 view .LVU420
 1561 0038 01EB0013 		add	r3, r1, r0, lsl #4
 1562 003c 0501     		lsls	r5, r0, #4
 1563 003e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
5127:src/xeq.c     **** 		// Range checking for local registers
 1564              		.loc 1 5127 10 view .LVU421
 1565 0040 1807     		lsls	r0, r3, #28
 1566              	.LVL110:
5127:src/xeq.c     **** 		// Range checking for local registers
 1567              		.loc 1 5127 10 view .LVU422
 1568 0042 18D5     		bpl	.L130
5129:src/xeq.c     **** 	}
 1569              		.loc 1 5129 3 is_stmt 1 view .LVU423
5129:src/xeq.c     **** 	}
 1570              		.loc 1 5129 22 is_stmt 0 view .LVU424
 1571 0044 E0B2     		uxtb	r0, r4
 1572 0046 FFF7FEFF 		bl	local_regs_rarg
 1573              	.LVL111:
5131:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1574              		.loc 1 5131 18 view .LVU425
 1575 004a 2944     		add	r1, r1, r5
5129:src/xeq.c     **** 	}
 1576              		.loc 1 5129 20 view .LVU426
 1577 004c 6F30     		adds	r0, r0, #111
 1578              	.LVL112:
5131:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1579              		.loc 1 5131 2 is_stmt 1 view .LVU427
5131:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1580              		.loc 1 5131 18 is_stmt 0 view .LVU428
 1581 004e 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
ARM GAS  /tmp/ccQlyisH.s 			page 124


5131:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1582              		.loc 1 5131 5 view .LVU429
 1583 0050 D906     		lsls	r1, r3, #27
 1584 0052 EED4     		bmi	.L137
 1585              	.L126:
5135:src/xeq.c     **** 		// avoid stack clash error in these commands
 1586              		.loc 1 5135 7 is_stmt 1 view .LVU430
5135:src/xeq.c     **** 		// avoid stack clash error in these commands
 1587              		.loc 1 5135 30 is_stmt 0 view .LVU431
 1588 0054 223C     		subs	r4, r4, #34
 1589              	.LVL113:
5135:src/xeq.c     **** 		// avoid stack clash error in these commands
 1590              		.loc 1 5135 10 view .LVU432
 1591 0056 012C     		cmp	r4, #1
 1592 0058 ECD8     		bhi	.L118
5137:src/xeq.c     **** 	}
 1593              		.loc 1 5137 3 is_stmt 1 view .LVU433
 1594              	.LBB1446:
 1595              	.LBI1446:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 1596              		.loc 1 703 5 view .LVU434
 1597              	.LBB1447:
 704:src/xeq.c     **** 		return 4;
 1598              		.loc 1 704 2 view .LVU435
 704:src/xeq.c     **** 		return 4;
 1599              		.loc 1 704 8 is_stmt 0 view .LVU436
 1600 005a 154B     		ldr	r3, .L139
 1601 005c 1B68     		ldr	r3, [r3]
 704:src/xeq.c     **** 		return 4;
 1602              		.loc 1 704 6 view .LVU437
 1603 005e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 1604              		.loc 1 704 5 view .LVU438
 1605 0062 1207     		lsls	r2, r2, #28
 1606 0064 14D5     		bpl	.L131
 1607              	.LBB1448:
 1608              	.LBI1448:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 1609              		.loc 1 182 5 is_stmt 1 view .LVU439
 1610              	.LBB1449:
 183:src/xeq.c     **** }
 1611              		.loc 1 183 2 view .LVU440
 183:src/xeq.c     **** }
 1612              		.loc 1 183 9 is_stmt 0 view .LVU441
 1613 0066 B3F8E037 		ldrh	r3, [r3, #2016]
 1614              	.LBE1449:
 1615              	.LBE1448:
 704:src/xeq.c     **** 		return 4;
 1616              		.loc 1 704 27 view .LVU442
 1617 006a 9B0B     		lsrs	r3, r3, #14
 1618 006c 032B     		cmp	r3, #3
 1619 006e 16D0     		beq	.L138
 1620 0070 0723     		movs	r3, #7
 1621              	.L128:
 1622              	.LBE1447:
 1623              	.LBE1446:
5137:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQlyisH.s 			page 125


 1624              		.loc 1 5137 7 view .LVU443
 1625 0072 C01A     		subs	r0, r0, r3
 1626              	.LVL114:
5139:src/xeq.c     **** }
 1627              		.loc 1 5139 2 is_stmt 1 view .LVU444
 1628              		.loc 1 5140 1 is_stmt 0 view .LVU445
 1629 0074 38BD     		pop	{r3, r4, r5, pc}
 1630              	.LVL115:
 1631              	.L130:
5121:src/xeq.c     **** 
 1632              		.loc 1 5121 15 view .LVU446
 1633 0076 7020     		movs	r0, #112
 1634 0078 D7E7     		b	.L125
 1635              	.LVL116:
 1636              	.L120:
 1637              	.LBB1452:
 1638              	.LBB1444:
 1639              	.LBB1442:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1640              		.loc 1 240 3 is_stmt 1 view .LVU447
 241:src/xeq.c     **** 	}
 1641              		.loc 1 241 26 is_stmt 0 view .LVU448
 1642 007a A4F17E03 		sub	r3, r4, #126
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1643              		.loc 1 240 24 view .LVU449
 1644 007e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1645              	.LVL117:
 241:src/xeq.c     **** 	}
 1646              		.loc 1 241 56 view .LVU450
 1647 0082 DBB2     		uxtb	r3, r3
 1648 0084 012B     		cmp	r3, #1
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1649              		.loc 1 240 13 view .LVU451
 1650 0086 A0F10C00 		sub	r0, r0, #12
 1651              	.LVL118:
 241:src/xeq.c     **** 	}
 1652              		.loc 1 241 3 is_stmt 1 view .LVU452
 241:src/xeq.c     **** 	}
 1653              		.loc 1 241 56 is_stmt 0 view .LVU453
 1654 008a CBD9     		bls	.L124
 241:src/xeq.c     **** 	}
 1655              		.loc 1 241 67 view .LVU454
 1656 008c 4010     		asrs	r0, r0, #1
 1657              	.LVL119:
 241:src/xeq.c     **** 	}
 1658              		.loc 1 241 67 view .LVU455
 1659 008e C9E7     		b	.L124
 1660              	.LVL120:
 1661              	.L131:
 241:src/xeq.c     **** 	}
 1662              		.loc 1 241 67 view .LVU456
 1663              	.LBE1442:
 1664              	.LBE1444:
 1665              	.LBE1452:
 1666              	.LBB1453:
 1667              	.LBB1450:
 1668 0090 0323     		movs	r3, #3
ARM GAS  /tmp/ccQlyisH.s 			page 126


 1669 0092 EEE7     		b	.L128
 1670              	.LVL121:
 1671              	.L136:
 241:src/xeq.c     **** 	}
 1672              		.loc 1 241 67 view .LVU457
 1673              	.LBE1450:
 1674              	.LBE1453:
 1675              	.LBB1454:
 1676              	.LBB1445:
 1677              	.LBB1443:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1678              		.loc 1 240 3 is_stmt 1 view .LVU458
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1679              		.loc 1 240 24 is_stmt 0 view .LVU459
 1680 0094 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1681              	.LVL122:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1682              		.loc 1 240 13 view .LVU460
 1683 0098 0C38     		subs	r0, r0, #12
 1684              	.LVL123:
 241:src/xeq.c     **** 	}
 1685              		.loc 1 241 3 is_stmt 1 view .LVU461
 241:src/xeq.c     **** 	}
 1686              		.loc 1 241 67 is_stmt 0 view .LVU462
 1687 009a 4010     		asrs	r0, r0, #1
 1688              	.LVL124:
 241:src/xeq.c     **** 	}
 1689              		.loc 1 241 67 view .LVU463
 1690 009c C2E7     		b	.L124
 1691              	.LVL125:
 1692              	.L138:
 241:src/xeq.c     **** 	}
 1693              		.loc 1 241 67 view .LVU464
 1694              	.LBE1443:
 1695              	.LBE1445:
 1696              	.LBE1454:
 1697              	.LBB1455:
 1698              	.LBB1451:
 704:src/xeq.c     **** 		return 4;
 1699              		.loc 1 704 44 view .LVU465
 1700 009e 064B     		ldr	r3, .L139+8
 704:src/xeq.c     **** 		return 4;
 1701              		.loc 1 704 41 view .LVU466
 1702 00a0 93F90130 		ldrsb	r3, [r3, #1]
 1703 00a4 002B     		cmp	r3, #0
 1704 00a6 B4BF     		ite	lt
 1705 00a8 0723     		movlt	r3, #7
 1706 00aa 0323     		movge	r3, #3
 1707 00ac E1E7     		b	.L128
 1708              	.L140:
 1709 00ae 00BF     		.align	2
 1710              	.L139:
 1711 00b0 00000000 		.word	main_ram
 1712 00b4 00000000 		.word	argcmds
 1713 00b8 00000000 		.word	XromParams
 1714              	.LBE1451:
 1715              	.LBE1455:
ARM GAS  /tmp/ccQlyisH.s 			page 127


 1716              		.cfi_endproc
 1717              	.LFE246:
 1719              		.section	.text.local_regs,"ax",%progbits
 1720              		.align	1
 1721              		.p2align 2,,3
 1722              		.global	local_regs
 1723              		.syntax unified
 1724              		.thumb
 1725              		.thumb_func
 1726              		.fpu fpv4-sp-d16
 1728              	local_regs:
 1729              	.LFB7:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 1730              		.loc 1 230 22 is_stmt 1 view -0
 1731              		.cfi_startproc
 1732              		@ args = 0, pretend = 0, frame = 0
 1733              		@ frame_needed = 0, uses_anonymous_args = 0
 1734              		@ link register save eliminated.
 231:src/xeq.c     **** }
 1735              		.loc 1 231 2 view .LVU468
 1736              	.LVL126:
 1737              	.LBB1456:
 1738              	.LBI1456:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1739              		.loc 1 222 5 view .LVU469
 1740              	.LBB1457:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1741              		.loc 1 223 2 view .LVU470
 1742              	.LBB1458:
 1743              	.LBI1458:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1744              		.loc 1 1087 5 view .LVU471
 1745              	.LBB1459:
1088:src/xeq.c     **** }
 1746              		.loc 1 1088 2 view .LVU472
1088:src/xeq.c     **** }
 1747              		.loc 1 1088 12 is_stmt 0 view .LVU473
 1748 0000 0D4B     		ldr	r3, .L145
 1749 0002 1B68     		ldr	r3, [r3]
 1750              	.LVL127:
1088:src/xeq.c     **** }
 1751              		.loc 1 1088 12 view .LVU474
 1752              	.LBE1459:
 1753              	.LBE1458:
 224:src/xeq.c     **** }
 1754              		.loc 1 224 2 is_stmt 1 view .LVU475
 1755              	.LBB1462:
 1756              	.LBI1462:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1757              		.loc 1 214 5 view .LVU476
 1758              	.LBB1463:
 215:src/xeq.c     **** }
 1759              		.loc 1 215 2 view .LVU477
 215:src/xeq.c     **** }
 1760              		.loc 1 215 9 is_stmt 0 view .LVU478
 1761 0004 B3F9DE27 		ldrsh	r2, [r3, #2014]
 215:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 128


 1762              		.loc 1 215 57 view .LVU479
 1763 0008 002A     		cmp	r2, #0
 1764 000a 01DB     		blt	.L144
 1765 000c 0020     		movs	r0, #0
 1766              	.LVL128:
 215:src/xeq.c     **** }
 1767              		.loc 1 215 57 view .LVU480
 1768              	.LBE1463:
 1769              	.LBE1462:
 1770              	.LBE1457:
 1771              	.LBE1456:
 232:src/xeq.c     **** 
 1772              		.loc 1 232 1 view .LVU481
 1773 000e 7047     		bx	lr
 1774              	.LVL129:
 1775              	.L144:
 1776              	.LBB1475:
 1777              	.LBB1474:
 1778              	.LBB1468:
 1779              	.LBB1460:
1088:src/xeq.c     **** }
 1780              		.loc 1 1088 24 view .LVU482
 1781 0010 B3F8E807 		ldrh	r0, [r3, #2024]
 1782              	.LBE1460:
 1783              	.LBE1468:
 1784              	.LBB1469:
 1785              	.LBB1464:
 215:src/xeq.c     **** }
 1786              		.loc 1 215 25 view .LVU483
 1787 0014 0949     		ldr	r1, .L145+4
 1788              	.LBE1464:
 1789              	.LBE1469:
 1790              	.LBB1470:
 1791              	.LBB1461:
1088:src/xeq.c     **** }
 1792              		.loc 1 1088 24 view .LVU484
 1793 0016 44F20103 		movw	r3, #16385
 1794              	.LVL130:
1088:src/xeq.c     **** }
 1795              		.loc 1 1088 24 view .LVU485
 1796              	.LBE1461:
 1797              	.LBE1470:
 1798              	.LBB1471:
 1799              	.LBB1465:
 215:src/xeq.c     **** }
 1800              		.loc 1 215 25 view .LVU486
 1801 001a 0968     		ldr	r1, [r1]
 1802              	.LBE1465:
 1803              	.LBE1471:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1804              		.loc 1 223 73 view .LVU487
 1805 001c 0340     		ands	r3, r3, r0
 1806 001e A3F58043 		sub	r3, r3, #16384
 1807              	.LBB1472:
 1808              	.LBB1466:
 215:src/xeq.c     **** }
 1809              		.loc 1 215 57 view .LVU488
ARM GAS  /tmp/ccQlyisH.s 			page 129


 1810 0022 31F81200 		ldrh	r0, [r1, r2, lsl #1]
 1811              	.LBE1466:
 1812              	.LBE1472:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1813              		.loc 1 223 73 view .LVU489
 1814 0026 B3FA83F3 		clz	r3, r3
 1815 002a 5B09     		lsrs	r3, r3, #5
 1816 002c 0233     		adds	r3, r3, #2
 1817              	.LBB1473:
 1818              	.LBB1467:
 215:src/xeq.c     **** }
 1819              		.loc 1 215 57 view .LVU490
 1820 002e C0F30B00 		ubfx	r0, r0, #0, #12
 1821 0032 1841     		asrs	r0, r0, r3
 1822 0034 7047     		bx	lr
 1823              	.L146:
 1824 0036 00BF     		.align	2
 1825              	.L145:
 1826 0038 00000000 		.word	main_ram
 1827 003c 00000000 		.word	RetStk
 1828              	.LBE1467:
 1829              	.LBE1473:
 1830              	.LBE1474:
 1831              	.LBE1475:
 1832              		.cfi_endproc
 1833              	.LFE7:
 1835              		.section	.text.global_regs_rarg,"ax",%progbits
 1836              		.align	1
 1837              		.p2align 2,,3
 1838              		.global	global_regs_rarg
 1839              		.syntax unified
 1840              		.thumb
 1841              		.thumb_func
 1842              		.fpu fpv4-sp-d16
 1844              	global_regs_rarg:
 1845              	.LVL131:
 1846              	.LFB8:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1847              		.loc 1 238 45 is_stmt 1 view -0
 1848              		.cfi_startproc
 1849              		@ args = 0, pretend = 0, frame = 0
 1850              		@ frame_needed = 0, uses_anonymous_args = 0
 1851              		@ link register save eliminated.
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1852              		.loc 1 239 2 view .LVU492
 1853              	.LBB1476:
 1854              	.LBI1476:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1855              		.loc 1 1087 5 view .LVU493
 1856              	.LBB1477:
1088:src/xeq.c     **** }
 1857              		.loc 1 1088 2 view .LVU494
1088:src/xeq.c     **** }
 1858              		.loc 1 1088 12 is_stmt 0 view .LVU495
 1859 0000 0E4B     		ldr	r3, .L156
 1860 0002 1A68     		ldr	r2, [r3]
1088:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 130


 1861              		.loc 1 1088 24 view .LVU496
 1862 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1863 0008 44F20103 		movw	r3, #16385
 1864              	.LBE1477:
 1865              	.LBE1476:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1866              		.loc 1 239 5 view .LVU497
 1867 000c 0B40     		ands	r3, r3, r1
 1868 000e B3F5804F 		cmp	r3, #16384
 1869 0012 09D0     		beq	.L148
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1870              		.loc 1 239 19 discriminator 1 view .LVU498
 1871 0014 8028     		cmp	r0, #128
 1872 0016 02D0     		beq	.L155
 244:src/xeq.c     **** }
 1873              		.loc 1 244 3 is_stmt 1 view .LVU499
 244:src/xeq.c     **** }
 1874              		.loc 1 244 10 is_stmt 0 view .LVU500
 1875 0018 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1876              	.LVL132:
 244:src/xeq.c     **** }
 1877              		.loc 1 244 10 view .LVU501
 1878 001c 7047     		bx	lr
 1879              	.LVL133:
 1880              	.L155:
 1881              	.LBB1478:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1882              		.loc 1 240 3 is_stmt 1 view .LVU502
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1883              		.loc 1 240 24 is_stmt 0 view .LVU503
 1884 001e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1885              	.LVL134:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1886              		.loc 1 240 13 view .LVU504
 1887 0022 0C38     		subs	r0, r0, #12
 1888              	.LVL135:
 241:src/xeq.c     **** 	}
 1889              		.loc 1 241 3 is_stmt 1 view .LVU505
 1890              	.L153:
 241:src/xeq.c     **** 	}
 1891              		.loc 1 241 67 is_stmt 0 discriminator 1 view .LVU506
 1892 0024 4010     		asrs	r0, r0, #1
 1893              	.LVL136:
 241:src/xeq.c     **** 	}
 1894              		.loc 1 241 67 discriminator 1 view .LVU507
 1895 0026 7047     		bx	lr
 1896              	.LVL137:
 1897              	.L148:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1898              		.loc 1 240 3 is_stmt 1 view .LVU508
 241:src/xeq.c     **** 	}
 1899              		.loc 1 241 56 is_stmt 0 view .LVU509
 1900 0028 A0F17E03 		sub	r3, r0, #126
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1901              		.loc 1 240 24 view .LVU510
 1902 002c 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 241:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQlyisH.s 			page 131


 1903              		.loc 1 241 56 view .LVU511
 1904 0030 012B     		cmp	r3, #1
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1905              		.loc 1 240 13 view .LVU512
 1906 0032 A2F10C00 		sub	r0, r2, #12
 1907              	.LVL138:
 241:src/xeq.c     **** 	}
 1908              		.loc 1 241 3 is_stmt 1 view .LVU513
 241:src/xeq.c     **** 	}
 1909              		.loc 1 241 56 is_stmt 0 view .LVU514
 1910 0036 F5D8     		bhi	.L153
 1911              	.LBE1478:
 245:src/xeq.c     **** 
 1912              		.loc 1 245 1 view .LVU515
 1913 0038 7047     		bx	lr
 1914              	.L157:
 1915 003a 00BF     		.align	2
 1916              	.L156:
 1917 003c 00000000 		.word	main_ram
 1918              		.cfi_endproc
 1919              	.LFE8:
 1921              		.section	.text.global_regs,"ax",%progbits
 1922              		.align	1
 1923              		.p2align 2,,3
 1924              		.global	global_regs
 1925              		.syntax unified
 1926              		.thumb
 1927              		.thumb_func
 1928              		.fpu fpv4-sp-d16
 1930              	global_regs:
 1931              	.LFB9:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 1932              		.loc 1 250 32 is_stmt 1 view -0
 1933              		.cfi_startproc
 1934              		@ args = 0, pretend = 0, frame = 0
 1935              		@ frame_needed = 0, uses_anonymous_args = 0
 1936              		@ link register save eliminated.
 251:src/xeq.c     **** }
 1937              		.loc 1 251 2 view .LVU517
 1938              	.LVL139:
 1939              	.LBB1479:
 1940              	.LBI1479:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1941              		.loc 1 238 14 view .LVU518
 1942              	.LBB1480:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1943              		.loc 1 239 2 view .LVU519
 1944              	.LBB1481:
 1945              	.LBI1481:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1946              		.loc 1 1087 5 view .LVU520
 1947              	.LBB1482:
1088:src/xeq.c     **** }
 1948              		.loc 1 1088 2 view .LVU521
1088:src/xeq.c     **** }
 1949              		.loc 1 1088 12 is_stmt 0 view .LVU522
 1950 0000 074B     		ldr	r3, .L161
ARM GAS  /tmp/ccQlyisH.s 			page 132


 1951 0002 1A68     		ldr	r2, [r3]
1088:src/xeq.c     **** }
 1952              		.loc 1 1088 24 view .LVU523
 1953 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1954              	.LBE1482:
 1955              	.LBE1481:
 1956              	.LBB1484:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1957              		.loc 1 240 24 view .LVU524
 1958 0008 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1959              	.LBE1484:
 1960              	.LBB1485:
 1961              	.LBB1483:
1088:src/xeq.c     **** }
 1962              		.loc 1 1088 24 view .LVU525
 1963 000c 44F20103 		movw	r3, #16385
 1964              	.LBE1483:
 1965              	.LBE1485:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1966              		.loc 1 239 5 view .LVU526
 1967 0010 0B40     		ands	r3, r3, r1
 1968 0012 B3F5804F 		cmp	r3, #16384
 1969              	.LBB1486:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1970              		.loc 1 240 3 is_stmt 1 view .LVU527
 241:src/xeq.c     **** 	}
 1971              		.loc 1 241 3 view .LVU528
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1972              		.loc 1 240 13 is_stmt 0 view .LVU529
 1973 0016 04BF     		itt	eq
 1974 0018 0C38     		subeq	r0, r0, #12
 241:src/xeq.c     **** 	}
 1975              		.loc 1 241 67 view .LVU530
 1976 001a 4010     		asreq	r0, r0, #1
 1977              	.LBE1486:
 244:src/xeq.c     **** }
 1978              		.loc 1 244 3 is_stmt 1 view .LVU531
 1979              	.LVL140:
 244:src/xeq.c     **** }
 1980              		.loc 1 244 3 is_stmt 0 view .LVU532
 1981              	.LBE1480:
 1982              	.LBE1479:
 252:src/xeq.c     **** 
 1983              		.loc 1 252 1 view .LVU533
 1984 001c 7047     		bx	lr
 1985              	.L162:
 1986 001e 00BF     		.align	2
 1987              	.L161:
 1988 0020 00000000 		.word	main_ram
 1989              		.cfi_endproc
 1990              	.LFE9:
 1992              		.section	.text.version,"ax",%progbits
 1993              		.align	1
 1994              		.p2align 2,,3
 1995              		.global	version
 1996              		.syntax unified
 1997              		.thumb
ARM GAS  /tmp/ccQlyisH.s 			page 133


 1998              		.thumb_func
 1999              		.fpu fpv4-sp-d16
 2001              	version:
 2002              	.LVL141:
 2003              	.LFB10:
 264:src/xeq.c     **** 	State2.version = 1;
 2004              		.loc 1 264 29 is_stmt 1 view -0
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 0
 2007              		@ frame_needed = 0, uses_anonymous_args = 0
 2008              		@ link register save eliminated.
 265:src/xeq.c     **** 	if (!State2.runmode)
 2009              		.loc 1 265 2 view .LVU535
 265:src/xeq.c     **** 	if (!State2.runmode)
 2010              		.loc 1 265 17 is_stmt 0 view .LVU536
 2011 0000 054B     		ldr	r3, .L166
 2012 0002 5A7D     		ldrb	r2, [r3, #21]	@ zero_extendqisi2
 266:src/xeq.c     **** 		display();
 2013              		.loc 1 266 6 view .LVU537
 2014 0004 997D     		ldrb	r1, [r3, #22]	@ zero_extendqisi2
 265:src/xeq.c     **** 	if (!State2.runmode)
 2015              		.loc 1 265 17 view .LVU538
 2016 0006 42F01002 		orr	r2, r2, #16
 2017 000a 5A75     		strb	r2, [r3, #21]
 266:src/xeq.c     **** 		display();
 2018              		.loc 1 266 2 is_stmt 1 view .LVU539
 266:src/xeq.c     **** 		display();
 2019              		.loc 1 266 5 is_stmt 0 view .LVU540
 2020 000c 4B06     		lsls	r3, r1, #25
 2021 000e 00D5     		bpl	.L165
 268:src/xeq.c     **** 
 2022              		.loc 1 268 1 view .LVU541
 2023 0010 7047     		bx	lr
 2024              	.L165:
 267:src/xeq.c     **** }
 2025              		.loc 1 267 3 is_stmt 1 view .LVU542
 2026 0012 FFF7FEBF 		b	display
 2027              	.LVL142:
 2028              	.L167:
 267:src/xeq.c     **** }
 2029              		.loc 1 267 3 is_stmt 0 view .LVU543
 2030 0016 00BF     		.align	2
 2031              	.L166:
 2032 0018 00000000 		.word	StateWhileOn
 2033              		.cfi_endproc
 2034              	.LFE10:
 2036              		.section	.text.cmd_off,"ax",%progbits
 2037              		.align	1
 2038              		.p2align 2,,3
 2039              		.global	cmd_off
 2040              		.syntax unified
 2041              		.thumb
 2042              		.thumb_func
 2043              		.fpu fpv4-sp-d16
 2045              	cmd_off:
 2046              	.LVL143:
 2047              	.LFB11:
ARM GAS  /tmp/ccQlyisH.s 			page 134


 270:src/xeq.c     **** 	shutdown();
 2048              		.loc 1 270 29 is_stmt 1 view -0
 2049              		.cfi_startproc
 2050              		@ args = 0, pretend = 0, frame = 0
 2051              		@ frame_needed = 0, uses_anonymous_args = 0
 2052              		@ link register save eliminated.
 271:src/xeq.c     **** }
 2053              		.loc 1 271 2 view .LVU545
 2054 0000 FFF7FEBF 		b	shutdown
 2055              	.LVL144:
 271:src/xeq.c     **** }
 2056              		.loc 1 271 2 is_stmt 0 view .LVU546
 2057              		.cfi_endproc
 2058              	.LFE11:
 2060              		.section	.text.init_RegionTab,"ax",%progbits
 2061              		.align	1
 2062              		.p2align 2,,3
 2063              		.global	init_RegionTab
 2064              		.syntax unified
 2065              		.thumb
 2066              		.thumb_func
 2067              		.fpu fpv4-sp-d16
 2069              	init_RegionTab:
 2070              	.LFB13:
 294:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 2071              		.loc 1 294 28 is_stmt 1 view -0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 0
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 2075              		@ link register save eliminated.
 295:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2076              		.loc 1 295 3 view .LVU548
 295:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2077              		.loc 1 295 30 is_stmt 0 view .LVU549
 2078 0000 0649     		ldr	r1, .L170
 296:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2079              		.loc 1 296 30 view .LVU550
 2080 0002 074A     		ldr	r2, .L170+4
 297:src/xeq.c     **** }
 2081              		.loc 1 297 30 view .LVU551
 2082 0004 074B     		ldr	r3, .L170+8
 295:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2083              		.loc 1 295 30 view .LVU552
 2084 0006 0868     		ldr	r0, [r1]
 296:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2085              		.loc 1 296 30 view .LVU553
 2086 0008 1168     		ldr	r1, [r2]
 297:src/xeq.c     **** }
 2087              		.loc 1 297 30 view .LVU554
 2088 000a 1A68     		ldr	r2, [r3]
 295:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2089              		.loc 1 295 16 view .LVU555
 2090 000c 064B     		ldr	r3, .L170+12
 295:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2091              		.loc 1 295 30 view .LVU556
 2092 000e 0430     		adds	r0, r0, #4
 296:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
ARM GAS  /tmp/ccQlyisH.s 			page 135


 2093              		.loc 1 296 30 view .LVU557
 2094 0010 0431     		adds	r1, r1, #4
 297:src/xeq.c     **** }
 2095              		.loc 1 297 30 view .LVU558
 2096 0012 0432     		adds	r2, r2, #4
 296:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2097              		.loc 1 296 16 view .LVU559
 2098 0014 C3E90001 		strd	r0, r1, [r3]
 297:src/xeq.c     **** }
 2099              		.loc 1 297 3 is_stmt 1 view .LVU560
 297:src/xeq.c     **** }
 2100              		.loc 1 297 16 is_stmt 0 view .LVU561
 2101 0018 9A60     		str	r2, [r3, #8]
 298:src/xeq.c     **** #else
 2102              		.loc 1 298 1 view .LVU562
 2103 001a 7047     		bx	lr
 2104              	.L171:
 2105              		.align	2
 2106              	.L170:
 2107 001c 00000000 		.word	main_ram
 2108 0020 00000000 		.word	library_ram
 2109 0024 00000000 		.word	backup_ram
 2110 0028 00000000 		.word	.LANCHOR0
 2111              		.cfi_endproc
 2112              	.LFE13:
 2114              		.section	.text.sizeLIB,"ax",%progbits
 2115              		.align	1
 2116              		.p2align 2,,3
 2117              		.global	sizeLIB
 2118              		.syntax unified
 2119              		.thumb
 2120              		.thumb_func
 2121              		.fpu fpv4-sp-d16
 2123              	sizeLIB:
 2124              	.LVL145:
 2125              	.LFB14:
 310:src/xeq.c     **** 	if (region == REGION_XROM)
 2126              		.loc 1 310 25 is_stmt 1 view -0
 2127              		.cfi_startproc
 2128              		@ args = 0, pretend = 0, frame = 0
 2129              		@ frame_needed = 0, uses_anonymous_args = 0
 2130              		@ link register save eliminated.
 311:src/xeq.c     **** 		return xrom_size;
 2131              		.loc 1 311 2 view .LVU564
 311:src/xeq.c     **** 		return xrom_size;
 2132              		.loc 1 311 5 is_stmt 0 view .LVU565
 2133 0000 0328     		cmp	r0, #3
 2134 0002 05D0     		beq	.L175
 314:src/xeq.c     **** }
 2135              		.loc 1 314 3 is_stmt 1 view .LVU566
 314:src/xeq.c     **** }
 2136              		.loc 1 314 24 is_stmt 0 view .LVU567
 2137 0004 044B     		ldr	r3, .L176
 314:src/xeq.c     **** }
 2138              		.loc 1 314 32 view .LVU568
 2139 0006 53F82030 		ldr	r3, [r3, r0, lsl #2]
 314:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 136


 2140              		.loc 1 314 10 view .LVU569
 2141 000a 33F8020C 		ldrh	r0, [r3, #-2]
 2142              	.LVL146:
 315:src/xeq.c     **** 
 2143              		.loc 1 315 1 view .LVU570
 2144 000e 7047     		bx	lr
 2145              	.LVL147:
 2146              	.L175:
 312:src/xeq.c     **** 	else
 2147              		.loc 1 312 3 is_stmt 1 view .LVU571
 312:src/xeq.c     **** 	else
 2148              		.loc 1 312 10 is_stmt 0 view .LVU572
 2149 0010 024B     		ldr	r3, .L176+4
 2150 0012 1888     		ldrh	r0, [r3]
 2151              	.LVL148:
 312:src/xeq.c     **** 	else
 2152              		.loc 1 312 10 view .LVU573
 2153 0014 7047     		bx	lr
 2154              	.L177:
 2155 0016 00BF     		.align	2
 2156              	.L176:
 2157 0018 00000000 		.word	.LANCHOR0
 2158 001c 00000000 		.word	xrom_size
 2159              		.cfi_endproc
 2160              	.LFE14:
 2162              		.section	.text.getprog,"ax",%progbits
 2163              		.align	1
 2164              		.p2align 2,,3
 2165              		.global	getprog
 2166              		.syntax unified
 2167              		.thumb
 2168              		.thumb_func
 2169              		.fpu fpv4-sp-d16
 2171              	getprog:
 2172              	.LVL149:
 2173              	.LFB16:
 334:src/xeq.c     **** 
 2174              		.loc 1 334 33 is_stmt 1 view -0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 0
 2177              		@ frame_needed = 0, uses_anonymous_args = 0
 2178              		@ link register save eliminated.
 336:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2179              		.loc 1 336 2 view .LVU575
 337:src/xeq.c     **** 
 2180              		.loc 1 337 15 is_stmt 0 view .LVU576
 2181 0000 C0F30D02 		ubfx	r2, r0, #0, #14
 2182 0004 531E     		subs	r3, r2, #1
 336:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2183              		.loc 1 336 21 view .LVU577
 2184 0006 800B     		lsrs	r0, r0, #14
 2185              	.LVL150:
 337:src/xeq.c     **** 
 2186              		.loc 1 337 2 is_stmt 1 view .LVU578
 339:src/xeq.c     **** 		return OP_NIL | OP_END;
 2187              		.loc 1 339 2 view .LVU579
 339:src/xeq.c     **** 		return OP_NIL | OP_END;
ARM GAS  /tmp/ccQlyisH.s 			page 137


 2188              		.loc 1 339 5 is_stmt 0 view .LVU580
 2189 0008 BAB1     		cbz	r2, .L184
 2190              	.LVL151:
 2191              	.LBB1487:
 2192              	.LBI1487:
 310:src/xeq.c     **** 	if (region == REGION_XROM)
 2193              		.loc 1 310 5 is_stmt 1 view .LVU581
 2194              	.LBB1488:
 311:src/xeq.c     **** 		return xrom_size;
 2195              		.loc 1 311 2 view .LVU582
 311:src/xeq.c     **** 		return xrom_size;
 2196              		.loc 1 311 5 is_stmt 0 view .LVU583
 2197 000a 0328     		cmp	r0, #3
 2198 000c 18D0     		beq	.L185
 314:src/xeq.c     **** }
 2199              		.loc 1 314 3 is_stmt 1 view .LVU584
 314:src/xeq.c     **** }
 2200              		.loc 1 314 24 is_stmt 0 view .LVU585
 2201 000e 0E4A     		ldr	r2, .L187
 314:src/xeq.c     **** }
 2202              		.loc 1 314 32 view .LVU586
 2203 0010 52F82020 		ldr	r2, [r2, r0, lsl #2]
 314:src/xeq.c     **** }
 2204              		.loc 1 314 10 view .LVU587
 2205 0014 32F8022C 		ldrh	r2, [r2, #-2]
 2206              	.L181:
 2207              	.LVL152:
 314:src/xeq.c     **** }
 2208              		.loc 1 314 10 view .LVU588
 2209              	.LBE1488:
 2210              	.LBE1487:
 339:src/xeq.c     **** 		return OP_NIL | OP_END;
 2211              		.loc 1 339 17 view .LVU589
 2212 0018 9342     		cmp	r3, r2
 2213 001a 0EDA     		bge	.L184
 341:src/xeq.c     **** }
 2214              		.loc 1 341 2 is_stmt 1 view .LVU590
 341:src/xeq.c     **** }
 2215              		.loc 1 341 29 is_stmt 0 view .LVU591
 2216 001c 0A4A     		ldr	r2, .L187
 341:src/xeq.c     **** }
 2217              		.loc 1 341 38 view .LVU592
 2218 001e 52F82020 		ldr	r2, [r2, r0, lsl #2]
 2219              	.LBB1490:
 2220              	.LBB1491:
 323:src/xeq.c     **** 	if ( isDBL(r) ) {
 2221              		.loc 1 323 13 view .LVU593
 2222 0022 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 2223              	.LVL153:
 324:src/xeq.c     **** 		r |= loc[1] << 16;
 2224              		.loc 1 324 5 view .LVU594
 2225 0026 00F47041 		and	r1, r0, #61440
 2226 002a B1F5704F 		cmp	r1, #61440
 2227              	.LBE1491:
 2228              	.LBE1490:
 341:src/xeq.c     **** }
 2229              		.loc 1 341 38 view .LVU595
ARM GAS  /tmp/ccQlyisH.s 			page 138


 2230 002e 02EB4303 		add	r3, r2, r3, lsl #1
 2231              	.LVL154:
 2232              	.LBB1494:
 2233              	.LBI1490:
 321:src/xeq.c     **** {
 2234              		.loc 1 321 15 is_stmt 1 view .LVU596
 2235              	.LBB1492:
 323:src/xeq.c     **** 	if ( isDBL(r) ) {
 2236              		.loc 1 323 2 view .LVU597
 324:src/xeq.c     **** 		r |= loc[1] << 16;
 2237              		.loc 1 324 2 view .LVU598
 324:src/xeq.c     **** 		r |= loc[1] << 16;
 2238              		.loc 1 324 5 is_stmt 0 view .LVU599
 2239 0032 00D0     		beq	.L186
 2240              	.LBE1492:
 2241              	.LBE1494:
 342:src/xeq.c     **** 
 2242              		.loc 1 342 1 view .LVU600
 2243 0034 7047     		bx	lr
 2244              	.L186:
 2245              	.LBB1495:
 2246              	.LBB1493:
 325:src/xeq.c     **** 	}
 2247              		.loc 1 325 3 is_stmt 1 view .LVU601
 325:src/xeq.c     **** 	}
 2248              		.loc 1 325 5 is_stmt 0 view .LVU602
 2249 0036 1868     		ldr	r0, [r3]	@ unaligned
 2250              	.LVL155:
 325:src/xeq.c     **** 	}
 2251              		.loc 1 325 5 view .LVU603
 2252 0038 7047     		bx	lr
 2253              	.LVL156:
 2254              	.L184:
 325:src/xeq.c     **** 	}
 2255              		.loc 1 325 5 view .LVU604
 2256              	.LBE1493:
 2257              	.LBE1495:
 340:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 2258              		.loc 1 340 10 view .LVU605
 2259 003a 4FF49D70 		mov	r0, #314
 2260              	.LVL157:
 342:src/xeq.c     **** 
 2261              		.loc 1 342 1 view .LVU606
 2262 003e 7047     		bx	lr
 2263              	.LVL158:
 2264              	.L185:
 2265              	.LBB1496:
 2266              	.LBB1489:
 312:src/xeq.c     **** 	else
 2267              		.loc 1 312 3 is_stmt 1 view .LVU607
 312:src/xeq.c     **** 	else
 2268              		.loc 1 312 10 is_stmt 0 view .LVU608
 2269 0040 024A     		ldr	r2, .L187+4
 2270 0042 1288     		ldrh	r2, [r2]
 2271 0044 E8E7     		b	.L181
 2272              	.L188:
 2273 0046 00BF     		.align	2
ARM GAS  /tmp/ccQlyisH.s 			page 139


 2274              	.L187:
 2275 0048 00000000 		.word	.LANCHOR0
 2276 004c 00000000 		.word	xrom_size
 2277              	.LBE1489:
 2278              	.LBE1496:
 2279              		.cfi_endproc
 2280              	.LFE16:
 2282              		.section	.text.get_current_prog,"ax",%progbits
 2283              		.align	1
 2284              		.p2align 2,,3
 2285              		.global	get_current_prog
 2286              		.syntax unified
 2287              		.thumb
 2288              		.thumb_func
 2289              		.fpu fpv4-sp-d16
 2291              	get_current_prog:
 2292              	.LFB17:
 348:src/xeq.c     **** 
 2293              		.loc 1 348 40 is_stmt 1 view -0
 2294              		.cfi_startproc
 2295              		@ args = 0, pretend = 0, frame = 0
 2296              		@ frame_needed = 0, uses_anonymous_args = 0
 2297              		@ link register save eliminated.
 350:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2298              		.loc 1 350 2 view .LVU610
 350:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2299              		.loc 1 350 21 is_stmt 0 view .LVU611
 2300 0000 074B     		ldr	r3, .L190
 351:src/xeq.c     **** }
 2301              		.loc 1 351 18 view .LVU612
 2302 0002 084A     		ldr	r2, .L190+4
 350:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2303              		.loc 1 350 21 view .LVU613
 2304 0004 1B68     		ldr	r3, [r3]
 2305 0006 B3F8EC37 		ldrh	r3, [r3, #2028]
 2306              	.LVL159:
 351:src/xeq.c     **** }
 2307              		.loc 1 351 2 is_stmt 1 view .LVU614
 350:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2308              		.loc 1 350 12 is_stmt 0 view .LVU615
 2309 000a 990B     		lsrs	r1, r3, #14
 351:src/xeq.c     **** }
 2310              		.loc 1 351 27 view .LVU616
 2311 000c C3F30D03 		ubfx	r3, r3, #0, #14
 2312              	.LVL160:
 351:src/xeq.c     **** }
 2313              		.loc 1 351 27 view .LVU617
 2314 0010 52F82100 		ldr	r0, [r2, r1, lsl #2]
 2315 0014 03F10043 		add	r3, r3, #-2147483648
 2316 0018 013B     		subs	r3, r3, #1
 352:src/xeq.c     **** 
 2317              		.loc 1 352 1 view .LVU618
 2318 001a 00EB4300 		add	r0, r0, r3, lsl #1
 2319 001e 7047     		bx	lr
 2320              	.L191:
 2321              		.align	2
 2322              	.L190:
ARM GAS  /tmp/ccQlyisH.s 			page 140


 2323 0020 00000000 		.word	main_ram
 2324 0024 00000000 		.word	.LANCHOR0
 2325              		.cfi_endproc
 2326              	.LFE17:
 2328              		.section	.text.do_inc,"ax",%progbits
 2329              		.align	1
 2330              		.p2align 2,,3
 2331              		.global	do_inc
 2332              		.syntax unified
 2333              		.thumb
 2334              		.thumb_func
 2335              		.fpu fpv4-sp-d16
 2337              	do_inc:
 2338              	.LVL161:
 2339              	.LFB20:
 409:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2340              		.loc 1 409 54 is_stmt 1 view -0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 16
 2343              		@ frame_needed = 0, uses_anonymous_args = 0
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2344              		.loc 1 410 2 view .LVU620
 409:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2345              		.loc 1 409 54 is_stmt 0 view .LVU621
 2346 0000 70B5     		push	{r4, r5, r6, lr}
 2347              		.cfi_def_cfa_offset 16
 2348              		.cfi_offset 4, -16
 2349              		.cfi_offset 5, -12
 2350              		.cfi_offset 6, -8
 2351              		.cfi_offset 14, -4
 2352 0002 84B0     		sub	sp, sp, #16
 2353              		.cfi_def_cfa_offset 32
 409:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2354              		.loc 1 409 54 view .LVU622
 2355 0004 0546     		mov	r5, r0
 2356 0006 0191     		str	r1, [sp, #4]
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2357              		.loc 1 410 42 view .LVU623
 2358 0008 FFF7FEFF 		bl	getprog
 2359              	.LVL162:
 414:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2360              		.loc 1 414 12 view .LVU624
 2361 000c 0D4E     		ldr	r6, .L196
 415:src/xeq.c     **** 
 2362              		.loc 1 415 11 view .LVU625
 2363 000e 0199     		ldr	r1, [sp, #4]
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2364              		.loc 1 410 42 view .LVU626
 2365 0010 00F47040 		and	r0, r0, #61440
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2366              		.loc 1 410 27 view .LVU627
 2367 0014 6C1C     		adds	r4, r5, #1
 411:src/xeq.c     **** 	unsigned short int bottom = 0;
 2368              		.loc 1 411 21 view .LVU628
 2369 0016 0023     		movs	r3, #0
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2370              		.loc 1 410 27 view .LVU629
ARM GAS  /tmp/ccQlyisH.s 			page 141


 2371 0018 B0F5704F 		cmp	r0, #61440
 2372 001c 08BF     		it	eq
 2373 001e 0134     		addeq	r4, r4, #1
 415:src/xeq.c     **** 
 2374              		.loc 1 415 11 view .LVU630
 2375 0020 0DF10E02 		add	r2, sp, #14
 2376 0024 2846     		mov	r0, r5
 414:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2377              		.loc 1 414 12 view .LVU631
 2378 0026 3360     		str	r3, [r6]
 411:src/xeq.c     **** 	unsigned short int bottom = 0;
 2379              		.loc 1 411 21 view .LVU632
 2380 0028 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 415:src/xeq.c     **** 
 2381              		.loc 1 415 11 view .LVU633
 2382 002c FFF7FEFF 		bl	find_section_bounds
 2383              	.LVL163:
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2384              		.loc 1 410 27 view .LVU634
 2385 0030 A4B2     		uxth	r4, r4
 2386              	.LVL164:
 411:src/xeq.c     **** 	unsigned short int bottom = 0;
 2387              		.loc 1 411 2 is_stmt 1 view .LVU635
 412:src/xeq.c     **** 
 2388              		.loc 1 412 2 view .LVU636
 414:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2389              		.loc 1 414 2 view .LVU637
 415:src/xeq.c     **** 
 2390              		.loc 1 415 2 view .LVU638
 417:src/xeq.c     **** 		PcWrapped = 1;
 2391              		.loc 1 417 2 view .LVU639
 417:src/xeq.c     **** 		PcWrapped = 1;
 2392              		.loc 1 417 5 is_stmt 0 view .LVU640
 2393 0032 8442     		cmp	r4, r0
 418:src/xeq.c     **** 		return top;
 2394              		.loc 1 418 3 is_stmt 1 view .LVU641
 419:src/xeq.c     **** 	}
 2395              		.loc 1 419 10 is_stmt 0 view .LVU642
 2396 0034 85BF     		ittet	hi
 2397 0036 BDF80E00 		ldrhhi	r0, [sp, #14]
 2398              	.LVL165:
 418:src/xeq.c     **** 		return top;
 2399              		.loc 1 418 13 view .LVU643
 2400 003a 0123     		movhi	r3, #1
 421:src/xeq.c     **** }
 2401              		.loc 1 421 9 view .LVU644
 2402 003c 2046     		movls	r0, r4
 418:src/xeq.c     **** 		return top;
 2403              		.loc 1 418 13 view .LVU645
 2404 003e 3360     		strhi	r3, [r6]
 419:src/xeq.c     **** 	}
 2405              		.loc 1 419 3 is_stmt 1 view .LVU646
 421:src/xeq.c     **** }
 2406              		.loc 1 421 2 view .LVU647
 422:src/xeq.c     **** 
 2407              		.loc 1 422 1 is_stmt 0 view .LVU648
 2408 0040 04B0     		add	sp, sp, #16
ARM GAS  /tmp/ccQlyisH.s 			page 142


 2409              		.cfi_def_cfa_offset 16
 2410              		@ sp needed
 2411 0042 70BD     		pop	{r4, r5, r6, pc}
 2412              	.LVL166:
 2413              	.L197:
 422:src/xeq.c     **** 
 2414              		.loc 1 422 1 view .LVU649
 2415              		.align	2
 2416              	.L196:
 2417 0044 00000000 		.word	PcWrapped
 2418              		.cfi_endproc
 2419              	.LFE20:
 2421              		.section	.text.user_pc.part.0,"ax",%progbits
 2422              		.align	1
 2423              		.p2align 2,,3
 2424              		.syntax unified
 2425              		.thumb
 2426              		.thumb_func
 2427              		.fpu fpv4-sp-d16
 2429              	user_pc.part.0:
 2430              	.LVL167:
 2431              	.LFB274:
 485:src/xeq.c     **** 	unsigned int n = 1;
 2432              		.loc 1 485 14 is_stmt 1 view -0
 2433              		.cfi_startproc
 2434              		@ args = 0, pretend = 0, frame = 0
 2435              		@ frame_needed = 0, uses_anonymous_args = 0
 496:src/xeq.c     **** 	while (base < pc) {
 2436              		.loc 1 496 2 view .LVU651
 496:src/xeq.c     **** 	while (base < pc) {
 2437              		.loc 1 496 9 is_stmt 0 view .LVU652
 2438 0000 20F47F53 		bic	r3, r0, #16320
 2439 0004 23F03F03 		bic	r3, r3, #63
 485:src/xeq.c     **** 	unsigned int n = 1;
 2440              		.loc 1 485 14 view .LVU653
 2441 0008 70B5     		push	{r4, r5, r6, lr}
 2442              		.cfi_def_cfa_offset 16
 2443              		.cfi_offset 4, -16
 2444              		.cfi_offset 5, -12
 2445              		.cfi_offset 6, -8
 2446              		.cfi_offset 14, -4
 485:src/xeq.c     **** 	unsigned int n = 1;
 2447              		.loc 1 485 14 view .LVU654
 2448 000a 0546     		mov	r5, r0
 496:src/xeq.c     **** 	while (base < pc) {
 2449              		.loc 1 496 7 view .LVU655
 2450 000c 581C     		adds	r0, r3, #1
 2451              	.LVL168:
 497:src/xeq.c     **** 		base = do_inc(base, 0);
 2452              		.loc 1 497 2 is_stmt 1 view .LVU656
 497:src/xeq.c     **** 		base = do_inc(base, 0);
 2453              		.loc 1 497 8 view .LVU657
 2454 000e 8542     		cmp	r5, r0
 2455 0010 0ED9     		bls	.L201
 2456 0012 084E     		ldr	r6, .L205
 486:src/xeq.c     **** 	unsigned int base;
 2457              		.loc 1 486 15 is_stmt 0 view .LVU658
ARM GAS  /tmp/ccQlyisH.s 			page 143


 2458 0014 0124     		movs	r4, #1
 2459 0016 03E0     		b	.L200
 2460              	.LVL169:
 2461              	.L204:
 497:src/xeq.c     **** 		base = do_inc(base, 0);
 2462              		.loc 1 497 8 view .LVU659
 2463 0018 8542     		cmp	r5, r0
 501:src/xeq.c     **** 	}
 2464              		.loc 1 501 3 view .LVU660
 2465 001a 04F10104 		add	r4, r4, #1
 2466              	.LVL170:
 497:src/xeq.c     **** 		base = do_inc(base, 0);
 2467              		.loc 1 497 8 is_stmt 1 view .LVU661
 2468 001e 05D9     		bls	.L198
 2469              	.LVL171:
 2470              	.L200:
 498:src/xeq.c     **** 		if (PcWrapped)
 2471              		.loc 1 498 3 view .LVU662
 498:src/xeq.c     **** 		if (PcWrapped)
 2472              		.loc 1 498 10 is_stmt 0 view .LVU663
 2473 0020 0021     		movs	r1, #0
 2474 0022 FFF7FEFF 		bl	do_inc
 2475              	.LVL172:
 501:src/xeq.c     **** 	}
 2476              		.loc 1 501 3 is_stmt 1 view .LVU664
 499:src/xeq.c     **** 			return n;
 2477              		.loc 1 499 6 is_stmt 0 view .LVU665
 2478 0026 3368     		ldr	r3, [r6]
 2479              	.LVL173:
 499:src/xeq.c     **** 			return n;
 2480              		.loc 1 499 3 is_stmt 1 view .LVU666
 499:src/xeq.c     **** 			return n;
 2481              		.loc 1 499 6 is_stmt 0 view .LVU667
 2482 0028 002B     		cmp	r3, #0
 2483 002a F5D0     		beq	.L204
 2484              	.LVL174:
 2485              	.L198:
 504:src/xeq.c     **** 
 2486              		.loc 1 504 1 view .LVU668
 2487 002c 2046     		mov	r0, r4
 2488              	.LVL175:
 504:src/xeq.c     **** 
 2489              		.loc 1 504 1 view .LVU669
 2490 002e 70BD     		pop	{r4, r5, r6, pc}
 2491              	.LVL176:
 2492              	.L201:
 486:src/xeq.c     **** 	unsigned int base;
 2493              		.loc 1 486 15 view .LVU670
 2494 0030 0124     		movs	r4, #1
 2495 0032 FBE7     		b	.L198
 2496              	.L206:
 2497              		.align	2
 2498              	.L205:
 2499 0034 00000000 		.word	PcWrapped
 2500              		.cfi_endproc
 2501              	.LFE274:
 2503              		.section	.rodata.print_step.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/ccQlyisH.s 			page 144


 2504              		.align	2
 2505              	.LC0:
 2506 0000 3030303A 		.ascii	"000:\000"
 2506      00
 2507              		.section	.text.print_step,"ax",%progbits
 2508              		.align	1
 2509              		.p2align 2,,3
 2510              		.syntax unified
 2511              		.thumb
 2512              		.thumb_func
 2513              		.fpu fpv4-sp-d16
 2515              	print_step:
 2516              	.LVL177:
 2517              	.LFB232:
4386:src/xeq.c     **** 	char buf[16];
 2518              		.loc 1 4386 41 is_stmt 1 view -0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 16
 2521              		@ frame_needed = 0, uses_anonymous_args = 0
4387:src/xeq.c     **** 	const unsigned int pc = state_pc();
 2522              		.loc 1 4387 2 view .LVU672
4388:src/xeq.c     **** 	char *p = TraceBuffer;
 2523              		.loc 1 4388 2 view .LVU673
4388:src/xeq.c     **** 	char *p = TraceBuffer;
 2524              		.loc 1 4388 26 is_stmt 0 view .LVU674
 2525 0000 254B     		ldr	r3, .L221
 2526 0002 1B68     		ldr	r3, [r3]
4386:src/xeq.c     **** 	char buf[16];
 2527              		.loc 1 4386 41 view .LVU675
 2528 0004 F0B5     		push	{r4, r5, r6, r7, lr}
 2529              		.cfi_def_cfa_offset 20
 2530              		.cfi_offset 4, -20
 2531              		.cfi_offset 5, -16
 2532              		.cfi_offset 6, -12
 2533              		.cfi_offset 7, -8
 2534              		.cfi_offset 14, -4
4388:src/xeq.c     **** 	char *p = TraceBuffer;
 2535              		.loc 1 4388 26 view .LVU676
 2536 0006 B3F8E047 		ldrh	r4, [r3, #2016]
 2537              	.LVL178:
4389:src/xeq.c     **** 
 2538              		.loc 1 4389 2 is_stmt 1 view .LVU677
4391:src/xeq.c     **** 		*p++ = 'x';
 2539              		.loc 1 4391 2 view .LVU678
4391:src/xeq.c     **** 		*p++ = 'x';
 2540              		.loc 1 4391 6 is_stmt 0 view .LVU679
 2541 000a A10B     		lsrs	r1, r4, #14
4391:src/xeq.c     **** 		*p++ = 'x';
 2542              		.loc 1 4391 5 view .LVU680
 2543 000c 0329     		cmp	r1, #3
4386:src/xeq.c     **** 	char buf[16];
 2544              		.loc 1 4386 41 view .LVU681
 2545 000e 85B0     		sub	sp, sp, #20
 2546              		.cfi_def_cfa_offset 40
4386:src/xeq.c     **** 	char buf[16];
 2547              		.loc 1 4386 41 view .LVU682
 2548 0010 0546     		mov	r5, r0
ARM GAS  /tmp/ccQlyisH.s 			page 145


4391:src/xeq.c     **** 		*p++ = 'x';
 2549              		.loc 1 4391 5 view .LVU683
 2550 0012 39D0     		beq	.L218
4393:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2551              		.loc 1 4393 9 is_stmt 1 view .LVU684
4393:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2552              		.loc 1 4393 12 is_stmt 0 view .LVU685
 2553 0014 14F4404F 		tst	r4, #49152
 2554 0018 0FD1     		bne	.L219
4389:src/xeq.c     **** 
 2555              		.loc 1 4389 8 view .LVU686
 2556 001a 204E     		ldr	r6, .L221+4
 2557 001c 3746     		mov	r7, r6
 2558              	.LVL179:
4397:src/xeq.c     **** 		scopy(p, "000:");
 2559              		.loc 1 4397 2 is_stmt 1 view .LVU687
4397:src/xeq.c     **** 		scopy(p, "000:");
 2560              		.loc 1 4397 5 is_stmt 0 view .LVU688
 2561 001e BCB9     		cbnz	r4, .L220
 2562              	.LVL180:
 2563              	.L212:
4398:src/xeq.c     **** 	else {
 2564              		.loc 1 4398 3 is_stmt 1 view .LVU689
 2565 0020 1F49     		ldr	r1, .L221+8
 2566 0022 3846     		mov	r0, r7
 2567 0024 FFF7FEFF 		bl	scopy
 2568              	.LVL181:
 2569              	.L211:
4406:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2570              		.loc 1 4406 2 view .LVU690
4406:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2571              		.loc 1 4406 20 is_stmt 0 view .LVU691
 2572 0028 1E4A     		ldr	r2, .L221+12
4407:src/xeq.c     **** }
 2573              		.loc 1 4407 10 view .LVU692
 2574 002a 1F49     		ldr	r1, .L221+16
4406:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2575              		.loc 1 4406 20 view .LVU693
 2576 002c 937D     		ldrb	r3, [r2, #22]	@ zero_extendqisi2
4407:src/xeq.c     **** }
 2577              		.loc 1 4407 10 view .LVU694
 2578 002e 0E60     		str	r6, [r1]
4406:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2579              		.loc 1 4406 20 view .LVU695
 2580 0030 43F08003 		orr	r3, r3, #128
 2581 0034 9375     		strb	r3, [r2, #22]
4407:src/xeq.c     **** }
 2582              		.loc 1 4407 2 is_stmt 1 view .LVU696
4408:src/xeq.c     **** 
 2583              		.loc 1 4408 1 is_stmt 0 view .LVU697
 2584 0036 05B0     		add	sp, sp, #20
 2585              		.cfi_remember_state
 2586              		.cfi_def_cfa_offset 20
 2587              		@ sp needed
 2588 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
 2589              	.LVL182:
 2590              	.L219:
ARM GAS  /tmp/ccQlyisH.s 			page 146


 2591              		.cfi_restore_state
4394:src/xeq.c     **** 		*p++ = ' ';
 2592              		.loc 1 4394 3 is_stmt 1 view .LVU698
4394:src/xeq.c     **** 		*p++ = ' ';
 2593              		.loc 1 4394 7 is_stmt 0 view .LVU699
 2594 003a 1848     		ldr	r0, .L221+4
 2595              	.LVL183:
4394:src/xeq.c     **** 		*p++ = ' ';
 2596              		.loc 1 4394 7 view .LVU700
 2597 003c 0122     		movs	r2, #1
 2598 003e 0646     		mov	r6, r0
 2599 0040 FFF7FEFF 		bl	num_arg_0
 2600              	.LVL184:
4395:src/xeq.c     **** 	}
 2601              		.loc 1 4395 3 is_stmt 1 view .LVU701
4395:src/xeq.c     **** 	}
 2602              		.loc 1 4395 5 is_stmt 0 view .LVU702
 2603 0044 0746     		mov	r7, r0
 2604              	.LVL185:
4395:src/xeq.c     **** 	}
 2605              		.loc 1 4395 8 view .LVU703
 2606 0046 2023     		movs	r3, #32
 2607 0048 07F8013B 		strb	r3, [r7], #1
 2608              	.LVL186:
4397:src/xeq.c     **** 		scopy(p, "000:");
 2609              		.loc 1 4397 2 is_stmt 1 view .LVU704
4397:src/xeq.c     **** 		scopy(p, "000:");
 2610              		.loc 1 4397 5 is_stmt 0 view .LVU705
 2611 004c 002C     		cmp	r4, #0
 2612 004e E7D0     		beq	.L212
 2613              	.L220:
 2614              	.LVL187:
 2615              	.LBB1497:
 2616              	.LBB1498:
4397:src/xeq.c     **** 		scopy(p, "000:");
 2617              		.loc 1 4397 5 view .LVU706
 2618 0050 2046     		mov	r0, r4
 2619 0052 FFF7FEFF 		bl	user_pc.part.0
 2620              	.LVL188:
 2621 0056 0146     		mov	r1, r0
 2622              	.L209:
4397:src/xeq.c     **** 		scopy(p, "000:");
 2623              		.loc 1 4397 5 view .LVU707
 2624              	.LBE1498:
 2625              	.LBE1497:
4400:src/xeq.c     **** 		*p++ = ':';
 2626              		.loc 1 4400 7 view .LVU708
 2627 0058 0322     		movs	r2, #3
 2628 005a 3846     		mov	r0, r7
 2629 005c FFF7FEFF 		bl	num_arg_0
 2630              	.LVL189:
4401:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2631              		.loc 1 4401 8 view .LVU709
 2632 0060 0746     		mov	r7, r0
 2633 0062 3A23     		movs	r3, #58
 2634 0064 07F8013B 		strb	r3, [r7], #1
4400:src/xeq.c     **** 		*p++ = ':';
ARM GAS  /tmp/ccQlyisH.s 			page 147


 2635              		.loc 1 4400 7 view .LVU710
 2636 0068 0446     		mov	r4, r0
 2637              	.LVL190:
4401:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2638              		.loc 1 4401 3 is_stmt 1 view .LVU711
4402:src/xeq.c     **** 		if (*p == '?')
 2639              		.loc 1 4402 3 view .LVU712
 2640 006a 6946     		mov	r1, sp
 2641 006c 2846     		mov	r0, r5
 2642 006e FFF7FEFF 		bl	prt
 2643              	.LVL191:
 2644 0072 0022     		movs	r2, #0
 2645 0074 0146     		mov	r1, r0
 2646 0076 3846     		mov	r0, r7
 2647 0078 FFF7FEFF 		bl	scopy_char
 2648              	.LVL192:
4403:src/xeq.c     **** 			*p = '\0';
 2649              		.loc 1 4403 3 view .LVU713
4403:src/xeq.c     **** 			*p = '\0';
 2650              		.loc 1 4403 6 is_stmt 0 view .LVU714
 2651 007c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2652 007e 3F2B     		cmp	r3, #63
4404:src/xeq.c     **** 	}
 2653              		.loc 1 4404 4 is_stmt 1 view .LVU715
4404:src/xeq.c     **** 	}
 2654              		.loc 1 4404 7 is_stmt 0 view .LVU716
 2655 0080 04BF     		itt	eq
 2656 0082 0023     		moveq	r3, #0
 2657 0084 6370     		strbeq	r3, [r4, #1]
 2658 0086 CFE7     		b	.L211
 2659              	.LVL193:
 2660              	.L218:
4392:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2661              		.loc 1 4392 3 is_stmt 1 view .LVU717
4392:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2662              		.loc 1 4392 8 is_stmt 0 view .LVU718
 2663 0088 044E     		ldr	r6, .L221+4
 2664 008a 3746     		mov	r7, r6
 2665 008c 7823     		movs	r3, #120
 2666 008e 07F8013B 		strb	r3, [r7], #1
4397:src/xeq.c     **** 		scopy(p, "000:");
 2667              		.loc 1 4397 2 is_stmt 1 view .LVU719
4400:src/xeq.c     **** 		*p++ = ':';
 2668              		.loc 1 4400 3 view .LVU720
 2669              	.LBB1500:
 2670              	.LBI1497:
 485:src/xeq.c     **** 	unsigned int n = 1;
 2671              		.loc 1 485 14 view .LVU721
 2672              	.LBB1499:
 486:src/xeq.c     **** 	unsigned int base;
 2673              		.loc 1 486 2 view .LVU722
 2674              	.LVL194:
 487:src/xeq.c     **** 
 2675              		.loc 1 487 2 view .LVU723
 490:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 2676              		.loc 1 490 2 view .LVU724
 491:src/xeq.c     **** #else
ARM GAS  /tmp/ccQlyisH.s 			page 148


 2677              		.loc 1 491 3 view .LVU725
 491:src/xeq.c     **** #else
 2678              		.loc 1 491 24 is_stmt 0 view .LVU726
 2679 0092 C4F30D01 		ubfx	r1, r4, #0, #14
 2680 0096 DFE7     		b	.L209
 2681              	.L222:
 2682              		.align	2
 2683              	.L221:
 2684 0098 00000000 		.word	main_ram
 2685 009c 00000000 		.word	TraceBuffer
 2686 00a0 00000000 		.word	.LC0
 2687 00a4 00000000 		.word	StateWhileOn
 2688 00a8 00000000 		.word	DispMsg
 2689              	.LBE1499:
 2690              	.LBE1500:
 2691              		.cfi_endproc
 2692              	.LFE232:
 2694              		.section	.text.do_dec,"ax",%progbits
 2695              		.align	1
 2696              		.p2align 2,,3
 2697              		.global	do_dec
 2698              		.syntax unified
 2699              		.thumb
 2700              		.thumb_func
 2701              		.fpu fpv4-sp-d16
 2703              	do_dec:
 2704              	.LVL195:
 2705              	.LFB21:
 428:src/xeq.c     **** 	unsigned short int top = 0;
 2706              		.loc 1 428 48 is_stmt 1 view -0
 2707              		.cfi_startproc
 2708              		@ args = 0, pretend = 0, frame = 8
 2709              		@ frame_needed = 0, uses_anonymous_args = 0
 429:src/xeq.c     **** 	unsigned short int bottom = 0;
 2710              		.loc 1 429 2 view .LVU728
 428:src/xeq.c     **** 	unsigned short int top = 0;
 2711              		.loc 1 428 48 is_stmt 0 view .LVU729
 2712 0000 70B5     		push	{r4, r5, r6, lr}
 2713              		.cfi_def_cfa_offset 16
 2714              		.cfi_offset 4, -16
 2715              		.cfi_offset 5, -12
 2716              		.cfi_offset 6, -8
 2717              		.cfi_offset 14, -4
 432:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2718              		.loc 1 432 12 view .LVU730
 2719 0002 114E     		ldr	r6, .L228
 428:src/xeq.c     **** 	unsigned short int top = 0;
 2720              		.loc 1 428 48 view .LVU731
 2721 0004 82B0     		sub	sp, sp, #8
 2722              		.cfi_def_cfa_offset 24
 429:src/xeq.c     **** 	unsigned short int bottom = 0;
 2723              		.loc 1 429 21 view .LVU732
 2724 0006 0023     		movs	r3, #0
 433:src/xeq.c     **** 
 2725              		.loc 1 433 11 view .LVU733
 2726 0008 0DF10602 		add	r2, sp, #6
 428:src/xeq.c     **** 	unsigned short int top = 0;
ARM GAS  /tmp/ccQlyisH.s 			page 149


 2727              		.loc 1 428 48 view .LVU734
 2728 000c 0546     		mov	r5, r0
 432:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2729              		.loc 1 432 12 view .LVU735
 2730 000e 3360     		str	r3, [r6]
 429:src/xeq.c     **** 	unsigned short int bottom = 0;
 2731              		.loc 1 429 21 view .LVU736
 2732 0010 ADF80630 		strh	r3, [sp, #6]	@ movhi
 430:src/xeq.c     **** 
 2733              		.loc 1 430 2 is_stmt 1 view .LVU737
 2734              	.LVL196:
 432:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2735              		.loc 1 432 2 view .LVU738
 433:src/xeq.c     **** 
 2736              		.loc 1 433 2 view .LVU739
 433:src/xeq.c     **** 
 2737              		.loc 1 433 11 is_stmt 0 view .LVU740
 2738 0014 FFF7FEFF 		bl	find_section_bounds
 2739              	.LVL197:
 435:src/xeq.c     **** 		PcWrapped = 1;
 2740              		.loc 1 435 9 view .LVU741
 2741 0018 BDF80630 		ldrh	r3, [sp, #6]
 2742              	.LVL198:
 435:src/xeq.c     **** 		PcWrapped = 1;
 2743              		.loc 1 435 2 is_stmt 1 view .LVU742
 435:src/xeq.c     **** 		PcWrapped = 1;
 2744              		.loc 1 435 5 is_stmt 0 view .LVU743
 2745 001c AB42     		cmp	r3, r5
 436:src/xeq.c     **** 		pc = bottom;
 2746              		.loc 1 436 13 view .LVU744
 2747 001e 25BF     		ittet	cs
 2748 0020 0122     		movcs	r2, #1
 2749 0022 0446     		movcs	r4, r0
 436:src/xeq.c     **** 		pc = bottom;
 2750              		.loc 1 436 3 is_stmt 1 view .LVU745
 440:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2751              		.loc 1 440 3 is_stmt 0 view .LVU746
 2752 0024 05F1FF34 		addcc	r4, r5, #-1
 436:src/xeq.c     **** 		pc = bottom;
 2753              		.loc 1 436 13 view .LVU747
 2754 0028 3260     		strcs	r2, [r6]
 437:src/xeq.c     **** 	}
 2755              		.loc 1 437 3 is_stmt 1 view .LVU748
 2756              	.LVL199:
 440:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2757              		.loc 1 440 3 view .LVU749
 441:src/xeq.c     **** 		--pc;
 2758              		.loc 1 441 2 view .LVU750
 441:src/xeq.c     **** 		--pc;
 2759              		.loc 1 441 5 is_stmt 0 view .LVU751
 2760 002a A342     		cmp	r3, r4
 2761 002c 09D2     		bcs	.L223
 441:src/xeq.c     **** 		--pc;
 2762              		.loc 1 441 18 discriminator 1 view .LVU752
 2763 002e 651E     		subs	r5, r4, #1
 2764 0030 2846     		mov	r0, r5
 2765              	.LVL200:
ARM GAS  /tmp/ccQlyisH.s 			page 150


 441:src/xeq.c     **** 		--pc;
 2766              		.loc 1 441 18 discriminator 1 view .LVU753
 2767 0032 FFF7FEFF 		bl	getprog
 2768              	.LVL201:
 2769 0036 00F47040 		and	r0, r0, #61440
 442:src/xeq.c     **** 	return pc;
 2770              		.loc 1 442 3 discriminator 1 view .LVU754
 2771 003a B0F5704F 		cmp	r0, #61440
 2772 003e 08BF     		it	eq
 2773 0040 2C46     		moveq	r4, r5
 2774              	.LVL202:
 2775              	.L223:
 444:src/xeq.c     **** 
 2776              		.loc 1 444 1 view .LVU755
 2777 0042 2046     		mov	r0, r4
 2778 0044 02B0     		add	sp, sp, #8
 2779              		.cfi_def_cfa_offset 16
 2780              		@ sp needed
 2781 0046 70BD     		pop	{r4, r5, r6, pc}
 2782              	.L229:
 2783              		.align	2
 2784              	.L228:
 2785 0048 00000000 		.word	PcWrapped
 2786              		.cfi_endproc
 2787              	.LFE21:
 2789              		.section	.text.update_program_bounds,"ax",%progbits
 2790              		.align	1
 2791              		.p2align 2,,3
 2792              		.global	update_program_bounds
 2793              		.syntax unified
 2794              		.thumb
 2795              		.thumb_func
 2796              		.fpu fpv4-sp-d16
 2798              	update_program_bounds:
 2799              	.LVL203:
 2800              	.LFB24:
 461:src/xeq.c     **** 	unsigned int pc = state_pc();
 2801              		.loc 1 461 45 is_stmt 1 view -0
 2802              		.cfi_startproc
 2803              		@ args = 0, pretend = 0, frame = 0
 2804              		@ frame_needed = 0, uses_anonymous_args = 0
 462:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2805              		.loc 1 462 2 view .LVU757
 461:src/xeq.c     **** 	unsigned int pc = state_pc();
 2806              		.loc 1 461 45 is_stmt 0 view .LVU758
 2807 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2808              		.cfi_def_cfa_offset 24
 2809              		.cfi_offset 3, -24
 2810              		.cfi_offset 4, -20
 2811              		.cfi_offset 5, -16
 2812              		.cfi_offset 6, -12
 2813              		.cfi_offset 7, -8
 2814              		.cfi_offset 14, -4
 462:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2815              		.loc 1 462 20 view .LVU759
 2816 0002 224F     		ldr	r7, .L251
 2817 0004 3D68     		ldr	r5, [r7]
ARM GAS  /tmp/ccQlyisH.s 			page 151


 462:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2818              		.loc 1 462 15 view .LVU760
 2819 0006 B5F8E047 		ldrh	r4, [r5, #2016]
 2820              	.LVL204:
 463:src/xeq.c     **** 		State.pc = pc = 1;
 2821              		.loc 1 463 2 is_stmt 1 view .LVU761
 463:src/xeq.c     **** 		State.pc = pc = 1;
 2822              		.loc 1 463 5 is_stmt 0 view .LVU762
 2823 000a 34B9     		cbnz	r4, .L231
 463:src/xeq.c     **** 		State.pc = pc = 1;
 2824              		.loc 1 463 14 discriminator 1 view .LVU763
 2825 000c 204B     		ldr	r3, .L251+4
 2826 000e 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2827 0010 5B06     		lsls	r3, r3, #25
 464:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2828              		.loc 1 464 3 is_stmt 1 discriminator 1 view .LVU764
 2829              	.LVL205:
 464:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2830              		.loc 1 464 12 is_stmt 0 discriminator 1 view .LVU765
 2831 0012 44BF     		itt	mi
 2832 0014 0124     		movmi	r4, #1
 2833 0016 A5F8E047 		strhmi	r4, [r5, #2016]	@ movhi
 2834              	.LVL206:
 2835              	.L231:
 465:src/xeq.c     **** 		return;
 2836              		.loc 1 465 2 is_stmt 1 view .LVU766
 465:src/xeq.c     **** 		return;
 2837              		.loc 1 465 5 is_stmt 0 view .LVU767
 2838 001a 18B9     		cbnz	r0, .L232
 465:src/xeq.c     **** 		return;
 2839              		.loc 1 465 23 discriminator 1 view .LVU768
 2840 001c B5F8EC37 		ldrh	r3, [r5, #2028]
 465:src/xeq.c     **** 		return;
 2841              		.loc 1 465 14 discriminator 1 view .LVU769
 2842 0020 A342     		cmp	r3, r4
 2843 0022 2DD9     		bls	.L248
 2844              	.L232:
 467:src/xeq.c     **** 		ProgEnd = pc;
 2845              		.loc 1 467 2 is_stmt 1 view .LVU770
 467:src/xeq.c     **** 		ProgEnd = pc;
 2846              		.loc 1 467 17 is_stmt 0 view .LVU771
 2847 0024 1B4E     		ldr	r6, .L251+8
 2848 0026 0023     		movs	r3, #0
 2849 0028 3360     		str	r3, [r6]
 467:src/xeq.c     **** 		ProgEnd = pc;
 2850              		.loc 1 467 22 is_stmt 1 view .LVU772
 2851 002a 05E0     		b	.L236
 2852              	.LVL207:
 2853              	.L249:
 467:src/xeq.c     **** 		ProgEnd = pc;
 2854              		.loc 1 467 39 is_stmt 0 discriminator 2 view .LVU773
 2855 002c FFF7FEFF 		bl	do_inc
 2856              	.LVL208:
 467:src/xeq.c     **** 		ProgEnd = pc;
 2857              		.loc 1 467 2 discriminator 2 view .LVU774
 2858 0030 3368     		ldr	r3, [r6]
 2859 0032 3D68     		ldr	r5, [r7]
ARM GAS  /tmp/ccQlyisH.s 			page 152


 467:src/xeq.c     **** 		ProgEnd = pc;
 2860              		.loc 1 467 39 discriminator 2 view .LVU775
 2861 0034 0446     		mov	r4, r0
 2862              	.LVL209:
 467:src/xeq.c     **** 		ProgEnd = pc;
 2863              		.loc 1 467 22 is_stmt 1 discriminator 2 view .LVU776
 467:src/xeq.c     **** 		ProgEnd = pc;
 2864              		.loc 1 467 2 is_stmt 0 discriminator 2 view .LVU777
 2865 0036 5BB9     		cbnz	r3, .L234
 2866              	.LVL210:
 2867              	.L236:
 468:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2868              		.loc 1 468 3 is_stmt 1 view .LVU778
 468:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2869              		.loc 1 468 11 is_stmt 0 view .LVU779
 2870 0038 A5F8EE47 		strh	r4, [r5, #2030]	@ movhi
 469:src/xeq.c     **** 			break;
 2871              		.loc 1 469 3 is_stmt 1 view .LVU780
 469:src/xeq.c     **** 			break;
 2872              		.loc 1 469 7 is_stmt 0 view .LVU781
 2873 003c 2046     		mov	r0, r4
 2874 003e FFF7FEFF 		bl	getprog
 2875              	.LVL211:
 467:src/xeq.c     **** 		ProgEnd = pc;
 2876              		.loc 1 467 34 is_stmt 1 view .LVU782
 469:src/xeq.c     **** 			break;
 2877              		.loc 1 469 7 is_stmt 0 view .LVU783
 2878 0042 0346     		mov	r3, r0
 469:src/xeq.c     **** 			break;
 2879              		.loc 1 469 6 view .LVU784
 2880 0044 B3F59D7F 		cmp	r3, #314
 467:src/xeq.c     **** 		ProgEnd = pc;
 2881              		.loc 1 467 39 view .LVU785
 2882 0048 4FF00001 		mov	r1, #0
 2883 004c 2046     		mov	r0, r4
 469:src/xeq.c     **** 			break;
 2884              		.loc 1 469 6 view .LVU786
 2885 004e EDD1     		bne	.L249
 2886              	.LVL212:
 2887              	.L234:
 473:src/xeq.c     **** 		const unsigned int opc = pc;
 2888              		.loc 1 473 2 is_stmt 1 view .LVU787
 473:src/xeq.c     **** 		const unsigned int opc = pc;
 2889              		.loc 1 473 10 is_stmt 0 view .LVU788
 2890 0050 B5F8E047 		ldrh	r4, [r5, #2016]
 2891              	.LVL213:
 473:src/xeq.c     **** 		const unsigned int opc = pc;
 2892              		.loc 1 473 10 view .LVU789
 2893 0054 04E0     		b	.L238
 2894              	.LVL214:
 2895              	.L250:
 2896              	.LBB1501:
 476:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2897              		.loc 1 476 20 discriminator 1 view .LVU790
 2898 0056 FFF7FEFF 		bl	getprog
 2899              	.LVL215:
 476:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
ARM GAS  /tmp/ccQlyisH.s 			page 153


 2900              		.loc 1 476 17 discriminator 1 view .LVU791
 2901 005a B0F59D7F 		cmp	r0, #314
 2902 005e 08D0     		beq	.L237
 2903              	.LVL216:
 2904              	.L238:
 474:src/xeq.c     **** 		pc = do_dec(opc, 0);
 2905              		.loc 1 474 3 is_stmt 1 view .LVU792
 475:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2906              		.loc 1 475 3 view .LVU793
 475:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2907              		.loc 1 475 8 is_stmt 0 view .LVU794
 2908 0060 2046     		mov	r0, r4
 2909 0062 0021     		movs	r1, #0
 2910 0064 FFF7FEFF 		bl	do_dec
 2911              	.LVL217:
 476:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2912              		.loc 1 476 6 view .LVU795
 2913 0068 3368     		ldr	r3, [r6]
 2914 006a 2546     		mov	r5, r4
 475:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2915              		.loc 1 475 8 view .LVU796
 2916 006c 0446     		mov	r4, r0
 2917              	.LVL218:
 476:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2918              		.loc 1 476 3 is_stmt 1 view .LVU797
 476:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2919              		.loc 1 476 6 is_stmt 0 view .LVU798
 2920 006e 002B     		cmp	r3, #0
 2921 0070 F1D0     		beq	.L250
 2922              	.LVL219:
 2923              	.L237:
 477:src/xeq.c     **** 			break;
 2924              		.loc 1 477 4 is_stmt 1 view .LVU799
 477:src/xeq.c     **** 			break;
 2925              		.loc 1 477 14 is_stmt 0 view .LVU800
 2926 0072 3B68     		ldr	r3, [r7]
 2927 0074 012D     		cmp	r5, #1
 2928 0076 38BF     		it	cc
 2929 0078 0125     		movcc	r5, #1
 2930              	.LVL220:
 477:src/xeq.c     **** 			break;
 2931              		.loc 1 477 14 view .LVU801
 2932 007a A3F8EC57 		strh	r5, [r3, #2028]	@ movhi
 478:src/xeq.c     **** 		}
 2933              		.loc 1 478 4 is_stmt 1 view .LVU802
 2934              	.LBE1501:
 481:src/xeq.c     **** 
 2935              		.loc 1 481 1 is_stmt 0 view .LVU803
 2936 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2937              	.LVL221:
 2938              	.L248:
 465:src/xeq.c     **** 		return;
 2939              		.loc 1 465 42 discriminator 2 view .LVU804
 2940 0080 B5F8EE37 		ldrh	r3, [r5, #2030]
 465:src/xeq.c     **** 		return;
 2941              		.loc 1 465 33 discriminator 2 view .LVU805
 2942 0084 A342     		cmp	r3, r4
ARM GAS  /tmp/ccQlyisH.s 			page 154


 2943 0086 CDD3     		bcc	.L232
 481:src/xeq.c     **** 
 2944              		.loc 1 481 1 view .LVU806
 2945 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2946              	.LVL222:
 2947              	.L252:
 481:src/xeq.c     **** 
 2948              		.loc 1 481 1 view .LVU807
 2949 008a 00BF     		.align	2
 2950              	.L251:
 2951 008c 00000000 		.word	main_ram
 2952 0090 00000000 		.word	StateWhileOn
 2953 0094 00000000 		.word	PcWrapped
 2954              		.cfi_endproc
 2955              	.LFE24:
 2957              		.section	.text.set_pc,"ax",%progbits
 2958              		.align	1
 2959              		.p2align 2,,3
 2960              		.global	set_pc
 2961              		.syntax unified
 2962              		.thumb
 2963              		.thumb_func
 2964              		.fpu fpv4-sp-d16
 2966              	set_pc:
 2967              	.LVL223:
 2968              	.LFB18:
 358:src/xeq.c     **** 	if (isRAM(pc)) {
 2969              		.loc 1 358 30 is_stmt 1 view -0
 2970              		.cfi_startproc
 2971              		@ args = 0, pretend = 0, frame = 0
 2972              		@ frame_needed = 0, uses_anonymous_args = 0
 359:src/xeq.c     **** 		if (pc > ProgSize)
 2973              		.loc 1 359 2 view .LVU809
 359:src/xeq.c     **** 		if (pc > ProgSize)
 2974              		.loc 1 359 5 is_stmt 0 view .LVU810
 2975 0000 10F4704F 		tst	r0, #61440
 358:src/xeq.c     **** 	if (isRAM(pc)) {
 2976              		.loc 1 358 30 view .LVU811
 2977 0004 38B5     		push	{r3, r4, r5, lr}
 2978              		.cfi_def_cfa_offset 16
 2979              		.cfi_offset 3, -16
 2980              		.cfi_offset 4, -12
 2981              		.cfi_offset 5, -8
 2982              		.cfi_offset 14, -4
 358:src/xeq.c     **** 	if (isRAM(pc)) {
 2983              		.loc 1 358 30 view .LVU812
 2984 0006 0446     		mov	r4, r0
 359:src/xeq.c     **** 		if (pc > ProgSize)
 2985              		.loc 1 359 5 view .LVU813
 2986 0008 15D1     		bne	.L254
 360:src/xeq.c     **** 			pc = ProgSize;
 2987              		.loc 1 360 3 is_stmt 1 view .LVU814
 360:src/xeq.c     **** 			pc = ProgSize;
 2988              		.loc 1 360 12 is_stmt 0 view .LVU815
 2989 000a 264B     		ldr	r3, .L262
 2990 000c 1B68     		ldr	r3, [r3]
 2991 000e 5A88     		ldrh	r2, [r3, #2]
ARM GAS  /tmp/ccQlyisH.s 			page 155


 2992 0010 9042     		cmp	r0, r2
 2993 0012 28BF     		it	cs
 2994 0014 1446     		movcs	r4, r2
 2995              	.LVL224:
 362:src/xeq.c     **** 			pc--;
 2996              		.loc 1 362 3 is_stmt 1 view .LVU816
 362:src/xeq.c     **** 			pc--;
 2997              		.loc 1 362 6 is_stmt 0 view .LVU817
 2998 0016 012C     		cmp	r4, #1
 2999 0018 06D9     		bls	.L255
 362:src/xeq.c     **** 			pc--;
 3000              		.loc 1 362 14 discriminator 1 view .LVU818
 3001 001a 33F81420 		ldrh	r2, [r3, r4, lsl #1]
 3002 001e 02F47042 		and	r2, r2, #61440
 3003 0022 B2F5704F 		cmp	r2, #61440
 3004 0026 35D0     		beq	.L261
 3005              	.L255:
 371:src/xeq.c     **** }
 3006              		.loc 1 371 2 is_stmt 1 view .LVU819
 3007              	.LVL225:
 3008              	.LBB1502:
 3009              	.LBI1502:
 279:src/xeq.c     **** 	State.pc = pc;
 3010              		.loc 1 279 13 view .LVU820
 3011              	.LBB1503:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3012              		.loc 1 280 2 view .LVU821
 280:src/xeq.c     **** 	update_program_bounds(0);
 3013              		.loc 1 280 11 is_stmt 0 view .LVU822
 3014 0028 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3015              		.loc 1 281 2 is_stmt 1 view .LVU823
 3016 002c 0020     		movs	r0, #0
 3017              	.LBE1503:
 3018              	.LBE1502:
 372:src/xeq.c     **** 
 3019              		.loc 1 372 1 is_stmt 0 view .LVU824
 3020 002e BDE83840 		pop	{r3, r4, r5, lr}
 3021              		.cfi_remember_state
 3022              		.cfi_restore 14
 3023              		.cfi_restore 5
 3024              		.cfi_restore 4
 3025              		.cfi_restore 3
 3026              		.cfi_def_cfa_offset 0
 3027              	.LVL226:
 3028              	.LBB1511:
 3029              	.LBB1504:
 281:src/xeq.c     **** }
 3030              		.loc 1 281 2 view .LVU825
 3031 0032 FFF7FEBF 		b	update_program_bounds
 3032              	.LVL227:
 3033              	.L254:
 3034              		.cfi_restore_state
 281:src/xeq.c     **** }
 3035              		.loc 1 281 2 view .LVU826
 3036              	.LBE1504:
 3037              	.LBE1511:
ARM GAS  /tmp/ccQlyisH.s 			page 156


 364:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3038              		.loc 1 364 9 is_stmt 1 view .LVU827
 364:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3039              		.loc 1 364 14 is_stmt 0 view .LVU828
 3040 0036 820B     		lsrs	r2, r0, #14
 364:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3041              		.loc 1 364 12 view .LVU829
 3042 0038 032A     		cmp	r2, #3
 3043 003a 22D0     		beq	.L260
 3044              	.LBB1512:
 365:src/xeq.c     **** 		if (pc > n - 1)
 3045              		.loc 1 365 3 is_stmt 1 view .LVU830
 3046              	.LVL228:
 3047              	.LBB1513:
 3048              	.LBI1513:
 310:src/xeq.c     **** 	if (region == REGION_XROM)
 3049              		.loc 1 310 5 view .LVU831
 3050              	.LBB1514:
 311:src/xeq.c     **** 		return xrom_size;
 3051              		.loc 1 311 2 view .LVU832
 314:src/xeq.c     **** }
 3052              		.loc 1 314 3 view .LVU833
 314:src/xeq.c     **** }
 3053              		.loc 1 314 24 is_stmt 0 view .LVU834
 3054 003c 1A49     		ldr	r1, .L262+4
 3055              	.LBE1514:
 3056              	.LBE1513:
 365:src/xeq.c     **** 		if (pc > n - 1)
 3057              		.loc 1 365 26 view .LVU835
 3058 003e 1B4B     		ldr	r3, .L262+8
 3059              	.LBB1516:
 3060              	.LBB1515:
 314:src/xeq.c     **** }
 3061              		.loc 1 314 32 view .LVU836
 3062 0040 51F82220 		ldr	r2, [r1, r2, lsl #2]
 3063              	.LBE1515:
 3064              	.LBE1516:
 365:src/xeq.c     **** 		if (pc > n - 1)
 3065              		.loc 1 365 39 view .LVU837
 3066 0044 32F8022C 		ldrh	r2, [r2, #-2]
 365:src/xeq.c     **** 		if (pc > n - 1)
 3067              		.loc 1 365 26 view .LVU838
 3068 0048 00EA0301 		and	r1, r0, r3
 365:src/xeq.c     **** 		if (pc > n - 1)
 3069              		.loc 1 365 39 view .LVU839
 3070 004c 0A44     		add	r2, r2, r1
 3071              	.LVL229:
 366:src/xeq.c     **** 			pc = n - 1;
 3072              		.loc 1 366 3 is_stmt 1 view .LVU840
 3073 004e 9042     		cmp	r0, r2
 3074 0050 28BF     		it	cs
 3075 0052 1446     		movcs	r4, r2
 3076              	.LVL230:
 368:src/xeq.c     **** 			--pc;
 3077              		.loc 1 368 3 view .LVU841
 368:src/xeq.c     **** 			--pc;
 3078              		.loc 1 368 12 is_stmt 0 view .LVU842
ARM GAS  /tmp/ccQlyisH.s 			page 157


 3079 0054 2340     		ands	r3, r3, r4
 3080 0056 0133     		adds	r3, r3, #1
 368:src/xeq.c     **** 			--pc;
 3081              		.loc 1 368 6 view .LVU843
 3082 0058 A342     		cmp	r3, r4
 3083 005a 12D2     		bcs	.L260
 368:src/xeq.c     **** 			--pc;
 3084              		.loc 1 368 28 discriminator 1 view .LVU844
 3085 005c 651E     		subs	r5, r4, #1
 3086 005e 2846     		mov	r0, r5
 3087 0060 FFF7FEFF 		bl	getprog
 3088              	.LVL231:
 368:src/xeq.c     **** 			--pc;
 3089              		.loc 1 368 28 discriminator 1 view .LVU845
 3090 0064 0F4B     		ldr	r3, .L262
 3091 0066 00F47040 		and	r0, r0, #61440
 3092 006a 1B68     		ldr	r3, [r3]
 368:src/xeq.c     **** 			--pc;
 3093              		.loc 1 368 25 discriminator 1 view .LVU846
 3094 006c B0F5704F 		cmp	r0, #61440
 369:src/xeq.c     **** 	}
 3095              		.loc 1 369 4 is_stmt 1 discriminator 1 view .LVU847
 3096              	.LVL232:
 369:src/xeq.c     **** 	}
 3097              		.loc 1 369 4 is_stmt 0 discriminator 1 view .LVU848
 3098 0070 08BF     		it	eq
 3099 0072 2C46     		moveq	r4, r5
 3100              	.LVL233:
 369:src/xeq.c     **** 	}
 3101              		.loc 1 369 4 discriminator 1 view .LVU849
 3102              	.LBE1512:
 371:src/xeq.c     **** }
 3103              		.loc 1 371 2 is_stmt 1 discriminator 1 view .LVU850
 3104              	.LBB1517:
 279:src/xeq.c     **** 	State.pc = pc;
 3105              		.loc 1 279 13 discriminator 1 view .LVU851
 3106              	.LBB1505:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3107              		.loc 1 280 2 discriminator 1 view .LVU852
 280:src/xeq.c     **** 	update_program_bounds(0);
 3108              		.loc 1 280 11 is_stmt 0 discriminator 1 view .LVU853
 3109 0074 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3110              		.loc 1 281 2 is_stmt 1 discriminator 1 view .LVU854
 3111 0078 0020     		movs	r0, #0
 3112              	.LBE1505:
 3113              	.LBE1517:
 372:src/xeq.c     **** 
 3114              		.loc 1 372 1 is_stmt 0 discriminator 1 view .LVU855
 3115 007a BDE83840 		pop	{r3, r4, r5, lr}
 3116              		.cfi_remember_state
 3117              		.cfi_restore 14
 3118              		.cfi_restore 5
 3119              		.cfi_restore 4
 3120              		.cfi_restore 3
 3121              		.cfi_def_cfa_offset 0
 3122              	.LVL234:
ARM GAS  /tmp/ccQlyisH.s 			page 158


 3123              	.LBB1518:
 3124              	.LBB1506:
 281:src/xeq.c     **** }
 3125              		.loc 1 281 2 discriminator 1 view .LVU856
 3126 007e FFF7FEBF 		b	update_program_bounds
 3127              	.LVL235:
 3128              	.L260:
 3129              		.cfi_restore_state
 281:src/xeq.c     **** }
 3130              		.loc 1 281 2 discriminator 1 view .LVU857
 3131 0082 084B     		ldr	r3, .L262
 3132 0084 1B68     		ldr	r3, [r3]
 281:src/xeq.c     **** }
 3133              		.loc 1 281 2 discriminator 1 view .LVU858
 3134              	.LBE1506:
 3135              	.LBE1518:
 371:src/xeq.c     **** }
 3136              		.loc 1 371 2 is_stmt 1 view .LVU859
 3137              	.LVL236:
 3138              	.LBB1519:
 279:src/xeq.c     **** 	State.pc = pc;
 3139              		.loc 1 279 13 view .LVU860
 3140              	.LBB1507:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3141              		.loc 1 280 2 view .LVU861
 281:src/xeq.c     **** }
 3142              		.loc 1 281 2 is_stmt 0 view .LVU862
 3143 0086 0020     		movs	r0, #0
 280:src/xeq.c     **** 	update_program_bounds(0);
 3144              		.loc 1 280 11 view .LVU863
 3145 0088 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3146              		.loc 1 281 2 is_stmt 1 view .LVU864
 3147              	.LBE1507:
 3148              	.LBE1519:
 372:src/xeq.c     **** 
 3149              		.loc 1 372 1 is_stmt 0 view .LVU865
 3150 008c BDE83840 		pop	{r3, r4, r5, lr}
 3151              		.cfi_remember_state
 3152              		.cfi_restore 14
 3153              		.cfi_restore 5
 3154              		.cfi_restore 4
 3155              		.cfi_restore 3
 3156              		.cfi_def_cfa_offset 0
 3157              	.LVL237:
 3158              	.LBB1520:
 3159              	.LBB1508:
 281:src/xeq.c     **** }
 3160              		.loc 1 281 2 view .LVU866
 3161 0090 FFF7FEBF 		b	update_program_bounds
 3162              	.LVL238:
 3163              	.L261:
 3164              		.cfi_restore_state
 281:src/xeq.c     **** }
 3165              		.loc 1 281 2 view .LVU867
 3166              	.LBE1508:
 3167              	.LBE1520:
ARM GAS  /tmp/ccQlyisH.s 			page 159


 363:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3168              		.loc 1 363 4 is_stmt 1 view .LVU868
 363:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3169              		.loc 1 363 6 is_stmt 0 view .LVU869
 3170 0094 013C     		subs	r4, r4, #1
 3171              	.LVL239:
 371:src/xeq.c     **** }
 3172              		.loc 1 371 2 is_stmt 1 view .LVU870
 3173              	.LBB1521:
 279:src/xeq.c     **** 	State.pc = pc;
 3174              		.loc 1 279 13 view .LVU871
 3175              	.LBB1509:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3176              		.loc 1 280 2 view .LVU872
 280:src/xeq.c     **** 	update_program_bounds(0);
 3177              		.loc 1 280 11 is_stmt 0 view .LVU873
 3178 0096 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3179              		.loc 1 281 2 is_stmt 1 view .LVU874
 3180 009a 0020     		movs	r0, #0
 3181              	.LBE1509:
 3182              	.LBE1521:
 372:src/xeq.c     **** 
 3183              		.loc 1 372 1 is_stmt 0 view .LVU875
 3184 009c BDE83840 		pop	{r3, r4, r5, lr}
 3185              		.cfi_restore 14
 3186              		.cfi_restore 5
 3187              		.cfi_restore 4
 3188              		.cfi_restore 3
 3189              		.cfi_def_cfa_offset 0
 3190              	.LVL240:
 3191              	.LBB1522:
 3192              	.LBB1510:
 281:src/xeq.c     **** }
 3193              		.loc 1 281 2 view .LVU876
 3194 00a0 FFF7FEBF 		b	update_program_bounds
 3195              	.LVL241:
 3196              	.L263:
 281:src/xeq.c     **** }
 3197              		.loc 1 281 2 view .LVU877
 3198              		.align	2
 3199              	.L262:
 3200 00a4 00000000 		.word	main_ram
 3201 00a8 00000000 		.word	.LANCHOR0
 3202 00ac 00C0FFFF 		.word	-16384
 3203              	.LBE1510:
 3204              	.LBE1522:
 3205              		.cfi_endproc
 3206              	.LFE18:
 3208              		.section	.text.incpc,"ax",%progbits
 3209              		.align	1
 3210              		.p2align 2,,3
 3211              		.global	incpc
 3212              		.syntax unified
 3213              		.thumb
 3214              		.thumb_func
 3215              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQlyisH.s 			page 160


 3217              	incpc:
 3218              	.LFB22:
 449:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3219              		.loc 1 449 17 is_stmt 1 view -0
 3220              		.cfi_startproc
 3221              		@ args = 0, pretend = 0, frame = 0
 3222              		@ frame_needed = 0, uses_anonymous_args = 0
 450:src/xeq.c     **** 	return PcWrapped;
 3223              		.loc 1 450 2 view .LVU879
 449:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3224              		.loc 1 449 17 is_stmt 0 view .LVU880
 3225 0000 10B5     		push	{r4, lr}
 3226              		.cfi_def_cfa_offset 8
 3227              		.cfi_offset 4, -8
 3228              		.cfi_offset 14, -4
 450:src/xeq.c     **** 	return PcWrapped;
 3229              		.loc 1 450 20 view .LVU881
 3230 0002 084C     		ldr	r4, .L266
 3231 0004 2368     		ldr	r3, [r4]
 450:src/xeq.c     **** 	return PcWrapped;
 3232              		.loc 1 450 2 view .LVU882
 3233 0006 0121     		movs	r1, #1
 3234 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3235 000c FFF7FEFF 		bl	do_inc
 3236              	.LVL242:
 3237              	.LBB1523:
 3238              	.LBB1524:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3239              		.loc 1 280 11 view .LVU883
 3240 0010 2368     		ldr	r3, [r4]
 3241              	.LBE1524:
 3242              	.LBE1523:
 450:src/xeq.c     **** 	return PcWrapped;
 3243              		.loc 1 450 2 view .LVU884
 3244 0012 0246     		mov	r2, r0
 3245              	.LVL243:
 3246              	.LBB1526:
 3247              	.LBI1523:
 279:src/xeq.c     **** 	State.pc = pc;
 3248              		.loc 1 279 13 is_stmt 1 view .LVU885
 3249              	.LBB1525:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3250              		.loc 1 280 2 view .LVU886
 280:src/xeq.c     **** 	update_program_bounds(0);
 3251              		.loc 1 280 11 is_stmt 0 view .LVU887
 3252 0014 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3253              		.loc 1 281 2 is_stmt 1 view .LVU888
 3254 0018 0020     		movs	r0, #0
 3255              	.LVL244:
 281:src/xeq.c     **** }
 3256              		.loc 1 281 2 is_stmt 0 view .LVU889
 3257 001a FFF7FEFF 		bl	update_program_bounds
 3258              	.LVL245:
 281:src/xeq.c     **** }
 3259              		.loc 1 281 2 view .LVU890
 3260              	.LBE1525:
ARM GAS  /tmp/ccQlyisH.s 			page 161


 3261              	.LBE1526:
 451:src/xeq.c     **** }
 3262              		.loc 1 451 2 is_stmt 1 view .LVU891
 451:src/xeq.c     **** }
 3263              		.loc 1 451 9 is_stmt 0 view .LVU892
 3264 001e 024B     		ldr	r3, .L266+4
 452:src/xeq.c     **** 
 3265              		.loc 1 452 1 view .LVU893
 3266 0020 1868     		ldr	r0, [r3]
 3267 0022 10BD     		pop	{r4, pc}
 3268              	.L267:
 3269              		.align	2
 3270              	.L266:
 3271 0024 00000000 		.word	main_ram
 3272 0028 00000000 		.word	PcWrapped
 3273              		.cfi_endproc
 3274              	.LFE22:
 3276              		.section	.text.decpc,"ax",%progbits
 3277              		.align	1
 3278              		.p2align 2,,3
 3279              		.global	decpc
 3280              		.syntax unified
 3281              		.thumb
 3282              		.thumb_func
 3283              		.fpu fpv4-sp-d16
 3285              	decpc:
 3286              	.LFB23:
 454:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3287              		.loc 1 454 18 is_stmt 1 view -0
 3288              		.cfi_startproc
 3289              		@ args = 0, pretend = 0, frame = 0
 3290              		@ frame_needed = 0, uses_anonymous_args = 0
 455:src/xeq.c     **** }
 3291              		.loc 1 455 2 view .LVU895
 454:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3292              		.loc 1 454 18 is_stmt 0 view .LVU896
 3293 0000 10B5     		push	{r4, lr}
 3294              		.cfi_def_cfa_offset 8
 3295              		.cfi_offset 4, -8
 3296              		.cfi_offset 14, -4
 455:src/xeq.c     **** }
 3297              		.loc 1 455 20 view .LVU897
 3298 0002 084C     		ldr	r4, .L270
 3299 0004 2368     		ldr	r3, [r4]
 455:src/xeq.c     **** }
 3300              		.loc 1 455 2 view .LVU898
 3301 0006 0121     		movs	r1, #1
 3302 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3303 000c FFF7FEFF 		bl	do_dec
 3304              	.LVL246:
 3305              	.LBB1527:
 3306              	.LBB1528:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3307              		.loc 1 280 11 view .LVU899
 3308 0010 2368     		ldr	r3, [r4]
 3309              	.LBE1528:
 3310              	.LBE1527:
ARM GAS  /tmp/ccQlyisH.s 			page 162


 455:src/xeq.c     **** }
 3311              		.loc 1 455 2 view .LVU900
 3312 0012 0246     		mov	r2, r0
 3313              	.LVL247:
 3314              	.LBB1531:
 3315              	.LBI1527:
 279:src/xeq.c     **** 	State.pc = pc;
 3316              		.loc 1 279 13 is_stmt 1 view .LVU901
 3317              	.LBB1529:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3318              		.loc 1 280 2 view .LVU902
 3319              	.LBE1529:
 3320              	.LBE1531:
 456:src/xeq.c     **** 
 3321              		.loc 1 456 1 is_stmt 0 view .LVU903
 3322 0014 BDE81040 		pop	{r4, lr}
 3323              		.cfi_restore 14
 3324              		.cfi_restore 4
 3325              		.cfi_def_cfa_offset 0
 3326              	.LBB1532:
 3327              	.LBB1530:
 281:src/xeq.c     **** }
 3328              		.loc 1 281 2 view .LVU904
 3329 0018 0020     		movs	r0, #0
 3330              	.LVL248:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3331              		.loc 1 280 11 view .LVU905
 3332 001a A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3333              		.loc 1 281 2 is_stmt 1 view .LVU906
 3334 001e FFF7FEBF 		b	update_program_bounds
 3335              	.LVL249:
 3336              	.L271:
 281:src/xeq.c     **** }
 3337              		.loc 1 281 2 is_stmt 0 view .LVU907
 3338 0022 00BF     		.align	2
 3339              	.L270:
 3340 0024 00000000 		.word	main_ram
 3341              	.LBE1530:
 3342              	.LBE1532:
 3343              		.cfi_endproc
 3344              	.LFE23:
 3346              		.section	.text.fin_tst.part.0,"ax",%progbits
 3347              		.align	1
 3348              		.p2align 2,,3
 3349              		.syntax unified
 3350              		.thumb
 3351              		.thumb_func
 3352              		.fpu fpv4-sp-d16
 3354              	fin_tst.part.0:
 3355              	.LFB284:
2538:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 3356              		.loc 1 2538 6 is_stmt 1 view -0
 3357              		.cfi_startproc
 3358              		@ args = 0, pretend = 0, frame = 0
 3359              		@ frame_needed = 0, uses_anonymous_args = 0
 3360              	.LVL250:
ARM GAS  /tmp/ccQlyisH.s 			page 163


2538:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 3361              		.loc 1 2538 6 is_stmt 0 view .LVU909
 3362 0000 08B5     		push	{r3, lr}
 3363              		.cfi_def_cfa_offset 8
 3364              		.cfi_offset 3, -8
 3365              		.cfi_offset 14, -4
2541:src/xeq.c     **** 			decpc();
 3366              		.loc 1 2541 14 view .LVU910
 3367 0002 FFF7FEFF 		bl	incpc
 3368              	.LVL251:
2541:src/xeq.c     **** 			decpc();
 3369              		.loc 1 2541 11 view .LVU911
 3370 0006 00B9     		cbnz	r0, .L275
2552:src/xeq.c     **** 
 3371              		.loc 1 2552 1 view .LVU912
 3372 0008 08BD     		pop	{r3, pc}
 3373              	.L275:
2542:src/xeq.c     **** 	}
 3374              		.loc 1 2542 4 is_stmt 1 view .LVU913
2552:src/xeq.c     **** 
 3375              		.loc 1 2552 1 is_stmt 0 view .LVU914
 3376 000a BDE80840 		pop	{r3, lr}
 3377              		.cfi_restore 14
 3378              		.cfi_restore 3
 3379              		.cfi_def_cfa_offset 0
2542:src/xeq.c     **** 	}
 3380              		.loc 1 2542 4 view .LVU915
 3381 000e FFF7FEBF 		b	decpc
 3382              	.LVL252:
 3383              		.cfi_endproc
 3384              	.LFE284:
 3386 0012 00BF     		.section	.text.do_rtn,"ax",%progbits
 3387              		.align	1
 3388              		.p2align 2,,3
 3389              		.syntax unified
 3390              		.thumb
 3391              		.thumb_func
 3392              		.fpu fpv4-sp-d16
 3394              	do_rtn:
 3395              	.LVL253:
 3396              	.LFB153:
2216:src/xeq.c     **** 	unsigned short pc;
 3397              		.loc 1 2216 31 is_stmt 1 view -0
 3398              		.cfi_startproc
 3399              		@ args = 0, pretend = 0, frame = 0
 3400              		@ frame_needed = 0, uses_anonymous_args = 0
2217:src/xeq.c     **** 
 3401              		.loc 1 2217 2 view .LVU917
2219:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3402              		.loc 1 2219 2 view .LVU918
2216:src/xeq.c     **** 	unsigned short pc;
 3403              		.loc 1 2216 31 is_stmt 0 view .LVU919
 3404 0000 70B5     		push	{r4, r5, r6, lr}
 3405              		.cfi_def_cfa_offset 16
 3406              		.cfi_offset 4, -16
 3407              		.cfi_offset 5, -12
 3408              		.cfi_offset 6, -8
ARM GAS  /tmp/ccQlyisH.s 			page 164


 3409              		.cfi_offset 14, -4
2219:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3410              		.loc 1 2219 6 view .LVU920
 3411 0002 224C     		ldr	r4, .L290
 3412 0004 2368     		ldr	r3, [r4]
2219:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3413              		.loc 1 2219 5 view .LVU921
 3414 0006 B3F9E227 		ldrsh	r2, [r3, #2018]
 3415 000a 002A     		cmp	r2, #0
 3416 000c 0FDB     		blt	.L277
2221:src/xeq.c     **** 		raw_set_pc(ProgBegin);
 3417              		.loc 1 2221 3 is_stmt 1 view .LVU922
 3418              	.LBB1533:
 3419              	.LBI1533:
1575:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 3420              		.loc 1 1575 6 view .LVU923
 3421              	.LBB1534:
1576:src/xeq.c     **** }
 3422              		.loc 1 1576 2 view .LVU924
1576:src/xeq.c     **** }
 3423              		.loc 1 1576 24 is_stmt 0 view .LVU925
 3424 000e 0020     		movs	r0, #0
 3425              	.LVL254:
1576:src/xeq.c     **** }
 3426              		.loc 1 1576 24 view .LVU926
 3427              	.LBE1534:
 3428              	.LBE1533:
 3429              	.LBB1536:
 3430              	.LBB1537:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3431              		.loc 1 280 11 view .LVU927
 3432 0010 B3F8EC27 		ldrh	r2, [r3, #2028]
 3433              	.LBE1537:
 3434              	.LBE1536:
 3435              	.LBB1539:
 3436              	.LBB1535:
1576:src/xeq.c     **** }
 3437              		.loc 1 1576 24 view .LVU928
 3438 0014 A3F8DE07 		strh	r0, [r3, #2014]	@ movhi
1576:src/xeq.c     **** }
 3439              		.loc 1 1576 12 view .LVU929
 3440 0018 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 3441              	.LBE1535:
 3442              	.LBE1539:
2222:src/xeq.c     **** 	}
 3443              		.loc 1 2222 3 is_stmt 1 view .LVU930
 3444              	.LVL255:
 3445              	.LBB1540:
 3446              	.LBI1536:
 279:src/xeq.c     **** 	State.pc = pc;
 3447              		.loc 1 279 13 view .LVU931
 3448              	.LBB1538:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3449              		.loc 1 280 2 view .LVU932
 280:src/xeq.c     **** 	update_program_bounds(0);
 3450              		.loc 1 280 11 is_stmt 0 view .LVU933
 3451 001c A3F8E027 		strh	r2, [r3, #2016]	@ movhi
ARM GAS  /tmp/ccQlyisH.s 			page 165


 281:src/xeq.c     **** }
 3452              		.loc 1 281 2 is_stmt 1 view .LVU934
 3453 0020 FFF7FEFF 		bl	update_program_bounds
 3454              	.LVL256:
 3455              	.L278:
 281:src/xeq.c     **** }
 3456              		.loc 1 281 2 is_stmt 0 view .LVU935
 3457              	.LBE1538:
 3458              	.LBE1540:
2235:src/xeq.c     **** 		// RTN with empty stack stops
 3459              		.loc 1 2235 2 is_stmt 1 view .LVU936
2235:src/xeq.c     **** 		// RTN with empty stack stops
 3460              		.loc 1 2235 6 is_stmt 0 view .LVU937
 3461 0024 2368     		ldr	r3, [r4]
2235:src/xeq.c     **** 		// RTN with empty stack stops
 3462              		.loc 1 2235 5 view .LVU938
 3463 0026 B3F9E217 		ldrsh	r1, [r3, #2018]
 3464 002a 09B3     		cbz	r1, .L289
2239:src/xeq.c     **** 
 3465              		.loc 1 2239 1 view .LVU939
 3466 002c 70BD     		pop	{r4, r5, r6, pc}
 3467              	.LVL257:
 3468              	.L277:
2227:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
 3469              		.loc 1 2227 3 is_stmt 1 view .LVU940
 3470 002e 0546     		mov	r5, r0
 3471 0030 FFF7FEFF 		bl	retstk_up
 3472              	.LVL258:
2228:src/xeq.c     **** 		raw_set_pc(pc);
 3473              		.loc 1 2228 3 view .LVU941
2228:src/xeq.c     **** 		raw_set_pc(pc);
 3474              		.loc 1 2228 15 is_stmt 0 view .LVU942
 3475 0034 2268     		ldr	r2, [r4]
2228:src/xeq.c     **** 		raw_set_pc(pc);
 3476              		.loc 1 2228 6 view .LVU943
 3477 0036 1649     		ldr	r1, .L290+4
2228:src/xeq.c     **** 		raw_set_pc(pc);
 3478              		.loc 1 2228 14 view .LVU944
 3479 0038 B2F9E237 		ldrsh	r3, [r2, #2018]
2228:src/xeq.c     **** 		raw_set_pc(pc);
 3480              		.loc 1 2228 6 view .LVU945
 3481 003c 0968     		ldr	r1, [r1]
2228:src/xeq.c     **** 		raw_set_pc(pc);
 3482              		.loc 1 2228 14 view .LVU946
 3483 003e 03F10043 		add	r3, r3, #-2147483648
 3484 0042 013B     		subs	r3, r3, #1
 3485              	.LBB1541:
 3486              	.LBB1542:
 281:src/xeq.c     **** }
 3487              		.loc 1 281 2 view .LVU947
 3488 0044 0020     		movs	r0, #0
 3489              	.LBE1542:
 3490              	.LBE1541:
2228:src/xeq.c     **** 		raw_set_pc(pc);
 3491              		.loc 1 2228 6 view .LVU948
 3492 0046 31F81360 		ldrh	r6, [r1, r3, lsl #1]
 3493              	.LVL259:
ARM GAS  /tmp/ccQlyisH.s 			page 166


2229:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
 3494              		.loc 1 2229 3 is_stmt 1 view .LVU949
 3495              	.LBB1544:
 3496              	.LBI1541:
 279:src/xeq.c     **** 	State.pc = pc;
 3497              		.loc 1 279 13 view .LVU950
 3498              	.LBB1543:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3499              		.loc 1 280 2 view .LVU951
 280:src/xeq.c     **** 	update_program_bounds(0);
 3500              		.loc 1 280 11 is_stmt 0 view .LVU952
 3501 004a A2F8E067 		strh	r6, [r2, #2016]	@ movhi
 281:src/xeq.c     **** }
 3502              		.loc 1 281 2 is_stmt 1 view .LVU953
 3503 004e FFF7FEFF 		bl	update_program_bounds
 3504              	.LVL260:
 281:src/xeq.c     **** }
 3505              		.loc 1 281 2 is_stmt 0 view .LVU954
 3506              	.LBE1543:
 3507              	.LBE1544:
2231:src/xeq.c     **** 			if (incpc())
 3508              		.loc 1 2231 3 is_stmt 1 view .LVU955
2231:src/xeq.c     **** 			if (incpc())
 3509              		.loc 1 2231 6 is_stmt 0 view .LVU956
 3510 0052 002D     		cmp	r5, #0
 3511 0054 E6D0     		beq	.L278
2231:src/xeq.c     **** 			if (incpc())
 3512              		.loc 1 2231 16 discriminator 1 view .LVU957
 3513 0056 3046     		mov	r0, r6
 3514 0058 FFF7FEFF 		bl	getprog
 3515              	.LVL261:
2231:src/xeq.c     **** 			if (incpc())
 3516              		.loc 1 2231 13 discriminator 1 view .LVU958
 3517 005c B0F5C17F 		cmp	r0, #386
 3518 0060 E0D0     		beq	.L278
2232:src/xeq.c     **** 				decpc();
 3519              		.loc 1 2232 4 is_stmt 1 view .LVU959
2232:src/xeq.c     **** 				decpc();
 3520              		.loc 1 2232 8 is_stmt 0 view .LVU960
 3521 0062 FFF7FEFF 		bl	incpc
 3522              	.LVL262:
2232:src/xeq.c     **** 				decpc();
 3523              		.loc 1 2232 7 view .LVU961
 3524 0066 0028     		cmp	r0, #0
 3525 0068 DCD0     		beq	.L278
2233:src/xeq.c     **** 	}
 3526              		.loc 1 2233 5 is_stmt 1 view .LVU962
 3527 006a FFF7FEFF 		bl	decpc
 3528              	.LVL263:
 3529 006e D9E7     		b	.L278
 3530              	.LVL264:
 3531              	.L289:
2237:src/xeq.c     **** 	}
 3532              		.loc 1 2237 3 view .LVU963
 3533              	.LBB1545:
 3534              	.LBI1545:
5141:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 167


5142:src/xeq.c     **** 
5143:src/xeq.c     **** /* Handle a command that takes an argument.  The argument is encoded
5144:src/xeq.c     ****  * in the low order bits of the opcode.  We also have to take
5145:src/xeq.c     ****  * account of the indirection flag and various limits.
5146:src/xeq.c     ****  */
5147:src/xeq.c     **** static void rargs(const opcode op) {
5148:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
5149:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
5150:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
5151:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
5152:src/xeq.c     **** 
5153:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5154:src/xeq.c     **** 
5155:src/xeq.c     **** 	process_cmdline();
5156:src/xeq.c     **** 
5157:src/xeq.c     **** 	if (cmd >= NUM_RARG) {
5158:src/xeq.c     **** 		illegal(op);
5159:src/xeq.c     **** 		return;
5160:src/xeq.c     **** 	}
5161:src/xeq.c     **** 	if (isNULL(argcmds[cmd].f)) {
5162:src/xeq.c     **** 		set_lift();
5163:src/xeq.c     **** 		return;
5164:src/xeq.c     **** 	}
5165:src/xeq.c     **** 
5166:src/xeq.c     **** 	if (ind) {
5167:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
5168:src/xeq.c     **** 			// Get the argument by reading a register
5169:src/xeq.c     **** 			int sgn;
5170:src/xeq.c     **** 			unsigned long long int regval;
5171:src/xeq.c     **** 
5172:src/xeq.c     **** 			if (arg > get_reg_limit(RARG_RCL, arg)) {
5173:src/xeq.c     **** 				// Invalid register specified for indirect access
5174:src/xeq.c     **** 				report_err(ERR_RANGE);
5175:src/xeq.c     **** 				return;
5176:src/xeq.c     **** 			}
5177:src/xeq.c     **** 			regval = get_reg_n_int_sgn(arg, &sgn);
5178:src/xeq.c     **** 			if ((regval >> 32) != 0)
5179:src/xeq.c     **** 				goto range;
5180:src/xeq.c     **** 			arg = (unsigned int) regval;
5181:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
5182:src/xeq.c     **** 				// negative arguments address local registers or flags
5183:src/xeq.c     **** 				arg = LOCAL_REG_BASE + arg;
5184:src/xeq.c     **** 			}
5185:src/xeq.c     **** 		} 
5186:src/xeq.c     **** 		else {
5187:src/xeq.c     **** 			// put the top bit back in
5188:src/xeq.c     **** 			arg |= RARG_IND;
5189:src/xeq.c     **** 		}
5190:src/xeq.c     **** 	}
5191:src/xeq.c     **** 	if (argcmds[cmd].reg) {
5192:src/xeq.c     **** 		// Range checking for registers against variable boundary
5193:src/xeq.c     **** 		lim = get_reg_limit(cmd, arg);
5194:src/xeq.c     **** 	}
5195:src/xeq.c     **** 	else if (argcmds[cmd].flag) {
5196:src/xeq.c     **** 		if (LocalRegs == 0)
5197:src/xeq.c     **** 			lim = NUMFLG - 1;
5198:src/xeq.c     **** 		else 
ARM GAS  /tmp/ccQlyisH.s 			page 168


5199:src/xeq.c     **** 			lim = LOCAL_FLAG_BASE + MAX_LOCAL_DIRECT - 1;
5200:src/xeq.c     **** 	}
5201:src/xeq.c     **** 	if (arg > lim) {
5202:src/xeq.c     **** 		// Argument is too large
5203:src/xeq.c     **** range:		report_err(ERR_RANGE);
5204:src/xeq.c     **** 	}
5205:src/xeq.c     **** 	else if (argcmds[cmd].cmplx && arg >= TOPREALREG-1 && arg < NUMREG && (arg & 1)) {
5206:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
5207:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5208:src/xeq.c     **** 	}
5209:src/xeq.c     **** 	else {
5210:src/xeq.c     **** 		// Dispatch the command
5211:src/xeq.c     **** 		FP_RARG fp = (FP_RARG) EXPAND_ADDRESS(argcmds[cmd].f);
5212:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5213:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
5214:src/xeq.c     **** 			if (argcmds[cmd].label) {
5215:src/xeq.c     **** 				XromUserPc = find_label_from(state_pc(), arg, 0);
5216:src/xeq.c     **** 				if (XromUserPc == 0)
5217:src/xeq.c     **** 					return;
5218:src/xeq.c     **** 				if (! Running)
5219:src/xeq.c     **** 					clrretstk();
5220:src/xeq.c     **** 			}
5221:src/xeq.c     **** 			else
5222:src/xeq.c     **** 				XromArg = (unsigned char) arg;
5223:src/xeq.c     **** #else
5224:src/xeq.c     **** 			XromUserPc = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
5225:src/xeq.c     **** 			if (XromUserPc == 0)
5226:src/xeq.c     **** 				return;
5227:src/xeq.c     **** 			if (! Running)
5228:src/xeq.c     **** 				clrretstk();
5229:src/xeq.c     **** #endif
5230:src/xeq.c     **** 			dispatch_xrom(fp);
5231:src/xeq.c     **** 			return;
5232:src/xeq.c     **** 		}
5233:src/xeq.c     **** 		else {
5234:src/xeq.c     **** 			fp(arg, (enum rarg)cmd);
5235:src/xeq.c     **** 		}
5236:src/xeq.c     **** 		if (cmd != RARG_XROM_OUT) {
5237:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
5238:src/xeq.c     **** 			set_lift();
5239:src/xeq.c     **** 		}
5240:src/xeq.c     **** 	}
5241:src/xeq.c     **** }
5242:src/xeq.c     **** 
5243:src/xeq.c     **** static void multi(const opcode op) {
5244:src/xeq.c     **** 	const int cmd = opDBL(op);
5245:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5246:src/xeq.c     **** 
5247:src/xeq.c     **** 	process_cmdline_set_lift();
5248:src/xeq.c     **** 
5249:src/xeq.c     **** 	if (cmd >= NUM_MULTI) {
5250:src/xeq.c     **** 		illegal(op);
5251:src/xeq.c     **** 		return;
5252:src/xeq.c     **** 	}
5253:src/xeq.c     **** 	if (isNULL(multicmds[cmd].f))	// LBL does nothing
5254:src/xeq.c     **** 		return;
5255:src/xeq.c     **** 	else {
ARM GAS  /tmp/ccQlyisH.s 			page 169


5256:src/xeq.c     **** 		FP_MULTI fp = (FP_MULTI) EXPAND_ADDRESS(multicmds[cmd].f);
5257:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5258:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
5259:src/xeq.c     **** 			if (XromUserPc != 0) {
5260:src/xeq.c     **** 				if (! Running)
5261:src/xeq.c     **** 					clrretstk();
5262:src/xeq.c     **** 				dispatch_xrom(fp);
5263:src/xeq.c     **** 			}
5264:src/xeq.c     **** 			return;
5265:src/xeq.c     **** 		}
5266:src/xeq.c     **** 		else {
5267:src/xeq.c     **** 			fp(op, (enum multiops)cmd);
5268:src/xeq.c     **** 			set_lift();
5269:src/xeq.c     **** 		}
5270:src/xeq.c     **** 	}
5271:src/xeq.c     **** }
5272:src/xeq.c     **** 
5273:src/xeq.c     **** 
5274:src/xeq.c     **** 
5275:src/xeq.c     **** /* Main dispatch routine that decodes the top level of the opcode and
5276:src/xeq.c     ****  * goes to the appropriate lower level dispatch routine.
5277:src/xeq.c     ****  */
5278:src/xeq.c     **** void xeq(opcode op) 
5279:src/xeq.c     **** {
5280:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
5281:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
5282:src/xeq.c     **** 	const struct _ustate old = UState;
5283:src/xeq.c     **** 	const unsigned char lift = get_lift();
5284:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
5285:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
5286:src/xeq.c     **** #ifdef INFRARED
5287:src/xeq.c     **** 	int tracing;
5288:src/xeq.c     **** #endif
5289:src/xeq.c     **** 
5290:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
5291:src/xeq.c     **** 	if (op == (OP_NIL | OP_rCLX) || op == (OP_NIL | OP_CLSTK)) {
5292:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
5293:src/xeq.c     **** 		// valid input so no error message will be generated.
5294:src/xeq.c     **** 		CmdLineDot = 0;
5295:src/xeq.c     **** 		Cmdline[0] = '0';
5296:src/xeq.c     **** 		Cmdline[1] = '\0';
5297:src/xeq.c     **** 	}
5298:src/xeq.c     **** #endif
5299:src/xeq.c     **** 
5300:src/xeq.c     **** 	xcopy(save, StackBase, sizeof(save));
5301:src/xeq.c     **** #if defined(CONSOLE)
5302:src/xeq.c     **** 	instruction_count++;
5303:src/xeq.c     **** #endif
5304:src/xeq.c     **** #ifndef REALBUILD
5305:src/xeq.c     **** 	if (State2.trace && ! State2.sst) {
5306:src/xeq.c     **** 		char buf[16];
5307:src/xeq.c     **** 		if (Running)
5308:src/xeq.c     **** 			print_step(op);
5309:src/xeq.c     **** 		else
5310:src/xeq.c     **** 			sprintf(TraceBuffer, "%04X:%s", op, prt(op, buf));
5311:src/xeq.c     **** 		DispMsg = TraceBuffer;
5312:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQlyisH.s 			page 170


5313:src/xeq.c     **** #endif
5314:src/xeq.c     **** #ifdef INFRARED
5315:src/xeq.c     **** #ifdef REALBUILD
5316:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && ! is_xrom() && State2.runmode;
5317:src/xeq.c     **** #else
5318:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && (! is_xrom() || State2.trace) && State2.runmode;
5319:src/xeq.c     **** #endif
5320:src/xeq.c     **** 	Tracing = tracing;
5321:src/xeq.c     **** 	print_trace( op, 0 );
5322:src/xeq.c     **** #endif
5323:src/xeq.c     **** 	Busy = 0;
5324:src/xeq.c     **** 	State2.wascomplex = 0;
5325:src/xeq.c     **** 	if (isDBL(op))
5326:src/xeq.c     **** 		multi(op);
5327:src/xeq.c     **** 	else if (isRARG(op))
5328:src/xeq.c     **** 		rargs(op);
5329:src/xeq.c     **** 	else {
5330:src/xeq.c     **** 		XeqOpCode = (s_opcode) op;
5331:src/xeq.c     **** 		switch (opKIND(op)) {
5332:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
5333:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
5334:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
5335:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
5336:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
5337:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
5338:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
5339:src/xeq.c     **** 		default:	illegal(op);
5340:src/xeq.c     **** 		}
5341:src/xeq.c     **** 	}
5342:src/xeq.c     **** #if INTERRUPT_XROM_TICKS > 0
5343:src/xeq.c     **** 	if (OnKeyTicks >= INTERRUPT_XROM_TICKS) {
5344:src/xeq.c     **** 		report_err(ERR_INTERRUPTED);
5345:src/xeq.c     **** 		while (get_key() >= 0) { } // Empty keyboard buffer
5346:src/xeq.c     **** 	}
5347:src/xeq.c     **** #endif
5348:src/xeq.c     **** 
5349:src/xeq.c     **** 	if (Error != ERR_NONE) {
5350:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
5351:src/xeq.c     **** 		error_message( Error );
5352:src/xeq.c     **** 		// Repair stack and state
5353:src/xeq.c     **** 		// Clear return stack
5354:src/xeq.c     **** 		xcopy(StackBase, save, sizeof(save));
5355:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
5356:src/xeq.c     **** 		UState = old;
5357:src/xeq.c     **** 		State2.state_lift = lift;
5358:src/xeq.c     **** 		raw_set_pc(old_pc);
5359:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
5360:src/xeq.c     **** 		process_cmdline_set_lift();
5361:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
5362:src/xeq.c     **** 		// wrong with the command line, e.g. it had a partially entered fraction
5363:src/xeq.c     **** 		Error = ERR_NONE;
5364:src/xeq.c     **** 		if (Running || XromRunning) {
5365:src/xeq.c     **** #ifndef REALBUILD
5366:src/xeq.c     **** 			if (State2.trace ) {
5367:src/xeq.c     **** 				// Special handling for debug environment
5368:src/xeq.c     **** 				if (XromFlags.xIN) {
5369:src/xeq.c     **** 					// Restore the global return stack
ARM GAS  /tmp/ccQlyisH.s 			page 171


5370:src/xeq.c     **** 					RetStk = XromUserRetStk;
5371:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5372:src/xeq.c     **** 					// Restore private stack to normal stack
5373:src/xeq.c     **** 					if (! XromFlags.mode_double && NumRegs < STACK_SIZE + EXTRA_REG) {
5374:src/xeq.c     **** 						// Need space for double precision stack
5375:src/xeq.c     **** 						cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
5376:src/xeq.c     **** 					}
5377:src/xeq.c     **** 					XromFlags.xIN = 0;		// Clear flag before get_reg_n!
5378:src/xeq.c     **** 					if (Error == ERR_NONE) {
5379:src/xeq.c     **** 						UState.mode_double = 1;
5380:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
5381:src/xeq.c     **** 					}
5382:src/xeq.c     **** 					else
5383:src/xeq.c     **** 						Error = ERR_NONE;	// Not enough RAM, can't restore
5384:src/xeq.c     **** 				}
5385:src/xeq.c     **** 			}
5386:src/xeq.c     **** 			else {
5387:src/xeq.c     **** #endif
5388:src/xeq.c     **** 				unsigned short int pc = state_pc();
5389:src/xeq.c     **** 				if (XromFlags.xIN) {
5390:src/xeq.c     **** 					// Restore state to before xIN
5391:src/xeq.c     **** 					XromFlags.xIN = 0;
5392:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
5393:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
5394:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
5395:src/xeq.c     **** 					// Restore the global return stack
5396:src/xeq.c     **** 					RetStk = XromUserRetStk;
5397:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5398:src/xeq.c     **** 				}
5399:src/xeq.c     **** 				while (isXROM(pc)) {
5400:src/xeq.c     **** 					// Leave XROM
5401:src/xeq.c     **** 					if (RetStkPtr != 0) {
5402:src/xeq.c     **** 						retstk_up();
5403:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
5404:src/xeq.c     **** 					}
5405:src/xeq.c     **** 					if (RetStkPtr == 0)
5406:src/xeq.c     **** 						++pc; // compensate for decpc below
5407:src/xeq.c     **** 				}
5408:src/xeq.c     **** 				raw_set_pc(pc);
5409:src/xeq.c     **** #ifndef REALBUILD
5410:src/xeq.c     **** 			}
5411:src/xeq.c     **** #endif
5412:src/xeq.c     **** 			decpc();		// Back to error instruction
5413:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
5414:src/xeq.c     **** 
5415:src/xeq.c     **** 			set_running_off();
5416:src/xeq.c     **** 		}
5417:src/xeq.c     **** 	} 
5418:src/xeq.c     **** 	reset_volatile_state();
5419:src/xeq.c     **** #ifdef INFRARED
5420:src/xeq.c     **** 	Tracing = tracing;
5421:src/xeq.c     **** 	print_trace( op, 1 );
5422:src/xeq.c     **** #endif
5423:src/xeq.c     **** }
5424:src/xeq.c     **** 
5425:src/xeq.c     **** /* Execute a single step and return.
5426:src/xeq.c     ****  */
ARM GAS  /tmp/ccQlyisH.s 			page 172


5427:src/xeq.c     **** static void xeq_single(void) {
5428:src/xeq.c     **** 	const opcode op = getprog(state_pc());
5429:src/xeq.c     **** 
5430:src/xeq.c     **** 	incpc();
5431:src/xeq.c     **** 	xeq(op);
5432:src/xeq.c     **** }
5433:src/xeq.c     **** 
5434:src/xeq.c     **** /* Continue execution trough xrom code
5435:src/xeq.c     ****  */
5436:src/xeq.c     **** #ifdef REALBUILD
5437:src/xeq.c     **** void xeq_xrom(void) {
5438:src/xeq.c     **** #else
5439:src/xeq.c     **** static void xeq_xrom2(void) {
5440:src/xeq.c     **** #endif
5441:src/xeq.c     **** 	int count = 0;
5442:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
5443:src/xeq.c     **** 	 * we break free.
5444:src/xeq.c     **** 	 */
5445:src/xeq.c     **** 	  while (!Pause && is_xrom() && RetStkPtr != 0) {
5446:src/xeq.c     **** 		XromRunning = 1;
5447:src/xeq.c     **** 		xeq_single();
5448:src/xeq.c     **** 		XromRunning = 0;
5449:src/xeq.c     **** 		if ((++count & 31) == 0)
5450:src/xeq.c     **** 			busy();
5451:src/xeq.c     **** 		  if (Pause)
5452:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
5453:src/xeq.c     **** 			// Switch to Running mode to force continued execution.
5454:src/xeq.c     **** 			Running = 1;
5455:src/xeq.c     **** 		
5456:src/xeq.c     **** 	}
5457:src/xeq.c     **** }
5458:src/xeq.c     **** 
5459:src/xeq.c     **** #ifndef REALBUILD
5460:src/xeq.c     **** void xeq_xrom(void) {
5461:src/xeq.c     **** 	// We split the routine in two parts for debugging only
5462:src/xeq.c     **** 	if (! State2.trace)
5463:src/xeq.c     **** 		xeq_xrom2();
5464:src/xeq.c     **** }
5465:src/xeq.c     **** #endif
5466:src/xeq.c     **** 
5467:src/xeq.c     **** /* Check to see if we're running a program and if so execute it
5468:src/xeq.c     ****  * for a while.
5469:src/xeq.c     ****  *
5470:src/xeq.c     ****  */
5471:src/xeq.c     **** 
5472:src/xeq.c     **** /*
5473:src/xeq.c     **** 'Pause' is true if Pause is non-zero, i.e., if the pause is still running.
5474:src/xeq.c     **** */
5475:src/xeq.c     ****  void xeqprog(void) 
5476:src/xeq.c     ****  {
5477:src/xeq.c     ****    int state = 0;
5478:src/xeq.c     ****    if (Running || Pause) {
5479:src/xeq.c     **** 
5480:src/xeq.c     **** #if !(defined(CONSOLE)) && !(defined(DM42))
5481:src/xeq.c     ****      long long last_ticker = Ticker;
5482:src/xeq.c     ****      state = ((int) last_ticker % (2*TICKS_PER_FLASH) < TICKS_PER_FLASH);
5483:src/xeq.c     **** #else
ARM GAS  /tmp/ccQlyisH.s 			page 173


5484:src/xeq.c     ****      state = 1;
5485:src/xeq.c     **** #endif
5486:src/xeq.c     ****      
5487:src/xeq.c     ****      //     print_debug(100,state);
5488:src/xeq.c     ****      dot(RCL_annun, state);
5489:src/xeq.c     ****      finish_RPN(); // RPN
5490:src/xeq.c     **** 
5491:src/xeq.c     ****      while (! Pause && Running) {
5492:src/xeq.c     ****        xeq_single();
5493:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
5494:src/xeq.c     ****        if (is_key_pressed())
5495:src/xeq.c     **** 	 {
5496:src/xeq.c     **** 	 // Key press or heart beat
5497:src/xeq.c     **** 	 // Note: DM42 doesn't have real heart beat so no flash
5498:src/xeq.c     **** 	 // xeq_xrom(); // Already done by dispatch_xrom()
5499:src/xeq.c     **** 	 break;
5500:src/xeq.c     ****        }
5501:src/xeq.c     ****      }
5502:src/xeq.c     ****    }
5503:src/xeq.c     ****    if (! Running && ! Pause) {	  
5504:src/xeq.c     ****      // Program has terminated
5505:src/xeq.c     ****      clr_dot(RCL_annun);
5506:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
5507:src/xeq.c     ****      display();
5508:src/xeq.c     ****      if (ShowRPN) {
5509:src/xeq.c     ****        set_dot(RPN);
5510:src/xeq.c     ****        finish_RPN(); // RPN
5511:src/xeq.c     ****      }
5512:src/xeq.c     **** #ifndef CONSOLE
5513:src/xeq.c     ****      // Avoid accidental restart with R/S or APD after program ends
5514:src/xeq.c     ****      JustStopped = 1;
5515:src/xeq.c     **** #endif
5516:src/xeq.c     ****    }
5517:src/xeq.c     ****  }
5518:src/xeq.c     **** 
5519:src/xeq.c     **** /* Single step and back step routine
5520:src/xeq.c     ****  */
5521:src/xeq.c     **** void xeq_sst_bst(int kind) 
5522:src/xeq.c     **** {
5523:src/xeq.c     **** 	opcode op;
5524:src/xeq.c     **** 
5525:src/xeq.c     **** 	reset_volatile_state();
5526:src/xeq.c     **** 	if (kind == -1)
5527:src/xeq.c     **** 		decpc();
5528:src/xeq.c     **** 
5529:src/xeq.c     **** 	if (State2.runmode) {
5530:src/xeq.c     **** 		// Display the step
5531:src/xeq.c     **** 		op = getprog(state_pc());
5532:src/xeq.c     **** 		print_step(op);
5533:src/xeq.c     **** 		if (kind == 1) {
5534:src/xeq.c     **** 			// Execute the step on key up
5535:src/xeq.c     **** #ifndef REALBUILD
5536:src/xeq.c     **** 			State2.sst = 1;
5537:src/xeq.c     **** #endif
5538:src/xeq.c     **** 			set_running_on_sst();
5539:src/xeq.c     **** 			incpc();
5540:src/xeq.c     **** 			xeq(op);
ARM GAS  /tmp/ccQlyisH.s 			page 174


5541:src/xeq.c     **** #ifndef REALBUILD
5542:src/xeq.c     **** 			State2.sst = 0;
5543:src/xeq.c     **** #endif
5544:src/xeq.c     **** 			xeq_xrom();  // necessary for code called from XROM
5545:src/xeq.c     **** 			set_running_off_sst();
5546:src/xeq.c     **** 		}
5547:src/xeq.c     **** 	}
5548:src/xeq.c     **** 	else if (kind == 0) {
5549:src/xeq.c     **** 		// Key down in program mode
5550:src/xeq.c     **** 		incpc();
5551:src/xeq.c     **** 		OpCode = 0;
5552:src/xeq.c     **** 	}
5553:src/xeq.c     **** }
5554:src/xeq.c     **** 
5555:src/xeq.c     **** 
5556:src/xeq.c     **** /*
5557:src/xeq.c     ****  *  User command to start or stop execution
5558:src/xeq.c     ****  */
5559:src/xeq.c     **** void op_rs(enum nilop op) {
5560:src/xeq.c     **** #ifndef REALBUILD
5561:src/xeq.c     **** 	// This is for debugging purposes only
5562:src/xeq.c     **** 	// STOP does not appear in XROM normally
5563:src/xeq.c     **** 	if (is_xrom()) {
5564:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
5565:src/xeq.c     **** 			Running = XromRunning = 0;
5566:src/xeq.c     **** 		}
5567:src/xeq.c     **** 		else {
5568:src/xeq.c     **** 			xeq_xrom2();
5569:src/xeq.c     **** 		}
5570:src/xeq.c     **** 		return;
5571:src/xeq.c     **** 	}
5572:src/xeq.c     **** #endif
5573:src/xeq.c     **** 	if (Running)
5574:src/xeq.c     **** 		set_running_off();
5575:src/xeq.c     **** 	else {
5576:src/xeq.c     **** 		set_running_on();
5577:src/xeq.c     **** 		if (RetStkPtr == 0)
5578:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
5579:src/xeq.c     **** 	}
5580:src/xeq.c     **** }
5581:src/xeq.c     **** 
5582:src/xeq.c     **** 
5583:src/xeq.c     **** /* 
5584:src/xeq.c     ****  *  The following needs to be done each time before any user input is processed.
5585:src/xeq.c     ****  *  On the hardware, RAM is volatile and these pointers and structures need valid values!
5586:src/xeq.c     ****  */
5587:src/xeq.c     **** void xeq_init_contexts(void) {
5588:src/xeq.c     **** 	/*
5589:src/xeq.c     **** 	 *  Compute the sizes of the various memory portions
5590:src/xeq.c     **** 	 */
5591:src/xeq.c     **** 	short int s;
5592:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
5593:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
5594:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
5595:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
5596:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
5597:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
ARM GAS  /tmp/ccQlyisH.s 			page 175


5598:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
5599:src/xeq.c     **** 
5600:src/xeq.c     **** 	/*
5601:src/xeq.c     **** 	 *  Initialise our standard contexts.
5602:src/xeq.c     **** 	 *  We bump the digits for internal calculations.
5603:src/xeq.c     **** 	 */
5604:src/xeq.c     **** 	decContextDefault(&Ctx, DEC_INIT_BASE);
5605:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
5606:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
5607:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
5608:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
5609:src/xeq.c     **** }
5610:src/xeq.c     **** 
5611:src/xeq.c     **** 
5612:src/xeq.c     **** 
5613:src/xeq.c     **** #ifdef INCLUDE_PLOTTING
5614:src/xeq.c     **** /*
5615:src/xeq.c     ****  *  Plotting commands
5616:src/xeq.c     ****  *
5617:src/xeq.c     ****  *  The plot buffer is a range of registers that is treated as pixel data
5618:src/xeq.c     ****  *  The first byte contains the length of the buffer in columns (bytes)
5619:src/xeq.c     ****  */
5620:src/xeq.c     **** 
5621:src/xeq.c     **** /*
5622:src/xeq.c     ****  *  Check register range and return a pointer to the plot data.
5623:src/xeq.c     ****  */
5624:src/xeq.c     **** unsigned char *plot_check_range( int arg, int width, int height )
5625:src/xeq.c     **** {
5626:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
5627:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
5628:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
5629:src/xeq.c     **** 	int bytes;
5630:src/xeq.c     **** 
5631:src/xeq.c     **** 	if ( width == 0 ) {
5632:src/xeq.c     **** 		width = (int) *p;
5633:src/xeq.c     **** 		height = (int) p[ 1 ];
5634:src/xeq.c     **** 	}
5635:src/xeq.c     **** 
5636:src/xeq.c     **** 	/*
5637:src/xeq.c     **** 	 *  Compute total number of bytes
5638:src/xeq.c     **** 	 */
5639:src/xeq.c     **** 	bytes = 2 + width * height;
5640:src/xeq.c     **** 
5641:src/xeq.c     **** 	/*
5642:src/xeq.c     **** 	 *  Check if we have enough room
5643:src/xeq.c     **** 	 */
5644:src/xeq.c     **** 	if ( width > PAPER_WIDTH || arg + ( bytes + n - 1 ) / n > lim ) {
5645:src/xeq.c     **** 		report_err( ERR_RANGE );
5646:src/xeq.c     **** 		return (unsigned char *) NULL;
5647:src/xeq.c     **** 	}
5648:src/xeq.c     **** 	return p;
5649:src/xeq.c     **** }
5650:src/xeq.c     **** 
5651:src/xeq.c     **** /*
5652:src/xeq.c     ****  * Set up for graphical object display.
5653:src/xeq.c     ****  */
5654:src/xeq.c     **** void cmdplotdisplay( unsigned int arg, enum rarg op )
ARM GAS  /tmp/ccQlyisH.s 			page 176


5655:src/xeq.c     **** {
5656:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
5657:src/xeq.c     **** 		DispPlot = arg + 1;
5658:src/xeq.c     **** 		frozen_display();
5659:src/xeq.c     **** 	}
5660:src/xeq.c     **** }
5661:src/xeq.c     **** 
5662:src/xeq.c     **** /*
5663:src/xeq.c     ****  *  Initialize a block of registers to act as a buffer for plotting
5664:src/xeq.c     ****  *  X contains the maximum width (<= 0 is default: 166)
5665:src/xeq.c     ****  */
5666:src/xeq.c     **** void cmdplotinit( unsigned int arg, enum rarg op )
5667:src/xeq.c     **** {
5668:src/xeq.c     **** 	int sgnx, sgny;
5669:src/xeq.c     **** 	int width = (int) getX_int_sgn( &sgnx );
5670:src/xeq.c     **** 	int height = (int) get_reg_n_int_sgn( regY_idx, &sgny ); 
5671:src/xeq.c     **** 	unsigned char *p;
5672:src/xeq.c     **** 	
5673:src/xeq.c     **** 	if ( sgnx || width == 0 ) {
5674:src/xeq.c     **** 		width = PAPER_WIDTH;
5675:src/xeq.c     **** 	}
5676:src/xeq.c     **** 	if ( sgny || height == 0 ) {
5677:src/xeq.c     **** 		height = 1;
5678:src/xeq.c     **** 	}
5679:src/xeq.c     **** 	else {
5680:src/xeq.c     **** 		/*
5681:src/xeq.c     **** 		 *  Make height count the byte rows
5682:src/xeq.c     **** 		 */
5683:src/xeq.c     **** 		height = ( height + 7 ) >> 3;
5684:src/xeq.c     **** 	}
5685:src/xeq.c     **** 
5686:src/xeq.c     **** 	p = plot_check_range( arg, width, height );
5687:src/xeq.c     **** 	if ( p != NULL ) {
5688:src/xeq.c     **** 		*p++ = (unsigned char) width;
5689:src/xeq.c     **** 		*p++ = (unsigned char) height;
5690:src/xeq.c     **** 		xset( p, 0, width * height );
5691:src/xeq.c     **** 	}
5692:src/xeq.c     **** }
5693:src/xeq.c     **** 
5694:src/xeq.c     **** /*
5695:src/xeq.c     ****  *  Return the width and height of the plotting block
5696:src/xeq.c     ****  */
5697:src/xeq.c     **** void cmdplotdim( unsigned int arg, enum rarg op )
5698:src/xeq.c     **** {
5699:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5700:src/xeq.c     **** 	if ( p != NULL ) {
5701:src/xeq.c     **** 		lift2_if_enabled();
5702:src/xeq.c     **** 		setX_int_sgn( p[ 0 ], 0 ); // width
5703:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
5704:src/xeq.c     **** 	}
5705:src/xeq.c     **** }
5706:src/xeq.c     **** 
5707:src/xeq.c     **** /*
5708:src/xeq.c     ****  *  All pixel related commands
5709:src/xeq.c     ****  *  X is the horizontal position 0..width
5710:src/xeq.c     ****  *  Y is the vertical position 0..7
5711:src/xeq.c     ****  */
ARM GAS  /tmp/ccQlyisH.s 			page 177


5712:src/xeq.c     **** void cmdplotpixel( unsigned int arg, enum rarg op )
5713:src/xeq.c     **** {
5714:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5715:src/xeq.c     **** 	if ( p != NULL ) {
5716:src/xeq.c     **** 		/*
5717:src/xeq.c     **** 		 *  Get row from Y
5718:src/xeq.c     **** 		 */
5719:src/xeq.c     **** 		int sgn;
5720:src/xeq.c     **** 		unsigned int row = (unsigned int) get_reg_n_int_sgn( regY_idx, &sgn );
5721:src/xeq.c     **** 		int pix = 0;
5722:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
5723:src/xeq.c     **** 			/*
5724:src/xeq.c     **** 			 *  Row is OK, get column from X
5725:src/xeq.c     **** 			 */
5726:src/xeq.c     **** 			unsigned int width = (unsigned int) *p;
5727:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
5728:src/xeq.c     **** 			if ( sgn == 0 && column < width ) {
5729:src/xeq.c     **** 				/*
5730:src/xeq.c     **** 				 *  Modify the bit in the correct byte
5731:src/xeq.c     **** 				 */
5732:src/xeq.c     **** 				pix = 1 << ( row & 7 );
5733:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
5734:src/xeq.c     **** 
5735:src/xeq.c     **** 				if ( op == RARG_PLOT_SETPIX ) {
5736:src/xeq.c     **** 					*p |= pix;
5737:src/xeq.c     **** 				}
5738:src/xeq.c     **** 				else if ( op == RARG_PLOT_CLRPIX ) {
5739:src/xeq.c     **** 					*p &= ~pix;
5740:src/xeq.c     **** 				}
5741:src/xeq.c     **** 				else if ( op == RARG_PLOT_FLIPPIX ) {
5742:src/xeq.c     **** 					*p ^= pix;
5743:src/xeq.c     **** 				}
5744:src/xeq.c     **** 			}
5745:src/xeq.c     **** 		}
5746:src/xeq.c     **** 		if ( op == RARG_PLOT_ISSET ) {
5747:src/xeq.c     **** 			fin_tst( *p & pix );
5748:src/xeq.c     **** 		}
5749:src/xeq.c     **** 	}
5750:src/xeq.c     **** }
5751:src/xeq.c     **** #endif
5752:src/xeq.c     **** 
5753:src/xeq.c     **** 
5754:src/xeq.c     **** /*
5755:src/xeq.c     ****  *  We don't allow some commands from a running program
5756:src/xeq.c     ****  */
5757:src/xeq.c     **** int not_running(void) {
5758:src/xeq.c     **** 	if ( Running ) {
5759:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5760:src/xeq.c     **** 		return 0;
5761:src/xeq.c     **** 	}
5762:src/xeq.c     **** 	return 1;
5763:src/xeq.c     **** }
5764:src/xeq.c     **** 
5765:src/xeq.c     **** /*
5766:src/xeq.c     ****  *  Handle the Running Flag
5767:src/xeq.c     ****  */
5768:src/xeq.c     **** void set_running_off_sst() {
ARM GAS  /tmp/ccQlyisH.s 			page 178


5769:src/xeq.c     **** 	Running = 0;
5770:src/xeq.c     **** }
5771:src/xeq.c     **** 
5772:src/xeq.c     **** void set_running_on_sst() {
5773:src/xeq.c     **** 	Running = 1;
5774:src/xeq.c     **** }
5775:src/xeq.c     **** 
5776:src/xeq.c     **** void set_running_off() {
 3535              		.loc 1 5776 6 view .LVU964
 3536              	.LBB1546:
5777:src/xeq.c     **** 	set_running_off_sst();
 3537              		.loc 1 5777 2 view .LVU965
 3538              	.LBB1547:
 3539              	.LBI1547:
5768:src/xeq.c     **** 	Running = 0;
 3540              		.loc 1 5768 6 view .LVU966
 3541              	.LBB1548:
5769:src/xeq.c     **** }
 3542              		.loc 1 5769 2 view .LVU967
5769:src/xeq.c     **** }
 3543              		.loc 1 5769 10 is_stmt 0 view .LVU968
 3544 0070 084A     		ldr	r2, .L290+8
 3545 0072 1160     		str	r1, [r2]
 3546              	.LBE1548:
 3547              	.LBE1547:
5778:src/xeq.c     **** 	State.entryp = 0;
 3548              		.loc 1 5778 2 is_stmt 1 view .LVU969
 3549              		.loc 1 5778 15 is_stmt 0 view .LVU970
 3550 0074 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 3551 0078 61F30412 		bfi	r2, r1, #4, #1
 3552 007c 83F8DD27 		strb	r2, [r3, #2013]
5779:src/xeq.c     **** 	dot( RCL_annun, 0);
 3553              		.loc 1 5779 2 is_stmt 1 view .LVU971
 3554              	.LBE1546:
 3555              	.LBE1545:
2239:src/xeq.c     **** 
 3556              		.loc 1 2239 1 is_stmt 0 view .LVU972
 3557 0080 BDE87040 		pop	{r4, r5, r6, lr}
 3558              		.cfi_restore 14
 3559              		.cfi_restore 6
 3560              		.cfi_restore 5
 3561              		.cfi_restore 4
 3562              		.cfi_def_cfa_offset 0
 3563              	.LBB1550:
 3564              	.LBB1549:
 3565              		.loc 1 5779 2 view .LVU973
 3566 0084 8A20     		movs	r0, #138
 3567 0086 FFF7FEBF 		b	dot
 3568              	.LVL265:
 3569              	.L291:
 3570 008a 00BF     		.align	2
 3571              	.L290:
 3572 008c 00000000 		.word	main_ram
 3573 0090 00000000 		.word	RetStk
 3574 0094 00000000 		.word	Running
 3575              	.LBE1549:
 3576              	.LBE1550:
ARM GAS  /tmp/ccQlyisH.s 			page 179


 3577              		.cfi_endproc
 3578              	.LFE153:
 3580              		.section	.text.user_pc,"ax",%progbits
 3581              		.align	1
 3582              		.p2align 2,,3
 3583              		.global	user_pc
 3584              		.syntax unified
 3585              		.thumb
 3586              		.thumb_func
 3587              		.fpu fpv4-sp-d16
 3589              	user_pc:
 3590              	.LVL266:
 3591              	.LFB25:
 485:src/xeq.c     **** 	unsigned int n = 1;
 3592              		.loc 1 485 39 is_stmt 1 view -0
 3593              		.cfi_startproc
 3594              		@ args = 0, pretend = 0, frame = 0
 3595              		@ frame_needed = 0, uses_anonymous_args = 0
 3596              		@ link register save eliminated.
 486:src/xeq.c     **** 	unsigned int base;
 3597              		.loc 1 486 2 view .LVU975
 487:src/xeq.c     **** 
 3598              		.loc 1 487 2 view .LVU976
 490:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3599              		.loc 1 490 2 view .LVU977
 490:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3600              		.loc 1 490 5 is_stmt 0 view .LVU978
 3601 0000 0346     		mov	r3, r0
 3602 0002 20B1     		cbz	r0, .L293
 490:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3603              		.loc 1 490 17 discriminator 1 view .LVU979
 3604 0004 820B     		lsrs	r2, r0, #14
 490:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3605              		.loc 1 490 14 discriminator 1 view .LVU980
 3606 0006 032A     		cmp	r2, #3
 3607 0008 01D0     		beq	.L293
 3608 000a FFF7FEBF 		b	user_pc.part.0
 3609              	.LVL267:
 3610              	.L293:
 491:src/xeq.c     **** #else
 3611              		.loc 1 491 3 is_stmt 1 view .LVU981
 491:src/xeq.c     **** #else
 3612              		.loc 1 491 24 is_stmt 0 view .LVU982
 3613 000e C3F30D00 		ubfx	r0, r3, #0, #14
 3614              	.LVL268:
 504:src/xeq.c     **** 
 3615              		.loc 1 504 1 view .LVU983
 3616 0012 7047     		bx	lr
 3617              		.cfi_endproc
 3618              	.LFE25:
 3620              		.section	.text.find_user_pc,"ax",%progbits
 3621              		.align	1
 3622              		.p2align 2,,3
 3623              		.global	find_user_pc
 3624              		.syntax unified
 3625              		.thumb
 3626              		.thumb_func
ARM GAS  /tmp/ccQlyisH.s 			page 180


 3627              		.fpu fpv4-sp-d16
 3629              	find_user_pc:
 3630              	.LVL269:
 3631              	.LFB26:
 508:src/xeq.c     **** 	unsigned int upc = state_pc();
 3632              		.loc 1 508 48 is_stmt 1 view -0
 3633              		.cfi_startproc
 3634              		@ args = 0, pretend = 0, frame = 0
 3635              		@ frame_needed = 0, uses_anonymous_args = 0
 509:src/xeq.c     **** 	const int libp = isLIB(upc);
 3636              		.loc 1 509 2 view .LVU985
 508:src/xeq.c     **** 	unsigned int upc = state_pc();
 3637              		.loc 1 508 48 is_stmt 0 view .LVU986
 3638 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3639              		.cfi_def_cfa_offset 24
 3640              		.cfi_offset 3, -24
 3641              		.cfi_offset 4, -20
 3642              		.cfi_offset 5, -16
 3643              		.cfi_offset 6, -12
 3644              		.cfi_offset 7, -8
 3645              		.cfi_offset 14, -4
 509:src/xeq.c     **** 	const int libp = isLIB(upc);
 3646              		.loc 1 509 21 view .LVU987
 3647 0002 124B     		ldr	r3, .L309
 3648 0004 1B68     		ldr	r3, [r3]
 3649 0006 B3F8E037 		ldrh	r3, [r3, #2016]
 3650              	.LVL270:
 510:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 3651              		.loc 1 510 2 is_stmt 1 view .LVU988
 511:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3652              		.loc 1 511 2 view .LVU989
 511:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3653              		.loc 1 511 43 is_stmt 0 view .LVU990
 3654 000a 13F44044 		ands	r4, r3, #49152
 3655              	.LVL271:
 511:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3656              		.loc 1 511 43 view .LVU991
 3657 000e 1ABF     		itte	ne
 3658 0010 03F44045 		andne	r5, r3, #49152
 3659 0014 0135     		addne	r5, r5, #1
 3660 0016 2546     		moveq	r5, r4
 3661              	.LVL272:
 512:src/xeq.c     **** #ifndef REALBUILD
 3662              		.loc 1 512 2 is_stmt 1 view .LVU992
 514:src/xeq.c     **** 		return addrXROM(target);
 3663              		.loc 1 514 6 is_stmt 0 view .LVU993
 3664 0018 9B0B     		lsrs	r3, r3, #14
 3665              	.LVL273:
 512:src/xeq.c     **** #ifndef REALBUILD
 3666              		.loc 1 512 28 view .LVU994
 3667 001a 003C     		subs	r4, r4, #0
 512:src/xeq.c     **** #ifndef REALBUILD
 3668              		.loc 1 512 28 view .LVU995
 3669 001c 18BF     		it	ne
 3670 001e 0124     		movne	r4, #1
 3671              	.LVL274:
 514:src/xeq.c     **** 		return addrXROM(target);
ARM GAS  /tmp/ccQlyisH.s 			page 181


 3672              		.loc 1 514 2 is_stmt 1 view .LVU996
 514:src/xeq.c     **** 		return addrXROM(target);
 3673              		.loc 1 514 5 is_stmt 0 view .LVU997
 3674 0020 032B     		cmp	r3, #3
 508:src/xeq.c     **** 	unsigned int upc = state_pc();
 3675              		.loc 1 508 48 view .LVU998
 3676 0022 0646     		mov	r6, r0
 514:src/xeq.c     **** 		return addrXROM(target);
 3677              		.loc 1 514 5 view .LVU999
 3678 0024 0ED0     		beq	.L307
 3679              	.LBB1551:
 520:src/xeq.c     **** 			return oldbase;
 3680              		.loc 1 520 7 view .LVU1000
 3681 0026 0A4F     		ldr	r7, .L309+4
 3682 0028 05E0     		b	.L302
 3683              	.LVL275:
 3684              	.L304:
 519:src/xeq.c     **** 		if (PcWrapped)
 3685              		.loc 1 519 10 view .LVU1001
 3686 002a FFF7FEFF 		bl	do_inc
 3687              	.LVL276:
 520:src/xeq.c     **** 			return oldbase;
 3688              		.loc 1 520 6 view .LVU1002
 3689 002e 3B68     		ldr	r3, [r7]
 3690              	.LVL277:
 520:src/xeq.c     **** 			return oldbase;
 3691              		.loc 1 520 3 is_stmt 1 view .LVU1003
 3692 0030 0134     		adds	r4, r4, #1
 3693              	.LVL278:
 520:src/xeq.c     **** 			return oldbase;
 3694              		.loc 1 520 6 is_stmt 0 view .LVU1004
 3695 0032 2BB9     		cbnz	r3, .L300
 519:src/xeq.c     **** 		if (PcWrapped)
 3696              		.loc 1 519 10 view .LVU1005
 3697 0034 0546     		mov	r5, r0
 3698              	.LVL279:
 3699              	.L302:
 518:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 3700              		.loc 1 518 3 is_stmt 1 view .LVU1006
 519:src/xeq.c     **** 		if (PcWrapped)
 3701              		.loc 1 519 3 view .LVU1007
 519:src/xeq.c     **** 		if (PcWrapped)
 3702              		.loc 1 519 3 is_stmt 0 view .LVU1008
 3703              	.LBE1551:
 517:src/xeq.c     **** 		const unsigned int oldbase = base;
 3704              		.loc 1 517 8 is_stmt 1 view .LVU1009
 517:src/xeq.c     **** 		const unsigned int oldbase = base;
 3705              		.loc 1 517 8 is_stmt 0 view .LVU1010
 3706 0036 A642     		cmp	r6, r4
 3707              	.LBB1552:
 519:src/xeq.c     **** 		if (PcWrapped)
 3708              		.loc 1 519 10 view .LVU1011
 3709 0038 2846     		mov	r0, r5
 3710 003a 4FF00001 		mov	r1, #0
 3711              	.LBE1552:
 517:src/xeq.c     **** 		const unsigned int oldbase = base;
 3712              		.loc 1 517 8 view .LVU1012
ARM GAS  /tmp/ccQlyisH.s 			page 182


 3713 003e F4D8     		bhi	.L304
 3714              	.LVL280:
 3715              	.L300:
 524:src/xeq.c     **** 
 3716              		.loc 1 524 1 view .LVU1013
 3717 0040 2846     		mov	r0, r5
 3718              	.LVL281:
 524:src/xeq.c     **** 
 3719              		.loc 1 524 1 view .LVU1014
 3720 0042 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3721              	.LVL282:
 3722              	.L307:
 515:src/xeq.c     **** #endif
 3723              		.loc 1 515 3 is_stmt 1 view .LVU1015
 515:src/xeq.c     **** #endif
 3724              		.loc 1 515 10 is_stmt 0 view .LVU1016
 3725 0044 40F44045 		orr	r5, r0, #49152
 3726              	.LVL283:
 524:src/xeq.c     **** 
 3727              		.loc 1 524 1 view .LVU1017
 3728 0048 2846     		mov	r0, r5
 3729              	.LVL284:
 524:src/xeq.c     **** 
 3730              		.loc 1 524 1 view .LVU1018
 3731 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3732              	.LVL285:
 3733              	.L310:
 524:src/xeq.c     **** 
 3734              		.loc 1 524 1 view .LVU1019
 3735              		.align	2
 3736              	.L309:
 3737 004c 00000000 		.word	main_ram
 3738 0050 00000000 		.word	PcWrapped
 3739              		.cfi_endproc
 3740              	.LFE26:
 3742              		.section	.text.report_err,"ax",%progbits
 3743              		.align	1
 3744              		.p2align 2,,3
 3745              		.global	report_err
 3746              		.syntax unified
 3747              		.thumb
 3748              		.thumb_func
 3749              		.fpu fpv4-sp-d16
 3751              	report_err:
 3752              	.LVL286:
 3753              	.LFB28:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3754              		.loc 1 537 38 is_stmt 1 view -0
 3755              		.cfi_startproc
 3756              		@ args = 0, pretend = 0, frame = 0
 3757              		@ frame_needed = 0, uses_anonymous_args = 0
 538:src/xeq.c     **** 		Error = e;
 3758              		.loc 1 538 2 view .LVU1021
 538:src/xeq.c     **** 		Error = e;
 3759              		.loc 1 538 12 is_stmt 0 view .LVU1022
 3760 0000 064A     		ldr	r2, .L317
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/ccQlyisH.s 			page 183


 3761              		.loc 1 537 38 view .LVU1023
 3762 0002 10B5     		push	{r4, lr}
 3763              		.cfi_def_cfa_offset 8
 3764              		.cfi_offset 4, -8
 3765              		.cfi_offset 14, -4
 538:src/xeq.c     **** 		Error = e;
 3766              		.loc 1 538 12 view .LVU1024
 3767 0004 1468     		ldr	r4, [r2]
 538:src/xeq.c     **** 		Error = e;
 3768              		.loc 1 538 5 view .LVU1025
 3769 0006 0CB9     		cbnz	r4, .L314
 3770              	.LVL287:
 3771              	.LBB1555:
 3772              	.LBI1555:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3773              		.loc 1 537 5 is_stmt 1 view .LVU1026
 3774              	.LBB1556:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3775              		.loc 1 539 3 view .LVU1027
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3776              		.loc 1 539 9 is_stmt 0 view .LVU1028
 3777 0008 1060     		str	r0, [r2]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3778              		.loc 1 540 3 is_stmt 1 view .LVU1029
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3779              		.loc 1 540 6 is_stmt 0 view .LVU1030
 3780 000a 10B1     		cbz	r0, .L316
 3781              	.LVL288:
 3782              	.L314:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3783              		.loc 1 540 6 view .LVU1031
 3784              	.LBE1556:
 3785              	.LBE1555:
 545:src/xeq.c     **** }
 3786              		.loc 1 545 9 view .LVU1032
 3787 000c 0124     		movs	r4, #1
 546:src/xeq.c     **** 
 3788              		.loc 1 546 1 view .LVU1033
 3789 000e 2046     		mov	r0, r4
 3790              	.LVL289:
 546:src/xeq.c     **** 
 3791              		.loc 1 546 1 view .LVU1034
 3792 0010 10BD     		pop	{r4, pc}
 3793              	.LVL290:
 3794              	.L316:
 3795              	.LBB1558:
 3796              	.LBB1557:
 541:src/xeq.c     **** 			return 0;
 3797              		.loc 1 541 4 is_stmt 1 view .LVU1035
 3798 0012 FFF7FEFF 		bl	error_message
 3799              	.LVL291:
 542:src/xeq.c     **** 		}
 3800              		.loc 1 542 4 view .LVU1036
 542:src/xeq.c     **** 		}
 3801              		.loc 1 542 4 is_stmt 0 view .LVU1037
 3802              	.LBE1557:
 3803              	.LBE1558:
ARM GAS  /tmp/ccQlyisH.s 			page 184


 546:src/xeq.c     **** 
 3804              		.loc 1 546 1 view .LVU1038
 3805 0016 2046     		mov	r0, r4
 3806 0018 10BD     		pop	{r4, pc}
 3807              	.L318:
 3808 001a 00BF     		.align	2
 3809              	.L317:
 3810 001c 00000000 		.word	Error
 3811              		.cfi_endproc
 3812              	.LFE28:
 3814              		.section	.text.report_warn,"ax",%progbits
 3815              		.align	1
 3816              		.p2align 2,,3
 3817              		.global	report_warn
 3818              		.syntax unified
 3819              		.thumb
 3820              		.thumb_func
 3821              		.fpu fpv4-sp-d16
 3823              	report_warn:
 3824              	.LVL292:
 3825              	.LFB29:
 551:src/xeq.c     **** 	if (Running) {
 3826              		.loc 1 551 39 is_stmt 1 view -0
 3827              		.cfi_startproc
 3828              		@ args = 0, pretend = 0, frame = 0
 3829              		@ frame_needed = 0, uses_anonymous_args = 0
 552:src/xeq.c     **** 		return report_err(e);
 3830              		.loc 1 552 2 view .LVU1040
 552:src/xeq.c     **** 		return report_err(e);
 3831              		.loc 1 552 6 is_stmt 0 view .LVU1041
 3832 0000 114B     		ldr	r3, .L325
 551:src/xeq.c     **** 	if (Running) {
 3833              		.loc 1 551 39 view .LVU1042
 3834 0002 70B5     		push	{r4, r5, r6, lr}
 3835              		.cfi_def_cfa_offset 16
 3836              		.cfi_offset 4, -16
 3837              		.cfi_offset 5, -12
 3838              		.cfi_offset 6, -8
 3839              		.cfi_offset 14, -4
 552:src/xeq.c     **** 		return report_err(e);
 3840              		.loc 1 552 5 view .LVU1043
 3841 0004 1D68     		ldr	r5, [r3]
 551:src/xeq.c     **** 	if (Running) {
 3842              		.loc 1 551 39 view .LVU1044
 3843 0006 0446     		mov	r4, r0
 552:src/xeq.c     **** 		return report_err(e);
 3844              		.loc 1 552 5 view .LVU1045
 3845 0008 5DB1     		cbz	r5, .L320
 553:src/xeq.c     **** 	}
 3846              		.loc 1 553 3 is_stmt 1 view .LVU1046
 3847              	.LVL293:
 3848              	.LBB1567:
 3849              	.LBI1567:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3850              		.loc 1 537 5 view .LVU1047
 3851              	.LBB1568:
 538:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccQlyisH.s 			page 185


 3852              		.loc 1 538 2 view .LVU1048
 538:src/xeq.c     **** 		Error = e;
 3853              		.loc 1 538 12 is_stmt 0 view .LVU1049
 3854 000a 104B     		ldr	r3, .L325+4
 3855 000c 1D68     		ldr	r5, [r3]
 538:src/xeq.c     **** 		Error = e;
 3856              		.loc 1 538 5 view .LVU1050
 3857 000e 15B1     		cbz	r5, .L321
 3858              	.L323:
 545:src/xeq.c     **** }
 3859              		.loc 1 545 9 view .LVU1051
 3860 0010 0125     		movs	r5, #1
 3861              	.LVL294:
 3862              	.L319:
 545:src/xeq.c     **** }
 3863              		.loc 1 545 9 view .LVU1052
 3864              	.LBE1568:
 3865              	.LBE1567:
 562:src/xeq.c     **** 
 3866              		.loc 1 562 1 view .LVU1053
 3867 0012 2846     		mov	r0, r5
 3868 0014 70BD     		pop	{r4, r5, r6, pc}
 3869              	.LVL295:
 3870              	.L321:
 3871              	.LBB1572:
 3872              	.LBB1571:
 3873              	.LBB1569:
 3874              	.LBI1569:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3875              		.loc 1 537 5 is_stmt 1 view .LVU1054
 3876              	.LBB1570:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3877              		.loc 1 539 3 view .LVU1055
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3878              		.loc 1 539 9 is_stmt 0 view .LVU1056
 3879 0016 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3880              		.loc 1 540 3 is_stmt 1 view .LVU1057
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3881              		.loc 1 540 6 is_stmt 0 view .LVU1058
 3882 0018 0028     		cmp	r0, #0
 3883 001a F9D1     		bne	.L323
 541:src/xeq.c     **** 			return 0;
 3884              		.loc 1 541 4 is_stmt 1 view .LVU1059
 3885 001c FFF7FEFF 		bl	error_message
 3886              	.LVL296:
 542:src/xeq.c     **** 		}
 3887              		.loc 1 542 4 view .LVU1060
 542:src/xeq.c     **** 		}
 3888              		.loc 1 542 11 is_stmt 0 view .LVU1061
 3889 0020 F7E7     		b	.L319
 3890              	.LVL297:
 3891              	.L320:
 542:src/xeq.c     **** 		}
 3892              		.loc 1 542 11 view .LVU1062
 3893              	.LBE1570:
 3894              	.LBE1569:
ARM GAS  /tmp/ccQlyisH.s 			page 186


 3895              	.LBE1571:
 3896              	.LBE1572:
 3897              	.LBB1573:
 3898              	.LBI1573:
 551:src/xeq.c     **** 	if (Running) {
 3899              		.loc 1 551 5 is_stmt 1 view .LVU1063
 3900              	.LBB1574:
 555:src/xeq.c     **** #ifndef CONSOLE
 3901              		.loc 1 555 2 view .LVU1064
 3902 0022 FFF7FEFF 		bl	error_message
 3903              	.LVL298:
 557:src/xeq.c     **** 	JustDisplayed = 1;
 3904              		.loc 1 557 2 view .LVU1065
 557:src/xeq.c     **** 	JustDisplayed = 1;
 3905              		.loc 1 557 21 is_stmt 0 view .LVU1066
 3906 0026 0A4A     		ldr	r2, .L325+8
 558:src/xeq.c     **** 	ShowRPN = 1;
 3907              		.loc 1 558 16 view .LVU1067
 3908 0028 0A4E     		ldr	r6, .L325+12
 557:src/xeq.c     **** 	JustDisplayed = 1;
 3909              		.loc 1 557 21 view .LVU1068
 3910 002a D17D     		ldrb	r1, [r2, #23]	@ zero_extendqisi2
 559:src/xeq.c     **** #endif
 3911              		.loc 1 559 10 view .LVU1069
 3912 002c 0A48     		ldr	r0, .L325+16
 557:src/xeq.c     **** 	JustDisplayed = 1;
 3913              		.loc 1 557 21 view .LVU1070
 3914 002e 65F30411 		bfi	r1, r5, #4, #1
 561:src/xeq.c     **** }
 3915              		.loc 1 561 11 view .LVU1071
 3916 0032 251E     		subs	r5, r4, #0
 558:src/xeq.c     **** 	ShowRPN = 1;
 3917              		.loc 1 558 16 view .LVU1072
 3918 0034 4FF00103 		mov	r3, #1
 557:src/xeq.c     **** 	JustDisplayed = 1;
 3919              		.loc 1 557 21 view .LVU1073
 3920 0038 D175     		strb	r1, [r2, #23]
 558:src/xeq.c     **** 	ShowRPN = 1;
 3921              		.loc 1 558 2 is_stmt 1 view .LVU1074
 561:src/xeq.c     **** }
 3922              		.loc 1 561 11 is_stmt 0 view .LVU1075
 3923 003a 18BF     		it	ne
 3924 003c 0125     		movne	r5, #1
 559:src/xeq.c     **** #endif
 3925              		.loc 1 559 10 view .LVU1076
 3926 003e 0360     		str	r3, [r0]
 558:src/xeq.c     **** 	ShowRPN = 1;
 3927              		.loc 1 558 16 view .LVU1077
 3928 0040 3360     		str	r3, [r6]
 559:src/xeq.c     **** #endif
 3929              		.loc 1 559 2 is_stmt 1 view .LVU1078
 561:src/xeq.c     **** }
 3930              		.loc 1 561 2 view .LVU1079
 3931              	.LVL299:
 561:src/xeq.c     **** }
 3932              		.loc 1 561 2 is_stmt 0 view .LVU1080
 3933              	.LBE1574:
ARM GAS  /tmp/ccQlyisH.s 			page 187


 3934              	.LBE1573:
 562:src/xeq.c     **** 
 3935              		.loc 1 562 1 view .LVU1081
 3936 0042 2846     		mov	r0, r5
 3937 0044 70BD     		pop	{r4, r5, r6, pc}
 3938              	.LVL300:
 3939              	.L326:
 562:src/xeq.c     **** 
 3940              		.loc 1 562 1 view .LVU1082
 3941 0046 00BF     		.align	2
 3942              	.L325:
 3943 0048 00000000 		.word	Running
 3944 004c 00000000 		.word	Error
 3945 0050 00000000 		.word	StateWhileOn
 3946 0054 00000000 		.word	JustDisplayed
 3947 0058 00000000 		.word	ShowRPN
 3948              		.cfi_endproc
 3949              	.LFE29:
 3951              		.section	.text.bad_mode_error,"ax",%progbits
 3952              		.align	1
 3953              		.p2align 2,,3
 3954              		.global	bad_mode_error
 3955              		.syntax unified
 3956              		.thumb
 3957              		.thumb_func
 3958              		.fpu fpv4-sp-d16
 3960              	bad_mode_error:
 3961              	.LFB30:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 3962              		.loc 1 566 27 is_stmt 1 view -0
 3963              		.cfi_startproc
 3964              		@ args = 0, pretend = 0, frame = 0
 3965              		@ frame_needed = 0, uses_anonymous_args = 0
 3966              		@ link register save eliminated.
 567:src/xeq.c     **** }
 3967              		.loc 1 567 2 view .LVU1084
 3968              	.LVL301:
 3969              	.LBB1579:
 3970              	.LBI1579:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3971              		.loc 1 537 5 view .LVU1085
 3972              	.LBB1580:
 538:src/xeq.c     **** 		Error = e;
 3973              		.loc 1 538 2 view .LVU1086
 538:src/xeq.c     **** 		Error = e;
 3974              		.loc 1 538 12 is_stmt 0 view .LVU1087
 3975 0000 024B     		ldr	r3, .L329
 538:src/xeq.c     **** 		Error = e;
 3976              		.loc 1 538 5 view .LVU1088
 3977 0002 1A68     		ldr	r2, [r3]
 3978 0004 0AB9     		cbnz	r2, .L327
 3979              	.LVL302:
 3980              	.LBB1581:
 3981              	.LBI1581:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3982              		.loc 1 537 5 is_stmt 1 view .LVU1089
 3983              	.LBB1582:
ARM GAS  /tmp/ccQlyisH.s 			page 188


 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3984              		.loc 1 539 3 view .LVU1090
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3985              		.loc 1 539 9 is_stmt 0 view .LVU1091
 3986 0006 0D22     		movs	r2, #13
 3987 0008 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3988              		.loc 1 540 3 is_stmt 1 view .LVU1092
 3989              	.LVL303:
 3990              	.L327:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3991              		.loc 1 540 3 is_stmt 0 view .LVU1093
 3992              	.LBE1582:
 3993              	.LBE1581:
 3994              	.LBE1580:
 3995              	.LBE1579:
 568:src/xeq.c     **** 
 3996              		.loc 1 568 1 view .LVU1094
 3997 000a 7047     		bx	lr
 3998              	.L330:
 3999              		.align	2
 4000              	.L329:
 4001 000c 00000000 		.word	Error
 4002              		.cfi_endproc
 4003              	.LFE30:
 4005              		.section	.text.cmderr,"ax",%progbits
 4006              		.align	1
 4007              		.p2align 2,,3
 4008              		.global	cmderr
 4009              		.syntax unified
 4010              		.thumb
 4011              		.thumb_func
 4012              		.fpu fpv4-sp-d16
 4014              	cmderr:
 4015              	.LVL304:
 4016              	.LFB31:
 572:src/xeq.c     **** 	report_err(arg);
 4017              		.loc 1 572 45 is_stmt 1 view -0
 4018              		.cfi_startproc
 4019              		@ args = 0, pretend = 0, frame = 0
 4020              		@ frame_needed = 0, uses_anonymous_args = 0
 4021              		@ link register save eliminated.
 573:src/xeq.c     **** }
 4022              		.loc 1 573 2 view .LVU1096
 4023              	.LBB1587:
 4024              	.LBB1588:
 538:src/xeq.c     **** 		Error = e;
 4025              		.loc 1 538 12 is_stmt 0 view .LVU1097
 4026 0000 034A     		ldr	r2, .L336
 538:src/xeq.c     **** 		Error = e;
 4027              		.loc 1 538 5 view .LVU1098
 4028 0002 1168     		ldr	r1, [r2]
 4029              	.LVL305:
 538:src/xeq.c     **** 		Error = e;
 4030              		.loc 1 538 5 view .LVU1099
 4031              	.LBE1588:
 4032              	.LBI1587:
ARM GAS  /tmp/ccQlyisH.s 			page 189


 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4033              		.loc 1 537 5 is_stmt 1 view .LVU1100
 4034              	.LBB1593:
 538:src/xeq.c     **** 		Error = e;
 4035              		.loc 1 538 2 view .LVU1101
 538:src/xeq.c     **** 		Error = e;
 4036              		.loc 1 538 5 is_stmt 0 view .LVU1102
 4037 0004 09B9     		cbnz	r1, .L331
 4038              	.LVL306:
 4039              	.LBB1589:
 4040              	.LBI1589:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4041              		.loc 1 537 5 is_stmt 1 view .LVU1103
 4042              	.LBB1590:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4043              		.loc 1 539 3 view .LVU1104
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4044              		.loc 1 539 9 is_stmt 0 view .LVU1105
 4045 0006 1060     		str	r0, [r2]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4046              		.loc 1 540 3 is_stmt 1 view .LVU1106
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4047              		.loc 1 540 6 is_stmt 0 view .LVU1107
 4048 0008 00B1     		cbz	r0, .L335
 4049              	.LVL307:
 4050              	.L331:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4051              		.loc 1 540 6 view .LVU1108
 4052              	.LBE1590:
 4053              	.LBE1589:
 4054              	.LBE1593:
 4055              	.LBE1587:
 574:src/xeq.c     **** 
 4056              		.loc 1 574 1 view .LVU1109
 4057 000a 7047     		bx	lr
 4058              	.LVL308:
 4059              	.L335:
 4060              	.LBB1595:
 4061              	.LBB1594:
 4062              	.LBB1592:
 4063              	.LBB1591:
 541:src/xeq.c     **** 			return 0;
 4064              		.loc 1 541 4 is_stmt 1 view .LVU1110
 4065 000c FFF7FEBF 		b	error_message
 4066              	.LVL309:
 4067              	.L337:
 541:src/xeq.c     **** 			return 0;
 4068              		.loc 1 541 4 is_stmt 0 view .LVU1111
 4069              		.align	2
 4070              	.L336:
 4071 0010 00000000 		.word	Error
 4072              	.LBE1591:
 4073              	.LBE1592:
 4074              	.LBE1594:
 4075              	.LBE1595:
 4076              		.cfi_endproc
 4077              	.LFE31:
ARM GAS  /tmp/ccQlyisH.s 			page 190


 4079              		.section	.text.cmdmsg,"ax",%progbits
 4080              		.align	1
 4081              		.p2align 2,,3
 4082              		.global	cmdmsg
 4083              		.syntax unified
 4084              		.thumb
 4085              		.thumb_func
 4086              		.fpu fpv4-sp-d16
 4088              	cmdmsg:
 4089              	.LVL310:
 4090              	.LFB32:
 578:src/xeq.c     **** 	error_message(arg);
 4091              		.loc 1 578 45 is_stmt 1 view -0
 4092              		.cfi_startproc
 4093              		@ args = 0, pretend = 0, frame = 0
 4094              		@ frame_needed = 0, uses_anonymous_args = 0
 4095              		@ link register save eliminated.
 579:src/xeq.c     **** }
 4096              		.loc 1 579 2 view .LVU1113
 4097 0000 FFF7FEBF 		b	error_message
 4098              	.LVL311:
 579:src/xeq.c     **** }
 4099              		.loc 1 579 2 is_stmt 0 view .LVU1114
 4100              		.cfi_endproc
 4101              	.LFE32:
 4103              		.section	.text.rarg_roundingmode,"ax",%progbits
 4104              		.align	1
 4105              		.p2align 2,,3
 4106              		.global	rarg_roundingmode
 4107              		.syntax unified
 4108              		.thumb
 4109              		.thumb_func
 4110              		.fpu fpv4-sp-d16
 4112              	rarg_roundingmode:
 4113              	.LVL312:
 4114              	.LFB35:
 614:src/xeq.c     **** 	UState.rounding_mode = arg;
 4115              		.loc 1 614 56 is_stmt 1 view -0
 4116              		.cfi_startproc
 4117              		@ args = 0, pretend = 0, frame = 0
 4118              		@ frame_needed = 0, uses_anonymous_args = 0
 4119              		@ link register save eliminated.
 615:src/xeq.c     **** }
 4120              		.loc 1 615 2 view .LVU1116
 615:src/xeq.c     **** }
 4121              		.loc 1 615 23 is_stmt 0 view .LVU1117
 4122 0000 044B     		ldr	r3, .L340
 4123 0002 1B68     		ldr	r3, [r3]
 4124 0004 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 4125 0008 60F30612 		bfi	r2, r0, #4, #3
 4126              	.LVL313:
 615:src/xeq.c     **** }
 4127              		.loc 1 615 23 view .LVU1118
 4128 000c 83F8EB27 		strb	r2, [r3, #2027]
 616:src/xeq.c     **** 
 4129              		.loc 1 616 1 view .LVU1119
 4130 0010 7047     		bx	lr
ARM GAS  /tmp/ccQlyisH.s 			page 191


 4131              	.L341:
 4132 0012 00BF     		.align	2
 4133              	.L340:
 4134 0014 00000000 		.word	main_ram
 4135              		.cfi_endproc
 4136              	.LFE35:
 4138              		.section	.text.packed_from_number,"ax",%progbits
 4139              		.align	1
 4140              		.p2align 2,,3
 4141              		.global	packed_from_number
 4142              		.syntax unified
 4143              		.thumb
 4144              		.thumb_func
 4145              		.fpu fpv4-sp-d16
 4147              	packed_from_number:
 4148              	.LVL314:
 4149              	.LFB36:
 622:src/xeq.c     **** 	decContext ctx64;
 4150              		.loc 1 622 59 is_stmt 1 view -0
 4151              		.cfi_startproc
 4152              		@ args = 0, pretend = 0, frame = 24
 4153              		@ frame_needed = 0, uses_anonymous_args = 0
 623:src/xeq.c     **** 
 4154              		.loc 1 623 2 view .LVU1121
 625:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4155              		.loc 1 625 2 view .LVU1122
 622:src/xeq.c     **** 	decContext ctx64;
 4156              		.loc 1 622 59 is_stmt 0 view .LVU1123
 4157 0000 70B5     		push	{r4, r5, r6, lr}
 4158              		.cfi_def_cfa_offset 16
 4159              		.cfi_offset 4, -16
 4160              		.cfi_offset 5, -12
 4161              		.cfi_offset 6, -8
 4162              		.cfi_offset 14, -4
 4163 0002 86B0     		sub	sp, sp, #24
 4164              		.cfi_def_cfa_offset 40
 622:src/xeq.c     **** 	decContext ctx64;
 4165              		.loc 1 622 59 view .LVU1124
 4166 0004 0446     		mov	r4, r0
 4167 0006 0D46     		mov	r5, r1
 625:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4168              		.loc 1 625 2 view .LVU1125
 4169 0008 6846     		mov	r0, sp
 4170              	.LVL315:
 625:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4171              		.loc 1 625 2 view .LVU1126
 4172 000a 4021     		movs	r1, #64
 4173              	.LVL316:
 625:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4174              		.loc 1 625 2 view .LVU1127
 4175 000c FFF7FEFF 		bl	decContextDefault
 4176              	.LVL317:
 626:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4177              		.loc 1 626 2 is_stmt 1 view .LVU1128
 4178              	.LBB1596:
 4179              	.LBI1596:
 601:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
ARM GAS  /tmp/ccQlyisH.s 			page 192


 4180              		.loc 1 601 22 view .LVU1129
 4181              	.LBB1597:
 602:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4182              		.loc 1 602 2 view .LVU1130
 607:src/xeq.c     **** }
 4183              		.loc 1 607 2 view .LVU1131
 607:src/xeq.c     **** }
 4184              		.loc 1 607 37 is_stmt 0 view .LVU1132
 4185 0010 084B     		ldr	r3, .L344
 607:src/xeq.c     **** }
 4186              		.loc 1 607 9 view .LVU1133
 4187 0012 094E     		ldr	r6, .L344+4
 607:src/xeq.c     **** }
 4188              		.loc 1 607 37 view .LVU1134
 4189 0014 1B68     		ldr	r3, [r3]
 4190 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4191 001a C3F30213 		ubfx	r3, r3, #4, #3
 4192              	.LBE1597:
 4193              	.LBE1596:
 627:src/xeq.c     **** }
 4194              		.loc 1 627 2 view .LVU1135
 4195 001e 2946     		mov	r1, r5
 626:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4196              		.loc 1 626 14 view .LVU1136
 4197 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4198 0022 8DF80C30 		strb	r3, [sp, #12]
 627:src/xeq.c     **** }
 4199              		.loc 1 627 2 is_stmt 1 view .LVU1137
 4200 0026 2046     		mov	r0, r4
 4201 0028 6A46     		mov	r2, sp
 4202 002a FFF7FEFF 		bl	decimal64FromNumber
 4203              	.LVL318:
 628:src/xeq.c     **** 
 4204              		.loc 1 628 1 is_stmt 0 view .LVU1138
 4205 002e 06B0     		add	sp, sp, #24
 4206              		.cfi_def_cfa_offset 16
 4207              		@ sp needed
 4208 0030 70BD     		pop	{r4, r5, r6, pc}
 4209              	.LVL319:
 4210              	.L345:
 628:src/xeq.c     **** 
 4211              		.loc 1 628 1 view .LVU1139
 4212 0032 00BF     		.align	2
 4213              	.L344:
 4214 0034 00000000 		.word	main_ram
 4215 0038 00000000 		.word	.LANCHOR1
 4216              		.cfi_endproc
 4217              	.LFE36:
 4219              		.section	.text.packed128_from_number,"ax",%progbits
 4220              		.align	1
 4221              		.p2align 2,,3
 4222              		.global	packed128_from_number
 4223              		.syntax unified
 4224              		.thumb
 4225              		.thumb_func
 4226              		.fpu fpv4-sp-d16
 4228              	packed128_from_number:
ARM GAS  /tmp/ccQlyisH.s 			page 193


 4229              	.LVL320:
 4230              	.LFB37:
 630:src/xeq.c     **** 	decContext ctx128;
 4231              		.loc 1 630 63 is_stmt 1 view -0
 4232              		.cfi_startproc
 4233              		@ args = 0, pretend = 0, frame = 24
 4234              		@ frame_needed = 0, uses_anonymous_args = 0
 631:src/xeq.c     **** 
 4235              		.loc 1 631 2 view .LVU1141
 633:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4236              		.loc 1 633 2 view .LVU1142
 630:src/xeq.c     **** 	decContext ctx128;
 4237              		.loc 1 630 63 is_stmt 0 view .LVU1143
 4238 0000 70B5     		push	{r4, r5, r6, lr}
 4239              		.cfi_def_cfa_offset 16
 4240              		.cfi_offset 4, -16
 4241              		.cfi_offset 5, -12
 4242              		.cfi_offset 6, -8
 4243              		.cfi_offset 14, -4
 4244 0002 86B0     		sub	sp, sp, #24
 4245              		.cfi_def_cfa_offset 40
 630:src/xeq.c     **** 	decContext ctx128;
 4246              		.loc 1 630 63 view .LVU1144
 4247 0004 0446     		mov	r4, r0
 4248 0006 0D46     		mov	r5, r1
 633:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4249              		.loc 1 633 2 view .LVU1145
 4250 0008 6846     		mov	r0, sp
 4251              	.LVL321:
 633:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4252              		.loc 1 633 2 view .LVU1146
 4253 000a 8021     		movs	r1, #128
 4254              	.LVL322:
 633:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4255              		.loc 1 633 2 view .LVU1147
 4256 000c FFF7FEFF 		bl	decContextDefault
 4257              	.LVL323:
 634:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4258              		.loc 1 634 2 is_stmt 1 view .LVU1148
 4259              	.LBB1598:
 4260              	.LBI1598:
 601:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4261              		.loc 1 601 22 view .LVU1149
 4262              	.LBB1599:
 602:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4263              		.loc 1 602 2 view .LVU1150
 607:src/xeq.c     **** }
 4264              		.loc 1 607 2 view .LVU1151
 607:src/xeq.c     **** }
 4265              		.loc 1 607 37 is_stmt 0 view .LVU1152
 4266 0010 084B     		ldr	r3, .L348
 607:src/xeq.c     **** }
 4267              		.loc 1 607 9 view .LVU1153
 4268 0012 094E     		ldr	r6, .L348+4
 607:src/xeq.c     **** }
 4269              		.loc 1 607 37 view .LVU1154
 4270 0014 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQlyisH.s 			page 194


 4271 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4272 001a C3F30213 		ubfx	r3, r3, #4, #3
 4273              	.LBE1599:
 4274              	.LBE1598:
 635:src/xeq.c     **** }
 4275              		.loc 1 635 2 view .LVU1155
 4276 001e 2946     		mov	r1, r5
 634:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4277              		.loc 1 634 15 view .LVU1156
 4278 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4279 0022 8DF80C30 		strb	r3, [sp, #12]
 635:src/xeq.c     **** }
 4280              		.loc 1 635 2 is_stmt 1 view .LVU1157
 4281 0026 2046     		mov	r0, r4
 4282 0028 6A46     		mov	r2, sp
 4283 002a FFF7FEFF 		bl	decimal128FromNumber
 4284              	.LVL324:
 636:src/xeq.c     **** 
 4285              		.loc 1 636 1 is_stmt 0 view .LVU1158
 4286 002e 06B0     		add	sp, sp, #24
 4287              		.cfi_def_cfa_offset 16
 4288              		@ sp needed
 4289 0030 70BD     		pop	{r4, r5, r6, pc}
 4290              	.LVL325:
 4291              	.L349:
 636:src/xeq.c     **** 
 4292              		.loc 1 636 1 view .LVU1159
 4293 0032 00BF     		.align	2
 4294              	.L348:
 4295 0034 00000000 		.word	main_ram
 4296 0038 00000000 		.word	.LANCHOR1
 4297              		.cfi_endproc
 4298              	.LFE37:
 4300              		.section	.text.check_special,"ax",%progbits
 4301              		.align	1
 4302              		.p2align 2,,3
 4303              		.syntax unified
 4304              		.thumb
 4305              		.thumb_func
 4306              		.fpu fpv4-sp-d16
 4308              	check_special:
 4309              	.LVL326:
 4310              	.LFB41:
 675:src/xeq.c     **** 	decNumber y;
 4311              		.loc 1 675 46 is_stmt 1 view -0
 4312              		.cfi_startproc
 4313              		@ args = 0, pretend = 0, frame = 64
 4314              		@ frame_needed = 0, uses_anonymous_args = 0
 676:src/xeq.c     **** 	decimal64 z;
 4315              		.loc 1 676 2 view .LVU1161
 677:src/xeq.c     **** 	decimal128 d;
 4316              		.loc 1 677 2 view .LVU1162
 678:src/xeq.c     **** 	if (is_dblmode()) {
 4317              		.loc 1 678 2 view .LVU1163
 679:src/xeq.c     **** 		packed128_from_number(&d, x);
 4318              		.loc 1 679 2 view .LVU1164
 4319              	.LBB1616:
ARM GAS  /tmp/ccQlyisH.s 			page 195


 4320              	.LBI1616:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4321              		.loc 1 1087 5 view .LVU1165
 4322              	.LBB1617:
1088:src/xeq.c     **** }
 4323              		.loc 1 1088 2 view .LVU1166
1088:src/xeq.c     **** }
 4324              		.loc 1 1088 24 is_stmt 0 view .LVU1167
 4325 0000 274B     		ldr	r3, .L364
 4326 0002 1B68     		ldr	r3, [r3]
 4327              	.LBE1617:
 4328              	.LBE1616:
 675:src/xeq.c     **** 	decNumber y;
 4329              		.loc 1 675 46 view .LVU1168
 4330 0004 00B5     		push	{lr}
 4331              		.cfi_def_cfa_offset 4
 4332              		.cfi_offset 14, -4
 4333              	.LBB1619:
 4334              	.LBB1618:
1088:src/xeq.c     **** }
 4335              		.loc 1 1088 24 view .LVU1169
 4336 0006 B3F8E827 		ldrh	r2, [r3, #2024]
 4337 000a 44F20103 		movw	r3, #16385
 4338              	.LBE1618:
 4339              	.LBE1619:
 679:src/xeq.c     **** 		packed128_from_number(&d, x);
 4340              		.loc 1 679 5 view .LVU1170
 4341 000e 1340     		ands	r3, r3, r2
 4342 0010 B3F5804F 		cmp	r3, #16384
 675:src/xeq.c     **** 	decNumber y;
 4343              		.loc 1 675 46 view .LVU1171
 4344 0014 91B0     		sub	sp, sp, #68
 4345              		.cfi_def_cfa_offset 72
 675:src/xeq.c     **** 	decNumber y;
 4346              		.loc 1 675 46 view .LVU1172
 4347 0016 0146     		mov	r1, r0
 679:src/xeq.c     **** 		packed128_from_number(&d, x);
 4348              		.loc 1 679 5 view .LVU1173
 4349 0018 0FD0     		beq	.L362
 685:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4350              		.loc 1 685 3 is_stmt 1 view .LVU1174
 4351 001a 01A8     		add	r0, sp, #4
 4352              	.LVL327:
 685:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4353              		.loc 1 685 3 is_stmt 0 view .LVU1175
 4354 001c FFF7FEFF 		bl	packed_from_number
 4355              	.LVL328:
 686:src/xeq.c     **** 	}
 4356              		.loc 1 686 3 is_stmt 1 view .LVU1176
 4357 0020 01A8     		add	r0, sp, #4
 4358 0022 07A9     		add	r1, sp, #28
 4359 0024 FFF7FEFF 		bl	decimal64ToNumber
 4360              	.LVL329:
 688:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4361              		.loc 1 688 2 view .LVU1177
 688:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4362              		.loc 1 688 5 is_stmt 0 view .LVU1178
ARM GAS  /tmp/ccQlyisH.s 			page 196


 4363 0028 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4364 002c 13F0700F 		tst	r3, #112
 4365 0030 0FD1     		bne	.L353
 4366              	.L355:
 699:src/xeq.c     **** }
 4367              		.loc 1 699 9 view .LVU1179
 4368 0032 0020     		movs	r0, #0
 4369              	.L350:
 700:src/xeq.c     **** 
 4370              		.loc 1 700 1 view .LVU1180
 4371 0034 11B0     		add	sp, sp, #68
 4372              		.cfi_remember_state
 4373              		.cfi_def_cfa_offset 4
 4374              		@ sp needed
 4375 0036 5DF804FB 		ldr	pc, [sp], #4
 4376              	.LVL330:
 4377              	.L362:
 4378              		.cfi_restore_state
 680:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4379              		.loc 1 680 3 is_stmt 1 view .LVU1181
 4380 003a 03A8     		add	r0, sp, #12
 4381              	.LVL331:
 680:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4382              		.loc 1 680 3 is_stmt 0 view .LVU1182
 4383 003c FFF7FEFF 		bl	packed128_from_number
 4384              	.LVL332:
 681:src/xeq.c     **** 	}
 4385              		.loc 1 681 3 is_stmt 1 view .LVU1183
 4386 0040 03A8     		add	r0, sp, #12
 4387 0042 07A9     		add	r1, sp, #28
 4388 0044 FFF7FEFF 		bl	decimal128ToNumber
 4389              	.LVL333:
 688:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4390              		.loc 1 688 2 view .LVU1184
 688:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4391              		.loc 1 688 5 is_stmt 0 view .LVU1185
 4392 0048 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4393 004c 13F0700F 		tst	r3, #112
 4394 0050 EFD0     		beq	.L355
 4395              	.L353:
 689:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4396              		.loc 1 689 3 is_stmt 1 view .LVU1186
 4397              	.LVL334:
 4398              	.LBB1620:
 4399              	.LBI1620:
3518:src/xeq.c     **** 	unsigned short mask;
 4400              		.loc 1 3518 5 view .LVU1187
 4401              	.LBB1621:
3519:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 4402              		.loc 1 3519 2 view .LVU1188
3520:src/xeq.c     **** 
 4403              		.loc 1 3520 2 view .LVU1189
3520:src/xeq.c     **** 
 4404              		.loc 1 3520 34 is_stmt 0 view .LVU1190
 4405 0052 0DF10201 		add	r1, sp, #2
 4406 0056 6B20     		movs	r0, #107
 4407 0058 FFF7FEFF 		bl	flag_word
ARM GAS  /tmp/ccQlyisH.s 			page 197


 4408              	.LVL335:
3522:src/xeq.c     **** }
 4409              		.loc 1 3522 2 is_stmt 1 view .LVU1191
3522:src/xeq.c     **** }
 4410              		.loc 1 3522 24 is_stmt 0 view .LVU1192
 4411 005c BDF80230 		ldrh	r3, [sp, #2]
 4412 0060 0288     		ldrh	r2, [r0]
 4413              	.LBE1621:
 4414              	.LBE1620:
 689:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4415              		.loc 1 689 6 view .LVU1193
 4416 0062 1A42     		tst	r2, r3
 4417 0064 E5D1     		bne	.L355
 690:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4418              		.loc 1 690 4 is_stmt 1 view .LVU1194
 690:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4419              		.loc 1 690 8 is_stmt 0 view .LVU1195
 4420 0066 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 690:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4421              		.loc 1 690 7 view .LVU1196
 4422 006a 13F0300F 		tst	r3, #48
 4423 006e 06D0     		beq	.L356
 691:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 4424              		.loc 1 691 5 is_stmt 1 view .LVU1197
 4425              	.LVL336:
 4426              	.LBB1622:
 4427              	.LBI1622:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4428              		.loc 1 537 5 view .LVU1198
 4429              	.LBB1623:
 538:src/xeq.c     **** 		Error = e;
 4430              		.loc 1 538 2 view .LVU1199
 538:src/xeq.c     **** 		Error = e;
 4431              		.loc 1 538 12 is_stmt 0 view .LVU1200
 4432 0070 0C4B     		ldr	r3, .L364+4
 538:src/xeq.c     **** 		Error = e;
 4433              		.loc 1 538 5 view .LVU1201
 4434 0072 1A68     		ldr	r2, [r3]
 4435              	.LBB1624:
 4436              	.LBB1625:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4437              		.loc 1 539 9 view .LVU1202
 4438 0074 0120     		movs	r0, #1
 4439              	.LBE1625:
 4440              	.LBE1624:
 538:src/xeq.c     **** 		Error = e;
 4441              		.loc 1 538 5 view .LVU1203
 4442 0076 002A     		cmp	r2, #0
 4443 0078 DCD1     		bne	.L350
 4444              	.LVL337:
 4445              	.LBB1627:
 4446              	.LBI1624:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4447              		.loc 1 537 5 is_stmt 1 view .LVU1204
 4448              	.LBB1626:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4449              		.loc 1 539 3 view .LVU1205
ARM GAS  /tmp/ccQlyisH.s 			page 198


 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4450              		.loc 1 539 9 is_stmt 0 view .LVU1206
 4451 007a 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4452              		.loc 1 540 3 is_stmt 1 view .LVU1207
 4453 007c DAE7     		b	.L350
 4454              	.LVL338:
 4455              	.L356:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4456              		.loc 1 540 3 is_stmt 0 view .LVU1208
 4457              	.LBE1626:
 4458              	.LBE1627:
 4459              	.LBE1623:
 4460              	.LBE1622:
 692:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4461              		.loc 1 692 9 is_stmt 1 view .LVU1209
 692:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4462              		.loc 1 692 12 is_stmt 0 view .LVU1210
 4463 007e 13F0800F 		tst	r3, #128
 4464              	.LBB1628:
 4465              	.LBB1629:
 538:src/xeq.c     **** 		Error = e;
 4466              		.loc 1 538 12 view .LVU1211
 4467 0082 084B     		ldr	r3, .L364+4
 538:src/xeq.c     **** 		Error = e;
 4468              		.loc 1 538 5 view .LVU1212
 4469 0084 1A68     		ldr	r2, [r3]
 4470              	.LBE1629:
 4471              	.LBE1628:
 692:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4472              		.loc 1 692 12 view .LVU1213
 4473 0086 04D1     		bne	.L363
 695:src/xeq.c     **** 			return 1;
 4474              		.loc 1 695 5 is_stmt 1 view .LVU1214
 4475              	.LVL339:
 4476              	.LBB1633:
 4477              	.LBI1633:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4478              		.loc 1 537 5 view .LVU1215
 4479              	.LBB1634:
 538:src/xeq.c     **** 		Error = e;
 4480              		.loc 1 538 2 view .LVU1216
 538:src/xeq.c     **** 		Error = e;
 4481              		.loc 1 538 5 is_stmt 0 view .LVU1217
 4482 0088 42B9     		cbnz	r2, .L360
 4483              	.LVL340:
 4484              	.LBB1635:
 4485              	.LBI1635:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4486              		.loc 1 537 5 is_stmt 1 view .LVU1218
 4487              	.LBB1636:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4488              		.loc 1 539 3 view .LVU1219
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4489              		.loc 1 539 9 is_stmt 0 view .LVU1220
 4490 008a 0422     		movs	r2, #4
 4491 008c 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccQlyisH.s 			page 199


 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4492              		.loc 1 540 3 is_stmt 1 view .LVU1221
 4493              	.LBE1636:
 4494              	.LBE1635:
 4495              	.LBE1634:
 4496              	.LBE1633:
 696:src/xeq.c     **** 		}
 4497              		.loc 1 696 11 is_stmt 0 view .LVU1222
 4498 008e 0120     		movs	r0, #1
 4499 0090 D0E7     		b	.L350
 4500              	.LVL341:
 4501              	.L363:
 693:src/xeq.c     **** 			else
 4502              		.loc 1 693 5 is_stmt 1 view .LVU1223
 4503              	.LBB1637:
 4504              	.LBI1628:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4505              		.loc 1 537 5 view .LVU1224
 4506              	.LBB1632:
 538:src/xeq.c     **** 		Error = e;
 4507              		.loc 1 538 2 view .LVU1225
 538:src/xeq.c     **** 		Error = e;
 4508              		.loc 1 538 5 is_stmt 0 view .LVU1226
 4509 0092 1AB9     		cbnz	r2, .L360
 4510              	.LVL342:
 4511              	.LBB1630:
 4512              	.LBI1630:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4513              		.loc 1 537 5 is_stmt 1 view .LVU1227
 4514              	.LBB1631:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4515              		.loc 1 539 3 view .LVU1228
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4516              		.loc 1 539 9 is_stmt 0 view .LVU1229
 4517 0094 0522     		movs	r2, #5
 4518 0096 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4519              		.loc 1 540 3 is_stmt 1 view .LVU1230
 4520              	.LBE1631:
 4521              	.LBE1630:
 4522              	.LBE1632:
 4523              	.LBE1637:
 696:src/xeq.c     **** 		}
 4524              		.loc 1 696 11 is_stmt 0 view .LVU1231
 4525 0098 0120     		movs	r0, #1
 4526 009a CBE7     		b	.L350
 4527              	.LVL343:
 4528              	.L360:
 696:src/xeq.c     **** 		}
 4529              		.loc 1 696 11 view .LVU1232
 4530 009c 0120     		movs	r0, #1
 4531 009e C9E7     		b	.L350
 4532              	.L365:
 4533              		.align	2
 4534              	.L364:
 4535 00a0 00000000 		.word	main_ram
 4536 00a4 00000000 		.word	Error
ARM GAS  /tmp/ccQlyisH.s 			page 200


 4537              		.cfi_endproc
 4538              	.LFE41:
 4540              		.section	.text.packed_from_packed128,"ax",%progbits
 4541              		.align	1
 4542              		.p2align 2,,3
 4543              		.global	packed_from_packed128
 4544              		.syntax unified
 4545              		.thumb
 4546              		.thumb_func
 4547              		.fpu fpv4-sp-d16
 4549              	packed_from_packed128:
 4550              	.LVL344:
 4551              	.LFB38:
 639:src/xeq.c     **** 	decNumber temp;
 4552              		.loc 1 639 63 is_stmt 1 view -0
 4553              		.cfi_startproc
 4554              		@ args = 0, pretend = 0, frame = 40
 4555              		@ frame_needed = 0, uses_anonymous_args = 0
 640:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 4556              		.loc 1 640 2 view .LVU1234
 641:src/xeq.c     **** }
 4557              		.loc 1 641 2 view .LVU1235
 639:src/xeq.c     **** 	decNumber temp;
 4558              		.loc 1 639 63 is_stmt 0 view .LVU1236
 4559 0000 10B5     		push	{r4, lr}
 4560              		.cfi_def_cfa_offset 8
 4561              		.cfi_offset 4, -8
 4562              		.cfi_offset 14, -4
 4563 0002 8AB0     		sub	sp, sp, #40
 4564              		.cfi_def_cfa_offset 48
 639:src/xeq.c     **** 	decNumber temp;
 4565              		.loc 1 639 63 view .LVU1237
 4566 0004 0446     		mov	r4, r0
 641:src/xeq.c     **** }
 4567              		.loc 1 641 24 view .LVU1238
 4568 0006 0846     		mov	r0, r1
 4569              	.LVL345:
 641:src/xeq.c     **** }
 4570              		.loc 1 641 24 view .LVU1239
 4571 0008 01A9     		add	r1, sp, #4
 4572              	.LVL346:
 641:src/xeq.c     **** }
 4573              		.loc 1 641 24 view .LVU1240
 4574 000a FFF7FEFF 		bl	decimal128ToNumber
 4575              	.LVL347:
 641:src/xeq.c     **** }
 4576              		.loc 1 641 24 view .LVU1241
 4577 000e 0146     		mov	r1, r0
 641:src/xeq.c     **** }
 4578              		.loc 1 641 2 view .LVU1242
 4579 0010 2046     		mov	r0, r4
 4580 0012 FFF7FEFF 		bl	packed_from_number
 4581              	.LVL348:
 642:src/xeq.c     **** 
 4582              		.loc 1 642 1 view .LVU1243
 4583 0016 0AB0     		add	sp, sp, #40
 4584              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccQlyisH.s 			page 201


 4585              		@ sp needed
 4586 0018 10BD     		pop	{r4, pc}
 642:src/xeq.c     **** 
 4587              		.loc 1 642 1 view .LVU1244
 4588              		.cfi_endproc
 4589              	.LFE38:
 4591 001a 00BF     		.section	.text.packed128_from_packed,"ax",%progbits
 4592              		.align	1
 4593              		.p2align 2,,3
 4594              		.global	packed128_from_packed
 4595              		.syntax unified
 4596              		.thumb
 4597              		.thumb_func
 4598              		.fpu fpv4-sp-d16
 4600              	packed128_from_packed:
 4601              	.LVL349:
 4602              	.LFB39:
 645:src/xeq.c     **** 	decNumber temp;
 4603              		.loc 1 645 63 is_stmt 1 view -0
 4604              		.cfi_startproc
 4605              		@ args = 0, pretend = 0, frame = 40
 4606              		@ frame_needed = 0, uses_anonymous_args = 0
 646:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 4607              		.loc 1 646 2 view .LVU1246
 647:src/xeq.c     **** }
 4608              		.loc 1 647 2 view .LVU1247
 645:src/xeq.c     **** 	decNumber temp;
 4609              		.loc 1 645 63 is_stmt 0 view .LVU1248
 4610 0000 10B5     		push	{r4, lr}
 4611              		.cfi_def_cfa_offset 8
 4612              		.cfi_offset 4, -8
 4613              		.cfi_offset 14, -4
 4614 0002 8AB0     		sub	sp, sp, #40
 4615              		.cfi_def_cfa_offset 48
 645:src/xeq.c     **** 	decNumber temp;
 4616              		.loc 1 645 63 view .LVU1249
 4617 0004 0446     		mov	r4, r0
 647:src/xeq.c     **** }
 4618              		.loc 1 647 27 view .LVU1250
 4619 0006 0846     		mov	r0, r1
 4620              	.LVL350:
 647:src/xeq.c     **** }
 4621              		.loc 1 647 27 view .LVU1251
 4622 0008 01A9     		add	r1, sp, #4
 4623              	.LVL351:
 647:src/xeq.c     **** }
 4624              		.loc 1 647 27 view .LVU1252
 4625 000a FFF7FEFF 		bl	decimal64ToNumber
 4626              	.LVL352:
 647:src/xeq.c     **** }
 4627              		.loc 1 647 27 view .LVU1253
 4628 000e 0146     		mov	r1, r0
 647:src/xeq.c     **** }
 4629              		.loc 1 647 2 view .LVU1254
 4630 0010 2046     		mov	r0, r4
 4631 0012 FFF7FEFF 		bl	packed128_from_number
 4632              	.LVL353:
ARM GAS  /tmp/ccQlyisH.s 			page 202


 648:src/xeq.c     **** 
 4633              		.loc 1 648 1 view .LVU1255
 4634 0016 0AB0     		add	sp, sp, #40
 4635              		.cfi_def_cfa_offset 8
 4636              		@ sp needed
 4637 0018 10BD     		pop	{r4, pc}
 648:src/xeq.c     **** 
 4638              		.loc 1 648 1 view .LVU1256
 4639              		.cfi_endproc
 4640              	.LFE39:
 4642 001a 00BF     		.section	.text.stack_size,"ax",%progbits
 4643              		.align	1
 4644              		.p2align 2,,3
 4645              		.global	stack_size
 4646              		.syntax unified
 4647              		.thumb
 4648              		.thumb_func
 4649              		.fpu fpv4-sp-d16
 4651              	stack_size:
 4652              	.LFB42:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 4653              		.loc 1 703 22 is_stmt 1 view -0
 4654              		.cfi_startproc
 4655              		@ args = 0, pretend = 0, frame = 0
 4656              		@ frame_needed = 0, uses_anonymous_args = 0
 4657              		@ link register save eliminated.
 704:src/xeq.c     **** 		return 4;
 4658              		.loc 1 704 2 view .LVU1258
 704:src/xeq.c     **** 		return 4;
 4659              		.loc 1 704 8 is_stmt 0 view .LVU1259
 4660 0000 0B4B     		ldr	r3, .L376
 4661 0002 1B68     		ldr	r3, [r3]
 704:src/xeq.c     **** 		return 4;
 4662              		.loc 1 704 6 view .LVU1260
 4663 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 4664              		.loc 1 704 5 view .LVU1261
 4665 0008 1207     		lsls	r2, r2, #28
 4666 000a 0ED5     		bpl	.L372
 4667              	.LBB1638:
 4668              	.LBI1638:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 4669              		.loc 1 182 5 is_stmt 1 view .LVU1262
 4670              	.LBB1639:
 183:src/xeq.c     **** }
 4671              		.loc 1 183 2 view .LVU1263
 183:src/xeq.c     **** }
 4672              		.loc 1 183 9 is_stmt 0 view .LVU1264
 4673 000c B3F8E037 		ldrh	r3, [r3, #2016]
 4674              	.LBE1639:
 4675              	.LBE1638:
 704:src/xeq.c     **** 		return 4;
 4676              		.loc 1 704 27 view .LVU1265
 4677 0010 9B0B     		lsrs	r3, r3, #14
 4678 0012 032B     		cmp	r3, #3
 4679 0014 01D0     		beq	.L375
 706:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 203


 4680              		.loc 1 706 9 view .LVU1266
 4681 0016 0820     		movs	r0, #8
 707:src/xeq.c     **** 
 4682              		.loc 1 707 1 view .LVU1267
 4683 0018 7047     		bx	lr
 4684              	.L375:
 704:src/xeq.c     **** 		return 4;
 4685              		.loc 1 704 44 discriminator 2 view .LVU1268
 4686 001a 064B     		ldr	r3, .L376+4
 704:src/xeq.c     **** 		return 4;
 4687              		.loc 1 704 41 discriminator 2 view .LVU1269
 4688 001c 93F90130 		ldrsb	r3, [r3, #1]
 4689 0020 002B     		cmp	r3, #0
 705:src/xeq.c     **** 	return 8;
 4690              		.loc 1 705 10 discriminator 2 view .LVU1270
 4691 0022 B4BF     		ite	lt
 4692 0024 0820     		movlt	r0, #8
 4693 0026 0420     		movge	r0, #4
 4694 0028 7047     		bx	lr
 4695              	.L372:
 705:src/xeq.c     **** 	return 8;
 4696              		.loc 1 705 10 view .LVU1271
 4697 002a 0420     		movs	r0, #4
 4698 002c 7047     		bx	lr
 4699              	.L377:
 4700 002e 00BF     		.align	2
 4701              	.L376:
 4702 0030 00000000 		.word	main_ram
 4703 0034 00000000 		.word	XromParams
 4704              		.cfi_endproc
 4705              	.LFE42:
 4707              		.section	.text.copyreg,"ax",%progbits
 4708              		.align	1
 4709              		.p2align 2,,3
 4710              		.global	copyreg
 4711              		.syntax unified
 4712              		.thumb
 4713              		.thumb_func
 4714              		.fpu fpv4-sp-d16
 4716              	copyreg:
 4717              	.LVL354:
 4718              	.LFB45:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 4719              		.loc 1 717 46 is_stmt 1 view -0
 4720              		.cfi_startproc
 4721              		@ args = 0, pretend = 0, frame = 0
 4722              		@ frame_needed = 0, uses_anonymous_args = 0
 4723              		@ link register save eliminated.
 718:src/xeq.c     **** }
 4724              		.loc 1 718 2 view .LVU1273
 4725              	.LBB1640:
 4726              	.LBI1640:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4727              		.loc 1 1087 5 view .LVU1274
 4728              	.LBB1641:
1088:src/xeq.c     **** }
 4729              		.loc 1 1088 2 view .LVU1275
ARM GAS  /tmp/ccQlyisH.s 			page 204


1088:src/xeq.c     **** }
 4730              		.loc 1 1088 24 is_stmt 0 view .LVU1276
 4731 0000 064B     		ldr	r3, .L381
 4732 0002 1B68     		ldr	r3, [r3]
 4733 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 4734 0008 44F20103 		movw	r3, #16385
 4735              	.LBE1641:
 4736              	.LBE1640:
 718:src/xeq.c     **** }
 4737              		.loc 1 718 2 view .LVU1277
 4738 000c 1340     		ands	r3, r3, r2
 4739 000e B3F5804F 		cmp	r3, #16384
 4740 0012 0CBF     		ite	eq
 4741 0014 1022     		moveq	r2, #16
 4742 0016 0822     		movne	r2, #8
 4743 0018 FFF7FEBF 		b	xcopy
 4744              	.LVL355:
 4745              	.L382:
 718:src/xeq.c     **** }
 4746              		.loc 1 718 2 view .LVU1278
 4747              		.align	2
 4748              	.L381:
 4749 001c 00000000 		.word	main_ram
 4750              		.cfi_endproc
 4751              	.LFE45:
 4753              		.section	.text.set_lift,"ax",%progbits
 4754              		.align	1
 4755              		.p2align 2,,3
 4756              		.global	set_lift
 4757              		.syntax unified
 4758              		.thumb
 4759              		.thumb_func
 4760              		.fpu fpv4-sp-d16
 4762              	set_lift:
 4763              	.LFB51:
 758:src/xeq.c     ****     State2.state_lift = 1;
 4764              		.loc 1 758 21 is_stmt 1 view -0
 4765              		.cfi_startproc
 4766              		@ args = 0, pretend = 0, frame = 0
 4767              		@ frame_needed = 0, uses_anonymous_args = 0
 4768              		@ link register save eliminated.
 759:src/xeq.c     **** }
 4769              		.loc 1 759 5 view .LVU1280
 759:src/xeq.c     **** }
 4770              		.loc 1 759 23 is_stmt 0 view .LVU1281
 4771 0000 024A     		ldr	r2, .L384
 4772 0002 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 4773 0004 43F04003 		orr	r3, r3, #64
 4774 0008 D375     		strb	r3, [r2, #23]
 760:src/xeq.c     **** 
 4775              		.loc 1 760 1 view .LVU1282
 4776 000a 7047     		bx	lr
 4777              	.L385:
 4778              		.align	2
 4779              	.L384:
 4780 000c 00000000 		.word	StateWhileOn
 4781              		.cfi_endproc
ARM GAS  /tmp/ccQlyisH.s 			page 205


 4782              	.LFE51:
 4784              		.section	.text.is_dblmode,"ax",%progbits
 4785              		.align	1
 4786              		.p2align 2,,3
 4787              		.global	is_dblmode
 4788              		.syntax unified
 4789              		.thumb
 4790              		.thumb_func
 4791              		.fpu fpv4-sp-d16
 4793              	is_dblmode:
 4794              	.LFB81:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4795              		.loc 1 1087 22 is_stmt 1 view -0
 4796              		.cfi_startproc
 4797              		@ args = 0, pretend = 0, frame = 0
 4798              		@ frame_needed = 0, uses_anonymous_args = 0
 4799              		@ link register save eliminated.
1088:src/xeq.c     **** }
 4800              		.loc 1 1088 2 view .LVU1284
1088:src/xeq.c     **** }
 4801              		.loc 1 1088 24 is_stmt 0 view .LVU1285
 4802 0000 064B     		ldr	r3, .L387
 4803 0002 1B68     		ldr	r3, [r3]
 4804 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 4805 0008 44F20100 		movw	r0, #16385
 4806 000c 1840     		ands	r0, r0, r3
1089:src/xeq.c     **** 
 4807              		.loc 1 1089 1 view .LVU1286
 4808 000e A0F58040 		sub	r0, r0, #16384
 4809 0012 B0FA80F0 		clz	r0, r0
 4810 0016 4009     		lsrs	r0, r0, #5
 4811 0018 7047     		bx	lr
 4812              	.L388:
 4813 001a 00BF     		.align	2
 4814              	.L387:
 4815 001c 00000000 		.word	main_ram
 4816              		.cfi_endproc
 4817              	.LFE81:
 4819              		.section	.text.is_usrdblmode,"ax",%progbits
 4820              		.align	1
 4821              		.p2align 2,,3
 4822              		.global	is_usrdblmode
 4823              		.syntax unified
 4824              		.thumb
 4825              		.thumb_func
 4826              		.fpu fpv4-sp-d16
 4828              	is_usrdblmode:
 4829              	.LFB82:
1091:src/xeq.c     **** 	if (XromFlags.xIN)
 4830              		.loc 1 1091 25 is_stmt 1 view -0
 4831              		.cfi_startproc
 4832              		@ args = 0, pretend = 0, frame = 0
 4833              		@ frame_needed = 0, uses_anonymous_args = 0
 4834              		@ link register save eliminated.
1092:src/xeq.c     **** 		return XromFlags.mode_double;
 4835              		.loc 1 1092 2 view .LVU1288
1092:src/xeq.c     **** 		return XromFlags.mode_double;
ARM GAS  /tmp/ccQlyisH.s 			page 206


 4836              		.loc 1 1092 6 is_stmt 0 view .LVU1289
 4837 0000 0A4B     		ldr	r3, .L393
1092:src/xeq.c     **** 		return XromFlags.mode_double;
 4838              		.loc 1 1092 5 view .LVU1290
 4839 0002 93F90120 		ldrsb	r2, [r3, #1]
 4840 0006 002A     		cmp	r2, #0
 4841 0008 0CDB     		blt	.L392
1094:src/xeq.c     **** }
 4842              		.loc 1 1094 2 is_stmt 1 view .LVU1291
 4843              	.LBB1642:
 4844              	.LBI1642:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4845              		.loc 1 1087 5 view .LVU1292
 4846              	.LBB1643:
1088:src/xeq.c     **** }
 4847              		.loc 1 1088 2 view .LVU1293
1088:src/xeq.c     **** }
 4848              		.loc 1 1088 24 is_stmt 0 view .LVU1294
 4849 000a 094B     		ldr	r3, .L393+4
 4850 000c 1B68     		ldr	r3, [r3]
 4851 000e B3F8E837 		ldrh	r3, [r3, #2024]
 4852 0012 44F20100 		movw	r0, #16385
 4853 0016 1840     		ands	r0, r0, r3
 4854 0018 A0F58040 		sub	r0, r0, #16384
 4855 001c B0FA80F0 		clz	r0, r0
 4856 0020 4009     		lsrs	r0, r0, #5
 4857              	.LBE1643:
 4858              	.LBE1642:
1095:src/xeq.c     **** 
 4859              		.loc 1 1095 1 view .LVU1295
 4860 0022 7047     		bx	lr
 4861              	.L392:
1093:src/xeq.c     **** 	return is_dblmode();
 4862              		.loc 1 1093 3 is_stmt 1 view .LVU1296
1093:src/xeq.c     **** 	return is_dblmode();
 4863              		.loc 1 1093 19 is_stmt 0 view .LVU1297
 4864 0024 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4865 0026 C0F3C000 		ubfx	r0, r0, #3, #1
 4866 002a 7047     		bx	lr
 4867              	.L394:
 4868              		.align	2
 4869              	.L393:
 4870 002c 00000000 		.word	XromParams
 4871 0030 00000000 		.word	main_ram
 4872              		.cfi_endproc
 4873              	.LFE82:
 4875              		.section	.text.s_to_i,"ax",%progbits
 4876              		.align	1
 4877              		.p2align 2,,3
 4878              		.global	s_to_i
 4879              		.syntax unified
 4880              		.thumb
 4881              		.thumb_func
 4882              		.fpu fpv4-sp-d16
 4884              	s_to_i:
 4885              	.LVL356:
 4886              	.LFB83:
ARM GAS  /tmp/ccQlyisH.s 			page 207


1099:src/xeq.c     **** 	int x = 0;
 4887              		.loc 1 1099 27 is_stmt 1 view -0
 4888              		.cfi_startproc
 4889              		@ args = 0, pretend = 0, frame = 0
 4890              		@ frame_needed = 0, uses_anonymous_args = 0
 4891              		@ link register save eliminated.
1100:src/xeq.c     **** 	int neg;
 4892              		.loc 1 1100 2 view .LVU1299
1101:src/xeq.c     **** 
 4893              		.loc 1 1101 2 view .LVU1300
1103:src/xeq.c     **** 		s++;
 4894              		.loc 1 1103 2 view .LVU1301
1099:src/xeq.c     **** 	int x = 0;
 4895              		.loc 1 1099 27 is_stmt 0 view .LVU1302
 4896 0000 10B4     		push	{r4}
 4897              		.cfi_def_cfa_offset 4
 4898              		.cfi_offset 4, -4
1103:src/xeq.c     **** 		s++;
 4899              		.loc 1 1103 6 view .LVU1303
 4900 0002 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
1103:src/xeq.c     **** 		s++;
 4901              		.loc 1 1103 5 view .LVU1304
 4902 0004 2D29     		cmp	r1, #45
 4903 0006 26D0     		beq	.L411
1107:src/xeq.c     **** 			s++;
 4904              		.loc 1 1107 3 is_stmt 1 view .LVU1305
1107:src/xeq.c     **** 			s++;
 4905              		.loc 1 1107 6 is_stmt 0 view .LVU1306
 4906 0008 2B29     		cmp	r1, #43
 4907 000a 18D0     		beq	.L399
 4908              	.LVL357:
1112:src/xeq.c     **** 		const char c = *s++;
 4909              		.loc 1 1112 2 is_stmt 1 view .LVU1307
 4910              	.LBB1644:
1113:src/xeq.c     **** 
 4911              		.loc 1 1113 3 view .LVU1308
1115:src/xeq.c     **** 			break;
 4912              		.loc 1 1115 15 is_stmt 0 view .LVU1309
 4913 000c A1F13003 		sub	r3, r1, #48
1115:src/xeq.c     **** 			break;
 4914              		.loc 1 1115 6 view .LVU1310
 4915 0010 D9B2     		uxtb	r1, r3
 4916 0012 0929     		cmp	r1, #9
1113:src/xeq.c     **** 
 4917              		.loc 1 1113 20 view .LVU1311
 4918 0014 00F10102 		add	r2, r0, #1
 4919              	.LVL358:
1115:src/xeq.c     **** 			break;
 4920              		.loc 1 1115 3 is_stmt 1 view .LVU1312
1115:src/xeq.c     **** 			break;
 4921              		.loc 1 1115 6 is_stmt 0 view .LVU1313
 4922 0018 19D8     		bhi	.L404
 4923              	.LVL359:
 4924              	.L410:
1115:src/xeq.c     **** 			break;
 4925              		.loc 1 1115 6 view .LVU1314
 4926              	.LBE1644:
ARM GAS  /tmp/ccQlyisH.s 			page 208


1109:src/xeq.c     **** 	}
 4927              		.loc 1 1109 7 view .LVU1315
 4928 001a 0024     		movs	r4, #0
 4929              	.LVL360:
 4930              	.L398:
1109:src/xeq.c     **** 	}
 4931              		.loc 1 1109 7 view .LVU1316
 4932 001c 0020     		movs	r0, #0
 4933              	.LVL361:
 4934              	.L401:
 4935              	.LBB1645:
1117:src/xeq.c     **** 	}
 4936              		.loc 1 1117 3 is_stmt 1 view .LVU1317
1113:src/xeq.c     **** 
 4937              		.loc 1 1113 14 is_stmt 0 view .LVU1318
 4938 001e 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 4939              	.LVL362:
1117:src/xeq.c     **** 	}
 4940              		.loc 1 1117 10 view .LVU1319
 4941 0022 00EB8000 		add	r0, r0, r0, lsl #2
 4942              	.LVL363:
1117:src/xeq.c     **** 	}
 4943              		.loc 1 1117 5 view .LVU1320
 4944 0026 03EB4000 		add	r0, r3, r0, lsl #1
 4945              	.LVL364:
1117:src/xeq.c     **** 	}
 4946              		.loc 1 1117 5 view .LVU1321
 4947              	.LBE1645:
1112:src/xeq.c     **** 		const char c = *s++;
 4948              		.loc 1 1112 8 is_stmt 1 view .LVU1322
1112:src/xeq.c     **** 		const char c = *s++;
 4949              		.loc 1 1112 2 view .LVU1323
 4950              	.LBB1646:
1113:src/xeq.c     **** 
 4951              		.loc 1 1113 3 view .LVU1324
1115:src/xeq.c     **** 			break;
 4952              		.loc 1 1115 3 view .LVU1325
1115:src/xeq.c     **** 			break;
 4953              		.loc 1 1115 15 is_stmt 0 view .LVU1326
 4954 002a A1F13003 		sub	r3, r1, #48
1115:src/xeq.c     **** 			break;
 4955              		.loc 1 1115 6 view .LVU1327
 4956 002e D9B2     		uxtb	r1, r3
 4957 0030 0929     		cmp	r1, #9
 4958 0032 F4D9     		bls	.L401
 4959              	.LBE1646:
1119:src/xeq.c     **** 		return -x;
 4960              		.loc 1 1119 2 is_stmt 1 view .LVU1328
1119:src/xeq.c     **** 		return -x;
 4961              		.loc 1 1119 5 is_stmt 0 view .LVU1329
 4962 0034 04B1     		cbz	r4, .L395
 4963 0036 4042     		rsbs	r0, r0, #0
 4964              	.LVL365:
 4965              	.L395:
1122:src/xeq.c     **** 
 4966              		.loc 1 1122 1 view .LVU1330
 4967 0038 5DF8044B 		ldr	r4, [sp], #4
ARM GAS  /tmp/ccQlyisH.s 			page 209


 4968              		.cfi_remember_state
 4969              		.cfi_restore 4
 4970              		.cfi_def_cfa_offset 0
 4971 003c 7047     		bx	lr
 4972              	.LVL366:
 4973              	.L399:
 4974              		.cfi_restore_state
1108:src/xeq.c     **** 		neg = 0;
 4975              		.loc 1 1108 4 is_stmt 1 view .LVU1331
1112:src/xeq.c     **** 		const char c = *s++;
 4976              		.loc 1 1112 2 view .LVU1332
 4977              	.LBB1647:
1113:src/xeq.c     **** 
 4978              		.loc 1 1113 3 view .LVU1333
1113:src/xeq.c     **** 
 4979              		.loc 1 1113 14 is_stmt 0 view .LVU1334
 4980 003e 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
1115:src/xeq.c     **** 			break;
 4981              		.loc 1 1115 15 view .LVU1335
 4982 0040 A1F13003 		sub	r3, r1, #48
1115:src/xeq.c     **** 			break;
 4983              		.loc 1 1115 6 view .LVU1336
 4984 0044 D9B2     		uxtb	r1, r3
 4985 0046 0929     		cmp	r1, #9
1113:src/xeq.c     **** 
 4986              		.loc 1 1113 20 view .LVU1337
 4987 0048 00F10202 		add	r2, r0, #2
 4988              	.LVL367:
1115:src/xeq.c     **** 			break;
 4989              		.loc 1 1115 3 is_stmt 1 view .LVU1338
1115:src/xeq.c     **** 			break;
 4990              		.loc 1 1115 6 is_stmt 0 view .LVU1339
 4991 004c E5D9     		bls	.L410
 4992              	.LVL368:
 4993              	.L404:
1115:src/xeq.c     **** 			break;
 4994              		.loc 1 1115 6 view .LVU1340
 4995 004e 0020     		movs	r0, #0
 4996              	.LBE1647:
1122:src/xeq.c     **** 
 4997              		.loc 1 1122 1 view .LVU1341
 4998 0050 5DF8044B 		ldr	r4, [sp], #4
 4999              		.cfi_remember_state
 5000              		.cfi_restore 4
 5001              		.cfi_def_cfa_offset 0
 5002 0054 7047     		bx	lr
 5003              	.LVL369:
 5004              	.L411:
 5005              		.cfi_restore_state
1104:src/xeq.c     **** 		neg = 1;
 5006              		.loc 1 1104 3 is_stmt 1 view .LVU1342
1105:src/xeq.c     **** 	} else {
 5007              		.loc 1 1105 3 view .LVU1343
1112:src/xeq.c     **** 		const char c = *s++;
 5008              		.loc 1 1112 2 view .LVU1344
 5009              	.LBB1648:
1113:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 210


 5010              		.loc 1 1113 3 view .LVU1345
1113:src/xeq.c     **** 
 5011              		.loc 1 1113 14 is_stmt 0 view .LVU1346
 5012 0056 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
1115:src/xeq.c     **** 			break;
 5013              		.loc 1 1115 15 view .LVU1347
 5014 0058 A1F13003 		sub	r3, r1, #48
1115:src/xeq.c     **** 			break;
 5015              		.loc 1 1115 6 view .LVU1348
 5016 005c D9B2     		uxtb	r1, r3
 5017 005e 0929     		cmp	r1, #9
1113:src/xeq.c     **** 
 5018              		.loc 1 1113 20 view .LVU1349
 5019 0060 00F10202 		add	r2, r0, #2
 5020              	.LVL370:
1115:src/xeq.c     **** 			break;
 5021              		.loc 1 1115 3 is_stmt 1 view .LVU1350
1115:src/xeq.c     **** 			break;
 5022              		.loc 1 1115 6 is_stmt 0 view .LVU1351
 5023 0064 F3D8     		bhi	.L404
 5024              	.LBE1648:
1105:src/xeq.c     **** 	} else {
 5025              		.loc 1 1105 7 view .LVU1352
 5026 0066 0124     		movs	r4, #1
 5027 0068 D8E7     		b	.L398
 5028              		.cfi_endproc
 5029              	.LFE83:
 5031 006a 00BF     		.section	.text.digit,"ax",%progbits
 5032              		.align	1
 5033              		.p2align 2,,3
 5034              		.syntax unified
 5035              		.thumb
 5036              		.thumb_func
 5037              		.fpu fpv4-sp-d16
 5039              	digit:
 5040              	.LVL371:
 5041              	.LFB212:
3791:src/xeq.c     **** 	const int intm = is_intmode();
 5042              		.loc 1 3791 35 is_stmt 1 view -0
 5043              		.cfi_startproc
 5044              		@ args = 0, pretend = 0, frame = 0
 5045              		@ frame_needed = 0, uses_anonymous_args = 0
3792:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5046              		.loc 1 3792 2 view .LVU1354
3791:src/xeq.c     **** 	const int intm = is_intmode();
 5047              		.loc 1 3791 35 is_stmt 0 view .LVU1355
 5048 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5049              		.cfi_def_cfa_offset 24
 5050              		.cfi_offset 3, -24
 5051              		.cfi_offset 4, -20
 5052              		.cfi_offset 5, -16
 5053              		.cfi_offset 6, -12
 5054              		.cfi_offset 7, -8
 5055              		.cfi_offset 14, -4
3792:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5056              		.loc 1 3792 19 view .LVU1356
 5057 0002 604E     		ldr	r6, .L458
ARM GAS  /tmp/ccQlyisH.s 			page 211


3795:src/xeq.c     **** 		lim++;
 5058              		.loc 1 3795 13 view .LVU1357
 5059 0004 604C     		ldr	r4, .L458+4
3792:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5060              		.loc 1 3792 19 view .LVU1358
 5061 0006 3368     		ldr	r3, [r6]
3795:src/xeq.c     **** 		lim++;
 5062              		.loc 1 3795 13 view .LVU1359
 5063 0008 94F82020 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
3792:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5064              		.loc 1 3792 19 view .LVU1360
 5065 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 5066              	.LVL372:
3793:src/xeq.c     **** 
 5067              		.loc 1 3793 2 is_stmt 1 view .LVU1361
3795:src/xeq.c     **** 		lim++;
 5068              		.loc 1 3795 2 view .LVU1362
3796:src/xeq.c     **** 	if (intm) {
 5069              		.loc 1 3796 6 is_stmt 0 view .LVU1363
 5070 0010 2D2A     		cmp	r2, #45
 5071 0012 14BF     		ite	ne
 5072 0014 0C27     		movne	r7, #12
 5073 0016 0D27     		moveq	r7, #13
 5074              	.LVL373:
3797:src/xeq.c     **** 		if (c >= int_base()) {
 5075              		.loc 1 3797 2 is_stmt 1 view .LVU1364
3797:src/xeq.c     **** 		if (c >= int_base()) {
 5076              		.loc 1 3797 5 is_stmt 0 view .LVU1365
 5077 0018 DB07     		lsls	r3, r3, #31
 5078              	.LVL374:
3791:src/xeq.c     **** 	const int intm = is_intmode();
 5079              		.loc 1 3791 35 view .LVU1366
 5080 001a 0546     		mov	r5, r0
3797:src/xeq.c     **** 		if (c >= int_base()) {
 5081              		.loc 1 3797 5 view .LVU1367
 5082 001c 79D4     		bmi	.L455
3803:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5083              		.loc 1 3803 3 is_stmt 1 view .LVU1368
3803:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5084              		.loc 1 3803 6 is_stmt 0 view .LVU1369
 5085 001e 0928     		cmp	r0, #9
 5086 0020 00F28C80 		bhi	.L416
3808:src/xeq.c     **** 			lim = CMDLINELEN;
 5087              		.loc 1 3808 3 is_stmt 1 view .LVU1370
3808:src/xeq.c     **** 			lim = CMDLINELEN;
 5088              		.loc 1 3808 7 is_stmt 0 view .LVU1371
 5089 0024 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3808:src/xeq.c     **** 			lim = CMDLINELEN;
 5090              		.loc 1 3808 6 view .LVU1372
 5091 0026 002B     		cmp	r3, #0
 5092 0028 65D0     		beq	.L417
3809:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5093              		.loc 1 3809 4 is_stmt 1 view .LVU1373
 5094              	.LVL375:
3811:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5095              		.loc 1 3811 4 view .LVU1374
3811:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
ARM GAS  /tmp/ccQlyisH.s 			page 212


 5096              		.loc 1 3811 8 is_stmt 0 view .LVU1375
 5097 002a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3811:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5098              		.loc 1 3811 7 view .LVU1376
 5099 002c 122A     		cmp	r2, #18
 5100 002e 40F29980 		bls	.L441
 5101              	.LBB1659:
3812:src/xeq.c     **** 
 5102              		.loc 1 3812 5 is_stmt 1 view .LVU1377
3814:src/xeq.c     **** 					p++;
 5103              		.loc 1 3814 9 is_stmt 0 view .LVU1378
 5104 0032 E118     		adds	r1, r4, r3
3812:src/xeq.c     **** 
 5105              		.loc 1 3812 11 view .LVU1379
 5106 0034 2133     		adds	r3, r3, #33
3814:src/xeq.c     **** 					p++;
 5107              		.loc 1 3814 8 view .LVU1380
 5108 0036 91F82110 		ldrb	r1, [r1, #33]	@ zero_extendqisi2
3812:src/xeq.c     **** 
 5109              		.loc 1 3812 11 view .LVU1381
 5110 003a 2344     		add	r3, r3, r4
 5111              	.LVL376:
3814:src/xeq.c     **** 					p++;
 5112              		.loc 1 3814 5 is_stmt 1 view .LVU1382
3814:src/xeq.c     **** 					p++;
 5113              		.loc 1 3814 8 is_stmt 0 view .LVU1383
 5114 003c 2D29     		cmp	r1, #45
3815:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5115              		.loc 1 3815 6 is_stmt 1 view .LVU1384
3816:src/xeq.c     **** 					p[0] = p[1];
 5116              		.loc 1 3816 11 is_stmt 0 view .LVU1385
 5117 003e 5349     		ldr	r1, .L458+8
3815:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5118              		.loc 1 3815 7 view .LVU1386
 5119 0040 08BF     		it	eq
 5120 0042 0133     		addeq	r3, r3, #1
 5121              	.LVL377:
3816:src/xeq.c     **** 					p[0] = p[1];
 5122              		.loc 1 3816 11 is_stmt 1 view .LVU1387
 5123 0044 8B42     		cmp	r3, r1
 5124 0046 05D2     		bcs	.L420
 5125              	.LVL378:
 5126              	.L421:
3817:src/xeq.c     **** 					p++;
 5127              		.loc 1 3817 6 view .LVU1388
3817:src/xeq.c     **** 					p++;
 5128              		.loc 1 3817 11 is_stmt 0 view .LVU1389
 5129 0048 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5130 004a 03F8012B 		strb	r2, [r3], #1
 5131              	.LVL379:
3818:src/xeq.c     **** 				}
 5132              		.loc 1 3818 6 is_stmt 1 view .LVU1390
3816:src/xeq.c     **** 					p[0] = p[1];
 5133              		.loc 1 3816 11 view .LVU1391
 5134 004e 8B42     		cmp	r3, r1
 5135 0050 FAD1     		bne	.L421
 5136 0052 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
ARM GAS  /tmp/ccQlyisH.s 			page 213


 5137              	.L420:
3820:src/xeq.c     **** 			}
 5138              		.loc 1 3820 5 view .LVU1392
3820:src/xeq.c     **** 			}
 5139              		.loc 1 3820 18 is_stmt 0 view .LVU1393
 5140 0054 013A     		subs	r2, r2, #1
 5141 0056 D2B2     		uxtb	r2, r2
 5142              	.LBE1659:
3809:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5143              		.loc 1 3809 8 view .LVU1394
 5144 0058 1323     		movs	r3, #19
 5145              	.LVL380:
3840:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5146              		.loc 1 3840 2 is_stmt 1 view .LVU1395
3840:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5147              		.loc 1 3840 5 is_stmt 0 view .LVU1396
 5148 005a 9342     		cmp	r3, r2
 5149              	.LBB1660:
3820:src/xeq.c     **** 			}
 5150              		.loc 1 3820 18 view .LVU1397
 5151 005c 2277     		strb	r2, [r4, #28]
 5152              	.LBE1660:
3840:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5153              		.loc 1 3840 5 view .LVU1398
 5154 005e 53DD     		ble	.L438
 5155              	.LVL381:
 5156              	.L425:
3852:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5157              		.loc 1 3852 3 is_stmt 1 view .LVU1399
3852:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5158              		.loc 1 3852 6 is_stmt 0 view .LVU1400
 5159 0060 002D     		cmp	r5, #0
 5160 0062 70D1     		bne	.L427
3852:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5161              		.loc 1 3852 17 discriminator 1 view .LVU1401
 5162 0064 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3852:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5163              		.loc 1 3852 14 discriminator 1 view .LVU1402
 5164 0066 002B     		cmp	r3, #0
 5165 0068 00F08180 		beq	.L428
3853:src/xeq.c     **** 				return;
 5166              		.loc 1 3853 4 is_stmt 1 view .LVU1403
3856:src/xeq.c     **** 				return;
 5167              		.loc 1 3856 4 view .LVU1404
3853:src/xeq.c     **** 				return;
 5168              		.loc 1 3853 15 is_stmt 0 view .LVU1405
 5169 006c A018     		adds	r0, r4, r2
3856:src/xeq.c     **** 				return;
 5170              		.loc 1 3856 7 view .LVU1406
 5171 006e C17F     		ldrb	r1, [r0, #31]	@ zero_extendqisi2
 5172 0070 4439     		subs	r1, r1, #68
 5173 0072 0129     		cmp	r1, #1
 5174 0074 3ED9     		bls	.L412
3864:src/xeq.c     **** 
 5175              		.loc 1 3864 3 is_stmt 1 view .LVU1407
 5176              	.LVL382:
 5177              	.LBB1661:
ARM GAS  /tmp/ccQlyisH.s 			page 214


 5178              	.LBI1661:
2607:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5179              		.loc 1 2607 13 view .LVU1408
 5180              	.LBB1662:
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5181              		.loc 1 2608 2 view .LVU1409
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5182              		.loc 1 2608 23 is_stmt 0 view .LVU1410
 5183 0076 0132     		adds	r2, r2, #1
 5184 0078 D2B2     		uxtb	r2, r2
2609:src/xeq.c     **** }
 5185              		.loc 1 2609 25 view .LVU1411
 5186 007a A118     		adds	r1, r4, r2
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5187              		.loc 1 2608 27 view .LVU1412
 5188 007c 3027     		movs	r7, #48
 5189 007e 80F82070 		strb	r7, [r0, #32]
2609:src/xeq.c     **** }
 5190              		.loc 1 2609 2 is_stmt 1 view .LVU1413
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5191              		.loc 1 2608 23 is_stmt 0 view .LVU1414
 5192 0082 2277     		strb	r2, [r4, #28]
2609:src/xeq.c     **** }
 5193              		.loc 1 2609 25 view .LVU1415
 5194 0084 81F82050 		strb	r5, [r1, #32]
 5195              	.LVL383:
2609:src/xeq.c     **** }
 5196              		.loc 1 2609 25 view .LVU1416
 5197              	.LBE1662:
 5198              	.LBE1661:
3866:src/xeq.c     **** 			exponent_adjusted(1);
 5199              		.loc 1 3866 3 is_stmt 1 view .LVU1417
 5200              	.L439:
 5201              	.L431:
 5202              	.L432:
3867:src/xeq.c     **** 	}
 5203              		.loc 1 3867 4 view .LVU1418
 5204              	.LBB1667:
 5205              	.LBI1667:
2616:src/xeq.c     **** {
 5206              		.loc 1 2616 13 view .LVU1419
 5207              	.LBB1668:
2618:src/xeq.c     **** 	int i;
 5208              		.loc 1 2618 2 view .LVU1420
 5209              	.LBB1669:
 5210              	.LBI1669:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 5211              		.loc 1 1087 5 view .LVU1421
 5212              	.LBB1670:
1088:src/xeq.c     **** }
 5213              		.loc 1 1088 2 view .LVU1422
1088:src/xeq.c     **** }
 5214              		.loc 1 1088 2 is_stmt 0 view .LVU1423
 5215              	.LBE1670:
 5216              	.LBE1669:
2619:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
 5217              		.loc 1 2619 2 is_stmt 1 view .LVU1424
ARM GAS  /tmp/ccQlyisH.s 			page 215


2623:src/xeq.c     **** #endif
 5218              		.loc 1 2623 2 view .LVU1425
2628:src/xeq.c     **** #endif
 5219              		.loc 1 2628 2 view .LVU1426
2633:src/xeq.c     **** #endif
 5220              		.loc 1 2633 2 view .LVU1427
2638:src/xeq.c     **** #endif
 5221              		.loc 1 2638 2 view .LVU1428
2643:src/xeq.c     **** #endif
 5222              		.loc 1 2643 2 view .LVU1429
2648:src/xeq.c     **** #endif
 5223              		.loc 1 2648 2 view .LVU1430
2653:src/xeq.c     **** #endif
 5224              		.loc 1 2653 2 view .LVU1431
2658:src/xeq.c     **** #endif
 5225              		.loc 1 2658 2 view .LVU1432
2663:src/xeq.c     **** #endif
 5226              		.loc 1 2663 2 view .LVU1433
2668:src/xeq.c     **** #endif
 5227              		.loc 1 2668 2 view .LVU1434
2670:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
 5228              		.loc 1 2670 2 view .LVU1435
2671:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
 5229              		.loc 1 2671 2 view .LVU1436
2672:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
 5230              		.loc 1 2672 2 view .LVU1437
2673:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
 5231              		.loc 1 2673 2 view .LVU1438
2674:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
 5232              		.loc 1 2674 2 view .LVU1439
2675:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
 5233              		.loc 1 2675 2 view .LVU1440
2676:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
 5234              		.loc 1 2676 2 view .LVU1441
2677:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
 5235              		.loc 1 2677 2 view .LVU1442
2678:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
 5236              		.loc 1 2678 2 view .LVU1443
2679:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 5237              		.loc 1 2679 2 view .LVU1444
2681:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
 5238              		.loc 1 2681 2 view .LVU1445
2682:src/xeq.c     **** #else
 5239              		.loc 1 2682 2 view .LVU1446
 5240              	.LBB1673:
 5241              	.LBB1671:
1088:src/xeq.c     **** }
 5242              		.loc 1 1088 24 is_stmt 0 view .LVU1447
 5243 0088 3268     		ldr	r2, [r6]
 5244 008a B2F8E807 		ldrh	r0, [r2, #2024]
 5245              	.LBE1671:
 5246              	.LBE1673:
 5247              	.LBB1674:
3131:src/xeq.c     **** #else
 5248              		.loc 1 3131 9 view .LVU1448
 5249 008e E118     		adds	r1, r4, r3
 5250              	.LBE1674:
ARM GAS  /tmp/ccQlyisH.s 			page 216


2682:src/xeq.c     **** #else
 5251              		.loc 1 2682 8 view .LVU1449
 5252 0090 03F12005 		add	r5, r3, #32
 5253              	.LBB1675:
 5254              	.LBB1672:
1088:src/xeq.c     **** }
 5255              		.loc 1 1088 24 view .LVU1450
 5256 0094 44F20102 		movw	r2, #16385
 5257              	.LBE1672:
 5258              	.LBE1675:
 5259              	.LBB1676:
2802:src/xeq.c     **** 			// Double precision mode
 5260              		.loc 1 2802 6 view .LVU1451
 5261 0098 0240     		ands	r2, r2, r0
 5262              	.LBE1676:
2682:src/xeq.c     **** #else
 5263              		.loc 1 2682 8 view .LVU1452
 5264 009a 2544     		add	r5, r5, r4
 5265              	.LVL384:
2701:src/xeq.c     **** #endif
 5266              		.loc 1 2701 2 is_stmt 1 view .LVU1453
2706:src/xeq.c     **** 
 5267              		.loc 1 2706 2 view .LVU1454
2709:src/xeq.c     **** 		emax = 999;
 5268              		.loc 1 2709 2 view .LVU1455
 5269              	.LBB1677:
2713:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
 5270              		.loc 1 2713 3 view .LVU1456
2714:src/xeq.c     **** 
 5271              		.loc 1 2714 3 view .LVU1457
2716:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
 5272              		.loc 1 2716 3 view .LVU1458
2802:src/xeq.c     **** 			// Double precision mode
 5273              		.loc 1 2802 3 view .LVU1459
2837:src/xeq.c     **** 				}
 5274              		.loc 1 2837 17 is_stmt 0 view .LVU1460
 5275 009c B2F5804F 		cmp	r2, #16384
3131:src/xeq.c     **** #else
 5276              		.loc 1 3131 8 view .LVU1461
 5277 00a0 91F82010 		ldrb	r1, [r1, #32]	@ zero_extendqisi2
2837:src/xeq.c     **** 				}
 5278              		.loc 1 2837 17 view .LVU1462
 5279 00a4 41F2FF72 		movw	r2, #6143
 5280              	.LBE1677:
3145:src/xeq.c     **** #  else
 5281              		.loc 1 3145 3 view .LVU1463
 5282 00a8 05F10107 		add	r7, r5, #1
 5283              	.LBB1678:
2837:src/xeq.c     **** 				}
 5284              		.loc 1 2837 17 view .LVU1464
 5285 00ac 18BF     		it	ne
 5286 00ae 4FF4C072 		movne	r2, #384
 5287 00b2 40F27F16 		movw	r6, #383
 5288              	.LVL385:
2837:src/xeq.c     **** 				}
 5289              		.loc 1 2837 17 view .LVU1465
 5290              	.LBE1678:
ARM GAS  /tmp/ccQlyisH.s 			page 217


3154:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5291              		.loc 1 3154 9 view .LVU1466
 5292 00b6 3846     		mov	r0, r7
 5293              	.LBB1679:
2837:src/xeq.c     **** 				}
 5294              		.loc 1 2837 17 view .LVU1467
 5295 00b8 04BF     		itt	eq
 5296 00ba 1646     		moveq	r6, r2
 5297              	.LVL386:
2837:src/xeq.c     **** 				}
 5298              		.loc 1 2837 17 view .LVU1468
 5299 00bc 4FF4C052 		moveq	r2, #6144
 5300              	.LVL387:
2916:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
 5301              		.loc 1 2916 3 is_stmt 1 view .LVU1469
2932:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
 5302              		.loc 1 2932 8 view .LVU1470
2978:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
 5303              		.loc 1 2978 3 view .LVU1471
2992:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
 5304              		.loc 1 2992 8 view .LVU1472
3032:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
 5305              		.loc 1 3032 3 view .LVU1473
3058:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
 5306              		.loc 1 3058 8 view .LVU1474
3084:src/xeq.c     **** 			if (exp_chs_ds == 0) {
 5307              		.loc 1 3084 8 view .LVU1475
3113:src/xeq.c     **** 				// Limit exponents so sign change is always legal
 5308              		.loc 1 3113 4 view .LVU1476
3120:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
 5309              		.loc 1 3120 9 view .LVU1477
3128:src/xeq.c     **** 					return;
 5310              		.loc 1 3128 5 view .LVU1478
3131:src/xeq.c     **** #else
 5311              		.loc 1 3131 5 view .LVU1479
3137:src/xeq.c     **** 			}
 5312              		.loc 1 3137 11 is_stmt 0 view .LVU1480
 5313 00c0 4429     		cmp	r1, #68
 5314 00c2 18BF     		it	ne
 5315 00c4 1646     		movne	r6, r2
 5316              	.LVL388:
3137:src/xeq.c     **** 			}
 5317              		.loc 1 3137 11 view .LVU1481
 5318              	.LBE1679:
3145:src/xeq.c     **** #  else
 5319              		.loc 1 3145 2 is_stmt 1 view .LVU1482
3154:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5320              		.loc 1 3154 2 view .LVU1483
3154:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5321              		.loc 1 3154 8 view .LVU1484
3154:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5322              		.loc 1 3154 9 is_stmt 0 view .LVU1485
 5323 00c6 FFF7FEFF 		bl	s_to_i
 5324              	.LVL389:
3154:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5325              		.loc 1 3154 8 view .LVU1486
 5326 00ca B042     		cmp	r0, r6
ARM GAS  /tmp/ccQlyisH.s 			page 218


3155:src/xeq.c     **** 			p[i] = p[i + 1];
 5327              		.loc 1 3155 3 view .LVU1487
 5328 00cc 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
3154:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5329              		.loc 1 3154 8 view .LVU1488
 5330 00ce 0FDD     		ble	.L435
 5331              	.L456:
 5332              	.LVL390:
3155:src/xeq.c     **** 			p[i] = p[i + 1];
 5333              		.loc 1 3155 15 is_stmt 1 view .LVU1489
3155:src/xeq.c     **** 			p[i] = p[i + 1];
 5334              		.loc 1 3155 3 is_stmt 0 view .LVU1490
 5335 00d0 2BB1     		cbz	r3, .L437
 5336              	.LVL391:
 5337              	.L444:
3155:src/xeq.c     **** 			p[i] = p[i + 1];
 5338              		.loc 1 3155 3 view .LVU1491
 5339 00d2 3B46     		mov	r3, r7
 5340              	.L434:
3156:src/xeq.c     **** 		CmdLineLength--;
 5341              		.loc 1 3156 4 is_stmt 1 view .LVU1492
3156:src/xeq.c     **** 		CmdLineLength--;
 5342              		.loc 1 3156 9 is_stmt 0 view .LVU1493
 5343 00d4 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5344 00d6 1A70     		strb	r2, [r3]
3155:src/xeq.c     **** 			p[i] = p[i + 1];
 5345              		.loc 1 3155 29 is_stmt 1 view .LVU1494
3155:src/xeq.c     **** 			p[i] = p[i + 1];
 5346              		.loc 1 3155 15 view .LVU1495
3155:src/xeq.c     **** 			p[i] = p[i + 1];
 5347              		.loc 1 3155 3 is_stmt 0 view .LVU1496
 5348 00d8 0133     		adds	r3, r3, #1
 5349 00da 002A     		cmp	r2, #0
 5350 00dc FAD1     		bne	.L434
 5351              	.L437:
3157:src/xeq.c     **** 	}
 5352              		.loc 1 3157 3 is_stmt 1 view .LVU1497
3157:src/xeq.c     **** 	}
 5353              		.loc 1 3157 16 is_stmt 0 view .LVU1498
 5354 00de 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3154:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5355              		.loc 1 3154 9 view .LVU1499
 5356 00e0 3846     		mov	r0, r7
3157:src/xeq.c     **** 	}
 5357              		.loc 1 3157 16 view .LVU1500
 5358 00e2 013B     		subs	r3, r3, #1
 5359 00e4 2377     		strb	r3, [r4, #28]
3154:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5360              		.loc 1 3154 8 is_stmt 1 view .LVU1501
3154:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5361              		.loc 1 3154 9 is_stmt 0 view .LVU1502
 5362 00e6 FFF7FEFF 		bl	s_to_i
 5363              	.LVL392:
3154:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5364              		.loc 1 3154 8 view .LVU1503
 5365 00ea B042     		cmp	r0, r6
3155:src/xeq.c     **** 			p[i] = p[i + 1];
ARM GAS  /tmp/ccQlyisH.s 			page 219


 5366              		.loc 1 3155 3 view .LVU1504
 5367 00ec 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
3154:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5368              		.loc 1 3154 8 view .LVU1505
 5369 00ee EFDC     		bgt	.L456
 5370              	.L435:
3154:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5371              		.loc 1 3154 26 view .LVU1506
 5372 00f0 302B     		cmp	r3, #48
 5373 00f2 EED0     		beq	.L444
 5374              	.LVL393:
 5375              	.L412:
3154:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5376              		.loc 1 3154 26 view .LVU1507
 5377              	.LBE1668:
 5378              	.LBE1667:
3869:src/xeq.c     **** 
 5379              		.loc 1 3869 1 view .LVU1508
 5380 00f4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5381              	.LVL394:
 5382              	.L417:
3825:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5383              		.loc 1 3825 4 is_stmt 1 view .LVU1509
3825:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5384              		.loc 1 3825 11 is_stmt 0 view .LVU1510
 5385 00f6 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 5386              	.LVL395:
3827:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5387              		.loc 1 3827 4 is_stmt 1 view .LVU1511
3827:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5388              		.loc 1 3827 7 is_stmt 0 view .LVU1512
 5389 00f8 012B     		cmp	r3, #1
 5390 00fa 35D9     		bls	.L457
3830:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5391              		.loc 1 3830 5 is_stmt 1 view .LVU1513
3830:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5392              		.loc 1 3830 22 is_stmt 0 view .LVU1514
 5393 00fc 2D2A     		cmp	r2, #45
 5394 00fe 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5395 0100 30D0     		beq	.L441
 5396 0102 1223     		movs	r3, #18
 5397              	.LVL396:
 5398              	.L418:
3840:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5399              		.loc 1 3840 2 is_stmt 1 view .LVU1515
3840:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5400              		.loc 1 3840 5 is_stmt 0 view .LVU1516
 5401 0104 9342     		cmp	r3, r2
 5402 0106 ABDC     		bgt	.L425
 5403              	.LVL397:
 5404              	.L438:
3842:src/xeq.c     **** 		return;
 5405              		.loc 1 3842 3 is_stmt 1 view .LVU1517
3869:src/xeq.c     **** 
 5406              		.loc 1 3869 1 is_stmt 0 view .LVU1518
 5407 0108 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5408              		.cfi_remember_state
ARM GAS  /tmp/ccQlyisH.s 			page 220


 5409              		.cfi_restore 14
 5410              		.cfi_restore 7
 5411              		.cfi_restore 6
 5412              		.cfi_restore 5
 5413              		.cfi_restore 4
 5414              		.cfi_restore 3
 5415              		.cfi_def_cfa_offset 0
 5416              	.LVL398:
3842:src/xeq.c     **** 		return;
 5417              		.loc 1 3842 3 view .LVU1519
 5418 010c 0A20     		movs	r0, #10
 5419 010e FFF7FEBF 		b	report_warn
 5420              	.LVL399:
 5421              	.L455:
 5422              		.cfi_restore_state
3798:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5423              		.loc 1 3798 3 is_stmt 1 view .LVU1520
3798:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5424              		.loc 1 3798 12 is_stmt 0 view .LVU1521
 5425 0112 FFF7FEFF 		bl	int_base
 5426              	.LVL400:
3798:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5427              		.loc 1 3798 6 view .LVU1522
 5428 0116 A842     		cmp	r0, r5
 5429 0118 10D9     		bls	.L416
3840:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5430              		.loc 1 3840 2 is_stmt 1 view .LVU1523
3840:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5431              		.loc 1 3840 6 is_stmt 0 view .LVU1524
 5432 011a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3840:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5433              		.loc 1 3840 5 view .LVU1525
 5434 011c BA42     		cmp	r2, r7
 5435 011e F3DA     		bge	.L438
3846:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5436              		.loc 1 3846 2 is_stmt 1 view .LVU1526
3846:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5437              		.loc 1 3846 5 is_stmt 0 view .LVU1527
 5438 0120 092D     		cmp	r5, #9
 5439 0122 9DD9     		bls	.L425
3847:src/xeq.c     **** 	else {
 5440              		.loc 1 3847 3 is_stmt 1 view .LVU1528
 5441              	.LVL401:
 5442              	.LBB1680:
 5443              	.LBI1680:
2607:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5444              		.loc 1 2607 13 view .LVU1529
 5445              	.LBB1681:
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5446              		.loc 1 2608 2 view .LVU1530
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5447              		.loc 1 2608 23 is_stmt 0 view .LVU1531
 5448 0124 531C     		adds	r3, r2, #1
 5449 0126 DBB2     		uxtb	r3, r3
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5450              		.loc 1 2608 27 view .LVU1532
 5451 0128 2244     		add	r2, r2, r4
ARM GAS  /tmp/ccQlyisH.s 			page 221


2609:src/xeq.c     **** }
 5452              		.loc 1 2609 25 view .LVU1533
 5453 012a E118     		adds	r1, r4, r3
 5454              	.LBE1681:
 5455              	.LBE1680:
3847:src/xeq.c     **** 	else {
 5456              		.loc 1 3847 3 view .LVU1534
 5457 012c 3735     		adds	r5, r5, #55
 5458              	.LVL402:
 5459              	.LBB1683:
 5460              	.LBB1682:
2609:src/xeq.c     **** }
 5461              		.loc 1 2609 25 view .LVU1535
 5462 012e 0026     		movs	r6, #0
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5463              		.loc 1 2608 27 view .LVU1536
 5464 0130 82F82050 		strb	r5, [r2, #32]
2609:src/xeq.c     **** }
 5465              		.loc 1 2609 2 is_stmt 1 view .LVU1537
2609:src/xeq.c     **** }
 5466              		.loc 1 2609 25 is_stmt 0 view .LVU1538
 5467 0134 81F82060 		strb	r6, [r1, #32]
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5468              		.loc 1 2608 23 view .LVU1539
 5469 0138 2377     		strb	r3, [r4, #28]
 5470              	.LBE1682:
 5471              	.LBE1683:
3869:src/xeq.c     **** 
 5472              		.loc 1 3869 1 view .LVU1540
 5473 013a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5474              	.LVL403:
 5475              	.L416:
3799:src/xeq.c     **** 			return;
 5476              		.loc 1 3799 4 is_stmt 1 view .LVU1541
3869:src/xeq.c     **** 
 5477              		.loc 1 3869 1 is_stmt 0 view .LVU1542
 5478 013c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5479              		.cfi_remember_state
 5480              		.cfi_restore 14
 5481              		.cfi_restore 7
 5482              		.cfi_restore 6
 5483              		.cfi_restore 5
 5484              		.cfi_restore 4
 5485              		.cfi_restore 3
 5486              		.cfi_def_cfa_offset 0
 5487              	.LVL404:
3799:src/xeq.c     **** 			return;
 5488              		.loc 1 3799 4 view .LVU1543
 5489 0140 0920     		movs	r0, #9
 5490 0142 FFF7FEBF 		b	report_warn
 5491              	.LVL405:
 5492              	.L427:
 5493              		.cfi_restore_state
3864:src/xeq.c     **** 
 5494              		.loc 1 3864 3 is_stmt 1 view .LVU1544
 5495              	.LBB1684:
2607:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
ARM GAS  /tmp/ccQlyisH.s 			page 222


 5496              		.loc 1 2607 13 view .LVU1545
 5497              	.LBB1663:
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5498              		.loc 1 2608 2 view .LVU1546
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5499              		.loc 1 2608 23 is_stmt 0 view .LVU1547
 5500 0146 511C     		adds	r1, r2, #1
 5501 0148 C9B2     		uxtb	r1, r1
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5502              		.loc 1 2608 27 view .LVU1548
 5503 014a 2244     		add	r2, r2, r4
2609:src/xeq.c     **** }
 5504              		.loc 1 2609 25 view .LVU1549
 5505 014c 6718     		adds	r7, r4, r1
 5506              	.LBE1663:
 5507              	.LBE1684:
3864:src/xeq.c     **** 
 5508              		.loc 1 3864 3 view .LVU1550
 5509 014e 3035     		adds	r5, r5, #48
 5510              	.LVL406:
3866:src/xeq.c     **** 			exponent_adjusted(1);
 5511              		.loc 1 3866 7 view .LVU1551
 5512 0150 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 5513              	.LBB1685:
 5514              	.LBB1664:
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5515              		.loc 1 2608 27 view .LVU1552
 5516 0152 82F82050 		strb	r5, [r2, #32]
2609:src/xeq.c     **** }
 5517              		.loc 1 2609 2 is_stmt 1 view .LVU1553
2609:src/xeq.c     **** }
 5518              		.loc 1 2609 25 is_stmt 0 view .LVU1554
 5519 0156 0022     		movs	r2, #0
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5520              		.loc 1 2608 23 view .LVU1555
 5521 0158 2177     		strb	r1, [r4, #28]
2609:src/xeq.c     **** }
 5522              		.loc 1 2609 25 view .LVU1556
 5523 015a 87F82020 		strb	r2, [r7, #32]
2609:src/xeq.c     **** }
 5524              		.loc 1 2609 25 view .LVU1557
 5525              	.LBE1664:
 5526              	.LBE1685:
3866:src/xeq.c     **** 			exponent_adjusted(1);
 5527              		.loc 1 3866 3 is_stmt 1 view .LVU1558
3866:src/xeq.c     **** 			exponent_adjusted(1);
 5528              		.loc 1 3866 6 is_stmt 0 view .LVU1559
 5529 015e 002B     		cmp	r3, #0
 5530 0160 92D1     		bne	.L439
3869:src/xeq.c     **** 
 5531              		.loc 1 3869 1 view .LVU1560
 5532 0162 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5533              	.LVL407:
 5534              	.L441:
3809:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5535              		.loc 1 3809 8 view .LVU1561
 5536 0164 1323     		movs	r3, #19
ARM GAS  /tmp/ccQlyisH.s 			page 223


 5537 0166 CDE7     		b	.L418
 5538              	.LVL408:
 5539              	.L457:
3809:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5540              		.loc 1 3809 8 view .LVU1562
 5541 0168 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3825:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5542              		.loc 1 3825 8 view .LVU1563
 5543 016a 3B44     		add	r3, r3, r7
 5544              	.LVL409:
3825:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5545              		.loc 1 3825 8 view .LVU1564
 5546 016c CAE7     		b	.L418
 5547              	.LVL410:
 5548              	.L428:
3864:src/xeq.c     **** 
 5549              		.loc 1 3864 3 is_stmt 1 view .LVU1565
 5550              	.LBB1686:
2607:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5551              		.loc 1 2607 13 view .LVU1566
 5552              	.LBB1665:
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5553              		.loc 1 2608 2 view .LVU1567
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5554              		.loc 1 2608 23 is_stmt 0 view .LVU1568
 5555 016e 531C     		adds	r3, r2, #1
 5556 0170 DBB2     		uxtb	r3, r3
2609:src/xeq.c     **** }
 5557              		.loc 1 2609 25 view .LVU1569
 5558 0172 E118     		adds	r1, r4, r3
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5559              		.loc 1 2608 27 view .LVU1570
 5560 0174 2244     		add	r2, r2, r4
 5561 0176 3020     		movs	r0, #48
 5562 0178 82F82000 		strb	r0, [r2, #32]
2609:src/xeq.c     **** }
 5563              		.loc 1 2609 2 is_stmt 1 view .LVU1571
2609:src/xeq.c     **** }
 5564              		.loc 1 2609 25 is_stmt 0 view .LVU1572
 5565 017c 81F82050 		strb	r5, [r1, #32]
 5566              	.LVL411:
2609:src/xeq.c     **** }
 5567              		.loc 1 2609 25 view .LVU1573
 5568              	.LBE1665:
 5569              	.LBE1686:
3866:src/xeq.c     **** 			exponent_adjusted(1);
 5570              		.loc 1 3866 3 is_stmt 1 view .LVU1574
 5571              	.LBB1687:
 5572              	.LBB1666:
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5573              		.loc 1 2608 23 is_stmt 0 view .LVU1575
 5574 0180 2377     		strb	r3, [r4, #28]
 5575              	.LBE1666:
 5576              	.LBE1687:
3869:src/xeq.c     **** 
 5577              		.loc 1 3869 1 view .LVU1576
 5578 0182 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccQlyisH.s 			page 224


 5579              	.LVL412:
 5580              	.L459:
3869:src/xeq.c     **** 
 5581              		.loc 1 3869 1 view .LVU1577
 5582              		.align	2
 5583              	.L458:
 5584 0184 00000000 		.word	main_ram
 5585 0188 00000000 		.word	StateWhileOn
 5586 018c 33000000 		.word	StateWhileOn+51
 5587              		.cfi_endproc
 5588              	.LFE212:
 5590              		.section	.text.s_to_ull,"ax",%progbits
 5591              		.align	1
 5592              		.p2align 2,,3
 5593              		.global	s_to_ull
 5594              		.syntax unified
 5595              		.thumb
 5596              		.thumb_func
 5597              		.fpu fpv4-sp-d16
 5599              	s_to_ull:
 5600              	.LVL413:
 5601              	.LFB84:
1126:src/xeq.c     **** 	unsigned long long int x = 0;
 5602              		.loc 1 1126 67 is_stmt 1 view -0
 5603              		.cfi_startproc
 5604              		@ args = 0, pretend = 0, frame = 0
 5605              		@ frame_needed = 0, uses_anonymous_args = 0
 5606              		@ link register save eliminated.
1127:src/xeq.c     **** 
 5607              		.loc 1 1127 2 view .LVU1579
1126:src/xeq.c     **** 	unsigned long long int x = 0;
 5608              		.loc 1 1126 67 is_stmt 0 view .LVU1580
 5609 0000 F0B4     		push	{r4, r5, r6, r7}
 5610              		.cfi_def_cfa_offset 16
 5611              		.cfi_offset 4, -16
 5612              		.cfi_offset 5, -12
 5613              		.cfi_offset 6, -8
 5614              		.cfi_offset 7, -4
1127:src/xeq.c     **** 
 5615              		.loc 1 1127 25 view .LVU1581
 5616 0002 0026     		movs	r6, #0
 5617 0004 0027     		movs	r7, #0
 5618 0006 02E0     		b	.L464
 5619              	.LVL414:
 5620              	.L466:
 5621              	.LBB1688:
1141:src/xeq.c     **** 	}
 5622              		.loc 1 1141 5 view .LVU1582
 5623 0008 E618     		adds	r6, r4, r3
 5624              	.LVL415:
1141:src/xeq.c     **** 	}
 5625              		.loc 1 1141 5 view .LVU1583
 5626 000a 45F10007 		adc	r7, r5, #0
 5627              	.LVL416:
1141:src/xeq.c     **** 	}
 5628              		.loc 1 1141 5 view .LVU1584
 5629              	.LBE1688:
ARM GAS  /tmp/ccQlyisH.s 			page 225


1129:src/xeq.c     **** 		unsigned int n;
 5630              		.loc 1 1129 8 is_stmt 1 view .LVU1585
 5631              	.L464:
1129:src/xeq.c     **** 		unsigned int n;
 5632              		.loc 1 1129 2 view .LVU1586
 5633              	.LBB1689:
1130:src/xeq.c     **** 		const char c = *s++;
 5634              		.loc 1 1130 3 view .LVU1587
1131:src/xeq.c     **** 
 5635              		.loc 1 1131 3 view .LVU1588
1134:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 5636              		.loc 1 1134 4 view .LVU1589
1135:src/xeq.c     **** 			n = c - 'A' + 10;
 5637              		.loc 1 1135 8 view .LVU1590
1136:src/xeq.c     **** 		else
 5638              		.loc 1 1136 4 view .LVU1591
1131:src/xeq.c     **** 
 5639              		.loc 1 1131 14 is_stmt 0 view .LVU1592
 5640 000e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5641              	.LVL417:
1133:src/xeq.c     **** 			n = c - '0';
 5642              		.loc 1 1133 3 is_stmt 1 view .LVU1593
1133:src/xeq.c     **** 			n = c - '0';
 5643              		.loc 1 1133 16 is_stmt 0 view .LVU1594
 5644 0012 A2F13003 		sub	r3, r2, #48
1133:src/xeq.c     **** 			n = c - '0';
 5645              		.loc 1 1133 6 view .LVU1595
 5646 0016 DCB2     		uxtb	r4, r3
 5647 0018 092C     		cmp	r4, #9
1135:src/xeq.c     **** 			n = c - 'A' + 10;
 5648              		.loc 1 1135 11 view .LVU1596
 5649 001a A2F14105 		sub	r5, r2, #65
1133:src/xeq.c     **** 			n = c - '0';
 5650              		.loc 1 1133 6 view .LVU1597
 5651 001e 03D9     		bls	.L462
1135:src/xeq.c     **** 			n = c - 'A' + 10;
 5652              		.loc 1 1135 11 view .LVU1598
 5653 0020 052D     		cmp	r5, #5
 5654 0022 07D8     		bhi	.L460
1136:src/xeq.c     **** 		else
 5655              		.loc 1 1136 16 view .LVU1599
 5656 0024 A2F13703 		sub	r3, r2, #55
 5657              	.LVL418:
 5658              	.L462:
1139:src/xeq.c     **** 			break;
 5659              		.loc 1 1139 3 is_stmt 1 view .LVU1600
1141:src/xeq.c     **** 	}
 5660              		.loc 1 1141 3 view .LVU1601
1141:src/xeq.c     **** 	}
 5661              		.loc 1 1141 9 is_stmt 0 view .LVU1602
 5662 0028 A1FB0645 		umull	r4, r5, r1, r6
1139:src/xeq.c     **** 			break;
 5663              		.loc 1 1139 6 view .LVU1603
 5664 002c 8B42     		cmp	r3, r1
1141:src/xeq.c     **** 	}
 5665              		.loc 1 1141 9 view .LVU1604
 5666 002e 01FB0755 		mla	r5, r1, r7, r5
ARM GAS  /tmp/ccQlyisH.s 			page 226


1139:src/xeq.c     **** 			break;
 5667              		.loc 1 1139 6 view .LVU1605
 5668 0032 E9D3     		bcc	.L466
 5669              	.LVL419:
 5670              	.L460:
1139:src/xeq.c     **** 			break;
 5671              		.loc 1 1139 6 view .LVU1606
 5672              	.LBE1689:
1144:src/xeq.c     **** 
 5673              		.loc 1 1144 1 view .LVU1607
 5674 0034 3046     		mov	r0, r6
 5675              	.LVL420:
1144:src/xeq.c     **** 
 5676              		.loc 1 1144 1 view .LVU1608
 5677 0036 3946     		mov	r1, r7
 5678              	.LVL421:
1144:src/xeq.c     **** 
 5679              		.loc 1 1144 1 view .LVU1609
 5680 0038 F0BC     		pop	{r4, r5, r6, r7}
 5681              		.cfi_restore 7
 5682              		.cfi_restore 6
 5683              		.cfi_restore 5
 5684              		.cfi_restore 4
 5685              		.cfi_def_cfa_offset 0
 5686              	.LVL422:
1144:src/xeq.c     **** 
 5687              		.loc 1 1144 1 view .LVU1610
 5688 003a 7047     		bx	lr
 5689              		.cfi_endproc
 5690              	.LFE84:
 5692              		.section	.text.get_cmdline,"ax",%progbits
 5693              		.align	1
 5694              		.p2align 2,,3
 5695              		.global	get_cmdline
 5696              		.syntax unified
 5697              		.thumb
 5698              		.thumb_func
 5699              		.fpu fpv4-sp-d16
 5701              	get_cmdline:
 5702              	.LFB85:
1146:src/xeq.c     **** 	if (CmdLineLength) {
 5703              		.loc 1 1146 31 is_stmt 1 view -0
 5704              		.cfi_startproc
 5705              		@ args = 0, pretend = 0, frame = 0
 5706              		@ frame_needed = 0, uses_anonymous_args = 0
 5707              		@ link register save eliminated.
1147:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5708              		.loc 1 1147 2 view .LVU1612
1147:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5709              		.loc 1 1147 6 is_stmt 0 view .LVU1613
 5710 0000 044B     		ldr	r3, .L470
 5711 0002 187F     		ldrb	r0, [r3, #28]	@ zero_extendqisi2
1147:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5712              		.loc 1 1147 5 view .LVU1614
 5713 0004 28B1     		cbz	r0, .L467
1148:src/xeq.c     **** 		return Cmdline;
 5714              		.loc 1 1148 3 is_stmt 1 view .LVU1615
ARM GAS  /tmp/ccQlyisH.s 			page 227


1148:src/xeq.c     **** 		return Cmdline;
 5715              		.loc 1 1148 26 is_stmt 0 view .LVU1616
 5716 0006 1A18     		adds	r2, r3, r0
 5717 0008 0021     		movs	r1, #0
1149:src/xeq.c     **** 	}
 5718              		.loc 1 1149 10 view .LVU1617
 5719 000a 03F12000 		add	r0, r3, #32
1148:src/xeq.c     **** 		return Cmdline;
 5720              		.loc 1 1148 26 view .LVU1618
 5721 000e 82F82010 		strb	r1, [r2, #32]
1149:src/xeq.c     **** 	}
 5722              		.loc 1 1149 3 is_stmt 1 view .LVU1619
 5723              	.L467:
1152:src/xeq.c     **** 
 5724              		.loc 1 1152 1 is_stmt 0 view .LVU1620
 5725 0012 7047     		bx	lr
 5726              	.L471:
 5727              		.align	2
 5728              	.L470:
 5729 0014 00000000 		.word	StateWhileOn
 5730              		.cfi_endproc
 5731              	.LFE85:
 5733              		.section	.text.is_bad_cmdline,"ax",%progbits
 5734              		.align	1
 5735              		.p2align 2,,3
 5736              		.global	is_bad_cmdline
 5737              		.syntax unified
 5738              		.thumb
 5739              		.thumb_func
 5740              		.fpu fpv4-sp-d16
 5742              	is_bad_cmdline:
 5743              	.LFB86:
1169:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
 5744              		.loc 1 1169 1 is_stmt 1 view -0
 5745              		.cfi_startproc
 5746              		@ args = 0, pretend = 0, frame = 0
 5747              		@ frame_needed = 0, uses_anonymous_args = 0
 5748              		@ link register save eliminated.
1190:src/xeq.c     **** }
 5749              		.loc 1 1190 2 view .LVU1622
1191:src/xeq.c     **** 
 5750              		.loc 1 1191 1 is_stmt 0 view .LVU1623
 5751 0000 0020     		movs	r0, #0
 5752 0002 7047     		bx	lr
 5753              		.cfi_endproc
 5754              	.LFE86:
 5756              		.section	.text.get_flash_reg_n,"ax",%progbits
 5757              		.align	1
 5758              		.p2align 2,,3
 5759              		.global	get_flash_reg_n
 5760              		.syntax unified
 5761              		.thumb
 5762              		.thumb_func
 5763              		.fpu fpv4-sp-d16
 5765              	get_flash_reg_n:
 5766              	.LVL423:
 5767              	.LFB91:
ARM GAS  /tmp/ccQlyisH.s 			page 228


1354:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 5768              		.loc 1 1354 34 is_stmt 1 view -0
 5769              		.cfi_startproc
 5770              		@ args = 0, pretend = 0, frame = 0
 5771              		@ frame_needed = 0, uses_anonymous_args = 0
 5772              		@ link register save eliminated.
1355:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5773              		.loc 1 1355 2 view .LVU1625
1355:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5774              		.loc 1 1355 37 is_stmt 0 view .LVU1626
 5775 0000 064B     		ldr	r3, .L474
 5776 0002 1A68     		ldr	r2, [r3]
1355:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5777              		.loc 1 1355 68 view .LVU1627
 5778 0004 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1355:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5779              		.loc 1 1355 37 view .LVU1628
 5780 0008 02F22C41 		addw	r1, r2, #1068
1355:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5781              		.loc 1 1355 68 view .LVU1629
 5782 000c C3F16403 		rsb	r3, r3, #100
1355:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5783              		.loc 1 1355 22 view .LVU1630
 5784 0010 01EBC301 		add	r1, r1, r3, lsl #3
 5785 0014 02F24C72 		addw	r2, r2, #1868
 5786 0018 FFF7FEBF 		b	reg_address
 5787              	.LVL424:
 5788              	.L475:
1355:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5789              		.loc 1 1355 22 view .LVU1631
 5790              		.align	2
 5791              	.L474:
 5792 001c 00000000 		.word	backup_ram
 5793              		.cfi_endproc
 5794              	.LFE91:
 5796              		.section	.text.get_const,"ax",%progbits
 5797              		.align	1
 5798              		.p2align 2,,3
 5799              		.global	get_const
 5800              		.syntax unified
 5801              		.thumb
 5802              		.thumb_func
 5803              		.fpu fpv4-sp-d16
 5805              	get_const:
 5806              	.LVL425:
 5807              	.LFB92:
1365:src/xeq.c     **** 	static REGISTER result;
 5808              		.loc 1 1365 1 is_stmt 1 view -0
 5809              		.cfi_startproc
 5810              		@ args = 0, pretend = 0, frame = 40
 5811              		@ frame_needed = 0, uses_anonymous_args = 0
1366:src/xeq.c     **** 	const int i = cnsts[index].index;
 5812              		.loc 1 1366 2 view .LVU1633
1367:src/xeq.c     **** 	if (dbl) {
 5813              		.loc 1 1367 2 view .LVU1634
1365:src/xeq.c     **** 	static REGISTER result;
 5814              		.loc 1 1365 1 is_stmt 0 view .LVU1635
ARM GAS  /tmp/ccQlyisH.s 			page 229


 5815 0000 00B5     		push	{lr}
 5816              		.cfi_def_cfa_offset 4
 5817              		.cfi_offset 14, -4
1367:src/xeq.c     **** 	if (dbl) {
 5818              		.loc 1 1367 28 view .LVU1636
 5819 0002 1C4B     		ldr	r3, .L482
 5820 0004 00EB4000 		add	r0, r0, r0, lsl #1
 5821              	.LVL426:
1365:src/xeq.c     **** 	static REGISTER result;
 5822              		.loc 1 1365 1 view .LVU1637
 5823 0008 8BB0     		sub	sp, sp, #44
 5824              		.cfi_def_cfa_offset 48
1367:src/xeq.c     **** 	if (dbl) {
 5825              		.loc 1 1367 28 view .LVU1638
 5826 000a 13F82030 		ldrb	r3, [r3, r0, lsl #2]	@ zero_extendqisi2
 5827              	.LVL427:
1368:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5828              		.loc 1 1368 2 is_stmt 1 view .LVU1639
1368:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5829              		.loc 1 1368 5 is_stmt 0 view .LVU1640
 5830 000e 51B1     		cbz	r1, .L477
1369:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5831              		.loc 1 1369 3 is_stmt 1 view .LVU1641
1369:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5832              		.loc 1 1369 14 is_stmt 0 view .LVU1642
 5833 0010 9A1E     		subs	r2, r3, #2
1369:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5834              		.loc 1 1369 6 view .LVU1643
 5835 0012 7D2A     		cmp	r2, #125
 5836 0014 0FD9     		bls	.L478
1370:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5837              		.loc 1 1370 4 is_stmt 1 view .LVU1644
1370:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5838              		.loc 1 1370 11 is_stmt 0 view .LVU1645
 5839 0016 184A     		ldr	r2, .L482+4
1370:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5840              		.loc 1 1370 36 view .LVU1646
 5841 0018 03F07F00 		and	r0, r3, #127
1370:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5842              		.loc 1 1370 11 view .LVU1647
 5843 001c 02EB0010 		add	r0, r2, r0, lsl #4
1379:src/xeq.c     **** 
 5844              		.loc 1 1379 1 view .LVU1648
 5845 0020 0BB0     		add	sp, sp, #44
 5846              		.cfi_remember_state
 5847              		.cfi_def_cfa_offset 4
 5848              		@ sp needed
 5849 0022 5DF804FB 		ldr	pc, [sp], #4
 5850              	.L477:
 5851              		.cfi_restore_state
1374:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5852              		.loc 1 1374 3 is_stmt 1 view .LVU1649
1374:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5853              		.loc 1 1374 6 is_stmt 0 view .LVU1650
 5854 0026 1A06     		lsls	r2, r3, #24
 5855 0028 13D4     		bmi	.L480
1375:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
ARM GAS  /tmp/ccQlyisH.s 			page 230


 5856              		.loc 1 1375 4 is_stmt 1 view .LVU1651
1375:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5857              		.loc 1 1375 11 is_stmt 0 view .LVU1652
 5858 002a 1448     		ldr	r0, .L482+8
 5859 002c 00EBC300 		add	r0, r0, r3, lsl #3
1379:src/xeq.c     **** 
 5860              		.loc 1 1379 1 view .LVU1653
 5861 0030 0BB0     		add	sp, sp, #44
 5862              		.cfi_remember_state
 5863              		.cfi_def_cfa_offset 4
 5864              		@ sp needed
 5865 0032 5DF804FB 		ldr	pc, [sp], #4
 5866              	.L478:
 5867              		.cfi_restore_state
1371:src/xeq.c     **** 	}
 5868              		.loc 1 1371 3 is_stmt 1 view .LVU1654
 5869              	.LVL428:
 5870              	.LBB1690:
 5871              	.LBI1690:
 645:src/xeq.c     **** 	decNumber temp;
 5872              		.loc 1 645 6 view .LVU1655
 5873              	.LBB1691:
 646:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 5874              		.loc 1 646 2 view .LVU1656
 647:src/xeq.c     **** }
 5875              		.loc 1 647 2 view .LVU1657
 5876              	.LBE1691:
 5877              	.LBE1690:
1371:src/xeq.c     **** 	}
 5878              		.loc 1 1371 3 is_stmt 0 view .LVU1658
 5879 0036 1148     		ldr	r0, .L482+8
 5880              	.LBB1693:
 5881              	.LBB1692:
 647:src/xeq.c     **** }
 5882              		.loc 1 647 27 view .LVU1659
 5883 0038 01A9     		add	r1, sp, #4
 5884              	.LVL429:
 647:src/xeq.c     **** }
 5885              		.loc 1 647 27 view .LVU1660
 5886 003a 00EBC300 		add	r0, r0, r3, lsl #3
 5887 003e FFF7FEFF 		bl	decimal64ToNumber
 5888              	.LVL430:
 647:src/xeq.c     **** }
 5889              		.loc 1 647 27 view .LVU1661
 5890 0042 0146     		mov	r1, r0
 647:src/xeq.c     **** }
 5891              		.loc 1 647 2 view .LVU1662
 5892 0044 0E48     		ldr	r0, .L482+12
 5893 0046 FFF7FEFF 		bl	packed128_from_number
 5894              	.LVL431:
 5895              	.LBE1692:
 5896              	.LBE1693:
1378:src/xeq.c     **** }
 5897              		.loc 1 1378 9 view .LVU1663
 5898 004a 0D48     		ldr	r0, .L482+12
1379:src/xeq.c     **** 
 5899              		.loc 1 1379 1 view .LVU1664
ARM GAS  /tmp/ccQlyisH.s 			page 231


 5900 004c 0BB0     		add	sp, sp, #44
 5901              		.cfi_remember_state
 5902              		.cfi_def_cfa_offset 4
 5903              		@ sp needed
 5904 004e 5DF804FB 		ldr	pc, [sp], #4
 5905              	.LVL432:
 5906              	.L480:
 5907              		.cfi_restore_state
1376:src/xeq.c     **** 	}
 5908              		.loc 1 1376 3 is_stmt 1 view .LVU1665
 5909              	.LBB1694:
 5910              	.LBI1694:
 639:src/xeq.c     **** 	decNumber temp;
 5911              		.loc 1 639 6 view .LVU1666
 5912              	.LBB1695:
 640:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 5913              		.loc 1 640 2 view .LVU1667
 641:src/xeq.c     **** }
 5914              		.loc 1 641 2 view .LVU1668
 5915              	.LBE1695:
 5916              	.LBE1694:
1376:src/xeq.c     **** 	}
 5917              		.loc 1 1376 3 is_stmt 0 view .LVU1669
 5918 0052 0948     		ldr	r0, .L482+4
1376:src/xeq.c     **** 	}
 5919              		.loc 1 1376 55 view .LVU1670
 5920 0054 03F18053 		add	r3, r3, #268435456
 5921              	.LVL433:
1376:src/xeq.c     **** 	}
 5922              		.loc 1 1376 55 view .LVU1671
 5923 0058 803B     		subs	r3, r3, #128
 5924              	.LVL434:
 5925              	.LBB1697:
 5926              	.LBB1696:
 641:src/xeq.c     **** }
 5927              		.loc 1 641 24 view .LVU1672
 5928 005a 00EB0310 		add	r0, r0, r3, lsl #4
 5929 005e 01A9     		add	r1, sp, #4
 5930              	.LVL435:
 641:src/xeq.c     **** }
 5931              		.loc 1 641 24 view .LVU1673
 5932 0060 FFF7FEFF 		bl	decimal128ToNumber
 5933              	.LVL436:
 641:src/xeq.c     **** }
 5934              		.loc 1 641 24 view .LVU1674
 5935 0064 0146     		mov	r1, r0
 641:src/xeq.c     **** }
 5936              		.loc 1 641 2 view .LVU1675
 5937 0066 0648     		ldr	r0, .L482+12
 5938 0068 FFF7FEFF 		bl	packed_from_number
 5939              	.LVL437:
 5940              	.LBE1696:
 5941              	.LBE1697:
1378:src/xeq.c     **** }
 5942              		.loc 1 1378 9 view .LVU1676
 5943 006c 0448     		ldr	r0, .L482+12
 5944              	.LVL438:
ARM GAS  /tmp/ccQlyisH.s 			page 232


1379:src/xeq.c     **** 
 5945              		.loc 1 1379 1 view .LVU1677
 5946 006e 0BB0     		add	sp, sp, #44
 5947              		.cfi_def_cfa_offset 4
 5948              		@ sp needed
 5949 0070 5DF804FB 		ldr	pc, [sp], #4
 5950              	.L483:
 5951              		.align	2
 5952              	.L482:
 5953 0074 00000000 		.word	cnsts
 5954 0078 00000000 		.word	cnsts_d128
 5955 007c 00000000 		.word	cnsts_d64
 5956 0080 00000000 		.word	.LANCHOR2
 5957              		.cfi_endproc
 5958              	.LFE92:
 5960              		.section	.text.get_reg_n,"ax",%progbits
 5961              		.align	1
 5962              		.p2align 2,,3
 5963              		.global	get_reg_n
 5964              		.syntax unified
 5965              		.thumb
 5966              		.thumb_func
 5967              		.fpu fpv4-sp-d16
 5969              	get_reg_n:
 5970              	.LVL439:
 5971              	.LFB90:
1333:src/xeq.c     **** 	const int dbl = is_dblmode();
 5972              		.loc 1 1333 28 is_stmt 1 view -0
 5973              		.cfi_startproc
 5974              		@ args = 0, pretend = 0, frame = 0
 5975              		@ frame_needed = 0, uses_anonymous_args = 0
 5976              		@ link register save eliminated.
1334:src/xeq.c     **** 
 5977              		.loc 1 1334 2 view .LVU1679
 5978              	.LBB1698:
 5979              	.LBI1698:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 5980              		.loc 1 1087 5 view .LVU1680
 5981              	.LBB1699:
1088:src/xeq.c     **** }
 5982              		.loc 1 1088 2 view .LVU1681
1088:src/xeq.c     **** }
 5983              		.loc 1 1088 12 is_stmt 0 view .LVU1682
 5984 0000 294B     		ldr	r3, .L499
 5985 0002 1A68     		ldr	r2, [r3]
1088:src/xeq.c     **** }
 5986              		.loc 1 1088 24 view .LVU1683
 5987 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 5988 0008 44F20103 		movw	r3, #16385
 5989 000c 0B40     		ands	r3, r3, r1
 5990 000e A3F58041 		sub	r1, r3, #16384
 5991 0012 B1FA81F1 		clz	r1, r1
 5992              	.LBE1699:
 5993              	.LBE1698:
1336:src/xeq.c     **** 		n -= CONST_REG_BASE;
 5994              		.loc 1 1336 5 view .LVU1684
 5995 0016 B0F5FA6F 		cmp	r0, #2000
ARM GAS  /tmp/ccQlyisH.s 			page 233


 5996              	.LBB1701:
 5997              	.LBB1700:
1088:src/xeq.c     **** }
 5998              		.loc 1 1088 24 view .LVU1685
 5999 001a 4FEA5111 		lsr	r1, r1, #5
 6000              	.LVL440:
1088:src/xeq.c     **** }
 6001              		.loc 1 1088 24 view .LVU1686
 6002              	.LBE1700:
 6003              	.LBE1701:
1336:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6004              		.loc 1 1336 2 is_stmt 1 view .LVU1687
1336:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6005              		.loc 1 1336 5 is_stmt 0 view .LVU1688
 6006 001e 26DA     		bge	.L496
1340:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6007              		.loc 1 1340 2 is_stmt 1 view .LVU1689
1340:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6008              		.loc 1 1340 5 is_stmt 0 view .LVU1690
 6009 0020 B0F57A7F 		cmp	r0, #1000
 6010 0024 13DA     		bge	.L497
1343:src/xeq.c     **** 		// local register on the return stack
 6011              		.loc 1 1343 2 is_stmt 1 view .LVU1691
1343:src/xeq.c     **** 		// local register on the return stack
 6012              		.loc 1 1343 5 is_stmt 0 view .LVU1692
 6013 0026 6F28     		cmp	r0, #111
1333:src/xeq.c     **** 	const int dbl = is_dblmode();
 6014              		.loc 1 1333 28 view .LVU1693
 6015 0028 70B4     		push	{r4, r5, r6}
 6016              		.cfi_def_cfa_offset 12
 6017              		.cfi_offset 4, -12
 6018              		.cfi_offset 5, -8
 6019              		.cfi_offset 6, -4
1343:src/xeq.c     **** 		// local register on the return stack
 6020              		.loc 1 1343 5 view .LVU1694
 6021 002a 03DD     		ble	.L487
 6022              	.LBB1702:
 6023              	.LBI1702:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 6024              		.loc 1 230 5 is_stmt 1 view .LVU1695
 6025              	.LBE1702:
 231:src/xeq.c     **** }
 6026              		.loc 1 231 2 view .LVU1696
 6027              	.LVL441:
 6028              	.LBB1715:
 6029              	.LBB1703:
 6030              	.LBI1703:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 6031              		.loc 1 222 5 view .LVU1697
 6032              	.LBB1704:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 6033              		.loc 1 223 2 view .LVU1698
 6034              	.LBE1704:
 6035              	.LBE1703:
 6036              	.LBE1715:
1088:src/xeq.c     **** }
 6037              		.loc 1 1088 2 view .LVU1699
ARM GAS  /tmp/ccQlyisH.s 			page 234


 6038              	.LBB1716:
 6039              	.LBB1713:
 6040              	.LBB1711:
 224:src/xeq.c     **** }
 6041              		.loc 1 224 2 view .LVU1700
 6042              	.LBB1705:
 6043              	.LBI1705:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 6044              		.loc 1 214 5 view .LVU1701
 6045              	.LBB1706:
 215:src/xeq.c     **** }
 6046              		.loc 1 215 2 view .LVU1702
 215:src/xeq.c     **** }
 6047              		.loc 1 215 9 is_stmt 0 view .LVU1703
 6048 002c B2F9DE47 		ldrsh	r4, [r2, #2014]
 215:src/xeq.c     **** }
 6049              		.loc 1 215 57 view .LVU1704
 6050 0030 002C     		cmp	r4, #0
 6051 0032 20DB     		blt	.L498
 6052              	.LVL442:
 6053              	.L487:
 215:src/xeq.c     **** }
 6054              		.loc 1 215 57 view .LVU1705
 6055              	.LBE1706:
 6056              	.LBE1705:
 6057              	.LBE1711:
 6058              	.LBE1713:
 6059              	.LBE1716:
1350:src/xeq.c     **** }
 6060              		.loc 1 1350 2 is_stmt 1 view .LVU1706
1350:src/xeq.c     **** }
 6061              		.loc 1 1350 55 is_stmt 0 view .LVU1707
 6062 0034 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
 6063              	.LVL443:
1350:src/xeq.c     **** }
 6064              		.loc 1 1350 37 view .LVU1708
 6065 0038 02F22C41 		addw	r1, r2, #1068
1350:src/xeq.c     **** }
 6066              		.loc 1 1350 55 view .LVU1709
 6067 003c C3F16403 		rsb	r3, r3, #100
1351:src/xeq.c     **** 
 6068              		.loc 1 1351 1 view .LVU1710
 6069 0040 70BC     		pop	{r4, r5, r6}
 6070              		.cfi_restore 6
 6071              		.cfi_restore 5
 6072              		.cfi_restore 4
 6073              		.cfi_def_cfa_offset 0
1350:src/xeq.c     **** }
 6074              		.loc 1 1350 22 view .LVU1711
 6075 0042 01EBC301 		add	r1, r1, r3, lsl #3
 6076 0046 02F24C72 		addw	r2, r2, #1868
 6077              	.LVL444:
1350:src/xeq.c     **** }
 6078              		.loc 1 1350 22 view .LVU1712
 6079 004a FFF7FEBF 		b	reg_address
 6080              	.LVL445:
 6081              	.L497:
ARM GAS  /tmp/ccQlyisH.s 			page 235


1341:src/xeq.c     **** 
 6082              		.loc 1 1341 3 is_stmt 1 view .LVU1713
 6083              	.LBB1717:
 6084              	.LBI1717:
1354:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 6085              		.loc 1 1354 11 view .LVU1714
 6086              	.LBB1718:
1355:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6087              		.loc 1 1355 2 view .LVU1715
1355:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6088              		.loc 1 1355 37 is_stmt 0 view .LVU1716
 6089 004e 174B     		ldr	r3, .L499+4
 6090 0050 1A68     		ldr	r2, [r3]
1355:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6091              		.loc 1 1355 68 view .LVU1717
 6092 0052 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1355:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6093              		.loc 1 1355 37 view .LVU1718
 6094 0056 02F22C41 		addw	r1, r2, #1068
 6095              	.LVL446:
1355:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6096              		.loc 1 1355 68 view .LVU1719
 6097 005a C3F16403 		rsb	r3, r3, #100
1355:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6098              		.loc 1 1355 22 view .LVU1720
 6099 005e A0F57A70 		sub	r0, r0, #1000
 6100              	.LVL447:
1355:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6101              		.loc 1 1355 22 view .LVU1721
 6102 0062 01EBC301 		add	r1, r1, r3, lsl #3
 6103 0066 02F24C72 		addw	r2, r2, #1868
 6104 006a FFF7FEBF 		b	reg_address
 6105              	.LVL448:
 6106              	.L496:
1355:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6107              		.loc 1 1355 22 view .LVU1722
 6108              	.LBE1718:
 6109              	.LBE1717:
1337:src/xeq.c     **** 		return get_const(n, dbl);
 6110              		.loc 1 1337 3 is_stmt 1 view .LVU1723
1338:src/xeq.c     **** 	}
 6111              		.loc 1 1338 3 view .LVU1724
1338:src/xeq.c     **** 	}
 6112              		.loc 1 1338 10 is_stmt 0 view .LVU1725
 6113 006e A0F5FA60 		sub	r0, r0, #2000
 6114              	.LVL449:
1338:src/xeq.c     **** 	}
 6115              		.loc 1 1338 10 view .LVU1726
 6116 0072 FFF7FEBF 		b	get_const
 6117              	.LVL450:
 6118              	.L498:
 6119              		.cfi_def_cfa_offset 12
 6120              		.cfi_offset 4, -12
 6121              		.cfi_offset 5, -8
 6122              		.cfi_offset 6, -4
 6123              	.LBB1719:
 6124              	.LBB1714:
ARM GAS  /tmp/ccQlyisH.s 			page 236


 6125              	.LBB1712:
 6126              	.LBB1709:
 6127              	.LBB1707:
 215:src/xeq.c     **** }
 6128              		.loc 1 215 25 view .LVU1727
 6129 0076 0E4D     		ldr	r5, .L499+8
 6130 0078 2D68     		ldr	r5, [r5]
 6131              	.LVL451:
 215:src/xeq.c     **** }
 6132              		.loc 1 215 57 view .LVU1728
 6133 007a 35F81460 		ldrh	r6, [r5, r4, lsl #1]
 6134              	.LBE1707:
 6135              	.LBE1709:
 224:src/xeq.c     **** }
 6136              		.loc 1 224 30 view .LVU1729
 6137 007e 0231     		adds	r1, r1, #2
 6138              	.LVL452:
 6139              	.LBB1710:
 6140              	.LBB1708:
 215:src/xeq.c     **** }
 6141              		.loc 1 215 57 view .LVU1730
 6142 0080 C6F30B06 		ubfx	r6, r6, #0, #12
 6143              	.LBE1708:
 6144              	.LBE1710:
 6145              	.LBE1712:
 6146              	.LBE1714:
 6147              	.LBE1719:
1343:src/xeq.c     **** 		// local register on the return stack
 6148              		.loc 1 1343 26 view .LVU1731
 6149 0084 56FA01F1 		asrs	r1, r6, r1
 6150              	.LVL453:
1343:src/xeq.c     **** 		// local register on the return stack
 6151              		.loc 1 1343 26 view .LVU1732
 6152 0088 D4D0     		beq	.L487
1345:src/xeq.c     **** 		if (dbl)
 6153              		.loc 1 1345 3 is_stmt 1 view .LVU1733
1345:src/xeq.c     **** 		if (dbl)
 6154              		.loc 1 1345 5 is_stmt 0 view .LVU1734
 6155 008a 7038     		subs	r0, r0, #112
 6156              	.LVL454:
1346:src/xeq.c     **** 			n <<= 1;
 6157              		.loc 1 1346 3 is_stmt 1 view .LVU1735
1346:src/xeq.c     **** 			n <<= 1;
 6158              		.loc 1 1346 6 is_stmt 0 view .LVU1736
 6159 008c B3F5804F 		cmp	r3, #16384
1347:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6160              		.loc 1 1347 4 is_stmt 1 view .LVU1737
1347:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6161              		.loc 1 1347 6 is_stmt 0 view .LVU1738
 6162 0090 08BF     		it	eq
 6163 0092 4000     		lsleq	r0, r0, #1
 6164              	.LVL455:
1348:src/xeq.c     **** 	}
 6165              		.loc 1 1348 3 is_stmt 1 view .LVU1739
1348:src/xeq.c     **** 	}
 6166              		.loc 1 1348 67 is_stmt 0 view .LVU1740
 6167 0094 0234     		adds	r4, r4, #2
ARM GAS  /tmp/ccQlyisH.s 			page 237


1348:src/xeq.c     **** 	}
 6168              		.loc 1 1348 48 view .LVU1741
 6169 0096 24F00104 		bic	r4, r4, #1
1348:src/xeq.c     **** 	}
 6170              		.loc 1 1348 83 view .LVU1742
 6171 009a C000     		lsls	r0, r0, #3
 6172              	.LVL456:
1348:src/xeq.c     **** 	}
 6173              		.loc 1 1348 10 view .LVU1743
 6174 009c 0223     		movs	r3, #2
 6175              	.LVL457:
1348:src/xeq.c     **** 	}
 6176              		.loc 1 1348 10 view .LVU1744
 6177 009e 14FB0300 		smlabb	r0, r4, r3, r0
 6178 00a2 2844     		add	r0, r0, r5
1351:src/xeq.c     **** 
 6179              		.loc 1 1351 1 view .LVU1745
 6180 00a4 70BC     		pop	{r4, r5, r6}
 6181              		.cfi_restore 6
 6182              		.cfi_restore 5
 6183              		.cfi_restore 4
 6184              		.cfi_def_cfa_offset 0
 6185 00a6 7047     		bx	lr
 6186              	.L500:
 6187              		.align	2
 6188              	.L499:
 6189 00a8 00000000 		.word	main_ram
 6190 00ac 00000000 		.word	backup_ram
 6191 00b0 00000000 		.word	RetStk
 6192              		.cfi_endproc
 6193              	.LFE90:
 6195              		.section	.text.get_stack,"ax",%progbits
 6196              		.align	1
 6197              		.p2align 2,,3
 6198              		.global	get_stack
 6199              		.syntax unified
 6200              		.thumb
 6201              		.thumb_func
 6202              		.fpu fpv4-sp-d16
 6204              	get_stack:
 6205              	.LVL458:
 6206              	.LFB43:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6207              		.loc 1 709 30 is_stmt 1 view -0
 6208              		.cfi_startproc
 6209              		@ args = 0, pretend = 0, frame = 0
 6210              		@ frame_needed = 0, uses_anonymous_args = 0
 6211              		@ link register save eliminated.
 710:src/xeq.c     **** }
 6212              		.loc 1 710 2 view .LVU1747
 710:src/xeq.c     **** }
 6213              		.loc 1 710 9 is_stmt 0 view .LVU1748
 6214 0000 6430     		adds	r0, r0, #100
 6215              	.LVL459:
 710:src/xeq.c     **** }
 6216              		.loc 1 710 9 view .LVU1749
 6217 0002 FFF7FEBF 		b	get_reg_n
ARM GAS  /tmp/ccQlyisH.s 			page 238


 6218              	.LVL460:
 710:src/xeq.c     **** }
 6219              		.loc 1 710 9 view .LVU1750
 6220              		.cfi_endproc
 6221              	.LFE43:
 6223 0006 00BF     		.section	.text.lift,"ax",%progbits
 6224              		.align	1
 6225              		.p2align 2,,3
 6226              		.global	lift
 6227              		.syntax unified
 6228              		.thumb
 6229              		.thumb_func
 6230              		.fpu fpv4-sp-d16
 6232              	lift:
 6233              	.LFB47:
 727:src/xeq.c     **** 	const int n = stack_size();
 6234              		.loc 1 727 17 is_stmt 1 view -0
 6235              		.cfi_startproc
 6236              		@ args = 0, pretend = 0, frame = 0
 6237              		@ frame_needed = 0, uses_anonymous_args = 0
 728:src/xeq.c     **** 	int i;
 6238              		.loc 1 728 2 view .LVU1752
 6239              	.LBB1720:
 6240              	.LBI1720:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6241              		.loc 1 703 5 view .LVU1753
 6242              	.LBB1721:
 704:src/xeq.c     **** 		return 4;
 6243              		.loc 1 704 2 view .LVU1754
 6244              	.LBE1721:
 6245              	.LBE1720:
 727:src/xeq.c     **** 	const int n = stack_size();
 6246              		.loc 1 727 17 is_stmt 0 view .LVU1755
 6247 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6248              		.cfi_def_cfa_offset 24
 6249              		.cfi_offset 3, -24
 6250              		.cfi_offset 4, -20
 6251              		.cfi_offset 5, -16
 6252              		.cfi_offset 6, -12
 6253              		.cfi_offset 7, -8
 6254              		.cfi_offset 14, -4
 6255              	.LBB1726:
 6256              	.LBB1724:
 704:src/xeq.c     **** 		return 4;
 6257              		.loc 1 704 8 view .LVU1756
 6258 0002 184E     		ldr	r6, .L513
 6259 0004 3368     		ldr	r3, [r6]
 704:src/xeq.c     **** 		return 4;
 6260              		.loc 1 704 6 view .LVU1757
 6261 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 6262              		.loc 1 704 5 view .LVU1758
 6263 000a 1207     		lsls	r2, r2, #28
 6264 000c 28D5     		bpl	.L506
 6265              	.LBB1722:
 6266              	.LBI1722:
 182:src/xeq.c     **** 	return isXROM(state_pc());
ARM GAS  /tmp/ccQlyisH.s 			page 239


 6267              		.loc 1 182 5 is_stmt 1 view .LVU1759
 6268              	.LBB1723:
 183:src/xeq.c     **** }
 6269              		.loc 1 183 2 view .LVU1760
 183:src/xeq.c     **** }
 6270              		.loc 1 183 9 is_stmt 0 view .LVU1761
 6271 000e B3F8E037 		ldrh	r3, [r3, #2016]
 6272              	.LBE1723:
 6273              	.LBE1722:
 704:src/xeq.c     **** 		return 4;
 6274              		.loc 1 704 27 view .LVU1762
 6275 0012 9B0B     		lsrs	r3, r3, #14
 6276 0014 032B     		cmp	r3, #3
 6277 0016 1BD0     		beq	.L512
 6278 0018 0724     		movs	r4, #7
 6279              	.L503:
 6280              	.LBE1724:
 6281              	.LBE1726:
 729:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 6282              		.loc 1 729 2 is_stmt 1 view .LVU1763
 730:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6283              		.loc 1 730 2 view .LVU1764
 730:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6284              		.loc 1 730 14 view .LVU1765
 6285 001a 6434     		adds	r4, r4, #100
 6286              	.LBB1727:
 6287              	.LBB1728:
 6288              	.LBB1729:
 6289              	.LBB1730:
1088:src/xeq.c     **** }
 6290              		.loc 1 1088 24 is_stmt 0 view .LVU1766
 6291 001c 44F20107 		movw	r7, #16385
 6292              	.L505:
 6293              	.LVL461:
1088:src/xeq.c     **** }
 6294              		.loc 1 1088 24 view .LVU1767
 6295              	.LBE1730:
 6296              	.LBE1729:
 6297              	.LBE1728:
 6298              	.LBE1727:
 731:src/xeq.c     **** }
 6299              		.loc 1 731 3 is_stmt 1 view .LVU1768
 6300              	.LBB1737:
 6301              	.LBI1737:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6302              		.loc 1 709 11 view .LVU1769
 6303              	.LBB1738:
 710:src/xeq.c     **** }
 6304              		.loc 1 710 2 view .LVU1770
 710:src/xeq.c     **** }
 6305              		.loc 1 710 9 is_stmt 0 view .LVU1771
 6306 0020 2046     		mov	r0, r4
 6307 0022 FFF7FEFF 		bl	get_reg_n
 6308              	.LVL462:
 6309              	.LBE1738:
 6310              	.LBE1737:
 6311              	.LBB1740:
ARM GAS  /tmp/ccQlyisH.s 			page 240


 6312              	.LBB1741:
 6313 0026 013C     		subs	r4, r4, #1
 6314              	.LVL463:
 710:src/xeq.c     **** }
 6315              		.loc 1 710 9 view .LVU1772
 6316              	.LBE1741:
 6317              	.LBE1740:
 6318              	.LBB1745:
 6319              	.LBB1739:
 6320 0028 0546     		mov	r5, r0
 6321              	.LBE1739:
 6322              	.LBE1745:
 6323              	.LBB1746:
 6324              	.LBB1742:
 6325 002a 2046     		mov	r0, r4
 6326              	.LVL464:
 710:src/xeq.c     **** }
 6327              		.loc 1 710 9 view .LVU1773
 6328              	.LBE1742:
 6329              	.LBI1740:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6330              		.loc 1 709 11 is_stmt 1 view .LVU1774
 6331              	.LBB1743:
 710:src/xeq.c     **** }
 6332              		.loc 1 710 2 view .LVU1775
 710:src/xeq.c     **** }
 6333              		.loc 1 710 9 is_stmt 0 view .LVU1776
 6334 002c FFF7FEFF 		bl	get_reg_n
 6335              	.LVL465:
 710:src/xeq.c     **** }
 6336              		.loc 1 710 9 view .LVU1777
 6337              	.LBE1743:
 6338              	.LBE1746:
 6339              	.LBB1747:
 6340              	.LBB1735:
 6341              	.LBB1733:
 6342              	.LBB1731:
1088:src/xeq.c     **** }
 6343              		.loc 1 1088 24 view .LVU1778
 6344 0030 3368     		ldr	r3, [r6]
 6345 0032 B3F8E837 		ldrh	r3, [r3, #2024]
 6346              	.LBE1731:
 6347              	.LBE1733:
 718:src/xeq.c     **** }
 6348              		.loc 1 718 2 view .LVU1779
 6349 0036 3B40     		ands	r3, r3, r7
 6350 0038 B3F5804F 		cmp	r3, #16384
 6351              	.LBE1735:
 6352              	.LBE1747:
 6353              	.LBB1748:
 6354              	.LBB1744:
 710:src/xeq.c     **** }
 6355              		.loc 1 710 9 view .LVU1780
 6356 003c 0146     		mov	r1, r0
 6357              	.LVL466:
 710:src/xeq.c     **** }
 6358              		.loc 1 710 9 view .LVU1781
ARM GAS  /tmp/ccQlyisH.s 			page 241


 6359              	.LBE1744:
 6360              	.LBE1748:
 6361              	.LBB1749:
 6362              	.LBI1727:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6363              		.loc 1 717 6 is_stmt 1 view .LVU1782
 6364              	.LBB1736:
 718:src/xeq.c     **** }
 6365              		.loc 1 718 2 view .LVU1783
 6366              	.LBB1734:
 6367              	.LBI1729:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6368              		.loc 1 1087 5 view .LVU1784
 6369              	.LBB1732:
1088:src/xeq.c     **** }
 6370              		.loc 1 1088 2 view .LVU1785
 6371              	.LBE1732:
 6372              	.LBE1734:
 718:src/xeq.c     **** }
 6373              		.loc 1 718 2 is_stmt 0 view .LVU1786
 6374 003e 0CBF     		ite	eq
 6375 0040 1022     		moveq	r2, #16
 6376 0042 0822     		movne	r2, #8
 6377 0044 2846     		mov	r0, r5
 6378              	.LVL467:
 718:src/xeq.c     **** }
 6379              		.loc 1 718 2 view .LVU1787
 6380 0046 FFF7FEFF 		bl	xcopy
 6381              	.LVL468:
 718:src/xeq.c     **** }
 6382              		.loc 1 718 2 view .LVU1788
 6383              	.LBE1736:
 6384              	.LBE1749:
 730:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6385              		.loc 1 730 19 is_stmt 1 view .LVU1789
 730:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6386              		.loc 1 730 14 view .LVU1790
 730:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6387              		.loc 1 730 2 is_stmt 0 view .LVU1791
 6388 004a 642C     		cmp	r4, #100
 6389 004c E8D1     		bne	.L505
 732:src/xeq.c     **** 
 6390              		.loc 1 732 1 view .LVU1792
 6391 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6392              	.LVL469:
 6393              	.L512:
 6394              	.LBB1750:
 6395              	.LBB1725:
 704:src/xeq.c     **** 		return 4;
 6396              		.loc 1 704 44 view .LVU1793
 6397 0050 054B     		ldr	r3, .L513+4
 704:src/xeq.c     **** 		return 4;
 6398              		.loc 1 704 41 view .LVU1794
 6399 0052 93F90130 		ldrsb	r3, [r3, #1]
 6400 0056 002B     		cmp	r3, #0
 6401 0058 B4BF     		ite	lt
 6402 005a 0724     		movlt	r4, #7
ARM GAS  /tmp/ccQlyisH.s 			page 242


 6403 005c 0324     		movge	r4, #3
 6404 005e DCE7     		b	.L503
 6405              	.L506:
 6406 0060 0324     		movs	r4, #3
 6407 0062 DAE7     		b	.L503
 6408              	.L514:
 6409              		.align	2
 6410              	.L513:
 6411 0064 00000000 		.word	main_ram
 6412 0068 00000000 		.word	XromParams
 6413              	.LBE1725:
 6414              	.LBE1750:
 6415              		.cfi_endproc
 6416              	.LFE47:
 6418              		.section	.text.lift_if_enabled,"ax",%progbits
 6419              		.align	1
 6420              		.p2align 2,,3
 6421              		.global	lift_if_enabled
 6422              		.syntax unified
 6423              		.thumb
 6424              		.thumb_func
 6425              		.fpu fpv4-sp-d16
 6427              	lift_if_enabled:
 6428              	.LFB49:
 738:src/xeq.c     **** 	if (get_lift())
 6429              		.loc 1 738 28 is_stmt 1 view -0
 6430              		.cfi_startproc
 6431              		@ args = 0, pretend = 0, frame = 0
 6432              		@ frame_needed = 0, uses_anonymous_args = 0
 6433              		@ link register save eliminated.
 739:src/xeq.c     **** 		lift();
 6434              		.loc 1 739 2 view .LVU1796
 6435              	.LBB1751:
 6436              	.LBI1751:
 734:src/xeq.c     **** 	return State2.state_lift;
 6437              		.loc 1 734 12 view .LVU1797
 6438              	.LBB1752:
 735:src/xeq.c     **** }
 6439              		.loc 1 735 2 view .LVU1798
 735:src/xeq.c     **** }
 6440              		.loc 1 735 15 is_stmt 0 view .LVU1799
 6441 0000 034B     		ldr	r3, .L518
 6442 0002 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 6443              	.LBE1752:
 6444              	.LBE1751:
 739:src/xeq.c     **** 		lift();
 6445              		.loc 1 739 5 view .LVU1800
 6446 0004 5B06     		lsls	r3, r3, #25
 6447 0006 00D4     		bmi	.L517
 741:src/xeq.c     **** 
 6448              		.loc 1 741 1 view .LVU1801
 6449 0008 7047     		bx	lr
 6450              	.L517:
 740:src/xeq.c     **** }
 6451              		.loc 1 740 3 is_stmt 1 view .LVU1802
 6452 000a FFF7FEBF 		b	lift
 6453              	.LVL470:
ARM GAS  /tmp/ccQlyisH.s 			page 243


 6454              	.L519:
 6455 000e 00BF     		.align	2
 6456              	.L518:
 6457 0010 00000000 		.word	StateWhileOn
 6458              		.cfi_endproc
 6459              	.LFE49:
 6461              		.section	.text.lift2_if_enabled,"ax",%progbits
 6462              		.align	1
 6463              		.p2align 2,,3
 6464              		.syntax unified
 6465              		.thumb
 6466              		.thumb_func
 6467              		.fpu fpv4-sp-d16
 6469              	lift2_if_enabled:
 6470              	.LFB50:
 743:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6471              		.loc 1 743 36 view -0
 6472              		.cfi_startproc
 6473              		@ args = 0, pretend = 0, frame = 0
 6474              		@ frame_needed = 0, uses_anonymous_args = 0
 745:src/xeq.c     **** 	if (C_LOCKED) {
 6475              		.loc 1 745 2 view .LVU1804
 6476              	.LBB1767:
 6477              	.LBI1767:
 738:src/xeq.c     **** 	if (get_lift())
 6478              		.loc 1 738 6 view .LVU1805
 6479              	.LBB1768:
 739:src/xeq.c     **** 		lift();
 6480              		.loc 1 739 2 view .LVU1806
 6481              	.LBB1769:
 6482              	.LBI1769:
 734:src/xeq.c     **** 	return State2.state_lift;
 6483              		.loc 1 734 12 view .LVU1807
 6484              	.LBB1770:
 735:src/xeq.c     **** }
 6485              		.loc 1 735 2 view .LVU1808
 6486              	.LBE1770:
 6487              	.LBE1769:
 6488              	.LBE1768:
 6489              	.LBE1767:
 743:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6490              		.loc 1 743 36 is_stmt 0 view .LVU1809
 6491 0000 10B5     		push	{r4, lr}
 6492              		.cfi_def_cfa_offset 8
 6493              		.cfi_offset 4, -8
 6494              		.cfi_offset 14, -4
 6495              	.LBB1775:
 6496              	.LBB1773:
 6497              	.LBB1772:
 6498              	.LBB1771:
 735:src/xeq.c     **** }
 6499              		.loc 1 735 15 view .LVU1810
 6500 0002 0F4C     		ldr	r4, .L531
 6501 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 6502              	.LBE1771:
 6503              	.LBE1772:
 739:src/xeq.c     **** 		lift();
ARM GAS  /tmp/ccQlyisH.s 			page 244


 6504              		.loc 1 739 5 view .LVU1811
 6505 0006 5A06     		lsls	r2, r3, #25
 6506 0008 08D4     		bmi	.L530
 6507              	.LBE1773:
 6508              	.LBE1775:
 746:src/xeq.c     **** 		lift_if_enabled();
 6509              		.loc 1 746 2 is_stmt 1 view .LVU1812
 746:src/xeq.c     **** 		lift_if_enabled();
 6510              		.loc 1 746 6 is_stmt 0 view .LVU1813
 6511 000a 0E4B     		ldr	r3, .L531+4
 6512 000c 1B68     		ldr	r3, [r3]
 6513 000e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 746:src/xeq.c     **** 		lift_if_enabled();
 6514              		.loc 1 746 5 view .LVU1814
 6515 0012 03F04103 		and	r3, r3, #65
 6516 0016 412B     		cmp	r3, #65
 6517 0018 0DD1     		bne	.L523
 6518              	.L520:
 756:src/xeq.c     **** 
 6519              		.loc 1 756 1 view .LVU1815
 6520 001a 10BD     		pop	{r4, pc}
 6521              	.L530:
 6522              	.LBB1776:
 6523              	.LBB1774:
 740:src/xeq.c     **** }
 6524              		.loc 1 740 3 is_stmt 1 view .LVU1816
 6525 001c FFF7FEFF 		bl	lift
 6526              	.LVL471:
 6527              	.LBE1774:
 6528              	.LBE1776:
 746:src/xeq.c     **** 		lift_if_enabled();
 6529              		.loc 1 746 2 view .LVU1817
 746:src/xeq.c     **** 		lift_if_enabled();
 6530              		.loc 1 746 6 is_stmt 0 view .LVU1818
 6531 0020 084B     		ldr	r3, .L531+4
 6532 0022 1B68     		ldr	r3, [r3]
 6533 0024 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 746:src/xeq.c     **** 		lift_if_enabled();
 6534              		.loc 1 746 5 view .LVU1819
 6535 0028 03F04103 		and	r3, r3, #65
 6536 002c 412B     		cmp	r3, #65
 6537 002e 02D1     		bne	.L523
 6538              	.LBB1777:
 6539              	.LBI1777:
 743:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6540              		.loc 1 743 13 is_stmt 1 view .LVU1820
 6541              	.LBE1777:
 747:src/xeq.c     **** 	}
 6542              		.loc 1 747 3 view .LVU1821
 6543              	.LBB1784:
 6544              	.LBB1778:
 6545              	.LBI1778:
 738:src/xeq.c     **** 	if (get_lift())
 6546              		.loc 1 738 6 view .LVU1822
 6547              	.LBB1779:
 739:src/xeq.c     **** 		lift();
 6548              		.loc 1 739 2 view .LVU1823
ARM GAS  /tmp/ccQlyisH.s 			page 245


 6549              	.LBB1780:
 6550              	.LBI1780:
 734:src/xeq.c     **** 	return State2.state_lift;
 6551              		.loc 1 734 12 view .LVU1824
 6552              	.LBB1781:
 735:src/xeq.c     **** }
 6553              		.loc 1 735 2 view .LVU1825
 735:src/xeq.c     **** }
 6554              		.loc 1 735 15 is_stmt 0 view .LVU1826
 6555 0030 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 6556              	.LBE1781:
 6557              	.LBE1780:
 739:src/xeq.c     **** 		lift();
 6558              		.loc 1 739 5 view .LVU1827
 6559 0032 5B06     		lsls	r3, r3, #25
 6560 0034 F1D5     		bpl	.L520
 6561              	.L523:
 740:src/xeq.c     **** }
 6562              		.loc 1 740 3 is_stmt 1 view .LVU1828
 6563              	.LBE1779:
 6564              	.LBE1778:
 6565              	.LBE1784:
 756:src/xeq.c     **** 
 6566              		.loc 1 756 1 is_stmt 0 view .LVU1829
 6567 0036 BDE81040 		pop	{r4, lr}
 6568              		.cfi_restore 14
 6569              		.cfi_restore 4
 6570              		.cfi_def_cfa_offset 0
 6571              	.LBB1785:
 6572              	.LBB1783:
 6573              	.LBB1782:
 740:src/xeq.c     **** }
 6574              		.loc 1 740 3 view .LVU1830
 6575 003a FFF7FEBF 		b	lift
 6576              	.LVL472:
 6577              	.L532:
 6578 003e 00BF     		.align	2
 6579              	.L531:
 6580 0040 00000000 		.word	StateWhileOn
 6581 0044 00000000 		.word	main_ram
 6582              	.LBE1782:
 6583              	.LBE1783:
 6584              	.LBE1785:
 6585              		.cfi_endproc
 6586              	.LFE50:
 6588              		.section	.text.lower,"ax",%progbits
 6589              		.align	1
 6590              		.p2align 2,,3
 6591              		.syntax unified
 6592              		.thumb
 6593              		.thumb_func
 6594              		.fpu fpv4-sp-d16
 6596              	lower:
 6597              	.LFB53:
 766:src/xeq.c     **** 	const int n = stack_size();
 6598              		.loc 1 766 25 is_stmt 1 view -0
 6599              		.cfi_startproc
ARM GAS  /tmp/ccQlyisH.s 			page 246


 6600              		@ args = 0, pretend = 0, frame = 0
 6601              		@ frame_needed = 0, uses_anonymous_args = 0
 767:src/xeq.c     **** 	int i;
 6602              		.loc 1 767 2 view .LVU1832
 6603              	.LBB1786:
 6604              	.LBI1786:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6605              		.loc 1 703 5 view .LVU1833
 6606              	.LBB1787:
 704:src/xeq.c     **** 		return 4;
 6607              		.loc 1 704 2 view .LVU1834
 6608              	.LBE1787:
 6609              	.LBE1786:
 766:src/xeq.c     **** 	const int n = stack_size();
 6610              		.loc 1 766 25 is_stmt 0 view .LVU1835
 6611 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6612              		.cfi_def_cfa_offset 24
 6613              		.cfi_offset 4, -24
 6614              		.cfi_offset 5, -20
 6615              		.cfi_offset 6, -16
 6616              		.cfi_offset 7, -12
 6617              		.cfi_offset 8, -8
 6618              		.cfi_offset 14, -4
 6619              	.LBB1793:
 6620              	.LBB1790:
 704:src/xeq.c     **** 		return 4;
 6621              		.loc 1 704 8 view .LVU1836
 6622 0004 194F     		ldr	r7, .L544
 6623 0006 3B68     		ldr	r3, [r7]
 704:src/xeq.c     **** 		return 4;
 6624              		.loc 1 704 6 view .LVU1837
 6625 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 6626              		.loc 1 704 5 view .LVU1838
 6627 000c 1207     		lsls	r2, r2, #28
 6628 000e 2BD5     		bpl	.L537
 6629              	.LBB1788:
 6630              	.LBI1788:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 6631              		.loc 1 182 5 is_stmt 1 view .LVU1839
 6632              	.LBB1789:
 183:src/xeq.c     **** }
 6633              		.loc 1 183 2 view .LVU1840
 183:src/xeq.c     **** }
 6634              		.loc 1 183 9 is_stmt 0 view .LVU1841
 6635 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 6636              	.LBE1789:
 6637              	.LBE1788:
 704:src/xeq.c     **** 		return 4;
 6638              		.loc 1 704 27 view .LVU1842
 6639 0014 9B0B     		lsrs	r3, r3, #14
 6640 0016 032B     		cmp	r3, #3
 6641 0018 1ED0     		beq	.L543
 706:src/xeq.c     **** }
 6642              		.loc 1 706 9 view .LVU1843
 6643 001a 0826     		movs	r6, #8
 6644              	.L534:
ARM GAS  /tmp/ccQlyisH.s 			page 247


 6645              	.LVL473:
 706:src/xeq.c     **** }
 6646              		.loc 1 706 9 view .LVU1844
 6647              	.LBE1790:
 6648              	.LBE1793:
 768:src/xeq.c     **** 
 6649              		.loc 1 768 2 is_stmt 1 view .LVU1845
 770:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6650              		.loc 1 770 2 view .LVU1846
 770:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6651              		.loc 1 770 12 view .LVU1847
 6652 001c 6336     		adds	r6, r6, #99
 6653              	.LVL474:
 6654              	.LBB1794:
 6655              	.LBB1791:
 705:src/xeq.c     **** 	return 8;
 6656              		.loc 1 705 10 is_stmt 0 view .LVU1848
 6657 001e 6424     		movs	r4, #100
 6658              	.LBE1791:
 6659              	.LBE1794:
 6660              	.LBB1795:
 6661              	.LBB1796:
 6662              	.LBB1797:
 6663              	.LBB1798:
1088:src/xeq.c     **** }
 6664              		.loc 1 1088 24 view .LVU1849
 6665 0020 44F20108 		movw	r8, #16385
 6666              	.LVL475:
 6667              	.L536:
1088:src/xeq.c     **** }
 6668              		.loc 1 1088 24 view .LVU1850
 6669              	.LBE1798:
 6670              	.LBE1797:
 6671              	.LBE1796:
 6672              	.LBE1795:
 771:src/xeq.c     **** }
 6673              		.loc 1 771 3 is_stmt 1 discriminator 3 view .LVU1851
 6674              	.LBB1805:
 6675              	.LBI1805:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6676              		.loc 1 709 11 discriminator 3 view .LVU1852
 6677              	.LBB1806:
 710:src/xeq.c     **** }
 6678              		.loc 1 710 2 discriminator 3 view .LVU1853
 710:src/xeq.c     **** }
 6679              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU1854
 6680 0024 2046     		mov	r0, r4
 6681 0026 FFF7FEFF 		bl	get_reg_n
 6682              	.LVL476:
 6683 002a 0134     		adds	r4, r4, #1
 6684              	.LVL477:
 710:src/xeq.c     **** }
 6685              		.loc 1 710 9 discriminator 3 view .LVU1855
 6686 002c 0546     		mov	r5, r0
 6687              	.LBE1806:
 6688              	.LBE1805:
 6689              	.LBB1807:
ARM GAS  /tmp/ccQlyisH.s 			page 248


 6690              	.LBB1808:
 6691 002e 2046     		mov	r0, r4
 6692              	.LVL478:
 710:src/xeq.c     **** }
 6693              		.loc 1 710 9 discriminator 3 view .LVU1856
 6694              	.LBE1808:
 6695              	.LBI1807:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6696              		.loc 1 709 11 is_stmt 1 discriminator 3 view .LVU1857
 6697              	.LBB1809:
 710:src/xeq.c     **** }
 6698              		.loc 1 710 2 discriminator 3 view .LVU1858
 710:src/xeq.c     **** }
 6699              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU1859
 6700 0030 FFF7FEFF 		bl	get_reg_n
 6701              	.LVL479:
 710:src/xeq.c     **** }
 6702              		.loc 1 710 9 discriminator 3 view .LVU1860
 6703              	.LBE1809:
 6704              	.LBE1807:
 6705              	.LBB1811:
 6706              	.LBB1803:
 6707              	.LBB1801:
 6708              	.LBB1799:
1088:src/xeq.c     **** }
 6709              		.loc 1 1088 24 discriminator 3 view .LVU1861
 6710 0034 3B68     		ldr	r3, [r7]
 6711 0036 B3F8E837 		ldrh	r3, [r3, #2024]
 6712              	.LBE1799:
 6713              	.LBE1801:
 718:src/xeq.c     **** }
 6714              		.loc 1 718 2 discriminator 3 view .LVU1862
 6715 003a 08EA0303 		and	r3, r8, r3
 6716 003e B3F5804F 		cmp	r3, #16384
 6717              	.LBE1803:
 6718              	.LBE1811:
 6719              	.LBB1812:
 6720              	.LBB1810:
 710:src/xeq.c     **** }
 6721              		.loc 1 710 9 discriminator 3 view .LVU1863
 6722 0042 0146     		mov	r1, r0
 6723              	.LVL480:
 710:src/xeq.c     **** }
 6724              		.loc 1 710 9 discriminator 3 view .LVU1864
 6725              	.LBE1810:
 6726              	.LBE1812:
 6727              	.LBB1813:
 6728              	.LBI1795:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6729              		.loc 1 717 6 is_stmt 1 discriminator 3 view .LVU1865
 6730              	.LBB1804:
 718:src/xeq.c     **** }
 6731              		.loc 1 718 2 discriminator 3 view .LVU1866
 6732              	.LBB1802:
 6733              	.LBI1797:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6734              		.loc 1 1087 5 discriminator 3 view .LVU1867
ARM GAS  /tmp/ccQlyisH.s 			page 249


 6735              	.LBB1800:
1088:src/xeq.c     **** }
 6736              		.loc 1 1088 2 discriminator 3 view .LVU1868
 6737              	.LBE1800:
 6738              	.LBE1802:
 718:src/xeq.c     **** }
 6739              		.loc 1 718 2 is_stmt 0 discriminator 3 view .LVU1869
 6740 0044 0CBF     		ite	eq
 6741 0046 1022     		moveq	r2, #16
 6742 0048 0822     		movne	r2, #8
 6743 004a 2846     		mov	r0, r5
 6744              	.LVL481:
 718:src/xeq.c     **** }
 6745              		.loc 1 718 2 discriminator 3 view .LVU1870
 6746 004c FFF7FEFF 		bl	xcopy
 6747              	.LVL482:
 718:src/xeq.c     **** }
 6748              		.loc 1 718 2 discriminator 3 view .LVU1871
 6749              	.LBE1804:
 6750              	.LBE1813:
 770:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6751              		.loc 1 770 17 is_stmt 1 discriminator 3 view .LVU1872
 770:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6752              		.loc 1 770 12 discriminator 3 view .LVU1873
 770:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6753              		.loc 1 770 2 is_stmt 0 discriminator 3 view .LVU1874
 6754 0050 B442     		cmp	r4, r6
 6755 0052 E7D1     		bne	.L536
 772:src/xeq.c     **** 
 6756              		.loc 1 772 1 view .LVU1875
 6757 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6758              	.LVL483:
 6759              	.L543:
 6760              	.LBB1814:
 6761              	.LBB1792:
 704:src/xeq.c     **** 		return 4;
 6762              		.loc 1 704 44 view .LVU1876
 6763 0058 054B     		ldr	r3, .L544+4
 704:src/xeq.c     **** 		return 4;
 6764              		.loc 1 704 41 view .LVU1877
 6765 005a 93F90130 		ldrsb	r3, [r3, #1]
 705:src/xeq.c     **** 	return 8;
 6766              		.loc 1 705 10 view .LVU1878
 6767 005e 002B     		cmp	r3, #0
 6768 0060 B4BF     		ite	lt
 6769 0062 0826     		movlt	r6, #8
 6770 0064 0426     		movge	r6, #4
 6771 0066 D9E7     		b	.L534
 6772              	.L537:
 6773 0068 0426     		movs	r6, #4
 6774 006a D7E7     		b	.L534
 6775              	.L545:
 6776              		.align	2
 6777              	.L544:
 6778 006c 00000000 		.word	main_ram
 6779 0070 00000000 		.word	XromParams
 6780              	.LBE1792:
ARM GAS  /tmp/ccQlyisH.s 			page 250


 6781              	.LBE1814:
 6782              		.cfi_endproc
 6783              	.LFE53:
 6785              		.section	.text.get_stack_top,"ax",%progbits
 6786              		.align	1
 6787              		.p2align 2,,3
 6788              		.syntax unified
 6789              		.thumb
 6790              		.thumb_func
 6791              		.fpu fpv4-sp-d16
 6793              	get_stack_top:
 6794              	.LFB44:
 713:src/xeq.c     **** 	return get_stack(stack_size()-1);
 6795              		.loc 1 713 38 is_stmt 1 view -0
 6796              		.cfi_startproc
 6797              		@ args = 0, pretend = 0, frame = 0
 6798              		@ frame_needed = 0, uses_anonymous_args = 0
 6799              		@ link register save eliminated.
 714:src/xeq.c     **** }
 6800              		.loc 1 714 2 view .LVU1880
 6801              	.LBB1815:
 6802              	.LBI1815:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6803              		.loc 1 703 5 view .LVU1881
 6804              	.LBB1816:
 704:src/xeq.c     **** 		return 4;
 6805              		.loc 1 704 2 view .LVU1882
 704:src/xeq.c     **** 		return 4;
 6806              		.loc 1 704 8 is_stmt 0 view .LVU1883
 6807 0000 0C4B     		ldr	r3, .L552
 6808 0002 1B68     		ldr	r3, [r3]
 704:src/xeq.c     **** 		return 4;
 6809              		.loc 1 704 6 view .LVU1884
 6810 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 6811              		.loc 1 704 5 view .LVU1885
 6812 0008 1207     		lsls	r2, r2, #28
 6813 000a 10D5     		bpl	.L548
 6814              	.LBB1817:
 6815              	.LBI1817:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 6816              		.loc 1 182 5 is_stmt 1 view .LVU1886
 6817              	.LBB1818:
 183:src/xeq.c     **** }
 6818              		.loc 1 183 2 view .LVU1887
 183:src/xeq.c     **** }
 6819              		.loc 1 183 9 is_stmt 0 view .LVU1888
 6820 000c B3F8E037 		ldrh	r3, [r3, #2016]
 6821              	.LBE1818:
 6822              	.LBE1817:
 704:src/xeq.c     **** 		return 4;
 6823              		.loc 1 704 27 view .LVU1889
 6824 0010 9B0B     		lsrs	r3, r3, #14
 6825 0012 032B     		cmp	r3, #3
 6826 0014 02D0     		beq	.L551
 6827 0016 6B20     		movs	r0, #107
 6828              	.LBE1816:
ARM GAS  /tmp/ccQlyisH.s 			page 251


 6829              	.LBE1815:
 6830              	.LBB1821:
 6831              	.LBI1821:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6832              		.loc 1 709 11 is_stmt 1 view .LVU1890
 6833              	.LBB1822:
 710:src/xeq.c     **** }
 6834              		.loc 1 710 2 view .LVU1891
 710:src/xeq.c     **** }
 6835              		.loc 1 710 9 is_stmt 0 view .LVU1892
 6836 0018 FFF7FEBF 		b	get_reg_n
 6837              	.LVL484:
 6838              	.L551:
 6839              	.LBE1822:
 6840              	.LBE1821:
 6841              	.LBB1825:
 6842              	.LBB1819:
 704:src/xeq.c     **** 		return 4;
 6843              		.loc 1 704 44 view .LVU1893
 6844 001c 064B     		ldr	r3, .L552+4
 704:src/xeq.c     **** 		return 4;
 6845              		.loc 1 704 41 view .LVU1894
 6846 001e 93F90130 		ldrsb	r3, [r3, #1]
 6847 0022 002B     		cmp	r3, #0
 6848 0024 B4BF     		ite	lt
 6849 0026 6B20     		movlt	r0, #107
 6850 0028 6720     		movge	r0, #103
 6851              	.LBE1819:
 6852              	.LBE1825:
 6853              	.LBB1826:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6854              		.loc 1 709 11 is_stmt 1 view .LVU1895
 6855              	.LBB1823:
 710:src/xeq.c     **** }
 6856              		.loc 1 710 2 view .LVU1896
 710:src/xeq.c     **** }
 6857              		.loc 1 710 9 is_stmt 0 view .LVU1897
 6858 002a FFF7FEBF 		b	get_reg_n
 6859              	.LVL485:
 6860              	.L548:
 6861              	.LBE1823:
 6862              	.LBE1826:
 6863              	.LBB1827:
 6864              	.LBB1820:
 6865 002e 6720     		movs	r0, #103
 6866              	.LBE1820:
 6867              	.LBE1827:
 6868              	.LBB1828:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6869              		.loc 1 709 11 is_stmt 1 view .LVU1898
 6870              	.LBB1824:
 710:src/xeq.c     **** }
 6871              		.loc 1 710 2 view .LVU1899
 710:src/xeq.c     **** }
 6872              		.loc 1 710 9 is_stmt 0 view .LVU1900
 6873 0030 FFF7FEBF 		b	get_reg_n
 6874              	.LVL486:
ARM GAS  /tmp/ccQlyisH.s 			page 252


 6875              	.L553:
 6876              		.align	2
 6877              	.L552:
 6878 0034 00000000 		.word	main_ram
 6879 0038 00000000 		.word	XromParams
 6880              	.LBE1824:
 6881              	.LBE1828:
 6882              		.cfi_endproc
 6883              	.LFE44:
 6885              		.section	.text.roll_down,"ax",%progbits
 6886              		.align	1
 6887              		.p2align 2,,3
 6888              		.global	roll_down
 6889              		.syntax unified
 6890              		.thumb
 6891              		.thumb_func
 6892              		.fpu fpv4-sp-d16
 6894              	roll_down:
 6895              	.LVL487:
 6896              	.LFB70:
 880:src/xeq.c     **** 	REGISTER r;
 6897              		.loc 1 880 31 is_stmt 1 view -0
 6898              		.cfi_startproc
 6899              		@ args = 0, pretend = 0, frame = 16
 6900              		@ frame_needed = 0, uses_anonymous_args = 0
 881:src/xeq.c     **** 	copyreg(&r, StackBase);
 6901              		.loc 1 881 2 view .LVU1902
 882:src/xeq.c     **** 	lower();
 6902              		.loc 1 882 2 view .LVU1903
 880:src/xeq.c     **** 	REGISTER r;
 6903              		.loc 1 880 31 is_stmt 0 view .LVU1904
 6904 0000 30B5     		push	{r4, r5, lr}
 6905              		.cfi_def_cfa_offset 12
 6906              		.cfi_offset 4, -12
 6907              		.cfi_offset 5, -8
 6908              		.cfi_offset 14, -4
 6909              	.LBB1829:
 6910              	.LBB1830:
 6911              	.LBB1831:
 6912              	.LBB1832:
1088:src/xeq.c     **** }
 6913              		.loc 1 1088 24 view .LVU1905
 6914 0002 124D     		ldr	r5, .L560
 6915              	.LBE1832:
 6916              	.LBE1831:
 6917              	.LBE1830:
 6918              	.LBE1829:
 882:src/xeq.c     **** 	lower();
 6919              		.loc 1 882 2 view .LVU1906
 6920 0004 124A     		ldr	r2, .L560+4
 6921              	.LBB1841:
 6922              	.LBB1839:
 6923              	.LBB1836:
 6924              	.LBB1833:
1088:src/xeq.c     **** }
 6925              		.loc 1 1088 24 view .LVU1907
 6926 0006 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/ccQlyisH.s 			page 253


 6927              	.LBE1833:
 6928              	.LBE1836:
 718:src/xeq.c     **** }
 6929              		.loc 1 718 2 view .LVU1908
 6930 0008 1168     		ldr	r1, [r2]
 6931              	.LBB1837:
 6932              	.LBB1834:
1088:src/xeq.c     **** }
 6933              		.loc 1 1088 24 view .LVU1909
 6934 000a B3F8E837 		ldrh	r3, [r3, #2024]
 6935 000e 44F20104 		movw	r4, #16385
 6936              	.LBE1834:
 6937              	.LBE1837:
 718:src/xeq.c     **** }
 6938              		.loc 1 718 2 view .LVU1910
 6939 0012 2340     		ands	r3, r3, r4
 6940              	.LBE1839:
 6941              	.LBE1841:
 880:src/xeq.c     **** 	REGISTER r;
 6942              		.loc 1 880 31 view .LVU1911
 6943 0014 85B0     		sub	sp, sp, #20
 6944              		.cfi_def_cfa_offset 32
 6945              	.LVL488:
 6946              	.LBB1842:
 6947              	.LBI1829:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6948              		.loc 1 717 6 is_stmt 1 view .LVU1912
 6949              	.LBB1840:
 718:src/xeq.c     **** }
 6950              		.loc 1 718 2 view .LVU1913
 6951              	.LBB1838:
 6952              	.LBI1831:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6953              		.loc 1 1087 5 view .LVU1914
 6954              	.LBB1835:
1088:src/xeq.c     **** }
 6955              		.loc 1 1088 2 view .LVU1915
 6956              	.LBE1835:
 6957              	.LBE1838:
 718:src/xeq.c     **** }
 6958              		.loc 1 718 2 is_stmt 0 view .LVU1916
 6959 0016 B3F5804F 		cmp	r3, #16384
 6960 001a 0CBF     		ite	eq
 6961 001c 1022     		moveq	r2, #16
 6962 001e 0822     		movne	r2, #8
 6963 0020 6846     		mov	r0, sp
 6964              	.LVL489:
 718:src/xeq.c     **** }
 6965              		.loc 1 718 2 view .LVU1917
 6966 0022 FFF7FEFF 		bl	xcopy
 6967              	.LVL490:
 718:src/xeq.c     **** }
 6968              		.loc 1 718 2 view .LVU1918
 6969              	.LBE1840:
 6970              	.LBE1842:
 883:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 6971              		.loc 1 883 2 is_stmt 1 view .LVU1919
ARM GAS  /tmp/ccQlyisH.s 			page 254


 6972 0026 FFF7FEFF 		bl	lower
 6973              	.LVL491:
 884:src/xeq.c     **** }
 6974              		.loc 1 884 2 view .LVU1920
 6975 002a FFF7FEFF 		bl	get_stack_top
 6976              	.LVL492:
 6977              	.LBB1843:
 6978              	.LBI1843:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6979              		.loc 1 717 6 view .LVU1921
 6980              	.LBB1844:
 718:src/xeq.c     **** }
 6981              		.loc 1 718 2 view .LVU1922
 6982              	.LBB1845:
 6983              	.LBI1845:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6984              		.loc 1 1087 5 view .LVU1923
 6985              	.LBB1846:
1088:src/xeq.c     **** }
 6986              		.loc 1 1088 2 view .LVU1924
1088:src/xeq.c     **** }
 6987              		.loc 1 1088 24 is_stmt 0 view .LVU1925
 6988 002e 2B68     		ldr	r3, [r5]
 6989 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 6990              	.LBE1846:
 6991              	.LBE1845:
 718:src/xeq.c     **** }
 6992              		.loc 1 718 2 view .LVU1926
 6993 0034 1C40     		ands	r4, r4, r3
 6994 0036 B4F5804F 		cmp	r4, #16384
 6995 003a 6946     		mov	r1, sp
 6996 003c 0CBF     		ite	eq
 6997 003e 1022     		moveq	r2, #16
 6998 0040 0822     		movne	r2, #8
 6999 0042 FFF7FEFF 		bl	xcopy
 7000              	.LVL493:
 718:src/xeq.c     **** }
 7001              		.loc 1 718 2 view .LVU1927
 7002              	.LBE1844:
 7003              	.LBE1843:
 885:src/xeq.c     **** 
 7004              		.loc 1 885 1 view .LVU1928
 7005 0046 05B0     		add	sp, sp, #20
 7006              		.cfi_def_cfa_offset 12
 7007              		@ sp needed
 7008 0048 30BD     		pop	{r4, r5, pc}
 7009              	.L561:
 7010 004a 00BF     		.align	2
 7011              	.L560:
 7012 004c 00000000 		.word	main_ram
 7013 0050 00000000 		.word	StackBase
 7014              		.cfi_endproc
 7015              	.LFE70:
 7017              		.section	.text.cpx_roll_down,"ax",%progbits
 7018              		.align	1
 7019              		.p2align 2,,3
 7020              		.global	cpx_roll_down
ARM GAS  /tmp/ccQlyisH.s 			page 255


 7021              		.syntax unified
 7022              		.thumb
 7023              		.thumb_func
 7024              		.fpu fpv4-sp-d16
 7026              	cpx_roll_down:
 7027              	.LVL494:
 7028              	.LFB72:
 894:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7029              		.loc 1 894 35 is_stmt 1 view -0
 7030              		.cfi_startproc
 7031              		@ args = 0, pretend = 0, frame = 0
 7032              		@ frame_needed = 0, uses_anonymous_args = 0
 895:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7033              		.loc 1 895 2 view .LVU1930
 894:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7034              		.loc 1 894 35 is_stmt 0 view .LVU1931
 7035 0000 08B5     		push	{r3, lr}
 7036              		.cfi_def_cfa_offset 8
 7037              		.cfi_offset 3, -8
 7038              		.cfi_offset 14, -4
 895:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7039              		.loc 1 895 2 view .LVU1932
 7040 0002 0720     		movs	r0, #7
 7041              	.LVL495:
 895:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7042              		.loc 1 895 2 view .LVU1933
 7043 0004 FFF7FEFF 		bl	roll_down
 7044              	.LVL496:
 896:src/xeq.c     **** 	set_was_complex();
 7045              		.loc 1 896 2 is_stmt 1 view .LVU1934
 7046 0008 0720     		movs	r0, #7
 7047 000a FFF7FEFF 		bl	roll_down
 7048              	.LVL497:
 897:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 7049              		.loc 1 897 2 view .LVU1935
 7050              	.LBB1847:
 7051              	.LBI1847:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 7052              		.loc 1 530 13 view .LVU1936
 7053              	.LBB1848:
 531:src/xeq.c     **** }
 7054              		.loc 1 531 2 view .LVU1937
 531:src/xeq.c     **** }
 7055              		.loc 1 531 20 is_stmt 0 view .LVU1938
 7056 000e 074B     		ldr	r3, .L564
 7057              	.LBE1848:
 7058              	.LBE1847:
 899:src/xeq.c     **** #endif
 7059              		.loc 1 899 2 view .LVU1939
 7060 0010 074A     		ldr	r2, .L564+4
 7061              	.LBB1851:
 7062              	.LBB1849:
 531:src/xeq.c     **** }
 7063              		.loc 1 531 20 view .LVU1940
 7064 0012 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 7065              	.LBE1849:
 7066              	.LBE1851:
ARM GAS  /tmp/ccQlyisH.s 			page 256


 899:src/xeq.c     **** #endif
 7067              		.loc 1 899 2 view .LVU1941
 7068 0014 1268     		ldr	r2, [r2]
 7069              	.LBB1852:
 7070              	.LBB1850:
 531:src/xeq.c     **** }
 7071              		.loc 1 531 20 view .LVU1942
 7072 0016 0120     		movs	r0, #1
 7073 0018 60F38711 		bfi	r1, r0, #6, #2
 7074 001c 1975     		strb	r1, [r3, #20]
 7075              	.LBE1850:
 7076              	.LBE1852:
 899:src/xeq.c     **** #endif
 7077              		.loc 1 899 2 is_stmt 1 view .LVU1943
 7078 001e 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 7079 0022 0343     		orrs	r3, r3, r0
 7080 0024 82F8AD37 		strb	r3, [r2, #1965]
 901:src/xeq.c     **** 
 7081              		.loc 1 901 1 is_stmt 0 view .LVU1944
 7082 0028 08BD     		pop	{r3, pc}
 7083              	.L565:
 7084 002a 00BF     		.align	2
 7085              	.L564:
 7086 002c 00000000 		.word	StateWhileOn
 7087 0030 00000000 		.word	main_ram
 7088              		.cfi_endproc
 7089              	.LFE72:
 7091              		.section	.text.roll_up,"ax",%progbits
 7092              		.align	1
 7093              		.p2align 2,,3
 7094              		.global	roll_up
 7095              		.syntax unified
 7096              		.thumb
 7097              		.thumb_func
 7098              		.fpu fpv4-sp-d16
 7100              	roll_up:
 7101              	.LVL498:
 7102              	.LFB71:
 887:src/xeq.c     **** 	REGISTER r;
 7103              		.loc 1 887 29 is_stmt 1 view -0
 7104              		.cfi_startproc
 7105              		@ args = 0, pretend = 0, frame = 16
 7106              		@ frame_needed = 0, uses_anonymous_args = 0
 888:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 7107              		.loc 1 888 2 view .LVU1946
 889:src/xeq.c     **** 	lift();
 7108              		.loc 1 889 2 view .LVU1947
 887:src/xeq.c     **** 	REGISTER r;
 7109              		.loc 1 887 29 is_stmt 0 view .LVU1948
 7110 0000 30B5     		push	{r4, r5, lr}
 7111              		.cfi_def_cfa_offset 12
 7112              		.cfi_offset 4, -12
 7113              		.cfi_offset 5, -8
 7114              		.cfi_offset 14, -4
 7115              	.LBB1853:
 7116              	.LBB1854:
 7117              	.LBB1855:
ARM GAS  /tmp/ccQlyisH.s 			page 257


 7118              	.LBB1856:
1088:src/xeq.c     **** }
 7119              		.loc 1 1088 24 view .LVU1949
 7120 0002 124D     		ldr	r5, .L572
 7121              	.LBE1856:
 7122              	.LBE1855:
 7123              	.LBE1854:
 7124              	.LBE1853:
 887:src/xeq.c     **** 	REGISTER r;
 7125              		.loc 1 887 29 view .LVU1950
 7126 0004 85B0     		sub	sp, sp, #20
 7127              		.cfi_def_cfa_offset 32
 889:src/xeq.c     **** 	lift();
 7128              		.loc 1 889 14 view .LVU1951
 7129 0006 FFF7FEFF 		bl	get_stack_top
 7130              	.LVL499:
 7131              	.LBB1863:
 7132              	.LBB1861:
 7133              	.LBB1859:
 7134              	.LBB1857:
1088:src/xeq.c     **** }
 7135              		.loc 1 1088 24 view .LVU1952
 7136 000a 2B68     		ldr	r3, [r5]
 7137 000c B3F8E837 		ldrh	r3, [r3, #2024]
 7138 0010 44F20104 		movw	r4, #16385
 7139              	.LBE1857:
 7140              	.LBE1859:
 718:src/xeq.c     **** }
 7141              		.loc 1 718 2 view .LVU1953
 7142 0014 2340     		ands	r3, r3, r4
 7143 0016 B3F5804F 		cmp	r3, #16384
 7144              	.LBE1861:
 7145              	.LBE1863:
 889:src/xeq.c     **** 	lift();
 7146              		.loc 1 889 14 view .LVU1954
 7147 001a 0146     		mov	r1, r0
 7148              	.LVL500:
 7149              	.LBB1864:
 7150              	.LBI1853:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7151              		.loc 1 717 6 is_stmt 1 view .LVU1955
 7152              	.LBB1862:
 718:src/xeq.c     **** }
 7153              		.loc 1 718 2 view .LVU1956
 7154              	.LBB1860:
 7155              	.LBI1855:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7156              		.loc 1 1087 5 view .LVU1957
 7157              	.LBB1858:
1088:src/xeq.c     **** }
 7158              		.loc 1 1088 2 view .LVU1958
 7159              	.LBE1858:
 7160              	.LBE1860:
 718:src/xeq.c     **** }
 7161              		.loc 1 718 2 is_stmt 0 view .LVU1959
 7162 001c 0CBF     		ite	eq
 7163 001e 1022     		moveq	r2, #16
ARM GAS  /tmp/ccQlyisH.s 			page 258


 7164 0020 0822     		movne	r2, #8
 7165 0022 6846     		mov	r0, sp
 7166              	.LVL501:
 718:src/xeq.c     **** }
 7167              		.loc 1 718 2 view .LVU1960
 7168 0024 FFF7FEFF 		bl	xcopy
 7169              	.LVL502:
 718:src/xeq.c     **** }
 7170              		.loc 1 718 2 view .LVU1961
 7171              	.LBE1862:
 7172              	.LBE1864:
 890:src/xeq.c     **** 	copyreg(StackBase, &r);
 7173              		.loc 1 890 2 is_stmt 1 view .LVU1962
 7174 0028 FFF7FEFF 		bl	lift
 7175              	.LVL503:
 891:src/xeq.c     **** }
 7176              		.loc 1 891 2 view .LVU1963
 7177              	.LBB1865:
 7178              	.LBB1866:
 7179              	.LBB1867:
 7180              	.LBB1868:
1088:src/xeq.c     **** }
 7181              		.loc 1 1088 24 is_stmt 0 view .LVU1964
 7182 002c 2B68     		ldr	r3, [r5]
 7183              	.LBE1868:
 7184              	.LBE1867:
 7185              	.LBE1866:
 7186              	.LBE1865:
 891:src/xeq.c     **** }
 7187              		.loc 1 891 2 view .LVU1965
 7188 002e 084A     		ldr	r2, .L572+4
 7189              	.LVL504:
 7190              	.LBB1872:
 7191              	.LBI1865:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7192              		.loc 1 717 6 is_stmt 1 view .LVU1966
 7193              	.LBB1871:
 718:src/xeq.c     **** }
 7194              		.loc 1 718 2 view .LVU1967
 7195              	.LBB1870:
 7196              	.LBI1867:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7197              		.loc 1 1087 5 view .LVU1968
 7198              	.LBB1869:
1088:src/xeq.c     **** }
 7199              		.loc 1 1088 2 view .LVU1969
1088:src/xeq.c     **** }
 7200              		.loc 1 1088 24 is_stmt 0 view .LVU1970
 7201 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7202              	.LBE1869:
 7203              	.LBE1870:
 718:src/xeq.c     **** }
 7204              		.loc 1 718 2 view .LVU1971
 7205 0034 1068     		ldr	r0, [r2]
 7206 0036 1C40     		ands	r4, r4, r3
 7207 0038 B4F5804F 		cmp	r4, #16384
 7208 003c 6946     		mov	r1, sp
ARM GAS  /tmp/ccQlyisH.s 			page 259


 7209 003e 0CBF     		ite	eq
 7210 0040 1022     		moveq	r2, #16
 7211              	.LVL505:
 718:src/xeq.c     **** }
 7212              		.loc 1 718 2 view .LVU1972
 7213 0042 0822     		movne	r2, #8
 7214 0044 FFF7FEFF 		bl	xcopy
 7215              	.LVL506:
 718:src/xeq.c     **** }
 7216              		.loc 1 718 2 view .LVU1973
 7217              	.LBE1871:
 7218              	.LBE1872:
 892:src/xeq.c     **** 
 7219              		.loc 1 892 1 view .LVU1974
 7220 0048 05B0     		add	sp, sp, #20
 7221              		.cfi_def_cfa_offset 12
 7222              		@ sp needed
 7223 004a 30BD     		pop	{r4, r5, pc}
 7224              	.L573:
 7225              		.align	2
 7226              	.L572:
 7227 004c 00000000 		.word	main_ram
 7228 0050 00000000 		.word	StackBase
 7229              		.cfi_endproc
 7230              	.LFE71:
 7232              		.section	.text.cpx_roll_up,"ax",%progbits
 7233              		.align	1
 7234              		.p2align 2,,3
 7235              		.global	cpx_roll_up
 7236              		.syntax unified
 7237              		.thumb
 7238              		.thumb_func
 7239              		.fpu fpv4-sp-d16
 7241              	cpx_roll_up:
 7242              	.LVL507:
 7243              	.LFB73:
 903:src/xeq.c     **** 	roll_up(OP_RUP);
 7244              		.loc 1 903 33 is_stmt 1 view -0
 7245              		.cfi_startproc
 7246              		@ args = 0, pretend = 0, frame = 0
 7247              		@ frame_needed = 0, uses_anonymous_args = 0
 904:src/xeq.c     **** 	roll_up(OP_RUP);
 7248              		.loc 1 904 2 view .LVU1976
 903:src/xeq.c     **** 	roll_up(OP_RUP);
 7249              		.loc 1 903 33 is_stmt 0 view .LVU1977
 7250 0000 08B5     		push	{r3, lr}
 7251              		.cfi_def_cfa_offset 8
 7252              		.cfi_offset 3, -8
 7253              		.cfi_offset 14, -4
 904:src/xeq.c     **** 	roll_up(OP_RUP);
 7254              		.loc 1 904 2 view .LVU1978
 7255 0002 0820     		movs	r0, #8
 7256              	.LVL508:
 904:src/xeq.c     **** 	roll_up(OP_RUP);
 7257              		.loc 1 904 2 view .LVU1979
 7258 0004 FFF7FEFF 		bl	roll_up
 7259              	.LVL509:
ARM GAS  /tmp/ccQlyisH.s 			page 260


 905:src/xeq.c     **** 	set_was_complex();
 7260              		.loc 1 905 2 is_stmt 1 view .LVU1980
 7261 0008 0820     		movs	r0, #8
 7262 000a FFF7FEFF 		bl	roll_up
 7263              	.LVL510:
 906:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 7264              		.loc 1 906 2 view .LVU1981
 7265              	.LBB1873:
 7266              	.LBI1873:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 7267              		.loc 1 530 13 view .LVU1982
 7268              	.LBB1874:
 531:src/xeq.c     **** }
 7269              		.loc 1 531 2 view .LVU1983
 531:src/xeq.c     **** }
 7270              		.loc 1 531 20 is_stmt 0 view .LVU1984
 7271 000e 074B     		ldr	r3, .L576
 7272              	.LBE1874:
 7273              	.LBE1873:
 908:src/xeq.c     **** #endif
 7274              		.loc 1 908 2 view .LVU1985
 7275 0010 074A     		ldr	r2, .L576+4
 7276              	.LBB1877:
 7277              	.LBB1875:
 531:src/xeq.c     **** }
 7278              		.loc 1 531 20 view .LVU1986
 7279 0012 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 7280              	.LBE1875:
 7281              	.LBE1877:
 908:src/xeq.c     **** #endif
 7282              		.loc 1 908 2 view .LVU1987
 7283 0014 1268     		ldr	r2, [r2]
 7284              	.LBB1878:
 7285              	.LBB1876:
 531:src/xeq.c     **** }
 7286              		.loc 1 531 20 view .LVU1988
 7287 0016 0120     		movs	r0, #1
 7288 0018 60F38711 		bfi	r1, r0, #6, #2
 7289 001c 1975     		strb	r1, [r3, #20]
 7290              	.LBE1876:
 7291              	.LBE1878:
 908:src/xeq.c     **** #endif
 7292              		.loc 1 908 2 is_stmt 1 view .LVU1989
 7293 001e 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 7294 0022 0343     		orrs	r3, r3, r0
 7295 0024 82F8AD37 		strb	r3, [r2, #1965]
 910:src/xeq.c     **** 
 7296              		.loc 1 910 1 is_stmt 0 view .LVU1990
 7297 0028 08BD     		pop	{r3, pc}
 7298              	.L577:
 7299 002a 00BF     		.align	2
 7300              	.L576:
 7301 002c 00000000 		.word	StateWhileOn
 7302 0030 00000000 		.word	main_ram
 7303              		.cfi_endproc
 7304              	.LFE73:
 7306              		.section	.text.fill,"ax",%progbits
ARM GAS  /tmp/ccQlyisH.s 			page 261


 7307              		.align	1
 7308              		.p2align 2,,3
 7309              		.global	fill
 7310              		.syntax unified
 7311              		.thumb
 7312              		.thumb_func
 7313              		.fpu fpv4-sp-d16
 7315              	fill:
 7316              	.LVL511:
 7317              	.LFB79:
1065:src/xeq.c     **** 	const int n = stack_size();
 7318              		.loc 1 1065 26 is_stmt 1 view -0
 7319              		.cfi_startproc
 7320              		@ args = 0, pretend = 0, frame = 0
 7321              		@ frame_needed = 0, uses_anonymous_args = 0
1066:src/xeq.c     **** 	int i;
 7322              		.loc 1 1066 2 view .LVU1992
 7323              	.LBB1879:
 7324              	.LBI1879:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7325              		.loc 1 703 5 view .LVU1993
 7326              	.LBB1880:
 704:src/xeq.c     **** 		return 4;
 7327              		.loc 1 704 2 view .LVU1994
 7328              	.LBE1880:
 7329              	.LBE1879:
1065:src/xeq.c     **** 	const int n = stack_size();
 7330              		.loc 1 1065 26 is_stmt 0 view .LVU1995
 7331 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7332              		.cfi_def_cfa_offset 24
 7333              		.cfi_offset 4, -24
 7334              		.cfi_offset 5, -20
 7335              		.cfi_offset 6, -16
 7336              		.cfi_offset 7, -12
 7337              		.cfi_offset 8, -8
 7338              		.cfi_offset 14, -4
 7339              	.LBB1886:
 7340              	.LBB1883:
 704:src/xeq.c     **** 		return 4;
 7341              		.loc 1 704 8 view .LVU1996
 7342 0004 174E     		ldr	r6, .L589
 7343 0006 3368     		ldr	r3, [r6]
 704:src/xeq.c     **** 		return 4;
 7344              		.loc 1 704 6 view .LVU1997
 7345 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 7346              		.loc 1 704 5 view .LVU1998
 7347 000c 1207     		lsls	r2, r2, #28
 7348 000e 27D5     		bpl	.L582
 7349              	.LBB1881:
 7350              	.LBI1881:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 7351              		.loc 1 182 5 is_stmt 1 view .LVU1999
 7352              	.LBB1882:
 183:src/xeq.c     **** }
 7353              		.loc 1 183 2 view .LVU2000
 183:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 262


 7354              		.loc 1 183 9 is_stmt 0 view .LVU2001
 7355 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7356              	.LBE1882:
 7357              	.LBE1881:
 704:src/xeq.c     **** 		return 4;
 7358              		.loc 1 704 27 view .LVU2002
 7359 0014 9B0B     		lsrs	r3, r3, #14
 7360 0016 032B     		cmp	r3, #3
 7361 0018 1AD0     		beq	.L588
 706:src/xeq.c     **** }
 7362              		.loc 1 706 9 view .LVU2003
 7363 001a 0825     		movs	r5, #8
 7364              	.L579:
 7365              	.LVL512:
 706:src/xeq.c     **** }
 7366              		.loc 1 706 9 view .LVU2004
 7367              	.LBE1883:
 7368              	.LBE1886:
1067:src/xeq.c     **** 
 7369              		.loc 1 1067 2 is_stmt 1 view .LVU2005
1069:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7370              		.loc 1 1069 2 view .LVU2006
1069:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7371              		.loc 1 1069 12 view .LVU2007
 7372 001c 124F     		ldr	r7, .L589+4
 7373 001e 6435     		adds	r5, r5, #100
 7374              	.LVL513:
 7375              	.LBB1887:
 7376              	.LBB1884:
 705:src/xeq.c     **** 	return 8;
 7377              		.loc 1 705 10 is_stmt 0 view .LVU2008
 7378 0020 6524     		movs	r4, #101
 7379              	.LBE1884:
 7380              	.LBE1887:
 7381              	.LBB1888:
 7382              	.LBB1889:
 7383              	.LBB1890:
 7384              	.LBB1891:
1088:src/xeq.c     **** }
 7385              		.loc 1 1088 24 view .LVU2009
 7386 0022 44F20108 		movw	r8, #16385
 7387              	.LVL514:
 7388              	.L581:
1088:src/xeq.c     **** }
 7389              		.loc 1 1088 24 view .LVU2010
 7390              	.LBE1891:
 7391              	.LBE1890:
 7392              	.LBE1889:
 7393              	.LBE1888:
1070:src/xeq.c     **** }
 7394              		.loc 1 1070 3 is_stmt 1 view .LVU2011
 7395              	.LBB1897:
 7396              	.LBI1897:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7397              		.loc 1 709 11 view .LVU2012
 7398              	.LBB1898:
 710:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 263


 7399              		.loc 1 710 2 view .LVU2013
 710:src/xeq.c     **** }
 7400              		.loc 1 710 9 is_stmt 0 view .LVU2014
 7401 0026 2046     		mov	r0, r4
 7402 0028 FFF7FEFF 		bl	get_reg_n
 7403              	.LVL515:
 710:src/xeq.c     **** }
 7404              		.loc 1 710 9 view .LVU2015
 7405              	.LBE1898:
 7406              	.LBE1897:
 7407              	.LBB1899:
 7408              	.LBI1888:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7409              		.loc 1 717 6 is_stmt 1 view .LVU2016
 7410              	.LBB1896:
 718:src/xeq.c     **** }
 7411              		.loc 1 718 2 view .LVU2017
 7412              	.LBB1894:
 7413              	.LBI1890:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7414              		.loc 1 1087 5 view .LVU2018
 7415              	.LBB1892:
1088:src/xeq.c     **** }
 7416              		.loc 1 1088 2 view .LVU2019
1088:src/xeq.c     **** }
 7417              		.loc 1 1088 24 is_stmt 0 view .LVU2020
 7418 002c 3368     		ldr	r3, [r6]
 7419              	.LBE1892:
 7420              	.LBE1894:
 718:src/xeq.c     **** }
 7421              		.loc 1 718 2 view .LVU2021
 7422 002e 3968     		ldr	r1, [r7]
 7423              	.LBB1895:
 7424              	.LBB1893:
1088:src/xeq.c     **** }
 7425              		.loc 1 1088 24 view .LVU2022
 7426 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7427              	.LBE1893:
 7428              	.LBE1895:
 718:src/xeq.c     **** }
 7429              		.loc 1 718 2 view .LVU2023
 7430 0034 08EA0303 		and	r3, r8, r3
 7431 0038 B3F5804F 		cmp	r3, #16384
 7432 003c 0CBF     		ite	eq
 7433 003e 1022     		moveq	r2, #16
 7434 0040 0822     		movne	r2, #8
 7435 0042 0134     		adds	r4, r4, #1
 7436              	.LVL516:
 718:src/xeq.c     **** }
 7437              		.loc 1 718 2 view .LVU2024
 7438 0044 FFF7FEFF 		bl	xcopy
 7439              	.LVL517:
 718:src/xeq.c     **** }
 7440              		.loc 1 718 2 view .LVU2025
 7441              	.LBE1896:
 7442              	.LBE1899:
1069:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
ARM GAS  /tmp/ccQlyisH.s 			page 264


 7443              		.loc 1 1069 17 is_stmt 1 view .LVU2026
1069:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7444              		.loc 1 1069 12 view .LVU2027
1069:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7445              		.loc 1 1069 2 is_stmt 0 view .LVU2028
 7446 0048 AC42     		cmp	r4, r5
 7447 004a ECD1     		bne	.L581
1071:src/xeq.c     **** 
 7448              		.loc 1 1071 1 view .LVU2029
 7449 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7450              	.LVL518:
 7451              	.L588:
 7452              	.LBB1900:
 7453              	.LBB1885:
 704:src/xeq.c     **** 		return 4;
 7454              		.loc 1 704 44 view .LVU2030
 7455 0050 064B     		ldr	r3, .L589+8
 704:src/xeq.c     **** 		return 4;
 7456              		.loc 1 704 41 view .LVU2031
 7457 0052 93F90130 		ldrsb	r3, [r3, #1]
 705:src/xeq.c     **** 	return 8;
 7458              		.loc 1 705 10 view .LVU2032
 7459 0056 002B     		cmp	r3, #0
 7460 0058 B4BF     		ite	lt
 7461 005a 0825     		movlt	r5, #8
 7462 005c 0425     		movge	r5, #4
 7463 005e DDE7     		b	.L579
 7464              	.L582:
 7465 0060 0425     		movs	r5, #4
 7466 0062 DBE7     		b	.L579
 7467              	.L590:
 7468              		.align	2
 7469              	.L589:
 7470 0064 00000000 		.word	main_ram
 7471 0068 00000000 		.word	StackBase
 7472 006c 00000000 		.word	XromParams
 7473              	.LBE1885:
 7474              	.LBE1900:
 7475              		.cfi_endproc
 7476              	.LFE79:
 7478              		.section	.text.lower2,"ax",%progbits
 7479              		.align	1
 7480              		.p2align 2,,3
 7481              		.syntax unified
 7482              		.thumb
 7483              		.thumb_func
 7484              		.fpu fpv4-sp-d16
 7486              	lower2:
 7487              	.LFB54:
 774:src/xeq.c     **** 	const int n = stack_size();
 7488              		.loc 1 774 26 is_stmt 1 view -0
 7489              		.cfi_startproc
 7490              		@ args = 0, pretend = 0, frame = 0
 7491              		@ frame_needed = 0, uses_anonymous_args = 0
 775:src/xeq.c     **** 	int i;
 7492              		.loc 1 775 2 view .LVU2034
 7493              	.LBB1901:
ARM GAS  /tmp/ccQlyisH.s 			page 265


 7494              	.LBI1901:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7495              		.loc 1 703 5 view .LVU2035
 7496              	.LBB1902:
 704:src/xeq.c     **** 		return 4;
 7497              		.loc 1 704 2 view .LVU2036
 7498              	.LBE1902:
 7499              	.LBE1901:
 774:src/xeq.c     **** 	const int n = stack_size();
 7500              		.loc 1 774 26 is_stmt 0 view .LVU2037
 7501 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7502              		.cfi_def_cfa_offset 24
 7503              		.cfi_offset 4, -24
 7504              		.cfi_offset 5, -20
 7505              		.cfi_offset 6, -16
 7506              		.cfi_offset 7, -12
 7507              		.cfi_offset 8, -8
 7508              		.cfi_offset 14, -4
 7509              	.LBB1908:
 7510              	.LBB1905:
 704:src/xeq.c     **** 		return 4;
 7511              		.loc 1 704 8 view .LVU2038
 7512 0004 194F     		ldr	r7, .L602
 7513 0006 3B68     		ldr	r3, [r7]
 704:src/xeq.c     **** 		return 4;
 7514              		.loc 1 704 6 view .LVU2039
 7515 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 7516              		.loc 1 704 5 view .LVU2040
 7517 000c 1207     		lsls	r2, r2, #28
 7518 000e 2BD5     		bpl	.L595
 7519              	.LBB1903:
 7520              	.LBI1903:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 7521              		.loc 1 182 5 is_stmt 1 view .LVU2041
 7522              	.LBB1904:
 183:src/xeq.c     **** }
 7523              		.loc 1 183 2 view .LVU2042
 183:src/xeq.c     **** }
 7524              		.loc 1 183 9 is_stmt 0 view .LVU2043
 7525 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7526              	.LBE1904:
 7527              	.LBE1903:
 704:src/xeq.c     **** 		return 4;
 7528              		.loc 1 704 27 view .LVU2044
 7529 0014 9B0B     		lsrs	r3, r3, #14
 7530 0016 032B     		cmp	r3, #3
 7531 0018 1ED0     		beq	.L601
 706:src/xeq.c     **** }
 7532              		.loc 1 706 9 view .LVU2045
 7533 001a 0826     		movs	r6, #8
 7534              	.L592:
 7535              	.LVL519:
 706:src/xeq.c     **** }
 7536              		.loc 1 706 9 view .LVU2046
 7537              	.LBE1905:
 7538              	.LBE1908:
ARM GAS  /tmp/ccQlyisH.s 			page 266


 776:src/xeq.c     **** 
 7539              		.loc 1 776 2 is_stmt 1 view .LVU2047
 778:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7540              		.loc 1 778 2 view .LVU2048
 778:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7541              		.loc 1 778 12 view .LVU2049
 7542 001c 6236     		adds	r6, r6, #98
 7543              	.LVL520:
 7544              	.LBB1909:
 7545              	.LBB1906:
 705:src/xeq.c     **** 	return 8;
 7546              		.loc 1 705 10 is_stmt 0 view .LVU2050
 7547 001e 6424     		movs	r4, #100
 7548              	.LBE1906:
 7549              	.LBE1909:
 7550              	.LBB1910:
 7551              	.LBB1911:
 7552              	.LBB1912:
 7553              	.LBB1913:
1088:src/xeq.c     **** }
 7554              		.loc 1 1088 24 view .LVU2051
 7555 0020 44F20108 		movw	r8, #16385
 7556              	.LVL521:
 7557              	.L594:
1088:src/xeq.c     **** }
 7558              		.loc 1 1088 24 view .LVU2052
 7559              	.LBE1913:
 7560              	.LBE1912:
 7561              	.LBE1911:
 7562              	.LBE1910:
 779:src/xeq.c     **** }
 7563              		.loc 1 779 3 is_stmt 1 discriminator 3 view .LVU2053
 7564              	.LBB1920:
 7565              	.LBI1920:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7566              		.loc 1 709 11 discriminator 3 view .LVU2054
 7567              	.LBB1921:
 710:src/xeq.c     **** }
 7568              		.loc 1 710 2 discriminator 3 view .LVU2055
 710:src/xeq.c     **** }
 7569              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU2056
 7570 0024 2046     		mov	r0, r4
 7571 0026 FFF7FEFF 		bl	get_reg_n
 7572              	.LVL522:
 7573 002a 0546     		mov	r5, r0
 7574              	.LBE1921:
 7575              	.LBE1920:
 7576              	.LBB1922:
 7577              	.LBB1923:
 7578 002c A01C     		adds	r0, r4, #2
 7579              	.LVL523:
 710:src/xeq.c     **** }
 7580              		.loc 1 710 9 discriminator 3 view .LVU2057
 7581              	.LBE1923:
 7582              	.LBI1922:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7583              		.loc 1 709 11 is_stmt 1 discriminator 3 view .LVU2058
ARM GAS  /tmp/ccQlyisH.s 			page 267


 7584              	.LBB1924:
 710:src/xeq.c     **** }
 7585              		.loc 1 710 2 discriminator 3 view .LVU2059
 710:src/xeq.c     **** }
 7586              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU2060
 7587 002e FFF7FEFF 		bl	get_reg_n
 7588              	.LVL524:
 710:src/xeq.c     **** }
 7589              		.loc 1 710 9 discriminator 3 view .LVU2061
 7590              	.LBE1924:
 7591              	.LBE1922:
 7592              	.LBB1926:
 7593              	.LBB1918:
 7594              	.LBB1916:
 7595              	.LBB1914:
1088:src/xeq.c     **** }
 7596              		.loc 1 1088 24 discriminator 3 view .LVU2062
 7597 0032 3B68     		ldr	r3, [r7]
 7598 0034 B3F8E837 		ldrh	r3, [r3, #2024]
 7599              	.LBE1914:
 7600              	.LBE1916:
 718:src/xeq.c     **** }
 7601              		.loc 1 718 2 discriminator 3 view .LVU2063
 7602 0038 08EA0303 		and	r3, r8, r3
 7603 003c B3F5804F 		cmp	r3, #16384
 7604              	.LBE1918:
 7605              	.LBE1926:
 7606              	.LBB1927:
 7607              	.LBB1925:
 710:src/xeq.c     **** }
 7608              		.loc 1 710 9 discriminator 3 view .LVU2064
 7609 0040 0146     		mov	r1, r0
 7610              	.LVL525:
 710:src/xeq.c     **** }
 7611              		.loc 1 710 9 discriminator 3 view .LVU2065
 7612              	.LBE1925:
 7613              	.LBE1927:
 7614              	.LBB1928:
 7615              	.LBI1910:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7616              		.loc 1 717 6 is_stmt 1 discriminator 3 view .LVU2066
 7617              	.LBB1919:
 718:src/xeq.c     **** }
 7618              		.loc 1 718 2 discriminator 3 view .LVU2067
 7619              	.LBB1917:
 7620              	.LBI1912:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7621              		.loc 1 1087 5 discriminator 3 view .LVU2068
 7622              	.LBB1915:
1088:src/xeq.c     **** }
 7623              		.loc 1 1088 2 discriminator 3 view .LVU2069
 7624              	.LBE1915:
 7625              	.LBE1917:
 718:src/xeq.c     **** }
 7626              		.loc 1 718 2 is_stmt 0 discriminator 3 view .LVU2070
 7627 0042 0CBF     		ite	eq
 7628 0044 1022     		moveq	r2, #16
ARM GAS  /tmp/ccQlyisH.s 			page 268


 7629 0046 0822     		movne	r2, #8
 7630 0048 2846     		mov	r0, r5
 7631              	.LVL526:
 718:src/xeq.c     **** }
 7632              		.loc 1 718 2 discriminator 3 view .LVU2071
 7633 004a 0134     		adds	r4, r4, #1
 7634              	.LVL527:
 718:src/xeq.c     **** }
 7635              		.loc 1 718 2 discriminator 3 view .LVU2072
 7636 004c FFF7FEFF 		bl	xcopy
 7637              	.LVL528:
 718:src/xeq.c     **** }
 7638              		.loc 1 718 2 discriminator 3 view .LVU2073
 7639              	.LBE1919:
 7640              	.LBE1928:
 778:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7641              		.loc 1 778 17 is_stmt 1 discriminator 3 view .LVU2074
 778:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7642              		.loc 1 778 12 discriminator 3 view .LVU2075
 778:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7643              		.loc 1 778 2 is_stmt 0 discriminator 3 view .LVU2076
 7644 0050 B442     		cmp	r4, r6
 7645 0052 E7D1     		bne	.L594
 780:src/xeq.c     **** 
 7646              		.loc 1 780 1 view .LVU2077
 7647 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7648              	.LVL529:
 7649              	.L601:
 7650              	.LBB1929:
 7651              	.LBB1907:
 704:src/xeq.c     **** 		return 4;
 7652              		.loc 1 704 44 view .LVU2078
 7653 0058 054B     		ldr	r3, .L602+4
 704:src/xeq.c     **** 		return 4;
 7654              		.loc 1 704 41 view .LVU2079
 7655 005a 93F90130 		ldrsb	r3, [r3, #1]
 705:src/xeq.c     **** 	return 8;
 7656              		.loc 1 705 10 view .LVU2080
 7657 005e 002B     		cmp	r3, #0
 7658 0060 B4BF     		ite	lt
 7659 0062 0826     		movlt	r6, #8
 7660 0064 0426     		movge	r6, #4
 7661 0066 D9E7     		b	.L592
 7662              	.L595:
 7663 0068 0426     		movs	r6, #4
 7664 006a D7E7     		b	.L592
 7665              	.L603:
 7666              		.align	2
 7667              	.L602:
 7668 006c 00000000 		.word	main_ram
 7669 0070 00000000 		.word	XromParams
 7670              	.LBE1907:
 7671              	.LBE1929:
 7672              		.cfi_endproc
 7673              	.LFE54:
 7675              		.section	.text.drop,"ax",%progbits
 7676              		.align	1
ARM GAS  /tmp/ccQlyisH.s 			page 269


 7677              		.p2align 2,,3
 7678              		.global	drop
 7679              		.syntax unified
 7680              		.thumb
 7681              		.thumb_func
 7682              		.fpu fpv4-sp-d16
 7684              	drop:
 7685              	.LVL530:
 7686              	.LFB80:
1073:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7687              		.loc 1 1073 26 is_stmt 1 view -0
 7688              		.cfi_startproc
 7689              		@ args = 0, pretend = 0, frame = 0
 7690              		@ frame_needed = 0, uses_anonymous_args = 0
1074:src/xeq.c     **** 		lower2();
 7691              		.loc 1 1074 2 view .LVU2082
1074:src/xeq.c     **** 		lower2();
 7692              		.loc 1 1074 5 is_stmt 0 view .LVU2083
 7693 0000 0F28     		cmp	r0, #15
 7694 0002 01D0     		beq	.L611
1078:src/xeq.c     **** }
 7695              		.loc 1 1078 3 is_stmt 1 view .LVU2084
 7696 0004 FFF7FEBF 		b	lower
 7697              	.LVL531:
 7698              	.L611:
1075:src/xeq.c     **** 		set_was_complex();
 7699              		.loc 1 1075 3 view .LVU2085
1073:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7700              		.loc 1 1073 26 is_stmt 0 view .LVU2086
 7701 0008 08B5     		push	{r3, lr}
 7702              		.cfi_def_cfa_offset 8
 7703              		.cfi_offset 3, -8
 7704              		.cfi_offset 14, -4
1075:src/xeq.c     **** 		set_was_complex();
 7705              		.loc 1 1075 3 view .LVU2087
 7706 000a FFF7FEFF 		bl	lower2
 7707              	.LVL532:
1076:src/xeq.c     **** 	} else
 7708              		.loc 1 1076 3 is_stmt 1 view .LVU2088
 7709              	.LBB1930:
 7710              	.LBI1930:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 7711              		.loc 1 530 13 view .LVU2089
 7712              	.LBB1931:
 531:src/xeq.c     **** }
 7713              		.loc 1 531 2 view .LVU2090
 531:src/xeq.c     **** }
 7714              		.loc 1 531 20 is_stmt 0 view .LVU2091
 7715 000e 034B     		ldr	r3, .L612
 7716 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 7717 0012 0121     		movs	r1, #1
 7718 0014 61F38712 		bfi	r2, r1, #6, #2
 7719 0018 1A75     		strb	r2, [r3, #20]
 7720              	.LBE1931:
 7721              	.LBE1930:
1079:src/xeq.c     **** 
 7722              		.loc 1 1079 1 view .LVU2092
ARM GAS  /tmp/ccQlyisH.s 			page 270


 7723 001a 08BD     		pop	{r3, pc}
 7724              	.L613:
 7725              		.align	2
 7726              	.L612:
 7727 001c 00000000 		.word	StateWhileOn
 7728              		.cfi_endproc
 7729              	.LFE80:
 7731              		.section	.text.copyreg_n,"ax",%progbits
 7732              		.align	1
 7733              		.p2align 2,,3
 7734              		.global	copyreg_n
 7735              		.syntax unified
 7736              		.thumb
 7737              		.thumb_func
 7738              		.fpu fpv4-sp-d16
 7740              	copyreg_n:
 7741              	.LVL533:
 7742              	.LFB46:
 721:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7743              		.loc 1 721 30 is_stmt 1 view -0
 7744              		.cfi_startproc
 7745              		@ args = 0, pretend = 0, frame = 0
 7746              		@ frame_needed = 0, uses_anonymous_args = 0
 722:src/xeq.c     **** }
 7747              		.loc 1 722 2 view .LVU2094
 721:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7748              		.loc 1 721 30 is_stmt 0 view .LVU2095
 7749 0000 38B5     		push	{r3, r4, r5, lr}
 7750              		.cfi_def_cfa_offset 16
 7751              		.cfi_offset 3, -16
 7752              		.cfi_offset 4, -12
 7753              		.cfi_offset 5, -8
 7754              		.cfi_offset 14, -4
 721:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7755              		.loc 1 721 30 view .LVU2096
 7756 0002 0D46     		mov	r5, r1
 722:src/xeq.c     **** }
 7757              		.loc 1 722 2 view .LVU2097
 7758 0004 FFF7FEFF 		bl	get_reg_n
 7759              	.LVL534:
 722:src/xeq.c     **** }
 7760              		.loc 1 722 2 view .LVU2098
 7761 0008 0446     		mov	r4, r0
 722:src/xeq.c     **** }
 7762              		.loc 1 722 24 view .LVU2099
 7763 000a 2846     		mov	r0, r5
 7764 000c FFF7FEFF 		bl	get_reg_n
 7765              	.LVL535:
 7766              	.LBB1932:
 7767              	.LBB1933:
 7768              	.LBB1934:
 7769              	.LBB1935:
1088:src/xeq.c     **** }
 7770              		.loc 1 1088 24 view .LVU2100
 7771 0010 094B     		ldr	r3, .L618
 7772 0012 1B68     		ldr	r3, [r3]
 7773 0014 B3F8E827 		ldrh	r2, [r3, #2024]
ARM GAS  /tmp/ccQlyisH.s 			page 271


 7774 0018 44F20103 		movw	r3, #16385
 7775              	.LBE1935:
 7776              	.LBE1934:
 718:src/xeq.c     **** }
 7777              		.loc 1 718 2 view .LVU2101
 7778 001c 1340     		ands	r3, r3, r2
 7779 001e B3F5804F 		cmp	r3, #16384
 7780              	.LBE1933:
 7781              	.LBE1932:
 722:src/xeq.c     **** }
 7782              		.loc 1 722 24 view .LVU2102
 7783 0022 0146     		mov	r1, r0
 7784              	.LVL536:
 7785              	.LBB1940:
 7786              	.LBI1932:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7787              		.loc 1 717 6 is_stmt 1 view .LVU2103
 7788              	.LBB1938:
 718:src/xeq.c     **** }
 7789              		.loc 1 718 2 view .LVU2104
 7790              	.LBB1937:
 7791              	.LBI1934:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7792              		.loc 1 1087 5 view .LVU2105
 7793              	.LBB1936:
1088:src/xeq.c     **** }
 7794              		.loc 1 1088 2 view .LVU2106
 7795              	.LBE1936:
 7796              	.LBE1937:
 718:src/xeq.c     **** }
 7797              		.loc 1 718 2 is_stmt 0 view .LVU2107
 7798 0024 08BF     		it	eq
 7799 0026 1022     		moveq	r2, #16
 7800 0028 2046     		mov	r0, r4
 7801              	.LVL537:
 718:src/xeq.c     **** }
 7802              		.loc 1 718 2 view .LVU2108
 7803 002a 18BF     		it	ne
 7804 002c 0822     		movne	r2, #8
 7805              	.LBE1938:
 7806              	.LBE1940:
 723:src/xeq.c     **** 
 7807              		.loc 1 723 1 view .LVU2109
 7808 002e BDE83840 		pop	{r3, r4, r5, lr}
 7809              		.cfi_restore 14
 7810              		.cfi_restore 5
 7811              		.cfi_restore 4
 7812              		.cfi_restore 3
 7813              		.cfi_def_cfa_offset 0
 7814              	.LVL538:
 7815              	.LBB1941:
 7816              	.LBB1939:
 718:src/xeq.c     **** }
 7817              		.loc 1 718 2 view .LVU2110
 7818 0032 FFF7FEBF 		b	xcopy
 7819              	.LVL539:
 7820              	.L619:
ARM GAS  /tmp/ccQlyisH.s 			page 272


 718:src/xeq.c     **** }
 7821              		.loc 1 718 2 view .LVU2111
 7822 0036 00BF     		.align	2
 7823              	.L618:
 7824 0038 00000000 		.word	main_ram
 7825              	.LBE1939:
 7826              	.LBE1941:
 7827              		.cfi_endproc
 7828              	.LFE46:
 7830              		.section	.text.setlastX,"ax",%progbits
 7831              		.align	1
 7832              		.p2align 2,,3
 7833              		.global	setlastX
 7834              		.syntax unified
 7835              		.thumb
 7836              		.thumb_func
 7837              		.fpu fpv4-sp-d16
 7839              	setlastX:
 7840              	.LFB55:
 783:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7841              		.loc 1 783 21 is_stmt 1 view -0
 7842              		.cfi_startproc
 7843              		@ args = 0, pretend = 0, frame = 0
 7844              		@ frame_needed = 0, uses_anonymous_args = 0
 7845              		@ link register save eliminated.
 784:src/xeq.c     **** }
 7846              		.loc 1 784 2 view .LVU2113
 7847 0000 6421     		movs	r1, #100
 7848 0002 6C20     		movs	r0, #108
 7849 0004 FFF7FEBF 		b	copyreg_n
 7850              	.LVL540:
 7851              		.cfi_endproc
 7852              	.LFE55:
 7854              		.section	.text.setlastXY,"ax",%progbits
 7855              		.align	1
 7856              		.p2align 2,,3
 7857              		.syntax unified
 7858              		.thumb
 7859              		.thumb_func
 7860              		.fpu fpv4-sp-d16
 7862              	setlastXY:
 7863              	.LFB56:
 787:src/xeq.c     **** 	setlastX();
 7864              		.loc 1 787 29 view -0
 7865              		.cfi_startproc
 7866              		@ args = 0, pretend = 0, frame = 0
 7867              		@ frame_needed = 0, uses_anonymous_args = 0
 788:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 7868              		.loc 1 788 2 view .LVU2115
 7869              	.LBB1942:
 7870              	.LBI1942:
 783:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7871              		.loc 1 783 6 view .LVU2116
 7872              	.LBB1943:
 784:src/xeq.c     **** }
 7873              		.loc 1 784 2 view .LVU2117
 7874              	.LBE1943:
ARM GAS  /tmp/ccQlyisH.s 			page 273


 7875              	.LBE1942:
 787:src/xeq.c     **** 	setlastX();
 7876              		.loc 1 787 29 is_stmt 0 view .LVU2118
 7877 0000 08B5     		push	{r3, lr}
 7878              		.cfi_def_cfa_offset 8
 7879              		.cfi_offset 3, -8
 7880              		.cfi_offset 14, -4
 7881              	.LBB1945:
 7882              	.LBB1944:
 784:src/xeq.c     **** }
 7883              		.loc 1 784 2 view .LVU2119
 7884 0002 6421     		movs	r1, #100
 7885 0004 6C20     		movs	r0, #108
 7886 0006 FFF7FEFF 		bl	copyreg_n
 7887              	.LVL541:
 7888              	.LBE1944:
 7889              	.LBE1945:
 789:src/xeq.c     **** }
 7890              		.loc 1 789 2 is_stmt 1 view .LVU2120
 790:src/xeq.c     **** 
 7891              		.loc 1 790 1 is_stmt 0 view .LVU2121
 7892 000a BDE80840 		pop	{r3, lr}
 7893              		.cfi_restore 14
 7894              		.cfi_restore 3
 7895              		.cfi_def_cfa_offset 0
 789:src/xeq.c     **** }
 7896              		.loc 1 789 2 view .LVU2122
 7897 000e 6521     		movs	r1, #101
 7898 0010 6D20     		movs	r0, #109
 7899 0012 FFF7FEBF 		b	copyreg_n
 7900              	.LVL542:
 7901              		.cfi_endproc
 7902              	.LFE56:
 7904 0016 00BF     		.section	.text.getRegister,"ax",%progbits
 7905              		.align	1
 7906              		.p2align 2,,3
 7907              		.global	getRegister
 7908              		.syntax unified
 7909              		.thumb
 7910              		.thumb_func
 7911              		.fpu fpv4-sp-d16
 7913              	getRegister:
 7914              	.LVL543:
 7915              	.LFB57:
 793:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7916              		.loc 1 793 49 is_stmt 1 view -0
 7917              		.cfi_startproc
 7918              		@ args = 0, pretend = 0, frame = 0
 7919              		@ frame_needed = 0, uses_anonymous_args = 0
 794:src/xeq.c     **** 	if (is_dblmode())
 7920              		.loc 1 794 2 view .LVU2124
 793:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7921              		.loc 1 793 49 is_stmt 0 view .LVU2125
 7922 0000 10B5     		push	{r4, lr}
 7923              		.cfi_def_cfa_offset 8
 7924              		.cfi_offset 4, -8
 7925              		.cfi_offset 14, -4
ARM GAS  /tmp/ccQlyisH.s 			page 274


 793:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7926              		.loc 1 793 49 view .LVU2126
 7927 0002 0446     		mov	r4, r0
 794:src/xeq.c     **** 	if (is_dblmode())
 7928              		.loc 1 794 30 view .LVU2127
 7929 0004 0846     		mov	r0, r1
 7930              	.LVL544:
 794:src/xeq.c     **** 	if (is_dblmode())
 7931              		.loc 1 794 30 view .LVU2128
 7932 0006 FFF7FEFF 		bl	get_reg_n
 7933              	.LVL545:
 795:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7934              		.loc 1 795 2 is_stmt 1 view .LVU2129
 7935              	.LBB1946:
 7936              	.LBI1946:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7937              		.loc 1 1087 5 view .LVU2130
 7938              	.LBB1947:
1088:src/xeq.c     **** }
 7939              		.loc 1 1088 2 view .LVU2131
1088:src/xeq.c     **** }
 7940              		.loc 1 1088 24 is_stmt 0 view .LVU2132
 7941 000a 094B     		ldr	r3, .L628
 7942 000c 1B68     		ldr	r3, [r3]
 7943 000e B3F8E827 		ldrh	r2, [r3, #2024]
 7944 0012 44F20103 		movw	r3, #16385
 7945              	.LBE1947:
 7946              	.LBE1946:
 795:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7947              		.loc 1 795 5 view .LVU2133
 7948 0016 1340     		ands	r3, r3, r2
 7949 0018 B3F5804F 		cmp	r3, #16384
 796:src/xeq.c     **** 	else
 7950              		.loc 1 796 3 view .LVU2134
 7951 001c 2146     		mov	r1, r4
 795:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7952              		.loc 1 795 5 view .LVU2135
 7953 001e 03D0     		beq	.L627
 798:src/xeq.c     **** 	return r;
 7954              		.loc 1 798 3 is_stmt 1 view .LVU2136
 7955 0020 FFF7FEFF 		bl	decimal64ToNumber
 7956              	.LVL546:
 799:src/xeq.c     **** }
 7957              		.loc 1 799 2 view .LVU2137
 800:src/xeq.c     **** 
 7958              		.loc 1 800 1 is_stmt 0 view .LVU2138
 7959 0024 2046     		mov	r0, r4
 7960 0026 10BD     		pop	{r4, pc}
 7961              	.LVL547:
 7962              	.L627:
 796:src/xeq.c     **** 	else
 7963              		.loc 1 796 3 is_stmt 1 view .LVU2139
 7964 0028 FFF7FEFF 		bl	decimal128ToNumber
 7965              	.LVL548:
 799:src/xeq.c     **** }
 7966              		.loc 1 799 2 view .LVU2140
 800:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 275


 7967              		.loc 1 800 1 is_stmt 0 view .LVU2141
 7968 002c 2046     		mov	r0, r4
 7969 002e 10BD     		pop	{r4, pc}
 7970              	.LVL549:
 7971              	.L629:
 800:src/xeq.c     **** 
 7972              		.loc 1 800 1 view .LVU2142
 7973              		.align	2
 7974              	.L628:
 7975 0030 00000000 		.word	main_ram
 7976              		.cfi_endproc
 7977              	.LFE57:
 7979              		.section	.text.getX,"ax",%progbits
 7980              		.align	1
 7981              		.p2align 2,,3
 7982              		.global	getX
 7983              		.syntax unified
 7984              		.thumb
 7985              		.thumb_func
 7986              		.fpu fpv4-sp-d16
 7988              	getX:
 7989              	.LVL550:
 7990              	.LFB59:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 7991              		.loc 1 815 31 is_stmt 1 view -0
 7992              		.cfi_startproc
 7993              		@ args = 0, pretend = 0, frame = 0
 7994              		@ frame_needed = 0, uses_anonymous_args = 0
 7995              		@ link register save eliminated.
 816:src/xeq.c     **** }
 7996              		.loc 1 816 2 view .LVU2144
 816:src/xeq.c     **** }
 7997              		.loc 1 816 9 is_stmt 0 view .LVU2145
 7998 0000 6421     		movs	r1, #100
 7999 0002 FFF7FEBF 		b	getRegister
 8000              	.LVL551:
 816:src/xeq.c     **** }
 8001              		.loc 1 816 9 view .LVU2146
 8002              		.cfi_endproc
 8003              	.LFE59:
 8005 0006 00BF     		.section	.text.getY,"ax",%progbits
 8006              		.align	1
 8007              		.p2align 2,,3
 8008              		.global	getY
 8009              		.syntax unified
 8010              		.thumb
 8011              		.thumb_func
 8012              		.fpu fpv4-sp-d16
 8014              	getY:
 8015              	.LVL552:
 8016              	.LFB61:
 823:src/xeq.c     **** 	getRegister(y, regY_idx);
 8017              		.loc 1 823 25 is_stmt 1 view -0
 8018              		.cfi_startproc
 8019              		@ args = 0, pretend = 0, frame = 0
 8020              		@ frame_needed = 0, uses_anonymous_args = 0
 8021              		@ link register save eliminated.
ARM GAS  /tmp/ccQlyisH.s 			page 276


 824:src/xeq.c     **** }
 8022              		.loc 1 824 2 view .LVU2148
 8023 0000 6521     		movs	r1, #101
 8024 0002 FFF7FEBF 		b	getRegister
 8025              	.LVL553:
 824:src/xeq.c     **** }
 8026              		.loc 1 824 2 is_stmt 0 view .LVU2149
 8027              		.cfi_endproc
 8028              	.LFE61:
 8030 0006 00BF     		.section	.text.getXY,"ax",%progbits
 8031              		.align	1
 8032              		.p2align 2,,3
 8033              		.global	getXY
 8034              		.syntax unified
 8035              		.thumb
 8036              		.thumb_func
 8037              		.fpu fpv4-sp-d16
 8039              	getXY:
 8040              	.LVL554:
 8041              	.LFB65:
 845:src/xeq.c     **** 	getX(x);
 8042              		.loc 1 845 40 is_stmt 1 view -0
 8043              		.cfi_startproc
 8044              		@ args = 0, pretend = 0, frame = 0
 8045              		@ frame_needed = 0, uses_anonymous_args = 0
 846:src/xeq.c     **** 	getY(y);
 8046              		.loc 1 846 2 view .LVU2151
 8047              	.LBB1948:
 8048              	.LBI1948:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8049              		.loc 1 815 12 view .LVU2152
 8050              	.LBB1949:
 816:src/xeq.c     **** }
 8051              		.loc 1 816 2 view .LVU2153
 8052              	.LBE1949:
 8053              	.LBE1948:
 845:src/xeq.c     **** 	getX(x);
 8054              		.loc 1 845 40 is_stmt 0 view .LVU2154
 8055 0000 10B5     		push	{r4, lr}
 8056              		.cfi_def_cfa_offset 8
 8057              		.cfi_offset 4, -8
 8058              		.cfi_offset 14, -4
 845:src/xeq.c     **** 	getX(x);
 8059              		.loc 1 845 40 view .LVU2155
 8060 0002 0C46     		mov	r4, r1
 8061              	.LBB1951:
 8062              	.LBB1950:
 816:src/xeq.c     **** }
 8063              		.loc 1 816 9 view .LVU2156
 8064 0004 6421     		movs	r1, #100
 8065              	.LVL555:
 816:src/xeq.c     **** }
 8066              		.loc 1 816 9 view .LVU2157
 8067 0006 FFF7FEFF 		bl	getRegister
 8068              	.LVL556:
 816:src/xeq.c     **** }
 8069              		.loc 1 816 9 view .LVU2158
ARM GAS  /tmp/ccQlyisH.s 			page 277


 8070              	.LBE1950:
 8071              	.LBE1951:
 847:src/xeq.c     **** }
 8072              		.loc 1 847 2 is_stmt 1 view .LVU2159
 8073              	.LBB1952:
 8074              	.LBI1952:
 823:src/xeq.c     **** 	getRegister(y, regY_idx);
 8075              		.loc 1 823 6 view .LVU2160
 8076              	.LBB1953:
 824:src/xeq.c     **** }
 8077              		.loc 1 824 2 view .LVU2161
 8078 000a 2046     		mov	r0, r4
 8079 000c 6521     		movs	r1, #101
 8080              	.LBE1953:
 8081              	.LBE1952:
 848:src/xeq.c     **** 
 8082              		.loc 1 848 1 is_stmt 0 view .LVU2162
 8083 000e BDE81040 		pop	{r4, lr}
 8084              		.cfi_restore 14
 8085              		.cfi_restore 4
 8086              		.cfi_def_cfa_offset 0
 8087              	.LVL557:
 8088              	.LBB1955:
 8089              	.LBB1954:
 824:src/xeq.c     **** }
 8090              		.loc 1 824 2 view .LVU2163
 8091 0012 FFF7FEBF 		b	getRegister
 8092              	.LVL558:
 824:src/xeq.c     **** }
 8093              		.loc 1 824 2 view .LVU2164
 8094              	.LBE1954:
 8095              	.LBE1955:
 8096              		.cfi_endproc
 8097              	.LFE65:
 8099 0016 00BF     		.section	.text.getXYZ,"ax",%progbits
 8100              		.align	1
 8101              		.p2align 2,,3
 8102              		.global	getXYZ
 8103              		.syntax unified
 8104              		.thumb
 8105              		.thumb_func
 8106              		.fpu fpv4-sp-d16
 8108              	getXYZ:
 8109              	.LVL559:
 8110              	.LFB67:
 858:src/xeq.c     **** 	getXY(x, y);
 8111              		.loc 1 858 55 is_stmt 1 view -0
 8112              		.cfi_startproc
 8113              		@ args = 0, pretend = 0, frame = 0
 8114              		@ frame_needed = 0, uses_anonymous_args = 0
 859:src/xeq.c     **** 	getZ(z);
 8115              		.loc 1 859 2 view .LVU2166
 858:src/xeq.c     **** 	getXY(x, y);
 8116              		.loc 1 858 55 is_stmt 0 view .LVU2167
 8117 0000 38B5     		push	{r3, r4, r5, lr}
 8118              		.cfi_def_cfa_offset 16
 8119              		.cfi_offset 3, -16
ARM GAS  /tmp/ccQlyisH.s 			page 278


 8120              		.cfi_offset 4, -12
 8121              		.cfi_offset 5, -8
 8122              		.cfi_offset 14, -4
 858:src/xeq.c     **** 	getXY(x, y);
 8123              		.loc 1 858 55 view .LVU2168
 8124 0002 0D46     		mov	r5, r1
 8125              	.LVL560:
 8126              	.LBB1956:
 8127              	.LBI1956:
 845:src/xeq.c     **** 	getX(x);
 8128              		.loc 1 845 6 is_stmt 1 view .LVU2169
 8129              	.LBE1956:
 846:src/xeq.c     **** 	getY(y);
 8130              		.loc 1 846 2 view .LVU2170
 8131              	.LBB1963:
 8132              	.LBB1957:
 8133              	.LBI1957:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8134              		.loc 1 815 12 view .LVU2171
 8135              	.LBB1958:
 816:src/xeq.c     **** }
 8136              		.loc 1 816 2 view .LVU2172
 816:src/xeq.c     **** }
 8137              		.loc 1 816 9 is_stmt 0 view .LVU2173
 8138 0004 6421     		movs	r1, #100
 8139              	.LVL561:
 816:src/xeq.c     **** }
 8140              		.loc 1 816 9 view .LVU2174
 8141              	.LBE1958:
 8142              	.LBE1957:
 8143              	.LBE1963:
 858:src/xeq.c     **** 	getXY(x, y);
 8144              		.loc 1 858 55 view .LVU2175
 8145 0006 1446     		mov	r4, r2
 8146              	.LBB1964:
 8147              	.LBB1960:
 8148              	.LBB1959:
 816:src/xeq.c     **** }
 8149              		.loc 1 816 9 view .LVU2176
 8150 0008 FFF7FEFF 		bl	getRegister
 8151              	.LVL562:
 816:src/xeq.c     **** }
 8152              		.loc 1 816 9 view .LVU2177
 8153              	.LBE1959:
 8154              	.LBE1960:
 8155              	.LBE1964:
 847:src/xeq.c     **** }
 8156              		.loc 1 847 2 is_stmt 1 view .LVU2178
 8157              	.LBB1965:
 8158              	.LBB1961:
 8159              	.LBI1961:
 823:src/xeq.c     **** 	getRegister(y, regY_idx);
 8160              		.loc 1 823 6 view .LVU2179
 8161              	.LBB1962:
 824:src/xeq.c     **** }
 8162              		.loc 1 824 2 view .LVU2180
 8163 000c 2846     		mov	r0, r5
ARM GAS  /tmp/ccQlyisH.s 			page 279


 8164 000e 6521     		movs	r1, #101
 8165 0010 FFF7FEFF 		bl	getRegister
 8166              	.LVL563:
 824:src/xeq.c     **** }
 8167              		.loc 1 824 2 is_stmt 0 view .LVU2181
 8168              	.LBE1962:
 8169              	.LBE1961:
 8170              	.LBE1965:
 860:src/xeq.c     **** }
 8171              		.loc 1 860 2 is_stmt 1 view .LVU2182
 8172              	.LBB1966:
 8173              	.LBI1966:
 831:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8174              		.loc 1 831 13 view .LVU2183
 8175              	.LBB1967:
 832:src/xeq.c     **** }
 8176              		.loc 1 832 2 view .LVU2184
 8177 0014 2046     		mov	r0, r4
 8178 0016 6621     		movs	r1, #102
 8179              	.LBE1967:
 8180              	.LBE1966:
 861:src/xeq.c     **** 
 8181              		.loc 1 861 1 is_stmt 0 view .LVU2185
 8182 0018 BDE83840 		pop	{r3, r4, r5, lr}
 8183              		.cfi_restore 14
 8184              		.cfi_restore 5
 8185              		.cfi_restore 4
 8186              		.cfi_restore 3
 8187              		.cfi_def_cfa_offset 0
 8188              	.LVL564:
 8189              	.LBB1969:
 8190              	.LBB1968:
 832:src/xeq.c     **** }
 8191              		.loc 1 832 2 view .LVU2186
 8192 001c FFF7FEBF 		b	getRegister
 8193              	.LVL565:
 832:src/xeq.c     **** }
 8194              		.loc 1 832 2 view .LVU2187
 8195              	.LBE1968:
 8196              	.LBE1969:
 8197              		.cfi_endproc
 8198              	.LFE67:
 8200              		.section	.text.getYZ,"ax",%progbits
 8201              		.align	1
 8202              		.p2align 2,,3
 8203              		.global	getYZ
 8204              		.syntax unified
 8205              		.thumb
 8206              		.thumb_func
 8207              		.fpu fpv4-sp-d16
 8209              	getYZ:
 8210              	.LVL566:
 8211              	.LFB69:
 875:src/xeq.c     **** 	getY(y);
 8212              		.loc 1 875 40 is_stmt 1 view -0
 8213              		.cfi_startproc
 8214              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccQlyisH.s 			page 280


 8215              		@ frame_needed = 0, uses_anonymous_args = 0
 876:src/xeq.c     **** 	getZ(z);
 8216              		.loc 1 876 2 view .LVU2189
 8217              	.LBB1970:
 8218              	.LBI1970:
 823:src/xeq.c     **** 	getRegister(y, regY_idx);
 8219              		.loc 1 823 6 view .LVU2190
 8220              	.LBB1971:
 824:src/xeq.c     **** }
 8221              		.loc 1 824 2 view .LVU2191
 8222              	.LBE1971:
 8223              	.LBE1970:
 875:src/xeq.c     **** 	getY(y);
 8224              		.loc 1 875 40 is_stmt 0 view .LVU2192
 8225 0000 10B5     		push	{r4, lr}
 8226              		.cfi_def_cfa_offset 8
 8227              		.cfi_offset 4, -8
 8228              		.cfi_offset 14, -4
 875:src/xeq.c     **** 	getY(y);
 8229              		.loc 1 875 40 view .LVU2193
 8230 0002 0C46     		mov	r4, r1
 8231              	.LBB1973:
 8232              	.LBB1972:
 824:src/xeq.c     **** }
 8233              		.loc 1 824 2 view .LVU2194
 8234 0004 6521     		movs	r1, #101
 8235              	.LVL567:
 824:src/xeq.c     **** }
 8236              		.loc 1 824 2 view .LVU2195
 8237 0006 FFF7FEFF 		bl	getRegister
 8238              	.LVL568:
 824:src/xeq.c     **** }
 8239              		.loc 1 824 2 view .LVU2196
 8240              	.LBE1972:
 8241              	.LBE1973:
 877:src/xeq.c     **** }
 8242              		.loc 1 877 2 is_stmt 1 view .LVU2197
 8243              	.LBB1974:
 8244              	.LBI1974:
 831:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8245              		.loc 1 831 13 view .LVU2198
 8246              	.LBB1975:
 832:src/xeq.c     **** }
 8247              		.loc 1 832 2 view .LVU2199
 8248 000a 2046     		mov	r0, r4
 8249 000c 6621     		movs	r1, #102
 8250              	.LBE1975:
 8251              	.LBE1974:
 878:src/xeq.c     **** 
 8252              		.loc 1 878 1 is_stmt 0 view .LVU2200
 8253 000e BDE81040 		pop	{r4, lr}
 8254              		.cfi_restore 14
 8255              		.cfi_restore 4
 8256              		.cfi_def_cfa_offset 0
 8257              	.LVL569:
 8258              	.LBB1977:
 8259              	.LBB1976:
ARM GAS  /tmp/ccQlyisH.s 			page 281


 832:src/xeq.c     **** }
 8260              		.loc 1 832 2 view .LVU2201
 8261 0012 FFF7FEBF 		b	getRegister
 8262              	.LVL570:
 832:src/xeq.c     **** }
 8263              		.loc 1 832 2 view .LVU2202
 8264              	.LBE1976:
 8265              	.LBE1977:
 8266              		.cfi_endproc
 8267              	.LFE69:
 8269 0016 00BF     		.section	.text.getXYZT,"ax",%progbits
 8270              		.align	1
 8271              		.p2align 2,,3
 8272              		.global	getXYZT
 8273              		.syntax unified
 8274              		.thumb
 8275              		.thumb_func
 8276              		.fpu fpv4-sp-d16
 8278              	getXYZT:
 8279              	.LVL571:
 8280              	.LFB68:
 870:src/xeq.c     **** 	getXYZ(x, y, z);
 8281              		.loc 1 870 70 is_stmt 1 view -0
 8282              		.cfi_startproc
 8283              		@ args = 0, pretend = 0, frame = 0
 8284              		@ frame_needed = 0, uses_anonymous_args = 0
 871:src/xeq.c     **** 	getT(t);
 8285              		.loc 1 871 2 view .LVU2204
 870:src/xeq.c     **** 	getXYZ(x, y, z);
 8286              		.loc 1 870 70 is_stmt 0 view .LVU2205
 8287 0000 10B5     		push	{r4, lr}
 8288              		.cfi_def_cfa_offset 8
 8289              		.cfi_offset 4, -8
 8290              		.cfi_offset 14, -4
 870:src/xeq.c     **** 	getXYZ(x, y, z);
 8291              		.loc 1 870 70 view .LVU2206
 8292 0002 1C46     		mov	r4, r3
 871:src/xeq.c     **** 	getT(t);
 8293              		.loc 1 871 2 view .LVU2207
 8294 0004 FFF7FEFF 		bl	getXYZ
 8295              	.LVL572:
 872:src/xeq.c     **** }
 8296              		.loc 1 872 2 is_stmt 1 view .LVU2208
 8297              	.LBB1978:
 8298              	.LBI1978:
 841:src/xeq.c     **** 	getRegister(t, regT_idx);
 8299              		.loc 1 841 13 view .LVU2209
 8300              	.LBB1979:
 842:src/xeq.c     **** }
 8301              		.loc 1 842 2 view .LVU2210
 8302 0008 2046     		mov	r0, r4
 8303 000a 6721     		movs	r1, #103
 8304              	.LBE1979:
 8305              	.LBE1978:
 873:src/xeq.c     **** 
 8306              		.loc 1 873 1 is_stmt 0 view .LVU2211
 8307 000c BDE81040 		pop	{r4, lr}
ARM GAS  /tmp/ccQlyisH.s 			page 282


 8308              		.cfi_restore 14
 8309              		.cfi_restore 4
 8310              		.cfi_def_cfa_offset 0
 8311              	.LVL573:
 8312              	.LBB1981:
 8313              	.LBB1980:
 842:src/xeq.c     **** }
 8314              		.loc 1 842 2 view .LVU2212
 8315 0010 FFF7FEBF 		b	getRegister
 8316              	.LVL574:
 842:src/xeq.c     **** }
 8317              		.loc 1 842 2 view .LVU2213
 8318              	.LBE1980:
 8319              	.LBE1981:
 8320              		.cfi_endproc
 8321              	.LFE68:
 8323              		.section	.text.storcl_op,"ax",%progbits
 8324              		.align	1
 8325              		.p2align 2,,3
 8326              		.syntax unified
 8327              		.thumb
 8328              		.thumb_func
 8329              		.fpu fpv4-sp-d16
 8331              	storcl_op:
 8332              	.LVL575:
 8333              	.LFB114:
1619:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8334              		.loc 1 1619 76 is_stmt 1 view -0
 8335              		.cfi_startproc
 8336              		@ args = 0, pretend = 0, frame = 72
 8337              		@ frame_needed = 0, uses_anonymous_args = 0
1620:src/xeq.c     **** 
 8338              		.loc 1 1620 2 view .LVU2215
1619:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8339              		.loc 1 1619 76 is_stmt 0 view .LVU2216
 8340 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 8341              		.cfi_def_cfa_offset 20
 8342              		.cfi_offset 4, -20
 8343              		.cfi_offset 5, -16
 8344              		.cfi_offset 6, -12
 8345              		.cfi_offset 7, -8
 8346              		.cfi_offset 14, -4
 8347 0002 93B0     		sub	sp, sp, #76
 8348              		.cfi_def_cfa_offset 96
 8349              	.LVL576:
1622:src/xeq.c     **** 	getRegister(y, index);
 8350              		.loc 1 1622 2 is_stmt 1 view .LVU2217
 8351              	.LBB1982:
 8352              	.LBI1982:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8353              		.loc 1 815 12 view .LVU2218
 8354              	.LBB1983:
 816:src/xeq.c     **** }
 8355              		.loc 1 816 2 view .LVU2219
 8356              	.LBE1983:
 8357              	.LBE1982:
1619:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
ARM GAS  /tmp/ccQlyisH.s 			page 283


 8358              		.loc 1 1619 76 is_stmt 0 view .LVU2220
 8359 0004 0E46     		mov	r6, r1
 8360 0006 0446     		mov	r4, r0
 8361              	.LBB1986:
 8362              	.LBB1984:
 816:src/xeq.c     **** }
 8363              		.loc 1 816 9 view .LVU2221
 8364 0008 6421     		movs	r1, #100
 8365              	.LVL577:
 816:src/xeq.c     **** }
 8366              		.loc 1 816 9 view .LVU2222
 8367 000a 6846     		mov	r0, sp
 8368              	.LVL578:
 816:src/xeq.c     **** }
 8369              		.loc 1 816 9 view .LVU2223
 8370              	.LBE1984:
 8371              	.LBE1986:
1619:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8372              		.loc 1 1619 76 view .LVU2224
 8373 000c 1D46     		mov	r5, r3
 8374 000e 1746     		mov	r7, r2
 8375              	.LBB1987:
 8376              	.LBB1985:
 816:src/xeq.c     **** }
 8377              		.loc 1 816 9 view .LVU2225
 8378 0010 FFF7FEFF 		bl	getRegister
 8379              	.LVL579:
 816:src/xeq.c     **** }
 8380              		.loc 1 816 9 view .LVU2226
 8381              	.LBE1985:
 8382              	.LBE1987:
1623:src/xeq.c     **** 	if (rev) {
 8383              		.loc 1 1623 2 is_stmt 1 view .LVU2227
 8384 0014 3146     		mov	r1, r6
 8385 0016 09A8     		add	r0, sp, #36
 8386              	.LVL580:
1623:src/xeq.c     **** 	if (rev) {
 8387              		.loc 1 1623 2 is_stmt 0 view .LVU2228
 8388 0018 FFF7FEFF 		bl	getRegister
 8389              	.LVL581:
1624:src/xeq.c     **** 		x = y;
 8390              		.loc 1 1624 2 is_stmt 1 view .LVU2229
1624:src/xeq.c     **** 		x = y;
 8391              		.loc 1 1624 5 is_stmt 0 view .LVU2230
 8392 001c 4DB1     		cbz	r5, .L650
1626:src/xeq.c     **** 	}
 8393              		.loc 1 1626 5 view .LVU2231
 8394 001e 6946     		mov	r1, sp
1625:src/xeq.c     **** 		y = &a;
 8395              		.loc 1 1625 5 view .LVU2232
 8396 0020 09AA     		add	r2, sp, #36
 8397              	.LVL582:
 8398              	.L641:
1629:src/xeq.c     **** 	case 1:
 8399              		.loc 1 1629 2 is_stmt 1 view .LVU2233
 8400 0022 601E     		subs	r0, r4, #1
 8401 0024 0528     		cmp	r0, #5
ARM GAS  /tmp/ccQlyisH.s 			page 284


 8402 0026 2BD8     		bhi	.L651
 8403 0028 DFE800F0 		tbb	[pc, r0]
 8404              	.L644:
 8405 002c 0C       		.byte	(.L649-.L644)/2
 8406 002d 12       		.byte	(.L648-.L644)/2
 8407 002e 18       		.byte	(.L647-.L644)/2
 8408 002f 1E       		.byte	(.L646-.L644)/2
 8409 0030 24       		.byte	(.L645-.L644)/2
 8410 0031 06       		.byte	(.L643-.L644)/2
 8411              	.LVL583:
 8412              		.p2align 1
 8413              	.L650:
1620:src/xeq.c     **** 
 8414              		.loc 1 1620 28 is_stmt 0 view .LVU2234
 8415 0032 09A9     		add	r1, sp, #36
 8416              	.LVL584:
1620:src/xeq.c     **** 
 8417              		.loc 1 1620 19 view .LVU2235
 8418 0034 6A46     		mov	r2, sp
 8419 0036 F4E7     		b	.L641
 8420              	.LVL585:
 8421              	.L643:
1646:src/xeq.c     **** 		break;
 8422              		.loc 1 1646 3 is_stmt 1 view .LVU2236
 8423 0038 3846     		mov	r0, r7
 8424 003a FFF7FEFF 		bl	dn_max
 8425              	.LVL586:
1647:src/xeq.c     **** 	default:
 8426              		.loc 1 1647 3 view .LVU2237
1651:src/xeq.c     **** }
 8427              		.loc 1 1651 9 is_stmt 0 view .LVU2238
 8428 003e 0020     		movs	r0, #0
 8429              	.L640:
1652:src/xeq.c     **** 
 8430              		.loc 1 1652 1 view .LVU2239
 8431 0040 13B0     		add	sp, sp, #76
 8432              		.cfi_remember_state
 8433              		.cfi_def_cfa_offset 20
 8434              		@ sp needed
 8435 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 8436              	.LVL587:
 8437              	.L649:
 8438              		.cfi_restore_state
1631:src/xeq.c     **** 		break;
 8439              		.loc 1 1631 3 is_stmt 1 view .LVU2240
 8440 0044 3846     		mov	r0, r7
 8441 0046 FFF7FEFF 		bl	dn_add
 8442              	.LVL588:
1632:src/xeq.c     **** 	case 2:
 8443              		.loc 1 1632 3 view .LVU2241
1651:src/xeq.c     **** }
 8444              		.loc 1 1651 9 is_stmt 0 view .LVU2242
 8445 004a 0020     		movs	r0, #0
1652:src/xeq.c     **** 
 8446              		.loc 1 1652 1 view .LVU2243
 8447 004c 13B0     		add	sp, sp, #76
 8448              		.cfi_remember_state
ARM GAS  /tmp/ccQlyisH.s 			page 285


 8449              		.cfi_def_cfa_offset 20
 8450              		@ sp needed
 8451 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 8452              	.LVL589:
 8453              	.L648:
 8454              		.cfi_restore_state
1634:src/xeq.c     **** 		break;
 8455              		.loc 1 1634 3 is_stmt 1 view .LVU2244
 8456 0050 3846     		mov	r0, r7
 8457 0052 FFF7FEFF 		bl	dn_subtract
 8458              	.LVL590:
1635:src/xeq.c     **** 	case 3:
 8459              		.loc 1 1635 3 view .LVU2245
1651:src/xeq.c     **** }
 8460              		.loc 1 1651 9 is_stmt 0 view .LVU2246
 8461 0056 0020     		movs	r0, #0
1652:src/xeq.c     **** 
 8462              		.loc 1 1652 1 view .LVU2247
 8463 0058 13B0     		add	sp, sp, #76
 8464              		.cfi_remember_state
 8465              		.cfi_def_cfa_offset 20
 8466              		@ sp needed
 8467 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 8468              	.LVL591:
 8469              	.L647:
 8470              		.cfi_restore_state
1637:src/xeq.c     **** 		break;
 8471              		.loc 1 1637 3 is_stmt 1 view .LVU2248
 8472 005c 3846     		mov	r0, r7
 8473 005e FFF7FEFF 		bl	dn_multiply
 8474              	.LVL592:
1638:src/xeq.c     **** 	case 4:
 8475              		.loc 1 1638 3 view .LVU2249
1651:src/xeq.c     **** }
 8476              		.loc 1 1651 9 is_stmt 0 view .LVU2250
 8477 0062 0020     		movs	r0, #0
1652:src/xeq.c     **** 
 8478              		.loc 1 1652 1 view .LVU2251
 8479 0064 13B0     		add	sp, sp, #76
 8480              		.cfi_remember_state
 8481              		.cfi_def_cfa_offset 20
 8482              		@ sp needed
 8483 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 8484              	.LVL593:
 8485              	.L646:
 8486              		.cfi_restore_state
1640:src/xeq.c     **** 		break;
 8487              		.loc 1 1640 3 is_stmt 1 view .LVU2252
 8488 0068 3846     		mov	r0, r7
 8489 006a FFF7FEFF 		bl	dn_divide
 8490              	.LVL594:
1641:src/xeq.c     **** 	case 5:
 8491              		.loc 1 1641 3 view .LVU2253
1651:src/xeq.c     **** }
 8492              		.loc 1 1651 9 is_stmt 0 view .LVU2254
 8493 006e 0020     		movs	r0, #0
1652:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 286


 8494              		.loc 1 1652 1 view .LVU2255
 8495 0070 13B0     		add	sp, sp, #76
 8496              		.cfi_remember_state
 8497              		.cfi_def_cfa_offset 20
 8498              		@ sp needed
 8499 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 8500              	.LVL595:
 8501              	.L645:
 8502              		.cfi_restore_state
1643:src/xeq.c     **** 		break;
 8503              		.loc 1 1643 3 is_stmt 1 view .LVU2256
 8504 0074 3846     		mov	r0, r7
 8505 0076 FFF7FEFF 		bl	dn_min
 8506              	.LVL596:
1644:src/xeq.c     **** 	case 6:
 8507              		.loc 1 1644 3 view .LVU2257
1651:src/xeq.c     **** }
 8508              		.loc 1 1651 9 is_stmt 0 view .LVU2258
 8509 007a 0020     		movs	r0, #0
1652:src/xeq.c     **** 
 8510              		.loc 1 1652 1 view .LVU2259
 8511 007c 13B0     		add	sp, sp, #76
 8512              		.cfi_def_cfa_offset 20
 8513              		@ sp needed
 8514 007e F0BD     		pop	{r4, r5, r6, r7, pc}
 8515              	.LVL597:
 8516              	.L651:
1651:src/xeq.c     **** }
 8517              		.loc 1 1651 9 view .LVU2260
 8518 0080 0120     		movs	r0, #1
 8519 0082 DDE7     		b	.L640
 8520              		.cfi_endproc
 8521              	.LFE114:
 8523              		.section	.text.storcl_cop,"ax",%progbits
 8524              		.align	1
 8525              		.p2align 2,,3
 8526              		.syntax unified
 8527              		.thumb
 8528              		.thumb_func
 8529              		.fpu fpv4-sp-d16
 8531              	storcl_cop:
 8532              	.LVL598:
 8533              	.LFB119:
1753:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8534              		.loc 1 1753 93 is_stmt 1 view -0
 8535              		.cfi_startproc
 8536              		@ args = 4, pretend = 0, frame = 144
 8537              		@ frame_needed = 0, uses_anonymous_args = 0
1754:src/xeq.c     **** 
 8538              		.loc 1 1754 2 view .LVU2262
1753:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8539              		.loc 1 1753 93 is_stmt 0 view .LVU2263
 8540 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8541              		.cfi_def_cfa_offset 24
 8542              		.cfi_offset 4, -24
 8543              		.cfi_offset 5, -20
 8544              		.cfi_offset 6, -16
ARM GAS  /tmp/ccQlyisH.s 			page 287


 8545              		.cfi_offset 7, -12
 8546              		.cfi_offset 8, -8
 8547              		.cfi_offset 14, -4
 8548 0004 A6B0     		sub	sp, sp, #152
 8549              		.cfi_def_cfa_offset 176
 8550              	.LVL599:
1756:src/xeq.c     **** 	getRegister(y + 0, index);
 8551              		.loc 1 1756 2 is_stmt 1 view .LVU2264
 8552              	.LBB1988:
 8553              	.LBI1988:
 845:src/xeq.c     **** 	getX(x);
 8554              		.loc 1 845 6 view .LVU2265
 8555              	.LBE1988:
 846:src/xeq.c     **** 	getY(y);
 8556              		.loc 1 846 2 view .LVU2266
 8557              	.LBB1997:
 8558              	.LBB1989:
 8559              	.LBI1989:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8560              		.loc 1 815 12 view .LVU2267
 8561              	.LBB1990:
 816:src/xeq.c     **** }
 8562              		.loc 1 816 2 view .LVU2268
 8563              	.LBE1990:
 8564              	.LBE1989:
 8565              	.LBE1997:
1753:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8566              		.loc 1 1753 93 is_stmt 0 view .LVU2269
 8567 0006 0D46     		mov	r5, r1
 8568 0008 0446     		mov	r4, r0
 8569              	.LBB1998:
 8570              	.LBB1993:
 8571              	.LBB1991:
 816:src/xeq.c     **** }
 8572              		.loc 1 816 9 view .LVU2270
 8573 000a 6421     		movs	r1, #100
 8574              	.LVL600:
 816:src/xeq.c     **** }
 8575              		.loc 1 816 9 view .LVU2271
 8576 000c 02A8     		add	r0, sp, #8
 8577              	.LVL601:
 816:src/xeq.c     **** }
 8578              		.loc 1 816 9 view .LVU2272
 8579              	.LBE1991:
 8580              	.LBE1993:
 8581              	.LBE1998:
1753:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8582              		.loc 1 1753 93 view .LVU2273
 8583 000e 9046     		mov	r8, r2
 8584 0010 1E46     		mov	r6, r3
 8585 0012 2C9F     		ldr	r7, [sp, #176]
 8586              	.LBB1999:
 8587              	.LBB1994:
 8588              	.LBB1992:
 816:src/xeq.c     **** }
 8589              		.loc 1 816 9 view .LVU2274
 8590 0014 FFF7FEFF 		bl	getRegister
ARM GAS  /tmp/ccQlyisH.s 			page 288


 8591              	.LVL602:
 816:src/xeq.c     **** }
 8592              		.loc 1 816 9 view .LVU2275
 8593              	.LBE1992:
 8594              	.LBE1994:
 8595              	.LBE1999:
 847:src/xeq.c     **** }
 8596              		.loc 1 847 2 is_stmt 1 view .LVU2276
 8597              	.LBB2000:
 8598              	.LBB1995:
 8599              	.LBI1995:
 823:src/xeq.c     **** 	getRegister(y, regY_idx);
 8600              		.loc 1 823 6 view .LVU2277
 8601              	.LBB1996:
 824:src/xeq.c     **** }
 8602              		.loc 1 824 2 view .LVU2278
 8603 0018 6521     		movs	r1, #101
 8604 001a 0BA8     		add	r0, sp, #44
 8605              	.LVL603:
 824:src/xeq.c     **** }
 8606              		.loc 1 824 2 is_stmt 0 view .LVU2279
 8607 001c FFF7FEFF 		bl	getRegister
 8608              	.LVL604:
 824:src/xeq.c     **** }
 8609              		.loc 1 824 2 view .LVU2280
 8610              	.LBE1996:
 8611              	.LBE1995:
 8612              	.LBE2000:
1757:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8613              		.loc 1 1757 2 is_stmt 1 view .LVU2281
 8614 0020 2946     		mov	r1, r5
 8615 0022 14A8     		add	r0, sp, #80
 8616              	.LVL605:
1757:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8617              		.loc 1 1757 2 is_stmt 0 view .LVU2282
 8618 0024 FFF7FEFF 		bl	getRegister
 8619              	.LVL606:
1758:src/xeq.c     **** 
 8620              		.loc 1 1758 2 is_stmt 1 view .LVU2283
 8621 0028 691C     		adds	r1, r5, #1
 8622 002a 1DA8     		add	r0, sp, #116
 8623 002c FFF7FEFF 		bl	getRegister
 8624              	.LVL607:
1760:src/xeq.c     **** 		x = y;
 8625              		.loc 1 1760 2 view .LVU2284
1760:src/xeq.c     **** 		x = y;
 8626              		.loc 1 1760 5 is_stmt 0 view .LVU2285
 8627 0030 47B1     		cbz	r7, .L661
1762:src/xeq.c     **** 	}
 8628              		.loc 1 1762 5 view .LVU2286
 8629 0032 02AA     		add	r2, sp, #8
 8630              	.LVL608:
1761:src/xeq.c     **** 		y = a;
 8631              		.loc 1 1761 5 view .LVU2287
 8632 0034 14A9     		add	r1, sp, #80
 8633              	.LVL609:
 8634              	.L654:
ARM GAS  /tmp/ccQlyisH.s 			page 289


1765:src/xeq.c     **** 	case 1:
 8635              		.loc 1 1765 2 is_stmt 1 view .LVU2288
 8636 0036 601E     		subs	r0, r4, #1
 8637 0038 0328     		cmp	r0, #3
 8638 003a 3ED8     		bhi	.L662
 8639 003c DFE800F0 		tbb	[pc, r0]
 8640              	.L657:
 8641 0040 13       		.byte	(.L660-.L657)/2
 8642 0041 21       		.byte	(.L659-.L657)/2
 8643 0042 2F       		.byte	(.L658-.L657)/2
 8644 0043 05       		.byte	(.L656-.L657)/2
 8645              	.LVL610:
 8646              		.p2align 1
 8647              	.L661:
1754:src/xeq.c     **** 
 8648              		.loc 1 1754 33 is_stmt 0 view .LVU2289
 8649 0044 14AA     		add	r2, sp, #80
 8650              	.LVL611:
1754:src/xeq.c     **** 
 8651              		.loc 1 1754 25 view .LVU2290
 8652 0046 02A9     		add	r1, sp, #8
 8653              	.LVL612:
1754:src/xeq.c     **** 
 8654              		.loc 1 1754 25 view .LVU2291
 8655 0048 F5E7     		b	.L654
 8656              	.L656:
1776:src/xeq.c     **** 		break;
 8657              		.loc 1 1776 3 is_stmt 1 view .LVU2292
1776:src/xeq.c     **** 		break;
 8658              		.loc 1 1776 46 is_stmt 0 view .LVU2293
 8659 004a 01F12403 		add	r3, r1, #36
1776:src/xeq.c     **** 		break;
 8660              		.loc 1 1776 3 view .LVU2294
 8661 004e CDE90013 		strd	r1, r3, [sp]
 8662 0052 4046     		mov	r0, r8
 8663 0054 3146     		mov	r1, r6
 8664              	.LVL613:
1776:src/xeq.c     **** 		break;
 8665              		.loc 1 1776 3 view .LVU2295
 8666 0056 02F12403 		add	r3, r2, #36
 8667 005a FFF7FEFF 		bl	cmplxDivide
 8668              	.LVL614:
1777:src/xeq.c     **** 	default:
 8669              		.loc 1 1777 3 is_stmt 1 view .LVU2296
1781:src/xeq.c     **** }
 8670              		.loc 1 1781 9 is_stmt 0 view .LVU2297
 8671 005e 0020     		movs	r0, #0
 8672              	.L653:
1782:src/xeq.c     **** 
 8673              		.loc 1 1782 1 view .LVU2298
 8674 0060 26B0     		add	sp, sp, #152
 8675              		.cfi_remember_state
 8676              		.cfi_def_cfa_offset 24
 8677              		@ sp needed
 8678 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8679              	.LVL615:
 8680              	.L660:
ARM GAS  /tmp/ccQlyisH.s 			page 290


 8681              		.cfi_restore_state
1767:src/xeq.c     **** 		break;
 8682              		.loc 1 1767 3 is_stmt 1 view .LVU2299
1767:src/xeq.c     **** 		break;
 8683              		.loc 1 1767 43 is_stmt 0 view .LVU2300
 8684 0066 01F12403 		add	r3, r1, #36
1767:src/xeq.c     **** 		break;
 8685              		.loc 1 1767 3 view .LVU2301
 8686 006a CDE90013 		strd	r1, r3, [sp]
 8687 006e 4046     		mov	r0, r8
 8688 0070 3146     		mov	r1, r6
 8689              	.LVL616:
1767:src/xeq.c     **** 		break;
 8690              		.loc 1 1767 3 view .LVU2302
 8691 0072 02F12403 		add	r3, r2, #36
 8692 0076 FFF7FEFF 		bl	cmplxAdd
 8693              	.LVL617:
1768:src/xeq.c     **** 	case 2:
 8694              		.loc 1 1768 3 is_stmt 1 view .LVU2303
1781:src/xeq.c     **** }
 8695              		.loc 1 1781 9 is_stmt 0 view .LVU2304
 8696 007a 0020     		movs	r0, #0
1782:src/xeq.c     **** 
 8697              		.loc 1 1782 1 view .LVU2305
 8698 007c 26B0     		add	sp, sp, #152
 8699              		.cfi_remember_state
 8700              		.cfi_def_cfa_offset 24
 8701              		@ sp needed
 8702 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8703              	.LVL618:
 8704              	.L659:
 8705              		.cfi_restore_state
1770:src/xeq.c     **** 		break;
 8706              		.loc 1 1770 3 is_stmt 1 view .LVU2306
1770:src/xeq.c     **** 		break;
 8707              		.loc 1 1770 48 is_stmt 0 view .LVU2307
 8708 0082 01F12403 		add	r3, r1, #36
1770:src/xeq.c     **** 		break;
 8709              		.loc 1 1770 3 view .LVU2308
 8710 0086 CDE90013 		strd	r1, r3, [sp]
 8711 008a 4046     		mov	r0, r8
 8712 008c 3146     		mov	r1, r6
 8713              	.LVL619:
1770:src/xeq.c     **** 		break;
 8714              		.loc 1 1770 3 view .LVU2309
 8715 008e 02F12403 		add	r3, r2, #36
 8716 0092 FFF7FEFF 		bl	cmplxSubtract
 8717              	.LVL620:
1771:src/xeq.c     **** 	case 3:
 8718              		.loc 1 1771 3 is_stmt 1 view .LVU2310
1781:src/xeq.c     **** }
 8719              		.loc 1 1781 9 is_stmt 0 view .LVU2311
 8720 0096 0020     		movs	r0, #0
1782:src/xeq.c     **** 
 8721              		.loc 1 1782 1 view .LVU2312
 8722 0098 26B0     		add	sp, sp, #152
 8723              		.cfi_remember_state
ARM GAS  /tmp/ccQlyisH.s 			page 291


 8724              		.cfi_def_cfa_offset 24
 8725              		@ sp needed
 8726 009a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8727              	.LVL621:
 8728              	.L658:
 8729              		.cfi_restore_state
1773:src/xeq.c     **** 		break;
 8730              		.loc 1 1773 3 is_stmt 1 view .LVU2313
1773:src/xeq.c     **** 		break;
 8731              		.loc 1 1773 48 is_stmt 0 view .LVU2314
 8732 009e 01F12403 		add	r3, r1, #36
1773:src/xeq.c     **** 		break;
 8733              		.loc 1 1773 3 view .LVU2315
 8734 00a2 CDE90013 		strd	r1, r3, [sp]
 8735 00a6 4046     		mov	r0, r8
 8736 00a8 3146     		mov	r1, r6
 8737              	.LVL622:
1773:src/xeq.c     **** 		break;
 8738              		.loc 1 1773 3 view .LVU2316
 8739 00aa 02F12403 		add	r3, r2, #36
 8740 00ae FFF7FEFF 		bl	cmplxMultiply
 8741              	.LVL623:
1774:src/xeq.c     **** 	case 4:
 8742              		.loc 1 1774 3 is_stmt 1 view .LVU2317
1781:src/xeq.c     **** }
 8743              		.loc 1 1781 9 is_stmt 0 view .LVU2318
 8744 00b2 0020     		movs	r0, #0
1782:src/xeq.c     **** 
 8745              		.loc 1 1782 1 view .LVU2319
 8746 00b4 26B0     		add	sp, sp, #152
 8747              		.cfi_def_cfa_offset 24
 8748              		@ sp needed
 8749 00b6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8750              	.LVL624:
 8751              	.L662:
1781:src/xeq.c     **** }
 8752              		.loc 1 1781 9 view .LVU2320
 8753 00ba 0120     		movs	r0, #1
 8754 00bc D0E7     		b	.L653
 8755              		.cfi_endproc
 8756              	.LFE119:
 8758 00be 00BF     		.section	.text.cpx_enter,"ax",%progbits
 8759              		.align	1
 8760              		.p2align 2,,3
 8761              		.global	cpx_enter
 8762              		.syntax unified
 8763              		.thumb
 8764              		.thumb_func
 8765              		.fpu fpv4-sp-d16
 8767              	cpx_enter:
 8768              	.LVL625:
 8769              	.LFB74:
 912:src/xeq.c     **** #ifdef ENTRY_RPN
 8770              		.loc 1 912 31 is_stmt 1 view -0
 8771              		.cfi_startproc
 8772              		@ args = 0, pretend = 0, frame = 0
 8773              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQlyisH.s 			page 292


 922:src/xeq.c     **** 	lift();
 8774              		.loc 1 922 2 view .LVU2322
 912:src/xeq.c     **** #ifdef ENTRY_RPN
 8775              		.loc 1 912 31 is_stmt 0 view .LVU2323
 8776 0000 10B5     		push	{r4, lr}
 8777              		.cfi_def_cfa_offset 8
 8778              		.cfi_offset 4, -8
 8779              		.cfi_offset 14, -4
 922:src/xeq.c     **** 	lift();
 8780              		.loc 1 922 2 view .LVU2324
 8781 0002 FFF7FEFF 		bl	lift
 8782              	.LVL626:
 923:src/xeq.c     **** 	copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 8783              		.loc 1 923 2 is_stmt 1 view .LVU2325
 8784 0006 FFF7FEFF 		bl	lift
 8785              	.LVL627:
 924:src/xeq.c     **** 	set_was_complex();
 8786              		.loc 1 924 2 view .LVU2326
 8787 000a 6520     		movs	r0, #101
 8788 000c FFF7FEFF 		bl	get_reg_n
 8789              	.LVL628:
 8790 0010 0446     		mov	r4, r0
 924:src/xeq.c     **** 	set_was_complex();
 8791              		.loc 1 924 31 is_stmt 0 view .LVU2327
 8792 0012 6720     		movs	r0, #103
 8793 0014 FFF7FEFF 		bl	get_reg_n
 8794              	.LVL629:
 8795              	.LBB2001:
 8796              	.LBB2002:
 8797              	.LBB2003:
 8798              	.LBB2004:
1088:src/xeq.c     **** }
 8799              		.loc 1 1088 24 view .LVU2328
 8800 0018 0B4B     		ldr	r3, .L668
 8801 001a 1B68     		ldr	r3, [r3]
 8802 001c B3F8E827 		ldrh	r2, [r3, #2024]
 8803 0020 44F20103 		movw	r3, #16385
 8804              	.LBE2004:
 8805              	.LBE2003:
 718:src/xeq.c     **** }
 8806              		.loc 1 718 2 view .LVU2329
 8807 0024 1340     		ands	r3, r3, r2
 8808 0026 B3F5804F 		cmp	r3, #16384
 8809              	.LBE2002:
 8810              	.LBE2001:
 924:src/xeq.c     **** 	set_was_complex();
 8811              		.loc 1 924 31 view .LVU2330
 8812 002a 0146     		mov	r1, r0
 8813              	.LVL630:
 8814              	.LBB2008:
 8815              	.LBI2001:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 8816              		.loc 1 717 6 is_stmt 1 view .LVU2331
 8817              	.LBB2007:
 718:src/xeq.c     **** }
 8818              		.loc 1 718 2 view .LVU2332
 8819              	.LBB2006:
ARM GAS  /tmp/ccQlyisH.s 			page 293


 8820              	.LBI2003:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 8821              		.loc 1 1087 5 view .LVU2333
 8822              	.LBB2005:
1088:src/xeq.c     **** }
 8823              		.loc 1 1088 2 view .LVU2334
 8824              	.LBE2005:
 8825              	.LBE2006:
 718:src/xeq.c     **** }
 8826              		.loc 1 718 2 is_stmt 0 view .LVU2335
 8827 002c 0CBF     		ite	eq
 8828 002e 1022     		moveq	r2, #16
 8829 0030 0822     		movne	r2, #8
 8830 0032 2046     		mov	r0, r4
 8831              	.LVL631:
 718:src/xeq.c     **** }
 8832              		.loc 1 718 2 view .LVU2336
 8833 0034 FFF7FEFF 		bl	xcopy
 8834              	.LVL632:
 718:src/xeq.c     **** }
 8835              		.loc 1 718 2 view .LVU2337
 8836              	.LBE2007:
 8837              	.LBE2008:
 925:src/xeq.c     **** #endif
 8838              		.loc 1 925 2 is_stmt 1 view .LVU2338
 8839              	.LBB2009:
 8840              	.LBI2009:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 8841              		.loc 1 530 13 view .LVU2339
 8842              	.LBB2010:
 531:src/xeq.c     **** }
 8843              		.loc 1 531 2 view .LVU2340
 531:src/xeq.c     **** }
 8844              		.loc 1 531 20 is_stmt 0 view .LVU2341
 8845 0038 044B     		ldr	r3, .L668+4
 8846 003a 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 8847 003c 0121     		movs	r1, #1
 8848 003e 61F38712 		bfi	r2, r1, #6, #2
 8849 0042 1A75     		strb	r2, [r3, #20]
 8850              	.LBE2010:
 8851              	.LBE2009:
 927:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 8852              		.loc 1 927 1 view .LVU2342
 8853 0044 10BD     		pop	{r4, pc}
 8854              	.L669:
 8855 0046 00BF     		.align	2
 8856              	.L668:
 8857 0048 00000000 		.word	main_ram
 8858 004c 00000000 		.word	StateWhileOn
 8859              		.cfi_endproc
 8860              	.LFE74:
 8862              		.section	.text.cpx_fill,"ax",%progbits
 8863              		.align	1
 8864              		.p2align 2,,3
 8865              		.global	cpx_fill
 8866              		.syntax unified
 8867              		.thumb
ARM GAS  /tmp/ccQlyisH.s 			page 294


 8868              		.thumb_func
 8869              		.fpu fpv4-sp-d16
 8871              	cpx_fill:
 8872              	.LVL633:
 8873              	.LFB78:
1055:src/xeq.c     **** 	const int n = stack_size();
 8874              		.loc 1 1055 30 is_stmt 1 view -0
 8875              		.cfi_startproc
 8876              		@ args = 0, pretend = 0, frame = 0
 8877              		@ frame_needed = 0, uses_anonymous_args = 0
1056:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
 8878              		.loc 1 1056 2 view .LVU2344
 8879              	.LBB2011:
 8880              	.LBI2011:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 8881              		.loc 1 703 5 view .LVU2345
 8882              	.LBB2012:
 704:src/xeq.c     **** 		return 4;
 8883              		.loc 1 704 2 view .LVU2346
 8884              	.LBE2012:
 8885              	.LBE2011:
1055:src/xeq.c     **** 	const int n = stack_size();
 8886              		.loc 1 1055 30 is_stmt 0 view .LVU2347
 8887 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 8888              		.cfi_def_cfa_offset 32
 8889              		.cfi_offset 3, -32
 8890              		.cfi_offset 4, -28
 8891              		.cfi_offset 5, -24
 8892              		.cfi_offset 6, -20
 8893              		.cfi_offset 7, -16
 8894              		.cfi_offset 8, -12
 8895              		.cfi_offset 9, -8
 8896              		.cfi_offset 14, -4
 8897              	.LBB2017:
 8898              	.LBB2015:
 704:src/xeq.c     **** 		return 4;
 8899              		.loc 1 704 8 view .LVU2348
 8900 0004 1F4D     		ldr	r5, .L683
 8901 0006 2B68     		ldr	r3, [r5]
 704:src/xeq.c     **** 		return 4;
 8902              		.loc 1 704 6 view .LVU2349
 8903 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 8904              		.loc 1 704 5 view .LVU2350
 8905 000c 1207     		lsls	r2, r2, #28
 8906 000e 37D5     		bpl	.L675
 8907              	.LBB2013:
 8908              	.LBI2013:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 8909              		.loc 1 182 5 is_stmt 1 view .LVU2351
 8910              	.LBB2014:
 183:src/xeq.c     **** }
 8911              		.loc 1 183 2 view .LVU2352
 183:src/xeq.c     **** }
 8912              		.loc 1 183 9 is_stmt 0 view .LVU2353
 8913 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 8914              	.LBE2014:
ARM GAS  /tmp/ccQlyisH.s 			page 295


 8915              	.LBE2013:
 704:src/xeq.c     **** 		return 4;
 8916              		.loc 1 704 27 view .LVU2354
 8917 0014 9B0B     		lsrs	r3, r3, #14
 8918 0016 032B     		cmp	r3, #3
 8919 0018 2AD0     		beq	.L682
 706:src/xeq.c     **** }
 8920              		.loc 1 706 9 view .LVU2355
 8921 001a 0827     		movs	r7, #8
 8922              	.L671:
 8923              	.LVL634:
 706:src/xeq.c     **** }
 8924              		.loc 1 706 9 view .LVU2356
 8925              	.LBE2015:
 8926              	.LBE2017:
1057:src/xeq.c     **** 	int i;
 8927              		.loc 1 1057 2 is_stmt 1 view .LVU2357
1057:src/xeq.c     **** 	int i;
 8928              		.loc 1 1057 22 is_stmt 0 view .LVU2358
 8929 001c 6520     		movs	r0, #101
 8930              	.LVL635:
1057:src/xeq.c     **** 	int i;
 8931              		.loc 1 1057 22 view .LVU2359
 8932 001e FFF7FEFF 		bl	get_reg_n
 8933              	.LVL636:
1061:src/xeq.c     **** 	set_was_complex();
 8934              		.loc 1 1061 3 view .LVU2360
 8935 0022 DFF86C90 		ldr	r9, .L683+12
1057:src/xeq.c     **** 	int i;
 8936              		.loc 1 1057 22 view .LVU2361
 8937 0026 8046     		mov	r8, r0
 8938              	.LVL637:
1058:src/xeq.c     **** 
 8939              		.loc 1 1058 2 is_stmt 1 view .LVU2362
1060:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8940              		.loc 1 1060 2 view .LVU2363
1060:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8941              		.loc 1 1060 12 view .LVU2364
1060:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8942              		.loc 1 1060 8 is_stmt 0 view .LVU2365
 8943 0028 0224     		movs	r4, #2
 8944              	.LBB2018:
 8945              	.LBB2019:
 8946              	.LBB2020:
 8947              	.LBB2021:
1088:src/xeq.c     **** }
 8948              		.loc 1 1088 24 view .LVU2366
 8949 002a 44F20106 		movw	r6, #16385
 8950              	.LVL638:
 8951              	.L674:
1088:src/xeq.c     **** }
 8952              		.loc 1 1088 24 view .LVU2367
 8953              	.LBE2021:
 8954              	.LBE2020:
 8955              	.LBE2019:
 8956              	.LBE2018:
1061:src/xeq.c     **** 	set_was_complex();
ARM GAS  /tmp/ccQlyisH.s 			page 296


 8957              		.loc 1 1061 3 is_stmt 1 view .LVU2368
 8958              	.LBB2032:
 8959              	.LBI2032:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 8960              		.loc 1 709 11 view .LVU2369
 8961              	.LBB2033:
 710:src/xeq.c     **** }
 8962              		.loc 1 710 2 view .LVU2370
 710:src/xeq.c     **** }
 8963              		.loc 1 710 9 is_stmt 0 view .LVU2371
 8964 002e 04F16400 		add	r0, r4, #100
 8965 0032 FFF7FEFF 		bl	get_reg_n
 8966              	.LVL639:
 710:src/xeq.c     **** }
 8967              		.loc 1 710 9 view .LVU2372
 8968              	.LBE2033:
 8969              	.LBE2032:
1061:src/xeq.c     **** 	set_was_complex();
 8970              		.loc 1 1061 3 view .LVU2373
 8971 0036 E307     		lsls	r3, r4, #31
 8972              	.LBB2034:
 8973              	.LBB2028:
 8974              	.LBB2025:
 8975              	.LBB2022:
1088:src/xeq.c     **** }
 8976              		.loc 1 1088 24 view .LVU2374
 8977 0038 2B68     		ldr	r3, [r5]
 8978              	.LBE2022:
 8979              	.LBE2025:
 8980              	.LBE2028:
 8981              	.LBE2034:
1061:src/xeq.c     **** 	set_was_complex();
 8982              		.loc 1 1061 3 view .LVU2375
 8983 003a 58BF     		it	pl
 8984 003c D9F80010 		ldrpl	r1, [r9]
 8985              	.LBB2035:
 8986              	.LBB2029:
 8987              	.LBB2026:
 8988              	.LBB2023:
1088:src/xeq.c     **** }
 8989              		.loc 1 1088 24 view .LVU2376
 8990 0040 B3F8E837 		ldrh	r3, [r3, #2024]
 8991              	.LBE2023:
 8992              	.LBE2026:
 718:src/xeq.c     **** }
 8993              		.loc 1 718 2 view .LVU2377
 8994 0044 03EA0603 		and	r3, r3, r6
 8995              	.LBE2029:
 8996              	.LBE2035:
1061:src/xeq.c     **** 	set_was_complex();
 8997              		.loc 1 1061 3 view .LVU2378
 8998 0048 48BF     		it	mi
 8999 004a 4146     		movmi	r1, r8
 9000              	.LVL640:
 9001              	.LBB2036:
 9002              	.LBI2018:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
ARM GAS  /tmp/ccQlyisH.s 			page 297


 9003              		.loc 1 717 6 is_stmt 1 view .LVU2379
 9004              	.LBB2030:
 718:src/xeq.c     **** }
 9005              		.loc 1 718 2 view .LVU2380
 9006              	.LBB2027:
 9007              	.LBI2020:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 9008              		.loc 1 1087 5 view .LVU2381
 9009              	.LBB2024:
1088:src/xeq.c     **** }
 9010              		.loc 1 1088 2 view .LVU2382
 9011              	.LBE2024:
 9012              	.LBE2027:
 718:src/xeq.c     **** }
 9013              		.loc 1 718 2 is_stmt 0 view .LVU2383
 9014 004c B3F5804F 		cmp	r3, #16384
 9015 0050 0CBF     		ite	eq
 9016 0052 1022     		moveq	r2, #16
 9017 0054 0822     		movne	r2, #8
 9018              	.LBE2030:
 9019              	.LBE2036:
1060:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9020              		.loc 1 1060 18 view .LVU2384
 9021 0056 0134     		adds	r4, r4, #1
 9022              	.LVL641:
 9023              	.LBB2037:
 9024              	.LBB2031:
 718:src/xeq.c     **** }
 9025              		.loc 1 718 2 view .LVU2385
 9026 0058 FFF7FEFF 		bl	xcopy
 9027              	.LVL642:
 718:src/xeq.c     **** }
 9028              		.loc 1 718 2 view .LVU2386
 9029              	.LBE2031:
 9030              	.LBE2037:
1060:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9031              		.loc 1 1060 17 is_stmt 1 view .LVU2387
1060:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9032              		.loc 1 1060 12 view .LVU2388
1060:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9033              		.loc 1 1060 2 is_stmt 0 view .LVU2389
 9034 005c BC42     		cmp	r4, r7
 9035 005e E6D1     		bne	.L674
1062:src/xeq.c     **** }
 9036              		.loc 1 1062 2 is_stmt 1 view .LVU2390
 9037              	.LBB2038:
 9038              	.LBI2038:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 9039              		.loc 1 530 13 view .LVU2391
 9040              	.LBB2039:
 531:src/xeq.c     **** }
 9041              		.loc 1 531 2 view .LVU2392
 531:src/xeq.c     **** }
 9042              		.loc 1 531 20 is_stmt 0 view .LVU2393
 9043 0060 094B     		ldr	r3, .L683+4
 9044 0062 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 9045 0064 0121     		movs	r1, #1
ARM GAS  /tmp/ccQlyisH.s 			page 298


 9046 0066 61F38712 		bfi	r2, r1, #6, #2
 9047 006a 1A75     		strb	r2, [r3, #20]
 9048              	.LBE2039:
 9049              	.LBE2038:
1063:src/xeq.c     **** 
 9050              		.loc 1 1063 1 view .LVU2394
 9051 006c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9052              	.LVL643:
 9053              	.L682:
 9054              	.LBB2040:
 9055              	.LBB2016:
 704:src/xeq.c     **** 		return 4;
 9056              		.loc 1 704 44 view .LVU2395
 9057 0070 064B     		ldr	r3, .L683+8
 704:src/xeq.c     **** 		return 4;
 9058              		.loc 1 704 41 view .LVU2396
 9059 0072 93F90130 		ldrsb	r3, [r3, #1]
 705:src/xeq.c     **** 	return 8;
 9060              		.loc 1 705 10 view .LVU2397
 9061 0076 002B     		cmp	r3, #0
 9062 0078 B4BF     		ite	lt
 9063 007a 0827     		movlt	r7, #8
 9064 007c 0427     		movge	r7, #4
 9065 007e CDE7     		b	.L671
 9066              	.L675:
 9067 0080 0427     		movs	r7, #4
 9068 0082 CBE7     		b	.L671
 9069              	.L684:
 9070              		.align	2
 9071              	.L683:
 9072 0084 00000000 		.word	main_ram
 9073 0088 00000000 		.word	StateWhileOn
 9074 008c 00000000 		.word	XromParams
 9075 0090 00000000 		.word	StackBase
 9076              	.LBE2016:
 9077              	.LBE2040:
 9078              		.cfi_endproc
 9079              	.LFE78:
 9081              		.section	.text.setRegister,"ax",%progbits
 9082              		.align	1
 9083              		.p2align 2,,3
 9084              		.global	setRegister
 9085              		.syntax unified
 9086              		.thumb
 9087              		.thumb_func
 9088              		.fpu fpv4-sp-d16
 9090              	setRegister:
 9091              	.LVL644:
 9092              	.LFB58:
 802:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9093              		.loc 1 802 49 is_stmt 1 view -0
 9094              		.cfi_startproc
 9095              		@ args = 0, pretend = 0, frame = 40
 9096              		@ frame_needed = 0, uses_anonymous_args = 0
 803:src/xeq.c     **** 	decNumber dn;
 9097              		.loc 1 803 2 view .LVU2399
 802:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
ARM GAS  /tmp/ccQlyisH.s 			page 299


 9098              		.loc 1 802 49 is_stmt 0 view .LVU2400
 9099 0000 30B5     		push	{r4, r5, lr}
 9100              		.cfi_def_cfa_offset 12
 9101              		.cfi_offset 4, -12
 9102              		.cfi_offset 5, -8
 9103              		.cfi_offset 14, -4
 9104 0002 8BB0     		sub	sp, sp, #44
 9105              		.cfi_def_cfa_offset 56
 802:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9106              		.loc 1 802 49 view .LVU2401
 9107 0004 0C46     		mov	r4, r1
 803:src/xeq.c     **** 	decNumber dn;
 9108              		.loc 1 803 24 view .LVU2402
 9109 0006 FFF7FEFF 		bl	get_reg_n
 9110              	.LVL645:
 803:src/xeq.c     **** 	decNumber dn;
 9111              		.loc 1 803 24 view .LVU2403
 9112 000a 0546     		mov	r5, r0
 806:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9113              		.loc 1 806 8 view .LVU2404
 9114 000c 2046     		mov	r0, r4
 9115              	.LVL646:
 804:src/xeq.c     **** 
 9116              		.loc 1 804 2 is_stmt 1 view .LVU2405
 806:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9117              		.loc 1 806 2 view .LVU2406
 806:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9118              		.loc 1 806 8 is_stmt 0 view .LVU2407
 9119 000e FFF7FEFF 		bl	check_special
 9120              	.LVL647:
 806:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9121              		.loc 1 806 5 view .LVU2408
 9122 0012 08B1     		cbz	r0, .L689
 813:src/xeq.c     **** 
 9123              		.loc 1 813 1 view .LVU2409
 9124 0014 0BB0     		add	sp, sp, #44
 9125              		.cfi_remember_state
 9126              		.cfi_def_cfa_offset 12
 9127              		@ sp needed
 9128 0016 30BD     		pop	{r4, r5, pc}
 9129              	.LVL648:
 9130              	.L689:
 9131              		.cfi_restore_state
 807:src/xeq.c     **** 		if (is_dblmode())
 9132              		.loc 1 807 3 is_stmt 1 view .LVU2410
 9133 0018 0C4A     		ldr	r2, .L691
 9134 001a 2146     		mov	r1, r4
 9135 001c 01A8     		add	r0, sp, #4
 9136 001e FFF7FEFF 		bl	decNumberNormalize
 9137              	.LVL649:
 808:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9138              		.loc 1 808 3 view .LVU2411
 9139              	.LBB2041:
 9140              	.LBI2041:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 9141              		.loc 1 1087 5 view .LVU2412
 9142              	.LBB2042:
ARM GAS  /tmp/ccQlyisH.s 			page 300


1088:src/xeq.c     **** }
 9143              		.loc 1 1088 2 view .LVU2413
1088:src/xeq.c     **** }
 9144              		.loc 1 1088 24 is_stmt 0 view .LVU2414
 9145 0022 0B4B     		ldr	r3, .L691+4
 9146 0024 1B68     		ldr	r3, [r3]
 9147 0026 B3F8E827 		ldrh	r2, [r3, #2024]
 9148 002a 44F20103 		movw	r3, #16385
 9149              	.LBE2042:
 9150              	.LBE2041:
 808:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9151              		.loc 1 808 6 view .LVU2415
 9152 002e 1340     		ands	r3, r3, r2
 9153 0030 B3F5804F 		cmp	r3, #16384
 809:src/xeq.c     **** 		else
 9154              		.loc 1 809 4 view .LVU2416
 9155 0034 01A9     		add	r1, sp, #4
 9156 0036 2846     		mov	r0, r5
 808:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9157              		.loc 1 808 6 view .LVU2417
 9158 0038 03D0     		beq	.L690
 9159              	.LVL650:
 811:src/xeq.c     **** 	}
 9160              		.loc 1 811 4 is_stmt 1 view .LVU2418
 9161 003a FFF7FEFF 		bl	packed_from_number
 9162              	.LVL651:
 813:src/xeq.c     **** 
 9163              		.loc 1 813 1 is_stmt 0 view .LVU2419
 9164 003e 0BB0     		add	sp, sp, #44
 9165              		.cfi_remember_state
 9166              		.cfi_def_cfa_offset 12
 9167              		@ sp needed
 9168 0040 30BD     		pop	{r4, r5, pc}
 9169              	.LVL652:
 9170              	.L690:
 9171              		.cfi_restore_state
 809:src/xeq.c     **** 		else
 9172              		.loc 1 809 4 is_stmt 1 view .LVU2420
 9173 0042 FFF7FEFF 		bl	packed128_from_number
 9174              	.LVL653:
 813:src/xeq.c     **** 
 9175              		.loc 1 813 1 is_stmt 0 view .LVU2421
 9176 0046 0BB0     		add	sp, sp, #44
 9177              		.cfi_def_cfa_offset 12
 9178              		@ sp needed
 9179 0048 30BD     		pop	{r4, r5, pc}
 9180              	.LVL654:
 9181              	.L692:
 813:src/xeq.c     **** 
 9182              		.loc 1 813 1 view .LVU2422
 9183 004a 00BF     		.align	2
 9184              	.L691:
 9185 004c 00000000 		.word	Ctx
 9186 0050 00000000 		.word	main_ram
 9187              		.cfi_endproc
 9188              	.LFE58:
 9190              		.section	.text.setX,"ax",%progbits
ARM GAS  /tmp/ccQlyisH.s 			page 301


 9191              		.align	1
 9192              		.p2align 2,,3
 9193              		.global	setX
 9194              		.syntax unified
 9195              		.thumb
 9196              		.thumb_func
 9197              		.fpu fpv4-sp-d16
 9199              	setX:
 9200              	.LVL655:
 9201              	.LFB60:
 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 9202              		.loc 1 819 31 is_stmt 1 view -0
 9203              		.cfi_startproc
 9204              		@ args = 0, pretend = 0, frame = 0
 9205              		@ frame_needed = 0, uses_anonymous_args = 0
 9206              		@ link register save eliminated.
 820:src/xeq.c     **** }
 9207              		.loc 1 820 2 view .LVU2424
 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 9208              		.loc 1 819 31 is_stmt 0 view .LVU2425
 9209 0000 0146     		mov	r1, r0
 820:src/xeq.c     **** }
 9210              		.loc 1 820 2 view .LVU2426
 9211 0002 6420     		movs	r0, #100
 9212              	.LVL656:
 820:src/xeq.c     **** }
 9213              		.loc 1 820 2 view .LVU2427
 9214 0004 FFF7FEBF 		b	setRegister
 9215              	.LVL657:
 820:src/xeq.c     **** }
 9216              		.loc 1 820 2 view .LVU2428
 9217              		.cfi_endproc
 9218              	.LFE60:
 9220              		.section	.text.rarg_round,"ax",%progbits
 9221              		.align	1
 9222              		.p2align 2,,3
 9223              		.global	rarg_round
 9224              		.syntax unified
 9225              		.thumb
 9226              		.thumb_func
 9227              		.fpu fpv4-sp-d16
 9229              	rarg_round:
 9230              	.LVL658:
 9231              	.LFB40:
 653:src/xeq.c     **** 	decNumber res, x;
 9232              		.loc 1 653 49 is_stmt 1 view -0
 9233              		.cfi_startproc
 9234              		@ args = 0, pretend = 0, frame = 80
 9235              		@ frame_needed = 0, uses_anonymous_args = 0
 654:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 9236              		.loc 1 654 2 view .LVU2430
 655:src/xeq.c     **** 
 9237              		.loc 1 655 2 view .LVU2431
 9238              	.LBB2055:
 9239              	.LBI2055:
 601:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 9240              		.loc 1 601 22 view .LVU2432
ARM GAS  /tmp/ccQlyisH.s 			page 302


 9241              	.LBB2056:
 602:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 9242              		.loc 1 602 2 view .LVU2433
 607:src/xeq.c     **** }
 9243              		.loc 1 607 2 view .LVU2434
 607:src/xeq.c     **** }
 9244              		.loc 1 607 31 is_stmt 0 view .LVU2435
 9245 0000 184B     		ldr	r3, .L702
 9246              	.LBE2056:
 9247              	.LBE2055:
 653:src/xeq.c     **** 	decNumber res, x;
 9248              		.loc 1 653 49 view .LVU2436
 9249 0002 70B5     		push	{r4, r5, r6, lr}
 9250              		.cfi_def_cfa_offset 16
 9251              		.cfi_offset 4, -16
 9252              		.cfi_offset 5, -12
 9253              		.cfi_offset 6, -8
 9254              		.cfi_offset 14, -4
 9255              	.LBB2059:
 9256              	.LBB2057:
 607:src/xeq.c     **** }
 9257              		.loc 1 607 31 view .LVU2437
 9258 0004 1B68     		ldr	r3, [r3]
 9259              	.LVL659:
 607:src/xeq.c     **** }
 9260              		.loc 1 607 31 view .LVU2438
 9261              	.LBE2057:
 9262              	.LBE2059:
 657:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9263              		.loc 1 657 2 is_stmt 1 view .LVU2439
 657:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9264              		.loc 1 657 6 is_stmt 0 view .LVU2440
 9265 0006 93F8E857 		ldrb	r5, [r3, #2024]	@ zero_extendqisi2
 657:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9266              		.loc 1 657 5 view .LVU2441
 9267 000a EA07     		lsls	r2, r5, #31
 653:src/xeq.c     **** 	decNumber res, x;
 9268              		.loc 1 653 49 view .LVU2442
 9269 000c 94B0     		sub	sp, sp, #80
 9270              		.cfi_def_cfa_offset 96
 657:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9271              		.loc 1 657 5 view .LVU2443
 9272 000e 06D5     		bpl	.L695
 658:src/xeq.c     **** 		return;
 9273              		.loc 1 658 3 is_stmt 1 view .LVU2444
 9274              	.LVL660:
 9275              	.LBB2060:
 9276              	.LBI2060:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9277              		.loc 1 537 5 view .LVU2445
 9278              	.LBB2061:
 538:src/xeq.c     **** 		Error = e;
 9279              		.loc 1 538 2 view .LVU2446
 538:src/xeq.c     **** 		Error = e;
 9280              		.loc 1 538 12 is_stmt 0 view .LVU2447
 9281 0010 154B     		ldr	r3, .L702+4
 9282              	.LVL661:
ARM GAS  /tmp/ccQlyisH.s 			page 303


 538:src/xeq.c     **** 		Error = e;
 9283              		.loc 1 538 5 view .LVU2448
 9284 0012 1A68     		ldr	r2, [r3]
 9285 0014 0AB9     		cbnz	r2, .L694
 9286              	.LVL662:
 9287              	.LBB2062:
 9288              	.LBI2062:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9289              		.loc 1 537 5 is_stmt 1 view .LVU2449
 9290              	.LBB2063:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 9291              		.loc 1 539 3 view .LVU2450
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 9292              		.loc 1 539 9 is_stmt 0 view .LVU2451
 9293 0016 0D22     		movs	r2, #13
 9294 0018 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 9295              		.loc 1 540 3 is_stmt 1 view .LVU2452
 9296              	.LVL663:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 9297              		.loc 1 540 3 is_stmt 0 view .LVU2453
 9298              	.LBE2063:
 9299              	.LBE2062:
 9300              	.LBE2061:
 9301              	.LBE2060:
 659:src/xeq.c     **** 	}
 9302              		.loc 1 659 3 is_stmt 1 view .LVU2454
 9303              	.L694:
 669:src/xeq.c     **** 
 9304              		.loc 1 669 1 is_stmt 0 view .LVU2455
 9305 001a 14B0     		add	sp, sp, #80
 9306              		.cfi_remember_state
 9307              		.cfi_def_cfa_offset 16
 9308              		@ sp needed
 9309 001c 70BD     		pop	{r4, r5, r6, pc}
 9310              	.LVL664:
 9311              	.L695:
 9312              		.cfi_restore_state
 9313              	.LBB2064:
 9314              	.LBB2058:
 607:src/xeq.c     **** }
 9315              		.loc 1 607 37 view .LVU2456
 9316 001e 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 9317              	.LVL665:
 607:src/xeq.c     **** }
 9318              		.loc 1 607 9 view .LVU2457
 9319 0022 124A     		ldr	r2, .L702+8
 607:src/xeq.c     **** }
 9320              		.loc 1 607 37 view .LVU2458
 9321 0024 C3F30213 		ubfx	r3, r3, #4, #3
 9322 0028 0C46     		mov	r4, r1
 607:src/xeq.c     **** }
 9323              		.loc 1 607 9 view .LVU2459
 9324 002a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9325 002c 0193     		str	r3, [sp, #4]
 9326              	.LBE2058:
 9327              	.LBE2064:
ARM GAS  /tmp/ccQlyisH.s 			page 304


 662:src/xeq.c     **** 	getX(&x);
 9328              		.loc 1 662 2 is_stmt 1 view .LVU2460
 9329              	.LBB2065:
 9330              	.LBI2065:
 783:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 9331              		.loc 1 783 6 view .LVU2461
 9332              	.LBB2066:
 784:src/xeq.c     **** }
 9333              		.loc 1 784 2 view .LVU2462
 9334 002e 0646     		mov	r6, r0
 9335 0030 6421     		movs	r1, #100
 9336              	.LVL666:
 784:src/xeq.c     **** }
 9337              		.loc 1 784 2 is_stmt 0 view .LVU2463
 9338 0032 6C20     		movs	r0, #108
 9339              	.LVL667:
 784:src/xeq.c     **** }
 9340              		.loc 1 784 2 view .LVU2464
 9341 0034 FFF7FEFF 		bl	copyreg_n
 9342              	.LVL668:
 784:src/xeq.c     **** }
 9343              		.loc 1 784 2 view .LVU2465
 9344              	.LBE2066:
 9345              	.LBE2065:
 663:src/xeq.c     **** 	if (op == RARG_ROUND)
 9346              		.loc 1 663 2 is_stmt 1 view .LVU2466
 9347              	.LBB2067:
 9348              	.LBI2067:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 9349              		.loc 1 815 12 view .LVU2467
 9350              	.LBB2068:
 816:src/xeq.c     **** }
 9351              		.loc 1 816 2 view .LVU2468
 816:src/xeq.c     **** }
 9352              		.loc 1 816 9 is_stmt 0 view .LVU2469
 9353 0038 6421     		movs	r1, #100
 9354 003a 0BA8     		add	r0, sp, #44
 9355              	.LVL669:
 816:src/xeq.c     **** }
 9356              		.loc 1 816 9 view .LVU2470
 9357 003c FFF7FEFF 		bl	getRegister
 9358              	.LVL670:
 816:src/xeq.c     **** }
 9359              		.loc 1 816 9 view .LVU2471
 9360              	.LBE2068:
 9361              	.LBE2067:
 664:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9362              		.loc 1 664 2 is_stmt 1 view .LVU2472
 664:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9363              		.loc 1 664 5 is_stmt 0 view .LVU2473
 9364 0040 752C     		cmp	r4, #117
 665:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9365              		.loc 1 665 3 view .LVU2474
 9366 0042 02AC     		add	r4, sp, #8
 664:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9367              		.loc 1 664 5 view .LVU2475
 9368 0044 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/ccQlyisH.s 			page 305


 665:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9369              		.loc 1 665 3 view .LVU2476
 9370 0046 3246     		mov	r2, r6
 9371 0048 0BA9     		add	r1, sp, #44
 9372 004a 2046     		mov	r0, r4
 664:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9373              		.loc 1 664 5 view .LVU2477
 9374 004c 07D0     		beq	.L701
 9375              	.LVL671:
 667:src/xeq.c     **** 	setX(&res);
 9376              		.loc 1 667 3 is_stmt 1 view .LVU2478
 9377 004e FFF7FEFF 		bl	decNumberRoundDecimals
 9378              	.LVL672:
 9379              	.L699:
 668:src/xeq.c     **** }
 9380              		.loc 1 668 2 view .LVU2479
 9381              	.LBB2069:
 9382              	.LBI2069:
 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 9383              		.loc 1 819 6 view .LVU2480
 9384              	.LBB2070:
 820:src/xeq.c     **** }
 9385              		.loc 1 820 2 view .LVU2481
 9386 0052 2146     		mov	r1, r4
 9387 0054 6420     		movs	r0, #100
 9388 0056 FFF7FEFF 		bl	setRegister
 9389              	.LVL673:
 820:src/xeq.c     **** }
 9390              		.loc 1 820 2 is_stmt 0 view .LVU2482
 9391              	.LBE2070:
 9392              	.LBE2069:
 669:src/xeq.c     **** 
 9393              		.loc 1 669 1 view .LVU2483
 9394 005a 14B0     		add	sp, sp, #80
 9395              		.cfi_remember_state
 9396              		.cfi_def_cfa_offset 16
 9397              		@ sp needed
 9398 005c 70BD     		pop	{r4, r5, r6, pc}
 9399              	.LVL674:
 9400              	.L701:
 9401              		.cfi_restore_state
 665:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9402              		.loc 1 665 3 is_stmt 1 view .LVU2484
 9403 005e FFF7FEFF 		bl	decNumberRoundDigits
 9404              	.LVL675:
 665:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9405              		.loc 1 665 3 is_stmt 0 view .LVU2485
 9406 0062 F6E7     		b	.L699
 9407              	.L703:
 9408              		.align	2
 9409              	.L702:
 9410 0064 00000000 		.word	main_ram
 9411 0068 00000000 		.word	Error
 9412 006c 00000000 		.word	.LANCHOR1
 9413              		.cfi_endproc
 9414              	.LFE40:
 9416              		.section	.text.setY,"ax",%progbits
ARM GAS  /tmp/ccQlyisH.s 			page 306


 9417              		.align	1
 9418              		.p2align 2,,3
 9419              		.global	setY
 9420              		.syntax unified
 9421              		.thumb
 9422              		.thumb_func
 9423              		.fpu fpv4-sp-d16
 9425              	setY:
 9426              	.LVL676:
 9427              	.LFB62:
 827:src/xeq.c     **** 	setRegister(regY_idx, y);
 9428              		.loc 1 827 31 is_stmt 1 view -0
 9429              		.cfi_startproc
 9430              		@ args = 0, pretend = 0, frame = 0
 9431              		@ frame_needed = 0, uses_anonymous_args = 0
 9432              		@ link register save eliminated.
 828:src/xeq.c     **** }
 9433              		.loc 1 828 2 view .LVU2487
 827:src/xeq.c     **** 	setRegister(regY_idx, y);
 9434              		.loc 1 827 31 is_stmt 0 view .LVU2488
 9435 0000 0146     		mov	r1, r0
 828:src/xeq.c     **** }
 9436              		.loc 1 828 2 view .LVU2489
 9437 0002 6520     		movs	r0, #101
 9438              	.LVL677:
 828:src/xeq.c     **** }
 9439              		.loc 1 828 2 view .LVU2490
 9440 0004 FFF7FEBF 		b	setRegister
 9441              	.LVL678:
 828:src/xeq.c     **** }
 9442              		.loc 1 828 2 view .LVU2491
 9443              		.cfi_endproc
 9444              	.LFE62:
 9446              		.section	.text.setXY,"ax",%progbits
 9447              		.align	1
 9448              		.p2align 2,,3
 9449              		.global	setXY
 9450              		.syntax unified
 9451              		.thumb
 9452              		.thumb_func
 9453              		.fpu fpv4-sp-d16
 9455              	setXY:
 9456              	.LVL679:
 9457              	.LFB66:
 850:src/xeq.c     **** 	setX(x);
 9458              		.loc 1 850 52 is_stmt 1 view -0
 9459              		.cfi_startproc
 9460              		@ args = 0, pretend = 0, frame = 0
 9461              		@ frame_needed = 0, uses_anonymous_args = 0
 851:src/xeq.c     **** 	setY(y);
 9462              		.loc 1 851 2 view .LVU2493
 9463              	.LBB2071:
 9464              	.LBI2071:
 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 9465              		.loc 1 819 6 view .LVU2494
 9466              	.LBB2072:
 820:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 307


 9467              		.loc 1 820 2 view .LVU2495
 9468              	.LBE2072:
 9469              	.LBE2071:
 850:src/xeq.c     **** 	setX(x);
 9470              		.loc 1 850 52 is_stmt 0 view .LVU2496
 9471 0000 10B5     		push	{r4, lr}
 9472              		.cfi_def_cfa_offset 8
 9473              		.cfi_offset 4, -8
 9474              		.cfi_offset 14, -4
 850:src/xeq.c     **** 	setX(x);
 9475              		.loc 1 850 52 view .LVU2497
 9476 0002 0C46     		mov	r4, r1
 9477              	.LBB2074:
 9478              	.LBB2073:
 820:src/xeq.c     **** }
 9479              		.loc 1 820 2 view .LVU2498
 9480 0004 0146     		mov	r1, r0
 9481              	.LVL680:
 820:src/xeq.c     **** }
 9482              		.loc 1 820 2 view .LVU2499
 9483 0006 6420     		movs	r0, #100
 9484              	.LVL681:
 820:src/xeq.c     **** }
 9485              		.loc 1 820 2 view .LVU2500
 9486 0008 FFF7FEFF 		bl	setRegister
 9487              	.LVL682:
 820:src/xeq.c     **** }
 9488              		.loc 1 820 2 view .LVU2501
 9489              	.LBE2073:
 9490              	.LBE2074:
 852:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 9491              		.loc 1 852 2 is_stmt 1 view .LVU2502
 9492              	.LBB2075:
 9493              	.LBI2075:
 827:src/xeq.c     **** 	setRegister(regY_idx, y);
 9494              		.loc 1 827 6 view .LVU2503
 9495              	.LBB2076:
 828:src/xeq.c     **** }
 9496              		.loc 1 828 2 view .LVU2504
 9497 000c 2146     		mov	r1, r4
 9498 000e 6520     		movs	r0, #101
 9499 0010 FFF7FEFF 		bl	setRegister
 9500              	.LVL683:
 828:src/xeq.c     **** }
 9501              		.loc 1 828 2 is_stmt 0 view .LVU2505
 9502              	.LBE2076:
 9503              	.LBE2075:
 854:src/xeq.c     **** #endif
 9504              		.loc 1 854 2 is_stmt 1 view .LVU2506
 9505 0014 044B     		ldr	r3, .L707
 9506 0016 1A68     		ldr	r2, [r3]
 9507 0018 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 9508 001c 43F00103 		orr	r3, r3, #1
 9509 0020 82F8AD37 		strb	r3, [r2, #1965]
 856:src/xeq.c     **** 
 9510              		.loc 1 856 1 is_stmt 0 view .LVU2507
 9511 0024 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccQlyisH.s 			page 308


 9512              	.LVL684:
 9513              	.L708:
 856:src/xeq.c     **** 
 9514              		.loc 1 856 1 view .LVU2508
 9515 0026 00BF     		.align	2
 9516              	.L707:
 9517 0028 00000000 		.word	main_ram
 9518              		.cfi_endproc
 9519              	.LFE66:
 9521              		.section	.text.convert_regK,"ax",%progbits
 9522              		.align	1
 9523              		.p2align 2,,3
 9524              		.global	convert_regK
 9525              		.syntax unified
 9526              		.thumb
 9527              		.thumb_func
 9528              		.fpu fpv4-sp-d16
 9530              	convert_regK:
 9531              	.LVL685:
 9532              	.LFB75:
 930:src/xeq.c     **** 	decNumber k;
 9533              		.loc 1 930 41 is_stmt 1 view -0
 9534              		.cfi_startproc
 9535              		@ args = 0, pretend = 0, frame = 40
 9536              		@ frame_needed = 0, uses_anonymous_args = 0
 931:src/xeq.c     **** 
 9537              		.loc 1 931 2 view .LVU2510
 933:src/xeq.c     **** 	if (i==j) return; // no mode change
 9538              		.loc 1 933 2 view .LVU2511
 9539              	.LBB2077:
 9540              	.LBI2077:
4059:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 9541              		.loc 1 4059 17 view .LVU2512
 9542              	.LBB2078:
4060:src/xeq.c     **** 		return TRIG_RAD;
 9543              		.loc 1 4060 2 view .LVU2513
 9544              	.LBE2078:
 9545              	.LBE2077:
 930:src/xeq.c     **** 	decNumber k;
 9546              		.loc 1 930 41 is_stmt 0 view .LVU2514
 9547 0000 70B5     		push	{r4, r5, r6, lr}
 9548              		.cfi_def_cfa_offset 16
 9549              		.cfi_offset 4, -16
 9550              		.cfi_offset 5, -12
 9551              		.cfi_offset 6, -8
 9552              		.cfi_offset 14, -4
 9553              	.LBB2082:
 9554              	.LBB2079:
4060:src/xeq.c     **** 		return TRIG_RAD;
 9555              		.loc 1 4060 6 view .LVU2515
 9556 0002 2A4B     		ldr	r3, .L730
 9557 0004 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
4060:src/xeq.c     **** 		return TRIG_RAD;
 9558              		.loc 1 4060 5 view .LVU2516
 9559 0006 9B07     		lsls	r3, r3, #30
 9560              	.LBE2079:
 9561              	.LBE2082:
ARM GAS  /tmp/ccQlyisH.s 			page 309


 930:src/xeq.c     **** 	decNumber k;
 9562              		.loc 1 930 41 view .LVU2517
 9563 0008 8AB0     		sub	sp, sp, #40
 9564              		.cfi_def_cfa_offset 56
 930:src/xeq.c     **** 	decNumber k;
 9565              		.loc 1 930 41 view .LVU2518
 9566 000a 0446     		mov	r4, r0
 9567              	.LBB2083:
 9568              	.LBB2080:
4060:src/xeq.c     **** 		return TRIG_RAD;
 9569              		.loc 1 4060 5 view .LVU2519
 9570 000c 27D4     		bmi	.L713
4060:src/xeq.c     **** 		return TRIG_RAD;
 9571              		.loc 1 4060 19 view .LVU2520
 9572 000e 284B     		ldr	r3, .L730+4
 9573 0010 93F90130 		ldrsb	r3, [r3, #1]
 9574 0014 002B     		cmp	r3, #0
 9575 0016 22DB     		blt	.L713
4063:src/xeq.c     **** }
 9576              		.loc 1 4063 2 is_stmt 1 view .LVU2521
4063:src/xeq.c     **** }
 9577              		.loc 1 4063 33 is_stmt 0 view .LVU2522
 9578 0018 264B     		ldr	r3, .L730+8
 9579 001a 1B68     		ldr	r3, [r3]
 9580 001c 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 9581              	.LBE2080:
 9582              	.LBE2083:
 934:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9583              		.loc 1 934 5 view .LVU2523
 9584 0020 B0EB931F 		cmp	r0, r3, lsr #6
 9585              	.LBB2084:
 9586              	.LBB2081:
4063:src/xeq.c     **** }
 9587              		.loc 1 4063 33 view .LVU2524
 9588 0024 4FEA9316 		lsr	r6, r3, #6
 9589              	.LVL686:
4063:src/xeq.c     **** }
 9590              		.loc 1 4063 33 view .LVU2525
 9591              	.LBE2081:
 9592              	.LBE2084:
 934:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9593              		.loc 1 934 2 is_stmt 1 view .LVU2526
 934:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9594              		.loc 1 934 5 is_stmt 0 view .LVU2527
 9595 0028 17D0     		beq	.L709
 935:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9596              		.loc 1 935 2 is_stmt 1 view .LVU2528
 9597 002a 01AD     		add	r5, sp, #4
 9598 002c 2846     		mov	r0, r5
 9599              	.LVL687:
 935:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9600              		.loc 1 935 2 is_stmt 0 view .LVU2529
 9601 002e 6F21     		movs	r1, #111
 9602 0030 FFF7FEFF 		bl	getRegister
 9603              	.LVL688:
 936:src/xeq.c     **** 		case TRIG_DEG:
 9604              		.loc 1 936 2 is_stmt 1 view .LVU2530
ARM GAS  /tmp/ccQlyisH.s 			page 310


 9605 0034 012E     		cmp	r6, #1
 9606 0036 19D0     		beq	.L712
 9607 0038 022E     		cmp	r6, #2
 9608 003a 24D0     		beq	.L716
 9609 003c 26B9     		cbnz	r6, .L717
 938:src/xeq.c     **** 			break;
 9610              		.loc 1 938 4 view .LVU2531
 9611 003e 1E4A     		ldr	r2, .L730+12
 9612 0040 2946     		mov	r1, r5
 9613 0042 2846     		mov	r0, r5
 9614 0044 FFF7FEFF 		bl	dn_divide
 9615              	.LVL689:
 939:src/xeq.c     **** 		case TRIG_RAD:
 9616              		.loc 1 939 4 view .LVU2532
 9617              	.L717:
 945:src/xeq.c     **** 	}
 9618              		.loc 1 945 11 view .LVU2533
 947:src/xeq.c     **** 		case TRIG_DEG:
 9619              		.loc 1 947 2 view .LVU2534
 9620 0048 012C     		cmp	r4, #1
 9621 004a 16D0     		beq	.L718
 9622              	.L729:
 947:src/xeq.c     **** 		case TRIG_DEG:
 9623              		.loc 1 947 2 is_stmt 0 view .LVU2535
 9624 004c 022C     		cmp	r4, #2
 9625 004e 20D0     		beq	.L719
 9626 0050 2CB3     		cbz	r4, .L728
 9627              	.L720:
 956:src/xeq.c     **** 	}
 9628              		.loc 1 956 11 is_stmt 1 view .LVU2536
 958:src/xeq.c     **** }
 9629              		.loc 1 958 2 view .LVU2537
 9630 0052 2946     		mov	r1, r5
 9631 0054 6F20     		movs	r0, #111
 9632 0056 FFF7FEFF 		bl	setRegister
 9633              	.LVL690:
 9634              	.L709:
 959:src/xeq.c     **** 
 9635              		.loc 1 959 1 is_stmt 0 view .LVU2538
 9636 005a 0AB0     		add	sp, sp, #40
 9637              		.cfi_remember_state
 9638              		.cfi_def_cfa_offset 16
 9639              		@ sp needed
 9640 005c 70BD     		pop	{r4, r5, r6, pc}
 9641              	.LVL691:
 9642              	.L713:
 9643              		.cfi_restore_state
 934:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9644              		.loc 1 934 2 is_stmt 1 view .LVU2539
 934:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9645              		.loc 1 934 5 is_stmt 0 view .LVU2540
 9646 005e 012C     		cmp	r4, #1
 9647 0060 FBD0     		beq	.L709
 935:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9648              		.loc 1 935 2 is_stmt 1 view .LVU2541
 9649 0062 01AD     		add	r5, sp, #4
 9650 0064 2846     		mov	r0, r5
ARM GAS  /tmp/ccQlyisH.s 			page 311


 9651              	.LVL692:
 935:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9652              		.loc 1 935 2 is_stmt 0 view .LVU2542
 9653 0066 6F21     		movs	r1, #111
 9654 0068 FFF7FEFF 		bl	getRegister
 9655              	.LVL693:
 936:src/xeq.c     **** 		case TRIG_DEG:
 9656              		.loc 1 936 2 is_stmt 1 view .LVU2543
 9657              	.L712:
 941:src/xeq.c     **** 			break;
 9658              		.loc 1 941 4 view .LVU2544
 9659 006c 134A     		ldr	r2, .L730+16
 9660 006e 2946     		mov	r1, r5
 9661 0070 2846     		mov	r0, r5
 9662 0072 FFF7FEFF 		bl	dn_divide
 9663              	.LVL694:
 942:src/xeq.c     **** 		case TRIG_GRAD:
 9664              		.loc 1 942 4 view .LVU2545
 945:src/xeq.c     **** 	}
 9665              		.loc 1 945 11 view .LVU2546
 947:src/xeq.c     **** 		case TRIG_DEG:
 9666              		.loc 1 947 2 view .LVU2547
 9667 0076 012C     		cmp	r4, #1
 9668 0078 E8D1     		bne	.L729
 9669              	.L718:
 952:src/xeq.c     **** 			break;
 9670              		.loc 1 952 4 view .LVU2548
 9671 007a 104A     		ldr	r2, .L730+16
 9672 007c 2946     		mov	r1, r5
 9673 007e 2846     		mov	r0, r5
 9674 0080 FFF7FEFF 		bl	dn_multiply
 9675              	.LVL695:
 953:src/xeq.c     **** 		case TRIG_GRAD:
 9676              		.loc 1 953 4 view .LVU2549
 9677 0084 E5E7     		b	.L720
 9678              	.L716:
 944:src/xeq.c     **** 		default:;
 9679              		.loc 1 944 4 view .LVU2550
 9680 0086 0E4A     		ldr	r2, .L730+20
 9681 0088 2946     		mov	r1, r5
 9682 008a 2846     		mov	r0, r5
 9683 008c FFF7FEFF 		bl	dn_divide
 9684              	.LVL696:
 9685 0090 DAE7     		b	.L717
 9686              	.L719:
 955:src/xeq.c     **** 		default:;
 9687              		.loc 1 955 4 view .LVU2551
 9688 0092 0B4A     		ldr	r2, .L730+20
 9689 0094 2946     		mov	r1, r5
 9690 0096 2846     		mov	r0, r5
 9691 0098 FFF7FEFF 		bl	dn_multiply
 9692              	.LVL697:
 9693 009c D9E7     		b	.L720
 9694              	.L728:
 949:src/xeq.c     **** 			break;
 9695              		.loc 1 949 4 view .LVU2552
 9696 009e 064A     		ldr	r2, .L730+12
ARM GAS  /tmp/ccQlyisH.s 			page 312


 9697 00a0 2946     		mov	r1, r5
 9698 00a2 2846     		mov	r0, r5
 9699 00a4 FFF7FEFF 		bl	dn_multiply
 9700              	.LVL698:
 950:src/xeq.c     **** 		case TRIG_RAD:
 9701              		.loc 1 950 4 view .LVU2553
 9702 00a8 D3E7     		b	.L720
 9703              	.L731:
 9704 00aa 00BF     		.align	2
 9705              	.L730:
 9706 00ac 00000000 		.word	StateWhileOn
 9707 00b0 00000000 		.word	XromParams
 9708 00b4 00000000 		.word	main_ram
 9709 00b8 00000000 		.word	const_360
 9710 00bc 00000000 		.word	const_2PI
 9711 00c0 00000000 		.word	const_400
 9712              		.cfi_endproc
 9713              	.LFE75:
 9715              		.section	.text.cpx_nop,"ax",%progbits
 9716              		.align	1
 9717              		.p2align 2,,3
 9718              		.global	cpx_nop
 9719              		.syntax unified
 9720              		.thumb
 9721              		.thumb_func
 9722              		.fpu fpv4-sp-d16
 9724              	cpx_nop:
 9725              	.LVL699:
 9726              	.LFB77:
 988:src/xeq.c     **** 	reset_shift();
 9727              		.loc 1 988 29 view -0
 9728              		.cfi_startproc
 9729              		@ args = 0, pretend = 0, frame = 40
 9730              		@ frame_needed = 0, uses_anonymous_args = 0
 989:src/xeq.c     **** 	switch (op) {
 9731              		.loc 1 989 2 view .LVU2555
 988:src/xeq.c     **** 	reset_shift();
 9732              		.loc 1 988 29 is_stmt 0 view .LVU2556
 9733 0000 10B5     		push	{r4, lr}
 9734              		.cfi_def_cfa_offset 8
 9735              		.cfi_offset 4, -8
 9736              		.cfi_offset 14, -4
 9737 0002 0446     		mov	r4, r0
 9738 0004 8AB0     		sub	sp, sp, #40
 9739              		.cfi_def_cfa_offset 48
 989:src/xeq.c     **** 	switch (op) {
 9740              		.loc 1 989 2 view .LVU2557
 9741 0006 FFF7FEFF 		bl	reset_shift
 9742              	.LVL700:
 990:src/xeq.c     **** 	case OP_CYES: // set flag to allow complex mode to be entered - can be called at any time
 9743              		.loc 1 990 2 is_stmt 1 view .LVU2558
 9744 000a A4F1C100 		sub	r0, r4, #193
 9745 000e 0B28     		cmp	r0, #11
 9746 0010 13D8     		bhi	.L750
 9747 0012 DFE800F0 		tbb	[pc, r0]
 9748              	.L735:
 9749 0016 21       		.byte	(.L744-.L735)/2
ARM GAS  /tmp/ccQlyisH.s 			page 313


 9750 0017 35       		.byte	(.L748-.L735)/2
 9751 0018 06       		.byte	(.L742-.L735)/2
 9752 0019 4F       		.byte	(.L741-.L735)/2
 9753 001a 5E       		.byte	(.L740-.L735)/2
 9754 001b 66       		.byte	(.L739-.L735)/2
 9755 001c 12       		.byte	(.L750-.L735)/2
 9756 001d 12       		.byte	(.L750-.L735)/2
 9757 001e 6D       		.byte	(.L738-.L735)/2
 9758 001f 76       		.byte	(.L737-.L735)/2
 9759 0020 7F       		.byte	(.L736-.L735)/2
 9760 0021 8A       		.byte	(.L734-.L735)/2
 9761              		.p2align 1
 9762              	.L742:
 9763              	.LBB2085:
1022:src/xeq.c     **** 		getY(&y);
 9764              		.loc 1 1022 3 view .LVU2559
1023:src/xeq.c     **** 		dn_minus(&y, &y);
 9765              		.loc 1 1023 3 view .LVU2560
 9766              	.LVL701:
 9767              	.LBB2086:
 9768              	.LBI2086:
 823:src/xeq.c     **** 	getRegister(y, regY_idx);
 9769              		.loc 1 823 6 view .LVU2561
 9770              	.LBB2087:
 824:src/xeq.c     **** }
 9771              		.loc 1 824 2 view .LVU2562
 9772 0022 6521     		movs	r1, #101
 9773 0024 01A8     		add	r0, sp, #4
 9774              	.LVL702:
 824:src/xeq.c     **** }
 9775              		.loc 1 824 2 is_stmt 0 view .LVU2563
 9776 0026 FFF7FEFF 		bl	getRegister
 9777              	.LVL703:
 824:src/xeq.c     **** }
 9778              		.loc 1 824 2 view .LVU2564
 9779              	.LBE2087:
 9780              	.LBE2086:
1024:src/xeq.c     **** 		setY(&y);
 9781              		.loc 1 1024 3 is_stmt 1 view .LVU2565
 9782 002a 01A9     		add	r1, sp, #4
 9783 002c 0846     		mov	r0, r1
 9784 002e FFF7FEFF 		bl	dn_minus
 9785              	.LVL704:
1025:src/xeq.c     **** 		}
 9786              		.loc 1 1025 3 view .LVU2566
 9787              	.LBB2088:
 9788              	.LBI2088:
 827:src/xeq.c     **** 	setRegister(regY_idx, y);
 9789              		.loc 1 827 6 view .LVU2567
 9790              	.LBB2089:
 828:src/xeq.c     **** }
 9791              		.loc 1 828 2 view .LVU2568
 9792 0032 01A9     		add	r1, sp, #4
 9793              	.LVL705:
 828:src/xeq.c     **** }
 9794              		.loc 1 828 2 is_stmt 0 view .LVU2569
 9795 0034 6520     		movs	r0, #101
ARM GAS  /tmp/ccQlyisH.s 			page 314


 9796 0036 FFF7FEFF 		bl	setRegister
 9797              	.LVL706:
 9798              	.L750:
 828:src/xeq.c     **** }
 9799              		.loc 1 828 2 view .LVU2570
 9800              	.LBE2089:
 9801              	.LBE2088:
 9802              	.LBE2085:
1027:src/xeq.c     **** 	case OP_C_MRE: // change sign of real part
 9803              		.loc 1 1027 3 is_stmt 1 view .LVU2571
 9804 003a 454B     		ldr	r3, .L751
 9805 003c 1A68     		ldr	r2, [r3]
 9806              	.L745:
1048:src/xeq.c     **** 	}
 9807              		.loc 1 1048 10 view .LVU2572
1050:src/xeq.c     **** 	CLEAR_POLAR_READY;
 9808              		.loc 1 1050 2 view .LVU2573
 9809              	.LBB2090:
 9810              	.LBI2090:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 9811              		.loc 1 530 13 view .LVU2574
 9812              	.LBB2091:
 531:src/xeq.c     **** }
 9813              		.loc 1 531 2 view .LVU2575
 531:src/xeq.c     **** }
 9814              		.loc 1 531 20 is_stmt 0 view .LVU2576
 9815 003e 454B     		ldr	r3, .L751+4
 9816 0040 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 9817 0042 0120     		movs	r0, #1
 9818 0044 60F38711 		bfi	r1, r0, #6, #2
 9819 0048 1975     		strb	r1, [r3, #20]
 9820              	.LBE2091:
 9821              	.LBE2090:
1051:src/xeq.c     **** }
 9822              		.loc 1 1051 2 is_stmt 1 view .LVU2577
 9823 004a 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 9824 004e 0343     		orrs	r3, r3, r0
 9825 0050 82F8AD37 		strb	r3, [r2, #1965]
 9826              	.L732:
1052:src/xeq.c     **** #endif
 9827              		.loc 1 1052 1 is_stmt 0 view .LVU2578
 9828 0054 0AB0     		add	sp, sp, #40
 9829              		.cfi_remember_state
 9830              		.cfi_def_cfa_offset 8
 9831              		@ sp needed
 9832 0056 10BD     		pop	{r4, pc}
 9833              	.L744:
 9834              		.cfi_restore_state
 998:src/xeq.c     **** 			INIT_8;
 9835              		.loc 1 998 3 is_stmt 1 view .LVU2579
 998:src/xeq.c     **** 			INIT_8;
 9836              		.loc 1 998 7 is_stmt 0 view .LVU2580
 9837 0058 3D4B     		ldr	r3, .L751
 9838 005a 1A68     		ldr	r2, [r3]
1004:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9839              		.loc 1 1004 3 is_stmt 1 view .LVU2581
 998:src/xeq.c     **** 			INIT_8;
ARM GAS  /tmp/ccQlyisH.s 			page 315


 9840              		.loc 1 998 6 is_stmt 0 view .LVU2582
 9841 005c 92F8EA17 		ldrb	r1, [r2, #2026]	@ zero_extendqisi2
1004:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9842              		.loc 1 1004 3 view .LVU2583
 9843 0060 92F8AC07 		ldrb	r0, [r2, #1964]	@ zero_extendqisi2
 9844 0064 01F00803 		and	r3, r1, #8
 9845 0068 43F00103 		orr	r3, r3, #1
 9846 006c 20F00900 		bic	r0, r0, #9
1005:src/xeq.c     **** 		break;
 9847              		.loc 1 1005 22 view .LVU2584
 9848 0070 41F00801 		orr	r1, r1, #8
1004:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9849              		.loc 1 1004 3 view .LVU2585
 9850 0074 0343     		orrs	r3, r3, r0
1005:src/xeq.c     **** 		break;
 9851              		.loc 1 1005 22 view .LVU2586
 9852 0076 82F8EA17 		strb	r1, [r2, #2026]
1004:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9853              		.loc 1 1004 3 view .LVU2587
 9854 007a 82F8AC37 		strb	r3, [r2, #1964]
1005:src/xeq.c     **** 		break;
 9855              		.loc 1 1005 3 is_stmt 1 view .LVU2588
1006:src/xeq.c     **** 	case OP_CNO: // reset flag so that complex mode cannot be entered
 9856              		.loc 1 1006 3 view .LVU2589
 9857 007e DEE7     		b	.L745
 9858              	.L748:
 9859 0080 334C     		ldr	r4, .L751
 9860              	.L743:
1015:src/xeq.c     **** 		UNLOCK_C;
 9861              		.loc 1 1015 3 view .LVU2590
 9862 0082 0120     		movs	r0, #1
 9863 0084 FFF7FEFF 		bl	finish_cpx_entry
 9864              	.LVL707:
1016:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9865              		.loc 1 1016 3 view .LVU2591
 9866 0088 2368     		ldr	r3, [r4]
1018:src/xeq.c     **** 		return;
 9867              		.loc 1 1018 21 is_stmt 0 view .LVU2592
 9868 008a 3249     		ldr	r1, .L751+4
1016:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9869              		.loc 1 1016 3 view .LVU2593
 9870 008c 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
1017:src/xeq.c     **** 		State2.wascomplex = 0;
 9871              		.loc 1 1017 22 view .LVU2594
 9872 0090 93F8EA07 		ldrb	r0, [r3, #2026]	@ zero_extendqisi2
1016:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9873              		.loc 1 1016 3 view .LVU2595
 9874 0094 6FF30002 		bfc	r2, #0, #1
1017:src/xeq.c     **** 		State2.wascomplex = 0;
 9875              		.loc 1 1017 22 view .LVU2596
 9876 0098 C2F3C004 		ubfx	r4, r2, #3, #1
 9877 009c 64F3C300 		bfi	r0, r4, #3, #1
 9878 00a0 83F8EA07 		strb	r0, [r3, #2026]
1018:src/xeq.c     **** 		return;
 9879              		.loc 1 1018 21 view .LVU2597
 9880 00a4 087D     		ldrb	r0, [r1, #20]	@ zero_extendqisi2
1016:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
ARM GAS  /tmp/ccQlyisH.s 			page 316


 9881              		.loc 1 1016 3 view .LVU2598
 9882 00a6 83F8AC27 		strb	r2, [r3, #1964]
1017:src/xeq.c     **** 		State2.wascomplex = 0;
 9883              		.loc 1 1017 3 is_stmt 1 view .LVU2599
1018:src/xeq.c     **** 		return;
 9884              		.loc 1 1018 3 view .LVU2600
1018:src/xeq.c     **** 		return;
 9885              		.loc 1 1018 21 is_stmt 0 view .LVU2601
 9886 00aa 6FF38710 		bfc	r0, #6, #2
 9887 00ae 0875     		strb	r0, [r1, #20]
1019:src/xeq.c     **** 	case OP_C_MIM: // change sign of imaginary part
 9888              		.loc 1 1019 3 is_stmt 1 view .LVU2602
1052:src/xeq.c     **** #endif
 9889              		.loc 1 1052 1 is_stmt 0 view .LVU2603
 9890 00b0 0AB0     		add	sp, sp, #40
 9891              		.cfi_remember_state
 9892              		.cfi_def_cfa_offset 8
 9893              		@ sp needed
 9894 00b2 10BD     		pop	{r4, pc}
 9895              	.L741:
 9896              		.cfi_restore_state
 9897              	.LBB2092:
1030:src/xeq.c     **** 		getX(&x);
 9898              		.loc 1 1030 3 is_stmt 1 view .LVU2604
1031:src/xeq.c     **** 		dn_minus(&x, &x);
 9899              		.loc 1 1031 3 view .LVU2605
 9900              	.LVL708:
 9901              	.LBB2093:
 9902              	.LBI2093:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 9903              		.loc 1 815 12 view .LVU2606
 9904              	.LBB2094:
 816:src/xeq.c     **** }
 9905              		.loc 1 816 2 view .LVU2607
 816:src/xeq.c     **** }
 9906              		.loc 1 816 9 is_stmt 0 view .LVU2608
 9907 00b4 6421     		movs	r1, #100
 9908 00b6 01A8     		add	r0, sp, #4
 9909              	.LVL709:
 816:src/xeq.c     **** }
 9910              		.loc 1 816 9 view .LVU2609
 9911 00b8 FFF7FEFF 		bl	getRegister
 9912              	.LVL710:
 816:src/xeq.c     **** }
 9913              		.loc 1 816 9 view .LVU2610
 9914              	.LBE2094:
 9915              	.LBE2093:
1032:src/xeq.c     **** 		setX(&x);
 9916              		.loc 1 1032 3 is_stmt 1 view .LVU2611
 9917 00bc 01A9     		add	r1, sp, #4
 9918 00be 0846     		mov	r0, r1
 9919 00c0 FFF7FEFF 		bl	dn_minus
 9920              	.LVL711:
1033:src/xeq.c     **** 		}
 9921              		.loc 1 1033 3 view .LVU2612
 9922              	.LBB2095:
 9923              	.LBI2095:
ARM GAS  /tmp/ccQlyisH.s 			page 317


 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 9924              		.loc 1 819 6 view .LVU2613
 9925              	.LBB2096:
 820:src/xeq.c     **** }
 9926              		.loc 1 820 2 view .LVU2614
 9927 00c4 01A9     		add	r1, sp, #4
 9928              	.LVL712:
 820:src/xeq.c     **** }
 9929              		.loc 1 820 2 is_stmt 0 view .LVU2615
 9930 00c6 6420     		movs	r0, #100
 9931 00c8 FFF7FEFF 		bl	setRegister
 9932              	.LVL713:
 820:src/xeq.c     **** }
 9933              		.loc 1 820 2 view .LVU2616
 9934              	.LBE2096:
 9935              	.LBE2095:
 9936              	.LBE2092:
1035:src/xeq.c     **** 	case OP_C_IM: // zero real part
 9937              		.loc 1 1035 3 is_stmt 1 view .LVU2617
 9938 00cc 204B     		ldr	r3, .L751
 9939 00ce 1A68     		ldr	r2, [r3]
 9940 00d0 B5E7     		b	.L745
 9941              	.L740:
1040:src/xeq.c     **** 		break;
 9942              		.loc 1 1040 3 view .LVU2618
 9943              	.LBB2097:
 9944              	.LBI2097:
1523:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 9945              		.loc 1 1523 6 view .LVU2619
 9946              	.LBB2098:
1524:src/xeq.c     **** }
 9947              		.loc 1 1524 2 view .LVU2620
 9948 00d2 6520     		movs	r0, #101
 9949 00d4 FFF7FEFF 		bl	get_reg_n
 9950              	.LVL714:
 9951 00d8 FFF7FEFF 		bl	set_zero
 9952              	.LVL715:
 9953 00dc 1C4B     		ldr	r3, .L751
 9954 00de 1A68     		ldr	r2, [r3]
1525:src/xeq.c     **** 
 9955              		.loc 1 1525 1 is_stmt 0 view .LVU2621
 9956 00e0 ADE7     		b	.L745
 9957              	.L739:
 9958              	.LBE2098:
 9959              	.LBE2097:
1037:src/xeq.c     **** 		break;
 9960              		.loc 1 1037 3 is_stmt 1 view .LVU2622
 9961              	.LBB2099:
 9962              	.LBI2099:
1519:src/xeq.c     **** 	set_zero(StackBase);
 9963              		.loc 1 1519 6 view .LVU2623
 9964              	.LBB2100:
1520:src/xeq.c     **** }
 9965              		.loc 1 1520 2 view .LVU2624
 9966 00e2 1D4B     		ldr	r3, .L751+8
 9967 00e4 1868     		ldr	r0, [r3]
 9968 00e6 FFF7FEFF 		bl	set_zero
ARM GAS  /tmp/ccQlyisH.s 			page 318


 9969              	.LVL716:
 9970 00ea 194B     		ldr	r3, .L751
 9971 00ec 1A68     		ldr	r2, [r3]
1521:src/xeq.c     **** 
 9972              		.loc 1 1521 1 is_stmt 0 view .LVU2625
 9973 00ee A6E7     		b	.L745
 9974              	.L738:
 9975              	.LBE2100:
 9976              	.LBE2099:
1043:src/xeq.c     **** 		break;
 9977              		.loc 1 1043 3 is_stmt 1 view .LVU2626
 9978 00f0 174B     		ldr	r3, .L751
 9979 00f2 1A68     		ldr	r2, [r3]
 9980 00f4 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
 9981 00f8 6FF34513 		bfc	r3, #5, #1
 9982 00fc 82F8AC37 		strb	r3, [r2, #1964]
1044:src/xeq.c     **** 	case OP_CPXJ: // use j to display complex numbers
 9983              		.loc 1 1044 3 view .LVU2627
 9984 0100 9DE7     		b	.L745
 9985              	.L737:
1046:src/xeq.c     **** 		break;
 9986              		.loc 1 1046 3 view .LVU2628
 9987 0102 134B     		ldr	r3, .L751
 9988 0104 1A68     		ldr	r2, [r3]
 9989 0106 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
 9990 010a 43F02003 		orr	r3, r3, #32
 9991 010e 82F8AC37 		strb	r3, [r2, #1964]
1047:src/xeq.c     **** 	default:;
 9992              		.loc 1 1047 3 view .LVU2629
 9993 0112 94E7     		b	.L745
 9994              	.L736:
 992:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 9995              		.loc 1 992 10 view .LVU2630
 9996 0114 0E4B     		ldr	r3, .L751
 9997 0116 1A68     		ldr	r2, [r3]
 993:src/xeq.c     **** 		CLEAR_IMAG;
 9998              		.loc 1 993 3 view .LVU2631
 994:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
 9999              		.loc 1 994 3 view .LVU2632
 995:src/xeq.c     **** 		return;
 10000              		.loc 1 995 3 view .LVU2633
 993:src/xeq.c     **** 		CLEAR_IMAG;
 10001              		.loc 1 993 3 is_stmt 0 view .LVU2634
 10002 0118 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
 10003 011c 03F03903 		and	r3, r3, #57
 10004 0120 43F04003 		orr	r3, r3, #64
 10005 0124 82F8AC37 		strb	r3, [r2, #1964]
 996:src/xeq.c     **** 	case OP_C_ON: // start complex mode - only called if CPX_ENABLED and C_LOCK_OFF
 10006              		.loc 1 996 3 is_stmt 1 view .LVU2635
 10007 0128 94E7     		b	.L732
 10008              	.L734:
1008:src/xeq.c     **** 			SET_CPX_NO;
 10009              		.loc 1 1008 3 view .LVU2636
1008:src/xeq.c     **** 			SET_CPX_NO;
 10010              		.loc 1 1008 8 is_stmt 0 view .LVU2637
 10011 012a 094C     		ldr	r4, .L751
 10012 012c 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccQlyisH.s 			page 319


1008:src/xeq.c     **** 			SET_CPX_NO;
 10013              		.loc 1 1008 7 view .LVU2638
 10014 012e 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
1008:src/xeq.c     **** 			SET_CPX_NO;
 10015              		.loc 1 1008 6 view .LVU2639
 10016 0132 03F04101 		and	r1, r3, #65
 10017 0136 4129     		cmp	r1, #65
 10018 0138 04D0     		beq	.L747
1009:src/xeq.c     **** 			UNLOCK_C; //just in case
 10019              		.loc 1 1009 4 is_stmt 1 view .LVU2640
1010:src/xeq.c     **** 			return;
 10020              		.loc 1 1010 4 view .LVU2641
 10021 013a 23F04103 		bic	r3, r3, #65
 10022 013e 82F8AC37 		strb	r3, [r2, #1964]
1011:src/xeq.c     **** 		}
 10023              		.loc 1 1011 4 view .LVU2642
 10024 0142 87E7     		b	.L732
 10025              	.L747:
1013:src/xeq.c     **** 	case OP_C_OFF: // exit complex mode - only called if CPX_ENABLED and C_LOCK_ON
 10026              		.loc 1 1013 3 view .LVU2643
 10027 0144 6FF38613 		bfc	r3, #6, #1
 10028 0148 82F8AC37 		strb	r3, [r2, #1964]
 10029 014c 99E7     		b	.L743
 10030              	.L752:
 10031 014e 00BF     		.align	2
 10032              	.L751:
 10033 0150 00000000 		.word	main_ram
 10034 0154 00000000 		.word	StateWhileOn
 10035 0158 00000000 		.word	StackBase
 10036              		.cfi_endproc
 10037              	.LFE77:
 10039              		.section	.text.get_reg_n_int,"ax",%progbits
 10040              		.align	1
 10041              		.p2align 2,,3
 10042              		.global	get_reg_n_int
 10043              		.syntax unified
 10044              		.thumb
 10045              		.thumb_func
 10046              		.fpu fpv4-sp-d16
 10048              	get_reg_n_int:
 10049              	.LVL717:
 10050              	.LFB93:
1385:src/xeq.c     **** 	long long int ll;
 10051              		.loc 1 1385 40 view -0
 10052              		.cfi_startproc
 10053              		@ args = 0, pretend = 0, frame = 8
 10054              		@ frame_needed = 0, uses_anonymous_args = 0
1386:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
 10055              		.loc 1 1386 2 view .LVU2645
1387:src/xeq.c     **** 	return ll;
 10056              		.loc 1 1387 2 view .LVU2646
1385:src/xeq.c     **** 	long long int ll;
 10057              		.loc 1 1385 40 is_stmt 0 view .LVU2647
 10058 0000 00B5     		push	{lr}
 10059              		.cfi_def_cfa_offset 4
 10060              		.cfi_offset 14, -4
 10061 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccQlyisH.s 			page 320


 10062              		.cfi_def_cfa_offset 16
1387:src/xeq.c     **** 	return ll;
 10063              		.loc 1 1387 13 view .LVU2648
 10064 0004 FFF7FEFF 		bl	get_reg_n
 10065              	.LVL718:
1387:src/xeq.c     **** 	return ll;
 10066              		.loc 1 1387 2 view .LVU2649
 10067 0008 0822     		movs	r2, #8
1387:src/xeq.c     **** 	return ll;
 10068              		.loc 1 1387 13 view .LVU2650
 10069 000a 0146     		mov	r1, r0
1387:src/xeq.c     **** 	return ll;
 10070              		.loc 1 1387 2 view .LVU2651
 10071 000c 6846     		mov	r0, sp
 10072 000e FFF7FEFF 		bl	xcopy
 10073              	.LVL719:
1388:src/xeq.c     **** }
 10074              		.loc 1 1388 2 is_stmt 1 view .LVU2652
1389:src/xeq.c     **** 
 10075              		.loc 1 1389 1 is_stmt 0 view .LVU2653
 10076 0012 DDE90001 		ldrd	r0, [sp]
 10077 0016 03B0     		add	sp, sp, #12
 10078              		.cfi_def_cfa_offset 4
 10079              		@ sp needed
 10080 0018 5DF804FB 		ldr	pc, [sp], #4
 10081              		.cfi_endproc
 10082              	.LFE93:
 10084              		.section	.text.storcl_intop,"ax",%progbits
 10085              		.align	1
 10086              		.p2align 2,,3
 10087              		.syntax unified
 10088              		.thumb
 10089              		.thumb_func
 10090              		.fpu fpv4-sp-d16
 10092              	storcl_intop:
 10093              	.LVL720:
 10094              	.LFB115:
1654:src/xeq.c     **** 	long long int x, y;
 10095              		.loc 1 1654 83 is_stmt 1 view -0
 10096              		.cfi_startproc
 10097              		@ args = 0, pretend = 0, frame = 0
 10098              		@ frame_needed = 0, uses_anonymous_args = 0
1655:src/xeq.c     **** 
 10099              		.loc 1 1655 2 view .LVU2655
1657:src/xeq.c     **** 	y = get_reg_n_int(index);
 10100              		.loc 1 1657 2 view .LVU2656
 10101              	.LBB2101:
 10102              	.LBI2101:
1411:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10103              		.loc 1 1411 15 view .LVU2657
 10104              	.LBB2102:
1412:src/xeq.c     **** }
 10105              		.loc 1 1412 2 view .LVU2658
 10106              	.LBE2102:
 10107              	.LBE2101:
1654:src/xeq.c     **** 	long long int x, y;
 10108              		.loc 1 1654 83 is_stmt 0 view .LVU2659
ARM GAS  /tmp/ccQlyisH.s 			page 321


 10109 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 10110              		.cfi_def_cfa_offset 32
 10111              		.cfi_offset 3, -32
 10112              		.cfi_offset 4, -28
 10113              		.cfi_offset 5, -24
 10114              		.cfi_offset 6, -20
 10115              		.cfi_offset 7, -16
 10116              		.cfi_offset 8, -12
 10117              		.cfi_offset 9, -8
 10118              		.cfi_offset 14, -4
1654:src/xeq.c     **** 	long long int x, y;
 10119              		.loc 1 1654 83 view .LVU2660
 10120 0004 0446     		mov	r4, r0
 10121              	.LBB2106:
 10122              	.LBB2103:
1412:src/xeq.c     **** }
 10123              		.loc 1 1412 9 view .LVU2661
 10124 0006 6420     		movs	r0, #100
 10125              	.LVL721:
1412:src/xeq.c     **** }
 10126              		.loc 1 1412 9 view .LVU2662
 10127              	.LBE2103:
 10128              	.LBE2106:
1654:src/xeq.c     **** 	long long int x, y;
 10129              		.loc 1 1654 83 view .LVU2663
 10130 0008 8946     		mov	r9, r1
 10131 000a 9846     		mov	r8, r3
 10132 000c 1646     		mov	r6, r2
 10133              	.LBB2107:
 10134              	.LBB2104:
1412:src/xeq.c     **** }
 10135              		.loc 1 1412 9 view .LVU2664
 10136 000e FFF7FEFF 		bl	get_reg_n_int
 10137              	.LVL722:
1412:src/xeq.c     **** }
 10138              		.loc 1 1412 9 view .LVU2665
 10139 0012 0746     		mov	r7, r0
 10140              	.LBE2104:
 10141              	.LBE2107:
1658:src/xeq.c     **** 
 10142              		.loc 1 1658 6 view .LVU2666
 10143 0014 4846     		mov	r0, r9
 10144              	.LBB2108:
 10145              	.LBB2105:
1412:src/xeq.c     **** }
 10146              		.loc 1 1412 9 view .LVU2667
 10147 0016 0D46     		mov	r5, r1
 10148              	.LVL723:
1412:src/xeq.c     **** }
 10149              		.loc 1 1412 9 view .LVU2668
 10150              	.LBE2105:
 10151              	.LBE2108:
1658:src/xeq.c     **** 
 10152              		.loc 1 1658 2 is_stmt 1 view .LVU2669
1658:src/xeq.c     **** 
 10153              		.loc 1 1658 6 is_stmt 0 view .LVU2670
 10154 0018 FFF7FEFF 		bl	get_reg_n_int
ARM GAS  /tmp/ccQlyisH.s 			page 322


 10155              	.LVL724:
1660:src/xeq.c     **** 		const long long int t = x;
 10156              		.loc 1 1660 2 is_stmt 1 view .LVU2671
1660:src/xeq.c     **** 		const long long int t = x;
 10157              		.loc 1 1660 5 is_stmt 0 view .LVU2672
 10158 001c B8F1000F 		cmp	r8, #0
 10159 0020 05D0     		beq	.L756
 10160 0022 3A46     		mov	r2, r7
 10161 0024 2B46     		mov	r3, r5
 10162              	.LBB2109:
1662:src/xeq.c     **** 		y = t;
 10163              		.loc 1 1662 5 view .LVU2673
 10164 0026 0746     		mov	r7, r0
 10165              	.LVL725:
1662:src/xeq.c     **** 		y = t;
 10166              		.loc 1 1662 5 view .LVU2674
 10167 0028 0D46     		mov	r5, r1
 10168              	.LVL726:
1663:src/xeq.c     **** 	}
 10169              		.loc 1 1663 5 view .LVU2675
 10170 002a 1046     		mov	r0, r2
 10171              	.LVL727:
1663:src/xeq.c     **** 	}
 10172              		.loc 1 1663 5 view .LVU2676
 10173 002c 1946     		mov	r1, r3
 10174              	.LVL728:
 10175              	.L756:
1663:src/xeq.c     **** 	}
 10176              		.loc 1 1663 5 view .LVU2677
 10177              	.LBE2109:
1666:src/xeq.c     **** 	case 1:
 10178              		.loc 1 1666 2 is_stmt 1 view .LVU2678
 10179 002e 013C     		subs	r4, r4, #1
 10180 0030 052C     		cmp	r4, #5
 10181 0032 3AD8     		bhi	.L765
 10182 0034 DFE804F0 		tbb	[pc, r4]
 10183              	.L759:
 10184 0038 0C       		.byte	(.L764-.L759)/2
 10185 0039 15       		.byte	(.L763-.L759)/2
 10186 003a 1E       		.byte	(.L762-.L759)/2
 10187 003b 27       		.byte	(.L761-.L759)/2
 10188 003c 30       		.byte	(.L760-.L759)/2
 10189 003d 03       		.byte	(.L758-.L759)/2
 10190              		.p2align 1
 10191              	.L758:
1683:src/xeq.c     **** 		break;
 10192              		.loc 1 1683 3 view .LVU2679
1683:src/xeq.c     **** 		break;
 10193              		.loc 1 1683 8 is_stmt 0 view .LVU2680
 10194 003e 3A46     		mov	r2, r7
 10195 0040 2B46     		mov	r3, r5
 10196 0042 FFF7FEFF 		bl	intMax
 10197              	.LVL729:
1683:src/xeq.c     **** 		break;
 10198              		.loc 1 1683 6 view .LVU2681
 10199 0046 C6E90001 		strd	r0, [r6]
1684:src/xeq.c     **** 	default:
ARM GAS  /tmp/ccQlyisH.s 			page 323


 10200              		.loc 1 1684 3 is_stmt 1 view .LVU2682
1688:src/xeq.c     **** }
 10201              		.loc 1 1688 9 is_stmt 0 view .LVU2683
 10202 004a 0020     		movs	r0, #0
 10203              	.L755:
1689:src/xeq.c     **** 
 10204              		.loc 1 1689 1 view .LVU2684
 10205 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10206              	.LVL730:
 10207              	.L764:
1668:src/xeq.c     **** 		break;
 10208              		.loc 1 1668 3 is_stmt 1 view .LVU2685
1668:src/xeq.c     **** 		break;
 10209              		.loc 1 1668 8 is_stmt 0 view .LVU2686
 10210 0050 3A46     		mov	r2, r7
 10211 0052 2B46     		mov	r3, r5
 10212 0054 FFF7FEFF 		bl	intAdd
 10213              	.LVL731:
1668:src/xeq.c     **** 		break;
 10214              		.loc 1 1668 6 view .LVU2687
 10215 0058 C6E90001 		strd	r0, [r6]
1669:src/xeq.c     **** 	case 2:
 10216              		.loc 1 1669 3 is_stmt 1 view .LVU2688
1688:src/xeq.c     **** }
 10217              		.loc 1 1688 9 is_stmt 0 view .LVU2689
 10218 005c 0020     		movs	r0, #0
1689:src/xeq.c     **** 
 10219              		.loc 1 1689 1 view .LVU2690
 10220 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10221              	.LVL732:
 10222              	.L763:
1671:src/xeq.c     **** 		break;
 10223              		.loc 1 1671 3 is_stmt 1 view .LVU2691
1671:src/xeq.c     **** 		break;
 10224              		.loc 1 1671 8 is_stmt 0 view .LVU2692
 10225 0062 3A46     		mov	r2, r7
 10226 0064 2B46     		mov	r3, r5
 10227 0066 FFF7FEFF 		bl	intSubtract
 10228              	.LVL733:
1671:src/xeq.c     **** 		break;
 10229              		.loc 1 1671 6 view .LVU2693
 10230 006a C6E90001 		strd	r0, [r6]
1672:src/xeq.c     **** 	case 3:
 10231              		.loc 1 1672 3 is_stmt 1 view .LVU2694
1688:src/xeq.c     **** }
 10232              		.loc 1 1688 9 is_stmt 0 view .LVU2695
 10233 006e 0020     		movs	r0, #0
1689:src/xeq.c     **** 
 10234              		.loc 1 1689 1 view .LVU2696
 10235 0070 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10236              	.LVL734:
 10237              	.L762:
1674:src/xeq.c     **** 		break;
 10238              		.loc 1 1674 3 is_stmt 1 view .LVU2697
1674:src/xeq.c     **** 		break;
 10239              		.loc 1 1674 8 is_stmt 0 view .LVU2698
 10240 0074 3A46     		mov	r2, r7
ARM GAS  /tmp/ccQlyisH.s 			page 324


 10241 0076 2B46     		mov	r3, r5
 10242 0078 FFF7FEFF 		bl	intMultiply
 10243              	.LVL735:
1674:src/xeq.c     **** 		break;
 10244              		.loc 1 1674 6 view .LVU2699
 10245 007c C6E90001 		strd	r0, [r6]
1675:src/xeq.c     **** 	case 4:
 10246              		.loc 1 1675 3 is_stmt 1 view .LVU2700
1688:src/xeq.c     **** }
 10247              		.loc 1 1688 9 is_stmt 0 view .LVU2701
 10248 0080 0020     		movs	r0, #0
1689:src/xeq.c     **** 
 10249              		.loc 1 1689 1 view .LVU2702
 10250 0082 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10251              	.LVL736:
 10252              	.L761:
1677:src/xeq.c     **** 		break;
 10253              		.loc 1 1677 3 is_stmt 1 view .LVU2703
1677:src/xeq.c     **** 		break;
 10254              		.loc 1 1677 8 is_stmt 0 view .LVU2704
 10255 0086 3A46     		mov	r2, r7
 10256 0088 2B46     		mov	r3, r5
 10257 008a FFF7FEFF 		bl	intDivide
 10258              	.LVL737:
1677:src/xeq.c     **** 		break;
 10259              		.loc 1 1677 6 view .LVU2705
 10260 008e C6E90001 		strd	r0, [r6]
1678:src/xeq.c     **** 	case 5:
 10261              		.loc 1 1678 3 is_stmt 1 view .LVU2706
1688:src/xeq.c     **** }
 10262              		.loc 1 1688 9 is_stmt 0 view .LVU2707
 10263 0092 0020     		movs	r0, #0
1689:src/xeq.c     **** 
 10264              		.loc 1 1689 1 view .LVU2708
 10265 0094 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10266              	.LVL738:
 10267              	.L760:
1680:src/xeq.c     **** 		break;
 10268              		.loc 1 1680 3 is_stmt 1 view .LVU2709
1680:src/xeq.c     **** 		break;
 10269              		.loc 1 1680 8 is_stmt 0 view .LVU2710
 10270 0098 3A46     		mov	r2, r7
 10271 009a 2B46     		mov	r3, r5
 10272 009c FFF7FEFF 		bl	intMin
 10273              	.LVL739:
1680:src/xeq.c     **** 		break;
 10274              		.loc 1 1680 6 view .LVU2711
 10275 00a0 C6E90001 		strd	r0, [r6]
1681:src/xeq.c     **** 	case 6:
 10276              		.loc 1 1681 3 is_stmt 1 view .LVU2712
1688:src/xeq.c     **** }
 10277              		.loc 1 1688 9 is_stmt 0 view .LVU2713
 10278 00a4 0020     		movs	r0, #0
1689:src/xeq.c     **** 
 10279              		.loc 1 1689 1 view .LVU2714
 10280 00a6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10281              	.LVL740:
ARM GAS  /tmp/ccQlyisH.s 			page 325


 10282              	.L765:
1688:src/xeq.c     **** }
 10283              		.loc 1 1688 9 view .LVU2715
 10284 00aa 0120     		movs	r0, #1
 10285              	.LVL741:
1688:src/xeq.c     **** }
 10286              		.loc 1 1688 9 view .LVU2716
 10287 00ac CEE7     		b	.L755
 10288              		.cfi_endproc
 10289              	.LFE115:
 10291 00ae 00BF     		.section	.text.incdec,"ax",%progbits
 10292              		.align	1
 10293              		.p2align 2,,3
 10294              		.syntax unified
 10295              		.thumb
 10296              		.thumb_func
 10297              		.fpu fpv4-sp-d16
 10299              	incdec:
 10300              	.LVL742:
 10301              	.LFB191:
3363:src/xeq.c     **** 	if (is_intmode()) {
 10302              		.loc 1 3363 46 is_stmt 1 view -0
 10303              		.cfi_startproc
 10304              		@ args = 0, pretend = 0, frame = 80
 10305              		@ frame_needed = 0, uses_anonymous_args = 0
3364:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10306              		.loc 1 3364 2 view .LVU2718
3364:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10307              		.loc 1 3364 6 is_stmt 0 view .LVU2719
 10308 0000 244B     		ldr	r3, .L780
3363:src/xeq.c     **** 	if (is_intmode()) {
 10309              		.loc 1 3363 46 view .LVU2720
 10310 0002 70B5     		push	{r4, r5, r6, lr}
 10311              		.cfi_def_cfa_offset 16
 10312              		.cfi_offset 4, -16
 10313              		.cfi_offset 5, -12
 10314              		.cfi_offset 6, -8
 10315              		.cfi_offset 14, -4
3364:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10316              		.loc 1 3364 6 view .LVU2721
 10317 0004 1B68     		ldr	r3, [r3]
 10318 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3364:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10319              		.loc 1 3364 5 view .LVU2722
 10320 000a DB07     		lsls	r3, r3, #31
3363:src/xeq.c     **** 	if (is_intmode()) {
 10321              		.loc 1 3363 46 view .LVU2723
 10322 000c 94B0     		sub	sp, sp, #80
 10323              		.cfi_def_cfa_offset 96
3363:src/xeq.c     **** 	if (is_intmode()) {
 10324              		.loc 1 3363 46 view .LVU2724
 10325 000e 0D46     		mov	r5, r1
 10326 0010 0446     		mov	r4, r0
3364:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10327              		.loc 1 3364 5 view .LVU2725
 10328 0012 1ED5     		bpl	.L771
 10329              	.LVL743:
ARM GAS  /tmp/ccQlyisH.s 			page 326


 10330              	.LBB2117:
 10331              	.LBI2117:
3363:src/xeq.c     **** 	if (is_intmode()) {
 10332              		.loc 1 3363 12 is_stmt 1 view .LVU2726
 10333              	.LBB2118:
3365:src/xeq.c     **** 		int xs;
 10334              		.loc 1 3365 3 view .LVU2727
3365:src/xeq.c     **** 		int xs;
 10335              		.loc 1 3365 21 is_stmt 0 view .LVU2728
 10336 0014 FFF7FEFF 		bl	get_reg_n_int
 10337              	.LVL744:
3366:src/xeq.c     **** 		unsigned long long int xv;
 10338              		.loc 1 3366 3 is_stmt 1 view .LVU2729
3367:src/xeq.c     **** 
 10339              		.loc 1 3367 3 view .LVU2730
3369:src/xeq.c     **** 			x = intAdd(x, 1LL);
 10340              		.loc 1 3369 3 view .LVU2731
3370:src/xeq.c     **** 		else
 10341              		.loc 1 3370 8 is_stmt 0 view .LVU2732
 10342 0018 0122     		movs	r2, #1
 10343 001a 0023     		movs	r3, #0
3369:src/xeq.c     **** 			x = intAdd(x, 1LL);
 10344              		.loc 1 3369 6 view .LVU2733
 10345 001c 002D     		cmp	r5, #0
 10346 001e 33D1     		bne	.L778
3372:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10347              		.loc 1 3372 4 is_stmt 1 view .LVU2734
3372:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10348              		.loc 1 3372 8 is_stmt 0 view .LVU2735
 10349 0020 FFF7FEFF 		bl	intSubtract
 10350              	.LVL745:
3372:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10351              		.loc 1 3372 8 view .LVU2736
 10352 0024 0646     		mov	r6, r0
 10353 0026 0D46     		mov	r5, r1
 10354              	.LVL746:
 10355              	.L773:
3373:src/xeq.c     **** 
 10356              		.loc 1 3373 3 is_stmt 1 view .LVU2737
 10357              	.LBB2119:
 10358              	.LBB2120:
1392:src/xeq.c     **** }
 10359              		.loc 1 1392 8 is_stmt 0 view .LVU2738
 10360 0028 2046     		mov	r0, r4
 10361 002a CDE90A65 		strd	r6, r5, [sp, #40]
 10362              	.LVL747:
1392:src/xeq.c     **** }
 10363              		.loc 1 1392 8 view .LVU2739
 10364              	.LBE2120:
 10365              	.LBI2119:
1391:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10366              		.loc 1 1391 6 is_stmt 1 view .LVU2740
 10367              	.LBB2121:
1392:src/xeq.c     **** }
 10368              		.loc 1 1392 2 view .LVU2741
1392:src/xeq.c     **** }
 10369              		.loc 1 1392 8 is_stmt 0 view .LVU2742
ARM GAS  /tmp/ccQlyisH.s 			page 327


 10370 002e FFF7FEFF 		bl	get_reg_n
 10371              	.LVL748:
1392:src/xeq.c     **** }
 10372              		.loc 1 1392 2 view .LVU2743
 10373 0032 0AA9     		add	r1, sp, #40
 10374 0034 0822     		movs	r2, #8
 10375 0036 FFF7FEFF 		bl	xcopy
 10376              	.LVL749:
1392:src/xeq.c     **** }
 10377              		.loc 1 1392 2 view .LVU2744
 10378              	.LBE2121:
 10379              	.LBE2119:
3375:src/xeq.c     **** 		return xv != 0;
 10380              		.loc 1 3375 3 is_stmt 1 view .LVU2745
3375:src/xeq.c     **** 		return xv != 0;
 10381              		.loc 1 3375 8 is_stmt 0 view .LVU2746
 10382 003a 0AAA     		add	r2, sp, #40
 10383 003c 3046     		mov	r0, r6
 10384 003e 2946     		mov	r1, r5
 10385 0040 FFF7FEFF 		bl	extract_value
 10386              	.LVL750:
3376:src/xeq.c     **** 	} else {
 10387              		.loc 1 3376 3 is_stmt 1 view .LVU2747
3376:src/xeq.c     **** 	} else {
 10388              		.loc 1 3376 13 is_stmt 0 view .LVU2748
 10389 0044 50EA0103 		orrs	r3, r0, r1
 10390 0048 14BF     		ite	ne
 10391 004a 0120     		movne	r0, #1
 10392              	.LVL751:
3376:src/xeq.c     **** 	} else {
 10393              		.loc 1 3376 13 view .LVU2749
 10394 004c 0020     		moveq	r0, #0
 10395              	.LVL752:
3376:src/xeq.c     **** 	} else {
 10396              		.loc 1 3376 13 view .LVU2750
 10397              	.LBE2118:
 10398              	.LBE2117:
3389:src/xeq.c     **** 
 10399              		.loc 1 3389 1 view .LVU2751
 10400 004e 14B0     		add	sp, sp, #80
 10401              		.cfi_remember_state
 10402              		.cfi_def_cfa_offset 16
 10403              		@ sp needed
 10404 0050 70BD     		pop	{r4, r5, r6, pc}
 10405              	.LVL753:
 10406              	.L771:
 10407              		.cfi_restore_state
 10408              	.LBB2123:
3378:src/xeq.c     **** 
 10409              		.loc 1 3378 3 is_stmt 1 view .LVU2752
3380:src/xeq.c     **** 		if (inc)
 10410              		.loc 1 3380 3 view .LVU2753
 10411 0052 01A8     		add	r0, sp, #4
 10412              	.LVL754:
3380:src/xeq.c     **** 		if (inc)
 10413              		.loc 1 3380 3 is_stmt 0 view .LVU2754
 10414 0054 2146     		mov	r1, r4
ARM GAS  /tmp/ccQlyisH.s 			page 328


 10415              	.LVL755:
3380:src/xeq.c     **** 		if (inc)
 10416              		.loc 1 3380 3 view .LVU2755
 10417 0056 FFF7FEFF 		bl	getRegister
 10418              	.LVL756:
3381:src/xeq.c     **** 			dn_inc(&x);
 10419              		.loc 1 3381 3 is_stmt 1 view .LVU2756
3382:src/xeq.c     **** 		else
 10420              		.loc 1 3382 4 is_stmt 0 view .LVU2757
 10421 005a 01A8     		add	r0, sp, #4
3381:src/xeq.c     **** 			dn_inc(&x);
 10422              		.loc 1 3381 6 view .LVU2758
 10423 005c 8DB9     		cbnz	r5, .L779
3384:src/xeq.c     **** 		setRegister(arg, &x);
 10424              		.loc 1 3384 4 is_stmt 1 view .LVU2759
 10425 005e FFF7FEFF 		bl	dn_dec
 10426              	.LVL757:
 10427              	.L776:
3385:src/xeq.c     **** 		decNumberTrunc(&y, &x);
 10428              		.loc 1 3385 3 view .LVU2760
 10429 0062 2046     		mov	r0, r4
 10430 0064 01A9     		add	r1, sp, #4
 10431 0066 FFF7FEFF 		bl	setRegister
 10432              	.LVL758:
3386:src/xeq.c     **** 		return ! dn_eq0(&y);
 10433              		.loc 1 3386 3 view .LVU2761
 10434 006a 01A9     		add	r1, sp, #4
 10435 006c 0AA8     		add	r0, sp, #40
 10436 006e FFF7FEFF 		bl	decNumberTrunc
 10437              	.LVL759:
3387:src/xeq.c     **** 	}
 10438              		.loc 1 3387 3 view .LVU2762
3387:src/xeq.c     **** 	}
 10439              		.loc 1 3387 12 is_stmt 0 view .LVU2763
 10440 0072 0AA8     		add	r0, sp, #40
 10441 0074 FFF7FEFF 		bl	dn_eq0
 10442              	.LVL760:
3387:src/xeq.c     **** 	}
 10443              		.loc 1 3387 10 view .LVU2764
 10444 0078 B0FA80F0 		clz	r0, r0
 10445 007c 4009     		lsrs	r0, r0, #5
 10446              	.LBE2123:
3389:src/xeq.c     **** 
 10447              		.loc 1 3389 1 view .LVU2765
 10448 007e 14B0     		add	sp, sp, #80
 10449              		.cfi_remember_state
 10450              		.cfi_def_cfa_offset 16
 10451              		@ sp needed
 10452 0080 70BD     		pop	{r4, r5, r6, pc}
 10453              	.LVL761:
 10454              	.L779:
 10455              		.cfi_restore_state
 10456              	.LBB2124:
3382:src/xeq.c     **** 		else
 10457              		.loc 1 3382 4 is_stmt 1 view .LVU2766
 10458 0082 FFF7FEFF 		bl	dn_inc
 10459              	.LVL762:
ARM GAS  /tmp/ccQlyisH.s 			page 329


 10460 0086 ECE7     		b	.L776
 10461              	.LVL763:
 10462              	.L778:
3382:src/xeq.c     **** 		else
 10463              		.loc 1 3382 4 is_stmt 0 view .LVU2767
 10464              	.LBE2124:
 10465              	.LBB2125:
 10466              	.LBB2122:
3370:src/xeq.c     **** 		else
 10467              		.loc 1 3370 4 is_stmt 1 view .LVU2768
3370:src/xeq.c     **** 		else
 10468              		.loc 1 3370 8 is_stmt 0 view .LVU2769
 10469 0088 FFF7FEFF 		bl	intAdd
 10470              	.LVL764:
3370:src/xeq.c     **** 		else
 10471              		.loc 1 3370 8 view .LVU2770
 10472 008c 0646     		mov	r6, r0
 10473 008e 0D46     		mov	r5, r1
 10474              	.LVL765:
3370:src/xeq.c     **** 		else
 10475              		.loc 1 3370 8 view .LVU2771
 10476 0090 CAE7     		b	.L773
 10477              	.L781:
 10478 0092 00BF     		.align	2
 10479              	.L780:
 10480 0094 00000000 		.word	main_ram
 10481              	.LBE2122:
 10482              	.LBE2125:
 10483              		.cfi_endproc
 10484              	.LFE191:
 10486              		.section	.text.set_reg_n_int,"ax",%progbits
 10487              		.align	1
 10488              		.p2align 2,,3
 10489              		.global	set_reg_n_int
 10490              		.syntax unified
 10491              		.thumb
 10492              		.thumb_func
 10493              		.fpu fpv4-sp-d16
 10495              	set_reg_n_int:
 10496              	.LVL766:
 10497              	.LFB94:
1391:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10498              		.loc 1 1391 49 is_stmt 1 view -0
 10499              		.cfi_startproc
 10500              		@ args = 0, pretend = 0, frame = 8
 10501              		@ frame_needed = 0, uses_anonymous_args = 0
1392:src/xeq.c     **** }
 10502              		.loc 1 1392 2 view .LVU2773
1391:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10503              		.loc 1 1391 49 is_stmt 0 view .LVU2774
 10504 0000 00B5     		push	{lr}
 10505              		.cfi_def_cfa_offset 4
 10506              		.cfi_offset 14, -4
 10507 0002 83B0     		sub	sp, sp, #12
 10508              		.cfi_def_cfa_offset 16
1391:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10509              		.loc 1 1391 49 view .LVU2775
ARM GAS  /tmp/ccQlyisH.s 			page 330


 10510 0004 CDE90023 		strd	r2, [sp]
1392:src/xeq.c     **** }
 10511              		.loc 1 1392 8 view .LVU2776
 10512 0008 FFF7FEFF 		bl	get_reg_n
 10513              	.LVL767:
1392:src/xeq.c     **** }
 10514              		.loc 1 1392 2 view .LVU2777
 10515 000c 0822     		movs	r2, #8
 10516 000e 6946     		mov	r1, sp
 10517 0010 FFF7FEFF 		bl	xcopy
 10518              	.LVL768:
1393:src/xeq.c     **** 
 10519              		.loc 1 1393 1 view .LVU2778
 10520 0014 03B0     		add	sp, sp, #12
 10521              		.cfi_def_cfa_offset 4
 10522              		@ sp needed
 10523 0016 5DF804FB 		ldr	pc, [sp], #4
 10524              		.cfi_endproc
 10525              	.LFE94:
 10527 001a 00BF     		.section	.text.get_reg_n_int_sgn,"ax",%progbits
 10528              		.align	1
 10529              		.p2align 2,,3
 10530              		.global	get_reg_n_int_sgn
 10531              		.syntax unified
 10532              		.thumb
 10533              		.thumb_func
 10534              		.fpu fpv4-sp-d16
 10536              	get_reg_n_int_sgn:
 10537              	.LVL769:
 10538              	.LFB95:
1397:src/xeq.c     **** 	if (is_intmode()) {
 10539              		.loc 1 1397 63 is_stmt 1 view -0
 10540              		.cfi_startproc
 10541              		@ args = 0, pretend = 0, frame = 40
 10542              		@ frame_needed = 0, uses_anonymous_args = 0
1398:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10543              		.loc 1 1398 2 view .LVU2780
1398:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10544              		.loc 1 1398 6 is_stmt 0 view .LVU2781
 10545 0000 0C4B     		ldr	r3, .L788
1397:src/xeq.c     **** 	if (is_intmode()) {
 10546              		.loc 1 1397 63 view .LVU2782
 10547 0002 10B5     		push	{r4, lr}
 10548              		.cfi_def_cfa_offset 8
 10549              		.cfi_offset 4, -8
 10550              		.cfi_offset 14, -4
1398:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10551              		.loc 1 1398 6 view .LVU2783
 10552 0004 1B68     		ldr	r3, [r3]
 10553 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1398:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10554              		.loc 1 1398 5 view .LVU2784
 10555 000a DB07     		lsls	r3, r3, #31
1397:src/xeq.c     **** 	if (is_intmode()) {
 10556              		.loc 1 1397 63 view .LVU2785
 10557 000c 8AB0     		sub	sp, sp, #40
 10558              		.cfi_def_cfa_offset 48
ARM GAS  /tmp/ccQlyisH.s 			page 331


1397:src/xeq.c     **** 	if (is_intmode()) {
 10559              		.loc 1 1397 63 view .LVU2786
 10560 000e 0C46     		mov	r4, r1
1398:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10561              		.loc 1 1398 5 view .LVU2787
 10562 0010 06D5     		bpl	.L785
 10563              	.LVL770:
 10564              	.LBB2130:
 10565              	.LBI2130:
1397:src/xeq.c     **** 	if (is_intmode()) {
 10566              		.loc 1 1397 24 is_stmt 1 view .LVU2788
 10567              	.LBB2131:
1399:src/xeq.c     **** 	} else {
 10568              		.loc 1 1399 3 view .LVU2789
1399:src/xeq.c     **** 	} else {
 10569              		.loc 1 1399 10 is_stmt 0 view .LVU2790
 10570 0012 FFF7FEFF 		bl	get_reg_n_int
 10571              	.LVL771:
1399:src/xeq.c     **** 	} else {
 10572              		.loc 1 1399 10 view .LVU2791
 10573 0016 2246     		mov	r2, r4
 10574 0018 FFF7FEFF 		bl	extract_value
 10575              	.LVL772:
1399:src/xeq.c     **** 	} else {
 10576              		.loc 1 1399 10 view .LVU2792
 10577              	.LBE2131:
 10578              	.LBE2130:
1406:src/xeq.c     **** 
 10579              		.loc 1 1406 1 view .LVU2793
 10580 001c 0AB0     		add	sp, sp, #40
 10581              		.cfi_remember_state
 10582              		.cfi_def_cfa_offset 8
 10583              		@ sp needed
 10584 001e 10BD     		pop	{r4, pc}
 10585              	.LVL773:
 10586              	.L785:
 10587              		.cfi_restore_state
1406:src/xeq.c     **** 
 10588              		.loc 1 1406 1 view .LVU2794
 10589 0020 0146     		mov	r1, r0
 10590              	.LVL774:
 10591              	.LBB2132:
1401:src/xeq.c     **** 
 10592              		.loc 1 1401 3 is_stmt 1 view .LVU2795
1403:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 10593              		.loc 1 1403 3 view .LVU2796
 10594 0022 01A8     		add	r0, sp, #4
 10595              	.LVL775:
1403:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 10596              		.loc 1 1403 3 is_stmt 0 view .LVU2797
 10597 0024 FFF7FEFF 		bl	getRegister
 10598              	.LVL776:
1404:src/xeq.c     **** 	}
 10599              		.loc 1 1404 3 is_stmt 1 view .LVU2798
1404:src/xeq.c     **** 	}
 10600              		.loc 1 1404 10 is_stmt 0 view .LVU2799
 10601 0028 2146     		mov	r1, r4
ARM GAS  /tmp/ccQlyisH.s 			page 332


 10602 002a 01A8     		add	r0, sp, #4
 10603 002c FFF7FEFF 		bl	dn_to_ull
 10604              	.LVL777:
 10605              	.LBE2132:
1406:src/xeq.c     **** 
 10606              		.loc 1 1406 1 view .LVU2800
 10607 0030 0AB0     		add	sp, sp, #40
 10608              		.cfi_def_cfa_offset 8
 10609              		@ sp needed
 10610 0032 10BD     		pop	{r4, pc}
 10611              	.LVL778:
 10612              	.L789:
1406:src/xeq.c     **** 
 10613              		.loc 1 1406 1 view .LVU2801
 10614              		.align	2
 10615              	.L788:
 10616 0034 00000000 		.word	main_ram
 10617              		.cfi_endproc
 10618              	.LFE95:
 10620              		.section	.text.get_keycode_from_reg,"ax",%progbits
 10621              		.align	1
 10622              		.p2align 2,,3
 10623              		.syntax unified
 10624              		.thumb
 10625              		.thumb_func
 10626              		.fpu fpv4-sp-d16
 10628              	get_keycode_from_reg:
 10629              	.LVL779:
 10630              	.LFB139:
2030:src/xeq.c     **** 	int sgn;
 10631              		.loc 1 2030 1 is_stmt 1 view -0
 10632              		.cfi_startproc
 10633              		@ args = 0, pretend = 0, frame = 8
 10634              		@ frame_needed = 0, uses_anonymous_args = 0
2031:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
 10635              		.loc 1 2031 2 view .LVU2803
2032:src/xeq.c     **** 	if ( c < 0 )
 10636              		.loc 1 2032 2 view .LVU2804
2030:src/xeq.c     **** 	int sgn;
 10637              		.loc 1 2030 1 is_stmt 0 view .LVU2805
 10638 0000 00B5     		push	{lr}
 10639              		.cfi_def_cfa_offset 4
 10640              		.cfi_offset 14, -4
 10641 0002 83B0     		sub	sp, sp, #12
 10642              		.cfi_def_cfa_offset 16
2032:src/xeq.c     **** 	if ( c < 0 )
 10643              		.loc 1 2032 44 view .LVU2806
 10644 0004 01A9     		add	r1, sp, #4
 10645 0006 FFF7FEFF 		bl	get_reg_n_int_sgn
 10646              	.LVL780:
2032:src/xeq.c     **** 	if ( c < 0 )
 10647              		.loc 1 2032 16 view .LVU2807
 10648 000a FFF7FEFF 		bl	row_column_to_keycode
 10649              	.LVL781:
2033:src/xeq.c     **** 		report_err(ERR_RANGE);
 10650              		.loc 1 2033 2 is_stmt 1 view .LVU2808
2033:src/xeq.c     **** 		report_err(ERR_RANGE);
ARM GAS  /tmp/ccQlyisH.s 			page 333


 10651              		.loc 1 2033 5 is_stmt 0 view .LVU2809
 10652 000e 0028     		cmp	r0, #0
2033:src/xeq.c     **** 		report_err(ERR_RANGE);
 10653              		.loc 1 2033 5 view .LVU2810
 10654 0010 02DB     		blt	.L793
 10655              	.L790:
2036:src/xeq.c     **** 
 10656              		.loc 1 2036 1 view .LVU2811
 10657 0012 03B0     		add	sp, sp, #12
 10658              		.cfi_remember_state
 10659              		.cfi_def_cfa_offset 4
 10660              		@ sp needed
 10661 0014 5DF804FB 		ldr	pc, [sp], #4
 10662              	.L793:
 10663              		.cfi_restore_state
 10664              	.LBB2139:
 10665              	.LBI2139:
2029:src/xeq.c     **** {
 10666              		.loc 1 2029 12 is_stmt 1 view .LVU2812
 10667              	.LVL782:
 10668              	.LBB2140:
2034:src/xeq.c     **** 	return c;
 10669              		.loc 1 2034 3 view .LVU2813
 10670              	.LBB2141:
 10671              	.LBI2141:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10672              		.loc 1 537 5 view .LVU2814
 10673              	.LBB2142:
 538:src/xeq.c     **** 		Error = e;
 10674              		.loc 1 538 2 view .LVU2815
 538:src/xeq.c     **** 		Error = e;
 10675              		.loc 1 538 12 is_stmt 0 view .LVU2816
 10676 0018 044B     		ldr	r3, .L794
 538:src/xeq.c     **** 		Error = e;
 10677              		.loc 1 538 5 view .LVU2817
 10678 001a 1A68     		ldr	r2, [r3]
 10679 001c 002A     		cmp	r2, #0
 10680 001e F8D1     		bne	.L790
 10681              	.LVL783:
 10682              	.LBB2143:
 10683              	.LBI2143:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10684              		.loc 1 537 5 is_stmt 1 view .LVU2818
 10685              	.LBB2144:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 10686              		.loc 1 539 3 view .LVU2819
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 10687              		.loc 1 539 9 is_stmt 0 view .LVU2820
 10688 0020 0822     		movs	r2, #8
 10689 0022 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 10690              		.loc 1 540 3 is_stmt 1 view .LVU2821
 10691              	.LVL784:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 10692              		.loc 1 540 3 is_stmt 0 view .LVU2822
 10693              	.LBE2144:
 10694              	.LBE2143:
ARM GAS  /tmp/ccQlyisH.s 			page 334


 10695              	.LBE2142:
 10696              	.LBE2141:
 10697              	.LBE2140:
 10698              	.LBE2139:
2035:src/xeq.c     **** }
 10699              		.loc 1 2035 2 is_stmt 1 view .LVU2823
2036:src/xeq.c     **** 
 10700              		.loc 1 2036 1 is_stmt 0 view .LVU2824
 10701 0024 03B0     		add	sp, sp, #12
 10702              		.cfi_def_cfa_offset 4
 10703              		@ sp needed
 10704 0026 5DF804FB 		ldr	pc, [sp], #4
 10705              	.L795:
 10706 002a 00BF     		.align	2
 10707              	.L794:
 10708 002c 00000000 		.word	Error
 10709              		.cfi_endproc
 10710              	.LFE139:
 10712              		.section	.text.getX_int,"ax",%progbits
 10713              		.align	1
 10714              		.p2align 2,,3
 10715              		.global	getX_int
 10716              		.syntax unified
 10717              		.thumb
 10718              		.thumb_func
 10719              		.fpu fpv4-sp-d16
 10721              	getX_int:
 10722              	.LFB96:
1411:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10723              		.loc 1 1411 30 is_stmt 1 view -0
 10724              		.cfi_startproc
 10725              		@ args = 0, pretend = 0, frame = 0
 10726              		@ frame_needed = 0, uses_anonymous_args = 0
 10727              		@ link register save eliminated.
1412:src/xeq.c     **** }
 10728              		.loc 1 1412 2 view .LVU2826
1412:src/xeq.c     **** }
 10729              		.loc 1 1412 9 is_stmt 0 view .LVU2827
 10730 0000 6420     		movs	r0, #100
 10731 0002 FFF7FEBF 		b	get_reg_n_int
 10732              	.LVL785:
 10733              		.cfi_endproc
 10734              	.LFE96:
 10736 0006 00BF     		.section	.text.getX_int_sgn,"ax",%progbits
 10737              		.align	1
 10738              		.p2align 2,,3
 10739              		.global	getX_int_sgn
 10740              		.syntax unified
 10741              		.thumb
 10742              		.thumb_func
 10743              		.fpu fpv4-sp-d16
 10745              	getX_int_sgn:
 10746              	.LVL786:
 10747              	.LFB97:
1415:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10748              		.loc 1 1415 47 is_stmt 1 view -0
 10749              		.cfi_startproc
ARM GAS  /tmp/ccQlyisH.s 			page 335


 10750              		@ args = 0, pretend = 0, frame = 0
 10751              		@ frame_needed = 0, uses_anonymous_args = 0
 10752              		@ link register save eliminated.
1416:src/xeq.c     **** }
 10753              		.loc 1 1416 2 view .LVU2829
1415:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10754              		.loc 1 1415 47 is_stmt 0 view .LVU2830
 10755 0000 0146     		mov	r1, r0
1416:src/xeq.c     **** }
 10756              		.loc 1 1416 9 view .LVU2831
 10757 0002 6420     		movs	r0, #100
 10758              	.LVL787:
1416:src/xeq.c     **** }
 10759              		.loc 1 1416 9 view .LVU2832
 10760 0004 FFF7FEBF 		b	get_reg_n_int_sgn
 10761              	.LVL788:
1416:src/xeq.c     **** }
 10762              		.loc 1 1416 9 view .LVU2833
 10763              		.cfi_endproc
 10764              	.LFE97:
 10766              		.section	.text.set_reg_n_int_sgn,"ax",%progbits
 10767              		.align	1
 10768              		.p2align 2,,3
 10769              		.global	set_reg_n_int_sgn
 10770              		.syntax unified
 10771              		.thumb
 10772              		.thumb_func
 10773              		.fpu fpv4-sp-d16
 10775              	set_reg_n_int_sgn:
 10776              	.LVL789:
 10777              	.LFB99:
1436:src/xeq.c     **** 	if (is_intmode()) {
 10778              		.loc 1 1436 72 is_stmt 1 view -0
 10779              		.cfi_startproc
 10780              		@ args = 4, pretend = 0, frame = 40
 10781              		@ frame_needed = 0, uses_anonymous_args = 0
1437:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10782              		.loc 1 1437 2 view .LVU2835
1437:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10783              		.loc 1 1437 6 is_stmt 0 view .LVU2836
 10784 0000 1749     		ldr	r1, .L808
1436:src/xeq.c     **** 	if (is_intmode()) {
 10785              		.loc 1 1436 72 view .LVU2837
 10786 0002 30B5     		push	{r4, r5, lr}
 10787              		.cfi_def_cfa_offset 12
 10788              		.cfi_offset 4, -12
 10789              		.cfi_offset 5, -8
 10790              		.cfi_offset 14, -4
1437:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10791              		.loc 1 1437 6 view .LVU2838
 10792 0004 0968     		ldr	r1, [r1]
 10793 0006 91F8E857 		ldrb	r5, [r1, #2024]	@ zero_extendqisi2
1437:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10794              		.loc 1 1437 5 view .LVU2839
 10795 000a E907     		lsls	r1, r5, #31
1436:src/xeq.c     **** 	if (is_intmode()) {
 10796              		.loc 1 1436 72 view .LVU2840
ARM GAS  /tmp/ccQlyisH.s 			page 336


 10797 000c 8BB0     		sub	sp, sp, #44
 10798              		.cfi_def_cfa_offset 56
1436:src/xeq.c     **** 	if (is_intmode()) {
 10799              		.loc 1 1436 72 view .LVU2841
 10800 000e 0446     		mov	r4, r0
1437:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10801              		.loc 1 1437 5 view .LVU2842
 10802 0010 11D5     		bpl	.L799
 10803              	.LVL790:
1437:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10804              		.loc 1 1437 5 view .LVU2843
 10805 0012 1046     		mov	r0, r2
 10806              	.LVL791:
1437:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10807              		.loc 1 1437 5 view .LVU2844
 10808 0014 1946     		mov	r1, r3
 10809              	.LVL792:
 10810              	.LBB2151:
 10811              	.LBI2151:
1436:src/xeq.c     **** 	if (is_intmode()) {
 10812              		.loc 1 1436 6 is_stmt 1 view .LVU2845
 10813              	.LBB2152:
1438:src/xeq.c     **** 	} else {
 10814              		.loc 1 1438 3 view .LVU2846
 10815 0016 0E9A     		ldr	r2, [sp, #56]
 10816              	.LVL793:
1438:src/xeq.c     **** 	} else {
 10817              		.loc 1 1438 3 is_stmt 0 view .LVU2847
 10818 0018 FFF7FEFF 		bl	build_value
 10819              	.LVL794:
1438:src/xeq.c     **** 	} else {
 10820              		.loc 1 1438 3 view .LVU2848
 10821 001c 0B46     		mov	r3, r1
 10822 001e 0246     		mov	r2, r0
 10823              	.LBB2153:
 10824              	.LBB2154:
1392:src/xeq.c     **** }
 10825              		.loc 1 1392 8 view .LVU2849
 10826 0020 2046     		mov	r0, r4
 10827 0022 CDE90023 		strd	r2, [sp]
 10828              	.LVL795:
1392:src/xeq.c     **** }
 10829              		.loc 1 1392 8 view .LVU2850
 10830              	.LBE2154:
 10831              	.LBI2153:
1391:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10832              		.loc 1 1391 6 is_stmt 1 view .LVU2851
 10833              	.LBB2155:
1392:src/xeq.c     **** }
 10834              		.loc 1 1392 2 view .LVU2852
1392:src/xeq.c     **** }
 10835              		.loc 1 1392 8 is_stmt 0 view .LVU2853
 10836 0026 FFF7FEFF 		bl	get_reg_n
 10837              	.LVL796:
1392:src/xeq.c     **** }
 10838              		.loc 1 1392 2 view .LVU2854
 10839 002a 0822     		movs	r2, #8
ARM GAS  /tmp/ccQlyisH.s 			page 337


 10840 002c 6946     		mov	r1, sp
 10841 002e FFF7FEFF 		bl	xcopy
 10842              	.LVL797:
1392:src/xeq.c     **** }
 10843              		.loc 1 1392 2 view .LVU2855
 10844              	.LBE2155:
 10845              	.LBE2153:
 10846              	.LBE2152:
 10847              	.LBE2151:
1447:src/xeq.c     **** 
 10848              		.loc 1 1447 1 view .LVU2856
 10849 0032 0BB0     		add	sp, sp, #44
 10850              		.cfi_remember_state
 10851              		.cfi_def_cfa_offset 12
 10852              		@ sp needed
 10853 0034 30BD     		pop	{r4, r5, pc}
 10854              	.LVL798:
 10855              	.L799:
 10856              		.cfi_restore_state
 10857              	.LBB2156:
1440:src/xeq.c     **** 
 10858              		.loc 1 1440 3 is_stmt 1 view .LVU2857
1442:src/xeq.c     **** 		if (sgn)
 10859              		.loc 1 1442 3 view .LVU2858
 10860 0036 6846     		mov	r0, sp
 10861              	.LVL799:
1442:src/xeq.c     **** 		if (sgn)
 10862              		.loc 1 1442 3 is_stmt 0 view .LVU2859
 10863 0038 FFF7FEFF 		bl	ullint_to_dn
 10864              	.LVL800:
1443:src/xeq.c     **** 			dn_minus(&t, &t);
 10865              		.loc 1 1443 3 is_stmt 1 view .LVU2860
1443:src/xeq.c     **** 			dn_minus(&t, &t);
 10866              		.loc 1 1443 6 is_stmt 0 view .LVU2861
 10867 003c 0E9B     		ldr	r3, [sp, #56]
 10868 003e 2BB9     		cbnz	r3, .L806
1445:src/xeq.c     **** 	}
 10869              		.loc 1 1445 3 is_stmt 1 view .LVU2862
 10870 0040 6946     		mov	r1, sp
 10871 0042 2046     		mov	r0, r4
 10872 0044 FFF7FEFF 		bl	setRegister
 10873              	.LVL801:
 10874              	.L807:
1445:src/xeq.c     **** 	}
 10875              		.loc 1 1445 3 is_stmt 0 view .LVU2863
 10876              	.LBE2156:
1447:src/xeq.c     **** 
 10877              		.loc 1 1447 1 view .LVU2864
 10878 0048 0BB0     		add	sp, sp, #44
 10879              		.cfi_remember_state
 10880              		.cfi_def_cfa_offset 12
 10881              		@ sp needed
 10882 004a 30BD     		pop	{r4, r5, pc}
 10883              	.LVL802:
 10884              	.L806:
 10885              		.cfi_restore_state
 10886              	.LBB2157:
ARM GAS  /tmp/ccQlyisH.s 			page 338


1444:src/xeq.c     **** 		setRegister(index, &t);
 10887              		.loc 1 1444 4 is_stmt 1 view .LVU2865
 10888 004c 6946     		mov	r1, sp
 10889 004e 6846     		mov	r0, sp
 10890 0050 FFF7FEFF 		bl	dn_minus
 10891              	.LVL803:
1445:src/xeq.c     **** 	}
 10892              		.loc 1 1445 3 view .LVU2866
 10893 0054 6946     		mov	r1, sp
 10894 0056 2046     		mov	r0, r4
 10895 0058 FFF7FEFF 		bl	setRegister
 10896              	.LVL804:
 10897 005c F4E7     		b	.L807
 10898              	.L809:
 10899 005e 00BF     		.align	2
 10900              	.L808:
 10901 0060 00000000 		.word	main_ram
 10902              	.LBE2157:
 10903              		.cfi_endproc
 10904              	.LFE99:
 10906              		.section	.text.op_roundingmode,"ax",%progbits
 10907              		.align	1
 10908              		.p2align 2,,3
 10909              		.global	op_roundingmode
 10910              		.syntax unified
 10911              		.thumb
 10912              		.thumb_func
 10913              		.fpu fpv4-sp-d16
 10915              	op_roundingmode:
 10916              	.LVL805:
 10917              	.LFB34:
 610:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10918              		.loc 1 610 37 view -0
 10919              		.cfi_startproc
 10920              		@ args = 0, pretend = 0, frame = 0
 10921              		@ frame_needed = 0, uses_anonymous_args = 0
 611:src/xeq.c     **** }
 10922              		.loc 1 611 2 view .LVU2868
 10923              	.LBB2158:
 10924              	.LBI2158:
1478:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 10925              		.loc 1 1478 6 view .LVU2869
 10926              	.LBB2159:
1479:src/xeq.c     **** }
 10927              		.loc 1 1479 2 view .LVU2870
 10928              	.LBE2159:
 10929              	.LBE2158:
 610:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10930              		.loc 1 610 37 is_stmt 0 view .LVU2871
 10931 0000 00B5     		push	{lr}
 10932              		.cfi_def_cfa_offset 4
 10933              		.cfi_offset 14, -4
 611:src/xeq.c     **** }
 10934              		.loc 1 611 21 view .LVU2872
 10935 0002 084B     		ldr	r3, .L812
 10936              	.LVL806:
 611:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 339


 10937              		.loc 1 611 21 view .LVU2873
 10938 0004 1B68     		ldr	r3, [r3]
 10939              	.LVL807:
 611:src/xeq.c     **** }
 10940              		.loc 1 611 21 view .LVU2874
 10941 0006 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 610:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10942              		.loc 1 610 37 view .LVU2875
 10943 000a 83B0     		sub	sp, sp, #12
 10944              		.cfi_def_cfa_offset 16
 10945              	.LBB2162:
 10946              	.LBB2160:
1479:src/xeq.c     **** }
 10947              		.loc 1 1479 2 view .LVU2876
 10948 000c 0021     		movs	r1, #0
 10949              	.LBE2160:
 10950              	.LBE2162:
 611:src/xeq.c     **** }
 10951              		.loc 1 611 21 view .LVU2877
 10952 000e C2F30212 		ubfx	r2, r2, #4, #3
 10953              	.LBB2163:
 10954              	.LBB2161:
1479:src/xeq.c     **** }
 10955              		.loc 1 1479 2 view .LVU2878
 10956 0012 D2B2     		uxtb	r2, r2
 10957 0014 0023     		movs	r3, #0
 10958              	.LVL808:
1479:src/xeq.c     **** }
 10959              		.loc 1 1479 2 view .LVU2879
 10960 0016 0091     		str	r1, [sp]
 10961              	.LVL809:
1479:src/xeq.c     **** }
 10962              		.loc 1 1479 2 view .LVU2880
 10963 0018 6420     		movs	r0, #100
 10964              	.LVL810:
1479:src/xeq.c     **** }
 10965              		.loc 1 1479 2 view .LVU2881
 10966 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 10967              	.LVL811:
1479:src/xeq.c     **** }
 10968              		.loc 1 1479 2 view .LVU2882
 10969              	.LBE2161:
 10970              	.LBE2163:
 612:src/xeq.c     **** 
 10971              		.loc 1 612 1 view .LVU2883
 10972 001e 03B0     		add	sp, sp, #12
 10973              		.cfi_def_cfa_offset 4
 10974              		@ sp needed
 10975 0020 5DF804FB 		ldr	pc, [sp], #4
 10976              	.L813:
 10977              		.align	2
 10978              	.L812:
 10979 0024 00000000 		.word	main_ram
 10980              		.cfi_endproc
 10981              	.LFE34:
 10983              		.section	.text.register_from_int,"ax",%progbits
 10984              		.align	1
ARM GAS  /tmp/ccQlyisH.s 			page 340


 10985              		.p2align 2,,3
 10986              		.syntax unified
 10987              		.thumb
 10988              		.thumb_func
 10989              		.fpu fpv4-sp-d16
 10991              	register_from_int:
 10992              	.LVL812:
 10993              	.LFB100:
1454:src/xeq.c     **** 	int sgn;
 10994              		.loc 1 1454 69 is_stmt 1 view -0
 10995              		.cfi_startproc
 10996              		@ args = 0, pretend = 0, frame = 8
 10997              		@ frame_needed = 0, uses_anonymous_args = 0
1455:src/xeq.c     **** 	unsigned long long int val;
 10998              		.loc 1 1455 2 view .LVU2885
1456:src/xeq.c     **** 	const int xin = XromFlags.xIN;
 10999              		.loc 1 1456 2 view .LVU2886
1457:src/xeq.c     **** 	
 11000              		.loc 1 1457 2 view .LVU2887
1454:src/xeq.c     **** 	int sgn;
 11001              		.loc 1 1454 69 is_stmt 0 view .LVU2888
 11002 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 11003              		.cfi_def_cfa_offset 28
 11004              		.cfi_offset 4, -28
 11005              		.cfi_offset 5, -24
 11006              		.cfi_offset 6, -20
 11007              		.cfi_offset 7, -16
 11008              		.cfi_offset 8, -12
 11009              		.cfi_offset 9, -8
 11010              		.cfi_offset 14, -4
1457:src/xeq.c     **** 	
 11011              		.loc 1 1457 27 view .LVU2889
 11012 0004 154C     		ldr	r4, .L820
 11013 0006 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
1454:src/xeq.c     **** 	int sgn;
 11014              		.loc 1 1454 69 view .LVU2890
 11015 0008 0546     		mov	r5, r0
 11016 000a 85B0     		sub	sp, sp, #20
 11017              		.cfi_def_cfa_offset 48
1454:src/xeq.c     **** 	int sgn;
 11018              		.loc 1 1454 69 view .LVU2891
 11019 000c 0846     		mov	r0, r1
 11020              	.LVL813:
1457:src/xeq.c     **** 	
 11021              		.loc 1 1457 27 view .LVU2892
 11022 000e DE09     		lsrs	r6, r3, #7
 11023              	.LVL814:
1459:src/xeq.c     **** 		XromFlags.xIN = 0;
 11024              		.loc 1 1459 2 is_stmt 1 view .LVU2893
1459:src/xeq.c     **** 		XromFlags.xIN = 0;
 11025              		.loc 1 1459 5 is_stmt 0 view .LVU2894
 11026 0010 12B1     		cbz	r2, .L815
1460:src/xeq.c     **** 	UState.intm = 1;
 11027              		.loc 1 1460 3 is_stmt 1 view .LVU2895
1460:src/xeq.c     **** 	UState.intm = 1;
 11028              		.loc 1 1460 17 is_stmt 0 view .LVU2896
 11029 0012 6FF3C713 		bfc	r3, #7, #1
ARM GAS  /tmp/ccQlyisH.s 			page 341


 11030              	.LVL815:
1460:src/xeq.c     **** 	UState.intm = 1;
 11031              		.loc 1 1460 17 view .LVU2897
 11032 0016 6370     		strb	r3, [r4, #1]
 11033              	.LVL816:
 11034              	.L815:
1461:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11035              		.loc 1 1461 2 is_stmt 1 view .LVU2898
1461:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11036              		.loc 1 1461 14 is_stmt 0 view .LVU2899
 11037 0018 114F     		ldr	r7, .L820+4
 11038 001a 3A68     		ldr	r2, [r7]
 11039              	.LVL817:
1461:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11040              		.loc 1 1461 14 view .LVU2900
 11041 001c 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
 11042 0020 43F00103 		orr	r3, r3, #1
 11043 0024 82F8E837 		strb	r3, [r2, #2024]
1462:src/xeq.c     **** 
 11044              		.loc 1 1462 2 is_stmt 1 view .LVU2901
1462:src/xeq.c     **** 
 11045              		.loc 1 1462 8 is_stmt 0 view .LVU2902
 11046 0028 03A9     		add	r1, sp, #12
 11047              	.LVL818:
1462:src/xeq.c     **** 
 11048              		.loc 1 1462 8 view .LVU2903
 11049 002a FFF7FEFF 		bl	get_reg_n_int_sgn
 11050              	.LVL819:
1464:src/xeq.c     **** 	UState.intm = 0;
 11051              		.loc 1 1464 16 view .LVU2904
 11052 002e 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
1465:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11053              		.loc 1 1465 14 view .LVU2905
 11054 0030 3B68     		ldr	r3, [r7]
1464:src/xeq.c     **** 	UState.intm = 0;
 11055              		.loc 1 1464 16 view .LVU2906
 11056 0032 66F3C712 		bfi	r2, r6, #7, #1
 11057 0036 6270     		strb	r2, [r4, #1]
1462:src/xeq.c     **** 
 11058              		.loc 1 1462 8 view .LVU2907
 11059 0038 8946     		mov	r9, r1
1465:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11060              		.loc 1 1465 14 view .LVU2908
 11061 003a 93F8E817 		ldrb	r1, [r3, #2024]	@ zero_extendqisi2
 11062 003e 6FF30001 		bfc	r1, #0, #1
 11063 0042 83F8E817 		strb	r1, [r3, #2024]
1466:src/xeq.c     **** }
 11064              		.loc 1 1466 2 view .LVU2909
 11065 0046 039B     		ldr	r3, [sp, #12]
 11066 0048 0093     		str	r3, [sp]
1462:src/xeq.c     **** 
 11067              		.loc 1 1462 8 view .LVU2910
 11068 004a 8046     		mov	r8, r0
 11069              	.LVL820:
1464:src/xeq.c     **** 	UState.intm = 0;
 11070              		.loc 1 1464 2 is_stmt 1 view .LVU2911
1465:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
ARM GAS  /tmp/ccQlyisH.s 			page 342


 11071              		.loc 1 1465 2 view .LVU2912
1466:src/xeq.c     **** }
 11072              		.loc 1 1466 2 view .LVU2913
 11073 004c 4246     		mov	r2, r8
 11074 004e 4B46     		mov	r3, r9
 11075 0050 2846     		mov	r0, r5
 11076 0052 FFF7FEFF 		bl	set_reg_n_int_sgn
 11077              	.LVL821:
1467:src/xeq.c     **** 
 11078              		.loc 1 1467 1 is_stmt 0 view .LVU2914
 11079 0056 05B0     		add	sp, sp, #20
 11080              		.cfi_def_cfa_offset 28
 11081              		@ sp needed
 11082 0058 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 11083              	.LVL822:
 11084              	.L821:
1467:src/xeq.c     **** 
 11085              		.loc 1 1467 1 view .LVU2915
 11086              		.align	2
 11087              	.L820:
 11088 005c 00000000 		.word	XromParams
 11089 0060 00000000 		.word	main_ram
 11090              		.cfi_endproc
 11091              	.LFE100:
 11093              		.section	.text.int_from_register,"ax",%progbits
 11094              		.align	1
 11095              		.p2align 2,,3
 11096              		.syntax unified
 11097              		.thumb
 11098              		.thumb_func
 11099              		.fpu fpv4-sp-d16
 11101              	int_from_register:
 11102              	.LVL823:
 11103              	.LFB98:
1423:src/xeq.c     **** 	int sgn;
 11104              		.loc 1 1423 48 is_stmt 1 view -0
 11105              		.cfi_startproc
 11106              		@ args = 0, pretend = 0, frame = 8
 11107              		@ frame_needed = 0, uses_anonymous_args = 0
1424:src/xeq.c     **** 	unsigned long long int val;
 11108              		.loc 1 1424 2 view .LVU2917
1425:src/xeq.c     **** 	
 11109              		.loc 1 1425 2 view .LVU2918
1427:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11110              		.loc 1 1427 2 view .LVU2919
1423:src/xeq.c     **** 	int sgn;
 11111              		.loc 1 1423 48 is_stmt 0 view .LVU2920
 11112 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 11113              		.cfi_def_cfa_offset 20
 11114              		.cfi_offset 4, -20
 11115              		.cfi_offset 5, -16
 11116              		.cfi_offset 6, -12
 11117              		.cfi_offset 7, -8
 11118              		.cfi_offset 14, -4
1427:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11119              		.loc 1 1427 14 view .LVU2921
 11120 0002 104D     		ldr	r5, .L824
ARM GAS  /tmp/ccQlyisH.s 			page 343


 11121 0004 2B68     		ldr	r3, [r5]
 11122 0006 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1423:src/xeq.c     **** 	int sgn;
 11123              		.loc 1 1423 48 view .LVU2922
 11124 000a 85B0     		sub	sp, sp, #20
 11125              		.cfi_def_cfa_offset 40
1427:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11126              		.loc 1 1427 14 view .LVU2923
 11127 000c 6FF30002 		bfc	r2, #0, #1
1423:src/xeq.c     **** 	int sgn;
 11128              		.loc 1 1423 48 view .LVU2924
 11129 0010 0446     		mov	r4, r0
1427:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11130              		.loc 1 1427 14 view .LVU2925
 11131 0012 83F8E827 		strb	r2, [r3, #2024]
1428:src/xeq.c     **** 
 11132              		.loc 1 1428 2 is_stmt 1 view .LVU2926
1428:src/xeq.c     **** 
 11133              		.loc 1 1428 8 is_stmt 0 view .LVU2927
 11134 0016 0846     		mov	r0, r1
 11135              	.LVL824:
1428:src/xeq.c     **** 
 11136              		.loc 1 1428 8 view .LVU2928
 11137 0018 03A9     		add	r1, sp, #12
 11138              	.LVL825:
1428:src/xeq.c     **** 
 11139              		.loc 1 1428 8 view .LVU2929
 11140 001a FFF7FEFF 		bl	get_reg_n_int_sgn
 11141              	.LVL826:
1428:src/xeq.c     **** 
 11142              		.loc 1 1428 8 view .LVU2930
 11143 001e 0F46     		mov	r7, r1
1430:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11144              		.loc 1 1430 14 view .LVU2931
 11145 0020 2968     		ldr	r1, [r5]
 11146 0022 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
 11147 0026 43F00103 		orr	r3, r3, #1
 11148 002a 81F8E837 		strb	r3, [r1, #2024]
1431:src/xeq.c     **** }
 11149              		.loc 1 1431 2 view .LVU2932
 11150 002e 039B     		ldr	r3, [sp, #12]
 11151 0030 0093     		str	r3, [sp]
1428:src/xeq.c     **** 
 11152              		.loc 1 1428 8 view .LVU2933
 11153 0032 0646     		mov	r6, r0
 11154              	.LVL827:
1430:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11155              		.loc 1 1430 2 is_stmt 1 view .LVU2934
1431:src/xeq.c     **** }
 11156              		.loc 1 1431 2 view .LVU2935
 11157 0034 3246     		mov	r2, r6
 11158 0036 2046     		mov	r0, r4
 11159 0038 3B46     		mov	r3, r7
 11160 003a FFF7FEFF 		bl	set_reg_n_int_sgn
 11161              	.LVL828:
1432:src/xeq.c     **** 
 11162              		.loc 1 1432 1 is_stmt 0 view .LVU2936
ARM GAS  /tmp/ccQlyisH.s 			page 344


 11163 003e 05B0     		add	sp, sp, #20
 11164              		.cfi_def_cfa_offset 20
 11165              		@ sp needed
 11166 0040 F0BD     		pop	{r4, r5, r6, r7, pc}
 11167              	.LVL829:
 11168              	.L825:
1432:src/xeq.c     **** 
 11169              		.loc 1 1432 1 view .LVU2937
 11170 0042 00BF     		.align	2
 11171              	.L824:
 11172 0044 00000000 		.word	main_ram
 11173              		.cfi_endproc
 11174              	.LFE98:
 11176              		.section	.text.switch_to_int,"ax",%progbits
 11177              		.align	1
 11178              		.p2align 2,,3
 11179              		.syntax unified
 11180              		.thumb
 11181              		.thumb_func
 11182              		.fpu fpv4-sp-d16
 11184              	switch_to_int:
 11185              	.LFB206:
3700:src/xeq.c     **** 	int i;
 11186              		.loc 1 3700 33 is_stmt 1 view -0
 11187              		.cfi_startproc
 11188              		@ args = 0, pretend = 0, frame = 40
 11189              		@ frame_needed = 0, uses_anonymous_args = 0
3701:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
 11190              		.loc 1 3701 2 view .LVU2939
3702:src/xeq.c     **** 	const int dbl = is_dblmode();
 11191              		.loc 1 3702 2 view .LVU2940
3700:src/xeq.c     **** 	int i;
 11192              		.loc 1 3700 33 is_stmt 0 view .LVU2941
 11193 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 11194              		.cfi_def_cfa_offset 24
 11195              		.cfi_offset 4, -24
 11196              		.cfi_offset 5, -20
 11197              		.cfi_offset 6, -16
 11198              		.cfi_offset 7, -12
 11199              		.cfi_offset 8, -8
 11200              		.cfi_offset 14, -4
3702:src/xeq.c     **** 	const int dbl = is_dblmode();
 11201              		.loc 1 3702 26 view .LVU2942
 11202 0004 DFF87480 		ldr	r8, .L834+4
3702:src/xeq.c     **** 	const int dbl = is_dblmode();
 11203              		.loc 1 3702 25 view .LVU2943
 11204 0008 1B49     		ldr	r1, .L834
3702:src/xeq.c     **** 	const int dbl = is_dblmode();
 11205              		.loc 1 3702 26 view .LVU2944
 11206 000a D8F80020 		ldr	r2, [r8]
3702:src/xeq.c     **** 	const int dbl = is_dblmode();
 11207              		.loc 1 3702 32 view .LVU2945
 11208 000e 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 11209              	.LBB2164:
 11210              	.LBB2165:
1088:src/xeq.c     **** }
 11211              		.loc 1 1088 24 view .LVU2946
ARM GAS  /tmp/ccQlyisH.s 			page 345


 11212 0012 B2F8E827 		ldrh	r2, [r2, #2024]
 11213              	.LBE2165:
 11214              	.LBE2164:
3702:src/xeq.c     **** 	const int dbl = is_dblmode();
 11215              		.loc 1 3702 32 view .LVU2947
 11216 0016 C3F3C003 		ubfx	r3, r3, #3, #1
 11217              	.LBB2169:
 11218              	.LBB2166:
1088:src/xeq.c     **** }
 11219              		.loc 1 1088 24 view .LVU2948
 11220 001a 44F20106 		movw	r6, #16385
 11221              	.LBE2166:
 11222              	.LBE2169:
3702:src/xeq.c     **** 	const int dbl = is_dblmode();
 11223              		.loc 1 3702 6 view .LVU2949
 11224 001e 31F81350 		ldrh	r5, [r1, r3, lsl #1]
 11225              	.LVL830:
3703:src/xeq.c     **** 
 11226              		.loc 1 3703 2 is_stmt 1 view .LVU2950
 11227              	.LBB2170:
 11228              	.LBI2164:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11229              		.loc 1 1087 5 view .LVU2951
 11230              	.LBB2167:
1088:src/xeq.c     **** }
 11231              		.loc 1 1088 2 view .LVU2952
 11232              	.LBE2167:
 11233              	.LBE2170:
3700:src/xeq.c     **** 	int i;
 11234              		.loc 1 3700 33 is_stmt 0 view .LVU2953
 11235 0022 8AB0     		sub	sp, sp, #40
 11236              		.cfi_def_cfa_offset 64
 11237              	.LBB2171:
 11238              	.LBB2168:
1088:src/xeq.c     **** }
 11239              		.loc 1 1088 24 view .LVU2954
 11240 0024 1640     		ands	r6, r6, r2
 11241              	.LVL831:
1088:src/xeq.c     **** }
 11242              		.loc 1 1088 24 view .LVU2955
 11243              	.LBE2168:
 11244              	.LBE2171:
3705:src/xeq.c     **** 		if (mask & 0x800) {
 11245              		.loc 1 3705 2 is_stmt 1 view .LVU2956
3705:src/xeq.c     **** 		if (mask & 0x800) {
 11246              		.loc 1 3705 21 view .LVU2957
3705:src/xeq.c     **** 		if (mask & 0x800) {
 11247              		.loc 1 3705 9 is_stmt 0 view .LVU2958
 11248 0026 6F24     		movs	r4, #111
 11249 0028 07E0     		b	.L829
 11250              	.LVL832:
 11251              	.L827:
3710:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 11252              		.loc 1 3710 11 view .LVU2959
 11253 002a B6F5804F 		cmp	r6, #16384
 11254 002e 12D0     		beq	.L832
 11255              	.L828:
ARM GAS  /tmp/ccQlyisH.s 			page 346


3705:src/xeq.c     **** 		if (mask & 0x800) {
 11256              		.loc 1 3705 36 is_stmt 1 discriminator 2 view .LVU2960
 11257 0030 013C     		subs	r4, r4, #1
 11258              	.LVL833:
3705:src/xeq.c     **** 		if (mask & 0x800) {
 11259              		.loc 1 3705 2 is_stmt 0 discriminator 2 view .LVU2961
 11260 0032 632C     		cmp	r4, #99
3705:src/xeq.c     **** 		if (mask & 0x800) {
 11261              		.loc 1 3705 46 discriminator 2 view .LVU2962
 11262 0034 4FEA4505 		lsl	r5, r5, #1
 11263              	.LVL834:
3705:src/xeq.c     **** 		if (mask & 0x800) {
 11264              		.loc 1 3705 21 is_stmt 1 discriminator 2 view .LVU2963
3705:src/xeq.c     **** 		if (mask & 0x800) {
 11265              		.loc 1 3705 2 is_stmt 0 discriminator 2 view .LVU2964
 11266 0038 0AD0     		beq	.L833
 11267              	.LVL835:
 11268              	.L829:
3706:src/xeq.c     **** 			// register belongs to stack
 11269              		.loc 1 3706 3 is_stmt 1 view .LVU2965
3710:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 11270              		.loc 1 3710 8 view .LVU2966
3706:src/xeq.c     **** 			// register belongs to stack
 11271              		.loc 1 3706 6 is_stmt 0 view .LVU2967
 11272 003a 2B05     		lsls	r3, r5, #20
 11273 003c F5D5     		bpl	.L827
3708:src/xeq.c     **** 		}
 11274              		.loc 1 3708 4 is_stmt 1 view .LVU2968
 11275 003e 2146     		mov	r1, r4
 11276 0040 2046     		mov	r0, r4
3705:src/xeq.c     **** 		if (mask & 0x800) {
 11277              		.loc 1 3705 36 is_stmt 0 view .LVU2969
 11278 0042 013C     		subs	r4, r4, #1
 11279              	.LVL836:
3708:src/xeq.c     **** 		}
 11280              		.loc 1 3708 4 view .LVU2970
 11281 0044 FFF7FEFF 		bl	int_from_register
 11282              	.LVL837:
3705:src/xeq.c     **** 		if (mask & 0x800) {
 11283              		.loc 1 3705 36 is_stmt 1 view .LVU2971
3705:src/xeq.c     **** 		if (mask & 0x800) {
 11284              		.loc 1 3705 2 is_stmt 0 view .LVU2972
 11285 0048 632C     		cmp	r4, #99
3705:src/xeq.c     **** 		if (mask & 0x800) {
 11286              		.loc 1 3705 46 view .LVU2973
 11287 004a 4FEA4505 		lsl	r5, r5, #1
 11288              	.LVL838:
3705:src/xeq.c     **** 		if (mask & 0x800) {
 11289              		.loc 1 3705 21 is_stmt 1 view .LVU2974
3705:src/xeq.c     **** 		if (mask & 0x800) {
 11290              		.loc 1 3705 2 is_stmt 0 view .LVU2975
 11291 004e F4D1     		bne	.L829
 11292              	.L833:
3715:src/xeq.c     **** 
 11293              		.loc 1 3715 1 view .LVU2976
 11294 0050 0AB0     		add	sp, sp, #40
 11295              		.cfi_remember_state
ARM GAS  /tmp/ccQlyisH.s 			page 347


 11296              		.cfi_def_cfa_offset 24
 11297              		@ sp needed
 11298 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11299              	.LVL839:
 11300              	.L832:
 11301              		.cfi_restore_state
3712:src/xeq.c     **** 		}
 11302              		.loc 1 3712 4 is_stmt 1 view .LVU2977
3712:src/xeq.c     **** 		}
 11303              		.loc 1 3712 26 is_stmt 0 view .LVU2978
 11304 0056 D8F80030 		ldr	r3, [r8]
3712:src/xeq.c     **** 		}
 11305              		.loc 1 3712 38 view .LVU2979
 11306 005a 2046     		mov	r0, r4
3712:src/xeq.c     **** 		}
 11307              		.loc 1 3712 26 view .LVU2980
 11308 005c 03F22C43 		addw	r3, r3, #1068
3712:src/xeq.c     **** 		}
 11309              		.loc 1 3712 4 view .LVU2981
 11310 0060 03EBC407 		add	r7, r3, r4, lsl #3
3712:src/xeq.c     **** 		}
 11311              		.loc 1 3712 38 view .LVU2982
 11312 0064 FFF7FEFF 		bl	get_reg_n
 11313              	.LVL840:
 11314              	.LBB2172:
 11315              	.LBI2172:
 639:src/xeq.c     **** 	decNumber temp;
 11316              		.loc 1 639 6 is_stmt 1 view .LVU2983
 11317              	.LBB2173:
 640:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 11318              		.loc 1 640 2 view .LVU2984
 641:src/xeq.c     **** }
 11319              		.loc 1 641 2 view .LVU2985
 641:src/xeq.c     **** }
 11320              		.loc 1 641 24 is_stmt 0 view .LVU2986
 11321 0068 01A9     		add	r1, sp, #4
 11322 006a FFF7FEFF 		bl	decimal128ToNumber
 11323              	.LVL841:
 641:src/xeq.c     **** }
 11324              		.loc 1 641 24 view .LVU2987
 11325 006e 0146     		mov	r1, r0
 641:src/xeq.c     **** }
 11326              		.loc 1 641 2 view .LVU2988
 11327 0070 3846     		mov	r0, r7
 11328 0072 FFF7FEFF 		bl	packed_from_number
 11329              	.LVL842:
 642:src/xeq.c     **** 
 11330              		.loc 1 642 1 view .LVU2989
 11331 0076 DBE7     		b	.L828
 11332              	.L835:
 11333              		.align	2
 11334              	.L834:
 11335 0078 00000000 		.word	.LANCHOR3
 11336 007c 00000000 		.word	main_ram
 11337              	.LBE2173:
 11338              	.LBE2172:
 11339              		.cfi_endproc
ARM GAS  /tmp/ccQlyisH.s 			page 348


 11340              	.LFE206:
 11342              		.section	.text.process_cmdline.part.0,"ax",%progbits
 11343              		.align	1
 11344              		.p2align 2,,3
 11345              		.syntax unified
 11346              		.thumb
 11347              		.thumb_func
 11348              		.fpu fpv4-sp-d16
 11350              	process_cmdline.part.0:
 11351              	.LFB288:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 11352              		.loc 1 1195 6 is_stmt 1 view -0
 11353              		.cfi_startproc
 11354              		@ args = 0, pretend = 0, frame = 168
 11355              		@ frame_needed = 0, uses_anonymous_args = 0
 11356              	.LBB2196:
1199:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
 11357              		.loc 1 1199 3 view .LVU2991
 11358              	.LBE2196:
1190:src/xeq.c     **** }
 11359              		.loc 1 1190 2 view .LVU2992
 11360              	.LVL843:
 11361              	.LBB2240:
1200:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11362              		.loc 1 1200 3 view .LVU2993
 11363              	.LBE2240:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 11364              		.loc 1 1195 6 is_stmt 0 view .LVU2994
 11365 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 11366              		.cfi_def_cfa_offset 32
 11367              		.cfi_offset 4, -32
 11368              		.cfi_offset 5, -28
 11369              		.cfi_offset 6, -24
 11370              		.cfi_offset 7, -20
 11371              		.cfi_offset 8, -16
 11372              		.cfi_offset 9, -12
 11373              		.cfi_offset 10, -8
 11374              		.cfi_offset 14, -4
 11375              	.LBB2241:
1200:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11376              		.loc 1 1200 35 view .LVU2995
 11377 0004 8D4C     		ldr	r4, .L875
1210:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11378              		.loc 1 1210 7 view .LVU2996
 11379 0006 DFF84482 		ldr	r8, .L875+16
1200:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11380              		.loc 1 1200 22 view .LVU2997
 11381 000a A57F     		ldrb	r5, [r4, #30]	@ zero_extendqisi2
 11382              	.LVL844:
1202:src/xeq.c     **** #else
 11383              		.loc 1 1202 3 is_stmt 1 view .LVU2998
1207:src/xeq.c     **** 
 11384              		.loc 1 1207 3 view .LVU2999
 11385              	.LBE2241:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 11386              		.loc 1 1195 6 is_stmt 0 view .LVU3000
 11387 000c ACB0     		sub	sp, sp, #176
ARM GAS  /tmp/ccQlyisH.s 			page 349


 11388              		.cfi_def_cfa_offset 208
 11389              	.LBB2242:
1207:src/xeq.c     **** 
 11390              		.loc 1 1207 3 view .LVU3001
 11391 000e 04F12001 		add	r1, r4, #32
 11392 0012 1422     		movs	r2, #20
 11393 0014 02A8     		add	r0, sp, #8
 11394 0016 FFF7FEFF 		bl	xcopy
 11395              	.LVL845:
1209:src/xeq.c     **** 		if (!is_intmode()) {
 11396              		.loc 1 1209 3 is_stmt 1 view .LVU3002
1210:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11397              		.loc 1 1210 7 is_stmt 0 view .LVU3003
 11398 001a D8F80020 		ldr	r2, [r8]
1209:src/xeq.c     **** 		if (!is_intmode()) {
 11399              		.loc 1 1209 11 view .LVU3004
 11400 001e 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
1210:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11401              		.loc 1 1210 7 view .LVU3005
 11402 0020 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1209:src/xeq.c     **** 		if (!is_intmode()) {
 11403              		.loc 1 1209 26 view .LVU3006
 11404 0024 2CA9     		add	r1, sp, #176
 11405 0026 1944     		add	r1, r1, r3
 11406 0028 0020     		movs	r0, #0
1210:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11407              		.loc 1 1210 6 view .LVU3007
 11408 002a 12F00102 		ands	r2, r2, #1
1209:src/xeq.c     **** 		if (!is_intmode()) {
 11409              		.loc 1 1209 26 view .LVU3008
 11410 002e 01F8A80C 		strb	r0, [r1, #-168]
1210:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11411              		.loc 1 1210 3 is_stmt 1 view .LVU3009
1210:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11412              		.loc 1 1210 6 is_stmt 0 view .LVU3010
 11413 0032 16D1     		bne	.L838
1212:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11414              		.loc 1 1212 4 is_stmt 1 view .LVU3011
1212:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11415              		.loc 1 1212 15 is_stmt 0 view .LVU3012
 11416 0034 2CA9     		add	r1, sp, #176
1212:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11417              		.loc 1 1212 29 view .LVU3013
 11418 0036 013B     		subs	r3, r3, #1
1212:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11419              		.loc 1 1212 15 view .LVU3014
 11420 0038 0B44     		add	r3, r3, r1
1212:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11421              		.loc 1 1212 40 view .LVU3015
 11422 003a 13F8A81C 		ldrb	r1, [r3, #-168]	@ zero_extendqisi2
1212:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11423              		.loc 1 1212 7 view .LVU3016
 11424 003e 4439     		subs	r1, r1, #68
 11425 0040 0129     		cmp	r1, #1
 11426 0042 40F28B80 		bls	.L866
1214:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11427              		.loc 1 1214 9 is_stmt 1 view .LVU3017
ARM GAS  /tmp/ccQlyisH.s 			page 350


1214:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11428              		.loc 1 1214 21 is_stmt 0 view .LVU3018
 11429 0046 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1214:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11430              		.loc 1 1214 20 view .LVU3019
 11431 0048 2CAB     		add	r3, sp, #176
 11432 004a 1344     		add	r3, r3, r2
1214:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11433              		.loc 1 1214 12 view .LVU3020
 11434 004c 13F8A83C 		ldrb	r3, [r3, #-168]	@ zero_extendqisi2
 11435 0050 442B     		cmp	r3, #68
 11436 0052 00F0D080 		beq	.L867
 11437              	.L840:
1225:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11438              		.loc 1 1225 4 is_stmt 1 view .LVU3021
1225:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11439              		.loc 1 1225 7 is_stmt 0 view .LVU3022
 11440 0056 002A     		cmp	r2, #0
 11441 0058 40F08680 		bne	.L841
 11442              	.L872:
1230:src/xeq.c     **** #endif
 11443              		.loc 1 1230 8 view .LVU3023
 11444 005c 012D     		cmp	r5, #1
 11445 005e 00F08380 		beq	.L841
 11446              	.L838:
1235:src/xeq.c     **** 		lift_if_enabled();
 11447              		.loc 1 1235 3 is_stmt 1 view .LVU3024
 11448              	.LBB2197:
 11449              	.LBB2198:
 11450              	.LBB2199:
 11451              	.LBB2200:
 735:src/xeq.c     **** }
 11452              		.loc 1 735 15 is_stmt 0 view .LVU3025
 11453 0062 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11454              	.LBE2200:
 11455              	.LBE2199:
 11456              	.LBE2198:
 11457              	.LBE2197:
1235:src/xeq.c     **** 		lift_if_enabled();
 11458              		.loc 1 1235 17 view .LVU3026
 11459 0064 0022     		movs	r2, #0
 11460              	.LBB2212:
 11461              	.LBB2207:
 739:src/xeq.c     **** 		lift();
 11462              		.loc 1 739 5 view .LVU3027
 11463 0066 5B06     		lsls	r3, r3, #25
 11464              	.LBE2207:
 11465              	.LBE2212:
1235:src/xeq.c     **** 		lift_if_enabled();
 11466              		.loc 1 1235 17 view .LVU3028
 11467 0068 2277     		strb	r2, [r4, #28]
1236:src/xeq.c     **** 		set_lift();
 11468              		.loc 1 1236 3 is_stmt 1 view .LVU3029
 11469              	.LBB2213:
 11470              	.LBI2197:
 738:src/xeq.c     **** 	if (get_lift())
 11471              		.loc 1 738 6 view .LVU3030
ARM GAS  /tmp/ccQlyisH.s 			page 351


 11472              	.LBB2208:
 739:src/xeq.c     **** 		lift();
 11473              		.loc 1 739 2 view .LVU3031
 11474              	.LBB2204:
 11475              	.LBI2199:
 734:src/xeq.c     **** 	return State2.state_lift;
 11476              		.loc 1 734 12 view .LVU3032
 11477              	.LBB2201:
 735:src/xeq.c     **** }
 11478              		.loc 1 735 2 view .LVU3033
 11479              	.LBE2201:
 11480              	.LBE2204:
 739:src/xeq.c     **** 		lift();
 11481              		.loc 1 739 5 is_stmt 0 view .LVU3034
 11482 006a 00F18B80 		bmi	.L868
 11483              	.L843:
 11484              	.LBE2208:
 11485              	.LBE2213:
1237:src/xeq.c     **** 		CmdLineDot = 0;
 11486              		.loc 1 1237 3 is_stmt 1 view .LVU3035
 11487              	.LBB2214:
 11488              	.LBI2214:
 758:src/xeq.c     ****     State2.state_lift = 1;
 11489              		.loc 1 758 6 view .LVU3036
 11490              	.LBB2215:
 759:src/xeq.c     **** }
 11491              		.loc 1 759 5 view .LVU3037
 759:src/xeq.c     **** }
 11492              		.loc 1 759 23 is_stmt 0 view .LVU3038
 11493 006e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11494              	.LBE2215:
 11495              	.LBE2214:
1240:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11496              		.loc 1 1240 7 view .LVU3039
 11497 0070 D8F80010 		ldr	r1, [r8]
 11498              	.LBB2217:
 11499              	.LBB2216:
 759:src/xeq.c     **** }
 11500              		.loc 1 759 23 view .LVU3040
 11501 0074 43F04003 		orr	r3, r3, #64
 11502 0078 E375     		strb	r3, [r4, #23]
 11503              	.LBE2216:
 11504              	.LBE2217:
1238:src/xeq.c     **** 		CmdLineEex = 0;
 11505              		.loc 1 1238 3 is_stmt 1 view .LVU3041
1240:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11506              		.loc 1 1240 7 is_stmt 0 view .LVU3042
 11507 007a 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
1238:src/xeq.c     **** 		CmdLineEex = 0;
 11508              		.loc 1 1238 14 view .LVU3043
 11509 007e 0022     		movs	r2, #0
1240:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11510              		.loc 1 1240 6 view .LVU3044
 11511 0080 13F00103 		ands	r3, r3, #1
1238:src/xeq.c     **** 		CmdLineEex = 0;
 11512              		.loc 1 1238 14 view .LVU3045
 11513 0084 A277     		strb	r2, [r4, #30]
ARM GAS  /tmp/ccQlyisH.s 			page 352


1239:src/xeq.c     **** 		if (is_intmode()) {
 11514              		.loc 1 1239 3 is_stmt 1 view .LVU3046
1239:src/xeq.c     **** 		if (is_intmode()) {
 11515              		.loc 1 1239 14 is_stmt 0 view .LVU3047
 11516 0086 6277     		strb	r2, [r4, #29]
1240:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11517              		.loc 1 1240 3 is_stmt 1 view .LVU3048
1240:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11518              		.loc 1 1240 6 is_stmt 0 view .LVU3049
 11519 0088 7FD1     		bne	.L869
1244:src/xeq.c     **** 			char *d0, *d1, *d2;
 11520              		.loc 1 1244 10 is_stmt 1 view .LVU3050
1244:src/xeq.c     **** 			char *d0, *d1, *d2;
 11521              		.loc 1 1244 13 is_stmt 0 view .LVU3051
 11522 008a 022D     		cmp	r5, #2
 11523 008c 4CD1     		bne	.L850
 11524              	.LBB2218:
1245:src/xeq.c     **** 			int neg;
 11525              		.loc 1 1245 4 is_stmt 1 view .LVU3052
1246:src/xeq.c     **** 
 11526              		.loc 1 1246 4 view .LVU3053
1248:src/xeq.c     **** 				return;
 11527              		.loc 1 1248 4 view .LVU3054
1251:src/xeq.c     **** #endif
 11528              		.loc 1 1251 4 view .LVU3055
1251:src/xeq.c     **** #endif
 11529              		.loc 1 1251 17 is_stmt 0 view .LVU3056
 11530 008e 91F8E627 		ldrb	r2, [r1, #2022]	@ zero_extendqisi2
 11531 0092 42F02002 		orr	r2, r2, #32
 11532 0096 81F8E627 		strb	r2, [r1, #2022]
1253:src/xeq.c     **** 				neg = 1;
 11533              		.loc 1 1253 4 is_stmt 1 view .LVU3057
1253:src/xeq.c     **** 				neg = 1;
 11534              		.loc 1 1253 7 is_stmt 0 view .LVU3058
 11535 009a 9DF80820 		ldrb	r2, [sp, #8]	@ zero_extendqisi2
 11536 009e 2D2A     		cmp	r2, #45
1258:src/xeq.c     **** 			}
 11537              		.loc 1 1258 8 view .LVU3059
 11538 00a0 14BF     		ite	ne
 11539 00a2 02AD     		addne	r5, sp, #8
 11540              	.LVL846:
1255:src/xeq.c     **** 			} else {
 11541              		.loc 1 1255 8 view .LVU3060
 11542 00a4 0DF10905 		addeq	r5, sp, #9
1260:src/xeq.c     **** 			*d1++ = '\0';
 11543              		.loc 1 1260 9 view .LVU3061
 11544 00a8 4FF02E01 		mov	r1, #46
 11545 00ac 2846     		mov	r0, r5
1257:src/xeq.c     **** 				d0 = cmdline;
 11546              		.loc 1 1257 9 view .LVU3062
 11547 00ae 14BF     		ite	ne
 11548 00b0 1C46     		movne	r4, r3
1254:src/xeq.c     **** 				d0 = cmdline+1;
 11549              		.loc 1 1254 9 view .LVU3063
 11550 00b2 0124     		moveq	r4, #1
 11551              	.LVL847:
1260:src/xeq.c     **** 			*d1++ = '\0';
ARM GAS  /tmp/ccQlyisH.s 			page 353


 11552              		.loc 1 1260 4 is_stmt 1 view .LVU3064
1260:src/xeq.c     **** 			*d1++ = '\0';
 11553              		.loc 1 1260 9 is_stmt 0 view .LVU3065
 11554 00b4 FFF7FEFF 		bl	find_char
 11555              	.LVL848:
1261:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11556              		.loc 1 1261 4 is_stmt 1 view .LVU3066
1261:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11557              		.loc 1 1261 10 is_stmt 0 view .LVU3067
 11558 00b8 8146     		mov	r9, r0
 11559 00ba 4FF0000A 		mov	r10, #0
1261:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11560              		.loc 1 1261 7 view .LVU3068
 11561 00be 461C     		adds	r6, r0, #1
 11562              	.LVL849:
1261:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11563              		.loc 1 1261 10 view .LVU3069
 11564 00c0 09F802AB 		strb	r10, [r9], #2
1262:src/xeq.c     **** 			*d2++ = '\0';
 11565              		.loc 1 1262 4 is_stmt 1 view .LVU3070
1262:src/xeq.c     **** 			*d2++ = '\0';
 11566              		.loc 1 1262 9 is_stmt 0 view .LVU3071
 11567 00c4 2E21     		movs	r1, #46
 11568 00c6 3046     		mov	r0, r6
 11569 00c8 FFF7FEFF 		bl	find_char
 11570              	.LVL850:
1263:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11571              		.loc 1 1263 4 is_stmt 1 view .LVU3072
1263:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11572              		.loc 1 1263 7 is_stmt 0 view .LVU3073
 11573 00cc 0746     		mov	r7, r0
 11574              	.LVL851:
1264:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11575              		.loc 1 1264 4 view .LVU3074
 11576 00ce 5C4A     		ldr	r2, .L875+4
1263:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11577              		.loc 1 1263 10 view .LVU3075
 11578 00d0 07F801AB 		strb	r10, [r7], #1
 11579              	.LVL852:
1264:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11580              		.loc 1 1264 4 is_stmt 1 view .LVU3076
 11581 00d4 11A8     		add	r0, sp, #68
 11582 00d6 3946     		mov	r1, r7
 11583 00d8 FFF7FEFF 		bl	decNumberFromString
 11584              	.LVL853:
1265:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11585              		.loc 1 1265 4 view .LVU3077
 11586 00dc 2946     		mov	r1, r5
 11587 00de 584A     		ldr	r2, .L875+4
 11588 00e0 1AA8     		add	r0, sp, #104
 11589 00e2 FFF7FEFF 		bl	decNumberFromString
 11590              	.LVL854:
1267:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11591              		.loc 1 1267 4 view .LVU3078
1267:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11592              		.loc 1 1267 7 is_stmt 0 view .LVU3079
 11593 00e6 4F45     		cmp	r7, r9
ARM GAS  /tmp/ccQlyisH.s 			page 354


1268:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 11594              		.loc 1 1268 5 view .LVU3080
 11595 00e8 08AD     		add	r5, sp, #32
 11596              	.LVL855:
1267:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11597              		.loc 1 1267 7 view .LVU3081
 11598 00ea 00F09780 		beq	.L870
1277:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11599              		.loc 1 1277 5 is_stmt 1 view .LVU3082
 11600 00ee 544A     		ldr	r2, .L875+4
 11601 00f0 3146     		mov	r1, r6
 11602 00f2 2846     		mov	r0, r5
 11603 00f4 FFF7FEFF 		bl	decNumberFromString
 11604              	.LVL856:
1279:src/xeq.c     **** #endif
 11605              		.loc 1 1279 5 view .LVU3083
1279:src/xeq.c     **** #endif
 11606              		.loc 1 1279 25 is_stmt 0 view .LVU3084
 11607 00f8 D8F80030 		ldr	r3, [r8]
 11608 00fc 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 11609 0100 6AF30412 		bfi	r2, r10, #4, #1
 11610 0104 83F8E627 		strb	r2, [r3, #2022]
 11611              	.L853:
1282:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
 11612              		.loc 1 1282 4 is_stmt 1 view .LVU3085
 11613 0108 11AA     		add	r2, sp, #68
 11614 010a 2946     		mov	r1, r5
 11615 010c 23A8     		add	r0, sp, #140
 11616 010e FFF7FEFF 		bl	dn_divide
 11617              	.LVL857:
1284:src/xeq.c     **** #endif
 11618              		.loc 1 1284 4 view .LVU3086
1284:src/xeq.c     **** #endif
 11619              		.loc 1 1284 7 is_stmt 0 view .LVU3087
 11620 0112 9DF89430 		ldrb	r3, [sp, #148]	@ zero_extendqisi2
 11621 0116 13F0700F 		tst	r3, #112
 11622 011a 64D0     		beq	.L871
1287:src/xeq.c     **** 				dn_minus(&x, &x);
 11623              		.loc 1 1287 4 is_stmt 1 view .LVU3088
1287:src/xeq.c     **** 				dn_minus(&x, &x);
 11624              		.loc 1 1287 7 is_stmt 0 view .LVU3089
 11625 011c 4CB1     		cbz	r4, .L865
 11626              	.L874:
1288:src/xeq.c     **** 			setX(&x);
 11627              		.loc 1 1288 5 is_stmt 1 view .LVU3090
 11628 011e 1AA9     		add	r1, sp, #104
 11629 0120 0846     		mov	r0, r1
 11630 0122 FFF7FEFF 		bl	dn_minus
 11631              	.LVL858:
1289:src/xeq.c     **** 		} else {
 11632              		.loc 1 1289 4 view .LVU3091
 11633              	.LBB2219:
 11634              	.LBI2219:
 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 11635              		.loc 1 819 6 view .LVU3092
 11636              	.LBB2220:
 820:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 355


 11637              		.loc 1 820 2 view .LVU3093
 11638 0126 04E0     		b	.L865
 11639              	.LVL859:
 11640              	.L850:
 820:src/xeq.c     **** }
 11641              		.loc 1 820 2 is_stmt 0 view .LVU3094
 11642              	.LBE2220:
 11643              	.LBE2219:
 11644              	.LBE2218:
1291:src/xeq.c     **** 			setX(&x);
 11645              		.loc 1 1291 4 is_stmt 1 view .LVU3095
 11646 0128 454A     		ldr	r2, .L875+4
 11647 012a 02A9     		add	r1, sp, #8
 11648 012c 1AA8     		add	r0, sp, #104
 11649 012e FFF7FEFF 		bl	decNumberFromString
 11650              	.LVL860:
 11651              	.L865:
1292:src/xeq.c     **** 		}
 11652              		.loc 1 1292 4 view .LVU3096
 11653              	.LBB2221:
 11654              	.LBI2221:
 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 11655              		.loc 1 819 6 view .LVU3097
 11656              	.LBB2222:
 820:src/xeq.c     **** }
 11657              		.loc 1 820 2 view .LVU3098
 11658 0132 1AA9     		add	r1, sp, #104
 11659              	.LVL861:
 820:src/xeq.c     **** }
 11660              		.loc 1 820 2 is_stmt 0 view .LVU3099
 11661 0134 6420     		movs	r0, #100
 11662 0136 FFF7FEFF 		bl	setRegister
 11663              	.LVL862:
 11664              	.L849:
 820:src/xeq.c     **** }
 11665              		.loc 1 820 2 view .LVU3100
 11666              	.LBE2222:
 11667              	.LBE2221:
1294:src/xeq.c     **** #ifndef DM42
 11668              		.loc 1 1294 3 is_stmt 1 view .LVU3101
 11669              	.LBB2223:
 11670              	.LBI2223:
3872:src/xeq.c     **** 	if (!Running && !XromRunning)
 11671              		.loc 1 3872 6 view .LVU3102
 11672              	.LBB2224:
3873:src/xeq.c     **** 		State.entryp = 1;
 11673              		.loc 1 3873 2 view .LVU3103
 11674              	.LBB2225:
 11675              	.LBI2225:
3872:src/xeq.c     **** 	if (!Running && !XromRunning)
 11676              		.loc 1 3872 6 view .LVU3104
 11677              	.LBE2225:
3873:src/xeq.c     **** 		State.entryp = 1;
 11678              		.loc 1 3873 6 is_stmt 0 view .LVU3105
 11679 013a 424A     		ldr	r2, .L875+8
 11680              	.LBB2227:
 11681              	.LBB2226:
ARM GAS  /tmp/ccQlyisH.s 			page 356


3873:src/xeq.c     **** 		State.entryp = 1;
 11682              		.loc 1 3873 18 view .LVU3106
 11683 013c 424B     		ldr	r3, .L875+12
3873:src/xeq.c     **** 		State.entryp = 1;
 11684              		.loc 1 3873 15 view .LVU3107
 11685 013e 1268     		ldr	r2, [r2]
 11686 0140 1B68     		ldr	r3, [r3]
 11687 0142 1343     		orrs	r3, r2, r3
 11688 0144 07D1     		bne	.L836
3874:src/xeq.c     **** }
 11689              		.loc 1 3874 3 is_stmt 1 view .LVU3108
3874:src/xeq.c     **** }
 11690              		.loc 1 3874 16 is_stmt 0 view .LVU3109
 11691 0146 D8F80020 		ldr	r2, [r8]
 11692 014a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 11693 014e 43F01003 		orr	r3, r3, #16
 11694 0152 82F8DD37 		strb	r3, [r2, #2013]
 11695              	.L836:
 11696              	.LBE2226:
 11697              	.LBE2227:
 11698              	.LBE2224:
 11699              	.LBE2223:
 11700              	.LBE2242:
1299:src/xeq.c     **** 
 11701              		.loc 1 1299 1 view .LVU3110
 11702 0156 2CB0     		add	sp, sp, #176
 11703              		.cfi_remember_state
 11704              		.cfi_def_cfa_offset 32
 11705              		@ sp needed
 11706 0158 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 11707              	.LVL863:
 11708              	.L866:
 11709              		.cfi_restore_state
 11710              	.LBB2243:
1213:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
 11711              		.loc 1 1213 5 is_stmt 1 view .LVU3111
1213:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
 11712              		.loc 1 1213 30 is_stmt 0 view .LVU3112
 11713 015c 03F8A82C 		strb	r2, [r3, #-168]
 11714 0160 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1225:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11715              		.loc 1 1225 4 is_stmt 1 view .LVU3113
1225:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11716              		.loc 1 1225 7 is_stmt 0 view .LVU3114
 11717 0162 002A     		cmp	r2, #0
 11718 0164 3FF47AAF 		beq	.L872
 11719              	.L841:
1233:src/xeq.c     **** 		}
 11720              		.loc 1 1233 5 is_stmt 1 view .LVU3115
1233:src/xeq.c     **** 		}
 11721              		.loc 1 1233 18 is_stmt 0 view .LVU3116
 11722 0168 D8F80030 		ldr	r3, [r8]
 11723 016c 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 11724 0170 6FF34512 		bfc	r2, #5, #1
 11725 0174 83F8E627 		strb	r2, [r3, #2022]
1235:src/xeq.c     **** 		lift_if_enabled();
 11726              		.loc 1 1235 3 is_stmt 1 view .LVU3117
ARM GAS  /tmp/ccQlyisH.s 			page 357


 11727              	.LBB2228:
 11728              	.LBB2209:
 11729              	.LBB2205:
 11730              	.LBB2202:
 735:src/xeq.c     **** }
 11731              		.loc 1 735 15 is_stmt 0 view .LVU3118
 11732 0178 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11733              	.LBE2202:
 11734              	.LBE2205:
 11735              	.LBE2209:
 11736              	.LBE2228:
1235:src/xeq.c     **** 		lift_if_enabled();
 11737              		.loc 1 1235 17 view .LVU3119
 11738 017a 0022     		movs	r2, #0
 11739              	.LBB2229:
 11740              	.LBB2210:
 739:src/xeq.c     **** 		lift();
 11741              		.loc 1 739 5 view .LVU3120
 11742 017c 5B06     		lsls	r3, r3, #25
 11743              	.LBE2210:
 11744              	.LBE2229:
1235:src/xeq.c     **** 		lift_if_enabled();
 11745              		.loc 1 1235 17 view .LVU3121
 11746 017e 2277     		strb	r2, [r4, #28]
1236:src/xeq.c     **** 		set_lift();
 11747              		.loc 1 1236 3 is_stmt 1 view .LVU3122
 11748              	.LBB2230:
 738:src/xeq.c     **** 	if (get_lift())
 11749              		.loc 1 738 6 view .LVU3123
 11750              	.LBB2211:
 739:src/xeq.c     **** 		lift();
 11751              		.loc 1 739 2 view .LVU3124
 11752              	.LBB2206:
 734:src/xeq.c     **** 	return State2.state_lift;
 11753              		.loc 1 734 12 view .LVU3125
 11754              	.LBB2203:
 735:src/xeq.c     **** }
 11755              		.loc 1 735 2 view .LVU3126
 11756              	.LBE2203:
 11757              	.LBE2206:
 739:src/xeq.c     **** 		lift();
 11758              		.loc 1 739 5 is_stmt 0 view .LVU3127
 11759 0180 7FF575AF 		bpl	.L843
 11760              	.L868:
 740:src/xeq.c     **** }
 11761              		.loc 1 740 3 is_stmt 1 view .LVU3128
 11762 0184 FFF7FEFF 		bl	lift
 11763              	.LVL864:
 11764 0188 71E7     		b	.L843
 11765              	.L869:
 11766              	.LBE2211:
 11767              	.LBE2230:
 11768              	.LBB2231:
1241:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11769              		.loc 1 1241 4 view .LVU3129
1241:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11770              		.loc 1 1241 41 is_stmt 0 view .LVU3130
ARM GAS  /tmp/ccQlyisH.s 			page 358


 11771 018a 9DF80890 		ldrb	r9, [sp, #8]	@ zero_extendqisi2
 11772 018e A9F12D09 		sub	r9, r9, #45
 11773 0192 B9FA89F9 		clz	r9, r9
1242:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11774              		.loc 1 1242 31 view .LVU3131
 11775 0196 FFF7FEFF 		bl	int_base
 11776              	.LVL865:
1241:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11777              		.loc 1 1241 41 view .LVU3132
 11778 019a 4FEA5919 		lsr	r9, r9, #5
 11779              	.LVL866:
1242:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11780              		.loc 1 1242 4 is_stmt 1 view .LVU3133
1242:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11781              		.loc 1 1242 31 is_stmt 0 view .LVU3134
 11782 019e 02AB     		add	r3, sp, #8
 11783 01a0 03EB0902 		add	r2, r3, r9
 11784              	.LVL867:
 11785              	.LBB2232:
 11786              	.LBI2232:
1126:src/xeq.c     **** 	unsigned long long int x = 0;
 11787              		.loc 1 1126 24 is_stmt 1 view .LVU3135
 11788              	.LBB2233:
1127:src/xeq.c     **** 
 11789              		.loc 1 1127 2 view .LVU3136
1127:src/xeq.c     **** 
 11790              		.loc 1 1127 25 is_stmt 0 view .LVU3137
 11791 01a4 0026     		movs	r6, #0
 11792 01a6 0027     		movs	r7, #0
 11793 01a8 02E0     		b	.L848
 11794              	.LVL868:
 11795              	.L873:
 11796              	.LBB2234:
1141:src/xeq.c     **** 	}
 11797              		.loc 1 1141 5 view .LVU3138
 11798 01aa E618     		adds	r6, r4, r3
 11799              	.LVL869:
1141:src/xeq.c     **** 	}
 11800              		.loc 1 1141 5 view .LVU3139
 11801 01ac 45F10007 		adc	r7, r5, #0
 11802              	.LVL870:
1141:src/xeq.c     **** 	}
 11803              		.loc 1 1141 5 view .LVU3140
 11804              	.LBE2234:
1129:src/xeq.c     **** 		unsigned int n;
 11805              		.loc 1 1129 8 is_stmt 1 view .LVU3141
 11806              	.L848:
1129:src/xeq.c     **** 		unsigned int n;
 11807              		.loc 1 1129 2 view .LVU3142
 11808              	.LBB2235:
1130:src/xeq.c     **** 		const char c = *s++;
 11809              		.loc 1 1130 3 view .LVU3143
1131:src/xeq.c     **** 
 11810              		.loc 1 1131 3 view .LVU3144
1134:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 11811              		.loc 1 1134 4 view .LVU3145
1135:src/xeq.c     **** 			n = c - 'A' + 10;
ARM GAS  /tmp/ccQlyisH.s 			page 359


 11812              		.loc 1 1135 8 view .LVU3146
1136:src/xeq.c     **** 		else
 11813              		.loc 1 1136 4 view .LVU3147
1131:src/xeq.c     **** 
 11814              		.loc 1 1131 14 is_stmt 0 view .LVU3148
 11815 01b0 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 11816              	.LVL871:
1133:src/xeq.c     **** 			n = c - '0';
 11817              		.loc 1 1133 3 is_stmt 1 view .LVU3149
1133:src/xeq.c     **** 			n = c - '0';
 11818              		.loc 1 1133 16 is_stmt 0 view .LVU3150
 11819 01b4 A1F13003 		sub	r3, r1, #48
1133:src/xeq.c     **** 			n = c - '0';
 11820              		.loc 1 1133 6 view .LVU3151
 11821 01b8 DCB2     		uxtb	r4, r3
 11822 01ba 092C     		cmp	r4, #9
1135:src/xeq.c     **** 			n = c - 'A' + 10;
 11823              		.loc 1 1135 11 view .LVU3152
 11824 01bc A1F14105 		sub	r5, r1, #65
1133:src/xeq.c     **** 			n = c - '0';
 11825              		.loc 1 1133 6 view .LVU3153
 11826 01c0 03D9     		bls	.L846
1135:src/xeq.c     **** 			n = c - 'A' + 10;
 11827              		.loc 1 1135 11 view .LVU3154
 11828 01c2 052D     		cmp	r5, #5
 11829 01c4 07D8     		bhi	.L847
1136:src/xeq.c     **** 		else
 11830              		.loc 1 1136 16 view .LVU3155
 11831 01c6 A1F13703 		sub	r3, r1, #55
 11832              	.LVL872:
 11833              	.L846:
1139:src/xeq.c     **** 			break;
 11834              		.loc 1 1139 3 is_stmt 1 view .LVU3156
1141:src/xeq.c     **** 	}
 11835              		.loc 1 1141 3 view .LVU3157
1141:src/xeq.c     **** 	}
 11836              		.loc 1 1141 9 is_stmt 0 view .LVU3158
 11837 01ca A0FB0645 		umull	r4, r5, r0, r6
1139:src/xeq.c     **** 			break;
 11838              		.loc 1 1139 6 view .LVU3159
 11839 01ce 9842     		cmp	r0, r3
1141:src/xeq.c     **** 	}
 11840              		.loc 1 1141 9 view .LVU3160
 11841 01d0 00FB0755 		mla	r5, r0, r7, r5
1139:src/xeq.c     **** 			break;
 11842              		.loc 1 1139 6 view .LVU3161
 11843 01d4 E9D8     		bhi	.L873
 11844              	.LVL873:
 11845              	.L847:
1139:src/xeq.c     **** 			break;
 11846              		.loc 1 1139 6 view .LVU3162
 11847              	.LBE2235:
1143:src/xeq.c     **** }
 11848              		.loc 1 1143 2 is_stmt 1 view .LVU3163
1143:src/xeq.c     **** }
 11849              		.loc 1 1143 2 is_stmt 0 view .LVU3164
 11850              	.LBE2233:
ARM GAS  /tmp/ccQlyisH.s 			page 360


 11851              	.LBE2232:
1243:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
 11852              		.loc 1 1243 4 is_stmt 1 view .LVU3165
 11853              	.LBB2236:
 11854              	.LBI2236:
1478:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11855              		.loc 1 1478 6 view .LVU3166
 11856              	.LBB2237:
1479:src/xeq.c     **** }
 11857              		.loc 1 1479 2 view .LVU3167
 11858 01d6 CDF80090 		str	r9, [sp]
 11859 01da 3246     		mov	r2, r6
 11860 01dc 3B46     		mov	r3, r7
 11861 01de 6420     		movs	r0, #100
 11862 01e0 FFF7FEFF 		bl	set_reg_n_int_sgn
 11863              	.LVL874:
1480:src/xeq.c     **** 
 11864              		.loc 1 1480 1 is_stmt 0 view .LVU3168
 11865 01e4 A9E7     		b	.L849
 11866              	.LVL875:
 11867              	.L871:
1480:src/xeq.c     **** 
 11868              		.loc 1 1480 1 view .LVU3169
 11869              	.LBE2237:
 11870              	.LBE2236:
 11871              	.LBE2231:
 11872              	.LBB2238:
1286:src/xeq.c     **** 			if (neg)
 11873              		.loc 1 1286 5 is_stmt 1 view .LVU3170
 11874 01e6 1AA9     		add	r1, sp, #104
 11875 01e8 23AA     		add	r2, sp, #140
 11876 01ea 0846     		mov	r0, r1
 11877 01ec FFF7FEFF 		bl	dn_add
 11878              	.LVL876:
1287:src/xeq.c     **** 				dn_minus(&x, &x);
 11879              		.loc 1 1287 4 view .LVU3171
1287:src/xeq.c     **** 				dn_minus(&x, &x);
 11880              		.loc 1 1287 7 is_stmt 0 view .LVU3172
 11881 01f0 002C     		cmp	r4, #0
 11882 01f2 9ED0     		beq	.L865
 11883 01f4 93E7     		b	.L874
 11884              	.LVL877:
 11885              	.L867:
1287:src/xeq.c     **** 				dn_minus(&x, &x);
 11886              		.loc 1 1287 7 view .LVU3173
 11887              	.LBE2238:
1215:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11888              		.loc 1 1215 5 is_stmt 1 view .LVU3174
 11889 01f6 02AB     		add	r3, sp, #8
1215:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11890              		.loc 1 1215 58 is_stmt 0 view .LVU3175
 11891 01f8 511C     		adds	r1, r2, #1
1215:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11892              		.loc 1 1215 32 view .LVU3176
 11893 01fa 901C     		adds	r0, r2, #2
1215:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11894              		.loc 1 1215 5 view .LVU3177
ARM GAS  /tmp/ccQlyisH.s 			page 361


 11895 01fc 1944     		add	r1, r1, r3
 11896 01fe 1844     		add	r0, r0, r3
 11897 0200 C2F11202 		rsb	r2, r2, #18
 11898 0204 FFF7FEFF 		bl	xcopy
 11899              	.LVL878:
1216:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11900              		.loc 1 1216 5 is_stmt 1 view .LVU3178
1216:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11901              		.loc 1 1216 13 is_stmt 0 view .LVU3179
 11902 0208 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1216:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11903              		.loc 1 1216 25 view .LVU3180
 11904 020a 2CAB     		add	r3, sp, #176
 11905 020c 1344     		add	r3, r3, r2
 11906 020e 4520     		movs	r0, #69
1217:src/xeq.c     **** 			}
 11907              		.loc 1 1217 29 view .LVU3181
 11908 0210 2D21     		movs	r1, #45
1216:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11909              		.loc 1 1216 25 view .LVU3182
 11910 0212 03F8A80C 		strb	r0, [r3, #-168]
1217:src/xeq.c     **** 			}
 11911              		.loc 1 1217 5 is_stmt 1 view .LVU3183
1217:src/xeq.c     **** 			}
 11912              		.loc 1 1217 29 is_stmt 0 view .LVU3184
 11913 0216 03F8A71C 		strb	r1, [r3, #-167]
 11914 021a 1CE7     		b	.L840
 11915              	.LVL879:
 11916              	.L870:
 11917              	.LBB2239:
1268:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 11918              		.loc 1 1268 5 is_stmt 1 view .LVU3185
 11919 021c 1AA9     		add	r1, sp, #104
 11920 021e 2846     		mov	r0, r5
 11921 0220 FFF7FEFF 		bl	decNumberCopy
 11922              	.LVL880:
1269:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
 11923              		.loc 1 1269 5 view .LVU3186
 11924 0224 1AA8     		add	r0, sp, #104
 11925 0226 FFF7FEFF 		bl	decNumberZero
 11926              	.LVL881:
1271:src/xeq.c     **** #endif
 11927              		.loc 1 1271 5 view .LVU3187
1271:src/xeq.c     **** #endif
 11928              		.loc 1 1271 25 is_stmt 0 view .LVU3188
 11929 022a D8F80020 		ldr	r2, [r8]
 11930 022e 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 11931 0232 43F01003 		orr	r3, r3, #16
 11932 0236 82F8E637 		strb	r3, [r2, #2022]
 11933 023a 65E7     		b	.L853
 11934              	.L876:
 11935              		.align	2
 11936              	.L875:
 11937 023c 00000000 		.word	StateWhileOn
 11938 0240 00000000 		.word	Ctx
 11939 0244 00000000 		.word	Running
 11940 0248 00000000 		.word	XromRunning
ARM GAS  /tmp/ccQlyisH.s 			page 362


 11941 024c 00000000 		.word	main_ram
 11942              	.LBE2239:
 11943              	.LBE2243:
 11944              		.cfi_endproc
 11945              	.LFE288:
 11947              		.section	.text.process_cmdline,"ax",%progbits
 11948              		.align	1
 11949              		.p2align 2,,3
 11950              		.global	process_cmdline
 11951              		.syntax unified
 11952              		.thumb
 11953              		.thumb_func
 11954              		.fpu fpv4-sp-d16
 11956              	process_cmdline:
 11957              	.LFB87:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 11958              		.loc 1 1195 28 is_stmt 1 view -0
 11959              		.cfi_startproc
 11960              		@ args = 0, pretend = 0, frame = 0
 11961              		@ frame_needed = 0, uses_anonymous_args = 0
 11962              		@ link register save eliminated.
1196:src/xeq.c     **** 
 11963              		.loc 1 1196 2 view .LVU3190
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 11964              		.loc 1 1198 2 view .LVU3191
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 11965              		.loc 1 1198 6 is_stmt 0 view .LVU3192
 11966 0000 024B     		ldr	r3, .L880
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 11967              		.loc 1 1198 5 view .LVU3193
 11968 0002 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 11969 0004 03B9     		cbnz	r3, .L879
1299:src/xeq.c     **** 
 11970              		.loc 1 1299 1 view .LVU3194
 11971 0006 7047     		bx	lr
 11972              	.L879:
 11973 0008 FFF7FEBF 		b	process_cmdline.part.0
 11974              	.LVL882:
 11975              	.L881:
 11976              		.align	2
 11977              	.L880:
 11978 000c 00000000 		.word	StateWhileOn
 11979              		.cfi_endproc
 11980              	.LFE87:
 11982              		.section	.text.cpx_pi,"ax",%progbits
 11983              		.align	1
 11984              		.p2align 2,,3
 11985              		.global	cpx_pi
 11986              		.syntax unified
 11987              		.thumb
 11988              		.thumb_func
 11989              		.fpu fpv4-sp-d16
 11991              	cpx_pi:
 11992              	.LVL883:
 11993              	.LFB76:
 964:src/xeq.c     **** 	switch (op) {
 11994              		.loc 1 964 29 is_stmt 1 view -0
ARM GAS  /tmp/ccQlyisH.s 			page 363


 11995              		.cfi_startproc
 11996              		@ args = 0, pretend = 0, frame = 40
 11997              		@ frame_needed = 0, uses_anonymous_args = 0
 965:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 11998              		.loc 1 965 2 view .LVU3196
 964:src/xeq.c     **** 	switch (op) {
 11999              		.loc 1 964 29 is_stmt 0 view .LVU3197
 12000 0000 70B5     		push	{r4, r5, r6, lr}
 12001              		.cfi_def_cfa_offset 16
 12002              		.cfi_offset 4, -16
 12003              		.cfi_offset 5, -12
 12004              		.cfi_offset 6, -8
 12005              		.cfi_offset 14, -4
 965:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12006              		.loc 1 965 2 view .LVU3198
 12007 0002 C728     		cmp	r0, #199
 964:src/xeq.c     **** 	switch (op) {
 12008              		.loc 1 964 29 view .LVU3199
 12009 0004 8AB0     		sub	sp, sp, #40
 12010              		.cfi_def_cfa_offset 56
 965:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12011              		.loc 1 965 2 view .LVU3200
 12012 0006 26D0     		beq	.L883
 12013 0008 C828     		cmp	r0, #200
 12014 000a 1AD1     		bne	.L894
 974:src/xeq.c     **** 		process_cmdline();
 12015              		.loc 1 974 3 is_stmt 1 view .LVU3201
 974:src/xeq.c     **** 		process_cmdline();
 12016              		.loc 1 974 21 is_stmt 0 view .LVU3202
 12017 000c 2B4D     		ldr	r5, .L897
 12018 000e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12019              	.LBB2244:
 12020              	.LBB2245:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12021              		.loc 1 1198 5 view .LVU3203
 12022 0010 2A7F     		ldrb	r2, [r5, #28]	@ zero_extendqisi2
 12023              	.LBE2245:
 12024              	.LBE2244:
 974:src/xeq.c     **** 		process_cmdline();
 12025              		.loc 1 974 21 view .LVU3204
 12026 0012 6FF38613 		bfc	r3, #6, #1
 12027 0016 EB75     		strb	r3, [r5, #23]
 975:src/xeq.c     **** 		State2.state_lift = 0;
 12028              		.loc 1 975 3 is_stmt 1 view .LVU3205
 12029              	.LBB2248:
 12030              	.LBI2244:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 12031              		.loc 1 1195 6 view .LVU3206
 12032              	.LBB2246:
1196:src/xeq.c     **** 
 12033              		.loc 1 1196 2 view .LVU3207
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12034              		.loc 1 1198 2 view .LVU3208
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12035              		.loc 1 1198 5 is_stmt 0 view .LVU3209
 12036 0018 002A     		cmp	r2, #0
 12037 001a 41D1     		bne	.L895
ARM GAS  /tmp/ccQlyisH.s 			page 364


 12038              	.LVL884:
 12039              	.L888:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12040              		.loc 1 1198 5 view .LVU3210
 12041              	.LBE2246:
 12042              	.LBE2248:
 976:src/xeq.c     **** 		{
 12043              		.loc 1 976 3 is_stmt 1 view .LVU3211
 976:src/xeq.c     **** 		{
 12044              		.loc 1 976 21 is_stmt 0 view .LVU3212
 12045 001c EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12046 001e 284C     		ldr	r4, .L897+4
 12047 0020 6FF38613 		bfc	r3, #6, #1
 12048 0024 EB75     		strb	r3, [r5, #23]
 12049              	.LBB2249:
 978:src/xeq.c     **** 			getX(&r);
 12050              		.loc 1 978 4 is_stmt 1 view .LVU3213
 979:src/xeq.c     **** 			dn_multiply (&r, &const_PI, &r);
 12051              		.loc 1 979 4 view .LVU3214
 12052              	.LVL885:
 12053              	.LBB2250:
 12054              	.LBI2250:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 12055              		.loc 1 815 12 view .LVU3215
 12056              	.LBB2251:
 816:src/xeq.c     **** }
 12057              		.loc 1 816 2 view .LVU3216
 816:src/xeq.c     **** }
 12058              		.loc 1 816 9 is_stmt 0 view .LVU3217
 12059 0026 01A8     		add	r0, sp, #4
 12060              	.LVL886:
 816:src/xeq.c     **** }
 12061              		.loc 1 816 9 view .LVU3218
 12062 0028 6421     		movs	r1, #100
 12063 002a FFF7FEFF 		bl	getRegister
 12064              	.LVL887:
 816:src/xeq.c     **** }
 12065              		.loc 1 816 9 view .LVU3219
 12066              	.LBE2251:
 12067              	.LBE2250:
 980:src/xeq.c     **** 			setX(&r);
 12068              		.loc 1 980 4 is_stmt 1 view .LVU3220
 12069 002e 01AA     		add	r2, sp, #4
 12070 0030 2449     		ldr	r1, .L897+8
 12071 0032 1046     		mov	r0, r2
 12072 0034 FFF7FEFF 		bl	dn_multiply
 12073              	.LVL888:
 981:src/xeq.c     **** 		}
 12074              		.loc 1 981 4 view .LVU3221
 12075              	.LBB2252:
 12076              	.LBI2252:
 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 12077              		.loc 1 819 6 view .LVU3222
 12078              	.LBB2253:
 820:src/xeq.c     **** }
 12079              		.loc 1 820 2 view .LVU3223
 12080 0038 01A9     		add	r1, sp, #4
ARM GAS  /tmp/ccQlyisH.s 			page 365


 12081              	.LVL889:
 820:src/xeq.c     **** }
 12082              		.loc 1 820 2 is_stmt 0 view .LVU3224
 12083 003a 6420     		movs	r0, #100
 12084 003c FFF7FEFF 		bl	setRegister
 12085              	.LVL890:
 820:src/xeq.c     **** }
 12086              		.loc 1 820 2 view .LVU3225
 12087 0040 00E0     		b	.L885
 12088              	.LVL891:
 12089              	.L894:
 820:src/xeq.c     **** }
 12090              		.loc 1 820 2 view .LVU3226
 12091 0042 1F4C     		ldr	r4, .L897+4
 12092              	.LVL892:
 12093              	.L885:
 820:src/xeq.c     **** }
 12094              		.loc 1 820 2 view .LVU3227
 12095              	.LBE2253:
 12096              	.LBE2252:
 12097              	.LBE2249:
 983:src/xeq.c     **** 	}
 12098              		.loc 1 983 10 is_stmt 1 view .LVU3228
 985:src/xeq.c     **** }
 12099              		.loc 1 985 2 view .LVU3229
 12100 0044 2268     		ldr	r2, [r4]
 12101 0046 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 12102 004a 43F00103 		orr	r3, r3, #1
 12103 004e 82F8AD37 		strb	r3, [r2, #1965]
 986:src/xeq.c     **** 
 12104              		.loc 1 986 1 is_stmt 0 view .LVU3230
 12105 0052 0AB0     		add	sp, sp, #40
 12106              		.cfi_remember_state
 12107              		.cfi_def_cfa_offset 16
 12108              		@ sp needed
 12109 0054 70BD     		pop	{r4, r5, r6, pc}
 12110              	.LVL893:
 12111              	.L883:
 12112              		.cfi_restore_state
 967:src/xeq.c     **** 			stack_begin( 1 );
 12113              		.loc 1 967 3 is_stmt 1 view .LVU3231
 967:src/xeq.c     **** 			stack_begin( 1 );
 12114              		.loc 1 967 8 is_stmt 0 view .LVU3232
 12115 0056 1A4C     		ldr	r4, .L897+4
 12116 0058 2368     		ldr	r3, [r4]
 967:src/xeq.c     **** 			stack_begin( 1 );
 12117              		.loc 1 967 18 view .LVU3233
 12118 005a 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 967:src/xeq.c     **** 			stack_begin( 1 );
 12119              		.loc 1 967 6 view .LVU3234
 12120 005e 12F0060F 		tst	r2, #6
 12121 0062 20D0     		beq	.L896
 12122              	.LVL894:
 12123              	.L886:
 971:src/xeq.c     **** 		break;
 12124              		.loc 1 971 3 is_stmt 1 view .LVU3235
 12125              	.LBB2254:
ARM GAS  /tmp/ccQlyisH.s 			page 366


 12126              	.LBB2255:
1088:src/xeq.c     **** }
 12127              		.loc 1 1088 24 is_stmt 0 view .LVU3236
 12128 0064 B3F8E817 		ldrh	r1, [r3, #2024]
 12129              	.LBE2255:
 12130              	.LBE2254:
 971:src/xeq.c     **** 		break;
 12131              		.loc 1 971 3 view .LVU3237
 12132 0068 174B     		ldr	r3, .L897+12
 12133              	.LBB2258:
 12134              	.LBB2256:
1088:src/xeq.c     **** }
 12135              		.loc 1 1088 24 view .LVU3238
 12136 006a 44F20105 		movw	r5, #16385
 12137 006e 2940     		ands	r1, r1, r5
 12138              	.LBE2256:
 12139              	.LBE2258:
 971:src/xeq.c     **** 		break;
 12140              		.loc 1 971 22 view .LVU3239
 12141 0070 A1F58041 		sub	r1, r1, #16384
 12142 0074 B1FA81F1 		clz	r1, r1
 12143 0078 4909     		lsrs	r1, r1, #5
 12144 007a 6620     		movs	r0, #102
 971:src/xeq.c     **** 		break;
 12145              		.loc 1 971 3 view .LVU3240
 12146 007c 1E68     		ldr	r6, [r3]
 12147              	.LBB2259:
 12148              	.LBI2254:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12149              		.loc 1 1087 5 is_stmt 1 view .LVU3241
 12150              	.LBB2257:
1088:src/xeq.c     **** }
 12151              		.loc 1 1088 2 view .LVU3242
 12152              	.LBE2257:
 12153              	.LBE2259:
 971:src/xeq.c     **** 		break;
 12154              		.loc 1 971 22 is_stmt 0 view .LVU3243
 12155 007e FFF7FEFF 		bl	get_const
 12156              	.LVL895:
 12157              	.LBB2260:
 12158              	.LBB2261:
 12159              	.LBB2262:
 12160              	.LBB2263:
1088:src/xeq.c     **** }
 12161              		.loc 1 1088 24 view .LVU3244
 12162 0082 2368     		ldr	r3, [r4]
 12163 0084 B3F8E837 		ldrh	r3, [r3, #2024]
 12164              	.LBE2263:
 12165              	.LBE2262:
 718:src/xeq.c     **** }
 12166              		.loc 1 718 2 view .LVU3245
 12167 0088 1D40     		ands	r5, r5, r3
 12168 008a B5F5804F 		cmp	r5, #16384
 12169              	.LBE2261:
 12170              	.LBE2260:
 971:src/xeq.c     **** 		break;
 12171              		.loc 1 971 22 view .LVU3246
ARM GAS  /tmp/ccQlyisH.s 			page 367


 12172 008e 0146     		mov	r1, r0
 12173              	.LVL896:
 12174              	.LBB2267:
 12175              	.LBI2260:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12176              		.loc 1 717 6 is_stmt 1 view .LVU3247
 12177              	.LBB2266:
 718:src/xeq.c     **** }
 12178              		.loc 1 718 2 view .LVU3248
 12179              	.LBB2265:
 12180              	.LBI2262:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12181              		.loc 1 1087 5 view .LVU3249
 12182              	.LBB2264:
1088:src/xeq.c     **** }
 12183              		.loc 1 1088 2 view .LVU3250
 12184              	.LBE2264:
 12185              	.LBE2265:
 718:src/xeq.c     **** }
 12186              		.loc 1 718 2 is_stmt 0 view .LVU3251
 12187 0090 08BF     		it	eq
 12188 0092 1022     		moveq	r2, #16
 12189 0094 3046     		mov	r0, r6
 12190              	.LVL897:
 718:src/xeq.c     **** }
 12191              		.loc 1 718 2 view .LVU3252
 12192 0096 18BF     		it	ne
 12193 0098 0822     		movne	r2, #8
 12194 009a FFF7FEFF 		bl	xcopy
 12195              	.LVL898:
 719:src/xeq.c     **** 
 12196              		.loc 1 719 1 view .LVU3253
 12197 009e D1E7     		b	.L885
 12198              	.LVL899:
 12199              	.L895:
 719:src/xeq.c     **** 
 12200              		.loc 1 719 1 view .LVU3254
 12201              	.LBE2266:
 12202              	.LBE2267:
 12203              	.LBB2268:
 12204              	.LBB2247:
 12205 00a0 FFF7FEFF 		bl	process_cmdline.part.0
 12206              	.LVL900:
 719:src/xeq.c     **** 
 12207              		.loc 1 719 1 view .LVU3255
 12208 00a4 BAE7     		b	.L888
 12209              	.LVL901:
 12210              	.L896:
 719:src/xeq.c     **** 
 12211              		.loc 1 719 1 view .LVU3256
 12212              	.LBE2247:
 12213              	.LBE2268:
 968:src/xeq.c     **** 			SET_REAL;
 12214              		.loc 1 968 4 is_stmt 1 view .LVU3257
 12215 00a6 0120     		movs	r0, #1
 12216              	.LVL902:
 968:src/xeq.c     **** 			SET_REAL;
ARM GAS  /tmp/ccQlyisH.s 			page 368


 12217              		.loc 1 968 4 is_stmt 0 view .LVU3258
 12218 00a8 FFF7FEFF 		bl	stack_begin
 12219              	.LVL903:
 969:src/xeq.c     **** 		}
 12220              		.loc 1 969 4 is_stmt 1 view .LVU3259
 12221 00ac 2368     		ldr	r3, [r4]
 12222 00ae 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 12223 00b2 42F00202 		orr	r2, r2, #2
 12224 00b6 83F8AC27 		strb	r2, [r3, #1964]
 12225 00ba D3E7     		b	.L886
 12226              	.L898:
 12227              		.align	2
 12228              	.L897:
 12229 00bc 00000000 		.word	StateWhileOn
 12230 00c0 00000000 		.word	main_ram
 12231 00c4 00000000 		.word	const_PI
 12232 00c8 00000000 		.word	StackBase
 12233              		.cfi_endproc
 12234              	.LFE76:
 12236              		.section	.text.process_cmdline_set_lift,"ax",%progbits
 12237              		.align	1
 12238              		.p2align 2,,3
 12239              		.global	process_cmdline_set_lift
 12240              		.syntax unified
 12241              		.thumb
 12242              		.thumb_func
 12243              		.fpu fpv4-sp-d16
 12245              	process_cmdline_set_lift:
 12246              	.LFB88:
1301:src/xeq.c     **** 	process_cmdline();
 12247              		.loc 1 1301 37 view -0
 12248              		.cfi_startproc
 12249              		@ args = 0, pretend = 0, frame = 0
 12250              		@ frame_needed = 0, uses_anonymous_args = 0
1302:src/xeq.c     **** 	set_lift();
 12251              		.loc 1 1302 2 view .LVU3261
 12252              	.LBB2269:
 12253              	.LBI2269:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 12254              		.loc 1 1195 6 view .LVU3262
 12255              	.LBB2270:
1196:src/xeq.c     **** 
 12256              		.loc 1 1196 2 view .LVU3263
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12257              		.loc 1 1198 2 view .LVU3264
 12258              	.LBE2270:
 12259              	.LBE2269:
1301:src/xeq.c     **** 	process_cmdline();
 12260              		.loc 1 1301 37 is_stmt 0 view .LVU3265
 12261 0000 10B5     		push	{r4, lr}
 12262              		.cfi_def_cfa_offset 8
 12263              		.cfi_offset 4, -8
 12264              		.cfi_offset 14, -4
 12265              	.LBB2273:
 12266              	.LBB2271:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12267              		.loc 1 1198 6 view .LVU3266
ARM GAS  /tmp/ccQlyisH.s 			page 369


 12268 0002 074C     		ldr	r4, .L906
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12269              		.loc 1 1198 5 view .LVU3267
 12270 0004 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 12271 0006 23B9     		cbnz	r3, .L905
 12272              	.LBE2271:
 12273              	.LBE2273:
1303:src/xeq.c     **** }
 12274              		.loc 1 1303 2 is_stmt 1 view .LVU3268
 12275              	.LBB2274:
 12276              	.LBI2274:
 758:src/xeq.c     ****     State2.state_lift = 1;
 12277              		.loc 1 758 6 view .LVU3269
 12278              	.LBB2275:
 759:src/xeq.c     **** }
 12279              		.loc 1 759 5 view .LVU3270
 759:src/xeq.c     **** }
 12280              		.loc 1 759 23 is_stmt 0 view .LVU3271
 12281 0008 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12282 000a 43F04003 		orr	r3, r3, #64
 12283 000e E375     		strb	r3, [r4, #23]
 12284              	.LBE2275:
 12285              	.LBE2274:
1304:src/xeq.c     **** 
 12286              		.loc 1 1304 1 view .LVU3272
 12287 0010 10BD     		pop	{r4, pc}
 12288              	.L905:
 12289              	.LBB2277:
 12290              	.LBB2272:
 12291 0012 FFF7FEFF 		bl	process_cmdline.part.0
 12292              	.LVL904:
 12293              	.LBE2272:
 12294              	.LBE2277:
1303:src/xeq.c     **** }
 12295              		.loc 1 1303 2 is_stmt 1 view .LVU3273
 12296              	.LBB2278:
 758:src/xeq.c     ****     State2.state_lift = 1;
 12297              		.loc 1 758 6 view .LVU3274
 12298              	.LBB2276:
 759:src/xeq.c     **** }
 12299              		.loc 1 759 5 view .LVU3275
 759:src/xeq.c     **** }
 12300              		.loc 1 759 23 is_stmt 0 view .LVU3276
 12301 0016 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12302 0018 43F04003 		orr	r3, r3, #64
 12303 001c E375     		strb	r3, [r4, #23]
 12304              	.LBE2276:
 12305              	.LBE2278:
1304:src/xeq.c     **** 
 12306              		.loc 1 1304 1 view .LVU3277
 12307 001e 10BD     		pop	{r4, pc}
 12308              	.L907:
 12309              		.align	2
 12310              	.L906:
 12311 0020 00000000 		.word	StateWhileOn
 12312              		.cfi_endproc
 12313              	.LFE88:
ARM GAS  /tmp/ccQlyisH.s 			page 370


 12315              		.section	.text.setX_int,"ax",%progbits
 12316              		.align	1
 12317              		.p2align 2,,3
 12318              		.global	setX_int
 12319              		.syntax unified
 12320              		.thumb
 12321              		.thumb_func
 12322              		.fpu fpv4-sp-d16
 12324              	setX_int:
 12325              	.LVL905:
 12326              	.LFB101:
1473:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12327              		.loc 1 1473 34 is_stmt 1 view -0
 12328              		.cfi_startproc
 12329              		@ args = 0, pretend = 0, frame = 8
 12330              		@ frame_needed = 0, uses_anonymous_args = 0
1474:src/xeq.c     **** }
 12331              		.loc 1 1474 2 view .LVU3279
1473:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12332              		.loc 1 1473 34 is_stmt 0 view .LVU3280
 12333 0000 00B5     		push	{lr}
 12334              		.cfi_def_cfa_offset 4
 12335              		.cfi_offset 14, -4
 12336 0002 0B46     		mov	r3, r1
 12337 0004 83B0     		sub	sp, sp, #12
 12338              		.cfi_def_cfa_offset 16
1473:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12339              		.loc 1 1473 34 view .LVU3281
 12340 0006 0246     		mov	r2, r0
 12341              	.LBB2279:
 12342              	.LBB2280:
1392:src/xeq.c     **** }
 12343              		.loc 1 1392 8 view .LVU3282
 12344 0008 6420     		movs	r0, #100
 12345              	.LVL906:
1392:src/xeq.c     **** }
 12346              		.loc 1 1392 8 view .LVU3283
 12347 000a CDE90023 		strd	r2, [sp]
 12348              	.LVL907:
1392:src/xeq.c     **** }
 12349              		.loc 1 1392 8 view .LVU3284
 12350              	.LBE2280:
 12351              	.LBI2279:
1391:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 12352              		.loc 1 1391 6 is_stmt 1 view .LVU3285
 12353              	.LBB2281:
1392:src/xeq.c     **** }
 12354              		.loc 1 1392 2 view .LVU3286
1392:src/xeq.c     **** }
 12355              		.loc 1 1392 8 is_stmt 0 view .LVU3287
 12356 000e FFF7FEFF 		bl	get_reg_n
 12357              	.LVL908:
1392:src/xeq.c     **** }
 12358              		.loc 1 1392 2 view .LVU3288
 12359 0012 0822     		movs	r2, #8
 12360 0014 6946     		mov	r1, sp
 12361 0016 FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/ccQlyisH.s 			page 371


 12362              	.LVL909:
1392:src/xeq.c     **** }
 12363              		.loc 1 1392 2 view .LVU3289
 12364              	.LBE2281:
 12365              	.LBE2279:
1475:src/xeq.c     **** 
 12366              		.loc 1 1475 1 view .LVU3290
 12367 001a 03B0     		add	sp, sp, #12
 12368              		.cfi_def_cfa_offset 4
 12369              		@ sp needed
 12370 001c 5DF804FB 		ldr	pc, [sp], #4
 12371              		.cfi_endproc
 12372              	.LFE101:
 12374              		.section	.text.do_rcl,"ax",%progbits
 12375              		.align	1
 12376              		.p2align 2,,3
 12377              		.syntax unified
 12378              		.thumb
 12379              		.thumb_func
 12380              		.fpu fpv4-sp-d16
 12382              	do_rcl:
 12383              	.LVL910:
 12384              	.LFB117:
1715:src/xeq.c     **** 	if (op == RARG_RCL) {
 12385              		.loc 1 1715 45 is_stmt 1 view -0
 12386              		.cfi_startproc
 12387              		@ args = 0, pretend = 0, frame = 40
 12388              		@ frame_needed = 0, uses_anonymous_args = 0
1716:src/xeq.c     **** 		REGISTER temp;
 12389              		.loc 1 1716 2 view .LVU3292
1715:src/xeq.c     **** 	if (op == RARG_RCL) {
 12390              		.loc 1 1715 45 is_stmt 0 view .LVU3293
 12391 0000 30B5     		push	{r4, r5, lr}
 12392              		.cfi_def_cfa_offset 12
 12393              		.cfi_offset 4, -12
 12394              		.cfi_offset 5, -8
 12395              		.cfi_offset 14, -4
1716:src/xeq.c     **** 		REGISTER temp;
 12396              		.loc 1 1716 5 view .LVU3294
 12397 0002 0A29     		cmp	r1, #10
1715:src/xeq.c     **** 	if (op == RARG_RCL) {
 12398              		.loc 1 1715 45 view .LVU3295
 12399 0004 8BB0     		sub	sp, sp, #44
 12400              		.cfi_def_cfa_offset 56
1715:src/xeq.c     **** 	if (op == RARG_RCL) {
 12401              		.loc 1 1715 45 view .LVU3296
 12402 0006 0B46     		mov	r3, r1
1716:src/xeq.c     **** 		REGISTER temp;
 12403              		.loc 1 1716 5 view .LVU3297
 12404 0008 33D0     		beq	.L931
1722:src/xeq.c     **** 			long long int r;
 12405              		.loc 1 1722 3 is_stmt 1 view .LVU3298
1722:src/xeq.c     **** 			long long int r;
 12406              		.loc 1 1722 7 is_stmt 0 view .LVU3299
 12407 000a 304A     		ldr	r2, .L933
 12408 000c 1268     		ldr	r2, [r2]
 12409 000e 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
ARM GAS  /tmp/ccQlyisH.s 			page 372


1722:src/xeq.c     **** 			long long int r;
 12410              		.loc 1 1722 6 view .LVU3300
 12411 0012 D207     		lsls	r2, r2, #31
 12412 0014 0146     		mov	r1, r0
 12413              	.LVL911:
 12414              	.LBB2311:
1725:src/xeq.c     **** 				illegal(op);
 12415              		.loc 1 1725 8 view .LVU3301
 12416 0016 A3F10A03 		sub	r3, r3, #10
 12417              	.LBE2311:
1722:src/xeq.c     **** 			long long int r;
 12418              		.loc 1 1722 6 view .LVU3302
 12419 001a 14D5     		bpl	.L916
 12420              	.LBB2318:
1723:src/xeq.c     **** 
 12421              		.loc 1 1723 4 is_stmt 1 view .LVU3303
1725:src/xeq.c     **** 				illegal(op);
 12422              		.loc 1 1725 4 view .LVU3304
1725:src/xeq.c     **** 				illegal(op);
 12423              		.loc 1 1725 8 is_stmt 0 view .LVU3305
 12424 001c 98B2     		uxth	r0, r3
 12425              	.LVL912:
1725:src/xeq.c     **** 				illegal(op);
 12426              		.loc 1 1725 8 view .LVU3306
 12427 001e 6A46     		mov	r2, sp
 12428 0020 0123     		movs	r3, #1
 12429 0022 FFF7FEFF 		bl	storcl_intop
 12430              	.LVL913:
1725:src/xeq.c     **** 				illegal(op);
 12431              		.loc 1 1725 7 view .LVU3307
 12432 0026 20B1     		cbz	r0, .L917
1726:src/xeq.c     **** 			setlastX();
 12433              		.loc 1 1726 5 is_stmt 1 view .LVU3308
1726:src/xeq.c     **** 			setlastX();
 12434              		.loc 1 1726 5 view .LVU3309
 12435              	.LVL914:
 12436              	.LBB2312:
 12437              	.LBI2312:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12438              		.loc 1 537 5 view .LVU3310
 12439              	.LBB2313:
 538:src/xeq.c     **** 		Error = e;
 12440              		.loc 1 538 2 view .LVU3311
 538:src/xeq.c     **** 		Error = e;
 12441              		.loc 1 538 12 is_stmt 0 view .LVU3312
 12442 0028 294B     		ldr	r3, .L933+4
 538:src/xeq.c     **** 		Error = e;
 12443              		.loc 1 538 5 view .LVU3313
 12444 002a 1A68     		ldr	r2, [r3]
 12445 002c 0AB9     		cbnz	r2, .L917
 12446              	.LVL915:
 12447              	.LBB2314:
 12448              	.LBI2314:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12449              		.loc 1 537 5 is_stmt 1 view .LVU3314
 12450              	.LBB2315:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/ccQlyisH.s 			page 373


 12451              		.loc 1 539 3 view .LVU3315
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 12452              		.loc 1 539 9 is_stmt 0 view .LVU3316
 12453 002e 0322     		movs	r2, #3
 12454 0030 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 12455              		.loc 1 540 3 is_stmt 1 view .LVU3317
 12456              	.LVL916:
 12457              	.L917:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 12458              		.loc 1 540 3 is_stmt 0 view .LVU3318
 12459              	.LBE2315:
 12460              	.LBE2314:
 12461              	.LBE2313:
 12462              	.LBE2312:
1726:src/xeq.c     **** 			setlastX();
 12463              		.loc 1 1726 5 is_stmt 1 discriminator 1 view .LVU3319
1727:src/xeq.c     **** 			setX_int(r);
 12464              		.loc 1 1727 4 discriminator 1 view .LVU3320
 12465              	.LBB2316:
 12466              	.LBI2316:
 783:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 12467              		.loc 1 783 6 discriminator 1 view .LVU3321
 12468              	.LBB2317:
 784:src/xeq.c     **** }
 12469              		.loc 1 784 2 discriminator 1 view .LVU3322
 12470 0032 6421     		movs	r1, #100
 12471 0034 6C20     		movs	r0, #108
 12472 0036 FFF7FEFF 		bl	copyreg_n
 12473              	.LVL917:
 12474              	.LBE2317:
 12475              	.LBE2316:
1728:src/xeq.c     **** 		} else {
 12476              		.loc 1 1728 4 discriminator 1 view .LVU3323
 12477 003a DDE90001 		ldrd	r0, [sp]
 12478 003e FFF7FEFF 		bl	setX_int
 12479              	.LVL918:
 12480              	.LBE2318:
1738:src/xeq.c     **** 
 12481              		.loc 1 1738 1 is_stmt 0 discriminator 1 view .LVU3324
 12482 0042 0BB0     		add	sp, sp, #44
 12483              		.cfi_remember_state
 12484              		.cfi_def_cfa_offset 12
 12485              		@ sp needed
 12486 0044 30BD     		pop	{r4, r5, pc}
 12487              	.LVL919:
 12488              	.L916:
 12489              		.cfi_restore_state
 12490              	.LBB2319:
1730:src/xeq.c     **** 
 12491              		.loc 1 1730 4 is_stmt 1 view .LVU3325
1732:src/xeq.c     **** 				illegal(op);
 12492              		.loc 1 1732 4 view .LVU3326
1732:src/xeq.c     **** 				illegal(op);
 12493              		.loc 1 1732 8 is_stmt 0 view .LVU3327
 12494 0046 6C46     		mov	r4, sp
 12495 0048 98B2     		uxth	r0, r3
ARM GAS  /tmp/ccQlyisH.s 			page 374


 12496              	.LVL920:
1732:src/xeq.c     **** 				illegal(op);
 12497              		.loc 1 1732 8 view .LVU3328
 12498 004a 2246     		mov	r2, r4
 12499 004c 0123     		movs	r3, #1
 12500 004e FFF7FEFF 		bl	storcl_op
 12501              	.LVL921:
1732:src/xeq.c     **** 				illegal(op);
 12502              		.loc 1 1732 7 view .LVU3329
 12503 0052 20B1     		cbz	r0, .L918
1733:src/xeq.c     **** 			setlastX();
 12504              		.loc 1 1733 5 is_stmt 1 view .LVU3330
1733:src/xeq.c     **** 			setlastX();
 12505              		.loc 1 1733 5 view .LVU3331
 12506              	.LVL922:
 12507              	.LBB2320:
 12508              	.LBI2320:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12509              		.loc 1 537 5 view .LVU3332
 12510              	.LBB2321:
 538:src/xeq.c     **** 		Error = e;
 12511              		.loc 1 538 2 view .LVU3333
 538:src/xeq.c     **** 		Error = e;
 12512              		.loc 1 538 12 is_stmt 0 view .LVU3334
 12513 0054 1E4B     		ldr	r3, .L933+4
 538:src/xeq.c     **** 		Error = e;
 12514              		.loc 1 538 5 view .LVU3335
 12515 0056 1A68     		ldr	r2, [r3]
 12516 0058 0AB9     		cbnz	r2, .L918
 12517              	.LVL923:
 12518              	.LBB2322:
 12519              	.LBI2322:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12520              		.loc 1 537 5 is_stmt 1 view .LVU3336
 12521              	.LBB2323:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 12522              		.loc 1 539 3 view .LVU3337
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 12523              		.loc 1 539 9 is_stmt 0 view .LVU3338
 12524 005a 0322     		movs	r2, #3
 12525 005c 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 12526              		.loc 1 540 3 is_stmt 1 view .LVU3339
 12527              	.LVL924:
 12528              	.L918:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 12529              		.loc 1 540 3 is_stmt 0 view .LVU3340
 12530              	.LBE2323:
 12531              	.LBE2322:
 12532              	.LBE2321:
 12533              	.LBE2320:
1733:src/xeq.c     **** 			setlastX();
 12534              		.loc 1 1733 5 is_stmt 1 discriminator 1 view .LVU3341
1734:src/xeq.c     **** 			setX(&r);
 12535              		.loc 1 1734 4 discriminator 1 view .LVU3342
 12536              	.LBB2324:
 12537              	.LBI2324:
ARM GAS  /tmp/ccQlyisH.s 			page 375


 783:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 12538              		.loc 1 783 6 discriminator 1 view .LVU3343
 12539              	.LBB2325:
 784:src/xeq.c     **** }
 12540              		.loc 1 784 2 discriminator 1 view .LVU3344
 12541 005e 6421     		movs	r1, #100
 12542 0060 6C20     		movs	r0, #108
 12543 0062 FFF7FEFF 		bl	copyreg_n
 12544              	.LVL925:
 12545              	.LBE2325:
 12546              	.LBE2324:
1735:src/xeq.c     **** 		}
 12547              		.loc 1 1735 4 discriminator 1 view .LVU3345
 12548              	.LBB2326:
 12549              	.LBI2326:
 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 12550              		.loc 1 819 6 discriminator 1 view .LVU3346
 12551              	.LBB2327:
 820:src/xeq.c     **** }
 12552              		.loc 1 820 2 discriminator 1 view .LVU3347
 12553 0066 2146     		mov	r1, r4
 12554 0068 6420     		movs	r0, #100
 12555 006a FFF7FEFF 		bl	setRegister
 12556              	.LVL926:
 820:src/xeq.c     **** }
 12557              		.loc 1 820 2 is_stmt 0 discriminator 1 view .LVU3348
 12558              	.LBE2327:
 12559              	.LBE2326:
 12560              	.LBE2319:
1738:src/xeq.c     **** 
 12561              		.loc 1 1738 1 discriminator 1 view .LVU3349
 12562 006e 0BB0     		add	sp, sp, #44
 12563              		.cfi_remember_state
 12564              		.cfi_def_cfa_offset 12
 12565              		@ sp needed
 12566 0070 30BD     		pop	{r4, r5, pc}
 12567              	.LVL927:
 12568              	.L931:
 12569              		.cfi_restore_state
 12570              	.LBB2328:
1717:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
 12571              		.loc 1 1717 3 is_stmt 1 view .LVU3350
1718:src/xeq.c     **** 		lift_if_enabled();
 12572              		.loc 1 1718 3 view .LVU3351
 12573              	.LBB2329:
 12574              	.LBB2330:
 12575              	.LBB2331:
 12576              	.LBB2332:
1088:src/xeq.c     **** }
 12577              		.loc 1 1088 24 is_stmt 0 view .LVU3352
 12578 0072 164D     		ldr	r5, .L933
 12579              	.LBE2332:
 12580              	.LBE2331:
 12581              	.LBE2330:
 12582              	.LBE2329:
1718:src/xeq.c     **** 		lift_if_enabled();
 12583              		.loc 1 1718 18 view .LVU3353
ARM GAS  /tmp/ccQlyisH.s 			page 376


 12584 0074 FFF7FEFF 		bl	get_reg_n
 12585              	.LVL928:
 12586              	.LBB2339:
 12587              	.LBB2337:
 12588              	.LBB2335:
 12589              	.LBB2333:
1088:src/xeq.c     **** }
 12590              		.loc 1 1088 24 view .LVU3354
 12591 0078 2B68     		ldr	r3, [r5]
 12592 007a B3F8E827 		ldrh	r2, [r3, #2024]
 12593 007e 44F20103 		movw	r3, #16385
 12594              	.LBE2333:
 12595              	.LBE2335:
 718:src/xeq.c     **** }
 12596              		.loc 1 718 2 view .LVU3355
 12597 0082 1340     		ands	r3, r3, r2
 12598 0084 B3F5804F 		cmp	r3, #16384
 12599 0088 6C46     		mov	r4, sp
 12600              	.LBE2337:
 12601              	.LBE2339:
1718:src/xeq.c     **** 		lift_if_enabled();
 12602              		.loc 1 1718 18 view .LVU3356
 12603 008a 0146     		mov	r1, r0
 12604              	.LVL929:
 12605              	.LBB2340:
 12606              	.LBI2329:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12607              		.loc 1 717 6 is_stmt 1 view .LVU3357
 12608              	.LBB2338:
 718:src/xeq.c     **** }
 12609              		.loc 1 718 2 view .LVU3358
 12610              	.LBB2336:
 12611              	.LBI2331:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12612              		.loc 1 1087 5 view .LVU3359
 12613              	.LBB2334:
1088:src/xeq.c     **** }
 12614              		.loc 1 1088 2 view .LVU3360
 12615              	.LBE2334:
 12616              	.LBE2336:
 718:src/xeq.c     **** }
 12617              		.loc 1 718 2 is_stmt 0 view .LVU3361
 12618 008c 0CBF     		ite	eq
 12619 008e 1022     		moveq	r2, #16
 12620 0090 0822     		movne	r2, #8
 12621 0092 2046     		mov	r0, r4
 12622              	.LVL930:
 718:src/xeq.c     **** }
 12623              		.loc 1 718 2 view .LVU3362
 12624 0094 FFF7FEFF 		bl	xcopy
 12625              	.LVL931:
 718:src/xeq.c     **** }
 12626              		.loc 1 718 2 view .LVU3363
 12627              	.LBE2338:
 12628              	.LBE2340:
1719:src/xeq.c     **** 		copyreg(StackBase, &temp);
 12629              		.loc 1 1719 3 is_stmt 1 view .LVU3364
ARM GAS  /tmp/ccQlyisH.s 			page 377


 12630              	.LBB2341:
 12631              	.LBI2341:
 738:src/xeq.c     **** 	if (get_lift())
 12632              		.loc 1 738 6 view .LVU3365
 12633              	.LBB2342:
 739:src/xeq.c     **** 		lift();
 12634              		.loc 1 739 2 view .LVU3366
 12635              	.LBB2343:
 12636              	.LBI2343:
 734:src/xeq.c     **** 	return State2.state_lift;
 12637              		.loc 1 734 12 view .LVU3367
 12638              	.LBB2344:
 735:src/xeq.c     **** }
 12639              		.loc 1 735 2 view .LVU3368
 735:src/xeq.c     **** }
 12640              		.loc 1 735 15 is_stmt 0 view .LVU3369
 12641 0098 0E4B     		ldr	r3, .L933+8
 12642 009a DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 12643              	.LBE2344:
 12644              	.LBE2343:
 739:src/xeq.c     **** 		lift();
 12645              		.loc 1 739 5 view .LVU3370
 12646 009c 5906     		lsls	r1, r3, #25
 12647 009e 11D4     		bmi	.L932
 12648              	.L913:
 12649              	.LBE2342:
 12650              	.LBE2341:
1720:src/xeq.c     **** 	} else {
 12651              		.loc 1 1720 3 is_stmt 1 view .LVU3371
 12652              	.LBB2346:
 12653              	.LBB2347:
 12654              	.LBB2348:
 12655              	.LBB2349:
1088:src/xeq.c     **** }
 12656              		.loc 1 1088 24 is_stmt 0 view .LVU3372
 12657 00a0 2A68     		ldr	r2, [r5]
 12658              	.LBE2349:
 12659              	.LBE2348:
 12660              	.LBE2347:
 12661              	.LBE2346:
1720:src/xeq.c     **** 	} else {
 12662              		.loc 1 1720 3 view .LVU3373
 12663 00a2 0D4B     		ldr	r3, .L933+12
 12664              	.LVL932:
 12665              	.LBB2355:
 12666              	.LBI2346:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12667              		.loc 1 717 6 is_stmt 1 view .LVU3374
 12668              	.LBB2354:
 718:src/xeq.c     **** }
 12669              		.loc 1 718 2 view .LVU3375
 12670              	.LBB2352:
 12671              	.LBI2348:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12672              		.loc 1 1087 5 view .LVU3376
 12673              	.LBB2350:
1088:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 378


 12674              		.loc 1 1088 2 view .LVU3377
1088:src/xeq.c     **** }
 12675              		.loc 1 1088 24 is_stmt 0 view .LVU3378
 12676 00a4 B2F8E827 		ldrh	r2, [r2, #2024]
 12677              	.LBE2350:
 12678              	.LBE2352:
 718:src/xeq.c     **** }
 12679              		.loc 1 718 2 view .LVU3379
 12680 00a8 1868     		ldr	r0, [r3]
 12681              	.LBB2353:
 12682              	.LBB2351:
1088:src/xeq.c     **** }
 12683              		.loc 1 1088 24 view .LVU3380
 12684 00aa 44F20103 		movw	r3, #16385
 12685              	.LVL933:
1088:src/xeq.c     **** }
 12686              		.loc 1 1088 24 view .LVU3381
 12687              	.LBE2351:
 12688              	.LBE2353:
 718:src/xeq.c     **** }
 12689              		.loc 1 718 2 view .LVU3382
 12690 00ae 1340     		ands	r3, r3, r2
 12691 00b0 B3F5804F 		cmp	r3, #16384
 12692 00b4 2146     		mov	r1, r4
 12693 00b6 0CBF     		ite	eq
 12694 00b8 1022     		moveq	r2, #16
 12695 00ba 0822     		movne	r2, #8
 12696 00bc FFF7FEFF 		bl	xcopy
 12697              	.LVL934:
 718:src/xeq.c     **** }
 12698              		.loc 1 718 2 view .LVU3383
 12699              	.LBE2354:
 12700              	.LBE2355:
 12701              	.LBE2328:
1738:src/xeq.c     **** 
 12702              		.loc 1 1738 1 view .LVU3384
 12703 00c0 0BB0     		add	sp, sp, #44
 12704              		.cfi_remember_state
 12705              		.cfi_def_cfa_offset 12
 12706              		@ sp needed
 12707 00c2 30BD     		pop	{r4, r5, pc}
 12708              	.L932:
 12709              		.cfi_restore_state
 12710              	.LBB2357:
 12711              	.LBB2356:
 12712              	.LBB2345:
 740:src/xeq.c     **** }
 12713              		.loc 1 740 3 is_stmt 1 view .LVU3385
 12714 00c4 FFF7FEFF 		bl	lift
 12715              	.LVL935:
 12716 00c8 EAE7     		b	.L913
 12717              	.L934:
 12718 00ca 00BF     		.align	2
 12719              	.L933:
 12720 00cc 00000000 		.word	main_ram
 12721 00d0 00000000 		.word	Error
 12722 00d4 00000000 		.word	StateWhileOn
ARM GAS  /tmp/ccQlyisH.s 			page 379


 12723 00d8 00000000 		.word	StackBase
 12724              	.LBE2345:
 12725              	.LBE2356:
 12726              	.LBE2357:
 12727              		.cfi_endproc
 12728              	.LFE117:
 12730              		.section	.text.setX_int_sgn,"ax",%progbits
 12731              		.align	1
 12732              		.p2align 2,,3
 12733              		.global	setX_int_sgn
 12734              		.syntax unified
 12735              		.thumb
 12736              		.thumb_func
 12737              		.fpu fpv4-sp-d16
 12739              	setX_int_sgn:
 12740              	.LVL936:
 12741              	.LFB102:
1478:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 12742              		.loc 1 1478 56 view -0
 12743              		.cfi_startproc
 12744              		@ args = 0, pretend = 0, frame = 0
 12745              		@ frame_needed = 0, uses_anonymous_args = 0
1479:src/xeq.c     **** }
 12746              		.loc 1 1479 2 view .LVU3387
1478:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 12747              		.loc 1 1478 56 is_stmt 0 view .LVU3388
 12748 0000 00B5     		push	{lr}
 12749              		.cfi_def_cfa_offset 4
 12750              		.cfi_offset 14, -4
 12751 0002 83B0     		sub	sp, sp, #12
 12752              		.cfi_def_cfa_offset 16
1479:src/xeq.c     **** }
 12753              		.loc 1 1479 2 view .LVU3389
 12754 0004 0B46     		mov	r3, r1
 12755 0006 0092     		str	r2, [sp]
 12756 0008 0246     		mov	r2, r0
 12757              	.LVL937:
1479:src/xeq.c     **** }
 12758              		.loc 1 1479 2 view .LVU3390
 12759 000a 6420     		movs	r0, #100
 12760              	.LVL938:
1479:src/xeq.c     **** }
 12761              		.loc 1 1479 2 view .LVU3391
 12762 000c FFF7FEFF 		bl	set_reg_n_int_sgn
 12763              	.LVL939:
1480:src/xeq.c     **** 
 12764              		.loc 1 1480 1 view .LVU3392
 12765 0010 03B0     		add	sp, sp, #12
 12766              		.cfi_def_cfa_offset 4
 12767              		@ sp needed
 12768 0012 5DF804FB 		ldr	pc, [sp], #4
 12769              		.cfi_endproc
 12770              	.LFE102:
 12772 0016 00BF     		.section	.text.zero_regs,"ax",%progbits
 12773              		.align	1
 12774              		.p2align 2,,3
 12775              		.global	zero_regs
ARM GAS  /tmp/ccQlyisH.s 			page 380


 12776              		.syntax unified
 12777              		.thumb
 12778              		.thumb_func
 12779              		.fpu fpv4-sp-d16
 12781              	zero_regs:
 12782              	.LVL940:
 12783              	.LFB103:
1487:src/xeq.c     **** #if 0
 12784              		.loc 1 1487 39 is_stmt 1 view -0
 12785              		.cfi_startproc
 12786              		@ args = 0, pretend = 0, frame = 0
 12787              		@ frame_needed = 0, uses_anonymous_args = 0
 12788              		@ link register save eliminated.
1502:src/xeq.c     **** #endif
 12789              		.loc 1 1502 2 view .LVU3394
 12790              	.LBB2358:
 12791              	.LBI2358:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12792              		.loc 1 1087 5 view .LVU3395
 12793              	.LBB2359:
1088:src/xeq.c     **** }
 12794              		.loc 1 1088 2 view .LVU3396
1088:src/xeq.c     **** }
 12795              		.loc 1 1088 24 is_stmt 0 view .LVU3397
 12796 0000 084B     		ldr	r3, .L938
 12797 0002 1B68     		ldr	r3, [r3]
 12798 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 12799 0008 44F20103 		movw	r3, #16385
 12800 000c 1340     		ands	r3, r3, r2
 12801 000e A3F58043 		sub	r3, r3, #16384
 12802 0012 B3FA83F3 		clz	r3, r3
 12803 0016 5B09     		lsrs	r3, r3, #5
 12804              	.LBE2359:
 12805              	.LBE2358:
1502:src/xeq.c     **** #endif
 12806              		.loc 1 1502 24 view .LVU3398
 12807 0018 0333     		adds	r3, r3, #3
1502:src/xeq.c     **** #endif
 12808              		.loc 1 1502 2 view .LVU3399
 12809 001a 01FA03F2 		lsl	r2, r1, r3
 12810 001e 0021     		movs	r1, #0
 12811              	.LVL941:
1502:src/xeq.c     **** #endif
 12812              		.loc 1 1502 2 view .LVU3400
 12813 0020 FFF7FEBF 		b	xset
 12814              	.LVL942:
 12815              	.L939:
1502:src/xeq.c     **** #endif
 12816              		.loc 1 1502 2 view .LVU3401
 12817              		.align	2
 12818              	.L938:
 12819 0024 00000000 		.word	main_ram
 12820              		.cfi_endproc
 12821              	.LFE103:
 12823              		.section	.text.move_regs,"ax",%progbits
 12824              		.align	1
 12825              		.p2align 2,,3
ARM GAS  /tmp/ccQlyisH.s 			page 381


 12826              		.global	move_regs
 12827              		.syntax unified
 12828              		.thumb
 12829              		.thumb_func
 12830              		.fpu fpv4-sp-d16
 12832              	move_regs:
 12833              	.LVL943:
 12834              	.LFB104:
1506:src/xeq.c     **** 	if (is_dblmode())
 12835              		.loc 1 1506 54 is_stmt 1 view -0
 12836              		.cfi_startproc
 12837              		@ args = 0, pretend = 0, frame = 0
 12838              		@ frame_needed = 0, uses_anonymous_args = 0
 12839              		@ link register save eliminated.
1507:src/xeq.c     **** 		n <<= 1;
 12840              		.loc 1 1507 2 view .LVU3403
 12841              	.LBB2360:
 12842              	.LBI2360:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12843              		.loc 1 1087 5 view .LVU3404
 12844              	.LBB2361:
1088:src/xeq.c     **** }
 12845              		.loc 1 1088 2 view .LVU3405
1088:src/xeq.c     **** }
 12846              		.loc 1 1088 24 is_stmt 0 view .LVU3406
 12847 0000 084B     		ldr	r3, .L943
 12848 0002 1B68     		ldr	r3, [r3]
 12849              	.LBE2361:
 12850              	.LBE2360:
1506:src/xeq.c     **** 	if (is_dblmode())
 12851              		.loc 1 1506 54 view .LVU3407
 12852 0004 10B4     		push	{r4}
 12853              		.cfi_def_cfa_offset 4
 12854              		.cfi_offset 4, -4
 12855              	.LBB2363:
 12856              	.LBB2362:
1088:src/xeq.c     **** }
 12857              		.loc 1 1088 24 view .LVU3408
 12858 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 12859 000a 44F20103 		movw	r3, #16385
 12860              	.LBE2362:
 12861              	.LBE2363:
1507:src/xeq.c     **** 		n <<= 1;
 12862              		.loc 1 1507 5 view .LVU3409
 12863 000e 2340     		ands	r3, r3, r4
 12864 0010 B3F5804F 		cmp	r3, #16384
1508:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 12865              		.loc 1 1508 3 is_stmt 1 view .LVU3410
1508:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 12866              		.loc 1 1508 5 is_stmt 0 view .LVU3411
 12867 0014 08BF     		it	eq
 12868 0016 5200     		lsleq	r2, r2, #1
 12869              	.LVL944:
1509:src/xeq.c     **** }
 12870              		.loc 1 1509 2 is_stmt 1 view .LVU3412
1510:src/xeq.c     **** 
 12871              		.loc 1 1510 1 is_stmt 0 view .LVU3413
ARM GAS  /tmp/ccQlyisH.s 			page 382


 12872 0018 5DF8044B 		ldr	r4, [sp], #4
 12873              		.cfi_restore 4
 12874              		.cfi_def_cfa_offset 0
1509:src/xeq.c     **** }
 12875              		.loc 1 1509 2 view .LVU3414
 12876 001c D200     		lsls	r2, r2, #3
 12877              	.LVL945:
1509:src/xeq.c     **** }
 12878              		.loc 1 1509 2 view .LVU3415
 12879 001e FFF7FEBF 		b	xcopy
 12880              	.LVL946:
 12881              	.L944:
1509:src/xeq.c     **** }
 12882              		.loc 1 1509 2 view .LVU3416
 12883 0022 00BF     		.align	2
 12884              	.L943:
 12885 0024 00000000 		.word	main_ram
 12886              		.cfi_endproc
 12887              	.LFE104:
 12889              		.section	.text.zero_X,"ax",%progbits
 12890              		.align	1
 12891              		.p2align 2,,3
 12892              		.global	zero_X
 12893              		.syntax unified
 12894              		.thumb
 12895              		.thumb_func
 12896              		.fpu fpv4-sp-d16
 12898              	zero_X:
 12899              	.LFB106:
1519:src/xeq.c     **** 	set_zero(StackBase);
 12900              		.loc 1 1519 19 is_stmt 1 view -0
 12901              		.cfi_startproc
 12902              		@ args = 0, pretend = 0, frame = 0
 12903              		@ frame_needed = 0, uses_anonymous_args = 0
 12904              		@ link register save eliminated.
1520:src/xeq.c     **** }
 12905              		.loc 1 1520 2 view .LVU3418
 12906 0000 014B     		ldr	r3, .L946
 12907 0002 1868     		ldr	r0, [r3]
 12908 0004 FFF7FEBF 		b	set_zero
 12909              	.LVL947:
 12910              	.L947:
 12911              		.align	2
 12912              	.L946:
 12913 0008 00000000 		.word	StackBase
 12914              		.cfi_endproc
 12915              	.LFE106:
 12917              		.section	.text.zero_Y,"ax",%progbits
 12918              		.align	1
 12919              		.p2align 2,,3
 12920              		.global	zero_Y
 12921              		.syntax unified
 12922              		.thumb
 12923              		.thumb_func
 12924              		.fpu fpv4-sp-d16
 12926              	zero_Y:
 12927              	.LFB107:
ARM GAS  /tmp/ccQlyisH.s 			page 383


1523:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 12928              		.loc 1 1523 19 view -0
 12929              		.cfi_startproc
 12930              		@ args = 0, pretend = 0, frame = 0
 12931              		@ frame_needed = 0, uses_anonymous_args = 0
1524:src/xeq.c     **** }
 12932              		.loc 1 1524 2 view .LVU3420
1523:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 12933              		.loc 1 1523 19 is_stmt 0 view .LVU3421
 12934 0000 08B5     		push	{r3, lr}
 12935              		.cfi_def_cfa_offset 8
 12936              		.cfi_offset 3, -8
 12937              		.cfi_offset 14, -4
1524:src/xeq.c     **** }
 12938              		.loc 1 1524 2 view .LVU3422
 12939 0002 6520     		movs	r0, #101
 12940 0004 FFF7FEFF 		bl	get_reg_n
 12941              	.LVL948:
1525:src/xeq.c     **** 
 12942              		.loc 1 1525 1 view .LVU3423
 12943 0008 BDE80840 		pop	{r3, lr}
 12944              		.cfi_restore 14
 12945              		.cfi_restore 3
 12946              		.cfi_def_cfa_offset 0
1524:src/xeq.c     **** }
 12947              		.loc 1 1524 2 view .LVU3424
 12948 000c FFF7FEBF 		b	set_zero
 12949              	.LVL949:
 12950              		.cfi_endproc
 12951              	.LFE107:
 12953              		.section	.text.clrx,"ax",%progbits
 12954              		.align	1
 12955              		.p2align 2,,3
 12956              		.global	clrx
 12957              		.syntax unified
 12958              		.thumb
 12959              		.thumb_func
 12960              		.fpu fpv4-sp-d16
 12962              	clrx:
 12963              	.LVL950:
 12964              	.LFB108:
1527:src/xeq.c     **** 	zero_X();
 12965              		.loc 1 1527 26 is_stmt 1 view -0
 12966              		.cfi_startproc
 12967              		@ args = 0, pretend = 0, frame = 0
 12968              		@ frame_needed = 0, uses_anonymous_args = 0
1528:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 12969              		.loc 1 1528 2 view .LVU3426
 12970              	.LBB2364:
 12971              	.LBI2364:
1519:src/xeq.c     **** 	set_zero(StackBase);
 12972              		.loc 1 1519 6 view .LVU3427
 12973              	.LBB2365:
1520:src/xeq.c     **** }
 12974              		.loc 1 1520 2 view .LVU3428
 12975 0000 1A4B     		ldr	r3, .L956
 12976              	.LBE2365:
ARM GAS  /tmp/ccQlyisH.s 			page 384


 12977              	.LBE2364:
1527:src/xeq.c     **** 	zero_X();
 12978              		.loc 1 1527 26 is_stmt 0 view .LVU3429
 12979 0002 10B5     		push	{r4, lr}
 12980              		.cfi_def_cfa_offset 8
 12981              		.cfi_offset 4, -8
 12982              		.cfi_offset 14, -4
1530:src/xeq.c     **** 		zero_Y();
 12983              		.loc 1 1530 6 view .LVU3430
 12984 0004 1A4C     		ldr	r4, .L956+4
 12985              	.LBB2367:
 12986              	.LBB2366:
1520:src/xeq.c     **** }
 12987              		.loc 1 1520 2 view .LVU3431
 12988 0006 1868     		ldr	r0, [r3]
 12989              	.LVL951:
1520:src/xeq.c     **** }
 12990              		.loc 1 1520 2 view .LVU3432
 12991 0008 FFF7FEFF 		bl	set_zero
 12992              	.LVL952:
 12993              	.LBE2366:
 12994              	.LBE2367:
1530:src/xeq.c     **** 		zero_Y();
 12995              		.loc 1 1530 2 is_stmt 1 view .LVU3433
1530:src/xeq.c     **** 		zero_Y();
 12996              		.loc 1 1530 6 is_stmt 0 view .LVU3434
 12997 000c 2368     		ldr	r3, [r4]
 12998 000e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
1530:src/xeq.c     **** 		zero_Y();
 12999              		.loc 1 1530 5 view .LVU3435
 13000 0012 03F04103 		and	r3, r3, #65
 13001 0016 412B     		cmp	r3, #65
 13002 0018 05D0     		beq	.L954
1540:src/xeq.c     **** }
 13003              		.loc 1 1540 2 is_stmt 1 view .LVU3436
 13004              	.LBB2368:
 13005              	.LBI2368:
 762:src/xeq.c     ****     State2.state_lift = 0;
 13006              		.loc 1 762 13 view .LVU3437
 13007              	.LBB2369:
 763:src/xeq.c     **** }
 13008              		.loc 1 763 5 view .LVU3438
 763:src/xeq.c     **** }
 13009              		.loc 1 763 23 is_stmt 0 view .LVU3439
 13010 001a 164B     		ldr	r3, .L956+8
 13011 001c DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 13012 001e 6FF38612 		bfc	r2, #6, #1
 13013 0022 DA75     		strb	r2, [r3, #23]
 13014              	.LBE2369:
 13015              	.LBE2368:
1541:src/xeq.c     **** 
 13016              		.loc 1 1541 1 view .LVU3440
 13017 0024 10BD     		pop	{r4, pc}
 13018              	.L954:
1531:src/xeq.c     **** 		if (POLAR_DISPLAY) {
 13019              		.loc 1 1531 3 is_stmt 1 view .LVU3441
 13020              	.LBB2371:
ARM GAS  /tmp/ccQlyisH.s 			page 385


 13021              	.LBI2371:
1523:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 13022              		.loc 1 1523 6 view .LVU3442
 13023              	.LBB2372:
1524:src/xeq.c     **** }
 13024              		.loc 1 1524 2 view .LVU3443
 13025 0026 6520     		movs	r0, #101
 13026 0028 FFF7FEFF 		bl	get_reg_n
 13027              	.LVL953:
 13028 002c FFF7FEFF 		bl	set_zero
 13029              	.LVL954:
 13030              	.LBE2372:
 13031              	.LBE2371:
1532:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13032              		.loc 1 1532 3 view .LVU3444
1532:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13033              		.loc 1 1532 7 is_stmt 0 view .LVU3445
 13034 0030 2368     		ldr	r3, [r4]
1532:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13035              		.loc 1 1532 6 view .LVU3446
 13036 0032 93F9AC27 		ldrsb	r2, [r3, #1964]
 13037 0036 002A     		cmp	r2, #0
 13038 0038 0BDB     		blt	.L955
 13039              	.L952:
1536:src/xeq.c     **** 		CLEAR_IMAG;
 13040              		.loc 1 1536 3 is_stmt 1 view .LVU3447
1537:src/xeq.c     **** 	}
 13041              		.loc 1 1537 3 view .LVU3448
1536:src/xeq.c     **** 		CLEAR_IMAG;
 13042              		.loc 1 1536 3 is_stmt 0 view .LVU3449
 13043 003a 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 13044 003e 22F00602 		bic	r2, r2, #6
 13045 0042 83F8AC27 		strb	r2, [r3, #1964]
1540:src/xeq.c     **** }
 13046              		.loc 1 1540 2 is_stmt 1 view .LVU3450
 13047              	.LBB2373:
 762:src/xeq.c     ****     State2.state_lift = 0;
 13048              		.loc 1 762 13 view .LVU3451
 13049              	.LBB2370:
 763:src/xeq.c     **** }
 13050              		.loc 1 763 5 view .LVU3452
 763:src/xeq.c     **** }
 13051              		.loc 1 763 23 is_stmt 0 view .LVU3453
 13052 0046 0B4B     		ldr	r3, .L956+8
 13053 0048 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 13054 004a 6FF38612 		bfc	r2, #6, #1
 13055 004e DA75     		strb	r2, [r3, #23]
 13056              	.LBE2370:
 13057              	.LBE2373:
1541:src/xeq.c     **** 
 13058              		.loc 1 1541 1 view .LVU3454
 13059 0050 10BD     		pop	{r4, pc}
 13060              	.L955:
1533:src/xeq.c     **** 			set_zero(get_reg_n(regK_idx));
 13061              		.loc 1 1533 4 is_stmt 1 view .LVU3455
 13062 0052 6E20     		movs	r0, #110
 13063 0054 FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/ccQlyisH.s 			page 386


 13064              	.LVL955:
 13065 0058 FFF7FEFF 		bl	set_zero
 13066              	.LVL956:
1534:src/xeq.c     **** 		}
 13067              		.loc 1 1534 4 view .LVU3456
 13068 005c 6F20     		movs	r0, #111
 13069 005e FFF7FEFF 		bl	get_reg_n
 13070              	.LVL957:
 13071 0062 FFF7FEFF 		bl	set_zero
 13072              	.LVL958:
 13073 0066 2368     		ldr	r3, [r4]
 13074 0068 E7E7     		b	.L952
 13075              	.L957:
 13076 006a 00BF     		.align	2
 13077              	.L956:
 13078 006c 00000000 		.word	StackBase
 13079 0070 00000000 		.word	main_ram
 13080 0074 00000000 		.word	StateWhileOn
 13081              		.cfi_endproc
 13082              	.LFE108:
 13084              		.section	.text.clrstk,"ax",%progbits
 13085              		.align	1
 13086              		.p2align 2,,3
 13087              		.global	clrstk
 13088              		.syntax unified
 13089              		.thumb
 13090              		.thumb_func
 13091              		.fpu fpv4-sp-d16
 13093              	clrstk:
 13094              	.LVL959:
 13095              	.LFB109:
1545:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 13096              		.loc 1 1545 28 view -0
 13097              		.cfi_startproc
 13098              		@ args = 0, pretend = 0, frame = 0
 13099              		@ frame_needed = 0, uses_anonymous_args = 0
1546:src/xeq.c     **** 	set_lift();
 13100              		.loc 1 1546 2 view .LVU3458
1545:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 13101              		.loc 1 1545 28 is_stmt 0 view .LVU3459
 13102 0000 08B5     		push	{r3, lr}
 13103              		.cfi_def_cfa_offset 8
 13104              		.cfi_offset 3, -8
 13105              		.cfi_offset 14, -4
 13106              	.LBB2374:
 13107              	.LBB2375:
 704:src/xeq.c     **** 		return 4;
 13108              		.loc 1 704 8 view .LVU3460
 13109 0002 164B     		ldr	r3, .L965
 13110              	.LBE2375:
 13111              	.LBE2374:
1546:src/xeq.c     **** 	set_lift();
 13112              		.loc 1 1546 2 view .LVU3461
 13113 0004 164A     		ldr	r2, .L965+4
 13114              	.LBB2381:
 13115              	.LBB2378:
 704:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/ccQlyisH.s 			page 387


 13116              		.loc 1 704 8 view .LVU3462
 13117 0006 1B68     		ldr	r3, [r3]
 13118              	.LBE2378:
 13119              	.LBE2381:
1546:src/xeq.c     **** 	set_lift();
 13120              		.loc 1 1546 2 view .LVU3463
 13121 0008 1068     		ldr	r0, [r2]
 13122              	.LVL960:
 13123              	.LBB2382:
 13124              	.LBI2374:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 13125              		.loc 1 703 5 is_stmt 1 view .LVU3464
 13126              	.LBB2379:
 704:src/xeq.c     **** 		return 4;
 13127              		.loc 1 704 2 view .LVU3465
 704:src/xeq.c     **** 		return 4;
 13128              		.loc 1 704 6 is_stmt 0 view .LVU3466
 13129 000a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 13130              		.loc 1 704 5 view .LVU3467
 13131 000e 1207     		lsls	r2, r2, #28
 13132 0010 22D5     		bpl	.L960
 13133              	.LBB2376:
 13134              	.LBI2376:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 13135              		.loc 1 182 5 is_stmt 1 view .LVU3468
 13136              	.LBB2377:
 183:src/xeq.c     **** }
 13137              		.loc 1 183 2 view .LVU3469
 183:src/xeq.c     **** }
 13138              		.loc 1 183 9 is_stmt 0 view .LVU3470
 13139 0012 B3F8E027 		ldrh	r2, [r3, #2016]
 13140              	.LBE2377:
 13141              	.LBE2376:
 704:src/xeq.c     **** 		return 4;
 13142              		.loc 1 704 27 view .LVU3471
 13143 0016 920B     		lsrs	r2, r2, #14
 13144 0018 032A     		cmp	r2, #3
 13145 001a 15D0     		beq	.L964
 706:src/xeq.c     **** }
 13146              		.loc 1 706 9 view .LVU3472
 13147 001c 0822     		movs	r2, #8
 13148              	.L959:
 13149              	.LVL961:
 706:src/xeq.c     **** }
 13150              		.loc 1 706 9 view .LVU3473
 13151              	.LBE2379:
 13152              	.LBE2382:
 13153              	.LBB2383:
 13154              	.LBI2383:
1487:src/xeq.c     **** #if 0
 13155              		.loc 1 1487 6 is_stmt 1 view .LVU3474
 13156              	.LBB2384:
1502:src/xeq.c     **** #endif
 13157              		.loc 1 1502 2 view .LVU3475
 13158              	.LBB2385:
 13159              	.LBI2385:
ARM GAS  /tmp/ccQlyisH.s 			page 388


1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13160              		.loc 1 1087 5 view .LVU3476
 13161              	.LBB2386:
1088:src/xeq.c     **** }
 13162              		.loc 1 1088 2 view .LVU3477
1088:src/xeq.c     **** }
 13163              		.loc 1 1088 24 is_stmt 0 view .LVU3478
 13164 001e B3F8E817 		ldrh	r1, [r3, #2024]
 13165 0022 44F20103 		movw	r3, #16385
 13166 0026 0B40     		ands	r3, r3, r1
 13167 0028 A3F58043 		sub	r3, r3, #16384
 13168 002c B3FA83F3 		clz	r3, r3
 13169 0030 5B09     		lsrs	r3, r3, #5
 13170              	.LBE2386:
 13171              	.LBE2385:
1502:src/xeq.c     **** #endif
 13172              		.loc 1 1502 24 view .LVU3479
 13173 0032 0333     		adds	r3, r3, #3
1502:src/xeq.c     **** #endif
 13174              		.loc 1 1502 2 view .LVU3480
 13175 0034 9A40     		lsls	r2, r2, r3
 13176              	.LVL962:
1502:src/xeq.c     **** #endif
 13177              		.loc 1 1502 2 view .LVU3481
 13178 0036 0021     		movs	r1, #0
 13179 0038 FFF7FEFF 		bl	xset
 13180              	.LVL963:
1502:src/xeq.c     **** #endif
 13181              		.loc 1 1502 2 view .LVU3482
 13182              	.LBE2384:
 13183              	.LBE2383:
1547:src/xeq.c     **** }
 13184              		.loc 1 1547 2 is_stmt 1 view .LVU3483
 13185              	.LBB2387:
 13186              	.LBI2387:
 758:src/xeq.c     ****     State2.state_lift = 1;
 13187              		.loc 1 758 6 view .LVU3484
 13188              	.LBB2388:
 759:src/xeq.c     **** }
 13189              		.loc 1 759 5 view .LVU3485
 759:src/xeq.c     **** }
 13190              		.loc 1 759 23 is_stmt 0 view .LVU3486
 13191 003c 094A     		ldr	r2, .L965+8
 13192 003e D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 13193 0040 43F04003 		orr	r3, r3, #64
 13194 0044 D375     		strb	r3, [r2, #23]
 13195              	.LBE2388:
 13196              	.LBE2387:
1548:src/xeq.c     **** 
 13197              		.loc 1 1548 1 view .LVU3487
 13198 0046 08BD     		pop	{r3, pc}
 13199              	.L964:
 13200              	.LBB2389:
 13201              	.LBB2380:
 704:src/xeq.c     **** 		return 4;
 13202              		.loc 1 704 44 view .LVU3488
 13203 0048 074A     		ldr	r2, .L965+12
ARM GAS  /tmp/ccQlyisH.s 			page 389


 704:src/xeq.c     **** 		return 4;
 13204              		.loc 1 704 41 view .LVU3489
 13205 004a 92F90120 		ldrsb	r2, [r2, #1]
 13206 004e 002A     		cmp	r2, #0
 705:src/xeq.c     **** 	return 8;
 13207              		.loc 1 705 10 view .LVU3490
 13208 0050 B4BF     		ite	lt
 13209 0052 0822     		movlt	r2, #8
 13210 0054 0422     		movge	r2, #4
 13211 0056 E2E7     		b	.L959
 13212              	.L960:
 13213 0058 0422     		movs	r2, #4
 13214 005a E0E7     		b	.L959
 13215              	.L966:
 13216              		.align	2
 13217              	.L965:
 13218 005c 00000000 		.word	main_ram
 13219 0060 00000000 		.word	StackBase
 13220 0064 00000000 		.word	StateWhileOn
 13221 0068 00000000 		.word	XromParams
 13222              	.LBE2380:
 13223              	.LBE2389:
 13224              		.cfi_endproc
 13225              	.LFE109:
 13227              		.section	.text.clrreg,"ax",%progbits
 13228              		.align	1
 13229              		.p2align 2,,3
 13230              		.global	clrreg
 13231              		.syntax unified
 13232              		.thumb
 13233              		.thumb_func
 13234              		.fpu fpv4-sp-d16
 13236              	clrreg:
 13237              	.LVL964:
 13238              	.LFB110:
1553:src/xeq.c     **** 	const int local = local_regs();
 13239              		.loc 1 1553 28 is_stmt 1 view -0
 13240              		.cfi_startproc
 13241              		@ args = 0, pretend = 0, frame = 0
 13242              		@ frame_needed = 0, uses_anonymous_args = 0
1554:src/xeq.c     **** 	process_cmdline_set_lift();
 13243              		.loc 1 1554 2 view .LVU3492
 13244              	.LBB2390:
 13245              	.LBI2390:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 13246              		.loc 1 230 5 view .LVU3493
 13247              	.LBE2390:
 231:src/xeq.c     **** }
 13248              		.loc 1 231 2 view .LVU3494
 13249              	.LBB2421:
 13250              	.LBB2391:
 13251              	.LBI2391:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 13252              		.loc 1 222 5 view .LVU3495
 13253              	.LBB2392:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13254              		.loc 1 223 2 view .LVU3496
ARM GAS  /tmp/ccQlyisH.s 			page 390


 13255              	.LBB2393:
 13256              	.LBI2393:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13257              		.loc 1 1087 5 view .LVU3497
 13258              	.LBB2394:
1088:src/xeq.c     **** }
 13259              		.loc 1 1088 2 view .LVU3498
 13260              	.LBE2394:
 13261              	.LBE2393:
 13262              	.LBE2392:
 13263              	.LBE2391:
 13264              	.LBE2421:
1553:src/xeq.c     **** 	const int local = local_regs();
 13265              		.loc 1 1553 28 is_stmt 0 view .LVU3499
 13266 0000 70B5     		push	{r4, r5, r6, lr}
 13267              		.cfi_def_cfa_offset 16
 13268              		.cfi_offset 4, -16
 13269              		.cfi_offset 5, -12
 13270              		.cfi_offset 6, -8
 13271              		.cfi_offset 14, -4
 13272              	.LBB2422:
 13273              	.LBB2417:
 13274              	.LBB2413:
 13275              	.LBB2398:
 13276              	.LBB2395:
1088:src/xeq.c     **** }
 13277              		.loc 1 1088 12 view .LVU3500
 13278 0002 464C     		ldr	r4, .L987
 13279 0004 2368     		ldr	r3, [r4]
 13280              	.LVL965:
1088:src/xeq.c     **** }
 13281              		.loc 1 1088 12 view .LVU3501
 13282              	.LBE2395:
 13283              	.LBE2398:
 224:src/xeq.c     **** }
 13284              		.loc 1 224 2 is_stmt 1 view .LVU3502
 13285              	.LBB2399:
 13286              	.LBI2399:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 13287              		.loc 1 214 5 view .LVU3503
 13288              	.LBB2400:
 215:src/xeq.c     **** }
 13289              		.loc 1 215 2 view .LVU3504
 215:src/xeq.c     **** }
 13290              		.loc 1 215 9 is_stmt 0 view .LVU3505
 13291 0006 B3F9DE27 		ldrsh	r2, [r3, #2014]
 215:src/xeq.c     **** }
 13292              		.loc 1 215 57 view .LVU3506
 13293 000a 002A     		cmp	r2, #0
 13294 000c 58DB     		blt	.L983
 13295              	.LVL966:
 215:src/xeq.c     **** }
 13296              		.loc 1 215 57 view .LVU3507
 13297              	.LBE2400:
 13298              	.LBE2399:
 13299              	.LBE2413:
 13300              	.LBE2417:
ARM GAS  /tmp/ccQlyisH.s 			page 391


 13301              	.LBE2422:
1555:src/xeq.c     **** 
 13302              		.loc 1 1555 2 is_stmt 1 view .LVU3508
 13303              	.LBB2423:
 13304              	.LBI2423:
1301:src/xeq.c     **** 	process_cmdline();
 13305              		.loc 1 1301 6 view .LVU3509
 13306              	.LBE2423:
1302:src/xeq.c     **** 	set_lift();
 13307              		.loc 1 1302 2 view .LVU3510
 13308              	.LBB2434:
 13309              	.LBB2424:
 13310              	.LBI2424:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 13311              		.loc 1 1195 6 view .LVU3511
 13312              	.LBB2425:
1196:src/xeq.c     **** 
 13313              		.loc 1 1196 2 view .LVU3512
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13314              		.loc 1 1198 2 view .LVU3513
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13315              		.loc 1 1198 6 is_stmt 0 view .LVU3514
 13316 000e 444D     		ldr	r5, .L987+4
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13317              		.loc 1 1198 5 view .LVU3515
 13318 0010 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 13319              	.LVL967:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13320              		.loc 1 1198 5 view .LVU3516
 13321              	.LBE2425:
 13322              	.LBE2424:
 13323              	.LBE2434:
 13324              	.LBB2435:
 13325              	.LBB2418:
 13326              	.LBB2414:
 13327              	.LBB2406:
 13328              	.LBB2401:
 13329 0012 0026     		movs	r6, #0
 13330              	.LBE2401:
 13331              	.LBE2406:
 13332              	.LBE2414:
 13333              	.LBE2418:
 13334              	.LBE2435:
 13335              	.LBB2436:
 13336              	.LBB2429:
 13337              	.LBB2426:
 13338 0014 002B     		cmp	r3, #0
 13339 0016 69D1     		bne	.L984
 13340              	.LVL968:
 13341              	.L969:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13342              		.loc 1 1198 5 view .LVU3517
 13343              	.LBE2426:
 13344              	.LBE2429:
 13345              	.LBE2436:
1303:src/xeq.c     **** }
 13346              		.loc 1 1303 2 is_stmt 1 view .LVU3518
ARM GAS  /tmp/ccQlyisH.s 			page 392


 13347              	.LBB2437:
 13348              	.LBB2430:
 13349              	.LBI2430:
 758:src/xeq.c     ****     State2.state_lift = 1;
 13350              		.loc 1 758 6 view .LVU3519
 13351              	.LBB2431:
 759:src/xeq.c     **** }
 13352              		.loc 1 759 5 view .LVU3520
 759:src/xeq.c     **** }
 13353              		.loc 1 759 23 is_stmt 0 view .LVU3521
 13354 0018 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 13355 001a 43F04003 		orr	r3, r3, #64
 13356 001e EB75     		strb	r3, [r5, #23]
 13357              	.LBE2431:
 13358              	.LBE2430:
 13359              	.LBE2437:
1558:src/xeq.c     **** 
 13360              		.loc 1 1558 2 is_stmt 1 view .LVU3522
 13361 0020 0020     		movs	r0, #0
 13362 0022 FFF7FEFF 		bl	get_reg_n
 13363              	.LVL969:
 13364              	.LBB2438:
 13365              	.LBB2439:
 13366              	.LBB2440:
 13367              	.LBB2441:
 13368              	.LBB2442:
1088:src/xeq.c     **** }
 13369              		.loc 1 1088 12 is_stmt 0 view .LVU3523
 13370 0026 2168     		ldr	r1, [r4]
1088:src/xeq.c     **** }
 13371              		.loc 1 1088 24 view .LVU3524
 13372 0028 B1F8E827 		ldrh	r2, [r1, #2024]
 13373 002c 44F20103 		movw	r3, #16385
 13374 0030 1340     		ands	r3, r3, r2
 13375              	.LBE2442:
 13376              	.LBE2441:
 13377              	.LBE2440:
 13378              	.LBE2439:
 13379              	.LBI2438:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 13380              		.loc 1 250 14 is_stmt 1 view .LVU3525
 13381              	.LBE2438:
 251:src/xeq.c     **** }
 13382              		.loc 1 251 2 view .LVU3526
 13383              	.LVL970:
 13384              	.LBB2457:
 13385              	.LBB2453:
 13386              	.LBI2439:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 13387              		.loc 1 238 14 view .LVU3527
 13388              	.LBB2449:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 13389              		.loc 1 239 2 view .LVU3528
 13390              	.LBB2444:
 13391              	.LBI2441:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13392              		.loc 1 1087 5 view .LVU3529
ARM GAS  /tmp/ccQlyisH.s 			page 393


 13393              	.LBB2443:
1088:src/xeq.c     **** }
 13394              		.loc 1 1088 2 view .LVU3530
 13395              	.LBE2443:
 13396              	.LBE2444:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 13397              		.loc 1 239 5 is_stmt 0 view .LVU3531
 13398 0032 B3F5804F 		cmp	r3, #16384
 13399              	.LBB2445:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13400              		.loc 1 240 3 is_stmt 1 view .LVU3532
 241:src/xeq.c     **** 	}
 13401              		.loc 1 241 3 view .LVU3533
 13402              	.LVL971:
 241:src/xeq.c     **** 	}
 13403              		.loc 1 241 3 is_stmt 0 view .LVU3534
 13404              	.LBE2445:
 13405              	.LBE2449:
 13406              	.LBE2453:
 13407              	.LBE2457:
 13408              	.LBB2458:
 13409              	.LBI2458:
1487:src/xeq.c     **** #if 0
 13410              		.loc 1 1487 6 is_stmt 1 view .LVU3535
 13411              	.LBB2459:
1502:src/xeq.c     **** #endif
 13412              		.loc 1 1502 2 view .LVU3536
 13413              	.LBB2460:
 13414              	.LBI2460:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13415              		.loc 1 1087 5 view .LVU3537
 13416              	.LBB2461:
1088:src/xeq.c     **** }
 13417              		.loc 1 1088 2 view .LVU3538
 13418              	.LBE2461:
 13419              	.LBE2460:
 13420              	.LBE2459:
 13421              	.LBE2458:
 13422              	.LBB2469:
 13423              	.LBB2454:
 13424              	.LBB2450:
 13425              	.LBB2446:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13426              		.loc 1 240 24 is_stmt 0 view .LVU3539
 13427 0036 91F8CF27 		ldrb	r2, [r1, #1999]	@ zero_extendqisi2
 13428              	.LBE2446:
 13429              	.LBE2450:
 13430              	.LBE2454:
 13431              	.LBE2469:
 13432              	.LBB2470:
 13433              	.LBB2466:
 13434              	.LBB2464:
 13435              	.LBB2462:
1088:src/xeq.c     **** }
 13436              		.loc 1 1088 24 view .LVU3540
 13437 003a A3F58043 		sub	r3, r3, #16384
 13438 003e B3FA83F3 		clz	r3, r3
ARM GAS  /tmp/ccQlyisH.s 			page 394


 13439              	.LBE2462:
 13440              	.LBE2464:
 13441              	.LBE2466:
 13442              	.LBE2470:
 13443              	.LBB2471:
 13444              	.LBB2455:
 13445              	.LBB2451:
 13446              	.LBB2447:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13447              		.loc 1 240 13 view .LVU3541
 13448 0042 08BF     		it	eq
 13449 0044 0C3A     		subeq	r2, r2, #12
 13450              	.LBE2447:
 13451              	.LBE2451:
 13452              	.LBE2455:
 13453              	.LBE2471:
 13454              	.LBB2472:
 13455              	.LBB2467:
 13456              	.LBB2465:
 13457              	.LBB2463:
1088:src/xeq.c     **** }
 13458              		.loc 1 1088 24 view .LVU3542
 13459 0046 4FEA5313 		lsr	r3, r3, #5
 13460              	.LBE2463:
 13461              	.LBE2465:
 13462              	.LBE2467:
 13463              	.LBE2472:
 13464              	.LBB2473:
 13465              	.LBB2456:
 13466              	.LBB2452:
 13467              	.LBB2448:
 241:src/xeq.c     **** 	}
 13468              		.loc 1 241 67 view .LVU3543
 13469 004a 08BF     		it	eq
 13470 004c 5210     		asreq	r2, r2, #1
 13471              	.LBE2448:
 13472              	.LBE2452:
 13473              	.LBE2456:
 13474              	.LBE2473:
 13475              	.LBB2474:
 13476              	.LBB2468:
1502:src/xeq.c     **** #endif
 13477              		.loc 1 1502 24 view .LVU3544
 13478 004e 0333     		adds	r3, r3, #3
1502:src/xeq.c     **** #endif
 13479              		.loc 1 1502 2 view .LVU3545
 13480 0050 9A40     		lsls	r2, r2, r3
 13481 0052 0021     		movs	r1, #0
 13482 0054 FFF7FEFF 		bl	xset
 13483              	.LVL972:
1502:src/xeq.c     **** #endif
 13484              		.loc 1 1502 2 view .LVU3546
 13485              	.LBE2468:
 13486              	.LBE2474:
1561:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
 13487              		.loc 1 1561 2 is_stmt 1 view .LVU3547
 13488              	.LBB2475:
ARM GAS  /tmp/ccQlyisH.s 			page 395


 13489              	.LBI2475:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 13490              		.loc 1 703 5 view .LVU3548
 13491              	.LBB2476:
 704:src/xeq.c     **** 		return 4;
 13492              		.loc 1 704 2 view .LVU3549
 704:src/xeq.c     **** 		return 4;
 13493              		.loc 1 704 8 is_stmt 0 view .LVU3550
 13494 0058 2368     		ldr	r3, [r4]
 704:src/xeq.c     **** 		return 4;
 13495              		.loc 1 704 6 view .LVU3551
 13496 005a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 13497              		.loc 1 704 5 view .LVU3552
 13498 005e 1207     		lsls	r2, r2, #28
 13499 0060 1CD5     		bpl	.L972
 13500              	.LBB2477:
 13501              	.LBI2477:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 13502              		.loc 1 182 5 is_stmt 1 view .LVU3553
 13503              	.LBB2478:
 183:src/xeq.c     **** }
 13504              		.loc 1 183 2 view .LVU3554
 183:src/xeq.c     **** }
 13505              		.loc 1 183 9 is_stmt 0 view .LVU3555
 13506 0062 B3F8E037 		ldrh	r3, [r3, #2016]
 13507              	.LBE2478:
 13508              	.LBE2477:
 704:src/xeq.c     **** 		return 4;
 13509              		.loc 1 704 27 view .LVU3556
 13510 0066 9B0B     		lsrs	r3, r3, #14
 13511 0068 032B     		cmp	r3, #3
 13512 006a 12D0     		beq	.L985
 13513              	.L973:
 13514              	.LBE2476:
 13515              	.LBE2475:
1565:src/xeq.c     **** 
 13516              		.loc 1 1565 2 is_stmt 1 view .LVU3557
 13517 006c 6E20     		movs	r0, #110
 13518 006e FFF7FEFF 		bl	get_reg_n
 13519              	.LVL973:
 13520              	.LBB2480:
 13521              	.LBI2480:
1487:src/xeq.c     **** #if 0
 13522              		.loc 1 1487 6 view .LVU3558
 13523              	.LBB2481:
1502:src/xeq.c     **** #endif
 13524              		.loc 1 1502 2 view .LVU3559
 13525              	.LBB2482:
 13526              	.LBI2482:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13527              		.loc 1 1087 5 view .LVU3560
 13528              	.LBB2483:
1088:src/xeq.c     **** }
 13529              		.loc 1 1088 2 view .LVU3561
1088:src/xeq.c     **** }
 13530              		.loc 1 1088 24 is_stmt 0 view .LVU3562
ARM GAS  /tmp/ccQlyisH.s 			page 396


 13531 0072 2368     		ldr	r3, [r4]
 13532 0074 B3F8E827 		ldrh	r2, [r3, #2024]
 13533 0078 44F20105 		movw	r5, #16385
 13534 007c 2A40     		ands	r2, r2, r5
 13535              	.LBE2483:
 13536              	.LBE2482:
1502:src/xeq.c     **** #endif
 13537              		.loc 1 1502 2 view .LVU3563
 13538 007e B2F5804F 		cmp	r2, #16384
 13539 0082 0CBF     		ite	eq
 13540 0084 2022     		moveq	r2, #32
 13541 0086 1022     		movne	r2, #16
 13542 0088 0021     		movs	r1, #0
 13543 008a FFF7FEFF 		bl	xset
 13544              	.LVL974:
1502:src/xeq.c     **** #endif
 13545              		.loc 1 1502 2 view .LVU3564
 13546              	.LBE2481:
 13547              	.LBE2480:
1568:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 13548              		.loc 1 1568 2 is_stmt 1 view .LVU3565
1568:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 13549              		.loc 1 1568 5 is_stmt 0 view .LVU3566
 13550 008e 86BB     		cbnz	r6, .L986
1570:src/xeq.c     **** 
 13551              		.loc 1 1570 1 view .LVU3567
 13552 0090 70BD     		pop	{r4, r5, r6, pc}
 13553              	.L985:
 13554              	.LBB2484:
 13555              	.LBB2479:
 704:src/xeq.c     **** 		return 4;
 13556              		.loc 1 704 44 view .LVU3568
 13557 0092 244B     		ldr	r3, .L987+8
 704:src/xeq.c     **** 		return 4;
 13558              		.loc 1 704 41 view .LVU3569
 13559 0094 93F90130 		ldrsb	r3, [r3, #1]
 13560 0098 002B     		cmp	r3, #0
 13561 009a E7DB     		blt	.L973
 13562              	.L972:
 705:src/xeq.c     **** 	return 8;
 13563              		.loc 1 705 3 is_stmt 1 view .LVU3570
 13564              	.LBE2479:
 13565              	.LBE2484:
1562:src/xeq.c     **** 
 13566              		.loc 1 1562 3 view .LVU3571
 13567 009c 6820     		movs	r0, #104
 13568 009e FFF7FEFF 		bl	get_reg_n
 13569              	.LVL975:
 13570              	.LBB2485:
 13571              	.LBI2485:
1487:src/xeq.c     **** #if 0
 13572              		.loc 1 1487 6 view .LVU3572
 13573              	.LBB2486:
1502:src/xeq.c     **** #endif
 13574              		.loc 1 1502 2 view .LVU3573
 13575              	.LBB2487:
 13576              	.LBI2487:
ARM GAS  /tmp/ccQlyisH.s 			page 397


1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13577              		.loc 1 1087 5 view .LVU3574
 13578              	.LBB2488:
1088:src/xeq.c     **** }
 13579              		.loc 1 1088 2 view .LVU3575
1088:src/xeq.c     **** }
 13580              		.loc 1 1088 24 is_stmt 0 view .LVU3576
 13581 00a2 2368     		ldr	r3, [r4]
 13582 00a4 B3F8E837 		ldrh	r3, [r3, #2024]
 13583 00a8 44F20102 		movw	r2, #16385
 13584 00ac 1A40     		ands	r2, r2, r3
 13585              	.LBE2488:
 13586              	.LBE2487:
1502:src/xeq.c     **** #endif
 13587              		.loc 1 1502 2 view .LVU3577
 13588 00ae B2F5804F 		cmp	r2, #16384
 13589 00b2 0CBF     		ite	eq
 13590 00b4 4022     		moveq	r2, #64
 13591 00b6 2022     		movne	r2, #32
 13592 00b8 0021     		movs	r1, #0
 13593 00ba FFF7FEFF 		bl	xset
 13594              	.LVL976:
1504:src/xeq.c     **** 
 13595              		.loc 1 1504 1 view .LVU3578
 13596 00be D5E7     		b	.L973
 13597              	.LVL977:
 13598              	.L983:
1504:src/xeq.c     **** 
 13599              		.loc 1 1504 1 view .LVU3579
 13600              	.LBE2486:
 13601              	.LBE2485:
 13602              	.LBB2489:
 13603              	.LBB2419:
 13604              	.LBB2415:
 13605              	.LBB2407:
 13606              	.LBB2396:
1088:src/xeq.c     **** }
 13607              		.loc 1 1088 24 view .LVU3580
 13608 00c0 B3F8E867 		ldrh	r6, [r3, #2024]
 13609              	.LBE2396:
 13610              	.LBE2407:
 13611              	.LBB2408:
 13612              	.LBB2402:
 215:src/xeq.c     **** }
 13613              		.loc 1 215 25 view .LVU3581
 13614 00c4 1849     		ldr	r1, .L987+12
 13615              	.LBE2402:
 13616              	.LBE2408:
 13617              	.LBE2415:
 13618              	.LBE2419:
 13619              	.LBE2489:
 13620              	.LBB2490:
 13621              	.LBB2432:
 13622              	.LBB2427:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13623              		.loc 1 1198 6 view .LVU3582
 13624 00c6 164D     		ldr	r5, .L987+4
ARM GAS  /tmp/ccQlyisH.s 			page 398


 13625              	.LBE2427:
 13626              	.LBE2432:
 13627              	.LBE2490:
 13628              	.LBB2491:
 13629              	.LBB2420:
 13630              	.LBB2416:
 13631              	.LBB2409:
 13632              	.LBB2403:
 215:src/xeq.c     **** }
 13633              		.loc 1 215 25 view .LVU3583
 13634 00c8 0968     		ldr	r1, [r1]
 13635              	.LBE2403:
 13636              	.LBE2409:
 13637              	.LBB2410:
 13638              	.LBB2397:
1088:src/xeq.c     **** }
 13639              		.loc 1 1088 24 view .LVU3584
 13640 00ca 44F20103 		movw	r3, #16385
 13641              	.LVL978:
1088:src/xeq.c     **** }
 13642              		.loc 1 1088 24 view .LVU3585
 13643              	.LBE2397:
 13644              	.LBE2410:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13645              		.loc 1 223 73 view .LVU3586
 13646 00ce 3340     		ands	r3, r3, r6
 13647 00d0 A3F58043 		sub	r3, r3, #16384
 13648              	.LBB2411:
 13649              	.LBB2404:
 215:src/xeq.c     **** }
 13650              		.loc 1 215 57 view .LVU3587
 13651 00d4 31F81260 		ldrh	r6, [r1, r2, lsl #1]
 13652              	.LBE2404:
 13653              	.LBE2411:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13654              		.loc 1 223 73 view .LVU3588
 13655 00d8 B3FA83F3 		clz	r3, r3
 13656 00dc 5B09     		lsrs	r3, r3, #5
 13657 00de 0233     		adds	r3, r3, #2
 13658              	.LBB2412:
 13659              	.LBB2405:
 215:src/xeq.c     **** }
 13660              		.loc 1 215 57 view .LVU3589
 13661 00e0 C6F30B06 		ubfx	r6, r6, #0, #12
 13662 00e4 1E41     		asrs	r6, r6, r3
 13663              	.LVL979:
 215:src/xeq.c     **** }
 13664              		.loc 1 215 57 view .LVU3590
 13665              	.LBE2405:
 13666              	.LBE2412:
 13667              	.LBE2416:
 13668              	.LBE2420:
 13669              	.LBE2491:
1555:src/xeq.c     **** 
 13670              		.loc 1 1555 2 is_stmt 1 view .LVU3591
 13671              	.LBB2492:
1301:src/xeq.c     **** 	process_cmdline();
ARM GAS  /tmp/ccQlyisH.s 			page 399


 13672              		.loc 1 1301 6 view .LVU3592
 13673              	.LBE2492:
1302:src/xeq.c     **** 	set_lift();
 13674              		.loc 1 1302 2 view .LVU3593
 13675              	.LBB2493:
 13676              	.LBB2433:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 13677              		.loc 1 1195 6 view .LVU3594
 13678              	.LBB2428:
1196:src/xeq.c     **** 
 13679              		.loc 1 1196 2 view .LVU3595
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13680              		.loc 1 1198 2 view .LVU3596
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13681              		.loc 1 1198 5 is_stmt 0 view .LVU3597
 13682 00e6 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 13683 00e8 002B     		cmp	r3, #0
 13684 00ea 95D0     		beq	.L969
 13685              	.L984:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13686              		.loc 1 1198 5 view .LVU3598
 13687 00ec FFF7FEFF 		bl	process_cmdline.part.0
 13688              	.LVL980:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13689              		.loc 1 1198 5 view .LVU3599
 13690 00f0 92E7     		b	.L969
 13691              	.L986:
 13692              	.LBE2428:
 13693              	.LBE2433:
 13694              	.LBE2493:
1569:src/xeq.c     **** }
 13695              		.loc 1 1569 3 is_stmt 1 view .LVU3600
 13696 00f2 7020     		movs	r0, #112
 13697 00f4 FFF7FEFF 		bl	get_reg_n
 13698              	.LVL981:
 13699              	.LBB2494:
 13700              	.LBI2494:
1487:src/xeq.c     **** #if 0
 13701              		.loc 1 1487 6 view .LVU3601
 13702              	.LBB2495:
1502:src/xeq.c     **** #endif
 13703              		.loc 1 1502 2 view .LVU3602
 13704              	.LBB2496:
 13705              	.LBI2496:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13706              		.loc 1 1087 5 view .LVU3603
 13707              	.LBB2497:
1088:src/xeq.c     **** }
 13708              		.loc 1 1088 2 view .LVU3604
1088:src/xeq.c     **** }
 13709              		.loc 1 1088 24 is_stmt 0 view .LVU3605
 13710 00f8 2368     		ldr	r3, [r4]
 13711 00fa B3F8E827 		ldrh	r2, [r3, #2024]
 13712 00fe 2A40     		ands	r2, r2, r5
 13713 0100 A2F58042 		sub	r2, r2, #16384
 13714 0104 B2FA82F2 		clz	r2, r2
 13715 0108 5209     		lsrs	r2, r2, #5
ARM GAS  /tmp/ccQlyisH.s 			page 400


 13716              	.LBE2497:
 13717              	.LBE2496:
1502:src/xeq.c     **** #endif
 13718              		.loc 1 1502 24 view .LVU3606
 13719 010a 0332     		adds	r2, r2, #3
1502:src/xeq.c     **** #endif
 13720              		.loc 1 1502 2 view .LVU3607
 13721 010c 06FA02F2 		lsl	r2, r6, r2
 13722 0110 0021     		movs	r1, #0
 13723              	.LBE2495:
 13724              	.LBE2494:
1570:src/xeq.c     **** 
 13725              		.loc 1 1570 1 view .LVU3608
 13726 0112 BDE87040 		pop	{r4, r5, r6, lr}
 13727              		.cfi_restore 14
 13728              		.cfi_restore 6
 13729              		.cfi_restore 5
 13730              		.cfi_restore 4
 13731              		.cfi_def_cfa_offset 0
 13732              	.LBB2499:
 13733              	.LBB2498:
1502:src/xeq.c     **** #endif
 13734              		.loc 1 1502 2 view .LVU3609
 13735 0116 FFF7FEBF 		b	xset
 13736              	.LVL982:
 13737              	.L988:
1502:src/xeq.c     **** #endif
 13738              		.loc 1 1502 2 view .LVU3610
 13739 011a 00BF     		.align	2
 13740              	.L987:
 13741 011c 00000000 		.word	main_ram
 13742 0120 00000000 		.word	StateWhileOn
 13743 0124 00000000 		.word	XromParams
 13744 0128 00000000 		.word	RetStk
 13745              	.LBE2498:
 13746              	.LBE2499:
 13747              		.cfi_endproc
 13748              	.LFE110:
 13750              		.section	.text.clrretstk,"ax",%progbits
 13751              		.align	1
 13752              		.p2align 2,,3
 13753              		.global	clrretstk
 13754              		.syntax unified
 13755              		.thumb
 13756              		.thumb_func
 13757              		.fpu fpv4-sp-d16
 13759              	clrretstk:
 13760              	.LFB111:
1575:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 13761              		.loc 1 1575 22 is_stmt 1 view -0
 13762              		.cfi_startproc
 13763              		@ args = 0, pretend = 0, frame = 0
 13764              		@ frame_needed = 0, uses_anonymous_args = 0
 13765              		@ link register save eliminated.
1576:src/xeq.c     **** }
 13766              		.loc 1 1576 2 view .LVU3612
1576:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 401


 13767              		.loc 1 1576 14 is_stmt 0 view .LVU3613
 13768 0000 034B     		ldr	r3, .L990
 13769 0002 1B68     		ldr	r3, [r3]
1576:src/xeq.c     **** }
 13770              		.loc 1 1576 24 view .LVU3614
 13771 0004 0022     		movs	r2, #0
 13772 0006 A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
1576:src/xeq.c     **** }
 13773              		.loc 1 1576 12 view .LVU3615
 13774 000a A3F8E227 		strh	r2, [r3, #2018]	@ movhi
1577:src/xeq.c     **** 
 13775              		.loc 1 1577 1 view .LVU3616
 13776 000e 7047     		bx	lr
 13777              	.L991:
 13778              		.align	2
 13779              	.L990:
 13780 0010 00000000 		.word	main_ram
 13781              		.cfi_endproc
 13782              	.LFE111:
 13784              		.section	.text.clrretstk_pc,"ax",%progbits
 13785              		.align	1
 13786              		.p2align 2,,3
 13787              		.global	clrretstk_pc
 13788              		.syntax unified
 13789              		.thumb
 13790              		.thumb_func
 13791              		.fpu fpv4-sp-d16
 13793              	clrretstk_pc:
 13794              	.LFB112:
1579:src/xeq.c     **** 	clrretstk();
 13795              		.loc 1 1579 25 is_stmt 1 view -0
 13796              		.cfi_startproc
 13797              		@ args = 0, pretend = 0, frame = 0
 13798              		@ frame_needed = 0, uses_anonymous_args = 0
1580:src/xeq.c     **** 	raw_set_pc(0);
 13799              		.loc 1 1580 2 view .LVU3618
 13800              	.LBB2500:
 13801              	.LBI2500:
1575:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 13802              		.loc 1 1575 6 view .LVU3619
 13803              	.LBB2501:
1576:src/xeq.c     **** }
 13804              		.loc 1 1576 2 view .LVU3620
 13805              	.LBE2501:
 13806              	.LBE2500:
1579:src/xeq.c     **** 	clrretstk();
 13807              		.loc 1 1579 25 is_stmt 0 view .LVU3621
 13808 0000 08B5     		push	{r3, lr}
 13809              		.cfi_def_cfa_offset 8
 13810              		.cfi_offset 3, -8
 13811              		.cfi_offset 14, -4
 13812              	.LBB2504:
 13813              	.LBB2502:
1576:src/xeq.c     **** }
 13814              		.loc 1 1576 14 view .LVU3622
 13815 0002 074B     		ldr	r3, .L994
 13816 0004 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQlyisH.s 			page 402


 13817              	.LBE2502:
 13818              	.LBE2504:
1581:src/xeq.c     **** 	update_program_bounds(1);
 13819              		.loc 1 1581 2 is_stmt 1 view .LVU3623
 13820              	.LVL983:
 13821              	.LBB2505:
 13822              	.LBI2505:
 279:src/xeq.c     **** 	State.pc = pc;
 13823              		.loc 1 279 13 view .LVU3624
 13824              	.LBB2506:
 280:src/xeq.c     **** 	update_program_bounds(0);
 13825              		.loc 1 280 2 view .LVU3625
 13826              	.LBE2506:
 13827              	.LBE2505:
 13828              	.LBB2508:
 13829              	.LBB2503:
1576:src/xeq.c     **** }
 13830              		.loc 1 1576 24 is_stmt 0 view .LVU3626
 13831 0006 0020     		movs	r0, #0
 13832 0008 A3F8DE07 		strh	r0, [r3, #2014]	@ movhi
 13833              	.LBE2503:
 13834              	.LBE2508:
 13835              	.LBB2509:
 13836              	.LBB2507:
 280:src/xeq.c     **** 	update_program_bounds(0);
 13837              		.loc 1 280 11 view .LVU3627
 13838 000c C3F8E007 		str	r0, [r3, #2016]
 281:src/xeq.c     **** }
 13839              		.loc 1 281 2 is_stmt 1 view .LVU3628
 13840 0010 FFF7FEFF 		bl	update_program_bounds
 13841              	.LVL984:
 281:src/xeq.c     **** }
 13842              		.loc 1 281 2 is_stmt 0 view .LVU3629
 13843              	.LBE2507:
 13844              	.LBE2509:
1582:src/xeq.c     **** }
 13845              		.loc 1 1582 2 is_stmt 1 view .LVU3630
1583:src/xeq.c     **** 
 13846              		.loc 1 1583 1 is_stmt 0 view .LVU3631
 13847 0014 BDE80840 		pop	{r3, lr}
 13848              		.cfi_restore 14
 13849              		.cfi_restore 3
 13850              		.cfi_def_cfa_offset 0
1582:src/xeq.c     **** }
 13851              		.loc 1 1582 2 view .LVU3632
 13852 0018 0120     		movs	r0, #1
 13853 001a FFF7FEBF 		b	update_program_bounds
 13854              	.LVL985:
 13855              	.L995:
 13856 001e 00BF     		.align	2
 13857              	.L994:
 13858 0020 00000000 		.word	main_ram
 13859              		.cfi_endproc
 13860              	.LFE112:
 13862              		.section	.text.cmdconst,"ax",%progbits
 13863              		.align	1
 13864              		.p2align 2,,3
ARM GAS  /tmp/ccQlyisH.s 			page 403


 13865              		.global	cmdconst
 13866              		.syntax unified
 13867              		.thumb
 13868              		.thumb_func
 13869              		.fpu fpv4-sp-d16
 13871              	cmdconst:
 13872              	.LVL986:
 13873              	.LFB113:
1589:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13874              		.loc 1 1589 47 is_stmt 1 view -0
 13875              		.cfi_startproc
 13876              		@ args = 0, pretend = 0, frame = 0
 13877              		@ frame_needed = 0, uses_anonymous_args = 0
1591:src/xeq.c     **** #else
 13878              		.loc 1 1591 2 view .LVU3634
1589:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13879              		.loc 1 1589 47 is_stmt 0 view .LVU3635
 13880 0000 70B5     		push	{r4, r5, r6, lr}
 13881              		.cfi_def_cfa_offset 16
 13882              		.cfi_offset 4, -16
 13883              		.cfi_offset 5, -12
 13884              		.cfi_offset 6, -8
 13885              		.cfi_offset 14, -4
1591:src/xeq.c     **** #else
 13886              		.loc 1 1591 5 view .LVU3636
 13887 0002 01F0FD03 		and	r3, r1, #253
 13888 0006 882B     		cmp	r3, #136
1589:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13889              		.loc 1 1589 47 view .LVU3637
 13890 0008 82B0     		sub	sp, sp, #8
 13891              		.cfi_def_cfa_offset 24
1589:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13892              		.loc 1 1589 47 view .LVU3638
 13893 000a 0C46     		mov	r4, r1
 13894 000c 0546     		mov	r5, r0
1591:src/xeq.c     **** #else
 13895              		.loc 1 1591 5 view .LVU3639
 13896 000e 1CD0     		beq	.L997
1591:src/xeq.c     **** #else
 13897              		.loc 1 1591 30 discriminator 1 view .LVU3640
 13898 0010 0129     		cmp	r1, #1
 13899 0012 1AD0     		beq	.L997
1599:src/xeq.c     **** 
 13900              		.loc 1 1599 3 is_stmt 1 view .LVU3641
 13901              	.LBB2531:
 13902              	.LBI2531:
 738:src/xeq.c     **** 	if (get_lift())
 13903              		.loc 1 738 6 view .LVU3642
 13904              	.LBB2532:
 739:src/xeq.c     **** 		lift();
 13905              		.loc 1 739 2 view .LVU3643
 13906              	.LBB2533:
 13907              	.LBI2533:
 734:src/xeq.c     **** 	return State2.state_lift;
 13908              		.loc 1 734 12 view .LVU3644
 13909              	.LBB2534:
 735:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 404


 13910              		.loc 1 735 2 view .LVU3645
 735:src/xeq.c     **** }
 13911              		.loc 1 735 15 is_stmt 0 view .LVU3646
 13912 0014 2B4B     		ldr	r3, .L1014
 13913 0016 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 13914              	.LBE2534:
 13915              	.LBE2533:
 739:src/xeq.c     **** 		lift();
 13916              		.loc 1 739 5 view .LVU3647
 13917 0018 5906     		lsls	r1, r3, #25
 13918              	.LVL987:
 739:src/xeq.c     **** 		lift();
 13919              		.loc 1 739 5 view .LVU3648
 13920 001a 4FD4     		bmi	.L1012
 13921              	.LVL988:
 13922              	.L999:
 739:src/xeq.c     **** 		lift();
 13923              		.loc 1 739 5 view .LVU3649
 13924              	.LBE2532:
 13925              	.LBE2531:
1601:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 13926              		.loc 1 1601 2 is_stmt 1 view .LVU3650
1601:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 13927              		.loc 1 1601 24 is_stmt 0 view .LVU3651
 13928 001c 7934     		adds	r4, r4, #121
1601:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 13929              		.loc 1 1601 5 view .LVU3652
 13930 001e E4B2     		uxtb	r4, r4
 13931 0020 012C     		cmp	r4, #1
 13932 0022 23D9     		bls	.L1013
 13933              	.L1000:
1603:src/xeq.c     **** 		bad_mode_error();
 13934              		.loc 1 1603 7 is_stmt 1 view .LVU3653
1603:src/xeq.c     **** 		bad_mode_error();
 13935              		.loc 1 1603 11 is_stmt 0 view .LVU3654
 13936 0024 284C     		ldr	r4, .L1014+4
 13937 0026 2368     		ldr	r3, [r4]
 13938 0028 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1603:src/xeq.c     **** 		bad_mode_error();
 13939              		.loc 1 1603 10 view .LVU3655
 13940 002c D207     		lsls	r2, r2, #31
 13941 002e 26D5     		bpl	.L1002
1604:src/xeq.c     **** 	else 
 13942              		.loc 1 1604 3 is_stmt 1 view .LVU3656
 13943              	.LBB2536:
 13944              	.LBI2536:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 13945              		.loc 1 566 6 view .LVU3657
 13946              	.LBE2536:
 567:src/xeq.c     **** }
 13947              		.loc 1 567 2 view .LVU3658
 13948              	.LVL989:
 13949              	.LBB2541:
 13950              	.LBB2537:
 13951              	.LBI2537:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13952              		.loc 1 537 5 view .LVU3659
ARM GAS  /tmp/ccQlyisH.s 			page 405


 13953              	.LBB2538:
 538:src/xeq.c     **** 		Error = e;
 13954              		.loc 1 538 2 view .LVU3660
 538:src/xeq.c     **** 		Error = e;
 13955              		.loc 1 538 12 is_stmt 0 view .LVU3661
 13956 0030 264A     		ldr	r2, .L1014+8
 538:src/xeq.c     **** 		Error = e;
 13957              		.loc 1 538 5 view .LVU3662
 13958 0032 1168     		ldr	r1, [r2]
 13959 0034 09B9     		cbnz	r1, .L1001
 13960              	.LVL990:
 13961              	.LBB2539:
 13962              	.LBI2539:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13963              		.loc 1 537 5 is_stmt 1 view .LVU3663
 13964              	.LBB2540:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13965              		.loc 1 539 3 view .LVU3664
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13966              		.loc 1 539 9 is_stmt 0 view .LVU3665
 13967 0036 0D21     		movs	r1, #13
 13968 0038 1160     		str	r1, [r2]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13969              		.loc 1 540 3 is_stmt 1 view .LVU3666
 13970              	.LVL991:
 13971              	.L1001:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13972              		.loc 1 540 3 is_stmt 0 view .LVU3667
 13973              	.LBE2540:
 13974              	.LBE2539:
 13975              	.LBE2538:
 13976              	.LBE2537:
 13977              	.LBE2541:
1608:src/xeq.c     **** #endif
 13978              		.loc 1 1608 2 is_stmt 1 view .LVU3668
 13979 003a 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 13980 003e 42F00102 		orr	r2, r2, #1
 13981 0042 83F8AD27 		strb	r2, [r3, #1965]
1610:src/xeq.c     **** 
 13982              		.loc 1 1610 1 is_stmt 0 view .LVU3669
 13983 0046 02B0     		add	sp, sp, #8
 13984              		.cfi_remember_state
 13985              		.cfi_def_cfa_offset 16
 13986              		@ sp needed
 13987 0048 70BD     		pop	{r4, r5, r6, pc}
 13988              	.LVL992:
 13989              	.L997:
 13990              		.cfi_restore_state
1595:src/xeq.c     **** 		zero_Y();
 13991              		.loc 1 1595 3 is_stmt 1 view .LVU3670
 13992 004a FFF7FEFF 		bl	lift2_if_enabled
 13993              	.LVL993:
1596:src/xeq.c     **** 		set_was_complex();
 13994              		.loc 1 1596 3 view .LVU3671
 13995              	.LBB2542:
 13996              	.LBI2542:
1523:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
ARM GAS  /tmp/ccQlyisH.s 			page 406


 13997              		.loc 1 1523 6 view .LVU3672
 13998              	.LBB2543:
1524:src/xeq.c     **** }
 13999              		.loc 1 1524 2 view .LVU3673
 14000 004e 6520     		movs	r0, #101
 14001 0050 FFF7FEFF 		bl	get_reg_n
 14002              	.LVL994:
 14003 0054 FFF7FEFF 		bl	set_zero
 14004              	.LVL995:
 14005              	.LBE2543:
 14006              	.LBE2542:
1597:src/xeq.c     **** 	} else
 14007              		.loc 1 1597 3 view .LVU3674
 14008              	.LBB2544:
 14009              	.LBI2544:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 14010              		.loc 1 530 13 view .LVU3675
 14011              	.LBB2545:
 531:src/xeq.c     **** }
 14012              		.loc 1 531 2 view .LVU3676
 531:src/xeq.c     **** }
 14013              		.loc 1 531 20 is_stmt 0 view .LVU3677
 14014 0058 1A4B     		ldr	r3, .L1014
 14015              	.LBE2545:
 14016              	.LBE2544:
1601:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14017              		.loc 1 1601 24 view .LVU3678
 14018 005a 7934     		adds	r4, r4, #121
 14019              	.LBB2549:
 14020              	.LBB2546:
 531:src/xeq.c     **** }
 14021              		.loc 1 531 20 view .LVU3679
 14022 005c 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14023 005e 0121     		movs	r1, #1
 14024              	.LBE2546:
 14025              	.LBE2549:
1601:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14026              		.loc 1 1601 5 view .LVU3680
 14027 0060 E4B2     		uxtb	r4, r4
 14028              	.LBB2550:
 14029              	.LBB2547:
 531:src/xeq.c     **** }
 14030              		.loc 1 531 20 view .LVU3681
 14031 0062 61F38712 		bfi	r2, r1, #6, #2
 14032              	.LBE2547:
 14033              	.LBE2550:
1601:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14034              		.loc 1 1601 5 view .LVU3682
 14035 0066 012C     		cmp	r4, #1
 14036              	.LBB2551:
 14037              	.LBB2548:
 531:src/xeq.c     **** }
 14038              		.loc 1 531 20 view .LVU3683
 14039 0068 1A75     		strb	r2, [r3, #20]
 14040              	.LBE2548:
 14041              	.LBE2551:
1601:src/xeq.c     **** 		setX_int_sgn(arg, 0);
ARM GAS  /tmp/ccQlyisH.s 			page 407


 14042              		.loc 1 1601 2 is_stmt 1 view .LVU3684
1601:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14043              		.loc 1 1601 5 is_stmt 0 view .LVU3685
 14044 006a DBD8     		bhi	.L1000
 14045              	.L1013:
1602:src/xeq.c     **** 	else if (is_intmode())
 14046              		.loc 1 1602 3 is_stmt 1 view .LVU3686
 14047              	.LVL996:
 14048              	.LBB2552:
 14049              	.LBI2552:
1478:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14050              		.loc 1 1478 6 view .LVU3687
 14051              	.LBB2553:
1479:src/xeq.c     **** }
 14052              		.loc 1 1479 2 view .LVU3688
 14053              	.LBE2553:
 14054              	.LBE2552:
1602:src/xeq.c     **** 	else if (is_intmode())
 14055              		.loc 1 1602 3 is_stmt 0 view .LVU3689
 14056 006c 0023     		movs	r3, #0
 14057              	.LBB2555:
 14058              	.LBB2554:
1479:src/xeq.c     **** }
 14059              		.loc 1 1479 2 view .LVU3690
 14060 006e 0093     		str	r3, [sp]
 14061 0070 2A46     		mov	r2, r5
 14062 0072 6420     		movs	r0, #100
 14063 0074 FFF7FEFF 		bl	set_reg_n_int_sgn
 14064              	.LVL997:
 14065 0078 134B     		ldr	r3, .L1014+4
 14066 007a 1B68     		ldr	r3, [r3]
1480:src/xeq.c     **** 
 14067              		.loc 1 1480 1 view .LVU3691
 14068 007c DDE7     		b	.L1001
 14069              	.LVL998:
 14070              	.L1002:
1480:src/xeq.c     **** 
 14071              		.loc 1 1480 1 view .LVU3692
 14072              	.LBE2554:
 14073              	.LBE2555:
1606:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14074              		.loc 1 1606 3 is_stmt 1 view .LVU3693
 14075              	.LBB2556:
 14076              	.LBB2557:
1088:src/xeq.c     **** }
 14077              		.loc 1 1088 24 is_stmt 0 view .LVU3694
 14078 007e B3F8E817 		ldrh	r1, [r3, #2024]
 14079              	.LBE2557:
 14080              	.LBE2556:
1606:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14081              		.loc 1 1606 3 view .LVU3695
 14082 0082 134B     		ldr	r3, .L1014+12
 14083              	.LBB2560:
 14084              	.LBB2558:
1088:src/xeq.c     **** }
 14085              		.loc 1 1088 24 view .LVU3696
 14086 0084 44F20106 		movw	r6, #16385
ARM GAS  /tmp/ccQlyisH.s 			page 408


 14087 0088 3140     		ands	r1, r1, r6
 14088              	.LBE2558:
 14089              	.LBE2560:
1606:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14090              		.loc 1 1606 22 view .LVU3697
 14091 008a A1F58041 		sub	r1, r1, #16384
 14092 008e B1FA81F1 		clz	r1, r1
 14093 0092 2846     		mov	r0, r5
 14094 0094 4909     		lsrs	r1, r1, #5
1606:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14095              		.loc 1 1606 3 view .LVU3698
 14096 0096 1D68     		ldr	r5, [r3]
 14097              	.LVL999:
 14098              	.LBB2561:
 14099              	.LBI2556:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14100              		.loc 1 1087 5 is_stmt 1 view .LVU3699
 14101              	.LBB2559:
1088:src/xeq.c     **** }
 14102              		.loc 1 1088 2 view .LVU3700
 14103              	.LBE2559:
 14104              	.LBE2561:
1606:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14105              		.loc 1 1606 22 is_stmt 0 view .LVU3701
 14106 0098 FFF7FEFF 		bl	get_const
 14107              	.LVL1000:
 14108              	.LBB2562:
 14109              	.LBB2563:
 14110              	.LBB2564:
 14111              	.LBB2565:
1088:src/xeq.c     **** }
 14112              		.loc 1 1088 24 view .LVU3702
 14113 009c 2368     		ldr	r3, [r4]
 14114 009e B3F8E837 		ldrh	r3, [r3, #2024]
 14115              	.LBE2565:
 14116              	.LBE2564:
 718:src/xeq.c     **** }
 14117              		.loc 1 718 2 view .LVU3703
 14118 00a2 1E40     		ands	r6, r6, r3
 14119 00a4 B6F5804F 		cmp	r6, #16384
 14120              	.LBE2563:
 14121              	.LBE2562:
1606:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14122              		.loc 1 1606 22 view .LVU3704
 14123 00a8 0146     		mov	r1, r0
 14124              	.LVL1001:
 14125              	.LBB2569:
 14126              	.LBI2562:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14127              		.loc 1 717 6 is_stmt 1 view .LVU3705
 14128              	.LBB2568:
 718:src/xeq.c     **** }
 14129              		.loc 1 718 2 view .LVU3706
 14130              	.LBB2567:
 14131              	.LBI2564:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14132              		.loc 1 1087 5 view .LVU3707
ARM GAS  /tmp/ccQlyisH.s 			page 409


 14133              	.LBB2566:
1088:src/xeq.c     **** }
 14134              		.loc 1 1088 2 view .LVU3708
 14135              	.LBE2566:
 14136              	.LBE2567:
 718:src/xeq.c     **** }
 14137              		.loc 1 718 2 is_stmt 0 view .LVU3709
 14138 00aa 08BF     		it	eq
 14139 00ac 1022     		moveq	r2, #16
 14140 00ae 2846     		mov	r0, r5
 14141              	.LVL1002:
 718:src/xeq.c     **** }
 14142              		.loc 1 718 2 view .LVU3710
 14143 00b0 18BF     		it	ne
 14144 00b2 0822     		movne	r2, #8
 14145 00b4 FFF7FEFF 		bl	xcopy
 14146              	.LVL1003:
 718:src/xeq.c     **** }
 14147              		.loc 1 718 2 view .LVU3711
 14148 00b8 2368     		ldr	r3, [r4]
 719:src/xeq.c     **** 
 14149              		.loc 1 719 1 view .LVU3712
 14150 00ba BEE7     		b	.L1001
 14151              	.LVL1004:
 14152              	.L1012:
 719:src/xeq.c     **** 
 14153              		.loc 1 719 1 view .LVU3713
 14154              	.LBE2568:
 14155              	.LBE2569:
 14156              	.LBB2570:
 14157              	.LBB2535:
 740:src/xeq.c     **** }
 14158              		.loc 1 740 3 is_stmt 1 view .LVU3714
 14159 00bc FFF7FEFF 		bl	lift
 14160              	.LVL1005:
 740:src/xeq.c     **** }
 14161              		.loc 1 740 3 is_stmt 0 view .LVU3715
 14162 00c0 ACE7     		b	.L999
 14163              	.L1015:
 14164 00c2 00BF     		.align	2
 14165              	.L1014:
 14166 00c4 00000000 		.word	StateWhileOn
 14167 00c8 00000000 		.word	main_ram
 14168 00cc 00000000 		.word	Error
 14169 00d0 00000000 		.word	StackBase
 14170              	.LBE2535:
 14171              	.LBE2570:
 14172              		.cfi_endproc
 14173              	.LFE113:
 14175              		.section	.text.cmdsto,"ax",%progbits
 14176              		.align	1
 14177              		.p2align 2,,3
 14178              		.global	cmdsto
 14179              		.syntax unified
 14180              		.thumb
 14181              		.thumb_func
 14182              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQlyisH.s 			page 410


 14184              	cmdsto:
 14185              	.LVL1006:
 14186              	.LFB116:
1693:src/xeq.c     **** 	if (op == RARG_STO) {
 14187              		.loc 1 1693 45 is_stmt 1 view -0
 14188              		.cfi_startproc
 14189              		@ args = 0, pretend = 0, frame = 48
 14190              		@ frame_needed = 0, uses_anonymous_args = 0
1694:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14191              		.loc 1 1694 2 view .LVU3717
1693:src/xeq.c     **** 	if (op == RARG_STO) {
 14192              		.loc 1 1693 45 is_stmt 0 view .LVU3718
 14193 0000 10B5     		push	{r4, lr}
 14194              		.cfi_def_cfa_offset 8
 14195              		.cfi_offset 4, -8
 14196              		.cfi_offset 14, -4
1694:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14197              		.loc 1 1694 5 view .LVU3719
 14198 0002 0329     		cmp	r1, #3
1693:src/xeq.c     **** 	if (op == RARG_STO) {
 14199              		.loc 1 1693 45 view .LVU3720
 14200 0004 8CB0     		sub	sp, sp, #48
 14201              		.cfi_def_cfa_offset 56
1694:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14202              		.loc 1 1694 5 view .LVU3721
 14203 0006 32D0     		beq	.L1029
1697:src/xeq.c     **** 			long long int r;
 14204              		.loc 1 1697 3 is_stmt 1 view .LVU3722
1697:src/xeq.c     **** 			long long int r;
 14205              		.loc 1 1697 7 is_stmt 0 view .LVU3723
 14206 0008 1B4B     		ldr	r3, .L1030
 14207 000a 1B68     		ldr	r3, [r3]
 14208 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 14209              	.LBB2583:
1700:src/xeq.c     **** 				illegal(op);
 14210              		.loc 1 1700 8 view .LVU3724
 14211 0010 0339     		subs	r1, r1, #3
 14212              	.LVL1007:
1700:src/xeq.c     **** 				illegal(op);
 14213              		.loc 1 1700 8 view .LVU3725
 14214              	.LBE2583:
1697:src/xeq.c     **** 			long long int r;
 14215              		.loc 1 1697 6 view .LVU3726
 14216 0012 13F00103 		ands	r3, r3, #1
 14217 0016 0446     		mov	r4, r0
 14218              	.LBB2591:
1700:src/xeq.c     **** 				illegal(op);
 14219              		.loc 1 1700 8 view .LVU3727
 14220 0018 88B2     		uxth	r0, r1
 14221              	.LVL1008:
1700:src/xeq.c     **** 				illegal(op);
 14222              		.loc 1 1700 8 view .LVU3728
 14223              	.LBE2591:
1697:src/xeq.c     **** 			long long int r;
 14224              		.loc 1 1697 6 view .LVU3729
 14225 001a 18D0     		beq	.L1019
 14226              	.LBB2592:
ARM GAS  /tmp/ccQlyisH.s 			page 411


1698:src/xeq.c     **** 
 14227              		.loc 1 1698 4 is_stmt 1 view .LVU3730
1700:src/xeq.c     **** 				illegal(op);
 14228              		.loc 1 1700 4 view .LVU3731
1700:src/xeq.c     **** 				illegal(op);
 14229              		.loc 1 1700 8 is_stmt 0 view .LVU3732
 14230 001c 0023     		movs	r3, #0
 14231 001e 6A46     		mov	r2, sp
 14232 0020 2146     		mov	r1, r4
 14233 0022 FFF7FEFF 		bl	storcl_intop
 14234              	.LVL1009:
1700:src/xeq.c     **** 				illegal(op);
 14235              		.loc 1 1700 7 view .LVU3733
 14236 0026 20B1     		cbz	r0, .L1020
1701:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14237              		.loc 1 1701 5 is_stmt 1 view .LVU3734
1701:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14238              		.loc 1 1701 5 view .LVU3735
 14239              	.LVL1010:
 14240              	.LBB2584:
 14241              	.LBI2584:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14242              		.loc 1 537 5 view .LVU3736
 14243              	.LBB2585:
 538:src/xeq.c     **** 		Error = e;
 14244              		.loc 1 538 2 view .LVU3737
 538:src/xeq.c     **** 		Error = e;
 14245              		.loc 1 538 12 is_stmt 0 view .LVU3738
 14246 0028 144B     		ldr	r3, .L1030+4
 538:src/xeq.c     **** 		Error = e;
 14247              		.loc 1 538 5 view .LVU3739
 14248 002a 1A68     		ldr	r2, [r3]
 14249 002c 0AB9     		cbnz	r2, .L1020
 14250              	.LVL1011:
 14251              	.LBB2586:
 14252              	.LBI2586:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14253              		.loc 1 537 5 is_stmt 1 view .LVU3740
 14254              	.LBB2587:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 14255              		.loc 1 539 3 view .LVU3741
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 14256              		.loc 1 539 9 is_stmt 0 view .LVU3742
 14257 002e 0322     		movs	r2, #3
 14258 0030 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 14259              		.loc 1 540 3 is_stmt 1 view .LVU3743
 14260              	.LVL1012:
 14261              	.L1020:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 14262              		.loc 1 540 3 is_stmt 0 view .LVU3744
 14263              	.LBE2587:
 14264              	.LBE2586:
 14265              	.LBE2585:
 14266              	.LBE2584:
1701:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14267              		.loc 1 1701 5 is_stmt 1 discriminator 1 view .LVU3745
ARM GAS  /tmp/ccQlyisH.s 			page 412


1702:src/xeq.c     **** 		} else {
 14268              		.loc 1 1702 4 discriminator 1 view .LVU3746
1702:src/xeq.c     **** 		} else {
 14269              		.loc 1 1702 4 is_stmt 0 discriminator 1 view .LVU3747
 14270 0032 DDE90023 		ldrd	r2, [sp]
 14271              	.LBB2588:
 14272              	.LBB2589:
1392:src/xeq.c     **** }
 14273              		.loc 1 1392 8 discriminator 1 view .LVU3748
 14274 0036 2046     		mov	r0, r4
 14275 0038 CDE90223 		strd	r2, [sp, #8]
 14276              	.LVL1013:
1392:src/xeq.c     **** }
 14277              		.loc 1 1392 8 discriminator 1 view .LVU3749
 14278              	.LBE2589:
 14279              	.LBI2588:
1391:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 14280              		.loc 1 1391 6 is_stmt 1 discriminator 1 view .LVU3750
 14281              	.LBB2590:
1392:src/xeq.c     **** }
 14282              		.loc 1 1392 2 discriminator 1 view .LVU3751
1392:src/xeq.c     **** }
 14283              		.loc 1 1392 8 is_stmt 0 discriminator 1 view .LVU3752
 14284 003c FFF7FEFF 		bl	get_reg_n
 14285              	.LVL1014:
1392:src/xeq.c     **** }
 14286              		.loc 1 1392 2 discriminator 1 view .LVU3753
 14287 0040 0822     		movs	r2, #8
 14288 0042 0DEB0201 		add	r1, sp, r2
 14289 0046 FFF7FEFF 		bl	xcopy
 14290              	.LVL1015:
1392:src/xeq.c     **** }
 14291              		.loc 1 1392 2 discriminator 1 view .LVU3754
 14292              	.LBE2590:
 14293              	.LBE2588:
 14294              	.LBE2592:
1711:src/xeq.c     **** 
 14295              		.loc 1 1711 1 discriminator 1 view .LVU3755
 14296 004a 0CB0     		add	sp, sp, #48
 14297              		.cfi_remember_state
 14298              		.cfi_def_cfa_offset 8
 14299              		@ sp needed
 14300 004c 10BD     		pop	{r4, pc}
 14301              	.LVL1016:
 14302              	.L1019:
 14303              		.cfi_restore_state
 14304              	.LBB2593:
1704:src/xeq.c     **** 
 14305              		.loc 1 1704 4 is_stmt 1 view .LVU3756
1706:src/xeq.c     **** 				illegal(op);
 14306              		.loc 1 1706 4 view .LVU3757
1706:src/xeq.c     **** 				illegal(op);
 14307              		.loc 1 1706 8 is_stmt 0 view .LVU3758
 14308 004e 02AA     		add	r2, sp, #8
 14309 0050 2146     		mov	r1, r4
 14310 0052 FFF7FEFF 		bl	storcl_op
 14311              	.LVL1017:
ARM GAS  /tmp/ccQlyisH.s 			page 413


1706:src/xeq.c     **** 				illegal(op);
 14312              		.loc 1 1706 7 view .LVU3759
 14313 0056 20B1     		cbz	r0, .L1021
1707:src/xeq.c     **** 			setRegister(arg, &r);
 14314              		.loc 1 1707 5 is_stmt 1 view .LVU3760
1707:src/xeq.c     **** 			setRegister(arg, &r);
 14315              		.loc 1 1707 5 view .LVU3761
 14316              	.LVL1018:
 14317              	.LBB2594:
 14318              	.LBI2594:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14319              		.loc 1 537 5 view .LVU3762
 14320              	.LBB2595:
 538:src/xeq.c     **** 		Error = e;
 14321              		.loc 1 538 2 view .LVU3763
 538:src/xeq.c     **** 		Error = e;
 14322              		.loc 1 538 12 is_stmt 0 view .LVU3764
 14323 0058 084B     		ldr	r3, .L1030+4
 538:src/xeq.c     **** 		Error = e;
 14324              		.loc 1 538 5 view .LVU3765
 14325 005a 1A68     		ldr	r2, [r3]
 14326 005c 0AB9     		cbnz	r2, .L1021
 14327              	.LVL1019:
 14328              	.LBB2596:
 14329              	.LBI2596:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14330              		.loc 1 537 5 is_stmt 1 view .LVU3766
 14331              	.LBB2597:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 14332              		.loc 1 539 3 view .LVU3767
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 14333              		.loc 1 539 9 is_stmt 0 view .LVU3768
 14334 005e 0322     		movs	r2, #3
 14335 0060 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 14336              		.loc 1 540 3 is_stmt 1 view .LVU3769
 14337              	.LVL1020:
 14338              	.L1021:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 14339              		.loc 1 540 3 is_stmt 0 view .LVU3770
 14340              	.LBE2597:
 14341              	.LBE2596:
 14342              	.LBE2595:
 14343              	.LBE2594:
1707:src/xeq.c     **** 			setRegister(arg, &r);
 14344              		.loc 1 1707 5 is_stmt 1 discriminator 1 view .LVU3771
1708:src/xeq.c     **** 		}
 14345              		.loc 1 1708 4 discriminator 1 view .LVU3772
 14346 0062 02A9     		add	r1, sp, #8
 14347 0064 2046     		mov	r0, r4
 14348 0066 FFF7FEFF 		bl	setRegister
 14349              	.LVL1021:
 14350              	.LBE2593:
1711:src/xeq.c     **** 
 14351              		.loc 1 1711 1 is_stmt 0 discriminator 1 view .LVU3773
 14352 006a 0CB0     		add	sp, sp, #48
 14353              		.cfi_remember_state
ARM GAS  /tmp/ccQlyisH.s 			page 414


 14354              		.cfi_def_cfa_offset 8
 14355              		@ sp needed
 14356 006c 10BD     		pop	{r4, pc}
 14357              	.LVL1022:
 14358              	.L1029:
 14359              		.cfi_restore_state
1695:src/xeq.c     **** 	} else {
 14360              		.loc 1 1695 3 is_stmt 1 view .LVU3774
 14361 006e 6421     		movs	r1, #100
 14362              	.LVL1023:
1695:src/xeq.c     **** 	} else {
 14363              		.loc 1 1695 3 is_stmt 0 view .LVU3775
 14364 0070 FFF7FEFF 		bl	copyreg_n
 14365              	.LVL1024:
1711:src/xeq.c     **** 
 14366              		.loc 1 1711 1 view .LVU3776
 14367 0074 0CB0     		add	sp, sp, #48
 14368              		.cfi_def_cfa_offset 8
 14369              		@ sp needed
 14370 0076 10BD     		pop	{r4, pc}
 14371              	.L1031:
 14372              		.align	2
 14373              	.L1030:
 14374 0078 00000000 		.word	main_ram
 14375 007c 00000000 		.word	Error
 14376              		.cfi_endproc
 14377              	.LFE116:
 14379              		.section	.text.cmdrcl,"ax",%progbits
 14380              		.align	1
 14381              		.p2align 2,,3
 14382              		.global	cmdrcl
 14383              		.syntax unified
 14384              		.thumb
 14385              		.thumb_func
 14386              		.fpu fpv4-sp-d16
 14388              	cmdrcl:
 14389              	.LVL1025:
 14390              	.LFB118:
1740:src/xeq.c     **** 	do_rcl(arg, op);
 14391              		.loc 1 1740 45 is_stmt 1 view -0
 14392              		.cfi_startproc
 14393              		@ args = 0, pretend = 0, frame = 0
 14394              		@ frame_needed = 0, uses_anonymous_args = 0
 14395              		@ link register save eliminated.
1741:src/xeq.c     **** }
 14396              		.loc 1 1741 2 view .LVU3778
 14397 0000 FFF7FEBF 		b	do_rcl
 14398              	.LVL1026:
1741:src/xeq.c     **** }
 14399              		.loc 1 1741 2 is_stmt 0 view .LVU3779
 14400              		.cfi_endproc
 14401              	.LFE118:
 14403              		.section	.text.cmdcsto,"ax",%progbits
 14404              		.align	1
 14405              		.p2align 2,,3
 14406              		.global	cmdcsto
 14407              		.syntax unified
ARM GAS  /tmp/ccQlyisH.s 			page 415


 14408              		.thumb
 14409              		.thumb_func
 14410              		.fpu fpv4-sp-d16
 14412              	cmdcsto:
 14413              	.LVL1027:
 14414              	.LFB120:
1785:src/xeq.c     **** 	decNumber r1, r2;
 14415              		.loc 1 1785 46 is_stmt 1 view -0
 14416              		.cfi_startproc
 14417              		@ args = 0, pretend = 0, frame = 72
 14418              		@ frame_needed = 0, uses_anonymous_args = 0
1786:src/xeq.c     **** 	REGISTER *t1, *t2;
 14419              		.loc 1 1786 2 view .LVU3781
1787:src/xeq.c     **** 
 14420              		.loc 1 1787 2 view .LVU3782
1789:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14421              		.loc 1 1789 2 view .LVU3783
1785:src/xeq.c     **** 	decNumber r1, r2;
 14422              		.loc 1 1785 46 is_stmt 0 view .LVU3784
 14423 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 14424              		.cfi_def_cfa_offset 24
 14425              		.cfi_offset 4, -24
 14426              		.cfi_offset 5, -20
 14427              		.cfi_offset 6, -16
 14428              		.cfi_offset 7, -12
 14429              		.cfi_offset 8, -8
 14430              		.cfi_offset 14, -4
 14431 0004 94B0     		sub	sp, sp, #80
 14432              		.cfi_def_cfa_offset 104
1785:src/xeq.c     **** 	decNumber r1, r2;
 14433              		.loc 1 1785 46 view .LVU3785
 14434 0006 0C46     		mov	r4, r1
1790:src/xeq.c     **** 
 14435              		.loc 1 1790 21 view .LVU3786
 14436 0008 461C     		adds	r6, r0, #1
1785:src/xeq.c     **** 	decNumber r1, r2;
 14437              		.loc 1 1785 46 view .LVU3787
 14438 000a 0546     		mov	r5, r0
1789:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14439              		.loc 1 1789 7 view .LVU3788
 14440 000c FFF7FEFF 		bl	get_reg_n
 14441              	.LVL1028:
1789:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14442              		.loc 1 1789 7 view .LVU3789
 14443 0010 8046     		mov	r8, r0
1790:src/xeq.c     **** 
 14444              		.loc 1 1790 7 view .LVU3790
 14445 0012 3046     		mov	r0, r6
 14446              	.LVL1029:
1790:src/xeq.c     **** 
 14447              		.loc 1 1790 2 is_stmt 1 view .LVU3791
1790:src/xeq.c     **** 
 14448              		.loc 1 1790 7 is_stmt 0 view .LVU3792
 14449 0014 FFF7FEFF 		bl	get_reg_n
 14450              	.LVL1030:
1792:src/xeq.c     **** 		copyreg(t1, StackBase);
 14451              		.loc 1 1792 2 is_stmt 1 view .LVU3793
ARM GAS  /tmp/ccQlyisH.s 			page 416


1792:src/xeq.c     **** 		copyreg(t1, StackBase);
 14452              		.loc 1 1792 5 is_stmt 0 view .LVU3794
 14453 0018 152C     		cmp	r4, #21
 14454 001a 24D0     		beq	.L1045
1796:src/xeq.c     **** 			bad_mode_error();
 14455              		.loc 1 1796 3 is_stmt 1 view .LVU3795
1796:src/xeq.c     **** 			bad_mode_error();
 14456              		.loc 1 1796 7 is_stmt 0 view .LVU3796
 14457 001c 284B     		ldr	r3, .L1046
 14458 001e 1B68     		ldr	r3, [r3]
 14459 0020 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1796:src/xeq.c     **** 			bad_mode_error();
 14460              		.loc 1 1796 6 view .LVU3797
 14461 0024 13F00103 		ands	r3, r3, #1
 14462 0028 0DD0     		beq	.L1038
1797:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
 14463              		.loc 1 1797 4 is_stmt 1 view .LVU3798
 14464              	.LBB2617:
 14465              	.LBI2617:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14466              		.loc 1 566 6 view .LVU3799
 14467              	.LBE2617:
 567:src/xeq.c     **** }
 14468              		.loc 1 567 2 view .LVU3800
 14469              	.LVL1031:
 14470              	.LBB2622:
 14471              	.LBB2618:
 14472              	.LBI2618:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14473              		.loc 1 537 5 view .LVU3801
 14474              	.LBB2619:
 538:src/xeq.c     **** 		Error = e;
 14475              		.loc 1 538 2 view .LVU3802
 538:src/xeq.c     **** 		Error = e;
 14476              		.loc 1 538 12 is_stmt 0 view .LVU3803
 14477 002a 264B     		ldr	r3, .L1046+4
 538:src/xeq.c     **** 		Error = e;
 14478              		.loc 1 538 5 view .LVU3804
 14479 002c 1A68     		ldr	r2, [r3]
 14480 002e 0AB9     		cbnz	r2, .L1037
 14481              	.LVL1032:
 14482              	.LBB2620:
 14483              	.LBI2620:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14484              		.loc 1 537 5 is_stmt 1 view .LVU3805
 14485              	.LBB2621:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 14486              		.loc 1 539 3 view .LVU3806
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 14487              		.loc 1 539 9 is_stmt 0 view .LVU3807
 14488 0030 0D22     		movs	r2, #13
 14489 0032 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 14490              		.loc 1 540 3 is_stmt 1 view .LVU3808
 14491              	.LVL1033:
 14492              	.L1037:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/ccQlyisH.s 			page 417


 14493              		.loc 1 540 3 is_stmt 0 view .LVU3809
 14494              	.LBE2621:
 14495              	.LBE2620:
 14496              	.LBE2619:
 14497              	.LBE2618:
 14498              	.LBE2622:
1805:src/xeq.c     **** }
 14499              		.loc 1 1805 2 is_stmt 1 view .LVU3810
 14500              	.LBB2623:
 14501              	.LBI2623:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 14502              		.loc 1 530 13 view .LVU3811
 14503              	.LBB2624:
 531:src/xeq.c     **** }
 14504              		.loc 1 531 2 view .LVU3812
 531:src/xeq.c     **** }
 14505              		.loc 1 531 20 is_stmt 0 view .LVU3813
 14506 0034 244B     		ldr	r3, .L1046+8
 14507 0036 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14508 0038 0121     		movs	r1, #1
 14509 003a 61F38712 		bfi	r2, r1, #6, #2
 14510 003e 1A75     		strb	r2, [r3, #20]
 14511              	.LBE2624:
 14512              	.LBE2623:
1806:src/xeq.c     **** 
 14513              		.loc 1 1806 1 view .LVU3814
 14514 0040 14B0     		add	sp, sp, #80
 14515              		.cfi_remember_state
 14516              		.cfi_def_cfa_offset 24
 14517              		@ sp needed
 14518 0042 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 14519              	.LVL1034:
 14520              	.L1038:
 14521              		.cfi_restore_state
1798:src/xeq.c     **** 			illegal(op);
 14522              		.loc 1 1798 8 is_stmt 1 view .LVU3815
1798:src/xeq.c     **** 			illegal(op);
 14523              		.loc 1 1798 12 is_stmt 0 view .LVU3816
 14524 0046 153C     		subs	r4, r4, #21
 14525 0048 0093     		str	r3, [sp]
 14526 004a A0B2     		uxth	r0, r4
 14527              	.LVL1035:
1798:src/xeq.c     **** 			illegal(op);
 14528              		.loc 1 1798 12 view .LVU3817
 14529 004c 0BAB     		add	r3, sp, #44
 14530 004e 02AA     		add	r2, sp, #8
 14531 0050 2946     		mov	r1, r5
 14532 0052 FFF7FEFF 		bl	storcl_cop
 14533              	.LVL1036:
1798:src/xeq.c     **** 			illegal(op);
 14534              		.loc 1 1798 11 view .LVU3818
 14535 0056 50B3     		cbz	r0, .L1040
1799:src/xeq.c     **** 		else {
 14536              		.loc 1 1799 4 is_stmt 1 view .LVU3819
1799:src/xeq.c     **** 		else {
 14537              		.loc 1 1799 4 view .LVU3820
 14538              	.LVL1037:
ARM GAS  /tmp/ccQlyisH.s 			page 418


 14539              	.LBB2625:
 14540              	.LBI2625:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14541              		.loc 1 537 5 view .LVU3821
 14542              	.LBB2626:
 538:src/xeq.c     **** 		Error = e;
 14543              		.loc 1 538 2 view .LVU3822
 538:src/xeq.c     **** 		Error = e;
 14544              		.loc 1 538 12 is_stmt 0 view .LVU3823
 14545 0058 1A4B     		ldr	r3, .L1046+4
 538:src/xeq.c     **** 		Error = e;
 14546              		.loc 1 538 5 view .LVU3824
 14547 005a 1A68     		ldr	r2, [r3]
 14548 005c 002A     		cmp	r2, #0
 14549 005e E9D1     		bne	.L1037
 14550              	.LVL1038:
 14551              	.LBB2627:
 14552              	.LBI2627:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14553              		.loc 1 537 5 is_stmt 1 view .LVU3825
 14554              	.LBB2628:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 14555              		.loc 1 539 3 view .LVU3826
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 14556              		.loc 1 539 9 is_stmt 0 view .LVU3827
 14557 0060 0322     		movs	r2, #3
 14558 0062 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 14559              		.loc 1 540 3 is_stmt 1 view .LVU3828
 14560 0064 E6E7     		b	.L1037
 14561              	.LVL1039:
 14562              	.L1045:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 14563              		.loc 1 540 3 is_stmt 0 view .LVU3829
 14564              	.LBE2628:
 14565              	.LBE2627:
 14566              	.LBE2626:
 14567              	.LBE2625:
1793:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 14568              		.loc 1 1793 3 is_stmt 1 view .LVU3830
 14569              	.LBB2629:
 14570              	.LBB2630:
 14571              	.LBB2631:
 14572              	.LBB2632:
1088:src/xeq.c     **** }
 14573              		.loc 1 1088 24 is_stmt 0 view .LVU3831
 14574 0066 164D     		ldr	r5, .L1046
 14575              	.LVL1040:
1088:src/xeq.c     **** }
 14576              		.loc 1 1088 24 view .LVU3832
 14577              	.LBE2632:
 14578              	.LBE2631:
 14579              	.LBE2630:
 14580              	.LBE2629:
1793:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 14581              		.loc 1 1793 3 view .LVU3833
 14582 0068 184A     		ldr	r2, .L1046+12
ARM GAS  /tmp/ccQlyisH.s 			page 419


 14583              	.LVL1041:
 14584              	.LBB2638:
 14585              	.LBI2629:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14586              		.loc 1 717 6 is_stmt 1 view .LVU3834
 14587              	.LBB2637:
 718:src/xeq.c     **** }
 14588              		.loc 1 718 2 view .LVU3835
 14589              	.LBB2635:
 14590              	.LBI2631:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14591              		.loc 1 1087 5 view .LVU3836
 14592              	.LBB2633:
1088:src/xeq.c     **** }
 14593              		.loc 1 1088 2 view .LVU3837
1088:src/xeq.c     **** }
 14594              		.loc 1 1088 24 is_stmt 0 view .LVU3838
 14595 006a 2B68     		ldr	r3, [r5]
 14596              	.LBE2633:
 14597              	.LBE2635:
 718:src/xeq.c     **** }
 14598              		.loc 1 718 2 view .LVU3839
 14599 006c 1168     		ldr	r1, [r2]
 14600              	.LBB2636:
 14601              	.LBB2634:
1088:src/xeq.c     **** }
 14602              		.loc 1 1088 24 view .LVU3840
 14603 006e B3F8E837 		ldrh	r3, [r3, #2024]
 14604 0072 44F20104 		movw	r4, #16385
 14605              	.LBE2634:
 14606              	.LBE2636:
 718:src/xeq.c     **** }
 14607              		.loc 1 718 2 view .LVU3841
 14608 0076 2340     		ands	r3, r3, r4
 14609 0078 B3F5804F 		cmp	r3, #16384
 14610 007c 0CBF     		ite	eq
 14611 007e 1022     		moveq	r2, #16
 14612              	.LVL1042:
 718:src/xeq.c     **** }
 14613              		.loc 1 718 2 view .LVU3842
 14614 0080 0822     		movne	r2, #8
 14615 0082 0746     		mov	r7, r0
 14616 0084 4046     		mov	r0, r8
 14617              	.LVL1043:
 718:src/xeq.c     **** }
 14618              		.loc 1 718 2 view .LVU3843
 14619 0086 FFF7FEFF 		bl	xcopy
 14620              	.LVL1044:
 718:src/xeq.c     **** }
 14621              		.loc 1 718 2 view .LVU3844
 14622              	.LBE2637:
 14623              	.LBE2638:
1794:src/xeq.c     **** 	} else {
 14624              		.loc 1 1794 3 is_stmt 1 view .LVU3845
1794:src/xeq.c     **** 	} else {
 14625              		.loc 1 1794 15 is_stmt 0 view .LVU3846
 14626 008a 6520     		movs	r0, #101
ARM GAS  /tmp/ccQlyisH.s 			page 420


 14627 008c FFF7FEFF 		bl	get_reg_n
 14628              	.LVL1045:
 14629              	.LBB2639:
 14630              	.LBB2640:
 14631              	.LBB2641:
 14632              	.LBB2642:
1088:src/xeq.c     **** }
 14633              		.loc 1 1088 24 view .LVU3847
 14634 0090 2B68     		ldr	r3, [r5]
 14635 0092 B3F8E837 		ldrh	r3, [r3, #2024]
 14636              	.LBE2642:
 14637              	.LBE2641:
 718:src/xeq.c     **** }
 14638              		.loc 1 718 2 view .LVU3848
 14639 0096 1C40     		ands	r4, r4, r3
 14640 0098 B4F5804F 		cmp	r4, #16384
 14641              	.LBE2640:
 14642              	.LBE2639:
1794:src/xeq.c     **** 	} else {
 14643              		.loc 1 1794 15 view .LVU3849
 14644 009c 0146     		mov	r1, r0
 14645              	.LVL1046:
 14646              	.LBB2646:
 14647              	.LBI2639:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14648              		.loc 1 717 6 is_stmt 1 view .LVU3850
 14649              	.LBB2645:
 718:src/xeq.c     **** }
 14650              		.loc 1 718 2 view .LVU3851
 14651              	.LBB2644:
 14652              	.LBI2641:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14653              		.loc 1 1087 5 view .LVU3852
 14654              	.LBB2643:
1088:src/xeq.c     **** }
 14655              		.loc 1 1088 2 view .LVU3853
 14656              	.LBE2643:
 14657              	.LBE2644:
 718:src/xeq.c     **** }
 14658              		.loc 1 718 2 is_stmt 0 view .LVU3854
 14659 009e 08BF     		it	eq
 14660 00a0 1022     		moveq	r2, #16
 14661 00a2 3846     		mov	r0, r7
 14662              	.LVL1047:
 718:src/xeq.c     **** }
 14663              		.loc 1 718 2 view .LVU3855
 14664 00a4 18BF     		it	ne
 14665 00a6 0822     		movne	r2, #8
 14666 00a8 FFF7FEFF 		bl	xcopy
 14667              	.LVL1048:
 719:src/xeq.c     **** 
 14668              		.loc 1 719 1 view .LVU3856
 14669 00ac C2E7     		b	.L1037
 14670              	.LVL1049:
 14671              	.L1040:
 719:src/xeq.c     **** 
 14672              		.loc 1 719 1 view .LVU3857
ARM GAS  /tmp/ccQlyisH.s 			page 421


 14673              	.LBE2645:
 14674              	.LBE2646:
1801:src/xeq.c     **** 			setRegister(arg + 1, &r2);
 14675              		.loc 1 1801 4 is_stmt 1 view .LVU3858
 14676 00ae 02A9     		add	r1, sp, #8
 14677 00b0 2846     		mov	r0, r5
 14678 00b2 FFF7FEFF 		bl	setRegister
 14679              	.LVL1050:
1802:src/xeq.c     **** 		}
 14680              		.loc 1 1802 4 view .LVU3859
 14681 00b6 0BA9     		add	r1, sp, #44
 14682 00b8 3046     		mov	r0, r6
 14683 00ba FFF7FEFF 		bl	setRegister
 14684              	.LVL1051:
 14685 00be B9E7     		b	.L1037
 14686              	.L1047:
 14687              		.align	2
 14688              	.L1046:
 14689 00c0 00000000 		.word	main_ram
 14690 00c4 00000000 		.word	Error
 14691 00c8 00000000 		.word	StateWhileOn
 14692 00cc 00000000 		.word	StackBase
 14693              		.cfi_endproc
 14694              	.LFE120:
 14696              		.section	.text.cmdcrcl,"ax",%progbits
 14697              		.align	1
 14698              		.p2align 2,,3
 14699              		.global	cmdcrcl
 14700              		.syntax unified
 14701              		.thumb
 14702              		.thumb_func
 14703              		.fpu fpv4-sp-d16
 14705              	cmdcrcl:
 14706              	.LVL1052:
 14707              	.LFB122:
1831:src/xeq.c     **** 	do_crcl(arg, op);
 14708              		.loc 1 1831 46 view -0
 14709              		.cfi_startproc
 14710              		@ args = 0, pretend = 0, frame = 72
 14711              		@ frame_needed = 0, uses_anonymous_args = 0
1832:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14712              		.loc 1 1832 2 view .LVU3861
1831:src/xeq.c     **** 	do_crcl(arg, op);
 14713              		.loc 1 1831 46 is_stmt 0 view .LVU3862
 14714 0000 70B5     		push	{r4, r5, r6, lr}
 14715              		.cfi_def_cfa_offset 16
 14716              		.cfi_offset 4, -16
 14717              		.cfi_offset 5, -12
 14718              		.cfi_offset 6, -8
 14719              		.cfi_offset 14, -4
 14720              	.LBB2677:
 14721              	.LBB2678:
1811:src/xeq.c     **** 		REGISTER x, y;
 14722              		.loc 1 1811 5 view .LVU3863
 14723 0002 1A29     		cmp	r1, #26
 14724              	.LBE2678:
 14725              	.LBE2677:
ARM GAS  /tmp/ccQlyisH.s 			page 422


1831:src/xeq.c     **** 	do_crcl(arg, op);
 14726              		.loc 1 1831 46 view .LVU3864
 14727 0004 94B0     		sub	sp, sp, #80
 14728              		.cfi_def_cfa_offset 96
1831:src/xeq.c     **** 	do_crcl(arg, op);
 14729              		.loc 1 1831 46 view .LVU3865
 14730 0006 0446     		mov	r4, r0
 14731              	.LVL1053:
 14732              	.LBB2727:
 14733              	.LBI2677:
1808:src/xeq.c     **** 	decNumber r1, r2;
 14734              		.loc 1 1808 13 is_stmt 1 view .LVU3866
 14735              	.LBB2724:
1809:src/xeq.c     **** 
 14736              		.loc 1 1809 2 view .LVU3867
1811:src/xeq.c     **** 		REGISTER x, y;
 14737              		.loc 1 1811 2 view .LVU3868
1811:src/xeq.c     **** 		REGISTER x, y;
 14738              		.loc 1 1811 5 is_stmt 0 view .LVU3869
 14739 0008 2AD0     		beq	.L1064
1819:src/xeq.c     **** 			bad_mode_error();
 14740              		.loc 1 1819 3 is_stmt 1 view .LVU3870
1819:src/xeq.c     **** 			bad_mode_error();
 14741              		.loc 1 1819 7 is_stmt 0 view .LVU3871
 14742 000a 3B4D     		ldr	r5, .L1065
 14743 000c 2B68     		ldr	r3, [r5]
 14744 000e 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1819:src/xeq.c     **** 			bad_mode_error();
 14745              		.loc 1 1819 6 view .LVU3872
 14746 0012 D207     		lsls	r2, r2, #31
 14747 0014 11D5     		bpl	.L1055
1820:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
 14748              		.loc 1 1820 4 is_stmt 1 view .LVU3873
 14749              	.LBB2679:
 14750              	.LBI2679:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14751              		.loc 1 566 6 view .LVU3874
 14752              	.LBE2679:
 14753              	.LBE2724:
 14754              	.LBE2727:
 567:src/xeq.c     **** }
 14755              		.loc 1 567 2 view .LVU3875
 14756              	.LVL1054:
 14757              	.LBB2728:
 14758              	.LBB2725:
 14759              	.LBB2684:
 14760              	.LBB2680:
 14761              	.LBI2680:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14762              		.loc 1 537 5 view .LVU3876
 14763              	.LBB2681:
 538:src/xeq.c     **** 		Error = e;
 14764              		.loc 1 538 2 view .LVU3877
 538:src/xeq.c     **** 		Error = e;
 14765              		.loc 1 538 12 is_stmt 0 view .LVU3878
 14766 0016 394A     		ldr	r2, .L1065+4
 538:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccQlyisH.s 			page 423


 14767              		.loc 1 538 5 view .LVU3879
 14768 0018 1168     		ldr	r1, [r2]
 14769              	.LVL1055:
 538:src/xeq.c     **** 		Error = e;
 14770              		.loc 1 538 5 view .LVU3880
 14771 001a 09B9     		cbnz	r1, .L1054
 14772              	.LVL1056:
 14773              	.LBB2682:
 14774              	.LBI2682:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14775              		.loc 1 537 5 is_stmt 1 view .LVU3881
 14776              	.LBB2683:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 14777              		.loc 1 539 3 view .LVU3882
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 14778              		.loc 1 539 9 is_stmt 0 view .LVU3883
 14779 001c 0D21     		movs	r1, #13
 14780 001e 1160     		str	r1, [r2]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 14781              		.loc 1 540 3 is_stmt 1 view .LVU3884
 14782              	.LVL1057:
 14783              	.L1054:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 14784              		.loc 1 540 3 is_stmt 0 view .LVU3885
 14785              	.LBE2683:
 14786              	.LBE2682:
 14787              	.LBE2681:
 14788              	.LBE2680:
 14789              	.LBE2684:
1828:src/xeq.c     **** }
 14790              		.loc 1 1828 2 is_stmt 1 view .LVU3886
 14791              	.LBB2685:
 14792              	.LBI2685:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 14793              		.loc 1 530 13 view .LVU3887
 14794              	.LBB2686:
 531:src/xeq.c     **** }
 14795              		.loc 1 531 2 view .LVU3888
 531:src/xeq.c     **** }
 14796              		.loc 1 531 20 is_stmt 0 view .LVU3889
 14797 0020 374A     		ldr	r2, .L1065+8
 14798 0022 117D     		ldrb	r1, [r2, #20]	@ zero_extendqisi2
 14799 0024 0120     		movs	r0, #1
 14800 0026 60F38711 		bfi	r1, r0, #6, #2
 14801 002a 1175     		strb	r1, [r2, #20]
 14802              	.LVL1058:
 531:src/xeq.c     **** }
 14803              		.loc 1 531 20 view .LVU3890
 14804              	.LBE2686:
 14805              	.LBE2685:
 14806              	.LBE2725:
 14807              	.LBE2728:
1834:src/xeq.c     **** #endif
 14808              		.loc 1 1834 2 is_stmt 1 view .LVU3891
 14809 002c 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 14810 0030 0243     		orrs	r2, r2, r0
 14811 0032 83F8AD27 		strb	r2, [r3, #1965]
ARM GAS  /tmp/ccQlyisH.s 			page 424


1836:src/xeq.c     **** 
 14812              		.loc 1 1836 1 is_stmt 0 view .LVU3892
 14813 0036 14B0     		add	sp, sp, #80
 14814              		.cfi_remember_state
 14815              		.cfi_def_cfa_offset 16
 14816              		@ sp needed
 14817 0038 70BD     		pop	{r4, r5, r6, pc}
 14818              	.LVL1059:
 14819              	.L1055:
 14820              		.cfi_restore_state
 14821              	.LBB2729:
 14822              	.LBB2726:
1821:src/xeq.c     **** 			illegal(op);
 14823              		.loc 1 1821 8 is_stmt 1 view .LVU3893
1821:src/xeq.c     **** 			illegal(op);
 14824              		.loc 1 1821 12 is_stmt 0 view .LVU3894
 14825 003a 1A39     		subs	r1, r1, #26
 14826              	.LVL1060:
1821:src/xeq.c     **** 			illegal(op);
 14827              		.loc 1 1821 12 view .LVU3895
 14828 003c 0126     		movs	r6, #1
 14829 003e 88B2     		uxth	r0, r1
 14830              	.LVL1061:
1821:src/xeq.c     **** 			illegal(op);
 14831              		.loc 1 1821 12 view .LVU3896
 14832 0040 0BAB     		add	r3, sp, #44
 14833 0042 2146     		mov	r1, r4
 14834 0044 02AA     		add	r2, sp, #8
 14835 0046 0096     		str	r6, [sp]
 14836 0048 FFF7FEFF 		bl	storcl_cop
 14837              	.LVL1062:
1821:src/xeq.c     **** 			illegal(op);
 14838              		.loc 1 1821 11 view .LVU3897
 14839 004c 0028     		cmp	r0, #0
 14840 004e 4AD0     		beq	.L1056
1822:src/xeq.c     **** 		else {
 14841              		.loc 1 1822 4 is_stmt 1 view .LVU3898
1822:src/xeq.c     **** 		else {
 14842              		.loc 1 1822 4 view .LVU3899
 14843              	.LVL1063:
 14844              	.LBB2687:
 14845              	.LBI2687:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14846              		.loc 1 537 5 view .LVU3900
 14847              	.LBB2688:
 538:src/xeq.c     **** 		Error = e;
 14848              		.loc 1 538 2 view .LVU3901
 538:src/xeq.c     **** 		Error = e;
 14849              		.loc 1 538 12 is_stmt 0 view .LVU3902
 14850 0050 2A4A     		ldr	r2, .L1065+4
 538:src/xeq.c     **** 		Error = e;
 14851              		.loc 1 538 5 view .LVU3903
 14852 0052 1368     		ldr	r3, [r2]
 14853 0054 002B     		cmp	r3, #0
 14854 0056 4CD1     		bne	.L1063
 14855              	.LVL1064:
 14856              	.LBB2689:
ARM GAS  /tmp/ccQlyisH.s 			page 425


 14857              	.LBI2689:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14858              		.loc 1 537 5 is_stmt 1 view .LVU3904
 14859              	.LBB2690:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 14860              		.loc 1 539 3 view .LVU3905
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 14861              		.loc 1 539 9 is_stmt 0 view .LVU3906
 14862 0058 0321     		movs	r1, #3
 14863 005a 2B68     		ldr	r3, [r5]
 14864 005c 1160     		str	r1, [r2]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 14865              		.loc 1 540 3 is_stmt 1 view .LVU3907
 14866 005e DFE7     		b	.L1054
 14867              	.LVL1065:
 14868              	.L1064:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 14869              		.loc 1 540 3 is_stmt 0 view .LVU3908
 14870              	.LBE2690:
 14871              	.LBE2689:
 14872              	.LBE2688:
 14873              	.LBE2687:
 14874              	.LBB2691:
1812:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
 14875              		.loc 1 1812 3 is_stmt 1 view .LVU3909
1813:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 14876              		.loc 1 1813 3 view .LVU3910
 14877              	.LBB2692:
 14878              	.LBB2693:
 14879              	.LBB2694:
 14880              	.LBB2695:
1088:src/xeq.c     **** }
 14881              		.loc 1 1088 24 is_stmt 0 view .LVU3911
 14882 0060 254E     		ldr	r6, .L1065
 14883              	.LBE2695:
 14884              	.LBE2694:
 14885              	.LBE2693:
 14886              	.LBE2692:
1813:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 14887              		.loc 1 1813 15 view .LVU3912
 14888 0062 FFF7FEFF 		bl	get_reg_n
 14889              	.LVL1066:
 14890              	.LBB2702:
 14891              	.LBB2700:
 14892              	.LBB2698:
 14893              	.LBB2696:
1088:src/xeq.c     **** }
 14894              		.loc 1 1088 24 view .LVU3913
 14895 0066 3368     		ldr	r3, [r6]
 14896 0068 B3F8E837 		ldrh	r3, [r3, #2024]
 14897 006c 44F20105 		movw	r5, #16385
 14898              	.LBE2696:
 14899              	.LBE2698:
 718:src/xeq.c     **** }
 14900              		.loc 1 718 2 view .LVU3914
 14901 0070 2B40     		ands	r3, r3, r5
 14902 0072 B3F5804F 		cmp	r3, #16384
ARM GAS  /tmp/ccQlyisH.s 			page 426


 14903 0076 0CBF     		ite	eq
 14904 0078 1022     		moveq	r2, #16
 14905 007a 0822     		movne	r2, #8
 14906              	.LBE2700:
 14907              	.LBE2702:
1813:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 14908              		.loc 1 1813 15 view .LVU3915
 14909 007c 0146     		mov	r1, r0
 14910              	.LVL1067:
 14911              	.LBB2703:
 14912              	.LBI2692:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14913              		.loc 1 717 6 is_stmt 1 view .LVU3916
 14914              	.LBB2701:
 718:src/xeq.c     **** }
 14915              		.loc 1 718 2 view .LVU3917
 14916              	.LBB2699:
 14917              	.LBI2694:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14918              		.loc 1 1087 5 view .LVU3918
 14919              	.LBB2697:
1088:src/xeq.c     **** }
 14920              		.loc 1 1088 2 view .LVU3919
 14921              	.LBE2697:
 14922              	.LBE2699:
 718:src/xeq.c     **** }
 14923              		.loc 1 718 2 is_stmt 0 view .LVU3920
 14924 007e 02A8     		add	r0, sp, #8
 14925              	.LVL1068:
 718:src/xeq.c     **** }
 14926              		.loc 1 718 2 view .LVU3921
 14927 0080 FFF7FEFF 		bl	xcopy
 14928              	.LVL1069:
 718:src/xeq.c     **** }
 14929              		.loc 1 718 2 view .LVU3922
 14930              	.LBE2701:
 14931              	.LBE2703:
1814:src/xeq.c     **** 		lift2_if_enabled();
 14932              		.loc 1 1814 3 is_stmt 1 view .LVU3923
1814:src/xeq.c     **** 		lift2_if_enabled();
 14933              		.loc 1 1814 15 is_stmt 0 view .LVU3924
 14934 0084 601C     		adds	r0, r4, #1
 14935 0086 FFF7FEFF 		bl	get_reg_n
 14936              	.LVL1070:
 14937              	.LBB2704:
 14938              	.LBB2705:
 14939              	.LBB2706:
 14940              	.LBB2707:
1088:src/xeq.c     **** }
 14941              		.loc 1 1088 24 view .LVU3925
 14942 008a 3368     		ldr	r3, [r6]
 14943 008c B3F8E837 		ldrh	r3, [r3, #2024]
 14944              	.LBE2707:
 14945              	.LBE2706:
 718:src/xeq.c     **** }
 14946              		.loc 1 718 2 view .LVU3926
 14947 0090 2B40     		ands	r3, r3, r5
ARM GAS  /tmp/ccQlyisH.s 			page 427


 14948 0092 B3F5804F 		cmp	r3, #16384
 14949              	.LBE2705:
 14950              	.LBE2704:
1814:src/xeq.c     **** 		lift2_if_enabled();
 14951              		.loc 1 1814 15 view .LVU3927
 14952 0096 0146     		mov	r1, r0
 14953              	.LVL1071:
 14954              	.LBB2711:
 14955              	.LBI2704:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14956              		.loc 1 717 6 is_stmt 1 view .LVU3928
 14957              	.LBB2710:
 718:src/xeq.c     **** }
 14958              		.loc 1 718 2 view .LVU3929
 14959              	.LBB2709:
 14960              	.LBI2706:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14961              		.loc 1 1087 5 view .LVU3930
 14962              	.LBB2708:
1088:src/xeq.c     **** }
 14963              		.loc 1 1088 2 view .LVU3931
 14964              	.LBE2708:
 14965              	.LBE2709:
 718:src/xeq.c     **** }
 14966              		.loc 1 718 2 is_stmt 0 view .LVU3932
 14967 0098 0CBF     		ite	eq
 14968 009a 1022     		moveq	r2, #16
 14969 009c 0822     		movne	r2, #8
 14970 009e 0BA8     		add	r0, sp, #44
 14971              	.LVL1072:
 718:src/xeq.c     **** }
 14972              		.loc 1 718 2 view .LVU3933
 14973 00a0 FFF7FEFF 		bl	xcopy
 14974              	.LVL1073:
 718:src/xeq.c     **** }
 14975              		.loc 1 718 2 view .LVU3934
 14976              	.LBE2710:
 14977              	.LBE2711:
1815:src/xeq.c     **** 		copyreg(StackBase, &x);
 14978              		.loc 1 1815 3 is_stmt 1 view .LVU3935
 14979 00a4 FFF7FEFF 		bl	lift2_if_enabled
 14980              	.LVL1074:
1816:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 14981              		.loc 1 1816 3 view .LVU3936
 14982              	.LBB2712:
 14983              	.LBB2713:
 14984              	.LBB2714:
 14985              	.LBB2715:
1088:src/xeq.c     **** }
 14986              		.loc 1 1088 24 is_stmt 0 view .LVU3937
 14987 00a8 3368     		ldr	r3, [r6]
 14988              	.LBE2715:
 14989              	.LBE2714:
 14990              	.LBE2713:
 14991              	.LBE2712:
1816:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 14992              		.loc 1 1816 3 view .LVU3938
ARM GAS  /tmp/ccQlyisH.s 			page 428


 14993 00aa 164A     		ldr	r2, .L1065+12
 14994              	.LVL1075:
 14995              	.LBB2719:
 14996              	.LBI2712:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14997              		.loc 1 717 6 is_stmt 1 view .LVU3939
 14998              	.LBB2718:
 718:src/xeq.c     **** }
 14999              		.loc 1 718 2 view .LVU3940
 15000              	.LBB2717:
 15001              	.LBI2714:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15002              		.loc 1 1087 5 view .LVU3941
 15003              	.LBB2716:
1088:src/xeq.c     **** }
 15004              		.loc 1 1088 2 view .LVU3942
1088:src/xeq.c     **** }
 15005              		.loc 1 1088 24 is_stmt 0 view .LVU3943
 15006 00ac B3F8E837 		ldrh	r3, [r3, #2024]
 15007              	.LBE2716:
 15008              	.LBE2717:
 718:src/xeq.c     **** }
 15009              		.loc 1 718 2 view .LVU3944
 15010 00b0 1068     		ldr	r0, [r2]
 15011 00b2 2B40     		ands	r3, r3, r5
 15012 00b4 B3F5804F 		cmp	r3, #16384
 15013 00b8 0CBF     		ite	eq
 15014 00ba 1022     		moveq	r2, #16
 15015              	.LVL1076:
 718:src/xeq.c     **** }
 15016              		.loc 1 718 2 view .LVU3945
 15017 00bc 0822     		movne	r2, #8
 15018 00be 02A9     		add	r1, sp, #8
 15019              	.LVL1077:
 718:src/xeq.c     **** }
 15020              		.loc 1 718 2 view .LVU3946
 15021 00c0 FFF7FEFF 		bl	xcopy
 15022              	.LVL1078:
 718:src/xeq.c     **** }
 15023              		.loc 1 718 2 view .LVU3947
 15024              	.LBE2718:
 15025              	.LBE2719:
1817:src/xeq.c     **** 	} else {
 15026              		.loc 1 1817 3 is_stmt 1 view .LVU3948
 15027 00c4 6520     		movs	r0, #101
 15028 00c6 FFF7FEFF 		bl	get_reg_n
 15029              	.LVL1079:
 15030              	.LBB2720:
 15031              	.LBI2720:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15032              		.loc 1 717 6 view .LVU3949
 15033              	.LBB2721:
 718:src/xeq.c     **** }
 15034              		.loc 1 718 2 view .LVU3950
 15035              	.LBB2722:
 15036              	.LBI2722:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
ARM GAS  /tmp/ccQlyisH.s 			page 429


 15037              		.loc 1 1087 5 view .LVU3951
 15038              	.LBB2723:
1088:src/xeq.c     **** }
 15039              		.loc 1 1088 2 view .LVU3952
1088:src/xeq.c     **** }
 15040              		.loc 1 1088 24 is_stmt 0 view .LVU3953
 15041 00ca 3368     		ldr	r3, [r6]
 15042 00cc B3F8E837 		ldrh	r3, [r3, #2024]
 15043              	.LBE2723:
 15044              	.LBE2722:
 718:src/xeq.c     **** }
 15045              		.loc 1 718 2 view .LVU3954
 15046 00d0 1D40     		ands	r5, r5, r3
 15047 00d2 B5F5804F 		cmp	r5, #16384
 15048 00d6 0BA9     		add	r1, sp, #44
 15049              	.LVL1080:
 718:src/xeq.c     **** }
 15050              		.loc 1 718 2 view .LVU3955
 15051 00d8 0CBF     		ite	eq
 15052 00da 1022     		moveq	r2, #16
 15053 00dc 0822     		movne	r2, #8
 15054 00de FFF7FEFF 		bl	xcopy
 15055              	.LVL1081:
 718:src/xeq.c     **** }
 15056              		.loc 1 718 2 view .LVU3956
 15057 00e2 3368     		ldr	r3, [r6]
 15058              	.LBE2721:
 15059              	.LBE2720:
 15060              	.LBE2691:
 15061 00e4 9CE7     		b	.L1054
 15062              	.L1056:
1824:src/xeq.c     **** 			setXY(&r1, &r2);
 15063              		.loc 1 1824 4 is_stmt 1 view .LVU3957
 15064 00e6 FFF7FEFF 		bl	setlastXY
 15065              	.LVL1082:
1825:src/xeq.c     **** 		}
 15066              		.loc 1 1825 4 view .LVU3958
 15067 00ea 0BA9     		add	r1, sp, #44
 15068 00ec 02A8     		add	r0, sp, #8
 15069 00ee FFF7FEFF 		bl	setXY
 15070              	.LVL1083:
 15071              	.L1063:
 15072 00f2 2B68     		ldr	r3, [r5]
 15073 00f4 94E7     		b	.L1054
 15074              	.L1066:
 15075 00f6 00BF     		.align	2
 15076              	.L1065:
 15077 00f8 00000000 		.word	main_ram
 15078 00fc 00000000 		.word	Error
 15079 0100 00000000 		.word	StateWhileOn
 15080 0104 00000000 		.word	StackBase
 15081              	.LBE2726:
 15082              	.LBE2729:
 15083              		.cfi_endproc
 15084              	.LFE122:
 15086              		.section	.text.cmdircl,"ax",%progbits
 15087              		.align	1
ARM GAS  /tmp/ccQlyisH.s 			page 430


 15088              		.p2align 2,,3
 15089              		.global	cmdircl
 15090              		.syntax unified
 15091              		.thumb
 15092              		.thumb_func
 15093              		.fpu fpv4-sp-d16
 15095              	cmdircl:
 15096              	.LVL1084:
 15097              	.LFB123:
1848:src/xeq.c     **** 	if (is_intmode())
 15098              		.loc 1 1848 46 view -0
 15099              		.cfi_startproc
 15100              		@ args = 0, pretend = 0, frame = 0
 15101              		@ frame_needed = 0, uses_anonymous_args = 0
 15102              		@ link register save eliminated.
1849:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15103              		.loc 1 1849 2 view .LVU3960
1849:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15104              		.loc 1 1849 6 is_stmt 0 view .LVU3961
 15105 0000 064B     		ldr	r3, .L1069
 15106 0002 1B68     		ldr	r3, [r3]
 15107 0004 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1849:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15108              		.loc 1 1849 5 view .LVU3962
 15109 0008 12F00102 		ands	r2, r2, #1
1848:src/xeq.c     **** 	if (is_intmode())
 15110              		.loc 1 1848 46 view .LVU3963
 15111 000c 0146     		mov	r1, r0
 15112              	.LVL1085:
1849:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15113              		.loc 1 1849 5 view .LVU3964
 15114 000e 02D0     		beq	.L1068
1850:src/xeq.c     **** 	else
 15115              		.loc 1 1850 3 is_stmt 1 view .LVU3965
 15116              	.LVL1086:
 15117              	.LBB2730:
 15118              	.LBI2730:
1740:src/xeq.c     **** 	do_rcl(arg, op);
 15119              		.loc 1 1740 6 view .LVU3966
 15120              	.LBB2731:
1741:src/xeq.c     **** }
 15121              		.loc 1 1741 2 view .LVU3967
 15122 0010 0A21     		movs	r1, #10
 15123 0012 FFF7FEBF 		b	do_rcl
 15124              	.LVL1087:
 15125              	.L1068:
1741:src/xeq.c     **** }
 15126              		.loc 1 1741 2 is_stmt 0 view .LVU3968
 15127              	.LBE2731:
 15128              	.LBE2730:
1852:src/xeq.c     **** }
 15129              		.loc 1 1852 3 is_stmt 1 view .LVU3969
 15130 0016 6420     		movs	r0, #100
 15131              	.LVL1088:
1852:src/xeq.c     **** }
 15132              		.loc 1 1852 3 is_stmt 0 view .LVU3970
 15133 0018 FFF7FEBF 		b	register_from_int
ARM GAS  /tmp/ccQlyisH.s 			page 431


 15134              	.LVL1089:
 15135              	.L1070:
1852:src/xeq.c     **** }
 15136              		.loc 1 1852 3 view .LVU3971
 15137              		.align	2
 15138              	.L1069:
 15139 001c 00000000 		.word	main_ram
 15140              		.cfi_endproc
 15141              	.LFE123:
 15143              		.section	.text.cmdrrcl,"ax",%progbits
 15144              		.align	1
 15145              		.p2align 2,,3
 15146              		.global	cmdrrcl
 15147              		.syntax unified
 15148              		.thumb
 15149              		.thumb_func
 15150              		.fpu fpv4-sp-d16
 15152              	cmdrrcl:
 15153              	.LVL1090:
 15154              	.LFB124:
1856:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15155              		.loc 1 1856 46 is_stmt 1 view -0
 15156              		.cfi_startproc
 15157              		@ args = 0, pretend = 0, frame = 40
 15158              		@ frame_needed = 0, uses_anonymous_args = 0
1857:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15159              		.loc 1 1857 2 view .LVU3973
1856:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15160              		.loc 1 1856 46 is_stmt 0 view .LVU3974
 15161 0000 70B5     		push	{r4, r5, r6, lr}
 15162              		.cfi_def_cfa_offset 16
 15163              		.cfi_offset 4, -16
 15164              		.cfi_offset 5, -12
 15165              		.cfi_offset 6, -8
 15166              		.cfi_offset 14, -4
1857:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15167              		.loc 1 1857 22 view .LVU3975
 15168 0002 1F4C     		ldr	r4, .L1078
 15169 0004 2368     		ldr	r3, [r4]
1857:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15170              		.loc 1 1857 28 view .LVU3976
 15171 0006 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1858:src/xeq.c     **** 
 15172              		.loc 1 1858 26 view .LVU3977
 15173 000a 8029     		cmp	r1, #128
1856:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15174              		.loc 1 1856 46 view .LVU3978
 15175 000c 8AB0     		sub	sp, sp, #40
 15176              		.cfi_def_cfa_offset 56
1857:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15177              		.loc 1 1857 28 view .LVU3979
 15178 000e C2F38015 		ubfx	r5, r2, #6, #1
 15179              	.LVL1091:
1858:src/xeq.c     **** 
 15180              		.loc 1 1858 2 is_stmt 1 view .LVU3980
1858:src/xeq.c     **** 
 15181              		.loc 1 1858 26 is_stmt 0 view .LVU3981
ARM GAS  /tmp/ccQlyisH.s 			page 432


 15182 0012 0CBF     		ite	eq
 15183 0014 0121     		moveq	r1, #1
 15184              	.LVL1092:
1858:src/xeq.c     **** 
 15185              		.loc 1 1858 26 view .LVU3982
 15186 0016 0021     		movne	r1, #0
 15187              	.LVL1093:
1860:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15188              		.loc 1 1860 2 is_stmt 1 view .LVU3983
1860:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15189              		.loc 1 1860 5 is_stmt 0 view .LVU3984
 15190 0018 26D0     		beq	.L1076
 15191              	.LVL1094:
 15192              	.L1072:
1866:src/xeq.c     **** 	if (is_intmode()) {
 15193              		.loc 1 1866 2 is_stmt 1 view .LVU3985
1866:src/xeq.c     **** 	if (is_intmode()) {
 15194              		.loc 1 1866 21 is_stmt 0 view .LVU3986
 15195 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1867:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15196              		.loc 1 1867 6 view .LVU3987
 15197 001e 93F8E867 		ldrb	r6, [r3, #2024]	@ zero_extendqisi2
1866:src/xeq.c     **** 	if (is_intmode()) {
 15198              		.loc 1 1866 21 view .LVU3988
 15199 0022 61F38612 		bfi	r2, r1, #6, #1
 15200 0026 83F8E927 		strb	r2, [r3, #2025]
 15201              	.LVL1095:
1867:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15202              		.loc 1 1867 2 is_stmt 1 view .LVU3989
1867:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15203              		.loc 1 1867 5 is_stmt 0 view .LVU3990
 15204 002a F307     		lsls	r3, r6, #31
1868:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15205              		.loc 1 1868 3 view .LVU3991
 15206 002c 0146     		mov	r1, r0
 15207              	.LVL1096:
1867:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15208              		.loc 1 1867 5 view .LVU3992
 15209 002e 0FD4     		bmi	.L1077
 15210              	.LBB2739:
1872:src/xeq.c     **** 		getRegister(&x, arg);
 15211              		.loc 1 1872 3 is_stmt 1 view .LVU3993
1873:src/xeq.c     **** 
 15212              		.loc 1 1873 3 view .LVU3994
 15213 0030 01A8     		add	r0, sp, #4
 15214              	.LVL1097:
1873:src/xeq.c     **** 
 15215              		.loc 1 1873 3 is_stmt 0 view .LVU3995
 15216 0032 FFF7FEFF 		bl	getRegister
 15217              	.LVL1098:
1875:src/xeq.c     **** 		setX(&x);
 15218              		.loc 1 1875 3 is_stmt 1 view .LVU3996
1875:src/xeq.c     **** 		setX(&x);
 15219              		.loc 1 1875 22 is_stmt 0 view .LVU3997
 15220 0036 2368     		ldr	r3, [r4]
 15221 0038 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 15222 003c 65F38612 		bfi	r2, r5, #6, #1
ARM GAS  /tmp/ccQlyisH.s 			page 433


 15223              	.LBB2740:
 15224              	.LBB2741:
 820:src/xeq.c     **** }
 15225              		.loc 1 820 2 view .LVU3998
 15226 0040 01A9     		add	r1, sp, #4
 15227              	.LBE2741:
 15228              	.LBE2740:
1875:src/xeq.c     **** 		setX(&x);
 15229              		.loc 1 1875 22 view .LVU3999
 15230 0042 83F8E927 		strb	r2, [r3, #2025]
1876:src/xeq.c     **** 	}
 15231              		.loc 1 1876 3 is_stmt 1 view .LVU4000
 15232              	.LVL1099:
 15233              	.LBB2743:
 15234              	.LBI2740:
 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 15235              		.loc 1 819 6 view .LVU4001
 15236              	.LBB2742:
 820:src/xeq.c     **** }
 15237              		.loc 1 820 2 view .LVU4002
 15238 0046 6420     		movs	r0, #100
 15239 0048 FFF7FEFF 		bl	setRegister
 15240              	.LVL1100:
 15241              	.L1071:
 820:src/xeq.c     **** }
 15242              		.loc 1 820 2 is_stmt 0 view .LVU4003
 15243              	.LBE2742:
 15244              	.LBE2743:
 15245              	.LBE2739:
1878:src/xeq.c     **** 
 15246              		.loc 1 1878 1 view .LVU4004
 15247 004c 0AB0     		add	sp, sp, #40
 15248              		.cfi_remember_state
 15249              		.cfi_def_cfa_offset 16
 15250              		@ sp needed
 15251 004e 70BD     		pop	{r4, r5, r6, pc}
 15252              	.LVL1101:
 15253              	.L1077:
 15254              		.cfi_restore_state
1868:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15255              		.loc 1 1868 3 is_stmt 1 view .LVU4005
 15256 0050 6420     		movs	r0, #100
 15257              	.LVL1102:
1868:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15258              		.loc 1 1868 3 is_stmt 0 view .LVU4006
 15259 0052 FFF7FEFF 		bl	int_from_register
 15260              	.LVL1103:
1869:src/xeq.c     **** 	}
 15261              		.loc 1 1869 3 is_stmt 1 view .LVU4007
1869:src/xeq.c     **** 	}
 15262              		.loc 1 1869 22 is_stmt 0 view .LVU4008
 15263 0056 2368     		ldr	r3, [r4]
 15264 0058 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 15265 005c 65F38612 		bfi	r2, r5, #6, #1
 15266 0060 83F8E927 		strb	r2, [r3, #2025]
1878:src/xeq.c     **** 
 15267              		.loc 1 1878 1 view .LVU4009
ARM GAS  /tmp/ccQlyisH.s 			page 434


 15268 0064 0AB0     		add	sp, sp, #40
 15269              		.cfi_remember_state
 15270              		.cfi_def_cfa_offset 16
 15271              		@ sp needed
 15272 0066 70BD     		pop	{r4, r5, r6, pc}
 15273              	.LVL1104:
 15274              	.L1076:
 15275              		.cfi_restore_state
1860:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15276              		.loc 1 1860 14 discriminator 1 view .LVU4010
 15277 0068 A0F16402 		sub	r2, r0, #100
 15278              	.LVL1105:
1860:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15279              		.loc 1 1860 14 discriminator 1 view .LVU4011
 15280 006c 0B2A     		cmp	r2, #11
 15281 006e D4D8     		bhi	.L1072
1862:src/xeq.c     **** 		return;
 15282              		.loc 1 1862 3 is_stmt 1 view .LVU4012
 15283              	.LVL1106:
 15284              	.LBB2744:
 15285              	.LBI2744:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 15286              		.loc 1 537 5 view .LVU4013
 15287              	.LBB2745:
 538:src/xeq.c     **** 		Error = e;
 15288              		.loc 1 538 2 view .LVU4014
 538:src/xeq.c     **** 		Error = e;
 15289              		.loc 1 538 12 is_stmt 0 view .LVU4015
 15290 0070 044B     		ldr	r3, .L1078+4
 15291              	.LVL1107:
 538:src/xeq.c     **** 		Error = e;
 15292              		.loc 1 538 5 view .LVU4016
 15293 0072 1A68     		ldr	r2, [r3]
 15294 0074 002A     		cmp	r2, #0
 15295 0076 E9D1     		bne	.L1071
 15296              	.LVL1108:
 15297              	.LBB2746:
 15298              	.LBI2746:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 15299              		.loc 1 537 5 is_stmt 1 view .LVU4017
 15300              	.LBB2747:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 15301              		.loc 1 539 3 view .LVU4018
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 15302              		.loc 1 539 9 is_stmt 0 view .LVU4019
 15303 0078 0822     		movs	r2, #8
 15304 007a 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 15305              		.loc 1 540 3 is_stmt 1 view .LVU4020
 15306 007c E6E7     		b	.L1071
 15307              	.L1079:
 15308 007e 00BF     		.align	2
 15309              	.L1078:
 15310 0080 00000000 		.word	main_ram
 15311 0084 00000000 		.word	Error
 15312              	.LBE2747:
 15313              	.LBE2746:
ARM GAS  /tmp/ccQlyisH.s 			page 435


 15314              	.LBE2745:
 15315              	.LBE2744:
 15316              		.cfi_endproc
 15317              	.LFE124:
 15319              		.section	.text.swap_reg,"ax",%progbits
 15320              		.align	1
 15321              		.p2align 2,,3
 15322              		.global	swap_reg
 15323              		.syntax unified
 15324              		.thumb
 15325              		.thumb_func
 15326              		.fpu fpv4-sp-d16
 15328              	swap_reg:
 15329              	.LVL1109:
 15330              	.LFB125:
1883:src/xeq.c     **** 	REGISTER t;
 15331              		.loc 1 1883 41 view -0
 15332              		.cfi_startproc
 15333              		@ args = 0, pretend = 0, frame = 16
 15334              		@ frame_needed = 0, uses_anonymous_args = 0
1884:src/xeq.c     **** 
 15335              		.loc 1 1884 2 view .LVU4022
1886:src/xeq.c     **** 	copyreg(a, b);
 15336              		.loc 1 1886 2 view .LVU4023
1883:src/xeq.c     **** 	REGISTER t;
 15337              		.loc 1 1883 41 is_stmt 0 view .LVU4024
 15338 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 15339              		.cfi_def_cfa_offset 20
 15340              		.cfi_offset 4, -20
 15341              		.cfi_offset 5, -16
 15342              		.cfi_offset 6, -12
 15343              		.cfi_offset 7, -8
 15344              		.cfi_offset 14, -4
 15345              	.LBB2748:
 15346              	.LBB2749:
 15347              	.LBB2750:
 15348              	.LBB2751:
1088:src/xeq.c     **** }
 15349              		.loc 1 1088 24 view .LVU4025
 15350 0002 174F     		ldr	r7, .L1088
 15351 0004 3B68     		ldr	r3, [r7]
 15352 0006 B3F8E837 		ldrh	r3, [r3, #2024]
 15353 000a 44F20104 		movw	r4, #16385
 15354              	.LBE2751:
 15355              	.LBE2750:
 718:src/xeq.c     **** }
 15356              		.loc 1 718 2 view .LVU4026
 15357 000e 2340     		ands	r3, r3, r4
 15358              	.LBE2749:
 15359              	.LBE2748:
1883:src/xeq.c     **** 	REGISTER t;
 15360              		.loc 1 1883 41 view .LVU4027
 15361 0010 85B0     		sub	sp, sp, #20
 15362              		.cfi_def_cfa_offset 40
 15363              	.LVL1110:
 15364              	.LBB2756:
 15365              	.LBB2754:
ARM GAS  /tmp/ccQlyisH.s 			page 436


 718:src/xeq.c     **** }
 15366              		.loc 1 718 2 view .LVU4028
 15367 0012 B3F5804F 		cmp	r3, #16384
 15368 0016 0CBF     		ite	eq
 15369 0018 1022     		moveq	r2, #16
 15370 001a 0822     		movne	r2, #8
 15371              	.LBE2754:
 15372              	.LBE2756:
1883:src/xeq.c     **** 	REGISTER t;
 15373              		.loc 1 1883 41 view .LVU4029
 15374 001c 0D46     		mov	r5, r1
 15375 001e 0646     		mov	r6, r0
 15376              	.LVL1111:
 15377              	.LBB2757:
 15378              	.LBI2748:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15379              		.loc 1 717 6 is_stmt 1 view .LVU4030
 15380              	.LBB2755:
 718:src/xeq.c     **** }
 15381              		.loc 1 718 2 view .LVU4031
 15382              	.LBB2753:
 15383              	.LBI2750:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15384              		.loc 1 1087 5 view .LVU4032
 15385              	.LBB2752:
1088:src/xeq.c     **** }
 15386              		.loc 1 1088 2 view .LVU4033
 15387              	.LBE2752:
 15388              	.LBE2753:
 718:src/xeq.c     **** }
 15389              		.loc 1 718 2 is_stmt 0 view .LVU4034
 15390 0020 0146     		mov	r1, r0
 15391              	.LVL1112:
 718:src/xeq.c     **** }
 15392              		.loc 1 718 2 view .LVU4035
 15393 0022 6846     		mov	r0, sp
 15394              	.LVL1113:
 718:src/xeq.c     **** }
 15395              		.loc 1 718 2 view .LVU4036
 15396 0024 FFF7FEFF 		bl	xcopy
 15397              	.LVL1114:
 718:src/xeq.c     **** }
 15398              		.loc 1 718 2 view .LVU4037
 15399              	.LBE2755:
 15400              	.LBE2757:
1887:src/xeq.c     **** 	copyreg(b, &t);
 15401              		.loc 1 1887 2 is_stmt 1 view .LVU4038
 15402              	.LBB2758:
 15403              	.LBI2758:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15404              		.loc 1 717 6 view .LVU4039
 15405              	.LBB2759:
 718:src/xeq.c     **** }
 15406              		.loc 1 718 2 view .LVU4040
 15407              	.LBB2760:
 15408              	.LBI2760:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
ARM GAS  /tmp/ccQlyisH.s 			page 437


 15409              		.loc 1 1087 5 view .LVU4041
 15410              	.LBB2761:
1088:src/xeq.c     **** }
 15411              		.loc 1 1088 2 view .LVU4042
1088:src/xeq.c     **** }
 15412              		.loc 1 1088 24 is_stmt 0 view .LVU4043
 15413 0028 3B68     		ldr	r3, [r7]
 15414 002a B3F8E837 		ldrh	r3, [r3, #2024]
 15415              	.LBE2761:
 15416              	.LBE2760:
 718:src/xeq.c     **** }
 15417              		.loc 1 718 2 view .LVU4044
 15418 002e 2340     		ands	r3, r3, r4
 15419 0030 B3F5804F 		cmp	r3, #16384
 15420 0034 0CBF     		ite	eq
 15421 0036 1022     		moveq	r2, #16
 15422 0038 0822     		movne	r2, #8
 15423 003a 2946     		mov	r1, r5
 15424 003c 3046     		mov	r0, r6
 15425 003e FFF7FEFF 		bl	xcopy
 15426              	.LVL1115:
 718:src/xeq.c     **** }
 15427              		.loc 1 718 2 view .LVU4045
 15428              	.LBE2759:
 15429              	.LBE2758:
1888:src/xeq.c     **** }
 15430              		.loc 1 1888 2 is_stmt 1 view .LVU4046
 15431              	.LBB2762:
 15432              	.LBI2762:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15433              		.loc 1 717 6 view .LVU4047
 15434              	.LBB2763:
 718:src/xeq.c     **** }
 15435              		.loc 1 718 2 view .LVU4048
 15436              	.LBB2764:
 15437              	.LBI2764:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15438              		.loc 1 1087 5 view .LVU4049
 15439              	.LBB2765:
1088:src/xeq.c     **** }
 15440              		.loc 1 1088 2 view .LVU4050
1088:src/xeq.c     **** }
 15441              		.loc 1 1088 24 is_stmt 0 view .LVU4051
 15442 0042 3B68     		ldr	r3, [r7]
 15443 0044 B3F8E837 		ldrh	r3, [r3, #2024]
 15444              	.LBE2765:
 15445              	.LBE2764:
 718:src/xeq.c     **** }
 15446              		.loc 1 718 2 view .LVU4052
 15447 0048 1C40     		ands	r4, r4, r3
 15448 004a B4F5804F 		cmp	r4, #16384
 15449 004e 2846     		mov	r0, r5
 15450 0050 6946     		mov	r1, sp
 15451 0052 0CBF     		ite	eq
 15452 0054 1022     		moveq	r2, #16
 15453 0056 0822     		movne	r2, #8
 15454 0058 FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/ccQlyisH.s 			page 438


 15455              	.LVL1116:
 718:src/xeq.c     **** }
 15456              		.loc 1 718 2 view .LVU4053
 15457              	.LBE2763:
 15458              	.LBE2762:
1889:src/xeq.c     **** 
 15459              		.loc 1 1889 1 view .LVU4054
 15460 005c 05B0     		add	sp, sp, #20
 15461              		.cfi_def_cfa_offset 20
 15462              		@ sp needed
 15463 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 15464              	.LVL1117:
 15465              	.L1089:
1889:src/xeq.c     **** 
 15466              		.loc 1 1889 1 view .LVU4055
 15467              		.align	2
 15468              	.L1088:
 15469 0060 00000000 		.word	main_ram
 15470              		.cfi_endproc
 15471              	.LFE125:
 15473              		.section	.text.cmdswap,"ax",%progbits
 15474              		.align	1
 15475              		.p2align 2,,3
 15476              		.global	cmdswap
 15477              		.syntax unified
 15478              		.thumb
 15479              		.thumb_func
 15480              		.fpu fpv4-sp-d16
 15482              	cmdswap:
 15483              	.LVL1118:
 15484              	.LFB126:
1891:src/xeq.c     **** 	int idx;
 15485              		.loc 1 1891 46 is_stmt 1 view -0
 15486              		.cfi_startproc
 15487              		@ args = 0, pretend = 0, frame = 0
 15488              		@ frame_needed = 0, uses_anonymous_args = 0
1892:src/xeq.c     **** 
 15489              		.loc 1 1892 2 view .LVU4057
1894:src/xeq.c     **** 		idx = regX_idx;
 15490              		.loc 1 1894 2 view .LVU4058
1894:src/xeq.c     **** 		idx = regX_idx;
 15491              		.loc 1 1894 5 is_stmt 0 view .LVU4059
 15492 0000 1F29     		cmp	r1, #31
1891:src/xeq.c     **** 	int idx;
 15493              		.loc 1 1891 46 view .LVU4060
 15494 0002 70B5     		push	{r4, r5, r6, lr}
 15495              		.cfi_def_cfa_offset 16
 15496              		.cfi_offset 4, -16
 15497              		.cfi_offset 5, -12
 15498              		.cfi_offset 6, -8
 15499              		.cfi_offset 14, -4
1891:src/xeq.c     **** 	int idx;
 15500              		.loc 1 1891 46 view .LVU4061
 15501 0004 0546     		mov	r5, r0
1894:src/xeq.c     **** 		idx = regX_idx;
 15502              		.loc 1 1894 5 view .LVU4062
 15503 0006 11D0     		beq	.L1091
ARM GAS  /tmp/ccQlyisH.s 			page 439


1896:src/xeq.c     **** 		idx = regZ_idx;
 15504              		.loc 1 1896 10 view .LVU4063
 15505 0008 2029     		cmp	r1, #32
 15506 000a 0C46     		mov	r4, r1
1896:src/xeq.c     **** 		idx = regZ_idx;
 15507              		.loc 1 1896 7 is_stmt 1 view .LVU4064
1896:src/xeq.c     **** 		idx = regZ_idx;
 15508              		.loc 1 1896 10 is_stmt 0 view .LVU4065
 15509 000c 32D0     		beq	.L1092
1899:src/xeq.c     **** 
 15510              		.loc 1 1899 3 is_stmt 1 view .LVU4066
 15511              	.LVL1119:
1901:src/xeq.c     **** 
 15512              		.loc 1 1901 2 view .LVU4067
 15513 000e 01F15300 		add	r0, r1, #83
 15514              	.LVL1120:
1901:src/xeq.c     **** 
 15515              		.loc 1 1901 2 is_stmt 0 view .LVU4068
 15516 0012 FFF7FEFF 		bl	get_reg_n
 15517              	.LVL1121:
1901:src/xeq.c     **** 
 15518              		.loc 1 1901 2 view .LVU4069
 15519 0016 0646     		mov	r6, r0
 15520 0018 2846     		mov	r0, r5
 15521 001a FFF7FEFF 		bl	get_reg_n
 15522              	.LVL1122:
 15523 001e 0146     		mov	r1, r0
 15524 0020 3046     		mov	r0, r6
 15525 0022 FFF7FEFF 		bl	swap_reg
 15526              	.LVL1123:
1903:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15527              		.loc 1 1903 2 is_stmt 1 view .LVU4070
1903:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15528              		.loc 1 1903 5 is_stmt 0 view .LVU4071
 15529 0026 1E2C     		cmp	r4, #30
 15530 0028 31D8     		bhi	.L1096
1910:src/xeq.c     **** 
 15531              		.loc 1 1910 1 view .LVU4072
 15532 002a 70BD     		pop	{r4, r5, r6, pc}
 15533              	.LVL1124:
 15534              	.L1091:
1901:src/xeq.c     **** 
 15535              		.loc 1 1901 2 is_stmt 1 view .LVU4073
 15536 002c 6420     		movs	r0, #100
 15537              	.LVL1125:
1901:src/xeq.c     **** 
 15538              		.loc 1 1901 2 is_stmt 0 view .LVU4074
 15539 002e FFF7FEFF 		bl	get_reg_n
 15540              	.LVL1126:
1901:src/xeq.c     **** 
 15541              		.loc 1 1901 2 view .LVU4075
 15542 0032 0446     		mov	r4, r0
 15543 0034 2846     		mov	r0, r5
 15544 0036 FFF7FEFF 		bl	get_reg_n
 15545              	.LVL1127:
 15546 003a 0146     		mov	r1, r0
 15547 003c 2046     		mov	r0, r4
ARM GAS  /tmp/ccQlyisH.s 			page 440


 15548 003e FFF7FEFF 		bl	swap_reg
 15549              	.LVL1128:
1903:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15550              		.loc 1 1903 2 is_stmt 1 view .LVU4076
1901:src/xeq.c     **** 
 15551              		.loc 1 1901 2 is_stmt 0 view .LVU4077
 15552 0042 6520     		movs	r0, #101
 15553              	.LVL1129:
 15554              	.L1094:
1904:src/xeq.c     **** 		set_was_complex();
 15555              		.loc 1 1904 3 is_stmt 1 view .LVU4078
 15556 0044 FFF7FEFF 		bl	get_reg_n
 15557              	.LVL1130:
 15558 0048 0446     		mov	r4, r0
 15559 004a 681C     		adds	r0, r5, #1
 15560 004c FFF7FEFF 		bl	get_reg_n
 15561              	.LVL1131:
 15562 0050 0146     		mov	r1, r0
 15563 0052 2046     		mov	r0, r4
 15564 0054 FFF7FEFF 		bl	swap_reg
 15565              	.LVL1132:
1905:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 15566              		.loc 1 1905 3 view .LVU4079
 15567              	.LBB2766:
 15568              	.LBI2766:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 15569              		.loc 1 530 13 view .LVU4080
 15570              	.LBB2767:
 531:src/xeq.c     **** }
 15571              		.loc 1 531 2 view .LVU4081
 531:src/xeq.c     **** }
 15572              		.loc 1 531 20 is_stmt 0 view .LVU4082
 15573 0058 0E4B     		ldr	r3, .L1097
 15574              	.LBE2767:
 15575              	.LBE2766:
1907:src/xeq.c     **** #endif
 15576              		.loc 1 1907 2 view .LVU4083
 15577 005a 0F4A     		ldr	r2, .L1097+4
 15578              	.LBB2770:
 15579              	.LBB2768:
 531:src/xeq.c     **** }
 15580              		.loc 1 531 20 view .LVU4084
 15581 005c 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 15582              	.LBE2768:
 15583              	.LBE2770:
1907:src/xeq.c     **** #endif
 15584              		.loc 1 1907 2 view .LVU4085
 15585 005e 1268     		ldr	r2, [r2]
 15586              	.LBB2771:
 15587              	.LBB2769:
 531:src/xeq.c     **** }
 15588              		.loc 1 531 20 view .LVU4086
 15589 0060 0120     		movs	r0, #1
 15590 0062 60F38711 		bfi	r1, r0, #6, #2
 15591 0066 1975     		strb	r1, [r3, #20]
 15592              	.LBE2769:
 15593              	.LBE2771:
ARM GAS  /tmp/ccQlyisH.s 			page 441


1907:src/xeq.c     **** #endif
 15594              		.loc 1 1907 2 is_stmt 1 view .LVU4087
 15595 0068 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 15596 006c 0343     		orrs	r3, r3, r0
 15597 006e 82F8AD37 		strb	r3, [r2, #1965]
1910:src/xeq.c     **** 
 15598              		.loc 1 1910 1 is_stmt 0 view .LVU4088
 15599 0072 70BD     		pop	{r4, r5, r6, pc}
 15600              	.LVL1133:
 15601              	.L1092:
1901:src/xeq.c     **** 
 15602              		.loc 1 1901 2 is_stmt 1 view .LVU4089
 15603 0074 6620     		movs	r0, #102
 15604              	.LVL1134:
1901:src/xeq.c     **** 
 15605              		.loc 1 1901 2 is_stmt 0 view .LVU4090
 15606 0076 FFF7FEFF 		bl	get_reg_n
 15607              	.LVL1135:
1901:src/xeq.c     **** 
 15608              		.loc 1 1901 2 view .LVU4091
 15609 007a 0446     		mov	r4, r0
 15610 007c 2846     		mov	r0, r5
 15611 007e FFF7FEFF 		bl	get_reg_n
 15612              	.LVL1136:
 15613 0082 0146     		mov	r1, r0
 15614 0084 2046     		mov	r0, r4
 15615 0086 FFF7FEFF 		bl	swap_reg
 15616              	.LVL1137:
1903:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15617              		.loc 1 1903 2 is_stmt 1 view .LVU4092
1901:src/xeq.c     **** 
 15618              		.loc 1 1901 2 is_stmt 0 view .LVU4093
 15619 008a 6720     		movs	r0, #103
 15620 008c DAE7     		b	.L1094
 15621              	.LVL1138:
 15622              	.L1096:
1901:src/xeq.c     **** 
 15623              		.loc 1 1901 2 view .LVU4094
 15624 008e 04F15400 		add	r0, r4, #84
 15625 0092 D7E7     		b	.L1094
 15626              	.L1098:
 15627              		.align	2
 15628              	.L1097:
 15629 0094 00000000 		.word	StateWhileOn
 15630 0098 00000000 		.word	main_ram
 15631              		.cfi_endproc
 15632              	.LFE126:
 15634              		.section	.text.cmdview,"ax",%progbits
 15635              		.align	1
 15636              		.p2align 2,,3
 15637              		.global	cmdview
 15638              		.syntax unified
 15639              		.thumb
 15640              		.thumb_func
 15641              		.fpu fpv4-sp-d16
 15643              	cmdview:
 15644              	.LVL1139:
ARM GAS  /tmp/ccQlyisH.s 			page 442


 15645              	.LFB127:
1915:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15646              		.loc 1 1915 46 is_stmt 1 view -0
 15647              		.cfi_startproc
 15648              		@ args = 0, pretend = 0, frame = 0
 15649              		@ frame_needed = 0, uses_anonymous_args = 0
1916:src/xeq.c     **** 
 15650              		.loc 1 1916 2 view .LVU4096
1915:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15651              		.loc 1 1915 46 is_stmt 0 view .LVU4097
 15652 0000 70B5     		push	{r4, r5, r6, lr}
 15653              		.cfi_def_cfa_offset 16
 15654              		.cfi_offset 4, -16
 15655              		.cfi_offset 5, -12
 15656              		.cfi_offset 6, -8
 15657              		.cfi_offset 14, -4
1918:src/xeq.c     **** 	ShowRegister = arg;
 15658              		.loc 1 1918 20 view .LVU4098
 15659 0002 134D     		ldr	r5, .L1105
1919:src/xeq.c     **** 	State2.disp_freeze = 0;
 15660              		.loc 1 1919 15 view .LVU4099
 15661 0004 134A     		ldr	r2, .L1105+4
1918:src/xeq.c     **** 	ShowRegister = arg;
 15662              		.loc 1 1918 20 view .LVU4100
 15663 0006 6B69     		ldr	r3, [r5, #20]
1919:src/xeq.c     **** 	State2.disp_freeze = 0;
 15664              		.loc 1 1919 15 view .LVU4101
 15665 0008 1060     		str	r0, [r2]
1915:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15666              		.loc 1 1915 46 view .LVU4102
 15667 000a 0E46     		mov	r6, r1
 15668              	.LVL1140:
1918:src/xeq.c     **** 	ShowRegister = arg;
 15669              		.loc 1 1918 2 is_stmt 1 view .LVU4103
1919:src/xeq.c     **** 	State2.disp_freeze = 0;
 15670              		.loc 1 1919 2 view .LVU4104
1920:src/xeq.c     **** 	display();
 15671              		.loc 1 1920 2 view .LVU4105
1916:src/xeq.c     **** 
 15672              		.loc 1 1916 41 is_stmt 0 view .LVU4106
 15673 000c A1F18C01 		sub	r1, #140
 15674              	.LVL1141:
1918:src/xeq.c     **** 	ShowRegister = arg;
 15675              		.loc 1 1918 20 view .LVU4107
 15676 0010 23F08053 		bic	r3, r3, #268435456
1916:src/xeq.c     **** 
 15677              		.loc 1 1916 41 view .LVU4108
 15678 0014 B1FA81F1 		clz	r1, r1
 15679 0018 4909     		lsrs	r1, r1, #5
1918:src/xeq.c     **** 	ShowRegister = arg;
 15680              		.loc 1 1918 20 view .LVU4109
 15681 001a 23F0C003 		bic	r3, r3, #192
 15682 001e 43EA8113 		orr	r3, r3, r1, lsl #6
1915:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15683              		.loc 1 1915 46 view .LVU4110
 15684 0022 0446     		mov	r4, r0
1918:src/xeq.c     **** 	ShowRegister = arg;
ARM GAS  /tmp/ccQlyisH.s 			page 443


 15685              		.loc 1 1918 20 view .LVU4111
 15686 0024 6B61     		str	r3, [r5, #20]
1921:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
 15687              		.loc 1 1921 2 is_stmt 1 view .LVU4112
 15688 0026 FFF7FEFF 		bl	display
 15689              	.LVL1142:
1922:src/xeq.c     **** }
 15690              		.loc 1 1922 2 view .LVU4113
1922:src/xeq.c     **** }
 15691              		.loc 1 1922 40 is_stmt 0 view .LVU4114
 15692 002a 8C2E     		cmp	r6, #140
 15693 002c 02D0     		beq	.L1102
1922:src/xeq.c     **** }
 15694              		.loc 1 1922 29 discriminator 2 view .LVU4115
 15695 002e 0A4B     		ldr	r3, .L1105+8
 15696 0030 1B68     		ldr	r3, [r3]
 15697 0032 2BB1     		cbz	r3, .L1104
 15698              	.L1102:
1922:src/xeq.c     **** }
 15699              		.loc 1 1922 21 view .LVU4116
 15700 0034 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 15701 0036 0124     		movs	r4, #1
 15702              	.LVL1143:
1922:src/xeq.c     **** }
 15703              		.loc 1 1922 21 view .LVU4117
 15704 0038 64F30413 		bfi	r3, r4, #4, #1
 15705 003c EB75     		strb	r3, [r5, #23]
1923:src/xeq.c     **** 
 15706              		.loc 1 1923 1 view .LVU4118
 15707 003e 70BD     		pop	{r4, r5, r6, pc}
 15708              	.LVL1144:
 15709              	.L1104:
1922:src/xeq.c     **** }
 15710              		.loc 1 1922 21 discriminator 4 view .LVU4119
 15711 0040 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
1922:src/xeq.c     **** }
 15712              		.loc 1 1922 40 discriminator 4 view .LVU4120
 15713 0042 643C     		subs	r4, r4, #100
 15714              	.LVL1145:
1922:src/xeq.c     **** }
 15715              		.loc 1 1922 40 discriminator 4 view .LVU4121
 15716 0044 18BF     		it	ne
 15717 0046 0124     		movne	r4, #1
 15718              	.LVL1146:
1922:src/xeq.c     **** }
 15719              		.loc 1 1922 21 discriminator 4 view .LVU4122
 15720 0048 64F30413 		bfi	r3, r4, #4, #1
 15721 004c EB75     		strb	r3, [r5, #23]
1923:src/xeq.c     **** 
 15722              		.loc 1 1923 1 discriminator 4 view .LVU4123
 15723 004e 70BD     		pop	{r4, r5, r6, pc}
 15724              	.L1106:
 15725              		.align	2
 15726              	.L1105:
 15727 0050 00000000 		.word	StateWhileOn
 15728 0054 00000000 		.word	ShowRegister
 15729 0058 00000000 		.word	Running
ARM GAS  /tmp/ccQlyisH.s 			page 444


 15730              		.cfi_endproc
 15731              	.LFE127:
 15733              		.section	.text.get_stack_size,"ax",%progbits
 15734              		.align	1
 15735              		.p2align 2,,3
 15736              		.global	get_stack_size
 15737              		.syntax unified
 15738              		.thumb
 15739              		.thumb_func
 15740              		.fpu fpv4-sp-d16
 15742              	get_stack_size:
 15743              	.LVL1147:
 15744              	.LFB128:
1927:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15745              		.loc 1 1927 36 is_stmt 1 view -0
 15746              		.cfi_startproc
 15747              		@ args = 0, pretend = 0, frame = 0
 15748              		@ frame_needed = 0, uses_anonymous_args = 0
1928:src/xeq.c     **** }
 15749              		.loc 1 1928 2 view .LVU4125
 15750              	.LBB2772:
 15751              	.LBI2772:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 15752              		.loc 1 703 5 view .LVU4126
 15753              	.LBB2773:
 704:src/xeq.c     **** 		return 4;
 15754              		.loc 1 704 2 view .LVU4127
 704:src/xeq.c     **** 		return 4;
 15755              		.loc 1 704 8 is_stmt 0 view .LVU4128
 15756 0000 0F4B     		ldr	r3, .L1114
 15757              	.LBE2773:
 15758              	.LBE2772:
1927:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15759              		.loc 1 1927 36 view .LVU4129
 15760 0002 00B5     		push	{lr}
 15761              		.cfi_def_cfa_offset 4
 15762              		.cfi_offset 14, -4
 15763              	.LBB2779:
 15764              	.LBB2776:
 704:src/xeq.c     **** 		return 4;
 15765              		.loc 1 704 8 view .LVU4130
 15766 0004 1B68     		ldr	r3, [r3]
 704:src/xeq.c     **** 		return 4;
 15767              		.loc 1 704 6 view .LVU4131
 15768 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 15769              		.loc 1 704 5 view .LVU4132
 15770 000a 1207     		lsls	r2, r2, #28
 15771              	.LBE2776:
 15772              	.LBE2779:
1927:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15773              		.loc 1 1927 36 view .LVU4133
 15774 000c 83B0     		sub	sp, sp, #12
 15775              		.cfi_def_cfa_offset 16
 15776              	.LBB2780:
 15777              	.LBB2777:
 704:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/ccQlyisH.s 			page 445


 15778              		.loc 1 704 5 view .LVU4134
 15779 000e 13D5     		bpl	.L1109
 15780              	.LBB2774:
 15781              	.LBI2774:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 15782              		.loc 1 182 5 is_stmt 1 view .LVU4135
 15783              	.LBB2775:
 183:src/xeq.c     **** }
 15784              		.loc 1 183 2 view .LVU4136
 183:src/xeq.c     **** }
 15785              		.loc 1 183 9 is_stmt 0 view .LVU4137
 15786 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 15787              	.LBE2775:
 15788              	.LBE2774:
 704:src/xeq.c     **** 		return 4;
 15789              		.loc 1 704 27 view .LVU4138
 15790 0014 9B0B     		lsrs	r3, r3, #14
 15791 0016 032B     		cmp	r3, #3
 15792 0018 09D0     		beq	.L1113
 15793              	.L1111:
 15794 001a 0822     		movs	r2, #8
 15795 001c 0023     		movs	r3, #0
 15796              	.L1108:
 15797              	.LVL1148:
 704:src/xeq.c     **** 		return 4;
 15798              		.loc 1 704 27 view .LVU4139
 15799              	.LBE2777:
 15800              	.LBE2780:
 15801              	.LBB2781:
 15802              	.LBI2781:
1478:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15803              		.loc 1 1478 6 is_stmt 1 view .LVU4140
 15804              	.LBB2782:
1479:src/xeq.c     **** }
 15805              		.loc 1 1479 2 view .LVU4141
 15806 001e 0021     		movs	r1, #0
 15807 0020 0091     		str	r1, [sp]
 15808 0022 6420     		movs	r0, #100
 15809              	.LVL1149:
1479:src/xeq.c     **** }
 15810              		.loc 1 1479 2 is_stmt 0 view .LVU4142
 15811 0024 FFF7FEFF 		bl	set_reg_n_int_sgn
 15812              	.LVL1150:
1479:src/xeq.c     **** }
 15813              		.loc 1 1479 2 view .LVU4143
 15814              	.LBE2782:
 15815              	.LBE2781:
1929:src/xeq.c     **** 
 15816              		.loc 1 1929 1 view .LVU4144
 15817 0028 03B0     		add	sp, sp, #12
 15818              		.cfi_remember_state
 15819              		.cfi_def_cfa_offset 4
 15820              		@ sp needed
 15821 002a 5DF804FB 		ldr	pc, [sp], #4
 15822              	.LVL1151:
 15823              	.L1113:
 15824              		.cfi_restore_state
ARM GAS  /tmp/ccQlyisH.s 			page 446


 15825              	.LBB2783:
 15826              	.LBB2778:
 704:src/xeq.c     **** 		return 4;
 15827              		.loc 1 704 44 view .LVU4145
 15828 002e 054B     		ldr	r3, .L1114+4
 704:src/xeq.c     **** 		return 4;
 15829              		.loc 1 704 41 view .LVU4146
 15830 0030 93F90130 		ldrsb	r3, [r3, #1]
 15831 0034 002B     		cmp	r3, #0
 15832 0036 F0DB     		blt	.L1111
 15833              	.L1109:
 15834 0038 0422     		movs	r2, #4
 15835 003a 0023     		movs	r3, #0
 15836 003c EFE7     		b	.L1108
 15837              	.L1115:
 15838 003e 00BF     		.align	2
 15839              	.L1114:
 15840 0040 00000000 		.word	main_ram
 15841 0044 00000000 		.word	XromParams
 15842              	.LBE2778:
 15843              	.LBE2783:
 15844              		.cfi_endproc
 15845              	.LFE128:
 15847              		.section	.text.get_word_size,"ax",%progbits
 15848              		.align	1
 15849              		.p2align 2,,3
 15850              		.global	get_word_size
 15851              		.syntax unified
 15852              		.thumb
 15853              		.thumb_func
 15854              		.fpu fpv4-sp-d16
 15856              	get_word_size:
 15857              	.LVL1152:
 15858              	.LFB129:
1931:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 15859              		.loc 1 1931 35 is_stmt 1 view -0
 15860              		.cfi_startproc
 15861              		@ args = 0, pretend = 0, frame = 0
 15862              		@ frame_needed = 0, uses_anonymous_args = 0
1932:src/xeq.c     **** }
 15863              		.loc 1 1932 2 view .LVU4148
1931:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 15864              		.loc 1 1931 35 is_stmt 0 view .LVU4149
 15865 0000 00B5     		push	{lr}
 15866              		.cfi_def_cfa_offset 4
 15867              		.cfi_offset 14, -4
 15868 0002 83B0     		sub	sp, sp, #12
 15869              		.cfi_def_cfa_offset 16
1932:src/xeq.c     **** }
 15870              		.loc 1 1932 20 view .LVU4150
 15871 0004 FFF7FEFF 		bl	word_size
 15872              	.LVL1153:
 15873              	.LBB2784:
 15874              	.LBI2784:
1478:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15875              		.loc 1 1478 6 is_stmt 1 view .LVU4151
 15876              	.LBB2785:
ARM GAS  /tmp/ccQlyisH.s 			page 447


1479:src/xeq.c     **** }
 15877              		.loc 1 1479 2 view .LVU4152
 15878 0008 0021     		movs	r1, #0
 15879 000a 0246     		mov	r2, r0
 15880 000c C317     		asrs	r3, r0, #31
 15881 000e 0091     		str	r1, [sp]
 15882 0010 6420     		movs	r0, #100
 15883              	.LVL1154:
1479:src/xeq.c     **** }
 15884              		.loc 1 1479 2 is_stmt 0 view .LVU4153
 15885 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 15886              	.LVL1155:
1479:src/xeq.c     **** }
 15887              		.loc 1 1479 2 view .LVU4154
 15888              	.LBE2785:
 15889              	.LBE2784:
1933:src/xeq.c     **** 
 15890              		.loc 1 1933 1 view .LVU4155
 15891 0016 03B0     		add	sp, sp, #12
 15892              		.cfi_def_cfa_offset 4
 15893              		@ sp needed
 15894 0018 5DF804FB 		ldr	pc, [sp], #4
 15895              		.cfi_endproc
 15896              	.LFE129:
 15898              		.section	.text.get_sign_mode,"ax",%progbits
 15899              		.align	1
 15900              		.p2align 2,,3
 15901              		.global	get_sign_mode
 15902              		.syntax unified
 15903              		.thumb
 15904              		.thumb_func
 15905              		.fpu fpv4-sp-d16
 15907              	get_sign_mode:
 15908              	.LVL1156:
 15909              	.LFB130:
1935:src/xeq.c     **** 	static const unsigned char modes[4] = {
 15910              		.loc 1 1935 35 is_stmt 1 view -0
 15911              		.cfi_startproc
 15912              		@ args = 0, pretend = 0, frame = 0
 15913              		@ frame_needed = 0, uses_anonymous_args = 0
1936:src/xeq.c     **** 		0x02,		// 2's complement
 15914              		.loc 1 1936 2 view .LVU4157
1942:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15915              		.loc 1 1942 2 view .LVU4158
1935:src/xeq.c     **** 	static const unsigned char modes[4] = {
 15916              		.loc 1 1935 35 is_stmt 0 view .LVU4159
 15917 0000 00B5     		push	{lr}
 15918              		.cfi_def_cfa_offset 4
 15919              		.cfi_offset 14, -4
 15920 0002 83B0     		sub	sp, sp, #12
 15921              		.cfi_def_cfa_offset 16
1942:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15922              		.loc 1 1942 37 view .LVU4160
 15923 0004 FFF7FEFF 		bl	int_mode
 15924              	.LVL1157:
1942:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15925              		.loc 1 1942 22 view .LVU4161
ARM GAS  /tmp/ccQlyisH.s 			page 448


 15926 0008 064B     		ldr	r3, .L1120
 15927 000a 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
 15928              	.LVL1158:
1943:src/xeq.c     **** }
 15929              		.loc 1 1943 2 is_stmt 1 view .LVU4162
 15930              	.LBB2786:
 15931              	.LBI2786:
1478:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15932              		.loc 1 1478 6 view .LVU4163
 15933              	.LBB2787:
1479:src/xeq.c     **** }
 15934              		.loc 1 1479 2 view .LVU4164
 15935              	.LBE2787:
 15936              	.LBE2786:
1943:src/xeq.c     **** }
 15937              		.loc 1 1943 2 is_stmt 0 view .LVU4165
 15938 000c 03F00302 		and	r2, r3, #3
 15939 0010 03F08003 		and	r3, r3, #128
 15940              	.LVL1159:
1943:src/xeq.c     **** }
 15941              		.loc 1 1943 2 view .LVU4166
 15942 0014 0093     		str	r3, [sp]
 15943              	.LBB2789:
 15944              	.LBB2788:
1479:src/xeq.c     **** }
 15945              		.loc 1 1479 2 view .LVU4167
 15946 0016 6420     		movs	r0, #100
 15947              	.LVL1160:
1479:src/xeq.c     **** }
 15948              		.loc 1 1479 2 view .LVU4168
 15949 0018 0023     		movs	r3, #0
 15950 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 15951              	.LVL1161:
1479:src/xeq.c     **** }
 15952              		.loc 1 1479 2 view .LVU4169
 15953              	.LBE2788:
 15954              	.LBE2789:
1944:src/xeq.c     **** 
 15955              		.loc 1 1944 1 view .LVU4170
 15956 001e 03B0     		add	sp, sp, #12
 15957              		.cfi_def_cfa_offset 4
 15958              		@ sp needed
 15959 0020 5DF804FB 		ldr	pc, [sp], #4
 15960              	.L1121:
 15961              		.align	2
 15962              	.L1120:
 15963 0024 00000000 		.word	.LANCHOR4
 15964              		.cfi_endproc
 15965              	.LFE130:
 15967              		.section	.text.get_base,"ax",%progbits
 15968              		.align	1
 15969              		.p2align 2,,3
 15970              		.global	get_base
 15971              		.syntax unified
 15972              		.thumb
 15973              		.thumb_func
 15974              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQlyisH.s 			page 449


 15976              	get_base:
 15977              	.LVL1162:
 15978              	.LFB131:
1946:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 15979              		.loc 1 1946 30 is_stmt 1 view -0
 15980              		.cfi_startproc
 15981              		@ args = 0, pretend = 0, frame = 0
 15982              		@ frame_needed = 0, uses_anonymous_args = 0
1947:src/xeq.c     **** }
 15983              		.loc 1 1947 2 view .LVU4172
1946:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 15984              		.loc 1 1946 30 is_stmt 0 view .LVU4173
 15985 0000 00B5     		push	{lr}
 15986              		.cfi_def_cfa_offset 4
 15987              		.cfi_offset 14, -4
 15988 0002 83B0     		sub	sp, sp, #12
 15989              		.cfi_def_cfa_offset 16
1947:src/xeq.c     **** }
 15990              		.loc 1 1947 20 view .LVU4174
 15991 0004 FFF7FEFF 		bl	int_base
 15992              	.LVL1163:
 15993              	.LBB2790:
 15994              	.LBI2790:
1478:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15995              		.loc 1 1478 6 is_stmt 1 view .LVU4175
 15996              	.LBB2791:
1479:src/xeq.c     **** }
 15997              		.loc 1 1479 2 view .LVU4176
 15998 0008 0021     		movs	r1, #0
 15999 000a 0246     		mov	r2, r0
 16000 000c C317     		asrs	r3, r0, #31
 16001 000e 0091     		str	r1, [sp]
 16002 0010 6420     		movs	r0, #100
 16003              	.LVL1164:
1479:src/xeq.c     **** }
 16004              		.loc 1 1479 2 is_stmt 0 view .LVU4177
 16005 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 16006              	.LVL1165:
1479:src/xeq.c     **** }
 16007              		.loc 1 1479 2 view .LVU4178
 16008              	.LBE2791:
 16009              	.LBE2790:
1948:src/xeq.c     **** 
 16010              		.loc 1 1948 1 view .LVU4179
 16011 0016 03B0     		add	sp, sp, #12
 16012              		.cfi_def_cfa_offset 4
 16013              		@ sp needed
 16014 0018 5DF804FB 		ldr	pc, [sp], #4
 16015              		.cfi_endproc
 16016              	.LFE131:
 16018              		.section	.text.DM42_Ticker,"ax",%progbits
 16019              		.align	1
 16020              		.p2align 2,,3
 16021              		.global	DM42_Ticker
 16022              		.syntax unified
 16023              		.thumb
 16024              		.thumb_func
ARM GAS  /tmp/ccQlyisH.s 			page 450


 16025              		.fpu fpv4-sp-d16
 16027              	DM42_Ticker:
 16028              	.LFB132:
1951:src/xeq.c     ****     long int f, t;
 16029              		.loc 1 1951 26 is_stmt 1 view -0
 16030              		.cfi_startproc
 16031              		@ args = 0, pretend = 0, frame = 0
 16032              		@ frame_needed = 0, uses_anonymous_args = 0
1952:src/xeq.c     ****     t = get_rtc_ticks();
 16033              		.loc 1 1952 5 view .LVU4181
1953:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16034              		.loc 1 1953 5 view .LVU4182
1951:src/xeq.c     ****     long int f, t;
 16035              		.loc 1 1951 26 is_stmt 0 view .LVU4183
 16036 0000 08B5     		push	{r3, lr}
 16037              		.cfi_def_cfa_offset 8
 16038              		.cfi_offset 3, -8
 16039              		.cfi_offset 14, -4
1953:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16040              		.loc 1 1953 9 view .LVU4184
 16041 0002 044B     		ldr	r3, .L1126
 16042 0004 9847     		blx	r3
 16043              	.LVL1166:
1954:src/xeq.c     ****     return f;
 16044              		.loc 1 1954 5 is_stmt 1 view .LVU4185
1955:src/xeq.c     ****  }
 16045              		.loc 1 1955 5 view .LVU4186
1954:src/xeq.c     ****     return f;
 16046              		.loc 1 1954 13 is_stmt 0 view .LVU4187
 16047 0006 C0F31300 		ubfx	r0, r0, #0, #20
 16048              	.LVL1167:
1954:src/xeq.c     ****     return f;
 16049              		.loc 1 1954 23 view .LVU4188
 16050 000a 00EB8000 		add	r0, r0, r0, lsl #2
1956:src/xeq.c     **** #endif
 16051              		.loc 1 1956 2 view .LVU4189
 16052 000e C009     		lsrs	r0, r0, #7
 16053 0010 08BD     		pop	{r3, pc}
 16054              	.L1127:
 16055 0012 00BF     		.align	2
 16056              	.L1126:
 16057 0014 B9040008 		.word	134218937
 16058              		.cfi_endproc
 16059              	.LFE132:
 16061              		.section	.text.op_ticks,"ax",%progbits
 16062              		.align	1
 16063              		.p2align 2,,3
 16064              		.global	op_ticks
 16065              		.syntax unified
 16066              		.thumb
 16067              		.thumb_func
 16068              		.fpu fpv4-sp-d16
 16070              	op_ticks:
 16071              	.LVL1168:
 16072              	.LFB133:
1959:src/xeq.c     **** #if !defined(CONSOLE)
 16073              		.loc 1 1959 30 is_stmt 1 view -0
ARM GAS  /tmp/ccQlyisH.s 			page 451


 16074              		.cfi_startproc
 16075              		@ args = 0, pretend = 0, frame = 0
 16076              		@ frame_needed = 0, uses_anonymous_args = 0
1961:src/xeq.c     **** #else 
 16077              		.loc 1 1961 5 view .LVU4191
 16078              	.LBB2792:
 16079              	.LBI2792:
1951:src/xeq.c     ****     long int f, t;
 16080              		.loc 1 1951 11 view .LVU4192
 16081              	.LBB2793:
1952:src/xeq.c     ****     t = get_rtc_ticks();
 16082              		.loc 1 1952 5 view .LVU4193
1953:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16083              		.loc 1 1953 5 view .LVU4194
 16084              	.LBE2793:
 16085              	.LBE2792:
1959:src/xeq.c     **** #if !defined(CONSOLE)
 16086              		.loc 1 1959 30 is_stmt 0 view .LVU4195
 16087 0000 00B5     		push	{lr}
 16088              		.cfi_def_cfa_offset 4
 16089              		.cfi_offset 14, -4
 16090              	.LBB2797:
 16091              	.LBB2794:
1953:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16092              		.loc 1 1953 9 view .LVU4196
 16093 0002 084B     		ldr	r3, .L1130
 16094              	.LBE2794:
 16095              	.LBE2797:
1959:src/xeq.c     **** #if !defined(CONSOLE)
 16096              		.loc 1 1959 30 view .LVU4197
 16097 0004 83B0     		sub	sp, sp, #12
 16098              		.cfi_def_cfa_offset 16
 16099              	.LBB2798:
 16100              	.LBB2795:
1953:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16101              		.loc 1 1953 9 view .LVU4198
 16102 0006 9847     		blx	r3
 16103              	.LVL1169:
1954:src/xeq.c     ****     return f;
 16104              		.loc 1 1954 5 is_stmt 1 view .LVU4199
1955:src/xeq.c     ****  }
 16105              		.loc 1 1955 5 view .LVU4200
1955:src/xeq.c     ****  }
 16106              		.loc 1 1955 5 is_stmt 0 view .LVU4201
 16107              	.LBE2795:
 16108              	.LBE2798:
 16109              	.LBB2799:
 16110              	.LBI2799:
1478:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16111              		.loc 1 1478 6 is_stmt 1 view .LVU4202
 16112              	.LBB2800:
1479:src/xeq.c     **** }
 16113              		.loc 1 1479 2 view .LVU4203
 16114              	.LBE2800:
 16115              	.LBE2799:
 16116              	.LBB2802:
 16117              	.LBB2796:
ARM GAS  /tmp/ccQlyisH.s 			page 452


1954:src/xeq.c     ****     return f;
 16118              		.loc 1 1954 13 is_stmt 0 view .LVU4204
 16119 0008 C0F31300 		ubfx	r0, r0, #0, #20
 16120              	.LVL1170:
1954:src/xeq.c     ****     return f;
 16121              		.loc 1 1954 23 view .LVU4205
 16122 000c 00EB8000 		add	r0, r0, r0, lsl #2
1954:src/xeq.c     ****     return f;
 16123              		.loc 1 1954 7 view .LVU4206
 16124 0010 C209     		lsrs	r2, r0, #7
 16125              	.LBE2796:
 16126              	.LBE2802:
 16127              	.LBB2803:
 16128              	.LBB2801:
1479:src/xeq.c     **** }
 16129              		.loc 1 1479 2 view .LVU4207
 16130 0012 0021     		movs	r1, #0
 16131 0014 D317     		asrs	r3, r2, #31
 16132 0016 0091     		str	r1, [sp]
 16133 0018 6420     		movs	r0, #100
 16134 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 16135              	.LVL1171:
1479:src/xeq.c     **** }
 16136              		.loc 1 1479 2 view .LVU4208
 16137              	.LBE2801:
 16138              	.LBE2803:
1969:src/xeq.c     **** 
 16139              		.loc 1 1969 1 view .LVU4209
 16140 001e 03B0     		add	sp, sp, #12
 16141              		.cfi_def_cfa_offset 4
 16142              		@ sp needed
 16143 0020 5DF804FB 		ldr	pc, [sp], #4
 16144              	.L1131:
 16145              		.align	2
 16146              	.L1130:
 16147 0024 B9040008 		.word	134218937
 16148              		.cfi_endproc
 16149              	.LFE133:
 16151              		.section	.text.op_voltage,"ax",%progbits
 16152              		.align	1
 16153              		.p2align 2,,3
 16154              		.global	op_voltage
 16155              		.syntax unified
 16156              		.thumb
 16157              		.thumb_func
 16158              		.fpu fpv4-sp-d16
 16160              	op_voltage:
 16161              	.LVL1172:
 16162              	.LFB134:
1972:src/xeq.c     **** 	decNumber t, u;
 16163              		.loc 1 1972 32 is_stmt 1 view -0
 16164              		.cfi_startproc
 16165              		@ args = 0, pretend = 0, frame = 72
 16166              		@ frame_needed = 0, uses_anonymous_args = 0
1973:src/xeq.c     **** #ifdef REALBUILD
 16167              		.loc 1 1973 2 view .LVU4211
1977:src/xeq.c     **** 	v = v / 100;
ARM GAS  /tmp/ccQlyisH.s 			page 453


 16168              		.loc 1 1977 2 view .LVU4212
1972:src/xeq.c     **** 	decNumber t, u;
 16169              		.loc 1 1972 32 is_stmt 0 view .LVU4213
 16170 0000 00B5     		push	{lr}
 16171              		.cfi_def_cfa_offset 4
 16172              		.cfi_offset 14, -4
1977:src/xeq.c     **** 	v = v / 100;
 16173              		.loc 1 1977 10 view .LVU4214
 16174 0002 154B     		ldr	r3, .L1136
1972:src/xeq.c     **** 	decNumber t, u;
 16175              		.loc 1 1972 32 view .LVU4215
 16176 0004 95B0     		sub	sp, sp, #84
 16177              		.cfi_def_cfa_offset 88
1977:src/xeq.c     **** 	v = v / 100;
 16178              		.loc 1 1977 10 view .LVU4216
 16179 0006 9847     		blx	r3
 16180              	.LVL1173:
1983:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16181              		.loc 1 1983 6 view .LVU4217
 16182 0008 144B     		ldr	r3, .L1136+4
1978:src/xeq.c     **** #else
 16183              		.loc 1 1978 4 view .LVU4218
 16184 000a 154A     		ldr	r2, .L1136+8
1983:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16185              		.loc 1 1983 6 view .LVU4219
 16186 000c 1B68     		ldr	r3, [r3]
 16187              	.LVL1174:
1978:src/xeq.c     **** #else
 16188              		.loc 1 1978 2 is_stmt 1 view .LVU4220
1983:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16189              		.loc 1 1983 6 is_stmt 0 view .LVU4221
 16190 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1978:src/xeq.c     **** #else
 16191              		.loc 1 1978 4 view .LVU4222
 16192 0012 82FB0012 		smull	r1, r2, r2, r0
1983:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16193              		.loc 1 1983 5 view .LVU4223
 16194 0016 DB07     		lsls	r3, r3, #31
1978:src/xeq.c     **** #else
 16195              		.loc 1 1978 4 view .LVU4224
 16196 0018 4FEAE070 		asr	r0, r0, #31
 16197              	.LVL1175:
1978:src/xeq.c     **** #else
 16198              		.loc 1 1978 4 view .LVU4225
 16199 001c C0EB6212 		rsb	r2, r0, r2, asr #5
 16200              	.LVL1176:
1983:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16201              		.loc 1 1983 2 is_stmt 1 view .LVU4226
1983:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16202              		.loc 1 1983 5 is_stmt 0 view .LVU4227
 16203 0020 08D5     		bpl	.L1133
1984:src/xeq.c     **** 	} else {
 16204              		.loc 1 1984 3 is_stmt 1 view .LVU4228
 16205              	.LVL1177:
 16206              	.LBB2804:
 16207              	.LBI2804:
1478:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
ARM GAS  /tmp/ccQlyisH.s 			page 454


 16208              		.loc 1 1478 6 view .LVU4229
 16209              	.LBB2805:
1479:src/xeq.c     **** }
 16210              		.loc 1 1479 2 view .LVU4230
 16211 0022 0023     		movs	r3, #0
 16212 0024 0093     		str	r3, [sp]
 16213 0026 6420     		movs	r0, #100
 16214 0028 D317     		asrs	r3, r2, #31
 16215 002a FFF7FEFF 		bl	set_reg_n_int_sgn
 16216              	.LVL1178:
1479:src/xeq.c     **** }
 16217              		.loc 1 1479 2 is_stmt 0 view .LVU4231
 16218              	.LBE2805:
 16219              	.LBE2804:
1990:src/xeq.c     **** 
 16220              		.loc 1 1990 1 view .LVU4232
 16221 002e 15B0     		add	sp, sp, #84
 16222              		.cfi_remember_state
 16223              		.cfi_def_cfa_offset 4
 16224              		@ sp needed
 16225 0030 5DF804FB 		ldr	pc, [sp], #4
 16226              	.LVL1179:
 16227              	.L1133:
 16228              		.cfi_restore_state
1986:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
 16229              		.loc 1 1986 3 is_stmt 1 view .LVU4233
 16230 0034 D317     		asrs	r3, r2, #31
 16231 0036 02A8     		add	r0, sp, #8
 16232 0038 FFF7FEFF 		bl	ullint_to_dn
 16233              	.LVL1180:
1987:src/xeq.c     **** 		setX(&u);
 16234              		.loc 1 1987 3 view .LVU4234
 16235 003c 02A9     		add	r1, sp, #8
 16236 003e 4FF0FF32 		mov	r2, #-1
 16237 0042 0BA8     		add	r0, sp, #44
 16238 0044 FFF7FEFF 		bl	dn_mulpow10
 16239              	.LVL1181:
1988:src/xeq.c     **** 	}
 16240              		.loc 1 1988 3 view .LVU4235
 16241              	.LBB2806:
 16242              	.LBI2806:
 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 16243              		.loc 1 819 6 view .LVU4236
 16244              	.LBB2807:
 820:src/xeq.c     **** }
 16245              		.loc 1 820 2 view .LVU4237
 16246 0048 0BA9     		add	r1, sp, #44
 16247              	.LVL1182:
 820:src/xeq.c     **** }
 16248              		.loc 1 820 2 is_stmt 0 view .LVU4238
 16249 004a 6420     		movs	r0, #100
 16250 004c FFF7FEFF 		bl	setRegister
 16251              	.LVL1183:
 820:src/xeq.c     **** }
 16252              		.loc 1 820 2 view .LVU4239
 16253              	.LBE2807:
 16254              	.LBE2806:
ARM GAS  /tmp/ccQlyisH.s 			page 455


1990:src/xeq.c     **** 
 16255              		.loc 1 1990 1 view .LVU4240
 16256 0050 15B0     		add	sp, sp, #84
 16257              		.cfi_def_cfa_offset 4
 16258              		@ sp needed
 16259 0052 5DF804FB 		ldr	pc, [sp], #4
 16260              	.L1137:
 16261 0056 00BF     		.align	2
 16262              	.L1136:
 16263 0058 F1020008 		.word	134218481
 16264 005c 00000000 		.word	main_ram
 16265 0060 1F85EB51 		.word	1374389535
 16266              		.cfi_endproc
 16267              	.LFE134:
 16269              		.section	.text.free_mem,"ax",%progbits
 16270              		.align	1
 16271              		.p2align 2,,3
 16272              		.global	free_mem
 16273              		.syntax unified
 16274              		.thumb
 16275              		.thumb_func
 16276              		.fpu fpv4-sp-d16
 16278              	free_mem:
 16279              	.LFB135:
1995:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 16280              		.loc 1 1995 20 is_stmt 1 view -0
 16281              		.cfi_startproc
 16282              		@ args = 0, pretend = 0, frame = 0
 16283              		@ frame_needed = 0, uses_anonymous_args = 0
 16284              		@ link register save eliminated.
1996:src/xeq.c     **** }
 16285              		.loc 1 1996 2 view .LVU4242
1996:src/xeq.c     **** }
 16286              		.loc 1 1996 22 is_stmt 0 view .LVU4243
 16287 0000 034A     		ldr	r2, .L1139
1996:src/xeq.c     **** }
 16288              		.loc 1 1996 20 view .LVU4244
 16289 0002 044B     		ldr	r3, .L1139+4
1996:src/xeq.c     **** }
 16290              		.loc 1 1996 22 view .LVU4245
 16291 0004 1268     		ldr	r2, [r2]
1996:src/xeq.c     **** }
 16292              		.loc 1 1996 20 view .LVU4246
 16293 0006 1B68     		ldr	r3, [r3]
1996:src/xeq.c     **** }
 16294              		.loc 1 1996 22 view .LVU4247
 16295 0008 B2F9E207 		ldrsh	r0, [r2, #2018]
1997:src/xeq.c     **** 
 16296              		.loc 1 1997 1 view .LVU4248
 16297 000c 1844     		add	r0, r0, r3
 16298 000e 7047     		bx	lr
 16299              	.L1140:
 16300              		.align	2
 16301              	.L1139:
 16302 0010 00000000 		.word	main_ram
 16303 0014 00000000 		.word	RetStkSize
 16304              		.cfi_endproc
ARM GAS  /tmp/ccQlyisH.s 			page 456


 16305              	.LFE135:
 16307              		.section	.text.free_flash,"ax",%progbits
 16308              		.align	1
 16309              		.p2align 2,,3
 16310              		.global	free_flash
 16311              		.syntax unified
 16312              		.thumb
 16313              		.thumb_func
 16314              		.fpu fpv4-sp-d16
 16316              	free_flash:
 16317              	.LFB136:
1999:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 16318              		.loc 1 1999 22 is_stmt 1 view -0
 16319              		.cfi_startproc
 16320              		@ args = 0, pretend = 0, frame = 0
 16321              		@ frame_needed = 0, uses_anonymous_args = 0
 16322              		@ link register save eliminated.
2000:src/xeq.c     **** }
 16323              		.loc 1 2000 2 view .LVU4250
2000:src/xeq.c     **** }
 16324              		.loc 1 2000 38 is_stmt 0 view .LVU4251
 16325 0000 034B     		ldr	r3, .L1142
 16326 0002 1B68     		ldr	r3, [r3]
 16327 0004 5888     		ldrh	r0, [r3, #2]
2001:src/xeq.c     **** 
 16328              		.loc 1 2001 1 view .LVU4252
 16329 0006 C0F5FF50 		rsb	r0, r0, #8160
 16330 000a 1E30     		adds	r0, r0, #30
 16331 000c 7047     		bx	lr
 16332              	.L1143:
 16333 000e 00BF     		.align	2
 16334              	.L1142:
 16335 0010 00000000 		.word	library_ram
 16336              		.cfi_endproc
 16337              	.LFE136:
 16339              		.section	.text.get_mem,"ax",%progbits
 16340              		.align	1
 16341              		.p2align 2,,3
 16342              		.global	get_mem
 16343              		.syntax unified
 16344              		.thumb
 16345              		.thumb_func
 16346              		.fpu fpv4-sp-d16
 16348              	get_mem:
 16349              	.LVL1184:
 16350              	.LFB137:
2003:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16351              		.loc 1 2003 29 is_stmt 1 view -0
 16352              		.cfi_startproc
 16353              		@ args = 0, pretend = 0, frame = 0
 16354              		@ frame_needed = 0, uses_anonymous_args = 0
2004:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16355              		.loc 1 2004 2 view .LVU4254
2003:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16356              		.loc 1 2003 29 is_stmt 0 view .LVU4255
 16357 0000 00B5     		push	{lr}
 16358              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccQlyisH.s 			page 457


 16359              		.cfi_offset 14, -4
2004:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16360              		.loc 1 2004 2 view .LVU4256
 16361 0002 A928     		cmp	r0, #169
2003:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16362              		.loc 1 2003 29 view .LVU4257
 16363 0004 83B0     		sub	sp, sp, #12
 16364              		.cfi_def_cfa_offset 16
2004:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16365              		.loc 1 2004 2 view .LVU4258
 16366 0006 23D0     		beq	.L1153
2004:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16367              		.loc 1 2004 2 discriminator 2 view .LVU4259
 16368 0008 AA28     		cmp	r0, #170
 16369 000a 18D0     		beq	.L1154
2004:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16370              		.loc 1 2004 2 discriminator 5 view .LVU4260
 16371 000c AC28     		cmp	r0, #172
 16372 000e 3CD0     		beq	.L1155
 16373              	.LBB2808:
 16374              	.LBI2808:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 16375              		.loc 1 250 14 is_stmt 1 view .LVU4261
 16376              	.LBE2808:
 251:src/xeq.c     **** }
 16377              		.loc 1 251 2 view .LVU4262
 16378              	.LVL1185:
 16379              	.LBB2817:
 16380              	.LBB2809:
 16381              	.LBI2809:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 16382              		.loc 1 238 14 view .LVU4263
 16383              	.LBB2810:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 16384              		.loc 1 239 2 view .LVU4264
 16385              	.LBB2811:
 16386              	.LBI2811:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 16387              		.loc 1 1087 5 view .LVU4265
 16388              	.LBB2812:
1088:src/xeq.c     **** }
 16389              		.loc 1 1088 2 view .LVU4266
1088:src/xeq.c     **** }
 16390              		.loc 1 1088 12 is_stmt 0 view .LVU4267
 16391 0010 224B     		ldr	r3, .L1157
 16392 0012 1A68     		ldr	r2, [r3]
1088:src/xeq.c     **** }
 16393              		.loc 1 1088 24 view .LVU4268
 16394 0014 B2F8E817 		ldrh	r1, [r2, #2024]
 16395              	.LBE2812:
 16396              	.LBE2811:
 16397              	.LBB2814:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16398              		.loc 1 240 24 view .LVU4269
 16399 0018 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 16400              	.LBE2814:
 16401              	.LBB2815:
ARM GAS  /tmp/ccQlyisH.s 			page 458


 16402              	.LBB2813:
1088:src/xeq.c     **** }
 16403              		.loc 1 1088 24 view .LVU4270
 16404 001c 44F20103 		movw	r3, #16385
 16405              	.LBE2813:
 16406              	.LBE2815:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 16407              		.loc 1 239 5 view .LVU4271
 16408 0020 0B40     		ands	r3, r3, r1
 16409 0022 B3F5804F 		cmp	r3, #16384
 16410              	.LBB2816:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16411              		.loc 1 240 3 is_stmt 1 view .LVU4272
 16412              	.LVL1186:
 241:src/xeq.c     **** 	}
 16413              		.loc 1 241 3 view .LVU4273
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16414              		.loc 1 240 13 is_stmt 0 view .LVU4274
 16415 0026 04BF     		itt	eq
 16416 0028 0C3A     		subeq	r2, r2, #12
 16417              	.LVL1187:
 241:src/xeq.c     **** 	}
 16418              		.loc 1 241 67 view .LVU4275
 16419 002a 5210     		asreq	r2, r2, #1
 16420              	.LBE2816:
 244:src/xeq.c     **** }
 16421              		.loc 1 244 3 is_stmt 1 view .LVU4276
 16422 002c 0023     		movs	r3, #0
 16423              	.LVL1188:
 16424              	.L1146:
 244:src/xeq.c     **** }
 16425              		.loc 1 244 3 is_stmt 0 view .LVU4277
 16426              	.LBE2810:
 16427              	.LBE2809:
 16428              	.LBE2817:
 16429              	.LBB2818:
 16430              	.LBI2818:
1478:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16431              		.loc 1 1478 6 is_stmt 1 discriminator 10 view .LVU4278
 16432              	.LBB2819:
1479:src/xeq.c     **** }
 16433              		.loc 1 1479 2 discriminator 10 view .LVU4279
 16434 002e 0021     		movs	r1, #0
 16435 0030 0091     		str	r1, [sp]
 16436 0032 6420     		movs	r0, #100
 16437 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 16438              	.LVL1189:
1479:src/xeq.c     **** }
 16439              		.loc 1 1479 2 is_stmt 0 discriminator 10 view .LVU4280
 16440              	.LBE2819:
 16441              	.LBE2818:
2009:src/xeq.c     **** 
 16442              		.loc 1 2009 1 discriminator 10 view .LVU4281
 16443 0038 03B0     		add	sp, sp, #12
 16444              		.cfi_remember_state
 16445              		.cfi_def_cfa_offset 4
 16446              		@ sp needed
ARM GAS  /tmp/ccQlyisH.s 			page 459


 16447 003a 5DF804FB 		ldr	pc, [sp], #4
 16448              	.LVL1190:
 16449              	.L1154:
 16450              		.cfi_restore_state
 16451              	.LBB2820:
 16452              	.LBI2820:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 16453              		.loc 1 230 5 is_stmt 1 view .LVU4282
 16454              	.LBE2820:
 231:src/xeq.c     **** }
 16455              		.loc 1 231 2 view .LVU4283
 16456              	.LBB2841:
 16457              	.LBB2821:
 16458              	.LBI2821:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 16459              		.loc 1 222 5 view .LVU4284
 16460              	.LBB2822:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16461              		.loc 1 223 2 view .LVU4285
 16462              	.LBB2823:
 16463              	.LBI2823:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 16464              		.loc 1 1087 5 view .LVU4286
 16465              	.LBB2824:
1088:src/xeq.c     **** }
 16466              		.loc 1 1088 2 view .LVU4287
1088:src/xeq.c     **** }
 16467              		.loc 1 1088 12 is_stmt 0 view .LVU4288
 16468 003e 174B     		ldr	r3, .L1157
 16469 0040 1B68     		ldr	r3, [r3]
 16470              	.LVL1191:
1088:src/xeq.c     **** }
 16471              		.loc 1 1088 12 view .LVU4289
 16472              	.LBE2824:
 16473              	.LBE2823:
 224:src/xeq.c     **** }
 16474              		.loc 1 224 2 is_stmt 1 view .LVU4290
 16475              	.LBB2827:
 16476              	.LBI2827:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 16477              		.loc 1 214 5 view .LVU4291
 16478              	.LBB2828:
 215:src/xeq.c     **** }
 16479              		.loc 1 215 2 view .LVU4292
 215:src/xeq.c     **** }
 16480              		.loc 1 215 9 is_stmt 0 view .LVU4293
 16481 0042 B3F9DE27 		ldrsh	r2, [r3, #2014]
 215:src/xeq.c     **** }
 16482              		.loc 1 215 57 view .LVU4294
 16483 0046 002A     		cmp	r2, #0
 16484 0048 0BDB     		blt	.L1156
 16485 004a 0022     		movs	r2, #0
 16486 004c 0023     		movs	r3, #0
 16487              	.LVL1192:
 215:src/xeq.c     **** }
 16488              		.loc 1 215 57 view .LVU4295
 16489 004e EEE7     		b	.L1146
ARM GAS  /tmp/ccQlyisH.s 			page 460


 16490              	.LVL1193:
 16491              	.L1153:
 215:src/xeq.c     **** }
 16492              		.loc 1 215 57 view .LVU4296
 16493              	.LBE2828:
 16494              	.LBE2827:
 16495              	.LBE2822:
 16496              	.LBE2821:
 16497              	.LBE2841:
 16498              	.LBB2842:
 16499              	.LBI2842:
1995:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 16500              		.loc 1 1995 5 is_stmt 1 view .LVU4297
 16501              	.LBB2843:
1996:src/xeq.c     **** }
 16502              		.loc 1 1996 2 view .LVU4298
1996:src/xeq.c     **** }
 16503              		.loc 1 1996 22 is_stmt 0 view .LVU4299
 16504 0050 124A     		ldr	r2, .L1157
1996:src/xeq.c     **** }
 16505              		.loc 1 1996 20 view .LVU4300
 16506 0052 134B     		ldr	r3, .L1157+4
1996:src/xeq.c     **** }
 16507              		.loc 1 1996 22 view .LVU4301
 16508 0054 1268     		ldr	r2, [r2]
1996:src/xeq.c     **** }
 16509              		.loc 1 1996 20 view .LVU4302
 16510 0056 1B68     		ldr	r3, [r3]
1996:src/xeq.c     **** }
 16511              		.loc 1 1996 22 view .LVU4303
 16512 0058 B2F9E227 		ldrsh	r2, [r2, #2018]
1996:src/xeq.c     **** }
 16513              		.loc 1 1996 20 view .LVU4304
 16514 005c 1A44     		add	r2, r2, r3
 16515 005e 0023     		movs	r3, #0
 16516              	.LBE2843:
 16517              	.LBE2842:
 16518 0060 E5E7     		b	.L1146
 16519              	.LVL1194:
 16520              	.L1156:
 16521              	.LBB2844:
 16522              	.LBB2840:
 16523              	.LBB2839:
 16524              	.LBB2833:
 16525              	.LBB2825:
1088:src/xeq.c     **** }
 16526              		.loc 1 1088 24 view .LVU4305
 16527 0062 B3F8E807 		ldrh	r0, [r3, #2024]
 16528              	.LVL1195:
1088:src/xeq.c     **** }
 16529              		.loc 1 1088 24 view .LVU4306
 16530              	.LBE2825:
 16531              	.LBE2833:
 16532              	.LBB2834:
 16533              	.LBB2829:
 215:src/xeq.c     **** }
 16534              		.loc 1 215 25 view .LVU4307
ARM GAS  /tmp/ccQlyisH.s 			page 461


 16535 0066 0F49     		ldr	r1, .L1157+8
 16536              	.LBE2829:
 16537              	.LBE2834:
 16538              	.LBB2835:
 16539              	.LBB2826:
1088:src/xeq.c     **** }
 16540              		.loc 1 1088 24 view .LVU4308
 16541 0068 44F20103 		movw	r3, #16385
 16542              	.LVL1196:
1088:src/xeq.c     **** }
 16543              		.loc 1 1088 24 view .LVU4309
 16544              	.LBE2826:
 16545              	.LBE2835:
 16546              	.LBB2836:
 16547              	.LBB2830:
 215:src/xeq.c     **** }
 16548              		.loc 1 215 25 view .LVU4310
 16549 006c 0968     		ldr	r1, [r1]
 16550              	.LBE2830:
 16551              	.LBE2836:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16552              		.loc 1 223 73 view .LVU4311
 16553 006e 0340     		ands	r3, r3, r0
 16554 0070 A3F58043 		sub	r3, r3, #16384
 16555              	.LBB2837:
 16556              	.LBB2831:
 215:src/xeq.c     **** }
 16557              		.loc 1 215 57 view .LVU4312
 16558 0074 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 16559              	.LBE2831:
 16560              	.LBE2837:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16561              		.loc 1 223 73 view .LVU4313
 16562 0078 B3FA83F3 		clz	r3, r3
 16563 007c 5B09     		lsrs	r3, r3, #5
 16564 007e 0233     		adds	r3, r3, #2
 16565              	.LBB2838:
 16566              	.LBB2832:
 215:src/xeq.c     **** }
 16567              		.loc 1 215 57 view .LVU4314
 16568 0080 C2F30B02 		ubfx	r2, r2, #0, #12
 16569 0084 1A41     		asrs	r2, r2, r3
 16570 0086 D317     		asrs	r3, r2, #31
 16571 0088 D1E7     		b	.L1146
 16572              	.LVL1197:
 16573              	.L1155:
 215:src/xeq.c     **** }
 16574              		.loc 1 215 57 view .LVU4315
 16575              	.LBE2832:
 16576              	.LBE2838:
 16577              	.LBE2839:
 16578              	.LBE2840:
 16579              	.LBE2844:
 16580              	.LBB2845:
 16581              	.LBI2845:
1999:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 16582              		.loc 1 1999 5 is_stmt 1 view .LVU4316
ARM GAS  /tmp/ccQlyisH.s 			page 462


 16583              	.LBB2846:
2000:src/xeq.c     **** }
 16584              		.loc 1 2000 2 view .LVU4317
2000:src/xeq.c     **** }
 16585              		.loc 1 2000 38 is_stmt 0 view .LVU4318
 16586 008a 074B     		ldr	r3, .L1157+12
 16587 008c 1B68     		ldr	r3, [r3]
 16588 008e 5A88     		ldrh	r2, [r3, #2]
2000:src/xeq.c     **** }
 16589              		.loc 1 2000 27 view .LVU4319
 16590 0090 C2F5FF52 		rsb	r2, r2, #8160
 16591 0094 1E32     		adds	r2, r2, #30
 16592 0096 0023     		movs	r3, #0
 16593              	.LBE2846:
 16594              	.LBE2845:
 16595 0098 C9E7     		b	.L1146
 16596              	.L1158:
 16597 009a 00BF     		.align	2
 16598              	.L1157:
 16599 009c 00000000 		.word	main_ram
 16600 00a0 00000000 		.word	RetStkSize
 16601 00a4 00000000 		.word	RetStk
 16602 00a8 00000000 		.word	library_ram
 16603              		.cfi_endproc
 16604              	.LFE137:
 16606              		.section	.text.cmdputkey,"ax",%progbits
 16607              		.align	1
 16608              		.p2align 2,,3
 16609              		.global	cmdputkey
 16610              		.syntax unified
 16611              		.thumb
 16612              		.thumb_func
 16613              		.fpu fpv4-sp-d16
 16615              	cmdputkey:
 16616              	.LVL1198:
 16617              	.LFB140:
2044:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16618              		.loc 1 2044 1 is_stmt 1 view -0
 16619              		.cfi_startproc
 16620              		@ args = 0, pretend = 0, frame = 0
 16621              		@ frame_needed = 0, uses_anonymous_args = 0
2045:src/xeq.c     **** 
 16622              		.loc 1 2045 2 view .LVU4321
2044:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16623              		.loc 1 2044 1 is_stmt 0 view .LVU4322
 16624 0000 10B5     		push	{r4, lr}
 16625              		.cfi_def_cfa_offset 8
 16626              		.cfi_offset 4, -8
 16627              		.cfi_offset 14, -4
2045:src/xeq.c     **** 
 16628              		.loc 1 2045 16 view .LVU4323
 16629 0002 FFF7FEFF 		bl	get_keycode_from_reg
 16630              	.LVL1199:
2047:src/xeq.c     **** 		set_running_off();
 16631              		.loc 1 2047 2 is_stmt 1 view .LVU4324
2047:src/xeq.c     **** 		set_running_off();
 16632              		.loc 1 2047 5 is_stmt 0 view .LVU4325
ARM GAS  /tmp/ccQlyisH.s 			page 463


 16633 0006 041E     		subs	r4, r0, #0
 16634 0008 00DA     		bge	.L1162
2051:src/xeq.c     **** 
 16635              		.loc 1 2051 1 view .LVU4326
 16636 000a 10BD     		pop	{r4, pc}
 16637              	.L1162:
2048:src/xeq.c     **** 		put_key(c);
 16638              		.loc 1 2048 3 is_stmt 1 view .LVU4327
 16639              	.LBB2847:
 16640              	.LBI2847:
5776:src/xeq.c     **** 	set_running_off_sst();
 16641              		.loc 1 5776 6 view .LVU4328
 16642              	.LBB2848:
5777:src/xeq.c     **** 	State.entryp = 0;
 16643              		.loc 1 5777 2 view .LVU4329
 16644              	.LBB2849:
 16645              	.LBI2849:
5768:src/xeq.c     **** 	Running = 0;
 16646              		.loc 1 5768 6 view .LVU4330
 16647              	.LBB2850:
5769:src/xeq.c     **** }
 16648              		.loc 1 5769 2 view .LVU4331
 16649              	.LBE2850:
 16650              	.LBE2849:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 16651              		.loc 1 5778 15 is_stmt 0 view .LVU4332
 16652 000c 094B     		ldr	r3, .L1163
 16653              	.LBB2853:
 16654              	.LBB2851:
5769:src/xeq.c     **** }
 16655              		.loc 1 5769 10 view .LVU4333
 16656 000e 0A4A     		ldr	r2, .L1163+4
 16657              	.LBE2851:
 16658              	.LBE2853:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 16659              		.loc 1 5778 15 view .LVU4334
 16660 0010 1B68     		ldr	r3, [r3]
 16661              	.LBB2854:
 16662              	.LBB2852:
5769:src/xeq.c     **** }
 16663              		.loc 1 5769 10 view .LVU4335
 16664 0012 0021     		movs	r1, #0
 16665 0014 1160     		str	r1, [r2]
 16666              	.LBE2852:
 16667              	.LBE2854:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 16668              		.loc 1 5778 2 is_stmt 1 view .LVU4336
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 16669              		.loc 1 5778 15 is_stmt 0 view .LVU4337
 16670 0016 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 16671 001a 61F30412 		bfi	r2, r1, #4, #1
 16672              		.loc 1 5779 2 view .LVU4338
 16673 001e 8A20     		movs	r0, #138
 16674              	.LVL1200:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 16675              		.loc 1 5778 15 view .LVU4339
 16676 0020 83F8DD27 		strb	r2, [r3, #2013]
ARM GAS  /tmp/ccQlyisH.s 			page 464


 16677              		.loc 1 5779 2 is_stmt 1 view .LVU4340
 16678 0024 FFF7FEFF 		bl	dot
 16679              	.LVL1201:
 16680              	.LBE2848:
 16681              	.LBE2847:
2049:src/xeq.c     **** 	}
 16682              		.loc 1 2049 3 view .LVU4341
 16683 0028 2046     		mov	r0, r4
2051:src/xeq.c     **** 
 16684              		.loc 1 2051 1 is_stmt 0 view .LVU4342
 16685 002a BDE81040 		pop	{r4, lr}
 16686              		.cfi_restore 14
 16687              		.cfi_restore 4
 16688              		.cfi_def_cfa_offset 0
 16689              	.LVL1202:
2049:src/xeq.c     **** 	}
 16690              		.loc 1 2049 3 view .LVU4343
 16691 002e FFF7FEBF 		b	put_key
 16692              	.LVL1203:
 16693              	.L1164:
2049:src/xeq.c     **** 	}
 16694              		.loc 1 2049 3 view .LVU4344
 16695 0032 00BF     		.align	2
 16696              	.L1163:
 16697 0034 00000000 		.word	main_ram
 16698 0038 00000000 		.word	Running
 16699              		.cfi_endproc
 16700              	.LFE140:
 16702              		.section	.text.cmdkeytype,"ax",%progbits
 16703              		.align	1
 16704              		.p2align 2,,3
 16705              		.global	cmdkeytype
 16706              		.syntax unified
 16707              		.thumb
 16708              		.thumb_func
 16709              		.fpu fpv4-sp-d16
 16711              	cmdkeytype:
 16712              	.LVL1204:
 16713              	.LFB141:
2059:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16714              		.loc 1 2059 1 is_stmt 1 view -0
 16715              		.cfi_startproc
 16716              		@ args = 0, pretend = 0, frame = 48
 16717              		@ frame_needed = 0, uses_anonymous_args = 0
2060:src/xeq.c     **** 	if ( c >= 0 ) {
 16718              		.loc 1 2060 2 view .LVU4346
2059:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16719              		.loc 1 2059 1 is_stmt 0 view .LVU4347
 16720 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 16721              		.cfi_def_cfa_offset 20
 16722              		.cfi_offset 4, -20
 16723              		.cfi_offset 5, -16
 16724              		.cfi_offset 6, -12
 16725              		.cfi_offset 7, -8
 16726              		.cfi_offset 14, -4
 16727 0002 8FB0     		sub	sp, sp, #60
 16728              		.cfi_def_cfa_offset 80
ARM GAS  /tmp/ccQlyisH.s 			page 465


2060:src/xeq.c     **** 	if ( c >= 0 ) {
 16729              		.loc 1 2060 16 view .LVU4348
 16730 0004 FFF7FEFF 		bl	get_keycode_from_reg
 16731              	.LVL1205:
2061:src/xeq.c     **** 		const char types[] = {
 16732              		.loc 1 2061 2 is_stmt 1 view .LVU4349
2061:src/xeq.c     **** 		const char types[] = {
 16733              		.loc 1 2061 5 is_stmt 0 view .LVU4350
 16734 0008 061E     		subs	r6, r0, #0
 16735 000a 17DB     		blt	.L1165
 16736              	.LBB2855:
2062:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16737              		.loc 1 2062 3 is_stmt 1 view .LVU4351
2062:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16738              		.loc 1 2062 14 is_stmt 0 view .LVU4352
 16739 000c 0E4D     		ldr	r5, .L1173
 16740              	.LBB2856:
 16741              	.LBB2857:
 16742              	.LBB2858:
 16743              	.LBB2859:
 735:src/xeq.c     **** }
 16744              		.loc 1 735 15 view .LVU4353
 16745 000e 0F4F     		ldr	r7, .L1173+4
 16746              	.LBE2859:
 16747              	.LBE2858:
 16748              	.LBE2857:
 16749              	.LBE2856:
2062:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16750              		.loc 1 2062 14 view .LVU4354
 16751 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 16752              	.LVL1206:
2062:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16753              		.loc 1 2062 14 view .LVU4355
 16754 0012 03AC     		add	r4, sp, #12
 16755 0014 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 16756 0016 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 16757 0018 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 16758 001a 95E80700 		ldm	r5, {r0, r1, r2}
 16759              	.LBB2868:
 16760              	.LBB2864:
 16761              	.LBB2862:
 16762              	.LBB2860:
 735:src/xeq.c     **** }
 16763              		.loc 1 735 15 view .LVU4356
 16764 001e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 16765              	.LBE2860:
 16766              	.LBE2862:
 16767              	.LBE2864:
 16768              	.LBE2868:
2062:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16769              		.loc 1 2062 14 view .LVU4357
 16770 0020 03C4     		stmia	r4!, {r0, r1}
 16771              	.LBB2869:
 16772              	.LBB2865:
 739:src/xeq.c     **** 		lift();
 16773              		.loc 1 739 5 view .LVU4358
 16774 0022 5B06     		lsls	r3, r3, #25
ARM GAS  /tmp/ccQlyisH.s 			page 466


 16775              	.LBE2865:
 16776              	.LBE2869:
2062:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16777              		.loc 1 2062 14 view .LVU4359
 16778 0024 2270     		strb	r2, [r4]
2070:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
 16779              		.loc 1 2070 3 is_stmt 1 view .LVU4360
 16780              	.LBB2870:
 16781              	.LBI2856:
 738:src/xeq.c     **** 	if (get_lift())
 16782              		.loc 1 738 6 view .LVU4361
 16783              	.LBB2866:
 739:src/xeq.c     **** 		lift();
 16784              		.loc 1 739 2 view .LVU4362
 16785              	.LBB2863:
 16786              	.LBI2858:
 734:src/xeq.c     **** 	return State2.state_lift;
 16787              		.loc 1 734 12 view .LVU4363
 16788              	.LBB2861:
 735:src/xeq.c     **** }
 16789              		.loc 1 735 2 view .LVU4364
 16790              	.LBE2861:
 16791              	.LBE2863:
 739:src/xeq.c     **** 		lift();
 16792              		.loc 1 739 5 is_stmt 0 view .LVU4365
 16793 0026 0BD4     		bmi	.L1172
 16794              	.L1167:
 16795              	.LBE2866:
 16796              	.LBE2870:
2071:src/xeq.c     **** 	}
 16797              		.loc 1 2071 3 is_stmt 1 view .LVU4366
 16798              	.LVL1207:
 16799              	.LBB2871:
 16800              	.LBI2871:
1478:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16801              		.loc 1 1478 6 view .LVU4367
 16802              	.LBB2872:
1479:src/xeq.c     **** }
 16803              		.loc 1 1479 2 view .LVU4368
 16804              	.LBE2872:
 16805              	.LBE2871:
2071:src/xeq.c     **** 	}
 16806              		.loc 1 2071 21 is_stmt 0 view .LVU4369
 16807 0028 0EAB     		add	r3, sp, #56
 16808 002a 9819     		adds	r0, r3, r6
 16809              	.LBB2874:
 16810              	.LBB2873:
1479:src/xeq.c     **** }
 16811              		.loc 1 1479 2 view .LVU4370
 16812 002c 0021     		movs	r1, #0
 16813 002e 10F82C2C 		ldrb	r2, [r0, #-44]	@ zero_extendqisi2
 16814 0032 0091     		str	r1, [sp]
 16815              	.LVL1208:
1479:src/xeq.c     **** }
 16816              		.loc 1 1479 2 view .LVU4371
 16817 0034 0023     		movs	r3, #0
 16818 0036 6420     		movs	r0, #100
ARM GAS  /tmp/ccQlyisH.s 			page 467


 16819 0038 FFF7FEFF 		bl	set_reg_n_int_sgn
 16820              	.LVL1209:
 16821              	.L1165:
1479:src/xeq.c     **** }
 16822              		.loc 1 1479 2 view .LVU4372
 16823              	.LBE2873:
 16824              	.LBE2874:
 16825              	.LBE2855:
2073:src/xeq.c     **** 
 16826              		.loc 1 2073 1 view .LVU4373
 16827 003c 0FB0     		add	sp, sp, #60
 16828              		.cfi_remember_state
 16829              		.cfi_def_cfa_offset 20
 16830              		@ sp needed
 16831 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 16832              	.LVL1210:
 16833              	.L1172:
 16834              		.cfi_restore_state
 16835              	.LBB2876:
 16836              	.LBB2875:
 16837              	.LBB2867:
 740:src/xeq.c     **** }
 16838              		.loc 1 740 3 is_stmt 1 view .LVU4374
 16839 0040 FFF7FEFF 		bl	lift
 16840              	.LVL1211:
 16841 0044 F0E7     		b	.L1167
 16842              	.L1174:
 16843 0046 00BF     		.align	2
 16844              	.L1173:
 16845 0048 00000000 		.word	.LANCHOR5
 16846 004c 00000000 		.word	StateWhileOn
 16847              	.LBE2867:
 16848              	.LBE2875:
 16849              	.LBE2876:
 16850              		.cfi_endproc
 16851              	.LFE141:
 16853              		.section	.rodata.op_query_xtal.str1.4,"aMS",%progbits,1
 16854              		.align	2
 16855              	.LC2:
 16856 0000 74727565 		.ascii	"true\000"
 16856      00
 16857              		.section	.text.op_query_xtal,"ax",%progbits
 16858              		.align	1
 16859              		.p2align 2,,3
 16860              		.global	op_query_xtal
 16861              		.syntax unified
 16862              		.thumb
 16863              		.thumb_func
 16864              		.fpu fpv4-sp-d16
 16866              	op_query_xtal:
 16867              	.LVL1212:
 16868              	.LFB144:
2093:src/xeq.c     **** 	fin_tst(Xtal);
 16869              		.loc 1 2093 35 view -0
 16870              		.cfi_startproc
 16871              		@ args = 0, pretend = 0, frame = 0
 16872              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQlyisH.s 			page 468


 16873              		@ link register save eliminated.
2094:src/xeq.c     **** }
 16874              		.loc 1 2094 2 view .LVU4376
 16875              	.LBB2877:
 16876              	.LBI2877:
2538:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 16877              		.loc 1 2538 6 view .LVU4377
 16878              	.LBB2878:
2539:src/xeq.c     **** 	if (Running || XromRunning) {
 16879              		.loc 1 2539 2 view .LVU4378
2540:src/xeq.c     **** 		if (! a && incpc())
 16880              		.loc 1 2540 2 view .LVU4379
2540:src/xeq.c     **** 		if (! a && incpc())
 16881              		.loc 1 2540 6 is_stmt 0 view .LVU4380
 16882 0000 044A     		ldr	r2, .L1177
2540:src/xeq.c     **** 		if (! a && incpc())
 16883              		.loc 1 2540 14 view .LVU4381
 16884 0002 054B     		ldr	r3, .L1177+4
 16885 0004 1268     		ldr	r2, [r2]
 16886 0006 1B68     		ldr	r3, [r3]
 16887 0008 1343     		orrs	r3, r2, r3
 16888 000a 02D1     		bne	.L1175
2545:src/xeq.c     **** #ifdef INFRARED
 16889              		.loc 1 2545 3 is_stmt 1 view .LVU4382
2545:src/xeq.c     **** #ifdef INFRARED
 16890              		.loc 1 2545 11 is_stmt 0 view .LVU4383
 16891 000c 034B     		ldr	r3, .L1177+8
 16892 000e 044A     		ldr	r2, .L1177+12
 16893 0010 1A60     		str	r2, [r3]
 16894              	.LVL1213:
 16895              	.L1175:
2545:src/xeq.c     **** #ifdef INFRARED
 16896              		.loc 1 2545 11 view .LVU4384
 16897              	.LBE2878:
 16898              	.LBE2877:
2095:src/xeq.c     **** 
 16899              		.loc 1 2095 1 view .LVU4385
 16900 0012 7047     		bx	lr
 16901              	.L1178:
 16902              		.align	2
 16903              	.L1177:
 16904 0014 00000000 		.word	Running
 16905 0018 00000000 		.word	XromRunning
 16906 001c 00000000 		.word	DispMsg
 16907 0020 00000000 		.word	.LC2
 16908              		.cfi_endproc
 16909              	.LFE144:
 16911              		.section	.rodata.op_query_print.str1.4,"aMS",%progbits,1
 16912              		.align	2
 16913              	.LC3:
 16914 0000 66616C73 		.ascii	"false\000"
 16914      6500
 16915              		.section	.text.op_query_print,"ax",%progbits
 16916              		.align	1
 16917              		.p2align 2,,3
 16918              		.global	op_query_print
 16919              		.syntax unified
ARM GAS  /tmp/ccQlyisH.s 			page 469


 16920              		.thumb
 16921              		.thumb_func
 16922              		.fpu fpv4-sp-d16
 16924              	op_query_print:
 16925              	.LVL1214:
 16926              	.LFB145:
2097:src/xeq.c     **** #ifdef INFRARED
 16927              		.loc 1 2097 36 is_stmt 1 view -0
 16928              		.cfi_startproc
 16929              		@ args = 0, pretend = 0, frame = 0
 16930              		@ frame_needed = 0, uses_anonymous_args = 0
 16931              		@ link register save eliminated.
2101:src/xeq.c     **** #endif
 16932              		.loc 1 2101 2 view .LVU4387
 16933              	.LBB2879:
 16934              	.LBI2879:
2538:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 16935              		.loc 1 2538 6 view .LVU4388
 16936              	.LBB2880:
2539:src/xeq.c     **** 	if (Running || XromRunning) {
 16937              		.loc 1 2539 2 view .LVU4389
2540:src/xeq.c     **** 		if (! a && incpc())
 16938              		.loc 1 2540 2 view .LVU4390
2540:src/xeq.c     **** 		if (! a && incpc())
 16939              		.loc 1 2540 6 is_stmt 0 view .LVU4391
 16940 0000 054A     		ldr	r2, .L1182
2540:src/xeq.c     **** 		if (! a && incpc())
 16941              		.loc 1 2540 14 view .LVU4392
 16942 0002 064B     		ldr	r3, .L1182+4
 16943 0004 1268     		ldr	r2, [r2]
 16944 0006 1B68     		ldr	r3, [r3]
 16945 0008 1343     		orrs	r3, r2, r3
 16946 000a 03D1     		bne	.L1181
2545:src/xeq.c     **** #ifdef INFRARED
 16947              		.loc 1 2545 3 is_stmt 1 view .LVU4393
2545:src/xeq.c     **** #ifdef INFRARED
 16948              		.loc 1 2545 11 is_stmt 0 view .LVU4394
 16949 000c 044B     		ldr	r3, .L1182+8
 16950 000e 054A     		ldr	r2, .L1182+12
 16951 0010 1A60     		str	r2, [r3]
 16952              	.LVL1215:
2545:src/xeq.c     **** #ifdef INFRARED
 16953              		.loc 1 2545 11 view .LVU4395
 16954              	.LBE2880:
 16955              	.LBE2879:
2103:src/xeq.c     **** 
 16956              		.loc 1 2103 1 view .LVU4396
 16957 0012 7047     		bx	lr
 16958              	.LVL1216:
 16959              	.L1181:
 16960              	.LBB2882:
 16961              	.LBB2881:
2541:src/xeq.c     **** 			decpc();
 16962              		.loc 1 2541 3 is_stmt 1 view .LVU4397
 16963 0014 FFF7FEBF 		b	fin_tst.part.0
 16964              	.LVL1217:
 16965              	.L1183:
ARM GAS  /tmp/ccQlyisH.s 			page 470


2541:src/xeq.c     **** 			decpc();
 16966              		.loc 1 2541 3 is_stmt 0 view .LVU4398
 16967              		.align	2
 16968              	.L1182:
 16969 0018 00000000 		.word	Running
 16970 001c 00000000 		.word	XromRunning
 16971 0020 00000000 		.word	DispMsg
 16972 0024 00000000 		.word	.LC3
 16973              	.LBE2881:
 16974              	.LBE2882:
 16975              		.cfi_endproc
 16976              	.LFE145:
 16978              		.section	.text.cmdstostk,"ax",%progbits
 16979              		.align	1
 16980              		.p2align 2,,3
 16981              		.global	cmdstostk
 16982              		.syntax unified
 16983              		.thumb
 16984              		.thumb_func
 16985              		.fpu fpv4-sp-d16
 16987              	cmdstostk:
 16988              	.LVL1218:
 16989              	.LFB147:
2116:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16990              		.loc 1 2116 48 is_stmt 1 view -0
 16991              		.cfi_startproc
 16992              		@ args = 0, pretend = 0, frame = 0
 16993              		@ frame_needed = 0, uses_anonymous_args = 0
2117:src/xeq.c     **** 
 16994              		.loc 1 2117 2 view .LVU4400
2116:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16995              		.loc 1 2116 48 is_stmt 0 view .LVU4401
 16996 0000 70B5     		push	{r4, r5, r6, lr}
 16997              		.cfi_def_cfa_offset 16
 16998              		.cfi_offset 4, -16
 16999              		.cfi_offset 5, -12
 17000              		.cfi_offset 6, -8
 17001              		.cfi_offset 14, -4
2116:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17002              		.loc 1 2116 48 view .LVU4402
 17003 0002 0546     		mov	r5, r0
2117:src/xeq.c     **** 
 17004              		.loc 1 2117 13 view .LVU4403
 17005 0004 FFF7FEFF 		bl	check_stack_overlap
 17006              	.LVL1219:
2119:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17007              		.loc 1 2119 2 is_stmt 1 view .LVU4404
2119:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17008              		.loc 1 2119 12 view .LVU4405
2119:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17009              		.loc 1 2119 2 is_stmt 0 view .LVU4406
 17010 0008 031E     		subs	r3, r0, #0
 17011 000a 0ADD     		ble	.L1184
 17012 000c 2C46     		mov	r4, r5
 17013 000e C4F16406 		rsb	r6, r4, #100
 17014 0012 1D44     		add	r5, r5, r3
 17015              	.LVL1220:
ARM GAS  /tmp/ccQlyisH.s 			page 471


 17016              	.L1186:
2120:src/xeq.c     **** }
 17017              		.loc 1 2120 3 is_stmt 1 discriminator 3 view .LVU4407
 17018 0014 3119     		adds	r1, r6, r4
 17019 0016 2046     		mov	r0, r4
 17020 0018 0134     		adds	r4, r4, #1
 17021              	.LVL1221:
2120:src/xeq.c     **** }
 17022              		.loc 1 2120 3 is_stmt 0 discriminator 3 view .LVU4408
 17023 001a FFF7FEFF 		bl	copyreg_n
 17024              	.LVL1222:
2119:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17025              		.loc 1 2119 17 is_stmt 1 discriminator 3 view .LVU4409
2119:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17026              		.loc 1 2119 12 discriminator 3 view .LVU4410
2119:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17027              		.loc 1 2119 2 is_stmt 0 discriminator 3 view .LVU4411
 17028 001e AC42     		cmp	r4, r5
 17029 0020 F8D1     		bne	.L1186
 17030              	.L1184:
2121:src/xeq.c     **** 
 17031              		.loc 1 2121 1 view .LVU4412
 17032 0022 70BD     		pop	{r4, r5, r6, pc}
 17033              		.cfi_endproc
 17034              	.LFE147:
 17036              		.section	.text.cmdrclstk,"ax",%progbits
 17037              		.align	1
 17038              		.p2align 2,,3
 17039              		.global	cmdrclstk
 17040              		.syntax unified
 17041              		.thumb
 17042              		.thumb_func
 17043              		.fpu fpv4-sp-d16
 17045              	cmdrclstk:
 17046              	.LVL1223:
 17047              	.LFB148:
2123:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17048              		.loc 1 2123 48 is_stmt 1 view -0
 17049              		.cfi_startproc
 17050              		@ args = 0, pretend = 0, frame = 0
 17051              		@ frame_needed = 0, uses_anonymous_args = 0
2124:src/xeq.c     **** 
 17052              		.loc 1 2124 2 view .LVU4414
2123:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17053              		.loc 1 2123 48 is_stmt 0 view .LVU4415
 17054 0000 70B5     		push	{r4, r5, r6, lr}
 17055              		.cfi_def_cfa_offset 16
 17056              		.cfi_offset 4, -16
 17057              		.cfi_offset 5, -12
 17058              		.cfi_offset 6, -8
 17059              		.cfi_offset 14, -4
2123:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17060              		.loc 1 2123 48 view .LVU4416
 17061 0002 0646     		mov	r6, r0
2124:src/xeq.c     **** 
 17062              		.loc 1 2124 13 view .LVU4417
 17063 0004 FFF7FEFF 		bl	check_stack_overlap
ARM GAS  /tmp/ccQlyisH.s 			page 472


 17064              	.LVL1224:
2126:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17065              		.loc 1 2126 2 is_stmt 1 view .LVU4418
2126:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17066              		.loc 1 2126 12 view .LVU4419
2126:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17067              		.loc 1 2126 2 is_stmt 0 view .LVU4420
 17068 0008 051E     		subs	r5, r0, #0
 17069 000a 09DD     		ble	.L1189
 17070 000c 6435     		adds	r5, r5, #100
 17071 000e 643E     		subs	r6, r6, #100
 17072              	.LVL1225:
2126:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17073              		.loc 1 2126 2 view .LVU4421
 17074 0010 6424     		movs	r4, #100
 17075              	.LVL1226:
 17076              	.L1191:
2127:src/xeq.c     **** }
 17077              		.loc 1 2127 3 is_stmt 1 discriminator 3 view .LVU4422
 17078 0012 3119     		adds	r1, r6, r4
 17079 0014 2046     		mov	r0, r4
 17080 0016 0134     		adds	r4, r4, #1
 17081              	.LVL1227:
2127:src/xeq.c     **** }
 17082              		.loc 1 2127 3 is_stmt 0 discriminator 3 view .LVU4423
 17083 0018 FFF7FEFF 		bl	copyreg_n
 17084              	.LVL1228:
2126:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17085              		.loc 1 2126 17 is_stmt 1 discriminator 3 view .LVU4424
2126:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17086              		.loc 1 2126 12 discriminator 3 view .LVU4425
2126:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17087              		.loc 1 2126 2 is_stmt 0 discriminator 3 view .LVU4426
 17088 001c AC42     		cmp	r4, r5
 17089 001e F8D1     		bne	.L1191
 17090              	.LVL1229:
 17091              	.L1189:
2128:src/xeq.c     **** 
 17092              		.loc 1 2128 1 view .LVU4427
 17093 0020 70BD     		pop	{r4, r5, r6, pc}
 17094              		.cfi_endproc
 17095              	.LFE148:
 17097 0022 00BF     		.section	.text.find_opcode_from,"ax",%progbits
 17098              		.align	1
 17099              		.p2align 2,,3
 17100              		.global	find_opcode_from
 17101              		.syntax unified
 17102              		.thumb
 17103              		.thumb_func
 17104              		.fpu fpv4-sp-d16
 17106              	find_opcode_from:
 17107              	.LVL1230:
 17108              	.LFB150:
2161:src/xeq.c     **** 	unsigned short int top;
 17109              		.loc 1 2161 81 is_stmt 1 view -0
 17110              		.cfi_startproc
 17111              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccQlyisH.s 			page 473


 17112              		@ frame_needed = 0, uses_anonymous_args = 0
2161:src/xeq.c     **** 	unsigned short int top;
 17113              		.loc 1 2161 81 is_stmt 0 view .LVU4429
 17114 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 17115              		.cfi_def_cfa_offset 24
 17116              		.cfi_offset 4, -24
 17117              		.cfi_offset 5, -20
 17118              		.cfi_offset 6, -16
 17119              		.cfi_offset 7, -12
 17120              		.cfi_offset 8, -8
 17121              		.cfi_offset 14, -4
2164:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 17122              		.loc 1 2164 12 view .LVU4430
 17123 0004 02F00207 		and	r7, r2, #2
2161:src/xeq.c     **** 	unsigned short int top;
 17124              		.loc 1 2161 81 view .LVU4431
 17125 0008 82B0     		sub	sp, sp, #8
 17126              		.cfi_def_cfa_offset 32
2161:src/xeq.c     **** 	unsigned short int top;
 17127              		.loc 1 2161 81 view .LVU4432
 17128 000a 9046     		mov	r8, r2
 17129 000c 0E46     		mov	r6, r1
2167:src/xeq.c     **** 	count -= top;
 17130              		.loc 1 2167 14 view .LVU4433
 17131 000e 0DF10602 		add	r2, sp, #6
 17132              	.LVL1231:
2167:src/xeq.c     **** 	count -= top;
 17133              		.loc 1 2167 14 view .LVU4434
 17134 0012 3946     		mov	r1, r7
 17135              	.LVL1232:
2161:src/xeq.c     **** 	unsigned short int top;
 17136              		.loc 1 2161 81 view .LVU4435
 17137 0014 0446     		mov	r4, r0
2162:src/xeq.c     **** 	int count;
 17138              		.loc 1 2162 2 is_stmt 1 view .LVU4436
2163:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
 17139              		.loc 1 2163 2 view .LVU4437
2164:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 17140              		.loc 1 2164 2 view .LVU4438
 17141              	.LVL1233:
2165:src/xeq.c     **** 
 17142              		.loc 1 2165 2 view .LVU4439
2167:src/xeq.c     **** 	count -= top;
 17143              		.loc 1 2167 2 view .LVU4440
2167:src/xeq.c     **** 	count -= top;
 17144              		.loc 1 2167 14 is_stmt 0 view .LVU4441
 17145 0016 FFF7FEFF 		bl	find_section_bounds
 17146              	.LVL1234:
2168:src/xeq.c     **** 	while (count--) {
 17147              		.loc 1 2168 8 view .LVU4442
 17148 001a BDF80650 		ldrh	r5, [sp, #6]
2167:src/xeq.c     **** 	count -= top;
 17149              		.loc 1 2167 8 view .LVU4443
 17150 001e 0130     		adds	r0, r0, #1
 17151              	.LVL1235:
2168:src/xeq.c     **** 	while (count--) {
 17152              		.loc 1 2168 2 is_stmt 1 view .LVU4444
ARM GAS  /tmp/ccQlyisH.s 			page 474


2169:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17153              		.loc 1 2169 2 view .LVU4445
2169:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17154              		.loc 1 2169 8 view .LVU4446
2169:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17155              		.loc 1 2169 8 is_stmt 0 view .LVU4447
 17156 0020 451B     		subs	r5, r0, r5
 17157              	.LVL1236:
2169:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17158              		.loc 1 2169 8 view .LVU4448
 17159 0022 05D1     		bne	.L1197
 17160 0024 10E0     		b	.L1195
 17161              	.LVL1237:
 17162              	.L1205:
2175:src/xeq.c     **** 	}
 17163              		.loc 1 2175 8 view .LVU4449
 17164 0026 FFF7FEFF 		bl	do_inc
 17165              	.LVL1238:
2169:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17166              		.loc 1 2169 8 view .LVU4450
 17167 002a 013D     		subs	r5, r5, #1
 17168              	.LVL1239:
2175:src/xeq.c     **** 	}
 17169              		.loc 1 2175 8 view .LVU4451
 17170 002c 0446     		mov	r4, r0
 17171              	.LVL1240:
2169:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17172              		.loc 1 2169 8 is_stmt 1 view .LVU4452
2169:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17173              		.loc 1 2169 8 is_stmt 0 view .LVU4453
 17174 002e 0BD0     		beq	.L1195
 17175              	.LVL1241:
 17176              	.L1197:
2173:src/xeq.c     **** 			return pc;
 17177              		.loc 1 2173 3 is_stmt 1 view .LVU4454
2173:src/xeq.c     **** 			return pc;
 17178              		.loc 1 2173 7 is_stmt 0 view .LVU4455
 17179 0030 2046     		mov	r0, r4
 17180 0032 FFF7FEFF 		bl	getprog
 17181              	.LVL1242:
2175:src/xeq.c     **** 	}
 17182              		.loc 1 2175 3 is_stmt 1 view .LVU4456
2173:src/xeq.c     **** 			return pc;
 17183              		.loc 1 2173 7 is_stmt 0 view .LVU4457
 17184 0036 0346     		mov	r3, r0
2173:src/xeq.c     **** 			return pc;
 17185              		.loc 1 2173 6 view .LVU4458
 17186 0038 B342     		cmp	r3, r6
2175:src/xeq.c     **** 	}
 17187              		.loc 1 2175 8 view .LVU4459
 17188 003a 3946     		mov	r1, r7
 17189 003c 2046     		mov	r0, r4
2173:src/xeq.c     **** 			return pc;
 17190              		.loc 1 2173 6 view .LVU4460
 17191 003e F2D1     		bne	.L1205
 17192              	.LVL1243:
 17193              	.L1194:
ARM GAS  /tmp/ccQlyisH.s 			page 475


2180:src/xeq.c     **** 
 17194              		.loc 1 2180 1 view .LVU4461
 17195 0040 2046     		mov	r0, r4
 17196 0042 02B0     		add	sp, sp, #8
 17197              		.cfi_remember_state
 17198              		.cfi_def_cfa_offset 24
 17199              		@ sp needed
 17200 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17201              	.LVL1244:
 17202              	.L1195:
 17203              		.cfi_restore_state
2177:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17204              		.loc 1 2177 2 is_stmt 1 view .LVU4462
2177:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17205              		.loc 1 2177 5 is_stmt 0 view .LVU4463
 17206 0048 18F00104 		ands	r4, r8, #1
 17207 004c F8D0     		beq	.L1194
 17208              	.LBB2889:
 17209              	.LBI2889:
2161:src/xeq.c     **** 	unsigned short int top;
 17210              		.loc 1 2161 14 is_stmt 1 view .LVU4464
 17211              	.LVL1245:
 17212              	.LBB2890:
2178:src/xeq.c     **** 	return 0;
 17213              		.loc 1 2178 3 view .LVU4465
 17214              	.LBB2891:
 17215              	.LBI2891:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17216              		.loc 1 537 5 view .LVU4466
 17217              	.LBB2892:
 538:src/xeq.c     **** 		Error = e;
 17218              		.loc 1 538 2 view .LVU4467
 538:src/xeq.c     **** 		Error = e;
 17219              		.loc 1 538 12 is_stmt 0 view .LVU4468
 17220 004e 074B     		ldr	r3, .L1206
 538:src/xeq.c     **** 		Error = e;
 17221              		.loc 1 538 5 view .LVU4469
 17222 0050 1C68     		ldr	r4, [r3]
 17223 0052 2CB9     		cbnz	r4, .L1199
 17224              	.LVL1246:
 17225              	.LBB2893:
 17226              	.LBI2893:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17227              		.loc 1 537 5 is_stmt 1 view .LVU4470
 17228              	.LBB2894:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 17229              		.loc 1 539 3 view .LVU4471
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 17230              		.loc 1 539 9 is_stmt 0 view .LVU4472
 17231 0054 0622     		movs	r2, #6
 17232              	.LBE2894:
 17233              	.LBE2893:
 17234              	.LBE2892:
 17235              	.LBE2891:
 17236              	.LBE2890:
 17237              	.LBE2889:
2180:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 476


 17238              		.loc 1 2180 1 view .LVU4473
 17239 0056 2046     		mov	r0, r4
 17240              	.LBB2900:
 17241              	.LBB2899:
 17242              	.LBB2898:
 17243              	.LBB2897:
 17244              	.LBB2896:
 17245              	.LBB2895:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 17246              		.loc 1 539 9 view .LVU4474
 17247 0058 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 17248              		.loc 1 540 3 is_stmt 1 view .LVU4475
 17249              	.LBE2895:
 17250              	.LBE2896:
 17251              	.LBE2897:
 17252              	.LBE2898:
 17253              	.LBE2899:
 17254              	.LBE2900:
2180:src/xeq.c     **** 
 17255              		.loc 1 2180 1 is_stmt 0 view .LVU4476
 17256 005a 02B0     		add	sp, sp, #8
 17257              		.cfi_remember_state
 17258              		.cfi_def_cfa_offset 24
 17259              		@ sp needed
 17260 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17261              	.LVL1247:
 17262              	.L1199:
 17263              		.cfi_restore_state
2179:src/xeq.c     **** }
 17264              		.loc 1 2179 9 view .LVU4477
 17265 0060 0024     		movs	r4, #0
 17266              	.LVL1248:
2180:src/xeq.c     **** 
 17267              		.loc 1 2180 1 view .LVU4478
 17268 0062 2046     		mov	r0, r4
 17269 0064 02B0     		add	sp, sp, #8
 17270              		.cfi_def_cfa_offset 24
 17271              		@ sp needed
 17272 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17273              	.LVL1249:
 17274              	.L1207:
2180:src/xeq.c     **** 
 17275              		.loc 1 2180 1 view .LVU4479
 17276 006a 00BF     		.align	2
 17277              	.L1206:
 17278 006c 00000000 		.word	Error
 17279              		.cfi_endproc
 17280              	.LFE150:
 17282              		.section	.text.find_label_from,"ax",%progbits
 17283              		.align	1
 17284              		.p2align 2,,3
 17285              		.global	find_label_from
 17286              		.syntax unified
 17287              		.thumb
 17288              		.thumb_func
 17289              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQlyisH.s 			page 477


 17291              	find_label_from:
 17292              	.LVL1250:
 17293              	.LFB151:
2183:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 17294              		.loc 1 2183 76 is_stmt 1 view -0
 17295              		.cfi_startproc
 17296              		@ args = 0, pretend = 0, frame = 0
 17297              		@ frame_needed = 0, uses_anonymous_args = 0
 17298              		@ link register save eliminated.
2184:src/xeq.c     **** }
 17299              		.loc 1 2184 2 view .LVU4481
2184:src/xeq.c     **** }
 17300              		.loc 1 2184 9 is_stmt 0 view .LVU4482
 17301 0000 41F4C441 		orr	r1, r1, #25088
 17302              	.LVL1251:
2184:src/xeq.c     **** }
 17303              		.loc 1 2184 9 view .LVU4483
 17304 0004 FFF7FEBF 		b	find_opcode_from
 17305              	.LVL1252:
2184:src/xeq.c     **** }
 17306              		.loc 1 2184 9 view .LVU4484
 17307              		.cfi_endproc
 17308              	.LFE151:
 17310              		.section	.text.op_rtn,"ax",%progbits
 17311              		.align	1
 17312              		.p2align 2,,3
 17313              		.global	op_rtn
 17314              		.syntax unified
 17315              		.thumb
 17316              		.thumb_func
 17317              		.fpu fpv4-sp-d16
 17319              	op_rtn:
 17320              	.LVL1253:
 17321              	.LFB154:
2242:src/xeq.c     **** 	if (! Running && ! XromRunning) {
 17322              		.loc 1 2242 28 is_stmt 1 view -0
 17323              		.cfi_startproc
 17324              		@ args = 0, pretend = 0, frame = 0
 17325              		@ frame_needed = 0, uses_anonymous_args = 0
 17326              		@ link register save eliminated.
2243:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17327              		.loc 1 2243 2 view .LVU4486
2243:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17328              		.loc 1 2243 6 is_stmt 0 view .LVU4487
 17329 0000 074A     		ldr	r2, .L1212
2243:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17330              		.loc 1 2243 19 view .LVU4488
 17331 0002 084B     		ldr	r3, .L1212+4
2243:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17332              		.loc 1 2243 16 view .LVU4489
 17333 0004 1268     		ldr	r2, [r2]
 17334 0006 1B68     		ldr	r3, [r3]
 17335 0008 1343     		orrs	r3, r2, r3
 17336 000a 06D0     		beq	.L1211
2248:src/xeq.c     **** }
 17337              		.loc 1 2248 3 is_stmt 1 view .LVU4490
 17338 000c A0F13900 		sub	r0, #57
ARM GAS  /tmp/ccQlyisH.s 			page 478


 17339              	.LVL1254:
2248:src/xeq.c     **** }
 17340              		.loc 1 2248 3 is_stmt 0 view .LVU4491
 17341 0010 B0FA80F0 		clz	r0, r0
 17342 0014 4009     		lsrs	r0, r0, #5
 17343 0016 FFF7FEBF 		b	do_rtn
 17344              	.LVL1255:
 17345              	.L1211:
2245:src/xeq.c     **** 	}
 17346              		.loc 1 2245 3 is_stmt 1 view .LVU4492
 17347 001a FFF7FEBF 		b	clrretstk_pc
 17348              	.LVL1256:
 17349              	.L1213:
2245:src/xeq.c     **** 	}
 17350              		.loc 1 2245 3 is_stmt 0 view .LVU4493
 17351 001e 00BF     		.align	2
 17352              	.L1212:
 17353 0020 00000000 		.word	Running
 17354 0024 00000000 		.word	XromRunning
 17355              		.cfi_endproc
 17356              	.LFE154:
 17358              		.section	.text.op_popusr,"ax",%progbits
 17359              		.align	1
 17360              		.p2align 2,,3
 17361              		.global	op_popusr
 17362              		.syntax unified
 17363              		.thumb
 17364              		.thumb_func
 17365              		.fpu fpv4-sp-d16
 17367              	op_popusr:
 17368              	.LVL1257:
 17369              	.LFB158:
2289:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 17370              		.loc 1 2289 31 is_stmt 1 view -0
 17371              		.cfi_startproc
 17372              		@ args = 0, pretend = 0, frame = 0
 17373              		@ frame_needed = 0, uses_anonymous_args = 0
 17374              		@ link register save eliminated.
2290:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17375              		.loc 1 2290 2 view .LVU4495
2290:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17376              		.loc 1 2290 25 is_stmt 0 view .LVU4496
 17377 0000 134A     		ldr	r2, .L1216
2290:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17378              		.loc 1 2290 24 view .LVU4497
 17379 0002 144B     		ldr	r3, .L1216+4
2290:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17380              		.loc 1 2290 25 view .LVU4498
 17381 0004 1268     		ldr	r2, [r2]
2290:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17382              		.loc 1 2290 24 view .LVU4499
 17383 0006 1B68     		ldr	r3, [r3]
2289:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 17384              		.loc 1 2289 31 view .LVU4500
 17385 0008 70B4     		push	{r4, r5, r6}
 17386              		.cfi_def_cfa_offset 12
 17387              		.cfi_offset 4, -12
ARM GAS  /tmp/ccQlyisH.s 			page 479


 17388              		.cfi_offset 5, -8
 17389              		.cfi_offset 6, -4
2290:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17390              		.loc 1 2290 25 view .LVU4501
 17391 000a B2F9E257 		ldrsh	r5, [r2, #2018]
2292:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17392              		.loc 1 2292 13 view .LVU4502
 17393 000e 124E     		ldr	r6, .L1216+8
2290:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17394              		.loc 1 2290 34 view .LVU4503
 17395 0010 A9B2     		uxth	r1, r5
 17396 0012 4C1C     		adds	r4, r1, #1
 17397 0014 24B2     		sxth	r4, r4
2291:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17398              		.loc 1 2291 34 view .LVU4504
 17399 0016 881C     		adds	r0, r1, #2
 17400              	.LVL1258:
2290:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17401              		.loc 1 2290 34 view .LVU4505
 17402 0018 A2F8E247 		strh	r4, [r2, #2018]	@ movhi
2291:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17403              		.loc 1 2291 34 view .LVU4506
 17404 001c 00B2     		sxth	r0, r0
2290:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17405              		.loc 1 2290 24 view .LVU4507
 17406 001e 33F81550 		ldrh	r5, [r3, r5, lsl #1]
2291:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17407              		.loc 1 2291 34 view .LVU4508
 17408 0022 A2F8E207 		strh	r0, [r2, #2018]	@ movhi
2291:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17409              		.loc 1 2291 24 view .LVU4509
 17410 0026 33F91440 		ldrsh	r4, [r3, r4, lsl #1]
2291:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17411              		.loc 1 2291 12 view .LVU4510
 17412 002a A2F8DE47 		strh	r4, [r2, #2014]	@ movhi
2292:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17413              		.loc 1 2292 34 view .LVU4511
 17414 002e 0331     		adds	r1, r1, #3
 17415 0030 A2F8E217 		strh	r1, [r2, #2018]	@ movhi
2293:src/xeq.c     **** }
 17416              		.loc 1 2293 20 view .LVU4512
 17417 0034 33F81420 		ldrh	r2, [r3, r4, lsl #1]
2290:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17418              		.loc 1 2290 16 view .LVU4513
 17419 0038 0849     		ldr	r1, .L1216+12
2292:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17420              		.loc 1 2292 24 view .LVU4514
 17421 003a 33F81000 		ldrh	r0, [r3, r0, lsl #1]
 17422 003e 3060     		str	r0, [r6]
2293:src/xeq.c     **** }
 17423              		.loc 1 2293 20 view .LVU4515
 17424 0040 22F40052 		bic	r2, r2, #8192
2290:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17425              		.loc 1 2290 24 view .LVU4516
 17426 0044 0D60     		str	r5, [r1]
2291:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17427              		.loc 1 2291 2 is_stmt 1 view .LVU4517
ARM GAS  /tmp/ccQlyisH.s 			page 480


2292:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17428              		.loc 1 2292 2 view .LVU4518
2293:src/xeq.c     **** }
 17429              		.loc 1 2293 2 view .LVU4519
2293:src/xeq.c     **** }
 17430              		.loc 1 2293 20 is_stmt 0 view .LVU4520
 17431 0046 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
2294:src/xeq.c     **** 
 17432              		.loc 1 2294 1 view .LVU4521
 17433 004a 70BC     		pop	{r4, r5, r6}
 17434              		.cfi_restore 6
 17435              		.cfi_restore 5
 17436              		.cfi_restore 4
 17437              		.cfi_def_cfa_offset 0
 17438 004c 7047     		bx	lr
 17439              	.L1217:
 17440 004e 00BF     		.align	2
 17441              	.L1216:
 17442 0050 00000000 		.word	main_ram
 17443 0054 00000000 		.word	RetStk
 17444 0058 00000000 		.word	XromUserPc
 17445 005c 00000000 		.word	UserLocalRegs
 17446              		.cfi_endproc
 17447              	.LFE158:
 17449              		.section	.text.findmultilbl,"ax",%progbits
 17450              		.align	1
 17451              		.p2align 2,,3
 17452              		.global	findmultilbl
 17453              		.syntax unified
 17454              		.thumb
 17455              		.thumb_func
 17456              		.fpu fpv4-sp-d16
 17458              	findmultilbl:
 17459              	.LVL1259:
 17460              	.LFB162:
2322:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17461              		.loc 1 2322 54 is_stmt 1 view -0
 17462              		.cfi_startproc
 17463              		@ args = 0, pretend = 0, frame = 0
 17464              		@ frame_needed = 0, uses_anonymous_args = 0
2323:src/xeq.c     **** 	unsigned int lbl;
 17465              		.loc 1 2323 2 view .LVU4523
2322:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17466              		.loc 1 2322 54 is_stmt 0 view .LVU4524
 17467 0000 38B5     		push	{r3, r4, r5, lr}
 17468              		.cfi_def_cfa_offset 16
 17469              		.cfi_offset 3, -16
 17470              		.cfi_offset 4, -12
 17471              		.cfi_offset 5, -8
 17472              		.cfi_offset 14, -4
2326:src/xeq.c     **** 	if (lbl == 0)
 17473              		.loc 1 2326 8 view .LVU4525
 17474 0002 0022     		movs	r2, #0
2323:src/xeq.c     **** 	unsigned int lbl;
 17475              		.loc 1 2323 15 view .LVU4526
 17476 0004 20F47064 		bic	r4, r0, #3840
 17477              	.LVL1260:
ARM GAS  /tmp/ccQlyisH.s 			page 481


2324:src/xeq.c     **** 
 17478              		.loc 1 2324 2 is_stmt 1 view .LVU4527
2326:src/xeq.c     **** 	if (lbl == 0)
 17479              		.loc 1 2326 2 view .LVU4528
2322:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17480              		.loc 1 2322 54 is_stmt 0 view .LVU4529
 17481 0008 0D46     		mov	r5, r1
2326:src/xeq.c     **** 	if (lbl == 0)
 17482              		.loc 1 2326 8 view .LVU4530
 17483 000a 1046     		mov	r0, r2
 17484              	.LVL1261:
2326:src/xeq.c     **** 	if (lbl == 0)
 17485              		.loc 1 2326 8 view .LVU4531
 17486 000c 2146     		mov	r1, r4
 17487              	.LVL1262:
2326:src/xeq.c     **** 	if (lbl == 0)
 17488              		.loc 1 2326 8 view .LVU4532
 17489 000e FFF7FEFF 		bl	find_opcode_from
 17490              	.LVL1263:
2327:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 17491              		.loc 1 2327 2 is_stmt 1 view .LVU4533
2327:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 17492              		.loc 1 2327 5 is_stmt 0 view .LVU4534
 17493 0012 00B1     		cbz	r0, .L1224
 17494              	.L1218:
2334:src/xeq.c     **** 
 17495              		.loc 1 2334 1 view .LVU4535
 17496 0014 38BD     		pop	{r3, r4, r5, pc}
 17497              	.LVL1264:
 17498              	.L1224:
2328:src/xeq.c     **** 	if (lbl == 0)
 17499              		.loc 1 2328 3 is_stmt 1 view .LVU4536
2328:src/xeq.c     **** 	if (lbl == 0)
 17500              		.loc 1 2328 9 is_stmt 0 view .LVU4537
 17501 0016 0246     		mov	r2, r0
 17502 0018 2146     		mov	r1, r4
 17503 001a 4FF48040 		mov	r0, #16384
 17504              	.LVL1265:
2328:src/xeq.c     **** 	if (lbl == 0)
 17505              		.loc 1 2328 9 view .LVU4538
 17506 001e FFF7FEFF 		bl	find_opcode_from
 17507              	.LVL1266:
2329:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 17508              		.loc 1 2329 2 is_stmt 1 view .LVU4539
2329:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 17509              		.loc 1 2329 5 is_stmt 0 view .LVU4540
 17510 0022 0028     		cmp	r0, #0
 17511 0024 F6D1     		bne	.L1218
2330:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17512              		.loc 1 2330 3 is_stmt 1 view .LVU4541
2330:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17513              		.loc 1 2330 9 is_stmt 0 view .LVU4542
 17514 0026 0246     		mov	r2, r0
 17515 0028 2146     		mov	r1, r4
 17516 002a 4FF40040 		mov	r0, #32768
 17517              	.LVL1267:
2330:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
ARM GAS  /tmp/ccQlyisH.s 			page 482


 17518              		.loc 1 2330 9 view .LVU4543
 17519 002e FFF7FEFF 		bl	find_opcode_from
 17520              	.LVL1268:
2331:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17521              		.loc 1 2331 2 is_stmt 1 view .LVU4544
2331:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17522              		.loc 1 2331 5 is_stmt 0 view .LVU4545
 17523 0032 0028     		cmp	r0, #0
 17524 0034 EED1     		bne	.L1218
2331:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17525              		.loc 1 2331 15 discriminator 1 view .LVU4546
 17526 0036 EB07     		lsls	r3, r5, #31
 17527 0038 ECD5     		bpl	.L1218
 17528              	.LBB2907:
 17529              	.LBI2907:
2322:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17530              		.loc 1 2322 14 is_stmt 1 view .LVU4547
 17531              	.LVL1269:
 17532              	.LBB2908:
2332:src/xeq.c     **** 	return lbl;
 17533              		.loc 1 2332 3 view .LVU4548
 17534              	.LBB2909:
 17535              	.LBI2909:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17536              		.loc 1 537 5 view .LVU4549
 17537              	.LBB2910:
 538:src/xeq.c     **** 		Error = e;
 17538              		.loc 1 538 2 view .LVU4550
 538:src/xeq.c     **** 		Error = e;
 17539              		.loc 1 538 12 is_stmt 0 view .LVU4551
 17540 003a 034B     		ldr	r3, .L1225
 538:src/xeq.c     **** 		Error = e;
 17541              		.loc 1 538 5 view .LVU4552
 17542 003c 1A68     		ldr	r2, [r3]
 17543 003e 002A     		cmp	r2, #0
 17544 0040 E8D1     		bne	.L1218
 17545              	.LVL1270:
 17546              	.LBB2911:
 17547              	.LBI2911:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17548              		.loc 1 537 5 is_stmt 1 view .LVU4553
 17549              	.LBB2912:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 17550              		.loc 1 539 3 view .LVU4554
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 17551              		.loc 1 539 9 is_stmt 0 view .LVU4555
 17552 0042 0622     		movs	r2, #6
 17553 0044 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 17554              		.loc 1 540 3 is_stmt 1 view .LVU4556
 17555              	.LVL1271:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 17556              		.loc 1 540 3 is_stmt 0 view .LVU4557
 17557              	.LBE2912:
 17558              	.LBE2911:
 17559              	.LBE2910:
 17560              	.LBE2909:
ARM GAS  /tmp/ccQlyisH.s 			page 483


 17561              	.LBE2908:
 17562              	.LBE2907:
2333:src/xeq.c     **** }
 17563              		.loc 1 2333 2 is_stmt 1 view .LVU4558
2334:src/xeq.c     **** 
 17564              		.loc 1 2334 1 is_stmt 0 view .LVU4559
 17565 0046 38BD     		pop	{r3, r4, r5, pc}
 17566              	.LVL1272:
 17567              	.L1226:
2334:src/xeq.c     **** 
 17568              		.loc 1 2334 1 view .LVU4560
 17569              		.align	2
 17570              	.L1225:
 17571 0048 00000000 		.word	Error
 17572              		.cfi_endproc
 17573              	.LFE162:
 17575              		.section	.text.get_dispmode_digs,"ax",%progbits
 17576              		.align	1
 17577              		.p2align 2,,3
 17578              		.global	get_dispmode_digs
 17579              		.syntax unified
 17580              		.thumb
 17581              		.thumb_func
 17582              		.fpu fpv4-sp-d16
 17584              	get_dispmode_digs:
 17585              	.LVL1273:
 17586              	.LFB169:
2386:src/xeq.c     **** 	int dispmode = UState.dispmode;
 17587              		.loc 1 2386 1 is_stmt 1 view -0
 17588              		.cfi_startproc
 17589              		@ args = 0, pretend = 0, frame = 0
 17590              		@ frame_needed = 0, uses_anonymous_args = 0
 17591              		@ link register save eliminated.
2387:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17592              		.loc 1 2387 2 view .LVU4562
2387:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17593              		.loc 1 2387 17 is_stmt 0 view .LVU4563
 17594 0000 0A4B     		ldr	r3, .L1230
 17595 0002 1A68     		ldr	r2, [r3]
2388:src/xeq.c     **** 
 17596              		.loc 1 2388 23 view .LVU4564
 17597 0004 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
2387:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17598              		.loc 1 2387 23 view .LVU4565
 17599 0008 92F8E627 		ldrb	r2, [r2, #2022]	@ zero_extendqisi2
2388:src/xeq.c     **** 
 17600              		.loc 1 2388 6 view .LVU4566
 17601 000c 03F00F03 		and	r3, r3, #15
2390:src/xeq.c     **** 		dispdigs -= 12;
 17602              		.loc 1 2390 5 view .LVU4567
 17603 0010 0B2B     		cmp	r3, #11
2386:src/xeq.c     **** 	int dispmode = UState.dispmode;
 17604              		.loc 1 2386 1 view .LVU4568
 17605 0012 0146     		mov	r1, r0
2387:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17606              		.loc 1 2387 6 view .LVU4569
 17607 0014 4FEA9210 		lsr	r0, r2, #6
ARM GAS  /tmp/ccQlyisH.s 			page 484


 17608              	.LVL1274:
2388:src/xeq.c     **** 
 17609              		.loc 1 2388 2 is_stmt 1 view .LVU4570
2390:src/xeq.c     **** 		dispdigs -= 12;
 17610              		.loc 1 2390 2 view .LVU4571
2390:src/xeq.c     **** 		dispdigs -= 12;
 17611              		.loc 1 2390 5 is_stmt 0 view .LVU4572
 17612 0018 06DD     		ble	.L1228
2391:src/xeq.c     **** 		dispmode += 4;
 17613              		.loc 1 2391 3 is_stmt 1 view .LVU4573
 17614              	.LVL1275:
2392:src/xeq.c     **** 		if (dispmode >= 6) {
 17615              		.loc 1 2392 3 view .LVU4574
2392:src/xeq.c     **** 		if (dispmode >= 6) {
 17616              		.loc 1 2392 12 is_stmt 0 view .LVU4575
 17617 001a 021D     		adds	r2, r0, #4
 17618              	.LVL1276:
2393:src/xeq.c     **** 			dispmode -= 2;
 17619              		.loc 1 2393 3 is_stmt 1 view .LVU4576
2393:src/xeq.c     **** 			dispmode -= 2;
 17620              		.loc 1 2393 6 is_stmt 0 view .LVU4577
 17621 001c 052A     		cmp	r2, #5
2391:src/xeq.c     **** 		dispmode += 4;
 17622              		.loc 1 2391 12 view .LVU4578
 17623 001e D9BF     		ittee	le
 17624 0020 0C3B     		suble	r3, r3, #12
 17625              	.LVL1277:
2391:src/xeq.c     **** 		dispmode += 4;
 17626              		.loc 1 2391 12 view .LVU4579
 17627 0022 1046     		movle	r0, r2
2394:src/xeq.c     **** 			dispdigs += 4;
 17628              		.loc 1 2394 4 is_stmt 1 view .LVU4580
2394:src/xeq.c     **** 			dispdigs += 4;
 17629              		.loc 1 2394 13 is_stmt 0 view .LVU4581
 17630 0024 0230     		addgt	r0, r0, #2
 17631              	.LVL1278:
2395:src/xeq.c     **** 		}
 17632              		.loc 1 2395 4 is_stmt 1 view .LVU4582
2395:src/xeq.c     **** 		}
 17633              		.loc 1 2395 13 is_stmt 0 view .LVU4583
 17634 0026 083B     		subgt	r3, r3, #8
 17635              	.LVL1279:
 17636              	.L1228:
2398:src/xeq.c     **** 	return dispmode;
 17637              		.loc 1 2398 2 is_stmt 1 view .LVU4584
2398:src/xeq.c     **** 	return dispmode;
 17638              		.loc 1 2398 9 is_stmt 0 view .LVU4585
 17639 0028 0B60     		str	r3, [r1]
2399:src/xeq.c     **** }
 17640              		.loc 1 2399 2 is_stmt 1 view .LVU4586
2400:src/xeq.c     **** 
 17641              		.loc 1 2400 1 is_stmt 0 view .LVU4587
 17642 002a 7047     		bx	lr
 17643              	.L1231:
 17644              		.align	2
 17645              	.L1230:
 17646 002c 00000000 		.word	main_ram
ARM GAS  /tmp/ccQlyisH.s 			page 485


 17647              		.cfi_endproc
 17648              	.LFE169:
 17650              		.section	.text.set_dispmode_digs,"ax",%progbits
 17651              		.align	1
 17652              		.p2align 2,,3
 17653              		.global	set_dispmode_digs
 17654              		.syntax unified
 17655              		.thumb
 17656              		.thumb_func
 17657              		.fpu fpv4-sp-d16
 17659              	set_dispmode_digs:
 17660              	.LVL1280:
 17661              	.LFB170:
2403:src/xeq.c     **** 	if (dispmode >= 4) {
 17662              		.loc 1 2403 1 is_stmt 1 view -0
 17663              		.cfi_startproc
 17664              		@ args = 0, pretend = 0, frame = 0
 17665              		@ frame_needed = 0, uses_anonymous_args = 0
 17666              		@ link register save eliminated.
2404:src/xeq.c     **** 		dispmode -= 4;
 17667              		.loc 1 2404 2 view .LVU4589
2404:src/xeq.c     **** 		dispmode -= 4;
 17668              		.loc 1 2404 5 is_stmt 0 view .LVU4590
 17669 0000 0328     		cmp	r0, #3
 17670 0002 07DD     		ble	.L1233
2405:src/xeq.c     **** 		dispdigs += 12;
 17671              		.loc 1 2405 3 is_stmt 1 view .LVU4591
 17672              	.LVL1281:
2406:src/xeq.c     **** 		if (dispdigs >= 16) {
 17673              		.loc 1 2406 3 view .LVU4592
2406:src/xeq.c     **** 		if (dispdigs >= 16) {
 17674              		.loc 1 2406 12 is_stmt 0 view .LVU4593
 17675 0004 01F10C03 		add	r3, r1, #12
 17676              	.LVL1282:
2407:src/xeq.c     **** 			dispdigs -= 4;
 17677              		.loc 1 2407 3 is_stmt 1 view .LVU4594
2407:src/xeq.c     **** 			dispdigs -= 4;
 17678              		.loc 1 2407 6 is_stmt 0 view .LVU4595
 17679 0008 0F2B     		cmp	r3, #15
2405:src/xeq.c     **** 		dispdigs += 12;
 17680              		.loc 1 2405 12 view .LVU4596
 17681 000a D9BF     		ittee	le
 17682 000c 0438     		suble	r0, r0, #4
 17683              	.LVL1283:
2405:src/xeq.c     **** 		dispdigs += 12;
 17684              		.loc 1 2405 12 view .LVU4597
 17685 000e 1946     		movle	r1, r3
2408:src/xeq.c     **** 			dispmode += 2;
 17686              		.loc 1 2408 4 is_stmt 1 view .LVU4598
2408:src/xeq.c     **** 			dispmode += 2;
 17687              		.loc 1 2408 13 is_stmt 0 view .LVU4599
 17688 0010 0831     		addgt	r1, r1, #8
 17689              	.LVL1284:
2409:src/xeq.c     **** 		}
 17690              		.loc 1 2409 4 is_stmt 1 view .LVU4600
2409:src/xeq.c     **** 		}
 17691              		.loc 1 2409 13 is_stmt 0 view .LVU4601
ARM GAS  /tmp/ccQlyisH.s 			page 486


 17692 0012 0238     		subgt	r0, r0, #2
 17693              	.LVL1285:
 17694              	.L1233:
2412:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17695              		.loc 1 2412 2 is_stmt 1 view .LVU4602
 17696 0014 084B     		ldr	r3, .L1235
 17697 0016 1A68     		ldr	r2, [r3]
2413:src/xeq.c     **** }
 17698              		.loc 1 2413 2 view .LVU4603
2412:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17699              		.loc 1 2412 18 is_stmt 0 view .LVU4604
 17700 0018 00F00300 		and	r0, r0, #3
 17701              	.LVL1286:
2412:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17702              		.loc 1 2412 18 view .LVU4605
 17703 001c B2F8E637 		ldrh	r3, [r2, #2022]
 17704 0020 8001     		lsls	r0, r0, #6
 17705 0022 01F00F01 		and	r1, r1, #15
 17706              	.LVL1287:
2412:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17707              		.loc 1 2412 18 view .LVU4606
 17708 0026 40EA0120 		orr	r0, r0, r1, lsl #8
 17709 002a 23F47C63 		bic	r3, r3, #4032
 17710 002e 1843     		orrs	r0, r0, r3
 17711 0030 A2F8E607 		strh	r0, [r2, #2022]	@ movhi
2414:src/xeq.c     **** #endif
 17712              		.loc 1 2414 1 view .LVU4607
 17713 0034 7047     		bx	lr
 17714              	.L1236:
 17715 0036 00BF     		.align	2
 17716              	.L1235:
 17717 0038 00000000 		.word	main_ram
 17718              		.cfi_endproc
 17719              	.LFE170:
 17721              		.section	.text.convC2F,"ax",%progbits
 17722              		.align	1
 17723              		.p2align 2,,3
 17724              		.global	convC2F
 17725              		.syntax unified
 17726              		.thumb
 17727              		.thumb_func
 17728              		.fpu fpv4-sp-d16
 17730              	convC2F:
 17731              	.LVL1288:
 17732              	.LFB172:
2466:src/xeq.c     **** 	decNumber s;
 17733              		.loc 1 2466 54 is_stmt 1 view -0
 17734              		.cfi_startproc
 17735              		@ args = 0, pretend = 0, frame = 40
 17736              		@ frame_needed = 0, uses_anonymous_args = 0
2467:src/xeq.c     **** 
 17737              		.loc 1 2467 2 view .LVU4609
2469:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17738              		.loc 1 2469 2 view .LVU4610
2466:src/xeq.c     **** 	decNumber s;
 17739              		.loc 1 2466 54 is_stmt 0 view .LVU4611
 17740 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccQlyisH.s 			page 487


 17741              		.cfi_def_cfa_offset 8
 17742              		.cfi_offset 4, -8
 17743              		.cfi_offset 14, -4
 17744 0002 8AB0     		sub	sp, sp, #40
 17745              		.cfi_def_cfa_offset 48
2466:src/xeq.c     **** 	decNumber s;
 17746              		.loc 1 2466 54 view .LVU4612
 17747 0004 0446     		mov	r4, r0
2469:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17748              		.loc 1 2469 2 view .LVU4613
 17749 0006 054A     		ldr	r2, .L1239
 17750 0008 01A8     		add	r0, sp, #4
 17751              	.LVL1289:
2469:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17752              		.loc 1 2469 2 view .LVU4614
 17753 000a FFF7FEFF 		bl	dn_multiply
 17754              	.LVL1290:
2470:src/xeq.c     **** }
 17755              		.loc 1 2470 2 is_stmt 1 view .LVU4615
2470:src/xeq.c     **** }
 17756              		.loc 1 2470 9 is_stmt 0 view .LVU4616
 17757 000e 044A     		ldr	r2, .L1239+4
 17758 0010 2046     		mov	r0, r4
 17759 0012 01A9     		add	r1, sp, #4
 17760 0014 FFF7FEFF 		bl	dn_add
 17761              	.LVL1291:
2471:src/xeq.c     **** 
 17762              		.loc 1 2471 1 view .LVU4617
 17763 0018 0AB0     		add	sp, sp, #40
 17764              		.cfi_def_cfa_offset 8
 17765              		@ sp needed
 17766 001a 10BD     		pop	{r4, pc}
 17767              	.LVL1292:
 17768              	.L1240:
2471:src/xeq.c     **** 
 17769              		.loc 1 2471 1 view .LVU4618
 17770              		.align	2
 17771              	.L1239:
 17772 001c 00000000 		.word	const_9on5
 17773 0020 00000000 		.word	const_32
 17774              		.cfi_endproc
 17775              	.LFE172:
 17777              		.section	.text.convF2C,"ax",%progbits
 17778              		.align	1
 17779              		.p2align 2,,3
 17780              		.global	convF2C
 17781              		.syntax unified
 17782              		.thumb
 17783              		.thumb_func
 17784              		.fpu fpv4-sp-d16
 17786              	convF2C:
 17787              	.LVL1293:
 17788              	.LFB173:
2473:src/xeq.c     **** 	decNumber s;
 17789              		.loc 1 2473 54 is_stmt 1 view -0
 17790              		.cfi_startproc
 17791              		@ args = 0, pretend = 0, frame = 40
ARM GAS  /tmp/ccQlyisH.s 			page 488


 17792              		@ frame_needed = 0, uses_anonymous_args = 0
2474:src/xeq.c     **** 
 17793              		.loc 1 2474 2 view .LVU4620
2476:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17794              		.loc 1 2476 2 view .LVU4621
2473:src/xeq.c     **** 	decNumber s;
 17795              		.loc 1 2473 54 is_stmt 0 view .LVU4622
 17796 0000 10B5     		push	{r4, lr}
 17797              		.cfi_def_cfa_offset 8
 17798              		.cfi_offset 4, -8
 17799              		.cfi_offset 14, -4
 17800 0002 8AB0     		sub	sp, sp, #40
 17801              		.cfi_def_cfa_offset 48
2473:src/xeq.c     **** 	decNumber s;
 17802              		.loc 1 2473 54 view .LVU4623
 17803 0004 0446     		mov	r4, r0
2476:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17804              		.loc 1 2476 2 view .LVU4624
 17805 0006 054A     		ldr	r2, .L1243
 17806 0008 01A8     		add	r0, sp, #4
 17807              	.LVL1294:
2476:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17808              		.loc 1 2476 2 view .LVU4625
 17809 000a FFF7FEFF 		bl	dn_subtract
 17810              	.LVL1295:
2477:src/xeq.c     **** }
 17811              		.loc 1 2477 2 is_stmt 1 view .LVU4626
2477:src/xeq.c     **** }
 17812              		.loc 1 2477 9 is_stmt 0 view .LVU4627
 17813 000e 044A     		ldr	r2, .L1243+4
 17814 0010 2046     		mov	r0, r4
 17815 0012 01A9     		add	r1, sp, #4
 17816 0014 FFF7FEFF 		bl	dn_divide
 17817              	.LVL1296:
2478:src/xeq.c     **** 
 17818              		.loc 1 2478 1 view .LVU4628
 17819 0018 0AB0     		add	sp, sp, #40
 17820              		.cfi_def_cfa_offset 8
 17821              		@ sp needed
 17822 001a 10BD     		pop	{r4, pc}
 17823              	.LVL1297:
 17824              	.L1244:
2478:src/xeq.c     **** 
 17825              		.loc 1 2478 1 view .LVU4629
 17826              		.align	2
 17827              	.L1243:
 17828 001c 00000000 		.word	const_32
 17829 0020 00000000 		.word	const_9on5
 17830              		.cfi_endproc
 17831              	.LFE173:
 17833              		.section	.text.convDB2AR,"ax",%progbits
 17834              		.align	1
 17835              		.p2align 2,,3
 17836              		.global	convDB2AR
 17837              		.syntax unified
 17838              		.thumb
 17839              		.thumb_func
ARM GAS  /tmp/ccQlyisH.s 			page 489


 17840              		.fpu fpv4-sp-d16
 17842              	convDB2AR:
 17843              	.LVL1298:
 17844              	.LFB174:
2480:src/xeq.c     **** 	decNumber t;
 17845              		.loc 1 2480 56 is_stmt 1 view -0
 17846              		.cfi_startproc
 17847              		@ args = 0, pretend = 0, frame = 40
 17848              		@ frame_needed = 0, uses_anonymous_args = 0
2481:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
 17849              		.loc 1 2481 2 view .LVU4631
2482:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17850              		.loc 1 2482 2 view .LVU4632
2480:src/xeq.c     **** 	decNumber t;
 17851              		.loc 1 2480 56 is_stmt 0 view .LVU4633
 17852 0000 10B5     		push	{r4, lr}
 17853              		.cfi_def_cfa_offset 8
 17854              		.cfi_offset 4, -8
 17855              		.cfi_offset 14, -4
 17856 0002 8AB0     		sub	sp, sp, #40
 17857              		.cfi_def_cfa_offset 48
2482:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17858              		.loc 1 2482 2 view .LVU4634
 17859 0004 054A     		ldr	r2, .L1247
2480:src/xeq.c     **** 	decNumber t;
 17860              		.loc 1 2480 56 view .LVU4635
 17861 0006 0446     		mov	r4, r0
2482:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17862              		.loc 1 2482 2 view .LVU4636
 17863 0008 01A8     		add	r0, sp, #4
 17864              	.LVL1299:
2482:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17865              		.loc 1 2482 2 view .LVU4637
 17866 000a FFF7FEFF 		bl	dn_multiply
 17867              	.LVL1300:
2483:src/xeq.c     **** }
 17868              		.loc 1 2483 2 is_stmt 1 view .LVU4638
2483:src/xeq.c     **** }
 17869              		.loc 1 2483 9 is_stmt 0 view .LVU4639
 17870 000e 01A9     		add	r1, sp, #4
 17871 0010 2046     		mov	r0, r4
 17872 0012 FFF7FEFF 		bl	decNumberPow10
 17873              	.LVL1301:
2484:src/xeq.c     **** 
 17874              		.loc 1 2484 1 view .LVU4640
 17875 0016 0AB0     		add	sp, sp, #40
 17876              		.cfi_def_cfa_offset 8
 17877              		@ sp needed
 17878 0018 10BD     		pop	{r4, pc}
 17879              	.LVL1302:
 17880              	.L1248:
2484:src/xeq.c     **** 
 17881              		.loc 1 2484 1 view .LVU4641
 17882 001a 00BF     		.align	2
 17883              	.L1247:
 17884 001c 00000000 		.word	const_0_05
 17885              		.cfi_endproc
ARM GAS  /tmp/ccQlyisH.s 			page 490


 17886              	.LFE174:
 17888              		.section	.text.convAR2DB,"ax",%progbits
 17889              		.align	1
 17890              		.p2align 2,,3
 17891              		.global	convAR2DB
 17892              		.syntax unified
 17893              		.thumb
 17894              		.thumb_func
 17895              		.fpu fpv4-sp-d16
 17897              	convAR2DB:
 17898              	.LVL1303:
 17899              	.LFB175:
2486:src/xeq.c     **** 	decNumber t;
 17900              		.loc 1 2486 56 is_stmt 1 view -0
 17901              		.cfi_startproc
 17902              		@ args = 0, pretend = 0, frame = 40
 17903              		@ frame_needed = 0, uses_anonymous_args = 0
2487:src/xeq.c     **** 	dn_log10(&t, x);
 17904              		.loc 1 2487 2 view .LVU4643
2488:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17905              		.loc 1 2488 2 view .LVU4644
2486:src/xeq.c     **** 	decNumber t;
 17906              		.loc 1 2486 56 is_stmt 0 view .LVU4645
 17907 0000 10B5     		push	{r4, lr}
 17908              		.cfi_def_cfa_offset 8
 17909              		.cfi_offset 4, -8
 17910              		.cfi_offset 14, -4
 17911 0002 8AB0     		sub	sp, sp, #40
 17912              		.cfi_def_cfa_offset 48
2486:src/xeq.c     **** 	decNumber t;
 17913              		.loc 1 2486 56 view .LVU4646
 17914 0004 0446     		mov	r4, r0
2488:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17915              		.loc 1 2488 2 view .LVU4647
 17916 0006 01A8     		add	r0, sp, #4
 17917              	.LVL1304:
2488:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17918              		.loc 1 2488 2 view .LVU4648
 17919 0008 FFF7FEFF 		bl	dn_log10
 17920              	.LVL1305:
2489:src/xeq.c     **** }
 17921              		.loc 1 2489 2 is_stmt 1 view .LVU4649
2489:src/xeq.c     **** }
 17922              		.loc 1 2489 9 is_stmt 0 view .LVU4650
 17923 000c 034A     		ldr	r2, .L1251
 17924 000e 2046     		mov	r0, r4
 17925 0010 01A9     		add	r1, sp, #4
 17926 0012 FFF7FEFF 		bl	dn_multiply
 17927              	.LVL1306:
2490:src/xeq.c     **** 
 17928              		.loc 1 2490 1 view .LVU4651
 17929 0016 0AB0     		add	sp, sp, #40
 17930              		.cfi_def_cfa_offset 8
 17931              		@ sp needed
 17932 0018 10BD     		pop	{r4, pc}
 17933              	.LVL1307:
 17934              	.L1252:
ARM GAS  /tmp/ccQlyisH.s 			page 491


2490:src/xeq.c     **** 
 17935              		.loc 1 2490 1 view .LVU4652
 17936 001a 00BF     		.align	2
 17937              	.L1251:
 17938 001c 00000000 		.word	const_20
 17939              		.cfi_endproc
 17940              	.LFE175:
 17942              		.section	.text.convDB2PR,"ax",%progbits
 17943              		.align	1
 17944              		.p2align 2,,3
 17945              		.global	convDB2PR
 17946              		.syntax unified
 17947              		.thumb
 17948              		.thumb_func
 17949              		.fpu fpv4-sp-d16
 17951              	convDB2PR:
 17952              	.LVL1308:
 17953              	.LFB176:
2492:src/xeq.c     **** 	decNumber t;
 17954              		.loc 1 2492 56 is_stmt 1 view -0
 17955              		.cfi_startproc
 17956              		@ args = 0, pretend = 0, frame = 40
 17957              		@ frame_needed = 0, uses_anonymous_args = 0
2493:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
 17958              		.loc 1 2493 2 view .LVU4654
2494:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17959              		.loc 1 2494 2 view .LVU4655
2492:src/xeq.c     **** 	decNumber t;
 17960              		.loc 1 2492 56 is_stmt 0 view .LVU4656
 17961 0000 10B5     		push	{r4, lr}
 17962              		.cfi_def_cfa_offset 8
 17963              		.cfi_offset 4, -8
 17964              		.cfi_offset 14, -4
 17965 0002 8AB0     		sub	sp, sp, #40
 17966              		.cfi_def_cfa_offset 48
2492:src/xeq.c     **** 	decNumber t;
 17967              		.loc 1 2492 56 view .LVU4657
 17968 0004 0446     		mov	r4, r0
2494:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17969              		.loc 1 2494 2 view .LVU4658
 17970 0006 4FF0FF32 		mov	r2, #-1
 17971 000a 01A8     		add	r0, sp, #4
 17972              	.LVL1309:
2494:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17973              		.loc 1 2494 2 view .LVU4659
 17974 000c FFF7FEFF 		bl	dn_mulpow10
 17975              	.LVL1310:
2495:src/xeq.c     **** }
 17976              		.loc 1 2495 2 is_stmt 1 view .LVU4660
2495:src/xeq.c     **** }
 17977              		.loc 1 2495 9 is_stmt 0 view .LVU4661
 17978 0010 01A9     		add	r1, sp, #4
 17979 0012 2046     		mov	r0, r4
 17980 0014 FFF7FEFF 		bl	decNumberPow10
 17981              	.LVL1311:
2496:src/xeq.c     **** 
 17982              		.loc 1 2496 1 view .LVU4662
ARM GAS  /tmp/ccQlyisH.s 			page 492


 17983 0018 0AB0     		add	sp, sp, #40
 17984              		.cfi_def_cfa_offset 8
 17985              		@ sp needed
 17986 001a 10BD     		pop	{r4, pc}
2496:src/xeq.c     **** 
 17987              		.loc 1 2496 1 view .LVU4663
 17988              		.cfi_endproc
 17989              	.LFE176:
 17991              		.section	.text.convPR2DB,"ax",%progbits
 17992              		.align	1
 17993              		.p2align 2,,3
 17994              		.global	convPR2DB
 17995              		.syntax unified
 17996              		.thumb
 17997              		.thumb_func
 17998              		.fpu fpv4-sp-d16
 18000              	convPR2DB:
 18001              	.LVL1312:
 18002              	.LFB177:
2498:src/xeq.c     **** 	decNumber t;
 18003              		.loc 1 2498 56 is_stmt 1 view -0
 18004              		.cfi_startproc
 18005              		@ args = 0, pretend = 0, frame = 40
 18006              		@ frame_needed = 0, uses_anonymous_args = 0
2499:src/xeq.c     **** 	dn_log10(&t, x);
 18007              		.loc 1 2499 2 view .LVU4665
2500:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18008              		.loc 1 2500 2 view .LVU4666
2498:src/xeq.c     **** 	decNumber t;
 18009              		.loc 1 2498 56 is_stmt 0 view .LVU4667
 18010 0000 10B5     		push	{r4, lr}
 18011              		.cfi_def_cfa_offset 8
 18012              		.cfi_offset 4, -8
 18013              		.cfi_offset 14, -4
 18014 0002 8AB0     		sub	sp, sp, #40
 18015              		.cfi_def_cfa_offset 48
2498:src/xeq.c     **** 	decNumber t;
 18016              		.loc 1 2498 56 view .LVU4668
 18017 0004 0446     		mov	r4, r0
2500:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18018              		.loc 1 2500 2 view .LVU4669
 18019 0006 01A8     		add	r0, sp, #4
 18020              	.LVL1313:
2500:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18021              		.loc 1 2500 2 view .LVU4670
 18022 0008 FFF7FEFF 		bl	dn_log10
 18023              	.LVL1314:
2501:src/xeq.c     **** }
 18024              		.loc 1 2501 2 is_stmt 1 view .LVU4671
2501:src/xeq.c     **** }
 18025              		.loc 1 2501 9 is_stmt 0 view .LVU4672
 18026 000c 2046     		mov	r0, r4
 18027 000e 01A9     		add	r1, sp, #4
 18028 0010 0122     		movs	r2, #1
 18029 0012 FFF7FEFF 		bl	dn_mulpow10
 18030              	.LVL1315:
2502:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 493


 18031              		.loc 1 2502 1 view .LVU4673
 18032 0016 0AB0     		add	sp, sp, #40
 18033              		.cfi_def_cfa_offset 8
 18034              		@ sp needed
 18035 0018 10BD     		pop	{r4, pc}
2502:src/xeq.c     **** 
 18036              		.loc 1 2502 1 view .LVU4674
 18037              		.cfi_endproc
 18038              	.LFE177:
 18040 001a 00BF     		.section	.text.do_conv,"ax",%progbits
 18041              		.align	1
 18042              		.p2align 2,,3
 18043              		.global	do_conv
 18044              		.syntax unified
 18045              		.thumb
 18046              		.thumb_func
 18047              		.fpu fpv4-sp-d16
 18049              	do_conv:
 18050              	.LVL1316:
 18051              	.LFB178:
2505:src/xeq.c     **** 	decNumber m;
 18052              		.loc 1 2505 66 is_stmt 1 view -0
 18053              		.cfi_startproc
 18054              		@ args = 0, pretend = 0, frame = 40
 18055              		@ frame_needed = 0, uses_anonymous_args = 0
2506:src/xeq.c     **** 	const unsigned int conv = arg / 2;
 18056              		.loc 1 2506 2 view .LVU4676
2507:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18057              		.loc 1 2507 2 view .LVU4677
2508:src/xeq.c     **** 
 18058              		.loc 1 2508 2 view .LVU4678
2510:src/xeq.c     **** 		decNumberCopy(r, x);
 18059              		.loc 1 2510 2 view .LVU4679
2505:src/xeq.c     **** 	decNumber m;
 18060              		.loc 1 2505 66 is_stmt 0 view .LVU4680
 18061 0000 70B5     		push	{r4, r5, r6, lr}
 18062              		.cfi_def_cfa_offset 16
 18063              		.cfi_offset 4, -16
 18064              		.cfi_offset 5, -12
 18065              		.cfi_offset 6, -8
 18066              		.cfi_offset 14, -4
2510:src/xeq.c     **** 		decNumberCopy(r, x);
 18067              		.loc 1 2510 5 view .LVU4681
 18068 0002 4D29     		cmp	r1, #77
2505:src/xeq.c     **** 	decNumber m;
 18069              		.loc 1 2505 66 view .LVU4682
 18070 0004 8AB0     		sub	sp, sp, #40
 18071              		.cfi_def_cfa_offset 56
2505:src/xeq.c     **** 	decNumber m;
 18072              		.loc 1 2505 66 view .LVU4683
 18073 0006 1546     		mov	r5, r2
2510:src/xeq.c     **** 		decNumberCopy(r, x);
 18074              		.loc 1 2510 5 view .LVU4684
 18075 0008 15D8     		bhi	.L1263
2515:src/xeq.c     **** 
 18076              		.loc 1 2515 2 is_stmt 1 view .LVU4685
 18077 000a 0D4B     		ldr	r3, .L1265
ARM GAS  /tmp/ccQlyisH.s 			page 494


 18078 000c 0646     		mov	r6, r0
2507:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18079              		.loc 1 2507 21 is_stmt 0 view .LVU4686
 18080 000e 4808     		lsrs	r0, r1, #1
 18081              	.LVL1317:
2507:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18082              		.loc 1 2507 21 view .LVU4687
 18083 0010 0C46     		mov	r4, r1
2515:src/xeq.c     **** 
 18084              		.loc 1 2515 2 view .LVU4688
 18085 0012 03EB0010 		add	r0, r3, r0, lsl #4
 18086 0016 01A9     		add	r1, sp, #4
 18087              	.LVL1318:
2515:src/xeq.c     **** 
 18088              		.loc 1 2515 2 view .LVU4689
 18089 0018 FFF7FEFF 		bl	decimal64ToNumber
 18090              	.LVL1319:
2517:src/xeq.c     **** 		dn_divide(r, x, &m);
 18091              		.loc 1 2517 2 is_stmt 1 view .LVU4690
2517:src/xeq.c     **** 		dn_divide(r, x, &m);
 18092              		.loc 1 2517 5 is_stmt 0 view .LVU4691
 18093 001c E307     		lsls	r3, r4, #31
2518:src/xeq.c     **** 	else			// imperial to metric
 18094              		.loc 1 2518 3 view .LVU4692
 18095 001e 01AA     		add	r2, sp, #4
 18096 0020 2946     		mov	r1, r5
 18097 0022 3046     		mov	r0, r6
2517:src/xeq.c     **** 		dn_divide(r, x, &m);
 18098              		.loc 1 2517 5 view .LVU4693
 18099 0024 03D5     		bpl	.L1264
2520:src/xeq.c     **** }
 18100              		.loc 1 2520 3 is_stmt 1 view .LVU4694
 18101 0026 FFF7FEFF 		bl	dn_multiply
 18102              	.LVL1320:
2521:src/xeq.c     **** 
 18103              		.loc 1 2521 1 is_stmt 0 view .LVU4695
 18104 002a 0AB0     		add	sp, sp, #40
 18105              		.cfi_remember_state
 18106              		.cfi_def_cfa_offset 16
 18107              		@ sp needed
 18108 002c 70BD     		pop	{r4, r5, r6, pc}
 18109              	.LVL1321:
 18110              	.L1264:
 18111              		.cfi_restore_state
2518:src/xeq.c     **** 	else			// imperial to metric
 18112              		.loc 1 2518 3 is_stmt 1 view .LVU4696
 18113 002e FFF7FEFF 		bl	dn_divide
 18114              	.LVL1322:
2521:src/xeq.c     **** 
 18115              		.loc 1 2521 1 is_stmt 0 view .LVU4697
 18116 0032 0AB0     		add	sp, sp, #40
 18117              		.cfi_remember_state
 18118              		.cfi_def_cfa_offset 16
 18119              		@ sp needed
 18120 0034 70BD     		pop	{r4, r5, r6, pc}
 18121              	.LVL1323:
 18122              	.L1263:
ARM GAS  /tmp/ccQlyisH.s 			page 495


 18123              		.cfi_restore_state
2511:src/xeq.c     **** 		return;
 18124              		.loc 1 2511 3 is_stmt 1 view .LVU4698
 18125 0036 1146     		mov	r1, r2
 18126              	.LVL1324:
2511:src/xeq.c     **** 		return;
 18127              		.loc 1 2511 3 is_stmt 0 view .LVU4699
 18128 0038 FFF7FEFF 		bl	decNumberCopy
 18129              	.LVL1325:
2512:src/xeq.c     **** 	}
 18130              		.loc 1 2512 3 is_stmt 1 view .LVU4700
2521:src/xeq.c     **** 
 18131              		.loc 1 2521 1 is_stmt 0 view .LVU4701
 18132 003c 0AB0     		add	sp, sp, #40
 18133              		.cfi_def_cfa_offset 16
 18134              		@ sp needed
 18135 003e 70BD     		pop	{r4, r5, r6, pc}
 18136              	.LVL1326:
 18137              	.L1266:
2521:src/xeq.c     **** 
 18138              		.loc 1 2521 1 view .LVU4702
 18139              		.align	2
 18140              	.L1265:
 18141 0040 00000000 		.word	cnsts_conv
 18142              		.cfi_endproc
 18143              	.LFE178:
 18145              		.section	.text.cmdconv,"ax",%progbits
 18146              		.align	1
 18147              		.p2align 2,,3
 18148              		.global	cmdconv
 18149              		.syntax unified
 18150              		.thumb
 18151              		.thumb_func
 18152              		.fpu fpv4-sp-d16
 18154              	cmdconv:
 18155              	.LVL1327:
 18156              	.LFB179:
2523:src/xeq.c     **** 	decNumber x, r;
 18157              		.loc 1 2523 46 is_stmt 1 view -0
 18158              		.cfi_startproc
 18159              		@ args = 0, pretend = 0, frame = 72
 18160              		@ frame_needed = 0, uses_anonymous_args = 0
2524:src/xeq.c     **** 
 18161              		.loc 1 2524 2 view .LVU4704
2526:src/xeq.c     **** 		return;
 18162              		.loc 1 2526 2 view .LVU4705
2526:src/xeq.c     **** 		return;
 18163              		.loc 1 2526 6 is_stmt 0 view .LVU4706
 18164 0000 0E4B     		ldr	r3, .L1275
 18165 0002 1B68     		ldr	r3, [r3]
 18166 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2526:src/xeq.c     **** 		return;
 18167              		.loc 1 2526 5 view .LVU4707
 18168 0008 DB07     		lsls	r3, r3, #31
 18169 000a 00D5     		bpl	.L1274
 18170 000c 7047     		bx	lr
 18171              	.L1274:
ARM GAS  /tmp/ccQlyisH.s 			page 496


2523:src/xeq.c     **** 	decNumber x, r;
 18172              		.loc 1 2523 46 view .LVU4708
 18173 000e 10B5     		push	{r4, lr}
 18174              		.cfi_def_cfa_offset 8
 18175              		.cfi_offset 4, -8
 18176              		.cfi_offset 14, -4
 18177 0010 92B0     		sub	sp, sp, #72
 18178              		.cfi_def_cfa_offset 80
 18179 0012 0446     		mov	r4, r0
2529:src/xeq.c     **** 	do_conv(&r, arg, &x);
 18180              		.loc 1 2529 2 is_stmt 1 view .LVU4709
 18181              	.LVL1328:
 18182              	.LBB2913:
 18183              	.LBI2913:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18184              		.loc 1 815 12 view .LVU4710
 18185              	.LBB2914:
 816:src/xeq.c     **** }
 18186              		.loc 1 816 2 view .LVU4711
 816:src/xeq.c     **** }
 18187              		.loc 1 816 9 is_stmt 0 view .LVU4712
 18188 0014 6421     		movs	r1, #100
 18189              	.LVL1329:
 816:src/xeq.c     **** }
 18190              		.loc 1 816 9 view .LVU4713
 18191 0016 6846     		mov	r0, sp
 18192              	.LVL1330:
 816:src/xeq.c     **** }
 18193              		.loc 1 816 9 view .LVU4714
 18194 0018 FFF7FEFF 		bl	getRegister
 18195              	.LVL1331:
 816:src/xeq.c     **** }
 18196              		.loc 1 816 9 view .LVU4715
 18197              	.LBE2914:
 18198              	.LBE2913:
2530:src/xeq.c     **** 	setlastX();
 18199              		.loc 1 2530 2 is_stmt 1 view .LVU4716
 18200 001c 6A46     		mov	r2, sp
 18201 001e 2146     		mov	r1, r4
 18202 0020 09A8     		add	r0, sp, #36
 18203 0022 FFF7FEFF 		bl	do_conv
 18204              	.LVL1332:
2531:src/xeq.c     **** 	setX(&r);
 18205              		.loc 1 2531 2 view .LVU4717
 18206              	.LBB2915:
 18207              	.LBI2915:
 783:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 18208              		.loc 1 783 6 view .LVU4718
 18209              	.LBB2916:
 784:src/xeq.c     **** }
 18210              		.loc 1 784 2 view .LVU4719
 18211 0026 6421     		movs	r1, #100
 18212 0028 6C20     		movs	r0, #108
 18213 002a FFF7FEFF 		bl	copyreg_n
 18214              	.LVL1333:
 18215              	.LBE2916:
 18216              	.LBE2915:
ARM GAS  /tmp/ccQlyisH.s 			page 497


2532:src/xeq.c     **** }
 18217              		.loc 1 2532 2 view .LVU4720
 18218              	.LBB2917:
 18219              	.LBI2917:
 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 18220              		.loc 1 819 6 view .LVU4721
 18221              	.LBB2918:
 820:src/xeq.c     **** }
 18222              		.loc 1 820 2 view .LVU4722
 18223 002e 09A9     		add	r1, sp, #36
 18224              	.LVL1334:
 820:src/xeq.c     **** }
 18225              		.loc 1 820 2 is_stmt 0 view .LVU4723
 18226 0030 6420     		movs	r0, #100
 18227 0032 FFF7FEFF 		bl	setRegister
 18228              	.LVL1335:
 820:src/xeq.c     **** }
 18229              		.loc 1 820 2 view .LVU4724
 18230              	.LBE2918:
 18231              	.LBE2917:
2533:src/xeq.c     **** 
 18232              		.loc 1 2533 1 view .LVU4725
 18233 0036 12B0     		add	sp, sp, #72
 18234              		.cfi_def_cfa_offset 8
 18235              		@ sp needed
 18236 0038 10BD     		pop	{r4, pc}
 18237              	.LVL1336:
 18238              	.L1276:
2533:src/xeq.c     **** 
 18239              		.loc 1 2533 1 view .LVU4726
 18240 003a 00BF     		.align	2
 18241              	.L1275:
 18242 003c 00000000 		.word	main_ram
 18243              		.cfi_endproc
 18244              	.LFE179:
 18246              		.section	.text.fin_tst,"ax",%progbits
 18247              		.align	1
 18248              		.p2align 2,,3
 18249              		.global	fin_tst
 18250              		.syntax unified
 18251              		.thumb
 18252              		.thumb_func
 18253              		.fpu fpv4-sp-d16
 18255              	fin_tst:
 18256              	.LVL1337:
 18257              	.LFB180:
2538:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 18258              		.loc 1 2538 27 is_stmt 1 view -0
 18259              		.cfi_startproc
 18260              		@ args = 0, pretend = 0, frame = 0
 18261              		@ frame_needed = 0, uses_anonymous_args = 0
 18262              		@ link register save eliminated.
2539:src/xeq.c     **** 	if (Running || XromRunning) {
 18263              		.loc 1 2539 2 view .LVU4728
2539:src/xeq.c     **** 	if (Running || XromRunning) {
 18264              		.loc 1 2539 31 is_stmt 0 view .LVU4729
 18265 0000 30B1     		cbz	r0, .L1284
ARM GAS  /tmp/ccQlyisH.s 			page 498


 18266              	.LVL1338:
2540:src/xeq.c     **** 		if (! a && incpc())
 18267              		.loc 1 2540 2 is_stmt 1 view .LVU4730
2540:src/xeq.c     **** 		if (! a && incpc())
 18268              		.loc 1 2540 14 is_stmt 0 view .LVU4731
 18269 0002 0A4A     		ldr	r2, .L1286
2540:src/xeq.c     **** 		if (! a && incpc())
 18270              		.loc 1 2540 6 view .LVU4732
 18271 0004 0A4B     		ldr	r3, .L1286+4
2540:src/xeq.c     **** 		if (! a && incpc())
 18272              		.loc 1 2540 14 view .LVU4733
 18273 0006 1268     		ldr	r2, [r2]
 18274 0008 1B68     		ldr	r3, [r3]
 18275 000a 1343     		orrs	r3, r2, r3
 18276 000c 0CD0     		beq	.L1285
2552:src/xeq.c     **** 
 18277              		.loc 1 2552 1 view .LVU4734
 18278 000e 7047     		bx	lr
 18279              	.LVL1339:
 18280              	.L1284:
2540:src/xeq.c     **** 		if (! a && incpc())
 18281              		.loc 1 2540 2 is_stmt 1 view .LVU4735
2540:src/xeq.c     **** 		if (! a && incpc())
 18282              		.loc 1 2540 14 is_stmt 0 view .LVU4736
 18283 0010 064A     		ldr	r2, .L1286
2540:src/xeq.c     **** 		if (! a && incpc())
 18284              		.loc 1 2540 6 view .LVU4737
 18285 0012 074B     		ldr	r3, .L1286+4
2540:src/xeq.c     **** 		if (! a && incpc())
 18286              		.loc 1 2540 14 view .LVU4738
 18287 0014 1268     		ldr	r2, [r2]
 18288 0016 1B68     		ldr	r3, [r3]
 18289 0018 1343     		orrs	r3, r2, r3
 18290 001a 03D1     		bne	.L1280
2539:src/xeq.c     **** 	if (Running || XromRunning) {
 18291              		.loc 1 2539 31 view .LVU4739
 18292 001c 054B     		ldr	r3, .L1286+8
 18293              	.LVL1340:
 18294              	.L1281:
2545:src/xeq.c     **** #ifdef INFRARED
 18295              		.loc 1 2545 3 is_stmt 1 view .LVU4740
2545:src/xeq.c     **** #ifdef INFRARED
 18296              		.loc 1 2545 11 is_stmt 0 view .LVU4741
 18297 001e 064A     		ldr	r2, .L1286+12
 18298 0020 1360     		str	r3, [r2]
2552:src/xeq.c     **** 
 18299              		.loc 1 2552 1 view .LVU4742
 18300 0022 7047     		bx	lr
 18301              	.LVL1341:
 18302              	.L1280:
2552:src/xeq.c     **** 
 18303              		.loc 1 2552 1 view .LVU4743
 18304 0024 FFF7FEBF 		b	fin_tst.part.0
 18305              	.LVL1342:
 18306              	.L1285:
2539:src/xeq.c     **** 	if (Running || XromRunning) {
 18307              		.loc 1 2539 31 view .LVU4744
ARM GAS  /tmp/ccQlyisH.s 			page 499


 18308 0028 044B     		ldr	r3, .L1286+16
 18309 002a F8E7     		b	.L1281
 18310              	.L1287:
 18311              		.align	2
 18312              	.L1286:
 18313 002c 00000000 		.word	XromRunning
 18314 0030 00000000 		.word	Running
 18315 0034 00000000 		.word	.LC3
 18316 0038 00000000 		.word	DispMsg
 18317 003c 00000000 		.word	.LC2
 18318              		.cfi_endproc
 18319              	.LFE180:
 18321              		.section	.text.check_mode,"ax",%progbits
 18322              		.align	1
 18323              		.p2align 2,,3
 18324              		.global	check_mode
 18325              		.syntax unified
 18326              		.thumb
 18327              		.thumb_func
 18328              		.fpu fpv4-sp-d16
 18330              	check_mode:
 18331              	.LVL1343:
 18332              	.LFB142:
2079:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
 18333              		.loc 1 2079 32 is_stmt 1 view -0
 18334              		.cfi_startproc
 18335              		@ args = 0, pretend = 0, frame = 0
 18336              		@ frame_needed = 0, uses_anonymous_args = 0
 18337              		@ link register save eliminated.
2080:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18338              		.loc 1 2080 2 view .LVU4746
2081:src/xeq.c     **** 
 18339              		.loc 1 2081 2 view .LVU4747
2080:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18340              		.loc 1 2080 35 is_stmt 0 view .LVU4748
 18341 0000 084B     		ldr	r3, .L1289
 18342              	.LVL1344:
2080:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18343              		.loc 1 2080 35 view .LVU4749
 18344 0002 1B68     		ldr	r3, [r3]
 18345              	.LVL1345:
2083:src/xeq.c     **** }
 18346              		.loc 1 2083 2 view .LVU4750
 18347 0004 A0F19F00 		sub	r0, #159
 18348              	.LVL1346:
2083:src/xeq.c     **** }
 18349              		.loc 1 2083 2 view .LVU4751
 18350 0008 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 18351              	.LVL1347:
2083:src/xeq.c     **** }
 18352              		.loc 1 2083 2 is_stmt 1 view .LVU4752
 18353 000c B0FA80F0 		clz	r0, r0
 18354 0010 4009     		lsrs	r0, r0, #5
 18355 0012 03F00103 		and	r3, r3, #1
 18356 0016 C01A     		subs	r0, r0, r3
 18357 0018 B0FA80F0 		clz	r0, r0
 18358 001c 4009     		lsrs	r0, r0, #5
ARM GAS  /tmp/ccQlyisH.s 			page 500


 18359 001e FFF7FEBF 		b	fin_tst
 18360              	.LVL1348:
 18361              	.L1290:
2083:src/xeq.c     **** }
 18362              		.loc 1 2083 2 is_stmt 0 view .LVU4753
 18363 0022 00BF     		.align	2
 18364              	.L1289:
 18365 0024 00000000 		.word	main_ram
 18366              		.cfi_endproc
 18367              	.LFE142:
 18369              		.section	.text.check_dblmode,"ax",%progbits
 18370              		.align	1
 18371              		.p2align 2,,3
 18372              		.global	check_dblmode
 18373              		.syntax unified
 18374              		.thumb
 18375              		.thumb_func
 18376              		.fpu fpv4-sp-d16
 18378              	check_dblmode:
 18379              	.LVL1349:
 18380              	.LFB143:
2089:src/xeq.c     **** 	fin_tst(is_dblmode());
 18381              		.loc 1 2089 35 is_stmt 1 view -0
 18382              		.cfi_startproc
 18383              		@ args = 0, pretend = 0, frame = 0
 18384              		@ frame_needed = 0, uses_anonymous_args = 0
 18385              		@ link register save eliminated.
2090:src/xeq.c     **** }
 18386              		.loc 1 2090 2 view .LVU4755
 18387              	.LBB2919:
 18388              	.LBI2919:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 18389              		.loc 1 1087 5 view .LVU4756
 18390              	.LBB2920:
1088:src/xeq.c     **** }
 18391              		.loc 1 1088 2 view .LVU4757
1088:src/xeq.c     **** }
 18392              		.loc 1 1088 24 is_stmt 0 view .LVU4758
 18393 0000 064B     		ldr	r3, .L1292
 18394 0002 1B68     		ldr	r3, [r3]
 18395 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 18396 0008 44F20100 		movw	r0, #16385
 18397              	.LVL1350:
1088:src/xeq.c     **** }
 18398              		.loc 1 1088 24 view .LVU4759
 18399 000c 1840     		ands	r0, r0, r3
 18400              	.LBE2920:
 18401              	.LBE2919:
2090:src/xeq.c     **** }
 18402              		.loc 1 2090 2 view .LVU4760
 18403 000e A0F58040 		sub	r0, r0, #16384
 18404 0012 B0FA80F0 		clz	r0, r0
 18405 0016 4009     		lsrs	r0, r0, #5
 18406 0018 FFF7FEBF 		b	fin_tst
 18407              	.LVL1351:
 18408              	.L1293:
 18409              		.align	2
ARM GAS  /tmp/ccQlyisH.s 			page 501


 18410              	.L1292:
 18411 001c 00000000 		.word	main_ram
 18412              		.cfi_endproc
 18413              	.LFE143:
 18415              		.section	.text.isTop,"ax",%progbits
 18416              		.align	1
 18417              		.p2align 2,,3
 18418              		.global	isTop
 18419              		.syntax unified
 18420              		.thumb
 18421              		.thumb_func
 18422              		.fpu fpv4-sp-d16
 18424              	isTop:
 18425              	.LVL1352:
 18426              	.LFB159:
2297:src/xeq.c     **** 	int top = 0;
 18427              		.loc 1 2297 27 is_stmt 1 view -0
 18428              		.cfi_startproc
 18429              		@ args = 0, pretend = 0, frame = 0
 18430              		@ frame_needed = 0, uses_anonymous_args = 0
 18431              		@ link register save eliminated.
2298:src/xeq.c     **** 
 18432              		.loc 1 2298 2 view .LVU4762
2300:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18433              		.loc 1 2300 2 view .LVU4763
2300:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18434              		.loc 1 2300 6 is_stmt 0 view .LVU4764
 18435 0000 0D4B     		ldr	r3, .L1302
 18436 0002 1868     		ldr	r0, [r3]
 18437              	.LVL1353:
2300:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18438              		.loc 1 2300 5 view .LVU4765
 18439 0004 68B1     		cbz	r0, .L1295
2301:src/xeq.c     **** 	}
 18440              		.loc 1 2301 3 is_stmt 1 view .LVU4766
2301:src/xeq.c     **** 	}
 18441              		.loc 1 2301 9 is_stmt 0 view .LVU4767
 18442 0006 0D4B     		ldr	r3, .L1302+4
 18443 0008 1B68     		ldr	r3, [r3]
 18444              	.LBB2921:
 18445              	.LBB2922:
 215:src/xeq.c     **** }
 18446              		.loc 1 215 9 view .LVU4768
 18447 000a B3F9DE27 		ldrsh	r2, [r3, #2014]
 18448              	.LBE2922:
 18449              	.LBE2921:
2301:src/xeq.c     **** 	}
 18450              		.loc 1 2301 9 view .LVU4769
 18451 000e B3F9E207 		ldrsh	r0, [r3, #2018]
 18452              	.LBB2925:
 18453              	.LBI2921:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 18454              		.loc 1 214 5 is_stmt 1 view .LVU4770
 18455              	.LBB2923:
 215:src/xeq.c     **** }
 18456              		.loc 1 215 2 view .LVU4771
 215:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 502


 18457              		.loc 1 215 57 is_stmt 0 view .LVU4772
 18458 0012 002A     		cmp	r2, #0
 18459 0014 07DB     		blt	.L1301
 18460 0016 4FF0FF33 		mov	r3, #-1
 18461              	.L1296:
 18462              	.LBE2923:
 18463              	.LBE2925:
2301:src/xeq.c     **** 	}
 18464              		.loc 1 2301 19 view .LVU4773
 18465 001a 9842     		cmp	r0, r3
 18466 001c B4BF     		ite	lt
 18467 001e 0020     		movlt	r0, #0
 18468 0020 0120     		movge	r0, #1
 18469              	.LVL1354:
 18470              	.L1295:
2303:src/xeq.c     **** }
 18471              		.loc 1 2303 2 is_stmt 1 view .LVU4774
 18472 0022 FFF7FEBF 		b	fin_tst
 18473              	.LVL1355:
 18474              	.L1301:
 18475              	.LBB2926:
 18476              	.LBB2924:
 215:src/xeq.c     **** }
 18477              		.loc 1 215 25 is_stmt 0 view .LVU4775
 18478 0026 064B     		ldr	r3, .L1302+8
 18479 0028 1B68     		ldr	r3, [r3]
 215:src/xeq.c     **** }
 18480              		.loc 1 215 57 view .LVU4776
 18481 002a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 18482 002e C3F30B03 		ubfx	r3, r3, #0, #12
 18483 0032 DB43     		mvns	r3, r3
 18484 0034 F1E7     		b	.L1296
 18485              	.L1303:
 18486 0036 00BF     		.align	2
 18487              	.L1302:
 18488 0038 00000000 		.word	Running
 18489 003c 00000000 		.word	main_ram
 18490 0040 00000000 		.word	RetStk
 18491              	.LBE2924:
 18492              	.LBE2926:
 18493              		.cfi_endproc
 18494              	.LFE159:
 18496              		.section	.text.cmdlblp,"ax",%progbits
 18497              		.align	1
 18498              		.p2align 2,,3
 18499              		.global	cmdlblp
 18500              		.syntax unified
 18501              		.thumb
 18502              		.thumb_func
 18503              		.fpu fpv4-sp-d16
 18505              	cmdlblp:
 18506              	.LVL1356:
 18507              	.LFB160:
2308:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 18508              		.loc 1 2308 46 is_stmt 1 view -0
 18509              		.cfi_startproc
 18510              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccQlyisH.s 			page 503


 18511              		@ frame_needed = 0, uses_anonymous_args = 0
2309:src/xeq.c     **** }
 18512              		.loc 1 2309 2 view .LVU4778
2308:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 18513              		.loc 1 2308 46 is_stmt 0 view .LVU4779
 18514 0000 08B5     		push	{r3, lr}
 18515              		.cfi_def_cfa_offset 8
 18516              		.cfi_offset 3, -8
 18517              		.cfi_offset 14, -4
2309:src/xeq.c     **** }
 18518              		.loc 1 2309 26 view .LVU4780
 18519 0002 084B     		ldr	r3, .L1306
 18520              	.LVL1357:
2309:src/xeq.c     **** }
 18521              		.loc 1 2309 26 view .LVU4781
 18522 0004 1B68     		ldr	r3, [r3]
 18523              	.LVL1358:
 18524              	.LBB2927:
 18525              	.LBI2927:
2183:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 18526              		.loc 1 2183 14 is_stmt 1 view .LVU4782
 18527              	.LBB2928:
2184:src/xeq.c     **** }
 18528              		.loc 1 2184 2 view .LVU4783
2184:src/xeq.c     **** }
 18529              		.loc 1 2184 9 is_stmt 0 view .LVU4784
 18530 0006 40F4C441 		orr	r1, r0, #25088
 18531              	.LVL1359:
2184:src/xeq.c     **** }
 18532              		.loc 1 2184 9 view .LVU4785
 18533 000a 0222     		movs	r2, #2
 18534 000c B3F8E007 		ldrh	r0, [r3, #2016]
 18535              	.LVL1360:
2184:src/xeq.c     **** }
 18536              		.loc 1 2184 9 view .LVU4786
 18537 0010 FFF7FEFF 		bl	find_opcode_from
 18538              	.LVL1361:
2184:src/xeq.c     **** }
 18539              		.loc 1 2184 9 view .LVU4787
 18540              	.LBE2928:
 18541              	.LBE2927:
2309:src/xeq.c     **** }
 18542              		.loc 1 2309 2 view .LVU4788
 18543 0014 0038     		subs	r0, r0, #0
2310:src/xeq.c     **** 
 18544              		.loc 1 2310 1 view .LVU4789
 18545 0016 BDE80840 		pop	{r3, lr}
 18546              		.cfi_restore 14
 18547              		.cfi_restore 3
 18548              		.cfi_def_cfa_offset 0
2309:src/xeq.c     **** }
 18549              		.loc 1 2309 2 view .LVU4790
 18550 001a 18BF     		it	ne
 18551 001c 0120     		movne	r0, #1
 18552 001e FFF7FEBF 		b	fin_tst
 18553              	.LVL1362:
 18554              	.L1307:
ARM GAS  /tmp/ccQlyisH.s 			page 504


 18555 0022 00BF     		.align	2
 18556              	.L1306:
 18557 0024 00000000 		.word	main_ram
 18558              		.cfi_endproc
 18559              	.LFE160:
 18561              		.section	.text.cmdmultilblp,"ax",%progbits
 18562              		.align	1
 18563              		.p2align 2,,3
 18564              		.global	cmdmultilblp
 18565              		.syntax unified
 18566              		.thumb
 18567              		.thumb_func
 18568              		.fpu fpv4-sp-d16
 18570              	cmdmultilblp:
 18571              	.LVL1363:
 18572              	.LFB163:
2337:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 18573              		.loc 1 2337 55 is_stmt 1 view -0
 18574              		.cfi_startproc
 18575              		@ args = 0, pretend = 0, frame = 0
 18576              		@ frame_needed = 0, uses_anonymous_args = 0
2338:src/xeq.c     **** }
 18577              		.loc 1 2338 2 view .LVU4792
2337:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 18578              		.loc 1 2337 55 is_stmt 0 view .LVU4793
 18579 0000 08B5     		push	{r3, lr}
 18580              		.cfi_def_cfa_offset 8
 18581              		.cfi_offset 3, -8
 18582              		.cfi_offset 14, -4
2338:src/xeq.c     **** }
 18583              		.loc 1 2338 10 view .LVU4794
 18584 0002 0021     		movs	r1, #0
 18585              	.LVL1364:
2338:src/xeq.c     **** }
 18586              		.loc 1 2338 10 view .LVU4795
 18587 0004 FFF7FEFF 		bl	findmultilbl
 18588              	.LVL1365:
2338:src/xeq.c     **** }
 18589              		.loc 1 2338 2 view .LVU4796
 18590 0008 0038     		subs	r0, r0, #0
2339:src/xeq.c     **** 
 18591              		.loc 1 2339 1 view .LVU4797
 18592 000a BDE80840 		pop	{r3, lr}
 18593              		.cfi_restore 14
 18594              		.cfi_restore 3
 18595              		.cfi_def_cfa_offset 0
2338:src/xeq.c     **** }
 18596              		.loc 1 2338 2 view .LVU4798
 18597 000e 18BF     		it	ne
 18598 0010 0120     		movne	r0, #1
 18599 0012 FFF7FEBF 		b	fin_tst
 18600              	.LVL1366:
 18601              		.cfi_endproc
 18602              	.LFE163:
 18604 0016 00BF     		.section	.text.cmdkeyp,"ax",%progbits
 18605              		.align	1
 18606              		.p2align 2,,3
ARM GAS  /tmp/ccQlyisH.s 			page 505


 18607              		.global	cmdkeyp
 18608              		.syntax unified
 18609              		.thumb
 18610              		.thumb_func
 18611              		.fpu fpv4-sp-d16
 18613              	cmdkeyp:
 18614              	.LVL1367:
 18615              	.LFB138:
2015:src/xeq.c     **** 	int cond = LastKey == 0;
 18616              		.loc 1 2015 46 is_stmt 1 view -0
 18617              		.cfi_startproc
 18618              		@ args = 0, pretend = 0, frame = 0
 18619              		@ frame_needed = 0, uses_anonymous_args = 0
2016:src/xeq.c     **** 	if (!cond) {
 18620              		.loc 1 2016 2 view .LVU4800
2015:src/xeq.c     **** 	int cond = LastKey == 0;
 18621              		.loc 1 2015 46 is_stmt 0 view .LVU4801
 18622 0000 70B5     		push	{r4, r5, r6, lr}
 18623              		.cfi_def_cfa_offset 16
 18624              		.cfi_offset 4, -16
 18625              		.cfi_offset 5, -12
 18626              		.cfi_offset 6, -8
 18627              		.cfi_offset 14, -4
2016:src/xeq.c     **** 	if (!cond) {
 18628              		.loc 1 2016 13 view .LVU4802
 18629 0002 104B     		ldr	r3, .L1317
 18630 0004 93F91320 		ldrsb	r2, [r3, #19]
2016:src/xeq.c     **** 	if (!cond) {
 18631              		.loc 1 2016 21 view .LVU4803
 18632 0008 002A     		cmp	r2, #0
2015:src/xeq.c     **** 	int cond = LastKey == 0;
 18633              		.loc 1 2015 46 view .LVU4804
 18634 000a 82B0     		sub	sp, sp, #8
 18635              		.cfi_def_cfa_offset 24
2016:src/xeq.c     **** 	if (!cond) {
 18636              		.loc 1 2016 21 view .LVU4805
 18637 000c 0CBF     		ite	eq
 18638 000e 0125     		moveq	r5, #1
 18639 0010 0025     		movne	r5, #0
 18640              	.LVL1368:
2017:src/xeq.c     **** 		int k = LastKey - 1;
 18641              		.loc 1 2017 2 is_stmt 1 view .LVU4806
2017:src/xeq.c     **** 		int k = LastKey - 1;
 18642              		.loc 1 2017 5 is_stmt 0 view .LVU4807
 18643 0012 05D1     		bne	.L1316
2022:src/xeq.c     **** }
 18644              		.loc 1 2022 2 is_stmt 1 view .LVU4808
 18645 0014 2846     		mov	r0, r5
 18646              	.LVL1369:
2023:src/xeq.c     **** 
 18647              		.loc 1 2023 1 is_stmt 0 view .LVU4809
 18648 0016 02B0     		add	sp, sp, #8
 18649              		.cfi_remember_state
 18650              		.cfi_def_cfa_offset 16
 18651              		@ sp needed
 18652 0018 BDE87040 		pop	{r4, r5, r6, lr}
 18653              		.cfi_restore 14
ARM GAS  /tmp/ccQlyisH.s 			page 506


 18654              		.cfi_restore 6
 18655              		.cfi_restore 5
 18656              		.cfi_restore 4
 18657              		.cfi_def_cfa_offset 0
 18658              	.LVL1370:
2022:src/xeq.c     **** }
 18659              		.loc 1 2022 2 view .LVU4810
 18660 001c FFF7FEBF 		b	fin_tst
 18661              	.LVL1371:
 18662              	.L1316:
 18663              		.cfi_restore_state
 18664              	.LBB2929:
2018:src/xeq.c     **** 		LastKey = 0;
 18665              		.loc 1 2018 3 is_stmt 1 view .LVU4811
2019:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18666              		.loc 1 2019 3 view .LVU4812
 18667 0020 0446     		mov	r4, r0
2019:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18668              		.loc 1 2019 11 is_stmt 0 view .LVU4813
 18669 0022 0026     		movs	r6, #0
2020:src/xeq.c     **** 	}
 18670              		.loc 1 2020 26 view .LVU4814
 18671 0024 501E     		subs	r0, r2, #1
 18672              	.LVL1372:
2019:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18673              		.loc 1 2019 11 view .LVU4815
 18674 0026 DE74     		strb	r6, [r3, #19]
2020:src/xeq.c     **** 	}
 18675              		.loc 1 2020 3 is_stmt 1 view .LVU4816
2020:src/xeq.c     **** 	}
 18676              		.loc 1 2020 26 is_stmt 0 view .LVU4817
 18677 0028 FFF7FEFF 		bl	keycode_to_row_column
 18678              	.LVL1373:
2020:src/xeq.c     **** 	}
 18679              		.loc 1 2020 26 view .LVU4818
 18680 002c 0246     		mov	r2, r0
2020:src/xeq.c     **** 	}
 18681              		.loc 1 2020 3 view .LVU4819
 18682 002e 0096     		str	r6, [sp]
 18683 0030 2046     		mov	r0, r4
 18684 0032 D317     		asrs	r3, r2, #31
 18685 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 18686              	.LVL1374:
 18687              	.LBE2929:
2022:src/xeq.c     **** }
 18688              		.loc 1 2022 2 is_stmt 1 view .LVU4820
 18689 0038 2846     		mov	r0, r5
2023:src/xeq.c     **** 
 18690              		.loc 1 2023 1 is_stmt 0 view .LVU4821
 18691 003a 02B0     		add	sp, sp, #8
 18692              		.cfi_def_cfa_offset 16
 18693              		@ sp needed
 18694 003c BDE87040 		pop	{r4, r5, r6, lr}
 18695              		.cfi_restore 14
 18696              		.cfi_restore 6
 18697              		.cfi_restore 5
 18698              		.cfi_restore 4
ARM GAS  /tmp/ccQlyisH.s 			page 507


 18699              		.cfi_def_cfa_offset 0
 18700              	.LVL1375:
2022:src/xeq.c     **** }
 18701              		.loc 1 2022 2 view .LVU4822
 18702 0040 FFF7FEBF 		b	fin_tst
 18703              	.LVL1376:
 18704              	.L1318:
2022:src/xeq.c     **** }
 18705              		.loc 1 2022 2 view .LVU4823
 18706              		.align	2
 18707              	.L1317:
 18708 0044 00000000 		.word	StateWhileOn
 18709              		.cfi_endproc
 18710              	.LFE138:
 18712              		.section	.text.do_tst,"ax",%progbits
 18713              		.align	1
 18714              		.p2align 2,,3
 18715              		.syntax unified
 18716              		.thumb
 18717              		.thumb_func
 18718              		.fpu fpv4-sp-d16
 18720              	do_tst:
 18721              	.LVL1377:
 18722              	.LFB186:
3253:src/xeq.c     **** 	int a = 0;
 18723              		.loc 1 3253 51 is_stmt 1 view -0
 18724              		.cfi_startproc
 18725              		@ args = 0, pretend = 0, frame = 112
 18726              		@ frame_needed = 0, uses_anonymous_args = 0
3254:src/xeq.c     **** 	int iszero, isneg;
 18727              		.loc 1 3254 2 view .LVU4825
3255:src/xeq.c     **** 
 18728              		.loc 1 3255 2 view .LVU4826
3257:src/xeq.c     **** 
 18729              		.loc 1 3257 2 view .LVU4827
 18730              	.LBB2930:
 18731              	.LBI2930:
1301:src/xeq.c     **** 	process_cmdline();
 18732              		.loc 1 1301 6 view .LVU4828
 18733              	.LBE2930:
1302:src/xeq.c     **** 	set_lift();
 18734              		.loc 1 1302 2 view .LVU4829
 18735              	.LBB2945:
 18736              	.LBB2931:
 18737              	.LBI2931:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 18738              		.loc 1 1195 6 view .LVU4830
 18739              	.LBB2932:
1196:src/xeq.c     **** 
 18740              		.loc 1 1196 2 view .LVU4831
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18741              		.loc 1 1198 2 view .LVU4832
 18742              	.LBE2932:
 18743              	.LBE2931:
 18744              	.LBE2945:
3253:src/xeq.c     **** 	int a = 0;
 18745              		.loc 1 3253 51 is_stmt 0 view .LVU4833
ARM GAS  /tmp/ccQlyisH.s 			page 508


 18746 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 18747              		.cfi_def_cfa_offset 28
 18748              		.cfi_offset 4, -28
 18749              		.cfi_offset 5, -24
 18750              		.cfi_offset 6, -20
 18751              		.cfi_offset 7, -16
 18752              		.cfi_offset 8, -12
 18753              		.cfi_offset 9, -8
 18754              		.cfi_offset 14, -4
 18755              	.LBB2946:
 18756              	.LBB2936:
 18757              	.LBB2933:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18758              		.loc 1 1198 6 view .LVU4834
 18759 0004 584D     		ldr	r5, .L1354
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18760              		.loc 1 1198 5 view .LVU4835
 18761 0006 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 18762              	.LBE2933:
 18763              	.LBE2936:
 18764              	.LBE2946:
3253:src/xeq.c     **** 	int a = 0;
 18765              		.loc 1 3253 51 view .LVU4836
 18766 0008 9DB0     		sub	sp, sp, #116
 18767              		.cfi_def_cfa_offset 144
3253:src/xeq.c     **** 	int a = 0;
 18768              		.loc 1 3253 51 view .LVU4837
 18769 000a 8046     		mov	r8, r0
 18770 000c 0C46     		mov	r4, r1
 18771              	.LBB2947:
 18772              	.LBB2937:
 18773              	.LBB2934:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18774              		.loc 1 1198 5 view .LVU4838
 18775 000e 002B     		cmp	r3, #0
 18776 0010 5DD1     		bne	.L1352
 18777              	.LVL1378:
 18778              	.L1320:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18779              		.loc 1 1198 5 view .LVU4839
 18780              	.LBE2934:
 18781              	.LBE2937:
 18782              	.LBE2947:
1303:src/xeq.c     **** }
 18783              		.loc 1 1303 2 is_stmt 1 view .LVU4840
 18784              	.LBB2948:
 18785              	.LBB2938:
 18786              	.LBI2938:
 758:src/xeq.c     ****     State2.state_lift = 1;
 18787              		.loc 1 758 6 view .LVU4841
 18788              	.LBB2939:
 759:src/xeq.c     **** }
 18789              		.loc 1 759 5 view .LVU4842
 759:src/xeq.c     **** }
 18790              		.loc 1 759 23 is_stmt 0 view .LVU4843
 18791 0012 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 18792              	.LBE2939:
ARM GAS  /tmp/ccQlyisH.s 			page 509


 18793              	.LBE2938:
 18794              	.LBE2948:
3259:src/xeq.c     **** 		unsigned long long int xv, yv;
 18795              		.loc 1 3259 6 view .LVU4844
 18796 0014 554A     		ldr	r2, .L1354+4
 18797              	.LBB2949:
 18798              	.LBB2942:
 18799              	.LBB2940:
 759:src/xeq.c     **** }
 18800              		.loc 1 759 23 view .LVU4845
 18801 0016 43F04003 		orr	r3, r3, #64
 18802              	.LBE2940:
 18803              	.LBE2942:
 18804              	.LBE2949:
3259:src/xeq.c     **** 		unsigned long long int xv, yv;
 18805              		.loc 1 3259 6 view .LVU4846
 18806 001a 1268     		ldr	r2, [r2]
 18807              	.LBB2950:
 18808              	.LBB2943:
 18809              	.LBB2941:
 759:src/xeq.c     **** }
 18810              		.loc 1 759 23 view .LVU4847
 18811 001c EB75     		strb	r3, [r5, #23]
 18812              	.LBE2941:
 18813              	.LBE2943:
 18814              	.LBE2950:
3259:src/xeq.c     **** 		unsigned long long int xv, yv;
 18815              		.loc 1 3259 2 is_stmt 1 view .LVU4848
3259:src/xeq.c     **** 		unsigned long long int xv, yv;
 18816              		.loc 1 3259 6 is_stmt 0 view .LVU4849
 18817 001e 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3259:src/xeq.c     **** 		unsigned long long int xv, yv;
 18818              		.loc 1 3259 5 view .LVU4850
 18819 0022 DB07     		lsls	r3, r3, #31
 18820 0024 2CD5     		bpl	.L1321
 18821              	.LBB2951:
3260:src/xeq.c     **** 		int xs, ys;
 18822              		.loc 1 3260 3 is_stmt 1 view .LVU4851
3261:src/xeq.c     **** 
 18823              		.loc 1 3261 3 view .LVU4852
3263:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18824              		.loc 1 3263 3 view .LVU4853
 18825              	.LBB2952:
 18826              	.LBI2952:
1411:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 18827              		.loc 1 1411 15 view .LVU4854
 18828              	.LBB2953:
1412:src/xeq.c     **** }
 18829              		.loc 1 1412 2 view .LVU4855
1412:src/xeq.c     **** }
 18830              		.loc 1 1412 9 is_stmt 0 view .LVU4856
 18831 0026 6420     		movs	r0, #100
 18832 0028 FFF7FEFF 		bl	get_reg_n_int
 18833              	.LVL1379:
 18834              	.LBE2953:
 18835              	.LBE2952:
3263:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
ARM GAS  /tmp/ccQlyisH.s 			page 510


 18836              		.loc 1 3263 8 view .LVU4857
 18837 002c 0AAA     		add	r2, sp, #40
 18838 002e FFF7FEFF 		bl	extract_value
 18839              	.LVL1380:
3264:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18840              		.loc 1 3264 6 view .LVU4858
 18841 0032 B8F5FA6F 		cmp	r8, #2000
3263:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18842              		.loc 1 3263 8 view .LVU4859
 18843 0036 0646     		mov	r6, r0
 18844 0038 0F46     		mov	r7, r1
 18845              	.LVL1381:
3264:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18846              		.loc 1 3264 3 is_stmt 1 view .LVU4860
3264:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18847              		.loc 1 3264 6 is_stmt 0 view .LVU4861
 18848 003a 54DB     		blt	.L1322
3265:src/xeq.c     **** 			ys = 0;
 18849              		.loc 1 3265 4 is_stmt 1 view .LVU4862
3265:src/xeq.c     **** 			ys = 0;
 18850              		.loc 1 3265 30 is_stmt 0 view .LVU4863
 18851 003c A8F61B08 		subw	r8, r8, #2075
 18852              	.LVL1382:
3265:src/xeq.c     **** 			ys = 0;
 18853              		.loc 1 3265 7 view .LVU4864
 18854 0040 4FEAE879 		asr	r9, r8, #31
 18855              	.LVL1383:
3266:src/xeq.c     **** 		} else
 18856              		.loc 1 3266 4 is_stmt 1 view .LVU4865
 18857 0044 0022     		movs	r2, #0
 18858              	.LVL1384:
 18859              	.L1323:
3270:src/xeq.c     **** 			iszero = 1;
 18860              		.loc 1 3270 3 view .LVU4866
3270:src/xeq.c     **** 			iszero = 1;
 18861              		.loc 1 3270 6 is_stmt 0 view .LVU4867
 18862 0046 56EA0703 		orrs	r3, r6, r7
 18863 004a 43D1     		bne	.L1324
3270:src/xeq.c     **** 			iszero = 1;
 18864              		.loc 1 3270 15 discriminator 1 view .LVU4868
 18865 004c 58EA0903 		orrs	r3, r8, r9
 18866 0050 53D0     		beq	.L1325
 18867              	.L1327:
 18868 0052 0A9B     		ldr	r3, [sp, #40]
3275:src/xeq.c     **** 			if (xs)		// both negative
 18869              		.loc 1 3275 6 view .LVU4869
 18870 0054 9A42     		cmp	r2, r3
3273:src/xeq.c     **** 
 18871              		.loc 1 3273 24 view .LVU4870
 18872 0056 4FF00000 		mov	r0, #0
 18873              	.LVL1385:
3275:src/xeq.c     **** 			if (xs)		// both negative
 18874              		.loc 1 3275 3 is_stmt 1 view .LVU4871
3275:src/xeq.c     **** 			if (xs)		// both negative
 18875              		.loc 1 3275 6 is_stmt 0 view .LVU4872
 18876 005a 53D0     		beq	.L1328
 18877              	.LVL1386:
ARM GAS  /tmp/ccQlyisH.s 			page 511


 18878              	.L1331:
3275:src/xeq.c     **** 			if (xs)		// both negative
 18879              		.loc 1 3275 6 view .LVU4873
 18880              	.LBE2951:
3303:src/xeq.c     **** 	case TST_APX:
 18881              		.loc 1 3303 2 is_stmt 1 view .LVU4874
 18882 005c 062C     		cmp	r4, #6
 18883 005e 30D8     		bhi	.L1337
 18884 0060 DFE804F0 		tbb	[pc, r4]
 18885              	.L1339:
 18886 0064 09       		.byte	(.L1336-.L1339)/2
 18887 0065 58       		.byte	(.L1351-.L1339)/2
 18888 0066 09       		.byte	(.L1336-.L1339)/2
 18889 0067 2E       		.byte	(.L1342-.L1339)/2
 18890 0068 67       		.byte	(.L1341-.L1339)/2
 18891 0069 6C       		.byte	(.L1340-.L1339)/2
 18892 006a 04       		.byte	(.L1338-.L1339)/2
 18893 006b 00       		.p2align 1
 18894              	.L1338:
3310:src/xeq.c     **** 	default:	a = 0;			break;
 18895              		.loc 1 3310 15 view .LVU4875
3310:src/xeq.c     **** 	default:	a = 0;			break;
 18896              		.loc 1 3310 26 is_stmt 0 view .LVU4876
 18897 006c 002B     		cmp	r3, #0
 18898 006e 6AD0     		beq	.L1346
3310:src/xeq.c     **** 	default:	a = 0;			break;
 18899              		.loc 1 3310 26 discriminator 2 view .LVU4877
 18900 0070 0038     		subs	r0, r0, #0
3310:src/xeq.c     **** 	default:	a = 0;			break;
 18901              		.loc 1 3310 26 discriminator 2 view .LVU4878
 18902 0072 18BF     		it	ne
 18903 0074 0120     		movne	r0, #1
 18904              	.LVL1387:
 18905              	.L1336:
3314:src/xeq.c     **** }
 18906              		.loc 1 3314 7 is_stmt 1 view .LVU4879
 18907 0076 FFF7FEFF 		bl	fin_tst
 18908              	.LVL1388:
3315:src/xeq.c     **** 
 18909              		.loc 1 3315 1 is_stmt 0 view .LVU4880
 18910 007a 1DB0     		add	sp, sp, #116
 18911              		.cfi_remember_state
 18912              		.cfi_def_cfa_offset 28
 18913              		@ sp needed
 18914 007c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 18915              	.LVL1389:
 18916              	.L1321:
 18917              		.cfi_restore_state
 18918              	.LBB2954:
3283:src/xeq.c     **** 
 18919              		.loc 1 3283 3 is_stmt 1 view .LVU4881
3285:src/xeq.c     **** 		if (decNumberIsNaN(&x))
 18920              		.loc 1 3285 3 view .LVU4882
 18921              	.LBB2955:
 18922              	.LBI2955:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18923              		.loc 1 815 12 view .LVU4883
ARM GAS  /tmp/ccQlyisH.s 			page 512


 18924              	.LBB2956:
 816:src/xeq.c     **** }
 18925              		.loc 1 816 2 view .LVU4884
 816:src/xeq.c     **** }
 18926              		.loc 1 816 9 is_stmt 0 view .LVU4885
 18927 0080 0AA8     		add	r0, sp, #40
 18928              	.LVL1390:
 816:src/xeq.c     **** }
 18929              		.loc 1 816 9 view .LVU4886
 18930 0082 6421     		movs	r1, #100
 18931 0084 FFF7FEFF 		bl	getRegister
 18932              	.LVL1391:
 816:src/xeq.c     **** }
 18933              		.loc 1 816 9 view .LVU4887
 18934              	.LBE2956:
 18935              	.LBE2955:
3286:src/xeq.c     **** 			goto flse;
 18936              		.loc 1 3286 3 is_stmt 1 view .LVU4888
3286:src/xeq.c     **** 			goto flse;
 18937              		.loc 1 3286 6 is_stmt 0 view .LVU4889
 18938 0088 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
 18939 008c 13F0300F 		tst	r3, #48
 18940 0090 17D1     		bne	.L1337
3289:src/xeq.c     **** 		if (decNumberIsNaN(&t))
 18941              		.loc 1 3289 3 is_stmt 1 view .LVU4890
 18942 0092 01A8     		add	r0, sp, #4
 18943 0094 4146     		mov	r1, r8
 18944 0096 FFF7FEFF 		bl	getRegister
 18945              	.LVL1392:
3290:src/xeq.c     **** 			goto flse;
 18946              		.loc 1 3290 3 view .LVU4891
3290:src/xeq.c     **** 			goto flse;
 18947              		.loc 1 3290 6 is_stmt 0 view .LVU4892
 18948 009a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 18949 009e 13F0300F 		tst	r3, #48
 18950 00a2 0ED1     		bne	.L1337
3293:src/xeq.c     **** 			decNumberRnd(&x, &x);
 18951              		.loc 1 3293 3 is_stmt 1 view .LVU4893
3293:src/xeq.c     **** 			decNumberRnd(&x, &x);
 18952              		.loc 1 3293 6 is_stmt 0 view .LVU4894
 18953 00a4 022C     		cmp	r4, #2
 18954 00a6 53D0     		beq	.L1353
 18955              	.L1334:
3298:src/xeq.c     **** 		iszero = dn_eq0(&r);
 18956              		.loc 1 3298 3 is_stmt 1 view .LVU4895
 18957 00a8 01AA     		add	r2, sp, #4
 18958 00aa 0AA9     		add	r1, sp, #40
 18959 00ac 13A8     		add	r0, sp, #76
 18960 00ae FFF7FEFF 		bl	dn_compare
 18961              	.LVL1393:
3299:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 18962              		.loc 1 3299 3 view .LVU4896
3299:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 18963              		.loc 1 3299 12 is_stmt 0 view .LVU4897
 18964 00b2 13A8     		add	r0, sp, #76
 18965 00b4 FFF7FEFF 		bl	dn_eq0
 18966              	.LVL1394:
ARM GAS  /tmp/ccQlyisH.s 			page 513


3300:src/xeq.c     **** 	}
 18967              		.loc 1 3300 11 view .LVU4898
 18968 00b8 9DF95430 		ldrsb	r3, [sp, #84]
 18969              	.LVL1395:
3300:src/xeq.c     **** 	}
 18970              		.loc 1 3300 3 is_stmt 1 view .LVU4899
3300:src/xeq.c     **** 	}
 18971              		.loc 1 3300 11 is_stmt 0 view .LVU4900
 18972 00bc DB0F     		lsrs	r3, r3, #31
 18973              	.LVL1396:
3300:src/xeq.c     **** 	}
 18974              		.loc 1 3300 11 view .LVU4901
 18975 00be CDE7     		b	.L1331
 18976              	.LVL1397:
 18977              	.L1342:
3300:src/xeq.c     **** 	}
 18978              		.loc 1 3300 11 view .LVU4902
 18979              	.LBE2954:
3307:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 18980              		.loc 1 3307 15 is_stmt 1 view .LVU4903
3307:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 18981              		.loc 1 3307 25 is_stmt 0 view .LVU4904
 18982 00c0 43BB     		cbnz	r3, .L1351
 18983              	.LVL1398:
 18984              	.L1337:
3307:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 18985              		.loc 1 3307 25 view .LVU4905
 18986 00c2 0020     		movs	r0, #0
 18987              	.LVL1399:
3314:src/xeq.c     **** }
 18988              		.loc 1 3314 7 is_stmt 1 view .LVU4906
 18989 00c4 FFF7FEFF 		bl	fin_tst
 18990              	.LVL1400:
3315:src/xeq.c     **** 
 18991              		.loc 1 3315 1 is_stmt 0 view .LVU4907
 18992 00c8 1DB0     		add	sp, sp, #116
 18993              		.cfi_remember_state
 18994              		.cfi_def_cfa_offset 28
 18995              		@ sp needed
 18996 00ca BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 18997              	.LVL1401:
 18998              	.L1352:
 18999              		.cfi_restore_state
 19000              	.LBB2957:
 19001              	.LBB2944:
 19002              	.LBB2935:
3315:src/xeq.c     **** 
 19003              		.loc 1 3315 1 view .LVU4908
 19004 00ce FFF7FEFF 		bl	process_cmdline.part.0
 19005              	.LVL1402:
3315:src/xeq.c     **** 
 19006              		.loc 1 3315 1 view .LVU4909
 19007 00d2 9EE7     		b	.L1320
 19008              	.LVL1403:
 19009              	.L1324:
3315:src/xeq.c     **** 
 19010              		.loc 1 3315 1 view .LVU4910
ARM GAS  /tmp/ccQlyisH.s 			page 514


 19011              	.LBE2935:
 19012              	.LBE2944:
 19013              	.LBE2957:
 19014              	.LBB2958:
3273:src/xeq.c     **** 
 19015              		.loc 1 3273 4 is_stmt 1 view .LVU4911
3273:src/xeq.c     **** 
 19016              		.loc 1 3273 24 is_stmt 0 view .LVU4912
 19017 00d4 B945     		cmp	r9, r7
 19018 00d6 08BF     		it	eq
 19019 00d8 B045     		cmpeq	r8, r6
 19020 00da BAD1     		bne	.L1327
3273:src/xeq.c     **** 
 19021              		.loc 1 3273 31 discriminator 1 view .LVU4913
 19022 00dc 0A9B     		ldr	r3, [sp, #40]
3273:src/xeq.c     **** 
 19023              		.loc 1 3273 24 discriminator 1 view .LVU4914
 19024 00de 9342     		cmp	r3, r2
 19025 00e0 33D0     		beq	.L1344
3273:src/xeq.c     **** 
 19026              		.loc 1 3273 24 view .LVU4915
 19027 00e2 0020     		movs	r0, #0
 19028 00e4 BAE7     		b	.L1331
 19029              	.LVL1404:
 19030              	.L1322:
3268:src/xeq.c     **** 
 19031              		.loc 1 3268 4 is_stmt 1 view .LVU4916
3268:src/xeq.c     **** 
 19032              		.loc 1 3268 9 is_stmt 0 view .LVU4917
 19033 00e6 4046     		mov	r0, r8
 19034 00e8 FFF7FEFF 		bl	get_reg_n_int
 19035              	.LVL1405:
 19036 00ec 13AA     		add	r2, sp, #76
 19037 00ee FFF7FEFF 		bl	extract_value
 19038              	.LVL1406:
 19039 00f2 139A     		ldr	r2, [sp, #76]
 19040 00f4 8046     		mov	r8, r0
 19041              	.LVL1407:
3268:src/xeq.c     **** 
 19042              		.loc 1 3268 9 view .LVU4918
 19043 00f6 8946     		mov	r9, r1
 19044              	.LVL1408:
3268:src/xeq.c     **** 
 19045              		.loc 1 3268 9 view .LVU4919
 19046 00f8 A5E7     		b	.L1323
 19047              	.L1325:
3268:src/xeq.c     **** 
 19048              		.loc 1 3268 9 view .LVU4920
 19049 00fa 0A9B     		ldr	r3, [sp, #40]
3275:src/xeq.c     **** 			if (xs)		// both negative
 19050              		.loc 1 3275 6 view .LVU4921
 19051 00fc 9A42     		cmp	r2, r3
3271:src/xeq.c     **** 		else
 19052              		.loc 1 3271 11 view .LVU4922
 19053 00fe 4FF00100 		mov	r0, #1
 19054              	.LVL1409:
3275:src/xeq.c     **** 			if (xs)		// both negative
ARM GAS  /tmp/ccQlyisH.s 			page 515


 19055              		.loc 1 3275 3 is_stmt 1 view .LVU4923
3275:src/xeq.c     **** 			if (xs)		// both negative
 19056              		.loc 1 3275 6 is_stmt 0 view .LVU4924
 19057 0102 ABD1     		bne	.L1331
 19058              	.LVL1410:
 19059              	.L1328:
3276:src/xeq.c     **** 				isneg = xv > yv;
 19060              		.loc 1 3276 4 is_stmt 1 view .LVU4925
3276:src/xeq.c     **** 				isneg = xv > yv;
 19061              		.loc 1 3276 7 is_stmt 0 view .LVU4926
 19062 0104 73B1     		cbz	r3, .L1330
3277:src/xeq.c     **** 			else		// both positive
 19063              		.loc 1 3277 5 is_stmt 1 view .LVU4927
3277:src/xeq.c     **** 			else		// both positive
 19064              		.loc 1 3277 16 is_stmt 0 view .LVU4928
 19065 0106 B945     		cmp	r9, r7
 19066 0108 08BF     		it	eq
 19067 010a B045     		cmpeq	r8, r6
 19068 010c 34BF     		ite	cc
 19069 010e 0123     		movcc	r3, #1
 19070 0110 0023     		movcs	r3, #0
 19071              	.LVL1411:
3277:src/xeq.c     **** 			else		// both positive
 19072              		.loc 1 3277 16 view .LVU4929
 19073 0112 A3E7     		b	.L1331
 19074              	.LVL1412:
 19075              	.L1351:
3277:src/xeq.c     **** 			else		// both positive
 19076              		.loc 1 3277 16 view .LVU4930
 19077              	.LBE2958:
3307:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19078              		.loc 1 3307 25 discriminator 1 view .LVU4931
 19079 0114 B0FA80F0 		clz	r0, r0
 19080              	.LVL1413:
3307:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19081              		.loc 1 3307 25 discriminator 1 view .LVU4932
 19082 0118 4009     		lsrs	r0, r0, #5
 19083              	.LVL1414:
3314:src/xeq.c     **** }
 19084              		.loc 1 3314 7 is_stmt 1 discriminator 1 view .LVU4933
 19085 011a FFF7FEFF 		bl	fin_tst
 19086              	.LVL1415:
3315:src/xeq.c     **** 
 19087              		.loc 1 3315 1 is_stmt 0 discriminator 1 view .LVU4934
 19088 011e 1DB0     		add	sp, sp, #116
 19089              		.cfi_remember_state
 19090              		.cfi_def_cfa_offset 28
 19091              		@ sp needed
 19092 0120 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 19093              	.LVL1416:
 19094              	.L1330:
 19095              		.cfi_restore_state
 19096              	.LBB2959:
3279:src/xeq.c     **** 		} else
 19097              		.loc 1 3279 5 is_stmt 1 view .LVU4935
3279:src/xeq.c     **** 		} else
 19098              		.loc 1 3279 16 is_stmt 0 view .LVU4936
ARM GAS  /tmp/ccQlyisH.s 			page 516


 19099 0124 4F45     		cmp	r7, r9
 19100 0126 08BF     		it	eq
 19101 0128 4645     		cmpeq	r6, r8
 19102 012a 34BF     		ite	cc
 19103 012c 0123     		movcc	r3, #1
 19104 012e 0023     		movcs	r3, #0
 19105              	.LVL1417:
3279:src/xeq.c     **** 		} else
 19106              		.loc 1 3279 16 view .LVU4937
 19107 0130 94E7     		b	.L1331
 19108              	.LVL1418:
 19109              	.L1341:
3279:src/xeq.c     **** 		} else
 19110              		.loc 1 3279 16 view .LVU4938
 19111              	.LBE2959:
3308:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19112              		.loc 1 3308 15 is_stmt 1 discriminator 2 view .LVU4939
3308:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19113              		.loc 1 3308 25 is_stmt 0 discriminator 2 view .LVU4940
 19114 0132 0343     		orrs	r3, r0, r3
 19115              	.LVL1419:
3308:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19116              		.loc 1 3308 25 discriminator 2 view .LVU4941
 19117 0134 14BF     		ite	ne
 19118 0136 0120     		movne	r0, #1
 19119              	.LVL1420:
3308:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19120              		.loc 1 3308 25 discriminator 2 view .LVU4942
 19121 0138 0020     		moveq	r0, #0
 19122 013a 9CE7     		b	.L1336
 19123              	.LVL1421:
 19124              	.L1340:
3309:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19125              		.loc 1 3309 15 is_stmt 1 discriminator 1 view .LVU4943
3309:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19126              		.loc 1 3309 26 is_stmt 0 discriminator 1 view .LVU4944
 19127 013c 0343     		orrs	r3, r0, r3
 19128              	.LVL1422:
3309:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19129              		.loc 1 3309 26 discriminator 1 view .LVU4945
 19130 013e 0CBF     		ite	eq
 19131 0140 0120     		moveq	r0, #1
 19132              	.LVL1423:
3309:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19133              		.loc 1 3309 26 discriminator 1 view .LVU4946
 19134 0142 0020     		movne	r0, #0
 19135 0144 97E7     		b	.L1336
 19136              	.LVL1424:
 19137              	.L1346:
3310:src/xeq.c     **** 	default:	a = 0;			break;
 19138              		.loc 1 3310 26 view .LVU4947
 19139 0146 0120     		movs	r0, #1
 19140              	.LVL1425:
3310:src/xeq.c     **** 	default:	a = 0;			break;
 19141              		.loc 1 3310 26 view .LVU4948
 19142 0148 95E7     		b	.L1336
 19143              	.LVL1426:
ARM GAS  /tmp/ccQlyisH.s 			page 517


 19144              	.L1344:
 19145              	.LBB2960:
3310:src/xeq.c     **** 	default:	a = 0;			break;
 19146              		.loc 1 3310 26 view .LVU4949
 19147 014a 1346     		mov	r3, r2
3273:src/xeq.c     **** 
 19148              		.loc 1 3273 24 view .LVU4950
 19149 014c 0120     		movs	r0, #1
 19150 014e D9E7     		b	.L1328
 19151              	.LVL1427:
 19152              	.L1353:
3273:src/xeq.c     **** 
 19153              		.loc 1 3273 24 view .LVU4951
 19154              	.LBE2960:
 19155              	.LBB2961:
3294:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
 19156              		.loc 1 3294 4 is_stmt 1 view .LVU4952
 19157 0150 0AA9     		add	r1, sp, #40
 19158 0152 0846     		mov	r0, r1
 19159 0154 FFF7FEFF 		bl	decNumberRnd
 19160              	.LVL1428:
3295:src/xeq.c     **** 				decNumberRnd(&t, &t);
 19161              		.loc 1 3295 4 view .LVU4953
3295:src/xeq.c     **** 				decNumberRnd(&t, &t);
 19162              		.loc 1 3295 7 is_stmt 0 view .LVU4954
 19163 0158 B8F5FA6F 		cmp	r8, #2000
 19164 015c A4DA     		bge	.L1334
3296:src/xeq.c     **** 		}
 19165              		.loc 1 3296 5 is_stmt 1 view .LVU4955
 19166 015e 01A9     		add	r1, sp, #4
 19167 0160 0846     		mov	r0, r1
 19168 0162 FFF7FEFF 		bl	decNumberRnd
 19169              	.LVL1429:
 19170 0166 9FE7     		b	.L1334
 19171              	.L1355:
 19172              		.align	2
 19173              	.L1354:
 19174 0168 00000000 		.word	StateWhileOn
 19175 016c 00000000 		.word	main_ram
 19176              	.LBE2961:
 19177              		.cfi_endproc
 19178              	.LFE186:
 19180              		.section	.text.do_ztst,"ax",%progbits
 19181              		.align	1
 19182              		.p2align 2,,3
 19183              		.syntax unified
 19184              		.thumb
 19185              		.thumb_func
 19186              		.fpu fpv4-sp-d16
 19188              	do_ztst:
 19189              	.LVL1430:
 19190              	.LFB189:
3340:src/xeq.c     **** 	decNumber x, y;
 19191              		.loc 1 3340 79 view -0
 19192              		.cfi_startproc
 19193              		@ args = 0, pretend = 0, frame = 72
 19194              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQlyisH.s 			page 518


3341:src/xeq.c     **** 
 19195              		.loc 1 3341 2 view .LVU4957
3343:src/xeq.c     **** 	if (is_intmode()) {
 19196              		.loc 1 3343 2 view .LVU4958
 19197              	.LBB2979:
 19198              	.LBI2979:
1301:src/xeq.c     **** 	process_cmdline();
 19199              		.loc 1 1301 6 view .LVU4959
 19200              	.LBE2979:
1302:src/xeq.c     **** 	set_lift();
 19201              		.loc 1 1302 2 view .LVU4960
 19202              	.LBB2994:
 19203              	.LBB2980:
 19204              	.LBI2980:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 19205              		.loc 1 1195 6 view .LVU4961
 19206              	.LBB2981:
1196:src/xeq.c     **** 
 19207              		.loc 1 1196 2 view .LVU4962
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19208              		.loc 1 1198 2 view .LVU4963
 19209              	.LBE2981:
 19210              	.LBE2980:
 19211              	.LBE2994:
3340:src/xeq.c     **** 	decNumber x, y;
 19212              		.loc 1 3340 79 is_stmt 0 view .LVU4964
 19213 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 19214              		.cfi_def_cfa_offset 20
 19215              		.cfi_offset 4, -20
 19216              		.cfi_offset 5, -16
 19217              		.cfi_offset 6, -12
 19218              		.cfi_offset 7, -8
 19219              		.cfi_offset 14, -4
 19220              	.LBB2995:
 19221              	.LBB2985:
 19222              	.LBB2982:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19223              		.loc 1 1198 6 view .LVU4965
 19224 0002 2C4C     		ldr	r4, .L1375
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19225              		.loc 1 1198 5 view .LVU4966
 19226 0004 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 19227              	.LBE2982:
 19228              	.LBE2985:
 19229              	.LBE2995:
3340:src/xeq.c     **** 	decNumber x, y;
 19230              		.loc 1 3340 79 view .LVU4967
 19231 0006 93B0     		sub	sp, sp, #76
 19232              		.cfi_def_cfa_offset 96
3340:src/xeq.c     **** 	decNumber x, y;
 19233              		.loc 1 3340 79 view .LVU4968
 19234 0008 0546     		mov	r5, r0
 19235 000a 0F46     		mov	r7, r1
 19236 000c 1646     		mov	r6, r2
 19237              	.LBB2996:
 19238              	.LBB2986:
 19239              	.LBB2983:
ARM GAS  /tmp/ccQlyisH.s 			page 519


1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19240              		.loc 1 1198 5 view .LVU4969
 19241 000e 002B     		cmp	r3, #0
 19242 0010 3FD1     		bne	.L1372
 19243              	.LVL1431:
 19244              	.L1357:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19245              		.loc 1 1198 5 view .LVU4970
 19246              	.LBE2983:
 19247              	.LBE2986:
 19248              	.LBE2996:
1303:src/xeq.c     **** }
 19249              		.loc 1 1303 2 is_stmt 1 view .LVU4971
 19250              	.LBB2997:
 19251              	.LBB2987:
 19252              	.LBI2987:
 758:src/xeq.c     ****     State2.state_lift = 1;
 19253              		.loc 1 758 6 view .LVU4972
 19254              	.LBB2988:
 759:src/xeq.c     **** }
 19255              		.loc 1 759 5 view .LVU4973
 759:src/xeq.c     **** }
 19256              		.loc 1 759 23 is_stmt 0 view .LVU4974
 19257 0012 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 19258              	.LBE2988:
 19259              	.LBE2987:
 19260              	.LBE2997:
3344:src/xeq.c     **** 		bad_mode_error();
 19261              		.loc 1 3344 6 view .LVU4975
 19262 0014 284A     		ldr	r2, .L1375+4
 19263              	.LBB2998:
 19264              	.LBB2991:
 19265              	.LBB2989:
 759:src/xeq.c     **** }
 19266              		.loc 1 759 23 view .LVU4976
 19267 0016 43F04003 		orr	r3, r3, #64
 19268              	.LBE2989:
 19269              	.LBE2991:
 19270              	.LBE2998:
3344:src/xeq.c     **** 		bad_mode_error();
 19271              		.loc 1 3344 6 view .LVU4977
 19272 001a 1268     		ldr	r2, [r2]
 19273              	.LBB2999:
 19274              	.LBB2992:
 19275              	.LBB2990:
 759:src/xeq.c     **** }
 19276              		.loc 1 759 23 view .LVU4978
 19277 001c E375     		strb	r3, [r4, #23]
 19278              	.LBE2990:
 19279              	.LBE2992:
 19280              	.LBE2999:
3344:src/xeq.c     **** 		bad_mode_error();
 19281              		.loc 1 3344 2 is_stmt 1 view .LVU4979
3344:src/xeq.c     **** 		bad_mode_error();
 19282              		.loc 1 3344 6 is_stmt 0 view .LVU4980
 19283 001e 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3344:src/xeq.c     **** 		bad_mode_error();
ARM GAS  /tmp/ccQlyisH.s 			page 520


 19284              		.loc 1 3344 5 view .LVU4981
 19285 0022 DB07     		lsls	r3, r3, #31
 19286 0024 06D5     		bpl	.L1358
3345:src/xeq.c     **** 		return;
 19287              		.loc 1 3345 3 is_stmt 1 view .LVU4982
 19288              	.LBB3000:
 19289              	.LBI3000:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 19290              		.loc 1 566 6 view .LVU4983
 19291              	.LBE3000:
 567:src/xeq.c     **** }
 19292              		.loc 1 567 2 view .LVU4984
 19293              	.LVL1432:
 19294              	.LBB3005:
 19295              	.LBB3001:
 19296              	.LBI3001:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19297              		.loc 1 537 5 view .LVU4985
 19298              	.LBB3002:
 538:src/xeq.c     **** 		Error = e;
 19299              		.loc 1 538 2 view .LVU4986
 538:src/xeq.c     **** 		Error = e;
 19300              		.loc 1 538 12 is_stmt 0 view .LVU4987
 19301 0026 254B     		ldr	r3, .L1375+8
 538:src/xeq.c     **** 		Error = e;
 19302              		.loc 1 538 5 view .LVU4988
 19303 0028 1A68     		ldr	r2, [r3]
 19304 002a 0AB9     		cbnz	r2, .L1356
 19305              	.LVL1433:
 19306              	.LBB3003:
 19307              	.LBI3003:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19308              		.loc 1 537 5 is_stmt 1 view .LVU4989
 19309              	.LBB3004:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 19310              		.loc 1 539 3 view .LVU4990
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 19311              		.loc 1 539 9 is_stmt 0 view .LVU4991
 19312 002c 0D22     		movs	r2, #13
 19313 002e 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 19314              		.loc 1 540 3 is_stmt 1 view .LVU4992
 19315              	.LVL1434:
 19316              	.L1356:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 19317              		.loc 1 540 3 is_stmt 0 view .LVU4993
 19318              	.LBE3004:
 19319              	.LBE3003:
 19320              	.LBE3002:
 19321              	.LBE3001:
 19322              	.LBE3005:
3354:src/xeq.c     **** 
 19323              		.loc 1 3354 1 view .LVU4994
 19324 0030 13B0     		add	sp, sp, #76
 19325              		.cfi_remember_state
 19326              		.cfi_def_cfa_offset 20
 19327              		@ sp needed
ARM GAS  /tmp/ccQlyisH.s 			page 521


 19328 0032 F0BD     		pop	{r4, r5, r6, r7, pc}
 19329              	.LVL1435:
 19330              	.L1358:
 19331              		.cfi_restore_state
3348:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
 19332              		.loc 1 3348 2 is_stmt 1 view .LVU4995
 19333              	.LBB3006:
 19334              	.LBI3006:
 845:src/xeq.c     **** 	getX(x);
 19335              		.loc 1 845 6 view .LVU4996
 19336              	.LBE3006:
 846:src/xeq.c     **** 	getY(y);
 19337              		.loc 1 846 2 view .LVU4997
 19338              	.LBB3011:
 19339              	.LBB3007:
 19340              	.LBI3007:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19341              		.loc 1 815 12 view .LVU4998
 19342              	.LBB3008:
 816:src/xeq.c     **** }
 19343              		.loc 1 816 2 view .LVU4999
 816:src/xeq.c     **** }
 19344              		.loc 1 816 9 is_stmt 0 view .LVU5000
 19345 0034 6421     		movs	r1, #100
 19346 0036 6846     		mov	r0, sp
 19347 0038 FFF7FEFF 		bl	getRegister
 19348              	.LVL1436:
 816:src/xeq.c     **** }
 19349              		.loc 1 816 9 view .LVU5001
 19350              	.LBE3008:
 19351              	.LBE3007:
 19352              	.LBE3011:
 847:src/xeq.c     **** }
 19353              		.loc 1 847 2 is_stmt 1 view .LVU5002
 19354              	.LBB3012:
 19355              	.LBB3009:
 19356              	.LBI3009:
 823:src/xeq.c     **** 	getRegister(y, regY_idx);
 19357              		.loc 1 823 6 view .LVU5003
 19358              	.LBB3010:
 824:src/xeq.c     **** }
 19359              		.loc 1 824 2 view .LVU5004
 19360 003c 09A8     		add	r0, sp, #36
 19361              	.LVL1437:
 824:src/xeq.c     **** }
 19362              		.loc 1 824 2 is_stmt 0 view .LVU5005
 19363 003e 6521     		movs	r1, #101
 19364 0040 FFF7FEFF 		bl	getRegister
 19365              	.LVL1438:
 824:src/xeq.c     **** }
 19366              		.loc 1 824 2 view .LVU5006
 19367              	.LBE3010:
 19368              	.LBE3009:
 19369              	.LBE3012:
3349:src/xeq.c     **** 		fin_tst(0);
 19370              		.loc 1 3349 2 is_stmt 1 view .LVU5007
3349:src/xeq.c     **** 		fin_tst(0);
ARM GAS  /tmp/ccQlyisH.s 			page 522


 19371              		.loc 1 3349 25 is_stmt 0 view .LVU5008
 19372 0044 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 19373 0048 9DF82C20 		ldrb	r2, [sp, #44]	@ zero_extendqisi2
 19374 004c 1343     		orrs	r3, r3, r2
 19375 004e 13F0300F 		tst	r3, #48
 19376 0052 13D1     		bne	.L1360
3349:src/xeq.c     **** 		fin_tst(0);
 19377              		.loc 1 3349 47 discriminator 2 view .LVU5009
 19378 0054 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 19379 0056 13F0300F 		tst	r3, #48
 19380 005a 0FD1     		bne	.L1360
3349:src/xeq.c     **** 		fin_tst(0);
 19381              		.loc 1 3349 69 discriminator 3 view .LVU5010
 19382 005c 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 19383 005e 13F0300F 		tst	r3, #48
 19384 0062 0BD1     		bne	.L1360
3353:src/xeq.c     **** }
 19385              		.loc 1 3353 2 is_stmt 1 view .LVU5011
3353:src/xeq.c     **** }
 19386              		.loc 1 3353 29 is_stmt 0 view .LVU5012
 19387 0064 2946     		mov	r1, r5
 19388 0066 6846     		mov	r0, sp
 19389 0068 FFF7FEFF 		bl	dn_eq
 19390              	.LVL1439:
3353:src/xeq.c     **** }
 19391              		.loc 1 3353 25 view .LVU5013
 19392 006c 003E     		subs	r6, r6, #0
 19393 006e 18BF     		it	ne
 19394 0070 0126     		movne	r6, #1
3353:src/xeq.c     **** }
 19395              		.loc 1 3353 43 view .LVU5014
 19396 0072 A8B9     		cbnz	r0, .L1373
 19397              	.L1363:
3353:src/xeq.c     **** }
 19398              		.loc 1 3353 2 discriminator 6 view .LVU5015
 19399 0074 3046     		mov	r0, r6
 19400 0076 FFF7FEFF 		bl	fin_tst
 19401              	.LVL1440:
 19402 007a D9E7     		b	.L1356
 19403              	.L1360:
3350:src/xeq.c     **** 		return;
 19404              		.loc 1 3350 3 is_stmt 1 view .LVU5016
 19405              	.LVL1441:
 19406              	.LBB3013:
 19407              	.LBI3013:
2538:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 19408              		.loc 1 2538 6 view .LVU5017
 19409              	.LBB3014:
2539:src/xeq.c     **** 	if (Running || XromRunning) {
 19410              		.loc 1 2539 2 view .LVU5018
2540:src/xeq.c     **** 		if (! a && incpc())
 19411              		.loc 1 2540 2 view .LVU5019
2540:src/xeq.c     **** 		if (! a && incpc())
 19412              		.loc 1 2540 6 is_stmt 0 view .LVU5020
 19413 007c 104A     		ldr	r2, .L1375+12
2540:src/xeq.c     **** 		if (! a && incpc())
 19414              		.loc 1 2540 14 view .LVU5021
ARM GAS  /tmp/ccQlyisH.s 			page 523


 19415 007e 114B     		ldr	r3, .L1375+16
 19416 0080 1268     		ldr	r2, [r2]
 19417 0082 1B68     		ldr	r3, [r3]
 19418 0084 1343     		orrs	r3, r2, r3
 19419 0086 07D1     		bne	.L1374
2545:src/xeq.c     **** #ifdef INFRARED
 19420              		.loc 1 2545 3 is_stmt 1 view .LVU5022
2545:src/xeq.c     **** #ifdef INFRARED
 19421              		.loc 1 2545 11 is_stmt 0 view .LVU5023
 19422 0088 0F4B     		ldr	r3, .L1375+20
 19423 008a 104A     		ldr	r2, .L1375+24
 19424 008c 1A60     		str	r2, [r3]
 19425              	.LBE3014:
 19426              	.LBE3013:
3354:src/xeq.c     **** 
 19427              		.loc 1 3354 1 view .LVU5024
 19428 008e 13B0     		add	sp, sp, #76
 19429              		.cfi_remember_state
 19430              		.cfi_def_cfa_offset 20
 19431              		@ sp needed
 19432 0090 F0BD     		pop	{r4, r5, r6, r7, pc}
 19433              	.LVL1442:
 19434              	.L1372:
 19435              		.cfi_restore_state
 19436              	.LBB3016:
 19437              	.LBB2993:
 19438              	.LBB2984:
3354:src/xeq.c     **** 
 19439              		.loc 1 3354 1 view .LVU5025
 19440 0092 FFF7FEFF 		bl	process_cmdline.part.0
 19441              	.LVL1443:
3354:src/xeq.c     **** 
 19442              		.loc 1 3354 1 view .LVU5026
 19443 0096 BCE7     		b	.L1357
 19444              	.LVL1444:
 19445              	.L1374:
3354:src/xeq.c     **** 
 19446              		.loc 1 3354 1 view .LVU5027
 19447              	.LBE2984:
 19448              	.LBE2993:
 19449              	.LBE3016:
 19450              	.LBB3017:
 19451              	.LBB3015:
2541:src/xeq.c     **** 			decpc();
 19452              		.loc 1 2541 3 is_stmt 1 view .LVU5028
 19453 0098 FFF7FEFF 		bl	fin_tst.part.0
 19454              	.LVL1445:
 19455              	.LBE3015:
 19456              	.LBE3017:
3354:src/xeq.c     **** 
 19457              		.loc 1 3354 1 is_stmt 0 view .LVU5029
 19458 009c 13B0     		add	sp, sp, #76
 19459              		.cfi_remember_state
 19460              		.cfi_def_cfa_offset 20
 19461              		@ sp needed
 19462 009e F0BD     		pop	{r4, r5, r6, r7, pc}
 19463              	.LVL1446:
ARM GAS  /tmp/ccQlyisH.s 			page 524


 19464              	.L1373:
 19465              		.cfi_restore_state
3353:src/xeq.c     **** }
 19466              		.loc 1 3353 46 discriminator 1 view .LVU5030
 19467 00a0 3946     		mov	r1, r7
 19468 00a2 09A8     		add	r0, sp, #36
 19469 00a4 FFF7FEFF 		bl	dn_eq
 19470              	.LVL1447:
 19471 00a8 0028     		cmp	r0, #0
 19472 00aa 18BF     		it	ne
 19473 00ac 86F00106 		eorne	r6, r6, #1
 19474 00b0 E0E7     		b	.L1363
 19475              	.L1376:
 19476 00b2 00BF     		.align	2
 19477              	.L1375:
 19478 00b4 00000000 		.word	StateWhileOn
 19479 00b8 00000000 		.word	main_ram
 19480 00bc 00000000 		.word	Error
 19481 00c0 00000000 		.word	Running
 19482 00c4 00000000 		.word	XromRunning
 19483 00c8 00000000 		.word	DispMsg
 19484 00cc 00000000 		.word	.LC3
 19485              		.cfi_endproc
 19486              	.LFE189:
 19488              		.section	.text.check_zero,"ax",%progbits
 19489              		.align	1
 19490              		.p2align 2,,3
 19491              		.global	check_zero
 19492              		.syntax unified
 19493              		.thumb
 19494              		.thumb_func
 19495              		.fpu fpv4-sp-d16
 19497              	check_zero:
 19498              	.LVL1448:
 19499              	.LFB187:
3317:src/xeq.c     **** 	int neg;
 19500              		.loc 1 3317 32 is_stmt 1 view -0
 19501              		.cfi_startproc
 19502              		@ args = 0, pretend = 0, frame = 40
 19503              		@ frame_needed = 0, uses_anonymous_args = 0
3318:src/xeq.c     **** 	int zero;
 19504              		.loc 1 3318 2 view .LVU5032
3319:src/xeq.c     **** 
 19505              		.loc 1 3319 2 view .LVU5033
3321:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19506              		.loc 1 3321 2 view .LVU5034
3321:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19507              		.loc 1 3321 6 is_stmt 0 view .LVU5035
 19508 0000 1A4B     		ldr	r3, .L1392
3317:src/xeq.c     **** 	int neg;
 19509              		.loc 1 3317 32 view .LVU5036
 19510 0002 10B5     		push	{r4, lr}
 19511              		.cfi_def_cfa_offset 8
 19512              		.cfi_offset 4, -8
 19513              		.cfi_offset 14, -4
3321:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19514              		.loc 1 3321 6 view .LVU5037
ARM GAS  /tmp/ccQlyisH.s 			page 525


 19515 0004 1B68     		ldr	r3, [r3]
 19516 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3321:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19517              		.loc 1 3321 5 view .LVU5038
 19518 000a DB07     		lsls	r3, r3, #31
3317:src/xeq.c     **** 	int neg;
 19519              		.loc 1 3317 32 view .LVU5039
 19520 000c 8AB0     		sub	sp, sp, #40
 19521              		.cfi_def_cfa_offset 48
3317:src/xeq.c     **** 	int neg;
 19522              		.loc 1 3317 32 view .LVU5040
 19523 000e 0446     		mov	r4, r0
3321:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19524              		.loc 1 3321 5 view .LVU5041
 19525 0010 15D5     		bpl	.L1378
 19526              	.LBB3018:
3322:src/xeq.c     **** 		zero = (xv == 0);
 19527              		.loc 1 3322 3 is_stmt 1 view .LVU5042
 19528              	.LBB3019:
 19529              	.LBI3019:
1411:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 19530              		.loc 1 1411 15 view .LVU5043
 19531              	.LBB3020:
1412:src/xeq.c     **** }
 19532              		.loc 1 1412 2 view .LVU5044
1412:src/xeq.c     **** }
 19533              		.loc 1 1412 9 is_stmt 0 view .LVU5045
 19534 0012 6420     		movs	r0, #100
 19535              	.LVL1449:
1412:src/xeq.c     **** }
 19536              		.loc 1 1412 9 view .LVU5046
 19537 0014 FFF7FEFF 		bl	get_reg_n_int
 19538              	.LVL1450:
 19539              	.LBE3020:
 19540              	.LBE3019:
3322:src/xeq.c     **** 		zero = (xv == 0);
 19541              		.loc 1 3322 37 view .LVU5047
 19542 0018 6A46     		mov	r2, sp
 19543 001a FFF7FEFF 		bl	extract_value
 19544              	.LVL1451:
3323:src/xeq.c     **** 	} else {
 19545              		.loc 1 3323 3 is_stmt 1 view .LVU5048
3323:src/xeq.c     **** 	} else {
 19546              		.loc 1 3323 14 is_stmt 0 view .LVU5049
 19547 001e 50EA0103 		orrs	r3, r0, r1
 19548 0022 0CBF     		ite	eq
 19549 0024 0120     		moveq	r0, #1
 19550              	.LVL1452:
3323:src/xeq.c     **** 	} else {
 19551              		.loc 1 3323 14 view .LVU5050
 19552 0026 0020     		movne	r0, #0
 19553              	.LVL1453:
3323:src/xeq.c     **** 	} else {
 19554              		.loc 1 3323 14 view .LVU5051
 19555              	.LBE3018:
3330:src/xeq.c     **** 		fin_tst(zero && !neg);
 19556              		.loc 1 3330 2 is_stmt 1 view .LVU5052
ARM GAS  /tmp/ccQlyisH.s 			page 526


3330:src/xeq.c     **** 		fin_tst(zero && !neg);
 19557              		.loc 1 3330 5 is_stmt 0 view .LVU5053
 19558 0028 A12C     		cmp	r4, #161
 19559 002a 15D0     		beq	.L1391
 19560              	.L1380:
3333:src/xeq.c     **** }
 19561              		.loc 1 3333 3 is_stmt 1 view .LVU5054
 19562 002c 18B1     		cbz	r0, .L1383
3333:src/xeq.c     **** }
 19563              		.loc 1 3333 3 is_stmt 0 discriminator 1 view .LVU5055
 19564 002e 0098     		ldr	r0, [sp]
 19565              	.LVL1454:
3333:src/xeq.c     **** }
 19566              		.loc 1 3333 3 discriminator 1 view .LVU5056
 19567 0030 0038     		subs	r0, r0, #0
 19568 0032 18BF     		it	ne
 19569 0034 0120     		movne	r0, #1
 19570              	.L1383:
3333:src/xeq.c     **** }
 19571              		.loc 1 3333 3 discriminator 6 view .LVU5057
 19572 0036 FFF7FEFF 		bl	fin_tst
 19573              	.LVL1455:
3334:src/xeq.c     **** 
 19574              		.loc 1 3334 1 discriminator 6 view .LVU5058
 19575 003a 0AB0     		add	sp, sp, #40
 19576              		.cfi_remember_state
 19577              		.cfi_def_cfa_offset 8
 19578              		@ sp needed
 19579 003c 10BD     		pop	{r4, pc}
 19580              	.LVL1456:
 19581              	.L1378:
 19582              		.cfi_restore_state
 19583              	.LBB3021:
3325:src/xeq.c     **** 		getX(&x);
 19584              		.loc 1 3325 3 is_stmt 1 view .LVU5059
3326:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
 19585              		.loc 1 3326 3 view .LVU5060
 19586              	.LBB3022:
 19587              	.LBI3022:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19588              		.loc 1 815 12 view .LVU5061
 19589              	.LBB3023:
 816:src/xeq.c     **** }
 19590              		.loc 1 816 2 view .LVU5062
 816:src/xeq.c     **** }
 19591              		.loc 1 816 9 is_stmt 0 view .LVU5063
 19592 003e 6421     		movs	r1, #100
 19593 0040 01A8     		add	r0, sp, #4
 19594              	.LVL1457:
 816:src/xeq.c     **** }
 19595              		.loc 1 816 9 view .LVU5064
 19596 0042 FFF7FEFF 		bl	getRegister
 19597              	.LVL1458:
 816:src/xeq.c     **** }
 19598              		.loc 1 816 9 view .LVU5065
 19599              	.LBE3023:
 19600              	.LBE3022:
ARM GAS  /tmp/ccQlyisH.s 			page 527


3327:src/xeq.c     **** 		zero = dn_eq0(&x);
 19601              		.loc 1 3327 3 is_stmt 1 view .LVU5066
3327:src/xeq.c     **** 		zero = dn_eq0(&x);
 19602              		.loc 1 3327 9 is_stmt 0 view .LVU5067
 19603 0046 9DF90C30 		ldrsb	r3, [sp, #12]
3328:src/xeq.c     **** 	}
 19604              		.loc 1 3328 10 view .LVU5068
 19605 004a 01A8     		add	r0, sp, #4
3327:src/xeq.c     **** 		zero = dn_eq0(&x);
 19606              		.loc 1 3327 9 view .LVU5069
 19607 004c DB0F     		lsrs	r3, r3, #31
3327:src/xeq.c     **** 		zero = dn_eq0(&x);
 19608              		.loc 1 3327 7 view .LVU5070
 19609 004e 0093     		str	r3, [sp]
3328:src/xeq.c     **** 	}
 19610              		.loc 1 3328 3 is_stmt 1 view .LVU5071
3328:src/xeq.c     **** 	}
 19611              		.loc 1 3328 10 is_stmt 0 view .LVU5072
 19612 0050 FFF7FEFF 		bl	dn_eq0
 19613              	.LVL1459:
3328:src/xeq.c     **** 	}
 19614              		.loc 1 3328 10 view .LVU5073
 19615              	.LBE3021:
3330:src/xeq.c     **** 		fin_tst(zero && !neg);
 19616              		.loc 1 3330 2 is_stmt 1 view .LVU5074
3330:src/xeq.c     **** 		fin_tst(zero && !neg);
 19617              		.loc 1 3330 5 is_stmt 0 view .LVU5075
 19618 0054 A12C     		cmp	r4, #161
 19619 0056 E9D1     		bne	.L1380
 19620              	.L1391:
3331:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19621              		.loc 1 3331 3 is_stmt 1 view .LVU5076
 19622 0058 0028     		cmp	r0, #0
 19623 005a ECD0     		beq	.L1383
3331:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19624              		.loc 1 3331 3 is_stmt 0 discriminator 1 view .LVU5077
 19625 005c 0098     		ldr	r0, [sp]
 19626              	.LVL1460:
3331:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19627              		.loc 1 3331 3 discriminator 1 view .LVU5078
 19628 005e B0FA80F0 		clz	r0, r0
 19629 0062 4009     		lsrs	r0, r0, #5
3333:src/xeq.c     **** }
 19630              		.loc 1 3333 3 discriminator 1 view .LVU5079
 19631 0064 FFF7FEFF 		bl	fin_tst
 19632              	.LVL1461:
3334:src/xeq.c     **** 
 19633              		.loc 1 3334 1 discriminator 1 view .LVU5080
 19634 0068 0AB0     		add	sp, sp, #40
 19635              		.cfi_def_cfa_offset 8
 19636              		@ sp needed
 19637 006a 10BD     		pop	{r4, pc}
 19638              	.L1393:
 19639              		.align	2
 19640              	.L1392:
 19641 006c 00000000 		.word	main_ram
 19642              		.cfi_endproc
ARM GAS  /tmp/ccQlyisH.s 			page 528


 19643              	.LFE187:
 19645              		.section	.text.cmdtest,"ax",%progbits
 19646              		.align	1
 19647              		.p2align 2,,3
 19648              		.global	cmdtest
 19649              		.syntax unified
 19650              		.thumb
 19651              		.thumb_func
 19652              		.fpu fpv4-sp-d16
 19654              	cmdtest:
 19655              	.LVL1462:
 19656              	.LFB188:
3336:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
 19657              		.loc 1 3336 46 is_stmt 1 view -0
 19658              		.cfi_startproc
 19659              		@ args = 0, pretend = 0, frame = 0
 19660              		@ frame_needed = 0, uses_anonymous_args = 0
 19661              		@ link register save eliminated.
3337:src/xeq.c     **** }
 19662              		.loc 1 3337 2 view .LVU5082
3337:src/xeq.c     **** }
 19663              		.loc 1 3337 31 is_stmt 0 view .LVU5083
 19664 0000 2D39     		subs	r1, r1, #45
 19665              	.LVL1463:
3337:src/xeq.c     **** }
 19666              		.loc 1 3337 2 view .LVU5084
 19667 0002 C9B2     		uxtb	r1, r1
 19668 0004 FFF7FEBF 		b	do_tst
 19669              	.LVL1464:
3337:src/xeq.c     **** }
 19670              		.loc 1 3337 2 view .LVU5085
 19671              		.cfi_endproc
 19672              	.LFE188:
 19674              		.section	.text.cmdztest,"ax",%progbits
 19675              		.align	1
 19676              		.p2align 2,,3
 19677              		.global	cmdztest
 19678              		.syntax unified
 19679              		.thumb
 19680              		.thumb_func
 19681              		.fpu fpv4-sp-d16
 19683              	cmdztest:
 19684              	.LVL1465:
 19685              	.LFB190:
3356:src/xeq.c     **** 	decNumber re, im;
 19686              		.loc 1 3356 47 is_stmt 1 view -0
 19687              		.cfi_startproc
 19688              		@ args = 0, pretend = 0, frame = 72
 19689              		@ frame_needed = 0, uses_anonymous_args = 0
3357:src/xeq.c     **** 	getRegister(&re, arg);
 19690              		.loc 1 3357 2 view .LVU5087
3358:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19691              		.loc 1 3358 2 view .LVU5088
3356:src/xeq.c     **** 	decNumber re, im;
 19692              		.loc 1 3356 47 is_stmt 0 view .LVU5089
 19693 0000 30B5     		push	{r4, r5, lr}
 19694              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccQlyisH.s 			page 529


 19695              		.cfi_offset 4, -12
 19696              		.cfi_offset 5, -8
 19697              		.cfi_offset 14, -4
 19698 0002 0546     		mov	r5, r0
 19699 0004 93B0     		sub	sp, sp, #76
 19700              		.cfi_def_cfa_offset 88
3356:src/xeq.c     **** 	decNumber re, im;
 19701              		.loc 1 3356 47 view .LVU5090
 19702 0006 0C46     		mov	r4, r1
3358:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19703              		.loc 1 3358 2 view .LVU5091
 19704 0008 6846     		mov	r0, sp
 19705              	.LVL1466:
3358:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19706              		.loc 1 3358 2 view .LVU5092
 19707 000a 2946     		mov	r1, r5
 19708              	.LVL1467:
3358:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19709              		.loc 1 3358 2 view .LVU5093
 19710 000c FFF7FEFF 		bl	getRegister
 19711              	.LVL1468:
3359:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
 19712              		.loc 1 3359 2 is_stmt 1 view .LVU5094
 19713 0010 691C     		adds	r1, r5, #1
 19714 0012 09A8     		add	r0, sp, #36
 19715 0014 FFF7FEFF 		bl	getRegister
 19716              	.LVL1469:
3360:src/xeq.c     **** }
 19717              		.loc 1 3360 2 view .LVU5095
3360:src/xeq.c     **** }
 19718              		.loc 1 3360 37 is_stmt 0 view .LVU5096
 19719 0018 A4F13402 		sub	r2, r4, #52
3360:src/xeq.c     **** }
 19720              		.loc 1 3360 2 view .LVU5097
 19721 001c D2B2     		uxtb	r2, r2
 19722 001e 09A9     		add	r1, sp, #36
 19723 0020 6846     		mov	r0, sp
 19724 0022 FFF7FEFF 		bl	do_ztst
 19725              	.LVL1470:
3361:src/xeq.c     **** 
 19726              		.loc 1 3361 1 view .LVU5098
 19727 0026 13B0     		add	sp, sp, #76
 19728              		.cfi_def_cfa_offset 12
 19729              		@ sp needed
 19730 0028 30BD     		pop	{r4, r5, pc}
3361:src/xeq.c     **** 
 19731              		.loc 1 3361 1 view .LVU5099
 19732              		.cfi_endproc
 19733              	.LFE190:
 19735 002a 00BF     		.section	.text.cmdlincdec,"ax",%progbits
 19736              		.align	1
 19737              		.p2align 2,,3
 19738              		.global	cmdlincdec
 19739              		.syntax unified
 19740              		.thumb
 19741              		.thumb_func
 19742              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQlyisH.s 			page 530


 19744              	cmdlincdec:
 19745              	.LVL1471:
 19746              	.LFB192:
3391:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
 19747              		.loc 1 3391 49 is_stmt 1 view -0
 19748              		.cfi_startproc
 19749              		@ args = 0, pretend = 0, frame = 0
 19750              		@ frame_needed = 0, uses_anonymous_args = 0
 19751              		@ link register save eliminated.
3392:src/xeq.c     **** }
 19752              		.loc 1 3392 2 view .LVU5101
 19753 0000 A1F14101 		sub	r1, #65
 19754              	.LVL1472:
3392:src/xeq.c     **** }
 19755              		.loc 1 3392 2 is_stmt 0 view .LVU5102
 19756 0004 B1FA81F1 		clz	r1, r1
 19757 0008 4909     		lsrs	r1, r1, #5
 19758 000a FFF7FEBF 		b	incdec
 19759              	.LVL1473:
3392:src/xeq.c     **** }
 19760              		.loc 1 3392 2 view .LVU5103
 19761              		.cfi_endproc
 19762              	.LFE192:
 19764 000e 00BF     		.section	.text.cmdloopz,"ax",%progbits
 19765              		.align	1
 19766              		.p2align 2,,3
 19767              		.global	cmdloopz
 19768              		.syntax unified
 19769              		.thumb
 19770              		.thumb_func
 19771              		.fpu fpv4-sp-d16
 19773              	cmdloopz:
 19774              	.LVL1474:
 19775              	.LFB193:
3395:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 19776              		.loc 1 3395 47 is_stmt 1 view -0
 19777              		.cfi_startproc
 19778              		@ args = 0, pretend = 0, frame = 0
 19779              		@ frame_needed = 0, uses_anonymous_args = 0
3396:src/xeq.c     **** }
 19780              		.loc 1 3396 2 view .LVU5105
3395:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 19781              		.loc 1 3395 47 is_stmt 0 view .LVU5106
 19782 0000 08B5     		push	{r3, lr}
 19783              		.cfi_def_cfa_offset 8
 19784              		.cfi_offset 3, -8
 19785              		.cfi_offset 14, -4
3396:src/xeq.c     **** }
 19786              		.loc 1 3396 2 view .LVU5107
 19787 0002 A1F13F01 		sub	r1, #63
 19788              	.LVL1475:
3396:src/xeq.c     **** }
 19789              		.loc 1 3396 2 view .LVU5108
 19790 0006 B1FA81F1 		clz	r1, r1
 19791 000a 4909     		lsrs	r1, r1, #5
 19792 000c FFF7FEFF 		bl	incdec
 19793              	.LVL1476:
ARM GAS  /tmp/ccQlyisH.s 			page 531


3397:src/xeq.c     **** 
 19794              		.loc 1 3397 1 view .LVU5109
 19795 0010 BDE80840 		pop	{r3, lr}
 19796              		.cfi_restore 14
 19797              		.cfi_restore 3
 19798              		.cfi_def_cfa_offset 0
3396:src/xeq.c     **** }
 19799              		.loc 1 3396 2 view .LVU5110
 19800 0014 FFF7FEBF 		b	fin_tst
 19801              	.LVL1477:
 19802              		.cfi_endproc
 19803              	.LFE193:
 19805              		.section	.text.cmdloop,"ax",%progbits
 19806              		.align	1
 19807              		.p2align 2,,3
 19808              		.global	cmdloop
 19809              		.syntax unified
 19810              		.thumb
 19811              		.thumb_func
 19812              		.fpu fpv4-sp-d16
 19814              	cmdloop:
 19815              	.LVL1478:
 19816              	.LFB194:
3399:src/xeq.c     **** 	if (is_intmode()) {
 19817              		.loc 1 3399 46 is_stmt 1 view -0
 19818              		.cfi_startproc
 19819              		@ args = 0, pretend = 0, frame = 184
 19820              		@ frame_needed = 0, uses_anonymous_args = 0
3400:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19821              		.loc 1 3400 2 view .LVU5112
3400:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19822              		.loc 1 3400 6 is_stmt 0 view .LVU5113
 19823 0000 7C4B     		ldr	r3, .L1440
3399:src/xeq.c     **** 	if (is_intmode()) {
 19824              		.loc 1 3399 46 view .LVU5114
 19825 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 19826              		.cfi_def_cfa_offset 20
 19827              		.cfi_offset 4, -20
 19828              		.cfi_offset 5, -16
 19829              		.cfi_offset 6, -12
 19830              		.cfi_offset 7, -8
 19831              		.cfi_offset 14, -4
3400:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19832              		.loc 1 3400 6 view .LVU5115
 19833 0004 1B68     		ldr	r3, [r3]
 19834 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3400:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19835              		.loc 1 3400 5 view .LVU5116
 19836 000a DB07     		lsls	r3, r3, #31
3399:src/xeq.c     **** 	if (is_intmode()) {
 19837              		.loc 1 3399 46 view .LVU5117
 19838 000c AFB0     		sub	sp, sp, #188
 19839              		.cfi_def_cfa_offset 208
3399:src/xeq.c     **** 	if (is_intmode()) {
 19840              		.loc 1 3399 46 view .LVU5118
 19841 000e 0C46     		mov	r4, r1
 19842 0010 0546     		mov	r5, r0
ARM GAS  /tmp/ccQlyisH.s 			page 532


3400:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19843              		.loc 1 3400 5 view .LVU5119
 19844 0012 7BD4     		bmi	.L1432
 19845              	.LBB3024:
3422:src/xeq.c     **** 
 19846              		.loc 1 3422 3 is_stmt 1 view .LVU5120
3424:src/xeq.c     **** 
 19847              		.loc 1 3424 3 view .LVU5121
 19848 0014 2946     		mov	r1, r5
 19849              	.LVL1479:
3424:src/xeq.c     **** 
 19850              		.loc 1 3424 3 is_stmt 0 view .LVU5122
 19851 0016 6846     		mov	r0, sp
 19852              	.LVL1480:
3424:src/xeq.c     **** 
 19853              		.loc 1 3424 3 view .LVU5123
 19854 0018 FFF7FEFF 		bl	getRegister
 19855              	.LVL1481:
3428:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
 19856              		.loc 1 3428 3 is_stmt 1 view .LVU5124
 19857 001c 6946     		mov	r1, sp
 19858 001e 12A8     		add	r0, sp, #72
 19859 0020 FFF7FEFF 		bl	dn_abs
 19860              	.LVL1482:
3429:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
 19861              		.loc 1 3429 3 view .LVU5125
 19862 0024 12A9     		add	r1, sp, #72
 19863 0026 1BA8     		add	r0, sp, #108
 19864 0028 FFF7FEFF 		bl	decNumberTrunc
 19865              	.LVL1483:
3430:src/xeq.c     **** 		if (decNumberIsNegative(&x))
 19866              		.loc 1 3430 3 view .LVU5126
 19867 002c 1BAA     		add	r2, sp, #108
 19868 002e 12A9     		add	r1, sp, #72
 19869 0030 24A8     		add	r0, sp, #144
 19870 0032 FFF7FEFF 		bl	dn_subtract
 19871              	.LVL1484:
3431:src/xeq.c     **** 			dn_minus(&n, &n);
 19872              		.loc 1 3431 3 view .LVU5127
3431:src/xeq.c     **** 			dn_minus(&n, &n);
 19873              		.loc 1 3431 6 is_stmt 0 view .LVU5128
 19874 0036 9DF90830 		ldrsb	r3, [sp, #8]
 19875 003a 002B     		cmp	r3, #0
 19876 003c C0F29080 		blt	.L1433
 19877              	.L1410:
3433:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
 19878              		.loc 1 3433 3 is_stmt 1 view .LVU5129
 19879 0040 0322     		movs	r2, #3
 19880 0042 24A9     		add	r1, sp, #144
 19881 0044 09A8     		add	r0, sp, #36
 19882 0046 FFF7FEFF 		bl	dn_mulpow10
 19883              	.LVL1485:
3434:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
 19884              		.loc 1 3434 3 view .LVU5130
 19885 004a 09A9     		add	r1, sp, #36
 19886 004c 12A8     		add	r0, sp, #72
 19887 004e FFF7FEFF 		bl	decNumberTrunc
ARM GAS  /tmp/ccQlyisH.s 			page 533


 19888              	.LVL1486:
3435:src/xeq.c     **** 		dn_mul100(&x, &i);
 19889              		.loc 1 3435 3 view .LVU5131
 19890 0052 09A9     		add	r1, sp, #36
 19891 0054 12AA     		add	r2, sp, #72
 19892 0056 0846     		mov	r0, r1
 19893 0058 FFF7FEFF 		bl	dn_subtract
 19894              	.LVL1487:
3436:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
 19895              		.loc 1 3436 3 view .LVU5132
 19896 005c 09A9     		add	r1, sp, #36
 19897 005e 6846     		mov	r0, sp
 19898 0060 FFF7FEFF 		bl	dn_mul100
 19899              	.LVL1488:
3437:src/xeq.c     **** 		if (dn_eq0(&i))
 19900              		.loc 1 3437 3 view .LVU5133
 19901 0064 6946     		mov	r1, sp
 19902 0066 09A8     		add	r0, sp, #36
 19903 0068 FFF7FEFF 		bl	decNumberTrunc
 19904              	.LVL1489:
3438:src/xeq.c     **** 			dn_1(&i);
 19905              		.loc 1 3438 3 view .LVU5134
3438:src/xeq.c     **** 			dn_1(&i);
 19906              		.loc 1 3438 7 is_stmt 0 view .LVU5135
 19907 006c 09A8     		add	r0, sp, #36
 19908 006e FFF7FEFF 		bl	dn_eq0
 19909              	.LVL1490:
3438:src/xeq.c     **** 			dn_1(&i);
 19910              		.loc 1 3438 6 view .LVU5136
 19911 0072 98BB     		cbnz	r0, .L1434
3441:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19912              		.loc 1 3441 3 is_stmt 1 view .LVU5137
3442:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19913              		.loc 1 3442 4 is_stmt 0 view .LVU5138
 19914 0074 1BA9     		add	r1, sp, #108
3441:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19915              		.loc 1 3441 6 view .LVU5139
 19916 0076 3B2C     		cmp	r4, #59
3442:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19917              		.loc 1 3442 4 view .LVU5140
 19918 0078 09AA     		add	r2, sp, #36
 19919 007a 0846     		mov	r0, r1
3441:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19920              		.loc 1 3441 6 view .LVU5141
 19921 007c 36D0     		beq	.L1412
 19922              	.L1437:
3441:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19923              		.loc 1 3441 22 discriminator 1 view .LVU5142
 19924 007e 3D2C     		cmp	r4, #61
 19925 0080 1DD1     		bne	.L1413
3442:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19926              		.loc 1 3442 4 is_stmt 1 view .LVU5143
 19927 0082 FFF7FEFF 		bl	dn_add
 19928              	.LVL1491:
3443:src/xeq.c     **** 			if (op == RARG_ISE)
 19929              		.loc 1 3443 4 view .LVU5144
 19930 0086 1BAA     		add	r2, sp, #108
ARM GAS  /tmp/ccQlyisH.s 			page 534


 19931 0088 12A9     		add	r1, sp, #72
 19932 008a 6846     		mov	r0, sp
 19933 008c FFF7FEFF 		bl	dn_compare
 19934              	.LVL1492:
3444:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 19935              		.loc 1 3444 4 view .LVU5145
3445:src/xeq.c     **** 			else
 19936              		.loc 1 3445 5 view .LVU5146
3445:src/xeq.c     **** 			else
 19937              		.loc 1 3445 13 is_stmt 0 view .LVU5147
 19938 0090 6846     		mov	r0, sp
 19939 0092 FFF7FEFF 		bl	dn_le0
 19940              	.LVL1493:
3445:src/xeq.c     **** 			else
 19941              		.loc 1 3445 5 view .LVU5148
 19942 0096 B0FA80F0 		clz	r0, r0
 19943 009a 4009     		lsrs	r0, r0, #5
 19944 009c FFF7FEFF 		bl	fin_tst
 19945              	.LVL1494:
 19946              	.L1414:
3458:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 19947              		.loc 1 3458 3 is_stmt 1 view .LVU5149
3458:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 19948              		.loc 1 3458 6 is_stmt 0 view .LVU5150
 19949 00a0 9DF97430 		ldrsb	r3, [sp, #116]
 19950 00a4 002B     		cmp	r3, #0
3459:src/xeq.c     **** 		} else
 19951              		.loc 1 3459 4 view .LVU5151
 19952 00a6 24AA     		add	r2, sp, #144
 19953 00a8 1BA9     		add	r1, sp, #108
 19954 00aa 6846     		mov	r0, sp
3458:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 19955              		.loc 1 3458 6 view .LVU5152
 19956 00ac 55DB     		blt	.L1435
3461:src/xeq.c     **** 		setRegister(arg, &x);
 19957              		.loc 1 3461 4 is_stmt 1 view .LVU5153
 19958 00ae FFF7FEFF 		bl	dn_add
 19959              	.LVL1495:
 19960              	.L1417:
3462:src/xeq.c     **** 	}
 19961              		.loc 1 3462 3 discriminator 2 view .LVU5154
 19962 00b2 6946     		mov	r1, sp
 19963 00b4 2846     		mov	r0, r5
 19964 00b6 FFF7FEFF 		bl	setRegister
 19965              	.LVL1496:
 19966              	.L1400:
3462:src/xeq.c     **** 	}
 19967              		.loc 1 3462 3 is_stmt 0 discriminator 2 view .LVU5155
 19968              	.LBE3024:
3464:src/xeq.c     **** 
 19969              		.loc 1 3464 1 view .LVU5156
 19970 00ba 2FB0     		add	sp, sp, #188
 19971              		.cfi_remember_state
 19972              		.cfi_def_cfa_offset 20
 19973              		@ sp needed
 19974 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 19975              	.LVL1497:
ARM GAS  /tmp/ccQlyisH.s 			page 535


 19976              	.L1413:
 19977              		.cfi_restore_state
 19978              	.LBB3025:
3449:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19979              		.loc 1 3449 4 is_stmt 1 view .LVU5157
 19980 00be FFF7FEFF 		bl	dn_subtract
 19981              	.LVL1498:
3450:src/xeq.c     **** 			if (op == RARG_DSL)
 19982              		.loc 1 3450 4 view .LVU5158
 19983 00c2 1BAA     		add	r2, sp, #108
 19984 00c4 12A9     		add	r1, sp, #72
 19985 00c6 6846     		mov	r0, sp
 19986 00c8 FFF7FEFF 		bl	dn_compare
 19987              	.LVL1499:
3451:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 19988              		.loc 1 3451 4 view .LVU5159
3451:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 19989              		.loc 1 3451 7 is_stmt 0 view .LVU5160
 19990 00cc 3C2C     		cmp	r4, #60
3452:src/xeq.c     **** 			else
 19991              		.loc 1 3452 5 view .LVU5161
 19992 00ce 6846     		mov	r0, sp
3451:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 19993              		.loc 1 3451 7 view .LVU5162
 19994 00d0 6AD0     		beq	.L1436
3454:src/xeq.c     **** 		}
 19995              		.loc 1 3454 5 is_stmt 1 view .LVU5163
 19996 00d2 FFF7FEFF 		bl	dn_lt0
 19997              	.LVL1500:
 19998 00d6 FFF7FEFF 		bl	fin_tst
 19999              	.LVL1501:
 20000 00da E1E7     		b	.L1414
 20001              	.L1434:
3439:src/xeq.c     **** 
 20002              		.loc 1 3439 4 view .LVU5164
 20003 00dc 09A8     		add	r0, sp, #36
 20004 00de FFF7FEFF 		bl	dn_1
 20005              	.LVL1502:
3441:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20006              		.loc 1 3441 3 view .LVU5165
3442:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20007              		.loc 1 3442 4 is_stmt 0 view .LVU5166
 20008 00e2 1BA9     		add	r1, sp, #108
3441:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20009              		.loc 1 3441 6 view .LVU5167
 20010 00e4 3B2C     		cmp	r4, #59
3442:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20011              		.loc 1 3442 4 view .LVU5168
 20012 00e6 09AA     		add	r2, sp, #36
 20013 00e8 0846     		mov	r0, r1
3441:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20014              		.loc 1 3441 6 view .LVU5169
 20015 00ea C8D1     		bne	.L1437
 20016              	.L1412:
3442:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20017              		.loc 1 3442 4 is_stmt 1 view .LVU5170
 20018 00ec FFF7FEFF 		bl	dn_add
ARM GAS  /tmp/ccQlyisH.s 			page 536


 20019              	.LVL1503:
3443:src/xeq.c     **** 			if (op == RARG_ISE)
 20020              		.loc 1 3443 4 view .LVU5171
 20021 00f0 1BAA     		add	r2, sp, #108
 20022 00f2 12A9     		add	r1, sp, #72
 20023 00f4 6846     		mov	r0, sp
 20024 00f6 FFF7FEFF 		bl	dn_compare
 20025              	.LVL1504:
3444:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 20026              		.loc 1 3444 4 view .LVU5172
3447:src/xeq.c     **** 		} else {
 20027              		.loc 1 3447 5 view .LVU5173
3447:src/xeq.c     **** 		} else {
 20028              		.loc 1 3447 13 is_stmt 0 view .LVU5174
 20029 00fa 6846     		mov	r0, sp
 20030 00fc FFF7FEFF 		bl	dn_lt0
 20031              	.LVL1505:
3447:src/xeq.c     **** 		} else {
 20032              		.loc 1 3447 5 view .LVU5175
 20033 0100 B0FA80F0 		clz	r0, r0
 20034 0104 4009     		lsrs	r0, r0, #5
 20035 0106 FFF7FEFF 		bl	fin_tst
 20036              	.LVL1506:
 20037 010a C9E7     		b	.L1414
 20038              	.LVL1507:
 20039              	.L1432:
3447:src/xeq.c     **** 		} else {
 20040              		.loc 1 3447 5 view .LVU5176
 20041              	.LBE3025:
 20042              	.LBB3026:
3401:src/xeq.c     **** 		int xs;
 20043              		.loc 1 3401 3 is_stmt 1 view .LVU5177
3401:src/xeq.c     **** 		int xs;
 20044              		.loc 1 3401 21 is_stmt 0 view .LVU5178
 20045 010c FFF7FEFF 		bl	get_reg_n_int
 20046              	.LVL1508:
3402:src/xeq.c     **** 		unsigned long long int xv;
 20047              		.loc 1 3402 3 is_stmt 1 view .LVU5179
3403:src/xeq.c     **** 
 20048              		.loc 1 3403 3 view .LVU5180
3405:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20049              		.loc 1 3405 3 view .LVU5181
3405:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20050              		.loc 1 3405 6 is_stmt 0 view .LVU5182
 20051 0110 3B2C     		cmp	r4, #59
3406:src/xeq.c     **** 		else
 20052              		.loc 1 3406 8 view .LVU5183
 20053 0112 4FF00102 		mov	r2, #1
 20054 0116 4FF00003 		mov	r3, #0
3405:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20055              		.loc 1 3405 6 view .LVU5184
 20056 011a 4AD0     		beq	.L1402
3405:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20057              		.loc 1 3405 22 discriminator 1 view .LVU5185
 20058 011c 3D2C     		cmp	r4, #61
 20059 011e 24D1     		bne	.L1438
3406:src/xeq.c     **** 		else
ARM GAS  /tmp/ccQlyisH.s 			page 537


 20060              		.loc 1 3406 4 is_stmt 1 view .LVU5186
3406:src/xeq.c     **** 		else
 20061              		.loc 1 3406 8 is_stmt 0 view .LVU5187
 20062 0120 FFF7FEFF 		bl	intAdd
 20063              	.LVL1509:
3406:src/xeq.c     **** 		else
 20064              		.loc 1 3406 8 view .LVU5188
 20065 0124 0646     		mov	r6, r0
 20066              	.LBB3027:
 20067              	.LBB3028:
1392:src/xeq.c     **** }
 20068              		.loc 1 1392 8 view .LVU5189
 20069 0126 2846     		mov	r0, r5
 20070              	.LBE3028:
 20071              	.LBE3027:
3406:src/xeq.c     **** 		else
 20072              		.loc 1 3406 8 view .LVU5190
 20073 0128 0C46     		mov	r4, r1
 20074              	.LVL1510:
3409:src/xeq.c     **** 
 20075              		.loc 1 3409 3 is_stmt 1 view .LVU5191
3409:src/xeq.c     **** 
 20076              		.loc 1 3409 3 is_stmt 0 view .LVU5192
 20077 012a CDE92461 		strd	r6, r1, [sp, #144]
 20078              	.LVL1511:
 20079              	.LBB3034:
 20080              	.LBI3027:
1391:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20081              		.loc 1 1391 6 is_stmt 1 view .LVU5193
 20082              	.LBB3029:
1392:src/xeq.c     **** }
 20083              		.loc 1 1392 2 view .LVU5194
1392:src/xeq.c     **** }
 20084              		.loc 1 1392 8 is_stmt 0 view .LVU5195
 20085 012e FFF7FEFF 		bl	get_reg_n
 20086              	.LVL1512:
1392:src/xeq.c     **** }
 20087              		.loc 1 1392 2 view .LVU5196
 20088 0132 24A9     		add	r1, sp, #144
 20089 0134 0822     		movs	r2, #8
 20090 0136 FFF7FEFF 		bl	xcopy
 20091              	.LVL1513:
1392:src/xeq.c     **** }
 20092              		.loc 1 1392 2 view .LVU5197
 20093              	.LBE3029:
 20094              	.LBE3034:
3411:src/xeq.c     **** 		if (op == RARG_ISG)
 20095              		.loc 1 3411 3 is_stmt 1 view .LVU5198
3411:src/xeq.c     **** 		if (op == RARG_ISG)
 20096              		.loc 1 3411 8 is_stmt 0 view .LVU5199
 20097 013a 24AA     		add	r2, sp, #144
 20098 013c 3046     		mov	r0, r6
 20099 013e 2146     		mov	r1, r4
 20100 0140 FFF7FEFF 		bl	extract_value
 20101              	.LVL1514:
3417:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20102              		.loc 1 3417 18 view .LVU5200
ARM GAS  /tmp/ccQlyisH.s 			page 538


 20103 0144 249B     		ldr	r3, [sp, #144]
 20104              	.LVL1515:
3412:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20105              		.loc 1 3412 3 is_stmt 1 view .LVU5201
3414:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20106              		.loc 1 3414 8 view .LVU5202
3416:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
 20107              		.loc 1 3416 8 view .LVU5203
3417:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20108              		.loc 1 3417 4 view .LVU5204
 20109 0146 23B1     		cbz	r3, .L1421
3417:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20110              		.loc 1 3417 4 is_stmt 0 discriminator 1 view .LVU5205
 20111 0148 50EA0103 		orrs	r3, r0, r1
 20112 014c 14BF     		ite	ne
 20113 014e 0123     		movne	r3, #1
 20114 0150 0023     		moveq	r3, #0
 20115              	.L1421:
3417:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20116              		.loc 1 3417 4 discriminator 6 view .LVU5206
 20117 0152 1846     		mov	r0, r3
 20118              	.LVL1516:
3417:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20119              		.loc 1 3417 4 discriminator 6 view .LVU5207
 20120 0154 FFF7FEFF 		bl	fin_tst
 20121              	.LVL1517:
 20122 0158 AFE7     		b	.L1400
 20123              	.L1435:
3417:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20124              		.loc 1 3417 4 discriminator 6 view .LVU5208
 20125              	.LBE3026:
 20126              	.LBB3039:
3459:src/xeq.c     **** 		} else
 20127              		.loc 1 3459 4 is_stmt 1 view .LVU5209
 20128 015a FFF7FEFF 		bl	dn_subtract
 20129              	.LVL1518:
 20130 015e A8E7     		b	.L1417
 20131              	.L1433:
3432:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 20132              		.loc 1 3432 4 view .LVU5210
 20133 0160 1BA9     		add	r1, sp, #108
 20134 0162 0846     		mov	r0, r1
 20135 0164 FFF7FEFF 		bl	dn_minus
 20136              	.LVL1519:
 20137 0168 6AE7     		b	.L1410
 20138              	.LVL1520:
 20139              	.L1438:
3432:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 20140              		.loc 1 3432 4 is_stmt 0 view .LVU5211
 20141              	.LBE3039:
 20142              	.LBB3040:
3408:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20143              		.loc 1 3408 4 is_stmt 1 view .LVU5212
3408:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20144              		.loc 1 3408 8 is_stmt 0 view .LVU5213
 20145 016a FFF7FEFF 		bl	intSubtract
 20146              	.LVL1521:
ARM GAS  /tmp/ccQlyisH.s 			page 539


3408:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20147              		.loc 1 3408 8 view .LVU5214
 20148 016e 0746     		mov	r7, r0
 20149              	.LBB3035:
 20150              	.LBB3030:
1392:src/xeq.c     **** }
 20151              		.loc 1 1392 8 view .LVU5215
 20152 0170 2846     		mov	r0, r5
 20153              	.LBE3030:
 20154              	.LBE3035:
3408:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20155              		.loc 1 3408 8 view .LVU5216
 20156 0172 0E46     		mov	r6, r1
 20157              	.LVL1522:
3409:src/xeq.c     **** 
 20158              		.loc 1 3409 3 is_stmt 1 view .LVU5217
3409:src/xeq.c     **** 
 20159              		.loc 1 3409 3 is_stmt 0 view .LVU5218
 20160 0174 CDE92471 		strd	r7, r1, [sp, #144]
 20161              	.LVL1523:
 20162              	.LBB3036:
1391:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20163              		.loc 1 1391 6 is_stmt 1 view .LVU5219
 20164              	.LBB3031:
1392:src/xeq.c     **** }
 20165              		.loc 1 1392 2 view .LVU5220
1392:src/xeq.c     **** }
 20166              		.loc 1 1392 8 is_stmt 0 view .LVU5221
 20167 0178 FFF7FEFF 		bl	get_reg_n
 20168              	.LVL1524:
1392:src/xeq.c     **** }
 20169              		.loc 1 1392 2 view .LVU5222
 20170 017c 24A9     		add	r1, sp, #144
 20171 017e 0822     		movs	r2, #8
 20172 0180 FFF7FEFF 		bl	xcopy
 20173              	.LVL1525:
1392:src/xeq.c     **** }
 20174              		.loc 1 1392 2 view .LVU5223
 20175              	.LBE3031:
 20176              	.LBE3036:
3411:src/xeq.c     **** 		if (op == RARG_ISG)
 20177              		.loc 1 3411 3 is_stmt 1 view .LVU5224
3411:src/xeq.c     **** 		if (op == RARG_ISG)
 20178              		.loc 1 3411 8 is_stmt 0 view .LVU5225
 20179 0184 24AA     		add	r2, sp, #144
 20180 0186 3846     		mov	r0, r7
 20181 0188 3146     		mov	r1, r6
 20182 018a FFF7FEFF 		bl	extract_value
 20183              	.LVL1526:
3412:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20184              		.loc 1 3412 3 is_stmt 1 view .LVU5226
3414:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20185              		.loc 1 3414 8 view .LVU5227
3414:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20186              		.loc 1 3414 11 is_stmt 0 view .LVU5228
 20187 018e 3A2C     		cmp	r4, #58
3415:src/xeq.c     **** 		else if (op == RARG_ISE)
ARM GAS  /tmp/ccQlyisH.s 			page 540


 20188              		.loc 1 3415 4 view .LVU5229
 20189 0190 249B     		ldr	r3, [sp, #144]
3414:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20190              		.loc 1 3414 11 view .LVU5230
 20191 0192 25D0     		beq	.L1439
3419:src/xeq.c     **** 		return;
 20192              		.loc 1 3419 4 is_stmt 1 view .LVU5231
 20193 0194 13B3     		cbz	r3, .L1423
 20194              	.LVL1527:
 20195              	.L1431:
3419:src/xeq.c     **** 		return;
 20196              		.loc 1 3419 4 is_stmt 0 discriminator 2 view .LVU5232
 20197 0196 50EA0103 		orrs	r3, r0, r1
 20198 019a 0CBF     		ite	eq
 20199 019c 0120     		moveq	r0, #1
 20200 019e 0020     		movne	r0, #0
 20201              	.L1408:
3419:src/xeq.c     **** 		return;
 20202              		.loc 1 3419 4 discriminator 6 view .LVU5233
 20203 01a0 FFF7FEFF 		bl	fin_tst
 20204              	.LVL1528:
3420:src/xeq.c     **** 	} else {
 20205              		.loc 1 3420 3 is_stmt 1 discriminator 6 view .LVU5234
 20206              	.LBE3040:
3464:src/xeq.c     **** 
 20207              		.loc 1 3464 1 is_stmt 0 discriminator 6 view .LVU5235
 20208 01a4 2FB0     		add	sp, sp, #188
 20209              		.cfi_remember_state
 20210              		.cfi_def_cfa_offset 20
 20211              		@ sp needed
 20212 01a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 20213              	.LVL1529:
 20214              	.L1436:
 20215              		.cfi_restore_state
 20216              	.LBB3041:
3452:src/xeq.c     **** 			else
 20217              		.loc 1 3452 5 is_stmt 1 view .LVU5236
 20218 01a8 FFF7FEFF 		bl	dn_le0
 20219              	.LVL1530:
 20220 01ac FFF7FEFF 		bl	fin_tst
 20221              	.LVL1531:
 20222 01b0 76E7     		b	.L1414
 20223              	.LVL1532:
 20224              	.L1402:
3452:src/xeq.c     **** 			else
 20225              		.loc 1 3452 5 is_stmt 0 view .LVU5237
 20226              	.LBE3041:
 20227              	.LBB3042:
3406:src/xeq.c     **** 		else
 20228              		.loc 1 3406 4 is_stmt 1 view .LVU5238
3406:src/xeq.c     **** 		else
 20229              		.loc 1 3406 8 is_stmt 0 view .LVU5239
 20230 01b2 FFF7FEFF 		bl	intAdd
 20231              	.LVL1533:
3406:src/xeq.c     **** 		else
 20232              		.loc 1 3406 8 view .LVU5240
 20233 01b6 0646     		mov	r6, r0
ARM GAS  /tmp/ccQlyisH.s 			page 541


 20234              	.LBB3037:
 20235              	.LBB3032:
1392:src/xeq.c     **** }
 20236              		.loc 1 1392 8 view .LVU5241
 20237 01b8 2846     		mov	r0, r5
 20238              	.LBE3032:
 20239              	.LBE3037:
3406:src/xeq.c     **** 		else
 20240              		.loc 1 3406 8 view .LVU5242
 20241 01ba 0C46     		mov	r4, r1
 20242              	.LVL1534:
3409:src/xeq.c     **** 
 20243              		.loc 1 3409 3 is_stmt 1 view .LVU5243
3409:src/xeq.c     **** 
 20244              		.loc 1 3409 3 is_stmt 0 view .LVU5244
 20245 01bc CDE92461 		strd	r6, r1, [sp, #144]
 20246              	.LVL1535:
 20247              	.LBB3038:
1391:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20248              		.loc 1 1391 6 is_stmt 1 view .LVU5245
 20249              	.LBB3033:
1392:src/xeq.c     **** }
 20250              		.loc 1 1392 2 view .LVU5246
1392:src/xeq.c     **** }
 20251              		.loc 1 1392 8 is_stmt 0 view .LVU5247
 20252 01c0 FFF7FEFF 		bl	get_reg_n
 20253              	.LVL1536:
1392:src/xeq.c     **** }
 20254              		.loc 1 1392 2 view .LVU5248
 20255 01c4 24A9     		add	r1, sp, #144
 20256 01c6 0822     		movs	r2, #8
 20257 01c8 FFF7FEFF 		bl	xcopy
 20258              	.LVL1537:
1392:src/xeq.c     **** }
 20259              		.loc 1 1392 2 view .LVU5249
 20260              	.LBE3033:
 20261              	.LBE3038:
3411:src/xeq.c     **** 		if (op == RARG_ISG)
 20262              		.loc 1 3411 3 is_stmt 1 view .LVU5250
3411:src/xeq.c     **** 		if (op == RARG_ISG)
 20263              		.loc 1 3411 8 is_stmt 0 view .LVU5251
 20264 01cc 24AA     		add	r2, sp, #144
 20265 01ce 3046     		mov	r0, r6
 20266 01d0 2146     		mov	r1, r4
 20267 01d2 FFF7FEFF 		bl	extract_value
 20268              	.LVL1538:
3413:src/xeq.c     **** 		else if (op == RARG_DSE)
 20269              		.loc 1 3413 4 view .LVU5252
 20270 01d6 249B     		ldr	r3, [sp, #144]
 20271              	.LVL1539:
3412:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20272              		.loc 1 3412 3 is_stmt 1 view .LVU5253
3413:src/xeq.c     **** 		else if (op == RARG_DSE)
 20273              		.loc 1 3413 4 view .LVU5254
 20274 01d8 002B     		cmp	r3, #0
 20275 01da DCD0     		beq	.L1431
 20276              	.LVL1540:
ARM GAS  /tmp/ccQlyisH.s 			page 542


 20277              	.L1423:
3419:src/xeq.c     **** 		return;
 20278              		.loc 1 3419 4 is_stmt 0 view .LVU5255
 20279 01dc 0120     		movs	r0, #1
 20280 01de DFE7     		b	.L1408
 20281              	.LVL1541:
 20282              	.L1439:
3415:src/xeq.c     **** 		else if (op == RARG_ISE)
 20283              		.loc 1 3415 4 is_stmt 1 view .LVU5256
 20284 01e0 2BB9     		cbnz	r3, .L1422
3415:src/xeq.c     **** 		else if (op == RARG_ISE)
 20285              		.loc 1 3415 4 is_stmt 0 discriminator 1 view .LVU5257
 20286 01e2 50EA0103 		orrs	r3, r0, r1
 20287 01e6 14BF     		ite	ne
 20288 01e8 0120     		movne	r0, #1
 20289              	.LVL1542:
3415:src/xeq.c     **** 		else if (op == RARG_ISE)
 20290              		.loc 1 3415 4 discriminator 1 view .LVU5258
 20291 01ea 0020     		moveq	r0, #0
 20292 01ec D8E7     		b	.L1408
 20293              	.LVL1543:
 20294              	.L1422:
3415:src/xeq.c     **** 		else if (op == RARG_ISE)
 20295              		.loc 1 3415 4 view .LVU5259
 20296 01ee 0020     		movs	r0, #0
 20297              	.LVL1544:
3415:src/xeq.c     **** 		else if (op == RARG_ISE)
 20298              		.loc 1 3415 4 view .LVU5260
 20299 01f0 D6E7     		b	.L1408
 20300              	.L1441:
 20301 01f2 00BF     		.align	2
 20302              	.L1440:
 20303 01f4 00000000 		.word	main_ram
 20304              	.LBE3042:
 20305              		.cfi_endproc
 20306              	.LFE194:
 20308              		.section	.text.op_shift_digit,"ax",%progbits
 20309              		.align	1
 20310              		.p2align 2,,3
 20311              		.global	op_shift_digit
 20312              		.syntax unified
 20313              		.thumb
 20314              		.thumb_func
 20315              		.fpu fpv4-sp-d16
 20317              	op_shift_digit:
 20318              	.LVL1545:
 20319              	.LFB195:
3469:src/xeq.c     **** 	decNumber x;
 20320              		.loc 1 3469 51 is_stmt 1 view -0
 20321              		.cfi_startproc
 20322              		@ args = 0, pretend = 0, frame = 40
 20323              		@ frame_needed = 0, uses_anonymous_args = 0
3470:src/xeq.c     **** 	int adjust = n;
 20324              		.loc 1 3470 2 view .LVU5262
3471:src/xeq.c     **** 
 20325              		.loc 1 3471 2 view .LVU5263
3473:src/xeq.c     **** 		bad_mode_error();
ARM GAS  /tmp/ccQlyisH.s 			page 543


 20326              		.loc 1 3473 6 is_stmt 0 view .LVU5264
 20327 0000 174B     		ldr	r3, .L1451
 20328 0002 1B68     		ldr	r3, [r3]
 20329 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 20330              	.LVL1546:
3473:src/xeq.c     **** 		bad_mode_error();
 20331              		.loc 1 3473 2 is_stmt 1 view .LVU5265
3473:src/xeq.c     **** 		bad_mode_error();
 20332              		.loc 1 3473 5 is_stmt 0 view .LVU5266
 20333 0008 DB07     		lsls	r3, r3, #31
 20334 000a 06D5     		bpl	.L1443
3474:src/xeq.c     **** 		return;
 20335              		.loc 1 3474 3 is_stmt 1 view .LVU5267
 20336              	.LBB3054:
 20337              	.LBI3054:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 20338              		.loc 1 566 6 view .LVU5268
 20339              	.LBE3054:
 567:src/xeq.c     **** }
 20340              		.loc 1 567 2 view .LVU5269
 20341              	.LVL1547:
 20342              	.LBB3059:
 20343              	.LBB3055:
 20344              	.LBI3055:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 20345              		.loc 1 537 5 view .LVU5270
 20346              	.LBB3056:
 538:src/xeq.c     **** 		Error = e;
 20347              		.loc 1 538 2 view .LVU5271
 538:src/xeq.c     **** 		Error = e;
 20348              		.loc 1 538 12 is_stmt 0 view .LVU5272
 20349 000c 154B     		ldr	r3, .L1451+4
 538:src/xeq.c     **** 		Error = e;
 20350              		.loc 1 538 5 view .LVU5273
 20351 000e 1A68     		ldr	r2, [r3]
 20352 0010 12B9     		cbnz	r2, .L1449
 20353              	.LVL1548:
 20354              	.LBB3057:
 20355              	.LBI3057:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 20356              		.loc 1 537 5 is_stmt 1 view .LVU5274
 20357              	.LBB3058:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 20358              		.loc 1 539 3 view .LVU5275
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 20359              		.loc 1 539 9 is_stmt 0 view .LVU5276
 20360 0012 0D22     		movs	r2, #13
 20361 0014 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 20362              		.loc 1 540 3 is_stmt 1 view .LVU5277
 20363 0016 7047     		bx	lr
 20364              	.LVL1549:
 20365              	.L1449:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 20366              		.loc 1 540 3 is_stmt 0 view .LVU5278
 20367 0018 7047     		bx	lr
 20368              	.LVL1550:
ARM GAS  /tmp/ccQlyisH.s 			page 544


 20369              	.L1443:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 20370              		.loc 1 540 3 view .LVU5279
 20371              	.LBE3058:
 20372              	.LBE3057:
 20373              	.LBE3056:
 20374              	.LBE3055:
 20375              	.LBE3059:
3477:src/xeq.c     **** 	setlastX();
 20376              		.loc 1 3477 2 is_stmt 1 view .LVU5280
3469:src/xeq.c     **** 	decNumber x;
 20377              		.loc 1 3469 51 is_stmt 0 view .LVU5281
 20378 001a 30B5     		push	{r4, r5, lr}
 20379              		.cfi_def_cfa_offset 12
 20380              		.cfi_offset 4, -12
 20381              		.cfi_offset 5, -8
 20382              		.cfi_offset 14, -4
 20383 001c 8BB0     		sub	sp, sp, #44
 20384              		.cfi_def_cfa_offset 56
 20385              	.LVL1551:
 20386              	.LBB3060:
 20387              	.LBI3060:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 20388              		.loc 1 815 12 is_stmt 1 view .LVU5282
 20389              	.LBB3061:
 816:src/xeq.c     **** }
 20390              		.loc 1 816 2 view .LVU5283
 20391 001e 0446     		mov	r4, r0
 20392 0020 0D46     		mov	r5, r1
 816:src/xeq.c     **** }
 20393              		.loc 1 816 9 is_stmt 0 view .LVU5284
 20394 0022 01A8     		add	r0, sp, #4
 20395              	.LVL1552:
 816:src/xeq.c     **** }
 20396              		.loc 1 816 9 view .LVU5285
 20397 0024 6421     		movs	r1, #100
 20398              	.LVL1553:
 816:src/xeq.c     **** }
 20399              		.loc 1 816 9 view .LVU5286
 20400 0026 FFF7FEFF 		bl	getRegister
 20401              	.LVL1554:
 816:src/xeq.c     **** }
 20402              		.loc 1 816 9 view .LVU5287
 20403              	.LBE3061:
 20404              	.LBE3060:
3478:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
 20405              		.loc 1 3478 2 is_stmt 1 view .LVU5288
 20406              	.LBB3062:
 20407              	.LBI3062:
 783:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 20408              		.loc 1 783 6 view .LVU5289
 20409              	.LBB3063:
 784:src/xeq.c     **** }
 20410              		.loc 1 784 2 view .LVU5290
 20411 002a 6421     		movs	r1, #100
 20412 002c 6C20     		movs	r0, #108
 20413 002e FFF7FEFF 		bl	copyreg_n
ARM GAS  /tmp/ccQlyisH.s 			page 545


 20414              	.LVL1555:
 20415              	.LBE3063:
 20416              	.LBE3062:
3479:src/xeq.c     **** 		return;
 20417              		.loc 1 3479 2 view .LVU5291
3479:src/xeq.c     **** 		return;
 20418              		.loc 1 3479 5 is_stmt 0 view .LVU5292
 20419 0032 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 20420 0036 13F0700F 		tst	r3, #112
 20421 003a 0ED1     		bne	.L1442
3479:src/xeq.c     **** 		return;
 20422              		.loc 1 3479 32 discriminator 1 view .LVU5293
 20423 003c 01A8     		add	r0, sp, #4
 20424 003e FFF7FEFF 		bl	dn_eq0
 20425              	.LVL1556:
3479:src/xeq.c     **** 		return;
 20426              		.loc 1 3479 29 discriminator 1 view .LVU5294
 20427 0042 50B9     		cbnz	r0, .L1442
3481:src/xeq.c     **** 		adjust = -adjust;
 20428              		.loc 1 3481 5 view .LVU5295
 20429 0044 722D     		cmp	r5, #114
3471:src/xeq.c     **** 
 20430              		.loc 1 3471 6 view .LVU5296
 20431 0046 2046     		mov	r0, r4
3481:src/xeq.c     **** 		adjust = -adjust;
 20432              		.loc 1 3481 2 is_stmt 1 view .LVU5297
3482:src/xeq.c     **** 	x.exponent += adjust;
 20433              		.loc 1 3482 3 view .LVU5298
3482:src/xeq.c     **** 	x.exponent += adjust;
 20434              		.loc 1 3482 10 is_stmt 0 view .LVU5299
 20435 0048 08BF     		it	eq
 20436 004a 6042     		rsbeq	r0, r4, #0
 20437              	.LVL1557:
3483:src/xeq.c     **** 	setX(&x);
 20438              		.loc 1 3483 2 is_stmt 1 view .LVU5300
3483:src/xeq.c     **** 	setX(&x);
 20439              		.loc 1 3483 13 is_stmt 0 view .LVU5301
 20440 004c 029C     		ldr	r4, [sp, #8]
 20441              	.LVL1558:
 20442              	.LBB3064:
 20443              	.LBB3065:
 820:src/xeq.c     **** }
 20444              		.loc 1 820 2 view .LVU5302
 20445 004e 01A9     		add	r1, sp, #4
 20446              	.LBE3065:
 20447              	.LBE3064:
3483:src/xeq.c     **** 	setX(&x);
 20448              		.loc 1 3483 13 view .LVU5303
 20449 0050 0444     		add	r4, r4, r0
 20450              	.LBB3068:
 20451              	.LBB3066:
 820:src/xeq.c     **** }
 20452              		.loc 1 820 2 view .LVU5304
 20453 0052 6420     		movs	r0, #100
 20454              	.LVL1559:
 820:src/xeq.c     **** }
 20455              		.loc 1 820 2 view .LVU5305
ARM GAS  /tmp/ccQlyisH.s 			page 546


 20456              	.LBE3066:
 20457              	.LBE3068:
3483:src/xeq.c     **** 	setX(&x);
 20458              		.loc 1 3483 13 view .LVU5306
 20459 0054 0294     		str	r4, [sp, #8]
3484:src/xeq.c     **** }
 20460              		.loc 1 3484 2 is_stmt 1 view .LVU5307
 20461              	.LVL1560:
 20462              	.LBB3069:
 20463              	.LBI3064:
 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 20464              		.loc 1 819 6 view .LVU5308
 20465              	.LBB3067:
 820:src/xeq.c     **** }
 20466              		.loc 1 820 2 view .LVU5309
 20467 0056 FFF7FEFF 		bl	setRegister
 20468              	.LVL1561:
 20469              	.L1442:
 820:src/xeq.c     **** }
 20470              		.loc 1 820 2 is_stmt 0 view .LVU5310
 20471              	.LBE3067:
 20472              	.LBE3069:
3485:src/xeq.c     **** 
 20473              		.loc 1 3485 1 view .LVU5311
 20474 005a 0BB0     		add	sp, sp, #44
 20475              		.cfi_def_cfa_offset 12
 20476              		@ sp needed
 20477 005c 30BD     		pop	{r4, r5, pc}
 20478              	.L1452:
 20479 005e 00BF     		.align	2
 20480              	.L1451:
 20481 0060 00000000 		.word	main_ram
 20482 0064 00000000 		.word	Error
 20483              		.cfi_endproc
 20484              	.LFE195:
 20486              		.section	.text.get_user_flag,"ax",%progbits
 20487              		.align	1
 20488              		.p2align 2,,3
 20489              		.global	get_user_flag
 20490              		.syntax unified
 20491              		.thumb
 20492              		.thumb_func
 20493              		.fpu fpv4-sp-d16
 20495              	get_user_flag:
 20496              	.LVL1562:
 20497              	.LFB197:
3518:src/xeq.c     **** 	unsigned short mask;
 20498              		.loc 1 3518 26 is_stmt 1 view -0
 20499              		.cfi_startproc
 20500              		@ args = 0, pretend = 0, frame = 8
 20501              		@ frame_needed = 0, uses_anonymous_args = 0
3519:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 20502              		.loc 1 3519 2 view .LVU5313
3520:src/xeq.c     **** 
 20503              		.loc 1 3520 2 view .LVU5314
3518:src/xeq.c     **** 	unsigned short mask;
 20504              		.loc 1 3518 26 is_stmt 0 view .LVU5315
ARM GAS  /tmp/ccQlyisH.s 			page 547


 20505 0000 00B5     		push	{lr}
 20506              		.cfi_def_cfa_offset 4
 20507              		.cfi_offset 14, -4
 20508 0002 83B0     		sub	sp, sp, #12
 20509              		.cfi_def_cfa_offset 16
3520:src/xeq.c     **** 
 20510              		.loc 1 3520 34 view .LVU5316
 20511 0004 0DF10601 		add	r1, sp, #6
 20512 0008 FFF7FEFF 		bl	flag_word
 20513              	.LVL1563:
3522:src/xeq.c     **** }
 20514              		.loc 1 3522 2 is_stmt 1 view .LVU5317
3522:src/xeq.c     **** }
 20515              		.loc 1 3522 24 is_stmt 0 view .LVU5318
 20516 000c BDF80630 		ldrh	r3, [sp, #6]
 20517 0010 0288     		ldrh	r2, [r0]
 20518 0012 1A42     		tst	r2, r3
3523:src/xeq.c     **** 
 20519              		.loc 1 3523 1 view .LVU5319
 20520 0014 14BF     		ite	ne
 20521 0016 0120     		movne	r0, #1
 20522              	.LVL1564:
3523:src/xeq.c     **** 
 20523              		.loc 1 3523 1 view .LVU5320
 20524 0018 0020     		moveq	r0, #0
 20525 001a 03B0     		add	sp, sp, #12
 20526              		.cfi_def_cfa_offset 4
 20527              		@ sp needed
 20528 001c 5DF804FB 		ldr	pc, [sp], #4
 20529              		.cfi_endproc
 20530              	.LFE197:
 20532              		.section	.text.cmdflag,"ax",%progbits
 20533              		.align	1
 20534              		.p2align 2,,3
 20535              		.global	cmdflag
 20536              		.syntax unified
 20537              		.thumb
 20538              		.thumb_func
 20539              		.fpu fpv4-sp-d16
 20541              	cmdflag:
 20542              	.LVL1565:
 20543              	.LFB199:
3546:src/xeq.c     **** 	unsigned short mask;
 20544              		.loc 1 3546 46 is_stmt 1 view -0
 20545              		.cfi_startproc
 20546              		@ args = 0, pretend = 0, frame = 8
 20547              		@ frame_needed = 0, uses_anonymous_args = 0
3547:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
 20548              		.loc 1 3547 2 view .LVU5322
3548:src/xeq.c     **** 	int flg = *f & mask;
 20549              		.loc 1 3548 2 view .LVU5323
3546:src/xeq.c     **** 	unsigned short mask;
 20550              		.loc 1 3546 46 is_stmt 0 view .LVU5324
 20551 0000 70B5     		push	{r4, r5, r6, lr}
 20552              		.cfi_def_cfa_offset 16
 20553              		.cfi_offset 4, -16
 20554              		.cfi_offset 5, -12
ARM GAS  /tmp/ccQlyisH.s 			page 548


 20555              		.cfi_offset 6, -8
 20556              		.cfi_offset 14, -4
 20557 0002 82B0     		sub	sp, sp, #8
 20558              		.cfi_def_cfa_offset 24
3546:src/xeq.c     **** 	unsigned short mask;
 20559              		.loc 1 3546 46 view .LVU5325
 20560 0004 0C46     		mov	r4, r1
3548:src/xeq.c     **** 	int flg = *f & mask;
 20561              		.loc 1 3548 28 view .LVU5326
 20562 0006 0DF10601 		add	r1, sp, #6
 20563              	.LVL1566:
3546:src/xeq.c     **** 	unsigned short mask;
 20564              		.loc 1 3546 46 view .LVU5327
 20565 000a 0646     		mov	r6, r0
3548:src/xeq.c     **** 	int flg = *f & mask;
 20566              		.loc 1 3548 28 view .LVU5328
 20567 000c FFF7FEFF 		bl	flag_word
 20568              	.LVL1567:
3549:src/xeq.c     **** 
 20569              		.loc 1 3549 15 view .LVU5329
 20570 0010 BDF80620 		ldrh	r2, [sp, #6]
3549:src/xeq.c     **** 
 20571              		.loc 1 3549 12 view .LVU5330
 20572 0014 0388     		ldrh	r3, [r0]
 20573 0016 A4F15101 		sub	r1, r4, #81
3548:src/xeq.c     **** 	int flg = *f & mask;
 20574              		.loc 1 3548 28 view .LVU5331
 20575 001a 0546     		mov	r5, r0
 20576              	.LVL1568:
3549:src/xeq.c     **** 
 20577              		.loc 1 3549 2 is_stmt 1 view .LVU5332
3549:src/xeq.c     **** 
 20578              		.loc 1 3549 6 is_stmt 0 view .LVU5333
 20579 001c 03EA0200 		and	r0, r3, r2
 20580              	.LVL1569:
3551:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
 20581              		.loc 1 3551 2 is_stmt 1 view .LVU5334
 20582 0020 0A29     		cmp	r1, #10
 20583 0022 1AD8     		bhi	.L1455
 20584 0024 DFE801F0 		tbb	[pc, r1]
 20585              	.L1458:
 20586 0028 23       		.byte	(.L1468-.L1458)/2
 20587 0029 0E       		.byte	(.L1467-.L1458)/2
 20588 002a 46       		.byte	(.L1466-.L1458)/2
 20589 002b 29       		.byte	(.L1479-.L1458)/2
 20590 002c 26       		.byte	(.L1464-.L1458)/2
 20591 002d 09       		.byte	(.L1478-.L1458)/2
 20592 002e 1E       		.byte	(.L1477-.L1458)/2
 20593 002f 2D       		.byte	(.L1461-.L1458)/2
 20594 0030 06       		.byte	(.L1460-.L1458)/2
 20595 0031 1B       		.byte	(.L1459-.L1458)/2
 20596 0032 3A       		.byte	(.L1457-.L1458)/2
 20597 0033 00       		.p2align 1
 20598              	.L1460:
3563:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20599              		.loc 1 3563 17 view .LVU5335
 20600 0034 B0FA80F0 		clz	r0, r0
ARM GAS  /tmp/ccQlyisH.s 			page 549


 20601              	.LVL1570:
3563:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20602              		.loc 1 3563 17 is_stmt 0 view .LVU5336
 20603 0038 4009     		lsrs	r0, r0, #5
 20604              	.L1478:
3563:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20605              		.loc 1 3563 17 view .LVU5337
 20606 003a FFF7FEFF 		bl	fin_tst
 20607              	.LVL1571:
3563:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20608              		.loc 1 3563 33 is_stmt 1 view .LVU5338
3563:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20609              		.loc 1 3563 45 view .LVU5339
3572:src/xeq.c     **** 		*f |= mask;
 20610              		.loc 1 3572 2 view .LVU5340
 20611 003e 2B88     		ldrh	r3, [r5]
 20612 0040 BDF80620 		ldrh	r2, [sp, #6]
 20613              	.LVL1572:
 20614              	.L1467:
3575:src/xeq.c     **** 
 20615              		.loc 1 3575 3 view .LVU5341
3575:src/xeq.c     **** 
 20616              		.loc 1 3575 6 is_stmt 0 view .LVU5342
 20617 0044 23EA0203 		bic	r3, r3, r2
 20618 0048 0021     		movs	r1, #0
 20619              	.L1470:
3577:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20620              		.loc 1 3577 5 view .LVU5343
 20621 004a 682E     		cmp	r6, #104
 20622 004c 2B80     		strh	r3, [r5]	@ movhi
3577:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20623              		.loc 1 3577 2 is_stmt 1 view .LVU5344
3577:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20624              		.loc 1 3577 5 is_stmt 0 view .LVU5345
 20625 004e 04D1     		bne	.L1455
3578:src/xeq.c     **** 		finish_display(); // BIG_EQ
 20626              		.loc 1 3578 3 is_stmt 1 view .LVU5346
 20627 0050 8320     		movs	r0, #131
 20628 0052 FFF7FEFF 		bl	dot
 20629              	.LVL1573:
3579:src/xeq.c     **** 	}
 20630              		.loc 1 3579 3 view .LVU5347
 20631 0056 FFF7FEFF 		bl	finish_display
 20632              	.LVL1574:
 20633              	.L1455:
3581:src/xeq.c     **** 
 20634              		.loc 1 3581 1 is_stmt 0 view .LVU5348
 20635 005a 02B0     		add	sp, sp, #8
 20636              		.cfi_remember_state
 20637              		.cfi_def_cfa_offset 16
 20638              		@ sp needed
 20639 005c 70BD     		pop	{r4, r5, r6, pc}
 20640              	.LVL1575:
 20641              	.L1459:
 20642              		.cfi_restore_state
3564:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20643              		.loc 1 3564 17 is_stmt 1 view .LVU5349
ARM GAS  /tmp/ccQlyisH.s 			page 550


 20644 005e B0FA80F0 		clz	r0, r0
 20645              	.LVL1576:
3564:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20646              		.loc 1 3564 17 is_stmt 0 view .LVU5350
 20647 0062 4009     		lsrs	r0, r0, #5
 20648              	.L1477:
3564:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20649              		.loc 1 3564 17 view .LVU5351
 20650 0064 FFF7FEFF 		bl	fin_tst
 20651              	.LVL1577:
3564:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20652              		.loc 1 3564 33 is_stmt 1 view .LVU5352
3564:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20653              		.loc 1 3564 45 view .LVU5353
3572:src/xeq.c     **** 		*f |= mask;
 20654              		.loc 1 3572 2 view .LVU5354
 20655 0068 2B88     		ldrh	r3, [r5]
 20656 006a BDF80620 		ldrh	r2, [sp, #6]
 20657              	.LVL1578:
 20658              	.L1468:
3573:src/xeq.c     **** 	else
 20659              		.loc 1 3573 3 view .LVU5355
3573:src/xeq.c     **** 	else
 20660              		.loc 1 3573 6 is_stmt 0 view .LVU5356
 20661 006e 1343     		orrs	r3, r3, r2
 20662 0070 0121     		movs	r1, #1
 20663 0072 EAE7     		b	.L1470
 20664              	.LVL1579:
 20665              	.L1464:
3557:src/xeq.c     **** 
 20666              		.loc 1 3557 16 is_stmt 1 view .LVU5357
 20667 0074 B0FA80F0 		clz	r0, r0
 20668              	.LVL1580:
3557:src/xeq.c     **** 
 20669              		.loc 1 3557 16 is_stmt 0 view .LVU5358
 20670 0078 4009     		lsrs	r0, r0, #5
 20671              	.L1479:
3557:src/xeq.c     **** 
 20672              		.loc 1 3557 16 view .LVU5359
 20673 007a FFF7FEFF 		bl	fin_tst
 20674              	.LVL1581:
3557:src/xeq.c     **** 
 20675              		.loc 1 3557 37 is_stmt 1 view .LVU5360
3581:src/xeq.c     **** 
 20676              		.loc 1 3581 1 is_stmt 0 view .LVU5361
 20677 007e 02B0     		add	sp, sp, #8
 20678              		.cfi_remember_state
 20679              		.cfi_def_cfa_offset 16
 20680              		@ sp needed
 20681 0080 70BD     		pop	{r4, r5, r6, pc}
 20682              	.LVL1582:
 20683              	.L1461:
 20684              		.cfi_restore_state
3561:src/xeq.c     **** 
 20685              		.loc 1 3561 17 is_stmt 1 view .LVU5362
3561:src/xeq.c     **** 
 20686              		.loc 1 3561 45 is_stmt 0 view .LVU5363
ARM GAS  /tmp/ccQlyisH.s 			page 551


 20687 0082 B0FA80F4 		clz	r4, r0
 20688 0086 6409     		lsrs	r4, r4, #5
3561:src/xeq.c     **** 
 20689              		.loc 1 3561 17 view .LVU5364
 20690 0088 FFF7FEFF 		bl	fin_tst
 20691              	.LVL1583:
3561:src/xeq.c     **** 
 20692              		.loc 1 3561 31 is_stmt 1 view .LVU5365
3561:src/xeq.c     **** 
 20693              		.loc 1 3561 52 view .LVU5366
3572:src/xeq.c     **** 		*f |= mask;
 20694              		.loc 1 3572 2 view .LVU5367
 20695 008c 2B88     		ldrh	r3, [r5]
 20696 008e BDF80620 		ldrh	r2, [sp, #6]
3572:src/xeq.c     **** 		*f |= mask;
 20697              		.loc 1 3572 5 is_stmt 0 view .LVU5368
 20698 0092 002C     		cmp	r4, #0
 20699 0094 D6D0     		beq	.L1467
 20700              	.L1480:
 20701              	.LVL1584:
3573:src/xeq.c     **** 	else
 20702              		.loc 1 3573 3 is_stmt 1 view .LVU5369
3573:src/xeq.c     **** 	else
 20703              		.loc 1 3573 6 is_stmt 0 view .LVU5370
 20704 0096 1343     		orrs	r3, r3, r2
 20705 0098 0121     		movs	r1, #1
 20706 009a D6E7     		b	.L1470
 20707              	.LVL1585:
 20708              	.L1457:
3565:src/xeq.c     **** 
 20709              		.loc 1 3565 17 is_stmt 1 view .LVU5371
 20710 009c B0FA80F4 		clz	r4, r0
 20711 00a0 6409     		lsrs	r4, r4, #5
 20712 00a2 2046     		mov	r0, r4
 20713              	.LVL1586:
3565:src/xeq.c     **** 
 20714              		.loc 1 3565 17 is_stmt 0 view .LVU5372
 20715 00a4 FFF7FEFF 		bl	fin_tst
 20716              	.LVL1587:
3565:src/xeq.c     **** 
 20717              		.loc 1 3565 33 is_stmt 1 view .LVU5373
3565:src/xeq.c     **** 
 20718              		.loc 1 3565 52 view .LVU5374
 20719 00a8 2B88     		ldrh	r3, [r5]
 20720 00aa BDF80620 		ldrh	r2, [sp, #6]
3572:src/xeq.c     **** 		*f |= mask;
 20721              		.loc 1 3572 2 view .LVU5375
3572:src/xeq.c     **** 		*f |= mask;
 20722              		.loc 1 3572 5 is_stmt 0 view .LVU5376
 20723 00ae 002C     		cmp	r4, #0
 20724 00b0 C8D0     		beq	.L1467
 20725 00b2 F0E7     		b	.L1480
 20726              	.LVL1588:
 20727              	.L1466:
3554:src/xeq.c     **** 
 20728              		.loc 1 3554 16 is_stmt 1 view .LVU5377
3554:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 552


 20729              		.loc 1 3554 29 is_stmt 0 view .LVU5378
 20730 00b4 B0FA80F4 		clz	r4, r0
 20731 00b8 6409     		lsrs	r4, r4, #5
 20732              	.LVL1589:
3554:src/xeq.c     **** 
 20733              		.loc 1 3554 38 is_stmt 1 view .LVU5379
3572:src/xeq.c     **** 		*f |= mask;
 20734              		.loc 1 3572 2 view .LVU5380
3572:src/xeq.c     **** 		*f |= mask;
 20735              		.loc 1 3572 5 is_stmt 0 view .LVU5381
 20736 00ba 002C     		cmp	r4, #0
 20737 00bc C2D0     		beq	.L1467
 20738 00be EAE7     		b	.L1480
 20739              		.cfi_endproc
 20740              	.LFE199:
 20742              		.section	.text.put_user_flag,"ax",%progbits
 20743              		.align	1
 20744              		.p2align 2,,3
 20745              		.global	put_user_flag
 20746              		.syntax unified
 20747              		.thumb
 20748              		.thumb_func
 20749              		.fpu fpv4-sp-d16
 20751              	put_user_flag:
 20752              	.LVL1590:
 20753              	.LFB198:
3525:src/xeq.c     **** 	if (f)	set_user_flag(n);
 20754              		.loc 1 3525 34 is_stmt 1 view -0
 20755              		.cfi_startproc
 20756              		@ args = 0, pretend = 0, frame = 0
 20757              		@ frame_needed = 0, uses_anonymous_args = 0
 20758              		@ link register save eliminated.
3526:src/xeq.c     **** 	else	clr_user_flag(n);
 20759              		.loc 1 3526 2 view .LVU5383
3526:src/xeq.c     **** 	else	clr_user_flag(n);
 20760              		.loc 1 3526 5 is_stmt 0 view .LVU5384
 20761 0000 11B1     		cbz	r1, .L1482
3526:src/xeq.c     **** 	else	clr_user_flag(n);
 20762              		.loc 1 3526 9 is_stmt 1 discriminator 1 view .LVU5385
 20763 0002 5121     		movs	r1, #81
 20764              	.LVL1591:
3526:src/xeq.c     **** 	else	clr_user_flag(n);
 20765              		.loc 1 3526 9 is_stmt 0 discriminator 1 view .LVU5386
 20766 0004 FFF7FEBF 		b	cmdflag
 20767              	.LVL1592:
 20768              	.L1482:
3527:src/xeq.c     **** }
 20769              		.loc 1 3527 7 is_stmt 1 view .LVU5387
 20770 0008 5221     		movs	r1, #82
 20771              	.LVL1593:
3527:src/xeq.c     **** }
 20772              		.loc 1 3527 7 is_stmt 0 view .LVU5388
 20773 000a FFF7FEBF 		b	cmdflag
 20774              	.LVL1594:
3527:src/xeq.c     **** }
 20775              		.loc 1 3527 7 view .LVU5389
 20776              		.cfi_endproc
ARM GAS  /tmp/ccQlyisH.s 			page 553


 20777              	.LFE198:
 20779 000e 00BF     		.section	.text.clrflags,"ax",%progbits
 20780              		.align	1
 20781              		.p2align 2,,3
 20782              		.global	clrflags
 20783              		.syntax unified
 20784              		.thumb
 20785              		.thumb_func
 20786              		.fpu fpv4-sp-d16
 20788              	clrflags:
 20789              	.LVL1595:
 20790              	.LFB200:
3585:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 20791              		.loc 1 3585 30 is_stmt 1 view -0
 20792              		.cfi_startproc
 20793              		@ args = 0, pretend = 0, frame = 0
 20794              		@ frame_needed = 0, uses_anonymous_args = 0
3586:src/xeq.c     **** 	if (LocalRegs < 0) {
 20795              		.loc 1 3586 2 view .LVU5391
3585:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 20796              		.loc 1 3585 30 is_stmt 0 view .LVU5392
 20797 0000 10B5     		push	{r4, lr}
 20798              		.cfi_def_cfa_offset 8
 20799              		.cfi_offset 4, -8
 20800              		.cfi_offset 14, -4
3586:src/xeq.c     **** 	if (LocalRegs < 0) {
 20801              		.loc 1 3586 7 view .LVU5393
 20802 0002 0A4C     		ldr	r4, .L1487
 20803 0004 2068     		ldr	r0, [r4]
 20804              	.LVL1596:
3586:src/xeq.c     **** 	if (LocalRegs < 0) {
 20805              		.loc 1 3586 2 view .LVU5394
 20806 0006 0E22     		movs	r2, #14
 20807 0008 00F5FE60 		add	r0, r0, #2032
 20808 000c 0021     		movs	r1, #0
 20809 000e FFF7FEFF 		bl	xset
 20810              	.LVL1597:
3587:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20811              		.loc 1 3587 2 is_stmt 1 view .LVU5395
3587:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20812              		.loc 1 3587 6 is_stmt 0 view .LVU5396
 20813 0012 2368     		ldr	r3, [r4]
3587:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20814              		.loc 1 3587 5 view .LVU5397
 20815 0014 B3F9DE37 		ldrsh	r3, [r3, #2014]
 20816 0018 002B     		cmp	r3, #0
 20817 001a 00DB     		blt	.L1486
3590:src/xeq.c     **** 
 20818              		.loc 1 3590 1 view .LVU5398
 20819 001c 10BD     		pop	{r4, pc}
 20820              	.L1486:
3588:src/xeq.c     **** 	}
 20821              		.loc 1 3588 3 is_stmt 1 view .LVU5399
3588:src/xeq.c     **** 	}
 20822              		.loc 1 3588 5 is_stmt 0 view .LVU5400
 20823 001e 0021     		movs	r1, #0
 20824 0020 7020     		movs	r0, #112
ARM GAS  /tmp/ccQlyisH.s 			page 554


 20825 0022 FFF7FEFF 		bl	flag_word
 20826              	.LVL1598:
3588:src/xeq.c     **** 	}
 20827              		.loc 1 3588 37 view .LVU5401
 20828 0026 0023     		movs	r3, #0
 20829 0028 0380     		strh	r3, [r0]	@ movhi
3590:src/xeq.c     **** 
 20830              		.loc 1 3590 1 view .LVU5402
 20831 002a 10BD     		pop	{r4, pc}
 20832              	.L1488:
 20833              		.align	2
 20834              	.L1487:
 20835 002c 00000000 		.word	main_ram
 20836              		.cfi_endproc
 20837              	.LFE200:
 20839              		.section	.text.intws,"ax",%progbits
 20840              		.align	1
 20841              		.p2align 2,,3
 20842              		.global	intws
 20843              		.syntax unified
 20844              		.thumb
 20845              		.thumb_func
 20846              		.fpu fpv4-sp-d16
 20848              	intws:
 20849              	.LVL1599:
 20850              	.LFB201:
3595:src/xeq.c     **** 	if (is_intmode()) {
 20851              		.loc 1 3595 44 is_stmt 1 view -0
 20852              		.cfi_startproc
 20853              		@ args = 0, pretend = 0, frame = 8
 20854              		@ frame_needed = 0, uses_anonymous_args = 0
3596:src/xeq.c     **** 		int i, ss = stack_size();
 20855              		.loc 1 3596 2 view .LVU5404
3595:src/xeq.c     **** 	if (is_intmode()) {
 20856              		.loc 1 3595 44 is_stmt 0 view .LVU5405
 20857 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 20858              		.cfi_def_cfa_offset 24
 20859              		.cfi_offset 4, -24
 20860              		.cfi_offset 5, -20
 20861              		.cfi_offset 6, -16
 20862              		.cfi_offset 7, -12
 20863              		.cfi_offset 8, -8
 20864              		.cfi_offset 14, -4
3596:src/xeq.c     **** 		int i, ss = stack_size();
 20865              		.loc 1 3596 6 view .LVU5406
 20866 0004 DFF8E080 		ldr	r8, .L1500+4
 20867 0008 D8F80030 		ldr	r3, [r8]
 20868 000c 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3596:src/xeq.c     **** 		int i, ss = stack_size();
 20869              		.loc 1 3596 5 view .LVU5407
 20870 0010 D107     		lsls	r1, r2, #31
 20871              	.LVL1600:
3595:src/xeq.c     **** 	if (is_intmode()) {
 20872              		.loc 1 3595 44 view .LVU5408
 20873 0012 82B0     		sub	sp, sp, #8
 20874              		.cfi_def_cfa_offset 32
3596:src/xeq.c     **** 		int i, ss = stack_size();
ARM GAS  /tmp/ccQlyisH.s 			page 555


 20875              		.loc 1 3596 5 view .LVU5409
 20876 0014 53D5     		bpl	.L1490
 20877              	.LBB3070:
3597:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
 20878              		.loc 1 3597 3 is_stmt 1 view .LVU5410
 20879              	.LBB3071:
 20880              	.LBI3071:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 20881              		.loc 1 703 5 view .LVU5411
 20882              	.LBB3072:
 704:src/xeq.c     **** 		return 4;
 20883              		.loc 1 704 2 view .LVU5412
 704:src/xeq.c     **** 		return 4;
 20884              		.loc 1 704 6 is_stmt 0 view .LVU5413
 20885 0016 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 20886              		.loc 1 704 5 view .LVU5414
 20887 001a 1207     		lsls	r2, r2, #28
 20888 001c 58D5     		bpl	.L1494
 20889              	.LBB3073:
 20890              	.LBI3073:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 20891              		.loc 1 182 5 is_stmt 1 view .LVU5415
 20892              	.LBB3074:
 183:src/xeq.c     **** }
 20893              		.loc 1 183 2 view .LVU5416
 183:src/xeq.c     **** }
 20894              		.loc 1 183 9 is_stmt 0 view .LVU5417
 20895 001e B3F8E027 		ldrh	r2, [r3, #2016]
 20896              	.LBE3074:
 20897              	.LBE3073:
 704:src/xeq.c     **** 		return 4;
 20898              		.loc 1 704 27 view .LVU5418
 20899 0022 920B     		lsrs	r2, r2, #14
 20900 0024 032A     		cmp	r2, #3
 20901 0026 55D0     		beq	.L1499
 706:src/xeq.c     **** }
 20902              		.loc 1 706 9 view .LVU5419
 20903 0028 0827     		movs	r7, #8
 20904              	.L1491:
 20905              	.LVL1601:
 706:src/xeq.c     **** }
 20906              		.loc 1 706 9 view .LVU5420
 20907              	.LBE3072:
 20908              	.LBE3071:
3598:src/xeq.c     **** 		long long int v;
 20909              		.loc 1 3598 3 is_stmt 1 view .LVU5421
3598:src/xeq.c     **** 		long long int v;
 20910              		.loc 1 3598 31 is_stmt 0 view .LVU5422
 20911 002a 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
 20912 002e 00F03F05 		and	r5, r0, #63
 20913 0032 06F03F06 		and	r6, r6, #63
 20914              	.LVL1602:
3599:src/xeq.c     **** 
 20915              		.loc 1 3599 3 is_stmt 1 view .LVU5423
3601:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20916              		.loc 1 3601 3 view .LVU5424
ARM GAS  /tmp/ccQlyisH.s 			page 556


3601:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20917              		.loc 1 3601 13 view .LVU5425
 20918 0036 6437     		adds	r7, r7, #100
 20919              	.LVL1603:
3598:src/xeq.c     **** 		long long int v;
 20920              		.loc 1 3598 31 is_stmt 0 view .LVU5426
 20921 0038 6424     		movs	r4, #100
 20922              	.LVL1604:
 20923              	.L1492:
3602:src/xeq.c     **** 			UState.int_len = arg;
 20924              		.loc 1 3602 4 is_stmt 1 discriminator 3 view .LVU5427
3602:src/xeq.c     **** 			UState.int_len = arg;
 20925              		.loc 1 3602 8 is_stmt 0 discriminator 3 view .LVU5428
 20926 003a 2046     		mov	r0, r4
 20927 003c FFF7FEFF 		bl	get_reg_n_int
 20928              	.LVL1605:
 20929 0040 FFF7FEFF 		bl	mask_value
 20930              	.LVL1606:
3603:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 20931              		.loc 1 3603 4 is_stmt 1 discriminator 3 view .LVU5429
3603:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 20932              		.loc 1 3603 19 is_stmt 0 discriminator 3 view .LVU5430
 20933 0044 D8F80030 		ldr	r3, [r8]
 20934 0048 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 20935 004c 65F30502 		bfi	r2, r5, #0, #6
 20936 0050 83F8E927 		strb	r2, [r3, #2025]
3604:src/xeq.c     **** 			UState.int_len = oldlen;
 20937              		.loc 1 3604 4 is_stmt 1 discriminator 3 view .LVU5431
 20938 0054 FFF7FEFF 		bl	mask_value
 20939              	.LVL1607:
3604:src/xeq.c     **** 			UState.int_len = oldlen;
 20940              		.loc 1 3604 4 is_stmt 0 discriminator 3 view .LVU5432
 20941 0058 0B46     		mov	r3, r1
 20942 005a 0246     		mov	r2, r0
 20943              	.LBB3076:
 20944              	.LBB3077:
1392:src/xeq.c     **** }
 20945              		.loc 1 1392 8 discriminator 3 view .LVU5433
 20946 005c 2046     		mov	r0, r4
 20947 005e CDE90023 		strd	r2, [sp]
 20948              	.LVL1608:
1392:src/xeq.c     **** }
 20949              		.loc 1 1392 8 discriminator 3 view .LVU5434
 20950              	.LBE3077:
 20951              	.LBI3076:
1391:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20952              		.loc 1 1391 6 is_stmt 1 discriminator 3 view .LVU5435
 20953              	.LBB3078:
1392:src/xeq.c     **** }
 20954              		.loc 1 1392 2 discriminator 3 view .LVU5436
1392:src/xeq.c     **** }
 20955              		.loc 1 1392 8 is_stmt 0 discriminator 3 view .LVU5437
 20956 0062 FFF7FEFF 		bl	get_reg_n
 20957              	.LVL1609:
1392:src/xeq.c     **** }
 20958              		.loc 1 1392 2 discriminator 3 view .LVU5438
 20959 0066 0822     		movs	r2, #8
ARM GAS  /tmp/ccQlyisH.s 			page 557


 20960 0068 6946     		mov	r1, sp
 20961 006a FFF7FEFF 		bl	xcopy
 20962              	.LVL1610:
1392:src/xeq.c     **** }
 20963              		.loc 1 1392 2 discriminator 3 view .LVU5439
 20964              	.LBE3078:
 20965              	.LBE3076:
3605:src/xeq.c     **** 		}
 20966              		.loc 1 3605 4 is_stmt 1 discriminator 3 view .LVU5440
3605:src/xeq.c     **** 		}
 20967              		.loc 1 3605 19 is_stmt 0 discriminator 3 view .LVU5441
 20968 006e D8F80030 		ldr	r3, [r8]
 20969 0072 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 20970 0076 0134     		adds	r4, r4, #1
 20971              	.LVL1611:
3605:src/xeq.c     **** 		}
 20972              		.loc 1 3605 19 discriminator 3 view .LVU5442
 20973 0078 66F30502 		bfi	r2, r6, #0, #6
3601:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20974              		.loc 1 3601 3 discriminator 3 view .LVU5443
 20975 007c BC42     		cmp	r4, r7
3605:src/xeq.c     **** 		}
 20976              		.loc 1 3605 19 discriminator 3 view .LVU5444
 20977 007e 83F8E927 		strb	r2, [r3, #2025]
3601:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20978              		.loc 1 3601 19 is_stmt 1 discriminator 3 view .LVU5445
 20979              	.LVL1612:
3601:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20980              		.loc 1 3601 13 discriminator 3 view .LVU5446
3601:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20981              		.loc 1 3601 3 is_stmt 0 discriminator 3 view .LVU5447
 20982 0082 DAD1     		bne	.L1492
3607:src/xeq.c     **** 		UState.int_len = arg;
 20983              		.loc 1 3607 3 is_stmt 1 view .LVU5448
3607:src/xeq.c     **** 		UState.int_len = arg;
 20984              		.loc 1 3607 7 is_stmt 0 view .LVU5449
 20985 0084 6C20     		movs	r0, #108
 20986 0086 FFF7FEFF 		bl	get_reg_n_int
 20987              	.LVL1613:
 20988 008a FFF7FEFF 		bl	mask_value
 20989              	.LVL1614:
3608:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 20990              		.loc 1 3608 3 is_stmt 1 view .LVU5450
3608:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 20991              		.loc 1 3608 18 is_stmt 0 view .LVU5451
 20992 008e D8F80030 		ldr	r3, [r8]
 20993 0092 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 20994 0096 65F30502 		bfi	r2, r5, #0, #6
 20995 009a 83F8E927 		strb	r2, [r3, #2025]
3609:src/xeq.c     **** 	} else
 20996              		.loc 1 3609 3 is_stmt 1 view .LVU5452
 20997 009e FFF7FEFF 		bl	mask_value
 20998              	.LVL1615:
3609:src/xeq.c     **** 	} else
 20999              		.loc 1 3609 3 is_stmt 0 view .LVU5453
 21000 00a2 0B46     		mov	r3, r1
 21001 00a4 0246     		mov	r2, r0
ARM GAS  /tmp/ccQlyisH.s 			page 558


 21002              	.LBB3079:
 21003              	.LBB3080:
1392:src/xeq.c     **** }
 21004              		.loc 1 1392 8 view .LVU5454
 21005 00a6 6C20     		movs	r0, #108
 21006 00a8 CDE90023 		strd	r2, [sp]
 21007              	.LVL1616:
1392:src/xeq.c     **** }
 21008              		.loc 1 1392 8 view .LVU5455
 21009              	.LBE3080:
 21010              	.LBI3079:
1391:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 21011              		.loc 1 1391 6 is_stmt 1 view .LVU5456
 21012              	.LBB3081:
1392:src/xeq.c     **** }
 21013              		.loc 1 1392 2 view .LVU5457
1392:src/xeq.c     **** }
 21014              		.loc 1 1392 8 is_stmt 0 view .LVU5458
 21015 00ac FFF7FEFF 		bl	get_reg_n
 21016              	.LVL1617:
1392:src/xeq.c     **** }
 21017              		.loc 1 1392 2 view .LVU5459
 21018 00b0 6946     		mov	r1, sp
 21019 00b2 0822     		movs	r2, #8
 21020 00b4 FFF7FEFF 		bl	xcopy
 21021              	.LVL1618:
1392:src/xeq.c     **** }
 21022              		.loc 1 1392 2 view .LVU5460
 21023              	.LBE3081:
 21024              	.LBE3079:
 21025              	.LBE3070:
3612:src/xeq.c     **** 
 21026              		.loc 1 3612 1 view .LVU5461
 21027 00b8 02B0     		add	sp, sp, #8
 21028              		.cfi_remember_state
 21029              		.cfi_def_cfa_offset 24
 21030              		@ sp needed
 21031 00ba BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21032              	.LVL1619:
 21033              	.L1490:
 21034              		.cfi_restore_state
3611:src/xeq.c     **** }
 21035              		.loc 1 3611 6 is_stmt 1 view .LVU5462
3611:src/xeq.c     **** }
 21036              		.loc 1 3611 21 is_stmt 0 view .LVU5463
 21037 00be 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21038 00c2 60F30502 		bfi	r2, r0, #0, #6
 21039              	.LVL1620:
3611:src/xeq.c     **** }
 21040              		.loc 1 3611 21 view .LVU5464
 21041 00c6 83F8E927 		strb	r2, [r3, #2025]
3612:src/xeq.c     **** 
 21042              		.loc 1 3612 1 view .LVU5465
 21043 00ca 02B0     		add	sp, sp, #8
 21044              		.cfi_remember_state
 21045              		.cfi_def_cfa_offset 24
 21046              		@ sp needed
ARM GAS  /tmp/ccQlyisH.s 			page 559


 21047 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21048              	.LVL1621:
 21049              	.L1494:
 21050              		.cfi_restore_state
 21051              	.LBB3083:
 21052              	.LBB3082:
 21053              	.LBB3075:
 705:src/xeq.c     **** 	return 8;
 21054              		.loc 1 705 10 view .LVU5466
 21055 00d0 0427     		movs	r7, #4
 21056 00d2 AAE7     		b	.L1491
 21057              	.L1499:
 704:src/xeq.c     **** 		return 4;
 21058              		.loc 1 704 44 view .LVU5467
 21059 00d4 034A     		ldr	r2, .L1500
 704:src/xeq.c     **** 		return 4;
 21060              		.loc 1 704 41 view .LVU5468
 21061 00d6 92F90120 		ldrsb	r2, [r2, #1]
 705:src/xeq.c     **** 	return 8;
 21062              		.loc 1 705 10 view .LVU5469
 21063 00da 002A     		cmp	r2, #0
 21064 00dc B4BF     		ite	lt
 21065 00de 0827     		movlt	r7, #8
 21066 00e0 0427     		movge	r7, #4
 21067 00e2 A2E7     		b	.L1491
 21068              	.L1501:
 21069              		.align	2
 21070              	.L1500:
 21071 00e4 00000000 		.word	XromParams
 21072 00e8 00000000 		.word	main_ram
 21073              	.LBE3075:
 21074              	.LBE3082:
 21075              	.LBE3083:
 21076              		.cfi_endproc
 21077              	.LFE201:
 21079              		.section	.text.get_maxdenom,"ax",%progbits
 21080              		.align	1
 21081              		.p2align 2,,3
 21082              		.global	get_maxdenom
 21083              		.syntax unified
 21084              		.thumb
 21085              		.thumb_func
 21086              		.fpu fpv4-sp-d16
 21088              	get_maxdenom:
 21089              	.LVL1622:
 21090              	.LFB202:
3618:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
 21091              		.loc 1 3618 33 is_stmt 1 view -0
 21092              		.cfi_startproc
 21093              		@ args = 0, pretend = 0, frame = 0
 21094              		@ frame_needed = 0, uses_anonymous_args = 0
 21095              		@ link register save eliminated.
3619:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21096              		.loc 1 3619 2 view .LVU5471
3619:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21097              		.loc 1 3619 32 is_stmt 0 view .LVU5472
 21098 0000 064B     		ldr	r3, .L1504
ARM GAS  /tmp/ccQlyisH.s 			page 560


 21099 0002 1B68     		ldr	r3, [r3]
 21100 0004 D3F8E417 		ldr	r1, [r3, #2020]
3620:src/xeq.c     **** }
 21101              		.loc 1 3620 2 view .LVU5473
 21102 0008 42F20F73 		movw	r3, #9999
3619:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21103              		.loc 1 3619 32 view .LVU5474
 21104 000c C1F38D11 		ubfx	r1, r1, #6, #14
 21105              	.LVL1623:
3620:src/xeq.c     **** }
 21106              		.loc 1 3620 2 is_stmt 1 view .LVU5475
 21107 0010 0029     		cmp	r1, #0
 21108 0012 08BF     		it	eq
 21109 0014 1946     		moveq	r1, r3
 21110 0016 FFF7FEBF 		b	int_to_dn
 21111              	.LVL1624:
 21112              	.L1505:
3620:src/xeq.c     **** }
 21113              		.loc 1 3620 2 is_stmt 0 view .LVU5476
 21114 001a 00BF     		.align	2
 21115              	.L1504:
 21116 001c 00000000 		.word	main_ram
 21117              		.cfi_endproc
 21118              	.LFE202:
 21120              		.section	.rodata.op_2frac.str1.4,"aMS",%progbits,1
 21121              		.align	2
 21122              	.LC4:
 21123 0000 792F7820 		.ascii	"y/x =\000"
 21123      3D00
 21124 0006 0000     		.align	2
 21125              	.LC5:
 21126 0008 792F7820 		.ascii	"y/x \007\344<\000"
 21126      07E43C00 
 21127              		.align	2
 21128              	.LC6:
 21129 0010 792F7820 		.ascii	"y/x \007\344>\000"
 21129      07E43E00 
 21130              		.section	.text.op_2frac,"ax",%progbits
 21131              		.align	1
 21132              		.p2align 2,,3
 21133              		.global	op_2frac
 21134              		.syntax unified
 21135              		.thumb
 21136              		.thumb_func
 21137              		.fpu fpv4-sp-d16
 21139              	op_2frac:
 21140              	.LVL1625:
 21141              	.LFB203:
3623:src/xeq.c     **** 	decNumber z, n, d, t;
 21142              		.loc 1 3623 30 is_stmt 1 view -0
 21143              		.cfi_startproc
 21144              		@ args = 0, pretend = 0, frame = 144
 21145              		@ frame_needed = 0, uses_anonymous_args = 0
3624:src/xeq.c     **** 
 21146              		.loc 1 3624 2 view .LVU5478
3626:src/xeq.c     **** 		setX_int(1);
 21147              		.loc 1 3626 2 view .LVU5479
ARM GAS  /tmp/ccQlyisH.s 			page 561


3626:src/xeq.c     **** 		setX_int(1);
 21148              		.loc 1 3626 6 is_stmt 0 view .LVU5480
 21149 0000 214B     		ldr	r3, .L1518
3623:src/xeq.c     **** 	decNumber z, n, d, t;
 21150              		.loc 1 3623 30 view .LVU5481
 21151 0002 00B5     		push	{lr}
 21152              		.cfi_def_cfa_offset 4
 21153              		.cfi_offset 14, -4
3626:src/xeq.c     **** 		setX_int(1);
 21154              		.loc 1 3626 6 view .LVU5482
 21155 0004 1B68     		ldr	r3, [r3]
 21156 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3626:src/xeq.c     **** 		setX_int(1);
 21157              		.loc 1 3626 5 view .LVU5483
 21158 000a DA07     		lsls	r2, r3, #31
3623:src/xeq.c     **** 	decNumber z, n, d, t;
 21159              		.loc 1 3623 30 view .LVU5484
 21160 000c A5B0     		sub	sp, sp, #148
 21161              		.cfi_def_cfa_offset 152
3626:src/xeq.c     **** 		setX_int(1);
 21162              		.loc 1 3626 5 view .LVU5485
 21163 000e 27D4     		bmi	.L1516
3631:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
 21164              		.loc 1 3631 2 is_stmt 1 view .LVU5486
 21165              	.LVL1626:
 21166              	.LBB3084:
 21167              	.LBI3084:
 823:src/xeq.c     **** 	getRegister(y, regY_idx);
 21168              		.loc 1 823 6 view .LVU5487
 21169              	.LBB3085:
 824:src/xeq.c     **** }
 21170              		.loc 1 824 2 view .LVU5488
 21171 0010 6521     		movs	r1, #101
 21172 0012 6846     		mov	r0, sp
 21173              	.LVL1627:
 824:src/xeq.c     **** }
 21174              		.loc 1 824 2 is_stmt 0 view .LVU5489
 21175 0014 FFF7FEFF 		bl	getRegister
 21176              	.LVL1628:
 824:src/xeq.c     **** }
 21177              		.loc 1 824 2 view .LVU5490
 21178              	.LBE3085:
 21179              	.LBE3084:
3632:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
 21180              		.loc 1 3632 2 is_stmt 1 view .LVU5491
 21181 0018 6A46     		mov	r2, sp
 21182 001a 12A9     		add	r1, sp, #72
 21183 001c 09A8     		add	r0, sp, #36
 21184 001e FFF7FEFF 		bl	decNumber2Fraction
 21185              	.LVL1629:
3633:src/xeq.c     **** 	if (State2.runmode) {
 21186              		.loc 1 3633 2 view .LVU5492
 21187 0022 09A9     		add	r1, sp, #36
 21188 0024 12A8     		add	r0, sp, #72
 21189 0026 FFF7FEFF 		bl	setXY
 21190              	.LVL1630:
3634:src/xeq.c     **** 		dn_divide(&t, &n, &d);
ARM GAS  /tmp/ccQlyisH.s 			page 562


 21191              		.loc 1 3634 2 view .LVU5493
3634:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21192              		.loc 1 3634 6 is_stmt 0 view .LVU5494
 21193 002a 184B     		ldr	r3, .L1518+4
 21194 002c 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3634:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21195              		.loc 1 3634 5 view .LVU5495
 21196 002e 5B06     		lsls	r3, r3, #25
 21197 0030 02D4     		bmi	.L1517
3650:src/xeq.c     **** 
 21198              		.loc 1 3650 1 view .LVU5496
 21199 0032 25B0     		add	sp, sp, #148
 21200              		.cfi_remember_state
 21201              		.cfi_def_cfa_offset 4
 21202              		@ sp needed
 21203 0034 5DF804FB 		ldr	pc, [sp], #4
 21204              	.L1517:
 21205              		.cfi_restore_state
3635:src/xeq.c     **** 		dn_compare(&n, &t, &z);
 21206              		.loc 1 3635 3 is_stmt 1 view .LVU5497
 21207 0038 12AA     		add	r2, sp, #72
 21208 003a 09A9     		add	r1, sp, #36
 21209 003c 1BA8     		add	r0, sp, #108
 21210 003e FFF7FEFF 		bl	dn_divide
 21211              	.LVL1631:
3636:src/xeq.c     **** 		if (dn_eq0(&n))
 21212              		.loc 1 3636 3 view .LVU5498
 21213 0042 6A46     		mov	r2, sp
 21214 0044 1BA9     		add	r1, sp, #108
 21215 0046 09A8     		add	r0, sp, #36
 21216 0048 FFF7FEFF 		bl	dn_compare
 21217              	.LVL1632:
3637:src/xeq.c     **** 			DispMsg = "y/x =";
 21218              		.loc 1 3637 3 view .LVU5499
3637:src/xeq.c     **** 			DispMsg = "y/x =";
 21219              		.loc 1 3637 7 is_stmt 0 view .LVU5500
 21220 004c 09A8     		add	r0, sp, #36
 21221 004e FFF7FEFF 		bl	dn_eq0
 21222              	.LVL1633:
3637:src/xeq.c     **** 			DispMsg = "y/x =";
 21223              		.loc 1 3637 6 view .LVU5501
 21224 0052 60B1     		cbz	r0, .L1510
3638:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 21225              		.loc 1 3638 4 is_stmt 1 view .LVU5502
3638:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 21226              		.loc 1 3638 12 is_stmt 0 view .LVU5503
 21227 0054 0E4B     		ldr	r3, .L1518+8
 21228 0056 0F4A     		ldr	r2, .L1518+12
 21229 0058 1A60     		str	r2, [r3]
3650:src/xeq.c     **** 
 21230              		.loc 1 3650 1 view .LVU5504
 21231 005a 25B0     		add	sp, sp, #148
 21232              		.cfi_remember_state
 21233              		.cfi_def_cfa_offset 4
 21234              		@ sp needed
 21235 005c 5DF804FB 		ldr	pc, [sp], #4
 21236              	.LVL1634:
ARM GAS  /tmp/ccQlyisH.s 			page 563


 21237              	.L1516:
 21238              		.cfi_restore_state
3627:src/xeq.c     **** 		return;
 21239              		.loc 1 3627 3 is_stmt 1 view .LVU5505
 21240 0060 0120     		movs	r0, #1
 21241              	.LVL1635:
3627:src/xeq.c     **** 		return;
 21242              		.loc 1 3627 3 is_stmt 0 view .LVU5506
 21243 0062 0021     		movs	r1, #0
 21244 0064 FFF7FEFF 		bl	setX_int
 21245              	.LVL1636:
3628:src/xeq.c     **** 	}
 21246              		.loc 1 3628 3 is_stmt 1 view .LVU5507
3650:src/xeq.c     **** 
 21247              		.loc 1 3650 1 is_stmt 0 view .LVU5508
 21248 0068 25B0     		add	sp, sp, #148
 21249              		.cfi_remember_state
 21250              		.cfi_def_cfa_offset 4
 21251              		@ sp needed
 21252 006a 5DF804FB 		ldr	pc, [sp], #4
 21253              	.L1510:
 21254              		.cfi_restore_state
3639:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 21255              		.loc 1 3639 8 is_stmt 1 view .LVU5509
3639:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 21256              		.loc 1 3639 11 is_stmt 0 view .LVU5510
 21257 006e 9DF92C30 		ldrsb	r3, [sp, #44]
 21258 0072 002B     		cmp	r3, #0
3641:src/xeq.c     **** 		else
 21259              		.loc 1 3641 12 view .LVU5511
 21260 0074 B8BF     		it	lt
 21261 0076 084A     		ldrlt	r2, .L1518+16
 21262 0078 054B     		ldr	r3, .L1518+8
3641:src/xeq.c     **** 		else
 21263              		.loc 1 3641 4 is_stmt 1 view .LVU5512
3643:src/xeq.c     **** #else
 21264              		.loc 1 3643 4 view .LVU5513
3643:src/xeq.c     **** #else
 21265              		.loc 1 3643 12 is_stmt 0 view .LVU5514
 21266 007a A8BF     		it	ge
 21267 007c 074A     		ldrge	r2, .L1518+20
 21268 007e 1A60     		str	r2, [r3]
3650:src/xeq.c     **** 
 21269              		.loc 1 3650 1 view .LVU5515
 21270 0080 25B0     		add	sp, sp, #148
 21271              		.cfi_def_cfa_offset 4
 21272              		@ sp needed
 21273 0082 5DF804FB 		ldr	pc, [sp], #4
 21274              	.L1519:
 21275 0086 00BF     		.align	2
 21276              	.L1518:
 21277 0088 00000000 		.word	main_ram
 21278 008c 00000000 		.word	StateWhileOn
 21279 0090 00000000 		.word	DispMsg
 21280 0094 00000000 		.word	.LC4
 21281 0098 08000000 		.word	.LC5
 21282 009c 10000000 		.word	.LC6
ARM GAS  /tmp/ccQlyisH.s 			page 564


 21283              		.cfi_endproc
 21284              	.LFE203:
 21286              		.section	.text.op_fracdenom,"ax",%progbits
 21287              		.align	1
 21288              		.p2align 2,,3
 21289              		.global	op_fracdenom
 21290              		.syntax unified
 21291              		.thumb
 21292              		.thumb_func
 21293              		.fpu fpv4-sp-d16
 21295              	op_fracdenom:
 21296              	.LVL1637:
 21297              	.LFB204:
3652:src/xeq.c     **** 	int s;
 21298              		.loc 1 3652 34 is_stmt 1 view -0
 21299              		.cfi_startproc
 21300              		@ args = 0, pretend = 0, frame = 8
 21301              		@ frame_needed = 0, uses_anonymous_args = 0
3653:src/xeq.c     **** 	unsigned long long int i;
 21302              		.loc 1 3653 2 view .LVU5517
3654:src/xeq.c     **** 
 21303              		.loc 1 3654 2 view .LVU5518
3656:src/xeq.c     **** 	if (i > 9999)
 21304              		.loc 1 3656 2 view .LVU5519
3652:src/xeq.c     **** 	int s;
 21305              		.loc 1 3652 34 is_stmt 0 view .LVU5520
 21306 0000 2DE90048 		push	{fp, lr}
 21307              		.cfi_def_cfa_offset 8
 21308              		.cfi_offset 11, -8
 21309              		.cfi_offset 14, -4
 21310 0004 84B0     		sub	sp, sp, #16
 21311              		.cfi_def_cfa_offset 24
 21312              	.LVL1638:
 21313              	.LBB3086:
 21314              	.LBI3086:
1415:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 21315              		.loc 1 1415 24 is_stmt 1 view .LVU5521
 21316              	.LBB3087:
1416:src/xeq.c     **** }
 21317              		.loc 1 1416 2 view .LVU5522
1416:src/xeq.c     **** }
 21318              		.loc 1 1416 9 is_stmt 0 view .LVU5523
 21319 0006 03A9     		add	r1, sp, #12
 21320              	.LVL1639:
1416:src/xeq.c     **** }
 21321              		.loc 1 1416 9 view .LVU5524
 21322 0008 6420     		movs	r0, #100
 21323              	.LVL1640:
1416:src/xeq.c     **** }
 21324              		.loc 1 1416 9 view .LVU5525
 21325 000a FFF7FEFF 		bl	get_reg_n_int_sgn
 21326              	.LVL1641:
1416:src/xeq.c     **** }
 21327              		.loc 1 1416 9 view .LVU5526
 21328 000e 8C46     		mov	ip, r1
 21329              	.LVL1642:
1416:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 565


 21330              		.loc 1 1416 9 view .LVU5527
 21331              	.LBE3087:
 21332              	.LBE3086:
3657:src/xeq.c     **** 		UState.denom_max = 0;
 21333              		.loc 1 3657 5 view .LVU5528
 21334 0010 0021     		movs	r1, #0
 21335              	.LBB3089:
 21336              	.LBB3088:
1416:src/xeq.c     **** }
 21337              		.loc 1 1416 9 view .LVU5529
 21338 0012 8346     		mov	fp, r0
 21339              	.LVL1643:
1416:src/xeq.c     **** }
 21340              		.loc 1 1416 9 view .LVU5530
 21341              	.LBE3088:
 21342              	.LBE3089:
3657:src/xeq.c     **** 		UState.denom_max = 0;
 21343              		.loc 1 3657 2 is_stmt 1 view .LVU5531
3657:src/xeq.c     **** 		UState.denom_max = 0;
 21344              		.loc 1 3657 5 is_stmt 0 view .LVU5532
 21345 0014 6145     		cmp	r1, ip
 21346 0016 42F20F70 		movw	r0, #9999
 21347 001a 08BF     		it	eq
 21348 001c 5845     		cmpeq	r0, fp
 21349 001e 0AD2     		bcs	.L1521
3658:src/xeq.c     **** 	else if (i != 1)
 21350              		.loc 1 3658 3 is_stmt 1 view .LVU5533
3658:src/xeq.c     **** 	else if (i != 1)
 21351              		.loc 1 3658 20 is_stmt 0 view .LVU5534
 21352 0020 174B     		ldr	r3, .L1525
 21353 0022 1B68     		ldr	r3, [r3]
 21354 0024 D3F8E427 		ldr	r2, [r3, #2020]
 21355 0028 6FF39312 		bfc	r2, #6, #14
 21356 002c C3F8E427 		str	r2, [r3, #2020]
3665:src/xeq.c     **** 
 21357              		.loc 1 3665 1 view .LVU5535
 21358 0030 04B0     		add	sp, sp, #16
 21359              		.cfi_remember_state
 21360              		.cfi_def_cfa_offset 8
 21361              		@ sp needed
 21362 0032 BDE80088 		pop	{fp, pc}
 21363              	.LVL1644:
 21364              	.L1521:
 21365              		.cfi_restore_state
3659:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 21366              		.loc 1 3659 7 is_stmt 1 view .LVU5536
3659:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 21367              		.loc 1 3659 10 is_stmt 0 view .LVU5537
 21368 0036 BCF1000F 		cmp	ip, #0
 21369 003a 08BF     		it	eq
 21370 003c BBF1010F 		cmpeq	fp, #1
 21371 0040 0AD0     		beq	.L1523
3660:src/xeq.c     **** 	else {
 21372              		.loc 1 3660 3 is_stmt 1 view .LVU5538
3660:src/xeq.c     **** 	else {
 21373              		.loc 1 3660 20 is_stmt 0 view .LVU5539
 21374 0042 0F4B     		ldr	r3, .L1525
ARM GAS  /tmp/ccQlyisH.s 			page 566


 21375 0044 1B68     		ldr	r3, [r3]
 21376 0046 D3F8E417 		ldr	r1, [r3, #2020]
 21377 004a 6BF39311 		bfi	r1, fp, #6, #14
 21378 004e C3F8E417 		str	r1, [r3, #2020]
3665:src/xeq.c     **** 
 21379              		.loc 1 3665 1 view .LVU5540
 21380 0052 04B0     		add	sp, sp, #16
 21381              		.cfi_remember_state
 21382              		.cfi_def_cfa_offset 8
 21383              		@ sp needed
 21384 0054 BDE80088 		pop	{fp, pc}
 21385              	.LVL1645:
 21386              	.L1523:
 21387              		.cfi_restore_state
3662:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
 21388              		.loc 1 3662 3 is_stmt 1 view .LVU5541
 21389              	.LBB3090:
 21390              	.LBI3090:
 783:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 21391              		.loc 1 783 6 view .LVU5542
 21392              	.LBB3091:
 784:src/xeq.c     **** }
 21393              		.loc 1 784 2 view .LVU5543
 21394 0058 6421     		movs	r1, #100
 21395 005a 6C20     		movs	r0, #108
 21396 005c FFF7FEFF 		bl	copyreg_n
 21397              	.LVL1646:
 21398              	.LBE3091:
 21399              	.LBE3090:
3663:src/xeq.c     **** 	}
 21400              		.loc 1 3663 3 view .LVU5544
 21401              	.LBB3092:
 21402              	.LBI3092:
1478:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 21403              		.loc 1 1478 6 view .LVU5545
 21404              	.LBB3093:
1479:src/xeq.c     **** }
 21405              		.loc 1 1479 2 view .LVU5546
 21406              	.LBE3093:
 21407              	.LBE3092:
3663:src/xeq.c     **** 	}
 21408              		.loc 1 3663 22 is_stmt 0 view .LVU5547
 21409 0060 074B     		ldr	r3, .L1525
 21410              	.LVL1647:
3663:src/xeq.c     **** 	}
 21411              		.loc 1 3663 22 view .LVU5548
 21412 0062 1B68     		ldr	r3, [r3]
 21413              	.LVL1648:
3663:src/xeq.c     **** 	}
 21414              		.loc 1 3663 22 view .LVU5549
 21415 0064 D3F8E427 		ldr	r2, [r3, #2020]
 21416              	.LBB3096:
 21417              	.LBB3094:
1479:src/xeq.c     **** }
 21418              		.loc 1 1479 2 view .LVU5550
 21419 0068 0021     		movs	r1, #0
 21420              	.LBE3094:
ARM GAS  /tmp/ccQlyisH.s 			page 567


 21421              	.LBE3096:
3663:src/xeq.c     **** 	}
 21422              		.loc 1 3663 22 view .LVU5551
 21423 006a C2F38D12 		ubfx	r2, r2, #6, #14
 21424              	.LBB3097:
 21425              	.LBB3095:
1479:src/xeq.c     **** }
 21426              		.loc 1 1479 2 view .LVU5552
 21427 006e 92B2     		uxth	r2, r2
 21428 0070 0023     		movs	r3, #0
 21429              	.LVL1649:
1479:src/xeq.c     **** }
 21430              		.loc 1 1479 2 view .LVU5553
 21431 0072 0091     		str	r1, [sp]
 21432              	.LVL1650:
1479:src/xeq.c     **** }
 21433              		.loc 1 1479 2 view .LVU5554
 21434 0074 6420     		movs	r0, #100
 21435 0076 FFF7FEFF 		bl	set_reg_n_int_sgn
 21436              	.LVL1651:
1479:src/xeq.c     **** }
 21437              		.loc 1 1479 2 view .LVU5555
 21438              	.LBE3095:
 21439              	.LBE3097:
3665:src/xeq.c     **** 
 21440              		.loc 1 3665 1 view .LVU5556
 21441 007a 04B0     		add	sp, sp, #16
 21442              		.cfi_def_cfa_offset 8
 21443              		@ sp needed
 21444 007c BDE80088 		pop	{fp, pc}
 21445              	.LVL1652:
 21446              	.L1526:
3665:src/xeq.c     **** 
 21447              		.loc 1 3665 1 view .LVU5557
 21448              		.align	2
 21449              	.L1525:
 21450 0080 00000000 		.word	main_ram
 21451              		.cfi_endproc
 21452              	.LFE204:
 21454              		.section	.text.op_float,"ax",%progbits
 21455              		.align	1
 21456              		.p2align 2,,3
 21457              		.global	op_float
 21458              		.syntax unified
 21459              		.thumb
 21460              		.thumb_func
 21461              		.fpu fpv4-sp-d16
 21463              	op_float:
 21464              	.LVL1653:
 21465              	.LFB205:
3673:src/xeq.c     **** 
 21466              		.loc 1 3673 30 is_stmt 1 view -0
 21467              		.cfi_startproc
 21468              		@ args = 0, pretend = 0, frame = 40
 21469              		@ frame_needed = 0, uses_anonymous_args = 0
3675:src/xeq.c     **** 		int i;
 21470              		.loc 1 3675 2 view .LVU5559
ARM GAS  /tmp/ccQlyisH.s 			page 568


3673:src/xeq.c     **** 
 21471              		.loc 1 3673 30 is_stmt 0 view .LVU5560
 21472 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 21473              		.cfi_def_cfa_offset 28
 21474              		.cfi_offset 4, -28
 21475              		.cfi_offset 5, -24
 21476              		.cfi_offset 6, -20
 21477              		.cfi_offset 7, -16
 21478              		.cfi_offset 8, -12
 21479              		.cfi_offset 9, -8
 21480              		.cfi_offset 14, -4
3675:src/xeq.c     **** 		int i;
 21481              		.loc 1 3675 6 view .LVU5561
 21482 0004 2F4F     		ldr	r7, .L1539
 21483 0006 3B68     		ldr	r3, [r7]
 21484 0008 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3675:src/xeq.c     **** 		int i;
 21485              		.loc 1 3675 5 view .LVU5562
 21486 000c D207     		lsls	r2, r2, #31
3673:src/xeq.c     **** 
 21487              		.loc 1 3673 30 view .LVU5563
 21488 000e 8BB0     		sub	sp, sp, #44
 21489              		.cfi_def_cfa_offset 72
3673:src/xeq.c     **** 
 21490              		.loc 1 3673 30 view .LVU5564
 21491 0010 0646     		mov	r6, r0
3675:src/xeq.c     **** 		int i;
 21492              		.loc 1 3675 5 view .LVU5565
 21493 0012 27D5     		bpl	.L1528
 21494              	.LBB3098:
3676:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
 21495              		.loc 1 3676 3 is_stmt 1 view .LVU5566
3677:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21496              		.loc 1 3677 3 view .LVU5567
3677:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21497              		.loc 1 3677 33 is_stmt 0 view .LVU5568
 21498 0014 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
3677:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21499              		.loc 1 3677 26 view .LVU5569
 21500 0018 2B4A     		ldr	r2, .L1539+4
3677:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21501              		.loc 1 3677 33 view .LVU5570
 21502 001a C3F3C003 		ubfx	r3, r3, #3, #1
3678:src/xeq.c     **** 			if (mask & 1) {
 21503              		.loc 1 3678 10 view .LVU5571
 21504 001e 6424     		movs	r4, #100
3677:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21505              		.loc 1 3677 7 view .LVU5572
 21506 0020 32F81350 		ldrh	r5, [r2, r3, lsl #1]
 21507              	.LVL1654:
3678:src/xeq.c     **** 			if (mask & 1) {
 21508              		.loc 1 3678 3 is_stmt 1 view .LVU5573
3678:src/xeq.c     **** 			if (mask & 1) {
 21509              		.loc 1 3678 22 view .LVU5574
 21510              	.LBB3099:
 21511              	.LBB3100:
1088:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 569


 21512              		.loc 1 1088 24 is_stmt 0 view .LVU5575
 21513 0024 44F20108 		movw	r8, #16385
 21514 0028 0CE0     		b	.L1531
 21515              	.LVL1655:
 21516              	.L1529:
1088:src/xeq.c     **** }
 21517              		.loc 1 1088 24 view .LVU5576
 21518 002a 3B68     		ldr	r3, [r7]
 21519 002c B3F8E837 		ldrh	r3, [r3, #2024]
 21520              	.LBE3100:
 21521              	.LBE3099:
3683:src/xeq.c     **** 				// expand the other registers which have been left
 21522              		.loc 1 3683 12 view .LVU5577
 21523 0030 08EA0303 		and	r3, r8, r3
 21524 0034 B3F5804F 		cmp	r3, #16384
 21525 0038 32D0     		beq	.L1538
 21526              	.L1530:
3678:src/xeq.c     **** 			if (mask & 1) {
 21527              		.loc 1 3678 37 is_stmt 1 discriminator 2 view .LVU5578
 21528 003a 0134     		adds	r4, r4, #1
 21529              	.LVL1656:
3678:src/xeq.c     **** 			if (mask & 1) {
 21530              		.loc 1 3678 3 is_stmt 0 discriminator 2 view .LVU5579
 21531 003c 702C     		cmp	r4, #112
3678:src/xeq.c     **** 			if (mask & 1) {
 21532              		.loc 1 3678 47 discriminator 2 view .LVU5580
 21533 003e 4FEA6505 		asr	r5, r5, #1
 21534              	.LVL1657:
3678:src/xeq.c     **** 			if (mask & 1) {
 21535              		.loc 1 3678 22 is_stmt 1 discriminator 2 view .LVU5581
3678:src/xeq.c     **** 			if (mask & 1) {
 21536              		.loc 1 3678 3 is_stmt 0 discriminator 2 view .LVU5582
 21537 0042 0FD0     		beq	.L1528
 21538              	.LVL1658:
 21539              	.L1531:
3679:src/xeq.c     **** 				// register belongs to stack
 21540              		.loc 1 3679 4 is_stmt 1 view .LVU5583
3683:src/xeq.c     **** 				// expand the other registers which have been left
 21541              		.loc 1 3683 9 view .LVU5584
 21542              	.LBB3102:
 21543              	.LBI3099:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 21544              		.loc 1 1087 5 view .LVU5585
 21545              	.LBB3101:
1088:src/xeq.c     **** }
 21546              		.loc 1 1088 2 view .LVU5586
 21547              	.LBE3101:
 21548              	.LBE3102:
3679:src/xeq.c     **** 				// register belongs to stack
 21549              		.loc 1 3679 7 is_stmt 0 view .LVU5587
 21550 0044 EB07     		lsls	r3, r5, #31
 21551 0046 F0D5     		bpl	.L1529
3681:src/xeq.c     **** 			}
 21552              		.loc 1 3681 5 is_stmt 1 view .LVU5588
 21553 0048 A6F1CE02 		sub	r2, r6, #206
 21554 004c B2FA82F2 		clz	r2, r2
 21555 0050 2146     		mov	r1, r4
ARM GAS  /tmp/ccQlyisH.s 			page 570


 21556 0052 2046     		mov	r0, r4
 21557 0054 5209     		lsrs	r2, r2, #5
3678:src/xeq.c     **** 			if (mask & 1) {
 21558              		.loc 1 3678 37 is_stmt 0 view .LVU5589
 21559 0056 0134     		adds	r4, r4, #1
 21560              	.LVL1659:
3681:src/xeq.c     **** 			}
 21561              		.loc 1 3681 5 view .LVU5590
 21562 0058 FFF7FEFF 		bl	register_from_int
 21563              	.LVL1660:
3678:src/xeq.c     **** 			if (mask & 1) {
 21564              		.loc 1 3678 37 is_stmt 1 view .LVU5591
3678:src/xeq.c     **** 			if (mask & 1) {
 21565              		.loc 1 3678 3 is_stmt 0 view .LVU5592
 21566 005c 702C     		cmp	r4, #112
3678:src/xeq.c     **** 			if (mask & 1) {
 21567              		.loc 1 3678 47 view .LVU5593
 21568 005e 4FEA6505 		asr	r5, r5, #1
 21569              	.LVL1661:
3678:src/xeq.c     **** 			if (mask & 1) {
 21570              		.loc 1 3678 22 is_stmt 1 view .LVU5594
3678:src/xeq.c     **** 			if (mask & 1) {
 21571              		.loc 1 3678 3 is_stmt 0 view .LVU5595
 21572 0062 EFD1     		bne	.L1531
 21573              	.LVL1662:
 21574              	.L1528:
3678:src/xeq.c     **** 			if (mask & 1) {
 21575              		.loc 1 3678 3 view .LVU5596
 21576              	.LBE3098:
3690:src/xeq.c     **** 		UState.fract = 0;
 21577              		.loc 1 3690 2 is_stmt 1 view .LVU5597
3690:src/xeq.c     **** 		UState.fract = 0;
 21578              		.loc 1 3690 25 is_stmt 0 view .LVU5598
 21579 0064 06F13203 		add	r3, r6, #50
3690:src/xeq.c     **** 		UState.fract = 0;
 21580              		.loc 1 3690 5 view .LVU5599
 21581 0068 DBB2     		uxtb	r3, r3
 21582 006a 012B     		cmp	r3, #1
 21583 006c 10D9     		bls	.L1532
3691:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21584              		.loc 1 3691 3 is_stmt 1 view .LVU5600
3691:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21585              		.loc 1 3691 16 is_stmt 0 view .LVU5601
 21586 006e 3A68     		ldr	r2, [r7]
3692:src/xeq.c     **** 	}
 21587              		.loc 1 3692 14 view .LVU5602
 21588 0070 164B     		ldr	r3, .L1539+8
3691:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21589              		.loc 1 3691 16 view .LVU5603
 21590 0072 92F8E617 		ldrb	r1, [r2, #2022]	@ zero_extendqisi2
 21591 0076 6FF34511 		bfc	r1, #5, #1
 21592 007a 82F8E617 		strb	r1, [r2, #2022]
3692:src/xeq.c     **** 	}
 21593              		.loc 1 3692 3 is_stmt 1 view .LVU5604
3692:src/xeq.c     **** 	}
 21594              		.loc 1 3692 35 is_stmt 0 view .LVU5605
 21595 007e A6F15C06 		sub	r6, #92
ARM GAS  /tmp/ccQlyisH.s 			page 571


3692:src/xeq.c     **** 	}
 21596              		.loc 1 3692 14 view .LVU5606
 21597 0082 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
3692:src/xeq.c     **** 	}
 21598              		.loc 1 3692 35 view .LVU5607
 21599 0084 B6FA86F6 		clz	r6, r6
 21600 0088 7609     		lsrs	r6, r6, #5
3692:src/xeq.c     **** 	}
 21601              		.loc 1 3692 14 view .LVU5608
 21602 008a 66F30002 		bfi	r2, r6, #0, #1
 21603 008e DA75     		strb	r2, [r3, #23]
 21604              	.L1532:
3694:src/xeq.c     **** }
 21605              		.loc 1 3694 2 is_stmt 1 view .LVU5609
3694:src/xeq.c     **** }
 21606              		.loc 1 3694 14 is_stmt 0 view .LVU5610
 21607 0090 6420     		movs	r0, #100
 21608 0092 FFF7FEFF 		bl	get_reg_n
 21609              	.LVL1663:
3694:src/xeq.c     **** }
 21610              		.loc 1 3694 12 view .LVU5611
 21611 0096 0E4B     		ldr	r3, .L1539+12
 21612 0098 1860     		str	r0, [r3]
3695:src/xeq.c     **** 
 21613              		.loc 1 3695 1 view .LVU5612
 21614 009a 0BB0     		add	sp, sp, #44
 21615              		.cfi_remember_state
 21616              		.cfi_def_cfa_offset 28
 21617              		@ sp needed
 21618 009c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 21619              	.LVL1664:
 21620              	.L1538:
 21621              		.cfi_restore_state
 21622              	.LBB3105:
3686:src/xeq.c     **** 			}
 21623              		.loc 1 3686 5 is_stmt 1 view .LVU5613
3686:src/xeq.c     **** 			}
 21624              		.loc 1 3686 29 is_stmt 0 view .LVU5614
 21625 00a0 2046     		mov	r0, r4
 21626 00a2 FFF7FEFF 		bl	get_reg_n
 21627              	.LVL1665:
3686:src/xeq.c     **** 			}
 21628              		.loc 1 3686 47 view .LVU5615
 21629 00a6 3B68     		ldr	r3, [r7]
 21630 00a8 03F22C43 		addw	r3, r3, #1068
3686:src/xeq.c     **** 			}
 21631              		.loc 1 3686 29 view .LVU5616
 21632 00ac 8146     		mov	r9, r0
 21633              	.LVL1666:
 21634              	.LBB3103:
 21635              	.LBI3103:
 645:src/xeq.c     **** 	decNumber temp;
 21636              		.loc 1 645 6 is_stmt 1 view .LVU5617
 21637              	.LBB3104:
 646:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 21638              		.loc 1 646 2 view .LVU5618
 647:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 572


 21639              		.loc 1 647 2 view .LVU5619
 647:src/xeq.c     **** }
 21640              		.loc 1 647 27 is_stmt 0 view .LVU5620
 21641 00ae 01A9     		add	r1, sp, #4
 21642 00b0 03EBC400 		add	r0, r3, r4, lsl #3
 21643              	.LVL1667:
 647:src/xeq.c     **** }
 21644              		.loc 1 647 27 view .LVU5621
 21645 00b4 FFF7FEFF 		bl	decimal64ToNumber
 21646              	.LVL1668:
 647:src/xeq.c     **** }
 21647              		.loc 1 647 27 view .LVU5622
 21648 00b8 0146     		mov	r1, r0
 647:src/xeq.c     **** }
 21649              		.loc 1 647 2 view .LVU5623
 21650 00ba 4846     		mov	r0, r9
 21651 00bc FFF7FEFF 		bl	packed128_from_number
 21652              	.LVL1669:
 648:src/xeq.c     **** 
 21653              		.loc 1 648 1 view .LVU5624
 21654 00c0 BBE7     		b	.L1530
 21655              	.L1540:
 21656 00c2 00BF     		.align	2
 21657              	.L1539:
 21658 00c4 00000000 		.word	main_ram
 21659 00c8 00000000 		.word	.LANCHOR3
 21660 00cc 00000000 		.word	StateWhileOn
 21661 00d0 00000000 		.word	StackBase
 21662              	.LBE3104:
 21663              	.LBE3103:
 21664              	.LBE3105:
 21665              		.cfi_endproc
 21666              	.LFE205:
 21668              		.section	.text.cmddisp,"ax",%progbits
 21669              		.align	1
 21670              		.p2align 2,,3
 21671              		.global	cmddisp
 21672              		.syntax unified
 21673              		.thumb
 21674              		.thumb_func
 21675              		.fpu fpv4-sp-d16
 21677              	cmddisp:
 21678              	.LVL1670:
 21679              	.LFB171:
2417:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 21680              		.loc 1 2417 46 is_stmt 1 view -0
 21681              		.cfi_startproc
 21682              		@ args = 0, pretend = 0, frame = 0
 21683              		@ frame_needed = 0, uses_anonymous_args = 0
 21684              		@ link register save eliminated.
2419:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
 21685              		.loc 1 2419 2 view .LVU5626
2420:src/xeq.c     **** #ifdef DM42
 21686              		.loc 1 2420 2 view .LVU5627
 21687              	.LBB3114:
 21688              	.LBI3114:
2385:src/xeq.c     **** {
ARM GAS  /tmp/ccQlyisH.s 			page 573


 21689              		.loc 1 2385 5 view .LVU5628
 21690              	.LBB3115:
2387:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21691              		.loc 1 2387 2 view .LVU5629
2387:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21692              		.loc 1 2387 17 is_stmt 0 view .LVU5630
 21693 0000 2E4B     		ldr	r3, .L1561
 21694 0002 1A68     		ldr	r2, [r3]
 21695              	.LBE3115:
 21696              	.LBE3114:
2417:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 21697              		.loc 1 2417 46 view .LVU5631
 21698 0004 10B4     		push	{r4}
 21699              		.cfi_def_cfa_offset 4
 21700              		.cfi_offset 4, -4
 21701              	.LBB3117:
 21702              	.LBB3116:
2388:src/xeq.c     **** 
 21703              		.loc 1 2388 23 view .LVU5632
 21704 0006 92F8E747 		ldrb	r4, [r2, #2023]	@ zero_extendqisi2
2387:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21705              		.loc 1 2387 23 view .LVU5633
 21706 000a 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
2390:src/xeq.c     **** 		dispdigs -= 12;
 21707              		.loc 1 2390 5 view .LVU5634
 21708 000e 04F00F04 		and	r4, r4, #15
 21709 0012 0B2C     		cmp	r4, #11
2387:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21710              		.loc 1 2387 6 view .LVU5635
 21711 0014 4FEA9313 		lsr	r3, r3, #6
 21712              	.LVL1671:
2388:src/xeq.c     **** 
 21713              		.loc 1 2388 2 is_stmt 1 view .LVU5636
2390:src/xeq.c     **** 		dispdigs -= 12;
 21714              		.loc 1 2390 2 view .LVU5637
2390:src/xeq.c     **** 		dispdigs -= 12;
 21715              		.loc 1 2390 5 is_stmt 0 view .LVU5638
 21716 0018 04D9     		bls	.L1542
2391:src/xeq.c     **** 		dispmode += 4;
 21717              		.loc 1 2391 3 is_stmt 1 view .LVU5639
 21718              	.LVL1672:
2392:src/xeq.c     **** 		if (dispmode >= 6) {
 21719              		.loc 1 2392 3 view .LVU5640
2392:src/xeq.c     **** 		if (dispmode >= 6) {
 21720              		.loc 1 2392 12 is_stmt 0 view .LVU5641
 21721 001a 1C1D     		adds	r4, r3, #4
 21722              	.LVL1673:
2393:src/xeq.c     **** 			dispmode -= 2;
 21723              		.loc 1 2393 3 is_stmt 1 view .LVU5642
2393:src/xeq.c     **** 			dispmode -= 2;
 21724              		.loc 1 2393 6 is_stmt 0 view .LVU5643
 21725 001c 052C     		cmp	r4, #5
2394:src/xeq.c     **** 			dispdigs += 4;
 21726              		.loc 1 2394 4 is_stmt 1 view .LVU5644
2394:src/xeq.c     **** 			dispdigs += 4;
 21727              		.loc 1 2394 13 is_stmt 0 view .LVU5645
 21728 001e CCBF     		ite	gt
ARM GAS  /tmp/ccQlyisH.s 			page 574


 21729 0020 0233     		addgt	r3, r3, #2
 21730              	.LVL1674:
2395:src/xeq.c     **** 		}
 21731              		.loc 1 2395 4 is_stmt 1 view .LVU5646
2395:src/xeq.c     **** 		}
 21732              		.loc 1 2395 4 is_stmt 0 view .LVU5647
 21733 0022 2346     		movle	r3, r4
 21734              	.LVL1675:
 21735              	.L1542:
2398:src/xeq.c     **** 	return dispmode;
 21736              		.loc 1 2398 2 is_stmt 1 view .LVU5648
2399:src/xeq.c     **** }
 21737              		.loc 1 2399 2 view .LVU5649
2399:src/xeq.c     **** }
 21738              		.loc 1 2399 2 is_stmt 0 view .LVU5650
 21739              	.LBE3116:
 21740              	.LBE3117:
2422:src/xeq.c     **** 	case RARG_STD:
 21741              		.loc 1 2422 2 is_stmt 1 view .LVU5651
 21742 0024 4F29     		cmp	r1, #79
 21743 0026 1DD8     		bhi	.L1543
 21744 0028 4B29     		cmp	r1, #75
 21745 002a 3ED9     		bls	.L1544
 21746 002c 4D39     		subs	r1, r1, #77
 21747              	.LVL1676:
2422:src/xeq.c     **** 	case RARG_STD:
 21748              		.loc 1 2422 2 is_stmt 0 view .LVU5652
 21749 002e 0229     		cmp	r1, #2
 21750 0030 41D8     		bhi	.L1545
 21751 0032 DFE801F0 		tbb	[pc, r1]
 21752              	.LVL1677:
 21753              	.L1547:
 21754 0036 15       		.byte	(.L1549-.L1547)/2
 21755 0037 02       		.byte	(.L1556-.L1547)/2
 21756 0038 38       		.byte	(.L1546-.L1547)/2
 21757 0039 00       		.p2align 1
 21758              	.L1556:
2422:src/xeq.c     **** 	case RARG_STD:
 21759              		.loc 1 2422 2 view .LVU5653
 21760 003a 0223     		movs	r3, #2
 21761              	.L1548:
2455:src/xeq.c     **** #else
 21762              		.loc 1 2455 2 is_stmt 1 view .LVU5654
 21763 003c 0146     		mov	r1, r0
 21764              	.LVL1678:
 21765              	.LBB3118:
 21766              	.LBI3118:
2402:src/xeq.c     **** {
 21767              		.loc 1 2402 6 view .LVU5655
 21768              	.LBB3119:
2404:src/xeq.c     **** 		dispmode -= 4;
 21769              		.loc 1 2404 2 view .LVU5656
 21770              	.L1553:
2412:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21771              		.loc 1 2412 2 view .LVU5657
2413:src/xeq.c     **** }
 21772              		.loc 1 2413 2 view .LVU5658
ARM GAS  /tmp/ccQlyisH.s 			page 575


2412:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21773              		.loc 1 2412 18 is_stmt 0 view .LVU5659
 21774 003e B2F8E607 		ldrh	r0, [r2, #2022]
 21775              	.LVL1679:
2412:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21776              		.loc 1 2412 18 view .LVU5660
 21777              	.LBE3119:
 21778              	.LBE3118:
2462:src/xeq.c     **** 
 21779              		.loc 1 2462 1 view .LVU5661
 21780 0042 5DF8044B 		ldr	r4, [sp], #4
 21781              		.cfi_remember_state
 21782              		.cfi_restore 4
 21783              		.cfi_def_cfa_offset 0
 21784              	.LBB3123:
 21785              	.LBB3120:
2412:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21786              		.loc 1 2412 18 view .LVU5662
 21787 0046 01F00F01 		and	r1, r1, #15
 21788              	.LVL1680:
2412:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21789              		.loc 1 2412 18 view .LVU5663
 21790 004a 9B01     		lsls	r3, r3, #6
 21791 004c 43EA0123 		orr	r3, r3, r1, lsl #8
 21792 0050 20F47C61 		bic	r1, r0, #4032
 21793 0054 0B43     		orrs	r3, r3, r1
 21794 0056 A2F8E637 		strh	r3, [r2, #2022]	@ movhi
2412:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21795              		.loc 1 2412 18 view .LVU5664
 21796              	.LBE3120:
 21797              	.LBE3123:
2461:src/xeq.c     **** }
 21798              		.loc 1 2461 2 is_stmt 1 view .LVU5665
 21799 005a 5B20     		movs	r0, #91
 21800 005c FFF7FEBF 		b	op_float
 21801              	.LVL1681:
 21802              	.L1549:
 21803              		.cfi_restore_state
2422:src/xeq.c     **** 	case RARG_STD:
 21804              		.loc 1 2422 2 is_stmt 0 view .LVU5666
 21805 0060 0123     		movs	r3, #1
 21806 0062 EBE7     		b	.L1548
 21807              	.LVL1682:
 21808              	.L1543:
2422:src/xeq.c     **** 	case RARG_STD:
 21809              		.loc 1 2422 2 view .LVU5667
 21810 0064 8D29     		cmp	r1, #141
 21811 0066 0CD0     		beq	.L1557
 21812 0068 8E29     		cmp	r1, #142
 21813 006a 08BF     		it	eq
 21814 006c 0523     		moveq	r3, #5
 21815              	.LVL1683:
2422:src/xeq.c     **** 	case RARG_STD:
 21816              		.loc 1 2422 2 view .LVU5668
 21817 006e 1CD1     		bne	.L1544
 21818              	.LVL1684:
 21819              	.L1550:
ARM GAS  /tmp/ccQlyisH.s 			page 576


2443:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21820              		.loc 1 2443 54 discriminator 1 view .LVU5669
 21821 0070 0728     		cmp	r0, #7
 21822 0072 0AD8     		bhi	.L1560
 21823              	.L1551:
2455:src/xeq.c     **** #else
 21824              		.loc 1 2455 2 is_stmt 1 view .LVU5670
 21825              	.LVL1685:
 21826              	.LBB3124:
2402:src/xeq.c     **** {
 21827              		.loc 1 2402 6 view .LVU5671
 21828              	.LBB3121:
2404:src/xeq.c     **** 		dispmode -= 4;
 21829              		.loc 1 2404 2 view .LVU5672
2405:src/xeq.c     **** 		dispdigs += 12;
 21830              		.loc 1 2405 3 view .LVU5673
2406:src/xeq.c     **** 		if (dispdigs >= 16) {
 21831              		.loc 1 2406 3 view .LVU5674
2406:src/xeq.c     **** 		if (dispdigs >= 16) {
 21832              		.loc 1 2406 12 is_stmt 0 view .LVU5675
 21833 0074 00F10C01 		add	r1, r0, #12
 21834              	.LVL1686:
2407:src/xeq.c     **** 			dispdigs -= 4;
 21835              		.loc 1 2407 3 is_stmt 1 view .LVU5676
2407:src/xeq.c     **** 			dispdigs -= 4;
 21836              		.loc 1 2407 6 is_stmt 0 view .LVU5677
 21837 0078 0F29     		cmp	r1, #15
 21838 007a 0EDC     		bgt	.L1554
2407:src/xeq.c     **** 			dispdigs -= 4;
 21839              		.loc 1 2407 6 view .LVU5678
 21840 007c 03F00303 		and	r3, r3, #3
 21841              	.LVL1687:
2407:src/xeq.c     **** 			dispdigs -= 4;
 21842              		.loc 1 2407 6 view .LVU5679
 21843 0080 DDE7     		b	.L1553
 21844              	.LVL1688:
 21845              	.L1557:
2407:src/xeq.c     **** 			dispdigs -= 4;
 21846              		.loc 1 2407 6 view .LVU5680
 21847              	.LBE3121:
 21848              	.LBE3124:
2443:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21849              		.loc 1 2443 54 view .LVU5681
 21850 0082 0728     		cmp	r0, #7
2436:src/xeq.c     **** 	  break;
 21851              		.loc 1 2436 13 view .LVU5682
 21852 0084 4FF00403 		mov	r3, #4
 21853              	.LVL1689:
2443:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21854              		.loc 1 2443 54 view .LVU5683
 21855 0088 F4D9     		bls	.L1551
 21856              	.LVL1690:
 21857              	.L1560:
2444:src/xeq.c     **** 	  return;
 21858              		.loc 1 2444 4 is_stmt 1 view .LVU5684
 21859              	.LBB3125:
 21860              	.LBI3125:
ARM GAS  /tmp/ccQlyisH.s 			page 577


 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21861              		.loc 1 537 5 view .LVU5685
 21862              	.LBB3126:
 538:src/xeq.c     **** 		Error = e;
 21863              		.loc 1 538 2 view .LVU5686
 538:src/xeq.c     **** 		Error = e;
 21864              		.loc 1 538 12 is_stmt 0 view .LVU5687
 21865 008a 0D4B     		ldr	r3, .L1561+4
 21866              	.LVL1691:
 538:src/xeq.c     **** 		Error = e;
 21867              		.loc 1 538 5 view .LVU5688
 21868 008c 1A68     		ldr	r2, [r3]
 21869 008e 0AB9     		cbnz	r2, .L1541
 21870              	.LVL1692:
 21871              	.LBB3127:
 21872              	.LBI3127:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21873              		.loc 1 537 5 is_stmt 1 view .LVU5689
 21874              	.LBB3128:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 21875              		.loc 1 539 3 view .LVU5690
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 21876              		.loc 1 539 9 is_stmt 0 view .LVU5691
 21877 0090 0822     		movs	r2, #8
 21878 0092 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 21879              		.loc 1 540 3 is_stmt 1 view .LVU5692
 21880              	.LVL1693:
 21881              	.L1541:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 21882              		.loc 1 540 3 is_stmt 0 view .LVU5693
 21883              	.LBE3128:
 21884              	.LBE3127:
 21885              	.LBE3126:
 21886              	.LBE3125:
2462:src/xeq.c     **** 
 21887              		.loc 1 2462 1 view .LVU5694
 21888 0094 5DF8044B 		ldr	r4, [sp], #4
 21889              		.cfi_remember_state
 21890              		.cfi_restore 4
 21891              		.cfi_def_cfa_offset 0
 21892 0098 7047     		bx	lr
 21893              	.LVL1694:
 21894              	.L1554:
 21895              		.cfi_restore_state
 21896              	.LBB3129:
 21897              	.LBB3122:
2408:src/xeq.c     **** 			dispmode += 2;
 21898              		.loc 1 2408 4 is_stmt 1 view .LVU5695
2409:src/xeq.c     **** 		}
 21899              		.loc 1 2409 13 is_stmt 0 view .LVU5696
 21900 009a 023B     		subs	r3, r3, #2
 21901              	.LVL1695:
2409:src/xeq.c     **** 		}
 21902              		.loc 1 2409 13 view .LVU5697
 21903 009c 03F00303 		and	r3, r3, #3
 21904              	.LVL1696:
ARM GAS  /tmp/ccQlyisH.s 			page 578


2408:src/xeq.c     **** 			dispmode += 2;
 21905              		.loc 1 2408 13 view .LVU5698
 21906 00a0 00F10801 		add	r1, r0, #8
 21907              	.LVL1697:
2409:src/xeq.c     **** 		}
 21908              		.loc 1 2409 4 is_stmt 1 view .LVU5699
2409:src/xeq.c     **** 		}
 21909              		.loc 1 2409 4 is_stmt 0 view .LVU5700
 21910 00a4 CBE7     		b	.L1553
 21911              	.LVL1698:
 21912              	.L1546:
2409:src/xeq.c     **** 		}
 21913              		.loc 1 2409 4 view .LVU5701
 21914              	.LBE3122:
 21915              	.LBE3129:
2433:src/xeq.c     **** 	  break;
 21916              		.loc 1 2433 4 is_stmt 1 view .LVU5702
2434:src/xeq.c     **** 	case RARG_SIG:
 21917              		.loc 1 2434 4 view .LVU5703
 21918 00a6 0323     		movs	r3, #3
 21919 00a8 C8E7     		b	.L1548
 21920              	.LVL1699:
 21921              	.L1544:
2441:src/xeq.c     **** 	}
 21922              		.loc 1 2441 10 view .LVU5704
2443:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21923              		.loc 1 2443 2 view .LVU5705
2443:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21924              		.loc 1 2443 28 is_stmt 0 view .LVU5706
 21925 00aa 191F     		subs	r1, r3, #4
 21926              	.LVL1700:
2443:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21927              		.loc 1 2443 5 view .LVU5707
 21928 00ac 0129     		cmp	r1, #1
 21929 00ae DFD9     		bls	.L1550
 21930 00b0 03F00303 		and	r3, r3, #3
 21931              	.LVL1701:
2443:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21932              		.loc 1 2443 5 view .LVU5708
 21933 00b4 C2E7     		b	.L1548
 21934              	.LVL1702:
 21935              	.L1545:
2422:src/xeq.c     **** 	case RARG_STD:
 21936              		.loc 1 2422 2 view .LVU5709
 21937 00b6 0023     		movs	r3, #0
 21938 00b8 C0E7     		b	.L1548
 21939              	.L1562:
 21940 00ba 00BF     		.align	2
 21941              	.L1561:
 21942 00bc 00000000 		.word	main_ram
 21943 00c0 00000000 		.word	Error
 21944              		.cfi_endproc
 21945              	.LFE171:
 21947              		.section	.text.set_int_base,"ax",%progbits
 21948              		.align	1
 21949              		.p2align 2,,3
 21950              		.global	set_int_base
ARM GAS  /tmp/ccQlyisH.s 			page 579


 21951              		.syntax unified
 21952              		.thumb
 21953              		.thumb_func
 21954              		.fpu fpv4-sp-d16
 21956              	set_int_base:
 21957              	.LVL1703:
 21958              	.LFB208:
3723:src/xeq.c     **** 	if (arg < 2) {
 21959              		.loc 1 3723 51 is_stmt 1 view -0
 21960              		.cfi_startproc
 21961              		@ args = 0, pretend = 0, frame = 0
 21962              		@ frame_needed = 0, uses_anonymous_args = 0
3724:src/xeq.c     **** 		if (arg == 0)
 21963              		.loc 1 3724 2 view .LVU5711
3724:src/xeq.c     **** 		if (arg == 0)
 21964              		.loc 1 3724 5 is_stmt 0 view .LVU5712
 21965 0000 0128     		cmp	r0, #1
3723:src/xeq.c     **** 	if (arg < 2) {
 21966              		.loc 1 3723 51 view .LVU5713
 21967 0002 08B5     		push	{r3, lr}
 21968              		.cfi_def_cfa_offset 8
 21969              		.cfi_offset 3, -8
 21970              		.cfi_offset 14, -4
3724:src/xeq.c     **** 		if (arg == 0)
 21971              		.loc 1 3724 5 view .LVU5714
 21972 0004 0BD9     		bls	.L1568
3730:src/xeq.c     **** }
 21973              		.loc 1 3730 3 is_stmt 1 view .LVU5715
 21974              	.LVL1704:
 21975              	.LBB3130:
 21976              	.LBI3130:
3717:src/xeq.c     **** 	UState.int_base = b - 1;
 21977              		.loc 1 3717 13 view .LVU5716
 21978              	.LBB3131:
3718:src/xeq.c     **** 	if (!is_intmode())
 21979              		.loc 1 3718 2 view .LVU5717
 21980 0006 114B     		ldr	r3, .L1570
 21981 0008 1A68     		ldr	r2, [r3]
3718:src/xeq.c     **** 	if (!is_intmode())
 21982              		.loc 1 3718 18 is_stmt 0 view .LVU5718
 21983 000a 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3718:src/xeq.c     **** 	if (!is_intmode())
 21984              		.loc 1 3718 22 view .LVU5719
 21985 000e 0138     		subs	r0, r0, #1
 21986              	.LVL1705:
3718:src/xeq.c     **** 	if (!is_intmode())
 21987              		.loc 1 3718 18 view .LVU5720
 21988 0010 60F30713 		bfi	r3, r0, #4, #4
 21989 0014 82F8E837 		strb	r3, [r2, #2024]
3719:src/xeq.c     **** 		switch_to_int();
 21990              		.loc 1 3719 2 is_stmt 1 view .LVU5721
3719:src/xeq.c     **** 		switch_to_int();
 21991              		.loc 1 3719 5 is_stmt 0 view .LVU5722
 21992 0018 DB07     		lsls	r3, r3, #31
 21993 001a 12D5     		bpl	.L1569
 21994              	.LBE3131:
 21995              	.LBE3130:
ARM GAS  /tmp/ccQlyisH.s 			page 580


3731:src/xeq.c     **** 
 21996              		.loc 1 3731 1 view .LVU5723
 21997 001c 08BD     		pop	{r3, pc}
 21998              	.LVL1706:
 21999              	.L1568:
3725:src/xeq.c     **** 			op_float(OP_FLOAT);
 22000              		.loc 1 3725 3 is_stmt 1 view .LVU5724
3725:src/xeq.c     **** 			op_float(OP_FLOAT);
 22001              		.loc 1 3725 6 is_stmt 0 view .LVU5725
 22002 001e 20B9     		cbnz	r0, .L1565
3726:src/xeq.c     **** 		else
 22003              		.loc 1 3726 4 is_stmt 1 view .LVU5726
3731:src/xeq.c     **** 
 22004              		.loc 1 3731 1 is_stmt 0 view .LVU5727
 22005 0020 BDE80840 		pop	{r3, lr}
 22006              		.cfi_remember_state
 22007              		.cfi_restore 14
 22008              		.cfi_restore 3
 22009              		.cfi_def_cfa_offset 0
3726:src/xeq.c     **** 		else
 22010              		.loc 1 3726 4 view .LVU5728
 22011 0024 5B20     		movs	r0, #91
 22012              	.LVL1707:
3726:src/xeq.c     **** 		else
 22013              		.loc 1 3726 4 view .LVU5729
 22014 0026 FFF7FEBF 		b	op_float
 22015              	.LVL1708:
 22016              	.L1565:
 22017              		.cfi_restore_state
3728:src/xeq.c     **** 	} else
 22018              		.loc 1 3728 4 is_stmt 1 view .LVU5730
 22019              	.LBB3134:
 22020              	.LBI3134:
3734:src/xeq.c     **** 	op_float(OP_FLOAT);
 22021              		.loc 1 3734 6 view .LVU5731
 22022              	.LBB3135:
3735:src/xeq.c     **** 	UState.fract = 1;
 22023              		.loc 1 3735 2 view .LVU5732
 22024 002a 5B20     		movs	r0, #91
 22025              	.LVL1709:
3735:src/xeq.c     **** 	UState.fract = 1;
 22026              		.loc 1 3735 2 is_stmt 0 view .LVU5733
 22027 002c FFF7FEFF 		bl	op_float
 22028              	.LVL1710:
3736:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22029              		.loc 1 3736 2 is_stmt 1 view .LVU5734
3736:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22030              		.loc 1 3736 15 is_stmt 0 view .LVU5735
 22031 0030 064B     		ldr	r3, .L1570
 22032 0032 1A68     		ldr	r2, [r3]
 22033 0034 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 22034 0038 43F02003 		orr	r3, r3, #32
 22035 003c 82F8E637 		strb	r3, [r2, #2022]
3737:src/xeq.c     **** 		UState.improperfrac = 1;
 22036              		.loc 1 3737 2 is_stmt 1 view .LVU5736
3739:src/xeq.c     **** 		UState.improperfrac = 0;
 22037              		.loc 1 3739 7 view .LVU5737
ARM GAS  /tmp/ccQlyisH.s 			page 581


 22038              	.LBE3135:
 22039              	.LBE3134:
3731:src/xeq.c     **** 
 22040              		.loc 1 3731 1 is_stmt 0 view .LVU5738
 22041 0040 08BD     		pop	{r3, pc}
 22042              	.LVL1711:
 22043              	.L1569:
 22044              	.LBB3136:
 22045              	.LBB3132:
3720:src/xeq.c     **** }
 22046              		.loc 1 3720 3 is_stmt 1 view .LVU5739
 22047              	.LBE3132:
 22048              	.LBE3136:
3731:src/xeq.c     **** 
 22049              		.loc 1 3731 1 is_stmt 0 view .LVU5740
 22050 0042 BDE80840 		pop	{r3, lr}
 22051              		.cfi_restore 14
 22052              		.cfi_restore 3
 22053              		.cfi_def_cfa_offset 0
 22054              	.LBB3137:
 22055              	.LBB3133:
3720:src/xeq.c     **** }
 22056              		.loc 1 3720 3 view .LVU5741
 22057 0046 FFF7FEBF 		b	switch_to_int
 22058              	.LVL1712:
 22059              	.L1571:
3720:src/xeq.c     **** }
 22060              		.loc 1 3720 3 view .LVU5742
 22061 004a 00BF     		.align	2
 22062              	.L1570:
 22063 004c 00000000 		.word	main_ram
 22064              	.LBE3133:
 22065              	.LBE3137:
 22066              		.cfi_endproc
 22067              	.LFE208:
 22069              		.section	.text.op_fract,"ax",%progbits
 22070              		.align	1
 22071              		.p2align 2,,3
 22072              		.global	op_fract
 22073              		.syntax unified
 22074              		.thumb
 22075              		.thumb_func
 22076              		.fpu fpv4-sp-d16
 22078              	op_fract:
 22079              	.LVL1713:
 22080              	.LFB209:
3734:src/xeq.c     **** 	op_float(OP_FLOAT);
 22081              		.loc 1 3734 30 is_stmt 1 view -0
 22082              		.cfi_startproc
 22083              		@ args = 0, pretend = 0, frame = 0
 22084              		@ frame_needed = 0, uses_anonymous_args = 0
3735:src/xeq.c     **** 	UState.fract = 1;
 22085              		.loc 1 3735 2 view .LVU5744
3734:src/xeq.c     **** 	op_float(OP_FLOAT);
 22086              		.loc 1 3734 30 is_stmt 0 view .LVU5745
 22087 0000 10B5     		push	{r4, lr}
 22088              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccQlyisH.s 			page 582


 22089              		.cfi_offset 4, -8
 22090              		.cfi_offset 14, -4
3734:src/xeq.c     **** 	op_float(OP_FLOAT);
 22091              		.loc 1 3734 30 view .LVU5746
 22092 0002 0446     		mov	r4, r0
3735:src/xeq.c     **** 	UState.fract = 1;
 22093              		.loc 1 3735 2 view .LVU5747
 22094 0004 5B20     		movs	r0, #91
 22095              	.LVL1714:
3735:src/xeq.c     **** 	UState.fract = 1;
 22096              		.loc 1 3735 2 view .LVU5748
 22097 0006 FFF7FEFF 		bl	op_float
 22098              	.LVL1715:
3736:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22099              		.loc 1 3736 2 is_stmt 1 view .LVU5749
 22100 000a 0D4B     		ldr	r3, .L1578
 22101 000c 1B68     		ldr	r3, [r3]
3736:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22102              		.loc 1 3736 15 is_stmt 0 view .LVU5750
 22103 000e 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
3737:src/xeq.c     **** 		UState.improperfrac = 1;
 22104              		.loc 1 3737 5 view .LVU5751
 22105 0012 4D2C     		cmp	r4, #77
3736:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22106              		.loc 1 3736 15 view .LVU5752
 22107 0014 42F02002 		orr	r2, r2, #32
 22108 0018 83F8E627 		strb	r2, [r3, #2022]
3737:src/xeq.c     **** 		UState.improperfrac = 1;
 22109              		.loc 1 3737 2 is_stmt 1 view .LVU5753
3737:src/xeq.c     **** 		UState.improperfrac = 1;
 22110              		.loc 1 3737 5 is_stmt 0 view .LVU5754
 22111 001c 09D0     		beq	.L1576
3739:src/xeq.c     **** 		UState.improperfrac = 0;
 22112              		.loc 1 3739 7 is_stmt 1 view .LVU5755
3739:src/xeq.c     **** 		UState.improperfrac = 0;
 22113              		.loc 1 3739 10 is_stmt 0 view .LVU5756
 22114 001e 4E2C     		cmp	r4, #78
 22115 0020 00D0     		beq	.L1577
3741:src/xeq.c     **** 
 22116              		.loc 1 3741 1 view .LVU5757
 22117 0022 10BD     		pop	{r4, pc}
 22118              	.L1577:
3740:src/xeq.c     **** }
 22119              		.loc 1 3740 3 is_stmt 1 view .LVU5758
3740:src/xeq.c     **** }
 22120              		.loc 1 3740 23 is_stmt 0 view .LVU5759
 22121 0024 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 22122 0028 6FF30412 		bfc	r2, #4, #1
 22123 002c 83F8E627 		strb	r2, [r3, #2022]
3741:src/xeq.c     **** 
 22124              		.loc 1 3741 1 view .LVU5760
 22125 0030 10BD     		pop	{r4, pc}
 22126              	.L1576:
3738:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 22127              		.loc 1 3738 3 is_stmt 1 view .LVU5761
3738:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 22128              		.loc 1 3738 23 is_stmt 0 view .LVU5762
ARM GAS  /tmp/ccQlyisH.s 			page 583


 22129 0032 D2B2     		uxtb	r2, r2
 22130 0034 42F01002 		orr	r2, r2, #16
 22131 0038 83F8E627 		strb	r2, [r3, #2022]
3741:src/xeq.c     **** 
 22132              		.loc 1 3741 1 view .LVU5763
 22133 003c 10BD     		pop	{r4, pc}
 22134              	.L1579:
 22135 003e 00BF     		.align	2
 22136              	.L1578:
 22137 0040 00000000 		.word	main_ram
 22138              		.cfi_endproc
 22139              	.LFE209:
 22141              		.section	.text.cmdsavem,"ax",%progbits
 22142              		.align	1
 22143              		.p2align 2,,3
 22144              		.global	cmdsavem
 22145              		.syntax unified
 22146              		.thumb
 22147              		.thumb_func
 22148              		.fpu fpv4-sp-d16
 22150              	cmdsavem:
 22151              	.LVL1716:
 22152              	.LFB210:
3746:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 22153              		.loc 1 3746 47 is_stmt 1 view -0
 22154              		.cfi_startproc
 22155              		@ args = 0, pretend = 0, frame = 0
 22156              		@ frame_needed = 0, uses_anonymous_args = 0
3747:src/xeq.c     **** }
 22157              		.loc 1 3747 2 view .LVU5765
3746:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 22158              		.loc 1 3746 47 is_stmt 0 view .LVU5766
 22159 0000 08B5     		push	{r3, lr}
 22160              		.cfi_def_cfa_offset 8
 22161              		.cfi_offset 3, -8
 22162              		.cfi_offset 14, -4
3747:src/xeq.c     **** }
 22163              		.loc 1 3747 9 view .LVU5767
 22164 0002 FFF7FEFF 		bl	get_reg_n
 22165              	.LVL1717:
3747:src/xeq.c     **** }
 22166              		.loc 1 3747 26 view .LVU5768
 22167 0006 044B     		ldr	r3, .L1582
3747:src/xeq.c     **** }
 22168              		.loc 1 3747 25 view .LVU5769
 22169 0008 1968     		ldr	r1, [r3]
3747:src/xeq.c     **** }
 22170              		.loc 1 3747 2 view .LVU5770
 22171 000a 0822     		movs	r2, #8
3748:src/xeq.c     **** 
 22172              		.loc 1 3748 1 view .LVU5771
 22173 000c BDE80840 		pop	{r3, lr}
 22174              		.cfi_restore 14
 22175              		.cfi_restore 3
 22176              		.cfi_def_cfa_offset 0
3747:src/xeq.c     **** }
 22177              		.loc 1 3747 2 view .LVU5772
ARM GAS  /tmp/ccQlyisH.s 			page 584


 22178 0010 01F2E471 		addw	r1, r1, #2020
 22179 0014 FFF7FEBF 		b	xcopy
 22180              	.LVL1718:
 22181              	.L1583:
 22182              		.align	2
 22183              	.L1582:
 22184 0018 00000000 		.word	main_ram
 22185              		.cfi_endproc
 22186              	.LFE210:
 22188              		.section	.text.set_entry,"ax",%progbits
 22189              		.align	1
 22190              		.p2align 2,,3
 22191              		.global	set_entry
 22192              		.syntax unified
 22193              		.thumb
 22194              		.thumb_func
 22195              		.fpu fpv4-sp-d16
 22197              	set_entry:
 22198              	.LFB213:
3872:src/xeq.c     **** 	if (!Running && !XromRunning)
 22199              		.loc 1 3872 18 is_stmt 1 view -0
 22200              		.cfi_startproc
 22201              		@ args = 0, pretend = 0, frame = 0
 22202              		@ frame_needed = 0, uses_anonymous_args = 0
 22203              		@ link register save eliminated.
3873:src/xeq.c     **** 		State.entryp = 1;
 22204              		.loc 1 3873 2 view .LVU5774
 22205              	.LBB3140:
 22206              	.LBI3140:
3872:src/xeq.c     **** 	if (!Running && !XromRunning)
 22207              		.loc 1 3872 6 view .LVU5775
 22208              	.LBE3140:
3873:src/xeq.c     **** 		State.entryp = 1;
 22209              		.loc 1 3873 6 is_stmt 0 view .LVU5776
 22210 0000 074A     		ldr	r2, .L1586
 22211              	.LBB3142:
 22212              	.LBB3141:
3873:src/xeq.c     **** 		State.entryp = 1;
 22213              		.loc 1 3873 18 view .LVU5777
 22214 0002 084B     		ldr	r3, .L1586+4
3873:src/xeq.c     **** 		State.entryp = 1;
 22215              		.loc 1 3873 15 view .LVU5778
 22216 0004 1268     		ldr	r2, [r2]
 22217 0006 1B68     		ldr	r3, [r3]
 22218 0008 1343     		orrs	r3, r2, r3
 22219 000a 07D1     		bne	.L1584
3874:src/xeq.c     **** }
 22220              		.loc 1 3874 3 is_stmt 1 view .LVU5779
3874:src/xeq.c     **** }
 22221              		.loc 1 3874 16 is_stmt 0 view .LVU5780
 22222 000c 064B     		ldr	r3, .L1586+8
 22223 000e 1A68     		ldr	r2, [r3]
 22224 0010 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 22225 0014 43F01003 		orr	r3, r3, #16
 22226 0018 82F8DD37 		strb	r3, [r2, #2013]
 22227              	.L1584:
 22228              	.LBE3141:
ARM GAS  /tmp/ccQlyisH.s 			page 585


 22229              	.LBE3142:
3875:src/xeq.c     **** 
 22230              		.loc 1 3875 1 view .LVU5781
 22231 001c 7047     		bx	lr
 22232              	.L1587:
 22233 001e 00BF     		.align	2
 22234              	.L1586:
 22235 0020 00000000 		.word	Running
 22236 0024 00000000 		.word	XromRunning
 22237 0028 00000000 		.word	main_ram
 22238              		.cfi_endproc
 22239              	.LFE213:
 22241              		.section	.text.get_trig_mode,"ax",%progbits
 22242              		.align	1
 22243              		.p2align 2,,3
 22244              		.global	get_trig_mode
 22245              		.syntax unified
 22246              		.thumb
 22247              		.thumb_func
 22248              		.fpu fpv4-sp-d16
 22250              	get_trig_mode:
 22251              	.LFB215:
4059:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 22252              		.loc 1 4059 37 is_stmt 1 view -0
 22253              		.cfi_startproc
 22254              		@ args = 0, pretend = 0, frame = 0
 22255              		@ frame_needed = 0, uses_anonymous_args = 0
 22256              		@ link register save eliminated.
4060:src/xeq.c     **** 		return TRIG_RAD;
 22257              		.loc 1 4060 2 view .LVU5783
4060:src/xeq.c     **** 		return TRIG_RAD;
 22258              		.loc 1 4060 6 is_stmt 0 view .LVU5784
 22259 0000 084B     		ldr	r3, .L1592
 22260 0002 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
4060:src/xeq.c     **** 		return TRIG_RAD;
 22261              		.loc 1 4060 5 view .LVU5785
 22262 0004 9B07     		lsls	r3, r3, #30
 22263 0006 0AD4     		bmi	.L1591
4060:src/xeq.c     **** 		return TRIG_RAD;
 22264              		.loc 1 4060 19 discriminator 1 view .LVU5786
 22265 0008 074B     		ldr	r3, .L1592+4
 22266 000a 93F90130 		ldrsb	r3, [r3, #1]
 22267 000e 002B     		cmp	r3, #0
 22268 0010 05DB     		blt	.L1591
4063:src/xeq.c     **** }
 22269              		.loc 1 4063 2 is_stmt 1 view .LVU5787
4063:src/xeq.c     **** }
 22270              		.loc 1 4063 33 is_stmt 0 view .LVU5788
 22271 0012 064B     		ldr	r3, .L1592+8
 22272 0014 1B68     		ldr	r3, [r3]
 22273 0016 93F8EA07 		ldrb	r0, [r3, #2026]	@ zero_extendqisi2
4063:src/xeq.c     **** }
 22274              		.loc 1 4063 9 view .LVU5789
 22275 001a 8009     		lsrs	r0, r0, #6
 22276 001c 7047     		bx	lr
 22277              	.L1591:
4061:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
ARM GAS  /tmp/ccQlyisH.s 			page 586


 22278              		.loc 1 4061 10 view .LVU5790
 22279 001e 0120     		movs	r0, #1
4064:src/xeq.c     **** 
 22280              		.loc 1 4064 1 view .LVU5791
 22281 0020 7047     		bx	lr
 22282              	.L1593:
 22283 0022 00BF     		.align	2
 22284              	.L1592:
 22285 0024 00000000 		.word	StateWhileOn
 22286 0028 00000000 		.word	XromParams
 22287 002c 00000000 		.word	main_ram
 22288              		.cfi_endproc
 22289              	.LFE215:
 22291              		.section	.text.cmdpause,"ax",%progbits
 22292              		.align	1
 22293              		.p2align 2,,3
 22294              		.global	cmdpause
 22295              		.syntax unified
 22296              		.thumb
 22297              		.thumb_func
 22298              		.fpu fpv4-sp-d16
 22300              	cmdpause:
 22301              	.LVL1719:
 22302              	.LFB217:
4109:src/xeq.c     **** 	display();
 22303              		.loc 1 4109 47 is_stmt 1 view -0
 22304              		.cfi_startproc
 22305              		@ args = 0, pretend = 0, frame = 0
 22306              		@ frame_needed = 0, uses_anonymous_args = 0
4110:src/xeq.c     **** #ifndef CONSOLE
 22307              		.loc 1 4110 2 view .LVU5793
4109:src/xeq.c     **** 	display();
 22308              		.loc 1 4109 47 is_stmt 0 view .LVU5794
 22309 0000 10B5     		push	{r4, lr}
 22310              		.cfi_def_cfa_offset 8
 22311              		.cfi_offset 4, -8
 22312              		.cfi_offset 14, -4
4109:src/xeq.c     **** 	display();
 22313              		.loc 1 4109 47 view .LVU5795
 22314 0002 0446     		mov	r4, r0
4110:src/xeq.c     **** #ifndef CONSOLE
 22315              		.loc 1 4110 2 view .LVU5796
 22316 0004 FFF7FEFF 		bl	display
 22317              	.LVL1720:
4113:src/xeq.c     **** 	GoFast = (arg == 0);
 22318              		.loc 1 4113 2 is_stmt 1 view .LVU5797
4113:src/xeq.c     **** 	GoFast = (arg == 0);
 22319              		.loc 1 4113 8 is_stmt 0 view .LVU5798
 22320 0008 044A     		ldr	r2, .L1596
4114:src/xeq.c     **** #elif 0
 22321              		.loc 1 4114 9 view .LVU5799
 22322 000a 0549     		ldr	r1, .L1596+4
4114:src/xeq.c     **** #elif 0
 22323              		.loc 1 4114 16 view .LVU5800
 22324 000c B4FA84F3 		clz	r3, r4
4113:src/xeq.c     **** 	GoFast = (arg == 0);
 22325              		.loc 1 4113 8 view .LVU5801
ARM GAS  /tmp/ccQlyisH.s 			page 587


 22326 0010 E4B2     		uxtb	r4, r4
 22327              	.LVL1721:
4114:src/xeq.c     **** #elif 0
 22328              		.loc 1 4114 16 view .LVU5802
 22329 0012 5B09     		lsrs	r3, r3, #5
4113:src/xeq.c     **** 	GoFast = (arg == 0);
 22330              		.loc 1 4113 8 view .LVU5803
 22331 0014 1470     		strb	r4, [r2]
4114:src/xeq.c     **** #elif 0
 22332              		.loc 1 4114 2 is_stmt 1 view .LVU5804
4114:src/xeq.c     **** #elif 0
 22333              		.loc 1 4114 9 is_stmt 0 view .LVU5805
 22334 0016 0B60     		str	r3, [r1]
4125:src/xeq.c     **** 
 22335              		.loc 1 4125 1 view .LVU5806
 22336 0018 10BD     		pop	{r4, pc}
 22337              	.L1597:
 22338 001a 00BF     		.align	2
 22339              	.L1596:
 22340 001c 00000000 		.word	Pause
 22341 0020 00000000 		.word	GoFast
 22342              		.cfi_endproc
 22343              	.LFE217:
 22345              		.section	.text.op_setspeed,"ax",%progbits
 22346              		.align	1
 22347              		.p2align 2,,3
 22348              		.global	op_setspeed
 22349              		.syntax unified
 22350              		.thumb
 22351              		.thumb_func
 22352              		.fpu fpv4-sp-d16
 22354              	op_setspeed:
 22355              	.LVL1722:
 22356              	.LFB218:
4129:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
 22357              		.loc 1 4129 33 is_stmt 1 view -0
 22358              		.cfi_startproc
 22359              		@ args = 0, pretend = 0, frame = 0
 22360              		@ frame_needed = 0, uses_anonymous_args = 0
 22361              		@ link register save eliminated.
4130:src/xeq.c     **** 	update_speed(1);
 22362              		.loc 1 4130 2 view .LVU5808
4130:src/xeq.c     **** 	update_speed(1);
 22363              		.loc 1 4130 20 is_stmt 0 view .LVU5809
 22364 0000 064B     		ldr	r3, .L1599
 22365 0002 1B68     		ldr	r3, [r3]
4130:src/xeq.c     **** 	update_speed(1);
 22366              		.loc 1 4130 42 view .LVU5810
 22367 0004 A0F19A00 		sub	r0, #154
 22368              	.LVL1723:
4130:src/xeq.c     **** 	update_speed(1);
 22369              		.loc 1 4130 20 view .LVU5811
 22370 0008 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
4130:src/xeq.c     **** 	update_speed(1);
 22371              		.loc 1 4130 42 view .LVU5812
 22372 000c B0FA80F0 		clz	r0, r0
 22373 0010 4009     		lsrs	r0, r0, #5
ARM GAS  /tmp/ccQlyisH.s 			page 588


4130:src/xeq.c     **** 	update_speed(1);
 22374              		.loc 1 4130 20 view .LVU5813
 22375 0012 60F3C302 		bfi	r2, r0, #3, #1
 22376 0016 83F8EB27 		strb	r2, [r3, #2027]
4131:src/xeq.c     **** }
 22377              		.loc 1 4131 17 is_stmt 1 view .LVU5814
4132:src/xeq.c     **** 
 22378              		.loc 1 4132 1 is_stmt 0 view .LVU5815
 22379 001a 7047     		bx	lr
 22380              	.L1600:
 22381              		.align	2
 22382              	.L1599:
 22383 001c 00000000 		.word	main_ram
 22384              		.cfi_endproc
 22385              	.LFE218:
 22387              		.section	.text.op_prompt,"ax",%progbits
 22388              		.align	1
 22389              		.p2align 2,,3
 22390              		.global	op_prompt
 22391              		.syntax unified
 22392              		.thumb
 22393              		.thumb_func
 22394              		.fpu fpv4-sp-d16
 22396              	op_prompt:
 22397              	.LVL1724:
 22398              	.LFB219:
4135:src/xeq.c     **** 	set_running_off();
 22399              		.loc 1 4135 31 is_stmt 1 view -0
 22400              		.cfi_startproc
 22401              		@ args = 0, pretend = 0, frame = 0
 22402              		@ frame_needed = 0, uses_anonymous_args = 0
4136:src/xeq.c     **** 	alpha_view_common(regX_idx);
 22403              		.loc 1 4136 2 view .LVU5817
 22404              	.LBB3143:
 22405              	.LBI3143:
5776:src/xeq.c     **** 	set_running_off_sst();
 22406              		.loc 1 5776 6 view .LVU5818
 22407              	.LBB3144:
5777:src/xeq.c     **** 	State.entryp = 0;
 22408              		.loc 1 5777 2 view .LVU5819
 22409              	.LBB3145:
 22410              	.LBI3145:
5768:src/xeq.c     **** 	Running = 0;
 22411              		.loc 1 5768 6 view .LVU5820
 22412              	.LBB3146:
5769:src/xeq.c     **** }
 22413              		.loc 1 5769 2 view .LVU5821
 22414              	.LBE3146:
 22415              	.LBE3145:
 22416              	.LBE3144:
 22417              	.LBE3143:
4135:src/xeq.c     **** 	set_running_off();
 22418              		.loc 1 4135 31 is_stmt 0 view .LVU5822
 22419 0000 08B5     		push	{r3, lr}
 22420              		.cfi_def_cfa_offset 8
 22421              		.cfi_offset 3, -8
 22422              		.cfi_offset 14, -4
ARM GAS  /tmp/ccQlyisH.s 			page 589


 22423              	.LBB3152:
 22424              	.LBB3151:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 22425              		.loc 1 5778 15 view .LVU5823
 22426 0002 094B     		ldr	r3, .L1603
 22427              	.LBB3149:
 22428              	.LBB3147:
5769:src/xeq.c     **** }
 22429              		.loc 1 5769 10 view .LVU5824
 22430 0004 094A     		ldr	r2, .L1603+4
 22431              	.LBE3147:
 22432              	.LBE3149:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 22433              		.loc 1 5778 15 view .LVU5825
 22434 0006 1B68     		ldr	r3, [r3]
 22435              	.LBB3150:
 22436              	.LBB3148:
5769:src/xeq.c     **** }
 22437              		.loc 1 5769 10 view .LVU5826
 22438 0008 0021     		movs	r1, #0
 22439 000a 1160     		str	r1, [r2]
 22440              	.LBE3148:
 22441              	.LBE3150:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 22442              		.loc 1 5778 2 is_stmt 1 view .LVU5827
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 22443              		.loc 1 5778 15 is_stmt 0 view .LVU5828
 22444 000c 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 22445 0010 61F30412 		bfi	r2, r1, #4, #1
 22446 0014 83F8DD27 		strb	r2, [r3, #2013]
 22447              		.loc 1 5779 2 is_stmt 1 view .LVU5829
 22448 0018 8A20     		movs	r0, #138
 22449              	.LVL1725:
 22450              		.loc 1 5779 2 is_stmt 0 view .LVU5830
 22451 001a FFF7FEFF 		bl	dot
 22452              	.LVL1726:
 22453              	.LBE3151:
 22454              	.LBE3152:
4137:src/xeq.c     **** }
 22455              		.loc 1 4137 2 is_stmt 1 view .LVU5831
4138:src/xeq.c     **** 
 22456              		.loc 1 4138 1 is_stmt 0 view .LVU5832
 22457 001e BDE80840 		pop	{r3, lr}
 22458              		.cfi_restore 14
 22459              		.cfi_restore 3
 22460              		.cfi_def_cfa_offset 0
4137:src/xeq.c     **** }
 22461              		.loc 1 4137 2 view .LVU5833
 22462 0022 6420     		movs	r0, #100
 22463 0024 FFF7FEBF 		b	alpha_view_common
 22464              	.LVL1727:
 22465              	.L1604:
 22466              		.align	2
 22467              	.L1603:
 22468 0028 00000000 		.word	main_ram
 22469 002c 00000000 		.word	Running
 22470              		.cfi_endproc
ARM GAS  /tmp/ccQlyisH.s 			page 590


 22471              	.LFE219:
 22473              		.section	.text.XisInt,"ax",%progbits
 22474              		.align	1
 22475              		.p2align 2,,3
 22476              		.global	XisInt
 22477              		.syntax unified
 22478              		.thumb
 22479              		.thumb_func
 22480              		.fpu fpv4-sp-d16
 22482              	XisInt:
 22483              	.LVL1728:
 22484              	.LFB220:
4142:src/xeq.c     **** 	decNumber x;
 22485              		.loc 1 4142 28 is_stmt 1 view -0
 22486              		.cfi_startproc
 22487              		@ args = 0, pretend = 0, frame = 40
 22488              		@ frame_needed = 0, uses_anonymous_args = 0
4143:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
 22489              		.loc 1 4143 2 view .LVU5835
4144:src/xeq.c     **** 	if ( is_intmode() )
 22490              		.loc 1 4144 2 view .LVU5836
4145:src/xeq.c     **** 		result = op_int;
 22491              		.loc 1 4145 7 is_stmt 0 view .LVU5837
 22492 0000 164B     		ldr	r3, .L1611
4142:src/xeq.c     **** 	decNumber x;
 22493              		.loc 1 4142 28 view .LVU5838
 22494 0002 30B5     		push	{r4, r5, lr}
 22495              		.cfi_def_cfa_offset 12
 22496              		.cfi_offset 4, -12
 22497              		.cfi_offset 5, -8
 22498              		.cfi_offset 14, -4
4145:src/xeq.c     **** 		result = op_int;
 22499              		.loc 1 4145 7 view .LVU5839
 22500 0004 1B68     		ldr	r3, [r3]
 22501 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4144:src/xeq.c     **** 	if ( is_intmode() )
 22502              		.loc 1 4144 27 view .LVU5840
 22503 000a A0F18704 		sub	r4, r0, #135
 22504 000e B4FA84F4 		clz	r4, r4
4145:src/xeq.c     **** 		result = op_int;
 22505              		.loc 1 4145 5 view .LVU5841
 22506 0012 13F00105 		ands	r5, r3, #1
4142:src/xeq.c     **** 	decNumber x;
 22507              		.loc 1 4142 28 view .LVU5842
 22508 0016 8BB0     		sub	sp, sp, #44
 22509              		.cfi_def_cfa_offset 56
4144:src/xeq.c     **** 	if ( is_intmode() )
 22510              		.loc 1 4144 27 view .LVU5843
 22511 0018 4FEA5414 		lsr	r4, r4, #5
 22512              	.LVL1729:
4145:src/xeq.c     **** 		result = op_int;
 22513              		.loc 1 4145 2 is_stmt 1 view .LVU5844
4145:src/xeq.c     **** 		result = op_int;
 22514              		.loc 1 4145 5 is_stmt 0 view .LVU5845
 22515 001c 04D0     		beq	.L1609
 22516              	.LVL1730:
4151:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 591


 22517              		.loc 1 4151 2 is_stmt 1 view .LVU5846
 22518 001e 2046     		mov	r0, r4
 22519              	.LVL1731:
4151:src/xeq.c     **** }
 22520              		.loc 1 4151 2 is_stmt 0 view .LVU5847
 22521 0020 FFF7FEFF 		bl	fin_tst
 22522              	.LVL1732:
4152:src/xeq.c     **** 
 22523              		.loc 1 4152 1 view .LVU5848
 22524 0024 0BB0     		add	sp, sp, #44
 22525              		.cfi_remember_state
 22526              		.cfi_def_cfa_offset 12
 22527              		@ sp needed
 22528 0026 30BD     		pop	{r4, r5, pc}
 22529              	.LVL1733:
 22530              	.L1609:
 22531              		.cfi_restore_state
4147:src/xeq.c     **** 		result = 0;
 22532              		.loc 1 4147 7 is_stmt 1 view .LVU5849
 22533              	.LBB3153:
 22534              	.LBI3153:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22535              		.loc 1 815 12 view .LVU5850
 22536              	.LBB3154:
 816:src/xeq.c     **** }
 22537              		.loc 1 816 2 view .LVU5851
 816:src/xeq.c     **** }
 22538              		.loc 1 816 9 is_stmt 0 view .LVU5852
 22539 0028 01A8     		add	r0, sp, #4
 22540              	.LVL1734:
 816:src/xeq.c     **** }
 22541              		.loc 1 816 9 view .LVU5853
 22542 002a 6421     		movs	r1, #100
 22543 002c FFF7FEFF 		bl	getRegister
 22544              	.LVL1735:
 816:src/xeq.c     **** }
 22545              		.loc 1 816 9 view .LVU5854
 22546              	.LBE3154:
 22547              	.LBE3153:
4147:src/xeq.c     **** 		result = 0;
 22548              		.loc 1 4147 10 view .LVU5855
 22549 0030 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 22550 0032 13F0700F 		tst	r3, #112
 22551 0036 05D0     		beq	.L1610
4148:src/xeq.c     **** 	else
 22552              		.loc 1 4148 10 view .LVU5856
 22553 0038 2C46     		mov	r4, r5
 22554              	.LVL1736:
4151:src/xeq.c     **** }
 22555              		.loc 1 4151 2 is_stmt 1 view .LVU5857
 22556 003a 2046     		mov	r0, r4
 22557 003c FFF7FEFF 		bl	fin_tst
 22558              	.LVL1737:
4152:src/xeq.c     **** 
 22559              		.loc 1 4152 1 is_stmt 0 view .LVU5858
 22560 0040 0BB0     		add	sp, sp, #44
 22561              		.cfi_remember_state
ARM GAS  /tmp/ccQlyisH.s 			page 592


 22562              		.cfi_def_cfa_offset 12
 22563              		@ sp needed
 22564 0042 30BD     		pop	{r4, r5, pc}
 22565              	.LVL1738:
 22566              	.L1610:
 22567              		.cfi_restore_state
4150:src/xeq.c     **** 	fin_tst(result);
 22568              		.loc 1 4150 10 is_stmt 1 view .LVU5859
4150:src/xeq.c     **** 	fin_tst(result);
 22569              		.loc 1 4150 20 is_stmt 0 view .LVU5860
 22570 0044 01A8     		add	r0, sp, #4
 22571 0046 FFF7FEFF 		bl	is_int
 22572              	.LVL1739:
4150:src/xeq.c     **** 	fin_tst(result);
 22573              		.loc 1 4150 31 view .LVU5861
 22574 004a 041B     		subs	r4, r0, r4
 22575              	.LVL1740:
4150:src/xeq.c     **** 	fin_tst(result);
 22576              		.loc 1 4150 31 view .LVU5862
 22577 004c B4FA84F4 		clz	r4, r4
 22578 0050 6409     		lsrs	r4, r4, #5
 22579              	.LVL1741:
4151:src/xeq.c     **** }
 22580              		.loc 1 4151 2 is_stmt 1 view .LVU5863
 22581 0052 2046     		mov	r0, r4
 22582 0054 FFF7FEFF 		bl	fin_tst
 22583              	.LVL1742:
4152:src/xeq.c     **** 
 22584              		.loc 1 4152 1 is_stmt 0 view .LVU5864
 22585 0058 0BB0     		add	sp, sp, #44
 22586              		.cfi_def_cfa_offset 12
 22587              		@ sp needed
 22588 005a 30BD     		pop	{r4, r5, pc}
 22589              	.LVL1743:
 22590              	.L1612:
4152:src/xeq.c     **** 
 22591              		.loc 1 4152 1 view .LVU5865
 22592              		.align	2
 22593              	.L1611:
 22594 005c 00000000 		.word	main_ram
 22595              		.cfi_endproc
 22596              	.LFE220:
 22598              		.section	.text.XisEvenOrOdd,"ax",%progbits
 22599              		.align	1
 22600              		.p2align 2,,3
 22601              		.global	XisEvenOrOdd
 22602              		.syntax unified
 22603              		.thumb
 22604              		.thumb_func
 22605              		.fpu fpv4-sp-d16
 22607              	XisEvenOrOdd:
 22608              	.LVL1744:
 22609              	.LFB221:
4156:src/xeq.c     **** 	decNumber x;
 22610              		.loc 1 4156 34 is_stmt 1 view -0
 22611              		.cfi_startproc
 22612              		@ args = 0, pretend = 0, frame = 40
ARM GAS  /tmp/ccQlyisH.s 			page 593


 22613              		@ frame_needed = 0, uses_anonymous_args = 0
4157:src/xeq.c     **** 	int odd = (op == OP_XisODD);
 22614              		.loc 1 4157 2 view .LVU5867
4158:src/xeq.c     **** 
 22615              		.loc 1 4158 2 view .LVU5868
4160:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22616              		.loc 1 4160 6 is_stmt 0 view .LVU5869
 22617 0000 174B     		ldr	r3, .L1617
4156:src/xeq.c     **** 	decNumber x;
 22618              		.loc 1 4156 34 view .LVU5870
 22619 0002 30B5     		push	{r4, r5, lr}
 22620              		.cfi_def_cfa_offset 12
 22621              		.cfi_offset 4, -12
 22622              		.cfi_offset 5, -8
 22623              		.cfi_offset 14, -4
4160:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22624              		.loc 1 4160 6 view .LVU5871
 22625 0004 1B68     		ldr	r3, [r3]
 22626 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4160:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22627              		.loc 1 4160 5 view .LVU5872
 22628 000a DB07     		lsls	r3, r3, #31
4156:src/xeq.c     **** 	decNumber x;
 22629              		.loc 1 4156 34 view .LVU5873
 22630 000c 8BB0     		sub	sp, sp, #44
 22631              		.cfi_def_cfa_offset 56
4156:src/xeq.c     **** 	decNumber x;
 22632              		.loc 1 4156 34 view .LVU5874
 22633 000e 0446     		mov	r4, r0
 22634              	.LVL1745:
4160:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22635              		.loc 1 4160 2 is_stmt 1 view .LVU5875
4160:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22636              		.loc 1 4160 5 is_stmt 0 view .LVU5876
 22637 0010 15D5     		bpl	.L1614
4161:src/xeq.c     **** 	} else {
 22638              		.loc 1 4161 3 is_stmt 1 view .LVU5877
 22639              	.LBB3155:
 22640              	.LBI3155:
1411:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 22641              		.loc 1 1411 15 view .LVU5878
 22642              	.LBB3156:
1412:src/xeq.c     **** }
 22643              		.loc 1 1412 2 view .LVU5879
1412:src/xeq.c     **** }
 22644              		.loc 1 1412 9 is_stmt 0 view .LVU5880
 22645 0012 6420     		movs	r0, #100
 22646              	.LVL1746:
1412:src/xeq.c     **** }
 22647              		.loc 1 1412 9 view .LVU5881
 22648 0014 FFF7FEFF 		bl	get_reg_n_int
 22649              	.LVL1747:
 22650              	.LBE3156:
 22651              	.LBE3155:
4158:src/xeq.c     **** 
 22652              		.loc 1 4158 16 view .LVU5882
 22653 0018 A4F18A04 		sub	r4, #138
ARM GAS  /tmp/ccQlyisH.s 			page 594


 22654              	.LVL1748:
4161:src/xeq.c     **** 	} else {
 22655              		.loc 1 4161 23 view .LVU5883
 22656 001c 0023     		movs	r3, #0
4158:src/xeq.c     **** 
 22657              		.loc 1 4158 16 view .LVU5884
 22658 001e 0025     		movs	r5, #0
 22659 0020 B4FA84F4 		clz	r4, r4
4161:src/xeq.c     **** 	} else {
 22660              		.loc 1 4161 23 view .LVU5885
 22661 0024 00F00102 		and	r2, r0, #1
4161:src/xeq.c     **** 	} else {
 22662              		.loc 1 4161 3 view .LVU5886
 22663 0028 AB42     		cmp	r3, r5
4158:src/xeq.c     **** 
 22664              		.loc 1 4158 16 view .LVU5887
 22665 002a 4FEA5414 		lsr	r4, r4, #5
4161:src/xeq.c     **** 	} else {
 22666              		.loc 1 4161 3 view .LVU5888
 22667 002e 06BF     		itte	eq
 22668 0030 A242     		cmpeq	r2, r4
 22669 0032 0120     		moveq	r0, #1
 22670 0034 1846     		movne	r0, r3
 22671 0036 FFF7FEFF 		bl	fin_tst
 22672              	.LVL1749:
4165:src/xeq.c     **** 
 22673              		.loc 1 4165 1 view .LVU5889
 22674 003a 0BB0     		add	sp, sp, #44
 22675              		.cfi_remember_state
 22676              		.cfi_def_cfa_offset 12
 22677              		@ sp needed
 22678 003c 30BD     		pop	{r4, r5, pc}
 22679              	.LVL1750:
 22680              	.L1614:
 22681              		.cfi_restore_state
4163:src/xeq.c     **** 	}
 22682              		.loc 1 4163 3 is_stmt 1 view .LVU5890
 22683              	.LBB3157:
 22684              	.LBI3157:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22685              		.loc 1 815 12 view .LVU5891
 22686              	.LBB3158:
 816:src/xeq.c     **** }
 22687              		.loc 1 816 2 view .LVU5892
 816:src/xeq.c     **** }
 22688              		.loc 1 816 9 is_stmt 0 view .LVU5893
 22689 003e 6421     		movs	r1, #100
 22690 0040 01A8     		add	r0, sp, #4
 22691              	.LVL1751:
 816:src/xeq.c     **** }
 22692              		.loc 1 816 9 view .LVU5894
 22693 0042 FFF7FEFF 		bl	getRegister
 22694              	.LVL1752:
 816:src/xeq.c     **** }
 22695              		.loc 1 816 9 view .LVU5895
 22696              	.LBE3158:
 22697              	.LBE3157:
ARM GAS  /tmp/ccQlyisH.s 			page 595


4163:src/xeq.c     **** 	}
 22698              		.loc 1 4163 11 view .LVU5896
 22699 0046 FFF7FEFF 		bl	is_even
 22700              	.LVL1753:
4163:src/xeq.c     **** 	}
 22701              		.loc 1 4163 32 view .LVU5897
 22702 004a 8A3C     		subs	r4, r4, #138
 22703              	.LVL1754:
4163:src/xeq.c     **** 	}
 22704              		.loc 1 4163 32 view .LVU5898
 22705 004c 18BF     		it	ne
 22706 004e 0124     		movne	r4, #1
4163:src/xeq.c     **** 	}
 22707              		.loc 1 4163 3 view .LVU5899
 22708 0050 201A     		subs	r0, r4, r0
 22709 0052 B0FA80F0 		clz	r0, r0
 22710 0056 4009     		lsrs	r0, r0, #5
 22711 0058 FFF7FEFF 		bl	fin_tst
 22712              	.LVL1755:
4165:src/xeq.c     **** 
 22713              		.loc 1 4165 1 view .LVU5900
 22714 005c 0BB0     		add	sp, sp, #44
 22715              		.cfi_def_cfa_offset 12
 22716              		@ sp needed
 22717 005e 30BD     		pop	{r4, r5, pc}
 22718              	.L1618:
 22719              		.align	2
 22720              	.L1617:
 22721 0060 00000000 		.word	main_ram
 22722              		.cfi_endproc
 22723              	.LFE221:
 22725              		.section	.text.XisPrime,"ax",%progbits
 22726              		.align	1
 22727              		.p2align 2,,3
 22728              		.global	XisPrime
 22729              		.syntax unified
 22730              		.thumb
 22731              		.thumb_func
 22732              		.fpu fpv4-sp-d16
 22734              	XisPrime:
 22735              	.LVL1756:
 22736              	.LFB222:
4169:src/xeq.c     **** 	unsigned long long int i;
 22737              		.loc 1 4169 30 is_stmt 1 view -0
 22738              		.cfi_startproc
 22739              		@ args = 0, pretend = 0, frame = 40
 22740              		@ frame_needed = 0, uses_anonymous_args = 0
4170:src/xeq.c     **** 	int sgn;
 22741              		.loc 1 4170 2 view .LVU5902
4171:src/xeq.c     **** 
 22742              		.loc 1 4171 2 view .LVU5903
4173:src/xeq.c     **** 	if (!is_intmode()) {
 22743              		.loc 1 4173 2 view .LVU5904
4169:src/xeq.c     **** 	unsigned long long int i;
 22744              		.loc 1 4169 30 is_stmt 0 view .LVU5905
 22745 0000 70B5     		push	{r4, r5, r6, lr}
 22746              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccQlyisH.s 			page 596


 22747              		.cfi_offset 4, -16
 22748              		.cfi_offset 5, -12
 22749              		.cfi_offset 6, -8
 22750              		.cfi_offset 14, -4
 22751 0002 8AB0     		sub	sp, sp, #40
 22752              		.cfi_def_cfa_offset 56
 22753              	.LVL1757:
 22754              	.LBB3159:
 22755              	.LBI3159:
1415:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 22756              		.loc 1 1415 24 is_stmt 1 view .LVU5906
 22757              	.LBB3160:
1416:src/xeq.c     **** }
 22758              		.loc 1 1416 2 view .LVU5907
1416:src/xeq.c     **** }
 22759              		.loc 1 1416 9 is_stmt 0 view .LVU5908
 22760 0004 6946     		mov	r1, sp
 22761 0006 6420     		movs	r0, #100
 22762              	.LVL1758:
1416:src/xeq.c     **** }
 22763              		.loc 1 1416 9 view .LVU5909
 22764 0008 FFF7FEFF 		bl	get_reg_n_int_sgn
 22765              	.LVL1759:
 22766              	.LBE3160:
 22767              	.LBE3159:
4174:src/xeq.c     **** 		decNumber x;
 22768              		.loc 1 4174 6 view .LVU5910
 22769 000c 1B4B     		ldr	r3, .L1629
 22770 000e 1B68     		ldr	r3, [r3]
 22771 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4174:src/xeq.c     **** 		decNumber x;
 22772              		.loc 1 4174 5 view .LVU5911
 22773 0014 13F00104 		ands	r4, r3, #1
 22774              	.LBB3162:
 22775              	.LBB3161:
1416:src/xeq.c     **** }
 22776              		.loc 1 1416 9 view .LVU5912
 22777 0018 0646     		mov	r6, r0
 22778 001a 0D46     		mov	r5, r1
 22779              	.LVL1760:
1416:src/xeq.c     **** }
 22780              		.loc 1 1416 9 view .LVU5913
 22781              	.LBE3161:
 22782              	.LBE3162:
4174:src/xeq.c     **** 		decNumber x;
 22783              		.loc 1 4174 2 is_stmt 1 view .LVU5914
4174:src/xeq.c     **** 		decNumber x;
 22784              		.loc 1 4174 5 is_stmt 0 view .LVU5915
 22785 001c 11D0     		beq	.L1620
 22786 001e 009B     		ldr	r3, [sp]
 22787              	.LVL1761:
 22788              	.L1621:
4184:src/xeq.c     **** }
 22789              		.loc 1 4184 2 is_stmt 1 view .LVU5916
 22790 0020 23B1     		cbz	r3, .L1628
 22791              	.L1626:
4184:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 597


 22792              		.loc 1 4184 2 is_stmt 0 view .LVU5917
 22793 0022 0020     		movs	r0, #0
 22794 0024 FFF7FEFF 		bl	fin_tst
 22795              	.LVL1762:
4185:src/xeq.c     **** 
 22796              		.loc 1 4185 1 view .LVU5918
 22797 0028 0AB0     		add	sp, sp, #40
 22798              		.cfi_remember_state
 22799              		.cfi_def_cfa_offset 16
 22800              		@ sp needed
 22801 002a 70BD     		pop	{r4, r5, r6, pc}
 22802              	.L1628:
 22803              		.cfi_restore_state
4184:src/xeq.c     **** }
 22804              		.loc 1 4184 22 discriminator 1 view .LVU5919
 22805 002c 2946     		mov	r1, r5
 22806 002e 3046     		mov	r0, r6
 22807 0030 FFF7FEFF 		bl	isPrime
 22808              	.LVL1763:
4184:src/xeq.c     **** }
 22809              		.loc 1 4184 2 discriminator 1 view .LVU5920
 22810 0034 0038     		subs	r0, r0, #0
 22811 0036 18BF     		it	ne
 22812 0038 0120     		movne	r0, #1
 22813 003a FFF7FEFF 		bl	fin_tst
 22814              	.LVL1764:
4185:src/xeq.c     **** 
 22815              		.loc 1 4185 1 discriminator 1 view .LVU5921
 22816 003e 0AB0     		add	sp, sp, #40
 22817              		.cfi_remember_state
 22818              		.cfi_def_cfa_offset 16
 22819              		@ sp needed
 22820 0040 70BD     		pop	{r4, r5, r6, pc}
 22821              	.LVL1765:
 22822              	.L1620:
 22823              		.cfi_restore_state
 22824              	.LBB3163:
4175:src/xeq.c     **** 
 22825              		.loc 1 4175 3 is_stmt 1 view .LVU5922
4177:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
 22826              		.loc 1 4177 3 view .LVU5923
 22827              	.LBB3164:
 22828              	.LBI3164:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22829              		.loc 1 815 12 view .LVU5924
 22830              	.LBB3165:
 816:src/xeq.c     **** }
 22831              		.loc 1 816 2 view .LVU5925
 816:src/xeq.c     **** }
 22832              		.loc 1 816 9 is_stmt 0 view .LVU5926
 22833 0042 01A8     		add	r0, sp, #4
 22834              	.LVL1766:
 816:src/xeq.c     **** }
 22835              		.loc 1 816 9 view .LVU5927
 22836 0044 6421     		movs	r1, #100
 22837 0046 FFF7FEFF 		bl	getRegister
 22838              	.LVL1767:
ARM GAS  /tmp/ccQlyisH.s 			page 598


 816:src/xeq.c     **** }
 22839              		.loc 1 816 9 view .LVU5928
 22840              	.LBE3165:
 22841              	.LBE3164:
4178:src/xeq.c     **** 			sgn = 1; // not prime
 22842              		.loc 1 4178 3 is_stmt 1 view .LVU5929
4178:src/xeq.c     **** 			sgn = 1; // not prime
 22843              		.loc 1 4178 6 is_stmt 0 view .LVU5930
 22844 004a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 22845 004e 13F0700F 		tst	r3, #112
 22846 0052 06D0     		beq	.L1622
4179:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22847              		.loc 1 4179 4 is_stmt 1 view .LVU5931
4179:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22848              		.loc 1 4179 8 is_stmt 0 view .LVU5932
 22849 0054 0123     		movs	r3, #1
 22850              	.LBE3163:
4184:src/xeq.c     **** }
 22851              		.loc 1 4184 2 view .LVU5933
 22852 0056 2046     		mov	r0, r4
 22853              	.LBB3166:
4179:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22854              		.loc 1 4179 8 view .LVU5934
 22855 0058 0093     		str	r3, [sp]
4179:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22856              		.loc 1 4179 8 view .LVU5935
 22857              	.LBE3166:
4184:src/xeq.c     **** }
 22858              		.loc 1 4184 2 is_stmt 1 view .LVU5936
 22859 005a FFF7FEFF 		bl	fin_tst
 22860              	.LVL1768:
4185:src/xeq.c     **** 
 22861              		.loc 1 4185 1 is_stmt 0 view .LVU5937
 22862 005e 0AB0     		add	sp, sp, #40
 22863              		.cfi_remember_state
 22864              		.cfi_def_cfa_offset 16
 22865              		@ sp needed
 22866 0060 70BD     		pop	{r4, r5, r6, pc}
 22867              	.L1622:
 22868              		.cfi_restore_state
 22869              	.LBB3167:
4180:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22870              		.loc 1 4180 8 is_stmt 1 view .LVU5938
4180:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22871              		.loc 1 4180 12 is_stmt 0 view .LVU5939
 22872 0062 0749     		ldr	r1, .L1629+4
 22873 0064 01A8     		add	r0, sp, #4
 22874 0066 FFF7FEFF 		bl	dn_lt
 22875              	.LVL1769:
 22876 006a 009B     		ldr	r3, [sp]
4180:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22877              		.loc 1 4180 11 view .LVU5940
 22878 006c 0028     		cmp	r0, #0
 22879 006e D7D1     		bne	.L1621
4182:src/xeq.c     **** 	}
 22880              		.loc 1 4182 4 is_stmt 1 view .LVU5941
 22881              	.LVL1770:
ARM GAS  /tmp/ccQlyisH.s 			page 599


4182:src/xeq.c     **** 	}
 22882              		.loc 1 4182 6 is_stmt 0 view .LVU5942
 22883 0070 4FF0FF36 		mov	r6, #-1
 22884 0074 3546     		mov	r5, r6
4182:src/xeq.c     **** 	}
 22885              		.loc 1 4182 6 view .LVU5943
 22886              	.LBE3167:
4184:src/xeq.c     **** }
 22887              		.loc 1 4184 2 is_stmt 1 view .LVU5944
 22888 0076 002B     		cmp	r3, #0
 22889 0078 D3D1     		bne	.L1626
 22890 007a D7E7     		b	.L1628
 22891              	.L1630:
 22892              		.align	2
 22893              	.L1629:
 22894 007c 00000000 		.word	main_ram
 22895 0080 00000000 		.word	const_2pow64
 22896              		.cfi_endproc
 22897              	.LFE222:
 22899              		.section	.text.isInfinite,"ax",%progbits
 22900              		.align	1
 22901              		.p2align 2,,3
 22902              		.global	isInfinite
 22903              		.syntax unified
 22904              		.thumb
 22905              		.thumb_func
 22906              		.fpu fpv4-sp-d16
 22908              	isInfinite:
 22909              	.LVL1771:
 22910              	.LFB223:
4189:src/xeq.c     **** 	decNumber x;
 22911              		.loc 1 4189 32 view -0
 22912              		.cfi_startproc
 22913              		@ args = 0, pretend = 0, frame = 40
 22914              		@ frame_needed = 0, uses_anonymous_args = 0
4190:src/xeq.c     **** 
 22915              		.loc 1 4190 2 view .LVU5946
4192:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
 22916              		.loc 1 4192 2 view .LVU5947
4189:src/xeq.c     **** 	decNumber x;
 22917              		.loc 1 4189 32 is_stmt 0 view .LVU5948
 22918 0000 00B5     		push	{lr}
 22919              		.cfi_def_cfa_offset 4
 22920              		.cfi_offset 14, -4
 22921 0002 8BB0     		sub	sp, sp, #44
 22922              		.cfi_def_cfa_offset 48
 22923              	.LVL1772:
 22924              	.LBB3168:
 22925              	.LBI3168:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22926              		.loc 1 815 12 is_stmt 1 view .LVU5949
 22927              	.LBB3169:
 816:src/xeq.c     **** }
 22928              		.loc 1 816 2 view .LVU5950
 816:src/xeq.c     **** }
 22929              		.loc 1 816 9 is_stmt 0 view .LVU5951
 22930 0004 6421     		movs	r1, #100
ARM GAS  /tmp/ccQlyisH.s 			page 600


 22931 0006 01A8     		add	r0, sp, #4
 22932              	.LVL1773:
 816:src/xeq.c     **** }
 22933              		.loc 1 816 9 view .LVU5952
 22934 0008 FFF7FEFF 		bl	getRegister
 22935              	.LVL1774:
 816:src/xeq.c     **** }
 22936              		.loc 1 816 9 view .LVU5953
 22937              	.LBE3169:
 22938              	.LBE3168:
4193:src/xeq.c     **** }
 22939              		.loc 1 4193 2 is_stmt 1 view .LVU5954
4193:src/xeq.c     **** }
 22940              		.loc 1 4193 10 is_stmt 0 view .LVU5955
 22941 000c 074B     		ldr	r3, .L1635
 22942 000e 1B68     		ldr	r3, [r3]
 22943 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4193:src/xeq.c     **** }
 22944              		.loc 1 4193 2 view .LVU5956
 22945 0014 DB07     		lsls	r3, r3, #31
 22946 0016 56BF     		itet	pl
 22947 0018 9DF80C00 		ldrbpl	r0, [sp, #12]	@ zero_extendqisi2
 22948 001c 0020     		movmi	r0, #0
 22949 001e C0F38010 		ubfxpl	r0, r0, #6, #1
 22950 0022 FFF7FEFF 		bl	fin_tst
 22951              	.LVL1775:
4194:src/xeq.c     **** 
 22952              		.loc 1 4194 1 view .LVU5957
 22953 0026 0BB0     		add	sp, sp, #44
 22954              		.cfi_def_cfa_offset 4
 22955              		@ sp needed
 22956 0028 5DF804FB 		ldr	pc, [sp], #4
 22957              	.L1636:
 22958              		.align	2
 22959              	.L1635:
 22960 002c 00000000 		.word	main_ram
 22961              		.cfi_endproc
 22962              	.LFE223:
 22964              		.section	.text.isNan,"ax",%progbits
 22965              		.align	1
 22966              		.p2align 2,,3
 22967              		.global	isNan
 22968              		.syntax unified
 22969              		.thumb
 22970              		.thumb_func
 22971              		.fpu fpv4-sp-d16
 22973              	isNan:
 22974              	.LVL1776:
 22975              	.LFB224:
4200:src/xeq.c     **** 	decNumber x;
 22976              		.loc 1 4200 27 is_stmt 1 view -0
 22977              		.cfi_startproc
 22978              		@ args = 0, pretend = 0, frame = 40
 22979              		@ frame_needed = 0, uses_anonymous_args = 0
4201:src/xeq.c     **** 
 22980              		.loc 1 4201 2 view .LVU5959
4203:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
ARM GAS  /tmp/ccQlyisH.s 			page 601


 22981              		.loc 1 4203 2 view .LVU5960
4200:src/xeq.c     **** 	decNumber x;
 22982              		.loc 1 4200 27 is_stmt 0 view .LVU5961
 22983 0000 00B5     		push	{lr}
 22984              		.cfi_def_cfa_offset 4
 22985              		.cfi_offset 14, -4
 22986 0002 8BB0     		sub	sp, sp, #44
 22987              		.cfi_def_cfa_offset 48
 22988              	.LVL1777:
 22989              	.LBB3170:
 22990              	.LBI3170:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22991              		.loc 1 815 12 is_stmt 1 view .LVU5962
 22992              	.LBB3171:
 816:src/xeq.c     **** }
 22993              		.loc 1 816 2 view .LVU5963
 816:src/xeq.c     **** }
 22994              		.loc 1 816 9 is_stmt 0 view .LVU5964
 22995 0004 6421     		movs	r1, #100
 22996 0006 01A8     		add	r0, sp, #4
 22997              	.LVL1778:
 816:src/xeq.c     **** }
 22998              		.loc 1 816 9 view .LVU5965
 22999 0008 FFF7FEFF 		bl	getRegister
 23000              	.LVL1779:
 816:src/xeq.c     **** }
 23001              		.loc 1 816 9 view .LVU5966
 23002              	.LBE3171:
 23003              	.LBE3170:
4204:src/xeq.c     **** }
 23004              		.loc 1 4204 2 is_stmt 1 view .LVU5967
4204:src/xeq.c     **** }
 23005              		.loc 1 4204 10 is_stmt 0 view .LVU5968
 23006 000c 0B4B     		ldr	r3, .L1641
 23007 000e 1B68     		ldr	r3, [r3]
 23008 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4204:src/xeq.c     **** }
 23009              		.loc 1 4204 2 view .LVU5969
 23010 0014 DB07     		lsls	r3, r3, #31
 23011 0016 0BD4     		bmi	.L1639
4204:src/xeq.c     **** }
 23012              		.loc 1 4204 2 discriminator 1 view .LVU5970
 23013 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 23014 001c 13F0300F 		tst	r3, #48
 23015 0020 14BF     		ite	ne
 23016 0022 0120     		movne	r0, #1
 23017 0024 0020     		moveq	r0, #0
 23018 0026 FFF7FEFF 		bl	fin_tst
 23019              	.LVL1780:
4205:src/xeq.c     **** 
 23020              		.loc 1 4205 1 discriminator 1 view .LVU5971
 23021 002a 0BB0     		add	sp, sp, #44
 23022              		.cfi_remember_state
 23023              		.cfi_def_cfa_offset 4
 23024              		@ sp needed
 23025 002c 5DF804FB 		ldr	pc, [sp], #4
 23026              	.L1639:
ARM GAS  /tmp/ccQlyisH.s 			page 602


 23027              		.cfi_restore_state
4204:src/xeq.c     **** }
 23028              		.loc 1 4204 2 view .LVU5972
 23029 0030 0020     		movs	r0, #0
 23030 0032 FFF7FEFF 		bl	fin_tst
 23031              	.LVL1781:
4205:src/xeq.c     **** 
 23032              		.loc 1 4205 1 view .LVU5973
 23033 0036 0BB0     		add	sp, sp, #44
 23034              		.cfi_def_cfa_offset 4
 23035              		@ sp needed
 23036 0038 5DF804FB 		ldr	pc, [sp], #4
 23037              	.L1642:
 23038              		.align	2
 23039              	.L1641:
 23040 003c 00000000 		.word	main_ram
 23041              		.cfi_endproc
 23042              	.LFE224:
 23044              		.section	.text.isSpecial,"ax",%progbits
 23045              		.align	1
 23046              		.p2align 2,,3
 23047              		.global	isSpecial
 23048              		.syntax unified
 23049              		.thumb
 23050              		.thumb_func
 23051              		.fpu fpv4-sp-d16
 23053              	isSpecial:
 23054              	.LVL1782:
 23055              	.LFB225:
4207:src/xeq.c     **** 	decNumber x;
 23056              		.loc 1 4207 31 is_stmt 1 view -0
 23057              		.cfi_startproc
 23058              		@ args = 0, pretend = 0, frame = 40
 23059              		@ frame_needed = 0, uses_anonymous_args = 0
4208:src/xeq.c     **** 
 23060              		.loc 1 4208 2 view .LVU5975
4210:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
 23061              		.loc 1 4210 2 view .LVU5976
4207:src/xeq.c     **** 	decNumber x;
 23062              		.loc 1 4207 31 is_stmt 0 view .LVU5977
 23063 0000 00B5     		push	{lr}
 23064              		.cfi_def_cfa_offset 4
 23065              		.cfi_offset 14, -4
 23066 0002 8BB0     		sub	sp, sp, #44
 23067              		.cfi_def_cfa_offset 48
 23068              	.LVL1783:
 23069              	.LBB3172:
 23070              	.LBI3172:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23071              		.loc 1 815 12 is_stmt 1 view .LVU5978
 23072              	.LBB3173:
 816:src/xeq.c     **** }
 23073              		.loc 1 816 2 view .LVU5979
 816:src/xeq.c     **** }
 23074              		.loc 1 816 9 is_stmt 0 view .LVU5980
 23075 0004 6421     		movs	r1, #100
 23076 0006 01A8     		add	r0, sp, #4
ARM GAS  /tmp/ccQlyisH.s 			page 603


 23077              	.LVL1784:
 816:src/xeq.c     **** }
 23078              		.loc 1 816 9 view .LVU5981
 23079 0008 FFF7FEFF 		bl	getRegister
 23080              	.LVL1785:
 816:src/xeq.c     **** }
 23081              		.loc 1 816 9 view .LVU5982
 23082              	.LBE3173:
 23083              	.LBE3172:
4211:src/xeq.c     **** }
 23084              		.loc 1 4211 2 is_stmt 1 view .LVU5983
4211:src/xeq.c     **** }
 23085              		.loc 1 4211 10 is_stmt 0 view .LVU5984
 23086 000c 0B4B     		ldr	r3, .L1647
 23087 000e 1B68     		ldr	r3, [r3]
 23088 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4211:src/xeq.c     **** }
 23089              		.loc 1 4211 2 view .LVU5985
 23090 0014 DB07     		lsls	r3, r3, #31
 23091 0016 0BD4     		bmi	.L1645
4211:src/xeq.c     **** }
 23092              		.loc 1 4211 2 discriminator 1 view .LVU5986
 23093 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 23094 001c 13F0700F 		tst	r3, #112
 23095 0020 14BF     		ite	ne
 23096 0022 0120     		movne	r0, #1
 23097 0024 0020     		moveq	r0, #0
 23098 0026 FFF7FEFF 		bl	fin_tst
 23099              	.LVL1786:
4212:src/xeq.c     **** 
 23100              		.loc 1 4212 1 discriminator 1 view .LVU5987
 23101 002a 0BB0     		add	sp, sp, #44
 23102              		.cfi_remember_state
 23103              		.cfi_def_cfa_offset 4
 23104              		@ sp needed
 23105 002c 5DF804FB 		ldr	pc, [sp], #4
 23106              	.L1645:
 23107              		.cfi_restore_state
4211:src/xeq.c     **** }
 23108              		.loc 1 4211 2 view .LVU5988
 23109 0030 0020     		movs	r0, #0
 23110 0032 FFF7FEFF 		bl	fin_tst
 23111              	.LVL1787:
4212:src/xeq.c     **** 
 23112              		.loc 1 4212 1 view .LVU5989
 23113 0036 0BB0     		add	sp, sp, #44
 23114              		.cfi_def_cfa_offset 4
 23115              		@ sp needed
 23116 0038 5DF804FB 		ldr	pc, [sp], #4
 23117              	.L1648:
 23118              		.align	2
 23119              	.L1647:
 23120 003c 00000000 		.word	main_ram
 23121              		.cfi_endproc
 23122              	.LFE225:
 23124              		.section	.text.op_entryp,"ax",%progbits
 23125              		.align	1
ARM GAS  /tmp/ccQlyisH.s 			page 604


 23126              		.p2align 2,,3
 23127              		.global	op_entryp
 23128              		.syntax unified
 23129              		.thumb
 23130              		.thumb_func
 23131              		.fpu fpv4-sp-d16
 23133              	op_entryp:
 23134              	.LVL1788:
 23135              	.LFB226:
4214:src/xeq.c     **** 	fin_tst(State.entryp);
 23136              		.loc 1 4214 31 is_stmt 1 view -0
 23137              		.cfi_startproc
 23138              		@ args = 0, pretend = 0, frame = 0
 23139              		@ frame_needed = 0, uses_anonymous_args = 0
 23140              		@ link register save eliminated.
4215:src/xeq.c     **** }
 23141              		.loc 1 4215 2 view .LVU5991
4215:src/xeq.c     **** }
 23142              		.loc 1 4215 15 is_stmt 0 view .LVU5992
 23143 0000 034B     		ldr	r3, .L1650
 23144 0002 1B68     		ldr	r3, [r3]
 23145 0004 93F8DD07 		ldrb	r0, [r3, #2013]	@ zero_extendqisi2
 23146              	.LVL1789:
4215:src/xeq.c     **** }
 23147              		.loc 1 4215 2 view .LVU5993
 23148 0008 C0F30010 		ubfx	r0, r0, #4, #1
 23149 000c FFF7FEBF 		b	fin_tst
 23150              	.LVL1790:
 23151              	.L1651:
 23152              		.align	2
 23153              	.L1650:
 23154 0010 00000000 		.word	main_ram
 23155              		.cfi_endproc
 23156              	.LFE226:
 23158              		.section	.text.reg_decode,"ax",%progbits
 23159              		.align	1
 23160              		.p2align 2,,3
 23161              		.global	reg_decode
 23162              		.syntax unified
 23163              		.thumb
 23164              		.thumb_func
 23165              		.fpu fpv4-sp-d16
 23167              	reg_decode:
 23168              	.LVL1791:
 23169              	.LFB227:
4219:src/xeq.c     **** 	decNumber x, y;
 23170              		.loc 1 4219 51 is_stmt 1 view -0
 23171              		.cfi_startproc
 23172              		@ args = 0, pretend = 0, frame = 80
 23173              		@ frame_needed = 0, uses_anonymous_args = 0
4220:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
 23174              		.loc 1 4220 2 view .LVU5995
4221:src/xeq.c     **** 
 23175              		.loc 1 4221 2 view .LVU5996
4223:src/xeq.c     **** 		bad_mode_error();
 23176              		.loc 1 4223 2 view .LVU5997
4219:src/xeq.c     **** 	decNumber x, y;
ARM GAS  /tmp/ccQlyisH.s 			page 605


 23177              		.loc 1 4219 51 is_stmt 0 view .LVU5998
 23178 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 23179              		.cfi_def_cfa_offset 36
 23180              		.cfi_offset 4, -36
 23181              		.cfi_offset 5, -32
 23182              		.cfi_offset 6, -28
 23183              		.cfi_offset 7, -24
 23184              		.cfi_offset 8, -20
 23185              		.cfi_offset 9, -16
 23186              		.cfi_offset 10, -12
 23187              		.cfi_offset 11, -8
 23188              		.cfi_offset 14, -4
4223:src/xeq.c     **** 		bad_mode_error();
 23189              		.loc 1 4223 6 view .LVU5999
 23190 0004 DFF82CA2 		ldr	r10, .L1704+28
 23191 0008 DAF80040 		ldr	r4, [r10]
 23192 000c 94F8E847 		ldrb	r4, [r4, #2024]	@ zero_extendqisi2
4219:src/xeq.c     **** 	decNumber x, y;
 23193              		.loc 1 4219 51 view .LVU6000
 23194 0010 1F46     		mov	r7, r3
4223:src/xeq.c     **** 		bad_mode_error();
 23195              		.loc 1 4223 5 view .LVU6001
 23196 0012 14F00103 		ands	r3, r4, #1
 23197              	.LVL1792:
4219:src/xeq.c     **** 	decNumber x, y;
 23198              		.loc 1 4219 51 view .LVU6002
 23199 0016 95B0     		sub	sp, sp, #84
 23200              		.cfi_def_cfa_offset 120
4223:src/xeq.c     **** 		bad_mode_error();
 23201              		.loc 1 4223 5 view .LVU6003
 23202 0018 0CD0     		beq	.L1653
4224:src/xeq.c     **** 		return 1;
 23203              		.loc 1 4224 3 is_stmt 1 view .LVU6004
 23204              	.LBB3216:
 23205              	.LBI3216:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 23206              		.loc 1 566 6 view .LVU6005
 23207              	.LBE3216:
 567:src/xeq.c     **** }
 23208              		.loc 1 567 2 view .LVU6006
 23209              	.LVL1793:
 23210              	.LBB3227:
 23211              	.LBB3217:
 23212              	.LBI3217:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23213              		.loc 1 537 5 view .LVU6007
 23214              	.LBB3218:
 538:src/xeq.c     **** 		Error = e;
 23215              		.loc 1 538 2 view .LVU6008
 538:src/xeq.c     **** 		Error = e;
 23216              		.loc 1 538 12 is_stmt 0 view .LVU6009
 23217 001a 7F4B     		ldr	r3, .L1704
 538:src/xeq.c     **** 		Error = e;
 23218              		.loc 1 538 5 view .LVU6010
 23219 001c 1A68     		ldr	r2, [r3]
 23220              	.LVL1794:
 538:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccQlyisH.s 			page 606


 23221              		.loc 1 538 5 view .LVU6011
 23222 001e 1AB1     		cbz	r2, .L1698
 23223              	.LVL1795:
 23224              	.L1681:
 538:src/xeq.c     **** 		Error = e;
 23225              		.loc 1 538 5 view .LVU6012
 23226              	.LBE3218:
 23227              	.LBE3217:
 23228              	.LBE3227:
4225:src/xeq.c     **** 	}
 23229              		.loc 1 4225 10 view .LVU6013
 23230 0020 0120     		movs	r0, #1
4297:src/xeq.c     **** 
 23231              		.loc 1 4297 1 view .LVU6014
 23232 0022 15B0     		add	sp, sp, #84
 23233              		.cfi_remember_state
 23234              		.cfi_def_cfa_offset 36
 23235              		@ sp needed
 23236 0024 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23237              	.LVL1796:
 23238              	.L1698:
 23239              		.cfi_restore_state
 23240              	.LBB3228:
 23241              	.LBB3225:
 23242              	.LBB3223:
 23243              	.LBB3219:
 23244              	.LBI3219:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23245              		.loc 1 537 5 is_stmt 1 view .LVU6015
 23246              	.LBB3220:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23247              		.loc 1 539 3 view .LVU6016
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23248              		.loc 1 539 9 is_stmt 0 view .LVU6017
 23249 0028 0D22     		movs	r2, #13
 23250              	.LBE3220:
 23251              	.LBE3219:
 23252              	.LBE3223:
 23253              	.LBE3225:
 23254              	.LBE3228:
4225:src/xeq.c     **** 	}
 23255              		.loc 1 4225 10 view .LVU6018
 23256 002a 0120     		movs	r0, #1
 23257              	.LVL1797:
 23258              	.LBB3229:
 23259              	.LBB3226:
 23260              	.LBB3224:
 23261              	.LBB3222:
 23262              	.LBB3221:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23263              		.loc 1 539 9 view .LVU6019
 23264 002c 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 23265              		.loc 1 540 3 is_stmt 1 view .LVU6020
 23266              	.LBE3221:
 23267              	.LBE3222:
 23268              	.LBE3224:
ARM GAS  /tmp/ccQlyisH.s 			page 607


 23269              	.LBE3226:
 23270              	.LBE3229:
4297:src/xeq.c     **** 
 23271              		.loc 1 4297 1 is_stmt 0 view .LVU6021
 23272 002e 15B0     		add	sp, sp, #84
 23273              		.cfi_remember_state
 23274              		.cfi_def_cfa_offset 36
 23275              		@ sp needed
 23276 0030 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23277              	.LVL1798:
 23278              	.L1653:
 23279              		.cfi_restore_state
4297:src/xeq.c     **** 
 23280              		.loc 1 4297 1 view .LVU6022
 23281 0034 8346     		mov	fp, r0
 23282              	.LVL1799:
4297:src/xeq.c     **** 
 23283              		.loc 1 4297 1 view .LVU6023
 23284 0036 8946     		mov	r9, r1
 23285              	.LVL1800:
 23286              	.LBB3230:
 23287              	.LBB3231:
 23288              	.LBB3232:
 23289              	.LBB3233:
 816:src/xeq.c     **** }
 23290              		.loc 1 816 9 view .LVU6024
 23291 0038 02A8     		add	r0, sp, #8
 23292              	.LVL1801:
 816:src/xeq.c     **** }
 23293              		.loc 1 816 9 view .LVU6025
 23294 003a 6421     		movs	r1, #100
 23295              	.LVL1802:
 816:src/xeq.c     **** }
 23296              		.loc 1 816 9 view .LVU6026
 23297 003c 0193     		str	r3, [sp, #4]
 23298 003e 9046     		mov	r8, r2
 23299              	.LVL1803:
 816:src/xeq.c     **** }
 23300              		.loc 1 816 9 view .LVU6027
 23301              	.LBE3233:
 23302              	.LBE3232:
 23303              	.LBE3231:
 23304              	.LBI3230:
4219:src/xeq.c     **** 	decNumber x, y;
 23305              		.loc 1 4219 5 is_stmt 1 view .LVU6028
 23306              	.LBB3313:
4227:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
 23307              		.loc 1 4227 2 view .LVU6029
 23308              	.LBB3235:
 23309              	.LBI3232:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23310              		.loc 1 815 12 view .LVU6030
 23311              	.LBB3234:
 816:src/xeq.c     **** }
 23312              		.loc 1 816 2 view .LVU6031
 816:src/xeq.c     **** }
 23313              		.loc 1 816 9 is_stmt 0 view .LVU6032
ARM GAS  /tmp/ccQlyisH.s 			page 608


 23314 0040 FFF7FEFF 		bl	getRegister
 23315              	.LVL1804:
 816:src/xeq.c     **** }
 23316              		.loc 1 816 9 view .LVU6033
 23317              	.LBE3234:
 23318              	.LBE3235:
4228:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
 23319              		.loc 1 4228 2 is_stmt 1 view .LVU6034
 23320 0044 0522     		movs	r2, #5
 23321 0046 02A9     		add	r1, sp, #8
 23322 0048 0BA8     		add	r0, sp, #44
 23323 004a FFF7FEFF 		bl	dn_mulpow10
 23324              	.LVL1805:
4229:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
 23325              		.loc 1 4229 2 view .LVU6035
 23326 004e 0BA9     		add	r1, sp, #44
 23327 0050 02A8     		add	r0, sp, #8
 23328 0052 FFF7FEFF 		bl	decNumberTrunc
 23329              	.LVL1806:
4230:src/xeq.c     **** 
 23330              		.loc 1 4230 2 view .LVU6036
4230:src/xeq.c     **** 
 23331              		.loc 1 4230 9 is_stmt 0 view .LVU6037
 23332 0056 02A8     		add	r0, sp, #8
 23333 0058 FFF7FEFF 		bl	dn_to_int
 23334              	.LVL1807:
4232:src/xeq.c     **** 		if (!flash)
 23335              		.loc 1 4232 2 is_stmt 1 view .LVU6038
4232:src/xeq.c     **** 		if (!flash)
 23336              		.loc 1 4232 5 is_stmt 0 view .LVU6039
 23337 005c 041E     		subs	r4, r0, #0
 23338 005e 35DB     		blt	.L1655
 23339              	.LVL1808:
4240:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23340              		.loc 1 4240 2 is_stmt 1 view .LVU6040
4240:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23341              		.loc 1 4240 8 is_stmt 0 view .LVU6041
 23342 0060 6E4A     		ldr	r2, .L1704+4
4242:src/xeq.c     **** 	rsrc /= 100;			// sss
 23343              		.loc 1 4242 6 view .LVU6042
 23344 0062 6F4E     		ldr	r6, .L1704+8
4246:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23345              		.loc 1 4246 9 view .LVU6043
 23346 0064 6F48     		ldr	r0, .L1704+12
 23347              	.LVL1809:
4240:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23348              		.loc 1 4240 8 view .LVU6044
 23349 0066 82FB0432 		smull	r3, r2, r2, r4
 23350 006a E517     		asrs	r5, r4, #31
4241:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23351              		.loc 1 4241 7 view .LVU6045
 23352 006c C5EBA211 		rsb	r1, r5, r2, asr #6
4242:src/xeq.c     **** 	rsrc /= 100;			// sss
 23353              		.loc 1 4242 6 view .LVU6046
 23354 0070 A6FB0136 		umull	r3, r6, r6, r1
4240:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23355              		.loc 1 4240 8 view .LVU6047
ARM GAS  /tmp/ccQlyisH.s 			page 609


 23356 0074 4FF47A77 		mov	r7, #1000
 23357              	.LVL1810:
4242:src/xeq.c     **** 	rsrc /= 100;			// sss
 23358              		.loc 1 4242 6 view .LVU6048
 23359 0078 7209     		lsrs	r2, r6, #5
4240:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23360              		.loc 1 4240 8 view .LVU6049
 23361 007a 07FB1145 		mls	r5, r7, r1, r4
 23362              	.LVL1811:
4241:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23363              		.loc 1 4241 2 is_stmt 1 view .LVU6050
4242:src/xeq.c     **** 	rsrc /= 100;			// sss
 23364              		.loc 1 4242 2 view .LVU6051
4246:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23365              		.loc 1 4246 9 is_stmt 0 view .LVU6052
 23366 007e 8442     		cmp	r4, r0
4242:src/xeq.c     **** 	rsrc /= 100;			// sss
 23367              		.loc 1 4242 6 view .LVU6053
 23368 0080 4FF06407 		mov	r7, #100
4243:src/xeq.c     **** 
 23369              		.loc 1 4243 7 view .LVU6054
 23370 0084 1646     		mov	r6, r2
4242:src/xeq.c     **** 	rsrc /= 100;			// sss
 23371              		.loc 1 4242 6 view .LVU6055
 23372 0086 07FB1212 		mls	r2, r7, r2, r1
 23373              	.LVL1812:
4243:src/xeq.c     **** 
 23374              		.loc 1 4243 2 is_stmt 1 view .LVU6056
4245:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23375              		.loc 1 4245 2 view .LVU6057
4246:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23376              		.loc 1 4246 9 is_stmt 0 view .LVU6058
 23377 008a 59DA     		bge	.L1656
 23378 008c 6649     		ldr	r1, .L1704+16
 23379 008e 019B     		ldr	r3, [sp, #4]
 23380 0090 8C42     		cmp	r4, r1
 23381 0092 7ADA     		bge	.L1683
 23382              	.LBB3236:
 23383              	.LBI3236:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 23384              		.loc 1 250 14 is_stmt 1 view .LVU6059
 23385              	.LBE3236:
 23386              	.LBE3313:
 23387              	.LBE3230:
 251:src/xeq.c     **** }
 23388              		.loc 1 251 2 view .LVU6060
 23389              	.LVL1813:
 23390              	.LBB3320:
 23391              	.LBB3314:
 23392              	.LBB3242:
 23393              	.LBB3237:
 23394              	.LBI3237:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 23395              		.loc 1 238 14 view .LVU6061
 23396              	.LBB3238:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23397              		.loc 1 239 2 view .LVU6062
ARM GAS  /tmp/ccQlyisH.s 			page 610


 23398              	.LBB3239:
 23399              	.LBI3239:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23400              		.loc 1 1087 5 view .LVU6063
 23401              	.LBB3240:
1088:src/xeq.c     **** }
 23402              		.loc 1 1088 2 view .LVU6064
1088:src/xeq.c     **** }
 23403              		.loc 1 1088 12 is_stmt 0 view .LVU6065
 23404 0094 DAF80010 		ldr	r1, [r10]
1088:src/xeq.c     **** }
 23405              		.loc 1 1088 24 view .LVU6066
 23406 0098 B1F8E807 		ldrh	r0, [r1, #2024]
 23407 009c 44F20103 		movw	r3, #16385
 23408              	.LBE3240:
 23409              	.LBE3239:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23410              		.loc 1 239 5 view .LVU6067
 23411 00a0 0340     		ands	r3, r3, r0
 23412 00a2 B3F5804F 		cmp	r3, #16384
 23413              	.LBB3241:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23414              		.loc 1 240 24 view .LVU6068
 23415 00a6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23416              		.loc 1 240 3 is_stmt 1 view .LVU6069
 241:src/xeq.c     **** 	}
 23417              		.loc 1 241 3 view .LVU6070
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23418              		.loc 1 240 13 is_stmt 0 view .LVU6071
 23419 00aa 04BF     		itt	eq
 23420 00ac 0C3B     		subeq	r3, r3, #12
 241:src/xeq.c     **** 	}
 23421              		.loc 1 241 67 view .LVU6072
 23422 00ae 5B10     		asreq	r3, r3, #1
 23423              	.LVL1814:
 23424              	.L1662:
 241:src/xeq.c     **** 	}
 23425              		.loc 1 241 67 view .LVU6073
 23426              	.LBE3241:
 23427              	.LBE3238:
 23428              	.LBE3237:
 23429              	.LBE3242:
4249:src/xeq.c     **** 		goto range_error;
 23430              		.loc 1 4249 5 view .LVU6074
 23431 00b0 B342     		cmp	r3, r6
 23432 00b2 4FF00007 		mov	r7, #0
 23433              	.LVL1815:
4249:src/xeq.c     **** 		goto range_error;
 23434              		.loc 1 4249 2 is_stmt 1 view .LVU6075
4249:src/xeq.c     **** 		goto range_error;
 23435              		.loc 1 4249 5 is_stmt 0 view .LVU6076
 23436 00b6 22DC     		bgt	.L1699
 23437              	.LVL1816:
 23438              	.L1658:
 23439              	.LDL1:
4295:src/xeq.c     **** 	return 1;
ARM GAS  /tmp/ccQlyisH.s 			page 611


 23440              		.loc 1 4295 2 is_stmt 1 view .LVU6077
 23441              	.LBB3243:
 23442              	.LBI3243:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23443              		.loc 1 537 5 view .LVU6078
 23444              	.LBB3244:
 538:src/xeq.c     **** 		Error = e;
 23445              		.loc 1 538 2 view .LVU6079
 538:src/xeq.c     **** 		Error = e;
 23446              		.loc 1 538 12 is_stmt 0 view .LVU6080
 23447 00b8 574B     		ldr	r3, .L1704
 538:src/xeq.c     **** 		Error = e;
 23448              		.loc 1 538 5 view .LVU6081
 23449 00ba 1A68     		ldr	r2, [r3]
 23450 00bc 002A     		cmp	r2, #0
 23451 00be AFD1     		bne	.L1681
 23452              	.LVL1817:
 23453              	.LBB3245:
 23454              	.LBI3245:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23455              		.loc 1 537 5 is_stmt 1 view .LVU6082
 23456              	.LBB3246:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23457              		.loc 1 539 3 view .LVU6083
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23458              		.loc 1 539 9 is_stmt 0 view .LVU6084
 23459 00c0 0822     		movs	r2, #8
 23460              	.LBE3246:
 23461              	.LBE3245:
 23462              	.LBE3244:
 23463              	.LBE3243:
4296:src/xeq.c     **** }
 23464              		.loc 1 4296 9 view .LVU6085
 23465 00c2 0120     		movs	r0, #1
 23466              	.LBB3250:
 23467              	.LBB3249:
 23468              	.LBB3248:
 23469              	.LBB3247:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23470              		.loc 1 539 9 view .LVU6086
 23471 00c4 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 23472              		.loc 1 540 3 is_stmt 1 view .LVU6087
 23473              	.LBE3247:
 23474              	.LBE3248:
 23475              	.LBE3249:
 23476              	.LBE3250:
 23477              	.LBE3314:
 23478              	.LBE3320:
4297:src/xeq.c     **** 
 23479              		.loc 1 4297 1 is_stmt 0 view .LVU6088
 23480 00c6 15B0     		add	sp, sp, #84
 23481              		.cfi_remember_state
 23482              		.cfi_def_cfa_offset 36
 23483              		@ sp needed
 23484 00c8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23485              	.LVL1818:
ARM GAS  /tmp/ccQlyisH.s 			page 612


 23486              	.L1655:
 23487              		.cfi_restore_state
 23488              	.LBB3321:
 23489              	.LBB3315:
4233:src/xeq.c     **** 			goto range_error;
 23490              		.loc 1 4233 3 is_stmt 1 view .LVU6089
4233:src/xeq.c     **** 			goto range_error;
 23491              		.loc 1 4233 6 is_stmt 0 view .LVU6090
 23492 00cc 002F     		cmp	r7, #0
 23493 00ce F3D0     		beq	.L1658
4235:src/xeq.c     **** 	}
 23494              		.loc 1 4235 3 is_stmt 1 view .LVU6091
4240:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23495              		.loc 1 4240 8 is_stmt 0 view .LVU6092
 23496 00d0 524D     		ldr	r5, .L1704+4
4245:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23497              		.loc 1 4245 30 view .LVU6093
 23498 00d2 564A     		ldr	r2, .L1704+20
4242:src/xeq.c     **** 	rsrc /= 100;			// sss
 23499              		.loc 1 4242 6 view .LVU6094
 23500 00d4 524E     		ldr	r6, .L1704+8
4235:src/xeq.c     **** 	}
 23501              		.loc 1 4235 8 view .LVU6095
 23502 00d6 6442     		rsbs	r4, r4, #0
 23503              	.LVL1819:
4240:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23504              		.loc 1 4240 2 is_stmt 1 view .LVU6096
4240:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23505              		.loc 1 4240 8 is_stmt 0 view .LVU6097
 23506 00d8 A5FB0435 		umull	r3, r5, r5, r4
4241:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23507              		.loc 1 4241 7 view .LVU6098
 23508 00dc AB09     		lsrs	r3, r5, #6
4242:src/xeq.c     **** 	rsrc /= 100;			// sss
 23509              		.loc 1 4242 6 view .LVU6099
 23510 00de A6FB0316 		umull	r1, r6, r6, r3
4240:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23511              		.loc 1 4240 8 view .LVU6100
 23512 00e2 4FF47A70 		mov	r0, #1000
4245:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23513              		.loc 1 4245 30 view .LVU6101
 23514 00e6 1168     		ldr	r1, [r2]
4240:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23515              		.loc 1 4240 8 view .LVU6102
 23516 00e8 00FB1345 		mls	r5, r0, r3, r4
 23517              	.LVL1820:
4241:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23518              		.loc 1 4241 2 is_stmt 1 view .LVU6103
4242:src/xeq.c     **** 	rsrc /= 100;			// sss
 23519              		.loc 1 4242 2 view .LVU6104
4242:src/xeq.c     **** 	rsrc /= 100;			// sss
 23520              		.loc 1 4242 6 is_stmt 0 view .LVU6105
 23521 00ec 7209     		lsrs	r2, r6, #5
 23522 00ee 6420     		movs	r0, #100
4243:src/xeq.c     **** 
 23523              		.loc 1 4243 7 view .LVU6106
 23524 00f0 1646     		mov	r6, r2
ARM GAS  /tmp/ccQlyisH.s 			page 613


4242:src/xeq.c     **** 	rsrc /= 100;			// sss
 23525              		.loc 1 4242 6 view .LVU6107
 23526 00f2 00FB1232 		mls	r2, r0, r2, r3
 23527              	.LVL1821:
4243:src/xeq.c     **** 
 23528              		.loc 1 4243 2 is_stmt 1 view .LVU6108
4245:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23529              		.loc 1 4245 2 view .LVU6109
4246:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23530              		.loc 1 4246 9 is_stmt 0 view .LVU6110
 23531 00f6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 23532              	.LVL1822:
 23533              	.L1659:
4249:src/xeq.c     **** 		goto range_error;
 23534              		.loc 1 4249 2 is_stmt 1 view .LVU6111
4249:src/xeq.c     **** 		goto range_error;
 23535              		.loc 1 4249 5 is_stmt 0 view .LVU6112
 23536 00fa B342     		cmp	r3, r6
 23537 00fc DCDD     		ble	.L1658
 23538              	.L1699:
4252:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 23539              		.loc 1 4252 2 is_stmt 1 view .LVU6113
4252:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 23540              		.loc 1 4252 5 is_stmt 0 view .LVU6114
 23541 00fe B8F1000F 		cmp	r8, #0
 23542 0102 25D0     		beq	.L1663
4253:src/xeq.c     **** 
 23543              		.loc 1 4253 3 is_stmt 1 view .LVU6115
4253:src/xeq.c     **** 
 23544              		.loc 1 4253 52 is_stmt 0 view .LVU6116
 23545 0104 6F2D     		cmp	r5, #111
 23546 0106 27DD     		ble	.L1664
 23547              	.LBB3251:
 23548              	.LBI3251:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 23549              		.loc 1 230 5 is_stmt 1 view .LVU6117
 23550              	.LBE3251:
 23551              	.LBE3315:
 23552              	.LBE3321:
 231:src/xeq.c     **** }
 23553              		.loc 1 231 2 view .LVU6118
 23554              	.LVL1823:
 23555              	.LBB3322:
 23556              	.LBB3316:
 23557              	.LBB3276:
 23558              	.LBB3252:
 23559              	.LBI3252:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 23560              		.loc 1 222 5 view .LVU6119
 23561              	.LBB3253:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23562              		.loc 1 223 2 view .LVU6120
 23563              	.LBB3254:
 23564              	.LBI3254:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23565              		.loc 1 1087 5 view .LVU6121
 23566              	.LBB3255:
ARM GAS  /tmp/ccQlyisH.s 			page 614


1088:src/xeq.c     **** }
 23567              		.loc 1 1088 2 view .LVU6122
1088:src/xeq.c     **** }
 23568              		.loc 1 1088 12 is_stmt 0 view .LVU6123
 23569 0108 DAF80010 		ldr	r1, [r10]
 23570              	.LVL1824:
1088:src/xeq.c     **** }
 23571              		.loc 1 1088 12 view .LVU6124
 23572              	.LBE3255:
 23573              	.LBE3254:
 224:src/xeq.c     **** }
 23574              		.loc 1 224 2 is_stmt 1 view .LVU6125
 23575              	.LBB3258:
 23576              	.LBI3258:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 23577              		.loc 1 214 5 view .LVU6126
 23578              	.LBB3259:
 215:src/xeq.c     **** }
 23579              		.loc 1 215 2 view .LVU6127
 215:src/xeq.c     **** }
 23580              		.loc 1 215 9 is_stmt 0 view .LVU6128
 23581 010c B1F9DE07 		ldrsh	r0, [r1, #2014]
 215:src/xeq.c     **** }
 23582              		.loc 1 215 57 view .LVU6129
 23583 0110 0028     		cmp	r0, #0
 23584 0112 69DB     		blt	.L1700
 23585              	.LVL1825:
 215:src/xeq.c     **** }
 23586              		.loc 1 215 57 view .LVU6130
 23587              	.LBE3259:
 23588              	.LBE3258:
 23589              	.LBE3253:
 23590              	.LBE3252:
 23591              	.LBE3276:
4255:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23592              		.loc 1 4255 3 is_stmt 1 view .LVU6131
 23593              	.LBB3277:
 23594              	.LBB3274:
 23595              	.LBB3272:
 23596              	.LBB3265:
 23597              	.LBB3260:
 23598 0114 0021     		movs	r1, #0
 23599              	.LVL1826:
4255:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23600              		.loc 1 4255 3 is_stmt 0 view .LVU6132
 23601              	.LBE3260:
 23602              	.LBE3265:
 23603              	.LBE3272:
 23604              	.LBE3274:
 23605              	.LBE3277:
4255:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23606              		.loc 1 4255 6 view .LVU6133
 23607 0116 82B3     		cbz	r2, .L1666
 23608              	.LVL1827:
 23609              	.L1667:
4274:src/xeq.c     **** 		if (rdest + num > mx_dest)
 23610              		.loc 1 4274 4 is_stmt 1 view .LVU6134
ARM GAS  /tmp/ccQlyisH.s 			page 615


4274:src/xeq.c     **** 		if (rdest + num > mx_dest)
 23611              		.loc 1 4274 12 is_stmt 0 view .LVU6135
 23612 0118 7031     		adds	r1, r1, #112
 23613              	.LVL1828:
 23614              	.L1670:
4275:src/xeq.c     **** 			goto range_error;
 23615              		.loc 1 4275 3 is_stmt 1 view .LVU6136
4275:src/xeq.c     **** 			goto range_error;
 23616              		.loc 1 4275 13 is_stmt 0 view .LVU6137
 23617 011a A818     		adds	r0, r5, r2
4275:src/xeq.c     **** 			goto range_error;
 23618              		.loc 1 4275 6 view .LVU6138
 23619 011c 8842     		cmp	r0, r1
 23620 011e CBDC     		bgt	.L1658
4278:src/xeq.c     **** 	}
 23621              		.loc 1 4278 3 is_stmt 1 view .LVU6139
4278:src/xeq.c     **** 	}
 23622              		.loc 1 4278 6 is_stmt 0 view .LVU6140
 23623 0120 C8F80050 		str	r5, [r8]
 23624 0124 B118     		adds	r1, r6, r2
 23625              	.LVL1829:
 23626              	.L1676:
4285:src/xeq.c     **** 		goto range_error;
 23627              		.loc 1 4285 2 is_stmt 1 view .LVU6141
4285:src/xeq.c     **** 		goto range_error;
 23628              		.loc 1 4285 5 is_stmt 0 view .LVU6142
 23629 0126 8B42     		cmp	r3, r1
 23630 0128 C6DB     		blt	.L1658
 23631              	.L1678:
4289:src/xeq.c     **** 	*n = num;
 23632              		.loc 1 4289 2 is_stmt 1 view .LVU6143
4289:src/xeq.c     **** 	*n = num;
 23633              		.loc 1 4289 37 is_stmt 0 view .LVU6144
 23634 012a 0FB1     		cbz	r7, .L1679
4289:src/xeq.c     **** 	*n = num;
 23635              		.loc 1 4289 37 view .LVU6145
 23636 012c 06F57A76 		add	r6, r6, #1000
 23637              	.LVL1830:
 23638              	.L1679:
4292:src/xeq.c     **** 
 23639              		.loc 1 4292 9 view .LVU6146
 23640 0130 0020     		movs	r0, #0
4289:src/xeq.c     **** 	*n = num;
 23641              		.loc 1 4289 5 view .LVU6147
 23642 0132 CBF80060 		str	r6, [fp]
4290:src/xeq.c     **** 
 23643              		.loc 1 4290 2 is_stmt 1 view .LVU6148
4290:src/xeq.c     **** 
 23644              		.loc 1 4290 5 is_stmt 0 view .LVU6149
 23645 0136 C9F80020 		str	r2, [r9]
4292:src/xeq.c     **** 
 23646              		.loc 1 4292 2 is_stmt 1 view .LVU6150
 23647              	.LBE3316:
 23648              	.LBE3322:
4297:src/xeq.c     **** 
 23649              		.loc 1 4297 1 is_stmt 0 view .LVU6151
 23650 013a 15B0     		add	sp, sp, #84
ARM GAS  /tmp/ccQlyisH.s 			page 616


 23651              		.cfi_remember_state
 23652              		.cfi_def_cfa_offset 36
 23653              		@ sp needed
 23654 013c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23655              	.LVL1831:
 23656              	.L1656:
 23657              		.cfi_restore_state
 23658              	.LBB3323:
 23659              	.LBB3317:
 23660              	.LBB3278:
 23661              	.LBI3278:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 23662              		.loc 1 230 5 is_stmt 1 view .LVU6152
 23663              	.LBE3278:
 23664              	.LBE3317:
 23665              	.LBE3323:
 231:src/xeq.c     **** }
 23666              		.loc 1 231 2 view .LVU6153
 23667              	.LBB3324:
 23668              	.LBB3318:
 23669              	.LBB3299:
 23670              	.LBB3279:
 23671              	.LBI3279:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 23672              		.loc 1 222 5 view .LVU6154
 23673              	.LBB3280:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23674              		.loc 1 223 2 view .LVU6155
 23675              	.LBB3281:
 23676              	.LBI3281:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23677              		.loc 1 1087 5 view .LVU6156
 23678              	.LBB3282:
1088:src/xeq.c     **** }
 23679              		.loc 1 1088 2 view .LVU6157
1088:src/xeq.c     **** }
 23680              		.loc 1 1088 12 is_stmt 0 view .LVU6158
 23681 0140 DAF80030 		ldr	r3, [r10]
 23682              	.LVL1832:
1088:src/xeq.c     **** }
 23683              		.loc 1 1088 12 view .LVU6159
 23684              	.LBE3282:
 23685              	.LBE3281:
 224:src/xeq.c     **** }
 23686              		.loc 1 224 2 is_stmt 1 view .LVU6160
 23687              	.LBB3285:
 23688              	.LBI3285:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 23689              		.loc 1 214 5 view .LVU6161
 23690              	.LBB3286:
 215:src/xeq.c     **** }
 23691              		.loc 1 215 2 view .LVU6162
 215:src/xeq.c     **** }
 23692              		.loc 1 215 9 is_stmt 0 view .LVU6163
 23693 0144 B3F9DE17 		ldrsh	r1, [r3, #2014]
 215:src/xeq.c     **** }
 23694              		.loc 1 215 57 view .LVU6164
ARM GAS  /tmp/ccQlyisH.s 			page 617


 23695 0148 0029     		cmp	r1, #0
 23696 014a 38DB     		blt	.L1701
 23697 014c 7023     		movs	r3, #112
 23698              	.LVL1833:
 215:src/xeq.c     **** }
 23699              		.loc 1 215 57 view .LVU6165
 23700 014e AFE7     		b	.L1662
 23701              	.LVL1834:
 23702              	.L1663:
 215:src/xeq.c     **** }
 23703              		.loc 1 215 57 view .LVU6166
 23704              	.LBE3286:
 23705              	.LBE3285:
 23706              	.LBE3280:
 23707              	.LBE3279:
 23708              	.LBE3299:
4281:src/xeq.c     **** 			num = mx_src - rsrc;
 23709              		.loc 1 4281 3 is_stmt 1 view .LVU6167
4281:src/xeq.c     **** 			num = mx_src - rsrc;
 23710              		.loc 1 4281 6 is_stmt 0 view .LVU6168
 23711 0150 002A     		cmp	r2, #0
 23712 0152 32D1     		bne	.L1702
4282:src/xeq.c     **** 		}
 23713              		.loc 1 4282 4 is_stmt 1 view .LVU6169
4282:src/xeq.c     **** 		}
 23714              		.loc 1 4282 8 is_stmt 0 view .LVU6170
 23715 0154 9A1B     		subs	r2, r3, r6
 23716              	.LVL1835:
4285:src/xeq.c     **** 		goto range_error;
 23717              		.loc 1 4285 2 is_stmt 1 view .LVU6171
 23718 0156 E8E7     		b	.L1678
 23719              	.L1664:
 23720              	.LBB3300:
 23721              	.LBI3300:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 23722              		.loc 1 250 14 view .LVU6172
 23723              	.LBE3300:
 23724              	.LBE3318:
 23725              	.LBE3324:
 251:src/xeq.c     **** }
 23726              		.loc 1 251 2 view .LVU6173
 23727              	.LVL1836:
 23728              	.LBB3325:
 23729              	.LBB3319:
 23730              	.LBB3309:
 23731              	.LBB3301:
 23732              	.LBI3301:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 23733              		.loc 1 238 14 view .LVU6174
 23734              	.LBB3302:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23735              		.loc 1 239 2 view .LVU6175
 23736              	.LBB3303:
 23737              	.LBI3303:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23738              		.loc 1 1087 5 view .LVU6176
 23739              	.LBB3304:
ARM GAS  /tmp/ccQlyisH.s 			page 618


1088:src/xeq.c     **** }
 23740              		.loc 1 1088 2 view .LVU6177
1088:src/xeq.c     **** }
 23741              		.loc 1 1088 12 is_stmt 0 view .LVU6178
 23742 0158 DAF80000 		ldr	r0, [r10]
1088:src/xeq.c     **** }
 23743              		.loc 1 1088 24 view .LVU6179
 23744 015c B0F8E8C7 		ldrh	ip, [r0, #2024]
 23745 0160 44F20101 		movw	r1, #16385
 23746              	.LBE3304:
 23747              	.LBE3303:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23748              		.loc 1 239 5 view .LVU6180
 23749 0164 01EA0C01 		and	r1, r1, ip
 23750 0168 B1F5804F 		cmp	r1, #16384
 23751              	.LBB3305:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23752              		.loc 1 240 24 view .LVU6181
 23753 016c 90F8CF17 		ldrb	r1, [r0, #1999]	@ zero_extendqisi2
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23754              		.loc 1 240 3 is_stmt 1 view .LVU6182
 241:src/xeq.c     **** 	}
 23755              		.loc 1 241 3 view .LVU6183
 23756              	.LVL1837:
 241:src/xeq.c     **** 	}
 23757              		.loc 1 241 3 is_stmt 0 view .LVU6184
 23758              	.LBE3305:
 23759              	.LBE3302:
 23760              	.LBE3301:
 23761              	.LBE3309:
4255:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23762              		.loc 1 4255 3 is_stmt 1 view .LVU6185
 23763              	.LBB3310:
 23764              	.LBB3308:
 23765              	.LBB3307:
 23766              	.LBB3306:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23767              		.loc 1 240 13 is_stmt 0 view .LVU6186
 23768 0170 04BF     		itt	eq
 23769 0172 0C39     		subeq	r1, r1, #12
 241:src/xeq.c     **** 	}
 23770              		.loc 1 241 67 view .LVU6187
 23771 0174 4910     		asreq	r1, r1, #1
 23772              	.LBE3306:
 23773              	.LBE3307:
 23774              	.LBE3308:
 23775              	.LBE3310:
4255:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23776              		.loc 1 4255 6 view .LVU6188
 23777 0176 002A     		cmp	r2, #0
 23778 0178 CFD1     		bne	.L1670
 23779              	.L1666:
4257:src/xeq.c     **** 				// source & destination in different memory areas
 23780              		.loc 1 4257 4 is_stmt 1 view .LVU6189
4257:src/xeq.c     **** 				// source & destination in different memory areas
 23781              		.loc 1 4257 7 is_stmt 0 view .LVU6190
 23782 017a 4FB1     		cbz	r7, .L1703
ARM GAS  /tmp/ccQlyisH.s 			page 619


 23783              	.LVL1838:
 23784              	.L1671:
4259:src/xeq.c     **** 			else {
 23785              		.loc 1 4259 5 is_stmt 1 view .LVU6191
4259:src/xeq.c     **** 			else {
 23786              		.loc 1 4259 9 is_stmt 0 view .LVU6192
 23787 017c 8B42     		cmp	r3, r1
 23788 017e 1A46     		mov	r2, r3
 23789 0180 A8BF     		it	ge
 23790 0182 0A46     		movge	r2, r1
 23791              	.LVL1839:
 23792              	.L1673:
4273:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23793              		.loc 1 4273 3 is_stmt 1 view .LVU6193
4273:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23794              		.loc 1 4273 6 is_stmt 0 view .LVU6194
 23795 0184 6F2D     		cmp	r5, #111
 23796 0186 C8DD     		ble	.L1670
 23797 0188 C6E7     		b	.L1667
 23798              	.LVL1840:
 23799              	.L1683:
4273:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23800              		.loc 1 4273 6 view .LVU6195
 23801 018a 1F46     		mov	r7, r3
4246:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23802              		.loc 1 4246 9 view .LVU6196
 23803 018c 7023     		movs	r3, #112
 23804 018e B4E7     		b	.L1659
 23805              	.LVL1841:
 23806              	.L1703:
4257:src/xeq.c     **** 				// source & destination in different memory areas
 23807              		.loc 1 4257 42 view .LVU6197
 23808 0190 244A     		ldr	r2, .L1704+12
 23809              	.LVL1842:
4257:src/xeq.c     **** 				// source & destination in different memory areas
 23810              		.loc 1 4257 14 view .LVU6198
 23811 0192 9442     		cmp	r4, r2
 23812 0194 B4BF     		ite	lt
 23813 0196 0024     		movlt	r4, #0
 23814 0198 0124     		movge	r4, #1
 23815 019a 6F2D     		cmp	r5, #111
 23816 019c D4BF     		ite	le
 23817 019e 0022     		movle	r2, #0
 23818 01a0 0122     		movgt	r2, #1
 23819 01a2 9442     		cmp	r4, r2
 23820 01a4 EAD1     		bne	.L1671
4261:src/xeq.c     **** 					num = mx_src - rsrc;
 23821              		.loc 1 4261 5 is_stmt 1 view .LVU6199
4261:src/xeq.c     **** 					num = mx_src - rsrc;
 23822              		.loc 1 4261 8 is_stmt 0 view .LVU6200
 23823 01a6 B542     		cmp	r5, r6
4262:src/xeq.c     **** 					q = rsrc - rdest;
 23824              		.loc 1 4262 6 is_stmt 1 view .LVU6201
4266:src/xeq.c     **** 					q = rdest - rsrc;
 23825              		.loc 1 4266 10 is_stmt 0 view .LVU6202
 23826 01a8 A7BF     		ittee	ge
 23827 01aa 4A1B     		subge	r2, r1, r5
ARM GAS  /tmp/ccQlyisH.s 			page 620


4267:src/xeq.c     **** 				}
 23828              		.loc 1 4267 8 view .LVU6203
 23829 01ac A81B     		subge	r0, r5, r6
4262:src/xeq.c     **** 					q = rsrc - rdest;
 23830              		.loc 1 4262 10 view .LVU6204
 23831 01ae 9A1B     		sublt	r2, r3, r6
4263:src/xeq.c     **** 				}
 23832              		.loc 1 4263 6 is_stmt 1 view .LVU6205
4263:src/xeq.c     **** 				}
 23833              		.loc 1 4263 8 is_stmt 0 view .LVU6206
 23834 01b0 701B     		sublt	r0, r6, r5
4266:src/xeq.c     **** 					q = rdest - rsrc;
 23835              		.loc 1 4266 6 is_stmt 1 view .LVU6207
 23836              	.LVL1843:
4267:src/xeq.c     **** 				}
 23837              		.loc 1 4267 6 view .LVU6208
4269:src/xeq.c     **** 					num = q;
 23838              		.loc 1 4269 5 view .LVU6209
 23839 01b2 8242     		cmp	r2, r0
 23840 01b4 A8BF     		it	ge
 23841 01b6 0246     		movge	r2, r0
 23842              	.LVL1844:
4269:src/xeq.c     **** 					num = q;
 23843              		.loc 1 4269 5 is_stmt 0 view .LVU6210
 23844 01b8 E4E7     		b	.L1673
 23845              	.LVL1845:
 23846              	.L1702:
4269:src/xeq.c     **** 					num = q;
 23847              		.loc 1 4269 5 view .LVU6211
 23848 01ba 9119     		adds	r1, r2, r6
 23849 01bc B3E7     		b	.L1676
 23850              	.LVL1846:
 23851              	.L1701:
 23852              	.LBB3311:
 23853              	.LBB3298:
 23854              	.LBB3297:
 23855              	.LBB3291:
 23856              	.LBB3283:
1088:src/xeq.c     **** }
 23857              		.loc 1 1088 24 view .LVU6212
 23858 01be B3F8E877 		ldrh	r7, [r3, #2024]
 23859              	.LBE3283:
 23860              	.LBE3291:
 23861              	.LBB3292:
 23862              	.LBB3287:
 215:src/xeq.c     **** }
 23863              		.loc 1 215 25 view .LVU6213
 23864 01c2 1B48     		ldr	r0, .L1704+24
 23865              	.LBE3287:
 23866              	.LBE3292:
 23867              	.LBB3293:
 23868              	.LBB3284:
1088:src/xeq.c     **** }
 23869              		.loc 1 1088 24 view .LVU6214
 23870 01c4 44F20103 		movw	r3, #16385
 23871              	.LVL1847:
1088:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 621


 23872              		.loc 1 1088 24 view .LVU6215
 23873              	.LBE3284:
 23874              	.LBE3293:
 23875              	.LBB3294:
 23876              	.LBB3288:
 215:src/xeq.c     **** }
 23877              		.loc 1 215 25 view .LVU6216
 23878 01c8 0068     		ldr	r0, [r0]
 23879              	.LBE3288:
 23880              	.LBE3294:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23881              		.loc 1 223 73 view .LVU6217
 23882 01ca 3B40     		ands	r3, r3, r7
 23883 01cc A3F58043 		sub	r3, r3, #16384
 23884              	.LBB3295:
 23885              	.LBB3289:
 215:src/xeq.c     **** }
 23886              		.loc 1 215 57 view .LVU6218
 23887 01d0 30F81110 		ldrh	r1, [r0, r1, lsl #1]
 23888              	.LBE3289:
 23889              	.LBE3295:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23890              		.loc 1 223 73 view .LVU6219
 23891 01d4 B3FA83F3 		clz	r3, r3
 23892 01d8 5B09     		lsrs	r3, r3, #5
 23893 01da 0233     		adds	r3, r3, #2
 23894              	.LBB3296:
 23895              	.LBB3290:
 215:src/xeq.c     **** }
 23896              		.loc 1 215 57 view .LVU6220
 23897 01dc C1F30B01 		ubfx	r1, r1, #0, #12
 23898 01e0 41FA03F3 		asr	r3, r1, r3
 23899 01e4 7033     		adds	r3, r3, #112
 23900 01e6 63E7     		b	.L1662
 23901              	.LVL1848:
 23902              	.L1700:
 215:src/xeq.c     **** }
 23903              		.loc 1 215 57 view .LVU6221
 23904              	.LBE3290:
 23905              	.LBE3296:
 23906              	.LBE3297:
 23907              	.LBE3298:
 23908              	.LBE3311:
 23909              	.LBB3312:
 23910              	.LBB3275:
 23911              	.LBB3273:
 23912              	.LBB3266:
 23913              	.LBB3256:
1088:src/xeq.c     **** }
 23914              		.loc 1 1088 24 view .LVU6222
 23915 01e8 B1F8E8E7 		ldrh	lr, [r1, #2024]
 23916              	.LBE3256:
 23917              	.LBE3266:
 23918              	.LBB3267:
 23919              	.LBB3261:
 215:src/xeq.c     **** }
 23920              		.loc 1 215 25 view .LVU6223
ARM GAS  /tmp/ccQlyisH.s 			page 622


 23921 01ec DFF840C0 		ldr	ip, .L1704+24
 23922              	.LBE3261:
 23923              	.LBE3267:
 23924              	.LBB3268:
 23925              	.LBB3257:
1088:src/xeq.c     **** }
 23926              		.loc 1 1088 24 view .LVU6224
 23927 01f0 44F20101 		movw	r1, #16385
 23928              	.LVL1849:
1088:src/xeq.c     **** }
 23929              		.loc 1 1088 24 view .LVU6225
 23930              	.LBE3257:
 23931              	.LBE3268:
 23932              	.LBB3269:
 23933              	.LBB3262:
 215:src/xeq.c     **** }
 23934              		.loc 1 215 25 view .LVU6226
 23935 01f4 DCF800C0 		ldr	ip, [ip]
 23936              	.LBE3262:
 23937              	.LBE3269:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23938              		.loc 1 223 73 view .LVU6227
 23939 01f8 01EA0E01 		and	r1, r1, lr
 23940 01fc A1F58041 		sub	r1, r1, #16384
 23941              	.LBB3270:
 23942              	.LBB3263:
 215:src/xeq.c     **** }
 23943              		.loc 1 215 57 view .LVU6228
 23944 0200 3CF810C0 		ldrh	ip, [ip, r0, lsl #1]
 23945              	.LBE3263:
 23946              	.LBE3270:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23947              		.loc 1 223 73 view .LVU6229
 23948 0204 B1FA81F1 		clz	r1, r1
 23949 0208 4909     		lsrs	r1, r1, #5
 23950 020a 881C     		adds	r0, r1, #2
 23951              	.LBB3271:
 23952              	.LBB3264:
 215:src/xeq.c     **** }
 23953              		.loc 1 215 57 view .LVU6230
 23954 020c CCF30B01 		ubfx	r1, ip, #0, #12
 23955 0210 0141     		asrs	r1, r1, r0
 23956              	.LVL1850:
 215:src/xeq.c     **** }
 23957              		.loc 1 215 57 view .LVU6231
 23958              	.LBE3264:
 23959              	.LBE3271:
 23960              	.LBE3273:
 23961              	.LBE3275:
 23962              	.LBE3312:
4255:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23963              		.loc 1 4255 3 is_stmt 1 view .LVU6232
4255:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23964              		.loc 1 4255 6 is_stmt 0 view .LVU6233
 23965 0212 002A     		cmp	r2, #0
 23966 0214 B1D0     		beq	.L1666
 23967 0216 7FE7     		b	.L1667
ARM GAS  /tmp/ccQlyisH.s 			page 623


 23968              	.L1705:
 23969              		.align	2
 23970              	.L1704:
 23971 0218 00000000 		.word	Error
 23972 021c D34D6210 		.word	274877907
 23973 0220 1F85EB51 		.word	1374389535
 23974 0224 00E6AA00 		.word	11200000
 23975 0228 80969800 		.word	10000000
 23976 022c 00000000 		.word	backup_ram
 23977 0230 00000000 		.word	RetStk
 23978 0234 00000000 		.word	main_ram
 23979              	.LBE3319:
 23980              	.LBE3325:
 23981              		.cfi_endproc
 23982              	.LFE227:
 23984              		.section	.text.op_regcopy,"ax",%progbits
 23985              		.align	1
 23986              		.p2align 2,,3
 23987              		.global	op_regcopy
 23988              		.syntax unified
 23989              		.thumb
 23990              		.thumb_func
 23991              		.fpu fpv4-sp-d16
 23993              	op_regcopy:
 23994              	.LVL1851:
 23995              	.LFB228:
4299:src/xeq.c     **** 	int s, n, d;
 23996              		.loc 1 4299 32 is_stmt 1 view -0
 23997              		.cfi_startproc
 23998              		@ args = 0, pretend = 0, frame = 16
 23999              		@ frame_needed = 0, uses_anonymous_args = 0
4300:src/xeq.c     **** 
 24000              		.loc 1 4300 2 view .LVU6235
4302:src/xeq.c     **** 		return;
 24001              		.loc 1 4302 2 view .LVU6236
4299:src/xeq.c     **** 	int s, n, d;
 24002              		.loc 1 4299 32 is_stmt 0 view .LVU6237
 24003 0000 10B5     		push	{r4, lr}
 24004              		.cfi_def_cfa_offset 8
 24005              		.cfi_offset 4, -8
 24006              		.cfi_offset 14, -4
 24007 0002 84B0     		sub	sp, sp, #16
 24008              		.cfi_def_cfa_offset 24
4302:src/xeq.c     **** 		return;
 24009              		.loc 1 4302 6 view .LVU6238
 24010 0004 0123     		movs	r3, #1
 24011 0006 03AA     		add	r2, sp, #12
 24012 0008 02A9     		add	r1, sp, #8
 24013 000a 01A8     		add	r0, sp, #4
 24014              	.LVL1852:
4302:src/xeq.c     **** 		return;
 24015              		.loc 1 4302 6 view .LVU6239
 24016 000c FFF7FEFF 		bl	reg_decode
 24017              	.LVL1853:
4302:src/xeq.c     **** 		return;
 24018              		.loc 1 4302 5 view .LVU6240
 24019 0010 B8B9     		cbnz	r0, .L1706
ARM GAS  /tmp/ccQlyisH.s 			page 624


4304:src/xeq.c     **** }
 24020              		.loc 1 4304 2 is_stmt 1 view .LVU6241
 24021 0012 0398     		ldr	r0, [sp, #12]
 24022 0014 FFF7FEFF 		bl	get_reg_n
 24023              	.LVL1854:
 24024 0018 0446     		mov	r4, r0
 24025 001a 0198     		ldr	r0, [sp, #4]
 24026 001c FFF7FEFF 		bl	get_reg_n
 24027              	.LVL1855:
 24028              	.LBB3326:
 24029              	.LBB3327:
 24030              	.LBB3328:
 24031              	.LBB3329:
1088:src/xeq.c     **** }
 24032              		.loc 1 1088 24 is_stmt 0 view .LVU6242
 24033 0020 094B     		ldr	r3, .L1711
 24034              	.LBE3329:
 24035              	.LBE3328:
 24036              	.LBE3327:
 24037              	.LBE3326:
4304:src/xeq.c     **** }
 24038              		.loc 1 4304 2 view .LVU6243
 24039 0022 029A     		ldr	r2, [sp, #8]
 24040              	.LVL1856:
 24041              	.LBB3336:
 24042              	.LBB3334:
 24043              	.LBB3332:
 24044              	.LBB3330:
1088:src/xeq.c     **** }
 24045              		.loc 1 1088 24 view .LVU6244
 24046 0024 1B68     		ldr	r3, [r3]
 24047 0026 B3F8E817 		ldrh	r1, [r3, #2024]
 24048 002a 44F20103 		movw	r3, #16385
 24049              	.LBE3330:
 24050              	.LBE3332:
1507:src/xeq.c     **** 		n <<= 1;
 24051              		.loc 1 1507 5 view .LVU6245
 24052 002e 0B40     		ands	r3, r3, r1
 24053 0030 B3F5804F 		cmp	r3, #16384
1508:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 24054              		.loc 1 1508 5 view .LVU6246
 24055 0034 08BF     		it	eq
 24056 0036 5200     		lsleq	r2, r2, #1
 24057              	.LBE3334:
 24058              	.LBE3336:
4304:src/xeq.c     **** }
 24059              		.loc 1 4304 2 view .LVU6247
 24060 0038 0146     		mov	r1, r0
 24061              	.LVL1857:
 24062              	.LBB3337:
 24063              	.LBI3326:
1506:src/xeq.c     **** 	if (is_dblmode())
 24064              		.loc 1 1506 6 is_stmt 1 view .LVU6248
 24065              	.LBB3335:
1507:src/xeq.c     **** 		n <<= 1;
 24066              		.loc 1 1507 2 view .LVU6249
 24067              	.LBB3333:
ARM GAS  /tmp/ccQlyisH.s 			page 625


 24068              	.LBI3328:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 24069              		.loc 1 1087 5 view .LVU6250
 24070              	.LBB3331:
1088:src/xeq.c     **** }
 24071              		.loc 1 1088 2 view .LVU6251
 24072              	.LBE3331:
 24073              	.LBE3333:
1508:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 24074              		.loc 1 1508 3 view .LVU6252
1509:src/xeq.c     **** }
 24075              		.loc 1 1509 2 view .LVU6253
 24076 003a D200     		lsls	r2, r2, #3
 24077              	.LVL1858:
1509:src/xeq.c     **** }
 24078              		.loc 1 1509 2 is_stmt 0 view .LVU6254
 24079 003c 2046     		mov	r0, r4
 24080              	.LVL1859:
1509:src/xeq.c     **** }
 24081              		.loc 1 1509 2 view .LVU6255
 24082 003e FFF7FEFF 		bl	xcopy
 24083              	.LVL1860:
 24084              	.L1706:
1509:src/xeq.c     **** }
 24085              		.loc 1 1509 2 view .LVU6256
 24086              	.LBE3335:
 24087              	.LBE3337:
4305:src/xeq.c     **** 
 24088              		.loc 1 4305 1 view .LVU6257
 24089 0042 04B0     		add	sp, sp, #16
 24090              		.cfi_def_cfa_offset 8
 24091              		@ sp needed
 24092 0044 10BD     		pop	{r4, pc}
 24093              	.L1712:
 24094 0046 00BF     		.align	2
 24095              	.L1711:
 24096 0048 00000000 		.word	main_ram
 24097              		.cfi_endproc
 24098              	.LFE228:
 24100              		.section	.text.op_regswap,"ax",%progbits
 24101              		.align	1
 24102              		.p2align 2,,3
 24103              		.global	op_regswap
 24104              		.syntax unified
 24105              		.thumb
 24106              		.thumb_func
 24107              		.fpu fpv4-sp-d16
 24109              	op_regswap:
 24110              	.LVL1861:
 24111              	.LFB229:
4307:src/xeq.c     **** 	int s, n, d, i;
 24112              		.loc 1 4307 32 is_stmt 1 view -0
 24113              		.cfi_startproc
 24114              		@ args = 0, pretend = 0, frame = 16
 24115              		@ frame_needed = 0, uses_anonymous_args = 0
4308:src/xeq.c     **** 
 24116              		.loc 1 4308 2 view .LVU6259
ARM GAS  /tmp/ccQlyisH.s 			page 626


4310:src/xeq.c     **** 		return;
 24117              		.loc 1 4310 2 view .LVU6260
4307:src/xeq.c     **** 	int s, n, d, i;
 24118              		.loc 1 4307 32 is_stmt 0 view .LVU6261
 24119 0000 30B5     		push	{r4, r5, lr}
 24120              		.cfi_def_cfa_offset 12
 24121              		.cfi_offset 4, -12
 24122              		.cfi_offset 5, -8
 24123              		.cfi_offset 14, -4
 24124 0002 85B0     		sub	sp, sp, #20
 24125              		.cfi_def_cfa_offset 32
4310:src/xeq.c     **** 		return;
 24126              		.loc 1 4310 6 view .LVU6262
 24127 0004 0023     		movs	r3, #0
 24128 0006 03AA     		add	r2, sp, #12
 24129 0008 02A9     		add	r1, sp, #8
 24130 000a 01A8     		add	r0, sp, #4
 24131              	.LVL1862:
4310:src/xeq.c     **** 		return;
 24132              		.loc 1 4310 6 view .LVU6263
 24133 000c FFF7FEFF 		bl	reg_decode
 24134              	.LVL1863:
4310:src/xeq.c     **** 		return;
 24135              		.loc 1 4310 5 view .LVU6264
 24136 0010 E8B9     		cbnz	r0, .L1713
4310:src/xeq.c     **** 		return;
 24137              		.loc 1 4310 37 discriminator 1 view .LVU6265
 24138 0012 039B     		ldr	r3, [sp, #12]
 24139 0014 0446     		mov	r4, r0
 24140 0016 0198     		ldr	r0, [sp, #4]
4310:src/xeq.c     **** 		return;
 24141              		.loc 1 4310 32 discriminator 1 view .LVU6266
 24142 0018 9842     		cmp	r0, r3
 24143 001a 18D0     		beq	.L1713
4313:src/xeq.c     **** 			report_err(ERR_RANGE);
 24144              		.loc 1 4313 3 is_stmt 1 view .LVU6267
4313:src/xeq.c     **** 			report_err(ERR_RANGE);
 24145              		.loc 1 4313 19 is_stmt 0 view .LVU6268
 24146 001c 029A     		ldr	r2, [sp, #8]
4313:src/xeq.c     **** 			report_err(ERR_RANGE);
 24147              		.loc 1 4313 6 view .LVU6269
 24148 001e 18DD     		ble	.L1718
4313:src/xeq.c     **** 			report_err(ERR_RANGE);
 24149              		.loc 1 4313 19 discriminator 1 view .LVU6270
 24150 0020 1344     		add	r3, r3, r2
4313:src/xeq.c     **** 			report_err(ERR_RANGE);
 24151              		.loc 1 4313 14 discriminator 1 view .LVU6271
 24152 0022 9842     		cmp	r0, r3
 24153 0024 19DB     		blt	.L1719
 24154              	.L1720:
 24155              	.LVL1864:
4316:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24156              		.loc 1 4316 16 is_stmt 1 discriminator 1 view .LVU6272
4316:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24157              		.loc 1 4316 4 is_stmt 0 discriminator 1 view .LVU6273
 24158 0026 002A     		cmp	r2, #0
 24159 0028 01DC     		bgt	.L1722
ARM GAS  /tmp/ccQlyisH.s 			page 627


 24160 002a 10E0     		b	.L1713
 24161              	.LVL1865:
 24162              	.L1725:
4316:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24163              		.loc 1 4316 4 discriminator 1 view .LVU6274
 24164 002c 0198     		ldr	r0, [sp, #4]
 24165              	.LVL1866:
 24166              	.L1722:
4317:src/xeq.c     **** 		}
 24167              		.loc 1 4317 5 is_stmt 1 discriminator 3 view .LVU6275
 24168 002e 2044     		add	r0, r0, r4
 24169 0030 FFF7FEFF 		bl	get_reg_n
 24170              	.LVL1867:
 24171 0034 039B     		ldr	r3, [sp, #12]
 24172 0036 0546     		mov	r5, r0
 24173 0038 E018     		adds	r0, r4, r3
 24174 003a FFF7FEFF 		bl	get_reg_n
 24175              	.LVL1868:
 24176 003e 0146     		mov	r1, r0
 24177 0040 2846     		mov	r0, r5
 24178 0042 FFF7FEFF 		bl	swap_reg
 24179              	.LVL1869:
4316:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24180              		.loc 1 4316 23 discriminator 3 view .LVU6276
4316:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24181              		.loc 1 4316 4 is_stmt 0 discriminator 3 view .LVU6277
 24182 0046 029B     		ldr	r3, [sp, #8]
4316:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24183              		.loc 1 4316 24 discriminator 3 view .LVU6278
 24184 0048 0134     		adds	r4, r4, #1
 24185              	.LVL1870:
4316:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24186              		.loc 1 4316 16 is_stmt 1 discriminator 3 view .LVU6279
4316:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24187              		.loc 1 4316 4 is_stmt 0 discriminator 3 view .LVU6280
 24188 004a A342     		cmp	r3, r4
 24189 004c EEDC     		bgt	.L1725
 24190              	.LVL1871:
 24191              	.L1713:
4320:src/xeq.c     **** 
 24192              		.loc 1 4320 1 view .LVU6281
 24193 004e 05B0     		add	sp, sp, #20
 24194              		.cfi_remember_state
 24195              		.cfi_def_cfa_offset 12
 24196              		@ sp needed
 24197 0050 30BD     		pop	{r4, r5, pc}
 24198              	.L1718:
 24199              		.cfi_restore_state
4313:src/xeq.c     **** 			report_err(ERR_RANGE);
 24200              		.loc 1 4313 28 discriminator 3 view .LVU6282
 24201 0052 E8DA     		bge	.L1720
4313:src/xeq.c     **** 			report_err(ERR_RANGE);
 24202              		.loc 1 4313 43 discriminator 4 view .LVU6283
 24203 0054 8118     		adds	r1, r0, r2
4313:src/xeq.c     **** 			report_err(ERR_RANGE);
 24204              		.loc 1 4313 38 discriminator 4 view .LVU6284
 24205 0056 8B42     		cmp	r3, r1
ARM GAS  /tmp/ccQlyisH.s 			page 628


 24206 0058 E5DA     		bge	.L1720
 24207              	.L1719:
4314:src/xeq.c     **** 		else {
 24208              		.loc 1 4314 4 is_stmt 1 view .LVU6285
 24209              	.LVL1872:
 24210              	.LBB3342:
 24211              	.LBI3342:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24212              		.loc 1 537 5 view .LVU6286
 24213              	.LBB3343:
 538:src/xeq.c     **** 		Error = e;
 24214              		.loc 1 538 2 view .LVU6287
 538:src/xeq.c     **** 		Error = e;
 24215              		.loc 1 538 12 is_stmt 0 view .LVU6288
 24216 005a 044B     		ldr	r3, .L1726
 538:src/xeq.c     **** 		Error = e;
 24217              		.loc 1 538 5 view .LVU6289
 24218 005c 1A68     		ldr	r2, [r3]
 24219 005e 002A     		cmp	r2, #0
 24220 0060 F5D1     		bne	.L1713
 24221              	.LVL1873:
 24222              	.LBB3344:
 24223              	.LBI3344:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24224              		.loc 1 537 5 is_stmt 1 view .LVU6290
 24225              	.LBB3345:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24226              		.loc 1 539 3 view .LVU6291
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24227              		.loc 1 539 9 is_stmt 0 view .LVU6292
 24228 0062 0822     		movs	r2, #8
 24229 0064 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 24230              		.loc 1 540 3 is_stmt 1 view .LVU6293
 24231              	.LBE3345:
 24232              	.LBE3344:
 24233              	.LBE3343:
 24234              	.LBE3342:
4320:src/xeq.c     **** 
 24235              		.loc 1 4320 1 is_stmt 0 view .LVU6294
 24236 0066 05B0     		add	sp, sp, #20
 24237              		.cfi_def_cfa_offset 12
 24238              		@ sp needed
 24239 0068 30BD     		pop	{r4, r5, pc}
 24240              	.L1727:
 24241 006a 00BF     		.align	2
 24242              	.L1726:
 24243 006c 00000000 		.word	Error
 24244              		.cfi_endproc
 24245              	.LFE229:
 24247              		.section	.text.op_regclr,"ax",%progbits
 24248              		.align	1
 24249              		.p2align 2,,3
 24250              		.global	op_regclr
 24251              		.syntax unified
 24252              		.thumb
 24253              		.thumb_func
ARM GAS  /tmp/ccQlyisH.s 			page 629


 24254              		.fpu fpv4-sp-d16
 24256              	op_regclr:
 24257              	.LVL1874:
 24258              	.LFB230:
4322:src/xeq.c     **** 	int s, n;
 24259              		.loc 1 4322 31 is_stmt 1 view -0
 24260              		.cfi_startproc
 24261              		@ args = 0, pretend = 0, frame = 8
 24262              		@ frame_needed = 0, uses_anonymous_args = 0
4323:src/xeq.c     **** 
 24263              		.loc 1 4323 2 view .LVU6296
4325:src/xeq.c     **** 		return;
 24264              		.loc 1 4325 2 view .LVU6297
4322:src/xeq.c     **** 	int s, n;
 24265              		.loc 1 4322 31 is_stmt 0 view .LVU6298
 24266 0000 10B5     		push	{r4, lr}
 24267              		.cfi_def_cfa_offset 8
 24268              		.cfi_offset 4, -8
 24269              		.cfi_offset 14, -4
4325:src/xeq.c     **** 		return;
 24270              		.loc 1 4325 6 view .LVU6299
 24271 0002 0023     		movs	r3, #0
4322:src/xeq.c     **** 	int s, n;
 24272              		.loc 1 4322 31 view .LVU6300
 24273 0004 82B0     		sub	sp, sp, #8
 24274              		.cfi_def_cfa_offset 16
4325:src/xeq.c     **** 		return;
 24275              		.loc 1 4325 6 view .LVU6301
 24276 0006 1A46     		mov	r2, r3
 24277 0008 01A9     		add	r1, sp, #4
 24278 000a 6846     		mov	r0, sp
 24279              	.LVL1875:
4325:src/xeq.c     **** 		return;
 24280              		.loc 1 4325 6 view .LVU6302
 24281 000c FFF7FEFF 		bl	reg_decode
 24282              	.LVL1876:
4325:src/xeq.c     **** 		return;
 24283              		.loc 1 4325 5 view .LVU6303
 24284 0010 A8B9     		cbnz	r0, .L1728
4327:src/xeq.c     **** }
 24285              		.loc 1 4327 2 is_stmt 1 view .LVU6304
 24286 0012 0446     		mov	r4, r0
 24287 0014 0098     		ldr	r0, [sp]
 24288 0016 FFF7FEFF 		bl	get_reg_n
 24289              	.LVL1877:
 24290              	.LBB3346:
 24291              	.LBI3346:
1487:src/xeq.c     **** #if 0
 24292              		.loc 1 1487 6 view .LVU6305
 24293              	.LBB3347:
1502:src/xeq.c     **** #endif
 24294              		.loc 1 1502 2 view .LVU6306
 24295              	.LBB3348:
 24296              	.LBI3348:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 24297              		.loc 1 1087 5 view .LVU6307
 24298              	.LBB3349:
ARM GAS  /tmp/ccQlyisH.s 			page 630


1088:src/xeq.c     **** }
 24299              		.loc 1 1088 2 view .LVU6308
1088:src/xeq.c     **** }
 24300              		.loc 1 1088 24 is_stmt 0 view .LVU6309
 24301 001a 0A4B     		ldr	r3, .L1732
 24302              	.LBE3349:
 24303              	.LBE3348:
1502:src/xeq.c     **** #endif
 24304              		.loc 1 1502 2 view .LVU6310
 24305 001c 019A     		ldr	r2, [sp, #4]
 24306              	.LBB3351:
 24307              	.LBB3350:
1088:src/xeq.c     **** }
 24308              		.loc 1 1088 24 view .LVU6311
 24309 001e 1B68     		ldr	r3, [r3]
 24310 0020 B3F8E817 		ldrh	r1, [r3, #2024]
 24311 0024 44F20103 		movw	r3, #16385
 24312 0028 0B40     		ands	r3, r3, r1
 24313 002a A3F58043 		sub	r3, r3, #16384
 24314 002e B3FA83F3 		clz	r3, r3
 24315 0032 5B09     		lsrs	r3, r3, #5
 24316              	.LBE3350:
 24317              	.LBE3351:
1502:src/xeq.c     **** #endif
 24318              		.loc 1 1502 24 view .LVU6312
 24319 0034 0333     		adds	r3, r3, #3
1502:src/xeq.c     **** #endif
 24320              		.loc 1 1502 2 view .LVU6313
 24321 0036 2146     		mov	r1, r4
 24322 0038 9A40     		lsls	r2, r2, r3
 24323 003a FFF7FEFF 		bl	xset
 24324              	.LVL1878:
 24325              	.L1728:
1502:src/xeq.c     **** #endif
 24326              		.loc 1 1502 2 view .LVU6314
 24327              	.LBE3347:
 24328              	.LBE3346:
4328:src/xeq.c     **** 
 24329              		.loc 1 4328 1 view .LVU6315
 24330 003e 02B0     		add	sp, sp, #8
 24331              		.cfi_def_cfa_offset 8
 24332              		@ sp needed
 24333 0040 10BD     		pop	{r4, pc}
 24334              	.L1733:
 24335 0042 00BF     		.align	2
 24336              	.L1732:
 24337 0044 00000000 		.word	main_ram
 24338              		.cfi_endproc
 24339              	.LFE230:
 24341              		.section	.text.op_regsort,"ax",%progbits
 24342              		.align	1
 24343              		.p2align 2,,3
 24344              		.global	op_regsort
 24345              		.syntax unified
 24346              		.thumb
 24347              		.thumb_func
 24348              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQlyisH.s 			page 631


 24350              	op_regsort:
 24351              	.LVL1879:
 24352              	.LFB231:
4330:src/xeq.c     **** 	int s, n;
 24353              		.loc 1 4330 32 is_stmt 1 view -0
 24354              		.cfi_startproc
 24355              		@ args = 0, pretend = 0, frame = 160
 24356              		@ frame_needed = 0, uses_anonymous_args = 0
4331:src/xeq.c     **** 	decNumber pivot, a;
 24357              		.loc 1 4331 2 view .LVU6317
4332:src/xeq.c     **** 	int beg[10], end[10], i;
 24358              		.loc 1 4332 2 view .LVU6318
4333:src/xeq.c     **** 
 24359              		.loc 1 4333 2 view .LVU6319
4335:src/xeq.c     **** 		return;
 24360              		.loc 1 4335 2 view .LVU6320
4330:src/xeq.c     **** 	int s, n;
 24361              		.loc 1 4330 32 is_stmt 0 view .LVU6321
 24362 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 24363              		.cfi_def_cfa_offset 28
 24364              		.cfi_offset 4, -28
 24365              		.cfi_offset 5, -24
 24366              		.cfi_offset 6, -20
 24367              		.cfi_offset 7, -16
 24368              		.cfi_offset 8, -12
 24369              		.cfi_offset 9, -8
 24370              		.cfi_offset 14, -4
4335:src/xeq.c     **** 		return;
 24371              		.loc 1 4335 6 view .LVU6322
 24372 0004 0023     		movs	r3, #0
4330:src/xeq.c     **** 	int s, n;
 24373              		.loc 1 4330 32 view .LVU6323
 24374 0006 A9B0     		sub	sp, sp, #164
 24375              		.cfi_def_cfa_offset 192
4335:src/xeq.c     **** 		return;
 24376              		.loc 1 4335 6 view .LVU6324
 24377 0008 1A46     		mov	r2, r3
 24378 000a 01A9     		add	r1, sp, #4
 24379 000c 6846     		mov	r0, sp
 24380              	.LVL1880:
4335:src/xeq.c     **** 		return;
 24381              		.loc 1 4335 6 view .LVU6325
 24382 000e FFF7FEFF 		bl	reg_decode
 24383              	.LVL1881:
4335:src/xeq.c     **** 		return;
 24384              		.loc 1 4335 5 view .LVU6326
 24385 0012 20B9     		cbnz	r0, .L1734
4335:src/xeq.c     **** 		return;
 24386              		.loc 1 4335 39 discriminator 1 view .LVU6327
 24387 0014 DDF80480 		ldr	r8, [sp, #4]
4335:src/xeq.c     **** 		return;
 24388              		.loc 1 4335 34 discriminator 1 view .LVU6328
 24389 0018 B8F1010F 		cmp	r8, #1
 24390 001c 02D1     		bne	.L1758
 24391              	.L1734:
4380:src/xeq.c     **** 
 24392              		.loc 1 4380 1 view .LVU6329
ARM GAS  /tmp/ccQlyisH.s 			page 632


 24393 001e 29B0     		add	sp, sp, #164
 24394              		.cfi_remember_state
 24395              		.cfi_def_cfa_offset 28
 24396              		@ sp needed
 24397 0020 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 24398              	.L1758:
 24399              		.cfi_restore_state
 24400 0024 0646     		mov	r6, r0
4339:src/xeq.c     **** 	end[0] = n;
 24401              		.loc 1 4339 2 is_stmt 1 view .LVU6330
4339:src/xeq.c     **** 	end[0] = n;
 24402              		.loc 1 4339 9 is_stmt 0 view .LVU6331
 24403 0026 1490     		str	r0, [sp, #80]
4340:src/xeq.c     **** 	i = 0;
 24404              		.loc 1 4340 2 is_stmt 1 view .LVU6332
4340:src/xeq.c     **** 	i = 0;
 24405              		.loc 1 4340 9 is_stmt 0 view .LVU6333
 24406 0028 CDF87880 		str	r8, [sp, #120]
4341:src/xeq.c     **** 	while (i>=0) {
 24407              		.loc 1 4341 2 is_stmt 1 view .LVU6334
 24408              	.LVL1882:
4342:src/xeq.c     **** 		int L = beg[i];
 24409              		.loc 1 4342 2 view .LVU6335
4342:src/xeq.c     **** 		int L = beg[i];
 24410              		.loc 1 4342 8 view .LVU6336
4341:src/xeq.c     **** 	while (i>=0) {
 24411              		.loc 1 4341 4 is_stmt 0 view .LVU6337
 24412 002c 0746     		mov	r7, r0
 24413              	.LVL1883:
 24414              	.L1748:
 24415              	.LBB3352:
4343:src/xeq.c     **** 		int R = end[i] - 1;
 24416              		.loc 1 4343 3 is_stmt 1 view .LVU6338
4344:src/xeq.c     **** 		if (L<R) {
 24417              		.loc 1 4344 3 view .LVU6339
4344:src/xeq.c     **** 		if (L<R) {
 24418              		.loc 1 4344 7 is_stmt 0 view .LVU6340
 24419 002e 08F1FF34 		add	r4, r8, #-1
 24420              	.LVL1884:
4345:src/xeq.c     **** 			const int pvt = s + L;
 24421              		.loc 1 4345 3 is_stmt 1 view .LVU6341
4345:src/xeq.c     **** 			const int pvt = s + L;
 24422              		.loc 1 4345 6 is_stmt 0 view .LVU6342
 24423 0032 B442     		cmp	r4, r6
 24424 0034 0CDC     		bgt	.L1759
 24425              	.LVL1885:
 24426              	.L1737:
4378:src/xeq.c     **** 	}
 24427              		.loc 1 4378 4 is_stmt 1 view .LVU6343
 24428              	.LBE3352:
4342:src/xeq.c     **** 		int L = beg[i];
 24429              		.loc 1 4342 8 is_stmt 0 view .LVU6344
 24430 0036 013F     		subs	r7, r7, #1
 24431              	.LVL1886:
4342:src/xeq.c     **** 		int L = beg[i];
 24432              		.loc 1 4342 8 view .LVU6345
 24433 0038 F1D3     		bcc	.L1734
ARM GAS  /tmp/ccQlyisH.s 			page 633


 24434 003a 28AB     		add	r3, sp, #160
 24435 003c 03EB8703 		add	r3, r3, r7, lsl #2
 24436 0040 53F8288C 		ldr	r8, [r3, #-40]
 24437 0044 53F8506C 		ldr	r6, [r3, #-80]
 24438              	.LVL1887:
 24439              	.LBB3355:
4343:src/xeq.c     **** 		int R = end[i] - 1;
 24440              		.loc 1 4343 3 is_stmt 1 view .LVU6346
4344:src/xeq.c     **** 		if (L<R) {
 24441              		.loc 1 4344 3 view .LVU6347
4344:src/xeq.c     **** 		if (L<R) {
 24442              		.loc 1 4344 7 is_stmt 0 view .LVU6348
 24443 0048 08F1FF34 		add	r4, r8, #-1
 24444              	.LVL1888:
4345:src/xeq.c     **** 			const int pvt = s + L;
 24445              		.loc 1 4345 3 is_stmt 1 view .LVU6349
4345:src/xeq.c     **** 			const int pvt = s + L;
 24446              		.loc 1 4345 6 is_stmt 0 view .LVU6350
 24447 004c B442     		cmp	r4, r6
 24448 004e F2DD     		ble	.L1737
 24449              	.LVL1889:
 24450              	.L1759:
 24451              	.LBB3353:
4346:src/xeq.c     **** 			getRegister(&pivot, pvt);
 24452              		.loc 1 4346 4 is_stmt 1 view .LVU6351
4347:src/xeq.c     **** 			while (L<R) {
 24453              		.loc 1 4347 4 view .LVU6352
4346:src/xeq.c     **** 			getRegister(&pivot, pvt);
 24454              		.loc 1 4346 14 is_stmt 0 view .LVU6353
 24455 0050 0099     		ldr	r1, [sp]
4347:src/xeq.c     **** 			while (L<R) {
 24456              		.loc 1 4347 4 view .LVU6354
 24457 0052 02A8     		add	r0, sp, #8
 24458 0054 3144     		add	r1, r1, r6
 24459              	.LVL1890:
4347:src/xeq.c     **** 			while (L<R) {
 24460              		.loc 1 4347 4 view .LVU6355
 24461 0056 FFF7FEFF 		bl	getRegister
 24462              	.LVL1891:
4348:src/xeq.c     **** 				while (L<R) {
 24463              		.loc 1 4348 4 is_stmt 1 view .LVU6356
4348:src/xeq.c     **** 				while (L<R) {
 24464              		.loc 1 4348 10 view .LVU6357
4347:src/xeq.c     **** 			while (L<R) {
 24465              		.loc 1 4347 4 is_stmt 0 view .LVU6358
 24466 005a B146     		mov	r9, r6
 24467              	.L1740:
4350:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
 24468              		.loc 1 4350 6 is_stmt 1 view .LVU6359
 24469 005c 0099     		ldr	r1, [sp]
 24470 005e 0BA8     		add	r0, sp, #44
 24471 0060 2144     		add	r1, r1, r4
 24472 0062 FFF7FEFF 		bl	getRegister
 24473              	.LVL1892:
4351:src/xeq.c     **** 						break;
 24474              		.loc 1 4351 6 view .LVU6360
4351:src/xeq.c     **** 						break;
ARM GAS  /tmp/ccQlyisH.s 			page 634


 24475              		.loc 1 4351 10 is_stmt 0 view .LVU6361
 24476 0066 02A9     		add	r1, sp, #8
 24477 0068 0BA8     		add	r0, sp, #44
 24478 006a FFF7FEFF 		bl	dn_lt
 24479              	.LVL1893:
4353:src/xeq.c     **** 				}
 24480              		.loc 1 4353 6 is_stmt 1 view .LVU6362
4351:src/xeq.c     **** 						break;
 24481              		.loc 1 4351 9 is_stmt 0 view .LVU6363
 24482 006e 00BB     		cbnz	r0, .L1739
4353:src/xeq.c     **** 				}
 24483              		.loc 1 4353 7 view .LVU6364
 24484 0070 013C     		subs	r4, r4, #1
 24485              	.LVL1894:
4349:src/xeq.c     **** 					getRegister(&a, s + R);
 24486              		.loc 1 4349 11 is_stmt 1 view .LVU6365
 24487 0072 4C45     		cmp	r4, r9
 24488 0074 F2DC     		bgt	.L1740
 24489              	.L1741:
 24490              	.LVL1895:
4357:src/xeq.c     **** 					getRegister(&a, s + L);
 24491              		.loc 1 4357 11 is_stmt 0 view .LVU6366
 24492 0076 4D46     		mov	r5, r9
 24493              	.LVL1896:
4348:src/xeq.c     **** 				while (L<R) {
 24494              		.loc 1 4348 10 is_stmt 1 view .LVU6367
 24495              	.L1749:
4366:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
 24496              		.loc 1 4366 4 view .LVU6368
 24497 0078 0098     		ldr	r0, [sp]
 24498 007a 02A9     		add	r1, sp, #8
 24499 007c 2844     		add	r0, r0, r5
 24500 007e FFF7FEFF 		bl	setRegister
 24501              	.LVL1897:
4367:src/xeq.c     **** 				beg[i+1] = beg[i];
 24502              		.loc 1 4367 4 view .LVU6369
4367:src/xeq.c     **** 				beg[i+1] = beg[i];
 24503              		.loc 1 4367 32 is_stmt 0 view .LVU6370
 24504 0082 6B1C     		adds	r3, r5, #1
4367:src/xeq.c     **** 				beg[i+1] = beg[i];
 24505              		.loc 1 4367 28 view .LVU6371
 24506 0084 A8EB0302 		sub	r2, r8, r3
4367:src/xeq.c     **** 				beg[i+1] = beg[i];
 24507              		.loc 1 4367 10 view .LVU6372
 24508 0088 A91B     		subs	r1, r5, r6
4367:src/xeq.c     **** 				beg[i+1] = beg[i];
 24509              		.loc 1 4367 7 view .LVU6373
 24510 008a 9142     		cmp	r1, r2
4368:src/xeq.c     **** 				end[i+1] = L;
 24511              		.loc 1 4368 10 view .LVU6374
 24512 008c 07F10101 		add	r1, r7, #1
4370:src/xeq.c     **** 			} else {
 24513              		.loc 1 4370 12 view .LVU6375
 24514 0090 28AA     		add	r2, sp, #160
 24515 0092 02EB8700 		add	r0, r2, r7, lsl #2
4368:src/xeq.c     **** 				end[i+1] = L;
 24516              		.loc 1 4368 14 view .LVU6376
ARM GAS  /tmp/ccQlyisH.s 			page 635


 24517 0096 02EB8102 		add	r2, r2, r1, lsl #2
 24518 009a 0F46     		mov	r7, r1
 24519              	.LVL1898:
4367:src/xeq.c     **** 				beg[i+1] = beg[i];
 24520              		.loc 1 4367 7 view .LVU6377
 24521 009c 2DDA     		bge	.L1745
4368:src/xeq.c     **** 				end[i+1] = L;
 24522              		.loc 1 4368 5 is_stmt 1 view .LVU6378
4368:src/xeq.c     **** 				end[i+1] = L;
 24523              		.loc 1 4368 14 is_stmt 0 view .LVU6379
 24524 009e 42F8506C 		str	r6, [r2, #-80]
4369:src/xeq.c     **** 				beg[i] = L+1;
 24525              		.loc 1 4369 5 is_stmt 1 view .LVU6380
4370:src/xeq.c     **** 			} else {
 24526              		.loc 1 4370 12 is_stmt 0 view .LVU6381
 24527 00a2 40F8503C 		str	r3, [r0, #-80]
 24528 00a6 52F8506C 		ldr	r6, [r2, #-80]
4369:src/xeq.c     **** 				beg[i] = L+1;
 24529              		.loc 1 4369 14 view .LVU6382
 24530 00aa 42F8285C 		str	r5, [r2, #-40]
4370:src/xeq.c     **** 			} else {
 24531              		.loc 1 4370 5 is_stmt 1 view .LVU6383
 24532 00ae A846     		mov	r8, r5
 24533 00b0 BDE7     		b	.L1748
 24534              	.LVL1899:
 24535              	.L1739:
4355:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 24536              		.loc 1 4355 5 view .LVU6384
4355:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 24537              		.loc 1 4355 8 is_stmt 0 view .LVU6385
 24538 00b2 A145     		cmp	r9, r4
 24539 00b4 DFDA     		bge	.L1741
4356:src/xeq.c     **** 				while (L<R) {
 24540              		.loc 1 4356 6 is_stmt 1 view .LVU6386
 24541 00b6 0098     		ldr	r0, [sp]
4356:src/xeq.c     **** 				while (L<R) {
 24542              		.loc 1 4356 21 is_stmt 0 view .LVU6387
 24543 00b8 09F10105 		add	r5, r9, #1
 24544              	.LVL1900:
4356:src/xeq.c     **** 				while (L<R) {
 24545              		.loc 1 4356 6 view .LVU6388
 24546 00bc 0119     		adds	r1, r0, r4
 24547 00be 4844     		add	r0, r0, r9
 24548 00c0 FFF7FEFF 		bl	copyreg_n
 24549              	.LVL1901:
4357:src/xeq.c     **** 					getRegister(&a, s + L);
 24550              		.loc 1 4357 11 is_stmt 1 view .LVU6389
 24551 00c4 A542     		cmp	r5, r4
 24552 00c6 03DB     		blt	.L1743
 24553 00c8 21E0     		b	.L1750
 24554              	.L1760:
4361:src/xeq.c     **** 				}
 24555              		.loc 1 4361 7 is_stmt 0 view .LVU6390
 24556 00ca 0135     		adds	r5, r5, #1
 24557              	.LVL1902:
4357:src/xeq.c     **** 					getRegister(&a, s + L);
 24558              		.loc 1 4357 11 is_stmt 1 view .LVU6391
ARM GAS  /tmp/ccQlyisH.s 			page 636


 24559 00cc A542     		cmp	r5, r4
 24560 00ce D3D0     		beq	.L1749
 24561              	.L1743:
4358:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
 24562              		.loc 1 4358 6 view .LVU6392
 24563 00d0 0099     		ldr	r1, [sp]
 24564 00d2 0BA8     		add	r0, sp, #44
 24565 00d4 2944     		add	r1, r1, r5
 24566 00d6 FFF7FEFF 		bl	getRegister
 24567              	.LVL1903:
4359:src/xeq.c     **** 						break;
 24568              		.loc 1 4359 6 view .LVU6393
4359:src/xeq.c     **** 						break;
 24569              		.loc 1 4359 10 is_stmt 0 view .LVU6394
 24570 00da 0BA9     		add	r1, sp, #44
 24571 00dc 02A8     		add	r0, sp, #8
 24572 00de FFF7FEFF 		bl	dn_lt
 24573              	.LVL1904:
4361:src/xeq.c     **** 				}
 24574              		.loc 1 4361 6 is_stmt 1 view .LVU6395
4359:src/xeq.c     **** 						break;
 24575              		.loc 1 4359 9 is_stmt 0 view .LVU6396
 24576 00e2 0028     		cmp	r0, #0
 24577 00e4 F1D0     		beq	.L1760
4363:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
 24578              		.loc 1 4363 5 is_stmt 1 view .LVU6397
4364:src/xeq.c     **** 			}
 24579              		.loc 1 4364 6 view .LVU6398
 24580 00e6 0098     		ldr	r0, [sp]
 24581 00e8 4119     		adds	r1, r0, r5
 24582 00ea 2044     		add	r0, r0, r4
4364:src/xeq.c     **** 			}
 24583              		.loc 1 4364 21 is_stmt 0 view .LVU6399
 24584 00ec 013C     		subs	r4, r4, #1
 24585              	.LVL1905:
4364:src/xeq.c     **** 			}
 24586              		.loc 1 4364 6 view .LVU6400
 24587 00ee FFF7FEFF 		bl	copyreg_n
 24588              	.LVL1906:
4348:src/xeq.c     **** 				while (L<R) {
 24589              		.loc 1 4348 10 is_stmt 1 view .LVU6401
 24590 00f2 A542     		cmp	r5, r4
 24591 00f4 C0DA     		bge	.L1749
 24592 00f6 A946     		mov	r9, r5
4349:src/xeq.c     **** 					getRegister(&a, s + R);
 24593              		.loc 1 4349 11 view .LVU6402
 24594 00f8 B0E7     		b	.L1740
 24595              	.LVL1907:
 24596              	.L1745:
4372:src/xeq.c     **** 				end[i+1] = end[i];
 24597              		.loc 1 4372 5 view .LVU6403
4373:src/xeq.c     **** 				end[i] = L;
 24598              		.loc 1 4373 14 is_stmt 0 view .LVU6404
 24599 00fa 42F8288C 		str	r8, [r2, #-40]
4374:src/xeq.c     **** 			}
 24600              		.loc 1 4374 12 view .LVU6405
 24601 00fe 40F8285C 		str	r5, [r0, #-40]
ARM GAS  /tmp/ccQlyisH.s 			page 637


 24602 0102 52F8288C 		ldr	r8, [r2, #-40]
4372:src/xeq.c     **** 				end[i+1] = end[i];
 24603              		.loc 1 4372 14 view .LVU6406
 24604 0106 42F8503C 		str	r3, [r2, #-80]
4373:src/xeq.c     **** 				end[i] = L;
 24605              		.loc 1 4373 5 is_stmt 1 view .LVU6407
4374:src/xeq.c     **** 			}
 24606              		.loc 1 4374 5 view .LVU6408
4376:src/xeq.c     **** 		} else
 24607              		.loc 1 4376 4 view .LVU6409
 24608              	.LVL1908:
4376:src/xeq.c     **** 		} else
 24609              		.loc 1 4376 4 is_stmt 0 view .LVU6410
 24610              	.LBE3353:
 24611              	.LBE3355:
4342:src/xeq.c     **** 		int L = beg[i];
 24612              		.loc 1 4342 8 is_stmt 1 view .LVU6411
 24613              	.LBB3356:
 24614              	.LBB3354:
4374:src/xeq.c     **** 			}
 24615              		.loc 1 4374 12 is_stmt 0 view .LVU6412
 24616 010a 1E46     		mov	r6, r3
 24617 010c 8FE7     		b	.L1748
 24618              	.LVL1909:
 24619              	.L1750:
4357:src/xeq.c     **** 					getRegister(&a, s + L);
 24620              		.loc 1 4357 11 view .LVU6413
 24621 010e A946     		mov	r9, r5
 24622              	.LVL1910:
4357:src/xeq.c     **** 					getRegister(&a, s + L);
 24623              		.loc 1 4357 11 view .LVU6414
 24624 0110 4D46     		mov	r5, r9
 24625              	.LVL1911:
4348:src/xeq.c     **** 				while (L<R) {
 24626              		.loc 1 4348 10 is_stmt 1 view .LVU6415
 24627 0112 B1E7     		b	.L1749
 24628              	.LBE3354:
 24629              	.LBE3356:
 24630              		.cfi_endproc
 24631              	.LFE231:
 24633              		.section	.text.reset_volatile_state,"ax",%progbits
 24634              		.align	1
 24635              		.p2align 2,,3
 24636              		.global	reset_volatile_state
 24637              		.syntax unified
 24638              		.thumb
 24639              		.thumb_func
 24640              		.fpu fpv4-sp-d16
 24642              	reset_volatile_state:
 24643              	.LFB233:
4415:src/xeq.c     **** 	// extern int IntMaxWindow;
 24644              		.loc 1 4415 33 view -0
 24645              		.cfi_startproc
 24646              		@ args = 0, pretend = 0, frame = 0
 24647              		@ frame_needed = 0, uses_anonymous_args = 0
 24648              		@ link register save eliminated.
4418:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
ARM GAS  /tmp/ccQlyisH.s 			page 638


 24649              		.loc 1 4418 2 view .LVU6417
4418:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24650              		.loc 1 4418 16 is_stmt 0 view .LVU6418
 24651 0000 034B     		ldr	r3, .L1762
 24652 0002 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
4419:src/xeq.c     **** }
 24653              		.loc 1 4419 15 view .LVU6419
 24654 0004 0021     		movs	r1, #0
4418:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24655              		.loc 1 4418 16 view .LVU6420
 24656 0006 6FF3C502 		bfc	r2, #3, #3
 24657 000a 1A75     		strb	r2, [r3, #20]
4419:src/xeq.c     **** }
 24658              		.loc 1 4419 2 is_stmt 1 view .LVU6421
4419:src/xeq.c     **** }
 24659              		.loc 1 4419 15 is_stmt 0 view .LVU6422
 24660 000c 5974     		strb	r1, [r3, #17]
4420:src/xeq.c     **** 
 24661              		.loc 1 4420 1 view .LVU6423
 24662 000e 7047     		bx	lr
 24663              	.L1763:
 24664              		.align	2
 24665              	.L1762:
 24666 0010 00000000 		.word	StateWhileOn
 24667              		.cfi_endproc
 24668              	.LFE233:
 24670              		.section	.rodata.busy.str1.4,"aMS",%progbits,1
 24671              		.align	2
 24672              	.LC7:
 24673 0000 57616974 		.ascii	"Wait...\000"
 24673      2E2E2E00 
 24674              		.section	.text.busy,"ax",%progbits
 24675              		.align	1
 24676              		.p2align 2,,3
 24677              		.global	busy
 24678              		.syntax unified
 24679              		.thumb
 24680              		.thumb_func
 24681              		.fpu fpv4-sp-d16
 24683              	busy:
 24684              	.LFB234:
4427:src/xeq.c     **** 	/*
 24685              		.loc 1 4427 1 is_stmt 1 view -0
 24686              		.cfi_startproc
 24687              		@ args = 0, pretend = 0, frame = 0
 24688              		@ frame_needed = 0, uses_anonymous_args = 0
 24689              		@ link register save eliminated.
4431:src/xeq.c     **** 
 24690              		.loc 1 4431 12 view .LVU6425
4436:src/xeq.c     **** 
 24691              		.loc 1 4436 17 view .LVU6426
4441:src/xeq.c     **** 		Busy = 1;
 24692              		.loc 1 4441 2 view .LVU6427
4441:src/xeq.c     **** 		Busy = 1;
 24693              		.loc 1 4441 6 is_stmt 0 view .LVU6428
 24694 0000 054A     		ldr	r2, .L1767
4441:src/xeq.c     **** 		Busy = 1;
ARM GAS  /tmp/ccQlyisH.s 			page 639


 24695              		.loc 1 4441 15 view .LVU6429
 24696 0002 064B     		ldr	r3, .L1767+4
4441:src/xeq.c     **** 		Busy = 1;
 24697              		.loc 1 4441 12 view .LVU6430
 24698 0004 1168     		ldr	r1, [r2]
 24699 0006 1B68     		ldr	r3, [r3]
 24700 0008 1943     		orrs	r1, r1, r3
 24701 000a 00D0     		beq	.L1766
4445:src/xeq.c     **** 
 24702              		.loc 1 4445 1 view .LVU6431
 24703 000c 7047     		bx	lr
 24704              	.L1766:
 24705              	.LBB3359:
 24706              	.LBI3359:
4426:src/xeq.c     **** {
 24707              		.loc 1 4426 6 is_stmt 1 view .LVU6432
 24708              	.LBB3360:
4442:src/xeq.c     **** 		message("Wait...", NULL);
 24709              		.loc 1 4442 3 view .LVU6433
4442:src/xeq.c     **** 		message("Wait...", NULL);
 24710              		.loc 1 4442 8 is_stmt 0 view .LVU6434
 24711 000e 0123     		movs	r3, #1
4443:src/xeq.c     **** 	}
 24712              		.loc 1 4443 3 view .LVU6435
 24713 0010 0348     		ldr	r0, .L1767+8
4442:src/xeq.c     **** 		message("Wait...", NULL);
 24714              		.loc 1 4442 8 view .LVU6436
 24715 0012 1360     		str	r3, [r2]
4443:src/xeq.c     **** 	}
 24716              		.loc 1 4443 3 is_stmt 1 view .LVU6437
 24717 0014 FFF7FEBF 		b	message
 24718              	.LVL1912:
 24719              	.L1768:
 24720              		.align	2
 24721              	.L1767:
 24722 0018 00000000 		.word	Busy
 24723 001c 00000000 		.word	Running
 24724 0020 00000000 		.word	.LC7
 24725              	.LBE3360:
 24726              	.LBE3359:
 24727              		.cfi_endproc
 24728              	.LFE234:
 24730              		.section	.text.intMonadic,"ax",%progbits
 24731              		.align	1
 24732              		.p2align 2,,3
 24733              		.global	intMonadic
 24734              		.syntax unified
 24735              		.thumb
 24736              		.thumb_func
 24737              		.fpu fpv4-sp-d16
 24739              	intMonadic:
 24740              	.LVL1913:
 24741              	.LFB238:
4523:src/xeq.c     **** 	int s;
 24742              		.loc 1 4523 43 view -0
 24743              		.cfi_startproc
 24744              		@ args = 0, pretend = 0, frame = 80
ARM GAS  /tmp/ccQlyisH.s 			page 640


 24745              		@ frame_needed = 0, uses_anonymous_args = 0
4524:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
 24746              		.loc 1 4524 2 view .LVU6439
4525:src/xeq.c     **** 	decNumber rx, r;
 24747              		.loc 1 4525 2 view .LVU6440
4523:src/xeq.c     **** 	int s;
 24748              		.loc 1 4523 43 is_stmt 0 view .LVU6441
 24749 0000 30B5     		push	{r4, r5, lr}
 24750              		.cfi_def_cfa_offset 12
 24751              		.cfi_offset 4, -12
 24752              		.cfi_offset 5, -8
 24753              		.cfi_offset 14, -4
 24754 0002 95B0     		sub	sp, sp, #84
 24755              		.cfi_def_cfa_offset 96
4525:src/xeq.c     **** 	decNumber rx, r;
 24756              		.loc 1 4525 30 view .LVU6442
 24757 0004 01AA     		add	r2, sp, #4
 24758 0006 FFF7FEFF 		bl	extract_value
 24759              	.LVL1914:
4527:src/xeq.c     **** 
 24760              		.loc 1 4527 19 view .LVU6443
 24761 000a 1E4A     		ldr	r2, .L1784
4529:src/xeq.c     **** 		bad_mode_error();
 24762              		.loc 1 4529 6 view .LVU6444
 24763 000c 1E4B     		ldr	r3, .L1784+4
4527:src/xeq.c     **** 
 24764              		.loc 1 4527 15 view .LVU6445
 24765 000e 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4529:src/xeq.c     **** 		bad_mode_error();
 24766              		.loc 1 4529 6 view .LVU6446
 24767 0010 04EB4404 		add	r4, r4, r4, lsl #1
 24768 0014 53F83440 		ldr	r4, [r3, r4, lsl #3]
 24769              	.LVL1915:
4526:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 24770              		.loc 1 4526 2 is_stmt 1 view .LVU6447
4527:src/xeq.c     **** 
 24771              		.loc 1 4527 2 view .LVU6448
4529:src/xeq.c     **** 		bad_mode_error();
 24772              		.loc 1 4529 2 view .LVU6449
4529:src/xeq.c     **** 		bad_mode_error();
 24773              		.loc 1 4529 5 is_stmt 0 view .LVU6450
 24774 0018 5CB1     		cbz	r4, .L1774
 24775              	.LBB3378:
4532:src/xeq.c     **** #ifndef REALBUILD
 24776              		.loc 1 4532 3 is_stmt 1 view .LVU6451
 24777              	.LVL1916:
4534:src/xeq.c     **** 			bad_mode_error();
 24778              		.loc 1 4534 3 view .LVU6452
 24779              	.LBB3379:
 24780              	.LBI3379:
4461:src/xeq.c     **** {
 24781              		.loc 1 4461 24 view .LVU6453
 24782              	.LBB3380:
4463:src/xeq.c     **** 	if (xp < xrom)
 24783              		.loc 1 4463 2 view .LVU6454
4464:src/xeq.c     **** 		return NULL;
 24784              		.loc 1 4464 5 is_stmt 0 view .LVU6455
ARM GAS  /tmp/ccQlyisH.s 			page 641


 24785 001a 1C4B     		ldr	r3, .L1784+8
4463:src/xeq.c     **** 	if (xp < xrom)
 24786              		.loc 1 4463 59 view .LVU6456
 24787 001c 24F00102 		bic	r2, r4, #1
 24788              	.LVL1917:
4464:src/xeq.c     **** 		return NULL;
 24789              		.loc 1 4464 2 is_stmt 1 view .LVU6457
4464:src/xeq.c     **** 		return NULL;
 24790              		.loc 1 4464 5 is_stmt 0 view .LVU6458
 24791 0020 9A42     		cmp	r2, r3
 24792 0022 10D3     		bcc	.L1773
4468:src/xeq.c     **** 		return NULL;
 24793              		.loc 1 4468 2 is_stmt 1 view .LVU6459
4468:src/xeq.c     **** 		return NULL;
 24794              		.loc 1 4468 17 is_stmt 0 view .LVU6460
 24795 0024 1A4D     		ldr	r5, .L1784+12
 24796 0026 2D88     		ldrh	r5, [r5]
 24797 0028 03EB4503 		add	r3, r3, r5, lsl #1
4468:src/xeq.c     **** 		return NULL;
 24798              		.loc 1 4468 5 view .LVU6461
 24799 002c 9A42     		cmp	r2, r3
 24800 002e 0AD2     		bcs	.L1773
 24801              	.LVL1918:
4468:src/xeq.c     **** 		return NULL;
 24802              		.loc 1 4468 5 view .LVU6462
 24803              	.LBE3380:
 24804              	.LBE3379:
4534:src/xeq.c     **** 			bad_mode_error();
 24805              		.loc 1 4534 6 view .LVU6463
 24806 0030 4AB1     		cbz	r2, .L1773
 24807              	.LVL1919:
 24808              	.L1774:
4534:src/xeq.c     **** 			bad_mode_error();
 24809              		.loc 1 4534 6 view .LVU6464
 24810              	.LBE3378:
4530:src/xeq.c     **** 	else {
 24811              		.loc 1 4530 3 is_stmt 1 view .LVU6465
 24812              	.LBB3389:
 24813              	.LBI3389:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 24814              		.loc 1 566 6 view .LVU6466
 24815              	.LBE3389:
 567:src/xeq.c     **** }
 24816              		.loc 1 567 2 view .LVU6467
 24817              	.LBB3398:
 24818              	.LBB3390:
 24819              	.LBI3390:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24820              		.loc 1 537 5 view .LVU6468
 24821              	.LBB3391:
 538:src/xeq.c     **** 		Error = e;
 24822              		.loc 1 538 2 view .LVU6469
 538:src/xeq.c     **** 		Error = e;
 24823              		.loc 1 538 12 is_stmt 0 view .LVU6470
 24824 0032 184B     		ldr	r3, .L1784+16
 538:src/xeq.c     **** 		Error = e;
 24825              		.loc 1 538 5 view .LVU6471
ARM GAS  /tmp/ccQlyisH.s 			page 642


 24826 0034 1A68     		ldr	r2, [r3]
 24827 0036 1AB1     		cbz	r2, .L1771
 24828              	.LVL1920:
 24829              	.L1782:
 24830              	.LBB3392:
 24831              	.LBB3393:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 24832              		.loc 1 540 3 is_stmt 1 view .LVU6472
 24833              	.LBE3393:
 24834              	.LBE3392:
 24835              	.LBE3391:
 24836              	.LBE3390:
 24837              	.LBE3398:
4548:src/xeq.c     **** }
 24838              		.loc 1 4548 9 is_stmt 0 view .LVU6473
 24839 0038 0020     		movs	r0, #0
 24840 003a 0146     		mov	r1, r0
4549:src/xeq.c     **** 
 24841              		.loc 1 4549 1 view .LVU6474
 24842 003c 15B0     		add	sp, sp, #84
 24843              		.cfi_remember_state
 24844              		.cfi_def_cfa_offset 12
 24845              		@ sp needed
 24846 003e 30BD     		pop	{r4, r5, pc}
 24847              	.LVL1921:
 24848              	.L1771:
 24849              		.cfi_restore_state
 24850              	.LBB3399:
 24851              	.LBB3397:
 24852              	.LBB3396:
 24853              	.LBB3395:
 24854              	.LBI3392:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24855              		.loc 1 537 5 is_stmt 1 view .LVU6475
 24856              	.LBB3394:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24857              		.loc 1 539 3 view .LVU6476
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24858              		.loc 1 539 9 is_stmt 0 view .LVU6477
 24859 0040 0D22     		movs	r2, #13
 24860 0042 1A60     		str	r2, [r3]
 24861 0044 F8E7     		b	.L1782
 24862              	.LVL1922:
 24863              	.L1773:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24864              		.loc 1 539 9 view .LVU6478
 24865              	.LBE3394:
 24866              	.LBE3395:
 24867              	.LBE3396:
 24868              	.LBE3397:
 24869              	.LBE3399:
 24870              	.LBB3400:
4539:src/xeq.c     **** 			if (s)
 24871              		.loc 1 4539 4 is_stmt 1 view .LVU6479
 24872 0046 0246     		mov	r2, r0
 24873 0048 0B46     		mov	r3, r1
 24874 004a 02A8     		add	r0, sp, #8
ARM GAS  /tmp/ccQlyisH.s 			page 643


 24875              	.LVL1923:
4539:src/xeq.c     **** 			if (s)
 24876              		.loc 1 4539 4 is_stmt 0 view .LVU6480
 24877 004c FFF7FEFF 		bl	ullint_to_dn
 24878              	.LVL1924:
4540:src/xeq.c     **** 				dn_minus(&rx, &rx);
 24879              		.loc 1 4540 4 is_stmt 1 view .LVU6481
4540:src/xeq.c     **** 				dn_minus(&rx, &rx);
 24880              		.loc 1 4540 7 is_stmt 0 view .LVU6482
 24881 0050 019B     		ldr	r3, [sp, #4]
 24882 0052 8BB9     		cbnz	r3, .L1783
 24883              	.L1775:
4542:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24884              		.loc 1 4542 4 is_stmt 1 view .LVU6483
4542:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24885              		.loc 1 4542 16 is_stmt 0 view .LVU6484
 24886 0054 02A9     		add	r1, sp, #8
 24887 0056 0BA8     		add	r0, sp, #44
 24888 0058 A047     		blx	r4
 24889              	.LVL1925:
4542:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24890              		.loc 1 4542 7 view .LVU6485
 24891 005a 40B9     		cbnz	r0, .L1776
4543:src/xeq.c     **** 			else
 24892              		.loc 1 4543 5 is_stmt 1 view .LVU6486
 24893              	.LVL1926:
 24894              	.LBB3381:
 24895              	.LBI3381:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24896              		.loc 1 537 5 view .LVU6487
 24897              	.LBB3382:
 538:src/xeq.c     **** 		Error = e;
 24898              		.loc 1 538 2 view .LVU6488
 538:src/xeq.c     **** 		Error = e;
 24899              		.loc 1 538 12 is_stmt 0 view .LVU6489
 24900 005c 0D4B     		ldr	r3, .L1784+16
 538:src/xeq.c     **** 		Error = e;
 24901              		.loc 1 538 5 view .LVU6490
 24902 005e 1A68     		ldr	r2, [r3]
 24903 0060 002A     		cmp	r2, #0
 24904 0062 E9D1     		bne	.L1782
 24905              	.LVL1927:
 24906              	.LBB3383:
 24907              	.LBI3383:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24908              		.loc 1 537 5 is_stmt 1 view .LVU6491
 24909              	.LBB3384:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24910              		.loc 1 539 3 view .LVU6492
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24911              		.loc 1 539 9 is_stmt 0 view .LVU6493
 24912 0064 0122     		movs	r2, #1
 24913              	.LBE3384:
 24914              	.LBE3383:
 24915              	.LBE3382:
 24916              	.LBE3381:
 24917              	.LBE3400:
ARM GAS  /tmp/ccQlyisH.s 			page 644


4548:src/xeq.c     **** }
 24918              		.loc 1 4548 9 view .LVU6494
 24919 0066 0146     		mov	r1, r0
 24920              	.LBB3401:
 24921              	.LBB3388:
 24922              	.LBB3387:
 24923              	.LBB3386:
 24924              	.LBB3385:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24925              		.loc 1 539 9 view .LVU6495
 24926 0068 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 24927              		.loc 1 540 3 is_stmt 1 view .LVU6496
 24928              	.LBE3385:
 24929              	.LBE3386:
 24930              	.LBE3387:
 24931              	.LBE3388:
 24932              	.LBE3401:
4549:src/xeq.c     **** 
 24933              		.loc 1 4549 1 is_stmt 0 view .LVU6497
 24934 006a 15B0     		add	sp, sp, #84
 24935              		.cfi_remember_state
 24936              		.cfi_def_cfa_offset 12
 24937              		@ sp needed
 24938 006c 30BD     		pop	{r4, r5, pc}
 24939              	.LVL1928:
 24940              	.L1776:
 24941              		.cfi_restore_state
 24942              	.LBB3402:
4545:src/xeq.c     **** 		}
 24943              		.loc 1 4545 5 is_stmt 1 view .LVU6498
4545:src/xeq.c     **** 		}
 24944              		.loc 1 4545 12 is_stmt 0 view .LVU6499
 24945 006e 0BA8     		add	r0, sp, #44
 24946 0070 FFF7FEFF 		bl	intResult
 24947              	.LVL1929:
 24948              	.LBE3402:
4549:src/xeq.c     **** 
 24949              		.loc 1 4549 1 view .LVU6500
 24950 0074 15B0     		add	sp, sp, #84
 24951              		.cfi_remember_state
 24952              		.cfi_def_cfa_offset 12
 24953              		@ sp needed
 24954 0076 30BD     		pop	{r4, r5, pc}
 24955              	.LVL1930:
 24956              	.L1783:
 24957              		.cfi_restore_state
 24958              	.LBB3403:
4541:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
 24959              		.loc 1 4541 5 is_stmt 1 view .LVU6501
 24960 0078 02A9     		add	r1, sp, #8
 24961 007a 0846     		mov	r0, r1
 24962 007c FFF7FEFF 		bl	dn_minus
 24963              	.LVL1931:
 24964 0080 E8E7     		b	.L1775
 24965              	.L1785:
 24966 0082 00BF     		.align	2
ARM GAS  /tmp/ccQlyisH.s 			page 645


 24967              	.L1784:
 24968 0084 00000000 		.word	XeqOpCode
 24969 0088 00000000 		.word	monfuncs
 24970 008c 00000000 		.word	xrom
 24971 0090 00000000 		.word	xrom_size
 24972 0094 00000000 		.word	Error
 24973              	.LBE3403:
 24974              		.cfi_endproc
 24975              	.LFE238:
 24977              		.section	.text.intDyadic,"ax",%progbits
 24978              		.align	1
 24979              		.p2align 2,,3
 24980              		.global	intDyadic
 24981              		.syntax unified
 24982              		.thumb
 24983              		.thumb_func
 24984              		.fpu fpv4-sp-d16
 24986              	intDyadic:
 24987              	.LVL1932:
 24988              	.LFB239:
4554:src/xeq.c     **** 	int sx, sy;
 24989              		.loc 1 4554 59 view -0
 24990              		.cfi_startproc
 24991              		@ args = 0, pretend = 0, frame = 120
 24992              		@ frame_needed = 0, uses_anonymous_args = 0
4555:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 24993              		.loc 1 4555 2 view .LVU6503
4556:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 24994              		.loc 1 4556 2 view .LVU6504
4554:src/xeq.c     **** 	int sx, sy;
 24995              		.loc 1 4554 59 is_stmt 0 view .LVU6505
 24996 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 24997              		.cfi_def_cfa_offset 24
 24998              		.cfi_offset 4, -24
 24999              		.cfi_offset 5, -20
 25000              		.cfi_offset 6, -16
 25001              		.cfi_offset 7, -12
 25002              		.cfi_offset 8, -8
 25003              		.cfi_offset 14, -4
 25004 0004 9EB0     		sub	sp, sp, #120
 25005              		.cfi_def_cfa_offset 144
4554:src/xeq.c     **** 	int sx, sy;
 25006              		.loc 1 4554 59 view .LVU6506
 25007 0006 0546     		mov	r5, r0
 25008 0008 0C46     		mov	r4, r1
4556:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25009              		.loc 1 4556 30 view .LVU6507
 25010 000a 1046     		mov	r0, r2
 25011              	.LVL1933:
4556:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25012              		.loc 1 4556 30 view .LVU6508
 25013 000c 1946     		mov	r1, r3
 25014 000e 01AA     		add	r2, sp, #4
 25015              	.LVL1934:
4556:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25016              		.loc 1 4556 30 view .LVU6509
 25017 0010 FFF7FEFF 		bl	extract_value
ARM GAS  /tmp/ccQlyisH.s 			page 646


 25018              	.LVL1935:
4557:src/xeq.c     **** 	decNumber rx, ry, r;
 25019              		.loc 1 4557 30 view .LVU6510
 25020 0014 02AA     		add	r2, sp, #8
4556:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25021              		.loc 1 4556 30 view .LVU6511
 25022 0016 0B46     		mov	r3, r1
 25023 0018 0646     		mov	r6, r0
4557:src/xeq.c     **** 	decNumber rx, ry, r;
 25024              		.loc 1 4557 30 view .LVU6512
 25025 001a 2146     		mov	r1, r4
 25026 001c 2846     		mov	r0, r5
4556:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25027              		.loc 1 4556 30 view .LVU6513
 25028 001e 1D46     		mov	r5, r3
 25029              	.LVL1936:
4557:src/xeq.c     **** 	decNumber rx, ry, r;
 25030              		.loc 1 4557 2 is_stmt 1 view .LVU6514
4557:src/xeq.c     **** 	decNumber rx, ry, r;
 25031              		.loc 1 4557 30 is_stmt 0 view .LVU6515
 25032 0020 FFF7FEFF 		bl	extract_value
 25033              	.LVL1937:
4559:src/xeq.c     **** 
 25034              		.loc 1 4559 19 view .LVU6516
 25035 0024 264A     		ldr	r2, .L1806
4561:src/xeq.c     **** 		bad_mode_error();
 25036              		.loc 1 4561 6 view .LVU6517
 25037 0026 274B     		ldr	r3, .L1806+4
4559:src/xeq.c     **** 
 25038              		.loc 1 4559 15 view .LVU6518
 25039 0028 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4561:src/xeq.c     **** 		bad_mode_error();
 25040              		.loc 1 4561 6 view .LVU6519
 25041 002a 04EB4404 		add	r4, r4, r4, lsl #1
 25042 002e 53F83440 		ldr	r4, [r3, r4, lsl #3]
 25043              	.LVL1938:
4558:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 25044              		.loc 1 4558 2 is_stmt 1 view .LVU6520
4559:src/xeq.c     **** 
 25045              		.loc 1 4559 2 view .LVU6521
4561:src/xeq.c     **** 		bad_mode_error();
 25046              		.loc 1 4561 2 view .LVU6522
4561:src/xeq.c     **** 		bad_mode_error();
 25047              		.loc 1 4561 5 is_stmt 0 view .LVU6523
 25048 0032 6CB1     		cbz	r4, .L1791
 25049              	.LBB3421:
 25050              	.LBB3422:
 25051              	.LBB3423:
4464:src/xeq.c     **** 		return NULL;
 25052              		.loc 1 4464 5 view .LVU6524
 25053 0034 244B     		ldr	r3, .L1806+8
4463:src/xeq.c     **** 	if (xp < xrom)
 25054              		.loc 1 4463 59 view .LVU6525
 25055 0036 24F00102 		bic	r2, r4, #1
 25056              	.LVL1939:
4464:src/xeq.c     **** 		return NULL;
 25057              		.loc 1 4464 5 view .LVU6526
ARM GAS  /tmp/ccQlyisH.s 			page 647


 25058 003a 9A42     		cmp	r2, r3
 25059 003c 0746     		mov	r7, r0
 25060 003e 8846     		mov	r8, r1
 25061              	.LBE3423:
 25062              	.LBE3422:
4564:src/xeq.c     **** 
 25063              		.loc 1 4564 3 is_stmt 1 view .LVU6527
 25064              	.LVL1940:
4567:src/xeq.c     **** 			bad_mode_error();
 25065              		.loc 1 4567 3 view .LVU6528
 25066              	.LBB3425:
 25067              	.LBI3422:
4461:src/xeq.c     **** {
 25068              		.loc 1 4461 24 view .LVU6529
 25069              	.LBB3424:
4463:src/xeq.c     **** 	if (xp < xrom)
 25070              		.loc 1 4463 2 view .LVU6530
4464:src/xeq.c     **** 		return NULL;
 25071              		.loc 1 4464 2 view .LVU6531
4464:src/xeq.c     **** 		return NULL;
 25072              		.loc 1 4464 5 is_stmt 0 view .LVU6532
 25073 0040 11D3     		bcc	.L1790
4468:src/xeq.c     **** 		return NULL;
 25074              		.loc 1 4468 2 is_stmt 1 view .LVU6533
4468:src/xeq.c     **** 		return NULL;
 25075              		.loc 1 4468 17 is_stmt 0 view .LVU6534
 25076 0042 2249     		ldr	r1, .L1806+12
 25077              	.LVL1941:
4468:src/xeq.c     **** 		return NULL;
 25078              		.loc 1 4468 17 view .LVU6535
 25079 0044 0988     		ldrh	r1, [r1]
 25080 0046 03EB4103 		add	r3, r3, r1, lsl #1
4468:src/xeq.c     **** 		return NULL;
 25081              		.loc 1 4468 5 view .LVU6536
 25082 004a 9A42     		cmp	r2, r3
 25083 004c 0BD2     		bcs	.L1790
 25084              	.LVL1942:
4468:src/xeq.c     **** 		return NULL;
 25085              		.loc 1 4468 5 view .LVU6537
 25086              	.LBE3424:
 25087              	.LBE3425:
4567:src/xeq.c     **** 			bad_mode_error();
 25088              		.loc 1 4567 6 view .LVU6538
 25089 004e 52B1     		cbz	r2, .L1790
 25090              	.LVL1943:
 25091              	.L1791:
4567:src/xeq.c     **** 			bad_mode_error();
 25092              		.loc 1 4567 6 view .LVU6539
 25093              	.LBE3421:
4562:src/xeq.c     **** 	else {
 25094              		.loc 1 4562 3 is_stmt 1 view .LVU6540
 25095              	.LBB3434:
 25096              	.LBI3434:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 25097              		.loc 1 566 6 view .LVU6541
 25098              	.LBE3434:
 567:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 648


 25099              		.loc 1 567 2 view .LVU6542
 25100              	.LBB3443:
 25101              	.LBB3435:
 25102              	.LBI3435:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25103              		.loc 1 537 5 view .LVU6543
 25104              	.LBB3436:
 538:src/xeq.c     **** 		Error = e;
 25105              		.loc 1 538 2 view .LVU6544
 538:src/xeq.c     **** 		Error = e;
 25106              		.loc 1 538 12 is_stmt 0 view .LVU6545
 25107 0050 1F4B     		ldr	r3, .L1806+16
 538:src/xeq.c     **** 		Error = e;
 25108              		.loc 1 538 5 view .LVU6546
 25109 0052 1A68     		ldr	r2, [r3]
 25110 0054 22B1     		cbz	r2, .L1788
 25111              	.LVL1944:
 25112              	.L1803:
 25113              	.LBB3437:
 25114              	.LBB3438:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25115              		.loc 1 540 3 is_stmt 1 view .LVU6547
 25116              	.LBE3438:
 25117              	.LBE3437:
 25118              	.LBE3436:
 25119              	.LBE3435:
 25120              	.LBE3443:
4581:src/xeq.c     **** }
 25121              		.loc 1 4581 9 is_stmt 0 view .LVU6548
 25122 0056 0020     		movs	r0, #0
 25123 0058 0146     		mov	r1, r0
4582:src/xeq.c     **** 
 25124              		.loc 1 4582 1 view .LVU6549
 25125 005a 1EB0     		add	sp, sp, #120
 25126              		.cfi_remember_state
 25127              		.cfi_def_cfa_offset 24
 25128              		@ sp needed
 25129 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25130              	.LVL1945:
 25131              	.L1788:
 25132              		.cfi_restore_state
 25133              	.LBB3444:
 25134              	.LBB3442:
 25135              	.LBB3441:
 25136              	.LBB3440:
 25137              	.LBI3437:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25138              		.loc 1 537 5 is_stmt 1 view .LVU6550
 25139              	.LBB3439:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25140              		.loc 1 539 3 view .LVU6551
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25141              		.loc 1 539 9 is_stmt 0 view .LVU6552
 25142 0060 0D22     		movs	r2, #13
 25143 0062 1A60     		str	r2, [r3]
 25144 0064 F7E7     		b	.L1803
 25145              	.LVL1946:
ARM GAS  /tmp/ccQlyisH.s 			page 649


 25146              	.L1790:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25147              		.loc 1 539 9 view .LVU6553
 25148              	.LBE3439:
 25149              	.LBE3440:
 25150              	.LBE3441:
 25151              	.LBE3442:
 25152              	.LBE3444:
 25153              	.LBB3445:
4572:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25154              		.loc 1 4572 4 is_stmt 1 view .LVU6554
 25155 0066 2B46     		mov	r3, r5
 25156 0068 3246     		mov	r2, r6
 25157 006a 03A8     		add	r0, sp, #12
 25158              	.LVL1947:
4572:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25159              		.loc 1 4572 4 is_stmt 0 view .LVU6555
 25160 006c FFF7FEFF 		bl	ullint_to_dn
 25161              	.LVL1948:
4572:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25162              		.loc 1 4572 27 is_stmt 1 view .LVU6556
4572:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25163              		.loc 1 4572 30 is_stmt 0 view .LVU6557
 25164 0070 019B     		ldr	r3, [sp, #4]
 25165 0072 03BB     		cbnz	r3, .L1804
 25166              	.L1792:
4573:src/xeq.c     **** 
 25167              		.loc 1 4573 4 is_stmt 1 view .LVU6558
 25168 0074 4346     		mov	r3, r8
 25169 0076 3A46     		mov	r2, r7
 25170 0078 0CA8     		add	r0, sp, #48
 25171 007a FFF7FEFF 		bl	ullint_to_dn
 25172              	.LVL1949:
4573:src/xeq.c     **** 
 25173              		.loc 1 4573 27 view .LVU6559
4573:src/xeq.c     **** 
 25174              		.loc 1 4573 30 is_stmt 0 view .LVU6560
 25175 007e 029B     		ldr	r3, [sp, #8]
 25176 0080 A3B9     		cbnz	r3, .L1805
 25177              	.L1793:
4575:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25178              		.loc 1 4575 4 is_stmt 1 view .LVU6561
4575:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25179              		.loc 1 4575 16 is_stmt 0 view .LVU6562
 25180 0082 03AA     		add	r2, sp, #12
 25181 0084 0CA9     		add	r1, sp, #48
 25182 0086 15A8     		add	r0, sp, #84
 25183 0088 A047     		blx	r4
 25184              	.LVL1950:
4575:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25185              		.loc 1 4575 7 view .LVU6563
 25186 008a 48B9     		cbnz	r0, .L1794
4576:src/xeq.c     **** 			else
 25187              		.loc 1 4576 5 is_stmt 1 view .LVU6564
 25188              	.LVL1951:
 25189              	.LBB3426:
 25190              	.LBI3426:
ARM GAS  /tmp/ccQlyisH.s 			page 650


 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25191              		.loc 1 537 5 view .LVU6565
 25192              	.LBB3427:
 538:src/xeq.c     **** 		Error = e;
 25193              		.loc 1 538 2 view .LVU6566
 538:src/xeq.c     **** 		Error = e;
 25194              		.loc 1 538 12 is_stmt 0 view .LVU6567
 25195 008c 104B     		ldr	r3, .L1806+16
 538:src/xeq.c     **** 		Error = e;
 25196              		.loc 1 538 5 view .LVU6568
 25197 008e 1A68     		ldr	r2, [r3]
 25198 0090 002A     		cmp	r2, #0
 25199 0092 E0D1     		bne	.L1803
 25200              	.LVL1952:
 25201              	.LBB3428:
 25202              	.LBI3428:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25203              		.loc 1 537 5 is_stmt 1 view .LVU6569
 25204              	.LBB3429:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25205              		.loc 1 539 3 view .LVU6570
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25206              		.loc 1 539 9 is_stmt 0 view .LVU6571
 25207 0094 0122     		movs	r2, #1
 25208              	.LBE3429:
 25209              	.LBE3428:
 25210              	.LBE3427:
 25211              	.LBE3426:
 25212              	.LBE3445:
4581:src/xeq.c     **** }
 25213              		.loc 1 4581 9 view .LVU6572
 25214 0096 0146     		mov	r1, r0
 25215              	.LBB3446:
 25216              	.LBB3433:
 25217              	.LBB3432:
 25218              	.LBB3431:
 25219              	.LBB3430:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25220              		.loc 1 539 9 view .LVU6573
 25221 0098 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25222              		.loc 1 540 3 is_stmt 1 view .LVU6574
 25223              	.LBE3430:
 25224              	.LBE3431:
 25225              	.LBE3432:
 25226              	.LBE3433:
 25227              	.LBE3446:
4582:src/xeq.c     **** 
 25228              		.loc 1 4582 1 is_stmt 0 view .LVU6575
 25229 009a 1EB0     		add	sp, sp, #120
 25230              		.cfi_remember_state
 25231              		.cfi_def_cfa_offset 24
 25232              		@ sp needed
 25233 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25234              	.LVL1953:
 25235              	.L1794:
 25236              		.cfi_restore_state
ARM GAS  /tmp/ccQlyisH.s 			page 651


 25237              	.LBB3447:
4578:src/xeq.c     **** 		}
 25238              		.loc 1 4578 5 is_stmt 1 view .LVU6576
4578:src/xeq.c     **** 		}
 25239              		.loc 1 4578 12 is_stmt 0 view .LVU6577
 25240 00a0 15A8     		add	r0, sp, #84
 25241 00a2 FFF7FEFF 		bl	intResult
 25242              	.LVL1954:
 25243              	.LBE3447:
4582:src/xeq.c     **** 
 25244              		.loc 1 4582 1 view .LVU6578
 25245 00a6 1EB0     		add	sp, sp, #120
 25246              		.cfi_remember_state
 25247              		.cfi_def_cfa_offset 24
 25248              		@ sp needed
 25249 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25250              	.LVL1955:
 25251              	.L1805:
 25252              		.cfi_restore_state
 25253              	.LBB3448:
4573:src/xeq.c     **** 
 25254              		.loc 1 4573 35 is_stmt 1 discriminator 1 view .LVU6579
 25255 00ac 0CA9     		add	r1, sp, #48
 25256 00ae 0846     		mov	r0, r1
 25257 00b0 FFF7FEFF 		bl	dn_minus
 25258              	.LVL1956:
 25259 00b4 E5E7     		b	.L1793
 25260              	.L1804:
4572:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25261              		.loc 1 4572 35 discriminator 1 view .LVU6580
 25262 00b6 03A9     		add	r1, sp, #12
 25263 00b8 0846     		mov	r0, r1
 25264 00ba FFF7FEFF 		bl	dn_minus
 25265              	.LVL1957:
 25266 00be D9E7     		b	.L1792
 25267              	.L1807:
 25268              		.align	2
 25269              	.L1806:
 25270 00c0 00000000 		.word	XeqOpCode
 25271 00c4 00000000 		.word	dyfuncs
 25272 00c8 00000000 		.word	xrom
 25273 00cc 00000000 		.word	xrom_size
 25274 00d0 00000000 		.word	Error
 25275              	.LBE3448:
 25276              		.cfi_endproc
 25277              	.LFE239:
 25279              		.section	.text.xeq_init_contexts,"ax",%progbits
 25280              		.align	1
 25281              		.p2align 2,,3
 25282              		.global	xeq_init_contexts
 25283              		.syntax unified
 25284              		.thumb
 25285              		.thumb_func
 25286              		.fpu fpv4-sp-d16
 25288              	xeq_init_contexts:
 25289              	.LFB256:
5587:src/xeq.c     **** 	/*
ARM GAS  /tmp/ccQlyisH.s 			page 652


 25290              		.loc 1 5587 30 view -0
 25291              		.cfi_startproc
 25292              		@ args = 0, pretend = 0, frame = 0
 25293              		@ frame_needed = 0, uses_anonymous_args = 0
5591:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
 25294              		.loc 1 5591 2 view .LVU6582
5592:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25295              		.loc 1 5592 2 view .LVU6583
5587:src/xeq.c     **** 	/*
 25296              		.loc 1 5587 30 is_stmt 0 view .LVU6584
 25297 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 25298              		.cfi_def_cfa_offset 24
 25299              		.cfi_offset 3, -24
 25300              		.cfi_offset 4, -20
 25301              		.cfi_offset 5, -16
 25302              		.cfi_offset 6, -12
 25303              		.cfi_offset 7, -8
 25304              		.cfi_offset 14, -4
5592:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25305              		.loc 1 5592 17 view .LVU6585
 25306 0002 1D4B     		ldr	r3, .L1813
5595:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25307              		.loc 1 5595 13 view .LVU6586
 25308 0004 1D4F     		ldr	r7, .L1813+4
5592:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25309              		.loc 1 5592 17 view .LVU6587
 25310 0006 1A68     		ldr	r2, [r3]
5592:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25311              		.loc 1 5592 34 view .LVU6588
 25312 0008 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
5593:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25313              		.loc 1 5593 21 view .LVU6589
 25314 000c 92F8CF17 		ldrb	r1, [r2, #1999]	@ zero_extendqisi2
5595:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25315              		.loc 1 5595 36 view .LVU6590
 25316 0010 5088     		ldrh	r0, [r2, #2]
5597:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25317              		.loc 1 5597 34 view .LVU6591
 25318 0012 B2F9E247 		ldrsh	r4, [r2, #2018]
5592:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25319              		.loc 1 5592 59 view .LVU6592
 25320 0016 13F02003 		ands	r3, r3, #32
 25321 001a 18BF     		it	ne
 25322 001c 4623     		movne	r3, #70
5593:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25323              		.loc 1 5593 19 view .LVU6593
 25324 001e C1F16401 		rsb	r1, r1, #100
5592:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25325              		.loc 1 5592 59 view .LVU6594
 25326 0022 1E46     		mov	r6, r3
5593:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25327              		.loc 1 5593 36 view .LVU6595
 25328 0024 C3EB8103 		rsb	r3, r3, r1, lsl #2
5596:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25329              		.loc 1 5596 31 view .LVU6596
 25330 0028 03F20E21 		addw	r1, r3, #526
 25331 002c 89B2     		uxth	r1, r1
ARM GAS  /tmp/ccQlyisH.s 			page 653


5597:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25332              		.loc 1 5597 21 view .LVU6597
 25333 002e 0D1A     		subs	r5, r1, r0
5594:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25334              		.loc 1 5594 22 view .LVU6598
 25335 0030 03F50573 		add	r3, r3, #532
5595:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25336              		.loc 1 5595 34 view .LVU6599
 25337 0034 181A     		subs	r0, r3, r0
5597:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25338              		.loc 1 5597 32 view .LVU6600
 25339 0036 2544     		add	r5, r5, r4
5594:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25340              		.loc 1 5594 11 view .LVU6601
 25341 0038 141D     		adds	r4, r2, #4
5595:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25342              		.loc 1 5595 13 view .LVU6602
 25343 003a 3860     		str	r0, [r7]
5594:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25344              		.loc 1 5594 22 view .LVU6603
 25345 003c 04EB4303 		add	r3, r4, r3, lsl #1
5592:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25346              		.loc 1 5592 15 view .LVU6604
 25347 0040 0F48     		ldr	r0, .L1813+8
5594:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25348              		.loc 1 5594 9 view .LVU6605
 25349 0042 104C     		ldr	r4, .L1813+12
5597:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25350              		.loc 1 5597 11 view .LVU6606
 25351 0044 104F     		ldr	r7, .L1813+16
5594:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25352              		.loc 1 5594 9 view .LVU6607
 25353 0046 2360     		str	r3, [r4]
5592:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25354              		.loc 1 5592 15 view .LVU6608
 25355 0048 0660     		str	r6, [r0]
5593:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25356              		.loc 1 5593 2 is_stmt 1 view .LVU6609
 25357              	.LVL1958:
5594:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25358              		.loc 1 5594 2 view .LVU6610
5595:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25359              		.loc 1 5595 2 view .LVU6611
5596:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25360              		.loc 1 5596 2 view .LVU6612
5596:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25361              		.loc 1 5596 10 is_stmt 0 view .LVU6613
 25362 004a 1180     		strh	r1, [r2]	@ movhi
5597:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25363              		.loc 1 5597 2 is_stmt 1 view .LVU6614
5598:src/xeq.c     **** 
 25364              		.loc 1 5598 14 is_stmt 0 view .LVU6615
 25365 004c 6420     		movs	r0, #100
5597:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25366              		.loc 1 5597 11 view .LVU6616
 25367 004e 3D60     		str	r5, [r7]
5598:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 654


 25368              		.loc 1 5598 2 is_stmt 1 view .LVU6617
5598:src/xeq.c     **** 
 25369              		.loc 1 5598 14 is_stmt 0 view .LVU6618
 25370 0050 FFF7FEFF 		bl	get_reg_n
 25371              	.LVL1959:
5604:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25372              		.loc 1 5604 2 view .LVU6619
 25373 0054 0D4C     		ldr	r4, .L1813+20
5598:src/xeq.c     **** 
 25374              		.loc 1 5598 12 view .LVU6620
 25375 0056 0E4B     		ldr	r3, .L1813+24
5598:src/xeq.c     **** 
 25376              		.loc 1 5598 14 view .LVU6621
 25377 0058 0246     		mov	r2, r0
5604:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25378              		.loc 1 5604 2 view .LVU6622
 25379 005a 0021     		movs	r1, #0
 25380 005c 2046     		mov	r0, r4
5598:src/xeq.c     **** 
 25381              		.loc 1 5598 12 view .LVU6623
 25382 005e 1A60     		str	r2, [r3]
5604:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25383              		.loc 1 5604 2 is_stmt 1 view .LVU6624
 25384 0060 FFF7FEFF 		bl	decContextDefault
 25385              	.LVL1960:
5605:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25386              		.loc 1 5605 2 view .LVU6625
5605:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25387              		.loc 1 5605 13 is_stmt 0 view .LVU6626
 25388 0064 2723     		movs	r3, #39
5606:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 25389              		.loc 1 5606 10 view .LVU6627
 25390 0066 0B49     		ldr	r1, .L1813+28
5607:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 25391              		.loc 1 5607 10 view .LVU6628
 25392 0068 0B4A     		ldr	r2, .L1813+32
5605:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25393              		.loc 1 5605 13 view .LVU6629
 25394 006a 2360     		str	r3, [r4]
5606:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 25395              		.loc 1 5606 2 is_stmt 1 view .LVU6630
5608:src/xeq.c     **** }
 25396              		.loc 1 5608 12 is_stmt 0 view .LVU6631
 25397 006c 0323     		movs	r3, #3
 25398 006e 2373     		strb	r3, [r4, #12]
5607:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 25399              		.loc 1 5607 10 view .LVU6632
 25400 0070 C4E90112 		strd	r1, r2, [r4, #4]
5608:src/xeq.c     **** }
 25401              		.loc 1 5608 2 is_stmt 1 view .LVU6633
5609:src/xeq.c     **** 
 25402              		.loc 1 5609 1 is_stmt 0 view .LVU6634
 25403 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 25404              	.L1814:
 25405 0076 00BF     		.align	2
 25406              	.L1813:
 25407 0078 00000000 		.word	main_ram
ARM GAS  /tmp/ccQlyisH.s 			page 655


 25408 007c 00000000 		.word	RetStkSize
 25409 0080 00000000 		.word	SizeStatRegs
 25410 0084 00000000 		.word	RetStk
 25411 0088 00000000 		.word	ProgFree
 25412 008c 00000000 		.word	Ctx
 25413 0090 00000000 		.word	StackBase
 25414 0094 3F420F00 		.word	999999
 25415 0098 C1BDF0FF 		.word	-999999
 25416              		.cfi_endproc
 25417              	.LFE256:
 25419              		.section	.text.not_running,"ax",%progbits
 25420              		.align	1
 25421              		.p2align 2,,3
 25422              		.global	not_running
 25423              		.syntax unified
 25424              		.thumb
 25425              		.thumb_func
 25426              		.fpu fpv4-sp-d16
 25428              	not_running:
 25429              	.LFB257:
5757:src/xeq.c     **** 	if ( Running ) {
 25430              		.loc 1 5757 23 is_stmt 1 view -0
 25431              		.cfi_startproc
 25432              		@ args = 0, pretend = 0, frame = 0
 25433              		@ frame_needed = 0, uses_anonymous_args = 0
 25434              		@ link register save eliminated.
5758:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25435              		.loc 1 5758 2 view .LVU6636
5758:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25436              		.loc 1 5758 7 is_stmt 0 view .LVU6637
 25437 0000 064B     		ldr	r3, .L1820
5758:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25438              		.loc 1 5758 5 view .LVU6638
 25439 0002 1B68     		ldr	r3, [r3]
 25440 0004 0BB9     		cbnz	r3, .L1819
5762:src/xeq.c     **** }
 25441              		.loc 1 5762 9 view .LVU6639
 25442 0006 0120     		movs	r0, #1
 25443 0008 7047     		bx	lr
 25444              	.L1819:
5759:src/xeq.c     **** 		return 0;
 25445              		.loc 1 5759 3 is_stmt 1 view .LVU6640
 25446              	.LVL1961:
 25447              	.LBB3453:
 25448              	.LBI3453:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25449              		.loc 1 537 5 view .LVU6641
 25450              	.LBB3454:
 538:src/xeq.c     **** 		Error = e;
 25451              		.loc 1 538 2 view .LVU6642
 538:src/xeq.c     **** 		Error = e;
 25452              		.loc 1 538 12 is_stmt 0 view .LVU6643
 25453 000a 054B     		ldr	r3, .L1820+4
 25454 000c 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 25455              		.loc 1 538 5 view .LVU6644
 25456 000e 10B9     		cbnz	r0, .L1818
ARM GAS  /tmp/ccQlyisH.s 			page 656


 25457              	.LVL1962:
 25458              	.LBB3455:
 25459              	.LBI3455:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25460              		.loc 1 537 5 is_stmt 1 view .LVU6645
 25461              	.LBB3456:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25462              		.loc 1 539 3 view .LVU6646
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25463              		.loc 1 539 9 is_stmt 0 view .LVU6647
 25464 0010 0722     		movs	r2, #7
 25465 0012 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25466              		.loc 1 540 3 is_stmt 1 view .LVU6648
 25467 0014 7047     		bx	lr
 25468              	.LVL1963:
 25469              	.L1818:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25470              		.loc 1 540 3 is_stmt 0 view .LVU6649
 25471              	.LBE3456:
 25472              	.LBE3455:
 25473              	.LBE3454:
 25474              	.LBE3453:
5760:src/xeq.c     **** 	}
 25475              		.loc 1 5760 10 view .LVU6650
 25476 0016 0020     		movs	r0, #0
 25477              	.LVL1964:
5763:src/xeq.c     **** 
 25478              		.loc 1 5763 1 view .LVU6651
 25479 0018 7047     		bx	lr
 25480              	.L1821:
 25481 001a 00BF     		.align	2
 25482              	.L1820:
 25483 001c 00000000 		.word	Running
 25484 0020 00000000 		.word	Error
 25485              		.cfi_endproc
 25486              	.LFE257:
 25488              		.section	.text.set_running_off_sst,"ax",%progbits
 25489              		.align	1
 25490              		.p2align 2,,3
 25491              		.global	set_running_off_sst
 25492              		.syntax unified
 25493              		.thumb
 25494              		.thumb_func
 25495              		.fpu fpv4-sp-d16
 25497              	set_running_off_sst:
 25498              	.LFB258:
5768:src/xeq.c     **** 	Running = 0;
 25499              		.loc 1 5768 28 is_stmt 1 view -0
 25500              		.cfi_startproc
 25501              		@ args = 0, pretend = 0, frame = 0
 25502              		@ frame_needed = 0, uses_anonymous_args = 0
 25503              		@ link register save eliminated.
5769:src/xeq.c     **** }
 25504              		.loc 1 5769 2 view .LVU6653
5769:src/xeq.c     **** }
 25505              		.loc 1 5769 10 is_stmt 0 view .LVU6654
ARM GAS  /tmp/ccQlyisH.s 			page 657


 25506 0000 014B     		ldr	r3, .L1823
 25507 0002 0022     		movs	r2, #0
 25508 0004 1A60     		str	r2, [r3]
5770:src/xeq.c     **** 
 25509              		.loc 1 5770 1 view .LVU6655
 25510 0006 7047     		bx	lr
 25511              	.L1824:
 25512              		.align	2
 25513              	.L1823:
 25514 0008 00000000 		.word	Running
 25515              		.cfi_endproc
 25516              	.LFE258:
 25518              		.section	.text.set_running_on_sst,"ax",%progbits
 25519              		.align	1
 25520              		.p2align 2,,3
 25521              		.global	set_running_on_sst
 25522              		.syntax unified
 25523              		.thumb
 25524              		.thumb_func
 25525              		.fpu fpv4-sp-d16
 25527              	set_running_on_sst:
 25528              	.LFB259:
5772:src/xeq.c     **** 	Running = 1;
 25529              		.loc 1 5772 27 is_stmt 1 view -0
 25530              		.cfi_startproc
 25531              		@ args = 0, pretend = 0, frame = 0
 25532              		@ frame_needed = 0, uses_anonymous_args = 0
 25533              		@ link register save eliminated.
5773:src/xeq.c     **** }
 25534              		.loc 1 5773 2 view .LVU6657
5773:src/xeq.c     **** }
 25535              		.loc 1 5773 10 is_stmt 0 view .LVU6658
 25536 0000 014B     		ldr	r3, .L1826
 25537 0002 0122     		movs	r2, #1
 25538 0004 1A60     		str	r2, [r3]
5774:src/xeq.c     **** 
 25539              		.loc 1 5774 1 view .LVU6659
 25540 0006 7047     		bx	lr
 25541              	.L1827:
 25542              		.align	2
 25543              	.L1826:
 25544 0008 00000000 		.word	Running
 25545              		.cfi_endproc
 25546              	.LFE259:
 25548              		.section	.text.set_running_off,"ax",%progbits
 25549              		.align	1
 25550              		.p2align 2,,3
 25551              		.global	set_running_off
 25552              		.syntax unified
 25553              		.thumb
 25554              		.thumb_func
 25555              		.fpu fpv4-sp-d16
 25557              	set_running_off:
 25558              	.LFB260:
5776:src/xeq.c     **** 	set_running_off_sst();
 25559              		.loc 1 5776 24 is_stmt 1 view -0
 25560              		.cfi_startproc
ARM GAS  /tmp/ccQlyisH.s 			page 658


 25561              		@ args = 0, pretend = 0, frame = 0
 25562              		@ frame_needed = 0, uses_anonymous_args = 0
 25563              		@ link register save eliminated.
5777:src/xeq.c     **** 	State.entryp = 0;
 25564              		.loc 1 5777 2 view .LVU6661
 25565              	.LBB3457:
 25566              	.LBI3457:
5768:src/xeq.c     **** 	Running = 0;
 25567              		.loc 1 5768 6 view .LVU6662
 25568              	.LBB3458:
5769:src/xeq.c     **** }
 25569              		.loc 1 5769 2 view .LVU6663
 25570              	.LBE3458:
 25571              	.LBE3457:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 25572              		.loc 1 5778 15 is_stmt 0 view .LVU6664
 25573 0000 064B     		ldr	r3, .L1829
 25574              	.LBB3461:
 25575              	.LBB3459:
5769:src/xeq.c     **** }
 25576              		.loc 1 5769 10 view .LVU6665
 25577 0002 074A     		ldr	r2, .L1829+4
 25578              	.LBE3459:
 25579              	.LBE3461:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 25580              		.loc 1 5778 15 view .LVU6666
 25581 0004 1B68     		ldr	r3, [r3]
 25582              	.LBB3462:
 25583              	.LBB3460:
5769:src/xeq.c     **** }
 25584              		.loc 1 5769 10 view .LVU6667
 25585 0006 0021     		movs	r1, #0
 25586 0008 1160     		str	r1, [r2]
 25587              	.LBE3460:
 25588              	.LBE3462:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 25589              		.loc 1 5778 2 is_stmt 1 view .LVU6668
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 25590              		.loc 1 5778 15 is_stmt 0 view .LVU6669
 25591 000a 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 25592 000e 61F30412 		bfi	r2, r1, #4, #1
 25593 0012 83F8DD27 		strb	r2, [r3, #2013]
 25594              		.loc 1 5779 2 is_stmt 1 view .LVU6670
 25595 0016 8A20     		movs	r0, #138
 25596 0018 FFF7FEBF 		b	dot
 25597              	.LVL1965:
 25598              	.L1830:
 25599              		.align	2
 25600              	.L1829:
 25601 001c 00000000 		.word	main_ram
 25602 0020 00000000 		.word	Running
 25603              		.cfi_endproc
 25604              	.LFE260:
 25606              		.section	.text.set_running_on,"ax",%progbits
 25607              		.align	1
 25608              		.p2align 2,,3
 25609              		.global	set_running_on
ARM GAS  /tmp/ccQlyisH.s 			page 659


 25610              		.syntax unified
 25611              		.thumb
 25612              		.thumb_func
 25613              		.fpu fpv4-sp-d16
 25615              	set_running_on:
 25616              	.LFB261:
5780:src/xeq.c     **** }
5781:src/xeq.c     **** 
5782:src/xeq.c     **** void set_running_on() {
 25617              		.loc 1 5782 23 view -0
 25618              		.cfi_startproc
 25619              		@ args = 0, pretend = 0, frame = 0
 25620              		@ frame_needed = 0, uses_anonymous_args = 0
5783:src/xeq.c     **** 	update_speed(0);
 25621              		.loc 1 5783 17 view .LVU6672
5784:src/xeq.c     **** 	GoFast = 1;
 25622              		.loc 1 5784 2 view .LVU6673
5782:src/xeq.c     **** 	update_speed(0);
 25623              		.loc 1 5782 23 is_stmt 0 view .LVU6674
 25624 0000 38B5     		push	{r3, r4, r5, lr}
 25625              		.cfi_def_cfa_offset 16
 25626              		.cfi_offset 3, -16
 25627              		.cfi_offset 4, -12
 25628              		.cfi_offset 5, -8
 25629              		.cfi_offset 14, -4
 25630              	.LBB3463:
 25631              	.LBB3464:
 183:src/xeq.c     **** }
 25632              		.loc 1 183 9 view .LVU6675
 25633 0002 0C4B     		ldr	r3, .L1837
 25634              	.LBE3464:
 25635              	.LBE3463:
 25636              		.loc 1 5784 9 view .LVU6676
 25637 0004 0C4D     		ldr	r5, .L1837+4
 25638              	.LBB3468:
 25639              	.LBB3465:
 183:src/xeq.c     **** }
 25640              		.loc 1 183 9 view .LVU6677
 25641 0006 1B68     		ldr	r3, [r3]
 25642              	.LBE3465:
 25643              	.LBE3468:
 25644              	.LBB3469:
 25645              	.LBB3470:
5773:src/xeq.c     **** }
 25646              		.loc 1 5773 10 view .LVU6678
 25647 0008 0C4C     		ldr	r4, .L1837+8
 25648              	.LBE3470:
 25649              	.LBE3469:
 25650              	.LBB3472:
 25651              	.LBB3466:
 183:src/xeq.c     **** }
 25652              		.loc 1 183 9 view .LVU6679
 25653 000a B3F8E037 		ldrh	r3, [r3, #2016]
 25654              	.LBE3466:
 25655              	.LBE3472:
5785:src/xeq.c     **** 	set_running_on_sst();
5786:src/xeq.c     **** 	LastKey = 0;
ARM GAS  /tmp/ccQlyisH.s 			page 660


 25656              		.loc 1 5786 10 view .LVU6680
 25657 000e 0C49     		ldr	r1, .L1837+12
5787:src/xeq.c     **** 	if (!is_xrom())
 25658              		.loc 1 5787 5 view .LVU6681
 25659 0010 9B0B     		lsrs	r3, r3, #14
5784:src/xeq.c     **** 	set_running_on_sst();
 25660              		.loc 1 5784 9 view .LVU6682
 25661 0012 0122     		movs	r2, #1
5786:src/xeq.c     **** 	if (!is_xrom())
 25662              		.loc 1 5786 10 view .LVU6683
 25663 0014 0020     		movs	r0, #0
 25664              		.loc 1 5787 5 view .LVU6684
 25665 0016 032B     		cmp	r3, #3
5784:src/xeq.c     **** 	set_running_on_sst();
 25666              		.loc 1 5784 9 view .LVU6685
 25667 0018 2A60     		str	r2, [r5]
5785:src/xeq.c     **** 	LastKey = 0;
 25668              		.loc 1 5785 2 is_stmt 1 view .LVU6686
 25669              	.LBB3473:
 25670              	.LBI3469:
5772:src/xeq.c     **** 	Running = 1;
 25671              		.loc 1 5772 6 view .LVU6687
 25672              	.LBB3471:
5773:src/xeq.c     **** }
 25673              		.loc 1 5773 2 view .LVU6688
5773:src/xeq.c     **** }
 25674              		.loc 1 5773 10 is_stmt 0 view .LVU6689
 25675 001a 2260     		str	r2, [r4]
 25676              	.LBE3471:
 25677              	.LBE3473:
5786:src/xeq.c     **** 	if (!is_xrom())
 25678              		.loc 1 5786 2 is_stmt 1 view .LVU6690
5786:src/xeq.c     **** 	if (!is_xrom())
 25679              		.loc 1 5786 10 is_stmt 0 view .LVU6691
 25680 001c C874     		strb	r0, [r1, #19]
 25681              		.loc 1 5787 2 is_stmt 1 view .LVU6692
 25682              	.LBB3474:
 25683              	.LBI3463:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 25684              		.loc 1 182 5 view .LVU6693
 25685              	.LBB3467:
 183:src/xeq.c     **** }
 25686              		.loc 1 183 2 view .LVU6694
 25687              	.LBE3467:
 25688              	.LBE3474:
 25689              		.loc 1 5787 5 is_stmt 0 view .LVU6695
 25690 001e 01D0     		beq	.L1832
5788:src/xeq.c     **** 		error_message(ERR_NONE);
 25691              		.loc 1 5788 3 is_stmt 1 view .LVU6696
 25692 0020 FFF7FEFF 		bl	error_message
 25693              	.LVL1966:
 25694              	.L1832:
5789:src/xeq.c     **** 	dot(BEG, 0);
 25695              		.loc 1 5789 2 view .LVU6697
 25696 0024 0021     		movs	r1, #0
 25697 0026 8820     		movs	r0, #136
 25698 0028 FFF7FEFF 		bl	dot
ARM GAS  /tmp/ccQlyisH.s 			page 661


 25699              	.LVL1967:
5790:src/xeq.c     **** 	finish_display(); // BEG
 25700              		.loc 1 5790 2 view .LVU6698
5791:src/xeq.c     **** }
 25701              		.loc 1 5791 1 is_stmt 0 view .LVU6699
 25702 002c BDE83840 		pop	{r3, r4, r5, lr}
 25703              		.cfi_restore 14
 25704              		.cfi_restore 5
 25705              		.cfi_restore 4
 25706              		.cfi_restore 3
 25707              		.cfi_def_cfa_offset 0
5790:src/xeq.c     **** 	finish_display(); // BEG
 25708              		.loc 1 5790 2 view .LVU6700
 25709 0030 FFF7FEBF 		b	finish_display
 25710              	.LVL1968:
 25711              	.L1838:
 25712              		.align	2
 25713              	.L1837:
 25714 0034 00000000 		.word	main_ram
 25715 0038 00000000 		.word	GoFast
 25716 003c 00000000 		.word	Running
 25717 0040 00000000 		.word	StateWhileOn
 25718              		.cfi_endproc
 25719              	.LFE261:
 25721              		.section	.text.gsbgto,"ax",%progbits
 25722              		.align	1
 25723              		.p2align 2,,3
 25724              		.syntax unified
 25725              		.thumb
 25726              		.thumb_func
 25727              		.fpu fpv4-sp-d16
 25729              	gsbgto:
 25730              	.LVL1969:
 25731              	.LFB152:
2191:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25732              		.loc 1 2191 66 is_stmt 1 view -0
 25733              		.cfi_startproc
 25734              		@ args = 0, pretend = 0, frame = 0
 25735              		@ frame_needed = 0, uses_anonymous_args = 0
2192:src/xeq.c     **** 	raw_set_pc(pc);
 25736              		.loc 1 2192 2 view .LVU6702
2191:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25737              		.loc 1 2191 66 is_stmt 0 view .LVU6703
 25738 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25739              		.cfi_def_cfa_offset 24
 25740              		.cfi_offset 4, -24
 25741              		.cfi_offset 5, -20
 25742              		.cfi_offset 6, -16
 25743              		.cfi_offset 7, -12
 25744              		.cfi_offset 8, -8
 25745              		.cfi_offset 14, -4
2192:src/xeq.c     **** 	raw_set_pc(pc);
 25746              		.loc 1 2192 39 view .LVU6704
 25747 0004 214F     		ldr	r7, .L1850
 25748 0006 3B68     		ldr	r3, [r7]
2191:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25749              		.loc 1 2191 66 view .LVU6705
ARM GAS  /tmp/ccQlyisH.s 			page 662


 25750 0008 0446     		mov	r4, r0
 25751 000a 0D46     		mov	r5, r1
 25752              	.LBB3483:
 25753              	.LBB3484:
 280:src/xeq.c     **** 	update_program_bounds(0);
 25754              		.loc 1 280 11 view .LVU6706
 25755 000c A3F8E007 		strh	r0, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 25756              		.loc 1 281 2 view .LVU6707
 25757 0010 0020     		movs	r0, #0
 25758              	.LVL1970:
 281:src/xeq.c     **** }
 25759              		.loc 1 281 2 view .LVU6708
 25760              	.LBE3484:
 25761              	.LBE3483:
2192:src/xeq.c     **** 	raw_set_pc(pc);
 25762              		.loc 1 2192 27 view .LVU6709
 25763 0012 B3F8EC87 		ldrh	r8, [r3, #2028]
 25764              	.LVL1971:
2193:src/xeq.c     **** 	if (gsb) {
 25765              		.loc 1 2193 2 is_stmt 1 view .LVU6710
 25766              	.LBB3487:
 25767              	.LBI3483:
 279:src/xeq.c     **** 	State.pc = pc;
 25768              		.loc 1 279 13 view .LVU6711
 25769              	.LBB3485:
 280:src/xeq.c     **** 	update_program_bounds(0);
 25770              		.loc 1 280 2 view .LVU6712
 281:src/xeq.c     **** }
 25771              		.loc 1 281 2 view .LVU6713
 25772              	.LBE3485:
 25773              	.LBE3487:
2191:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25774              		.loc 1 2191 66 is_stmt 0 view .LVU6714
 25775 0016 1646     		mov	r6, r2
 25776              	.LBB3488:
 25777              	.LBB3486:
 281:src/xeq.c     **** }
 25778              		.loc 1 281 2 view .LVU6715
 25779 0018 FFF7FEFF 		bl	update_program_bounds
 25780              	.LVL1972:
 281:src/xeq.c     **** }
 25781              		.loc 1 281 2 view .LVU6716
 25782              	.LBE3486:
 25783              	.LBE3488:
2194:src/xeq.c     **** 		if (!Running && !XromRunning) {
 25784              		.loc 1 2194 2 is_stmt 1 view .LVU6717
2194:src/xeq.c     **** 		if (!Running && !XromRunning) {
 25785              		.loc 1 2194 5 is_stmt 0 view .LVU6718
 25786 001c D5B1     		cbz	r5, .L1839
2195:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25787              		.loc 1 2195 3 is_stmt 1 view .LVU6719
2195:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25788              		.loc 1 2195 7 is_stmt 0 view .LVU6720
 25789 001e 1C4B     		ldr	r3, .L1850+4
2195:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25790              		.loc 1 2195 19 view .LVU6721
ARM GAS  /tmp/ccQlyisH.s 			page 663


 25791 0020 1C4A     		ldr	r2, .L1850+8
2195:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25792              		.loc 1 2195 16 view .LVU6722
 25793 0022 1B68     		ldr	r3, [r3]
 25794 0024 1268     		ldr	r2, [r2]
 25795 0026 1343     		orrs	r3, r3, r2
 25796              	.LBB3489:
 25797              	.LBB3490:
1576:src/xeq.c     **** }
 25798              		.loc 1 1576 14 view .LVU6723
 25799 0028 3A68     		ldr	r2, [r7]
 25800              	.LBE3490:
 25801              	.LBE3489:
2195:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25802              		.loc 1 2195 16 view .LVU6724
 25803 002a 1FD0     		beq	.L1842
 25804              	.LVL1973:
 25805              	.L1843:
2203:src/xeq.c     **** 			// Stack is full
 25806              		.loc 1 2203 3 is_stmt 1 view .LVU6725
2203:src/xeq.c     **** 			// Stack is full
 25807              		.loc 1 2203 36 is_stmt 0 view .LVU6726
 25808 002c 1A49     		ldr	r1, .L1850+12
2203:src/xeq.c     **** 			// Stack is full
 25809              		.loc 1 2203 8 view .LVU6727
 25810 002e B2F9E237 		ldrsh	r3, [r2, #2018]
2203:src/xeq.c     **** 			// Stack is full
 25811              		.loc 1 2203 58 view .LVU6728
 25812 0032 91F90110 		ldrsb	r1, [r1, #1]
 25813 0036 0029     		cmp	r1, #0
 25814 0038 A4BF     		itt	ge
 25815 003a 1849     		ldrge	r1, .L1850+16
 25816 003c 0968     		ldrge	r1, [r1]
2203:src/xeq.c     **** 			// Stack is full
 25817              		.loc 1 2203 7 view .LVU6729
 25818 003e C3F10000 		rsb	r0, r3, #0
2203:src/xeq.c     **** 			// Stack is full
 25819              		.loc 1 2203 58 view .LVU6730
 25820 0042 B8BF     		it	lt
 25821 0044 8821     		movlt	r1, #136
2203:src/xeq.c     **** 			// Stack is full
 25822              		.loc 1 2203 6 view .LVU6731
 25823 0046 8842     		cmp	r0, r1
 25824 0048 06DB     		blt	.L1846
2205:src/xeq.c     **** 			// clrretstk();
 25825              		.loc 1 2205 4 is_stmt 1 view .LVU6732
 25826              	.LVL1974:
 25827              	.LBB3492:
 25828              	.LBI3492:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25829              		.loc 1 537 5 view .LVU6733
 25830              	.LBB3493:
 538:src/xeq.c     **** 		Error = e;
 25831              		.loc 1 538 2 view .LVU6734
 538:src/xeq.c     **** 		Error = e;
 25832              		.loc 1 538 12 is_stmt 0 view .LVU6735
 25833 004a 154B     		ldr	r3, .L1850+20
ARM GAS  /tmp/ccQlyisH.s 			page 664


 538:src/xeq.c     **** 		Error = e;
 25834              		.loc 1 538 5 view .LVU6736
 25835 004c 1A68     		ldr	r2, [r3]
 25836 004e 0AB9     		cbnz	r2, .L1839
 25837              	.LVL1975:
 25838              	.LBB3494:
 25839              	.LBI3494:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25840              		.loc 1 537 5 is_stmt 1 view .LVU6737
 25841              	.LBB3495:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25842              		.loc 1 539 3 view .LVU6738
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25843              		.loc 1 539 9 is_stmt 0 view .LVU6739
 25844 0050 0B22     		movs	r2, #11
 25845 0052 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25846              		.loc 1 540 3 is_stmt 1 view .LVU6740
 25847              	.LVL1976:
 25848              	.L1839:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25849              		.loc 1 540 3 is_stmt 0 view .LVU6741
 25850              	.LBE3495:
 25851              	.LBE3494:
 25852              	.LBE3493:
 25853              	.LBE3492:
2213:src/xeq.c     **** 
 25854              		.loc 1 2213 1 view .LVU6742
 25855 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25856              	.LVL1977:
 25857              	.L1846:
2210:src/xeq.c     **** 		}
 25858              		.loc 1 2210 4 is_stmt 1 view .LVU6743
2210:src/xeq.c     **** 		}
 25859              		.loc 1 2210 10 is_stmt 0 view .LVU6744
 25860 0058 1249     		ldr	r1, .L1850+24
2210:src/xeq.c     **** 		}
 25861              		.loc 1 2210 11 view .LVU6745
 25862 005a 013B     		subs	r3, r3, #1
 25863 005c 1BB2     		sxth	r3, r3
2210:src/xeq.c     **** 		}
 25864              		.loc 1 2210 10 view .LVU6746
 25865 005e 0968     		ldr	r1, [r1]
2210:src/xeq.c     **** 		}
 25866              		.loc 1 2210 24 view .LVU6747
 25867 0060 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 25868 0064 21F81360 		strh	r6, [r1, r3, lsl #1]	@ movhi
2213:src/xeq.c     **** 
 25869              		.loc 1 2213 1 view .LVU6748
 25870 0068 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25871              	.LVL1978:
 25872              	.L1842:
2197:src/xeq.c     **** 			set_running_on();
 25873              		.loc 1 2197 4 is_stmt 1 view .LVU6749
 25874              	.LBB3496:
 25875              	.LBI3489:
1575:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
ARM GAS  /tmp/ccQlyisH.s 			page 665


 25876              		.loc 1 1575 6 view .LVU6750
 25877              	.LBB3491:
1576:src/xeq.c     **** }
 25878              		.loc 1 1576 2 view .LVU6751
1576:src/xeq.c     **** }
 25879              		.loc 1 1576 24 is_stmt 0 view .LVU6752
 25880 006c A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
1576:src/xeq.c     **** }
 25881              		.loc 1 1576 12 view .LVU6753
 25882 0070 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 25883              	.LBE3491:
 25884              	.LBE3496:
2198:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
 25885              		.loc 1 2198 4 is_stmt 1 view .LVU6754
 25886 0074 FFF7FEFF 		bl	set_running_on
 25887              	.LVL1979:
2199:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25888              		.loc 1 2199 4 view .LVU6755
2199:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25889              		.loc 1 2199 10 is_stmt 0 view .LVU6756
 25890 0078 A30B     		lsrs	r3, r4, #14
2199:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25891              		.loc 1 2199 7 view .LVU6757
 25892 007a 032B     		cmp	r3, #3
2199:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25893              		.loc 1 2199 24 view .LVU6758
 25894 007c 3A68     		ldr	r2, [r7]
2199:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25895              		.loc 1 2199 7 view .LVU6759
 25896 007e D5D0     		beq	.L1843
2199:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25897              		.loc 1 2199 21 discriminator 1 view .LVU6760
 25898 0080 B2F8EC37 		ldrh	r3, [r2, #2028]
 25899 0084 4345     		cmp	r3, r8
 25900 0086 18BF     		it	ne
 25901 0088 2646     		movne	r6, r4
 25902              	.LVL1980:
2199:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25903              		.loc 1 2199 21 discriminator 1 view .LVU6761
 25904 008a CFE7     		b	.L1843
 25905              	.L1851:
 25906              		.align	2
 25907              	.L1850:
 25908 008c 00000000 		.word	main_ram
 25909 0090 00000000 		.word	Running
 25910 0094 00000000 		.word	XromRunning
 25911 0098 00000000 		.word	XromParams
 25912 009c 00000000 		.word	RetStkSize
 25913 00a0 00000000 		.word	Error
 25914 00a4 00000000 		.word	RetStk
 25915              		.cfi_endproc
 25916              	.LFE152:
 25918              		.section	.text.cmdgtocommon,"ax",%progbits
 25919              		.align	1
 25920              		.p2align 2,,3
 25921              		.global	cmdgtocommon
 25922              		.syntax unified
ARM GAS  /tmp/ccQlyisH.s 			page 666


 25923              		.thumb
 25924              		.thumb_func
 25925              		.fpu fpv4-sp-d16
 25927              	cmdgtocommon:
 25928              	.LVL1981:
 25929              	.LFB155:
2253:src/xeq.c     **** 	if (pc == 0)
 25930              		.loc 1 2253 45 is_stmt 1 view -0
 25931              		.cfi_startproc
 25932              		@ args = 0, pretend = 0, frame = 0
 25933              		@ frame_needed = 0, uses_anonymous_args = 0
 25934              		@ link register save eliminated.
2254:src/xeq.c     **** 		set_running_off();
 25935              		.loc 1 2254 2 view .LVU6763
 25936              	.LBB3503:
 25937              	.LBB3504:
 25938              	.LBB3505:
 25939              	.LBB3506:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 25940              		.loc 1 5778 15 is_stmt 0 view .LVU6764
 25941 0000 0A4A     		ldr	r2, .L1854
 25942              	.LBE3506:
 25943              	.LBE3505:
 25944              	.LBE3504:
 25945              	.LBE3503:
2254:src/xeq.c     **** 		set_running_off();
 25946              		.loc 1 2254 5 view .LVU6765
 25947 0002 0B46     		mov	r3, r1
 25948 0004 59B9     		cbnz	r1, .L1853
 25949              	.LBB3514:
 25950              	.LBI3503:
2253:src/xeq.c     **** 	if (pc == 0)
 25951              		.loc 1 2253 6 is_stmt 1 view .LVU6766
 25952              	.LVL1982:
 25953              	.LBB3513:
2255:src/xeq.c     **** 	else
 25954              		.loc 1 2255 3 view .LVU6767
 25955              	.LBB3512:
 25956              	.LBI3505:
5776:src/xeq.c     **** 	set_running_off_sst();
 25957              		.loc 1 5776 6 view .LVU6768
 25958              	.LBB3511:
5777:src/xeq.c     **** 	State.entryp = 0;
 25959              		.loc 1 5777 2 view .LVU6769
 25960              	.LBB3507:
 25961              	.LBI3507:
5768:src/xeq.c     **** 	Running = 0;
 25962              		.loc 1 5768 6 view .LVU6770
 25963              	.LBB3508:
5769:src/xeq.c     **** }
 25964              		.loc 1 5769 2 view .LVU6771
5769:src/xeq.c     **** }
 25965              		.loc 1 5769 10 is_stmt 0 view .LVU6772
 25966 0006 0A48     		ldr	r0, .L1854+4
 25967              	.LVL1983:
5769:src/xeq.c     **** }
 25968              		.loc 1 5769 10 view .LVU6773
ARM GAS  /tmp/ccQlyisH.s 			page 667


 25969              	.LBE3508:
 25970              	.LBE3507:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 25971              		.loc 1 5778 15 view .LVU6774
 25972 0008 1268     		ldr	r2, [r2]
 25973              	.LBB3510:
 25974              	.LBB3509:
5769:src/xeq.c     **** }
 25975              		.loc 1 5769 10 view .LVU6775
 25976 000a 0160     		str	r1, [r0]
 25977              	.LBE3509:
 25978              	.LBE3510:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 25979              		.loc 1 5778 2 is_stmt 1 view .LVU6776
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 25980              		.loc 1 5778 15 is_stmt 0 view .LVU6777
 25981 000c 92F8DD07 		ldrb	r0, [r2, #2013]	@ zero_extendqisi2
 25982 0010 61F30410 		bfi	r0, r1, #4, #1
 25983              	.LVL1984:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 25984              		.loc 1 5778 15 view .LVU6778
 25985 0014 82F8DD07 		strb	r0, [r2, #2013]
5779:src/xeq.c     **** }
 25986              		.loc 1 5779 2 is_stmt 1 view .LVU6779
 25987 0018 8A20     		movs	r0, #138
 25988 001a FFF7FEBF 		b	dot
 25989              	.LVL1985:
 25990              	.L1853:
5779:src/xeq.c     **** }
 25991              		.loc 1 5779 2 is_stmt 0 view .LVU6780
 25992              	.LBE3511:
 25993              	.LBE3512:
 25994              	.LBE3513:
 25995              	.LBE3514:
2257:src/xeq.c     **** }
 25996              		.loc 1 2257 3 is_stmt 1 view .LVU6781
2257:src/xeq.c     **** }
 25997              		.loc 1 2257 19 is_stmt 0 view .LVU6782
 25998 001e 1268     		ldr	r2, [r2]
2257:src/xeq.c     **** }
 25999              		.loc 1 2257 3 view .LVU6783
 26000 0020 0146     		mov	r1, r0
 26001              	.LVL1986:
2257:src/xeq.c     **** }
 26002              		.loc 1 2257 3 view .LVU6784
 26003 0022 B2F8E027 		ldrh	r2, [r2, #2016]
 26004 0026 1846     		mov	r0, r3
 26005              	.LVL1987:
2257:src/xeq.c     **** }
 26006              		.loc 1 2257 3 view .LVU6785
 26007 0028 FFF7FEBF 		b	gsbgto
 26008              	.LVL1988:
 26009              	.L1855:
2257:src/xeq.c     **** }
 26010              		.loc 1 2257 3 view .LVU6786
 26011              		.align	2
 26012              	.L1854:
ARM GAS  /tmp/ccQlyisH.s 			page 668


 26013 002c 00000000 		.word	main_ram
 26014 0030 00000000 		.word	Running
 26015              		.cfi_endproc
 26016              	.LFE155:
 26018              		.section	.text.cmdgto,"ax",%progbits
 26019              		.align	1
 26020              		.p2align 2,,3
 26021              		.global	cmdgto
 26022              		.syntax unified
 26023              		.thumb
 26024              		.thumb_func
 26025              		.fpu fpv4-sp-d16
 26027              	cmdgto:
 26028              	.LVL1989:
 26029              	.LFB161:
2313:src/xeq.c     **** 	unsigned int lbl;
 26030              		.loc 1 2313 45 is_stmt 1 view -0
 26031              		.cfi_startproc
 26032              		@ args = 0, pretend = 0, frame = 0
 26033              		@ frame_needed = 0, uses_anonymous_args = 0
2314:src/xeq.c     **** 	if (is_xrom())
 26034              		.loc 1 2314 2 view .LVU6788
2315:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26035              		.loc 1 2315 2 view .LVU6789
 26036              	.LBB3515:
 26037              	.LBI3515:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 26038              		.loc 1 182 5 view .LVU6790
 26039              	.LBB3516:
 183:src/xeq.c     **** }
 26040              		.loc 1 183 2 view .LVU6791
 183:src/xeq.c     **** }
 26041              		.loc 1 183 9 is_stmt 0 view .LVU6792
 26042 0000 0E4B     		ldr	r3, .L1860
 26043 0002 1B68     		ldr	r3, [r3]
 26044 0004 B3F8E037 		ldrh	r3, [r3, #2016]
 26045              	.LBE3516:
 26046              	.LBE3515:
2315:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26047              		.loc 1 2315 5 view .LVU6793
 26048 0008 9A0B     		lsrs	r2, r3, #14
 26049 000a 032A     		cmp	r2, #3
2313:src/xeq.c     **** 	unsigned int lbl;
 26050              		.loc 1 2313 45 view .LVU6794
 26051 000c 10B5     		push	{r4, lr}
 26052              		.cfi_def_cfa_offset 8
 26053              		.cfi_offset 4, -8
 26054              		.cfi_offset 14, -4
2313:src/xeq.c     **** 	unsigned int lbl;
 26055              		.loc 1 2313 45 view .LVU6795
 26056 000e 0C46     		mov	r4, r1
2315:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26057              		.loc 1 2315 5 view .LVU6796
 26058 0010 0CD1     		bne	.L1857
2316:src/xeq.c     **** 	else
 26059              		.loc 1 2316 3 is_stmt 1 view .LVU6797
2316:src/xeq.c     **** 	else
ARM GAS  /tmp/ccQlyisH.s 			page 669


 26060              		.loc 1 2316 9 is_stmt 0 view .LVU6798
 26061 0012 0B4B     		ldr	r3, .L1860+4
2316:src/xeq.c     **** 	else
 26062              		.loc 1 2316 37 view .LVU6799
 26063 0014 33F81010 		ldrh	r1, [r3, r0, lsl #1]
 26064              	.LVL1990:
2316:src/xeq.c     **** 	else
 26065              		.loc 1 2316 7 view .LVU6800
 26066 0018 41F44041 		orr	r1, r1, #49152
 26067              	.LVL1991:
 26068              	.L1858:
2319:src/xeq.c     **** }
 26069              		.loc 1 2319 2 is_stmt 1 view .LVU6801
 26070 001c B4F14500 		subs	r0, r4, #69
 26071 0020 18BF     		it	ne
 26072 0022 0120     		movne	r0, #1
2320:src/xeq.c     **** 
 26073              		.loc 1 2320 1 is_stmt 0 view .LVU6802
 26074 0024 BDE81040 		pop	{r4, lr}
 26075              		.cfi_remember_state
 26076              		.cfi_restore 14
 26077              		.cfi_restore 4
 26078              		.cfi_def_cfa_offset 0
2319:src/xeq.c     **** }
 26079              		.loc 1 2319 2 view .LVU6803
 26080 0028 FFF7FEBF 		b	cmdgtocommon
 26081              	.LVL1992:
 26082              	.L1857:
 26083              		.cfi_restore_state
2318:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
 26084              		.loc 1 2318 3 is_stmt 1 view .LVU6804
 26085              	.LBB3517:
 26086              	.LBI3517:
2183:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 26087              		.loc 1 2183 14 view .LVU6805
 26088              	.LBB3518:
2184:src/xeq.c     **** }
 26089              		.loc 1 2184 2 view .LVU6806
2184:src/xeq.c     **** }
 26090              		.loc 1 2184 9 is_stmt 0 view .LVU6807
 26091 002c 40F4C441 		orr	r1, r0, #25088
 26092              	.LVL1993:
2184:src/xeq.c     **** }
 26093              		.loc 1 2184 9 view .LVU6808
 26094 0030 0322     		movs	r2, #3
 26095 0032 1846     		mov	r0, r3
 26096              	.LVL1994:
2184:src/xeq.c     **** }
 26097              		.loc 1 2184 9 view .LVU6809
 26098 0034 FFF7FEFF 		bl	find_opcode_from
 26099              	.LVL1995:
2184:src/xeq.c     **** }
 26100              		.loc 1 2184 9 view .LVU6810
 26101 0038 0146     		mov	r1, r0
 26102              	.LVL1996:
2184:src/xeq.c     **** }
 26103              		.loc 1 2184 9 view .LVU6811
ARM GAS  /tmp/ccQlyisH.s 			page 670


 26104 003a EFE7     		b	.L1858
 26105              	.L1861:
 26106              		.align	2
 26107              	.L1860:
 26108 003c 00000000 		.word	main_ram
 26109 0040 00000000 		.word	.LANCHOR6
 26110              	.LBE3518:
 26111              	.LBE3517:
 26112              		.cfi_endproc
 26113              	.LFE161:
 26115              		.section	.text.branchtoalpha,"ax",%progbits
 26116              		.align	1
 26117              		.p2align 2,,3
 26118              		.syntax unified
 26119              		.thumb
 26120              		.thumb_func
 26121              		.fpu fpv4-sp-d16
 26123              	branchtoalpha:
 26124              	.LVL1997:
 26125              	.LFB165:
2355:src/xeq.c     **** 	unsigned int op;
 26126              		.loc 1 2355 51 is_stmt 1 view -0
 26127              		.cfi_startproc
 26128              		@ args = 0, pretend = 0, frame = 0
 26129              		@ frame_needed = 0, uses_anonymous_args = 0
2356:src/xeq.c     **** 
 26130              		.loc 1 2356 2 view .LVU6813
2358:src/xeq.c     **** 	op |= buf[0] & 0xff;
 26131              		.loc 1 2358 2 view .LVU6814
2359:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 26132              		.loc 1 2359 2 view .LVU6815
2360:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 26133              		.loc 1 2360 2 view .LVU6816
2361:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26134              		.loc 1 2361 2 view .LVU6817
2362:src/xeq.c     **** }
 26135              		.loc 1 2362 2 view .LVU6818
2355:src/xeq.c     **** 	unsigned int op;
 26136              		.loc 1 2355 51 is_stmt 0 view .LVU6819
 26137 0000 10B5     		push	{r4, lr}
 26138              		.cfi_def_cfa_offset 8
 26139              		.cfi_offset 4, -8
 26140              		.cfi_offset 14, -4
2361:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26141              		.loc 1 2361 16 view .LVU6820
 26142 0002 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
2360:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 26143              		.loc 1 2360 16 view .LVU6821
 26144 0004 4C78     		ldrb	r4, [r1, #1]	@ zero_extendqisi2
2359:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 26145              		.loc 1 2359 15 view .LVU6822
 26146 0006 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
2361:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26147              		.loc 1 2361 24 view .LVU6823
 26148 0008 1B06     		lsls	r3, r3, #24
2361:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26149              		.loc 1 2361 5 view .LVU6824
ARM GAS  /tmp/ccQlyisH.s 			page 671


 26150 000a 43EA0443 		orr	r3, r3, r4, lsl #16
 26151 000e 1343     		orrs	r3, r3, r2
2355:src/xeq.c     **** 	unsigned int op;
 26152              		.loc 1 2355 51 view .LVU6825
 26153 0010 0446     		mov	r4, r0
2362:src/xeq.c     **** }
 26154              		.loc 1 2362 2 view .LVU6826
 26155 0012 0121     		movs	r1, #1
 26156              	.LVL1998:
2362:src/xeq.c     **** }
 26157              		.loc 1 2362 2 view .LVU6827
 26158 0014 43F47040 		orr	r0, r3, #61440
 26159              	.LVL1999:
2362:src/xeq.c     **** }
 26160              		.loc 1 2362 2 view .LVU6828
 26161 0018 FFF7FEFF 		bl	findmultilbl
 26162              	.LVL2000:
2362:src/xeq.c     **** }
 26163              		.loc 1 2362 2 view .LVU6829
 26164 001c 0146     		mov	r1, r0
 26165 001e 2046     		mov	r0, r4
2363:src/xeq.c     **** 
 26166              		.loc 1 2363 1 view .LVU6830
 26167 0020 BDE81040 		pop	{r4, lr}
 26168              		.cfi_restore 14
 26169              		.cfi_restore 4
 26170              		.cfi_def_cfa_offset 0
 26171              	.LVL2001:
2362:src/xeq.c     **** }
 26172              		.loc 1 2362 2 view .LVU6831
 26173 0024 FFF7FEBF 		b	cmdgtocommon
 26174              	.LVL2002:
2362:src/xeq.c     **** }
 26175              		.loc 1 2362 2 view .LVU6832
 26176              		.cfi_endproc
 26177              	.LFE165:
 26179              		.section	.text.cmdalphagto,"ax",%progbits
 26180              		.align	1
 26181              		.p2align 2,,3
 26182              		.global	cmdalphagto
 26183              		.syntax unified
 26184              		.thumb
 26185              		.thumb_func
 26186              		.fpu fpv4-sp-d16
 26188              	cmdalphagto:
 26189              	.LVL2003:
 26190              	.LFB166:
2365:src/xeq.c     **** 	char buf[14];
 26191              		.loc 1 2365 50 is_stmt 1 view -0
 26192              		.cfi_startproc
 26193              		@ args = 0, pretend = 0, frame = 16
 26194              		@ frame_needed = 0, uses_anonymous_args = 0
2366:src/xeq.c     **** 
 26195              		.loc 1 2366 2 view .LVU6834
2368:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26196              		.loc 1 2368 2 view .LVU6835
2365:src/xeq.c     **** 	char buf[14];
ARM GAS  /tmp/ccQlyisH.s 			page 672


 26197              		.loc 1 2365 50 is_stmt 0 view .LVU6836
 26198 0000 30B5     		push	{r4, r5, lr}
 26199              		.cfi_def_cfa_offset 12
 26200              		.cfi_offset 4, -12
 26201              		.cfi_offset 5, -8
 26202              		.cfi_offset 14, -4
 26203 0002 85B0     		sub	sp, sp, #20
 26204              		.cfi_def_cfa_offset 32
2368:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26205              		.loc 1 2368 2 view .LVU6837
 26206 0004 0E22     		movs	r2, #14
2365:src/xeq.c     **** 	char buf[14];
 26207              		.loc 1 2365 50 view .LVU6838
 26208 0006 0546     		mov	r5, r0
 26209 0008 0C46     		mov	r4, r1
2368:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26210              		.loc 1 2368 2 view .LVU6839
 26211 000a 6846     		mov	r0, sp
 26212              	.LVL2004:
2368:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26213              		.loc 1 2368 2 view .LVU6840
 26214 000c 0021     		movs	r1, #0
 26215              	.LVL2005:
2368:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26216              		.loc 1 2368 2 view .LVU6841
 26217 000e FFF7FEFF 		bl	xset
 26218              	.LVL2006:
2369:src/xeq.c     **** }
 26219              		.loc 1 2369 2 is_stmt 1 view .LVU6842
 26220 0012 6946     		mov	r1, sp
 26221 0014 2846     		mov	r0, r5
 26222 0016 FFF7FEFF 		bl	alpha_rcl_s
 26223              	.LVL2007:
 26224 001a 0146     		mov	r1, r0
 26225 001c B4F17000 		subs	r0, r4, #112
 26226 0020 18BF     		it	ne
 26227 0022 0120     		movne	r0, #1
 26228 0024 FFF7FEFF 		bl	branchtoalpha
 26229              	.LVL2008:
2370:src/xeq.c     **** 
 26230              		.loc 1 2370 1 is_stmt 0 view .LVU6843
 26231 0028 05B0     		add	sp, sp, #20
 26232              		.cfi_def_cfa_offset 12
 26233              		@ sp needed
 26234 002a 30BD     		pop	{r4, r5, pc}
2370:src/xeq.c     **** 
 26235              		.loc 1 2370 1 view .LVU6844
 26236              		.cfi_endproc
 26237              	.LFE166:
 26239              		.section	.text.op_gtoalpha,"ax",%progbits
 26240              		.align	1
 26241              		.p2align 2,,3
 26242              		.global	op_gtoalpha
 26243              		.syntax unified
 26244              		.thumb
 26245              		.thumb_func
 26246              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQlyisH.s 			page 673


 26248              	op_gtoalpha:
 26249              	.LVL2009:
 26250              	.LFB168:
2380:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26251              		.loc 1 2380 33 is_stmt 1 view -0
 26252              		.cfi_startproc
 26253              		@ args = 0, pretend = 0, frame = 8
 26254              		@ frame_needed = 0, uses_anonymous_args = 0
2381:src/xeq.c     **** }
 26255              		.loc 1 2381 2 view .LVU6846
2380:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26256              		.loc 1 2380 33 is_stmt 0 view .LVU6847
 26257 0000 10B5     		push	{r4, lr}
 26258              		.cfi_def_cfa_offset 8
 26259              		.cfi_offset 4, -8
 26260              		.cfi_offset 14, -4
 26261              	.LBB3521:
 26262              	.LBB3522:
2375:src/xeq.c     **** 	buf[3] = '\0';
 26263              		.loc 1 2375 13 view .LVU6848
 26264 0002 0B4B     		ldr	r3, .L1868
 26265 0004 1968     		ldr	r1, [r3]
 26266              	.LBE3522:
 26267              	.LBE3521:
2380:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26268              		.loc 1 2380 33 view .LVU6849
 26269 0006 82B0     		sub	sp, sp, #8
 26270              		.cfi_def_cfa_offset 16
2380:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26271              		.loc 1 2380 33 view .LVU6850
 26272 0008 0446     		mov	r4, r0
 26273              	.LVL2010:
 26274              	.LBB3524:
 26275              	.LBI3521:
2372:src/xeq.c     **** 	char buf[4];
 26276              		.loc 1 2372 13 is_stmt 1 view .LVU6851
 26277              	.LBB3523:
2373:src/xeq.c     **** 
 26278              		.loc 1 2373 2 view .LVU6852
2375:src/xeq.c     **** 	buf[3] = '\0';
 26279              		.loc 1 2375 2 view .LVU6853
 26280 000a 0322     		movs	r2, #3
 26281 000c 01F5F661 		add	r1, r1, #1968
 26282 0010 01A8     		add	r0, sp, #4
 26283              	.LVL2011:
2375:src/xeq.c     **** 	buf[3] = '\0';
 26284              		.loc 1 2375 2 is_stmt 0 view .LVU6854
 26285 0012 FFF7FEFF 		bl	xcopy
 26286              	.LVL2012:
2376:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26287              		.loc 1 2376 2 is_stmt 1 view .LVU6855
2377:src/xeq.c     **** }
 26288              		.loc 1 2377 2 is_stmt 0 view .LVU6856
 26289 0016 B4F19800 		subs	r0, r4, #152
2376:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26290              		.loc 1 2376 9 view .LVU6857
 26291 001a 4FF00003 		mov	r3, #0
ARM GAS  /tmp/ccQlyisH.s 			page 674


2377:src/xeq.c     **** }
 26292              		.loc 1 2377 2 view .LVU6858
 26293 001e 18BF     		it	ne
 26294 0020 0120     		movne	r0, #1
 26295 0022 01A9     		add	r1, sp, #4
2376:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26296              		.loc 1 2376 9 view .LVU6859
 26297 0024 8DF80730 		strb	r3, [sp, #7]
2377:src/xeq.c     **** }
 26298              		.loc 1 2377 2 is_stmt 1 view .LVU6860
 26299 0028 FFF7FEFF 		bl	branchtoalpha
 26300              	.LVL2013:
2377:src/xeq.c     **** }
 26301              		.loc 1 2377 2 is_stmt 0 view .LVU6861
 26302              	.LBE3523:
 26303              	.LBE3524:
2382:src/xeq.c     **** 
 26304              		.loc 1 2382 1 view .LVU6862
 26305 002c 02B0     		add	sp, sp, #8
 26306              		.cfi_def_cfa_offset 8
 26307              		@ sp needed
 26308 002e 10BD     		pop	{r4, pc}
 26309              	.L1869:
 26310              		.align	2
 26311              	.L1868:
 26312 0030 00000000 		.word	main_ram
 26313              		.cfi_endproc
 26314              	.LFE168:
 26316              		.section	.text.cmdskip,"ax",%progbits
 26317              		.align	1
 26318              		.p2align 2,,3
 26319              		.global	cmdskip
 26320              		.syntax unified
 26321              		.thumb
 26322              		.thumb_func
 26323              		.fpu fpv4-sp-d16
 26325              	cmdskip:
 26326              	.LVL2014:
 26327              	.LFB181:
2556:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26328              		.loc 1 2556 46 is_stmt 1 view -0
 26329              		.cfi_startproc
 26330              		@ args = 0, pretend = 0, frame = 8
 26331              		@ frame_needed = 0, uses_anonymous_args = 0
2557:src/xeq.c     **** 	unsigned int pc;
 26332              		.loc 1 2557 2 view .LVU6864
2556:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26333              		.loc 1 2556 46 is_stmt 0 view .LVU6865
 26334 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 26335              		.cfi_def_cfa_offset 20
 26336              		.cfi_offset 4, -20
 26337              		.cfi_offset 5, -16
 26338              		.cfi_offset 6, -12
 26339              		.cfi_offset 7, -8
 26340              		.cfi_offset 14, -4
2557:src/xeq.c     **** 	unsigned int pc;
 26341              		.loc 1 2557 30 view .LVU6866
ARM GAS  /tmp/ccQlyisH.s 			page 675


 26342 0002 1D4F     		ldr	r7, .L1894
 26343 0004 3B68     		ldr	r3, [r7]
2560:src/xeq.c     **** 		int sgn;
 26344              		.loc 1 2560 5 view .LVU6867
 26345 0006 8B29     		cmp	r1, #139
2557:src/xeq.c     **** 	unsigned int pc;
 26346              		.loc 1 2557 21 view .LVU6868
 26347 0008 B3F8E067 		ldrh	r6, [r3, #2016]
 26348              	.LVL2015:
2558:src/xeq.c     **** 
 26349              		.loc 1 2558 2 is_stmt 1 view .LVU6869
2560:src/xeq.c     **** 		int sgn;
 26350              		.loc 1 2560 2 view .LVU6870
2556:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26351              		.loc 1 2556 46 is_stmt 0 view .LVU6871
 26352 000c 83B0     		sub	sp, sp, #12
 26353              		.cfi_def_cfa_offset 32
2556:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26354              		.loc 1 2556 46 view .LVU6872
 26355 000e 0D46     		mov	r5, r1
2560:src/xeq.c     **** 		int sgn;
 26356              		.loc 1 2560 5 view .LVU6873
 26357 0010 22D0     		beq	.L1891
 26358 0012 0446     		mov	r4, r0
 26359              	.LVL2016:
 26360              	.L1871:
2569:src/xeq.c     **** 		pc = origpc + arg;
 26361              		.loc 1 2569 2 is_stmt 1 view .LVU6874
2569:src/xeq.c     **** 		pc = origpc + arg;
 26362              		.loc 1 2569 6 is_stmt 0 view .LVU6875
 26363 0014 B30B     		lsrs	r3, r6, #14
2569:src/xeq.c     **** 		pc = origpc + arg;
 26364              		.loc 1 2569 5 view .LVU6876
 26365 0016 032B     		cmp	r3, #3
 26366 0018 15D0     		beq	.L1892
 26367              	.LVL2017:
 26368              	.L1876:
2572:src/xeq.c     **** 		if (PcWrapped) {
 26369              		.loc 1 2572 28 is_stmt 1 discriminator 2 view .LVU6877
2572:src/xeq.c     **** 		if (PcWrapped) {
 26370              		.loc 1 2572 9 discriminator 2 view .LVU6878
2572:src/xeq.c     **** 		if (PcWrapped) {
 26371              		.loc 1 2572 9 is_stmt 0 discriminator 2 view .LVU6879
 26372 001a 24B1     		cbz	r4, .L1878
2572:src/xeq.c     **** 		if (PcWrapped) {
 26373              		.loc 1 2572 20 discriminator 1 view .LVU6880
 26374 001c FFF7FEFF 		bl	incpc
 26375              	.LVL2018:
 26376 0020 013C     		subs	r4, r4, #1
 26377              	.LVL2019:
2572:src/xeq.c     **** 		if (PcWrapped) {
 26378              		.loc 1 2572 16 discriminator 1 view .LVU6881
 26379 0022 0028     		cmp	r0, #0
 26380 0024 F9D0     		beq	.L1876
 26381              	.LVL2020:
 26382              	.L1878:
2573:src/xeq.c     **** 			report_err(ERR_RANGE);
ARM GAS  /tmp/ccQlyisH.s 			page 676


 26383              		.loc 1 2573 3 is_stmt 1 view .LVU6882
2573:src/xeq.c     **** 			report_err(ERR_RANGE);
 26384              		.loc 1 2573 7 is_stmt 0 view .LVU6883
 26385 0026 154B     		ldr	r3, .L1894+4
2573:src/xeq.c     **** 			report_err(ERR_RANGE);
 26386              		.loc 1 2573 6 view .LVU6884
 26387 0028 1B68     		ldr	r3, [r3]
 26388 002a 73B9     		cbnz	r3, .L1893
 26389              	.L1879:
2576:src/xeq.c     **** 	}
 26390              		.loc 1 2576 3 is_stmt 1 view .LVU6885
2576:src/xeq.c     **** 	}
 26391              		.loc 1 2576 8 is_stmt 0 view .LVU6886
 26392 002c 3B68     		ldr	r3, [r7]
2576:src/xeq.c     **** 	}
 26393              		.loc 1 2576 6 view .LVU6887
 26394 002e B3F8E007 		ldrh	r0, [r3, #2016]
 26395              	.LVL2021:
 26396              	.L1877:
2578:src/xeq.c     **** }
 26397              		.loc 1 2578 2 is_stmt 1 view .LVU6888
 26398 0032 A5F13801 		sub	r1, r5, #56
 26399 0036 B1FA81F1 		clz	r1, r1
 26400 003a 3246     		mov	r2, r6
 26401 003c 4909     		lsrs	r1, r1, #5
 26402 003e FFF7FEFF 		bl	gsbgto
 26403              	.LVL2022:
 26404              	.L1870:
2579:src/xeq.c     **** 
 26405              		.loc 1 2579 1 is_stmt 0 view .LVU6889
 26406 0042 03B0     		add	sp, sp, #12
 26407              		.cfi_remember_state
 26408              		.cfi_def_cfa_offset 20
 26409              		@ sp needed
 26410 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 26411              	.LVL2023:
 26412              	.L1892:
 26413              		.cfi_restore_state
2570:src/xeq.c     **** 	else {
 26414              		.loc 1 2570 3 is_stmt 1 view .LVU6890
2570:src/xeq.c     **** 	else {
 26415              		.loc 1 2570 6 is_stmt 0 view .LVU6891
 26416 0046 A019     		adds	r0, r4, r6
 26417              	.LVL2024:
2570:src/xeq.c     **** 	else {
 26418              		.loc 1 2570 6 view .LVU6892
 26419 0048 F3E7     		b	.L1877
 26420              	.LVL2025:
 26421              	.L1893:
2574:src/xeq.c     **** 		}
 26422              		.loc 1 2574 4 is_stmt 1 view .LVU6893
 26423              	.LBB3534:
 26424              	.LBI3534:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26425              		.loc 1 537 5 view .LVU6894
 26426              	.LBB3535:
 538:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccQlyisH.s 			page 677


 26427              		.loc 1 538 2 view .LVU6895
 538:src/xeq.c     **** 		Error = e;
 26428              		.loc 1 538 12 is_stmt 0 view .LVU6896
 26429 004a 0D4B     		ldr	r3, .L1894+8
 538:src/xeq.c     **** 		Error = e;
 26430              		.loc 1 538 5 view .LVU6897
 26431 004c 1A68     		ldr	r2, [r3]
 26432 004e 002A     		cmp	r2, #0
 26433 0050 ECD1     		bne	.L1879
 26434              	.LVL2026:
 26435              	.LBB3536:
 26436              	.LBI3536:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26437              		.loc 1 537 5 is_stmt 1 view .LVU6898
 26438              	.LBB3537:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 26439              		.loc 1 539 3 view .LVU6899
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 26440              		.loc 1 539 9 is_stmt 0 view .LVU6900
 26441 0052 0822     		movs	r2, #8
 26442 0054 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 26443              		.loc 1 540 3 is_stmt 1 view .LVU6901
 26444 0056 E9E7     		b	.L1879
 26445              	.LVL2027:
 26446              	.L1891:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 26447              		.loc 1 540 3 is_stmt 0 view .LVU6902
 26448              	.LBE3537:
 26449              	.LBE3536:
 26450              	.LBE3535:
 26451              	.LBE3534:
 26452              	.LBB3538:
2561:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
 26453              		.loc 1 2561 3 is_stmt 1 view .LVU6903
2562:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26454              		.loc 1 2562 3 view .LVU6904
2562:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26455              		.loc 1 2562 15 is_stmt 0 view .LVU6905
 26456 0058 01A9     		add	r1, sp, #4
 26457              	.LVL2028:
2562:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26458              		.loc 1 2562 15 view .LVU6906
 26459 005a FFF7FEFF 		bl	get_reg_n_int_sgn
 26460              	.LVL2029:
2563:src/xeq.c     **** 			report_err(ERR_RANGE);
 26461              		.loc 1 2563 6 view .LVU6907
 26462 005e 019B     		ldr	r3, [sp, #4]
 26463              	.LVL2030:
2563:src/xeq.c     **** 			report_err(ERR_RANGE);
 26464              		.loc 1 2563 3 is_stmt 1 view .LVU6908
2563:src/xeq.c     **** 			report_err(ERR_RANGE);
 26465              		.loc 1 2563 6 is_stmt 0 view .LVU6909
 26466 0060 13B9     		cbnz	r3, .L1872
2563:src/xeq.c     **** 			report_err(ERR_RANGE);
 26467              		.loc 1 2563 11 discriminator 1 view .LVU6910
 26468 0062 6328     		cmp	r0, #99
ARM GAS  /tmp/ccQlyisH.s 			page 678


2562:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26469              		.loc 1 2562 7 discriminator 1 view .LVU6911
 26470 0064 0446     		mov	r4, r0
2563:src/xeq.c     **** 			report_err(ERR_RANGE);
 26471              		.loc 1 2563 11 discriminator 1 view .LVU6912
 26472 0066 D5D9     		bls	.L1871
 26473              	.L1872:
2564:src/xeq.c     **** 			return;
 26474              		.loc 1 2564 4 is_stmt 1 view .LVU6913
 26475              	.LVL2031:
 26476              	.LBB3539:
 26477              	.LBI3539:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26478              		.loc 1 537 5 view .LVU6914
 26479              	.LBB3540:
 538:src/xeq.c     **** 		Error = e;
 26480              		.loc 1 538 2 view .LVU6915
 538:src/xeq.c     **** 		Error = e;
 26481              		.loc 1 538 12 is_stmt 0 view .LVU6916
 26482 0068 054B     		ldr	r3, .L1894+8
 538:src/xeq.c     **** 		Error = e;
 26483              		.loc 1 538 5 view .LVU6917
 26484 006a 1A68     		ldr	r2, [r3]
 26485 006c 002A     		cmp	r2, #0
 26486 006e E8D1     		bne	.L1870
 26487              	.LVL2032:
 26488              	.LBB3541:
 26489              	.LBI3541:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26490              		.loc 1 537 5 is_stmt 1 view .LVU6918
 26491              	.LBB3542:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 26492              		.loc 1 539 3 view .LVU6919
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 26493              		.loc 1 539 9 is_stmt 0 view .LVU6920
 26494 0070 0822     		movs	r2, #8
 26495 0072 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 26496              		.loc 1 540 3 is_stmt 1 view .LVU6921
 26497              	.LVL2033:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 26498              		.loc 1 540 3 is_stmt 0 view .LVU6922
 26499              	.LBE3542:
 26500              	.LBE3541:
 26501              	.LBE3540:
 26502              	.LBE3539:
2565:src/xeq.c     **** 		}
 26503              		.loc 1 2565 4 is_stmt 1 view .LVU6923
 26504 0074 E5E7     		b	.L1870
 26505              	.L1895:
 26506 0076 00BF     		.align	2
 26507              	.L1894:
 26508 0078 00000000 		.word	main_ram
 26509 007c 00000000 		.word	PcWrapped
 26510 0080 00000000 		.word	Error
 26511              	.LBE3538:
 26512              		.cfi_endproc
ARM GAS  /tmp/ccQlyisH.s 			page 679


 26513              	.LFE181:
 26515              		.section	.text.cmdback,"ax",%progbits
 26516              		.align	1
 26517              		.p2align 2,,3
 26518              		.global	cmdback
 26519              		.syntax unified
 26520              		.thumb
 26521              		.thumb_func
 26522              		.fpu fpv4-sp-d16
 26524              	cmdback:
 26525              	.LVL2034:
 26526              	.LFB182:
2582:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26527              		.loc 1 2582 46 view -0
 26528              		.cfi_startproc
 26529              		@ args = 0, pretend = 0, frame = 0
 26530              		@ frame_needed = 0, uses_anonymous_args = 0
2583:src/xeq.c     **** 	unsigned int pc = origpc;
 26531              		.loc 1 2583 2 view .LVU6925
2582:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26532              		.loc 1 2582 46 is_stmt 0 view .LVU6926
 26533 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 26534              		.cfi_def_cfa_offset 24
 26535              		.cfi_offset 3, -24
 26536              		.cfi_offset 4, -20
 26537              		.cfi_offset 5, -16
 26538              		.cfi_offset 6, -12
 26539              		.cfi_offset 7, -8
 26540              		.cfi_offset 14, -4
2583:src/xeq.c     **** 	unsigned int pc = origpc;
 26541              		.loc 1 2583 30 view .LVU6927
 26542 0002 184B     		ldr	r3, .L1915
 26543 0004 1B68     		ldr	r3, [r3]
2583:src/xeq.c     **** 	unsigned int pc = origpc;
 26544              		.loc 1 2583 21 view .LVU6928
 26545 0006 B3F8E067 		ldrh	r6, [r3, #2016]
 26546              	.LVL2035:
2584:src/xeq.c     **** 
 26547              		.loc 1 2584 2 is_stmt 1 view .LVU6929
2586:src/xeq.c     **** 		pc -= arg + 1;
 26548              		.loc 1 2586 2 view .LVU6930
2586:src/xeq.c     **** 		pc -= arg + 1;
 26549              		.loc 1 2586 6 is_stmt 0 view .LVU6931
 26550 000a B30B     		lsrs	r3, r6, #14
2586:src/xeq.c     **** 		pc -= arg + 1;
 26551              		.loc 1 2586 5 view .LVU6932
 26552 000c 032B     		cmp	r3, #3
2582:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26553              		.loc 1 2582 46 view .LVU6933
 26554 000e 0446     		mov	r4, r0
 26555 0010 0D46     		mov	r5, r1
2586:src/xeq.c     **** 		pc -= arg + 1;
 26556              		.loc 1 2586 5 view .LVU6934
 26557 0012 1FD0     		beq	.L1912
2588:src/xeq.c     **** 		if ( Running ) {
 26558              		.loc 1 2588 14 is_stmt 1 view .LVU6935
2588:src/xeq.c     **** 		if ( Running ) {
ARM GAS  /tmp/ccQlyisH.s 			page 680


 26559              		.loc 1 2588 17 is_stmt 0 view .LVU6936
 26560 0014 98B1     		cbz	r0, .L1904
2589:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26561              		.loc 1 2589 3 is_stmt 1 view .LVU6937
2589:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26562              		.loc 1 2589 8 is_stmt 0 view .LVU6938
 26563 0016 144B     		ldr	r3, .L1915+4
2589:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26564              		.loc 1 2589 6 view .LVU6939
 26565 0018 1B68     		ldr	r3, [r3]
 26566 001a F3B9     		cbnz	r3, .L1913
 26567 001c 3046     		mov	r0, r6
 26568              	.LVL2036:
 26569              	.L1899:
2589:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26570              		.loc 1 2589 6 view .LVU6940
 26571 001e 134F     		ldr	r7, .L1915+8
 26572 0020 00E0     		b	.L1901
 26573              	.L1914:
2595:src/xeq.c     **** 		if (PcWrapped) {
 26574              		.loc 1 2595 18 discriminator 1 view .LVU6941
 26575 0022 33B9     		cbnz	r3, .L1902
 26576              	.L1901:
2593:src/xeq.c     **** 			pc = do_dec(pc, 1);
 26577              		.loc 1 2593 3 is_stmt 1 discriminator 2 view .LVU6942
2594:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 26578              		.loc 1 2594 4 discriminator 2 view .LVU6943
2594:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 26579              		.loc 1 2594 9 is_stmt 0 discriminator 2 view .LVU6944
 26580 0024 0121     		movs	r1, #1
 26581 0026 FFF7FEFF 		bl	do_dec
 26582              	.LVL2037:
2595:src/xeq.c     **** 		if (PcWrapped) {
 26583              		.loc 1 2595 11 is_stmt 1 discriminator 2 view .LVU6945
2595:src/xeq.c     **** 		if (PcWrapped) {
 26584              		.loc 1 2595 3 is_stmt 0 discriminator 2 view .LVU6946
 26585 002a 013C     		subs	r4, r4, #1
 26586              	.LVL2038:
2595:src/xeq.c     **** 		if (PcWrapped) {
 26587              		.loc 1 2595 18 discriminator 2 view .LVU6947
 26588 002c 3B68     		ldr	r3, [r7]
2595:src/xeq.c     **** 		if (PcWrapped) {
 26589              		.loc 1 2595 3 discriminator 2 view .LVU6948
 26590 002e F8D1     		bne	.L1914
2596:src/xeq.c     **** 			report_err(ERR_RANGE);
 26591              		.loc 1 2596 3 is_stmt 1 view .LVU6949
2596:src/xeq.c     **** 			report_err(ERR_RANGE);
 26592              		.loc 1 2596 6 is_stmt 0 view .LVU6950
 26593 0030 33B1     		cbz	r3, .L1898
 26594              	.L1902:
2597:src/xeq.c     **** 			return;
 26595              		.loc 1 2597 4 is_stmt 1 view .LVU6951
 26596              	.LVL2039:
 26597              	.LBB3547:
 26598              	.LBI3547:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26599              		.loc 1 537 5 view .LVU6952
ARM GAS  /tmp/ccQlyisH.s 			page 681


 26600              	.LBB3548:
 538:src/xeq.c     **** 		Error = e;
 26601              		.loc 1 538 2 view .LVU6953
 538:src/xeq.c     **** 		Error = e;
 26602              		.loc 1 538 12 is_stmt 0 view .LVU6954
 26603 0032 0F4B     		ldr	r3, .L1915+12
 538:src/xeq.c     **** 		Error = e;
 26604              		.loc 1 538 5 view .LVU6955
 26605 0034 1A68     		ldr	r2, [r3]
 26606 0036 0AB9     		cbnz	r2, .L1896
 26607              	.LVL2040:
 26608              	.LBB3549:
 26609              	.LBI3549:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26610              		.loc 1 537 5 is_stmt 1 view .LVU6956
 26611              	.LBB3550:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 26612              		.loc 1 539 3 view .LVU6957
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 26613              		.loc 1 539 9 is_stmt 0 view .LVU6958
 26614 0038 0822     		movs	r2, #8
 26615 003a 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 26616              		.loc 1 540 3 is_stmt 1 view .LVU6959
 26617              	.LVL2041:
 26618              	.L1896:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 26619              		.loc 1 540 3 is_stmt 0 view .LVU6960
 26620              	.LBE3550:
 26621              	.LBE3549:
 26622              	.LBE3548:
 26623              	.LBE3547:
2602:src/xeq.c     **** 
 26624              		.loc 1 2602 1 view .LVU6961
 26625 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 26626              	.LVL2042:
 26627              	.L1904:
2602:src/xeq.c     **** 
 26628              		.loc 1 2602 1 view .LVU6962
 26629 003e 3046     		mov	r0, r6
 26630              	.LVL2043:
 26631              	.L1898:
2601:src/xeq.c     **** }
 26632              		.loc 1 2601 2 is_stmt 1 view .LVU6963
 26633 0040 A5F13901 		sub	r1, r5, #57
 26634 0044 B1FA81F1 		clz	r1, r1
 26635 0048 3246     		mov	r2, r6
 26636 004a 4909     		lsrs	r1, r1, #5
2602:src/xeq.c     **** 
 26637              		.loc 1 2602 1 is_stmt 0 view .LVU6964
 26638 004c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 26639              		.cfi_remember_state
 26640              		.cfi_restore 14
 26641              		.cfi_restore 7
 26642              		.cfi_restore 6
 26643              		.cfi_restore 5
 26644              		.cfi_restore 4
ARM GAS  /tmp/ccQlyisH.s 			page 682


 26645              		.cfi_restore 3
 26646              		.cfi_def_cfa_offset 0
 26647              	.LVL2044:
2601:src/xeq.c     **** }
 26648              		.loc 1 2601 2 view .LVU6965
 26649 0050 FFF7FEBF 		b	gsbgto
 26650              	.LVL2045:
 26651              	.L1912:
 26652              		.cfi_restore_state
2587:src/xeq.c     ****         else if (arg) {
 26653              		.loc 1 2587 3 is_stmt 1 view .LVU6966
2587:src/xeq.c     ****         else if (arg) {
 26654              		.loc 1 2587 6 is_stmt 0 view .LVU6967
 26655 0054 731E     		subs	r3, r6, #1
 26656 0056 181A     		subs	r0, r3, r0
 26657              	.LVL2046:
2587:src/xeq.c     ****         else if (arg) {
 26658              		.loc 1 2587 6 view .LVU6968
 26659 0058 F2E7     		b	.L1898
 26660              	.LVL2047:
 26661              	.L1913:
2591:src/xeq.c     **** 		}
 26662              		.loc 1 2591 4 is_stmt 1 view .LVU6969
2591:src/xeq.c     **** 		}
 26663              		.loc 1 2591 9 is_stmt 0 view .LVU6970
 26664 005a 0121     		movs	r1, #1
 26665              	.LVL2048:
2591:src/xeq.c     **** 		}
 26666              		.loc 1 2591 9 view .LVU6971
 26667 005c 3046     		mov	r0, r6
 26668              	.LVL2049:
2591:src/xeq.c     **** 		}
 26669              		.loc 1 2591 9 view .LVU6972
 26670 005e FFF7FEFF 		bl	do_dec
 26671              	.LVL2050:
2591:src/xeq.c     **** 		}
 26672              		.loc 1 2591 9 view .LVU6973
 26673 0062 DCE7     		b	.L1899
 26674              	.L1916:
 26675              		.align	2
 26676              	.L1915:
 26677 0064 00000000 		.word	main_ram
 26678 0068 00000000 		.word	Running
 26679 006c 00000000 		.word	PcWrapped
 26680 0070 00000000 		.word	Error
 26681              		.cfi_endproc
 26682              	.LFE182:
 26684              		.section	.text.usergsb_common,"ax",%progbits
 26685              		.align	1
 26686              		.p2align 2,,3
 26687              		.syntax unified
 26688              		.thumb
 26689              		.thumb_func
 26690              		.fpu fpv4-sp-d16
 26692              	usergsb_common:
 26693              	.LVL2051:
 26694              	.LFB156:
ARM GAS  /tmp/ccQlyisH.s 			page 683


2263:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26695              		.loc 1 2263 55 is_stmt 1 view -0
 26696              		.cfi_startproc
 26697              		@ args = 0, pretend = 0, frame = 0
 26698              		@ frame_needed = 0, uses_anonymous_args = 0
2264:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26699              		.loc 1 2264 2 view .LVU6975
2263:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26700              		.loc 1 2263 55 is_stmt 0 view .LVU6976
 26701 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 26702              		.cfi_def_cfa_offset 24
 26703              		.cfi_offset 4, -24
 26704              		.cfi_offset 5, -20
 26705              		.cfi_offset 6, -16
 26706              		.cfi_offset 7, -12
 26707              		.cfi_offset 8, -8
 26708              		.cfi_offset 14, -4
2264:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26709              		.loc 1 2264 26 view .LVU6977
 26710 0004 1C4D     		ldr	r5, .L1921
2265:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26711              		.loc 1 2265 2 view .LVU6978
 26712 0006 1D4F     		ldr	r7, .L1921+4
2264:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26713              		.loc 1 2264 26 view .LVU6979
 26714 0008 2B68     		ldr	r3, [r5]
2265:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26715              		.loc 1 2265 2 view .LVU6980
 26716 000a 3A68     		ldr	r2, [r7]
2264:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26717              		.loc 1 2264 21 view .LVU6981
 26718 000c B3F8E047 		ldrh	r4, [r3, #2016]
 26719              	.LVL2052:
2265:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26720              		.loc 1 2265 2 is_stmt 1 view .LVU6982
2267:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 26721              		.loc 1 2267 2 is_stmt 0 view .LVU6983
 26722 0010 DFF87480 		ldr	r8, .L1921+16
2263:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26723              		.loc 1 2263 55 view .LVU6984
 26724 0014 0646     		mov	r6, r0
2265:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26725              		.loc 1 2265 2 view .LVU6985
 26726 0016 0121     		movs	r1, #1
 26727 0018 2046     		mov	r0, r4
 26728              	.LVL2053:
2265:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26729              		.loc 1 2265 2 view .LVU6986
 26730 001a FFF7FEFF 		bl	gsbgto
 26731              	.LVL2054:
2266:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26732              		.loc 1 2266 2 is_stmt 1 view .LVU6987
2266:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26733              		.loc 1 2266 16 is_stmt 0 view .LVU6988
 26734 001e 2B68     		ldr	r3, [r5]
2266:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26735              		.loc 1 2266 2 view .LVU6989
ARM GAS  /tmp/ccQlyisH.s 			page 684


 26736 0020 2046     		mov	r0, r4
 26737 0022 B3F9DE27 		ldrsh	r2, [r3, #2014]
 26738 0026 0121     		movs	r1, #1
 26739 0028 FFF7FEFF 		bl	gsbgto
 26740              	.LVL2055:
2267:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 26741              		.loc 1 2267 2 is_stmt 1 view .LVU6990
 26742 002c 2046     		mov	r0, r4
 26743 002e D8F80020 		ldr	r2, [r8]
 26744 0032 0121     		movs	r1, #1
 26745 0034 FFF7FEFF 		bl	gsbgto
 26746              	.LVL2056:
2268:src/xeq.c     **** 
 26747              		.loc 1 2268 2 view .LVU6991
 26748 0038 2246     		mov	r2, r4
 26749 003a 3046     		mov	r0, r6
 26750 003c 0121     		movs	r1, #1
 26751 003e FFF7FEFF 		bl	gsbgto
 26752              	.LVL2057:
2270:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26753              		.loc 1 2270 2 view .LVU6992
2271:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26754              		.loc 1 2271 9 is_stmt 0 view .LVU6993
 26755 0042 2A68     		ldr	r2, [r5]
2271:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26756              		.loc 1 2271 20 view .LVU6994
 26757 0044 0E4B     		ldr	r3, .L1921+8
 26758 0046 B2F9DE07 		ldrsh	r0, [r2, #2014]
 26759 004a 1968     		ldr	r1, [r3]
2273:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26760              		.loc 1 2273 6 view .LVU6995
 26761 004c 0D4C     		ldr	r4, .L1921+12
 26762              	.LVL2058:
2271:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26763              		.loc 1 2271 20 view .LVU6996
 26764 004e 31F81030 		ldrh	r3, [r1, r0, lsl #1]
2273:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26765              		.loc 1 2273 5 view .LVU6997
 26766 0052 2468     		ldr	r4, [r4]
2272:src/xeq.c     **** 	if (! Running)
 26767              		.loc 1 2272 12 view .LVU6998
 26768 0054 D8F80050 		ldr	r5, [r8]
2270:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26769              		.loc 1 2270 13 view .LVU6999
 26770 0058 0026     		movs	r6, #0
2271:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26771              		.loc 1 2271 20 view .LVU7000
 26772 005a 43F40053 		orr	r3, r3, #8192
2270:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26773              		.loc 1 2270 13 view .LVU7001
 26774 005e 3E60     		str	r6, [r7]
2271:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26775              		.loc 1 2271 2 is_stmt 1 view .LVU7002
2271:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26776              		.loc 1 2271 20 is_stmt 0 view .LVU7003
 26777 0060 21F81030 		strh	r3, [r1, r0, lsl #1]	@ movhi
2272:src/xeq.c     **** 	if (! Running)
ARM GAS  /tmp/ccQlyisH.s 			page 685


 26778              		.loc 1 2272 2 is_stmt 1 view .LVU7004
2272:src/xeq.c     **** 	if (! Running)
 26779              		.loc 1 2272 12 is_stmt 0 view .LVU7005
 26780 0064 A2F8DE57 		strh	r5, [r2, #2014]	@ movhi
2273:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26781              		.loc 1 2273 2 is_stmt 1 view .LVU7006
2273:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26782              		.loc 1 2273 5 is_stmt 0 view .LVU7007
 26783 0068 0CB1     		cbz	r4, .L1920
2276:src/xeq.c     **** 
 26784              		.loc 1 2276 1 view .LVU7008
 26785 006a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 26786              	.L1920:
2274:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 26787              		.loc 1 2274 3 is_stmt 1 view .LVU7009
2276:src/xeq.c     **** 
 26788              		.loc 1 2276 1 is_stmt 0 view .LVU7010
 26789 006e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 26790              		.cfi_restore 14
 26791              		.cfi_restore 8
 26792              		.cfi_restore 7
 26793              		.cfi_restore 6
 26794              		.cfi_restore 5
 26795              		.cfi_restore 4
 26796              		.cfi_def_cfa_offset 0
2274:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 26797              		.loc 1 2274 3 view .LVU7011
 26798 0072 FFF7FEBF 		b	set_running_on
 26799              	.LVL2059:
 26800              	.L1922:
 26801 0076 00BF     		.align	2
 26802              	.L1921:
 26803 0078 00000000 		.word	main_ram
 26804 007c 00000000 		.word	XromUserPc
 26805 0080 00000000 		.word	RetStk
 26806 0084 00000000 		.word	Running
 26807 0088 00000000 		.word	UserLocalRegs
 26808              		.cfi_endproc
 26809              	.LFE156:
 26811              		.section	.text.do_usergsb,"ax",%progbits
 26812              		.align	1
 26813              		.p2align 2,,3
 26814              		.global	do_usergsb
 26815              		.syntax unified
 26816              		.thumb
 26817              		.thumb_func
 26818              		.fpu fpv4-sp-d16
 26820              	do_usergsb:
 26821              	.LVL2060:
 26822              	.LFB157:
2282:src/xeq.c     **** 	usergsb_common(XromUserPc);
 26823              		.loc 1 2282 32 is_stmt 1 view -0
 26824              		.cfi_startproc
 26825              		@ args = 0, pretend = 0, frame = 0
 26826              		@ frame_needed = 0, uses_anonymous_args = 0
2283:src/xeq.c     ****         fill(OP_FILL);
 26827              		.loc 1 2283 2 view .LVU7013
ARM GAS  /tmp/ccQlyisH.s 			page 686


2282:src/xeq.c     **** 	usergsb_common(XromUserPc);
 26828              		.loc 1 2282 32 is_stmt 0 view .LVU7014
 26829 0000 08B5     		push	{r3, lr}
 26830              		.cfi_def_cfa_offset 8
 26831              		.cfi_offset 3, -8
 26832              		.cfi_offset 14, -4
2283:src/xeq.c     ****         fill(OP_FILL);
 26833              		.loc 1 2283 2 view .LVU7015
 26834 0002 044B     		ldr	r3, .L1925
 26835 0004 1888     		ldrh	r0, [r3]
 26836              	.LVL2061:
2283:src/xeq.c     ****         fill(OP_FILL);
 26837              		.loc 1 2283 2 view .LVU7016
 26838 0006 FFF7FEFF 		bl	usergsb_common
 26839              	.LVL2062:
2284:src/xeq.c     **** }
 26840              		.loc 1 2284 9 is_stmt 1 view .LVU7017
2285:src/xeq.c     **** 
 26841              		.loc 1 2285 1 is_stmt 0 view .LVU7018
 26842 000a BDE80840 		pop	{r3, lr}
 26843              		.cfi_restore 14
 26844              		.cfi_restore 3
 26845              		.cfi_def_cfa_offset 0
2284:src/xeq.c     **** }
 26846              		.loc 1 2284 9 view .LVU7019
 26847 000e 0C20     		movs	r0, #12
 26848 0010 FFF7FEBF 		b	fill
 26849              	.LVL2063:
 26850              	.L1926:
 26851              		.align	2
 26852              	.L1925:
 26853 0014 00000000 		.word	XromUserPc
 26854              		.cfi_endproc
 26855              	.LFE157:
 26857              		.section	.text.cmdmultigto,"ax",%progbits
 26858              		.align	1
 26859              		.p2align 2,,3
 26860              		.global	cmdmultigto
 26861              		.syntax unified
 26862              		.thumb
 26863              		.thumb_func
 26864              		.fpu fpv4-sp-d16
 26866              	cmdmultigto:
 26867              	.LVL2064:
 26868              	.LFB164:
2341:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26869              		.loc 1 2341 54 is_stmt 1 view -0
 26870              		.cfi_startproc
 26871              		@ args = 0, pretend = 0, frame = 0
 26872              		@ frame_needed = 0, uses_anonymous_args = 0
2342:src/xeq.c     **** 		// In XROM the command behaves differently!
 26873              		.loc 1 2342 2 view .LVU7021
2342:src/xeq.c     **** 		// In XROM the command behaves differently!
 26874              		.loc 1 2342 5 is_stmt 0 view .LVU7022
 26875 0000 0229     		cmp	r1, #2
2341:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26876              		.loc 1 2341 54 view .LVU7023
ARM GAS  /tmp/ccQlyisH.s 			page 687


 26877 0002 10B5     		push	{r4, lr}
 26878              		.cfi_def_cfa_offset 8
 26879              		.cfi_offset 4, -8
 26880              		.cfi_offset 14, -4
2341:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26881              		.loc 1 2341 54 view .LVU7024
 26882 0004 0346     		mov	r3, r0
 26883 0006 0C46     		mov	r4, r1
2342:src/xeq.c     **** 		// In XROM the command behaves differently!
 26884              		.loc 1 2342 5 view .LVU7025
 26885 0008 06D1     		bne	.L1928
 26886              	.LBB3551:
 26887              	.LBI3551:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 26888              		.loc 1 182 5 is_stmt 1 view .LVU7026
 26889              	.LBB3552:
 183:src/xeq.c     **** }
 26890              		.loc 1 183 2 view .LVU7027
 183:src/xeq.c     **** }
 26891              		.loc 1 183 9 is_stmt 0 view .LVU7028
 26892 000a 104A     		ldr	r2, .L1932
 26893 000c 1268     		ldr	r2, [r2]
 26894 000e B2F8E027 		ldrh	r2, [r2, #2016]
 26895              	.LBE3552:
 26896              	.LBE3551:
2342:src/xeq.c     **** 		// In XROM the command behaves differently!
 26897              		.loc 1 2342 22 view .LVU7029
 26898 0012 920B     		lsrs	r2, r2, #14
 26899 0014 032A     		cmp	r2, #3
 26900 0016 0BD0     		beq	.L1931
 26901              	.L1928:
2351:src/xeq.c     **** 	}
 26902              		.loc 1 2351 3 is_stmt 1 view .LVU7030
 26903 0018 0121     		movs	r1, #1
 26904              	.LVL2065:
2351:src/xeq.c     **** 	}
 26905              		.loc 1 2351 3 is_stmt 0 view .LVU7031
 26906 001a 1846     		mov	r0, r3
 26907              	.LVL2066:
2351:src/xeq.c     **** 	}
 26908              		.loc 1 2351 3 view .LVU7032
 26909 001c FFF7FEFF 		bl	findmultilbl
 26910              	.LVL2067:
2351:src/xeq.c     **** 	}
 26911              		.loc 1 2351 3 view .LVU7033
 26912 0020 0146     		mov	r1, r0
 26913 0022 E01E     		subs	r0, r4, #3
 26914 0024 18BF     		it	ne
 26915 0026 0120     		movne	r0, #1
2353:src/xeq.c     **** 
 26916              		.loc 1 2353 1 view .LVU7034
 26917 0028 BDE81040 		pop	{r4, lr}
 26918              		.cfi_remember_state
 26919              		.cfi_restore 14
 26920              		.cfi_restore 4
 26921              		.cfi_def_cfa_offset 0
2351:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQlyisH.s 			page 688


 26922              		.loc 1 2351 3 view .LVU7035
 26923 002c FFF7FEBF 		b	cmdgtocommon
 26924              	.LVL2068:
 26925              	.L1931:
 26926              		.cfi_restore_state
 26927              	.LBB3553:
2344:src/xeq.c     **** 		if (target != 0)
 26928              		.loc 1 2344 3 is_stmt 1 view .LVU7036
2344:src/xeq.c     **** 		if (target != 0)
 26929              		.loc 1 2344 31 is_stmt 0 view .LVU7037
 26930 0030 0021     		movs	r1, #0
 26931              	.LVL2069:
2344:src/xeq.c     **** 		if (target != 0)
 26932              		.loc 1 2344 31 view .LVU7038
 26933 0032 FFF7FEFF 		bl	findmultilbl
 26934              	.LVL2070:
2344:src/xeq.c     **** 		if (target != 0)
 26935              		.loc 1 2344 22 view .LVU7039
 26936 0036 80B2     		uxth	r0, r0
 26937              	.LVL2071:
2345:src/xeq.c     **** 			usergsb_common(target); 
 26938              		.loc 1 2345 3 is_stmt 1 view .LVU7040
2345:src/xeq.c     **** 			usergsb_common(target); 
 26939              		.loc 1 2345 6 is_stmt 0 view .LVU7041
 26940 0038 18B1     		cbz	r0, .L1929
2346:src/xeq.c     **** 		else
 26941              		.loc 1 2346 4 is_stmt 1 view .LVU7042
 26942              	.LBE3553:
2353:src/xeq.c     **** 
 26943              		.loc 1 2353 1 is_stmt 0 view .LVU7043
 26944 003a BDE81040 		pop	{r4, lr}
 26945              		.cfi_remember_state
 26946              		.cfi_restore 14
 26947              		.cfi_restore 4
 26948              		.cfi_def_cfa_offset 0
 26949              	.LBB3554:
2346:src/xeq.c     **** 		else
 26950              		.loc 1 2346 4 view .LVU7044
 26951 003e FFF7FEBF 		b	usergsb_common
 26952              	.LVL2072:
 26953              	.L1929:
 26954              		.cfi_restore_state
2348:src/xeq.c     **** 	}
 26955              		.loc 1 2348 4 is_stmt 1 view .LVU7045
 26956              	.LBE3554:
2353:src/xeq.c     **** 
 26957              		.loc 1 2353 1 is_stmt 0 view .LVU7046
 26958 0042 BDE81040 		pop	{r4, lr}
 26959              		.cfi_restore 14
 26960              		.cfi_restore 4
 26961              		.cfi_def_cfa_offset 0
 26962              	.LBB3555:
2348:src/xeq.c     **** 	}
 26963              		.loc 1 2348 4 view .LVU7047
 26964 0046 FFF7FEBF 		b	incpc
 26965              	.LVL2073:
 26966              	.L1933:
ARM GAS  /tmp/ccQlyisH.s 			page 689


2348:src/xeq.c     **** 	}
 26967              		.loc 1 2348 4 view .LVU7048
 26968 004a 00BF     		.align	2
 26969              	.L1932:
 26970 004c 00000000 		.word	main_ram
 26971              	.LBE3555:
 26972              		.cfi_endproc
 26973              	.LFE164:
 26975              		.section	.text.store_a_to_d,"ax",%progbits
 26976              		.align	1
 26977              		.p2align 2,,3
 26978              		.global	store_a_to_d
 26979              		.syntax unified
 26980              		.thumb
 26981              		.thumb_func
 26982              		.fpu fpv4-sp-d16
 26984              	store_a_to_d:
 26985              	.LVL2074:
 26986              	.LFB262:
5792:src/xeq.c     **** 
5793:src/xeq.c     **** /* Command to stash registers A through D into volatile RAM and to restore them
5794:src/xeq.c     ****  * again.
5795:src/xeq.c     ****  */
5796:src/xeq.c     **** void store_a_to_d(enum nilop op) {
 26987              		.loc 1 5796 34 is_stmt 1 view -0
 26988              		.cfi_startproc
 26989              		@ args = 0, pretend = 0, frame = 0
 26990              		@ frame_needed = 0, uses_anonymous_args = 0
5797:src/xeq.c     **** 	const void *src = XromA2D;
 26991              		.loc 1 5797 2 view .LVU7050
5798:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 26992              		.loc 1 5798 2 view .LVU7051
5796:src/xeq.c     **** 	const void *src = XromA2D;
 26993              		.loc 1 5796 34 is_stmt 0 view .LVU7052
 26994 0000 10B5     		push	{r4, lr}
 26995              		.cfi_def_cfa_offset 8
 26996              		.cfi_offset 4, -8
 26997              		.cfi_offset 14, -4
5796:src/xeq.c     **** 	const void *src = XromA2D;
 26998              		.loc 1 5796 34 view .LVU7053
 26999 0002 0446     		mov	r4, r0
 27000              		.loc 1 5798 15 view .LVU7054
 27001 0004 6820     		movs	r0, #104
 27002              	.LVL2075:
 27003              		.loc 1 5798 15 view .LVU7055
 27004 0006 FFF7FEFF 		bl	get_reg_n
 27005              	.LVL2076:
5799:src/xeq.c     **** 
5800:src/xeq.c     **** 	if (op == OP_SAVEA2D) {
 27006              		.loc 1 5800 2 is_stmt 1 view .LVU7056
 27007              		.loc 1 5800 5 is_stmt 0 view .LVU7057
 27008 000a 802C     		cmp	r4, #128
5801:src/xeq.c     **** 		src = dest;
 27009              		.loc 1 5801 7 view .LVU7058
 27010 000c 08BF     		it	eq
 27011 000e 0146     		moveq	r1, r0
5802:src/xeq.c     **** 		dest = XromA2D;
ARM GAS  /tmp/ccQlyisH.s 			page 690


5803:src/xeq.c     **** 	}
5804:src/xeq.c     **** 	xcopy(dest, src, sizeof(REGISTER) * 4);
5805:src/xeq.c     **** }
 27012              		.loc 1 5805 1 view .LVU7059
 27013 0010 BDE81040 		pop	{r4, lr}
 27014              		.cfi_restore 14
 27015              		.cfi_restore 4
 27016              		.cfi_def_cfa_offset 0
5802:src/xeq.c     **** 		dest = XromA2D;
 27017              		.loc 1 5802 8 view .LVU7060
 27018 0014 0CBF     		ite	eq
 27019 0016 0248     		ldreq	r0, .L1938
 27020              	.LVL2077:
5797:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 27021              		.loc 1 5797 14 view .LVU7061
 27022 0018 0149     		ldrne	r1, .L1938
 27023              	.LVL2078:
5804:src/xeq.c     **** }
 27024              		.loc 1 5804 2 is_stmt 1 view .LVU7062
 27025 001a 4022     		movs	r2, #64
 27026 001c FFF7FEBF 		b	xcopy
 27027              	.LVL2079:
 27028              	.L1939:
5804:src/xeq.c     **** }
 27029              		.loc 1 5804 2 is_stmt 0 view .LVU7063
 27030              		.align	2
 27031              	.L1938:
 27032 0020 00000000 		.word	XromA2D
 27033              		.cfi_endproc
 27034              	.LFE262:
 27036              		.section	.text.cmdlocr,"ax",%progbits
 27037              		.align	1
 27038              		.p2align 2,,3
 27039              		.global	cmdlocr
 27040              		.syntax unified
 27041              		.thumb
 27042              		.thumb_func
 27043              		.fpu fpv4-sp-d16
 27045              	cmdlocr:
 27046              	.LVL2080:
 27047              	.LFB263:
5806:src/xeq.c     **** 
5807:src/xeq.c     **** /*
5808:src/xeq.c     ****  *  Command to support local variables.
5809:src/xeq.c     ****  *  A stack frame is constructed:
5810:src/xeq.c     ****  *	marker including size of frame,
5811:src/xeq.c     ****  *	register + flag area.
5812:src/xeq.c     ****  *  Registers must reside on even stack positions
5813:src/xeq.c     ****  *  so the flag word is either at the top or at the bottom of the frame.
5814:src/xeq.c     ****  */
5815:src/xeq.c     **** void cmdlocr(unsigned int arg, enum rarg op) {
 27048              		.loc 1 5815 46 is_stmt 1 view -0
 27049              		.cfi_startproc
 27050              		@ args = 0, pretend = 0, frame = 0
 27051              		@ frame_needed = 0, uses_anonymous_args = 0
5816:src/xeq.c     **** 	short int sp = RetStkPtr;
 27052              		.loc 1 5816 2 view .LVU7065
ARM GAS  /tmp/ccQlyisH.s 			page 691


5815:src/xeq.c     **** 	short int sp = RetStkPtr;
 27053              		.loc 1 5815 46 is_stmt 0 view .LVU7066
 27054 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 27055              		.cfi_def_cfa_offset 40
 27056              		.cfi_offset 3, -40
 27057              		.cfi_offset 4, -36
 27058              		.cfi_offset 5, -32
 27059              		.cfi_offset 6, -28
 27060              		.cfi_offset 7, -24
 27061              		.cfi_offset 8, -20
 27062              		.cfi_offset 9, -16
 27063              		.cfi_offset 10, -12
 27064              		.cfi_offset 11, -8
 27065              		.cfi_offset 14, -4
 27066              		.loc 1 5816 17 view .LVU7067
 27067 0004 554F     		ldr	r7, .L1960
 27068 0006 3C68     		ldr	r4, [r7]
 27069              	.LBB3565:
 27070              	.LBB3566:
1088:src/xeq.c     **** }
 27071              		.loc 1 1088 24 view .LVU7068
 27072 0008 B4F8E827 		ldrh	r2, [r4, #2024]
 27073              	.LBE3566:
 27074              	.LBE3565:
 27075              		.loc 1 5816 12 view .LVU7069
 27076 000c B4F9E267 		ldrsh	r6, [r4, #2018]
 27077              	.LVL2081:
5817:src/xeq.c     **** 	int size = (arg << (is_dblmode() ? 3 : 2)) + 2;
 27078              		.loc 1 5817 2 is_stmt 1 view .LVU7070
 27079              	.LBB3568:
 27080              	.LBI3565:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27081              		.loc 1 1087 5 view .LVU7071
 27082              	.LBB3567:
1088:src/xeq.c     **** }
 27083              		.loc 1 1088 2 view .LVU7072
1088:src/xeq.c     **** }
 27084              		.loc 1 1088 24 is_stmt 0 view .LVU7073
 27085 0010 44F20103 		movw	r3, #16385
 27086              	.LBE3567:
 27087              	.LBE3568:
 27088              		.loc 1 5817 39 view .LVU7074
 27089 0014 1340     		ands	r3, r3, r2
 27090 0016 B3F5804F 		cmp	r3, #16384
 27091 001a 0CBF     		ite	eq
 27092 001c 0325     		moveq	r5, #3
 27093 001e 0225     		movne	r5, #2
 27094              		.loc 1 5817 18 view .LVU7075
 27095 0020 A840     		lsls	r0, r0, r5
 27096              	.LVL2082:
 27097              		.loc 1 5817 45 view .LVU7076
 27098 0022 851C     		adds	r5, r0, #2
 27099              	.LVL2083:
5818:src/xeq.c     **** 	const unsigned short marker = LOCAL_MARKER | size;
 27100              		.loc 1 5818 2 is_stmt 1 view .LVU7077
 27101              		.loc 1 5818 45 is_stmt 0 view .LVU7078
 27102 0024 1FFA85F8 		uxth	r8, r5
ARM GAS  /tmp/ccQlyisH.s 			page 692


 27103              	.LVL2084:
5819:src/xeq.c     **** 	int old_size = 0;
 27104              		.loc 1 5819 2 is_stmt 1 view .LVU7079
5820:src/xeq.c     **** 	short unsigned int old_flags = 0;
 27105              		.loc 1 5820 2 view .LVU7080
5821:src/xeq.c     **** 
5822:src/xeq.c     **** 	if (sp != 0 && sp == LocalRegs) {
 27106              		.loc 1 5822 2 view .LVU7081
 27107              		.loc 1 5822 5 is_stmt 0 view .LVU7082
 27108 0028 7EB9     		cbnz	r6, .L1942
 27109              	.LVL2085:
5823:src/xeq.c     **** 		// resize required
5824:src/xeq.c     **** 		old_size = local_levels();
5825:src/xeq.c     **** 		sp += old_size;
5826:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
5827:src/xeq.c     **** 	}
5828:src/xeq.c     **** 	// compute space needed
5829:src/xeq.c     **** 	sp -= size;
 27110              		.loc 1 5829 2 is_stmt 1 view .LVU7083
5830:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27111              		.loc 1 5830 10 is_stmt 0 view .LVU7084
 27112 002a 4D4B     		ldr	r3, .L1960+4
5829:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27113              		.loc 1 5829 5 view .LVU7085
 27114 002c C8F10004 		rsb	r4, r8, #0
 27115              		.loc 1 5830 5 view .LVU7086
 27116 0030 1B68     		ldr	r3, [r3]
5829:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27117              		.loc 1 5829 5 view .LVU7087
 27118 0032 24B2     		sxth	r4, r4
 27119              	.LVL2086:
 27120              		.loc 1 5830 2 is_stmt 1 view .LVU7088
 27121              		.loc 1 5830 6 is_stmt 0 view .LVU7089
 27122 0034 6242     		rsbs	r2, r4, #0
 27123              		.loc 1 5830 5 view .LVU7090
 27124 0036 9A42     		cmp	r2, r3
 27125 0038 42DC     		bgt	.L1948
 27126 003a 4FEA4409 		lsl	r9, r4, #1
 27127 003e DFF828B1 		ldr	fp, .L1960+12
 27128 0042 4FEA450A 		lsl	r10, r5, #1
 27129 0046 4B46     		mov	r3, r9
 27130 0048 13E0     		b	.L1946
 27131              	.LVL2087:
 27132              	.L1942:
5822:src/xeq.c     **** 		// resize required
 27133              		.loc 1 5822 23 discriminator 1 view .LVU7091
 27134 004a B4F9DE47 		ldrsh	r4, [r4, #2014]
5822:src/xeq.c     **** 		// resize required
 27135              		.loc 1 5822 14 discriminator 1 view .LVU7092
 27136 004e B442     		cmp	r4, r6
 27137 0050 28D0     		beq	.L1947
5829:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27138              		.loc 1 5829 2 is_stmt 1 view .LVU7093
 27139              		.loc 1 5830 10 is_stmt 0 view .LVU7094
 27140 0052 434B     		ldr	r3, .L1960+4
5829:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27141              		.loc 1 5829 5 view .LVU7095
ARM GAS  /tmp/ccQlyisH.s 			page 693


 27142 0054 A6EB0804 		sub	r4, r6, r8
 27143              		.loc 1 5830 5 view .LVU7096
 27144 0058 1B68     		ldr	r3, [r3]
5829:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27145              		.loc 1 5829 5 view .LVU7097
 27146 005a 24B2     		sxth	r4, r4
 27147              	.LVL2088:
 27148              		.loc 1 5830 2 is_stmt 1 view .LVU7098
 27149              		.loc 1 5830 6 is_stmt 0 view .LVU7099
 27150 005c 6242     		rsbs	r2, r4, #0
 27151              		.loc 1 5830 5 view .LVU7100
 27152 005e 9A42     		cmp	r2, r3
 27153 0060 2EDC     		bgt	.L1948
 27154 0062 4FEA4409 		lsl	r9, r4, #1
 27155 0066 DFF800B1 		ldr	fp, .L1960+12
 27156 006a 4FEA450A 		lsl	r10, r5, #1
 27157 006e 4B46     		mov	r3, r9
5820:src/xeq.c     **** 
 27158              		.loc 1 5820 21 view .LVU7101
 27159 0070 0026     		movs	r6, #0
 27160              	.LVL2089:
 27161              	.L1946:
5831:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
5832:src/xeq.c     **** 		return;
5833:src/xeq.c     **** 	}
5834:src/xeq.c     **** 	if ( old_size > 0 ) {
5835:src/xeq.c     **** 		// move previous contents to new destination
5836:src/xeq.c     **** 		int n;
5837:src/xeq.c     **** 		if (size > old_size) {
5838:src/xeq.c     **** 			n = old_size;
5839:src/xeq.c     **** 			size -= old_size;
5840:src/xeq.c     **** 		}
5841:src/xeq.c     **** 		else {
5842:src/xeq.c     **** 			n = size;
5843:src/xeq.c     **** 			size = 0;
5844:src/xeq.c     **** 		}
5845:src/xeq.c     **** 		xcopy(RetStk + sp, RetStk + LocalRegs, n + n);
5846:src/xeq.c     **** 	}
5847:src/xeq.c     **** 	// fill the rest with 0
5848:src/xeq.c     **** 	xset(RetStk + sp + old_size, 0, size + size);
 27162              		.loc 1 5848 2 is_stmt 1 view .LVU7102
 27163              		.loc 1 5848 19 is_stmt 0 view .LVU7103
 27164 0072 DBF80000 		ldr	r0, [fp]
 27165              		.loc 1 5848 2 view .LVU7104
 27166 0076 5246     		mov	r2, r10
 27167 0078 1844     		add	r0, r0, r3
 27168 007a 0021     		movs	r1, #0
 27169 007c FFF7FEFF 		bl	xset
 27170              	.LVL2090:
5849:src/xeq.c     **** 
5850:src/xeq.c     **** 	// set marker, pointers and flags
5851:src/xeq.c     **** 	RetStk[sp] = marker;
 27171              		.loc 1 5851 2 is_stmt 1 view .LVU7105
5852:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 27172              		.loc 1 5852 14 is_stmt 0 view .LVU7106
 27173 0080 3B68     		ldr	r3, [r7]
5851:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
ARM GAS  /tmp/ccQlyisH.s 			page 694


 27174              		.loc 1 5851 13 view .LVU7107
 27175 0082 DBF80020 		ldr	r2, [fp]
5818:src/xeq.c     **** 	int old_size = 0;
 27176              		.loc 1 5818 23 view .LVU7108
 27177 0086 48F48058 		orr	r8, r8, #4096
 27178              	.LVL2091:
5851:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 27179              		.loc 1 5851 13 view .LVU7109
 27180 008a 22F80980 		strh	r8, [r2, r9]	@ movhi
 27181              		.loc 1 5852 2 is_stmt 1 view .LVU7110
5853:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 27182              		.loc 1 5853 3 is_stmt 0 view .LVU7111
 27183 008e 0021     		movs	r1, #0
5852:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 27184              		.loc 1 5852 24 view .LVU7112
 27185 0090 A3F8DE47 		strh	r4, [r3, #2014]	@ movhi
5852:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 27186              		.loc 1 5852 12 view .LVU7113
 27187 0094 A3F8E247 		strh	r4, [r3, #2018]	@ movhi
 27188              		.loc 1 5853 2 is_stmt 1 view .LVU7114
 27189              		.loc 1 5853 3 is_stmt 0 view .LVU7115
 27190 0098 7020     		movs	r0, #112
 27191 009a FFF7FEFF 		bl	flag_word
 27192              	.LVL2092:
 27193              		.loc 1 5853 36 view .LVU7116
 27194 009e 0680     		strh	r6, [r0]	@ movhi
 27195              	.L1940:
5854:src/xeq.c     **** }
 27196              		.loc 1 5854 1 view .LVU7117
 27197 00a0 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27198              	.LVL2093:
 27199              	.L1947:
5824:src/xeq.c     **** 		sp += old_size;
 27200              		.loc 1 5824 3 is_stmt 1 view .LVU7118
 27201              	.LBB3569:
 27202              	.LBI3569:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 27203              		.loc 1 214 5 view .LVU7119
 27204              	.LBB3570:
 215:src/xeq.c     **** }
 27205              		.loc 1 215 2 view .LVU7120
 215:src/xeq.c     **** }
 27206              		.loc 1 215 57 is_stmt 0 view .LVU7121
 27207 00a4 002C     		cmp	r4, #0
 27208 00a6 13DB     		blt	.L1957
 215:src/xeq.c     **** }
 27209              		.loc 1 215 57 view .LVU7122
 27210              	.LBE3570:
 27211              	.LBE3569:
5825:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27212              		.loc 1 5825 3 is_stmt 1 view .LVU7123
 27213              	.LVL2094:
5826:src/xeq.c     **** 	}
 27214              		.loc 1 5826 3 view .LVU7124
5826:src/xeq.c     **** 	}
 27215              		.loc 1 5826 16 is_stmt 0 view .LVU7125
 27216 00a8 0021     		movs	r1, #0
ARM GAS  /tmp/ccQlyisH.s 			page 695


 27217              	.LVL2095:
5826:src/xeq.c     **** 	}
 27218              		.loc 1 5826 16 view .LVU7126
 27219 00aa 7020     		movs	r0, #112
 27220 00ac FFF7FEFF 		bl	flag_word
 27221              	.LVL2096:
5830:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27222              		.loc 1 5830 10 view .LVU7127
 27223 00b0 2B4B     		ldr	r3, .L1960+4
5829:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27224              		.loc 1 5829 5 view .LVU7128
 27225 00b2 A4EB0804 		sub	r4, r4, r8
 27226              	.LVL2097:
5830:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27227              		.loc 1 5830 5 view .LVU7129
 27228 00b6 1B68     		ldr	r3, [r3]
5829:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27229              		.loc 1 5829 5 view .LVU7130
 27230 00b8 24B2     		sxth	r4, r4
5830:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27231              		.loc 1 5830 6 view .LVU7131
 27232 00ba 6242     		rsbs	r2, r4, #0
 27233              	.LVL2098:
5829:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27234              		.loc 1 5829 2 is_stmt 1 view .LVU7132
5830:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27235              		.loc 1 5830 2 view .LVU7133
5830:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27236              		.loc 1 5830 5 is_stmt 0 view .LVU7134
 27237 00bc 9A42     		cmp	r2, r3
 27238 00be 3EDD     		ble	.L1958
 27239              	.LVL2099:
 27240              	.L1948:
5831:src/xeq.c     **** 		return;
 27241              		.loc 1 5831 3 is_stmt 1 view .LVU7135
 27242              	.LBB3572:
 27243              	.LBI3572:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27244              		.loc 1 537 5 view .LVU7136
 27245              	.LBB3573:
 538:src/xeq.c     **** 		Error = e;
 27246              		.loc 1 538 2 view .LVU7137
 538:src/xeq.c     **** 		Error = e;
 27247              		.loc 1 538 12 is_stmt 0 view .LVU7138
 27248 00c0 284B     		ldr	r3, .L1960+8
 538:src/xeq.c     **** 		Error = e;
 27249              		.loc 1 538 5 view .LVU7139
 27250 00c2 1A68     		ldr	r2, [r3]
 27251 00c4 002A     		cmp	r2, #0
 27252 00c6 EBD1     		bne	.L1940
 27253              	.LVL2100:
 27254              	.LBB3574:
 27255              	.LBI3574:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27256              		.loc 1 537 5 is_stmt 1 view .LVU7140
 27257              	.LBB3575:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/ccQlyisH.s 			page 696


 27258              		.loc 1 539 3 view .LVU7141
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 27259              		.loc 1 539 9 is_stmt 0 view .LVU7142
 27260 00c8 0B22     		movs	r2, #11
 27261 00ca 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 27262              		.loc 1 540 3 is_stmt 1 view .LVU7143
 27263              	.LBE3575:
 27264              	.LBE3574:
 27265              	.LBE3573:
 27266              	.LBE3572:
 27267              		.loc 1 5854 1 is_stmt 0 view .LVU7144
 27268 00cc BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27269              	.LVL2101:
 27270              	.L1957:
 27271              	.LBB3576:
 27272              	.LBB3571:
 215:src/xeq.c     **** }
 27273              		.loc 1 215 25 view .LVU7145
 27274 00d0 DFF894B0 		ldr	fp, .L1960+12
 27275 00d4 DBF80030 		ldr	r3, [fp]
 27276 00d8 33F81490 		ldrh	r9, [r3, r4, lsl #1]
 27277 00dc C9F30B09 		ubfx	r9, r9, #0, #12
 27278              	.LVL2102:
 215:src/xeq.c     **** }
 27279              		.loc 1 215 25 view .LVU7146
 27280              	.LBE3571:
 27281              	.LBE3576:
5825:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27282              		.loc 1 5825 3 is_stmt 1 view .LVU7147
5825:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27283              		.loc 1 5825 6 is_stmt 0 view .LVU7148
 27284 00e0 4C44     		add	r4, r4, r9
5826:src/xeq.c     **** 	}
 27285              		.loc 1 5826 16 view .LVU7149
 27286 00e2 0021     		movs	r1, #0
 27287              	.LVL2103:
5826:src/xeq.c     **** 	}
 27288              		.loc 1 5826 16 view .LVU7150
 27289 00e4 7020     		movs	r0, #112
 27290 00e6 FFF7FEFF 		bl	flag_word
 27291              	.LVL2104:
5825:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27292              		.loc 1 5825 6 view .LVU7151
 27293 00ea A4B2     		uxth	r4, r4
 27294              	.LVL2105:
5826:src/xeq.c     **** 	}
 27295              		.loc 1 5826 3 is_stmt 1 view .LVU7152
5830:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27296              		.loc 1 5830 10 is_stmt 0 view .LVU7153
 27297 00ec 1C4B     		ldr	r3, .L1960+4
5826:src/xeq.c     **** 	}
 27298              		.loc 1 5826 13 view .LVU7154
 27299 00ee 0688     		ldrh	r6, [r0]
 27300              	.LVL2106:
5829:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27301              		.loc 1 5829 2 is_stmt 1 view .LVU7155
ARM GAS  /tmp/ccQlyisH.s 			page 697


5830:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27302              		.loc 1 5830 5 is_stmt 0 view .LVU7156
 27303 00f0 1B68     		ldr	r3, [r3]
5829:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27304              		.loc 1 5829 5 view .LVU7157
 27305 00f2 A4EB0804 		sub	r4, r4, r8
 27306              	.LVL2107:
5829:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27307              		.loc 1 5829 5 view .LVU7158
 27308 00f6 24B2     		sxth	r4, r4
 27309              	.LVL2108:
5830:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27310              		.loc 1 5830 2 is_stmt 1 view .LVU7159
5830:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27311              		.loc 1 5830 6 is_stmt 0 view .LVU7160
 27312 00f8 6242     		rsbs	r2, r4, #0
5830:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27313              		.loc 1 5830 5 view .LVU7161
 27314 00fa 9A42     		cmp	r2, r3
 27315 00fc E0DC     		bgt	.L1948
5834:src/xeq.c     **** 		// move previous contents to new destination
 27316              		.loc 1 5834 2 is_stmt 1 view .LVU7162
5834:src/xeq.c     **** 		// move previous contents to new destination
 27317              		.loc 1 5834 5 is_stmt 0 view .LVU7163
 27318 00fe B9F1000F 		cmp	r9, #0
 27319 0102 25D0     		beq	.L1959
 27320              	.LBB3577:
5836:src/xeq.c     **** 		if (size > old_size) {
 27321              		.loc 1 5836 3 is_stmt 1 view .LVU7164
5837:src/xeq.c     **** 			n = old_size;
 27322              		.loc 1 5837 3 view .LVU7165
5845:src/xeq.c     **** 	}
 27323              		.loc 1 5845 31 is_stmt 0 view .LVU7166
 27324 0104 3B68     		ldr	r3, [r7]
5845:src/xeq.c     **** 	}
 27325              		.loc 1 5845 3 view .LVU7167
 27326 0106 DBF80000 		ldr	r0, [fp]
5845:src/xeq.c     **** 	}
 27327              		.loc 1 5845 29 view .LVU7168
 27328 010a B3F9DE17 		ldrsh	r1, [r3, #2014]
5837:src/xeq.c     **** 			n = old_size;
 27329              		.loc 1 5837 6 view .LVU7169
 27330 010e 4D45     		cmp	r5, r9
5838:src/xeq.c     **** 			size -= old_size;
 27331              		.loc 1 5838 4 is_stmt 1 view .LVU7170
 27332              	.LVL2109:
5839:src/xeq.c     **** 		}
 27333              		.loc 1 5839 4 view .LVU7171
5839:src/xeq.c     **** 		}
 27334              		.loc 1 5839 9 is_stmt 0 view .LVU7172
 27335 0110 C2BF     		ittt	gt
 27336 0112 A5EB0905 		subgt	r5, r5, r9
 27337              	.LVL2110:
5839:src/xeq.c     **** 		}
 27338              		.loc 1 5839 9 view .LVU7173
 27339 0116 4FEA450A 		lslgt	r10, r5, #1
 27340 011a 4D46     		movgt	r5, r9
ARM GAS  /tmp/ccQlyisH.s 			page 698


 27341              	.LVL2111:
5845:src/xeq.c     **** 	}
 27342              		.loc 1 5845 3 is_stmt 1 view .LVU7174
 27343 011c 00EB4101 		add	r1, r0, r1, lsl #1
 27344 0120 4FEA4502 		lsl	r2, r5, #1
 27345 0124 00EB4400 		add	r0, r0, r4, lsl #1
 27346 0128 D8BF     		it	le
 27347 012a 4FF0000A 		movle	r10, #0
 27348 012e FFF7FEFF 		bl	xcopy
 27349              	.LVL2112:
 27350 0132 04EB0903 		add	r3, r4, r9
 27351 0136 5B00     		lsls	r3, r3, #1
5845:src/xeq.c     **** 	}
 27352              		.loc 1 5845 16 is_stmt 0 view .LVU7175
 27353 0138 4FEA4409 		lsl	r9, r4, #1
 27354              	.LVL2113:
5845:src/xeq.c     **** 	}
 27355              		.loc 1 5845 16 view .LVU7176
 27356 013c 99E7     		b	.L1946
 27357              	.LVL2114:
 27358              	.L1958:
5845:src/xeq.c     **** 	}
 27359              		.loc 1 5845 16 view .LVU7177
 27360 013e 4FEA4409 		lsl	r9, r4, #1
 27361              	.LBE3577:
5826:src/xeq.c     **** 	}
 27362              		.loc 1 5826 13 view .LVU7178
 27363 0142 0688     		ldrh	r6, [r0]
 27364 0144 DFF820B0 		ldr	fp, .L1960+12
 27365 0148 4FEA450A 		lsl	r10, r5, #1
 27366 014c 4B46     		mov	r3, r9
 27367 014e 90E7     		b	.L1946
 27368              	.LVL2115:
 27369              	.L1959:
5826:src/xeq.c     **** 	}
 27370              		.loc 1 5826 13 view .LVU7179
 27371 0150 4FEA4409 		lsl	r9, r4, #1
 27372              	.LVL2116:
5826:src/xeq.c     **** 	}
 27373              		.loc 1 5826 13 view .LVU7180
 27374 0154 4FEA450A 		lsl	r10, r5, #1
5834:src/xeq.c     **** 		// move previous contents to new destination
 27375              		.loc 1 5834 5 view .LVU7181
 27376 0158 4B46     		mov	r3, r9
 27377 015a 8AE7     		b	.L1946
 27378              	.L1961:
 27379              		.align	2
 27380              	.L1960:
 27381 015c 00000000 		.word	main_ram
 27382 0160 00000000 		.word	RetStkSize
 27383 0164 00000000 		.word	Error
 27384 0168 00000000 		.word	RetStk
 27385              		.cfi_endproc
 27386              	.LFE263:
 27388              		.section	.text.cmdxout,"ax",%progbits
 27389              		.align	1
 27390              		.p2align 2,,3
ARM GAS  /tmp/ccQlyisH.s 			page 699


 27391              		.global	cmdxout
 27392              		.syntax unified
 27393              		.thumb
 27394              		.thumb_func
 27395              		.fpu fpv4-sp-d16
 27397              	cmdxout:
 27398              	.LVL2117:
 27399              	.LFB265:
5855:src/xeq.c     **** 
5856:src/xeq.c     **** 
5857:src/xeq.c     **** /*
5858:src/xeq.c     ****  *  xIN: Setup an environment for XROM based math routines:
5859:src/xeq.c     ****  *
5860:src/xeq.c     ****  *  - 12 Private double precision stack & special registers X to K
5861:src/xeq.c     ****  *  - private return stack for local flags & registers
5862:src/xeq.c     ****  *  - 6 system flags
5863:src/xeq.c     ****  *
5864:src/xeq.c     ****  *  Argument:
5865:src/xeq.c     ****  *      noLocals - bit 7
5866:src/xeq.c     ****  *      out      - bits 4..5
5867:src/xeq.c     ****  *      in       - bits 2..4		
5868:src/xeq.c     ****  *      setLastX - bit 1
5869:src/xeq.c     ****  *      complex  - bit 0
5870:src/xeq.c     ****  *
5871:src/xeq.c     ****  *  Local flags:
5872:src/xeq.c     ****  *      .00 to .09 are free for general use.
5873:src/xeq.c     ****  *	.10 - stack_depth as previously set by user, don't touch it!
5874:src/xeq.c     ****  *	.11 - mode_double as previously set by user, don't touch it!
5875:src/xeq.c     ****  *      .12 - complex, from argument, can be modified.
5876:src/xeq.c     ****  *	.13 - setLastX, from argumment, can be modified.
5877:src/xeq.c     ****  *	.14 - state_lift as desired on exit, set to 1 by default, can be modified.
5878:src/xeq.c     ****  *      .15 - reserved, indicates that xIN is active, set to 1, don't touch it!
5879:src/xeq.c     ****  *
5880:src/xeq.c     ****  *  If the call is repeated only the argument values are reevaluated.
5881:src/xeq.c     ****  */
5882:src/xeq.c     **** void cmdxin(unsigned int arg, enum rarg op) {
5883:src/xeq.c     **** 
5884:src/xeq.c     **** 	int i;
5885:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5886:src/xeq.c     **** 	REGISTER *previousLocals = NULL;
5887:src/xeq.c     **** 	unsigned short previousFlags = 0;
5888:src/xeq.c     **** 	int num_locals = 0;
5889:src/xeq.c     **** #endif
5890:src/xeq.c     **** #ifndef REALBUILD
5891:src/xeq.c     **** 	/* This should never happen in a real build but it causes havoc writing
5892:src/xeq.c     **** 	 * xrom code, so trap it here.
5893:src/xeq.c     **** 	 */
5894:src/xeq.c     **** 	if (XromFlags.xIN) {
5895:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5896:src/xeq.c     **** 		return;
5897:src/xeq.c     **** 	}
5898:src/xeq.c     **** #endif
5899:src/xeq.c     **** 
5900:src/xeq.c     **** 	// Setup the XromLocal and XromParams structures in volatile RAM
5901:src/xeq.c     **** 	// fill with 0
5902:src/xeq.c     **** 	xset(&XromLocal, 0, sizeof(XromLocal));
5903:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
ARM GAS  /tmp/ccQlyisH.s 			page 700


5904:src/xeq.c     **** 
5905:src/xeq.c     **** 	// Flags
5906:src/xeq.c     **** 	XromFlags.state_lift_in = get_lift();
5907:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
5908:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
5909:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
5910:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
5911:src/xeq.c     **** 	XromFlags.state_lift = 1;
5912:src/xeq.c     **** 	XromFlags.xIN = 1;
5913:src/xeq.c     **** 
5914:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5915:src/xeq.c     **** 	// Save pointers to original local data
5916:src/xeq.c     **** 	if ((arg & 0x80) != 0 && LocalRegs < 0) {
5917:src/xeq.c     **** 		XromFlags.copyLocals = 1;
5918:src/xeq.c     **** 		previousFlags = *flag_word(LOCAL_FLAG_BASE, NULL);
5919:src/xeq.c     **** 		previousLocals = get_reg_n(LOCAL_REG_BASE);
5920:src/xeq.c     **** 		num_locals = local_regs();
5921:src/xeq.c     **** 	}
5922:src/xeq.c     **** #endif
5923:src/xeq.c     **** 	// Establish local return stack
5924:src/xeq.c     **** 	XromUserRetStk = RetStk;
5925:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
5926:src/xeq.c     **** 
5927:src/xeq.c     **** 	RetStk = XromRetStk;
5928:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5929:src/xeq.c     **** 	RetStkPtr = 0;			// Locals will be allocated later
5930:src/xeq.c     **** #else
5931:src/xeq.c     **** 	LocalRegs = RetStkPtr = -2;	// Allocate just the local flags
5932:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
5933:src/xeq.c     **** #endif
5934:src/xeq.c     **** 
5935:src/xeq.c     **** 	// Parse the argument into fields
5936:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5937:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x20) != 0;
5938:src/xeq.c     **** 	XromFlags.complex = (arg & 0x40) != 0;
5939:src/xeq.c     **** 	XromIn = (arg & 0x1f) % 5;
5940:src/xeq.c     **** 	XromOut = (arg & 0x1f) / 5;
5941:src/xeq.c     **** #else
5942:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x40) != 0;
5943:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
5944:src/xeq.c     **** 	XromIn = (arg & 0x7);
5945:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
5946:src/xeq.c     **** #endif
5947:src/xeq.c     **** 	if (XromFlags.complex) {
5948:src/xeq.c     **** 		// Complex arguments are always in pairs
5949:src/xeq.c     **** 		XromIn <<= 1;
5950:src/xeq.c     **** 		XromOut <<= 1;
5951:src/xeq.c     **** 	}
5952:src/xeq.c     **** 
5953:src/xeq.c     ****         UState.rounding_mode = 0;
5954:src/xeq.c     **** 
5955:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5956:src/xeq.c     **** 	// Allocate the local frame
5957:src/xeq.c     **** 	LocalRegs = 0;
5958:src/xeq.c     **** 	UState.mode_double = 1;		// Needed to allocate enough registers
5959:src/xeq.c     **** 	cmdlocr(num_locals, RARG_LOCR);
5960:src/xeq.c     **** 	if (XromFlags.copyLocals)
ARM GAS  /tmp/ccQlyisH.s 			page 701


5961:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = previousFlags;
5962:src/xeq.c     **** #endif
5963:src/xeq.c     **** 	// Switch to double precision mode
5964:src/xeq.c     **** 	if (XromFlags.mode_int) {
5965:src/xeq.c     **** 		// Convert integers to decimal128
5966:src/xeq.c     **** #ifndef ENABLE_COPYLOCALS
5967:src/xeq.c     **** 		UState.mode_double = 1;
5968:src/xeq.c     **** #endif
5969:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
5970:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
5971:src/xeq.c     **** 	}
5972:src/xeq.c     **** 	else if (XromFlags.mode_double) {
5973:src/xeq.c     **** 		// No conversion necessary
5974:src/xeq.c     **** 		xcopy(XromStack, StackBase, sizeof(XromStack));
5975:src/xeq.c     **** 		StackBase = XromStack;
5976:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5977:src/xeq.c     **** 		if (XromFlags.copyLocals)
5978:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), previousLocals, num_locals);
5979:src/xeq.c     **** #endif
5980:src/xeq.c     **** 	}
5981:src/xeq.c     **** 	else {
5982:src/xeq.c     **** 		// Convert decimal64 to decinal128
5983:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5984:src/xeq.c     **** 		UState.mode_double = 0;		// This was the original state before xIN
5985:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
5986:src/xeq.c     **** 		if (XromFlags.copyLocals) {
5987:src/xeq.c     **** 			decimal64  *src  = &(previousLocals->s);
5988:src/xeq.c     **** 			decimal128 *dest = &(get_reg_n(LOCAL_REG_BASE)->d);
5989:src/xeq.c     **** 			while (num_locals--)
5990:src/xeq.c     **** 				packed128_from_packed(dest++, src++);
5991:src/xeq.c     **** 		}
5992:src/xeq.c     **** #else
5993:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
5994:src/xeq.c     **** #endif
5995:src/xeq.c     **** 	}
5996:src/xeq.c     **** 
5997:src/xeq.c     **** 	// Set stack size to 8 and turn on stack_lift
5998:src/xeq.c     **** 	set_lift();
5999:src/xeq.c     **** 	UState.stack_depth = 1;
6000:src/xeq.c     **** 
6001:src/xeq.c     **** 	// check for any NaNs in input
6002:src/xeq.c     **** 	for (i = 0; i < XromIn; ++i) {
6003:src/xeq.c     **** 		decNumber x;
6004:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
6005:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
6006:src/xeq.c     **** 			// domain error
6007:src/xeq.c     **** 			if (get_user_flag(NAN_FLAG)) {
6008:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
6009:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
6010:src/xeq.c     **** 				// Early exit of routine
6011:src/xeq.c     **** 				cmdxout(0, RARG_XROM_OUT);
6012:src/xeq.c     **** 			} 
6013:src/xeq.c     **** 			else
6014:src/xeq.c     **** 				report_err(ERR_DOMAIN);	// this will do all the cleanup
6015:src/xeq.c     **** 			return;
6016:src/xeq.c     **** 		}
6017:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQlyisH.s 			page 702


6018:src/xeq.c     **** }
6019:src/xeq.c     **** 
6020:src/xeq.c     **** /*
6021:src/xeq.c     ****  *  xOUT: Return from an XROM routine that has previously called xIN
6022:src/xeq.c     ****  *  Argument:
6023:src/xeq.c     ****  *     bit 0 set - do a RTN+1
6024:src/xeq.c     ****  *     bit 1 set - leave I alone even with a complex result
6025:src/xeq.c     ****  */
6026:src/xeq.c     **** void cmdxout(unsigned int arg, enum rarg op) {
 27400              		.loc 1 6026 46 is_stmt 1 view -0
 27401              		.cfi_startproc
 27402              		@ args = 0, pretend = 0, frame = 56
 27403              		@ frame_needed = 0, uses_anonymous_args = 0
6027:src/xeq.c     **** 	int i, dbl, intm;
 27404              		.loc 1 6027 2 view .LVU7183
6028:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6029:src/xeq.c     **** 	unsigned short flags = *flag_word(LOCAL_FLAG_BASE, NULL);
6030:src/xeq.c     **** 	REGISTER *locals = get_reg_n(LOCAL_REG_BASE);
6031:src/xeq.c     **** 	int num_locals = local_regs();
6032:src/xeq.c     **** #endif
6033:src/xeq.c     **** #ifndef REALBUILD
6034:src/xeq.c     **** 	// shouldn't happen in final build
6035:src/xeq.c     **** 	if (! XromFlags.xIN) {
 27405              		.loc 1 6035 2 view .LVU7184
6026:src/xeq.c     **** 	int i, dbl, intm;
 27406              		.loc 1 6026 46 is_stmt 0 view .LVU7185
 27407 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 27408              		.cfi_def_cfa_offset 36
 27409              		.cfi_offset 4, -36
 27410              		.cfi_offset 5, -32
 27411              		.cfi_offset 6, -28
 27412              		.cfi_offset 7, -24
 27413              		.cfi_offset 8, -20
 27414              		.cfi_offset 9, -16
 27415              		.cfi_offset 10, -12
 27416              		.cfi_offset 11, -8
 27417              		.cfi_offset 14, -4
 27418              		.loc 1 6035 6 view .LVU7186
 27419 0004 774C     		ldr	r4, .L2008
 27420              		.loc 1 6035 5 view .LVU7187
 27421 0006 94F90130 		ldrsb	r3, [r4, #1]
 27422 000a 002B     		cmp	r3, #0
6026:src/xeq.c     **** 	int i, dbl, intm;
 27423              		.loc 1 6026 46 view .LVU7188
 27424 000c 8FB0     		sub	sp, sp, #60
 27425              		.cfi_def_cfa_offset 96
 27426              		.loc 1 6035 5 view .LVU7189
 27427 000e 07DB     		blt	.L1963
6036:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 27428              		.loc 1 6036 3 is_stmt 1 view .LVU7190
 27429              	.LVL2118:
 27430              	.LBB3601:
 27431              	.LBI3601:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27432              		.loc 1 537 5 view .LVU7191
 27433              	.LBB3602:
 538:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccQlyisH.s 			page 703


 27434              		.loc 1 538 2 view .LVU7192
 538:src/xeq.c     **** 		Error = e;
 27435              		.loc 1 538 12 is_stmt 0 view .LVU7193
 27436 0010 754B     		ldr	r3, .L2008+4
 538:src/xeq.c     **** 		Error = e;
 27437              		.loc 1 538 5 view .LVU7194
 27438 0012 1A68     		ldr	r2, [r3]
 27439 0014 0AB9     		cbnz	r2, .L1962
 27440              	.LVL2119:
 27441              	.LBB3603:
 27442              	.LBI3603:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27443              		.loc 1 537 5 is_stmt 1 view .LVU7195
 27444              	.LBB3604:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 27445              		.loc 1 539 3 view .LVU7196
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 27446              		.loc 1 539 9 is_stmt 0 view .LVU7197
 27447 0016 0722     		movs	r2, #7
 27448 0018 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 27449              		.loc 1 540 3 is_stmt 1 view .LVU7198
 27450              	.LVL2120:
 27451              	.L1962:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 27452              		.loc 1 540 3 is_stmt 0 view .LVU7199
 27453              	.LBE3604:
 27454              	.LBE3603:
 27455              	.LBE3602:
 27456              	.LBE3601:
6037:src/xeq.c     **** 		return;
6038:src/xeq.c     **** 	}
6039:src/xeq.c     **** #endif
6040:src/xeq.c     **** 	// End special handling
6041:src/xeq.c     **** 	XromFlags.xIN = 0;
6042:src/xeq.c     **** 
6043:src/xeq.c     **** 	// Restore the global return stack
6044:src/xeq.c     **** 	RetStk = XromUserRetStk;
6045:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
6046:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
6047:src/xeq.c     **** 
6048:src/xeq.c     **** 	// RTN or RTN+1 depending on bit 0 of argument
6049:src/xeq.c     **** 	do_rtn(arg & 1);
6050:src/xeq.c     **** 
6051:src/xeq.c     **** 	// Switch back to user stack settings
6052:src/xeq.c     **** 	dbl = UState.mode_double = XromFlags.mode_double;
6053:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
6054:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
6055:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
6056:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
6057:src/xeq.c     **** 
6058:src/xeq.c     **** 	// Last X handling and complex flag
6059:src/xeq.c     **** 	if (XromFlags.setLastX) {
6060:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
6061:src/xeq.c     **** 			setlastXY();
6062:src/xeq.c     **** 		else
6063:src/xeq.c     **** 			setlastX();
ARM GAS  /tmp/ccQlyisH.s 			page 704


6064:src/xeq.c     **** 	}
6065:src/xeq.c     **** 
6066:src/xeq.c     **** 	// Move the stack according to the in/out fields
6067:src/xeq.c     **** 	i = (int) XromOut - (int) XromIn;
6068:src/xeq.c     **** 	if (XromFlags.complex) {
6069:src/xeq.c     **** 		set_was_complex();
6070:src/xeq.c     **** 		while (i < 0) {
6071:src/xeq.c     **** 			// different stack handling in complex mode
6072:src/xeq.c     **** 			// more to consume then to push back
6073:src/xeq.c     **** 			lower2();
6074:src/xeq.c     **** 			i += 2;
6075:src/xeq.c     **** 		}
6076:src/xeq.c     **** 	}
6077:src/xeq.c     **** 	else {
6078:src/xeq.c     **** 		while (i < 0) {
6079:src/xeq.c     **** 			// more to consume then to push back
6080:src/xeq.c     **** 			lower();	
6081:src/xeq.c     **** 			++i;
6082:src/xeq.c     **** 		}
6083:src/xeq.c     **** 	}
6084:src/xeq.c     **** 	if (i > 0) {
6085:src/xeq.c     **** 		// more to push back then to consume
6086:src/xeq.c     **** 		if (! XromFlags.state_lift_in)
6087:src/xeq.c     **** 			--i;
6088:src/xeq.c     **** 		while (i > 0) {
6089:src/xeq.c     **** 			lift();
6090:src/xeq.c     **** 			--i;
6091:src/xeq.c     **** 		}
6092:src/xeq.c     **** 	}
6093:src/xeq.c     **** 	State2.state_lift = XromFlags.state_lift;
6094:src/xeq.c     **** 
6095:src/xeq.c     **** 	// Copy results
6096:src/xeq.c     **** 	i = XromOut;
6097:src/xeq.c     **** 	if (intm) {
6098:src/xeq.c     **** 		while (i--) {
6099:src/xeq.c     **** 			decNumber r;
6100:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
6101:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
6102:src/xeq.c     **** 		}
6103:src/xeq.c     **** 	}
6104:src/xeq.c     **** 	else if (dbl) {
6105:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
6106:src/xeq.c     **** 	}
6107:src/xeq.c     **** 	else {
6108:src/xeq.c     **** 		while (i--)
6109:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
6110:src/xeq.c     **** 	}
6111:src/xeq.c     **** 
6112:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6113:src/xeq.c     **** 	// Copy back local data
6114:src/xeq.c     **** 	if (XromFlags.copyLocals) {
6115:src/xeq.c     **** 		i = local_regs();
6116:src/xeq.c     **** 		num_locals = i < num_locals ? i : num_locals; 
6117:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = flags;
6118:src/xeq.c     **** 		if (intm) {
6119:src/xeq.c     **** 			// not used
6120:src/xeq.c     **** 		}
ARM GAS  /tmp/ccQlyisH.s 			page 705


6121:src/xeq.c     **** 		else if (dbl) {
6122:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), locals, num_locals);
6123:src/xeq.c     **** 		}
6124:src/xeq.c     **** 		else {
6125:src/xeq.c     **** 			decimal64  *dest = &(get_reg_n(LOCAL_REG_BASE)->s);
6126:src/xeq.c     **** 			decimal128 *src  = &(locals->d);
6127:src/xeq.c     **** 			while (num_locals--)
6128:src/xeq.c     **** 				packed_from_packed128(dest++, src++);
6129:src/xeq.c     **** 		}
6130:src/xeq.c     **** 	}
6131:src/xeq.c     **** #endif
6132:src/xeq.c     **** }
 27457              		.loc 1 6132 1 view .LVU7200
 27458 001a 0FB0     		add	sp, sp, #60
 27459              		.cfi_remember_state
 27460              		.cfi_def_cfa_offset 36
 27461              		@ sp needed
 27462 001c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27463              	.LVL2121:
 27464              	.L1963:
 27465              		.cfi_restore_state
 27466              	.LBB3605:
 27467              	.LBB3606:
6045:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27468              		.loc 1 6045 2 view .LVU7201
 27469 0020 724F     		ldr	r7, .L2008+8
6046:src/xeq.c     **** 
 27470              		.loc 1 6046 12 view .LVU7202
 27471 0022 7349     		ldr	r1, .L2008+12
 27472              	.LVL2122:
6045:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27473              		.loc 1 6045 2 view .LVU7203
 27474 0024 3A68     		ldr	r2, [r7]
6041:src/xeq.c     **** 
 27475              		.loc 1 6041 16 view .LVU7204
 27476 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6045:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27477              		.loc 1 6045 12 view .LVU7205
 27478 0028 A689     		ldrh	r6, [r4, #12]
 27479 002a A2F8E267 		strh	r6, [r2, #2018]	@ movhi
 27480 002e 0546     		mov	r5, r0
 27481              	.LVL2123:
6045:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27482              		.loc 1 6045 12 view .LVU7206
 27483              	.LBE3606:
 27484              	.LBI3605:
6026:src/xeq.c     **** 	int i, dbl, intm;
 27485              		.loc 1 6026 6 is_stmt 1 view .LVU7207
 27486              	.LBB3635:
6041:src/xeq.c     **** 
 27487              		.loc 1 6041 2 view .LVU7208
6046:src/xeq.c     **** 
 27488              		.loc 1 6046 12 is_stmt 0 view .LVU7209
 27489 0030 0868     		ldr	r0, [r1]
 27490              	.LVL2124:
6044:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27491              		.loc 1 6044 9 view .LVU7210
ARM GAS  /tmp/ccQlyisH.s 			page 706


 27492 0032 7049     		ldr	r1, .L2008+16
6046:src/xeq.c     **** 
 27493              		.loc 1 6046 12 view .LVU7211
 27494 0034 A2F8DE07 		strh	r0, [r2, #2014]	@ movhi
6041:src/xeq.c     **** 
 27495              		.loc 1 6041 16 view .LVU7212
 27496 0038 6FF3C713 		bfc	r3, #7, #1
6044:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27497              		.loc 1 6044 9 view .LVU7213
 27498 003c A268     		ldr	r2, [r4, #8]
 27499 003e 0A60     		str	r2, [r1]
6049:src/xeq.c     **** 
 27500              		.loc 1 6049 2 view .LVU7214
 27501 0040 05F00100 		and	r0, r5, #1
6041:src/xeq.c     **** 
 27502              		.loc 1 6041 16 view .LVU7215
 27503 0044 6370     		strb	r3, [r4, #1]
6044:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27504              		.loc 1 6044 2 is_stmt 1 view .LVU7216
6045:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27505              		.loc 1 6045 2 view .LVU7217
6046:src/xeq.c     **** 
 27506              		.loc 1 6046 2 view .LVU7218
6049:src/xeq.c     **** 
 27507              		.loc 1 6049 2 view .LVU7219
 27508 0046 FFF7FEFF 		bl	do_rtn
 27509              	.LVL2125:
6052:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27510              		.loc 1 6052 2 view .LVU7220
6052:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27511              		.loc 1 6052 38 is_stmt 0 view .LVU7221
 27512 004a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6052:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27513              		.loc 1 6052 8 view .LVU7222
 27514 004c 3868     		ldr	r0, [r7]
6054:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 27515              		.loc 1 6054 41 view .LVU7223
 27516 004e A678     		ldrb	r6, [r4, #2]	@ zero_extendqisi2
6053:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27517              		.loc 1 6053 21 view .LVU7224
 27518 0050 D0F8E827 		ldr	r2, [r0, #2024]
6056:src/xeq.c     **** 
 27519              		.loc 1 6056 12 view .LVU7225
 27520 0054 DFF8ACA1 		ldr	r10, .L2008+32
6052:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27521              		.loc 1 6052 38 view .LVU7226
 27522 0058 C3F3C009 		ubfx	r9, r3, #3, #1
 27523              	.LVL2126:
6053:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27524              		.loc 1 6053 2 is_stmt 1 view .LVU7227
6053:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27525              		.loc 1 6053 32 is_stmt 0 view .LVU7228
 27526 005c 03F00108 		and	r8, r3, #1
 27527              	.LVL2127:
6054:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 27528              		.loc 1 6054 9 is_stmt 1 view .LVU7229
6055:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
ARM GAS  /tmp/ccQlyisH.s 			page 707


 27529              		.loc 1 6055 2 view .LVU7230
6053:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27530              		.loc 1 6053 21 is_stmt 0 view .LVU7231
 27531 0060 C3F38001 		ubfx	r1, r3, #2, #1
 27532 0064 48EA8933 		orr	r3, r8, r9, lsl #14
 27533              	.LVL2128:
6053:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27534              		.loc 1 6053 21 view .LVU7232
 27535 0068 43EAC143 		orr	r3, r3, r1, lsl #19
 27536 006c 6249     		ldr	r1, .L2008+20
 27537 006e 06F00706 		and	r6, r6, #7
 27538 0072 1140     		ands	r1, r1, r2
 27539 0074 43EA0673 		orr	r3, r3, r6, lsl #28
 27540 0078 0B43     		orrs	r3, r3, r1
 27541 007a C0F8E837 		str	r3, [r0, #2024]
6056:src/xeq.c     **** 
 27542              		.loc 1 6056 2 is_stmt 1 view .LVU7233
6056:src/xeq.c     **** 
 27543              		.loc 1 6056 14 is_stmt 0 view .LVU7234
 27544 007e 6420     		movs	r0, #100
 27545 0080 FFF7FEFF 		bl	get_reg_n
 27546              	.LVL2129:
6059:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27547              		.loc 1 6059 6 view .LVU7235
 27548 0084 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6056:src/xeq.c     **** 
 27549              		.loc 1 6056 12 view .LVU7236
 27550 0086 CAF80000 		str	r0, [r10]
6059:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27551              		.loc 1 6059 2 is_stmt 1 view .LVU7237
6059:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27552              		.loc 1 6059 5 is_stmt 0 view .LVU7238
 27553 008a 9606     		lsls	r6, r2, #26
 27554 008c 09D5     		bpl	.L1966
6060:src/xeq.c     **** 			setlastXY();
 27555              		.loc 1 6060 3 is_stmt 1 view .LVU7239
6060:src/xeq.c     **** 			setlastXY();
 27556              		.loc 1 6060 6 is_stmt 0 view .LVU7240
 27557 008e D006     		lsls	r0, r2, #27
 27558 0090 02D5     		bpl	.L1967
6060:src/xeq.c     **** 			setlastXY();
 27559              		.loc 1 6060 25 view .LVU7241
 27560 0092 A907     		lsls	r1, r5, #30
 27561 0094 40F19F80 		bpl	.L2004
 27562              	.L1967:
6063:src/xeq.c     **** 	}
 27563              		.loc 1 6063 4 is_stmt 1 view .LVU7242
 27564              	.LBB3607:
 27565              	.LBI3607:
 783:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 27566              		.loc 1 783 6 view .LVU7243
 27567              	.LBB3608:
 784:src/xeq.c     **** }
 27568              		.loc 1 784 2 view .LVU7244
 27569 0098 6421     		movs	r1, #100
 27570 009a 6C20     		movs	r0, #108
 27571 009c FFF7FEFF 		bl	copyreg_n
ARM GAS  /tmp/ccQlyisH.s 			page 708


 27572              	.LVL2130:
 27573 00a0 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 27574              	.L1966:
 27575              	.LBE3608:
 27576              	.LBE3607:
6067:src/xeq.c     **** 	if (XromFlags.complex) {
 27577              		.loc 1 6067 2 view .LVU7245
6067:src/xeq.c     **** 	if (XromFlags.complex) {
 27578              		.loc 1 6067 6 is_stmt 0 view .LVU7246
 27579 00a2 94F805B0 		ldrb	fp, [r4, #5]	@ zero_extendqisi2
6067:src/xeq.c     **** 	if (XromFlags.complex) {
 27580              		.loc 1 6067 22 view .LVU7247
 27581 00a6 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
6068:src/xeq.c     **** 		set_was_complex();
 27582              		.loc 1 6068 5 view .LVU7248
 27583 00a8 D206     		lsls	r2, r2, #27
6067:src/xeq.c     **** 	if (XromFlags.complex) {
 27584              		.loc 1 6067 4 view .LVU7249
 27585 00aa ABEB030B 		sub	fp, fp, r3
 27586              	.LVL2131:
6068:src/xeq.c     **** 		set_was_complex();
 27587              		.loc 1 6068 2 is_stmt 1 view .LVU7250
6068:src/xeq.c     **** 		set_was_complex();
 27588              		.loc 1 6068 5 is_stmt 0 view .LVU7251
 27589 00ae 2BD5     		bpl	.L2005
6069:src/xeq.c     **** 		while (i < 0) {
 27590              		.loc 1 6069 3 is_stmt 1 view .LVU7252
 27591              	.LBB3609:
 27592              	.LBI3609:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 27593              		.loc 1 530 13 view .LVU7253
 27594              	.LBB3610:
 531:src/xeq.c     **** }
 27595              		.loc 1 531 2 view .LVU7254
 531:src/xeq.c     **** }
 27596              		.loc 1 531 20 is_stmt 0 view .LVU7255
 27597 00b0 524E     		ldr	r6, .L2008+24
 27598 00b2 327D     		ldrb	r2, [r6, #20]	@ zero_extendqisi2
 27599 00b4 0121     		movs	r1, #1
 27600 00b6 61F38712 		bfi	r2, r1, #6, #2
 27601              	.LBE3610:
 27602              	.LBE3609:
6070:src/xeq.c     **** 			// different stack handling in complex mode
 27603              		.loc 1 6070 9 view .LVU7256
 27604 00ba BBF1000F 		cmp	fp, #0
 27605              	.LBB3612:
 27606              	.LBB3611:
 531:src/xeq.c     **** }
 27607              		.loc 1 531 20 view .LVU7257
 27608 00be 3275     		strb	r2, [r6, #20]
 531:src/xeq.c     **** }
 27609              		.loc 1 531 20 view .LVU7258
 27610              	.LBE3611:
 27611              	.LBE3612:
6070:src/xeq.c     **** 			// different stack handling in complex mode
 27612              		.loc 1 6070 9 is_stmt 1 view .LVU7259
 27613 00c0 13DA     		bge	.L1970
ARM GAS  /tmp/ccQlyisH.s 			page 709


 27614 00c2 6FEA0B03 		mvn	r3, fp
 27615 00c6 23F00105 		bic	r5, r3, #1
 27616              	.LVL2132:
6070:src/xeq.c     **** 			// different stack handling in complex mode
 27617              		.loc 1 6070 9 is_stmt 0 view .LVU7260
 27618 00ca 0093     		str	r3, [sp]
 27619 00cc 0BF10203 		add	r3, fp, #2
 27620 00d0 0193     		str	r3, [sp, #4]
 27621 00d2 1D44     		add	r5, r5, r3
 27622              	.L1971:
6073:src/xeq.c     **** 			i += 2;
 27623              		.loc 1 6073 4 is_stmt 1 view .LVU7261
6074:src/xeq.c     **** 		}
 27624              		.loc 1 6074 6 is_stmt 0 view .LVU7262
 27625 00d4 0BF1020B 		add	fp, fp, #2
 27626              	.LVL2133:
6073:src/xeq.c     **** 			i += 2;
 27627              		.loc 1 6073 4 view .LVU7263
 27628 00d8 FFF7FEFF 		bl	lower2
 27629              	.LVL2134:
6074:src/xeq.c     **** 		}
 27630              		.loc 1 6074 4 is_stmt 1 view .LVU7264
6070:src/xeq.c     **** 			// different stack handling in complex mode
 27631              		.loc 1 6070 9 view .LVU7265
 27632 00dc AB45     		cmp	fp, r5
 27633 00de F9D1     		bne	.L1971
 27634 00e0 009B     		ldr	r3, [sp]
 27635 00e2 23F0010B 		bic	fp, r3, #1
 27636              	.LVL2135:
6070:src/xeq.c     **** 			// different stack handling in complex mode
 27637              		.loc 1 6070 9 is_stmt 0 view .LVU7266
 27638 00e6 019B     		ldr	r3, [sp, #4]
 27639 00e8 9B44     		add	fp, fp, r3
 27640              	.L1970:
 27641              	.LVL2136:
6084:src/xeq.c     **** 		// more to push back then to consume
 27642              		.loc 1 6084 2 is_stmt 1 view .LVU7267
6084:src/xeq.c     **** 		// more to push back then to consume
 27643              		.loc 1 6084 5 is_stmt 0 view .LVU7268
 27644 00ea BBF1000F 		cmp	fp, #0
 27645 00ee 14D0     		beq	.L1972
6086:src/xeq.c     **** 			--i;
 27646              		.loc 1 6086 3 is_stmt 1 view .LVU7269
6086:src/xeq.c     **** 			--i;
 27647              		.loc 1 6086 7 is_stmt 0 view .LVU7270
 27648 00f0 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6086:src/xeq.c     **** 			--i;
 27649              		.loc 1 6086 6 view .LVU7271
 27650 00f2 9307     		lsls	r3, r2, #30
 27651 00f4 02D4     		bmi	.L1977
6087:src/xeq.c     **** 		while (i > 0) {
 27652              		.loc 1 6087 4 is_stmt 1 view .LVU7272
 27653              	.LVL2137:
6088:src/xeq.c     **** 			lift();
 27654              		.loc 1 6088 9 view .LVU7273
 27655 00f6 BBF1010B 		subs	fp, fp, #1
 27656              	.LVL2138:
ARM GAS  /tmp/ccQlyisH.s 			page 710


6088:src/xeq.c     **** 			lift();
 27657              		.loc 1 6088 9 is_stmt 0 view .LVU7274
 27658 00fa 0ED0     		beq	.L1972
 27659              	.L1977:
6089:src/xeq.c     **** 			--i;
 27660              		.loc 1 6089 4 is_stmt 1 view .LVU7275
 27661 00fc FFF7FEFF 		bl	lift
 27662              	.LVL2139:
6090:src/xeq.c     **** 		}
 27663              		.loc 1 6090 4 view .LVU7276
6088:src/xeq.c     **** 			lift();
 27664              		.loc 1 6088 9 view .LVU7277
 27665 0100 BBF1010B 		subs	fp, fp, #1
 27666              	.LVL2140:
6088:src/xeq.c     **** 			lift();
 27667              		.loc 1 6088 9 is_stmt 0 view .LVU7278
 27668 0104 FAD1     		bne	.L1977
 27669 0106 08E0     		b	.L1972
 27670              	.LVL2141:
 27671              	.L2005:
6078:src/xeq.c     **** 			// more to consume then to push back
 27672              		.loc 1 6078 9 is_stmt 1 view .LVU7279
 27673 0108 BBF1000F 		cmp	fp, #0
 27674 010c 67DA     		bge	.L2006
 27675              	.L1969:
6080:src/xeq.c     **** 			++i;
 27676              		.loc 1 6080 4 view .LVU7280
 27677 010e FFF7FEFF 		bl	lower
 27678              	.LVL2142:
6081:src/xeq.c     **** 		}
 27679              		.loc 1 6081 4 view .LVU7281
6078:src/xeq.c     **** 			// more to consume then to push back
 27680              		.loc 1 6078 9 view .LVU7282
 27681 0112 1BF1010B 		adds	fp, fp, #1
 27682              	.LVL2143:
6078:src/xeq.c     **** 			// more to consume then to push back
 27683              		.loc 1 6078 9 is_stmt 0 view .LVU7283
 27684 0116 FAD1     		bne	.L1969
 27685 0118 384E     		ldr	r6, .L2008+24
 27686              	.LVL2144:
 27687              	.L1972:
6093:src/xeq.c     **** 
 27688              		.loc 1 6093 2 is_stmt 1 view .LVU7284
6093:src/xeq.c     **** 
 27689              		.loc 1 6093 31 is_stmt 0 view .LVU7285
 27690 011a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6093:src/xeq.c     **** 
 27691              		.loc 1 6093 20 view .LVU7286
 27692 011c F27D     		ldrb	r2, [r6, #23]	@ zero_extendqisi2
6096:src/xeq.c     **** 	if (intm) {
 27693              		.loc 1 6096 4 view .LVU7287
 27694 011e 6479     		ldrb	r4, [r4, #5]	@ zero_extendqisi2
6093:src/xeq.c     **** 
 27695              		.loc 1 6093 31 view .LVU7288
 27696 0120 C3F38013 		ubfx	r3, r3, #6, #1
6093:src/xeq.c     **** 
 27697              		.loc 1 6093 20 view .LVU7289
ARM GAS  /tmp/ccQlyisH.s 			page 711


 27698 0124 63F38612 		bfi	r2, r3, #6, #1
 27699 0128 F275     		strb	r2, [r6, #23]
6096:src/xeq.c     **** 	if (intm) {
 27700              		.loc 1 6096 2 is_stmt 1 view .LVU7290
 27701              	.LVL2145:
6097:src/xeq.c     **** 		while (i--) {
 27702              		.loc 1 6097 2 view .LVU7291
6097:src/xeq.c     **** 		while (i--) {
 27703              		.loc 1 6097 5 is_stmt 0 view .LVU7292
 27704 012a B8F1000F 		cmp	r8, #0
 27705 012e 23D0     		beq	.L2007
6098:src/xeq.c     **** 			decNumber r;
 27706              		.loc 1 6098 9 is_stmt 1 view .LVU7293
6098:src/xeq.c     **** 			decNumber r;
 27707              		.loc 1 6098 11 is_stmt 0 view .LVU7294
 27708 0130 631E     		subs	r3, r4, #1
 27709              	.LVL2146:
6098:src/xeq.c     **** 			decNumber r;
 27710              		.loc 1 6098 9 view .LVU7295
 27711 0132 002C     		cmp	r4, #0
 27712 0134 3FF471AF 		beq	.L1962
 27713 0138 314D     		ldr	r5, .L2008+28
 27714 013a 6334     		adds	r4, r4, #99
 27715 013c 05EB0315 		add	r5, r5, r3, lsl #4
 27716 0140 05AE     		add	r6, sp, #20
 27717              	.LVL2147:
 27718              	.L1979:
 27719              	.LBB3613:
6099:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
 27720              		.loc 1 6099 4 is_stmt 1 view .LVU7296
6100:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
 27721              		.loc 1 6100 4 view .LVU7297
 27722 0142 3146     		mov	r1, r6
 27723 0144 2846     		mov	r0, r5
 27724 0146 FFF7FEFF 		bl	decimal128ToNumber
 27725              	.LVL2148:
6101:src/xeq.c     **** 		}
 27726              		.loc 1 6101 4 view .LVU7298
 27727 014a 3046     		mov	r0, r6
 27728 014c FFF7FEFF 		bl	intResult
 27729              	.LVL2149:
6101:src/xeq.c     **** 		}
 27730              		.loc 1 6101 4 is_stmt 0 view .LVU7299
 27731 0150 0246     		mov	r2, r0
 27732 0152 0B46     		mov	r3, r1
 27733              	.LBB3614:
 27734              	.LBB3615:
1392:src/xeq.c     **** }
 27735              		.loc 1 1392 8 view .LVU7300
 27736 0154 2046     		mov	r0, r4
 27737 0156 CDE90223 		strd	r2, [sp, #8]
 27738              	.LVL2150:
1392:src/xeq.c     **** }
 27739              		.loc 1 1392 8 view .LVU7301
 27740              	.LBE3615:
 27741              	.LBI3614:
1391:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
ARM GAS  /tmp/ccQlyisH.s 			page 712


 27742              		.loc 1 1391 6 is_stmt 1 view .LVU7302
 27743              	.LBB3616:
1392:src/xeq.c     **** }
 27744              		.loc 1 1392 2 view .LVU7303
1392:src/xeq.c     **** }
 27745              		.loc 1 1392 8 is_stmt 0 view .LVU7304
 27746 015a FFF7FEFF 		bl	get_reg_n
 27747              	.LVL2151:
1392:src/xeq.c     **** }
 27748              		.loc 1 1392 2 view .LVU7305
 27749 015e 0822     		movs	r2, #8
 27750 0160 013C     		subs	r4, r4, #1
 27751              	.LVL2152:
1392:src/xeq.c     **** }
 27752              		.loc 1 1392 2 view .LVU7306
 27753 0162 0DEB0201 		add	r1, sp, r2
 27754 0166 FFF7FEFF 		bl	xcopy
 27755              	.LVL2153:
1392:src/xeq.c     **** }
 27756              		.loc 1 1392 2 view .LVU7307
 27757              	.LBE3616:
 27758              	.LBE3614:
 27759              	.LBE3613:
6098:src/xeq.c     **** 			decNumber r;
 27760              		.loc 1 6098 9 is_stmt 1 view .LVU7308
 27761 016a 632C     		cmp	r4, #99
 27762 016c A5F11005 		sub	r5, r5, #16
 27763 0170 E7D1     		bne	.L1979
 27764              	.LBE3635:
 27765              	.LBE3605:
 27766              		.loc 1 6132 1 is_stmt 0 view .LVU7309
 27767 0172 0FB0     		add	sp, sp, #60
 27768              		.cfi_remember_state
 27769              		.cfi_def_cfa_offset 36
 27770              		@ sp needed
 27771 0174 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27772              	.LVL2154:
 27773              	.L2007:
 27774              		.cfi_restore_state
 27775              	.LBB3637:
 27776              	.LBB3636:
6104:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 27777              		.loc 1 6104 7 is_stmt 1 view .LVU7310
6104:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 27778              		.loc 1 6104 10 is_stmt 0 view .LVU7311
 27779 0178 B9F1000F 		cmp	r9, #0
 27780 017c 1AD1     		bne	.L1980
6108:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27781              		.loc 1 6108 9 is_stmt 1 view .LVU7312
6108:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27782              		.loc 1 6108 11 is_stmt 0 view .LVU7313
 27783 017e 631E     		subs	r3, r4, #1
 27784              	.LVL2155:
6108:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27785              		.loc 1 6108 9 view .LVU7314
 27786 0180 002C     		cmp	r4, #0
 27787 0182 3FF44AAF 		beq	.L1962
ARM GAS  /tmp/ccQlyisH.s 			page 713


 27788 0186 1E4F     		ldr	r7, .L2008+28
 27789 0188 6334     		adds	r4, r4, #99
 27790 018a 07EB0317 		add	r7, r7, r3, lsl #4
 27791 018e 05AE     		add	r6, sp, #20
 27792              	.LVL2156:
 27793              	.L1983:
6109:src/xeq.c     **** 	}
 27794              		.loc 1 6109 4 is_stmt 1 view .LVU7315
 27795              	.LBB3617:
 27796              	.LBI3617:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27797              		.loc 1 709 11 view .LVU7316
 27798              	.LBB3618:
 710:src/xeq.c     **** }
 27799              		.loc 1 710 2 view .LVU7317
 710:src/xeq.c     **** }
 27800              		.loc 1 710 9 is_stmt 0 view .LVU7318
 27801 0190 2046     		mov	r0, r4
 27802 0192 FFF7FEFF 		bl	get_reg_n
 27803              	.LVL2157:
 27804              	.LBE3618:
 27805              	.LBE3617:
 27806              	.LBB3620:
 27807              	.LBB3621:
 641:src/xeq.c     **** }
 27808              		.loc 1 641 24 view .LVU7319
 27809 0196 3146     		mov	r1, r6
 27810              	.LBE3621:
 27811              	.LBE3620:
 27812              	.LBB3623:
 27813              	.LBB3619:
 710:src/xeq.c     **** }
 27814              		.loc 1 710 9 view .LVU7320
 27815 0198 0546     		mov	r5, r0
 27816              	.LVL2158:
 710:src/xeq.c     **** }
 27817              		.loc 1 710 9 view .LVU7321
 27818              	.LBE3619:
 27819              	.LBE3623:
 27820              	.LBB3624:
 27821              	.LBI3620:
 639:src/xeq.c     **** 	decNumber temp;
 27822              		.loc 1 639 6 is_stmt 1 view .LVU7322
 27823              	.LBB3622:
 640:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 27824              		.loc 1 640 2 view .LVU7323
 641:src/xeq.c     **** }
 27825              		.loc 1 641 2 view .LVU7324
 641:src/xeq.c     **** }
 27826              		.loc 1 641 24 is_stmt 0 view .LVU7325
 27827 019a 3846     		mov	r0, r7
 27828              	.LVL2159:
 641:src/xeq.c     **** }
 27829              		.loc 1 641 24 view .LVU7326
 27830 019c FFF7FEFF 		bl	decimal128ToNumber
 27831              	.LVL2160:
 27832 01a0 013C     		subs	r4, r4, #1
ARM GAS  /tmp/ccQlyisH.s 			page 714


 27833              	.LVL2161:
 641:src/xeq.c     **** }
 27834              		.loc 1 641 24 view .LVU7327
 27835 01a2 0146     		mov	r1, r0
 641:src/xeq.c     **** }
 27836              		.loc 1 641 2 view .LVU7328
 27837 01a4 2846     		mov	r0, r5
 27838 01a6 FFF7FEFF 		bl	packed_from_number
 27839              	.LVL2162:
 641:src/xeq.c     **** }
 27840              		.loc 1 641 2 view .LVU7329
 27841              	.LBE3622:
 27842              	.LBE3624:
6108:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27843              		.loc 1 6108 9 is_stmt 1 view .LVU7330
6108:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27844              		.loc 1 6108 9 is_stmt 0 view .LVU7331
 27845 01aa 632C     		cmp	r4, #99
 27846 01ac A7F11007 		sub	r7, r7, #16
 27847 01b0 EED1     		bne	.L1983
 27848 01b2 32E7     		b	.L1962
 27849              	.LVL2163:
 27850              	.L1980:
6105:src/xeq.c     **** 	}
 27851              		.loc 1 6105 3 is_stmt 1 view .LVU7332
 27852              	.LBB3625:
 27853              	.LBB3626:
 27854              	.LBB3627:
 27855              	.LBB3628:
1088:src/xeq.c     **** }
 27856              		.loc 1 1088 24 is_stmt 0 view .LVU7333
 27857 01b4 3B68     		ldr	r3, [r7]
 27858              	.LBE3628:
 27859              	.LBE3627:
 27860              	.LBE3626:
 27861              	.LBE3625:
6105:src/xeq.c     **** 	}
 27862              		.loc 1 6105 3 view .LVU7334
 27863 01b6 DAF80000 		ldr	r0, [r10]
 27864              	.LVL2164:
 27865              	.LBB3634:
 27866              	.LBI3625:
1506:src/xeq.c     **** 	if (is_dblmode())
 27867              		.loc 1 1506 6 is_stmt 1 view .LVU7335
 27868              	.LBB3633:
1507:src/xeq.c     **** 		n <<= 1;
 27869              		.loc 1 1507 2 view .LVU7336
 27870              	.LBB3631:
 27871              	.LBI3627:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27872              		.loc 1 1087 5 view .LVU7337
 27873              	.LBB3629:
1088:src/xeq.c     **** }
 27874              		.loc 1 1088 2 view .LVU7338
1088:src/xeq.c     **** }
 27875              		.loc 1 1088 24 is_stmt 0 view .LVU7339
 27876 01ba B3F8E827 		ldrh	r2, [r3, #2024]
ARM GAS  /tmp/ccQlyisH.s 			page 715


 27877              	.LBE3629:
 27878              	.LBE3631:
1509:src/xeq.c     **** }
 27879              		.loc 1 1509 2 view .LVU7340
 27880 01be 1049     		ldr	r1, .L2008+28
 27881              	.LBB3632:
 27882              	.LBB3630:
1088:src/xeq.c     **** }
 27883              		.loc 1 1088 24 view .LVU7341
 27884 01c0 44F20103 		movw	r3, #16385
 27885              	.LBE3630:
 27886              	.LBE3632:
1507:src/xeq.c     **** 		n <<= 1;
 27887              		.loc 1 1507 5 view .LVU7342
 27888 01c4 1340     		ands	r3, r3, r2
 27889 01c6 B3F5804F 		cmp	r3, #16384
1508:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 27890              		.loc 1 1508 3 is_stmt 1 view .LVU7343
1508:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 27891              		.loc 1 1508 5 is_stmt 0 view .LVU7344
 27892 01ca 08BF     		it	eq
 27893 01cc 6400     		lsleq	r4, r4, #1
 27894              	.LVL2165:
1509:src/xeq.c     **** }
 27895              		.loc 1 1509 2 is_stmt 1 view .LVU7345
 27896 01ce E200     		lsls	r2, r4, #3
 27897 01d0 FFF7FEFF 		bl	xcopy
 27898              	.LVL2166:
1510:src/xeq.c     **** 
 27899              		.loc 1 1510 1 is_stmt 0 view .LVU7346
 27900 01d4 21E7     		b	.L1962
 27901              	.LVL2167:
 27902              	.L2004:
1510:src/xeq.c     **** 
 27903              		.loc 1 1510 1 view .LVU7347
 27904              	.LBE3633:
 27905              	.LBE3634:
6061:src/xeq.c     **** 		else
 27906              		.loc 1 6061 4 is_stmt 1 view .LVU7348
 27907 01d6 FFF7FEFF 		bl	setlastXY
 27908              	.LVL2168:
 27909 01da 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 27910 01dc 61E7     		b	.L1966
 27911              	.LVL2169:
 27912              	.L2006:
6061:src/xeq.c     **** 		else
 27913              		.loc 1 6061 4 is_stmt 0 view .LVU7349
 27914 01de 074E     		ldr	r6, .L2008+24
 27915 01e0 83E7     		b	.L1970
 27916              	.L2009:
 27917 01e2 00BF     		.align	2
 27918              	.L2008:
 27919 01e4 00000000 		.word	XromParams
 27920 01e8 00000000 		.word	Error
 27921 01ec 00000000 		.word	main_ram
 27922 01f0 00000000 		.word	UserLocalRegs
 27923 01f4 00000000 		.word	RetStk
ARM GAS  /tmp/ccQlyisH.s 			page 716


 27924 01f8 FEBFF78F 		.word	-1879588866
 27925 01fc 00000000 		.word	StateWhileOn
 27926 0200 00000000 		.word	XromLocal
 27927 0204 00000000 		.word	StackBase
 27928              	.LBE3636:
 27929              	.LBE3637:
 27930              		.cfi_endproc
 27931              	.LFE265:
 27933              		.section	.text.cmdconverged,"ax",%progbits
 27934              		.align	1
 27935              		.p2align 2,,3
 27936              		.global	cmdconverged
 27937              		.syntax unified
 27938              		.thumb
 27939              		.thumb_func
 27940              		.fpu fpv4-sp-d16
 27942              	cmdconverged:
 27943              	.LVL2170:
 27944              	.LFB266:
6133:src/xeq.c     **** 
6134:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
6135:src/xeq.c     **** /*
6136:src/xeq.c     ****  *  Allow access to command argument from XROM
6137:src/xeq.c     ****  */
6138:src/xeq.c     **** void cmdxarg(unsigned int arg, enum rarg op) {
6139:src/xeq.c     **** 	set_reg_n_int_sgn(arg, XromArg, 0);
6140:src/xeq.c     **** }
6141:src/xeq.c     **** #endif
6142:src/xeq.c     **** 
6143:src/xeq.c     **** 
6144:src/xeq.c     **** /* A slightly obtuse command to check for convergence.
6145:src/xeq.c     ****  * Arguments are organised bitwise in this form:
6146:src/xeq.c     ****  *
6147:src/xeq.c     ****  *	SMMTT
6148:src/xeq.c     ****  *
6149:src/xeq.c     ****  * where:
6150:src/xeq.c     ****  *	TT is the tolerance parameter:
6151:src/xeq.c     ****  *
6152:src/xeq.c     ****  *	  	0	1e-14 tolerance
6153:src/xeq.c     ****  *	  	1	1e-24 tolerance
6154:src/xeq.c     ****  *	  	2	1e-32 tolerance
6155:src/xeq.c     ****  *	  	3	choose the best tolerance for the current modes
6156:src/xeq.c     ****  *			for user mode this means 0 for single precision and 2 for double precision
6157:src/xeq.c     ****  *
6158:src/xeq.c     ****  *	MM is the mode parameter:
6159:src/xeq.c     ****  *	  	0	compare real X & Y relatively
6160:src/xeq.c     ****  *	  	1	compare real X & Y absolutely
6161:src/xeq.c     ****  *	  	2	compare complex X/Y & Z/T for absolute difference
6162:src/xeq.c     ****  *	  	3	compare real X & Y relatively
6163:src/xeq.c     ****  *
6164:src/xeq.c     ****  *	S is the special number validation:
6165:src/xeq.c     ****  *		0	Nan & infinities are considered converged
6166:src/xeq.c     ****  *		1	NaN & infinities are not considered converged
6167:src/xeq.c     ****  *
6168:src/xeq.c     ****  * In integer mode, the arguemnt is completely ignored and an equality
6169:src/xeq.c     ****  * comparision is undertaken instead.
6170:src/xeq.c     ****  */
ARM GAS  /tmp/ccQlyisH.s 			page 717


6171:src/xeq.c     **** static const decNumber * const convergence_tolerances[3] = {
6172:src/xeq.c     **** 	&const_1e_14, &const_1e_24, &const_1e_32
6173:src/xeq.c     **** };
6174:src/xeq.c     **** 
6175:src/xeq.c     **** void cmdconverged(unsigned int arg, enum rarg cmd) {
 27945              		.loc 1 6175 52 is_stmt 1 view -0
 27946              		.cfi_startproc
 27947              		@ args = 0, pretend = 0, frame = 216
 27948              		@ frame_needed = 0, uses_anonymous_args = 0
6176:src/xeq.c     **** 	const decNumber *tolerance;
 27949              		.loc 1 6176 2 view .LVU7351
6177:src/xeq.c     **** 	unsigned int tol = arg & 3;
 27950              		.loc 1 6177 2 view .LVU7352
6178:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
6179:src/xeq.c     **** 	const int specials = arg & 0x10;
6180:src/xeq.c     **** 	const int complex = mode == 2;
6181:src/xeq.c     **** 	const int absolute = mode == 1;
6182:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
6183:src/xeq.c     **** 	int res;
6184:src/xeq.c     **** 
6185:src/xeq.c     **** 	if (is_intmode()) {
 27951              		.loc 1 6185 6 is_stmt 0 view .LVU7353
 27952 0000 374B     		ldr	r3, .L2025
6175:src/xeq.c     **** 	const decNumber *tolerance;
 27953              		.loc 1 6175 52 view .LVU7354
 27954 0002 70B5     		push	{r4, r5, r6, lr}
 27955              		.cfi_def_cfa_offset 16
 27956              		.cfi_offset 4, -16
 27957              		.cfi_offset 5, -12
 27958              		.cfi_offset 6, -8
 27959              		.cfi_offset 14, -4
 27960              		.loc 1 6185 6 view .LVU7355
 27961 0004 1A68     		ldr	r2, [r3]
 27962 0006 92F8E817 		ldrb	r1, [r2, #2024]	@ zero_extendqisi2
 27963              	.LVL2171:
6178:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
 27964              		.loc 1 6178 2 is_stmt 1 view .LVU7356
6179:src/xeq.c     **** 	const int complex = mode == 2;
 27965              		.loc 1 6179 2 view .LVU7357
6180:src/xeq.c     **** 	const int absolute = mode == 1;
 27966              		.loc 1 6180 2 view .LVU7358
6181:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
 27967              		.loc 1 6181 2 view .LVU7359
6182:src/xeq.c     **** 	int res;
 27968              		.loc 1 6182 2 view .LVU7360
6183:src/xeq.c     **** 
 27969              		.loc 1 6183 2 view .LVU7361
 27970              		.loc 1 6185 2 view .LVU7362
 27971              		.loc 1 6185 5 is_stmt 0 view .LVU7363
 27972 000a CB07     		lsls	r3, r1, #31
6175:src/xeq.c     **** 	const decNumber *tolerance;
 27973              		.loc 1 6175 52 view .LVU7364
 27974 000c B8B0     		sub	sp, sp, #224
 27975              		.cfi_def_cfa_offset 240
 27976              		.loc 1 6185 5 view .LVU7365
 27977 000e 35D4     		bmi	.L2021
 27978 0010 00F00303 		and	r3, r0, #3
ARM GAS  /tmp/ccQlyisH.s 			page 718


 27979              	.LVL2172:
6186:src/xeq.c     **** 		do_tst(regY_idx, TST_EQ);
6187:src/xeq.c     **** 		return;
6188:src/xeq.c     **** 	}
6189:src/xeq.c     **** 
6190:src/xeq.c     **** 	if (tol == 3) {
 27980              		.loc 1 6190 5 view .LVU7366
 27981 0014 032B     		cmp	r3, #3
 27982 0016 0446     		mov	r4, r0
 27983 0018 00F01005 		and	r5, r0, #16
 27984              	.LVL2173:
 27985              		.loc 1 6190 2 is_stmt 1 view .LVU7367
 27986              		.loc 1 6190 5 is_stmt 0 view .LVU7368
 27987 001c 24D0     		beq	.L2013
 27988 001e 314A     		ldr	r2, .L2025+4
 27989 0020 52F82360 		ldr	r6, [r2, r3, lsl #2]
 27990              	.LVL2174:
 27991              	.L2014:
6191:src/xeq.c     **** 		if (is_dblmode())
6192:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
6193:src/xeq.c     **** 		else
6194:src/xeq.c     **** 			tol = 0;
6195:src/xeq.c     **** 	}
6196:src/xeq.c     **** 	tolerance = convergence_tolerances[tol];
 27992              		.loc 1 6196 2 is_stmt 1 view .LVU7369
6197:src/xeq.c     **** 
6198:src/xeq.c     **** 	getXYZT(&x, &y, &z, &t);
 27993              		.loc 1 6198 2 view .LVU7370
 27994              	.LBB3638:
 27995              	.LBI3638:
 870:src/xeq.c     **** 	getXYZ(x, y, z);
 27996              		.loc 1 870 6 view .LVU7371
 27997              	.LBB3639:
 871:src/xeq.c     **** 	getT(t);
 27998              		.loc 1 871 2 view .LVU7372
 27999 0024 1DAA     		add	r2, sp, #116
 28000              	.LVL2175:
 871:src/xeq.c     **** 	getT(t);
 28001              		.loc 1 871 2 is_stmt 0 view .LVU7373
 28002 0026 14A9     		add	r1, sp, #80
 28003              	.LVL2176:
 871:src/xeq.c     **** 	getT(t);
 28004              		.loc 1 871 2 view .LVU7374
 28005 0028 0BA8     		add	r0, sp, #44
 28006              	.LVL2177:
 871:src/xeq.c     **** 	getT(t);
 28007              		.loc 1 871 2 view .LVU7375
 28008 002a FFF7FEFF 		bl	getXYZ
 28009              	.LVL2178:
 872:src/xeq.c     **** }
 28010              		.loc 1 872 2 is_stmt 1 view .LVU7376
 28011              	.LBB3640:
 28012              	.LBI3640:
 841:src/xeq.c     **** 	getRegister(t, regT_idx);
 28013              		.loc 1 841 13 view .LVU7377
 28014              	.LBB3641:
 842:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 719


 28015              		.loc 1 842 2 view .LVU7378
 28016 002e 02A8     		add	r0, sp, #8
 28017              	.LVL2179:
 842:src/xeq.c     **** }
 28018              		.loc 1 842 2 is_stmt 0 view .LVU7379
 28019 0030 6721     		movs	r1, #103
 28020 0032 FFF7FEFF 		bl	getRegister
 28021              	.LVL2180:
 842:src/xeq.c     **** }
 28022              		.loc 1 842 2 view .LVU7380
 28023              	.LBE3641:
 28024              	.LBE3640:
 28025              	.LBE3639:
 28026              	.LBE3638:
6199:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || decNumberIsSpecial(&y))
 28027              		.loc 1 6199 2 is_stmt 1 view .LVU7381
 28028              		.loc 1 6199 29 is_stmt 0 view .LVU7382
 28029 0036 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 28030 003a 9DF85820 		ldrb	r2, [sp, #88]	@ zero_extendqisi2
 28031 003e 1343     		orrs	r3, r3, r2
 28032 0040 13F0700F 		tst	r3, #112
 28033 0044 0BD1     		bne	.L2015
6178:src/xeq.c     **** 	const int specials = arg & 0x10;
 28034              		.loc 1 6178 21 view .LVU7383
 28035 0046 C4F38104 		ubfx	r4, r4, #2, #2
 28036              	.LVL2181:
6200:src/xeq.c     **** 		res = specials;
6201:src/xeq.c     **** 	else if (complex) {
 28037              		.loc 1 6201 7 is_stmt 1 view .LVU7384
 28038              		.loc 1 6201 10 is_stmt 0 view .LVU7385
 28039 004a 022C     		cmp	r4, #2
 28040 004c 26D0     		beq	.L2022
6202:src/xeq.c     **** 		if (decNumberIsSpecial(&z) || decNumberIsSpecial(&t))
6203:src/xeq.c     **** 			res = specials;
6204:src/xeq.c     **** 		else {
6205:src/xeq.c     **** 			cmplxSubtract(&a, &b, &x, &y, &z, &t);
6206:src/xeq.c     **** 			cmplxR(&x, &a, &b);
6207:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
6208:src/xeq.c     **** 		}
6209:src/xeq.c     **** 	} else {
6210:src/xeq.c     **** 		if (absolute)
 28041              		.loc 1 6210 3 is_stmt 1 view .LVU7386
 28042              		.loc 1 6210 6 is_stmt 0 view .LVU7387
 28043 004e 012C     		cmp	r4, #1
6211:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 28044              		.loc 1 6211 10 view .LVU7388
 28045 0050 3246     		mov	r2, r6
 28046 0052 14A9     		add	r1, sp, #80
 28047 0054 0BA8     		add	r0, sp, #44
6210:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 28048              		.loc 1 6210 6 view .LVU7389
 28049 0056 3ED0     		beq	.L2023
6212:src/xeq.c     **** 		else
6213:src/xeq.c     **** 			res = relative_error(&x, &y, tolerance);
 28050              		.loc 1 6213 4 is_stmt 1 view .LVU7390
 28051              		.loc 1 6213 10 is_stmt 0 view .LVU7391
 28052 0058 FFF7FEFF 		bl	relative_error
ARM GAS  /tmp/ccQlyisH.s 			page 720


 28053              	.LVL2182:
 28054 005c 0546     		mov	r5, r0
 28055              	.LVL2183:
 28056              	.L2015:
6214:src/xeq.c     **** 	}
6215:src/xeq.c     **** 	fin_tst(res);
 28057              		.loc 1 6215 2 is_stmt 1 discriminator 1 view .LVU7392
 28058 005e 2846     		mov	r0, r5
 28059 0060 FFF7FEFF 		bl	fin_tst
 28060              	.LVL2184:
6216:src/xeq.c     **** }
 28061              		.loc 1 6216 1 is_stmt 0 discriminator 1 view .LVU7393
 28062 0064 38B0     		add	sp, sp, #224
 28063              		.cfi_remember_state
 28064              		.cfi_def_cfa_offset 16
 28065              		@ sp needed
 28066 0066 70BD     		pop	{r4, r5, r6, pc}
 28067              	.LVL2185:
 28068              	.L2013:
 28069              		.cfi_restore_state
6191:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 28070              		.loc 1 6191 3 is_stmt 1 view .LVU7394
 28071              	.LBB3642:
 28072              	.LBI3642:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28073              		.loc 1 1087 5 view .LVU7395
 28074              	.LBB3643:
1088:src/xeq.c     **** }
 28075              		.loc 1 1088 2 view .LVU7396
1088:src/xeq.c     **** }
 28076              		.loc 1 1088 24 is_stmt 0 view .LVU7397
 28077 0068 B2F8E827 		ldrh	r2, [r2, #2024]
 28078 006c 44F20103 		movw	r3, #16385
 28079              	.LVL2186:
1088:src/xeq.c     **** }
 28080              		.loc 1 1088 24 view .LVU7398
 28081              	.LBE3643:
 28082              	.LBE3642:
6191:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 28083              		.loc 1 6191 6 view .LVU7399
 28084 0070 1340     		ands	r3, r3, r2
 28085 0072 B3F5804F 		cmp	r3, #16384
 28086 0076 07D0     		beq	.L2024
 28087 0078 1B4E     		ldr	r6, .L2025+8
 28088 007a D3E7     		b	.L2014
 28089              	.LVL2187:
 28090              	.L2021:
6186:src/xeq.c     **** 		return;
 28091              		.loc 1 6186 3 is_stmt 1 view .LVU7400
 28092 007c 0021     		movs	r1, #0
 28093 007e 6520     		movs	r0, #101
 28094              	.LVL2188:
6186:src/xeq.c     **** 		return;
 28095              		.loc 1 6186 3 is_stmt 0 view .LVU7401
 28096 0080 FFF7FEFF 		bl	do_tst
 28097              	.LVL2189:
6187:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQlyisH.s 			page 721


 28098              		.loc 1 6187 3 is_stmt 1 view .LVU7402
 28099              		.loc 1 6216 1 is_stmt 0 view .LVU7403
 28100 0084 38B0     		add	sp, sp, #224
 28101              		.cfi_remember_state
 28102              		.cfi_def_cfa_offset 16
 28103              		@ sp needed
 28104 0086 70BD     		pop	{r4, r5, r6, pc}
 28105              	.LVL2190:
 28106              	.L2024:
 28107              		.cfi_restore_state
6192:src/xeq.c     **** 		else
 28108              		.loc 1 6192 4 is_stmt 1 view .LVU7404
6192:src/xeq.c     **** 		else
 28109              		.loc 1 6192 27 is_stmt 0 view .LVU7405
 28110 0088 184B     		ldr	r3, .L2025+12
6192:src/xeq.c     **** 		else
 28111              		.loc 1 6192 57 view .LVU7406
 28112 008a 194E     		ldr	r6, .L2025+16
6192:src/xeq.c     **** 		else
 28113              		.loc 1 6192 27 view .LVU7407
 28114 008c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
6192:src/xeq.c     **** 		else
 28115              		.loc 1 6192 57 view .LVU7408
 28116 008e 194A     		ldr	r2, .L2025+20
 28117 0090 03F08803 		and	r3, r3, #136
 28118 0094 802B     		cmp	r3, #128
 28119 0096 08BF     		it	eq
 28120 0098 1646     		moveq	r6, r2
 28121 009a C3E7     		b	.L2014
 28122              	.LVL2191:
 28123              	.L2022:
6202:src/xeq.c     **** 			res = specials;
 28124              		.loc 1 6202 3 is_stmt 1 view .LVU7409
6202:src/xeq.c     **** 			res = specials;
 28125              		.loc 1 6202 30 is_stmt 0 view .LVU7410
 28126 009c 9DF87C30 		ldrb	r3, [sp, #124]	@ zero_extendqisi2
 28127 00a0 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 28128 00a4 1343     		orrs	r3, r3, r2
 28129 00a6 13F0700F 		tst	r3, #112
 28130 00aa D8D1     		bne	.L2015
6205:src/xeq.c     **** 			cmplxR(&x, &a, &b);
 28131              		.loc 1 6205 4 is_stmt 1 view .LVU7411
 28132 00ac 02AB     		add	r3, sp, #8
 28133 00ae 0193     		str	r3, [sp, #4]
 28134 00b0 1DAB     		add	r3, sp, #116
 28135 00b2 0093     		str	r3, [sp]
 28136 00b4 2FA9     		add	r1, sp, #188
 28137 00b6 14AB     		add	r3, sp, #80
 28138 00b8 26A8     		add	r0, sp, #152
 28139 00ba 0BAA     		add	r2, sp, #44
 28140 00bc FFF7FEFF 		bl	cmplxSubtract
 28141              	.LVL2192:
6206:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
 28142              		.loc 1 6206 4 view .LVU7412
 28143 00c0 2FAA     		add	r2, sp, #188
 28144 00c2 26A9     		add	r1, sp, #152
 28145 00c4 0BA8     		add	r0, sp, #44
ARM GAS  /tmp/ccQlyisH.s 			page 722


 28146 00c6 FFF7FEFF 		bl	cmplxR
 28147              	.LVL2193:
6207:src/xeq.c     **** 		}
 28148              		.loc 1 6207 4 view .LVU7413
6207:src/xeq.c     **** 		}
 28149              		.loc 1 6207 10 is_stmt 0 view .LVU7414
 28150 00ca 3146     		mov	r1, r6
 28151 00cc 0BA8     		add	r0, sp, #44
 28152 00ce FFF7FEFF 		bl	dn_lt
 28153              	.LVL2194:
 28154 00d2 0546     		mov	r5, r0
 28155              	.LVL2195:
6207:src/xeq.c     **** 		}
 28156              		.loc 1 6207 10 view .LVU7415
 28157 00d4 C3E7     		b	.L2015
 28158              	.LVL2196:
 28159              	.L2023:
6211:src/xeq.c     **** 		else
 28160              		.loc 1 6211 4 is_stmt 1 view .LVU7416
6211:src/xeq.c     **** 		else
 28161              		.loc 1 6211 10 is_stmt 0 view .LVU7417
 28162 00d6 FFF7FEFF 		bl	absolute_error
 28163              	.LVL2197:
 28164 00da 0546     		mov	r5, r0
 28165              	.LVL2198:
6211:src/xeq.c     **** 		else
 28166              		.loc 1 6211 10 view .LVU7418
 28167 00dc BFE7     		b	.L2015
 28168              	.L2026:
 28169 00de 00BF     		.align	2
 28170              	.L2025:
 28171 00e0 00000000 		.word	main_ram
 28172 00e4 00000000 		.word	.LANCHOR7
 28173 00e8 00000000 		.word	const_1e_14
 28174 00ec 00000000 		.word	XromParams
 28175 00f0 00000000 		.word	const_1e_32
 28176 00f4 00000000 		.word	const_1e_24
 28177              		.cfi_endproc
 28178              	.LFE266:
 28180              		.section	.text.cmdshuffle,"ax",%progbits
 28181              		.align	1
 28182              		.p2align 2,,3
 28183              		.global	cmdshuffle
 28184              		.syntax unified
 28185              		.thumb
 28186              		.thumb_func
 28187              		.fpu fpv4-sp-d16
 28189              	cmdshuffle:
 28190              	.LVL2199:
 28191              	.LFB267:
6217:src/xeq.c     **** 
6218:src/xeq.c     **** void cmdshuffle(unsigned int arg, enum rarg cmd) {
 28192              		.loc 1 6218 50 is_stmt 1 view -0
 28193              		.cfi_startproc
 28194              		@ args = 0, pretend = 0, frame = 64
 28195              		@ frame_needed = 0, uses_anonymous_args = 0
6219:src/xeq.c     **** 	REGISTER xyzt[4];
ARM GAS  /tmp/ccQlyisH.s 			page 723


 28196              		.loc 1 6219 2 view .LVU7420
6220:src/xeq.c     **** 	int i;
 28197              		.loc 1 6220 2 view .LVU7421
6221:src/xeq.c     **** 
6222:src/xeq.c     **** 	set_lift();
 28198              		.loc 1 6222 2 view .LVU7422
 28199              	.LBB3644:
 28200              	.LBI3644:
 758:src/xeq.c     ****     State2.state_lift = 1;
 28201              		.loc 1 758 6 view .LVU7423
 28202              	.LBB3645:
 759:src/xeq.c     **** }
 28203              		.loc 1 759 5 view .LVU7424
 28204              	.LBE3645:
 28205              	.LBE3644:
6218:src/xeq.c     **** 	REGISTER xyzt[4];
 28206              		.loc 1 6218 50 is_stmt 0 view .LVU7425
 28207 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28208              		.cfi_def_cfa_offset 24
 28209              		.cfi_offset 4, -24
 28210              		.cfi_offset 5, -20
 28211              		.cfi_offset 6, -16
 28212              		.cfi_offset 7, -12
 28213              		.cfi_offset 8, -8
 28214              		.cfi_offset 14, -4
 28215              	.LBB3650:
 28216              	.LBB3646:
 759:src/xeq.c     **** }
 28217              		.loc 1 759 23 view .LVU7426
 28218 0004 1F4A     		ldr	r2, .L2037
 28219 0006 204E     		ldr	r6, .L2037+4
 28220 0008 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 28221              	.LBE3646:
 28222              	.LBE3650:
6218:src/xeq.c     **** 	REGISTER xyzt[4];
 28223              		.loc 1 6218 50 view .LVU7427
 28224 000a 90B0     		sub	sp, sp, #64
 28225              		.cfi_def_cfa_offset 88
 28226              	.LBB3651:
 28227              	.LBB3647:
 759:src/xeq.c     **** }
 28228              		.loc 1 759 23 view .LVU7428
 28229 000c 43F04003 		orr	r3, r3, #64
 28230              	.LBE3647:
 28231              	.LBE3651:
6218:src/xeq.c     **** 	REGISTER xyzt[4];
 28232              		.loc 1 6218 50 view .LVU7429
 28233 0010 0546     		mov	r5, r0
 28234              	.LBB3652:
 28235              	.LBB3648:
 759:src/xeq.c     **** }
 28236              		.loc 1 759 23 view .LVU7430
 28237 0012 D375     		strb	r3, [r2, #23]
 28238              	.LBE3648:
 28239              	.LBE3652:
6223:src/xeq.c     **** 	for (i=0; i<4; i++)
 28240              		.loc 1 6223 2 is_stmt 1 view .LVU7431
ARM GAS  /tmp/ccQlyisH.s 			page 724


 28241              	.LVL2200:
 28242              		.loc 1 6223 12 view .LVU7432
 28243 0014 6F46     		mov	r7, sp
 28244              	.LBB3653:
 28245              	.LBB3649:
 759:src/xeq.c     **** }
 28246              		.loc 1 759 23 is_stmt 0 view .LVU7433
 28247 0016 6424     		movs	r4, #100
 28248              	.LBE3649:
 28249              	.LBE3653:
 28250              	.LBB3654:
 28251              	.LBB3655:
 28252              	.LBB3656:
 28253              	.LBB3657:
1088:src/xeq.c     **** }
 28254              		.loc 1 1088 24 view .LVU7434
 28255 0018 44F20108 		movw	r8, #16385
 28256              	.LVL2201:
 28257              	.L2029:
1088:src/xeq.c     **** }
 28258              		.loc 1 1088 24 view .LVU7435
 28259              	.LBE3657:
 28260              	.LBE3656:
 28261              	.LBE3655:
 28262              	.LBE3654:
6224:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28263              		.loc 1 6224 3 is_stmt 1 discriminator 3 view .LVU7436
 28264              	.LBB3664:
 28265              	.LBI3664:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28266              		.loc 1 709 11 discriminator 3 view .LVU7437
 28267              	.LBB3665:
 710:src/xeq.c     **** }
 28268              		.loc 1 710 2 discriminator 3 view .LVU7438
 710:src/xeq.c     **** }
 28269              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU7439
 28270 001c 2046     		mov	r0, r4
 28271 001e FFF7FEFF 		bl	get_reg_n
 28272              	.LVL2202:
 710:src/xeq.c     **** }
 28273              		.loc 1 710 9 discriminator 3 view .LVU7440
 28274              	.LBE3665:
 28275              	.LBE3664:
 28276              	.LBB3667:
 28277              	.LBB3662:
 28278              	.LBB3660:
 28279              	.LBB3658:
1088:src/xeq.c     **** }
 28280              		.loc 1 1088 24 discriminator 3 view .LVU7441
 28281 0022 3368     		ldr	r3, [r6]
 28282 0024 B3F8E837 		ldrh	r3, [r3, #2024]
 28283              	.LBE3658:
 28284              	.LBE3660:
 718:src/xeq.c     **** }
 28285              		.loc 1 718 2 discriminator 3 view .LVU7442
 28286 0028 08EA0303 		and	r3, r8, r3
 28287 002c B3F5804F 		cmp	r3, #16384
ARM GAS  /tmp/ccQlyisH.s 			page 725


 28288              	.LBE3662:
 28289              	.LBE3667:
 28290              	.LBB3668:
 28291              	.LBB3666:
 710:src/xeq.c     **** }
 28292              		.loc 1 710 9 discriminator 3 view .LVU7443
 28293 0030 0146     		mov	r1, r0
 28294              	.LVL2203:
 710:src/xeq.c     **** }
 28295              		.loc 1 710 9 discriminator 3 view .LVU7444
 28296              	.LBE3666:
 28297              	.LBE3668:
 28298              	.LBB3669:
 28299              	.LBI3654:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 28300              		.loc 1 717 6 is_stmt 1 discriminator 3 view .LVU7445
 28301              	.LBB3663:
 718:src/xeq.c     **** }
 28302              		.loc 1 718 2 discriminator 3 view .LVU7446
 28303              	.LBB3661:
 28304              	.LBI3656:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28305              		.loc 1 1087 5 discriminator 3 view .LVU7447
 28306              	.LBB3659:
1088:src/xeq.c     **** }
 28307              		.loc 1 1088 2 discriminator 3 view .LVU7448
 28308              	.LBE3659:
 28309              	.LBE3661:
 718:src/xeq.c     **** }
 28310              		.loc 1 718 2 is_stmt 0 discriminator 3 view .LVU7449
 28311 0032 0CBF     		ite	eq
 28312 0034 1022     		moveq	r2, #16
 28313 0036 0822     		movne	r2, #8
 28314 0038 3846     		mov	r0, r7
 28315              	.LVL2204:
 718:src/xeq.c     **** }
 28316              		.loc 1 718 2 discriminator 3 view .LVU7450
 28317 003a 0134     		adds	r4, r4, #1
 28318              	.LVL2205:
 718:src/xeq.c     **** }
 28319              		.loc 1 718 2 discriminator 3 view .LVU7451
 28320 003c FFF7FEFF 		bl	xcopy
 28321              	.LVL2206:
 718:src/xeq.c     **** }
 28322              		.loc 1 718 2 discriminator 3 view .LVU7452
 28323              	.LBE3663:
 28324              	.LBE3669:
6223:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28325              		.loc 1 6223 17 is_stmt 1 discriminator 3 view .LVU7453
6223:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28326              		.loc 1 6223 12 discriminator 3 view .LVU7454
6223:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28327              		.loc 1 6223 2 is_stmt 0 discriminator 3 view .LVU7455
 28328 0040 682C     		cmp	r4, #104
 28329 0042 07F11007 		add	r7, r7, #16
 28330 0046 E9D1     		bne	.L2029
 28331 0048 6424     		movs	r4, #100
ARM GAS  /tmp/ccQlyisH.s 			page 726


 28332              	.LBB3670:
 28333              	.LBB3671:
 28334              	.LBB3672:
 28335              	.LBB3673:
1088:src/xeq.c     **** }
 28336              		.loc 1 1088 24 view .LVU7456
 28337 004a 44F20107 		movw	r7, #16385
 28338              	.L2031:
 28339              	.LVL2207:
1088:src/xeq.c     **** }
 28340              		.loc 1 1088 24 view .LVU7457
 28341              	.LBE3673:
 28342              	.LBE3672:
 28343              	.LBE3671:
 28344              	.LBE3670:
6225:src/xeq.c     **** 
6226:src/xeq.c     **** 	for (i=0; i<4; i++) {
6227:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28345              		.loc 1 6227 3 is_stmt 1 view .LVU7458
 28346              	.LBB3680:
 28347              	.LBI3680:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28348              		.loc 1 709 11 view .LVU7459
 28349              	.LBB3681:
 710:src/xeq.c     **** }
 28350              		.loc 1 710 2 view .LVU7460
 710:src/xeq.c     **** }
 28351              		.loc 1 710 9 is_stmt 0 view .LVU7461
 28352 004e 2046     		mov	r0, r4
 28353 0050 FFF7FEFF 		bl	get_reg_n
 28354              	.LVL2208:
 710:src/xeq.c     **** }
 28355              		.loc 1 710 9 view .LVU7462
 28356              	.LBE3681:
 28357              	.LBE3680:
 28358              	.LBB3682:
 28359              	.LBB3678:
 28360              	.LBB3676:
 28361              	.LBB3674:
1088:src/xeq.c     **** }
 28362              		.loc 1 1088 24 view .LVU7463
 28363 0054 3368     		ldr	r3, [r6]
 28364 0056 B3F8E837 		ldrh	r3, [r3, #2024]
 28365              	.LBE3674:
 28366              	.LBE3676:
 718:src/xeq.c     **** }
 28367              		.loc 1 718 2 view .LVU7464
 28368 005a 3B40     		ands	r3, r3, r7
 28369 005c B3F5804F 		cmp	r3, #16384
 28370              	.LBE3678:
 28371              	.LBE3682:
 28372              		.loc 1 6227 36 view .LVU7465
 28373 0060 05F00301 		and	r1, r5, #3
 28374              	.LVL2209:
 28375              	.LBB3683:
 28376              	.LBI3670:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
ARM GAS  /tmp/ccQlyisH.s 			page 727


 28377              		.loc 1 717 6 is_stmt 1 view .LVU7466
 28378              	.LBB3679:
 718:src/xeq.c     **** }
 28379              		.loc 1 718 2 view .LVU7467
 28380              	.LBB3677:
 28381              	.LBI3672:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28382              		.loc 1 1087 5 view .LVU7468
 28383              	.LBB3675:
1088:src/xeq.c     **** }
 28384              		.loc 1 1088 2 view .LVU7469
 28385              	.LBE3675:
 28386              	.LBE3677:
 718:src/xeq.c     **** }
 28387              		.loc 1 718 2 is_stmt 0 view .LVU7470
 28388 0064 0CBF     		ite	eq
 28389 0066 1022     		moveq	r2, #16
 28390 0068 0822     		movne	r2, #8
 28391 006a 0134     		adds	r4, r4, #1
 28392              	.LVL2210:
 718:src/xeq.c     **** }
 28393              		.loc 1 718 2 view .LVU7471
 28394 006c 0DEB0111 		add	r1, sp, r1, lsl #4
 28395              	.LVL2211:
 718:src/xeq.c     **** }
 28396              		.loc 1 718 2 view .LVU7472
 28397 0070 FFF7FEFF 		bl	xcopy
 28398              	.LVL2212:
 718:src/xeq.c     **** }
 28399              		.loc 1 718 2 view .LVU7473
 28400              	.LBE3679:
 28401              	.LBE3683:
6228:src/xeq.c     **** 		arg >>= 2;
 28402              		.loc 1 6228 3 is_stmt 1 view .LVU7474
6226:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28403              		.loc 1 6226 2 is_stmt 0 view .LVU7475
 28404 0074 682C     		cmp	r4, #104
 28405              		.loc 1 6228 7 view .LVU7476
 28406 0076 4FEA9505 		lsr	r5, r5, #2
 28407              	.LVL2213:
6226:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28408              		.loc 1 6226 17 is_stmt 1 view .LVU7477
6226:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28409              		.loc 1 6226 12 view .LVU7478
6226:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28410              		.loc 1 6226 2 is_stmt 0 view .LVU7479
 28411 007a E8D1     		bne	.L2031
6229:src/xeq.c     **** 	}
6230:src/xeq.c     **** }
 28412              		.loc 1 6230 1 view .LVU7480
 28413 007c 10B0     		add	sp, sp, #64
 28414              		.cfi_def_cfa_offset 24
 28415              		@ sp needed
 28416 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28417              	.LVL2214:
 28418              	.L2038:
 28419              		.loc 1 6230 1 view .LVU7481
ARM GAS  /tmp/ccQlyisH.s 			page 728


 28420 0082 00BF     		.align	2
 28421              	.L2037:
 28422 0084 00000000 		.word	StateWhileOn
 28423 0088 00000000 		.word	main_ram
 28424              		.cfi_endproc
 28425              	.LFE267:
 28427              		.section	.text.cmdmode,"ax",%progbits
 28428              		.align	1
 28429              		.p2align 2,,3
 28430              		.global	cmdmode
 28431              		.syntax unified
 28432              		.thumb
 28433              		.thumb_func
 28434              		.fpu fpv4-sp-d16
 28436              	cmdmode:
 28437              	.LVL2215:
 28438              	.LFB268:
6231:src/xeq.c     **** 
6232:src/xeq.c     **** /*
6233:src/xeq.c     ****  *  Toggle UState mode bits from XROM
6234:src/xeq.c     ****  */
6235:src/xeq.c     **** void cmdmode(unsigned int arg, enum rarg cmd) {
 28439              		.loc 1 6235 47 is_stmt 1 view -0
 28440              		.cfi_startproc
 28441              		@ args = 0, pretend = 0, frame = 0
 28442              		@ frame_needed = 0, uses_anonymous_args = 0
 28443              		@ link register save eliminated.
6236:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28444              		.loc 1 6236 2 view .LVU7483
6235:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28445              		.loc 1 6235 47 is_stmt 0 view .LVU7484
 28446 0000 30B4     		push	{r4, r5}
 28447              		.cfi_def_cfa_offset 8
 28448              		.cfi_offset 4, -8
 28449              		.cfi_offset 5, -4
6237:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 28450              		.loc 1 6237 62 view .LVU7485
 28451 0002 134D     		ldr	r5, .L2044
6236:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28452              		.loc 1 6236 35 view .LVU7486
 28453 0004 0122     		movs	r2, #1
 28454 0006 A0F12003 		sub	r3, r0, #32
 28455 000a C0F12004 		rsb	r4, r0, #32
 28456 000e 02FA03F3 		lsl	r3, r2, r3
 28457 0012 22FA04F4 		lsr	r4, r2, r4
 28458 0016 8240     		lsls	r2, r2, r0
 28459              		.loc 1 6237 62 view .LVU7487
 28460 0018 2868     		ldr	r0, [r5]
 28461              	.LVL2216:
6238:src/xeq.c     **** 
6239:src/xeq.c     **** 	if (cmd == RARG_MODE_SET)
 28462              		.loc 1 6239 5 view .LVU7488
 28463 001a 8129     		cmp	r1, #129
6240:src/xeq.c     **** 		*mode |= bit;
 28464              		.loc 1 6240 9 view .LVU7489
 28465 001c D0F8E457 		ldr	r5, [r0, #2020]
6236:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
ARM GAS  /tmp/ccQlyisH.s 			page 729


 28466              		.loc 1 6236 35 view .LVU7490
 28467 0020 43EA0403 		orr	r3, r3, r4
 28468              	.LVL2217:
6237:src/xeq.c     **** 
 28469              		.loc 1 6237 2 is_stmt 1 view .LVU7491
6239:src/xeq.c     **** 		*mode |= bit;
 28470              		.loc 1 6239 2 view .LVU7492
 28471              		.loc 1 6240 9 is_stmt 0 view .LVU7493
 28472 0024 00F2E471 		addw	r1, r0, #2020
 28473              	.LVL2218:
6239:src/xeq.c     **** 		*mode |= bit;
 28474              		.loc 1 6239 5 view .LVU7494
 28475 0028 0AD0     		beq	.L2043
6241:src/xeq.c     **** 	else
6242:src/xeq.c     **** 		*mode &= ~bit;
 28476              		.loc 1 6242 3 is_stmt 1 view .LVU7495
 28477              		.loc 1 6242 9 is_stmt 0 view .LVU7496
 28478 002a D0F8E847 		ldr	r4, [r0, #2024]
 28479 002e 25EA0202 		bic	r2, r5, r2
 28480              	.LVL2219:
 28481              		.loc 1 6242 9 view .LVU7497
 28482 0032 24EA0303 		bic	r3, r4, r3
 28483              	.LVL2220:
 28484              		.loc 1 6242 9 view .LVU7498
 28485 0036 C0F8E427 		str	r2, [r0, #2020]
6243:src/xeq.c     **** }
 28486              		.loc 1 6243 1 view .LVU7499
 28487 003a 30BC     		pop	{r4, r5}
 28488              		.cfi_remember_state
 28489              		.cfi_restore 5
 28490              		.cfi_restore 4
 28491              		.cfi_def_cfa_offset 0
 28492 003c 4B60     		str	r3, [r1, #4]
 28493 003e 7047     		bx	lr
 28494              	.LVL2221:
 28495              	.L2043:
 28496              		.cfi_restore_state
6240:src/xeq.c     **** 	else
 28497              		.loc 1 6240 3 is_stmt 1 view .LVU7500
6240:src/xeq.c     **** 	else
 28498              		.loc 1 6240 9 is_stmt 0 view .LVU7501
 28499 0040 4C68     		ldr	r4, [r1, #4]
 28500 0042 2A43     		orrs	r2, r2, r5
 28501              	.LVL2222:
6240:src/xeq.c     **** 	else
 28502              		.loc 1 6240 9 view .LVU7502
 28503 0044 2343     		orrs	r3, r3, r4
 28504              	.LVL2223:
6240:src/xeq.c     **** 	else
 28505              		.loc 1 6240 9 view .LVU7503
 28506 0046 C0F8E427 		str	r2, [r0, #2020]
 28507              		.loc 1 6243 1 view .LVU7504
 28508 004a 30BC     		pop	{r4, r5}
 28509              		.cfi_restore 5
 28510              		.cfi_restore 4
 28511              		.cfi_def_cfa_offset 0
 28512 004c 4B60     		str	r3, [r1, #4]
ARM GAS  /tmp/ccQlyisH.s 			page 730


 28513 004e 7047     		bx	lr
 28514              	.L2045:
 28515              		.align	2
 28516              	.L2044:
 28517 0050 00000000 		.word	main_ram
 28518              		.cfi_endproc
 28519              	.LFE268:
 28521              		.section	.text.cmdlpop,"ax",%progbits
 28522              		.align	1
 28523              		.p2align 2,,3
 28524              		.global	cmdlpop
 28525              		.syntax unified
 28526              		.thumb
 28527              		.thumb_func
 28528              		.fpu fpv4-sp-d16
 28530              	cmdlpop:
 28531              	.LVL2224:
 28532              	.LFB269:
6244:src/xeq.c     **** 
6245:src/xeq.c     **** /*
6246:src/xeq.c     ****  *  Undo the effect of LOCL by popping the current local frame.
6247:src/xeq.c     ****  *  Needs to be executed from the same level that has established the frame.
6248:src/xeq.c     ****  */
6249:src/xeq.c     **** void cmdlpop(enum nilop op) {
 28533              		.loc 1 6249 29 is_stmt 1 view -0
 28534              		.cfi_startproc
 28535              		@ args = 0, pretend = 0, frame = 0
 28536              		@ frame_needed = 0, uses_anonymous_args = 0
6250:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 28537              		.loc 1 6250 2 view .LVU7506
6249:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 28538              		.loc 1 6249 29 is_stmt 0 view .LVU7507
 28539 0000 10B5     		push	{r4, lr}
 28540              		.cfi_def_cfa_offset 8
 28541              		.cfi_offset 4, -8
 28542              		.cfi_offset 14, -4
 28543              		.loc 1 6250 6 view .LVU7508
 28544 0002 0C4C     		ldr	r4, .L2050
 28545 0004 2368     		ldr	r3, [r4]
 28546 0006 B3F9DE17 		ldrsh	r1, [r3, #2014]
 28547              		.loc 1 6250 5 view .LVU7509
 28548 000a B3F9E227 		ldrsh	r2, [r3, #2018]
 28549 000e 8A42     		cmp	r2, r1
 28550 0010 05D0     		beq	.L2047
6251:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28551              		.loc 1 6251 3 is_stmt 1 view .LVU7510
 28552              	.LVL2225:
 28553              	.LBB3688:
 28554              	.LBI3688:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28555              		.loc 1 537 5 view .LVU7511
 28556              	.LBB3689:
 538:src/xeq.c     **** 		Error = e;
 28557              		.loc 1 538 2 view .LVU7512
 538:src/xeq.c     **** 		Error = e;
 28558              		.loc 1 538 12 is_stmt 0 view .LVU7513
 28559 0012 094B     		ldr	r3, .L2050+4
ARM GAS  /tmp/ccQlyisH.s 			page 731


 538:src/xeq.c     **** 		Error = e;
 28560              		.loc 1 538 5 view .LVU7514
 28561 0014 1A68     		ldr	r2, [r3]
 28562 0016 0AB9     		cbnz	r2, .L2046
 28563              	.LVL2226:
 28564              	.LBB3690:
 28565              	.LBI3690:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28566              		.loc 1 537 5 is_stmt 1 view .LVU7515
 28567              	.LBB3691:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 28568              		.loc 1 539 3 view .LVU7516
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 28569              		.loc 1 539 9 is_stmt 0 view .LVU7517
 28570 0018 0722     		movs	r2, #7
 28571 001a 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 28572              		.loc 1 540 3 is_stmt 1 view .LVU7518
 28573              	.LVL2227:
 28574              	.L2046:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 28575              		.loc 1 540 3 is_stmt 0 view .LVU7519
 28576              	.LBE3691:
 28577              	.LBE3690:
 28578              	.LBE3689:
 28579              	.LBE3688:
6252:src/xeq.c     **** 		return;
6253:src/xeq.c     **** 	}
6254:src/xeq.c     **** 	RetStkPtr = LocalRegs;
6255:src/xeq.c     **** 	retstk_up();
6256:src/xeq.c     **** 	--RetStkPtr;
6257:src/xeq.c     **** }
 28580              		.loc 1 6257 1 view .LVU7520
 28581 001c 10BD     		pop	{r4, pc}
 28582              	.LVL2228:
 28583              	.L2047:
6254:src/xeq.c     **** 	retstk_up();
 28584              		.loc 1 6254 2 is_stmt 1 view .LVU7521
6254:src/xeq.c     **** 	retstk_up();
 28585              		.loc 1 6254 12 is_stmt 0 view .LVU7522
 28586 001e A3F8E227 		strh	r2, [r3, #2018]	@ movhi
6255:src/xeq.c     **** 	--RetStkPtr;
 28587              		.loc 1 6255 2 is_stmt 1 view .LVU7523
 28588 0022 FFF7FEFF 		bl	retstk_up
 28589              	.LVL2229:
6256:src/xeq.c     **** }
 28590              		.loc 1 6256 2 view .LVU7524
6256:src/xeq.c     **** }
 28591              		.loc 1 6256 4 is_stmt 0 view .LVU7525
 28592 0026 2268     		ldr	r2, [r4]
6256:src/xeq.c     **** }
 28593              		.loc 1 6256 2 view .LVU7526
 28594 0028 B2F8E237 		ldrh	r3, [r2, #2018]
 28595 002c 013B     		subs	r3, r3, #1
 28596 002e A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 28597              		.loc 1 6257 1 view .LVU7527
 28598 0032 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccQlyisH.s 			page 732


 28599              	.L2051:
 28600              		.align	2
 28601              	.L2050:
 28602 0034 00000000 		.word	main_ram
 28603 0038 00000000 		.word	Error
 28604              		.cfi_endproc
 28605              	.LFE269:
 28607              		.section	.text.cmdregs,"ax",%progbits
 28608              		.align	1
 28609              		.p2align 2,,3
 28610              		.global	cmdregs
 28611              		.syntax unified
 28612              		.thumb
 28613              		.thumb_func
 28614              		.fpu fpv4-sp-d16
 28616              	cmdregs:
 28617              	.LVL2230:
 28618              	.LFB270:
6258:src/xeq.c     **** 
6259:src/xeq.c     **** /*
6260:src/xeq.c     ****  *  Reduce the number of global registers in favour of local data on the return stack
6261:src/xeq.c     ****  */
6262:src/xeq.c     **** void cmdregs(unsigned int arg, enum rarg op) {
 28619              		.loc 1 6262 46 is_stmt 1 view -0
 28620              		.cfi_startproc
 28621              		@ args = 0, pretend = 0, frame = 0
 28622              		@ frame_needed = 0, uses_anonymous_args = 0
6263:src/xeq.c     **** 	int distance;
 28623              		.loc 1 6263 2 view .LVU7529
6264:src/xeq.c     **** 	int length;
 28624              		.loc 1 6264 2 view .LVU7530
6265:src/xeq.c     **** 
6266:src/xeq.c     **** 	if (is_dblmode()) {
 28625              		.loc 1 6266 2 view .LVU7531
 28626              	.LBB3698:
 28627              	.LBI3698:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28628              		.loc 1 1087 5 view .LVU7532
 28629              	.LBB3699:
1088:src/xeq.c     **** }
 28630              		.loc 1 1088 2 view .LVU7533
 28631              	.LBE3699:
 28632              	.LBE3698:
6262:src/xeq.c     **** 	int distance;
 28633              		.loc 1 6262 46 is_stmt 0 view .LVU7534
 28634 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28635              		.cfi_def_cfa_offset 24
 28636              		.cfi_offset 4, -24
 28637              		.cfi_offset 5, -20
 28638              		.cfi_offset 6, -16
 28639              		.cfi_offset 7, -12
 28640              		.cfi_offset 8, -8
 28641              		.cfi_offset 14, -4
 28642              	.LBB3701:
 28643              	.LBB3700:
1088:src/xeq.c     **** }
 28644              		.loc 1 1088 12 view .LVU7535
ARM GAS  /tmp/ccQlyisH.s 			page 733


 28645 0004 294F     		ldr	r7, .L2068
 28646 0006 3A68     		ldr	r2, [r7]
1088:src/xeq.c     **** }
 28647              		.loc 1 1088 24 view .LVU7536
 28648 0008 B2F8E817 		ldrh	r1, [r2, #2024]
 28649              	.LVL2231:
1088:src/xeq.c     **** }
 28650              		.loc 1 1088 24 view .LVU7537
 28651 000c 44F20103 		movw	r3, #16385
 28652              	.LBE3700:
 28653              	.LBE3701:
 28654              		.loc 1 6266 5 view .LVU7538
 28655 0010 0B40     		ands	r3, r3, r1
 28656 0012 B3F5804F 		cmp	r3, #16384
6262:src/xeq.c     **** 	int distance;
 28657              		.loc 1 6262 46 view .LVU7539
 28658 0016 0446     		mov	r4, r0
 28659              		.loc 1 6266 5 view .LVU7540
 28660 0018 36D0     		beq	.L2064
6267:src/xeq.c     **** 		// DP register length 16 bytes
6268:src/xeq.c     **** 		length = (arg << 4); 
6269:src/xeq.c     **** 		// We need additional room for lettered registers
6270:src/xeq.c     **** 		arg = (arg << 1) + STACK_SIZE + EXTRA_REG;
6271:src/xeq.c     **** 	}
6272:src/xeq.c     **** 	else {
6273:src/xeq.c     **** 		if (UState.mode_double && arg < STACK_SIZE + EXTRA_REG) {
 28661              		.loc 1 6273 3 is_stmt 1 view .LVU7541
 28662              		.loc 1 6273 7 is_stmt 0 view .LVU7542
 28663 001a 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 28664              		.loc 1 6273 6 view .LVU7543
 28665 001e 5B06     		lsls	r3, r3, #25
 28666 0020 29D4     		bmi	.L2065
 28667              	.L2055:
6274:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
6275:src/xeq.c     **** 			// We must not release the space needed for the DP lettered registers
6276:src/xeq.c     **** 			report_err(ERR_RANGE);
6277:src/xeq.c     **** 			return;
6278:src/xeq.c     **** 		}
6279:src/xeq.c     **** 		// register length 8 bytes
6280:src/xeq.c     **** 		length = (arg << 3);
 28668              		.loc 1 6280 3 is_stmt 1 view .LVU7544
 28669              		.loc 1 6280 17 is_stmt 0 view .LVU7545
 28670 0022 4FEAC408 		lsl	r8, r4, #3
 28671              	.LVL2232:
 28672              	.L2054:
6281:src/xeq.c     **** 	}
6282:src/xeq.c     **** 	distance = NumRegs - arg;
 28673              		.loc 1 6282 2 is_stmt 1 view .LVU7546
 28674              		.loc 1 6282 13 is_stmt 0 view .LVU7547
 28675 0026 92F8CF57 		ldrb	r5, [r2, #1999]	@ zero_extendqisi2
 28676              		.loc 1 6282 21 view .LVU7548
 28677 002a 2D1B     		subs	r5, r5, r4
 28678              	.LVL2233:
6283:src/xeq.c     **** 	
6284:src/xeq.c     **** 	// Move return stack, check for room
6285:src/xeq.c     **** 	if (move_retstk(distance << 2))
 28679              		.loc 1 6285 2 is_stmt 1 view .LVU7549
ARM GAS  /tmp/ccQlyisH.s 			page 734


 28680              		.loc 1 6285 6 is_stmt 0 view .LVU7550
 28681 002c A800     		lsls	r0, r5, #2
 28682 002e FFF7FEFF 		bl	move_retstk
 28683              	.LVL2234:
 28684              		.loc 1 6285 5 view .LVU7551
 28685 0032 0646     		mov	r6, r0
 28686 0034 08B1     		cbz	r0, .L2066
 28687              	.LVL2235:
 28688              	.L2052:
6286:src/xeq.c     **** 		return;
6287:src/xeq.c     **** 	
6288:src/xeq.c     **** 	// Move register contents, including the statistics registers
6289:src/xeq.c     **** 	xcopy((unsigned short *)(Regs + TOPREALREG - arg)     - SizeStatRegs,
6290:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
6291:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
6292:src/xeq.c     **** 
6293:src/xeq.c     **** 	// Clear the left space
6294:src/xeq.c     **** 	if (distance < 0)
6295:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
6296:src/xeq.c     **** 	NumRegs = arg;
6297:src/xeq.c     **** }
 28689              		.loc 1 6297 1 view .LVU7552
 28690 0036 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28691              	.LVL2236:
 28692              	.L2066:
6289:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28693              		.loc 1 6289 2 is_stmt 1 view .LVU7553
6289:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28694              		.loc 1 6289 27 is_stmt 0 view .LVU7554
 28695 003a 3B68     		ldr	r3, [r7]
6289:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28696              		.loc 1 6289 56 view .LVU7555
 28697 003c 1C4A     		ldr	r2, .L2068+4
6290:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28698              		.loc 1 6290 45 view .LVU7556
 28699 003e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
6289:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28700              		.loc 1 6289 56 view .LVU7557
 28701 0042 1268     		ldr	r2, [r2]
6290:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28702              		.loc 1 6290 45 view .LVU7558
 28703 0044 C1F16401 		rsb	r1, r1, #100
6289:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28704              		.loc 1 6289 45 view .LVU7559
 28705 0048 C4F16400 		rsb	r0, r4, #100
6289:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28706              		.loc 1 6289 27 view .LVU7560
 28707 004c 03F22C43 		addw	r3, r3, #1068
6290:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28708              		.loc 1 6290 56 view .LVU7561
 28709 0050 C2EB8101 		rsb	r1, r2, r1, lsl #2
6289:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28710              		.loc 1 6289 56 view .LVU7562
 28711 0054 C2EB8000 		rsb	r0, r2, r0, lsl #2
6289:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28712              		.loc 1 6289 2 view .LVU7563
 28713 0058 03EB4101 		add	r1, r3, r1, lsl #1
ARM GAS  /tmp/ccQlyisH.s 			page 735


 28714 005c 08EB4202 		add	r2, r8, r2, lsl #1
 28715 0060 03EB4000 		add	r0, r3, r0, lsl #1
 28716 0064 FFF7FEFF 		bl	xcopy
 28717              	.LVL2237:
6294:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 28718              		.loc 1 6294 2 is_stmt 1 view .LVU7564
6294:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 28719              		.loc 1 6294 5 is_stmt 0 view .LVU7565
 28720 0068 002D     		cmp	r5, #0
 28721 006a 13DB     		blt	.L2067
 28722              	.L2059:
6296:src/xeq.c     **** }
 28723              		.loc 1 6296 2 is_stmt 1 view .LVU7566
6296:src/xeq.c     **** }
 28724              		.loc 1 6296 10 is_stmt 0 view .LVU7567
 28725 006c 3B68     		ldr	r3, [r7]
 28726 006e 83F8CF47 		strb	r4, [r3, #1999]
 28727              		.loc 1 6297 1 view .LVU7568
 28728 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28729              	.LVL2238:
 28730              	.L2065:
6273:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
 28731              		.loc 1 6273 26 discriminator 1 view .LVU7569
 28732 0076 0B28     		cmp	r0, #11
 28733 0078 D3D8     		bhi	.L2055
6276:src/xeq.c     **** 			return;
 28734              		.loc 1 6276 4 is_stmt 1 view .LVU7570
 28735              	.LVL2239:
 28736              	.LBB3702:
 28737              	.LBI3702:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28738              		.loc 1 537 5 view .LVU7571
 28739              	.LBB3703:
 538:src/xeq.c     **** 		Error = e;
 28740              		.loc 1 538 2 view .LVU7572
 538:src/xeq.c     **** 		Error = e;
 28741              		.loc 1 538 12 is_stmt 0 view .LVU7573
 28742 007a 0E4B     		ldr	r3, .L2068+8
 538:src/xeq.c     **** 		Error = e;
 28743              		.loc 1 538 5 view .LVU7574
 28744 007c 1A68     		ldr	r2, [r3]
 28745 007e 002A     		cmp	r2, #0
 28746 0080 D9D1     		bne	.L2052
 28747              	.LVL2240:
 28748              	.LBB3704:
 28749              	.LBI3704:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28750              		.loc 1 537 5 is_stmt 1 view .LVU7575
 28751              	.LBB3705:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 28752              		.loc 1 539 3 view .LVU7576
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 28753              		.loc 1 539 9 is_stmt 0 view .LVU7577
 28754 0082 0822     		movs	r2, #8
 28755 0084 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 28756              		.loc 1 540 3 is_stmt 1 view .LVU7578
ARM GAS  /tmp/ccQlyisH.s 			page 736


 28757 0086 D6E7     		b	.L2052
 28758              	.LVL2241:
 28759              	.L2064:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 28760              		.loc 1 540 3 is_stmt 0 view .LVU7579
 28761              	.LBE3705:
 28762              	.LBE3704:
 28763              	.LBE3703:
 28764              	.LBE3702:
6268:src/xeq.c     **** 		// We need additional room for lettered registers
 28765              		.loc 1 6268 3 is_stmt 1 view .LVU7580
6270:src/xeq.c     **** 	}
 28766              		.loc 1 6270 14 is_stmt 0 view .LVU7581
 28767 0088 4300     		lsls	r3, r0, #1
6268:src/xeq.c     **** 		// We need additional room for lettered registers
 28768              		.loc 1 6268 17 view .LVU7582
 28769 008a 4FEA0018 		lsl	r8, r0, #4
 28770              	.LVL2242:
6270:src/xeq.c     **** 	}
 28771              		.loc 1 6270 3 is_stmt 1 view .LVU7583
6270:src/xeq.c     **** 	}
 28772              		.loc 1 6270 7 is_stmt 0 view .LVU7584
 28773 008e 03F10C04 		add	r4, r3, #12
 28774              	.LVL2243:
6270:src/xeq.c     **** 	}
 28775              		.loc 1 6270 7 view .LVU7585
 28776 0092 C8E7     		b	.L2054
 28777              	.LVL2244:
 28778              	.L2067:
6295:src/xeq.c     **** 	NumRegs = arg;
 28779              		.loc 1 6295 3 is_stmt 1 view .LVU7586
6295:src/xeq.c     **** 	NumRegs = arg;
 28780              		.loc 1 6295 8 is_stmt 0 view .LVU7587
 28781 0094 3868     		ldr	r0, [r7]
6295:src/xeq.c     **** 	NumRegs = arg;
 28782              		.loc 1 6295 41 view .LVU7588
 28783 0096 6A42     		rsbs	r2, r5, #0
6295:src/xeq.c     **** 	NumRegs = arg;
 28784              		.loc 1 6295 26 view .LVU7589
 28785 0098 00EBC500 		add	r0, r0, r5, lsl #3
6295:src/xeq.c     **** 	NumRegs = arg;
 28786              		.loc 1 6295 3 view .LVU7590
 28787 009c 3146     		mov	r1, r6
 28788 009e D200     		lsls	r2, r2, #3
 28789 00a0 00F24C70 		addw	r0, r0, #1868
 28790 00a4 FFF7FEFF 		bl	xset
 28791              	.LVL2245:
 28792 00a8 E0E7     		b	.L2059
 28793              	.L2069:
 28794 00aa 00BF     		.align	2
 28795              	.L2068:
 28796 00ac 00000000 		.word	main_ram
 28797 00b0 00000000 		.word	SizeStatRegs
 28798 00b4 00000000 		.word	Error
 28799              		.cfi_endproc
 28800              	.LFE270:
 28802              		.section	.text.op_double,"ax",%progbits
ARM GAS  /tmp/ccQlyisH.s 			page 737


 28803              		.align	1
 28804              		.p2align 2,,3
 28805              		.global	op_double
 28806              		.syntax unified
 28807              		.thumb
 28808              		.thumb_func
 28809              		.fpu fpv4-sp-d16
 28811              	op_double:
 28812              	.LVL2246:
 28813              	.LFB216:
4066:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28814              		.loc 1 4066 31 is_stmt 1 view -0
 28815              		.cfi_startproc
 28816              		@ args = 0, pretend = 0, frame = 40
 28817              		@ frame_needed = 0, uses_anonymous_args = 0
4067:src/xeq.c     **** 	const int intm = is_intmode();
 28818              		.loc 1 4067 2 view .LVU7592
4066:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28819              		.loc 1 4066 31 is_stmt 0 view .LVU7593
 28820 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28821              		.cfi_def_cfa_offset 24
 28822              		.cfi_offset 4, -24
 28823              		.cfi_offset 5, -20
 28824              		.cfi_offset 6, -16
 28825              		.cfi_offset 7, -12
 28826              		.cfi_offset 8, -8
 28827              		.cfi_offset 14, -4
4068:src/xeq.c     **** 	int i;
 28828              		.loc 1 4068 19 view .LVU7594
 28829 0004 454E     		ldr	r6, .L2098
 28830 0006 3368     		ldr	r3, [r6]
4071:src/xeq.c     **** 		// Mode switch
 28831              		.loc 1 4071 5 view .LVU7595
 28832 0008 A0F1B504 		sub	r4, r0, #181
4071:src/xeq.c     **** 		// Mode switch
 28833              		.loc 1 4071 19 view .LVU7596
 28834 000c 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
4068:src/xeq.c     **** 	int i;
 28835              		.loc 1 4068 19 view .LVU7597
 28836 0010 93F8E887 		ldrb	r8, [r3, #2024]	@ zero_extendqisi2
 28837              	.LVL2247:
4068:src/xeq.c     **** 	int i;
 28838              		.loc 1 4068 2 is_stmt 1 view .LVU7598
4071:src/xeq.c     **** 		// Mode switch
 28839              		.loc 1 4071 5 is_stmt 0 view .LVU7599
 28840 0014 B4FA84F4 		clz	r4, r4
 28841 0018 C2F38011 		ubfx	r1, r2, #6, #1
 28842 001c 6409     		lsrs	r4, r4, #5
 28843 001e 8C42     		cmp	r4, r1
4066:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28844              		.loc 1 4066 31 view .LVU7600
 28845 0020 8AB0     		sub	sp, sp, #40
 28846              		.cfi_def_cfa_offset 64
4068:src/xeq.c     **** 	int i;
 28847              		.loc 1 4068 12 view .LVU7601
 28848 0022 08F00108 		and	r8, r8, #1
 28849              	.LVL2248:
ARM GAS  /tmp/ccQlyisH.s 			page 738


4069:src/xeq.c     **** 
 28850              		.loc 1 4069 2 is_stmt 1 view .LVU7602
4071:src/xeq.c     **** 		// Mode switch
 28851              		.loc 1 4071 2 view .LVU7603
4071:src/xeq.c     **** 		// Mode switch
 28852              		.loc 1 4071 5 is_stmt 0 view .LVU7604
 28853 0026 41D0     		beq	.L2071
4073:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 28854              		.loc 1 4073 3 is_stmt 1 view .LVU7605
4073:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 28855              		.loc 1 4073 6 is_stmt 0 view .LVU7606
 28856 0028 B528     		cmp	r0, #181
 28857 002a 4AD0     		beq	.L2096
4091:src/xeq.c     **** 				// Convert X to K to single precision
 28858              		.loc 1 4091 4 is_stmt 1 view .LVU7607
4091:src/xeq.c     **** 				// Convert X to K to single precision
 28859              		.loc 1 4091 7 is_stmt 0 view .LVU7608
 28860 002c B8F1000F 		cmp	r8, #0
 28861 0030 25D1     		bne	.L2079
 28862 0032 6F24     		movs	r4, #111
 28863 0034 01AF     		add	r7, sp, #4
 28864              	.LVL2249:
 28865              	.L2081:
4095:src/xeq.c     **** 			}
 28866              		.loc 1 4095 6 is_stmt 1 discriminator 3 view .LVU7609
4095:src/xeq.c     **** 			}
 28867              		.loc 1 4095 28 is_stmt 0 discriminator 3 view .LVU7610
 28868 0036 03F22C43 		addw	r3, r3, #1068
 28869              	.LBB3706:
 28870              	.LBB3707:
 710:src/xeq.c     **** }
 28871              		.loc 1 710 9 discriminator 3 view .LVU7611
 28872 003a 2046     		mov	r0, r4
 28873              	.LBE3707:
 28874              	.LBE3706:
4095:src/xeq.c     **** 			}
 28875              		.loc 1 4095 6 discriminator 3 view .LVU7612
 28876 003c 03EBC405 		add	r5, r3, r4, lsl #3
 28877              	.LVL2250:
 28878              	.LBB3709:
 28879              	.LBI3706:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28880              		.loc 1 709 11 is_stmt 1 discriminator 3 view .LVU7613
 28881              	.LBB3708:
 710:src/xeq.c     **** }
 28882              		.loc 1 710 2 discriminator 3 view .LVU7614
 710:src/xeq.c     **** }
 28883              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU7615
 28884 0040 FFF7FEFF 		bl	get_reg_n
 28885              	.LVL2251:
 710:src/xeq.c     **** }
 28886              		.loc 1 710 9 discriminator 3 view .LVU7616
 28887              	.LBE3708:
 28888              	.LBE3709:
 28889              	.LBB3710:
 28890              	.LBI3710:
 639:src/xeq.c     **** 	decNumber temp;
ARM GAS  /tmp/ccQlyisH.s 			page 739


 28891              		.loc 1 639 6 is_stmt 1 discriminator 3 view .LVU7617
 28892              	.LBB3711:
 640:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 28893              		.loc 1 640 2 discriminator 3 view .LVU7618
 641:src/xeq.c     **** }
 28894              		.loc 1 641 2 discriminator 3 view .LVU7619
 641:src/xeq.c     **** }
 28895              		.loc 1 641 24 is_stmt 0 discriminator 3 view .LVU7620
 28896 0044 3946     		mov	r1, r7
 28897 0046 FFF7FEFF 		bl	decimal128ToNumber
 28898              	.LVL2252:
 641:src/xeq.c     **** }
 28899              		.loc 1 641 24 discriminator 3 view .LVU7621
 28900 004a 013C     		subs	r4, r4, #1
 28901              	.LVL2253:
 641:src/xeq.c     **** }
 28902              		.loc 1 641 24 discriminator 3 view .LVU7622
 28903 004c 0146     		mov	r1, r0
 641:src/xeq.c     **** }
 28904              		.loc 1 641 2 discriminator 3 view .LVU7623
 28905 004e 2846     		mov	r0, r5
 28906 0050 FFF7FEFF 		bl	packed_from_number
 28907              	.LVL2254:
 641:src/xeq.c     **** }
 28908              		.loc 1 641 2 discriminator 3 view .LVU7624
 28909              	.LBE3711:
 28910              	.LBE3710:
4094:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28911              		.loc 1 4094 50 is_stmt 1 discriminator 3 view .LVU7625
4094:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28912              		.loc 1 4094 42 discriminator 3 view .LVU7626
4094:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28913              		.loc 1 4094 5 is_stmt 0 discriminator 3 view .LVU7627
 28914 0054 632C     		cmp	r4, #99
 28915 0056 3368     		ldr	r3, [r6]
 28916 0058 EDD1     		bne	.L2081
4097:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28917              		.loc 1 4097 4 is_stmt 1 view .LVU7628
4097:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28918              		.loc 1 4097 23 is_stmt 0 view .LVU7629
 28919 005a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
4098:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28920              		.loc 1 4098 7 view .LVU7630
 28921 005e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
4097:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28922              		.loc 1 4097 23 view .LVU7631
 28923 0062 6FF38612 		bfc	r2, #6, #1
4098:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28924              		.loc 1 4098 7 view .LVU7632
 28925 0066 6429     		cmp	r1, #100
4097:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28926              		.loc 1 4097 23 view .LVU7633
 28927 0068 83F8E927 		strb	r2, [r3, #2025]
4098:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28928              		.loc 1 4098 4 is_stmt 1 view .LVU7634
4098:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28929              		.loc 1 4098 7 is_stmt 0 view .LVU7635
ARM GAS  /tmp/ccQlyisH.s 			page 740


 28930 006c 1AD8     		bhi	.L2084
 28931              	.LVL2255:
 28932              	.L2093:
4102:src/xeq.c     **** 	if (intm) {
 28933              		.loc 1 4102 2 is_stmt 1 view .LVU7636
4102:src/xeq.c     **** 	if (intm) {
 28934              		.loc 1 4102 14 is_stmt 0 view .LVU7637
 28935 006e 6420     		movs	r0, #100
 28936 0070 FFF7FEFF 		bl	get_reg_n
 28937              	.LVL2256:
4102:src/xeq.c     **** 	if (intm) {
 28938              		.loc 1 4102 12 view .LVU7638
 28939 0074 2A4B     		ldr	r3, .L2098+4
 28940 0076 1860     		str	r0, [r3]
4103:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28941              		.loc 1 4103 2 is_stmt 1 view .LVU7639
 28942              	.L2070:
4107:src/xeq.c     **** 
 28943              		.loc 1 4107 1 is_stmt 0 view .LVU7640
 28944 0078 0AB0     		add	sp, sp, #40
 28945              		.cfi_remember_state
 28946              		.cfi_def_cfa_offset 24
 28947              		@ sp needed
 28948 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28949              	.LVL2257:
 28950              	.L2079:
 28951              		.cfi_restore_state
4097:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28952              		.loc 1 4097 4 is_stmt 1 view .LVU7641
4098:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28953              		.loc 1 4098 7 is_stmt 0 view .LVU7642
 28954 007e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
4097:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28955              		.loc 1 4097 23 view .LVU7643
 28956 0082 6FF38612 		bfc	r2, #6, #1
4098:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28957              		.loc 1 4098 7 view .LVU7644
 28958 0086 6429     		cmp	r1, #100
4097:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28959              		.loc 1 4097 23 view .LVU7645
 28960 0088 83F8E927 		strb	r2, [r3, #2025]
4098:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28961              		.loc 1 4098 4 is_stmt 1 view .LVU7646
4098:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28962              		.loc 1 4098 7 is_stmt 0 view .LVU7647
 28963 008c 0AD8     		bhi	.L2084
 28964              	.LVL2258:
 28965              	.L2092:
4102:src/xeq.c     **** 	if (intm) {
 28966              		.loc 1 4102 2 is_stmt 1 view .LVU7648
4102:src/xeq.c     **** 	if (intm) {
 28967              		.loc 1 4102 14 is_stmt 0 view .LVU7649
 28968 008e 6420     		movs	r0, #100
 28969 0090 FFF7FEFF 		bl	get_reg_n
 28970              	.LVL2259:
4102:src/xeq.c     **** 	if (intm) {
 28971              		.loc 1 4102 12 view .LVU7650
ARM GAS  /tmp/ccQlyisH.s 			page 741


 28972 0094 224B     		ldr	r3, .L2098+4
 28973 0096 1860     		str	r0, [r3]
4103:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28974              		.loc 1 4103 2 is_stmt 1 view .LVU7651
 28975              	.L2083:
4105:src/xeq.c     **** 	}
 28976              		.loc 1 4105 3 view .LVU7652
 28977 0098 CE20     		movs	r0, #206
 28978 009a FFF7FEFF 		bl	op_float
 28979              	.LVL2260:
4107:src/xeq.c     **** 
 28980              		.loc 1 4107 1 is_stmt 0 view .LVU7653
 28981 009e 0AB0     		add	sp, sp, #40
 28982              		.cfi_remember_state
 28983              		.cfi_def_cfa_offset 24
 28984              		@ sp needed
 28985 00a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28986              	.LVL2261:
 28987              	.L2084:
 28988              		.cfi_restore_state
4099:src/xeq.c     **** 		}
 28989              		.loc 1 4099 5 is_stmt 1 view .LVU7654
 28990 00a4 7D21     		movs	r1, #125
 28991 00a6 6420     		movs	r0, #100
 28992 00a8 FFF7FEFF 		bl	cmdregs
 28993              	.LVL2262:
 28994              	.L2071:
4102:src/xeq.c     **** 	if (intm) {
 28995              		.loc 1 4102 2 view .LVU7655
4102:src/xeq.c     **** 	if (intm) {
 28996              		.loc 1 4102 14 is_stmt 0 view .LVU7656
 28997 00ac 6420     		movs	r0, #100
 28998 00ae FFF7FEFF 		bl	get_reg_n
 28999              	.LVL2263:
4102:src/xeq.c     **** 	if (intm) {
 29000              		.loc 1 4102 12 view .LVU7657
 29001 00b2 1B4B     		ldr	r3, .L2098+4
 29002 00b4 1860     		str	r0, [r3]
4103:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29003              		.loc 1 4103 2 is_stmt 1 view .LVU7658
4103:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29004              		.loc 1 4103 5 is_stmt 0 view .LVU7659
 29005 00b6 B8F1000F 		cmp	r8, #0
 29006 00ba EDD1     		bne	.L2083
4107:src/xeq.c     **** 
 29007              		.loc 1 4107 1 view .LVU7660
 29008 00bc 0AB0     		add	sp, sp, #40
 29009              		.cfi_remember_state
 29010              		.cfi_def_cfa_offset 24
 29011              		@ sp needed
 29012 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29013              	.LVL2264:
 29014              	.L2096:
 29015              		.cfi_restore_state
4074:src/xeq.c     **** 				// Need space for double precision stack
 29016              		.loc 1 4074 4 is_stmt 1 view .LVU7661
4074:src/xeq.c     **** 				// Need space for double precision stack
ARM GAS  /tmp/ccQlyisH.s 			page 742


 29017              		.loc 1 4074 7 is_stmt 0 view .LVU7662
 29018 00c2 93F8CF27 		ldrb	r2, [r3, #1999]	@ zero_extendqisi2
 29019 00c6 0B2A     		cmp	r2, #11
 29020 00c8 1ED9     		bls	.L2097
 29021              	.LVL2265:
 29022              	.L2073:
4082:src/xeq.c     **** 			if (! intm) {
 29023              		.loc 1 4082 4 is_stmt 1 view .LVU7663
4082:src/xeq.c     **** 			if (! intm) {
 29024              		.loc 1 4082 23 is_stmt 0 view .LVU7664
 29025 00ca 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 29026 00ce 42F04002 		orr	r2, r2, #64
 29027 00d2 83F8E927 		strb	r2, [r3, #2025]
4083:src/xeq.c     **** 				// Convert X to K to double precision
 29028              		.loc 1 4083 4 is_stmt 1 view .LVU7665
4083:src/xeq.c     **** 				// Convert X to K to double precision
 29029              		.loc 1 4083 7 is_stmt 0 view .LVU7666
 29030 00d6 B8F1000F 		cmp	r8, #0
 29031 00da D8D1     		bne	.L2092
 29032 00dc 6424     		movs	r4, #100
 29033 00de 01AF     		add	r7, sp, #4
 29034              	.L2077:
 29035              	.LVL2266:
4087:src/xeq.c     **** 			}
 29036              		.loc 1 4087 6 is_stmt 1 view .LVU7667
 29037              	.LBB3712:
 29038              	.LBI3712:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 29039              		.loc 1 709 11 view .LVU7668
 29040              	.LBB3713:
 710:src/xeq.c     **** }
 29041              		.loc 1 710 2 view .LVU7669
 710:src/xeq.c     **** }
 29042              		.loc 1 710 9 is_stmt 0 view .LVU7670
 29043 00e0 2046     		mov	r0, r4
 29044 00e2 FFF7FEFF 		bl	get_reg_n
 29045              	.LVL2267:
 29046              	.LBE3713:
 29047              	.LBE3712:
4087:src/xeq.c     **** 			}
 29048              		.loc 1 4087 48 view .LVU7671
 29049 00e6 3368     		ldr	r3, [r6]
 29050 00e8 03F22C43 		addw	r3, r3, #1068
 29051              	.LBB3715:
 29052              	.LBB3714:
 710:src/xeq.c     **** }
 29053              		.loc 1 710 9 view .LVU7672
 29054 00ec 0546     		mov	r5, r0
 29055              	.LVL2268:
 710:src/xeq.c     **** }
 29056              		.loc 1 710 9 view .LVU7673
 29057              	.LBE3714:
 29058              	.LBE3715:
 29059              	.LBB3716:
 29060              	.LBI3716:
 645:src/xeq.c     **** 	decNumber temp;
 29061              		.loc 1 645 6 is_stmt 1 view .LVU7674
ARM GAS  /tmp/ccQlyisH.s 			page 743


 29062              	.LBB3717:
 646:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 29063              		.loc 1 646 2 view .LVU7675
 647:src/xeq.c     **** }
 29064              		.loc 1 647 2 view .LVU7676
 647:src/xeq.c     **** }
 29065              		.loc 1 647 27 is_stmt 0 view .LVU7677
 29066 00ee 3946     		mov	r1, r7
 29067 00f0 03EBC400 		add	r0, r3, r4, lsl #3
 29068              	.LVL2269:
 647:src/xeq.c     **** }
 29069              		.loc 1 647 27 view .LVU7678
 29070 00f4 FFF7FEFF 		bl	decimal64ToNumber
 29071              	.LVL2270:
 647:src/xeq.c     **** }
 29072              		.loc 1 647 27 view .LVU7679
 29073 00f8 0134     		adds	r4, r4, #1
 29074              	.LVL2271:
 647:src/xeq.c     **** }
 29075              		.loc 1 647 27 view .LVU7680
 29076 00fa 0146     		mov	r1, r0
 647:src/xeq.c     **** }
 29077              		.loc 1 647 2 view .LVU7681
 29078 00fc 2846     		mov	r0, r5
 29079 00fe FFF7FEFF 		bl	packed128_from_number
 29080              	.LVL2272:
 647:src/xeq.c     **** }
 29081              		.loc 1 647 2 view .LVU7682
 29082              	.LBE3717:
 29083              	.LBE3716:
4086:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29084              		.loc 1 4086 45 is_stmt 1 view .LVU7683
4086:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29085              		.loc 1 4086 17 view .LVU7684
4086:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29086              		.loc 1 4086 5 is_stmt 0 view .LVU7685
 29087 0102 702C     		cmp	r4, #112
 29088 0104 ECD1     		bne	.L2077
 29089 0106 B2E7     		b	.L2093
 29090              	.LVL2273:
 29091              	.L2097:
4076:src/xeq.c     **** 				if (Error) {
 29092              		.loc 1 4076 5 is_stmt 1 view .LVU7686
 29093 0108 7D21     		movs	r1, #125
 29094 010a 0C20     		movs	r0, #12
 29095              	.LVL2274:
4076:src/xeq.c     **** 				if (Error) {
 29096              		.loc 1 4076 5 is_stmt 0 view .LVU7687
 29097 010c FFF7FEFF 		bl	cmdregs
 29098              	.LVL2275:
4077:src/xeq.c     **** 					return;
 29099              		.loc 1 4077 5 is_stmt 1 view .LVU7688
4077:src/xeq.c     **** 					return;
 29100              		.loc 1 4077 9 is_stmt 0 view .LVU7689
 29101 0110 044B     		ldr	r3, .L2098+8
4077:src/xeq.c     **** 					return;
 29102              		.loc 1 4077 8 view .LVU7690
ARM GAS  /tmp/ccQlyisH.s 			page 744


 29103 0112 1B68     		ldr	r3, [r3]
 29104 0114 002B     		cmp	r3, #0
 29105 0116 AFD1     		bne	.L2070
 29106 0118 3368     		ldr	r3, [r6]
 29107 011a D6E7     		b	.L2073
 29108              	.L2099:
 29109              		.align	2
 29110              	.L2098:
 29111 011c 00000000 		.word	main_ram
 29112 0120 00000000 		.word	StackBase
 29113 0124 00000000 		.word	Error
 29114              		.cfi_endproc
 29115              	.LFE216:
 29117              		.section	.text.cmdrestm,"ax",%progbits
 29118              		.align	1
 29119              		.p2align 2,,3
 29120              		.global	cmdrestm
 29121              		.syntax unified
 29122              		.thumb
 29123              		.thumb_func
 29124              		.fpu fpv4-sp-d16
 29126              	cmdrestm:
 29127              	.LVL2276:
 29128              	.LFB211:
3750:src/xeq.c     **** 	const int dbl = is_dblmode();
 29129              		.loc 1 3750 47 is_stmt 1 view -0
 29130              		.cfi_startproc
 29131              		@ args = 0, pretend = 0, frame = 0
 29132              		@ frame_needed = 0, uses_anonymous_args = 0
3751:src/xeq.c     **** 	const int intm = is_intmode();
 29133              		.loc 1 3751 2 view .LVU7692
 29134              	.LBB3718:
 29135              	.LBI3718:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 29136              		.loc 1 1087 5 view .LVU7693
 29137              	.LBB3719:
1088:src/xeq.c     **** }
 29138              		.loc 1 1088 2 view .LVU7694
 29139              	.LBE3719:
 29140              	.LBE3718:
3750:src/xeq.c     **** 	const int dbl = is_dblmode();
 29141              		.loc 1 3750 47 is_stmt 0 view .LVU7695
 29142 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 29143              		.cfi_def_cfa_offset 24
 29144              		.cfi_offset 3, -24
 29145              		.cfi_offset 4, -20
 29146              		.cfi_offset 5, -16
 29147              		.cfi_offset 6, -12
 29148              		.cfi_offset 7, -8
 29149              		.cfi_offset 14, -4
 29150              	.LBB3727:
 29151              	.LBB3720:
1088:src/xeq.c     **** }
 29152              		.loc 1 1088 12 view .LVU7696
 29153 0002 294F     		ldr	r7, .L2108
 29154 0004 3D68     		ldr	r5, [r7]
 29155              	.LBE3720:
ARM GAS  /tmp/ccQlyisH.s 			page 745


 29156              	.LBE3727:
3752:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29157              		.loc 1 3752 19 view .LVU7697
 29158 0006 95F8E847 		ldrb	r4, [r5, #2024]	@ zero_extendqisi2
 29159              	.LBB3728:
 29160              	.LBB3721:
1088:src/xeq.c     **** }
 29161              		.loc 1 1088 24 view .LVU7698
 29162 000a B5F8E867 		ldrh	r6, [r5, #2024]
 29163              	.LVL2277:
1088:src/xeq.c     **** }
 29164              		.loc 1 1088 24 view .LVU7699
 29165              	.LBE3721:
 29166              	.LBE3728:
3752:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29167              		.loc 1 3752 2 is_stmt 1 view .LVU7700
3753:src/xeq.c     **** 
 29168              		.loc 1 3753 18 is_stmt 0 view .LVU7701
 29169 000e FFF7FEFF 		bl	get_reg_n
 29170              	.LVL2278:
3753:src/xeq.c     **** 
 29171              		.loc 1 3753 2 view .LVU7702
 29172 0012 0822     		movs	r2, #8
3753:src/xeq.c     **** 
 29173              		.loc 1 3753 18 view .LVU7703
 29174 0014 0146     		mov	r1, r0
3753:src/xeq.c     **** 
 29175              		.loc 1 3753 2 view .LVU7704
 29176 0016 05F2E470 		addw	r0, r5, #2020
 29177 001a FFF7FEFF 		bl	xcopy
 29178              	.LVL2279:
3756:src/xeq.c     **** 		UState.contrast = 6;
 29179              		.loc 1 3756 7 view .LVU7705
 29180 001e 3B68     		ldr	r3, [r7]
3756:src/xeq.c     **** 		UState.contrast = 6;
 29181              		.loc 1 3756 23 view .LVU7706
 29182 0020 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
3756:src/xeq.c     **** 		UState.contrast = 6;
 29183              		.loc 1 3756 5 view .LVU7707
 29184 0024 1107     		lsls	r1, r2, #28
3752:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29185              		.loc 1 3752 19 view .LVU7708
 29186 0026 04F00104 		and	r4, r4, #1
 29187              	.LVL2280:
3753:src/xeq.c     **** 
 29188              		.loc 1 3753 2 is_stmt 1 view .LVU7709
3756:src/xeq.c     **** 		UState.contrast = 6;
 29189              		.loc 1 3756 2 view .LVU7710
3756:src/xeq.c     **** 		UState.contrast = 6;
 29190              		.loc 1 3756 5 is_stmt 0 view .LVU7711
 29191 002a 04D1     		bne	.L2101
3757:src/xeq.c     **** 
 29192              		.loc 1 3757 3 is_stmt 1 view .LVU7712
3757:src/xeq.c     **** 
 29193              		.loc 1 3757 19 is_stmt 0 view .LVU7713
 29194 002c 0621     		movs	r1, #6
 29195 002e 61F30302 		bfi	r2, r1, #0, #4
ARM GAS  /tmp/ccQlyisH.s 			page 746


 29196 0032 83F8E427 		strb	r2, [r3, #2020]
 29197              	.L2101:
3759:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29198              		.loc 1 3759 2 is_stmt 1 view .LVU7714
3759:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29199              		.loc 1 3759 14 is_stmt 0 view .LVU7715
 29200 0036 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3759:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29201              		.loc 1 3759 5 view .LVU7716
 29202 003a 02F00101 		and	r1, r2, #1
 29203 003e A142     		cmp	r1, r4
 29204 0040 08D0     		beq	.L2102
3761:src/xeq.c     **** 		if (intm)
 29205              		.loc 1 3761 3 is_stmt 1 view .LVU7717
3761:src/xeq.c     **** 		if (intm)
 29206              		.loc 1 3761 15 is_stmt 0 view .LVU7718
 29207 0042 64F30002 		bfi	r2, r4, #0, #1
 29208 0046 83F8E827 		strb	r2, [r3, #2024]
3762:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 29209              		.loc 1 3762 3 is_stmt 1 view .LVU7719
3762:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 29210              		.loc 1 3762 6 is_stmt 0 view .LVU7720
 29211 004a 4CB3     		cbz	r4, .L2103
3763:src/xeq.c     **** 		else
 29212              		.loc 1 3763 4 is_stmt 1 view .LVU7721
 29213 004c CF20     		movs	r0, #207
 29214 004e FFF7FEFF 		bl	op_float
 29215              	.LVL2281:
 29216 0052 3B68     		ldr	r3, [r7]
 29217              	.L2102:
3767:src/xeq.c     **** 		// Switch back to double/single precision
 29218              		.loc 1 3767 2 view .LVU7722
3767:src/xeq.c     **** 		// Switch back to double/single precision
 29219              		.loc 1 3767 6 is_stmt 0 view .LVU7723
 29220 0054 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3767:src/xeq.c     **** 		// Switch back to double/single precision
 29221              		.loc 1 3767 5 view .LVU7724
 29222 0058 D207     		lsls	r2, r2, #31
 29223 005a 20D4     		bmi	.L2100
 29224              	.LBB3729:
 29225              	.LBB3730:
1088:src/xeq.c     **** }
 29226              		.loc 1 1088 24 view .LVU7725
 29227 005c B3F8E827 		ldrh	r2, [r3, #2024]
 29228              	.LBE3730:
 29229              	.LBE3729:
 29230              	.LBB3733:
 29231              	.LBB3722:
 29232 0060 44F20101 		movw	r1, #16385
 29233              	.LBE3722:
 29234              	.LBE3733:
 29235              	.LBB3734:
 29236              	.LBB3731:
 29237 0064 0A40     		ands	r2, r2, r1
 29238              	.LBE3731:
 29239              	.LBE3734:
 29240              	.LBB3735:
ARM GAS  /tmp/ccQlyisH.s 			page 747


 29241              	.LBB3723:
 29242 0066 0E40     		ands	r6, r6, r1
 29243              	.LVL2282:
1088:src/xeq.c     **** }
 29244              		.loc 1 1088 24 view .LVU7726
 29245              	.LBE3723:
 29246              	.LBE3735:
3767:src/xeq.c     **** 		// Switch back to double/single precision
 29247              		.loc 1 3767 21 view .LVU7727
 29248 0068 A2F58042 		sub	r2, r2, #16384
 29249              	.LBB3736:
 29250              	.LBB3724:
1088:src/xeq.c     **** }
 29251              		.loc 1 1088 24 view .LVU7728
 29252 006c A6F58041 		sub	r1, r6, #16384
 29253              	.LBE3724:
 29254              	.LBE3736:
3767:src/xeq.c     **** 		// Switch back to double/single precision
 29255              		.loc 1 3767 21 view .LVU7729
 29256 0070 B2FA82F2 		clz	r2, r2
 29257              	.LBB3737:
 29258              	.LBB3725:
1088:src/xeq.c     **** }
 29259              		.loc 1 1088 24 view .LVU7730
 29260 0074 B1FA81F1 		clz	r1, r1
 29261              	.LBE3725:
 29262              	.LBE3737:
3767:src/xeq.c     **** 		// Switch back to double/single precision
 29263              		.loc 1 3767 21 view .LVU7731
 29264 0078 5209     		lsrs	r2, r2, #5
 29265              	.LBB3738:
 29266              	.LBB3726:
1088:src/xeq.c     **** }
 29267              		.loc 1 1088 24 view .LVU7732
 29268 007a 4909     		lsrs	r1, r1, #5
 29269              	.LBE3726:
 29270              	.LBE3738:
 29271              	.LBB3739:
 29272              	.LBI3729:
1087:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 29273              		.loc 1 1087 5 is_stmt 1 view .LVU7733
 29274              	.LBB3732:
1088:src/xeq.c     **** }
 29275              		.loc 1 1088 2 view .LVU7734
 29276              	.LBE3732:
 29277              	.LBE3739:
3767:src/xeq.c     **** 		// Switch back to double/single precision
 29278              		.loc 1 3767 21 is_stmt 0 view .LVU7735
 29279 007c 8A42     		cmp	r2, r1
 29280 007e 0ED0     		beq	.L2100
3769:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29281              		.loc 1 3769 3 is_stmt 1 view .LVU7736
3769:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29282              		.loc 1 3769 22 is_stmt 0 view .LVU7737
 29283 0080 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 29284 0084 61F38612 		bfi	r2, r1, #6, #1
3770:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQlyisH.s 			page 748


 29285              		.loc 1 3770 3 view .LVU7738
 29286 0088 B6F5804F 		cmp	r6, #16384
3769:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29287              		.loc 1 3769 22 view .LVU7739
 29288 008c 83F8E927 		strb	r2, [r3, #2025]
3770:src/xeq.c     **** 	}
 29289              		.loc 1 3770 3 is_stmt 1 view .LVU7740
3772:src/xeq.c     **** #endif
 29290              		.loc 1 3772 1 is_stmt 0 view .LVU7741
 29291 0090 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 29292              		.cfi_remember_state
 29293              		.cfi_restore 14
 29294              		.cfi_restore 7
 29295              		.cfi_restore 6
 29296              		.cfi_restore 5
 29297              		.cfi_restore 4
 29298              		.cfi_restore 3
 29299              		.cfi_def_cfa_offset 0
3770:src/xeq.c     **** 	}
 29300              		.loc 1 3770 3 view .LVU7742
 29301 0094 0CBF     		ite	eq
 29302 0096 B620     		moveq	r0, #182
 29303 0098 B520     		movne	r0, #181
 29304 009a FFF7FEBF 		b	op_double
 29305              	.LVL2283:
 29306              	.L2100:
 29307              		.cfi_restore_state
3772:src/xeq.c     **** #endif
 29308              		.loc 1 3772 1 view .LVU7743
 29309 009e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 29310              	.LVL2284:
 29311              	.L2103:
3765:src/xeq.c     **** 	}
 29312              		.loc 1 3765 4 is_stmt 1 view .LVU7744
 29313 00a0 FFF7FEFF 		bl	switch_to_int
 29314              	.LVL2285:
 29315 00a4 3B68     		ldr	r3, [r7]
 29316 00a6 D5E7     		b	.L2102
 29317              	.L2109:
 29318              		.align	2
 29319              	.L2108:
 29320 00a8 00000000 		.word	main_ram
 29321              		.cfi_endproc
 29322              	.LFE211:
 29324              		.section	.text.cmdxin,"ax",%progbits
 29325              		.align	1
 29326              		.p2align 2,,3
 29327              		.global	cmdxin
 29328              		.syntax unified
 29329              		.thumb
 29330              		.thumb_func
 29331              		.fpu fpv4-sp-d16
 29333              	cmdxin:
 29334              	.LVL2286:
 29335              	.LFB264:
5882:src/xeq.c     **** 
 29336              		.loc 1 5882 45 view -0
ARM GAS  /tmp/ccQlyisH.s 			page 749


 29337              		.cfi_startproc
 29338              		@ args = 0, pretend = 0, frame = 40
 29339              		@ frame_needed = 0, uses_anonymous_args = 0
5884:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29340              		.loc 1 5884 2 view .LVU7746
5894:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29341              		.loc 1 5894 2 view .LVU7747
5882:src/xeq.c     **** 
 29342              		.loc 1 5882 45 is_stmt 0 view .LVU7748
 29343 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 29344              		.cfi_def_cfa_offset 32
 29345              		.cfi_offset 4, -32
 29346              		.cfi_offset 5, -28
 29347              		.cfi_offset 6, -24
 29348              		.cfi_offset 7, -20
 29349              		.cfi_offset 8, -16
 29350              		.cfi_offset 9, -12
 29351              		.cfi_offset 10, -8
 29352              		.cfi_offset 14, -4
5894:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29353              		.loc 1 5894 6 view .LVU7749
 29354 0004 6A4D     		ldr	r5, .L2139
5894:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29355              		.loc 1 5894 5 view .LVU7750
 29356 0006 95F90130 		ldrsb	r3, [r5, #1]
 29357 000a 002B     		cmp	r3, #0
5882:src/xeq.c     **** 
 29358              		.loc 1 5882 45 view .LVU7751
 29359 000c 8AB0     		sub	sp, sp, #40
 29360              		.cfi_def_cfa_offset 72
5894:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29361              		.loc 1 5894 5 view .LVU7752
 29362 000e C0F2AD80 		blt	.L2136
5902:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29363              		.loc 1 5902 2 is_stmt 1 view .LVU7753
 29364 0012 684E     		ldr	r6, .L2139+4
5907:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29365              		.loc 1 5907 26 is_stmt 0 view .LVU7754
 29366 0014 684F     		ldr	r7, .L2139+8
 29367              	.LBB3755:
 29368              	.LBB3756:
 735:src/xeq.c     **** }
 29369              		.loc 1 735 15 view .LVU7755
 29370 0016 DFF8B481 		ldr	r8, .L2139+28
 29371 001a 0446     		mov	r4, r0
 29372              	.LBE3756:
 29373              	.LBE3755:
5902:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29374              		.loc 1 5902 2 view .LVU7756
 29375 001c 4FF4E872 		mov	r2, #464
 29376 0020 0021     		movs	r1, #0
 29377              	.LVL2287:
5902:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29378              		.loc 1 5902 2 view .LVU7757
 29379 0022 3046     		mov	r0, r6
 29380              	.LVL2288:
5902:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
ARM GAS  /tmp/ccQlyisH.s 			page 750


 29381              		.loc 1 5902 2 view .LVU7758
 29382 0024 FFF7FEFF 		bl	xset
 29383              	.LVL2289:
5903:src/xeq.c     **** 
 29384              		.loc 1 5903 2 is_stmt 1 view .LVU7759
 29385 0028 1022     		movs	r2, #16
 29386 002a 0021     		movs	r1, #0
 29387 002c 2846     		mov	r0, r5
 29388 002e FFF7FEFF 		bl	xset
 29389              	.LVL2290:
5906:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
 29390              		.loc 1 5906 2 view .LVU7760
 29391              	.LBB3760:
 29392              	.LBI3755:
 734:src/xeq.c     **** 	return State2.state_lift;
 29393              		.loc 1 734 12 view .LVU7761
 29394              	.LBB3757:
 735:src/xeq.c     **** }
 29395              		.loc 1 735 2 view .LVU7762
 29396              	.LBE3757:
 29397              	.LBE3760:
5907:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29398              		.loc 1 5907 26 is_stmt 0 view .LVU7763
 29399 0032 3A68     		ldr	r2, [r7]
 29400              	.LBB3761:
 29401              	.LBB3758:
 735:src/xeq.c     **** }
 29402              		.loc 1 735 15 view .LVU7764
 29403 0034 98F817E0 		ldrb	lr, [r8, #23]	@ zero_extendqisi2
 29404              	.LBE3758:
 29405              	.LBE3761:
5909:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29406              		.loc 1 5909 29 view .LVU7765
 29407 0038 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
5907:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29408              		.loc 1 5907 32 view .LVU7766
 29409 003c 92F8EAC7 		ldrb	ip, [r2, #2026]	@ zero_extendqisi2
5908:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29410              		.loc 1 5908 32 view .LVU7767
 29411 0040 92F8E907 		ldrb	r0, [r2, #2025]	@ zero_extendqisi2
5910:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29412              		.loc 1 5910 41 view .LVU7768
 29413 0044 92F8EB17 		ldrb	r1, [r2, #2027]	@ zero_extendqisi2
5925:src/xeq.c     **** 
 29414              		.loc 1 5925 20 view .LVU7769
 29415 0048 B2F8E2A7 		ldrh	r10, [r2, #2018]
 29416 004c A5F80CA0 		strh	r10, [r5, #12]	@ movhi
5909:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29417              		.loc 1 5909 29 view .LVU7770
 29418 0050 03F00103 		and	r3, r3, #1
 29419              	.LBB3762:
 29420              	.LBB3759:
 735:src/xeq.c     **** }
 29421              		.loc 1 735 15 view .LVU7771
 29422 0054 CEF3801E 		ubfx	lr, lr, #6, #1
 29423              	.LBE3759:
 29424              	.LBE3762:
ARM GAS  /tmp/ccQlyisH.s 			page 751


5907:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29425              		.loc 1 5907 2 is_stmt 1 view .LVU7772
5909:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29426              		.loc 1 5909 21 is_stmt 0 view .LVU7773
 29427 0058 63F03F03 		orn	r3, r3, #63
 29428 005c 43EA4E03 		orr	r3, r3, lr, lsl #1
5907:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29429              		.loc 1 5907 32 view .LVU7774
 29430 0060 CCF3C00C 		ubfx	ip, ip, #3, #1
5908:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29431              		.loc 1 5908 2 is_stmt 1 view .LVU7775
5909:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29432              		.loc 1 5909 21 is_stmt 0 view .LVU7776
 29433 0064 43EA8C03 		orr	r3, r3, ip, lsl #2
5908:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29434              		.loc 1 5908 32 view .LVU7777
 29435 0068 C0F38010 		ubfx	r0, r0, #6, #1
5909:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29436              		.loc 1 5909 2 is_stmt 1 view .LVU7778
5910:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29437              		.loc 1 5910 9 view .LVU7779
5943:src/xeq.c     **** 	XromIn = (arg & 0x7);
 29438              		.loc 1 5943 35 is_stmt 0 view .LVU7780
 29439 006c C4F3C01C 		ubfx	ip, r4, #7, #1
5910:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29440              		.loc 1 5910 33 view .LVU7781
 29441 0070 95F802E0 		ldrb	lr, [r5, #2]	@ zero_extendqisi2
5909:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29442              		.loc 1 5909 21 view .LVU7782
 29443 0074 43EAC003 		orr	r3, r3, r0, lsl #3
5942:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 29444              		.loc 1 5942 36 view .LVU7783
 29445 0078 C4F38019 		ubfx	r9, r4, #6, #1
5924:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29446              		.loc 1 5924 17 view .LVU7784
 29447 007c 4F48     		ldr	r0, .L2139+12
5909:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29448              		.loc 1 5909 21 view .LVU7785
 29449 007e 43EA0C13 		orr	r3, r3, ip, lsl #4
5910:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29450              		.loc 1 5910 41 view .LVU7786
 29451 0082 C1F30211 		ubfx	r1, r1, #4, #3
5911:src/xeq.c     **** 	XromFlags.xIN = 1;
 29452              		.loc 1 5911 2 is_stmt 1 view .LVU7787
5912:src/xeq.c     **** 
 29453              		.loc 1 5912 2 view .LVU7788
5924:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29454              		.loc 1 5924 2 view .LVU7789
5909:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29455              		.loc 1 5909 21 is_stmt 0 view .LVU7790
 29456 0086 43EA4913 		orr	r3, r3, r9, lsl #5
5910:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29457              		.loc 1 5910 33 view .LVU7791
 29458 008a 61F3020E 		bfi	lr, r1, #0, #3
5932:src/xeq.c     **** #endif
 29459              		.loc 1 5932 17 view .LVU7792
 29460 008e 41F2020C 		movw	ip, #4098
ARM GAS  /tmp/ccQlyisH.s 			page 752


5931:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29461              		.loc 1 5931 24 view .LVU7793
 29462 0092 4FF6FE71 		movw	r1, #65534
5924:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29463              		.loc 1 5924 17 view .LVU7794
 29464 0096 D0F80090 		ldr	r9, [r0]
5932:src/xeq.c     **** #endif
 29465              		.loc 1 5932 17 view .LVU7795
 29466 009a A6F8CCC1 		strh	ip, [r6, #460]	@ movhi
5909:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29467              		.loc 1 5909 21 view .LVU7796
 29468 009e 6B70     		strb	r3, [r5, #1]
5947:src/xeq.c     **** 		// Complex arguments are always in pairs
 29469              		.loc 1 5947 6 view .LVU7797
 29470 00a0 5FFA83FC 		uxtb	ip, r3
5910:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29471              		.loc 1 5910 33 view .LVU7798
 29472 00a4 85F802E0 		strb	lr, [r5, #2]
5931:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29473              		.loc 1 5931 24 view .LVU7799
 29474 00a8 A2F8E217 		strh	r1, [r2, #2018]	@ movhi
5927:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29475              		.loc 1 5927 9 view .LVU7800
 29476 00ac 06F5E87E 		add	lr, r6, #464
5931:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29477              		.loc 1 5931 12 view .LVU7801
 29478 00b0 A2F8DE17 		strh	r1, [r2, #2014]	@ movhi
5947:src/xeq.c     **** 		// Complex arguments are always in pairs
 29479              		.loc 1 5947 5 view .LVU7802
 29480 00b4 DB06     		lsls	r3, r3, #27
5944:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29481              		.loc 1 5944 16 view .LVU7803
 29482 00b6 04F00701 		and	r1, r4, #7
5945:src/xeq.c     **** #endif
 29483              		.loc 1 5945 24 view .LVU7804
 29484 00ba C4F3C204 		ubfx	r4, r4, #3, #3
 29485              	.LVL2291:
5927:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29486              		.loc 1 5927 9 view .LVU7805
 29487 00be C0F800E0 		str	lr, [r0]
5924:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29488              		.loc 1 5924 17 view .LVU7806
 29489 00c2 C5F80890 		str	r9, [r5, #8]
5925:src/xeq.c     **** 
 29490              		.loc 1 5925 2 is_stmt 1 view .LVU7807
5927:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29491              		.loc 1 5927 2 view .LVU7808
5931:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29492              		.loc 1 5931 2 view .LVU7809
5932:src/xeq.c     **** #endif
 29493              		.loc 1 5932 2 view .LVU7810
5942:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 29494              		.loc 1 5942 2 view .LVU7811
5943:src/xeq.c     **** 	XromIn = (arg & 0x7);
 29495              		.loc 1 5943 2 view .LVU7812
5944:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29496              		.loc 1 5944 2 view .LVU7813
ARM GAS  /tmp/ccQlyisH.s 			page 753


5944:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29497              		.loc 1 5944 9 is_stmt 0 view .LVU7814
 29498 00c6 2971     		strb	r1, [r5, #4]
5945:src/xeq.c     **** #endif
 29499              		.loc 1 5945 2 is_stmt 1 view .LVU7815
5945:src/xeq.c     **** #endif
 29500              		.loc 1 5945 10 is_stmt 0 view .LVU7816
 29501 00c8 6C71     		strb	r4, [r5, #5]
5947:src/xeq.c     **** 		// Complex arguments are always in pairs
 29502              		.loc 1 5947 2 is_stmt 1 view .LVU7817
5947:src/xeq.c     **** 		// Complex arguments are always in pairs
 29503              		.loc 1 5947 5 is_stmt 0 view .LVU7818
 29504 00ca 03D5     		bpl	.L2114
5949:src/xeq.c     **** 		XromOut <<= 1;
 29505              		.loc 1 5949 3 is_stmt 1 view .LVU7819
5949:src/xeq.c     **** 		XromOut <<= 1;
 29506              		.loc 1 5949 10 is_stmt 0 view .LVU7820
 29507 00cc 4900     		lsls	r1, r1, #1
5950:src/xeq.c     **** 	}
 29508              		.loc 1 5950 11 view .LVU7821
 29509 00ce 6400     		lsls	r4, r4, #1
5949:src/xeq.c     **** 		XromOut <<= 1;
 29510              		.loc 1 5949 10 view .LVU7822
 29511 00d0 2971     		strb	r1, [r5, #4]
5950:src/xeq.c     **** 	}
 29512              		.loc 1 5950 3 is_stmt 1 view .LVU7823
5950:src/xeq.c     **** 	}
 29513              		.loc 1 5950 11 is_stmt 0 view .LVU7824
 29514 00d2 6C71     		strb	r4, [r5, #5]
 29515              	.L2114:
5953:src/xeq.c     **** 
 29516              		.loc 1 5953 9 is_stmt 1 view .LVU7825
5953:src/xeq.c     **** 
 29517              		.loc 1 5953 30 is_stmt 0 view .LVU7826
 29518 00d4 92F8EB37 		ldrb	r3, [r2, #2027]	@ zero_extendqisi2
5964:src/xeq.c     **** 		// Convert integers to decimal128
 29519              		.loc 1 5964 5 view .LVU7827
 29520 00d8 1CF0010F 		tst	ip, #1
5953:src/xeq.c     **** 
 29521              		.loc 1 5953 30 view .LVU7828
 29522 00dc 6FF30613 		bfc	r3, #4, #3
 29523 00e0 82F8EB37 		strb	r3, [r2, #2027]
5964:src/xeq.c     **** 		// Convert integers to decimal128
 29524              		.loc 1 5964 2 is_stmt 1 view .LVU7829
5964:src/xeq.c     **** 		// Convert integers to decimal128
 29525              		.loc 1 5964 5 is_stmt 0 view .LVU7830
 29526 00e4 52D1     		bne	.L2137
5972:src/xeq.c     **** 		// No conversion necessary
 29527              		.loc 1 5972 7 is_stmt 1 view .LVU7831
5972:src/xeq.c     **** 		// No conversion necessary
 29528              		.loc 1 5972 10 is_stmt 0 view .LVU7832
 29529 00e6 1CF0080F 		tst	ip, #8
 29530 00ea 47D1     		bne	.L2138
5993:src/xeq.c     **** #endif
 29531              		.loc 1 5993 3 is_stmt 1 view .LVU7833
 29532 00ec B520     		movs	r0, #181
 29533 00ee FFF7FEFF 		bl	op_double
ARM GAS  /tmp/ccQlyisH.s 			page 754


 29534              	.LVL2292:
 29535              	.L2116:
5998:src/xeq.c     **** 	UState.stack_depth = 1;
 29536              		.loc 1 5998 2 view .LVU7834
 29537              	.LBB3763:
 29538              	.LBI3763:
 758:src/xeq.c     ****     State2.state_lift = 1;
 29539              		.loc 1 758 6 view .LVU7835
 29540              	.LBB3764:
 759:src/xeq.c     **** }
 29541              		.loc 1 759 5 view .LVU7836
 759:src/xeq.c     **** }
 29542              		.loc 1 759 23 is_stmt 0 view .LVU7837
 29543 00f2 98F81730 		ldrb	r3, [r8, #23]	@ zero_extendqisi2
 29544              	.LBE3764:
 29545              	.LBE3763:
5999:src/xeq.c     **** 
 29546              		.loc 1 5999 21 view .LVU7838
 29547 00f6 3A68     		ldr	r2, [r7]
 29548              	.LBB3766:
 29549              	.LBB3765:
 759:src/xeq.c     **** }
 29550              		.loc 1 759 23 view .LVU7839
 29551 00f8 43F04003 		orr	r3, r3, #64
 29552 00fc 88F81730 		strb	r3, [r8, #23]
 29553              	.LBE3765:
 29554              	.LBE3766:
5999:src/xeq.c     **** 
 29555              		.loc 1 5999 2 is_stmt 1 view .LVU7840
5999:src/xeq.c     **** 
 29556              		.loc 1 5999 21 is_stmt 0 view .LVU7841
 29557 0100 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 29558 0104 43F00803 		orr	r3, r3, #8
 29559 0108 82F8EA37 		strb	r3, [r2, #2026]
6002:src/xeq.c     **** 		decNumber x;
 29560              		.loc 1 6002 2 is_stmt 1 view .LVU7842
 29561              	.LVL2293:
6002:src/xeq.c     **** 		decNumber x;
 29562              		.loc 1 6002 14 view .LVU7843
6002:src/xeq.c     **** 		decNumber x;
 29563              		.loc 1 6002 2 is_stmt 0 view .LVU7844
 29564 010c 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 29565 010e 93B3     		cbz	r3, .L2110
6002:src/xeq.c     **** 		decNumber x;
 29566              		.loc 1 6002 9 view .LVU7845
 29567 0110 0024     		movs	r4, #0
 29568 0112 02E0     		b	.L2123
 29569              	.LVL2294:
 29570              	.L2118:
6002:src/xeq.c     **** 		decNumber x;
 29571              		.loc 1 6002 18 view .LVU7846
 29572 0114 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
6002:src/xeq.c     **** 		decNumber x;
 29573              		.loc 1 6002 2 view .LVU7847
 29574 0116 A342     		cmp	r3, r4
 29575 0118 2DDD     		ble	.L2110
 29576              	.LVL2295:
ARM GAS  /tmp/ccQlyisH.s 			page 755


 29577              	.L2123:
 29578              	.LBB3767:
6003:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
 29579              		.loc 1 6003 3 is_stmt 1 view .LVU7848
6004:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29580              		.loc 1 6004 3 view .LVU7849
6004:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29581              		.loc 1 6004 7 is_stmt 0 view .LVU7850
 29582 011a 04F16401 		add	r1, r4, #100
 29583 011e 01A8     		add	r0, sp, #4
 29584 0120 FFF7FEFF 		bl	getRegister
 29585              	.LVL2296:
 29586              	.LBE3767:
6002:src/xeq.c     **** 		decNumber x;
 29587              		.loc 1 6002 26 is_stmt 1 view .LVU7851
 29588              	.LBB3774:
6004:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29589              		.loc 1 6004 6 is_stmt 0 view .LVU7852
 29590 0124 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 29591 0126 13F0300F 		tst	r3, #48
 29592              	.LBE3774:
6002:src/xeq.c     **** 		decNumber x;
 29593              		.loc 1 6002 26 view .LVU7853
 29594 012a 04F10104 		add	r4, r4, #1
 29595              	.LVL2297:
6002:src/xeq.c     **** 		decNumber x;
 29596              		.loc 1 6002 14 is_stmt 1 view .LVU7854
 29597              	.LBB3775:
6004:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29598              		.loc 1 6004 6 is_stmt 0 view .LVU7855
 29599 012e F1D0     		beq	.L2118
6007:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 29600              		.loc 1 6007 4 is_stmt 1 view .LVU7856
 29601              	.LVL2298:
 29602              	.LBB3768:
 29603              	.LBI3768:
3518:src/xeq.c     **** 	unsigned short mask;
 29604              		.loc 1 3518 5 view .LVU7857
 29605              	.LBB3769:
3519:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 29606              		.loc 1 3519 2 view .LVU7858
3520:src/xeq.c     **** 
 29607              		.loc 1 3520 2 view .LVU7859
3520:src/xeq.c     **** 
 29608              		.loc 1 3520 34 is_stmt 0 view .LVU7860
 29609 0130 0DF10201 		add	r1, sp, #2
 29610 0134 6B20     		movs	r0, #107
 29611 0136 FFF7FEFF 		bl	flag_word
 29612              	.LVL2299:
3522:src/xeq.c     **** }
 29613              		.loc 1 3522 2 is_stmt 1 view .LVU7861
3522:src/xeq.c     **** }
 29614              		.loc 1 3522 24 is_stmt 0 view .LVU7862
 29615 013a BDF80230 		ldrh	r3, [sp, #2]
 29616 013e 0288     		ldrh	r2, [r0]
 29617              	.LBE3769:
 29618              	.LBE3768:
ARM GAS  /tmp/ccQlyisH.s 			page 756


6007:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 29619              		.loc 1 6007 7 view .LVU7863
 29620 0140 1A42     		tst	r2, r3
 29621 0142 2DD0     		beq	.L2119
 29622              	.LVL2300:
6008:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29623              		.loc 1 6008 17 is_stmt 1 view .LVU7864
6008:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29624              		.loc 1 6008 5 is_stmt 0 view .LVU7865
 29625 0144 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 29626 0146 53B1     		cbz	r3, .L2120
6009:src/xeq.c     **** 				// Early exit of routine
 29627              		.loc 1 6009 6 view .LVU7866
 29628 0148 1D4E     		ldr	r6, .L2139+16
6008:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29629              		.loc 1 6008 12 view .LVU7867
 29630 014a 0024     		movs	r4, #0
 29631              	.LVL2301:
 29632              	.L2121:
6009:src/xeq.c     **** 				// Early exit of routine
 29633              		.loc 1 6009 6 is_stmt 1 discriminator 3 view .LVU7868
 29634 014c 04F16400 		add	r0, r4, #100
 29635 0150 3146     		mov	r1, r6
 29636 0152 FFF7FEFF 		bl	setRegister
 29637              	.LVL2302:
6008:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29638              		.loc 1 6008 30 discriminator 3 view .LVU7869
6008:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29639              		.loc 1 6008 21 is_stmt 0 discriminator 3 view .LVU7870
 29640 0156 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
6008:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29641              		.loc 1 6008 30 discriminator 3 view .LVU7871
 29642 0158 0134     		adds	r4, r4, #1
 29643              	.LVL2303:
6008:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29644              		.loc 1 6008 17 is_stmt 1 discriminator 3 view .LVU7872
6008:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29645              		.loc 1 6008 5 is_stmt 0 discriminator 3 view .LVU7873
 29646 015a A342     		cmp	r3, r4
 29647 015c F6DC     		bgt	.L2121
 29648              	.LVL2304:
 29649              	.L2120:
6011:src/xeq.c     **** 			} 
 29650              		.loc 1 6011 5 is_stmt 1 view .LVU7874
 29651 015e 8421     		movs	r1, #132
 29652 0160 0020     		movs	r0, #0
 29653 0162 FFF7FEFF 		bl	cmdxout
 29654              	.LVL2305:
 29655              	.LBE3775:
6018:src/xeq.c     **** 
 29656              		.loc 1 6018 1 is_stmt 0 view .LVU7875
 29657 0166 0AB0     		add	sp, sp, #40
 29658              		.cfi_remember_state
 29659              		.cfi_def_cfa_offset 32
 29660              		@ sp needed
 29661 0168 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 29662              	.LVL2306:
ARM GAS  /tmp/ccQlyisH.s 			page 757


 29663              	.L2136:
 29664              		.cfi_restore_state
5895:src/xeq.c     **** 		return;
 29665              		.loc 1 5895 3 is_stmt 1 view .LVU7876
 29666              	.LBB3776:
 29667              	.LBI3776:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29668              		.loc 1 537 5 view .LVU7877
 29669              	.LBB3777:
 538:src/xeq.c     **** 		Error = e;
 29670              		.loc 1 538 2 view .LVU7878
 538:src/xeq.c     **** 		Error = e;
 29671              		.loc 1 538 12 is_stmt 0 view .LVU7879
 29672 016c 154B     		ldr	r3, .L2139+20
 538:src/xeq.c     **** 		Error = e;
 29673              		.loc 1 538 5 view .LVU7880
 29674 016e 1A68     		ldr	r2, [r3]
 29675 0170 0AB9     		cbnz	r2, .L2110
 29676              	.LVL2307:
 29677              	.LBB3778:
 29678              	.LBI3778:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29679              		.loc 1 537 5 is_stmt 1 view .LVU7881
 29680              	.LBB3779:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 29681              		.loc 1 539 3 view .LVU7882
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 29682              		.loc 1 539 9 is_stmt 0 view .LVU7883
 29683 0172 0722     		movs	r2, #7
 29684 0174 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 29685              		.loc 1 540 3 is_stmt 1 view .LVU7884
 29686              	.LVL2308:
 29687              	.L2110:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 29688              		.loc 1 540 3 is_stmt 0 view .LVU7885
 29689              	.LBE3779:
 29690              	.LBE3778:
 29691              	.LBE3777:
 29692              	.LBE3776:
6018:src/xeq.c     **** 
 29693              		.loc 1 6018 1 view .LVU7886
 29694 0176 0AB0     		add	sp, sp, #40
 29695              		.cfi_remember_state
 29696              		.cfi_def_cfa_offset 32
 29697              		@ sp needed
 29698 0178 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 29699              	.L2138:
 29700              		.cfi_restore_state
5974:src/xeq.c     **** 		StackBase = XromStack;
 29701              		.loc 1 5974 3 is_stmt 1 view .LVU7887
 29702 017c 124C     		ldr	r4, .L2139+24
 29703 017e 0D48     		ldr	r0, .L2139+4
 29704 0180 2168     		ldr	r1, [r4]
 29705 0182 C022     		movs	r2, #192
 29706 0184 FFF7FEFF 		bl	xcopy
 29707              	.LVL2309:
ARM GAS  /tmp/ccQlyisH.s 			page 758


5975:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29708              		.loc 1 5975 3 view .LVU7888
5975:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29709              		.loc 1 5975 13 is_stmt 0 view .LVU7889
 29710 0188 2660     		str	r6, [r4]
 29711 018a B2E7     		b	.L2116
 29712              	.L2137:
5967:src/xeq.c     **** #endif
 29713              		.loc 1 5967 3 is_stmt 1 view .LVU7890
5967:src/xeq.c     **** #endif
 29714              		.loc 1 5967 22 is_stmt 0 view .LVU7891
 29715 018c 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 29716 0190 43F04003 		orr	r3, r3, #64
 29717 0194 82F8E937 		strb	r3, [r2, #2025]
5969:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
 29718              		.loc 1 5969 3 is_stmt 1 view .LVU7892
 29719 0198 CE20     		movs	r0, #206
 29720 019a FFF7FEFF 		bl	op_float
 29721              	.LVL2310:
 29722 019e A8E7     		b	.L2116
 29723              	.LVL2311:
 29724              	.L2119:
 29725              	.LBB3780:
6014:src/xeq.c     **** 			return;
 29726              		.loc 1 6014 5 view .LVU7893
 29727              	.LBB3770:
 29728              	.LBI3770:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29729              		.loc 1 537 5 view .LVU7894
 29730              	.LBB3771:
 538:src/xeq.c     **** 		Error = e;
 29731              		.loc 1 538 2 view .LVU7895
 538:src/xeq.c     **** 		Error = e;
 29732              		.loc 1 538 12 is_stmt 0 view .LVU7896
 29733 01a0 084B     		ldr	r3, .L2139+20
 538:src/xeq.c     **** 		Error = e;
 29734              		.loc 1 538 5 view .LVU7897
 29735 01a2 1A68     		ldr	r2, [r3]
 29736 01a4 002A     		cmp	r2, #0
 29737 01a6 E6D1     		bne	.L2110
 29738              	.LVL2312:
 29739              	.LBB3772:
 29740              	.LBI3772:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29741              		.loc 1 537 5 is_stmt 1 view .LVU7898
 29742              	.LBB3773:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 29743              		.loc 1 539 3 view .LVU7899
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 29744              		.loc 1 539 9 is_stmt 0 view .LVU7900
 29745 01a8 0122     		movs	r2, #1
 29746 01aa 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 29747              		.loc 1 540 3 is_stmt 1 view .LVU7901
 29748              	.LVL2313:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 29749              		.loc 1 540 3 is_stmt 0 view .LVU7902
ARM GAS  /tmp/ccQlyisH.s 			page 759


 29750              	.LBE3773:
 29751              	.LBE3772:
 29752              	.LBE3771:
 29753              	.LBE3770:
6015:src/xeq.c     **** 		}
 29754              		.loc 1 6015 4 is_stmt 1 view .LVU7903
 29755 01ac E3E7     		b	.L2110
 29756              	.L2140:
 29757 01ae 00BF     		.align	2
 29758              	.L2139:
 29759 01b0 00000000 		.word	XromParams
 29760 01b4 00000000 		.word	XromLocal
 29761 01b8 00000000 		.word	main_ram
 29762 01bc 00000000 		.word	RetStk
 29763 01c0 00000000 		.word	const_NaN
 29764 01c4 00000000 		.word	Error
 29765 01c8 00000000 		.word	StackBase
 29766 01cc 00000000 		.word	StateWhileOn
 29767              	.LBE3780:
 29768              		.cfi_endproc
 29769              	.LFE264:
 29771              		.section	.rodata.xeq.str1.4,"aMS",%progbits,1
 29772              		.align	2
 29773              	.LC8:
 29774 0000 25303458 		.ascii	"%04X:%s\000"
 29774      3A257300 
 29775              		.section	.text.xeq,"ax",%progbits
 29776              		.align	1
 29777              		.p2align 2,,3
 29778              		.global	xeq
 29779              		.syntax unified
 29780              		.thumb
 29781              		.thumb_func
 29782              		.fpu fpv4-sp-d16
 29784              	xeq:
 29785              	.LVL2314:
 29786              	.LFB249:
5279:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29787              		.loc 1 5279 1 view -0
 29788              		.cfi_startproc
 29789              		@ args = 0, pretend = 0, frame = 416
 29790              		@ frame_needed = 0, uses_anonymous_args = 0
5280:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
 29791              		.loc 1 5280 2 view .LVU7905
5281:src/xeq.c     **** 	const struct _ustate old = UState;
 29792              		.loc 1 5281 2 view .LVU7906
5279:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29793              		.loc 1 5279 1 is_stmt 0 view .LVU7907
 29794 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 29795              		.cfi_def_cfa_offset 36
 29796              		.cfi_offset 4, -36
 29797              		.cfi_offset 5, -32
 29798              		.cfi_offset 6, -28
 29799              		.cfi_offset 7, -24
 29800              		.cfi_offset 8, -20
 29801              		.cfi_offset 9, -16
 29802              		.cfi_offset 10, -12
ARM GAS  /tmp/ccQlyisH.s 			page 760


 29803              		.cfi_offset 11, -8
 29804              		.cfi_offset 14, -4
5281:src/xeq.c     **** 	const struct _ustate old = UState;
 29805              		.loc 1 5281 31 view .LVU7908
 29806 0004 BC4F     		ldr	r7, .L2476
 29807              	.LBB4074:
 29808              	.LBB4075:
 735:src/xeq.c     **** }
 29809              		.loc 1 735 15 view .LVU7909
 29810 0006 BD4C     		ldr	r4, .L2476+4
 29811              	.LBE4075:
 29812              	.LBE4074:
5281:src/xeq.c     **** 	const struct _ustate old = UState;
 29813              		.loc 1 5281 31 view .LVU7910
 29814 0008 3B68     		ldr	r3, [r7]
 29815              	.LBB4079:
 29816              	.LBB4076:
 735:src/xeq.c     **** }
 29817              		.loc 1 735 15 view .LVU7911
 29818 000a 94F817C0 		ldrb	ip, [r4, #23]	@ zero_extendqisi2
 29819              	.LBE4076:
 29820              	.LBE4079:
5282:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29821              		.loc 1 5282 23 view .LVU7912
 29822 000e D3F8E817 		ldr	r1, [r3, #2024]
5300:src/xeq.c     **** #if defined(CONSOLE)
 29823              		.loc 1 5300 2 view .LVU7913
 29824 0012 DFF82483 		ldr	r8, .L2476+64
5281:src/xeq.c     **** 	const struct _ustate old = UState;
 29825              		.loc 1 5281 23 view .LVU7914
 29826 0016 B3F8FC27 		ldrh	r2, [r3, #2044]
5284:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 29827              		.loc 1 5284 23 view .LVU7915
 29828 001a B3F8E0B7 		ldrh	fp, [r3, #2016]
5285:src/xeq.c     **** #ifdef INFRARED
 29829              		.loc 1 5285 12 view .LVU7916
 29830 001e D4F81C90 		ldr	r9, [r4, #28]
5279:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29831              		.loc 1 5279 1 view .LVU7917
 29832 0022 EBB0     		sub	sp, sp, #428
 29833              		.cfi_def_cfa_offset 464
5279:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29834              		.loc 1 5279 1 view .LVU7918
 29835 0024 0546     		mov	r5, r0
5282:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29836              		.loc 1 5282 23 view .LVU7919
 29837 0026 D3F8E407 		ldr	r0, [r3, #2020]
 29838              	.LVL2315:
5281:src/xeq.c     **** 	const struct _ustate old = UState;
 29839              		.loc 1 5281 23 view .LVU7920
 29840 002a 0392     		str	r2, [sp, #12]
 29841              	.LVL2316:
5282:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29842              		.loc 1 5282 2 is_stmt 1 view .LVU7921
5282:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29843              		.loc 1 5282 23 is_stmt 0 view .LVU7922
 29844 002c 0AAE     		add	r6, sp, #40
ARM GAS  /tmp/ccQlyisH.s 			page 761


 29845 002e 86E80300 		stm	r6, {r0, r1}
5283:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
 29846              		.loc 1 5283 2 is_stmt 1 view .LVU7923
 29847              	.LBB4080:
 29848              	.LBI4074:
 734:src/xeq.c     **** 	return State2.state_lift;
 29849              		.loc 1 734 12 view .LVU7924
 29850              	.LBB4077:
 735:src/xeq.c     **** }
 29851              		.loc 1 735 2 view .LVU7925
 735:src/xeq.c     **** }
 29852              		.loc 1 735 15 is_stmt 0 view .LVU7926
 29853 0032 CCF38013 		ubfx	r3, ip, #6, #1
 29854              	.LBE4077:
 29855              	.LBE4080:
5300:src/xeq.c     **** #if defined(CONSOLE)
 29856              		.loc 1 5300 2 view .LVU7927
 29857 0036 D8F80010 		ldr	r1, [r8]
 29858              	.LBB4081:
 29859              	.LBB4078:
 735:src/xeq.c     **** }
 29860              		.loc 1 735 15 view .LVU7928
 29861 003a 0493     		str	r3, [sp, #16]
 29862              	.LVL2317:
 735:src/xeq.c     **** }
 29863              		.loc 1 735 15 view .LVU7929
 29864              	.LBE4078:
 29865              	.LBE4081:
5284:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 29866              		.loc 1 5284 2 is_stmt 1 view .LVU7930
5285:src/xeq.c     **** #ifdef INFRARED
 29867              		.loc 1 5285 2 view .LVU7931
5300:src/xeq.c     **** #if defined(CONSOLE)
 29868              		.loc 1 5300 2 view .LVU7932
 29869 003c A022     		movs	r2, #160
 29870 003e 42A8     		add	r0, sp, #264
 29871 0040 FFF7FEFF 		bl	xcopy
 29872              	.LVL2318:
5305:src/xeq.c     **** 		char buf[16];
 29873              		.loc 1 5305 2 view .LVU7933
5305:src/xeq.c     **** 		char buf[16];
 29874              		.loc 1 5305 5 is_stmt 0 view .LVU7934
 29875 0044 94F91730 		ldrsb	r3, [r4, #23]
 29876 0048 002B     		cmp	r3, #0
 29877 004a 1CDB     		blt	.L2445
 29878              	.L2142:
5323:src/xeq.c     **** 	State2.wascomplex = 0;
 29879              		.loc 1 5323 2 is_stmt 1 view .LVU7935
5324:src/xeq.c     **** 	if (isDBL(op))
 29880              		.loc 1 5324 20 is_stmt 0 view .LVU7936
 29881 004c 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
5323:src/xeq.c     **** 	State2.wascomplex = 0;
 29882              		.loc 1 5323 7 view .LVU7937
 29883 004e AC49     		ldr	r1, .L2476+8
 29884 0050 0023     		movs	r3, #0
5324:src/xeq.c     **** 	if (isDBL(op))
 29885              		.loc 1 5324 20 view .LVU7938
ARM GAS  /tmp/ccQlyisH.s 			page 762


 29886 0052 63F38712 		bfi	r2, r3, #6, #2
 29887 0056 2275     		strb	r2, [r4, #20]
5325:src/xeq.c     **** 		multi(op);
 29888              		.loc 1 5325 6 view .LVU7939
 29889 0058 05F47042 		and	r2, r5, #61440
5325:src/xeq.c     **** 		multi(op);
 29890              		.loc 1 5325 5 view .LVU7940
 29891 005c B2F5704F 		cmp	r2, #61440
5323:src/xeq.c     **** 	State2.wascomplex = 0;
 29892              		.loc 1 5323 7 view .LVU7941
 29893 0060 0B60     		str	r3, [r1]
5324:src/xeq.c     **** 	if (isDBL(op))
 29894              		.loc 1 5324 2 is_stmt 1 view .LVU7942
5325:src/xeq.c     **** 		multi(op);
 29895              		.loc 1 5325 2 view .LVU7943
5325:src/xeq.c     **** 		multi(op);
 29896              		.loc 1 5325 5 is_stmt 0 view .LVU7944
 29897 0062 5FD0     		beq	.L2446
5327:src/xeq.c     **** 		rargs(op);
 29898              		.loc 1 5327 7 is_stmt 1 view .LVU7945
5327:src/xeq.c     **** 		rargs(op);
 29899              		.loc 1 5327 10 is_stmt 0 view .LVU7946
 29900 0064 32BB     		cbnz	r2, .L2447
5330:src/xeq.c     **** 		switch (opKIND(op)) {
 29901              		.loc 1 5330 3 is_stmt 1 view .LVU7947
5330:src/xeq.c     **** 		switch (opKIND(op)) {
 29902              		.loc 1 5330 13 is_stmt 0 view .LVU7948
 29903 0066 A74A     		ldr	r2, .L2476+12
 29904 0068 C5F30723 		ubfx	r3, r5, #8, #8
5330:src/xeq.c     **** 		switch (opKIND(op)) {
 29905              		.loc 1 5330 15 view .LVU7949
 29906 006c 1580     		strh	r5, [r2]	@ movhi
5331:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
 29907              		.loc 1 5331 3 is_stmt 1 view .LVU7950
 29908 006e 062B     		cmp	r3, #6
 29909 0070 00F2A280 		bhi	.L2179
 29910 0074 DFE813F0 		tbh	[pc, r3, lsl #1]
 29911              	.L2181:
 29912 0078 CD01     		.2byte	(.L2187-.L2181)/2
 29913 007a 6A01     		.2byte	(.L2186-.L2181)/2
 29914 007c 9F01     		.2byte	(.L2185-.L2181)/2
 29915 007e 9400     		.2byte	(.L2184-.L2181)/2
 29916 0080 0002     		.2byte	(.L2183-.L2181)/2
 29917 0082 4002     		.2byte	(.L2182-.L2181)/2
 29918 0084 7502     		.2byte	(.L2180-.L2181)/2
 29919              		.p2align 1
 29920              	.L2445:
5305:src/xeq.c     **** 		char buf[16];
 29921              		.loc 1 5305 22 is_stmt 0 discriminator 1 view .LVU7951
 29922 0086 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
5305:src/xeq.c     **** 		char buf[16];
 29923              		.loc 1 5305 19 discriminator 1 view .LVU7952
 29924 0088 9B07     		lsls	r3, r3, #30
 29925 008a DFD4     		bmi	.L2142
 29926              	.LBB4082:
5306:src/xeq.c     **** 		if (Running)
 29927              		.loc 1 5306 3 is_stmt 1 view .LVU7953
ARM GAS  /tmp/ccQlyisH.s 			page 763


5307:src/xeq.c     **** 			print_step(op);
 29928              		.loc 1 5307 3 view .LVU7954
5307:src/xeq.c     **** 			print_step(op);
 29929              		.loc 1 5307 7 is_stmt 0 view .LVU7955
 29930 008c DFF8ACA2 		ldr	r10, .L2476+68
5307:src/xeq.c     **** 			print_step(op);
 29931              		.loc 1 5307 6 view .LVU7956
 29932 0090 DAF80030 		ldr	r3, [r10]
 29933 0094 002B     		cmp	r3, #0
 29934 0096 7FD1     		bne	.L2448
5310:src/xeq.c     **** 		DispMsg = TraceBuffer;
 29935              		.loc 1 5310 4 is_stmt 1 view .LVU7957
 29936 0098 39A9     		add	r1, sp, #228
 29937 009a 2846     		mov	r0, r5
 29938 009c FFF7FEFF 		bl	prt
 29939              	.LVL2319:
 29940 00a0 9949     		ldr	r1, .L2476+16
 29941 00a2 0346     		mov	r3, r0
 29942 00a4 2A46     		mov	r2, r5
 29943 00a6 9948     		ldr	r0, .L2476+20
 29944 00a8 FFF7FEFF 		bl	sprintf
 29945              	.LVL2320:
 29946              	.L2144:
5311:src/xeq.c     **** 	}
 29947              		.loc 1 5311 3 view .LVU7958
5311:src/xeq.c     **** 	}
 29948              		.loc 1 5311 11 is_stmt 0 view .LVU7959
 29949 00ac 984B     		ldr	r3, .L2476+24
 29950 00ae 974A     		ldr	r2, .L2476+20
 29951 00b0 1A60     		str	r2, [r3]
 29952 00b2 CBE7     		b	.L2142
 29953              	.L2447:
5311:src/xeq.c     **** 	}
 29954              		.loc 1 5311 11 view .LVU7960
 29955              	.LBE4082:
5328:src/xeq.c     **** 	else {
 29956              		.loc 1 5328 3 is_stmt 1 view .LVU7961
 29957              	.LVL2321:
 29958              	.LBB4083:
 29959              	.LBI4083:
5147:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
 29960              		.loc 1 5147 13 view .LVU7962
 29961              	.LBB4084:
5148:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 29962              		.loc 1 5148 2 view .LVU7963
5149:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 29963              		.loc 1 5149 2 view .LVU7964
5149:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 29964              		.loc 1 5149 27 is_stmt 0 view .LVU7965
 29965 00b4 4FEA152A 		lsr	r10, r5, #8
5151:src/xeq.c     **** 
 29966              		.loc 1 5151 33 view .LVU7966
 29967 00b8 964B     		ldr	r3, .L2476+28
5153:src/xeq.c     **** 
 29968              		.loc 1 5153 12 view .LVU7967
 29969 00ba 9248     		ldr	r0, .L2476+12
 29970              	.LBB4085:
ARM GAS  /tmp/ccQlyisH.s 			page 764


 29971              	.LBB4086:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29972              		.loc 1 1198 5 view .LVU7968
 29973 00bc 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 29974              	.LBE4086:
 29975              	.LBE4085:
5149:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 29976              		.loc 1 5149 27 view .LVU7969
 29977 00be AAF1200A 		sub	r10, r10, #32
 29978 00c2 5FFA8AFA 		uxtb	r10, r10
 29979              	.LVL2322:
5150:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
 29980              		.loc 1 5150 2 is_stmt 1 view .LVU7970
5151:src/xeq.c     **** 
 29981              		.loc 1 5151 2 view .LVU7971
5151:src/xeq.c     **** 
 29982              		.loc 1 5151 33 is_stmt 0 view .LVU7972
 29983 00c6 03EB0A12 		add	r2, r3, r10, lsl #4
5153:src/xeq.c     **** 
 29984              		.loc 1 5153 14 view .LVU7973
 29985 00ca A0F800A0 		strh	r10, [r0]	@ movhi
5151:src/xeq.c     **** 
 29986              		.loc 1 5151 33 view .LVU7974
 29987 00ce 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 29988 00d0 0592     		str	r2, [sp, #20]
 29989              	.LVL2323:
5153:src/xeq.c     **** 
 29990              		.loc 1 5153 2 is_stmt 1 view .LVU7975
5155:src/xeq.c     **** 
 29991              		.loc 1 5155 2 view .LVU7976
 29992              	.LBB4090:
 29993              	.LBI4085:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 29994              		.loc 1 1195 6 view .LVU7977
 29995              	.LBB4087:
1196:src/xeq.c     **** 
 29996              		.loc 1 1196 2 view .LVU7978
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29997              		.loc 1 1198 2 view .LVU7979
 29998              	.LBE4087:
 29999              	.LBE4090:
5151:src/xeq.c     **** 
 30000              		.loc 1 5151 33 is_stmt 0 view .LVU7980
 30001 00d2 4FEA0A12 		lsl	r2, r10, #4
 30002              	.LBB4091:
 30003              	.LBB4088:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30004              		.loc 1 1198 5 view .LVU7981
 30005 00d6 0029     		cmp	r1, #0
 30006 00d8 40F03281 		bne	.L2449
 30007              	.L2156:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30008              		.loc 1 1198 5 view .LVU7982
 30009              	.LBE4088:
 30010              	.LBE4091:
5157:src/xeq.c     **** 		illegal(op);
 30011              		.loc 1 5157 2 is_stmt 1 view .LVU7983
ARM GAS  /tmp/ccQlyisH.s 			page 765


5157:src/xeq.c     **** 		illegal(op);
 30012              		.loc 1 5157 5 is_stmt 0 view .LVU7984
 30013 00dc BAF18E0F 		cmp	r10, #142
 30014 00e0 6AD8     		bhi	.L2179
5161:src/xeq.c     **** 		set_lift();
 30015              		.loc 1 5161 2 is_stmt 1 view .LVU7985
5161:src/xeq.c     **** 		set_lift();
 30016              		.loc 1 5161 6 is_stmt 0 view .LVU7986
 30017 00e2 9958     		ldr	r1, [r3, r2]
 30018 00e4 0891     		str	r1, [sp, #32]
 30019 00e6 9818     		adds	r0, r3, r2
5161:src/xeq.c     **** 		set_lift();
 30020              		.loc 1 5161 5 view .LVU7987
 30021 00e8 0029     		cmp	r1, #0
 30022 00ea 44D0     		beq	.L2421
5148:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 30023              		.loc 1 5148 15 view .LVU7988
 30024 00ec 05F07F01 		and	r1, r5, #127
5166:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30025              		.loc 1 5166 2 is_stmt 1 view .LVU7989
5166:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30026              		.loc 1 5166 5 is_stmt 0 view .LVU7990
 30027 00f0 2D06     		lsls	r5, r5, #24
 30028              	.LVL2324:
5166:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30029              		.loc 1 5166 5 view .LVU7991
 30030 00f2 40F1C882 		bpl	.L2160
5167:src/xeq.c     **** 			// Get the argument by reading a register
 30031              		.loc 1 5167 3 is_stmt 1 view .LVU7992
5167:src/xeq.c     **** 			// Get the argument by reading a register
 30032              		.loc 1 5167 19 is_stmt 0 view .LVU7993
 30033 00f6 4579     		ldrb	r5, [r0, #5]	@ zero_extendqisi2
5167:src/xeq.c     **** 			// Get the argument by reading a register
 30034              		.loc 1 5167 6 view .LVU7994
 30035 00f8 E807     		lsls	r0, r5, #31
 30036 00fa 40F13583 		bpl	.L2161
 30037              	.LBB4092:
5169:src/xeq.c     **** 			unsigned long long int regval;
 30038              		.loc 1 5169 4 is_stmt 1 view .LVU7995
5170:src/xeq.c     **** 
 30039              		.loc 1 5170 4 view .LVU7996
5172:src/xeq.c     **** 				// Invalid register specified for indirect access
 30040              		.loc 1 5172 4 view .LVU7997
5172:src/xeq.c     **** 				// Invalid register specified for indirect access
 30041              		.loc 1 5172 14 is_stmt 0 view .LVU7998
 30042 00fe 0A20     		movs	r0, #10
 30043 0100 0992     		str	r2, [sp, #36]
 30044 0102 0691     		str	r1, [sp, #24]
 30045 0104 FFF7FEFF 		bl	get_reg_limit
 30046              	.LVL2325:
5172:src/xeq.c     **** 				// Invalid register specified for indirect access
 30047              		.loc 1 5172 7 view .LVU7999
 30048 0108 0699     		ldr	r1, [sp, #24]
 30049 010a 099A     		ldr	r2, [sp, #36]
 30050 010c 8142     		cmp	r1, r0
 30051 010e 40F2A582 		bls	.L2162
5174:src/xeq.c     **** 				return;
ARM GAS  /tmp/ccQlyisH.s 			page 766


 30052              		.loc 1 5174 5 is_stmt 1 view .LVU8000
 30053              	.LVL2326:
 30054              	.LBB4093:
 30055              	.LBI4093:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30056              		.loc 1 537 5 view .LVU8001
 30057              	.LBB4094:
 538:src/xeq.c     **** 		Error = e;
 30058              		.loc 1 538 2 view .LVU8002
 538:src/xeq.c     **** 		Error = e;
 30059              		.loc 1 538 12 is_stmt 0 view .LVU8003
 30060 0112 814B     		ldr	r3, .L2476+32
 30061 0114 1A68     		ldr	r2, [r3]
 538:src/xeq.c     **** 		Error = e;
 30062              		.loc 1 538 5 view .LVU8004
 30063 0116 0AB9     		cbnz	r2, .L2164
 30064              	.LVL2327:
 30065              	.LBB4095:
 30066              	.LBI4095:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30067              		.loc 1 537 5 is_stmt 1 view .LVU8005
 30068              	.LBB4096:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 30069              		.loc 1 539 3 view .LVU8006
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 30070              		.loc 1 539 9 is_stmt 0 view .LVU8007
 30071 0118 0822     		movs	r2, #8
 30072 011a 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 30073              		.loc 1 540 3 is_stmt 1 view .LVU8008
 30074              	.LVL2328:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 30075              		.loc 1 540 3 is_stmt 0 view .LVU8009
 30076              	.LBE4096:
 30077              	.LBE4095:
 30078              	.LBE4094:
 30079              	.LBE4093:
5175:src/xeq.c     **** 			}
 30080              		.loc 1 5175 5 is_stmt 1 view .LVU8010
5175:src/xeq.c     **** 			}
 30081              		.loc 1 5175 5 is_stmt 0 view .LVU8011
 30082              	.LBE4092:
 30083              	.LBE4084:
 30084              	.LBE4083:
5339:src/xeq.c     **** 		}
 30085              		.loc 1 5339 12 is_stmt 1 view .LVU8012
5349:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30086              		.loc 1 5349 2 view .LVU8013
 30087              	.L2164:
5349:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30088              		.loc 1 5349 2 is_stmt 0 view .LVU8014
 30089 011c DFF81CA2 		ldr	r10, .L2476+68
 30090 0120 1046     		mov	r0, r2
 30091 0122 52E0     		b	.L2283
 30092              	.LVL2329:
 30093              	.L2446:
5326:src/xeq.c     **** 	else if (isRARG(op))
ARM GAS  /tmp/ccQlyisH.s 			page 767


 30094              		.loc 1 5326 3 is_stmt 1 view .LVU8015
 30095              	.LBB4123:
 30096              	.LBI4123:
5243:src/xeq.c     **** 	const int cmd = opDBL(op);
 30097              		.loc 1 5243 13 view .LVU8016
 30098              	.LBB4124:
5244:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 30099              		.loc 1 5244 2 view .LVU8017
5245:src/xeq.c     **** 
 30100              		.loc 1 5245 12 is_stmt 0 view .LVU8018
 30101 0124 774A     		ldr	r2, .L2476+12
 30102              	.LBB4125:
 30103              	.LBB4126:
 30104              	.LBB4127:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30105              		.loc 1 1198 5 view .LVU8019
 30106 0126 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30107              	.LBE4127:
 30108              	.LBE4126:
 30109              	.LBE4125:
5244:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 30110              		.loc 1 5244 12 view .LVU8020
 30111 0128 C5F3032A 		ubfx	r10, r5, #8, #4
 30112              	.LVL2330:
5245:src/xeq.c     **** 
 30113              		.loc 1 5245 2 is_stmt 1 view .LVU8021
5245:src/xeq.c     **** 
 30114              		.loc 1 5245 14 is_stmt 0 view .LVU8022
 30115 012c A2F800A0 		strh	r10, [r2]	@ movhi
5247:src/xeq.c     **** 
 30116              		.loc 1 5247 2 is_stmt 1 view .LVU8023
 30117              	.LBB4136:
 30118              	.LBI4125:
1301:src/xeq.c     **** 	process_cmdline();
 30119              		.loc 1 1301 6 view .LVU8024
 30120              	.LBE4136:
 30121              	.LBE4124:
 30122              	.LBE4123:
1302:src/xeq.c     **** 	set_lift();
 30123              		.loc 1 1302 2 view .LVU8025
 30124              	.LBB4160:
 30125              	.LBB4155:
 30126              	.LBB4137:
 30127              	.LBB4130:
 30128              	.LBI4126:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 30129              		.loc 1 1195 6 view .LVU8026
 30130              	.LBB4128:
1196:src/xeq.c     **** 
 30131              		.loc 1 1196 2 view .LVU8027
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30132              		.loc 1 1198 2 view .LVU8028
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30133              		.loc 1 1198 5 is_stmt 0 view .LVU8029
 30134 0130 002B     		cmp	r3, #0
 30135 0132 40F05082 		bne	.L2450
 30136              	.L2146:
ARM GAS  /tmp/ccQlyisH.s 			page 768


1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30137              		.loc 1 1198 5 view .LVU8030
 30138              	.LBE4128:
 30139              	.LBE4130:
 30140              	.LBE4137:
 30141              	.LBE4155:
 30142              	.LBE4160:
1303:src/xeq.c     **** }
 30143              		.loc 1 1303 2 is_stmt 1 view .LVU8031
 30144              	.LBB4161:
 30145              	.LBB4156:
 30146              	.LBB4138:
 30147              	.LBB4131:
 30148              	.LBI4131:
 758:src/xeq.c     ****     State2.state_lift = 1;
 30149              		.loc 1 758 6 view .LVU8032
 30150              	.LBB4132:
 759:src/xeq.c     **** }
 30151              		.loc 1 759 5 view .LVU8033
 759:src/xeq.c     **** }
 30152              		.loc 1 759 23 is_stmt 0 view .LVU8034
 30153 0136 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30154              	.LBE4132:
 30155              	.LBE4131:
 30156              	.LBE4138:
5249:src/xeq.c     **** 		illegal(op);
 30157              		.loc 1 5249 5 view .LVU8035
 30158 0138 BAF10A0F 		cmp	r10, #10
 30159              	.LBB4139:
 30160              	.LBB4134:
 30161              	.LBB4133:
 759:src/xeq.c     **** }
 30162              		.loc 1 759 23 view .LVU8036
 30163 013c 43F04003 		orr	r3, r3, #64
 30164 0140 E375     		strb	r3, [r4, #23]
 30165              	.LBE4133:
 30166              	.LBE4134:
 30167              	.LBE4139:
5249:src/xeq.c     **** 		illegal(op);
 30168              		.loc 1 5249 2 is_stmt 1 view .LVU8037
5249:src/xeq.c     **** 		illegal(op);
 30169              		.loc 1 5249 5 is_stmt 0 view .LVU8038
 30170 0142 00F34082 		bgt	.L2451
5253:src/xeq.c     **** 		return;
 30171              		.loc 1 5253 2 is_stmt 1 view .LVU8039
5253:src/xeq.c     **** 		return;
 30172              		.loc 1 5253 6 is_stmt 0 view .LVU8040
 30173 0146 754A     		ldr	r2, .L2476+36
 30174 0148 4FEA0A13 		lsl	r3, r10, #4
 30175 014c D258     		ldr	r2, [r2, r3]
5253:src/xeq.c     **** 		return;
 30176              		.loc 1 5253 5 view .LVU8041
 30177 014e 002A     		cmp	r2, #0
 30178 0150 00F08182 		beq	.L2150
 30179              	.LBB4140:
5256:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 30180              		.loc 1 5256 3 is_stmt 1 view .LVU8042
ARM GAS  /tmp/ccQlyisH.s 			page 769


 30181              	.LVL2331:
5257:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 30182              		.loc 1 5257 3 view .LVU8043
 30183              	.LBB4141:
 30184              	.LBI4141:
4461:src/xeq.c     **** {
 30185              		.loc 1 4461 24 view .LVU8044
 30186              	.LBB4142:
4463:src/xeq.c     **** 	if (xp < xrom)
 30187              		.loc 1 4463 2 view .LVU8045
4464:src/xeq.c     **** 		return NULL;
 30188              		.loc 1 4464 5 is_stmt 0 view .LVU8046
 30189 0154 724B     		ldr	r3, .L2476+40
4463:src/xeq.c     **** 	if (xp < xrom)
 30190              		.loc 1 4463 59 view .LVU8047
 30191 0156 22F00101 		bic	r1, r2, #1
 30192              	.LVL2332:
4464:src/xeq.c     **** 		return NULL;
 30193              		.loc 1 4464 2 is_stmt 1 view .LVU8048
4464:src/xeq.c     **** 		return NULL;
 30194              		.loc 1 4464 5 is_stmt 0 view .LVU8049
 30195 015a 9942     		cmp	r1, r3
 30196 015c 08D3     		bcc	.L2151
4468:src/xeq.c     **** 		return NULL;
 30197              		.loc 1 4468 2 is_stmt 1 view .LVU8050
4468:src/xeq.c     **** 		return NULL;
 30198              		.loc 1 4468 17 is_stmt 0 view .LVU8051
 30199 015e 7148     		ldr	r0, .L2476+44
 30200 0160 0088     		ldrh	r0, [r0]
 30201 0162 03EB4003 		add	r3, r3, r0, lsl #1
4468:src/xeq.c     **** 		return NULL;
 30202              		.loc 1 4468 5 view .LVU8052
 30203 0166 9942     		cmp	r1, r3
 30204 0168 02D2     		bcs	.L2151
 30205              	.LVL2333:
4468:src/xeq.c     **** 		return NULL;
 30206              		.loc 1 4468 5 view .LVU8053
 30207              	.LBE4142:
 30208              	.LBE4141:
5257:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 30209              		.loc 1 5257 6 view .LVU8054
 30210 016a 0029     		cmp	r1, #0
 30211 016c 40F05783 		bne	.L2452
 30212              	.L2151:
5267:src/xeq.c     **** 			set_lift();
 30213              		.loc 1 5267 4 is_stmt 1 view .LVU8055
 30214 0170 5146     		mov	r1, r10
 30215 0172 2846     		mov	r0, r5
 30216 0174 9047     		blx	r2
 30217              	.LVL2334:
5268:src/xeq.c     **** 		}
 30218              		.loc 1 5268 4 view .LVU8056
 30219              	.LBB4143:
 30220              	.LBI4143:
 758:src/xeq.c     ****     State2.state_lift = 1;
 30221              		.loc 1 758 6 view .LVU8057
 30222              	.LBB4144:
ARM GAS  /tmp/ccQlyisH.s 			page 770


 759:src/xeq.c     **** }
 30223              		.loc 1 759 5 view .LVU8058
 30224              	.L2421:
 759:src/xeq.c     **** }
 30225              		.loc 1 759 5 is_stmt 0 view .LVU8059
 30226              	.LBE4144:
 30227              	.LBE4143:
 30228              	.LBE4140:
 30229              	.LBE4156:
 30230              	.LBE4161:
 30231              	.LBB4162:
 30232              	.LBB4163:
 30233              	.LBB4164:
3974:src/xeq.c     **** 		}
 30234              		.loc 1 3974 4 is_stmt 1 view .LVU8060
 30235              	.LBB4165:
 30236              	.LBI4165:
 758:src/xeq.c     ****     State2.state_lift = 1;
 30237              		.loc 1 758 6 view .LVU8061
 30238              	.LBB4166:
 759:src/xeq.c     **** }
 30239              		.loc 1 759 5 view .LVU8062
 759:src/xeq.c     **** }
 30240              		.loc 1 759 23 is_stmt 0 view .LVU8063
 30241 0176 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 30242 0178 674B     		ldr	r3, .L2476+32
 30243 017a 42F04002 		orr	r2, r2, #64
 30244 017e E275     		strb	r2, [r4, #23]
 30245 0180 1A68     		ldr	r2, [r3]
 30246              	.L2153:
 30247              	.LBE4166:
 30248              	.LBE4165:
 30249              	.LBE4164:
 30250              	.LBE4163:
 30251              	.LBE4162:
5339:src/xeq.c     **** 		}
 30252              		.loc 1 5339 12 is_stmt 1 discriminator 1 view .LVU8064
5349:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30253              		.loc 1 5349 2 discriminator 1 view .LVU8065
5349:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30254              		.loc 1 5349 5 is_stmt 0 discriminator 1 view .LVU8066
 30255 0182 002A     		cmp	r2, #0
 30256 0184 CAD1     		bne	.L2164
 30257              	.LVL2335:
 30258              	.L2269:
5418:src/xeq.c     **** #ifdef INFRARED
 30259              		.loc 1 5418 2 is_stmt 1 view .LVU8067
 30260              	.LBB4231:
 30261              	.LBI4231:
4415:src/xeq.c     **** 	// extern int IntMaxWindow;
 30262              		.loc 1 4415 6 view .LVU8068
 30263              	.LBB4232:
4418:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30264              		.loc 1 4418 2 view .LVU8069
4418:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30265              		.loc 1 4418 16 is_stmt 0 view .LVU8070
 30266 0186 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
ARM GAS  /tmp/ccQlyisH.s 			page 771


4419:src/xeq.c     **** }
 30267              		.loc 1 4419 15 view .LVU8071
 30268 0188 0022     		movs	r2, #0
4418:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30269              		.loc 1 4418 16 view .LVU8072
 30270 018a 6FF3C503 		bfc	r3, #3, #3
 30271 018e 2375     		strb	r3, [r4, #20]
4419:src/xeq.c     **** }
 30272              		.loc 1 4419 2 is_stmt 1 view .LVU8073
4419:src/xeq.c     **** }
 30273              		.loc 1 4419 15 is_stmt 0 view .LVU8074
 30274 0190 6274     		strb	r2, [r4, #17]
 30275              	.LBE4232:
 30276              	.LBE4231:
5423:src/xeq.c     **** 
 30277              		.loc 1 5423 1 view .LVU8075
 30278 0192 6BB0     		add	sp, sp, #428
 30279              		.cfi_remember_state
 30280              		.cfi_def_cfa_offset 36
 30281              		@ sp needed
 30282 0194 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 30283              	.LVL2336:
 30284              	.L2448:
 30285              		.cfi_restore_state
 30286              	.LBB4233:
5308:src/xeq.c     **** 		else
 30287              		.loc 1 5308 4 is_stmt 1 view .LVU8076
 30288 0198 2846     		mov	r0, r5
 30289 019a FFF7FEFF 		bl	print_step
 30290              	.LVL2337:
 30291 019e 85E7     		b	.L2144
 30292              	.L2184:
5308:src/xeq.c     **** 		else
 30293              		.loc 1 5308 4 is_stmt 0 view .LVU8077
 30294              	.LBE4233:
5335:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
 30295              		.loc 1 5335 18 is_stmt 1 view .LVU8078
 30296              	.LVL2338:
 30297              	.LBB4234:
 30298              	.LBI4234:
4702:src/xeq.c     **** 
 30299              		.loc 1 4702 13 view .LVU8079
 30300              	.LBB4235:
4704:src/xeq.c     **** 	process_cmdline_set_lift();
 30301              		.loc 1 4704 2 view .LVU8080
4705:src/xeq.c     **** 
 30302              		.loc 1 4705 2 view .LVU8081
 30303              	.LBB4236:
 30304              	.LBI4236:
1301:src/xeq.c     **** 	process_cmdline();
 30305              		.loc 1 1301 6 view .LVU8082
 30306              	.LBE4236:
 30307              	.LBE4235:
 30308              	.LBE4234:
1302:src/xeq.c     **** 	set_lift();
 30309              		.loc 1 1302 2 view .LVU8083
 30310              	.LBB4284:
ARM GAS  /tmp/ccQlyisH.s 			page 772


 30311              	.LBB4277:
 30312              	.LBB4245:
 30313              	.LBB4237:
 30314              	.LBI4237:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 30315              		.loc 1 1195 6 view .LVU8084
 30316              	.LBB4238:
1196:src/xeq.c     **** 
 30317              		.loc 1 1196 2 view .LVU8085
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30318              		.loc 1 1198 2 view .LVU8086
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30319              		.loc 1 1198 5 is_stmt 0 view .LVU8087
 30320 01a0 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30321 01a2 0BB1     		cbz	r3, .L2243
 30322 01a4 FFF7FEFF 		bl	process_cmdline.part.0
 30323              	.LVL2339:
 30324              	.L2243:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30325              		.loc 1 1198 5 view .LVU8088
 30326              	.LBE4238:
 30327              	.LBE4237:
 30328              	.LBE4245:
 30329              	.LBE4277:
 30330              	.LBE4284:
1303:src/xeq.c     **** }
 30331              		.loc 1 1303 2 is_stmt 1 view .LVU8089
 30332              	.LBB4285:
 30333              	.LBB4278:
 30334              	.LBB4246:
 30335              	.LBB4239:
 30336              	.LBI4239:
 758:src/xeq.c     ****     State2.state_lift = 1;
 30337              		.loc 1 758 6 view .LVU8090
 30338              	.LBB4240:
 759:src/xeq.c     **** }
 30339              		.loc 1 759 5 view .LVU8091
 759:src/xeq.c     **** }
 30340              		.loc 1 759 23 is_stmt 0 view .LVU8092
 30341 01a8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30342              	.LBE4240:
 30343              	.LBE4239:
 30344              	.LBE4246:
4707:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30345              		.loc 1 4707 4 view .LVU8093
 30346 01aa EDB2     		uxtb	r5, r5
 30347              	.LVL2340:
 30348              	.LBB4247:
 30349              	.LBB4243:
 30350              	.LBB4241:
 759:src/xeq.c     **** }
 30351              		.loc 1 759 23 view .LVU8094
 30352 01ac 43F04003 		orr	r3, r3, #64
 30353              	.LBE4241:
 30354              	.LBE4243:
 30355              	.LBE4247:
4708:src/xeq.c     **** 		if (is_intmode()) {
ARM GAS  /tmp/ccQlyisH.s 			page 773


 30356              		.loc 1 4708 5 view .LVU8095
 30357 01b0 342D     		cmp	r5, #52
 30358              	.LBB4248:
 30359              	.LBB4244:
 30360              	.LBB4242:
 759:src/xeq.c     **** }
 30361              		.loc 1 759 23 view .LVU8096
 30362 01b2 E375     		strb	r3, [r4, #23]
 30363              	.LBE4242:
 30364              	.LBE4244:
 30365              	.LBE4248:
4707:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30366              		.loc 1 4707 2 is_stmt 1 view .LVU8097
 30367              	.LVL2341:
4708:src/xeq.c     **** 		if (is_intmode()) {
 30368              		.loc 1 4708 2 view .LVU8098
4708:src/xeq.c     **** 		if (is_intmode()) {
 30369              		.loc 1 4708 5 is_stmt 0 view .LVU8099
 30370 01b4 40F2DB82 		bls	.L2453
 30371              	.LVL2342:
 30372              	.L2179:
4708:src/xeq.c     **** 		if (is_intmode()) {
 30373              		.loc 1 4708 5 view .LVU8100
 30374              	.LBE4278:
 30375              	.LBE4285:
5339:src/xeq.c     **** 		}
 30376              		.loc 1 5339 12 is_stmt 1 view .LVU8101
5339:src/xeq.c     **** 		}
 30377              		.loc 1 5339 12 view .LVU8102
 30378              	.LBB4286:
 30379              	.LBI4286:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30380              		.loc 1 537 5 view .LVU8103
 30381              	.LBB4287:
 538:src/xeq.c     **** 		Error = e;
 30382              		.loc 1 538 2 view .LVU8104
 538:src/xeq.c     **** 		Error = e;
 30383              		.loc 1 538 12 is_stmt 0 view .LVU8105
 30384 01b8 574B     		ldr	r3, .L2476+32
 30385 01ba 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 30386              		.loc 1 538 5 view .LVU8106
 30387 01bc 0028     		cmp	r0, #0
 30388 01be 40F03482 		bne	.L2430
 30389 01c2 DFF878A1 		ldr	r10, .L2476+68
 30390              	.LVL2343:
 30391              	.L2158:
 538:src/xeq.c     **** 		Error = e;
 30392              		.loc 1 538 5 view .LVU8107
 30393              	.LBE4287:
 30394              	.LBE4286:
 30395              	.LBB4288:
 30396              	.LBB4157:
 30397              	.LBB4147:
 30398              	.LBB4148:
 30399              	.LBB4149:
 30400              	.LBI4149:
ARM GAS  /tmp/ccQlyisH.s 			page 774


 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30401              		.loc 1 537 5 is_stmt 1 view .LVU8108
 30402              	.LBB4150:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 30403              		.loc 1 539 3 view .LVU8109
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 30404              		.loc 1 539 9 is_stmt 0 view .LVU8110
 30405 01c6 0320     		movs	r0, #3
 30406 01c8 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 30407              		.loc 1 540 3 is_stmt 1 view .LVU8111
 30408              	.LVL2344:
 30409              	.L2283:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 30410              		.loc 1 540 3 is_stmt 0 view .LVU8112
 30411              	.LBE4150:
 30412              	.LBE4149:
 30413              	.LBE4148:
 30414              	.LBE4147:
 30415              	.LBE4157:
 30416              	.LBE4288:
5351:src/xeq.c     **** 		// Repair stack and state
 30417              		.loc 1 5351 3 is_stmt 1 view .LVU8113
 30418 01ca 0593     		str	r3, [sp, #20]
 30419 01cc FFF7FEFF 		bl	error_message
 30420              	.LVL2345:
5354:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
 30421              		.loc 1 5354 3 view .LVU8114
 30422 01d0 42A9     		add	r1, sp, #264
 30423 01d2 A022     		movs	r2, #160
 30424 01d4 D8F80000 		ldr	r0, [r8]
 30425 01d8 FFF7FEFF 		bl	xcopy
 30426              	.LVL2346:
5355:src/xeq.c     **** 		UState = old;
 30427              		.loc 1 5355 3 view .LVU8115
5356:src/xeq.c     **** 		State2.state_lift = lift;
 30428              		.loc 1 5356 10 is_stmt 0 view .LVU8116
 30429 01dc 96E80300 		ldm	r6, {r0, r1}
5355:src/xeq.c     **** 		UState = old;
 30430              		.loc 1 5355 3 view .LVU8117
 30431 01e0 3A68     		ldr	r2, [r7]
5355:src/xeq.c     **** 		UState = old;
 30432              		.loc 1 5355 28 view .LVU8118
 30433 01e2 039B     		ldr	r3, [sp, #12]
 30434 01e4 A2F8FC37 		strh	r3, [r2, #2044]	@ movhi
5356:src/xeq.c     **** 		State2.state_lift = lift;
 30435              		.loc 1 5356 3 is_stmt 1 view .LVU8119
5356:src/xeq.c     **** 		State2.state_lift = lift;
 30436              		.loc 1 5356 10 is_stmt 0 view .LVU8120
 30437 01e8 02F2E475 		addw	r5, r2, #2020
 30438 01ec 85E80300 		stm	r5, {r0, r1}
5357:src/xeq.c     **** 		raw_set_pc(old_pc);
 30439              		.loc 1 5357 3 is_stmt 1 view .LVU8121
5357:src/xeq.c     **** 		raw_set_pc(old_pc);
 30440              		.loc 1 5357 21 is_stmt 0 view .LVU8122
 30441 01f0 049B     		ldr	r3, [sp, #16]
 30442 01f2 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
ARM GAS  /tmp/ccQlyisH.s 			page 775


 30443 01f4 63F38611 		bfi	r1, r3, #6, #1
 30444 01f8 E175     		strb	r1, [r4, #23]
5358:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
 30445              		.loc 1 5358 3 is_stmt 1 view .LVU8123
 30446              	.LVL2347:
 30447              	.LBB4289:
 30448              	.LBI4289:
 279:src/xeq.c     **** 	State.pc = pc;
 30449              		.loc 1 279 13 view .LVU8124
 30450              	.LBB4290:
 280:src/xeq.c     **** 	update_program_bounds(0);
 30451              		.loc 1 280 2 view .LVU8125
 281:src/xeq.c     **** }
 30452              		.loc 1 281 2 is_stmt 0 view .LVU8126
 30453 01fa 0020     		movs	r0, #0
 280:src/xeq.c     **** 	update_program_bounds(0);
 30454              		.loc 1 280 11 view .LVU8127
 30455 01fc A2F8E0B7 		strh	fp, [r2, #2016]	@ movhi
 281:src/xeq.c     **** }
 30456              		.loc 1 281 2 is_stmt 1 view .LVU8128
 30457 0200 FFF7FEFF 		bl	update_program_bounds
 30458              	.LVL2348:
 281:src/xeq.c     **** }
 30459              		.loc 1 281 2 is_stmt 0 view .LVU8129
 30460              	.LBE4290:
 30461              	.LBE4289:
5359:src/xeq.c     **** 		process_cmdline_set_lift();
 30462              		.loc 1 5359 3 is_stmt 1 view .LVU8130
 30463              	.LBB4291:
 30464              	.LBB4292:
 30465              	.LBB4293:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30466              		.loc 1 1198 5 is_stmt 0 view .LVU8131
 30467 0204 19F0FF0F 		tst	r9, #255
 30468 0208 059B     		ldr	r3, [sp, #20]
 30469              	.LBE4293:
 30470              	.LBE4292:
 30471              	.LBE4291:
5359:src/xeq.c     **** 		process_cmdline_set_lift();
 30472              		.loc 1 5359 26 view .LVU8132
 30473 020a C4F81C90 		str	r9, [r4, #28]
5360:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
 30474              		.loc 1 5360 3 is_stmt 1 view .LVU8133
 30475              	.LBB4304:
 30476              	.LBI4291:
1301:src/xeq.c     **** 	process_cmdline();
 30477              		.loc 1 1301 6 view .LVU8134
 30478              	.LBE4304:
1302:src/xeq.c     **** 	set_lift();
 30479              		.loc 1 1302 2 view .LVU8135
 30480              	.LBB4305:
 30481              	.LBB4296:
 30482              	.LBI4292:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 30483              		.loc 1 1195 6 view .LVU8136
 30484              	.LBB4294:
1196:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 776


 30485              		.loc 1 1196 2 view .LVU8137
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30486              		.loc 1 1198 2 view .LVU8138
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30487              		.loc 1 1198 5 is_stmt 0 view .LVU8139
 30488 020e 40F05182 		bne	.L2454
 30489              	.LVL2349:
 30490              	.L2270:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30491              		.loc 1 1198 5 view .LVU8140
 30492              	.LBE4294:
 30493              	.LBE4296:
 30494              	.LBE4305:
1303:src/xeq.c     **** }
 30495              		.loc 1 1303 2 is_stmt 1 view .LVU8141
 30496              	.LBB4306:
 30497              	.LBB4297:
 30498              	.LBI4297:
 758:src/xeq.c     ****     State2.state_lift = 1;
 30499              		.loc 1 758 6 view .LVU8142
 30500              	.LBB4298:
 759:src/xeq.c     **** }
 30501              		.loc 1 759 5 view .LVU8143
 30502              	.LBE4298:
 30503              	.LBE4297:
 30504              	.LBE4306:
5364:src/xeq.c     **** #ifndef REALBUILD
 30505              		.loc 1 5364 15 is_stmt 0 view .LVU8144
 30506 0212 4549     		ldr	r1, .L2476+48
 30507              	.LBB4307:
 30508              	.LBB4301:
 30509              	.LBB4299:
 759:src/xeq.c     **** }
 30510              		.loc 1 759 23 view .LVU8145
 30511 0214 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 30512              	.LBE4299:
 30513              	.LBE4301:
 30514              	.LBE4307:
5364:src/xeq.c     **** #ifndef REALBUILD
 30515              		.loc 1 5364 15 view .LVU8146
 30516 0216 0D68     		ldr	r5, [r1]
 30517 0218 DAF80010 		ldr	r1, [r10]
 30518              	.LBB4308:
 30519              	.LBB4302:
 30520              	.LBB4300:
 759:src/xeq.c     **** }
 30521              		.loc 1 759 23 view .LVU8147
 30522 021c 42F04002 		orr	r2, r2, #64
 30523 0220 E275     		strb	r2, [r4, #23]
 30524              	.LBE4300:
 30525              	.LBE4302:
 30526              	.LBE4308:
5363:src/xeq.c     **** 		if (Running || XromRunning) {
 30527              		.loc 1 5363 3 is_stmt 1 view .LVU8148
5363:src/xeq.c     **** 		if (Running || XromRunning) {
 30528              		.loc 1 5363 9 is_stmt 0 view .LVU8149
 30529 0222 0020     		movs	r0, #0
ARM GAS  /tmp/ccQlyisH.s 			page 777


5364:src/xeq.c     **** #ifndef REALBUILD
 30530              		.loc 1 5364 15 view .LVU8150
 30531 0224 51EA0502 		orrs	r2, r1, r5
5363:src/xeq.c     **** 		if (Running || XromRunning) {
 30532              		.loc 1 5363 9 view .LVU8151
 30533 0228 1860     		str	r0, [r3]
5364:src/xeq.c     **** #ifndef REALBUILD
 30534              		.loc 1 5364 3 is_stmt 1 view .LVU8152
5364:src/xeq.c     **** #ifndef REALBUILD
 30535              		.loc 1 5364 15 is_stmt 0 view .LVU8153
 30536 022a ACD0     		beq	.L2269
5366:src/xeq.c     **** 				// Special handling for debug environment
 30537              		.loc 1 5366 4 is_stmt 1 view .LVU8154
5366:src/xeq.c     **** 				// Special handling for debug environment
 30538              		.loc 1 5366 7 is_stmt 0 view .LVU8155
 30539 022c 94F91720 		ldrsb	r2, [r4, #23]
 30540 0230 8242     		cmp	r2, r0
 30541 0232 C0F24482 		blt	.L2455
 30542              	.LBB4309:
5388:src/xeq.c     **** 				if (XromFlags.xIN) {
 30543              		.loc 1 5388 5 is_stmt 1 view .LVU8156
5389:src/xeq.c     **** 					// Restore state to before xIN
 30544              		.loc 1 5389 9 is_stmt 0 view .LVU8157
 30545 0236 3D4E     		ldr	r6, .L2476+52
5388:src/xeq.c     **** 				if (XromFlags.xIN) {
 30546              		.loc 1 5388 29 view .LVU8158
 30547 0238 3968     		ldr	r1, [r7]
5389:src/xeq.c     **** 					// Restore state to before xIN
 30548              		.loc 1 5389 8 view .LVU8159
 30549 023a 96F90120 		ldrsb	r2, [r6, #1]
5388:src/xeq.c     **** 				if (XromFlags.xIN) {
 30550              		.loc 1 5388 24 view .LVU8160
 30551 023e B1F8E037 		ldrh	r3, [r1, #2016]
 30552              	.LVL2350:
5389:src/xeq.c     **** 					// Restore state to before xIN
 30553              		.loc 1 5389 5 is_stmt 1 view .LVU8161
5389:src/xeq.c     **** 					// Restore state to before xIN
 30554              		.loc 1 5389 8 is_stmt 0 view .LVU8162
 30555 0242 002A     		cmp	r2, #0
 30556 0244 22DA     		bge	.L2278
5391:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30557              		.loc 1 5391 6 is_stmt 1 view .LVU8163
5391:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30558              		.loc 1 5391 20 is_stmt 0 view .LVU8164
 30559 0246 96F801C0 		ldrb	ip, [r6, #1]	@ zero_extendqisi2
5393:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30560              		.loc 1 5393 18 view .LVU8165
 30561 024a D1F8E857 		ldr	r5, [r1, #2024]
5396:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30562              		.loc 1 5396 13 view .LVU8166
 30563 024e D6F808E0 		ldr	lr, [r6, #8]
5391:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30564              		.loc 1 5391 20 view .LVU8167
 30565 0252 60F3C71C 		bfi	ip, r0, #7, #1
5393:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30566              		.loc 1 5393 18 view .LVU8168
 30567 0256 CCF3C000 		ubfx	r0, ip, #3, #1
ARM GAS  /tmp/ccQlyisH.s 			page 778


 30568 025a 0CF00102 		and	r2, ip, #1
 30569 025e 42EA8032 		orr	r2, r2, r0, lsl #14
 30570 0262 CCF38000 		ubfx	r0, ip, #2, #1
 30571 0266 42EAC042 		orr	r2, r2, r0, lsl #19
 30572 026a 3148     		ldr	r0, .L2476+56
5391:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30573              		.loc 1 5391 20 view .LVU8169
 30574 026c 86F801C0 		strb	ip, [r6, #1]
5392:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
 30575              		.loc 1 5392 6 is_stmt 1 view .LVU8170
5393:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30576              		.loc 1 5393 6 view .LVU8171
5394:src/xeq.c     **** 					// Restore the global return stack
 30577              		.loc 1 5394 6 view .LVU8172
5393:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30578              		.loc 1 5393 18 is_stmt 0 view .LVU8173
 30579 0270 25F40425 		bic	r5, r5, #540672
 30580 0274 0240     		ands	r2, r2, r0
 30581 0276 25F00105 		bic	r5, r5, #1
5396:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30582              		.loc 1 5396 13 view .LVU8174
 30583 027a 2E48     		ldr	r0, .L2476+60
5397:src/xeq.c     **** 				}
 30584              		.loc 1 5397 16 view .LVU8175
 30585 027c B689     		ldrh	r6, [r6, #12]
5396:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30586              		.loc 1 5396 13 view .LVU8176
 30587 027e C0F800E0 		str	lr, [r0]
5393:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30588              		.loc 1 5393 18 view .LVU8177
 30589 0282 2A43     		orrs	r2, r2, r5
 30590 0284 C1F8E827 		str	r2, [r1, #2024]
5396:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30591              		.loc 1 5396 6 is_stmt 1 view .LVU8178
5397:src/xeq.c     **** 				}
 30592              		.loc 1 5397 6 view .LVU8179
5397:src/xeq.c     **** 				}
 30593              		.loc 1 5397 16 is_stmt 0 view .LVU8180
 30594 0288 A1F8E267 		strh	r6, [r1, #2018]	@ movhi
 30595              	.L2278:
5399:src/xeq.c     **** 					// Leave XROM
 30596              		.loc 1 5399 11 is_stmt 1 view .LVU8181
 30597 028c 9A0B     		lsrs	r2, r3, #14
 30598 028e 032A     		cmp	r2, #3
 30599 0290 1AD1     		bne	.L2279
5403:src/xeq.c     **** 					}
 30600              		.loc 1 5403 10 is_stmt 0 view .LVU8182
 30601 0292 284E     		ldr	r6, .L2476+60
5403:src/xeq.c     **** 					}
 30602              		.loc 1 5403 18 view .LVU8183
 30603 0294 6FF00045 		mvn	r5, #-2147483648
 30604 0298 04E0     		b	.L2282
 30605              	.L2280:
5406:src/xeq.c     **** 				}
 30606              		.loc 1 5406 7 is_stmt 1 view .LVU8184
 30607 029a 0133     		adds	r3, r3, #1
 30608              	.LVL2351:
ARM GAS  /tmp/ccQlyisH.s 			page 779


5406:src/xeq.c     **** 				}
 30609              		.loc 1 5406 7 is_stmt 0 view .LVU8185
 30610 029c 9BB2     		uxth	r3, r3
 30611              	.LVL2352:
5399:src/xeq.c     **** 					// Leave XROM
 30612              		.loc 1 5399 11 is_stmt 1 view .LVU8186
 30613 029e 9A0B     		lsrs	r2, r3, #14
 30614 02a0 032A     		cmp	r2, #3
 30615 02a2 11D1     		bne	.L2279
 30616              	.L2282:
5401:src/xeq.c     **** 						retstk_up();
 30617              		.loc 1 5401 6 view .LVU8187
5401:src/xeq.c     **** 						retstk_up();
 30618              		.loc 1 5401 9 is_stmt 0 view .LVU8188
 30619 02a4 B1F9E227 		ldrsh	r2, [r1, #2018]
 30620 02a8 002A     		cmp	r2, #0
 30621 02aa F6D0     		beq	.L2280
5402:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
 30622              		.loc 1 5402 7 is_stmt 1 view .LVU8189
 30623 02ac FFF7FEFF 		bl	retstk_up
 30624              	.LVL2353:
5403:src/xeq.c     **** 					}
 30625              		.loc 1 5403 7 view .LVU8190
5403:src/xeq.c     **** 					}
 30626              		.loc 1 5403 19 is_stmt 0 view .LVU8191
 30627 02b0 3968     		ldr	r1, [r7]
5403:src/xeq.c     **** 					}
 30628              		.loc 1 5403 10 view .LVU8192
 30629 02b2 3368     		ldr	r3, [r6]
5403:src/xeq.c     **** 					}
 30630              		.loc 1 5403 19 view .LVU8193
 30631 02b4 B1F9E227 		ldrsh	r2, [r1, #2018]
5403:src/xeq.c     **** 					}
 30632              		.loc 1 5403 18 view .LVU8194
 30633 02b8 5019     		adds	r0, r2, r5
5403:src/xeq.c     **** 					}
 30634              		.loc 1 5403 10 view .LVU8195
 30635 02ba 33F81030 		ldrh	r3, [r3, r0, lsl #1]
 30636              	.LVL2354:
5405:src/xeq.c     **** 						++pc; // compensate for decpc below
 30637              		.loc 1 5405 6 is_stmt 1 view .LVU8196
5405:src/xeq.c     **** 						++pc; // compensate for decpc below
 30638              		.loc 1 5405 9 is_stmt 0 view .LVU8197
 30639 02be 002A     		cmp	r2, #0
 30640 02c0 EBD0     		beq	.L2280
5399:src/xeq.c     **** 					// Leave XROM
 30641              		.loc 1 5399 11 is_stmt 1 view .LVU8198
 30642 02c2 9A0B     		lsrs	r2, r3, #14
 30643 02c4 032A     		cmp	r2, #3
 30644 02c6 EDD0     		beq	.L2282
 30645              	.L2279:
5408:src/xeq.c     **** #ifndef REALBUILD
 30646              		.loc 1 5408 5 view .LVU8199
 30647              	.LVL2355:
 30648              	.LBB4310:
 30649              	.LBI4310:
 279:src/xeq.c     **** 	State.pc = pc;
ARM GAS  /tmp/ccQlyisH.s 			page 780


 30650              		.loc 1 279 13 view .LVU8200
 30651              	.LBB4311:
 280:src/xeq.c     **** 	update_program_bounds(0);
 30652              		.loc 1 280 2 view .LVU8201
 280:src/xeq.c     **** 	update_program_bounds(0);
 30653              		.loc 1 280 11 is_stmt 0 view .LVU8202
 30654 02c8 A1F8E037 		strh	r3, [r1, #2016]	@ movhi
 281:src/xeq.c     **** }
 30655              		.loc 1 281 2 is_stmt 1 view .LVU8203
 30656 02cc 0020     		movs	r0, #0
 30657 02ce FFF7FEFF 		bl	update_program_bounds
 30658              	.LVL2356:
 30659              	.L2273:
 281:src/xeq.c     **** }
 30660              		.loc 1 281 2 is_stmt 0 view .LVU8204
 30661              	.LBE4311:
 30662              	.LBE4310:
 30663              	.LBE4309:
5412:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
 30664              		.loc 1 5412 4 is_stmt 1 view .LVU8205
 30665 02d2 FFF7FEFF 		bl	decpc
 30666              	.LVL2357:
5413:src/xeq.c     **** 
 30667              		.loc 1 5413 4 view .LVU8206
 30668 02d6 FFF7FEFF 		bl	xeq_init_contexts
 30669              	.LVL2358:
5415:src/xeq.c     **** 		}
 30670              		.loc 1 5415 4 view .LVU8207
 30671              	.LBB4312:
 30672              	.LBI4312:
5776:src/xeq.c     **** 	set_running_off_sst();
 30673              		.loc 1 5776 6 view .LVU8208
 30674              	.LBB4313:
5777:src/xeq.c     **** 	State.entryp = 0;
 30675              		.loc 1 5777 2 view .LVU8209
 30676              	.LBB4314:
 30677              	.LBI4314:
5768:src/xeq.c     **** 	Running = 0;
 30678              		.loc 1 5768 6 view .LVU8210
 30679              	.LBB4315:
5769:src/xeq.c     **** }
 30680              		.loc 1 5769 2 view .LVU8211
 30681              	.LBE4315:
 30682              	.LBE4314:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 30683              		.loc 1 5778 15 is_stmt 0 view .LVU8212
 30684 02da 3B68     		ldr	r3, [r7]
 30685              	.LBB4317:
 30686              	.LBB4316:
5769:src/xeq.c     **** }
 30687              		.loc 1 5769 10 view .LVU8213
 30688 02dc 0021     		movs	r1, #0
 30689 02de CAF80010 		str	r1, [r10]
 30690              	.LBE4316:
 30691              	.LBE4317:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 30692              		.loc 1 5778 2 is_stmt 1 view .LVU8214
ARM GAS  /tmp/ccQlyisH.s 			page 781


5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 30693              		.loc 1 5778 15 is_stmt 0 view .LVU8215
 30694 02e2 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 30695 02e6 61F30412 		bfi	r2, r1, #4, #1
 30696 02ea 83F8DD27 		strb	r2, [r3, #2013]
5779:src/xeq.c     **** }
 30697              		.loc 1 5779 2 is_stmt 1 view .LVU8216
 30698 02ee 8A20     		movs	r0, #138
 30699 02f0 FFF7FEFF 		bl	dot
 30700              	.LVL2359:
5780:src/xeq.c     **** 
 30701              		.loc 1 5780 1 is_stmt 0 view .LVU8217
 30702 02f4 47E7     		b	.L2269
 30703              	.L2477:
 30704 02f6 00BF     		.align	2
 30705              	.L2476:
 30706 02f8 00000000 		.word	main_ram
 30707 02fc 00000000 		.word	StateWhileOn
 30708 0300 00000000 		.word	Busy
 30709 0304 00000000 		.word	XeqOpCode
 30710 0308 00000000 		.word	.LC8
 30711 030c 00000000 		.word	TraceBuffer
 30712 0310 00000000 		.word	DispMsg
 30713 0314 00000000 		.word	argcmds
 30714 0318 00000000 		.word	Error
 30715 031c 00000000 		.word	multicmds
 30716 0320 00000000 		.word	xrom
 30717 0324 00000000 		.word	xrom_size
 30718 0328 00000000 		.word	XromRunning
 30719 032c 00000000 		.word	XromParams
 30720 0330 01400800 		.word	540673
 30721 0334 00000000 		.word	RetStk
 30722 0338 00000000 		.word	StackBase
 30723 033c 00000000 		.word	Running
 30724              	.LVL2360:
 30725              	.L2449:
5780:src/xeq.c     **** 
 30726              		.loc 1 5780 1 view .LVU8218
 30727 0340 0892     		str	r2, [sp, #32]
 30728              	.LBE4313:
 30729              	.LBE4312:
 30730              	.LBB4318:
 30731              	.LBB4119:
 30732              	.LBB4097:
 30733              	.LBB4089:
 30734 0342 FFF7FEFF 		bl	process_cmdline.part.0
 30735              	.LVL2361:
 30736 0346 089A     		ldr	r2, [sp, #32]
 30737 0348 A84B     		ldr	r3, .L2478
 30738 034a C7E6     		b	.L2156
 30739              	.LVL2362:
 30740              	.L2186:
5780:src/xeq.c     **** 
 30741              		.loc 1 5780 1 view .LVU8219
 30742              	.LBE4089:
 30743              	.LBE4097:
 30744              	.LBE4119:
ARM GAS  /tmp/ccQlyisH.s 			page 782


 30745              	.LBE4318:
5333:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
 30746              		.loc 1 5333 18 is_stmt 1 view .LVU8220
 30747              	.LBB4319:
 30748              	.LBI4319:
4587:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
 30749              		.loc 1 4587 13 view .LVU8221
 30750              	.LBB4320:
4588:src/xeq.c     **** 
 30751              		.loc 1 4588 2 view .LVU8222
 30752              	.LBB4321:
 30753              	.LBB4322:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30754              		.loc 1 1198 5 is_stmt 0 view .LVU8223
 30755 034c 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30756              	.LBE4322:
 30757              	.LBE4321:
4588:src/xeq.c     **** 
 30758              		.loc 1 4588 21 view .LVU8224
 30759 034e EDB2     		uxtb	r5, r5
 30760              	.LVL2363:
4590:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
 30761              		.loc 1 4590 2 is_stmt 1 view .LVU8225
 30762              	.LBB4325:
 30763              	.LBI4321:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 30764              		.loc 1 1195 6 view .LVU8226
 30765              	.LBB4323:
1196:src/xeq.c     **** 
 30766              		.loc 1 1196 2 view .LVU8227
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30767              		.loc 1 1198 2 view .LVU8228
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30768              		.loc 1 1198 5 is_stmt 0 view .LVU8229
 30769 0350 002B     		cmp	r3, #0
 30770 0352 40F08D82 		bne	.L2456
 30771              	.L2223:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30772              		.loc 1 1198 5 view .LVU8230
 30773              	.LBE4323:
 30774              	.LBE4325:
4591:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 30775              		.loc 1 4591 2 is_stmt 1 view .LVU8231
4591:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 30776              		.loc 1 4591 5 is_stmt 0 view .LVU8232
 30777 0356 CC2D     		cmp	r5, #204
 30778 0358 00F23A82 		bhi	.L2224
4592:src/xeq.c     **** 			bad_mode_error();
 30779              		.loc 1 4592 3 is_stmt 1 view .LVU8233
4592:src/xeq.c     **** 			bad_mode_error();
 30780              		.loc 1 4592 7 is_stmt 0 view .LVU8234
 30781 035c 3B68     		ldr	r3, [r7]
 30782 035e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4592:src/xeq.c     **** 			bad_mode_error();
 30783              		.loc 1 4592 6 view .LVU8235
 30784 0362 13F0010F 		tst	r3, #1
4592:src/xeq.c     **** 			bad_mode_error();
ARM GAS  /tmp/ccQlyisH.s 			page 783


 30785              		.loc 1 4592 23 view .LVU8236
 30786 0366 A24B     		ldr	r3, .L2478+4
4592:src/xeq.c     **** 			bad_mode_error();
 30787              		.loc 1 4592 6 view .LVU8237
 30788 0368 40F04E81 		bne	.L2409
 30789 036c 2A01     		lsls	r2, r5, #4
 30790              	.L2225:
4594:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 30791              		.loc 1 4594 8 is_stmt 1 view .LVU8238
4594:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 30792              		.loc 1 4594 14 is_stmt 0 view .LVU8239
 30793 036e 53F802A0 		ldr	r10, [r3, r2]
 30794 0372 1344     		add	r3, r3, r2
 30795 0374 0593     		str	r3, [sp, #20]
4594:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 30796              		.loc 1 4594 11 view .LVU8240
 30797 0376 BAF1000F 		cmp	r10, #0
 30798 037a 14D0     		beq	.L2227
 30799              	.LBB4326:
4595:src/xeq.c     **** 			if (dispatch_xrom(fp))
 30800              		.loc 1 4595 4 is_stmt 1 view .LVU8241
 30801              	.LVL2364:
4596:src/xeq.c     **** 				return;
 30802              		.loc 1 4596 4 view .LVU8242
4596:src/xeq.c     **** 				return;
 30803              		.loc 1 4596 8 is_stmt 0 view .LVU8243
 30804 037c 5046     		mov	r0, r10
 30805 037e FFF7FEFF 		bl	dispatch_xrom
 30806              	.LVL2365:
4596:src/xeq.c     **** 				return;
 30807              		.loc 1 4596 7 view .LVU8244
 30808 0382 059B     		ldr	r3, [sp, #20]
 30809 0384 0028     		cmp	r0, #0
 30810 0386 40F06681 		bne	.L2150
4599:src/xeq.c     **** 				case 2:	lift_if_enabled();
 30811              		.loc 1 4599 5 is_stmt 1 view .LVU8245
 30812 038a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 30813 038c 03F00303 		and	r3, r3, #3
 30814 0390 012B     		cmp	r3, #1
 30815 0392 00F01084 		beq	.L2229
 30816 0396 022B     		cmp	r3, #2
 30817 0398 03D1     		bne	.L2230
4600:src/xeq.c     **** 				case 1:	lift_if_enabled();
 30818              		.loc 1 4600 13 view .LVU8246
 30819              	.LBB4327:
 30820              	.LBI4327:
 738:src/xeq.c     **** 	if (get_lift())
 30821              		.loc 1 738 6 view .LVU8247
 30822              	.LBB4328:
 739:src/xeq.c     **** 		lift();
 30823              		.loc 1 739 2 view .LVU8248
 30824              	.LBB4329:
 30825              	.LBI4329:
 734:src/xeq.c     **** 	return State2.state_lift;
 30826              		.loc 1 734 12 view .LVU8249
 30827              	.LBB4330:
 735:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 784


 30828              		.loc 1 735 2 view .LVU8250
 735:src/xeq.c     **** }
 30829              		.loc 1 735 15 is_stmt 0 view .LVU8251
 30830 039a E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30831              	.LBE4330:
 30832              	.LBE4329:
 739:src/xeq.c     **** 		lift();
 30833              		.loc 1 739 5 view .LVU8252
 30834 039c 5B06     		lsls	r3, r3, #25
 30835 039e 00F10884 		bmi	.L2457
 30836              	.L2230:
 30837              	.LBE4328:
 30838              	.LBE4327:
4603:src/xeq.c     **** 					break;
 30839              		.loc 1 4603 6 is_stmt 1 view .LVU8253
 30840 03a2 2846     		mov	r0, r5
 30841 03a4 D047     		blx	r10
 30842              	.LVL2366:
4604:src/xeq.c     **** 				}
 30843              		.loc 1 4604 6 view .LVU8254
 30844              	.L2227:
4604:src/xeq.c     **** 				}
 30845              		.loc 1 4604 6 is_stmt 0 view .LVU8255
 30846              	.LBE4326:
4609:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 30847              		.loc 1 4609 3 is_stmt 1 view .LVU8256
4614:src/xeq.c     **** #endif
 30848              		.loc 1 4614 2 view .LVU8257
4614:src/xeq.c     **** #endif
 30849              		.loc 1 4614 5 is_stmt 0 view .LVU8258
 30850 03a6 3F2D     		cmp	r5, #63
 30851 03a8 924B     		ldr	r3, .L2478+8
 30852 03aa 00F05581 		beq	.L2422
 30853              	.L2234:
4614:src/xeq.c     **** #endif
 30854              		.loc 1 4614 24 view .LVU8259
 30855 03ae 0B2D     		cmp	r5, #11
 30856 03b0 00F05281 		beq	.L2422
 30857 03b4 11E2     		b	.L2233
 30858              	.LVL2367:
 30859              	.L2185:
4614:src/xeq.c     **** #endif
 30860              		.loc 1 4614 24 view .LVU8260
 30861              	.LBE4320:
 30862              	.LBE4319:
5334:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
 30863              		.loc 1 5334 18 is_stmt 1 view .LVU8261
 30864              	.LBB4356:
 30865              	.LBI4356:
4628:src/xeq.c     **** {
 30866              		.loc 1 4628 13 view .LVU8262
 30867              	.LBB4357:
4630:src/xeq.c     **** 	process_cmdline_set_lift();
 30868              		.loc 1 4630 2 view .LVU8263
4631:src/xeq.c     **** 
 30869              		.loc 1 4631 2 view .LVU8264
 30870              	.LBB4358:
ARM GAS  /tmp/ccQlyisH.s 			page 785


 30871              	.LBI4358:
1301:src/xeq.c     **** 	process_cmdline();
 30872              		.loc 1 1301 6 view .LVU8265
 30873              	.LBE4358:
 30874              	.LBE4357:
 30875              	.LBE4356:
1302:src/xeq.c     **** 	set_lift();
 30876              		.loc 1 1302 2 view .LVU8266
 30877              	.LBB4397:
 30878              	.LBB4392:
 30879              	.LBB4369:
 30880              	.LBB4359:
 30881              	.LBI4359:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 30882              		.loc 1 1195 6 view .LVU8267
 30883              	.LBB4360:
1196:src/xeq.c     **** 
 30884              		.loc 1 1196 2 view .LVU8268
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30885              		.loc 1 1198 2 view .LVU8269
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30886              		.loc 1 1198 5 is_stmt 0 view .LVU8270
 30887 03b6 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30888 03b8 002B     		cmp	r3, #0
 30889 03ba 40F05682 		bne	.L2458
 30890              	.L2235:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30891              		.loc 1 1198 5 view .LVU8271
 30892              	.LBE4360:
 30893              	.LBE4359:
 30894              	.LBE4369:
 30895              	.LBE4392:
 30896              	.LBE4397:
1303:src/xeq.c     **** }
 30897              		.loc 1 1303 2 is_stmt 1 view .LVU8272
 30898              	.LBB4398:
 30899              	.LBB4393:
 30900              	.LBB4370:
 30901              	.LBB4362:
 30902              	.LBI4362:
 758:src/xeq.c     ****     State2.state_lift = 1;
 30903              		.loc 1 758 6 view .LVU8273
 30904              	.LBB4363:
 759:src/xeq.c     **** }
 30905              		.loc 1 759 5 view .LVU8274
 759:src/xeq.c     **** }
 30906              		.loc 1 759 23 is_stmt 0 view .LVU8275
 30907 03be E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30908              	.LBE4363:
 30909              	.LBE4362:
 30910              	.LBE4370:
4633:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 30911              		.loc 1 4633 4 view .LVU8276
 30912 03c0 EDB2     		uxtb	r5, r5
 30913              	.LVL2368:
 30914              	.LBB4371:
 30915              	.LBB4366:
ARM GAS  /tmp/ccQlyisH.s 			page 786


 30916              	.LBB4364:
 759:src/xeq.c     **** }
 30917              		.loc 1 759 23 view .LVU8277
 30918 03c2 43F04003 		orr	r3, r3, #64
 30919              	.LBE4364:
 30920              	.LBE4366:
 30921              	.LBE4371:
4634:src/xeq.c     **** 		if (is_intmode()) {
 30922              		.loc 1 4634 5 view .LVU8278
 30923 03c6 9B2D     		cmp	r5, #155
 30924              	.LBB4372:
 30925              	.LBB4367:
 30926              	.LBB4365:
 759:src/xeq.c     **** }
 30927              		.loc 1 759 23 view .LVU8279
 30928 03c8 E375     		strb	r3, [r4, #23]
 30929              	.LBE4365:
 30930              	.LBE4367:
 30931              	.LBE4372:
4633:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 30932              		.loc 1 4633 2 is_stmt 1 view .LVU8280
 30933              	.LVL2369:
4634:src/xeq.c     **** 		if (is_intmode()) {
 30934              		.loc 1 4634 2 view .LVU8281
4634:src/xeq.c     **** 		if (is_intmode()) {
 30935              		.loc 1 4634 5 is_stmt 0 view .LVU8282
 30936 03ca 3FF6F5AE 		bhi	.L2179
4635:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30937              		.loc 1 4635 3 is_stmt 1 view .LVU8283
4635:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30938              		.loc 1 4635 7 is_stmt 0 view .LVU8284
 30939 03ce 3B68     		ldr	r3, [r7]
 30940 03d0 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4635:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30941              		.loc 1 4635 6 view .LVU8285
 30942 03d4 D907     		lsls	r1, r3, #31
 30943 03d6 40F1BB83 		bpl	.L2237
4636:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30944              		.loc 1 4636 4 is_stmt 1 view .LVU8286
4636:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30945              		.loc 1 4636 10 is_stmt 0 view .LVU8287
 30946 03da 874B     		ldr	r3, .L2478+12
 30947 03dc 05EB4505 		add	r5, r5, r5, lsl #1
 30948              	.LVL2370:
4636:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30949              		.loc 1 4636 10 view .LVU8288
 30950 03e0 03EBC505 		add	r5, r3, r5, lsl #3
 30951 03e4 AD68     		ldr	r5, [r5, #8]
4636:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30952              		.loc 1 4636 7 view .LVU8289
 30953 03e6 002D     		cmp	r5, #0
 30954 03e8 00F04383 		beq	.L2256
 30955              	.LBB4373:
4637:src/xeq.c     **** 				if (dispatch_xrom(fp))
 30956              		.loc 1 4637 5 is_stmt 1 view .LVU8290
 30957              	.LVL2371:
4638:src/xeq.c     **** 					return;
ARM GAS  /tmp/ccQlyisH.s 			page 787


 30958              		.loc 1 4638 5 view .LVU8291
4638:src/xeq.c     **** 					return;
 30959              		.loc 1 4638 9 is_stmt 0 view .LVU8292
 30960 03ec 2846     		mov	r0, r5
 30961 03ee FFF7FEFF 		bl	dispatch_xrom
 30962              	.LVL2372:
4638:src/xeq.c     **** 					return;
 30963              		.loc 1 4638 8 view .LVU8293
 30964 03f2 0028     		cmp	r0, #0
 30965 03f4 40F02F81 		bne	.L2150
 30966              	.LBB4374:
4641:src/xeq.c     **** 					x = fp(x);
 30967              		.loc 1 4641 6 is_stmt 1 view .LVU8294
 30968              	.LBB4375:
 30969              	.LBI4375:
1411:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 30970              		.loc 1 1411 15 view .LVU8295
 30971              	.LBB4376:
1412:src/xeq.c     **** }
 30972              		.loc 1 1412 2 view .LVU8296
1412:src/xeq.c     **** }
 30973              		.loc 1 1412 9 is_stmt 0 view .LVU8297
 30974 03f8 6420     		movs	r0, #100
 30975 03fa FFF7FEFF 		bl	get_reg_n_int
 30976              	.LVL2373:
1412:src/xeq.c     **** }
 30977              		.loc 1 1412 9 view .LVU8298
 30978              	.LBE4376:
 30979              	.LBE4375:
4642:src/xeq.c     **** 					setlastX();
 30980              		.loc 1 4642 6 is_stmt 1 view .LVU8299
4642:src/xeq.c     **** 					setlastX();
 30981              		.loc 1 4642 10 is_stmt 0 view .LVU8300
 30982 03fe A847     		blx	r5
 30983              	.LVL2374:
4642:src/xeq.c     **** 					setlastX();
 30984              		.loc 1 4642 10 view .LVU8301
 30985 0400 7C4B     		ldr	r3, .L2478+8
 30986 0402 0593     		str	r3, [sp, #20]
 30987 0404 0546     		mov	r5, r0
 30988              	.LVL2375:
4642:src/xeq.c     **** 					setlastX();
 30989              		.loc 1 4642 10 view .LVU8302
 30990 0406 8A46     		mov	r10, r1
 30991              	.LVL2376:
4643:src/xeq.c     **** 					setX_int(x);
 30992              		.loc 1 4643 6 is_stmt 1 view .LVU8303
 30993              	.LBB4377:
 30994              	.LBI4377:
 783:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 30995              		.loc 1 783 6 view .LVU8304
 30996              	.LBB4378:
 784:src/xeq.c     **** }
 30997              		.loc 1 784 2 view .LVU8305
 30998 0408 6C20     		movs	r0, #108
 30999              	.LVL2377:
 784:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 788


 31000              		.loc 1 784 2 is_stmt 0 view .LVU8306
 31001 040a 6421     		movs	r1, #100
 31002              	.LVL2378:
 784:src/xeq.c     **** }
 31003              		.loc 1 784 2 view .LVU8307
 31004 040c FFF7FEFF 		bl	copyreg_n
 31005              	.LVL2379:
 31006              	.LBE4378:
 31007              	.LBE4377:
4644:src/xeq.c     **** 				}
 31008              		.loc 1 4644 6 is_stmt 1 view .LVU8308
 31009 0410 D7E1     		b	.L2426
 31010              	.LVL2380:
 31011              	.L2187:
4644:src/xeq.c     **** 				}
 31012              		.loc 1 4644 6 is_stmt 0 view .LVU8309
 31013              	.LBE4374:
 31014              	.LBE4373:
 31015              	.LBE4393:
 31016              	.LBE4398:
5332:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
 31017              		.loc 1 5332 19 is_stmt 1 view .LVU8310
 31018              	.LBB4399:
 31019              	.LBI4162:
3881:src/xeq.c     **** 	int opm = argKIND(op);
 31020              		.loc 1 3881 13 view .LVU8311
 31021              	.LBB4225:
3882:src/xeq.c     **** 
 31022              		.loc 1 3882 2 view .LVU8312
3882:src/xeq.c     **** 
 31023              		.loc 1 3882 6 is_stmt 0 view .LVU8313
 31024 0412 5FFA85FA 		uxtb	r10, r5
 31025              	.LVL2381:
3884:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 31026              		.loc 1 3884 2 is_stmt 1 view .LVU8314
 31027 0416 BAF12A0F 		cmp	r10, #42
 31028 041a 3FF6CDAE 		bhi	.L2179
 31029 041e DFE81AF0 		tbh	[pc, r10, lsl #1]
 31030              	.L2190:
 31031 0422 A302     		.2byte	(.L2201-.L2190)/2
 31032 0424 1A03     		.2byte	(.L2200-.L2190)/2
 31033 0426 E202     		.2byte	(.L2199-.L2190)/2
 31034 0428 0703     		.2byte	(.L2198-.L2190)/2
 31035 042a B102     		.2byte	(.L2197-.L2190)/2
 31036 042c 1B02     		.2byte	(.L2196-.L2190)/2
 31037 042e 1B02     		.2byte	(.L2196-.L2190)/2
 31038 0430 1B02     		.2byte	(.L2196-.L2190)/2
 31039 0432 1B02     		.2byte	(.L2196-.L2190)/2
 31040 0434 1B02     		.2byte	(.L2196-.L2190)/2
 31041 0436 1B02     		.2byte	(.L2196-.L2190)/2
 31042 0438 1B02     		.2byte	(.L2196-.L2190)/2
 31043 043a 1B02     		.2byte	(.L2196-.L2190)/2
 31044 043c 1B02     		.2byte	(.L2196-.L2190)/2
 31045 043e 1B02     		.2byte	(.L2196-.L2190)/2
 31046 0440 1B02     		.2byte	(.L2196-.L2190)/2
 31047 0442 1B02     		.2byte	(.L2196-.L2190)/2
 31048 0444 1B02     		.2byte	(.L2196-.L2190)/2
ARM GAS  /tmp/ccQlyisH.s 			page 789


 31049 0446 1B02     		.2byte	(.L2196-.L2190)/2
 31050 0448 1B02     		.2byte	(.L2196-.L2190)/2
 31051 044a 1B02     		.2byte	(.L2196-.L2190)/2
 31052 044c 8302     		.2byte	(.L2195-.L2190)/2
 31053 044e 8302     		.2byte	(.L2195-.L2190)/2
 31054 0450 3F02     		.2byte	(.L2194-.L2190)/2
 31055 0452 3F02     		.2byte	(.L2194-.L2190)/2
 31056 0454 3F02     		.2byte	(.L2194-.L2190)/2
 31057 0456 3F02     		.2byte	(.L2194-.L2190)/2
 31058 0458 3F02     		.2byte	(.L2194-.L2190)/2
 31059 045a 3F02     		.2byte	(.L2194-.L2190)/2
 31060 045c 3F02     		.2byte	(.L2194-.L2190)/2
 31061 045e 3302     		.2byte	(.L2193-.L2190)/2
 31062 0460 3302     		.2byte	(.L2193-.L2190)/2
 31063 0462 3302     		.2byte	(.L2193-.L2190)/2
 31064 0464 3302     		.2byte	(.L2193-.L2190)/2
 31065 0466 3302     		.2byte	(.L2193-.L2190)/2
 31066 0468 3302     		.2byte	(.L2193-.L2190)/2
 31067 046a 3302     		.2byte	(.L2193-.L2190)/2
 31068 046c 7702     		.2byte	(.L2192-.L2190)/2
 31069 046e 7702     		.2byte	(.L2192-.L2190)/2
 31070 0470 6B02     		.2byte	(.L2191-.L2190)/2
 31071 0472 6B02     		.2byte	(.L2191-.L2190)/2
 31072 0474 5F02     		.2byte	(.L2189-.L2190)/2
 31073 0476 5F02     		.2byte	(.L2189-.L2190)/2
 31074              	.LVL2382:
 31075              		.p2align 1
 31076              	.L2183:
3884:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 31077              		.loc 1 3884 2 is_stmt 0 view .LVU8315
 31078              	.LBE4225:
 31079              	.LBE4399:
5336:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
 31080              		.loc 1 5336 18 is_stmt 1 view .LVU8316
 31081              	.LBB4400:
 31082              	.LBI4400:
4777:src/xeq.c     **** 	unsigned int f;
 31083              		.loc 1 4777 13 view .LVU8317
 31084              	.LBB4401:
4778:src/xeq.c     **** 	process_cmdline_set_lift();
 31085              		.loc 1 4778 2 view .LVU8318
4779:src/xeq.c     **** 
 31086              		.loc 1 4779 2 view .LVU8319
 31087              	.LBB4402:
 31088              	.LBI4402:
1301:src/xeq.c     **** 	process_cmdline();
 31089              		.loc 1 1301 6 view .LVU8320
 31090              	.LBE4402:
 31091              	.LBE4401:
 31092              	.LBE4400:
1302:src/xeq.c     **** 	set_lift();
 31093              		.loc 1 1302 2 view .LVU8321
 31094              	.LBB4450:
 31095              	.LBB4442:
 31096              	.LBB4413:
 31097              	.LBB4403:
 31098              	.LBI4403:
ARM GAS  /tmp/ccQlyisH.s 			page 790


1195:src/xeq.c     **** 	decNumber a, b, x, t;
 31099              		.loc 1 1195 6 view .LVU8322
 31100              	.LBB4404:
1196:src/xeq.c     **** 
 31101              		.loc 1 1196 2 view .LVU8323
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31102              		.loc 1 1198 2 view .LVU8324
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31103              		.loc 1 1198 5 is_stmt 0 view .LVU8325
 31104 0478 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31105 047a 002B     		cmp	r3, #0
 31106 047c 40F00182 		bne	.L2459
 31107              	.L2251:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31108              		.loc 1 1198 5 view .LVU8326
 31109              	.LBE4404:
 31110              	.LBE4403:
 31111              	.LBE4413:
 31112              	.LBE4442:
 31113              	.LBE4450:
1303:src/xeq.c     **** }
 31114              		.loc 1 1303 2 is_stmt 1 view .LVU8327
 31115              	.LBB4451:
 31116              	.LBB4443:
 31117              	.LBB4414:
 31118              	.LBB4406:
 31119              	.LBI4406:
 758:src/xeq.c     ****     State2.state_lift = 1;
 31120              		.loc 1 758 6 view .LVU8328
 31121              	.LBB4407:
 759:src/xeq.c     **** }
 31122              		.loc 1 759 5 view .LVU8329
 759:src/xeq.c     **** }
 31123              		.loc 1 759 23 is_stmt 0 view .LVU8330
 31124 0480 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31125              	.LBE4407:
 31126              	.LBE4406:
 31127              	.LBE4414:
4781:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 31128              		.loc 1 4781 4 view .LVU8331
 31129 0482 EDB2     		uxtb	r5, r5
 31130              	.LVL2383:
 31131              	.LBB4415:
 31132              	.LBB4410:
 31133              	.LBB4408:
 759:src/xeq.c     **** }
 31134              		.loc 1 759 23 view .LVU8332
 31135 0484 43F04003 		orr	r3, r3, #64
 31136              	.LBE4408:
 31137              	.LBE4410:
 31138              	.LBE4415:
4782:src/xeq.c     **** 		if (is_intmode()) {
 31139              		.loc 1 4782 5 view .LVU8333
 31140 0488 0B2D     		cmp	r5, #11
 31141              	.LBB4416:
 31142              	.LBB4411:
 31143              	.LBB4409:
ARM GAS  /tmp/ccQlyisH.s 			page 791


 759:src/xeq.c     **** }
 31144              		.loc 1 759 23 view .LVU8334
 31145 048a E375     		strb	r3, [r4, #23]
 31146              	.LBE4409:
 31147              	.LBE4411:
 31148              	.LBE4416:
4781:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 31149              		.loc 1 4781 2 is_stmt 1 view .LVU8335
 31150              	.LVL2384:
4782:src/xeq.c     **** 		if (is_intmode()) {
 31151              		.loc 1 4782 2 view .LVU8336
4782:src/xeq.c     **** 		if (is_intmode()) {
 31152              		.loc 1 4782 5 is_stmt 0 view .LVU8337
 31153 048c 3FF694AE 		bhi	.L2179
4783:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31154              		.loc 1 4783 3 is_stmt 1 view .LVU8338
4783:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31155              		.loc 1 4783 7 is_stmt 0 view .LVU8339
 31156 0490 3B68     		ldr	r3, [r7]
 31157 0492 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4783:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31158              		.loc 1 4783 6 view .LVU8340
 31159 0496 DB07     		lsls	r3, r3, #31
 31160 0498 40F13583 		bpl	.L2253
4784:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31161              		.loc 1 4784 4 is_stmt 1 view .LVU8341
4784:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31162              		.loc 1 4784 10 is_stmt 0 view .LVU8342
 31163 049c 574B     		ldr	r3, .L2478+16
 31164 049e 05EB8505 		add	r5, r5, r5, lsl #2
 31165              	.LVL2385:
4784:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31166              		.loc 1 4784 10 view .LVU8343
 31167 04a2 03EB8505 		add	r5, r3, r5, lsl #2
 31168 04a6 6D68     		ldr	r5, [r5, #4]
4784:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31169              		.loc 1 4784 7 view .LVU8344
 31170 04a8 002D     		cmp	r5, #0
 31171 04aa 00F0E282 		beq	.L2256
 31172              	.LBB4417:
4785:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31173              		.loc 1 4785 5 is_stmt 1 view .LVU8345
 31174              	.LVL2386:
4786:src/xeq.c     **** 					return;
 31175              		.loc 1 4786 5 view .LVU8346
4786:src/xeq.c     **** 					return;
 31176              		.loc 1 4786 9 is_stmt 0 view .LVU8347
 31177 04ae 2846     		mov	r0, r5
 31178 04b0 FFF7FEFF 		bl	dispatch_xrom
 31179              	.LVL2387:
4786:src/xeq.c     **** 					return;
 31180              		.loc 1 4786 8 view .LVU8348
 31181 04b4 0028     		cmp	r0, #0
 31182 04b6 40F0CE80 		bne	.L2150
 31183              	.LBB4418:
4789:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 31184              		.loc 1 4789 6 is_stmt 1 view .LVU8349
ARM GAS  /tmp/ccQlyisH.s 			page 792


 31185              	.LBB4419:
 31186              	.LBI4419:
1411:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 31187              		.loc 1 1411 15 view .LVU8350
 31188              	.LBB4420:
1412:src/xeq.c     **** }
 31189              		.loc 1 1412 2 view .LVU8351
1412:src/xeq.c     **** }
 31190              		.loc 1 1412 9 is_stmt 0 view .LVU8352
 31191 04ba 6420     		movs	r0, #100
 31192 04bc FFF7FEFF 		bl	get_reg_n_int
 31193              	.LVL2388:
 31194 04c0 8246     		mov	r10, r0
 31195              	.LVL2389:
1412:src/xeq.c     **** }
 31196              		.loc 1 1412 9 view .LVU8353
 31197              	.LBE4420:
 31198              	.LBE4419:
4790:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31199              		.loc 1 4790 6 is_stmt 1 view .LVU8354
4790:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31200              		.loc 1 4790 24 is_stmt 0 view .LVU8355
 31201 04c2 6520     		movs	r0, #101
 31202              	.LVL2390:
 31203              	.LBB4422:
 31204              	.LBB4421:
1412:src/xeq.c     **** }
 31205              		.loc 1 1412 9 view .LVU8356
 31206 04c4 0591     		str	r1, [sp, #20]
 31207              	.LVL2391:
1412:src/xeq.c     **** }
 31208              		.loc 1 1412 9 view .LVU8357
 31209              	.LBE4421:
 31210              	.LBE4422:
4790:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31211              		.loc 1 4790 24 view .LVU8358
 31212 04c6 FFF7FEFF 		bl	get_reg_n_int
 31213              	.LVL2392:
 31214 04ca 0690     		str	r0, [sp, #24]
4791:src/xeq.c     **** 					x = fp(z, y, x);
 31215              		.loc 1 4791 24 view .LVU8359
 31216 04cc 6620     		movs	r0, #102
4790:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31217              		.loc 1 4790 24 view .LVU8360
 31218 04ce 0891     		str	r1, [sp, #32]
 31219              	.LVL2393:
4791:src/xeq.c     **** 					x = fp(z, y, x);
 31220              		.loc 1 4791 6 is_stmt 1 view .LVU8361
4791:src/xeq.c     **** 					x = fp(z, y, x);
 31221              		.loc 1 4791 24 is_stmt 0 view .LVU8362
 31222 04d0 FFF7FEFF 		bl	get_reg_n_int
 31223              	.LVL2394:
4792:src/xeq.c     **** 					setlastX();
 31224              		.loc 1 4792 6 is_stmt 1 view .LVU8363
4792:src/xeq.c     **** 					setlastX();
 31225              		.loc 1 4792 10 is_stmt 0 view .LVU8364
 31226 04d4 059B     		ldr	r3, [sp, #20]
ARM GAS  /tmp/ccQlyisH.s 			page 793


 31227 04d6 069A     		ldr	r2, [sp, #24]
 31228 04d8 CDF800A0 		str	r10, [sp]
 31229 04dc 0193     		str	r3, [sp, #4]
 31230 04de 089B     		ldr	r3, [sp, #32]
 31231 04e0 A847     		blx	r5
 31232              	.LVL2395:
4792:src/xeq.c     **** 					setlastX();
 31233              		.loc 1 4792 10 view .LVU8365
 31234 04e2 444B     		ldr	r3, .L2478+8
 31235 04e4 0593     		str	r3, [sp, #20]
 31236 04e6 0546     		mov	r5, r0
 31237              	.LVL2396:
4792:src/xeq.c     **** 					setlastX();
 31238              		.loc 1 4792 10 view .LVU8366
 31239 04e8 8A46     		mov	r10, r1
 31240              	.LVL2397:
4793:src/xeq.c     **** 					lower();
 31241              		.loc 1 4793 6 is_stmt 1 view .LVU8367
 31242              	.LBB4423:
 31243              	.LBI4423:
 783:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31244              		.loc 1 783 6 view .LVU8368
 31245              	.LBB4424:
 784:src/xeq.c     **** }
 31246              		.loc 1 784 2 view .LVU8369
 31247 04ea 6C20     		movs	r0, #108
 31248              	.LVL2398:
 784:src/xeq.c     **** }
 31249              		.loc 1 784 2 is_stmt 0 view .LVU8370
 31250 04ec 6421     		movs	r1, #100
 31251              	.LVL2399:
 784:src/xeq.c     **** }
 31252              		.loc 1 784 2 view .LVU8371
 31253 04ee FFF7FEFF 		bl	copyreg_n
 31254              	.LVL2400:
 31255              	.LBE4424:
 31256              	.LBE4423:
4794:src/xeq.c     **** 					lower();
 31257              		.loc 1 4794 6 is_stmt 1 view .LVU8372
 31258 04f2 FFF7FEFF 		bl	lower
 31259              	.LVL2401:
 31260 04f6 62E1     		b	.L2424
 31261              	.LVL2402:
 31262              	.L2182:
4794:src/xeq.c     **** 					lower();
 31263              		.loc 1 4794 6 is_stmt 0 view .LVU8373
 31264              	.LBE4418:
 31265              	.LBE4417:
 31266              	.LBE4443:
 31267              	.LBE4451:
5337:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
 31268              		.loc 1 5337 19 is_stmt 1 view .LVU8374
 31269              	.LBB4452:
 31270              	.LBI4452:
4668:src/xeq.c     **** 	decNumber x, y, rx, ry;
 31271              		.loc 1 4668 13 view .LVU8375
 31272              	.LBB4453:
ARM GAS  /tmp/ccQlyisH.s 			page 794


4669:src/xeq.c     **** 	unsigned int f;
 31273              		.loc 1 4669 2 view .LVU8376
4670:src/xeq.c     **** 
 31274              		.loc 1 4670 2 view .LVU8377
4672:src/xeq.c     **** 
 31275              		.loc 1 4672 2 view .LVU8378
 31276              	.LBB4454:
 31277              	.LBI4454:
1301:src/xeq.c     **** 	process_cmdline();
 31278              		.loc 1 1301 6 view .LVU8379
 31279              	.LBE4454:
 31280              	.LBE4453:
 31281              	.LBE4452:
1302:src/xeq.c     **** 	set_lift();
 31282              		.loc 1 1302 2 view .LVU8380
 31283              	.LBB4485:
 31284              	.LBB4480:
 31285              	.LBB4465:
 31286              	.LBB4455:
 31287              	.LBI4455:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 31288              		.loc 1 1195 6 view .LVU8381
 31289              	.LBB4456:
1196:src/xeq.c     **** 
 31290              		.loc 1 1196 2 view .LVU8382
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31291              		.loc 1 1198 2 view .LVU8383
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31292              		.loc 1 1198 5 is_stmt 0 view .LVU8384
 31293 04f8 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31294 04fa 002B     		cmp	r3, #0
 31295 04fc 40F0BE81 		bne	.L2460
 31296              	.L2259:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31297              		.loc 1 1198 5 view .LVU8385
 31298              	.LBE4456:
 31299              	.LBE4455:
 31300              	.LBE4465:
 31301              	.LBE4480:
 31302              	.LBE4485:
1303:src/xeq.c     **** }
 31303              		.loc 1 1303 2 is_stmt 1 view .LVU8386
 31304              	.LBB4486:
 31305              	.LBB4481:
 31306              	.LBB4466:
 31307              	.LBB4458:
 31308              	.LBI4458:
 758:src/xeq.c     ****     State2.state_lift = 1;
 31309              		.loc 1 758 6 view .LVU8387
 31310              	.LBB4459:
 759:src/xeq.c     **** }
 31311              		.loc 1 759 5 view .LVU8388
 759:src/xeq.c     **** }
 31312              		.loc 1 759 23 is_stmt 0 view .LVU8389
 31313 0500 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31314              	.LBE4459:
 31315              	.LBE4458:
ARM GAS  /tmp/ccQlyisH.s 			page 795


 31316              	.LBE4466:
4674:src/xeq.c     **** 
 31317              		.loc 1 4674 4 view .LVU8390
 31318 0502 EDB2     		uxtb	r5, r5
 31319              	.LVL2403:
 31320              	.LBB4467:
 31321              	.LBB4462:
 31322              	.LBB4460:
 759:src/xeq.c     **** }
 31323              		.loc 1 759 23 view .LVU8391
 31324 0504 43F04003 		orr	r3, r3, #64
 31325              	.LBE4460:
 31326              	.LBE4462:
 31327              	.LBE4467:
4676:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31328              		.loc 1 4676 5 view .LVU8392
 31329 0508 9B2D     		cmp	r5, #155
 31330              	.LBB4468:
 31331              	.LBB4463:
 31332              	.LBB4461:
 759:src/xeq.c     **** }
 31333              		.loc 1 759 23 view .LVU8393
 31334 050a E375     		strb	r3, [r4, #23]
 31335              	.LBE4461:
 31336              	.LBE4463:
 31337              	.LBE4468:
4674:src/xeq.c     **** 
 31338              		.loc 1 4674 2 is_stmt 1 view .LVU8394
 31339              	.LVL2404:
4676:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31340              		.loc 1 4676 2 view .LVU8395
4676:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31341              		.loc 1 4676 5 is_stmt 0 view .LVU8396
 31342 050c 66D8     		bhi	.L2265
4677:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31343              		.loc 1 4677 3 is_stmt 1 view .LVU8397
4677:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31344              		.loc 1 4677 9 is_stmt 0 view .LVU8398
 31345 050e 3A4B     		ldr	r3, .L2478+12
 31346 0510 05EB4505 		add	r5, r5, r5, lsl #1
 31347              	.LVL2405:
4677:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31348              		.loc 1 4677 9 view .LVU8399
 31349 0514 03EBC505 		add	r5, r3, r5, lsl #3
 31350 0518 6D68     		ldr	r5, [r5, #4]
4677:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31351              		.loc 1 4677 6 view .LVU8400
 31352 051a 002D     		cmp	r5, #0
 31353 051c 00F0B482 		beq	.L2266
 31354              	.LBB4469:
4678:src/xeq.c     **** 			if (dispatch_xrom(fp))
 31355              		.loc 1 4678 4 is_stmt 1 view .LVU8401
 31356              	.LVL2406:
4679:src/xeq.c     **** 				return;
 31357              		.loc 1 4679 4 view .LVU8402
4679:src/xeq.c     **** 				return;
 31358              		.loc 1 4679 8 is_stmt 0 view .LVU8403
ARM GAS  /tmp/ccQlyisH.s 			page 796


 31359 0520 2846     		mov	r0, r5
 31360 0522 FFF7FEFF 		bl	dispatch_xrom
 31361              	.LVL2407:
4679:src/xeq.c     **** 				return;
 31362              		.loc 1 4679 7 view .LVU8404
 31363 0526 0028     		cmp	r0, #0
 31364 0528 40F09580 		bne	.L2150
4682:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
 31365              		.loc 1 4682 5 is_stmt 1 view .LVU8405
 31366              	.LVL2408:
 31367              	.LBB4470:
 31368              	.LBI4470:
 845:src/xeq.c     **** 	getX(x);
 31369              		.loc 1 845 6 view .LVU8406
 31370              	.LBE4470:
 31371              	.LBE4469:
 31372              	.LBE4481:
 31373              	.LBE4486:
 846:src/xeq.c     **** 	getY(y);
 31374              		.loc 1 846 2 view .LVU8407
 31375              	.LBB4487:
 31376              	.LBB4482:
 31377              	.LBB4477:
 31378              	.LBB4475:
 31379              	.LBB4471:
 31380              	.LBI4471:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 31381              		.loc 1 815 12 view .LVU8408
 31382              	.LBB4472:
 816:src/xeq.c     **** }
 31383              		.loc 1 816 2 view .LVU8409
 816:src/xeq.c     **** }
 31384              		.loc 1 816 9 is_stmt 0 view .LVU8410
 31385 052c 6421     		movs	r1, #100
 31386 052e 1EA8     		add	r0, sp, #120
 31387              	.LVL2409:
 816:src/xeq.c     **** }
 31388              		.loc 1 816 9 view .LVU8411
 31389 0530 FFF7FEFF 		bl	getRegister
 31390              	.LVL2410:
 816:src/xeq.c     **** }
 31391              		.loc 1 816 9 view .LVU8412
 31392              	.LBE4472:
 31393              	.LBE4471:
 31394              	.LBE4475:
 31395              	.LBE4477:
 31396              	.LBE4482:
 31397              	.LBE4487:
 847:src/xeq.c     **** }
 31398              		.loc 1 847 2 is_stmt 1 view .LVU8413
 31399              	.LBB4488:
 31400              	.LBB4483:
 31401              	.LBB4478:
 31402              	.LBB4476:
 31403              	.LBB4473:
 31404              	.LBI4473:
 823:src/xeq.c     **** 	getRegister(y, regY_idx);
ARM GAS  /tmp/ccQlyisH.s 			page 797


 31405              		.loc 1 823 6 view .LVU8414
 31406              	.LBB4474:
 824:src/xeq.c     **** }
 31407              		.loc 1 824 2 view .LVU8415
 31408 0534 6521     		movs	r1, #101
 31409 0536 27A8     		add	r0, sp, #156
 31410              	.LVL2411:
 824:src/xeq.c     **** }
 31411              		.loc 1 824 2 is_stmt 0 view .LVU8416
 31412 0538 FFF7FEFF 		bl	getRegister
 31413              	.LVL2412:
 824:src/xeq.c     **** }
 31414              		.loc 1 824 2 view .LVU8417
 31415              	.LBE4474:
 31416              	.LBE4473:
 31417              	.LBE4476:
4683:src/xeq.c     **** 				setlastXY();
 31418              		.loc 1 4683 5 is_stmt 1 view .LVU8418
 31419 053c 27AB     		add	r3, sp, #156
 31420 053e 1EAA     		add	r2, sp, #120
 31421 0540 39A9     		add	r1, sp, #228
 31422 0542 30A8     		add	r0, sp, #192
 31423 0544 A847     		blx	r5
 31424              	.LVL2413:
4684:src/xeq.c     **** 				setXY(&rx, &ry);
 31425              		.loc 1 4684 5 view .LVU8419
 31426 0546 FFF7FEFF 		bl	setlastXY
 31427              	.LVL2414:
4685:src/xeq.c     **** 				set_was_complex();
 31428              		.loc 1 4685 5 view .LVU8420
 31429              	.L2423:
4685:src/xeq.c     **** 				set_was_complex();
 31430              		.loc 1 4685 5 is_stmt 0 view .LVU8421
 31431              	.LBE4478:
 31432              	.LBE4483:
 31433              	.LBE4488:
 31434              	.LBB4489:
 31435              	.LBB4490:
 31436              	.LBB4491:
4764:src/xeq.c     **** 				set_was_complex();
 31437              		.loc 1 4764 5 is_stmt 1 view .LVU8422
 31438 054a 39A9     		add	r1, sp, #228
 31439 054c 30A8     		add	r0, sp, #192
 31440 054e FFF7FEFF 		bl	setXY
 31441              	.LVL2415:
4765:src/xeq.c     **** 			}
 31442              		.loc 1 4765 5 view .LVU8423
 31443              	.LBB4492:
 31444              	.LBI4492:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 31445              		.loc 1 530 13 view .LVU8424
 31446              	.LBB4493:
 531:src/xeq.c     **** }
 31447              		.loc 1 531 2 view .LVU8425
 531:src/xeq.c     **** }
 31448              		.loc 1 531 20 is_stmt 0 view .LVU8426
 31449 0552 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
ARM GAS  /tmp/ccQlyisH.s 			page 798


 31450 0554 274B     		ldr	r3, .L2478+8
 31451 0556 0121     		movs	r1, #1
 31452 0558 61F38712 		bfi	r2, r1, #6, #2
 31453 055c 2275     		strb	r2, [r4, #20]
 31454 055e 1A68     		ldr	r2, [r3]
 532:src/xeq.c     **** 
 31455              		.loc 1 532 1 view .LVU8427
 31456 0560 0FE6     		b	.L2153
 31457              	.LVL2416:
 31458              	.L2180:
 532:src/xeq.c     **** 
 31459              		.loc 1 532 1 view .LVU8428
 31460              	.LBE4493:
 31461              	.LBE4492:
 31462              	.LBE4491:
 31463              	.LBE4490:
 31464              	.LBE4489:
5338:src/xeq.c     **** 		default:	illegal(op);
 31465              		.loc 1 5338 19 is_stmt 1 view .LVU8429
 31466              	.LBB4532:
 31467              	.LBI4489:
4745:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
 31468              		.loc 1 4745 13 view .LVU8430
 31469              	.LBB4525:
4746:src/xeq.c     **** 	unsigned int f;
 31470              		.loc 1 4746 2 view .LVU8431
4747:src/xeq.c     **** 
 31471              		.loc 1 4747 2 view .LVU8432
4749:src/xeq.c     **** 
 31472              		.loc 1 4749 2 view .LVU8433
 31473              	.LBB4498:
 31474              	.LBI4498:
1301:src/xeq.c     **** 	process_cmdline();
 31475              		.loc 1 1301 6 view .LVU8434
 31476              	.LBE4498:
 31477              	.LBE4525:
 31478              	.LBE4532:
1302:src/xeq.c     **** 	set_lift();
 31479              		.loc 1 1302 2 view .LVU8435
 31480              	.LBB4533:
 31481              	.LBB4526:
 31482              	.LBB4509:
 31483              	.LBB4499:
 31484              	.LBI4499:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 31485              		.loc 1 1195 6 view .LVU8436
 31486              	.LBB4500:
1196:src/xeq.c     **** 
 31487              		.loc 1 1196 2 view .LVU8437
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31488              		.loc 1 1198 2 view .LVU8438
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31489              		.loc 1 1198 5 is_stmt 0 view .LVU8439
 31490 0562 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31491 0564 002B     		cmp	r3, #0
 31492 0566 40F08681 		bne	.L2461
 31493              	.L2264:
ARM GAS  /tmp/ccQlyisH.s 			page 799


1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31494              		.loc 1 1198 5 view .LVU8440
 31495              	.LBE4500:
 31496              	.LBE4499:
 31497              	.LBE4509:
 31498              	.LBE4526:
 31499              	.LBE4533:
1303:src/xeq.c     **** }
 31500              		.loc 1 1303 2 is_stmt 1 view .LVU8441
 31501              	.LBB4534:
 31502              	.LBB4527:
 31503              	.LBB4510:
 31504              	.LBB4502:
 31505              	.LBI4502:
 758:src/xeq.c     ****     State2.state_lift = 1;
 31506              		.loc 1 758 6 view .LVU8442
 31507              	.LBB4503:
 759:src/xeq.c     **** }
 31508              		.loc 1 759 5 view .LVU8443
 759:src/xeq.c     **** }
 31509              		.loc 1 759 23 is_stmt 0 view .LVU8444
 31510 056a E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31511              	.LBE4503:
 31512              	.LBE4502:
 31513              	.LBE4510:
4751:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 31514              		.loc 1 4751 4 view .LVU8445
 31515 056c EDB2     		uxtb	r5, r5
 31516              	.LVL2417:
 31517              	.LBB4511:
 31518              	.LBB4506:
 31519              	.LBB4504:
 759:src/xeq.c     **** }
 31520              		.loc 1 759 23 view .LVU8446
 31521 056e 43F04003 		orr	r3, r3, #64
 31522              	.LBE4504:
 31523              	.LBE4506:
 31524              	.LBE4511:
4752:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31525              		.loc 1 4752 5 view .LVU8447
 31526 0572 342D     		cmp	r5, #52
 31527              	.LBB4512:
 31528              	.LBB4507:
 31529              	.LBB4505:
 759:src/xeq.c     **** }
 31530              		.loc 1 759 23 view .LVU8448
 31531 0574 E375     		strb	r3, [r4, #23]
 31532              	.LBE4505:
 31533              	.LBE4507:
 31534              	.LBE4512:
4751:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 31535              		.loc 1 4751 2 is_stmt 1 view .LVU8449
 31536              	.LVL2418:
4752:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31537              		.loc 1 4752 2 view .LVU8450
4752:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31538              		.loc 1 4752 5 is_stmt 0 view .LVU8451
ARM GAS  /tmp/ccQlyisH.s 			page 800


 31539 0576 31D8     		bhi	.L2265
4753:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31540              		.loc 1 4753 3 is_stmt 1 view .LVU8452
4753:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31541              		.loc 1 4753 9 is_stmt 0 view .LVU8453
 31542 0578 214B     		ldr	r3, .L2478+20
 31543 057a 05EB4505 		add	r5, r5, r5, lsl #1
 31544              	.LVL2419:
4753:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31545              		.loc 1 4753 9 view .LVU8454
 31546 057e 03EBC505 		add	r5, r3, r5, lsl #3
 31547 0582 6D68     		ldr	r5, [r5, #4]
4753:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31548              		.loc 1 4753 6 view .LVU8455
 31549 0584 002D     		cmp	r5, #0
 31550 0586 00F07F82 		beq	.L2266
 31551              	.LBB4513:
4754:src/xeq.c     **** 			if (dispatch_xrom(fp))
 31552              		.loc 1 4754 4 is_stmt 1 view .LVU8456
 31553              	.LVL2420:
4755:src/xeq.c     **** 				return;
 31554              		.loc 1 4755 4 view .LVU8457
4755:src/xeq.c     **** 				return;
 31555              		.loc 1 4755 8 is_stmt 0 view .LVU8458
 31556 058a 2846     		mov	r0, r5
 31557 058c FFF7FEFF 		bl	dispatch_xrom
 31558              	.LVL2421:
4755:src/xeq.c     **** 				return;
 31559              		.loc 1 4755 7 view .LVU8459
 31560 0590 0028     		cmp	r0, #0
 31561 0592 60D1     		bne	.L2150
4758:src/xeq.c     **** 
 31562              		.loc 1 4758 5 is_stmt 1 view .LVU8460
 31563              	.LVL2422:
 31564              	.LBB4494:
 31565              	.LBI4494:
 870:src/xeq.c     **** 	getXYZ(x, y, z);
 31566              		.loc 1 870 6 view .LVU8461
 31567              	.LBB4495:
 871:src/xeq.c     **** 	getT(t);
 31568              		.loc 1 871 2 view .LVU8462
 31569 0594 15AB     		add	r3, sp, #84
 31570              	.LVL2423:
 871:src/xeq.c     **** 	getT(t);
 31571              		.loc 1 871 2 is_stmt 0 view .LVU8463
 31572 0596 0DF1300A 		add	r10, sp, #48
 31573              	.LVL2424:
 871:src/xeq.c     **** 	getT(t);
 31574              		.loc 1 871 2 view .LVU8464
 31575 059a 1EAA     		add	r2, sp, #120
 31576              	.LVL2425:
 871:src/xeq.c     **** 	getT(t);
 31577              		.loc 1 871 2 view .LVU8465
 31578 059c 1946     		mov	r1, r3
 31579 059e 5046     		mov	r0, r10
 31580 05a0 FFF7FEFF 		bl	getXYZ
 31581              	.LVL2426:
ARM GAS  /tmp/ccQlyisH.s 			page 801


 872:src/xeq.c     **** }
 31582              		.loc 1 872 2 is_stmt 1 view .LVU8466
 31583              	.LBB4496:
 31584              	.LBI4496:
 841:src/xeq.c     **** 	getRegister(t, regT_idx);
 31585              		.loc 1 841 13 view .LVU8467
 31586              	.LBB4497:
 842:src/xeq.c     **** }
 31587              		.loc 1 842 2 view .LVU8468
 31588 05a4 27A8     		add	r0, sp, #156
 31589              	.LVL2427:
 842:src/xeq.c     **** }
 31590              		.loc 1 842 2 is_stmt 0 view .LVU8469
 31591 05a6 6721     		movs	r1, #103
 31592 05a8 FFF7FEFF 		bl	getRegister
 31593              	.LVL2428:
 842:src/xeq.c     **** }
 31594              		.loc 1 842 2 view .LVU8470
 31595              	.LBE4497:
 31596              	.LBE4496:
 31597              	.LBE4495:
 31598              	.LBE4494:
4760:src/xeq.c     **** 
 31599              		.loc 1 4760 5 is_stmt 1 view .LVU8471
 31600 05ac 15AB     		add	r3, sp, #84
 31601 05ae 1EAA     		add	r2, sp, #120
 31602 05b0 39A9     		add	r1, sp, #228
 31603 05b2 30A8     		add	r0, sp, #192
 31604 05b4 CDE900A3 		strd	r10, r3, [sp]
 31605 05b8 27AB     		add	r3, sp, #156
 31606 05ba A847     		blx	r5
 31607              	.LVL2429:
4762:src/xeq.c     **** 				lower2();
 31608              		.loc 1 4762 5 view .LVU8472
 31609 05bc FFF7FEFF 		bl	setlastXY
 31610              	.LVL2430:
4763:src/xeq.c     **** 				setXY(&xr, &yr);
 31611              		.loc 1 4763 5 view .LVU8473
 31612 05c0 FFF7FEFF 		bl	lower2
 31613              	.LVL2431:
 31614 05c4 C1E7     		b	.L2423
 31615              	.LVL2432:
 31616              	.L2451:
4763:src/xeq.c     **** 				setXY(&xr, &yr);
 31617              		.loc 1 4763 5 is_stmt 0 view .LVU8474
 31618              	.LBE4513:
 31619              	.LBE4527:
 31620              	.LBE4534:
 31621              	.LBB4535:
 31622              	.LBB4158:
5250:src/xeq.c     **** 		return;
 31623              		.loc 1 5250 3 is_stmt 1 view .LVU8475
5250:src/xeq.c     **** 		return;
 31624              		.loc 1 5250 3 view .LVU8476
 31625              	.LBB4152:
 31626              	.LBI4147:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/ccQlyisH.s 			page 802


 31627              		.loc 1 537 5 view .LVU8477
 31628              	.LBB4151:
 538:src/xeq.c     **** 		Error = e;
 31629              		.loc 1 538 2 view .LVU8478
 538:src/xeq.c     **** 		Error = e;
 31630              		.loc 1 538 12 is_stmt 0 view .LVU8479
 31631 05c6 0B4B     		ldr	r3, .L2478+8
 31632 05c8 DFF838A0 		ldr	r10, .L2478+24
 31633              	.LVL2433:
 538:src/xeq.c     **** 		Error = e;
 31634              		.loc 1 538 12 view .LVU8480
 31635 05cc 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 31636              		.loc 1 538 5 view .LVU8481
 31637 05ce 0028     		cmp	r0, #0
 31638 05d0 7FF4FBAD 		bne	.L2283
 31639 05d4 F7E5     		b	.L2158
 31640              	.LVL2434:
 31641              	.L2450:
 538:src/xeq.c     **** 		Error = e;
 31642              		.loc 1 538 5 view .LVU8482
 31643              	.LBE4151:
 31644              	.LBE4152:
 31645              	.LBB4153:
 31646              	.LBB4135:
 31647              	.LBB4129:
 31648 05d6 FFF7FEFF 		bl	process_cmdline.part.0
 31649              	.LVL2435:
 31650 05da ACE5     		b	.L2146
 31651              	.LVL2436:
 31652              	.L2265:
 538:src/xeq.c     **** 		Error = e;
 31653              		.loc 1 538 5 view .LVU8483
 31654              	.LBE4129:
 31655              	.LBE4135:
 31656              	.LBE4153:
 31657              	.LBE4158:
 31658              	.LBE4535:
 31659              	.LBB4536:
 31660              	.LBB4528:
4770:src/xeq.c     **** }
 31661              		.loc 1 4770 3 is_stmt 1 view .LVU8484
4770:src/xeq.c     **** }
 31662              		.loc 1 4770 3 view .LVU8485
 31663              	.LBB4514:
 31664              	.LBI4514:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31665              		.loc 1 537 5 view .LVU8486
 31666              	.LBB4515:
 538:src/xeq.c     **** 		Error = e;
 31667              		.loc 1 538 2 view .LVU8487
 538:src/xeq.c     **** 		Error = e;
 31668              		.loc 1 538 12 is_stmt 0 view .LVU8488
 31669 05dc 054B     		ldr	r3, .L2478+8
 31670 05de 1A68     		ldr	r2, [r3]
 538:src/xeq.c     **** 		Error = e;
 31671              		.loc 1 538 5 view .LVU8489
ARM GAS  /tmp/ccQlyisH.s 			page 803


 31672 05e0 002A     		cmp	r2, #0
 31673 05e2 7FF49BAD 		bne	.L2164
 31674              	.LVL2437:
 31675              	.LBB4516:
 31676              	.LBI4516:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31677              		.loc 1 537 5 is_stmt 1 view .LVU8490
 31678              	.LBB4517:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31679              		.loc 1 539 3 view .LVU8491
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31680              		.loc 1 539 9 is_stmt 0 view .LVU8492
 31681 05e6 0322     		movs	r2, #3
 31682 05e8 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31683              		.loc 1 540 3 is_stmt 1 view .LVU8493
 31684              	.LVL2438:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31685              		.loc 1 540 3 is_stmt 0 view .LVU8494
 31686              	.LBE4517:
 31687              	.LBE4516:
 31688              	.LBE4515:
 31689              	.LBE4514:
4770:src/xeq.c     **** }
 31690              		.loc 1 4770 3 is_stmt 1 view .LVU8495
 31691              	.LBE4528:
 31692              	.LBE4536:
5339:src/xeq.c     **** 		}
 31693              		.loc 1 5339 12 view .LVU8496
5349:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31694              		.loc 1 5349 2 view .LVU8497
 31695 05ea 97E5     		b	.L2164
 31696              	.L2479:
 31697              		.align	2
 31698              	.L2478:
 31699 05ec 00000000 		.word	argcmds
 31700 05f0 00000000 		.word	niladics
 31701 05f4 00000000 		.word	Error
 31702 05f8 00000000 		.word	monfuncs
 31703 05fc 00000000 		.word	trifuncs
 31704 0600 00000000 		.word	dyfuncs
 31705 0604 00000000 		.word	Running
 31706              	.LVL2439:
 31707              	.L2409:
 31708              	.LBB4537:
 31709              	.LBB4351:
4592:src/xeq.c     **** 			bad_mode_error();
 31710              		.loc 1 4592 23 is_stmt 0 view .LVU8498
 31711 0608 03EB0511 		add	r1, r3, r5, lsl #4
 31712 060c 2A01     		lsls	r2, r5, #4
4592:src/xeq.c     **** 			bad_mode_error();
 31713              		.loc 1 4592 20 view .LVU8499
 31714 060e 91F90410 		ldrsb	r1, [r1, #4]
 31715 0612 0029     		cmp	r1, #0
 31716 0614 BFF6ABAE 		bge	.L2225
4593:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
 31717              		.loc 1 4593 4 is_stmt 1 view .LVU8500
ARM GAS  /tmp/ccQlyisH.s 			page 804


 31718              	.LBB4337:
 31719              	.LBI4337:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 31720              		.loc 1 566 6 view .LVU8501
 31721              	.LBE4337:
 31722              	.LBE4351:
 31723              	.LBE4537:
 567:src/xeq.c     **** }
 31724              		.loc 1 567 2 view .LVU8502
 31725              	.LVL2440:
 31726              	.LBB4538:
 31727              	.LBB4352:
 31728              	.LBB4342:
 31729              	.LBB4338:
 31730              	.LBI4338:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31731              		.loc 1 537 5 view .LVU8503
 31732              	.LBB4339:
 538:src/xeq.c     **** 		Error = e;
 31733              		.loc 1 538 2 view .LVU8504
 538:src/xeq.c     **** 		Error = e;
 31734              		.loc 1 538 12 is_stmt 0 view .LVU8505
 31735 0618 A74B     		ldr	r3, .L2480
 538:src/xeq.c     **** 		Error = e;
 31736              		.loc 1 538 5 view .LVU8506
 31737 061a 1A68     		ldr	r2, [r3]
 31738 061c 0AB9     		cbnz	r2, .L2226
 31739              	.LVL2441:
 31740              	.LBB4340:
 31741              	.LBI4340:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31742              		.loc 1 537 5 is_stmt 1 view .LVU8507
 31743              	.LBB4341:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31744              		.loc 1 539 3 view .LVU8508
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31745              		.loc 1 539 9 is_stmt 0 view .LVU8509
 31746 061e 0D22     		movs	r2, #13
 31747 0620 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31748              		.loc 1 540 3 is_stmt 1 view .LVU8510
 31749              	.LVL2442:
 31750              	.L2226:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31751              		.loc 1 540 3 is_stmt 0 view .LVU8511
 31752              	.LBE4341:
 31753              	.LBE4340:
 31754              	.LBE4339:
 31755              	.LBE4338:
 31756              	.LBE4342:
4609:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 31757              		.loc 1 4609 3 is_stmt 1 view .LVU8512
4614:src/xeq.c     **** #endif
 31758              		.loc 1 4614 2 view .LVU8513
4614:src/xeq.c     **** #endif
 31759              		.loc 1 4614 5 is_stmt 0 view .LVU8514
 31760 0622 3F2D     		cmp	r5, #63
ARM GAS  /tmp/ccQlyisH.s 			page 805


 31761 0624 7FF4C3AE 		bne	.L2234
 31762              	.LVL2443:
4614:src/xeq.c     **** #endif
 31763              		.loc 1 4614 5 view .LVU8515
 31764              	.LBE4352:
 31765              	.LBE4538:
5339:src/xeq.c     **** 		}
 31766              		.loc 1 5339 12 is_stmt 1 view .LVU8516
5349:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31767              		.loc 1 5349 2 view .LVU8517
 31768 0628 1868     		ldr	r0, [r3]
 31769              	.L2430:
5349:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31770              		.loc 1 5349 2 is_stmt 0 view .LVU8518
 31771 062a DFF8B0A2 		ldr	r10, .L2480+36
 31772 062e CCE5     		b	.L2283
 31773              	.LVL2444:
 31774              	.L2171:
 31775              	.LBB4539:
 31776              	.LBB4120:
5205:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31777              		.loc 1 5205 7 is_stmt 1 view .LVU8519
5205:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31778              		.loc 1 5205 23 is_stmt 0 view .LVU8520
 31779 0630 1344     		add	r3, r3, r2
 31780 0632 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
5205:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31781              		.loc 1 5205 10 view .LVU8521
 31782 0634 DB06     		lsls	r3, r3, #27
 31783 0636 00F1E080 		bmi	.L2462
 31784              	.L2173:
 31785              	.LBB4098:
5211:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 31786              		.loc 1 5211 3 is_stmt 1 view .LVU8522
 31787              	.LVL2445:
5212:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 31788              		.loc 1 5212 3 view .LVU8523
 31789              	.LBB4099:
 31790              	.LBI4099:
4461:src/xeq.c     **** {
 31791              		.loc 1 4461 24 view .LVU8524
 31792              	.LBB4100:
4463:src/xeq.c     **** 	if (xp < xrom)
 31793              		.loc 1 4463 2 view .LVU8525
4463:src/xeq.c     **** 	if (xp < xrom)
 31794              		.loc 1 4463 59 is_stmt 0 view .LVU8526
 31795 063a 089A     		ldr	r2, [sp, #32]
4464:src/xeq.c     **** 		return NULL;
 31796              		.loc 1 4464 5 view .LVU8527
 31797 063c 9F4B     		ldr	r3, .L2480+4
4463:src/xeq.c     **** 	if (xp < xrom)
 31798              		.loc 1 4463 59 view .LVU8528
 31799 063e 22F00102 		bic	r2, r2, #1
 31800              	.LVL2446:
4464:src/xeq.c     **** 		return NULL;
 31801              		.loc 1 4464 2 is_stmt 1 view .LVU8529
4464:src/xeq.c     **** 		return NULL;
ARM GAS  /tmp/ccQlyisH.s 			page 806


 31802              		.loc 1 4464 5 is_stmt 0 view .LVU8530
 31803 0642 9A42     		cmp	r2, r3
 31804 0644 6AD2     		bcs	.L2463
 31805              	.LVL2447:
 31806              	.L2175:
4464:src/xeq.c     **** 		return NULL;
 31807              		.loc 1 4464 5 view .LVU8531
 31808              	.LBE4100:
 31809              	.LBE4099:
5234:src/xeq.c     **** 		}
 31810              		.loc 1 5234 4 is_stmt 1 view .LVU8532
 31811 0646 0846     		mov	r0, r1
 31812 0648 089B     		ldr	r3, [sp, #32]
 31813 064a 5146     		mov	r1, r10
 31814              	.LVL2448:
5234:src/xeq.c     **** 		}
 31815              		.loc 1 5234 4 is_stmt 0 view .LVU8533
 31816 064c 9847     		blx	r3
 31817              	.LVL2449:
5236:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31818              		.loc 1 5236 3 is_stmt 1 view .LVU8534
5236:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31819              		.loc 1 5236 6 is_stmt 0 view .LVU8535
 31820 064e BAF1840F 		cmp	r10, #132
 31821 0652 7FF490AD 		bne	.L2421
 31822              	.LVL2450:
 31823              	.L2150:
5236:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31824              		.loc 1 5236 6 view .LVU8536
 31825 0656 984B     		ldr	r3, .L2480
 31826              	.L2422:
 31827 0658 1A68     		ldr	r2, [r3]
 31828 065a 92E5     		b	.L2153
 31829              	.LVL2451:
 31830              	.L2162:
5236:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31831              		.loc 1 5236 6 view .LVU8537
 31832              	.LBE4098:
 31833              	.LBB4109:
5177:src/xeq.c     **** 			if ((regval >> 32) != 0)
 31834              		.loc 1 5177 4 is_stmt 1 view .LVU8538
5177:src/xeq.c     **** 			if ((regval >> 32) != 0)
 31835              		.loc 1 5177 13 is_stmt 0 view .LVU8539
 31836 065c 0846     		mov	r0, r1
 31837 065e 39A9     		add	r1, sp, #228
 31838 0660 0992     		str	r2, [sp, #36]
 31839 0662 FFF7FEFF 		bl	get_reg_n_int_sgn
 31840              	.LVL2452:
5178:src/xeq.c     **** 				goto range;
 31841              		.loc 1 5178 16 view .LVU8540
 31842 0666 0023     		movs	r3, #0
 31843 0668 0691     		str	r1, [sp, #24]
 31844 066a 0793     		str	r3, [sp, #28]
 31845              	.LVL2453:
5178:src/xeq.c     **** 				goto range;
 31846              		.loc 1 5178 4 is_stmt 1 view .LVU8541
5178:src/xeq.c     **** 				goto range;
ARM GAS  /tmp/ccQlyisH.s 			page 807


 31847              		.loc 1 5178 7 is_stmt 0 view .LVU8542
 31848 066c DDE90623 		ldrd	r2, [sp, #24]
 31849 0670 1343     		orrs	r3, r2, r3
 31850 0672 16D1     		bne	.L2166
5180:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 31851              		.loc 1 5180 4 is_stmt 1 view .LVU8543
5181:src/xeq.c     **** 				// negative arguments address local registers or flags
 31852              		.loc 1 5181 7 is_stmt 0 view .LVU8544
 31853 0674 15F0080F 		tst	r5, #8
 31854 0678 914B     		ldr	r3, .L2480+8
 31855 067a 099A     		ldr	r2, [sp, #36]
5180:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 31856              		.loc 1 5180 8 view .LVU8545
 31857 067c 0146     		mov	r1, r0
 31858              	.LVL2454:
5181:src/xeq.c     **** 				// negative arguments address local registers or flags
 31859              		.loc 1 5181 4 is_stmt 1 view .LVU8546
5181:src/xeq.c     **** 				// negative arguments address local registers or flags
 31860              		.loc 1 5181 7 is_stmt 0 view .LVU8547
 31861 067e 02D0     		beq	.L2160
5181:src/xeq.c     **** 				// negative arguments address local registers or flags
 31862              		.loc 1 5181 27 view .LVU8548
 31863 0680 3998     		ldr	r0, [sp, #228]
 31864              	.LVL2455:
5181:src/xeq.c     **** 				// negative arguments address local registers or flags
 31865              		.loc 1 5181 27 view .LVU8549
 31866 0682 00B1     		cbz	r0, .L2160
5183:src/xeq.c     **** 			}
 31867              		.loc 1 5183 5 is_stmt 1 view .LVU8550
5183:src/xeq.c     **** 			}
 31868              		.loc 1 5183 9 is_stmt 0 view .LVU8551
 31869 0684 7031     		adds	r1, r1, #112
 31870              	.LVL2456:
 31871              	.L2160:
5183:src/xeq.c     **** 			}
 31872              		.loc 1 5183 9 view .LVU8552
 31873              	.LBE4109:
5191:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31874              		.loc 1 5191 2 is_stmt 1 view .LVU8553
5191:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31875              		.loc 1 5191 18 is_stmt 0 view .LVU8554
 31876 0686 9818     		adds	r0, r3, r2
 31877 0688 4079     		ldrb	r0, [r0, #5]	@ zero_extendqisi2
5191:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31878              		.loc 1 5191 5 view .LVU8555
 31879 068a 8507     		lsls	r5, r0, #30
 31880 068c 3CD5     		bpl	.L2168
5193:src/xeq.c     **** 	}
 31881              		.loc 1 5193 9 view .LVU8556
 31882 068e 5046     		mov	r0, r10
 31883 0690 CDE90512 		strd	r1, r2, [sp, #20]
 31884              	.LVL2457:
5193:src/xeq.c     **** 	}
 31885              		.loc 1 5193 9 view .LVU8557
 31886 0694 FFF7FEFF 		bl	get_reg_limit
 31887              	.LVL2458:
5193:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQlyisH.s 			page 808


 31888              		.loc 1 5193 9 view .LVU8558
 31889 0698 0599     		ldr	r1, [sp, #20]
 31890 069a 894B     		ldr	r3, .L2480+8
 31891 069c 069A     		ldr	r2, [sp, #24]
 31892              	.LVL2459:
 31893              	.L2169:
5201:src/xeq.c     **** 		// Argument is too large
 31894              		.loc 1 5201 2 is_stmt 1 view .LVU8559
5201:src/xeq.c     **** 		// Argument is too large
 31895              		.loc 1 5201 5 is_stmt 0 view .LVU8560
 31896 069e 8142     		cmp	r1, r0
 31897 06a0 C6D9     		bls	.L2171
 31898              	.LVL2460:
 31899              	.L2166:
5203:src/xeq.c     **** 	}
 31900              		.loc 1 5203 9 is_stmt 1 view .LVU8561
 31901              	.LBB4110:
 31902              	.LBI4110:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31903              		.loc 1 537 5 view .LVU8562
 31904              	.LBB4111:
 538:src/xeq.c     **** 		Error = e;
 31905              		.loc 1 538 2 view .LVU8563
 538:src/xeq.c     **** 		Error = e;
 31906              		.loc 1 538 12 is_stmt 0 view .LVU8564
 31907 06a2 854B     		ldr	r3, .L2480
 31908 06a4 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 31909              		.loc 1 538 5 view .LVU8565
 31910 06a6 0028     		cmp	r0, #0
 31911 06a8 BFD1     		bne	.L2430
 31912              	.LVL2461:
 31913              	.LBB4112:
 31914              	.LBI4112:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31915              		.loc 1 537 5 is_stmt 1 view .LVU8566
 31916              	.LBB4113:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31917              		.loc 1 539 3 view .LVU8567
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31918              		.loc 1 539 9 is_stmt 0 view .LVU8568
 31919 06aa 0820     		movs	r0, #8
 31920 06ac DFF82CA2 		ldr	r10, .L2480+36
 31921              	.LVL2462:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31922              		.loc 1 539 9 view .LVU8569
 31923 06b0 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31924              		.loc 1 540 3 is_stmt 1 view .LVU8570
 31925 06b2 8AE5     		b	.L2283
 31926              	.LVL2463:
 31927              	.L2454:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31928              		.loc 1 540 3 is_stmt 0 view .LVU8571
 31929 06b4 0393     		str	r3, [sp, #12]
 31930              	.LVL2464:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/ccQlyisH.s 			page 809


 31931              		.loc 1 540 3 view .LVU8572
 31932              	.LBE4113:
 31933              	.LBE4112:
 31934              	.LBE4111:
 31935              	.LBE4110:
 31936              	.LBE4120:
 31937              	.LBE4539:
 31938              	.LBB4540:
 31939              	.LBB4303:
 31940              	.LBB4295:
 31941 06b6 FFF7FEFF 		bl	process_cmdline.part.0
 31942              	.LVL2465:
 31943 06ba 039B     		ldr	r3, [sp, #12]
 31944 06bc A9E5     		b	.L2270
 31945              	.L2455:
 31946              	.LBE4295:
 31947              	.LBE4303:
 31948              	.LBE4540:
5368:src/xeq.c     **** 					// Restore the global return stack
 31949              		.loc 1 5368 5 is_stmt 1 view .LVU8573
5368:src/xeq.c     **** 					// Restore the global return stack
 31950              		.loc 1 5368 9 is_stmt 0 view .LVU8574
 31951 06be 814D     		ldr	r5, .L2480+12
5368:src/xeq.c     **** 					// Restore the global return stack
 31952              		.loc 1 5368 8 view .LVU8575
 31953 06c0 95F90110 		ldrsb	r1, [r5, #1]
5368:src/xeq.c     **** 					// Restore the global return stack
 31954              		.loc 1 5368 9 view .LVU8576
 31955 06c4 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
5368:src/xeq.c     **** 					// Restore the global return stack
 31956              		.loc 1 5368 8 view .LVU8577
 31957 06c6 8142     		cmp	r1, r0
 31958 06c8 BFF603AE 		bge	.L2273
5370:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31959              		.loc 1 5370 6 is_stmt 1 view .LVU8578
5370:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31960              		.loc 1 5370 13 is_stmt 0 view .LVU8579
 31961 06cc 7E49     		ldr	r1, .L2480+16
5371:src/xeq.c     **** 					// Restore private stack to normal stack
 31962              		.loc 1 5371 6 view .LVU8580
 31963 06ce D7F800C0 		ldr	ip, [r7]
5370:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31964              		.loc 1 5370 13 view .LVU8581
 31965 06d2 AE68     		ldr	r6, [r5, #8]
 31966 06d4 0E60     		str	r6, [r1]
5371:src/xeq.c     **** 					// Restore private stack to normal stack
 31967              		.loc 1 5371 6 is_stmt 1 view .LVU8582
5373:src/xeq.c     **** 						// Need space for double precision stack
 31968              		.loc 1 5373 9 is_stmt 0 view .LVU8583
 31969 06d6 12F00808 		ands	r8, r2, #8
5371:src/xeq.c     **** 					// Restore private stack to normal stack
 31970              		.loc 1 5371 16 view .LVU8584
 31971 06da A989     		ldrh	r1, [r5, #12]
 31972 06dc ACF8E217 		strh	r1, [ip, #2018]	@ movhi
5373:src/xeq.c     **** 						// Need space for double precision stack
 31973              		.loc 1 5373 6 is_stmt 1 view .LVU8585
5373:src/xeq.c     **** 						// Need space for double precision stack
ARM GAS  /tmp/ccQlyisH.s 			page 810


 31974              		.loc 1 5373 9 is_stmt 0 view .LVU8586
 31975 06e0 00F0DB81 		beq	.L2274
5377:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31976              		.loc 1 5377 6 is_stmt 1 view .LVU8587
5377:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31977              		.loc 1 5377 20 is_stmt 0 view .LVU8588
 31978 06e4 60F3C712 		bfi	r2, r0, #7, #1
 31979 06e8 6A70     		strb	r2, [r5, #1]
5378:src/xeq.c     **** 						UState.mode_double = 1;
 31980              		.loc 1 5378 6 is_stmt 1 view .LVU8589
 31981              	.L2275:
5379:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 31982              		.loc 1 5379 7 view .LVU8590
5379:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 31983              		.loc 1 5379 26 is_stmt 0 view .LVU8591
 31984 06ea 3A68     		ldr	r2, [r7]
 31985 06ec 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 31986 06f0 43F04003 		orr	r3, r3, #64
 31987 06f4 82F8E937 		strb	r3, [r2, #2025]
5380:src/xeq.c     **** 					}
 31988              		.loc 1 5380 7 is_stmt 1 view .LVU8592
5380:src/xeq.c     **** 					}
 31989              		.loc 1 5380 13 is_stmt 0 view .LVU8593
 31990 06f8 6420     		movs	r0, #100
 31991 06fa FFF7FEFF 		bl	get_reg_n
 31992              	.LVL2466:
5380:src/xeq.c     **** 					}
 31993              		.loc 1 5380 7 view .LVU8594
 31994 06fe 7349     		ldr	r1, .L2480+20
 31995 0700 C022     		movs	r2, #192
 31996 0702 FFF7FEFF 		bl	xcopy
 31997              	.LVL2467:
 31998 0706 E4E5     		b	.L2273
 31999              	.LVL2468:
 32000              	.L2168:
 32001              	.LBB4541:
 32002              	.LBB4121:
5195:src/xeq.c     **** 		if (LocalRegs == 0)
 32003              		.loc 1 5195 7 is_stmt 1 view .LVU8595
5195:src/xeq.c     **** 		if (LocalRegs == 0)
 32004              		.loc 1 5195 10 is_stmt 0 view .LVU8596
 32005 0708 4006     		lsls	r0, r0, #25
 32006 070a 74D5     		bpl	.L2464
5196:src/xeq.c     **** 			lim = NUMFLG - 1;
 32007              		.loc 1 5196 3 is_stmt 1 view .LVU8597
5196:src/xeq.c     **** 			lim = NUMFLG - 1;
 32008              		.loc 1 5196 7 is_stmt 0 view .LVU8598
 32009 070c 3868     		ldr	r0, [r7]
5196:src/xeq.c     **** 			lim = NUMFLG - 1;
 32010              		.loc 1 5196 6 view .LVU8599
 32011 070e B0F9DE07 		ldrsh	r0, [r0, #2014]
5199:src/xeq.c     **** 	}
 32012              		.loc 1 5199 8 view .LVU8600
 32013 0712 0028     		cmp	r0, #0
 32014 0714 0CBF     		ite	eq
 32015 0716 6F20     		moveq	r0, #111
 32016 0718 7F20     		movne	r0, #127
ARM GAS  /tmp/ccQlyisH.s 			page 811


 32017 071a C0E7     		b	.L2169
 32018              	.LVL2469:
 32019              	.L2463:
 32020              	.LBB4114:
 32021              	.LBB4102:
 32022              	.LBB4101:
4468:src/xeq.c     **** 		return NULL;
 32023              		.loc 1 4468 2 is_stmt 1 view .LVU8601
4468:src/xeq.c     **** 		return NULL;
 32024              		.loc 1 4468 17 is_stmt 0 view .LVU8602
 32025 071c 6C48     		ldr	r0, .L2480+24
 32026              	.LVL2470:
4468:src/xeq.c     **** 		return NULL;
 32027              		.loc 1 4468 17 view .LVU8603
 32028 071e 0088     		ldrh	r0, [r0]
 32029 0720 03EB4003 		add	r3, r3, r0, lsl #1
4468:src/xeq.c     **** 		return NULL;
 32030              		.loc 1 4468 5 view .LVU8604
 32031 0724 9A42     		cmp	r2, r3
 32032 0726 8ED2     		bcs	.L2175
 32033              	.LVL2471:
4468:src/xeq.c     **** 		return NULL;
 32034              		.loc 1 4468 5 view .LVU8605
 32035              	.LBE4101:
 32036              	.LBE4102:
5212:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 32037              		.loc 1 5212 6 view .LVU8606
 32038 0728 002A     		cmp	r2, #0
 32039 072a 8CD0     		beq	.L2175
5224:src/xeq.c     **** 			if (XromUserPc == 0)
 32040              		.loc 1 5224 4 is_stmt 1 view .LVU8607
 32041              	.LVL2472:
 32042              	.LBB4103:
 32043              	.LBI4103:
2183:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 32044              		.loc 1 2183 14 view .LVU8608
 32045              	.LBB4104:
2184:src/xeq.c     **** }
 32046              		.loc 1 2184 2 view .LVU8609
 32047              	.LBE4104:
 32048              	.LBE4103:
5224:src/xeq.c     **** 			if (XromUserPc == 0)
 32049              		.loc 1 5224 33 is_stmt 0 view .LVU8610
 32050 072c 3B68     		ldr	r3, [r7]
 32051              	.LBB4106:
 32052              	.LBB4105:
2184:src/xeq.c     **** }
 32053              		.loc 1 2184 9 view .LVU8611
 32054 072e 41F4C441 		orr	r1, r1, #25088
 32055              	.LVL2473:
2184:src/xeq.c     **** }
 32056              		.loc 1 2184 9 view .LVU8612
 32057 0732 B3F8E007 		ldrh	r0, [r3, #2016]
 32058 0736 0322     		movs	r2, #3
 32059 0738 FFF7FEFF 		bl	find_opcode_from
 32060              	.LVL2474:
2184:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 812


 32061              		.loc 1 2184 9 view .LVU8613
 32062              	.LBE4105:
 32063              	.LBE4106:
5224:src/xeq.c     **** 			if (XromUserPc == 0)
 32064              		.loc 1 5224 15 view .LVU8614
 32065 073c 654B     		ldr	r3, .L2480+28
 32066              	.LVL2475:
5224:src/xeq.c     **** 			if (XromUserPc == 0)
 32067              		.loc 1 5224 15 view .LVU8615
 32068 073e 1860     		str	r0, [r3]
5225:src/xeq.c     **** 				return;
 32069              		.loc 1 5225 4 is_stmt 1 view .LVU8616
5225:src/xeq.c     **** 				return;
 32070              		.loc 1 5225 7 is_stmt 0 view .LVU8617
 32071 0740 0028     		cmp	r0, #0
 32072 0742 88D0     		beq	.L2150
5227:src/xeq.c     **** 				clrretstk();
 32073              		.loc 1 5227 4 is_stmt 1 view .LVU8618
5227:src/xeq.c     **** 				clrretstk();
 32074              		.loc 1 5227 8 is_stmt 0 view .LVU8619
 32075 0744 DFF894A1 		ldr	r10, .L2480+36
 32076              	.LVL2476:
5227:src/xeq.c     **** 				clrretstk();
 32077              		.loc 1 5227 7 view .LVU8620
 32078 0748 DAF80030 		ldr	r3, [r10]
 32079 074c 23B9     		cbnz	r3, .L2177
5228:src/xeq.c     **** #endif
 32080              		.loc 1 5228 5 is_stmt 1 view .LVU8621
 32081              	.LBB4107:
 32082              	.LBI4107:
1575:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 32083              		.loc 1 1575 6 view .LVU8622
 32084              	.LBB4108:
1576:src/xeq.c     **** }
 32085              		.loc 1 1576 2 view .LVU8623
1576:src/xeq.c     **** }
 32086              		.loc 1 1576 14 is_stmt 0 view .LVU8624
 32087 074e 3A68     		ldr	r2, [r7]
1576:src/xeq.c     **** }
 32088              		.loc 1 1576 24 view .LVU8625
 32089 0750 A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
1576:src/xeq.c     **** }
 32090              		.loc 1 1576 12 view .LVU8626
 32091 0754 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 32092              	.L2177:
 32093              	.LBE4108:
 32094              	.LBE4107:
5230:src/xeq.c     **** 			return;
 32095              		.loc 1 5230 4 is_stmt 1 view .LVU8627
 32096 0758 574B     		ldr	r3, .L2480
 32097 075a 0898     		ldr	r0, [sp, #32]
 32098 075c 0593     		str	r3, [sp, #20]
 32099 075e FFF7FEFF 		bl	dispatch_xrom
 32100              	.LVL2477:
5231:src/xeq.c     **** 		}
 32101              		.loc 1 5231 4 view .LVU8628
 32102 0762 059B     		ldr	r3, [sp, #20]
ARM GAS  /tmp/ccQlyisH.s 			page 813


 32103 0764 1A68     		ldr	r2, [r3]
 32104 0766 0CE5     		b	.L2153
 32105              	.LVL2478:
 32106              	.L2161:
5231:src/xeq.c     **** 		}
 32107              		.loc 1 5231 4 is_stmt 0 view .LVU8629
 32108              	.LBE4114:
5188:src/xeq.c     **** 		}
 32109              		.loc 1 5188 4 is_stmt 1 view .LVU8630
5188:src/xeq.c     **** 		}
 32110              		.loc 1 5188 8 is_stmt 0 view .LVU8631
 32111 0768 41F08001 		orr	r1, r1, #128
 32112              	.LVL2479:
5188:src/xeq.c     **** 		}
 32113              		.loc 1 5188 8 view .LVU8632
 32114 076c 8BE7     		b	.L2160
 32115              	.LVL2480:
 32116              	.L2453:
5188:src/xeq.c     **** 		}
 32117              		.loc 1 5188 8 view .LVU8633
 32118              	.LBE4121:
 32119              	.LBE4541:
 32120              	.LBB4542:
 32121              	.LBB4279:
4709:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32122              		.loc 1 4709 3 is_stmt 1 view .LVU8634
4709:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32123              		.loc 1 4709 7 is_stmt 0 view .LVU8635
 32124 076e 3B68     		ldr	r3, [r7]
 32125 0770 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4709:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32126              		.loc 1 4709 6 view .LVU8636
 32127 0774 DA07     		lsls	r2, r3, #31
 32128 0776 40F19881 		bpl	.L2245
4710:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32129              		.loc 1 4710 4 is_stmt 1 view .LVU8637
4710:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32130              		.loc 1 4710 10 is_stmt 0 view .LVU8638
 32131 077a 574B     		ldr	r3, .L2480+32
 32132 077c 05EB4505 		add	r5, r5, r5, lsl #1
 32133              	.LVL2481:
4710:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32134              		.loc 1 4710 10 view .LVU8639
 32135 0780 03EBC505 		add	r5, r3, r5, lsl #3
 32136 0784 AD68     		ldr	r5, [r5, #8]
4710:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32137              		.loc 1 4710 7 view .LVU8640
 32138 0786 002D     		cmp	r5, #0
 32139 0788 00F07381 		beq	.L2256
 32140              	.LBB4249:
4711:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32141              		.loc 1 4711 5 is_stmt 1 view .LVU8641
 32142              	.LVL2482:
4712:src/xeq.c     **** 					return;
 32143              		.loc 1 4712 5 view .LVU8642
4712:src/xeq.c     **** 					return;
 32144              		.loc 1 4712 9 is_stmt 0 view .LVU8643
ARM GAS  /tmp/ccQlyisH.s 			page 814


 32145 078c 2846     		mov	r0, r5
 32146 078e FFF7FEFF 		bl	dispatch_xrom
 32147              	.LVL2483:
4712:src/xeq.c     **** 					return;
 32148              		.loc 1 4712 8 view .LVU8644
 32149 0792 0028     		cmp	r0, #0
 32150 0794 7FF45FAF 		bne	.L2150
 32151              	.LBB4250:
4715:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 32152              		.loc 1 4715 6 is_stmt 1 view .LVU8645
 32153              	.LBB4251:
 32154              	.LBI4251:
1411:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 32155              		.loc 1 1411 15 view .LVU8646
 32156              	.LBB4252:
1412:src/xeq.c     **** }
 32157              		.loc 1 1412 2 view .LVU8647
1412:src/xeq.c     **** }
 32158              		.loc 1 1412 9 is_stmt 0 view .LVU8648
 32159 0798 6420     		movs	r0, #100
 32160 079a FFF7FEFF 		bl	get_reg_n_int
 32161              	.LVL2484:
 32162 079e 0890     		str	r0, [sp, #32]
 32163              	.LBE4252:
 32164              	.LBE4251:
4716:src/xeq.c     **** 					x = fp(y, x);
 32165              		.loc 1 4716 24 view .LVU8649
 32166 07a0 6520     		movs	r0, #101
 32167              	.LBB4254:
 32168              	.LBB4253:
1412:src/xeq.c     **** }
 32169              		.loc 1 1412 9 view .LVU8650
 32170 07a2 0591     		str	r1, [sp, #20]
 32171              	.LVL2485:
1412:src/xeq.c     **** }
 32172              		.loc 1 1412 9 view .LVU8651
 32173              	.LBE4253:
 32174              	.LBE4254:
4716:src/xeq.c     **** 					x = fp(y, x);
 32175              		.loc 1 4716 6 is_stmt 1 view .LVU8652
4716:src/xeq.c     **** 					x = fp(y, x);
 32176              		.loc 1 4716 24 is_stmt 0 view .LVU8653
 32177 07a4 FFF7FEFF 		bl	get_reg_n_int
 32178              	.LVL2486:
4717:src/xeq.c     **** 					setlastX();
 32179              		.loc 1 4717 6 is_stmt 1 view .LVU8654
4717:src/xeq.c     **** 					setlastX();
 32180              		.loc 1 4717 10 is_stmt 0 view .LVU8655
 32181 07a8 059B     		ldr	r3, [sp, #20]
 32182 07aa 089A     		ldr	r2, [sp, #32]
 32183 07ac A847     		blx	r5
 32184              	.LVL2487:
4717:src/xeq.c     **** 					setlastX();
 32185              		.loc 1 4717 10 view .LVU8656
 32186 07ae 424B     		ldr	r3, .L2480
 32187 07b0 0593     		str	r3, [sp, #20]
 32188              	.LVL2488:
ARM GAS  /tmp/ccQlyisH.s 			page 815


4717:src/xeq.c     **** 					setlastX();
 32189              		.loc 1 4717 10 view .LVU8657
 32190 07b2 0546     		mov	r5, r0
 32191              	.LVL2489:
4717:src/xeq.c     **** 					setlastX();
 32192              		.loc 1 4717 10 view .LVU8658
 32193 07b4 8A46     		mov	r10, r1
 32194              	.LVL2490:
4718:src/xeq.c     **** 					lower();
 32195              		.loc 1 4718 6 is_stmt 1 view .LVU8659
 32196              	.LBB4255:
 32197              	.LBI4255:
 783:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32198              		.loc 1 783 6 view .LVU8660
 32199              	.LBB4256:
 784:src/xeq.c     **** }
 32200              		.loc 1 784 2 view .LVU8661
 32201 07b6 6C20     		movs	r0, #108
 32202              	.LVL2491:
 784:src/xeq.c     **** }
 32203              		.loc 1 784 2 is_stmt 0 view .LVU8662
 32204 07b8 6421     		movs	r1, #100
 32205              	.LVL2492:
 784:src/xeq.c     **** }
 32206              		.loc 1 784 2 view .LVU8663
 32207 07ba FFF7FEFF 		bl	copyreg_n
 32208              	.LVL2493:
 32209              	.LBE4256:
 32210              	.LBE4255:
4719:src/xeq.c     **** 					setX_int(x);
 32211              		.loc 1 4719 6 is_stmt 1 view .LVU8664
 32212              	.L2424:
4719:src/xeq.c     **** 					setX_int(x);
 32213              		.loc 1 4719 6 is_stmt 0 view .LVU8665
 32214              	.LBE4250:
 32215              	.LBE4249:
 32216              	.LBE4279:
 32217              	.LBE4542:
 32218              	.LBB4543:
 32219              	.LBB4444:
 32220              	.LBB4426:
 32221              	.LBB4425:
4795:src/xeq.c     **** 					setX_int(x);
 32222              		.loc 1 4795 6 is_stmt 1 view .LVU8666
 32223 07be FFF7FEFF 		bl	lower
 32224              	.LVL2494:
 32225              	.L2426:
4796:src/xeq.c     **** 				}
 32226              		.loc 1 4796 6 view .LVU8667
 32227 07c2 2846     		mov	r0, r5
 32228 07c4 5146     		mov	r1, r10
 32229 07c6 FFF7FEFF 		bl	setX_int
 32230              	.LVL2495:
 32231 07ca 059B     		ldr	r3, [sp, #20]
 32232 07cc 1A68     		ldr	r2, [r3]
 32233              	.LBE4425:
 32234              	.LBE4426:
ARM GAS  /tmp/ccQlyisH.s 			page 816


 32235 07ce D8E4     		b	.L2153
 32236              	.LVL2496:
 32237              	.L2224:
4796:src/xeq.c     **** 				}
 32238              		.loc 1 4796 6 is_stmt 0 view .LVU8668
 32239              	.LBE4444:
 32240              	.LBE4543:
 32241              	.LBB4544:
 32242              	.LBB4353:
4609:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32243              		.loc 1 4609 3 is_stmt 1 view .LVU8669
4609:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32244              		.loc 1 4609 3 view .LVU8670
 32245              	.LBB4343:
 32246              	.LBI4343:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32247              		.loc 1 537 5 view .LVU8671
 32248              	.LBB4344:
 538:src/xeq.c     **** 		Error = e;
 32249              		.loc 1 538 2 view .LVU8672
 538:src/xeq.c     **** 		Error = e;
 32250              		.loc 1 538 12 is_stmt 0 view .LVU8673
 32251 07d0 394B     		ldr	r3, .L2480
 538:src/xeq.c     **** 		Error = e;
 32252              		.loc 1 538 5 view .LVU8674
 32253 07d2 1A68     		ldr	r2, [r3]
 32254 07d4 0AB9     		cbnz	r2, .L2233
 32255              	.LVL2497:
 32256              	.LBB4345:
 32257              	.LBI4345:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32258              		.loc 1 537 5 is_stmt 1 view .LVU8675
 32259              	.LBB4346:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32260              		.loc 1 539 3 view .LVU8676
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32261              		.loc 1 539 9 is_stmt 0 view .LVU8677
 32262 07d6 0322     		movs	r2, #3
 32263 07d8 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 32264              		.loc 1 540 3 is_stmt 1 view .LVU8678
 32265              	.LVL2498:
 32266              	.L2233:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 32267              		.loc 1 540 3 is_stmt 0 view .LVU8679
 32268              	.LBE4346:
 32269              	.LBE4345:
 32270              	.LBE4344:
 32271              	.LBE4343:
4614:src/xeq.c     **** #endif
 32272              		.loc 1 4614 55 view .LVU8680
 32273 07da 3A68     		ldr	r2, [r7]
 32274 07dc 92F8AC27 		ldrb	r2, [r2, #1964]	@ zero_extendqisi2
4614:src/xeq.c     **** #endif
 32275              		.loc 1 4614 51 view .LVU8681
 32276 07e0 02F04102 		and	r2, r2, #65
 32277 07e4 412A     		cmp	r2, #65
ARM GAS  /tmp/ccQlyisH.s 			page 817


 32278 07e6 7FF437AF 		bne	.L2422
4619:src/xeq.c     **** }
 32279              		.loc 1 4619 3 is_stmt 1 view .LVU8682
 32280              	.LBB4347:
 32281              	.LBI4347:
 758:src/xeq.c     ****     State2.state_lift = 1;
 32282              		.loc 1 758 6 view .LVU8683
 32283              	.LBB4348:
 759:src/xeq.c     **** }
 32284              		.loc 1 759 5 view .LVU8684
 759:src/xeq.c     **** }
 32285              		.loc 1 759 23 is_stmt 0 view .LVU8685
 32286 07ea E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 32287 07ec 1A68     		ldr	r2, [r3]
 32288 07ee 41F04001 		orr	r1, r1, #64
 32289 07f2 E175     		strb	r1, [r4, #23]
 760:src/xeq.c     **** 
 32290              		.loc 1 760 1 view .LVU8686
 32291 07f4 C5E4     		b	.L2153
 32292              	.LVL2499:
 32293              	.L2464:
 760:src/xeq.c     **** 
 32294              		.loc 1 760 1 view .LVU8687
 32295              	.LBE4348:
 32296              	.LBE4347:
 32297              	.LBE4353:
 32298              	.LBE4544:
 32299              	.LBB4545:
 32300              	.LBB4122:
5151:src/xeq.c     **** 
 32301              		.loc 1 5151 15 view .LVU8688
 32302 07f6 0598     		ldr	r0, [sp, #20]
 32303 07f8 51E7     		b	.L2169
 32304              	.LVL2500:
 32305              	.L2462:
5205:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32306              		.loc 1 5205 30 view .LVU8689
 32307 07fa A1F16303 		sub	r3, r1, #99
 32308 07fe 0C2B     		cmp	r3, #12
 32309 0800 3FF61BAF 		bhi	.L2173
5205:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32310              		.loc 1 5205 69 view .LVU8690
 32311 0804 CD07     		lsls	r5, r1, #31
 32312 0806 7FF518AF 		bpl	.L2173
5207:src/xeq.c     **** 	}
 32313              		.loc 1 5207 3 is_stmt 1 view .LVU8691
 32314              	.LVL2501:
 32315              	.LBB4115:
 32316              	.LBI4115:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32317              		.loc 1 537 5 view .LVU8692
 32318              	.LBB4116:
 538:src/xeq.c     **** 		Error = e;
 32319              		.loc 1 538 2 view .LVU8693
 538:src/xeq.c     **** 		Error = e;
 32320              		.loc 1 538 12 is_stmt 0 view .LVU8694
 32321 080a 2B4B     		ldr	r3, .L2480
ARM GAS  /tmp/ccQlyisH.s 			page 818


 32322 080c 1868     		ldr	r0, [r3]
 32323              	.LVL2502:
 538:src/xeq.c     **** 		Error = e;
 32324              		.loc 1 538 5 view .LVU8695
 32325 080e 0028     		cmp	r0, #0
 32326 0810 7FF40BAF 		bne	.L2430
 32327              	.LVL2503:
 32328              	.LBB4117:
 32329              	.LBI4117:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32330              		.loc 1 537 5 is_stmt 1 view .LVU8696
 32331              	.LBB4118:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32332              		.loc 1 539 3 view .LVU8697
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32333              		.loc 1 539 9 is_stmt 0 view .LVU8698
 32334 0814 0720     		movs	r0, #7
 32335 0816 DFF8C4A0 		ldr	r10, .L2480+36
 32336              	.LVL2504:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32337              		.loc 1 539 9 view .LVU8699
 32338 081a 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 32339              		.loc 1 540 3 is_stmt 1 view .LVU8700
 32340 081c D5E4     		b	.L2283
 32341              	.LVL2505:
 32342              	.L2452:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 32343              		.loc 1 540 3 is_stmt 0 view .LVU8701
 32344              	.LBE4118:
 32345              	.LBE4117:
 32346              	.LBE4116:
 32347              	.LBE4115:
 32348              	.LBE4122:
 32349              	.LBE4545:
 32350              	.LBB4546:
 32351              	.LBB4159:
 32352              	.LBB4154:
5258:src/xeq.c     **** 			if (XromUserPc != 0) {
 32353              		.loc 1 5258 4 is_stmt 1 view .LVU8702
5258:src/xeq.c     **** 			if (XromUserPc != 0) {
 32354              		.loc 1 5258 17 is_stmt 0 view .LVU8703
 32355 081e 2846     		mov	r0, r5
 32356 0820 0121     		movs	r1, #1
 32357 0822 0592     		str	r2, [sp, #20]
 32358 0824 FFF7FEFF 		bl	findmultilbl
 32359              	.LVL2506:
5258:src/xeq.c     **** 			if (XromUserPc != 0) {
 32360              		.loc 1 5258 15 view .LVU8704
 32361 0828 2A4B     		ldr	r3, .L2480+28
5259:src/xeq.c     **** 				if (! Running)
 32362              		.loc 1 5259 7 view .LVU8705
 32363 082a 059A     		ldr	r2, [sp, #20]
5258:src/xeq.c     **** 			if (XromUserPc != 0) {
 32364              		.loc 1 5258 15 view .LVU8706
 32365 082c 1860     		str	r0, [r3]
5259:src/xeq.c     **** 				if (! Running)
ARM GAS  /tmp/ccQlyisH.s 			page 819


 32366              		.loc 1 5259 4 is_stmt 1 view .LVU8707
5259:src/xeq.c     **** 				if (! Running)
 32367              		.loc 1 5259 7 is_stmt 0 view .LVU8708
 32368 082e 0028     		cmp	r0, #0
 32369 0830 3FF411AF 		beq	.L2150
 32370              	.LVL2507:
5260:src/xeq.c     **** 					clrretstk();
 32371              		.loc 1 5260 5 is_stmt 1 view .LVU8709
5260:src/xeq.c     **** 					clrretstk();
 32372              		.loc 1 5260 9 is_stmt 0 view .LVU8710
 32373 0834 DFF8A4A0 		ldr	r10, .L2480+36
 32374              	.LVL2508:
5260:src/xeq.c     **** 					clrretstk();
 32375              		.loc 1 5260 8 view .LVU8711
 32376 0838 DAF80030 		ldr	r3, [r10]
 32377 083c 23B9     		cbnz	r3, .L2154
5261:src/xeq.c     **** 				dispatch_xrom(fp);
 32378              		.loc 1 5261 6 is_stmt 1 view .LVU8712
 32379              	.LBB4145:
 32380              	.LBI4145:
1575:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 32381              		.loc 1 1575 6 view .LVU8713
 32382              	.LBB4146:
1576:src/xeq.c     **** }
 32383              		.loc 1 1576 2 view .LVU8714
1576:src/xeq.c     **** }
 32384              		.loc 1 1576 14 is_stmt 0 view .LVU8715
 32385 083e 3968     		ldr	r1, [r7]
1576:src/xeq.c     **** }
 32386              		.loc 1 1576 24 view .LVU8716
 32387 0840 A1F8DE37 		strh	r3, [r1, #2014]	@ movhi
1576:src/xeq.c     **** }
 32388              		.loc 1 1576 12 view .LVU8717
 32389 0844 A1F8E237 		strh	r3, [r1, #2018]	@ movhi
 32390              	.L2154:
 32391              	.LBE4146:
 32392              	.LBE4145:
5262:src/xeq.c     **** 			}
 32393              		.loc 1 5262 5 is_stmt 1 view .LVU8718
 32394 0848 1B4B     		ldr	r3, .L2480
 32395 084a 0593     		str	r3, [sp, #20]
 32396              	.LVL2509:
5262:src/xeq.c     **** 			}
 32397              		.loc 1 5262 5 is_stmt 0 view .LVU8719
 32398 084c 1046     		mov	r0, r2
 32399 084e FFF7FEFF 		bl	dispatch_xrom
 32400              	.LVL2510:
 32401 0852 059B     		ldr	r3, [sp, #20]
 32402 0854 1A68     		ldr	r2, [r3]
 32403 0856 94E4     		b	.L2153
 32404              	.LVL2511:
 32405              	.L2196:
5262:src/xeq.c     **** 			}
 32406              		.loc 1 5262 5 view .LVU8720
 32407              	.LBE4154:
 32408              	.LBE4159:
 32409              	.LBE4546:
ARM GAS  /tmp/ccQlyisH.s 			page 820


 32410              	.LBB4547:
 32411              	.LBB4226:
3891:src/xeq.c     **** 		break;
 32412              		.loc 1 3891 3 is_stmt 1 view .LVU8721
 32413 0858 174B     		ldr	r3, .L2480
 32414 085a 0593     		str	r3, [sp, #20]
 32415 085c AAF10500 		sub	r0, r10, #5
 32416 0860 FFF7FEFF 		bl	digit
 32417              	.LVL2512:
3892:src/xeq.c     **** 
 32418              		.loc 1 3892 3 view .LVU8722
 32419 0864 059B     		ldr	r3, [sp, #20]
 32420 0866 1A68     		ldr	r2, [r3]
 32421 0868 8BE4     		b	.L2153
 32422              	.LVL2513:
 32423              	.L2458:
3892:src/xeq.c     **** 
 32424              		.loc 1 3892 3 is_stmt 0 view .LVU8723
 32425              	.LBE4226:
 32426              	.LBE4547:
 32427              	.LBB4548:
 32428              	.LBB4394:
 32429              	.LBB4379:
 32430              	.LBB4368:
 32431              	.LBB4361:
 32432 086a FFF7FEFF 		bl	process_cmdline.part.0
 32433              	.LVL2514:
 32434 086e A6E5     		b	.L2235
 32435              	.LVL2515:
 32436              	.L2456:
3892:src/xeq.c     **** 
 32437              		.loc 1 3892 3 view .LVU8724
 32438              	.LBE4361:
 32439              	.LBE4368:
 32440              	.LBE4379:
 32441              	.LBE4394:
 32442              	.LBE4548:
 32443              	.LBB4549:
 32444              	.LBB4354:
 32445              	.LBB4349:
 32446              	.LBB4324:
 32447 0870 FFF7FEFF 		bl	process_cmdline.part.0
 32448              	.LVL2516:
 32449 0874 6FE5     		b	.L2223
 32450              	.LVL2517:
 32451              	.L2461:
3892:src/xeq.c     **** 
 32452              		.loc 1 3892 3 view .LVU8725
 32453              	.LBE4324:
 32454              	.LBE4349:
 32455              	.LBE4354:
 32456              	.LBE4549:
 32457              	.LBB4550:
 32458              	.LBB4529:
 32459              	.LBB4518:
 32460              	.LBB4508:
 32461              	.LBB4501:
ARM GAS  /tmp/ccQlyisH.s 			page 821


 32462 0876 FFF7FEFF 		bl	process_cmdline.part.0
 32463              	.LVL2518:
 32464 087a 76E6     		b	.L2264
 32465              	.LVL2519:
 32466              	.L2460:
3892:src/xeq.c     **** 
 32467              		.loc 1 3892 3 view .LVU8726
 32468              	.LBE4501:
 32469              	.LBE4508:
 32470              	.LBE4518:
 32471              	.LBE4529:
 32472              	.LBE4550:
 32473              	.LBB4551:
 32474              	.LBB4484:
 32475              	.LBB4479:
 32476              	.LBB4464:
 32477              	.LBB4457:
 32478 087c FFF7FEFF 		bl	process_cmdline.part.0
 32479              	.LVL2520:
 32480 0880 3EE6     		b	.L2259
 32481              	.LVL2521:
 32482              	.L2459:
3892:src/xeq.c     **** 
 32483              		.loc 1 3892 3 view .LVU8727
 32484              	.LBE4457:
 32485              	.LBE4464:
 32486              	.LBE4479:
 32487              	.LBE4484:
 32488              	.LBE4551:
 32489              	.LBB4552:
 32490              	.LBB4445:
 32491              	.LBB4427:
 32492              	.LBB4412:
 32493              	.LBB4405:
 32494 0882 FFF7FEFF 		bl	process_cmdline.part.0
 32495              	.LVL2522:
 32496 0886 FBE5     		b	.L2251
 32497              	.LVL2523:
 32498              	.L2193:
3892:src/xeq.c     **** 
 32499              		.loc 1 3892 3 view .LVU8728
 32500              	.LBE4405:
 32501              	.LBE4412:
 32502              	.LBE4427:
 32503              	.LBE4445:
 32504              	.LBE4552:
 32505              	.LBB4553:
 32506              	.LBB4227:
4045:src/xeq.c     **** 		break;
 32507              		.loc 1 4045 3 is_stmt 1 view .LVU8729
4045:src/xeq.c     **** 		break;
 32508              		.loc 1 4045 53 is_stmt 0 view .LVU8730
 32509 0888 A5F11E01 		sub	r1, r5, #30
 32510 088c 0A4B     		ldr	r3, .L2480
 32511 088e 0593     		str	r3, [sp, #20]
4045:src/xeq.c     **** 		break;
 32512              		.loc 1 4045 3 view .LVU8731
ARM GAS  /tmp/ccQlyisH.s 			page 822


 32513 0890 C9B2     		uxtb	r1, r1
 32514 0892 40F61C00 		movw	r0, #2076
 32515 0896 FFF7FEFF 		bl	do_tst
 32516              	.LVL2524:
4046:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
 32517              		.loc 1 4046 3 is_stmt 1 view .LVU8732
 32518 089a 059B     		ldr	r3, [sp, #20]
 32519 089c 1A68     		ldr	r2, [r3]
 32520 089e 70E4     		b	.L2153
 32521              	.L2194:
4036:src/xeq.c     **** 		break;
 32522              		.loc 1 4036 3 view .LVU8733
4036:src/xeq.c     **** 		break;
 32523              		.loc 1 4036 54 is_stmt 0 view .LVU8734
 32524 08a0 A5F11701 		sub	r1, r5, #23
 32525 08a4 044B     		ldr	r3, .L2480
 32526 08a6 0593     		str	r3, [sp, #20]
4036:src/xeq.c     **** 		break;
 32527              		.loc 1 4036 3 view .LVU8735
 32528 08a8 C9B2     		uxtb	r1, r1
 32529 08aa 40F61B00 		movw	r0, #2075
 32530 08ae FFF7FEFF 		bl	do_tst
 32531              	.LVL2525:
4037:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
 32532              		.loc 1 4037 3 is_stmt 1 view .LVU8736
 32533 08b2 059B     		ldr	r3, [sp, #20]
 32534 08b4 1A68     		ldr	r2, [r3]
 32535 08b6 64E4     		b	.L2153
 32536              	.L2481:
 32537              		.align	2
 32538              	.L2480:
 32539 08b8 00000000 		.word	Error
 32540 08bc 00000000 		.word	xrom
 32541 08c0 00000000 		.word	argcmds
 32542 08c4 00000000 		.word	XromParams
 32543 08c8 00000000 		.word	RetStk
 32544 08cc 00000000 		.word	XromLocal
 32545 08d0 00000000 		.word	xrom_size
 32546 08d4 00000000 		.word	XromUserPc
 32547 08d8 00000000 		.word	dyfuncs
 32548 08dc 00000000 		.word	Running
 32549              	.L2189:
4051:src/xeq.c     **** 		break;
 32550              		.loc 1 4051 3 view .LVU8737
4051:src/xeq.c     **** 		break;
 32551              		.loc 1 4051 49 is_stmt 0 view .LVU8738
 32552 08e0 A5F12902 		sub	r2, r5, #41
 32553 08e4 B84B     		ldr	r3, .L2482
4051:src/xeq.c     **** 		break;
 32554              		.loc 1 4051 3 view .LVU8739
 32555 08e6 B949     		ldr	r1, .L2482+4
 32556 08e8 B948     		ldr	r0, .L2482+8
 32557 08ea 0593     		str	r3, [sp, #20]
 32558 08ec D2B2     		uxtb	r2, r2
 32559 08ee FFF7FEFF 		bl	do_ztst
 32560              	.LVL2526:
4052:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 823


 32561              		.loc 1 4052 3 is_stmt 1 view .LVU8740
 32562 08f2 059B     		ldr	r3, [sp, #20]
 32563 08f4 1A68     		ldr	r2, [r3]
 32564 08f6 44E4     		b	.L2153
 32565              	.L2191:
4048:src/xeq.c     **** 		break;
 32566              		.loc 1 4048 3 view .LVU8741
4048:src/xeq.c     **** 		break;
 32567              		.loc 1 4048 49 is_stmt 0 view .LVU8742
 32568 08f8 A5F12702 		sub	r2, r5, #39
 32569 08fc B24B     		ldr	r3, .L2482
4048:src/xeq.c     **** 		break;
 32570              		.loc 1 4048 3 view .LVU8743
 32571 08fe B449     		ldr	r1, .L2482+8
 32572 0900 B248     		ldr	r0, .L2482+4
 32573 0902 0593     		str	r3, [sp, #20]
 32574 0904 D2B2     		uxtb	r2, r2
 32575 0906 FFF7FEFF 		bl	do_ztst
 32576              	.LVL2527:
4049:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
 32577              		.loc 1 4049 3 is_stmt 1 view .LVU8744
 32578 090a 059B     		ldr	r3, [sp, #20]
 32579 090c 1A68     		ldr	r2, [r3]
 32580 090e 38E4     		b	.L2153
 32581              	.L2192:
4039:src/xeq.c     **** 		break;
 32582              		.loc 1 4039 3 view .LVU8745
 32583 0910 AF49     		ldr	r1, .L2482+8
 32584 0912 AD4B     		ldr	r3, .L2482
 32585 0914 0593     		str	r3, [sp, #20]
4039:src/xeq.c     **** 		break;
 32586              		.loc 1 4039 49 is_stmt 0 view .LVU8746
 32587 0916 A5F12502 		sub	r2, r5, #37
4039:src/xeq.c     **** 		break;
 32588              		.loc 1 4039 3 view .LVU8747
 32589 091a D2B2     		uxtb	r2, r2
 32590 091c 0846     		mov	r0, r1
 32591 091e FFF7FEFF 		bl	do_ztst
 32592              	.LVL2528:
4040:src/xeq.c     **** 
 32593              		.loc 1 4040 3 is_stmt 1 view .LVU8748
 32594 0922 059B     		ldr	r3, [sp, #20]
 32595 0924 1A68     		ldr	r2, [r3]
 32596 0926 2CE4     		b	.L2153
 32597              	.L2195:
4018:src/xeq.c     **** 			bad_mode_error();
 32598              		.loc 1 4018 3 view .LVU8749
4018:src/xeq.c     **** 			bad_mode_error();
 32599              		.loc 1 4018 7 is_stmt 0 view .LVU8750
 32600 0928 3B68     		ldr	r3, [r7]
 32601 092a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4018:src/xeq.c     **** 			bad_mode_error();
 32602              		.loc 1 4018 6 view .LVU8751
 32603 092e DA07     		lsls	r2, r3, #31
 32604 0930 00F19F80 		bmi	.L2256
4022:src/xeq.c     **** 		clr_lift();
 32605              		.loc 1 4022 3 is_stmt 1 view .LVU8752
ARM GAS  /tmp/ccQlyisH.s 			page 824


 32606              	.LBB4171:
 32607              	.LBI4171:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 32608              		.loc 1 1195 6 view .LVU8753
 32609              	.LBB4172:
1196:src/xeq.c     **** 
 32610              		.loc 1 1196 2 view .LVU8754
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32611              		.loc 1 1198 2 view .LVU8755
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32612              		.loc 1 1198 5 is_stmt 0 view .LVU8756
 32613 0934 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32614 0936 002B     		cmp	r3, #0
 32615 0938 40F09181 		bne	.L2465
 32616              	.L2220:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32617              		.loc 1 1198 5 view .LVU8757
 32618              	.LBE4172:
 32619              	.LBE4171:
4023:src/xeq.c     **** 		setlastX();
 32620              		.loc 1 4023 3 is_stmt 1 view .LVU8758
 32621              	.LBB4174:
 32622              	.LBI4174:
 762:src/xeq.c     ****     State2.state_lift = 0;
 32623              		.loc 1 762 13 view .LVU8759
 32624              	.LBB4175:
 763:src/xeq.c     **** }
 32625              		.loc 1 763 5 view .LVU8760
 763:src/xeq.c     **** }
 32626              		.loc 1 763 23 is_stmt 0 view .LVU8761
 32627 093c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32628              	.LBE4175:
 32629              	.LBE4174:
 32630              	.LBB4178:
 32631              	.LBB4179:
 784:src/xeq.c     **** }
 32632              		.loc 1 784 2 view .LVU8762
 32633 093e 6421     		movs	r1, #100
 32634              	.LBE4179:
 32635              	.LBE4178:
 32636              	.LBB4182:
 32637              	.LBB4176:
 763:src/xeq.c     **** }
 32638              		.loc 1 763 23 view .LVU8763
 32639 0940 6FF38613 		bfc	r3, #6, #1
 32640              	.LBE4176:
 32641              	.LBE4182:
 32642              	.LBB4183:
 32643              	.LBB4180:
 784:src/xeq.c     **** }
 32644              		.loc 1 784 2 view .LVU8764
 32645 0944 6C20     		movs	r0, #108
 32646              	.LBE4180:
 32647              	.LBE4183:
 32648              	.LBB4184:
 32649              	.LBB4177:
 763:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 825


 32650              		.loc 1 763 23 view .LVU8765
 32651 0946 E375     		strb	r3, [r4, #23]
 32652              	.LBE4177:
 32653              	.LBE4184:
4024:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
 32654              		.loc 1 4024 3 is_stmt 1 view .LVU8766
 32655              	.LBB4185:
 32656              	.LBI4178:
 783:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32657              		.loc 1 783 6 view .LVU8767
 32658              	.LBB4181:
 784:src/xeq.c     **** }
 32659              		.loc 1 784 2 view .LVU8768
 32660 0948 FFF7FEFF 		bl	copyreg_n
 32661              	.LVL2529:
 32662              	.LBE4181:
 32663              	.LBE4185:
4025:src/xeq.c     **** 			sigma_plus();
 32664              		.loc 1 4025 3 view .LVU8769
4025:src/xeq.c     **** 			sigma_plus();
 32665              		.loc 1 4025 6 is_stmt 0 view .LVU8770
 32666 094c BAF1150F 		cmp	r10, #21
 32667 0950 00F08281 		beq	.L2466
4028:src/xeq.c     **** 		sigma_val(OP_sigmaN);
 32668              		.loc 1 4028 4 is_stmt 1 view .LVU8771
 32669 0954 FFF7FEFF 		bl	sigma_minus
 32670              	.LVL2530:
 32671              	.L2222:
4029:src/xeq.c     **** 		break;
 32672              		.loc 1 4029 3 view .LVU8772
 32673 0958 9B4B     		ldr	r3, .L2482
 32674 095a 0593     		str	r3, [sp, #20]
 32675 095c 1D20     		movs	r0, #29
 32676 095e FFF7FEFF 		bl	sigma_val
 32677              	.LVL2531:
4030:src/xeq.c     **** 
 32678              		.loc 1 4030 3 view .LVU8773
 32679 0962 059B     		ldr	r3, [sp, #20]
 32680 0964 1A68     		ldr	r2, [r3]
 32681 0966 0CE4     		b	.L2153
 32682              	.L2201:
4010:src/xeq.c     **** 		lift();
 32683              		.loc 1 4010 3 view .LVU8774
 32684              	.LBB4186:
 32685              	.LBI4186:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 32686              		.loc 1 1195 6 view .LVU8775
 32687              	.LBB4187:
1196:src/xeq.c     **** 
 32688              		.loc 1 1196 2 view .LVU8776
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32689              		.loc 1 1198 2 view .LVU8777
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32690              		.loc 1 1198 5 is_stmt 0 view .LVU8778
 32691 0968 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32692 096a 002B     		cmp	r3, #0
 32693 096c 40F05681 		bne	.L2467
ARM GAS  /tmp/ccQlyisH.s 			page 826


 32694              	.L2217:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32695              		.loc 1 1198 5 view .LVU8779
 32696              	.LBE4187:
 32697              	.LBE4186:
4011:src/xeq.c     **** 		clr_lift();
 32698              		.loc 1 4011 3 is_stmt 1 view .LVU8780
 32699 0970 FFF7FEFF 		bl	lift
 32700              	.LVL2532:
4012:src/xeq.c     **** #endif
 32701              		.loc 1 4012 3 view .LVU8781
 32702              	.LBB4189:
 32703              	.LBI4189:
 762:src/xeq.c     ****     State2.state_lift = 0;
 32704              		.loc 1 762 13 view .LVU8782
 32705              	.LBB4190:
 763:src/xeq.c     **** }
 32706              		.loc 1 763 5 view .LVU8783
 763:src/xeq.c     **** }
 32707              		.loc 1 763 23 is_stmt 0 view .LVU8784
 32708 0974 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 32709 0976 944B     		ldr	r3, .L2482
 32710 0978 6FF38612 		bfc	r2, #6, #1
 32711 097c E275     		strb	r2, [r4, #23]
 32712 097e 1A68     		ldr	r2, [r3]
 764:src/xeq.c     **** 
 32713              		.loc 1 764 1 view .LVU8785
 32714 0980 FFF7FFBB 		b	.L2153
 32715              	.L2197:
 764:src/xeq.c     **** 
 32716              		.loc 1 764 1 view .LVU8786
 32717              	.LBE4190:
 32718              	.LBE4189:
3895:src/xeq.c     **** 			break;
 32719              		.loc 1 3895 3 is_stmt 1 view .LVU8787
3895:src/xeq.c     **** 			break;
 32720              		.loc 1 3895 7 is_stmt 0 view .LVU8788
 32721 0984 3B68     		ldr	r3, [r7]
 32722 0986 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3895:src/xeq.c     **** 			break;
 32723              		.loc 1 3895 6 view .LVU8789
 32724 098a D807     		lsls	r0, r3, #31
 32725 098c 3FF563AE 		bmi	.L2150
3898:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32726              		.loc 1 3898 3 is_stmt 1 view .LVU8790
3898:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32727              		.loc 1 3898 7 is_stmt 0 view .LVU8791
 32728 0990 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
3898:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32729              		.loc 1 3898 6 view .LVU8792
 32730 0992 012B     		cmp	r3, #1
 32731 0994 3FF65FAE 		bhi	.L2150
3898:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32732              		.loc 1 3898 22 view .LVU8793
 32733 0998 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 32734 099a 002A     		cmp	r2, #0
 32735 099c 7FF45BAE 		bne	.L2150
ARM GAS  /tmp/ccQlyisH.s 			page 827


3898:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32736              		.loc 1 3898 54 view .LVU8794
 32737 09a0 002B     		cmp	r3, #0
3898:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32738              		.loc 1 3898 40 view .LVU8795
 32739 09a2 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3898:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32740              		.loc 1 3898 54 view .LVU8796
 32741 09a4 0CBF     		ite	eq
 32742 09a6 0C22     		moveq	r2, #12
 32743 09a8 0D22     		movne	r2, #13
3898:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32744              		.loc 1 3898 37 view .LVU8797
 32745 09aa 9A42     		cmp	r2, r3
 32746 09ac FFF653AE 		blt	.L2150
3899:src/xeq.c     **** #else
 32747              		.loc 1 3899 4 is_stmt 1 view .LVU8798
3899:src/xeq.c     **** #else
 32748              		.loc 1 3899 7 is_stmt 0 view .LVU8799
 32749 09b0 002B     		cmp	r3, #0
 32750 09b2 00F0A181 		beq	.L2204
3899:src/xeq.c     **** #else
 32751              		.loc 1 3899 37 view .LVU8800
 32752 09b6 2344     		add	r3, r3, r4
3899:src/xeq.c     **** #else
 32753              		.loc 1 3899 27 view .LVU8801
 32754 09b8 DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 32755 09ba 2D2B     		cmp	r3, #45
 32756 09bc 00F09C81 		beq	.L2204
 32757              	.L2205:
3910:src/xeq.c     **** 			append_cmdline('.');
 32758              		.loc 1 3910 4 is_stmt 1 view .LVU8802
 32759              	.LBB4191:
 32760              	.LBB4192:
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32761              		.loc 1 2608 10 is_stmt 0 view .LVU8803
 32762 09c0 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32763              	.LBE4192:
 32764              	.LBE4191:
3910:src/xeq.c     **** 			append_cmdline('.');
 32765              		.loc 1 3910 14 view .LVU8804
 32766 09c2 A17F     		ldrb	r1, [r4, #30]	@ zero_extendqisi2
 32767              	.LBB4196:
 32768              	.LBB4193:
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32769              		.loc 1 2608 23 view .LVU8805
 32770 09c4 5A1C     		adds	r2, r3, #1
 32771 09c6 D2B2     		uxtb	r2, r2
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32772              		.loc 1 2608 27 view .LVU8806
 32773 09c8 2344     		add	r3, r3, r4
2609:src/xeq.c     **** }
 32774              		.loc 1 2609 25 view .LVU8807
 32775 09ca A018     		adds	r0, r4, r2
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32776              		.loc 1 2608 23 view .LVU8808
 32777 09cc 2277     		strb	r2, [r4, #28]
ARM GAS  /tmp/ccQlyisH.s 			page 828


2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32778              		.loc 1 2608 27 view .LVU8809
 32779 09ce 2E22     		movs	r2, #46
 32780 09d0 83F82020 		strb	r2, [r3, #32]
 32781 09d4 7C4B     		ldr	r3, .L2482
2609:src/xeq.c     **** }
 32782              		.loc 1 2609 25 view .LVU8810
 32783 09d6 0022     		movs	r2, #0
 32784              	.LBE4193:
 32785              	.LBE4196:
3910:src/xeq.c     **** 			append_cmdline('.');
 32786              		.loc 1 3910 14 view .LVU8811
 32787 09d8 0131     		adds	r1, r1, #1
 32788              	.LBB4197:
 32789              	.LBB4194:
2609:src/xeq.c     **** }
 32790              		.loc 1 2609 25 view .LVU8812
 32791 09da 80F82020 		strb	r2, [r0, #32]
 32792              	.LBE4194:
 32793              	.LBE4197:
3910:src/xeq.c     **** 			append_cmdline('.');
 32794              		.loc 1 3910 14 view .LVU8813
 32795 09de A177     		strb	r1, [r4, #30]
3911:src/xeq.c     **** 		}
 32796              		.loc 1 3911 4 is_stmt 1 view .LVU8814
 32797              	.LVL2533:
 32798              	.LBB4198:
 32799              	.LBI4191:
2607:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 32800              		.loc 1 2607 13 view .LVU8815
 32801              	.LBB4195:
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32802              		.loc 1 2608 2 view .LVU8816
2609:src/xeq.c     **** }
 32803              		.loc 1 2609 2 view .LVU8817
 32804 09e0 1A68     		ldr	r2, [r3]
2610:src/xeq.c     **** 
 32805              		.loc 1 2610 1 is_stmt 0 view .LVU8818
 32806 09e2 FFF7CEBB 		b	.L2153
 32807              	.LVL2534:
 32808              	.L2199:
2610:src/xeq.c     **** 
 32809              		.loc 1 2610 1 view .LVU8819
 32810              	.LBE4195:
 32811              	.LBE4198:
3916:src/xeq.c     **** 			break;
 32812              		.loc 1 3916 3 is_stmt 1 view .LVU8820
 32813              	.LBB4199:
3924:src/xeq.c     **** #endif
 32814              		.loc 1 3924 4 view .LVU8821
3927:src/xeq.c     **** 				if (eex_pi) {
 32815              		.loc 1 3927 4 view .LVU8822
3927:src/xeq.c     **** 				if (eex_pi) {
 32816              		.loc 1 3927 7 is_stmt 0 view .LVU8823
 32817 09e6 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 32818 09e8 022B     		cmp	r3, #2
 32819 09ea 3FF434AE 		beq	.L2150
ARM GAS  /tmp/ccQlyisH.s 			page 829


3942:src/xeq.c     **** 				break;
 32820              		.loc 1 3942 4 is_stmt 1 view .LVU8824
 32821              	.LBE4199:
3916:src/xeq.c     **** 			break;
 32822              		.loc 1 3916 7 is_stmt 0 view .LVU8825
 32823 09ee 3B68     		ldr	r3, [r7]
 32824              	.LBB4202:
3942:src/xeq.c     **** 				break;
 32825              		.loc 1 3942 7 view .LVU8826
 32826 09f0 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 32827              	.LBE4202:
3916:src/xeq.c     **** 			break;
 32828              		.loc 1 3916 7 view .LVU8827
 32829 09f2 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 32830 09f6 03F00103 		and	r3, r3, #1
 32831              	.LBB4203:
3942:src/xeq.c     **** 				break;
 32832              		.loc 1 3942 7 view .LVU8828
 32833 09fa 1343     		orrs	r3, r3, r2
 32834 09fc 7FF42BAE 		bne	.L2150
3942:src/xeq.c     **** 				break;
 32835              		.loc 1 3942 22 view .LVU8829
 32836 0a00 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3942:src/xeq.c     **** 				break;
 32837              		.loc 1 3942 19 view .LVU8830
 32838 0a02 122B     		cmp	r3, #18
 32839 0a04 3FF627AE 		bhi	.L2150
3944:src/xeq.c     **** 				// empty command line: enter pi
 32840              		.loc 1 3944 4 is_stmt 1 view .LVU8831
3955:src/xeq.c     **** 				digit(1);
 32841              		.loc 1 3955 4 view .LVU8832
3955:src/xeq.c     **** 				digit(1);
 32842              		.loc 1 3955 7 is_stmt 0 view .LVU8833
 32843 0a08 002B     		cmp	r3, #0
 32844 0a0a 00F07181 		beq	.L2468
 32845              	.L2206:
3957:src/xeq.c     **** 			append_cmdline('E');
 32846              		.loc 1 3957 4 is_stmt 1 view .LVU8834
3957:src/xeq.c     **** 			append_cmdline('E');
 32847              		.loc 1 3957 17 is_stmt 0 view .LVU8835
 32848 0a0e 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3957:src/xeq.c     **** 			append_cmdline('E');
 32849              		.loc 1 3957 15 view .LVU8836
 32850 0a10 6377     		strb	r3, [r4, #29]
3958:src/xeq.c     **** 		}
 32851              		.loc 1 3958 4 is_stmt 1 view .LVU8837
 32852              	.LVL2535:
 32853              	.LBB4200:
 32854              	.LBI4200:
2607:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 32855              		.loc 1 2607 13 view .LVU8838
 32856              	.LBB4201:
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32857              		.loc 1 2608 2 view .LVU8839
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32858              		.loc 1 2608 23 is_stmt 0 view .LVU8840
 32859 0a12 591C     		adds	r1, r3, #1
ARM GAS  /tmp/ccQlyisH.s 			page 830


 32860 0a14 C9B2     		uxtb	r1, r1
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32861              		.loc 1 2608 27 view .LVU8841
 32862 0a16 E218     		adds	r2, r4, r3
2609:src/xeq.c     **** }
 32863              		.loc 1 2609 25 view .LVU8842
 32864 0a18 6018     		adds	r0, r4, r1
 32865 0a1a 6B4B     		ldr	r3, .L2482
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32866              		.loc 1 2608 23 view .LVU8843
 32867 0a1c 2177     		strb	r1, [r4, #28]
2608:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32868              		.loc 1 2608 27 view .LVU8844
 32869 0a1e 4521     		movs	r1, #69
 32870 0a20 82F82010 		strb	r1, [r2, #32]
2609:src/xeq.c     **** }
 32871              		.loc 1 2609 2 is_stmt 1 view .LVU8845
2609:src/xeq.c     **** }
 32872              		.loc 1 2609 25 is_stmt 0 view .LVU8846
 32873 0a24 0022     		movs	r2, #0
 32874 0a26 80F82020 		strb	r2, [r0, #32]
 32875 0a2a 1A68     		ldr	r2, [r3]
2610:src/xeq.c     **** 
 32876              		.loc 1 2610 1 view .LVU8847
 32877 0a2c FFF7A9BB 		b	.L2153
 32878              	.LVL2536:
 32879              	.L2198:
2610:src/xeq.c     **** 
 32880              		.loc 1 2610 1 view .LVU8848
 32881              	.LBE4201:
 32882              	.LBE4200:
 32883              	.LBE4203:
3963:src/xeq.c     **** 			cmdlinechs();
 32884              		.loc 1 3963 3 is_stmt 1 view .LVU8849
3963:src/xeq.c     **** 			cmdlinechs();
 32885              		.loc 1 3963 7 is_stmt 0 view .LVU8850
 32886 0a30 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3963:src/xeq.c     **** 			cmdlinechs();
 32887              		.loc 1 3963 6 view .LVU8851
 32888 0a32 002A     		cmp	r2, #0
 32889 0a34 40F00381 		bne	.L2469
3965:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32890              		.loc 1 3965 8 is_stmt 1 view .LVU8852
3965:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32891              		.loc 1 3965 12 is_stmt 0 view .LVU8853
 32892 0a38 3B68     		ldr	r3, [r7]
 32893 0a3a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3965:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32894              		.loc 1 3965 11 view .LVU8854
 32895 0a3e D907     		lsls	r1, r3, #31
 32896 0a40 40F1EF80 		bpl	.L2211
3966:src/xeq.c     **** 			set_lift();
 32897              		.loc 1 3966 4 is_stmt 1 view .LVU8855
 32898              	.LBB4204:
 32899              	.LBI4204:
1411:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 32900              		.loc 1 1411 15 view .LVU8856
ARM GAS  /tmp/ccQlyisH.s 			page 831


 32901              	.LBB4205:
1412:src/xeq.c     **** }
 32902              		.loc 1 1412 2 view .LVU8857
1412:src/xeq.c     **** }
 32903              		.loc 1 1412 9 is_stmt 0 view .LVU8858
 32904 0a44 6420     		movs	r0, #100
 32905 0a46 FFF7FEFF 		bl	get_reg_n_int
 32906              	.LVL2537:
 32907              	.LBE4205:
 32908              	.LBE4204:
3966:src/xeq.c     **** 			set_lift();
 32909              		.loc 1 3966 4 view .LVU8859
 32910 0a4a FFF7FEFF 		bl	intChs
 32911              	.LVL2538:
 32912 0a4e FFF7FEFF 		bl	setX_int
 32913              	.LVL2539:
3967:src/xeq.c     **** 		} else {
 32914              		.loc 1 3967 4 is_stmt 1 view .LVU8860
 32915              	.LBB4206:
 32916              	.LBI4206:
 758:src/xeq.c     ****     State2.state_lift = 1;
 32917              		.loc 1 758 6 view .LVU8861
 32918              	.LBB4207:
 759:src/xeq.c     **** }
 32919              		.loc 1 759 5 view .LVU8862
 32920 0a52 FFF790BB 		b	.L2421
 32921              	.L2200:
 32922              	.LBE4207:
 32923              	.LBE4206:
3979:src/xeq.c     **** 			illegal(op);
 32924              		.loc 1 3979 3 view .LVU8863
3979:src/xeq.c     **** 			illegal(op);
 32925              		.loc 1 3979 7 is_stmt 0 view .LVU8864
 32926 0a56 DFF888A1 		ldr	r10, .L2482+24
 32927              	.LVL2540:
3979:src/xeq.c     **** 			illegal(op);
 32928              		.loc 1 3979 6 view .LVU8865
 32929 0a5a DAF80030 		ldr	r3, [r10]
 32930 0a5e 002B     		cmp	r3, #0
 32931 0a60 00F0C080 		beq	.L2212
3980:src/xeq.c     **** 		else if (CmdLineLength) {
 32932              		.loc 1 3980 4 is_stmt 1 view .LVU8866
3980:src/xeq.c     **** 		else if (CmdLineLength) {
 32933              		.loc 1 3980 4 view .LVU8867
 32934              	.LVL2541:
 32935              	.LBB4208:
 32936              	.LBI4208:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32937              		.loc 1 537 5 view .LVU8868
 32938              	.LBB4209:
 538:src/xeq.c     **** 		Error = e;
 32939              		.loc 1 538 2 view .LVU8869
 538:src/xeq.c     **** 		Error = e;
 32940              		.loc 1 538 12 is_stmt 0 view .LVU8870
 32941 0a64 584B     		ldr	r3, .L2482
 32942 0a66 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccQlyisH.s 			page 832


 32943              		.loc 1 538 5 view .LVU8871
 32944 0a68 0028     		cmp	r0, #0
 32945 0a6a 3FF4ACAB 		beq	.L2158
 32946 0a6e FFF7ACBB 		b	.L2283
 32947              	.LVL2542:
 32948              	.L2256:
 538:src/xeq.c     **** 		Error = e;
 32949              		.loc 1 538 5 view .LVU8872
 32950              	.LBE4209:
 32951              	.LBE4208:
 32952              	.LBE4227:
 32953              	.LBE4553:
 32954              	.LBB4554:
 32955              	.LBB4446:
4816:src/xeq.c     **** 		}
 32956              		.loc 1 4816 5 is_stmt 1 view .LVU8873
 32957              	.LBB4428:
 32958              	.LBI4428:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 32959              		.loc 1 566 6 view .LVU8874
 32960              	.LBE4428:
 32961              	.LBE4446:
 32962              	.LBE4554:
 567:src/xeq.c     **** }
 32963              		.loc 1 567 2 view .LVU8875
 32964              	.LBB4555:
 32965              	.LBB4447:
 32966              	.LBB4431:
 32967              	.LBB4429:
 32968              	.LBI4429:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32969              		.loc 1 537 5 view .LVU8876
 32970              	.LBB4430:
 538:src/xeq.c     **** 		Error = e;
 32971              		.loc 1 538 2 view .LVU8877
 538:src/xeq.c     **** 		Error = e;
 32972              		.loc 1 538 12 is_stmt 0 view .LVU8878
 32973 0a72 554B     		ldr	r3, .L2482
 32974 0a74 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 32975              		.loc 1 538 5 view .LVU8879
 32976 0a76 0028     		cmp	r0, #0
 32977 0a78 7FF4D7AD 		bne	.L2430
 32978              	.LVL2543:
 538:src/xeq.c     **** 		Error = e;
 32979              		.loc 1 538 5 view .LVU8880
 32980              	.LBE4430:
 32981              	.LBE4429:
 32982              	.LBE4431:
 32983              	.LBE4447:
 32984              	.LBE4555:
 32985              	.LBB4556:
 32986              	.LBB4228:
 32987              	.LBB4210:
 32988              	.LBB4211:
 32989              	.LBB4212:
 32990              	.LBB4213:
ARM GAS  /tmp/ccQlyisH.s 			page 833


 32991              	.LBI4213:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32992              		.loc 1 537 5 is_stmt 1 view .LVU8881
 32993              	.LBB4214:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32994              		.loc 1 539 3 view .LVU8882
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32995              		.loc 1 539 9 is_stmt 0 view .LVU8883
 32996 0a7c 0D20     		movs	r0, #13
 32997 0a7e DFF860A1 		ldr	r10, .L2482+24
 32998 0a82 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 32999              		.loc 1 540 3 is_stmt 1 view .LVU8884
 33000 0a84 FFF7A1BB 		b	.L2283
 33001              	.LVL2544:
 33002              	.L2266:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 33003              		.loc 1 540 3 is_stmt 0 view .LVU8885
 33004              	.LBE4214:
 33005              	.LBE4213:
 33006              	.LBE4212:
 33007              	.LBE4211:
 33008              	.LBE4210:
 33009              	.LBE4228:
 33010              	.LBE4556:
 33011              	.LBB4557:
 33012              	.LBB4530:
4768:src/xeq.c     **** 	} else
 33013              		.loc 1 4768 4 is_stmt 1 view .LVU8886
 33014              	.LBB4519:
 33015              	.LBI4519:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 33016              		.loc 1 566 6 view .LVU8887
 33017              	.LBE4519:
 33018              	.LBE4530:
 33019              	.LBE4557:
 567:src/xeq.c     **** }
 33020              		.loc 1 567 2 view .LVU8888
 33021              	.LBB4558:
 33022              	.LBB4531:
 33023              	.LBB4524:
 33024              	.LBB4520:
 33025              	.LBI4520:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33026              		.loc 1 537 5 view .LVU8889
 33027              	.LBB4521:
 538:src/xeq.c     **** 		Error = e;
 33028              		.loc 1 538 2 view .LVU8890
 538:src/xeq.c     **** 		Error = e;
 33029              		.loc 1 538 12 is_stmt 0 view .LVU8891
 33030 0a88 4F4B     		ldr	r3, .L2482
 33031 0a8a 1A68     		ldr	r2, [r3]
 538:src/xeq.c     **** 		Error = e;
 33032              		.loc 1 538 5 view .LVU8892
 33033 0a8c 002A     		cmp	r2, #0
 33034 0a8e 7FF445AB 		bne	.L2164
 33035              	.LVL2545:
ARM GAS  /tmp/ccQlyisH.s 			page 834


 33036              	.LBB4522:
 33037              	.LBI4522:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33038              		.loc 1 537 5 is_stmt 1 view .LVU8893
 33039              	.LBB4523:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 33040              		.loc 1 539 3 view .LVU8894
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 33041              		.loc 1 539 9 is_stmt 0 view .LVU8895
 33042 0a92 0D22     		movs	r2, #13
 33043 0a94 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 33044              		.loc 1 540 3 is_stmt 1 view .LVU8896
 33045              	.LVL2546:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 33046              		.loc 1 540 3 is_stmt 0 view .LVU8897
 33047              	.LBE4523:
 33048              	.LBE4522:
 33049              	.LBE4521:
 33050              	.LBE4520:
 33051              	.LBE4524:
4770:src/xeq.c     **** }
 33052              		.loc 1 4770 3 is_stmt 1 view .LVU8898
 33053              	.LBE4531:
 33054              	.LBE4558:
5339:src/xeq.c     **** 		}
 33055              		.loc 1 5339 12 view .LVU8899
5349:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 33056              		.loc 1 5349 2 view .LVU8900
 33057 0a96 FFF741BB 		b	.L2164
 33058              	.LVL2547:
 33059              	.L2274:
5373:src/xeq.c     **** 						// Need space for double precision stack
 33060              		.loc 1 5373 34 is_stmt 0 discriminator 1 view .LVU8901
 33061 0a9a 9CF8CF17 		ldrb	r1, [ip, #1999]	@ zero_extendqisi2
 33062 0a9e 0B29     		cmp	r1, #11
 33063 0aa0 75D9     		bls	.L2276
5377:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33064              		.loc 1 5377 6 is_stmt 1 view .LVU8902
5377:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33065              		.loc 1 5377 20 is_stmt 0 view .LVU8903
 33066 0aa2 68F3C712 		bfi	r2, r8, #7, #1
 33067 0aa6 6A70     		strb	r2, [r5, #1]
5378:src/xeq.c     **** 						UState.mode_double = 1;
 33068              		.loc 1 5378 6 is_stmt 1 view .LVU8904
 33069 0aa8 1FE6     		b	.L2275
 33070              	.LVL2548:
 33071              	.L2245:
 33072              	.LBB4559:
 33073              	.LBB4280:
4725:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33074              		.loc 1 4725 4 view .LVU8905
4725:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33075              		.loc 1 4725 10 is_stmt 0 view .LVU8906
 33076 0aaa 4A4B     		ldr	r3, .L2482+12
 33077 0aac 05EB4505 		add	r5, r5, r5, lsl #1
 33078              	.LVL2549:
ARM GAS  /tmp/ccQlyisH.s 			page 835


4725:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33079              		.loc 1 4725 10 view .LVU8907
 33080 0ab0 53F83550 		ldr	r5, [r3, r5, lsl #3]
4725:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33081              		.loc 1 4725 7 view .LVU8908
 33082 0ab4 002D     		cmp	r5, #0
 33083 0ab6 DCD0     		beq	.L2256
 33084              	.LBB4257:
4726:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33085              		.loc 1 4726 5 is_stmt 1 view .LVU8909
 33086              	.LVL2550:
4727:src/xeq.c     **** 					return;
 33087              		.loc 1 4727 5 view .LVU8910
4727:src/xeq.c     **** 					return;
 33088              		.loc 1 4727 9 is_stmt 0 view .LVU8911
 33089 0ab8 2846     		mov	r0, r5
 33090 0aba FFF7FEFF 		bl	dispatch_xrom
 33091              	.LVL2551:
4727:src/xeq.c     **** 					return;
 33092              		.loc 1 4727 8 view .LVU8912
 33093 0abe 0028     		cmp	r0, #0
 33094 0ac0 7FF4C9AD 		bne	.L2150
 33095              	.LBB4258:
4730:src/xeq.c     **** 					getXY(&x, &y);
 33096              		.loc 1 4730 6 is_stmt 1 view .LVU8913
4731:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
 33097              		.loc 1 4731 6 view .LVU8914
 33098              	.LVL2552:
 33099              	.LBB4259:
 33100              	.LBI4259:
 845:src/xeq.c     **** 	getX(x);
 33101              		.loc 1 845 6 view .LVU8915
 33102              	.LBE4259:
 33103              	.LBE4258:
 33104              	.LBE4257:
 33105              	.LBE4280:
 33106              	.LBE4559:
 846:src/xeq.c     **** 	getY(y);
 33107              		.loc 1 846 2 view .LVU8916
 33108              	.LBB4560:
 33109              	.LBB4281:
 33110              	.LBB4274:
 33111              	.LBB4271:
 33112              	.LBB4266:
 33113              	.LBB4260:
 33114              	.LBI4260:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33115              		.loc 1 815 12 view .LVU8917
 33116              	.LBB4261:
 816:src/xeq.c     **** }
 33117              		.loc 1 816 2 view .LVU8918
 816:src/xeq.c     **** }
 33118              		.loc 1 816 9 is_stmt 0 view .LVU8919
 33119 0ac4 6421     		movs	r1, #100
 33120 0ac6 27A8     		add	r0, sp, #156
 33121              	.LVL2553:
 816:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 836


 33122              		.loc 1 816 9 view .LVU8920
 33123 0ac8 FFF7FEFF 		bl	getRegister
 33124              	.LVL2554:
 816:src/xeq.c     **** }
 33125              		.loc 1 816 9 view .LVU8921
 33126              	.LBE4261:
 33127              	.LBE4260:
 33128              	.LBE4266:
 33129              	.LBE4271:
 33130              	.LBE4274:
 33131              	.LBE4281:
 33132              	.LBE4560:
 847:src/xeq.c     **** }
 33133              		.loc 1 847 2 is_stmt 1 view .LVU8922
 33134              	.LBB4561:
 33135              	.LBB4282:
 33136              	.LBB4275:
 33137              	.LBB4272:
 33138              	.LBB4267:
 33139              	.LBB4262:
 33140              	.LBI4262:
 823:src/xeq.c     **** 	getRegister(y, regY_idx);
 33141              		.loc 1 823 6 view .LVU8923
 33142              	.LBB4263:
 824:src/xeq.c     **** }
 33143              		.loc 1 824 2 view .LVU8924
 33144              	.LBE4263:
 33145              	.LBE4262:
 33146              	.LBE4267:
4732:src/xeq.c     **** 						set_NaN(&r);
 33147              		.loc 1 4732 18 is_stmt 0 view .LVU8925
 33148 0acc 0DF1E40A 		add	r10, sp, #228
 33149              	.LBB4268:
 33150              	.LBB4265:
 33151              	.LBB4264:
 824:src/xeq.c     **** }
 33152              		.loc 1 824 2 view .LVU8926
 33153 0ad0 6521     		movs	r1, #101
 33154 0ad2 30A8     		add	r0, sp, #192
 33155              	.LVL2555:
 824:src/xeq.c     **** }
 33156              		.loc 1 824 2 view .LVU8927
 33157 0ad4 FFF7FEFF 		bl	getRegister
 33158              	.LVL2556:
 824:src/xeq.c     **** }
 33159              		.loc 1 824 2 view .LVU8928
 33160              	.LBE4264:
 33161              	.LBE4265:
 33162              	.LBE4268:
4732:src/xeq.c     **** 						set_NaN(&r);
 33163              		.loc 1 4732 6 is_stmt 1 view .LVU8929
4732:src/xeq.c     **** 						set_NaN(&r);
 33164              		.loc 1 4732 18 is_stmt 0 view .LVU8930
 33165 0ad8 27AA     		add	r2, sp, #156
 33166 0ada 30A9     		add	r1, sp, #192
 33167 0adc 5046     		mov	r0, r10
 33168 0ade A847     		blx	r5
ARM GAS  /tmp/ccQlyisH.s 			page 837


 33169              	.LVL2557:
4732:src/xeq.c     **** 						set_NaN(&r);
 33170              		.loc 1 4732 9 view .LVU8931
 33171 0ae0 0028     		cmp	r0, #0
 33172 0ae2 00F0C380 		beq	.L2470
 33173              	.L2250:
4734:src/xeq.c     **** 					lower();
 33174              		.loc 1 4734 6 is_stmt 1 view .LVU8932
 33175              	.LBB4269:
 33176              	.LBI4269:
 783:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33177              		.loc 1 783 6 view .LVU8933
 33178              	.LBB4270:
 784:src/xeq.c     **** }
 33179              		.loc 1 784 2 view .LVU8934
 33180 0ae6 384B     		ldr	r3, .L2482
 33181 0ae8 0593     		str	r3, [sp, #20]
 33182 0aea 6421     		movs	r1, #100
 33183 0aec 6C20     		movs	r0, #108
 33184 0aee FFF7FEFF 		bl	copyreg_n
 33185              	.LVL2558:
 33186              	.LBE4270:
 33187              	.LBE4269:
4735:src/xeq.c     **** 					setX(&r);
 33188              		.loc 1 4735 6 view .LVU8935
 33189              	.L2425:
4735:src/xeq.c     **** 					setX(&r);
 33190              		.loc 1 4735 6 is_stmt 0 view .LVU8936
 33191              	.LBE4272:
 33192              	.LBE4275:
 33193              	.LBE4282:
 33194              	.LBE4561:
 33195              	.LBB4562:
 33196              	.LBB4448:
 33197              	.LBB4432:
 33198              	.LBB4433:
4812:src/xeq.c     **** 					setX(&r);
 33199              		.loc 1 4812 6 is_stmt 1 view .LVU8937
 33200 0af2 FFF7FEFF 		bl	lower
 33201              	.LVL2559:
 33202              	.L2427:
4813:src/xeq.c     **** 				}
 33203              		.loc 1 4813 6 view .LVU8938
 33204              	.LBB4434:
 33205              	.LBI4434:
 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 33206              		.loc 1 819 6 view .LVU8939
 33207              	.LBB4435:
 820:src/xeq.c     **** }
 33208              		.loc 1 820 2 view .LVU8940
 33209 0af6 5146     		mov	r1, r10
 33210 0af8 6420     		movs	r0, #100
 33211 0afa FFF7FEFF 		bl	setRegister
 33212              	.LVL2560:
 820:src/xeq.c     **** }
 33213              		.loc 1 820 2 is_stmt 0 view .LVU8941
 33214 0afe 059B     		ldr	r3, [sp, #20]
ARM GAS  /tmp/ccQlyisH.s 			page 838


 33215 0b00 1A68     		ldr	r2, [r3]
 33216              	.LBE4435:
 33217              	.LBE4434:
 33218              	.LBE4433:
 33219              	.LBE4432:
 33220 0b02 FFF73EBB 		b	.L2153
 33221              	.LVL2561:
 33222              	.L2253:
4801:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33223              		.loc 1 4801 4 is_stmt 1 view .LVU8942
4801:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33224              		.loc 1 4801 10 is_stmt 0 view .LVU8943
 33225 0b06 344B     		ldr	r3, .L2482+16
 33226 0b08 05EB8505 		add	r5, r5, r5, lsl #2
 33227              	.LVL2562:
4801:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33228              		.loc 1 4801 10 view .LVU8944
 33229 0b0c 53F82550 		ldr	r5, [r3, r5, lsl #2]
4801:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33230              		.loc 1 4801 7 view .LVU8945
 33231 0b10 002D     		cmp	r5, #0
 33232 0b12 AED0     		beq	.L2256
 33233              	.LBB4440:
4802:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33234              		.loc 1 4802 5 is_stmt 1 view .LVU8946
 33235              	.LVL2563:
4803:src/xeq.c     **** 					return;
 33236              		.loc 1 4803 5 view .LVU8947
4803:src/xeq.c     **** 					return;
 33237              		.loc 1 4803 9 is_stmt 0 view .LVU8948
 33238 0b14 2846     		mov	r0, r5
 33239 0b16 FFF7FEFF 		bl	dispatch_xrom
 33240              	.LVL2564:
4803:src/xeq.c     **** 					return;
 33241              		.loc 1 4803 8 view .LVU8949
 33242 0b1a 0028     		cmp	r0, #0
 33243 0b1c 7FF49BAD 		bne	.L2150
 33244              	.LBB4438:
4806:src/xeq.c     **** 					getXYZ(&x, &y, &z);
 33245              		.loc 1 4806 6 is_stmt 1 view .LVU8950
4807:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 33246              		.loc 1 4807 6 view .LVU8951
 33247 0b20 30AA     		add	r2, sp, #192
 33248 0b22 27A9     		add	r1, sp, #156
 33249 0b24 1EA8     		add	r0, sp, #120
4808:src/xeq.c     **** 						set_NaN(&r);
 33250              		.loc 1 4808 18 is_stmt 0 view .LVU8952
 33251 0b26 0DF1E40A 		add	r10, sp, #228
4807:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 33252              		.loc 1 4807 6 view .LVU8953
 33253 0b2a FFF7FEFF 		bl	getXYZ
 33254              	.LVL2565:
4808:src/xeq.c     **** 						set_NaN(&r);
 33255              		.loc 1 4808 6 is_stmt 1 view .LVU8954
4808:src/xeq.c     **** 						set_NaN(&r);
 33256              		.loc 1 4808 18 is_stmt 0 view .LVU8955
 33257 0b2e 1EAB     		add	r3, sp, #120
ARM GAS  /tmp/ccQlyisH.s 			page 839


 33258 0b30 27AA     		add	r2, sp, #156
 33259 0b32 30A9     		add	r1, sp, #192
 33260 0b34 5046     		mov	r0, r10
 33261 0b36 A847     		blx	r5
 33262              	.LVL2566:
4808:src/xeq.c     **** 						set_NaN(&r);
 33263              		.loc 1 4808 9 view .LVU8956
 33264 0b38 0028     		cmp	r0, #0
 33265 0b3a 00F09B80 		beq	.L2471
 33266              	.L2258:
4810:src/xeq.c     **** 					lower();
 33267              		.loc 1 4810 6 is_stmt 1 view .LVU8957
 33268              	.LBB4436:
 33269              	.LBI4436:
 783:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33270              		.loc 1 783 6 view .LVU8958
 33271              	.LBB4437:
 784:src/xeq.c     **** }
 33272              		.loc 1 784 2 view .LVU8959
 33273 0b3e 224B     		ldr	r3, .L2482
 33274 0b40 0593     		str	r3, [sp, #20]
 33275 0b42 6421     		movs	r1, #100
 33276 0b44 6C20     		movs	r0, #108
 33277 0b46 FFF7FEFF 		bl	copyreg_n
 33278              	.LVL2567:
 33279              	.LBE4437:
 33280              	.LBE4436:
4811:src/xeq.c     **** 					lower();
 33281              		.loc 1 4811 6 view .LVU8960
 33282 0b4a FFF7FEFF 		bl	lower
 33283              	.LVL2568:
 33284 0b4e D0E7     		b	.L2425
 33285              	.LVL2569:
 33286              	.L2237:
4811:src/xeq.c     **** 					lower();
 33287              		.loc 1 4811 6 is_stmt 0 view .LVU8961
 33288              	.LBE4438:
 33289              	.LBE4440:
 33290              	.LBE4448:
 33291              	.LBE4562:
 33292              	.LBB4563:
 33293              	.LBB4395:
4649:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33294              		.loc 1 4649 4 is_stmt 1 view .LVU8962
4649:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33295              		.loc 1 4649 10 is_stmt 0 view .LVU8963
 33296 0b50 224B     		ldr	r3, .L2482+20
 33297 0b52 05EB4505 		add	r5, r5, r5, lsl #1
 33298              	.LVL2570:
4649:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33299              		.loc 1 4649 10 view .LVU8964
 33300 0b56 53F83550 		ldr	r5, [r3, r5, lsl #3]
4649:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33301              		.loc 1 4649 7 view .LVU8965
 33302 0b5a 002D     		cmp	r5, #0
 33303 0b5c 89D0     		beq	.L2256
 33304              	.LBB4380:
ARM GAS  /tmp/ccQlyisH.s 			page 840


4650:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33305              		.loc 1 4650 5 is_stmt 1 view .LVU8966
 33306              	.LVL2571:
4651:src/xeq.c     **** 					return;
 33307              		.loc 1 4651 5 view .LVU8967
4651:src/xeq.c     **** 					return;
 33308              		.loc 1 4651 9 is_stmt 0 view .LVU8968
 33309 0b5e 2846     		mov	r0, r5
 33310 0b60 FFF7FEFF 		bl	dispatch_xrom
 33311              	.LVL2572:
4651:src/xeq.c     **** 					return;
 33312              		.loc 1 4651 8 view .LVU8969
 33313 0b64 0028     		cmp	r0, #0
 33314 0b66 7FF476AD 		bne	.L2150
 33315              	.LBB4381:
4654:src/xeq.c     **** 					getX(&x);
 33316              		.loc 1 4654 6 is_stmt 1 view .LVU8970
4655:src/xeq.c     **** 					if (NULL == fp(&r, &x))
 33317              		.loc 1 4655 6 view .LVU8971
 33318              	.LVL2573:
 33319              	.LBB4382:
 33320              	.LBI4382:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33321              		.loc 1 815 12 view .LVU8972
 33322              	.LBB4383:
 816:src/xeq.c     **** }
 33323              		.loc 1 816 2 view .LVU8973
 816:src/xeq.c     **** }
 33324              		.loc 1 816 9 is_stmt 0 view .LVU8974
 33325 0b6a 6421     		movs	r1, #100
 33326 0b6c 30A8     		add	r0, sp, #192
 33327              	.LVL2574:
 816:src/xeq.c     **** }
 33328              		.loc 1 816 9 view .LVU8975
 33329              	.LBE4383:
 33330              	.LBE4382:
4656:src/xeq.c     **** 						set_NaN(&r);
 33331              		.loc 1 4656 18 view .LVU8976
 33332 0b6e 0DF1E40A 		add	r10, sp, #228
 33333              	.LBB4385:
 33334              	.LBB4384:
 816:src/xeq.c     **** }
 33335              		.loc 1 816 9 view .LVU8977
 33336 0b72 FFF7FEFF 		bl	getRegister
 33337              	.LVL2575:
 816:src/xeq.c     **** }
 33338              		.loc 1 816 9 view .LVU8978
 33339              	.LBE4384:
 33340              	.LBE4385:
4656:src/xeq.c     **** 						set_NaN(&r);
 33341              		.loc 1 4656 6 is_stmt 1 view .LVU8979
4656:src/xeq.c     **** 						set_NaN(&r);
 33342              		.loc 1 4656 18 is_stmt 0 view .LVU8980
 33343 0b76 30A9     		add	r1, sp, #192
 33344 0b78 5046     		mov	r0, r10
 33345 0b7a A847     		blx	r5
 33346              	.LVL2576:
ARM GAS  /tmp/ccQlyisH.s 			page 841


4656:src/xeq.c     **** 						set_NaN(&r);
 33347              		.loc 1 4656 9 view .LVU8981
 33348 0b7c 0028     		cmp	r0, #0
 33349 0b7e 71D0     		beq	.L2472
 33350              	.L2242:
4658:src/xeq.c     **** 					setX(&r);
 33351              		.loc 1 4658 6 is_stmt 1 view .LVU8982
 33352              	.LBB4386:
 33353              	.LBI4386:
 783:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33354              		.loc 1 783 6 view .LVU8983
 33355              	.LBB4387:
 784:src/xeq.c     **** }
 33356              		.loc 1 784 2 view .LVU8984
 33357 0b80 114B     		ldr	r3, .L2482
 33358 0b82 0593     		str	r3, [sp, #20]
 33359 0b84 6421     		movs	r1, #100
 33360 0b86 6C20     		movs	r0, #108
 33361 0b88 FFF7FEFF 		bl	copyreg_n
 33362              	.LVL2577:
 33363              	.LBE4387:
 33364              	.LBE4386:
4659:src/xeq.c     **** 				}
 33365              		.loc 1 4659 6 view .LVU8985
 33366              	.LBB4388:
 33367              	.LBI4388:
 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 33368              		.loc 1 819 6 view .LVU8986
 33369              	.LBB4389:
 820:src/xeq.c     **** }
 33370              		.loc 1 820 2 view .LVU8987
 33371 0b8c B3E7     		b	.L2427
 33372              	.LVL2578:
 33373              	.L2276:
 820:src/xeq.c     **** }
 33374              		.loc 1 820 2 is_stmt 0 view .LVU8988
 33375              	.LBE4389:
 33376              	.LBE4388:
 33377              	.LBE4381:
 33378              	.LBE4380:
 33379              	.LBE4395:
 33380              	.LBE4563:
5375:src/xeq.c     **** 					}
 33381              		.loc 1 5375 7 is_stmt 1 view .LVU8989
 33382 0b8e 7D21     		movs	r1, #125
 33383 0b90 0C20     		movs	r0, #12
 33384 0b92 0393     		str	r3, [sp, #12]
 33385 0b94 FFF7FEFF 		bl	cmdregs
 33386              	.LVL2579:
 33387 0b98 039B     		ldr	r3, [sp, #12]
5377:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33388              		.loc 1 5377 20 is_stmt 0 view .LVU8990
 33389 0b9a 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 33390 0b9c 1968     		ldr	r1, [r3]
5377:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33391              		.loc 1 5377 6 is_stmt 1 view .LVU8991
5377:src/xeq.c     **** 					if (Error == ERR_NONE) {
ARM GAS  /tmp/ccQlyisH.s 			page 842


 33392              		.loc 1 5377 20 is_stmt 0 view .LVU8992
 33393 0b9e 68F3C712 		bfi	r2, r8, #7, #1
 33394 0ba2 6A70     		strb	r2, [r5, #1]
5378:src/xeq.c     **** 						UState.mode_double = 1;
 33395              		.loc 1 5378 6 is_stmt 1 view .LVU8993
5378:src/xeq.c     **** 						UState.mode_double = 1;
 33396              		.loc 1 5378 9 is_stmt 0 view .LVU8994
 33397 0ba4 0029     		cmp	r1, #0
 33398 0ba6 3FF4A0AD 		beq	.L2275
5383:src/xeq.c     **** 				}
 33399              		.loc 1 5383 7 is_stmt 1 view .LVU8995
5383:src/xeq.c     **** 				}
 33400              		.loc 1 5383 13 is_stmt 0 view .LVU8996
 33401 0baa C3F80080 		str	r8, [r3]
 33402 0bae FFF790BB 		b	.L2273
 33403              	.LVL2580:
 33404              	.L2457:
 33405              	.LBB4564:
 33406              	.LBB4355:
 33407              	.LBB4350:
 33408              	.LBB4332:
 33409              	.LBB4331:
 740:src/xeq.c     **** }
 33410              		.loc 1 740 3 is_stmt 1 view .LVU8997
 33411 0bb2 FFF7FEFF 		bl	lift
 33412              	.LVL2581:
 33413              	.L2229:
 33414              	.LBE4331:
 33415              	.LBE4332:
4601:src/xeq.c     **** 				default:
 33416              		.loc 1 4601 13 view .LVU8998
 33417              	.LBB4333:
 33418              	.LBI4333:
 738:src/xeq.c     **** 	if (get_lift())
 33419              		.loc 1 738 6 view .LVU8999
 33420              	.LBB4334:
 739:src/xeq.c     **** 		lift();
 33421              		.loc 1 739 2 view .LVU9000
 33422              	.LBB4335:
 33423              	.LBI4335:
 734:src/xeq.c     **** 	return State2.state_lift;
 33424              		.loc 1 734 12 view .LVU9001
 33425              	.LBB4336:
 735:src/xeq.c     **** }
 33426              		.loc 1 735 2 view .LVU9002
 735:src/xeq.c     **** }
 33427              		.loc 1 735 15 is_stmt 0 view .LVU9003
 33428 0bb6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 33429              	.LBE4336:
 33430              	.LBE4335:
 739:src/xeq.c     **** 		lift();
 33431              		.loc 1 739 5 view .LVU9004
 33432 0bb8 5806     		lsls	r0, r3, #25
 33433 0bba 7FF5F2AB 		bpl	.L2230
 740:src/xeq.c     **** }
 33434              		.loc 1 740 3 is_stmt 1 view .LVU9005
 33435 0bbe FFF7FEFF 		bl	lift
ARM GAS  /tmp/ccQlyisH.s 			page 843


 33436              	.LVL2582:
 33437 0bc2 FFF7EEBB 		b	.L2230
 33438              	.L2483:
 33439 0bc6 00BF     		.align	2
 33440              	.L2482:
 33441 0bc8 00000000 		.word	Error
 33442 0bcc 00000000 		.word	const_1
 33443 0bd0 00000000 		.word	const_0
 33444 0bd4 00000000 		.word	dyfuncs
 33445 0bd8 00000000 		.word	trifuncs
 33446 0bdc 00000000 		.word	monfuncs
 33447 0be0 00000000 		.word	Running
 33448              	.LVL2583:
 33449              	.L2212:
 740:src/xeq.c     **** }
 33450              		.loc 1 740 3 is_stmt 0 view .LVU9006
 33451              	.LBE4334:
 33452              	.LBE4333:
 33453              	.LBE4350:
 33454              	.LBE4355:
 33455              	.LBE4564:
 33456              	.LBB4565:
 33457              	.LBB4229:
3981:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33458              		.loc 1 3981 8 is_stmt 1 view .LVU9007
3981:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33459              		.loc 1 3981 12 is_stmt 0 view .LVU9008
 33460 0be4 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3981:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33461              		.loc 1 3981 11 view .LVU9009
 33462 0be6 002B     		cmp	r3, #0
 33463 0be8 5FD0     		beq	.L2213
3983:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33464              		.loc 1 3983 4 is_stmt 1 view .LVU9010
3983:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33465              		.loc 1 3983 7 is_stmt 0 view .LVU9011
 33466 0bea 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
3983:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33467              		.loc 1 3983 48 view .LVU9012
 33468 0bec 013B     		subs	r3, r3, #1
3983:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33469              		.loc 1 3983 7 view .LVU9013
 33470 0bee 22B1     		cbz	r2, .L2214
3983:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33471              		.loc 1 3983 34 view .LVU9014
 33472 0bf0 E118     		adds	r1, r4, r3
3983:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33473              		.loc 1 3983 24 view .LVU9015
 33474 0bf2 91F82020 		ldrb	r2, [r1, #32]	@ zero_extendqisi2
 33475 0bf6 442A     		cmp	r2, #68
 33476 0bf8 66D0     		beq	.L2473
 33477              	.L2214:
3988:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33478              		.loc 1 3988 4 is_stmt 1 view .LVU9016
3988:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33479              		.loc 1 3988 17 is_stmt 0 view .LVU9017
 33480 0bfa DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccQlyisH.s 			page 844


3989:src/xeq.c     **** 				CmdLineEex = 0;
 33481              		.loc 1 3989 15 view .LVU9018
 33482 0bfc E218     		adds	r2, r4, r3
3988:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33483              		.loc 1 3988 17 view .LVU9019
 33484 0bfe 2377     		strb	r3, [r4, #28]
3989:src/xeq.c     **** 				CmdLineEex = 0;
 33485              		.loc 1 3989 4 is_stmt 1 view .LVU9020
3989:src/xeq.c     **** 				CmdLineEex = 0;
 33486              		.loc 1 3989 15 is_stmt 0 view .LVU9021
 33487 0c00 92F82030 		ldrb	r3, [r2, #32]	@ zero_extendqisi2
3989:src/xeq.c     **** 				CmdLineEex = 0;
 33488              		.loc 1 3989 7 view .LVU9022
 33489 0c04 452B     		cmp	r3, #69
 33490 0c06 59D0     		beq	.L2474
3991:src/xeq.c     **** 				CmdLineDot--;
 33491              		.loc 1 3991 9 is_stmt 1 view .LVU9023
3991:src/xeq.c     **** 				CmdLineDot--;
 33492              		.loc 1 3991 12 is_stmt 0 view .LVU9024
 33493 0c08 2E2B     		cmp	r3, #46
 33494 0c0a 7FF424AD 		bne	.L2150
3992:src/xeq.c     **** 		} else
 33495              		.loc 1 3992 5 is_stmt 1 view .LVU9025
3992:src/xeq.c     **** 		} else
 33496              		.loc 1 3992 15 is_stmt 0 view .LVU9026
 33497 0c0e A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 33498 0c10 3B4B     		ldr	r3, .L2484
 33499 0c12 013A     		subs	r2, r2, #1
 33500 0c14 A277     		strb	r2, [r4, #30]
 33501 0c16 1A68     		ldr	r2, [r3]
 33502 0c18 FFF7B3BA 		b	.L2153
 33503              	.LVL2584:
 33504              	.L2467:
 33505              	.LBB4215:
 33506              	.LBB4188:
3992:src/xeq.c     **** 		} else
 33507              		.loc 1 3992 15 view .LVU9027
 33508 0c1c FFF7FEFF 		bl	process_cmdline.part.0
 33509              	.LVL2585:
 33510 0c20 A6E6     		b	.L2217
 33511              	.L2211:
 33512              	.LBE4188:
 33513              	.LBE4215:
 33514              	.LBB4216:
3969:src/xeq.c     **** 
 33515              		.loc 1 3969 4 is_stmt 1 view .LVU9028
3971:src/xeq.c     **** 			dn_minus(&r, &x);
 33516              		.loc 1 3971 4 view .LVU9029
 33517              	.LVL2586:
 33518              	.LBB4167:
 33519              	.LBI4167:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33520              		.loc 1 815 12 view .LVU9030
 33521              	.LBB4168:
 816:src/xeq.c     **** }
 33522              		.loc 1 816 2 view .LVU9031
 816:src/xeq.c     **** }
ARM GAS  /tmp/ccQlyisH.s 			page 845


 33523              		.loc 1 816 9 is_stmt 0 view .LVU9032
 33524 0c22 30A8     		add	r0, sp, #192
 33525              	.LVL2587:
 816:src/xeq.c     **** }
 33526              		.loc 1 816 9 view .LVU9033
 33527 0c24 6421     		movs	r1, #100
 33528 0c26 FFF7FEFF 		bl	getRegister
 33529              	.LVL2588:
 816:src/xeq.c     **** }
 33530              		.loc 1 816 9 view .LVU9034
 33531              	.LBE4168:
 33532              	.LBE4167:
3972:src/xeq.c     **** 			setX(&r);
 33533              		.loc 1 3972 4 is_stmt 1 view .LVU9035
 33534 0c2a 30A9     		add	r1, sp, #192
 33535 0c2c 39A8     		add	r0, sp, #228
 33536 0c2e FFF7FEFF 		bl	dn_minus
 33537              	.LVL2589:
3973:src/xeq.c     **** 			set_lift();
 33538              		.loc 1 3973 4 view .LVU9036
 33539              	.LBB4169:
 33540              	.LBI4169:
 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 33541              		.loc 1 819 6 view .LVU9037
 33542              	.LBB4170:
 820:src/xeq.c     **** }
 33543              		.loc 1 820 2 view .LVU9038
 33544 0c32 39A9     		add	r1, sp, #228
 33545              	.LVL2590:
 820:src/xeq.c     **** }
 33546              		.loc 1 820 2 is_stmt 0 view .LVU9039
 33547 0c34 6420     		movs	r0, #100
 33548 0c36 FFF7FEFF 		bl	setRegister
 33549              	.LVL2591:
 820:src/xeq.c     **** }
 33550              		.loc 1 820 2 view .LVU9040
 33551 0c3a FFF79CBA 		b	.L2421
 33552              	.LVL2592:
 33553              	.L2469:
 820:src/xeq.c     **** }
 33554              		.loc 1 820 2 view .LVU9041
 33555              	.LBE4170:
 33556              	.LBE4169:
 33557              	.LBE4216:
3964:src/xeq.c     **** 		else if (is_intmode()) {
 33558              		.loc 1 3964 4 is_stmt 1 view .LVU9042
 33559              	.LBB4217:
 33560              	.LBI4217:
3207:src/xeq.c     **** 	if (CmdLineEex) {
 33561              		.loc 1 3207 13 view .LVU9043
 33562              	.LBB4218:
3208:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33563              		.loc 1 3208 2 view .LVU9044
3208:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33564              		.loc 1 3208 6 is_stmt 0 view .LVU9045
 33565 0c3e 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3208:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/ccQlyisH.s 			page 846


 33566              		.loc 1 3208 5 view .LVU9046
 33567 0c40 E3B1     		cbz	r3, .L2208
3212:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
 33568              		.loc 1 3212 3 is_stmt 1 view .LVU9047
3213:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 33569              		.loc 1 3213 4 view .LVU9048
3213:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 33570              		.loc 1 3213 24 is_stmt 0 view .LVU9049
 33571 0c42 E218     		adds	r2, r4, r3
 33572 0c44 2E4B     		ldr	r3, .L2484
 33573 0c46 92F82010 		ldrb	r1, [r2, #32]	@ zero_extendqisi2
 33574 0c4a 81F00101 		eor	r1, r1, #1
 33575 0c4e 82F82010 		strb	r1, [r2, #32]
 33576 0c52 1A68     		ldr	r2, [r3]
 33577 0c54 FFF795BA 		b	.L2153
 33578              	.L2466:
3213:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 33579              		.loc 1 3213 24 view .LVU9050
 33580              	.LBE4218:
 33581              	.LBE4217:
4026:src/xeq.c     **** 		else
 33582              		.loc 1 4026 4 is_stmt 1 view .LVU9051
 33583 0c58 FFF7FEFF 		bl	sigma_plus
 33584              	.LVL2593:
 33585 0c5c 7CE6     		b	.L2222
 33586              	.L2465:
 33587              	.LBB4221:
 33588              	.LBB4173:
4026:src/xeq.c     **** 		else
 33589              		.loc 1 4026 4 is_stmt 0 view .LVU9052
 33590 0c5e FFF7FEFF 		bl	process_cmdline.part.0
 33591              	.LVL2594:
 33592 0c62 6BE6     		b	.L2220
 33593              	.LVL2595:
 33594              	.L2472:
4026:src/xeq.c     **** 		else
 33595              		.loc 1 4026 4 view .LVU9053
 33596              	.LBE4173:
 33597              	.LBE4221:
 33598              	.LBE4229:
 33599              	.LBE4565:
 33600              	.LBB4566:
 33601              	.LBB4396:
 33602              	.LBB4391:
 33603              	.LBB4390:
4657:src/xeq.c     **** 					setlastX();
 33604              		.loc 1 4657 7 is_stmt 1 view .LVU9054
 33605 0c64 5046     		mov	r0, r10
 33606 0c66 FFF7FEFF 		bl	set_NaN
 33607              	.LVL2596:
 33608 0c6a 89E7     		b	.L2242
 33609              	.LVL2597:
 33610              	.L2470:
4657:src/xeq.c     **** 					setlastX();
 33611              		.loc 1 4657 7 is_stmt 0 view .LVU9055
 33612              	.LBE4390:
 33613              	.LBE4391:
ARM GAS  /tmp/ccQlyisH.s 			page 847


 33614              	.LBE4396:
 33615              	.LBE4566:
 33616              	.LBB4567:
 33617              	.LBB4283:
 33618              	.LBB4276:
 33619              	.LBB4273:
4733:src/xeq.c     **** 					setlastX();
 33620              		.loc 1 4733 7 is_stmt 1 view .LVU9056
 33621 0c6c 5046     		mov	r0, r10
 33622 0c6e FFF7FEFF 		bl	set_NaN
 33623              	.LVL2598:
 33624 0c72 38E7     		b	.L2250
 33625              	.LVL2599:
 33626              	.L2471:
4733:src/xeq.c     **** 					setlastX();
 33627              		.loc 1 4733 7 is_stmt 0 view .LVU9057
 33628              	.LBE4273:
 33629              	.LBE4276:
 33630              	.LBE4283:
 33631              	.LBE4567:
 33632              	.LBB4568:
 33633              	.LBB4449:
 33634              	.LBB4441:
 33635              	.LBB4439:
4809:src/xeq.c     **** 					setlastX();
 33636              		.loc 1 4809 7 is_stmt 1 view .LVU9058
 33637 0c74 5046     		mov	r0, r10
 33638 0c76 FFF7FEFF 		bl	set_NaN
 33639              	.LVL2600:
 33640 0c7a 60E7     		b	.L2258
 33641              	.LVL2601:
 33642              	.L2208:
4809:src/xeq.c     **** 					setlastX();
 33643              		.loc 1 4809 7 is_stmt 0 view .LVU9059
 33644              	.LBE4439:
 33645              	.LBE4441:
 33646              	.LBE4449:
 33647              	.LBE4568:
 33648              	.LBB4569:
 33649              	.LBB4230:
 33650              	.LBB4222:
 33651              	.LBB4219:
3239:src/xeq.c     **** 			if (CmdLineLength > 1)
 33652              		.loc 1 3239 3 is_stmt 1 view .LVU9060
3239:src/xeq.c     **** 			if (CmdLineLength > 1)
 33653              		.loc 1 3239 6 is_stmt 0 view .LVU9061
 33654 0c7c 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 33655 0c80 2D2B     		cmp	r3, #45
 33656 0c82 28D0     		beq	.L2475
3243:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 33657              		.loc 1 3243 10 is_stmt 1 view .LVU9062
3243:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 33658              		.loc 1 3243 13 is_stmt 0 view .LVU9063
 33659 0c84 122A     		cmp	r2, #18
 33660 0c86 3FF6E6AC 		bhi	.L2150
3244:src/xeq.c     **** 			Cmdline[0] = '-';
 33661              		.loc 1 3244 4 is_stmt 1 view .LVU9064
ARM GAS  /tmp/ccQlyisH.s 			page 848


 33662 0c8a 1E49     		ldr	r1, .L2484+4
 33663 0c8c 1C4B     		ldr	r3, .L2484
 33664 0c8e 0593     		str	r3, [sp, #20]
 33665 0c90 481C     		adds	r0, r1, #1
 33666 0c92 FFF7FEFF 		bl	xcopy
 33667              	.LVL2602:
3245:src/xeq.c     **** 			CmdLineLength++;
 33668              		.loc 1 3245 4 view .LVU9065
3246:src/xeq.c     **** 		}
 33669              		.loc 1 3246 17 is_stmt 0 view .LVU9066
 33670 0c96 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 33671 0c98 059B     		ldr	r3, [sp, #20]
 33672 0c9a 0131     		adds	r1, r1, #1
3245:src/xeq.c     **** 			CmdLineLength++;
 33673              		.loc 1 3245 15 view .LVU9067
 33674 0c9c 2D20     		movs	r0, #45
 33675 0c9e 1A68     		ldr	r2, [r3]
3246:src/xeq.c     **** 		}
 33676              		.loc 1 3246 17 view .LVU9068
 33677 0ca0 2177     		strb	r1, [r4, #28]
3245:src/xeq.c     **** 			CmdLineLength++;
 33678              		.loc 1 3245 15 view .LVU9069
 33679 0ca2 84F82000 		strb	r0, [r4, #32]
3246:src/xeq.c     **** 		}
 33680              		.loc 1 3246 4 is_stmt 1 view .LVU9070
 33681 0ca6 FFF76CBA 		b	.L2153
 33682              	.LVL2603:
 33683              	.L2213:
3246:src/xeq.c     **** 		}
 33684              		.loc 1 3246 4 is_stmt 0 view .LVU9071
 33685              	.LBE4219:
 33686              	.LBE4222:
3994:src/xeq.c     **** 		break;
 33687              		.loc 1 3994 4 is_stmt 1 view .LVU9072
 33688 0caa 154B     		ldr	r3, .L2484
 33689 0cac 0593     		str	r3, [sp, #20]
 33690 0cae 3F20     		movs	r0, #63
 33691 0cb0 FFF7FEFF 		bl	clrx
 33692              	.LVL2604:
 33693 0cb4 059B     		ldr	r3, [sp, #20]
 33694 0cb6 1A68     		ldr	r2, [r3]
 33695 0cb8 FFF763BA 		b	.L2153
 33696              	.L2474:
3990:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 33697              		.loc 1 3990 5 view .LVU9073
 33698 0cbc 104B     		ldr	r3, .L2484
3990:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 33699              		.loc 1 3990 16 is_stmt 0 view .LVU9074
 33700 0cbe 0021     		movs	r1, #0
 33701 0cc0 1A68     		ldr	r2, [r3]
 33702 0cc2 6177     		strb	r1, [r4, #29]
 33703 0cc4 FFF75DBA 		b	.L2153
 33704              	.L2473:
3984:src/xeq.c     **** 				break;
 33705              		.loc 1 3984 5 is_stmt 1 view .LVU9075
 33706 0cc8 0D4B     		ldr	r3, .L2484
3984:src/xeq.c     **** 				break;
ARM GAS  /tmp/ccQlyisH.s 			page 849


 33707              		.loc 1 3984 30 is_stmt 0 view .LVU9076
 33708 0cca 4520     		movs	r0, #69
 33709 0ccc 1A68     		ldr	r2, [r3]
 33710 0cce 81F82000 		strb	r0, [r1, #32]
3985:src/xeq.c     **** 			}
 33711              		.loc 1 3985 5 is_stmt 1 view .LVU9077
 33712 0cd2 FFF756BA 		b	.L2153
 33713              	.LVL2605:
 33714              	.L2475:
 33715              	.LBB4223:
 33716              	.LBB4220:
3240:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 33717              		.loc 1 3240 4 view .LVU9078
3240:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 33718              		.loc 1 3240 7 is_stmt 0 view .LVU9079
 33719 0cd6 012A     		cmp	r2, #1
 33720 0cd8 03D9     		bls	.L2210
3241:src/xeq.c     **** 			CmdLineLength--;
 33721              		.loc 1 3241 5 is_stmt 1 view .LVU9080
 33722 0cda 0B49     		ldr	r1, .L2484+8
 33723 0cdc 481E     		subs	r0, r1, #1
 33724 0cde FFF7FEFF 		bl	xcopy
 33725              	.LVL2606:
 33726              	.L2210:
3242:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33727              		.loc 1 3242 4 view .LVU9081
3242:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33728              		.loc 1 3242 17 is_stmt 0 view .LVU9082
 33729 0ce2 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 33730 0ce4 064B     		ldr	r3, .L2484
 33731 0ce6 013A     		subs	r2, r2, #1
 33732 0ce8 2277     		strb	r2, [r4, #28]
 33733 0cea 1A68     		ldr	r2, [r3]
 33734 0cec FFF749BA 		b	.L2153
 33735              	.LVL2607:
 33736              	.L2468:
3242:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33737              		.loc 1 3242 17 view .LVU9083
 33738              	.LBE4220:
 33739              	.LBE4223:
 33740              	.LBB4224:
3956:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 33741              		.loc 1 3956 5 is_stmt 1 view .LVU9084
 33742 0cf0 0120     		movs	r0, #1
 33743 0cf2 FFF7FEFF 		bl	digit
 33744              	.LVL2608:
 33745 0cf6 8AE6     		b	.L2206
 33746              	.LVL2609:
 33747              	.L2204:
3956:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 33748              		.loc 1 3956 5 is_stmt 0 view .LVU9085
 33749              	.LBE4224:
3909:src/xeq.c     **** 			CmdLineDot++;
 33750              		.loc 1 3909 5 is_stmt 1 view .LVU9086
 33751 0cf8 0020     		movs	r0, #0
 33752 0cfa FFF7FEFF 		bl	digit
 33753              	.LVL2610:
ARM GAS  /tmp/ccQlyisH.s 			page 850


 33754 0cfe 5FE6     		b	.L2205
 33755              	.L2485:
 33756              		.align	2
 33757              	.L2484:
 33758 0d00 00000000 		.word	Error
 33759 0d04 20000000 		.word	StateWhileOn+32
 33760 0d08 21000000 		.word	StateWhileOn+33
 33761              	.LBE4230:
 33762              	.LBE4569:
 33763              		.cfi_endproc
 33764              	.LFE249:
 33766              		.section	.text.xeq_single,"ax",%progbits
 33767              		.align	1
 33768              		.p2align 2,,3
 33769              		.syntax unified
 33770              		.thumb
 33771              		.thumb_func
 33772              		.fpu fpv4-sp-d16
 33774              	xeq_single:
 33775              	.LFB250:
5427:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 33776              		.loc 1 5427 30 view -0
 33777              		.cfi_startproc
 33778              		@ args = 0, pretend = 0, frame = 0
 33779              		@ frame_needed = 0, uses_anonymous_args = 0
5428:src/xeq.c     **** 
 33780              		.loc 1 5428 2 view .LVU9088
5428:src/xeq.c     **** 
 33781              		.loc 1 5428 28 is_stmt 0 view .LVU9089
 33782 0000 074B     		ldr	r3, .L2488
 33783 0002 1B68     		ldr	r3, [r3]
5427:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 33784              		.loc 1 5427 30 view .LVU9090
 33785 0004 10B5     		push	{r4, lr}
 33786              		.cfi_def_cfa_offset 8
 33787              		.cfi_offset 4, -8
 33788              		.cfi_offset 14, -4
5428:src/xeq.c     **** 
 33789              		.loc 1 5428 20 view .LVU9091
 33790 0006 B3F8E007 		ldrh	r0, [r3, #2016]
 33791 000a FFF7FEFF 		bl	getprog
 33792              	.LVL2611:
 33793 000e 0446     		mov	r4, r0
 33794              	.LVL2612:
5430:src/xeq.c     **** 	xeq(op);
 33795              		.loc 1 5430 2 is_stmt 1 view .LVU9092
 33796 0010 FFF7FEFF 		bl	incpc
 33797              	.LVL2613:
5431:src/xeq.c     **** }
 33798              		.loc 1 5431 2 view .LVU9093
 33799 0014 2046     		mov	r0, r4
5432:src/xeq.c     **** 
 33800              		.loc 1 5432 1 is_stmt 0 view .LVU9094
 33801 0016 BDE81040 		pop	{r4, lr}
 33802              		.cfi_restore 14
 33803              		.cfi_restore 4
 33804              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccQlyisH.s 			page 851


 33805              	.LVL2614:
5431:src/xeq.c     **** }
 33806              		.loc 1 5431 2 view .LVU9095
 33807 001a FFF7FEBF 		b	xeq
 33808              	.LVL2615:
 33809              	.L2489:
5431:src/xeq.c     **** }
 33810              		.loc 1 5431 2 view .LVU9096
 33811 001e 00BF     		.align	2
 33812              	.L2488:
 33813 0020 00000000 		.word	main_ram
 33814              		.cfi_endproc
 33815              	.LFE250:
 33817              		.section	.text.xeq_xrom2,"ax",%progbits
 33818              		.align	1
 33819              		.p2align 2,,3
 33820              		.syntax unified
 33821              		.thumb
 33822              		.thumb_func
 33823              		.fpu fpv4-sp-d16
 33825              	xeq_xrom2:
 33826              	.LFB251:
5439:src/xeq.c     **** #endif
 33827              		.loc 1 5439 29 is_stmt 1 view -0
 33828              		.cfi_startproc
 33829              		@ args = 0, pretend = 0, frame = 0
 33830              		@ frame_needed = 0, uses_anonymous_args = 0
5441:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
 33831              		.loc 1 5441 2 view .LVU9098
 33832              	.LVL2616:
5445:src/xeq.c     **** 		XromRunning = 1;
 33833              		.loc 1 5445 4 view .LVU9099
5445:src/xeq.c     **** 		XromRunning = 1;
 33834              		.loc 1 5445 10 view .LVU9100
5439:src/xeq.c     **** #endif
 33835              		.loc 1 5439 29 is_stmt 0 view .LVU9101
 33836 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 33837              		.cfi_def_cfa_offset 32
 33838              		.cfi_offset 4, -32
 33839              		.cfi_offset 5, -28
 33840              		.cfi_offset 6, -24
 33841              		.cfi_offset 7, -20
 33842              		.cfi_offset 8, -16
 33843              		.cfi_offset 9, -12
 33844              		.cfi_offset 10, -8
 33845              		.cfi_offset 14, -4
5445:src/xeq.c     **** 		XromRunning = 1;
 33846              		.loc 1 5445 11 view .LVU9102
 33847 0004 1A4D     		ldr	r5, .L2502
 33848 0006 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5445:src/xeq.c     **** 		XromRunning = 1;
 33849              		.loc 1 5445 10 view .LVU9103
 33850 0008 53BB     		cbnz	r3, .L2490
 33851 000a DFF87080 		ldr	r8, .L2502+12
5446:src/xeq.c     **** 		xeq_single();
 33852              		.loc 1 5446 15 view .LVU9104
 33853 000e 194F     		ldr	r7, .L2502+4
ARM GAS  /tmp/ccQlyisH.s 			page 852


 33854              	.LBB4576:
 33855              	.LBB4577:
4441:src/xeq.c     **** 		Busy = 1;
 33856              		.loc 1 4441 6 view .LVU9105
 33857 0010 DFF86CA0 		ldr	r10, .L2502+16
4441:src/xeq.c     **** 		Busy = 1;
 33858              		.loc 1 4441 15 view .LVU9106
 33859 0014 DFF86C90 		ldr	r9, .L2502+20
 33860 0018 03F0FF04 		and	r4, r3, #255
 33861              	.LVL2617:
 33862              	.L2491:
4441:src/xeq.c     **** 		Busy = 1;
 33863              		.loc 1 4441 15 view .LVU9107
 33864              	.LBE4577:
 33865              	.LBE4576:
5446:src/xeq.c     **** 		xeq_single();
 33866              		.loc 1 5446 3 is_stmt 1 view .LVU9108
 33867              	.LBB4584:
 33868              	.LBI4584:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 33869              		.loc 1 182 5 view .LVU9109
 33870              	.LBB4585:
 183:src/xeq.c     **** }
 33871              		.loc 1 183 2 view .LVU9110
 183:src/xeq.c     **** }
 33872              		.loc 1 183 9 is_stmt 0 view .LVU9111
 33873 001c D8F80020 		ldr	r2, [r8]
 33874 0020 B2F8E037 		ldrh	r3, [r2, #2016]
 33875              	.LBE4585:
 33876              	.LBE4584:
5445:src/xeq.c     **** 		XromRunning = 1;
 33877              		.loc 1 5445 18 view .LVU9112
 33878 0024 9B0B     		lsrs	r3, r3, #14
5446:src/xeq.c     **** 		xeq_single();
 33879              		.loc 1 5446 15 view .LVU9113
 33880 0026 0126     		movs	r6, #1
5445:src/xeq.c     **** 		XromRunning = 1;
 33881              		.loc 1 5445 18 view .LVU9114
 33882 0028 032B     		cmp	r3, #3
5449:src/xeq.c     **** 			busy();
 33883              		.loc 1 5449 6 view .LVU9115
 33884 002a 3444     		add	r4, r4, r6
 33885              	.LVL2618:
5445:src/xeq.c     **** 		XromRunning = 1;
 33886              		.loc 1 5445 18 view .LVU9116
 33887 002c 18D1     		bne	.L2490
5445:src/xeq.c     **** 		XromRunning = 1;
 33888              		.loc 1 5445 31 discriminator 2 view .LVU9117
 33889 002e B2F9E237 		ldrsh	r3, [r2, #2018]
 33890 0032 ABB1     		cbz	r3, .L2490
5446:src/xeq.c     **** 		xeq_single();
 33891              		.loc 1 5446 15 view .LVU9118
 33892 0034 3E60     		str	r6, [r7]
5447:src/xeq.c     **** 		XromRunning = 0;
 33893              		.loc 1 5447 3 is_stmt 1 view .LVU9119
 33894 0036 FFF7FEFF 		bl	xeq_single
 33895              	.LVL2619:
ARM GAS  /tmp/ccQlyisH.s 			page 853


5448:src/xeq.c     **** 		if ((++count & 31) == 0)
 33896              		.loc 1 5448 3 view .LVU9120
 33897              	.LBB4586:
 33898              	.LBB4580:
4441:src/xeq.c     **** 		Busy = 1;
 33899              		.loc 1 4441 12 is_stmt 0 view .LVU9121
 33900 003a D9F80030 		ldr	r3, [r9]
 33901 003e DAF80010 		ldr	r1, [r10]
 33902 0042 1943     		orrs	r1, r1, r3
 33903              	.LBE4580:
 33904              	.LBE4586:
5449:src/xeq.c     **** 			busy();
 33905              		.loc 1 5449 16 view .LVU9122
 33906 0044 04F01F03 		and	r3, r4, #31
5448:src/xeq.c     **** 		if ((++count & 31) == 0)
 33907              		.loc 1 5448 15 view .LVU9123
 33908 0048 0022     		movs	r2, #0
 33909              	.LBB4587:
 33910              	.LBB4581:
4441:src/xeq.c     **** 		Busy = 1;
 33911              		.loc 1 4441 12 view .LVU9124
 33912 004a 1943     		orrs	r1, r1, r3
 33913              	.LBE4581:
 33914              	.LBE4587:
5448:src/xeq.c     **** 		if ((++count & 31) == 0)
 33915              		.loc 1 5448 15 view .LVU9125
 33916 004c 3A60     		str	r2, [r7]
5449:src/xeq.c     **** 			busy();
 33917              		.loc 1 5449 3 is_stmt 1 view .LVU9126
 33918              	.LVL2620:
5450:src/xeq.c     **** 		  if (Pause)
 33919              		.loc 1 5450 4 view .LVU9127
 33920              	.LBB4588:
 33921              	.LBI4576:
4426:src/xeq.c     **** {
 33922              		.loc 1 4426 6 view .LVU9128
 33923              	.LBB4582:
4431:src/xeq.c     **** 
 33924              		.loc 1 4431 12 view .LVU9129
4436:src/xeq.c     **** 
 33925              		.loc 1 4436 17 view .LVU9130
4441:src/xeq.c     **** 		Busy = 1;
 33926              		.loc 1 4441 2 view .LVU9131
4441:src/xeq.c     **** 		Busy = 1;
 33927              		.loc 1 4441 12 is_stmt 0 view .LVU9132
 33928 004e 09D0     		beq	.L2501
 33929              	.L2492:
 33930              	.LBE4582:
 33931              	.LBE4588:
5451:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 33932              		.loc 1 5451 5 is_stmt 1 view .LVU9133
5454:src/xeq.c     **** 		
 33933              		.loc 1 5454 4 view .LVU9134
5445:src/xeq.c     **** 		XromRunning = 1;
 33934              		.loc 1 5445 10 view .LVU9135
5451:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 33935              		.loc 1 5451 9 is_stmt 0 view .LVU9136
ARM GAS  /tmp/ccQlyisH.s 			page 854


 33936 0050 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
5445:src/xeq.c     **** 		XromRunning = 1;
 33937              		.loc 1 5445 11 view .LVU9137
 33938 0052 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5451:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 33939              		.loc 1 5451 8 view .LVU9138
 33940 0054 12B1     		cbz	r2, .L2493
5454:src/xeq.c     **** 		
 33941              		.loc 1 5454 12 view .LVU9139
 33942 0056 0122     		movs	r2, #1
 33943 0058 C9F80020 		str	r2, [r9]
 33944              	.L2493:
5445:src/xeq.c     **** 		XromRunning = 1;
 33945              		.loc 1 5445 10 view .LVU9140
 33946 005c 002B     		cmp	r3, #0
 33947 005e DDD0     		beq	.L2491
 33948              	.LVL2621:
 33949              	.L2490:
5457:src/xeq.c     **** 
 33950              		.loc 1 5457 1 view .LVU9141
 33951 0060 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 33952              	.LVL2622:
 33953              	.L2501:
 33954              	.LBB4589:
 33955              	.LBB4583:
 33956              	.LBB4578:
 33957              	.LBI4578:
4426:src/xeq.c     **** {
 33958              		.loc 1 4426 6 is_stmt 1 view .LVU9142
 33959              	.LBB4579:
4442:src/xeq.c     **** 		message("Wait...", NULL);
 33960              		.loc 1 4442 3 view .LVU9143
4443:src/xeq.c     **** 	}
 33961              		.loc 1 4443 3 is_stmt 0 view .LVU9144
 33962 0064 0448     		ldr	r0, .L2502+8
4442:src/xeq.c     **** 		message("Wait...", NULL);
 33963              		.loc 1 4442 8 view .LVU9145
 33964 0066 CAF80060 		str	r6, [r10]
4443:src/xeq.c     **** 	}
 33965              		.loc 1 4443 3 is_stmt 1 view .LVU9146
 33966 006a FFF7FEFF 		bl	message
 33967              	.LVL2623:
4445:src/xeq.c     **** 
 33968              		.loc 1 4445 1 is_stmt 0 view .LVU9147
 33969 006e EFE7     		b	.L2492
 33970              	.L2503:
 33971              		.align	2
 33972              	.L2502:
 33973 0070 00000000 		.word	Pause
 33974 0074 00000000 		.word	XromRunning
 33975 0078 00000000 		.word	.LC7
 33976 007c 00000000 		.word	main_ram
 33977 0080 00000000 		.word	Busy
 33978 0084 00000000 		.word	Running
 33979              	.LBE4579:
 33980              	.LBE4578:
 33981              	.LBE4583:
ARM GAS  /tmp/ccQlyisH.s 			page 855


 33982              	.LBE4589:
 33983              		.cfi_endproc
 33984              	.LFE251:
 33986              		.section	.text.xeq_xrom,"ax",%progbits
 33987              		.align	1
 33988              		.p2align 2,,3
 33989              		.global	xeq_xrom
 33990              		.syntax unified
 33991              		.thumb
 33992              		.thumb_func
 33993              		.fpu fpv4-sp-d16
 33995              	xeq_xrom:
 33996              	.LFB252:
5460:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 33997              		.loc 1 5460 21 is_stmt 1 view -0
 33998              		.cfi_startproc
 33999              		@ args = 0, pretend = 0, frame = 0
 34000              		@ frame_needed = 0, uses_anonymous_args = 0
 34001              		@ link register save eliminated.
5462:src/xeq.c     **** 		xeq_xrom2();
 34002              		.loc 1 5462 2 view .LVU9149
5462:src/xeq.c     **** 		xeq_xrom2();
 34003              		.loc 1 5462 6 is_stmt 0 view .LVU9150
 34004 0000 034B     		ldr	r3, .L2507
5462:src/xeq.c     **** 		xeq_xrom2();
 34005              		.loc 1 5462 5 view .LVU9151
 34006 0002 93F91730 		ldrsb	r3, [r3, #23]
 34007 0006 002B     		cmp	r3, #0
 34008 0008 00DA     		bge	.L2506
5464:src/xeq.c     **** #endif
 34009              		.loc 1 5464 1 view .LVU9152
 34010 000a 7047     		bx	lr
 34011              	.L2506:
5463:src/xeq.c     **** }
 34012              		.loc 1 5463 3 is_stmt 1 view .LVU9153
 34013 000c FFF7FEBF 		b	xeq_xrom2
 34014              	.LVL2624:
 34015              	.L2508:
 34016              		.align	2
 34017              	.L2507:
 34018 0010 00000000 		.word	StateWhileOn
 34019              		.cfi_endproc
 34020              	.LFE252:
 34022              		.section	.text.dispatch_xrom,"ax",%progbits
 34023              		.align	1
 34024              		.p2align 2,,3
 34025              		.syntax unified
 34026              		.thumb
 34027              		.thumb_func
 34028              		.fpu fpv4-sp-d16
 34030              	dispatch_xrom:
 34031              	.LVL2625:
 34032              	.LFB236:
4478:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 34033              		.loc 1 4478 1 view -0
 34034              		.cfi_startproc
 34035              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccQlyisH.s 			page 856


 34036              		@ frame_needed = 0, uses_anonymous_args = 0
4479:src/xeq.c     **** 	if (xp == NULL)
 34037              		.loc 1 4479 2 view .LVU9155
 34038              	.LBB4590:
 34039              	.LBI4590:
4461:src/xeq.c     **** {
 34040              		.loc 1 4461 24 view .LVU9156
 34041              	.LBB4591:
4463:src/xeq.c     **** 	if (xp < xrom)
 34042              		.loc 1 4463 2 view .LVU9157
4464:src/xeq.c     **** 		return NULL;
 34043              		.loc 1 4464 5 is_stmt 0 view .LVU9158
 34044 0000 1649     		ldr	r1, .L2520
4463:src/xeq.c     **** 	if (xp < xrom)
 34045              		.loc 1 4463 59 view .LVU9159
 34046 0002 20F00100 		bic	r0, r0, #1
 34047              	.LVL2626:
4464:src/xeq.c     **** 		return NULL;
 34048              		.loc 1 4464 2 is_stmt 1 view .LVU9160
4464:src/xeq.c     **** 		return NULL;
 34049              		.loc 1 4464 5 is_stmt 0 view .LVU9161
 34050 0006 8842     		cmp	r0, r1
 34051 0008 22D3     		bcc	.L2512
4468:src/xeq.c     **** 		return NULL;
 34052              		.loc 1 4468 2 is_stmt 1 view .LVU9162
4468:src/xeq.c     **** 		return NULL;
 34053              		.loc 1 4468 17 is_stmt 0 view .LVU9163
 34054 000a 154B     		ldr	r3, .L2520+4
 34055 000c 1B88     		ldrh	r3, [r3]
 34056 000e 01EB4303 		add	r3, r1, r3, lsl #1
4468:src/xeq.c     **** 		return NULL;
 34057              		.loc 1 4468 5 view .LVU9164
 34058 0012 9842     		cmp	r0, r3
 34059 0014 1CD2     		bcs	.L2512
 34060              	.LVL2627:
4468:src/xeq.c     **** 		return NULL;
 34061              		.loc 1 4468 5 view .LVU9165
 34062              	.LBE4591:
 34063              	.LBE4590:
4480:src/xeq.c     **** 		return 0;
 34064              		.loc 1 4480 2 is_stmt 1 view .LVU9166
4480:src/xeq.c     **** 		return 0;
 34065              		.loc 1 4480 5 is_stmt 0 view .LVU9167
 34066 0016 D0B1     		cbz	r0, .L2516
4483:src/xeq.c     **** 	XromRunning = 1;
 34067              		.loc 1 4483 2 is_stmt 1 view .LVU9168
4483:src/xeq.c     **** 	XromRunning = 1;
 34068              		.loc 1 4483 18 is_stmt 0 view .LVU9169
 34069 0018 124B     		ldr	r3, .L2520+8
 34070 001a 1B68     		ldr	r3, [r3]
4478:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 34071              		.loc 1 4478 1 view .LVU9170
 34072 001c 70B5     		push	{r4, r5, r6, lr}
 34073              		.cfi_def_cfa_offset 16
 34074              		.cfi_offset 4, -16
 34075              		.cfi_offset 5, -12
 34076              		.cfi_offset 6, -8
ARM GAS  /tmp/ccQlyisH.s 			page 857


 34077              		.cfi_offset 14, -4
4485:src/xeq.c     **** 	xeq_xrom();
 34078              		.loc 1 4485 9 view .LVU9171
 34079 001e 401A     		subs	r0, r0, r1
 34080              	.LVL2628:
4483:src/xeq.c     **** 	XromRunning = 1;
 34081              		.loc 1 4483 16 view .LVU9172
 34082 0020 114C     		ldr	r4, .L2520+12
4483:src/xeq.c     **** 	XromRunning = 1;
 34083              		.loc 1 4483 18 view .LVU9173
 34084 0022 B3F9DE67 		ldrsh	r6, [r3, #2014]
 34085 0026 2660     		str	r6, [r4]
4484:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34086              		.loc 1 4484 2 is_stmt 1 view .LVU9174
4485:src/xeq.c     **** 	xeq_xrom();
 34087              		.loc 1 4485 9 is_stmt 0 view .LVU9175
 34088 0028 4010     		asrs	r0, r0, #1
 34089              	.LVL2629:
4484:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34090              		.loc 1 4484 14 view .LVU9176
 34091 002a 0124     		movs	r4, #1
 34092 002c 0F4D     		ldr	r5, .L2520+16
4485:src/xeq.c     **** 	xeq_xrom();
 34093              		.loc 1 4485 2 view .LVU9177
 34094 002e B3F8E027 		ldrh	r2, [r3, #2016]
4484:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34095              		.loc 1 4484 14 view .LVU9178
 34096 0032 2C60     		str	r4, [r5]
4485:src/xeq.c     **** 	xeq_xrom();
 34097              		.loc 1 4485 2 is_stmt 1 view .LVU9179
4485:src/xeq.c     **** 	xeq_xrom();
 34098              		.loc 1 4485 9 is_stmt 0 view .LVU9180
 34099 0034 0130     		adds	r0, r0, #1
4485:src/xeq.c     **** 	xeq_xrom();
 34100              		.loc 1 4485 2 view .LVU9181
 34101 0036 40F44040 		orr	r0, r0, #49152
 34102 003a 2146     		mov	r1, r4
 34103 003c FFF7FEFF 		bl	gsbgto
 34104              	.LVL2630:
4486:src/xeq.c     **** 	return 1;
 34105              		.loc 1 4486 2 is_stmt 1 view .LVU9182
 34106              	.LBB4592:
 34107              	.LBI4592:
5460:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34108              		.loc 1 5460 6 view .LVU9183
 34109              	.LBB4593:
5462:src/xeq.c     **** 		xeq_xrom2();
 34110              		.loc 1 5462 2 view .LVU9184
5462:src/xeq.c     **** 		xeq_xrom2();
 34111              		.loc 1 5462 6 is_stmt 0 view .LVU9185
 34112 0040 0B4B     		ldr	r3, .L2520+20
5462:src/xeq.c     **** 		xeq_xrom2();
 34113              		.loc 1 5462 5 view .LVU9186
 34114 0042 93F91730 		ldrsb	r3, [r3, #23]
 34115 0046 002B     		cmp	r3, #0
 34116 0048 04DA     		bge	.L2519
 34117              	.LBE4593:
ARM GAS  /tmp/ccQlyisH.s 			page 858


 34118              	.LBE4592:
4487:src/xeq.c     **** }
 34119              		.loc 1 4487 9 view .LVU9187
 34120 004a 2046     		mov	r0, r4
 34121              	.LVL2631:
4488:src/xeq.c     **** 
 34122              		.loc 1 4488 1 view .LVU9188
 34123 004c 70BD     		pop	{r4, r5, r6, pc}
 34124              	.LVL2632:
 34125              	.L2516:
 34126              		.cfi_def_cfa_offset 0
 34127              		.cfi_restore 4
 34128              		.cfi_restore 5
 34129              		.cfi_restore 6
 34130              		.cfi_restore 14
4488:src/xeq.c     **** 
 34131              		.loc 1 4488 1 view .LVU9189
 34132 004e 7047     		bx	lr
 34133              	.LVL2633:
 34134              	.L2512:
4481:src/xeq.c     **** 	// set_lift();
 34135              		.loc 1 4481 10 view .LVU9190
 34136 0050 0020     		movs	r0, #0
 34137              	.LVL2634:
4481:src/xeq.c     **** 	// set_lift();
 34138              		.loc 1 4481 10 view .LVU9191
 34139 0052 7047     		bx	lr
 34140              	.LVL2635:
 34141              	.L2519:
 34142              		.cfi_def_cfa_offset 16
 34143              		.cfi_offset 4, -16
 34144              		.cfi_offset 5, -12
 34145              		.cfi_offset 6, -8
 34146              		.cfi_offset 14, -4
 34147              	.LBB4595:
 34148              	.LBB4594:
5463:src/xeq.c     **** }
 34149              		.loc 1 5463 3 is_stmt 1 view .LVU9192
 34150 0054 FFF7FEFF 		bl	xeq_xrom2
 34151              	.LVL2636:
 34152              	.LBE4594:
 34153              	.LBE4595:
4487:src/xeq.c     **** }
 34154              		.loc 1 4487 9 is_stmt 0 view .LVU9193
 34155 0058 2046     		mov	r0, r4
4488:src/xeq.c     **** 
 34156              		.loc 1 4488 1 view .LVU9194
 34157 005a 70BD     		pop	{r4, r5, r6, pc}
 34158              	.L2521:
 34159              		.align	2
 34160              	.L2520:
 34161 005c 00000000 		.word	xrom
 34162 0060 00000000 		.word	xrom_size
 34163 0064 00000000 		.word	main_ram
 34164 0068 00000000 		.word	UserLocalRegs
 34165 006c 00000000 		.word	XromRunning
 34166 0070 00000000 		.word	StateWhileOn
ARM GAS  /tmp/ccQlyisH.s 			page 859


 34167              		.cfi_endproc
 34168              	.LFE236:
 34170              		.section	.text.op_rs,"ax",%progbits
 34171              		.align	1
 34172              		.p2align 2,,3
 34173              		.global	op_rs
 34174              		.syntax unified
 34175              		.thumb
 34176              		.thumb_func
 34177              		.fpu fpv4-sp-d16
 34179              	op_rs:
 34180              	.LVL2637:
 34181              	.LFB255:
5559:src/xeq.c     **** #ifndef REALBUILD
 34182              		.loc 1 5559 27 is_stmt 1 view -0
 34183              		.cfi_startproc
 34184              		@ args = 0, pretend = 0, frame = 0
 34185              		@ frame_needed = 0, uses_anonymous_args = 0
5563:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 34186              		.loc 1 5563 2 view .LVU9196
 34187              	.LBB4596:
 34188              	.LBI4596:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 34189              		.loc 1 182 5 view .LVU9197
 34190              	.LBB4597:
 183:src/xeq.c     **** }
 34191              		.loc 1 183 2 view .LVU9198
 34192              	.LBE4597:
 34193              	.LBE4596:
5559:src/xeq.c     **** #ifndef REALBUILD
 34194              		.loc 1 5559 27 is_stmt 0 view .LVU9199
 34195 0000 10B5     		push	{r4, lr}
 34196              		.cfi_def_cfa_offset 8
 34197              		.cfi_offset 4, -8
 34198              		.cfi_offset 14, -4
 34199              	.LBB4599:
 34200              	.LBB4598:
 183:src/xeq.c     **** }
 34201              		.loc 1 183 9 view .LVU9200
 34202 0002 1D4C     		ldr	r4, .L2532
 34203 0004 2268     		ldr	r2, [r4]
 34204 0006 B2F8E037 		ldrh	r3, [r2, #2016]
 34205              	.LBE4598:
 34206              	.LBE4599:
5563:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 34207              		.loc 1 5563 5 view .LVU9201
 34208 000a 9B0B     		lsrs	r3, r3, #14
 34209 000c 032B     		cmp	r3, #3
 34210 000e 20D0     		beq	.L2531
5573:src/xeq.c     **** 		set_running_off();
 34211              		.loc 1 5573 2 is_stmt 1 view .LVU9202
5573:src/xeq.c     **** 		set_running_off();
 34212              		.loc 1 5573 6 is_stmt 0 view .LVU9203
 34213 0010 1A4B     		ldr	r3, .L2532+4
5573:src/xeq.c     **** 		set_running_off();
 34214              		.loc 1 5573 5 view .LVU9204
 34215 0012 1968     		ldr	r1, [r3]
ARM GAS  /tmp/ccQlyisH.s 			page 860


 34216 0014 61B1     		cbz	r1, .L2526
5574:src/xeq.c     **** 	else {
 34217              		.loc 1 5574 3 is_stmt 1 view .LVU9205
 34218              	.LBB4600:
 34219              	.LBI4600:
5776:src/xeq.c     **** 	set_running_off_sst();
 34220              		.loc 1 5776 6 view .LVU9206
 34221              	.LBB4601:
5777:src/xeq.c     **** 	State.entryp = 0;
 34222              		.loc 1 5777 2 view .LVU9207
 34223              	.LBB4602:
 34224              	.LBI4602:
5768:src/xeq.c     **** 	Running = 0;
 34225              		.loc 1 5768 6 view .LVU9208
 34226              	.LBB4603:
5769:src/xeq.c     **** }
 34227              		.loc 1 5769 2 view .LVU9209
5769:src/xeq.c     **** }
 34228              		.loc 1 5769 10 is_stmt 0 view .LVU9210
 34229 0016 0021     		movs	r1, #0
 34230 0018 1960     		str	r1, [r3]
 34231              	.LBE4603:
 34232              	.LBE4602:
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 34233              		.loc 1 5778 2 is_stmt 1 view .LVU9211
5778:src/xeq.c     **** 	dot( RCL_annun, 0);
 34234              		.loc 1 5778 15 is_stmt 0 view .LVU9212
 34235 001a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 34236 001e 61F30413 		bfi	r3, r1, #4, #1
 34237 0022 82F8DD37 		strb	r3, [r2, #2013]
5779:src/xeq.c     **** }
 34238              		.loc 1 5779 2 is_stmt 1 view .LVU9213
 34239              	.LBE4601:
 34240              	.LBE4600:
5580:src/xeq.c     **** 
 34241              		.loc 1 5580 1 is_stmt 0 view .LVU9214
 34242 0026 BDE81040 		pop	{r4, lr}
 34243              		.cfi_remember_state
 34244              		.cfi_restore 14
 34245              		.cfi_restore 4
 34246              		.cfi_def_cfa_offset 0
 34247              	.LBB4605:
 34248              	.LBB4604:
5779:src/xeq.c     **** }
 34249              		.loc 1 5779 2 view .LVU9215
 34250 002a 8A20     		movs	r0, #138
 34251              	.LVL2638:
5779:src/xeq.c     **** }
 34252              		.loc 1 5779 2 view .LVU9216
 34253 002c FFF7FEBF 		b	dot
 34254              	.LVL2639:
 34255              	.L2526:
 34256              		.cfi_restore_state
5779:src/xeq.c     **** }
 34257              		.loc 1 5779 2 view .LVU9217
 34258              	.LBE4604:
 34259              	.LBE4605:
ARM GAS  /tmp/ccQlyisH.s 			page 861


5576:src/xeq.c     **** 		if (RetStkPtr == 0)
 34260              		.loc 1 5576 3 is_stmt 1 view .LVU9218
 34261 0030 FFF7FEFF 		bl	set_running_on
 34262              	.LVL2640:
5577:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34263              		.loc 1 5577 3 view .LVU9219
5577:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34264              		.loc 1 5577 7 is_stmt 0 view .LVU9220
 34265 0034 2368     		ldr	r3, [r4]
5577:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34266              		.loc 1 5577 6 view .LVU9221
 34267 0036 B3F9E227 		ldrsh	r2, [r3, #2018]
 34268 003a 4AB9     		cbnz	r2, .L2522
5578:src/xeq.c     **** 	}
 34269              		.loc 1 5578 4 is_stmt 1 view .LVU9222
5578:src/xeq.c     **** 	}
 34270              		.loc 1 5578 10 is_stmt 0 view .LVU9223
 34271 003c 104A     		ldr	r2, .L2532+8
5578:src/xeq.c     **** 	}
 34272              		.loc 1 5578 26 view .LVU9224
 34273 003e B3F8E017 		ldrh	r1, [r3, #2016]
5578:src/xeq.c     **** 	}
 34274              		.loc 1 5578 10 view .LVU9225
 34275 0042 1268     		ldr	r2, [r2]
5578:src/xeq.c     **** 	}
 34276              		.loc 1 5578 24 view .LVU9226
 34277 0044 4FF6FF70 		movw	r0, #65535
 34278 0048 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 34279 004c 22F8021C 		strh	r1, [r2, #-2]	@ movhi
 34280              	.L2522:
5580:src/xeq.c     **** 
 34281              		.loc 1 5580 1 view .LVU9227
 34282 0050 10BD     		pop	{r4, pc}
 34283              	.LVL2641:
 34284              	.L2531:
5564:src/xeq.c     **** 			Running = XromRunning = 0;
 34285              		.loc 1 5564 3 is_stmt 1 view .LVU9228
5564:src/xeq.c     **** 			Running = XromRunning = 0;
 34286              		.loc 1 5564 7 is_stmt 0 view .LVU9229
 34287 0052 0C4B     		ldr	r3, .L2532+12
5564:src/xeq.c     **** 			Running = XromRunning = 0;
 34288              		.loc 1 5564 6 view .LVU9230
 34289 0054 93F91730 		ldrsb	r3, [r3, #23]
 34290 0058 002B     		cmp	r3, #0
 34291 005a 09DA     		bge	.L2524
5564:src/xeq.c     **** 			Running = XromRunning = 0;
 34292              		.loc 1 5564 24 discriminator 1 view .LVU9231
 34293 005c 074B     		ldr	r3, .L2532+4
5564:src/xeq.c     **** 			Running = XromRunning = 0;
 34294              		.loc 1 5564 32 discriminator 1 view .LVU9232
 34295 005e 0A4A     		ldr	r2, .L2532+16
 34296 0060 1868     		ldr	r0, [r3]
 34297              	.LVL2642:
5564:src/xeq.c     **** 			Running = XromRunning = 0;
 34298              		.loc 1 5564 32 discriminator 1 view .LVU9233
 34299 0062 1168     		ldr	r1, [r2]
 34300 0064 0143     		orrs	r1, r0, r1
ARM GAS  /tmp/ccQlyisH.s 			page 862


 34301 0066 03D0     		beq	.L2524
5565:src/xeq.c     **** 		}
 34302              		.loc 1 5565 4 is_stmt 1 view .LVU9234
5565:src/xeq.c     **** 		}
 34303              		.loc 1 5565 26 is_stmt 0 view .LVU9235
 34304 0068 0021     		movs	r1, #0
 34305 006a 1160     		str	r1, [r2]
5565:src/xeq.c     **** 		}
 34306              		.loc 1 5565 12 view .LVU9236
 34307 006c 1960     		str	r1, [r3]
5580:src/xeq.c     **** 
 34308              		.loc 1 5580 1 view .LVU9237
 34309 006e 10BD     		pop	{r4, pc}
 34310              	.L2524:
5568:src/xeq.c     **** 		}
 34311              		.loc 1 5568 4 is_stmt 1 view .LVU9238
5580:src/xeq.c     **** 
 34312              		.loc 1 5580 1 is_stmt 0 view .LVU9239
 34313 0070 BDE81040 		pop	{r4, lr}
 34314              		.cfi_restore 14
 34315              		.cfi_restore 4
 34316              		.cfi_def_cfa_offset 0
5568:src/xeq.c     **** 		}
 34317              		.loc 1 5568 4 view .LVU9240
 34318 0074 FFF7FEBF 		b	xeq_xrom2
 34319              	.LVL2643:
 34320              	.L2533:
 34321              		.align	2
 34322              	.L2532:
 34323 0078 00000000 		.word	main_ram
 34324 007c 00000000 		.word	Running
 34325 0080 00000000 		.word	RetStk
 34326 0084 00000000 		.word	StateWhileOn
 34327 0088 00000000 		.word	XromRunning
 34328              		.cfi_endproc
 34329              	.LFE255:
 34331              		.section	.text.xeqprog,"ax",%progbits
 34332              		.align	1
 34333              		.p2align 2,,3
 34334              		.global	xeqprog
 34335              		.syntax unified
 34336              		.thumb
 34337              		.thumb_func
 34338              		.fpu fpv4-sp-d16
 34340              	xeqprog:
 34341              	.LFB253:
5476:src/xeq.c     ****    int state = 0;
 34342              		.loc 1 5476 2 is_stmt 1 view -0
 34343              		.cfi_startproc
 34344              		@ args = 0, pretend = 0, frame = 0
 34345              		@ frame_needed = 0, uses_anonymous_args = 0
5477:src/xeq.c     ****    if (Running || Pause) {
 34346              		.loc 1 5477 4 view .LVU9242
 34347              	.LVL2644:
5478:src/xeq.c     **** 
 34348              		.loc 1 5478 4 view .LVU9243
5476:src/xeq.c     ****    int state = 0;
ARM GAS  /tmp/ccQlyisH.s 			page 863


 34349              		.loc 1 5476 2 is_stmt 0 view .LVU9244
 34350 0000 38B5     		push	{r3, r4, r5, lr}
 34351              		.cfi_def_cfa_offset 16
 34352              		.cfi_offset 3, -16
 34353              		.cfi_offset 4, -12
 34354              		.cfi_offset 5, -8
 34355              		.cfi_offset 14, -4
5478:src/xeq.c     **** 
 34356              		.loc 1 5478 8 view .LVU9245
 34357 0002 184C     		ldr	r4, .L2559
 34358 0004 184D     		ldr	r5, .L2559+4
5478:src/xeq.c     **** 
 34359              		.loc 1 5478 7 view .LVU9246
 34360 0006 2368     		ldr	r3, [r4]
 34361 0008 0BB9     		cbnz	r3, .L2535
5478:src/xeq.c     **** 
 34362              		.loc 1 5478 16 discriminator 1 view .LVU9247
 34363 000a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 34364 000c 9BB1     		cbz	r3, .L2540
 34365              	.L2535:
5484:src/xeq.c     **** #endif
 34366              		.loc 1 5484 6 is_stmt 1 view .LVU9248
 34367              	.LVL2645:
5488:src/xeq.c     ****      finish_RPN(); // RPN
 34368              		.loc 1 5488 6 view .LVU9249
 34369 000e 0121     		movs	r1, #1
 34370 0010 8A20     		movs	r0, #138
 34371 0012 FFF7FEFF 		bl	dot
 34372              	.LVL2646:
5489:src/xeq.c     **** 
 34373              		.loc 1 5489 6 view .LVU9250
 34374 0016 FFF7FEFF 		bl	finish_RPN
 34375              	.LVL2647:
5491:src/xeq.c     ****        xeq_single();
 34376              		.loc 1 5491 6 view .LVU9251
5491:src/xeq.c     ****        xeq_single();
 34377              		.loc 1 5491 12 is_stmt 0 view .LVU9252
 34378 001a 06E0     		b	.L2537
 34379              	.L2557:
5491:src/xeq.c     ****        xeq_single();
 34380              		.loc 1 5491 21 discriminator 1 view .LVU9253
 34381 001c 2368     		ldr	r3, [r4]
 34382 001e 53B1     		cbz	r3, .L2540
5492:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 34383              		.loc 1 5492 8 view .LVU9254
 34384 0020 FFF7FEFF 		bl	xeq_single
 34385              	.LVL2648:
5494:src/xeq.c     **** 	 {
 34386              		.loc 1 5494 8 is_stmt 1 view .LVU9255
5494:src/xeq.c     **** 	 {
 34387              		.loc 1 5494 12 is_stmt 0 view .LVU9256
 34388 0024 FFF7FEFF 		bl	is_key_pressed
 34389              	.LVL2649:
5494:src/xeq.c     **** 	 {
 34390              		.loc 1 5494 11 view .LVU9257
 34391 0028 10B9     		cbnz	r0, .L2538
 34392              	.L2537:
ARM GAS  /tmp/ccQlyisH.s 			page 864


5492:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 34393              		.loc 1 5492 8 is_stmt 1 view .LVU9258
5491:src/xeq.c     ****        xeq_single();
 34394              		.loc 1 5491 12 view .LVU9259
5491:src/xeq.c     ****        xeq_single();
 34395              		.loc 1 5491 13 is_stmt 0 view .LVU9260
 34396 002a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5491:src/xeq.c     ****        xeq_single();
 34397              		.loc 1 5491 12 view .LVU9261
 34398 002c 002B     		cmp	r3, #0
 34399 002e F5D0     		beq	.L2557
 34400              	.L2538:
5503:src/xeq.c     ****      // Program has terminated
 34401              		.loc 1 5503 4 is_stmt 1 view .LVU9262
5503:src/xeq.c     ****      // Program has terminated
 34402              		.loc 1 5503 7 is_stmt 0 view .LVU9263
 34403 0030 2368     		ldr	r3, [r4]
 34404 0032 03B1     		cbz	r3, .L2540
 34405              	.LVL2650:
 34406              	.L2534:
5517:src/xeq.c     **** 
 34407              		.loc 1 5517 2 view .LVU9264
 34408 0034 38BD     		pop	{r3, r4, r5, pc}
 34409              	.L2540:
5503:src/xeq.c     ****      // Program has terminated
 34410              		.loc 1 5503 4 is_stmt 1 view .LVU9265
5503:src/xeq.c     ****      // Program has terminated
 34411              		.loc 1 5503 21 is_stmt 0 view .LVU9266
 34412 0036 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5503:src/xeq.c     ****      // Program has terminated
 34413              		.loc 1 5503 18 view .LVU9267
 34414 0038 002B     		cmp	r3, #0
 34415 003a FBD1     		bne	.L2534
5505:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
 34416              		.loc 1 5505 6 is_stmt 1 view .LVU9268
5506:src/xeq.c     ****      display();
 34417              		.loc 1 5506 14 is_stmt 0 view .LVU9269
 34418 003c 0B4C     		ldr	r4, .L2559+8
5505:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
 34419              		.loc 1 5505 6 view .LVU9270
 34420 003e 8A20     		movs	r0, #138
 34421 0040 FFF7FEFF 		bl	clr_dot
 34422              	.LVL2651:
5506:src/xeq.c     ****      display();
 34423              		.loc 1 5506 6 is_stmt 1 view .LVU9271
5506:src/xeq.c     ****      display();
 34424              		.loc 1 5506 14 is_stmt 0 view .LVU9272
 34425 0044 0123     		movs	r3, #1
 34426 0046 2360     		str	r3, [r4]
5507:src/xeq.c     ****      if (ShowRPN) {
 34427              		.loc 1 5507 6 is_stmt 1 view .LVU9273
 34428 0048 FFF7FEFF 		bl	display
 34429              	.LVL2652:
5508:src/xeq.c     ****        set_dot(RPN);
 34430              		.loc 1 5508 6 view .LVU9274
5508:src/xeq.c     ****        set_dot(RPN);
 34431              		.loc 1 5508 9 is_stmt 0 view .LVU9275
ARM GAS  /tmp/ccQlyisH.s 			page 865


 34432 004c 2368     		ldr	r3, [r4]
 34433 004e 1BB9     		cbnz	r3, .L2558
 34434              	.L2542:
5514:src/xeq.c     **** #endif
 34435              		.loc 1 5514 6 is_stmt 1 view .LVU9276
5514:src/xeq.c     **** #endif
 34436              		.loc 1 5514 18 is_stmt 0 view .LVU9277
 34437 0050 074B     		ldr	r3, .L2559+12
 34438 0052 0122     		movs	r2, #1
 34439 0054 1A60     		str	r2, [r3]
5517:src/xeq.c     **** 
 34440              		.loc 1 5517 2 view .LVU9278
 34441 0056 38BD     		pop	{r3, r4, r5, pc}
 34442              	.L2558:
5509:src/xeq.c     ****        finish_RPN(); // RPN
 34443              		.loc 1 5509 8 is_stmt 1 view .LVU9279
 34444 0058 8D20     		movs	r0, #141
 34445 005a FFF7FEFF 		bl	set_dot
 34446              	.LVL2653:
5510:src/xeq.c     ****      }
 34447              		.loc 1 5510 8 view .LVU9280
 34448 005e FFF7FEFF 		bl	finish_RPN
 34449              	.LVL2654:
 34450 0062 F5E7     		b	.L2542
 34451              	.L2560:
 34452              		.align	2
 34453              	.L2559:
 34454 0064 00000000 		.word	Running
 34455 0068 00000000 		.word	Pause
 34456 006c 00000000 		.word	ShowRPN
 34457 0070 00000000 		.word	JustStopped
 34458              		.cfi_endproc
 34459              	.LFE253:
 34461              		.section	.text.xeq_sst_bst,"ax",%progbits
 34462              		.align	1
 34463              		.p2align 2,,3
 34464              		.global	xeq_sst_bst
 34465              		.syntax unified
 34466              		.thumb
 34467              		.thumb_func
 34468              		.fpu fpv4-sp-d16
 34470              	xeq_sst_bst:
 34471              	.LVL2655:
 34472              	.LFB254:
5522:src/xeq.c     **** 	opcode op;
 34473              		.loc 1 5522 1 view -0
 34474              		.cfi_startproc
 34475              		@ args = 0, pretend = 0, frame = 0
 34476              		@ frame_needed = 0, uses_anonymous_args = 0
5523:src/xeq.c     **** 
 34477              		.loc 1 5523 2 view .LVU9282
5525:src/xeq.c     **** 	if (kind == -1)
 34478              		.loc 1 5525 2 view .LVU9283
 34479              	.LBB4606:
 34480              	.LBI4606:
4415:src/xeq.c     **** 	// extern int IntMaxWindow;
 34481              		.loc 1 4415 6 view .LVU9284
ARM GAS  /tmp/ccQlyisH.s 			page 866


 34482              	.LBB4607:
4418:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34483              		.loc 1 4418 2 view .LVU9285
 34484              	.LBE4607:
 34485              	.LBE4606:
5522:src/xeq.c     **** 	opcode op;
 34486              		.loc 1 5522 1 is_stmt 0 view .LVU9286
 34487 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 34488              		.cfi_def_cfa_offset 24
 34489              		.cfi_offset 4, -24
 34490              		.cfi_offset 5, -20
 34491              		.cfi_offset 6, -16
 34492              		.cfi_offset 7, -12
 34493              		.cfi_offset 8, -8
 34494              		.cfi_offset 14, -4
 34495              	.LBB4610:
 34496              	.LBB4608:
4418:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34497              		.loc 1 4418 16 view .LVU9287
 34498 0004 254C     		ldr	r4, .L2574
 34499 0006 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4419:src/xeq.c     **** }
 34500              		.loc 1 4419 15 view .LVU9288
 34501 0008 0026     		movs	r6, #0
4418:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34502              		.loc 1 4418 16 view .LVU9289
 34503 000a 6FF3C503 		bfc	r3, #3, #3
 34504              	.LBE4608:
 34505              	.LBE4610:
5526:src/xeq.c     **** 		decpc();
 34506              		.loc 1 5526 5 view .LVU9290
 34507 000e 411C     		adds	r1, r0, #1
 34508              	.LBB4611:
 34509              	.LBB4609:
4418:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34510              		.loc 1 4418 16 view .LVU9291
 34511 0010 2375     		strb	r3, [r4, #20]
4419:src/xeq.c     **** }
 34512              		.loc 1 4419 2 is_stmt 1 view .LVU9292
4419:src/xeq.c     **** }
 34513              		.loc 1 4419 15 is_stmt 0 view .LVU9293
 34514 0012 6674     		strb	r6, [r4, #17]
 34515              	.LBE4609:
 34516              	.LBE4611:
5526:src/xeq.c     **** 		decpc();
 34517              		.loc 1 5526 2 is_stmt 1 view .LVU9294
5526:src/xeq.c     **** 		decpc();
 34518              		.loc 1 5526 5 is_stmt 0 view .LVU9295
 34519 0014 30D0     		beq	.L2570
5529:src/xeq.c     **** 		// Display the step
 34520              		.loc 1 5529 2 is_stmt 1 view .LVU9296
5529:src/xeq.c     **** 		// Display the step
 34521              		.loc 1 5529 6 is_stmt 0 view .LVU9297
 34522 0016 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5529:src/xeq.c     **** 		// Display the step
 34523              		.loc 1 5529 5 view .LVU9298
 34524 0018 5B06     		lsls	r3, r3, #25
ARM GAS  /tmp/ccQlyisH.s 			page 867


 34525 001a 0546     		mov	r5, r0
 34526 001c 08D4     		bmi	.L2571
5548:src/xeq.c     **** 		// Key down in program mode
 34527              		.loc 1 5548 7 is_stmt 1 view .LVU9299
5548:src/xeq.c     **** 		// Key down in program mode
 34528              		.loc 1 5548 10 is_stmt 0 view .LVU9300
 34529 001e 08B1     		cbz	r0, .L2572
 34530              	.LVL2656:
 34531              	.L2561:
5553:src/xeq.c     **** 
 34532              		.loc 1 5553 1 view .LVU9301
 34533 0020 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 34534              	.LVL2657:
 34535              	.L2572:
5550:src/xeq.c     **** 		OpCode = 0;
 34536              		.loc 1 5550 3 is_stmt 1 view .LVU9302
 34537 0024 FFF7FEFF 		bl	incpc
 34538              	.LVL2658:
5551:src/xeq.c     **** 	}
 34539              		.loc 1 5551 3 view .LVU9303
5551:src/xeq.c     **** 	}
 34540              		.loc 1 5551 10 is_stmt 0 view .LVU9304
 34541 0028 1D4B     		ldr	r3, .L2574+4
 34542 002a 1D60     		str	r5, [r3]
5553:src/xeq.c     **** 
 34543              		.loc 1 5553 1 view .LVU9305
 34544 002c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 34545              	.LVL2659:
 34546              	.L2571:
5531:src/xeq.c     **** 		print_step(op);
 34547              		.loc 1 5531 3 is_stmt 1 view .LVU9306
5531:src/xeq.c     **** 		print_step(op);
 34548              		.loc 1 5531 16 is_stmt 0 view .LVU9307
 34549 0030 1C4B     		ldr	r3, .L2574+8
 34550 0032 1B68     		ldr	r3, [r3]
5531:src/xeq.c     **** 		print_step(op);
 34551              		.loc 1 5531 8 view .LVU9308
 34552 0034 B3F8E007 		ldrh	r0, [r3, #2016]
 34553              	.LVL2660:
5531:src/xeq.c     **** 		print_step(op);
 34554              		.loc 1 5531 8 view .LVU9309
 34555 0038 FFF7FEFF 		bl	getprog
 34556              	.LVL2661:
 34557 003c 0746     		mov	r7, r0
 34558              	.LVL2662:
5532:src/xeq.c     **** 		if (kind == 1) {
 34559              		.loc 1 5532 3 is_stmt 1 view .LVU9310
 34560 003e FFF7FEFF 		bl	print_step
 34561              	.LVL2663:
5533:src/xeq.c     **** 			// Execute the step on key up
 34562              		.loc 1 5533 3 view .LVU9311
5533:src/xeq.c     **** 			// Execute the step on key up
 34563              		.loc 1 5533 6 is_stmt 0 view .LVU9312
 34564 0042 012D     		cmp	r5, #1
 34565 0044 ECD1     		bne	.L2561
5536:src/xeq.c     **** #endif
 34566              		.loc 1 5536 4 is_stmt 1 view .LVU9313
ARM GAS  /tmp/ccQlyisH.s 			page 868


5536:src/xeq.c     **** #endif
 34567              		.loc 1 5536 15 is_stmt 0 view .LVU9314
 34568 0046 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 34569              	.LBB4612:
 34570              	.LBB4613:
5773:src/xeq.c     **** }
 34571              		.loc 1 5773 10 view .LVU9315
 34572 0048 DFF85C80 		ldr	r8, .L2574+12
 34573              	.LBE4613:
 34574              	.LBE4612:
5536:src/xeq.c     **** #endif
 34575              		.loc 1 5536 15 view .LVU9316
 34576 004c 43F00203 		orr	r3, r3, #2
 34577 0050 2376     		strb	r3, [r4, #24]
5538:src/xeq.c     **** 			incpc();
 34578              		.loc 1 5538 4 is_stmt 1 view .LVU9317
 34579              	.LBB4615:
 34580              	.LBI4612:
5772:src/xeq.c     **** 	Running = 1;
 34581              		.loc 1 5772 6 view .LVU9318
 34582              	.LBB4614:
5773:src/xeq.c     **** }
 34583              		.loc 1 5773 2 view .LVU9319
5773:src/xeq.c     **** }
 34584              		.loc 1 5773 10 is_stmt 0 view .LVU9320
 34585 0052 C8F80050 		str	r5, [r8]
 34586              	.LBE4614:
 34587              	.LBE4615:
5539:src/xeq.c     **** 			xeq(op);
 34588              		.loc 1 5539 4 is_stmt 1 view .LVU9321
 34589 0056 FFF7FEFF 		bl	incpc
 34590              	.LVL2664:
5540:src/xeq.c     **** #ifndef REALBUILD
 34591              		.loc 1 5540 4 view .LVU9322
 34592 005a 3846     		mov	r0, r7
 34593 005c FFF7FEFF 		bl	xeq
 34594              	.LVL2665:
5542:src/xeq.c     **** #endif
 34595              		.loc 1 5542 4 view .LVU9323
5542:src/xeq.c     **** #endif
 34596              		.loc 1 5542 15 is_stmt 0 view .LVU9324
 34597 0060 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 34598              	.LBB4616:
 34599              	.LBB4617:
5462:src/xeq.c     **** 		xeq_xrom2();
 34600              		.loc 1 5462 5 view .LVU9325
 34601 0062 94F91720 		ldrsb	r2, [r4, #23]
 34602              	.LBE4617:
 34603              	.LBE4616:
5542:src/xeq.c     **** #endif
 34604              		.loc 1 5542 15 view .LVU9326
 34605 0066 66F34103 		bfi	r3, r6, #1, #1
 34606              	.LBB4621:
 34607              	.LBB4618:
5462:src/xeq.c     **** 		xeq_xrom2();
 34608              		.loc 1 5462 5 view .LVU9327
 34609 006a 002A     		cmp	r2, #0
ARM GAS  /tmp/ccQlyisH.s 			page 869


 34610              	.LBE4618:
 34611              	.LBE4621:
5542:src/xeq.c     **** #endif
 34612              		.loc 1 5542 15 view .LVU9328
 34613 006c 2376     		strb	r3, [r4, #24]
5544:src/xeq.c     **** 			set_running_off_sst();
 34614              		.loc 1 5544 4 is_stmt 1 view .LVU9329
 34615              	.LBB4622:
 34616              	.LBI4616:
5460:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34617              		.loc 1 5460 6 view .LVU9330
 34618              	.LBB4619:
5462:src/xeq.c     **** 		xeq_xrom2();
 34619              		.loc 1 5462 2 view .LVU9331
5462:src/xeq.c     **** 		xeq_xrom2();
 34620              		.loc 1 5462 5 is_stmt 0 view .LVU9332
 34621 006e 12DA     		bge	.L2573
 34622              	.L2568:
 34623              	.LBE4619:
 34624              	.LBE4622:
5545:src/xeq.c     **** 		}
 34625              		.loc 1 5545 4 is_stmt 1 view .LVU9333
 34626              	.LBB4623:
 34627              	.LBI4623:
5768:src/xeq.c     **** 	Running = 0;
 34628              		.loc 1 5768 6 view .LVU9334
 34629              	.LBB4624:
5769:src/xeq.c     **** }
 34630              		.loc 1 5769 2 view .LVU9335
5769:src/xeq.c     **** }
 34631              		.loc 1 5769 10 is_stmt 0 view .LVU9336
 34632 0070 0023     		movs	r3, #0
 34633 0072 C8F80030 		str	r3, [r8]
5770:src/xeq.c     **** 
 34634              		.loc 1 5770 1 view .LVU9337
 34635 0076 D3E7     		b	.L2561
 34636              	.LVL2666:
 34637              	.L2570:
5770:src/xeq.c     **** 
 34638              		.loc 1 5770 1 view .LVU9338
 34639              	.LBE4624:
 34640              	.LBE4623:
5527:src/xeq.c     **** 
 34641              		.loc 1 5527 3 is_stmt 1 view .LVU9339
 34642 0078 FFF7FEFF 		bl	decpc
 34643              	.LVL2667:
5529:src/xeq.c     **** 		// Display the step
 34644              		.loc 1 5529 2 view .LVU9340
5529:src/xeq.c     **** 		// Display the step
 34645              		.loc 1 5529 6 is_stmt 0 view .LVU9341
 34646 007c A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5529:src/xeq.c     **** 		// Display the step
 34647              		.loc 1 5529 5 view .LVU9342
 34648 007e 5A06     		lsls	r2, r3, #25
 34649 0080 CED5     		bpl	.L2561
5531:src/xeq.c     **** 		print_step(op);
 34650              		.loc 1 5531 3 is_stmt 1 view .LVU9343
ARM GAS  /tmp/ccQlyisH.s 			page 870


5531:src/xeq.c     **** 		print_step(op);
 34651              		.loc 1 5531 16 is_stmt 0 view .LVU9344
 34652 0082 084B     		ldr	r3, .L2574+8
 34653 0084 1B68     		ldr	r3, [r3]
5531:src/xeq.c     **** 		print_step(op);
 34654              		.loc 1 5531 8 view .LVU9345
 34655 0086 B3F8E007 		ldrh	r0, [r3, #2016]
 34656 008a FFF7FEFF 		bl	getprog
 34657              	.LVL2668:
5532:src/xeq.c     **** 		if (kind == 1) {
 34658              		.loc 1 5532 3 is_stmt 1 view .LVU9346
5553:src/xeq.c     **** 
 34659              		.loc 1 5553 1 is_stmt 0 view .LVU9347
 34660 008e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 34661              		.cfi_remember_state
 34662              		.cfi_restore 14
 34663              		.cfi_restore 8
 34664              		.cfi_restore 7
 34665              		.cfi_restore 6
 34666              		.cfi_restore 5
 34667              		.cfi_restore 4
 34668              		.cfi_def_cfa_offset 0
5532:src/xeq.c     **** 		if (kind == 1) {
 34669              		.loc 1 5532 3 view .LVU9348
 34670 0092 FFF7FEBF 		b	print_step
 34671              	.LVL2669:
 34672              	.L2573:
 34673              		.cfi_restore_state
 34674              	.LBB4625:
 34675              	.LBB4620:
5463:src/xeq.c     **** }
 34676              		.loc 1 5463 3 is_stmt 1 view .LVU9349
 34677 0096 FFF7FEFF 		bl	xeq_xrom2
 34678              	.LVL2670:
 34679 009a E9E7     		b	.L2568
 34680              	.L2575:
 34681              		.align	2
 34682              	.L2574:
 34683 009c 00000000 		.word	StateWhileOn
 34684 00a0 00000000 		.word	OpCode
 34685 00a4 00000000 		.word	main_ram
 34686 00a8 00000000 		.word	Running
 34687              	.LBE4620:
 34688              	.LBE4625:
 34689              		.cfi_endproc
 34690              	.LFE254:
 34692              		.section	.text.init_34s,"ax",%progbits
 34693              		.align	1
 34694              		.p2align 2,,3
 34695              		.global	init_34s
 34696              		.syntax unified
 34697              		.thumb
 34698              		.thumb_func
 34699              		.fpu fpv4-sp-d16
 34701              	init_34s:
 34702              	.LFB271:
6298:src/xeq.c     **** 
ARM GAS  /tmp/ccQlyisH.s 			page 871


6299:src/xeq.c     **** 
6300:src/xeq.c     **** /*
6301:src/xeq.c     ****  *  Debugging output for the console version
6302:src/xeq.c     ****  */
6303:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE) && !defined(WP34STEST)
6304:src/xeq.c     **** extern unsigned char remap_chars(unsigned char ch);
6305:src/xeq.c     **** 
6306:src/xeq.c     **** static int compare(s_opcode a1, s_opcode a2, int cata) {
6307:src/xeq.c     **** 	char b1[16], b2[16];
6308:src/xeq.c     **** 	const unsigned char *s1, *s2;
6309:src/xeq.c     **** 	int i;
6310:src/xeq.c     **** 
6311:src/xeq.c     **** 	xset(b1, 0, sizeof(b1));
6312:src/xeq.c     **** 	xset(b2, 0, sizeof(b2));
6313:src/xeq.c     **** 	s1 = (unsigned char *)catcmd(a1, b1);
6314:src/xeq.c     **** 	s2 = (unsigned char *)catcmd(a2, b2);
6315:src/xeq.c     **** 	if (*s1 == COMPLEX_PREFIX) s1++;
6316:src/xeq.c     **** 	if (*s2 == COMPLEX_PREFIX) s2++;
6317:src/xeq.c     **** 
6318:src/xeq.c     **** 	for (i=0;;i++) {
6319:src/xeq.c     **** 		unsigned char c1 = *s1++;
6320:src/xeq.c     **** 		unsigned char c2 = *s2++;
6321:src/xeq.c     **** 		c1 = remap_chars(c1);
6322:src/xeq.c     **** 		c2 = remap_chars(c2);
6323:src/xeq.c     **** 
6324:src/xeq.c     **** 		if (c1 != c2) {
6325:src/xeq.c     **** 			if (c1 > c2) {
6326:src/xeq.c     **** 				return 1;
6327:src/xeq.c     **** 			}
6328:src/xeq.c     **** 			return 0;
6329:src/xeq.c     **** 		} else if (c1 == '\0')
6330:src/xeq.c     **** 			break;
6331:src/xeq.c     **** 	}
6332:src/xeq.c     **** 	return 0;
6333:src/xeq.c     **** }
6334:src/xeq.c     **** 
6335:src/xeq.c     **** static void check_cat(const enum catalogues cata, const char *name) {
6336:src/xeq.c     **** 	int i;
6337:src/xeq.c     **** 	char b1[16], b2[16];
6338:src/xeq.c     **** 	const int oldcata = State2.catalogue;
6339:src/xeq.c     **** 	int n;
6340:src/xeq.c     **** 
6341:src/xeq.c     **** 	State2.catalogue = cata;
6342:src/xeq.c     **** 	n = current_catalogue_max();
6343:src/xeq.c     **** 	for (i=1; i<n; i++) {
6344:src/xeq.c     **** 		opcode cold = current_catalogue(i-1);
6345:src/xeq.c     **** 		opcode c = current_catalogue(i);
6346:src/xeq.c     **** 		if (compare(cold, c, cata))
6347:src/xeq.c     **** 			error("catalogue %s row %04x / %04x  %d / %d: %04o / %04o (%s / %s)", name, cold, c, i-1, i,
6348:src/xeq.c     **** 					0xff & cold, 0xff & c,
6349:src/xeq.c     **** 					catcmd(cold, b1), catcmd(c, b2));
6350:src/xeq.c     **** 	}
6351:src/xeq.c     **** 	State2.catalogue = oldcata;
6352:src/xeq.c     **** }
6353:src/xeq.c     **** 
6354:src/xeq.c     **** static void check_const_cat(void) {
6355:src/xeq.c     **** 	int i;
ARM GAS  /tmp/ccQlyisH.s 			page 872


6356:src/xeq.c     **** 	char b1[16], b2[16];
6357:src/xeq.c     **** 	char p1[64], p2[64];
6358:src/xeq.c     **** 
6359:src/xeq.c     **** 	for (i=1; i<NUM_CONSTS_CAT; i++) {
6360:src/xeq.c     **** 		if (compare(CONST(i-1), CONST(i), 0)) {
6361:src/xeq.c     **** 			prettify(catcmd(CONST(i-1), b1), p1, 0);
6362:src/xeq.c     **** 			prettify(catcmd(CONST(i), b2), p2, 0);
6363:src/xeq.c     **** 			error("constants row %d / %d: %s / %s", i, i+1, p1, p2);
6364:src/xeq.c     **** 		}
6365:src/xeq.c     **** 	}
6366:src/xeq.c     **** }
6367:src/xeq.c     **** 
6368:src/xeq.c     **** static void bad_table(const char *t, int row, const char *n, int nlen) {
6369:src/xeq.c     **** 	char buf[64], name[20];
6370:src/xeq.c     **** 	int i;
6371:src/xeq.c     **** 
6372:src/xeq.c     **** 	for (i=0; i<nlen; i++)
6373:src/xeq.c     **** 		name[i] = n[i];
6374:src/xeq.c     **** 	name[nlen] = '\0';
6375:src/xeq.c     **** 	prettify(name, buf, 0);
6376:src/xeq.c     **** 	error("%s table row %d: %6s", t, row, buf);
6377:src/xeq.c     **** }
6378:src/xeq.c     **** 
6379:src/xeq.c     **** #endif
6380:src/xeq.c     **** 
6381:src/xeq.c     **** /* Main initialisation routine that sets things up for us.
6382:src/xeq.c     ****  * Returns a nonzero result if it has cleared ram.
6383:src/xeq.c     ****  */
6384:src/xeq.c     **** int init_34s(void)
6385:src/xeq.c     **** {
 34703              		.loc 1 6385 1 view -0
 34704              		.cfi_startproc
 34705              		@ args = 0, pretend = 0, frame = 0
 34706              		@ frame_needed = 0, uses_anonymous_args = 0
6386:src/xeq.c     **** 	const int cleared = checksum_all();
 34707              		.loc 1 6386 2 view .LVU9351
6385:src/xeq.c     **** 	const int cleared = checksum_all();
 34708              		.loc 1 6385 1 is_stmt 0 view .LVU9352
 34709 0000 10B5     		push	{r4, lr}
 34710              		.cfi_def_cfa_offset 8
 34711              		.cfi_offset 4, -8
 34712              		.cfi_offset 14, -4
 34713              		.loc 1 6386 22 view .LVU9353
 34714 0002 FFF7FEFF 		bl	checksum_ram
 34715              	.LVL2671:
6387:src/xeq.c     **** 	if (cleared) {
 34716              		.loc 1 6387 2 is_stmt 1 view .LVU9354
 34717              		.loc 1 6387 5 is_stmt 0 view .LVU9355
 34718 0006 0446     		mov	r4, r0
 34719 0008 58B9     		cbnz	r0, .L2582
 34720              	.LVL2672:
 34721              	.L2577:
6388:src/xeq.c     **** 		reset();
6389:src/xeq.c     **** 	}
6390:src/xeq.c     **** 	init_state();
 34722              		.loc 1 6390 2 is_stmt 1 view .LVU9356
 34723 000a FFF7FEFF 		bl	init_state
ARM GAS  /tmp/ccQlyisH.s 			page 873


 34724              	.LVL2673:
6391:src/xeq.c     **** 	xeq_init_contexts();
 34725              		.loc 1 6391 2 view .LVU9357
 34726 000e FFF7FEFF 		bl	xeq_init_contexts
 34727              	.LVL2674:
6392:src/xeq.c     **** 	ShowRPN = 1;
 34728              		.loc 1 6392 2 view .LVU9358
 34729              		.loc 1 6392 10 is_stmt 0 view .LVU9359
 34730 0012 054B     		ldr	r3, .L2583
 34731 0014 0122     		movs	r2, #1
6393:src/xeq.c     **** 	set_dot(RPN);
 34732              		.loc 1 6393 2 view .LVU9360
 34733 0016 8D20     		movs	r0, #141
6392:src/xeq.c     **** 	ShowRPN = 1;
 34734              		.loc 1 6392 10 view .LVU9361
 34735 0018 1A60     		str	r2, [r3]
 34736              		.loc 1 6393 2 is_stmt 1 view .LVU9362
 34737 001a FFF7FEFF 		bl	set_dot
 34738              	.LVL2675:
6394:src/xeq.c     **** 
6395:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
6396:src/xeq.c     **** 	StopWatchRunning = 0;
6397:src/xeq.c     **** #endif
6398:src/xeq.c     **** #if defined(CONSOLE) && !defined(WP34STEST) && defined(DEBUG)
6399:src/xeq.c     **** 	{
6400:src/xeq.c     **** 		int i;
6401:src/xeq.c     **** 	/* Sanity check the function table indices.
6402:src/xeq.c     **** 	 * These indicies must correspond exactly with the enum definition.
6403:src/xeq.c     **** 	 * This code validates that this is true and prints error messages
6404:src/xeq.c     **** 	 * if it isn't.
6405:src/xeq.c     **** 	 */
6406:src/xeq.c     **** 	for (i=0; i<NUM_MONADIC; i++)
6407:src/xeq.c     **** 		if (monfuncs[i].n != i)
6408:src/xeq.c     **** 			bad_table("monadic function", i, monfuncs[i].fname, NAME_LEN);
6409:src/xeq.c     **** 	for (i=0; i<NUM_DYADIC; i++)
6410:src/xeq.c     **** 		if (dyfuncs[i].n != i)
6411:src/xeq.c     **** 			bad_table("dyadic function", i, dyfuncs[i].fname, NAME_LEN);
6412:src/xeq.c     **** 	for (i=0; i<NUM_TRIADIC; i++)
6413:src/xeq.c     **** 		if (trifuncs[i].n != i)
6414:src/xeq.c     **** 			bad_table("triadic function", i, trifuncs[i].fname, NAME_LEN);
6415:src/xeq.c     **** 	for (i=0; i<NUM_NILADIC; i++)
6416:src/xeq.c     **** 		if (niladics[i].n != i)
6417:src/xeq.c     **** 			bad_table("niladic function", i, niladics[i].nname, NAME_LEN);
6418:src/xeq.c     **** 	for (i=0; i<NUM_RARG; i++)
6419:src/xeq.c     **** 		if (argcmds[i].n != i)
6420:src/xeq.c     **** 			bad_table("argument command", i, argcmds[i].cmd, NAME_LEN);
6421:src/xeq.c     **** 	for (i=0; i<NUM_MULTI; i++)
6422:src/xeq.c     **** 		if (multicmds[i].n != i)
6423:src/xeq.c     **** 			bad_table("multi command", i, multicmds[i].cmd, NAME_LEN);
6424:src/xeq.c     **** 	check_const_cat();
6425:src/xeq.c     **** 	check_cat(CATALOGUE_COMPLEX, "complex");
6426:src/xeq.c     **** 	check_cat(CATALOGUE_STATS, "statistics");
6427:src/xeq.c     **** 	check_cat(CATALOGUE_SUMS, "summations");
6428:src/xeq.c     **** 	check_cat(CATALOGUE_PROB, "probability");
6429:src/xeq.c     **** 	check_cat(CATALOGUE_PROG, "programme");
6430:src/xeq.c     **** 	check_cat(CATALOGUE_MODE, "mode");
6431:src/xeq.c     **** 	check_cat(CATALOGUE_TEST, "tests");
ARM GAS  /tmp/ccQlyisH.s 			page 874


6432:src/xeq.c     **** 	check_cat(CATALOGUE_INT, "int");
6433:src/xeq.c     **** 	check_cat(CATALOGUE_MATRIX, "matrix");
6434:src/xeq.c     **** 	/*
6435:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA, "alpha");
6436:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_LETTERS, "alpha special upper case letters");
6437:src/xeq.c     **** 	// check_cat(CATALOGUE_ALPHA_LETTERS_LOWER, "alpha special lower letters");
6438:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SUBSCRIPTS, "alpha subscripts");
6439:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SYMBOLS, "alpha symbols");
6440:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_COMPARES, "alpha compares");
6441:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_ARROWS, "alpha arrows");
6442:src/xeq.c     **** 	*/
6443:src/xeq.c     **** 	check_cat(CATALOGUE_CONV, "conversion");
6444:src/xeq.c     **** 	check_cat(CATALOGUE_NORMAL, "float");
6445:src/xeq.c     **** #ifdef INCLUDE_INTERNAL_CATALOGUE
6446:src/xeq.c     **** 	check_cat(CATALOGUE_INTERNAL, "internal");
6447:src/xeq.c     **** #endif
6448:src/xeq.c     ****         if (sizeof(unsigned long long int) != sizeof(UState))
6449:src/xeq.c     ****             error("sizeof register (%u) != sizeof user state (%u)\n", sizeof(unsigned long long int
6450:src/xeq.c     **** 	}
6451:src/xeq.c     **** #endif
6452:src/xeq.c     **** 	return cleared;
 34739              		.loc 1 6452 2 view .LVU9363
6453:src/xeq.c     **** }
 34740              		.loc 1 6453 1 is_stmt 0 view .LVU9364
 34741 001e 2046     		mov	r0, r4
 34742 0020 10BD     		pop	{r4, pc}
 34743              	.LVL2676:
 34744              	.L2582:
6388:src/xeq.c     **** 	}
 34745              		.loc 1 6388 3 is_stmt 1 view .LVU9365
 34746 0022 FFF7FEFF 		bl	reset
 34747              	.LVL2677:
6388:src/xeq.c     **** 	}
 34748              		.loc 1 6388 3 is_stmt 0 view .LVU9366
 34749 0026 F0E7     		b	.L2577
 34750              	.L2584:
 34751              		.align	2
 34752              	.L2583:
 34753 0028 00000000 		.word	ShowRPN
 34754              		.cfi_endproc
 34755              	.LFE271:
 34757              		.section	.rodata.paste_raw_x.str1.4,"aMS",%progbits,1
 34758              		.align	2
 34759              	.LC9:
 34760 0000 0D0A0920 		.ascii	"\015\012\011 :;\000"
 34760      3A3B00
 34761              		.section	.text.paste_raw_x,"ax",%progbits
 34762              		.align	1
 34763              		.p2align 2,,3
 34764              		.global	paste_raw_x
 34765              		.syntax unified
 34766              		.thumb
 34767              		.thumb_func
 34768              		.fpu fpv4-sp-d16
 34770              	paste_raw_x:
 34771              	.LVL2678:
 34772              	.LFB272:
ARM GAS  /tmp/ccQlyisH.s 			page 875


6454:src/xeq.c     **** 
6455:src/xeq.c     **** #ifndef REALBUILD
6456:src/xeq.c     **** 
6457:src/xeq.c     **** #include "string.h"
6458:src/xeq.c     **** 
6459:src/xeq.c     **** void paste_raw_x(const char *in)
6460:src/xeq.c     **** {
 34773              		.loc 1 6460 1 is_stmt 1 view -0
 34774              		.cfi_startproc
 34775              		@ args = 0, pretend = 0, frame = 40
 34776              		@ frame_needed = 0, uses_anonymous_args = 0
6461:src/xeq.c     **** 	char *buffer = strdup( in );
 34777              		.loc 1 6461 2 view .LVU9368
6460:src/xeq.c     **** 	char *buffer = strdup( in );
 34778              		.loc 1 6460 1 is_stmt 0 view .LVU9369
 34779 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 34780              		.cfi_def_cfa_offset 32
 34781              		.cfi_offset 4, -32
 34782              		.cfi_offset 5, -28
 34783              		.cfi_offset 6, -24
 34784              		.cfi_offset 7, -20
 34785              		.cfi_offset 8, -16
 34786              		.cfi_offset 9, -12
 34787              		.cfi_offset 10, -8
 34788              		.cfi_offset 14, -4
 34789 0004 8AB0     		sub	sp, sp, #40
 34790              		.cfi_def_cfa_offset 72
 34791              		.loc 1 6461 17 view .LVU9370
 34792 0006 FFF7FEFF 		bl	strdup
 34793              	.LVL2679:
6462:src/xeq.c     **** 
6463:src/xeq.c     **** 	if ( buffer ) {
 34794              		.loc 1 6463 2 is_stmt 1 view .LVU9371
 34795              		.loc 1 6463 5 is_stmt 0 view .LVU9372
 34796 000a 0028     		cmp	r0, #0
 34797 000c 5CD0     		beq	.L2586
 34798              	.LBB4626:
6464:src/xeq.c     **** 		static const char *delim = "\r\n\t :;";
 34799              		.loc 1 6464 3 is_stmt 1 view .LVU9373
6465:src/xeq.c     **** 		char *p = strtok( buffer, delim );
 34800              		.loc 1 6465 3 view .LVU9374
 34801              	.LBB4627:
 34802              	.LBB4628:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34803              		.loc 1 1198 6 is_stmt 0 view .LVU9375
 34804 000e 394D     		ldr	r5, .L2621
 34805              	.LBE4628:
 34806              	.LBE4627:
 34807              		.loc 1 6465 13 view .LVU9376
 34808 0010 3949     		ldr	r1, .L2621+4
 34809 0012 8146     		mov	r9, r0
 34810 0014 FFF7FEFF 		bl	strtok
 34811              	.LVL2680:
 34812              	.LBB4632:
 34813              	.LBB4629:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34814              		.loc 1 1198 5 view .LVU9377
ARM GAS  /tmp/ccQlyisH.s 			page 876


 34815 0018 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 34816              	.LBE4629:
 34817              	.LBE4632:
 34818              		.loc 1 6465 13 view .LVU9378
 34819 001a 0446     		mov	r4, r0
 34820              	.LVL2681:
6466:src/xeq.c     **** 		process_cmdline();
 34821              		.loc 1 6466 3 is_stmt 1 view .LVU9379
 34822              	.LBB4633:
 34823              	.LBI4627:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 34824              		.loc 1 1195 6 view .LVU9380
 34825              	.LBB4630:
1196:src/xeq.c     **** 
 34826              		.loc 1 1196 2 view .LVU9381
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34827              		.loc 1 1198 2 view .LVU9382
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34828              		.loc 1 1198 5 is_stmt 0 view .LVU9383
 34829 001c 002B     		cmp	r3, #0
 34830 001e 5ED1     		bne	.L2617
 34831              	.LVL2682:
 34832              	.L2587:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34833              		.loc 1 1198 5 view .LVU9384
 34834              	.LBE4630:
 34835              	.LBE4633:
6467:src/xeq.c     **** 		while ( p ) {
 34836              		.loc 1 6467 9 is_stmt 1 view .LVU9385
 34837 0020 002C     		cmp	r4, #0
 34838 0022 4ED0     		beq	.L2595
 34839 0024 354E     		ldr	r6, .L2621+8
 34840              	.LBB4634:
 34841              	.LBB4635:
6468:src/xeq.c     **** 			char *pp = strchr( p, ',' );
6469:src/xeq.c     **** 			if ( pp ) {
6470:src/xeq.c     **** 				*pp = '.';
6471:src/xeq.c     **** 			}
6472:src/xeq.c     **** 			if (is_intmode()) {
6473:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
6474:src/xeq.c     **** 				lift_if_enabled();
6475:src/xeq.c     **** 				set_lift();
6476:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
6477:src/xeq.c     **** 			} else {
6478:src/xeq.c     **** 				decNumber x;
6479:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 34842              		.loc 1 6479 5 is_stmt 0 view .LVU9386
 34843 0026 DFF8DC80 		ldr	r8, .L2621+16
 34844              	.LBE4635:
6480:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
6481:src/xeq.c     **** 					lift_if_enabled();
6482:src/xeq.c     **** 					set_lift();
6483:src/xeq.c     **** 					setX(&x);
6484:src/xeq.c     **** 				}
6485:src/xeq.c     **** 				else {
6486:src/xeq.c     **** 					error_message(Error);
6487:src/xeq.c     **** 					Error = 0;
ARM GAS  /tmp/ccQlyisH.s 			page 877


6488:src/xeq.c     **** 					break;
6489:src/xeq.c     **** 				}
6490:src/xeq.c     **** 			}
6491:src/xeq.c     **** 			p = strtok( NULL, delim );
 34845              		.loc 1 6491 8 view .LVU9387
 34846 002a 334F     		ldr	r7, .L2621+4
 34847 002c 21E0     		b	.L2596
 34848              	.LVL2683:
 34849              	.L2619:
 34850              	.LBB4654:
6473:src/xeq.c     **** 				lift_if_enabled();
 34851              		.loc 1 6473 5 is_stmt 1 view .LVU9388
6473:src/xeq.c     **** 				lift_if_enabled();
 34852              		.loc 1 6473 31 is_stmt 0 view .LVU9389
 34853 002e 94F800A0 		ldrb	r10, [r4]	@ zero_extendqisi2
 34854              	.LBB4655:
 34855              	.LBB4656:
 34856              	.LBB4657:
 34857              	.LBB4658:
 735:src/xeq.c     **** }
 34858              		.loc 1 735 15 view .LVU9390
 34859 0032 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34860              	.LBE4658:
 34861              	.LBE4657:
 34862              	.LBE4656:
 34863              	.LBE4655:
6473:src/xeq.c     **** 				lift_if_enabled();
 34864              		.loc 1 6473 31 view .LVU9391
 34865 0034 AAF12D0A 		sub	r10, r10, #45
 34866 0038 BAFA8AFA 		clz	r10, r10
 34867              	.LBB4664:
 34868              	.LBB4661:
 739:src/xeq.c     **** 		lift();
 34869              		.loc 1 739 5 view .LVU9392
 34870 003c 5A06     		lsls	r2, r3, #25
 34871              	.LBE4661:
 34872              	.LBE4664:
6473:src/xeq.c     **** 				lift_if_enabled();
 34873              		.loc 1 6473 31 view .LVU9393
 34874 003e 4FEA5A1A 		lsr	r10, r10, #5
 34875              	.LVL2684:
6474:src/xeq.c     **** 				set_lift();
 34876              		.loc 1 6474 5 is_stmt 1 view .LVU9394
 34877              	.LBB4665:
 34878              	.LBI4655:
 738:src/xeq.c     **** 	if (get_lift())
 34879              		.loc 1 738 6 view .LVU9395
 34880              	.LBB4662:
 739:src/xeq.c     **** 		lift();
 34881              		.loc 1 739 2 view .LVU9396
 34882              	.LBB4660:
 34883              	.LBI4657:
 734:src/xeq.c     **** 	return State2.state_lift;
 34884              		.loc 1 734 12 view .LVU9397
 34885              	.LBB4659:
 735:src/xeq.c     **** }
 34886              		.loc 1 735 2 view .LVU9398
ARM GAS  /tmp/ccQlyisH.s 			page 878


 34887              	.LBE4659:
 34888              	.LBE4660:
 739:src/xeq.c     **** 		lift();
 34889              		.loc 1 739 5 is_stmt 0 view .LVU9399
 34890 0042 46D4     		bmi	.L2618
 34891              	.LVL2685:
 34892              	.L2591:
 739:src/xeq.c     **** 		lift();
 34893              		.loc 1 739 5 view .LVU9400
 34894              	.LBE4662:
 34895              	.LBE4665:
6475:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
 34896              		.loc 1 6475 5 is_stmt 1 view .LVU9401
 34897              	.LBB4666:
 34898              	.LBI4666:
 758:src/xeq.c     ****     State2.state_lift = 1;
 34899              		.loc 1 758 6 view .LVU9402
 34900              	.LBB4667:
 759:src/xeq.c     **** }
 34901              		.loc 1 759 5 view .LVU9403
 759:src/xeq.c     **** }
 34902              		.loc 1 759 23 is_stmt 0 view .LVU9404
 34903 0044 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34904 0046 43F04003 		orr	r3, r3, #64
 34905 004a EB75     		strb	r3, [r5, #23]
 34906              	.LBE4667:
 34907              	.LBE4666:
6476:src/xeq.c     **** 			} else {
 34908              		.loc 1 6476 5 is_stmt 1 view .LVU9405
6476:src/xeq.c     **** 			} else {
 34909              		.loc 1 6476 50 is_stmt 0 view .LVU9406
 34910 004c FFF7FEFF 		bl	int_base
 34911              	.LVL2686:
6476:src/xeq.c     **** 			} else {
 34912              		.loc 1 6476 37 view .LVU9407
 34913 0050 5444     		add	r4, r4, r10
 34914              	.LVL2687:
6476:src/xeq.c     **** 			} else {
 34915              		.loc 1 6476 50 view .LVU9408
 34916 0052 0246     		mov	r2, r0
6476:src/xeq.c     **** 			} else {
 34917              		.loc 1 6476 5 view .LVU9409
 34918 0054 0021     		movs	r1, #0
 34919 0056 2046     		mov	r0, r4
 34920 0058 FFF7FEFF 		bl	strtoull
 34921              	.LVL2688:
 34922 005c 5246     		mov	r2, r10
 34923 005e FFF7FEFF 		bl	build_value
 34924              	.LVL2689:
 34925 0062 FFF7FEFF 		bl	setX_int
 34926              	.LVL2690:
 34927              	.LBE4654:
 34928              		.loc 1 6491 4 is_stmt 1 view .LVU9410
 34929              		.loc 1 6491 8 is_stmt 0 view .LVU9411
 34930 0066 3946     		mov	r1, r7
 34931 0068 0020     		movs	r0, #0
 34932 006a FFF7FEFF 		bl	strtok
ARM GAS  /tmp/ccQlyisH.s 			page 879


 34933              	.LVL2691:
 34934              		.loc 1 6491 8 view .LVU9412
 34935              	.LBE4634:
6467:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 34936              		.loc 1 6467 9 is_stmt 1 view .LVU9413
 34937 006e 0446     		mov	r4, r0
 34938 0070 38B3     		cbz	r0, .L2595
 34939              	.LVL2692:
 34940              	.L2596:
 34941              	.LBB4673:
6468:src/xeq.c     **** 			if ( pp ) {
 34942              		.loc 1 6468 4 view .LVU9414
6468:src/xeq.c     **** 			if ( pp ) {
 34943              		.loc 1 6468 15 is_stmt 0 view .LVU9415
 34944 0072 2C21     		movs	r1, #44
 34945 0074 2046     		mov	r0, r4
 34946 0076 FFF7FEFF 		bl	strchr
 34947              	.LVL2693:
6469:src/xeq.c     **** 				*pp = '.';
 34948              		.loc 1 6469 4 is_stmt 1 view .LVU9416
6469:src/xeq.c     **** 				*pp = '.';
 34949              		.loc 1 6469 7 is_stmt 0 view .LVU9417
 34950 007a 08B1     		cbz	r0, .L2589
6470:src/xeq.c     **** 			}
 34951              		.loc 1 6470 5 is_stmt 1 view .LVU9418
6470:src/xeq.c     **** 			}
 34952              		.loc 1 6470 9 is_stmt 0 view .LVU9419
 34953 007c 2E23     		movs	r3, #46
 34954 007e 0370     		strb	r3, [r0]
 34955              	.L2589:
6472:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 34956              		.loc 1 6472 4 is_stmt 1 view .LVU9420
6472:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 34957              		.loc 1 6472 8 is_stmt 0 view .LVU9421
 34958 0080 3368     		ldr	r3, [r6]
 34959 0082 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
6472:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 34960              		.loc 1 6472 7 view .LVU9422
 34961 0086 13F0010A 		ands	r10, r3, #1
 34962 008a D0D1     		bne	.L2619
 34963              	.LBB4669:
6478:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 34964              		.loc 1 6478 5 is_stmt 1 view .LVU9423
6479:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 34965              		.loc 1 6479 5 view .LVU9424
 34966 008c 2146     		mov	r1, r4
 34967 008e 01A8     		add	r0, sp, #4
 34968              	.LVL2694:
6479:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 34969              		.loc 1 6479 5 is_stmt 0 view .LVU9425
 34970 0090 4246     		mov	r2, r8
 34971 0092 FFF7FEFF 		bl	decNumberFromString
 34972              	.LVL2695:
6480:src/xeq.c     **** 					lift_if_enabled();
 34973              		.loc 1 6480 5 is_stmt 1 view .LVU9426
6480:src/xeq.c     **** 					lift_if_enabled();
 34974              		.loc 1 6480 11 is_stmt 0 view .LVU9427
ARM GAS  /tmp/ccQlyisH.s 			page 880


 34975 0096 01A8     		add	r0, sp, #4
 34976 0098 FFF7FEFF 		bl	check_special
 34977              	.LVL2696:
6480:src/xeq.c     **** 					lift_if_enabled();
 34978              		.loc 1 6480 8 view .LVU9428
 34979 009c 10BB     		cbnz	r0, .L2593
6481:src/xeq.c     **** 					set_lift();
 34980              		.loc 1 6481 6 is_stmt 1 view .LVU9429
 34981              	.LBB4636:
 34982              	.LBI4636:
 738:src/xeq.c     **** 	if (get_lift())
 34983              		.loc 1 738 6 view .LVU9430
 34984              	.LBB4637:
 739:src/xeq.c     **** 		lift();
 34985              		.loc 1 739 2 view .LVU9431
 34986              	.LBB4638:
 34987              	.LBI4638:
 734:src/xeq.c     **** 	return State2.state_lift;
 34988              		.loc 1 734 12 view .LVU9432
 34989              	.LBB4639:
 735:src/xeq.c     **** }
 34990              		.loc 1 735 2 view .LVU9433
 735:src/xeq.c     **** }
 34991              		.loc 1 735 15 is_stmt 0 view .LVU9434
 34992 009e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34993              	.LBE4639:
 34994              	.LBE4638:
 739:src/xeq.c     **** 		lift();
 34995              		.loc 1 739 5 view .LVU9435
 34996 00a0 5B06     		lsls	r3, r3, #25
 34997 00a2 19D4     		bmi	.L2620
 34998              	.L2594:
 34999              	.LBE4637:
 35000              	.LBE4636:
6482:src/xeq.c     **** 					setX(&x);
 35001              		.loc 1 6482 6 is_stmt 1 view .LVU9436
 35002              	.LBB4641:
 35003              	.LBI4641:
 758:src/xeq.c     ****     State2.state_lift = 1;
 35004              		.loc 1 758 6 view .LVU9437
 35005              	.LBB4642:
 759:src/xeq.c     **** }
 35006              		.loc 1 759 5 view .LVU9438
 759:src/xeq.c     **** }
 35007              		.loc 1 759 23 is_stmt 0 view .LVU9439
 35008 00a4 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35009              	.LBE4642:
 35010              	.LBE4641:
 35011              	.LBB4645:
 35012              	.LBB4646:
 820:src/xeq.c     **** }
 35013              		.loc 1 820 2 view .LVU9440
 35014 00a6 01A9     		add	r1, sp, #4
 35015              	.LBE4646:
 35016              	.LBE4645:
 35017              	.LBB4649:
 35018              	.LBB4643:
ARM GAS  /tmp/ccQlyisH.s 			page 881


 759:src/xeq.c     **** }
 35019              		.loc 1 759 23 view .LVU9441
 35020 00a8 43F04003 		orr	r3, r3, #64
 35021              	.LBE4643:
 35022              	.LBE4649:
 35023              	.LBB4650:
 35024              	.LBB4647:
 820:src/xeq.c     **** }
 35025              		.loc 1 820 2 view .LVU9442
 35026 00ac 6420     		movs	r0, #100
 35027              	.LBE4647:
 35028              	.LBE4650:
 35029              	.LBB4651:
 35030              	.LBB4644:
 759:src/xeq.c     **** }
 35031              		.loc 1 759 23 view .LVU9443
 35032 00ae EB75     		strb	r3, [r5, #23]
 35033              	.LBE4644:
 35034              	.LBE4651:
6483:src/xeq.c     **** 				}
 35035              		.loc 1 6483 6 is_stmt 1 view .LVU9444
 35036              	.LVL2697:
 35037              	.LBB4652:
 35038              	.LBI4645:
 819:src/xeq.c     **** 	setRegister(regX_idx, x);
 35039              		.loc 1 819 6 view .LVU9445
 35040              	.LBB4648:
 820:src/xeq.c     **** }
 35041              		.loc 1 820 2 view .LVU9446
 35042 00b0 FFF7FEFF 		bl	setRegister
 35043              	.LVL2698:
 820:src/xeq.c     **** }
 35044              		.loc 1 820 2 is_stmt 0 view .LVU9447
 35045              	.LBE4648:
 35046              	.LBE4652:
 35047              	.LBE4669:
 35048              		.loc 1 6491 4 is_stmt 1 view .LVU9448
 35049              		.loc 1 6491 8 is_stmt 0 view .LVU9449
 35050 00b4 3946     		mov	r1, r7
 35051 00b6 0020     		movs	r0, #0
 35052 00b8 FFF7FEFF 		bl	strtok
 35053              	.LVL2699:
 35054              		.loc 1 6491 8 view .LVU9450
 35055              	.LBE4673:
6467:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 35056              		.loc 1 6467 9 is_stmt 1 view .LVU9451
 35057 00bc 0446     		mov	r4, r0
 35058 00be 0028     		cmp	r0, #0
 35059 00c0 D7D1     		bne	.L2596
 35060              	.LVL2700:
 35061              	.L2595:
6492:src/xeq.c     **** 		}
6493:src/xeq.c     **** 		free( buffer );
 35062              		.loc 1 6493 3 view .LVU9452
 35063 00c2 4846     		mov	r0, r9
 35064 00c4 FFF7FEFF 		bl	free
 35065              	.LVL2701:
ARM GAS  /tmp/ccQlyisH.s 			page 882


 35066              	.L2586:
 35067              		.loc 1 6493 3 is_stmt 0 view .LVU9453
 35068              	.LBE4626:
6494:src/xeq.c     **** 	}
6495:src/xeq.c     **** 	display();
 35069              		.loc 1 6495 2 is_stmt 1 view .LVU9454
 35070 00c8 FFF7FEFF 		bl	display
 35071              	.LVL2702:
6496:src/xeq.c     **** }
 35072              		.loc 1 6496 1 is_stmt 0 view .LVU9455
 35073 00cc 0AB0     		add	sp, sp, #40
 35074              		.cfi_remember_state
 35075              		.cfi_def_cfa_offset 32
 35076              		@ sp needed
 35077 00ce BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 35078              	.LVL2703:
 35079              	.L2618:
 35080              		.cfi_restore_state
 35081              	.LBB4677:
 35082              	.LBB4674:
 35083              	.LBB4670:
 35084              	.LBB4668:
 35085              	.LBB4663:
 740:src/xeq.c     **** }
 35086              		.loc 1 740 3 is_stmt 1 view .LVU9456
 35087 00d2 FFF7FEFF 		bl	lift
 35088              	.LVL2704:
 740:src/xeq.c     **** }
 35089              		.loc 1 740 3 is_stmt 0 view .LVU9457
 35090 00d6 B5E7     		b	.L2591
 35091              	.LVL2705:
 35092              	.L2620:
 740:src/xeq.c     **** }
 35093              		.loc 1 740 3 view .LVU9458
 35094              	.LBE4663:
 35095              	.LBE4668:
 35096              	.LBE4670:
 35097              	.LBB4671:
 35098              	.LBB4653:
 35099              	.LBB4640:
 740:src/xeq.c     **** }
 35100              		.loc 1 740 3 is_stmt 1 view .LVU9459
 35101 00d8 FFF7FEFF 		bl	lift
 35102              	.LVL2706:
 35103 00dc E2E7     		b	.L2594
 35104              	.LVL2707:
 35105              	.L2617:
 740:src/xeq.c     **** }
 35106              		.loc 1 740 3 is_stmt 0 view .LVU9460
 35107              	.LBE4640:
 35108              	.LBE4653:
 35109              	.LBE4671:
 35110              	.LBE4674:
 35111              	.LBB4675:
 35112              	.LBB4631:
 35113 00de FFF7FEFF 		bl	process_cmdline.part.0
 35114              	.LVL2708:
ARM GAS  /tmp/ccQlyisH.s 			page 883


 740:src/xeq.c     **** }
 35115              		.loc 1 740 3 view .LVU9461
 35116 00e2 9DE7     		b	.L2587
 35117              	.L2593:
 740:src/xeq.c     **** }
 35118              		.loc 1 740 3 view .LVU9462
 35119              	.LBE4631:
 35120              	.LBE4675:
 35121              	.LBB4676:
 35122              	.LBB4672:
6486:src/xeq.c     **** 					Error = 0;
 35123              		.loc 1 6486 6 is_stmt 1 view .LVU9463
 35124 00e4 064C     		ldr	r4, .L2621+12
 35125              	.LVL2709:
6486:src/xeq.c     **** 					Error = 0;
 35126              		.loc 1 6486 6 is_stmt 0 view .LVU9464
 35127 00e6 2068     		ldr	r0, [r4]
 35128 00e8 FFF7FEFF 		bl	error_message
 35129              	.LVL2710:
6487:src/xeq.c     **** 					break;
 35130              		.loc 1 6487 6 is_stmt 1 view .LVU9465
6487:src/xeq.c     **** 					break;
 35131              		.loc 1 6487 12 is_stmt 0 view .LVU9466
 35132 00ec C4F800A0 		str	r10, [r4]
6488:src/xeq.c     **** 				}
 35133              		.loc 1 6488 6 is_stmt 1 view .LVU9467
 35134 00f0 E7E7     		b	.L2595
 35135              	.L2622:
 35136 00f2 00BF     		.align	2
 35137              	.L2621:
 35138 00f4 00000000 		.word	StateWhileOn
 35139 00f8 00000000 		.word	.LC9
 35140 00fc 00000000 		.word	main_ram
 35141 0100 00000000 		.word	Error
 35142 0104 00000000 		.word	Ctx
 35143              	.LBE4672:
 35144              	.LBE4676:
 35145              	.LBE4677:
 35146              		.cfi_endproc
 35147              	.LFE272:
 35149              		.global	__aeabi_uldivmod
 35150              		.section	.rodata.fill_buffer_from_raw_x.str1.4,"aMS",%progbits,1
 35151              		.align	2
 35152              	.LC10:
 35153 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 35153      34353637 
 35153      38394142 
 35153      43444546 
 35153      00
 35154              		.section	.text.fill_buffer_from_raw_x,"ax",%progbits
 35155              		.align	1
 35156              		.p2align 2,,3
 35157              		.global	fill_buffer_from_raw_x
 35158              		.syntax unified
 35159              		.thumb
 35160              		.thumb_func
 35161              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQlyisH.s 			page 884


 35163              	fill_buffer_from_raw_x:
 35164              	.LVL2711:
 35165              	.LFB273:
6497:src/xeq.c     **** 
6498:src/xeq.c     **** char* fill_buffer_from_raw_x(char *buffer)
6499:src/xeq.c     **** {
 35166              		.loc 1 6499 1 view -0
 35167              		.cfi_startproc
 35168              		@ args = 0, pretend = 0, frame = 40
 35169              		@ frame_needed = 0, uses_anonymous_args = 0
6500:src/xeq.c     **** 	process_cmdline();
 35170              		.loc 1 6500 2 view .LVU9469
 35171              	.LBB4678:
 35172              	.LBI4678:
1195:src/xeq.c     **** 	decNumber a, b, x, t;
 35173              		.loc 1 1195 6 view .LVU9470
 35174              	.LBB4679:
1196:src/xeq.c     **** 
 35175              		.loc 1 1196 2 view .LVU9471
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35176              		.loc 1 1198 2 view .LVU9472
 35177              	.LBE4679:
 35178              	.LBE4678:
6499:src/xeq.c     **** 	process_cmdline();
 35179              		.loc 1 6499 1 is_stmt 0 view .LVU9473
 35180 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 35181              		.cfi_def_cfa_offset 36
 35182              		.cfi_offset 4, -36
 35183              		.cfi_offset 5, -32
 35184              		.cfi_offset 6, -28
 35185              		.cfi_offset 7, -24
 35186              		.cfi_offset 8, -20
 35187              		.cfi_offset 9, -16
 35188              		.cfi_offset 10, -12
 35189              		.cfi_offset 11, -8
 35190              		.cfi_offset 14, -4
 35191              	.LBB4683:
 35192              	.LBB4680:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35193              		.loc 1 1198 6 view .LVU9474
 35194 0004 2F4B     		ldr	r3, .L2647
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35195              		.loc 1 1198 5 view .LVU9475
 35196 0006 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 35197              	.LBE4680:
 35198              	.LBE4683:
6499:src/xeq.c     **** 	process_cmdline();
 35199              		.loc 1 6499 1 view .LVU9476
 35200 0008 8BB0     		sub	sp, sp, #44
 35201              		.cfi_def_cfa_offset 80
6499:src/xeq.c     **** 	process_cmdline();
 35202              		.loc 1 6499 1 view .LVU9477
 35203 000a 0446     		mov	r4, r0
 35204              	.LBB4684:
 35205              	.LBB4681:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35206              		.loc 1 1198 5 view .LVU9478
ARM GAS  /tmp/ccQlyisH.s 			page 885


 35207 000c 002B     		cmp	r3, #0
 35208 000e 55D1     		bne	.L2644
 35209              	.LVL2712:
 35210              	.L2624:
1198:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35211              		.loc 1 1198 5 view .LVU9479
 35212              	.LBE4681:
 35213              	.LBE4684:
6501:src/xeq.c     **** 	if (is_intmode()) {
 35214              		.loc 1 6501 2 is_stmt 1 view .LVU9480
 35215              		.loc 1 6501 6 is_stmt 0 view .LVU9481
 35216 0010 2D4D     		ldr	r5, .L2647+4
 35217 0012 2B68     		ldr	r3, [r5]
 35218 0014 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 35219              		.loc 1 6501 5 view .LVU9482
 35220 0018 DA07     		lsls	r2, r3, #31
 35221 001a 2CD5     		bpl	.L2625
 35222              	.LBB4685:
6502:src/xeq.c     **** 		int sgn;
 35223              		.loc 1 6502 3 is_stmt 1 view .LVU9483
6503:src/xeq.c     **** 		unsigned long long int x = extract_value(get_reg_n_int(regX_idx), &sgn);
 35224              		.loc 1 6503 3 view .LVU9484
 35225              		.loc 1 6503 30 is_stmt 0 view .LVU9485
 35226 001c 6420     		movs	r0, #100
 35227 001e FFF7FEFF 		bl	get_reg_n_int
 35228              	.LVL2713:
 35229 0022 01AA     		add	r2, sp, #4
 35230 0024 FFF7FEFF 		bl	extract_value
 35231              	.LVL2714:
 35232 0028 0646     		mov	r6, r0
 35233 002a 0F46     		mov	r7, r1
 35234              	.LVL2715:
6504:src/xeq.c     **** 		const int base = int_base();
 35235              		.loc 1 6504 3 is_stmt 1 view .LVU9486
 35236              		.loc 1 6504 20 is_stmt 0 view .LVU9487
 35237 002c FFF7FEFF 		bl	int_base
 35238              	.LVL2716:
6505:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
6506:src/xeq.c     **** 
6507:src/xeq.c     **** 		*p-- = '\0';
 35239              		.loc 1 6507 8 view .LVU9488
 35240 0030 0023     		movs	r3, #0
 35241              	.LVL2717:
6505:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
 35242              		.loc 1 6505 3 is_stmt 1 view .LVU9489
 35243              		.loc 1 6507 3 view .LVU9490
 35244              		.loc 1 6507 8 is_stmt 0 view .LVU9491
 35245 0032 E370     		strb	r3, [r4, #3]
6508:src/xeq.c     **** 		if (x == 0)
 35246              		.loc 1 6508 3 is_stmt 1 view .LVU9492
 35247              		.loc 1 6508 6 is_stmt 0 view .LVU9493
 35248 0034 56EA0703 		orrs	r3, r6, r7
 35249 0038 35D0     		beq	.L2645
 35250 003a 244D     		ldr	r5, .L2647+8
6507:src/xeq.c     **** 		if (x == 0)
 35251              		.loc 1 6507 5 view .LVU9494
 35252 003c 0234     		adds	r4, r4, #2
ARM GAS  /tmp/ccQlyisH.s 			page 886


 35253              	.LVL2718:
6507:src/xeq.c     **** 		if (x == 0)
 35254              		.loc 1 6507 5 view .LVU9495
 35255 003e 8046     		mov	r8, r0
 35256 0040 4FEAE079 		asr	r9, r0, #31
 35257              	.LVL2719:
 35258              	.L2628:
 35259              	.LBB4686:
6509:src/xeq.c     **** 			*p-- = '0'; 
6510:src/xeq.c     **** 		else {
6511:src/xeq.c     **** 			while (x != 0) {
6512:src/xeq.c     **** 				const int n = x % base;
 35260              		.loc 1 6512 5 is_stmt 1 view .LVU9496
 35261 0044 3046     		mov	r0, r6
 35262 0046 3946     		mov	r1, r7
 35263 0048 4246     		mov	r2, r8
 35264 004a 4B46     		mov	r3, r9
 35265 004c FFF7FEFF 		bl	__aeabi_uldivmod
 35266              	.LVL2720:
6513:src/xeq.c     **** 				x /= base;
 35267              		.loc 1 6513 5 view .LVU9497
 35268 0050 BB46     		mov	fp, r7
 35269 0052 B246     		mov	r10, r6
 35270              	.LBE4686:
6511:src/xeq.c     **** 				const int n = x % base;
 35271              		.loc 1 6511 10 is_stmt 0 view .LVU9498
 35272 0054 CB45     		cmp	fp, r9
 35273              	.LBB4687:
6514:src/xeq.c     **** 				*p-- = n["0123456789ABCDEF"];
 35274              		.loc 1 6514 10 view .LVU9499
 35275 0056 AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 35276 0058 04F80139 		strb	r3, [r4], #-1
 35277              	.LVL2721:
 35278              		.loc 1 6514 10 view .LVU9500
 35279              	.LBE4687:
6511:src/xeq.c     **** 				const int n = x % base;
 35280              		.loc 1 6511 10 view .LVU9501
 35281 005c 08BF     		it	eq
 35282 005e C245     		cmpeq	r10, r8
 35283              	.LBB4688:
6513:src/xeq.c     **** 				x /= base;
 35284              		.loc 1 6513 7 view .LVU9502
 35285 0060 0646     		mov	r6, r0
 35286              	.LVL2722:
6513:src/xeq.c     **** 				x /= base;
 35287              		.loc 1 6513 7 view .LVU9503
 35288 0062 0F46     		mov	r7, r1
 35289              	.LVL2723:
 35290              		.loc 1 6514 5 is_stmt 1 view .LVU9504
 35291              		.loc 1 6514 5 is_stmt 0 view .LVU9505
 35292              	.LBE4688:
6511:src/xeq.c     **** 				const int n = x % base;
 35293              		.loc 1 6511 10 is_stmt 1 view .LVU9506
 35294 0064 EED2     		bcs	.L2628
6515:src/xeq.c     **** 			}
6516:src/xeq.c     **** 		}
6517:src/xeq.c     **** 		if (sgn)
ARM GAS  /tmp/ccQlyisH.s 			page 887


 35295              		.loc 1 6517 3 view .LVU9507
 35296              		.loc 1 6517 6 is_stmt 0 view .LVU9508
 35297 0066 019B     		ldr	r3, [sp, #4]
 35298 0068 1BB3     		cbz	r3, .L2629
 35299              	.LVL2724:
 35300              	.L2646:
6518:src/xeq.c     **** 			*p = '-';
 35301              		.loc 1 6518 4 is_stmt 1 view .LVU9509
 35302              		.loc 1 6518 7 is_stmt 0 view .LVU9510
 35303 006a 2D23     		movs	r3, #45
 35304 006c 2370     		strb	r3, [r4]
 35305              	.LVL2725:
 35306              	.L2623:
 35307              		.loc 1 6518 7 view .LVU9511
 35308              	.LBE4685:
6519:src/xeq.c     **** 		else
6520:src/xeq.c     **** 			p++;
6521:src/xeq.c     **** 		return p;
6522:src/xeq.c     **** 	} else {
6523:src/xeq.c     **** 		decNumber x;
6524:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
6525:src/xeq.c     **** 		if (UState.fraccomma) {
6526:src/xeq.c     **** 			char *p = strchr(buffer, '.');
6527:src/xeq.c     **** 			if (p != NULL)
6528:src/xeq.c     **** 				*p = ',';
6529:src/xeq.c     **** 		}
6530:src/xeq.c     **** 
6531:src/xeq.c     **** 		return buffer;
6532:src/xeq.c     **** 	}
6533:src/xeq.c     **** }
 35309              		.loc 1 6533 1 view .LVU9512
 35310 006e 2046     		mov	r0, r4
 35311 0070 0BB0     		add	sp, sp, #44
 35312              		.cfi_remember_state
 35313              		.cfi_def_cfa_offset 36
 35314              		@ sp needed
 35315 0072 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35316              	.LVL2726:
 35317              	.L2625:
 35318              		.cfi_restore_state
 35319              	.LBB4689:
6523:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
 35320              		.loc 1 6523 3 is_stmt 1 view .LVU9513
6524:src/xeq.c     **** 		if (UState.fraccomma) {
 35321              		.loc 1 6524 3 view .LVU9514
 35322              	.LBB4690:
 35323              	.LBI4690:
 815:src/xeq.c     **** 	return getRegister(x, regX_idx);
 35324              		.loc 1 815 12 view .LVU9515
 35325              	.LBB4691:
 816:src/xeq.c     **** }
 35326              		.loc 1 816 2 view .LVU9516
 816:src/xeq.c     **** }
 35327              		.loc 1 816 9 is_stmt 0 view .LVU9517
 35328 0076 6421     		movs	r1, #100
 35329 0078 01A8     		add	r0, sp, #4
 35330              	.LVL2727:
ARM GAS  /tmp/ccQlyisH.s 			page 888


 816:src/xeq.c     **** }
 35331              		.loc 1 816 9 view .LVU9518
 35332 007a FFF7FEFF 		bl	getRegister
 35333              	.LVL2728:
 816:src/xeq.c     **** }
 35334              		.loc 1 816 9 view .LVU9519
 35335              	.LBE4691:
 35336              	.LBE4690:
6524:src/xeq.c     **** 		if (UState.fraccomma) {
 35337              		.loc 1 6524 3 view .LVU9520
 35338 007e 2146     		mov	r1, r4
 35339 0080 FFF7FEFF 		bl	decNumberToString
 35340              	.LVL2729:
6525:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35341              		.loc 1 6525 3 is_stmt 1 view .LVU9521
6525:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35342              		.loc 1 6525 7 is_stmt 0 view .LVU9522
 35343 0084 2B68     		ldr	r3, [r5]
 35344 0086 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
6525:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35345              		.loc 1 6525 6 view .LVU9523
 35346 008a 9B06     		lsls	r3, r3, #26
 35347 008c EFD5     		bpl	.L2623
 35348              	.LBB4692:
6526:src/xeq.c     **** 			if (p != NULL)
 35349              		.loc 1 6526 4 is_stmt 1 view .LVU9524
6526:src/xeq.c     **** 			if (p != NULL)
 35350              		.loc 1 6526 14 is_stmt 0 view .LVU9525
 35351 008e 2E21     		movs	r1, #46
 35352 0090 2046     		mov	r0, r4
 35353 0092 FFF7FEFF 		bl	strchr
 35354              	.LVL2730:
6527:src/xeq.c     **** 				*p = ',';
 35355              		.loc 1 6527 4 is_stmt 1 view .LVU9526
6527:src/xeq.c     **** 				*p = ',';
 35356              		.loc 1 6527 7 is_stmt 0 view .LVU9527
 35357 0096 0028     		cmp	r0, #0
 35358 0098 E9D0     		beq	.L2623
6528:src/xeq.c     **** 		}
 35359              		.loc 1 6528 5 is_stmt 1 view .LVU9528
6528:src/xeq.c     **** 		}
 35360              		.loc 1 6528 8 is_stmt 0 view .LVU9529
 35361 009a 2C23     		movs	r3, #44
 35362 009c 0370     		strb	r3, [r0]
 35363              	.LBE4692:
6531:src/xeq.c     **** 	}
 35364              		.loc 1 6531 3 is_stmt 1 view .LVU9530
 35365              	.LBE4689:
 35366              		.loc 1 6533 1 is_stmt 0 view .LVU9531
 35367 009e 2046     		mov	r0, r4
 35368              	.LVL2731:
 35369              		.loc 1 6533 1 view .LVU9532
 35370 00a0 0BB0     		add	sp, sp, #44
 35371              		.cfi_remember_state
 35372              		.cfi_def_cfa_offset 36
 35373              		@ sp needed
 35374 00a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  /tmp/ccQlyisH.s 			page 889


 35375              	.LVL2732:
 35376              	.L2645:
 35377              		.cfi_restore_state
 35378              	.LBB4693:
6509:src/xeq.c     **** 		else {
 35379              		.loc 1 6509 4 is_stmt 1 view .LVU9533
6509:src/xeq.c     **** 		else {
 35380              		.loc 1 6509 9 is_stmt 0 view .LVU9534
 35381 00a6 3023     		movs	r3, #48
 35382 00a8 A370     		strb	r3, [r4, #2]
6517:src/xeq.c     **** 			*p = '-';
 35383              		.loc 1 6517 6 view .LVU9535
 35384 00aa 019B     		ldr	r3, [sp, #4]
6509:src/xeq.c     **** 		else {
 35385              		.loc 1 6509 6 view .LVU9536
 35386 00ac 0134     		adds	r4, r4, #1
 35387              	.LVL2733:
6517:src/xeq.c     **** 			*p = '-';
 35388              		.loc 1 6517 3 is_stmt 1 view .LVU9537
6517:src/xeq.c     **** 			*p = '-';
 35389              		.loc 1 6517 6 is_stmt 0 view .LVU9538
 35390 00ae 002B     		cmp	r3, #0
 35391 00b0 DBD1     		bne	.L2646
 35392              	.LVL2734:
 35393              	.L2629:
6520:src/xeq.c     **** 		return p;
 35394              		.loc 1 6520 4 is_stmt 1 view .LVU9539
6520:src/xeq.c     **** 		return p;
 35395              		.loc 1 6520 5 is_stmt 0 view .LVU9540
 35396 00b2 0134     		adds	r4, r4, #1
 35397              	.LVL2735:
6521:src/xeq.c     **** 	} else {
 35398              		.loc 1 6521 3 is_stmt 1 view .LVU9541
 35399              	.LBE4693:
 35400              		.loc 1 6533 1 is_stmt 0 view .LVU9542
 35401 00b4 2046     		mov	r0, r4
 35402 00b6 0BB0     		add	sp, sp, #44
 35403              		.cfi_remember_state
 35404              		.cfi_def_cfa_offset 36
 35405              		@ sp needed
 35406 00b8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35407              	.LVL2736:
 35408              	.L2644:
 35409              		.cfi_restore_state
 35410              	.LBB4694:
 35411              	.LBB4682:
 35412              		.loc 1 6533 1 view .LVU9543
 35413 00bc FFF7FEFF 		bl	process_cmdline.part.0
 35414              	.LVL2737:
 35415              		.loc 1 6533 1 view .LVU9544
 35416 00c0 A6E7     		b	.L2624
 35417              	.L2648:
 35418 00c2 00BF     		.align	2
 35419              	.L2647:
 35420 00c4 00000000 		.word	StateWhileOn
 35421 00c8 00000000 		.word	main_ram
 35422 00cc 00000000 		.word	.LC10
ARM GAS  /tmp/ccQlyisH.s 			page 890


 35423              	.LBE4682:
 35424              	.LBE4694:
 35425              		.cfi_endproc
 35426              	.LFE273:
 35428              		.comm	RectPolConv,4,4
 35429              		.comm	StackBase,4,4
 35430              		.comm	RetStk,4,4
 35431              		.comm	ProgFree,4,4
 35432              		.comm	RetStkSize,4,4
 35433              		.comm	TraceBuffer,25,4
 35434              		.comm	Ctx,24,4
 35435              		.comm	UserLocalRegs,4,4
 35436              		.comm	XromUserPc,4,4
 35437              		.comm	ShowRegister,4,4
 35438              		.comm	XeqOpCode,2,2
 35439              		.comm	PcWrapped,4,4
 35440              		.comm	Error,4,4
 35441              		.comm	Busy,4,4
 35442              		.comm	Pause,1,1
 35443              		.comm	JustStopped,4,4
 35444              		.comm	XromRunning,4,4
 35445              		.comm	Running,4,4
 35446              		.global	xrom_targets
 35447              		.section	.rodata
 35448              		.align	2
 35449              		.set	.LANCHOR5,. + 0
 35450              	.LC1:
 35451 0000 0C0C0C0C 		.ascii	"\014\014\014\014\014\014\014\014\014\013\013\013\014"
 35451      0C0C0C0C 
 35451      0C0B0B0B 
 35451      0C
 35452 000d 0C0A0A0C 		.ascii	"\014\012\012\014\014\014\007\010\011\014\014\014\004"
 35452      0C0C0708 
 35452      090C0C0C 
 35452      04
 35453 001a 05060C0C 		.ascii	"\005\006\014\014\014\001\002\003\014\014\014\000\012"
 35453      0C010203 
 35453      0C0C0C00 
 35453      0A
 35454 0027 0C0C     		.ascii	"\014\014"
 35455              		.section	.bss.result.11459,"aw",%nobits
 35456              		.align	2
 35457              		.set	.LANCHOR2,. + 0
 35460              	result.11459:
 35461 0000 00000000 		.space	16
 35461      00000000 
 35461      00000000 
 35461      00000000 
 35462              		.section	.data.RegionTab,"aw"
 35463              		.align	2
 35464              		.set	.LANCHOR0,. + 0
 35467              	RegionTab:
 35468 0000 00000000 		.word	0
 35469 0004 00000000 		.word	0
 35470 0008 00000000 		.word	0
 35471 000c 00000000 		.word	xrom
 35472              		.section	.rodata.StackRegMask,"a"
ARM GAS  /tmp/ccQlyisH.s 			page 891


 35473              		.align	2
 35474              		.set	.LANCHOR3,. + 0
 35477              	StackRegMask:
 35478 0000 0F01     		.short	271
 35479 0002 FF01     		.short	511
 35480              		.section	.rodata.convergence_tolerances,"a"
 35481              		.align	2
 35482              		.set	.LANCHOR7,. + 0
 35485              	convergence_tolerances:
 35486 0000 00000000 		.word	const_1e_14
 35487 0004 00000000 		.word	const_1e_24
 35488 0008 00000000 		.word	const_1e_32
 35489              		.section	.rodata.modes.11158,"a"
 35490              		.align	2
 35491              		.set	.LANCHOR1,. + 0
 35494              	modes.11158:
 35495 0000 03020401 		.ascii	"\003\002\004\001\005\000\006"
 35495      050006
 35496              		.section	.rodata.modes.11669,"a"
 35497              		.align	2
 35498              		.set	.LANCHOR4,. + 0
 35501              	modes.11669:
 35502 0000 02010081 		.ascii	"\002\001\000\201"
 35503              		.section	.rodata.xrom_targets,"a"
 35504              		.align	2
 35505              		.set	.LANCHOR6,. + 0
 35508              	xrom_targets:
 35509 0000 9107     		.short	1937
 35510 0002 B70B     		.short	2999
 35511 0004 4602     		.short	582
 35512 0006 4402     		.short	580
 35513 0008 420A     		.short	2626
 35514 000a 340A     		.short	2612
 35515 000c 100C     		.short	3088
 35516 000e 9C05     		.short	1436
 35517 0010 3B0A     		.short	2619
 35518 0012 5A06     		.short	1626
 35519 0014 6F06     		.short	1647
 35520 0016 6B06     		.short	1643
 35521 0018 6406     		.short	1636
 35522 001a 390A     		.short	2617
 35523 001c 7206     		.short	1650
 35524 001e 7506     		.short	1653
 35525 0020 7706     		.short	1655
 35526 0022 5D06     		.short	1629
 35527 0024 5707     		.short	1879
 35528 0026 4F08     		.short	2127
 35529 0028 EB05     		.short	1515
 35530 002a 0405     		.short	1284
 35531 002c 2907     		.short	1833
 35532 002e 8205     		.short	1410
 35533 0030 9A05     		.short	1434
 35534 0032 EC05     		.short	1516
 35535 0034 490A     		.short	2633
 35536              		.text
 35537              	.Letext0:
 35538              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
ARM GAS  /tmp/ccQlyisH.s 			page 892


 35539              		.file 3 "dmcp/dmcp.h"
 35540              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 35541              		.file 5 "/usr/include/newlib/sys/_types.h"
 35542              		.file 6 "/usr/include/newlib/sys/reent.h"
 35543              		.file 7 "/usr/include/newlib/sys/lock.h"
 35544              		.file 8 "/usr/include/newlib/stdlib.h"
 35545              		.file 9 "src/decNumber/decContext.h"
 35546              		.file 10 "src/decNumber/decNumber.h"
 35547              		.file 11 "src/decNumber/decimal64.h"
 35548              		.file 12 "src/decNumber/decimal128.h"
 35549              		.file 13 "src/xeq.h"
 35550              		.file 14 "src/data.h"
 35551              		.file 15 "src/storage.h"
 35552              		.file 16 "src/stats.h"
 35553              		.file 17 "src/display.h"
 35554              		.file 18 "src/consts.h"
 35555              		.file 19 "src/xrom.h"
 35556              		.file 20 "src/pretty.h"
 35557              		.file 21 "src/xrom_targets.c"
 35558              		.file 22 "src/int.h"
 35559              		.file 23 "/usr/include/newlib/string.h"
 35560              		.file 24 "src/lcd.h"
 35561              		.file 25 "src/decn.h"
 35562              		.file 26 "src/complex.h"
 35563              		.file 27 "/usr/include/newlib/stdio.h"
 35564              		.file 28 "src/alpha.h"
ARM GAS  /tmp/ccQlyisH.s 			page 893


DEFINED SYMBOLS
                            *ABS*:0000000000000000 xeq.c
     /tmp/ccQlyisH.s:18     .text.find_section_bounds:0000000000000000 $t
     /tmp/ccQlyisH.s:26     .text.find_section_bounds:0000000000000000 find_section_bounds
     /tmp/ccQlyisH.s:164    .text.find_section_bounds:0000000000000068 $d
     /tmp/ccQlyisH.s:172    .text.reg_address:0000000000000000 $t
     /tmp/ccQlyisH.s:179    .text.reg_address:0000000000000000 reg_address
     /tmp/ccQlyisH.s:293    .text.reg_address:0000000000000058 $d
     /tmp/ccQlyisH.s:300    .text.retstk_up:0000000000000000 $t
     /tmp/ccQlyisH.s:307    .text.retstk_up:0000000000000000 retstk_up
     /tmp/ccQlyisH.s:440    .text.retstk_up:000000000000006c $d
                            *COM*:0000000000000004 RetStk
     /tmp/ccQlyisH.s:447    .text.flag_word:0000000000000000 $t
     /tmp/ccQlyisH.s:454    .text.flag_word:0000000000000000 flag_word
     /tmp/ccQlyisH.s:574    .text.flag_word:000000000000006c $d
     /tmp/ccQlyisH.s:581    .text.set_zero:0000000000000000 $t
     /tmp/ccQlyisH.s:588    .text.set_zero:0000000000000000 set_zero
     /tmp/ccQlyisH.s:627    .text.set_zero:0000000000000020 $d
     /tmp/ccQlyisH.s:634    .text.intResult:0000000000000000 $t
     /tmp/ccQlyisH.s:641    .text.intResult:0000000000000000 intResult
     /tmp/ccQlyisH.s:841    .text.intResult:00000000000000a4 $d
                            *COM*:0000000000000004 Error
     /tmp/ccQlyisH.s:847    .text.check_stack_overlap:0000000000000000 $t
     /tmp/ccQlyisH.s:854    .text.check_stack_overlap:0000000000000000 check_stack_overlap
     /tmp/ccQlyisH.s:1068   .text.check_stack_overlap:0000000000000068 $d
     /tmp/ccQlyisH.s:1075   .text.is_xrom:0000000000000000 $t
     /tmp/ccQlyisH.s:1083   .text.is_xrom:0000000000000000 is_xrom
     /tmp/ccQlyisH.s:1104   .text.is_xrom:0000000000000018 $d
     /tmp/ccQlyisH.s:1109   .text.move_retstk:0000000000000000 $t
     /tmp/ccQlyisH.s:1117   .text.move_retstk:0000000000000000 move_retstk
     /tmp/ccQlyisH.s:1300   .text.move_retstk:000000000000006c $d
                            *COM*:0000000000000004 RetStkSize
     /tmp/ccQlyisH.s:1309   .text.local_levels:0000000000000000 $t
     /tmp/ccQlyisH.s:1317   .text.local_levels:0000000000000000 local_levels
     /tmp/ccQlyisH.s:1346   .text.local_levels:0000000000000020 $d
     /tmp/ccQlyisH.s:1352   .text.local_regs_rarg:0000000000000000 $t
     /tmp/ccQlyisH.s:1360   .text.local_regs_rarg:0000000000000000 local_regs_rarg
     /tmp/ccQlyisH.s:1460   .text.local_regs_rarg:0000000000000058 $d
     /tmp/ccQlyisH.s:1466   .text.get_reg_limit:0000000000000000 $t
     /tmp/ccQlyisH.s:1473   .text.get_reg_limit:0000000000000000 get_reg_limit
     /tmp/ccQlyisH.s:1711   .text.get_reg_limit:00000000000000b0 $d
     /tmp/ccQlyisH.s:1720   .text.local_regs:0000000000000000 $t
     /tmp/ccQlyisH.s:1728   .text.local_regs:0000000000000000 local_regs
     /tmp/ccQlyisH.s:1826   .text.local_regs:0000000000000038 $d
     /tmp/ccQlyisH.s:1836   .text.global_regs_rarg:0000000000000000 $t
     /tmp/ccQlyisH.s:1844   .text.global_regs_rarg:0000000000000000 global_regs_rarg
     /tmp/ccQlyisH.s:1917   .text.global_regs_rarg:000000000000003c $d
     /tmp/ccQlyisH.s:1922   .text.global_regs:0000000000000000 $t
     /tmp/ccQlyisH.s:1930   .text.global_regs:0000000000000000 global_regs
     /tmp/ccQlyisH.s:1988   .text.global_regs:0000000000000020 $d
     /tmp/ccQlyisH.s:1993   .text.version:0000000000000000 $t
     /tmp/ccQlyisH.s:2001   .text.version:0000000000000000 version
     /tmp/ccQlyisH.s:2032   .text.version:0000000000000018 $d
     /tmp/ccQlyisH.s:2037   .text.cmd_off:0000000000000000 $t
     /tmp/ccQlyisH.s:2045   .text.cmd_off:0000000000000000 cmd_off
     /tmp/ccQlyisH.s:2061   .text.init_RegionTab:0000000000000000 $t
     /tmp/ccQlyisH.s:2069   .text.init_RegionTab:0000000000000000 init_RegionTab
ARM GAS  /tmp/ccQlyisH.s 			page 894


     /tmp/ccQlyisH.s:2107   .text.init_RegionTab:000000000000001c $d
     /tmp/ccQlyisH.s:2115   .text.sizeLIB:0000000000000000 $t
     /tmp/ccQlyisH.s:2123   .text.sizeLIB:0000000000000000 sizeLIB
     /tmp/ccQlyisH.s:2157   .text.sizeLIB:0000000000000018 $d
     /tmp/ccQlyisH.s:2163   .text.getprog:0000000000000000 $t
     /tmp/ccQlyisH.s:2171   .text.getprog:0000000000000000 getprog
     /tmp/ccQlyisH.s:2275   .text.getprog:0000000000000048 $d
     /tmp/ccQlyisH.s:2283   .text.get_current_prog:0000000000000000 $t
     /tmp/ccQlyisH.s:2291   .text.get_current_prog:0000000000000000 get_current_prog
     /tmp/ccQlyisH.s:2323   .text.get_current_prog:0000000000000020 $d
     /tmp/ccQlyisH.s:2329   .text.do_inc:0000000000000000 $t
     /tmp/ccQlyisH.s:2337   .text.do_inc:0000000000000000 do_inc
     /tmp/ccQlyisH.s:2417   .text.do_inc:0000000000000044 $d
                            *COM*:0000000000000004 PcWrapped
     /tmp/ccQlyisH.s:2422   .text.user_pc.part.0:0000000000000000 $t
     /tmp/ccQlyisH.s:2429   .text.user_pc.part.0:0000000000000000 user_pc.part.0
     /tmp/ccQlyisH.s:2499   .text.user_pc.part.0:0000000000000034 $d
     /tmp/ccQlyisH.s:2504   .rodata.print_step.str1.4:0000000000000000 $d
     /tmp/ccQlyisH.s:2508   .text.print_step:0000000000000000 $t
     /tmp/ccQlyisH.s:2515   .text.print_step:0000000000000000 print_step
     /tmp/ccQlyisH.s:2684   .text.print_step:0000000000000098 $d
                            *COM*:0000000000000019 TraceBuffer
     /tmp/ccQlyisH.s:2695   .text.do_dec:0000000000000000 $t
     /tmp/ccQlyisH.s:2703   .text.do_dec:0000000000000000 do_dec
     /tmp/ccQlyisH.s:2785   .text.do_dec:0000000000000048 $d
     /tmp/ccQlyisH.s:2790   .text.update_program_bounds:0000000000000000 $t
     /tmp/ccQlyisH.s:2798   .text.update_program_bounds:0000000000000000 update_program_bounds
     /tmp/ccQlyisH.s:2951   .text.update_program_bounds:000000000000008c $d
     /tmp/ccQlyisH.s:2958   .text.set_pc:0000000000000000 $t
     /tmp/ccQlyisH.s:2966   .text.set_pc:0000000000000000 set_pc
     /tmp/ccQlyisH.s:3200   .text.set_pc:00000000000000a4 $d
     /tmp/ccQlyisH.s:3209   .text.incpc:0000000000000000 $t
     /tmp/ccQlyisH.s:3217   .text.incpc:0000000000000000 incpc
     /tmp/ccQlyisH.s:3271   .text.incpc:0000000000000024 $d
     /tmp/ccQlyisH.s:3277   .text.decpc:0000000000000000 $t
     /tmp/ccQlyisH.s:3285   .text.decpc:0000000000000000 decpc
     /tmp/ccQlyisH.s:3340   .text.decpc:0000000000000024 $d
     /tmp/ccQlyisH.s:3347   .text.fin_tst.part.0:0000000000000000 $t
     /tmp/ccQlyisH.s:3354   .text.fin_tst.part.0:0000000000000000 fin_tst.part.0
     /tmp/ccQlyisH.s:3387   .text.do_rtn:0000000000000000 $t
     /tmp/ccQlyisH.s:3394   .text.do_rtn:0000000000000000 do_rtn
     /tmp/ccQlyisH.s:3572   .text.do_rtn:000000000000008c $d
                            *COM*:0000000000000004 Running
     /tmp/ccQlyisH.s:3581   .text.user_pc:0000000000000000 $t
     /tmp/ccQlyisH.s:3589   .text.user_pc:0000000000000000 user_pc
     /tmp/ccQlyisH.s:3621   .text.find_user_pc:0000000000000000 $t
     /tmp/ccQlyisH.s:3629   .text.find_user_pc:0000000000000000 find_user_pc
     /tmp/ccQlyisH.s:3737   .text.find_user_pc:000000000000004c $d
     /tmp/ccQlyisH.s:3743   .text.report_err:0000000000000000 $t
     /tmp/ccQlyisH.s:3751   .text.report_err:0000000000000000 report_err
     /tmp/ccQlyisH.s:3810   .text.report_err:000000000000001c $d
     /tmp/ccQlyisH.s:3815   .text.report_warn:0000000000000000 $t
     /tmp/ccQlyisH.s:3823   .text.report_warn:0000000000000000 report_warn
     /tmp/ccQlyisH.s:3943   .text.report_warn:0000000000000048 $d
     /tmp/ccQlyisH.s:3952   .text.bad_mode_error:0000000000000000 $t
     /tmp/ccQlyisH.s:3960   .text.bad_mode_error:0000000000000000 bad_mode_error
     /tmp/ccQlyisH.s:4001   .text.bad_mode_error:000000000000000c $d
ARM GAS  /tmp/ccQlyisH.s 			page 895


     /tmp/ccQlyisH.s:4006   .text.cmderr:0000000000000000 $t
     /tmp/ccQlyisH.s:4014   .text.cmderr:0000000000000000 cmderr
     /tmp/ccQlyisH.s:4071   .text.cmderr:0000000000000010 $d
     /tmp/ccQlyisH.s:4080   .text.cmdmsg:0000000000000000 $t
     /tmp/ccQlyisH.s:4088   .text.cmdmsg:0000000000000000 cmdmsg
     /tmp/ccQlyisH.s:4104   .text.rarg_roundingmode:0000000000000000 $t
     /tmp/ccQlyisH.s:4112   .text.rarg_roundingmode:0000000000000000 rarg_roundingmode
     /tmp/ccQlyisH.s:4134   .text.rarg_roundingmode:0000000000000014 $d
     /tmp/ccQlyisH.s:4139   .text.packed_from_number:0000000000000000 $t
     /tmp/ccQlyisH.s:4147   .text.packed_from_number:0000000000000000 packed_from_number
     /tmp/ccQlyisH.s:4214   .text.packed_from_number:0000000000000034 $d
     /tmp/ccQlyisH.s:4220   .text.packed128_from_number:0000000000000000 $t
     /tmp/ccQlyisH.s:4228   .text.packed128_from_number:0000000000000000 packed128_from_number
     /tmp/ccQlyisH.s:4295   .text.packed128_from_number:0000000000000034 $d
     /tmp/ccQlyisH.s:4301   .text.check_special:0000000000000000 $t
     /tmp/ccQlyisH.s:4308   .text.check_special:0000000000000000 check_special
     /tmp/ccQlyisH.s:4535   .text.check_special:00000000000000a0 $d
     /tmp/ccQlyisH.s:4541   .text.packed_from_packed128:0000000000000000 $t
     /tmp/ccQlyisH.s:4549   .text.packed_from_packed128:0000000000000000 packed_from_packed128
     /tmp/ccQlyisH.s:4592   .text.packed128_from_packed:0000000000000000 $t
     /tmp/ccQlyisH.s:4600   .text.packed128_from_packed:0000000000000000 packed128_from_packed
     /tmp/ccQlyisH.s:4643   .text.stack_size:0000000000000000 $t
     /tmp/ccQlyisH.s:4651   .text.stack_size:0000000000000000 stack_size
     /tmp/ccQlyisH.s:4702   .text.stack_size:0000000000000030 $d
     /tmp/ccQlyisH.s:4708   .text.copyreg:0000000000000000 $t
     /tmp/ccQlyisH.s:4716   .text.copyreg:0000000000000000 copyreg
     /tmp/ccQlyisH.s:4749   .text.copyreg:000000000000001c $d
     /tmp/ccQlyisH.s:4754   .text.set_lift:0000000000000000 $t
     /tmp/ccQlyisH.s:4762   .text.set_lift:0000000000000000 set_lift
     /tmp/ccQlyisH.s:4780   .text.set_lift:000000000000000c $d
     /tmp/ccQlyisH.s:4785   .text.is_dblmode:0000000000000000 $t
     /tmp/ccQlyisH.s:4793   .text.is_dblmode:0000000000000000 is_dblmode
     /tmp/ccQlyisH.s:4815   .text.is_dblmode:000000000000001c $d
     /tmp/ccQlyisH.s:4820   .text.is_usrdblmode:0000000000000000 $t
     /tmp/ccQlyisH.s:4828   .text.is_usrdblmode:0000000000000000 is_usrdblmode
     /tmp/ccQlyisH.s:4870   .text.is_usrdblmode:000000000000002c $d
     /tmp/ccQlyisH.s:4876   .text.s_to_i:0000000000000000 $t
     /tmp/ccQlyisH.s:4884   .text.s_to_i:0000000000000000 s_to_i
     /tmp/ccQlyisH.s:5032   .text.digit:0000000000000000 $t
     /tmp/ccQlyisH.s:5039   .text.digit:0000000000000000 digit
     /tmp/ccQlyisH.s:5584   .text.digit:0000000000000184 $d
     /tmp/ccQlyisH.s:5591   .text.s_to_ull:0000000000000000 $t
     /tmp/ccQlyisH.s:5599   .text.s_to_ull:0000000000000000 s_to_ull
     /tmp/ccQlyisH.s:5693   .text.get_cmdline:0000000000000000 $t
     /tmp/ccQlyisH.s:5701   .text.get_cmdline:0000000000000000 get_cmdline
     /tmp/ccQlyisH.s:5729   .text.get_cmdline:0000000000000014 $d
     /tmp/ccQlyisH.s:5734   .text.is_bad_cmdline:0000000000000000 $t
     /tmp/ccQlyisH.s:5742   .text.is_bad_cmdline:0000000000000000 is_bad_cmdline
     /tmp/ccQlyisH.s:5757   .text.get_flash_reg_n:0000000000000000 $t
     /tmp/ccQlyisH.s:5765   .text.get_flash_reg_n:0000000000000000 get_flash_reg_n
     /tmp/ccQlyisH.s:5792   .text.get_flash_reg_n:000000000000001c $d
     /tmp/ccQlyisH.s:5797   .text.get_const:0000000000000000 $t
     /tmp/ccQlyisH.s:5805   .text.get_const:0000000000000000 get_const
     /tmp/ccQlyisH.s:5953   .text.get_const:0000000000000074 $d
     /tmp/ccQlyisH.s:5961   .text.get_reg_n:0000000000000000 $t
     /tmp/ccQlyisH.s:5969   .text.get_reg_n:0000000000000000 get_reg_n
     /tmp/ccQlyisH.s:6189   .text.get_reg_n:00000000000000a8 $d
ARM GAS  /tmp/ccQlyisH.s 			page 896


     /tmp/ccQlyisH.s:6196   .text.get_stack:0000000000000000 $t
     /tmp/ccQlyisH.s:6204   .text.get_stack:0000000000000000 get_stack
     /tmp/ccQlyisH.s:6224   .text.lift:0000000000000000 $t
     /tmp/ccQlyisH.s:6232   .text.lift:0000000000000000 lift
     /tmp/ccQlyisH.s:6411   .text.lift:0000000000000064 $d
     /tmp/ccQlyisH.s:6419   .text.lift_if_enabled:0000000000000000 $t
     /tmp/ccQlyisH.s:6427   .text.lift_if_enabled:0000000000000000 lift_if_enabled
     /tmp/ccQlyisH.s:6457   .text.lift_if_enabled:0000000000000010 $d
     /tmp/ccQlyisH.s:6462   .text.lift2_if_enabled:0000000000000000 $t
     /tmp/ccQlyisH.s:6469   .text.lift2_if_enabled:0000000000000000 lift2_if_enabled
     /tmp/ccQlyisH.s:6580   .text.lift2_if_enabled:0000000000000040 $d
     /tmp/ccQlyisH.s:6589   .text.lower:0000000000000000 $t
     /tmp/ccQlyisH.s:6596   .text.lower:0000000000000000 lower
     /tmp/ccQlyisH.s:6778   .text.lower:000000000000006c $d
     /tmp/ccQlyisH.s:6786   .text.get_stack_top:0000000000000000 $t
     /tmp/ccQlyisH.s:6793   .text.get_stack_top:0000000000000000 get_stack_top
     /tmp/ccQlyisH.s:6878   .text.get_stack_top:0000000000000034 $d
     /tmp/ccQlyisH.s:6886   .text.roll_down:0000000000000000 $t
     /tmp/ccQlyisH.s:6894   .text.roll_down:0000000000000000 roll_down
     /tmp/ccQlyisH.s:7012   .text.roll_down:000000000000004c $d
                            *COM*:0000000000000004 StackBase
     /tmp/ccQlyisH.s:7018   .text.cpx_roll_down:0000000000000000 $t
     /tmp/ccQlyisH.s:7026   .text.cpx_roll_down:0000000000000000 cpx_roll_down
     /tmp/ccQlyisH.s:7086   .text.cpx_roll_down:000000000000002c $d
     /tmp/ccQlyisH.s:7092   .text.roll_up:0000000000000000 $t
     /tmp/ccQlyisH.s:7100   .text.roll_up:0000000000000000 roll_up
     /tmp/ccQlyisH.s:7227   .text.roll_up:000000000000004c $d
     /tmp/ccQlyisH.s:7233   .text.cpx_roll_up:0000000000000000 $t
     /tmp/ccQlyisH.s:7241   .text.cpx_roll_up:0000000000000000 cpx_roll_up
     /tmp/ccQlyisH.s:7301   .text.cpx_roll_up:000000000000002c $d
     /tmp/ccQlyisH.s:7307   .text.fill:0000000000000000 $t
     /tmp/ccQlyisH.s:7315   .text.fill:0000000000000000 fill
     /tmp/ccQlyisH.s:7470   .text.fill:0000000000000064 $d
     /tmp/ccQlyisH.s:7479   .text.lower2:0000000000000000 $t
     /tmp/ccQlyisH.s:7486   .text.lower2:0000000000000000 lower2
     /tmp/ccQlyisH.s:7668   .text.lower2:000000000000006c $d
     /tmp/ccQlyisH.s:7676   .text.drop:0000000000000000 $t
     /tmp/ccQlyisH.s:7684   .text.drop:0000000000000000 drop
     /tmp/ccQlyisH.s:7727   .text.drop:000000000000001c $d
     /tmp/ccQlyisH.s:7732   .text.copyreg_n:0000000000000000 $t
     /tmp/ccQlyisH.s:7740   .text.copyreg_n:0000000000000000 copyreg_n
     /tmp/ccQlyisH.s:7824   .text.copyreg_n:0000000000000038 $d
     /tmp/ccQlyisH.s:7831   .text.setlastX:0000000000000000 $t
     /tmp/ccQlyisH.s:7839   .text.setlastX:0000000000000000 setlastX
     /tmp/ccQlyisH.s:7855   .text.setlastXY:0000000000000000 $t
     /tmp/ccQlyisH.s:7862   .text.setlastXY:0000000000000000 setlastXY
     /tmp/ccQlyisH.s:7905   .text.getRegister:0000000000000000 $t
     /tmp/ccQlyisH.s:7913   .text.getRegister:0000000000000000 getRegister
     /tmp/ccQlyisH.s:7975   .text.getRegister:0000000000000030 $d
     /tmp/ccQlyisH.s:7980   .text.getX:0000000000000000 $t
     /tmp/ccQlyisH.s:7988   .text.getX:0000000000000000 getX
     /tmp/ccQlyisH.s:8006   .text.getY:0000000000000000 $t
     /tmp/ccQlyisH.s:8014   .text.getY:0000000000000000 getY
     /tmp/ccQlyisH.s:8031   .text.getXY:0000000000000000 $t
     /tmp/ccQlyisH.s:8039   .text.getXY:0000000000000000 getXY
     /tmp/ccQlyisH.s:8100   .text.getXYZ:0000000000000000 $t
     /tmp/ccQlyisH.s:8108   .text.getXYZ:0000000000000000 getXYZ
ARM GAS  /tmp/ccQlyisH.s 			page 897


     /tmp/ccQlyisH.s:8201   .text.getYZ:0000000000000000 $t
     /tmp/ccQlyisH.s:8209   .text.getYZ:0000000000000000 getYZ
     /tmp/ccQlyisH.s:8270   .text.getXYZT:0000000000000000 $t
     /tmp/ccQlyisH.s:8278   .text.getXYZT:0000000000000000 getXYZT
     /tmp/ccQlyisH.s:8324   .text.storcl_op:0000000000000000 $t
     /tmp/ccQlyisH.s:8331   .text.storcl_op:0000000000000000 storcl_op
     /tmp/ccQlyisH.s:8405   .text.storcl_op:000000000000002c $d
     /tmp/ccQlyisH.s:8412   .text.storcl_op:0000000000000032 $t
     /tmp/ccQlyisH.s:8524   .text.storcl_cop:0000000000000000 $t
     /tmp/ccQlyisH.s:8531   .text.storcl_cop:0000000000000000 storcl_cop
     /tmp/ccQlyisH.s:8641   .text.storcl_cop:0000000000000040 $d
     /tmp/ccQlyisH.s:8646   .text.storcl_cop:0000000000000044 $t
     /tmp/ccQlyisH.s:8759   .text.cpx_enter:0000000000000000 $t
     /tmp/ccQlyisH.s:8767   .text.cpx_enter:0000000000000000 cpx_enter
     /tmp/ccQlyisH.s:8857   .text.cpx_enter:0000000000000048 $d
     /tmp/ccQlyisH.s:8863   .text.cpx_fill:0000000000000000 $t
     /tmp/ccQlyisH.s:8871   .text.cpx_fill:0000000000000000 cpx_fill
     /tmp/ccQlyisH.s:9072   .text.cpx_fill:0000000000000084 $d
     /tmp/ccQlyisH.s:9082   .text.setRegister:0000000000000000 $t
     /tmp/ccQlyisH.s:9090   .text.setRegister:0000000000000000 setRegister
     /tmp/ccQlyisH.s:9185   .text.setRegister:000000000000004c $d
                            *COM*:0000000000000018 Ctx
     /tmp/ccQlyisH.s:9191   .text.setX:0000000000000000 $t
     /tmp/ccQlyisH.s:9199   .text.setX:0000000000000000 setX
     /tmp/ccQlyisH.s:9221   .text.rarg_round:0000000000000000 $t
     /tmp/ccQlyisH.s:9229   .text.rarg_round:0000000000000000 rarg_round
     /tmp/ccQlyisH.s:9410   .text.rarg_round:0000000000000064 $d
     /tmp/ccQlyisH.s:9417   .text.setY:0000000000000000 $t
     /tmp/ccQlyisH.s:9425   .text.setY:0000000000000000 setY
     /tmp/ccQlyisH.s:9447   .text.setXY:0000000000000000 $t
     /tmp/ccQlyisH.s:9455   .text.setXY:0000000000000000 setXY
     /tmp/ccQlyisH.s:9517   .text.setXY:0000000000000028 $d
     /tmp/ccQlyisH.s:9522   .text.convert_regK:0000000000000000 $t
     /tmp/ccQlyisH.s:9530   .text.convert_regK:0000000000000000 convert_regK
     /tmp/ccQlyisH.s:9706   .text.convert_regK:00000000000000ac $d
     /tmp/ccQlyisH.s:9716   .text.cpx_nop:0000000000000000 $t
     /tmp/ccQlyisH.s:9724   .text.cpx_nop:0000000000000000 cpx_nop
     /tmp/ccQlyisH.s:9749   .text.cpx_nop:0000000000000016 $d
     /tmp/ccQlyisH.s:9761   .text.cpx_nop:0000000000000022 $t
     /tmp/ccQlyisH.s:10033  .text.cpx_nop:0000000000000150 $d
     /tmp/ccQlyisH.s:10040  .text.get_reg_n_int:0000000000000000 $t
     /tmp/ccQlyisH.s:10048  .text.get_reg_n_int:0000000000000000 get_reg_n_int
     /tmp/ccQlyisH.s:10085  .text.storcl_intop:0000000000000000 $t
     /tmp/ccQlyisH.s:10092  .text.storcl_intop:0000000000000000 storcl_intop
     /tmp/ccQlyisH.s:10184  .text.storcl_intop:0000000000000038 $d
     /tmp/ccQlyisH.s:10190  .text.storcl_intop:000000000000003e $t
     /tmp/ccQlyisH.s:10292  .text.incdec:0000000000000000 $t
     /tmp/ccQlyisH.s:10299  .text.incdec:0000000000000000 incdec
     /tmp/ccQlyisH.s:10480  .text.incdec:0000000000000094 $d
     /tmp/ccQlyisH.s:10487  .text.set_reg_n_int:0000000000000000 $t
     /tmp/ccQlyisH.s:10495  .text.set_reg_n_int:0000000000000000 set_reg_n_int
     /tmp/ccQlyisH.s:10528  .text.get_reg_n_int_sgn:0000000000000000 $t
     /tmp/ccQlyisH.s:10536  .text.get_reg_n_int_sgn:0000000000000000 get_reg_n_int_sgn
     /tmp/ccQlyisH.s:10616  .text.get_reg_n_int_sgn:0000000000000034 $d
     /tmp/ccQlyisH.s:10621  .text.get_keycode_from_reg:0000000000000000 $t
     /tmp/ccQlyisH.s:10628  .text.get_keycode_from_reg:0000000000000000 get_keycode_from_reg
     /tmp/ccQlyisH.s:10708  .text.get_keycode_from_reg:000000000000002c $d
ARM GAS  /tmp/ccQlyisH.s 			page 898


     /tmp/ccQlyisH.s:10713  .text.getX_int:0000000000000000 $t
     /tmp/ccQlyisH.s:10721  .text.getX_int:0000000000000000 getX_int
     /tmp/ccQlyisH.s:10737  .text.getX_int_sgn:0000000000000000 $t
     /tmp/ccQlyisH.s:10745  .text.getX_int_sgn:0000000000000000 getX_int_sgn
     /tmp/ccQlyisH.s:10767  .text.set_reg_n_int_sgn:0000000000000000 $t
     /tmp/ccQlyisH.s:10775  .text.set_reg_n_int_sgn:0000000000000000 set_reg_n_int_sgn
     /tmp/ccQlyisH.s:10901  .text.set_reg_n_int_sgn:0000000000000060 $d
     /tmp/ccQlyisH.s:10907  .text.op_roundingmode:0000000000000000 $t
     /tmp/ccQlyisH.s:10915  .text.op_roundingmode:0000000000000000 op_roundingmode
     /tmp/ccQlyisH.s:10979  .text.op_roundingmode:0000000000000024 $d
     /tmp/ccQlyisH.s:10984  .text.register_from_int:0000000000000000 $t
     /tmp/ccQlyisH.s:10991  .text.register_from_int:0000000000000000 register_from_int
     /tmp/ccQlyisH.s:11088  .text.register_from_int:000000000000005c $d
     /tmp/ccQlyisH.s:11094  .text.int_from_register:0000000000000000 $t
     /tmp/ccQlyisH.s:11101  .text.int_from_register:0000000000000000 int_from_register
     /tmp/ccQlyisH.s:11172  .text.int_from_register:0000000000000044 $d
     /tmp/ccQlyisH.s:11177  .text.switch_to_int:0000000000000000 $t
     /tmp/ccQlyisH.s:11184  .text.switch_to_int:0000000000000000 switch_to_int
     /tmp/ccQlyisH.s:11335  .text.switch_to_int:0000000000000078 $d
     /tmp/ccQlyisH.s:11343  .text.process_cmdline.part.0:0000000000000000 $t
     /tmp/ccQlyisH.s:11350  .text.process_cmdline.part.0:0000000000000000 process_cmdline.part.0
     /tmp/ccQlyisH.s:11937  .text.process_cmdline.part.0:000000000000023c $d
                            *COM*:0000000000000004 XromRunning
     /tmp/ccQlyisH.s:11948  .text.process_cmdline:0000000000000000 $t
     /tmp/ccQlyisH.s:11956  .text.process_cmdline:0000000000000000 process_cmdline
     /tmp/ccQlyisH.s:11978  .text.process_cmdline:000000000000000c $d
     /tmp/ccQlyisH.s:11983  .text.cpx_pi:0000000000000000 $t
     /tmp/ccQlyisH.s:11991  .text.cpx_pi:0000000000000000 cpx_pi
     /tmp/ccQlyisH.s:12229  .text.cpx_pi:00000000000000bc $d
     /tmp/ccQlyisH.s:12237  .text.process_cmdline_set_lift:0000000000000000 $t
     /tmp/ccQlyisH.s:12245  .text.process_cmdline_set_lift:0000000000000000 process_cmdline_set_lift
     /tmp/ccQlyisH.s:12311  .text.process_cmdline_set_lift:0000000000000020 $d
     /tmp/ccQlyisH.s:12316  .text.setX_int:0000000000000000 $t
     /tmp/ccQlyisH.s:12324  .text.setX_int:0000000000000000 setX_int
     /tmp/ccQlyisH.s:12375  .text.do_rcl:0000000000000000 $t
     /tmp/ccQlyisH.s:12382  .text.do_rcl:0000000000000000 do_rcl
     /tmp/ccQlyisH.s:12720  .text.do_rcl:00000000000000cc $d
     /tmp/ccQlyisH.s:12731  .text.setX_int_sgn:0000000000000000 $t
     /tmp/ccQlyisH.s:12739  .text.setX_int_sgn:0000000000000000 setX_int_sgn
     /tmp/ccQlyisH.s:12773  .text.zero_regs:0000000000000000 $t
     /tmp/ccQlyisH.s:12781  .text.zero_regs:0000000000000000 zero_regs
     /tmp/ccQlyisH.s:12819  .text.zero_regs:0000000000000024 $d
     /tmp/ccQlyisH.s:12824  .text.move_regs:0000000000000000 $t
     /tmp/ccQlyisH.s:12832  .text.move_regs:0000000000000000 move_regs
     /tmp/ccQlyisH.s:12885  .text.move_regs:0000000000000024 $d
     /tmp/ccQlyisH.s:12890  .text.zero_X:0000000000000000 $t
     /tmp/ccQlyisH.s:12898  .text.zero_X:0000000000000000 zero_X
     /tmp/ccQlyisH.s:12913  .text.zero_X:0000000000000008 $d
     /tmp/ccQlyisH.s:12918  .text.zero_Y:0000000000000000 $t
     /tmp/ccQlyisH.s:12926  .text.zero_Y:0000000000000000 zero_Y
     /tmp/ccQlyisH.s:12954  .text.clrx:0000000000000000 $t
     /tmp/ccQlyisH.s:12962  .text.clrx:0000000000000000 clrx
     /tmp/ccQlyisH.s:13078  .text.clrx:000000000000006c $d
     /tmp/ccQlyisH.s:13085  .text.clrstk:0000000000000000 $t
     /tmp/ccQlyisH.s:13093  .text.clrstk:0000000000000000 clrstk
     /tmp/ccQlyisH.s:13218  .text.clrstk:000000000000005c $d
     /tmp/ccQlyisH.s:13228  .text.clrreg:0000000000000000 $t
ARM GAS  /tmp/ccQlyisH.s 			page 899


     /tmp/ccQlyisH.s:13236  .text.clrreg:0000000000000000 clrreg
     /tmp/ccQlyisH.s:13741  .text.clrreg:000000000000011c $d
     /tmp/ccQlyisH.s:13751  .text.clrretstk:0000000000000000 $t
     /tmp/ccQlyisH.s:13759  .text.clrretstk:0000000000000000 clrretstk
     /tmp/ccQlyisH.s:13780  .text.clrretstk:0000000000000010 $d
     /tmp/ccQlyisH.s:13785  .text.clrretstk_pc:0000000000000000 $t
     /tmp/ccQlyisH.s:13793  .text.clrretstk_pc:0000000000000000 clrretstk_pc
     /tmp/ccQlyisH.s:13858  .text.clrretstk_pc:0000000000000020 $d
     /tmp/ccQlyisH.s:13863  .text.cmdconst:0000000000000000 $t
     /tmp/ccQlyisH.s:13871  .text.cmdconst:0000000000000000 cmdconst
     /tmp/ccQlyisH.s:14166  .text.cmdconst:00000000000000c4 $d
     /tmp/ccQlyisH.s:14176  .text.cmdsto:0000000000000000 $t
     /tmp/ccQlyisH.s:14184  .text.cmdsto:0000000000000000 cmdsto
     /tmp/ccQlyisH.s:14374  .text.cmdsto:0000000000000078 $d
     /tmp/ccQlyisH.s:14380  .text.cmdrcl:0000000000000000 $t
     /tmp/ccQlyisH.s:14388  .text.cmdrcl:0000000000000000 cmdrcl
     /tmp/ccQlyisH.s:14404  .text.cmdcsto:0000000000000000 $t
     /tmp/ccQlyisH.s:14412  .text.cmdcsto:0000000000000000 cmdcsto
     /tmp/ccQlyisH.s:14689  .text.cmdcsto:00000000000000c0 $d
     /tmp/ccQlyisH.s:14697  .text.cmdcrcl:0000000000000000 $t
     /tmp/ccQlyisH.s:14705  .text.cmdcrcl:0000000000000000 cmdcrcl
     /tmp/ccQlyisH.s:15077  .text.cmdcrcl:00000000000000f8 $d
     /tmp/ccQlyisH.s:15087  .text.cmdircl:0000000000000000 $t
     /tmp/ccQlyisH.s:15095  .text.cmdircl:0000000000000000 cmdircl
     /tmp/ccQlyisH.s:15139  .text.cmdircl:000000000000001c $d
     /tmp/ccQlyisH.s:15144  .text.cmdrrcl:0000000000000000 $t
     /tmp/ccQlyisH.s:15152  .text.cmdrrcl:0000000000000000 cmdrrcl
     /tmp/ccQlyisH.s:15310  .text.cmdrrcl:0000000000000080 $d
     /tmp/ccQlyisH.s:15320  .text.swap_reg:0000000000000000 $t
     /tmp/ccQlyisH.s:15328  .text.swap_reg:0000000000000000 swap_reg
     /tmp/ccQlyisH.s:15469  .text.swap_reg:0000000000000060 $d
     /tmp/ccQlyisH.s:15474  .text.cmdswap:0000000000000000 $t
     /tmp/ccQlyisH.s:15482  .text.cmdswap:0000000000000000 cmdswap
     /tmp/ccQlyisH.s:15629  .text.cmdswap:0000000000000094 $d
     /tmp/ccQlyisH.s:15635  .text.cmdview:0000000000000000 $t
     /tmp/ccQlyisH.s:15643  .text.cmdview:0000000000000000 cmdview
     /tmp/ccQlyisH.s:15727  .text.cmdview:0000000000000050 $d
                            *COM*:0000000000000004 ShowRegister
     /tmp/ccQlyisH.s:15734  .text.get_stack_size:0000000000000000 $t
     /tmp/ccQlyisH.s:15742  .text.get_stack_size:0000000000000000 get_stack_size
     /tmp/ccQlyisH.s:15840  .text.get_stack_size:0000000000000040 $d
     /tmp/ccQlyisH.s:15848  .text.get_word_size:0000000000000000 $t
     /tmp/ccQlyisH.s:15856  .text.get_word_size:0000000000000000 get_word_size
     /tmp/ccQlyisH.s:15899  .text.get_sign_mode:0000000000000000 $t
     /tmp/ccQlyisH.s:15907  .text.get_sign_mode:0000000000000000 get_sign_mode
     /tmp/ccQlyisH.s:15963  .text.get_sign_mode:0000000000000024 $d
     /tmp/ccQlyisH.s:15968  .text.get_base:0000000000000000 $t
     /tmp/ccQlyisH.s:15976  .text.get_base:0000000000000000 get_base
     /tmp/ccQlyisH.s:16019  .text.DM42_Ticker:0000000000000000 $t
     /tmp/ccQlyisH.s:16027  .text.DM42_Ticker:0000000000000000 DM42_Ticker
     /tmp/ccQlyisH.s:16057  .text.DM42_Ticker:0000000000000014 $d
     /tmp/ccQlyisH.s:16062  .text.op_ticks:0000000000000000 $t
     /tmp/ccQlyisH.s:16070  .text.op_ticks:0000000000000000 op_ticks
     /tmp/ccQlyisH.s:16147  .text.op_ticks:0000000000000024 $d
     /tmp/ccQlyisH.s:16152  .text.op_voltage:0000000000000000 $t
     /tmp/ccQlyisH.s:16160  .text.op_voltage:0000000000000000 op_voltage
     /tmp/ccQlyisH.s:16263  .text.op_voltage:0000000000000058 $d
ARM GAS  /tmp/ccQlyisH.s 			page 900


     /tmp/ccQlyisH.s:16270  .text.free_mem:0000000000000000 $t
     /tmp/ccQlyisH.s:16278  .text.free_mem:0000000000000000 free_mem
     /tmp/ccQlyisH.s:16302  .text.free_mem:0000000000000010 $d
     /tmp/ccQlyisH.s:16308  .text.free_flash:0000000000000000 $t
     /tmp/ccQlyisH.s:16316  .text.free_flash:0000000000000000 free_flash
     /tmp/ccQlyisH.s:16335  .text.free_flash:0000000000000010 $d
     /tmp/ccQlyisH.s:16340  .text.get_mem:0000000000000000 $t
     /tmp/ccQlyisH.s:16348  .text.get_mem:0000000000000000 get_mem
     /tmp/ccQlyisH.s:16599  .text.get_mem:000000000000009c $d
     /tmp/ccQlyisH.s:16607  .text.cmdputkey:0000000000000000 $t
     /tmp/ccQlyisH.s:16615  .text.cmdputkey:0000000000000000 cmdputkey
     /tmp/ccQlyisH.s:16697  .text.cmdputkey:0000000000000034 $d
     /tmp/ccQlyisH.s:16703  .text.cmdkeytype:0000000000000000 $t
     /tmp/ccQlyisH.s:16711  .text.cmdkeytype:0000000000000000 cmdkeytype
     /tmp/ccQlyisH.s:16845  .text.cmdkeytype:0000000000000048 $d
     /tmp/ccQlyisH.s:16854  .rodata.op_query_xtal.str1.4:0000000000000000 $d
     /tmp/ccQlyisH.s:16858  .text.op_query_xtal:0000000000000000 $t
     /tmp/ccQlyisH.s:16866  .text.op_query_xtal:0000000000000000 op_query_xtal
     /tmp/ccQlyisH.s:16904  .text.op_query_xtal:0000000000000014 $d
     /tmp/ccQlyisH.s:16912  .rodata.op_query_print.str1.4:0000000000000000 $d
     /tmp/ccQlyisH.s:16916  .text.op_query_print:0000000000000000 $t
     /tmp/ccQlyisH.s:16924  .text.op_query_print:0000000000000000 op_query_print
     /tmp/ccQlyisH.s:16969  .text.op_query_print:0000000000000018 $d
     /tmp/ccQlyisH.s:16979  .text.cmdstostk:0000000000000000 $t
     /tmp/ccQlyisH.s:16987  .text.cmdstostk:0000000000000000 cmdstostk
     /tmp/ccQlyisH.s:17037  .text.cmdrclstk:0000000000000000 $t
     /tmp/ccQlyisH.s:17045  .text.cmdrclstk:0000000000000000 cmdrclstk
     /tmp/ccQlyisH.s:17098  .text.find_opcode_from:0000000000000000 $t
     /tmp/ccQlyisH.s:17106  .text.find_opcode_from:0000000000000000 find_opcode_from
     /tmp/ccQlyisH.s:17278  .text.find_opcode_from:000000000000006c $d
     /tmp/ccQlyisH.s:17283  .text.find_label_from:0000000000000000 $t
     /tmp/ccQlyisH.s:17291  .text.find_label_from:0000000000000000 find_label_from
     /tmp/ccQlyisH.s:17311  .text.op_rtn:0000000000000000 $t
     /tmp/ccQlyisH.s:17319  .text.op_rtn:0000000000000000 op_rtn
     /tmp/ccQlyisH.s:17353  .text.op_rtn:0000000000000020 $d
     /tmp/ccQlyisH.s:17359  .text.op_popusr:0000000000000000 $t
     /tmp/ccQlyisH.s:17367  .text.op_popusr:0000000000000000 op_popusr
     /tmp/ccQlyisH.s:17442  .text.op_popusr:0000000000000050 $d
                            *COM*:0000000000000004 XromUserPc
                            *COM*:0000000000000004 UserLocalRegs
     /tmp/ccQlyisH.s:17450  .text.findmultilbl:0000000000000000 $t
     /tmp/ccQlyisH.s:17458  .text.findmultilbl:0000000000000000 findmultilbl
     /tmp/ccQlyisH.s:17571  .text.findmultilbl:0000000000000048 $d
     /tmp/ccQlyisH.s:17576  .text.get_dispmode_digs:0000000000000000 $t
     /tmp/ccQlyisH.s:17584  .text.get_dispmode_digs:0000000000000000 get_dispmode_digs
     /tmp/ccQlyisH.s:17646  .text.get_dispmode_digs:000000000000002c $d
     /tmp/ccQlyisH.s:17651  .text.set_dispmode_digs:0000000000000000 $t
     /tmp/ccQlyisH.s:17659  .text.set_dispmode_digs:0000000000000000 set_dispmode_digs
     /tmp/ccQlyisH.s:17717  .text.set_dispmode_digs:0000000000000038 $d
     /tmp/ccQlyisH.s:17722  .text.convC2F:0000000000000000 $t
     /tmp/ccQlyisH.s:17730  .text.convC2F:0000000000000000 convC2F
     /tmp/ccQlyisH.s:17772  .text.convC2F:000000000000001c $d
     /tmp/ccQlyisH.s:17778  .text.convF2C:0000000000000000 $t
     /tmp/ccQlyisH.s:17786  .text.convF2C:0000000000000000 convF2C
     /tmp/ccQlyisH.s:17828  .text.convF2C:000000000000001c $d
     /tmp/ccQlyisH.s:17834  .text.convDB2AR:0000000000000000 $t
     /tmp/ccQlyisH.s:17842  .text.convDB2AR:0000000000000000 convDB2AR
ARM GAS  /tmp/ccQlyisH.s 			page 901


     /tmp/ccQlyisH.s:17884  .text.convDB2AR:000000000000001c $d
     /tmp/ccQlyisH.s:17889  .text.convAR2DB:0000000000000000 $t
     /tmp/ccQlyisH.s:17897  .text.convAR2DB:0000000000000000 convAR2DB
     /tmp/ccQlyisH.s:17938  .text.convAR2DB:000000000000001c $d
     /tmp/ccQlyisH.s:17943  .text.convDB2PR:0000000000000000 $t
     /tmp/ccQlyisH.s:17951  .text.convDB2PR:0000000000000000 convDB2PR
     /tmp/ccQlyisH.s:17992  .text.convPR2DB:0000000000000000 $t
     /tmp/ccQlyisH.s:18000  .text.convPR2DB:0000000000000000 convPR2DB
     /tmp/ccQlyisH.s:18041  .text.do_conv:0000000000000000 $t
     /tmp/ccQlyisH.s:18049  .text.do_conv:0000000000000000 do_conv
     /tmp/ccQlyisH.s:18141  .text.do_conv:0000000000000040 $d
     /tmp/ccQlyisH.s:18146  .text.cmdconv:0000000000000000 $t
     /tmp/ccQlyisH.s:18154  .text.cmdconv:0000000000000000 cmdconv
     /tmp/ccQlyisH.s:18242  .text.cmdconv:000000000000003c $d
     /tmp/ccQlyisH.s:18247  .text.fin_tst:0000000000000000 $t
     /tmp/ccQlyisH.s:18255  .text.fin_tst:0000000000000000 fin_tst
     /tmp/ccQlyisH.s:18313  .text.fin_tst:000000000000002c $d
     /tmp/ccQlyisH.s:18322  .text.check_mode:0000000000000000 $t
     /tmp/ccQlyisH.s:18330  .text.check_mode:0000000000000000 check_mode
     /tmp/ccQlyisH.s:18365  .text.check_mode:0000000000000024 $d
     /tmp/ccQlyisH.s:18370  .text.check_dblmode:0000000000000000 $t
     /tmp/ccQlyisH.s:18378  .text.check_dblmode:0000000000000000 check_dblmode
     /tmp/ccQlyisH.s:18411  .text.check_dblmode:000000000000001c $d
     /tmp/ccQlyisH.s:18416  .text.isTop:0000000000000000 $t
     /tmp/ccQlyisH.s:18424  .text.isTop:0000000000000000 isTop
     /tmp/ccQlyisH.s:18488  .text.isTop:0000000000000038 $d
     /tmp/ccQlyisH.s:18497  .text.cmdlblp:0000000000000000 $t
     /tmp/ccQlyisH.s:18505  .text.cmdlblp:0000000000000000 cmdlblp
     /tmp/ccQlyisH.s:18557  .text.cmdlblp:0000000000000024 $d
     /tmp/ccQlyisH.s:18562  .text.cmdmultilblp:0000000000000000 $t
     /tmp/ccQlyisH.s:18570  .text.cmdmultilblp:0000000000000000 cmdmultilblp
     /tmp/ccQlyisH.s:18605  .text.cmdkeyp:0000000000000000 $t
     /tmp/ccQlyisH.s:18613  .text.cmdkeyp:0000000000000000 cmdkeyp
     /tmp/ccQlyisH.s:18708  .text.cmdkeyp:0000000000000044 $d
     /tmp/ccQlyisH.s:18713  .text.do_tst:0000000000000000 $t
     /tmp/ccQlyisH.s:18720  .text.do_tst:0000000000000000 do_tst
     /tmp/ccQlyisH.s:18886  .text.do_tst:0000000000000064 $d
     /tmp/ccQlyisH.s:19174  .text.do_tst:0000000000000168 $d
     /tmp/ccQlyisH.s:19181  .text.do_ztst:0000000000000000 $t
     /tmp/ccQlyisH.s:19188  .text.do_ztst:0000000000000000 do_ztst
     /tmp/ccQlyisH.s:19478  .text.do_ztst:00000000000000b4 $d
     /tmp/ccQlyisH.s:19489  .text.check_zero:0000000000000000 $t
     /tmp/ccQlyisH.s:19497  .text.check_zero:0000000000000000 check_zero
     /tmp/ccQlyisH.s:19641  .text.check_zero:000000000000006c $d
     /tmp/ccQlyisH.s:19646  .text.cmdtest:0000000000000000 $t
     /tmp/ccQlyisH.s:19654  .text.cmdtest:0000000000000000 cmdtest
     /tmp/ccQlyisH.s:19675  .text.cmdztest:0000000000000000 $t
     /tmp/ccQlyisH.s:19683  .text.cmdztest:0000000000000000 cmdztest
     /tmp/ccQlyisH.s:19736  .text.cmdlincdec:0000000000000000 $t
     /tmp/ccQlyisH.s:19744  .text.cmdlincdec:0000000000000000 cmdlincdec
     /tmp/ccQlyisH.s:19765  .text.cmdloopz:0000000000000000 $t
     /tmp/ccQlyisH.s:19773  .text.cmdloopz:0000000000000000 cmdloopz
     /tmp/ccQlyisH.s:19806  .text.cmdloop:0000000000000000 $t
     /tmp/ccQlyisH.s:19814  .text.cmdloop:0000000000000000 cmdloop
     /tmp/ccQlyisH.s:20303  .text.cmdloop:00000000000001f4 $d
     /tmp/ccQlyisH.s:20309  .text.op_shift_digit:0000000000000000 $t
     /tmp/ccQlyisH.s:20317  .text.op_shift_digit:0000000000000000 op_shift_digit
ARM GAS  /tmp/ccQlyisH.s 			page 902


     /tmp/ccQlyisH.s:20481  .text.op_shift_digit:0000000000000060 $d
     /tmp/ccQlyisH.s:20487  .text.get_user_flag:0000000000000000 $t
     /tmp/ccQlyisH.s:20495  .text.get_user_flag:0000000000000000 get_user_flag
     /tmp/ccQlyisH.s:20533  .text.cmdflag:0000000000000000 $t
     /tmp/ccQlyisH.s:20541  .text.cmdflag:0000000000000000 cmdflag
     /tmp/ccQlyisH.s:20586  .text.cmdflag:0000000000000028 $d
     /tmp/ccQlyisH.s:20743  .text.put_user_flag:0000000000000000 $t
     /tmp/ccQlyisH.s:20751  .text.put_user_flag:0000000000000000 put_user_flag
     /tmp/ccQlyisH.s:20780  .text.clrflags:0000000000000000 $t
     /tmp/ccQlyisH.s:20788  .text.clrflags:0000000000000000 clrflags
     /tmp/ccQlyisH.s:20835  .text.clrflags:000000000000002c $d
     /tmp/ccQlyisH.s:20840  .text.intws:0000000000000000 $t
     /tmp/ccQlyisH.s:20848  .text.intws:0000000000000000 intws
     /tmp/ccQlyisH.s:21071  .text.intws:00000000000000e4 $d
     /tmp/ccQlyisH.s:21080  .text.get_maxdenom:0000000000000000 $t
     /tmp/ccQlyisH.s:21088  .text.get_maxdenom:0000000000000000 get_maxdenom
     /tmp/ccQlyisH.s:21116  .text.get_maxdenom:000000000000001c $d
     /tmp/ccQlyisH.s:21121  .rodata.op_2frac.str1.4:0000000000000000 $d
     /tmp/ccQlyisH.s:21131  .text.op_2frac:0000000000000000 $t
     /tmp/ccQlyisH.s:21139  .text.op_2frac:0000000000000000 op_2frac
     /tmp/ccQlyisH.s:21277  .text.op_2frac:0000000000000088 $d
     /tmp/ccQlyisH.s:21287  .text.op_fracdenom:0000000000000000 $t
     /tmp/ccQlyisH.s:21295  .text.op_fracdenom:0000000000000000 op_fracdenom
     /tmp/ccQlyisH.s:21450  .text.op_fracdenom:0000000000000080 $d
     /tmp/ccQlyisH.s:21455  .text.op_float:0000000000000000 $t
     /tmp/ccQlyisH.s:21463  .text.op_float:0000000000000000 op_float
     /tmp/ccQlyisH.s:21658  .text.op_float:00000000000000c4 $d
     /tmp/ccQlyisH.s:21669  .text.cmddisp:0000000000000000 $t
     /tmp/ccQlyisH.s:21677  .text.cmddisp:0000000000000000 cmddisp
     /tmp/ccQlyisH.s:21754  .text.cmddisp:0000000000000036 $d
     /tmp/ccQlyisH.s:21942  .text.cmddisp:00000000000000bc $d
     /tmp/ccQlyisH.s:21948  .text.set_int_base:0000000000000000 $t
     /tmp/ccQlyisH.s:21956  .text.set_int_base:0000000000000000 set_int_base
     /tmp/ccQlyisH.s:22063  .text.set_int_base:000000000000004c $d
     /tmp/ccQlyisH.s:22070  .text.op_fract:0000000000000000 $t
     /tmp/ccQlyisH.s:22078  .text.op_fract:0000000000000000 op_fract
     /tmp/ccQlyisH.s:22137  .text.op_fract:0000000000000040 $d
     /tmp/ccQlyisH.s:22142  .text.cmdsavem:0000000000000000 $t
     /tmp/ccQlyisH.s:22150  .text.cmdsavem:0000000000000000 cmdsavem
     /tmp/ccQlyisH.s:22184  .text.cmdsavem:0000000000000018 $d
     /tmp/ccQlyisH.s:22189  .text.set_entry:0000000000000000 $t
     /tmp/ccQlyisH.s:22197  .text.set_entry:0000000000000000 set_entry
     /tmp/ccQlyisH.s:22235  .text.set_entry:0000000000000020 $d
     /tmp/ccQlyisH.s:22242  .text.get_trig_mode:0000000000000000 $t
     /tmp/ccQlyisH.s:22250  .text.get_trig_mode:0000000000000000 get_trig_mode
     /tmp/ccQlyisH.s:22285  .text.get_trig_mode:0000000000000024 $d
     /tmp/ccQlyisH.s:22292  .text.cmdpause:0000000000000000 $t
     /tmp/ccQlyisH.s:22300  .text.cmdpause:0000000000000000 cmdpause
     /tmp/ccQlyisH.s:22340  .text.cmdpause:000000000000001c $d
                            *COM*:0000000000000001 Pause
     /tmp/ccQlyisH.s:22346  .text.op_setspeed:0000000000000000 $t
     /tmp/ccQlyisH.s:22354  .text.op_setspeed:0000000000000000 op_setspeed
     /tmp/ccQlyisH.s:22383  .text.op_setspeed:000000000000001c $d
     /tmp/ccQlyisH.s:22388  .text.op_prompt:0000000000000000 $t
     /tmp/ccQlyisH.s:22396  .text.op_prompt:0000000000000000 op_prompt
     /tmp/ccQlyisH.s:22468  .text.op_prompt:0000000000000028 $d
     /tmp/ccQlyisH.s:22474  .text.XisInt:0000000000000000 $t
ARM GAS  /tmp/ccQlyisH.s 			page 903


     /tmp/ccQlyisH.s:22482  .text.XisInt:0000000000000000 XisInt
     /tmp/ccQlyisH.s:22594  .text.XisInt:000000000000005c $d
     /tmp/ccQlyisH.s:22599  .text.XisEvenOrOdd:0000000000000000 $t
     /tmp/ccQlyisH.s:22607  .text.XisEvenOrOdd:0000000000000000 XisEvenOrOdd
     /tmp/ccQlyisH.s:22721  .text.XisEvenOrOdd:0000000000000060 $d
     /tmp/ccQlyisH.s:22726  .text.XisPrime:0000000000000000 $t
     /tmp/ccQlyisH.s:22734  .text.XisPrime:0000000000000000 XisPrime
     /tmp/ccQlyisH.s:22894  .text.XisPrime:000000000000007c $d
     /tmp/ccQlyisH.s:22900  .text.isInfinite:0000000000000000 $t
     /tmp/ccQlyisH.s:22908  .text.isInfinite:0000000000000000 isInfinite
     /tmp/ccQlyisH.s:22960  .text.isInfinite:000000000000002c $d
     /tmp/ccQlyisH.s:22965  .text.isNan:0000000000000000 $t
     /tmp/ccQlyisH.s:22973  .text.isNan:0000000000000000 isNan
     /tmp/ccQlyisH.s:23040  .text.isNan:000000000000003c $d
     /tmp/ccQlyisH.s:23045  .text.isSpecial:0000000000000000 $t
     /tmp/ccQlyisH.s:23053  .text.isSpecial:0000000000000000 isSpecial
     /tmp/ccQlyisH.s:23120  .text.isSpecial:000000000000003c $d
     /tmp/ccQlyisH.s:23125  .text.op_entryp:0000000000000000 $t
     /tmp/ccQlyisH.s:23133  .text.op_entryp:0000000000000000 op_entryp
     /tmp/ccQlyisH.s:23154  .text.op_entryp:0000000000000010 $d
     /tmp/ccQlyisH.s:23159  .text.reg_decode:0000000000000000 $t
     /tmp/ccQlyisH.s:23167  .text.reg_decode:0000000000000000 reg_decode
     /tmp/ccQlyisH.s:23971  .text.reg_decode:0000000000000218 $d
     /tmp/ccQlyisH.s:23985  .text.op_regcopy:0000000000000000 $t
     /tmp/ccQlyisH.s:23993  .text.op_regcopy:0000000000000000 op_regcopy
     /tmp/ccQlyisH.s:24096  .text.op_regcopy:0000000000000048 $d
     /tmp/ccQlyisH.s:24101  .text.op_regswap:0000000000000000 $t
     /tmp/ccQlyisH.s:24109  .text.op_regswap:0000000000000000 op_regswap
     /tmp/ccQlyisH.s:24243  .text.op_regswap:000000000000006c $d
     /tmp/ccQlyisH.s:24248  .text.op_regclr:0000000000000000 $t
     /tmp/ccQlyisH.s:24256  .text.op_regclr:0000000000000000 op_regclr
     /tmp/ccQlyisH.s:24337  .text.op_regclr:0000000000000044 $d
     /tmp/ccQlyisH.s:24342  .text.op_regsort:0000000000000000 $t
     /tmp/ccQlyisH.s:24350  .text.op_regsort:0000000000000000 op_regsort
     /tmp/ccQlyisH.s:24634  .text.reset_volatile_state:0000000000000000 $t
     /tmp/ccQlyisH.s:24642  .text.reset_volatile_state:0000000000000000 reset_volatile_state
     /tmp/ccQlyisH.s:24666  .text.reset_volatile_state:0000000000000010 $d
     /tmp/ccQlyisH.s:24671  .rodata.busy.str1.4:0000000000000000 $d
     /tmp/ccQlyisH.s:24675  .text.busy:0000000000000000 $t
     /tmp/ccQlyisH.s:24683  .text.busy:0000000000000000 busy
     /tmp/ccQlyisH.s:24722  .text.busy:0000000000000018 $d
                            *COM*:0000000000000004 Busy
     /tmp/ccQlyisH.s:24731  .text.intMonadic:0000000000000000 $t
     /tmp/ccQlyisH.s:24739  .text.intMonadic:0000000000000000 intMonadic
     /tmp/ccQlyisH.s:24968  .text.intMonadic:0000000000000084 $d
                            *COM*:0000000000000002 XeqOpCode
     /tmp/ccQlyisH.s:24978  .text.intDyadic:0000000000000000 $t
     /tmp/ccQlyisH.s:24986  .text.intDyadic:0000000000000000 intDyadic
     /tmp/ccQlyisH.s:25270  .text.intDyadic:00000000000000c0 $d
     /tmp/ccQlyisH.s:25280  .text.xeq_init_contexts:0000000000000000 $t
     /tmp/ccQlyisH.s:25288  .text.xeq_init_contexts:0000000000000000 xeq_init_contexts
     /tmp/ccQlyisH.s:25407  .text.xeq_init_contexts:0000000000000078 $d
                            *COM*:0000000000000004 ProgFree
     /tmp/ccQlyisH.s:25420  .text.not_running:0000000000000000 $t
     /tmp/ccQlyisH.s:25428  .text.not_running:0000000000000000 not_running
     /tmp/ccQlyisH.s:25483  .text.not_running:000000000000001c $d
     /tmp/ccQlyisH.s:25489  .text.set_running_off_sst:0000000000000000 $t
ARM GAS  /tmp/ccQlyisH.s 			page 904


     /tmp/ccQlyisH.s:25497  .text.set_running_off_sst:0000000000000000 set_running_off_sst
     /tmp/ccQlyisH.s:25514  .text.set_running_off_sst:0000000000000008 $d
     /tmp/ccQlyisH.s:25519  .text.set_running_on_sst:0000000000000000 $t
     /tmp/ccQlyisH.s:25527  .text.set_running_on_sst:0000000000000000 set_running_on_sst
     /tmp/ccQlyisH.s:25544  .text.set_running_on_sst:0000000000000008 $d
     /tmp/ccQlyisH.s:25549  .text.set_running_off:0000000000000000 $t
     /tmp/ccQlyisH.s:25557  .text.set_running_off:0000000000000000 set_running_off
     /tmp/ccQlyisH.s:25601  .text.set_running_off:000000000000001c $d
     /tmp/ccQlyisH.s:25607  .text.set_running_on:0000000000000000 $t
     /tmp/ccQlyisH.s:25615  .text.set_running_on:0000000000000000 set_running_on
     /tmp/ccQlyisH.s:25714  .text.set_running_on:0000000000000034 $d
     /tmp/ccQlyisH.s:25722  .text.gsbgto:0000000000000000 $t
     /tmp/ccQlyisH.s:25729  .text.gsbgto:0000000000000000 gsbgto
     /tmp/ccQlyisH.s:25908  .text.gsbgto:000000000000008c $d
     /tmp/ccQlyisH.s:25919  .text.cmdgtocommon:0000000000000000 $t
     /tmp/ccQlyisH.s:25927  .text.cmdgtocommon:0000000000000000 cmdgtocommon
     /tmp/ccQlyisH.s:26013  .text.cmdgtocommon:000000000000002c $d
     /tmp/ccQlyisH.s:26019  .text.cmdgto:0000000000000000 $t
     /tmp/ccQlyisH.s:26027  .text.cmdgto:0000000000000000 cmdgto
     /tmp/ccQlyisH.s:26108  .text.cmdgto:000000000000003c $d
     /tmp/ccQlyisH.s:26116  .text.branchtoalpha:0000000000000000 $t
     /tmp/ccQlyisH.s:26123  .text.branchtoalpha:0000000000000000 branchtoalpha
     /tmp/ccQlyisH.s:26180  .text.cmdalphagto:0000000000000000 $t
     /tmp/ccQlyisH.s:26188  .text.cmdalphagto:0000000000000000 cmdalphagto
     /tmp/ccQlyisH.s:26240  .text.op_gtoalpha:0000000000000000 $t
     /tmp/ccQlyisH.s:26248  .text.op_gtoalpha:0000000000000000 op_gtoalpha
     /tmp/ccQlyisH.s:26312  .text.op_gtoalpha:0000000000000030 $d
     /tmp/ccQlyisH.s:26317  .text.cmdskip:0000000000000000 $t
     /tmp/ccQlyisH.s:26325  .text.cmdskip:0000000000000000 cmdskip
     /tmp/ccQlyisH.s:26508  .text.cmdskip:0000000000000078 $d
     /tmp/ccQlyisH.s:26516  .text.cmdback:0000000000000000 $t
     /tmp/ccQlyisH.s:26524  .text.cmdback:0000000000000000 cmdback
     /tmp/ccQlyisH.s:26677  .text.cmdback:0000000000000064 $d
     /tmp/ccQlyisH.s:26685  .text.usergsb_common:0000000000000000 $t
     /tmp/ccQlyisH.s:26692  .text.usergsb_common:0000000000000000 usergsb_common
     /tmp/ccQlyisH.s:26803  .text.usergsb_common:0000000000000078 $d
     /tmp/ccQlyisH.s:26812  .text.do_usergsb:0000000000000000 $t
     /tmp/ccQlyisH.s:26820  .text.do_usergsb:0000000000000000 do_usergsb
     /tmp/ccQlyisH.s:26853  .text.do_usergsb:0000000000000014 $d
     /tmp/ccQlyisH.s:26858  .text.cmdmultigto:0000000000000000 $t
     /tmp/ccQlyisH.s:26866  .text.cmdmultigto:0000000000000000 cmdmultigto
     /tmp/ccQlyisH.s:26970  .text.cmdmultigto:000000000000004c $d
     /tmp/ccQlyisH.s:26976  .text.store_a_to_d:0000000000000000 $t
     /tmp/ccQlyisH.s:26984  .text.store_a_to_d:0000000000000000 store_a_to_d
     /tmp/ccQlyisH.s:27032  .text.store_a_to_d:0000000000000020 $d
     /tmp/ccQlyisH.s:27037  .text.cmdlocr:0000000000000000 $t
     /tmp/ccQlyisH.s:27045  .text.cmdlocr:0000000000000000 cmdlocr
     /tmp/ccQlyisH.s:27381  .text.cmdlocr:000000000000015c $d
     /tmp/ccQlyisH.s:27389  .text.cmdxout:0000000000000000 $t
     /tmp/ccQlyisH.s:27397  .text.cmdxout:0000000000000000 cmdxout
     /tmp/ccQlyisH.s:27919  .text.cmdxout:00000000000001e4 $d
     /tmp/ccQlyisH.s:27934  .text.cmdconverged:0000000000000000 $t
     /tmp/ccQlyisH.s:27942  .text.cmdconverged:0000000000000000 cmdconverged
     /tmp/ccQlyisH.s:28171  .text.cmdconverged:00000000000000e0 $d
     /tmp/ccQlyisH.s:28181  .text.cmdshuffle:0000000000000000 $t
     /tmp/ccQlyisH.s:28189  .text.cmdshuffle:0000000000000000 cmdshuffle
     /tmp/ccQlyisH.s:28422  .text.cmdshuffle:0000000000000084 $d
ARM GAS  /tmp/ccQlyisH.s 			page 905


     /tmp/ccQlyisH.s:28428  .text.cmdmode:0000000000000000 $t
     /tmp/ccQlyisH.s:28436  .text.cmdmode:0000000000000000 cmdmode
     /tmp/ccQlyisH.s:28517  .text.cmdmode:0000000000000050 $d
     /tmp/ccQlyisH.s:28522  .text.cmdlpop:0000000000000000 $t
     /tmp/ccQlyisH.s:28530  .text.cmdlpop:0000000000000000 cmdlpop
     /tmp/ccQlyisH.s:28602  .text.cmdlpop:0000000000000034 $d
     /tmp/ccQlyisH.s:28608  .text.cmdregs:0000000000000000 $t
     /tmp/ccQlyisH.s:28616  .text.cmdregs:0000000000000000 cmdregs
     /tmp/ccQlyisH.s:28796  .text.cmdregs:00000000000000ac $d
     /tmp/ccQlyisH.s:28803  .text.op_double:0000000000000000 $t
     /tmp/ccQlyisH.s:28811  .text.op_double:0000000000000000 op_double
     /tmp/ccQlyisH.s:29111  .text.op_double:000000000000011c $d
     /tmp/ccQlyisH.s:29118  .text.cmdrestm:0000000000000000 $t
     /tmp/ccQlyisH.s:29126  .text.cmdrestm:0000000000000000 cmdrestm
     /tmp/ccQlyisH.s:29320  .text.cmdrestm:00000000000000a8 $d
     /tmp/ccQlyisH.s:29325  .text.cmdxin:0000000000000000 $t
     /tmp/ccQlyisH.s:29333  .text.cmdxin:0000000000000000 cmdxin
     /tmp/ccQlyisH.s:29759  .text.cmdxin:00000000000001b0 $d
     /tmp/ccQlyisH.s:29772  .rodata.xeq.str1.4:0000000000000000 $d
     /tmp/ccQlyisH.s:29776  .text.xeq:0000000000000000 $t
     /tmp/ccQlyisH.s:29784  .text.xeq:0000000000000000 xeq
     /tmp/ccQlyisH.s:29912  .text.xeq:0000000000000078 $d
     /tmp/ccQlyisH.s:29919  .text.xeq:0000000000000086 $t
     /tmp/ccQlyisH.s:30706  .text.xeq:00000000000002f8 $d
     /tmp/ccQlyisH.s:30727  .text.xeq:0000000000000340 $t
     /tmp/ccQlyisH.s:34030  .text.dispatch_xrom:0000000000000000 dispatch_xrom
     /tmp/ccQlyisH.s:31031  .text.xeq:0000000000000422 $d
     /tmp/ccQlyisH.s:31075  .text.xeq:0000000000000478 $t
     /tmp/ccQlyisH.s:31699  .text.xeq:00000000000005ec $d
     /tmp/ccQlyisH.s:31711  .text.xeq:0000000000000608 $t
     /tmp/ccQlyisH.s:32539  .text.xeq:00000000000008b8 $d
     /tmp/ccQlyisH.s:32552  .text.xeq:00000000000008e0 $t
     /tmp/ccQlyisH.s:33441  .text.xeq:0000000000000bc8 $d
     /tmp/ccQlyisH.s:33460  .text.xeq:0000000000000be4 $t
     /tmp/ccQlyisH.s:33758  .text.xeq:0000000000000d00 $d
     /tmp/ccQlyisH.s:33767  .text.xeq_single:0000000000000000 $t
     /tmp/ccQlyisH.s:33774  .text.xeq_single:0000000000000000 xeq_single
     /tmp/ccQlyisH.s:33813  .text.xeq_single:0000000000000020 $d
     /tmp/ccQlyisH.s:33818  .text.xeq_xrom2:0000000000000000 $t
     /tmp/ccQlyisH.s:33825  .text.xeq_xrom2:0000000000000000 xeq_xrom2
     /tmp/ccQlyisH.s:33973  .text.xeq_xrom2:0000000000000070 $d
     /tmp/ccQlyisH.s:33987  .text.xeq_xrom:0000000000000000 $t
     /tmp/ccQlyisH.s:33995  .text.xeq_xrom:0000000000000000 xeq_xrom
     /tmp/ccQlyisH.s:34018  .text.xeq_xrom:0000000000000010 $d
     /tmp/ccQlyisH.s:34023  .text.dispatch_xrom:0000000000000000 $t
     /tmp/ccQlyisH.s:34161  .text.dispatch_xrom:000000000000005c $d
     /tmp/ccQlyisH.s:34171  .text.op_rs:0000000000000000 $t
     /tmp/ccQlyisH.s:34179  .text.op_rs:0000000000000000 op_rs
     /tmp/ccQlyisH.s:34323  .text.op_rs:0000000000000078 $d
     /tmp/ccQlyisH.s:34332  .text.xeqprog:0000000000000000 $t
     /tmp/ccQlyisH.s:34340  .text.xeqprog:0000000000000000 xeqprog
     /tmp/ccQlyisH.s:34454  .text.xeqprog:0000000000000064 $d
                            *COM*:0000000000000004 JustStopped
     /tmp/ccQlyisH.s:34462  .text.xeq_sst_bst:0000000000000000 $t
     /tmp/ccQlyisH.s:34470  .text.xeq_sst_bst:0000000000000000 xeq_sst_bst
     /tmp/ccQlyisH.s:34683  .text.xeq_sst_bst:000000000000009c $d
     /tmp/ccQlyisH.s:34693  .text.init_34s:0000000000000000 $t
ARM GAS  /tmp/ccQlyisH.s 			page 906


     /tmp/ccQlyisH.s:34701  .text.init_34s:0000000000000000 init_34s
     /tmp/ccQlyisH.s:34753  .text.init_34s:0000000000000028 $d
     /tmp/ccQlyisH.s:34758  .rodata.paste_raw_x.str1.4:0000000000000000 $d
     /tmp/ccQlyisH.s:34762  .text.paste_raw_x:0000000000000000 $t
     /tmp/ccQlyisH.s:34770  .text.paste_raw_x:0000000000000000 paste_raw_x
     /tmp/ccQlyisH.s:35138  .text.paste_raw_x:00000000000000f4 $d
     /tmp/ccQlyisH.s:35151  .rodata.fill_buffer_from_raw_x.str1.4:0000000000000000 $d
     /tmp/ccQlyisH.s:35155  .text.fill_buffer_from_raw_x:0000000000000000 $t
     /tmp/ccQlyisH.s:35163  .text.fill_buffer_from_raw_x:0000000000000000 fill_buffer_from_raw_x
     /tmp/ccQlyisH.s:35420  .text.fill_buffer_from_raw_x:00000000000000c4 $d
                            *COM*:0000000000000004 RectPolConv
     /tmp/ccQlyisH.s:35508  .rodata.xrom_targets:0000000000000000 xrom_targets
     /tmp/ccQlyisH.s:35448  .rodata:0000000000000000 $d
     /tmp/ccQlyisH.s:35456  .bss.result.11459:0000000000000000 $d
     /tmp/ccQlyisH.s:35460  .bss.result.11459:0000000000000000 result.11459
     /tmp/ccQlyisH.s:35463  .data.RegionTab:0000000000000000 $d
     /tmp/ccQlyisH.s:35467  .data.RegionTab:0000000000000000 RegionTab
     /tmp/ccQlyisH.s:35473  .rodata.StackRegMask:0000000000000000 $d
     /tmp/ccQlyisH.s:35477  .rodata.StackRegMask:0000000000000000 StackRegMask
     /tmp/ccQlyisH.s:35481  .rodata.convergence_tolerances:0000000000000000 $d
     /tmp/ccQlyisH.s:35485  .rodata.convergence_tolerances:0000000000000000 convergence_tolerances
     /tmp/ccQlyisH.s:35490  .rodata.modes.11158:0000000000000000 $d
     /tmp/ccQlyisH.s:35494  .rodata.modes.11158:0000000000000000 modes.11158
     /tmp/ccQlyisH.s:35497  .rodata.modes.11669:0000000000000000 $d
     /tmp/ccQlyisH.s:35501  .rodata.modes.11669:0000000000000000 modes.11669
     /tmp/ccQlyisH.s:35504  .rodata.xrom_targets:0000000000000000 $d
     /tmp/ccQlyisH.s:18893  .text.do_tst:000000000000006b $d
     /tmp/ccQlyisH.s:18893  .text.do_tst:000000000000006c $t
     /tmp/ccQlyisH.s:20597  .text.cmdflag:0000000000000033 $d
     /tmp/ccQlyisH.s:20597  .text.cmdflag:0000000000000034 $t
     /tmp/ccQlyisH.s:21757  .text.cmddisp:0000000000000039 $d
     /tmp/ccQlyisH.s:21757  .text.cmddisp:000000000000003a $t

UNDEFINED SYMBOLS
StateWhileOn
main_ram
xrom_size
XromParams
XromLocal
xset
decNumberRoundDigits
decNumberTrunc
dn_eq
set_carry
dn_to_ull
dn_abs
check_overflow
set_overflow
build_value
dn_lt
const_2pow64
xcopy
argcmds
display
shutdown
library_ram
backup_ram
ARM GAS  /tmp/ccQlyisH.s 			page 907


scopy
num_arg_0
prt
scopy_char
DispMsg
dot
error_message
JustDisplayed
ShowRPN
decContextDefault
decimal64FromNumber
decimal128FromNumber
decimal64ToNumber
decimal128ToNumber
int_base
cnsts
cnsts_d128
cnsts_d64
dn_max
dn_add
dn_subtract
dn_multiply
dn_divide
dn_min
cmplxDivide
cmplxAdd
cmplxSubtract
cmplxMultiply
decNumberNormalize
decNumberRoundDecimals
const_360
const_2PI
const_400
reset_shift
dn_minus
finish_cpx_entry
intMax
intAdd
intSubtract
intMultiply
intDivide
intMin
extract_value
dn_dec
dn_eq0
dn_inc
row_column_to_keycode
ullint_to_dn
find_char
decNumberFromString
decNumberCopy
decNumberZero
stack_begin
const_PI
word_size
int_mode
dn_mulpow10
ARM GAS  /tmp/ccQlyisH.s 			page 908


put_key
const_9on5
const_32
decNumberPow10
const_0_05
dn_log10
const_20
cnsts_conv
keycode_to_row_column
dn_compare
decNumberRnd
dn_mul100
dn_le0
dn_lt0
dn_1
finish_display
mask_value
int_to_dn
decNumber2Fraction
GoFast
alpha_view_common
is_int
is_even
isPrime
dn_to_int
message
monfuncs
xrom
dyfuncs
SizeStatRegs
alpha_rcl_s
XromA2D
relative_error
cmplxR
absolute_error
const_1e_14
const_1e_32
const_1e_24
const_NaN
sprintf
multicmds
niladics
trifuncs
sigma_minus
sigma_val
intChs
const_1
const_0
sigma_plus
set_NaN
finish_RPN
is_key_pressed
clr_dot
set_dot
OpCode
checksum_ram
init_state
ARM GAS  /tmp/ccQlyisH.s 			page 909


reset
strdup
strtok
strtoull
strchr
free
__aeabi_uldivmod
decNumberToString

ARM GAS  /tmp/ccQQPlfu.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"xeq.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.find_section_bounds,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	find_section_bounds:
  27              	.LVL0:
  28              	.LFB19:
  29              		.file 1 "src/xeq.c"
   1:src/xeq.c     **** /* This file is part of 34S.
   2:src/xeq.c     ****  * 
   3:src/xeq.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/xeq.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/xeq.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/xeq.c     ****  * (at your option) any later version.
   7:src/xeq.c     ****  * 
   8:src/xeq.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/xeq.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/xeq.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/xeq.c     ****  * GNU General Public License for more details.
  12:src/xeq.c     ****  * 
  13:src/xeq.c     ****  * You should have received a copy of the GNU General Public License
  14:src/xeq.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/xeq.c     ****  */
  16:src/xeq.c     **** 
  17:src/xeq.c     **** #ifndef REALBUILD
  18:src/xeq.c     **** 
  19:src/xeq.c     **** #if defined(WIN32) && !defined(QTGUI) && !defined(IOS) && !defined(__GNUC__) && !defined(DM42)
  20:src/xeq.c     **** 
  21:src/xeq.c     **** #include <stdlib.h>  // sleep
  22:src/xeq.c     **** #include "win32.h"
  23:src/xeq.c     **** #define sleep _sleep
  24:src/xeq.c     **** #define strtoull _strtoui64
  25:src/xeq.c     **** 
  26:src/xeq.c     **** #else
  27:src/xeq.c     **** 
  28:src/xeq.c     **** #ifdef DM42
  29:src/xeq.c     **** #include "dmcp.h"
ARM GAS  /tmp/ccQQPlfu.s 			page 2


  30:src/xeq.c     **** #else
  31:src/xeq.c     **** #include <unistd.h>
  32:src/xeq.c     **** #include <sys/time.h>
  33:src/xeq.c     **** extern unsigned long long strtoull(const char *, char **, int);
  34:src/xeq.c     **** #endif
  35:src/xeq.c     **** 
  36:src/xeq.c     **** #endif
  37:src/xeq.c     **** 
  38:src/xeq.c     **** #include <stdio.h>   // (s)printf
  39:src/xeq.c     **** #include <string.h>
  40:src/xeq.c     **** #include <stdlib.h>
  41:src/xeq.c     **** 
  42:src/xeq.c     **** #endif // not REALBUILD
  43:src/xeq.c     **** 
  44:src/xeq.c     **** #ifdef IOS
  45:src/xeq.c     **** #include <stdarg.h>
  46:src/xeq.c     **** #endif
  47:src/xeq.c     **** 
  48:src/xeq.c     **** #if __GNUC__ >= 4 && __GNUC_MINOR__ >= 6
  49:src/xeq.c     **** #define GNUC_POP_ERROR
  50:src/xeq.c     **** #pragma GCC diagnostic push
  51:src/xeq.c     **** #pragma GCC diagnostic ignored "-Warray-bounds"
  52:src/xeq.c     **** #endif
  53:src/xeq.c     **** 
  54:src/xeq.c     **** #define XEQ_INTERNAL 1
  55:src/xeq.c     **** #define DM42SAFE
  56:src/xeq.c     **** #include "xeq.h"
  57:src/xeq.c     **** #ifdef DM42
  58:src/xeq.c     **** #include "keys.h"
  59:src/xeq.c     **** #endif
  60:src/xeq.c     **** #include "storage.h"
  61:src/xeq.c     **** #include "decn.h"
  62:src/xeq.c     **** #include "complex.h"
  63:src/xeq.c     **** #include "stats.h"
  64:src/xeq.c     **** #include "display.h"
  65:src/xeq.c     **** #include "consts.h"
  66:src/xeq.c     **** #include "int.h"
  67:src/xeq.c     **** #include "date.h"
  68:src/xeq.c     **** #include "lcd.h"
  69:src/xeq.c     **** #include "xrom.h"
  70:src/xeq.c     **** #include "alpha.h"
  71:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
  72:src/xeq.c     **** #include "stopwatch.h"
  73:src/xeq.c     **** #endif
  74:src/xeq.c     **** #ifndef DM42
  75:src/xeq.c     **** #include "printer.h"
  76:src/xeq.c     **** #endif
  77:src/xeq.c     **** #undef DM42SAFE
  78:src/xeq.c     **** 
  79:src/xeq.c     **** #include "pretty.h"
  80:src/xeq.c     **** 
  81:src/xeq.c     **** 
  82:src/xeq.c     **** #include "xrom_targets.c"	// Generated by PP
  83:src/xeq.c     **** 
  84:src/xeq.c     **** /* Define the number of program Ticks that must elapse between flashing the
  85:src/xeq.c     ****  * RCL annunciator.
  86:src/xeq.c     ****  */
ARM GAS  /tmp/ccQQPlfu.s 			page 3


  87:src/xeq.c     **** #define TICKS_PER_FLASH	(5)
  88:src/xeq.c     **** 
  89:src/xeq.c     **** /*
  90:src/xeq.c     ****  *  A program is running
  91:src/xeq.c     ****  */
  92:src/xeq.c     **** FLAG Running;
  93:src/xeq.c     **** FLAG XromRunning;
  94:src/xeq.c     **** 
  95:src/xeq.c     **** #ifndef CONSOLE
  96:src/xeq.c     **** /*
  97:src/xeq.c     ****  *  A program has just stopped
  98:src/xeq.c     ****  */
  99:src/xeq.c     **** FLAG JustStopped;
 100:src/xeq.c     **** #endif
 101:src/xeq.c     **** 
 102:src/xeq.c     **** /*
 103:src/xeq.c     ****  *  Count down counter for a programmed pause
 104:src/xeq.c     ****  */
 105:src/xeq.c     **** volatile unsigned char Pause;
 106:src/xeq.c     **** 
 107:src/xeq.c     **** /*
 108:src/xeq.c     ****  *  Some long running function has called busy();
 109:src/xeq.c     ****  */
 110:src/xeq.c     **** FLAG Busy;
 111:src/xeq.c     **** 
 112:src/xeq.c     **** /*
 113:src/xeq.c     ****  *  Error code
 114:src/xeq.c     ****  */
 115:src/xeq.c     **** SMALL_INT Error;
 116:src/xeq.c     **** 
 117:src/xeq.c     **** /*
 118:src/xeq.c     ****  *  Indication of PC wrap around
 119:src/xeq.c     ****  */
 120:src/xeq.c     **** FLAG PcWrapped;
 121:src/xeq.c     **** 
 122:src/xeq.c     **** /*
 123:src/xeq.c     ****  *  Currently executed function
 124:src/xeq.c     ****  */
 125:src/xeq.c     **** s_opcode XeqOpCode;
 126:src/xeq.c     **** 
 127:src/xeq.c     **** /*
 128:src/xeq.c     ****  *  Temporary display (not X)
 129:src/xeq.c     ****  */
 130:src/xeq.c     **** SMALL_INT ShowRegister;
 131:src/xeq.c     **** 
 132:src/xeq.c     **** /*
 133:src/xeq.c     ****  *  User code being called from XROM
 134:src/xeq.c     ****  */
 135:src/xeq.c     **** SMALL_INT XromUserPc;
 136:src/xeq.c     **** SMALL_INT UserLocalRegs;
 137:src/xeq.c     **** 
 138:src/xeq.c     **** /* We need various different math contexts.
 139:src/xeq.c     ****  * More efficient to define these globally and reuse them as needed.
 140:src/xeq.c     ****  */
 141:src/xeq.c     **** decContext Ctx;
 142:src/xeq.c     **** 
 143:src/xeq.c     **** /*
ARM GAS  /tmp/ccQQPlfu.s 			page 4


 144:src/xeq.c     ****  * A buffer for instruction display
 145:src/xeq.c     ****  */
 146:src/xeq.c     **** char TraceBuffer[25];
 147:src/xeq.c     **** 
 148:src/xeq.c     **** /*
 149:src/xeq.c     ****  *  Total Size of the return stack
 150:src/xeq.c     ****  */
 151:src/xeq.c     **** SMALL_INT RetStkSize;
 152:src/xeq.c     **** 
 153:src/xeq.c     **** /*
 154:src/xeq.c     ****  *  Number of remaining program steps
 155:src/xeq.c     ****  */
 156:src/xeq.c     **** SMALL_INT ProgFree;
 157:src/xeq.c     **** 
 158:src/xeq.c     **** /*
 159:src/xeq.c     ****  * The actual top of the return stack
 160:src/xeq.c     ****  */
 161:src/xeq.c     **** unsigned short *RetStk;
 162:src/xeq.c     **** 
 163:src/xeq.c     **** /*
 164:src/xeq.c     ****  *  The location of the RPN stack
 165:src/xeq.c     ****  */
 166:src/xeq.c     **** REGISTER *StackBase;
 167:src/xeq.c     **** 
 168:src/xeq.c     **** #ifdef INFRARED
 169:src/xeq.c     **** /*
 170:src/xeq.c     ****  *  Is tracing active?
 171:src/xeq.c     ****  */
 172:src/xeq.c     **** FLAG Tracing;
 173:src/xeq.c     **** #endif
 174:src/xeq.c     **** 
 175:src/xeq.c     **** /*
 176:src/xeq.c     **** *	Indicates that a coordinate converstion has just happened
 177:src/xeq.c     **** */
 178:src/xeq.c     **** #ifdef RP_PREFIX
 179:src/xeq.c     **** SMALL_INT RectPolConv; // 1 - R->P just done; 2 - P->R just done
 180:src/xeq.c     **** #endif
 181:src/xeq.c     **** 
 182:src/xeq.c     **** /*
 183:src/xeq.c     ****  *  Check if the current PC is in XROM
 184:src/xeq.c     ****  */
 185:src/xeq.c     **** int is_xrom(void) {
 186:src/xeq.c     **** 	return isXROM(state_pc());
 187:src/xeq.c     **** }
 188:src/xeq.c     **** 
 189:src/xeq.c     **** /*
 190:src/xeq.c     ****  *  Shift the return stack.
 191:src/xeq.c     ****  *  The distance is in levels.
 192:src/xeq.c     ****  *  If argument is negative, return stack will shrink.
 193:src/xeq.c     ****  *  Returns 1 if unsuccessful (error is set)
 194:src/xeq.c     ****  */
 195:src/xeq.c     **** int move_retstk(int distance)
 196:src/xeq.c     **** {
 197:src/xeq.c     **** #ifndef REALBUILD
 198:src/xeq.c     **** 	// Sanity check
 199:src/xeq.c     **** 	if (XromFlags.xIN) {
 200:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
ARM GAS  /tmp/ccQQPlfu.s 			page 5


 201:src/xeq.c     **** 		return 1;
 202:src/xeq.c     **** 	}
 203:src/xeq.c     **** #endif
 204:src/xeq.c     **** 	if (RetStkSize + RetStkPtr + distance < 0) {
 205:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 206:src/xeq.c     **** 		return 1;
 207:src/xeq.c     **** 	}
 208:src/xeq.c     **** 	xcopy(RetStk + RetStkPtr + distance, RetStk + RetStkPtr, (-RetStkPtr) << 1);
 209:src/xeq.c     **** 	RetStk += distance;
 210:src/xeq.c     **** 	RetStkSize += distance;
 211:src/xeq.c     **** 	return 0;
 212:src/xeq.c     **** }
 213:src/xeq.c     **** 
 214:src/xeq.c     **** /*
 215:src/xeq.c     ****  *  How many stack levels with local data have we?
 216:src/xeq.c     ****  */
 217:src/xeq.c     **** int local_levels(void) {
 218:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 219:src/xeq.c     **** }
 220:src/xeq.c     **** 
 221:src/xeq.c     **** /*
 222:src/xeq.c     ****  *  How many local registers have we?
 223:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 224:src/xeq.c     ****  */
 225:src/xeq.c     **** int local_regs_rarg(enum rarg op) {
 226:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 227:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 228:src/xeq.c     **** }
 229:src/xeq.c     **** 
 230:src/xeq.c     **** /*
 231:src/xeq.c     ****  *  How many local registers have we?
 232:src/xeq.c     ****  */
 233:src/xeq.c     **** int local_regs(void) {
 234:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 235:src/xeq.c     **** }
 236:src/xeq.c     **** 
 237:src/xeq.c     **** /*
 238:src/xeq.c     ****  *  How many global registers have we?
 239:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 240:src/xeq.c     ****  */
 241:src/xeq.c     **** unsigned int global_regs_rarg(enum rarg op) {
 242:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 243:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 244:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 245:src/xeq.c     **** 	}
 246:src/xeq.c     **** 	else
 247:src/xeq.c     **** 		return NumRegs;
 248:src/xeq.c     **** }
 249:src/xeq.c     **** 
 250:src/xeq.c     **** /*
 251:src/xeq.c     ****  *  How many global registers have we?
 252:src/xeq.c     ****  */
 253:src/xeq.c     **** unsigned int global_regs(void) {
 254:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 255:src/xeq.c     **** }
 256:src/xeq.c     **** 
 257:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 6


 258:src/xeq.c     **** #if defined(CONSOLE)
 259:src/xeq.c     **** // Console screen only
 260:src/xeq.c     **** unsigned int get_local_flags(void) {
 261:src/xeq.c     **** 	if (LocalRegs == 0)
 262:src/xeq.c     **** 		return 0;
 263:src/xeq.c     **** 	return RetStk[LocalRegs + 1];
 264:src/xeq.c     **** }
 265:src/xeq.c     **** #endif
 266:src/xeq.c     **** 
 267:src/xeq.c     **** void version(enum nilop op) {
 268:src/xeq.c     **** 	State2.version = 1;
 269:src/xeq.c     **** 	if (!State2.runmode)
 270:src/xeq.c     **** 		display();
 271:src/xeq.c     **** }
 272:src/xeq.c     **** 
 273:src/xeq.c     **** void cmd_off(enum nilop op) {
 274:src/xeq.c     **** 	shutdown();
 275:src/xeq.c     **** }
 276:src/xeq.c     **** 
 277:src/xeq.c     **** #ifndef state_pc
 278:src/xeq.c     **** unsigned int state_pc(void) {
 279:src/xeq.c     **** 	return State.pc;	
 280:src/xeq.c     **** }
 281:src/xeq.c     **** #endif
 282:src/xeq.c     **** static void raw_set_pc(unsigned int pc) {
 283:src/xeq.c     **** 	State.pc = pc;
 284:src/xeq.c     **** 	update_program_bounds(0);
 285:src/xeq.c     **** }
 286:src/xeq.c     **** 
 287:src/xeq.c     **** /*
 288:src/xeq.c     ****  *  Where do the program regions start?
 289:src/xeq.c     ****  */
 290:src/xeq.c     **** #ifdef DM42
 291:src/xeq.c     **** static s_opcode * RegionTab[] = {
 292:src/xeq.c     **** 	NULL,
 293:src/xeq.c     **** 	NULL,
 294:src/xeq.c     **** 	NULL,
 295:src/xeq.c     **** 	xrom
 296:src/xeq.c     **** };
 297:src/xeq.c     **** void init_RegionTab (void) {
 298:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 299:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 300:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 301:src/xeq.c     **** }
 302:src/xeq.c     **** #else
 303:src/xeq.c     **** static const s_opcode *const RegionTab[] = {
 304:src/xeq.c     **** 	Prog,
 305:src/xeq.c     **** 	UserFlash.prog,
 306:src/xeq.c     **** 	BackupFlash._prog,
 307:src/xeq.c     **** 	xrom
 308:src/xeq.c     **** };
 309:src/xeq.c     **** #endif
 310:src/xeq.c     **** /*
 311:src/xeq.c     ****  *  Size of a program segment
 312:src/xeq.c     ****  */
 313:src/xeq.c     **** int sizeLIB(int region) {
 314:src/xeq.c     **** 	if (region == REGION_XROM)
ARM GAS  /tmp/ccQQPlfu.s 			page 7


 315:src/xeq.c     **** 		return xrom_size;
 316:src/xeq.c     **** 	else
 317:src/xeq.c     **** 		return (int)RegionTab[region][-1];
 318:src/xeq.c     **** }
 319:src/xeq.c     **** 
 320:src/xeq.c     **** 
 321:src/xeq.c     **** /*
 322:src/xeq.c     ****  *  Get an opcode, check for double length codes
 323:src/xeq.c     ****  */
 324:src/xeq.c     **** static opcode get_opcode( const s_opcode *loc )
 325:src/xeq.c     **** {
 326:src/xeq.c     **** 	opcode r = *loc;
 327:src/xeq.c     **** 	if ( isDBL(r) ) {
 328:src/xeq.c     **** 		r |= loc[1] << 16;
 329:src/xeq.c     **** 	}
 330:src/xeq.c     **** 	return r;
 331:src/xeq.c     **** }
 332:src/xeq.c     **** 
 333:src/xeq.c     **** 
 334:src/xeq.c     **** /* 
 335:src/xeq.c     ****  * Return the program memory location specified.
 336:src/xeq.c     ****  */
 337:src/xeq.c     **** opcode getprog(unsigned int pc) {
 338:src/xeq.c     **** 
 339:src/xeq.c     **** 	const int region = nLIB(pc);
 340:src/xeq.c     **** 	int offset = offsetLIB(pc);
 341:src/xeq.c     **** 
 342:src/xeq.c     **** 	if (offset < 0 || offset >= sizeLIB(region))
 343:src/xeq.c     **** 		return OP_NIL | OP_END;
 344:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 345:src/xeq.c     **** }
 346:src/xeq.c     **** 
 347:src/xeq.c     **** 
 348:src/xeq.c     **** /* 
 349:src/xeq.c     ****  * Return the physical start-address of the current program
 350:src/xeq.c     ****  */
 351:src/xeq.c     **** const s_opcode *get_current_prog(void) {
 352:src/xeq.c     **** 
 353:src/xeq.c     **** 	const int region = nLIB(ProgBegin);
 354:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 355:src/xeq.c     **** }
 356:src/xeq.c     **** 
 357:src/xeq.c     **** 
 358:src/xeq.c     **** /*
 359:src/xeq.c     ****  *  Set PC with sanity check
 360:src/xeq.c     ****  */
 361:src/xeq.c     **** void set_pc(unsigned int pc) {
 362:src/xeq.c     **** 	if (isRAM(pc)) {
 363:src/xeq.c     **** 		if (pc > ProgSize)
 364:src/xeq.c     **** 			pc = ProgSize;
 365:src/xeq.c     **** 		if (pc > 1 && isDBL(Prog_1[pc - 1]))
 366:src/xeq.c     **** 			pc--;
 367:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 368:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 369:src/xeq.c     **** 		if (pc > n - 1)
 370:src/xeq.c     **** 			pc = n - 1;
 371:src/xeq.c     **** 		if (pc > startLIB(pc) && isDBL(getprog(pc - 1)))
ARM GAS  /tmp/ccQQPlfu.s 			page 8


 372:src/xeq.c     **** 			--pc;
 373:src/xeq.c     **** 	}
 374:src/xeq.c     **** 	raw_set_pc(pc);
 375:src/xeq.c     **** }
 376:src/xeq.c     **** 
 377:src/xeq.c     **** 
 378:src/xeq.c     **** 
 379:src/xeq.c     **** /* Locate the beginning and end of a section from a PC that points anywhere within
 380:src/xeq.c     ****  */
 381:src/xeq.c     **** static unsigned short int find_section_bounds(const unsigned int pc, const int endp, unsigned short
  30              		.loc 1 381 119 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 382:src/xeq.c     **** 	unsigned short int top, bottom;
  35              		.loc 1 382 2 view .LVU1
 383:src/xeq.c     **** 
 384:src/xeq.c     **** 	if (endp && State2.runmode) { 
  36              		.loc 1 384 2 view .LVU2
  37              		.loc 1 384 5 is_stmt 0 view .LVU3
  38 0000 71B1     		cbz	r1, .L2
  39              		.loc 1 384 11 discriminator 1 view .LVU4
  40 0002 194B     		ldr	r3, .L14
  41 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
  42 0006 5B06     		lsls	r3, r3, #25
  43 0008 0AD5     		bpl	.L2
 385:src/xeq.c     **** 		// Use the current program as bounds
 386:src/xeq.c     **** 		top = ProgBegin;
  44              		.loc 1 386 3 is_stmt 1 view .LVU5
  45              		.loc 1 386 9 is_stmt 0 view .LVU6
  46 000a 184B     		ldr	r3, .L14+4
  47 000c 1968     		ldr	r1, [r3]
  48              	.LVL1:
 387:src/xeq.c     **** 		bottom = ProgEnd;
  49              		.loc 1 387 3 is_stmt 1 view .LVU7
  50 000e B1F8EC37 		ldrh	r3, [r1, #2028]
  51              		.loc 1 387 10 is_stmt 0 view .LVU8
  52 0012 B1F8EE07 		ldrh	r0, [r1, #2030]
  53              	.LVL2:
 388:src/xeq.c     **** 		if (top == 0)
  54              		.loc 1 388 3 is_stmt 1 view .LVU9
  55 0016 012B     		cmp	r3, #1
  56 0018 38BF     		it	cc
  57 001a 0123     		movcc	r3, #1
  58              	.LVL3:
 389:src/xeq.c     **** 			top = 1;
 390:src/xeq.c     **** 	}
 391:src/xeq.c     **** 	else if (isXROM(pc)) {
 392:src/xeq.c     **** 		top = addrXROM(1);
 393:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 394:src/xeq.c     **** 	} 
 395:src/xeq.c     **** 	else if (isLIB(pc)) {
 396:src/xeq.c     **** 		top = startLIB(pc);
 397:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
 398:src/xeq.c     **** 	}
 399:src/xeq.c     **** 	else {
ARM GAS  /tmp/ccQQPlfu.s 			page 9


 400:src/xeq.c     **** 		top = State2.runmode;  // step 001 if not entering a program
 401:src/xeq.c     **** 		bottom = ProgSize;
 402:src/xeq.c     **** 	}
 403:src/xeq.c     **** 	*p_top = top;
  59              		.loc 1 403 2 view .LVU10
  60              		.loc 1 403 9 is_stmt 0 view .LVU11
  61 001c 1380     		strh	r3, [r2]	@ movhi
 404:src/xeq.c     **** 	return bottom;
  62              		.loc 1 404 2 is_stmt 1 view .LVU12
 405:src/xeq.c     **** }
  63              		.loc 1 405 1 is_stmt 0 view .LVU13
  64 001e 7047     		bx	lr
  65              	.LVL4:
  66              	.L2:
 391:src/xeq.c     **** 		top = addrXROM(1);
  67              		.loc 1 391 7 is_stmt 1 view .LVU14
 391:src/xeq.c     **** 		top = addrXROM(1);
  68              		.loc 1 391 11 is_stmt 0 view .LVU15
  69 0020 830B     		lsrs	r3, r0, #14
 391:src/xeq.c     **** 		top = addrXROM(1);
  70              		.loc 1 391 10 view .LVU16
  71 0022 032B     		cmp	r3, #3
  72 0024 0FD0     		beq	.L13
 395:src/xeq.c     **** 		top = startLIB(pc);
  73              		.loc 1 395 7 is_stmt 1 view .LVU17
 395:src/xeq.c     **** 		top = startLIB(pc);
  74              		.loc 1 395 10 is_stmt 0 view .LVU18
  75 0026 10F4404F 		tst	r0, #49152
  76 002a 14D0     		beq	.L5
 396:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  77              		.loc 1 396 3 is_stmt 1 view .LVU19
  78              	.LBB1321:
  79              	.LBB1322:
 317:src/xeq.c     **** }
  80              		.loc 1 317 24 is_stmt 0 view .LVU20
  81 002c 1049     		ldr	r1, .L14+8
  82              	.LVL5:
 317:src/xeq.c     **** }
  83              		.loc 1 317 32 view .LVU21
  84 002e 51F82330 		ldr	r3, [r1, r3, lsl #2]
  85              	.LBE1322:
  86              	.LBE1321:
 397:src/xeq.c     **** 	}
  87              		.loc 1 397 10 view .LVU22
  88 0032 33F8021C 		ldrh	r1, [r3, #-2]
 396:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  89              		.loc 1 396 9 view .LVU23
  90 0036 00F44043 		and	r3, r0, #49152
 397:src/xeq.c     **** 	}
  91              		.loc 1 397 10 view .LVU24
  92 003a 5818     		adds	r0, r3, r1
  93              	.LVL6:
 396:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  94              		.loc 1 396 7 view .LVU25
  95 003c 0133     		adds	r3, r3, #1
  96 003e 9BB2     		uxth	r3, r3
  97              	.LVL7:
ARM GAS  /tmp/ccQQPlfu.s 			page 10


 397:src/xeq.c     **** 	}
  98              		.loc 1 397 3 is_stmt 1 view .LVU26
  99              	.LBB1324:
 100              	.LBI1321:
 313:src/xeq.c     **** 	if (region == REGION_XROM)
 101              		.loc 1 313 5 view .LVU27
 102              	.LBB1323:
 314:src/xeq.c     **** 		return xrom_size;
 103              		.loc 1 314 2 view .LVU28
 317:src/xeq.c     **** }
 104              		.loc 1 317 3 view .LVU29
 317:src/xeq.c     **** }
 105              		.loc 1 317 3 is_stmt 0 view .LVU30
 106              	.LBE1323:
 107              	.LBE1324:
 397:src/xeq.c     **** 	}
 108              		.loc 1 397 10 view .LVU31
 109 0040 80B2     		uxth	r0, r0
 110              	.LVL8:
 403:src/xeq.c     **** 	return bottom;
 111              		.loc 1 403 2 is_stmt 1 view .LVU32
 403:src/xeq.c     **** 	return bottom;
 112              		.loc 1 403 9 is_stmt 0 view .LVU33
 113 0042 1380     		strh	r3, [r2]	@ movhi
 404:src/xeq.c     **** }
 114              		.loc 1 404 2 is_stmt 1 view .LVU34
 115              		.loc 1 405 1 is_stmt 0 view .LVU35
 116 0044 7047     		bx	lr
 117              	.LVL9:
 118              	.L13:
 392:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 119              		.loc 1 392 3 is_stmt 1 view .LVU36
 393:src/xeq.c     **** 	} 
 120              		.loc 1 393 3 view .LVU37
 393:src/xeq.c     **** 	} 
 121              		.loc 1 393 10 is_stmt 0 view .LVU38
 122 0046 0B4B     		ldr	r3, .L14+12
 123 0048 1888     		ldrh	r0, [r3]
 124              	.LVL10:
 392:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 125              		.loc 1 392 7 view .LVU39
 126 004a 4CF20103 		movw	r3, #49153
 393:src/xeq.c     **** 	} 
 127              		.loc 1 393 10 view .LVU40
 128 004e 40F44040 		orr	r0, r0, #49152
 129              	.LVL11:
 403:src/xeq.c     **** 	return bottom;
 130              		.loc 1 403 2 is_stmt 1 view .LVU41
 403:src/xeq.c     **** 	return bottom;
 131              		.loc 1 403 9 is_stmt 0 view .LVU42
 132 0052 1380     		strh	r3, [r2]	@ movhi
 404:src/xeq.c     **** }
 133              		.loc 1 404 2 is_stmt 1 view .LVU43
 134              		.loc 1 405 1 is_stmt 0 view .LVU44
 135 0054 7047     		bx	lr
 136              	.LVL12:
 137              	.L5:
ARM GAS  /tmp/ccQQPlfu.s 			page 11


 400:src/xeq.c     **** 		bottom = ProgSize;
 138              		.loc 1 400 3 is_stmt 1 view .LVU45
 400:src/xeq.c     **** 		bottom = ProgSize;
 139              		.loc 1 400 15 is_stmt 0 view .LVU46
 140 0056 044B     		ldr	r3, .L14
 401:src/xeq.c     **** 	}
 141              		.loc 1 401 10 view .LVU47
 142 0058 0449     		ldr	r1, .L14+4
 143              	.LVL13:
 400:src/xeq.c     **** 		bottom = ProgSize;
 144              		.loc 1 400 15 view .LVU48
 145 005a 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 401:src/xeq.c     **** 	}
 146              		.loc 1 401 10 view .LVU49
 147 005c 0968     		ldr	r1, [r1]
 400:src/xeq.c     **** 		bottom = ProgSize;
 148              		.loc 1 400 7 view .LVU50
 149 005e C3F38013 		ubfx	r3, r3, #6, #1
 150              	.LVL14:
 401:src/xeq.c     **** 	}
 151              		.loc 1 401 3 is_stmt 1 view .LVU51
 401:src/xeq.c     **** 	}
 152              		.loc 1 401 10 is_stmt 0 view .LVU52
 153 0062 4888     		ldrh	r0, [r1, #2]
 154              	.LVL15:
 403:src/xeq.c     **** 	return bottom;
 155              		.loc 1 403 2 is_stmt 1 view .LVU53
 403:src/xeq.c     **** 	return bottom;
 156              		.loc 1 403 9 is_stmt 0 view .LVU54
 157 0064 1380     		strh	r3, [r2]	@ movhi
 404:src/xeq.c     **** }
 158              		.loc 1 404 2 is_stmt 1 view .LVU55
 159              		.loc 1 405 1 is_stmt 0 view .LVU56
 160 0066 7047     		bx	lr
 161              	.L15:
 162              		.align	2
 163              	.L14:
 164 0068 00000000 		.word	StateWhileOn
 165 006c 00000000 		.word	main_ram
 166 0070 00000000 		.word	.LANCHOR0
 167 0074 00000000 		.word	xrom_size
 168              		.cfi_endproc
 169              	.LFE19:
 171              		.section	.text.reg_address,"ax",%progbits
 172              		.align	1
 173              		.p2align 2,,3
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu fpv4-sp-d16
 179              	reg_address:
 180              	.LVL16:
 181              	.LFB90:
 406:src/xeq.c     **** 
 407:src/xeq.c     **** 
 408:src/xeq.c     **** /* Increment the passed PC.  Account for wrap around but nothing else.
 409:src/xeq.c     ****  * Return the updated PC.
ARM GAS  /tmp/ccQQPlfu.s 			page 12


 410:src/xeq.c     ****  * Set PcWrapped on wrap around
 411:src/xeq.c     ****  */
 412:src/xeq.c     **** unsigned int do_inc(const unsigned int pc, int endp) {
 413:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 414:src/xeq.c     **** 	unsigned short int top = 0;
 415:src/xeq.c     **** 	unsigned short int bottom = 0;
 416:src/xeq.c     **** 
 417:src/xeq.c     **** 	PcWrapped = 0;
 418:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 419:src/xeq.c     **** 
 420:src/xeq.c     **** 	if (npc > bottom) {
 421:src/xeq.c     **** 		PcWrapped = 1;
 422:src/xeq.c     **** 		return top;
 423:src/xeq.c     **** 	}
 424:src/xeq.c     **** 	return npc;
 425:src/xeq.c     **** }
 426:src/xeq.c     **** 
 427:src/xeq.c     **** /* Decrement the passed PC.  Account for wrap around but nothing else.
 428:src/xeq.c     ****  * Return the updated PC.
 429:src/xeq.c     ****  * Set PcWrapped on wrap around
 430:src/xeq.c     ****  */
 431:src/xeq.c     **** unsigned int do_dec(unsigned int pc, int endp) {
 432:src/xeq.c     **** 	unsigned short int top = 0;
 433:src/xeq.c     **** 	unsigned short int bottom = 0;
 434:src/xeq.c     **** 
 435:src/xeq.c     **** 	PcWrapped = 0;
 436:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 437:src/xeq.c     **** 
 438:src/xeq.c     **** 	if (pc <= top) {
 439:src/xeq.c     **** 		PcWrapped = 1;
 440:src/xeq.c     **** 		pc = bottom;
 441:src/xeq.c     **** 	}
 442:src/xeq.c     **** 	else
 443:src/xeq.c     **** 		--pc;
 444:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 445:src/xeq.c     **** 		--pc;
 446:src/xeq.c     **** 	return pc;
 447:src/xeq.c     **** }
 448:src/xeq.c     **** 
 449:src/xeq.c     **** /* Increment the PC keeping account of wrapping around and stopping
 450:src/xeq.c     ****  * programs on such.  Return non-zero if we wrapped.
 451:src/xeq.c     ****  */
 452:src/xeq.c     **** int incpc(void) {
 453:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 454:src/xeq.c     **** 	return PcWrapped;
 455:src/xeq.c     **** }
 456:src/xeq.c     **** 
 457:src/xeq.c     **** void decpc(void) {
 458:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 459:src/xeq.c     **** }
 460:src/xeq.c     **** 
 461:src/xeq.c     **** /*
 462:src/xeq.c     ****  * Update the pointers to the current program delimited by END statements
 463:src/xeq.c     ****  */
 464:src/xeq.c     **** void update_program_bounds(const int force) {
 465:src/xeq.c     **** 	unsigned int pc = state_pc();
 466:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
ARM GAS  /tmp/ccQQPlfu.s 			page 13


 467:src/xeq.c     **** 		State.pc = pc = 1;
 468:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 469:src/xeq.c     **** 		return;
 470:src/xeq.c     **** 	for (PcWrapped = 0; !PcWrapped; pc = do_inc(pc, 0)) {
 471:src/xeq.c     **** 		ProgEnd = pc;
 472:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 473:src/xeq.c     **** 			break;
 474:src/xeq.c     **** 		}
 475:src/xeq.c     **** 	}
 476:src/xeq.c     **** 	for (pc = state_pc();;) {
 477:src/xeq.c     **** 		const unsigned int opc = pc;
 478:src/xeq.c     **** 		pc = do_dec(opc, 0);
 479:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 480:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 481:src/xeq.c     **** 			break;
 482:src/xeq.c     **** 		}
 483:src/xeq.c     **** 	}
 484:src/xeq.c     **** }
 485:src/xeq.c     **** 
 486:src/xeq.c     **** /* Determine where in program space the PC really is
 487:src/xeq.c     ****  */
 488:src/xeq.c     **** unsigned int user_pc(unsigned int pc) {
 489:src/xeq.c     **** 	unsigned int n = 1;
 490:src/xeq.c     **** 	unsigned int base;
 491:src/xeq.c     **** 
 492:src/xeq.c     **** #ifndef REALBUILD
 493:src/xeq.c     **** 	if (pc == 0 || isXROM(pc))
 494:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 495:src/xeq.c     **** #else
 496:src/xeq.c     **** 	if (pc == 0)
 497:src/xeq.c     **** 		return 0;
 498:src/xeq.c     **** #endif
 499:src/xeq.c     **** 	base = startLIB(pc);
 500:src/xeq.c     **** 	while (base < pc) {
 501:src/xeq.c     **** 		base = do_inc(base, 0);
 502:src/xeq.c     **** 		if (PcWrapped)
 503:src/xeq.c     **** 			return n;
 504:src/xeq.c     **** 		++n;
 505:src/xeq.c     **** 	}
 506:src/xeq.c     **** 	return n;
 507:src/xeq.c     **** }
 508:src/xeq.c     **** 
 509:src/xeq.c     **** /* Given a target user PC, figure out the real matching PC
 510:src/xeq.c     ****  */
 511:src/xeq.c     **** unsigned int find_user_pc(unsigned int target) {
 512:src/xeq.c     **** 	unsigned int upc = state_pc();
 513:src/xeq.c     **** 	const int libp = isLIB(upc);
 514:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 515:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 516:src/xeq.c     **** #ifndef REALBUILD
 517:src/xeq.c     **** 	if (isXROM(upc))
 518:src/xeq.c     **** 		return addrXROM(target);
 519:src/xeq.c     **** #endif
 520:src/xeq.c     **** 	while (n++ < target) {
 521:src/xeq.c     **** 		const unsigned int oldbase = base;
 522:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 523:src/xeq.c     **** 		if (PcWrapped)
ARM GAS  /tmp/ccQQPlfu.s 			page 14


 524:src/xeq.c     **** 			return oldbase;
 525:src/xeq.c     **** 	}
 526:src/xeq.c     **** 	return base;
 527:src/xeq.c     **** }
 528:src/xeq.c     **** 
 529:src/xeq.c     **** 
 530:src/xeq.c     **** /* Set a flag to indicate that a complex operation has taken place
 531:src/xeq.c     ****  * The flag disappears with the next command executed.
 532:src/xeq.c     ****  */
 533:src/xeq.c     **** static void set_was_complex(void) {
 534:src/xeq.c     **** 	State2.wascomplex = 1;
 535:src/xeq.c     **** }
 536:src/xeq.c     **** 
 537:src/xeq.c     **** 
 538:src/xeq.c     **** /* Produce an error and stop
 539:src/xeq.c     ****  */
 540:src/xeq.c     **** int report_err(const unsigned int e) {
 541:src/xeq.c     **** 	if (Error == ERR_NONE) {
 542:src/xeq.c     **** 		Error = e;
 543:src/xeq.c     **** 		if (e == ERR_NONE) {
 544:src/xeq.c     **** 			error_message(e); // "Running Program"
 545:src/xeq.c     **** 			return 0;
 546:src/xeq.c     **** 		}
 547:src/xeq.c     **** 	}
 548:src/xeq.c     **** 	return 1;
 549:src/xeq.c     **** }
 550:src/xeq.c     **** 
 551:src/xeq.c     **** 
 552:src/xeq.c     **** /* Display a warning
 553:src/xeq.c     ****  */
 554:src/xeq.c     **** int report_warn(const unsigned int e) {
 555:src/xeq.c     **** 	if (Running) {
 556:src/xeq.c     **** 		return report_err(e);
 557:src/xeq.c     **** 	}
 558:src/xeq.c     **** 	error_message(e);
 559:src/xeq.c     **** #ifndef CONSOLE
 560:src/xeq.c     **** 	State2.disp_freeze = 0;
 561:src/xeq.c     **** 	JustDisplayed = 1;
 562:src/xeq.c     **** 	ShowRPN = 1;
 563:src/xeq.c     **** #endif
 564:src/xeq.c     **** 	return e != ERR_NONE;
 565:src/xeq.c     **** }
 566:src/xeq.c     **** 
 567:src/xeq.c     **** 
 568:src/xeq.c     **** /* Doing something in the wrong mode */
 569:src/xeq.c     **** void bad_mode_error(void) {
 570:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 571:src/xeq.c     **** }
 572:src/xeq.c     **** 
 573:src/xeq.c     **** 
 574:src/xeq.c     **** /* User command to produce an error */
 575:src/xeq.c     **** void cmderr(unsigned int arg, enum rarg op) {
 576:src/xeq.c     **** 	report_err(arg);
 577:src/xeq.c     **** }
 578:src/xeq.c     **** 
 579:src/xeq.c     **** 
 580:src/xeq.c     **** /* User command to display a warning */
ARM GAS  /tmp/ccQQPlfu.s 			page 15


 581:src/xeq.c     **** void cmdmsg(unsigned int arg, enum rarg op) {
 582:src/xeq.c     **** 	error_message(arg);
 583:src/xeq.c     **** }
 584:src/xeq.c     **** 
 585:src/xeq.c     **** 
 586:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE)
 587:src/xeq.c     **** #include <stdlib.h>
 588:src/xeq.c     **** static void error(const char *fmt, ...) {
 589:src/xeq.c     **** 	va_list ap;
 590:src/xeq.c     **** 	va_start(ap, fmt);
 591:src/xeq.c     **** 	vprintf(fmt, ap);
 592:src/xeq.c     **** 	va_end(ap);
 593:src/xeq.c     **** 	putchar('\n');
 594:src/xeq.c     **** 	exit(1);
 595:src/xeq.c     **** }
 596:src/xeq.c     **** 
 597:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); printf("illegal opcode 0x%08x\n", op); } while (
 598:src/xeq.c     **** #else
 599:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); } while (0)
 600:src/xeq.c     **** #endif
 601:src/xeq.c     **** 
 602:src/xeq.c     **** /* Real rounding mode access routine
 603:src/xeq.c     ****  */
 604:src/xeq.c     **** static enum rounding get_rounding_mode() {
 605:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 606:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 607:src/xeq.c     **** 		DEC_ROUND_UP, DEC_ROUND_DOWN,
 608:src/xeq.c     **** 		DEC_ROUND_CEILING, DEC_ROUND_FLOOR
 609:src/xeq.c     **** 	};
 610:src/xeq.c     **** 	return (enum rounding) modes[UState.rounding_mode];
 611:src/xeq.c     **** }
 612:src/xeq.c     **** 
 613:src/xeq.c     **** void op_roundingmode(enum nilop op) {
 614:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 615:src/xeq.c     **** }
 616:src/xeq.c     **** 
 617:src/xeq.c     **** void rarg_roundingmode(unsigned int arg, enum rarg op) {
 618:src/xeq.c     **** 	UState.rounding_mode = arg;
 619:src/xeq.c     **** }
 620:src/xeq.c     **** 
 621:src/xeq.c     **** 
 622:src/xeq.c     **** /* Pack a number into our DPD register format
 623:src/xeq.c     ****  */
 624:src/xeq.c     **** 
 625:src/xeq.c     **** void packed_from_number(decimal64 *r, const decNumber *x) {
 626:src/xeq.c     **** 	decContext ctx64;
 627:src/xeq.c     **** 
 628:src/xeq.c     **** 	decContextDefault(&ctx64, DEC_INIT_DECIMAL64);
 629:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 630:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 631:src/xeq.c     **** }
 632:src/xeq.c     **** 
 633:src/xeq.c     **** void packed128_from_number(decimal128 *r, const decNumber *x) {
 634:src/xeq.c     **** 	decContext ctx128;
 635:src/xeq.c     **** 
 636:src/xeq.c     **** 	decContextDefault(&ctx128, DEC_INIT_DECIMAL128);
 637:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
ARM GAS  /tmp/ccQQPlfu.s 			page 16


 638:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 639:src/xeq.c     **** }
 640:src/xeq.c     **** 
 641:src/xeq.c     **** // Repack a decimal128 to decimal64
 642:src/xeq.c     **** void packed_from_packed128(decimal64 *r, const decimal128 *s) {
 643:src/xeq.c     **** 	decNumber temp;
 644:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 645:src/xeq.c     **** }
 646:src/xeq.c     **** 
 647:src/xeq.c     **** // Repack a decimal64 to decimal128
 648:src/xeq.c     **** void packed128_from_packed(decimal128 *r, const decimal64 *s) {
 649:src/xeq.c     **** 	decNumber temp;
 650:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 651:src/xeq.c     **** }
 652:src/xeq.c     **** 
 653:src/xeq.c     **** /*
 654:src/xeq.c     ****  *  User command to round to a specific number of digits
 655:src/xeq.c     ****  */
 656:src/xeq.c     **** void rarg_round(unsigned int arg, enum rarg op) {
 657:src/xeq.c     **** 	decNumber res, x;
 658:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 659:src/xeq.c     **** 
 660:src/xeq.c     **** 	if (is_intmode()) {
 661:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 662:src/xeq.c     **** 		return;
 663:src/xeq.c     **** 	}
 664:src/xeq.c     **** 
 665:src/xeq.c     **** 	setlastX();
 666:src/xeq.c     **** 	getX(&x);
 667:src/xeq.c     **** 	if (op == RARG_ROUND)
 668:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 669:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 670:src/xeq.c     **** 		decNumberRoundDecimals(&res, &x, arg, rm);
 671:src/xeq.c     **** 	setX(&res);
 672:src/xeq.c     **** }
 673:src/xeq.c     **** 
 674:src/xeq.c     **** /* Check if a value is bogus and error out if so.
 675:src/xeq.c     ****  * A value is bogus if it is infinite, NaN *and* flag D is not set.
 676:src/xeq.c     ****  * If flag D is set, these values are allowed through just fine.
 677:src/xeq.c     ****  */
 678:src/xeq.c     **** static int check_special(const decNumber *x) {
 679:src/xeq.c     **** 	decNumber y;
 680:src/xeq.c     **** 	decimal64 z;
 681:src/xeq.c     **** 	decimal128 d;
 682:src/xeq.c     **** 	if (is_dblmode()) {
 683:src/xeq.c     **** 		packed128_from_number(&d, x);
 684:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 685:src/xeq.c     **** 	}
 686:src/xeq.c     **** 	else 
 687:src/xeq.c     **** 	{
 688:src/xeq.c     **** 		packed_from_number(&z, x);
 689:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 690:src/xeq.c     **** 	}
 691:src/xeq.c     **** 	if (decNumberIsSpecial(&y)) {
 692:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 693:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 694:src/xeq.c     **** 				report_err(ERR_DOMAIN);
ARM GAS  /tmp/ccQQPlfu.s 			page 17


 695:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 696:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 697:src/xeq.c     **** 			else
 698:src/xeq.c     **** 				report_err(ERR_INFINITY);
 699:src/xeq.c     **** 			return 1;
 700:src/xeq.c     **** 		}
 701:src/xeq.c     **** 	}
 702:src/xeq.c     **** 	return 0;
 703:src/xeq.c     **** }
 704:src/xeq.c     **** 
 705:src/xeq.c     **** 
 706:src/xeq.c     **** int stack_size(void) {
 707:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 708:src/xeq.c     **** 		return 4;
 709:src/xeq.c     **** 	return 8;
 710:src/xeq.c     **** }
 711:src/xeq.c     **** 
 712:src/xeq.c     **** REGISTER *get_stack(int pos) {
 713:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 714:src/xeq.c     **** }
 715:src/xeq.c     **** 
 716:src/xeq.c     **** static REGISTER *get_stack_top(void) {
 717:src/xeq.c     **** 	return get_stack(stack_size()-1);
 718:src/xeq.c     **** }
 719:src/xeq.c     **** 
 720:src/xeq.c     **** void copyreg(REGISTER *d, const REGISTER *s) {
 721:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 722:src/xeq.c     **** }
 723:src/xeq.c     **** 
 724:src/xeq.c     **** void copyreg_n(int d, int s) {
 725:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 726:src/xeq.c     **** }
 727:src/xeq.c     **** 
 728:src/xeq.c     **** /* Lift the stack one level.
 729:src/xeq.c     ****  */
 730:src/xeq.c     **** void lift(void) {
 731:src/xeq.c     **** 	const int n = stack_size();
 732:src/xeq.c     **** 	int i;
 733:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 734:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 735:src/xeq.c     **** }
 736:src/xeq.c     **** 
 737:src/xeq.c     **** static int get_lift(void) {
 738:src/xeq.c     **** 	return State2.state_lift;
 739:src/xeq.c     **** }
 740:src/xeq.c     **** 
 741:src/xeq.c     **** void lift_if_enabled(void) {
 742:src/xeq.c     **** 	if (get_lift())
 743:src/xeq.c     **** 		lift();
 744:src/xeq.c     **** }
 745:src/xeq.c     **** 
 746:src/xeq.c     **** static void lift2_if_enabled(void) {
 747:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 748:src/xeq.c     **** 	lift_if_enabled();
 749:src/xeq.c     **** 	if (C_LOCKED) {
 750:src/xeq.c     **** 		lift_if_enabled();
 751:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQQPlfu.s 			page 18


 752:src/xeq.c     **** 	else {
 753:src/xeq.c     **** 		lift();
 754:src/xeq.c     **** 	}
 755:src/xeq.c     **** #else
 756:src/xeq.c     **** 	lift_if_enabled();
 757:src/xeq.c     **** 	lift();
 758:src/xeq.c     **** #endif
 759:src/xeq.c     **** }
 760:src/xeq.c     **** 
 761:src/xeq.c     **** void set_lift(void) {
 762:src/xeq.c     ****     State2.state_lift = 1;
 763:src/xeq.c     **** }
 764:src/xeq.c     **** 
 765:src/xeq.c     **** static void clr_lift(void) {
 766:src/xeq.c     ****     State2.state_lift = 0;
 767:src/xeq.c     **** }
 768:src/xeq.c     **** 
 769:src/xeq.c     **** static void lower(void) {
 770:src/xeq.c     **** 	const int n = stack_size();
 771:src/xeq.c     **** 	int i;
 772:src/xeq.c     **** 
 773:src/xeq.c     **** 	for (i=1; i<n; i++)
 774:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 775:src/xeq.c     **** }
 776:src/xeq.c     **** 
 777:src/xeq.c     **** static void lower2(void) {
 778:src/xeq.c     **** 	const int n = stack_size();
 779:src/xeq.c     **** 	int i;
 780:src/xeq.c     **** 
 781:src/xeq.c     **** 	for (i=2; i<n; i++)
 782:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 783:src/xeq.c     **** }
 784:src/xeq.c     **** 
 785:src/xeq.c     **** 
 786:src/xeq.c     **** void setlastX(void) {
 787:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 788:src/xeq.c     **** }
 789:src/xeq.c     **** 
 790:src/xeq.c     **** static void setlastXY(void) {
 791:src/xeq.c     **** 	setlastX();
 792:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 793:src/xeq.c     **** }
 794:src/xeq.c     **** 
 795:src/xeq.c     **** 
 796:src/xeq.c     **** decNumber *getRegister(decNumber *r, int index) {
 797:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 798:src/xeq.c     **** 	if (is_dblmode())
 799:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 800:src/xeq.c     **** 	else
 801:src/xeq.c     **** 		decimal64ToNumber(&(reg->s), r);
 802:src/xeq.c     **** 	return r;
 803:src/xeq.c     **** }
 804:src/xeq.c     **** 
 805:src/xeq.c     **** void setRegister(int index, const decNumber *x) {
 806:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 807:src/xeq.c     **** 	decNumber dn;
 808:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 19


 809:src/xeq.c     **** 	if (! check_special(x)) {	/* This correctly deals with infinities and NaN based on flag D */
 810:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 811:src/xeq.c     **** 		if (is_dblmode())
 812:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 813:src/xeq.c     **** 		else
 814:src/xeq.c     **** 			packed_from_number(&(reg->s), &dn);
 815:src/xeq.c     **** 	}
 816:src/xeq.c     **** }
 817:src/xeq.c     **** 
 818:src/xeq.c     **** decNumber *getX(decNumber *x) {
 819:src/xeq.c     **** 	return getRegister(x, regX_idx);
 820:src/xeq.c     **** }
 821:src/xeq.c     **** 
 822:src/xeq.c     **** void setX(const decNumber *x) {
 823:src/xeq.c     **** 	setRegister(regX_idx, x);
 824:src/xeq.c     **** }
 825:src/xeq.c     **** 
 826:src/xeq.c     **** void getY(decNumber *y) {
 827:src/xeq.c     **** 	getRegister(y, regY_idx);
 828:src/xeq.c     **** }
 829:src/xeq.c     **** 
 830:src/xeq.c     **** void setY(const decNumber *y) {
 831:src/xeq.c     **** 	setRegister(regY_idx, y);
 832:src/xeq.c     **** }
 833:src/xeq.c     **** 
 834:src/xeq.c     **** static void getZ(decNumber *z) {
 835:src/xeq.c     **** 	getRegister(z, regZ_idx);
 836:src/xeq.c     **** }
 837:src/xeq.c     **** 
 838:src/xeq.c     **** #if 0
 839:src/xeq.c     **** static void setZ(const decNumber *z) {
 840:src/xeq.c     **** 	setRegister(regZ_idx, z);
 841:src/xeq.c     **** }
 842:src/xeq.c     **** #endif
 843:src/xeq.c     **** 
 844:src/xeq.c     **** static void getT(decNumber *t) {
 845:src/xeq.c     **** 	getRegister(t, regT_idx);
 846:src/xeq.c     **** }
 847:src/xeq.c     **** 
 848:src/xeq.c     **** void getXY(decNumber *x, decNumber *y) {
 849:src/xeq.c     **** 	getX(x);
 850:src/xeq.c     **** 	getY(y);
 851:src/xeq.c     **** }
 852:src/xeq.c     **** 
 853:src/xeq.c     **** void setXY(const decNumber *x, const decNumber *y) {
 854:src/xeq.c     **** 	setX(x);
 855:src/xeq.c     **** 	setY(y);
 856:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 857:src/xeq.c     **** 	CLEAR_POLAR_READY;
 858:src/xeq.c     **** #endif
 859:src/xeq.c     **** }
 860:src/xeq.c     **** 
 861:src/xeq.c     **** void getXYZ(decNumber *x, decNumber *y, decNumber *z) {
 862:src/xeq.c     **** 	getXY(x, y);
 863:src/xeq.c     **** 	getZ(z);
 864:src/xeq.c     **** }
 865:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 20


 866:src/xeq.c     **** #if 0
 867:src/xeq.c     **** void setXYZ(const decNumber *x, const decNumber *y, const decNumber *z) {
 868:src/xeq.c     **** 	setXY(x, y);
 869:src/xeq.c     **** 	setZ(z);
 870:src/xeq.c     **** }
 871:src/xeq.c     **** #endif
 872:src/xeq.c     **** 
 873:src/xeq.c     **** void getXYZT(decNumber *x, decNumber *y, decNumber *z, decNumber *t) {
 874:src/xeq.c     **** 	getXYZ(x, y, z);
 875:src/xeq.c     **** 	getT(t);
 876:src/xeq.c     **** }
 877:src/xeq.c     **** 
 878:src/xeq.c     **** void getYZ(decNumber *y, decNumber *z) {
 879:src/xeq.c     **** 	getY(y);
 880:src/xeq.c     **** 	getZ(z);
 881:src/xeq.c     **** }
 882:src/xeq.c     **** 
 883:src/xeq.c     **** void roll_down(enum nilop op) {
 884:src/xeq.c     **** 	REGISTER r;
 885:src/xeq.c     **** 	copyreg(&r, StackBase);
 886:src/xeq.c     **** 	lower();
 887:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 888:src/xeq.c     **** }
 889:src/xeq.c     **** 
 890:src/xeq.c     **** void roll_up(enum nilop op) {
 891:src/xeq.c     **** 	REGISTER r;
 892:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 893:src/xeq.c     **** 	lift();
 894:src/xeq.c     **** 	copyreg(StackBase, &r);
 895:src/xeq.c     **** }
 896:src/xeq.c     **** 
 897:src/xeq.c     **** void cpx_roll_down(enum nilop op) {
 898:src/xeq.c     **** 	roll_down(OP_RDOWN);
 899:src/xeq.c     **** 	roll_down(OP_RDOWN);
 900:src/xeq.c     **** 	set_was_complex();
 901:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 902:src/xeq.c     **** 	CLEAR_POLAR_READY;
 903:src/xeq.c     **** #endif
 904:src/xeq.c     **** }
 905:src/xeq.c     **** 
 906:src/xeq.c     **** void cpx_roll_up(enum nilop op) {
 907:src/xeq.c     **** 	roll_up(OP_RUP);
 908:src/xeq.c     **** 	roll_up(OP_RUP);
 909:src/xeq.c     **** 	set_was_complex();
 910:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 911:src/xeq.c     **** 	CLEAR_POLAR_READY;
 912:src/xeq.c     **** #endif
 913:src/xeq.c     **** }
 914:src/xeq.c     **** 
 915:src/xeq.c     **** void cpx_enter(enum nilop op) {
 916:src/xeq.c     ****   if( (State2.state_lift || (XromRunning || Running)) && ENTRY_RPN_ENABLED ) { // flag is zero if e
 917:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 918:src/xeq.c     ****     lift();
 919:src/xeq.c     ****     lift();
 920:src/xeq.c     ****     copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 921:src/xeq.c     ****     set_was_complex();
 922:src/xeq.c     ****   }
ARM GAS  /tmp/ccQQPlfu.s 			page 21


 923:src/xeq.c     ****   else {
 924:src/xeq.c     ****     lift();
 925:src/xeq.c     ****     lift();
 926:src/xeq.c     ****     copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 927:src/xeq.c     ****     set_was_complex();
 928:src/xeq.c     ****   }
 929:src/xeq.c     **** }
 930:src/xeq.c     **** 
 931:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 932:src/xeq.c     **** 
 933:src/xeq.c     **** void convert_regK ( enum trig_modes i ) { // needed to change the displayed angular part in polar m
 934:src/xeq.c     **** 	decNumber k;
 935:src/xeq.c     **** 
 936:src/xeq.c     **** 	enum trig_modes j = get_trig_mode();
 937:src/xeq.c     **** 	if (i==j) return; // no mode change
 938:src/xeq.c     **** 	getRegister(&k, regK_idx);
 939:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 940:src/xeq.c     **** 		case TRIG_DEG:
 941:src/xeq.c     **** 			dn_divide(&k, &k, &const_360);
 942:src/xeq.c     **** 			break;
 943:src/xeq.c     **** 		case TRIG_RAD:
 944:src/xeq.c     **** 			dn_divide(&k, &k, &const_2PI);
 945:src/xeq.c     **** 			break;
 946:src/xeq.c     **** 		case TRIG_GRAD:
 947:src/xeq.c     **** 			dn_divide(&k, &k, &const_400);
 948:src/xeq.c     **** 		default:;
 949:src/xeq.c     **** 	}
 950:src/xeq.c     **** 	switch (i) { // convert to new angular units
 951:src/xeq.c     **** 		case TRIG_DEG:
 952:src/xeq.c     **** 			dn_multiply(&k, &k, &const_360);
 953:src/xeq.c     **** 			break;
 954:src/xeq.c     **** 		case TRIG_RAD:
 955:src/xeq.c     **** 			dn_multiply(&k, &k, &const_2PI);
 956:src/xeq.c     **** 			break;
 957:src/xeq.c     **** 		case TRIG_GRAD:
 958:src/xeq.c     **** 			dn_multiply(&k, &k, &const_400);
 959:src/xeq.c     **** 		default:;
 960:src/xeq.c     **** 	}
 961:src/xeq.c     **** 	setRegister(regK_idx, &k);
 962:src/xeq.c     **** }
 963:src/xeq.c     **** 
 964:src/xeq.c     **** void finish_cpx_entry ( int lift );
 965:src/xeq.c     **** void stack_begin ( int zero_y ); // defined in keys.c - needed so it can be called here
 966:src/xeq.c     **** 
 967:src/xeq.c     **** void cpx_pi (enum nilop op) {
 968:src/xeq.c     **** 	switch (op) {
 969:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 970:src/xeq.c     **** 		if (!REAL_FLAG && !IMAG_FLAG) {
 971:src/xeq.c     **** 			stack_begin( 1 );
 972:src/xeq.c     **** 			SET_REAL;
 973:src/xeq.c     **** 		}
 974:src/xeq.c     **** 		copyreg(StackBase, get_const(OP_PI, is_dblmode()));
 975:src/xeq.c     **** 		break;
 976:src/xeq.c     **** 	case OP_PIB: // command line present - multiplies contents by pi
 977:src/xeq.c     **** 		State2.state_lift = 0;
 978:src/xeq.c     **** 		process_cmdline();
 979:src/xeq.c     **** 		State2.state_lift = 0;
ARM GAS  /tmp/ccQQPlfu.s 			page 22


 980:src/xeq.c     **** 		{
 981:src/xeq.c     **** 			decNumber r;
 982:src/xeq.c     **** 			getX(&r);
 983:src/xeq.c     **** 			dn_multiply (&r, &const_PI, &r);
 984:src/xeq.c     **** 			setX(&r);
 985:src/xeq.c     **** 		}
 986:src/xeq.c     **** 	default:;
 987:src/xeq.c     **** 	}
 988:src/xeq.c     **** 	CLEAR_POLAR_READY;
 989:src/xeq.c     **** }
 990:src/xeq.c     **** 
 991:src/xeq.c     **** #ifdef ENTRY_RPN
 992:src/xeq.c     **** void entry_rpn_on_off(enum nilop op) { // turn entry_rpn on/off
 993:src/xeq.c     ****   switch (op) {
 994:src/xeq.c     ****   case OP_ENTRY_ON:
 995:src/xeq.c     ****     ENTRY_RPN_ON;
 996:src/xeq.c     ****     return;
 997:src/xeq.c     ****   case OP_ENTRY_OFF:
 998:src/xeq.c     ****     ENTRY_RPN_OFF;
 999:src/xeq.c     ****     return;
1000:src/xeq.c     ****   default:;
1001:src/xeq.c     ****   }
1002:src/xeq.c     **** }
1003:src/xeq.c     **** #endif
1004:src/xeq.c     **** 
1005:src/xeq.c     **** void cpx_nop(enum nilop op) { // miscellaneous complex operations
1006:src/xeq.c     ****   reset_shift();
1007:src/xeq.c     **** 	switch (op) {
1008:src/xeq.c     **** 	case OP_CYES: // set flag to allow complex mode to be entered - can be called at any time
1009:src/xeq.c     **** 	        SET_CPX_YES;
1010:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
1011:src/xeq.c     **** 		CLEAR_IMAG;
1012:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
1013:src/xeq.c     **** 		return;
1014:src/xeq.c     **** 	case OP_C_ON: // start complex mode - only called if CPX_ENABLED and C_LOCK_OFF
1015:src/xeq.c     **** 		if (UState.stack_depth) { // save prior stack size 
1016:src/xeq.c     **** 			INIT_8;
1017:src/xeq.c     **** 		}
1018:src/xeq.c     **** 		else {
1019:src/xeq.c     **** 			INIT_4;
1020:src/xeq.c     **** 		}
1021:src/xeq.c     **** 		LOCK_C;
1022:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
1023:src/xeq.c     **** #ifdef DM42
1024:src/xeq.c     **** 		set_menu(M_C_Lock);
1025:src/xeq.c     **** 		display_current_menu();
1026:src/xeq.c     **** #endif
1027:src/xeq.c     **** 		break;
1028:src/xeq.c     **** 	case OP_CNO: // reset flag so that complex mode cannot be entered
1029:src/xeq.c     **** 		if (!C_LOCKED) { 
1030:src/xeq.c     **** 			SET_CPX_NO;
1031:src/xeq.c     **** 			UNLOCK_C; //just in case
1032:src/xeq.c     **** 			return;
1033:src/xeq.c     **** 		}
1034:src/xeq.c     **** 		SET_CPX_NO;
1035:src/xeq.c     **** 	case OP_C_OFF: // exit complex mode - only called if CPX_ENABLED and C_LOCK_ON
1036:src/xeq.c     **** 		finish_cpx_entry(1);
ARM GAS  /tmp/ccQQPlfu.s 			page 23


1037:src/xeq.c     **** 		UNLOCK_C;
1038:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
1039:src/xeq.c     **** 		State2.wascomplex = 0;
1040:src/xeq.c     **** #ifdef DM42
1041:src/xeq.c     **** 		set_default_menu();
1042:src/xeq.c     **** 		display_current_menu();
1043:src/xeq.c     **** #endif
1044:src/xeq.c     **** 		return;
1045:src/xeq.c     **** 	case OP_C_MIM: // change sign of imaginary part
1046:src/xeq.c     **** 		{
1047:src/xeq.c     **** 		decNumber y;
1048:src/xeq.c     **** 		getY(&y);
1049:src/xeq.c     **** 		dn_minus(&y, &y);
1050:src/xeq.c     **** 		setY(&y);
1051:src/xeq.c     **** 		}
1052:src/xeq.c     **** 		break;
1053:src/xeq.c     **** 	case OP_C_MRE: // change sign of real part
1054:src/xeq.c     **** 		{
1055:src/xeq.c     **** 		decNumber x;
1056:src/xeq.c     **** 		getX(&x);
1057:src/xeq.c     **** 		dn_minus(&x, &x);
1058:src/xeq.c     **** 		setX(&x);
1059:src/xeq.c     **** 		}
1060:src/xeq.c     **** 		break;
1061:src/xeq.c     **** 	case OP_C_IM: // zero real part
1062:src/xeq.c     **** 		zero_X();
1063:src/xeq.c     **** 		break;
1064:src/xeq.c     **** 	case OP_C_RE: // zero imag part
1065:src/xeq.c     **** 		zero_Y();
1066:src/xeq.c     **** 		break;
1067:src/xeq.c     **** 	case OP_CPXI: // use i to display complex numbers
1068:src/xeq.c     **** 		SET_CPX_I;
1069:src/xeq.c     **** 		break;
1070:src/xeq.c     **** 	case OP_CPXJ: // use j to display complex numbers
1071:src/xeq.c     **** 		SET_CPX_J;
1072:src/xeq.c     **** 		break;
1073:src/xeq.c     **** 	default:;
1074:src/xeq.c     **** 	}
1075:src/xeq.c     **** 	set_was_complex();
1076:src/xeq.c     **** 	CLEAR_POLAR_READY;
1077:src/xeq.c     **** }
1078:src/xeq.c     **** #endif
1079:src/xeq.c     **** 
1080:src/xeq.c     **** void cpx_fill(enum nilop op) {
1081:src/xeq.c     **** 	const int n = stack_size();
1082:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
1083:src/xeq.c     **** 	int i;
1084:src/xeq.c     **** 
1085:src/xeq.c     **** 	for (i=2; i<n; i++)
1086:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
1087:src/xeq.c     **** 	set_was_complex();
1088:src/xeq.c     **** }
1089:src/xeq.c     **** 
1090:src/xeq.c     **** void fill(enum nilop op) {
1091:src/xeq.c     **** 	const int n = stack_size();
1092:src/xeq.c     **** 	int i;
1093:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 24


1094:src/xeq.c     **** 	for (i=1; i<n; i++)
1095:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
1096:src/xeq.c     **** }
1097:src/xeq.c     **** 
1098:src/xeq.c     **** void drop(enum nilop op) {
1099:src/xeq.c     **** 	if (op == OP_DROPXY) {
1100:src/xeq.c     **** 		lower2();
1101:src/xeq.c     **** 		set_was_complex();
1102:src/xeq.c     **** 	} else
1103:src/xeq.c     **** 		lower();
1104:src/xeq.c     **** }
1105:src/xeq.c     **** 
1106:src/xeq.c     **** #ifndef is_intmode
1107:src/xeq.c     **** int is_intmode(void) {
1108:src/xeq.c     **** 	return UState.intm;
1109:src/xeq.c     **** }
1110:src/xeq.c     **** #endif
1111:src/xeq.c     **** 
1112:src/xeq.c     **** int is_dblmode(void) {
1113:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
1114:src/xeq.c     **** }
1115:src/xeq.c     **** 
1116:src/xeq.c     **** int is_usrdblmode(void) {
1117:src/xeq.c     **** 	if (XromFlags.xIN)
1118:src/xeq.c     **** 		return XromFlags.mode_double;
1119:src/xeq.c     **** 	return is_dblmode();
1120:src/xeq.c     **** }
1121:src/xeq.c     **** 
1122:src/xeq.c     **** /* Convert a possibly signed string to an integer
1123:src/xeq.c     ****  */
1124:src/xeq.c     **** int s_to_i(const char *s) {
1125:src/xeq.c     **** 	int x = 0;
1126:src/xeq.c     **** 	int neg;
1127:src/xeq.c     **** 
1128:src/xeq.c     **** 	if (*s == '-') {
1129:src/xeq.c     **** 		s++;
1130:src/xeq.c     **** 		neg = 1;
1131:src/xeq.c     **** 	} else {
1132:src/xeq.c     **** 		if (*s == '+')
1133:src/xeq.c     **** 			s++;
1134:src/xeq.c     **** 		neg = 0;
1135:src/xeq.c     **** 	}
1136:src/xeq.c     **** 
1137:src/xeq.c     **** 	for (;;) {
1138:src/xeq.c     **** 		const char c = *s++;
1139:src/xeq.c     **** 
1140:src/xeq.c     **** 		if (c < '0' || c > '9')
1141:src/xeq.c     **** 			break;
1142:src/xeq.c     **** 		x = 10 * x + (c - '0');
1143:src/xeq.c     **** 	}
1144:src/xeq.c     **** 	if (neg)
1145:src/xeq.c     **** 		return -x;
1146:src/xeq.c     **** 	return x;
1147:src/xeq.c     **** }
1148:src/xeq.c     **** 
1149:src/xeq.c     **** /* Convert a string in the given base to an unsigned integer
1150:src/xeq.c     ****  */
ARM GAS  /tmp/ccQQPlfu.s 			page 25


1151:src/xeq.c     **** unsigned long long int s_to_ull(const char *s, unsigned int base) {
1152:src/xeq.c     **** 	unsigned long long int x = 0;
1153:src/xeq.c     **** 
1154:src/xeq.c     **** 	for (;;) {
1155:src/xeq.c     **** 		unsigned int n;
1156:src/xeq.c     **** 		const char c = *s++;
1157:src/xeq.c     **** 
1158:src/xeq.c     **** 		if (c >= '0' && c <= '9')
1159:src/xeq.c     **** 			n = c - '0';
1160:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
1161:src/xeq.c     **** 			n = c - 'A' + 10;
1162:src/xeq.c     **** 		else
1163:src/xeq.c     **** 			break;
1164:src/xeq.c     **** 		if (n >= base)
1165:src/xeq.c     **** 			break;
1166:src/xeq.c     **** 		x = x * base + n;
1167:src/xeq.c     **** 	}
1168:src/xeq.c     **** 	return x;
1169:src/xeq.c     **** }
1170:src/xeq.c     **** 
1171:src/xeq.c     **** const char *get_cmdline(void) {
1172:src/xeq.c     **** 	if (CmdLineLength) {
1173:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
1174:src/xeq.c     **** 		return Cmdline;
1175:src/xeq.c     **** 	}
1176:src/xeq.c     **** 	return NULL;
1177:src/xeq.c     **** }
1178:src/xeq.c     **** 
1179:src/xeq.c     **** #if 0
1180:src/xeq.c     **** static int fract_convert_number(decNumber *x, const char *s) {
1181:src/xeq.c     **** 	if (*s == '\0') {
1182:src/xeq.c     **** 		report_err(ERR_DOMAIN);
1183:src/xeq.c     **** 		return 1;
1184:src/xeq.c     **** 	}
1185:src/xeq.c     **** 	decNumberFromString(x, s, &Ctx);
1186:src/xeq.c     **** 	return check_special(x);
1187:src/xeq.c     **** }
1188:src/xeq.c     **** #endif
1189:src/xeq.c     **** 
1190:src/xeq.c     **** /* Return 1 if the command line contains an error and also set an appropriate
1191:src/xeq.c     ****  * error message.
1192:src/xeq.c     ****  */
1193:src/xeq.c     **** int is_bad_cmdline(void)
1194:src/xeq.c     **** {
1195:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
1196:src/xeq.c     **** 	if (CmdLineDot == 2) {
1197:src/xeq.c     **** 		char *p;
1198:src/xeq.c     **** 
1199:src/xeq.c     **** 		// Check if there's a non-zero digit after the last decimal mark
1200:src/xeq.c     **** 		p = Cmdline + CmdLineLength;
1201:src/xeq.c     **** 		for (;;) {
1202:src/xeq.c     **** 			p--;
1203:src/xeq.c     **** 			if (*p >= '1' && *p <= '9')
1204:src/xeq.c     **** 				return 0;
1205:src/xeq.c     **** 			if (*p == '.')
1206:src/xeq.c     **** 				break;
1207:src/xeq.c     **** 		}
ARM GAS  /tmp/ccQQPlfu.s 			page 26


1208:src/xeq.c     **** 
1209:src/xeq.c     **** 		reset_shift();
1210:src/xeq.c     **** 		error_message(ERR_DOMAIN);
1211:src/xeq.c     **** 		State2.invalid_disp = 1;
1212:src/xeq.c     **** 		return 1;
1213:src/xeq.c     **** 	}
1214:src/xeq.c     **** #endif
1215:src/xeq.c     **** 	return 0;
1216:src/xeq.c     **** }
1217:src/xeq.c     **** 
1218:src/xeq.c     **** /* Process the command line if any
1219:src/xeq.c     ****  */
1220:src/xeq.c     **** void process_cmdline(void) {
1221:src/xeq.c     **** 	decNumber a, b, x, t;
1222:src/xeq.c     **** 
1223:src/xeq.c     **** 	if (CmdLineLength) {
1224:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
1225:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
1226:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1227:src/xeq.c     **** 		char cmdline[CMDLINELEN + 2];
1228:src/xeq.c     **** #else
1229:src/xeq.c     **** 		char cmdline[CMDLINELEN + 1];
1230:src/xeq.c     **** #endif
1231:src/xeq.c     **** 
1232:src/xeq.c     **** 		xcopy(cmdline, Cmdline, CMDLINELEN + 1);
1233:src/xeq.c     **** 
1234:src/xeq.c     **** 		cmdline[CmdLineLength] = '\0';
1235:src/xeq.c     **** 		if (!is_intmode()) {
1236:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1237:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E' || cmdline[CmdLineLength-1] == 'D')
1238:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1239:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
1240:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
1241:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
1242:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
1243:src/xeq.c     **** 			}
1244:src/xeq.c     **** #else
1245:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E')
1246:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1247:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
1248:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
1249:src/xeq.c     **** #endif
1250:src/xeq.c     **** 			if (0
1251:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
1252:src/xeq.c     **** 			    || CmdLineEex
1253:src/xeq.c     **** #endif
1254:src/xeq.c     **** #if FRACTION_MODE_INPUT & 4
1255:src/xeq.c     **** 			    || cmdlinedot == 1
1256:src/xeq.c     **** #endif
1257:src/xeq.c     **** 			   )
1258:src/xeq.c     **** 				UState.fract = 0;
1259:src/xeq.c     **** 		}
1260:src/xeq.c     **** 		CmdLineLength = 0;
1261:src/xeq.c     **** 		lift_if_enabled();
1262:src/xeq.c     **** 		set_lift();
1263:src/xeq.c     **** 		CmdLineDot = 0;
1264:src/xeq.c     **** 		CmdLineEex = 0;
ARM GAS  /tmp/ccQQPlfu.s 			page 27


1265:src/xeq.c     **** 		if (is_intmode()) {
1266:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
1267:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
1268:src/xeq.c     **** 			setX_int_sgn(x, sgn);
1269:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
1270:src/xeq.c     **** 			char *d0, *d1, *d2;
1271:src/xeq.c     **** 			int neg;
1272:src/xeq.c     **** 
1273:src/xeq.c     **** 			if (bad_cmdline)
1274:src/xeq.c     **** 				return;
1275:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 8)
1276:src/xeq.c     **** 			UState.fract = 1;
1277:src/xeq.c     **** #endif
1278:src/xeq.c     **** 			if (cmdline[0] == '-') {
1279:src/xeq.c     **** 				neg = 1;
1280:src/xeq.c     **** 				d0 = cmdline+1;
1281:src/xeq.c     **** 			} else {
1282:src/xeq.c     **** 				neg = 0;
1283:src/xeq.c     **** 				d0 = cmdline;
1284:src/xeq.c     **** 			}
1285:src/xeq.c     **** 			d1 = find_char(d0, '.');
1286:src/xeq.c     **** 			*d1++ = '\0';
1287:src/xeq.c     **** 			d2 = find_char(d1, '.');
1288:src/xeq.c     **** 			*d2++ = '\0';
1289:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
1290:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
1291:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1292:src/xeq.c     **** 			if (d2 == d1+1) { // ND change starts here; if dots are adjacent...
1293:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
1294:src/xeq.c     **** 				decNumberZero(&x); // and zero x
1295:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
1296:src/xeq.c     **** 				UState.improperfrac = 1;
1297:src/xeq.c     **** #endif
1298:src/xeq.c     **** 			}
1299:src/xeq.c     **** 			else
1300:src/xeq.c     **** #endif
1301:src/xeq.c     **** 			{
1302:src/xeq.c     **** 				decNumberFromString(&a, d1, &Ctx);
1303:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1304:src/xeq.c     **** 				UState.improperfrac = 0;
1305:src/xeq.c     **** #endif
1306:src/xeq.c     **** 			}
1307:src/xeq.c     **** 			dn_divide(&t, &a, &b);
1308:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
1309:src/xeq.c     **** 			if (!decNumberIsSpecial(&t))
1310:src/xeq.c     **** #endif
1311:src/xeq.c     **** 				dn_add(&x, &x, &t);
1312:src/xeq.c     **** 			if (neg)
1313:src/xeq.c     **** 				dn_minus(&x, &x);
1314:src/xeq.c     **** 			setX(&x);
1315:src/xeq.c     **** 		} else {
1316:src/xeq.c     **** 			decNumberFromString(&x, cmdline, &Ctx);
1317:src/xeq.c     **** 			setX(&x);
1318:src/xeq.c     **** 		}
1319:src/xeq.c     **** 		set_entry();
1320:src/xeq.c     **** #ifndef DM42
1321:src/xeq.c     **** 		print_trace( TRACE_DATA_ENTRY, 1 );
ARM GAS  /tmp/ccQQPlfu.s 			page 28


1322:src/xeq.c     **** #endif
1323:src/xeq.c     **** 	}
1324:src/xeq.c     **** }
1325:src/xeq.c     **** 
1326:src/xeq.c     **** void process_cmdline_set_lift(void) {
1327:src/xeq.c     **** 	process_cmdline();
1328:src/xeq.c     **** 	set_lift();
1329:src/xeq.c     **** }
1330:src/xeq.c     **** 
1331:src/xeq.c     **** 
1332:src/xeq.c     **** /*
1333:src/xeq.c     ****  *  Return a pointer to a numbered register.
1334:src/xeq.c     ****  *  If locals are enabled and a non existent local register
1335:src/xeq.c     ****  *  is accessed, the respective global register is returned.
1336:src/xeq.c     ****  *  Error checking must be done outside this routine.
1337:src/xeq.c     ****  *  We force the beginning of the local registers on an even stack position.
1338:src/xeq.c     ****  *  This ensures 32 bit alignment of the decima64 object.
1339:src/xeq.c     ****  */
1340:src/xeq.c     **** /*
1341:src/xeq.c     ****  *  If working in double precision, register numbers must be remapped
1342:src/xeq.c     ****  */
1343:src/xeq.c     **** static decimal64 *reg_address(int n, decimal64 *const regs, decimal64 *const named_regs) {
 182              		.loc 1 1343 90 is_stmt 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
1344:src/xeq.c     **** 	const int dbl = is_dblmode();
 187              		.loc 1 1344 2 view .LVU58
 188              	.LBB1325:
 189              	.LBI1325:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 190              		.loc 1 1112 5 view .LVU59
 191              	.LBB1326:
1113:src/xeq.c     **** }
 192              		.loc 1 1113 2 view .LVU60
1113:src/xeq.c     **** }
 193              		.loc 1 1113 24 is_stmt 0 view .LVU61
 194 0000 154B     		ldr	r3, .L25
 195 0002 1B68     		ldr	r3, [r3]
 196              	.LBE1326:
 197              	.LBE1325:
1343:src/xeq.c     **** 	const int dbl = is_dblmode();
 198              		.loc 1 1343 90 view .LVU62
 199 0004 10B4     		push	{r4}
 200              		.cfi_def_cfa_offset 4
 201              		.cfi_offset 4, -4
 202              	.LBB1329:
 203              	.LBB1327:
1113:src/xeq.c     **** }
 204              		.loc 1 1113 24 view .LVU63
 205 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 206              	.LBE1327:
 207              	.LBE1329:
1345:src/xeq.c     **** 
1346:src/xeq.c     **** 	if (n < regX_idx)
 208              		.loc 1 1346 5 view .LVU64
ARM GAS  /tmp/ccQQPlfu.s 			page 29


 209 000a 6328     		cmp	r0, #99
 210              	.LBB1330:
 211              	.LBB1328:
1113:src/xeq.c     **** }
 212              		.loc 1 1113 24 view .LVU65
 213 000c 44F20103 		movw	r3, #16385
 214 0010 03EA0403 		and	r3, r3, r4
 215              	.LVL17:
1113:src/xeq.c     **** }
 216              		.loc 1 1113 24 view .LVU66
 217              	.LBE1328:
 218              	.LBE1330:
 219              		.loc 1 1346 2 is_stmt 1 view .LVU67
 220              		.loc 1 1346 5 is_stmt 0 view .LVU68
 221 0014 10DD     		ble	.L23
1347:src/xeq.c     **** 		return regs + n + (dbl ? n : 0);
1348:src/xeq.c     **** 
1349:src/xeq.c     **** 	n -= regX_idx;
 222              		.loc 1 1349 2 is_stmt 1 view .LVU69
1350:src/xeq.c     **** 	// Lettered register
1351:src/xeq.c     **** 	if (XromFlags.xIN)
 223              		.loc 1 1351 6 is_stmt 0 view .LVU70
 224 0016 1149     		ldr	r1, .L25+4
 225              	.LVL18:
 226              		.loc 1 1351 5 view .LVU71
 227 0018 91F90140 		ldrsb	r4, [r1, #1]
 228 001c 002C     		cmp	r4, #0
1349:src/xeq.c     **** 	// Lettered register
 229              		.loc 1 1349 4 view .LVU72
 230 001e A0F16401 		sub	r1, r0, #100
 231              	.LVL19:
 232              		.loc 1 1351 2 is_stmt 1 view .LVU73
 233              		.loc 1 1351 5 is_stmt 0 view .LVU74
 234 0022 13DB     		blt	.L24
1352:src/xeq.c     **** 		return (decimal64 *) (XromStack + n);
1353:src/xeq.c     **** 	if (dbl)
 235              		.loc 1 1353 2 is_stmt 1 view .LVU75
 236              		.loc 1 1353 5 is_stmt 0 view .LVU76
 237 0024 B3F5804F 		cmp	r3, #16384
1354:src/xeq.c     **** 		n = (n << 1) - STACK_SIZE - EXTRA_REG;
 238              		.loc 1 1354 3 is_stmt 1 view .LVU77
 239              		.loc 1 1354 10 is_stmt 0 view .LVU78
 240 0028 04BF     		itt	eq
 241 002a 4900     		lsleq	r1, r1, #1
 242              	.LVL20:
 243              		.loc 1 1354 5 view .LVU79
 244 002c 0C39     		subeq	r1, r1, #12
 245              	.LVL21:
1355:src/xeq.c     **** 	return named_regs + n;
 246              		.loc 1 1355 2 is_stmt 1 view .LVU80
 247              		.loc 1 1355 20 is_stmt 0 view .LVU81
 248 002e 02EBC100 		add	r0, r2, r1, lsl #3
1356:src/xeq.c     **** }
 249              		.loc 1 1356 1 view .LVU82
 250 0032 5DF8044B 		ldr	r4, [sp], #4
 251              		.cfi_remember_state
 252              		.cfi_restore 4
ARM GAS  /tmp/ccQQPlfu.s 			page 30


 253              		.cfi_def_cfa_offset 0
 254 0036 7047     		bx	lr
 255              	.LVL22:
 256              	.L23:
 257              		.cfi_restore_state
1347:src/xeq.c     **** 
 258              		.loc 1 1347 3 is_stmt 1 view .LVU83
1347:src/xeq.c     **** 
 259              		.loc 1 1347 19 is_stmt 0 view .LVU84
 260 0038 B3F5804F 		cmp	r3, #16384
1347:src/xeq.c     **** 
 261              		.loc 1 1347 15 view .LVU85
 262 003c 4FEAC002 		lsl	r2, r0, #3
 263              	.LVL23:
1347:src/xeq.c     **** 
 264              		.loc 1 1347 15 view .LVU86
 265 0040 08BF     		it	eq
 266 0042 0201     		lsleq	r2, r0, #4
1347:src/xeq.c     **** 
 267              		.loc 1 1347 19 view .LVU87
 268 0044 8818     		adds	r0, r1, r2
 269              	.LVL24:
 270              		.loc 1 1356 1 view .LVU88
 271 0046 5DF8044B 		ldr	r4, [sp], #4
 272              		.cfi_remember_state
 273              		.cfi_restore 4
 274              		.cfi_def_cfa_offset 0
 275 004a 7047     		bx	lr
 276              	.LVL25:
 277              	.L24:
 278              		.cfi_restore_state
1352:src/xeq.c     **** 	if (dbl)
 279              		.loc 1 1352 3 is_stmt 1 view .LVU89
1352:src/xeq.c     **** 	if (dbl)
 280              		.loc 1 1352 10 is_stmt 0 view .LVU90
 281 004c 0448     		ldr	r0, .L25+8
 282              		.loc 1 1356 1 view .LVU91
 283 004e 5DF8044B 		ldr	r4, [sp], #4
 284              		.cfi_restore 4
 285              		.cfi_def_cfa_offset 0
1352:src/xeq.c     **** 	if (dbl)
 286              		.loc 1 1352 10 view .LVU92
 287 0052 00EB0110 		add	r0, r0, r1, lsl #4
 288              		.loc 1 1356 1 view .LVU93
 289 0056 7047     		bx	lr
 290              	.L26:
 291              		.align	2
 292              	.L25:
 293 0058 00000000 		.word	main_ram
 294 005c 00000000 		.word	XromParams
 295 0060 00000000 		.word	XromLocal
 296              		.cfi_endproc
 297              	.LFE90:
 299              		.section	.text.retstk_up,"ax",%progbits
 300              		.align	1
 301              		.p2align 2,,3
 302              		.syntax unified
ARM GAS  /tmp/ccQQPlfu.s 			page 31


 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	retstk_up:
 308              	.LFB150:
1357:src/xeq.c     **** 
1358:src/xeq.c     **** REGISTER *get_reg_n(int n) {
1359:src/xeq.c     **** 	const int dbl = is_dblmode();
1360:src/xeq.c     **** 
1361:src/xeq.c     **** 	if (n >= CONST_REG_BASE) {
1362:src/xeq.c     **** 		n -= CONST_REG_BASE;
1363:src/xeq.c     **** 		return get_const(n, dbl);
1364:src/xeq.c     **** 	}
1365:src/xeq.c     **** 	if (n >= FLASH_REG_BASE)
1366:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
1367:src/xeq.c     **** 
1368:src/xeq.c     **** 	if (n >= LOCAL_REG_BASE && local_regs() > 0) {
1369:src/xeq.c     **** 		// local register on the return stack
1370:src/xeq.c     **** 		n -= LOCAL_REG_BASE;
1371:src/xeq.c     **** 		if (dbl)
1372:src/xeq.c     **** 			n <<= 1;
1373:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
1374:src/xeq.c     **** 	}
1375:src/xeq.c     **** 	return (REGISTER *) reg_address(n, Regs + TOPREALREG - NumRegs, Regs + regX_idx);
1376:src/xeq.c     **** }
1377:src/xeq.c     **** 
1378:src/xeq.c     **** 
1379:src/xeq.c     **** REGISTER *get_flash_reg_n(int n) {
1380:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
1381:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
1382:src/xeq.c     **** }
1383:src/xeq.c     **** 
1384:src/xeq.c     **** 
1385:src/xeq.c     **** /*
1386:src/xeq.c     ****  *  Get a constatnt by index and mode
1387:src/xeq.c     ****  *  In case of a conversion, a private copy is returned
1388:src/xeq.c     ****  */
1389:src/xeq.c     **** REGISTER *get_const(int index, int dbl)
1390:src/xeq.c     **** {
1391:src/xeq.c     **** 	static REGISTER result;
1392:src/xeq.c     **** 	const int i = cnsts[index].index;
1393:src/xeq.c     **** 	if (dbl) {
1394:src/xeq.c     **** 		if (i <= 1 || i >= 128)
1395:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
1396:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
1397:src/xeq.c     **** 	}
1398:src/xeq.c     **** 	else {
1399:src/xeq.c     **** 		if (i < 128)
1400:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
1401:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
1402:src/xeq.c     **** 	}
1403:src/xeq.c     **** 	return &result;
1404:src/xeq.c     **** }
1405:src/xeq.c     **** 
1406:src/xeq.c     **** 
1407:src/xeq.c     **** /*  Some conversion routines to take decimals and produce integers
1408:src/xeq.c     ****  *  This is for opaque storage, no conversion takes place.
ARM GAS  /tmp/ccQQPlfu.s 			page 32


1409:src/xeq.c     ****  */
1410:src/xeq.c     **** long long int get_reg_n_int(int index) {
1411:src/xeq.c     **** 	long long int ll;
1412:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
1413:src/xeq.c     **** 	return ll;
1414:src/xeq.c     **** }
1415:src/xeq.c     **** 
1416:src/xeq.c     **** void set_reg_n_int(int index, long long int ll) {
1417:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
1418:src/xeq.c     **** }
1419:src/xeq.c     **** 
1420:src/xeq.c     **** /* Get an integer from a register
1421:src/xeq.c     ****  */
1422:src/xeq.c     **** unsigned long long int get_reg_n_int_sgn(int index, int *sgn) {
1423:src/xeq.c     **** 	if (is_intmode()) {
1424:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
1425:src/xeq.c     **** 	} else {
1426:src/xeq.c     **** 		decNumber n;
1427:src/xeq.c     **** 
1428:src/xeq.c     **** 		getRegister(&n, index);
1429:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
1430:src/xeq.c     **** 	}
1431:src/xeq.c     **** }
1432:src/xeq.c     **** 
1433:src/xeq.c     **** 
1434:src/xeq.c     **** /* Get an integer from X
1435:src/xeq.c     ****  */
1436:src/xeq.c     **** long long int getX_int(void) {
1437:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
1438:src/xeq.c     **** }
1439:src/xeq.c     **** 
1440:src/xeq.c     **** unsigned long long int getX_int_sgn(int *sgn) {
1441:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
1442:src/xeq.c     **** }
1443:src/xeq.c     **** 
1444:src/xeq.c     **** /*
1445:src/xeq.c     ****  *  Forced conversion from real to intger
1446:src/xeq.c     ****  *  Leaves integer mode active on return!
1447:src/xeq.c     ****  */
1448:src/xeq.c     **** static void int_from_register(int out, int in) {
1449:src/xeq.c     **** 	int sgn;
1450:src/xeq.c     **** 	unsigned long long int val;
1451:src/xeq.c     **** 	
1452:src/xeq.c     **** 	UState.intm = 0;	// Force real mode access
1453:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1454:src/xeq.c     **** 
1455:src/xeq.c     **** 	UState.intm = 1;	// Force integer access
1456:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1457:src/xeq.c     **** }
1458:src/xeq.c     **** 
1459:src/xeq.c     **** /* Put an integer into a register
1460:src/xeq.c     ****  */
1461:src/xeq.c     **** void set_reg_n_int_sgn(int index, unsigned long long int val, int sgn) {
1462:src/xeq.c     **** 	if (is_intmode()) {
1463:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
1464:src/xeq.c     **** 	} else {
1465:src/xeq.c     **** 		decNumber t;
ARM GAS  /tmp/ccQQPlfu.s 			page 33


1466:src/xeq.c     **** 
1467:src/xeq.c     **** 		ullint_to_dn(&t, val);
1468:src/xeq.c     **** 		if (sgn)
1469:src/xeq.c     **** 			dn_minus(&t, &t);
1470:src/xeq.c     **** 		setRegister(index, &t);
1471:src/xeq.c     **** 	}
1472:src/xeq.c     **** }
1473:src/xeq.c     **** 
1474:src/xeq.c     **** /* 
1475:src/xeq.c     ****  *  Forced conversion from integer to register format.
1476:src/xeq.c     ****  *  Leaves integer mode off after conversion.
1477:src/xeq.c     ****  *  Destination may be in XROM register space
1478:src/xeq.c     ****  */
1479:src/xeq.c     **** static void register_from_int(int out, int in, int called_from_xin) {
1480:src/xeq.c     **** 	int sgn;
1481:src/xeq.c     **** 	unsigned long long int val;
1482:src/xeq.c     **** 	const int xin = XromFlags.xIN;
1483:src/xeq.c     **** 	
1484:src/xeq.c     **** 	if (called_from_xin)
1485:src/xeq.c     **** 		XromFlags.xIN = 0;
1486:src/xeq.c     **** 	UState.intm = 1;
1487:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1488:src/xeq.c     **** 
1489:src/xeq.c     **** 	XromFlags.xIN = xin;
1490:src/xeq.c     **** 	UState.intm = 0;
1491:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1492:src/xeq.c     **** }
1493:src/xeq.c     **** 
1494:src/xeq.c     **** 
1495:src/xeq.c     **** /* Put an integer into X
1496:src/xeq.c     ****  * Integer registers are always single precision!
1497:src/xeq.c     ****  */
1498:src/xeq.c     **** void setX_int(long long int val) {
1499:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
1500:src/xeq.c     **** }
1501:src/xeq.c     **** 
1502:src/xeq.c     **** 
1503:src/xeq.c     **** void setX_int_sgn(unsigned long long int val, int sgn) {
1504:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
1505:src/xeq.c     **** }
1506:src/xeq.c     **** 
1507:src/xeq.c     **** 
1508:src/xeq.c     **** 
1509:src/xeq.c     **** /*
1510:src/xeq.c     ****  *  Set the register value explicitely
1511:src/xeq.c     ****  */
1512:src/xeq.c     **** void zero_regs(REGISTER *dest, int n) {
1513:src/xeq.c     **** #if 0
1514:src/xeq.c     **** 	if (is_intmode())
1515:src/xeq.c     **** 		xset(dest, 0, n << 3);
1516:src/xeq.c     **** 	else {
1517:src/xeq.c     **** 		REGISTER *const zero = get_reg_n(CONST_REG_BASE + OP_ZERO);
1518:src/xeq.c     **** 		const int reg_size = is_dblmode() ? sizeof(decimal128) : sizeof(decimal64);
1519:src/xeq.c     **** 		char *d = (char *) dest;
1520:src/xeq.c     **** 		int i;
1521:src/xeq.c     **** 		for (i = 0; i < n; ++i, d += reg_size)
1522:src/xeq.c     **** 			copyreg((REGISTER *) d, zero);
ARM GAS  /tmp/ccQQPlfu.s 			page 34


1523:src/xeq.c     **** 	}
1524:src/xeq.c     **** #else
1525:src/xeq.c     **** 	// This works for all modes
1526:src/xeq.c     **** 	// no it doesn't -- it leaves varying values of zero around
1527:src/xeq.c     **** 	xset(dest, 0, n << (3 + is_dblmode()));
1528:src/xeq.c     **** #endif
1529:src/xeq.c     **** }
1530:src/xeq.c     **** 
1531:src/xeq.c     **** void move_regs(REGISTER *dest, REGISTER *src, int n) {
1532:src/xeq.c     **** 	if (is_dblmode())
1533:src/xeq.c     **** 		n <<= 1;
1534:src/xeq.c     **** 	xcopy(dest, src, n << 3);
1535:src/xeq.c     **** }
1536:src/xeq.c     **** 
1537:src/xeq.c     **** 
1538:src/xeq.c     **** /* Zero a register
1539:src/xeq.c     ****  */
1540:src/xeq.c     **** static void set_zero(REGISTER *x) {
1541:src/xeq.c     **** 	zero_regs(x, 1);
1542:src/xeq.c     **** }
1543:src/xeq.c     **** 
1544:src/xeq.c     **** void zero_X(void) {
1545:src/xeq.c     **** 	set_zero(StackBase);
1546:src/xeq.c     **** }
1547:src/xeq.c     **** 
1548:src/xeq.c     **** void zero_Y(void) {
1549:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
1550:src/xeq.c     **** }
1551:src/xeq.c     **** 
1552:src/xeq.c     **** void clrx(enum nilop op) {
1553:src/xeq.c     **** 	zero_X();
1554:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1555:src/xeq.c     **** 	if (C_LOCKED) {
1556:src/xeq.c     **** 		zero_Y();
1557:src/xeq.c     **** 		if (POLAR_DISPLAY) {
1558:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
1559:src/xeq.c     **** 			set_zero(get_reg_n(regK_idx));
1560:src/xeq.c     **** 		}
1561:src/xeq.c     **** 		CLEAR_REAL;
1562:src/xeq.c     **** 		CLEAR_IMAG;
1563:src/xeq.c     **** 	}
1564:src/xeq.c     **** #endif
1565:src/xeq.c     **** 	clr_lift();
1566:src/xeq.c     **** }
1567:src/xeq.c     **** 
1568:src/xeq.c     **** /* Zero out the stack
1569:src/xeq.c     ****  */
1570:src/xeq.c     **** void clrstk(enum nilop op) {
1571:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
1572:src/xeq.c     **** 	set_lift();
1573:src/xeq.c     **** }
1574:src/xeq.c     **** 
1575:src/xeq.c     **** 
1576:src/xeq.c     **** /* Zero out all registers excluding the stack and lastx
1577:src/xeq.c     ****  */	
1578:src/xeq.c     **** void clrreg(enum nilop op) {
1579:src/xeq.c     **** 	const int local = local_regs();
ARM GAS  /tmp/ccQQPlfu.s 			page 35


1580:src/xeq.c     **** 	process_cmdline_set_lift();
1581:src/xeq.c     **** 
1582:src/xeq.c     **** 	// erase register memory
1583:src/xeq.c     **** 	zero_regs(get_reg_n(0), global_regs());
1584:src/xeq.c     **** 
1585:src/xeq.c     **** 	// Clear A, B, C & D if they aren't part of the stack
1586:src/xeq.c     **** 	if (stack_size() != 8)
1587:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
1588:src/xeq.c     **** 
1589:src/xeq.c     **** 	// Clear J & K but not I and L since they are last X.
1590:src/xeq.c     **** 	zero_regs(get_reg_n(regJ_idx), 2);
1591:src/xeq.c     **** 
1592:src/xeq.c     **** 	// erase local registers but keep them allocated
1593:src/xeq.c     **** 	if (local)
1594:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
1595:src/xeq.c     **** }
1596:src/xeq.c     **** 
1597:src/xeq.c     **** 
1598:src/xeq.c     **** /* Clear the subroutine return stack
1599:src/xeq.c     ****  */
1600:src/xeq.c     **** void clrretstk(void) {
1601:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
1602:src/xeq.c     **** }
1603:src/xeq.c     **** 
1604:src/xeq.c     **** void clrretstk_pc(void) {
1605:src/xeq.c     **** 	clrretstk();
1606:src/xeq.c     **** 	raw_set_pc(0);
1607:src/xeq.c     **** 	update_program_bounds(1);
1608:src/xeq.c     **** }
1609:src/xeq.c     **** 
1610:src/xeq.c     **** 
1611:src/xeq.c     **** /*
1612:src/xeq.c     ****  *  Command to allow access to constants and small integers
1613:src/xeq.c     ****  */
1614:src/xeq.c     **** void cmdconst(unsigned int arg, enum rarg op) {
1615:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
1616:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX || op == RARG_IND_CONST_CMPLX) {
1617:src/xeq.c     **** #else
1618:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX) {
1619:src/xeq.c     **** #endif
1620:src/xeq.c     **** 		lift2_if_enabled();
1621:src/xeq.c     **** 		zero_Y();
1622:src/xeq.c     **** 		set_was_complex();
1623:src/xeq.c     **** 	} else
1624:src/xeq.c     **** 		lift_if_enabled();
1625:src/xeq.c     **** 
1626:src/xeq.c     **** 	if (op == RARG_INTNUM || op == RARG_INTNUM_CMPLX)
1627:src/xeq.c     **** 		setX_int_sgn(arg, 0);
1628:src/xeq.c     **** 	else if (is_intmode())
1629:src/xeq.c     **** 		bad_mode_error();
1630:src/xeq.c     **** 	else 
1631:src/xeq.c     **** 		copyreg(StackBase, get_const(arg, is_dblmode()));
1632:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1633:src/xeq.c     **** 	CLEAR_POLAR_READY;
1634:src/xeq.c     **** #endif
1635:src/xeq.c     **** }
1636:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 36


1637:src/xeq.c     **** 
1638:src/xeq.c     **** /* Store/recall code here.
1639:src/xeq.c     ****  * These two are pretty much the same so we define some utility routines first.
1640:src/xeq.c     ****  */
1641:src/xeq.c     **** 
1642:src/xeq.c     **** /* Do a basic STO/RCL arithmetic operation.
1643:src/xeq.c     ****  */
1644:src/xeq.c     **** static int storcl_op(unsigned short opr, int index, decNumber *r, int rev) {
1645:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
1646:src/xeq.c     **** 
1647:src/xeq.c     **** 	getX(x);
1648:src/xeq.c     **** 	getRegister(y, index);
1649:src/xeq.c     **** 	if (rev) {
1650:src/xeq.c     **** 		x = y;
1651:src/xeq.c     **** 		y = &a;
1652:src/xeq.c     **** 	}
1653:src/xeq.c     **** 
1654:src/xeq.c     **** 	switch (opr) {
1655:src/xeq.c     **** 	case 1:
1656:src/xeq.c     **** 		dn_add(r, y, x);
1657:src/xeq.c     **** 		break;
1658:src/xeq.c     **** 	case 2:
1659:src/xeq.c     **** 		dn_subtract(r, y, x);
1660:src/xeq.c     **** 		break;
1661:src/xeq.c     **** 	case 3:
1662:src/xeq.c     **** 		dn_multiply(r, y, x);
1663:src/xeq.c     **** 		break;
1664:src/xeq.c     **** 	case 4:
1665:src/xeq.c     **** 		dn_divide(r, y, x);
1666:src/xeq.c     **** 		break;
1667:src/xeq.c     **** 	case 5:
1668:src/xeq.c     **** 		dn_min(r, y, x);
1669:src/xeq.c     **** 		break;
1670:src/xeq.c     **** 	case 6:
1671:src/xeq.c     **** 		dn_max(r, y, x);
1672:src/xeq.c     **** 		break;
1673:src/xeq.c     **** 	default:
1674:src/xeq.c     **** 		return 1;
1675:src/xeq.c     **** 	}
1676:src/xeq.c     **** 	return 0;
1677:src/xeq.c     **** }
1678:src/xeq.c     **** 
1679:src/xeq.c     **** static int storcl_intop(unsigned short opr, int index, long long int *r, int rev) {
1680:src/xeq.c     **** 	long long int x, y;
1681:src/xeq.c     **** 
1682:src/xeq.c     **** 	x = getX_int();
1683:src/xeq.c     **** 	y = get_reg_n_int(index);
1684:src/xeq.c     **** 
1685:src/xeq.c     **** 	if (rev) {
1686:src/xeq.c     **** 		const long long int t = x;
1687:src/xeq.c     **** 		x = y;
1688:src/xeq.c     **** 		y = t;
1689:src/xeq.c     **** 	}
1690:src/xeq.c     **** 
1691:src/xeq.c     **** 	switch (opr) {
1692:src/xeq.c     **** 	case 1:
1693:src/xeq.c     **** 		*r = intAdd(y, x);
ARM GAS  /tmp/ccQQPlfu.s 			page 37


1694:src/xeq.c     **** 		break;
1695:src/xeq.c     **** 	case 2:
1696:src/xeq.c     **** 		*r = intSubtract(y, x);
1697:src/xeq.c     **** 		break;
1698:src/xeq.c     **** 	case 3:
1699:src/xeq.c     **** 		*r = intMultiply(y, x);
1700:src/xeq.c     **** 		break;
1701:src/xeq.c     **** 	case 4:
1702:src/xeq.c     **** 		*r = intDivide(y, x);
1703:src/xeq.c     **** 		break;
1704:src/xeq.c     **** 	case 5:
1705:src/xeq.c     **** 		*r = intMin(y, x);
1706:src/xeq.c     **** 		break;
1707:src/xeq.c     **** 	case 6:
1708:src/xeq.c     **** 		*r = intMax(y, x);
1709:src/xeq.c     **** 		break;
1710:src/xeq.c     **** 	default:
1711:src/xeq.c     **** 		return 1;
1712:src/xeq.c     **** 	}
1713:src/xeq.c     **** 	return 0;
1714:src/xeq.c     **** }
1715:src/xeq.c     **** 
1716:src/xeq.c     **** /* We've got a STO operation to do.
1717:src/xeq.c     ****  */
1718:src/xeq.c     **** void cmdsto(unsigned int arg, enum rarg op) {
1719:src/xeq.c     **** 	if (op == RARG_STO) {
1720:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
1721:src/xeq.c     **** 	} else {
1722:src/xeq.c     **** 		if (is_intmode()) {
1723:src/xeq.c     **** 			long long int r;
1724:src/xeq.c     **** 
1725:src/xeq.c     **** 			if (storcl_intop(op - RARG_STO, arg, &r, 0))
1726:src/xeq.c     **** 				illegal(op);
1727:src/xeq.c     **** 			set_reg_n_int(arg, r);
1728:src/xeq.c     **** 		} else {
1729:src/xeq.c     **** 			decNumber r;
1730:src/xeq.c     **** 
1731:src/xeq.c     **** 			if (storcl_op(op - RARG_STO, arg, &r, 0))
1732:src/xeq.c     **** 				illegal(op);
1733:src/xeq.c     **** 			setRegister(arg, &r);
1734:src/xeq.c     **** 		}
1735:src/xeq.c     **** 	}
1736:src/xeq.c     **** }
1737:src/xeq.c     **** 
1738:src/xeq.c     **** /* We've got a RCL operation to do.
1739:src/xeq.c     ****  */
1740:src/xeq.c     **** static void do_rcl(int index, enum rarg op) {
1741:src/xeq.c     **** 	if (op == RARG_RCL) {
1742:src/xeq.c     **** 		REGISTER temp;
1743:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
1744:src/xeq.c     **** 		lift_if_enabled();
1745:src/xeq.c     **** 		copyreg(StackBase, &temp);
1746:src/xeq.c     **** 	} else {
1747:src/xeq.c     **** 		if (is_intmode()) {
1748:src/xeq.c     **** 			long long int r;
1749:src/xeq.c     **** 
1750:src/xeq.c     **** 			if (storcl_intop(op - RARG_RCL, index, &r, 1))
ARM GAS  /tmp/ccQQPlfu.s 			page 38


1751:src/xeq.c     **** 				illegal(op);
1752:src/xeq.c     **** 			setlastX();
1753:src/xeq.c     **** 			setX_int(r);
1754:src/xeq.c     **** 		} else {
1755:src/xeq.c     **** 			decNumber r;
1756:src/xeq.c     **** 
1757:src/xeq.c     **** 			if (storcl_op(op - RARG_RCL, index, &r, 1))
1758:src/xeq.c     **** 				illegal(op);
1759:src/xeq.c     **** 			setlastX();
1760:src/xeq.c     **** 			setX(&r);
1761:src/xeq.c     **** 		}
1762:src/xeq.c     **** 	}
1763:src/xeq.c     **** }
1764:src/xeq.c     **** 
1765:src/xeq.c     **** void cmdrcl(unsigned int arg, enum rarg op) {
1766:src/xeq.c     **** 	do_rcl(arg, op);
1767:src/xeq.c     **** }
1768:src/xeq.c     **** 
1769:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1770:src/xeq.c     **** void cmdflashrcl(unsigned int arg, enum rarg op) {
1771:src/xeq.c     **** 	do_rcl(FLASH_REG_BASE + arg, op - RARG_FLRCL + RARG_RCL);
1772:src/xeq.c     **** }
1773:src/xeq.c     **** #endif
1774:src/xeq.c     **** 
1775:src/xeq.c     **** /* And the complex equivalents for the above.
1776:src/xeq.c     ****  * We pair registers arg & arg+1 to provide a complex number
1777:src/xeq.c     ****  */
1778:src/xeq.c     **** static int storcl_cop(unsigned short opr, int index, decNumber *r1, decNumber *r2, int rev) {
1779:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
1780:src/xeq.c     **** 
1781:src/xeq.c     **** 	getXY(x + 0, x + 1);
1782:src/xeq.c     **** 	getRegister(y + 0, index);
1783:src/xeq.c     **** 	getRegister(y + 1, index + 1);
1784:src/xeq.c     **** 
1785:src/xeq.c     **** 	if (rev) {
1786:src/xeq.c     **** 		x = y;
1787:src/xeq.c     **** 		y = a;
1788:src/xeq.c     **** 	}
1789:src/xeq.c     **** 
1790:src/xeq.c     **** 	switch (opr) {
1791:src/xeq.c     **** 	case 1:
1792:src/xeq.c     **** 		cmplxAdd(r1, r2, y + 0, y + 1, x + 0, x + 1);
1793:src/xeq.c     **** 		break;
1794:src/xeq.c     **** 	case 2:
1795:src/xeq.c     **** 		cmplxSubtract(r1, r2, y + 0, y + 1, x + 0, x + 1);
1796:src/xeq.c     **** 		break;
1797:src/xeq.c     **** 	case 3:
1798:src/xeq.c     **** 		cmplxMultiply(r1, r2, y + 0, y + 1, x + 0, x + 1);
1799:src/xeq.c     **** 		break;
1800:src/xeq.c     **** 	case 4:
1801:src/xeq.c     **** 		cmplxDivide(r1, r2, y + 0, y + 1, x + 0, x + 1);
1802:src/xeq.c     **** 		break;
1803:src/xeq.c     **** 	default:
1804:src/xeq.c     **** 		return 1;
1805:src/xeq.c     **** 	}
1806:src/xeq.c     **** 	return 0;
1807:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 39


1808:src/xeq.c     **** 
1809:src/xeq.c     **** 
1810:src/xeq.c     **** void cmdcsto(unsigned int arg, enum rarg op) {
1811:src/xeq.c     **** 	decNumber r1, r2;
1812:src/xeq.c     **** 	REGISTER *t1, *t2;
1813:src/xeq.c     **** 
1814:src/xeq.c     **** 	t1 = get_reg_n(arg);
1815:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
1816:src/xeq.c     **** 
1817:src/xeq.c     **** 	if (op == RARG_CSTO) {
1818:src/xeq.c     **** 		copyreg(t1, StackBase);
1819:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
1820:src/xeq.c     **** 	} else {
1821:src/xeq.c     **** 		if (is_intmode())
1822:src/xeq.c     **** 			bad_mode_error();
1823:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
1824:src/xeq.c     **** 			illegal(op);
1825:src/xeq.c     **** 		else {
1826:src/xeq.c     **** 			setRegister(arg, &r1);
1827:src/xeq.c     **** 			setRegister(arg + 1, &r2);
1828:src/xeq.c     **** 		}
1829:src/xeq.c     **** 	}
1830:src/xeq.c     **** 	set_was_complex();
1831:src/xeq.c     **** }
1832:src/xeq.c     **** 
1833:src/xeq.c     **** static void do_crcl(int index, enum rarg op) {
1834:src/xeq.c     **** 	decNumber r1, r2;
1835:src/xeq.c     **** 
1836:src/xeq.c     **** 	if (op == RARG_CRCL) {
1837:src/xeq.c     **** 		REGISTER x, y;
1838:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
1839:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
1840:src/xeq.c     **** 		lift2_if_enabled();
1841:src/xeq.c     **** 		copyreg(StackBase, &x);
1842:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
1843:src/xeq.c     **** 	} else {
1844:src/xeq.c     **** 		if (is_intmode())
1845:src/xeq.c     **** 			bad_mode_error();
1846:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
1847:src/xeq.c     **** 			illegal(op);
1848:src/xeq.c     **** 		else {
1849:src/xeq.c     **** 			setlastXY();
1850:src/xeq.c     **** 			setXY(&r1, &r2);
1851:src/xeq.c     **** 		}
1852:src/xeq.c     **** 	}
1853:src/xeq.c     **** 	set_was_complex();
1854:src/xeq.c     **** }
1855:src/xeq.c     **** 
1856:src/xeq.c     **** void cmdcrcl(unsigned int arg, enum rarg op) {
1857:src/xeq.c     **** 	do_crcl(arg, op);
1858:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1859:src/xeq.c     **** 	CLEAR_POLAR_READY;
1860:src/xeq.c     **** #endif
1861:src/xeq.c     **** }
1862:src/xeq.c     **** 
1863:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1864:src/xeq.c     **** void cmdflashcrcl(unsigned int arg, enum rarg op) {
ARM GAS  /tmp/ccQQPlfu.s 			page 40


1865:src/xeq.c     **** 	do_crcl(FLASH_REG_BASE + arg, op - RARG_FLCRCL + RARG_CRCL);
1866:src/xeq.c     **** }
1867:src/xeq.c     **** #endif
1868:src/xeq.c     **** 
1869:src/xeq.c     **** /*
1870:src/xeq.c     ****  *  "Alien" RCL commands to convert registers originally stored in a different format
1871:src/xeq.c     ****  */
1872:src/xeq.c     **** // RCL of an integer value
1873:src/xeq.c     **** void cmdircl(unsigned int arg, enum rarg op) {
1874:src/xeq.c     **** 	if (is_intmode())
1875:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
1876:src/xeq.c     **** 	else
1877:src/xeq.c     **** 		register_from_int(regX_idx, arg, 0);
1878:src/xeq.c     **** }
1879:src/xeq.c     **** 
1880:src/xeq.c     **** // RCL of a single or double precision real value
1881:src/xeq.c     **** void cmdrrcl(unsigned int arg, enum rarg op) {
1882:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
1883:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
1884:src/xeq.c     **** 
1885:src/xeq.c     **** 	if (rcl_dbl && arg >= regX_idx && arg <= regK_idx) {
1886:src/xeq.c     **** 		// dRCL is not valid for lettered registers
1887:src/xeq.c     **** 		report_err(ERR_RANGE);
1888:src/xeq.c     **** 		return;
1889:src/xeq.c     **** 	}
1890:src/xeq.c     **** 
1891:src/xeq.c     **** 	UState.mode_double = rcl_dbl; // Force reading in requested format
1892:src/xeq.c     **** 	if (is_intmode()) {
1893:src/xeq.c     **** 		int_from_register(regX_idx, arg);
1894:src/xeq.c     **** 		UState.mode_double = was_dbl;
1895:src/xeq.c     **** 	}
1896:src/xeq.c     **** 	else {
1897:src/xeq.c     **** 		decNumber x;
1898:src/xeq.c     **** 		getRegister(&x, arg);
1899:src/xeq.c     **** 
1900:src/xeq.c     **** 		UState.mode_double = was_dbl; // Force access in original mode
1901:src/xeq.c     **** 		setX(&x);
1902:src/xeq.c     **** 	}
1903:src/xeq.c     **** }
1904:src/xeq.c     **** 
1905:src/xeq.c     **** 
1906:src/xeq.c     **** /* SWAP x with the specified register
1907:src/xeq.c     ****  */
1908:src/xeq.c     **** void swap_reg(REGISTER *a, REGISTER *b) {
1909:src/xeq.c     **** 	REGISTER t;
1910:src/xeq.c     **** 
1911:src/xeq.c     **** 	copyreg(&t, a);
1912:src/xeq.c     **** 	copyreg(a, b);
1913:src/xeq.c     **** 	copyreg(b, &t);
1914:src/xeq.c     **** }
1915:src/xeq.c     **** 
1916:src/xeq.c     **** void cmdswap(unsigned int arg, enum rarg op) {
1917:src/xeq.c     **** 	int idx;
1918:src/xeq.c     **** 
1919:src/xeq.c     **** 	if (op == RARG_CSWAPX)
1920:src/xeq.c     **** 		idx = regX_idx;
1921:src/xeq.c     **** 	else if (op == RARG_CSWAPZ)
ARM GAS  /tmp/ccQQPlfu.s 			page 41


1922:src/xeq.c     **** 		idx = regZ_idx;
1923:src/xeq.c     **** 	else
1924:src/xeq.c     **** 		idx = regX_idx + (int)(op - RARG_SWAPX);
1925:src/xeq.c     **** 
1926:src/xeq.c     **** 	swap_reg(get_reg_n(idx), get_reg_n(arg));
1927:src/xeq.c     **** 
1928:src/xeq.c     **** 	if (op >= RARG_CSWAPX) {
1929:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
1930:src/xeq.c     **** 		set_was_complex();
1931:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1932:src/xeq.c     **** 	CLEAR_POLAR_READY;
1933:src/xeq.c     **** #endif
1934:src/xeq.c     **** 	}
1935:src/xeq.c     **** }
1936:src/xeq.c     **** 
1937:src/xeq.c     **** 
1938:src/xeq.c     **** /* View a specified register
1939:src/xeq.c     ****  */
1940:src/xeq.c     **** void cmdview(unsigned int arg, enum rarg op) {
1941:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
1942:src/xeq.c     **** 
1943:src/xeq.c     **** 	State2.wascomplex = cmplx;
1944:src/xeq.c     **** 	ShowRegister = arg;
1945:src/xeq.c     **** 	State2.disp_freeze = 0;
1946:src/xeq.c     **** 	display();
1947:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
1948:src/xeq.c     **** }
1949:src/xeq.c     **** 
1950:src/xeq.c     **** 
1951:src/xeq.c     **** /* Get the stack size */
1952:src/xeq.c     **** void get_stack_size(enum nilop op) {
1953:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
1954:src/xeq.c     **** }
1955:src/xeq.c     **** 
1956:src/xeq.c     **** void get_word_size(enum nilop op) {
1957:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
1958:src/xeq.c     **** }
1959:src/xeq.c     **** 
1960:src/xeq.c     **** void get_sign_mode(enum nilop op) {
1961:src/xeq.c     **** 	static const unsigned char modes[4] = {
1962:src/xeq.c     **** 		0x02,		// 2's complement
1963:src/xeq.c     **** 		0x01,		// 1's complement
1964:src/xeq.c     **** 		0x00,		// unsigned
1965:src/xeq.c     **** 		0x81		// sign and mantissa
1966:src/xeq.c     **** 	};
1967:src/xeq.c     **** 	const unsigned char v = modes[(int)int_mode()];
1968:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
1969:src/xeq.c     **** }
1970:src/xeq.c     **** 
1971:src/xeq.c     **** void get_base(enum nilop op) {
1972:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
1973:src/xeq.c     **** }
1974:src/xeq.c     **** 
1975:src/xeq.c     **** #ifdef DM42
1976:src/xeq.c     ****  long int DM42_Ticker () {
1977:src/xeq.c     ****     long int f, t;
1978:src/xeq.c     ****     t = get_rtc_ticks();
ARM GAS  /tmp/ccQQPlfu.s 			page 42


1979:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
1980:src/xeq.c     ****     return f;
1981:src/xeq.c     ****  }
1982:src/xeq.c     **** #endif
1983:src/xeq.c     **** /* Get the current ticker value */
1984:src/xeq.c     **** void op_ticks(enum nilop op) {
1985:src/xeq.c     **** #if !defined(CONSOLE)
1986:src/xeq.c     ****     setX_int_sgn(Ticker, 0);
1987:src/xeq.c     **** #else 
1988:src/xeq.c     ****     struct timeval tv;
1989:src/xeq.c     ****     long long int t;
1990:src/xeq.c     ****     gettimeofday(&tv, NULL);
1991:src/xeq.c     ****     t = tv.tv_sec * 10 + tv.tv_usec / 100000;
1992:src/xeq.c     ****     setX_int_sgn(t, 0);
1993:src/xeq.c     **** #endif
1994:src/xeq.c     **** }
1995:src/xeq.c     **** 
1996:src/xeq.c     **** /* Display the battery voltage */
1997:src/xeq.c     **** void op_voltage(enum nilop op) {
1998:src/xeq.c     **** 	decNumber t, u;
1999:src/xeq.c     **** #ifdef REALBUILD
2000:src/xeq.c     **** 	unsigned long long int v = 19 + Voltage;
2001:src/xeq.c     **** #elif defined(DM42)
2002:src/xeq.c     **** 	int v = get_vbat();
2003:src/xeq.c     **** 	v = v / 100;
2004:src/xeq.c     **** #else
2005:src/xeq.c     **** 	unsigned long long int v = 32;
2006:src/xeq.c     **** #endif
2007:src/xeq.c     **** 
2008:src/xeq.c     **** 	if (is_intmode()) {
2009:src/xeq.c     **** 		setX_int_sgn(v, 0);
2010:src/xeq.c     **** 	} else {
2011:src/xeq.c     **** 		ullint_to_dn(&t, v);
2012:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
2013:src/xeq.c     **** 		setX(&u);
2014:src/xeq.c     **** 	}
2015:src/xeq.c     **** }
2016:src/xeq.c     **** 
2017:src/xeq.c     **** /*
2018:src/xeq.c     ****  *  Commands to determine free memory
2019:src/xeq.c     ****  */
2020:src/xeq.c     **** int free_mem(void) {
2021:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
2022:src/xeq.c     **** }
2023:src/xeq.c     **** 
2024:src/xeq.c     **** int free_flash(void) {
2025:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
2026:src/xeq.c     **** }
2027:src/xeq.c     **** 
2028:src/xeq.c     **** void get_mem(enum nilop op) {
2029:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
2030:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
2031:src/xeq.c     **** 		 op == OP_FLASHQ ? free_flash() :
2032:src/xeq.c     **** 		 global_regs(),
2033:src/xeq.c     **** 		 0);
2034:src/xeq.c     **** }
2035:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 43


2036:src/xeq.c     **** 
2037:src/xeq.c     **** /* Check if a keystroke is pending in the buffer, if so return it to the specified
2038:src/xeq.c     ****  * register, if not skip the next step.
2039:src/xeq.c     ****  */
2040:src/xeq.c     **** void cmdkeyp(unsigned int arg, enum rarg op) {
2041:src/xeq.c     **** 	int cond = LastKey == 0;
2042:src/xeq.c     **** 	if (!cond) {
2043:src/xeq.c     **** 		int k = LastKey - 1;
2044:src/xeq.c     **** 		LastKey = 0;
2045:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
2046:src/xeq.c     **** 	}
2047:src/xeq.c     **** 	fin_tst(cond);
2048:src/xeq.c     **** }
2049:src/xeq.c     **** 
2050:src/xeq.c     **** /*
2051:src/xeq.c     ****  *  Get a key code from a register and translate it from row/colum to internal
2052:src/xeq.c     ****  *  Check for valid arguments
2053:src/xeq.c     ****  */
2054:src/xeq.c     **** static int get_keycode_from_reg(unsigned int n)
2055:src/xeq.c     **** {
2056:src/xeq.c     **** 	int sgn;
2057:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
2058:src/xeq.c     **** 	if ( c < 0 )
2059:src/xeq.c     **** 		report_err(ERR_RANGE);
2060:src/xeq.c     **** 	return c;
2061:src/xeq.c     **** }
2062:src/xeq.c     **** 
2063:src/xeq.c     **** /*
2064:src/xeq.c     ****  *  Take a row/column key code and feed it to the keyboard buffer
2065:src/xeq.c     ****  *  This stops program execution first to make sure, the key is not
2066:src/xeq.c     ****  *  read in by KEY? again.
2067:src/xeq.c     ****  */
2068:src/xeq.c     **** void cmdputkey(unsigned int arg, enum rarg op)
2069:src/xeq.c     **** {
2070:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
2071:src/xeq.c     **** 
2072:src/xeq.c     **** 	if (c >= 0) {
2073:src/xeq.c     **** 		set_running_off();
2074:src/xeq.c     **** 		put_key(c);
2075:src/xeq.c     **** 	}
2076:src/xeq.c     **** }
2077:src/xeq.c     **** 
2078:src/xeq.c     **** /*
2079:src/xeq.c     ****  *  Return the type of the keycode in register n
2080:src/xeq.c     ****  *  returns 0-9 for digits, 10 for ., +/-, EEX, 11 for f,g,h, 12 for all other keys.
2081:src/xeq.c     ****  *  Invalid codes produce an error.
2082:src/xeq.c     ****  */
2083:src/xeq.c     **** void cmdkeytype(unsigned int arg, enum rarg op)
2084:src/xeq.c     **** {
2085:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
2086:src/xeq.c     **** 	if ( c >= 0 ) {
2087:src/xeq.c     **** 		const char types[] = {
2088:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
2089:src/xeq.c     **** 			12, 12, 12, 11, 11, 11,
2090:src/xeq.c     **** 			12, 12, 10, 10, 12, 12,
2091:src/xeq.c     **** 			12,  7,  8,  9, 12, 12,
2092:src/xeq.c     **** 			12,  4,  5,  6, 12, 12,
ARM GAS  /tmp/ccQQPlfu.s 			page 44


2093:src/xeq.c     **** 			12,  1,  2,  3, 12, 12,
2094:src/xeq.c     **** 			12,  0, 10, 12, 12 };
2095:src/xeq.c     **** 		lift_if_enabled();
2096:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
2097:src/xeq.c     **** 	}
2098:src/xeq.c     **** }
2099:src/xeq.c     **** 
2100:src/xeq.c     **** 
2101:src/xeq.c     **** /* Check which operating mode we're in -- integer or real -- they both
2102:src/xeq.c     ****  * vector through this routine.
2103:src/xeq.c     ****  */
2104:src/xeq.c     **** void check_mode(enum nilop op) {
2105:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
2106:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
2107:src/xeq.c     **** 
2108:src/xeq.c     **** 	fin_tst(intmode == desired);
2109:src/xeq.c     **** }
2110:src/xeq.c     **** 
2111:src/xeq.c     **** 
2112:src/xeq.c     **** /* Check if DBLON is active
2113:src/xeq.c     ****  */
2114:src/xeq.c     **** void check_dblmode(enum nilop op) {
2115:src/xeq.c     **** 	fin_tst(is_dblmode());
2116:src/xeq.c     **** }
2117:src/xeq.c     **** 
2118:src/xeq.c     **** void op_query_xtal(enum nilop op) {
2119:src/xeq.c     **** 	fin_tst(Xtal);
2120:src/xeq.c     **** }
2121:src/xeq.c     **** 
2122:src/xeq.c     **** void op_query_print(enum nilop op) {
2123:src/xeq.c     **** #ifdef INFRARED
2124:src/xeq.c     **** 	fin_tst(1);
2125:src/xeq.c     **** #else
2126:src/xeq.c     **** 	fin_tst(0);
2127:src/xeq.c     **** #endif
2128:src/xeq.c     **** }
2129:src/xeq.c     **** 
2130:src/xeq.c     **** /* Save and restore the entire stack to sequential registers */
2131:src/xeq.c     **** static int check_stack_overlap(unsigned int arg) {
2132:src/xeq.c     **** 	const int n = stack_size();
2133:src/xeq.c     **** 
2134:src/xeq.c     **** 	if (arg + n <= global_regs() || arg >= NUMREG) {
2135:src/xeq.c     **** 		return n;
2136:src/xeq.c     **** 	}
2137:src/xeq.c     **** 	report_err(ERR_STK_CLASH);
2138:src/xeq.c     **** 	return 0;
2139:src/xeq.c     **** }
2140:src/xeq.c     **** 
2141:src/xeq.c     **** void cmdstostk(unsigned int arg, enum rarg op) {
2142:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
2143:src/xeq.c     **** 
2144:src/xeq.c     **** 	for (i=0; i<n; i++)
2145:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
2146:src/xeq.c     **** }
2147:src/xeq.c     **** 
2148:src/xeq.c     **** void cmdrclstk(unsigned int arg, enum rarg op) {
2149:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
ARM GAS  /tmp/ccQQPlfu.s 			page 45


2150:src/xeq.c     **** 
2151:src/xeq.c     **** 	for (i=0; i<n; i++)
2152:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
2153:src/xeq.c     **** }
2154:src/xeq.c     **** 
2155:src/xeq.c     **** 
2156:src/xeq.c     **** /*
2157:src/xeq.c     ****  *  Move up the return stack, skipping any local variables
2158:src/xeq.c     ****  */
2159:src/xeq.c     **** static void retstk_up(void)
2160:src/xeq.c     **** {
 309              		.loc 1 2160 1 is_stmt 1 view -0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
2161:src/xeq.c     **** 	if (RetStkPtr < 0) {
 314              		.loc 1 2161 2 view .LVU95
 315              		.loc 1 2161 6 is_stmt 0 view .LVU96
 316 0000 1A4B     		ldr	r3, .L39
2160:src/xeq.c     **** 	if (RetStkPtr < 0) {
 317              		.loc 1 2160 1 view .LVU97
 318 0002 70B4     		push	{r4, r5, r6}
 319              		.cfi_def_cfa_offset 12
 320              		.cfi_offset 4, -12
 321              		.cfi_offset 5, -8
 322              		.cfi_offset 6, -4
 323              		.loc 1 2161 6 view .LVU98
 324 0004 1C68     		ldr	r4, [r3]
 325 0006 B4F9E227 		ldrsh	r2, [r4, #2018]
 326              		.loc 1 2161 5 view .LVU99
 327 000a 002A     		cmp	r2, #0
 328 000c 01DB     		blt	.L37
 329              	.L27:
2162:src/xeq.c     **** 		int sp = RetStkPtr++;
2163:src/xeq.c     **** 		unsigned int s = RetStk[sp++];
2164:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
2165:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
2166:src/xeq.c     **** 			RetStkPtr = sp;
2167:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
2168:src/xeq.c     **** 			LocalRegs = 0;
2169:src/xeq.c     **** 			while (sp < 0) {
2170:src/xeq.c     **** 				s = RetStk[sp];
2171:src/xeq.c     **** 				if (isLOCAL(s)) {
2172:src/xeq.c     **** 					LocalRegs = sp;
2173:src/xeq.c     **** 					break;
2174:src/xeq.c     **** 				}
2175:src/xeq.c     **** 				++sp;
2176:src/xeq.c     **** 				if (isHIDDEN(s))
2177:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
2178:src/xeq.c     **** 			}
2179:src/xeq.c     **** 		}
2180:src/xeq.c     **** 	}
2181:src/xeq.c     **** }
 330              		.loc 1 2181 1 view .LVU100
 331 000e 70BC     		pop	{r4, r5, r6}
 332              		.cfi_remember_state
ARM GAS  /tmp/ccQQPlfu.s 			page 46


 333              		.cfi_restore 6
 334              		.cfi_restore 5
 335              		.cfi_restore 4
 336              		.cfi_def_cfa_offset 0
 337 0010 7047     		bx	lr
 338              	.L37:
 339              		.cfi_restore_state
 340              	.LBB1331:
2162:src/xeq.c     **** 		int sp = RetStkPtr++;
 341              		.loc 1 2162 3 is_stmt 1 view .LVU101
2163:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 342              		.loc 1 2163 26 is_stmt 0 view .LVU102
 343 0012 174B     		ldr	r3, .L39+4
2162:src/xeq.c     **** 		int sp = RetStkPtr++;
 344              		.loc 1 2162 21 view .LVU103
 345 0014 511C     		adds	r1, r2, #1
2163:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 346              		.loc 1 2163 26 view .LVU104
 347 0016 1D68     		ldr	r5, [r3]
2162:src/xeq.c     **** 		int sp = RetStkPtr++;
 348              		.loc 1 2162 21 view .LVU105
 349 0018 A4F8E217 		strh	r1, [r4, #2018]	@ movhi
 350              	.LVL26:
2163:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 351              		.loc 1 2163 3 is_stmt 1 view .LVU106
2163:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 352              		.loc 1 2163 26 is_stmt 0 view .LVU107
 353 001c 35F81230 		ldrh	r3, [r5, r2, lsl #1]
 354              	.LVL27:
2164:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 355              		.loc 1 2164 3 is_stmt 1 view .LVU108
2164:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 356              		.loc 1 2164 7 is_stmt 0 view .LVU109
 357 0020 1A0B     		lsrs	r2, r3, #12
 358              	.LVL28:
2164:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 359              		.loc 1 2164 6 view .LVU110
 360 0022 22F00202 		bic	r2, r2, #2
 361 0026 012A     		cmp	r2, #1
 362 0028 F1D1     		bne	.L27
2165:src/xeq.c     **** 			RetStkPtr = sp;
 363              		.loc 1 2165 4 is_stmt 1 view .LVU111
2165:src/xeq.c     **** 			RetStkPtr = sp;
 364              		.loc 1 2165 10 is_stmt 0 view .LVU112
 365 002a C3F30B03 		ubfx	r3, r3, #0, #12
 366              	.LVL29:
2165:src/xeq.c     **** 			RetStkPtr = sp;
 367              		.loc 1 2165 7 view .LVU113
 368 002e 0B44     		add	r3, r3, r1
 369              	.LVL30:
2166:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 370              		.loc 1 2166 4 is_stmt 1 view .LVU114
2168:src/xeq.c     **** 			while (sp < 0) {
 371              		.loc 1 2168 14 is_stmt 0 view .LVU115
 372 0030 0022     		movs	r2, #0
2166:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 373              		.loc 1 2166 14 view .LVU116
ARM GAS  /tmp/ccQQPlfu.s 			page 47


 374 0032 A4F8E237 		strh	r3, [r4, #2018]	@ movhi
 375              	.LVL31:
2168:src/xeq.c     **** 			while (sp < 0) {
 376              		.loc 1 2168 4 is_stmt 1 view .LVU117
2168:src/xeq.c     **** 			while (sp < 0) {
 377              		.loc 1 2168 14 is_stmt 0 view .LVU118
 378 0036 A4F8DE27 		strh	r2, [r4, #2014]	@ movhi
2169:src/xeq.c     **** 				s = RetStk[sp];
 379              		.loc 1 2169 4 is_stmt 1 view .LVU119
 380 003a 6FF00046 		mvn	r6, #-2147483648
 381              	.L31:
2169:src/xeq.c     **** 				s = RetStk[sp];
 382              		.loc 1 2169 4 is_stmt 0 view .LVU120
 383 003e 9919     		adds	r1, r3, r6
 384 0040 05EB4101 		add	r1, r5, r1, lsl #1
 385 0044 03E0     		b	.L33
 386              	.LVL32:
 387              	.L32:
2176:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 388              		.loc 1 2176 8 view .LVU121
 389 0046 032A     		cmp	r2, #3
2175:src/xeq.c     **** 				if (isHIDDEN(s))
 390              		.loc 1 2175 5 view .LVU122
 391 0048 03F10103 		add	r3, r3, #1
 392              	.LVL33:
2176:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 393              		.loc 1 2176 5 is_stmt 1 view .LVU123
2176:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 394              		.loc 1 2176 8 is_stmt 0 view .LVU124
 395 004c 0AD0     		beq	.L38
 396              	.LVL34:
 397              	.L33:
2170:src/xeq.c     **** 				if (isLOCAL(s)) {
 398              		.loc 1 2170 5 is_stmt 1 view .LVU125
2175:src/xeq.c     **** 				if (isHIDDEN(s))
 399              		.loc 1 2175 5 view .LVU126
2169:src/xeq.c     **** 				s = RetStk[sp];
 400              		.loc 1 2169 10 view .LVU127
 401 004e 002B     		cmp	r3, #0
 402 0050 DDDA     		bge	.L27
2170:src/xeq.c     **** 				if (isLOCAL(s)) {
 403              		.loc 1 2170 15 is_stmt 0 view .LVU128
 404 0052 31F8020F 		ldrh	r0, [r1, #2]!
 405              	.LVL35:
2171:src/xeq.c     **** 					LocalRegs = sp;
 406              		.loc 1 2171 5 is_stmt 1 view .LVU129
2171:src/xeq.c     **** 					LocalRegs = sp;
 407              		.loc 1 2171 9 is_stmt 0 view .LVU130
 408 0056 020B     		lsrs	r2, r0, #12
2171:src/xeq.c     **** 					LocalRegs = sp;
 409              		.loc 1 2171 8 view .LVU131
 410 0058 012A     		cmp	r2, #1
 411 005a F4D1     		bne	.L32
2172:src/xeq.c     **** 					break;
 412              		.loc 1 2172 6 is_stmt 1 view .LVU132
2172:src/xeq.c     **** 					break;
 413              		.loc 1 2172 16 is_stmt 0 view .LVU133
ARM GAS  /tmp/ccQQPlfu.s 			page 48


 414 005c A4F8DE37 		strh	r3, [r4, #2014]	@ movhi
2173:src/xeq.c     **** 				}
 415              		.loc 1 2173 6 is_stmt 1 view .LVU134
 416              	.LBE1331:
 417              		.loc 1 2181 1 is_stmt 0 view .LVU135
 418 0060 70BC     		pop	{r4, r5, r6}
 419              		.cfi_remember_state
 420              		.cfi_restore 6
 421              		.cfi_restore 5
 422              		.cfi_restore 4
 423              		.cfi_def_cfa_offset 0
 424 0062 7047     		bx	lr
 425              	.L38:
 426              		.cfi_restore_state
 427              	.LBB1332:
2177:src/xeq.c     **** 			}
 428              		.loc 1 2177 6 is_stmt 1 view .LVU136
2177:src/xeq.c     **** 			}
 429              		.loc 1 2177 12 is_stmt 0 view .LVU137
 430 0064 C0F30B00 		ubfx	r0, r0, #0, #12
 431              	.LVL36:
2177:src/xeq.c     **** 			}
 432              		.loc 1 2177 9 view .LVU138
 433 0068 0344     		add	r3, r3, r0
 434              	.LVL37:
2177:src/xeq.c     **** 			}
 435              		.loc 1 2177 9 view .LVU139
 436 006a E8E7     		b	.L31
 437              	.L40:
 438              		.align	2
 439              	.L39:
 440 006c 00000000 		.word	main_ram
 441 0070 00000000 		.word	RetStk
 442              	.LBE1332:
 443              		.cfi_endproc
 444              	.LFE150:
 446              		.section	.text.flag_word,"ax",%progbits
 447              		.align	1
 448              		.p2align 2,,3
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 452              		.fpu fpv4-sp-d16
 454              	flag_word:
 455              	.LVL38:
 456              	.LFB197:
2182:src/xeq.c     **** 
2183:src/xeq.c     **** 
2184:src/xeq.c     **** /* Search from the given position for the specified numeric label.
2185:src/xeq.c     ****  */
2186:src/xeq.c     **** unsigned int find_opcode_from(unsigned int pc, const opcode l, const int flags) {
2187:src/xeq.c     **** 	unsigned short int top;
2188:src/xeq.c     **** 	int count;
2189:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
2190:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
2191:src/xeq.c     **** 
2192:src/xeq.c     **** 	count = 1 + find_section_bounds(pc, endp, &top);
ARM GAS  /tmp/ccQQPlfu.s 			page 49


2193:src/xeq.c     **** 	count -= top;
2194:src/xeq.c     **** 	while (count--) {
2195:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
2196:src/xeq.c     **** 		// If we don't find the label, we may search a little too far if many double word
2197:src/xeq.c     **** 		// instructions are in the code, but this doesn't do any harm.
2198:src/xeq.c     **** 		if (getprog(pc) == l)
2199:src/xeq.c     **** 			return pc;
2200:src/xeq.c     **** 		pc = do_inc(pc, endp);
2201:src/xeq.c     **** 	}
2202:src/xeq.c     **** 	if (errp)
2203:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2204:src/xeq.c     **** 	return 0;
2205:src/xeq.c     **** }
2206:src/xeq.c     **** 
2207:src/xeq.c     **** 
2208:src/xeq.c     **** unsigned int find_label_from(unsigned int pc, unsigned int arg, int flags) {
2209:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
2210:src/xeq.c     **** }
2211:src/xeq.c     **** 
2212:src/xeq.c     **** 
2213:src/xeq.c     **** 
2214:src/xeq.c     **** /* Handle a GTO/GSB instruction
2215:src/xeq.c     ****  */
2216:src/xeq.c     **** static void gsbgto(unsigned int pc, int gsb, unsigned int oldpc) {
2217:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
2218:src/xeq.c     **** 	raw_set_pc(pc);
2219:src/xeq.c     **** 	if (gsb) {
2220:src/xeq.c     **** 		if (!Running && !XromRunning) {
2221:src/xeq.c     **** 			// XEQ or hot key from keyboard
2222:src/xeq.c     **** 			clrretstk();
2223:src/xeq.c     **** 			set_running_on();
2224:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
2225:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
2226:src/xeq.c     **** 				oldpc = pc;
2227:src/xeq.c     **** 		}
2228:src/xeq.c     **** 		if (-RetStkPtr >= (XromFlags.xIN ? XROM_RET_STACK_SIZE : RetStkSize)) {
2229:src/xeq.c     **** 			// Stack is full
2230:src/xeq.c     **** 			report_err(ERR_RAM_FULL);
2231:src/xeq.c     **** 			// clrretstk();
2232:src/xeq.c     **** 		}
2233:src/xeq.c     **** 		else {
2234:src/xeq.c     **** 			// Push PC on return stack
2235:src/xeq.c     **** 			RetStk[--RetStkPtr] = oldpc;
2236:src/xeq.c     **** 		}
2237:src/xeq.c     **** 	}
2238:src/xeq.c     **** }
2239:src/xeq.c     **** 
2240:src/xeq.c     **** // Handle a RTN
2241:src/xeq.c     **** static void do_rtn(int plus1) {
2242:src/xeq.c     **** 	unsigned short pc;
2243:src/xeq.c     **** 
2244:src/xeq.c     **** 	if (RetStkPtr >= 0) {
2245:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
2246:src/xeq.c     **** 		clrretstk();
2247:src/xeq.c     **** 		raw_set_pc(ProgBegin);
2248:src/xeq.c     **** 	}
2249:src/xeq.c     **** 	else {
ARM GAS  /tmp/ccQQPlfu.s 			page 50


2250:src/xeq.c     **** 		// Normal RTN within program
2251:src/xeq.c     **** 		// Pop any LOCALS off the stack, increment sp
2252:src/xeq.c     **** 		retstk_up();
2253:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
2254:src/xeq.c     **** 		raw_set_pc(pc);
2255:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
2256:src/xeq.c     **** 		if (plus1 && getprog(pc) != (OP_NIL | OP_POPUSR))
2257:src/xeq.c     **** 			if (incpc())
2258:src/xeq.c     **** 				decpc();
2259:src/xeq.c     **** 	}
2260:src/xeq.c     **** 	if (RetStkPtr == 0) {
2261:src/xeq.c     **** 		// RTN with empty stack stops
2262:src/xeq.c     **** 		set_running_off();
2263:src/xeq.c     **** 	}
2264:src/xeq.c     **** }
2265:src/xeq.c     **** 
2266:src/xeq.c     **** // RTN and RTN+1
2267:src/xeq.c     **** void op_rtn(enum nilop op) {
2268:src/xeq.c     **** 	if (! Running && ! XromRunning) {
2269:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
2270:src/xeq.c     **** 		clrretstk_pc();
2271:src/xeq.c     **** 	}
2272:src/xeq.c     **** 	else
2273:src/xeq.c     **** 		do_rtn(op == OP_RTNp1 ? 1 : 0);
2274:src/xeq.c     **** }
2275:src/xeq.c     **** 
2276:src/xeq.c     **** 
2277:src/xeq.c     **** // Called by XEQ, GTO and CAT browser
2278:src/xeq.c     **** void cmdgtocommon(int gsb, unsigned int pc) {
2279:src/xeq.c     **** 	if (pc == 0)
2280:src/xeq.c     **** 		set_running_off();
2281:src/xeq.c     **** 	else
2282:src/xeq.c     **** 		gsbgto(pc, gsb, state_pc());
2283:src/xeq.c     **** }
2284:src/xeq.c     **** 
2285:src/xeq.c     **** 
2286:src/xeq.c     **** // Common part of XEQUSR and XEQ'...' from XROM
2287:src/xeq.c     **** // Command pushes 4 values on stack, needs to be followed by POPUSR
2288:src/xeq.c     **** static void usergsb_common(unsigned short int target) {
2289:src/xeq.c     **** 	const unsigned int pc = state_pc();
2290:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
2291:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
2292:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
2293:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
2294:src/xeq.c     **** 
2295:src/xeq.c     **** 	XromUserPc = 0;			     // Hide information irrelevant to user code
2296:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
2297:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
2298:src/xeq.c     **** 	if (! Running)
2299:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
2300:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
2301:src/xeq.c     **** }
2302:src/xeq.c     **** 
2303:src/xeq.c     **** 
2304:src/xeq.c     **** // XEQUSR
2305:src/xeq.c     **** // Command fills the stack and calls the user's code.
2306:src/xeq.c     **** // Needs to be followed by POPUSR
ARM GAS  /tmp/ccQQPlfu.s 			page 51


2307:src/xeq.c     **** void do_usergsb(enum nilop op) {
2308:src/xeq.c     **** 	usergsb_common(XromUserPc);
2309:src/xeq.c     ****         fill(OP_FILL);
2310:src/xeq.c     **** }
2311:src/xeq.c     **** 
2312:src/xeq.c     **** 
2313:src/xeq.c     **** // POPUSR
2314:src/xeq.c     **** void op_popusr(enum nilop op) {
2315:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
2316:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
2317:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
2318:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
2319:src/xeq.c     **** }
2320:src/xeq.c     **** 
2321:src/xeq.c     **** /* Tests if the user program is at the top level */
2322:src/xeq.c     **** void isTop(enum nilop op) {
2323:src/xeq.c     **** 	int top = 0;
2324:src/xeq.c     **** 
2325:src/xeq.c     **** 	if (Running) {
2326:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
2327:src/xeq.c     **** 	}
2328:src/xeq.c     **** 	fin_tst(top);
2329:src/xeq.c     **** }
2330:src/xeq.c     **** 
2331:src/xeq.c     **** 
2332:src/xeq.c     **** // LBL?
2333:src/xeq.c     **** void cmdlblp(unsigned int arg, enum rarg op) {
2334:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
2335:src/xeq.c     **** }
2336:src/xeq.c     **** 
2337:src/xeq.c     **** 
2338:src/xeq.c     **** void cmdgto(unsigned int arg, enum rarg op) {
2339:src/xeq.c     **** 	unsigned int lbl;
2340:src/xeq.c     **** 	if (is_xrom())
2341:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
2342:src/xeq.c     **** 	else
2343:src/xeq.c     **** 		lbl = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
2344:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
2345:src/xeq.c     **** }
2346:src/xeq.c     **** 
2347:src/xeq.c     **** unsigned int findmultilbl(const opcode o, int flags) {
2348:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
2349:src/xeq.c     **** 	unsigned int lbl;
2350:src/xeq.c     **** 
2351:src/xeq.c     **** 	lbl = find_opcode_from(0, dest, 0);					// RAM
2352:src/xeq.c     **** 	if (lbl == 0)
2353:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
2354:src/xeq.c     **** 	if (lbl == 0)
2355:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
2356:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
2357:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2358:src/xeq.c     **** 	return lbl;
2359:src/xeq.c     **** }
2360:src/xeq.c     **** 
2361:src/xeq.c     **** // LBL?'...'
2362:src/xeq.c     **** void cmdmultilblp(const opcode o, enum multiops mopr) {
2363:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
ARM GAS  /tmp/ccQQPlfu.s 			page 52


2364:src/xeq.c     **** }
2365:src/xeq.c     **** 
2366:src/xeq.c     **** void cmdmultigto(const opcode o, enum multiops mopr) {
2367:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
2368:src/xeq.c     **** 		// In XROM the command behaves differently!
2369:src/xeq.c     **** 		unsigned short int target = findmultilbl(o, 0);
2370:src/xeq.c     **** 		if (target != 0)
2371:src/xeq.c     **** 			usergsb_common(target); 
2372:src/xeq.c     **** 		else
2373:src/xeq.c     **** 			incpc();
2374:src/xeq.c     **** 	}
2375:src/xeq.c     **** 	else {
2376:src/xeq.c     **** 		cmdgtocommon(mopr != DBL_GTO, findmultilbl(o, FIND_OP_ERROR));
2377:src/xeq.c     **** 	}
2378:src/xeq.c     **** }
2379:src/xeq.c     **** 
2380:src/xeq.c     **** static void branchtoalpha(int is_gsb, char buf[]) {
2381:src/xeq.c     **** 	unsigned int op;
2382:src/xeq.c     **** 
2383:src/xeq.c     **** 	op = OP_DBL + (DBL_LBL << DBL_SHIFT);
2384:src/xeq.c     **** 	op |= buf[0] & 0xff;
2385:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
2386:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
2387:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
2388:src/xeq.c     **** }
2389:src/xeq.c     **** 
2390:src/xeq.c     **** void cmdalphagto(unsigned int arg, enum rarg op) {
2391:src/xeq.c     **** 	char buf[14];
2392:src/xeq.c     **** 
2393:src/xeq.c     **** 	xset(buf, '\0', sizeof(buf));
2394:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
2395:src/xeq.c     **** }
2396:src/xeq.c     **** 
2397:src/xeq.c     **** static void do_branchalpha(int is_gsb) {
2398:src/xeq.c     **** 	char buf[4];
2399:src/xeq.c     **** 
2400:src/xeq.c     **** 	xcopy(buf, Alpha, 3);
2401:src/xeq.c     **** 	buf[3] = '\0';
2402:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
2403:src/xeq.c     **** }
2404:src/xeq.c     **** 
2405:src/xeq.c     **** void op_gtoalpha(enum nilop op) {
2406:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
2407:src/xeq.c     **** }
2408:src/xeq.c     **** 
2409:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2410:src/xeq.c     **** int get_dispmode_digs(int *pdigs)
2411:src/xeq.c     **** {
2412:src/xeq.c     **** 	int dispmode = UState.dispmode;
2413:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
2414:src/xeq.c     **** 
2415:src/xeq.c     **** 	if (dispdigs >= 12) {
2416:src/xeq.c     **** 		dispdigs -= 12;
2417:src/xeq.c     **** 		dispmode += 4;
2418:src/xeq.c     **** 		if (dispmode >= 6) {
2419:src/xeq.c     **** 			dispmode -= 2;
2420:src/xeq.c     **** 			dispdigs += 4;
ARM GAS  /tmp/ccQQPlfu.s 			page 53


2421:src/xeq.c     **** 		}
2422:src/xeq.c     **** 	}
2423:src/xeq.c     **** 	*pdigs = dispdigs;
2424:src/xeq.c     **** 	return dispmode;
2425:src/xeq.c     **** }
2426:src/xeq.c     **** 
2427:src/xeq.c     **** void set_dispmode_digs(int dispmode, int dispdigs)
2428:src/xeq.c     **** {
2429:src/xeq.c     **** 	if (dispmode >= 4) {
2430:src/xeq.c     **** 		dispmode -= 4;
2431:src/xeq.c     **** 		dispdigs += 12;
2432:src/xeq.c     **** 		if (dispdigs >= 16) {
2433:src/xeq.c     **** 			dispdigs -= 4;
2434:src/xeq.c     **** 			dispmode += 2;
2435:src/xeq.c     **** 		}
2436:src/xeq.c     **** 	}
2437:src/xeq.c     **** 	UState.dispmode = dispmode;
2438:src/xeq.c     **** 	UState.dispdigs = dispdigs;
2439:src/xeq.c     **** }
2440:src/xeq.c     **** #endif
2441:src/xeq.c     **** 
2442:src/xeq.c     **** void cmddisp(unsigned int arg, enum rarg op) {
2443:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2444:src/xeq.c     **** 	int dispdigs;
2445:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
2446:src/xeq.c     **** #ifdef DM42
2447:src/xeq.c     **** 	switch (op) {
2448:src/xeq.c     **** 	case RARG_STD:
2449:src/xeq.c     **** 	  dispmode = MODE_STD;
2450:src/xeq.c     **** 	  break;
2451:src/xeq.c     **** 	case RARG_FIX:
2452:src/xeq.c     **** 	  dispmode = MODE_FIX;
2453:src/xeq.c     **** 	  break;
2454:src/xeq.c     **** 	case RARG_SCI:
2455:src/xeq.c     **** 	  dispmode = MODE_SCI;
2456:src/xeq.c     **** 	  break;
2457:src/xeq.c     **** 	case RARG_ENG:
2458:src/xeq.c     **** 	  dispmode = MODE_ENG;
2459:src/xeq.c     **** 	  break;
2460:src/xeq.c     **** 	case RARG_SIG:
2461:src/xeq.c     **** 	  dispmode = MODE_SIG;
2462:src/xeq.c     **** 	  break;
2463:src/xeq.c     **** 	case RARG_SIG0:
2464:src/xeq.c     **** 	  dispmode = MODE_SIG0;
2465:src/xeq.c     **** 	  break;
2466:src/xeq.c     **** 	default:;
2467:src/xeq.c     **** 	}
2468:src/xeq.c     **** 	if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2469:src/xeq.c     **** 	  report_err(ERR_RANGE);
2470:src/xeq.c     **** 	  return;
2471:src/xeq.c     **** 	}
2472:src/xeq.c     **** #else	
2473:src/xeq.c     **** 	if (op != RARG_DISP)
2474:src/xeq.c     **** 		dispmode = (op - RARG_STD) + MODE_STD;
2475:src/xeq.c     **** 	else if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2476:src/xeq.c     **** 		report_err(ERR_RANGE);
2477:src/xeq.c     **** 		return;
ARM GAS  /tmp/ccQQPlfu.s 			page 54


2478:src/xeq.c     **** 	}
2479:src/xeq.c     **** #endif
2480:src/xeq.c     **** 	set_dispmode_digs(dispmode, arg);
2481:src/xeq.c     **** #else
2482:src/xeq.c     **** 	UState.dispdigs = arg;
2483:src/xeq.c     **** 	if (op != RARG_DISP)
2484:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
2485:src/xeq.c     **** #endif
2486:src/xeq.c     **** 	op_float(OP_FLOAT);
2487:src/xeq.c     **** }
2488:src/xeq.c     **** 
2489:src/xeq.c     **** 
2490:src/xeq.c     **** /* Metric / Imperial conversion code */
2491:src/xeq.c     **** decNumber *convC2F(decNumber *r, const decNumber *x) {
2492:src/xeq.c     **** 	decNumber s;
2493:src/xeq.c     **** 
2494:src/xeq.c     **** 	dn_multiply(&s, x, &const_9on5);
2495:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
2496:src/xeq.c     **** }
2497:src/xeq.c     **** 
2498:src/xeq.c     **** decNumber *convF2C(decNumber *r, const decNumber *x) {
2499:src/xeq.c     **** 	decNumber s;
2500:src/xeq.c     **** 
2501:src/xeq.c     **** 	dn_subtract(&s, x, &const_32);
2502:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
2503:src/xeq.c     **** }
2504:src/xeq.c     **** 
2505:src/xeq.c     **** decNumber *convDB2AR(decNumber *r, const decNumber *x) {
2506:src/xeq.c     **** 	decNumber t;
2507:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
2508:src/xeq.c     **** 	return decNumberPow10(r, &t);
2509:src/xeq.c     **** }
2510:src/xeq.c     **** 
2511:src/xeq.c     **** decNumber *convAR2DB(decNumber *r, const decNumber *x) {
2512:src/xeq.c     **** 	decNumber t;
2513:src/xeq.c     **** 	dn_log10(&t, x);
2514:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
2515:src/xeq.c     **** }
2516:src/xeq.c     **** 
2517:src/xeq.c     **** decNumber *convDB2PR(decNumber *r, const decNumber *x) {
2518:src/xeq.c     **** 	decNumber t;
2519:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
2520:src/xeq.c     **** 	return decNumberPow10(r, &t);
2521:src/xeq.c     **** }
2522:src/xeq.c     **** 
2523:src/xeq.c     **** decNumber *convPR2DB(decNumber *r, const decNumber *x) {
2524:src/xeq.c     **** 	decNumber t;
2525:src/xeq.c     **** 	dn_log10(&t, x);
2526:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
2527:src/xeq.c     **** }
2528:src/xeq.c     **** 
2529:src/xeq.c     **** /* Scale conversions */
2530:src/xeq.c     **** void do_conv(decNumber *r, unsigned int arg, const decNumber *x) {
2531:src/xeq.c     **** 	decNumber m;
2532:src/xeq.c     **** 	const unsigned int conv = arg / 2;
2533:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
2534:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 55


2535:src/xeq.c     **** 	if (conv > NUM_CONSTS_CONV) {
2536:src/xeq.c     **** 		decNumberCopy(r, x);
2537:src/xeq.c     **** 		return;
2538:src/xeq.c     **** 	}
2539:src/xeq.c     **** 
2540:src/xeq.c     **** 	decimal64ToNumber(&CONSTANT_CONV(conv), &m);
2541:src/xeq.c     **** 
2542:src/xeq.c     **** 	if (dirn == 0)		// metric to imperial
2543:src/xeq.c     **** 		dn_divide(r, x, &m);
2544:src/xeq.c     **** 	else			// imperial to metric
2545:src/xeq.c     **** 		dn_multiply(r, x, &m);
2546:src/xeq.c     **** }
2547:src/xeq.c     **** 
2548:src/xeq.c     **** void cmdconv(unsigned int arg, enum rarg op) {
2549:src/xeq.c     **** 	decNumber x, r;
2550:src/xeq.c     **** 
2551:src/xeq.c     **** 	if (is_intmode())
2552:src/xeq.c     **** 		return;
2553:src/xeq.c     **** 
2554:src/xeq.c     **** 	getX(&x);
2555:src/xeq.c     **** 	do_conv(&r, arg, &x);
2556:src/xeq.c     **** 	setlastX();
2557:src/xeq.c     **** 	setX(&r);
2558:src/xeq.c     **** }
2559:src/xeq.c     **** 
2560:src/xeq.c     **** /*  Finish up a test -- if the value is non-zero, the test passes.
2561:src/xeq.c     ****  *  If it is zero, the test fails.
2562:src/xeq.c     ****  */
2563:src/xeq.c     **** void fin_tst(const int a) {
2564:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
2565:src/xeq.c     **** 	if (Running || XromRunning) {
2566:src/xeq.c     **** 		if (! a && incpc())
2567:src/xeq.c     **** 			decpc();
2568:src/xeq.c     **** 	}
2569:src/xeq.c     **** 	else
2570:src/xeq.c     **** 		DispMsg = msg;
2571:src/xeq.c     **** #ifdef INFRARED
2572:src/xeq.c     **** 	if (Tracing) {
2573:src/xeq.c     **** 		print_justified( msg );
2574:src/xeq.c     **** 		Tracing = 0;
2575:src/xeq.c     **** 	}
2576:src/xeq.c     **** #endif
2577:src/xeq.c     **** }
2578:src/xeq.c     **** 
2579:src/xeq.c     **** 
2580:src/xeq.c     **** /* Skip a number of instructions forwards */
2581:src/xeq.c     **** void cmdskip(unsigned int arg, enum rarg op) {
2582:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2583:src/xeq.c     **** 	unsigned int pc;
2584:src/xeq.c     **** 
2585:src/xeq.c     **** 	if (op == RARG_CASE) {
2586:src/xeq.c     **** 		int sgn;
2587:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
2588:src/xeq.c     **** 		if (sgn || arg >= 100) {
2589:src/xeq.c     **** 			report_err(ERR_RANGE);
2590:src/xeq.c     **** 			return;
2591:src/xeq.c     **** 		}
ARM GAS  /tmp/ccQQPlfu.s 			page 56


2592:src/xeq.c     **** 	}
2593:src/xeq.c     **** 
2594:src/xeq.c     **** 	if (isXROM(origpc))
2595:src/xeq.c     **** 		pc = origpc + arg;
2596:src/xeq.c     **** 	else {
2597:src/xeq.c     **** 		while (arg-- && !incpc());
2598:src/xeq.c     **** 		if (PcWrapped) {
2599:src/xeq.c     **** 			report_err(ERR_RANGE);
2600:src/xeq.c     **** 		}
2601:src/xeq.c     **** 		pc = state_pc();
2602:src/xeq.c     **** 	}
2603:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSF, origpc);
2604:src/xeq.c     **** }
2605:src/xeq.c     **** 
2606:src/xeq.c     **** /* Skip backwards */
2607:src/xeq.c     **** void cmdback(unsigned int arg, enum rarg op) {
2608:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2609:src/xeq.c     **** 	unsigned int pc = origpc;
2610:src/xeq.c     **** 
2611:src/xeq.c     **** 	if (isXROM(origpc))
2612:src/xeq.c     **** 		pc -= arg + 1;
2613:src/xeq.c     ****         else if (arg) {
2614:src/xeq.c     **** 		if ( Running ) {
2615:src/xeq.c     **** 			// Handles the case properly that we are on last step
2616:src/xeq.c     **** 			pc = do_dec(pc, 1);
2617:src/xeq.c     **** 		}
2618:src/xeq.c     **** 		do {
2619:src/xeq.c     **** 			pc = do_dec(pc, 1);
2620:src/xeq.c     **** 		} while (--arg && !PcWrapped);
2621:src/xeq.c     **** 		if (PcWrapped) {
2622:src/xeq.c     **** 			report_err(ERR_RANGE);
2623:src/xeq.c     **** 			return;
2624:src/xeq.c     **** 		}
2625:src/xeq.c     **** 	}
2626:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSB, origpc);
2627:src/xeq.c     **** }
2628:src/xeq.c     **** 
2629:src/xeq.c     **** 
2630:src/xeq.c     **** /* Append a character to the command line
2631:src/xeq.c     ****  */
2632:src/xeq.c     **** static void append_cmdline(char c) {
2633:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
2634:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
2635:src/xeq.c     **** }
2636:src/xeq.c     **** 
2637:src/xeq.c     **** /* Make sure exponent stays within allowed limits.
2638:src/xeq.c     ****  * was_digit_entered: 0: sign was changed
2639:src/xeq.c     ****  *                    1: new digit was entered
2640:src/xeq.c     ****  */
2641:src/xeq.c     **** static void exponent_adjusted(int was_digit_entered)
2642:src/xeq.c     **** {
2643:src/xeq.c     **** 	const int dbl = is_dblmode();
2644:src/xeq.c     **** 	int i;
2645:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
2646:src/xeq.c     **** 	const int neg_type_dc = get_reg_n_int_sgn(0, &i);
2647:src/xeq.c     **** #else
2648:src/xeq.c     **** 	const int neg_type_dc = SP_NEG_EXP_ENTRY_TYPE_DC;
ARM GAS  /tmp/ccQQPlfu.s 			page 57


2649:src/xeq.c     **** #endif
2650:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DC == -1
2651:src/xeq.c     **** 	const int neg_lim_dc = get_reg_n_int_sgn(1, &i);
2652:src/xeq.c     **** #else
2653:src/xeq.c     **** 	const int neg_lim_dc = SP_NEG_EXP_ENTRY_LIMIT_DC;
2654:src/xeq.c     **** #endif
2655:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DS == -1
2656:src/xeq.c     **** 	const int neg_type_ds = get_reg_n_int_sgn(2, &i);
2657:src/xeq.c     **** #else
2658:src/xeq.c     **** 	const int neg_type_ds = SP_NEG_EXP_ENTRY_TYPE_DS;
2659:src/xeq.c     **** #endif
2660:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DS == -1
2661:src/xeq.c     **** 	const int neg_lim_ds = get_reg_n_int_sgn(3, &i);
2662:src/xeq.c     **** #else
2663:src/xeq.c     **** 	const int neg_lim_ds = SP_NEG_EXP_ENTRY_LIMIT_DS;
2664:src/xeq.c     **** #endif
2665:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DC == -1
2666:src/xeq.c     **** 	const int pos_type_dc = get_reg_n_int_sgn(4, &i);
2667:src/xeq.c     **** #else
2668:src/xeq.c     **** 	const int pos_type_dc = SP_POS_EXP_ENTRY_TYPE_DC;
2669:src/xeq.c     **** #endif
2670:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DC == -1
2671:src/xeq.c     **** 	const int pos_lim_dc = get_reg_n_int_sgn(5, &i);
2672:src/xeq.c     **** #else
2673:src/xeq.c     **** 	const int pos_lim_dc = SP_POS_EXP_ENTRY_LIMIT_DC;
2674:src/xeq.c     **** #endif
2675:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DS == -1
2676:src/xeq.c     **** 	const int pos_type_ds = get_reg_n_int_sgn(6, &i);
2677:src/xeq.c     **** #else
2678:src/xeq.c     **** 	const int pos_type_ds = SP_POS_EXP_ENTRY_TYPE_DS;
2679:src/xeq.c     **** #endif
2680:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DS == -1
2681:src/xeq.c     **** 	const int pos_lim_ds = get_reg_n_int_sgn(7, &i);
2682:src/xeq.c     **** #else
2683:src/xeq.c     **** 	const int pos_lim_ds = SP_POS_EXP_ENTRY_LIMIT_DS;
2684:src/xeq.c     **** #endif
2685:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1
2686:src/xeq.c     **** 	const int exp_chs_dc = get_reg_n_int_sgn(8, &i);
2687:src/xeq.c     **** #else
2688:src/xeq.c     **** 	const int exp_chs_dc = SP_EXP_ENTRY_CHS_DC;
2689:src/xeq.c     **** #endif
2690:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DS == -1
2691:src/xeq.c     **** 	const int exp_chs_ds = get_reg_n_int_sgn(9, &i);
2692:src/xeq.c     **** #else
2693:src/xeq.c     **** 	const int exp_chs_ds = SP_EXP_ENTRY_CHS_DS;
2694:src/xeq.c     **** #endif
2695:src/xeq.c     **** 	const int dp_neg_type_dc = DP_NEG_EXP_ENTRY_TYPE_DC;
2696:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
2697:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
2698:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
2699:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
2700:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
2701:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
2702:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
2703:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
2704:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
2705:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/ccQQPlfu.s 			page 58


2706:src/xeq.c     **** 	const int large_exp_entry = 1;
2707:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
2708:src/xeq.c     **** #else
2709:src/xeq.c     **** 	const int large_exp_entry = 0;
2710:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex + 1];
2711:src/xeq.c     **** #endif
2712:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1 || SP_NEG_EXP_ENTRY_TYPE_DC != SP_NEG_EXP_ENTRY_TYPE_DS \
2713:src/xeq.c     ****     || SP_NEG_EXP_ENTRY_LIMIT_DC == -1 || SP_NEG_EXP_ENTRY_LIMIT_DC != SP_NEG_EXP_ENTRY_LIMIT_DS \
2714:src/xeq.c     ****     || SP_POS_EXP_ENTRY_TYPE_DC == -1 || SP_POS_EXP_ENTRY_TYPE_DC != SP_POS_EXP_ENTRY_TYPE_DS \
2715:src/xeq.c     ****     || SP_POS_EXP_ENTRY_LIMIT_DC == -1 || SP_POS_EXP_ENTRY_LIMIT_DC != SP_POS_EXP_ENTRY_LIMIT_DS \
2716:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC != SP_EXP_ENTRY_CHS_DS \
2717:src/xeq.c     ****     || SP_EXP_ENTRY_ZERO_DC == -1 || SP_EXP_ENTRY_ZERO_DC != SP_EXP_ENTRY_ZERO_DS \
2718:src/xeq.c     ****     || ((DP_NEG_EXP_ENTRY_TYPE_DC != DP_NEG_EXP_ENTRY_TYPE_DS \
2719:src/xeq.c     ****          || DP_NEG_EXP_ENTRY_LIMIT_DC != DP_NEG_EXP_ENTRY_LIMIT_DS \
2720:src/xeq.c     ****          || DP_POS_EXP_ENTRY_TYPE_DC != DP_POS_EXP_ENTRY_TYPE_DS \
2721:src/xeq.c     ****          || DP_POS_EXP_ENTRY_LIMIT_DC != DP_POS_EXP_ENTRY_LIMIT_DS \
2722:src/xeq.c     ****          || DP_EXP_ENTRY_CHS_DC != DP_EXP_ENTRY_CHS_DS \
2723:src/xeq.c     ****          || DP_EXP_ENTRY_ZERO_DC != DP_EXP_ENTRY_ZERO_DS) && defined(LARGE_EXPONENT_ENTRY))
2724:src/xeq.c     **** 	const int flag_D = get_user_flag(NAN_FLAG);
2725:src/xeq.c     **** #else
2726:src/xeq.c     **** 	const int flag_D = 0;
2727:src/xeq.c     **** #endif
2728:src/xeq.c     **** #ifndef SHIFT_EXPONENT
2729:src/xeq.c     **** 	int negative;
2730:src/xeq.c     **** #endif
2731:src/xeq.c     **** 	int emax;
2732:src/xeq.c     **** 
2733:src/xeq.c     **** 	/* Figure out the range limit for the exponent */
2734:src/xeq.c     **** 	if (!large_exp_entry && dbl) {
2735:src/xeq.c     **** 		emax = 999;
2736:src/xeq.c     **** 	}
2737:src/xeq.c     **** 	else {
2738:src/xeq.c     **** 		int emax_plus, emax_minus;
2739:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
2740:src/xeq.c     **** 
2741:src/xeq.c     **** 		if ((neg_type_dc >= 1 && neg_type_dc <= 9)
2742:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
2743:src/xeq.c     **** 		    || (pos_type_dc >= 1 && pos_type_dc <= 3)
2744:src/xeq.c     **** 		    || (pos_type_ds >= 1 && pos_type_ds <= 3)
2745:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2746:src/xeq.c     **** 		    || (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9)
2747:src/xeq.c     **** 		    || (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9)
2748:src/xeq.c     **** 		    || (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2749:src/xeq.c     **** 		    || (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2750:src/xeq.c     **** #endif
2751:src/xeq.c     **** 		   ) {
2752:src/xeq.c     **** 			// Exponent limits have to be calculated at run-time
2753:src/xeq.c     **** 
2754:src/xeq.c     **** 			for (i = 0; i < CmdLineLength; ++i) {
2755:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2756:src/xeq.c     **** 				if (Cmdline[i] == 'E' || Cmdline[i] == 'D')
2757:src/xeq.c     **** #else
2758:src/xeq.c     **** 				if (Cmdline[i] == 'E')
2759:src/xeq.c     **** #endif
2760:src/xeq.c     **** 					break;
2761:src/xeq.c     **** 				else if (Cmdline[i] == '.')
2762:src/xeq.c     **** 					dot = i;
ARM GAS  /tmp/ccQQPlfu.s 			page 59


2763:src/xeq.c     **** 				else if (Cmdline[i] != '0') {
2764:src/xeq.c     **** 					last_nonzero = i - (dot != 0);
2765:src/xeq.c     **** 					if (first_nonzero < 0)
2766:src/xeq.c     **** 						first_nonzero = i - (dot != 0);
2767:src/xeq.c     **** 				}
2768:src/xeq.c     **** 			}
2769:src/xeq.c     **** 			if (first_nonzero < 0) { // Mantissa is zero.
2770:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DC == -1
2771:src/xeq.c     **** 				const int zero_dc = (get_user_flag(1) << 1) | get_user_flag(0);
2772:src/xeq.c     **** #else
2773:src/xeq.c     **** 				const int zero_dc = SP_EXP_ENTRY_ZERO_DC;
2774:src/xeq.c     **** #endif
2775:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DS == -1
2776:src/xeq.c     **** 				const int zero_ds = (get_user_flag(3) << 1) | get_user_flag(2);
2777:src/xeq.c     **** #else
2778:src/xeq.c     **** 				const int zero_ds = SP_EXP_ENTRY_ZERO_DS;
2779:src/xeq.c     **** #endif
2780:src/xeq.c     **** 				const int dp_zero_dc = DP_EXP_ENTRY_ZERO_DC;
2781:src/xeq.c     **** 				const int dp_zero_ds = DP_EXP_ENTRY_ZERO_DS;
2782:src/xeq.c     **** 
2783:src/xeq.c     **** 				if (large_exp_entry && dbl) {
2784:src/xeq.c     **** 					if ((dp_zero_dc == 1 && dp_zero_ds == 1)
2785:src/xeq.c     **** 					    || (dp_zero_dc == 1 && !flag_D)
2786:src/xeq.c     **** 					    || (dp_zero_ds == 1 && flag_D)) {
2787:src/xeq.c     **** 						// Double precision: Allow any exponent
2788:src/xeq.c     **** 						// within configured limits if any.
2789:src/xeq.c     **** 						emax_plus = emax_minus = 9999;
2790:src/xeq.c     **** 						goto check_limits;
2791:src/xeq.c     **** 					}
2792:src/xeq.c     **** 					else if ((dp_zero_dc == 2 && dp_zero_ds == 2)
2793:src/xeq.c     **** 					         || (dp_zero_dc == 2 && !flag_D)
2794:src/xeq.c     **** 					         || (dp_zero_ds == 2 && flag_D)) {
2795:src/xeq.c     **** 						// Double precision: Allow any exponent
2796:src/xeq.c     **** 						// even outside of configured limits.
2797:src/xeq.c     **** 						emax = 9999;
2798:src/xeq.c     **** 						goto do_not_check_limits;
2799:src/xeq.c     **** 					}
2800:src/xeq.c     **** 					goto zero_has_one_significant_digit;
2801:src/xeq.c     **** 				}
2802:src/xeq.c     **** 				if ((zero_dc == 1 && zero_ds == 1)
2803:src/xeq.c     **** 				    || (zero_dc == 1 && !flag_D)
2804:src/xeq.c     **** 				    || (zero_ds == 1 && flag_D)) {
2805:src/xeq.c     **** 					// Allow any exponent within configured limits if any.
2806:src/xeq.c     **** 					emax_plus = emax_minus = 999;
2807:src/xeq.c     **** 					goto check_limits;
2808:src/xeq.c     **** 				}
2809:src/xeq.c     **** 				else if ((zero_dc == 2 && zero_ds == 2)
2810:src/xeq.c     **** 				         || (zero_dc == 2 && !flag_D)
2811:src/xeq.c     **** 				         || (zero_ds == 2 && flag_D)) {
2812:src/xeq.c     **** 					// Allow any exponent even outside of configured limits.
2813:src/xeq.c     **** 					emax = 999;
2814:src/xeq.c     **** 					goto do_not_check_limits;
2815:src/xeq.c     **** 				}
2816:src/xeq.c     **** 				else {
2817:src/xeq.c     **** zero_has_one_significant_digit:
2818:src/xeq.c     **** 					// Treat zero as if it had one significant digit.
2819:src/xeq.c     **** 					first_nonzero = 0;
ARM GAS  /tmp/ccQQPlfu.s 			page 60


2820:src/xeq.c     **** 					dot = 1;
2821:src/xeq.c     **** 				}
2822:src/xeq.c     **** 			}
2823:src/xeq.c     **** 			else if (dot == 0)
2824:src/xeq.c     **** 				dot = i;
2825:src/xeq.c     **** 		}
2826:src/xeq.c     **** 
2827:src/xeq.c     **** 		if (large_exp_entry && dbl) {
2828:src/xeq.c     **** 			// Double precision mode
2829:src/xeq.c     **** 			if (flag_D && dp_neg_type_dc != dp_neg_type_ds) {
2830:src/xeq.c     **** 				if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 3) {
2831:src/xeq.c     **** 					// Don't allow denormal numbers
2832:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2833:src/xeq.c     **** 				}
2834:src/xeq.c     **** 				else if (dp_neg_type_ds >= 4 && dp_neg_type_ds <= 6) {
2835:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2836:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2837:src/xeq.c     **** 				}
2838:src/xeq.c     **** 				else if (dp_neg_type_ds >= 7 && dp_neg_type_ds <= 9) {
2839:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2840:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2841:src/xeq.c     **** 				}
2842:src/xeq.c     **** 				else {
2843:src/xeq.c     **** 					// Fixed limit
2844:src/xeq.c     **** 					emax_minus = dp_neg_lim_ds;
2845:src/xeq.c     **** 				}
2846:src/xeq.c     **** 			}
2847:src/xeq.c     **** 			else {
2848:src/xeq.c     **** 				if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 3) {
2849:src/xeq.c     **** 					// Don't allow denormal numbers
2850:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2851:src/xeq.c     **** 				}
2852:src/xeq.c     **** 				else if (dp_neg_type_dc >= 4 && dp_neg_type_dc <= 6) {
2853:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2854:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2855:src/xeq.c     **** 				}
2856:src/xeq.c     **** 				else if (dp_neg_type_dc >= 7 && dp_neg_type_dc <= 9) {
2857:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2858:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2859:src/xeq.c     **** 				}
2860:src/xeq.c     **** 				else {
2861:src/xeq.c     **** 					// Fixed limit
2862:src/xeq.c     **** 					emax_minus = dp_neg_lim_dc;
2863:src/xeq.c     **** 				}
2864:src/xeq.c     **** 			}
2865:src/xeq.c     **** 
2866:src/xeq.c     **** 			if (flag_D && dp_pos_type_dc != dp_pos_type_ds) {
2867:src/xeq.c     **** 				if (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2868:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2869:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2870:src/xeq.c     **** 				else
2871:src/xeq.c     **** 					// Fixed limit
2872:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2873:src/xeq.c     **** 			}
2874:src/xeq.c     **** 			else {
2875:src/xeq.c     **** 				if (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2876:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
ARM GAS  /tmp/ccQQPlfu.s 			page 61


2877:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2878:src/xeq.c     **** 				else
2879:src/xeq.c     **** 					// Fixed limit
2880:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2881:src/xeq.c     **** 			}
2882:src/xeq.c     **** 
2883:src/xeq.c     **** 			goto check_limits;
2884:src/xeq.c     **** 		}
2885:src/xeq.c     **** 
2886:src/xeq.c     **** 		if (flag_D && neg_type_dc != neg_type_ds) {
2887:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 3) {
2888:src/xeq.c     **** 				// Don't allow denormal numbers
2889:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2890:src/xeq.c     **** 			}
2891:src/xeq.c     **** 			else if (neg_type_ds >= 4 && neg_type_ds <= 6) {
2892:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2893:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2894:src/xeq.c     **** 			}
2895:src/xeq.c     **** 			else if (neg_type_ds >= 7 && neg_type_ds <= 9) {
2896:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2897:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2898:src/xeq.c     **** 			}
2899:src/xeq.c     **** 			else {
2900:src/xeq.c     **** 				// Fixed limit
2901:src/xeq.c     **** 				emax_minus = neg_lim_ds;
2902:src/xeq.c     **** 			}
2903:src/xeq.c     **** 		}
2904:src/xeq.c     **** 		else {
2905:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 3) {
2906:src/xeq.c     **** 				// Don't allow denormal numbers
2907:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2908:src/xeq.c     **** 			}
2909:src/xeq.c     **** 			else if (neg_type_dc >= 4 && neg_type_dc <= 6) {
2910:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2911:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2912:src/xeq.c     **** 			}
2913:src/xeq.c     **** 			else if (neg_type_dc >= 7 && neg_type_dc <= 9) {
2914:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2915:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2916:src/xeq.c     **** 			}
2917:src/xeq.c     **** 			else {
2918:src/xeq.c     **** 				// Fixed limit
2919:src/xeq.c     **** 				emax_minus = neg_lim_dc;
2920:src/xeq.c     **** 			}
2921:src/xeq.c     **** 		}
2922:src/xeq.c     **** 
2923:src/xeq.c     **** 		if (flag_D && pos_type_dc != pos_type_ds) {
2924:src/xeq.c     **** 			if (pos_type_ds >= 1 && pos_type_ds <= 3)
2925:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2926:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2927:src/xeq.c     **** 			else
2928:src/xeq.c     **** 				// Fixed limit
2929:src/xeq.c     **** 				emax_plus = pos_lim_ds;
2930:src/xeq.c     **** 		}
2931:src/xeq.c     **** 		else {
2932:src/xeq.c     **** 			if (pos_type_dc >= 1 && pos_type_dc <= 3)
2933:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
ARM GAS  /tmp/ccQQPlfu.s 			page 62


2934:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2935:src/xeq.c     **** 			else
2936:src/xeq.c     **** 				// Fixed limit
2937:src/xeq.c     **** 				emax_plus = pos_lim_dc;
2938:src/xeq.c     **** 		}
2939:src/xeq.c     **** 
2940:src/xeq.c     **** check_limits:
2941:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2942:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
2943:src/xeq.c     **** 		    && (dp_neg_type_ds != neg_type_ds || dp_neg_lim_ds != neg_lim_ds)) {
2944:src/xeq.c     **** 			if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9) {
2945:src/xeq.c     **** 				if (dp_neg_type_ds % 3 == 2) { // low limit
2946:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_ds)
2947:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2948:src/xeq.c     **** 				}
2949:src/xeq.c     **** 				else if (dp_neg_type_ds % 3 == 0) { // high limit
2950:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_ds)
2951:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2952:src/xeq.c     **** 				}
2953:src/xeq.c     **** 			}
2954:src/xeq.c     **** 			if (dp_neg_lim_ds < 0 && emax_minus < 0)
2955:src/xeq.c     **** 				emax_minus = 0;
2956:src/xeq.c     **** 		}
2957:src/xeq.c     **** 		else if (large_exp_entry && dbl
2958:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
2959:src/xeq.c     **** 		                         && dp_neg_lim_dc == dp_neg_lim_ds))
2960:src/xeq.c     **** 		         && (dp_neg_type_dc != neg_type_dc || dp_neg_lim_dc != neg_lim_dc)) {
2961:src/xeq.c     **** 			if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9) {
2962:src/xeq.c     **** 				if (dp_neg_type_dc % 3 == 2) { // low limit
2963:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_dc)
2964:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2965:src/xeq.c     **** 				}
2966:src/xeq.c     **** 				else if (dp_neg_type_dc % 3 == 0) { // high limit
2967:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_dc)
2968:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2969:src/xeq.c     **** 				}
2970:src/xeq.c     **** 			}
2971:src/xeq.c     **** 			if (dp_neg_lim_dc < 0 && emax_minus < 0)
2972:src/xeq.c     **** 				emax_minus = 0;
2973:src/xeq.c     **** 		}
2974:src/xeq.c     **** 		else if (flag_D && (neg_type_dc != neg_type_ds || neg_lim_dc != neg_lim_ds)) {
2975:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 9) {
2976:src/xeq.c     **** 				if (neg_type_ds % 3 == 2) { // low limit
2977:src/xeq.c     **** 					if (emax_minus > neg_lim_ds)
2978:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2979:src/xeq.c     **** 				}
2980:src/xeq.c     **** 				else if (neg_type_ds % 3 == 0) { // high limit
2981:src/xeq.c     **** 					if (emax_minus < neg_lim_ds)
2982:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2983:src/xeq.c     **** 				}
2984:src/xeq.c     **** 			}
2985:src/xeq.c     **** 			if (neg_lim_ds < 0 && emax_minus < 0)
2986:src/xeq.c     **** 				emax_minus = 0;
2987:src/xeq.c     **** 		}
2988:src/xeq.c     **** 		else {
2989:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 9) {
2990:src/xeq.c     **** 				if (neg_type_dc % 3 == 2) { // low limit
ARM GAS  /tmp/ccQQPlfu.s 			page 63


2991:src/xeq.c     **** 					if (emax_minus > neg_lim_dc)
2992:src/xeq.c     **** 						emax_minus = neg_lim_dc;
2993:src/xeq.c     **** 				}
2994:src/xeq.c     **** 				else if (neg_type_dc % 3 == 0) { // high limit
2995:src/xeq.c     **** 					if (emax_minus < neg_lim_dc)
2996:src/xeq.c     **** 						emax_minus = neg_lim_dc;
2997:src/xeq.c     **** 				}
2998:src/xeq.c     **** 			}
2999:src/xeq.c     **** 			if (neg_lim_dc < 0 && emax_minus < 0)
3000:src/xeq.c     **** 				emax_minus = 0;
3001:src/xeq.c     **** 		}
3002:src/xeq.c     **** 
3003:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
3004:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
3005:src/xeq.c     **** 		    && (dp_pos_type_ds != pos_type_ds || dp_pos_lim_ds != pos_lim_ds)) {
3006:src/xeq.c     **** 			if (dp_pos_type_ds == 2) { // low limit
3007:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_ds)
3008:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
3009:src/xeq.c     **** 			}
3010:src/xeq.c     **** 			else if (dp_pos_type_ds == 3) { // high limit
3011:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_ds)
3012:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
3013:src/xeq.c     **** 			}
3014:src/xeq.c     **** 			if (dp_pos_lim_ds < 0 && emax_plus < 0)
3015:src/xeq.c     **** 				emax_plus = 0;
3016:src/xeq.c     **** 		}
3017:src/xeq.c     **** 		else if (large_exp_entry && dbl
3018:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
3019:src/xeq.c     **** 		                         && dp_pos_lim_dc == dp_pos_lim_ds))
3020:src/xeq.c     **** 		         && (dp_pos_type_dc != pos_type_dc || dp_pos_lim_dc != pos_lim_dc)) {
3021:src/xeq.c     **** 			if (dp_pos_type_dc == 2) { // low limit
3022:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_dc)
3023:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
3024:src/xeq.c     **** 			}
3025:src/xeq.c     **** 			else if (dp_pos_type_dc == 3) { // high limit
3026:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_dc)
3027:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
3028:src/xeq.c     **** 			}
3029:src/xeq.c     **** 			if (dp_pos_lim_dc < 0 && emax_plus < 0)
3030:src/xeq.c     **** 				emax_plus = 0;
3031:src/xeq.c     **** 		}
3032:src/xeq.c     **** 		else if (flag_D && (pos_type_dc != pos_type_ds || pos_lim_dc != pos_lim_ds)) {
3033:src/xeq.c     **** 			if (pos_type_ds == 2) { // low limit
3034:src/xeq.c     **** 				if (emax_plus < pos_lim_ds)
3035:src/xeq.c     **** 					emax_plus = pos_lim_ds;
3036:src/xeq.c     **** 			}
3037:src/xeq.c     **** 			else if (pos_type_ds == 3) { // high limit
3038:src/xeq.c     **** 				if (emax_plus > pos_lim_ds)
3039:src/xeq.c     **** 					emax_plus = pos_lim_ds;
3040:src/xeq.c     **** 			}
3041:src/xeq.c     **** 			if (pos_lim_ds < 0 && emax_plus < 0)
3042:src/xeq.c     **** 				emax_plus = 0;
3043:src/xeq.c     **** 		}
3044:src/xeq.c     **** 		else {
3045:src/xeq.c     **** 			if (pos_type_dc == 2) { // low limit
3046:src/xeq.c     **** 				if (emax_plus < pos_lim_dc)
3047:src/xeq.c     **** 					emax_plus = pos_lim_dc;
ARM GAS  /tmp/ccQQPlfu.s 			page 64


3048:src/xeq.c     **** 			}
3049:src/xeq.c     **** 			else if (pos_type_dc == 3) { // high limit
3050:src/xeq.c     **** 				if (emax_plus > pos_lim_dc)
3051:src/xeq.c     **** 					emax_plus = pos_lim_dc;
3052:src/xeq.c     **** 			}
3053:src/xeq.c     **** 			if (pos_lim_dc < 0 && emax_plus < 0)
3054:src/xeq.c     **** 				emax_plus = 0;
3055:src/xeq.c     **** 		}
3056:src/xeq.c     **** 
3057:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
3058:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
3059:src/xeq.c     **** 		    && (dp_exp_chs_ds != exp_chs_ds)) {
3060:src/xeq.c     **** 			if (dp_exp_chs_ds == 0) {
3061:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3062:src/xeq.c     **** 				if (emax_minus < emax_plus)
3063:src/xeq.c     **** 					emax = emax_minus;
3064:src/xeq.c     **** 				else
3065:src/xeq.c     **** 					emax = emax_plus;
3066:src/xeq.c     **** 			}
3067:src/xeq.c     **** 			else if (dp_exp_chs_ds == 3) {
3068:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3069:src/xeq.c     **** 				if (emax_minus > emax_plus)
3070:src/xeq.c     **** 					emax = emax_minus;
3071:src/xeq.c     **** 				else
3072:src/xeq.c     **** 					emax = emax_plus;
3073:src/xeq.c     **** 			}
3074:src/xeq.c     **** 			else {
3075:src/xeq.c     **** 				if (dp_exp_chs_ds == 2 && !was_digit_entered)
3076:src/xeq.c     **** 					return;
3077:src/xeq.c     **** 				if (*p == 'D')
3078:src/xeq.c     **** 					emax = emax_minus;
3079:src/xeq.c     **** 				else
3080:src/xeq.c     **** 					emax = emax_plus;
3081:src/xeq.c     **** 			}
3082:src/xeq.c     **** 		}
3083:src/xeq.c     **** 		else if (large_exp_entry && dbl
3084:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
3085:src/xeq.c     **** 		         && (dp_exp_chs_dc != exp_chs_dc)) {
3086:src/xeq.c     **** 			if (dp_exp_chs_dc == 0) {
3087:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3088:src/xeq.c     **** 				if (emax_minus < emax_plus)
3089:src/xeq.c     **** 					emax = emax_minus;
3090:src/xeq.c     **** 				else
3091:src/xeq.c     **** 					emax = emax_plus;
3092:src/xeq.c     **** 			}
3093:src/xeq.c     **** 			else if (dp_exp_chs_dc == 3) {
3094:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3095:src/xeq.c     **** 				if (emax_minus > emax_plus)
3096:src/xeq.c     **** 					emax = emax_minus;
3097:src/xeq.c     **** 				else
3098:src/xeq.c     **** 					emax = emax_plus;
3099:src/xeq.c     **** 			}
3100:src/xeq.c     **** 			else {
3101:src/xeq.c     **** 				if (dp_exp_chs_dc == 2 && !was_digit_entered)
3102:src/xeq.c     **** 					return;
3103:src/xeq.c     **** 				if (*p == 'D')
3104:src/xeq.c     **** 					emax = emax_minus;
ARM GAS  /tmp/ccQQPlfu.s 			page 65


3105:src/xeq.c     **** 				else
3106:src/xeq.c     **** 					emax = emax_plus;
3107:src/xeq.c     **** 			}
3108:src/xeq.c     **** 		}
3109:src/xeq.c     **** 		else if (flag_D && exp_chs_dc != exp_chs_ds) {
3110:src/xeq.c     **** 			if (exp_chs_ds == 0) {
3111:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3112:src/xeq.c     **** 				if (emax_minus < emax_plus)
3113:src/xeq.c     **** 					emax = emax_minus;
3114:src/xeq.c     **** 				else
3115:src/xeq.c     **** 					emax = emax_plus;
3116:src/xeq.c     **** 			}
3117:src/xeq.c     **** 			else if (exp_chs_ds == 3) {
3118:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3119:src/xeq.c     **** 				if (emax_minus > emax_plus)
3120:src/xeq.c     **** 					emax = emax_minus;
3121:src/xeq.c     **** 				else
3122:src/xeq.c     **** 					emax = emax_plus;
3123:src/xeq.c     **** 			}
3124:src/xeq.c     **** 			else {
3125:src/xeq.c     **** 				if (exp_chs_ds == 2 && !was_digit_entered)
3126:src/xeq.c     **** 					return;
3127:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3128:src/xeq.c     **** 				if (*p == 'D')
3129:src/xeq.c     **** #else
3130:src/xeq.c     **** 				if (*p == '-')
3131:src/xeq.c     **** #endif
3132:src/xeq.c     **** 					emax = emax_minus;
3133:src/xeq.c     **** 				else
3134:src/xeq.c     **** 					emax = emax_plus;
3135:src/xeq.c     **** 			}
3136:src/xeq.c     **** 		}
3137:src/xeq.c     **** 		else {
3138:src/xeq.c     **** 			if (exp_chs_dc == 0) {
3139:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3140:src/xeq.c     **** 				if (emax_minus < emax_plus)
3141:src/xeq.c     **** 					emax = emax_minus;
3142:src/xeq.c     **** 				else
3143:src/xeq.c     **** 					emax = emax_plus;
3144:src/xeq.c     **** 			}
3145:src/xeq.c     **** 			else if (exp_chs_dc == 3) {
3146:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3147:src/xeq.c     **** 				if (emax_minus > emax_plus)
3148:src/xeq.c     **** 					emax = emax_minus;
3149:src/xeq.c     **** 				else
3150:src/xeq.c     **** 					emax = emax_plus;
3151:src/xeq.c     **** 			}
3152:src/xeq.c     **** 			else {
3153:src/xeq.c     **** 				if (exp_chs_dc == 2 && !was_digit_entered)
3154:src/xeq.c     **** 					return;
3155:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3156:src/xeq.c     **** 				if (*p == 'D')
3157:src/xeq.c     **** #else
3158:src/xeq.c     **** 				if (*p == '-')
3159:src/xeq.c     **** #endif
3160:src/xeq.c     **** 					emax = emax_minus;
3161:src/xeq.c     **** 				else
ARM GAS  /tmp/ccQQPlfu.s 			page 66


3162:src/xeq.c     **** 					emax = emax_plus;
3163:src/xeq.c     **** 			}
3164:src/xeq.c     **** 		}
3165:src/xeq.c     **** 	}
3166:src/xeq.c     **** 
3167:src/xeq.c     **** do_not_check_limits:
3168:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3169:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3170:src/xeq.c     **** 	p++;
3171:src/xeq.c     **** #  else
3172:src/xeq.c     **** 	if (*p == '-')
3173:src/xeq.c     **** 		p++;
3174:src/xeq.c     **** #  endif
3175:src/xeq.c     **** 	/* Check if the current exponent exceeds the range.
3176:src/xeq.c     **** 	 * If so, shift it back until it doesn't.
3177:src/xeq.c     **** 	 * Also remove leading zeros.
3178:src/xeq.c     **** 	 */
3179:src/xeq.c     **** 	while (s_to_i(p) > emax || *p == '0') {
3180:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
3181:src/xeq.c     **** 			p[i] = p[i + 1];
3182:src/xeq.c     **** 		CmdLineLength--;
3183:src/xeq.c     **** 	}
3184:src/xeq.c     **** #else
3185:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3186:src/xeq.c     **** 	negative = (*p == 'D');
3187:src/xeq.c     **** 	p++;
3188:src/xeq.c     **** #  else
3189:src/xeq.c     **** 	if (*p == '-') {
3190:src/xeq.c     **** 		p++;
3191:src/xeq.c     **** 		negative = 1;
3192:src/xeq.c     **** 	}
3193:src/xeq.c     **** 	else negative = 0;
3194:src/xeq.c     **** #  endif
3195:src/xeq.c     **** 	// Display a warning if the exponent is out of range.
3196:src/xeq.c     **** 	if ((i = s_to_i(p)) > emax) {
3197:src/xeq.c     **** 		if (was_digit_entered) {
3198:src/xeq.c     **** 			CmdLineLength--;
3199:src/xeq.c     **** 			if (large_exp_entry && dbl ? i > 9999 : i > 999) {
3200:src/xeq.c     **** 				report_warn(ERR_TOO_LONG);
3201:src/xeq.c     **** 				return;
3202:src/xeq.c     **** 			}
3203:src/xeq.c     **** 		}
3204:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3205:src/xeq.c     **** 		else if (('D' | 1) == 'E')
3206:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3207:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3208:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3209:src/xeq.c     **** 		else
3210:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3211:src/xeq.c     **** #  else
3212:src/xeq.c     **** 		else if (negative) {
3213:src/xeq.c     **** 			scopy(p - 1, p);
3214:src/xeq.c     **** 			CmdLineLength--;
3215:src/xeq.c     **** 		}
3216:src/xeq.c     **** 		else {
3217:src/xeq.c     **** 			xcopy(p + 1, p, CMDLINELEN - 1 - CmdLineEex);
3218:src/xeq.c     **** 			*p = '-';
ARM GAS  /tmp/ccQQPlfu.s 			page 67


3219:src/xeq.c     **** 			CmdLineLength++;
3220:src/xeq.c     **** 		}
3221:src/xeq.c     **** #  endif
3222:src/xeq.c     **** 		if (negative)
3223:src/xeq.c     **** 			report_warn(ERR_TOO_SMALL);
3224:src/xeq.c     **** 		else
3225:src/xeq.c     **** 			report_warn(ERR_TOO_BIG);
3226:src/xeq.c     **** 	}
3227:src/xeq.c     **** #endif
3228:src/xeq.c     **** }
3229:src/xeq.c     **** 
3230:src/xeq.c     **** /* We've encountered a CHS while entering the command line.
3231:src/xeq.c     ****  */
3232:src/xeq.c     **** static void cmdlinechs(void) {
3233:src/xeq.c     **** 	if (CmdLineEex) {
3234:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3235:src/xeq.c     **** 		// 'D' instead of 'E' indicates a negative exponent.
3236:src/xeq.c     **** 		// Four-digit exponents wouldn't fit into Cmdline if we used 'E-'.
3237:src/xeq.c     **** 		if (('D' | 1) == 'E')
3238:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3239:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3240:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3241:src/xeq.c     **** 		else
3242:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3243:src/xeq.c     **** #else
3244:src/xeq.c     **** 		const unsigned int pos = CmdLineEex + 1;
3245:src/xeq.c     **** 		if (CmdLineLength <= pos) {
3246:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
3247:src/xeq.c     **** 				append_cmdline('-');
3248:src/xeq.c     **** 		} else if (Cmdline[pos] == '-') {
3249:src/xeq.c     **** 			if (CmdLineLength != pos)
3250:src/xeq.c     **** 				xcopy(Cmdline + pos, Cmdline + pos + 1, CmdLineLength-pos);
3251:src/xeq.c     **** 			CmdLineLength--;
3252:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3253:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
3254:src/xeq.c     **** 			Cmdline[pos] = '-';
3255:src/xeq.c     **** 			CmdLineLength++;
3256:src/xeq.c     **** 		}
3257:src/xeq.c     **** #endif
3258:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC == 1 \
3259:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DS == -1 || SP_EXP_ENTRY_CHS_DS == 1 \
3260:src/xeq.c     ****     || ((DP_EXP_ENTRY_CHS_DC == 1 || DP_EXP_ENTRY_CHS_DS == 1) && defined(LARGE_EXPONENT_ENTRY))
3261:src/xeq.c     **** 		exponent_adjusted(0);
3262:src/xeq.c     **** #endif
3263:src/xeq.c     **** 	} else {
3264:src/xeq.c     **** 		if (Cmdline[0] == '-') {
3265:src/xeq.c     **** 			if (CmdLineLength > 1)
3266:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
3267:src/xeq.c     **** 			CmdLineLength--;
3268:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3269:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
3270:src/xeq.c     **** 			Cmdline[0] = '-';
3271:src/xeq.c     **** 			CmdLineLength++;
3272:src/xeq.c     **** 		}
3273:src/xeq.c     **** 	}
3274:src/xeq.c     **** }
3275:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 68


3276:src/xeq.c     **** /* Execute a tests command
3277:src/xeq.c     ****  */
3278:src/xeq.c     **** static void do_tst(int cmp, const enum tst_op op) {
3279:src/xeq.c     **** 	int a = 0;
3280:src/xeq.c     **** 	int iszero, isneg;
3281:src/xeq.c     **** 
3282:src/xeq.c     **** 	process_cmdline_set_lift();
3283:src/xeq.c     **** 
3284:src/xeq.c     **** 	if (is_intmode()) {
3285:src/xeq.c     **** 		unsigned long long int xv, yv;
3286:src/xeq.c     **** 		int xs, ys;
3287:src/xeq.c     **** 
3288:src/xeq.c     **** 		xv = extract_value(getX_int(), &xs);
3289:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
3290:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
3291:src/xeq.c     **** 			ys = 0;
3292:src/xeq.c     **** 		} else
3293:src/xeq.c     **** 			yv = extract_value(get_reg_n_int(cmp), &ys);
3294:src/xeq.c     **** 
3295:src/xeq.c     **** 		if (xv == 0 && yv == 0)
3296:src/xeq.c     **** 			iszero = 1;
3297:src/xeq.c     **** 		else
3298:src/xeq.c     **** 			iszero = (xv == yv) && (xs == ys);
3299:src/xeq.c     **** 
3300:src/xeq.c     **** 		if (xs == ys) {		// same sign
3301:src/xeq.c     **** 			if (xs)		// both negative
3302:src/xeq.c     **** 				isneg = xv > yv;
3303:src/xeq.c     **** 			else		// both positive
3304:src/xeq.c     **** 				isneg = xv < yv;
3305:src/xeq.c     **** 		} else
3306:src/xeq.c     **** 			isneg = xs;	// opposite signs
3307:src/xeq.c     **** 	} else {
3308:src/xeq.c     **** 		decNumber t, x, r;
3309:src/xeq.c     **** 
3310:src/xeq.c     **** 		getX(&x);
3311:src/xeq.c     **** 		if (decNumberIsNaN(&x))
3312:src/xeq.c     **** 			goto flse;
3313:src/xeq.c     **** 
3314:src/xeq.c     **** 		getRegister(&t, cmp);
3315:src/xeq.c     **** 		if (decNumberIsNaN(&t))
3316:src/xeq.c     **** 			goto flse;
3317:src/xeq.c     **** 
3318:src/xeq.c     **** 		if (op == TST_APX) {
3319:src/xeq.c     **** 			decNumberRnd(&x, &x);
3320:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
3321:src/xeq.c     **** 				decNumberRnd(&t, &t);
3322:src/xeq.c     **** 		}
3323:src/xeq.c     **** 		dn_compare(&r, &x, &t);
3324:src/xeq.c     **** 		iszero = dn_eq0(&r);
3325:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
3326:src/xeq.c     **** 	}
3327:src/xeq.c     **** 
3328:src/xeq.c     **** 	switch (op) {
3329:src/xeq.c     **** 	case TST_APX:
3330:src/xeq.c     **** 	case TST_EQ:	a = iszero;		break;
3331:src/xeq.c     **** 	case TST_NE:	a = !iszero;		break;
3332:src/xeq.c     **** 	case TST_LT:	a = isneg && !iszero;	break;
ARM GAS  /tmp/ccQQPlfu.s 			page 69


3333:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
3334:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
3335:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
3336:src/xeq.c     **** 	default:	a = 0;			break;
3337:src/xeq.c     **** 	}
3338:src/xeq.c     **** 
3339:src/xeq.c     **** flse:	fin_tst(a);
3340:src/xeq.c     **** }
3341:src/xeq.c     **** 
3342:src/xeq.c     **** void check_zero(enum nilop op) {
3343:src/xeq.c     **** 	int neg;
3344:src/xeq.c     **** 	int zero;
3345:src/xeq.c     **** 
3346:src/xeq.c     **** 	if (is_intmode()) {
3347:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
3348:src/xeq.c     **** 		zero = (xv == 0);
3349:src/xeq.c     **** 	} else {
3350:src/xeq.c     **** 		decNumber x;
3351:src/xeq.c     **** 		getX(&x);
3352:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
3353:src/xeq.c     **** 		zero = dn_eq0(&x);
3354:src/xeq.c     **** 	}
3355:src/xeq.c     **** 	if (op == OP_Xeq_pos0)
3356:src/xeq.c     **** 		fin_tst(zero && !neg);
3357:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
3358:src/xeq.c     **** 		fin_tst(zero && neg);
3359:src/xeq.c     **** }
3360:src/xeq.c     **** 
3361:src/xeq.c     **** void cmdtest(unsigned int arg, enum rarg op) {
3362:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
3363:src/xeq.c     **** }
3364:src/xeq.c     **** 
3365:src/xeq.c     **** static void do_ztst(const decNumber *re, const decNumber *im, enum tst_op op) {
3366:src/xeq.c     **** 	decNumber x, y;
3367:src/xeq.c     **** 
3368:src/xeq.c     **** 	process_cmdline_set_lift();
3369:src/xeq.c     **** 	if (is_intmode()) {
3370:src/xeq.c     **** 		bad_mode_error();
3371:src/xeq.c     **** 		return;
3372:src/xeq.c     **** 	}
3373:src/xeq.c     **** 	getXY(&x, &y);
3374:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
3375:src/xeq.c     **** 		fin_tst(0);
3376:src/xeq.c     **** 		return;
3377:src/xeq.c     **** 	}
3378:src/xeq.c     **** 	fin_tst((op == TST_EQ) == (dn_eq(&x, re) && dn_eq(&y, im)));
3379:src/xeq.c     **** }
3380:src/xeq.c     **** 
3381:src/xeq.c     **** void cmdztest(unsigned int arg, enum rarg op) {
3382:src/xeq.c     **** 	decNumber re, im;
3383:src/xeq.c     **** 	getRegister(&re, arg);
3384:src/xeq.c     **** 	getRegister(&im, arg + 1);
3385:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
3386:src/xeq.c     **** }
3387:src/xeq.c     **** 
3388:src/xeq.c     **** static int incdec(unsigned int arg, int inc) {
3389:src/xeq.c     **** 	if (is_intmode()) {
ARM GAS  /tmp/ccQQPlfu.s 			page 70


3390:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3391:src/xeq.c     **** 		int xs;
3392:src/xeq.c     **** 		unsigned long long int xv;
3393:src/xeq.c     **** 
3394:src/xeq.c     **** 		if (inc)
3395:src/xeq.c     **** 			x = intAdd(x, 1LL);
3396:src/xeq.c     **** 		else
3397:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3398:src/xeq.c     **** 		set_reg_n_int(arg, x);
3399:src/xeq.c     **** 
3400:src/xeq.c     **** 		xv = extract_value(x, &xs);
3401:src/xeq.c     **** 		return xv != 0;
3402:src/xeq.c     **** 	} else {
3403:src/xeq.c     **** 		decNumber x, y;
3404:src/xeq.c     **** 
3405:src/xeq.c     **** 		getRegister(&x, arg);
3406:src/xeq.c     **** 		if (inc)
3407:src/xeq.c     **** 			dn_inc(&x);
3408:src/xeq.c     **** 		else
3409:src/xeq.c     **** 			dn_dec(&x);
3410:src/xeq.c     **** 		setRegister(arg, &x);
3411:src/xeq.c     **** 		decNumberTrunc(&y, &x);
3412:src/xeq.c     **** 		return ! dn_eq0(&y);
3413:src/xeq.c     **** 	}
3414:src/xeq.c     **** }
3415:src/xeq.c     **** 
3416:src/xeq.c     **** void cmdlincdec(unsigned int arg, enum rarg op) {
3417:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
3418:src/xeq.c     **** }
3419:src/xeq.c     **** 
3420:src/xeq.c     **** void cmdloopz(unsigned int arg, enum rarg op) {
3421:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
3422:src/xeq.c     **** }
3423:src/xeq.c     **** 
3424:src/xeq.c     **** void cmdloop(unsigned int arg, enum rarg op) {
3425:src/xeq.c     **** 	if (is_intmode()) {
3426:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3427:src/xeq.c     **** 		int xs;
3428:src/xeq.c     **** 		unsigned long long int xv;
3429:src/xeq.c     **** 
3430:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE)
3431:src/xeq.c     **** 			x = intAdd(x, 1LL);
3432:src/xeq.c     **** 		else
3433:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3434:src/xeq.c     **** 		set_reg_n_int(arg, x);
3435:src/xeq.c     **** 
3436:src/xeq.c     **** 		xv = extract_value(x, &xs);
3437:src/xeq.c     **** 		if (op == RARG_ISG)
3438:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
3439:src/xeq.c     **** 		else if (op == RARG_DSE)
3440:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
3441:src/xeq.c     **** 		else if (op == RARG_ISE)
3442:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
3443:src/xeq.c     **** 		else // if (op == RARG_DSL)
3444:src/xeq.c     **** 			fin_tst(! (xs != 0 && xv > 0));		// < 0
3445:src/xeq.c     **** 		return;
3446:src/xeq.c     **** 	} else {
ARM GAS  /tmp/ccQQPlfu.s 			page 71


3447:src/xeq.c     **** 		decNumber x, i, f, n, u;
3448:src/xeq.c     **** 
3449:src/xeq.c     **** 		getRegister(&x, arg);
3450:src/xeq.c     **** 
3451:src/xeq.c     **** 		// Break the number into the important bits
3452:src/xeq.c     **** 		// nnnnn.fffii
3453:src/xeq.c     **** 		dn_abs(&f, &x);
3454:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
3455:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
3456:src/xeq.c     **** 		if (decNumberIsNegative(&x))
3457:src/xeq.c     **** 			dn_minus(&n, &n);
3458:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
3459:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
3460:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
3461:src/xeq.c     **** 		dn_mul100(&x, &i);
3462:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
3463:src/xeq.c     **** 		if (dn_eq0(&i))
3464:src/xeq.c     **** 			dn_1(&i);
3465:src/xeq.c     **** 
3466:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE) {
3467:src/xeq.c     **** 			dn_add(&n, &n, &i);
3468:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3469:src/xeq.c     **** 			if (op == RARG_ISE)
3470:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
3471:src/xeq.c     **** 			else
3472:src/xeq.c     **** 				fin_tst(dn_ge0(&x));
3473:src/xeq.c     **** 		} else {
3474:src/xeq.c     **** 			dn_subtract(&n, &n, &i);
3475:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3476:src/xeq.c     **** 			if (op == RARG_DSL)
3477:src/xeq.c     **** 				fin_tst(dn_le0(&x));
3478:src/xeq.c     **** 			else
3479:src/xeq.c     **** 				fin_tst(dn_lt0(&x));
3480:src/xeq.c     **** 		}
3481:src/xeq.c     **** 
3482:src/xeq.c     **** 		// Finally rebuild the result
3483:src/xeq.c     **** 		if (decNumberIsNegative(&n)) {
3484:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
3485:src/xeq.c     **** 		} else
3486:src/xeq.c     **** 			dn_add(&x, &n, &u);
3487:src/xeq.c     **** 		setRegister(arg, &x);
3488:src/xeq.c     **** 	}
3489:src/xeq.c     **** }
3490:src/xeq.c     **** 
3491:src/xeq.c     **** 
3492:src/xeq.c     **** /* Shift a real number by 10 to the specified power
3493:src/xeq.c     ****  */
3494:src/xeq.c     **** void op_shift_digit(unsigned int n, enum rarg op) {
3495:src/xeq.c     **** 	decNumber x;
3496:src/xeq.c     **** 	int adjust = n;
3497:src/xeq.c     **** 
3498:src/xeq.c     **** 	if (is_intmode()) {
3499:src/xeq.c     **** 		bad_mode_error();
3500:src/xeq.c     **** 		return;
3501:src/xeq.c     **** 	}
3502:src/xeq.c     **** 	getX(&x);
3503:src/xeq.c     **** 	setlastX();
ARM GAS  /tmp/ccQQPlfu.s 			page 72


3504:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
3505:src/xeq.c     **** 		return;
3506:src/xeq.c     **** 	if (op == RARG_SRD)
3507:src/xeq.c     **** 		adjust = -adjust;
3508:src/xeq.c     **** 	x.exponent += adjust;
3509:src/xeq.c     **** 	setX(&x);
3510:src/xeq.c     **** }
3511:src/xeq.c     **** 
3512:src/xeq.c     **** 
3513:src/xeq.c     **** /* Return a pointer to the byte with the indicated flag in it.
3514:src/xeq.c     ****  * also return a byte with the relevant bit mask set up.
3515:src/xeq.c     ****  * Also, handle local flags.
3516:src/xeq.c     ****  */
3517:src/xeq.c     **** static unsigned short int *flag_word(int n, unsigned short int *mask) {
 457              		.loc 1 3517 71 is_stmt 1 view -0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              		@ link register save eliminated.
3518:src/xeq.c     **** 	unsigned short int *p;
 462              		.loc 1 3518 2 view .LVU141
3519:src/xeq.c     **** 
3520:src/xeq.c     **** 	if (n >= LOCAL_FLAG_BASE) {
 463              		.loc 1 3520 2 view .LVU142
 464              		.loc 1 3520 5 is_stmt 0 view .LVU143
 465 0000 6F28     		cmp	r0, #111
3517:src/xeq.c     **** 	unsigned short int *p;
 466              		.loc 1 3517 71 view .LVU144
 467 0002 10B4     		push	{r4}
 468              		.cfi_def_cfa_offset 4
 469              		.cfi_offset 4, -4
 470              		.loc 1 3520 5 view .LVU145
 471 0004 29DD     		ble	.L42
3521:src/xeq.c     **** 		n -= LOCAL_FLAG_BASE;
 472              		.loc 1 3521 3 is_stmt 1 view .LVU146
 473              		.loc 1 3521 5 is_stmt 0 view .LVU147
 474 0006 7038     		subs	r0, r0, #112
 475              	.LVL39:
3522:src/xeq.c     **** 		if (n > XROM_SYSTEM_FLAG_BASE && XromFlags.xIN) {
 476              		.loc 1 3522 3 is_stmt 1 view .LVU148
 477              		.loc 1 3522 6 is_stmt 0 view .LVU149
 478 0008 0828     		cmp	r0, #8
 479 000a 04DD     		ble	.L43
 480              		.loc 1 3522 33 discriminator 1 view .LVU150
 481 000c 174B     		ldr	r3, .L54
 482 000e 93F90120 		ldrsb	r2, [r3, #1]
 483 0012 002A     		cmp	r2, #0
 484 0014 15DB     		blt	.L44
 485              	.L43:
3523:src/xeq.c     **** 			// XROM special
3524:src/xeq.c     **** 			p = &XromFlagWord;
3525:src/xeq.c     **** 		}
3526:src/xeq.c     **** 		else if (LocalRegs & 1) {
 486              		.loc 1 3526 8 is_stmt 1 view .LVU151
 487              		.loc 1 3526 12 is_stmt 0 view .LVU152
 488 0016 164B     		ldr	r3, .L54+4
 489 0018 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQQPlfu.s 			page 73


 490 001a B3F9DE27 		ldrsh	r2, [r3, #2014]
3527:src/xeq.c     **** 			// Odd frame: flags are at end of frame
3528:src/xeq.c     **** 			p = RetStk + LocalRegs + local_levels() - 1;
 491              		.loc 1 3528 44 view .LVU153
 492 001e 154B     		ldr	r3, .L54+8
3526:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 493              		.loc 1 3526 11 view .LVU154
 494 0020 D407     		lsls	r4, r2, #31
 495              		.loc 1 3528 44 view .LVU155
 496 0022 1B68     		ldr	r3, [r3]
3526:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 497              		.loc 1 3526 11 view .LVU156
 498 0024 1ED5     		bpl	.L45
 499              		.loc 1 3528 4 is_stmt 1 view .LVU157
 500              	.LBB1333:
 501              	.LBI1333:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 502              		.loc 1 217 5 view .LVU158
 503              	.LBB1334:
 218:src/xeq.c     **** }
 504              		.loc 1 218 2 view .LVU159
 218:src/xeq.c     **** }
 505              		.loc 1 218 57 is_stmt 0 view .LVU160
 506 0026 002A     		cmp	r2, #0
 507 0028 B8BF     		it	lt
 508 002a 33F81240 		ldrhlt	r4, [r3, r2, lsl #1]
 509              	.LBE1334:
 510              	.LBE1333:
 511              		.loc 1 3528 44 view .LVU161
 512 002e 02F10042 		add	r2, r2, #-2147483648
 513 0032 B4BF     		ite	lt
 514 0034 C4F30B04 		ubfxlt	r4, r4, #0, #12
 515              	.LBB1336:
 516              	.LBB1335:
 517 0038 0024     		movge	r4, #0
 518              	.LBE1335:
 519              	.LBE1336:
 520 003a 013A     		subs	r2, r2, #1
 521 003c 2244     		add	r2, r2, r4
 522              		.loc 1 3528 6 view .LVU162
 523 003e 03EB4203 		add	r3, r3, r2, lsl #1
 524              	.LVL40:
 525              	.L44:
3529:src/xeq.c     **** 		}
3530:src/xeq.c     **** 		else {
3531:src/xeq.c     **** 			// Even frame: Flags are at beginning of frame
3532:src/xeq.c     **** 			p = RetStk + LocalRegs + 1;
3533:src/xeq.c     **** 		}
3534:src/xeq.c     **** 	}
3535:src/xeq.c     **** 	else
3536:src/xeq.c     **** 		p = UserFlags;
3537:src/xeq.c     **** 
3538:src/xeq.c     **** 	if (mask != NULL)
 526              		.loc 1 3538 2 is_stmt 1 view .LVU163
 527              		.loc 1 3538 5 is_stmt 0 view .LVU164
 528 0042 21B1     		cbz	r1, .L47
3539:src/xeq.c     **** 		*mask = 1 << (n & 15);
ARM GAS  /tmp/ccQQPlfu.s 			page 74


 529              		.loc 1 3539 3 is_stmt 1 view .LVU165
 530              		.loc 1 3539 19 is_stmt 0 view .LVU166
 531 0044 00F00F04 		and	r4, r0, #15
 532              		.loc 1 3539 13 view .LVU167
 533 0048 0122     		movs	r2, #1
 534 004a A240     		lsls	r2, r2, r4
 535              		.loc 1 3539 9 view .LVU168
 536 004c 0A80     		strh	r2, [r1]	@ movhi
 537              	.L47:
3540:src/xeq.c     **** 	return p + (n >> 4);
 538              		.loc 1 3540 2 is_stmt 1 view .LVU169
 539              		.loc 1 3540 16 is_stmt 0 view .LVU170
 540 004e 0011     		asrs	r0, r0, #4
 541              	.LVL41:
3541:src/xeq.c     **** }
 542              		.loc 1 3541 1 view .LVU171
 543 0050 03EB4000 		add	r0, r3, r0, lsl #1
 544 0054 5DF8044B 		ldr	r4, [sp], #4
 545              		.cfi_remember_state
 546              		.cfi_restore 4
 547              		.cfi_def_cfa_offset 0
 548 0058 7047     		bx	lr
 549              	.LVL42:
 550              	.L42:
 551              		.cfi_restore_state
3536:src/xeq.c     **** 
 552              		.loc 1 3536 3 is_stmt 1 view .LVU172
3536:src/xeq.c     **** 
 553              		.loc 1 3536 7 is_stmt 0 view .LVU173
 554 005a 054B     		ldr	r3, .L54+4
3536:src/xeq.c     **** 
 555              		.loc 1 3536 5 view .LVU174
 556 005c 1B68     		ldr	r3, [r3]
 557 005e 03F5FE63 		add	r3, r3, #2032
 558              	.LVL43:
3536:src/xeq.c     **** 
 559              		.loc 1 3536 5 view .LVU175
 560 0062 EEE7     		b	.L44
 561              	.LVL44:
 562              	.L45:
3532:src/xeq.c     **** 		}
 563              		.loc 1 3532 4 is_stmt 1 view .LVU176
3532:src/xeq.c     **** 		}
 564              		.loc 1 3532 27 is_stmt 0 view .LVU177
 565 0064 0132     		adds	r2, r2, #1
3532:src/xeq.c     **** 		}
 566              		.loc 1 3532 6 view .LVU178
 567 0066 03EB4203 		add	r3, r3, r2, lsl #1
 568              	.LVL45:
3532:src/xeq.c     **** 		}
 569              		.loc 1 3532 6 view .LVU179
 570 006a EAE7     		b	.L44
 571              	.L55:
 572              		.align	2
 573              	.L54:
 574 006c 00000000 		.word	XromParams
 575 0070 00000000 		.word	main_ram
ARM GAS  /tmp/ccQQPlfu.s 			page 75


 576 0074 00000000 		.word	RetStk
 577              		.cfi_endproc
 578              	.LFE197:
 580              		.section	.text.set_zero,"ax",%progbits
 581              		.align	1
 582              		.p2align 2,,3
 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 586              		.fpu fpv4-sp-d16
 588              	set_zero:
 589              	.LVL46:
 590              	.LFB106:
1540:src/xeq.c     **** 	zero_regs(x, 1);
 591              		.loc 1 1540 35 is_stmt 1 view -0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 0
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595              		@ link register save eliminated.
1541:src/xeq.c     **** }
 596              		.loc 1 1541 2 view .LVU181
 597              	.LBB1337:
 598              	.LBI1337:
1512:src/xeq.c     **** #if 0
 599              		.loc 1 1512 6 view .LVU182
 600              	.LBB1338:
1527:src/xeq.c     **** #endif
 601              		.loc 1 1527 2 view .LVU183
 602              	.LBB1339:
 603              	.LBI1339:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 604              		.loc 1 1112 5 view .LVU184
 605              	.LBB1340:
1113:src/xeq.c     **** }
 606              		.loc 1 1113 2 view .LVU185
1113:src/xeq.c     **** }
 607              		.loc 1 1113 24 is_stmt 0 view .LVU186
 608 0000 074B     		ldr	r3, .L57
 609 0002 1B68     		ldr	r3, [r3]
 610 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 611 0008 44F20102 		movw	r2, #16385
 612 000c 1A40     		ands	r2, r2, r3
 613              	.LBE1340:
 614              	.LBE1339:
1527:src/xeq.c     **** #endif
 615              		.loc 1 1527 2 view .LVU187
 616 000e B2F5804F 		cmp	r2, #16384
 617 0012 0CBF     		ite	eq
 618 0014 1022     		moveq	r2, #16
 619 0016 0822     		movne	r2, #8
 620 0018 0021     		movs	r1, #0
 621 001a FFF7FEBF 		b	xset
 622              	.LVL47:
 623              	.L58:
1527:src/xeq.c     **** #endif
 624              		.loc 1 1527 2 view .LVU188
 625 001e 00BF     		.align	2
ARM GAS  /tmp/ccQQPlfu.s 			page 76


 626              	.L57:
 627 0020 00000000 		.word	main_ram
 628              	.LBE1338:
 629              	.LBE1337:
 630              		.cfi_endproc
 631              	.LFE106:
 633              		.section	.text.intResult,"ax",%progbits
 634              		.align	1
 635              		.p2align 2,,3
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
 639              		.fpu fpv4-sp-d16
 641              	intResult:
 642              	.LVL48:
 643              	.LFB238:
3542:src/xeq.c     **** 
3543:src/xeq.c     **** int get_user_flag(int n) {
3544:src/xeq.c     **** 	unsigned short mask;
3545:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
3546:src/xeq.c     **** 
3547:src/xeq.c     **** 	return (*f & mask)? 1 : 0;
3548:src/xeq.c     **** }
3549:src/xeq.c     **** 
3550:src/xeq.c     **** void put_user_flag(int n, int f) {
3551:src/xeq.c     **** 	if (f)	set_user_flag(n);
3552:src/xeq.c     **** 	else	clr_user_flag(n);
3553:src/xeq.c     **** }
3554:src/xeq.c     **** 
3555:src/xeq.c     **** #ifndef set_user_flag
3556:src/xeq.c     **** void set_user_flag(int n) {
3557:src/xeq.c     **** 	unsigned short mask;
3558:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3559:src/xeq.c     **** 
3560:src/xeq.c     **** 	*f |= mask;
3561:src/xeq.c     **** }
3562:src/xeq.c     **** 
3563:src/xeq.c     **** void clr_user_flag(int n) {
3564:src/xeq.c     **** 	unsigned short mask;
3565:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3566:src/xeq.c     **** 
3567:src/xeq.c     **** 	*f &= ~mask;
3568:src/xeq.c     **** }
3569:src/xeq.c     **** #endif
3570:src/xeq.c     **** 
3571:src/xeq.c     **** void cmdflag(unsigned int arg, enum rarg op) {
3572:src/xeq.c     **** 	unsigned short mask;
3573:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
3574:src/xeq.c     **** 	int flg = *f & mask;
3575:src/xeq.c     **** 
3576:src/xeq.c     **** 	switch (op) {
3577:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
3578:src/xeq.c     **** 	case RARG_CF:	flg = 0;			   break;
3579:src/xeq.c     **** 	case RARG_FF:	flg = flg? 0 : 1;		   break;
3580:src/xeq.c     **** 
3581:src/xeq.c     **** 	case RARG_FS:	fin_tst(flg);			   return;
3582:src/xeq.c     **** 	case RARG_FC:	fin_tst(! flg);			   return;
ARM GAS  /tmp/ccQQPlfu.s 			page 77


3583:src/xeq.c     **** 
3584:src/xeq.c     **** 	case RARG_FSC:	fin_tst(flg); flg = 0;		   break;
3585:src/xeq.c     **** 	case RARG_FSS:	fin_tst(flg); flg = 1;		   break;
3586:src/xeq.c     **** 	case RARG_FSF:	fin_tst(flg); flg = flg ? 0 : 1;   break;
3587:src/xeq.c     **** 
3588:src/xeq.c     **** 	case RARG_FCC:	fin_tst(! flg);	flg = 0;	   break;
3589:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
3590:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
3591:src/xeq.c     **** 
3592:src/xeq.c     **** 	default:
3593:src/xeq.c     **** 		return;
3594:src/xeq.c     **** 	}
3595:src/xeq.c     **** 
3596:src/xeq.c     **** 	// And write the value back
3597:src/xeq.c     **** 	if (flg)
3598:src/xeq.c     **** 		*f |= mask;
3599:src/xeq.c     **** 	else
3600:src/xeq.c     **** 		*f &= ~mask;
3601:src/xeq.c     **** 
3602:src/xeq.c     **** 	if ( arg == A_FLAG ) {
3603:src/xeq.c     **** 		dot( BIG_EQ, flg );
3604:src/xeq.c     **** 		finish_display(); // BIG_EQ
3605:src/xeq.c     **** 	}
3606:src/xeq.c     **** }
3607:src/xeq.c     **** 
3608:src/xeq.c     **** /* Reset all flags to off/false
3609:src/xeq.c     ****  */
3610:src/xeq.c     **** void clrflags(enum nilop op) {
3611:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
3612:src/xeq.c     **** 	if (LocalRegs < 0) {
3613:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
3614:src/xeq.c     **** 	}
3615:src/xeq.c     **** }
3616:src/xeq.c     **** 
3617:src/xeq.c     **** 
3618:src/xeq.c     **** /* Integer word size
3619:src/xeq.c     ****  */
3620:src/xeq.c     **** void intws(unsigned int arg, enum rarg op) {
3621:src/xeq.c     **** 	if (is_intmode()) {
3622:src/xeq.c     **** 		int i, ss = stack_size();
3623:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
3624:src/xeq.c     **** 		long long int v;
3625:src/xeq.c     **** 
3626:src/xeq.c     **** 		for (i=0; i<ss; i++) {
3627:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
3628:src/xeq.c     **** 			UState.int_len = arg;
3629:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
3630:src/xeq.c     **** 			UState.int_len = oldlen;
3631:src/xeq.c     **** 		}
3632:src/xeq.c     **** 		v = mask_value(get_reg_n_int(regL_idx));
3633:src/xeq.c     **** 		UState.int_len = arg;
3634:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
3635:src/xeq.c     **** 	} else
3636:src/xeq.c     **** 	    UState.int_len = arg;
3637:src/xeq.c     **** }
3638:src/xeq.c     **** 
3639:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 78


3640:src/xeq.c     **** /* Convert from a real to a fraction
3641:src/xeq.c     ****  */
3642:src/xeq.c     **** 
3643:src/xeq.c     **** void get_maxdenom(decNumber *d) {
3644:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
3645:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
3646:src/xeq.c     **** }
3647:src/xeq.c     **** 
3648:src/xeq.c     **** void op_2frac(enum nilop op) {
3649:src/xeq.c     **** 	decNumber z, n, d, t;
3650:src/xeq.c     **** 
3651:src/xeq.c     **** 	if (UState.intm) {
3652:src/xeq.c     **** 		setX_int(1);
3653:src/xeq.c     **** 		return;
3654:src/xeq.c     **** 	}
3655:src/xeq.c     **** 
3656:src/xeq.c     **** 	getY(&z);			// Stack has been lifted already
3657:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
3658:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
3659:src/xeq.c     **** 	if (State2.runmode) {
3660:src/xeq.c     **** 		dn_divide(&t, &n, &d);
3661:src/xeq.c     **** 		dn_compare(&n, &t, &z);
3662:src/xeq.c     **** 		if (dn_eq0(&n))
3663:src/xeq.c     **** 			DispMsg = "y/x =";
3664:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
3665:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
3666:src/xeq.c     **** 			DispMsg = "y/x \007\344<";
3667:src/xeq.c     **** 		else
3668:src/xeq.c     **** 			DispMsg = "y/x \007\344>";
3669:src/xeq.c     **** #else
3670:src/xeq.c     **** 			DispMsg = "y/x <";
3671:src/xeq.c     **** 		else
3672:src/xeq.c     **** 			DispMsg = "y/x >";
3673:src/xeq.c     **** #endif
3674:src/xeq.c     **** 	}
3675:src/xeq.c     **** }
3676:src/xeq.c     **** 
3677:src/xeq.c     **** void op_fracdenom(enum nilop op) {
3678:src/xeq.c     **** 	int s;
3679:src/xeq.c     **** 	unsigned long long int i;
3680:src/xeq.c     **** 
3681:src/xeq.c     **** 	i = getX_int_sgn(&s);
3682:src/xeq.c     **** 	if (i > 9999)
3683:src/xeq.c     **** 		UState.denom_max = 0;
3684:src/xeq.c     **** 	else if (i != 1)
3685:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
3686:src/xeq.c     **** 	else {
3687:src/xeq.c     **** 		setlastX();
3688:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
3689:src/xeq.c     **** 	}
3690:src/xeq.c     **** }
3691:src/xeq.c     **** 
3692:src/xeq.c     **** 
3693:src/xeq.c     **** /*  Switching from an integer mode to real mode
3694:src/xeq.c     ****  *  We convert the stack and LastX 
3695:src/xeq.c     ****  */
3696:src/xeq.c     **** static const unsigned short int StackRegMask[] = { 0x10f, 0x1ff };
ARM GAS  /tmp/ccQQPlfu.s 			page 79


3697:src/xeq.c     **** 
3698:src/xeq.c     **** void op_float(enum nilop op) {
3699:src/xeq.c     **** 
3700:src/xeq.c     **** 	if (is_intmode()) {
3701:src/xeq.c     **** 		int i;
3702:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
3703:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
3704:src/xeq.c     **** 			if (mask & 1) {
3705:src/xeq.c     **** 				// register belongs to stack
3706:src/xeq.c     **** 				register_from_int(i, i, op == OP_FLOAT_XIN);
3707:src/xeq.c     **** 			}
3708:src/xeq.c     **** 			else if (is_dblmode()) {
3709:src/xeq.c     **** 				// expand the other registers which have been left
3710:src/xeq.c     **** 				// in decimal64 format by the integer mode switch
3711:src/xeq.c     **** 				packed128_from_packed(&(get_reg_n(i)->d), Regs + i);
3712:src/xeq.c     **** 			}
3713:src/xeq.c     **** 		}
3714:src/xeq.c     **** 	}
3715:src/xeq.c     **** 	if (op != OP_FLOAT_XIN && op != OP_FLOAT_RCLM) {
3716:src/xeq.c     **** 		UState.fract = 0;
3717:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
3718:src/xeq.c     **** 	}
3719:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
3720:src/xeq.c     **** }
3721:src/xeq.c     **** 
3722:src/xeq.c     **** /*  Switch to integer mode.
3723:src/xeq.c     ****  *  We convert the stack and LastX
3724:src/xeq.c     ****  */
3725:src/xeq.c     **** static void switch_to_int(void) {
3726:src/xeq.c     **** 	int i;
3727:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
3728:src/xeq.c     **** 	const int dbl = is_dblmode();
3729:src/xeq.c     **** 
3730:src/xeq.c     **** 	for (i = regK_idx; i >= regX_idx; --i, mask <<= 1) {
3731:src/xeq.c     **** 		if (mask & 0x800) {
3732:src/xeq.c     **** 			// register belongs to stack
3733:src/xeq.c     **** 			int_from_register(i, i);
3734:src/xeq.c     **** 		}
3735:src/xeq.c     **** 		else if (dbl) {
3736:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
3737:src/xeq.c     **** 			packed_from_packed128(Regs + i, &(get_reg_n(i)->d));
3738:src/xeq.c     **** 		}
3739:src/xeq.c     **** 	}
3740:src/xeq.c     **** }
3741:src/xeq.c     **** 
3742:src/xeq.c     **** static void set_base(unsigned int b) {
3743:src/xeq.c     **** 	UState.int_base = b - 1;
3744:src/xeq.c     **** 	if (!is_intmode())
3745:src/xeq.c     **** 		switch_to_int();
3746:src/xeq.c     **** }
3747:src/xeq.c     **** 
3748:src/xeq.c     **** void set_int_base(unsigned int arg, enum rarg op) {
3749:src/xeq.c     **** 	if (arg < 2) {
3750:src/xeq.c     **** 		if (arg == 0)
3751:src/xeq.c     **** 			op_float(OP_FLOAT);
3752:src/xeq.c     **** 		else
3753:src/xeq.c     **** 			op_fract(OP_FRACT);
ARM GAS  /tmp/ccQQPlfu.s 			page 80


3754:src/xeq.c     **** 	} else
3755:src/xeq.c     **** 		set_base(arg);
3756:src/xeq.c     **** }
3757:src/xeq.c     **** 
3758:src/xeq.c     **** 
3759:src/xeq.c     **** void op_fract(enum nilop op) {
3760:src/xeq.c     **** 	op_float(OP_FLOAT);
3761:src/xeq.c     **** 	UState.fract = 1;
3762:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
3763:src/xeq.c     **** 		UState.improperfrac = 1;
3764:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
3765:src/xeq.c     **** 		UState.improperfrac = 0;
3766:src/xeq.c     **** }
3767:src/xeq.c     **** 
3768:src/xeq.c     **** #ifdef INCLUDE_USER_MODE
3769:src/xeq.c     **** /* Save and restore user state.
3770:src/xeq.c     ****  */
3771:src/xeq.c     **** void cmdsavem(unsigned int arg, enum rarg op) {
3772:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
3773:src/xeq.c     **** }
3774:src/xeq.c     **** 
3775:src/xeq.c     **** void cmdrestm(unsigned int arg, enum rarg op) {
3776:src/xeq.c     **** 	const int dbl = is_dblmode();
3777:src/xeq.c     **** 	const int intm = is_intmode();
3778:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
3779:src/xeq.c     **** 
3780:src/xeq.c     **** 	// Fix things
3781:src/xeq.c     **** 	if ( UState.contrast == 0 )
3782:src/xeq.c     **** 		UState.contrast = 6;
3783:src/xeq.c     **** 
3784:src/xeq.c     **** 	if (intm != is_intmode()) {
3785:src/xeq.c     **** 		// Switch back to decimal or integer mode
3786:src/xeq.c     **** 		UState.intm = intm;
3787:src/xeq.c     **** 		if (intm)
3788:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
3789:src/xeq.c     **** 		else
3790:src/xeq.c     **** 			switch_to_int();
3791:src/xeq.c     **** 	}
3792:src/xeq.c     **** 	if (! is_intmode() && dbl != is_dblmode()) {
3793:src/xeq.c     **** 		// Switch back to double/single precision
3794:src/xeq.c     **** 		UState.mode_double = dbl;
3795:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
3796:src/xeq.c     **** 	}
3797:src/xeq.c     **** }
3798:src/xeq.c     **** #endif
3799:src/xeq.c     **** 
3800:src/xeq.c     **** /* Process a single digit.
3801:src/xeq.c     ****  */
3802:src/xeq.c     **** #if 0 // unused
3803:src/xeq.c     **** static int is_digit(const char c) {
3804:src/xeq.c     **** 	if (c >= '0' && c <= '9')
3805:src/xeq.c     **** 		return 1;
3806:src/xeq.c     **** 	return 0;
3807:src/xeq.c     **** }
3808:src/xeq.c     **** 
3809:src/xeq.c     **** static int is_xdigit(const char c) {
3810:src/xeq.c     **** 	if (is_digit(c) || (c >= 'A' && c <= 'F'))
ARM GAS  /tmp/ccQQPlfu.s 			page 81


3811:src/xeq.c     **** 		return 1;
3812:src/xeq.c     **** 	return 0;
3813:src/xeq.c     **** }
3814:src/xeq.c     **** #endif
3815:src/xeq.c     **** 
3816:src/xeq.c     **** static void digit(unsigned int c) {
3817:src/xeq.c     **** 	const int intm = is_intmode();
3818:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
3819:src/xeq.c     **** 
3820:src/xeq.c     **** 	if (Cmdline[0] == '-')
3821:src/xeq.c     **** 		lim++;
3822:src/xeq.c     **** 	if (intm) {
3823:src/xeq.c     **** 		if (c >= int_base()) {
3824:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3825:src/xeq.c     **** 			return;
3826:src/xeq.c     **** 		}
3827:src/xeq.c     **** 	} else {
3828:src/xeq.c     **** 		if (c >= 10) {
3829:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3830:src/xeq.c     **** 			return;
3831:src/xeq.c     **** 		}
3832:src/xeq.c     **** 
3833:src/xeq.c     **** 		if (CmdLineEex) {
3834:src/xeq.c     **** 			lim = CMDLINELEN;
3835:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3836:src/xeq.c     **** 			if (CmdLineLength >= lim) {
3837:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
3838:src/xeq.c     **** 
3839:src/xeq.c     **** 				if (*p == '-')
3840:src/xeq.c     **** 					p++;
3841:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
3842:src/xeq.c     **** 					p[0] = p[1];
3843:src/xeq.c     **** 					p++;
3844:src/xeq.c     **** 				}
3845:src/xeq.c     **** 				CmdLineLength--;
3846:src/xeq.c     **** 			}
3847:src/xeq.c     **** #endif
3848:src/xeq.c     **** 		}
3849:src/xeq.c     **** 		else {
3850:src/xeq.c     **** 			lim += CmdLineDot;
3851:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
3852:src/xeq.c     **** 			if (CmdLineDot >= 2) {
3853:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
3854:src/xeq.c     **** 				// Make space for the minus sign
3855:src/xeq.c     **** 				lim = CMDLINELEN - (Cmdline[0] != '-');
3856:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3857:src/xeq.c     **** 				lim += 1 + (find_char(Cmdline, '.')[1] == '.');
3858:src/xeq.c     **** #  else
3859:src/xeq.c     **** 				lim++;
3860:src/xeq.c     **** #  endif
3861:src/xeq.c     **** 			}
3862:src/xeq.c     **** #endif
3863:src/xeq.c     **** 		}
3864:src/xeq.c     **** 	}
3865:src/xeq.c     **** 	if (CmdLineLength >= lim
3866:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
3867:src/xeq.c     **** 		report_warn(ERR_TOO_LONG);
ARM GAS  /tmp/ccQQPlfu.s 			page 82


3868:src/xeq.c     **** 		return;
3869:src/xeq.c     **** 	}
3870:src/xeq.c     **** 
3871:src/xeq.c     **** 	if (c >= 10)
3872:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
3873:src/xeq.c     **** 	else {
3874:src/xeq.c     **** 		// Leading zeros in the exponent aren't visible to the user,
3875:src/xeq.c     **** 		// and they're removed automatically if digits are shifted,
3876:src/xeq.c     **** 		// so it's more consistent if they can't be entered, either.
3877:src/xeq.c     **** 		if (c == 0 && CmdLineEex) {
3878:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
3879:src/xeq.c     **** 				return;
3880:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3881:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'D')
3882:src/xeq.c     **** 				return;
3883:src/xeq.c     **** #else
3884:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == '-')
3885:src/xeq.c     **** 				return;
3886:src/xeq.c     **** #endif
3887:src/xeq.c     **** 		}
3888:src/xeq.c     **** 
3889:src/xeq.c     **** 		append_cmdline(c + '0');
3890:src/xeq.c     **** 
3891:src/xeq.c     **** 		if (CmdLineEex)
3892:src/xeq.c     **** 			exponent_adjusted(1);
3893:src/xeq.c     **** 	}
3894:src/xeq.c     **** }
3895:src/xeq.c     **** 
3896:src/xeq.c     **** 
3897:src/xeq.c     **** void set_entry() {
3898:src/xeq.c     **** 	if (!Running && !XromRunning)
3899:src/xeq.c     **** 		State.entryp = 1;
3900:src/xeq.c     **** }
3901:src/xeq.c     **** 
3902:src/xeq.c     **** 
3903:src/xeq.c     **** /* Decode and process the specials.  These are niladic functions and
3904:src/xeq.c     ****  * commands with non-standard stack operation.
3905:src/xeq.c     ****  */
3906:src/xeq.c     **** static void specials(const opcode op) {
3907:src/xeq.c     **** 	int opm = argKIND(op);
3908:src/xeq.c     **** 
3909:src/xeq.c     **** 	switch (opm) {
3910:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
3911:src/xeq.c     **** 	case OP_3:	case OP_4:	case OP_5:
3912:src/xeq.c     **** 	case OP_6:	case OP_7:	case OP_8:
3913:src/xeq.c     **** 	case OP_9:	case OP_A:	case OP_B:
3914:src/xeq.c     **** 	case OP_C:	case OP_D:	case OP_E:
3915:src/xeq.c     **** 	case OP_F:
3916:src/xeq.c     **** 		digit(opm - OP_0);
3917:src/xeq.c     **** 		break;
3918:src/xeq.c     **** 
3919:src/xeq.c     **** 	case OP_DOT:
3920:src/xeq.c     **** 		if (is_intmode())
3921:src/xeq.c     **** 			break;
3922:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3923:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 13 + CmdLineDot) {
3924:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
ARM GAS  /tmp/ccQQPlfu.s 			page 83


3925:src/xeq.c     **** #else
3926:src/xeq.c     **** #  if defined(PRETTY_FRACTION_ENTRY)
3927:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + 2*CmdLineDot) {
3928:src/xeq.c     **** #  else
3929:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + CmdLineDot) {
3930:src/xeq.c     **** #  endif
3931:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '.'
3932:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
3933:src/xeq.c     **** #endif
3934:src/xeq.c     **** 				digit(0);
3935:src/xeq.c     **** 			CmdLineDot++;
3936:src/xeq.c     **** 			append_cmdline('.');
3937:src/xeq.c     **** 		}
3938:src/xeq.c     **** 		break;
3939:src/xeq.c     **** 
3940:src/xeq.c     **** 	case OP_EEX:
3941:src/xeq.c     **** 		if (is_intmode())
3942:src/xeq.c     **** 			break;
3943:src/xeq.c     **** 		else {
3944:src/xeq.c     **** #if INCLUDE_EEX_PI == 2
3945:src/xeq.c     **** 			const int eex_pi = 1;
3946:src/xeq.c     **** #elif INCLUDE_EEX_PI == 1
3947:src/xeq.c     **** 			const int eex_pi = get_user_flag(regL_idx);
3948:src/xeq.c     **** #else
3949:src/xeq.c     **** 			const int eex_pi = 0;
3950:src/xeq.c     **** #endif
3951:src/xeq.c     **** 
3952:src/xeq.c     **** 			if (CmdLineDot == 2) {
3953:src/xeq.c     **** 				if (eex_pi) {
3954:src/xeq.c     **** 					// fraction entered (two dots); execute ENTER and enter pi
3955:src/xeq.c     **** 					if (is_bad_cmdline()) {
3956:src/xeq.c     **** 						if (Running || XromRunning)
3957:src/xeq.c     **** 							report_err(ERR_DOMAIN);
3958:src/xeq.c     **** 						break;
3959:src/xeq.c     **** 					}
3960:src/xeq.c     **** 					process_cmdline();
3961:src/xeq.c     **** 					lift();
3962:src/xeq.c     **** 					copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3963:src/xeq.c     **** 					set_lift();
3964:src/xeq.c     **** 				}
3965:src/xeq.c     **** 				break;
3966:src/xeq.c     **** 			}
3967:src/xeq.c     **** 			if (CmdLineEex || CmdLineLength >= CMDLINELEN)
3968:src/xeq.c     **** 				break;
3969:src/xeq.c     **** 			if (eex_pi && CmdLineLength == 0) {
3970:src/xeq.c     **** 				// empty command line: enter pi
3971:src/xeq.c     **** 				lift_if_enabled();
3972:src/xeq.c     **** 				copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3973:src/xeq.c     **** 				set_lift();
3974:src/xeq.c     **** 				break;
3975:src/xeq.c     **** 			}
3976:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 1)
3977:src/xeq.c     **** 			if (UState.fract)
3978:src/xeq.c     **** 				break;
3979:src/xeq.c     **** #endif
3980:src/xeq.c     **** 			if (CmdLineLength == 0)
3981:src/xeq.c     **** 				digit(1);
ARM GAS  /tmp/ccQQPlfu.s 			page 84


3982:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
3983:src/xeq.c     **** 			append_cmdline('E');
3984:src/xeq.c     **** 		}
3985:src/xeq.c     **** 		break;
3986:src/xeq.c     **** 
3987:src/xeq.c     **** 	case OP_CHS:
3988:src/xeq.c     **** 		if (CmdLineLength)
3989:src/xeq.c     **** 			cmdlinechs();
3990:src/xeq.c     **** 		else if (is_intmode()) {
3991:src/xeq.c     **** 			setX_int(intChs(getX_int()));
3992:src/xeq.c     **** 			set_lift();
3993:src/xeq.c     **** 		} else {
3994:src/xeq.c     **** 			decNumber x, r;
3995:src/xeq.c     **** 
3996:src/xeq.c     **** 			getX(&x);
3997:src/xeq.c     **** 			dn_minus(&r, &x);
3998:src/xeq.c     **** 			setX(&r);
3999:src/xeq.c     **** 			set_lift();
4000:src/xeq.c     **** 		}
4001:src/xeq.c     **** 		break;
4002:src/xeq.c     **** 
4003:src/xeq.c     **** 	case OP_CLX:
4004:src/xeq.c     **** 		if (Running)
4005:src/xeq.c     **** 			illegal(op);
4006:src/xeq.c     **** 		else if (CmdLineLength) {
4007:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
4008:src/xeq.c     **** 			if (CmdLineEex != 0 && Cmdline[CmdLineLength-1] == 'D') {
4009:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
4010:src/xeq.c     **** 				break;
4011:src/xeq.c     **** 			}
4012:src/xeq.c     **** #endif
4013:src/xeq.c     **** 			CmdLineLength--;
4014:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
4015:src/xeq.c     **** 				CmdLineEex = 0;
4016:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
4017:src/xeq.c     **** 				CmdLineDot--;
4018:src/xeq.c     **** 		} else
4019:src/xeq.c     **** 			clrx(OP_rCLX);
4020:src/xeq.c     **** 		break;
4021:src/xeq.c     **** 
4022:src/xeq.c     **** 		case OP_ENTER:
4023:src/xeq.c     **** 		  if (ENTRY_RPN_ENABLED) {  
4024:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
4025:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
4026:src/xeq.c     **** 		      process_cmdline();     //JM
4027:src/xeq.c     **** 		    } else {                       //JM
4028:src/xeq.c     **** 		      process_cmdline();
4029:src/xeq.c     **** 		      lift();
4030:src/xeq.c     **** 		      if ( (XromRunning || Running) ) {//JMTEST Explicitly including standard functionality if co
4031:src/xeq.c     **** 			clr_lift();
4032:src/xeq.c     **** 		      }   
4033:src/xeq.c     **** 		    }                              //JM
4034:src/xeq.c     **** 		  }
4035:src/xeq.c     **** 		  else {
4036:src/xeq.c     **** 		    process_cmdline();
4037:src/xeq.c     **** 		    lift();
4038:src/xeq.c     **** 		    clr_lift();
ARM GAS  /tmp/ccQQPlfu.s 			page 85


4039:src/xeq.c     **** 		  }
4040:src/xeq.c     **** 		  break;
4041:src/xeq.c     **** 		  
4042:src/xeq.c     **** 	case OP_SIGMAPLUS:
4043:src/xeq.c     **** 	case OP_SIGMAMINUS:
4044:src/xeq.c     **** 		if (is_intmode()) {
4045:src/xeq.c     **** 			bad_mode_error();
4046:src/xeq.c     **** 			break;
4047:src/xeq.c     **** 		}
4048:src/xeq.c     **** 		process_cmdline();
4049:src/xeq.c     **** 		clr_lift();
4050:src/xeq.c     **** 		setlastX();
4051:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
4052:src/xeq.c     **** 			sigma_plus();
4053:src/xeq.c     **** 		else
4054:src/xeq.c     **** 			sigma_minus();
4055:src/xeq.c     **** 		sigma_val(OP_sigmaN);
4056:src/xeq.c     **** 		break;
4057:src/xeq.c     **** 
4058:src/xeq.c     **** 	// Conditional tests vs registers....
4059:src/xeq.c     **** 	case OP_Xeq0:	case OP_Xlt0:	case OP_Xgt0:
4060:src/xeq.c     **** 	case OP_Xne0:	case OP_Xle0:	case OP_Xge0:
4061:src/xeq.c     **** 	case OP_Xapx0:
4062:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ZERO, (enum tst_op)(opm - OP_Xeq0));
4063:src/xeq.c     **** 		break;
4064:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
4065:src/xeq.c     **** 		do_ztst(&const_0, &const_0, (enum tst_op)(opm - OP_Zeq0));
4066:src/xeq.c     **** 		break;
4067:src/xeq.c     **** 
4068:src/xeq.c     **** 	case OP_Xeq1:	case OP_Xlt1:	case OP_Xgt1:
4069:src/xeq.c     **** 	case OP_Xne1:	case OP_Xle1:	case OP_Xge1:
4070:src/xeq.c     **** 	case OP_Xapx1:
4071:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ONE, (enum tst_op)(opm - OP_Xeq1));
4072:src/xeq.c     **** 		break;
4073:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
4074:src/xeq.c     **** 		do_ztst(&const_1, &const_0, (enum tst_op)(opm - OP_Zeq1));
4075:src/xeq.c     **** 		break;
4076:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
4077:src/xeq.c     **** 		do_ztst(&const_0, &const_1, (enum tst_op)(opm - OP_Zeqi));
4078:src/xeq.c     **** 		break;
4079:src/xeq.c     **** 
4080:src/xeq.c     **** 	default:
4081:src/xeq.c     **** 		illegal(op);
4082:src/xeq.c     **** 	}
4083:src/xeq.c     **** }
4084:src/xeq.c     **** 
4085:src/xeq.c     **** enum trig_modes get_trig_mode(void) {
4086:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
4087:src/xeq.c     **** 		return TRIG_RAD;
4088:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
4089:src/xeq.c     **** 	return (enum trig_modes) UState.trigmode;
4090:src/xeq.c     **** }
4091:src/xeq.c     **** 
4092:src/xeq.c     **** void op_double(enum nilop op) {
4093:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
4094:src/xeq.c     **** 	const int intm = is_intmode();
4095:src/xeq.c     **** 	int i;
ARM GAS  /tmp/ccQQPlfu.s 			page 86


4096:src/xeq.c     **** 
4097:src/xeq.c     **** 	if (dbl != UState.mode_double) {
4098:src/xeq.c     **** 		// Mode switch
4099:src/xeq.c     **** 		if (dbl) {
4100:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
4101:src/xeq.c     **** 				// Need space for double precision stack
4102:src/xeq.c     **** 				cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
4103:src/xeq.c     **** 				if (Error) {
4104:src/xeq.c     **** 					return;
4105:src/xeq.c     **** 				}
4106:src/xeq.c     **** 			}
4107:src/xeq.c     **** 
4108:src/xeq.c     **** 			UState.mode_double = 1;
4109:src/xeq.c     **** 			if (! intm) {
4110:src/xeq.c     **** 				// Convert X to K to double precision
4111:src/xeq.c     **** 				// Avoid this in integer mode
4112:src/xeq.c     **** 				for (i = 0; i < STACK_SIZE + EXTRA_REG; ++i)
4113:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
4114:src/xeq.c     **** 			}
4115:src/xeq.c     **** 		}
4116:src/xeq.c     **** 		else {
4117:src/xeq.c     **** 			if (! intm) {
4118:src/xeq.c     **** 				// Convert X to K to single precision
4119:src/xeq.c     **** 				// Avoid this in integer mode
4120:src/xeq.c     **** 				for (i = STACK_SIZE + EXTRA_REG - 1; i >= 0; --i)
4121:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
4122:src/xeq.c     **** 			}
4123:src/xeq.c     **** 			UState.mode_double = 0;
4124:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
4125:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
4126:src/xeq.c     **** 		}
4127:src/xeq.c     **** 	}
4128:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
4129:src/xeq.c     **** 	if (intm) {
4130:src/xeq.c     **** 		// Do the necessary conversions from integer mode
4131:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
4132:src/xeq.c     **** 	}
4133:src/xeq.c     **** }
4134:src/xeq.c     **** 
4135:src/xeq.c     **** void cmdpause(unsigned int arg, enum rarg op) {
4136:src/xeq.c     **** 	display();
4137:src/xeq.c     **** #ifndef CONSOLE
4138:src/xeq.c     **** 	// decremented in the low level heartbeat
4139:src/xeq.c     **** 	Pause = arg;
4140:src/xeq.c     **** 	GoFast = (arg == 0);
4141:src/xeq.c     **** #elif 0
4142:src/xeq.c     **** 	start_pause(arg);
4143:src/xeq.c     **** #else	
4144:src/xeq.c     **** #if defined(WIN32) && !defined(__GNUC__)
4145:src/xeq.c     **** #pragma warning(disable:4996)
4146:src/xeq.c     **** 	sleep(arg/10);
4147:src/xeq.c     **** #else
4148:src/xeq.c     **** 	usleep(arg * 100000);
4149:src/xeq.c     **** #endif
4150:src/xeq.c     **** #endif
4151:src/xeq.c     **** }
4152:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 87


4153:src/xeq.c     **** 
4154:src/xeq.c     **** 
4155:src/xeq.c     **** void op_setspeed(enum nilop op) {
4156:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
4157:src/xeq.c     **** 	update_speed(1);
4158:src/xeq.c     **** }
4159:src/xeq.c     **** 
4160:src/xeq.c     **** 
4161:src/xeq.c     **** void op_prompt(enum nilop op) {
4162:src/xeq.c     **** 	set_running_off();
4163:src/xeq.c     **** 	alpha_view_common(regX_idx);
4164:src/xeq.c     **** }
4165:src/xeq.c     **** 
4166:src/xeq.c     **** /* Test if a number is an integer or fractional */
4167:src/xeq.c     **** /* Special numbers are neither */
4168:src/xeq.c     **** void XisInt(enum nilop op) {
4169:src/xeq.c     **** 	decNumber x;
4170:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
4171:src/xeq.c     **** 	if ( is_intmode() )
4172:src/xeq.c     **** 		result = op_int;
4173:src/xeq.c     **** 	else if (decNumberIsSpecial(getX(&x)))
4174:src/xeq.c     **** 		result = 0;
4175:src/xeq.c     **** 	else
4176:src/xeq.c     **** 	        result = (is_int(&x) == op_int);
4177:src/xeq.c     **** 	fin_tst(result);
4178:src/xeq.c     **** }
4179:src/xeq.c     **** 
4180:src/xeq.c     **** /* Test if a number is an even or odd integer */
4181:src/xeq.c     **** /* fractional or special values are neither even nor odd */
4182:src/xeq.c     **** void XisEvenOrOdd(enum nilop op) {
4183:src/xeq.c     **** 	decNumber x;
4184:src/xeq.c     **** 	int odd = (op == OP_XisODD);
4185:src/xeq.c     **** 
4186:src/xeq.c     **** 	if (is_intmode()) {
4187:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
4188:src/xeq.c     **** 	} else {
4189:src/xeq.c     **** 		fin_tst(is_even(getX(&x)) == !odd);
4190:src/xeq.c     **** 	}
4191:src/xeq.c     **** }
4192:src/xeq.c     **** 
4193:src/xeq.c     **** 
4194:src/xeq.c     **** /* Test if a number is prime */
4195:src/xeq.c     **** void XisPrime(enum nilop op) {
4196:src/xeq.c     **** 	unsigned long long int i;
4197:src/xeq.c     **** 	int sgn;
4198:src/xeq.c     **** 
4199:src/xeq.c     **** 	i = getX_int_sgn(&sgn);
4200:src/xeq.c     **** 	if (!is_intmode()) {
4201:src/xeq.c     **** 		decNumber x;
4202:src/xeq.c     **** 
4203:src/xeq.c     **** 		getX(&x);
4204:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
4205:src/xeq.c     **** 			sgn = 1; // not prime
4206:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
4207:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
4208:src/xeq.c     **** 			i = 0xFFFFFFFFFFFFFFFFull;
4209:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQQPlfu.s 			page 88


4210:src/xeq.c     **** 	fin_tst(sgn == 0 && isPrime(i));
4211:src/xeq.c     **** }
4212:src/xeq.c     **** 
4213:src/xeq.c     **** /* Test is a number is infinite.
4214:src/xeq.c     ****  */
4215:src/xeq.c     **** void isInfinite(enum nilop op) {
4216:src/xeq.c     **** 	decNumber x;
4217:src/xeq.c     **** 
4218:src/xeq.c     **** 	getX(&x);
4219:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
4220:src/xeq.c     **** }
4221:src/xeq.c     **** 
4222:src/xeq.c     **** /* Test for NaN.
4223:src/xeq.c     ****  * this could be done by testing x != x, but having a special command
4224:src/xeq.c     ****  * for it reads easier.
4225:src/xeq.c     ****  */
4226:src/xeq.c     **** void isNan(enum nilop op) {
4227:src/xeq.c     **** 	decNumber x;
4228:src/xeq.c     **** 
4229:src/xeq.c     **** 	getX(&x);
4230:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
4231:src/xeq.c     **** }
4232:src/xeq.c     **** 
4233:src/xeq.c     **** void isSpecial(enum nilop op) {
4234:src/xeq.c     **** 	decNumber x;
4235:src/xeq.c     **** 
4236:src/xeq.c     **** 	getX(&x);
4237:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
4238:src/xeq.c     **** }
4239:src/xeq.c     **** 
4240:src/xeq.c     **** void op_entryp(enum nilop op) {
4241:src/xeq.c     **** 	fin_tst(State.entryp);
4242:src/xeq.c     **** }
4243:src/xeq.c     **** 
4244:src/xeq.c     **** /* Bulk register operations */
4245:src/xeq.c     **** int reg_decode(int *s, int *n, int *d, int flash) {
4246:src/xeq.c     **** 	decNumber x, y;
4247:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
4248:src/xeq.c     **** 
4249:src/xeq.c     **** 	if (is_intmode()) {
4250:src/xeq.c     **** 		bad_mode_error();
4251:src/xeq.c     **** 		return 1;
4252:src/xeq.c     **** 	}
4253:src/xeq.c     **** 	getX(&x);			// sss.nnddd~
4254:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
4255:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
4256:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
4257:src/xeq.c     **** 
4258:src/xeq.c     **** 	if (rsrc < 0) {
4259:src/xeq.c     **** 		if (!flash)
4260:src/xeq.c     **** 			goto range_error;
4261:src/xeq.c     **** 		rsrc = -rsrc;
4262:src/xeq.c     **** 	}
4263:src/xeq.c     **** 	else
4264:src/xeq.c     **** 		flash = 0;
4265:src/xeq.c     **** 
4266:src/xeq.c     **** 	rdest = rsrc % 1000;		// ddd
ARM GAS  /tmp/ccQQPlfu.s 			page 89


4267:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
4268:src/xeq.c     **** 	num = rsrc % 100;		// nn
4269:src/xeq.c     **** 	rsrc /= 100;			// sss
4270:src/xeq.c     **** 
4271:src/xeq.c     **** 	mx_src = flash ? BackupFlash._numregs
4272:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
4273:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
4274:src/xeq.c     **** 	       : global_regs();
4275:src/xeq.c     **** 	if (rsrc >= mx_src)
4276:src/xeq.c     **** 		goto range_error;
4277:src/xeq.c     **** 
4278:src/xeq.c     **** 	if (d != NULL) {
4279:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
4280:src/xeq.c     **** 
4281:src/xeq.c     **** 		if (num == 0) {
4282:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
4283:src/xeq.c     **** 			if (flash || (rsrc >= LOCAL_REG_BASE) != (rdest >= LOCAL_REG_BASE))
4284:src/xeq.c     **** 				// source & destination in different memory areas
4285:src/xeq.c     **** 				num = mx_dest < mx_src ? mx_dest : mx_src;
4286:src/xeq.c     **** 			else {
4287:src/xeq.c     **** 				if (rsrc > rdest) {
4288:src/xeq.c     **** 					num = mx_src - rsrc;
4289:src/xeq.c     **** 					q = rsrc - rdest;
4290:src/xeq.c     **** 				}
4291:src/xeq.c     **** 				else {
4292:src/xeq.c     **** 					num = mx_dest - rdest;
4293:src/xeq.c     **** 					q = rdest - rsrc;
4294:src/xeq.c     **** 				}
4295:src/xeq.c     **** 				if (num > q)
4296:src/xeq.c     **** 					num = q;
4297:src/xeq.c     **** 			}
4298:src/xeq.c     **** 		}
4299:src/xeq.c     **** 		if (rdest >= LOCAL_REG_BASE)
4300:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
4301:src/xeq.c     **** 		if (rdest + num > mx_dest)
4302:src/xeq.c     **** 			goto range_error;
4303:src/xeq.c     **** 		// Set pointer
4304:src/xeq.c     **** 		*d = rdest;
4305:src/xeq.c     **** 	}
4306:src/xeq.c     **** 	else {
4307:src/xeq.c     **** 		if (num == 0) {
4308:src/xeq.c     **** 			num = mx_src - rsrc;
4309:src/xeq.c     **** 		}
4310:src/xeq.c     **** 	}
4311:src/xeq.c     **** 	if (rsrc + num > mx_src)
4312:src/xeq.c     **** 		goto range_error;
4313:src/xeq.c     **** 
4314:src/xeq.c     **** 	// Now point to the correct source register
4315:src/xeq.c     **** 	*s = flash ? FLASH_REG_BASE + rsrc : rsrc;
4316:src/xeq.c     **** 	*n = num;
4317:src/xeq.c     **** 
4318:src/xeq.c     **** 	return 0;
4319:src/xeq.c     **** 
4320:src/xeq.c     **** range_error:
4321:src/xeq.c     **** 	report_err(ERR_RANGE);
4322:src/xeq.c     **** 	return 1;
4323:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 90


4324:src/xeq.c     **** 
4325:src/xeq.c     **** void op_regcopy(enum nilop op) {
4326:src/xeq.c     **** 	int s, n, d;
4327:src/xeq.c     **** 
4328:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 1))
4329:src/xeq.c     **** 		return;
4330:src/xeq.c     **** 	move_regs(get_reg_n(d), get_reg_n(s), n);
4331:src/xeq.c     **** }
4332:src/xeq.c     **** 
4333:src/xeq.c     **** void op_regswap(enum nilop op) {
4334:src/xeq.c     **** 	int s, n, d, i;
4335:src/xeq.c     **** 
4336:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 0) || s == d)
4337:src/xeq.c     **** 		return;
4338:src/xeq.c     **** 	else {
4339:src/xeq.c     **** 		if ((s > d && d + n > s) || (d > s && s + n > d))
4340:src/xeq.c     **** 			report_err(ERR_RANGE);
4341:src/xeq.c     **** 		else {
4342:src/xeq.c     **** 			for (i = 0; i < n; i++)
4343:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
4344:src/xeq.c     **** 		}
4345:src/xeq.c     **** 	}
4346:src/xeq.c     **** }
4347:src/xeq.c     **** 
4348:src/xeq.c     **** void op_regclr(enum nilop op) {
4349:src/xeq.c     **** 	int s, n;
4350:src/xeq.c     **** 
4351:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0))
4352:src/xeq.c     **** 		return;
4353:src/xeq.c     **** 	zero_regs(get_reg_n(s), n);
4354:src/xeq.c     **** }
4355:src/xeq.c     **** 
4356:src/xeq.c     **** void op_regsort(enum nilop op) {
4357:src/xeq.c     **** 	int s, n;
4358:src/xeq.c     **** 	decNumber pivot, a;
4359:src/xeq.c     **** 	int beg[10], end[10], i;
4360:src/xeq.c     **** 
4361:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0) || n == 1)
4362:src/xeq.c     **** 		return;
4363:src/xeq.c     **** 
4364:src/xeq.c     **** 	/* Non-recursive quicksort */
4365:src/xeq.c     **** 	beg[0] = 0;
4366:src/xeq.c     **** 	end[0] = n;
4367:src/xeq.c     **** 	i = 0;
4368:src/xeq.c     **** 	while (i>=0) {
4369:src/xeq.c     **** 		int L = beg[i];
4370:src/xeq.c     **** 		int R = end[i] - 1;
4371:src/xeq.c     **** 		if (L<R) {
4372:src/xeq.c     **** 			const int pvt = s + L;
4373:src/xeq.c     **** 			getRegister(&pivot, pvt);
4374:src/xeq.c     **** 			while (L<R) {
4375:src/xeq.c     **** 				while (L<R) {
4376:src/xeq.c     **** 					getRegister(&a, s + R);
4377:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
4378:src/xeq.c     **** 						break;
4379:src/xeq.c     **** 					R--;
4380:src/xeq.c     **** 				}
ARM GAS  /tmp/ccQQPlfu.s 			page 91


4381:src/xeq.c     **** 				if (L<R)
4382:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
4383:src/xeq.c     **** 				while (L<R) {
4384:src/xeq.c     **** 					getRegister(&a, s + L);
4385:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
4386:src/xeq.c     **** 						break;
4387:src/xeq.c     **** 					L++;
4388:src/xeq.c     **** 				}
4389:src/xeq.c     **** 				if (L<R)
4390:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
4391:src/xeq.c     **** 			}
4392:src/xeq.c     **** 			setRegister(s + L, &pivot);
4393:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
4394:src/xeq.c     **** 				beg[i+1] = beg[i];
4395:src/xeq.c     **** 				end[i+1] = L;
4396:src/xeq.c     **** 				beg[i] = L+1;
4397:src/xeq.c     **** 			} else {
4398:src/xeq.c     **** 				beg[i+1] = L+1;
4399:src/xeq.c     **** 				end[i+1] = end[i];
4400:src/xeq.c     **** 				end[i] = L;
4401:src/xeq.c     **** 			}
4402:src/xeq.c     **** 			i++;
4403:src/xeq.c     **** 		} else
4404:src/xeq.c     **** 			i--;
4405:src/xeq.c     **** 	}
4406:src/xeq.c     **** }
4407:src/xeq.c     **** 
4408:src/xeq.c     **** 
4409:src/xeq.c     **** 
4410:src/xeq.c     **** /* Print a single program step nicely.
4411:src/xeq.c     ****  */
4412:src/xeq.c     **** static void print_step(const opcode op) {
4413:src/xeq.c     **** 	char buf[16];
4414:src/xeq.c     **** 	const unsigned int pc = state_pc();
4415:src/xeq.c     **** 	char *p = TraceBuffer;
4416:src/xeq.c     **** 
4417:src/xeq.c     **** 	if (isXROM(pc)) {
4418:src/xeq.c     **** 		*p++ = 'x';
4419:src/xeq.c     **** 	} else if (isLIB(pc)) {
4420:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
4421:src/xeq.c     **** 		*p++ = ' ';
4422:src/xeq.c     **** 	}
4423:src/xeq.c     **** 	if (pc == 0)
4424:src/xeq.c     **** 		scopy(p, "000:");
4425:src/xeq.c     **** 	else {
4426:src/xeq.c     **** 		p = num_arg_0(p, user_pc(pc), 3);
4427:src/xeq.c     **** 		*p++ = ':';
4428:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
4429:src/xeq.c     **** 		if (*p == '?')
4430:src/xeq.c     **** 			*p = '\0';
4431:src/xeq.c     **** 	}
4432:src/xeq.c     **** 	State2.disp_small = 1;
4433:src/xeq.c     **** 	DispMsg = TraceBuffer;
4434:src/xeq.c     **** }
4435:src/xeq.c     **** 
4436:src/xeq.c     **** 
4437:src/xeq.c     **** /* When stuff gets done, there are some bits of state that need
ARM GAS  /tmp/ccQQPlfu.s 			page 92


4438:src/xeq.c     ****  * to be reset -- SHOW, ->base change the display mode until something
4439:src/xeq.c     ****  * happens.  This should be called on that something.
4440:src/xeq.c     ****  */
4441:src/xeq.c     **** void reset_volatile_state(void) {
4442:src/xeq.c     **** 	// extern int IntMaxWindow;
4443:src/xeq.c     **** 	// IntMaxWindow = 0;
4444:src/xeq.c     **** 	State2.window = 0;
4445:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
4446:src/xeq.c     **** }
4447:src/xeq.c     **** 
4448:src/xeq.c     **** 
4449:src/xeq.c     **** /*
4450:src/xeq.c     ****  *  Called by any long running function
4451:src/xeq.c     ****  */
4452:src/xeq.c     **** void busy(void)
4453:src/xeq.c     **** {
4454:src/xeq.c     **** 	/*
4455:src/xeq.c     **** 	 *  Serve the hardware watch dog
4456:src/xeq.c     **** 	 */
4457:src/xeq.c     **** 	watchdog();
4458:src/xeq.c     **** 
4459:src/xeq.c     **** 	/*
4460:src/xeq.c     **** 	 *  Increase the speed
4461:src/xeq.c     **** 	 */
4462:src/xeq.c     **** 	update_speed(1);
4463:src/xeq.c     **** 
4464:src/xeq.c     **** 	/*
4465:src/xeq.c     **** 	 *  Indicate busy state to the user
4466:src/xeq.c     **** 	 */
4467:src/xeq.c     **** 	if (!Busy && !Running) {
4468:src/xeq.c     **** 		Busy = 1;
4469:src/xeq.c     **** 		message("Wait...", NULL);
4470:src/xeq.c     **** 	}
4471:src/xeq.c     **** }
4472:src/xeq.c     **** 
4473:src/xeq.c     **** /***************************************************************************
4474:src/xeq.c     ****  * Function dispatchers.
4475:src/xeq.c     ****  */
4476:src/xeq.c     **** 
4477:src/xeq.c     **** /*
4478:src/xeq.c     ****  *  Check for a call into XROM space.
4479:src/xeq.c     ****  *  Fix the pointer alignment on the go.
4480:src/xeq.c     ****  */
4481:src/xeq.c     **** #ifdef REALBUILD
4482:src/xeq.c     **** typedef unsigned long uintptr_t;
4483:src/xeq.c     **** #else
4484:src/xeq.c     **** #include <stdint.h>
4485:src/xeq.c     **** #endif
4486:src/xeq.c     **** 
4487:src/xeq.c     **** static const s_opcode *check_for_xrom_address(void *fp)
4488:src/xeq.c     **** {
4489:src/xeq.c     **** 	const s_opcode *xp = (const s_opcode *) ((uintptr_t ) fp & ~1);
4490:src/xeq.c     **** 	if (xp < xrom)
4491:src/xeq.c     **** 		return NULL;
4492:src/xeq.c     **** #ifndef REALBUILD
4493:src/xeq.c     **** 	// On the device, XROM is at the end so this is not needed
4494:src/xeq.c     **** 	if (xp >= xrom + xrom_size)
ARM GAS  /tmp/ccQQPlfu.s 			page 93


4495:src/xeq.c     **** 		return NULL;
4496:src/xeq.c     **** #endif
4497:src/xeq.c     **** 	return xp;
4498:src/xeq.c     **** }
4499:src/xeq.c     **** 
4500:src/xeq.c     **** /*
4501:src/xeq.c     ****  *  Check for a call into XROM space and dispatch it.
4502:src/xeq.c     ****  */
4503:src/xeq.c     **** static int dispatch_xrom(void *fp)
4504:src/xeq.c     **** {
4505:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
4506:src/xeq.c     **** 	if (xp == NULL)
4507:src/xeq.c     **** 		return 0;
4508:src/xeq.c     **** 	// set_lift();
4509:src/xeq.c     **** 	UserLocalRegs = LocalRegs;
4510:src/xeq.c     **** 	XromRunning = 1;
4511:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
4512:src/xeq.c     **** 	xeq_xrom();
4513:src/xeq.c     **** 	return 1;
4514:src/xeq.c     **** }
4515:src/xeq.c     **** 
4516:src/xeq.c     **** /*
4517:src/xeq.c     ****  *  Return an integer result from a decimal value, setting flags properly
4518:src/xeq.c     ****  */
4519:src/xeq.c     **** static long long int intResult(decNumber *r) {
 644              		.loc 1 4519 46 is_stmt 1 view -0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 80
 647              		@ frame_needed = 0, uses_anonymous_args = 0
4520:src/xeq.c     **** 	unsigned long long int i;
 648              		.loc 1 4520 2 view .LVU190
4521:src/xeq.c     **** 	int s;
 649              		.loc 1 4521 2 view .LVU191
4522:src/xeq.c     **** 	decNumber ri, t;
 650              		.loc 1 4522 2 view .LVU192
4523:src/xeq.c     **** 
4524:src/xeq.c     **** 	decNumberRoundDigits(&t, r, 25, DEC_ROUND_HALF_EVEN);
 651              		.loc 1 4524 2 view .LVU193
4519:src/xeq.c     **** 	unsigned long long int i;
 652              		.loc 1 4519 46 is_stmt 0 view .LVU194
 653 0000 30B5     		push	{r4, r5, lr}
 654              		.cfi_def_cfa_offset 12
 655              		.cfi_offset 4, -12
 656              		.cfi_offset 5, -8
 657              		.cfi_offset 14, -4
 658 0002 95B0     		sub	sp, sp, #84
 659              		.cfi_def_cfa_offset 96
 660              		.loc 1 4524 2 view .LVU195
 661 0004 0323     		movs	r3, #3
 662 0006 1922     		movs	r2, #25
4519:src/xeq.c     **** 	unsigned long long int i;
 663              		.loc 1 4519 46 view .LVU196
 664 0008 0146     		mov	r1, r0
 665              		.loc 1 4524 2 view .LVU197
 666 000a 0BA8     		add	r0, sp, #44
 667              	.LVL49:
 668              		.loc 1 4524 2 view .LVU198
ARM GAS  /tmp/ccQQPlfu.s 			page 94


 669 000c FFF7FEFF 		bl	decNumberRoundDigits
 670              	.LVL50:
4525:src/xeq.c     **** 	decNumberTrunc(&ri, &t);
 671              		.loc 1 4525 2 is_stmt 1 view .LVU199
 672 0010 0BA9     		add	r1, sp, #44
 673 0012 02A8     		add	r0, sp, #8
 674 0014 FFF7FEFF 		bl	decNumberTrunc
 675              	.LVL51:
4526:src/xeq.c     **** 	set_carry(dn_eq(&ri, &t) ? 0 : 1);
 676              		.loc 1 4526 2 view .LVU200
 677              		.loc 1 4526 12 is_stmt 0 view .LVU201
 678 0018 0BA9     		add	r1, sp, #44
 679 001a 02A8     		add	r0, sp, #8
 680 001c FFF7FEFF 		bl	dn_eq
 681              	.LVL52:
 682              		.loc 1 4526 2 view .LVU202
 683 0020 B0FA80F0 		clz	r0, r0
 684 0024 4009     		lsrs	r0, r0, #5
 685 0026 FFF7FEFF 		bl	set_carry
 686              	.LVL53:
4527:src/xeq.c     **** 
4528:src/xeq.c     **** 	if (decNumberIsNaN(&t)) {
 687              		.loc 1 4528 2 is_stmt 1 view .LVU203
 688              		.loc 1 4528 6 is_stmt 0 view .LVU204
 689 002a 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 690              		.loc 1 4528 5 view .LVU205
 691 002e 13F0300F 		tst	r3, #48
 692 0032 22D1     		bne	.L67
4529:src/xeq.c     **** 		report_err(ERR_DOMAIN);
4530:src/xeq.c     **** 		return 0;
4531:src/xeq.c     **** 	}
4532:src/xeq.c     **** 	if (decNumberIsSpecial(&t)) {
 693              		.loc 1 4532 2 is_stmt 1 view .LVU206
 694              		.loc 1 4532 5 is_stmt 0 view .LVU207
 695 0034 13F0700F 		tst	r3, #112
 696 0038 18D1     		bne	.L68
4533:src/xeq.c     **** 		set_overflow(1);
4534:src/xeq.c     **** 		return 0;
4535:src/xeq.c     **** 	}
4536:src/xeq.c     **** 	i = dn_to_ull(&ri, &s);
 697              		.loc 1 4536 2 is_stmt 1 view .LVU208
 698              		.loc 1 4536 6 is_stmt 0 view .LVU209
 699 003a 02A8     		add	r0, sp, #8
 700 003c 01A9     		add	r1, sp, #4
 701 003e FFF7FEFF 		bl	dn_to_ull
 702              	.LVL54:
 703 0042 0C46     		mov	r4, r1
4537:src/xeq.c     **** 	dn_abs(&t, &t);
 704              		.loc 1 4537 2 view .LVU210
 705 0044 0BA9     		add	r1, sp, #44
4536:src/xeq.c     **** 	dn_abs(&t, &t);
 706              		.loc 1 4536 6 view .LVU211
 707 0046 0546     		mov	r5, r0
 708              	.LVL55:
 709              		.loc 1 4537 2 is_stmt 1 view .LVU212
 710 0048 0846     		mov	r0, r1
 711              	.LVL56:
ARM GAS  /tmp/ccQQPlfu.s 			page 95


 712              		.loc 1 4537 2 is_stmt 0 view .LVU213
 713 004a FFF7FEFF 		bl	dn_abs
 714              	.LVL57:
4538:src/xeq.c     **** 	set_overflow(check_overflow(i) || dn_ge(&t, &const_2pow64));
 715              		.loc 1 4538 2 is_stmt 1 view .LVU214
 716              		.loc 1 4538 15 is_stmt 0 view .LVU215
 717 004e 2846     		mov	r0, r5
 718 0050 2146     		mov	r1, r4
 719 0052 FFF7FEFF 		bl	check_overflow
 720              	.LVL58:
 721              		.loc 1 4538 2 view .LVU216
 722 0056 E8B1     		cbz	r0, .L69
 723 0058 0120     		movs	r0, #1
 724              	.L63:
 725              		.loc 1 4538 2 discriminator 6 view .LVU217
 726 005a FFF7FEFF 		bl	set_overflow
 727              	.LVL59:
4539:src/xeq.c     **** 	return build_value(i, s);
 728              		.loc 1 4539 2 is_stmt 1 discriminator 6 view .LVU218
 729              		.loc 1 4539 9 is_stmt 0 discriminator 6 view .LVU219
 730 005e 019A     		ldr	r2, [sp, #4]
 731 0060 2846     		mov	r0, r5
 732 0062 2146     		mov	r1, r4
 733 0064 FFF7FEFF 		bl	build_value
 734              	.LVL60:
4540:src/xeq.c     **** }
 735              		.loc 1 4540 1 discriminator 6 view .LVU220
 736 0068 15B0     		add	sp, sp, #84
 737              		.cfi_remember_state
 738              		.cfi_def_cfa_offset 12
 739              		@ sp needed
 740 006a 30BD     		pop	{r4, r5, pc}
 741              	.LVL61:
 742              	.L68:
 743              		.cfi_restore_state
4533:src/xeq.c     **** 		return 0;
 744              		.loc 1 4533 3 is_stmt 1 view .LVU221
 745 006c 0120     		movs	r0, #1
 746 006e FFF7FEFF 		bl	set_overflow
 747              	.LVL62:
4534:src/xeq.c     **** 	}
 748              		.loc 1 4534 3 view .LVU222
4534:src/xeq.c     **** 	}
 749              		.loc 1 4534 10 is_stmt 0 view .LVU223
 750 0072 0020     		movs	r0, #0
 751 0074 0146     		mov	r1, r0
 752              		.loc 1 4540 1 view .LVU224
 753 0076 15B0     		add	sp, sp, #84
 754              		.cfi_remember_state
 755              		.cfi_def_cfa_offset 12
 756              		@ sp needed
 757 0078 30BD     		pop	{r4, r5, pc}
 758              	.L67:
 759              		.cfi_restore_state
4529:src/xeq.c     **** 		return 0;
 760              		.loc 1 4529 3 is_stmt 1 view .LVU225
 761              	.LVL63:
ARM GAS  /tmp/ccQQPlfu.s 			page 96


 762              	.LBB1345:
 763              	.LBI1345:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 764              		.loc 1 540 5 view .LVU226
 765              	.LBB1346:
 541:src/xeq.c     **** 		Error = e;
 766              		.loc 1 541 2 view .LVU227
 541:src/xeq.c     **** 		Error = e;
 767              		.loc 1 541 12 is_stmt 0 view .LVU228
 768 007a 0A4B     		ldr	r3, .L70
 541:src/xeq.c     **** 		Error = e;
 769              		.loc 1 541 5 view .LVU229
 770 007c 1A68     		ldr	r2, [r3]
 771 007e 2AB9     		cbnz	r2, .L64
 772              	.LVL64:
 773              	.LBB1347:
 774              	.LBI1347:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 775              		.loc 1 540 5 is_stmt 1 view .LVU230
 776              	.LBB1348:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 777              		.loc 1 542 3 view .LVU231
 778              	.LBE1348:
 779              	.LBE1347:
 780              	.LBE1346:
 781              	.LBE1345:
4530:src/xeq.c     **** 	}
 782              		.loc 1 4530 10 is_stmt 0 view .LVU232
 783 0080 0020     		movs	r0, #0
 784              	.LBB1355:
 785              	.LBB1353:
 786              	.LBB1351:
 787              	.LBB1349:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 788              		.loc 1 542 9 view .LVU233
 789 0082 0122     		movs	r2, #1
 790              	.LBE1349:
 791              	.LBE1351:
 792              	.LBE1353:
 793              	.LBE1355:
4530:src/xeq.c     **** 	}
 794              		.loc 1 4530 10 view .LVU234
 795 0084 0146     		mov	r1, r0
 796              	.LBB1356:
 797              	.LBB1354:
 798              	.LBB1352:
 799              	.LBB1350:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 800              		.loc 1 542 9 view .LVU235
 801 0086 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 802              		.loc 1 543 3 is_stmt 1 view .LVU236
 803              	.LBE1350:
 804              	.LBE1352:
 805              	.LBE1354:
 806              	.LBE1356:
 807              		.loc 1 4540 1 is_stmt 0 view .LVU237
ARM GAS  /tmp/ccQQPlfu.s 			page 97


 808 0088 15B0     		add	sp, sp, #84
 809              		.cfi_remember_state
 810              		.cfi_def_cfa_offset 12
 811              		@ sp needed
 812 008a 30BD     		pop	{r4, r5, pc}
 813              	.LVL65:
 814              	.L64:
 815              		.cfi_restore_state
4530:src/xeq.c     **** 	}
 816              		.loc 1 4530 10 view .LVU238
 817 008c 0020     		movs	r0, #0
 818 008e 0146     		mov	r1, r0
 819              	.LVL66:
 820              		.loc 1 4540 1 view .LVU239
 821 0090 15B0     		add	sp, sp, #84
 822              		.cfi_remember_state
 823              		.cfi_def_cfa_offset 12
 824              		@ sp needed
 825 0092 30BD     		pop	{r4, r5, pc}
 826              	.LVL67:
 827              	.L69:
 828              		.cfi_restore_state
4538:src/xeq.c     **** 	return build_value(i, s);
 829              		.loc 1 4538 36 discriminator 2 view .LVU240
 830 0094 0449     		ldr	r1, .L70+4
 831 0096 0BA8     		add	r0, sp, #44
 832 0098 FFF7FEFF 		bl	dn_lt
 833              	.LVL68:
4538:src/xeq.c     **** 	return build_value(i, s);
 834              		.loc 1 4538 2 discriminator 2 view .LVU241
 835 009c B0FA80F0 		clz	r0, r0
 836 00a0 4009     		lsrs	r0, r0, #5
 837 00a2 DAE7     		b	.L63
 838              	.L71:
 839              		.align	2
 840              	.L70:
 841 00a4 00000000 		.word	Error
 842 00a8 00000000 		.word	const_2pow64
 843              		.cfi_endproc
 844              	.LFE238:
 846              		.section	.text.check_stack_overlap,"ax",%progbits
 847              		.align	1
 848              		.p2align 2,,3
 849              		.syntax unified
 850              		.thumb
 851              		.thumb_func
 852              		.fpu fpv4-sp-d16
 854              	check_stack_overlap:
 855              	.LVL69:
 856              	.LFB147:
2131:src/xeq.c     **** 	const int n = stack_size();
 857              		.loc 1 2131 50 is_stmt 1 view -0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 0, uses_anonymous_args = 0
 861              		@ link register save eliminated.
2132:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 98


 862              		.loc 1 2132 2 view .LVU243
 863              	.LBB1383:
 864              	.LBI1383:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 865              		.loc 1 706 5 view .LVU244
 866              	.LBB1384:
 707:src/xeq.c     **** 		return 4;
 867              		.loc 1 707 2 view .LVU245
 707:src/xeq.c     **** 		return 4;
 868              		.loc 1 707 8 is_stmt 0 view .LVU246
 869 0000 194B     		ldr	r3, .L83
 870 0002 1A68     		ldr	r2, [r3]
 707:src/xeq.c     **** 		return 4;
 871              		.loc 1 707 6 view .LVU247
 872 0004 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 873              		.loc 1 707 5 view .LVU248
 874 0008 1B07     		lsls	r3, r3, #28
 875              	.LBE1384:
 876              	.LBE1383:
2131:src/xeq.c     **** 	const int n = stack_size();
 877              		.loc 1 2131 50 view .LVU249
 878 000a 30B4     		push	{r4, r5}
 879              		.cfi_def_cfa_offset 8
 880              		.cfi_offset 4, -8
 881              		.cfi_offset 5, -4
 882              	.LBB1389:
 883              	.LBB1387:
 707:src/xeq.c     **** 		return 4;
 884              		.loc 1 707 5 view .LVU250
 885 000c 25D5     		bpl	.L77
 886              	.LBB1385:
 887              	.LBI1385:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 888              		.loc 1 185 5 is_stmt 1 view .LVU251
 889              	.LBB1386:
 186:src/xeq.c     **** }
 890              		.loc 1 186 2 view .LVU252
 186:src/xeq.c     **** }
 891              		.loc 1 186 9 is_stmt 0 view .LVU253
 892 000e B2F8E037 		ldrh	r3, [r2, #2016]
 893              	.LBE1386:
 894              	.LBE1385:
 707:src/xeq.c     **** 		return 4;
 895              		.loc 1 707 27 view .LVU254
 896 0012 9B0B     		lsrs	r3, r3, #14
 897 0014 032B     		cmp	r3, #3
 898 0016 1BD0     		beq	.L82
 899              	.L79:
 900 0018 0823     		movs	r3, #8
 709:src/xeq.c     **** }
 901              		.loc 1 709 9 view .LVU255
 902 001a 1C46     		mov	r4, r3
 903              	.L73:
 904              	.LVL70:
 709:src/xeq.c     **** }
 905              		.loc 1 709 9 view .LVU256
ARM GAS  /tmp/ccQQPlfu.s 			page 99


 906              	.LBE1387:
 907              	.LBE1389:
2134:src/xeq.c     **** 		return n;
 908              		.loc 1 2134 2 is_stmt 1 view .LVU257
 909              	.LBB1390:
 910              	.LBB1391:
 911              	.LBB1392:
 912              	.LBB1393:
 913              	.LBB1394:
1113:src/xeq.c     **** }
 914              		.loc 1 1113 24 is_stmt 0 view .LVU258
 915 001c B2F8E857 		ldrh	r5, [r2, #2024]
 916              	.LBE1394:
 917              	.LBE1393:
 918              	.LBB1397:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 919              		.loc 1 243 24 view .LVU259
 920 0020 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 921              	.LBE1397:
 922              	.LBB1398:
 923              	.LBB1395:
1113:src/xeq.c     **** }
 924              		.loc 1 1113 24 view .LVU260
 925 0024 44F20101 		movw	r1, #16385
 926              	.LBE1395:
 927              	.LBE1398:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 928              		.loc 1 242 5 view .LVU261
 929 0028 2940     		ands	r1, r1, r5
 930 002a B1F5804F 		cmp	r1, #16384
 931              	.LBB1399:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 932              		.loc 1 243 13 view .LVU262
 933 002e 08BF     		it	eq
 934 0030 0C3A     		subeq	r2, r2, #12
 935              	.LBE1399:
 936              	.LBE1392:
 937              	.LBE1391:
 938              	.LBE1390:
2134:src/xeq.c     **** 		return n;
 939              		.loc 1 2134 10 view .LVU263
 940 0032 0344     		add	r3, r3, r0
 941              	.LBB1404:
 942              	.LBI1390:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 943              		.loc 1 253 14 is_stmt 1 view .LVU264
 944              	.LBE1404:
 254:src/xeq.c     **** }
 945              		.loc 1 254 2 view .LVU265
 946              	.LVL71:
 947              	.LBB1405:
 948              	.LBB1403:
 949              	.LBI1391:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 950              		.loc 1 241 14 view .LVU266
 951              	.LBB1402:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
ARM GAS  /tmp/ccQQPlfu.s 			page 100


 952              		.loc 1 242 2 view .LVU267
 953              	.LBB1400:
 954              	.LBI1393:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 955              		.loc 1 1112 5 view .LVU268
 956              	.LBB1396:
1113:src/xeq.c     **** }
 957              		.loc 1 1113 2 view .LVU269
 958              	.LBE1396:
 959              	.LBE1400:
 960              	.LBB1401:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 961              		.loc 1 243 3 view .LVU270
 244:src/xeq.c     **** 	}
 962              		.loc 1 244 3 view .LVU271
 244:src/xeq.c     **** 	}
 963              		.loc 1 244 67 is_stmt 0 view .LVU272
 964 0034 08BF     		it	eq
 965 0036 5210     		asreq	r2, r2, #1
 966              	.LVL72:
 244:src/xeq.c     **** 	}
 967              		.loc 1 244 67 view .LVU273
 968              	.LBE1401:
 969              	.LBE1402:
 970              	.LBE1403:
 971              	.LBE1405:
2134:src/xeq.c     **** 		return n;
 972              		.loc 1 2134 5 view .LVU274
 973 0038 9342     		cmp	r3, r2
 974 003a 06D9     		bls	.L72
2134:src/xeq.c     **** 		return n;
 975              		.loc 1 2134 31 discriminator 1 view .LVU275
 976 003c 6F28     		cmp	r0, #111
 977 003e 04D8     		bhi	.L72
 978              	.LBB1406:
 979              	.LBI1406:
2131:src/xeq.c     **** 	const int n = stack_size();
 980              		.loc 1 2131 12 is_stmt 1 view .LVU276
 981              	.LVL73:
 982              	.LBB1407:
2137:src/xeq.c     **** 	return 0;
 983              		.loc 1 2137 2 view .LVU277
 984              	.LBB1408:
 985              	.LBI1408:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 986              		.loc 1 540 5 view .LVU278
 987              	.LBB1409:
 541:src/xeq.c     **** 		Error = e;
 988              		.loc 1 541 2 view .LVU279
 541:src/xeq.c     **** 		Error = e;
 989              		.loc 1 541 12 is_stmt 0 view .LVU280
 990 0040 0A4B     		ldr	r3, .L83+4
 991 0042 1C68     		ldr	r4, [r3]
 992              	.LVL74:
 541:src/xeq.c     **** 		Error = e;
 993              		.loc 1 541 5 view .LVU281
 994 0044 64B9     		cbnz	r4, .L80
ARM GAS  /tmp/ccQQPlfu.s 			page 101


 995              	.LVL75:
 996              	.LBB1410:
 997              	.LBI1410:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 998              		.loc 1 540 5 is_stmt 1 view .LVU282
 999              	.LBB1411:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1000              		.loc 1 542 3 view .LVU283
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1001              		.loc 1 542 9 is_stmt 0 view .LVU284
 1002 0046 0C22     		movs	r2, #12
 1003 0048 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 1004              		.loc 1 543 3 is_stmt 1 view .LVU285
 1005              	.LVL76:
 1006              	.L72:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 1007              		.loc 1 543 3 is_stmt 0 view .LVU286
 1008              	.LBE1411:
 1009              	.LBE1410:
 1010              	.LBE1409:
 1011              	.LBE1408:
 1012              	.LBE1407:
 1013              	.LBE1406:
2139:src/xeq.c     **** 
 1014              		.loc 1 2139 1 view .LVU287
 1015 004a 2046     		mov	r0, r4
 1016              	.LVL77:
2139:src/xeq.c     **** 
 1017              		.loc 1 2139 1 view .LVU288
 1018 004c 30BC     		pop	{r4, r5}
 1019              		.cfi_remember_state
 1020              		.cfi_restore 5
 1021              		.cfi_restore 4
 1022              		.cfi_def_cfa_offset 0
 1023 004e 7047     		bx	lr
 1024              	.LVL78:
 1025              	.L82:
 1026              		.cfi_restore_state
 1027              	.LBB1415:
 1028              	.LBB1388:
 707:src/xeq.c     **** 		return 4;
 1029              		.loc 1 707 44 view .LVU289
 1030 0050 074B     		ldr	r3, .L83+8
 707:src/xeq.c     **** 		return 4;
 1031              		.loc 1 707 41 view .LVU290
 1032 0052 93F90130 		ldrsb	r3, [r3, #1]
 1033 0056 002B     		cmp	r3, #0
 1034 0058 DEDB     		blt	.L79
 1035              	.L77:
 1036 005a 0423     		movs	r3, #4
 708:src/xeq.c     **** 	return 8;
 1037              		.loc 1 708 10 view .LVU291
 1038 005c 1C46     		mov	r4, r3
 1039 005e DDE7     		b	.L73
 1040              	.LVL79:
 1041              	.L80:
ARM GAS  /tmp/ccQQPlfu.s 			page 102


 708:src/xeq.c     **** 	return 8;
 1042              		.loc 1 708 10 view .LVU292
 1043              	.LBE1388:
 1044              	.LBE1415:
 1045              	.LBB1416:
 1046              	.LBB1414:
 1047              	.LBB1413:
 1048              	.LBB1412:
 1049 0060 0024     		movs	r4, #0
 1050              	.LVL80:
 708:src/xeq.c     **** 	return 8;
 1051              		.loc 1 708 10 view .LVU293
 1052              	.LBE1412:
 1053              	.LBE1413:
 1054              	.LBE1414:
 1055              	.LBE1416:
2139:src/xeq.c     **** 
 1056              		.loc 1 2139 1 view .LVU294
 1057 0062 2046     		mov	r0, r4
 1058              	.LVL81:
2139:src/xeq.c     **** 
 1059              		.loc 1 2139 1 view .LVU295
 1060 0064 30BC     		pop	{r4, r5}
 1061              		.cfi_restore 5
 1062              		.cfi_restore 4
 1063              		.cfi_def_cfa_offset 0
 1064 0066 7047     		bx	lr
 1065              	.L84:
 1066              		.align	2
 1067              	.L83:
 1068 0068 00000000 		.word	main_ram
 1069 006c 00000000 		.word	Error
 1070 0070 00000000 		.word	XromParams
 1071              		.cfi_endproc
 1072              	.LFE147:
 1074              		.section	.text.is_xrom,"ax",%progbits
 1075              		.align	1
 1076              		.p2align 2,,3
 1077              		.global	is_xrom
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1081              		.fpu fpv4-sp-d16
 1083              	is_xrom:
 1084              	.LFB3:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 1085              		.loc 1 185 19 is_stmt 1 view -0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 0
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 1089              		@ link register save eliminated.
 186:src/xeq.c     **** }
 1090              		.loc 1 186 2 view .LVU297
 186:src/xeq.c     **** }
 1091              		.loc 1 186 9 is_stmt 0 view .LVU298
 1092 0000 054B     		ldr	r3, .L86
 1093 0002 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQQPlfu.s 			page 103


 1094 0004 B3F8E007 		ldrh	r0, [r3, #2016]
 1095 0008 800B     		lsrs	r0, r0, #14
 187:src/xeq.c     **** 
 1096              		.loc 1 187 1 view .LVU299
 1097 000a A0F10300 		sub	r0, #3
 1098 000e B0FA80F0 		clz	r0, r0
 1099 0012 4009     		lsrs	r0, r0, #5
 1100 0014 7047     		bx	lr
 1101              	.L87:
 1102 0016 00BF     		.align	2
 1103              	.L86:
 1104 0018 00000000 		.word	main_ram
 1105              		.cfi_endproc
 1106              	.LFE3:
 1108              		.section	.text.move_retstk,"ax",%progbits
 1109              		.align	1
 1110              		.p2align 2,,3
 1111              		.global	move_retstk
 1112              		.syntax unified
 1113              		.thumb
 1114              		.thumb_func
 1115              		.fpu fpv4-sp-d16
 1117              	move_retstk:
 1118              	.LVL82:
 1119              	.LFB4:
 196:src/xeq.c     **** #ifndef REALBUILD
 1120              		.loc 1 196 1 is_stmt 1 view -0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1124              		.loc 1 199 2 view .LVU301
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1125              		.loc 1 199 6 is_stmt 0 view .LVU302
 1126 0000 1A4B     		ldr	r3, .L99
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1127              		.loc 1 199 5 view .LVU303
 1128 0002 93F90130 		ldrsb	r3, [r3, #1]
 1129 0006 002B     		cmp	r3, #0
 1130 0008 25DB     		blt	.L97
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1131              		.loc 1 204 2 is_stmt 1 view .LVU304
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1132              		.loc 1 204 19 is_stmt 0 view .LVU305
 1133 000a 194B     		ldr	r3, .L99+4
 196:src/xeq.c     **** #ifndef REALBUILD
 1134              		.loc 1 196 1 view .LVU306
 1135 000c 70B5     		push	{r4, r5, r6, lr}
 1136              		.cfi_def_cfa_offset 16
 1137              		.cfi_offset 4, -16
 1138              		.cfi_offset 5, -12
 1139              		.cfi_offset 6, -8
 1140              		.cfi_offset 14, -4
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1141              		.loc 1 204 19 view .LVU307
 1142 000e 1A68     		ldr	r2, [r3]
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
ARM GAS  /tmp/ccQQPlfu.s 			page 104


 1143              		.loc 1 204 17 view .LVU308
 1144 0010 184D     		ldr	r5, .L99+8
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1145              		.loc 1 204 19 view .LVU309
 1146 0012 B2F9E217 		ldrsh	r1, [r2, #2018]
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1147              		.loc 1 204 17 view .LVU310
 1148 0016 2B68     		ldr	r3, [r5]
 1149 0018 0B44     		add	r3, r3, r1
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1150              		.loc 1 204 5 view .LVU311
 1151 001a C342     		cmn	r3, r0
 1152 001c 0446     		mov	r4, r0
 1153 001e 13D4     		bmi	.L98
 208:src/xeq.c     **** 	RetStk += distance;
 1154              		.loc 1 208 2 is_stmt 1 view .LVU312
 1155 0020 154E     		ldr	r6, .L99+12
 1156 0022 3368     		ldr	r3, [r6]
 208:src/xeq.c     **** 	RetStk += distance;
 1157              		.loc 1 208 27 is_stmt 0 view .LVU313
 1158 0024 0818     		adds	r0, r1, r0
 1159              	.LVL83:
 208:src/xeq.c     **** 	RetStk += distance;
 1160              		.loc 1 208 60 view .LVU314
 1161 0026 4A42     		rsbs	r2, r1, #0
 208:src/xeq.c     **** 	RetStk += distance;
 1162              		.loc 1 208 2 view .LVU315
 1163 0028 03EB4000 		add	r0, r3, r0, lsl #1
 1164 002c 03EB4101 		add	r1, r3, r1, lsl #1
 1165 0030 5200     		lsls	r2, r2, #1
 1166 0032 FFF7FEFF 		bl	xcopy
 1167              	.LVL84:
 209:src/xeq.c     **** 	RetStkSize += distance;
 1168              		.loc 1 209 2 is_stmt 1 view .LVU316
 209:src/xeq.c     **** 	RetStkSize += distance;
 1169              		.loc 1 209 9 is_stmt 0 view .LVU317
 1170 0036 3368     		ldr	r3, [r6]
 210:src/xeq.c     **** 	return 0;
 1171              		.loc 1 210 13 view .LVU318
 1172 0038 2868     		ldr	r0, [r5]
 209:src/xeq.c     **** 	RetStkSize += distance;
 1173              		.loc 1 209 9 view .LVU319
 1174 003a 03EB4403 		add	r3, r3, r4, lsl #1
 210:src/xeq.c     **** 	return 0;
 1175              		.loc 1 210 13 view .LVU320
 1176 003e 2044     		add	r0, r0, r4
 1177 0040 2860     		str	r0, [r5]
 209:src/xeq.c     **** 	RetStkSize += distance;
 1178              		.loc 1 209 9 view .LVU321
 1179 0042 3360     		str	r3, [r6]
 210:src/xeq.c     **** 	return 0;
 1180              		.loc 1 210 2 is_stmt 1 view .LVU322
 211:src/xeq.c     **** }
 1181              		.loc 1 211 2 view .LVU323
 211:src/xeq.c     **** }
 1182              		.loc 1 211 9 is_stmt 0 view .LVU324
 1183 0044 0020     		movs	r0, #0
ARM GAS  /tmp/ccQQPlfu.s 			page 105


 212:src/xeq.c     **** 
 1184              		.loc 1 212 1 view .LVU325
 1185 0046 70BD     		pop	{r4, r5, r6, pc}
 1186              	.LVL85:
 1187              	.L98:
 205:src/xeq.c     **** 		return 1;
 1188              		.loc 1 205 3 is_stmt 1 view .LVU326
 1189              	.LBB1429:
 1190              	.LBI1429:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1191              		.loc 1 540 5 view .LVU327
 1192              	.LBB1430:
 541:src/xeq.c     **** 		Error = e;
 1193              		.loc 1 541 2 view .LVU328
 541:src/xeq.c     **** 		Error = e;
 1194              		.loc 1 541 12 is_stmt 0 view .LVU329
 1195 0048 0C4B     		ldr	r3, .L99+16
 541:src/xeq.c     **** 		Error = e;
 1196              		.loc 1 541 5 view .LVU330
 1197 004a 1A68     		ldr	r2, [r3]
 1198 004c 52B9     		cbnz	r2, .L93
 1199              	.LVL86:
 1200              	.LBB1431:
 1201              	.LBI1431:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1202              		.loc 1 540 5 is_stmt 1 view .LVU331
 1203              	.LBB1432:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1204              		.loc 1 542 3 view .LVU332
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1205              		.loc 1 542 9 is_stmt 0 view .LVU333
 1206 004e 0B22     		movs	r2, #11
 1207 0050 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 1208              		.loc 1 543 3 is_stmt 1 view .LVU334
 1209              	.LBE1432:
 1210              	.LBE1431:
 1211              	.LBE1430:
 1212              	.LBE1429:
 206:src/xeq.c     **** 	}
 1213              		.loc 1 206 10 is_stmt 0 view .LVU335
 1214 0052 0120     		movs	r0, #1
 1215              	.LVL87:
 212:src/xeq.c     **** 
 1216              		.loc 1 212 1 view .LVU336
 1217 0054 70BD     		pop	{r4, r5, r6, pc}
 1218              	.LVL88:
 1219              	.L97:
 1220              		.cfi_def_cfa_offset 0
 1221              		.cfi_restore 4
 1222              		.cfi_restore 5
 1223              		.cfi_restore 6
 1224              		.cfi_restore 14
 1225              	.LBB1434:
 1226              	.LBI1434:
 195:src/xeq.c     **** {
 1227              		.loc 1 195 5 is_stmt 1 view .LVU337
ARM GAS  /tmp/ccQQPlfu.s 			page 106


 195:src/xeq.c     **** {
 1228              		.loc 1 195 5 is_stmt 0 view .LVU338
 1229              	.LBE1434:
 200:src/xeq.c     **** 		return 1;
 1230              		.loc 1 200 3 is_stmt 1 view .LVU339
 1231              	.LBB1441:
 1232              	.LBB1435:
 1233              	.LBI1435:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1234              		.loc 1 540 5 view .LVU340
 1235              	.LBB1436:
 541:src/xeq.c     **** 		Error = e;
 1236              		.loc 1 541 2 view .LVU341
 541:src/xeq.c     **** 		Error = e;
 1237              		.loc 1 541 12 is_stmt 0 view .LVU342
 1238 0056 094B     		ldr	r3, .L99+16
 541:src/xeq.c     **** 		Error = e;
 1239              		.loc 1 541 5 view .LVU343
 1240 0058 1A68     		ldr	r2, [r3]
 1241 005a 2AB9     		cbnz	r2, .L92
 1242              	.LVL89:
 1243              	.LBB1437:
 1244              	.LBI1437:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1245              		.loc 1 540 5 is_stmt 1 view .LVU344
 1246              	.LBB1438:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1247              		.loc 1 542 3 view .LVU345
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1248              		.loc 1 542 9 is_stmt 0 view .LVU346
 1249 005c 0722     		movs	r2, #7
 1250 005e 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 1251              		.loc 1 543 3 is_stmt 1 view .LVU347
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1252              		.loc 1 542 9 is_stmt 0 view .LVU348
 1253 0060 0120     		movs	r0, #1
 1254              	.LVL90:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1255              		.loc 1 542 9 view .LVU349
 1256 0062 7047     		bx	lr
 1257              	.LVL91:
 1258              	.L93:
 1259              		.cfi_def_cfa_offset 16
 1260              		.cfi_offset 4, -16
 1261              		.cfi_offset 5, -12
 1262              		.cfi_offset 6, -8
 1263              		.cfi_offset 14, -4
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1264              		.loc 1 542 9 view .LVU350
 1265              	.LBE1438:
 1266              	.LBE1437:
 1267              	.LBE1436:
 1268              	.LBE1435:
 1269              	.LBE1441:
 1270              	.LBB1442:
 1271              	.LBB1433:
ARM GAS  /tmp/ccQQPlfu.s 			page 107


 1272 0064 0120     		movs	r0, #1
 1273              	.LVL92:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1274              		.loc 1 542 9 view .LVU351
 1275              	.LBE1433:
 1276              	.LBE1442:
 212:src/xeq.c     **** 
 1277              		.loc 1 212 1 view .LVU352
 1278 0066 70BD     		pop	{r4, r5, r6, pc}
 1279              	.LVL93:
 1280              	.L92:
 1281              		.cfi_def_cfa_offset 0
 1282              		.cfi_restore 4
 1283              		.cfi_restore 5
 1284              		.cfi_restore 6
 1285              		.cfi_restore 14
 1286              	.LBB1443:
 1287              	.LBB1440:
 1288              	.LBB1439:
 212:src/xeq.c     **** 
 1289              		.loc 1 212 1 view .LVU353
 1290 0068 0120     		movs	r0, #1
 1291              	.LVL94:
 212:src/xeq.c     **** 
 1292              		.loc 1 212 1 view .LVU354
 1293              	.LBE1439:
 1294              	.LBE1440:
 1295              	.LBE1443:
 1296 006a 7047     		bx	lr
 1297              	.L100:
 1298              		.align	2
 1299              	.L99:
 1300 006c 00000000 		.word	XromParams
 1301 0070 00000000 		.word	main_ram
 1302 0074 00000000 		.word	RetStkSize
 1303 0078 00000000 		.word	RetStk
 1304 007c 00000000 		.word	Error
 1305              		.cfi_endproc
 1306              	.LFE4:
 1308              		.section	.text.local_levels,"ax",%progbits
 1309              		.align	1
 1310              		.p2align 2,,3
 1311              		.global	local_levels
 1312              		.syntax unified
 1313              		.thumb
 1314              		.thumb_func
 1315              		.fpu fpv4-sp-d16
 1317              	local_levels:
 1318              	.LFB5:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1319              		.loc 1 217 24 is_stmt 1 view -0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 0
 1322              		@ frame_needed = 0, uses_anonymous_args = 0
 1323              		@ link register save eliminated.
 218:src/xeq.c     **** }
 1324              		.loc 1 218 2 view .LVU356
ARM GAS  /tmp/ccQQPlfu.s 			page 108


 218:src/xeq.c     **** }
 1325              		.loc 1 218 9 is_stmt 0 view .LVU357
 1326 0000 074B     		ldr	r3, .L105
 1327 0002 1B68     		ldr	r3, [r3]
 1328 0004 B3F9DE37 		ldrsh	r3, [r3, #2014]
 218:src/xeq.c     **** }
 1329              		.loc 1 218 57 view .LVU358
 1330 0008 002B     		cmp	r3, #0
 1331 000a 01DB     		blt	.L104
 1332 000c 0020     		movs	r0, #0
 219:src/xeq.c     **** 
 1333              		.loc 1 219 1 view .LVU359
 1334 000e 7047     		bx	lr
 1335              	.L104:
 218:src/xeq.c     **** }
 1336              		.loc 1 218 25 discriminator 1 view .LVU360
 1337 0010 044A     		ldr	r2, .L105+4
 1338 0012 1268     		ldr	r2, [r2]
 218:src/xeq.c     **** }
 1339              		.loc 1 218 57 discriminator 1 view .LVU361
 1340 0014 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 1341 0018 C0F30B00 		ubfx	r0, r0, #0, #12
 1342 001c 7047     		bx	lr
 1343              	.L106:
 1344 001e 00BF     		.align	2
 1345              	.L105:
 1346 0020 00000000 		.word	main_ram
 1347 0024 00000000 		.word	RetStk
 1348              		.cfi_endproc
 1349              	.LFE5:
 1351              		.section	.text.local_regs_rarg,"ax",%progbits
 1352              		.align	1
 1353              		.p2align 2,,3
 1354              		.global	local_regs_rarg
 1355              		.syntax unified
 1356              		.thumb
 1357              		.thumb_func
 1358              		.fpu fpv4-sp-d16
 1360              	local_regs_rarg:
 1361              	.LVL95:
 1362              	.LFB6:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1363              		.loc 1 225 35 is_stmt 1 view -0
 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
 1367              		@ link register save eliminated.
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1368              		.loc 1 226 2 view .LVU363
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1369              		.loc 1 226 53 is_stmt 0 view .LVU364
 1370 0000 A0F17E03 		sub	r3, r0, #126
 1371 0004 012B     		cmp	r3, #1
 1372 0006 144B     		ldr	r3, .L116
 1373 0008 23D9     		bls	.L113
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1374              		.loc 1 226 53 discriminator 1 view .LVU365
ARM GAS  /tmp/ccQQPlfu.s 			page 109


 1375 000a 8028     		cmp	r0, #128
 1376 000c 11D0     		beq	.L114
 1377              	.LBB1444:
 1378              	.LBI1444:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1379              		.loc 1 1112 5 is_stmt 1 view .LVU366
 1380              	.LBB1445:
1113:src/xeq.c     **** }
 1381              		.loc 1 1113 2 view .LVU367
1113:src/xeq.c     **** }
 1382              		.loc 1 1113 12 is_stmt 0 view .LVU368
 1383 000e 1B68     		ldr	r3, [r3]
1113:src/xeq.c     **** }
 1384              		.loc 1 1113 24 view .LVU369
 1385 0010 B3F8E827 		ldrh	r2, [r3, #2024]
 1386 0014 44F20100 		movw	r0, #16385
 1387              	.LVL96:
1113:src/xeq.c     **** }
 1388              		.loc 1 1113 24 view .LVU370
 1389              	.LBE1445:
 1390              	.LBE1444:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1391              		.loc 1 226 73 view .LVU371
 1392 0018 1040     		ands	r0, r0, r2
 1393 001a A0F58040 		sub	r0, r0, #16384
 1394 001e B0FA80F0 		clz	r0, r0
 1395 0022 4009     		lsrs	r0, r0, #5
 1396 0024 0230     		adds	r0, r0, #2
 1397              	.L109:
 227:src/xeq.c     **** }
 1398              		.loc 1 227 2 is_stmt 1 discriminator 8 view .LVU372
 1399              	.LBB1446:
 1400              	.LBI1446:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1401              		.loc 1 217 5 discriminator 8 view .LVU373
 1402              	.LBB1447:
 218:src/xeq.c     **** }
 1403              		.loc 1 218 2 discriminator 8 view .LVU374
 218:src/xeq.c     **** }
 1404              		.loc 1 218 9 is_stmt 0 discriminator 8 view .LVU375
 1405 0026 B3F9DE37 		ldrsh	r3, [r3, #2014]
 218:src/xeq.c     **** }
 1406              		.loc 1 218 57 discriminator 8 view .LVU376
 1407 002a 002B     		cmp	r3, #0
 1408 002c 08DB     		blt	.L115
 1409              	.L112:
 1410 002e 0020     		movs	r0, #0
 1411              	.LBE1447:
 1412              	.LBE1446:
 228:src/xeq.c     **** 
 1413              		.loc 1 228 1 view .LVU377
 1414 0030 7047     		bx	lr
 1415              	.LVL97:
 1416              	.L114:
 228:src/xeq.c     **** 
 1417              		.loc 1 228 1 view .LVU378
 1418 0032 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQQPlfu.s 			page 110


 227:src/xeq.c     **** }
 1419              		.loc 1 227 2 is_stmt 1 view .LVU379
 1420              	.LBB1450:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1421              		.loc 1 217 5 view .LVU380
 1422              	.LBB1448:
 218:src/xeq.c     **** }
 1423              		.loc 1 218 2 view .LVU381
 218:src/xeq.c     **** }
 1424              		.loc 1 218 9 is_stmt 0 view .LVU382
 1425 0034 B3F9DE37 		ldrsh	r3, [r3, #2014]
 218:src/xeq.c     **** }
 1426              		.loc 1 218 57 view .LVU383
 1427 0038 002B     		cmp	r3, #0
 1428              	.LBE1448:
 1429              	.LBE1450:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1430              		.loc 1 226 53 view .LVU384
 1431 003a 4FF00300 		mov	r0, #3
 1432              	.LVL98:
 1433              	.LBB1451:
 1434              	.LBB1449:
 218:src/xeq.c     **** }
 1435              		.loc 1 218 57 view .LVU385
 1436 003e F6DA     		bge	.L112
 1437              	.L115:
 218:src/xeq.c     **** }
 1438              		.loc 1 218 25 view .LVU386
 1439 0040 064A     		ldr	r2, .L116+4
 1440 0042 1268     		ldr	r2, [r2]
 218:src/xeq.c     **** }
 1441              		.loc 1 218 57 view .LVU387
 1442 0044 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1443 0048 C3F30B03 		ubfx	r3, r3, #0, #12
 1444 004c 43FA00F0 		asr	r0, r3, r0
 1445 0050 7047     		bx	lr
 1446              	.LVL99:
 1447              	.L113:
 218:src/xeq.c     **** }
 1448              		.loc 1 218 57 view .LVU388
 1449 0052 1B68     		ldr	r3, [r3]
 1450              	.LBE1449:
 1451              	.LBE1451:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1452              		.loc 1 226 53 view .LVU389
 1453 0054 0220     		movs	r0, #2
 1454              	.LVL100:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1455              		.loc 1 226 53 view .LVU390
 1456 0056 E6E7     		b	.L109
 1457              	.L117:
 1458              		.align	2
 1459              	.L116:
 1460 0058 00000000 		.word	main_ram
 1461 005c 00000000 		.word	RetStk
 1462              		.cfi_endproc
 1463              	.LFE6:
ARM GAS  /tmp/ccQQPlfu.s 			page 111


 1465              		.section	.text.get_reg_limit,"ax",%progbits
 1466              		.align	1
 1467              		.p2align 2,,3
 1468              		.syntax unified
 1469              		.thumb
 1470              		.thumb_func
 1471              		.fpu fpv4-sp-d16
 1473              	get_reg_limit:
 1474              	.LVL101:
 1475              	.LFB247:
4541:src/xeq.c     **** 
4542:src/xeq.c     **** 
4543:src/xeq.c     **** #ifndef UNIVERSAL_DISPATCH
4544:src/xeq.c     **** 
4545:src/xeq.c     **** 
4546:src/xeq.c     **** /*
4547:src/xeq.c     ****  *  Call a monadic function by reusing the decimal code for integer mode
4548:src/xeq.c     ****  */
4549:src/xeq.c     **** long long int intMonadic(long long int x) {
4550:src/xeq.c     **** 	int s;
4551:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
4552:src/xeq.c     **** 	decNumber rx, r;
4553:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4554:src/xeq.c     **** 
4555:src/xeq.c     **** 	if (isNULL(monfuncs[f].mondreal))
4556:src/xeq.c     **** 		bad_mode_error();
4557:src/xeq.c     **** 	else {
4558:src/xeq.c     **** 		FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4559:src/xeq.c     **** #ifndef REALBUILD
4560:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4561:src/xeq.c     **** 			bad_mode_error();
4562:src/xeq.c     **** 		else 
4563:src/xeq.c     **** #endif
4564:src/xeq.c     **** 		{
4565:src/xeq.c     **** 			ullint_to_dn(&rx, vx);
4566:src/xeq.c     **** 			if (s)
4567:src/xeq.c     **** 				dn_minus(&rx, &rx);
4568:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
4569:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4570:src/xeq.c     **** 			else
4571:src/xeq.c     **** 				return intResult(&r);
4572:src/xeq.c     **** 		}
4573:src/xeq.c     **** 	}
4574:src/xeq.c     **** 	return 0;
4575:src/xeq.c     **** }
4576:src/xeq.c     **** 
4577:src/xeq.c     **** /*
4578:src/xeq.c     ****  *  Call a dyadic function by reusing the decimal code for integer mode
4579:src/xeq.c     ****  */
4580:src/xeq.c     **** long long int intDyadic(long long int y, long long int x) {
4581:src/xeq.c     **** 	int sx, sy;
4582:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4583:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
4584:src/xeq.c     **** 	decNumber rx, ry, r;
4585:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4586:src/xeq.c     **** 
4587:src/xeq.c     **** 	if (isNULL(dyfuncs[f].dydreal))
ARM GAS  /tmp/ccQQPlfu.s 			page 112


4588:src/xeq.c     **** 		bad_mode_error();
4589:src/xeq.c     **** 	else {
4590:src/xeq.c     **** 		FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4591:src/xeq.c     **** 
4592:src/xeq.c     **** #ifndef REALBUILD
4593:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4594:src/xeq.c     **** 			bad_mode_error();
4595:src/xeq.c     **** 		else 
4596:src/xeq.c     **** #endif
4597:src/xeq.c     **** 		{
4598:src/xeq.c     **** 			ullint_to_dn(&rx, vx);	if (sx) dn_minus(&rx, &rx);
4599:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
4600:src/xeq.c     **** 
4601:src/xeq.c     **** 			if (NULL == fp(&r, &ry, &rx))
4602:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4603:src/xeq.c     **** 			else
4604:src/xeq.c     **** 				return intResult(&r);
4605:src/xeq.c     **** 		}
4606:src/xeq.c     **** 	}
4607:src/xeq.c     **** 	return 0;
4608:src/xeq.c     **** }
4609:src/xeq.c     **** 
4610:src/xeq.c     **** 
4611:src/xeq.c     **** /* Dispatch routine for niladic functions.
4612:src/xeq.c     ****  */
4613:src/xeq.c     **** static void niladic(const opcode op) {
4614:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
4615:src/xeq.c     **** 
4616:src/xeq.c     **** 	process_cmdline();
4617:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
4618:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
4619:src/xeq.c     **** 			bad_mode_error();
4620:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
4621:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
4622:src/xeq.c     **** 			if (dispatch_xrom(fp))
4623:src/xeq.c     **** 				return;
4624:src/xeq.c     **** 			else {
4625:src/xeq.c     **** 				switch (NILADIC_NUMRESULTS(niladics[idx])) {
4626:src/xeq.c     **** 				case 2:	lift_if_enabled();
4627:src/xeq.c     **** 				case 1:	lift_if_enabled();
4628:src/xeq.c     **** 				default:
4629:src/xeq.c     **** 					fp((enum nilop)idx);
4630:src/xeq.c     **** 					break;
4631:src/xeq.c     **** 				}
4632:src/xeq.c     **** 			}
4633:src/xeq.c     **** 		}
4634:src/xeq.c     **** 	} else
4635:src/xeq.c     **** 		illegal(op);
4636:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
4637:src/xeq.c     **** 	if (ENTRY_RPN_ENABLED && (idx != OP_rCLX)) {
4638:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
4639:src/xeq.c     **** 	}
4640:src/xeq.c     **** 	else if ( (idx != OP_rCLX) && ( ((idx != OP_CENTER) ) && (C_LOCKED) ) ) {
4641:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
4642:src/xeq.c     **** 	}
4643:src/xeq.c     **** #else
4644:src/xeq.c     **** 	if (idx != OP_rCLX) set_lift();// normally, just don't turn on lift after CLX
ARM GAS  /tmp/ccQQPlfu.s 			page 113


4645:src/xeq.c     **** #endif
4646:src/xeq.c     **** }
4647:src/xeq.c     **** 
4648:src/xeq.c     **** 
4649:src/xeq.c     **** /* Dispatch routine for monadic operations.
4650:src/xeq.c     ****  * Since these functions take an argument from the X register, save it in
4651:src/xeq.c     ****  * lastx and then replace it with their result, we can factor out the common
4652:src/xeq.c     ****  * stack manipulatin code.
4653:src/xeq.c     ****  */
4654:src/xeq.c     **** static void monadic(const opcode op)
4655:src/xeq.c     **** {
4656:src/xeq.c     **** 	unsigned int f;
4657:src/xeq.c     **** 	process_cmdline_set_lift();
4658:src/xeq.c     **** 
4659:src/xeq.c     **** 	f = argKIND(op);
4660:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4661:src/xeq.c     **** 		if (is_intmode()) {
4662:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
4663:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
4664:src/xeq.c     **** 				if (dispatch_xrom(fp))
4665:src/xeq.c     **** 					return;
4666:src/xeq.c     **** 				else {
4667:src/xeq.c     **** 					long long int x = getX_int();
4668:src/xeq.c     **** 					x = fp(x);
4669:src/xeq.c     **** 					setlastX();
4670:src/xeq.c     **** 					setX_int(x);
4671:src/xeq.c     **** 				}
4672:src/xeq.c     **** 			} else
4673:src/xeq.c     **** 				bad_mode_error();
4674:src/xeq.c     **** 		} else {
4675:src/xeq.c     **** 			if (! isNULL(monfuncs[f].mondreal)) {
4676:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4677:src/xeq.c     **** 				if (dispatch_xrom(fp))
4678:src/xeq.c     **** 					return;
4679:src/xeq.c     **** 				else {
4680:src/xeq.c     **** 					decNumber x, r;
4681:src/xeq.c     **** 					getX(&x);
4682:src/xeq.c     **** 					if (NULL == fp(&r, &x))
4683:src/xeq.c     **** 						set_NaN(&r);
4684:src/xeq.c     **** 					setlastX();
4685:src/xeq.c     **** 					setX(&r);
4686:src/xeq.c     **** 				}
4687:src/xeq.c     **** 			} else
4688:src/xeq.c     **** 				bad_mode_error();
4689:src/xeq.c     **** 		}
4690:src/xeq.c     **** 	} else
4691:src/xeq.c     **** 		illegal(op);
4692:src/xeq.c     **** }
4693:src/xeq.c     **** 
4694:src/xeq.c     **** static void monadic_cmplex(const opcode op) {
4695:src/xeq.c     **** 	decNumber x, y, rx, ry;
4696:src/xeq.c     **** 	unsigned int f;
4697:src/xeq.c     **** 
4698:src/xeq.c     **** 	process_cmdline_set_lift();
4699:src/xeq.c     **** 
4700:src/xeq.c     **** 	f = argKIND(op);
4701:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 114


4702:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4703:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
4704:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
4705:src/xeq.c     **** 			if (dispatch_xrom(fp))
4706:src/xeq.c     **** 				return;
4707:src/xeq.c     **** 			else {
4708:src/xeq.c     **** 				getXY(&x, &y);
4709:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
4710:src/xeq.c     **** 				setlastXY();
4711:src/xeq.c     **** 				setXY(&rx, &ry);
4712:src/xeq.c     **** 				set_was_complex();
4713:src/xeq.c     **** 			}
4714:src/xeq.c     **** 		} else
4715:src/xeq.c     **** 			bad_mode_error();
4716:src/xeq.c     **** 	} else
4717:src/xeq.c     **** 		illegal(op);
4718:src/xeq.c     **** }
4719:src/xeq.c     **** 
4720:src/xeq.c     **** /***************************************************************************
4721:src/xeq.c     ****  * Dyadic function handling.
4722:src/xeq.c     ****  */
4723:src/xeq.c     **** 
4724:src/xeq.c     **** /* Dispatch routine for dyadic operations.
4725:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4726:src/xeq.c     ****  * common stack manipulation.
4727:src/xeq.c     ****  */
4728:src/xeq.c     **** static void dyadic(const opcode op) {
4729:src/xeq.c     **** 
4730:src/xeq.c     **** 	unsigned int f;
4731:src/xeq.c     **** 	process_cmdline_set_lift();
4732:src/xeq.c     **** 
4733:src/xeq.c     **** 	f = argKIND(op);
4734:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4735:src/xeq.c     **** 		if (is_intmode()) {
4736:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
4737:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
4738:src/xeq.c     **** 				if (dispatch_xrom(fp))
4739:src/xeq.c     **** 					return;
4740:src/xeq.c     **** 				else {
4741:src/xeq.c     **** 					long long int x = getX_int();
4742:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4743:src/xeq.c     **** 					x = fp(y, x);
4744:src/xeq.c     **** 					setlastX();
4745:src/xeq.c     **** 					lower();
4746:src/xeq.c     **** 					setX_int(x);
4747:src/xeq.c     **** 				}
4748:src/xeq.c     **** 			} else
4749:src/xeq.c     **** 				bad_mode_error();
4750:src/xeq.c     **** 		} else {
4751:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydreal)) {
4752:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4753:src/xeq.c     **** 				if (dispatch_xrom(fp))
4754:src/xeq.c     **** 					return;
4755:src/xeq.c     **** 				else {
4756:src/xeq.c     **** 					decNumber x, y, r;
4757:src/xeq.c     **** 					getXY(&x, &y);
4758:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
ARM GAS  /tmp/ccQQPlfu.s 			page 115


4759:src/xeq.c     **** 						set_NaN(&r);
4760:src/xeq.c     **** 					setlastX();
4761:src/xeq.c     **** 					lower();
4762:src/xeq.c     **** 					setX(&r);
4763:src/xeq.c     **** 				}
4764:src/xeq.c     **** 			} else
4765:src/xeq.c     **** 				bad_mode_error();
4766:src/xeq.c     **** 		}
4767:src/xeq.c     **** 	} else
4768:src/xeq.c     **** 		illegal(op);
4769:src/xeq.c     **** }
4770:src/xeq.c     **** 
4771:src/xeq.c     **** static void dyadic_cmplex(const opcode op) {
4772:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
4773:src/xeq.c     **** 	unsigned int f;
4774:src/xeq.c     **** 
4775:src/xeq.c     **** 	process_cmdline_set_lift();
4776:src/xeq.c     **** 
4777:src/xeq.c     **** 	f = argKIND(op);
4778:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4779:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
4780:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
4781:src/xeq.c     **** 			if (dispatch_xrom(fp))
4782:src/xeq.c     **** 				return;
4783:src/xeq.c     **** 			else {
4784:src/xeq.c     **** 				getXYZT(&x1, &y1, &x2, &y2);
4785:src/xeq.c     **** 
4786:src/xeq.c     **** 				fp(&xr, &yr, &x2, &y2, &x1, &y1);
4787:src/xeq.c     **** 
4788:src/xeq.c     **** 				setlastXY();
4789:src/xeq.c     **** 				lower2();
4790:src/xeq.c     **** 				setXY(&xr, &yr);
4791:src/xeq.c     **** 				set_was_complex();
4792:src/xeq.c     **** 			}
4793:src/xeq.c     **** 		} else
4794:src/xeq.c     **** 			bad_mode_error();
4795:src/xeq.c     **** 	} else
4796:src/xeq.c     **** 		illegal(op);
4797:src/xeq.c     **** }
4798:src/xeq.c     **** 
4799:src/xeq.c     **** /* Dispatch routine for triadic operations.
4800:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4801:src/xeq.c     ****  * common stack manipulation.
4802:src/xeq.c     ****  */
4803:src/xeq.c     **** static void triadic(const opcode op) {
4804:src/xeq.c     **** 	unsigned int f;
4805:src/xeq.c     **** 	process_cmdline_set_lift();
4806:src/xeq.c     **** 
4807:src/xeq.c     **** 	f = argKIND(op);
4808:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
4809:src/xeq.c     **** 		if (is_intmode()) {
4810:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
4811:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
4812:src/xeq.c     **** 				if (dispatch_xrom(fp))
4813:src/xeq.c     **** 					return;
4814:src/xeq.c     **** 				else {
4815:src/xeq.c     **** 					long long int x = getX_int();
ARM GAS  /tmp/ccQQPlfu.s 			page 116


4816:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4817:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
4818:src/xeq.c     **** 					x = fp(z, y, x);
4819:src/xeq.c     **** 					setlastX();
4820:src/xeq.c     **** 					lower();
4821:src/xeq.c     **** 					lower();
4822:src/xeq.c     **** 					setX_int(x);
4823:src/xeq.c     **** 				}
4824:src/xeq.c     **** 			} else
4825:src/xeq.c     **** 				bad_mode_error();
4826:src/xeq.c     **** 		} else {
4827:src/xeq.c     **** 			if (! isNULL(trifuncs[f].trireal)) {
4828:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
4829:src/xeq.c     **** 				if (dispatch_xrom(fp))
4830:src/xeq.c     **** 					return;
4831:src/xeq.c     **** 				else {
4832:src/xeq.c     **** 					decNumber x, y, z, r;
4833:src/xeq.c     **** 					getXYZ(&x, &y, &z);
4834:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
4835:src/xeq.c     **** 						set_NaN(&r);
4836:src/xeq.c     **** 					setlastX();
4837:src/xeq.c     **** 					lower();
4838:src/xeq.c     **** 					lower();
4839:src/xeq.c     **** 					setX(&r);
4840:src/xeq.c     **** 				}
4841:src/xeq.c     **** 			} else
4842:src/xeq.c     **** 				bad_mode_error();
4843:src/xeq.c     **** 		}
4844:src/xeq.c     **** 	} else
4845:src/xeq.c     **** 		illegal(op);
4846:src/xeq.c     **** }
4847:src/xeq.c     **** 
4848:src/xeq.c     **** 
4849:src/xeq.c     **** #else // UNIVERSAL_DISPATCH
4850:src/xeq.c     **** 
4851:src/xeq.c     **** 
4852:src/xeq.c     **** /*
4853:src/xeq.c     ****  *  Call functions by reusing the decimal code for integer mode
4854:src/xeq.c     ****  */
4855:src/xeq.c     **** static long long int universal_dispatch_int(long long int y, long long int x, unsigned int dyadic)
4856:src/xeq.c     **** {
4857:src/xeq.c     **** 	int sx, sy;
4858:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4859:src/xeq.c     **** 	unsigned long long int vy;
4860:src/xeq.c     **** 	decNumber rx, ry, r;
4861:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4862:src/xeq.c     **** 	void (*function_pointer)(void);
4863:src/xeq.c     **** 
4864:src/xeq.c     **** #ifdef SHORT_POINTERS
4865:src/xeq.c     **** 	unsigned short compact_pointer;
4866:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4867:src/xeq.c     **** #else
4868:src/xeq.c     **** 	void (*compact_pointer)(void);
4869:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4870:src/xeq.c     **** #endif
4871:src/xeq.c     **** 
4872:src/xeq.c     **** 	if (dyadic) {
ARM GAS  /tmp/ccQQPlfu.s 			page 117


4873:src/xeq.c     **** 		vy = extract_value(y, &sy);
4874:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4875:src/xeq.c     **** 	}
4876:src/xeq.c     **** 	else {
4877:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4878:src/xeq.c     **** 	}
4879:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4880:src/xeq.c     **** 		bad_mode_error();
4881:src/xeq.c     **** 	}
4882:src/xeq.c     **** 	else {
4883:src/xeq.c     **** 		function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4884:src/xeq.c     **** #ifndef REALBUILD
4885:src/xeq.c     **** 		if (check_for_xrom_address(function_pointer) != NULL) {
4886:src/xeq.c     **** 			bad_mode_error();
4887:src/xeq.c     **** 		}
4888:src/xeq.c     **** 		else
4889:src/xeq.c     **** #endif
4890:src/xeq.c     **** 		{
4891:src/xeq.c     **** 			void *result;
4892:src/xeq.c     **** 
4893:src/xeq.c     **** 			ullint_to_dn(&rx, vx);		if (sx) dn_minus(&rx, &rx);
4894:src/xeq.c     **** 			if (dyadic) {
4895:src/xeq.c     **** 				ullint_to_dn(&ry, vy);		if (sy) dn_minus(&ry, &ry);
4896:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r, &ry, &rx);
4897:src/xeq.c     **** 			}
4898:src/xeq.c     **** 			else {
4899:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r, &rx);
4900:src/xeq.c     **** 			}
4901:src/xeq.c     **** 			if (NULL == result) {
4902:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4903:src/xeq.c     **** 			}
4904:src/xeq.c     **** 			else {
4905:src/xeq.c     **** 				return intResult(&r);
4906:src/xeq.c     **** 			}
4907:src/xeq.c     **** 		}
4908:src/xeq.c     **** 	}
4909:src/xeq.c     **** 	return 0;
4910:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
4911:src/xeq.c     **** }
4912:src/xeq.c     **** 
4913:src/xeq.c     **** 
4914:src/xeq.c     **** long long int intMonadic(long long int x)
4915:src/xeq.c     **** {
4916:src/xeq.c     **** 	return universal_dispatch_int(0, x, 0);
4917:src/xeq.c     **** }
4918:src/xeq.c     **** 
4919:src/xeq.c     **** long long int intDyadic(long long int y, long long int x)
4920:src/xeq.c     **** {
4921:src/xeq.c     **** 	return universal_dispatch_int(y, x, 1);
4922:src/xeq.c     **** }
4923:src/xeq.c     **** 
4924:src/xeq.c     **** 
4925:src/xeq.c     **** /*
4926:src/xeq.c     ****  *  Universal dispatch function for niladic, monadic, dyadic and triadic functions, both real and c
4927:src/xeq.c     ****  */
4928:src/xeq.c     **** static void universal_dispatch(const opcode op, const unsigned int operands, const unsigned int com
4929:src/xeq.c     **** {
ARM GAS  /tmp/ccQQPlfu.s 			page 118


4930:src/xeq.c     **** 	const int intmode = is_intmode();
4931:src/xeq.c     **** 	volatile long long int ix; // declared volatile to avoid bogus warning about variable possibly bei
4932:src/xeq.c     **** 	const unsigned int f = argKIND(op);
4933:src/xeq.c     **** 	void (*function_pointer)(void);
4934:src/xeq.c     **** 
4935:src/xeq.c     **** #ifdef SHORT_POINTERS
4936:src/xeq.c     **** 	unsigned short compact_pointer;
4937:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4938:src/xeq.c     **** #else
4939:src/xeq.c     **** 	void (*compact_pointer)(void);
4940:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4941:src/xeq.c     **** #endif
4942:src/xeq.c     **** 
4943:src/xeq.c     **** 	process_cmdline();
4944:src/xeq.c     **** 	if (operands != 0) {
4945:src/xeq.c     **** 		set_lift();
4946:src/xeq.c     **** 	}
4947:src/xeq.c     **** 	switch (operands) {
4948:src/xeq.c     **** 	default:
4949:src/xeq.c     **** 	case 0:
4950:src/xeq.c     **** 		if (f >= NUM_NILADIC) {
4951:src/xeq.c     **** illegal:
4952:src/xeq.c     **** 			illegal(op);
4953:src/xeq.c     **** 			goto finish_niladic;
4954:src/xeq.c     **** 		}
4955:src/xeq.c     **** 		if (intmode && NILADIC_NOTINT(niladics[f])) {
4956:src/xeq.c     **** 			goto bad_mode;
4957:src/xeq.c     **** 		}
4958:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)niladics[f].niladicf;
4959:src/xeq.c     **** 		break;
4960:src/xeq.c     **** 
4961:src/xeq.c     **** 	case 1:
4962:src/xeq.c     **** 		if (f >= NUM_MONADIC)
4963:src/xeq.c     **** 			goto illegal;
4964:src/xeq.c     **** 		if (intmode)
4965:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].monint;
4966:src/xeq.c     **** 		else if (complex)
4967:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondcmplx;
4968:src/xeq.c     **** 		else
4969:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4970:src/xeq.c     **** 		break;
4971:src/xeq.c     **** 
4972:src/xeq.c     **** 	case 2:
4973:src/xeq.c     **** 		if (f >= NUM_DYADIC)
4974:src/xeq.c     **** 			goto illegal;
4975:src/xeq.c     **** 		if (intmode)
4976:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydint;
4977:src/xeq.c     **** 		else if (complex)
4978:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydcmplx;
4979:src/xeq.c     **** 		else
4980:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4981:src/xeq.c     **** 		break;
4982:src/xeq.c     **** 
4983:src/xeq.c     **** 	case 3:
4984:src/xeq.c     **** 		if (f >= NUM_TRIADIC)
4985:src/xeq.c     **** 			goto illegal;
4986:src/xeq.c     **** 		if (intmode)
ARM GAS  /tmp/ccQQPlfu.s 			page 119


4987:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].triint;
4988:src/xeq.c     **** 		else
4989:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].trireal;
4990:src/xeq.c     **** 		break;
4991:src/xeq.c     **** 	}
4992:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4993:src/xeq.c     **** 		if (operands != 0) {
4994:src/xeq.c     **** 			// The original niladic() function doesn't invoke
4995:src/xeq.c     **** 			// bad_mode_error() if the function pointer is null.
4996:src/xeq.c     **** 			// TODO:  Verify that this behavior is really needed.
4997:src/xeq.c     **** bad_mode:
4998:src/xeq.c     **** 			bad_mode_error();
4999:src/xeq.c     **** 		}
5000:src/xeq.c     **** 		goto finish_niladic;
5001:src/xeq.c     **** 	}
5002:src/xeq.c     **** 	function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
5003:src/xeq.c     **** 	if (dispatch_xrom(function_pointer)) {
5004:src/xeq.c     **** 		return;
5005:src/xeq.c     **** 	}
5006:src/xeq.c     **** 	if (operands == 0) {
5007:src/xeq.c     **** 		switch (NILADIC_NUMRESULTS(niladics[f])) {
5008:src/xeq.c     **** 		case 2:		lift_if_enabled(); // fall through
5009:src/xeq.c     **** 		case 1:		lift_if_enabled(); break;
5010:src/xeq.c     **** 		}
5011:src/xeq.c     **** 		((FP_NILADIC)function_pointer)((enum nilop)f);
5012:src/xeq.c     **** finish_niladic:
5013:src/xeq.c     **** 		// If an error occurred, we end up here even if a non-niladic function was called.
5014:src/xeq.c     **** 		// set_lift() is always called for non-niladic functions so calling it again does no harm.
5015:src/xeq.c     **** 		if (f != OP_rCLX) {
5016:src/xeq.c     **** 			set_lift();
5017:src/xeq.c     **** 		}
5018:src/xeq.c     **** 	}
5019:src/xeq.c     **** 	else if (intmode) {
5020:src/xeq.c     **** 		long long int iy;
5021:src/xeq.c     **** 		long long int iz;
5022:src/xeq.c     **** 
5023:src/xeq.c     **** 		ix = getX_int();
5024:src/xeq.c     **** 		iy = get_reg_n_int(regY_idx);
5025:src/xeq.c     **** 		switch (operands) {
5026:src/xeq.c     **** 		default:
5027:src/xeq.c     **** 		case 1:
5028:src/xeq.c     **** 			ix = ((FP_MONADIC_INT)function_pointer)(ix);
5029:src/xeq.c     **** 			break;
5030:src/xeq.c     **** 
5031:src/xeq.c     **** 		case 2:
5032:src/xeq.c     **** 			ix = ((FP_DYADIC_INT)function_pointer)(iy, ix);
5033:src/xeq.c     **** 			break;
5034:src/xeq.c     **** 
5035:src/xeq.c     **** 		case 3:
5036:src/xeq.c     **** 			iz = get_reg_n_int(regZ_idx);
5037:src/xeq.c     **** 			ix = ((FP_TRIADIC_INT)function_pointer)(iz, iy, ix);
5038:src/xeq.c     **** 			break;
5039:src/xeq.c     **** 		}
5040:src/xeq.c     **** 		goto finish_x;
5041:src/xeq.c     **** 	}
5042:src/xeq.c     **** 	else {
5043:src/xeq.c     **** 		decNumber x, y, z, t, r1;
ARM GAS  /tmp/ccQQPlfu.s 			page 120


5044:src/xeq.c     **** 
5045:src/xeq.c     **** 		if (operands + complex <= 2) {
5046:src/xeq.c     **** 			getXY(&x, &y);
5047:src/xeq.c     **** 		}
5048:src/xeq.c     **** 		else {
5049:src/xeq.c     **** 			getXYZT(&x, &y, &z, &t);
5050:src/xeq.c     **** 		}
5051:src/xeq.c     **** 
5052:src/xeq.c     **** 		if (complex) {
5053:src/xeq.c     **** 			decNumber r2;
5054:src/xeq.c     **** 
5055:src/xeq.c     **** 			if (operands == 1) {
5056:src/xeq.c     **** 				((FP_MONADIC_CMPLX)function_pointer)(&r1, &r2, &x, &y);
5057:src/xeq.c     **** 			}
5058:src/xeq.c     **** 			else {
5059:src/xeq.c     **** 				((FP_DYADIC_CMPLX)function_pointer)(&r1, &r2, &z, &t, &x, &y);
5060:src/xeq.c     **** 			}
5061:src/xeq.c     **** 			setlastXY();
5062:src/xeq.c     **** 			if (operands != 1) {
5063:src/xeq.c     **** 				lower2();
5064:src/xeq.c     **** 			}
5065:src/xeq.c     **** 			setXY(&r1, &r2);
5066:src/xeq.c     **** 			set_was_complex();
5067:src/xeq.c     **** 		}
5068:src/xeq.c     **** 		else { // real
5069:src/xeq.c     **** 			void *result;
5070:src/xeq.c     **** 
5071:src/xeq.c     **** 			switch (operands) {
5072:src/xeq.c     **** 			default:
5073:src/xeq.c     **** 			case 1:
5074:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r1, &x);
5075:src/xeq.c     **** 				break;
5076:src/xeq.c     **** 
5077:src/xeq.c     **** 			case 2:
5078:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r1, &y, &x);
5079:src/xeq.c     **** 				break;
5080:src/xeq.c     **** 
5081:src/xeq.c     **** 			case 3:
5082:src/xeq.c     **** 				result = ((FP_TRIADIC_REAL)function_pointer)(&r1, &z, &y, &x);
5083:src/xeq.c     **** 				break;
5084:src/xeq.c     **** 			}
5085:src/xeq.c     **** 			if (NULL == result) {
5086:src/xeq.c     **** 				set_NaN(&r1);
5087:src/xeq.c     **** 			}
5088:src/xeq.c     **** finish_x:
5089:src/xeq.c     **** 			setlastX();
5090:src/xeq.c     **** 			switch (operands) {
5091:src/xeq.c     **** 			case 3:		lower(); // fall through
5092:src/xeq.c     **** 			case 2:		lower(); break;
5093:src/xeq.c     **** 			}
5094:src/xeq.c     **** 			if (!intmode) {
5095:src/xeq.c     **** 				setX(&r1);
5096:src/xeq.c     **** 			}
5097:src/xeq.c     **** 			else {
5098:src/xeq.c     **** 				setX_int(ix);
5099:src/xeq.c     **** 			}
5100:src/xeq.c     **** 		}
ARM GAS  /tmp/ccQQPlfu.s 			page 121


5101:src/xeq.c     **** 	}
5102:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
5103:src/xeq.c     **** }
5104:src/xeq.c     **** 
5105:src/xeq.c     **** 
5106:src/xeq.c     **** static void niladic(const opcode op)
5107:src/xeq.c     **** {
5108:src/xeq.c     **** 	universal_dispatch(op, 0, 0);
5109:src/xeq.c     **** }
5110:src/xeq.c     **** 
5111:src/xeq.c     **** static void monadic(const opcode op)
5112:src/xeq.c     **** {
5113:src/xeq.c     **** 	universal_dispatch(op, 1, 0);
5114:src/xeq.c     **** }
5115:src/xeq.c     **** 
5116:src/xeq.c     **** static void monadic_cmplex(const opcode op)
5117:src/xeq.c     **** {
5118:src/xeq.c     **** 	universal_dispatch(op, 1, 1);
5119:src/xeq.c     **** }
5120:src/xeq.c     **** 
5121:src/xeq.c     **** static void dyadic(const opcode op)
5122:src/xeq.c     **** {
5123:src/xeq.c     **** 	universal_dispatch(op, 2, 0);
5124:src/xeq.c     **** }
5125:src/xeq.c     **** 
5126:src/xeq.c     **** static void dyadic_cmplex(const opcode op)
5127:src/xeq.c     **** {
5128:src/xeq.c     **** 	universal_dispatch(op, 2, 1);
5129:src/xeq.c     **** }
5130:src/xeq.c     **** 
5131:src/xeq.c     **** static void triadic(const opcode op)
5132:src/xeq.c     **** {
5133:src/xeq.c     **** 	universal_dispatch(op, 3, 0);
5134:src/xeq.c     **** }
5135:src/xeq.c     **** 
5136:src/xeq.c     **** 
5137:src/xeq.c     **** #endif // UNIVERSAL_DISPATCH
5138:src/xeq.c     **** 
5139:src/xeq.c     **** 
5140:src/xeq.c     **** /*
5141:src/xeq.c     ****  *  Helper to check the maximum allowed register number, 
5142:src/xeq.c     ****  *  depending on command flags and current allocation.
5143:src/xeq.c     ****  *  This needs to be seperate because its called twice for indirect arguments
5144:src/xeq.c     ****  */
5145:src/xeq.c     **** static unsigned int get_reg_limit(unsigned int cmd, unsigned int arg)
5146:src/xeq.c     **** {
 1476              		.loc 1 5146 1 is_stmt 1 view -0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 0
 1479              		@ frame_needed = 0, uses_anonymous_args = 0
5147:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1480              		.loc 1 5147 2 view .LVU392
5148:src/xeq.c     **** 
5149:src/xeq.c     **** 	if (arg < TOPREALREG) {
 1481              		.loc 1 5149 2 view .LVU393
 1482              		.loc 1 5149 5 is_stmt 0 view .LVU394
 1483 0000 6329     		cmp	r1, #99
ARM GAS  /tmp/ccQQPlfu.s 			page 122


5146:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1484              		.loc 1 5146 1 view .LVU395
 1485 0002 38B5     		push	{r3, r4, r5, lr}
 1486              		.cfi_def_cfa_offset 16
 1487              		.cfi_offset 3, -16
 1488              		.cfi_offset 4, -12
 1489              		.cfi_offset 5, -8
 1490              		.cfi_offset 14, -4
5146:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1491              		.loc 1 5146 1 view .LVU396
 1492 0004 0446     		mov	r4, r0
 1493              		.loc 1 5149 5 view .LVU397
 1494 0006 16D8     		bhi	.L119
5150:src/xeq.c     **** 		// Range checking for registers against variable boundary
5151:src/xeq.c     **** 		lim = global_regs_rarg((enum rarg) cmd) - 1;
 1495              		.loc 1 5151 3 is_stmt 1 view .LVU398
 1496              	.LVL102:
 1497              	.LBB1452:
 1498              	.LBI1452:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1499              		.loc 1 241 14 view .LVU399
 1500              	.LBB1453:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1501              		.loc 1 242 2 view .LVU400
 1502              	.LBB1454:
 1503              	.LBI1454:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1504              		.loc 1 1112 5 view .LVU401
 1505              	.LBB1455:
1113:src/xeq.c     **** }
 1506              		.loc 1 1113 2 view .LVU402
1113:src/xeq.c     **** }
 1507              		.loc 1 1113 12 is_stmt 0 view .LVU403
 1508 0008 294B     		ldr	r3, .L139
 1509 000a 1A68     		ldr	r2, [r3]
1113:src/xeq.c     **** }
 1510              		.loc 1 1113 24 view .LVU404
 1511 000c B2F8E817 		ldrh	r1, [r2, #2024]
 1512              	.LVL103:
1113:src/xeq.c     **** }
 1513              		.loc 1 1113 24 view .LVU405
 1514 0010 44F20103 		movw	r3, #16385
 1515              	.LBE1455:
 1516              	.LBE1454:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1517              		.loc 1 242 5 view .LVU406
 1518 0014 0B40     		ands	r3, r3, r1
 1519 0016 B3F5804F 		cmp	r3, #16384
 1520 001a 2ED0     		beq	.L120
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1521              		.loc 1 242 19 view .LVU407
 1522 001c 8028     		cmp	r0, #128
 1523 001e 39D0     		beq	.L136
 247:src/xeq.c     **** }
 1524              		.loc 1 247 3 is_stmt 1 view .LVU408
 247:src/xeq.c     **** }
 1525              		.loc 1 247 10 is_stmt 0 view .LVU409
ARM GAS  /tmp/ccQQPlfu.s 			page 123


 1526 0020 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1527              	.LVL104:
 1528              	.L124:
 247:src/xeq.c     **** }
 1529              		.loc 1 247 10 view .LVU410
 1530 0024 2349     		ldr	r1, .L139+4
 1531              	.LBE1453:
 1532              	.LBE1452:
 1533              		.loc 1 5151 7 view .LVU411
 1534 0026 0138     		subs	r0, r0, #1
 1535              	.LVL105:
 1536              		.loc 1 5151 7 view .LVU412
 1537 0028 2501     		lsls	r5, r4, #4
 1538              	.LVL106:
 1539              	.L125:
5152:src/xeq.c     **** 	}
5153:src/xeq.c     **** 	else if (argcmds[cmd].local) {
5154:src/xeq.c     **** 		// Range checking for local registers
5155:src/xeq.c     **** 		lim = NUMREG - 1 + local_regs_rarg((enum rarg) cmd);
5156:src/xeq.c     **** 	}
5157:src/xeq.c     **** 	if (argcmds[cmd].cmplx) {
 1540              		.loc 1 5157 2 is_stmt 1 view .LVU413
 1541              		.loc 1 5157 18 is_stmt 0 view .LVU414
 1542 002a 2944     		add	r1, r1, r5
 1543 002c 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 1544              		.loc 1 5157 5 view .LVU415
 1545 002e D906     		lsls	r1, r3, #27
 1546 0030 10D5     		bpl	.L126
 1547              	.L137:
5158:src/xeq.c     **** 		// one short of the last avialable register for complex access
5159:src/xeq.c     **** 		--lim;
 1548              		.loc 1 5159 3 is_stmt 1 view .LVU416
 1549 0032 0138     		subs	r0, r0, #1
 1550              	.LVL107:
 1551              	.L118:
5160:src/xeq.c     **** 	}
5161:src/xeq.c     **** 	else if (cmd == RARG_STOSTK || cmd == RARG_RCLSTK) {
5162:src/xeq.c     **** 		// avoid stack clash error in these commands
5163:src/xeq.c     **** 		lim -= stack_size() - 1;
5164:src/xeq.c     **** 	}
5165:src/xeq.c     **** 	return lim;
5166:src/xeq.c     **** }
 1552              		.loc 1 5166 1 is_stmt 0 view .LVU417
 1553 0034 38BD     		pop	{r3, r4, r5, pc}
 1554              	.LVL108:
 1555              	.L119:
5153:src/xeq.c     **** 		// Range checking for local registers
 1556              		.loc 1 5153 7 is_stmt 1 view .LVU418
5153:src/xeq.c     **** 		// Range checking for local registers
 1557              		.loc 1 5153 23 is_stmt 0 view .LVU419
 1558 0036 1F49     		ldr	r1, .L139+4
 1559              	.LVL109:
5153:src/xeq.c     **** 		// Range checking for local registers
 1560              		.loc 1 5153 23 view .LVU420
 1561 0038 01EB0013 		add	r3, r1, r0, lsl #4
 1562 003c 0501     		lsls	r5, r0, #4
 1563 003e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
ARM GAS  /tmp/ccQQPlfu.s 			page 124


5153:src/xeq.c     **** 		// Range checking for local registers
 1564              		.loc 1 5153 10 view .LVU421
 1565 0040 1807     		lsls	r0, r3, #28
 1566              	.LVL110:
5153:src/xeq.c     **** 		// Range checking for local registers
 1567              		.loc 1 5153 10 view .LVU422
 1568 0042 18D5     		bpl	.L130
5155:src/xeq.c     **** 	}
 1569              		.loc 1 5155 3 is_stmt 1 view .LVU423
5155:src/xeq.c     **** 	}
 1570              		.loc 1 5155 22 is_stmt 0 view .LVU424
 1571 0044 E0B2     		uxtb	r0, r4
 1572 0046 FFF7FEFF 		bl	local_regs_rarg
 1573              	.LVL111:
5157:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1574              		.loc 1 5157 18 view .LVU425
 1575 004a 2944     		add	r1, r1, r5
5155:src/xeq.c     **** 	}
 1576              		.loc 1 5155 20 view .LVU426
 1577 004c 6F30     		adds	r0, r0, #111
 1578              	.LVL112:
5157:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1579              		.loc 1 5157 2 is_stmt 1 view .LVU427
5157:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1580              		.loc 1 5157 18 is_stmt 0 view .LVU428
 1581 004e 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
5157:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1582              		.loc 1 5157 5 view .LVU429
 1583 0050 D906     		lsls	r1, r3, #27
 1584 0052 EED4     		bmi	.L137
 1585              	.L126:
5161:src/xeq.c     **** 		// avoid stack clash error in these commands
 1586              		.loc 1 5161 7 is_stmt 1 view .LVU430
5161:src/xeq.c     **** 		// avoid stack clash error in these commands
 1587              		.loc 1 5161 30 is_stmt 0 view .LVU431
 1588 0054 223C     		subs	r4, r4, #34
 1589              	.LVL113:
5161:src/xeq.c     **** 		// avoid stack clash error in these commands
 1590              		.loc 1 5161 10 view .LVU432
 1591 0056 012C     		cmp	r4, #1
 1592 0058 ECD8     		bhi	.L118
5163:src/xeq.c     **** 	}
 1593              		.loc 1 5163 3 is_stmt 1 view .LVU433
 1594              	.LBB1460:
 1595              	.LBI1460:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 1596              		.loc 1 706 5 view .LVU434
 1597              	.LBB1461:
 707:src/xeq.c     **** 		return 4;
 1598              		.loc 1 707 2 view .LVU435
 707:src/xeq.c     **** 		return 4;
 1599              		.loc 1 707 8 is_stmt 0 view .LVU436
 1600 005a 154B     		ldr	r3, .L139
 1601 005c 1B68     		ldr	r3, [r3]
 707:src/xeq.c     **** 		return 4;
 1602              		.loc 1 707 6 view .LVU437
 1603 005e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
ARM GAS  /tmp/ccQQPlfu.s 			page 125


 707:src/xeq.c     **** 		return 4;
 1604              		.loc 1 707 5 view .LVU438
 1605 0062 1207     		lsls	r2, r2, #28
 1606 0064 14D5     		bpl	.L131
 1607              	.LBB1462:
 1608              	.LBI1462:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 1609              		.loc 1 185 5 is_stmt 1 view .LVU439
 1610              	.LBB1463:
 186:src/xeq.c     **** }
 1611              		.loc 1 186 2 view .LVU440
 186:src/xeq.c     **** }
 1612              		.loc 1 186 9 is_stmt 0 view .LVU441
 1613 0066 B3F8E037 		ldrh	r3, [r3, #2016]
 1614              	.LBE1463:
 1615              	.LBE1462:
 707:src/xeq.c     **** 		return 4;
 1616              		.loc 1 707 27 view .LVU442
 1617 006a 9B0B     		lsrs	r3, r3, #14
 1618 006c 032B     		cmp	r3, #3
 1619 006e 16D0     		beq	.L138
 1620 0070 0723     		movs	r3, #7
 1621              	.L128:
 1622              	.LBE1461:
 1623              	.LBE1460:
5163:src/xeq.c     **** 	}
 1624              		.loc 1 5163 7 view .LVU443
 1625 0072 C01A     		subs	r0, r0, r3
 1626              	.LVL114:
5165:src/xeq.c     **** }
 1627              		.loc 1 5165 2 is_stmt 1 view .LVU444
 1628              		.loc 1 5166 1 is_stmt 0 view .LVU445
 1629 0074 38BD     		pop	{r3, r4, r5, pc}
 1630              	.LVL115:
 1631              	.L130:
5147:src/xeq.c     **** 
 1632              		.loc 1 5147 15 view .LVU446
 1633 0076 7020     		movs	r0, #112
 1634 0078 D7E7     		b	.L125
 1635              	.LVL116:
 1636              	.L120:
 1637              	.LBB1466:
 1638              	.LBB1458:
 1639              	.LBB1456:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1640              		.loc 1 243 3 is_stmt 1 view .LVU447
 244:src/xeq.c     **** 	}
 1641              		.loc 1 244 26 is_stmt 0 view .LVU448
 1642 007a A4F17E03 		sub	r3, r4, #126
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1643              		.loc 1 243 24 view .LVU449
 1644 007e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1645              	.LVL117:
 244:src/xeq.c     **** 	}
 1646              		.loc 1 244 56 view .LVU450
 1647 0082 DBB2     		uxtb	r3, r3
 1648 0084 012B     		cmp	r3, #1
ARM GAS  /tmp/ccQQPlfu.s 			page 126


 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1649              		.loc 1 243 13 view .LVU451
 1650 0086 A0F10C00 		sub	r0, r0, #12
 1651              	.LVL118:
 244:src/xeq.c     **** 	}
 1652              		.loc 1 244 3 is_stmt 1 view .LVU452
 244:src/xeq.c     **** 	}
 1653              		.loc 1 244 56 is_stmt 0 view .LVU453
 1654 008a CBD9     		bls	.L124
 244:src/xeq.c     **** 	}
 1655              		.loc 1 244 67 view .LVU454
 1656 008c 4010     		asrs	r0, r0, #1
 1657              	.LVL119:
 244:src/xeq.c     **** 	}
 1658              		.loc 1 244 67 view .LVU455
 1659 008e C9E7     		b	.L124
 1660              	.LVL120:
 1661              	.L131:
 244:src/xeq.c     **** 	}
 1662              		.loc 1 244 67 view .LVU456
 1663              	.LBE1456:
 1664              	.LBE1458:
 1665              	.LBE1466:
 1666              	.LBB1467:
 1667              	.LBB1464:
 1668 0090 0323     		movs	r3, #3
 1669 0092 EEE7     		b	.L128
 1670              	.LVL121:
 1671              	.L136:
 244:src/xeq.c     **** 	}
 1672              		.loc 1 244 67 view .LVU457
 1673              	.LBE1464:
 1674              	.LBE1467:
 1675              	.LBB1468:
 1676              	.LBB1459:
 1677              	.LBB1457:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1678              		.loc 1 243 3 is_stmt 1 view .LVU458
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1679              		.loc 1 243 24 is_stmt 0 view .LVU459
 1680 0094 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1681              	.LVL122:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1682              		.loc 1 243 13 view .LVU460
 1683 0098 0C38     		subs	r0, r0, #12
 1684              	.LVL123:
 244:src/xeq.c     **** 	}
 1685              		.loc 1 244 3 is_stmt 1 view .LVU461
 244:src/xeq.c     **** 	}
 1686              		.loc 1 244 67 is_stmt 0 view .LVU462
 1687 009a 4010     		asrs	r0, r0, #1
 1688              	.LVL124:
 244:src/xeq.c     **** 	}
 1689              		.loc 1 244 67 view .LVU463
 1690 009c C2E7     		b	.L124
 1691              	.LVL125:
 1692              	.L138:
ARM GAS  /tmp/ccQQPlfu.s 			page 127


 244:src/xeq.c     **** 	}
 1693              		.loc 1 244 67 view .LVU464
 1694              	.LBE1457:
 1695              	.LBE1459:
 1696              	.LBE1468:
 1697              	.LBB1469:
 1698              	.LBB1465:
 707:src/xeq.c     **** 		return 4;
 1699              		.loc 1 707 44 view .LVU465
 1700 009e 064B     		ldr	r3, .L139+8
 707:src/xeq.c     **** 		return 4;
 1701              		.loc 1 707 41 view .LVU466
 1702 00a0 93F90130 		ldrsb	r3, [r3, #1]
 1703 00a4 002B     		cmp	r3, #0
 1704 00a6 B4BF     		ite	lt
 1705 00a8 0723     		movlt	r3, #7
 1706 00aa 0323     		movge	r3, #3
 1707 00ac E1E7     		b	.L128
 1708              	.L140:
 1709 00ae 00BF     		.align	2
 1710              	.L139:
 1711 00b0 00000000 		.word	main_ram
 1712 00b4 00000000 		.word	argcmds
 1713 00b8 00000000 		.word	XromParams
 1714              	.LBE1465:
 1715              	.LBE1469:
 1716              		.cfi_endproc
 1717              	.LFE247:
 1719              		.section	.text.local_regs,"ax",%progbits
 1720              		.align	1
 1721              		.p2align 2,,3
 1722              		.global	local_regs
 1723              		.syntax unified
 1724              		.thumb
 1725              		.thumb_func
 1726              		.fpu fpv4-sp-d16
 1728              	local_regs:
 1729              	.LFB7:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 1730              		.loc 1 233 22 is_stmt 1 view -0
 1731              		.cfi_startproc
 1732              		@ args = 0, pretend = 0, frame = 0
 1733              		@ frame_needed = 0, uses_anonymous_args = 0
 1734              		@ link register save eliminated.
 234:src/xeq.c     **** }
 1735              		.loc 1 234 2 view .LVU468
 1736              	.LVL126:
 1737              	.LBB1470:
 1738              	.LBI1470:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1739              		.loc 1 225 5 view .LVU469
 1740              	.LBB1471:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1741              		.loc 1 226 2 view .LVU470
 1742              	.LBB1472:
 1743              	.LBI1472:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
ARM GAS  /tmp/ccQQPlfu.s 			page 128


 1744              		.loc 1 1112 5 view .LVU471
 1745              	.LBB1473:
1113:src/xeq.c     **** }
 1746              		.loc 1 1113 2 view .LVU472
1113:src/xeq.c     **** }
 1747              		.loc 1 1113 12 is_stmt 0 view .LVU473
 1748 0000 0D4B     		ldr	r3, .L145
 1749 0002 1B68     		ldr	r3, [r3]
 1750              	.LVL127:
1113:src/xeq.c     **** }
 1751              		.loc 1 1113 12 view .LVU474
 1752              	.LBE1473:
 1753              	.LBE1472:
 227:src/xeq.c     **** }
 1754              		.loc 1 227 2 is_stmt 1 view .LVU475
 1755              	.LBB1476:
 1756              	.LBI1476:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1757              		.loc 1 217 5 view .LVU476
 1758              	.LBB1477:
 218:src/xeq.c     **** }
 1759              		.loc 1 218 2 view .LVU477
 218:src/xeq.c     **** }
 1760              		.loc 1 218 9 is_stmt 0 view .LVU478
 1761 0004 B3F9DE27 		ldrsh	r2, [r3, #2014]
 218:src/xeq.c     **** }
 1762              		.loc 1 218 57 view .LVU479
 1763 0008 002A     		cmp	r2, #0
 1764 000a 01DB     		blt	.L144
 1765 000c 0020     		movs	r0, #0
 1766              	.LVL128:
 218:src/xeq.c     **** }
 1767              		.loc 1 218 57 view .LVU480
 1768              	.LBE1477:
 1769              	.LBE1476:
 1770              	.LBE1471:
 1771              	.LBE1470:
 235:src/xeq.c     **** 
 1772              		.loc 1 235 1 view .LVU481
 1773 000e 7047     		bx	lr
 1774              	.LVL129:
 1775              	.L144:
 1776              	.LBB1489:
 1777              	.LBB1488:
 1778              	.LBB1482:
 1779              	.LBB1474:
1113:src/xeq.c     **** }
 1780              		.loc 1 1113 24 view .LVU482
 1781 0010 B3F8E807 		ldrh	r0, [r3, #2024]
 1782              	.LBE1474:
 1783              	.LBE1482:
 1784              	.LBB1483:
 1785              	.LBB1478:
 218:src/xeq.c     **** }
 1786              		.loc 1 218 25 view .LVU483
 1787 0014 0949     		ldr	r1, .L145+4
 1788              	.LBE1478:
ARM GAS  /tmp/ccQQPlfu.s 			page 129


 1789              	.LBE1483:
 1790              	.LBB1484:
 1791              	.LBB1475:
1113:src/xeq.c     **** }
 1792              		.loc 1 1113 24 view .LVU484
 1793 0016 44F20103 		movw	r3, #16385
 1794              	.LVL130:
1113:src/xeq.c     **** }
 1795              		.loc 1 1113 24 view .LVU485
 1796              	.LBE1475:
 1797              	.LBE1484:
 1798              	.LBB1485:
 1799              	.LBB1479:
 218:src/xeq.c     **** }
 1800              		.loc 1 218 25 view .LVU486
 1801 001a 0968     		ldr	r1, [r1]
 1802              	.LBE1479:
 1803              	.LBE1485:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1804              		.loc 1 226 73 view .LVU487
 1805 001c 0340     		ands	r3, r3, r0
 1806 001e A3F58043 		sub	r3, r3, #16384
 1807              	.LBB1486:
 1808              	.LBB1480:
 218:src/xeq.c     **** }
 1809              		.loc 1 218 57 view .LVU488
 1810 0022 31F81200 		ldrh	r0, [r1, r2, lsl #1]
 1811              	.LBE1480:
 1812              	.LBE1486:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1813              		.loc 1 226 73 view .LVU489
 1814 0026 B3FA83F3 		clz	r3, r3
 1815 002a 5B09     		lsrs	r3, r3, #5
 1816 002c 0233     		adds	r3, r3, #2
 1817              	.LBB1487:
 1818              	.LBB1481:
 218:src/xeq.c     **** }
 1819              		.loc 1 218 57 view .LVU490
 1820 002e C0F30B00 		ubfx	r0, r0, #0, #12
 1821 0032 1841     		asrs	r0, r0, r3
 1822 0034 7047     		bx	lr
 1823              	.L146:
 1824 0036 00BF     		.align	2
 1825              	.L145:
 1826 0038 00000000 		.word	main_ram
 1827 003c 00000000 		.word	RetStk
 1828              	.LBE1481:
 1829              	.LBE1487:
 1830              	.LBE1488:
 1831              	.LBE1489:
 1832              		.cfi_endproc
 1833              	.LFE7:
 1835              		.section	.text.global_regs_rarg,"ax",%progbits
 1836              		.align	1
 1837              		.p2align 2,,3
 1838              		.global	global_regs_rarg
 1839              		.syntax unified
ARM GAS  /tmp/ccQQPlfu.s 			page 130


 1840              		.thumb
 1841              		.thumb_func
 1842              		.fpu fpv4-sp-d16
 1844              	global_regs_rarg:
 1845              	.LVL131:
 1846              	.LFB8:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1847              		.loc 1 241 45 is_stmt 1 view -0
 1848              		.cfi_startproc
 1849              		@ args = 0, pretend = 0, frame = 0
 1850              		@ frame_needed = 0, uses_anonymous_args = 0
 1851              		@ link register save eliminated.
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1852              		.loc 1 242 2 view .LVU492
 1853              	.LBB1490:
 1854              	.LBI1490:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1855              		.loc 1 1112 5 view .LVU493
 1856              	.LBB1491:
1113:src/xeq.c     **** }
 1857              		.loc 1 1113 2 view .LVU494
1113:src/xeq.c     **** }
 1858              		.loc 1 1113 12 is_stmt 0 view .LVU495
 1859 0000 0E4B     		ldr	r3, .L156
 1860 0002 1A68     		ldr	r2, [r3]
1113:src/xeq.c     **** }
 1861              		.loc 1 1113 24 view .LVU496
 1862 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1863 0008 44F20103 		movw	r3, #16385
 1864              	.LBE1491:
 1865              	.LBE1490:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1866              		.loc 1 242 5 view .LVU497
 1867 000c 0B40     		ands	r3, r3, r1
 1868 000e B3F5804F 		cmp	r3, #16384
 1869 0012 09D0     		beq	.L148
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1870              		.loc 1 242 19 discriminator 1 view .LVU498
 1871 0014 8028     		cmp	r0, #128
 1872 0016 02D0     		beq	.L155
 247:src/xeq.c     **** }
 1873              		.loc 1 247 3 is_stmt 1 view .LVU499
 247:src/xeq.c     **** }
 1874              		.loc 1 247 10 is_stmt 0 view .LVU500
 1875 0018 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1876              	.LVL132:
 247:src/xeq.c     **** }
 1877              		.loc 1 247 10 view .LVU501
 1878 001c 7047     		bx	lr
 1879              	.LVL133:
 1880              	.L155:
 1881              	.LBB1492:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1882              		.loc 1 243 3 is_stmt 1 view .LVU502
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1883              		.loc 1 243 24 is_stmt 0 view .LVU503
 1884 001e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
ARM GAS  /tmp/ccQQPlfu.s 			page 131


 1885              	.LVL134:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1886              		.loc 1 243 13 view .LVU504
 1887 0022 0C38     		subs	r0, r0, #12
 1888              	.LVL135:
 244:src/xeq.c     **** 	}
 1889              		.loc 1 244 3 is_stmt 1 view .LVU505
 1890              	.L153:
 244:src/xeq.c     **** 	}
 1891              		.loc 1 244 67 is_stmt 0 discriminator 1 view .LVU506
 1892 0024 4010     		asrs	r0, r0, #1
 1893              	.LVL136:
 244:src/xeq.c     **** 	}
 1894              		.loc 1 244 67 discriminator 1 view .LVU507
 1895 0026 7047     		bx	lr
 1896              	.LVL137:
 1897              	.L148:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1898              		.loc 1 243 3 is_stmt 1 view .LVU508
 244:src/xeq.c     **** 	}
 1899              		.loc 1 244 56 is_stmt 0 view .LVU509
 1900 0028 A0F17E03 		sub	r3, r0, #126
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1901              		.loc 1 243 24 view .LVU510
 1902 002c 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 244:src/xeq.c     **** 	}
 1903              		.loc 1 244 56 view .LVU511
 1904 0030 012B     		cmp	r3, #1
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1905              		.loc 1 243 13 view .LVU512
 1906 0032 A2F10C00 		sub	r0, r2, #12
 1907              	.LVL138:
 244:src/xeq.c     **** 	}
 1908              		.loc 1 244 3 is_stmt 1 view .LVU513
 244:src/xeq.c     **** 	}
 1909              		.loc 1 244 56 is_stmt 0 view .LVU514
 1910 0036 F5D8     		bhi	.L153
 1911              	.LBE1492:
 248:src/xeq.c     **** 
 1912              		.loc 1 248 1 view .LVU515
 1913 0038 7047     		bx	lr
 1914              	.L157:
 1915 003a 00BF     		.align	2
 1916              	.L156:
 1917 003c 00000000 		.word	main_ram
 1918              		.cfi_endproc
 1919              	.LFE8:
 1921              		.section	.text.global_regs,"ax",%progbits
 1922              		.align	1
 1923              		.p2align 2,,3
 1924              		.global	global_regs
 1925              		.syntax unified
 1926              		.thumb
 1927              		.thumb_func
 1928              		.fpu fpv4-sp-d16
 1930              	global_regs:
 1931              	.LFB9:
ARM GAS  /tmp/ccQQPlfu.s 			page 132


 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 1932              		.loc 1 253 32 is_stmt 1 view -0
 1933              		.cfi_startproc
 1934              		@ args = 0, pretend = 0, frame = 0
 1935              		@ frame_needed = 0, uses_anonymous_args = 0
 1936              		@ link register save eliminated.
 254:src/xeq.c     **** }
 1937              		.loc 1 254 2 view .LVU517
 1938              	.LVL139:
 1939              	.LBB1493:
 1940              	.LBI1493:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1941              		.loc 1 241 14 view .LVU518
 1942              	.LBB1494:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1943              		.loc 1 242 2 view .LVU519
 1944              	.LBB1495:
 1945              	.LBI1495:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1946              		.loc 1 1112 5 view .LVU520
 1947              	.LBB1496:
1113:src/xeq.c     **** }
 1948              		.loc 1 1113 2 view .LVU521
1113:src/xeq.c     **** }
 1949              		.loc 1 1113 12 is_stmt 0 view .LVU522
 1950 0000 074B     		ldr	r3, .L161
 1951 0002 1A68     		ldr	r2, [r3]
1113:src/xeq.c     **** }
 1952              		.loc 1 1113 24 view .LVU523
 1953 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1954              	.LBE1496:
 1955              	.LBE1495:
 1956              	.LBB1498:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1957              		.loc 1 243 24 view .LVU524
 1958 0008 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1959              	.LBE1498:
 1960              	.LBB1499:
 1961              	.LBB1497:
1113:src/xeq.c     **** }
 1962              		.loc 1 1113 24 view .LVU525
 1963 000c 44F20103 		movw	r3, #16385
 1964              	.LBE1497:
 1965              	.LBE1499:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1966              		.loc 1 242 5 view .LVU526
 1967 0010 0B40     		ands	r3, r3, r1
 1968 0012 B3F5804F 		cmp	r3, #16384
 1969              	.LBB1500:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1970              		.loc 1 243 3 is_stmt 1 view .LVU527
 244:src/xeq.c     **** 	}
 1971              		.loc 1 244 3 view .LVU528
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1972              		.loc 1 243 13 is_stmt 0 view .LVU529
 1973 0016 04BF     		itt	eq
 1974 0018 0C38     		subeq	r0, r0, #12
ARM GAS  /tmp/ccQQPlfu.s 			page 133


 244:src/xeq.c     **** 	}
 1975              		.loc 1 244 67 view .LVU530
 1976 001a 4010     		asreq	r0, r0, #1
 1977              	.LBE1500:
 247:src/xeq.c     **** }
 1978              		.loc 1 247 3 is_stmt 1 view .LVU531
 1979              	.LVL140:
 247:src/xeq.c     **** }
 1980              		.loc 1 247 3 is_stmt 0 view .LVU532
 1981              	.LBE1494:
 1982              	.LBE1493:
 255:src/xeq.c     **** 
 1983              		.loc 1 255 1 view .LVU533
 1984 001c 7047     		bx	lr
 1985              	.L162:
 1986 001e 00BF     		.align	2
 1987              	.L161:
 1988 0020 00000000 		.word	main_ram
 1989              		.cfi_endproc
 1990              	.LFE9:
 1992              		.section	.text.version,"ax",%progbits
 1993              		.align	1
 1994              		.p2align 2,,3
 1995              		.global	version
 1996              		.syntax unified
 1997              		.thumb
 1998              		.thumb_func
 1999              		.fpu fpv4-sp-d16
 2001              	version:
 2002              	.LVL141:
 2003              	.LFB10:
 267:src/xeq.c     **** 	State2.version = 1;
 2004              		.loc 1 267 29 is_stmt 1 view -0
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 0
 2007              		@ frame_needed = 0, uses_anonymous_args = 0
 2008              		@ link register save eliminated.
 268:src/xeq.c     **** 	if (!State2.runmode)
 2009              		.loc 1 268 2 view .LVU535
 268:src/xeq.c     **** 	if (!State2.runmode)
 2010              		.loc 1 268 17 is_stmt 0 view .LVU536
 2011 0000 054B     		ldr	r3, .L166
 2012 0002 5A7D     		ldrb	r2, [r3, #21]	@ zero_extendqisi2
 269:src/xeq.c     **** 		display();
 2013              		.loc 1 269 6 view .LVU537
 2014 0004 997D     		ldrb	r1, [r3, #22]	@ zero_extendqisi2
 268:src/xeq.c     **** 	if (!State2.runmode)
 2015              		.loc 1 268 17 view .LVU538
 2016 0006 42F01002 		orr	r2, r2, #16
 2017 000a 5A75     		strb	r2, [r3, #21]
 269:src/xeq.c     **** 		display();
 2018              		.loc 1 269 2 is_stmt 1 view .LVU539
 269:src/xeq.c     **** 		display();
 2019              		.loc 1 269 5 is_stmt 0 view .LVU540
 2020 000c 4B06     		lsls	r3, r1, #25
 2021 000e 00D5     		bpl	.L165
 271:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 134


 2022              		.loc 1 271 1 view .LVU541
 2023 0010 7047     		bx	lr
 2024              	.L165:
 270:src/xeq.c     **** }
 2025              		.loc 1 270 3 is_stmt 1 view .LVU542
 2026 0012 FFF7FEBF 		b	display
 2027              	.LVL142:
 2028              	.L167:
 270:src/xeq.c     **** }
 2029              		.loc 1 270 3 is_stmt 0 view .LVU543
 2030 0016 00BF     		.align	2
 2031              	.L166:
 2032 0018 00000000 		.word	StateWhileOn
 2033              		.cfi_endproc
 2034              	.LFE10:
 2036              		.section	.text.cmd_off,"ax",%progbits
 2037              		.align	1
 2038              		.p2align 2,,3
 2039              		.global	cmd_off
 2040              		.syntax unified
 2041              		.thumb
 2042              		.thumb_func
 2043              		.fpu fpv4-sp-d16
 2045              	cmd_off:
 2046              	.LVL143:
 2047              	.LFB11:
 273:src/xeq.c     **** 	shutdown();
 2048              		.loc 1 273 29 is_stmt 1 view -0
 2049              		.cfi_startproc
 2050              		@ args = 0, pretend = 0, frame = 0
 2051              		@ frame_needed = 0, uses_anonymous_args = 0
 2052              		@ link register save eliminated.
 274:src/xeq.c     **** }
 2053              		.loc 1 274 2 view .LVU545
 2054 0000 FFF7FEBF 		b	shutdown
 2055              	.LVL144:
 274:src/xeq.c     **** }
 2056              		.loc 1 274 2 is_stmt 0 view .LVU546
 2057              		.cfi_endproc
 2058              	.LFE11:
 2060              		.section	.text.init_RegionTab,"ax",%progbits
 2061              		.align	1
 2062              		.p2align 2,,3
 2063              		.global	init_RegionTab
 2064              		.syntax unified
 2065              		.thumb
 2066              		.thumb_func
 2067              		.fpu fpv4-sp-d16
 2069              	init_RegionTab:
 2070              	.LFB13:
 297:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 2071              		.loc 1 297 28 is_stmt 1 view -0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 0
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 2075              		@ link register save eliminated.
 298:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
ARM GAS  /tmp/ccQQPlfu.s 			page 135


 2076              		.loc 1 298 3 view .LVU548
 298:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2077              		.loc 1 298 30 is_stmt 0 view .LVU549
 2078 0000 0649     		ldr	r1, .L170
 299:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2079              		.loc 1 299 30 view .LVU550
 2080 0002 074A     		ldr	r2, .L170+4
 300:src/xeq.c     **** }
 2081              		.loc 1 300 30 view .LVU551
 2082 0004 074B     		ldr	r3, .L170+8
 298:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2083              		.loc 1 298 30 view .LVU552
 2084 0006 0868     		ldr	r0, [r1]
 299:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2085              		.loc 1 299 30 view .LVU553
 2086 0008 1168     		ldr	r1, [r2]
 300:src/xeq.c     **** }
 2087              		.loc 1 300 30 view .LVU554
 2088 000a 1A68     		ldr	r2, [r3]
 298:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2089              		.loc 1 298 16 view .LVU555
 2090 000c 064B     		ldr	r3, .L170+12
 298:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2091              		.loc 1 298 30 view .LVU556
 2092 000e 0430     		adds	r0, r0, #4
 299:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2093              		.loc 1 299 30 view .LVU557
 2094 0010 0431     		adds	r1, r1, #4
 300:src/xeq.c     **** }
 2095              		.loc 1 300 30 view .LVU558
 2096 0012 0432     		adds	r2, r2, #4
 299:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2097              		.loc 1 299 16 view .LVU559
 2098 0014 C3E90001 		strd	r0, r1, [r3]
 300:src/xeq.c     **** }
 2099              		.loc 1 300 3 is_stmt 1 view .LVU560
 300:src/xeq.c     **** }
 2100              		.loc 1 300 16 is_stmt 0 view .LVU561
 2101 0018 9A60     		str	r2, [r3, #8]
 301:src/xeq.c     **** #else
 2102              		.loc 1 301 1 view .LVU562
 2103 001a 7047     		bx	lr
 2104              	.L171:
 2105              		.align	2
 2106              	.L170:
 2107 001c 00000000 		.word	main_ram
 2108 0020 00000000 		.word	library_ram
 2109 0024 00000000 		.word	backup_ram
 2110 0028 00000000 		.word	.LANCHOR0
 2111              		.cfi_endproc
 2112              	.LFE13:
 2114              		.section	.text.sizeLIB,"ax",%progbits
 2115              		.align	1
 2116              		.p2align 2,,3
 2117              		.global	sizeLIB
 2118              		.syntax unified
 2119              		.thumb
ARM GAS  /tmp/ccQQPlfu.s 			page 136


 2120              		.thumb_func
 2121              		.fpu fpv4-sp-d16
 2123              	sizeLIB:
 2124              	.LVL145:
 2125              	.LFB14:
 313:src/xeq.c     **** 	if (region == REGION_XROM)
 2126              		.loc 1 313 25 is_stmt 1 view -0
 2127              		.cfi_startproc
 2128              		@ args = 0, pretend = 0, frame = 0
 2129              		@ frame_needed = 0, uses_anonymous_args = 0
 2130              		@ link register save eliminated.
 314:src/xeq.c     **** 		return xrom_size;
 2131              		.loc 1 314 2 view .LVU564
 314:src/xeq.c     **** 		return xrom_size;
 2132              		.loc 1 314 5 is_stmt 0 view .LVU565
 2133 0000 0328     		cmp	r0, #3
 2134 0002 05D0     		beq	.L175
 317:src/xeq.c     **** }
 2135              		.loc 1 317 3 is_stmt 1 view .LVU566
 317:src/xeq.c     **** }
 2136              		.loc 1 317 24 is_stmt 0 view .LVU567
 2137 0004 044B     		ldr	r3, .L176
 317:src/xeq.c     **** }
 2138              		.loc 1 317 32 view .LVU568
 2139 0006 53F82030 		ldr	r3, [r3, r0, lsl #2]
 317:src/xeq.c     **** }
 2140              		.loc 1 317 10 view .LVU569
 2141 000a 33F8020C 		ldrh	r0, [r3, #-2]
 2142              	.LVL146:
 318:src/xeq.c     **** 
 2143              		.loc 1 318 1 view .LVU570
 2144 000e 7047     		bx	lr
 2145              	.LVL147:
 2146              	.L175:
 315:src/xeq.c     **** 	else
 2147              		.loc 1 315 3 is_stmt 1 view .LVU571
 315:src/xeq.c     **** 	else
 2148              		.loc 1 315 10 is_stmt 0 view .LVU572
 2149 0010 024B     		ldr	r3, .L176+4
 2150 0012 1888     		ldrh	r0, [r3]
 2151              	.LVL148:
 315:src/xeq.c     **** 	else
 2152              		.loc 1 315 10 view .LVU573
 2153 0014 7047     		bx	lr
 2154              	.L177:
 2155 0016 00BF     		.align	2
 2156              	.L176:
 2157 0018 00000000 		.word	.LANCHOR0
 2158 001c 00000000 		.word	xrom_size
 2159              		.cfi_endproc
 2160              	.LFE14:
 2162              		.section	.text.getprog,"ax",%progbits
 2163              		.align	1
 2164              		.p2align 2,,3
 2165              		.global	getprog
 2166              		.syntax unified
 2167              		.thumb
ARM GAS  /tmp/ccQQPlfu.s 			page 137


 2168              		.thumb_func
 2169              		.fpu fpv4-sp-d16
 2171              	getprog:
 2172              	.LVL149:
 2173              	.LFB16:
 337:src/xeq.c     **** 
 2174              		.loc 1 337 33 is_stmt 1 view -0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 0
 2177              		@ frame_needed = 0, uses_anonymous_args = 0
 2178              		@ link register save eliminated.
 339:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2179              		.loc 1 339 2 view .LVU575
 340:src/xeq.c     **** 
 2180              		.loc 1 340 15 is_stmt 0 view .LVU576
 2181 0000 C0F30D02 		ubfx	r2, r0, #0, #14
 2182 0004 531E     		subs	r3, r2, #1
 339:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2183              		.loc 1 339 21 view .LVU577
 2184 0006 800B     		lsrs	r0, r0, #14
 2185              	.LVL150:
 340:src/xeq.c     **** 
 2186              		.loc 1 340 2 is_stmt 1 view .LVU578
 342:src/xeq.c     **** 		return OP_NIL | OP_END;
 2187              		.loc 1 342 2 view .LVU579
 342:src/xeq.c     **** 		return OP_NIL | OP_END;
 2188              		.loc 1 342 5 is_stmt 0 view .LVU580
 2189 0008 BAB1     		cbz	r2, .L184
 2190              	.LVL151:
 2191              	.LBB1501:
 2192              	.LBI1501:
 313:src/xeq.c     **** 	if (region == REGION_XROM)
 2193              		.loc 1 313 5 is_stmt 1 view .LVU581
 2194              	.LBB1502:
 314:src/xeq.c     **** 		return xrom_size;
 2195              		.loc 1 314 2 view .LVU582
 314:src/xeq.c     **** 		return xrom_size;
 2196              		.loc 1 314 5 is_stmt 0 view .LVU583
 2197 000a 0328     		cmp	r0, #3
 2198 000c 18D0     		beq	.L185
 317:src/xeq.c     **** }
 2199              		.loc 1 317 3 is_stmt 1 view .LVU584
 317:src/xeq.c     **** }
 2200              		.loc 1 317 24 is_stmt 0 view .LVU585
 2201 000e 0E4A     		ldr	r2, .L187
 317:src/xeq.c     **** }
 2202              		.loc 1 317 32 view .LVU586
 2203 0010 52F82020 		ldr	r2, [r2, r0, lsl #2]
 317:src/xeq.c     **** }
 2204              		.loc 1 317 10 view .LVU587
 2205 0014 32F8022C 		ldrh	r2, [r2, #-2]
 2206              	.L181:
 2207              	.LVL152:
 317:src/xeq.c     **** }
 2208              		.loc 1 317 10 view .LVU588
 2209              	.LBE1502:
 2210              	.LBE1501:
ARM GAS  /tmp/ccQQPlfu.s 			page 138


 342:src/xeq.c     **** 		return OP_NIL | OP_END;
 2211              		.loc 1 342 17 view .LVU589
 2212 0018 9342     		cmp	r3, r2
 2213 001a 0EDA     		bge	.L184
 344:src/xeq.c     **** }
 2214              		.loc 1 344 2 is_stmt 1 view .LVU590
 344:src/xeq.c     **** }
 2215              		.loc 1 344 29 is_stmt 0 view .LVU591
 2216 001c 0A4A     		ldr	r2, .L187
 344:src/xeq.c     **** }
 2217              		.loc 1 344 38 view .LVU592
 2218 001e 52F82020 		ldr	r2, [r2, r0, lsl #2]
 2219              	.LBB1504:
 2220              	.LBB1505:
 326:src/xeq.c     **** 	if ( isDBL(r) ) {
 2221              		.loc 1 326 13 view .LVU593
 2222 0022 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 2223              	.LVL153:
 327:src/xeq.c     **** 		r |= loc[1] << 16;
 2224              		.loc 1 327 5 view .LVU594
 2225 0026 00F47041 		and	r1, r0, #61440
 2226 002a B1F5704F 		cmp	r1, #61440
 2227              	.LBE1505:
 2228              	.LBE1504:
 344:src/xeq.c     **** }
 2229              		.loc 1 344 38 view .LVU595
 2230 002e 02EB4303 		add	r3, r2, r3, lsl #1
 2231              	.LVL154:
 2232              	.LBB1508:
 2233              	.LBI1504:
 324:src/xeq.c     **** {
 2234              		.loc 1 324 15 is_stmt 1 view .LVU596
 2235              	.LBB1506:
 326:src/xeq.c     **** 	if ( isDBL(r) ) {
 2236              		.loc 1 326 2 view .LVU597
 327:src/xeq.c     **** 		r |= loc[1] << 16;
 2237              		.loc 1 327 2 view .LVU598
 327:src/xeq.c     **** 		r |= loc[1] << 16;
 2238              		.loc 1 327 5 is_stmt 0 view .LVU599
 2239 0032 00D0     		beq	.L186
 2240              	.LBE1506:
 2241              	.LBE1508:
 345:src/xeq.c     **** 
 2242              		.loc 1 345 1 view .LVU600
 2243 0034 7047     		bx	lr
 2244              	.L186:
 2245              	.LBB1509:
 2246              	.LBB1507:
 328:src/xeq.c     **** 	}
 2247              		.loc 1 328 3 is_stmt 1 view .LVU601
 328:src/xeq.c     **** 	}
 2248              		.loc 1 328 5 is_stmt 0 view .LVU602
 2249 0036 1868     		ldr	r0, [r3]	@ unaligned
 2250              	.LVL155:
 328:src/xeq.c     **** 	}
 2251              		.loc 1 328 5 view .LVU603
 2252 0038 7047     		bx	lr
ARM GAS  /tmp/ccQQPlfu.s 			page 139


 2253              	.LVL156:
 2254              	.L184:
 328:src/xeq.c     **** 	}
 2255              		.loc 1 328 5 view .LVU604
 2256              	.LBE1507:
 2257              	.LBE1509:
 343:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 2258              		.loc 1 343 10 view .LVU605
 2259 003a 4FF49D70 		mov	r0, #314
 2260              	.LVL157:
 345:src/xeq.c     **** 
 2261              		.loc 1 345 1 view .LVU606
 2262 003e 7047     		bx	lr
 2263              	.LVL158:
 2264              	.L185:
 2265              	.LBB1510:
 2266              	.LBB1503:
 315:src/xeq.c     **** 	else
 2267              		.loc 1 315 3 is_stmt 1 view .LVU607
 315:src/xeq.c     **** 	else
 2268              		.loc 1 315 10 is_stmt 0 view .LVU608
 2269 0040 024A     		ldr	r2, .L187+4
 2270 0042 1288     		ldrh	r2, [r2]
 2271 0044 E8E7     		b	.L181
 2272              	.L188:
 2273 0046 00BF     		.align	2
 2274              	.L187:
 2275 0048 00000000 		.word	.LANCHOR0
 2276 004c 00000000 		.word	xrom_size
 2277              	.LBE1503:
 2278              	.LBE1510:
 2279              		.cfi_endproc
 2280              	.LFE16:
 2282              		.section	.text.get_current_prog,"ax",%progbits
 2283              		.align	1
 2284              		.p2align 2,,3
 2285              		.global	get_current_prog
 2286              		.syntax unified
 2287              		.thumb
 2288              		.thumb_func
 2289              		.fpu fpv4-sp-d16
 2291              	get_current_prog:
 2292              	.LFB17:
 351:src/xeq.c     **** 
 2293              		.loc 1 351 40 is_stmt 1 view -0
 2294              		.cfi_startproc
 2295              		@ args = 0, pretend = 0, frame = 0
 2296              		@ frame_needed = 0, uses_anonymous_args = 0
 2297              		@ link register save eliminated.
 353:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2298              		.loc 1 353 2 view .LVU610
 353:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2299              		.loc 1 353 21 is_stmt 0 view .LVU611
 2300 0000 074B     		ldr	r3, .L190
 354:src/xeq.c     **** }
 2301              		.loc 1 354 18 view .LVU612
 2302 0002 084A     		ldr	r2, .L190+4
ARM GAS  /tmp/ccQQPlfu.s 			page 140


 353:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2303              		.loc 1 353 21 view .LVU613
 2304 0004 1B68     		ldr	r3, [r3]
 2305 0006 B3F8EC37 		ldrh	r3, [r3, #2028]
 2306              	.LVL159:
 354:src/xeq.c     **** }
 2307              		.loc 1 354 2 is_stmt 1 view .LVU614
 353:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2308              		.loc 1 353 12 is_stmt 0 view .LVU615
 2309 000a 990B     		lsrs	r1, r3, #14
 354:src/xeq.c     **** }
 2310              		.loc 1 354 27 view .LVU616
 2311 000c C3F30D03 		ubfx	r3, r3, #0, #14
 2312              	.LVL160:
 354:src/xeq.c     **** }
 2313              		.loc 1 354 27 view .LVU617
 2314 0010 52F82100 		ldr	r0, [r2, r1, lsl #2]
 2315 0014 03F10043 		add	r3, r3, #-2147483648
 2316 0018 013B     		subs	r3, r3, #1
 355:src/xeq.c     **** 
 2317              		.loc 1 355 1 view .LVU618
 2318 001a 00EB4300 		add	r0, r0, r3, lsl #1
 2319 001e 7047     		bx	lr
 2320              	.L191:
 2321              		.align	2
 2322              	.L190:
 2323 0020 00000000 		.word	main_ram
 2324 0024 00000000 		.word	.LANCHOR0
 2325              		.cfi_endproc
 2326              	.LFE17:
 2328              		.section	.text.do_inc,"ax",%progbits
 2329              		.align	1
 2330              		.p2align 2,,3
 2331              		.global	do_inc
 2332              		.syntax unified
 2333              		.thumb
 2334              		.thumb_func
 2335              		.fpu fpv4-sp-d16
 2337              	do_inc:
 2338              	.LVL161:
 2339              	.LFB20:
 412:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2340              		.loc 1 412 54 is_stmt 1 view -0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 16
 2343              		@ frame_needed = 0, uses_anonymous_args = 0
 413:src/xeq.c     **** 	unsigned short int top = 0;
 2344              		.loc 1 413 2 view .LVU620
 412:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2345              		.loc 1 412 54 is_stmt 0 view .LVU621
 2346 0000 70B5     		push	{r4, r5, r6, lr}
 2347              		.cfi_def_cfa_offset 16
 2348              		.cfi_offset 4, -16
 2349              		.cfi_offset 5, -12
 2350              		.cfi_offset 6, -8
 2351              		.cfi_offset 14, -4
 2352 0002 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/ccQQPlfu.s 			page 141


 2353              		.cfi_def_cfa_offset 32
 412:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2354              		.loc 1 412 54 view .LVU622
 2355 0004 0546     		mov	r5, r0
 2356 0006 0191     		str	r1, [sp, #4]
 413:src/xeq.c     **** 	unsigned short int top = 0;
 2357              		.loc 1 413 42 view .LVU623
 2358 0008 FFF7FEFF 		bl	getprog
 2359              	.LVL162:
 417:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2360              		.loc 1 417 12 view .LVU624
 2361 000c 0D4E     		ldr	r6, .L196
 418:src/xeq.c     **** 
 2362              		.loc 1 418 11 view .LVU625
 2363 000e 0199     		ldr	r1, [sp, #4]
 413:src/xeq.c     **** 	unsigned short int top = 0;
 2364              		.loc 1 413 42 view .LVU626
 2365 0010 00F47040 		and	r0, r0, #61440
 413:src/xeq.c     **** 	unsigned short int top = 0;
 2366              		.loc 1 413 27 view .LVU627
 2367 0014 6C1C     		adds	r4, r5, #1
 414:src/xeq.c     **** 	unsigned short int bottom = 0;
 2368              		.loc 1 414 21 view .LVU628
 2369 0016 0023     		movs	r3, #0
 413:src/xeq.c     **** 	unsigned short int top = 0;
 2370              		.loc 1 413 27 view .LVU629
 2371 0018 B0F5704F 		cmp	r0, #61440
 2372 001c 08BF     		it	eq
 2373 001e 0134     		addeq	r4, r4, #1
 418:src/xeq.c     **** 
 2374              		.loc 1 418 11 view .LVU630
 2375 0020 0DF10E02 		add	r2, sp, #14
 2376 0024 2846     		mov	r0, r5
 417:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2377              		.loc 1 417 12 view .LVU631
 2378 0026 3360     		str	r3, [r6]
 414:src/xeq.c     **** 	unsigned short int bottom = 0;
 2379              		.loc 1 414 21 view .LVU632
 2380 0028 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 418:src/xeq.c     **** 
 2381              		.loc 1 418 11 view .LVU633
 2382 002c FFF7FEFF 		bl	find_section_bounds
 2383              	.LVL163:
 413:src/xeq.c     **** 	unsigned short int top = 0;
 2384              		.loc 1 413 27 view .LVU634
 2385 0030 A4B2     		uxth	r4, r4
 2386              	.LVL164:
 414:src/xeq.c     **** 	unsigned short int bottom = 0;
 2387              		.loc 1 414 2 is_stmt 1 view .LVU635
 415:src/xeq.c     **** 
 2388              		.loc 1 415 2 view .LVU636
 417:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2389              		.loc 1 417 2 view .LVU637
 418:src/xeq.c     **** 
 2390              		.loc 1 418 2 view .LVU638
 420:src/xeq.c     **** 		PcWrapped = 1;
 2391              		.loc 1 420 2 view .LVU639
ARM GAS  /tmp/ccQQPlfu.s 			page 142


 420:src/xeq.c     **** 		PcWrapped = 1;
 2392              		.loc 1 420 5 is_stmt 0 view .LVU640
 2393 0032 8442     		cmp	r4, r0
 421:src/xeq.c     **** 		return top;
 2394              		.loc 1 421 3 is_stmt 1 view .LVU641
 422:src/xeq.c     **** 	}
 2395              		.loc 1 422 10 is_stmt 0 view .LVU642
 2396 0034 85BF     		ittet	hi
 2397 0036 BDF80E00 		ldrhhi	r0, [sp, #14]
 2398              	.LVL165:
 421:src/xeq.c     **** 		return top;
 2399              		.loc 1 421 13 view .LVU643
 2400 003a 0123     		movhi	r3, #1
 424:src/xeq.c     **** }
 2401              		.loc 1 424 9 view .LVU644
 2402 003c 2046     		movls	r0, r4
 421:src/xeq.c     **** 		return top;
 2403              		.loc 1 421 13 view .LVU645
 2404 003e 3360     		strhi	r3, [r6]
 422:src/xeq.c     **** 	}
 2405              		.loc 1 422 3 is_stmt 1 view .LVU646
 424:src/xeq.c     **** }
 2406              		.loc 1 424 2 view .LVU647
 425:src/xeq.c     **** 
 2407              		.loc 1 425 1 is_stmt 0 view .LVU648
 2408 0040 04B0     		add	sp, sp, #16
 2409              		.cfi_def_cfa_offset 16
 2410              		@ sp needed
 2411 0042 70BD     		pop	{r4, r5, r6, pc}
 2412              	.LVL166:
 2413              	.L197:
 425:src/xeq.c     **** 
 2414              		.loc 1 425 1 view .LVU649
 2415              		.align	2
 2416              	.L196:
 2417 0044 00000000 		.word	PcWrapped
 2418              		.cfi_endproc
 2419              	.LFE20:
 2421              		.section	.text.user_pc.part.0,"ax",%progbits
 2422              		.align	1
 2423              		.p2align 2,,3
 2424              		.syntax unified
 2425              		.thumb
 2426              		.thumb_func
 2427              		.fpu fpv4-sp-d16
 2429              	user_pc.part.0:
 2430              	.LVL167:
 2431              	.LFB275:
 488:src/xeq.c     **** 	unsigned int n = 1;
 2432              		.loc 1 488 14 is_stmt 1 view -0
 2433              		.cfi_startproc
 2434              		@ args = 0, pretend = 0, frame = 0
 2435              		@ frame_needed = 0, uses_anonymous_args = 0
 499:src/xeq.c     **** 	while (base < pc) {
 2436              		.loc 1 499 2 view .LVU651
 499:src/xeq.c     **** 	while (base < pc) {
 2437              		.loc 1 499 9 is_stmt 0 view .LVU652
ARM GAS  /tmp/ccQQPlfu.s 			page 143


 2438 0000 20F47F53 		bic	r3, r0, #16320
 2439 0004 23F03F03 		bic	r3, r3, #63
 488:src/xeq.c     **** 	unsigned int n = 1;
 2440              		.loc 1 488 14 view .LVU653
 2441 0008 70B5     		push	{r4, r5, r6, lr}
 2442              		.cfi_def_cfa_offset 16
 2443              		.cfi_offset 4, -16
 2444              		.cfi_offset 5, -12
 2445              		.cfi_offset 6, -8
 2446              		.cfi_offset 14, -4
 488:src/xeq.c     **** 	unsigned int n = 1;
 2447              		.loc 1 488 14 view .LVU654
 2448 000a 0546     		mov	r5, r0
 499:src/xeq.c     **** 	while (base < pc) {
 2449              		.loc 1 499 7 view .LVU655
 2450 000c 581C     		adds	r0, r3, #1
 2451              	.LVL168:
 500:src/xeq.c     **** 		base = do_inc(base, 0);
 2452              		.loc 1 500 2 is_stmt 1 view .LVU656
 500:src/xeq.c     **** 		base = do_inc(base, 0);
 2453              		.loc 1 500 8 view .LVU657
 2454 000e 8542     		cmp	r5, r0
 2455 0010 0ED9     		bls	.L201
 2456 0012 084E     		ldr	r6, .L205
 489:src/xeq.c     **** 	unsigned int base;
 2457              		.loc 1 489 15 is_stmt 0 view .LVU658
 2458 0014 0124     		movs	r4, #1
 2459 0016 03E0     		b	.L200
 2460              	.LVL169:
 2461              	.L204:
 500:src/xeq.c     **** 		base = do_inc(base, 0);
 2462              		.loc 1 500 8 view .LVU659
 2463 0018 8542     		cmp	r5, r0
 504:src/xeq.c     **** 	}
 2464              		.loc 1 504 3 view .LVU660
 2465 001a 04F10104 		add	r4, r4, #1
 2466              	.LVL170:
 500:src/xeq.c     **** 		base = do_inc(base, 0);
 2467              		.loc 1 500 8 is_stmt 1 view .LVU661
 2468 001e 05D9     		bls	.L198
 2469              	.LVL171:
 2470              	.L200:
 501:src/xeq.c     **** 		if (PcWrapped)
 2471              		.loc 1 501 3 view .LVU662
 501:src/xeq.c     **** 		if (PcWrapped)
 2472              		.loc 1 501 10 is_stmt 0 view .LVU663
 2473 0020 0021     		movs	r1, #0
 2474 0022 FFF7FEFF 		bl	do_inc
 2475              	.LVL172:
 504:src/xeq.c     **** 	}
 2476              		.loc 1 504 3 is_stmt 1 view .LVU664
 502:src/xeq.c     **** 			return n;
 2477              		.loc 1 502 6 is_stmt 0 view .LVU665
 2478 0026 3368     		ldr	r3, [r6]
 2479              	.LVL173:
 502:src/xeq.c     **** 			return n;
 2480              		.loc 1 502 3 is_stmt 1 view .LVU666
ARM GAS  /tmp/ccQQPlfu.s 			page 144


 502:src/xeq.c     **** 			return n;
 2481              		.loc 1 502 6 is_stmt 0 view .LVU667
 2482 0028 002B     		cmp	r3, #0
 2483 002a F5D0     		beq	.L204
 2484              	.LVL174:
 2485              	.L198:
 507:src/xeq.c     **** 
 2486              		.loc 1 507 1 view .LVU668
 2487 002c 2046     		mov	r0, r4
 2488              	.LVL175:
 507:src/xeq.c     **** 
 2489              		.loc 1 507 1 view .LVU669
 2490 002e 70BD     		pop	{r4, r5, r6, pc}
 2491              	.LVL176:
 2492              	.L201:
 489:src/xeq.c     **** 	unsigned int base;
 2493              		.loc 1 489 15 view .LVU670
 2494 0030 0124     		movs	r4, #1
 2495 0032 FBE7     		b	.L198
 2496              	.L206:
 2497              		.align	2
 2498              	.L205:
 2499 0034 00000000 		.word	PcWrapped
 2500              		.cfi_endproc
 2501              	.LFE275:
 2503              		.section	.rodata.print_step.str1.4,"aMS",%progbits,1
 2504              		.align	2
 2505              	.LC0:
 2506 0000 3030303A 		.ascii	"000:\000"
 2506      00
 2507              		.section	.text.print_step,"ax",%progbits
 2508              		.align	1
 2509              		.p2align 2,,3
 2510              		.syntax unified
 2511              		.thumb
 2512              		.thumb_func
 2513              		.fpu fpv4-sp-d16
 2515              	print_step:
 2516              	.LVL177:
 2517              	.LFB233:
4412:src/xeq.c     **** 	char buf[16];
 2518              		.loc 1 4412 41 is_stmt 1 view -0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 16
 2521              		@ frame_needed = 0, uses_anonymous_args = 0
4413:src/xeq.c     **** 	const unsigned int pc = state_pc();
 2522              		.loc 1 4413 2 view .LVU672
4414:src/xeq.c     **** 	char *p = TraceBuffer;
 2523              		.loc 1 4414 2 view .LVU673
4414:src/xeq.c     **** 	char *p = TraceBuffer;
 2524              		.loc 1 4414 26 is_stmt 0 view .LVU674
 2525 0000 254B     		ldr	r3, .L221
 2526 0002 1B68     		ldr	r3, [r3]
4412:src/xeq.c     **** 	char buf[16];
 2527              		.loc 1 4412 41 view .LVU675
 2528 0004 F0B5     		push	{r4, r5, r6, r7, lr}
 2529              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccQQPlfu.s 			page 145


 2530              		.cfi_offset 4, -20
 2531              		.cfi_offset 5, -16
 2532              		.cfi_offset 6, -12
 2533              		.cfi_offset 7, -8
 2534              		.cfi_offset 14, -4
4414:src/xeq.c     **** 	char *p = TraceBuffer;
 2535              		.loc 1 4414 26 view .LVU676
 2536 0006 B3F8E047 		ldrh	r4, [r3, #2016]
 2537              	.LVL178:
4415:src/xeq.c     **** 
 2538              		.loc 1 4415 2 is_stmt 1 view .LVU677
4417:src/xeq.c     **** 		*p++ = 'x';
 2539              		.loc 1 4417 2 view .LVU678
4417:src/xeq.c     **** 		*p++ = 'x';
 2540              		.loc 1 4417 6 is_stmt 0 view .LVU679
 2541 000a A10B     		lsrs	r1, r4, #14
4417:src/xeq.c     **** 		*p++ = 'x';
 2542              		.loc 1 4417 5 view .LVU680
 2543 000c 0329     		cmp	r1, #3
4412:src/xeq.c     **** 	char buf[16];
 2544              		.loc 1 4412 41 view .LVU681
 2545 000e 85B0     		sub	sp, sp, #20
 2546              		.cfi_def_cfa_offset 40
4412:src/xeq.c     **** 	char buf[16];
 2547              		.loc 1 4412 41 view .LVU682
 2548 0010 0546     		mov	r5, r0
4417:src/xeq.c     **** 		*p++ = 'x';
 2549              		.loc 1 4417 5 view .LVU683
 2550 0012 39D0     		beq	.L218
4419:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2551              		.loc 1 4419 9 is_stmt 1 view .LVU684
4419:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2552              		.loc 1 4419 12 is_stmt 0 view .LVU685
 2553 0014 14F4404F 		tst	r4, #49152
 2554 0018 0FD1     		bne	.L219
4415:src/xeq.c     **** 
 2555              		.loc 1 4415 8 view .LVU686
 2556 001a 204E     		ldr	r6, .L221+4
 2557 001c 3746     		mov	r7, r6
 2558              	.LVL179:
4423:src/xeq.c     **** 		scopy(p, "000:");
 2559              		.loc 1 4423 2 is_stmt 1 view .LVU687
4423:src/xeq.c     **** 		scopy(p, "000:");
 2560              		.loc 1 4423 5 is_stmt 0 view .LVU688
 2561 001e BCB9     		cbnz	r4, .L220
 2562              	.LVL180:
 2563              	.L212:
4424:src/xeq.c     **** 	else {
 2564              		.loc 1 4424 3 is_stmt 1 view .LVU689
 2565 0020 1F49     		ldr	r1, .L221+8
 2566 0022 3846     		mov	r0, r7
 2567 0024 FFF7FEFF 		bl	scopy
 2568              	.LVL181:
 2569              	.L211:
4432:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2570              		.loc 1 4432 2 view .LVU690
4432:src/xeq.c     **** 	DispMsg = TraceBuffer;
ARM GAS  /tmp/ccQQPlfu.s 			page 146


 2571              		.loc 1 4432 20 is_stmt 0 view .LVU691
 2572 0028 1E4A     		ldr	r2, .L221+12
4433:src/xeq.c     **** }
 2573              		.loc 1 4433 10 view .LVU692
 2574 002a 1F49     		ldr	r1, .L221+16
4432:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2575              		.loc 1 4432 20 view .LVU693
 2576 002c 937D     		ldrb	r3, [r2, #22]	@ zero_extendqisi2
4433:src/xeq.c     **** }
 2577              		.loc 1 4433 10 view .LVU694
 2578 002e 0E60     		str	r6, [r1]
4432:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2579              		.loc 1 4432 20 view .LVU695
 2580 0030 43F08003 		orr	r3, r3, #128
 2581 0034 9375     		strb	r3, [r2, #22]
4433:src/xeq.c     **** }
 2582              		.loc 1 4433 2 is_stmt 1 view .LVU696
4434:src/xeq.c     **** 
 2583              		.loc 1 4434 1 is_stmt 0 view .LVU697
 2584 0036 05B0     		add	sp, sp, #20
 2585              		.cfi_remember_state
 2586              		.cfi_def_cfa_offset 20
 2587              		@ sp needed
 2588 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
 2589              	.LVL182:
 2590              	.L219:
 2591              		.cfi_restore_state
4420:src/xeq.c     **** 		*p++ = ' ';
 2592              		.loc 1 4420 3 is_stmt 1 view .LVU698
4420:src/xeq.c     **** 		*p++ = ' ';
 2593              		.loc 1 4420 7 is_stmt 0 view .LVU699
 2594 003a 1848     		ldr	r0, .L221+4
 2595              	.LVL183:
4420:src/xeq.c     **** 		*p++ = ' ';
 2596              		.loc 1 4420 7 view .LVU700
 2597 003c 0122     		movs	r2, #1
 2598 003e 0646     		mov	r6, r0
 2599 0040 FFF7FEFF 		bl	num_arg_0
 2600              	.LVL184:
4421:src/xeq.c     **** 	}
 2601              		.loc 1 4421 3 is_stmt 1 view .LVU701
4421:src/xeq.c     **** 	}
 2602              		.loc 1 4421 5 is_stmt 0 view .LVU702
 2603 0044 0746     		mov	r7, r0
 2604              	.LVL185:
4421:src/xeq.c     **** 	}
 2605              		.loc 1 4421 8 view .LVU703
 2606 0046 2023     		movs	r3, #32
 2607 0048 07F8013B 		strb	r3, [r7], #1
 2608              	.LVL186:
4423:src/xeq.c     **** 		scopy(p, "000:");
 2609              		.loc 1 4423 2 is_stmt 1 view .LVU704
4423:src/xeq.c     **** 		scopy(p, "000:");
 2610              		.loc 1 4423 5 is_stmt 0 view .LVU705
 2611 004c 002C     		cmp	r4, #0
 2612 004e E7D0     		beq	.L212
 2613              	.L220:
ARM GAS  /tmp/ccQQPlfu.s 			page 147


 2614              	.LVL187:
 2615              	.LBB1511:
 2616              	.LBB1512:
4423:src/xeq.c     **** 		scopy(p, "000:");
 2617              		.loc 1 4423 5 view .LVU706
 2618 0050 2046     		mov	r0, r4
 2619 0052 FFF7FEFF 		bl	user_pc.part.0
 2620              	.LVL188:
 2621 0056 0146     		mov	r1, r0
 2622              	.L209:
4423:src/xeq.c     **** 		scopy(p, "000:");
 2623              		.loc 1 4423 5 view .LVU707
 2624              	.LBE1512:
 2625              	.LBE1511:
4426:src/xeq.c     **** 		*p++ = ':';
 2626              		.loc 1 4426 7 view .LVU708
 2627 0058 0322     		movs	r2, #3
 2628 005a 3846     		mov	r0, r7
 2629 005c FFF7FEFF 		bl	num_arg_0
 2630              	.LVL189:
4427:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2631              		.loc 1 4427 8 view .LVU709
 2632 0060 0746     		mov	r7, r0
 2633 0062 3A23     		movs	r3, #58
 2634 0064 07F8013B 		strb	r3, [r7], #1
4426:src/xeq.c     **** 		*p++ = ':';
 2635              		.loc 1 4426 7 view .LVU710
 2636 0068 0446     		mov	r4, r0
 2637              	.LVL190:
4427:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2638              		.loc 1 4427 3 is_stmt 1 view .LVU711
4428:src/xeq.c     **** 		if (*p == '?')
 2639              		.loc 1 4428 3 view .LVU712
 2640 006a 6946     		mov	r1, sp
 2641 006c 2846     		mov	r0, r5
 2642 006e FFF7FEFF 		bl	prt
 2643              	.LVL191:
 2644 0072 0022     		movs	r2, #0
 2645 0074 0146     		mov	r1, r0
 2646 0076 3846     		mov	r0, r7
 2647 0078 FFF7FEFF 		bl	scopy_char
 2648              	.LVL192:
4429:src/xeq.c     **** 			*p = '\0';
 2649              		.loc 1 4429 3 view .LVU713
4429:src/xeq.c     **** 			*p = '\0';
 2650              		.loc 1 4429 6 is_stmt 0 view .LVU714
 2651 007c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2652 007e 3F2B     		cmp	r3, #63
4430:src/xeq.c     **** 	}
 2653              		.loc 1 4430 4 is_stmt 1 view .LVU715
4430:src/xeq.c     **** 	}
 2654              		.loc 1 4430 7 is_stmt 0 view .LVU716
 2655 0080 04BF     		itt	eq
 2656 0082 0023     		moveq	r3, #0
 2657 0084 6370     		strbeq	r3, [r4, #1]
 2658 0086 CFE7     		b	.L211
 2659              	.LVL193:
ARM GAS  /tmp/ccQQPlfu.s 			page 148


 2660              	.L218:
4418:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2661              		.loc 1 4418 3 is_stmt 1 view .LVU717
4418:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2662              		.loc 1 4418 8 is_stmt 0 view .LVU718
 2663 0088 044E     		ldr	r6, .L221+4
 2664 008a 3746     		mov	r7, r6
 2665 008c 7823     		movs	r3, #120
 2666 008e 07F8013B 		strb	r3, [r7], #1
4423:src/xeq.c     **** 		scopy(p, "000:");
 2667              		.loc 1 4423 2 is_stmt 1 view .LVU719
4426:src/xeq.c     **** 		*p++ = ':';
 2668              		.loc 1 4426 3 view .LVU720
 2669              	.LBB1514:
 2670              	.LBI1511:
 488:src/xeq.c     **** 	unsigned int n = 1;
 2671              		.loc 1 488 14 view .LVU721
 2672              	.LBB1513:
 489:src/xeq.c     **** 	unsigned int base;
 2673              		.loc 1 489 2 view .LVU722
 2674              	.LVL194:
 490:src/xeq.c     **** 
 2675              		.loc 1 490 2 view .LVU723
 493:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 2676              		.loc 1 493 2 view .LVU724
 494:src/xeq.c     **** #else
 2677              		.loc 1 494 3 view .LVU725
 494:src/xeq.c     **** #else
 2678              		.loc 1 494 24 is_stmt 0 view .LVU726
 2679 0092 C4F30D01 		ubfx	r1, r4, #0, #14
 2680 0096 DFE7     		b	.L209
 2681              	.L222:
 2682              		.align	2
 2683              	.L221:
 2684 0098 00000000 		.word	main_ram
 2685 009c 00000000 		.word	TraceBuffer
 2686 00a0 00000000 		.word	.LC0
 2687 00a4 00000000 		.word	StateWhileOn
 2688 00a8 00000000 		.word	DispMsg
 2689              	.LBE1513:
 2690              	.LBE1514:
 2691              		.cfi_endproc
 2692              	.LFE233:
 2694              		.section	.text.do_dec,"ax",%progbits
 2695              		.align	1
 2696              		.p2align 2,,3
 2697              		.global	do_dec
 2698              		.syntax unified
 2699              		.thumb
 2700              		.thumb_func
 2701              		.fpu fpv4-sp-d16
 2703              	do_dec:
 2704              	.LVL195:
 2705              	.LFB21:
 431:src/xeq.c     **** 	unsigned short int top = 0;
 2706              		.loc 1 431 48 is_stmt 1 view -0
 2707              		.cfi_startproc
ARM GAS  /tmp/ccQQPlfu.s 			page 149


 2708              		@ args = 0, pretend = 0, frame = 8
 2709              		@ frame_needed = 0, uses_anonymous_args = 0
 432:src/xeq.c     **** 	unsigned short int bottom = 0;
 2710              		.loc 1 432 2 view .LVU728
 431:src/xeq.c     **** 	unsigned short int top = 0;
 2711              		.loc 1 431 48 is_stmt 0 view .LVU729
 2712 0000 70B5     		push	{r4, r5, r6, lr}
 2713              		.cfi_def_cfa_offset 16
 2714              		.cfi_offset 4, -16
 2715              		.cfi_offset 5, -12
 2716              		.cfi_offset 6, -8
 2717              		.cfi_offset 14, -4
 435:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2718              		.loc 1 435 12 view .LVU730
 2719 0002 114E     		ldr	r6, .L228
 431:src/xeq.c     **** 	unsigned short int top = 0;
 2720              		.loc 1 431 48 view .LVU731
 2721 0004 82B0     		sub	sp, sp, #8
 2722              		.cfi_def_cfa_offset 24
 432:src/xeq.c     **** 	unsigned short int bottom = 0;
 2723              		.loc 1 432 21 view .LVU732
 2724 0006 0023     		movs	r3, #0
 436:src/xeq.c     **** 
 2725              		.loc 1 436 11 view .LVU733
 2726 0008 0DF10602 		add	r2, sp, #6
 431:src/xeq.c     **** 	unsigned short int top = 0;
 2727              		.loc 1 431 48 view .LVU734
 2728 000c 0546     		mov	r5, r0
 435:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2729              		.loc 1 435 12 view .LVU735
 2730 000e 3360     		str	r3, [r6]
 432:src/xeq.c     **** 	unsigned short int bottom = 0;
 2731              		.loc 1 432 21 view .LVU736
 2732 0010 ADF80630 		strh	r3, [sp, #6]	@ movhi
 433:src/xeq.c     **** 
 2733              		.loc 1 433 2 is_stmt 1 view .LVU737
 2734              	.LVL196:
 435:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2735              		.loc 1 435 2 view .LVU738
 436:src/xeq.c     **** 
 2736              		.loc 1 436 2 view .LVU739
 436:src/xeq.c     **** 
 2737              		.loc 1 436 11 is_stmt 0 view .LVU740
 2738 0014 FFF7FEFF 		bl	find_section_bounds
 2739              	.LVL197:
 438:src/xeq.c     **** 		PcWrapped = 1;
 2740              		.loc 1 438 9 view .LVU741
 2741 0018 BDF80630 		ldrh	r3, [sp, #6]
 2742              	.LVL198:
 438:src/xeq.c     **** 		PcWrapped = 1;
 2743              		.loc 1 438 2 is_stmt 1 view .LVU742
 438:src/xeq.c     **** 		PcWrapped = 1;
 2744              		.loc 1 438 5 is_stmt 0 view .LVU743
 2745 001c AB42     		cmp	r3, r5
 439:src/xeq.c     **** 		pc = bottom;
 2746              		.loc 1 439 13 view .LVU744
 2747 001e 25BF     		ittet	cs
ARM GAS  /tmp/ccQQPlfu.s 			page 150


 2748 0020 0122     		movcs	r2, #1
 2749 0022 0446     		movcs	r4, r0
 439:src/xeq.c     **** 		pc = bottom;
 2750              		.loc 1 439 3 is_stmt 1 view .LVU745
 443:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2751              		.loc 1 443 3 is_stmt 0 view .LVU746
 2752 0024 05F1FF34 		addcc	r4, r5, #-1
 439:src/xeq.c     **** 		pc = bottom;
 2753              		.loc 1 439 13 view .LVU747
 2754 0028 3260     		strcs	r2, [r6]
 440:src/xeq.c     **** 	}
 2755              		.loc 1 440 3 is_stmt 1 view .LVU748
 2756              	.LVL199:
 443:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2757              		.loc 1 443 3 view .LVU749
 444:src/xeq.c     **** 		--pc;
 2758              		.loc 1 444 2 view .LVU750
 444:src/xeq.c     **** 		--pc;
 2759              		.loc 1 444 5 is_stmt 0 view .LVU751
 2760 002a A342     		cmp	r3, r4
 2761 002c 09D2     		bcs	.L223
 444:src/xeq.c     **** 		--pc;
 2762              		.loc 1 444 18 discriminator 1 view .LVU752
 2763 002e 651E     		subs	r5, r4, #1
 2764 0030 2846     		mov	r0, r5
 2765              	.LVL200:
 444:src/xeq.c     **** 		--pc;
 2766              		.loc 1 444 18 discriminator 1 view .LVU753
 2767 0032 FFF7FEFF 		bl	getprog
 2768              	.LVL201:
 2769 0036 00F47040 		and	r0, r0, #61440
 445:src/xeq.c     **** 	return pc;
 2770              		.loc 1 445 3 discriminator 1 view .LVU754
 2771 003a B0F5704F 		cmp	r0, #61440
 2772 003e 08BF     		it	eq
 2773 0040 2C46     		moveq	r4, r5
 2774              	.LVL202:
 2775              	.L223:
 447:src/xeq.c     **** 
 2776              		.loc 1 447 1 view .LVU755
 2777 0042 2046     		mov	r0, r4
 2778 0044 02B0     		add	sp, sp, #8
 2779              		.cfi_def_cfa_offset 16
 2780              		@ sp needed
 2781 0046 70BD     		pop	{r4, r5, r6, pc}
 2782              	.L229:
 2783              		.align	2
 2784              	.L228:
 2785 0048 00000000 		.word	PcWrapped
 2786              		.cfi_endproc
 2787              	.LFE21:
 2789              		.section	.text.update_program_bounds,"ax",%progbits
 2790              		.align	1
 2791              		.p2align 2,,3
 2792              		.global	update_program_bounds
 2793              		.syntax unified
 2794              		.thumb
ARM GAS  /tmp/ccQQPlfu.s 			page 151


 2795              		.thumb_func
 2796              		.fpu fpv4-sp-d16
 2798              	update_program_bounds:
 2799              	.LVL203:
 2800              	.LFB24:
 464:src/xeq.c     **** 	unsigned int pc = state_pc();
 2801              		.loc 1 464 45 is_stmt 1 view -0
 2802              		.cfi_startproc
 2803              		@ args = 0, pretend = 0, frame = 0
 2804              		@ frame_needed = 0, uses_anonymous_args = 0
 465:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2805              		.loc 1 465 2 view .LVU757
 464:src/xeq.c     **** 	unsigned int pc = state_pc();
 2806              		.loc 1 464 45 is_stmt 0 view .LVU758
 2807 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2808              		.cfi_def_cfa_offset 24
 2809              		.cfi_offset 3, -24
 2810              		.cfi_offset 4, -20
 2811              		.cfi_offset 5, -16
 2812              		.cfi_offset 6, -12
 2813              		.cfi_offset 7, -8
 2814              		.cfi_offset 14, -4
 465:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2815              		.loc 1 465 20 view .LVU759
 2816 0002 224F     		ldr	r7, .L251
 2817 0004 3D68     		ldr	r5, [r7]
 465:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2818              		.loc 1 465 15 view .LVU760
 2819 0006 B5F8E047 		ldrh	r4, [r5, #2016]
 2820              	.LVL204:
 466:src/xeq.c     **** 		State.pc = pc = 1;
 2821              		.loc 1 466 2 is_stmt 1 view .LVU761
 466:src/xeq.c     **** 		State.pc = pc = 1;
 2822              		.loc 1 466 5 is_stmt 0 view .LVU762
 2823 000a 34B9     		cbnz	r4, .L231
 466:src/xeq.c     **** 		State.pc = pc = 1;
 2824              		.loc 1 466 14 discriminator 1 view .LVU763
 2825 000c 204B     		ldr	r3, .L251+4
 2826 000e 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2827 0010 5B06     		lsls	r3, r3, #25
 467:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2828              		.loc 1 467 3 is_stmt 1 discriminator 1 view .LVU764
 2829              	.LVL205:
 467:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2830              		.loc 1 467 12 is_stmt 0 discriminator 1 view .LVU765
 2831 0012 44BF     		itt	mi
 2832 0014 0124     		movmi	r4, #1
 2833 0016 A5F8E047 		strhmi	r4, [r5, #2016]	@ movhi
 2834              	.LVL206:
 2835              	.L231:
 468:src/xeq.c     **** 		return;
 2836              		.loc 1 468 2 is_stmt 1 view .LVU766
 468:src/xeq.c     **** 		return;
 2837              		.loc 1 468 5 is_stmt 0 view .LVU767
 2838 001a 18B9     		cbnz	r0, .L232
 468:src/xeq.c     **** 		return;
 2839              		.loc 1 468 23 discriminator 1 view .LVU768
ARM GAS  /tmp/ccQQPlfu.s 			page 152


 2840 001c B5F8EC37 		ldrh	r3, [r5, #2028]
 468:src/xeq.c     **** 		return;
 2841              		.loc 1 468 14 discriminator 1 view .LVU769
 2842 0020 A342     		cmp	r3, r4
 2843 0022 2DD9     		bls	.L248
 2844              	.L232:
 470:src/xeq.c     **** 		ProgEnd = pc;
 2845              		.loc 1 470 2 is_stmt 1 view .LVU770
 470:src/xeq.c     **** 		ProgEnd = pc;
 2846              		.loc 1 470 17 is_stmt 0 view .LVU771
 2847 0024 1B4E     		ldr	r6, .L251+8
 2848 0026 0023     		movs	r3, #0
 2849 0028 3360     		str	r3, [r6]
 470:src/xeq.c     **** 		ProgEnd = pc;
 2850              		.loc 1 470 22 is_stmt 1 view .LVU772
 2851 002a 05E0     		b	.L236
 2852              	.LVL207:
 2853              	.L249:
 470:src/xeq.c     **** 		ProgEnd = pc;
 2854              		.loc 1 470 39 is_stmt 0 discriminator 2 view .LVU773
 2855 002c FFF7FEFF 		bl	do_inc
 2856              	.LVL208:
 470:src/xeq.c     **** 		ProgEnd = pc;
 2857              		.loc 1 470 2 discriminator 2 view .LVU774
 2858 0030 3368     		ldr	r3, [r6]
 2859 0032 3D68     		ldr	r5, [r7]
 470:src/xeq.c     **** 		ProgEnd = pc;
 2860              		.loc 1 470 39 discriminator 2 view .LVU775
 2861 0034 0446     		mov	r4, r0
 2862              	.LVL209:
 470:src/xeq.c     **** 		ProgEnd = pc;
 2863              		.loc 1 470 22 is_stmt 1 discriminator 2 view .LVU776
 470:src/xeq.c     **** 		ProgEnd = pc;
 2864              		.loc 1 470 2 is_stmt 0 discriminator 2 view .LVU777
 2865 0036 5BB9     		cbnz	r3, .L234
 2866              	.LVL210:
 2867              	.L236:
 471:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2868              		.loc 1 471 3 is_stmt 1 view .LVU778
 471:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2869              		.loc 1 471 11 is_stmt 0 view .LVU779
 2870 0038 A5F8EE47 		strh	r4, [r5, #2030]	@ movhi
 472:src/xeq.c     **** 			break;
 2871              		.loc 1 472 3 is_stmt 1 view .LVU780
 472:src/xeq.c     **** 			break;
 2872              		.loc 1 472 7 is_stmt 0 view .LVU781
 2873 003c 2046     		mov	r0, r4
 2874 003e FFF7FEFF 		bl	getprog
 2875              	.LVL211:
 470:src/xeq.c     **** 		ProgEnd = pc;
 2876              		.loc 1 470 34 is_stmt 1 view .LVU782
 472:src/xeq.c     **** 			break;
 2877              		.loc 1 472 7 is_stmt 0 view .LVU783
 2878 0042 0346     		mov	r3, r0
 472:src/xeq.c     **** 			break;
 2879              		.loc 1 472 6 view .LVU784
 2880 0044 B3F59D7F 		cmp	r3, #314
ARM GAS  /tmp/ccQQPlfu.s 			page 153


 470:src/xeq.c     **** 		ProgEnd = pc;
 2881              		.loc 1 470 39 view .LVU785
 2882 0048 4FF00001 		mov	r1, #0
 2883 004c 2046     		mov	r0, r4
 472:src/xeq.c     **** 			break;
 2884              		.loc 1 472 6 view .LVU786
 2885 004e EDD1     		bne	.L249
 2886              	.LVL212:
 2887              	.L234:
 476:src/xeq.c     **** 		const unsigned int opc = pc;
 2888              		.loc 1 476 2 is_stmt 1 view .LVU787
 476:src/xeq.c     **** 		const unsigned int opc = pc;
 2889              		.loc 1 476 10 is_stmt 0 view .LVU788
 2890 0050 B5F8E047 		ldrh	r4, [r5, #2016]
 2891              	.LVL213:
 476:src/xeq.c     **** 		const unsigned int opc = pc;
 2892              		.loc 1 476 10 view .LVU789
 2893 0054 04E0     		b	.L238
 2894              	.LVL214:
 2895              	.L250:
 2896              	.LBB1515:
 479:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2897              		.loc 1 479 20 discriminator 1 view .LVU790
 2898 0056 FFF7FEFF 		bl	getprog
 2899              	.LVL215:
 479:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2900              		.loc 1 479 17 discriminator 1 view .LVU791
 2901 005a B0F59D7F 		cmp	r0, #314
 2902 005e 08D0     		beq	.L237
 2903              	.LVL216:
 2904              	.L238:
 477:src/xeq.c     **** 		pc = do_dec(opc, 0);
 2905              		.loc 1 477 3 is_stmt 1 view .LVU792
 478:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2906              		.loc 1 478 3 view .LVU793
 478:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2907              		.loc 1 478 8 is_stmt 0 view .LVU794
 2908 0060 2046     		mov	r0, r4
 2909 0062 0021     		movs	r1, #0
 2910 0064 FFF7FEFF 		bl	do_dec
 2911              	.LVL217:
 479:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2912              		.loc 1 479 6 view .LVU795
 2913 0068 3368     		ldr	r3, [r6]
 2914 006a 2546     		mov	r5, r4
 478:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2915              		.loc 1 478 8 view .LVU796
 2916 006c 0446     		mov	r4, r0
 2917              	.LVL218:
 479:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2918              		.loc 1 479 3 is_stmt 1 view .LVU797
 479:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2919              		.loc 1 479 6 is_stmt 0 view .LVU798
 2920 006e 002B     		cmp	r3, #0
 2921 0070 F1D0     		beq	.L250
 2922              	.LVL219:
 2923              	.L237:
ARM GAS  /tmp/ccQQPlfu.s 			page 154


 480:src/xeq.c     **** 			break;
 2924              		.loc 1 480 4 is_stmt 1 view .LVU799
 480:src/xeq.c     **** 			break;
 2925              		.loc 1 480 14 is_stmt 0 view .LVU800
 2926 0072 3B68     		ldr	r3, [r7]
 2927 0074 012D     		cmp	r5, #1
 2928 0076 38BF     		it	cc
 2929 0078 0125     		movcc	r5, #1
 2930              	.LVL220:
 480:src/xeq.c     **** 			break;
 2931              		.loc 1 480 14 view .LVU801
 2932 007a A3F8EC57 		strh	r5, [r3, #2028]	@ movhi
 481:src/xeq.c     **** 		}
 2933              		.loc 1 481 4 is_stmt 1 view .LVU802
 2934              	.LBE1515:
 484:src/xeq.c     **** 
 2935              		.loc 1 484 1 is_stmt 0 view .LVU803
 2936 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2937              	.LVL221:
 2938              	.L248:
 468:src/xeq.c     **** 		return;
 2939              		.loc 1 468 42 discriminator 2 view .LVU804
 2940 0080 B5F8EE37 		ldrh	r3, [r5, #2030]
 468:src/xeq.c     **** 		return;
 2941              		.loc 1 468 33 discriminator 2 view .LVU805
 2942 0084 A342     		cmp	r3, r4
 2943 0086 CDD3     		bcc	.L232
 484:src/xeq.c     **** 
 2944              		.loc 1 484 1 view .LVU806
 2945 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2946              	.LVL222:
 2947              	.L252:
 484:src/xeq.c     **** 
 2948              		.loc 1 484 1 view .LVU807
 2949 008a 00BF     		.align	2
 2950              	.L251:
 2951 008c 00000000 		.word	main_ram
 2952 0090 00000000 		.word	StateWhileOn
 2953 0094 00000000 		.word	PcWrapped
 2954              		.cfi_endproc
 2955              	.LFE24:
 2957              		.section	.text.set_pc,"ax",%progbits
 2958              		.align	1
 2959              		.p2align 2,,3
 2960              		.global	set_pc
 2961              		.syntax unified
 2962              		.thumb
 2963              		.thumb_func
 2964              		.fpu fpv4-sp-d16
 2966              	set_pc:
 2967              	.LVL223:
 2968              	.LFB18:
 361:src/xeq.c     **** 	if (isRAM(pc)) {
 2969              		.loc 1 361 30 is_stmt 1 view -0
 2970              		.cfi_startproc
 2971              		@ args = 0, pretend = 0, frame = 0
 2972              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQQPlfu.s 			page 155


 362:src/xeq.c     **** 		if (pc > ProgSize)
 2973              		.loc 1 362 2 view .LVU809
 362:src/xeq.c     **** 		if (pc > ProgSize)
 2974              		.loc 1 362 5 is_stmt 0 view .LVU810
 2975 0000 10F4704F 		tst	r0, #61440
 361:src/xeq.c     **** 	if (isRAM(pc)) {
 2976              		.loc 1 361 30 view .LVU811
 2977 0004 38B5     		push	{r3, r4, r5, lr}
 2978              		.cfi_def_cfa_offset 16
 2979              		.cfi_offset 3, -16
 2980              		.cfi_offset 4, -12
 2981              		.cfi_offset 5, -8
 2982              		.cfi_offset 14, -4
 361:src/xeq.c     **** 	if (isRAM(pc)) {
 2983              		.loc 1 361 30 view .LVU812
 2984 0006 0446     		mov	r4, r0
 362:src/xeq.c     **** 		if (pc > ProgSize)
 2985              		.loc 1 362 5 view .LVU813
 2986 0008 15D1     		bne	.L254
 363:src/xeq.c     **** 			pc = ProgSize;
 2987              		.loc 1 363 3 is_stmt 1 view .LVU814
 363:src/xeq.c     **** 			pc = ProgSize;
 2988              		.loc 1 363 12 is_stmt 0 view .LVU815
 2989 000a 264B     		ldr	r3, .L262
 2990 000c 1B68     		ldr	r3, [r3]
 2991 000e 5A88     		ldrh	r2, [r3, #2]
 2992 0010 9042     		cmp	r0, r2
 2993 0012 28BF     		it	cs
 2994 0014 1446     		movcs	r4, r2
 2995              	.LVL224:
 365:src/xeq.c     **** 			pc--;
 2996              		.loc 1 365 3 is_stmt 1 view .LVU816
 365:src/xeq.c     **** 			pc--;
 2997              		.loc 1 365 6 is_stmt 0 view .LVU817
 2998 0016 012C     		cmp	r4, #1
 2999 0018 06D9     		bls	.L255
 365:src/xeq.c     **** 			pc--;
 3000              		.loc 1 365 14 discriminator 1 view .LVU818
 3001 001a 33F81420 		ldrh	r2, [r3, r4, lsl #1]
 3002 001e 02F47042 		and	r2, r2, #61440
 3003 0022 B2F5704F 		cmp	r2, #61440
 3004 0026 35D0     		beq	.L261
 3005              	.L255:
 374:src/xeq.c     **** }
 3006              		.loc 1 374 2 is_stmt 1 view .LVU819
 3007              	.LVL225:
 3008              	.LBB1516:
 3009              	.LBI1516:
 282:src/xeq.c     **** 	State.pc = pc;
 3010              		.loc 1 282 13 view .LVU820
 3011              	.LBB1517:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3012              		.loc 1 283 2 view .LVU821
 283:src/xeq.c     **** 	update_program_bounds(0);
 3013              		.loc 1 283 11 is_stmt 0 view .LVU822
 3014 0028 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 156


 3015              		.loc 1 284 2 is_stmt 1 view .LVU823
 3016 002c 0020     		movs	r0, #0
 3017              	.LBE1517:
 3018              	.LBE1516:
 375:src/xeq.c     **** 
 3019              		.loc 1 375 1 is_stmt 0 view .LVU824
 3020 002e BDE83840 		pop	{r3, r4, r5, lr}
 3021              		.cfi_remember_state
 3022              		.cfi_restore 14
 3023              		.cfi_restore 5
 3024              		.cfi_restore 4
 3025              		.cfi_restore 3
 3026              		.cfi_def_cfa_offset 0
 3027              	.LVL226:
 3028              	.LBB1525:
 3029              	.LBB1518:
 284:src/xeq.c     **** }
 3030              		.loc 1 284 2 view .LVU825
 3031 0032 FFF7FEBF 		b	update_program_bounds
 3032              	.LVL227:
 3033              	.L254:
 3034              		.cfi_restore_state
 284:src/xeq.c     **** }
 3035              		.loc 1 284 2 view .LVU826
 3036              	.LBE1518:
 3037              	.LBE1525:
 367:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3038              		.loc 1 367 9 is_stmt 1 view .LVU827
 367:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3039              		.loc 1 367 14 is_stmt 0 view .LVU828
 3040 0036 820B     		lsrs	r2, r0, #14
 367:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3041              		.loc 1 367 12 view .LVU829
 3042 0038 032A     		cmp	r2, #3
 3043 003a 22D0     		beq	.L260
 3044              	.LBB1526:
 368:src/xeq.c     **** 		if (pc > n - 1)
 3045              		.loc 1 368 3 is_stmt 1 view .LVU830
 3046              	.LVL228:
 3047              	.LBB1527:
 3048              	.LBI1527:
 313:src/xeq.c     **** 	if (region == REGION_XROM)
 3049              		.loc 1 313 5 view .LVU831
 3050              	.LBB1528:
 314:src/xeq.c     **** 		return xrom_size;
 3051              		.loc 1 314 2 view .LVU832
 317:src/xeq.c     **** }
 3052              		.loc 1 317 3 view .LVU833
 317:src/xeq.c     **** }
 3053              		.loc 1 317 24 is_stmt 0 view .LVU834
 3054 003c 1A49     		ldr	r1, .L262+4
 3055              	.LBE1528:
 3056              	.LBE1527:
 368:src/xeq.c     **** 		if (pc > n - 1)
 3057              		.loc 1 368 26 view .LVU835
 3058 003e 1B4B     		ldr	r3, .L262+8
 3059              	.LBB1530:
ARM GAS  /tmp/ccQQPlfu.s 			page 157


 3060              	.LBB1529:
 317:src/xeq.c     **** }
 3061              		.loc 1 317 32 view .LVU836
 3062 0040 51F82220 		ldr	r2, [r1, r2, lsl #2]
 3063              	.LBE1529:
 3064              	.LBE1530:
 368:src/xeq.c     **** 		if (pc > n - 1)
 3065              		.loc 1 368 39 view .LVU837
 3066 0044 32F8022C 		ldrh	r2, [r2, #-2]
 368:src/xeq.c     **** 		if (pc > n - 1)
 3067              		.loc 1 368 26 view .LVU838
 3068 0048 00EA0301 		and	r1, r0, r3
 368:src/xeq.c     **** 		if (pc > n - 1)
 3069              		.loc 1 368 39 view .LVU839
 3070 004c 0A44     		add	r2, r2, r1
 3071              	.LVL229:
 369:src/xeq.c     **** 			pc = n - 1;
 3072              		.loc 1 369 3 is_stmt 1 view .LVU840
 3073 004e 9042     		cmp	r0, r2
 3074 0050 28BF     		it	cs
 3075 0052 1446     		movcs	r4, r2
 3076              	.LVL230:
 371:src/xeq.c     **** 			--pc;
 3077              		.loc 1 371 3 view .LVU841
 371:src/xeq.c     **** 			--pc;
 3078              		.loc 1 371 12 is_stmt 0 view .LVU842
 3079 0054 2340     		ands	r3, r3, r4
 3080 0056 0133     		adds	r3, r3, #1
 371:src/xeq.c     **** 			--pc;
 3081              		.loc 1 371 6 view .LVU843
 3082 0058 A342     		cmp	r3, r4
 3083 005a 12D2     		bcs	.L260
 371:src/xeq.c     **** 			--pc;
 3084              		.loc 1 371 28 discriminator 1 view .LVU844
 3085 005c 651E     		subs	r5, r4, #1
 3086 005e 2846     		mov	r0, r5
 3087 0060 FFF7FEFF 		bl	getprog
 3088              	.LVL231:
 371:src/xeq.c     **** 			--pc;
 3089              		.loc 1 371 28 discriminator 1 view .LVU845
 3090 0064 0F4B     		ldr	r3, .L262
 3091 0066 00F47040 		and	r0, r0, #61440
 3092 006a 1B68     		ldr	r3, [r3]
 371:src/xeq.c     **** 			--pc;
 3093              		.loc 1 371 25 discriminator 1 view .LVU846
 3094 006c B0F5704F 		cmp	r0, #61440
 372:src/xeq.c     **** 	}
 3095              		.loc 1 372 4 is_stmt 1 discriminator 1 view .LVU847
 3096              	.LVL232:
 372:src/xeq.c     **** 	}
 3097              		.loc 1 372 4 is_stmt 0 discriminator 1 view .LVU848
 3098 0070 08BF     		it	eq
 3099 0072 2C46     		moveq	r4, r5
 3100              	.LVL233:
 372:src/xeq.c     **** 	}
 3101              		.loc 1 372 4 discriminator 1 view .LVU849
 3102              	.LBE1526:
ARM GAS  /tmp/ccQQPlfu.s 			page 158


 374:src/xeq.c     **** }
 3103              		.loc 1 374 2 is_stmt 1 discriminator 1 view .LVU850
 3104              	.LBB1531:
 282:src/xeq.c     **** 	State.pc = pc;
 3105              		.loc 1 282 13 discriminator 1 view .LVU851
 3106              	.LBB1519:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3107              		.loc 1 283 2 discriminator 1 view .LVU852
 283:src/xeq.c     **** 	update_program_bounds(0);
 3108              		.loc 1 283 11 is_stmt 0 discriminator 1 view .LVU853
 3109 0074 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3110              		.loc 1 284 2 is_stmt 1 discriminator 1 view .LVU854
 3111 0078 0020     		movs	r0, #0
 3112              	.LBE1519:
 3113              	.LBE1531:
 375:src/xeq.c     **** 
 3114              		.loc 1 375 1 is_stmt 0 discriminator 1 view .LVU855
 3115 007a BDE83840 		pop	{r3, r4, r5, lr}
 3116              		.cfi_remember_state
 3117              		.cfi_restore 14
 3118              		.cfi_restore 5
 3119              		.cfi_restore 4
 3120              		.cfi_restore 3
 3121              		.cfi_def_cfa_offset 0
 3122              	.LVL234:
 3123              	.LBB1532:
 3124              	.LBB1520:
 284:src/xeq.c     **** }
 3125              		.loc 1 284 2 discriminator 1 view .LVU856
 3126 007e FFF7FEBF 		b	update_program_bounds
 3127              	.LVL235:
 3128              	.L260:
 3129              		.cfi_restore_state
 284:src/xeq.c     **** }
 3130              		.loc 1 284 2 discriminator 1 view .LVU857
 3131 0082 084B     		ldr	r3, .L262
 3132 0084 1B68     		ldr	r3, [r3]
 284:src/xeq.c     **** }
 3133              		.loc 1 284 2 discriminator 1 view .LVU858
 3134              	.LBE1520:
 3135              	.LBE1532:
 374:src/xeq.c     **** }
 3136              		.loc 1 374 2 is_stmt 1 view .LVU859
 3137              	.LVL236:
 3138              	.LBB1533:
 282:src/xeq.c     **** 	State.pc = pc;
 3139              		.loc 1 282 13 view .LVU860
 3140              	.LBB1521:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3141              		.loc 1 283 2 view .LVU861
 284:src/xeq.c     **** }
 3142              		.loc 1 284 2 is_stmt 0 view .LVU862
 3143 0086 0020     		movs	r0, #0
 283:src/xeq.c     **** 	update_program_bounds(0);
 3144              		.loc 1 283 11 view .LVU863
 3145 0088 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
ARM GAS  /tmp/ccQQPlfu.s 			page 159


 284:src/xeq.c     **** }
 3146              		.loc 1 284 2 is_stmt 1 view .LVU864
 3147              	.LBE1521:
 3148              	.LBE1533:
 375:src/xeq.c     **** 
 3149              		.loc 1 375 1 is_stmt 0 view .LVU865
 3150 008c BDE83840 		pop	{r3, r4, r5, lr}
 3151              		.cfi_remember_state
 3152              		.cfi_restore 14
 3153              		.cfi_restore 5
 3154              		.cfi_restore 4
 3155              		.cfi_restore 3
 3156              		.cfi_def_cfa_offset 0
 3157              	.LVL237:
 3158              	.LBB1534:
 3159              	.LBB1522:
 284:src/xeq.c     **** }
 3160              		.loc 1 284 2 view .LVU866
 3161 0090 FFF7FEBF 		b	update_program_bounds
 3162              	.LVL238:
 3163              	.L261:
 3164              		.cfi_restore_state
 284:src/xeq.c     **** }
 3165              		.loc 1 284 2 view .LVU867
 3166              	.LBE1522:
 3167              	.LBE1534:
 366:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3168              		.loc 1 366 4 is_stmt 1 view .LVU868
 366:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3169              		.loc 1 366 6 is_stmt 0 view .LVU869
 3170 0094 013C     		subs	r4, r4, #1
 3171              	.LVL239:
 374:src/xeq.c     **** }
 3172              		.loc 1 374 2 is_stmt 1 view .LVU870
 3173              	.LBB1535:
 282:src/xeq.c     **** 	State.pc = pc;
 3174              		.loc 1 282 13 view .LVU871
 3175              	.LBB1523:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3176              		.loc 1 283 2 view .LVU872
 283:src/xeq.c     **** 	update_program_bounds(0);
 3177              		.loc 1 283 11 is_stmt 0 view .LVU873
 3178 0096 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3179              		.loc 1 284 2 is_stmt 1 view .LVU874
 3180 009a 0020     		movs	r0, #0
 3181              	.LBE1523:
 3182              	.LBE1535:
 375:src/xeq.c     **** 
 3183              		.loc 1 375 1 is_stmt 0 view .LVU875
 3184 009c BDE83840 		pop	{r3, r4, r5, lr}
 3185              		.cfi_restore 14
 3186              		.cfi_restore 5
 3187              		.cfi_restore 4
 3188              		.cfi_restore 3
 3189              		.cfi_def_cfa_offset 0
 3190              	.LVL240:
ARM GAS  /tmp/ccQQPlfu.s 			page 160


 3191              	.LBB1536:
 3192              	.LBB1524:
 284:src/xeq.c     **** }
 3193              		.loc 1 284 2 view .LVU876
 3194 00a0 FFF7FEBF 		b	update_program_bounds
 3195              	.LVL241:
 3196              	.L263:
 284:src/xeq.c     **** }
 3197              		.loc 1 284 2 view .LVU877
 3198              		.align	2
 3199              	.L262:
 3200 00a4 00000000 		.word	main_ram
 3201 00a8 00000000 		.word	.LANCHOR0
 3202 00ac 00C0FFFF 		.word	-16384
 3203              	.LBE1524:
 3204              	.LBE1536:
 3205              		.cfi_endproc
 3206              	.LFE18:
 3208              		.section	.text.incpc,"ax",%progbits
 3209              		.align	1
 3210              		.p2align 2,,3
 3211              		.global	incpc
 3212              		.syntax unified
 3213              		.thumb
 3214              		.thumb_func
 3215              		.fpu fpv4-sp-d16
 3217              	incpc:
 3218              	.LFB22:
 452:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3219              		.loc 1 452 17 is_stmt 1 view -0
 3220              		.cfi_startproc
 3221              		@ args = 0, pretend = 0, frame = 0
 3222              		@ frame_needed = 0, uses_anonymous_args = 0
 453:src/xeq.c     **** 	return PcWrapped;
 3223              		.loc 1 453 2 view .LVU879
 452:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3224              		.loc 1 452 17 is_stmt 0 view .LVU880
 3225 0000 10B5     		push	{r4, lr}
 3226              		.cfi_def_cfa_offset 8
 3227              		.cfi_offset 4, -8
 3228              		.cfi_offset 14, -4
 453:src/xeq.c     **** 	return PcWrapped;
 3229              		.loc 1 453 20 view .LVU881
 3230 0002 084C     		ldr	r4, .L266
 3231 0004 2368     		ldr	r3, [r4]
 453:src/xeq.c     **** 	return PcWrapped;
 3232              		.loc 1 453 2 view .LVU882
 3233 0006 0121     		movs	r1, #1
 3234 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3235 000c FFF7FEFF 		bl	do_inc
 3236              	.LVL242:
 3237              	.LBB1537:
 3238              	.LBB1538:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3239              		.loc 1 283 11 view .LVU883
 3240 0010 2368     		ldr	r3, [r4]
 3241              	.LBE1538:
ARM GAS  /tmp/ccQQPlfu.s 			page 161


 3242              	.LBE1537:
 453:src/xeq.c     **** 	return PcWrapped;
 3243              		.loc 1 453 2 view .LVU884
 3244 0012 0246     		mov	r2, r0
 3245              	.LVL243:
 3246              	.LBB1540:
 3247              	.LBI1537:
 282:src/xeq.c     **** 	State.pc = pc;
 3248              		.loc 1 282 13 is_stmt 1 view .LVU885
 3249              	.LBB1539:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3250              		.loc 1 283 2 view .LVU886
 283:src/xeq.c     **** 	update_program_bounds(0);
 3251              		.loc 1 283 11 is_stmt 0 view .LVU887
 3252 0014 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3253              		.loc 1 284 2 is_stmt 1 view .LVU888
 3254 0018 0020     		movs	r0, #0
 3255              	.LVL244:
 284:src/xeq.c     **** }
 3256              		.loc 1 284 2 is_stmt 0 view .LVU889
 3257 001a FFF7FEFF 		bl	update_program_bounds
 3258              	.LVL245:
 284:src/xeq.c     **** }
 3259              		.loc 1 284 2 view .LVU890
 3260              	.LBE1539:
 3261              	.LBE1540:
 454:src/xeq.c     **** }
 3262              		.loc 1 454 2 is_stmt 1 view .LVU891
 454:src/xeq.c     **** }
 3263              		.loc 1 454 9 is_stmt 0 view .LVU892
 3264 001e 024B     		ldr	r3, .L266+4
 455:src/xeq.c     **** 
 3265              		.loc 1 455 1 view .LVU893
 3266 0020 1868     		ldr	r0, [r3]
 3267 0022 10BD     		pop	{r4, pc}
 3268              	.L267:
 3269              		.align	2
 3270              	.L266:
 3271 0024 00000000 		.word	main_ram
 3272 0028 00000000 		.word	PcWrapped
 3273              		.cfi_endproc
 3274              	.LFE22:
 3276              		.section	.text.decpc,"ax",%progbits
 3277              		.align	1
 3278              		.p2align 2,,3
 3279              		.global	decpc
 3280              		.syntax unified
 3281              		.thumb
 3282              		.thumb_func
 3283              		.fpu fpv4-sp-d16
 3285              	decpc:
 3286              	.LFB23:
 457:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3287              		.loc 1 457 18 is_stmt 1 view -0
 3288              		.cfi_startproc
 3289              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccQQPlfu.s 			page 162


 3290              		@ frame_needed = 0, uses_anonymous_args = 0
 458:src/xeq.c     **** }
 3291              		.loc 1 458 2 view .LVU895
 457:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3292              		.loc 1 457 18 is_stmt 0 view .LVU896
 3293 0000 10B5     		push	{r4, lr}
 3294              		.cfi_def_cfa_offset 8
 3295              		.cfi_offset 4, -8
 3296              		.cfi_offset 14, -4
 458:src/xeq.c     **** }
 3297              		.loc 1 458 20 view .LVU897
 3298 0002 084C     		ldr	r4, .L270
 3299 0004 2368     		ldr	r3, [r4]
 458:src/xeq.c     **** }
 3300              		.loc 1 458 2 view .LVU898
 3301 0006 0121     		movs	r1, #1
 3302 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3303 000c FFF7FEFF 		bl	do_dec
 3304              	.LVL246:
 3305              	.LBB1541:
 3306              	.LBB1542:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3307              		.loc 1 283 11 view .LVU899
 3308 0010 2368     		ldr	r3, [r4]
 3309              	.LBE1542:
 3310              	.LBE1541:
 458:src/xeq.c     **** }
 3311              		.loc 1 458 2 view .LVU900
 3312 0012 0246     		mov	r2, r0
 3313              	.LVL247:
 3314              	.LBB1545:
 3315              	.LBI1541:
 282:src/xeq.c     **** 	State.pc = pc;
 3316              		.loc 1 282 13 is_stmt 1 view .LVU901
 3317              	.LBB1543:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3318              		.loc 1 283 2 view .LVU902
 3319              	.LBE1543:
 3320              	.LBE1545:
 459:src/xeq.c     **** 
 3321              		.loc 1 459 1 is_stmt 0 view .LVU903
 3322 0014 BDE81040 		pop	{r4, lr}
 3323              		.cfi_restore 14
 3324              		.cfi_restore 4
 3325              		.cfi_def_cfa_offset 0
 3326              	.LBB1546:
 3327              	.LBB1544:
 284:src/xeq.c     **** }
 3328              		.loc 1 284 2 view .LVU904
 3329 0018 0020     		movs	r0, #0
 3330              	.LVL248:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3331              		.loc 1 283 11 view .LVU905
 3332 001a A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3333              		.loc 1 284 2 is_stmt 1 view .LVU906
 3334 001e FFF7FEBF 		b	update_program_bounds
ARM GAS  /tmp/ccQQPlfu.s 			page 163


 3335              	.LVL249:
 3336              	.L271:
 284:src/xeq.c     **** }
 3337              		.loc 1 284 2 is_stmt 0 view .LVU907
 3338 0022 00BF     		.align	2
 3339              	.L270:
 3340 0024 00000000 		.word	main_ram
 3341              	.LBE1544:
 3342              	.LBE1546:
 3343              		.cfi_endproc
 3344              	.LFE23:
 3346              		.section	.text.fin_tst.part.0,"ax",%progbits
 3347              		.align	1
 3348              		.p2align 2,,3
 3349              		.syntax unified
 3350              		.thumb
 3351              		.thumb_func
 3352              		.fpu fpv4-sp-d16
 3354              	fin_tst.part.0:
 3355              	.LFB285:
2563:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 3356              		.loc 1 2563 6 is_stmt 1 view -0
 3357              		.cfi_startproc
 3358              		@ args = 0, pretend = 0, frame = 0
 3359              		@ frame_needed = 0, uses_anonymous_args = 0
 3360              	.LVL250:
2563:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 3361              		.loc 1 2563 6 is_stmt 0 view .LVU909
 3362 0000 08B5     		push	{r3, lr}
 3363              		.cfi_def_cfa_offset 8
 3364              		.cfi_offset 3, -8
 3365              		.cfi_offset 14, -4
2566:src/xeq.c     **** 			decpc();
 3366              		.loc 1 2566 14 view .LVU910
 3367 0002 FFF7FEFF 		bl	incpc
 3368              	.LVL251:
2566:src/xeq.c     **** 			decpc();
 3369              		.loc 1 2566 11 view .LVU911
 3370 0006 00B9     		cbnz	r0, .L275
2577:src/xeq.c     **** 
 3371              		.loc 1 2577 1 view .LVU912
 3372 0008 08BD     		pop	{r3, pc}
 3373              	.L275:
2567:src/xeq.c     **** 	}
 3374              		.loc 1 2567 4 is_stmt 1 view .LVU913
2577:src/xeq.c     **** 
 3375              		.loc 1 2577 1 is_stmt 0 view .LVU914
 3376 000a BDE80840 		pop	{r3, lr}
 3377              		.cfi_restore 14
 3378              		.cfi_restore 3
 3379              		.cfi_def_cfa_offset 0
2567:src/xeq.c     **** 	}
 3380              		.loc 1 2567 4 view .LVU915
 3381 000e FFF7FEBF 		b	decpc
 3382              	.LVL252:
 3383              		.cfi_endproc
 3384              	.LFE285:
ARM GAS  /tmp/ccQQPlfu.s 			page 164


 3386 0012 00BF     		.section	.text.do_rtn,"ax",%progbits
 3387              		.align	1
 3388              		.p2align 2,,3
 3389              		.syntax unified
 3390              		.thumb
 3391              		.thumb_func
 3392              		.fpu fpv4-sp-d16
 3394              	do_rtn:
 3395              	.LVL253:
 3396              	.LFB154:
2241:src/xeq.c     **** 	unsigned short pc;
 3397              		.loc 1 2241 31 is_stmt 1 view -0
 3398              		.cfi_startproc
 3399              		@ args = 0, pretend = 0, frame = 0
 3400              		@ frame_needed = 0, uses_anonymous_args = 0
2242:src/xeq.c     **** 
 3401              		.loc 1 2242 2 view .LVU917
2244:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3402              		.loc 1 2244 2 view .LVU918
2241:src/xeq.c     **** 	unsigned short pc;
 3403              		.loc 1 2241 31 is_stmt 0 view .LVU919
 3404 0000 70B5     		push	{r4, r5, r6, lr}
 3405              		.cfi_def_cfa_offset 16
 3406              		.cfi_offset 4, -16
 3407              		.cfi_offset 5, -12
 3408              		.cfi_offset 6, -8
 3409              		.cfi_offset 14, -4
2244:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3410              		.loc 1 2244 6 view .LVU920
 3411 0002 224C     		ldr	r4, .L290
 3412 0004 2368     		ldr	r3, [r4]
2244:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3413              		.loc 1 2244 5 view .LVU921
 3414 0006 B3F9E227 		ldrsh	r2, [r3, #2018]
 3415 000a 002A     		cmp	r2, #0
 3416 000c 0FDB     		blt	.L277
2246:src/xeq.c     **** 		raw_set_pc(ProgBegin);
 3417              		.loc 1 2246 3 is_stmt 1 view .LVU922
 3418              	.LBB1547:
 3419              	.LBI1547:
1600:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 3420              		.loc 1 1600 6 view .LVU923
 3421              	.LBB1548:
1601:src/xeq.c     **** }
 3422              		.loc 1 1601 2 view .LVU924
1601:src/xeq.c     **** }
 3423              		.loc 1 1601 24 is_stmt 0 view .LVU925
 3424 000e 0020     		movs	r0, #0
 3425              	.LVL254:
1601:src/xeq.c     **** }
 3426              		.loc 1 1601 24 view .LVU926
 3427              	.LBE1548:
 3428              	.LBE1547:
 3429              	.LBB1550:
 3430              	.LBB1551:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3431              		.loc 1 283 11 view .LVU927
ARM GAS  /tmp/ccQQPlfu.s 			page 165


 3432 0010 B3F8EC27 		ldrh	r2, [r3, #2028]
 3433              	.LBE1551:
 3434              	.LBE1550:
 3435              	.LBB1553:
 3436              	.LBB1549:
1601:src/xeq.c     **** }
 3437              		.loc 1 1601 24 view .LVU928
 3438 0014 A3F8DE07 		strh	r0, [r3, #2014]	@ movhi
1601:src/xeq.c     **** }
 3439              		.loc 1 1601 12 view .LVU929
 3440 0018 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 3441              	.LBE1549:
 3442              	.LBE1553:
2247:src/xeq.c     **** 	}
 3443              		.loc 1 2247 3 is_stmt 1 view .LVU930
 3444              	.LVL255:
 3445              	.LBB1554:
 3446              	.LBI1550:
 282:src/xeq.c     **** 	State.pc = pc;
 3447              		.loc 1 282 13 view .LVU931
 3448              	.LBB1552:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3449              		.loc 1 283 2 view .LVU932
 283:src/xeq.c     **** 	update_program_bounds(0);
 3450              		.loc 1 283 11 is_stmt 0 view .LVU933
 3451 001c A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3452              		.loc 1 284 2 is_stmt 1 view .LVU934
 3453 0020 FFF7FEFF 		bl	update_program_bounds
 3454              	.LVL256:
 3455              	.L278:
 284:src/xeq.c     **** }
 3456              		.loc 1 284 2 is_stmt 0 view .LVU935
 3457              	.LBE1552:
 3458              	.LBE1554:
2260:src/xeq.c     **** 		// RTN with empty stack stops
 3459              		.loc 1 2260 2 is_stmt 1 view .LVU936
2260:src/xeq.c     **** 		// RTN with empty stack stops
 3460              		.loc 1 2260 6 is_stmt 0 view .LVU937
 3461 0024 2368     		ldr	r3, [r4]
2260:src/xeq.c     **** 		// RTN with empty stack stops
 3462              		.loc 1 2260 5 view .LVU938
 3463 0026 B3F9E217 		ldrsh	r1, [r3, #2018]
 3464 002a 09B3     		cbz	r1, .L289
2264:src/xeq.c     **** 
 3465              		.loc 1 2264 1 view .LVU939
 3466 002c 70BD     		pop	{r4, r5, r6, pc}
 3467              	.LVL257:
 3468              	.L277:
2252:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
 3469              		.loc 1 2252 3 is_stmt 1 view .LVU940
 3470 002e 0546     		mov	r5, r0
 3471 0030 FFF7FEFF 		bl	retstk_up
 3472              	.LVL258:
2253:src/xeq.c     **** 		raw_set_pc(pc);
 3473              		.loc 1 2253 3 view .LVU941
2253:src/xeq.c     **** 		raw_set_pc(pc);
ARM GAS  /tmp/ccQQPlfu.s 			page 166


 3474              		.loc 1 2253 15 is_stmt 0 view .LVU942
 3475 0034 2268     		ldr	r2, [r4]
2253:src/xeq.c     **** 		raw_set_pc(pc);
 3476              		.loc 1 2253 6 view .LVU943
 3477 0036 1649     		ldr	r1, .L290+4
2253:src/xeq.c     **** 		raw_set_pc(pc);
 3478              		.loc 1 2253 14 view .LVU944
 3479 0038 B2F9E237 		ldrsh	r3, [r2, #2018]
2253:src/xeq.c     **** 		raw_set_pc(pc);
 3480              		.loc 1 2253 6 view .LVU945
 3481 003c 0968     		ldr	r1, [r1]
2253:src/xeq.c     **** 		raw_set_pc(pc);
 3482              		.loc 1 2253 14 view .LVU946
 3483 003e 03F10043 		add	r3, r3, #-2147483648
 3484 0042 013B     		subs	r3, r3, #1
 3485              	.LBB1555:
 3486              	.LBB1556:
 284:src/xeq.c     **** }
 3487              		.loc 1 284 2 view .LVU947
 3488 0044 0020     		movs	r0, #0
 3489              	.LBE1556:
 3490              	.LBE1555:
2253:src/xeq.c     **** 		raw_set_pc(pc);
 3491              		.loc 1 2253 6 view .LVU948
 3492 0046 31F81360 		ldrh	r6, [r1, r3, lsl #1]
 3493              	.LVL259:
2254:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
 3494              		.loc 1 2254 3 is_stmt 1 view .LVU949
 3495              	.LBB1558:
 3496              	.LBI1555:
 282:src/xeq.c     **** 	State.pc = pc;
 3497              		.loc 1 282 13 view .LVU950
 3498              	.LBB1557:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3499              		.loc 1 283 2 view .LVU951
 283:src/xeq.c     **** 	update_program_bounds(0);
 3500              		.loc 1 283 11 is_stmt 0 view .LVU952
 3501 004a A2F8E067 		strh	r6, [r2, #2016]	@ movhi
 284:src/xeq.c     **** }
 3502              		.loc 1 284 2 is_stmt 1 view .LVU953
 3503 004e FFF7FEFF 		bl	update_program_bounds
 3504              	.LVL260:
 284:src/xeq.c     **** }
 3505              		.loc 1 284 2 is_stmt 0 view .LVU954
 3506              	.LBE1557:
 3507              	.LBE1558:
2256:src/xeq.c     **** 			if (incpc())
 3508              		.loc 1 2256 3 is_stmt 1 view .LVU955
2256:src/xeq.c     **** 			if (incpc())
 3509              		.loc 1 2256 6 is_stmt 0 view .LVU956
 3510 0052 002D     		cmp	r5, #0
 3511 0054 E6D0     		beq	.L278
2256:src/xeq.c     **** 			if (incpc())
 3512              		.loc 1 2256 16 discriminator 1 view .LVU957
 3513 0056 3046     		mov	r0, r6
 3514 0058 FFF7FEFF 		bl	getprog
 3515              	.LVL261:
ARM GAS  /tmp/ccQQPlfu.s 			page 167


2256:src/xeq.c     **** 			if (incpc())
 3516              		.loc 1 2256 13 discriminator 1 view .LVU958
 3517 005c B0F5C17F 		cmp	r0, #386
 3518 0060 E0D0     		beq	.L278
2257:src/xeq.c     **** 				decpc();
 3519              		.loc 1 2257 4 is_stmt 1 view .LVU959
2257:src/xeq.c     **** 				decpc();
 3520              		.loc 1 2257 8 is_stmt 0 view .LVU960
 3521 0062 FFF7FEFF 		bl	incpc
 3522              	.LVL262:
2257:src/xeq.c     **** 				decpc();
 3523              		.loc 1 2257 7 view .LVU961
 3524 0066 0028     		cmp	r0, #0
 3525 0068 DCD0     		beq	.L278
2258:src/xeq.c     **** 	}
 3526              		.loc 1 2258 5 is_stmt 1 view .LVU962
 3527 006a FFF7FEFF 		bl	decpc
 3528              	.LVL263:
 3529 006e D9E7     		b	.L278
 3530              	.LVL264:
 3531              	.L289:
2262:src/xeq.c     **** 	}
 3532              		.loc 1 2262 3 view .LVU963
 3533              	.LBB1559:
 3534              	.LBI1559:
5167:src/xeq.c     **** 
5168:src/xeq.c     **** 
5169:src/xeq.c     **** /* Handle a command that takes an argument.  The argument is encoded
5170:src/xeq.c     ****  * in the low order bits of the opcode.  We also have to take
5171:src/xeq.c     ****  * account of the indirection flag and various limits.
5172:src/xeq.c     ****  */
5173:src/xeq.c     **** static void rargs(const opcode op) {
5174:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
5175:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
5176:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
5177:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
5178:src/xeq.c     **** 
5179:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5180:src/xeq.c     **** 
5181:src/xeq.c     **** 	process_cmdline();
5182:src/xeq.c     **** 
5183:src/xeq.c     **** 	if (cmd >= NUM_RARG) {
5184:src/xeq.c     **** 		illegal(op);
5185:src/xeq.c     **** 		return;
5186:src/xeq.c     **** 	}
5187:src/xeq.c     **** 	if (isNULL(argcmds[cmd].f)) {
5188:src/xeq.c     **** 		set_lift();
5189:src/xeq.c     **** 		return;
5190:src/xeq.c     **** 	}
5191:src/xeq.c     **** 
5192:src/xeq.c     **** 	if (ind) {
5193:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
5194:src/xeq.c     **** 			// Get the argument by reading a register
5195:src/xeq.c     **** 			int sgn;
5196:src/xeq.c     **** 			unsigned long long int regval;
5197:src/xeq.c     **** 
5198:src/xeq.c     **** 			if (arg > get_reg_limit(RARG_RCL, arg)) {
ARM GAS  /tmp/ccQQPlfu.s 			page 168


5199:src/xeq.c     **** 				// Invalid register specified for indirect access
5200:src/xeq.c     **** 				report_err(ERR_RANGE);
5201:src/xeq.c     **** 				return;
5202:src/xeq.c     **** 			}
5203:src/xeq.c     **** 			regval = get_reg_n_int_sgn(arg, &sgn);
5204:src/xeq.c     **** 			if ((regval >> 32) != 0)
5205:src/xeq.c     **** 				goto range;
5206:src/xeq.c     **** 			arg = (unsigned int) regval;
5207:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
5208:src/xeq.c     **** 				// negative arguments address local registers or flags
5209:src/xeq.c     **** 				arg = LOCAL_REG_BASE + arg;
5210:src/xeq.c     **** 			}
5211:src/xeq.c     **** 		} 
5212:src/xeq.c     **** 		else {
5213:src/xeq.c     **** 			// put the top bit back in
5214:src/xeq.c     **** 			arg |= RARG_IND;
5215:src/xeq.c     **** 		}
5216:src/xeq.c     **** 	}
5217:src/xeq.c     **** 	if (argcmds[cmd].reg) {
5218:src/xeq.c     **** 		// Range checking for registers against variable boundary
5219:src/xeq.c     **** 		lim = get_reg_limit(cmd, arg);
5220:src/xeq.c     **** 	}
5221:src/xeq.c     **** 	else if (argcmds[cmd].flag) {
5222:src/xeq.c     **** 		if (LocalRegs == 0)
5223:src/xeq.c     **** 			lim = NUMFLG - 1;
5224:src/xeq.c     **** 		else 
5225:src/xeq.c     **** 			lim = LOCAL_FLAG_BASE + MAX_LOCAL_DIRECT - 1;
5226:src/xeq.c     **** 	}
5227:src/xeq.c     **** 	if (arg > lim) {
5228:src/xeq.c     **** 		// Argument is too large
5229:src/xeq.c     **** range:		report_err(ERR_RANGE);
5230:src/xeq.c     **** 	}
5231:src/xeq.c     **** 	else if (argcmds[cmd].cmplx && arg >= TOPREALREG-1 && arg < NUMREG && (arg & 1)) {
5232:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
5233:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5234:src/xeq.c     **** 	}
5235:src/xeq.c     **** 	else {
5236:src/xeq.c     **** 		// Dispatch the command
5237:src/xeq.c     **** 		FP_RARG fp = (FP_RARG) EXPAND_ADDRESS(argcmds[cmd].f);
5238:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5239:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
5240:src/xeq.c     **** 			if (argcmds[cmd].label) {
5241:src/xeq.c     **** 				XromUserPc = find_label_from(state_pc(), arg, 0);
5242:src/xeq.c     **** 				if (XromUserPc == 0)
5243:src/xeq.c     **** 					return;
5244:src/xeq.c     **** 				if (! Running)
5245:src/xeq.c     **** 					clrretstk();
5246:src/xeq.c     **** 			}
5247:src/xeq.c     **** 			else
5248:src/xeq.c     **** 				XromArg = (unsigned char) arg;
5249:src/xeq.c     **** #else
5250:src/xeq.c     **** 			XromUserPc = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
5251:src/xeq.c     **** 			if (XromUserPc == 0)
5252:src/xeq.c     **** 				return;
5253:src/xeq.c     **** 			if (! Running)
5254:src/xeq.c     **** 				clrretstk();
5255:src/xeq.c     **** #endif
ARM GAS  /tmp/ccQQPlfu.s 			page 169


5256:src/xeq.c     **** 			dispatch_xrom(fp);
5257:src/xeq.c     **** 			return;
5258:src/xeq.c     **** 		}
5259:src/xeq.c     **** 		else {
5260:src/xeq.c     **** 			fp(arg, (enum rarg)cmd);
5261:src/xeq.c     **** 		}
5262:src/xeq.c     **** 		if (cmd != RARG_XROM_OUT) {
5263:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
5264:src/xeq.c     **** 			set_lift();
5265:src/xeq.c     **** 		}
5266:src/xeq.c     **** 	}
5267:src/xeq.c     **** }
5268:src/xeq.c     **** 
5269:src/xeq.c     **** static void multi(const opcode op) {
5270:src/xeq.c     **** 	const int cmd = opDBL(op);
5271:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5272:src/xeq.c     **** 
5273:src/xeq.c     **** 	process_cmdline_set_lift();
5274:src/xeq.c     **** 
5275:src/xeq.c     **** 	if (cmd >= NUM_MULTI) {
5276:src/xeq.c     **** 		illegal(op);
5277:src/xeq.c     **** 		return;
5278:src/xeq.c     **** 	}
5279:src/xeq.c     **** 	if (isNULL(multicmds[cmd].f))	// LBL does nothing
5280:src/xeq.c     **** 		return;
5281:src/xeq.c     **** 	else {
5282:src/xeq.c     **** 		FP_MULTI fp = (FP_MULTI) EXPAND_ADDRESS(multicmds[cmd].f);
5283:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5284:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
5285:src/xeq.c     **** 			if (XromUserPc != 0) {
5286:src/xeq.c     **** 				if (! Running)
5287:src/xeq.c     **** 					clrretstk();
5288:src/xeq.c     **** 				dispatch_xrom(fp);
5289:src/xeq.c     **** 			}
5290:src/xeq.c     **** 			return;
5291:src/xeq.c     **** 		}
5292:src/xeq.c     **** 		else {
5293:src/xeq.c     **** 			fp(op, (enum multiops)cmd);
5294:src/xeq.c     **** 			set_lift();
5295:src/xeq.c     **** 		}
5296:src/xeq.c     **** 	}
5297:src/xeq.c     **** }
5298:src/xeq.c     **** 
5299:src/xeq.c     **** 
5300:src/xeq.c     **** 
5301:src/xeq.c     **** /* Main dispatch routine that decodes the top level of the opcode and
5302:src/xeq.c     ****  * goes to the appropriate lower level dispatch routine.
5303:src/xeq.c     ****  */
5304:src/xeq.c     **** void xeq(opcode op) 
5305:src/xeq.c     **** {
5306:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
5307:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
5308:src/xeq.c     **** 	const struct _ustate old = UState;
5309:src/xeq.c     **** 	const unsigned char lift = get_lift();
5310:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
5311:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
5312:src/xeq.c     **** #ifdef INFRARED
ARM GAS  /tmp/ccQQPlfu.s 			page 170


5313:src/xeq.c     **** 	int tracing;
5314:src/xeq.c     **** #endif
5315:src/xeq.c     **** 
5316:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
5317:src/xeq.c     **** 	if (op == (OP_NIL | OP_rCLX) || op == (OP_NIL | OP_CLSTK)) {
5318:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
5319:src/xeq.c     **** 		// valid input so no error message will be generated.
5320:src/xeq.c     **** 		CmdLineDot = 0;
5321:src/xeq.c     **** 		Cmdline[0] = '0';
5322:src/xeq.c     **** 		Cmdline[1] = '\0';
5323:src/xeq.c     **** 	}
5324:src/xeq.c     **** #endif
5325:src/xeq.c     **** 
5326:src/xeq.c     **** 	xcopy(save, StackBase, sizeof(save));
5327:src/xeq.c     **** #if defined(CONSOLE)
5328:src/xeq.c     **** 	instruction_count++;
5329:src/xeq.c     **** #endif
5330:src/xeq.c     **** #ifndef REALBUILD
5331:src/xeq.c     **** 	if (State2.trace && ! State2.sst) {
5332:src/xeq.c     **** 		char buf[16];
5333:src/xeq.c     **** 		if (Running)
5334:src/xeq.c     **** 			print_step(op);
5335:src/xeq.c     **** 		else
5336:src/xeq.c     **** 			sprintf(TraceBuffer, "%04X:%s", op, prt(op, buf));
5337:src/xeq.c     **** 		DispMsg = TraceBuffer;
5338:src/xeq.c     **** 	}
5339:src/xeq.c     **** #endif
5340:src/xeq.c     **** #ifdef INFRARED
5341:src/xeq.c     **** #ifdef REALBUILD
5342:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && ! is_xrom() && State2.runmode;
5343:src/xeq.c     **** #else
5344:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && (! is_xrom() || State2.trace) && State2.runmode;
5345:src/xeq.c     **** #endif
5346:src/xeq.c     **** 	Tracing = tracing;
5347:src/xeq.c     **** 	print_trace( op, 0 );
5348:src/xeq.c     **** #endif
5349:src/xeq.c     **** 	Busy = 0;
5350:src/xeq.c     **** 	State2.wascomplex = 0;
5351:src/xeq.c     **** 	if (isDBL(op))
5352:src/xeq.c     **** 		multi(op);
5353:src/xeq.c     **** 	else if (isRARG(op))
5354:src/xeq.c     **** 		rargs(op);
5355:src/xeq.c     **** 	else {
5356:src/xeq.c     **** 		XeqOpCode = (s_opcode) op;
5357:src/xeq.c     **** 		switch (opKIND(op)) {
5358:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
5359:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
5360:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
5361:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
5362:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
5363:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
5364:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
5365:src/xeq.c     **** 		default:	illegal(op);
5366:src/xeq.c     **** 		}
5367:src/xeq.c     **** 	}
5368:src/xeq.c     **** #if INTERRUPT_XROM_TICKS > 0
5369:src/xeq.c     **** 	if (OnKeyTicks >= INTERRUPT_XROM_TICKS) {
ARM GAS  /tmp/ccQQPlfu.s 			page 171


5370:src/xeq.c     **** 		report_err(ERR_INTERRUPTED);
5371:src/xeq.c     **** 		while (get_key() >= 0) { } // Empty keyboard buffer
5372:src/xeq.c     **** 	}
5373:src/xeq.c     **** #endif
5374:src/xeq.c     **** 
5375:src/xeq.c     **** 	if (Error != ERR_NONE) {
5376:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
5377:src/xeq.c     **** 		error_message( Error );
5378:src/xeq.c     **** 		// Repair stack and state
5379:src/xeq.c     **** 		// Clear return stack
5380:src/xeq.c     **** 		xcopy(StackBase, save, sizeof(save));
5381:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
5382:src/xeq.c     **** 		UState = old;
5383:src/xeq.c     **** 		State2.state_lift = lift;
5384:src/xeq.c     **** 		raw_set_pc(old_pc);
5385:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
5386:src/xeq.c     **** 		process_cmdline_set_lift();
5387:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
5388:src/xeq.c     **** 		// wrong with the command line, e.g. it had a partially entered fraction
5389:src/xeq.c     **** 		Error = ERR_NONE;
5390:src/xeq.c     **** 		if (Running || XromRunning) {
5391:src/xeq.c     **** #ifndef REALBUILD
5392:src/xeq.c     **** 			if (State2.trace ) {
5393:src/xeq.c     **** 				// Special handling for debug environment
5394:src/xeq.c     **** 				if (XromFlags.xIN) {
5395:src/xeq.c     **** 					// Restore the global return stack
5396:src/xeq.c     **** 					RetStk = XromUserRetStk;
5397:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5398:src/xeq.c     **** 					// Restore private stack to normal stack
5399:src/xeq.c     **** 					if (! XromFlags.mode_double && NumRegs < STACK_SIZE + EXTRA_REG) {
5400:src/xeq.c     **** 						// Need space for double precision stack
5401:src/xeq.c     **** 						cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
5402:src/xeq.c     **** 					}
5403:src/xeq.c     **** 					XromFlags.xIN = 0;		// Clear flag before get_reg_n!
5404:src/xeq.c     **** 					if (Error == ERR_NONE) {
5405:src/xeq.c     **** 						UState.mode_double = 1;
5406:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
5407:src/xeq.c     **** 					}
5408:src/xeq.c     **** 					else
5409:src/xeq.c     **** 						Error = ERR_NONE;	// Not enough RAM, can't restore
5410:src/xeq.c     **** 				}
5411:src/xeq.c     **** 			}
5412:src/xeq.c     **** 			else {
5413:src/xeq.c     **** #endif
5414:src/xeq.c     **** 				unsigned short int pc = state_pc();
5415:src/xeq.c     **** 				if (XromFlags.xIN) {
5416:src/xeq.c     **** 					// Restore state to before xIN
5417:src/xeq.c     **** 					XromFlags.xIN = 0;
5418:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
5419:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
5420:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
5421:src/xeq.c     **** 					// Restore the global return stack
5422:src/xeq.c     **** 					RetStk = XromUserRetStk;
5423:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5424:src/xeq.c     **** 				}
5425:src/xeq.c     **** 				while (isXROM(pc)) {
5426:src/xeq.c     **** 					// Leave XROM
ARM GAS  /tmp/ccQQPlfu.s 			page 172


5427:src/xeq.c     **** 					if (RetStkPtr != 0) {
5428:src/xeq.c     **** 						retstk_up();
5429:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
5430:src/xeq.c     **** 					}
5431:src/xeq.c     **** 					if (RetStkPtr == 0)
5432:src/xeq.c     **** 						++pc; // compensate for decpc below
5433:src/xeq.c     **** 				}
5434:src/xeq.c     **** 				raw_set_pc(pc);
5435:src/xeq.c     **** #ifndef REALBUILD
5436:src/xeq.c     **** 			}
5437:src/xeq.c     **** #endif
5438:src/xeq.c     **** 			decpc();		// Back to error instruction
5439:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
5440:src/xeq.c     **** 
5441:src/xeq.c     **** 			set_running_off();
5442:src/xeq.c     **** 		}
5443:src/xeq.c     **** 	} 
5444:src/xeq.c     **** 	reset_volatile_state();
5445:src/xeq.c     **** #ifdef INFRARED
5446:src/xeq.c     **** 	Tracing = tracing;
5447:src/xeq.c     **** 	print_trace( op, 1 );
5448:src/xeq.c     **** #endif
5449:src/xeq.c     **** }
5450:src/xeq.c     **** 
5451:src/xeq.c     **** /* Execute a single step and return.
5452:src/xeq.c     ****  */
5453:src/xeq.c     **** static void xeq_single(void) {
5454:src/xeq.c     **** 	const opcode op = getprog(state_pc());
5455:src/xeq.c     **** 
5456:src/xeq.c     **** 	incpc();
5457:src/xeq.c     **** 	xeq(op);
5458:src/xeq.c     **** }
5459:src/xeq.c     **** 
5460:src/xeq.c     **** /* Continue execution trough xrom code
5461:src/xeq.c     ****  */
5462:src/xeq.c     **** #ifdef REALBUILD
5463:src/xeq.c     **** void xeq_xrom(void) {
5464:src/xeq.c     **** #else
5465:src/xeq.c     **** static void xeq_xrom2(void) {
5466:src/xeq.c     **** #endif
5467:src/xeq.c     **** 	int count = 0;
5468:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
5469:src/xeq.c     **** 	 * we break free.
5470:src/xeq.c     **** 	 */
5471:src/xeq.c     **** 	  while (!Pause && is_xrom() && RetStkPtr != 0) {
5472:src/xeq.c     **** 		XromRunning = 1;
5473:src/xeq.c     **** 		xeq_single();
5474:src/xeq.c     **** 		XromRunning = 0;
5475:src/xeq.c     **** 		if ((++count & 31) == 0)
5476:src/xeq.c     **** 			busy();
5477:src/xeq.c     **** 		  if (Pause)
5478:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
5479:src/xeq.c     **** 			// Switch to Running mode to force continued execution.
5480:src/xeq.c     **** 			Running = 1;
5481:src/xeq.c     **** 		
5482:src/xeq.c     **** 	}
5483:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 173


5484:src/xeq.c     **** 
5485:src/xeq.c     **** #ifndef REALBUILD
5486:src/xeq.c     **** void xeq_xrom(void) {
5487:src/xeq.c     **** 	// We split the routine in two parts for debugging only
5488:src/xeq.c     **** 	if (! State2.trace)
5489:src/xeq.c     **** 		xeq_xrom2();
5490:src/xeq.c     **** }
5491:src/xeq.c     **** #endif
5492:src/xeq.c     **** 
5493:src/xeq.c     **** /* Check to see if we're running a program and if so execute it
5494:src/xeq.c     ****  * for a while.
5495:src/xeq.c     ****  *
5496:src/xeq.c     ****  */
5497:src/xeq.c     **** 
5498:src/xeq.c     **** /*
5499:src/xeq.c     **** 'Pause' is true if Pause is non-zero, i.e., if the pause is still running.
5500:src/xeq.c     **** */
5501:src/xeq.c     ****  void xeqprog(void) 
5502:src/xeq.c     ****  {
5503:src/xeq.c     ****    int state = 0;
5504:src/xeq.c     ****    if (Running || Pause) {
5505:src/xeq.c     **** 
5506:src/xeq.c     **** #if !(defined(CONSOLE)) && !(defined(DM42))
5507:src/xeq.c     ****      long long last_ticker = Ticker;
5508:src/xeq.c     ****      state = ((int) last_ticker % (2*TICKS_PER_FLASH) < TICKS_PER_FLASH);
5509:src/xeq.c     **** #else
5510:src/xeq.c     ****      state = 1;
5511:src/xeq.c     **** #endif
5512:src/xeq.c     ****      
5513:src/xeq.c     ****      //     print_debug(100,state);
5514:src/xeq.c     ****      dot(RCL_annun, state);
5515:src/xeq.c     ****      finish_RPN(); // RPN
5516:src/xeq.c     **** 
5517:src/xeq.c     ****      while (! Pause && Running) {
5518:src/xeq.c     ****        xeq_single();
5519:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
5520:src/xeq.c     ****        if (is_key_pressed())
5521:src/xeq.c     **** 	 {
5522:src/xeq.c     **** 	 // Key press or heart beat
5523:src/xeq.c     **** 	 // Note: DM42 doesn't have real heart beat so no flash
5524:src/xeq.c     **** 	 // xeq_xrom(); // Already done by dispatch_xrom()
5525:src/xeq.c     **** 	 break;
5526:src/xeq.c     ****        }
5527:src/xeq.c     ****      }
5528:src/xeq.c     ****    }
5529:src/xeq.c     ****    if (! Running && ! Pause) {	  
5530:src/xeq.c     ****      // Program has terminated
5531:src/xeq.c     ****      clr_dot(RCL_annun);
5532:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
5533:src/xeq.c     ****      display();
5534:src/xeq.c     ****      if (ShowRPN) {
5535:src/xeq.c     ****        set_dot(RPN);
5536:src/xeq.c     ****        finish_RPN(); // RPN
5537:src/xeq.c     ****      }
5538:src/xeq.c     **** #ifndef CONSOLE
5539:src/xeq.c     ****      // Avoid accidental restart with R/S or APD after program ends
5540:src/xeq.c     ****      JustStopped = 1;
ARM GAS  /tmp/ccQQPlfu.s 			page 174


5541:src/xeq.c     **** #endif
5542:src/xeq.c     ****    }
5543:src/xeq.c     ****  }
5544:src/xeq.c     **** 
5545:src/xeq.c     **** /* Single step and back step routine
5546:src/xeq.c     ****  */
5547:src/xeq.c     **** void xeq_sst_bst(int kind) 
5548:src/xeq.c     **** {
5549:src/xeq.c     **** 	opcode op;
5550:src/xeq.c     **** 
5551:src/xeq.c     **** 	reset_volatile_state();
5552:src/xeq.c     **** 	if (kind == -1)
5553:src/xeq.c     **** 		decpc();
5554:src/xeq.c     **** 
5555:src/xeq.c     **** 	if (State2.runmode) {
5556:src/xeq.c     **** 		// Display the step
5557:src/xeq.c     **** 		op = getprog(state_pc());
5558:src/xeq.c     **** 		print_step(op);
5559:src/xeq.c     **** 		if (kind == 1) {
5560:src/xeq.c     **** 			// Execute the step on key up
5561:src/xeq.c     **** #ifndef REALBUILD
5562:src/xeq.c     **** 			State2.sst = 1;
5563:src/xeq.c     **** #endif
5564:src/xeq.c     **** 			set_running_on_sst();
5565:src/xeq.c     **** 			incpc();
5566:src/xeq.c     **** 			xeq(op);
5567:src/xeq.c     **** #ifndef REALBUILD
5568:src/xeq.c     **** 			State2.sst = 0;
5569:src/xeq.c     **** #endif
5570:src/xeq.c     **** 			xeq_xrom();  // necessary for code called from XROM
5571:src/xeq.c     **** 			set_running_off_sst();
5572:src/xeq.c     **** 		}
5573:src/xeq.c     **** 	}
5574:src/xeq.c     **** 	else if (kind == 0) {
5575:src/xeq.c     **** 		// Key down in program mode
5576:src/xeq.c     **** 		incpc();
5577:src/xeq.c     **** 		OpCode = 0;
5578:src/xeq.c     **** 	}
5579:src/xeq.c     **** }
5580:src/xeq.c     **** 
5581:src/xeq.c     **** 
5582:src/xeq.c     **** /*
5583:src/xeq.c     ****  *  User command to start or stop execution
5584:src/xeq.c     ****  */
5585:src/xeq.c     **** void op_rs(enum nilop op) {
5586:src/xeq.c     **** #ifndef REALBUILD
5587:src/xeq.c     **** 	// This is for debugging purposes only
5588:src/xeq.c     **** 	// STOP does not appear in XROM normally
5589:src/xeq.c     **** 	if (is_xrom()) {
5590:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
5591:src/xeq.c     **** 			Running = XromRunning = 0;
5592:src/xeq.c     **** 		}
5593:src/xeq.c     **** 		else {
5594:src/xeq.c     **** 			xeq_xrom2();
5595:src/xeq.c     **** 		}
5596:src/xeq.c     **** 		return;
5597:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQQPlfu.s 			page 175


5598:src/xeq.c     **** #endif
5599:src/xeq.c     **** 	if (Running)
5600:src/xeq.c     **** 		set_running_off();
5601:src/xeq.c     **** 	else {
5602:src/xeq.c     **** 		set_running_on();
5603:src/xeq.c     **** 		if (RetStkPtr == 0)
5604:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
5605:src/xeq.c     **** 	}
5606:src/xeq.c     **** }
5607:src/xeq.c     **** 
5608:src/xeq.c     **** 
5609:src/xeq.c     **** /* 
5610:src/xeq.c     ****  *  The following needs to be done each time before any user input is processed.
5611:src/xeq.c     ****  *  On the hardware, RAM is volatile and these pointers and structures need valid values!
5612:src/xeq.c     ****  */
5613:src/xeq.c     **** void xeq_init_contexts(void) {
5614:src/xeq.c     **** 	/*
5615:src/xeq.c     **** 	 *  Compute the sizes of the various memory portions
5616:src/xeq.c     **** 	 */
5617:src/xeq.c     **** 	short int s;
5618:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
5619:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
5620:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
5621:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
5622:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
5623:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
5624:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
5625:src/xeq.c     **** 
5626:src/xeq.c     **** 	/*
5627:src/xeq.c     **** 	 *  Initialise our standard contexts.
5628:src/xeq.c     **** 	 *  We bump the digits for internal calculations.
5629:src/xeq.c     **** 	 */
5630:src/xeq.c     **** 	decContextDefault(&Ctx, DEC_INIT_BASE);
5631:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
5632:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
5633:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
5634:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
5635:src/xeq.c     **** }
5636:src/xeq.c     **** 
5637:src/xeq.c     **** 
5638:src/xeq.c     **** 
5639:src/xeq.c     **** #ifdef INCLUDE_PLOTTING
5640:src/xeq.c     **** /*
5641:src/xeq.c     ****  *  Plotting commands
5642:src/xeq.c     ****  *
5643:src/xeq.c     ****  *  The plot buffer is a range of registers that is treated as pixel data
5644:src/xeq.c     ****  *  The first byte contains the length of the buffer in columns (bytes)
5645:src/xeq.c     ****  */
5646:src/xeq.c     **** 
5647:src/xeq.c     **** /*
5648:src/xeq.c     ****  *  Check register range and return a pointer to the plot data.
5649:src/xeq.c     ****  */
5650:src/xeq.c     **** unsigned char *plot_check_range( int arg, int width, int height )
5651:src/xeq.c     **** {
5652:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
5653:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
5654:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
ARM GAS  /tmp/ccQQPlfu.s 			page 176


5655:src/xeq.c     **** 	int bytes;
5656:src/xeq.c     **** 
5657:src/xeq.c     **** 	if ( width == 0 ) {
5658:src/xeq.c     **** 		width = (int) *p;
5659:src/xeq.c     **** 		height = (int) p[ 1 ];
5660:src/xeq.c     **** 	}
5661:src/xeq.c     **** 
5662:src/xeq.c     **** 	/*
5663:src/xeq.c     **** 	 *  Compute total number of bytes
5664:src/xeq.c     **** 	 */
5665:src/xeq.c     **** 	bytes = 2 + width * height;
5666:src/xeq.c     **** 
5667:src/xeq.c     **** 	/*
5668:src/xeq.c     **** 	 *  Check if we have enough room
5669:src/xeq.c     **** 	 */
5670:src/xeq.c     **** 	if ( width > PAPER_WIDTH || arg + ( bytes + n - 1 ) / n > lim ) {
5671:src/xeq.c     **** 		report_err( ERR_RANGE );
5672:src/xeq.c     **** 		return (unsigned char *) NULL;
5673:src/xeq.c     **** 	}
5674:src/xeq.c     **** 	return p;
5675:src/xeq.c     **** }
5676:src/xeq.c     **** 
5677:src/xeq.c     **** /*
5678:src/xeq.c     ****  * Set up for graphical object display.
5679:src/xeq.c     ****  */
5680:src/xeq.c     **** void cmdplotdisplay( unsigned int arg, enum rarg op )
5681:src/xeq.c     **** {
5682:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
5683:src/xeq.c     **** 		DispPlot = arg + 1;
5684:src/xeq.c     **** 		frozen_display();
5685:src/xeq.c     **** 	}
5686:src/xeq.c     **** }
5687:src/xeq.c     **** 
5688:src/xeq.c     **** /*
5689:src/xeq.c     ****  *  Initialize a block of registers to act as a buffer for plotting
5690:src/xeq.c     ****  *  X contains the maximum width (<= 0 is default: 166)
5691:src/xeq.c     ****  */
5692:src/xeq.c     **** void cmdplotinit( unsigned int arg, enum rarg op )
5693:src/xeq.c     **** {
5694:src/xeq.c     **** 	int sgnx, sgny;
5695:src/xeq.c     **** 	int width = (int) getX_int_sgn( &sgnx );
5696:src/xeq.c     **** 	int height = (int) get_reg_n_int_sgn( regY_idx, &sgny ); 
5697:src/xeq.c     **** 	unsigned char *p;
5698:src/xeq.c     **** 	
5699:src/xeq.c     **** 	if ( sgnx || width == 0 ) {
5700:src/xeq.c     **** 		width = PAPER_WIDTH;
5701:src/xeq.c     **** 	}
5702:src/xeq.c     **** 	if ( sgny || height == 0 ) {
5703:src/xeq.c     **** 		height = 1;
5704:src/xeq.c     **** 	}
5705:src/xeq.c     **** 	else {
5706:src/xeq.c     **** 		/*
5707:src/xeq.c     **** 		 *  Make height count the byte rows
5708:src/xeq.c     **** 		 */
5709:src/xeq.c     **** 		height = ( height + 7 ) >> 3;
5710:src/xeq.c     **** 	}
5711:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 177


5712:src/xeq.c     **** 	p = plot_check_range( arg, width, height );
5713:src/xeq.c     **** 	if ( p != NULL ) {
5714:src/xeq.c     **** 		*p++ = (unsigned char) width;
5715:src/xeq.c     **** 		*p++ = (unsigned char) height;
5716:src/xeq.c     **** 		xset( p, 0, width * height );
5717:src/xeq.c     **** 	}
5718:src/xeq.c     **** }
5719:src/xeq.c     **** 
5720:src/xeq.c     **** /*
5721:src/xeq.c     ****  *  Return the width and height of the plotting block
5722:src/xeq.c     ****  */
5723:src/xeq.c     **** void cmdplotdim( unsigned int arg, enum rarg op )
5724:src/xeq.c     **** {
5725:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5726:src/xeq.c     **** 	if ( p != NULL ) {
5727:src/xeq.c     **** 		lift2_if_enabled();
5728:src/xeq.c     **** 		setX_int_sgn( p[ 0 ], 0 ); // width
5729:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
5730:src/xeq.c     **** 	}
5731:src/xeq.c     **** }
5732:src/xeq.c     **** 
5733:src/xeq.c     **** /*
5734:src/xeq.c     ****  *  All pixel related commands
5735:src/xeq.c     ****  *  X is the horizontal position 0..width
5736:src/xeq.c     ****  *  Y is the vertical position 0..7
5737:src/xeq.c     ****  */
5738:src/xeq.c     **** void cmdplotpixel( unsigned int arg, enum rarg op )
5739:src/xeq.c     **** {
5740:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5741:src/xeq.c     **** 	if ( p != NULL ) {
5742:src/xeq.c     **** 		/*
5743:src/xeq.c     **** 		 *  Get row from Y
5744:src/xeq.c     **** 		 */
5745:src/xeq.c     **** 		int sgn;
5746:src/xeq.c     **** 		unsigned int row = (unsigned int) get_reg_n_int_sgn( regY_idx, &sgn );
5747:src/xeq.c     **** 		int pix = 0;
5748:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
5749:src/xeq.c     **** 			/*
5750:src/xeq.c     **** 			 *  Row is OK, get column from X
5751:src/xeq.c     **** 			 */
5752:src/xeq.c     **** 			unsigned int width = (unsigned int) *p;
5753:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
5754:src/xeq.c     **** 			if ( sgn == 0 && column < width ) {
5755:src/xeq.c     **** 				/*
5756:src/xeq.c     **** 				 *  Modify the bit in the correct byte
5757:src/xeq.c     **** 				 */
5758:src/xeq.c     **** 				pix = 1 << ( row & 7 );
5759:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
5760:src/xeq.c     **** 
5761:src/xeq.c     **** 				if ( op == RARG_PLOT_SETPIX ) {
5762:src/xeq.c     **** 					*p |= pix;
5763:src/xeq.c     **** 				}
5764:src/xeq.c     **** 				else if ( op == RARG_PLOT_CLRPIX ) {
5765:src/xeq.c     **** 					*p &= ~pix;
5766:src/xeq.c     **** 				}
5767:src/xeq.c     **** 				else if ( op == RARG_PLOT_FLIPPIX ) {
5768:src/xeq.c     **** 					*p ^= pix;
ARM GAS  /tmp/ccQQPlfu.s 			page 178


5769:src/xeq.c     **** 				}
5770:src/xeq.c     **** 			}
5771:src/xeq.c     **** 		}
5772:src/xeq.c     **** 		if ( op == RARG_PLOT_ISSET ) {
5773:src/xeq.c     **** 			fin_tst( *p & pix );
5774:src/xeq.c     **** 		}
5775:src/xeq.c     **** 	}
5776:src/xeq.c     **** }
5777:src/xeq.c     **** #endif
5778:src/xeq.c     **** 
5779:src/xeq.c     **** 
5780:src/xeq.c     **** /*
5781:src/xeq.c     ****  *  We don't allow some commands from a running program
5782:src/xeq.c     ****  */
5783:src/xeq.c     **** int not_running(void) {
5784:src/xeq.c     **** 	if ( Running ) {
5785:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5786:src/xeq.c     **** 		return 0;
5787:src/xeq.c     **** 	}
5788:src/xeq.c     **** 	return 1;
5789:src/xeq.c     **** }
5790:src/xeq.c     **** 
5791:src/xeq.c     **** /*
5792:src/xeq.c     ****  *  Handle the Running Flag
5793:src/xeq.c     ****  */
5794:src/xeq.c     **** void set_running_off_sst() {
5795:src/xeq.c     **** 	Running = 0;
5796:src/xeq.c     **** }
5797:src/xeq.c     **** 
5798:src/xeq.c     **** void set_running_on_sst() {
5799:src/xeq.c     **** 	Running = 1;
5800:src/xeq.c     **** }
5801:src/xeq.c     **** 
5802:src/xeq.c     **** void set_running_off() {
 3535              		.loc 1 5802 6 view .LVU964
 3536              	.LBB1560:
5803:src/xeq.c     **** 	set_running_off_sst();
 3537              		.loc 1 5803 2 view .LVU965
 3538              	.LBB1561:
 3539              	.LBI1561:
5794:src/xeq.c     **** 	Running = 0;
 3540              		.loc 1 5794 6 view .LVU966
 3541              	.LBB1562:
5795:src/xeq.c     **** }
 3542              		.loc 1 5795 2 view .LVU967
5795:src/xeq.c     **** }
 3543              		.loc 1 5795 10 is_stmt 0 view .LVU968
 3544 0070 084A     		ldr	r2, .L290+8
 3545 0072 1160     		str	r1, [r2]
 3546              	.LBE1562:
 3547              	.LBE1561:
5804:src/xeq.c     **** 	State.entryp = 0;
 3548              		.loc 1 5804 2 is_stmt 1 view .LVU969
 3549              		.loc 1 5804 15 is_stmt 0 view .LVU970
 3550 0074 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 3551 0078 61F30412 		bfi	r2, r1, #4, #1
 3552 007c 83F8DD27 		strb	r2, [r3, #2013]
ARM GAS  /tmp/ccQQPlfu.s 			page 179


5805:src/xeq.c     **** 	dot( RCL_annun, 0);
 3553              		.loc 1 5805 2 is_stmt 1 view .LVU971
 3554              	.LBE1560:
 3555              	.LBE1559:
2264:src/xeq.c     **** 
 3556              		.loc 1 2264 1 is_stmt 0 view .LVU972
 3557 0080 BDE87040 		pop	{r4, r5, r6, lr}
 3558              		.cfi_restore 14
 3559              		.cfi_restore 6
 3560              		.cfi_restore 5
 3561              		.cfi_restore 4
 3562              		.cfi_def_cfa_offset 0
 3563              	.LBB1564:
 3564              	.LBB1563:
 3565              		.loc 1 5805 2 view .LVU973
 3566 0084 8A20     		movs	r0, #138
 3567 0086 FFF7FEBF 		b	dot
 3568              	.LVL265:
 3569              	.L291:
 3570 008a 00BF     		.align	2
 3571              	.L290:
 3572 008c 00000000 		.word	main_ram
 3573 0090 00000000 		.word	RetStk
 3574 0094 00000000 		.word	Running
 3575              	.LBE1563:
 3576              	.LBE1564:
 3577              		.cfi_endproc
 3578              	.LFE154:
 3580              		.section	.text.user_pc,"ax",%progbits
 3581              		.align	1
 3582              		.p2align 2,,3
 3583              		.global	user_pc
 3584              		.syntax unified
 3585              		.thumb
 3586              		.thumb_func
 3587              		.fpu fpv4-sp-d16
 3589              	user_pc:
 3590              	.LVL266:
 3591              	.LFB25:
 488:src/xeq.c     **** 	unsigned int n = 1;
 3592              		.loc 1 488 39 is_stmt 1 view -0
 3593              		.cfi_startproc
 3594              		@ args = 0, pretend = 0, frame = 0
 3595              		@ frame_needed = 0, uses_anonymous_args = 0
 3596              		@ link register save eliminated.
 489:src/xeq.c     **** 	unsigned int base;
 3597              		.loc 1 489 2 view .LVU975
 490:src/xeq.c     **** 
 3598              		.loc 1 490 2 view .LVU976
 493:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3599              		.loc 1 493 2 view .LVU977
 493:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3600              		.loc 1 493 5 is_stmt 0 view .LVU978
 3601 0000 0346     		mov	r3, r0
 3602 0002 20B1     		cbz	r0, .L293
 493:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3603              		.loc 1 493 17 discriminator 1 view .LVU979
ARM GAS  /tmp/ccQQPlfu.s 			page 180


 3604 0004 820B     		lsrs	r2, r0, #14
 493:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3605              		.loc 1 493 14 discriminator 1 view .LVU980
 3606 0006 032A     		cmp	r2, #3
 3607 0008 01D0     		beq	.L293
 3608 000a FFF7FEBF 		b	user_pc.part.0
 3609              	.LVL267:
 3610              	.L293:
 494:src/xeq.c     **** #else
 3611              		.loc 1 494 3 is_stmt 1 view .LVU981
 494:src/xeq.c     **** #else
 3612              		.loc 1 494 24 is_stmt 0 view .LVU982
 3613 000e C3F30D00 		ubfx	r0, r3, #0, #14
 3614              	.LVL268:
 507:src/xeq.c     **** 
 3615              		.loc 1 507 1 view .LVU983
 3616 0012 7047     		bx	lr
 3617              		.cfi_endproc
 3618              	.LFE25:
 3620              		.section	.text.find_user_pc,"ax",%progbits
 3621              		.align	1
 3622              		.p2align 2,,3
 3623              		.global	find_user_pc
 3624              		.syntax unified
 3625              		.thumb
 3626              		.thumb_func
 3627              		.fpu fpv4-sp-d16
 3629              	find_user_pc:
 3630              	.LVL269:
 3631              	.LFB26:
 511:src/xeq.c     **** 	unsigned int upc = state_pc();
 3632              		.loc 1 511 48 is_stmt 1 view -0
 3633              		.cfi_startproc
 3634              		@ args = 0, pretend = 0, frame = 0
 3635              		@ frame_needed = 0, uses_anonymous_args = 0
 512:src/xeq.c     **** 	const int libp = isLIB(upc);
 3636              		.loc 1 512 2 view .LVU985
 511:src/xeq.c     **** 	unsigned int upc = state_pc();
 3637              		.loc 1 511 48 is_stmt 0 view .LVU986
 3638 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3639              		.cfi_def_cfa_offset 24
 3640              		.cfi_offset 3, -24
 3641              		.cfi_offset 4, -20
 3642              		.cfi_offset 5, -16
 3643              		.cfi_offset 6, -12
 3644              		.cfi_offset 7, -8
 3645              		.cfi_offset 14, -4
 512:src/xeq.c     **** 	const int libp = isLIB(upc);
 3646              		.loc 1 512 21 view .LVU987
 3647 0002 124B     		ldr	r3, .L309
 3648 0004 1B68     		ldr	r3, [r3]
 3649 0006 B3F8E037 		ldrh	r3, [r3, #2016]
 3650              	.LVL270:
 513:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 3651              		.loc 1 513 2 is_stmt 1 view .LVU988
 514:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3652              		.loc 1 514 2 view .LVU989
ARM GAS  /tmp/ccQQPlfu.s 			page 181


 514:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3653              		.loc 1 514 43 is_stmt 0 view .LVU990
 3654 000a 13F44044 		ands	r4, r3, #49152
 3655              	.LVL271:
 514:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3656              		.loc 1 514 43 view .LVU991
 3657 000e 1ABF     		itte	ne
 3658 0010 03F44045 		andne	r5, r3, #49152
 3659 0014 0135     		addne	r5, r5, #1
 3660 0016 2546     		moveq	r5, r4
 3661              	.LVL272:
 515:src/xeq.c     **** #ifndef REALBUILD
 3662              		.loc 1 515 2 is_stmt 1 view .LVU992
 517:src/xeq.c     **** 		return addrXROM(target);
 3663              		.loc 1 517 6 is_stmt 0 view .LVU993
 3664 0018 9B0B     		lsrs	r3, r3, #14
 3665              	.LVL273:
 515:src/xeq.c     **** #ifndef REALBUILD
 3666              		.loc 1 515 28 view .LVU994
 3667 001a 003C     		subs	r4, r4, #0
 515:src/xeq.c     **** #ifndef REALBUILD
 3668              		.loc 1 515 28 view .LVU995
 3669 001c 18BF     		it	ne
 3670 001e 0124     		movne	r4, #1
 3671              	.LVL274:
 517:src/xeq.c     **** 		return addrXROM(target);
 3672              		.loc 1 517 2 is_stmt 1 view .LVU996
 517:src/xeq.c     **** 		return addrXROM(target);
 3673              		.loc 1 517 5 is_stmt 0 view .LVU997
 3674 0020 032B     		cmp	r3, #3
 511:src/xeq.c     **** 	unsigned int upc = state_pc();
 3675              		.loc 1 511 48 view .LVU998
 3676 0022 0646     		mov	r6, r0
 517:src/xeq.c     **** 		return addrXROM(target);
 3677              		.loc 1 517 5 view .LVU999
 3678 0024 0ED0     		beq	.L307
 3679              	.LBB1565:
 523:src/xeq.c     **** 			return oldbase;
 3680              		.loc 1 523 7 view .LVU1000
 3681 0026 0A4F     		ldr	r7, .L309+4
 3682 0028 05E0     		b	.L302
 3683              	.LVL275:
 3684              	.L304:
 522:src/xeq.c     **** 		if (PcWrapped)
 3685              		.loc 1 522 10 view .LVU1001
 3686 002a FFF7FEFF 		bl	do_inc
 3687              	.LVL276:
 523:src/xeq.c     **** 			return oldbase;
 3688              		.loc 1 523 6 view .LVU1002
 3689 002e 3B68     		ldr	r3, [r7]
 3690              	.LVL277:
 523:src/xeq.c     **** 			return oldbase;
 3691              		.loc 1 523 3 is_stmt 1 view .LVU1003
 3692 0030 0134     		adds	r4, r4, #1
 3693              	.LVL278:
 523:src/xeq.c     **** 			return oldbase;
 3694              		.loc 1 523 6 is_stmt 0 view .LVU1004
ARM GAS  /tmp/ccQQPlfu.s 			page 182


 3695 0032 2BB9     		cbnz	r3, .L300
 522:src/xeq.c     **** 		if (PcWrapped)
 3696              		.loc 1 522 10 view .LVU1005
 3697 0034 0546     		mov	r5, r0
 3698              	.LVL279:
 3699              	.L302:
 521:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 3700              		.loc 1 521 3 is_stmt 1 view .LVU1006
 522:src/xeq.c     **** 		if (PcWrapped)
 3701              		.loc 1 522 3 view .LVU1007
 522:src/xeq.c     **** 		if (PcWrapped)
 3702              		.loc 1 522 3 is_stmt 0 view .LVU1008
 3703              	.LBE1565:
 520:src/xeq.c     **** 		const unsigned int oldbase = base;
 3704              		.loc 1 520 8 is_stmt 1 view .LVU1009
 520:src/xeq.c     **** 		const unsigned int oldbase = base;
 3705              		.loc 1 520 8 is_stmt 0 view .LVU1010
 3706 0036 A642     		cmp	r6, r4
 3707              	.LBB1566:
 522:src/xeq.c     **** 		if (PcWrapped)
 3708              		.loc 1 522 10 view .LVU1011
 3709 0038 2846     		mov	r0, r5
 3710 003a 4FF00001 		mov	r1, #0
 3711              	.LBE1566:
 520:src/xeq.c     **** 		const unsigned int oldbase = base;
 3712              		.loc 1 520 8 view .LVU1012
 3713 003e F4D8     		bhi	.L304
 3714              	.LVL280:
 3715              	.L300:
 527:src/xeq.c     **** 
 3716              		.loc 1 527 1 view .LVU1013
 3717 0040 2846     		mov	r0, r5
 3718              	.LVL281:
 527:src/xeq.c     **** 
 3719              		.loc 1 527 1 view .LVU1014
 3720 0042 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3721              	.LVL282:
 3722              	.L307:
 518:src/xeq.c     **** #endif
 3723              		.loc 1 518 3 is_stmt 1 view .LVU1015
 518:src/xeq.c     **** #endif
 3724              		.loc 1 518 10 is_stmt 0 view .LVU1016
 3725 0044 40F44045 		orr	r5, r0, #49152
 3726              	.LVL283:
 527:src/xeq.c     **** 
 3727              		.loc 1 527 1 view .LVU1017
 3728 0048 2846     		mov	r0, r5
 3729              	.LVL284:
 527:src/xeq.c     **** 
 3730              		.loc 1 527 1 view .LVU1018
 3731 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3732              	.LVL285:
 3733              	.L310:
 527:src/xeq.c     **** 
 3734              		.loc 1 527 1 view .LVU1019
 3735              		.align	2
 3736              	.L309:
ARM GAS  /tmp/ccQQPlfu.s 			page 183


 3737 004c 00000000 		.word	main_ram
 3738 0050 00000000 		.word	PcWrapped
 3739              		.cfi_endproc
 3740              	.LFE26:
 3742              		.section	.text.report_err,"ax",%progbits
 3743              		.align	1
 3744              		.p2align 2,,3
 3745              		.global	report_err
 3746              		.syntax unified
 3747              		.thumb
 3748              		.thumb_func
 3749              		.fpu fpv4-sp-d16
 3751              	report_err:
 3752              	.LVL286:
 3753              	.LFB28:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3754              		.loc 1 540 38 is_stmt 1 view -0
 3755              		.cfi_startproc
 3756              		@ args = 0, pretend = 0, frame = 0
 3757              		@ frame_needed = 0, uses_anonymous_args = 0
 541:src/xeq.c     **** 		Error = e;
 3758              		.loc 1 541 2 view .LVU1021
 541:src/xeq.c     **** 		Error = e;
 3759              		.loc 1 541 12 is_stmt 0 view .LVU1022
 3760 0000 064A     		ldr	r2, .L317
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3761              		.loc 1 540 38 view .LVU1023
 3762 0002 10B5     		push	{r4, lr}
 3763              		.cfi_def_cfa_offset 8
 3764              		.cfi_offset 4, -8
 3765              		.cfi_offset 14, -4
 541:src/xeq.c     **** 		Error = e;
 3766              		.loc 1 541 12 view .LVU1024
 3767 0004 1468     		ldr	r4, [r2]
 541:src/xeq.c     **** 		Error = e;
 3768              		.loc 1 541 5 view .LVU1025
 3769 0006 0CB9     		cbnz	r4, .L314
 3770              	.LVL287:
 3771              	.LBB1569:
 3772              	.LBI1569:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3773              		.loc 1 540 5 is_stmt 1 view .LVU1026
 3774              	.LBB1570:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 3775              		.loc 1 542 3 view .LVU1027
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 3776              		.loc 1 542 9 is_stmt 0 view .LVU1028
 3777 0008 1060     		str	r0, [r2]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 3778              		.loc 1 543 3 is_stmt 1 view .LVU1029
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 3779              		.loc 1 543 6 is_stmt 0 view .LVU1030
 3780 000a 10B1     		cbz	r0, .L316
 3781              	.LVL288:
 3782              	.L314:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 3783              		.loc 1 543 6 view .LVU1031
ARM GAS  /tmp/ccQQPlfu.s 			page 184


 3784              	.LBE1570:
 3785              	.LBE1569:
 548:src/xeq.c     **** }
 3786              		.loc 1 548 9 view .LVU1032
 3787 000c 0124     		movs	r4, #1
 549:src/xeq.c     **** 
 3788              		.loc 1 549 1 view .LVU1033
 3789 000e 2046     		mov	r0, r4
 3790              	.LVL289:
 549:src/xeq.c     **** 
 3791              		.loc 1 549 1 view .LVU1034
 3792 0010 10BD     		pop	{r4, pc}
 3793              	.LVL290:
 3794              	.L316:
 3795              	.LBB1572:
 3796              	.LBB1571:
 544:src/xeq.c     **** 			return 0;
 3797              		.loc 1 544 4 is_stmt 1 view .LVU1035
 3798 0012 FFF7FEFF 		bl	error_message
 3799              	.LVL291:
 545:src/xeq.c     **** 		}
 3800              		.loc 1 545 4 view .LVU1036
 545:src/xeq.c     **** 		}
 3801              		.loc 1 545 4 is_stmt 0 view .LVU1037
 3802              	.LBE1571:
 3803              	.LBE1572:
 549:src/xeq.c     **** 
 3804              		.loc 1 549 1 view .LVU1038
 3805 0016 2046     		mov	r0, r4
 3806 0018 10BD     		pop	{r4, pc}
 3807              	.L318:
 3808 001a 00BF     		.align	2
 3809              	.L317:
 3810 001c 00000000 		.word	Error
 3811              		.cfi_endproc
 3812              	.LFE28:
 3814              		.section	.text.report_warn,"ax",%progbits
 3815              		.align	1
 3816              		.p2align 2,,3
 3817              		.global	report_warn
 3818              		.syntax unified
 3819              		.thumb
 3820              		.thumb_func
 3821              		.fpu fpv4-sp-d16
 3823              	report_warn:
 3824              	.LVL292:
 3825              	.LFB29:
 554:src/xeq.c     **** 	if (Running) {
 3826              		.loc 1 554 39 is_stmt 1 view -0
 3827              		.cfi_startproc
 3828              		@ args = 0, pretend = 0, frame = 0
 3829              		@ frame_needed = 0, uses_anonymous_args = 0
 555:src/xeq.c     **** 		return report_err(e);
 3830              		.loc 1 555 2 view .LVU1040
 555:src/xeq.c     **** 		return report_err(e);
 3831              		.loc 1 555 6 is_stmt 0 view .LVU1041
 3832 0000 114B     		ldr	r3, .L325
ARM GAS  /tmp/ccQQPlfu.s 			page 185


 554:src/xeq.c     **** 	if (Running) {
 3833              		.loc 1 554 39 view .LVU1042
 3834 0002 70B5     		push	{r4, r5, r6, lr}
 3835              		.cfi_def_cfa_offset 16
 3836              		.cfi_offset 4, -16
 3837              		.cfi_offset 5, -12
 3838              		.cfi_offset 6, -8
 3839              		.cfi_offset 14, -4
 555:src/xeq.c     **** 		return report_err(e);
 3840              		.loc 1 555 5 view .LVU1043
 3841 0004 1D68     		ldr	r5, [r3]
 554:src/xeq.c     **** 	if (Running) {
 3842              		.loc 1 554 39 view .LVU1044
 3843 0006 0446     		mov	r4, r0
 555:src/xeq.c     **** 		return report_err(e);
 3844              		.loc 1 555 5 view .LVU1045
 3845 0008 5DB1     		cbz	r5, .L320
 556:src/xeq.c     **** 	}
 3846              		.loc 1 556 3 is_stmt 1 view .LVU1046
 3847              	.LVL293:
 3848              	.LBB1581:
 3849              	.LBI1581:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3850              		.loc 1 540 5 view .LVU1047
 3851              	.LBB1582:
 541:src/xeq.c     **** 		Error = e;
 3852              		.loc 1 541 2 view .LVU1048
 541:src/xeq.c     **** 		Error = e;
 3853              		.loc 1 541 12 is_stmt 0 view .LVU1049
 3854 000a 104B     		ldr	r3, .L325+4
 3855 000c 1D68     		ldr	r5, [r3]
 541:src/xeq.c     **** 		Error = e;
 3856              		.loc 1 541 5 view .LVU1050
 3857 000e 15B1     		cbz	r5, .L321
 3858              	.L323:
 548:src/xeq.c     **** }
 3859              		.loc 1 548 9 view .LVU1051
 3860 0010 0125     		movs	r5, #1
 3861              	.LVL294:
 3862              	.L319:
 548:src/xeq.c     **** }
 3863              		.loc 1 548 9 view .LVU1052
 3864              	.LBE1582:
 3865              	.LBE1581:
 565:src/xeq.c     **** 
 3866              		.loc 1 565 1 view .LVU1053
 3867 0012 2846     		mov	r0, r5
 3868 0014 70BD     		pop	{r4, r5, r6, pc}
 3869              	.LVL295:
 3870              	.L321:
 3871              	.LBB1586:
 3872              	.LBB1585:
 3873              	.LBB1583:
 3874              	.LBI1583:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3875              		.loc 1 540 5 is_stmt 1 view .LVU1054
 3876              	.LBB1584:
ARM GAS  /tmp/ccQQPlfu.s 			page 186


 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 3877              		.loc 1 542 3 view .LVU1055
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 3878              		.loc 1 542 9 is_stmt 0 view .LVU1056
 3879 0016 1860     		str	r0, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 3880              		.loc 1 543 3 is_stmt 1 view .LVU1057
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 3881              		.loc 1 543 6 is_stmt 0 view .LVU1058
 3882 0018 0028     		cmp	r0, #0
 3883 001a F9D1     		bne	.L323
 544:src/xeq.c     **** 			return 0;
 3884              		.loc 1 544 4 is_stmt 1 view .LVU1059
 3885 001c FFF7FEFF 		bl	error_message
 3886              	.LVL296:
 545:src/xeq.c     **** 		}
 3887              		.loc 1 545 4 view .LVU1060
 545:src/xeq.c     **** 		}
 3888              		.loc 1 545 11 is_stmt 0 view .LVU1061
 3889 0020 F7E7     		b	.L319
 3890              	.LVL297:
 3891              	.L320:
 545:src/xeq.c     **** 		}
 3892              		.loc 1 545 11 view .LVU1062
 3893              	.LBE1584:
 3894              	.LBE1583:
 3895              	.LBE1585:
 3896              	.LBE1586:
 3897              	.LBB1587:
 3898              	.LBI1587:
 554:src/xeq.c     **** 	if (Running) {
 3899              		.loc 1 554 5 is_stmt 1 view .LVU1063
 3900              	.LBB1588:
 558:src/xeq.c     **** #ifndef CONSOLE
 3901              		.loc 1 558 2 view .LVU1064
 3902 0022 FFF7FEFF 		bl	error_message
 3903              	.LVL298:
 560:src/xeq.c     **** 	JustDisplayed = 1;
 3904              		.loc 1 560 2 view .LVU1065
 560:src/xeq.c     **** 	JustDisplayed = 1;
 3905              		.loc 1 560 21 is_stmt 0 view .LVU1066
 3906 0026 0A4A     		ldr	r2, .L325+8
 561:src/xeq.c     **** 	ShowRPN = 1;
 3907              		.loc 1 561 16 view .LVU1067
 3908 0028 0A4E     		ldr	r6, .L325+12
 560:src/xeq.c     **** 	JustDisplayed = 1;
 3909              		.loc 1 560 21 view .LVU1068
 3910 002a D17D     		ldrb	r1, [r2, #23]	@ zero_extendqisi2
 562:src/xeq.c     **** #endif
 3911              		.loc 1 562 10 view .LVU1069
 3912 002c 0A48     		ldr	r0, .L325+16
 560:src/xeq.c     **** 	JustDisplayed = 1;
 3913              		.loc 1 560 21 view .LVU1070
 3914 002e 65F30411 		bfi	r1, r5, #4, #1
 564:src/xeq.c     **** }
 3915              		.loc 1 564 11 view .LVU1071
 3916 0032 251E     		subs	r5, r4, #0
ARM GAS  /tmp/ccQQPlfu.s 			page 187


 561:src/xeq.c     **** 	ShowRPN = 1;
 3917              		.loc 1 561 16 view .LVU1072
 3918 0034 4FF00103 		mov	r3, #1
 560:src/xeq.c     **** 	JustDisplayed = 1;
 3919              		.loc 1 560 21 view .LVU1073
 3920 0038 D175     		strb	r1, [r2, #23]
 561:src/xeq.c     **** 	ShowRPN = 1;
 3921              		.loc 1 561 2 is_stmt 1 view .LVU1074
 564:src/xeq.c     **** }
 3922              		.loc 1 564 11 is_stmt 0 view .LVU1075
 3923 003a 18BF     		it	ne
 3924 003c 0125     		movne	r5, #1
 562:src/xeq.c     **** #endif
 3925              		.loc 1 562 10 view .LVU1076
 3926 003e 0360     		str	r3, [r0]
 561:src/xeq.c     **** 	ShowRPN = 1;
 3927              		.loc 1 561 16 view .LVU1077
 3928 0040 3360     		str	r3, [r6]
 562:src/xeq.c     **** #endif
 3929              		.loc 1 562 2 is_stmt 1 view .LVU1078
 564:src/xeq.c     **** }
 3930              		.loc 1 564 2 view .LVU1079
 3931              	.LVL299:
 564:src/xeq.c     **** }
 3932              		.loc 1 564 2 is_stmt 0 view .LVU1080
 3933              	.LBE1588:
 3934              	.LBE1587:
 565:src/xeq.c     **** 
 3935              		.loc 1 565 1 view .LVU1081
 3936 0042 2846     		mov	r0, r5
 3937 0044 70BD     		pop	{r4, r5, r6, pc}
 3938              	.LVL300:
 3939              	.L326:
 565:src/xeq.c     **** 
 3940              		.loc 1 565 1 view .LVU1082
 3941 0046 00BF     		.align	2
 3942              	.L325:
 3943 0048 00000000 		.word	Running
 3944 004c 00000000 		.word	Error
 3945 0050 00000000 		.word	StateWhileOn
 3946 0054 00000000 		.word	JustDisplayed
 3947 0058 00000000 		.word	ShowRPN
 3948              		.cfi_endproc
 3949              	.LFE29:
 3951              		.section	.text.bad_mode_error,"ax",%progbits
 3952              		.align	1
 3953              		.p2align 2,,3
 3954              		.global	bad_mode_error
 3955              		.syntax unified
 3956              		.thumb
 3957              		.thumb_func
 3958              		.fpu fpv4-sp-d16
 3960              	bad_mode_error:
 3961              	.LFB30:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 3962              		.loc 1 569 27 is_stmt 1 view -0
 3963              		.cfi_startproc
ARM GAS  /tmp/ccQQPlfu.s 			page 188


 3964              		@ args = 0, pretend = 0, frame = 0
 3965              		@ frame_needed = 0, uses_anonymous_args = 0
 3966              		@ link register save eliminated.
 570:src/xeq.c     **** }
 3967              		.loc 1 570 2 view .LVU1084
 3968              	.LVL301:
 3969              	.LBB1593:
 3970              	.LBI1593:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3971              		.loc 1 540 5 view .LVU1085
 3972              	.LBB1594:
 541:src/xeq.c     **** 		Error = e;
 3973              		.loc 1 541 2 view .LVU1086
 541:src/xeq.c     **** 		Error = e;
 3974              		.loc 1 541 12 is_stmt 0 view .LVU1087
 3975 0000 024B     		ldr	r3, .L329
 541:src/xeq.c     **** 		Error = e;
 3976              		.loc 1 541 5 view .LVU1088
 3977 0002 1A68     		ldr	r2, [r3]
 3978 0004 0AB9     		cbnz	r2, .L327
 3979              	.LVL302:
 3980              	.LBB1595:
 3981              	.LBI1595:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3982              		.loc 1 540 5 is_stmt 1 view .LVU1089
 3983              	.LBB1596:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 3984              		.loc 1 542 3 view .LVU1090
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 3985              		.loc 1 542 9 is_stmt 0 view .LVU1091
 3986 0006 0D22     		movs	r2, #13
 3987 0008 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 3988              		.loc 1 543 3 is_stmt 1 view .LVU1092
 3989              	.LVL303:
 3990              	.L327:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 3991              		.loc 1 543 3 is_stmt 0 view .LVU1093
 3992              	.LBE1596:
 3993              	.LBE1595:
 3994              	.LBE1594:
 3995              	.LBE1593:
 571:src/xeq.c     **** 
 3996              		.loc 1 571 1 view .LVU1094
 3997 000a 7047     		bx	lr
 3998              	.L330:
 3999              		.align	2
 4000              	.L329:
 4001 000c 00000000 		.word	Error
 4002              		.cfi_endproc
 4003              	.LFE30:
 4005              		.section	.text.cmderr,"ax",%progbits
 4006              		.align	1
 4007              		.p2align 2,,3
 4008              		.global	cmderr
 4009              		.syntax unified
 4010              		.thumb
ARM GAS  /tmp/ccQQPlfu.s 			page 189


 4011              		.thumb_func
 4012              		.fpu fpv4-sp-d16
 4014              	cmderr:
 4015              	.LVL304:
 4016              	.LFB31:
 575:src/xeq.c     **** 	report_err(arg);
 4017              		.loc 1 575 45 is_stmt 1 view -0
 4018              		.cfi_startproc
 4019              		@ args = 0, pretend = 0, frame = 0
 4020              		@ frame_needed = 0, uses_anonymous_args = 0
 4021              		@ link register save eliminated.
 576:src/xeq.c     **** }
 4022              		.loc 1 576 2 view .LVU1096
 4023              	.LBB1601:
 4024              	.LBB1602:
 541:src/xeq.c     **** 		Error = e;
 4025              		.loc 1 541 12 is_stmt 0 view .LVU1097
 4026 0000 034A     		ldr	r2, .L336
 541:src/xeq.c     **** 		Error = e;
 4027              		.loc 1 541 5 view .LVU1098
 4028 0002 1168     		ldr	r1, [r2]
 4029              	.LVL305:
 541:src/xeq.c     **** 		Error = e;
 4030              		.loc 1 541 5 view .LVU1099
 4031              	.LBE1602:
 4032              	.LBI1601:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4033              		.loc 1 540 5 is_stmt 1 view .LVU1100
 4034              	.LBB1607:
 541:src/xeq.c     **** 		Error = e;
 4035              		.loc 1 541 2 view .LVU1101
 541:src/xeq.c     **** 		Error = e;
 4036              		.loc 1 541 5 is_stmt 0 view .LVU1102
 4037 0004 09B9     		cbnz	r1, .L331
 4038              	.LVL306:
 4039              	.LBB1603:
 4040              	.LBI1603:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4041              		.loc 1 540 5 is_stmt 1 view .LVU1103
 4042              	.LBB1604:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4043              		.loc 1 542 3 view .LVU1104
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4044              		.loc 1 542 9 is_stmt 0 view .LVU1105
 4045 0006 1060     		str	r0, [r2]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 4046              		.loc 1 543 3 is_stmt 1 view .LVU1106
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 4047              		.loc 1 543 6 is_stmt 0 view .LVU1107
 4048 0008 00B1     		cbz	r0, .L335
 4049              	.LVL307:
 4050              	.L331:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 4051              		.loc 1 543 6 view .LVU1108
 4052              	.LBE1604:
 4053              	.LBE1603:
 4054              	.LBE1607:
ARM GAS  /tmp/ccQQPlfu.s 			page 190


 4055              	.LBE1601:
 577:src/xeq.c     **** 
 4056              		.loc 1 577 1 view .LVU1109
 4057 000a 7047     		bx	lr
 4058              	.LVL308:
 4059              	.L335:
 4060              	.LBB1609:
 4061              	.LBB1608:
 4062              	.LBB1606:
 4063              	.LBB1605:
 544:src/xeq.c     **** 			return 0;
 4064              		.loc 1 544 4 is_stmt 1 view .LVU1110
 4065 000c FFF7FEBF 		b	error_message
 4066              	.LVL309:
 4067              	.L337:
 544:src/xeq.c     **** 			return 0;
 4068              		.loc 1 544 4 is_stmt 0 view .LVU1111
 4069              		.align	2
 4070              	.L336:
 4071 0010 00000000 		.word	Error
 4072              	.LBE1605:
 4073              	.LBE1606:
 4074              	.LBE1608:
 4075              	.LBE1609:
 4076              		.cfi_endproc
 4077              	.LFE31:
 4079              		.section	.text.cmdmsg,"ax",%progbits
 4080              		.align	1
 4081              		.p2align 2,,3
 4082              		.global	cmdmsg
 4083              		.syntax unified
 4084              		.thumb
 4085              		.thumb_func
 4086              		.fpu fpv4-sp-d16
 4088              	cmdmsg:
 4089              	.LVL310:
 4090              	.LFB32:
 581:src/xeq.c     **** 	error_message(arg);
 4091              		.loc 1 581 45 is_stmt 1 view -0
 4092              		.cfi_startproc
 4093              		@ args = 0, pretend = 0, frame = 0
 4094              		@ frame_needed = 0, uses_anonymous_args = 0
 4095              		@ link register save eliminated.
 582:src/xeq.c     **** }
 4096              		.loc 1 582 2 view .LVU1113
 4097 0000 FFF7FEBF 		b	error_message
 4098              	.LVL311:
 582:src/xeq.c     **** }
 4099              		.loc 1 582 2 is_stmt 0 view .LVU1114
 4100              		.cfi_endproc
 4101              	.LFE32:
 4103              		.section	.text.rarg_roundingmode,"ax",%progbits
 4104              		.align	1
 4105              		.p2align 2,,3
 4106              		.global	rarg_roundingmode
 4107              		.syntax unified
 4108              		.thumb
ARM GAS  /tmp/ccQQPlfu.s 			page 191


 4109              		.thumb_func
 4110              		.fpu fpv4-sp-d16
 4112              	rarg_roundingmode:
 4113              	.LVL312:
 4114              	.LFB35:
 617:src/xeq.c     **** 	UState.rounding_mode = arg;
 4115              		.loc 1 617 56 is_stmt 1 view -0
 4116              		.cfi_startproc
 4117              		@ args = 0, pretend = 0, frame = 0
 4118              		@ frame_needed = 0, uses_anonymous_args = 0
 4119              		@ link register save eliminated.
 618:src/xeq.c     **** }
 4120              		.loc 1 618 2 view .LVU1116
 618:src/xeq.c     **** }
 4121              		.loc 1 618 23 is_stmt 0 view .LVU1117
 4122 0000 044B     		ldr	r3, .L340
 4123 0002 1B68     		ldr	r3, [r3]
 4124 0004 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 4125 0008 60F30612 		bfi	r2, r0, #4, #3
 4126              	.LVL313:
 618:src/xeq.c     **** }
 4127              		.loc 1 618 23 view .LVU1118
 4128 000c 83F8EB27 		strb	r2, [r3, #2027]
 619:src/xeq.c     **** 
 4129              		.loc 1 619 1 view .LVU1119
 4130 0010 7047     		bx	lr
 4131              	.L341:
 4132 0012 00BF     		.align	2
 4133              	.L340:
 4134 0014 00000000 		.word	main_ram
 4135              		.cfi_endproc
 4136              	.LFE35:
 4138              		.section	.text.packed_from_number,"ax",%progbits
 4139              		.align	1
 4140              		.p2align 2,,3
 4141              		.global	packed_from_number
 4142              		.syntax unified
 4143              		.thumb
 4144              		.thumb_func
 4145              		.fpu fpv4-sp-d16
 4147              	packed_from_number:
 4148              	.LVL314:
 4149              	.LFB36:
 625:src/xeq.c     **** 	decContext ctx64;
 4150              		.loc 1 625 59 is_stmt 1 view -0
 4151              		.cfi_startproc
 4152              		@ args = 0, pretend = 0, frame = 24
 4153              		@ frame_needed = 0, uses_anonymous_args = 0
 626:src/xeq.c     **** 
 4154              		.loc 1 626 2 view .LVU1121
 628:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4155              		.loc 1 628 2 view .LVU1122
 625:src/xeq.c     **** 	decContext ctx64;
 4156              		.loc 1 625 59 is_stmt 0 view .LVU1123
 4157 0000 70B5     		push	{r4, r5, r6, lr}
 4158              		.cfi_def_cfa_offset 16
 4159              		.cfi_offset 4, -16
ARM GAS  /tmp/ccQQPlfu.s 			page 192


 4160              		.cfi_offset 5, -12
 4161              		.cfi_offset 6, -8
 4162              		.cfi_offset 14, -4
 4163 0002 86B0     		sub	sp, sp, #24
 4164              		.cfi_def_cfa_offset 40
 625:src/xeq.c     **** 	decContext ctx64;
 4165              		.loc 1 625 59 view .LVU1124
 4166 0004 0446     		mov	r4, r0
 4167 0006 0D46     		mov	r5, r1
 628:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4168              		.loc 1 628 2 view .LVU1125
 4169 0008 6846     		mov	r0, sp
 4170              	.LVL315:
 628:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4171              		.loc 1 628 2 view .LVU1126
 4172 000a 4021     		movs	r1, #64
 4173              	.LVL316:
 628:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4174              		.loc 1 628 2 view .LVU1127
 4175 000c FFF7FEFF 		bl	decContextDefault
 4176              	.LVL317:
 629:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4177              		.loc 1 629 2 is_stmt 1 view .LVU1128
 4178              	.LBB1610:
 4179              	.LBI1610:
 604:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4180              		.loc 1 604 22 view .LVU1129
 4181              	.LBB1611:
 605:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4182              		.loc 1 605 2 view .LVU1130
 610:src/xeq.c     **** }
 4183              		.loc 1 610 2 view .LVU1131
 610:src/xeq.c     **** }
 4184              		.loc 1 610 37 is_stmt 0 view .LVU1132
 4185 0010 084B     		ldr	r3, .L344
 610:src/xeq.c     **** }
 4186              		.loc 1 610 9 view .LVU1133
 4187 0012 094E     		ldr	r6, .L344+4
 610:src/xeq.c     **** }
 4188              		.loc 1 610 37 view .LVU1134
 4189 0014 1B68     		ldr	r3, [r3]
 4190 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4191 001a C3F30213 		ubfx	r3, r3, #4, #3
 4192              	.LBE1611:
 4193              	.LBE1610:
 630:src/xeq.c     **** }
 4194              		.loc 1 630 2 view .LVU1135
 4195 001e 2946     		mov	r1, r5
 629:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4196              		.loc 1 629 14 view .LVU1136
 4197 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4198 0022 8DF80C30 		strb	r3, [sp, #12]
 630:src/xeq.c     **** }
 4199              		.loc 1 630 2 is_stmt 1 view .LVU1137
 4200 0026 2046     		mov	r0, r4
 4201 0028 6A46     		mov	r2, sp
 4202 002a FFF7FEFF 		bl	decimal64FromNumber
ARM GAS  /tmp/ccQQPlfu.s 			page 193


 4203              	.LVL318:
 631:src/xeq.c     **** 
 4204              		.loc 1 631 1 is_stmt 0 view .LVU1138
 4205 002e 06B0     		add	sp, sp, #24
 4206              		.cfi_def_cfa_offset 16
 4207              		@ sp needed
 4208 0030 70BD     		pop	{r4, r5, r6, pc}
 4209              	.LVL319:
 4210              	.L345:
 631:src/xeq.c     **** 
 4211              		.loc 1 631 1 view .LVU1139
 4212 0032 00BF     		.align	2
 4213              	.L344:
 4214 0034 00000000 		.word	main_ram
 4215 0038 00000000 		.word	.LANCHOR1
 4216              		.cfi_endproc
 4217              	.LFE36:
 4219              		.section	.text.packed128_from_number,"ax",%progbits
 4220              		.align	1
 4221              		.p2align 2,,3
 4222              		.global	packed128_from_number
 4223              		.syntax unified
 4224              		.thumb
 4225              		.thumb_func
 4226              		.fpu fpv4-sp-d16
 4228              	packed128_from_number:
 4229              	.LVL320:
 4230              	.LFB37:
 633:src/xeq.c     **** 	decContext ctx128;
 4231              		.loc 1 633 63 is_stmt 1 view -0
 4232              		.cfi_startproc
 4233              		@ args = 0, pretend = 0, frame = 24
 4234              		@ frame_needed = 0, uses_anonymous_args = 0
 634:src/xeq.c     **** 
 4235              		.loc 1 634 2 view .LVU1141
 636:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4236              		.loc 1 636 2 view .LVU1142
 633:src/xeq.c     **** 	decContext ctx128;
 4237              		.loc 1 633 63 is_stmt 0 view .LVU1143
 4238 0000 70B5     		push	{r4, r5, r6, lr}
 4239              		.cfi_def_cfa_offset 16
 4240              		.cfi_offset 4, -16
 4241              		.cfi_offset 5, -12
 4242              		.cfi_offset 6, -8
 4243              		.cfi_offset 14, -4
 4244 0002 86B0     		sub	sp, sp, #24
 4245              		.cfi_def_cfa_offset 40
 633:src/xeq.c     **** 	decContext ctx128;
 4246              		.loc 1 633 63 view .LVU1144
 4247 0004 0446     		mov	r4, r0
 4248 0006 0D46     		mov	r5, r1
 636:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4249              		.loc 1 636 2 view .LVU1145
 4250 0008 6846     		mov	r0, sp
 4251              	.LVL321:
 636:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4252              		.loc 1 636 2 view .LVU1146
ARM GAS  /tmp/ccQQPlfu.s 			page 194


 4253 000a 8021     		movs	r1, #128
 4254              	.LVL322:
 636:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4255              		.loc 1 636 2 view .LVU1147
 4256 000c FFF7FEFF 		bl	decContextDefault
 4257              	.LVL323:
 637:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4258              		.loc 1 637 2 is_stmt 1 view .LVU1148
 4259              	.LBB1612:
 4260              	.LBI1612:
 604:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4261              		.loc 1 604 22 view .LVU1149
 4262              	.LBB1613:
 605:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4263              		.loc 1 605 2 view .LVU1150
 610:src/xeq.c     **** }
 4264              		.loc 1 610 2 view .LVU1151
 610:src/xeq.c     **** }
 4265              		.loc 1 610 37 is_stmt 0 view .LVU1152
 4266 0010 084B     		ldr	r3, .L348
 610:src/xeq.c     **** }
 4267              		.loc 1 610 9 view .LVU1153
 4268 0012 094E     		ldr	r6, .L348+4
 610:src/xeq.c     **** }
 4269              		.loc 1 610 37 view .LVU1154
 4270 0014 1B68     		ldr	r3, [r3]
 4271 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4272 001a C3F30213 		ubfx	r3, r3, #4, #3
 4273              	.LBE1613:
 4274              	.LBE1612:
 638:src/xeq.c     **** }
 4275              		.loc 1 638 2 view .LVU1155
 4276 001e 2946     		mov	r1, r5
 637:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4277              		.loc 1 637 15 view .LVU1156
 4278 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4279 0022 8DF80C30 		strb	r3, [sp, #12]
 638:src/xeq.c     **** }
 4280              		.loc 1 638 2 is_stmt 1 view .LVU1157
 4281 0026 2046     		mov	r0, r4
 4282 0028 6A46     		mov	r2, sp
 4283 002a FFF7FEFF 		bl	decimal128FromNumber
 4284              	.LVL324:
 639:src/xeq.c     **** 
 4285              		.loc 1 639 1 is_stmt 0 view .LVU1158
 4286 002e 06B0     		add	sp, sp, #24
 4287              		.cfi_def_cfa_offset 16
 4288              		@ sp needed
 4289 0030 70BD     		pop	{r4, r5, r6, pc}
 4290              	.LVL325:
 4291              	.L349:
 639:src/xeq.c     **** 
 4292              		.loc 1 639 1 view .LVU1159
 4293 0032 00BF     		.align	2
 4294              	.L348:
 4295 0034 00000000 		.word	main_ram
 4296 0038 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccQQPlfu.s 			page 195


 4297              		.cfi_endproc
 4298              	.LFE37:
 4300              		.section	.text.check_special,"ax",%progbits
 4301              		.align	1
 4302              		.p2align 2,,3
 4303              		.syntax unified
 4304              		.thumb
 4305              		.thumb_func
 4306              		.fpu fpv4-sp-d16
 4308              	check_special:
 4309              	.LVL326:
 4310              	.LFB41:
 678:src/xeq.c     **** 	decNumber y;
 4311              		.loc 1 678 46 is_stmt 1 view -0
 4312              		.cfi_startproc
 4313              		@ args = 0, pretend = 0, frame = 64
 4314              		@ frame_needed = 0, uses_anonymous_args = 0
 679:src/xeq.c     **** 	decimal64 z;
 4315              		.loc 1 679 2 view .LVU1161
 680:src/xeq.c     **** 	decimal128 d;
 4316              		.loc 1 680 2 view .LVU1162
 681:src/xeq.c     **** 	if (is_dblmode()) {
 4317              		.loc 1 681 2 view .LVU1163
 682:src/xeq.c     **** 		packed128_from_number(&d, x);
 4318              		.loc 1 682 2 view .LVU1164
 4319              	.LBB1630:
 4320              	.LBI1630:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4321              		.loc 1 1112 5 view .LVU1165
 4322              	.LBB1631:
1113:src/xeq.c     **** }
 4323              		.loc 1 1113 2 view .LVU1166
1113:src/xeq.c     **** }
 4324              		.loc 1 1113 24 is_stmt 0 view .LVU1167
 4325 0000 274B     		ldr	r3, .L364
 4326 0002 1B68     		ldr	r3, [r3]
 4327              	.LBE1631:
 4328              	.LBE1630:
 678:src/xeq.c     **** 	decNumber y;
 4329              		.loc 1 678 46 view .LVU1168
 4330 0004 00B5     		push	{lr}
 4331              		.cfi_def_cfa_offset 4
 4332              		.cfi_offset 14, -4
 4333              	.LBB1633:
 4334              	.LBB1632:
1113:src/xeq.c     **** }
 4335              		.loc 1 1113 24 view .LVU1169
 4336 0006 B3F8E827 		ldrh	r2, [r3, #2024]
 4337 000a 44F20103 		movw	r3, #16385
 4338              	.LBE1632:
 4339              	.LBE1633:
 682:src/xeq.c     **** 		packed128_from_number(&d, x);
 4340              		.loc 1 682 5 view .LVU1170
 4341 000e 1340     		ands	r3, r3, r2
 4342 0010 B3F5804F 		cmp	r3, #16384
 678:src/xeq.c     **** 	decNumber y;
 4343              		.loc 1 678 46 view .LVU1171
ARM GAS  /tmp/ccQQPlfu.s 			page 196


 4344 0014 91B0     		sub	sp, sp, #68
 4345              		.cfi_def_cfa_offset 72
 678:src/xeq.c     **** 	decNumber y;
 4346              		.loc 1 678 46 view .LVU1172
 4347 0016 0146     		mov	r1, r0
 682:src/xeq.c     **** 		packed128_from_number(&d, x);
 4348              		.loc 1 682 5 view .LVU1173
 4349 0018 0FD0     		beq	.L362
 688:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4350              		.loc 1 688 3 is_stmt 1 view .LVU1174
 4351 001a 01A8     		add	r0, sp, #4
 4352              	.LVL327:
 688:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4353              		.loc 1 688 3 is_stmt 0 view .LVU1175
 4354 001c FFF7FEFF 		bl	packed_from_number
 4355              	.LVL328:
 689:src/xeq.c     **** 	}
 4356              		.loc 1 689 3 is_stmt 1 view .LVU1176
 4357 0020 01A8     		add	r0, sp, #4
 4358 0022 07A9     		add	r1, sp, #28
 4359 0024 FFF7FEFF 		bl	decimal64ToNumber
 4360              	.LVL329:
 691:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4361              		.loc 1 691 2 view .LVU1177
 691:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4362              		.loc 1 691 5 is_stmt 0 view .LVU1178
 4363 0028 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4364 002c 13F0700F 		tst	r3, #112
 4365 0030 0FD1     		bne	.L353
 4366              	.L355:
 702:src/xeq.c     **** }
 4367              		.loc 1 702 9 view .LVU1179
 4368 0032 0020     		movs	r0, #0
 4369              	.L350:
 703:src/xeq.c     **** 
 4370              		.loc 1 703 1 view .LVU1180
 4371 0034 11B0     		add	sp, sp, #68
 4372              		.cfi_remember_state
 4373              		.cfi_def_cfa_offset 4
 4374              		@ sp needed
 4375 0036 5DF804FB 		ldr	pc, [sp], #4
 4376              	.LVL330:
 4377              	.L362:
 4378              		.cfi_restore_state
 683:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4379              		.loc 1 683 3 is_stmt 1 view .LVU1181
 4380 003a 03A8     		add	r0, sp, #12
 4381              	.LVL331:
 683:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4382              		.loc 1 683 3 is_stmt 0 view .LVU1182
 4383 003c FFF7FEFF 		bl	packed128_from_number
 4384              	.LVL332:
 684:src/xeq.c     **** 	}
 4385              		.loc 1 684 3 is_stmt 1 view .LVU1183
 4386 0040 03A8     		add	r0, sp, #12
 4387 0042 07A9     		add	r1, sp, #28
 4388 0044 FFF7FEFF 		bl	decimal128ToNumber
ARM GAS  /tmp/ccQQPlfu.s 			page 197


 4389              	.LVL333:
 691:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4390              		.loc 1 691 2 view .LVU1184
 691:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4391              		.loc 1 691 5 is_stmt 0 view .LVU1185
 4392 0048 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4393 004c 13F0700F 		tst	r3, #112
 4394 0050 EFD0     		beq	.L355
 4395              	.L353:
 692:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4396              		.loc 1 692 3 is_stmt 1 view .LVU1186
 4397              	.LVL334:
 4398              	.LBB1634:
 4399              	.LBI1634:
3543:src/xeq.c     **** 	unsigned short mask;
 4400              		.loc 1 3543 5 view .LVU1187
 4401              	.LBB1635:
3544:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 4402              		.loc 1 3544 2 view .LVU1188
3545:src/xeq.c     **** 
 4403              		.loc 1 3545 2 view .LVU1189
3545:src/xeq.c     **** 
 4404              		.loc 1 3545 34 is_stmt 0 view .LVU1190
 4405 0052 0DF10201 		add	r1, sp, #2
 4406 0056 6B20     		movs	r0, #107
 4407 0058 FFF7FEFF 		bl	flag_word
 4408              	.LVL335:
3547:src/xeq.c     **** }
 4409              		.loc 1 3547 2 is_stmt 1 view .LVU1191
3547:src/xeq.c     **** }
 4410              		.loc 1 3547 24 is_stmt 0 view .LVU1192
 4411 005c BDF80230 		ldrh	r3, [sp, #2]
 4412 0060 0288     		ldrh	r2, [r0]
 4413              	.LBE1635:
 4414              	.LBE1634:
 692:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4415              		.loc 1 692 6 view .LVU1193
 4416 0062 1A42     		tst	r2, r3
 4417 0064 E5D1     		bne	.L355
 693:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4418              		.loc 1 693 4 is_stmt 1 view .LVU1194
 693:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4419              		.loc 1 693 8 is_stmt 0 view .LVU1195
 4420 0066 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 693:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4421              		.loc 1 693 7 view .LVU1196
 4422 006a 13F0300F 		tst	r3, #48
 4423 006e 06D0     		beq	.L356
 694:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 4424              		.loc 1 694 5 is_stmt 1 view .LVU1197
 4425              	.LVL336:
 4426              	.LBB1636:
 4427              	.LBI1636:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4428              		.loc 1 540 5 view .LVU1198
 4429              	.LBB1637:
 541:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccQQPlfu.s 			page 198


 4430              		.loc 1 541 2 view .LVU1199
 541:src/xeq.c     **** 		Error = e;
 4431              		.loc 1 541 12 is_stmt 0 view .LVU1200
 4432 0070 0C4B     		ldr	r3, .L364+4
 541:src/xeq.c     **** 		Error = e;
 4433              		.loc 1 541 5 view .LVU1201
 4434 0072 1A68     		ldr	r2, [r3]
 4435              	.LBB1638:
 4436              	.LBB1639:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4437              		.loc 1 542 9 view .LVU1202
 4438 0074 0120     		movs	r0, #1
 4439              	.LBE1639:
 4440              	.LBE1638:
 541:src/xeq.c     **** 		Error = e;
 4441              		.loc 1 541 5 view .LVU1203
 4442 0076 002A     		cmp	r2, #0
 4443 0078 DCD1     		bne	.L350
 4444              	.LVL337:
 4445              	.LBB1641:
 4446              	.LBI1638:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4447              		.loc 1 540 5 is_stmt 1 view .LVU1204
 4448              	.LBB1640:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4449              		.loc 1 542 3 view .LVU1205
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4450              		.loc 1 542 9 is_stmt 0 view .LVU1206
 4451 007a 1860     		str	r0, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 4452              		.loc 1 543 3 is_stmt 1 view .LVU1207
 4453 007c DAE7     		b	.L350
 4454              	.LVL338:
 4455              	.L356:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 4456              		.loc 1 543 3 is_stmt 0 view .LVU1208
 4457              	.LBE1640:
 4458              	.LBE1641:
 4459              	.LBE1637:
 4460              	.LBE1636:
 695:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4461              		.loc 1 695 9 is_stmt 1 view .LVU1209
 695:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4462              		.loc 1 695 12 is_stmt 0 view .LVU1210
 4463 007e 13F0800F 		tst	r3, #128
 4464              	.LBB1642:
 4465              	.LBB1643:
 541:src/xeq.c     **** 		Error = e;
 4466              		.loc 1 541 12 view .LVU1211
 4467 0082 084B     		ldr	r3, .L364+4
 541:src/xeq.c     **** 		Error = e;
 4468              		.loc 1 541 5 view .LVU1212
 4469 0084 1A68     		ldr	r2, [r3]
 4470              	.LBE1643:
 4471              	.LBE1642:
 695:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4472              		.loc 1 695 12 view .LVU1213
ARM GAS  /tmp/ccQQPlfu.s 			page 199


 4473 0086 04D1     		bne	.L363
 698:src/xeq.c     **** 			return 1;
 4474              		.loc 1 698 5 is_stmt 1 view .LVU1214
 4475              	.LVL339:
 4476              	.LBB1647:
 4477              	.LBI1647:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4478              		.loc 1 540 5 view .LVU1215
 4479              	.LBB1648:
 541:src/xeq.c     **** 		Error = e;
 4480              		.loc 1 541 2 view .LVU1216
 541:src/xeq.c     **** 		Error = e;
 4481              		.loc 1 541 5 is_stmt 0 view .LVU1217
 4482 0088 42B9     		cbnz	r2, .L360
 4483              	.LVL340:
 4484              	.LBB1649:
 4485              	.LBI1649:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4486              		.loc 1 540 5 is_stmt 1 view .LVU1218
 4487              	.LBB1650:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4488              		.loc 1 542 3 view .LVU1219
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4489              		.loc 1 542 9 is_stmt 0 view .LVU1220
 4490 008a 0422     		movs	r2, #4
 4491 008c 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 4492              		.loc 1 543 3 is_stmt 1 view .LVU1221
 4493              	.LBE1650:
 4494              	.LBE1649:
 4495              	.LBE1648:
 4496              	.LBE1647:
 699:src/xeq.c     **** 		}
 4497              		.loc 1 699 11 is_stmt 0 view .LVU1222
 4498 008e 0120     		movs	r0, #1
 4499 0090 D0E7     		b	.L350
 4500              	.LVL341:
 4501              	.L363:
 696:src/xeq.c     **** 			else
 4502              		.loc 1 696 5 is_stmt 1 view .LVU1223
 4503              	.LBB1651:
 4504              	.LBI1642:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4505              		.loc 1 540 5 view .LVU1224
 4506              	.LBB1646:
 541:src/xeq.c     **** 		Error = e;
 4507              		.loc 1 541 2 view .LVU1225
 541:src/xeq.c     **** 		Error = e;
 4508              		.loc 1 541 5 is_stmt 0 view .LVU1226
 4509 0092 1AB9     		cbnz	r2, .L360
 4510              	.LVL342:
 4511              	.LBB1644:
 4512              	.LBI1644:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4513              		.loc 1 540 5 is_stmt 1 view .LVU1227
 4514              	.LBB1645:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/ccQQPlfu.s 			page 200


 4515              		.loc 1 542 3 view .LVU1228
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4516              		.loc 1 542 9 is_stmt 0 view .LVU1229
 4517 0094 0522     		movs	r2, #5
 4518 0096 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 4519              		.loc 1 543 3 is_stmt 1 view .LVU1230
 4520              	.LBE1645:
 4521              	.LBE1644:
 4522              	.LBE1646:
 4523              	.LBE1651:
 699:src/xeq.c     **** 		}
 4524              		.loc 1 699 11 is_stmt 0 view .LVU1231
 4525 0098 0120     		movs	r0, #1
 4526 009a CBE7     		b	.L350
 4527              	.LVL343:
 4528              	.L360:
 699:src/xeq.c     **** 		}
 4529              		.loc 1 699 11 view .LVU1232
 4530 009c 0120     		movs	r0, #1
 4531 009e C9E7     		b	.L350
 4532              	.L365:
 4533              		.align	2
 4534              	.L364:
 4535 00a0 00000000 		.word	main_ram
 4536 00a4 00000000 		.word	Error
 4537              		.cfi_endproc
 4538              	.LFE41:
 4540              		.section	.text.packed_from_packed128,"ax",%progbits
 4541              		.align	1
 4542              		.p2align 2,,3
 4543              		.global	packed_from_packed128
 4544              		.syntax unified
 4545              		.thumb
 4546              		.thumb_func
 4547              		.fpu fpv4-sp-d16
 4549              	packed_from_packed128:
 4550              	.LVL344:
 4551              	.LFB38:
 642:src/xeq.c     **** 	decNumber temp;
 4552              		.loc 1 642 63 is_stmt 1 view -0
 4553              		.cfi_startproc
 4554              		@ args = 0, pretend = 0, frame = 40
 4555              		@ frame_needed = 0, uses_anonymous_args = 0
 643:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 4556              		.loc 1 643 2 view .LVU1234
 644:src/xeq.c     **** }
 4557              		.loc 1 644 2 view .LVU1235
 642:src/xeq.c     **** 	decNumber temp;
 4558              		.loc 1 642 63 is_stmt 0 view .LVU1236
 4559 0000 10B5     		push	{r4, lr}
 4560              		.cfi_def_cfa_offset 8
 4561              		.cfi_offset 4, -8
 4562              		.cfi_offset 14, -4
 4563 0002 8AB0     		sub	sp, sp, #40
 4564              		.cfi_def_cfa_offset 48
 642:src/xeq.c     **** 	decNumber temp;
ARM GAS  /tmp/ccQQPlfu.s 			page 201


 4565              		.loc 1 642 63 view .LVU1237
 4566 0004 0446     		mov	r4, r0
 644:src/xeq.c     **** }
 4567              		.loc 1 644 24 view .LVU1238
 4568 0006 0846     		mov	r0, r1
 4569              	.LVL345:
 644:src/xeq.c     **** }
 4570              		.loc 1 644 24 view .LVU1239
 4571 0008 01A9     		add	r1, sp, #4
 4572              	.LVL346:
 644:src/xeq.c     **** }
 4573              		.loc 1 644 24 view .LVU1240
 4574 000a FFF7FEFF 		bl	decimal128ToNumber
 4575              	.LVL347:
 644:src/xeq.c     **** }
 4576              		.loc 1 644 24 view .LVU1241
 4577 000e 0146     		mov	r1, r0
 644:src/xeq.c     **** }
 4578              		.loc 1 644 2 view .LVU1242
 4579 0010 2046     		mov	r0, r4
 4580 0012 FFF7FEFF 		bl	packed_from_number
 4581              	.LVL348:
 645:src/xeq.c     **** 
 4582              		.loc 1 645 1 view .LVU1243
 4583 0016 0AB0     		add	sp, sp, #40
 4584              		.cfi_def_cfa_offset 8
 4585              		@ sp needed
 4586 0018 10BD     		pop	{r4, pc}
 645:src/xeq.c     **** 
 4587              		.loc 1 645 1 view .LVU1244
 4588              		.cfi_endproc
 4589              	.LFE38:
 4591 001a 00BF     		.section	.text.packed128_from_packed,"ax",%progbits
 4592              		.align	1
 4593              		.p2align 2,,3
 4594              		.global	packed128_from_packed
 4595              		.syntax unified
 4596              		.thumb
 4597              		.thumb_func
 4598              		.fpu fpv4-sp-d16
 4600              	packed128_from_packed:
 4601              	.LVL349:
 4602              	.LFB39:
 648:src/xeq.c     **** 	decNumber temp;
 4603              		.loc 1 648 63 is_stmt 1 view -0
 4604              		.cfi_startproc
 4605              		@ args = 0, pretend = 0, frame = 40
 4606              		@ frame_needed = 0, uses_anonymous_args = 0
 649:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 4607              		.loc 1 649 2 view .LVU1246
 650:src/xeq.c     **** }
 4608              		.loc 1 650 2 view .LVU1247
 648:src/xeq.c     **** 	decNumber temp;
 4609              		.loc 1 648 63 is_stmt 0 view .LVU1248
 4610 0000 10B5     		push	{r4, lr}
 4611              		.cfi_def_cfa_offset 8
 4612              		.cfi_offset 4, -8
ARM GAS  /tmp/ccQQPlfu.s 			page 202


 4613              		.cfi_offset 14, -4
 4614 0002 8AB0     		sub	sp, sp, #40
 4615              		.cfi_def_cfa_offset 48
 648:src/xeq.c     **** 	decNumber temp;
 4616              		.loc 1 648 63 view .LVU1249
 4617 0004 0446     		mov	r4, r0
 650:src/xeq.c     **** }
 4618              		.loc 1 650 27 view .LVU1250
 4619 0006 0846     		mov	r0, r1
 4620              	.LVL350:
 650:src/xeq.c     **** }
 4621              		.loc 1 650 27 view .LVU1251
 4622 0008 01A9     		add	r1, sp, #4
 4623              	.LVL351:
 650:src/xeq.c     **** }
 4624              		.loc 1 650 27 view .LVU1252
 4625 000a FFF7FEFF 		bl	decimal64ToNumber
 4626              	.LVL352:
 650:src/xeq.c     **** }
 4627              		.loc 1 650 27 view .LVU1253
 4628 000e 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 4629              		.loc 1 650 2 view .LVU1254
 4630 0010 2046     		mov	r0, r4
 4631 0012 FFF7FEFF 		bl	packed128_from_number
 4632              	.LVL353:
 651:src/xeq.c     **** 
 4633              		.loc 1 651 1 view .LVU1255
 4634 0016 0AB0     		add	sp, sp, #40
 4635              		.cfi_def_cfa_offset 8
 4636              		@ sp needed
 4637 0018 10BD     		pop	{r4, pc}
 651:src/xeq.c     **** 
 4638              		.loc 1 651 1 view .LVU1256
 4639              		.cfi_endproc
 4640              	.LFE39:
 4642 001a 00BF     		.section	.text.stack_size,"ax",%progbits
 4643              		.align	1
 4644              		.p2align 2,,3
 4645              		.global	stack_size
 4646              		.syntax unified
 4647              		.thumb
 4648              		.thumb_func
 4649              		.fpu fpv4-sp-d16
 4651              	stack_size:
 4652              	.LFB42:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 4653              		.loc 1 706 22 is_stmt 1 view -0
 4654              		.cfi_startproc
 4655              		@ args = 0, pretend = 0, frame = 0
 4656              		@ frame_needed = 0, uses_anonymous_args = 0
 4657              		@ link register save eliminated.
 707:src/xeq.c     **** 		return 4;
 4658              		.loc 1 707 2 view .LVU1258
 707:src/xeq.c     **** 		return 4;
 4659              		.loc 1 707 8 is_stmt 0 view .LVU1259
 4660 0000 0B4B     		ldr	r3, .L376
ARM GAS  /tmp/ccQQPlfu.s 			page 203


 4661 0002 1B68     		ldr	r3, [r3]
 707:src/xeq.c     **** 		return 4;
 4662              		.loc 1 707 6 view .LVU1260
 4663 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 4664              		.loc 1 707 5 view .LVU1261
 4665 0008 1207     		lsls	r2, r2, #28
 4666 000a 0ED5     		bpl	.L372
 4667              	.LBB1652:
 4668              	.LBI1652:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 4669              		.loc 1 185 5 is_stmt 1 view .LVU1262
 4670              	.LBB1653:
 186:src/xeq.c     **** }
 4671              		.loc 1 186 2 view .LVU1263
 186:src/xeq.c     **** }
 4672              		.loc 1 186 9 is_stmt 0 view .LVU1264
 4673 000c B3F8E037 		ldrh	r3, [r3, #2016]
 4674              	.LBE1653:
 4675              	.LBE1652:
 707:src/xeq.c     **** 		return 4;
 4676              		.loc 1 707 27 view .LVU1265
 4677 0010 9B0B     		lsrs	r3, r3, #14
 4678 0012 032B     		cmp	r3, #3
 4679 0014 01D0     		beq	.L375
 709:src/xeq.c     **** }
 4680              		.loc 1 709 9 view .LVU1266
 4681 0016 0820     		movs	r0, #8
 710:src/xeq.c     **** 
 4682              		.loc 1 710 1 view .LVU1267
 4683 0018 7047     		bx	lr
 4684              	.L375:
 707:src/xeq.c     **** 		return 4;
 4685              		.loc 1 707 44 discriminator 2 view .LVU1268
 4686 001a 064B     		ldr	r3, .L376+4
 707:src/xeq.c     **** 		return 4;
 4687              		.loc 1 707 41 discriminator 2 view .LVU1269
 4688 001c 93F90130 		ldrsb	r3, [r3, #1]
 4689 0020 002B     		cmp	r3, #0
 708:src/xeq.c     **** 	return 8;
 4690              		.loc 1 708 10 discriminator 2 view .LVU1270
 4691 0022 B4BF     		ite	lt
 4692 0024 0820     		movlt	r0, #8
 4693 0026 0420     		movge	r0, #4
 4694 0028 7047     		bx	lr
 4695              	.L372:
 708:src/xeq.c     **** 	return 8;
 4696              		.loc 1 708 10 view .LVU1271
 4697 002a 0420     		movs	r0, #4
 4698 002c 7047     		bx	lr
 4699              	.L377:
 4700 002e 00BF     		.align	2
 4701              	.L376:
 4702 0030 00000000 		.word	main_ram
 4703 0034 00000000 		.word	XromParams
 4704              		.cfi_endproc
 4705              	.LFE42:
ARM GAS  /tmp/ccQQPlfu.s 			page 204


 4707              		.section	.text.copyreg,"ax",%progbits
 4708              		.align	1
 4709              		.p2align 2,,3
 4710              		.global	copyreg
 4711              		.syntax unified
 4712              		.thumb
 4713              		.thumb_func
 4714              		.fpu fpv4-sp-d16
 4716              	copyreg:
 4717              	.LVL354:
 4718              	.LFB45:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 4719              		.loc 1 720 46 is_stmt 1 view -0
 4720              		.cfi_startproc
 4721              		@ args = 0, pretend = 0, frame = 0
 4722              		@ frame_needed = 0, uses_anonymous_args = 0
 4723              		@ link register save eliminated.
 721:src/xeq.c     **** }
 4724              		.loc 1 721 2 view .LVU1273
 4725              	.LBB1654:
 4726              	.LBI1654:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4727              		.loc 1 1112 5 view .LVU1274
 4728              	.LBB1655:
1113:src/xeq.c     **** }
 4729              		.loc 1 1113 2 view .LVU1275
1113:src/xeq.c     **** }
 4730              		.loc 1 1113 24 is_stmt 0 view .LVU1276
 4731 0000 064B     		ldr	r3, .L381
 4732 0002 1B68     		ldr	r3, [r3]
 4733 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 4734 0008 44F20103 		movw	r3, #16385
 4735              	.LBE1655:
 4736              	.LBE1654:
 721:src/xeq.c     **** }
 4737              		.loc 1 721 2 view .LVU1277
 4738 000c 1340     		ands	r3, r3, r2
 4739 000e B3F5804F 		cmp	r3, #16384
 4740 0012 0CBF     		ite	eq
 4741 0014 1022     		moveq	r2, #16
 4742 0016 0822     		movne	r2, #8
 4743 0018 FFF7FEBF 		b	xcopy
 4744              	.LVL355:
 4745              	.L382:
 721:src/xeq.c     **** }
 4746              		.loc 1 721 2 view .LVU1278
 4747              		.align	2
 4748              	.L381:
 4749 001c 00000000 		.word	main_ram
 4750              		.cfi_endproc
 4751              	.LFE45:
 4753              		.section	.text.set_lift,"ax",%progbits
 4754              		.align	1
 4755              		.p2align 2,,3
 4756              		.global	set_lift
 4757              		.syntax unified
 4758              		.thumb
ARM GAS  /tmp/ccQQPlfu.s 			page 205


 4759              		.thumb_func
 4760              		.fpu fpv4-sp-d16
 4762              	set_lift:
 4763              	.LFB51:
 761:src/xeq.c     ****     State2.state_lift = 1;
 4764              		.loc 1 761 21 is_stmt 1 view -0
 4765              		.cfi_startproc
 4766              		@ args = 0, pretend = 0, frame = 0
 4767              		@ frame_needed = 0, uses_anonymous_args = 0
 4768              		@ link register save eliminated.
 762:src/xeq.c     **** }
 4769              		.loc 1 762 5 view .LVU1280
 762:src/xeq.c     **** }
 4770              		.loc 1 762 23 is_stmt 0 view .LVU1281
 4771 0000 024A     		ldr	r2, .L384
 4772 0002 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 4773 0004 43F04003 		orr	r3, r3, #64
 4774 0008 D375     		strb	r3, [r2, #23]
 763:src/xeq.c     **** 
 4775              		.loc 1 763 1 view .LVU1282
 4776 000a 7047     		bx	lr
 4777              	.L385:
 4778              		.align	2
 4779              	.L384:
 4780 000c 00000000 		.word	StateWhileOn
 4781              		.cfi_endproc
 4782              	.LFE51:
 4784              		.section	.text.entry_rpn_on_off,"ax",%progbits
 4785              		.align	1
 4786              		.p2align 2,,3
 4787              		.global	entry_rpn_on_off
 4788              		.syntax unified
 4789              		.thumb
 4790              		.thumb_func
 4791              		.fpu fpv4-sp-d16
 4793              	entry_rpn_on_off:
 4794              	.LVL356:
 4795              	.LFB77:
 992:src/xeq.c     ****   switch (op) {
 4796              		.loc 1 992 38 is_stmt 1 view -0
 4797              		.cfi_startproc
 4798              		@ args = 0, pretend = 0, frame = 0
 4799              		@ frame_needed = 0, uses_anonymous_args = 0
 4800              		@ link register save eliminated.
 993:src/xeq.c     ****   case OP_ENTRY_ON:
 4801              		.loc 1 993 3 view .LVU1284
 4802 0000 CD28     		cmp	r0, #205
 4803 0002 0BD0     		beq	.L387
 4804 0004 CE28     		cmp	r0, #206
 4805 0006 08D1     		bne	.L390
 998:src/xeq.c     ****     return;
 4806              		.loc 1 998 5 view .LVU1285
 4807 0008 094B     		ldr	r3, .L391
 4808 000a 1B68     		ldr	r3, [r3]
 4809 000c 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 4810 0010 6FF34102 		bfc	r2, #1, #1
 4811 0014 83F8AD27 		strb	r2, [r3, #1965]
ARM GAS  /tmp/ccQQPlfu.s 			page 206


 999:src/xeq.c     ****   default:;
 4812              		.loc 1 999 5 view .LVU1286
1000:src/xeq.c     ****   }
 4813              		.loc 1 1000 11 view .LVU1287
1002:src/xeq.c     **** #endif
 4814              		.loc 1 1002 1 is_stmt 0 view .LVU1288
 4815 0018 7047     		bx	lr
 4816              	.L390:
 4817 001a 7047     		bx	lr
 4818              	.L387:
 995:src/xeq.c     ****     return;
 4819              		.loc 1 995 5 is_stmt 1 view .LVU1289
 4820 001c 044B     		ldr	r3, .L391
 4821 001e 1A68     		ldr	r2, [r3]
 4822 0020 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 4823 0024 43F00203 		orr	r3, r3, #2
 4824 0028 82F8AD37 		strb	r3, [r2, #1965]
 996:src/xeq.c     ****   case OP_ENTRY_OFF:
 4825              		.loc 1 996 5 view .LVU1290
 4826 002c 7047     		bx	lr
 4827              	.L392:
 4828 002e 00BF     		.align	2
 4829              	.L391:
 4830 0030 00000000 		.word	main_ram
 4831              		.cfi_endproc
 4832              	.LFE77:
 4834              		.section	.text.is_dblmode,"ax",%progbits
 4835              		.align	1
 4836              		.p2align 2,,3
 4837              		.global	is_dblmode
 4838              		.syntax unified
 4839              		.thumb
 4840              		.thumb_func
 4841              		.fpu fpv4-sp-d16
 4843              	is_dblmode:
 4844              	.LFB82:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4845              		.loc 1 1112 22 view -0
 4846              		.cfi_startproc
 4847              		@ args = 0, pretend = 0, frame = 0
 4848              		@ frame_needed = 0, uses_anonymous_args = 0
 4849              		@ link register save eliminated.
1113:src/xeq.c     **** }
 4850              		.loc 1 1113 2 view .LVU1292
1113:src/xeq.c     **** }
 4851              		.loc 1 1113 24 is_stmt 0 view .LVU1293
 4852 0000 064B     		ldr	r3, .L394
 4853 0002 1B68     		ldr	r3, [r3]
 4854 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 4855 0008 44F20100 		movw	r0, #16385
 4856 000c 1840     		ands	r0, r0, r3
1114:src/xeq.c     **** 
 4857              		.loc 1 1114 1 view .LVU1294
 4858 000e A0F58040 		sub	r0, r0, #16384
 4859 0012 B0FA80F0 		clz	r0, r0
 4860 0016 4009     		lsrs	r0, r0, #5
 4861 0018 7047     		bx	lr
ARM GAS  /tmp/ccQQPlfu.s 			page 207


 4862              	.L395:
 4863 001a 00BF     		.align	2
 4864              	.L394:
 4865 001c 00000000 		.word	main_ram
 4866              		.cfi_endproc
 4867              	.LFE82:
 4869              		.section	.text.is_usrdblmode,"ax",%progbits
 4870              		.align	1
 4871              		.p2align 2,,3
 4872              		.global	is_usrdblmode
 4873              		.syntax unified
 4874              		.thumb
 4875              		.thumb_func
 4876              		.fpu fpv4-sp-d16
 4878              	is_usrdblmode:
 4879              	.LFB83:
1116:src/xeq.c     **** 	if (XromFlags.xIN)
 4880              		.loc 1 1116 25 is_stmt 1 view -0
 4881              		.cfi_startproc
 4882              		@ args = 0, pretend = 0, frame = 0
 4883              		@ frame_needed = 0, uses_anonymous_args = 0
 4884              		@ link register save eliminated.
1117:src/xeq.c     **** 		return XromFlags.mode_double;
 4885              		.loc 1 1117 2 view .LVU1296
1117:src/xeq.c     **** 		return XromFlags.mode_double;
 4886              		.loc 1 1117 6 is_stmt 0 view .LVU1297
 4887 0000 0A4B     		ldr	r3, .L400
1117:src/xeq.c     **** 		return XromFlags.mode_double;
 4888              		.loc 1 1117 5 view .LVU1298
 4889 0002 93F90120 		ldrsb	r2, [r3, #1]
 4890 0006 002A     		cmp	r2, #0
 4891 0008 0CDB     		blt	.L399
1119:src/xeq.c     **** }
 4892              		.loc 1 1119 2 is_stmt 1 view .LVU1299
 4893              	.LBB1656:
 4894              	.LBI1656:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4895              		.loc 1 1112 5 view .LVU1300
 4896              	.LBB1657:
1113:src/xeq.c     **** }
 4897              		.loc 1 1113 2 view .LVU1301
1113:src/xeq.c     **** }
 4898              		.loc 1 1113 24 is_stmt 0 view .LVU1302
 4899 000a 094B     		ldr	r3, .L400+4
 4900 000c 1B68     		ldr	r3, [r3]
 4901 000e B3F8E837 		ldrh	r3, [r3, #2024]
 4902 0012 44F20100 		movw	r0, #16385
 4903 0016 1840     		ands	r0, r0, r3
 4904 0018 A0F58040 		sub	r0, r0, #16384
 4905 001c B0FA80F0 		clz	r0, r0
 4906 0020 4009     		lsrs	r0, r0, #5
 4907              	.LBE1657:
 4908              	.LBE1656:
1120:src/xeq.c     **** 
 4909              		.loc 1 1120 1 view .LVU1303
 4910 0022 7047     		bx	lr
 4911              	.L399:
ARM GAS  /tmp/ccQQPlfu.s 			page 208


1118:src/xeq.c     **** 	return is_dblmode();
 4912              		.loc 1 1118 3 is_stmt 1 view .LVU1304
1118:src/xeq.c     **** 	return is_dblmode();
 4913              		.loc 1 1118 19 is_stmt 0 view .LVU1305
 4914 0024 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4915 0026 C0F3C000 		ubfx	r0, r0, #3, #1
 4916 002a 7047     		bx	lr
 4917              	.L401:
 4918              		.align	2
 4919              	.L400:
 4920 002c 00000000 		.word	XromParams
 4921 0030 00000000 		.word	main_ram
 4922              		.cfi_endproc
 4923              	.LFE83:
 4925              		.section	.text.s_to_i,"ax",%progbits
 4926              		.align	1
 4927              		.p2align 2,,3
 4928              		.global	s_to_i
 4929              		.syntax unified
 4930              		.thumb
 4931              		.thumb_func
 4932              		.fpu fpv4-sp-d16
 4934              	s_to_i:
 4935              	.LVL357:
 4936              	.LFB84:
1124:src/xeq.c     **** 	int x = 0;
 4937              		.loc 1 1124 27 is_stmt 1 view -0
 4938              		.cfi_startproc
 4939              		@ args = 0, pretend = 0, frame = 0
 4940              		@ frame_needed = 0, uses_anonymous_args = 0
 4941              		@ link register save eliminated.
1125:src/xeq.c     **** 	int neg;
 4942              		.loc 1 1125 2 view .LVU1307
1126:src/xeq.c     **** 
 4943              		.loc 1 1126 2 view .LVU1308
1128:src/xeq.c     **** 		s++;
 4944              		.loc 1 1128 2 view .LVU1309
1124:src/xeq.c     **** 	int x = 0;
 4945              		.loc 1 1124 27 is_stmt 0 view .LVU1310
 4946 0000 10B4     		push	{r4}
 4947              		.cfi_def_cfa_offset 4
 4948              		.cfi_offset 4, -4
1128:src/xeq.c     **** 		s++;
 4949              		.loc 1 1128 6 view .LVU1311
 4950 0002 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
1128:src/xeq.c     **** 		s++;
 4951              		.loc 1 1128 5 view .LVU1312
 4952 0004 2D29     		cmp	r1, #45
 4953 0006 26D0     		beq	.L418
1132:src/xeq.c     **** 			s++;
 4954              		.loc 1 1132 3 is_stmt 1 view .LVU1313
1132:src/xeq.c     **** 			s++;
 4955              		.loc 1 1132 6 is_stmt 0 view .LVU1314
 4956 0008 2B29     		cmp	r1, #43
 4957 000a 18D0     		beq	.L406
 4958              	.LVL358:
1137:src/xeq.c     **** 		const char c = *s++;
ARM GAS  /tmp/ccQQPlfu.s 			page 209


 4959              		.loc 1 1137 2 is_stmt 1 view .LVU1315
 4960              	.LBB1658:
1138:src/xeq.c     **** 
 4961              		.loc 1 1138 3 view .LVU1316
1140:src/xeq.c     **** 			break;
 4962              		.loc 1 1140 15 is_stmt 0 view .LVU1317
 4963 000c A1F13003 		sub	r3, r1, #48
1140:src/xeq.c     **** 			break;
 4964              		.loc 1 1140 6 view .LVU1318
 4965 0010 D9B2     		uxtb	r1, r3
 4966 0012 0929     		cmp	r1, #9
1138:src/xeq.c     **** 
 4967              		.loc 1 1138 20 view .LVU1319
 4968 0014 00F10102 		add	r2, r0, #1
 4969              	.LVL359:
1140:src/xeq.c     **** 			break;
 4970              		.loc 1 1140 3 is_stmt 1 view .LVU1320
1140:src/xeq.c     **** 			break;
 4971              		.loc 1 1140 6 is_stmt 0 view .LVU1321
 4972 0018 19D8     		bhi	.L411
 4973              	.LVL360:
 4974              	.L417:
1140:src/xeq.c     **** 			break;
 4975              		.loc 1 1140 6 view .LVU1322
 4976              	.LBE1658:
1134:src/xeq.c     **** 	}
 4977              		.loc 1 1134 7 view .LVU1323
 4978 001a 0024     		movs	r4, #0
 4979              	.LVL361:
 4980              	.L405:
1134:src/xeq.c     **** 	}
 4981              		.loc 1 1134 7 view .LVU1324
 4982 001c 0020     		movs	r0, #0
 4983              	.LVL362:
 4984              	.L408:
 4985              	.LBB1659:
1142:src/xeq.c     **** 	}
 4986              		.loc 1 1142 3 is_stmt 1 view .LVU1325
1138:src/xeq.c     **** 
 4987              		.loc 1 1138 14 is_stmt 0 view .LVU1326
 4988 001e 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 4989              	.LVL363:
1142:src/xeq.c     **** 	}
 4990              		.loc 1 1142 10 view .LVU1327
 4991 0022 00EB8000 		add	r0, r0, r0, lsl #2
 4992              	.LVL364:
1142:src/xeq.c     **** 	}
 4993              		.loc 1 1142 5 view .LVU1328
 4994 0026 03EB4000 		add	r0, r3, r0, lsl #1
 4995              	.LVL365:
1142:src/xeq.c     **** 	}
 4996              		.loc 1 1142 5 view .LVU1329
 4997              	.LBE1659:
1137:src/xeq.c     **** 		const char c = *s++;
 4998              		.loc 1 1137 8 is_stmt 1 view .LVU1330
1137:src/xeq.c     **** 		const char c = *s++;
 4999              		.loc 1 1137 2 view .LVU1331
ARM GAS  /tmp/ccQQPlfu.s 			page 210


 5000              	.LBB1660:
1138:src/xeq.c     **** 
 5001              		.loc 1 1138 3 view .LVU1332
1140:src/xeq.c     **** 			break;
 5002              		.loc 1 1140 3 view .LVU1333
1140:src/xeq.c     **** 			break;
 5003              		.loc 1 1140 15 is_stmt 0 view .LVU1334
 5004 002a A1F13003 		sub	r3, r1, #48
1140:src/xeq.c     **** 			break;
 5005              		.loc 1 1140 6 view .LVU1335
 5006 002e D9B2     		uxtb	r1, r3
 5007 0030 0929     		cmp	r1, #9
 5008 0032 F4D9     		bls	.L408
 5009              	.LBE1660:
1144:src/xeq.c     **** 		return -x;
 5010              		.loc 1 1144 2 is_stmt 1 view .LVU1336
1144:src/xeq.c     **** 		return -x;
 5011              		.loc 1 1144 5 is_stmt 0 view .LVU1337
 5012 0034 04B1     		cbz	r4, .L402
 5013 0036 4042     		rsbs	r0, r0, #0
 5014              	.LVL366:
 5015              	.L402:
1147:src/xeq.c     **** 
 5016              		.loc 1 1147 1 view .LVU1338
 5017 0038 5DF8044B 		ldr	r4, [sp], #4
 5018              		.cfi_remember_state
 5019              		.cfi_restore 4
 5020              		.cfi_def_cfa_offset 0
 5021 003c 7047     		bx	lr
 5022              	.LVL367:
 5023              	.L406:
 5024              		.cfi_restore_state
1133:src/xeq.c     **** 		neg = 0;
 5025              		.loc 1 1133 4 is_stmt 1 view .LVU1339
1137:src/xeq.c     **** 		const char c = *s++;
 5026              		.loc 1 1137 2 view .LVU1340
 5027              	.LBB1661:
1138:src/xeq.c     **** 
 5028              		.loc 1 1138 3 view .LVU1341
1138:src/xeq.c     **** 
 5029              		.loc 1 1138 14 is_stmt 0 view .LVU1342
 5030 003e 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
1140:src/xeq.c     **** 			break;
 5031              		.loc 1 1140 15 view .LVU1343
 5032 0040 A1F13003 		sub	r3, r1, #48
1140:src/xeq.c     **** 			break;
 5033              		.loc 1 1140 6 view .LVU1344
 5034 0044 D9B2     		uxtb	r1, r3
 5035 0046 0929     		cmp	r1, #9
1138:src/xeq.c     **** 
 5036              		.loc 1 1138 20 view .LVU1345
 5037 0048 00F10202 		add	r2, r0, #2
 5038              	.LVL368:
1140:src/xeq.c     **** 			break;
 5039              		.loc 1 1140 3 is_stmt 1 view .LVU1346
1140:src/xeq.c     **** 			break;
 5040              		.loc 1 1140 6 is_stmt 0 view .LVU1347
ARM GAS  /tmp/ccQQPlfu.s 			page 211


 5041 004c E5D9     		bls	.L417
 5042              	.LVL369:
 5043              	.L411:
1140:src/xeq.c     **** 			break;
 5044              		.loc 1 1140 6 view .LVU1348
 5045 004e 0020     		movs	r0, #0
 5046              	.LBE1661:
1147:src/xeq.c     **** 
 5047              		.loc 1 1147 1 view .LVU1349
 5048 0050 5DF8044B 		ldr	r4, [sp], #4
 5049              		.cfi_remember_state
 5050              		.cfi_restore 4
 5051              		.cfi_def_cfa_offset 0
 5052 0054 7047     		bx	lr
 5053              	.LVL370:
 5054              	.L418:
 5055              		.cfi_restore_state
1129:src/xeq.c     **** 		neg = 1;
 5056              		.loc 1 1129 3 is_stmt 1 view .LVU1350
1130:src/xeq.c     **** 	} else {
 5057              		.loc 1 1130 3 view .LVU1351
1137:src/xeq.c     **** 		const char c = *s++;
 5058              		.loc 1 1137 2 view .LVU1352
 5059              	.LBB1662:
1138:src/xeq.c     **** 
 5060              		.loc 1 1138 3 view .LVU1353
1138:src/xeq.c     **** 
 5061              		.loc 1 1138 14 is_stmt 0 view .LVU1354
 5062 0056 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
1140:src/xeq.c     **** 			break;
 5063              		.loc 1 1140 15 view .LVU1355
 5064 0058 A1F13003 		sub	r3, r1, #48
1140:src/xeq.c     **** 			break;
 5065              		.loc 1 1140 6 view .LVU1356
 5066 005c D9B2     		uxtb	r1, r3
 5067 005e 0929     		cmp	r1, #9
1138:src/xeq.c     **** 
 5068              		.loc 1 1138 20 view .LVU1357
 5069 0060 00F10202 		add	r2, r0, #2
 5070              	.LVL371:
1140:src/xeq.c     **** 			break;
 5071              		.loc 1 1140 3 is_stmt 1 view .LVU1358
1140:src/xeq.c     **** 			break;
 5072              		.loc 1 1140 6 is_stmt 0 view .LVU1359
 5073 0064 F3D8     		bhi	.L411
 5074              	.LBE1662:
1130:src/xeq.c     **** 	} else {
 5075              		.loc 1 1130 7 view .LVU1360
 5076 0066 0124     		movs	r4, #1
 5077 0068 D8E7     		b	.L405
 5078              		.cfi_endproc
 5079              	.LFE84:
 5081 006a 00BF     		.section	.text.digit,"ax",%progbits
 5082              		.align	1
 5083              		.p2align 2,,3
 5084              		.syntax unified
 5085              		.thumb
ARM GAS  /tmp/ccQQPlfu.s 			page 212


 5086              		.thumb_func
 5087              		.fpu fpv4-sp-d16
 5089              	digit:
 5090              	.LVL372:
 5091              	.LFB213:
3816:src/xeq.c     **** 	const int intm = is_intmode();
 5092              		.loc 1 3816 35 is_stmt 1 view -0
 5093              		.cfi_startproc
 5094              		@ args = 0, pretend = 0, frame = 0
 5095              		@ frame_needed = 0, uses_anonymous_args = 0
3817:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5096              		.loc 1 3817 2 view .LVU1362
3816:src/xeq.c     **** 	const int intm = is_intmode();
 5097              		.loc 1 3816 35 is_stmt 0 view .LVU1363
 5098 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5099              		.cfi_def_cfa_offset 24
 5100              		.cfi_offset 3, -24
 5101              		.cfi_offset 4, -20
 5102              		.cfi_offset 5, -16
 5103              		.cfi_offset 6, -12
 5104              		.cfi_offset 7, -8
 5105              		.cfi_offset 14, -4
3817:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5106              		.loc 1 3817 19 view .LVU1364
 5107 0002 604E     		ldr	r6, .L465
3820:src/xeq.c     **** 		lim++;
 5108              		.loc 1 3820 13 view .LVU1365
 5109 0004 604C     		ldr	r4, .L465+4
3817:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5110              		.loc 1 3817 19 view .LVU1366
 5111 0006 3368     		ldr	r3, [r6]
3820:src/xeq.c     **** 		lim++;
 5112              		.loc 1 3820 13 view .LVU1367
 5113 0008 94F82020 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
3817:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5114              		.loc 1 3817 19 view .LVU1368
 5115 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 5116              	.LVL373:
3818:src/xeq.c     **** 
 5117              		.loc 1 3818 2 is_stmt 1 view .LVU1369
3820:src/xeq.c     **** 		lim++;
 5118              		.loc 1 3820 2 view .LVU1370
3821:src/xeq.c     **** 	if (intm) {
 5119              		.loc 1 3821 6 is_stmt 0 view .LVU1371
 5120 0010 2D2A     		cmp	r2, #45
 5121 0012 14BF     		ite	ne
 5122 0014 0C27     		movne	r7, #12
 5123 0016 0D27     		moveq	r7, #13
 5124              	.LVL374:
3822:src/xeq.c     **** 		if (c >= int_base()) {
 5125              		.loc 1 3822 2 is_stmt 1 view .LVU1372
3822:src/xeq.c     **** 		if (c >= int_base()) {
 5126              		.loc 1 3822 5 is_stmt 0 view .LVU1373
 5127 0018 DB07     		lsls	r3, r3, #31
 5128              	.LVL375:
3816:src/xeq.c     **** 	const int intm = is_intmode();
 5129              		.loc 1 3816 35 view .LVU1374
ARM GAS  /tmp/ccQQPlfu.s 			page 213


 5130 001a 0546     		mov	r5, r0
3822:src/xeq.c     **** 		if (c >= int_base()) {
 5131              		.loc 1 3822 5 view .LVU1375
 5132 001c 79D4     		bmi	.L462
3828:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5133              		.loc 1 3828 3 is_stmt 1 view .LVU1376
3828:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5134              		.loc 1 3828 6 is_stmt 0 view .LVU1377
 5135 001e 0928     		cmp	r0, #9
 5136 0020 00F28C80 		bhi	.L423
3833:src/xeq.c     **** 			lim = CMDLINELEN;
 5137              		.loc 1 3833 3 is_stmt 1 view .LVU1378
3833:src/xeq.c     **** 			lim = CMDLINELEN;
 5138              		.loc 1 3833 7 is_stmt 0 view .LVU1379
 5139 0024 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3833:src/xeq.c     **** 			lim = CMDLINELEN;
 5140              		.loc 1 3833 6 view .LVU1380
 5141 0026 002B     		cmp	r3, #0
 5142 0028 65D0     		beq	.L424
3834:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5143              		.loc 1 3834 4 is_stmt 1 view .LVU1381
 5144              	.LVL376:
3836:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5145              		.loc 1 3836 4 view .LVU1382
3836:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5146              		.loc 1 3836 8 is_stmt 0 view .LVU1383
 5147 002a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3836:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5148              		.loc 1 3836 7 view .LVU1384
 5149 002c 122A     		cmp	r2, #18
 5150 002e 40F29980 		bls	.L448
 5151              	.LBB1673:
3837:src/xeq.c     **** 
 5152              		.loc 1 3837 5 is_stmt 1 view .LVU1385
3839:src/xeq.c     **** 					p++;
 5153              		.loc 1 3839 9 is_stmt 0 view .LVU1386
 5154 0032 E118     		adds	r1, r4, r3
3837:src/xeq.c     **** 
 5155              		.loc 1 3837 11 view .LVU1387
 5156 0034 2133     		adds	r3, r3, #33
3839:src/xeq.c     **** 					p++;
 5157              		.loc 1 3839 8 view .LVU1388
 5158 0036 91F82110 		ldrb	r1, [r1, #33]	@ zero_extendqisi2
3837:src/xeq.c     **** 
 5159              		.loc 1 3837 11 view .LVU1389
 5160 003a 2344     		add	r3, r3, r4
 5161              	.LVL377:
3839:src/xeq.c     **** 					p++;
 5162              		.loc 1 3839 5 is_stmt 1 view .LVU1390
3839:src/xeq.c     **** 					p++;
 5163              		.loc 1 3839 8 is_stmt 0 view .LVU1391
 5164 003c 2D29     		cmp	r1, #45
3840:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5165              		.loc 1 3840 6 is_stmt 1 view .LVU1392
3841:src/xeq.c     **** 					p[0] = p[1];
 5166              		.loc 1 3841 11 is_stmt 0 view .LVU1393
 5167 003e 5349     		ldr	r1, .L465+8
ARM GAS  /tmp/ccQQPlfu.s 			page 214


3840:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5168              		.loc 1 3840 7 view .LVU1394
 5169 0040 08BF     		it	eq
 5170 0042 0133     		addeq	r3, r3, #1
 5171              	.LVL378:
3841:src/xeq.c     **** 					p[0] = p[1];
 5172              		.loc 1 3841 11 is_stmt 1 view .LVU1395
 5173 0044 8B42     		cmp	r3, r1
 5174 0046 05D2     		bcs	.L427
 5175              	.LVL379:
 5176              	.L428:
3842:src/xeq.c     **** 					p++;
 5177              		.loc 1 3842 6 view .LVU1396
3842:src/xeq.c     **** 					p++;
 5178              		.loc 1 3842 11 is_stmt 0 view .LVU1397
 5179 0048 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5180 004a 03F8012B 		strb	r2, [r3], #1
 5181              	.LVL380:
3843:src/xeq.c     **** 				}
 5182              		.loc 1 3843 6 is_stmt 1 view .LVU1398
3841:src/xeq.c     **** 					p[0] = p[1];
 5183              		.loc 1 3841 11 view .LVU1399
 5184 004e 8B42     		cmp	r3, r1
 5185 0050 FAD1     		bne	.L428
 5186 0052 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5187              	.L427:
3845:src/xeq.c     **** 			}
 5188              		.loc 1 3845 5 view .LVU1400
3845:src/xeq.c     **** 			}
 5189              		.loc 1 3845 18 is_stmt 0 view .LVU1401
 5190 0054 013A     		subs	r2, r2, #1
 5191 0056 D2B2     		uxtb	r2, r2
 5192              	.LBE1673:
3834:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5193              		.loc 1 3834 8 view .LVU1402
 5194 0058 1323     		movs	r3, #19
 5195              	.LVL381:
3865:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5196              		.loc 1 3865 2 is_stmt 1 view .LVU1403
3865:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5197              		.loc 1 3865 5 is_stmt 0 view .LVU1404
 5198 005a 9342     		cmp	r3, r2
 5199              	.LBB1674:
3845:src/xeq.c     **** 			}
 5200              		.loc 1 3845 18 view .LVU1405
 5201 005c 2277     		strb	r2, [r4, #28]
 5202              	.LBE1674:
3865:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5203              		.loc 1 3865 5 view .LVU1406
 5204 005e 53DD     		ble	.L445
 5205              	.LVL382:
 5206              	.L432:
3877:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5207              		.loc 1 3877 3 is_stmt 1 view .LVU1407
3877:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5208              		.loc 1 3877 6 is_stmt 0 view .LVU1408
 5209 0060 002D     		cmp	r5, #0
ARM GAS  /tmp/ccQQPlfu.s 			page 215


 5210 0062 70D1     		bne	.L434
3877:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5211              		.loc 1 3877 17 discriminator 1 view .LVU1409
 5212 0064 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3877:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5213              		.loc 1 3877 14 discriminator 1 view .LVU1410
 5214 0066 002B     		cmp	r3, #0
 5215 0068 00F08180 		beq	.L435
3878:src/xeq.c     **** 				return;
 5216              		.loc 1 3878 4 is_stmt 1 view .LVU1411
3881:src/xeq.c     **** 				return;
 5217              		.loc 1 3881 4 view .LVU1412
3878:src/xeq.c     **** 				return;
 5218              		.loc 1 3878 15 is_stmt 0 view .LVU1413
 5219 006c A018     		adds	r0, r4, r2
3881:src/xeq.c     **** 				return;
 5220              		.loc 1 3881 7 view .LVU1414
 5221 006e C17F     		ldrb	r1, [r0, #31]	@ zero_extendqisi2
 5222 0070 4439     		subs	r1, r1, #68
 5223 0072 0129     		cmp	r1, #1
 5224 0074 3ED9     		bls	.L419
3889:src/xeq.c     **** 
 5225              		.loc 1 3889 3 is_stmt 1 view .LVU1415
 5226              	.LVL383:
 5227              	.LBB1675:
 5228              	.LBI1675:
2632:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5229              		.loc 1 2632 13 view .LVU1416
 5230              	.LBB1676:
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5231              		.loc 1 2633 2 view .LVU1417
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5232              		.loc 1 2633 23 is_stmt 0 view .LVU1418
 5233 0076 0132     		adds	r2, r2, #1
 5234 0078 D2B2     		uxtb	r2, r2
2634:src/xeq.c     **** }
 5235              		.loc 1 2634 25 view .LVU1419
 5236 007a A118     		adds	r1, r4, r2
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5237              		.loc 1 2633 27 view .LVU1420
 5238 007c 3027     		movs	r7, #48
 5239 007e 80F82070 		strb	r7, [r0, #32]
2634:src/xeq.c     **** }
 5240              		.loc 1 2634 2 is_stmt 1 view .LVU1421
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5241              		.loc 1 2633 23 is_stmt 0 view .LVU1422
 5242 0082 2277     		strb	r2, [r4, #28]
2634:src/xeq.c     **** }
 5243              		.loc 1 2634 25 view .LVU1423
 5244 0084 81F82050 		strb	r5, [r1, #32]
 5245              	.LVL384:
2634:src/xeq.c     **** }
 5246              		.loc 1 2634 25 view .LVU1424
 5247              	.LBE1676:
 5248              	.LBE1675:
3891:src/xeq.c     **** 			exponent_adjusted(1);
 5249              		.loc 1 3891 3 is_stmt 1 view .LVU1425
ARM GAS  /tmp/ccQQPlfu.s 			page 216


 5250              	.L446:
 5251              	.L438:
 5252              	.L439:
3892:src/xeq.c     **** 	}
 5253              		.loc 1 3892 4 view .LVU1426
 5254              	.LBB1681:
 5255              	.LBI1681:
2641:src/xeq.c     **** {
 5256              		.loc 1 2641 13 view .LVU1427
 5257              	.LBB1682:
2643:src/xeq.c     **** 	int i;
 5258              		.loc 1 2643 2 view .LVU1428
 5259              	.LBB1683:
 5260              	.LBI1683:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 5261              		.loc 1 1112 5 view .LVU1429
 5262              	.LBB1684:
1113:src/xeq.c     **** }
 5263              		.loc 1 1113 2 view .LVU1430
1113:src/xeq.c     **** }
 5264              		.loc 1 1113 2 is_stmt 0 view .LVU1431
 5265              	.LBE1684:
 5266              	.LBE1683:
2644:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
 5267              		.loc 1 2644 2 is_stmt 1 view .LVU1432
2648:src/xeq.c     **** #endif
 5268              		.loc 1 2648 2 view .LVU1433
2653:src/xeq.c     **** #endif
 5269              		.loc 1 2653 2 view .LVU1434
2658:src/xeq.c     **** #endif
 5270              		.loc 1 2658 2 view .LVU1435
2663:src/xeq.c     **** #endif
 5271              		.loc 1 2663 2 view .LVU1436
2668:src/xeq.c     **** #endif
 5272              		.loc 1 2668 2 view .LVU1437
2673:src/xeq.c     **** #endif
 5273              		.loc 1 2673 2 view .LVU1438
2678:src/xeq.c     **** #endif
 5274              		.loc 1 2678 2 view .LVU1439
2683:src/xeq.c     **** #endif
 5275              		.loc 1 2683 2 view .LVU1440
2688:src/xeq.c     **** #endif
 5276              		.loc 1 2688 2 view .LVU1441
2693:src/xeq.c     **** #endif
 5277              		.loc 1 2693 2 view .LVU1442
2695:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
 5278              		.loc 1 2695 2 view .LVU1443
2696:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
 5279              		.loc 1 2696 2 view .LVU1444
2697:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
 5280              		.loc 1 2697 2 view .LVU1445
2698:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
 5281              		.loc 1 2698 2 view .LVU1446
2699:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
 5282              		.loc 1 2699 2 view .LVU1447
2700:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
 5283              		.loc 1 2700 2 view .LVU1448
ARM GAS  /tmp/ccQQPlfu.s 			page 217


2701:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
 5284              		.loc 1 2701 2 view .LVU1449
2702:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
 5285              		.loc 1 2702 2 view .LVU1450
2703:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
 5286              		.loc 1 2703 2 view .LVU1451
2704:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 5287              		.loc 1 2704 2 view .LVU1452
2706:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
 5288              		.loc 1 2706 2 view .LVU1453
2707:src/xeq.c     **** #else
 5289              		.loc 1 2707 2 view .LVU1454
 5290              	.LBB1687:
 5291              	.LBB1685:
1113:src/xeq.c     **** }
 5292              		.loc 1 1113 24 is_stmt 0 view .LVU1455
 5293 0088 3268     		ldr	r2, [r6]
 5294 008a B2F8E807 		ldrh	r0, [r2, #2024]
 5295              	.LBE1685:
 5296              	.LBE1687:
 5297              	.LBB1688:
3156:src/xeq.c     **** #else
 5298              		.loc 1 3156 9 view .LVU1456
 5299 008e E118     		adds	r1, r4, r3
 5300              	.LBE1688:
2707:src/xeq.c     **** #else
 5301              		.loc 1 2707 8 view .LVU1457
 5302 0090 03F12005 		add	r5, r3, #32
 5303              	.LBB1689:
 5304              	.LBB1686:
1113:src/xeq.c     **** }
 5305              		.loc 1 1113 24 view .LVU1458
 5306 0094 44F20102 		movw	r2, #16385
 5307              	.LBE1686:
 5308              	.LBE1689:
 5309              	.LBB1690:
2827:src/xeq.c     **** 			// Double precision mode
 5310              		.loc 1 2827 6 view .LVU1459
 5311 0098 0240     		ands	r2, r2, r0
 5312              	.LBE1690:
2707:src/xeq.c     **** #else
 5313              		.loc 1 2707 8 view .LVU1460
 5314 009a 2544     		add	r5, r5, r4
 5315              	.LVL385:
2726:src/xeq.c     **** #endif
 5316              		.loc 1 2726 2 is_stmt 1 view .LVU1461
2731:src/xeq.c     **** 
 5317              		.loc 1 2731 2 view .LVU1462
2734:src/xeq.c     **** 		emax = 999;
 5318              		.loc 1 2734 2 view .LVU1463
 5319              	.LBB1691:
2738:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
 5320              		.loc 1 2738 3 view .LVU1464
2739:src/xeq.c     **** 
 5321              		.loc 1 2739 3 view .LVU1465
2741:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
 5322              		.loc 1 2741 3 view .LVU1466
ARM GAS  /tmp/ccQQPlfu.s 			page 218


2827:src/xeq.c     **** 			// Double precision mode
 5323              		.loc 1 2827 3 view .LVU1467
2862:src/xeq.c     **** 				}
 5324              		.loc 1 2862 17 is_stmt 0 view .LVU1468
 5325 009c B2F5804F 		cmp	r2, #16384
3156:src/xeq.c     **** #else
 5326              		.loc 1 3156 8 view .LVU1469
 5327 00a0 91F82010 		ldrb	r1, [r1, #32]	@ zero_extendqisi2
2862:src/xeq.c     **** 				}
 5328              		.loc 1 2862 17 view .LVU1470
 5329 00a4 41F2FF72 		movw	r2, #6143
 5330              	.LBE1691:
3170:src/xeq.c     **** #  else
 5331              		.loc 1 3170 3 view .LVU1471
 5332 00a8 05F10107 		add	r7, r5, #1
 5333              	.LBB1692:
2862:src/xeq.c     **** 				}
 5334              		.loc 1 2862 17 view .LVU1472
 5335 00ac 18BF     		it	ne
 5336 00ae 4FF4C072 		movne	r2, #384
 5337 00b2 40F27F16 		movw	r6, #383
 5338              	.LVL386:
2862:src/xeq.c     **** 				}
 5339              		.loc 1 2862 17 view .LVU1473
 5340              	.LBE1692:
3179:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5341              		.loc 1 3179 9 view .LVU1474
 5342 00b6 3846     		mov	r0, r7
 5343              	.LBB1693:
2862:src/xeq.c     **** 				}
 5344              		.loc 1 2862 17 view .LVU1475
 5345 00b8 04BF     		itt	eq
 5346 00ba 1646     		moveq	r6, r2
 5347              	.LVL387:
2862:src/xeq.c     **** 				}
 5348              		.loc 1 2862 17 view .LVU1476
 5349 00bc 4FF4C052 		moveq	r2, #6144
 5350              	.LVL388:
2941:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
 5351              		.loc 1 2941 3 is_stmt 1 view .LVU1477
2957:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
 5352              		.loc 1 2957 8 view .LVU1478
3003:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
 5353              		.loc 1 3003 3 view .LVU1479
3017:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
 5354              		.loc 1 3017 8 view .LVU1480
3057:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
 5355              		.loc 1 3057 3 view .LVU1481
3083:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
 5356              		.loc 1 3083 8 view .LVU1482
3109:src/xeq.c     **** 			if (exp_chs_ds == 0) {
 5357              		.loc 1 3109 8 view .LVU1483
3138:src/xeq.c     **** 				// Limit exponents so sign change is always legal
 5358              		.loc 1 3138 4 view .LVU1484
3145:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
 5359              		.loc 1 3145 9 view .LVU1485
3153:src/xeq.c     **** 					return;
ARM GAS  /tmp/ccQQPlfu.s 			page 219


 5360              		.loc 1 3153 5 view .LVU1486
3156:src/xeq.c     **** #else
 5361              		.loc 1 3156 5 view .LVU1487
3162:src/xeq.c     **** 			}
 5362              		.loc 1 3162 11 is_stmt 0 view .LVU1488
 5363 00c0 4429     		cmp	r1, #68
 5364 00c2 18BF     		it	ne
 5365 00c4 1646     		movne	r6, r2
 5366              	.LVL389:
3162:src/xeq.c     **** 			}
 5367              		.loc 1 3162 11 view .LVU1489
 5368              	.LBE1693:
3170:src/xeq.c     **** #  else
 5369              		.loc 1 3170 2 is_stmt 1 view .LVU1490
3179:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5370              		.loc 1 3179 2 view .LVU1491
3179:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5371              		.loc 1 3179 8 view .LVU1492
3179:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5372              		.loc 1 3179 9 is_stmt 0 view .LVU1493
 5373 00c6 FFF7FEFF 		bl	s_to_i
 5374              	.LVL390:
3179:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5375              		.loc 1 3179 8 view .LVU1494
 5376 00ca B042     		cmp	r0, r6
3180:src/xeq.c     **** 			p[i] = p[i + 1];
 5377              		.loc 1 3180 3 view .LVU1495
 5378 00cc 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
3179:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5379              		.loc 1 3179 8 view .LVU1496
 5380 00ce 0FDD     		ble	.L442
 5381              	.L463:
 5382              	.LVL391:
3180:src/xeq.c     **** 			p[i] = p[i + 1];
 5383              		.loc 1 3180 15 is_stmt 1 view .LVU1497
3180:src/xeq.c     **** 			p[i] = p[i + 1];
 5384              		.loc 1 3180 3 is_stmt 0 view .LVU1498
 5385 00d0 2BB1     		cbz	r3, .L444
 5386              	.LVL392:
 5387              	.L451:
3180:src/xeq.c     **** 			p[i] = p[i + 1];
 5388              		.loc 1 3180 3 view .LVU1499
 5389 00d2 3B46     		mov	r3, r7
 5390              	.L441:
3181:src/xeq.c     **** 		CmdLineLength--;
 5391              		.loc 1 3181 4 is_stmt 1 view .LVU1500
3181:src/xeq.c     **** 		CmdLineLength--;
 5392              		.loc 1 3181 9 is_stmt 0 view .LVU1501
 5393 00d4 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5394 00d6 1A70     		strb	r2, [r3]
3180:src/xeq.c     **** 			p[i] = p[i + 1];
 5395              		.loc 1 3180 29 is_stmt 1 view .LVU1502
3180:src/xeq.c     **** 			p[i] = p[i + 1];
 5396              		.loc 1 3180 15 view .LVU1503
3180:src/xeq.c     **** 			p[i] = p[i + 1];
 5397              		.loc 1 3180 3 is_stmt 0 view .LVU1504
 5398 00d8 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccQQPlfu.s 			page 220


 5399 00da 002A     		cmp	r2, #0
 5400 00dc FAD1     		bne	.L441
 5401              	.L444:
3182:src/xeq.c     **** 	}
 5402              		.loc 1 3182 3 is_stmt 1 view .LVU1505
3182:src/xeq.c     **** 	}
 5403              		.loc 1 3182 16 is_stmt 0 view .LVU1506
 5404 00de 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3179:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5405              		.loc 1 3179 9 view .LVU1507
 5406 00e0 3846     		mov	r0, r7
3182:src/xeq.c     **** 	}
 5407              		.loc 1 3182 16 view .LVU1508
 5408 00e2 013B     		subs	r3, r3, #1
 5409 00e4 2377     		strb	r3, [r4, #28]
3179:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5410              		.loc 1 3179 8 is_stmt 1 view .LVU1509
3179:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5411              		.loc 1 3179 9 is_stmt 0 view .LVU1510
 5412 00e6 FFF7FEFF 		bl	s_to_i
 5413              	.LVL393:
3179:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5414              		.loc 1 3179 8 view .LVU1511
 5415 00ea B042     		cmp	r0, r6
3180:src/xeq.c     **** 			p[i] = p[i + 1];
 5416              		.loc 1 3180 3 view .LVU1512
 5417 00ec 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
3179:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5418              		.loc 1 3179 8 view .LVU1513
 5419 00ee EFDC     		bgt	.L463
 5420              	.L442:
3179:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5421              		.loc 1 3179 26 view .LVU1514
 5422 00f0 302B     		cmp	r3, #48
 5423 00f2 EED0     		beq	.L451
 5424              	.LVL394:
 5425              	.L419:
3179:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5426              		.loc 1 3179 26 view .LVU1515
 5427              	.LBE1682:
 5428              	.LBE1681:
3894:src/xeq.c     **** 
 5429              		.loc 1 3894 1 view .LVU1516
 5430 00f4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5431              	.LVL395:
 5432              	.L424:
3850:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5433              		.loc 1 3850 4 is_stmt 1 view .LVU1517
3850:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5434              		.loc 1 3850 11 is_stmt 0 view .LVU1518
 5435 00f6 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 5436              	.LVL396:
3852:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5437              		.loc 1 3852 4 is_stmt 1 view .LVU1519
3852:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5438              		.loc 1 3852 7 is_stmt 0 view .LVU1520
 5439 00f8 012B     		cmp	r3, #1
ARM GAS  /tmp/ccQQPlfu.s 			page 221


 5440 00fa 35D9     		bls	.L464
3855:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5441              		.loc 1 3855 5 is_stmt 1 view .LVU1521
3855:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5442              		.loc 1 3855 22 is_stmt 0 view .LVU1522
 5443 00fc 2D2A     		cmp	r2, #45
 5444 00fe 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5445 0100 30D0     		beq	.L448
 5446 0102 1223     		movs	r3, #18
 5447              	.LVL397:
 5448              	.L425:
3865:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5449              		.loc 1 3865 2 is_stmt 1 view .LVU1523
3865:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5450              		.loc 1 3865 5 is_stmt 0 view .LVU1524
 5451 0104 9342     		cmp	r3, r2
 5452 0106 ABDC     		bgt	.L432
 5453              	.LVL398:
 5454              	.L445:
3867:src/xeq.c     **** 		return;
 5455              		.loc 1 3867 3 is_stmt 1 view .LVU1525
3894:src/xeq.c     **** 
 5456              		.loc 1 3894 1 is_stmt 0 view .LVU1526
 5457 0108 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5458              		.cfi_remember_state
 5459              		.cfi_restore 14
 5460              		.cfi_restore 7
 5461              		.cfi_restore 6
 5462              		.cfi_restore 5
 5463              		.cfi_restore 4
 5464              		.cfi_restore 3
 5465              		.cfi_def_cfa_offset 0
 5466              	.LVL399:
3867:src/xeq.c     **** 		return;
 5467              		.loc 1 3867 3 view .LVU1527
 5468 010c 0A20     		movs	r0, #10
 5469 010e FFF7FEBF 		b	report_warn
 5470              	.LVL400:
 5471              	.L462:
 5472              		.cfi_restore_state
3823:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5473              		.loc 1 3823 3 is_stmt 1 view .LVU1528
3823:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5474              		.loc 1 3823 12 is_stmt 0 view .LVU1529
 5475 0112 FFF7FEFF 		bl	int_base
 5476              	.LVL401:
3823:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5477              		.loc 1 3823 6 view .LVU1530
 5478 0116 A842     		cmp	r0, r5
 5479 0118 10D9     		bls	.L423
3865:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5480              		.loc 1 3865 2 is_stmt 1 view .LVU1531
3865:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5481              		.loc 1 3865 6 is_stmt 0 view .LVU1532
 5482 011a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3865:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5483              		.loc 1 3865 5 view .LVU1533
ARM GAS  /tmp/ccQQPlfu.s 			page 222


 5484 011c BA42     		cmp	r2, r7
 5485 011e F3DA     		bge	.L445
3871:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5486              		.loc 1 3871 2 is_stmt 1 view .LVU1534
3871:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5487              		.loc 1 3871 5 is_stmt 0 view .LVU1535
 5488 0120 092D     		cmp	r5, #9
 5489 0122 9DD9     		bls	.L432
3872:src/xeq.c     **** 	else {
 5490              		.loc 1 3872 3 is_stmt 1 view .LVU1536
 5491              	.LVL402:
 5492              	.LBB1694:
 5493              	.LBI1694:
2632:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5494              		.loc 1 2632 13 view .LVU1537
 5495              	.LBB1695:
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5496              		.loc 1 2633 2 view .LVU1538
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5497              		.loc 1 2633 23 is_stmt 0 view .LVU1539
 5498 0124 531C     		adds	r3, r2, #1
 5499 0126 DBB2     		uxtb	r3, r3
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5500              		.loc 1 2633 27 view .LVU1540
 5501 0128 2244     		add	r2, r2, r4
2634:src/xeq.c     **** }
 5502              		.loc 1 2634 25 view .LVU1541
 5503 012a E118     		adds	r1, r4, r3
 5504              	.LBE1695:
 5505              	.LBE1694:
3872:src/xeq.c     **** 	else {
 5506              		.loc 1 3872 3 view .LVU1542
 5507 012c 3735     		adds	r5, r5, #55
 5508              	.LVL403:
 5509              	.LBB1697:
 5510              	.LBB1696:
2634:src/xeq.c     **** }
 5511              		.loc 1 2634 25 view .LVU1543
 5512 012e 0026     		movs	r6, #0
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5513              		.loc 1 2633 27 view .LVU1544
 5514 0130 82F82050 		strb	r5, [r2, #32]
2634:src/xeq.c     **** }
 5515              		.loc 1 2634 2 is_stmt 1 view .LVU1545
2634:src/xeq.c     **** }
 5516              		.loc 1 2634 25 is_stmt 0 view .LVU1546
 5517 0134 81F82060 		strb	r6, [r1, #32]
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5518              		.loc 1 2633 23 view .LVU1547
 5519 0138 2377     		strb	r3, [r4, #28]
 5520              	.LBE1696:
 5521              	.LBE1697:
3894:src/xeq.c     **** 
 5522              		.loc 1 3894 1 view .LVU1548
 5523 013a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5524              	.LVL404:
 5525              	.L423:
ARM GAS  /tmp/ccQQPlfu.s 			page 223


3824:src/xeq.c     **** 			return;
 5526              		.loc 1 3824 4 is_stmt 1 view .LVU1549
3894:src/xeq.c     **** 
 5527              		.loc 1 3894 1 is_stmt 0 view .LVU1550
 5528 013c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5529              		.cfi_remember_state
 5530              		.cfi_restore 14
 5531              		.cfi_restore 7
 5532              		.cfi_restore 6
 5533              		.cfi_restore 5
 5534              		.cfi_restore 4
 5535              		.cfi_restore 3
 5536              		.cfi_def_cfa_offset 0
 5537              	.LVL405:
3824:src/xeq.c     **** 			return;
 5538              		.loc 1 3824 4 view .LVU1551
 5539 0140 0920     		movs	r0, #9
 5540 0142 FFF7FEBF 		b	report_warn
 5541              	.LVL406:
 5542              	.L434:
 5543              		.cfi_restore_state
3889:src/xeq.c     **** 
 5544              		.loc 1 3889 3 is_stmt 1 view .LVU1552
 5545              	.LBB1698:
2632:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5546              		.loc 1 2632 13 view .LVU1553
 5547              	.LBB1677:
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5548              		.loc 1 2633 2 view .LVU1554
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5549              		.loc 1 2633 23 is_stmt 0 view .LVU1555
 5550 0146 511C     		adds	r1, r2, #1
 5551 0148 C9B2     		uxtb	r1, r1
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5552              		.loc 1 2633 27 view .LVU1556
 5553 014a 2244     		add	r2, r2, r4
2634:src/xeq.c     **** }
 5554              		.loc 1 2634 25 view .LVU1557
 5555 014c 6718     		adds	r7, r4, r1
 5556              	.LBE1677:
 5557              	.LBE1698:
3889:src/xeq.c     **** 
 5558              		.loc 1 3889 3 view .LVU1558
 5559 014e 3035     		adds	r5, r5, #48
 5560              	.LVL407:
3891:src/xeq.c     **** 			exponent_adjusted(1);
 5561              		.loc 1 3891 7 view .LVU1559
 5562 0150 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 5563              	.LBB1699:
 5564              	.LBB1678:
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5565              		.loc 1 2633 27 view .LVU1560
 5566 0152 82F82050 		strb	r5, [r2, #32]
2634:src/xeq.c     **** }
 5567              		.loc 1 2634 2 is_stmt 1 view .LVU1561
2634:src/xeq.c     **** }
 5568              		.loc 1 2634 25 is_stmt 0 view .LVU1562
ARM GAS  /tmp/ccQQPlfu.s 			page 224


 5569 0156 0022     		movs	r2, #0
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5570              		.loc 1 2633 23 view .LVU1563
 5571 0158 2177     		strb	r1, [r4, #28]
2634:src/xeq.c     **** }
 5572              		.loc 1 2634 25 view .LVU1564
 5573 015a 87F82020 		strb	r2, [r7, #32]
2634:src/xeq.c     **** }
 5574              		.loc 1 2634 25 view .LVU1565
 5575              	.LBE1678:
 5576              	.LBE1699:
3891:src/xeq.c     **** 			exponent_adjusted(1);
 5577              		.loc 1 3891 3 is_stmt 1 view .LVU1566
3891:src/xeq.c     **** 			exponent_adjusted(1);
 5578              		.loc 1 3891 6 is_stmt 0 view .LVU1567
 5579 015e 002B     		cmp	r3, #0
 5580 0160 92D1     		bne	.L446
3894:src/xeq.c     **** 
 5581              		.loc 1 3894 1 view .LVU1568
 5582 0162 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5583              	.LVL408:
 5584              	.L448:
3834:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5585              		.loc 1 3834 8 view .LVU1569
 5586 0164 1323     		movs	r3, #19
 5587 0166 CDE7     		b	.L425
 5588              	.LVL409:
 5589              	.L464:
3834:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5590              		.loc 1 3834 8 view .LVU1570
 5591 0168 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3850:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5592              		.loc 1 3850 8 view .LVU1571
 5593 016a 3B44     		add	r3, r3, r7
 5594              	.LVL410:
3850:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5595              		.loc 1 3850 8 view .LVU1572
 5596 016c CAE7     		b	.L425
 5597              	.LVL411:
 5598              	.L435:
3889:src/xeq.c     **** 
 5599              		.loc 1 3889 3 is_stmt 1 view .LVU1573
 5600              	.LBB1700:
2632:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5601              		.loc 1 2632 13 view .LVU1574
 5602              	.LBB1679:
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5603              		.loc 1 2633 2 view .LVU1575
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5604              		.loc 1 2633 23 is_stmt 0 view .LVU1576
 5605 016e 531C     		adds	r3, r2, #1
 5606 0170 DBB2     		uxtb	r3, r3
2634:src/xeq.c     **** }
 5607              		.loc 1 2634 25 view .LVU1577
 5608 0172 E118     		adds	r1, r4, r3
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5609              		.loc 1 2633 27 view .LVU1578
ARM GAS  /tmp/ccQQPlfu.s 			page 225


 5610 0174 2244     		add	r2, r2, r4
 5611 0176 3020     		movs	r0, #48
 5612 0178 82F82000 		strb	r0, [r2, #32]
2634:src/xeq.c     **** }
 5613              		.loc 1 2634 2 is_stmt 1 view .LVU1579
2634:src/xeq.c     **** }
 5614              		.loc 1 2634 25 is_stmt 0 view .LVU1580
 5615 017c 81F82050 		strb	r5, [r1, #32]
 5616              	.LVL412:
2634:src/xeq.c     **** }
 5617              		.loc 1 2634 25 view .LVU1581
 5618              	.LBE1679:
 5619              	.LBE1700:
3891:src/xeq.c     **** 			exponent_adjusted(1);
 5620              		.loc 1 3891 3 is_stmt 1 view .LVU1582
 5621              	.LBB1701:
 5622              	.LBB1680:
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5623              		.loc 1 2633 23 is_stmt 0 view .LVU1583
 5624 0180 2377     		strb	r3, [r4, #28]
 5625              	.LBE1680:
 5626              	.LBE1701:
3894:src/xeq.c     **** 
 5627              		.loc 1 3894 1 view .LVU1584
 5628 0182 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5629              	.LVL413:
 5630              	.L466:
3894:src/xeq.c     **** 
 5631              		.loc 1 3894 1 view .LVU1585
 5632              		.align	2
 5633              	.L465:
 5634 0184 00000000 		.word	main_ram
 5635 0188 00000000 		.word	StateWhileOn
 5636 018c 33000000 		.word	StateWhileOn+51
 5637              		.cfi_endproc
 5638              	.LFE213:
 5640              		.section	.text.s_to_ull,"ax",%progbits
 5641              		.align	1
 5642              		.p2align 2,,3
 5643              		.global	s_to_ull
 5644              		.syntax unified
 5645              		.thumb
 5646              		.thumb_func
 5647              		.fpu fpv4-sp-d16
 5649              	s_to_ull:
 5650              	.LVL414:
 5651              	.LFB85:
1151:src/xeq.c     **** 	unsigned long long int x = 0;
 5652              		.loc 1 1151 67 is_stmt 1 view -0
 5653              		.cfi_startproc
 5654              		@ args = 0, pretend = 0, frame = 0
 5655              		@ frame_needed = 0, uses_anonymous_args = 0
 5656              		@ link register save eliminated.
1152:src/xeq.c     **** 
 5657              		.loc 1 1152 2 view .LVU1587
1151:src/xeq.c     **** 	unsigned long long int x = 0;
 5658              		.loc 1 1151 67 is_stmt 0 view .LVU1588
ARM GAS  /tmp/ccQQPlfu.s 			page 226


 5659 0000 F0B4     		push	{r4, r5, r6, r7}
 5660              		.cfi_def_cfa_offset 16
 5661              		.cfi_offset 4, -16
 5662              		.cfi_offset 5, -12
 5663              		.cfi_offset 6, -8
 5664              		.cfi_offset 7, -4
1152:src/xeq.c     **** 
 5665              		.loc 1 1152 25 view .LVU1589
 5666 0002 0026     		movs	r6, #0
 5667 0004 0027     		movs	r7, #0
 5668 0006 02E0     		b	.L471
 5669              	.LVL415:
 5670              	.L473:
 5671              	.LBB1702:
1166:src/xeq.c     **** 	}
 5672              		.loc 1 1166 5 view .LVU1590
 5673 0008 E618     		adds	r6, r4, r3
 5674              	.LVL416:
1166:src/xeq.c     **** 	}
 5675              		.loc 1 1166 5 view .LVU1591
 5676 000a 45F10007 		adc	r7, r5, #0
 5677              	.LVL417:
1166:src/xeq.c     **** 	}
 5678              		.loc 1 1166 5 view .LVU1592
 5679              	.LBE1702:
1154:src/xeq.c     **** 		unsigned int n;
 5680              		.loc 1 1154 8 is_stmt 1 view .LVU1593
 5681              	.L471:
1154:src/xeq.c     **** 		unsigned int n;
 5682              		.loc 1 1154 2 view .LVU1594
 5683              	.LBB1703:
1155:src/xeq.c     **** 		const char c = *s++;
 5684              		.loc 1 1155 3 view .LVU1595
1156:src/xeq.c     **** 
 5685              		.loc 1 1156 3 view .LVU1596
1159:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 5686              		.loc 1 1159 4 view .LVU1597
1160:src/xeq.c     **** 			n = c - 'A' + 10;
 5687              		.loc 1 1160 8 view .LVU1598
1161:src/xeq.c     **** 		else
 5688              		.loc 1 1161 4 view .LVU1599
1156:src/xeq.c     **** 
 5689              		.loc 1 1156 14 is_stmt 0 view .LVU1600
 5690 000e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5691              	.LVL418:
1158:src/xeq.c     **** 			n = c - '0';
 5692              		.loc 1 1158 3 is_stmt 1 view .LVU1601
1158:src/xeq.c     **** 			n = c - '0';
 5693              		.loc 1 1158 16 is_stmt 0 view .LVU1602
 5694 0012 A2F13003 		sub	r3, r2, #48
1158:src/xeq.c     **** 			n = c - '0';
 5695              		.loc 1 1158 6 view .LVU1603
 5696 0016 DCB2     		uxtb	r4, r3
 5697 0018 092C     		cmp	r4, #9
1160:src/xeq.c     **** 			n = c - 'A' + 10;
 5698              		.loc 1 1160 11 view .LVU1604
 5699 001a A2F14105 		sub	r5, r2, #65
ARM GAS  /tmp/ccQQPlfu.s 			page 227


1158:src/xeq.c     **** 			n = c - '0';
 5700              		.loc 1 1158 6 view .LVU1605
 5701 001e 03D9     		bls	.L469
1160:src/xeq.c     **** 			n = c - 'A' + 10;
 5702              		.loc 1 1160 11 view .LVU1606
 5703 0020 052D     		cmp	r5, #5
 5704 0022 07D8     		bhi	.L467
1161:src/xeq.c     **** 		else
 5705              		.loc 1 1161 16 view .LVU1607
 5706 0024 A2F13703 		sub	r3, r2, #55
 5707              	.LVL419:
 5708              	.L469:
1164:src/xeq.c     **** 			break;
 5709              		.loc 1 1164 3 is_stmt 1 view .LVU1608
1166:src/xeq.c     **** 	}
 5710              		.loc 1 1166 3 view .LVU1609
1166:src/xeq.c     **** 	}
 5711              		.loc 1 1166 9 is_stmt 0 view .LVU1610
 5712 0028 A1FB0645 		umull	r4, r5, r1, r6
1164:src/xeq.c     **** 			break;
 5713              		.loc 1 1164 6 view .LVU1611
 5714 002c 8B42     		cmp	r3, r1
1166:src/xeq.c     **** 	}
 5715              		.loc 1 1166 9 view .LVU1612
 5716 002e 01FB0755 		mla	r5, r1, r7, r5
1164:src/xeq.c     **** 			break;
 5717              		.loc 1 1164 6 view .LVU1613
 5718 0032 E9D3     		bcc	.L473
 5719              	.LVL420:
 5720              	.L467:
1164:src/xeq.c     **** 			break;
 5721              		.loc 1 1164 6 view .LVU1614
 5722              	.LBE1703:
1169:src/xeq.c     **** 
 5723              		.loc 1 1169 1 view .LVU1615
 5724 0034 3046     		mov	r0, r6
 5725              	.LVL421:
1169:src/xeq.c     **** 
 5726              		.loc 1 1169 1 view .LVU1616
 5727 0036 3946     		mov	r1, r7
 5728              	.LVL422:
1169:src/xeq.c     **** 
 5729              		.loc 1 1169 1 view .LVU1617
 5730 0038 F0BC     		pop	{r4, r5, r6, r7}
 5731              		.cfi_restore 7
 5732              		.cfi_restore 6
 5733              		.cfi_restore 5
 5734              		.cfi_restore 4
 5735              		.cfi_def_cfa_offset 0
 5736              	.LVL423:
1169:src/xeq.c     **** 
 5737              		.loc 1 1169 1 view .LVU1618
 5738 003a 7047     		bx	lr
 5739              		.cfi_endproc
 5740              	.LFE85:
 5742              		.section	.text.get_cmdline,"ax",%progbits
 5743              		.align	1
ARM GAS  /tmp/ccQQPlfu.s 			page 228


 5744              		.p2align 2,,3
 5745              		.global	get_cmdline
 5746              		.syntax unified
 5747              		.thumb
 5748              		.thumb_func
 5749              		.fpu fpv4-sp-d16
 5751              	get_cmdline:
 5752              	.LFB86:
1171:src/xeq.c     **** 	if (CmdLineLength) {
 5753              		.loc 1 1171 31 is_stmt 1 view -0
 5754              		.cfi_startproc
 5755              		@ args = 0, pretend = 0, frame = 0
 5756              		@ frame_needed = 0, uses_anonymous_args = 0
 5757              		@ link register save eliminated.
1172:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5758              		.loc 1 1172 2 view .LVU1620
1172:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5759              		.loc 1 1172 6 is_stmt 0 view .LVU1621
 5760 0000 044B     		ldr	r3, .L477
 5761 0002 187F     		ldrb	r0, [r3, #28]	@ zero_extendqisi2
1172:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5762              		.loc 1 1172 5 view .LVU1622
 5763 0004 28B1     		cbz	r0, .L474
1173:src/xeq.c     **** 		return Cmdline;
 5764              		.loc 1 1173 3 is_stmt 1 view .LVU1623
1173:src/xeq.c     **** 		return Cmdline;
 5765              		.loc 1 1173 26 is_stmt 0 view .LVU1624
 5766 0006 1A18     		adds	r2, r3, r0
 5767 0008 0021     		movs	r1, #0
1174:src/xeq.c     **** 	}
 5768              		.loc 1 1174 10 view .LVU1625
 5769 000a 03F12000 		add	r0, r3, #32
1173:src/xeq.c     **** 		return Cmdline;
 5770              		.loc 1 1173 26 view .LVU1626
 5771 000e 82F82010 		strb	r1, [r2, #32]
1174:src/xeq.c     **** 	}
 5772              		.loc 1 1174 3 is_stmt 1 view .LVU1627
 5773              	.L474:
1177:src/xeq.c     **** 
 5774              		.loc 1 1177 1 is_stmt 0 view .LVU1628
 5775 0012 7047     		bx	lr
 5776              	.L478:
 5777              		.align	2
 5778              	.L477:
 5779 0014 00000000 		.word	StateWhileOn
 5780              		.cfi_endproc
 5781              	.LFE86:
 5783              		.section	.text.is_bad_cmdline,"ax",%progbits
 5784              		.align	1
 5785              		.p2align 2,,3
 5786              		.global	is_bad_cmdline
 5787              		.syntax unified
 5788              		.thumb
 5789              		.thumb_func
 5790              		.fpu fpv4-sp-d16
 5792              	is_bad_cmdline:
 5793              	.LFB87:
ARM GAS  /tmp/ccQQPlfu.s 			page 229


1194:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
 5794              		.loc 1 1194 1 is_stmt 1 view -0
 5795              		.cfi_startproc
 5796              		@ args = 0, pretend = 0, frame = 0
 5797              		@ frame_needed = 0, uses_anonymous_args = 0
 5798              		@ link register save eliminated.
1215:src/xeq.c     **** }
 5799              		.loc 1 1215 2 view .LVU1630
1216:src/xeq.c     **** 
 5800              		.loc 1 1216 1 is_stmt 0 view .LVU1631
 5801 0000 0020     		movs	r0, #0
 5802 0002 7047     		bx	lr
 5803              		.cfi_endproc
 5804              	.LFE87:
 5806              		.section	.text.get_flash_reg_n,"ax",%progbits
 5807              		.align	1
 5808              		.p2align 2,,3
 5809              		.global	get_flash_reg_n
 5810              		.syntax unified
 5811              		.thumb
 5812              		.thumb_func
 5813              		.fpu fpv4-sp-d16
 5815              	get_flash_reg_n:
 5816              	.LVL424:
 5817              	.LFB92:
1379:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 5818              		.loc 1 1379 34 is_stmt 1 view -0
 5819              		.cfi_startproc
 5820              		@ args = 0, pretend = 0, frame = 0
 5821              		@ frame_needed = 0, uses_anonymous_args = 0
 5822              		@ link register save eliminated.
1380:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5823              		.loc 1 1380 2 view .LVU1633
1380:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5824              		.loc 1 1380 37 is_stmt 0 view .LVU1634
 5825 0000 064B     		ldr	r3, .L481
 5826 0002 1A68     		ldr	r2, [r3]
1380:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5827              		.loc 1 1380 68 view .LVU1635
 5828 0004 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1380:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5829              		.loc 1 1380 37 view .LVU1636
 5830 0008 02F22C41 		addw	r1, r2, #1068
1380:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5831              		.loc 1 1380 68 view .LVU1637
 5832 000c C3F16403 		rsb	r3, r3, #100
1380:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5833              		.loc 1 1380 22 view .LVU1638
 5834 0010 01EBC301 		add	r1, r1, r3, lsl #3
 5835 0014 02F24C72 		addw	r2, r2, #1868
 5836 0018 FFF7FEBF 		b	reg_address
 5837              	.LVL425:
 5838              	.L482:
1380:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5839              		.loc 1 1380 22 view .LVU1639
 5840              		.align	2
 5841              	.L481:
ARM GAS  /tmp/ccQQPlfu.s 			page 230


 5842 001c 00000000 		.word	backup_ram
 5843              		.cfi_endproc
 5844              	.LFE92:
 5846              		.section	.text.get_const,"ax",%progbits
 5847              		.align	1
 5848              		.p2align 2,,3
 5849              		.global	get_const
 5850              		.syntax unified
 5851              		.thumb
 5852              		.thumb_func
 5853              		.fpu fpv4-sp-d16
 5855              	get_const:
 5856              	.LVL426:
 5857              	.LFB93:
1390:src/xeq.c     **** 	static REGISTER result;
 5858              		.loc 1 1390 1 is_stmt 1 view -0
 5859              		.cfi_startproc
 5860              		@ args = 0, pretend = 0, frame = 40
 5861              		@ frame_needed = 0, uses_anonymous_args = 0
1391:src/xeq.c     **** 	const int i = cnsts[index].index;
 5862              		.loc 1 1391 2 view .LVU1641
1392:src/xeq.c     **** 	if (dbl) {
 5863              		.loc 1 1392 2 view .LVU1642
1390:src/xeq.c     **** 	static REGISTER result;
 5864              		.loc 1 1390 1 is_stmt 0 view .LVU1643
 5865 0000 00B5     		push	{lr}
 5866              		.cfi_def_cfa_offset 4
 5867              		.cfi_offset 14, -4
1392:src/xeq.c     **** 	if (dbl) {
 5868              		.loc 1 1392 28 view .LVU1644
 5869 0002 1C4B     		ldr	r3, .L489
 5870 0004 00EB4000 		add	r0, r0, r0, lsl #1
 5871              	.LVL427:
1390:src/xeq.c     **** 	static REGISTER result;
 5872              		.loc 1 1390 1 view .LVU1645
 5873 0008 8BB0     		sub	sp, sp, #44
 5874              		.cfi_def_cfa_offset 48
1392:src/xeq.c     **** 	if (dbl) {
 5875              		.loc 1 1392 28 view .LVU1646
 5876 000a 13F82030 		ldrb	r3, [r3, r0, lsl #2]	@ zero_extendqisi2
 5877              	.LVL428:
1393:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5878              		.loc 1 1393 2 is_stmt 1 view .LVU1647
1393:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5879              		.loc 1 1393 5 is_stmt 0 view .LVU1648
 5880 000e 51B1     		cbz	r1, .L484
1394:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5881              		.loc 1 1394 3 is_stmt 1 view .LVU1649
1394:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5882              		.loc 1 1394 14 is_stmt 0 view .LVU1650
 5883 0010 9A1E     		subs	r2, r3, #2
1394:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5884              		.loc 1 1394 6 view .LVU1651
 5885 0012 7D2A     		cmp	r2, #125
 5886 0014 0FD9     		bls	.L485
1395:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5887              		.loc 1 1395 4 is_stmt 1 view .LVU1652
ARM GAS  /tmp/ccQQPlfu.s 			page 231


1395:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5888              		.loc 1 1395 11 is_stmt 0 view .LVU1653
 5889 0016 184A     		ldr	r2, .L489+4
1395:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5890              		.loc 1 1395 36 view .LVU1654
 5891 0018 03F07F00 		and	r0, r3, #127
1395:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5892              		.loc 1 1395 11 view .LVU1655
 5893 001c 02EB0010 		add	r0, r2, r0, lsl #4
1404:src/xeq.c     **** 
 5894              		.loc 1 1404 1 view .LVU1656
 5895 0020 0BB0     		add	sp, sp, #44
 5896              		.cfi_remember_state
 5897              		.cfi_def_cfa_offset 4
 5898              		@ sp needed
 5899 0022 5DF804FB 		ldr	pc, [sp], #4
 5900              	.L484:
 5901              		.cfi_restore_state
1399:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5902              		.loc 1 1399 3 is_stmt 1 view .LVU1657
1399:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5903              		.loc 1 1399 6 is_stmt 0 view .LVU1658
 5904 0026 1A06     		lsls	r2, r3, #24
 5905 0028 13D4     		bmi	.L487
1400:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5906              		.loc 1 1400 4 is_stmt 1 view .LVU1659
1400:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5907              		.loc 1 1400 11 is_stmt 0 view .LVU1660
 5908 002a 1448     		ldr	r0, .L489+8
 5909 002c 00EBC300 		add	r0, r0, r3, lsl #3
1404:src/xeq.c     **** 
 5910              		.loc 1 1404 1 view .LVU1661
 5911 0030 0BB0     		add	sp, sp, #44
 5912              		.cfi_remember_state
 5913              		.cfi_def_cfa_offset 4
 5914              		@ sp needed
 5915 0032 5DF804FB 		ldr	pc, [sp], #4
 5916              	.L485:
 5917              		.cfi_restore_state
1396:src/xeq.c     **** 	}
 5918              		.loc 1 1396 3 is_stmt 1 view .LVU1662
 5919              	.LVL429:
 5920              	.LBB1704:
 5921              	.LBI1704:
 648:src/xeq.c     **** 	decNumber temp;
 5922              		.loc 1 648 6 view .LVU1663
 5923              	.LBB1705:
 649:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 5924              		.loc 1 649 2 view .LVU1664
 650:src/xeq.c     **** }
 5925              		.loc 1 650 2 view .LVU1665
 5926              	.LBE1705:
 5927              	.LBE1704:
1396:src/xeq.c     **** 	}
 5928              		.loc 1 1396 3 is_stmt 0 view .LVU1666
 5929 0036 1148     		ldr	r0, .L489+8
 5930              	.LBB1707:
ARM GAS  /tmp/ccQQPlfu.s 			page 232


 5931              	.LBB1706:
 650:src/xeq.c     **** }
 5932              		.loc 1 650 27 view .LVU1667
 5933 0038 01A9     		add	r1, sp, #4
 5934              	.LVL430:
 650:src/xeq.c     **** }
 5935              		.loc 1 650 27 view .LVU1668
 5936 003a 00EBC300 		add	r0, r0, r3, lsl #3
 5937 003e FFF7FEFF 		bl	decimal64ToNumber
 5938              	.LVL431:
 650:src/xeq.c     **** }
 5939              		.loc 1 650 27 view .LVU1669
 5940 0042 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 5941              		.loc 1 650 2 view .LVU1670
 5942 0044 0E48     		ldr	r0, .L489+12
 5943 0046 FFF7FEFF 		bl	packed128_from_number
 5944              	.LVL432:
 5945              	.LBE1706:
 5946              	.LBE1707:
1403:src/xeq.c     **** }
 5947              		.loc 1 1403 9 view .LVU1671
 5948 004a 0D48     		ldr	r0, .L489+12
1404:src/xeq.c     **** 
 5949              		.loc 1 1404 1 view .LVU1672
 5950 004c 0BB0     		add	sp, sp, #44
 5951              		.cfi_remember_state
 5952              		.cfi_def_cfa_offset 4
 5953              		@ sp needed
 5954 004e 5DF804FB 		ldr	pc, [sp], #4
 5955              	.LVL433:
 5956              	.L487:
 5957              		.cfi_restore_state
1401:src/xeq.c     **** 	}
 5958              		.loc 1 1401 3 is_stmt 1 view .LVU1673
 5959              	.LBB1708:
 5960              	.LBI1708:
 642:src/xeq.c     **** 	decNumber temp;
 5961              		.loc 1 642 6 view .LVU1674
 5962              	.LBB1709:
 643:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 5963              		.loc 1 643 2 view .LVU1675
 644:src/xeq.c     **** }
 5964              		.loc 1 644 2 view .LVU1676
 5965              	.LBE1709:
 5966              	.LBE1708:
1401:src/xeq.c     **** 	}
 5967              		.loc 1 1401 3 is_stmt 0 view .LVU1677
 5968 0052 0948     		ldr	r0, .L489+4
1401:src/xeq.c     **** 	}
 5969              		.loc 1 1401 55 view .LVU1678
 5970 0054 03F18053 		add	r3, r3, #268435456
 5971              	.LVL434:
1401:src/xeq.c     **** 	}
 5972              		.loc 1 1401 55 view .LVU1679
 5973 0058 803B     		subs	r3, r3, #128
 5974              	.LVL435:
ARM GAS  /tmp/ccQQPlfu.s 			page 233


 5975              	.LBB1711:
 5976              	.LBB1710:
 644:src/xeq.c     **** }
 5977              		.loc 1 644 24 view .LVU1680
 5978 005a 00EB0310 		add	r0, r0, r3, lsl #4
 5979 005e 01A9     		add	r1, sp, #4
 5980              	.LVL436:
 644:src/xeq.c     **** }
 5981              		.loc 1 644 24 view .LVU1681
 5982 0060 FFF7FEFF 		bl	decimal128ToNumber
 5983              	.LVL437:
 644:src/xeq.c     **** }
 5984              		.loc 1 644 24 view .LVU1682
 5985 0064 0146     		mov	r1, r0
 644:src/xeq.c     **** }
 5986              		.loc 1 644 2 view .LVU1683
 5987 0066 0648     		ldr	r0, .L489+12
 5988 0068 FFF7FEFF 		bl	packed_from_number
 5989              	.LVL438:
 5990              	.LBE1710:
 5991              	.LBE1711:
1403:src/xeq.c     **** }
 5992              		.loc 1 1403 9 view .LVU1684
 5993 006c 0448     		ldr	r0, .L489+12
 5994              	.LVL439:
1404:src/xeq.c     **** 
 5995              		.loc 1 1404 1 view .LVU1685
 5996 006e 0BB0     		add	sp, sp, #44
 5997              		.cfi_def_cfa_offset 4
 5998              		@ sp needed
 5999 0070 5DF804FB 		ldr	pc, [sp], #4
 6000              	.L490:
 6001              		.align	2
 6002              	.L489:
 6003 0074 00000000 		.word	cnsts
 6004 0078 00000000 		.word	cnsts_d128
 6005 007c 00000000 		.word	cnsts_d64
 6006 0080 00000000 		.word	.LANCHOR2
 6007              		.cfi_endproc
 6008              	.LFE93:
 6010              		.section	.text.get_reg_n,"ax",%progbits
 6011              		.align	1
 6012              		.p2align 2,,3
 6013              		.global	get_reg_n
 6014              		.syntax unified
 6015              		.thumb
 6016              		.thumb_func
 6017              		.fpu fpv4-sp-d16
 6019              	get_reg_n:
 6020              	.LVL440:
 6021              	.LFB91:
1358:src/xeq.c     **** 	const int dbl = is_dblmode();
 6022              		.loc 1 1358 28 is_stmt 1 view -0
 6023              		.cfi_startproc
 6024              		@ args = 0, pretend = 0, frame = 0
 6025              		@ frame_needed = 0, uses_anonymous_args = 0
 6026              		@ link register save eliminated.
ARM GAS  /tmp/ccQQPlfu.s 			page 234


1359:src/xeq.c     **** 
 6027              		.loc 1 1359 2 view .LVU1687
 6028              	.LBB1712:
 6029              	.LBI1712:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6030              		.loc 1 1112 5 view .LVU1688
 6031              	.LBB1713:
1113:src/xeq.c     **** }
 6032              		.loc 1 1113 2 view .LVU1689
1113:src/xeq.c     **** }
 6033              		.loc 1 1113 12 is_stmt 0 view .LVU1690
 6034 0000 294B     		ldr	r3, .L506
 6035 0002 1A68     		ldr	r2, [r3]
1113:src/xeq.c     **** }
 6036              		.loc 1 1113 24 view .LVU1691
 6037 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 6038 0008 44F20103 		movw	r3, #16385
 6039 000c 0B40     		ands	r3, r3, r1
 6040 000e A3F58041 		sub	r1, r3, #16384
 6041 0012 B1FA81F1 		clz	r1, r1
 6042              	.LBE1713:
 6043              	.LBE1712:
1361:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6044              		.loc 1 1361 5 view .LVU1692
 6045 0016 B0F5FA6F 		cmp	r0, #2000
 6046              	.LBB1715:
 6047              	.LBB1714:
1113:src/xeq.c     **** }
 6048              		.loc 1 1113 24 view .LVU1693
 6049 001a 4FEA5111 		lsr	r1, r1, #5
 6050              	.LVL441:
1113:src/xeq.c     **** }
 6051              		.loc 1 1113 24 view .LVU1694
 6052              	.LBE1714:
 6053              	.LBE1715:
1361:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6054              		.loc 1 1361 2 is_stmt 1 view .LVU1695
1361:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6055              		.loc 1 1361 5 is_stmt 0 view .LVU1696
 6056 001e 26DA     		bge	.L503
1365:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6057              		.loc 1 1365 2 is_stmt 1 view .LVU1697
1365:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6058              		.loc 1 1365 5 is_stmt 0 view .LVU1698
 6059 0020 B0F57A7F 		cmp	r0, #1000
 6060 0024 13DA     		bge	.L504
1368:src/xeq.c     **** 		// local register on the return stack
 6061              		.loc 1 1368 2 is_stmt 1 view .LVU1699
1368:src/xeq.c     **** 		// local register on the return stack
 6062              		.loc 1 1368 5 is_stmt 0 view .LVU1700
 6063 0026 6F28     		cmp	r0, #111
1358:src/xeq.c     **** 	const int dbl = is_dblmode();
 6064              		.loc 1 1358 28 view .LVU1701
 6065 0028 70B4     		push	{r4, r5, r6}
 6066              		.cfi_def_cfa_offset 12
 6067              		.cfi_offset 4, -12
 6068              		.cfi_offset 5, -8
ARM GAS  /tmp/ccQQPlfu.s 			page 235


 6069              		.cfi_offset 6, -4
1368:src/xeq.c     **** 		// local register on the return stack
 6070              		.loc 1 1368 5 view .LVU1702
 6071 002a 03DD     		ble	.L494
 6072              	.LBB1716:
 6073              	.LBI1716:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 6074              		.loc 1 233 5 is_stmt 1 view .LVU1703
 6075              	.LBE1716:
 234:src/xeq.c     **** }
 6076              		.loc 1 234 2 view .LVU1704
 6077              	.LVL442:
 6078              	.LBB1729:
 6079              	.LBB1717:
 6080              	.LBI1717:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 6081              		.loc 1 225 5 view .LVU1705
 6082              	.LBB1718:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 6083              		.loc 1 226 2 view .LVU1706
 6084              	.LBE1718:
 6085              	.LBE1717:
 6086              	.LBE1729:
1113:src/xeq.c     **** }
 6087              		.loc 1 1113 2 view .LVU1707
 6088              	.LBB1730:
 6089              	.LBB1727:
 6090              	.LBB1725:
 227:src/xeq.c     **** }
 6091              		.loc 1 227 2 view .LVU1708
 6092              	.LBB1719:
 6093              	.LBI1719:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 6094              		.loc 1 217 5 view .LVU1709
 6095              	.LBB1720:
 218:src/xeq.c     **** }
 6096              		.loc 1 218 2 view .LVU1710
 218:src/xeq.c     **** }
 6097              		.loc 1 218 9 is_stmt 0 view .LVU1711
 6098 002c B2F9DE47 		ldrsh	r4, [r2, #2014]
 218:src/xeq.c     **** }
 6099              		.loc 1 218 57 view .LVU1712
 6100 0030 002C     		cmp	r4, #0
 6101 0032 20DB     		blt	.L505
 6102              	.LVL443:
 6103              	.L494:
 218:src/xeq.c     **** }
 6104              		.loc 1 218 57 view .LVU1713
 6105              	.LBE1720:
 6106              	.LBE1719:
 6107              	.LBE1725:
 6108              	.LBE1727:
 6109              	.LBE1730:
1375:src/xeq.c     **** }
 6110              		.loc 1 1375 2 is_stmt 1 view .LVU1714
1375:src/xeq.c     **** }
 6111              		.loc 1 1375 55 is_stmt 0 view .LVU1715
ARM GAS  /tmp/ccQQPlfu.s 			page 236


 6112 0034 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
 6113              	.LVL444:
1375:src/xeq.c     **** }
 6114              		.loc 1 1375 37 view .LVU1716
 6115 0038 02F22C41 		addw	r1, r2, #1068
1375:src/xeq.c     **** }
 6116              		.loc 1 1375 55 view .LVU1717
 6117 003c C3F16403 		rsb	r3, r3, #100
1376:src/xeq.c     **** 
 6118              		.loc 1 1376 1 view .LVU1718
 6119 0040 70BC     		pop	{r4, r5, r6}
 6120              		.cfi_restore 6
 6121              		.cfi_restore 5
 6122              		.cfi_restore 4
 6123              		.cfi_def_cfa_offset 0
1375:src/xeq.c     **** }
 6124              		.loc 1 1375 22 view .LVU1719
 6125 0042 01EBC301 		add	r1, r1, r3, lsl #3
 6126 0046 02F24C72 		addw	r2, r2, #1868
 6127              	.LVL445:
1375:src/xeq.c     **** }
 6128              		.loc 1 1375 22 view .LVU1720
 6129 004a FFF7FEBF 		b	reg_address
 6130              	.LVL446:
 6131              	.L504:
1366:src/xeq.c     **** 
 6132              		.loc 1 1366 3 is_stmt 1 view .LVU1721
 6133              	.LBB1731:
 6134              	.LBI1731:
1379:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 6135              		.loc 1 1379 11 view .LVU1722
 6136              	.LBB1732:
1380:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6137              		.loc 1 1380 2 view .LVU1723
1380:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6138              		.loc 1 1380 37 is_stmt 0 view .LVU1724
 6139 004e 174B     		ldr	r3, .L506+4
 6140 0050 1A68     		ldr	r2, [r3]
1380:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6141              		.loc 1 1380 68 view .LVU1725
 6142 0052 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1380:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6143              		.loc 1 1380 37 view .LVU1726
 6144 0056 02F22C41 		addw	r1, r2, #1068
 6145              	.LVL447:
1380:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6146              		.loc 1 1380 68 view .LVU1727
 6147 005a C3F16403 		rsb	r3, r3, #100
1380:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6148              		.loc 1 1380 22 view .LVU1728
 6149 005e A0F57A70 		sub	r0, r0, #1000
 6150              	.LVL448:
1380:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6151              		.loc 1 1380 22 view .LVU1729
 6152 0062 01EBC301 		add	r1, r1, r3, lsl #3
 6153 0066 02F24C72 		addw	r2, r2, #1868
 6154 006a FFF7FEBF 		b	reg_address
ARM GAS  /tmp/ccQQPlfu.s 			page 237


 6155              	.LVL449:
 6156              	.L503:
1380:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6157              		.loc 1 1380 22 view .LVU1730
 6158              	.LBE1732:
 6159              	.LBE1731:
1362:src/xeq.c     **** 		return get_const(n, dbl);
 6160              		.loc 1 1362 3 is_stmt 1 view .LVU1731
1363:src/xeq.c     **** 	}
 6161              		.loc 1 1363 3 view .LVU1732
1363:src/xeq.c     **** 	}
 6162              		.loc 1 1363 10 is_stmt 0 view .LVU1733
 6163 006e A0F5FA60 		sub	r0, r0, #2000
 6164              	.LVL450:
1363:src/xeq.c     **** 	}
 6165              		.loc 1 1363 10 view .LVU1734
 6166 0072 FFF7FEBF 		b	get_const
 6167              	.LVL451:
 6168              	.L505:
 6169              		.cfi_def_cfa_offset 12
 6170              		.cfi_offset 4, -12
 6171              		.cfi_offset 5, -8
 6172              		.cfi_offset 6, -4
 6173              	.LBB1733:
 6174              	.LBB1728:
 6175              	.LBB1726:
 6176              	.LBB1723:
 6177              	.LBB1721:
 218:src/xeq.c     **** }
 6178              		.loc 1 218 25 view .LVU1735
 6179 0076 0E4D     		ldr	r5, .L506+8
 6180 0078 2D68     		ldr	r5, [r5]
 6181              	.LVL452:
 218:src/xeq.c     **** }
 6182              		.loc 1 218 57 view .LVU1736
 6183 007a 35F81460 		ldrh	r6, [r5, r4, lsl #1]
 6184              	.LBE1721:
 6185              	.LBE1723:
 227:src/xeq.c     **** }
 6186              		.loc 1 227 30 view .LVU1737
 6187 007e 0231     		adds	r1, r1, #2
 6188              	.LVL453:
 6189              	.LBB1724:
 6190              	.LBB1722:
 218:src/xeq.c     **** }
 6191              		.loc 1 218 57 view .LVU1738
 6192 0080 C6F30B06 		ubfx	r6, r6, #0, #12
 6193              	.LBE1722:
 6194              	.LBE1724:
 6195              	.LBE1726:
 6196              	.LBE1728:
 6197              	.LBE1733:
1368:src/xeq.c     **** 		// local register on the return stack
 6198              		.loc 1 1368 26 view .LVU1739
 6199 0084 56FA01F1 		asrs	r1, r6, r1
 6200              	.LVL454:
1368:src/xeq.c     **** 		// local register on the return stack
ARM GAS  /tmp/ccQQPlfu.s 			page 238


 6201              		.loc 1 1368 26 view .LVU1740
 6202 0088 D4D0     		beq	.L494
1370:src/xeq.c     **** 		if (dbl)
 6203              		.loc 1 1370 3 is_stmt 1 view .LVU1741
1370:src/xeq.c     **** 		if (dbl)
 6204              		.loc 1 1370 5 is_stmt 0 view .LVU1742
 6205 008a 7038     		subs	r0, r0, #112
 6206              	.LVL455:
1371:src/xeq.c     **** 			n <<= 1;
 6207              		.loc 1 1371 3 is_stmt 1 view .LVU1743
1371:src/xeq.c     **** 			n <<= 1;
 6208              		.loc 1 1371 6 is_stmt 0 view .LVU1744
 6209 008c B3F5804F 		cmp	r3, #16384
1372:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6210              		.loc 1 1372 4 is_stmt 1 view .LVU1745
1372:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6211              		.loc 1 1372 6 is_stmt 0 view .LVU1746
 6212 0090 08BF     		it	eq
 6213 0092 4000     		lsleq	r0, r0, #1
 6214              	.LVL456:
1373:src/xeq.c     **** 	}
 6215              		.loc 1 1373 3 is_stmt 1 view .LVU1747
1373:src/xeq.c     **** 	}
 6216              		.loc 1 1373 67 is_stmt 0 view .LVU1748
 6217 0094 0234     		adds	r4, r4, #2
1373:src/xeq.c     **** 	}
 6218              		.loc 1 1373 48 view .LVU1749
 6219 0096 24F00104 		bic	r4, r4, #1
1373:src/xeq.c     **** 	}
 6220              		.loc 1 1373 83 view .LVU1750
 6221 009a C000     		lsls	r0, r0, #3
 6222              	.LVL457:
1373:src/xeq.c     **** 	}
 6223              		.loc 1 1373 10 view .LVU1751
 6224 009c 0223     		movs	r3, #2
 6225              	.LVL458:
1373:src/xeq.c     **** 	}
 6226              		.loc 1 1373 10 view .LVU1752
 6227 009e 14FB0300 		smlabb	r0, r4, r3, r0
 6228 00a2 2844     		add	r0, r0, r5
1376:src/xeq.c     **** 
 6229              		.loc 1 1376 1 view .LVU1753
 6230 00a4 70BC     		pop	{r4, r5, r6}
 6231              		.cfi_restore 6
 6232              		.cfi_restore 5
 6233              		.cfi_restore 4
 6234              		.cfi_def_cfa_offset 0
 6235 00a6 7047     		bx	lr
 6236              	.L507:
 6237              		.align	2
 6238              	.L506:
 6239 00a8 00000000 		.word	main_ram
 6240 00ac 00000000 		.word	backup_ram
 6241 00b0 00000000 		.word	RetStk
 6242              		.cfi_endproc
 6243              	.LFE91:
 6245              		.section	.text.get_stack,"ax",%progbits
ARM GAS  /tmp/ccQQPlfu.s 			page 239


 6246              		.align	1
 6247              		.p2align 2,,3
 6248              		.global	get_stack
 6249              		.syntax unified
 6250              		.thumb
 6251              		.thumb_func
 6252              		.fpu fpv4-sp-d16
 6254              	get_stack:
 6255              	.LVL459:
 6256              	.LFB43:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6257              		.loc 1 712 30 is_stmt 1 view -0
 6258              		.cfi_startproc
 6259              		@ args = 0, pretend = 0, frame = 0
 6260              		@ frame_needed = 0, uses_anonymous_args = 0
 6261              		@ link register save eliminated.
 713:src/xeq.c     **** }
 6262              		.loc 1 713 2 view .LVU1755
 713:src/xeq.c     **** }
 6263              		.loc 1 713 9 is_stmt 0 view .LVU1756
 6264 0000 6430     		adds	r0, r0, #100
 6265              	.LVL460:
 713:src/xeq.c     **** }
 6266              		.loc 1 713 9 view .LVU1757
 6267 0002 FFF7FEBF 		b	get_reg_n
 6268              	.LVL461:
 713:src/xeq.c     **** }
 6269              		.loc 1 713 9 view .LVU1758
 6270              		.cfi_endproc
 6271              	.LFE43:
 6273 0006 00BF     		.section	.text.lift,"ax",%progbits
 6274              		.align	1
 6275              		.p2align 2,,3
 6276              		.global	lift
 6277              		.syntax unified
 6278              		.thumb
 6279              		.thumb_func
 6280              		.fpu fpv4-sp-d16
 6282              	lift:
 6283              	.LFB47:
 730:src/xeq.c     **** 	const int n = stack_size();
 6284              		.loc 1 730 17 is_stmt 1 view -0
 6285              		.cfi_startproc
 6286              		@ args = 0, pretend = 0, frame = 0
 6287              		@ frame_needed = 0, uses_anonymous_args = 0
 731:src/xeq.c     **** 	int i;
 6288              		.loc 1 731 2 view .LVU1760
 6289              	.LBB1734:
 6290              	.LBI1734:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6291              		.loc 1 706 5 view .LVU1761
 6292              	.LBB1735:
 707:src/xeq.c     **** 		return 4;
 6293              		.loc 1 707 2 view .LVU1762
 6294              	.LBE1735:
 6295              	.LBE1734:
 730:src/xeq.c     **** 	const int n = stack_size();
ARM GAS  /tmp/ccQQPlfu.s 			page 240


 6296              		.loc 1 730 17 is_stmt 0 view .LVU1763
 6297 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6298              		.cfi_def_cfa_offset 24
 6299              		.cfi_offset 3, -24
 6300              		.cfi_offset 4, -20
 6301              		.cfi_offset 5, -16
 6302              		.cfi_offset 6, -12
 6303              		.cfi_offset 7, -8
 6304              		.cfi_offset 14, -4
 6305              	.LBB1740:
 6306              	.LBB1738:
 707:src/xeq.c     **** 		return 4;
 6307              		.loc 1 707 8 view .LVU1764
 6308 0002 184E     		ldr	r6, .L520
 6309 0004 3368     		ldr	r3, [r6]
 707:src/xeq.c     **** 		return 4;
 6310              		.loc 1 707 6 view .LVU1765
 6311 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 6312              		.loc 1 707 5 view .LVU1766
 6313 000a 1207     		lsls	r2, r2, #28
 6314 000c 28D5     		bpl	.L513
 6315              	.LBB1736:
 6316              	.LBI1736:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6317              		.loc 1 185 5 is_stmt 1 view .LVU1767
 6318              	.LBB1737:
 186:src/xeq.c     **** }
 6319              		.loc 1 186 2 view .LVU1768
 186:src/xeq.c     **** }
 6320              		.loc 1 186 9 is_stmt 0 view .LVU1769
 6321 000e B3F8E037 		ldrh	r3, [r3, #2016]
 6322              	.LBE1737:
 6323              	.LBE1736:
 707:src/xeq.c     **** 		return 4;
 6324              		.loc 1 707 27 view .LVU1770
 6325 0012 9B0B     		lsrs	r3, r3, #14
 6326 0014 032B     		cmp	r3, #3
 6327 0016 1BD0     		beq	.L519
 6328 0018 0724     		movs	r4, #7
 6329              	.L510:
 6330              	.LBE1738:
 6331              	.LBE1740:
 732:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 6332              		.loc 1 732 2 is_stmt 1 view .LVU1771
 733:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6333              		.loc 1 733 2 view .LVU1772
 733:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6334              		.loc 1 733 14 view .LVU1773
 6335 001a 6434     		adds	r4, r4, #100
 6336              	.LBB1741:
 6337              	.LBB1742:
 6338              	.LBB1743:
 6339              	.LBB1744:
1113:src/xeq.c     **** }
 6340              		.loc 1 1113 24 is_stmt 0 view .LVU1774
 6341 001c 44F20107 		movw	r7, #16385
ARM GAS  /tmp/ccQQPlfu.s 			page 241


 6342              	.L512:
 6343              	.LVL462:
1113:src/xeq.c     **** }
 6344              		.loc 1 1113 24 view .LVU1775
 6345              	.LBE1744:
 6346              	.LBE1743:
 6347              	.LBE1742:
 6348              	.LBE1741:
 734:src/xeq.c     **** }
 6349              		.loc 1 734 3 is_stmt 1 view .LVU1776
 6350              	.LBB1751:
 6351              	.LBI1751:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6352              		.loc 1 712 11 view .LVU1777
 6353              	.LBB1752:
 713:src/xeq.c     **** }
 6354              		.loc 1 713 2 view .LVU1778
 713:src/xeq.c     **** }
 6355              		.loc 1 713 9 is_stmt 0 view .LVU1779
 6356 0020 2046     		mov	r0, r4
 6357 0022 FFF7FEFF 		bl	get_reg_n
 6358              	.LVL463:
 6359              	.LBE1752:
 6360              	.LBE1751:
 6361              	.LBB1754:
 6362              	.LBB1755:
 6363 0026 013C     		subs	r4, r4, #1
 6364              	.LVL464:
 713:src/xeq.c     **** }
 6365              		.loc 1 713 9 view .LVU1780
 6366              	.LBE1755:
 6367              	.LBE1754:
 6368              	.LBB1759:
 6369              	.LBB1753:
 6370 0028 0546     		mov	r5, r0
 6371              	.LBE1753:
 6372              	.LBE1759:
 6373              	.LBB1760:
 6374              	.LBB1756:
 6375 002a 2046     		mov	r0, r4
 6376              	.LVL465:
 713:src/xeq.c     **** }
 6377              		.loc 1 713 9 view .LVU1781
 6378              	.LBE1756:
 6379              	.LBI1754:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6380              		.loc 1 712 11 is_stmt 1 view .LVU1782
 6381              	.LBB1757:
 713:src/xeq.c     **** }
 6382              		.loc 1 713 2 view .LVU1783
 713:src/xeq.c     **** }
 6383              		.loc 1 713 9 is_stmt 0 view .LVU1784
 6384 002c FFF7FEFF 		bl	get_reg_n
 6385              	.LVL466:
 713:src/xeq.c     **** }
 6386              		.loc 1 713 9 view .LVU1785
 6387              	.LBE1757:
ARM GAS  /tmp/ccQQPlfu.s 			page 242


 6388              	.LBE1760:
 6389              	.LBB1761:
 6390              	.LBB1749:
 6391              	.LBB1747:
 6392              	.LBB1745:
1113:src/xeq.c     **** }
 6393              		.loc 1 1113 24 view .LVU1786
 6394 0030 3368     		ldr	r3, [r6]
 6395 0032 B3F8E837 		ldrh	r3, [r3, #2024]
 6396              	.LBE1745:
 6397              	.LBE1747:
 721:src/xeq.c     **** }
 6398              		.loc 1 721 2 view .LVU1787
 6399 0036 3B40     		ands	r3, r3, r7
 6400 0038 B3F5804F 		cmp	r3, #16384
 6401              	.LBE1749:
 6402              	.LBE1761:
 6403              	.LBB1762:
 6404              	.LBB1758:
 713:src/xeq.c     **** }
 6405              		.loc 1 713 9 view .LVU1788
 6406 003c 0146     		mov	r1, r0
 6407              	.LVL467:
 713:src/xeq.c     **** }
 6408              		.loc 1 713 9 view .LVU1789
 6409              	.LBE1758:
 6410              	.LBE1762:
 6411              	.LBB1763:
 6412              	.LBI1741:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6413              		.loc 1 720 6 is_stmt 1 view .LVU1790
 6414              	.LBB1750:
 721:src/xeq.c     **** }
 6415              		.loc 1 721 2 view .LVU1791
 6416              	.LBB1748:
 6417              	.LBI1743:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6418              		.loc 1 1112 5 view .LVU1792
 6419              	.LBB1746:
1113:src/xeq.c     **** }
 6420              		.loc 1 1113 2 view .LVU1793
 6421              	.LBE1746:
 6422              	.LBE1748:
 721:src/xeq.c     **** }
 6423              		.loc 1 721 2 is_stmt 0 view .LVU1794
 6424 003e 0CBF     		ite	eq
 6425 0040 1022     		moveq	r2, #16
 6426 0042 0822     		movne	r2, #8
 6427 0044 2846     		mov	r0, r5
 6428              	.LVL468:
 721:src/xeq.c     **** }
 6429              		.loc 1 721 2 view .LVU1795
 6430 0046 FFF7FEFF 		bl	xcopy
 6431              	.LVL469:
 721:src/xeq.c     **** }
 6432              		.loc 1 721 2 view .LVU1796
 6433              	.LBE1750:
ARM GAS  /tmp/ccQQPlfu.s 			page 243


 6434              	.LBE1763:
 733:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6435              		.loc 1 733 19 is_stmt 1 view .LVU1797
 733:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6436              		.loc 1 733 14 view .LVU1798
 733:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6437              		.loc 1 733 2 is_stmt 0 view .LVU1799
 6438 004a 642C     		cmp	r4, #100
 6439 004c E8D1     		bne	.L512
 735:src/xeq.c     **** 
 6440              		.loc 1 735 1 view .LVU1800
 6441 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6442              	.LVL470:
 6443              	.L519:
 6444              	.LBB1764:
 6445              	.LBB1739:
 707:src/xeq.c     **** 		return 4;
 6446              		.loc 1 707 44 view .LVU1801
 6447 0050 054B     		ldr	r3, .L520+4
 707:src/xeq.c     **** 		return 4;
 6448              		.loc 1 707 41 view .LVU1802
 6449 0052 93F90130 		ldrsb	r3, [r3, #1]
 6450 0056 002B     		cmp	r3, #0
 6451 0058 B4BF     		ite	lt
 6452 005a 0724     		movlt	r4, #7
 6453 005c 0324     		movge	r4, #3
 6454 005e DCE7     		b	.L510
 6455              	.L513:
 6456 0060 0324     		movs	r4, #3
 6457 0062 DAE7     		b	.L510
 6458              	.L521:
 6459              		.align	2
 6460              	.L520:
 6461 0064 00000000 		.word	main_ram
 6462 0068 00000000 		.word	XromParams
 6463              	.LBE1739:
 6464              	.LBE1764:
 6465              		.cfi_endproc
 6466              	.LFE47:
 6468              		.section	.text.lift_if_enabled,"ax",%progbits
 6469              		.align	1
 6470              		.p2align 2,,3
 6471              		.global	lift_if_enabled
 6472              		.syntax unified
 6473              		.thumb
 6474              		.thumb_func
 6475              		.fpu fpv4-sp-d16
 6477              	lift_if_enabled:
 6478              	.LFB49:
 741:src/xeq.c     **** 	if (get_lift())
 6479              		.loc 1 741 28 is_stmt 1 view -0
 6480              		.cfi_startproc
 6481              		@ args = 0, pretend = 0, frame = 0
 6482              		@ frame_needed = 0, uses_anonymous_args = 0
 6483              		@ link register save eliminated.
 742:src/xeq.c     **** 		lift();
 6484              		.loc 1 742 2 view .LVU1804
ARM GAS  /tmp/ccQQPlfu.s 			page 244


 6485              	.LBB1765:
 6486              	.LBI1765:
 737:src/xeq.c     **** 	return State2.state_lift;
 6487              		.loc 1 737 12 view .LVU1805
 6488              	.LBB1766:
 738:src/xeq.c     **** }
 6489              		.loc 1 738 2 view .LVU1806
 738:src/xeq.c     **** }
 6490              		.loc 1 738 15 is_stmt 0 view .LVU1807
 6491 0000 034B     		ldr	r3, .L525
 6492 0002 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 6493              	.LBE1766:
 6494              	.LBE1765:
 742:src/xeq.c     **** 		lift();
 6495              		.loc 1 742 5 view .LVU1808
 6496 0004 5B06     		lsls	r3, r3, #25
 6497 0006 00D4     		bmi	.L524
 744:src/xeq.c     **** 
 6498              		.loc 1 744 1 view .LVU1809
 6499 0008 7047     		bx	lr
 6500              	.L524:
 743:src/xeq.c     **** }
 6501              		.loc 1 743 3 is_stmt 1 view .LVU1810
 6502 000a FFF7FEBF 		b	lift
 6503              	.LVL471:
 6504              	.L526:
 6505 000e 00BF     		.align	2
 6506              	.L525:
 6507 0010 00000000 		.word	StateWhileOn
 6508              		.cfi_endproc
 6509              	.LFE49:
 6511              		.section	.text.lift2_if_enabled,"ax",%progbits
 6512              		.align	1
 6513              		.p2align 2,,3
 6514              		.syntax unified
 6515              		.thumb
 6516              		.thumb_func
 6517              		.fpu fpv4-sp-d16
 6519              	lift2_if_enabled:
 6520              	.LFB50:
 746:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6521              		.loc 1 746 36 view -0
 6522              		.cfi_startproc
 6523              		@ args = 0, pretend = 0, frame = 0
 6524              		@ frame_needed = 0, uses_anonymous_args = 0
 748:src/xeq.c     **** 	if (C_LOCKED) {
 6525              		.loc 1 748 2 view .LVU1812
 6526              	.LBB1781:
 6527              	.LBI1781:
 741:src/xeq.c     **** 	if (get_lift())
 6528              		.loc 1 741 6 view .LVU1813
 6529              	.LBB1782:
 742:src/xeq.c     **** 		lift();
 6530              		.loc 1 742 2 view .LVU1814
 6531              	.LBB1783:
 6532              	.LBI1783:
 737:src/xeq.c     **** 	return State2.state_lift;
ARM GAS  /tmp/ccQQPlfu.s 			page 245


 6533              		.loc 1 737 12 view .LVU1815
 6534              	.LBB1784:
 738:src/xeq.c     **** }
 6535              		.loc 1 738 2 view .LVU1816
 6536              	.LBE1784:
 6537              	.LBE1783:
 6538              	.LBE1782:
 6539              	.LBE1781:
 746:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6540              		.loc 1 746 36 is_stmt 0 view .LVU1817
 6541 0000 10B5     		push	{r4, lr}
 6542              		.cfi_def_cfa_offset 8
 6543              		.cfi_offset 4, -8
 6544              		.cfi_offset 14, -4
 6545              	.LBB1789:
 6546              	.LBB1787:
 6547              	.LBB1786:
 6548              	.LBB1785:
 738:src/xeq.c     **** }
 6549              		.loc 1 738 15 view .LVU1818
 6550 0002 0F4C     		ldr	r4, .L538
 6551 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 6552              	.LBE1785:
 6553              	.LBE1786:
 742:src/xeq.c     **** 		lift();
 6554              		.loc 1 742 5 view .LVU1819
 6555 0006 5A06     		lsls	r2, r3, #25
 6556 0008 08D4     		bmi	.L537
 6557              	.LBE1787:
 6558              	.LBE1789:
 749:src/xeq.c     **** 		lift_if_enabled();
 6559              		.loc 1 749 2 is_stmt 1 view .LVU1820
 749:src/xeq.c     **** 		lift_if_enabled();
 6560              		.loc 1 749 6 is_stmt 0 view .LVU1821
 6561 000a 0E4B     		ldr	r3, .L538+4
 6562 000c 1B68     		ldr	r3, [r3]
 6563 000e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 749:src/xeq.c     **** 		lift_if_enabled();
 6564              		.loc 1 749 5 view .LVU1822
 6565 0012 03F04103 		and	r3, r3, #65
 6566 0016 412B     		cmp	r3, #65
 6567 0018 0DD1     		bne	.L530
 6568              	.L527:
 759:src/xeq.c     **** 
 6569              		.loc 1 759 1 view .LVU1823
 6570 001a 10BD     		pop	{r4, pc}
 6571              	.L537:
 6572              	.LBB1790:
 6573              	.LBB1788:
 743:src/xeq.c     **** }
 6574              		.loc 1 743 3 is_stmt 1 view .LVU1824
 6575 001c FFF7FEFF 		bl	lift
 6576              	.LVL472:
 6577              	.LBE1788:
 6578              	.LBE1790:
 749:src/xeq.c     **** 		lift_if_enabled();
 6579              		.loc 1 749 2 view .LVU1825
ARM GAS  /tmp/ccQQPlfu.s 			page 246


 749:src/xeq.c     **** 		lift_if_enabled();
 6580              		.loc 1 749 6 is_stmt 0 view .LVU1826
 6581 0020 084B     		ldr	r3, .L538+4
 6582 0022 1B68     		ldr	r3, [r3]
 6583 0024 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 749:src/xeq.c     **** 		lift_if_enabled();
 6584              		.loc 1 749 5 view .LVU1827
 6585 0028 03F04103 		and	r3, r3, #65
 6586 002c 412B     		cmp	r3, #65
 6587 002e 02D1     		bne	.L530
 6588              	.LBB1791:
 6589              	.LBI1791:
 746:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6590              		.loc 1 746 13 is_stmt 1 view .LVU1828
 6591              	.LBE1791:
 750:src/xeq.c     **** 	}
 6592              		.loc 1 750 3 view .LVU1829
 6593              	.LBB1798:
 6594              	.LBB1792:
 6595              	.LBI1792:
 741:src/xeq.c     **** 	if (get_lift())
 6596              		.loc 1 741 6 view .LVU1830
 6597              	.LBB1793:
 742:src/xeq.c     **** 		lift();
 6598              		.loc 1 742 2 view .LVU1831
 6599              	.LBB1794:
 6600              	.LBI1794:
 737:src/xeq.c     **** 	return State2.state_lift;
 6601              		.loc 1 737 12 view .LVU1832
 6602              	.LBB1795:
 738:src/xeq.c     **** }
 6603              		.loc 1 738 2 view .LVU1833
 738:src/xeq.c     **** }
 6604              		.loc 1 738 15 is_stmt 0 view .LVU1834
 6605 0030 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 6606              	.LBE1795:
 6607              	.LBE1794:
 742:src/xeq.c     **** 		lift();
 6608              		.loc 1 742 5 view .LVU1835
 6609 0032 5B06     		lsls	r3, r3, #25
 6610 0034 F1D5     		bpl	.L527
 6611              	.L530:
 743:src/xeq.c     **** }
 6612              		.loc 1 743 3 is_stmt 1 view .LVU1836
 6613              	.LBE1793:
 6614              	.LBE1792:
 6615              	.LBE1798:
 759:src/xeq.c     **** 
 6616              		.loc 1 759 1 is_stmt 0 view .LVU1837
 6617 0036 BDE81040 		pop	{r4, lr}
 6618              		.cfi_restore 14
 6619              		.cfi_restore 4
 6620              		.cfi_def_cfa_offset 0
 6621              	.LBB1799:
 6622              	.LBB1797:
 6623              	.LBB1796:
 743:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 247


 6624              		.loc 1 743 3 view .LVU1838
 6625 003a FFF7FEBF 		b	lift
 6626              	.LVL473:
 6627              	.L539:
 6628 003e 00BF     		.align	2
 6629              	.L538:
 6630 0040 00000000 		.word	StateWhileOn
 6631 0044 00000000 		.word	main_ram
 6632              	.LBE1796:
 6633              	.LBE1797:
 6634              	.LBE1799:
 6635              		.cfi_endproc
 6636              	.LFE50:
 6638              		.section	.text.lower,"ax",%progbits
 6639              		.align	1
 6640              		.p2align 2,,3
 6641              		.syntax unified
 6642              		.thumb
 6643              		.thumb_func
 6644              		.fpu fpv4-sp-d16
 6646              	lower:
 6647              	.LFB53:
 769:src/xeq.c     **** 	const int n = stack_size();
 6648              		.loc 1 769 25 is_stmt 1 view -0
 6649              		.cfi_startproc
 6650              		@ args = 0, pretend = 0, frame = 0
 6651              		@ frame_needed = 0, uses_anonymous_args = 0
 770:src/xeq.c     **** 	int i;
 6652              		.loc 1 770 2 view .LVU1840
 6653              	.LBB1800:
 6654              	.LBI1800:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6655              		.loc 1 706 5 view .LVU1841
 6656              	.LBB1801:
 707:src/xeq.c     **** 		return 4;
 6657              		.loc 1 707 2 view .LVU1842
 6658              	.LBE1801:
 6659              	.LBE1800:
 769:src/xeq.c     **** 	const int n = stack_size();
 6660              		.loc 1 769 25 is_stmt 0 view .LVU1843
 6661 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6662              		.cfi_def_cfa_offset 24
 6663              		.cfi_offset 4, -24
 6664              		.cfi_offset 5, -20
 6665              		.cfi_offset 6, -16
 6666              		.cfi_offset 7, -12
 6667              		.cfi_offset 8, -8
 6668              		.cfi_offset 14, -4
 6669              	.LBB1807:
 6670              	.LBB1804:
 707:src/xeq.c     **** 		return 4;
 6671              		.loc 1 707 8 view .LVU1844
 6672 0004 194F     		ldr	r7, .L551
 6673 0006 3B68     		ldr	r3, [r7]
 707:src/xeq.c     **** 		return 4;
 6674              		.loc 1 707 6 view .LVU1845
 6675 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
ARM GAS  /tmp/ccQQPlfu.s 			page 248


 707:src/xeq.c     **** 		return 4;
 6676              		.loc 1 707 5 view .LVU1846
 6677 000c 1207     		lsls	r2, r2, #28
 6678 000e 2BD5     		bpl	.L544
 6679              	.LBB1802:
 6680              	.LBI1802:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6681              		.loc 1 185 5 is_stmt 1 view .LVU1847
 6682              	.LBB1803:
 186:src/xeq.c     **** }
 6683              		.loc 1 186 2 view .LVU1848
 186:src/xeq.c     **** }
 6684              		.loc 1 186 9 is_stmt 0 view .LVU1849
 6685 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 6686              	.LBE1803:
 6687              	.LBE1802:
 707:src/xeq.c     **** 		return 4;
 6688              		.loc 1 707 27 view .LVU1850
 6689 0014 9B0B     		lsrs	r3, r3, #14
 6690 0016 032B     		cmp	r3, #3
 6691 0018 1ED0     		beq	.L550
 709:src/xeq.c     **** }
 6692              		.loc 1 709 9 view .LVU1851
 6693 001a 0826     		movs	r6, #8
 6694              	.L541:
 6695              	.LVL474:
 709:src/xeq.c     **** }
 6696              		.loc 1 709 9 view .LVU1852
 6697              	.LBE1804:
 6698              	.LBE1807:
 771:src/xeq.c     **** 
 6699              		.loc 1 771 2 is_stmt 1 view .LVU1853
 773:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6700              		.loc 1 773 2 view .LVU1854
 773:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6701              		.loc 1 773 12 view .LVU1855
 6702 001c 6336     		adds	r6, r6, #99
 6703              	.LVL475:
 6704              	.LBB1808:
 6705              	.LBB1805:
 708:src/xeq.c     **** 	return 8;
 6706              		.loc 1 708 10 is_stmt 0 view .LVU1856
 6707 001e 6424     		movs	r4, #100
 6708              	.LBE1805:
 6709              	.LBE1808:
 6710              	.LBB1809:
 6711              	.LBB1810:
 6712              	.LBB1811:
 6713              	.LBB1812:
1113:src/xeq.c     **** }
 6714              		.loc 1 1113 24 view .LVU1857
 6715 0020 44F20108 		movw	r8, #16385
 6716              	.LVL476:
 6717              	.L543:
1113:src/xeq.c     **** }
 6718              		.loc 1 1113 24 view .LVU1858
 6719              	.LBE1812:
ARM GAS  /tmp/ccQQPlfu.s 			page 249


 6720              	.LBE1811:
 6721              	.LBE1810:
 6722              	.LBE1809:
 774:src/xeq.c     **** }
 6723              		.loc 1 774 3 is_stmt 1 discriminator 3 view .LVU1859
 6724              	.LBB1819:
 6725              	.LBI1819:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6726              		.loc 1 712 11 discriminator 3 view .LVU1860
 6727              	.LBB1820:
 713:src/xeq.c     **** }
 6728              		.loc 1 713 2 discriminator 3 view .LVU1861
 713:src/xeq.c     **** }
 6729              		.loc 1 713 9 is_stmt 0 discriminator 3 view .LVU1862
 6730 0024 2046     		mov	r0, r4
 6731 0026 FFF7FEFF 		bl	get_reg_n
 6732              	.LVL477:
 6733 002a 0134     		adds	r4, r4, #1
 6734              	.LVL478:
 713:src/xeq.c     **** }
 6735              		.loc 1 713 9 discriminator 3 view .LVU1863
 6736 002c 0546     		mov	r5, r0
 6737              	.LBE1820:
 6738              	.LBE1819:
 6739              	.LBB1821:
 6740              	.LBB1822:
 6741 002e 2046     		mov	r0, r4
 6742              	.LVL479:
 713:src/xeq.c     **** }
 6743              		.loc 1 713 9 discriminator 3 view .LVU1864
 6744              	.LBE1822:
 6745              	.LBI1821:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6746              		.loc 1 712 11 is_stmt 1 discriminator 3 view .LVU1865
 6747              	.LBB1823:
 713:src/xeq.c     **** }
 6748              		.loc 1 713 2 discriminator 3 view .LVU1866
 713:src/xeq.c     **** }
 6749              		.loc 1 713 9 is_stmt 0 discriminator 3 view .LVU1867
 6750 0030 FFF7FEFF 		bl	get_reg_n
 6751              	.LVL480:
 713:src/xeq.c     **** }
 6752              		.loc 1 713 9 discriminator 3 view .LVU1868
 6753              	.LBE1823:
 6754              	.LBE1821:
 6755              	.LBB1825:
 6756              	.LBB1817:
 6757              	.LBB1815:
 6758              	.LBB1813:
1113:src/xeq.c     **** }
 6759              		.loc 1 1113 24 discriminator 3 view .LVU1869
 6760 0034 3B68     		ldr	r3, [r7]
 6761 0036 B3F8E837 		ldrh	r3, [r3, #2024]
 6762              	.LBE1813:
 6763              	.LBE1815:
 721:src/xeq.c     **** }
 6764              		.loc 1 721 2 discriminator 3 view .LVU1870
ARM GAS  /tmp/ccQQPlfu.s 			page 250


 6765 003a 08EA0303 		and	r3, r8, r3
 6766 003e B3F5804F 		cmp	r3, #16384
 6767              	.LBE1817:
 6768              	.LBE1825:
 6769              	.LBB1826:
 6770              	.LBB1824:
 713:src/xeq.c     **** }
 6771              		.loc 1 713 9 discriminator 3 view .LVU1871
 6772 0042 0146     		mov	r1, r0
 6773              	.LVL481:
 713:src/xeq.c     **** }
 6774              		.loc 1 713 9 discriminator 3 view .LVU1872
 6775              	.LBE1824:
 6776              	.LBE1826:
 6777              	.LBB1827:
 6778              	.LBI1809:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6779              		.loc 1 720 6 is_stmt 1 discriminator 3 view .LVU1873
 6780              	.LBB1818:
 721:src/xeq.c     **** }
 6781              		.loc 1 721 2 discriminator 3 view .LVU1874
 6782              	.LBB1816:
 6783              	.LBI1811:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6784              		.loc 1 1112 5 discriminator 3 view .LVU1875
 6785              	.LBB1814:
1113:src/xeq.c     **** }
 6786              		.loc 1 1113 2 discriminator 3 view .LVU1876
 6787              	.LBE1814:
 6788              	.LBE1816:
 721:src/xeq.c     **** }
 6789              		.loc 1 721 2 is_stmt 0 discriminator 3 view .LVU1877
 6790 0044 0CBF     		ite	eq
 6791 0046 1022     		moveq	r2, #16
 6792 0048 0822     		movne	r2, #8
 6793 004a 2846     		mov	r0, r5
 6794              	.LVL482:
 721:src/xeq.c     **** }
 6795              		.loc 1 721 2 discriminator 3 view .LVU1878
 6796 004c FFF7FEFF 		bl	xcopy
 6797              	.LVL483:
 721:src/xeq.c     **** }
 6798              		.loc 1 721 2 discriminator 3 view .LVU1879
 6799              	.LBE1818:
 6800              	.LBE1827:
 773:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6801              		.loc 1 773 17 is_stmt 1 discriminator 3 view .LVU1880
 773:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6802              		.loc 1 773 12 discriminator 3 view .LVU1881
 773:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6803              		.loc 1 773 2 is_stmt 0 discriminator 3 view .LVU1882
 6804 0050 B442     		cmp	r4, r6
 6805 0052 E7D1     		bne	.L543
 775:src/xeq.c     **** 
 6806              		.loc 1 775 1 view .LVU1883
 6807 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6808              	.LVL484:
ARM GAS  /tmp/ccQQPlfu.s 			page 251


 6809              	.L550:
 6810              	.LBB1828:
 6811              	.LBB1806:
 707:src/xeq.c     **** 		return 4;
 6812              		.loc 1 707 44 view .LVU1884
 6813 0058 054B     		ldr	r3, .L551+4
 707:src/xeq.c     **** 		return 4;
 6814              		.loc 1 707 41 view .LVU1885
 6815 005a 93F90130 		ldrsb	r3, [r3, #1]
 708:src/xeq.c     **** 	return 8;
 6816              		.loc 1 708 10 view .LVU1886
 6817 005e 002B     		cmp	r3, #0
 6818 0060 B4BF     		ite	lt
 6819 0062 0826     		movlt	r6, #8
 6820 0064 0426     		movge	r6, #4
 6821 0066 D9E7     		b	.L541
 6822              	.L544:
 6823 0068 0426     		movs	r6, #4
 6824 006a D7E7     		b	.L541
 6825              	.L552:
 6826              		.align	2
 6827              	.L551:
 6828 006c 00000000 		.word	main_ram
 6829 0070 00000000 		.word	XromParams
 6830              	.LBE1806:
 6831              	.LBE1828:
 6832              		.cfi_endproc
 6833              	.LFE53:
 6835              		.section	.text.get_stack_top,"ax",%progbits
 6836              		.align	1
 6837              		.p2align 2,,3
 6838              		.syntax unified
 6839              		.thumb
 6840              		.thumb_func
 6841              		.fpu fpv4-sp-d16
 6843              	get_stack_top:
 6844              	.LFB44:
 716:src/xeq.c     **** 	return get_stack(stack_size()-1);
 6845              		.loc 1 716 38 is_stmt 1 view -0
 6846              		.cfi_startproc
 6847              		@ args = 0, pretend = 0, frame = 0
 6848              		@ frame_needed = 0, uses_anonymous_args = 0
 6849              		@ link register save eliminated.
 717:src/xeq.c     **** }
 6850              		.loc 1 717 2 view .LVU1888
 6851              	.LBB1829:
 6852              	.LBI1829:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6853              		.loc 1 706 5 view .LVU1889
 6854              	.LBB1830:
 707:src/xeq.c     **** 		return 4;
 6855              		.loc 1 707 2 view .LVU1890
 707:src/xeq.c     **** 		return 4;
 6856              		.loc 1 707 8 is_stmt 0 view .LVU1891
 6857 0000 0C4B     		ldr	r3, .L559
 6858 0002 1B68     		ldr	r3, [r3]
 707:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/ccQQPlfu.s 			page 252


 6859              		.loc 1 707 6 view .LVU1892
 6860 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 6861              		.loc 1 707 5 view .LVU1893
 6862 0008 1207     		lsls	r2, r2, #28
 6863 000a 10D5     		bpl	.L555
 6864              	.LBB1831:
 6865              	.LBI1831:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6866              		.loc 1 185 5 is_stmt 1 view .LVU1894
 6867              	.LBB1832:
 186:src/xeq.c     **** }
 6868              		.loc 1 186 2 view .LVU1895
 186:src/xeq.c     **** }
 6869              		.loc 1 186 9 is_stmt 0 view .LVU1896
 6870 000c B3F8E037 		ldrh	r3, [r3, #2016]
 6871              	.LBE1832:
 6872              	.LBE1831:
 707:src/xeq.c     **** 		return 4;
 6873              		.loc 1 707 27 view .LVU1897
 6874 0010 9B0B     		lsrs	r3, r3, #14
 6875 0012 032B     		cmp	r3, #3
 6876 0014 02D0     		beq	.L558
 6877 0016 6B20     		movs	r0, #107
 6878              	.LBE1830:
 6879              	.LBE1829:
 6880              	.LBB1835:
 6881              	.LBI1835:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6882              		.loc 1 712 11 is_stmt 1 view .LVU1898
 6883              	.LBB1836:
 713:src/xeq.c     **** }
 6884              		.loc 1 713 2 view .LVU1899
 713:src/xeq.c     **** }
 6885              		.loc 1 713 9 is_stmt 0 view .LVU1900
 6886 0018 FFF7FEBF 		b	get_reg_n
 6887              	.LVL485:
 6888              	.L558:
 6889              	.LBE1836:
 6890              	.LBE1835:
 6891              	.LBB1839:
 6892              	.LBB1833:
 707:src/xeq.c     **** 		return 4;
 6893              		.loc 1 707 44 view .LVU1901
 6894 001c 064B     		ldr	r3, .L559+4
 707:src/xeq.c     **** 		return 4;
 6895              		.loc 1 707 41 view .LVU1902
 6896 001e 93F90130 		ldrsb	r3, [r3, #1]
 6897 0022 002B     		cmp	r3, #0
 6898 0024 B4BF     		ite	lt
 6899 0026 6B20     		movlt	r0, #107
 6900 0028 6720     		movge	r0, #103
 6901              	.LBE1833:
 6902              	.LBE1839:
 6903              	.LBB1840:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6904              		.loc 1 712 11 is_stmt 1 view .LVU1903
ARM GAS  /tmp/ccQQPlfu.s 			page 253


 6905              	.LBB1837:
 713:src/xeq.c     **** }
 6906              		.loc 1 713 2 view .LVU1904
 713:src/xeq.c     **** }
 6907              		.loc 1 713 9 is_stmt 0 view .LVU1905
 6908 002a FFF7FEBF 		b	get_reg_n
 6909              	.LVL486:
 6910              	.L555:
 6911              	.LBE1837:
 6912              	.LBE1840:
 6913              	.LBB1841:
 6914              	.LBB1834:
 6915 002e 6720     		movs	r0, #103
 6916              	.LBE1834:
 6917              	.LBE1841:
 6918              	.LBB1842:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6919              		.loc 1 712 11 is_stmt 1 view .LVU1906
 6920              	.LBB1838:
 713:src/xeq.c     **** }
 6921              		.loc 1 713 2 view .LVU1907
 713:src/xeq.c     **** }
 6922              		.loc 1 713 9 is_stmt 0 view .LVU1908
 6923 0030 FFF7FEBF 		b	get_reg_n
 6924              	.LVL487:
 6925              	.L560:
 6926              		.align	2
 6927              	.L559:
 6928 0034 00000000 		.word	main_ram
 6929 0038 00000000 		.word	XromParams
 6930              	.LBE1838:
 6931              	.LBE1842:
 6932              		.cfi_endproc
 6933              	.LFE44:
 6935              		.section	.text.roll_down,"ax",%progbits
 6936              		.align	1
 6937              		.p2align 2,,3
 6938              		.global	roll_down
 6939              		.syntax unified
 6940              		.thumb
 6941              		.thumb_func
 6942              		.fpu fpv4-sp-d16
 6944              	roll_down:
 6945              	.LVL488:
 6946              	.LFB70:
 883:src/xeq.c     **** 	REGISTER r;
 6947              		.loc 1 883 31 is_stmt 1 view -0
 6948              		.cfi_startproc
 6949              		@ args = 0, pretend = 0, frame = 16
 6950              		@ frame_needed = 0, uses_anonymous_args = 0
 884:src/xeq.c     **** 	copyreg(&r, StackBase);
 6951              		.loc 1 884 2 view .LVU1910
 885:src/xeq.c     **** 	lower();
 6952              		.loc 1 885 2 view .LVU1911
 883:src/xeq.c     **** 	REGISTER r;
 6953              		.loc 1 883 31 is_stmt 0 view .LVU1912
 6954 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/ccQQPlfu.s 			page 254


 6955              		.cfi_def_cfa_offset 12
 6956              		.cfi_offset 4, -12
 6957              		.cfi_offset 5, -8
 6958              		.cfi_offset 14, -4
 6959              	.LBB1843:
 6960              	.LBB1844:
 6961              	.LBB1845:
 6962              	.LBB1846:
1113:src/xeq.c     **** }
 6963              		.loc 1 1113 24 view .LVU1913
 6964 0002 124D     		ldr	r5, .L567
 6965              	.LBE1846:
 6966              	.LBE1845:
 6967              	.LBE1844:
 6968              	.LBE1843:
 885:src/xeq.c     **** 	lower();
 6969              		.loc 1 885 2 view .LVU1914
 6970 0004 124A     		ldr	r2, .L567+4
 6971              	.LBB1855:
 6972              	.LBB1853:
 6973              	.LBB1850:
 6974              	.LBB1847:
1113:src/xeq.c     **** }
 6975              		.loc 1 1113 24 view .LVU1915
 6976 0006 2B68     		ldr	r3, [r5]
 6977              	.LBE1847:
 6978              	.LBE1850:
 721:src/xeq.c     **** }
 6979              		.loc 1 721 2 view .LVU1916
 6980 0008 1168     		ldr	r1, [r2]
 6981              	.LBB1851:
 6982              	.LBB1848:
1113:src/xeq.c     **** }
 6983              		.loc 1 1113 24 view .LVU1917
 6984 000a B3F8E837 		ldrh	r3, [r3, #2024]
 6985 000e 44F20104 		movw	r4, #16385
 6986              	.LBE1848:
 6987              	.LBE1851:
 721:src/xeq.c     **** }
 6988              		.loc 1 721 2 view .LVU1918
 6989 0012 2340     		ands	r3, r3, r4
 6990              	.LBE1853:
 6991              	.LBE1855:
 883:src/xeq.c     **** 	REGISTER r;
 6992              		.loc 1 883 31 view .LVU1919
 6993 0014 85B0     		sub	sp, sp, #20
 6994              		.cfi_def_cfa_offset 32
 6995              	.LVL489:
 6996              	.LBB1856:
 6997              	.LBI1843:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6998              		.loc 1 720 6 is_stmt 1 view .LVU1920
 6999              	.LBB1854:
 721:src/xeq.c     **** }
 7000              		.loc 1 721 2 view .LVU1921
 7001              	.LBB1852:
 7002              	.LBI1845:
ARM GAS  /tmp/ccQQPlfu.s 			page 255


1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7003              		.loc 1 1112 5 view .LVU1922
 7004              	.LBB1849:
1113:src/xeq.c     **** }
 7005              		.loc 1 1113 2 view .LVU1923
 7006              	.LBE1849:
 7007              	.LBE1852:
 721:src/xeq.c     **** }
 7008              		.loc 1 721 2 is_stmt 0 view .LVU1924
 7009 0016 B3F5804F 		cmp	r3, #16384
 7010 001a 0CBF     		ite	eq
 7011 001c 1022     		moveq	r2, #16
 7012 001e 0822     		movne	r2, #8
 7013 0020 6846     		mov	r0, sp
 7014              	.LVL490:
 721:src/xeq.c     **** }
 7015              		.loc 1 721 2 view .LVU1925
 7016 0022 FFF7FEFF 		bl	xcopy
 7017              	.LVL491:
 721:src/xeq.c     **** }
 7018              		.loc 1 721 2 view .LVU1926
 7019              	.LBE1854:
 7020              	.LBE1856:
 886:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 7021              		.loc 1 886 2 is_stmt 1 view .LVU1927
 7022 0026 FFF7FEFF 		bl	lower
 7023              	.LVL492:
 887:src/xeq.c     **** }
 7024              		.loc 1 887 2 view .LVU1928
 7025 002a FFF7FEFF 		bl	get_stack_top
 7026              	.LVL493:
 7027              	.LBB1857:
 7028              	.LBI1857:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7029              		.loc 1 720 6 view .LVU1929
 7030              	.LBB1858:
 721:src/xeq.c     **** }
 7031              		.loc 1 721 2 view .LVU1930
 7032              	.LBB1859:
 7033              	.LBI1859:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7034              		.loc 1 1112 5 view .LVU1931
 7035              	.LBB1860:
1113:src/xeq.c     **** }
 7036              		.loc 1 1113 2 view .LVU1932
1113:src/xeq.c     **** }
 7037              		.loc 1 1113 24 is_stmt 0 view .LVU1933
 7038 002e 2B68     		ldr	r3, [r5]
 7039 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7040              	.LBE1860:
 7041              	.LBE1859:
 721:src/xeq.c     **** }
 7042              		.loc 1 721 2 view .LVU1934
 7043 0034 1C40     		ands	r4, r4, r3
 7044 0036 B4F5804F 		cmp	r4, #16384
 7045 003a 6946     		mov	r1, sp
 7046 003c 0CBF     		ite	eq
ARM GAS  /tmp/ccQQPlfu.s 			page 256


 7047 003e 1022     		moveq	r2, #16
 7048 0040 0822     		movne	r2, #8
 7049 0042 FFF7FEFF 		bl	xcopy
 7050              	.LVL494:
 721:src/xeq.c     **** }
 7051              		.loc 1 721 2 view .LVU1935
 7052              	.LBE1858:
 7053              	.LBE1857:
 888:src/xeq.c     **** 
 7054              		.loc 1 888 1 view .LVU1936
 7055 0046 05B0     		add	sp, sp, #20
 7056              		.cfi_def_cfa_offset 12
 7057              		@ sp needed
 7058 0048 30BD     		pop	{r4, r5, pc}
 7059              	.L568:
 7060 004a 00BF     		.align	2
 7061              	.L567:
 7062 004c 00000000 		.word	main_ram
 7063 0050 00000000 		.word	StackBase
 7064              		.cfi_endproc
 7065              	.LFE70:
 7067              		.section	.text.cpx_roll_down,"ax",%progbits
 7068              		.align	1
 7069              		.p2align 2,,3
 7070              		.global	cpx_roll_down
 7071              		.syntax unified
 7072              		.thumb
 7073              		.thumb_func
 7074              		.fpu fpv4-sp-d16
 7076              	cpx_roll_down:
 7077              	.LVL495:
 7078              	.LFB72:
 897:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7079              		.loc 1 897 35 is_stmt 1 view -0
 7080              		.cfi_startproc
 7081              		@ args = 0, pretend = 0, frame = 0
 7082              		@ frame_needed = 0, uses_anonymous_args = 0
 898:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7083              		.loc 1 898 2 view .LVU1938
 897:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7084              		.loc 1 897 35 is_stmt 0 view .LVU1939
 7085 0000 08B5     		push	{r3, lr}
 7086              		.cfi_def_cfa_offset 8
 7087              		.cfi_offset 3, -8
 7088              		.cfi_offset 14, -4
 898:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7089              		.loc 1 898 2 view .LVU1940
 7090 0002 0720     		movs	r0, #7
 7091              	.LVL496:
 898:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7092              		.loc 1 898 2 view .LVU1941
 7093 0004 FFF7FEFF 		bl	roll_down
 7094              	.LVL497:
 899:src/xeq.c     **** 	set_was_complex();
 7095              		.loc 1 899 2 is_stmt 1 view .LVU1942
 7096 0008 0720     		movs	r0, #7
 7097 000a FFF7FEFF 		bl	roll_down
ARM GAS  /tmp/ccQQPlfu.s 			page 257


 7098              	.LVL498:
 900:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 7099              		.loc 1 900 2 view .LVU1943
 7100              	.LBB1861:
 7101              	.LBI1861:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 7102              		.loc 1 533 13 view .LVU1944
 7103              	.LBB1862:
 534:src/xeq.c     **** }
 7104              		.loc 1 534 2 view .LVU1945
 534:src/xeq.c     **** }
 7105              		.loc 1 534 20 is_stmt 0 view .LVU1946
 7106 000e 074B     		ldr	r3, .L571
 7107              	.LBE1862:
 7108              	.LBE1861:
 902:src/xeq.c     **** #endif
 7109              		.loc 1 902 2 view .LVU1947
 7110 0010 074A     		ldr	r2, .L571+4
 7111              	.LBB1865:
 7112              	.LBB1863:
 534:src/xeq.c     **** }
 7113              		.loc 1 534 20 view .LVU1948
 7114 0012 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 7115              	.LBE1863:
 7116              	.LBE1865:
 902:src/xeq.c     **** #endif
 7117              		.loc 1 902 2 view .LVU1949
 7118 0014 1268     		ldr	r2, [r2]
 7119              	.LBB1866:
 7120              	.LBB1864:
 534:src/xeq.c     **** }
 7121              		.loc 1 534 20 view .LVU1950
 7122 0016 0120     		movs	r0, #1
 7123 0018 60F38711 		bfi	r1, r0, #6, #2
 7124 001c 1975     		strb	r1, [r3, #20]
 7125              	.LBE1864:
 7126              	.LBE1866:
 902:src/xeq.c     **** #endif
 7127              		.loc 1 902 2 is_stmt 1 view .LVU1951
 7128 001e 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 7129 0022 0343     		orrs	r3, r3, r0
 7130 0024 82F8AD37 		strb	r3, [r2, #1965]
 904:src/xeq.c     **** 
 7131              		.loc 1 904 1 is_stmt 0 view .LVU1952
 7132 0028 08BD     		pop	{r3, pc}
 7133              	.L572:
 7134 002a 00BF     		.align	2
 7135              	.L571:
 7136 002c 00000000 		.word	StateWhileOn
 7137 0030 00000000 		.word	main_ram
 7138              		.cfi_endproc
 7139              	.LFE72:
 7141              		.section	.text.roll_up,"ax",%progbits
 7142              		.align	1
 7143              		.p2align 2,,3
 7144              		.global	roll_up
 7145              		.syntax unified
ARM GAS  /tmp/ccQQPlfu.s 			page 258


 7146              		.thumb
 7147              		.thumb_func
 7148              		.fpu fpv4-sp-d16
 7150              	roll_up:
 7151              	.LVL499:
 7152              	.LFB71:
 890:src/xeq.c     **** 	REGISTER r;
 7153              		.loc 1 890 29 is_stmt 1 view -0
 7154              		.cfi_startproc
 7155              		@ args = 0, pretend = 0, frame = 16
 7156              		@ frame_needed = 0, uses_anonymous_args = 0
 891:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 7157              		.loc 1 891 2 view .LVU1954
 892:src/xeq.c     **** 	lift();
 7158              		.loc 1 892 2 view .LVU1955
 890:src/xeq.c     **** 	REGISTER r;
 7159              		.loc 1 890 29 is_stmt 0 view .LVU1956
 7160 0000 30B5     		push	{r4, r5, lr}
 7161              		.cfi_def_cfa_offset 12
 7162              		.cfi_offset 4, -12
 7163              		.cfi_offset 5, -8
 7164              		.cfi_offset 14, -4
 7165              	.LBB1867:
 7166              	.LBB1868:
 7167              	.LBB1869:
 7168              	.LBB1870:
1113:src/xeq.c     **** }
 7169              		.loc 1 1113 24 view .LVU1957
 7170 0002 124D     		ldr	r5, .L579
 7171              	.LBE1870:
 7172              	.LBE1869:
 7173              	.LBE1868:
 7174              	.LBE1867:
 890:src/xeq.c     **** 	REGISTER r;
 7175              		.loc 1 890 29 view .LVU1958
 7176 0004 85B0     		sub	sp, sp, #20
 7177              		.cfi_def_cfa_offset 32
 892:src/xeq.c     **** 	lift();
 7178              		.loc 1 892 14 view .LVU1959
 7179 0006 FFF7FEFF 		bl	get_stack_top
 7180              	.LVL500:
 7181              	.LBB1877:
 7182              	.LBB1875:
 7183              	.LBB1873:
 7184              	.LBB1871:
1113:src/xeq.c     **** }
 7185              		.loc 1 1113 24 view .LVU1960
 7186 000a 2B68     		ldr	r3, [r5]
 7187 000c B3F8E837 		ldrh	r3, [r3, #2024]
 7188 0010 44F20104 		movw	r4, #16385
 7189              	.LBE1871:
 7190              	.LBE1873:
 721:src/xeq.c     **** }
 7191              		.loc 1 721 2 view .LVU1961
 7192 0014 2340     		ands	r3, r3, r4
 7193 0016 B3F5804F 		cmp	r3, #16384
 7194              	.LBE1875:
ARM GAS  /tmp/ccQQPlfu.s 			page 259


 7195              	.LBE1877:
 892:src/xeq.c     **** 	lift();
 7196              		.loc 1 892 14 view .LVU1962
 7197 001a 0146     		mov	r1, r0
 7198              	.LVL501:
 7199              	.LBB1878:
 7200              	.LBI1867:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7201              		.loc 1 720 6 is_stmt 1 view .LVU1963
 7202              	.LBB1876:
 721:src/xeq.c     **** }
 7203              		.loc 1 721 2 view .LVU1964
 7204              	.LBB1874:
 7205              	.LBI1869:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7206              		.loc 1 1112 5 view .LVU1965
 7207              	.LBB1872:
1113:src/xeq.c     **** }
 7208              		.loc 1 1113 2 view .LVU1966
 7209              	.LBE1872:
 7210              	.LBE1874:
 721:src/xeq.c     **** }
 7211              		.loc 1 721 2 is_stmt 0 view .LVU1967
 7212 001c 0CBF     		ite	eq
 7213 001e 1022     		moveq	r2, #16
 7214 0020 0822     		movne	r2, #8
 7215 0022 6846     		mov	r0, sp
 7216              	.LVL502:
 721:src/xeq.c     **** }
 7217              		.loc 1 721 2 view .LVU1968
 7218 0024 FFF7FEFF 		bl	xcopy
 7219              	.LVL503:
 721:src/xeq.c     **** }
 7220              		.loc 1 721 2 view .LVU1969
 7221              	.LBE1876:
 7222              	.LBE1878:
 893:src/xeq.c     **** 	copyreg(StackBase, &r);
 7223              		.loc 1 893 2 is_stmt 1 view .LVU1970
 7224 0028 FFF7FEFF 		bl	lift
 7225              	.LVL504:
 894:src/xeq.c     **** }
 7226              		.loc 1 894 2 view .LVU1971
 7227              	.LBB1879:
 7228              	.LBB1880:
 7229              	.LBB1881:
 7230              	.LBB1882:
1113:src/xeq.c     **** }
 7231              		.loc 1 1113 24 is_stmt 0 view .LVU1972
 7232 002c 2B68     		ldr	r3, [r5]
 7233              	.LBE1882:
 7234              	.LBE1881:
 7235              	.LBE1880:
 7236              	.LBE1879:
 894:src/xeq.c     **** }
 7237              		.loc 1 894 2 view .LVU1973
 7238 002e 084A     		ldr	r2, .L579+4
 7239              	.LVL505:
ARM GAS  /tmp/ccQQPlfu.s 			page 260


 7240              	.LBB1886:
 7241              	.LBI1879:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7242              		.loc 1 720 6 is_stmt 1 view .LVU1974
 7243              	.LBB1885:
 721:src/xeq.c     **** }
 7244              		.loc 1 721 2 view .LVU1975
 7245              	.LBB1884:
 7246              	.LBI1881:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7247              		.loc 1 1112 5 view .LVU1976
 7248              	.LBB1883:
1113:src/xeq.c     **** }
 7249              		.loc 1 1113 2 view .LVU1977
1113:src/xeq.c     **** }
 7250              		.loc 1 1113 24 is_stmt 0 view .LVU1978
 7251 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7252              	.LBE1883:
 7253              	.LBE1884:
 721:src/xeq.c     **** }
 7254              		.loc 1 721 2 view .LVU1979
 7255 0034 1068     		ldr	r0, [r2]
 7256 0036 1C40     		ands	r4, r4, r3
 7257 0038 B4F5804F 		cmp	r4, #16384
 7258 003c 6946     		mov	r1, sp
 7259 003e 0CBF     		ite	eq
 7260 0040 1022     		moveq	r2, #16
 7261              	.LVL506:
 721:src/xeq.c     **** }
 7262              		.loc 1 721 2 view .LVU1980
 7263 0042 0822     		movne	r2, #8
 7264 0044 FFF7FEFF 		bl	xcopy
 7265              	.LVL507:
 721:src/xeq.c     **** }
 7266              		.loc 1 721 2 view .LVU1981
 7267              	.LBE1885:
 7268              	.LBE1886:
 895:src/xeq.c     **** 
 7269              		.loc 1 895 1 view .LVU1982
 7270 0048 05B0     		add	sp, sp, #20
 7271              		.cfi_def_cfa_offset 12
 7272              		@ sp needed
 7273 004a 30BD     		pop	{r4, r5, pc}
 7274              	.L580:
 7275              		.align	2
 7276              	.L579:
 7277 004c 00000000 		.word	main_ram
 7278 0050 00000000 		.word	StackBase
 7279              		.cfi_endproc
 7280              	.LFE71:
 7282              		.section	.text.cpx_roll_up,"ax",%progbits
 7283              		.align	1
 7284              		.p2align 2,,3
 7285              		.global	cpx_roll_up
 7286              		.syntax unified
 7287              		.thumb
 7288              		.thumb_func
ARM GAS  /tmp/ccQQPlfu.s 			page 261


 7289              		.fpu fpv4-sp-d16
 7291              	cpx_roll_up:
 7292              	.LVL508:
 7293              	.LFB73:
 906:src/xeq.c     **** 	roll_up(OP_RUP);
 7294              		.loc 1 906 33 is_stmt 1 view -0
 7295              		.cfi_startproc
 7296              		@ args = 0, pretend = 0, frame = 0
 7297              		@ frame_needed = 0, uses_anonymous_args = 0
 907:src/xeq.c     **** 	roll_up(OP_RUP);
 7298              		.loc 1 907 2 view .LVU1984
 906:src/xeq.c     **** 	roll_up(OP_RUP);
 7299              		.loc 1 906 33 is_stmt 0 view .LVU1985
 7300 0000 08B5     		push	{r3, lr}
 7301              		.cfi_def_cfa_offset 8
 7302              		.cfi_offset 3, -8
 7303              		.cfi_offset 14, -4
 907:src/xeq.c     **** 	roll_up(OP_RUP);
 7304              		.loc 1 907 2 view .LVU1986
 7305 0002 0820     		movs	r0, #8
 7306              	.LVL509:
 907:src/xeq.c     **** 	roll_up(OP_RUP);
 7307              		.loc 1 907 2 view .LVU1987
 7308 0004 FFF7FEFF 		bl	roll_up
 7309              	.LVL510:
 908:src/xeq.c     **** 	set_was_complex();
 7310              		.loc 1 908 2 is_stmt 1 view .LVU1988
 7311 0008 0820     		movs	r0, #8
 7312 000a FFF7FEFF 		bl	roll_up
 7313              	.LVL511:
 909:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 7314              		.loc 1 909 2 view .LVU1989
 7315              	.LBB1887:
 7316              	.LBI1887:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 7317              		.loc 1 533 13 view .LVU1990
 7318              	.LBB1888:
 534:src/xeq.c     **** }
 7319              		.loc 1 534 2 view .LVU1991
 534:src/xeq.c     **** }
 7320              		.loc 1 534 20 is_stmt 0 view .LVU1992
 7321 000e 074B     		ldr	r3, .L583
 7322              	.LBE1888:
 7323              	.LBE1887:
 911:src/xeq.c     **** #endif
 7324              		.loc 1 911 2 view .LVU1993
 7325 0010 074A     		ldr	r2, .L583+4
 7326              	.LBB1891:
 7327              	.LBB1889:
 534:src/xeq.c     **** }
 7328              		.loc 1 534 20 view .LVU1994
 7329 0012 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 7330              	.LBE1889:
 7331              	.LBE1891:
 911:src/xeq.c     **** #endif
 7332              		.loc 1 911 2 view .LVU1995
 7333 0014 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccQQPlfu.s 			page 262


 7334              	.LBB1892:
 7335              	.LBB1890:
 534:src/xeq.c     **** }
 7336              		.loc 1 534 20 view .LVU1996
 7337 0016 0120     		movs	r0, #1
 7338 0018 60F38711 		bfi	r1, r0, #6, #2
 7339 001c 1975     		strb	r1, [r3, #20]
 7340              	.LBE1890:
 7341              	.LBE1892:
 911:src/xeq.c     **** #endif
 7342              		.loc 1 911 2 is_stmt 1 view .LVU1997
 7343 001e 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 7344 0022 0343     		orrs	r3, r3, r0
 7345 0024 82F8AD37 		strb	r3, [r2, #1965]
 913:src/xeq.c     **** 
 7346              		.loc 1 913 1 is_stmt 0 view .LVU1998
 7347 0028 08BD     		pop	{r3, pc}
 7348              	.L584:
 7349 002a 00BF     		.align	2
 7350              	.L583:
 7351 002c 00000000 		.word	StateWhileOn
 7352 0030 00000000 		.word	main_ram
 7353              		.cfi_endproc
 7354              	.LFE73:
 7356              		.section	.text.fill,"ax",%progbits
 7357              		.align	1
 7358              		.p2align 2,,3
 7359              		.global	fill
 7360              		.syntax unified
 7361              		.thumb
 7362              		.thumb_func
 7363              		.fpu fpv4-sp-d16
 7365              	fill:
 7366              	.LVL512:
 7367              	.LFB80:
1090:src/xeq.c     **** 	const int n = stack_size();
 7368              		.loc 1 1090 26 is_stmt 1 view -0
 7369              		.cfi_startproc
 7370              		@ args = 0, pretend = 0, frame = 0
 7371              		@ frame_needed = 0, uses_anonymous_args = 0
1091:src/xeq.c     **** 	int i;
 7372              		.loc 1 1091 2 view .LVU2000
 7373              	.LBB1893:
 7374              	.LBI1893:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7375              		.loc 1 706 5 view .LVU2001
 7376              	.LBB1894:
 707:src/xeq.c     **** 		return 4;
 7377              		.loc 1 707 2 view .LVU2002
 7378              	.LBE1894:
 7379              	.LBE1893:
1090:src/xeq.c     **** 	const int n = stack_size();
 7380              		.loc 1 1090 26 is_stmt 0 view .LVU2003
 7381 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7382              		.cfi_def_cfa_offset 24
 7383              		.cfi_offset 4, -24
 7384              		.cfi_offset 5, -20
ARM GAS  /tmp/ccQQPlfu.s 			page 263


 7385              		.cfi_offset 6, -16
 7386              		.cfi_offset 7, -12
 7387              		.cfi_offset 8, -8
 7388              		.cfi_offset 14, -4
 7389              	.LBB1900:
 7390              	.LBB1897:
 707:src/xeq.c     **** 		return 4;
 7391              		.loc 1 707 8 view .LVU2004
 7392 0004 174E     		ldr	r6, .L596
 7393 0006 3368     		ldr	r3, [r6]
 707:src/xeq.c     **** 		return 4;
 7394              		.loc 1 707 6 view .LVU2005
 7395 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 7396              		.loc 1 707 5 view .LVU2006
 7397 000c 1207     		lsls	r2, r2, #28
 7398 000e 27D5     		bpl	.L589
 7399              	.LBB1895:
 7400              	.LBI1895:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 7401              		.loc 1 185 5 is_stmt 1 view .LVU2007
 7402              	.LBB1896:
 186:src/xeq.c     **** }
 7403              		.loc 1 186 2 view .LVU2008
 186:src/xeq.c     **** }
 7404              		.loc 1 186 9 is_stmt 0 view .LVU2009
 7405 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7406              	.LBE1896:
 7407              	.LBE1895:
 707:src/xeq.c     **** 		return 4;
 7408              		.loc 1 707 27 view .LVU2010
 7409 0014 9B0B     		lsrs	r3, r3, #14
 7410 0016 032B     		cmp	r3, #3
 7411 0018 1AD0     		beq	.L595
 709:src/xeq.c     **** }
 7412              		.loc 1 709 9 view .LVU2011
 7413 001a 0825     		movs	r5, #8
 7414              	.L586:
 7415              	.LVL513:
 709:src/xeq.c     **** }
 7416              		.loc 1 709 9 view .LVU2012
 7417              	.LBE1897:
 7418              	.LBE1900:
1092:src/xeq.c     **** 
 7419              		.loc 1 1092 2 is_stmt 1 view .LVU2013
1094:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7420              		.loc 1 1094 2 view .LVU2014
1094:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7421              		.loc 1 1094 12 view .LVU2015
 7422 001c 124F     		ldr	r7, .L596+4
 7423 001e 6435     		adds	r5, r5, #100
 7424              	.LVL514:
 7425              	.LBB1901:
 7426              	.LBB1898:
 708:src/xeq.c     **** 	return 8;
 7427              		.loc 1 708 10 is_stmt 0 view .LVU2016
 7428 0020 6524     		movs	r4, #101
ARM GAS  /tmp/ccQQPlfu.s 			page 264


 7429              	.LBE1898:
 7430              	.LBE1901:
 7431              	.LBB1902:
 7432              	.LBB1903:
 7433              	.LBB1904:
 7434              	.LBB1905:
1113:src/xeq.c     **** }
 7435              		.loc 1 1113 24 view .LVU2017
 7436 0022 44F20108 		movw	r8, #16385
 7437              	.LVL515:
 7438              	.L588:
1113:src/xeq.c     **** }
 7439              		.loc 1 1113 24 view .LVU2018
 7440              	.LBE1905:
 7441              	.LBE1904:
 7442              	.LBE1903:
 7443              	.LBE1902:
1095:src/xeq.c     **** }
 7444              		.loc 1 1095 3 is_stmt 1 view .LVU2019
 7445              	.LBB1911:
 7446              	.LBI1911:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7447              		.loc 1 712 11 view .LVU2020
 7448              	.LBB1912:
 713:src/xeq.c     **** }
 7449              		.loc 1 713 2 view .LVU2021
 713:src/xeq.c     **** }
 7450              		.loc 1 713 9 is_stmt 0 view .LVU2022
 7451 0026 2046     		mov	r0, r4
 7452 0028 FFF7FEFF 		bl	get_reg_n
 7453              	.LVL516:
 713:src/xeq.c     **** }
 7454              		.loc 1 713 9 view .LVU2023
 7455              	.LBE1912:
 7456              	.LBE1911:
 7457              	.LBB1913:
 7458              	.LBI1902:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7459              		.loc 1 720 6 is_stmt 1 view .LVU2024
 7460              	.LBB1910:
 721:src/xeq.c     **** }
 7461              		.loc 1 721 2 view .LVU2025
 7462              	.LBB1908:
 7463              	.LBI1904:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7464              		.loc 1 1112 5 view .LVU2026
 7465              	.LBB1906:
1113:src/xeq.c     **** }
 7466              		.loc 1 1113 2 view .LVU2027
1113:src/xeq.c     **** }
 7467              		.loc 1 1113 24 is_stmt 0 view .LVU2028
 7468 002c 3368     		ldr	r3, [r6]
 7469              	.LBE1906:
 7470              	.LBE1908:
 721:src/xeq.c     **** }
 7471              		.loc 1 721 2 view .LVU2029
 7472 002e 3968     		ldr	r1, [r7]
ARM GAS  /tmp/ccQQPlfu.s 			page 265


 7473              	.LBB1909:
 7474              	.LBB1907:
1113:src/xeq.c     **** }
 7475              		.loc 1 1113 24 view .LVU2030
 7476 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7477              	.LBE1907:
 7478              	.LBE1909:
 721:src/xeq.c     **** }
 7479              		.loc 1 721 2 view .LVU2031
 7480 0034 08EA0303 		and	r3, r8, r3
 7481 0038 B3F5804F 		cmp	r3, #16384
 7482 003c 0CBF     		ite	eq
 7483 003e 1022     		moveq	r2, #16
 7484 0040 0822     		movne	r2, #8
 7485 0042 0134     		adds	r4, r4, #1
 7486              	.LVL517:
 721:src/xeq.c     **** }
 7487              		.loc 1 721 2 view .LVU2032
 7488 0044 FFF7FEFF 		bl	xcopy
 7489              	.LVL518:
 721:src/xeq.c     **** }
 7490              		.loc 1 721 2 view .LVU2033
 7491              	.LBE1910:
 7492              	.LBE1913:
1094:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7493              		.loc 1 1094 17 is_stmt 1 view .LVU2034
1094:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7494              		.loc 1 1094 12 view .LVU2035
1094:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7495              		.loc 1 1094 2 is_stmt 0 view .LVU2036
 7496 0048 AC42     		cmp	r4, r5
 7497 004a ECD1     		bne	.L588
1096:src/xeq.c     **** 
 7498              		.loc 1 1096 1 view .LVU2037
 7499 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7500              	.LVL519:
 7501              	.L595:
 7502              	.LBB1914:
 7503              	.LBB1899:
 707:src/xeq.c     **** 		return 4;
 7504              		.loc 1 707 44 view .LVU2038
 7505 0050 064B     		ldr	r3, .L596+8
 707:src/xeq.c     **** 		return 4;
 7506              		.loc 1 707 41 view .LVU2039
 7507 0052 93F90130 		ldrsb	r3, [r3, #1]
 708:src/xeq.c     **** 	return 8;
 7508              		.loc 1 708 10 view .LVU2040
 7509 0056 002B     		cmp	r3, #0
 7510 0058 B4BF     		ite	lt
 7511 005a 0825     		movlt	r5, #8
 7512 005c 0425     		movge	r5, #4
 7513 005e DDE7     		b	.L586
 7514              	.L589:
 7515 0060 0425     		movs	r5, #4
 7516 0062 DBE7     		b	.L586
 7517              	.L597:
 7518              		.align	2
ARM GAS  /tmp/ccQQPlfu.s 			page 266


 7519              	.L596:
 7520 0064 00000000 		.word	main_ram
 7521 0068 00000000 		.word	StackBase
 7522 006c 00000000 		.word	XromParams
 7523              	.LBE1899:
 7524              	.LBE1914:
 7525              		.cfi_endproc
 7526              	.LFE80:
 7528              		.section	.text.lower2,"ax",%progbits
 7529              		.align	1
 7530              		.p2align 2,,3
 7531              		.syntax unified
 7532              		.thumb
 7533              		.thumb_func
 7534              		.fpu fpv4-sp-d16
 7536              	lower2:
 7537              	.LFB54:
 777:src/xeq.c     **** 	const int n = stack_size();
 7538              		.loc 1 777 26 is_stmt 1 view -0
 7539              		.cfi_startproc
 7540              		@ args = 0, pretend = 0, frame = 0
 7541              		@ frame_needed = 0, uses_anonymous_args = 0
 778:src/xeq.c     **** 	int i;
 7542              		.loc 1 778 2 view .LVU2042
 7543              	.LBB1915:
 7544              	.LBI1915:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7545              		.loc 1 706 5 view .LVU2043
 7546              	.LBB1916:
 707:src/xeq.c     **** 		return 4;
 7547              		.loc 1 707 2 view .LVU2044
 7548              	.LBE1916:
 7549              	.LBE1915:
 777:src/xeq.c     **** 	const int n = stack_size();
 7550              		.loc 1 777 26 is_stmt 0 view .LVU2045
 7551 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7552              		.cfi_def_cfa_offset 24
 7553              		.cfi_offset 4, -24
 7554              		.cfi_offset 5, -20
 7555              		.cfi_offset 6, -16
 7556              		.cfi_offset 7, -12
 7557              		.cfi_offset 8, -8
 7558              		.cfi_offset 14, -4
 7559              	.LBB1922:
 7560              	.LBB1919:
 707:src/xeq.c     **** 		return 4;
 7561              		.loc 1 707 8 view .LVU2046
 7562 0004 194F     		ldr	r7, .L609
 7563 0006 3B68     		ldr	r3, [r7]
 707:src/xeq.c     **** 		return 4;
 7564              		.loc 1 707 6 view .LVU2047
 7565 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 7566              		.loc 1 707 5 view .LVU2048
 7567 000c 1207     		lsls	r2, r2, #28
 7568 000e 2BD5     		bpl	.L602
 7569              	.LBB1917:
ARM GAS  /tmp/ccQQPlfu.s 			page 267


 7570              	.LBI1917:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 7571              		.loc 1 185 5 is_stmt 1 view .LVU2049
 7572              	.LBB1918:
 186:src/xeq.c     **** }
 7573              		.loc 1 186 2 view .LVU2050
 186:src/xeq.c     **** }
 7574              		.loc 1 186 9 is_stmt 0 view .LVU2051
 7575 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7576              	.LBE1918:
 7577              	.LBE1917:
 707:src/xeq.c     **** 		return 4;
 7578              		.loc 1 707 27 view .LVU2052
 7579 0014 9B0B     		lsrs	r3, r3, #14
 7580 0016 032B     		cmp	r3, #3
 7581 0018 1ED0     		beq	.L608
 709:src/xeq.c     **** }
 7582              		.loc 1 709 9 view .LVU2053
 7583 001a 0826     		movs	r6, #8
 7584              	.L599:
 7585              	.LVL520:
 709:src/xeq.c     **** }
 7586              		.loc 1 709 9 view .LVU2054
 7587              	.LBE1919:
 7588              	.LBE1922:
 779:src/xeq.c     **** 
 7589              		.loc 1 779 2 is_stmt 1 view .LVU2055
 781:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7590              		.loc 1 781 2 view .LVU2056
 781:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7591              		.loc 1 781 12 view .LVU2057
 7592 001c 6236     		adds	r6, r6, #98
 7593              	.LVL521:
 7594              	.LBB1923:
 7595              	.LBB1920:
 708:src/xeq.c     **** 	return 8;
 7596              		.loc 1 708 10 is_stmt 0 view .LVU2058
 7597 001e 6424     		movs	r4, #100
 7598              	.LBE1920:
 7599              	.LBE1923:
 7600              	.LBB1924:
 7601              	.LBB1925:
 7602              	.LBB1926:
 7603              	.LBB1927:
1113:src/xeq.c     **** }
 7604              		.loc 1 1113 24 view .LVU2059
 7605 0020 44F20108 		movw	r8, #16385
 7606              	.LVL522:
 7607              	.L601:
1113:src/xeq.c     **** }
 7608              		.loc 1 1113 24 view .LVU2060
 7609              	.LBE1927:
 7610              	.LBE1926:
 7611              	.LBE1925:
 7612              	.LBE1924:
 782:src/xeq.c     **** }
 7613              		.loc 1 782 3 is_stmt 1 discriminator 3 view .LVU2061
ARM GAS  /tmp/ccQQPlfu.s 			page 268


 7614              	.LBB1934:
 7615              	.LBI1934:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7616              		.loc 1 712 11 discriminator 3 view .LVU2062
 7617              	.LBB1935:
 713:src/xeq.c     **** }
 7618              		.loc 1 713 2 discriminator 3 view .LVU2063
 713:src/xeq.c     **** }
 7619              		.loc 1 713 9 is_stmt 0 discriminator 3 view .LVU2064
 7620 0024 2046     		mov	r0, r4
 7621 0026 FFF7FEFF 		bl	get_reg_n
 7622              	.LVL523:
 7623 002a 0546     		mov	r5, r0
 7624              	.LBE1935:
 7625              	.LBE1934:
 7626              	.LBB1936:
 7627              	.LBB1937:
 7628 002c A01C     		adds	r0, r4, #2
 7629              	.LVL524:
 713:src/xeq.c     **** }
 7630              		.loc 1 713 9 discriminator 3 view .LVU2065
 7631              	.LBE1937:
 7632              	.LBI1936:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7633              		.loc 1 712 11 is_stmt 1 discriminator 3 view .LVU2066
 7634              	.LBB1938:
 713:src/xeq.c     **** }
 7635              		.loc 1 713 2 discriminator 3 view .LVU2067
 713:src/xeq.c     **** }
 7636              		.loc 1 713 9 is_stmt 0 discriminator 3 view .LVU2068
 7637 002e FFF7FEFF 		bl	get_reg_n
 7638              	.LVL525:
 713:src/xeq.c     **** }
 7639              		.loc 1 713 9 discriminator 3 view .LVU2069
 7640              	.LBE1938:
 7641              	.LBE1936:
 7642              	.LBB1940:
 7643              	.LBB1932:
 7644              	.LBB1930:
 7645              	.LBB1928:
1113:src/xeq.c     **** }
 7646              		.loc 1 1113 24 discriminator 3 view .LVU2070
 7647 0032 3B68     		ldr	r3, [r7]
 7648 0034 B3F8E837 		ldrh	r3, [r3, #2024]
 7649              	.LBE1928:
 7650              	.LBE1930:
 721:src/xeq.c     **** }
 7651              		.loc 1 721 2 discriminator 3 view .LVU2071
 7652 0038 08EA0303 		and	r3, r8, r3
 7653 003c B3F5804F 		cmp	r3, #16384
 7654              	.LBE1932:
 7655              	.LBE1940:
 7656              	.LBB1941:
 7657              	.LBB1939:
 713:src/xeq.c     **** }
 7658              		.loc 1 713 9 discriminator 3 view .LVU2072
 7659 0040 0146     		mov	r1, r0
ARM GAS  /tmp/ccQQPlfu.s 			page 269


 7660              	.LVL526:
 713:src/xeq.c     **** }
 7661              		.loc 1 713 9 discriminator 3 view .LVU2073
 7662              	.LBE1939:
 7663              	.LBE1941:
 7664              	.LBB1942:
 7665              	.LBI1924:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7666              		.loc 1 720 6 is_stmt 1 discriminator 3 view .LVU2074
 7667              	.LBB1933:
 721:src/xeq.c     **** }
 7668              		.loc 1 721 2 discriminator 3 view .LVU2075
 7669              	.LBB1931:
 7670              	.LBI1926:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7671              		.loc 1 1112 5 discriminator 3 view .LVU2076
 7672              	.LBB1929:
1113:src/xeq.c     **** }
 7673              		.loc 1 1113 2 discriminator 3 view .LVU2077
 7674              	.LBE1929:
 7675              	.LBE1931:
 721:src/xeq.c     **** }
 7676              		.loc 1 721 2 is_stmt 0 discriminator 3 view .LVU2078
 7677 0042 0CBF     		ite	eq
 7678 0044 1022     		moveq	r2, #16
 7679 0046 0822     		movne	r2, #8
 7680 0048 2846     		mov	r0, r5
 7681              	.LVL527:
 721:src/xeq.c     **** }
 7682              		.loc 1 721 2 discriminator 3 view .LVU2079
 7683 004a 0134     		adds	r4, r4, #1
 7684              	.LVL528:
 721:src/xeq.c     **** }
 7685              		.loc 1 721 2 discriminator 3 view .LVU2080
 7686 004c FFF7FEFF 		bl	xcopy
 7687              	.LVL529:
 721:src/xeq.c     **** }
 7688              		.loc 1 721 2 discriminator 3 view .LVU2081
 7689              	.LBE1933:
 7690              	.LBE1942:
 781:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7691              		.loc 1 781 17 is_stmt 1 discriminator 3 view .LVU2082
 781:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7692              		.loc 1 781 12 discriminator 3 view .LVU2083
 781:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7693              		.loc 1 781 2 is_stmt 0 discriminator 3 view .LVU2084
 7694 0050 B442     		cmp	r4, r6
 7695 0052 E7D1     		bne	.L601
 783:src/xeq.c     **** 
 7696              		.loc 1 783 1 view .LVU2085
 7697 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7698              	.LVL530:
 7699              	.L608:
 7700              	.LBB1943:
 7701              	.LBB1921:
 707:src/xeq.c     **** 		return 4;
 7702              		.loc 1 707 44 view .LVU2086
ARM GAS  /tmp/ccQQPlfu.s 			page 270


 7703 0058 054B     		ldr	r3, .L609+4
 707:src/xeq.c     **** 		return 4;
 7704              		.loc 1 707 41 view .LVU2087
 7705 005a 93F90130 		ldrsb	r3, [r3, #1]
 708:src/xeq.c     **** 	return 8;
 7706              		.loc 1 708 10 view .LVU2088
 7707 005e 002B     		cmp	r3, #0
 7708 0060 B4BF     		ite	lt
 7709 0062 0826     		movlt	r6, #8
 7710 0064 0426     		movge	r6, #4
 7711 0066 D9E7     		b	.L599
 7712              	.L602:
 7713 0068 0426     		movs	r6, #4
 7714 006a D7E7     		b	.L599
 7715              	.L610:
 7716              		.align	2
 7717              	.L609:
 7718 006c 00000000 		.word	main_ram
 7719 0070 00000000 		.word	XromParams
 7720              	.LBE1921:
 7721              	.LBE1943:
 7722              		.cfi_endproc
 7723              	.LFE54:
 7725              		.section	.text.drop,"ax",%progbits
 7726              		.align	1
 7727              		.p2align 2,,3
 7728              		.global	drop
 7729              		.syntax unified
 7730              		.thumb
 7731              		.thumb_func
 7732              		.fpu fpv4-sp-d16
 7734              	drop:
 7735              	.LVL531:
 7736              	.LFB81:
1098:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7737              		.loc 1 1098 26 is_stmt 1 view -0
 7738              		.cfi_startproc
 7739              		@ args = 0, pretend = 0, frame = 0
 7740              		@ frame_needed = 0, uses_anonymous_args = 0
1099:src/xeq.c     **** 		lower2();
 7741              		.loc 1 1099 2 view .LVU2090
1099:src/xeq.c     **** 		lower2();
 7742              		.loc 1 1099 5 is_stmt 0 view .LVU2091
 7743 0000 0F28     		cmp	r0, #15
 7744 0002 01D0     		beq	.L618
1103:src/xeq.c     **** }
 7745              		.loc 1 1103 3 is_stmt 1 view .LVU2092
 7746 0004 FFF7FEBF 		b	lower
 7747              	.LVL532:
 7748              	.L618:
1100:src/xeq.c     **** 		set_was_complex();
 7749              		.loc 1 1100 3 view .LVU2093
1098:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7750              		.loc 1 1098 26 is_stmt 0 view .LVU2094
 7751 0008 08B5     		push	{r3, lr}
 7752              		.cfi_def_cfa_offset 8
 7753              		.cfi_offset 3, -8
ARM GAS  /tmp/ccQQPlfu.s 			page 271


 7754              		.cfi_offset 14, -4
1100:src/xeq.c     **** 		set_was_complex();
 7755              		.loc 1 1100 3 view .LVU2095
 7756 000a FFF7FEFF 		bl	lower2
 7757              	.LVL533:
1101:src/xeq.c     **** 	} else
 7758              		.loc 1 1101 3 is_stmt 1 view .LVU2096
 7759              	.LBB1944:
 7760              	.LBI1944:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 7761              		.loc 1 533 13 view .LVU2097
 7762              	.LBB1945:
 534:src/xeq.c     **** }
 7763              		.loc 1 534 2 view .LVU2098
 534:src/xeq.c     **** }
 7764              		.loc 1 534 20 is_stmt 0 view .LVU2099
 7765 000e 034B     		ldr	r3, .L619
 7766 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 7767 0012 0121     		movs	r1, #1
 7768 0014 61F38712 		bfi	r2, r1, #6, #2
 7769 0018 1A75     		strb	r2, [r3, #20]
 7770              	.LBE1945:
 7771              	.LBE1944:
1104:src/xeq.c     **** 
 7772              		.loc 1 1104 1 view .LVU2100
 7773 001a 08BD     		pop	{r3, pc}
 7774              	.L620:
 7775              		.align	2
 7776              	.L619:
 7777 001c 00000000 		.word	StateWhileOn
 7778              		.cfi_endproc
 7779              	.LFE81:
 7781              		.section	.text.copyreg_n,"ax",%progbits
 7782              		.align	1
 7783              		.p2align 2,,3
 7784              		.global	copyreg_n
 7785              		.syntax unified
 7786              		.thumb
 7787              		.thumb_func
 7788              		.fpu fpv4-sp-d16
 7790              	copyreg_n:
 7791              	.LVL534:
 7792              	.LFB46:
 724:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7793              		.loc 1 724 30 is_stmt 1 view -0
 7794              		.cfi_startproc
 7795              		@ args = 0, pretend = 0, frame = 0
 7796              		@ frame_needed = 0, uses_anonymous_args = 0
 725:src/xeq.c     **** }
 7797              		.loc 1 725 2 view .LVU2102
 724:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7798              		.loc 1 724 30 is_stmt 0 view .LVU2103
 7799 0000 38B5     		push	{r3, r4, r5, lr}
 7800              		.cfi_def_cfa_offset 16
 7801              		.cfi_offset 3, -16
 7802              		.cfi_offset 4, -12
 7803              		.cfi_offset 5, -8
ARM GAS  /tmp/ccQQPlfu.s 			page 272


 7804              		.cfi_offset 14, -4
 724:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7805              		.loc 1 724 30 view .LVU2104
 7806 0002 0D46     		mov	r5, r1
 725:src/xeq.c     **** }
 7807              		.loc 1 725 2 view .LVU2105
 7808 0004 FFF7FEFF 		bl	get_reg_n
 7809              	.LVL535:
 725:src/xeq.c     **** }
 7810              		.loc 1 725 2 view .LVU2106
 7811 0008 0446     		mov	r4, r0
 725:src/xeq.c     **** }
 7812              		.loc 1 725 24 view .LVU2107
 7813 000a 2846     		mov	r0, r5
 7814 000c FFF7FEFF 		bl	get_reg_n
 7815              	.LVL536:
 7816              	.LBB1946:
 7817              	.LBB1947:
 7818              	.LBB1948:
 7819              	.LBB1949:
1113:src/xeq.c     **** }
 7820              		.loc 1 1113 24 view .LVU2108
 7821 0010 094B     		ldr	r3, .L625
 7822 0012 1B68     		ldr	r3, [r3]
 7823 0014 B3F8E827 		ldrh	r2, [r3, #2024]
 7824 0018 44F20103 		movw	r3, #16385
 7825              	.LBE1949:
 7826              	.LBE1948:
 721:src/xeq.c     **** }
 7827              		.loc 1 721 2 view .LVU2109
 7828 001c 1340     		ands	r3, r3, r2
 7829 001e B3F5804F 		cmp	r3, #16384
 7830              	.LBE1947:
 7831              	.LBE1946:
 725:src/xeq.c     **** }
 7832              		.loc 1 725 24 view .LVU2110
 7833 0022 0146     		mov	r1, r0
 7834              	.LVL537:
 7835              	.LBB1954:
 7836              	.LBI1946:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7837              		.loc 1 720 6 is_stmt 1 view .LVU2111
 7838              	.LBB1952:
 721:src/xeq.c     **** }
 7839              		.loc 1 721 2 view .LVU2112
 7840              	.LBB1951:
 7841              	.LBI1948:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7842              		.loc 1 1112 5 view .LVU2113
 7843              	.LBB1950:
1113:src/xeq.c     **** }
 7844              		.loc 1 1113 2 view .LVU2114
 7845              	.LBE1950:
 7846              	.LBE1951:
 721:src/xeq.c     **** }
 7847              		.loc 1 721 2 is_stmt 0 view .LVU2115
 7848 0024 08BF     		it	eq
ARM GAS  /tmp/ccQQPlfu.s 			page 273


 7849 0026 1022     		moveq	r2, #16
 7850 0028 2046     		mov	r0, r4
 7851              	.LVL538:
 721:src/xeq.c     **** }
 7852              		.loc 1 721 2 view .LVU2116
 7853 002a 18BF     		it	ne
 7854 002c 0822     		movne	r2, #8
 7855              	.LBE1952:
 7856              	.LBE1954:
 726:src/xeq.c     **** 
 7857              		.loc 1 726 1 view .LVU2117
 7858 002e BDE83840 		pop	{r3, r4, r5, lr}
 7859              		.cfi_restore 14
 7860              		.cfi_restore 5
 7861              		.cfi_restore 4
 7862              		.cfi_restore 3
 7863              		.cfi_def_cfa_offset 0
 7864              	.LVL539:
 7865              	.LBB1955:
 7866              	.LBB1953:
 721:src/xeq.c     **** }
 7867              		.loc 1 721 2 view .LVU2118
 7868 0032 FFF7FEBF 		b	xcopy
 7869              	.LVL540:
 7870              	.L626:
 721:src/xeq.c     **** }
 7871              		.loc 1 721 2 view .LVU2119
 7872 0036 00BF     		.align	2
 7873              	.L625:
 7874 0038 00000000 		.word	main_ram
 7875              	.LBE1953:
 7876              	.LBE1955:
 7877              		.cfi_endproc
 7878              	.LFE46:
 7880              		.section	.text.setlastX,"ax",%progbits
 7881              		.align	1
 7882              		.p2align 2,,3
 7883              		.global	setlastX
 7884              		.syntax unified
 7885              		.thumb
 7886              		.thumb_func
 7887              		.fpu fpv4-sp-d16
 7889              	setlastX:
 7890              	.LFB55:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7891              		.loc 1 786 21 is_stmt 1 view -0
 7892              		.cfi_startproc
 7893              		@ args = 0, pretend = 0, frame = 0
 7894              		@ frame_needed = 0, uses_anonymous_args = 0
 7895              		@ link register save eliminated.
 787:src/xeq.c     **** }
 7896              		.loc 1 787 2 view .LVU2121
 7897 0000 6421     		movs	r1, #100
 7898 0002 6C20     		movs	r0, #108
 7899 0004 FFF7FEBF 		b	copyreg_n
 7900              	.LVL541:
 7901              		.cfi_endproc
ARM GAS  /tmp/ccQQPlfu.s 			page 274


 7902              	.LFE55:
 7904              		.section	.text.setlastXY,"ax",%progbits
 7905              		.align	1
 7906              		.p2align 2,,3
 7907              		.syntax unified
 7908              		.thumb
 7909              		.thumb_func
 7910              		.fpu fpv4-sp-d16
 7912              	setlastXY:
 7913              	.LFB56:
 790:src/xeq.c     **** 	setlastX();
 7914              		.loc 1 790 29 view -0
 7915              		.cfi_startproc
 7916              		@ args = 0, pretend = 0, frame = 0
 7917              		@ frame_needed = 0, uses_anonymous_args = 0
 791:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 7918              		.loc 1 791 2 view .LVU2123
 7919              	.LBB1956:
 7920              	.LBI1956:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7921              		.loc 1 786 6 view .LVU2124
 7922              	.LBB1957:
 787:src/xeq.c     **** }
 7923              		.loc 1 787 2 view .LVU2125
 7924              	.LBE1957:
 7925              	.LBE1956:
 790:src/xeq.c     **** 	setlastX();
 7926              		.loc 1 790 29 is_stmt 0 view .LVU2126
 7927 0000 08B5     		push	{r3, lr}
 7928              		.cfi_def_cfa_offset 8
 7929              		.cfi_offset 3, -8
 7930              		.cfi_offset 14, -4
 7931              	.LBB1959:
 7932              	.LBB1958:
 787:src/xeq.c     **** }
 7933              		.loc 1 787 2 view .LVU2127
 7934 0002 6421     		movs	r1, #100
 7935 0004 6C20     		movs	r0, #108
 7936 0006 FFF7FEFF 		bl	copyreg_n
 7937              	.LVL542:
 7938              	.LBE1958:
 7939              	.LBE1959:
 792:src/xeq.c     **** }
 7940              		.loc 1 792 2 is_stmt 1 view .LVU2128
 793:src/xeq.c     **** 
 7941              		.loc 1 793 1 is_stmt 0 view .LVU2129
 7942 000a BDE80840 		pop	{r3, lr}
 7943              		.cfi_restore 14
 7944              		.cfi_restore 3
 7945              		.cfi_def_cfa_offset 0
 792:src/xeq.c     **** }
 7946              		.loc 1 792 2 view .LVU2130
 7947 000e 6521     		movs	r1, #101
 7948 0010 6D20     		movs	r0, #109
 7949 0012 FFF7FEBF 		b	copyreg_n
 7950              	.LVL543:
 7951              		.cfi_endproc
ARM GAS  /tmp/ccQQPlfu.s 			page 275


 7952              	.LFE56:
 7954 0016 00BF     		.section	.text.getRegister,"ax",%progbits
 7955              		.align	1
 7956              		.p2align 2,,3
 7957              		.global	getRegister
 7958              		.syntax unified
 7959              		.thumb
 7960              		.thumb_func
 7961              		.fpu fpv4-sp-d16
 7963              	getRegister:
 7964              	.LVL544:
 7965              	.LFB57:
 796:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7966              		.loc 1 796 49 is_stmt 1 view -0
 7967              		.cfi_startproc
 7968              		@ args = 0, pretend = 0, frame = 0
 7969              		@ frame_needed = 0, uses_anonymous_args = 0
 797:src/xeq.c     **** 	if (is_dblmode())
 7970              		.loc 1 797 2 view .LVU2132
 796:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7971              		.loc 1 796 49 is_stmt 0 view .LVU2133
 7972 0000 10B5     		push	{r4, lr}
 7973              		.cfi_def_cfa_offset 8
 7974              		.cfi_offset 4, -8
 7975              		.cfi_offset 14, -4
 796:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7976              		.loc 1 796 49 view .LVU2134
 7977 0002 0446     		mov	r4, r0
 797:src/xeq.c     **** 	if (is_dblmode())
 7978              		.loc 1 797 30 view .LVU2135
 7979 0004 0846     		mov	r0, r1
 7980              	.LVL545:
 797:src/xeq.c     **** 	if (is_dblmode())
 7981              		.loc 1 797 30 view .LVU2136
 7982 0006 FFF7FEFF 		bl	get_reg_n
 7983              	.LVL546:
 798:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7984              		.loc 1 798 2 is_stmt 1 view .LVU2137
 7985              	.LBB1960:
 7986              	.LBI1960:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7987              		.loc 1 1112 5 view .LVU2138
 7988              	.LBB1961:
1113:src/xeq.c     **** }
 7989              		.loc 1 1113 2 view .LVU2139
1113:src/xeq.c     **** }
 7990              		.loc 1 1113 24 is_stmt 0 view .LVU2140
 7991 000a 094B     		ldr	r3, .L635
 7992 000c 1B68     		ldr	r3, [r3]
 7993 000e B3F8E827 		ldrh	r2, [r3, #2024]
 7994 0012 44F20103 		movw	r3, #16385
 7995              	.LBE1961:
 7996              	.LBE1960:
 798:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7997              		.loc 1 798 5 view .LVU2141
 7998 0016 1340     		ands	r3, r3, r2
 7999 0018 B3F5804F 		cmp	r3, #16384
ARM GAS  /tmp/ccQQPlfu.s 			page 276


 799:src/xeq.c     **** 	else
 8000              		.loc 1 799 3 view .LVU2142
 8001 001c 2146     		mov	r1, r4
 798:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 8002              		.loc 1 798 5 view .LVU2143
 8003 001e 03D0     		beq	.L634
 801:src/xeq.c     **** 	return r;
 8004              		.loc 1 801 3 is_stmt 1 view .LVU2144
 8005 0020 FFF7FEFF 		bl	decimal64ToNumber
 8006              	.LVL547:
 802:src/xeq.c     **** }
 8007              		.loc 1 802 2 view .LVU2145
 803:src/xeq.c     **** 
 8008              		.loc 1 803 1 is_stmt 0 view .LVU2146
 8009 0024 2046     		mov	r0, r4
 8010 0026 10BD     		pop	{r4, pc}
 8011              	.LVL548:
 8012              	.L634:
 799:src/xeq.c     **** 	else
 8013              		.loc 1 799 3 is_stmt 1 view .LVU2147
 8014 0028 FFF7FEFF 		bl	decimal128ToNumber
 8015              	.LVL549:
 802:src/xeq.c     **** }
 8016              		.loc 1 802 2 view .LVU2148
 803:src/xeq.c     **** 
 8017              		.loc 1 803 1 is_stmt 0 view .LVU2149
 8018 002c 2046     		mov	r0, r4
 8019 002e 10BD     		pop	{r4, pc}
 8020              	.LVL550:
 8021              	.L636:
 803:src/xeq.c     **** 
 8022              		.loc 1 803 1 view .LVU2150
 8023              		.align	2
 8024              	.L635:
 8025 0030 00000000 		.word	main_ram
 8026              		.cfi_endproc
 8027              	.LFE57:
 8029              		.section	.text.getX,"ax",%progbits
 8030              		.align	1
 8031              		.p2align 2,,3
 8032              		.global	getX
 8033              		.syntax unified
 8034              		.thumb
 8035              		.thumb_func
 8036              		.fpu fpv4-sp-d16
 8038              	getX:
 8039              	.LVL551:
 8040              	.LFB59:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8041              		.loc 1 818 31 is_stmt 1 view -0
 8042              		.cfi_startproc
 8043              		@ args = 0, pretend = 0, frame = 0
 8044              		@ frame_needed = 0, uses_anonymous_args = 0
 8045              		@ link register save eliminated.
 819:src/xeq.c     **** }
 8046              		.loc 1 819 2 view .LVU2152
 819:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 277


 8047              		.loc 1 819 9 is_stmt 0 view .LVU2153
 8048 0000 6421     		movs	r1, #100
 8049 0002 FFF7FEBF 		b	getRegister
 8050              	.LVL552:
 819:src/xeq.c     **** }
 8051              		.loc 1 819 9 view .LVU2154
 8052              		.cfi_endproc
 8053              	.LFE59:
 8055 0006 00BF     		.section	.text.getY,"ax",%progbits
 8056              		.align	1
 8057              		.p2align 2,,3
 8058              		.global	getY
 8059              		.syntax unified
 8060              		.thumb
 8061              		.thumb_func
 8062              		.fpu fpv4-sp-d16
 8064              	getY:
 8065              	.LVL553:
 8066              	.LFB61:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 8067              		.loc 1 826 25 is_stmt 1 view -0
 8068              		.cfi_startproc
 8069              		@ args = 0, pretend = 0, frame = 0
 8070              		@ frame_needed = 0, uses_anonymous_args = 0
 8071              		@ link register save eliminated.
 827:src/xeq.c     **** }
 8072              		.loc 1 827 2 view .LVU2156
 8073 0000 6521     		movs	r1, #101
 8074 0002 FFF7FEBF 		b	getRegister
 8075              	.LVL554:
 827:src/xeq.c     **** }
 8076              		.loc 1 827 2 is_stmt 0 view .LVU2157
 8077              		.cfi_endproc
 8078              	.LFE61:
 8080 0006 00BF     		.section	.text.getXY,"ax",%progbits
 8081              		.align	1
 8082              		.p2align 2,,3
 8083              		.global	getXY
 8084              		.syntax unified
 8085              		.thumb
 8086              		.thumb_func
 8087              		.fpu fpv4-sp-d16
 8089              	getXY:
 8090              	.LVL555:
 8091              	.LFB65:
 848:src/xeq.c     **** 	getX(x);
 8092              		.loc 1 848 40 is_stmt 1 view -0
 8093              		.cfi_startproc
 8094              		@ args = 0, pretend = 0, frame = 0
 8095              		@ frame_needed = 0, uses_anonymous_args = 0
 849:src/xeq.c     **** 	getY(y);
 8096              		.loc 1 849 2 view .LVU2159
 8097              	.LBB1962:
 8098              	.LBI1962:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8099              		.loc 1 818 12 view .LVU2160
 8100              	.LBB1963:
ARM GAS  /tmp/ccQQPlfu.s 			page 278


 819:src/xeq.c     **** }
 8101              		.loc 1 819 2 view .LVU2161
 8102              	.LBE1963:
 8103              	.LBE1962:
 848:src/xeq.c     **** 	getX(x);
 8104              		.loc 1 848 40 is_stmt 0 view .LVU2162
 8105 0000 10B5     		push	{r4, lr}
 8106              		.cfi_def_cfa_offset 8
 8107              		.cfi_offset 4, -8
 8108              		.cfi_offset 14, -4
 848:src/xeq.c     **** 	getX(x);
 8109              		.loc 1 848 40 view .LVU2163
 8110 0002 0C46     		mov	r4, r1
 8111              	.LBB1965:
 8112              	.LBB1964:
 819:src/xeq.c     **** }
 8113              		.loc 1 819 9 view .LVU2164
 8114 0004 6421     		movs	r1, #100
 8115              	.LVL556:
 819:src/xeq.c     **** }
 8116              		.loc 1 819 9 view .LVU2165
 8117 0006 FFF7FEFF 		bl	getRegister
 8118              	.LVL557:
 819:src/xeq.c     **** }
 8119              		.loc 1 819 9 view .LVU2166
 8120              	.LBE1964:
 8121              	.LBE1965:
 850:src/xeq.c     **** }
 8122              		.loc 1 850 2 is_stmt 1 view .LVU2167
 8123              	.LBB1966:
 8124              	.LBI1966:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 8125              		.loc 1 826 6 view .LVU2168
 8126              	.LBB1967:
 827:src/xeq.c     **** }
 8127              		.loc 1 827 2 view .LVU2169
 8128 000a 2046     		mov	r0, r4
 8129 000c 6521     		movs	r1, #101
 8130              	.LBE1967:
 8131              	.LBE1966:
 851:src/xeq.c     **** 
 8132              		.loc 1 851 1 is_stmt 0 view .LVU2170
 8133 000e BDE81040 		pop	{r4, lr}
 8134              		.cfi_restore 14
 8135              		.cfi_restore 4
 8136              		.cfi_def_cfa_offset 0
 8137              	.LVL558:
 8138              	.LBB1969:
 8139              	.LBB1968:
 827:src/xeq.c     **** }
 8140              		.loc 1 827 2 view .LVU2171
 8141 0012 FFF7FEBF 		b	getRegister
 8142              	.LVL559:
 827:src/xeq.c     **** }
 8143              		.loc 1 827 2 view .LVU2172
 8144              	.LBE1968:
 8145              	.LBE1969:
ARM GAS  /tmp/ccQQPlfu.s 			page 279


 8146              		.cfi_endproc
 8147              	.LFE65:
 8149 0016 00BF     		.section	.text.getXYZ,"ax",%progbits
 8150              		.align	1
 8151              		.p2align 2,,3
 8152              		.global	getXYZ
 8153              		.syntax unified
 8154              		.thumb
 8155              		.thumb_func
 8156              		.fpu fpv4-sp-d16
 8158              	getXYZ:
 8159              	.LVL560:
 8160              	.LFB67:
 861:src/xeq.c     **** 	getXY(x, y);
 8161              		.loc 1 861 55 is_stmt 1 view -0
 8162              		.cfi_startproc
 8163              		@ args = 0, pretend = 0, frame = 0
 8164              		@ frame_needed = 0, uses_anonymous_args = 0
 862:src/xeq.c     **** 	getZ(z);
 8165              		.loc 1 862 2 view .LVU2174
 861:src/xeq.c     **** 	getXY(x, y);
 8166              		.loc 1 861 55 is_stmt 0 view .LVU2175
 8167 0000 38B5     		push	{r3, r4, r5, lr}
 8168              		.cfi_def_cfa_offset 16
 8169              		.cfi_offset 3, -16
 8170              		.cfi_offset 4, -12
 8171              		.cfi_offset 5, -8
 8172              		.cfi_offset 14, -4
 861:src/xeq.c     **** 	getXY(x, y);
 8173              		.loc 1 861 55 view .LVU2176
 8174 0002 0D46     		mov	r5, r1
 8175              	.LVL561:
 8176              	.LBB1970:
 8177              	.LBI1970:
 848:src/xeq.c     **** 	getX(x);
 8178              		.loc 1 848 6 is_stmt 1 view .LVU2177
 8179              	.LBE1970:
 849:src/xeq.c     **** 	getY(y);
 8180              		.loc 1 849 2 view .LVU2178
 8181              	.LBB1977:
 8182              	.LBB1971:
 8183              	.LBI1971:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8184              		.loc 1 818 12 view .LVU2179
 8185              	.LBB1972:
 819:src/xeq.c     **** }
 8186              		.loc 1 819 2 view .LVU2180
 819:src/xeq.c     **** }
 8187              		.loc 1 819 9 is_stmt 0 view .LVU2181
 8188 0004 6421     		movs	r1, #100
 8189              	.LVL562:
 819:src/xeq.c     **** }
 8190              		.loc 1 819 9 view .LVU2182
 8191              	.LBE1972:
 8192              	.LBE1971:
 8193              	.LBE1977:
 861:src/xeq.c     **** 	getXY(x, y);
ARM GAS  /tmp/ccQQPlfu.s 			page 280


 8194              		.loc 1 861 55 view .LVU2183
 8195 0006 1446     		mov	r4, r2
 8196              	.LBB1978:
 8197              	.LBB1974:
 8198              	.LBB1973:
 819:src/xeq.c     **** }
 8199              		.loc 1 819 9 view .LVU2184
 8200 0008 FFF7FEFF 		bl	getRegister
 8201              	.LVL563:
 819:src/xeq.c     **** }
 8202              		.loc 1 819 9 view .LVU2185
 8203              	.LBE1973:
 8204              	.LBE1974:
 8205              	.LBE1978:
 850:src/xeq.c     **** }
 8206              		.loc 1 850 2 is_stmt 1 view .LVU2186
 8207              	.LBB1979:
 8208              	.LBB1975:
 8209              	.LBI1975:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 8210              		.loc 1 826 6 view .LVU2187
 8211              	.LBB1976:
 827:src/xeq.c     **** }
 8212              		.loc 1 827 2 view .LVU2188
 8213 000c 2846     		mov	r0, r5
 8214 000e 6521     		movs	r1, #101
 8215 0010 FFF7FEFF 		bl	getRegister
 8216              	.LVL564:
 827:src/xeq.c     **** }
 8217              		.loc 1 827 2 is_stmt 0 view .LVU2189
 8218              	.LBE1976:
 8219              	.LBE1975:
 8220              	.LBE1979:
 863:src/xeq.c     **** }
 8221              		.loc 1 863 2 is_stmt 1 view .LVU2190
 8222              	.LBB1980:
 8223              	.LBI1980:
 834:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8224              		.loc 1 834 13 view .LVU2191
 8225              	.LBB1981:
 835:src/xeq.c     **** }
 8226              		.loc 1 835 2 view .LVU2192
 8227 0014 2046     		mov	r0, r4
 8228 0016 6621     		movs	r1, #102
 8229              	.LBE1981:
 8230              	.LBE1980:
 864:src/xeq.c     **** 
 8231              		.loc 1 864 1 is_stmt 0 view .LVU2193
 8232 0018 BDE83840 		pop	{r3, r4, r5, lr}
 8233              		.cfi_restore 14
 8234              		.cfi_restore 5
 8235              		.cfi_restore 4
 8236              		.cfi_restore 3
 8237              		.cfi_def_cfa_offset 0
 8238              	.LVL565:
 8239              	.LBB1983:
 8240              	.LBB1982:
ARM GAS  /tmp/ccQQPlfu.s 			page 281


 835:src/xeq.c     **** }
 8241              		.loc 1 835 2 view .LVU2194
 8242 001c FFF7FEBF 		b	getRegister
 8243              	.LVL566:
 835:src/xeq.c     **** }
 8244              		.loc 1 835 2 view .LVU2195
 8245              	.LBE1982:
 8246              	.LBE1983:
 8247              		.cfi_endproc
 8248              	.LFE67:
 8250              		.section	.text.getYZ,"ax",%progbits
 8251              		.align	1
 8252              		.p2align 2,,3
 8253              		.global	getYZ
 8254              		.syntax unified
 8255              		.thumb
 8256              		.thumb_func
 8257              		.fpu fpv4-sp-d16
 8259              	getYZ:
 8260              	.LVL567:
 8261              	.LFB69:
 878:src/xeq.c     **** 	getY(y);
 8262              		.loc 1 878 40 is_stmt 1 view -0
 8263              		.cfi_startproc
 8264              		@ args = 0, pretend = 0, frame = 0
 8265              		@ frame_needed = 0, uses_anonymous_args = 0
 879:src/xeq.c     **** 	getZ(z);
 8266              		.loc 1 879 2 view .LVU2197
 8267              	.LBB1984:
 8268              	.LBI1984:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 8269              		.loc 1 826 6 view .LVU2198
 8270              	.LBB1985:
 827:src/xeq.c     **** }
 8271              		.loc 1 827 2 view .LVU2199
 8272              	.LBE1985:
 8273              	.LBE1984:
 878:src/xeq.c     **** 	getY(y);
 8274              		.loc 1 878 40 is_stmt 0 view .LVU2200
 8275 0000 10B5     		push	{r4, lr}
 8276              		.cfi_def_cfa_offset 8
 8277              		.cfi_offset 4, -8
 8278              		.cfi_offset 14, -4
 878:src/xeq.c     **** 	getY(y);
 8279              		.loc 1 878 40 view .LVU2201
 8280 0002 0C46     		mov	r4, r1
 8281              	.LBB1987:
 8282              	.LBB1986:
 827:src/xeq.c     **** }
 8283              		.loc 1 827 2 view .LVU2202
 8284 0004 6521     		movs	r1, #101
 8285              	.LVL568:
 827:src/xeq.c     **** }
 8286              		.loc 1 827 2 view .LVU2203
 8287 0006 FFF7FEFF 		bl	getRegister
 8288              	.LVL569:
 827:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 282


 8289              		.loc 1 827 2 view .LVU2204
 8290              	.LBE1986:
 8291              	.LBE1987:
 880:src/xeq.c     **** }
 8292              		.loc 1 880 2 is_stmt 1 view .LVU2205
 8293              	.LBB1988:
 8294              	.LBI1988:
 834:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8295              		.loc 1 834 13 view .LVU2206
 8296              	.LBB1989:
 835:src/xeq.c     **** }
 8297              		.loc 1 835 2 view .LVU2207
 8298 000a 2046     		mov	r0, r4
 8299 000c 6621     		movs	r1, #102
 8300              	.LBE1989:
 8301              	.LBE1988:
 881:src/xeq.c     **** 
 8302              		.loc 1 881 1 is_stmt 0 view .LVU2208
 8303 000e BDE81040 		pop	{r4, lr}
 8304              		.cfi_restore 14
 8305              		.cfi_restore 4
 8306              		.cfi_def_cfa_offset 0
 8307              	.LVL570:
 8308              	.LBB1991:
 8309              	.LBB1990:
 835:src/xeq.c     **** }
 8310              		.loc 1 835 2 view .LVU2209
 8311 0012 FFF7FEBF 		b	getRegister
 8312              	.LVL571:
 835:src/xeq.c     **** }
 8313              		.loc 1 835 2 view .LVU2210
 8314              	.LBE1990:
 8315              	.LBE1991:
 8316              		.cfi_endproc
 8317              	.LFE69:
 8319 0016 00BF     		.section	.text.getXYZT,"ax",%progbits
 8320              		.align	1
 8321              		.p2align 2,,3
 8322              		.global	getXYZT
 8323              		.syntax unified
 8324              		.thumb
 8325              		.thumb_func
 8326              		.fpu fpv4-sp-d16
 8328              	getXYZT:
 8329              	.LVL572:
 8330              	.LFB68:
 873:src/xeq.c     **** 	getXYZ(x, y, z);
 8331              		.loc 1 873 70 is_stmt 1 view -0
 8332              		.cfi_startproc
 8333              		@ args = 0, pretend = 0, frame = 0
 8334              		@ frame_needed = 0, uses_anonymous_args = 0
 874:src/xeq.c     **** 	getT(t);
 8335              		.loc 1 874 2 view .LVU2212
 873:src/xeq.c     **** 	getXYZ(x, y, z);
 8336              		.loc 1 873 70 is_stmt 0 view .LVU2213
 8337 0000 10B5     		push	{r4, lr}
 8338              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccQQPlfu.s 			page 283


 8339              		.cfi_offset 4, -8
 8340              		.cfi_offset 14, -4
 873:src/xeq.c     **** 	getXYZ(x, y, z);
 8341              		.loc 1 873 70 view .LVU2214
 8342 0002 1C46     		mov	r4, r3
 874:src/xeq.c     **** 	getT(t);
 8343              		.loc 1 874 2 view .LVU2215
 8344 0004 FFF7FEFF 		bl	getXYZ
 8345              	.LVL573:
 875:src/xeq.c     **** }
 8346              		.loc 1 875 2 is_stmt 1 view .LVU2216
 8347              	.LBB1992:
 8348              	.LBI1992:
 844:src/xeq.c     **** 	getRegister(t, regT_idx);
 8349              		.loc 1 844 13 view .LVU2217
 8350              	.LBB1993:
 845:src/xeq.c     **** }
 8351              		.loc 1 845 2 view .LVU2218
 8352 0008 2046     		mov	r0, r4
 8353 000a 6721     		movs	r1, #103
 8354              	.LBE1993:
 8355              	.LBE1992:
 876:src/xeq.c     **** 
 8356              		.loc 1 876 1 is_stmt 0 view .LVU2219
 8357 000c BDE81040 		pop	{r4, lr}
 8358              		.cfi_restore 14
 8359              		.cfi_restore 4
 8360              		.cfi_def_cfa_offset 0
 8361              	.LVL574:
 8362              	.LBB1995:
 8363              	.LBB1994:
 845:src/xeq.c     **** }
 8364              		.loc 1 845 2 view .LVU2220
 8365 0010 FFF7FEBF 		b	getRegister
 8366              	.LVL575:
 845:src/xeq.c     **** }
 8367              		.loc 1 845 2 view .LVU2221
 8368              	.LBE1994:
 8369              	.LBE1995:
 8370              		.cfi_endproc
 8371              	.LFE68:
 8373              		.section	.text.storcl_op,"ax",%progbits
 8374              		.align	1
 8375              		.p2align 2,,3
 8376              		.syntax unified
 8377              		.thumb
 8378              		.thumb_func
 8379              		.fpu fpv4-sp-d16
 8381              	storcl_op:
 8382              	.LVL576:
 8383              	.LFB115:
1644:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8384              		.loc 1 1644 76 is_stmt 1 view -0
 8385              		.cfi_startproc
 8386              		@ args = 0, pretend = 0, frame = 72
 8387              		@ frame_needed = 0, uses_anonymous_args = 0
1645:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 284


 8388              		.loc 1 1645 2 view .LVU2223
1644:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8389              		.loc 1 1644 76 is_stmt 0 view .LVU2224
 8390 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 8391              		.cfi_def_cfa_offset 20
 8392              		.cfi_offset 4, -20
 8393              		.cfi_offset 5, -16
 8394              		.cfi_offset 6, -12
 8395              		.cfi_offset 7, -8
 8396              		.cfi_offset 14, -4
 8397 0002 93B0     		sub	sp, sp, #76
 8398              		.cfi_def_cfa_offset 96
 8399              	.LVL577:
1647:src/xeq.c     **** 	getRegister(y, index);
 8400              		.loc 1 1647 2 is_stmt 1 view .LVU2225
 8401              	.LBB1996:
 8402              	.LBI1996:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8403              		.loc 1 818 12 view .LVU2226
 8404              	.LBB1997:
 819:src/xeq.c     **** }
 8405              		.loc 1 819 2 view .LVU2227
 8406              	.LBE1997:
 8407              	.LBE1996:
1644:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8408              		.loc 1 1644 76 is_stmt 0 view .LVU2228
 8409 0004 0E46     		mov	r6, r1
 8410 0006 0446     		mov	r4, r0
 8411              	.LBB2000:
 8412              	.LBB1998:
 819:src/xeq.c     **** }
 8413              		.loc 1 819 9 view .LVU2229
 8414 0008 6421     		movs	r1, #100
 8415              	.LVL578:
 819:src/xeq.c     **** }
 8416              		.loc 1 819 9 view .LVU2230
 8417 000a 6846     		mov	r0, sp
 8418              	.LVL579:
 819:src/xeq.c     **** }
 8419              		.loc 1 819 9 view .LVU2231
 8420              	.LBE1998:
 8421              	.LBE2000:
1644:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8422              		.loc 1 1644 76 view .LVU2232
 8423 000c 1D46     		mov	r5, r3
 8424 000e 1746     		mov	r7, r2
 8425              	.LBB2001:
 8426              	.LBB1999:
 819:src/xeq.c     **** }
 8427              		.loc 1 819 9 view .LVU2233
 8428 0010 FFF7FEFF 		bl	getRegister
 8429              	.LVL580:
 819:src/xeq.c     **** }
 8430              		.loc 1 819 9 view .LVU2234
 8431              	.LBE1999:
 8432              	.LBE2001:
1648:src/xeq.c     **** 	if (rev) {
ARM GAS  /tmp/ccQQPlfu.s 			page 285


 8433              		.loc 1 1648 2 is_stmt 1 view .LVU2235
 8434 0014 3146     		mov	r1, r6
 8435 0016 09A8     		add	r0, sp, #36
 8436              	.LVL581:
1648:src/xeq.c     **** 	if (rev) {
 8437              		.loc 1 1648 2 is_stmt 0 view .LVU2236
 8438 0018 FFF7FEFF 		bl	getRegister
 8439              	.LVL582:
1649:src/xeq.c     **** 		x = y;
 8440              		.loc 1 1649 2 is_stmt 1 view .LVU2237
1649:src/xeq.c     **** 		x = y;
 8441              		.loc 1 1649 5 is_stmt 0 view .LVU2238
 8442 001c 4DB1     		cbz	r5, .L657
1651:src/xeq.c     **** 	}
 8443              		.loc 1 1651 5 view .LVU2239
 8444 001e 6946     		mov	r1, sp
1650:src/xeq.c     **** 		y = &a;
 8445              		.loc 1 1650 5 view .LVU2240
 8446 0020 09AA     		add	r2, sp, #36
 8447              	.LVL583:
 8448              	.L648:
1654:src/xeq.c     **** 	case 1:
 8449              		.loc 1 1654 2 is_stmt 1 view .LVU2241
 8450 0022 601E     		subs	r0, r4, #1
 8451 0024 0528     		cmp	r0, #5
 8452 0026 2BD8     		bhi	.L658
 8453 0028 DFE800F0 		tbb	[pc, r0]
 8454              	.L651:
 8455 002c 0C       		.byte	(.L656-.L651)/2
 8456 002d 12       		.byte	(.L655-.L651)/2
 8457 002e 18       		.byte	(.L654-.L651)/2
 8458 002f 1E       		.byte	(.L653-.L651)/2
 8459 0030 24       		.byte	(.L652-.L651)/2
 8460 0031 06       		.byte	(.L650-.L651)/2
 8461              	.LVL584:
 8462              		.p2align 1
 8463              	.L657:
1645:src/xeq.c     **** 
 8464              		.loc 1 1645 28 is_stmt 0 view .LVU2242
 8465 0032 09A9     		add	r1, sp, #36
 8466              	.LVL585:
1645:src/xeq.c     **** 
 8467              		.loc 1 1645 19 view .LVU2243
 8468 0034 6A46     		mov	r2, sp
 8469 0036 F4E7     		b	.L648
 8470              	.LVL586:
 8471              	.L650:
1671:src/xeq.c     **** 		break;
 8472              		.loc 1 1671 3 is_stmt 1 view .LVU2244
 8473 0038 3846     		mov	r0, r7
 8474 003a FFF7FEFF 		bl	dn_max
 8475              	.LVL587:
1672:src/xeq.c     **** 	default:
 8476              		.loc 1 1672 3 view .LVU2245
1676:src/xeq.c     **** }
 8477              		.loc 1 1676 9 is_stmt 0 view .LVU2246
 8478 003e 0020     		movs	r0, #0
ARM GAS  /tmp/ccQQPlfu.s 			page 286


 8479              	.L647:
1677:src/xeq.c     **** 
 8480              		.loc 1 1677 1 view .LVU2247
 8481 0040 13B0     		add	sp, sp, #76
 8482              		.cfi_remember_state
 8483              		.cfi_def_cfa_offset 20
 8484              		@ sp needed
 8485 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 8486              	.LVL588:
 8487              	.L656:
 8488              		.cfi_restore_state
1656:src/xeq.c     **** 		break;
 8489              		.loc 1 1656 3 is_stmt 1 view .LVU2248
 8490 0044 3846     		mov	r0, r7
 8491 0046 FFF7FEFF 		bl	dn_add
 8492              	.LVL589:
1657:src/xeq.c     **** 	case 2:
 8493              		.loc 1 1657 3 view .LVU2249
1676:src/xeq.c     **** }
 8494              		.loc 1 1676 9 is_stmt 0 view .LVU2250
 8495 004a 0020     		movs	r0, #0
1677:src/xeq.c     **** 
 8496              		.loc 1 1677 1 view .LVU2251
 8497 004c 13B0     		add	sp, sp, #76
 8498              		.cfi_remember_state
 8499              		.cfi_def_cfa_offset 20
 8500              		@ sp needed
 8501 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 8502              	.LVL590:
 8503              	.L655:
 8504              		.cfi_restore_state
1659:src/xeq.c     **** 		break;
 8505              		.loc 1 1659 3 is_stmt 1 view .LVU2252
 8506 0050 3846     		mov	r0, r7
 8507 0052 FFF7FEFF 		bl	dn_subtract
 8508              	.LVL591:
1660:src/xeq.c     **** 	case 3:
 8509              		.loc 1 1660 3 view .LVU2253
1676:src/xeq.c     **** }
 8510              		.loc 1 1676 9 is_stmt 0 view .LVU2254
 8511 0056 0020     		movs	r0, #0
1677:src/xeq.c     **** 
 8512              		.loc 1 1677 1 view .LVU2255
 8513 0058 13B0     		add	sp, sp, #76
 8514              		.cfi_remember_state
 8515              		.cfi_def_cfa_offset 20
 8516              		@ sp needed
 8517 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 8518              	.LVL592:
 8519              	.L654:
 8520              		.cfi_restore_state
1662:src/xeq.c     **** 		break;
 8521              		.loc 1 1662 3 is_stmt 1 view .LVU2256
 8522 005c 3846     		mov	r0, r7
 8523 005e FFF7FEFF 		bl	dn_multiply
 8524              	.LVL593:
1663:src/xeq.c     **** 	case 4:
ARM GAS  /tmp/ccQQPlfu.s 			page 287


 8525              		.loc 1 1663 3 view .LVU2257
1676:src/xeq.c     **** }
 8526              		.loc 1 1676 9 is_stmt 0 view .LVU2258
 8527 0062 0020     		movs	r0, #0
1677:src/xeq.c     **** 
 8528              		.loc 1 1677 1 view .LVU2259
 8529 0064 13B0     		add	sp, sp, #76
 8530              		.cfi_remember_state
 8531              		.cfi_def_cfa_offset 20
 8532              		@ sp needed
 8533 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 8534              	.LVL594:
 8535              	.L653:
 8536              		.cfi_restore_state
1665:src/xeq.c     **** 		break;
 8537              		.loc 1 1665 3 is_stmt 1 view .LVU2260
 8538 0068 3846     		mov	r0, r7
 8539 006a FFF7FEFF 		bl	dn_divide
 8540              	.LVL595:
1666:src/xeq.c     **** 	case 5:
 8541              		.loc 1 1666 3 view .LVU2261
1676:src/xeq.c     **** }
 8542              		.loc 1 1676 9 is_stmt 0 view .LVU2262
 8543 006e 0020     		movs	r0, #0
1677:src/xeq.c     **** 
 8544              		.loc 1 1677 1 view .LVU2263
 8545 0070 13B0     		add	sp, sp, #76
 8546              		.cfi_remember_state
 8547              		.cfi_def_cfa_offset 20
 8548              		@ sp needed
 8549 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 8550              	.LVL596:
 8551              	.L652:
 8552              		.cfi_restore_state
1668:src/xeq.c     **** 		break;
 8553              		.loc 1 1668 3 is_stmt 1 view .LVU2264
 8554 0074 3846     		mov	r0, r7
 8555 0076 FFF7FEFF 		bl	dn_min
 8556              	.LVL597:
1669:src/xeq.c     **** 	case 6:
 8557              		.loc 1 1669 3 view .LVU2265
1676:src/xeq.c     **** }
 8558              		.loc 1 1676 9 is_stmt 0 view .LVU2266
 8559 007a 0020     		movs	r0, #0
1677:src/xeq.c     **** 
 8560              		.loc 1 1677 1 view .LVU2267
 8561 007c 13B0     		add	sp, sp, #76
 8562              		.cfi_def_cfa_offset 20
 8563              		@ sp needed
 8564 007e F0BD     		pop	{r4, r5, r6, r7, pc}
 8565              	.LVL598:
 8566              	.L658:
1676:src/xeq.c     **** }
 8567              		.loc 1 1676 9 view .LVU2268
 8568 0080 0120     		movs	r0, #1
 8569 0082 DDE7     		b	.L647
 8570              		.cfi_endproc
ARM GAS  /tmp/ccQQPlfu.s 			page 288


 8571              	.LFE115:
 8573              		.section	.text.storcl_cop,"ax",%progbits
 8574              		.align	1
 8575              		.p2align 2,,3
 8576              		.syntax unified
 8577              		.thumb
 8578              		.thumb_func
 8579              		.fpu fpv4-sp-d16
 8581              	storcl_cop:
 8582              	.LVL599:
 8583              	.LFB120:
1778:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8584              		.loc 1 1778 93 is_stmt 1 view -0
 8585              		.cfi_startproc
 8586              		@ args = 4, pretend = 0, frame = 144
 8587              		@ frame_needed = 0, uses_anonymous_args = 0
1779:src/xeq.c     **** 
 8588              		.loc 1 1779 2 view .LVU2270
1778:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8589              		.loc 1 1778 93 is_stmt 0 view .LVU2271
 8590 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8591              		.cfi_def_cfa_offset 24
 8592              		.cfi_offset 4, -24
 8593              		.cfi_offset 5, -20
 8594              		.cfi_offset 6, -16
 8595              		.cfi_offset 7, -12
 8596              		.cfi_offset 8, -8
 8597              		.cfi_offset 14, -4
 8598 0004 A6B0     		sub	sp, sp, #152
 8599              		.cfi_def_cfa_offset 176
 8600              	.LVL600:
1781:src/xeq.c     **** 	getRegister(y + 0, index);
 8601              		.loc 1 1781 2 is_stmt 1 view .LVU2272
 8602              	.LBB2002:
 8603              	.LBI2002:
 848:src/xeq.c     **** 	getX(x);
 8604              		.loc 1 848 6 view .LVU2273
 8605              	.LBE2002:
 849:src/xeq.c     **** 	getY(y);
 8606              		.loc 1 849 2 view .LVU2274
 8607              	.LBB2011:
 8608              	.LBB2003:
 8609              	.LBI2003:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8610              		.loc 1 818 12 view .LVU2275
 8611              	.LBB2004:
 819:src/xeq.c     **** }
 8612              		.loc 1 819 2 view .LVU2276
 8613              	.LBE2004:
 8614              	.LBE2003:
 8615              	.LBE2011:
1778:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8616              		.loc 1 1778 93 is_stmt 0 view .LVU2277
 8617 0006 0D46     		mov	r5, r1
 8618 0008 0446     		mov	r4, r0
 8619              	.LBB2012:
 8620              	.LBB2007:
ARM GAS  /tmp/ccQQPlfu.s 			page 289


 8621              	.LBB2005:
 819:src/xeq.c     **** }
 8622              		.loc 1 819 9 view .LVU2278
 8623 000a 6421     		movs	r1, #100
 8624              	.LVL601:
 819:src/xeq.c     **** }
 8625              		.loc 1 819 9 view .LVU2279
 8626 000c 02A8     		add	r0, sp, #8
 8627              	.LVL602:
 819:src/xeq.c     **** }
 8628              		.loc 1 819 9 view .LVU2280
 8629              	.LBE2005:
 8630              	.LBE2007:
 8631              	.LBE2012:
1778:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8632              		.loc 1 1778 93 view .LVU2281
 8633 000e 9046     		mov	r8, r2
 8634 0010 1E46     		mov	r6, r3
 8635 0012 2C9F     		ldr	r7, [sp, #176]
 8636              	.LBB2013:
 8637              	.LBB2008:
 8638              	.LBB2006:
 819:src/xeq.c     **** }
 8639              		.loc 1 819 9 view .LVU2282
 8640 0014 FFF7FEFF 		bl	getRegister
 8641              	.LVL603:
 819:src/xeq.c     **** }
 8642              		.loc 1 819 9 view .LVU2283
 8643              	.LBE2006:
 8644              	.LBE2008:
 8645              	.LBE2013:
 850:src/xeq.c     **** }
 8646              		.loc 1 850 2 is_stmt 1 view .LVU2284
 8647              	.LBB2014:
 8648              	.LBB2009:
 8649              	.LBI2009:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 8650              		.loc 1 826 6 view .LVU2285
 8651              	.LBB2010:
 827:src/xeq.c     **** }
 8652              		.loc 1 827 2 view .LVU2286
 8653 0018 6521     		movs	r1, #101
 8654 001a 0BA8     		add	r0, sp, #44
 8655              	.LVL604:
 827:src/xeq.c     **** }
 8656              		.loc 1 827 2 is_stmt 0 view .LVU2287
 8657 001c FFF7FEFF 		bl	getRegister
 8658              	.LVL605:
 827:src/xeq.c     **** }
 8659              		.loc 1 827 2 view .LVU2288
 8660              	.LBE2010:
 8661              	.LBE2009:
 8662              	.LBE2014:
1782:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8663              		.loc 1 1782 2 is_stmt 1 view .LVU2289
 8664 0020 2946     		mov	r1, r5
 8665 0022 14A8     		add	r0, sp, #80
ARM GAS  /tmp/ccQQPlfu.s 			page 290


 8666              	.LVL606:
1782:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8667              		.loc 1 1782 2 is_stmt 0 view .LVU2290
 8668 0024 FFF7FEFF 		bl	getRegister
 8669              	.LVL607:
1783:src/xeq.c     **** 
 8670              		.loc 1 1783 2 is_stmt 1 view .LVU2291
 8671 0028 691C     		adds	r1, r5, #1
 8672 002a 1DA8     		add	r0, sp, #116
 8673 002c FFF7FEFF 		bl	getRegister
 8674              	.LVL608:
1785:src/xeq.c     **** 		x = y;
 8675              		.loc 1 1785 2 view .LVU2292
1785:src/xeq.c     **** 		x = y;
 8676              		.loc 1 1785 5 is_stmt 0 view .LVU2293
 8677 0030 47B1     		cbz	r7, .L668
1787:src/xeq.c     **** 	}
 8678              		.loc 1 1787 5 view .LVU2294
 8679 0032 02AA     		add	r2, sp, #8
 8680              	.LVL609:
1786:src/xeq.c     **** 		y = a;
 8681              		.loc 1 1786 5 view .LVU2295
 8682 0034 14A9     		add	r1, sp, #80
 8683              	.LVL610:
 8684              	.L661:
1790:src/xeq.c     **** 	case 1:
 8685              		.loc 1 1790 2 is_stmt 1 view .LVU2296
 8686 0036 601E     		subs	r0, r4, #1
 8687 0038 0328     		cmp	r0, #3
 8688 003a 3ED8     		bhi	.L669
 8689 003c DFE800F0 		tbb	[pc, r0]
 8690              	.L664:
 8691 0040 13       		.byte	(.L667-.L664)/2
 8692 0041 21       		.byte	(.L666-.L664)/2
 8693 0042 2F       		.byte	(.L665-.L664)/2
 8694 0043 05       		.byte	(.L663-.L664)/2
 8695              	.LVL611:
 8696              		.p2align 1
 8697              	.L668:
1779:src/xeq.c     **** 
 8698              		.loc 1 1779 33 is_stmt 0 view .LVU2297
 8699 0044 14AA     		add	r2, sp, #80
 8700              	.LVL612:
1779:src/xeq.c     **** 
 8701              		.loc 1 1779 25 view .LVU2298
 8702 0046 02A9     		add	r1, sp, #8
 8703              	.LVL613:
1779:src/xeq.c     **** 
 8704              		.loc 1 1779 25 view .LVU2299
 8705 0048 F5E7     		b	.L661
 8706              	.L663:
1801:src/xeq.c     **** 		break;
 8707              		.loc 1 1801 3 is_stmt 1 view .LVU2300
1801:src/xeq.c     **** 		break;
 8708              		.loc 1 1801 46 is_stmt 0 view .LVU2301
 8709 004a 01F12403 		add	r3, r1, #36
1801:src/xeq.c     **** 		break;
ARM GAS  /tmp/ccQQPlfu.s 			page 291


 8710              		.loc 1 1801 3 view .LVU2302
 8711 004e CDE90013 		strd	r1, r3, [sp]
 8712 0052 4046     		mov	r0, r8
 8713 0054 3146     		mov	r1, r6
 8714              	.LVL614:
1801:src/xeq.c     **** 		break;
 8715              		.loc 1 1801 3 view .LVU2303
 8716 0056 02F12403 		add	r3, r2, #36
 8717 005a FFF7FEFF 		bl	cmplxDivide
 8718              	.LVL615:
1802:src/xeq.c     **** 	default:
 8719              		.loc 1 1802 3 is_stmt 1 view .LVU2304
1806:src/xeq.c     **** }
 8720              		.loc 1 1806 9 is_stmt 0 view .LVU2305
 8721 005e 0020     		movs	r0, #0
 8722              	.L660:
1807:src/xeq.c     **** 
 8723              		.loc 1 1807 1 view .LVU2306
 8724 0060 26B0     		add	sp, sp, #152
 8725              		.cfi_remember_state
 8726              		.cfi_def_cfa_offset 24
 8727              		@ sp needed
 8728 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8729              	.LVL616:
 8730              	.L667:
 8731              		.cfi_restore_state
1792:src/xeq.c     **** 		break;
 8732              		.loc 1 1792 3 is_stmt 1 view .LVU2307
1792:src/xeq.c     **** 		break;
 8733              		.loc 1 1792 43 is_stmt 0 view .LVU2308
 8734 0066 01F12403 		add	r3, r1, #36
1792:src/xeq.c     **** 		break;
 8735              		.loc 1 1792 3 view .LVU2309
 8736 006a CDE90013 		strd	r1, r3, [sp]
 8737 006e 4046     		mov	r0, r8
 8738 0070 3146     		mov	r1, r6
 8739              	.LVL617:
1792:src/xeq.c     **** 		break;
 8740              		.loc 1 1792 3 view .LVU2310
 8741 0072 02F12403 		add	r3, r2, #36
 8742 0076 FFF7FEFF 		bl	cmplxAdd
 8743              	.LVL618:
1793:src/xeq.c     **** 	case 2:
 8744              		.loc 1 1793 3 is_stmt 1 view .LVU2311
1806:src/xeq.c     **** }
 8745              		.loc 1 1806 9 is_stmt 0 view .LVU2312
 8746 007a 0020     		movs	r0, #0
1807:src/xeq.c     **** 
 8747              		.loc 1 1807 1 view .LVU2313
 8748 007c 26B0     		add	sp, sp, #152
 8749              		.cfi_remember_state
 8750              		.cfi_def_cfa_offset 24
 8751              		@ sp needed
 8752 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8753              	.LVL619:
 8754              	.L666:
 8755              		.cfi_restore_state
ARM GAS  /tmp/ccQQPlfu.s 			page 292


1795:src/xeq.c     **** 		break;
 8756              		.loc 1 1795 3 is_stmt 1 view .LVU2314
1795:src/xeq.c     **** 		break;
 8757              		.loc 1 1795 48 is_stmt 0 view .LVU2315
 8758 0082 01F12403 		add	r3, r1, #36
1795:src/xeq.c     **** 		break;
 8759              		.loc 1 1795 3 view .LVU2316
 8760 0086 CDE90013 		strd	r1, r3, [sp]
 8761 008a 4046     		mov	r0, r8
 8762 008c 3146     		mov	r1, r6
 8763              	.LVL620:
1795:src/xeq.c     **** 		break;
 8764              		.loc 1 1795 3 view .LVU2317
 8765 008e 02F12403 		add	r3, r2, #36
 8766 0092 FFF7FEFF 		bl	cmplxSubtract
 8767              	.LVL621:
1796:src/xeq.c     **** 	case 3:
 8768              		.loc 1 1796 3 is_stmt 1 view .LVU2318
1806:src/xeq.c     **** }
 8769              		.loc 1 1806 9 is_stmt 0 view .LVU2319
 8770 0096 0020     		movs	r0, #0
1807:src/xeq.c     **** 
 8771              		.loc 1 1807 1 view .LVU2320
 8772 0098 26B0     		add	sp, sp, #152
 8773              		.cfi_remember_state
 8774              		.cfi_def_cfa_offset 24
 8775              		@ sp needed
 8776 009a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8777              	.LVL622:
 8778              	.L665:
 8779              		.cfi_restore_state
1798:src/xeq.c     **** 		break;
 8780              		.loc 1 1798 3 is_stmt 1 view .LVU2321
1798:src/xeq.c     **** 		break;
 8781              		.loc 1 1798 48 is_stmt 0 view .LVU2322
 8782 009e 01F12403 		add	r3, r1, #36
1798:src/xeq.c     **** 		break;
 8783              		.loc 1 1798 3 view .LVU2323
 8784 00a2 CDE90013 		strd	r1, r3, [sp]
 8785 00a6 4046     		mov	r0, r8
 8786 00a8 3146     		mov	r1, r6
 8787              	.LVL623:
1798:src/xeq.c     **** 		break;
 8788              		.loc 1 1798 3 view .LVU2324
 8789 00aa 02F12403 		add	r3, r2, #36
 8790 00ae FFF7FEFF 		bl	cmplxMultiply
 8791              	.LVL624:
1799:src/xeq.c     **** 	case 4:
 8792              		.loc 1 1799 3 is_stmt 1 view .LVU2325
1806:src/xeq.c     **** }
 8793              		.loc 1 1806 9 is_stmt 0 view .LVU2326
 8794 00b2 0020     		movs	r0, #0
1807:src/xeq.c     **** 
 8795              		.loc 1 1807 1 view .LVU2327
 8796 00b4 26B0     		add	sp, sp, #152
 8797              		.cfi_def_cfa_offset 24
 8798              		@ sp needed
ARM GAS  /tmp/ccQQPlfu.s 			page 293


 8799 00b6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8800              	.LVL625:
 8801              	.L669:
1806:src/xeq.c     **** }
 8802              		.loc 1 1806 9 view .LVU2328
 8803 00ba 0120     		movs	r0, #1
 8804 00bc D0E7     		b	.L660
 8805              		.cfi_endproc
 8806              	.LFE120:
 8808 00be 00BF     		.section	.text.cpx_enter,"ax",%progbits
 8809              		.align	1
 8810              		.p2align 2,,3
 8811              		.global	cpx_enter
 8812              		.syntax unified
 8813              		.thumb
 8814              		.thumb_func
 8815              		.fpu fpv4-sp-d16
 8817              	cpx_enter:
 8818              	.LVL626:
 8819              	.LFB74:
 915:src/xeq.c     ****   if( (State2.state_lift || (XromRunning || Running)) && ENTRY_RPN_ENABLED ) { // flag is zero if e
 8820              		.loc 1 915 31 is_stmt 1 view -0
 8821              		.cfi_startproc
 8822              		@ args = 0, pretend = 0, frame = 0
 8823              		@ frame_needed = 0, uses_anonymous_args = 0
 916:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 8824              		.loc 1 916 3 view .LVU2330
 924:src/xeq.c     ****     lift();
 8825              		.loc 1 924 5 view .LVU2331
 915:src/xeq.c     ****   if( (State2.state_lift || (XromRunning || Running)) && ENTRY_RPN_ENABLED ) { // flag is zero if e
 8826              		.loc 1 915 31 is_stmt 0 view .LVU2332
 8827 0000 70B5     		push	{r4, r5, r6, lr}
 8828              		.cfi_def_cfa_offset 16
 8829              		.cfi_offset 4, -16
 8830              		.cfi_offset 5, -12
 8831              		.cfi_offset 6, -8
 8832              		.cfi_offset 14, -4
 924:src/xeq.c     ****     lift();
 8833              		.loc 1 924 5 view .LVU2333
 8834 0002 FFF7FEFF 		bl	lift
 8835              	.LVL627:
 925:src/xeq.c     ****     copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 8836              		.loc 1 925 5 is_stmt 1 view .LVU2334
 8837 0006 FFF7FEFF 		bl	lift
 8838              	.LVL628:
 926:src/xeq.c     ****     set_was_complex();
 8839              		.loc 1 926 5 view .LVU2335
 8840 000a 6520     		movs	r0, #101
 8841 000c FFF7FEFF 		bl	get_reg_n
 8842              	.LVL629:
 916:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 8843              		.loc 1 916 55 is_stmt 0 view .LVU2336
 8844 0010 0D4D     		ldr	r5, .L685
 916:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 8845              		.loc 1 916 8 view .LVU2337
 8846 0012 0E4C     		ldr	r4, .L685+4
 926:src/xeq.c     ****     set_was_complex();
ARM GAS  /tmp/ccQQPlfu.s 			page 294


 8847              		.loc 1 926 5 view .LVU2338
 8848 0014 0646     		mov	r6, r0
 926:src/xeq.c     ****     set_was_complex();
 8849              		.loc 1 926 34 view .LVU2339
 8850 0016 6720     		movs	r0, #103
 8851 0018 FFF7FEFF 		bl	get_reg_n
 8852              	.LVL630:
 8853              	.LBB2015:
 8854              	.LBB2016:
 8855              	.LBB2017:
 8856              	.LBB2018:
1113:src/xeq.c     **** }
 8857              		.loc 1 1113 24 view .LVU2340
 8858 001c 2B68     		ldr	r3, [r5]
 8859 001e B3F8E827 		ldrh	r2, [r3, #2024]
 8860 0022 44F20103 		movw	r3, #16385
 8861              	.LBE2018:
 8862              	.LBE2017:
 721:src/xeq.c     **** }
 8863              		.loc 1 721 2 view .LVU2341
 8864 0026 1340     		ands	r3, r3, r2
 8865 0028 B3F5804F 		cmp	r3, #16384
 8866              	.LBE2016:
 8867              	.LBE2015:
 926:src/xeq.c     ****     set_was_complex();
 8868              		.loc 1 926 34 view .LVU2342
 8869 002c 0146     		mov	r1, r0
 8870              	.LVL631:
 8871              	.LBB2022:
 8872              	.LBI2015:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 8873              		.loc 1 720 6 is_stmt 1 view .LVU2343
 8874              	.LBB2021:
 721:src/xeq.c     **** }
 8875              		.loc 1 721 2 view .LVU2344
 8876              	.LBB2020:
 8877              	.LBI2017:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 8878              		.loc 1 1112 5 view .LVU2345
 8879              	.LBB2019:
1113:src/xeq.c     **** }
 8880              		.loc 1 1113 2 view .LVU2346
 8881              	.LBE2019:
 8882              	.LBE2020:
 721:src/xeq.c     **** }
 8883              		.loc 1 721 2 is_stmt 0 view .LVU2347
 8884 002e 0CBF     		ite	eq
 8885 0030 1022     		moveq	r2, #16
 8886 0032 0822     		movne	r2, #8
 8887 0034 3046     		mov	r0, r6
 8888              	.LVL632:
 721:src/xeq.c     **** }
 8889              		.loc 1 721 2 view .LVU2348
 8890 0036 FFF7FEFF 		bl	xcopy
 8891              	.LVL633:
 721:src/xeq.c     **** }
 8892              		.loc 1 721 2 view .LVU2349
ARM GAS  /tmp/ccQQPlfu.s 			page 295


 8893              	.LBE2021:
 8894              	.LBE2022:
 927:src/xeq.c     ****   }
 8895              		.loc 1 927 5 is_stmt 1 view .LVU2350
 8896              	.LBB2023:
 8897              	.LBI2023:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 8898              		.loc 1 533 13 view .LVU2351
 8899              	.LBB2024:
 534:src/xeq.c     **** }
 8900              		.loc 1 534 2 view .LVU2352
 534:src/xeq.c     **** }
 8901              		.loc 1 534 20 is_stmt 0 view .LVU2353
 8902 003a 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 8903 003c 0122     		movs	r2, #1
 8904 003e 62F38713 		bfi	r3, r2, #6, #2
 8905 0042 2375     		strb	r3, [r4, #20]
 8906              	.LBE2024:
 8907              	.LBE2023:
 929:src/xeq.c     **** 
 8908              		.loc 1 929 1 view .LVU2354
 8909 0044 70BD     		pop	{r4, r5, r6, pc}
 8910              	.L686:
 8911 0046 00BF     		.align	2
 8912              	.L685:
 8913 0048 00000000 		.word	main_ram
 8914 004c 00000000 		.word	StateWhileOn
 8915              		.cfi_endproc
 8916              	.LFE74:
 8918              		.section	.text.cpx_fill,"ax",%progbits
 8919              		.align	1
 8920              		.p2align 2,,3
 8921              		.global	cpx_fill
 8922              		.syntax unified
 8923              		.thumb
 8924              		.thumb_func
 8925              		.fpu fpv4-sp-d16
 8927              	cpx_fill:
 8928              	.LVL634:
 8929              	.LFB79:
1080:src/xeq.c     **** 	const int n = stack_size();
 8930              		.loc 1 1080 30 is_stmt 1 view -0
 8931              		.cfi_startproc
 8932              		@ args = 0, pretend = 0, frame = 0
 8933              		@ frame_needed = 0, uses_anonymous_args = 0
1081:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
 8934              		.loc 1 1081 2 view .LVU2356
 8935              	.LBB2025:
 8936              	.LBI2025:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 8937              		.loc 1 706 5 view .LVU2357
 8938              	.LBB2026:
 707:src/xeq.c     **** 		return 4;
 8939              		.loc 1 707 2 view .LVU2358
 8940              	.LBE2026:
 8941              	.LBE2025:
1080:src/xeq.c     **** 	const int n = stack_size();
ARM GAS  /tmp/ccQQPlfu.s 			page 296


 8942              		.loc 1 1080 30 is_stmt 0 view .LVU2359
 8943 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 8944              		.cfi_def_cfa_offset 32
 8945              		.cfi_offset 3, -32
 8946              		.cfi_offset 4, -28
 8947              		.cfi_offset 5, -24
 8948              		.cfi_offset 6, -20
 8949              		.cfi_offset 7, -16
 8950              		.cfi_offset 8, -12
 8951              		.cfi_offset 9, -8
 8952              		.cfi_offset 14, -4
 8953              	.LBB2031:
 8954              	.LBB2029:
 707:src/xeq.c     **** 		return 4;
 8955              		.loc 1 707 8 view .LVU2360
 8956 0004 1F4D     		ldr	r5, .L700
 8957 0006 2B68     		ldr	r3, [r5]
 707:src/xeq.c     **** 		return 4;
 8958              		.loc 1 707 6 view .LVU2361
 8959 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 8960              		.loc 1 707 5 view .LVU2362
 8961 000c 1207     		lsls	r2, r2, #28
 8962 000e 37D5     		bpl	.L692
 8963              	.LBB2027:
 8964              	.LBI2027:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 8965              		.loc 1 185 5 is_stmt 1 view .LVU2363
 8966              	.LBB2028:
 186:src/xeq.c     **** }
 8967              		.loc 1 186 2 view .LVU2364
 186:src/xeq.c     **** }
 8968              		.loc 1 186 9 is_stmt 0 view .LVU2365
 8969 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 8970              	.LBE2028:
 8971              	.LBE2027:
 707:src/xeq.c     **** 		return 4;
 8972              		.loc 1 707 27 view .LVU2366
 8973 0014 9B0B     		lsrs	r3, r3, #14
 8974 0016 032B     		cmp	r3, #3
 8975 0018 2AD0     		beq	.L699
 709:src/xeq.c     **** }
 8976              		.loc 1 709 9 view .LVU2367
 8977 001a 0827     		movs	r7, #8
 8978              	.L688:
 8979              	.LVL635:
 709:src/xeq.c     **** }
 8980              		.loc 1 709 9 view .LVU2368
 8981              	.LBE2029:
 8982              	.LBE2031:
1082:src/xeq.c     **** 	int i;
 8983              		.loc 1 1082 2 is_stmt 1 view .LVU2369
1082:src/xeq.c     **** 	int i;
 8984              		.loc 1 1082 22 is_stmt 0 view .LVU2370
 8985 001c 6520     		movs	r0, #101
 8986              	.LVL636:
1082:src/xeq.c     **** 	int i;
ARM GAS  /tmp/ccQQPlfu.s 			page 297


 8987              		.loc 1 1082 22 view .LVU2371
 8988 001e FFF7FEFF 		bl	get_reg_n
 8989              	.LVL637:
1086:src/xeq.c     **** 	set_was_complex();
 8990              		.loc 1 1086 3 view .LVU2372
 8991 0022 DFF86C90 		ldr	r9, .L700+12
1082:src/xeq.c     **** 	int i;
 8992              		.loc 1 1082 22 view .LVU2373
 8993 0026 8046     		mov	r8, r0
 8994              	.LVL638:
1083:src/xeq.c     **** 
 8995              		.loc 1 1083 2 is_stmt 1 view .LVU2374
1085:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8996              		.loc 1 1085 2 view .LVU2375
1085:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8997              		.loc 1 1085 12 view .LVU2376
1085:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8998              		.loc 1 1085 8 is_stmt 0 view .LVU2377
 8999 0028 0224     		movs	r4, #2
 9000              	.LBB2032:
 9001              	.LBB2033:
 9002              	.LBB2034:
 9003              	.LBB2035:
1113:src/xeq.c     **** }
 9004              		.loc 1 1113 24 view .LVU2378
 9005 002a 44F20106 		movw	r6, #16385
 9006              	.LVL639:
 9007              	.L691:
1113:src/xeq.c     **** }
 9008              		.loc 1 1113 24 view .LVU2379
 9009              	.LBE2035:
 9010              	.LBE2034:
 9011              	.LBE2033:
 9012              	.LBE2032:
1086:src/xeq.c     **** 	set_was_complex();
 9013              		.loc 1 1086 3 is_stmt 1 view .LVU2380
 9014              	.LBB2046:
 9015              	.LBI2046:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 9016              		.loc 1 712 11 view .LVU2381
 9017              	.LBB2047:
 713:src/xeq.c     **** }
 9018              		.loc 1 713 2 view .LVU2382
 713:src/xeq.c     **** }
 9019              		.loc 1 713 9 is_stmt 0 view .LVU2383
 9020 002e 04F16400 		add	r0, r4, #100
 9021 0032 FFF7FEFF 		bl	get_reg_n
 9022              	.LVL640:
 713:src/xeq.c     **** }
 9023              		.loc 1 713 9 view .LVU2384
 9024              	.LBE2047:
 9025              	.LBE2046:
1086:src/xeq.c     **** 	set_was_complex();
 9026              		.loc 1 1086 3 view .LVU2385
 9027 0036 E307     		lsls	r3, r4, #31
 9028              	.LBB2048:
 9029              	.LBB2042:
ARM GAS  /tmp/ccQQPlfu.s 			page 298


 9030              	.LBB2039:
 9031              	.LBB2036:
1113:src/xeq.c     **** }
 9032              		.loc 1 1113 24 view .LVU2386
 9033 0038 2B68     		ldr	r3, [r5]
 9034              	.LBE2036:
 9035              	.LBE2039:
 9036              	.LBE2042:
 9037              	.LBE2048:
1086:src/xeq.c     **** 	set_was_complex();
 9038              		.loc 1 1086 3 view .LVU2387
 9039 003a 58BF     		it	pl
 9040 003c D9F80010 		ldrpl	r1, [r9]
 9041              	.LBB2049:
 9042              	.LBB2043:
 9043              	.LBB2040:
 9044              	.LBB2037:
1113:src/xeq.c     **** }
 9045              		.loc 1 1113 24 view .LVU2388
 9046 0040 B3F8E837 		ldrh	r3, [r3, #2024]
 9047              	.LBE2037:
 9048              	.LBE2040:
 721:src/xeq.c     **** }
 9049              		.loc 1 721 2 view .LVU2389
 9050 0044 03EA0603 		and	r3, r3, r6
 9051              	.LBE2043:
 9052              	.LBE2049:
1086:src/xeq.c     **** 	set_was_complex();
 9053              		.loc 1 1086 3 view .LVU2390
 9054 0048 48BF     		it	mi
 9055 004a 4146     		movmi	r1, r8
 9056              	.LVL641:
 9057              	.LBB2050:
 9058              	.LBI2032:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 9059              		.loc 1 720 6 is_stmt 1 view .LVU2391
 9060              	.LBB2044:
 721:src/xeq.c     **** }
 9061              		.loc 1 721 2 view .LVU2392
 9062              	.LBB2041:
 9063              	.LBI2034:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 9064              		.loc 1 1112 5 view .LVU2393
 9065              	.LBB2038:
1113:src/xeq.c     **** }
 9066              		.loc 1 1113 2 view .LVU2394
 9067              	.LBE2038:
 9068              	.LBE2041:
 721:src/xeq.c     **** }
 9069              		.loc 1 721 2 is_stmt 0 view .LVU2395
 9070 004c B3F5804F 		cmp	r3, #16384
 9071 0050 0CBF     		ite	eq
 9072 0052 1022     		moveq	r2, #16
 9073 0054 0822     		movne	r2, #8
 9074              	.LBE2044:
 9075              	.LBE2050:
1085:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
ARM GAS  /tmp/ccQQPlfu.s 			page 299


 9076              		.loc 1 1085 18 view .LVU2396
 9077 0056 0134     		adds	r4, r4, #1
 9078              	.LVL642:
 9079              	.LBB2051:
 9080              	.LBB2045:
 721:src/xeq.c     **** }
 9081              		.loc 1 721 2 view .LVU2397
 9082 0058 FFF7FEFF 		bl	xcopy
 9083              	.LVL643:
 721:src/xeq.c     **** }
 9084              		.loc 1 721 2 view .LVU2398
 9085              	.LBE2045:
 9086              	.LBE2051:
1085:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9087              		.loc 1 1085 17 is_stmt 1 view .LVU2399
1085:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9088              		.loc 1 1085 12 view .LVU2400
1085:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9089              		.loc 1 1085 2 is_stmt 0 view .LVU2401
 9090 005c BC42     		cmp	r4, r7
 9091 005e E6D1     		bne	.L691
1087:src/xeq.c     **** }
 9092              		.loc 1 1087 2 is_stmt 1 view .LVU2402
 9093              	.LBB2052:
 9094              	.LBI2052:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 9095              		.loc 1 533 13 view .LVU2403
 9096              	.LBB2053:
 534:src/xeq.c     **** }
 9097              		.loc 1 534 2 view .LVU2404
 534:src/xeq.c     **** }
 9098              		.loc 1 534 20 is_stmt 0 view .LVU2405
 9099 0060 094B     		ldr	r3, .L700+4
 9100 0062 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 9101 0064 0121     		movs	r1, #1
 9102 0066 61F38712 		bfi	r2, r1, #6, #2
 9103 006a 1A75     		strb	r2, [r3, #20]
 9104              	.LBE2053:
 9105              	.LBE2052:
1088:src/xeq.c     **** 
 9106              		.loc 1 1088 1 view .LVU2406
 9107 006c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9108              	.LVL644:
 9109              	.L699:
 9110              	.LBB2054:
 9111              	.LBB2030:
 707:src/xeq.c     **** 		return 4;
 9112              		.loc 1 707 44 view .LVU2407
 9113 0070 064B     		ldr	r3, .L700+8
 707:src/xeq.c     **** 		return 4;
 9114              		.loc 1 707 41 view .LVU2408
 9115 0072 93F90130 		ldrsb	r3, [r3, #1]
 708:src/xeq.c     **** 	return 8;
 9116              		.loc 1 708 10 view .LVU2409
 9117 0076 002B     		cmp	r3, #0
 9118 0078 B4BF     		ite	lt
 9119 007a 0827     		movlt	r7, #8
ARM GAS  /tmp/ccQQPlfu.s 			page 300


 9120 007c 0427     		movge	r7, #4
 9121 007e CDE7     		b	.L688
 9122              	.L692:
 9123 0080 0427     		movs	r7, #4
 9124 0082 CBE7     		b	.L688
 9125              	.L701:
 9126              		.align	2
 9127              	.L700:
 9128 0084 00000000 		.word	main_ram
 9129 0088 00000000 		.word	StateWhileOn
 9130 008c 00000000 		.word	XromParams
 9131 0090 00000000 		.word	StackBase
 9132              	.LBE2030:
 9133              	.LBE2054:
 9134              		.cfi_endproc
 9135              	.LFE79:
 9137              		.section	.text.setRegister,"ax",%progbits
 9138              		.align	1
 9139              		.p2align 2,,3
 9140              		.global	setRegister
 9141              		.syntax unified
 9142              		.thumb
 9143              		.thumb_func
 9144              		.fpu fpv4-sp-d16
 9146              	setRegister:
 9147              	.LVL645:
 9148              	.LFB58:
 805:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9149              		.loc 1 805 49 is_stmt 1 view -0
 9150              		.cfi_startproc
 9151              		@ args = 0, pretend = 0, frame = 40
 9152              		@ frame_needed = 0, uses_anonymous_args = 0
 806:src/xeq.c     **** 	decNumber dn;
 9153              		.loc 1 806 2 view .LVU2411
 805:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9154              		.loc 1 805 49 is_stmt 0 view .LVU2412
 9155 0000 30B5     		push	{r4, r5, lr}
 9156              		.cfi_def_cfa_offset 12
 9157              		.cfi_offset 4, -12
 9158              		.cfi_offset 5, -8
 9159              		.cfi_offset 14, -4
 9160 0002 8BB0     		sub	sp, sp, #44
 9161              		.cfi_def_cfa_offset 56
 805:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9162              		.loc 1 805 49 view .LVU2413
 9163 0004 0C46     		mov	r4, r1
 806:src/xeq.c     **** 	decNumber dn;
 9164              		.loc 1 806 24 view .LVU2414
 9165 0006 FFF7FEFF 		bl	get_reg_n
 9166              	.LVL646:
 806:src/xeq.c     **** 	decNumber dn;
 9167              		.loc 1 806 24 view .LVU2415
 9168 000a 0546     		mov	r5, r0
 809:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9169              		.loc 1 809 8 view .LVU2416
 9170 000c 2046     		mov	r0, r4
 9171              	.LVL647:
ARM GAS  /tmp/ccQQPlfu.s 			page 301


 807:src/xeq.c     **** 
 9172              		.loc 1 807 2 is_stmt 1 view .LVU2417
 809:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9173              		.loc 1 809 2 view .LVU2418
 809:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9174              		.loc 1 809 8 is_stmt 0 view .LVU2419
 9175 000e FFF7FEFF 		bl	check_special
 9176              	.LVL648:
 809:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9177              		.loc 1 809 5 view .LVU2420
 9178 0012 08B1     		cbz	r0, .L706
 816:src/xeq.c     **** 
 9179              		.loc 1 816 1 view .LVU2421
 9180 0014 0BB0     		add	sp, sp, #44
 9181              		.cfi_remember_state
 9182              		.cfi_def_cfa_offset 12
 9183              		@ sp needed
 9184 0016 30BD     		pop	{r4, r5, pc}
 9185              	.LVL649:
 9186              	.L706:
 9187              		.cfi_restore_state
 810:src/xeq.c     **** 		if (is_dblmode())
 9188              		.loc 1 810 3 is_stmt 1 view .LVU2422
 9189 0018 0C4A     		ldr	r2, .L708
 9190 001a 2146     		mov	r1, r4
 9191 001c 01A8     		add	r0, sp, #4
 9192 001e FFF7FEFF 		bl	decNumberNormalize
 9193              	.LVL650:
 811:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9194              		.loc 1 811 3 view .LVU2423
 9195              	.LBB2055:
 9196              	.LBI2055:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 9197              		.loc 1 1112 5 view .LVU2424
 9198              	.LBB2056:
1113:src/xeq.c     **** }
 9199              		.loc 1 1113 2 view .LVU2425
1113:src/xeq.c     **** }
 9200              		.loc 1 1113 24 is_stmt 0 view .LVU2426
 9201 0022 0B4B     		ldr	r3, .L708+4
 9202 0024 1B68     		ldr	r3, [r3]
 9203 0026 B3F8E827 		ldrh	r2, [r3, #2024]
 9204 002a 44F20103 		movw	r3, #16385
 9205              	.LBE2056:
 9206              	.LBE2055:
 811:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9207              		.loc 1 811 6 view .LVU2427
 9208 002e 1340     		ands	r3, r3, r2
 9209 0030 B3F5804F 		cmp	r3, #16384
 812:src/xeq.c     **** 		else
 9210              		.loc 1 812 4 view .LVU2428
 9211 0034 01A9     		add	r1, sp, #4
 9212 0036 2846     		mov	r0, r5
 811:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9213              		.loc 1 811 6 view .LVU2429
 9214 0038 03D0     		beq	.L707
 9215              	.LVL651:
ARM GAS  /tmp/ccQQPlfu.s 			page 302


 814:src/xeq.c     **** 	}
 9216              		.loc 1 814 4 is_stmt 1 view .LVU2430
 9217 003a FFF7FEFF 		bl	packed_from_number
 9218              	.LVL652:
 816:src/xeq.c     **** 
 9219              		.loc 1 816 1 is_stmt 0 view .LVU2431
 9220 003e 0BB0     		add	sp, sp, #44
 9221              		.cfi_remember_state
 9222              		.cfi_def_cfa_offset 12
 9223              		@ sp needed
 9224 0040 30BD     		pop	{r4, r5, pc}
 9225              	.LVL653:
 9226              	.L707:
 9227              		.cfi_restore_state
 812:src/xeq.c     **** 		else
 9228              		.loc 1 812 4 is_stmt 1 view .LVU2432
 9229 0042 FFF7FEFF 		bl	packed128_from_number
 9230              	.LVL654:
 816:src/xeq.c     **** 
 9231              		.loc 1 816 1 is_stmt 0 view .LVU2433
 9232 0046 0BB0     		add	sp, sp, #44
 9233              		.cfi_def_cfa_offset 12
 9234              		@ sp needed
 9235 0048 30BD     		pop	{r4, r5, pc}
 9236              	.LVL655:
 9237              	.L709:
 816:src/xeq.c     **** 
 9238              		.loc 1 816 1 view .LVU2434
 9239 004a 00BF     		.align	2
 9240              	.L708:
 9241 004c 00000000 		.word	Ctx
 9242 0050 00000000 		.word	main_ram
 9243              		.cfi_endproc
 9244              	.LFE58:
 9246              		.section	.text.setX,"ax",%progbits
 9247              		.align	1
 9248              		.p2align 2,,3
 9249              		.global	setX
 9250              		.syntax unified
 9251              		.thumb
 9252              		.thumb_func
 9253              		.fpu fpv4-sp-d16
 9255              	setX:
 9256              	.LVL656:
 9257              	.LFB60:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 9258              		.loc 1 822 31 is_stmt 1 view -0
 9259              		.cfi_startproc
 9260              		@ args = 0, pretend = 0, frame = 0
 9261              		@ frame_needed = 0, uses_anonymous_args = 0
 9262              		@ link register save eliminated.
 823:src/xeq.c     **** }
 9263              		.loc 1 823 2 view .LVU2436
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 9264              		.loc 1 822 31 is_stmt 0 view .LVU2437
 9265 0000 0146     		mov	r1, r0
 823:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 303


 9266              		.loc 1 823 2 view .LVU2438
 9267 0002 6420     		movs	r0, #100
 9268              	.LVL657:
 823:src/xeq.c     **** }
 9269              		.loc 1 823 2 view .LVU2439
 9270 0004 FFF7FEBF 		b	setRegister
 9271              	.LVL658:
 823:src/xeq.c     **** }
 9272              		.loc 1 823 2 view .LVU2440
 9273              		.cfi_endproc
 9274              	.LFE60:
 9276              		.section	.text.rarg_round,"ax",%progbits
 9277              		.align	1
 9278              		.p2align 2,,3
 9279              		.global	rarg_round
 9280              		.syntax unified
 9281              		.thumb
 9282              		.thumb_func
 9283              		.fpu fpv4-sp-d16
 9285              	rarg_round:
 9286              	.LVL659:
 9287              	.LFB40:
 656:src/xeq.c     **** 	decNumber res, x;
 9288              		.loc 1 656 49 is_stmt 1 view -0
 9289              		.cfi_startproc
 9290              		@ args = 0, pretend = 0, frame = 80
 9291              		@ frame_needed = 0, uses_anonymous_args = 0
 657:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 9292              		.loc 1 657 2 view .LVU2442
 658:src/xeq.c     **** 
 9293              		.loc 1 658 2 view .LVU2443
 9294              	.LBB2069:
 9295              	.LBI2069:
 604:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 9296              		.loc 1 604 22 view .LVU2444
 9297              	.LBB2070:
 605:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 9298              		.loc 1 605 2 view .LVU2445
 610:src/xeq.c     **** }
 9299              		.loc 1 610 2 view .LVU2446
 610:src/xeq.c     **** }
 9300              		.loc 1 610 31 is_stmt 0 view .LVU2447
 9301 0000 184B     		ldr	r3, .L719
 9302              	.LBE2070:
 9303              	.LBE2069:
 656:src/xeq.c     **** 	decNumber res, x;
 9304              		.loc 1 656 49 view .LVU2448
 9305 0002 70B5     		push	{r4, r5, r6, lr}
 9306              		.cfi_def_cfa_offset 16
 9307              		.cfi_offset 4, -16
 9308              		.cfi_offset 5, -12
 9309              		.cfi_offset 6, -8
 9310              		.cfi_offset 14, -4
 9311              	.LBB2073:
 9312              	.LBB2071:
 610:src/xeq.c     **** }
 9313              		.loc 1 610 31 view .LVU2449
ARM GAS  /tmp/ccQQPlfu.s 			page 304


 9314 0004 1B68     		ldr	r3, [r3]
 9315              	.LVL660:
 610:src/xeq.c     **** }
 9316              		.loc 1 610 31 view .LVU2450
 9317              	.LBE2071:
 9318              	.LBE2073:
 660:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9319              		.loc 1 660 2 is_stmt 1 view .LVU2451
 660:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9320              		.loc 1 660 6 is_stmt 0 view .LVU2452
 9321 0006 93F8E857 		ldrb	r5, [r3, #2024]	@ zero_extendqisi2
 660:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9322              		.loc 1 660 5 view .LVU2453
 9323 000a EA07     		lsls	r2, r5, #31
 656:src/xeq.c     **** 	decNumber res, x;
 9324              		.loc 1 656 49 view .LVU2454
 9325 000c 94B0     		sub	sp, sp, #80
 9326              		.cfi_def_cfa_offset 96
 660:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9327              		.loc 1 660 5 view .LVU2455
 9328 000e 06D5     		bpl	.L712
 661:src/xeq.c     **** 		return;
 9329              		.loc 1 661 3 is_stmt 1 view .LVU2456
 9330              	.LVL661:
 9331              	.LBB2074:
 9332              	.LBI2074:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9333              		.loc 1 540 5 view .LVU2457
 9334              	.LBB2075:
 541:src/xeq.c     **** 		Error = e;
 9335              		.loc 1 541 2 view .LVU2458
 541:src/xeq.c     **** 		Error = e;
 9336              		.loc 1 541 12 is_stmt 0 view .LVU2459
 9337 0010 154B     		ldr	r3, .L719+4
 9338              	.LVL662:
 541:src/xeq.c     **** 		Error = e;
 9339              		.loc 1 541 5 view .LVU2460
 9340 0012 1A68     		ldr	r2, [r3]
 9341 0014 0AB9     		cbnz	r2, .L711
 9342              	.LVL663:
 9343              	.LBB2076:
 9344              	.LBI2076:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9345              		.loc 1 540 5 is_stmt 1 view .LVU2461
 9346              	.LBB2077:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 9347              		.loc 1 542 3 view .LVU2462
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 9348              		.loc 1 542 9 is_stmt 0 view .LVU2463
 9349 0016 0D22     		movs	r2, #13
 9350 0018 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 9351              		.loc 1 543 3 is_stmt 1 view .LVU2464
 9352              	.LVL664:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 9353              		.loc 1 543 3 is_stmt 0 view .LVU2465
 9354              	.LBE2077:
ARM GAS  /tmp/ccQQPlfu.s 			page 305


 9355              	.LBE2076:
 9356              	.LBE2075:
 9357              	.LBE2074:
 662:src/xeq.c     **** 	}
 9358              		.loc 1 662 3 is_stmt 1 view .LVU2466
 9359              	.L711:
 672:src/xeq.c     **** 
 9360              		.loc 1 672 1 is_stmt 0 view .LVU2467
 9361 001a 14B0     		add	sp, sp, #80
 9362              		.cfi_remember_state
 9363              		.cfi_def_cfa_offset 16
 9364              		@ sp needed
 9365 001c 70BD     		pop	{r4, r5, r6, pc}
 9366              	.LVL665:
 9367              	.L712:
 9368              		.cfi_restore_state
 9369              	.LBB2078:
 9370              	.LBB2072:
 610:src/xeq.c     **** }
 9371              		.loc 1 610 37 view .LVU2468
 9372 001e 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 9373              	.LVL666:
 610:src/xeq.c     **** }
 9374              		.loc 1 610 9 view .LVU2469
 9375 0022 124A     		ldr	r2, .L719+8
 610:src/xeq.c     **** }
 9376              		.loc 1 610 37 view .LVU2470
 9377 0024 C3F30213 		ubfx	r3, r3, #4, #3
 9378 0028 0C46     		mov	r4, r1
 610:src/xeq.c     **** }
 9379              		.loc 1 610 9 view .LVU2471
 9380 002a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9381 002c 0193     		str	r3, [sp, #4]
 9382              	.LBE2072:
 9383              	.LBE2078:
 665:src/xeq.c     **** 	getX(&x);
 9384              		.loc 1 665 2 is_stmt 1 view .LVU2472
 9385              	.LBB2079:
 9386              	.LBI2079:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 9387              		.loc 1 786 6 view .LVU2473
 9388              	.LBB2080:
 787:src/xeq.c     **** }
 9389              		.loc 1 787 2 view .LVU2474
 9390 002e 0646     		mov	r6, r0
 9391 0030 6421     		movs	r1, #100
 9392              	.LVL667:
 787:src/xeq.c     **** }
 9393              		.loc 1 787 2 is_stmt 0 view .LVU2475
 9394 0032 6C20     		movs	r0, #108
 9395              	.LVL668:
 787:src/xeq.c     **** }
 9396              		.loc 1 787 2 view .LVU2476
 9397 0034 FFF7FEFF 		bl	copyreg_n
 9398              	.LVL669:
 787:src/xeq.c     **** }
 9399              		.loc 1 787 2 view .LVU2477
ARM GAS  /tmp/ccQQPlfu.s 			page 306


 9400              	.LBE2080:
 9401              	.LBE2079:
 666:src/xeq.c     **** 	if (op == RARG_ROUND)
 9402              		.loc 1 666 2 is_stmt 1 view .LVU2478
 9403              	.LBB2081:
 9404              	.LBI2081:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 9405              		.loc 1 818 12 view .LVU2479
 9406              	.LBB2082:
 819:src/xeq.c     **** }
 9407              		.loc 1 819 2 view .LVU2480
 819:src/xeq.c     **** }
 9408              		.loc 1 819 9 is_stmt 0 view .LVU2481
 9409 0038 6421     		movs	r1, #100
 9410 003a 0BA8     		add	r0, sp, #44
 9411              	.LVL670:
 819:src/xeq.c     **** }
 9412              		.loc 1 819 9 view .LVU2482
 9413 003c FFF7FEFF 		bl	getRegister
 9414              	.LVL671:
 819:src/xeq.c     **** }
 9415              		.loc 1 819 9 view .LVU2483
 9416              	.LBE2082:
 9417              	.LBE2081:
 667:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9418              		.loc 1 667 2 is_stmt 1 view .LVU2484
 667:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9419              		.loc 1 667 5 is_stmt 0 view .LVU2485
 9420 0040 752C     		cmp	r4, #117
 668:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9421              		.loc 1 668 3 view .LVU2486
 9422 0042 02AC     		add	r4, sp, #8
 667:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9423              		.loc 1 667 5 view .LVU2487
 9424 0044 019B     		ldr	r3, [sp, #4]
 668:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9425              		.loc 1 668 3 view .LVU2488
 9426 0046 3246     		mov	r2, r6
 9427 0048 0BA9     		add	r1, sp, #44
 9428 004a 2046     		mov	r0, r4
 667:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9429              		.loc 1 667 5 view .LVU2489
 9430 004c 07D0     		beq	.L718
 9431              	.LVL672:
 670:src/xeq.c     **** 	setX(&res);
 9432              		.loc 1 670 3 is_stmt 1 view .LVU2490
 9433 004e FFF7FEFF 		bl	decNumberRoundDecimals
 9434              	.LVL673:
 9435              	.L716:
 671:src/xeq.c     **** }
 9436              		.loc 1 671 2 view .LVU2491
 9437              	.LBB2083:
 9438              	.LBI2083:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 9439              		.loc 1 822 6 view .LVU2492
 9440              	.LBB2084:
 823:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 307


 9441              		.loc 1 823 2 view .LVU2493
 9442 0052 2146     		mov	r1, r4
 9443 0054 6420     		movs	r0, #100
 9444 0056 FFF7FEFF 		bl	setRegister
 9445              	.LVL674:
 823:src/xeq.c     **** }
 9446              		.loc 1 823 2 is_stmt 0 view .LVU2494
 9447              	.LBE2084:
 9448              	.LBE2083:
 672:src/xeq.c     **** 
 9449              		.loc 1 672 1 view .LVU2495
 9450 005a 14B0     		add	sp, sp, #80
 9451              		.cfi_remember_state
 9452              		.cfi_def_cfa_offset 16
 9453              		@ sp needed
 9454 005c 70BD     		pop	{r4, r5, r6, pc}
 9455              	.LVL675:
 9456              	.L718:
 9457              		.cfi_restore_state
 668:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9458              		.loc 1 668 3 is_stmt 1 view .LVU2496
 9459 005e FFF7FEFF 		bl	decNumberRoundDigits
 9460              	.LVL676:
 668:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9461              		.loc 1 668 3 is_stmt 0 view .LVU2497
 9462 0062 F6E7     		b	.L716
 9463              	.L720:
 9464              		.align	2
 9465              	.L719:
 9466 0064 00000000 		.word	main_ram
 9467 0068 00000000 		.word	Error
 9468 006c 00000000 		.word	.LANCHOR1
 9469              		.cfi_endproc
 9470              	.LFE40:
 9472              		.section	.text.setY,"ax",%progbits
 9473              		.align	1
 9474              		.p2align 2,,3
 9475              		.global	setY
 9476              		.syntax unified
 9477              		.thumb
 9478              		.thumb_func
 9479              		.fpu fpv4-sp-d16
 9481              	setY:
 9482              	.LVL677:
 9483              	.LFB62:
 830:src/xeq.c     **** 	setRegister(regY_idx, y);
 9484              		.loc 1 830 31 is_stmt 1 view -0
 9485              		.cfi_startproc
 9486              		@ args = 0, pretend = 0, frame = 0
 9487              		@ frame_needed = 0, uses_anonymous_args = 0
 9488              		@ link register save eliminated.
 831:src/xeq.c     **** }
 9489              		.loc 1 831 2 view .LVU2499
 830:src/xeq.c     **** 	setRegister(regY_idx, y);
 9490              		.loc 1 830 31 is_stmt 0 view .LVU2500
 9491 0000 0146     		mov	r1, r0
 831:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 308


 9492              		.loc 1 831 2 view .LVU2501
 9493 0002 6520     		movs	r0, #101
 9494              	.LVL678:
 831:src/xeq.c     **** }
 9495              		.loc 1 831 2 view .LVU2502
 9496 0004 FFF7FEBF 		b	setRegister
 9497              	.LVL679:
 831:src/xeq.c     **** }
 9498              		.loc 1 831 2 view .LVU2503
 9499              		.cfi_endproc
 9500              	.LFE62:
 9502              		.section	.text.setXY,"ax",%progbits
 9503              		.align	1
 9504              		.p2align 2,,3
 9505              		.global	setXY
 9506              		.syntax unified
 9507              		.thumb
 9508              		.thumb_func
 9509              		.fpu fpv4-sp-d16
 9511              	setXY:
 9512              	.LVL680:
 9513              	.LFB66:
 853:src/xeq.c     **** 	setX(x);
 9514              		.loc 1 853 52 is_stmt 1 view -0
 9515              		.cfi_startproc
 9516              		@ args = 0, pretend = 0, frame = 0
 9517              		@ frame_needed = 0, uses_anonymous_args = 0
 854:src/xeq.c     **** 	setY(y);
 9518              		.loc 1 854 2 view .LVU2505
 9519              	.LBB2085:
 9520              	.LBI2085:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 9521              		.loc 1 822 6 view .LVU2506
 9522              	.LBB2086:
 823:src/xeq.c     **** }
 9523              		.loc 1 823 2 view .LVU2507
 9524              	.LBE2086:
 9525              	.LBE2085:
 853:src/xeq.c     **** 	setX(x);
 9526              		.loc 1 853 52 is_stmt 0 view .LVU2508
 9527 0000 10B5     		push	{r4, lr}
 9528              		.cfi_def_cfa_offset 8
 9529              		.cfi_offset 4, -8
 9530              		.cfi_offset 14, -4
 853:src/xeq.c     **** 	setX(x);
 9531              		.loc 1 853 52 view .LVU2509
 9532 0002 0C46     		mov	r4, r1
 9533              	.LBB2088:
 9534              	.LBB2087:
 823:src/xeq.c     **** }
 9535              		.loc 1 823 2 view .LVU2510
 9536 0004 0146     		mov	r1, r0
 9537              	.LVL681:
 823:src/xeq.c     **** }
 9538              		.loc 1 823 2 view .LVU2511
 9539 0006 6420     		movs	r0, #100
 9540              	.LVL682:
ARM GAS  /tmp/ccQQPlfu.s 			page 309


 823:src/xeq.c     **** }
 9541              		.loc 1 823 2 view .LVU2512
 9542 0008 FFF7FEFF 		bl	setRegister
 9543              	.LVL683:
 823:src/xeq.c     **** }
 9544              		.loc 1 823 2 view .LVU2513
 9545              	.LBE2087:
 9546              	.LBE2088:
 855:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 9547              		.loc 1 855 2 is_stmt 1 view .LVU2514
 9548              	.LBB2089:
 9549              	.LBI2089:
 830:src/xeq.c     **** 	setRegister(regY_idx, y);
 9550              		.loc 1 830 6 view .LVU2515
 9551              	.LBB2090:
 831:src/xeq.c     **** }
 9552              		.loc 1 831 2 view .LVU2516
 9553 000c 2146     		mov	r1, r4
 9554 000e 6520     		movs	r0, #101
 9555 0010 FFF7FEFF 		bl	setRegister
 9556              	.LVL684:
 831:src/xeq.c     **** }
 9557              		.loc 1 831 2 is_stmt 0 view .LVU2517
 9558              	.LBE2090:
 9559              	.LBE2089:
 857:src/xeq.c     **** #endif
 9560              		.loc 1 857 2 is_stmt 1 view .LVU2518
 9561 0014 044B     		ldr	r3, .L724
 9562 0016 1A68     		ldr	r2, [r3]
 9563 0018 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 9564 001c 43F00103 		orr	r3, r3, #1
 9565 0020 82F8AD37 		strb	r3, [r2, #1965]
 859:src/xeq.c     **** 
 9566              		.loc 1 859 1 is_stmt 0 view .LVU2519
 9567 0024 10BD     		pop	{r4, pc}
 9568              	.LVL685:
 9569              	.L725:
 859:src/xeq.c     **** 
 9570              		.loc 1 859 1 view .LVU2520
 9571 0026 00BF     		.align	2
 9572              	.L724:
 9573 0028 00000000 		.word	main_ram
 9574              		.cfi_endproc
 9575              	.LFE66:
 9577              		.section	.text.convert_regK,"ax",%progbits
 9578              		.align	1
 9579              		.p2align 2,,3
 9580              		.global	convert_regK
 9581              		.syntax unified
 9582              		.thumb
 9583              		.thumb_func
 9584              		.fpu fpv4-sp-d16
 9586              	convert_regK:
 9587              	.LVL686:
 9588              	.LFB75:
 933:src/xeq.c     **** 	decNumber k;
 9589              		.loc 1 933 41 is_stmt 1 view -0
ARM GAS  /tmp/ccQQPlfu.s 			page 310


 9590              		.cfi_startproc
 9591              		@ args = 0, pretend = 0, frame = 40
 9592              		@ frame_needed = 0, uses_anonymous_args = 0
 934:src/xeq.c     **** 
 9593              		.loc 1 934 2 view .LVU2522
 936:src/xeq.c     **** 	if (i==j) return; // no mode change
 9594              		.loc 1 936 2 view .LVU2523
 9595              	.LBB2091:
 9596              	.LBI2091:
4085:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 9597              		.loc 1 4085 17 view .LVU2524
 9598              	.LBB2092:
4086:src/xeq.c     **** 		return TRIG_RAD;
 9599              		.loc 1 4086 2 view .LVU2525
 9600              	.LBE2092:
 9601              	.LBE2091:
 933:src/xeq.c     **** 	decNumber k;
 9602              		.loc 1 933 41 is_stmt 0 view .LVU2526
 9603 0000 70B5     		push	{r4, r5, r6, lr}
 9604              		.cfi_def_cfa_offset 16
 9605              		.cfi_offset 4, -16
 9606              		.cfi_offset 5, -12
 9607              		.cfi_offset 6, -8
 9608              		.cfi_offset 14, -4
 9609              	.LBB2096:
 9610              	.LBB2093:
4086:src/xeq.c     **** 		return TRIG_RAD;
 9611              		.loc 1 4086 6 view .LVU2527
 9612 0002 2A4B     		ldr	r3, .L747
 9613 0004 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
4086:src/xeq.c     **** 		return TRIG_RAD;
 9614              		.loc 1 4086 5 view .LVU2528
 9615 0006 9B07     		lsls	r3, r3, #30
 9616              	.LBE2093:
 9617              	.LBE2096:
 933:src/xeq.c     **** 	decNumber k;
 9618              		.loc 1 933 41 view .LVU2529
 9619 0008 8AB0     		sub	sp, sp, #40
 9620              		.cfi_def_cfa_offset 56
 933:src/xeq.c     **** 	decNumber k;
 9621              		.loc 1 933 41 view .LVU2530
 9622 000a 0446     		mov	r4, r0
 9623              	.LBB2097:
 9624              	.LBB2094:
4086:src/xeq.c     **** 		return TRIG_RAD;
 9625              		.loc 1 4086 5 view .LVU2531
 9626 000c 27D4     		bmi	.L730
4086:src/xeq.c     **** 		return TRIG_RAD;
 9627              		.loc 1 4086 19 view .LVU2532
 9628 000e 284B     		ldr	r3, .L747+4
 9629 0010 93F90130 		ldrsb	r3, [r3, #1]
 9630 0014 002B     		cmp	r3, #0
 9631 0016 22DB     		blt	.L730
4089:src/xeq.c     **** }
 9632              		.loc 1 4089 2 is_stmt 1 view .LVU2533
4089:src/xeq.c     **** }
 9633              		.loc 1 4089 33 is_stmt 0 view .LVU2534
ARM GAS  /tmp/ccQQPlfu.s 			page 311


 9634 0018 264B     		ldr	r3, .L747+8
 9635 001a 1B68     		ldr	r3, [r3]
 9636 001c 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 9637              	.LBE2094:
 9638              	.LBE2097:
 937:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9639              		.loc 1 937 5 view .LVU2535
 9640 0020 B0EB931F 		cmp	r0, r3, lsr #6
 9641              	.LBB2098:
 9642              	.LBB2095:
4089:src/xeq.c     **** }
 9643              		.loc 1 4089 33 view .LVU2536
 9644 0024 4FEA9316 		lsr	r6, r3, #6
 9645              	.LVL687:
4089:src/xeq.c     **** }
 9646              		.loc 1 4089 33 view .LVU2537
 9647              	.LBE2095:
 9648              	.LBE2098:
 937:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9649              		.loc 1 937 2 is_stmt 1 view .LVU2538
 937:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9650              		.loc 1 937 5 is_stmt 0 view .LVU2539
 9651 0028 17D0     		beq	.L726
 938:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9652              		.loc 1 938 2 is_stmt 1 view .LVU2540
 9653 002a 01AD     		add	r5, sp, #4
 9654 002c 2846     		mov	r0, r5
 9655              	.LVL688:
 938:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9656              		.loc 1 938 2 is_stmt 0 view .LVU2541
 9657 002e 6F21     		movs	r1, #111
 9658 0030 FFF7FEFF 		bl	getRegister
 9659              	.LVL689:
 939:src/xeq.c     **** 		case TRIG_DEG:
 9660              		.loc 1 939 2 is_stmt 1 view .LVU2542
 9661 0034 012E     		cmp	r6, #1
 9662 0036 19D0     		beq	.L729
 9663 0038 022E     		cmp	r6, #2
 9664 003a 24D0     		beq	.L733
 9665 003c 26B9     		cbnz	r6, .L734
 941:src/xeq.c     **** 			break;
 9666              		.loc 1 941 4 view .LVU2543
 9667 003e 1E4A     		ldr	r2, .L747+12
 9668 0040 2946     		mov	r1, r5
 9669 0042 2846     		mov	r0, r5
 9670 0044 FFF7FEFF 		bl	dn_divide
 9671              	.LVL690:
 942:src/xeq.c     **** 		case TRIG_RAD:
 9672              		.loc 1 942 4 view .LVU2544
 9673              	.L734:
 948:src/xeq.c     **** 	}
 9674              		.loc 1 948 11 view .LVU2545
 950:src/xeq.c     **** 		case TRIG_DEG:
 9675              		.loc 1 950 2 view .LVU2546
 9676 0048 012C     		cmp	r4, #1
 9677 004a 16D0     		beq	.L735
 9678              	.L746:
ARM GAS  /tmp/ccQQPlfu.s 			page 312


 950:src/xeq.c     **** 		case TRIG_DEG:
 9679              		.loc 1 950 2 is_stmt 0 view .LVU2547
 9680 004c 022C     		cmp	r4, #2
 9681 004e 20D0     		beq	.L736
 9682 0050 2CB3     		cbz	r4, .L745
 9683              	.L737:
 959:src/xeq.c     **** 	}
 9684              		.loc 1 959 11 is_stmt 1 view .LVU2548
 961:src/xeq.c     **** }
 9685              		.loc 1 961 2 view .LVU2549
 9686 0052 2946     		mov	r1, r5
 9687 0054 6F20     		movs	r0, #111
 9688 0056 FFF7FEFF 		bl	setRegister
 9689              	.LVL691:
 9690              	.L726:
 962:src/xeq.c     **** 
 9691              		.loc 1 962 1 is_stmt 0 view .LVU2550
 9692 005a 0AB0     		add	sp, sp, #40
 9693              		.cfi_remember_state
 9694              		.cfi_def_cfa_offset 16
 9695              		@ sp needed
 9696 005c 70BD     		pop	{r4, r5, r6, pc}
 9697              	.LVL692:
 9698              	.L730:
 9699              		.cfi_restore_state
 937:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9700              		.loc 1 937 2 is_stmt 1 view .LVU2551
 937:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9701              		.loc 1 937 5 is_stmt 0 view .LVU2552
 9702 005e 012C     		cmp	r4, #1
 9703 0060 FBD0     		beq	.L726
 938:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9704              		.loc 1 938 2 is_stmt 1 view .LVU2553
 9705 0062 01AD     		add	r5, sp, #4
 9706 0064 2846     		mov	r0, r5
 9707              	.LVL693:
 938:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9708              		.loc 1 938 2 is_stmt 0 view .LVU2554
 9709 0066 6F21     		movs	r1, #111
 9710 0068 FFF7FEFF 		bl	getRegister
 9711              	.LVL694:
 939:src/xeq.c     **** 		case TRIG_DEG:
 9712              		.loc 1 939 2 is_stmt 1 view .LVU2555
 9713              	.L729:
 944:src/xeq.c     **** 			break;
 9714              		.loc 1 944 4 view .LVU2556
 9715 006c 134A     		ldr	r2, .L747+16
 9716 006e 2946     		mov	r1, r5
 9717 0070 2846     		mov	r0, r5
 9718 0072 FFF7FEFF 		bl	dn_divide
 9719              	.LVL695:
 945:src/xeq.c     **** 		case TRIG_GRAD:
 9720              		.loc 1 945 4 view .LVU2557
 948:src/xeq.c     **** 	}
 9721              		.loc 1 948 11 view .LVU2558
 950:src/xeq.c     **** 		case TRIG_DEG:
 9722              		.loc 1 950 2 view .LVU2559
ARM GAS  /tmp/ccQQPlfu.s 			page 313


 9723 0076 012C     		cmp	r4, #1
 9724 0078 E8D1     		bne	.L746
 9725              	.L735:
 955:src/xeq.c     **** 			break;
 9726              		.loc 1 955 4 view .LVU2560
 9727 007a 104A     		ldr	r2, .L747+16
 9728 007c 2946     		mov	r1, r5
 9729 007e 2846     		mov	r0, r5
 9730 0080 FFF7FEFF 		bl	dn_multiply
 9731              	.LVL696:
 956:src/xeq.c     **** 		case TRIG_GRAD:
 9732              		.loc 1 956 4 view .LVU2561
 9733 0084 E5E7     		b	.L737
 9734              	.L733:
 947:src/xeq.c     **** 		default:;
 9735              		.loc 1 947 4 view .LVU2562
 9736 0086 0E4A     		ldr	r2, .L747+20
 9737 0088 2946     		mov	r1, r5
 9738 008a 2846     		mov	r0, r5
 9739 008c FFF7FEFF 		bl	dn_divide
 9740              	.LVL697:
 9741 0090 DAE7     		b	.L734
 9742              	.L736:
 958:src/xeq.c     **** 		default:;
 9743              		.loc 1 958 4 view .LVU2563
 9744 0092 0B4A     		ldr	r2, .L747+20
 9745 0094 2946     		mov	r1, r5
 9746 0096 2846     		mov	r0, r5
 9747 0098 FFF7FEFF 		bl	dn_multiply
 9748              	.LVL698:
 9749 009c D9E7     		b	.L737
 9750              	.L745:
 952:src/xeq.c     **** 			break;
 9751              		.loc 1 952 4 view .LVU2564
 9752 009e 064A     		ldr	r2, .L747+12
 9753 00a0 2946     		mov	r1, r5
 9754 00a2 2846     		mov	r0, r5
 9755 00a4 FFF7FEFF 		bl	dn_multiply
 9756              	.LVL699:
 953:src/xeq.c     **** 		case TRIG_RAD:
 9757              		.loc 1 953 4 view .LVU2565
 9758 00a8 D3E7     		b	.L737
 9759              	.L748:
 9760 00aa 00BF     		.align	2
 9761              	.L747:
 9762 00ac 00000000 		.word	StateWhileOn
 9763 00b0 00000000 		.word	XromParams
 9764 00b4 00000000 		.word	main_ram
 9765 00b8 00000000 		.word	const_360
 9766 00bc 00000000 		.word	const_2PI
 9767 00c0 00000000 		.word	const_400
 9768              		.cfi_endproc
 9769              	.LFE75:
 9771              		.section	.text.cpx_nop,"ax",%progbits
 9772              		.align	1
 9773              		.p2align 2,,3
 9774              		.global	cpx_nop
ARM GAS  /tmp/ccQQPlfu.s 			page 314


 9775              		.syntax unified
 9776              		.thumb
 9777              		.thumb_func
 9778              		.fpu fpv4-sp-d16
 9780              	cpx_nop:
 9781              	.LVL700:
 9782              	.LFB78:
1005:src/xeq.c     ****   reset_shift();
 9783              		.loc 1 1005 29 view -0
 9784              		.cfi_startproc
 9785              		@ args = 0, pretend = 0, frame = 40
 9786              		@ frame_needed = 0, uses_anonymous_args = 0
1006:src/xeq.c     **** 	switch (op) {
 9787              		.loc 1 1006 3 view .LVU2567
1005:src/xeq.c     ****   reset_shift();
 9788              		.loc 1 1005 29 is_stmt 0 view .LVU2568
 9789 0000 10B5     		push	{r4, lr}
 9790              		.cfi_def_cfa_offset 8
 9791              		.cfi_offset 4, -8
 9792              		.cfi_offset 14, -4
 9793 0002 0446     		mov	r4, r0
 9794 0004 8AB0     		sub	sp, sp, #40
 9795              		.cfi_def_cfa_offset 48
1006:src/xeq.c     **** 	switch (op) {
 9796              		.loc 1 1006 3 view .LVU2569
 9797 0006 FFF7FEFF 		bl	reset_shift
 9798              	.LVL701:
1007:src/xeq.c     **** 	case OP_CYES: // set flag to allow complex mode to be entered - can be called at any time
 9799              		.loc 1 1007 2 is_stmt 1 view .LVU2570
 9800 000a A4F1C100 		sub	r0, r4, #193
 9801 000e 0B28     		cmp	r0, #11
 9802 0010 13D8     		bhi	.L767
 9803 0012 DFE800F0 		tbb	[pc, r0]
 9804              	.L752:
 9805 0016 21       		.byte	(.L761-.L752)/2
 9806 0017 3B       		.byte	(.L765-.L752)/2
 9807 0018 06       		.byte	(.L759-.L752)/2
 9808 0019 59       		.byte	(.L758-.L752)/2
 9809 001a 68       		.byte	(.L757-.L752)/2
 9810 001b 70       		.byte	(.L756-.L752)/2
 9811 001c 12       		.byte	(.L767-.L752)/2
 9812 001d 12       		.byte	(.L767-.L752)/2
 9813 001e 77       		.byte	(.L755-.L752)/2
 9814 001f 80       		.byte	(.L754-.L752)/2
 9815 0020 89       		.byte	(.L753-.L752)/2
 9816 0021 94       		.byte	(.L751-.L752)/2
 9817              		.p2align 1
 9818              	.L759:
 9819              	.LBB2099:
1047:src/xeq.c     **** 		getY(&y);
 9820              		.loc 1 1047 3 view .LVU2571
1048:src/xeq.c     **** 		dn_minus(&y, &y);
 9821              		.loc 1 1048 3 view .LVU2572
 9822              	.LVL702:
 9823              	.LBB2100:
 9824              	.LBI2100:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
ARM GAS  /tmp/ccQQPlfu.s 			page 315


 9825              		.loc 1 826 6 view .LVU2573
 9826              	.LBB2101:
 827:src/xeq.c     **** }
 9827              		.loc 1 827 2 view .LVU2574
 9828 0022 6521     		movs	r1, #101
 9829 0024 01A8     		add	r0, sp, #4
 9830              	.LVL703:
 827:src/xeq.c     **** }
 9831              		.loc 1 827 2 is_stmt 0 view .LVU2575
 9832 0026 FFF7FEFF 		bl	getRegister
 9833              	.LVL704:
 827:src/xeq.c     **** }
 9834              		.loc 1 827 2 view .LVU2576
 9835              	.LBE2101:
 9836              	.LBE2100:
1049:src/xeq.c     **** 		setY(&y);
 9837              		.loc 1 1049 3 is_stmt 1 view .LVU2577
 9838 002a 01A9     		add	r1, sp, #4
 9839 002c 0846     		mov	r0, r1
 9840 002e FFF7FEFF 		bl	dn_minus
 9841              	.LVL705:
1050:src/xeq.c     **** 		}
 9842              		.loc 1 1050 3 view .LVU2578
 9843              	.LBB2102:
 9844              	.LBI2102:
 830:src/xeq.c     **** 	setRegister(regY_idx, y);
 9845              		.loc 1 830 6 view .LVU2579
 9846              	.LBB2103:
 831:src/xeq.c     **** }
 9847              		.loc 1 831 2 view .LVU2580
 9848 0032 01A9     		add	r1, sp, #4
 9849              	.LVL706:
 831:src/xeq.c     **** }
 9850              		.loc 1 831 2 is_stmt 0 view .LVU2581
 9851 0034 6520     		movs	r0, #101
 9852 0036 FFF7FEFF 		bl	setRegister
 9853              	.LVL707:
 9854              	.L767:
 831:src/xeq.c     **** }
 9855              		.loc 1 831 2 view .LVU2582
 9856              	.LBE2103:
 9857              	.LBE2102:
 9858              	.LBE2099:
1052:src/xeq.c     **** 	case OP_C_MRE: // change sign of real part
 9859              		.loc 1 1052 3 is_stmt 1 view .LVU2583
 9860 003a 4A4B     		ldr	r3, .L768
 9861 003c 1A68     		ldr	r2, [r3]
 9862              	.L762:
1073:src/xeq.c     **** 	}
 9863              		.loc 1 1073 10 view .LVU2584
1075:src/xeq.c     **** 	CLEAR_POLAR_READY;
 9864              		.loc 1 1075 2 view .LVU2585
 9865              	.LBB2104:
 9866              	.LBI2104:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 9867              		.loc 1 533 13 view .LVU2586
 9868              	.LBB2105:
ARM GAS  /tmp/ccQQPlfu.s 			page 316


 534:src/xeq.c     **** }
 9869              		.loc 1 534 2 view .LVU2587
 534:src/xeq.c     **** }
 9870              		.loc 1 534 20 is_stmt 0 view .LVU2588
 9871 003e 4A4B     		ldr	r3, .L768+4
 9872 0040 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 9873 0042 0120     		movs	r0, #1
 9874 0044 60F38711 		bfi	r1, r0, #6, #2
 9875 0048 1975     		strb	r1, [r3, #20]
 9876              	.LBE2105:
 9877              	.LBE2104:
1076:src/xeq.c     **** }
 9878              		.loc 1 1076 2 is_stmt 1 view .LVU2589
 9879 004a 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 9880 004e 0343     		orrs	r3, r3, r0
 9881 0050 82F8AD37 		strb	r3, [r2, #1965]
 9882              	.L749:
1077:src/xeq.c     **** #endif
 9883              		.loc 1 1077 1 is_stmt 0 view .LVU2590
 9884 0054 0AB0     		add	sp, sp, #40
 9885              		.cfi_remember_state
 9886              		.cfi_def_cfa_offset 8
 9887              		@ sp needed
 9888 0056 10BD     		pop	{r4, pc}
 9889              	.L761:
 9890              		.cfi_restore_state
1015:src/xeq.c     **** 			INIT_8;
 9891              		.loc 1 1015 3 is_stmt 1 view .LVU2591
1015:src/xeq.c     **** 			INIT_8;
 9892              		.loc 1 1015 7 is_stmt 0 view .LVU2592
 9893 0058 424C     		ldr	r4, .L768
 9894 005a 2268     		ldr	r2, [r4]
1021:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9895              		.loc 1 1021 3 is_stmt 1 view .LVU2593
1015:src/xeq.c     **** 			INIT_8;
 9896              		.loc 1 1015 6 is_stmt 0 view .LVU2594
 9897 005c 92F8EA17 		ldrb	r1, [r2, #2026]	@ zero_extendqisi2
1021:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9898              		.loc 1 1021 3 view .LVU2595
 9899 0060 92F8AC07 		ldrb	r0, [r2, #1964]	@ zero_extendqisi2
 9900 0064 01F00803 		and	r3, r1, #8
 9901 0068 20F00900 		bic	r0, r0, #9
 9902 006c 43F00103 		orr	r3, r3, #1
 9903 0070 0343     		orrs	r3, r3, r0
1022:src/xeq.c     **** #ifdef DM42
 9904              		.loc 1 1022 22 view .LVU2596
 9905 0072 41F00801 		orr	r1, r1, #8
 9906 0076 82F8EA17 		strb	r1, [r2, #2026]
1021:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9907              		.loc 1 1021 3 view .LVU2597
 9908 007a 82F8AC37 		strb	r3, [r2, #1964]
1022:src/xeq.c     **** #ifdef DM42
 9909              		.loc 1 1022 3 is_stmt 1 view .LVU2598
1024:src/xeq.c     **** 		display_current_menu();
 9910              		.loc 1 1024 3 view .LVU2599
 9911 007e 1120     		movs	r0, #17
 9912 0080 FFF7FEFF 		bl	set_menu
ARM GAS  /tmp/ccQQPlfu.s 			page 317


 9913              	.LVL708:
1025:src/xeq.c     **** #endif
 9914              		.loc 1 1025 3 view .LVU2600
 9915 0084 FFF7FEFF 		bl	display_current_menu
 9916              	.LVL709:
1027:src/xeq.c     **** 	case OP_CNO: // reset flag so that complex mode cannot be entered
 9917              		.loc 1 1027 3 view .LVU2601
 9918 0088 2268     		ldr	r2, [r4]
 9919 008a D8E7     		b	.L762
 9920              	.L765:
 9921 008c 354C     		ldr	r4, .L768
 9922              	.L760:
1036:src/xeq.c     **** 		UNLOCK_C;
 9923              		.loc 1 1036 3 view .LVU2602
 9924 008e 0120     		movs	r0, #1
 9925 0090 FFF7FEFF 		bl	finish_cpx_entry
 9926              	.LVL710:
1037:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9927              		.loc 1 1037 3 view .LVU2603
 9928 0094 2368     		ldr	r3, [r4]
1039:src/xeq.c     **** #ifdef DM42
 9929              		.loc 1 1039 21 is_stmt 0 view .LVU2604
 9930 0096 3449     		ldr	r1, .L768+4
1037:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9931              		.loc 1 1037 3 view .LVU2605
 9932 0098 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
1038:src/xeq.c     **** 		State2.wascomplex = 0;
 9933              		.loc 1 1038 22 view .LVU2606
 9934 009c 93F8EA07 		ldrb	r0, [r3, #2026]	@ zero_extendqisi2
1037:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9935              		.loc 1 1037 3 view .LVU2607
 9936 00a0 6FF30002 		bfc	r2, #0, #1
1038:src/xeq.c     **** 		State2.wascomplex = 0;
 9937              		.loc 1 1038 22 view .LVU2608
 9938 00a4 C2F3C004 		ubfx	r4, r2, #3, #1
 9939 00a8 64F3C300 		bfi	r0, r4, #3, #1
 9940 00ac 83F8EA07 		strb	r0, [r3, #2026]
1039:src/xeq.c     **** #ifdef DM42
 9941              		.loc 1 1039 21 view .LVU2609
 9942 00b0 087D     		ldrb	r0, [r1, #20]	@ zero_extendqisi2
1037:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9943              		.loc 1 1037 3 view .LVU2610
 9944 00b2 83F8AC27 		strb	r2, [r3, #1964]
1038:src/xeq.c     **** 		State2.wascomplex = 0;
 9945              		.loc 1 1038 3 is_stmt 1 view .LVU2611
1039:src/xeq.c     **** #ifdef DM42
 9946              		.loc 1 1039 3 view .LVU2612
1039:src/xeq.c     **** #ifdef DM42
 9947              		.loc 1 1039 21 is_stmt 0 view .LVU2613
 9948 00b6 6FF38710 		bfc	r0, #6, #2
 9949 00ba 0875     		strb	r0, [r1, #20]
1041:src/xeq.c     **** 		display_current_menu();
 9950              		.loc 1 1041 3 is_stmt 1 view .LVU2614
 9951 00bc FFF7FEFF 		bl	set_default_menu
 9952              	.LVL711:
1042:src/xeq.c     **** #endif
 9953              		.loc 1 1042 3 view .LVU2615
ARM GAS  /tmp/ccQQPlfu.s 			page 318


 9954 00c0 FFF7FEFF 		bl	display_current_menu
 9955              	.LVL712:
1044:src/xeq.c     **** 	case OP_C_MIM: // change sign of imaginary part
 9956              		.loc 1 1044 3 view .LVU2616
1077:src/xeq.c     **** #endif
 9957              		.loc 1 1077 1 is_stmt 0 view .LVU2617
 9958 00c4 0AB0     		add	sp, sp, #40
 9959              		.cfi_remember_state
 9960              		.cfi_def_cfa_offset 8
 9961              		@ sp needed
 9962 00c6 10BD     		pop	{r4, pc}
 9963              	.L758:
 9964              		.cfi_restore_state
 9965              	.LBB2106:
1055:src/xeq.c     **** 		getX(&x);
 9966              		.loc 1 1055 3 is_stmt 1 view .LVU2618
1056:src/xeq.c     **** 		dn_minus(&x, &x);
 9967              		.loc 1 1056 3 view .LVU2619
 9968              	.LVL713:
 9969              	.LBB2107:
 9970              	.LBI2107:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 9971              		.loc 1 818 12 view .LVU2620
 9972              	.LBB2108:
 819:src/xeq.c     **** }
 9973              		.loc 1 819 2 view .LVU2621
 819:src/xeq.c     **** }
 9974              		.loc 1 819 9 is_stmt 0 view .LVU2622
 9975 00c8 6421     		movs	r1, #100
 9976 00ca 01A8     		add	r0, sp, #4
 9977              	.LVL714:
 819:src/xeq.c     **** }
 9978              		.loc 1 819 9 view .LVU2623
 9979 00cc FFF7FEFF 		bl	getRegister
 9980              	.LVL715:
 819:src/xeq.c     **** }
 9981              		.loc 1 819 9 view .LVU2624
 9982              	.LBE2108:
 9983              	.LBE2107:
1057:src/xeq.c     **** 		setX(&x);
 9984              		.loc 1 1057 3 is_stmt 1 view .LVU2625
 9985 00d0 01A9     		add	r1, sp, #4
 9986 00d2 0846     		mov	r0, r1
 9987 00d4 FFF7FEFF 		bl	dn_minus
 9988              	.LVL716:
1058:src/xeq.c     **** 		}
 9989              		.loc 1 1058 3 view .LVU2626
 9990              	.LBB2109:
 9991              	.LBI2109:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 9992              		.loc 1 822 6 view .LVU2627
 9993              	.LBB2110:
 823:src/xeq.c     **** }
 9994              		.loc 1 823 2 view .LVU2628
 9995 00d8 01A9     		add	r1, sp, #4
 9996              	.LVL717:
 823:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 319


 9997              		.loc 1 823 2 is_stmt 0 view .LVU2629
 9998 00da 6420     		movs	r0, #100
 9999 00dc FFF7FEFF 		bl	setRegister
 10000              	.LVL718:
 823:src/xeq.c     **** }
 10001              		.loc 1 823 2 view .LVU2630
 10002              	.LBE2110:
 10003              	.LBE2109:
 10004              	.LBE2106:
1060:src/xeq.c     **** 	case OP_C_IM: // zero real part
 10005              		.loc 1 1060 3 is_stmt 1 view .LVU2631
 10006 00e0 204B     		ldr	r3, .L768
 10007 00e2 1A68     		ldr	r2, [r3]
 10008 00e4 ABE7     		b	.L762
 10009              	.L757:
1065:src/xeq.c     **** 		break;
 10010              		.loc 1 1065 3 view .LVU2632
 10011              	.LBB2111:
 10012              	.LBI2111:
1548:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 10013              		.loc 1 1548 6 view .LVU2633
 10014              	.LBB2112:
1549:src/xeq.c     **** }
 10015              		.loc 1 1549 2 view .LVU2634
 10016 00e6 6520     		movs	r0, #101
 10017 00e8 FFF7FEFF 		bl	get_reg_n
 10018              	.LVL719:
 10019 00ec FFF7FEFF 		bl	set_zero
 10020              	.LVL720:
 10021 00f0 1C4B     		ldr	r3, .L768
 10022 00f2 1A68     		ldr	r2, [r3]
1550:src/xeq.c     **** 
 10023              		.loc 1 1550 1 is_stmt 0 view .LVU2635
 10024 00f4 A3E7     		b	.L762
 10025              	.L756:
 10026              	.LBE2112:
 10027              	.LBE2111:
1062:src/xeq.c     **** 		break;
 10028              		.loc 1 1062 3 is_stmt 1 view .LVU2636
 10029              	.LBB2113:
 10030              	.LBI2113:
1544:src/xeq.c     **** 	set_zero(StackBase);
 10031              		.loc 1 1544 6 view .LVU2637
 10032              	.LBB2114:
1545:src/xeq.c     **** }
 10033              		.loc 1 1545 2 view .LVU2638
 10034 00f6 1D4B     		ldr	r3, .L768+8
 10035 00f8 1868     		ldr	r0, [r3]
 10036 00fa FFF7FEFF 		bl	set_zero
 10037              	.LVL721:
 10038 00fe 194B     		ldr	r3, .L768
 10039 0100 1A68     		ldr	r2, [r3]
1546:src/xeq.c     **** 
 10040              		.loc 1 1546 1 is_stmt 0 view .LVU2639
 10041 0102 9CE7     		b	.L762
 10042              	.L755:
 10043              	.LBE2114:
ARM GAS  /tmp/ccQQPlfu.s 			page 320


 10044              	.LBE2113:
1068:src/xeq.c     **** 		break;
 10045              		.loc 1 1068 3 is_stmt 1 view .LVU2640
 10046 0104 174B     		ldr	r3, .L768
 10047 0106 1A68     		ldr	r2, [r3]
 10048 0108 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
 10049 010c 6FF34513 		bfc	r3, #5, #1
 10050 0110 82F8AC37 		strb	r3, [r2, #1964]
1069:src/xeq.c     **** 	case OP_CPXJ: // use j to display complex numbers
 10051              		.loc 1 1069 3 view .LVU2641
 10052 0114 93E7     		b	.L762
 10053              	.L754:
1071:src/xeq.c     **** 		break;
 10054              		.loc 1 1071 3 view .LVU2642
 10055 0116 134B     		ldr	r3, .L768
 10056 0118 1A68     		ldr	r2, [r3]
 10057 011a 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
 10058 011e 43F02003 		orr	r3, r3, #32
 10059 0122 82F8AC37 		strb	r3, [r2, #1964]
1072:src/xeq.c     **** 	default:;
 10060              		.loc 1 1072 3 view .LVU2643
 10061 0126 8AE7     		b	.L762
 10062              	.L753:
1009:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 10063              		.loc 1 1009 10 view .LVU2644
 10064 0128 0E4B     		ldr	r3, .L768
 10065 012a 1A68     		ldr	r2, [r3]
1010:src/xeq.c     **** 		CLEAR_IMAG;
 10066              		.loc 1 1010 3 view .LVU2645
1011:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
 10067              		.loc 1 1011 3 view .LVU2646
1012:src/xeq.c     **** 		return;
 10068              		.loc 1 1012 3 view .LVU2647
1010:src/xeq.c     **** 		CLEAR_IMAG;
 10069              		.loc 1 1010 3 is_stmt 0 view .LVU2648
 10070 012c 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
 10071 0130 03F03903 		and	r3, r3, #57
 10072 0134 43F04003 		orr	r3, r3, #64
 10073 0138 82F8AC37 		strb	r3, [r2, #1964]
1013:src/xeq.c     **** 	case OP_C_ON: // start complex mode - only called if CPX_ENABLED and C_LOCK_OFF
 10074              		.loc 1 1013 3 is_stmt 1 view .LVU2649
 10075 013c 8AE7     		b	.L749
 10076              	.L751:
1029:src/xeq.c     **** 			SET_CPX_NO;
 10077              		.loc 1 1029 3 view .LVU2650
1029:src/xeq.c     **** 			SET_CPX_NO;
 10078              		.loc 1 1029 8 is_stmt 0 view .LVU2651
 10079 013e 094C     		ldr	r4, .L768
 10080 0140 2268     		ldr	r2, [r4]
1029:src/xeq.c     **** 			SET_CPX_NO;
 10081              		.loc 1 1029 7 view .LVU2652
 10082 0142 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
1029:src/xeq.c     **** 			SET_CPX_NO;
 10083              		.loc 1 1029 6 view .LVU2653
 10084 0146 03F04101 		and	r1, r3, #65
 10085 014a 4129     		cmp	r1, #65
 10086 014c 04D0     		beq	.L764
ARM GAS  /tmp/ccQQPlfu.s 			page 321


1030:src/xeq.c     **** 			UNLOCK_C; //just in case
 10087              		.loc 1 1030 4 is_stmt 1 view .LVU2654
1031:src/xeq.c     **** 			return;
 10088              		.loc 1 1031 4 view .LVU2655
 10089 014e 23F04103 		bic	r3, r3, #65
 10090 0152 82F8AC37 		strb	r3, [r2, #1964]
1032:src/xeq.c     **** 		}
 10091              		.loc 1 1032 4 view .LVU2656
 10092 0156 7DE7     		b	.L749
 10093              	.L764:
1034:src/xeq.c     **** 	case OP_C_OFF: // exit complex mode - only called if CPX_ENABLED and C_LOCK_ON
 10094              		.loc 1 1034 3 view .LVU2657
 10095 0158 6FF38613 		bfc	r3, #6, #1
 10096 015c 82F8AC37 		strb	r3, [r2, #1964]
 10097 0160 95E7     		b	.L760
 10098              	.L769:
 10099 0162 00BF     		.align	2
 10100              	.L768:
 10101 0164 00000000 		.word	main_ram
 10102 0168 00000000 		.word	StateWhileOn
 10103 016c 00000000 		.word	StackBase
 10104              		.cfi_endproc
 10105              	.LFE78:
 10107              		.section	.text.get_reg_n_int,"ax",%progbits
 10108              		.align	1
 10109              		.p2align 2,,3
 10110              		.global	get_reg_n_int
 10111              		.syntax unified
 10112              		.thumb
 10113              		.thumb_func
 10114              		.fpu fpv4-sp-d16
 10116              	get_reg_n_int:
 10117              	.LVL722:
 10118              	.LFB94:
1410:src/xeq.c     **** 	long long int ll;
 10119              		.loc 1 1410 40 view -0
 10120              		.cfi_startproc
 10121              		@ args = 0, pretend = 0, frame = 8
 10122              		@ frame_needed = 0, uses_anonymous_args = 0
1411:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
 10123              		.loc 1 1411 2 view .LVU2659
1412:src/xeq.c     **** 	return ll;
 10124              		.loc 1 1412 2 view .LVU2660
1410:src/xeq.c     **** 	long long int ll;
 10125              		.loc 1 1410 40 is_stmt 0 view .LVU2661
 10126 0000 00B5     		push	{lr}
 10127              		.cfi_def_cfa_offset 4
 10128              		.cfi_offset 14, -4
 10129 0002 83B0     		sub	sp, sp, #12
 10130              		.cfi_def_cfa_offset 16
1412:src/xeq.c     **** 	return ll;
 10131              		.loc 1 1412 13 view .LVU2662
 10132 0004 FFF7FEFF 		bl	get_reg_n
 10133              	.LVL723:
1412:src/xeq.c     **** 	return ll;
 10134              		.loc 1 1412 2 view .LVU2663
 10135 0008 0822     		movs	r2, #8
ARM GAS  /tmp/ccQQPlfu.s 			page 322


1412:src/xeq.c     **** 	return ll;
 10136              		.loc 1 1412 13 view .LVU2664
 10137 000a 0146     		mov	r1, r0
1412:src/xeq.c     **** 	return ll;
 10138              		.loc 1 1412 2 view .LVU2665
 10139 000c 6846     		mov	r0, sp
 10140 000e FFF7FEFF 		bl	xcopy
 10141              	.LVL724:
1413:src/xeq.c     **** }
 10142              		.loc 1 1413 2 is_stmt 1 view .LVU2666
1414:src/xeq.c     **** 
 10143              		.loc 1 1414 1 is_stmt 0 view .LVU2667
 10144 0012 DDE90001 		ldrd	r0, [sp]
 10145 0016 03B0     		add	sp, sp, #12
 10146              		.cfi_def_cfa_offset 4
 10147              		@ sp needed
 10148 0018 5DF804FB 		ldr	pc, [sp], #4
 10149              		.cfi_endproc
 10150              	.LFE94:
 10152              		.section	.text.storcl_intop,"ax",%progbits
 10153              		.align	1
 10154              		.p2align 2,,3
 10155              		.syntax unified
 10156              		.thumb
 10157              		.thumb_func
 10158              		.fpu fpv4-sp-d16
 10160              	storcl_intop:
 10161              	.LVL725:
 10162              	.LFB116:
1679:src/xeq.c     **** 	long long int x, y;
 10163              		.loc 1 1679 83 is_stmt 1 view -0
 10164              		.cfi_startproc
 10165              		@ args = 0, pretend = 0, frame = 0
 10166              		@ frame_needed = 0, uses_anonymous_args = 0
1680:src/xeq.c     **** 
 10167              		.loc 1 1680 2 view .LVU2669
1682:src/xeq.c     **** 	y = get_reg_n_int(index);
 10168              		.loc 1 1682 2 view .LVU2670
 10169              	.LBB2115:
 10170              	.LBI2115:
1436:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10171              		.loc 1 1436 15 view .LVU2671
 10172              	.LBB2116:
1437:src/xeq.c     **** }
 10173              		.loc 1 1437 2 view .LVU2672
 10174              	.LBE2116:
 10175              	.LBE2115:
1679:src/xeq.c     **** 	long long int x, y;
 10176              		.loc 1 1679 83 is_stmt 0 view .LVU2673
 10177 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 10178              		.cfi_def_cfa_offset 32
 10179              		.cfi_offset 3, -32
 10180              		.cfi_offset 4, -28
 10181              		.cfi_offset 5, -24
 10182              		.cfi_offset 6, -20
 10183              		.cfi_offset 7, -16
 10184              		.cfi_offset 8, -12
ARM GAS  /tmp/ccQQPlfu.s 			page 323


 10185              		.cfi_offset 9, -8
 10186              		.cfi_offset 14, -4
1679:src/xeq.c     **** 	long long int x, y;
 10187              		.loc 1 1679 83 view .LVU2674
 10188 0004 0446     		mov	r4, r0
 10189              	.LBB2120:
 10190              	.LBB2117:
1437:src/xeq.c     **** }
 10191              		.loc 1 1437 9 view .LVU2675
 10192 0006 6420     		movs	r0, #100
 10193              	.LVL726:
1437:src/xeq.c     **** }
 10194              		.loc 1 1437 9 view .LVU2676
 10195              	.LBE2117:
 10196              	.LBE2120:
1679:src/xeq.c     **** 	long long int x, y;
 10197              		.loc 1 1679 83 view .LVU2677
 10198 0008 8946     		mov	r9, r1
 10199 000a 9846     		mov	r8, r3
 10200 000c 1646     		mov	r6, r2
 10201              	.LBB2121:
 10202              	.LBB2118:
1437:src/xeq.c     **** }
 10203              		.loc 1 1437 9 view .LVU2678
 10204 000e FFF7FEFF 		bl	get_reg_n_int
 10205              	.LVL727:
1437:src/xeq.c     **** }
 10206              		.loc 1 1437 9 view .LVU2679
 10207 0012 0746     		mov	r7, r0
 10208              	.LBE2118:
 10209              	.LBE2121:
1683:src/xeq.c     **** 
 10210              		.loc 1 1683 6 view .LVU2680
 10211 0014 4846     		mov	r0, r9
 10212              	.LBB2122:
 10213              	.LBB2119:
1437:src/xeq.c     **** }
 10214              		.loc 1 1437 9 view .LVU2681
 10215 0016 0D46     		mov	r5, r1
 10216              	.LVL728:
1437:src/xeq.c     **** }
 10217              		.loc 1 1437 9 view .LVU2682
 10218              	.LBE2119:
 10219              	.LBE2122:
1683:src/xeq.c     **** 
 10220              		.loc 1 1683 2 is_stmt 1 view .LVU2683
1683:src/xeq.c     **** 
 10221              		.loc 1 1683 6 is_stmt 0 view .LVU2684
 10222 0018 FFF7FEFF 		bl	get_reg_n_int
 10223              	.LVL729:
1685:src/xeq.c     **** 		const long long int t = x;
 10224              		.loc 1 1685 2 is_stmt 1 view .LVU2685
1685:src/xeq.c     **** 		const long long int t = x;
 10225              		.loc 1 1685 5 is_stmt 0 view .LVU2686
 10226 001c B8F1000F 		cmp	r8, #0
 10227 0020 05D0     		beq	.L773
 10228 0022 3A46     		mov	r2, r7
ARM GAS  /tmp/ccQQPlfu.s 			page 324


 10229 0024 2B46     		mov	r3, r5
 10230              	.LBB2123:
1687:src/xeq.c     **** 		y = t;
 10231              		.loc 1 1687 5 view .LVU2687
 10232 0026 0746     		mov	r7, r0
 10233              	.LVL730:
1687:src/xeq.c     **** 		y = t;
 10234              		.loc 1 1687 5 view .LVU2688
 10235 0028 0D46     		mov	r5, r1
 10236              	.LVL731:
1688:src/xeq.c     **** 	}
 10237              		.loc 1 1688 5 view .LVU2689
 10238 002a 1046     		mov	r0, r2
 10239              	.LVL732:
1688:src/xeq.c     **** 	}
 10240              		.loc 1 1688 5 view .LVU2690
 10241 002c 1946     		mov	r1, r3
 10242              	.LVL733:
 10243              	.L773:
1688:src/xeq.c     **** 	}
 10244              		.loc 1 1688 5 view .LVU2691
 10245              	.LBE2123:
1691:src/xeq.c     **** 	case 1:
 10246              		.loc 1 1691 2 is_stmt 1 view .LVU2692
 10247 002e 013C     		subs	r4, r4, #1
 10248 0030 052C     		cmp	r4, #5
 10249 0032 3AD8     		bhi	.L782
 10250 0034 DFE804F0 		tbb	[pc, r4]
 10251              	.L776:
 10252 0038 0C       		.byte	(.L781-.L776)/2
 10253 0039 15       		.byte	(.L780-.L776)/2
 10254 003a 1E       		.byte	(.L779-.L776)/2
 10255 003b 27       		.byte	(.L778-.L776)/2
 10256 003c 30       		.byte	(.L777-.L776)/2
 10257 003d 03       		.byte	(.L775-.L776)/2
 10258              		.p2align 1
 10259              	.L775:
1708:src/xeq.c     **** 		break;
 10260              		.loc 1 1708 3 view .LVU2693
1708:src/xeq.c     **** 		break;
 10261              		.loc 1 1708 8 is_stmt 0 view .LVU2694
 10262 003e 3A46     		mov	r2, r7
 10263 0040 2B46     		mov	r3, r5
 10264 0042 FFF7FEFF 		bl	intMax
 10265              	.LVL734:
1708:src/xeq.c     **** 		break;
 10266              		.loc 1 1708 6 view .LVU2695
 10267 0046 C6E90001 		strd	r0, [r6]
1709:src/xeq.c     **** 	default:
 10268              		.loc 1 1709 3 is_stmt 1 view .LVU2696
1713:src/xeq.c     **** }
 10269              		.loc 1 1713 9 is_stmt 0 view .LVU2697
 10270 004a 0020     		movs	r0, #0
 10271              	.L772:
1714:src/xeq.c     **** 
 10272              		.loc 1 1714 1 view .LVU2698
 10273 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
ARM GAS  /tmp/ccQQPlfu.s 			page 325


 10274              	.LVL735:
 10275              	.L781:
1693:src/xeq.c     **** 		break;
 10276              		.loc 1 1693 3 is_stmt 1 view .LVU2699
1693:src/xeq.c     **** 		break;
 10277              		.loc 1 1693 8 is_stmt 0 view .LVU2700
 10278 0050 3A46     		mov	r2, r7
 10279 0052 2B46     		mov	r3, r5
 10280 0054 FFF7FEFF 		bl	intAdd
 10281              	.LVL736:
1693:src/xeq.c     **** 		break;
 10282              		.loc 1 1693 6 view .LVU2701
 10283 0058 C6E90001 		strd	r0, [r6]
1694:src/xeq.c     **** 	case 2:
 10284              		.loc 1 1694 3 is_stmt 1 view .LVU2702
1713:src/xeq.c     **** }
 10285              		.loc 1 1713 9 is_stmt 0 view .LVU2703
 10286 005c 0020     		movs	r0, #0
1714:src/xeq.c     **** 
 10287              		.loc 1 1714 1 view .LVU2704
 10288 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10289              	.LVL737:
 10290              	.L780:
1696:src/xeq.c     **** 		break;
 10291              		.loc 1 1696 3 is_stmt 1 view .LVU2705
1696:src/xeq.c     **** 		break;
 10292              		.loc 1 1696 8 is_stmt 0 view .LVU2706
 10293 0062 3A46     		mov	r2, r7
 10294 0064 2B46     		mov	r3, r5
 10295 0066 FFF7FEFF 		bl	intSubtract
 10296              	.LVL738:
1696:src/xeq.c     **** 		break;
 10297              		.loc 1 1696 6 view .LVU2707
 10298 006a C6E90001 		strd	r0, [r6]
1697:src/xeq.c     **** 	case 3:
 10299              		.loc 1 1697 3 is_stmt 1 view .LVU2708
1713:src/xeq.c     **** }
 10300              		.loc 1 1713 9 is_stmt 0 view .LVU2709
 10301 006e 0020     		movs	r0, #0
1714:src/xeq.c     **** 
 10302              		.loc 1 1714 1 view .LVU2710
 10303 0070 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10304              	.LVL739:
 10305              	.L779:
1699:src/xeq.c     **** 		break;
 10306              		.loc 1 1699 3 is_stmt 1 view .LVU2711
1699:src/xeq.c     **** 		break;
 10307              		.loc 1 1699 8 is_stmt 0 view .LVU2712
 10308 0074 3A46     		mov	r2, r7
 10309 0076 2B46     		mov	r3, r5
 10310 0078 FFF7FEFF 		bl	intMultiply
 10311              	.LVL740:
1699:src/xeq.c     **** 		break;
 10312              		.loc 1 1699 6 view .LVU2713
 10313 007c C6E90001 		strd	r0, [r6]
1700:src/xeq.c     **** 	case 4:
 10314              		.loc 1 1700 3 is_stmt 1 view .LVU2714
ARM GAS  /tmp/ccQQPlfu.s 			page 326


1713:src/xeq.c     **** }
 10315              		.loc 1 1713 9 is_stmt 0 view .LVU2715
 10316 0080 0020     		movs	r0, #0
1714:src/xeq.c     **** 
 10317              		.loc 1 1714 1 view .LVU2716
 10318 0082 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10319              	.LVL741:
 10320              	.L778:
1702:src/xeq.c     **** 		break;
 10321              		.loc 1 1702 3 is_stmt 1 view .LVU2717
1702:src/xeq.c     **** 		break;
 10322              		.loc 1 1702 8 is_stmt 0 view .LVU2718
 10323 0086 3A46     		mov	r2, r7
 10324 0088 2B46     		mov	r3, r5
 10325 008a FFF7FEFF 		bl	intDivide
 10326              	.LVL742:
1702:src/xeq.c     **** 		break;
 10327              		.loc 1 1702 6 view .LVU2719
 10328 008e C6E90001 		strd	r0, [r6]
1703:src/xeq.c     **** 	case 5:
 10329              		.loc 1 1703 3 is_stmt 1 view .LVU2720
1713:src/xeq.c     **** }
 10330              		.loc 1 1713 9 is_stmt 0 view .LVU2721
 10331 0092 0020     		movs	r0, #0
1714:src/xeq.c     **** 
 10332              		.loc 1 1714 1 view .LVU2722
 10333 0094 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10334              	.LVL743:
 10335              	.L777:
1705:src/xeq.c     **** 		break;
 10336              		.loc 1 1705 3 is_stmt 1 view .LVU2723
1705:src/xeq.c     **** 		break;
 10337              		.loc 1 1705 8 is_stmt 0 view .LVU2724
 10338 0098 3A46     		mov	r2, r7
 10339 009a 2B46     		mov	r3, r5
 10340 009c FFF7FEFF 		bl	intMin
 10341              	.LVL744:
1705:src/xeq.c     **** 		break;
 10342              		.loc 1 1705 6 view .LVU2725
 10343 00a0 C6E90001 		strd	r0, [r6]
1706:src/xeq.c     **** 	case 6:
 10344              		.loc 1 1706 3 is_stmt 1 view .LVU2726
1713:src/xeq.c     **** }
 10345              		.loc 1 1713 9 is_stmt 0 view .LVU2727
 10346 00a4 0020     		movs	r0, #0
1714:src/xeq.c     **** 
 10347              		.loc 1 1714 1 view .LVU2728
 10348 00a6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10349              	.LVL745:
 10350              	.L782:
1713:src/xeq.c     **** }
 10351              		.loc 1 1713 9 view .LVU2729
 10352 00aa 0120     		movs	r0, #1
 10353              	.LVL746:
1713:src/xeq.c     **** }
 10354              		.loc 1 1713 9 view .LVU2730
 10355 00ac CEE7     		b	.L772
ARM GAS  /tmp/ccQQPlfu.s 			page 327


 10356              		.cfi_endproc
 10357              	.LFE116:
 10359 00ae 00BF     		.section	.text.incdec,"ax",%progbits
 10360              		.align	1
 10361              		.p2align 2,,3
 10362              		.syntax unified
 10363              		.thumb
 10364              		.thumb_func
 10365              		.fpu fpv4-sp-d16
 10367              	incdec:
 10368              	.LVL747:
 10369              	.LFB192:
3388:src/xeq.c     **** 	if (is_intmode()) {
 10370              		.loc 1 3388 46 is_stmt 1 view -0
 10371              		.cfi_startproc
 10372              		@ args = 0, pretend = 0, frame = 80
 10373              		@ frame_needed = 0, uses_anonymous_args = 0
3389:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10374              		.loc 1 3389 2 view .LVU2732
3389:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10375              		.loc 1 3389 6 is_stmt 0 view .LVU2733
 10376 0000 244B     		ldr	r3, .L797
3388:src/xeq.c     **** 	if (is_intmode()) {
 10377              		.loc 1 3388 46 view .LVU2734
 10378 0002 70B5     		push	{r4, r5, r6, lr}
 10379              		.cfi_def_cfa_offset 16
 10380              		.cfi_offset 4, -16
 10381              		.cfi_offset 5, -12
 10382              		.cfi_offset 6, -8
 10383              		.cfi_offset 14, -4
3389:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10384              		.loc 1 3389 6 view .LVU2735
 10385 0004 1B68     		ldr	r3, [r3]
 10386 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3389:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10387              		.loc 1 3389 5 view .LVU2736
 10388 000a DB07     		lsls	r3, r3, #31
3388:src/xeq.c     **** 	if (is_intmode()) {
 10389              		.loc 1 3388 46 view .LVU2737
 10390 000c 94B0     		sub	sp, sp, #80
 10391              		.cfi_def_cfa_offset 96
3388:src/xeq.c     **** 	if (is_intmode()) {
 10392              		.loc 1 3388 46 view .LVU2738
 10393 000e 0D46     		mov	r5, r1
 10394 0010 0446     		mov	r4, r0
3389:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10395              		.loc 1 3389 5 view .LVU2739
 10396 0012 1ED5     		bpl	.L788
 10397              	.LVL748:
 10398              	.LBB2131:
 10399              	.LBI2131:
3388:src/xeq.c     **** 	if (is_intmode()) {
 10400              		.loc 1 3388 12 is_stmt 1 view .LVU2740
 10401              	.LBB2132:
3390:src/xeq.c     **** 		int xs;
 10402              		.loc 1 3390 3 view .LVU2741
3390:src/xeq.c     **** 		int xs;
ARM GAS  /tmp/ccQQPlfu.s 			page 328


 10403              		.loc 1 3390 21 is_stmt 0 view .LVU2742
 10404 0014 FFF7FEFF 		bl	get_reg_n_int
 10405              	.LVL749:
3391:src/xeq.c     **** 		unsigned long long int xv;
 10406              		.loc 1 3391 3 is_stmt 1 view .LVU2743
3392:src/xeq.c     **** 
 10407              		.loc 1 3392 3 view .LVU2744
3394:src/xeq.c     **** 			x = intAdd(x, 1LL);
 10408              		.loc 1 3394 3 view .LVU2745
3395:src/xeq.c     **** 		else
 10409              		.loc 1 3395 8 is_stmt 0 view .LVU2746
 10410 0018 0122     		movs	r2, #1
 10411 001a 0023     		movs	r3, #0
3394:src/xeq.c     **** 			x = intAdd(x, 1LL);
 10412              		.loc 1 3394 6 view .LVU2747
 10413 001c 002D     		cmp	r5, #0
 10414 001e 33D1     		bne	.L795
3397:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10415              		.loc 1 3397 4 is_stmt 1 view .LVU2748
3397:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10416              		.loc 1 3397 8 is_stmt 0 view .LVU2749
 10417 0020 FFF7FEFF 		bl	intSubtract
 10418              	.LVL750:
3397:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10419              		.loc 1 3397 8 view .LVU2750
 10420 0024 0646     		mov	r6, r0
 10421 0026 0D46     		mov	r5, r1
 10422              	.LVL751:
 10423              	.L790:
3398:src/xeq.c     **** 
 10424              		.loc 1 3398 3 is_stmt 1 view .LVU2751
 10425              	.LBB2133:
 10426              	.LBB2134:
1417:src/xeq.c     **** }
 10427              		.loc 1 1417 8 is_stmt 0 view .LVU2752
 10428 0028 2046     		mov	r0, r4
 10429 002a CDE90A65 		strd	r6, r5, [sp, #40]
 10430              	.LVL752:
1417:src/xeq.c     **** }
 10431              		.loc 1 1417 8 view .LVU2753
 10432              	.LBE2134:
 10433              	.LBI2133:
1416:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10434              		.loc 1 1416 6 is_stmt 1 view .LVU2754
 10435              	.LBB2135:
1417:src/xeq.c     **** }
 10436              		.loc 1 1417 2 view .LVU2755
1417:src/xeq.c     **** }
 10437              		.loc 1 1417 8 is_stmt 0 view .LVU2756
 10438 002e FFF7FEFF 		bl	get_reg_n
 10439              	.LVL753:
1417:src/xeq.c     **** }
 10440              		.loc 1 1417 2 view .LVU2757
 10441 0032 0AA9     		add	r1, sp, #40
 10442 0034 0822     		movs	r2, #8
 10443 0036 FFF7FEFF 		bl	xcopy
 10444              	.LVL754:
ARM GAS  /tmp/ccQQPlfu.s 			page 329


1417:src/xeq.c     **** }
 10445              		.loc 1 1417 2 view .LVU2758
 10446              	.LBE2135:
 10447              	.LBE2133:
3400:src/xeq.c     **** 		return xv != 0;
 10448              		.loc 1 3400 3 is_stmt 1 view .LVU2759
3400:src/xeq.c     **** 		return xv != 0;
 10449              		.loc 1 3400 8 is_stmt 0 view .LVU2760
 10450 003a 0AAA     		add	r2, sp, #40
 10451 003c 3046     		mov	r0, r6
 10452 003e 2946     		mov	r1, r5
 10453 0040 FFF7FEFF 		bl	extract_value
 10454              	.LVL755:
3401:src/xeq.c     **** 	} else {
 10455              		.loc 1 3401 3 is_stmt 1 view .LVU2761
3401:src/xeq.c     **** 	} else {
 10456              		.loc 1 3401 13 is_stmt 0 view .LVU2762
 10457 0044 50EA0103 		orrs	r3, r0, r1
 10458 0048 14BF     		ite	ne
 10459 004a 0120     		movne	r0, #1
 10460              	.LVL756:
3401:src/xeq.c     **** 	} else {
 10461              		.loc 1 3401 13 view .LVU2763
 10462 004c 0020     		moveq	r0, #0
 10463              	.LVL757:
3401:src/xeq.c     **** 	} else {
 10464              		.loc 1 3401 13 view .LVU2764
 10465              	.LBE2132:
 10466              	.LBE2131:
3414:src/xeq.c     **** 
 10467              		.loc 1 3414 1 view .LVU2765
 10468 004e 14B0     		add	sp, sp, #80
 10469              		.cfi_remember_state
 10470              		.cfi_def_cfa_offset 16
 10471              		@ sp needed
 10472 0050 70BD     		pop	{r4, r5, r6, pc}
 10473              	.LVL758:
 10474              	.L788:
 10475              		.cfi_restore_state
 10476              	.LBB2137:
3403:src/xeq.c     **** 
 10477              		.loc 1 3403 3 is_stmt 1 view .LVU2766
3405:src/xeq.c     **** 		if (inc)
 10478              		.loc 1 3405 3 view .LVU2767
 10479 0052 01A8     		add	r0, sp, #4
 10480              	.LVL759:
3405:src/xeq.c     **** 		if (inc)
 10481              		.loc 1 3405 3 is_stmt 0 view .LVU2768
 10482 0054 2146     		mov	r1, r4
 10483              	.LVL760:
3405:src/xeq.c     **** 		if (inc)
 10484              		.loc 1 3405 3 view .LVU2769
 10485 0056 FFF7FEFF 		bl	getRegister
 10486              	.LVL761:
3406:src/xeq.c     **** 			dn_inc(&x);
 10487              		.loc 1 3406 3 is_stmt 1 view .LVU2770
3407:src/xeq.c     **** 		else
ARM GAS  /tmp/ccQQPlfu.s 			page 330


 10488              		.loc 1 3407 4 is_stmt 0 view .LVU2771
 10489 005a 01A8     		add	r0, sp, #4
3406:src/xeq.c     **** 			dn_inc(&x);
 10490              		.loc 1 3406 6 view .LVU2772
 10491 005c 8DB9     		cbnz	r5, .L796
3409:src/xeq.c     **** 		setRegister(arg, &x);
 10492              		.loc 1 3409 4 is_stmt 1 view .LVU2773
 10493 005e FFF7FEFF 		bl	dn_dec
 10494              	.LVL762:
 10495              	.L793:
3410:src/xeq.c     **** 		decNumberTrunc(&y, &x);
 10496              		.loc 1 3410 3 view .LVU2774
 10497 0062 2046     		mov	r0, r4
 10498 0064 01A9     		add	r1, sp, #4
 10499 0066 FFF7FEFF 		bl	setRegister
 10500              	.LVL763:
3411:src/xeq.c     **** 		return ! dn_eq0(&y);
 10501              		.loc 1 3411 3 view .LVU2775
 10502 006a 01A9     		add	r1, sp, #4
 10503 006c 0AA8     		add	r0, sp, #40
 10504 006e FFF7FEFF 		bl	decNumberTrunc
 10505              	.LVL764:
3412:src/xeq.c     **** 	}
 10506              		.loc 1 3412 3 view .LVU2776
3412:src/xeq.c     **** 	}
 10507              		.loc 1 3412 12 is_stmt 0 view .LVU2777
 10508 0072 0AA8     		add	r0, sp, #40
 10509 0074 FFF7FEFF 		bl	dn_eq0
 10510              	.LVL765:
3412:src/xeq.c     **** 	}
 10511              		.loc 1 3412 10 view .LVU2778
 10512 0078 B0FA80F0 		clz	r0, r0
 10513 007c 4009     		lsrs	r0, r0, #5
 10514              	.LBE2137:
3414:src/xeq.c     **** 
 10515              		.loc 1 3414 1 view .LVU2779
 10516 007e 14B0     		add	sp, sp, #80
 10517              		.cfi_remember_state
 10518              		.cfi_def_cfa_offset 16
 10519              		@ sp needed
 10520 0080 70BD     		pop	{r4, r5, r6, pc}
 10521              	.LVL766:
 10522              	.L796:
 10523              		.cfi_restore_state
 10524              	.LBB2138:
3407:src/xeq.c     **** 		else
 10525              		.loc 1 3407 4 is_stmt 1 view .LVU2780
 10526 0082 FFF7FEFF 		bl	dn_inc
 10527              	.LVL767:
 10528 0086 ECE7     		b	.L793
 10529              	.LVL768:
 10530              	.L795:
3407:src/xeq.c     **** 		else
 10531              		.loc 1 3407 4 is_stmt 0 view .LVU2781
 10532              	.LBE2138:
 10533              	.LBB2139:
 10534              	.LBB2136:
ARM GAS  /tmp/ccQQPlfu.s 			page 331


3395:src/xeq.c     **** 		else
 10535              		.loc 1 3395 4 is_stmt 1 view .LVU2782
3395:src/xeq.c     **** 		else
 10536              		.loc 1 3395 8 is_stmt 0 view .LVU2783
 10537 0088 FFF7FEFF 		bl	intAdd
 10538              	.LVL769:
3395:src/xeq.c     **** 		else
 10539              		.loc 1 3395 8 view .LVU2784
 10540 008c 0646     		mov	r6, r0
 10541 008e 0D46     		mov	r5, r1
 10542              	.LVL770:
3395:src/xeq.c     **** 		else
 10543              		.loc 1 3395 8 view .LVU2785
 10544 0090 CAE7     		b	.L790
 10545              	.L798:
 10546 0092 00BF     		.align	2
 10547              	.L797:
 10548 0094 00000000 		.word	main_ram
 10549              	.LBE2136:
 10550              	.LBE2139:
 10551              		.cfi_endproc
 10552              	.LFE192:
 10554              		.section	.text.set_reg_n_int,"ax",%progbits
 10555              		.align	1
 10556              		.p2align 2,,3
 10557              		.global	set_reg_n_int
 10558              		.syntax unified
 10559              		.thumb
 10560              		.thumb_func
 10561              		.fpu fpv4-sp-d16
 10563              	set_reg_n_int:
 10564              	.LVL771:
 10565              	.LFB95:
1416:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10566              		.loc 1 1416 49 is_stmt 1 view -0
 10567              		.cfi_startproc
 10568              		@ args = 0, pretend = 0, frame = 8
 10569              		@ frame_needed = 0, uses_anonymous_args = 0
1417:src/xeq.c     **** }
 10570              		.loc 1 1417 2 view .LVU2787
1416:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10571              		.loc 1 1416 49 is_stmt 0 view .LVU2788
 10572 0000 00B5     		push	{lr}
 10573              		.cfi_def_cfa_offset 4
 10574              		.cfi_offset 14, -4
 10575 0002 83B0     		sub	sp, sp, #12
 10576              		.cfi_def_cfa_offset 16
1416:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10577              		.loc 1 1416 49 view .LVU2789
 10578 0004 CDE90023 		strd	r2, [sp]
1417:src/xeq.c     **** }
 10579              		.loc 1 1417 8 view .LVU2790
 10580 0008 FFF7FEFF 		bl	get_reg_n
 10581              	.LVL772:
1417:src/xeq.c     **** }
 10582              		.loc 1 1417 2 view .LVU2791
 10583 000c 0822     		movs	r2, #8
ARM GAS  /tmp/ccQQPlfu.s 			page 332


 10584 000e 6946     		mov	r1, sp
 10585 0010 FFF7FEFF 		bl	xcopy
 10586              	.LVL773:
1418:src/xeq.c     **** 
 10587              		.loc 1 1418 1 view .LVU2792
 10588 0014 03B0     		add	sp, sp, #12
 10589              		.cfi_def_cfa_offset 4
 10590              		@ sp needed
 10591 0016 5DF804FB 		ldr	pc, [sp], #4
 10592              		.cfi_endproc
 10593              	.LFE95:
 10595 001a 00BF     		.section	.text.get_reg_n_int_sgn,"ax",%progbits
 10596              		.align	1
 10597              		.p2align 2,,3
 10598              		.global	get_reg_n_int_sgn
 10599              		.syntax unified
 10600              		.thumb
 10601              		.thumb_func
 10602              		.fpu fpv4-sp-d16
 10604              	get_reg_n_int_sgn:
 10605              	.LVL774:
 10606              	.LFB96:
1422:src/xeq.c     **** 	if (is_intmode()) {
 10607              		.loc 1 1422 63 is_stmt 1 view -0
 10608              		.cfi_startproc
 10609              		@ args = 0, pretend = 0, frame = 40
 10610              		@ frame_needed = 0, uses_anonymous_args = 0
1423:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10611              		.loc 1 1423 2 view .LVU2794
1423:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10612              		.loc 1 1423 6 is_stmt 0 view .LVU2795
 10613 0000 0C4B     		ldr	r3, .L805
1422:src/xeq.c     **** 	if (is_intmode()) {
 10614              		.loc 1 1422 63 view .LVU2796
 10615 0002 10B5     		push	{r4, lr}
 10616              		.cfi_def_cfa_offset 8
 10617              		.cfi_offset 4, -8
 10618              		.cfi_offset 14, -4
1423:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10619              		.loc 1 1423 6 view .LVU2797
 10620 0004 1B68     		ldr	r3, [r3]
 10621 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1423:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10622              		.loc 1 1423 5 view .LVU2798
 10623 000a DB07     		lsls	r3, r3, #31
1422:src/xeq.c     **** 	if (is_intmode()) {
 10624              		.loc 1 1422 63 view .LVU2799
 10625 000c 8AB0     		sub	sp, sp, #40
 10626              		.cfi_def_cfa_offset 48
1422:src/xeq.c     **** 	if (is_intmode()) {
 10627              		.loc 1 1422 63 view .LVU2800
 10628 000e 0C46     		mov	r4, r1
1423:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10629              		.loc 1 1423 5 view .LVU2801
 10630 0010 06D5     		bpl	.L802
 10631              	.LVL775:
 10632              	.LBB2144:
ARM GAS  /tmp/ccQQPlfu.s 			page 333


 10633              	.LBI2144:
1422:src/xeq.c     **** 	if (is_intmode()) {
 10634              		.loc 1 1422 24 is_stmt 1 view .LVU2802
 10635              	.LBB2145:
1424:src/xeq.c     **** 	} else {
 10636              		.loc 1 1424 3 view .LVU2803
1424:src/xeq.c     **** 	} else {
 10637              		.loc 1 1424 10 is_stmt 0 view .LVU2804
 10638 0012 FFF7FEFF 		bl	get_reg_n_int
 10639              	.LVL776:
1424:src/xeq.c     **** 	} else {
 10640              		.loc 1 1424 10 view .LVU2805
 10641 0016 2246     		mov	r2, r4
 10642 0018 FFF7FEFF 		bl	extract_value
 10643              	.LVL777:
1424:src/xeq.c     **** 	} else {
 10644              		.loc 1 1424 10 view .LVU2806
 10645              	.LBE2145:
 10646              	.LBE2144:
1431:src/xeq.c     **** 
 10647              		.loc 1 1431 1 view .LVU2807
 10648 001c 0AB0     		add	sp, sp, #40
 10649              		.cfi_remember_state
 10650              		.cfi_def_cfa_offset 8
 10651              		@ sp needed
 10652 001e 10BD     		pop	{r4, pc}
 10653              	.LVL778:
 10654              	.L802:
 10655              		.cfi_restore_state
1431:src/xeq.c     **** 
 10656              		.loc 1 1431 1 view .LVU2808
 10657 0020 0146     		mov	r1, r0
 10658              	.LVL779:
 10659              	.LBB2146:
1426:src/xeq.c     **** 
 10660              		.loc 1 1426 3 is_stmt 1 view .LVU2809
1428:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 10661              		.loc 1 1428 3 view .LVU2810
 10662 0022 01A8     		add	r0, sp, #4
 10663              	.LVL780:
1428:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 10664              		.loc 1 1428 3 is_stmt 0 view .LVU2811
 10665 0024 FFF7FEFF 		bl	getRegister
 10666              	.LVL781:
1429:src/xeq.c     **** 	}
 10667              		.loc 1 1429 3 is_stmt 1 view .LVU2812
1429:src/xeq.c     **** 	}
 10668              		.loc 1 1429 10 is_stmt 0 view .LVU2813
 10669 0028 2146     		mov	r1, r4
 10670 002a 01A8     		add	r0, sp, #4
 10671 002c FFF7FEFF 		bl	dn_to_ull
 10672              	.LVL782:
 10673              	.LBE2146:
1431:src/xeq.c     **** 
 10674              		.loc 1 1431 1 view .LVU2814
 10675 0030 0AB0     		add	sp, sp, #40
 10676              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccQQPlfu.s 			page 334


 10677              		@ sp needed
 10678 0032 10BD     		pop	{r4, pc}
 10679              	.LVL783:
 10680              	.L806:
1431:src/xeq.c     **** 
 10681              		.loc 1 1431 1 view .LVU2815
 10682              		.align	2
 10683              	.L805:
 10684 0034 00000000 		.word	main_ram
 10685              		.cfi_endproc
 10686              	.LFE96:
 10688              		.section	.text.get_keycode_from_reg,"ax",%progbits
 10689              		.align	1
 10690              		.p2align 2,,3
 10691              		.syntax unified
 10692              		.thumb
 10693              		.thumb_func
 10694              		.fpu fpv4-sp-d16
 10696              	get_keycode_from_reg:
 10697              	.LVL784:
 10698              	.LFB140:
2055:src/xeq.c     **** 	int sgn;
 10699              		.loc 1 2055 1 is_stmt 1 view -0
 10700              		.cfi_startproc
 10701              		@ args = 0, pretend = 0, frame = 8
 10702              		@ frame_needed = 0, uses_anonymous_args = 0
2056:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
 10703              		.loc 1 2056 2 view .LVU2817
2057:src/xeq.c     **** 	if ( c < 0 )
 10704              		.loc 1 2057 2 view .LVU2818
2055:src/xeq.c     **** 	int sgn;
 10705              		.loc 1 2055 1 is_stmt 0 view .LVU2819
 10706 0000 00B5     		push	{lr}
 10707              		.cfi_def_cfa_offset 4
 10708              		.cfi_offset 14, -4
 10709 0002 83B0     		sub	sp, sp, #12
 10710              		.cfi_def_cfa_offset 16
2057:src/xeq.c     **** 	if ( c < 0 )
 10711              		.loc 1 2057 44 view .LVU2820
 10712 0004 01A9     		add	r1, sp, #4
 10713 0006 FFF7FEFF 		bl	get_reg_n_int_sgn
 10714              	.LVL785:
2057:src/xeq.c     **** 	if ( c < 0 )
 10715              		.loc 1 2057 16 view .LVU2821
 10716 000a FFF7FEFF 		bl	row_column_to_keycode
 10717              	.LVL786:
2058:src/xeq.c     **** 		report_err(ERR_RANGE);
 10718              		.loc 1 2058 2 is_stmt 1 view .LVU2822
2058:src/xeq.c     **** 		report_err(ERR_RANGE);
 10719              		.loc 1 2058 5 is_stmt 0 view .LVU2823
 10720 000e 0028     		cmp	r0, #0
2058:src/xeq.c     **** 		report_err(ERR_RANGE);
 10721              		.loc 1 2058 5 view .LVU2824
 10722 0010 02DB     		blt	.L810
 10723              	.L807:
2061:src/xeq.c     **** 
 10724              		.loc 1 2061 1 view .LVU2825
ARM GAS  /tmp/ccQQPlfu.s 			page 335


 10725 0012 03B0     		add	sp, sp, #12
 10726              		.cfi_remember_state
 10727              		.cfi_def_cfa_offset 4
 10728              		@ sp needed
 10729 0014 5DF804FB 		ldr	pc, [sp], #4
 10730              	.L810:
 10731              		.cfi_restore_state
 10732              	.LBB2153:
 10733              	.LBI2153:
2054:src/xeq.c     **** {
 10734              		.loc 1 2054 12 is_stmt 1 view .LVU2826
 10735              	.LVL787:
 10736              	.LBB2154:
2059:src/xeq.c     **** 	return c;
 10737              		.loc 1 2059 3 view .LVU2827
 10738              	.LBB2155:
 10739              	.LBI2155:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10740              		.loc 1 540 5 view .LVU2828
 10741              	.LBB2156:
 541:src/xeq.c     **** 		Error = e;
 10742              		.loc 1 541 2 view .LVU2829
 541:src/xeq.c     **** 		Error = e;
 10743              		.loc 1 541 12 is_stmt 0 view .LVU2830
 10744 0018 044B     		ldr	r3, .L811
 541:src/xeq.c     **** 		Error = e;
 10745              		.loc 1 541 5 view .LVU2831
 10746 001a 1A68     		ldr	r2, [r3]
 10747 001c 002A     		cmp	r2, #0
 10748 001e F8D1     		bne	.L807
 10749              	.LVL788:
 10750              	.LBB2157:
 10751              	.LBI2157:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10752              		.loc 1 540 5 is_stmt 1 view .LVU2832
 10753              	.LBB2158:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 10754              		.loc 1 542 3 view .LVU2833
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 10755              		.loc 1 542 9 is_stmt 0 view .LVU2834
 10756 0020 0822     		movs	r2, #8
 10757 0022 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 10758              		.loc 1 543 3 is_stmt 1 view .LVU2835
 10759              	.LVL789:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 10760              		.loc 1 543 3 is_stmt 0 view .LVU2836
 10761              	.LBE2158:
 10762              	.LBE2157:
 10763              	.LBE2156:
 10764              	.LBE2155:
 10765              	.LBE2154:
 10766              	.LBE2153:
2060:src/xeq.c     **** }
 10767              		.loc 1 2060 2 is_stmt 1 view .LVU2837
2061:src/xeq.c     **** 
 10768              		.loc 1 2061 1 is_stmt 0 view .LVU2838
ARM GAS  /tmp/ccQQPlfu.s 			page 336


 10769 0024 03B0     		add	sp, sp, #12
 10770              		.cfi_def_cfa_offset 4
 10771              		@ sp needed
 10772 0026 5DF804FB 		ldr	pc, [sp], #4
 10773              	.L812:
 10774 002a 00BF     		.align	2
 10775              	.L811:
 10776 002c 00000000 		.word	Error
 10777              		.cfi_endproc
 10778              	.LFE140:
 10780              		.section	.text.getX_int,"ax",%progbits
 10781              		.align	1
 10782              		.p2align 2,,3
 10783              		.global	getX_int
 10784              		.syntax unified
 10785              		.thumb
 10786              		.thumb_func
 10787              		.fpu fpv4-sp-d16
 10789              	getX_int:
 10790              	.LFB97:
1436:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10791              		.loc 1 1436 30 is_stmt 1 view -0
 10792              		.cfi_startproc
 10793              		@ args = 0, pretend = 0, frame = 0
 10794              		@ frame_needed = 0, uses_anonymous_args = 0
 10795              		@ link register save eliminated.
1437:src/xeq.c     **** }
 10796              		.loc 1 1437 2 view .LVU2840
1437:src/xeq.c     **** }
 10797              		.loc 1 1437 9 is_stmt 0 view .LVU2841
 10798 0000 6420     		movs	r0, #100
 10799 0002 FFF7FEBF 		b	get_reg_n_int
 10800              	.LVL790:
 10801              		.cfi_endproc
 10802              	.LFE97:
 10804 0006 00BF     		.section	.text.getX_int_sgn,"ax",%progbits
 10805              		.align	1
 10806              		.p2align 2,,3
 10807              		.global	getX_int_sgn
 10808              		.syntax unified
 10809              		.thumb
 10810              		.thumb_func
 10811              		.fpu fpv4-sp-d16
 10813              	getX_int_sgn:
 10814              	.LVL791:
 10815              	.LFB98:
1440:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10816              		.loc 1 1440 47 is_stmt 1 view -0
 10817              		.cfi_startproc
 10818              		@ args = 0, pretend = 0, frame = 0
 10819              		@ frame_needed = 0, uses_anonymous_args = 0
 10820              		@ link register save eliminated.
1441:src/xeq.c     **** }
 10821              		.loc 1 1441 2 view .LVU2843
1440:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10822              		.loc 1 1440 47 is_stmt 0 view .LVU2844
 10823 0000 0146     		mov	r1, r0
ARM GAS  /tmp/ccQQPlfu.s 			page 337


1441:src/xeq.c     **** }
 10824              		.loc 1 1441 9 view .LVU2845
 10825 0002 6420     		movs	r0, #100
 10826              	.LVL792:
1441:src/xeq.c     **** }
 10827              		.loc 1 1441 9 view .LVU2846
 10828 0004 FFF7FEBF 		b	get_reg_n_int_sgn
 10829              	.LVL793:
1441:src/xeq.c     **** }
 10830              		.loc 1 1441 9 view .LVU2847
 10831              		.cfi_endproc
 10832              	.LFE98:
 10834              		.section	.text.set_reg_n_int_sgn,"ax",%progbits
 10835              		.align	1
 10836              		.p2align 2,,3
 10837              		.global	set_reg_n_int_sgn
 10838              		.syntax unified
 10839              		.thumb
 10840              		.thumb_func
 10841              		.fpu fpv4-sp-d16
 10843              	set_reg_n_int_sgn:
 10844              	.LVL794:
 10845              	.LFB100:
1461:src/xeq.c     **** 	if (is_intmode()) {
 10846              		.loc 1 1461 72 is_stmt 1 view -0
 10847              		.cfi_startproc
 10848              		@ args = 4, pretend = 0, frame = 40
 10849              		@ frame_needed = 0, uses_anonymous_args = 0
1462:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10850              		.loc 1 1462 2 view .LVU2849
1462:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10851              		.loc 1 1462 6 is_stmt 0 view .LVU2850
 10852 0000 1749     		ldr	r1, .L825
1461:src/xeq.c     **** 	if (is_intmode()) {
 10853              		.loc 1 1461 72 view .LVU2851
 10854 0002 30B5     		push	{r4, r5, lr}
 10855              		.cfi_def_cfa_offset 12
 10856              		.cfi_offset 4, -12
 10857              		.cfi_offset 5, -8
 10858              		.cfi_offset 14, -4
1462:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10859              		.loc 1 1462 6 view .LVU2852
 10860 0004 0968     		ldr	r1, [r1]
 10861 0006 91F8E857 		ldrb	r5, [r1, #2024]	@ zero_extendqisi2
1462:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10862              		.loc 1 1462 5 view .LVU2853
 10863 000a E907     		lsls	r1, r5, #31
1461:src/xeq.c     **** 	if (is_intmode()) {
 10864              		.loc 1 1461 72 view .LVU2854
 10865 000c 8BB0     		sub	sp, sp, #44
 10866              		.cfi_def_cfa_offset 56
1461:src/xeq.c     **** 	if (is_intmode()) {
 10867              		.loc 1 1461 72 view .LVU2855
 10868 000e 0446     		mov	r4, r0
1462:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10869              		.loc 1 1462 5 view .LVU2856
 10870 0010 11D5     		bpl	.L816
ARM GAS  /tmp/ccQQPlfu.s 			page 338


 10871              	.LVL795:
1462:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10872              		.loc 1 1462 5 view .LVU2857
 10873 0012 1046     		mov	r0, r2
 10874              	.LVL796:
1462:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10875              		.loc 1 1462 5 view .LVU2858
 10876 0014 1946     		mov	r1, r3
 10877              	.LVL797:
 10878              	.LBB2165:
 10879              	.LBI2165:
1461:src/xeq.c     **** 	if (is_intmode()) {
 10880              		.loc 1 1461 6 is_stmt 1 view .LVU2859
 10881              	.LBB2166:
1463:src/xeq.c     **** 	} else {
 10882              		.loc 1 1463 3 view .LVU2860
 10883 0016 0E9A     		ldr	r2, [sp, #56]
 10884              	.LVL798:
1463:src/xeq.c     **** 	} else {
 10885              		.loc 1 1463 3 is_stmt 0 view .LVU2861
 10886 0018 FFF7FEFF 		bl	build_value
 10887              	.LVL799:
1463:src/xeq.c     **** 	} else {
 10888              		.loc 1 1463 3 view .LVU2862
 10889 001c 0B46     		mov	r3, r1
 10890 001e 0246     		mov	r2, r0
 10891              	.LBB2167:
 10892              	.LBB2168:
1417:src/xeq.c     **** }
 10893              		.loc 1 1417 8 view .LVU2863
 10894 0020 2046     		mov	r0, r4
 10895 0022 CDE90023 		strd	r2, [sp]
 10896              	.LVL800:
1417:src/xeq.c     **** }
 10897              		.loc 1 1417 8 view .LVU2864
 10898              	.LBE2168:
 10899              	.LBI2167:
1416:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10900              		.loc 1 1416 6 is_stmt 1 view .LVU2865
 10901              	.LBB2169:
1417:src/xeq.c     **** }
 10902              		.loc 1 1417 2 view .LVU2866
1417:src/xeq.c     **** }
 10903              		.loc 1 1417 8 is_stmt 0 view .LVU2867
 10904 0026 FFF7FEFF 		bl	get_reg_n
 10905              	.LVL801:
1417:src/xeq.c     **** }
 10906              		.loc 1 1417 2 view .LVU2868
 10907 002a 0822     		movs	r2, #8
 10908 002c 6946     		mov	r1, sp
 10909 002e FFF7FEFF 		bl	xcopy
 10910              	.LVL802:
1417:src/xeq.c     **** }
 10911              		.loc 1 1417 2 view .LVU2869
 10912              	.LBE2169:
 10913              	.LBE2167:
 10914              	.LBE2166:
ARM GAS  /tmp/ccQQPlfu.s 			page 339


 10915              	.LBE2165:
1472:src/xeq.c     **** 
 10916              		.loc 1 1472 1 view .LVU2870
 10917 0032 0BB0     		add	sp, sp, #44
 10918              		.cfi_remember_state
 10919              		.cfi_def_cfa_offset 12
 10920              		@ sp needed
 10921 0034 30BD     		pop	{r4, r5, pc}
 10922              	.LVL803:
 10923              	.L816:
 10924              		.cfi_restore_state
 10925              	.LBB2170:
1465:src/xeq.c     **** 
 10926              		.loc 1 1465 3 is_stmt 1 view .LVU2871
1467:src/xeq.c     **** 		if (sgn)
 10927              		.loc 1 1467 3 view .LVU2872
 10928 0036 6846     		mov	r0, sp
 10929              	.LVL804:
1467:src/xeq.c     **** 		if (sgn)
 10930              		.loc 1 1467 3 is_stmt 0 view .LVU2873
 10931 0038 FFF7FEFF 		bl	ullint_to_dn
 10932              	.LVL805:
1468:src/xeq.c     **** 			dn_minus(&t, &t);
 10933              		.loc 1 1468 3 is_stmt 1 view .LVU2874
1468:src/xeq.c     **** 			dn_minus(&t, &t);
 10934              		.loc 1 1468 6 is_stmt 0 view .LVU2875
 10935 003c 0E9B     		ldr	r3, [sp, #56]
 10936 003e 2BB9     		cbnz	r3, .L823
1470:src/xeq.c     **** 	}
 10937              		.loc 1 1470 3 is_stmt 1 view .LVU2876
 10938 0040 6946     		mov	r1, sp
 10939 0042 2046     		mov	r0, r4
 10940 0044 FFF7FEFF 		bl	setRegister
 10941              	.LVL806:
 10942              	.L824:
1470:src/xeq.c     **** 	}
 10943              		.loc 1 1470 3 is_stmt 0 view .LVU2877
 10944              	.LBE2170:
1472:src/xeq.c     **** 
 10945              		.loc 1 1472 1 view .LVU2878
 10946 0048 0BB0     		add	sp, sp, #44
 10947              		.cfi_remember_state
 10948              		.cfi_def_cfa_offset 12
 10949              		@ sp needed
 10950 004a 30BD     		pop	{r4, r5, pc}
 10951              	.LVL807:
 10952              	.L823:
 10953              		.cfi_restore_state
 10954              	.LBB2171:
1469:src/xeq.c     **** 		setRegister(index, &t);
 10955              		.loc 1 1469 4 is_stmt 1 view .LVU2879
 10956 004c 6946     		mov	r1, sp
 10957 004e 6846     		mov	r0, sp
 10958 0050 FFF7FEFF 		bl	dn_minus
 10959              	.LVL808:
1470:src/xeq.c     **** 	}
 10960              		.loc 1 1470 3 view .LVU2880
ARM GAS  /tmp/ccQQPlfu.s 			page 340


 10961 0054 6946     		mov	r1, sp
 10962 0056 2046     		mov	r0, r4
 10963 0058 FFF7FEFF 		bl	setRegister
 10964              	.LVL809:
 10965 005c F4E7     		b	.L824
 10966              	.L826:
 10967 005e 00BF     		.align	2
 10968              	.L825:
 10969 0060 00000000 		.word	main_ram
 10970              	.LBE2171:
 10971              		.cfi_endproc
 10972              	.LFE100:
 10974              		.section	.text.op_roundingmode,"ax",%progbits
 10975              		.align	1
 10976              		.p2align 2,,3
 10977              		.global	op_roundingmode
 10978              		.syntax unified
 10979              		.thumb
 10980              		.thumb_func
 10981              		.fpu fpv4-sp-d16
 10983              	op_roundingmode:
 10984              	.LVL810:
 10985              	.LFB34:
 613:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10986              		.loc 1 613 37 view -0
 10987              		.cfi_startproc
 10988              		@ args = 0, pretend = 0, frame = 0
 10989              		@ frame_needed = 0, uses_anonymous_args = 0
 614:src/xeq.c     **** }
 10990              		.loc 1 614 2 view .LVU2882
 10991              	.LBB2172:
 10992              	.LBI2172:
1503:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 10993              		.loc 1 1503 6 view .LVU2883
 10994              	.LBB2173:
1504:src/xeq.c     **** }
 10995              		.loc 1 1504 2 view .LVU2884
 10996              	.LBE2173:
 10997              	.LBE2172:
 613:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10998              		.loc 1 613 37 is_stmt 0 view .LVU2885
 10999 0000 00B5     		push	{lr}
 11000              		.cfi_def_cfa_offset 4
 11001              		.cfi_offset 14, -4
 614:src/xeq.c     **** }
 11002              		.loc 1 614 21 view .LVU2886
 11003 0002 084B     		ldr	r3, .L829
 11004              	.LVL811:
 614:src/xeq.c     **** }
 11005              		.loc 1 614 21 view .LVU2887
 11006 0004 1B68     		ldr	r3, [r3]
 11007              	.LVL812:
 614:src/xeq.c     **** }
 11008              		.loc 1 614 21 view .LVU2888
 11009 0006 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 613:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 11010              		.loc 1 613 37 view .LVU2889
ARM GAS  /tmp/ccQQPlfu.s 			page 341


 11011 000a 83B0     		sub	sp, sp, #12
 11012              		.cfi_def_cfa_offset 16
 11013              	.LBB2176:
 11014              	.LBB2174:
1504:src/xeq.c     **** }
 11015              		.loc 1 1504 2 view .LVU2890
 11016 000c 0021     		movs	r1, #0
 11017              	.LBE2174:
 11018              	.LBE2176:
 614:src/xeq.c     **** }
 11019              		.loc 1 614 21 view .LVU2891
 11020 000e C2F30212 		ubfx	r2, r2, #4, #3
 11021              	.LBB2177:
 11022              	.LBB2175:
1504:src/xeq.c     **** }
 11023              		.loc 1 1504 2 view .LVU2892
 11024 0012 D2B2     		uxtb	r2, r2
 11025 0014 0023     		movs	r3, #0
 11026              	.LVL813:
1504:src/xeq.c     **** }
 11027              		.loc 1 1504 2 view .LVU2893
 11028 0016 0091     		str	r1, [sp]
 11029              	.LVL814:
1504:src/xeq.c     **** }
 11030              		.loc 1 1504 2 view .LVU2894
 11031 0018 6420     		movs	r0, #100
 11032              	.LVL815:
1504:src/xeq.c     **** }
 11033              		.loc 1 1504 2 view .LVU2895
 11034 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 11035              	.LVL816:
1504:src/xeq.c     **** }
 11036              		.loc 1 1504 2 view .LVU2896
 11037              	.LBE2175:
 11038              	.LBE2177:
 615:src/xeq.c     **** 
 11039              		.loc 1 615 1 view .LVU2897
 11040 001e 03B0     		add	sp, sp, #12
 11041              		.cfi_def_cfa_offset 4
 11042              		@ sp needed
 11043 0020 5DF804FB 		ldr	pc, [sp], #4
 11044              	.L830:
 11045              		.align	2
 11046              	.L829:
 11047 0024 00000000 		.word	main_ram
 11048              		.cfi_endproc
 11049              	.LFE34:
 11051              		.section	.text.register_from_int,"ax",%progbits
 11052              		.align	1
 11053              		.p2align 2,,3
 11054              		.syntax unified
 11055              		.thumb
 11056              		.thumb_func
 11057              		.fpu fpv4-sp-d16
 11059              	register_from_int:
 11060              	.LVL817:
 11061              	.LFB101:
ARM GAS  /tmp/ccQQPlfu.s 			page 342


1479:src/xeq.c     **** 	int sgn;
 11062              		.loc 1 1479 69 is_stmt 1 view -0
 11063              		.cfi_startproc
 11064              		@ args = 0, pretend = 0, frame = 8
 11065              		@ frame_needed = 0, uses_anonymous_args = 0
1480:src/xeq.c     **** 	unsigned long long int val;
 11066              		.loc 1 1480 2 view .LVU2899
1481:src/xeq.c     **** 	const int xin = XromFlags.xIN;
 11067              		.loc 1 1481 2 view .LVU2900
1482:src/xeq.c     **** 	
 11068              		.loc 1 1482 2 view .LVU2901
1479:src/xeq.c     **** 	int sgn;
 11069              		.loc 1 1479 69 is_stmt 0 view .LVU2902
 11070 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 11071              		.cfi_def_cfa_offset 28
 11072              		.cfi_offset 4, -28
 11073              		.cfi_offset 5, -24
 11074              		.cfi_offset 6, -20
 11075              		.cfi_offset 7, -16
 11076              		.cfi_offset 8, -12
 11077              		.cfi_offset 9, -8
 11078              		.cfi_offset 14, -4
1482:src/xeq.c     **** 	
 11079              		.loc 1 1482 27 view .LVU2903
 11080 0004 154C     		ldr	r4, .L837
 11081 0006 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
1479:src/xeq.c     **** 	int sgn;
 11082              		.loc 1 1479 69 view .LVU2904
 11083 0008 0546     		mov	r5, r0
 11084 000a 85B0     		sub	sp, sp, #20
 11085              		.cfi_def_cfa_offset 48
1479:src/xeq.c     **** 	int sgn;
 11086              		.loc 1 1479 69 view .LVU2905
 11087 000c 0846     		mov	r0, r1
 11088              	.LVL818:
1482:src/xeq.c     **** 	
 11089              		.loc 1 1482 27 view .LVU2906
 11090 000e DE09     		lsrs	r6, r3, #7
 11091              	.LVL819:
1484:src/xeq.c     **** 		XromFlags.xIN = 0;
 11092              		.loc 1 1484 2 is_stmt 1 view .LVU2907
1484:src/xeq.c     **** 		XromFlags.xIN = 0;
 11093              		.loc 1 1484 5 is_stmt 0 view .LVU2908
 11094 0010 12B1     		cbz	r2, .L832
1485:src/xeq.c     **** 	UState.intm = 1;
 11095              		.loc 1 1485 3 is_stmt 1 view .LVU2909
1485:src/xeq.c     **** 	UState.intm = 1;
 11096              		.loc 1 1485 17 is_stmt 0 view .LVU2910
 11097 0012 6FF3C713 		bfc	r3, #7, #1
 11098              	.LVL820:
1485:src/xeq.c     **** 	UState.intm = 1;
 11099              		.loc 1 1485 17 view .LVU2911
 11100 0016 6370     		strb	r3, [r4, #1]
 11101              	.LVL821:
 11102              	.L832:
1486:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11103              		.loc 1 1486 2 is_stmt 1 view .LVU2912
ARM GAS  /tmp/ccQQPlfu.s 			page 343


1486:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11104              		.loc 1 1486 14 is_stmt 0 view .LVU2913
 11105 0018 114F     		ldr	r7, .L837+4
 11106 001a 3A68     		ldr	r2, [r7]
 11107              	.LVL822:
1486:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11108              		.loc 1 1486 14 view .LVU2914
 11109 001c 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
 11110 0020 43F00103 		orr	r3, r3, #1
 11111 0024 82F8E837 		strb	r3, [r2, #2024]
1487:src/xeq.c     **** 
 11112              		.loc 1 1487 2 is_stmt 1 view .LVU2915
1487:src/xeq.c     **** 
 11113              		.loc 1 1487 8 is_stmt 0 view .LVU2916
 11114 0028 03A9     		add	r1, sp, #12
 11115              	.LVL823:
1487:src/xeq.c     **** 
 11116              		.loc 1 1487 8 view .LVU2917
 11117 002a FFF7FEFF 		bl	get_reg_n_int_sgn
 11118              	.LVL824:
1489:src/xeq.c     **** 	UState.intm = 0;
 11119              		.loc 1 1489 16 view .LVU2918
 11120 002e 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
1490:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11121              		.loc 1 1490 14 view .LVU2919
 11122 0030 3B68     		ldr	r3, [r7]
1489:src/xeq.c     **** 	UState.intm = 0;
 11123              		.loc 1 1489 16 view .LVU2920
 11124 0032 66F3C712 		bfi	r2, r6, #7, #1
 11125 0036 6270     		strb	r2, [r4, #1]
1487:src/xeq.c     **** 
 11126              		.loc 1 1487 8 view .LVU2921
 11127 0038 8946     		mov	r9, r1
1490:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11128              		.loc 1 1490 14 view .LVU2922
 11129 003a 93F8E817 		ldrb	r1, [r3, #2024]	@ zero_extendqisi2
 11130 003e 6FF30001 		bfc	r1, #0, #1
 11131 0042 83F8E817 		strb	r1, [r3, #2024]
1491:src/xeq.c     **** }
 11132              		.loc 1 1491 2 view .LVU2923
 11133 0046 039B     		ldr	r3, [sp, #12]
 11134 0048 0093     		str	r3, [sp]
1487:src/xeq.c     **** 
 11135              		.loc 1 1487 8 view .LVU2924
 11136 004a 8046     		mov	r8, r0
 11137              	.LVL825:
1489:src/xeq.c     **** 	UState.intm = 0;
 11138              		.loc 1 1489 2 is_stmt 1 view .LVU2925
1490:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11139              		.loc 1 1490 2 view .LVU2926
1491:src/xeq.c     **** }
 11140              		.loc 1 1491 2 view .LVU2927
 11141 004c 4246     		mov	r2, r8
 11142 004e 4B46     		mov	r3, r9
 11143 0050 2846     		mov	r0, r5
 11144 0052 FFF7FEFF 		bl	set_reg_n_int_sgn
 11145              	.LVL826:
ARM GAS  /tmp/ccQQPlfu.s 			page 344


1492:src/xeq.c     **** 
 11146              		.loc 1 1492 1 is_stmt 0 view .LVU2928
 11147 0056 05B0     		add	sp, sp, #20
 11148              		.cfi_def_cfa_offset 28
 11149              		@ sp needed
 11150 0058 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 11151              	.LVL827:
 11152              	.L838:
1492:src/xeq.c     **** 
 11153              		.loc 1 1492 1 view .LVU2929
 11154              		.align	2
 11155              	.L837:
 11156 005c 00000000 		.word	XromParams
 11157 0060 00000000 		.word	main_ram
 11158              		.cfi_endproc
 11159              	.LFE101:
 11161              		.section	.text.int_from_register,"ax",%progbits
 11162              		.align	1
 11163              		.p2align 2,,3
 11164              		.syntax unified
 11165              		.thumb
 11166              		.thumb_func
 11167              		.fpu fpv4-sp-d16
 11169              	int_from_register:
 11170              	.LVL828:
 11171              	.LFB99:
1448:src/xeq.c     **** 	int sgn;
 11172              		.loc 1 1448 48 is_stmt 1 view -0
 11173              		.cfi_startproc
 11174              		@ args = 0, pretend = 0, frame = 8
 11175              		@ frame_needed = 0, uses_anonymous_args = 0
1449:src/xeq.c     **** 	unsigned long long int val;
 11176              		.loc 1 1449 2 view .LVU2931
1450:src/xeq.c     **** 	
 11177              		.loc 1 1450 2 view .LVU2932
1452:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11178              		.loc 1 1452 2 view .LVU2933
1448:src/xeq.c     **** 	int sgn;
 11179              		.loc 1 1448 48 is_stmt 0 view .LVU2934
 11180 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 11181              		.cfi_def_cfa_offset 20
 11182              		.cfi_offset 4, -20
 11183              		.cfi_offset 5, -16
 11184              		.cfi_offset 6, -12
 11185              		.cfi_offset 7, -8
 11186              		.cfi_offset 14, -4
1452:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11187              		.loc 1 1452 14 view .LVU2935
 11188 0002 104D     		ldr	r5, .L841
 11189 0004 2B68     		ldr	r3, [r5]
 11190 0006 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1448:src/xeq.c     **** 	int sgn;
 11191              		.loc 1 1448 48 view .LVU2936
 11192 000a 85B0     		sub	sp, sp, #20
 11193              		.cfi_def_cfa_offset 40
1452:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11194              		.loc 1 1452 14 view .LVU2937
ARM GAS  /tmp/ccQQPlfu.s 			page 345


 11195 000c 6FF30002 		bfc	r2, #0, #1
1448:src/xeq.c     **** 	int sgn;
 11196              		.loc 1 1448 48 view .LVU2938
 11197 0010 0446     		mov	r4, r0
1452:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11198              		.loc 1 1452 14 view .LVU2939
 11199 0012 83F8E827 		strb	r2, [r3, #2024]
1453:src/xeq.c     **** 
 11200              		.loc 1 1453 2 is_stmt 1 view .LVU2940
1453:src/xeq.c     **** 
 11201              		.loc 1 1453 8 is_stmt 0 view .LVU2941
 11202 0016 0846     		mov	r0, r1
 11203              	.LVL829:
1453:src/xeq.c     **** 
 11204              		.loc 1 1453 8 view .LVU2942
 11205 0018 03A9     		add	r1, sp, #12
 11206              	.LVL830:
1453:src/xeq.c     **** 
 11207              		.loc 1 1453 8 view .LVU2943
 11208 001a FFF7FEFF 		bl	get_reg_n_int_sgn
 11209              	.LVL831:
1453:src/xeq.c     **** 
 11210              		.loc 1 1453 8 view .LVU2944
 11211 001e 0F46     		mov	r7, r1
1455:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11212              		.loc 1 1455 14 view .LVU2945
 11213 0020 2968     		ldr	r1, [r5]
 11214 0022 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
 11215 0026 43F00103 		orr	r3, r3, #1
 11216 002a 81F8E837 		strb	r3, [r1, #2024]
1456:src/xeq.c     **** }
 11217              		.loc 1 1456 2 view .LVU2946
 11218 002e 039B     		ldr	r3, [sp, #12]
 11219 0030 0093     		str	r3, [sp]
1453:src/xeq.c     **** 
 11220              		.loc 1 1453 8 view .LVU2947
 11221 0032 0646     		mov	r6, r0
 11222              	.LVL832:
1455:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11223              		.loc 1 1455 2 is_stmt 1 view .LVU2948
1456:src/xeq.c     **** }
 11224              		.loc 1 1456 2 view .LVU2949
 11225 0034 3246     		mov	r2, r6
 11226 0036 2046     		mov	r0, r4
 11227 0038 3B46     		mov	r3, r7
 11228 003a FFF7FEFF 		bl	set_reg_n_int_sgn
 11229              	.LVL833:
1457:src/xeq.c     **** 
 11230              		.loc 1 1457 1 is_stmt 0 view .LVU2950
 11231 003e 05B0     		add	sp, sp, #20
 11232              		.cfi_def_cfa_offset 20
 11233              		@ sp needed
 11234 0040 F0BD     		pop	{r4, r5, r6, r7, pc}
 11235              	.LVL834:
 11236              	.L842:
1457:src/xeq.c     **** 
 11237              		.loc 1 1457 1 view .LVU2951
ARM GAS  /tmp/ccQQPlfu.s 			page 346


 11238 0042 00BF     		.align	2
 11239              	.L841:
 11240 0044 00000000 		.word	main_ram
 11241              		.cfi_endproc
 11242              	.LFE99:
 11244              		.section	.text.switch_to_int,"ax",%progbits
 11245              		.align	1
 11246              		.p2align 2,,3
 11247              		.syntax unified
 11248              		.thumb
 11249              		.thumb_func
 11250              		.fpu fpv4-sp-d16
 11252              	switch_to_int:
 11253              	.LFB207:
3725:src/xeq.c     **** 	int i;
 11254              		.loc 1 3725 33 is_stmt 1 view -0
 11255              		.cfi_startproc
 11256              		@ args = 0, pretend = 0, frame = 40
 11257              		@ frame_needed = 0, uses_anonymous_args = 0
3726:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
 11258              		.loc 1 3726 2 view .LVU2953
3727:src/xeq.c     **** 	const int dbl = is_dblmode();
 11259              		.loc 1 3727 2 view .LVU2954
3725:src/xeq.c     **** 	int i;
 11260              		.loc 1 3725 33 is_stmt 0 view .LVU2955
 11261 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 11262              		.cfi_def_cfa_offset 24
 11263              		.cfi_offset 4, -24
 11264              		.cfi_offset 5, -20
 11265              		.cfi_offset 6, -16
 11266              		.cfi_offset 7, -12
 11267              		.cfi_offset 8, -8
 11268              		.cfi_offset 14, -4
3727:src/xeq.c     **** 	const int dbl = is_dblmode();
 11269              		.loc 1 3727 26 view .LVU2956
 11270 0004 DFF87480 		ldr	r8, .L851+4
3727:src/xeq.c     **** 	const int dbl = is_dblmode();
 11271              		.loc 1 3727 25 view .LVU2957
 11272 0008 1B49     		ldr	r1, .L851
3727:src/xeq.c     **** 	const int dbl = is_dblmode();
 11273              		.loc 1 3727 26 view .LVU2958
 11274 000a D8F80020 		ldr	r2, [r8]
3727:src/xeq.c     **** 	const int dbl = is_dblmode();
 11275              		.loc 1 3727 32 view .LVU2959
 11276 000e 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 11277              	.LBB2178:
 11278              	.LBB2179:
1113:src/xeq.c     **** }
 11279              		.loc 1 1113 24 view .LVU2960
 11280 0012 B2F8E827 		ldrh	r2, [r2, #2024]
 11281              	.LBE2179:
 11282              	.LBE2178:
3727:src/xeq.c     **** 	const int dbl = is_dblmode();
 11283              		.loc 1 3727 32 view .LVU2961
 11284 0016 C3F3C003 		ubfx	r3, r3, #3, #1
 11285              	.LBB2183:
 11286              	.LBB2180:
ARM GAS  /tmp/ccQQPlfu.s 			page 347


1113:src/xeq.c     **** }
 11287              		.loc 1 1113 24 view .LVU2962
 11288 001a 44F20106 		movw	r6, #16385
 11289              	.LBE2180:
 11290              	.LBE2183:
3727:src/xeq.c     **** 	const int dbl = is_dblmode();
 11291              		.loc 1 3727 6 view .LVU2963
 11292 001e 31F81350 		ldrh	r5, [r1, r3, lsl #1]
 11293              	.LVL835:
3728:src/xeq.c     **** 
 11294              		.loc 1 3728 2 is_stmt 1 view .LVU2964
 11295              	.LBB2184:
 11296              	.LBI2178:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11297              		.loc 1 1112 5 view .LVU2965
 11298              	.LBB2181:
1113:src/xeq.c     **** }
 11299              		.loc 1 1113 2 view .LVU2966
 11300              	.LBE2181:
 11301              	.LBE2184:
3725:src/xeq.c     **** 	int i;
 11302              		.loc 1 3725 33 is_stmt 0 view .LVU2967
 11303 0022 8AB0     		sub	sp, sp, #40
 11304              		.cfi_def_cfa_offset 64
 11305              	.LBB2185:
 11306              	.LBB2182:
1113:src/xeq.c     **** }
 11307              		.loc 1 1113 24 view .LVU2968
 11308 0024 1640     		ands	r6, r6, r2
 11309              	.LVL836:
1113:src/xeq.c     **** }
 11310              		.loc 1 1113 24 view .LVU2969
 11311              	.LBE2182:
 11312              	.LBE2185:
3730:src/xeq.c     **** 		if (mask & 0x800) {
 11313              		.loc 1 3730 2 is_stmt 1 view .LVU2970
3730:src/xeq.c     **** 		if (mask & 0x800) {
 11314              		.loc 1 3730 21 view .LVU2971
3730:src/xeq.c     **** 		if (mask & 0x800) {
 11315              		.loc 1 3730 9 is_stmt 0 view .LVU2972
 11316 0026 6F24     		movs	r4, #111
 11317 0028 07E0     		b	.L846
 11318              	.LVL837:
 11319              	.L844:
3735:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 11320              		.loc 1 3735 11 view .LVU2973
 11321 002a B6F5804F 		cmp	r6, #16384
 11322 002e 12D0     		beq	.L849
 11323              	.L845:
3730:src/xeq.c     **** 		if (mask & 0x800) {
 11324              		.loc 1 3730 36 is_stmt 1 discriminator 2 view .LVU2974
 11325 0030 013C     		subs	r4, r4, #1
 11326              	.LVL838:
3730:src/xeq.c     **** 		if (mask & 0x800) {
 11327              		.loc 1 3730 2 is_stmt 0 discriminator 2 view .LVU2975
 11328 0032 632C     		cmp	r4, #99
3730:src/xeq.c     **** 		if (mask & 0x800) {
ARM GAS  /tmp/ccQQPlfu.s 			page 348


 11329              		.loc 1 3730 46 discriminator 2 view .LVU2976
 11330 0034 4FEA4505 		lsl	r5, r5, #1
 11331              	.LVL839:
3730:src/xeq.c     **** 		if (mask & 0x800) {
 11332              		.loc 1 3730 21 is_stmt 1 discriminator 2 view .LVU2977
3730:src/xeq.c     **** 		if (mask & 0x800) {
 11333              		.loc 1 3730 2 is_stmt 0 discriminator 2 view .LVU2978
 11334 0038 0AD0     		beq	.L850
 11335              	.LVL840:
 11336              	.L846:
3731:src/xeq.c     **** 			// register belongs to stack
 11337              		.loc 1 3731 3 is_stmt 1 view .LVU2979
3735:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 11338              		.loc 1 3735 8 view .LVU2980
3731:src/xeq.c     **** 			// register belongs to stack
 11339              		.loc 1 3731 6 is_stmt 0 view .LVU2981
 11340 003a 2B05     		lsls	r3, r5, #20
 11341 003c F5D5     		bpl	.L844
3733:src/xeq.c     **** 		}
 11342              		.loc 1 3733 4 is_stmt 1 view .LVU2982
 11343 003e 2146     		mov	r1, r4
 11344 0040 2046     		mov	r0, r4
3730:src/xeq.c     **** 		if (mask & 0x800) {
 11345              		.loc 1 3730 36 is_stmt 0 view .LVU2983
 11346 0042 013C     		subs	r4, r4, #1
 11347              	.LVL841:
3733:src/xeq.c     **** 		}
 11348              		.loc 1 3733 4 view .LVU2984
 11349 0044 FFF7FEFF 		bl	int_from_register
 11350              	.LVL842:
3730:src/xeq.c     **** 		if (mask & 0x800) {
 11351              		.loc 1 3730 36 is_stmt 1 view .LVU2985
3730:src/xeq.c     **** 		if (mask & 0x800) {
 11352              		.loc 1 3730 2 is_stmt 0 view .LVU2986
 11353 0048 632C     		cmp	r4, #99
3730:src/xeq.c     **** 		if (mask & 0x800) {
 11354              		.loc 1 3730 46 view .LVU2987
 11355 004a 4FEA4505 		lsl	r5, r5, #1
 11356              	.LVL843:
3730:src/xeq.c     **** 		if (mask & 0x800) {
 11357              		.loc 1 3730 21 is_stmt 1 view .LVU2988
3730:src/xeq.c     **** 		if (mask & 0x800) {
 11358              		.loc 1 3730 2 is_stmt 0 view .LVU2989
 11359 004e F4D1     		bne	.L846
 11360              	.L850:
3740:src/xeq.c     **** 
 11361              		.loc 1 3740 1 view .LVU2990
 11362 0050 0AB0     		add	sp, sp, #40
 11363              		.cfi_remember_state
 11364              		.cfi_def_cfa_offset 24
 11365              		@ sp needed
 11366 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11367              	.LVL844:
 11368              	.L849:
 11369              		.cfi_restore_state
3737:src/xeq.c     **** 		}
 11370              		.loc 1 3737 4 is_stmt 1 view .LVU2991
ARM GAS  /tmp/ccQQPlfu.s 			page 349


3737:src/xeq.c     **** 		}
 11371              		.loc 1 3737 26 is_stmt 0 view .LVU2992
 11372 0056 D8F80030 		ldr	r3, [r8]
3737:src/xeq.c     **** 		}
 11373              		.loc 1 3737 38 view .LVU2993
 11374 005a 2046     		mov	r0, r4
3737:src/xeq.c     **** 		}
 11375              		.loc 1 3737 26 view .LVU2994
 11376 005c 03F22C43 		addw	r3, r3, #1068
3737:src/xeq.c     **** 		}
 11377              		.loc 1 3737 4 view .LVU2995
 11378 0060 03EBC407 		add	r7, r3, r4, lsl #3
3737:src/xeq.c     **** 		}
 11379              		.loc 1 3737 38 view .LVU2996
 11380 0064 FFF7FEFF 		bl	get_reg_n
 11381              	.LVL845:
 11382              	.LBB2186:
 11383              	.LBI2186:
 642:src/xeq.c     **** 	decNumber temp;
 11384              		.loc 1 642 6 is_stmt 1 view .LVU2997
 11385              	.LBB2187:
 643:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 11386              		.loc 1 643 2 view .LVU2998
 644:src/xeq.c     **** }
 11387              		.loc 1 644 2 view .LVU2999
 644:src/xeq.c     **** }
 11388              		.loc 1 644 24 is_stmt 0 view .LVU3000
 11389 0068 01A9     		add	r1, sp, #4
 11390 006a FFF7FEFF 		bl	decimal128ToNumber
 11391              	.LVL846:
 644:src/xeq.c     **** }
 11392              		.loc 1 644 24 view .LVU3001
 11393 006e 0146     		mov	r1, r0
 644:src/xeq.c     **** }
 11394              		.loc 1 644 2 view .LVU3002
 11395 0070 3846     		mov	r0, r7
 11396 0072 FFF7FEFF 		bl	packed_from_number
 11397              	.LVL847:
 645:src/xeq.c     **** 
 11398              		.loc 1 645 1 view .LVU3003
 11399 0076 DBE7     		b	.L845
 11400              	.L852:
 11401              		.align	2
 11402              	.L851:
 11403 0078 00000000 		.word	.LANCHOR3
 11404 007c 00000000 		.word	main_ram
 11405              	.LBE2187:
 11406              	.LBE2186:
 11407              		.cfi_endproc
 11408              	.LFE207:
 11410              		.section	.text.process_cmdline.part.0,"ax",%progbits
 11411              		.align	1
 11412              		.p2align 2,,3
 11413              		.syntax unified
 11414              		.thumb
 11415              		.thumb_func
 11416              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQQPlfu.s 			page 350


 11418              	process_cmdline.part.0:
 11419              	.LFB289:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 11420              		.loc 1 1220 6 is_stmt 1 view -0
 11421              		.cfi_startproc
 11422              		@ args = 0, pretend = 0, frame = 168
 11423              		@ frame_needed = 0, uses_anonymous_args = 0
 11424              	.LBB2210:
1224:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
 11425              		.loc 1 1224 3 view .LVU3005
 11426              	.LBE2210:
1215:src/xeq.c     **** }
 11427              		.loc 1 1215 2 view .LVU3006
 11428              	.LVL848:
 11429              	.LBB2254:
1225:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11430              		.loc 1 1225 3 view .LVU3007
 11431              	.LBE2254:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 11432              		.loc 1 1220 6 is_stmt 0 view .LVU3008
 11433 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 11434              		.cfi_def_cfa_offset 32
 11435              		.cfi_offset 4, -32
 11436              		.cfi_offset 5, -28
 11437              		.cfi_offset 6, -24
 11438              		.cfi_offset 7, -20
 11439              		.cfi_offset 8, -16
 11440              		.cfi_offset 9, -12
 11441              		.cfi_offset 10, -8
 11442              		.cfi_offset 14, -4
 11443              	.LBB2255:
1225:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11444              		.loc 1 1225 35 view .LVU3009
 11445 0004 8D4C     		ldr	r4, .L892
1235:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11446              		.loc 1 1235 7 view .LVU3010
 11447 0006 DFF84482 		ldr	r8, .L892+16
1225:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11448              		.loc 1 1225 22 view .LVU3011
 11449 000a A57F     		ldrb	r5, [r4, #30]	@ zero_extendqisi2
 11450              	.LVL849:
1227:src/xeq.c     **** #else
 11451              		.loc 1 1227 3 is_stmt 1 view .LVU3012
1232:src/xeq.c     **** 
 11452              		.loc 1 1232 3 view .LVU3013
 11453              	.LBE2255:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 11454              		.loc 1 1220 6 is_stmt 0 view .LVU3014
 11455 000c ACB0     		sub	sp, sp, #176
 11456              		.cfi_def_cfa_offset 208
 11457              	.LBB2256:
1232:src/xeq.c     **** 
 11458              		.loc 1 1232 3 view .LVU3015
 11459 000e 04F12001 		add	r1, r4, #32
 11460 0012 1422     		movs	r2, #20
 11461 0014 02A8     		add	r0, sp, #8
 11462 0016 FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/ccQQPlfu.s 			page 351


 11463              	.LVL850:
1234:src/xeq.c     **** 		if (!is_intmode()) {
 11464              		.loc 1 1234 3 is_stmt 1 view .LVU3016
1235:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11465              		.loc 1 1235 7 is_stmt 0 view .LVU3017
 11466 001a D8F80020 		ldr	r2, [r8]
1234:src/xeq.c     **** 		if (!is_intmode()) {
 11467              		.loc 1 1234 11 view .LVU3018
 11468 001e 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
1235:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11469              		.loc 1 1235 7 view .LVU3019
 11470 0020 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1234:src/xeq.c     **** 		if (!is_intmode()) {
 11471              		.loc 1 1234 26 view .LVU3020
 11472 0024 2CA9     		add	r1, sp, #176
 11473 0026 1944     		add	r1, r1, r3
 11474 0028 0020     		movs	r0, #0
1235:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11475              		.loc 1 1235 6 view .LVU3021
 11476 002a 12F00102 		ands	r2, r2, #1
1234:src/xeq.c     **** 		if (!is_intmode()) {
 11477              		.loc 1 1234 26 view .LVU3022
 11478 002e 01F8A80C 		strb	r0, [r1, #-168]
1235:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11479              		.loc 1 1235 3 is_stmt 1 view .LVU3023
1235:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11480              		.loc 1 1235 6 is_stmt 0 view .LVU3024
 11481 0032 16D1     		bne	.L855
1237:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11482              		.loc 1 1237 4 is_stmt 1 view .LVU3025
1237:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11483              		.loc 1 1237 15 is_stmt 0 view .LVU3026
 11484 0034 2CA9     		add	r1, sp, #176
1237:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11485              		.loc 1 1237 29 view .LVU3027
 11486 0036 013B     		subs	r3, r3, #1
1237:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11487              		.loc 1 1237 15 view .LVU3028
 11488 0038 0B44     		add	r3, r3, r1
1237:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11489              		.loc 1 1237 40 view .LVU3029
 11490 003a 13F8A81C 		ldrb	r1, [r3, #-168]	@ zero_extendqisi2
1237:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11491              		.loc 1 1237 7 view .LVU3030
 11492 003e 4439     		subs	r1, r1, #68
 11493 0040 0129     		cmp	r1, #1
 11494 0042 40F28B80 		bls	.L883
1239:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11495              		.loc 1 1239 9 is_stmt 1 view .LVU3031
1239:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11496              		.loc 1 1239 21 is_stmt 0 view .LVU3032
 11497 0046 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1239:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11498              		.loc 1 1239 20 view .LVU3033
 11499 0048 2CAB     		add	r3, sp, #176
 11500 004a 1344     		add	r3, r3, r2
1239:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
ARM GAS  /tmp/ccQQPlfu.s 			page 352


 11501              		.loc 1 1239 12 view .LVU3034
 11502 004c 13F8A83C 		ldrb	r3, [r3, #-168]	@ zero_extendqisi2
 11503 0050 442B     		cmp	r3, #68
 11504 0052 00F0D080 		beq	.L884
 11505              	.L857:
1250:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11506              		.loc 1 1250 4 is_stmt 1 view .LVU3035
1250:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11507              		.loc 1 1250 7 is_stmt 0 view .LVU3036
 11508 0056 002A     		cmp	r2, #0
 11509 0058 40F08680 		bne	.L858
 11510              	.L889:
1255:src/xeq.c     **** #endif
 11511              		.loc 1 1255 8 view .LVU3037
 11512 005c 012D     		cmp	r5, #1
 11513 005e 00F08380 		beq	.L858
 11514              	.L855:
1260:src/xeq.c     **** 		lift_if_enabled();
 11515              		.loc 1 1260 3 is_stmt 1 view .LVU3038
 11516              	.LBB2211:
 11517              	.LBB2212:
 11518              	.LBB2213:
 11519              	.LBB2214:
 738:src/xeq.c     **** }
 11520              		.loc 1 738 15 is_stmt 0 view .LVU3039
 11521 0062 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11522              	.LBE2214:
 11523              	.LBE2213:
 11524              	.LBE2212:
 11525              	.LBE2211:
1260:src/xeq.c     **** 		lift_if_enabled();
 11526              		.loc 1 1260 17 view .LVU3040
 11527 0064 0022     		movs	r2, #0
 11528              	.LBB2226:
 11529              	.LBB2221:
 742:src/xeq.c     **** 		lift();
 11530              		.loc 1 742 5 view .LVU3041
 11531 0066 5B06     		lsls	r3, r3, #25
 11532              	.LBE2221:
 11533              	.LBE2226:
1260:src/xeq.c     **** 		lift_if_enabled();
 11534              		.loc 1 1260 17 view .LVU3042
 11535 0068 2277     		strb	r2, [r4, #28]
1261:src/xeq.c     **** 		set_lift();
 11536              		.loc 1 1261 3 is_stmt 1 view .LVU3043
 11537              	.LBB2227:
 11538              	.LBI2211:
 741:src/xeq.c     **** 	if (get_lift())
 11539              		.loc 1 741 6 view .LVU3044
 11540              	.LBB2222:
 742:src/xeq.c     **** 		lift();
 11541              		.loc 1 742 2 view .LVU3045
 11542              	.LBB2218:
 11543              	.LBI2213:
 737:src/xeq.c     **** 	return State2.state_lift;
 11544              		.loc 1 737 12 view .LVU3046
 11545              	.LBB2215:
ARM GAS  /tmp/ccQQPlfu.s 			page 353


 738:src/xeq.c     **** }
 11546              		.loc 1 738 2 view .LVU3047
 11547              	.LBE2215:
 11548              	.LBE2218:
 742:src/xeq.c     **** 		lift();
 11549              		.loc 1 742 5 is_stmt 0 view .LVU3048
 11550 006a 00F18B80 		bmi	.L885
 11551              	.L860:
 11552              	.LBE2222:
 11553              	.LBE2227:
1262:src/xeq.c     **** 		CmdLineDot = 0;
 11554              		.loc 1 1262 3 is_stmt 1 view .LVU3049
 11555              	.LBB2228:
 11556              	.LBI2228:
 761:src/xeq.c     ****     State2.state_lift = 1;
 11557              		.loc 1 761 6 view .LVU3050
 11558              	.LBB2229:
 762:src/xeq.c     **** }
 11559              		.loc 1 762 5 view .LVU3051
 762:src/xeq.c     **** }
 11560              		.loc 1 762 23 is_stmt 0 view .LVU3052
 11561 006e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11562              	.LBE2229:
 11563              	.LBE2228:
1265:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11564              		.loc 1 1265 7 view .LVU3053
 11565 0070 D8F80010 		ldr	r1, [r8]
 11566              	.LBB2231:
 11567              	.LBB2230:
 762:src/xeq.c     **** }
 11568              		.loc 1 762 23 view .LVU3054
 11569 0074 43F04003 		orr	r3, r3, #64
 11570 0078 E375     		strb	r3, [r4, #23]
 11571              	.LBE2230:
 11572              	.LBE2231:
1263:src/xeq.c     **** 		CmdLineEex = 0;
 11573              		.loc 1 1263 3 is_stmt 1 view .LVU3055
1265:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11574              		.loc 1 1265 7 is_stmt 0 view .LVU3056
 11575 007a 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
1263:src/xeq.c     **** 		CmdLineEex = 0;
 11576              		.loc 1 1263 14 view .LVU3057
 11577 007e 0022     		movs	r2, #0
1265:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11578              		.loc 1 1265 6 view .LVU3058
 11579 0080 13F00103 		ands	r3, r3, #1
1263:src/xeq.c     **** 		CmdLineEex = 0;
 11580              		.loc 1 1263 14 view .LVU3059
 11581 0084 A277     		strb	r2, [r4, #30]
1264:src/xeq.c     **** 		if (is_intmode()) {
 11582              		.loc 1 1264 3 is_stmt 1 view .LVU3060
1264:src/xeq.c     **** 		if (is_intmode()) {
 11583              		.loc 1 1264 14 is_stmt 0 view .LVU3061
 11584 0086 6277     		strb	r2, [r4, #29]
1265:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11585              		.loc 1 1265 3 is_stmt 1 view .LVU3062
1265:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
ARM GAS  /tmp/ccQQPlfu.s 			page 354


 11586              		.loc 1 1265 6 is_stmt 0 view .LVU3063
 11587 0088 7FD1     		bne	.L886
1269:src/xeq.c     **** 			char *d0, *d1, *d2;
 11588              		.loc 1 1269 10 is_stmt 1 view .LVU3064
1269:src/xeq.c     **** 			char *d0, *d1, *d2;
 11589              		.loc 1 1269 13 is_stmt 0 view .LVU3065
 11590 008a 022D     		cmp	r5, #2
 11591 008c 4CD1     		bne	.L867
 11592              	.LBB2232:
1270:src/xeq.c     **** 			int neg;
 11593              		.loc 1 1270 4 is_stmt 1 view .LVU3066
1271:src/xeq.c     **** 
 11594              		.loc 1 1271 4 view .LVU3067
1273:src/xeq.c     **** 				return;
 11595              		.loc 1 1273 4 view .LVU3068
1276:src/xeq.c     **** #endif
 11596              		.loc 1 1276 4 view .LVU3069
1276:src/xeq.c     **** #endif
 11597              		.loc 1 1276 17 is_stmt 0 view .LVU3070
 11598 008e 91F8E627 		ldrb	r2, [r1, #2022]	@ zero_extendqisi2
 11599 0092 42F02002 		orr	r2, r2, #32
 11600 0096 81F8E627 		strb	r2, [r1, #2022]
1278:src/xeq.c     **** 				neg = 1;
 11601              		.loc 1 1278 4 is_stmt 1 view .LVU3071
1278:src/xeq.c     **** 				neg = 1;
 11602              		.loc 1 1278 7 is_stmt 0 view .LVU3072
 11603 009a 9DF80820 		ldrb	r2, [sp, #8]	@ zero_extendqisi2
 11604 009e 2D2A     		cmp	r2, #45
1283:src/xeq.c     **** 			}
 11605              		.loc 1 1283 8 view .LVU3073
 11606 00a0 14BF     		ite	ne
 11607 00a2 02AD     		addne	r5, sp, #8
 11608              	.LVL851:
1280:src/xeq.c     **** 			} else {
 11609              		.loc 1 1280 8 view .LVU3074
 11610 00a4 0DF10905 		addeq	r5, sp, #9
1285:src/xeq.c     **** 			*d1++ = '\0';
 11611              		.loc 1 1285 9 view .LVU3075
 11612 00a8 4FF02E01 		mov	r1, #46
 11613 00ac 2846     		mov	r0, r5
1282:src/xeq.c     **** 				d0 = cmdline;
 11614              		.loc 1 1282 9 view .LVU3076
 11615 00ae 14BF     		ite	ne
 11616 00b0 1C46     		movne	r4, r3
1279:src/xeq.c     **** 				d0 = cmdline+1;
 11617              		.loc 1 1279 9 view .LVU3077
 11618 00b2 0124     		moveq	r4, #1
 11619              	.LVL852:
1285:src/xeq.c     **** 			*d1++ = '\0';
 11620              		.loc 1 1285 4 is_stmt 1 view .LVU3078
1285:src/xeq.c     **** 			*d1++ = '\0';
 11621              		.loc 1 1285 9 is_stmt 0 view .LVU3079
 11622 00b4 FFF7FEFF 		bl	find_char
 11623              	.LVL853:
1286:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11624              		.loc 1 1286 4 is_stmt 1 view .LVU3080
1286:src/xeq.c     **** 			d2 = find_char(d1, '.');
ARM GAS  /tmp/ccQQPlfu.s 			page 355


 11625              		.loc 1 1286 10 is_stmt 0 view .LVU3081
 11626 00b8 8146     		mov	r9, r0
 11627 00ba 4FF0000A 		mov	r10, #0
1286:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11628              		.loc 1 1286 7 view .LVU3082
 11629 00be 461C     		adds	r6, r0, #1
 11630              	.LVL854:
1286:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11631              		.loc 1 1286 10 view .LVU3083
 11632 00c0 09F802AB 		strb	r10, [r9], #2
1287:src/xeq.c     **** 			*d2++ = '\0';
 11633              		.loc 1 1287 4 is_stmt 1 view .LVU3084
1287:src/xeq.c     **** 			*d2++ = '\0';
 11634              		.loc 1 1287 9 is_stmt 0 view .LVU3085
 11635 00c4 2E21     		movs	r1, #46
 11636 00c6 3046     		mov	r0, r6
 11637 00c8 FFF7FEFF 		bl	find_char
 11638              	.LVL855:
1288:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11639              		.loc 1 1288 4 is_stmt 1 view .LVU3086
1288:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11640              		.loc 1 1288 7 is_stmt 0 view .LVU3087
 11641 00cc 0746     		mov	r7, r0
 11642              	.LVL856:
1289:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11643              		.loc 1 1289 4 view .LVU3088
 11644 00ce 5C4A     		ldr	r2, .L892+4
1288:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11645              		.loc 1 1288 10 view .LVU3089
 11646 00d0 07F801AB 		strb	r10, [r7], #1
 11647              	.LVL857:
1289:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11648              		.loc 1 1289 4 is_stmt 1 view .LVU3090
 11649 00d4 11A8     		add	r0, sp, #68
 11650 00d6 3946     		mov	r1, r7
 11651 00d8 FFF7FEFF 		bl	decNumberFromString
 11652              	.LVL858:
1290:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11653              		.loc 1 1290 4 view .LVU3091
 11654 00dc 2946     		mov	r1, r5
 11655 00de 584A     		ldr	r2, .L892+4
 11656 00e0 1AA8     		add	r0, sp, #104
 11657 00e2 FFF7FEFF 		bl	decNumberFromString
 11658              	.LVL859:
1292:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11659              		.loc 1 1292 4 view .LVU3092
1292:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11660              		.loc 1 1292 7 is_stmt 0 view .LVU3093
 11661 00e6 4F45     		cmp	r7, r9
1293:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 11662              		.loc 1 1293 5 view .LVU3094
 11663 00e8 08AD     		add	r5, sp, #32
 11664              	.LVL860:
1292:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11665              		.loc 1 1292 7 view .LVU3095
 11666 00ea 00F09780 		beq	.L887
1302:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
ARM GAS  /tmp/ccQQPlfu.s 			page 356


 11667              		.loc 1 1302 5 is_stmt 1 view .LVU3096
 11668 00ee 544A     		ldr	r2, .L892+4
 11669 00f0 3146     		mov	r1, r6
 11670 00f2 2846     		mov	r0, r5
 11671 00f4 FFF7FEFF 		bl	decNumberFromString
 11672              	.LVL861:
1304:src/xeq.c     **** #endif
 11673              		.loc 1 1304 5 view .LVU3097
1304:src/xeq.c     **** #endif
 11674              		.loc 1 1304 25 is_stmt 0 view .LVU3098
 11675 00f8 D8F80030 		ldr	r3, [r8]
 11676 00fc 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 11677 0100 6AF30412 		bfi	r2, r10, #4, #1
 11678 0104 83F8E627 		strb	r2, [r3, #2022]
 11679              	.L870:
1307:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
 11680              		.loc 1 1307 4 is_stmt 1 view .LVU3099
 11681 0108 11AA     		add	r2, sp, #68
 11682 010a 2946     		mov	r1, r5
 11683 010c 23A8     		add	r0, sp, #140
 11684 010e FFF7FEFF 		bl	dn_divide
 11685              	.LVL862:
1309:src/xeq.c     **** #endif
 11686              		.loc 1 1309 4 view .LVU3100
1309:src/xeq.c     **** #endif
 11687              		.loc 1 1309 7 is_stmt 0 view .LVU3101
 11688 0112 9DF89430 		ldrb	r3, [sp, #148]	@ zero_extendqisi2
 11689 0116 13F0700F 		tst	r3, #112
 11690 011a 64D0     		beq	.L888
1312:src/xeq.c     **** 				dn_minus(&x, &x);
 11691              		.loc 1 1312 4 is_stmt 1 view .LVU3102
1312:src/xeq.c     **** 				dn_minus(&x, &x);
 11692              		.loc 1 1312 7 is_stmt 0 view .LVU3103
 11693 011c 4CB1     		cbz	r4, .L882
 11694              	.L891:
1313:src/xeq.c     **** 			setX(&x);
 11695              		.loc 1 1313 5 is_stmt 1 view .LVU3104
 11696 011e 1AA9     		add	r1, sp, #104
 11697 0120 0846     		mov	r0, r1
 11698 0122 FFF7FEFF 		bl	dn_minus
 11699              	.LVL863:
1314:src/xeq.c     **** 		} else {
 11700              		.loc 1 1314 4 view .LVU3105
 11701              	.LBB2233:
 11702              	.LBI2233:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 11703              		.loc 1 822 6 view .LVU3106
 11704              	.LBB2234:
 823:src/xeq.c     **** }
 11705              		.loc 1 823 2 view .LVU3107
 11706 0126 04E0     		b	.L882
 11707              	.LVL864:
 11708              	.L867:
 823:src/xeq.c     **** }
 11709              		.loc 1 823 2 is_stmt 0 view .LVU3108
 11710              	.LBE2234:
 11711              	.LBE2233:
ARM GAS  /tmp/ccQQPlfu.s 			page 357


 11712              	.LBE2232:
1316:src/xeq.c     **** 			setX(&x);
 11713              		.loc 1 1316 4 is_stmt 1 view .LVU3109
 11714 0128 454A     		ldr	r2, .L892+4
 11715 012a 02A9     		add	r1, sp, #8
 11716 012c 1AA8     		add	r0, sp, #104
 11717 012e FFF7FEFF 		bl	decNumberFromString
 11718              	.LVL865:
 11719              	.L882:
1317:src/xeq.c     **** 		}
 11720              		.loc 1 1317 4 view .LVU3110
 11721              	.LBB2235:
 11722              	.LBI2235:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 11723              		.loc 1 822 6 view .LVU3111
 11724              	.LBB2236:
 823:src/xeq.c     **** }
 11725              		.loc 1 823 2 view .LVU3112
 11726 0132 1AA9     		add	r1, sp, #104
 11727              	.LVL866:
 823:src/xeq.c     **** }
 11728              		.loc 1 823 2 is_stmt 0 view .LVU3113
 11729 0134 6420     		movs	r0, #100
 11730 0136 FFF7FEFF 		bl	setRegister
 11731              	.LVL867:
 11732              	.L866:
 823:src/xeq.c     **** }
 11733              		.loc 1 823 2 view .LVU3114
 11734              	.LBE2236:
 11735              	.LBE2235:
1319:src/xeq.c     **** #ifndef DM42
 11736              		.loc 1 1319 3 is_stmt 1 view .LVU3115
 11737              	.LBB2237:
 11738              	.LBI2237:
3897:src/xeq.c     **** 	if (!Running && !XromRunning)
 11739              		.loc 1 3897 6 view .LVU3116
 11740              	.LBB2238:
3898:src/xeq.c     **** 		State.entryp = 1;
 11741              		.loc 1 3898 2 view .LVU3117
 11742              	.LBB2239:
 11743              	.LBI2239:
3897:src/xeq.c     **** 	if (!Running && !XromRunning)
 11744              		.loc 1 3897 6 view .LVU3118
 11745              	.LBE2239:
3898:src/xeq.c     **** 		State.entryp = 1;
 11746              		.loc 1 3898 6 is_stmt 0 view .LVU3119
 11747 013a 424A     		ldr	r2, .L892+8
 11748              	.LBB2241:
 11749              	.LBB2240:
3898:src/xeq.c     **** 		State.entryp = 1;
 11750              		.loc 1 3898 18 view .LVU3120
 11751 013c 424B     		ldr	r3, .L892+12
3898:src/xeq.c     **** 		State.entryp = 1;
 11752              		.loc 1 3898 15 view .LVU3121
 11753 013e 1268     		ldr	r2, [r2]
 11754 0140 1B68     		ldr	r3, [r3]
 11755 0142 1343     		orrs	r3, r2, r3
ARM GAS  /tmp/ccQQPlfu.s 			page 358


 11756 0144 07D1     		bne	.L853
3899:src/xeq.c     **** }
 11757              		.loc 1 3899 3 is_stmt 1 view .LVU3122
3899:src/xeq.c     **** }
 11758              		.loc 1 3899 16 is_stmt 0 view .LVU3123
 11759 0146 D8F80020 		ldr	r2, [r8]
 11760 014a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 11761 014e 43F01003 		orr	r3, r3, #16
 11762 0152 82F8DD37 		strb	r3, [r2, #2013]
 11763              	.L853:
 11764              	.LBE2240:
 11765              	.LBE2241:
 11766              	.LBE2238:
 11767              	.LBE2237:
 11768              	.LBE2256:
1324:src/xeq.c     **** 
 11769              		.loc 1 1324 1 view .LVU3124
 11770 0156 2CB0     		add	sp, sp, #176
 11771              		.cfi_remember_state
 11772              		.cfi_def_cfa_offset 32
 11773              		@ sp needed
 11774 0158 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 11775              	.LVL868:
 11776              	.L883:
 11777              		.cfi_restore_state
 11778              	.LBB2257:
1238:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
 11779              		.loc 1 1238 5 is_stmt 1 view .LVU3125
1238:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
 11780              		.loc 1 1238 30 is_stmt 0 view .LVU3126
 11781 015c 03F8A82C 		strb	r2, [r3, #-168]
 11782 0160 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1250:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11783              		.loc 1 1250 4 is_stmt 1 view .LVU3127
1250:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11784              		.loc 1 1250 7 is_stmt 0 view .LVU3128
 11785 0162 002A     		cmp	r2, #0
 11786 0164 3FF47AAF 		beq	.L889
 11787              	.L858:
1258:src/xeq.c     **** 		}
 11788              		.loc 1 1258 5 is_stmt 1 view .LVU3129
1258:src/xeq.c     **** 		}
 11789              		.loc 1 1258 18 is_stmt 0 view .LVU3130
 11790 0168 D8F80030 		ldr	r3, [r8]
 11791 016c 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 11792 0170 6FF34512 		bfc	r2, #5, #1
 11793 0174 83F8E627 		strb	r2, [r3, #2022]
1260:src/xeq.c     **** 		lift_if_enabled();
 11794              		.loc 1 1260 3 is_stmt 1 view .LVU3131
 11795              	.LBB2242:
 11796              	.LBB2223:
 11797              	.LBB2219:
 11798              	.LBB2216:
 738:src/xeq.c     **** }
 11799              		.loc 1 738 15 is_stmt 0 view .LVU3132
 11800 0178 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11801              	.LBE2216:
ARM GAS  /tmp/ccQQPlfu.s 			page 359


 11802              	.LBE2219:
 11803              	.LBE2223:
 11804              	.LBE2242:
1260:src/xeq.c     **** 		lift_if_enabled();
 11805              		.loc 1 1260 17 view .LVU3133
 11806 017a 0022     		movs	r2, #0
 11807              	.LBB2243:
 11808              	.LBB2224:
 742:src/xeq.c     **** 		lift();
 11809              		.loc 1 742 5 view .LVU3134
 11810 017c 5B06     		lsls	r3, r3, #25
 11811              	.LBE2224:
 11812              	.LBE2243:
1260:src/xeq.c     **** 		lift_if_enabled();
 11813              		.loc 1 1260 17 view .LVU3135
 11814 017e 2277     		strb	r2, [r4, #28]
1261:src/xeq.c     **** 		set_lift();
 11815              		.loc 1 1261 3 is_stmt 1 view .LVU3136
 11816              	.LBB2244:
 741:src/xeq.c     **** 	if (get_lift())
 11817              		.loc 1 741 6 view .LVU3137
 11818              	.LBB2225:
 742:src/xeq.c     **** 		lift();
 11819              		.loc 1 742 2 view .LVU3138
 11820              	.LBB2220:
 737:src/xeq.c     **** 	return State2.state_lift;
 11821              		.loc 1 737 12 view .LVU3139
 11822              	.LBB2217:
 738:src/xeq.c     **** }
 11823              		.loc 1 738 2 view .LVU3140
 11824              	.LBE2217:
 11825              	.LBE2220:
 742:src/xeq.c     **** 		lift();
 11826              		.loc 1 742 5 is_stmt 0 view .LVU3141
 11827 0180 7FF575AF 		bpl	.L860
 11828              	.L885:
 743:src/xeq.c     **** }
 11829              		.loc 1 743 3 is_stmt 1 view .LVU3142
 11830 0184 FFF7FEFF 		bl	lift
 11831              	.LVL869:
 11832 0188 71E7     		b	.L860
 11833              	.L886:
 11834              	.LBE2225:
 11835              	.LBE2244:
 11836              	.LBB2245:
1266:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11837              		.loc 1 1266 4 view .LVU3143
1266:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11838              		.loc 1 1266 41 is_stmt 0 view .LVU3144
 11839 018a 9DF80890 		ldrb	r9, [sp, #8]	@ zero_extendqisi2
 11840 018e A9F12D09 		sub	r9, r9, #45
 11841 0192 B9FA89F9 		clz	r9, r9
1267:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11842              		.loc 1 1267 31 view .LVU3145
 11843 0196 FFF7FEFF 		bl	int_base
 11844              	.LVL870:
1266:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
ARM GAS  /tmp/ccQQPlfu.s 			page 360


 11845              		.loc 1 1266 41 view .LVU3146
 11846 019a 4FEA5919 		lsr	r9, r9, #5
 11847              	.LVL871:
1267:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11848              		.loc 1 1267 4 is_stmt 1 view .LVU3147
1267:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11849              		.loc 1 1267 31 is_stmt 0 view .LVU3148
 11850 019e 02AB     		add	r3, sp, #8
 11851 01a0 03EB0902 		add	r2, r3, r9
 11852              	.LVL872:
 11853              	.LBB2246:
 11854              	.LBI2246:
1151:src/xeq.c     **** 	unsigned long long int x = 0;
 11855              		.loc 1 1151 24 is_stmt 1 view .LVU3149
 11856              	.LBB2247:
1152:src/xeq.c     **** 
 11857              		.loc 1 1152 2 view .LVU3150
1152:src/xeq.c     **** 
 11858              		.loc 1 1152 25 is_stmt 0 view .LVU3151
 11859 01a4 0026     		movs	r6, #0
 11860 01a6 0027     		movs	r7, #0
 11861 01a8 02E0     		b	.L865
 11862              	.LVL873:
 11863              	.L890:
 11864              	.LBB2248:
1166:src/xeq.c     **** 	}
 11865              		.loc 1 1166 5 view .LVU3152
 11866 01aa E618     		adds	r6, r4, r3
 11867              	.LVL874:
1166:src/xeq.c     **** 	}
 11868              		.loc 1 1166 5 view .LVU3153
 11869 01ac 45F10007 		adc	r7, r5, #0
 11870              	.LVL875:
1166:src/xeq.c     **** 	}
 11871              		.loc 1 1166 5 view .LVU3154
 11872              	.LBE2248:
1154:src/xeq.c     **** 		unsigned int n;
 11873              		.loc 1 1154 8 is_stmt 1 view .LVU3155
 11874              	.L865:
1154:src/xeq.c     **** 		unsigned int n;
 11875              		.loc 1 1154 2 view .LVU3156
 11876              	.LBB2249:
1155:src/xeq.c     **** 		const char c = *s++;
 11877              		.loc 1 1155 3 view .LVU3157
1156:src/xeq.c     **** 
 11878              		.loc 1 1156 3 view .LVU3158
1159:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 11879              		.loc 1 1159 4 view .LVU3159
1160:src/xeq.c     **** 			n = c - 'A' + 10;
 11880              		.loc 1 1160 8 view .LVU3160
1161:src/xeq.c     **** 		else
 11881              		.loc 1 1161 4 view .LVU3161
1156:src/xeq.c     **** 
 11882              		.loc 1 1156 14 is_stmt 0 view .LVU3162
 11883 01b0 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 11884              	.LVL876:
1158:src/xeq.c     **** 			n = c - '0';
ARM GAS  /tmp/ccQQPlfu.s 			page 361


 11885              		.loc 1 1158 3 is_stmt 1 view .LVU3163
1158:src/xeq.c     **** 			n = c - '0';
 11886              		.loc 1 1158 16 is_stmt 0 view .LVU3164
 11887 01b4 A1F13003 		sub	r3, r1, #48
1158:src/xeq.c     **** 			n = c - '0';
 11888              		.loc 1 1158 6 view .LVU3165
 11889 01b8 DCB2     		uxtb	r4, r3
 11890 01ba 092C     		cmp	r4, #9
1160:src/xeq.c     **** 			n = c - 'A' + 10;
 11891              		.loc 1 1160 11 view .LVU3166
 11892 01bc A1F14105 		sub	r5, r1, #65
1158:src/xeq.c     **** 			n = c - '0';
 11893              		.loc 1 1158 6 view .LVU3167
 11894 01c0 03D9     		bls	.L863
1160:src/xeq.c     **** 			n = c - 'A' + 10;
 11895              		.loc 1 1160 11 view .LVU3168
 11896 01c2 052D     		cmp	r5, #5
 11897 01c4 07D8     		bhi	.L864
1161:src/xeq.c     **** 		else
 11898              		.loc 1 1161 16 view .LVU3169
 11899 01c6 A1F13703 		sub	r3, r1, #55
 11900              	.LVL877:
 11901              	.L863:
1164:src/xeq.c     **** 			break;
 11902              		.loc 1 1164 3 is_stmt 1 view .LVU3170
1166:src/xeq.c     **** 	}
 11903              		.loc 1 1166 3 view .LVU3171
1166:src/xeq.c     **** 	}
 11904              		.loc 1 1166 9 is_stmt 0 view .LVU3172
 11905 01ca A0FB0645 		umull	r4, r5, r0, r6
1164:src/xeq.c     **** 			break;
 11906              		.loc 1 1164 6 view .LVU3173
 11907 01ce 9842     		cmp	r0, r3
1166:src/xeq.c     **** 	}
 11908              		.loc 1 1166 9 view .LVU3174
 11909 01d0 00FB0755 		mla	r5, r0, r7, r5
1164:src/xeq.c     **** 			break;
 11910              		.loc 1 1164 6 view .LVU3175
 11911 01d4 E9D8     		bhi	.L890
 11912              	.LVL878:
 11913              	.L864:
1164:src/xeq.c     **** 			break;
 11914              		.loc 1 1164 6 view .LVU3176
 11915              	.LBE2249:
1168:src/xeq.c     **** }
 11916              		.loc 1 1168 2 is_stmt 1 view .LVU3177
1168:src/xeq.c     **** }
 11917              		.loc 1 1168 2 is_stmt 0 view .LVU3178
 11918              	.LBE2247:
 11919              	.LBE2246:
1268:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
 11920              		.loc 1 1268 4 is_stmt 1 view .LVU3179
 11921              	.LBB2250:
 11922              	.LBI2250:
1503:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11923              		.loc 1 1503 6 view .LVU3180
 11924              	.LBB2251:
ARM GAS  /tmp/ccQQPlfu.s 			page 362


1504:src/xeq.c     **** }
 11925              		.loc 1 1504 2 view .LVU3181
 11926 01d6 CDF80090 		str	r9, [sp]
 11927 01da 3246     		mov	r2, r6
 11928 01dc 3B46     		mov	r3, r7
 11929 01de 6420     		movs	r0, #100
 11930 01e0 FFF7FEFF 		bl	set_reg_n_int_sgn
 11931              	.LVL879:
1505:src/xeq.c     **** 
 11932              		.loc 1 1505 1 is_stmt 0 view .LVU3182
 11933 01e4 A9E7     		b	.L866
 11934              	.LVL880:
 11935              	.L888:
1505:src/xeq.c     **** 
 11936              		.loc 1 1505 1 view .LVU3183
 11937              	.LBE2251:
 11938              	.LBE2250:
 11939              	.LBE2245:
 11940              	.LBB2252:
1311:src/xeq.c     **** 			if (neg)
 11941              		.loc 1 1311 5 is_stmt 1 view .LVU3184
 11942 01e6 1AA9     		add	r1, sp, #104
 11943 01e8 23AA     		add	r2, sp, #140
 11944 01ea 0846     		mov	r0, r1
 11945 01ec FFF7FEFF 		bl	dn_add
 11946              	.LVL881:
1312:src/xeq.c     **** 				dn_minus(&x, &x);
 11947              		.loc 1 1312 4 view .LVU3185
1312:src/xeq.c     **** 				dn_minus(&x, &x);
 11948              		.loc 1 1312 7 is_stmt 0 view .LVU3186
 11949 01f0 002C     		cmp	r4, #0
 11950 01f2 9ED0     		beq	.L882
 11951 01f4 93E7     		b	.L891
 11952              	.LVL882:
 11953              	.L884:
1312:src/xeq.c     **** 				dn_minus(&x, &x);
 11954              		.loc 1 1312 7 view .LVU3187
 11955              	.LBE2252:
1240:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11956              		.loc 1 1240 5 is_stmt 1 view .LVU3188
 11957 01f6 02AB     		add	r3, sp, #8
1240:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11958              		.loc 1 1240 58 is_stmt 0 view .LVU3189
 11959 01f8 511C     		adds	r1, r2, #1
1240:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11960              		.loc 1 1240 32 view .LVU3190
 11961 01fa 901C     		adds	r0, r2, #2
1240:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11962              		.loc 1 1240 5 view .LVU3191
 11963 01fc 1944     		add	r1, r1, r3
 11964 01fe 1844     		add	r0, r0, r3
 11965 0200 C2F11202 		rsb	r2, r2, #18
 11966 0204 FFF7FEFF 		bl	xcopy
 11967              	.LVL883:
1241:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11968              		.loc 1 1241 5 is_stmt 1 view .LVU3192
1241:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
ARM GAS  /tmp/ccQQPlfu.s 			page 363


 11969              		.loc 1 1241 13 is_stmt 0 view .LVU3193
 11970 0208 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1241:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11971              		.loc 1 1241 25 view .LVU3194
 11972 020a 2CAB     		add	r3, sp, #176
 11973 020c 1344     		add	r3, r3, r2
 11974 020e 4520     		movs	r0, #69
1242:src/xeq.c     **** 			}
 11975              		.loc 1 1242 29 view .LVU3195
 11976 0210 2D21     		movs	r1, #45
1241:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11977              		.loc 1 1241 25 view .LVU3196
 11978 0212 03F8A80C 		strb	r0, [r3, #-168]
1242:src/xeq.c     **** 			}
 11979              		.loc 1 1242 5 is_stmt 1 view .LVU3197
1242:src/xeq.c     **** 			}
 11980              		.loc 1 1242 29 is_stmt 0 view .LVU3198
 11981 0216 03F8A71C 		strb	r1, [r3, #-167]
 11982 021a 1CE7     		b	.L857
 11983              	.LVL884:
 11984              	.L887:
 11985              	.LBB2253:
1293:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 11986              		.loc 1 1293 5 is_stmt 1 view .LVU3199
 11987 021c 1AA9     		add	r1, sp, #104
 11988 021e 2846     		mov	r0, r5
 11989 0220 FFF7FEFF 		bl	decNumberCopy
 11990              	.LVL885:
1294:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
 11991              		.loc 1 1294 5 view .LVU3200
 11992 0224 1AA8     		add	r0, sp, #104
 11993 0226 FFF7FEFF 		bl	decNumberZero
 11994              	.LVL886:
1296:src/xeq.c     **** #endif
 11995              		.loc 1 1296 5 view .LVU3201
1296:src/xeq.c     **** #endif
 11996              		.loc 1 1296 25 is_stmt 0 view .LVU3202
 11997 022a D8F80020 		ldr	r2, [r8]
 11998 022e 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 11999 0232 43F01003 		orr	r3, r3, #16
 12000 0236 82F8E637 		strb	r3, [r2, #2022]
 12001 023a 65E7     		b	.L870
 12002              	.L893:
 12003              		.align	2
 12004              	.L892:
 12005 023c 00000000 		.word	StateWhileOn
 12006 0240 00000000 		.word	Ctx
 12007 0244 00000000 		.word	Running
 12008 0248 00000000 		.word	XromRunning
 12009 024c 00000000 		.word	main_ram
 12010              	.LBE2253:
 12011              	.LBE2257:
 12012              		.cfi_endproc
 12013              	.LFE289:
 12015              		.section	.text.process_cmdline,"ax",%progbits
 12016              		.align	1
 12017              		.p2align 2,,3
ARM GAS  /tmp/ccQQPlfu.s 			page 364


 12018              		.global	process_cmdline
 12019              		.syntax unified
 12020              		.thumb
 12021              		.thumb_func
 12022              		.fpu fpv4-sp-d16
 12024              	process_cmdline:
 12025              	.LFB88:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 12026              		.loc 1 1220 28 is_stmt 1 view -0
 12027              		.cfi_startproc
 12028              		@ args = 0, pretend = 0, frame = 0
 12029              		@ frame_needed = 0, uses_anonymous_args = 0
 12030              		@ link register save eliminated.
1221:src/xeq.c     **** 
 12031              		.loc 1 1221 2 view .LVU3204
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12032              		.loc 1 1223 2 view .LVU3205
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12033              		.loc 1 1223 6 is_stmt 0 view .LVU3206
 12034 0000 024B     		ldr	r3, .L897
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12035              		.loc 1 1223 5 view .LVU3207
 12036 0002 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 12037 0004 03B9     		cbnz	r3, .L896
1324:src/xeq.c     **** 
 12038              		.loc 1 1324 1 view .LVU3208
 12039 0006 7047     		bx	lr
 12040              	.L896:
 12041 0008 FFF7FEBF 		b	process_cmdline.part.0
 12042              	.LVL887:
 12043              	.L898:
 12044              		.align	2
 12045              	.L897:
 12046 000c 00000000 		.word	StateWhileOn
 12047              		.cfi_endproc
 12048              	.LFE88:
 12050              		.section	.text.cpx_pi,"ax",%progbits
 12051              		.align	1
 12052              		.p2align 2,,3
 12053              		.global	cpx_pi
 12054              		.syntax unified
 12055              		.thumb
 12056              		.thumb_func
 12057              		.fpu fpv4-sp-d16
 12059              	cpx_pi:
 12060              	.LVL888:
 12061              	.LFB76:
 967:src/xeq.c     **** 	switch (op) {
 12062              		.loc 1 967 29 is_stmt 1 view -0
 12063              		.cfi_startproc
 12064              		@ args = 0, pretend = 0, frame = 40
 12065              		@ frame_needed = 0, uses_anonymous_args = 0
 968:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12066              		.loc 1 968 2 view .LVU3210
 967:src/xeq.c     **** 	switch (op) {
 12067              		.loc 1 967 29 is_stmt 0 view .LVU3211
 12068 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/ccQQPlfu.s 			page 365


 12069              		.cfi_def_cfa_offset 16
 12070              		.cfi_offset 4, -16
 12071              		.cfi_offset 5, -12
 12072              		.cfi_offset 6, -8
 12073              		.cfi_offset 14, -4
 968:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12074              		.loc 1 968 2 view .LVU3212
 12075 0002 C728     		cmp	r0, #199
 967:src/xeq.c     **** 	switch (op) {
 12076              		.loc 1 967 29 view .LVU3213
 12077 0004 8AB0     		sub	sp, sp, #40
 12078              		.cfi_def_cfa_offset 56
 968:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12079              		.loc 1 968 2 view .LVU3214
 12080 0006 26D0     		beq	.L900
 12081 0008 C828     		cmp	r0, #200
 12082 000a 1AD1     		bne	.L911
 977:src/xeq.c     **** 		process_cmdline();
 12083              		.loc 1 977 3 is_stmt 1 view .LVU3215
 977:src/xeq.c     **** 		process_cmdline();
 12084              		.loc 1 977 21 is_stmt 0 view .LVU3216
 12085 000c 2B4D     		ldr	r5, .L914
 12086 000e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12087              	.LBB2258:
 12088              	.LBB2259:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12089              		.loc 1 1223 5 view .LVU3217
 12090 0010 2A7F     		ldrb	r2, [r5, #28]	@ zero_extendqisi2
 12091              	.LBE2259:
 12092              	.LBE2258:
 977:src/xeq.c     **** 		process_cmdline();
 12093              		.loc 1 977 21 view .LVU3218
 12094 0012 6FF38613 		bfc	r3, #6, #1
 12095 0016 EB75     		strb	r3, [r5, #23]
 978:src/xeq.c     **** 		State2.state_lift = 0;
 12096              		.loc 1 978 3 is_stmt 1 view .LVU3219
 12097              	.LBB2262:
 12098              	.LBI2258:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 12099              		.loc 1 1220 6 view .LVU3220
 12100              	.LBB2260:
1221:src/xeq.c     **** 
 12101              		.loc 1 1221 2 view .LVU3221
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12102              		.loc 1 1223 2 view .LVU3222
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12103              		.loc 1 1223 5 is_stmt 0 view .LVU3223
 12104 0018 002A     		cmp	r2, #0
 12105 001a 41D1     		bne	.L912
 12106              	.LVL889:
 12107              	.L905:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12108              		.loc 1 1223 5 view .LVU3224
 12109              	.LBE2260:
 12110              	.LBE2262:
 979:src/xeq.c     **** 		{
 12111              		.loc 1 979 3 is_stmt 1 view .LVU3225
ARM GAS  /tmp/ccQQPlfu.s 			page 366


 979:src/xeq.c     **** 		{
 12112              		.loc 1 979 21 is_stmt 0 view .LVU3226
 12113 001c EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12114 001e 284C     		ldr	r4, .L914+4
 12115 0020 6FF38613 		bfc	r3, #6, #1
 12116 0024 EB75     		strb	r3, [r5, #23]
 12117              	.LBB2263:
 981:src/xeq.c     **** 			getX(&r);
 12118              		.loc 1 981 4 is_stmt 1 view .LVU3227
 982:src/xeq.c     **** 			dn_multiply (&r, &const_PI, &r);
 12119              		.loc 1 982 4 view .LVU3228
 12120              	.LVL890:
 12121              	.LBB2264:
 12122              	.LBI2264:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 12123              		.loc 1 818 12 view .LVU3229
 12124              	.LBB2265:
 819:src/xeq.c     **** }
 12125              		.loc 1 819 2 view .LVU3230
 819:src/xeq.c     **** }
 12126              		.loc 1 819 9 is_stmt 0 view .LVU3231
 12127 0026 01A8     		add	r0, sp, #4
 12128              	.LVL891:
 819:src/xeq.c     **** }
 12129              		.loc 1 819 9 view .LVU3232
 12130 0028 6421     		movs	r1, #100
 12131 002a FFF7FEFF 		bl	getRegister
 12132              	.LVL892:
 819:src/xeq.c     **** }
 12133              		.loc 1 819 9 view .LVU3233
 12134              	.LBE2265:
 12135              	.LBE2264:
 983:src/xeq.c     **** 			setX(&r);
 12136              		.loc 1 983 4 is_stmt 1 view .LVU3234
 12137 002e 01AA     		add	r2, sp, #4
 12138 0030 2449     		ldr	r1, .L914+8
 12139 0032 1046     		mov	r0, r2
 12140 0034 FFF7FEFF 		bl	dn_multiply
 12141              	.LVL893:
 984:src/xeq.c     **** 		}
 12142              		.loc 1 984 4 view .LVU3235
 12143              	.LBB2266:
 12144              	.LBI2266:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 12145              		.loc 1 822 6 view .LVU3236
 12146              	.LBB2267:
 823:src/xeq.c     **** }
 12147              		.loc 1 823 2 view .LVU3237
 12148 0038 01A9     		add	r1, sp, #4
 12149              	.LVL894:
 823:src/xeq.c     **** }
 12150              		.loc 1 823 2 is_stmt 0 view .LVU3238
 12151 003a 6420     		movs	r0, #100
 12152 003c FFF7FEFF 		bl	setRegister
 12153              	.LVL895:
 823:src/xeq.c     **** }
 12154              		.loc 1 823 2 view .LVU3239
ARM GAS  /tmp/ccQQPlfu.s 			page 367


 12155 0040 00E0     		b	.L902
 12156              	.LVL896:
 12157              	.L911:
 823:src/xeq.c     **** }
 12158              		.loc 1 823 2 view .LVU3240
 12159 0042 1F4C     		ldr	r4, .L914+4
 12160              	.LVL897:
 12161              	.L902:
 823:src/xeq.c     **** }
 12162              		.loc 1 823 2 view .LVU3241
 12163              	.LBE2267:
 12164              	.LBE2266:
 12165              	.LBE2263:
 986:src/xeq.c     **** 	}
 12166              		.loc 1 986 10 is_stmt 1 view .LVU3242
 988:src/xeq.c     **** }
 12167              		.loc 1 988 2 view .LVU3243
 12168 0044 2268     		ldr	r2, [r4]
 12169 0046 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 12170 004a 43F00103 		orr	r3, r3, #1
 12171 004e 82F8AD37 		strb	r3, [r2, #1965]
 989:src/xeq.c     **** 
 12172              		.loc 1 989 1 is_stmt 0 view .LVU3244
 12173 0052 0AB0     		add	sp, sp, #40
 12174              		.cfi_remember_state
 12175              		.cfi_def_cfa_offset 16
 12176              		@ sp needed
 12177 0054 70BD     		pop	{r4, r5, r6, pc}
 12178              	.LVL898:
 12179              	.L900:
 12180              		.cfi_restore_state
 970:src/xeq.c     **** 			stack_begin( 1 );
 12181              		.loc 1 970 3 is_stmt 1 view .LVU3245
 970:src/xeq.c     **** 			stack_begin( 1 );
 12182              		.loc 1 970 8 is_stmt 0 view .LVU3246
 12183 0056 1A4C     		ldr	r4, .L914+4
 12184 0058 2368     		ldr	r3, [r4]
 970:src/xeq.c     **** 			stack_begin( 1 );
 12185              		.loc 1 970 18 view .LVU3247
 12186 005a 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 970:src/xeq.c     **** 			stack_begin( 1 );
 12187              		.loc 1 970 6 view .LVU3248
 12188 005e 12F0060F 		tst	r2, #6
 12189 0062 20D0     		beq	.L913
 12190              	.LVL899:
 12191              	.L903:
 974:src/xeq.c     **** 		break;
 12192              		.loc 1 974 3 is_stmt 1 view .LVU3249
 12193              	.LBB2268:
 12194              	.LBB2269:
1113:src/xeq.c     **** }
 12195              		.loc 1 1113 24 is_stmt 0 view .LVU3250
 12196 0064 B3F8E817 		ldrh	r1, [r3, #2024]
 12197              	.LBE2269:
 12198              	.LBE2268:
 974:src/xeq.c     **** 		break;
 12199              		.loc 1 974 3 view .LVU3251
ARM GAS  /tmp/ccQQPlfu.s 			page 368


 12200 0068 174B     		ldr	r3, .L914+12
 12201              	.LBB2272:
 12202              	.LBB2270:
1113:src/xeq.c     **** }
 12203              		.loc 1 1113 24 view .LVU3252
 12204 006a 44F20105 		movw	r5, #16385
 12205 006e 2940     		ands	r1, r1, r5
 12206              	.LBE2270:
 12207              	.LBE2272:
 974:src/xeq.c     **** 		break;
 12208              		.loc 1 974 22 view .LVU3253
 12209 0070 A1F58041 		sub	r1, r1, #16384
 12210 0074 B1FA81F1 		clz	r1, r1
 12211 0078 4909     		lsrs	r1, r1, #5
 12212 007a 6620     		movs	r0, #102
 974:src/xeq.c     **** 		break;
 12213              		.loc 1 974 3 view .LVU3254
 12214 007c 1E68     		ldr	r6, [r3]
 12215              	.LBB2273:
 12216              	.LBI2268:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12217              		.loc 1 1112 5 is_stmt 1 view .LVU3255
 12218              	.LBB2271:
1113:src/xeq.c     **** }
 12219              		.loc 1 1113 2 view .LVU3256
 12220              	.LBE2271:
 12221              	.LBE2273:
 974:src/xeq.c     **** 		break;
 12222              		.loc 1 974 22 is_stmt 0 view .LVU3257
 12223 007e FFF7FEFF 		bl	get_const
 12224              	.LVL900:
 12225              	.LBB2274:
 12226              	.LBB2275:
 12227              	.LBB2276:
 12228              	.LBB2277:
1113:src/xeq.c     **** }
 12229              		.loc 1 1113 24 view .LVU3258
 12230 0082 2368     		ldr	r3, [r4]
 12231 0084 B3F8E837 		ldrh	r3, [r3, #2024]
 12232              	.LBE2277:
 12233              	.LBE2276:
 721:src/xeq.c     **** }
 12234              		.loc 1 721 2 view .LVU3259
 12235 0088 1D40     		ands	r5, r5, r3
 12236 008a B5F5804F 		cmp	r5, #16384
 12237              	.LBE2275:
 12238              	.LBE2274:
 974:src/xeq.c     **** 		break;
 12239              		.loc 1 974 22 view .LVU3260
 12240 008e 0146     		mov	r1, r0
 12241              	.LVL901:
 12242              	.LBB2281:
 12243              	.LBI2274:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12244              		.loc 1 720 6 is_stmt 1 view .LVU3261
 12245              	.LBB2280:
 721:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 369


 12246              		.loc 1 721 2 view .LVU3262
 12247              	.LBB2279:
 12248              	.LBI2276:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12249              		.loc 1 1112 5 view .LVU3263
 12250              	.LBB2278:
1113:src/xeq.c     **** }
 12251              		.loc 1 1113 2 view .LVU3264
 12252              	.LBE2278:
 12253              	.LBE2279:
 721:src/xeq.c     **** }
 12254              		.loc 1 721 2 is_stmt 0 view .LVU3265
 12255 0090 08BF     		it	eq
 12256 0092 1022     		moveq	r2, #16
 12257 0094 3046     		mov	r0, r6
 12258              	.LVL902:
 721:src/xeq.c     **** }
 12259              		.loc 1 721 2 view .LVU3266
 12260 0096 18BF     		it	ne
 12261 0098 0822     		movne	r2, #8
 12262 009a FFF7FEFF 		bl	xcopy
 12263              	.LVL903:
 722:src/xeq.c     **** 
 12264              		.loc 1 722 1 view .LVU3267
 12265 009e D1E7     		b	.L902
 12266              	.LVL904:
 12267              	.L912:
 722:src/xeq.c     **** 
 12268              		.loc 1 722 1 view .LVU3268
 12269              	.LBE2280:
 12270              	.LBE2281:
 12271              	.LBB2282:
 12272              	.LBB2261:
 12273 00a0 FFF7FEFF 		bl	process_cmdline.part.0
 12274              	.LVL905:
 722:src/xeq.c     **** 
 12275              		.loc 1 722 1 view .LVU3269
 12276 00a4 BAE7     		b	.L905
 12277              	.LVL906:
 12278              	.L913:
 722:src/xeq.c     **** 
 12279              		.loc 1 722 1 view .LVU3270
 12280              	.LBE2261:
 12281              	.LBE2282:
 971:src/xeq.c     **** 			SET_REAL;
 12282              		.loc 1 971 4 is_stmt 1 view .LVU3271
 12283 00a6 0120     		movs	r0, #1
 12284              	.LVL907:
 971:src/xeq.c     **** 			SET_REAL;
 12285              		.loc 1 971 4 is_stmt 0 view .LVU3272
 12286 00a8 FFF7FEFF 		bl	stack_begin
 12287              	.LVL908:
 972:src/xeq.c     **** 		}
 12288              		.loc 1 972 4 is_stmt 1 view .LVU3273
 12289 00ac 2368     		ldr	r3, [r4]
 12290 00ae 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 12291 00b2 42F00202 		orr	r2, r2, #2
ARM GAS  /tmp/ccQQPlfu.s 			page 370


 12292 00b6 83F8AC27 		strb	r2, [r3, #1964]
 12293 00ba D3E7     		b	.L903
 12294              	.L915:
 12295              		.align	2
 12296              	.L914:
 12297 00bc 00000000 		.word	StateWhileOn
 12298 00c0 00000000 		.word	main_ram
 12299 00c4 00000000 		.word	const_PI
 12300 00c8 00000000 		.word	StackBase
 12301              		.cfi_endproc
 12302              	.LFE76:
 12304              		.section	.text.process_cmdline_set_lift,"ax",%progbits
 12305              		.align	1
 12306              		.p2align 2,,3
 12307              		.global	process_cmdline_set_lift
 12308              		.syntax unified
 12309              		.thumb
 12310              		.thumb_func
 12311              		.fpu fpv4-sp-d16
 12313              	process_cmdline_set_lift:
 12314              	.LFB89:
1326:src/xeq.c     **** 	process_cmdline();
 12315              		.loc 1 1326 37 view -0
 12316              		.cfi_startproc
 12317              		@ args = 0, pretend = 0, frame = 0
 12318              		@ frame_needed = 0, uses_anonymous_args = 0
1327:src/xeq.c     **** 	set_lift();
 12319              		.loc 1 1327 2 view .LVU3275
 12320              	.LBB2283:
 12321              	.LBI2283:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 12322              		.loc 1 1220 6 view .LVU3276
 12323              	.LBB2284:
1221:src/xeq.c     **** 
 12324              		.loc 1 1221 2 view .LVU3277
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12325              		.loc 1 1223 2 view .LVU3278
 12326              	.LBE2284:
 12327              	.LBE2283:
1326:src/xeq.c     **** 	process_cmdline();
 12328              		.loc 1 1326 37 is_stmt 0 view .LVU3279
 12329 0000 10B5     		push	{r4, lr}
 12330              		.cfi_def_cfa_offset 8
 12331              		.cfi_offset 4, -8
 12332              		.cfi_offset 14, -4
 12333              	.LBB2287:
 12334              	.LBB2285:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12335              		.loc 1 1223 6 view .LVU3280
 12336 0002 074C     		ldr	r4, .L923
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12337              		.loc 1 1223 5 view .LVU3281
 12338 0004 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 12339 0006 23B9     		cbnz	r3, .L922
 12340              	.LBE2285:
 12341              	.LBE2287:
1328:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 371


 12342              		.loc 1 1328 2 is_stmt 1 view .LVU3282
 12343              	.LBB2288:
 12344              	.LBI2288:
 761:src/xeq.c     ****     State2.state_lift = 1;
 12345              		.loc 1 761 6 view .LVU3283
 12346              	.LBB2289:
 762:src/xeq.c     **** }
 12347              		.loc 1 762 5 view .LVU3284
 762:src/xeq.c     **** }
 12348              		.loc 1 762 23 is_stmt 0 view .LVU3285
 12349 0008 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12350 000a 43F04003 		orr	r3, r3, #64
 12351 000e E375     		strb	r3, [r4, #23]
 12352              	.LBE2289:
 12353              	.LBE2288:
1329:src/xeq.c     **** 
 12354              		.loc 1 1329 1 view .LVU3286
 12355 0010 10BD     		pop	{r4, pc}
 12356              	.L922:
 12357              	.LBB2291:
 12358              	.LBB2286:
 12359 0012 FFF7FEFF 		bl	process_cmdline.part.0
 12360              	.LVL909:
 12361              	.LBE2286:
 12362              	.LBE2291:
1328:src/xeq.c     **** }
 12363              		.loc 1 1328 2 is_stmt 1 view .LVU3287
 12364              	.LBB2292:
 761:src/xeq.c     ****     State2.state_lift = 1;
 12365              		.loc 1 761 6 view .LVU3288
 12366              	.LBB2290:
 762:src/xeq.c     **** }
 12367              		.loc 1 762 5 view .LVU3289
 762:src/xeq.c     **** }
 12368              		.loc 1 762 23 is_stmt 0 view .LVU3290
 12369 0016 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12370 0018 43F04003 		orr	r3, r3, #64
 12371 001c E375     		strb	r3, [r4, #23]
 12372              	.LBE2290:
 12373              	.LBE2292:
1329:src/xeq.c     **** 
 12374              		.loc 1 1329 1 view .LVU3291
 12375 001e 10BD     		pop	{r4, pc}
 12376              	.L924:
 12377              		.align	2
 12378              	.L923:
 12379 0020 00000000 		.word	StateWhileOn
 12380              		.cfi_endproc
 12381              	.LFE89:
 12383              		.section	.text.setX_int,"ax",%progbits
 12384              		.align	1
 12385              		.p2align 2,,3
 12386              		.global	setX_int
 12387              		.syntax unified
 12388              		.thumb
 12389              		.thumb_func
 12390              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQQPlfu.s 			page 372


 12392              	setX_int:
 12393              	.LVL910:
 12394              	.LFB102:
1498:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12395              		.loc 1 1498 34 is_stmt 1 view -0
 12396              		.cfi_startproc
 12397              		@ args = 0, pretend = 0, frame = 8
 12398              		@ frame_needed = 0, uses_anonymous_args = 0
1499:src/xeq.c     **** }
 12399              		.loc 1 1499 2 view .LVU3293
1498:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12400              		.loc 1 1498 34 is_stmt 0 view .LVU3294
 12401 0000 00B5     		push	{lr}
 12402              		.cfi_def_cfa_offset 4
 12403              		.cfi_offset 14, -4
 12404 0002 0B46     		mov	r3, r1
 12405 0004 83B0     		sub	sp, sp, #12
 12406              		.cfi_def_cfa_offset 16
1498:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12407              		.loc 1 1498 34 view .LVU3295
 12408 0006 0246     		mov	r2, r0
 12409              	.LBB2293:
 12410              	.LBB2294:
1417:src/xeq.c     **** }
 12411              		.loc 1 1417 8 view .LVU3296
 12412 0008 6420     		movs	r0, #100
 12413              	.LVL911:
1417:src/xeq.c     **** }
 12414              		.loc 1 1417 8 view .LVU3297
 12415 000a CDE90023 		strd	r2, [sp]
 12416              	.LVL912:
1417:src/xeq.c     **** }
 12417              		.loc 1 1417 8 view .LVU3298
 12418              	.LBE2294:
 12419              	.LBI2293:
1416:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 12420              		.loc 1 1416 6 is_stmt 1 view .LVU3299
 12421              	.LBB2295:
1417:src/xeq.c     **** }
 12422              		.loc 1 1417 2 view .LVU3300
1417:src/xeq.c     **** }
 12423              		.loc 1 1417 8 is_stmt 0 view .LVU3301
 12424 000e FFF7FEFF 		bl	get_reg_n
 12425              	.LVL913:
1417:src/xeq.c     **** }
 12426              		.loc 1 1417 2 view .LVU3302
 12427 0012 0822     		movs	r2, #8
 12428 0014 6946     		mov	r1, sp
 12429 0016 FFF7FEFF 		bl	xcopy
 12430              	.LVL914:
1417:src/xeq.c     **** }
 12431              		.loc 1 1417 2 view .LVU3303
 12432              	.LBE2295:
 12433              	.LBE2293:
1500:src/xeq.c     **** 
 12434              		.loc 1 1500 1 view .LVU3304
 12435 001a 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccQQPlfu.s 			page 373


 12436              		.cfi_def_cfa_offset 4
 12437              		@ sp needed
 12438 001c 5DF804FB 		ldr	pc, [sp], #4
 12439              		.cfi_endproc
 12440              	.LFE102:
 12442              		.section	.text.do_rcl,"ax",%progbits
 12443              		.align	1
 12444              		.p2align 2,,3
 12445              		.syntax unified
 12446              		.thumb
 12447              		.thumb_func
 12448              		.fpu fpv4-sp-d16
 12450              	do_rcl:
 12451              	.LVL915:
 12452              	.LFB118:
1740:src/xeq.c     **** 	if (op == RARG_RCL) {
 12453              		.loc 1 1740 45 is_stmt 1 view -0
 12454              		.cfi_startproc
 12455              		@ args = 0, pretend = 0, frame = 40
 12456              		@ frame_needed = 0, uses_anonymous_args = 0
1741:src/xeq.c     **** 		REGISTER temp;
 12457              		.loc 1 1741 2 view .LVU3306
1740:src/xeq.c     **** 	if (op == RARG_RCL) {
 12458              		.loc 1 1740 45 is_stmt 0 view .LVU3307
 12459 0000 30B5     		push	{r4, r5, lr}
 12460              		.cfi_def_cfa_offset 12
 12461              		.cfi_offset 4, -12
 12462              		.cfi_offset 5, -8
 12463              		.cfi_offset 14, -4
1741:src/xeq.c     **** 		REGISTER temp;
 12464              		.loc 1 1741 5 view .LVU3308
 12465 0002 0A29     		cmp	r1, #10
1740:src/xeq.c     **** 	if (op == RARG_RCL) {
 12466              		.loc 1 1740 45 view .LVU3309
 12467 0004 8BB0     		sub	sp, sp, #44
 12468              		.cfi_def_cfa_offset 56
1740:src/xeq.c     **** 	if (op == RARG_RCL) {
 12469              		.loc 1 1740 45 view .LVU3310
 12470 0006 0B46     		mov	r3, r1
1741:src/xeq.c     **** 		REGISTER temp;
 12471              		.loc 1 1741 5 view .LVU3311
 12472 0008 33D0     		beq	.L948
1747:src/xeq.c     **** 			long long int r;
 12473              		.loc 1 1747 3 is_stmt 1 view .LVU3312
1747:src/xeq.c     **** 			long long int r;
 12474              		.loc 1 1747 7 is_stmt 0 view .LVU3313
 12475 000a 304A     		ldr	r2, .L950
 12476 000c 1268     		ldr	r2, [r2]
 12477 000e 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1747:src/xeq.c     **** 			long long int r;
 12478              		.loc 1 1747 6 view .LVU3314
 12479 0012 D207     		lsls	r2, r2, #31
 12480 0014 0146     		mov	r1, r0
 12481              	.LVL916:
 12482              	.LBB2325:
1750:src/xeq.c     **** 				illegal(op);
 12483              		.loc 1 1750 8 view .LVU3315
ARM GAS  /tmp/ccQQPlfu.s 			page 374


 12484 0016 A3F10A03 		sub	r3, r3, #10
 12485              	.LBE2325:
1747:src/xeq.c     **** 			long long int r;
 12486              		.loc 1 1747 6 view .LVU3316
 12487 001a 14D5     		bpl	.L933
 12488              	.LBB2332:
1748:src/xeq.c     **** 
 12489              		.loc 1 1748 4 is_stmt 1 view .LVU3317
1750:src/xeq.c     **** 				illegal(op);
 12490              		.loc 1 1750 4 view .LVU3318
1750:src/xeq.c     **** 				illegal(op);
 12491              		.loc 1 1750 8 is_stmt 0 view .LVU3319
 12492 001c 98B2     		uxth	r0, r3
 12493              	.LVL917:
1750:src/xeq.c     **** 				illegal(op);
 12494              		.loc 1 1750 8 view .LVU3320
 12495 001e 6A46     		mov	r2, sp
 12496 0020 0123     		movs	r3, #1
 12497 0022 FFF7FEFF 		bl	storcl_intop
 12498              	.LVL918:
1750:src/xeq.c     **** 				illegal(op);
 12499              		.loc 1 1750 7 view .LVU3321
 12500 0026 20B1     		cbz	r0, .L934
1751:src/xeq.c     **** 			setlastX();
 12501              		.loc 1 1751 5 is_stmt 1 view .LVU3322
1751:src/xeq.c     **** 			setlastX();
 12502              		.loc 1 1751 5 view .LVU3323
 12503              	.LVL919:
 12504              	.LBB2326:
 12505              	.LBI2326:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12506              		.loc 1 540 5 view .LVU3324
 12507              	.LBB2327:
 541:src/xeq.c     **** 		Error = e;
 12508              		.loc 1 541 2 view .LVU3325
 541:src/xeq.c     **** 		Error = e;
 12509              		.loc 1 541 12 is_stmt 0 view .LVU3326
 12510 0028 294B     		ldr	r3, .L950+4
 541:src/xeq.c     **** 		Error = e;
 12511              		.loc 1 541 5 view .LVU3327
 12512 002a 1A68     		ldr	r2, [r3]
 12513 002c 0AB9     		cbnz	r2, .L934
 12514              	.LVL920:
 12515              	.LBB2328:
 12516              	.LBI2328:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12517              		.loc 1 540 5 is_stmt 1 view .LVU3328
 12518              	.LBB2329:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 12519              		.loc 1 542 3 view .LVU3329
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 12520              		.loc 1 542 9 is_stmt 0 view .LVU3330
 12521 002e 0322     		movs	r2, #3
 12522 0030 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 12523              		.loc 1 543 3 is_stmt 1 view .LVU3331
 12524              	.LVL921:
ARM GAS  /tmp/ccQQPlfu.s 			page 375


 12525              	.L934:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 12526              		.loc 1 543 3 is_stmt 0 view .LVU3332
 12527              	.LBE2329:
 12528              	.LBE2328:
 12529              	.LBE2327:
 12530              	.LBE2326:
1751:src/xeq.c     **** 			setlastX();
 12531              		.loc 1 1751 5 is_stmt 1 discriminator 1 view .LVU3333
1752:src/xeq.c     **** 			setX_int(r);
 12532              		.loc 1 1752 4 discriminator 1 view .LVU3334
 12533              	.LBB2330:
 12534              	.LBI2330:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 12535              		.loc 1 786 6 discriminator 1 view .LVU3335
 12536              	.LBB2331:
 787:src/xeq.c     **** }
 12537              		.loc 1 787 2 discriminator 1 view .LVU3336
 12538 0032 6421     		movs	r1, #100
 12539 0034 6C20     		movs	r0, #108
 12540 0036 FFF7FEFF 		bl	copyreg_n
 12541              	.LVL922:
 12542              	.LBE2331:
 12543              	.LBE2330:
1753:src/xeq.c     **** 		} else {
 12544              		.loc 1 1753 4 discriminator 1 view .LVU3337
 12545 003a DDE90001 		ldrd	r0, [sp]
 12546 003e FFF7FEFF 		bl	setX_int
 12547              	.LVL923:
 12548              	.LBE2332:
1763:src/xeq.c     **** 
 12549              		.loc 1 1763 1 is_stmt 0 discriminator 1 view .LVU3338
 12550 0042 0BB0     		add	sp, sp, #44
 12551              		.cfi_remember_state
 12552              		.cfi_def_cfa_offset 12
 12553              		@ sp needed
 12554 0044 30BD     		pop	{r4, r5, pc}
 12555              	.LVL924:
 12556              	.L933:
 12557              		.cfi_restore_state
 12558              	.LBB2333:
1755:src/xeq.c     **** 
 12559              		.loc 1 1755 4 is_stmt 1 view .LVU3339
1757:src/xeq.c     **** 				illegal(op);
 12560              		.loc 1 1757 4 view .LVU3340
1757:src/xeq.c     **** 				illegal(op);
 12561              		.loc 1 1757 8 is_stmt 0 view .LVU3341
 12562 0046 6C46     		mov	r4, sp
 12563 0048 98B2     		uxth	r0, r3
 12564              	.LVL925:
1757:src/xeq.c     **** 				illegal(op);
 12565              		.loc 1 1757 8 view .LVU3342
 12566 004a 2246     		mov	r2, r4
 12567 004c 0123     		movs	r3, #1
 12568 004e FFF7FEFF 		bl	storcl_op
 12569              	.LVL926:
1757:src/xeq.c     **** 				illegal(op);
ARM GAS  /tmp/ccQQPlfu.s 			page 376


 12570              		.loc 1 1757 7 view .LVU3343
 12571 0052 20B1     		cbz	r0, .L935
1758:src/xeq.c     **** 			setlastX();
 12572              		.loc 1 1758 5 is_stmt 1 view .LVU3344
1758:src/xeq.c     **** 			setlastX();
 12573              		.loc 1 1758 5 view .LVU3345
 12574              	.LVL927:
 12575              	.LBB2334:
 12576              	.LBI2334:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12577              		.loc 1 540 5 view .LVU3346
 12578              	.LBB2335:
 541:src/xeq.c     **** 		Error = e;
 12579              		.loc 1 541 2 view .LVU3347
 541:src/xeq.c     **** 		Error = e;
 12580              		.loc 1 541 12 is_stmt 0 view .LVU3348
 12581 0054 1E4B     		ldr	r3, .L950+4
 541:src/xeq.c     **** 		Error = e;
 12582              		.loc 1 541 5 view .LVU3349
 12583 0056 1A68     		ldr	r2, [r3]
 12584 0058 0AB9     		cbnz	r2, .L935
 12585              	.LVL928:
 12586              	.LBB2336:
 12587              	.LBI2336:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12588              		.loc 1 540 5 is_stmt 1 view .LVU3350
 12589              	.LBB2337:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 12590              		.loc 1 542 3 view .LVU3351
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 12591              		.loc 1 542 9 is_stmt 0 view .LVU3352
 12592 005a 0322     		movs	r2, #3
 12593 005c 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 12594              		.loc 1 543 3 is_stmt 1 view .LVU3353
 12595              	.LVL929:
 12596              	.L935:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 12597              		.loc 1 543 3 is_stmt 0 view .LVU3354
 12598              	.LBE2337:
 12599              	.LBE2336:
 12600              	.LBE2335:
 12601              	.LBE2334:
1758:src/xeq.c     **** 			setlastX();
 12602              		.loc 1 1758 5 is_stmt 1 discriminator 1 view .LVU3355
1759:src/xeq.c     **** 			setX(&r);
 12603              		.loc 1 1759 4 discriminator 1 view .LVU3356
 12604              	.LBB2338:
 12605              	.LBI2338:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 12606              		.loc 1 786 6 discriminator 1 view .LVU3357
 12607              	.LBB2339:
 787:src/xeq.c     **** }
 12608              		.loc 1 787 2 discriminator 1 view .LVU3358
 12609 005e 6421     		movs	r1, #100
 12610 0060 6C20     		movs	r0, #108
 12611 0062 FFF7FEFF 		bl	copyreg_n
ARM GAS  /tmp/ccQQPlfu.s 			page 377


 12612              	.LVL930:
 12613              	.LBE2339:
 12614              	.LBE2338:
1760:src/xeq.c     **** 		}
 12615              		.loc 1 1760 4 discriminator 1 view .LVU3359
 12616              	.LBB2340:
 12617              	.LBI2340:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 12618              		.loc 1 822 6 discriminator 1 view .LVU3360
 12619              	.LBB2341:
 823:src/xeq.c     **** }
 12620              		.loc 1 823 2 discriminator 1 view .LVU3361
 12621 0066 2146     		mov	r1, r4
 12622 0068 6420     		movs	r0, #100
 12623 006a FFF7FEFF 		bl	setRegister
 12624              	.LVL931:
 823:src/xeq.c     **** }
 12625              		.loc 1 823 2 is_stmt 0 discriminator 1 view .LVU3362
 12626              	.LBE2341:
 12627              	.LBE2340:
 12628              	.LBE2333:
1763:src/xeq.c     **** 
 12629              		.loc 1 1763 1 discriminator 1 view .LVU3363
 12630 006e 0BB0     		add	sp, sp, #44
 12631              		.cfi_remember_state
 12632              		.cfi_def_cfa_offset 12
 12633              		@ sp needed
 12634 0070 30BD     		pop	{r4, r5, pc}
 12635              	.LVL932:
 12636              	.L948:
 12637              		.cfi_restore_state
 12638              	.LBB2342:
1742:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
 12639              		.loc 1 1742 3 is_stmt 1 view .LVU3364
1743:src/xeq.c     **** 		lift_if_enabled();
 12640              		.loc 1 1743 3 view .LVU3365
 12641              	.LBB2343:
 12642              	.LBB2344:
 12643              	.LBB2345:
 12644              	.LBB2346:
1113:src/xeq.c     **** }
 12645              		.loc 1 1113 24 is_stmt 0 view .LVU3366
 12646 0072 164D     		ldr	r5, .L950
 12647              	.LBE2346:
 12648              	.LBE2345:
 12649              	.LBE2344:
 12650              	.LBE2343:
1743:src/xeq.c     **** 		lift_if_enabled();
 12651              		.loc 1 1743 18 view .LVU3367
 12652 0074 FFF7FEFF 		bl	get_reg_n
 12653              	.LVL933:
 12654              	.LBB2353:
 12655              	.LBB2351:
 12656              	.LBB2349:
 12657              	.LBB2347:
1113:src/xeq.c     **** }
 12658              		.loc 1 1113 24 view .LVU3368
ARM GAS  /tmp/ccQQPlfu.s 			page 378


 12659 0078 2B68     		ldr	r3, [r5]
 12660 007a B3F8E827 		ldrh	r2, [r3, #2024]
 12661 007e 44F20103 		movw	r3, #16385
 12662              	.LBE2347:
 12663              	.LBE2349:
 721:src/xeq.c     **** }
 12664              		.loc 1 721 2 view .LVU3369
 12665 0082 1340     		ands	r3, r3, r2
 12666 0084 B3F5804F 		cmp	r3, #16384
 12667 0088 6C46     		mov	r4, sp
 12668              	.LBE2351:
 12669              	.LBE2353:
1743:src/xeq.c     **** 		lift_if_enabled();
 12670              		.loc 1 1743 18 view .LVU3370
 12671 008a 0146     		mov	r1, r0
 12672              	.LVL934:
 12673              	.LBB2354:
 12674              	.LBI2343:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12675              		.loc 1 720 6 is_stmt 1 view .LVU3371
 12676              	.LBB2352:
 721:src/xeq.c     **** }
 12677              		.loc 1 721 2 view .LVU3372
 12678              	.LBB2350:
 12679              	.LBI2345:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12680              		.loc 1 1112 5 view .LVU3373
 12681              	.LBB2348:
1113:src/xeq.c     **** }
 12682              		.loc 1 1113 2 view .LVU3374
 12683              	.LBE2348:
 12684              	.LBE2350:
 721:src/xeq.c     **** }
 12685              		.loc 1 721 2 is_stmt 0 view .LVU3375
 12686 008c 0CBF     		ite	eq
 12687 008e 1022     		moveq	r2, #16
 12688 0090 0822     		movne	r2, #8
 12689 0092 2046     		mov	r0, r4
 12690              	.LVL935:
 721:src/xeq.c     **** }
 12691              		.loc 1 721 2 view .LVU3376
 12692 0094 FFF7FEFF 		bl	xcopy
 12693              	.LVL936:
 721:src/xeq.c     **** }
 12694              		.loc 1 721 2 view .LVU3377
 12695              	.LBE2352:
 12696              	.LBE2354:
1744:src/xeq.c     **** 		copyreg(StackBase, &temp);
 12697              		.loc 1 1744 3 is_stmt 1 view .LVU3378
 12698              	.LBB2355:
 12699              	.LBI2355:
 741:src/xeq.c     **** 	if (get_lift())
 12700              		.loc 1 741 6 view .LVU3379
 12701              	.LBB2356:
 742:src/xeq.c     **** 		lift();
 12702              		.loc 1 742 2 view .LVU3380
 12703              	.LBB2357:
ARM GAS  /tmp/ccQQPlfu.s 			page 379


 12704              	.LBI2357:
 737:src/xeq.c     **** 	return State2.state_lift;
 12705              		.loc 1 737 12 view .LVU3381
 12706              	.LBB2358:
 738:src/xeq.c     **** }
 12707              		.loc 1 738 2 view .LVU3382
 738:src/xeq.c     **** }
 12708              		.loc 1 738 15 is_stmt 0 view .LVU3383
 12709 0098 0E4B     		ldr	r3, .L950+8
 12710 009a DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 12711              	.LBE2358:
 12712              	.LBE2357:
 742:src/xeq.c     **** 		lift();
 12713              		.loc 1 742 5 view .LVU3384
 12714 009c 5906     		lsls	r1, r3, #25
 12715 009e 11D4     		bmi	.L949
 12716              	.L930:
 12717              	.LBE2356:
 12718              	.LBE2355:
1745:src/xeq.c     **** 	} else {
 12719              		.loc 1 1745 3 is_stmt 1 view .LVU3385
 12720              	.LBB2360:
 12721              	.LBB2361:
 12722              	.LBB2362:
 12723              	.LBB2363:
1113:src/xeq.c     **** }
 12724              		.loc 1 1113 24 is_stmt 0 view .LVU3386
 12725 00a0 2A68     		ldr	r2, [r5]
 12726              	.LBE2363:
 12727              	.LBE2362:
 12728              	.LBE2361:
 12729              	.LBE2360:
1745:src/xeq.c     **** 	} else {
 12730              		.loc 1 1745 3 view .LVU3387
 12731 00a2 0D4B     		ldr	r3, .L950+12
 12732              	.LVL937:
 12733              	.LBB2369:
 12734              	.LBI2360:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12735              		.loc 1 720 6 is_stmt 1 view .LVU3388
 12736              	.LBB2368:
 721:src/xeq.c     **** }
 12737              		.loc 1 721 2 view .LVU3389
 12738              	.LBB2366:
 12739              	.LBI2362:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12740              		.loc 1 1112 5 view .LVU3390
 12741              	.LBB2364:
1113:src/xeq.c     **** }
 12742              		.loc 1 1113 2 view .LVU3391
1113:src/xeq.c     **** }
 12743              		.loc 1 1113 24 is_stmt 0 view .LVU3392
 12744 00a4 B2F8E827 		ldrh	r2, [r2, #2024]
 12745              	.LBE2364:
 12746              	.LBE2366:
 721:src/xeq.c     **** }
 12747              		.loc 1 721 2 view .LVU3393
ARM GAS  /tmp/ccQQPlfu.s 			page 380


 12748 00a8 1868     		ldr	r0, [r3]
 12749              	.LBB2367:
 12750              	.LBB2365:
1113:src/xeq.c     **** }
 12751              		.loc 1 1113 24 view .LVU3394
 12752 00aa 44F20103 		movw	r3, #16385
 12753              	.LVL938:
1113:src/xeq.c     **** }
 12754              		.loc 1 1113 24 view .LVU3395
 12755              	.LBE2365:
 12756              	.LBE2367:
 721:src/xeq.c     **** }
 12757              		.loc 1 721 2 view .LVU3396
 12758 00ae 1340     		ands	r3, r3, r2
 12759 00b0 B3F5804F 		cmp	r3, #16384
 12760 00b4 2146     		mov	r1, r4
 12761 00b6 0CBF     		ite	eq
 12762 00b8 1022     		moveq	r2, #16
 12763 00ba 0822     		movne	r2, #8
 12764 00bc FFF7FEFF 		bl	xcopy
 12765              	.LVL939:
 721:src/xeq.c     **** }
 12766              		.loc 1 721 2 view .LVU3397
 12767              	.LBE2368:
 12768              	.LBE2369:
 12769              	.LBE2342:
1763:src/xeq.c     **** 
 12770              		.loc 1 1763 1 view .LVU3398
 12771 00c0 0BB0     		add	sp, sp, #44
 12772              		.cfi_remember_state
 12773              		.cfi_def_cfa_offset 12
 12774              		@ sp needed
 12775 00c2 30BD     		pop	{r4, r5, pc}
 12776              	.L949:
 12777              		.cfi_restore_state
 12778              	.LBB2371:
 12779              	.LBB2370:
 12780              	.LBB2359:
 743:src/xeq.c     **** }
 12781              		.loc 1 743 3 is_stmt 1 view .LVU3399
 12782 00c4 FFF7FEFF 		bl	lift
 12783              	.LVL940:
 12784 00c8 EAE7     		b	.L930
 12785              	.L951:
 12786 00ca 00BF     		.align	2
 12787              	.L950:
 12788 00cc 00000000 		.word	main_ram
 12789 00d0 00000000 		.word	Error
 12790 00d4 00000000 		.word	StateWhileOn
 12791 00d8 00000000 		.word	StackBase
 12792              	.LBE2359:
 12793              	.LBE2370:
 12794              	.LBE2371:
 12795              		.cfi_endproc
 12796              	.LFE118:
 12798              		.section	.text.setX_int_sgn,"ax",%progbits
 12799              		.align	1
ARM GAS  /tmp/ccQQPlfu.s 			page 381


 12800              		.p2align 2,,3
 12801              		.global	setX_int_sgn
 12802              		.syntax unified
 12803              		.thumb
 12804              		.thumb_func
 12805              		.fpu fpv4-sp-d16
 12807              	setX_int_sgn:
 12808              	.LVL941:
 12809              	.LFB103:
1503:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 12810              		.loc 1 1503 56 view -0
 12811              		.cfi_startproc
 12812              		@ args = 0, pretend = 0, frame = 0
 12813              		@ frame_needed = 0, uses_anonymous_args = 0
1504:src/xeq.c     **** }
 12814              		.loc 1 1504 2 view .LVU3401
1503:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 12815              		.loc 1 1503 56 is_stmt 0 view .LVU3402
 12816 0000 00B5     		push	{lr}
 12817              		.cfi_def_cfa_offset 4
 12818              		.cfi_offset 14, -4
 12819 0002 83B0     		sub	sp, sp, #12
 12820              		.cfi_def_cfa_offset 16
1504:src/xeq.c     **** }
 12821              		.loc 1 1504 2 view .LVU3403
 12822 0004 0B46     		mov	r3, r1
 12823 0006 0092     		str	r2, [sp]
 12824 0008 0246     		mov	r2, r0
 12825              	.LVL942:
1504:src/xeq.c     **** }
 12826              		.loc 1 1504 2 view .LVU3404
 12827 000a 6420     		movs	r0, #100
 12828              	.LVL943:
1504:src/xeq.c     **** }
 12829              		.loc 1 1504 2 view .LVU3405
 12830 000c FFF7FEFF 		bl	set_reg_n_int_sgn
 12831              	.LVL944:
1505:src/xeq.c     **** 
 12832              		.loc 1 1505 1 view .LVU3406
 12833 0010 03B0     		add	sp, sp, #12
 12834              		.cfi_def_cfa_offset 4
 12835              		@ sp needed
 12836 0012 5DF804FB 		ldr	pc, [sp], #4
 12837              		.cfi_endproc
 12838              	.LFE103:
 12840 0016 00BF     		.section	.text.zero_regs,"ax",%progbits
 12841              		.align	1
 12842              		.p2align 2,,3
 12843              		.global	zero_regs
 12844              		.syntax unified
 12845              		.thumb
 12846              		.thumb_func
 12847              		.fpu fpv4-sp-d16
 12849              	zero_regs:
 12850              	.LVL945:
 12851              	.LFB104:
1512:src/xeq.c     **** #if 0
ARM GAS  /tmp/ccQQPlfu.s 			page 382


 12852              		.loc 1 1512 39 is_stmt 1 view -0
 12853              		.cfi_startproc
 12854              		@ args = 0, pretend = 0, frame = 0
 12855              		@ frame_needed = 0, uses_anonymous_args = 0
 12856              		@ link register save eliminated.
1527:src/xeq.c     **** #endif
 12857              		.loc 1 1527 2 view .LVU3408
 12858              	.LBB2372:
 12859              	.LBI2372:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12860              		.loc 1 1112 5 view .LVU3409
 12861              	.LBB2373:
1113:src/xeq.c     **** }
 12862              		.loc 1 1113 2 view .LVU3410
1113:src/xeq.c     **** }
 12863              		.loc 1 1113 24 is_stmt 0 view .LVU3411
 12864 0000 084B     		ldr	r3, .L955
 12865 0002 1B68     		ldr	r3, [r3]
 12866 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 12867 0008 44F20103 		movw	r3, #16385
 12868 000c 1340     		ands	r3, r3, r2
 12869 000e A3F58043 		sub	r3, r3, #16384
 12870 0012 B3FA83F3 		clz	r3, r3
 12871 0016 5B09     		lsrs	r3, r3, #5
 12872              	.LBE2373:
 12873              	.LBE2372:
1527:src/xeq.c     **** #endif
 12874              		.loc 1 1527 24 view .LVU3412
 12875 0018 0333     		adds	r3, r3, #3
1527:src/xeq.c     **** #endif
 12876              		.loc 1 1527 2 view .LVU3413
 12877 001a 01FA03F2 		lsl	r2, r1, r3
 12878 001e 0021     		movs	r1, #0
 12879              	.LVL946:
1527:src/xeq.c     **** #endif
 12880              		.loc 1 1527 2 view .LVU3414
 12881 0020 FFF7FEBF 		b	xset
 12882              	.LVL947:
 12883              	.L956:
1527:src/xeq.c     **** #endif
 12884              		.loc 1 1527 2 view .LVU3415
 12885              		.align	2
 12886              	.L955:
 12887 0024 00000000 		.word	main_ram
 12888              		.cfi_endproc
 12889              	.LFE104:
 12891              		.section	.text.move_regs,"ax",%progbits
 12892              		.align	1
 12893              		.p2align 2,,3
 12894              		.global	move_regs
 12895              		.syntax unified
 12896              		.thumb
 12897              		.thumb_func
 12898              		.fpu fpv4-sp-d16
 12900              	move_regs:
 12901              	.LVL948:
 12902              	.LFB105:
ARM GAS  /tmp/ccQQPlfu.s 			page 383


1531:src/xeq.c     **** 	if (is_dblmode())
 12903              		.loc 1 1531 54 is_stmt 1 view -0
 12904              		.cfi_startproc
 12905              		@ args = 0, pretend = 0, frame = 0
 12906              		@ frame_needed = 0, uses_anonymous_args = 0
 12907              		@ link register save eliminated.
1532:src/xeq.c     **** 		n <<= 1;
 12908              		.loc 1 1532 2 view .LVU3417
 12909              	.LBB2374:
 12910              	.LBI2374:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12911              		.loc 1 1112 5 view .LVU3418
 12912              	.LBB2375:
1113:src/xeq.c     **** }
 12913              		.loc 1 1113 2 view .LVU3419
1113:src/xeq.c     **** }
 12914              		.loc 1 1113 24 is_stmt 0 view .LVU3420
 12915 0000 084B     		ldr	r3, .L960
 12916 0002 1B68     		ldr	r3, [r3]
 12917              	.LBE2375:
 12918              	.LBE2374:
1531:src/xeq.c     **** 	if (is_dblmode())
 12919              		.loc 1 1531 54 view .LVU3421
 12920 0004 10B4     		push	{r4}
 12921              		.cfi_def_cfa_offset 4
 12922              		.cfi_offset 4, -4
 12923              	.LBB2377:
 12924              	.LBB2376:
1113:src/xeq.c     **** }
 12925              		.loc 1 1113 24 view .LVU3422
 12926 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 12927 000a 44F20103 		movw	r3, #16385
 12928              	.LBE2376:
 12929              	.LBE2377:
1532:src/xeq.c     **** 		n <<= 1;
 12930              		.loc 1 1532 5 view .LVU3423
 12931 000e 2340     		ands	r3, r3, r4
 12932 0010 B3F5804F 		cmp	r3, #16384
1533:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 12933              		.loc 1 1533 3 is_stmt 1 view .LVU3424
1533:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 12934              		.loc 1 1533 5 is_stmt 0 view .LVU3425
 12935 0014 08BF     		it	eq
 12936 0016 5200     		lsleq	r2, r2, #1
 12937              	.LVL949:
1534:src/xeq.c     **** }
 12938              		.loc 1 1534 2 is_stmt 1 view .LVU3426
1535:src/xeq.c     **** 
 12939              		.loc 1 1535 1 is_stmt 0 view .LVU3427
 12940 0018 5DF8044B 		ldr	r4, [sp], #4
 12941              		.cfi_restore 4
 12942              		.cfi_def_cfa_offset 0
1534:src/xeq.c     **** }
 12943              		.loc 1 1534 2 view .LVU3428
 12944 001c D200     		lsls	r2, r2, #3
 12945              	.LVL950:
1534:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 384


 12946              		.loc 1 1534 2 view .LVU3429
 12947 001e FFF7FEBF 		b	xcopy
 12948              	.LVL951:
 12949              	.L961:
1534:src/xeq.c     **** }
 12950              		.loc 1 1534 2 view .LVU3430
 12951 0022 00BF     		.align	2
 12952              	.L960:
 12953 0024 00000000 		.word	main_ram
 12954              		.cfi_endproc
 12955              	.LFE105:
 12957              		.section	.text.zero_X,"ax",%progbits
 12958              		.align	1
 12959              		.p2align 2,,3
 12960              		.global	zero_X
 12961              		.syntax unified
 12962              		.thumb
 12963              		.thumb_func
 12964              		.fpu fpv4-sp-d16
 12966              	zero_X:
 12967              	.LFB107:
1544:src/xeq.c     **** 	set_zero(StackBase);
 12968              		.loc 1 1544 19 is_stmt 1 view -0
 12969              		.cfi_startproc
 12970              		@ args = 0, pretend = 0, frame = 0
 12971              		@ frame_needed = 0, uses_anonymous_args = 0
 12972              		@ link register save eliminated.
1545:src/xeq.c     **** }
 12973              		.loc 1 1545 2 view .LVU3432
 12974 0000 014B     		ldr	r3, .L963
 12975 0002 1868     		ldr	r0, [r3]
 12976 0004 FFF7FEBF 		b	set_zero
 12977              	.LVL952:
 12978              	.L964:
 12979              		.align	2
 12980              	.L963:
 12981 0008 00000000 		.word	StackBase
 12982              		.cfi_endproc
 12983              	.LFE107:
 12985              		.section	.text.zero_Y,"ax",%progbits
 12986              		.align	1
 12987              		.p2align 2,,3
 12988              		.global	zero_Y
 12989              		.syntax unified
 12990              		.thumb
 12991              		.thumb_func
 12992              		.fpu fpv4-sp-d16
 12994              	zero_Y:
 12995              	.LFB108:
1548:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 12996              		.loc 1 1548 19 view -0
 12997              		.cfi_startproc
 12998              		@ args = 0, pretend = 0, frame = 0
 12999              		@ frame_needed = 0, uses_anonymous_args = 0
1549:src/xeq.c     **** }
 13000              		.loc 1 1549 2 view .LVU3434
1548:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
ARM GAS  /tmp/ccQQPlfu.s 			page 385


 13001              		.loc 1 1548 19 is_stmt 0 view .LVU3435
 13002 0000 08B5     		push	{r3, lr}
 13003              		.cfi_def_cfa_offset 8
 13004              		.cfi_offset 3, -8
 13005              		.cfi_offset 14, -4
1549:src/xeq.c     **** }
 13006              		.loc 1 1549 2 view .LVU3436
 13007 0002 6520     		movs	r0, #101
 13008 0004 FFF7FEFF 		bl	get_reg_n
 13009              	.LVL953:
1550:src/xeq.c     **** 
 13010              		.loc 1 1550 1 view .LVU3437
 13011 0008 BDE80840 		pop	{r3, lr}
 13012              		.cfi_restore 14
 13013              		.cfi_restore 3
 13014              		.cfi_def_cfa_offset 0
1549:src/xeq.c     **** }
 13015              		.loc 1 1549 2 view .LVU3438
 13016 000c FFF7FEBF 		b	set_zero
 13017              	.LVL954:
 13018              		.cfi_endproc
 13019              	.LFE108:
 13021              		.section	.text.clrx,"ax",%progbits
 13022              		.align	1
 13023              		.p2align 2,,3
 13024              		.global	clrx
 13025              		.syntax unified
 13026              		.thumb
 13027              		.thumb_func
 13028              		.fpu fpv4-sp-d16
 13030              	clrx:
 13031              	.LVL955:
 13032              	.LFB109:
1552:src/xeq.c     **** 	zero_X();
 13033              		.loc 1 1552 26 is_stmt 1 view -0
 13034              		.cfi_startproc
 13035              		@ args = 0, pretend = 0, frame = 0
 13036              		@ frame_needed = 0, uses_anonymous_args = 0
1553:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 13037              		.loc 1 1553 2 view .LVU3440
 13038              	.LBB2378:
 13039              	.LBI2378:
1544:src/xeq.c     **** 	set_zero(StackBase);
 13040              		.loc 1 1544 6 view .LVU3441
 13041              	.LBB2379:
1545:src/xeq.c     **** }
 13042              		.loc 1 1545 2 view .LVU3442
 13043 0000 1A4B     		ldr	r3, .L973
 13044              	.LBE2379:
 13045              	.LBE2378:
1552:src/xeq.c     **** 	zero_X();
 13046              		.loc 1 1552 26 is_stmt 0 view .LVU3443
 13047 0002 10B5     		push	{r4, lr}
 13048              		.cfi_def_cfa_offset 8
 13049              		.cfi_offset 4, -8
 13050              		.cfi_offset 14, -4
1555:src/xeq.c     **** 		zero_Y();
ARM GAS  /tmp/ccQQPlfu.s 			page 386


 13051              		.loc 1 1555 6 view .LVU3444
 13052 0004 1A4C     		ldr	r4, .L973+4
 13053              	.LBB2381:
 13054              	.LBB2380:
1545:src/xeq.c     **** }
 13055              		.loc 1 1545 2 view .LVU3445
 13056 0006 1868     		ldr	r0, [r3]
 13057              	.LVL956:
1545:src/xeq.c     **** }
 13058              		.loc 1 1545 2 view .LVU3446
 13059 0008 FFF7FEFF 		bl	set_zero
 13060              	.LVL957:
 13061              	.LBE2380:
 13062              	.LBE2381:
1555:src/xeq.c     **** 		zero_Y();
 13063              		.loc 1 1555 2 is_stmt 1 view .LVU3447
1555:src/xeq.c     **** 		zero_Y();
 13064              		.loc 1 1555 6 is_stmt 0 view .LVU3448
 13065 000c 2368     		ldr	r3, [r4]
 13066 000e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
1555:src/xeq.c     **** 		zero_Y();
 13067              		.loc 1 1555 5 view .LVU3449
 13068 0012 03F04103 		and	r3, r3, #65
 13069 0016 412B     		cmp	r3, #65
 13070 0018 05D0     		beq	.L971
1565:src/xeq.c     **** }
 13071              		.loc 1 1565 2 is_stmt 1 view .LVU3450
 13072              	.LBB2382:
 13073              	.LBI2382:
 765:src/xeq.c     ****     State2.state_lift = 0;
 13074              		.loc 1 765 13 view .LVU3451
 13075              	.LBB2383:
 766:src/xeq.c     **** }
 13076              		.loc 1 766 5 view .LVU3452
 766:src/xeq.c     **** }
 13077              		.loc 1 766 23 is_stmt 0 view .LVU3453
 13078 001a 164B     		ldr	r3, .L973+8
 13079 001c DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 13080 001e 6FF38612 		bfc	r2, #6, #1
 13081 0022 DA75     		strb	r2, [r3, #23]
 13082              	.LBE2383:
 13083              	.LBE2382:
1566:src/xeq.c     **** 
 13084              		.loc 1 1566 1 view .LVU3454
 13085 0024 10BD     		pop	{r4, pc}
 13086              	.L971:
1556:src/xeq.c     **** 		if (POLAR_DISPLAY) {
 13087              		.loc 1 1556 3 is_stmt 1 view .LVU3455
 13088              	.LBB2385:
 13089              	.LBI2385:
1548:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 13090              		.loc 1 1548 6 view .LVU3456
 13091              	.LBB2386:
1549:src/xeq.c     **** }
 13092              		.loc 1 1549 2 view .LVU3457
 13093 0026 6520     		movs	r0, #101
 13094 0028 FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/ccQQPlfu.s 			page 387


 13095              	.LVL958:
 13096 002c FFF7FEFF 		bl	set_zero
 13097              	.LVL959:
 13098              	.LBE2386:
 13099              	.LBE2385:
1557:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13100              		.loc 1 1557 3 view .LVU3458
1557:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13101              		.loc 1 1557 7 is_stmt 0 view .LVU3459
 13102 0030 2368     		ldr	r3, [r4]
1557:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13103              		.loc 1 1557 6 view .LVU3460
 13104 0032 93F9AC27 		ldrsb	r2, [r3, #1964]
 13105 0036 002A     		cmp	r2, #0
 13106 0038 0BDB     		blt	.L972
 13107              	.L969:
1561:src/xeq.c     **** 		CLEAR_IMAG;
 13108              		.loc 1 1561 3 is_stmt 1 view .LVU3461
1562:src/xeq.c     **** 	}
 13109              		.loc 1 1562 3 view .LVU3462
1561:src/xeq.c     **** 		CLEAR_IMAG;
 13110              		.loc 1 1561 3 is_stmt 0 view .LVU3463
 13111 003a 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 13112 003e 22F00602 		bic	r2, r2, #6
 13113 0042 83F8AC27 		strb	r2, [r3, #1964]
1565:src/xeq.c     **** }
 13114              		.loc 1 1565 2 is_stmt 1 view .LVU3464
 13115              	.LBB2387:
 765:src/xeq.c     ****     State2.state_lift = 0;
 13116              		.loc 1 765 13 view .LVU3465
 13117              	.LBB2384:
 766:src/xeq.c     **** }
 13118              		.loc 1 766 5 view .LVU3466
 766:src/xeq.c     **** }
 13119              		.loc 1 766 23 is_stmt 0 view .LVU3467
 13120 0046 0B4B     		ldr	r3, .L973+8
 13121 0048 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 13122 004a 6FF38612 		bfc	r2, #6, #1
 13123 004e DA75     		strb	r2, [r3, #23]
 13124              	.LBE2384:
 13125              	.LBE2387:
1566:src/xeq.c     **** 
 13126              		.loc 1 1566 1 view .LVU3468
 13127 0050 10BD     		pop	{r4, pc}
 13128              	.L972:
1558:src/xeq.c     **** 			set_zero(get_reg_n(regK_idx));
 13129              		.loc 1 1558 4 is_stmt 1 view .LVU3469
 13130 0052 6E20     		movs	r0, #110
 13131 0054 FFF7FEFF 		bl	get_reg_n
 13132              	.LVL960:
 13133 0058 FFF7FEFF 		bl	set_zero
 13134              	.LVL961:
1559:src/xeq.c     **** 		}
 13135              		.loc 1 1559 4 view .LVU3470
 13136 005c 6F20     		movs	r0, #111
 13137 005e FFF7FEFF 		bl	get_reg_n
 13138              	.LVL962:
ARM GAS  /tmp/ccQQPlfu.s 			page 388


 13139 0062 FFF7FEFF 		bl	set_zero
 13140              	.LVL963:
 13141 0066 2368     		ldr	r3, [r4]
 13142 0068 E7E7     		b	.L969
 13143              	.L974:
 13144 006a 00BF     		.align	2
 13145              	.L973:
 13146 006c 00000000 		.word	StackBase
 13147 0070 00000000 		.word	main_ram
 13148 0074 00000000 		.word	StateWhileOn
 13149              		.cfi_endproc
 13150              	.LFE109:
 13152              		.section	.text.clrstk,"ax",%progbits
 13153              		.align	1
 13154              		.p2align 2,,3
 13155              		.global	clrstk
 13156              		.syntax unified
 13157              		.thumb
 13158              		.thumb_func
 13159              		.fpu fpv4-sp-d16
 13161              	clrstk:
 13162              	.LVL964:
 13163              	.LFB110:
1570:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 13164              		.loc 1 1570 28 view -0
 13165              		.cfi_startproc
 13166              		@ args = 0, pretend = 0, frame = 0
 13167              		@ frame_needed = 0, uses_anonymous_args = 0
1571:src/xeq.c     **** 	set_lift();
 13168              		.loc 1 1571 2 view .LVU3472
1570:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 13169              		.loc 1 1570 28 is_stmt 0 view .LVU3473
 13170 0000 08B5     		push	{r3, lr}
 13171              		.cfi_def_cfa_offset 8
 13172              		.cfi_offset 3, -8
 13173              		.cfi_offset 14, -4
 13174              	.LBB2388:
 13175              	.LBB2389:
 707:src/xeq.c     **** 		return 4;
 13176              		.loc 1 707 8 view .LVU3474
 13177 0002 164B     		ldr	r3, .L982
 13178              	.LBE2389:
 13179              	.LBE2388:
1571:src/xeq.c     **** 	set_lift();
 13180              		.loc 1 1571 2 view .LVU3475
 13181 0004 164A     		ldr	r2, .L982+4
 13182              	.LBB2395:
 13183              	.LBB2392:
 707:src/xeq.c     **** 		return 4;
 13184              		.loc 1 707 8 view .LVU3476
 13185 0006 1B68     		ldr	r3, [r3]
 13186              	.LBE2392:
 13187              	.LBE2395:
1571:src/xeq.c     **** 	set_lift();
 13188              		.loc 1 1571 2 view .LVU3477
 13189 0008 1068     		ldr	r0, [r2]
 13190              	.LVL965:
ARM GAS  /tmp/ccQQPlfu.s 			page 389


 13191              	.LBB2396:
 13192              	.LBI2388:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 13193              		.loc 1 706 5 is_stmt 1 view .LVU3478
 13194              	.LBB2393:
 707:src/xeq.c     **** 		return 4;
 13195              		.loc 1 707 2 view .LVU3479
 707:src/xeq.c     **** 		return 4;
 13196              		.loc 1 707 6 is_stmt 0 view .LVU3480
 13197 000a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 13198              		.loc 1 707 5 view .LVU3481
 13199 000e 1207     		lsls	r2, r2, #28
 13200 0010 22D5     		bpl	.L977
 13201              	.LBB2390:
 13202              	.LBI2390:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 13203              		.loc 1 185 5 is_stmt 1 view .LVU3482
 13204              	.LBB2391:
 186:src/xeq.c     **** }
 13205              		.loc 1 186 2 view .LVU3483
 186:src/xeq.c     **** }
 13206              		.loc 1 186 9 is_stmt 0 view .LVU3484
 13207 0012 B3F8E027 		ldrh	r2, [r3, #2016]
 13208              	.LBE2391:
 13209              	.LBE2390:
 707:src/xeq.c     **** 		return 4;
 13210              		.loc 1 707 27 view .LVU3485
 13211 0016 920B     		lsrs	r2, r2, #14
 13212 0018 032A     		cmp	r2, #3
 13213 001a 15D0     		beq	.L981
 709:src/xeq.c     **** }
 13214              		.loc 1 709 9 view .LVU3486
 13215 001c 0822     		movs	r2, #8
 13216              	.L976:
 13217              	.LVL966:
 709:src/xeq.c     **** }
 13218              		.loc 1 709 9 view .LVU3487
 13219              	.LBE2393:
 13220              	.LBE2396:
 13221              	.LBB2397:
 13222              	.LBI2397:
1512:src/xeq.c     **** #if 0
 13223              		.loc 1 1512 6 is_stmt 1 view .LVU3488
 13224              	.LBB2398:
1527:src/xeq.c     **** #endif
 13225              		.loc 1 1527 2 view .LVU3489
 13226              	.LBB2399:
 13227              	.LBI2399:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13228              		.loc 1 1112 5 view .LVU3490
 13229              	.LBB2400:
1113:src/xeq.c     **** }
 13230              		.loc 1 1113 2 view .LVU3491
1113:src/xeq.c     **** }
 13231              		.loc 1 1113 24 is_stmt 0 view .LVU3492
 13232 001e B3F8E817 		ldrh	r1, [r3, #2024]
ARM GAS  /tmp/ccQQPlfu.s 			page 390


 13233 0022 44F20103 		movw	r3, #16385
 13234 0026 0B40     		ands	r3, r3, r1
 13235 0028 A3F58043 		sub	r3, r3, #16384
 13236 002c B3FA83F3 		clz	r3, r3
 13237 0030 5B09     		lsrs	r3, r3, #5
 13238              	.LBE2400:
 13239              	.LBE2399:
1527:src/xeq.c     **** #endif
 13240              		.loc 1 1527 24 view .LVU3493
 13241 0032 0333     		adds	r3, r3, #3
1527:src/xeq.c     **** #endif
 13242              		.loc 1 1527 2 view .LVU3494
 13243 0034 9A40     		lsls	r2, r2, r3
 13244              	.LVL967:
1527:src/xeq.c     **** #endif
 13245              		.loc 1 1527 2 view .LVU3495
 13246 0036 0021     		movs	r1, #0
 13247 0038 FFF7FEFF 		bl	xset
 13248              	.LVL968:
1527:src/xeq.c     **** #endif
 13249              		.loc 1 1527 2 view .LVU3496
 13250              	.LBE2398:
 13251              	.LBE2397:
1572:src/xeq.c     **** }
 13252              		.loc 1 1572 2 is_stmt 1 view .LVU3497
 13253              	.LBB2401:
 13254              	.LBI2401:
 761:src/xeq.c     ****     State2.state_lift = 1;
 13255              		.loc 1 761 6 view .LVU3498
 13256              	.LBB2402:
 762:src/xeq.c     **** }
 13257              		.loc 1 762 5 view .LVU3499
 762:src/xeq.c     **** }
 13258              		.loc 1 762 23 is_stmt 0 view .LVU3500
 13259 003c 094A     		ldr	r2, .L982+8
 13260 003e D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 13261 0040 43F04003 		orr	r3, r3, #64
 13262 0044 D375     		strb	r3, [r2, #23]
 13263              	.LBE2402:
 13264              	.LBE2401:
1573:src/xeq.c     **** 
 13265              		.loc 1 1573 1 view .LVU3501
 13266 0046 08BD     		pop	{r3, pc}
 13267              	.L981:
 13268              	.LBB2403:
 13269              	.LBB2394:
 707:src/xeq.c     **** 		return 4;
 13270              		.loc 1 707 44 view .LVU3502
 13271 0048 074A     		ldr	r2, .L982+12
 707:src/xeq.c     **** 		return 4;
 13272              		.loc 1 707 41 view .LVU3503
 13273 004a 92F90120 		ldrsb	r2, [r2, #1]
 13274 004e 002A     		cmp	r2, #0
 708:src/xeq.c     **** 	return 8;
 13275              		.loc 1 708 10 view .LVU3504
 13276 0050 B4BF     		ite	lt
 13277 0052 0822     		movlt	r2, #8
ARM GAS  /tmp/ccQQPlfu.s 			page 391


 13278 0054 0422     		movge	r2, #4
 13279 0056 E2E7     		b	.L976
 13280              	.L977:
 13281 0058 0422     		movs	r2, #4
 13282 005a E0E7     		b	.L976
 13283              	.L983:
 13284              		.align	2
 13285              	.L982:
 13286 005c 00000000 		.word	main_ram
 13287 0060 00000000 		.word	StackBase
 13288 0064 00000000 		.word	StateWhileOn
 13289 0068 00000000 		.word	XromParams
 13290              	.LBE2394:
 13291              	.LBE2403:
 13292              		.cfi_endproc
 13293              	.LFE110:
 13295              		.section	.text.clrreg,"ax",%progbits
 13296              		.align	1
 13297              		.p2align 2,,3
 13298              		.global	clrreg
 13299              		.syntax unified
 13300              		.thumb
 13301              		.thumb_func
 13302              		.fpu fpv4-sp-d16
 13304              	clrreg:
 13305              	.LVL969:
 13306              	.LFB111:
1578:src/xeq.c     **** 	const int local = local_regs();
 13307              		.loc 1 1578 28 is_stmt 1 view -0
 13308              		.cfi_startproc
 13309              		@ args = 0, pretend = 0, frame = 0
 13310              		@ frame_needed = 0, uses_anonymous_args = 0
1579:src/xeq.c     **** 	process_cmdline_set_lift();
 13311              		.loc 1 1579 2 view .LVU3506
 13312              	.LBB2404:
 13313              	.LBI2404:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 13314              		.loc 1 233 5 view .LVU3507
 13315              	.LBE2404:
 234:src/xeq.c     **** }
 13316              		.loc 1 234 2 view .LVU3508
 13317              	.LBB2435:
 13318              	.LBB2405:
 13319              	.LBI2405:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 13320              		.loc 1 225 5 view .LVU3509
 13321              	.LBB2406:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13322              		.loc 1 226 2 view .LVU3510
 13323              	.LBB2407:
 13324              	.LBI2407:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13325              		.loc 1 1112 5 view .LVU3511
 13326              	.LBB2408:
1113:src/xeq.c     **** }
 13327              		.loc 1 1113 2 view .LVU3512
 13328              	.LBE2408:
ARM GAS  /tmp/ccQQPlfu.s 			page 392


 13329              	.LBE2407:
 13330              	.LBE2406:
 13331              	.LBE2405:
 13332              	.LBE2435:
1578:src/xeq.c     **** 	const int local = local_regs();
 13333              		.loc 1 1578 28 is_stmt 0 view .LVU3513
 13334 0000 70B5     		push	{r4, r5, r6, lr}
 13335              		.cfi_def_cfa_offset 16
 13336              		.cfi_offset 4, -16
 13337              		.cfi_offset 5, -12
 13338              		.cfi_offset 6, -8
 13339              		.cfi_offset 14, -4
 13340              	.LBB2436:
 13341              	.LBB2431:
 13342              	.LBB2427:
 13343              	.LBB2412:
 13344              	.LBB2409:
1113:src/xeq.c     **** }
 13345              		.loc 1 1113 12 view .LVU3514
 13346 0002 464C     		ldr	r4, .L1004
 13347 0004 2368     		ldr	r3, [r4]
 13348              	.LVL970:
1113:src/xeq.c     **** }
 13349              		.loc 1 1113 12 view .LVU3515
 13350              	.LBE2409:
 13351              	.LBE2412:
 227:src/xeq.c     **** }
 13352              		.loc 1 227 2 is_stmt 1 view .LVU3516
 13353              	.LBB2413:
 13354              	.LBI2413:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 13355              		.loc 1 217 5 view .LVU3517
 13356              	.LBB2414:
 218:src/xeq.c     **** }
 13357              		.loc 1 218 2 view .LVU3518
 218:src/xeq.c     **** }
 13358              		.loc 1 218 9 is_stmt 0 view .LVU3519
 13359 0006 B3F9DE27 		ldrsh	r2, [r3, #2014]
 218:src/xeq.c     **** }
 13360              		.loc 1 218 57 view .LVU3520
 13361 000a 002A     		cmp	r2, #0
 13362 000c 58DB     		blt	.L1000
 13363              	.LVL971:
 218:src/xeq.c     **** }
 13364              		.loc 1 218 57 view .LVU3521
 13365              	.LBE2414:
 13366              	.LBE2413:
 13367              	.LBE2427:
 13368              	.LBE2431:
 13369              	.LBE2436:
1580:src/xeq.c     **** 
 13370              		.loc 1 1580 2 is_stmt 1 view .LVU3522
 13371              	.LBB2437:
 13372              	.LBI2437:
1326:src/xeq.c     **** 	process_cmdline();
 13373              		.loc 1 1326 6 view .LVU3523
 13374              	.LBE2437:
ARM GAS  /tmp/ccQQPlfu.s 			page 393


1327:src/xeq.c     **** 	set_lift();
 13375              		.loc 1 1327 2 view .LVU3524
 13376              	.LBB2448:
 13377              	.LBB2438:
 13378              	.LBI2438:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 13379              		.loc 1 1220 6 view .LVU3525
 13380              	.LBB2439:
1221:src/xeq.c     **** 
 13381              		.loc 1 1221 2 view .LVU3526
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13382              		.loc 1 1223 2 view .LVU3527
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13383              		.loc 1 1223 6 is_stmt 0 view .LVU3528
 13384 000e 444D     		ldr	r5, .L1004+4
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13385              		.loc 1 1223 5 view .LVU3529
 13386 0010 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 13387              	.LVL972:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13388              		.loc 1 1223 5 view .LVU3530
 13389              	.LBE2439:
 13390              	.LBE2438:
 13391              	.LBE2448:
 13392              	.LBB2449:
 13393              	.LBB2432:
 13394              	.LBB2428:
 13395              	.LBB2420:
 13396              	.LBB2415:
 13397 0012 0026     		movs	r6, #0
 13398              	.LBE2415:
 13399              	.LBE2420:
 13400              	.LBE2428:
 13401              	.LBE2432:
 13402              	.LBE2449:
 13403              	.LBB2450:
 13404              	.LBB2443:
 13405              	.LBB2440:
 13406 0014 002B     		cmp	r3, #0
 13407 0016 69D1     		bne	.L1001
 13408              	.LVL973:
 13409              	.L986:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13410              		.loc 1 1223 5 view .LVU3531
 13411              	.LBE2440:
 13412              	.LBE2443:
 13413              	.LBE2450:
1328:src/xeq.c     **** }
 13414              		.loc 1 1328 2 is_stmt 1 view .LVU3532
 13415              	.LBB2451:
 13416              	.LBB2444:
 13417              	.LBI2444:
 761:src/xeq.c     ****     State2.state_lift = 1;
 13418              		.loc 1 761 6 view .LVU3533
 13419              	.LBB2445:
 762:src/xeq.c     **** }
 13420              		.loc 1 762 5 view .LVU3534
ARM GAS  /tmp/ccQQPlfu.s 			page 394


 762:src/xeq.c     **** }
 13421              		.loc 1 762 23 is_stmt 0 view .LVU3535
 13422 0018 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 13423 001a 43F04003 		orr	r3, r3, #64
 13424 001e EB75     		strb	r3, [r5, #23]
 13425              	.LBE2445:
 13426              	.LBE2444:
 13427              	.LBE2451:
1583:src/xeq.c     **** 
 13428              		.loc 1 1583 2 is_stmt 1 view .LVU3536
 13429 0020 0020     		movs	r0, #0
 13430 0022 FFF7FEFF 		bl	get_reg_n
 13431              	.LVL974:
 13432              	.LBB2452:
 13433              	.LBB2453:
 13434              	.LBB2454:
 13435              	.LBB2455:
 13436              	.LBB2456:
1113:src/xeq.c     **** }
 13437              		.loc 1 1113 12 is_stmt 0 view .LVU3537
 13438 0026 2168     		ldr	r1, [r4]
1113:src/xeq.c     **** }
 13439              		.loc 1 1113 24 view .LVU3538
 13440 0028 B1F8E827 		ldrh	r2, [r1, #2024]
 13441 002c 44F20103 		movw	r3, #16385
 13442 0030 1340     		ands	r3, r3, r2
 13443              	.LBE2456:
 13444              	.LBE2455:
 13445              	.LBE2454:
 13446              	.LBE2453:
 13447              	.LBI2452:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 13448              		.loc 1 253 14 is_stmt 1 view .LVU3539
 13449              	.LBE2452:
 254:src/xeq.c     **** }
 13450              		.loc 1 254 2 view .LVU3540
 13451              	.LVL975:
 13452              	.LBB2471:
 13453              	.LBB2467:
 13454              	.LBI2453:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 13455              		.loc 1 241 14 view .LVU3541
 13456              	.LBB2463:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 13457              		.loc 1 242 2 view .LVU3542
 13458              	.LBB2458:
 13459              	.LBI2455:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13460              		.loc 1 1112 5 view .LVU3543
 13461              	.LBB2457:
1113:src/xeq.c     **** }
 13462              		.loc 1 1113 2 view .LVU3544
 13463              	.LBE2457:
 13464              	.LBE2458:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 13465              		.loc 1 242 5 is_stmt 0 view .LVU3545
 13466 0032 B3F5804F 		cmp	r3, #16384
ARM GAS  /tmp/ccQQPlfu.s 			page 395


 13467              	.LBB2459:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13468              		.loc 1 243 3 is_stmt 1 view .LVU3546
 244:src/xeq.c     **** 	}
 13469              		.loc 1 244 3 view .LVU3547
 13470              	.LVL976:
 244:src/xeq.c     **** 	}
 13471              		.loc 1 244 3 is_stmt 0 view .LVU3548
 13472              	.LBE2459:
 13473              	.LBE2463:
 13474              	.LBE2467:
 13475              	.LBE2471:
 13476              	.LBB2472:
 13477              	.LBI2472:
1512:src/xeq.c     **** #if 0
 13478              		.loc 1 1512 6 is_stmt 1 view .LVU3549
 13479              	.LBB2473:
1527:src/xeq.c     **** #endif
 13480              		.loc 1 1527 2 view .LVU3550
 13481              	.LBB2474:
 13482              	.LBI2474:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13483              		.loc 1 1112 5 view .LVU3551
 13484              	.LBB2475:
1113:src/xeq.c     **** }
 13485              		.loc 1 1113 2 view .LVU3552
 13486              	.LBE2475:
 13487              	.LBE2474:
 13488              	.LBE2473:
 13489              	.LBE2472:
 13490              	.LBB2483:
 13491              	.LBB2468:
 13492              	.LBB2464:
 13493              	.LBB2460:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13494              		.loc 1 243 24 is_stmt 0 view .LVU3553
 13495 0036 91F8CF27 		ldrb	r2, [r1, #1999]	@ zero_extendqisi2
 13496              	.LBE2460:
 13497              	.LBE2464:
 13498              	.LBE2468:
 13499              	.LBE2483:
 13500              	.LBB2484:
 13501              	.LBB2480:
 13502              	.LBB2478:
 13503              	.LBB2476:
1113:src/xeq.c     **** }
 13504              		.loc 1 1113 24 view .LVU3554
 13505 003a A3F58043 		sub	r3, r3, #16384
 13506 003e B3FA83F3 		clz	r3, r3
 13507              	.LBE2476:
 13508              	.LBE2478:
 13509              	.LBE2480:
 13510              	.LBE2484:
 13511              	.LBB2485:
 13512              	.LBB2469:
 13513              	.LBB2465:
 13514              	.LBB2461:
ARM GAS  /tmp/ccQQPlfu.s 			page 396


 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13515              		.loc 1 243 13 view .LVU3555
 13516 0042 08BF     		it	eq
 13517 0044 0C3A     		subeq	r2, r2, #12
 13518              	.LBE2461:
 13519              	.LBE2465:
 13520              	.LBE2469:
 13521              	.LBE2485:
 13522              	.LBB2486:
 13523              	.LBB2481:
 13524              	.LBB2479:
 13525              	.LBB2477:
1113:src/xeq.c     **** }
 13526              		.loc 1 1113 24 view .LVU3556
 13527 0046 4FEA5313 		lsr	r3, r3, #5
 13528              	.LBE2477:
 13529              	.LBE2479:
 13530              	.LBE2481:
 13531              	.LBE2486:
 13532              	.LBB2487:
 13533              	.LBB2470:
 13534              	.LBB2466:
 13535              	.LBB2462:
 244:src/xeq.c     **** 	}
 13536              		.loc 1 244 67 view .LVU3557
 13537 004a 08BF     		it	eq
 13538 004c 5210     		asreq	r2, r2, #1
 13539              	.LBE2462:
 13540              	.LBE2466:
 13541              	.LBE2470:
 13542              	.LBE2487:
 13543              	.LBB2488:
 13544              	.LBB2482:
1527:src/xeq.c     **** #endif
 13545              		.loc 1 1527 24 view .LVU3558
 13546 004e 0333     		adds	r3, r3, #3
1527:src/xeq.c     **** #endif
 13547              		.loc 1 1527 2 view .LVU3559
 13548 0050 9A40     		lsls	r2, r2, r3
 13549 0052 0021     		movs	r1, #0
 13550 0054 FFF7FEFF 		bl	xset
 13551              	.LVL977:
1527:src/xeq.c     **** #endif
 13552              		.loc 1 1527 2 view .LVU3560
 13553              	.LBE2482:
 13554              	.LBE2488:
1586:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
 13555              		.loc 1 1586 2 is_stmt 1 view .LVU3561
 13556              	.LBB2489:
 13557              	.LBI2489:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 13558              		.loc 1 706 5 view .LVU3562
 13559              	.LBB2490:
 707:src/xeq.c     **** 		return 4;
 13560              		.loc 1 707 2 view .LVU3563
 707:src/xeq.c     **** 		return 4;
 13561              		.loc 1 707 8 is_stmt 0 view .LVU3564
ARM GAS  /tmp/ccQQPlfu.s 			page 397


 13562 0058 2368     		ldr	r3, [r4]
 707:src/xeq.c     **** 		return 4;
 13563              		.loc 1 707 6 view .LVU3565
 13564 005a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 13565              		.loc 1 707 5 view .LVU3566
 13566 005e 1207     		lsls	r2, r2, #28
 13567 0060 1CD5     		bpl	.L989
 13568              	.LBB2491:
 13569              	.LBI2491:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 13570              		.loc 1 185 5 is_stmt 1 view .LVU3567
 13571              	.LBB2492:
 186:src/xeq.c     **** }
 13572              		.loc 1 186 2 view .LVU3568
 186:src/xeq.c     **** }
 13573              		.loc 1 186 9 is_stmt 0 view .LVU3569
 13574 0062 B3F8E037 		ldrh	r3, [r3, #2016]
 13575              	.LBE2492:
 13576              	.LBE2491:
 707:src/xeq.c     **** 		return 4;
 13577              		.loc 1 707 27 view .LVU3570
 13578 0066 9B0B     		lsrs	r3, r3, #14
 13579 0068 032B     		cmp	r3, #3
 13580 006a 12D0     		beq	.L1002
 13581              	.L990:
 13582              	.LBE2490:
 13583              	.LBE2489:
1590:src/xeq.c     **** 
 13584              		.loc 1 1590 2 is_stmt 1 view .LVU3571
 13585 006c 6E20     		movs	r0, #110
 13586 006e FFF7FEFF 		bl	get_reg_n
 13587              	.LVL978:
 13588              	.LBB2494:
 13589              	.LBI2494:
1512:src/xeq.c     **** #if 0
 13590              		.loc 1 1512 6 view .LVU3572
 13591              	.LBB2495:
1527:src/xeq.c     **** #endif
 13592              		.loc 1 1527 2 view .LVU3573
 13593              	.LBB2496:
 13594              	.LBI2496:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13595              		.loc 1 1112 5 view .LVU3574
 13596              	.LBB2497:
1113:src/xeq.c     **** }
 13597              		.loc 1 1113 2 view .LVU3575
1113:src/xeq.c     **** }
 13598              		.loc 1 1113 24 is_stmt 0 view .LVU3576
 13599 0072 2368     		ldr	r3, [r4]
 13600 0074 B3F8E827 		ldrh	r2, [r3, #2024]
 13601 0078 44F20105 		movw	r5, #16385
 13602 007c 2A40     		ands	r2, r2, r5
 13603              	.LBE2497:
 13604              	.LBE2496:
1527:src/xeq.c     **** #endif
 13605              		.loc 1 1527 2 view .LVU3577
ARM GAS  /tmp/ccQQPlfu.s 			page 398


 13606 007e B2F5804F 		cmp	r2, #16384
 13607 0082 0CBF     		ite	eq
 13608 0084 2022     		moveq	r2, #32
 13609 0086 1022     		movne	r2, #16
 13610 0088 0021     		movs	r1, #0
 13611 008a FFF7FEFF 		bl	xset
 13612              	.LVL979:
1527:src/xeq.c     **** #endif
 13613              		.loc 1 1527 2 view .LVU3578
 13614              	.LBE2495:
 13615              	.LBE2494:
1593:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 13616              		.loc 1 1593 2 is_stmt 1 view .LVU3579
1593:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 13617              		.loc 1 1593 5 is_stmt 0 view .LVU3580
 13618 008e 86BB     		cbnz	r6, .L1003
1595:src/xeq.c     **** 
 13619              		.loc 1 1595 1 view .LVU3581
 13620 0090 70BD     		pop	{r4, r5, r6, pc}
 13621              	.L1002:
 13622              	.LBB2498:
 13623              	.LBB2493:
 707:src/xeq.c     **** 		return 4;
 13624              		.loc 1 707 44 view .LVU3582
 13625 0092 244B     		ldr	r3, .L1004+8
 707:src/xeq.c     **** 		return 4;
 13626              		.loc 1 707 41 view .LVU3583
 13627 0094 93F90130 		ldrsb	r3, [r3, #1]
 13628 0098 002B     		cmp	r3, #0
 13629 009a E7DB     		blt	.L990
 13630              	.L989:
 708:src/xeq.c     **** 	return 8;
 13631              		.loc 1 708 3 is_stmt 1 view .LVU3584
 13632              	.LBE2493:
 13633              	.LBE2498:
1587:src/xeq.c     **** 
 13634              		.loc 1 1587 3 view .LVU3585
 13635 009c 6820     		movs	r0, #104
 13636 009e FFF7FEFF 		bl	get_reg_n
 13637              	.LVL980:
 13638              	.LBB2499:
 13639              	.LBI2499:
1512:src/xeq.c     **** #if 0
 13640              		.loc 1 1512 6 view .LVU3586
 13641              	.LBB2500:
1527:src/xeq.c     **** #endif
 13642              		.loc 1 1527 2 view .LVU3587
 13643              	.LBB2501:
 13644              	.LBI2501:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13645              		.loc 1 1112 5 view .LVU3588
 13646              	.LBB2502:
1113:src/xeq.c     **** }
 13647              		.loc 1 1113 2 view .LVU3589
1113:src/xeq.c     **** }
 13648              		.loc 1 1113 24 is_stmt 0 view .LVU3590
 13649 00a2 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccQQPlfu.s 			page 399


 13650 00a4 B3F8E837 		ldrh	r3, [r3, #2024]
 13651 00a8 44F20102 		movw	r2, #16385
 13652 00ac 1A40     		ands	r2, r2, r3
 13653              	.LBE2502:
 13654              	.LBE2501:
1527:src/xeq.c     **** #endif
 13655              		.loc 1 1527 2 view .LVU3591
 13656 00ae B2F5804F 		cmp	r2, #16384
 13657 00b2 0CBF     		ite	eq
 13658 00b4 4022     		moveq	r2, #64
 13659 00b6 2022     		movne	r2, #32
 13660 00b8 0021     		movs	r1, #0
 13661 00ba FFF7FEFF 		bl	xset
 13662              	.LVL981:
1529:src/xeq.c     **** 
 13663              		.loc 1 1529 1 view .LVU3592
 13664 00be D5E7     		b	.L990
 13665              	.LVL982:
 13666              	.L1000:
1529:src/xeq.c     **** 
 13667              		.loc 1 1529 1 view .LVU3593
 13668              	.LBE2500:
 13669              	.LBE2499:
 13670              	.LBB2503:
 13671              	.LBB2433:
 13672              	.LBB2429:
 13673              	.LBB2421:
 13674              	.LBB2410:
1113:src/xeq.c     **** }
 13675              		.loc 1 1113 24 view .LVU3594
 13676 00c0 B3F8E867 		ldrh	r6, [r3, #2024]
 13677              	.LBE2410:
 13678              	.LBE2421:
 13679              	.LBB2422:
 13680              	.LBB2416:
 218:src/xeq.c     **** }
 13681              		.loc 1 218 25 view .LVU3595
 13682 00c4 1849     		ldr	r1, .L1004+12
 13683              	.LBE2416:
 13684              	.LBE2422:
 13685              	.LBE2429:
 13686              	.LBE2433:
 13687              	.LBE2503:
 13688              	.LBB2504:
 13689              	.LBB2446:
 13690              	.LBB2441:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13691              		.loc 1 1223 6 view .LVU3596
 13692 00c6 164D     		ldr	r5, .L1004+4
 13693              	.LBE2441:
 13694              	.LBE2446:
 13695              	.LBE2504:
 13696              	.LBB2505:
 13697              	.LBB2434:
 13698              	.LBB2430:
 13699              	.LBB2423:
 13700              	.LBB2417:
ARM GAS  /tmp/ccQQPlfu.s 			page 400


 218:src/xeq.c     **** }
 13701              		.loc 1 218 25 view .LVU3597
 13702 00c8 0968     		ldr	r1, [r1]
 13703              	.LBE2417:
 13704              	.LBE2423:
 13705              	.LBB2424:
 13706              	.LBB2411:
1113:src/xeq.c     **** }
 13707              		.loc 1 1113 24 view .LVU3598
 13708 00ca 44F20103 		movw	r3, #16385
 13709              	.LVL983:
1113:src/xeq.c     **** }
 13710              		.loc 1 1113 24 view .LVU3599
 13711              	.LBE2411:
 13712              	.LBE2424:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13713              		.loc 1 226 73 view .LVU3600
 13714 00ce 3340     		ands	r3, r3, r6
 13715 00d0 A3F58043 		sub	r3, r3, #16384
 13716              	.LBB2425:
 13717              	.LBB2418:
 218:src/xeq.c     **** }
 13718              		.loc 1 218 57 view .LVU3601
 13719 00d4 31F81260 		ldrh	r6, [r1, r2, lsl #1]
 13720              	.LBE2418:
 13721              	.LBE2425:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13722              		.loc 1 226 73 view .LVU3602
 13723 00d8 B3FA83F3 		clz	r3, r3
 13724 00dc 5B09     		lsrs	r3, r3, #5
 13725 00de 0233     		adds	r3, r3, #2
 13726              	.LBB2426:
 13727              	.LBB2419:
 218:src/xeq.c     **** }
 13728              		.loc 1 218 57 view .LVU3603
 13729 00e0 C6F30B06 		ubfx	r6, r6, #0, #12
 13730 00e4 1E41     		asrs	r6, r6, r3
 13731              	.LVL984:
 218:src/xeq.c     **** }
 13732              		.loc 1 218 57 view .LVU3604
 13733              	.LBE2419:
 13734              	.LBE2426:
 13735              	.LBE2430:
 13736              	.LBE2434:
 13737              	.LBE2505:
1580:src/xeq.c     **** 
 13738              		.loc 1 1580 2 is_stmt 1 view .LVU3605
 13739              	.LBB2506:
1326:src/xeq.c     **** 	process_cmdline();
 13740              		.loc 1 1326 6 view .LVU3606
 13741              	.LBE2506:
1327:src/xeq.c     **** 	set_lift();
 13742              		.loc 1 1327 2 view .LVU3607
 13743              	.LBB2507:
 13744              	.LBB2447:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 13745              		.loc 1 1220 6 view .LVU3608
ARM GAS  /tmp/ccQQPlfu.s 			page 401


 13746              	.LBB2442:
1221:src/xeq.c     **** 
 13747              		.loc 1 1221 2 view .LVU3609
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13748              		.loc 1 1223 2 view .LVU3610
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13749              		.loc 1 1223 5 is_stmt 0 view .LVU3611
 13750 00e6 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 13751 00e8 002B     		cmp	r3, #0
 13752 00ea 95D0     		beq	.L986
 13753              	.L1001:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13754              		.loc 1 1223 5 view .LVU3612
 13755 00ec FFF7FEFF 		bl	process_cmdline.part.0
 13756              	.LVL985:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13757              		.loc 1 1223 5 view .LVU3613
 13758 00f0 92E7     		b	.L986
 13759              	.L1003:
 13760              	.LBE2442:
 13761              	.LBE2447:
 13762              	.LBE2507:
1594:src/xeq.c     **** }
 13763              		.loc 1 1594 3 is_stmt 1 view .LVU3614
 13764 00f2 7020     		movs	r0, #112
 13765 00f4 FFF7FEFF 		bl	get_reg_n
 13766              	.LVL986:
 13767              	.LBB2508:
 13768              	.LBI2508:
1512:src/xeq.c     **** #if 0
 13769              		.loc 1 1512 6 view .LVU3615
 13770              	.LBB2509:
1527:src/xeq.c     **** #endif
 13771              		.loc 1 1527 2 view .LVU3616
 13772              	.LBB2510:
 13773              	.LBI2510:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13774              		.loc 1 1112 5 view .LVU3617
 13775              	.LBB2511:
1113:src/xeq.c     **** }
 13776              		.loc 1 1113 2 view .LVU3618
1113:src/xeq.c     **** }
 13777              		.loc 1 1113 24 is_stmt 0 view .LVU3619
 13778 00f8 2368     		ldr	r3, [r4]
 13779 00fa B3F8E827 		ldrh	r2, [r3, #2024]
 13780 00fe 2A40     		ands	r2, r2, r5
 13781 0100 A2F58042 		sub	r2, r2, #16384
 13782 0104 B2FA82F2 		clz	r2, r2
 13783 0108 5209     		lsrs	r2, r2, #5
 13784              	.LBE2511:
 13785              	.LBE2510:
1527:src/xeq.c     **** #endif
 13786              		.loc 1 1527 24 view .LVU3620
 13787 010a 0332     		adds	r2, r2, #3
1527:src/xeq.c     **** #endif
 13788              		.loc 1 1527 2 view .LVU3621
 13789 010c 06FA02F2 		lsl	r2, r6, r2
ARM GAS  /tmp/ccQQPlfu.s 			page 402


 13790 0110 0021     		movs	r1, #0
 13791              	.LBE2509:
 13792              	.LBE2508:
1595:src/xeq.c     **** 
 13793              		.loc 1 1595 1 view .LVU3622
 13794 0112 BDE87040 		pop	{r4, r5, r6, lr}
 13795              		.cfi_restore 14
 13796              		.cfi_restore 6
 13797              		.cfi_restore 5
 13798              		.cfi_restore 4
 13799              		.cfi_def_cfa_offset 0
 13800              	.LBB2513:
 13801              	.LBB2512:
1527:src/xeq.c     **** #endif
 13802              		.loc 1 1527 2 view .LVU3623
 13803 0116 FFF7FEBF 		b	xset
 13804              	.LVL987:
 13805              	.L1005:
1527:src/xeq.c     **** #endif
 13806              		.loc 1 1527 2 view .LVU3624
 13807 011a 00BF     		.align	2
 13808              	.L1004:
 13809 011c 00000000 		.word	main_ram
 13810 0120 00000000 		.word	StateWhileOn
 13811 0124 00000000 		.word	XromParams
 13812 0128 00000000 		.word	RetStk
 13813              	.LBE2512:
 13814              	.LBE2513:
 13815              		.cfi_endproc
 13816              	.LFE111:
 13818              		.section	.text.clrretstk,"ax",%progbits
 13819              		.align	1
 13820              		.p2align 2,,3
 13821              		.global	clrretstk
 13822              		.syntax unified
 13823              		.thumb
 13824              		.thumb_func
 13825              		.fpu fpv4-sp-d16
 13827              	clrretstk:
 13828              	.LFB112:
1600:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 13829              		.loc 1 1600 22 is_stmt 1 view -0
 13830              		.cfi_startproc
 13831              		@ args = 0, pretend = 0, frame = 0
 13832              		@ frame_needed = 0, uses_anonymous_args = 0
 13833              		@ link register save eliminated.
1601:src/xeq.c     **** }
 13834              		.loc 1 1601 2 view .LVU3626
1601:src/xeq.c     **** }
 13835              		.loc 1 1601 14 is_stmt 0 view .LVU3627
 13836 0000 034B     		ldr	r3, .L1007
 13837 0002 1B68     		ldr	r3, [r3]
1601:src/xeq.c     **** }
 13838              		.loc 1 1601 24 view .LVU3628
 13839 0004 0022     		movs	r2, #0
 13840 0006 A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
1601:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 403


 13841              		.loc 1 1601 12 view .LVU3629
 13842 000a A3F8E227 		strh	r2, [r3, #2018]	@ movhi
1602:src/xeq.c     **** 
 13843              		.loc 1 1602 1 view .LVU3630
 13844 000e 7047     		bx	lr
 13845              	.L1008:
 13846              		.align	2
 13847              	.L1007:
 13848 0010 00000000 		.word	main_ram
 13849              		.cfi_endproc
 13850              	.LFE112:
 13852              		.section	.text.clrretstk_pc,"ax",%progbits
 13853              		.align	1
 13854              		.p2align 2,,3
 13855              		.global	clrretstk_pc
 13856              		.syntax unified
 13857              		.thumb
 13858              		.thumb_func
 13859              		.fpu fpv4-sp-d16
 13861              	clrretstk_pc:
 13862              	.LFB113:
1604:src/xeq.c     **** 	clrretstk();
 13863              		.loc 1 1604 25 is_stmt 1 view -0
 13864              		.cfi_startproc
 13865              		@ args = 0, pretend = 0, frame = 0
 13866              		@ frame_needed = 0, uses_anonymous_args = 0
1605:src/xeq.c     **** 	raw_set_pc(0);
 13867              		.loc 1 1605 2 view .LVU3632
 13868              	.LBB2514:
 13869              	.LBI2514:
1600:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 13870              		.loc 1 1600 6 view .LVU3633
 13871              	.LBB2515:
1601:src/xeq.c     **** }
 13872              		.loc 1 1601 2 view .LVU3634
 13873              	.LBE2515:
 13874              	.LBE2514:
1604:src/xeq.c     **** 	clrretstk();
 13875              		.loc 1 1604 25 is_stmt 0 view .LVU3635
 13876 0000 08B5     		push	{r3, lr}
 13877              		.cfi_def_cfa_offset 8
 13878              		.cfi_offset 3, -8
 13879              		.cfi_offset 14, -4
 13880              	.LBB2518:
 13881              	.LBB2516:
1601:src/xeq.c     **** }
 13882              		.loc 1 1601 14 view .LVU3636
 13883 0002 074B     		ldr	r3, .L1011
 13884 0004 1B68     		ldr	r3, [r3]
 13885              	.LBE2516:
 13886              	.LBE2518:
1606:src/xeq.c     **** 	update_program_bounds(1);
 13887              		.loc 1 1606 2 is_stmt 1 view .LVU3637
 13888              	.LVL988:
 13889              	.LBB2519:
 13890              	.LBI2519:
 282:src/xeq.c     **** 	State.pc = pc;
ARM GAS  /tmp/ccQQPlfu.s 			page 404


 13891              		.loc 1 282 13 view .LVU3638
 13892              	.LBB2520:
 283:src/xeq.c     **** 	update_program_bounds(0);
 13893              		.loc 1 283 2 view .LVU3639
 13894              	.LBE2520:
 13895              	.LBE2519:
 13896              	.LBB2522:
 13897              	.LBB2517:
1601:src/xeq.c     **** }
 13898              		.loc 1 1601 24 is_stmt 0 view .LVU3640
 13899 0006 0020     		movs	r0, #0
 13900 0008 A3F8DE07 		strh	r0, [r3, #2014]	@ movhi
 13901              	.LBE2517:
 13902              	.LBE2522:
 13903              	.LBB2523:
 13904              	.LBB2521:
 283:src/xeq.c     **** 	update_program_bounds(0);
 13905              		.loc 1 283 11 view .LVU3641
 13906 000c C3F8E007 		str	r0, [r3, #2016]
 284:src/xeq.c     **** }
 13907              		.loc 1 284 2 is_stmt 1 view .LVU3642
 13908 0010 FFF7FEFF 		bl	update_program_bounds
 13909              	.LVL989:
 284:src/xeq.c     **** }
 13910              		.loc 1 284 2 is_stmt 0 view .LVU3643
 13911              	.LBE2521:
 13912              	.LBE2523:
1607:src/xeq.c     **** }
 13913              		.loc 1 1607 2 is_stmt 1 view .LVU3644
1608:src/xeq.c     **** 
 13914              		.loc 1 1608 1 is_stmt 0 view .LVU3645
 13915 0014 BDE80840 		pop	{r3, lr}
 13916              		.cfi_restore 14
 13917              		.cfi_restore 3
 13918              		.cfi_def_cfa_offset 0
1607:src/xeq.c     **** }
 13919              		.loc 1 1607 2 view .LVU3646
 13920 0018 0120     		movs	r0, #1
 13921 001a FFF7FEBF 		b	update_program_bounds
 13922              	.LVL990:
 13923              	.L1012:
 13924 001e 00BF     		.align	2
 13925              	.L1011:
 13926 0020 00000000 		.word	main_ram
 13927              		.cfi_endproc
 13928              	.LFE113:
 13930              		.section	.text.cmdconst,"ax",%progbits
 13931              		.align	1
 13932              		.p2align 2,,3
 13933              		.global	cmdconst
 13934              		.syntax unified
 13935              		.thumb
 13936              		.thumb_func
 13937              		.fpu fpv4-sp-d16
 13939              	cmdconst:
 13940              	.LVL991:
 13941              	.LFB114:
ARM GAS  /tmp/ccQQPlfu.s 			page 405


1614:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13942              		.loc 1 1614 47 is_stmt 1 view -0
 13943              		.cfi_startproc
 13944              		@ args = 0, pretend = 0, frame = 0
 13945              		@ frame_needed = 0, uses_anonymous_args = 0
1616:src/xeq.c     **** #else
 13946              		.loc 1 1616 2 view .LVU3648
1614:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13947              		.loc 1 1614 47 is_stmt 0 view .LVU3649
 13948 0000 70B5     		push	{r4, r5, r6, lr}
 13949              		.cfi_def_cfa_offset 16
 13950              		.cfi_offset 4, -16
 13951              		.cfi_offset 5, -12
 13952              		.cfi_offset 6, -8
 13953              		.cfi_offset 14, -4
1616:src/xeq.c     **** #else
 13954              		.loc 1 1616 5 view .LVU3650
 13955 0002 01F0FD03 		and	r3, r1, #253
 13956 0006 882B     		cmp	r3, #136
1614:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13957              		.loc 1 1614 47 view .LVU3651
 13958 0008 82B0     		sub	sp, sp, #8
 13959              		.cfi_def_cfa_offset 24
1614:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13960              		.loc 1 1614 47 view .LVU3652
 13961 000a 0C46     		mov	r4, r1
 13962 000c 0546     		mov	r5, r0
1616:src/xeq.c     **** #else
 13963              		.loc 1 1616 5 view .LVU3653
 13964 000e 1CD0     		beq	.L1014
1616:src/xeq.c     **** #else
 13965              		.loc 1 1616 30 discriminator 1 view .LVU3654
 13966 0010 0129     		cmp	r1, #1
 13967 0012 1AD0     		beq	.L1014
1624:src/xeq.c     **** 
 13968              		.loc 1 1624 3 is_stmt 1 view .LVU3655
 13969              	.LBB2545:
 13970              	.LBI2545:
 741:src/xeq.c     **** 	if (get_lift())
 13971              		.loc 1 741 6 view .LVU3656
 13972              	.LBB2546:
 742:src/xeq.c     **** 		lift();
 13973              		.loc 1 742 2 view .LVU3657
 13974              	.LBB2547:
 13975              	.LBI2547:
 737:src/xeq.c     **** 	return State2.state_lift;
 13976              		.loc 1 737 12 view .LVU3658
 13977              	.LBB2548:
 738:src/xeq.c     **** }
 13978              		.loc 1 738 2 view .LVU3659
 738:src/xeq.c     **** }
 13979              		.loc 1 738 15 is_stmt 0 view .LVU3660
 13980 0014 2B4B     		ldr	r3, .L1031
 13981 0016 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 13982              	.LBE2548:
 13983              	.LBE2547:
 742:src/xeq.c     **** 		lift();
ARM GAS  /tmp/ccQQPlfu.s 			page 406


 13984              		.loc 1 742 5 view .LVU3661
 13985 0018 5906     		lsls	r1, r3, #25
 13986              	.LVL992:
 742:src/xeq.c     **** 		lift();
 13987              		.loc 1 742 5 view .LVU3662
 13988 001a 4FD4     		bmi	.L1029
 13989              	.LVL993:
 13990              	.L1016:
 742:src/xeq.c     **** 		lift();
 13991              		.loc 1 742 5 view .LVU3663
 13992              	.LBE2546:
 13993              	.LBE2545:
1626:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 13994              		.loc 1 1626 2 is_stmt 1 view .LVU3664
1626:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 13995              		.loc 1 1626 24 is_stmt 0 view .LVU3665
 13996 001c 7934     		adds	r4, r4, #121
1626:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 13997              		.loc 1 1626 5 view .LVU3666
 13998 001e E4B2     		uxtb	r4, r4
 13999 0020 012C     		cmp	r4, #1
 14000 0022 23D9     		bls	.L1030
 14001              	.L1017:
1628:src/xeq.c     **** 		bad_mode_error();
 14002              		.loc 1 1628 7 is_stmt 1 view .LVU3667
1628:src/xeq.c     **** 		bad_mode_error();
 14003              		.loc 1 1628 11 is_stmt 0 view .LVU3668
 14004 0024 284C     		ldr	r4, .L1031+4
 14005 0026 2368     		ldr	r3, [r4]
 14006 0028 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1628:src/xeq.c     **** 		bad_mode_error();
 14007              		.loc 1 1628 10 view .LVU3669
 14008 002c D207     		lsls	r2, r2, #31
 14009 002e 26D5     		bpl	.L1019
1629:src/xeq.c     **** 	else 
 14010              		.loc 1 1629 3 is_stmt 1 view .LVU3670
 14011              	.LBB2550:
 14012              	.LBI2550:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14013              		.loc 1 569 6 view .LVU3671
 14014              	.LBE2550:
 570:src/xeq.c     **** }
 14015              		.loc 1 570 2 view .LVU3672
 14016              	.LVL994:
 14017              	.LBB2555:
 14018              	.LBB2551:
 14019              	.LBI2551:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14020              		.loc 1 540 5 view .LVU3673
 14021              	.LBB2552:
 541:src/xeq.c     **** 		Error = e;
 14022              		.loc 1 541 2 view .LVU3674
 541:src/xeq.c     **** 		Error = e;
 14023              		.loc 1 541 12 is_stmt 0 view .LVU3675
 14024 0030 264A     		ldr	r2, .L1031+8
 541:src/xeq.c     **** 		Error = e;
 14025              		.loc 1 541 5 view .LVU3676
ARM GAS  /tmp/ccQQPlfu.s 			page 407


 14026 0032 1168     		ldr	r1, [r2]
 14027 0034 09B9     		cbnz	r1, .L1018
 14028              	.LVL995:
 14029              	.LBB2553:
 14030              	.LBI2553:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14031              		.loc 1 540 5 is_stmt 1 view .LVU3677
 14032              	.LBB2554:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14033              		.loc 1 542 3 view .LVU3678
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14034              		.loc 1 542 9 is_stmt 0 view .LVU3679
 14035 0036 0D21     		movs	r1, #13
 14036 0038 1160     		str	r1, [r2]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14037              		.loc 1 543 3 is_stmt 1 view .LVU3680
 14038              	.LVL996:
 14039              	.L1018:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14040              		.loc 1 543 3 is_stmt 0 view .LVU3681
 14041              	.LBE2554:
 14042              	.LBE2553:
 14043              	.LBE2552:
 14044              	.LBE2551:
 14045              	.LBE2555:
1633:src/xeq.c     **** #endif
 14046              		.loc 1 1633 2 is_stmt 1 view .LVU3682
 14047 003a 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 14048 003e 42F00102 		orr	r2, r2, #1
 14049 0042 83F8AD27 		strb	r2, [r3, #1965]
1635:src/xeq.c     **** 
 14050              		.loc 1 1635 1 is_stmt 0 view .LVU3683
 14051 0046 02B0     		add	sp, sp, #8
 14052              		.cfi_remember_state
 14053              		.cfi_def_cfa_offset 16
 14054              		@ sp needed
 14055 0048 70BD     		pop	{r4, r5, r6, pc}
 14056              	.LVL997:
 14057              	.L1014:
 14058              		.cfi_restore_state
1620:src/xeq.c     **** 		zero_Y();
 14059              		.loc 1 1620 3 is_stmt 1 view .LVU3684
 14060 004a FFF7FEFF 		bl	lift2_if_enabled
 14061              	.LVL998:
1621:src/xeq.c     **** 		set_was_complex();
 14062              		.loc 1 1621 3 view .LVU3685
 14063              	.LBB2556:
 14064              	.LBI2556:
1548:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 14065              		.loc 1 1548 6 view .LVU3686
 14066              	.LBB2557:
1549:src/xeq.c     **** }
 14067              		.loc 1 1549 2 view .LVU3687
 14068 004e 6520     		movs	r0, #101
 14069 0050 FFF7FEFF 		bl	get_reg_n
 14070              	.LVL999:
 14071 0054 FFF7FEFF 		bl	set_zero
ARM GAS  /tmp/ccQQPlfu.s 			page 408


 14072              	.LVL1000:
 14073              	.LBE2557:
 14074              	.LBE2556:
1622:src/xeq.c     **** 	} else
 14075              		.loc 1 1622 3 view .LVU3688
 14076              	.LBB2558:
 14077              	.LBI2558:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 14078              		.loc 1 533 13 view .LVU3689
 14079              	.LBB2559:
 534:src/xeq.c     **** }
 14080              		.loc 1 534 2 view .LVU3690
 534:src/xeq.c     **** }
 14081              		.loc 1 534 20 is_stmt 0 view .LVU3691
 14082 0058 1A4B     		ldr	r3, .L1031
 14083              	.LBE2559:
 14084              	.LBE2558:
1626:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14085              		.loc 1 1626 24 view .LVU3692
 14086 005a 7934     		adds	r4, r4, #121
 14087              	.LBB2563:
 14088              	.LBB2560:
 534:src/xeq.c     **** }
 14089              		.loc 1 534 20 view .LVU3693
 14090 005c 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14091 005e 0121     		movs	r1, #1
 14092              	.LBE2560:
 14093              	.LBE2563:
1626:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14094              		.loc 1 1626 5 view .LVU3694
 14095 0060 E4B2     		uxtb	r4, r4
 14096              	.LBB2564:
 14097              	.LBB2561:
 534:src/xeq.c     **** }
 14098              		.loc 1 534 20 view .LVU3695
 14099 0062 61F38712 		bfi	r2, r1, #6, #2
 14100              	.LBE2561:
 14101              	.LBE2564:
1626:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14102              		.loc 1 1626 5 view .LVU3696
 14103 0066 012C     		cmp	r4, #1
 14104              	.LBB2565:
 14105              	.LBB2562:
 534:src/xeq.c     **** }
 14106              		.loc 1 534 20 view .LVU3697
 14107 0068 1A75     		strb	r2, [r3, #20]
 14108              	.LBE2562:
 14109              	.LBE2565:
1626:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14110              		.loc 1 1626 2 is_stmt 1 view .LVU3698
1626:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14111              		.loc 1 1626 5 is_stmt 0 view .LVU3699
 14112 006a DBD8     		bhi	.L1017
 14113              	.L1030:
1627:src/xeq.c     **** 	else if (is_intmode())
 14114              		.loc 1 1627 3 is_stmt 1 view .LVU3700
 14115              	.LVL1001:
ARM GAS  /tmp/ccQQPlfu.s 			page 409


 14116              	.LBB2566:
 14117              	.LBI2566:
1503:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14118              		.loc 1 1503 6 view .LVU3701
 14119              	.LBB2567:
1504:src/xeq.c     **** }
 14120              		.loc 1 1504 2 view .LVU3702
 14121              	.LBE2567:
 14122              	.LBE2566:
1627:src/xeq.c     **** 	else if (is_intmode())
 14123              		.loc 1 1627 3 is_stmt 0 view .LVU3703
 14124 006c 0023     		movs	r3, #0
 14125              	.LBB2569:
 14126              	.LBB2568:
1504:src/xeq.c     **** }
 14127              		.loc 1 1504 2 view .LVU3704
 14128 006e 0093     		str	r3, [sp]
 14129 0070 2A46     		mov	r2, r5
 14130 0072 6420     		movs	r0, #100
 14131 0074 FFF7FEFF 		bl	set_reg_n_int_sgn
 14132              	.LVL1002:
 14133 0078 134B     		ldr	r3, .L1031+4
 14134 007a 1B68     		ldr	r3, [r3]
1505:src/xeq.c     **** 
 14135              		.loc 1 1505 1 view .LVU3705
 14136 007c DDE7     		b	.L1018
 14137              	.LVL1003:
 14138              	.L1019:
1505:src/xeq.c     **** 
 14139              		.loc 1 1505 1 view .LVU3706
 14140              	.LBE2568:
 14141              	.LBE2569:
1631:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14142              		.loc 1 1631 3 is_stmt 1 view .LVU3707
 14143              	.LBB2570:
 14144              	.LBB2571:
1113:src/xeq.c     **** }
 14145              		.loc 1 1113 24 is_stmt 0 view .LVU3708
 14146 007e B3F8E817 		ldrh	r1, [r3, #2024]
 14147              	.LBE2571:
 14148              	.LBE2570:
1631:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14149              		.loc 1 1631 3 view .LVU3709
 14150 0082 134B     		ldr	r3, .L1031+12
 14151              	.LBB2574:
 14152              	.LBB2572:
1113:src/xeq.c     **** }
 14153              		.loc 1 1113 24 view .LVU3710
 14154 0084 44F20106 		movw	r6, #16385
 14155 0088 3140     		ands	r1, r1, r6
 14156              	.LBE2572:
 14157              	.LBE2574:
1631:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14158              		.loc 1 1631 22 view .LVU3711
 14159 008a A1F58041 		sub	r1, r1, #16384
 14160 008e B1FA81F1 		clz	r1, r1
 14161 0092 2846     		mov	r0, r5
ARM GAS  /tmp/ccQQPlfu.s 			page 410


 14162 0094 4909     		lsrs	r1, r1, #5
1631:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14163              		.loc 1 1631 3 view .LVU3712
 14164 0096 1D68     		ldr	r5, [r3]
 14165              	.LVL1004:
 14166              	.LBB2575:
 14167              	.LBI2570:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14168              		.loc 1 1112 5 is_stmt 1 view .LVU3713
 14169              	.LBB2573:
1113:src/xeq.c     **** }
 14170              		.loc 1 1113 2 view .LVU3714
 14171              	.LBE2573:
 14172              	.LBE2575:
1631:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14173              		.loc 1 1631 22 is_stmt 0 view .LVU3715
 14174 0098 FFF7FEFF 		bl	get_const
 14175              	.LVL1005:
 14176              	.LBB2576:
 14177              	.LBB2577:
 14178              	.LBB2578:
 14179              	.LBB2579:
1113:src/xeq.c     **** }
 14180              		.loc 1 1113 24 view .LVU3716
 14181 009c 2368     		ldr	r3, [r4]
 14182 009e B3F8E837 		ldrh	r3, [r3, #2024]
 14183              	.LBE2579:
 14184              	.LBE2578:
 721:src/xeq.c     **** }
 14185              		.loc 1 721 2 view .LVU3717
 14186 00a2 1E40     		ands	r6, r6, r3
 14187 00a4 B6F5804F 		cmp	r6, #16384
 14188              	.LBE2577:
 14189              	.LBE2576:
1631:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14190              		.loc 1 1631 22 view .LVU3718
 14191 00a8 0146     		mov	r1, r0
 14192              	.LVL1006:
 14193              	.LBB2583:
 14194              	.LBI2576:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14195              		.loc 1 720 6 is_stmt 1 view .LVU3719
 14196              	.LBB2582:
 721:src/xeq.c     **** }
 14197              		.loc 1 721 2 view .LVU3720
 14198              	.LBB2581:
 14199              	.LBI2578:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14200              		.loc 1 1112 5 view .LVU3721
 14201              	.LBB2580:
1113:src/xeq.c     **** }
 14202              		.loc 1 1113 2 view .LVU3722
 14203              	.LBE2580:
 14204              	.LBE2581:
 721:src/xeq.c     **** }
 14205              		.loc 1 721 2 is_stmt 0 view .LVU3723
 14206 00aa 08BF     		it	eq
ARM GAS  /tmp/ccQQPlfu.s 			page 411


 14207 00ac 1022     		moveq	r2, #16
 14208 00ae 2846     		mov	r0, r5
 14209              	.LVL1007:
 721:src/xeq.c     **** }
 14210              		.loc 1 721 2 view .LVU3724
 14211 00b0 18BF     		it	ne
 14212 00b2 0822     		movne	r2, #8
 14213 00b4 FFF7FEFF 		bl	xcopy
 14214              	.LVL1008:
 721:src/xeq.c     **** }
 14215              		.loc 1 721 2 view .LVU3725
 14216 00b8 2368     		ldr	r3, [r4]
 722:src/xeq.c     **** 
 14217              		.loc 1 722 1 view .LVU3726
 14218 00ba BEE7     		b	.L1018
 14219              	.LVL1009:
 14220              	.L1029:
 722:src/xeq.c     **** 
 14221              		.loc 1 722 1 view .LVU3727
 14222              	.LBE2582:
 14223              	.LBE2583:
 14224              	.LBB2584:
 14225              	.LBB2549:
 743:src/xeq.c     **** }
 14226              		.loc 1 743 3 is_stmt 1 view .LVU3728
 14227 00bc FFF7FEFF 		bl	lift
 14228              	.LVL1010:
 743:src/xeq.c     **** }
 14229              		.loc 1 743 3 is_stmt 0 view .LVU3729
 14230 00c0 ACE7     		b	.L1016
 14231              	.L1032:
 14232 00c2 00BF     		.align	2
 14233              	.L1031:
 14234 00c4 00000000 		.word	StateWhileOn
 14235 00c8 00000000 		.word	main_ram
 14236 00cc 00000000 		.word	Error
 14237 00d0 00000000 		.word	StackBase
 14238              	.LBE2549:
 14239              	.LBE2584:
 14240              		.cfi_endproc
 14241              	.LFE114:
 14243              		.section	.text.cmdsto,"ax",%progbits
 14244              		.align	1
 14245              		.p2align 2,,3
 14246              		.global	cmdsto
 14247              		.syntax unified
 14248              		.thumb
 14249              		.thumb_func
 14250              		.fpu fpv4-sp-d16
 14252              	cmdsto:
 14253              	.LVL1011:
 14254              	.LFB117:
1718:src/xeq.c     **** 	if (op == RARG_STO) {
 14255              		.loc 1 1718 45 is_stmt 1 view -0
 14256              		.cfi_startproc
 14257              		@ args = 0, pretend = 0, frame = 48
 14258              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQQPlfu.s 			page 412


1719:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14259              		.loc 1 1719 2 view .LVU3731
1718:src/xeq.c     **** 	if (op == RARG_STO) {
 14260              		.loc 1 1718 45 is_stmt 0 view .LVU3732
 14261 0000 10B5     		push	{r4, lr}
 14262              		.cfi_def_cfa_offset 8
 14263              		.cfi_offset 4, -8
 14264              		.cfi_offset 14, -4
1719:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14265              		.loc 1 1719 5 view .LVU3733
 14266 0002 0329     		cmp	r1, #3
1718:src/xeq.c     **** 	if (op == RARG_STO) {
 14267              		.loc 1 1718 45 view .LVU3734
 14268 0004 8CB0     		sub	sp, sp, #48
 14269              		.cfi_def_cfa_offset 56
1719:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14270              		.loc 1 1719 5 view .LVU3735
 14271 0006 32D0     		beq	.L1046
1722:src/xeq.c     **** 			long long int r;
 14272              		.loc 1 1722 3 is_stmt 1 view .LVU3736
1722:src/xeq.c     **** 			long long int r;
 14273              		.loc 1 1722 7 is_stmt 0 view .LVU3737
 14274 0008 1B4B     		ldr	r3, .L1047
 14275 000a 1B68     		ldr	r3, [r3]
 14276 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 14277              	.LBB2597:
1725:src/xeq.c     **** 				illegal(op);
 14278              		.loc 1 1725 8 view .LVU3738
 14279 0010 0339     		subs	r1, r1, #3
 14280              	.LVL1012:
1725:src/xeq.c     **** 				illegal(op);
 14281              		.loc 1 1725 8 view .LVU3739
 14282              	.LBE2597:
1722:src/xeq.c     **** 			long long int r;
 14283              		.loc 1 1722 6 view .LVU3740
 14284 0012 13F00103 		ands	r3, r3, #1
 14285 0016 0446     		mov	r4, r0
 14286              	.LBB2605:
1725:src/xeq.c     **** 				illegal(op);
 14287              		.loc 1 1725 8 view .LVU3741
 14288 0018 88B2     		uxth	r0, r1
 14289              	.LVL1013:
1725:src/xeq.c     **** 				illegal(op);
 14290              		.loc 1 1725 8 view .LVU3742
 14291              	.LBE2605:
1722:src/xeq.c     **** 			long long int r;
 14292              		.loc 1 1722 6 view .LVU3743
 14293 001a 18D0     		beq	.L1036
 14294              	.LBB2606:
1723:src/xeq.c     **** 
 14295              		.loc 1 1723 4 is_stmt 1 view .LVU3744
1725:src/xeq.c     **** 				illegal(op);
 14296              		.loc 1 1725 4 view .LVU3745
1725:src/xeq.c     **** 				illegal(op);
 14297              		.loc 1 1725 8 is_stmt 0 view .LVU3746
 14298 001c 0023     		movs	r3, #0
 14299 001e 6A46     		mov	r2, sp
ARM GAS  /tmp/ccQQPlfu.s 			page 413


 14300 0020 2146     		mov	r1, r4
 14301 0022 FFF7FEFF 		bl	storcl_intop
 14302              	.LVL1014:
1725:src/xeq.c     **** 				illegal(op);
 14303              		.loc 1 1725 7 view .LVU3747
 14304 0026 20B1     		cbz	r0, .L1037
1726:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14305              		.loc 1 1726 5 is_stmt 1 view .LVU3748
1726:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14306              		.loc 1 1726 5 view .LVU3749
 14307              	.LVL1015:
 14308              	.LBB2598:
 14309              	.LBI2598:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14310              		.loc 1 540 5 view .LVU3750
 14311              	.LBB2599:
 541:src/xeq.c     **** 		Error = e;
 14312              		.loc 1 541 2 view .LVU3751
 541:src/xeq.c     **** 		Error = e;
 14313              		.loc 1 541 12 is_stmt 0 view .LVU3752
 14314 0028 144B     		ldr	r3, .L1047+4
 541:src/xeq.c     **** 		Error = e;
 14315              		.loc 1 541 5 view .LVU3753
 14316 002a 1A68     		ldr	r2, [r3]
 14317 002c 0AB9     		cbnz	r2, .L1037
 14318              	.LVL1016:
 14319              	.LBB2600:
 14320              	.LBI2600:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14321              		.loc 1 540 5 is_stmt 1 view .LVU3754
 14322              	.LBB2601:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14323              		.loc 1 542 3 view .LVU3755
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14324              		.loc 1 542 9 is_stmt 0 view .LVU3756
 14325 002e 0322     		movs	r2, #3
 14326 0030 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14327              		.loc 1 543 3 is_stmt 1 view .LVU3757
 14328              	.LVL1017:
 14329              	.L1037:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14330              		.loc 1 543 3 is_stmt 0 view .LVU3758
 14331              	.LBE2601:
 14332              	.LBE2600:
 14333              	.LBE2599:
 14334              	.LBE2598:
1726:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14335              		.loc 1 1726 5 is_stmt 1 discriminator 1 view .LVU3759
1727:src/xeq.c     **** 		} else {
 14336              		.loc 1 1727 4 discriminator 1 view .LVU3760
1727:src/xeq.c     **** 		} else {
 14337              		.loc 1 1727 4 is_stmt 0 discriminator 1 view .LVU3761
 14338 0032 DDE90023 		ldrd	r2, [sp]
 14339              	.LBB2602:
 14340              	.LBB2603:
1417:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 414


 14341              		.loc 1 1417 8 discriminator 1 view .LVU3762
 14342 0036 2046     		mov	r0, r4
 14343 0038 CDE90223 		strd	r2, [sp, #8]
 14344              	.LVL1018:
1417:src/xeq.c     **** }
 14345              		.loc 1 1417 8 discriminator 1 view .LVU3763
 14346              	.LBE2603:
 14347              	.LBI2602:
1416:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 14348              		.loc 1 1416 6 is_stmt 1 discriminator 1 view .LVU3764
 14349              	.LBB2604:
1417:src/xeq.c     **** }
 14350              		.loc 1 1417 2 discriminator 1 view .LVU3765
1417:src/xeq.c     **** }
 14351              		.loc 1 1417 8 is_stmt 0 discriminator 1 view .LVU3766
 14352 003c FFF7FEFF 		bl	get_reg_n
 14353              	.LVL1019:
1417:src/xeq.c     **** }
 14354              		.loc 1 1417 2 discriminator 1 view .LVU3767
 14355 0040 0822     		movs	r2, #8
 14356 0042 0DEB0201 		add	r1, sp, r2
 14357 0046 FFF7FEFF 		bl	xcopy
 14358              	.LVL1020:
1417:src/xeq.c     **** }
 14359              		.loc 1 1417 2 discriminator 1 view .LVU3768
 14360              	.LBE2604:
 14361              	.LBE2602:
 14362              	.LBE2606:
1736:src/xeq.c     **** 
 14363              		.loc 1 1736 1 discriminator 1 view .LVU3769
 14364 004a 0CB0     		add	sp, sp, #48
 14365              		.cfi_remember_state
 14366              		.cfi_def_cfa_offset 8
 14367              		@ sp needed
 14368 004c 10BD     		pop	{r4, pc}
 14369              	.LVL1021:
 14370              	.L1036:
 14371              		.cfi_restore_state
 14372              	.LBB2607:
1729:src/xeq.c     **** 
 14373              		.loc 1 1729 4 is_stmt 1 view .LVU3770
1731:src/xeq.c     **** 				illegal(op);
 14374              		.loc 1 1731 4 view .LVU3771
1731:src/xeq.c     **** 				illegal(op);
 14375              		.loc 1 1731 8 is_stmt 0 view .LVU3772
 14376 004e 02AA     		add	r2, sp, #8
 14377 0050 2146     		mov	r1, r4
 14378 0052 FFF7FEFF 		bl	storcl_op
 14379              	.LVL1022:
1731:src/xeq.c     **** 				illegal(op);
 14380              		.loc 1 1731 7 view .LVU3773
 14381 0056 20B1     		cbz	r0, .L1038
1732:src/xeq.c     **** 			setRegister(arg, &r);
 14382              		.loc 1 1732 5 is_stmt 1 view .LVU3774
1732:src/xeq.c     **** 			setRegister(arg, &r);
 14383              		.loc 1 1732 5 view .LVU3775
 14384              	.LVL1023:
ARM GAS  /tmp/ccQQPlfu.s 			page 415


 14385              	.LBB2608:
 14386              	.LBI2608:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14387              		.loc 1 540 5 view .LVU3776
 14388              	.LBB2609:
 541:src/xeq.c     **** 		Error = e;
 14389              		.loc 1 541 2 view .LVU3777
 541:src/xeq.c     **** 		Error = e;
 14390              		.loc 1 541 12 is_stmt 0 view .LVU3778
 14391 0058 084B     		ldr	r3, .L1047+4
 541:src/xeq.c     **** 		Error = e;
 14392              		.loc 1 541 5 view .LVU3779
 14393 005a 1A68     		ldr	r2, [r3]
 14394 005c 0AB9     		cbnz	r2, .L1038
 14395              	.LVL1024:
 14396              	.LBB2610:
 14397              	.LBI2610:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14398              		.loc 1 540 5 is_stmt 1 view .LVU3780
 14399              	.LBB2611:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14400              		.loc 1 542 3 view .LVU3781
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14401              		.loc 1 542 9 is_stmt 0 view .LVU3782
 14402 005e 0322     		movs	r2, #3
 14403 0060 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14404              		.loc 1 543 3 is_stmt 1 view .LVU3783
 14405              	.LVL1025:
 14406              	.L1038:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14407              		.loc 1 543 3 is_stmt 0 view .LVU3784
 14408              	.LBE2611:
 14409              	.LBE2610:
 14410              	.LBE2609:
 14411              	.LBE2608:
1732:src/xeq.c     **** 			setRegister(arg, &r);
 14412              		.loc 1 1732 5 is_stmt 1 discriminator 1 view .LVU3785
1733:src/xeq.c     **** 		}
 14413              		.loc 1 1733 4 discriminator 1 view .LVU3786
 14414 0062 02A9     		add	r1, sp, #8
 14415 0064 2046     		mov	r0, r4
 14416 0066 FFF7FEFF 		bl	setRegister
 14417              	.LVL1026:
 14418              	.LBE2607:
1736:src/xeq.c     **** 
 14419              		.loc 1 1736 1 is_stmt 0 discriminator 1 view .LVU3787
 14420 006a 0CB0     		add	sp, sp, #48
 14421              		.cfi_remember_state
 14422              		.cfi_def_cfa_offset 8
 14423              		@ sp needed
 14424 006c 10BD     		pop	{r4, pc}
 14425              	.LVL1027:
 14426              	.L1046:
 14427              		.cfi_restore_state
1720:src/xeq.c     **** 	} else {
 14428              		.loc 1 1720 3 is_stmt 1 view .LVU3788
ARM GAS  /tmp/ccQQPlfu.s 			page 416


 14429 006e 6421     		movs	r1, #100
 14430              	.LVL1028:
1720:src/xeq.c     **** 	} else {
 14431              		.loc 1 1720 3 is_stmt 0 view .LVU3789
 14432 0070 FFF7FEFF 		bl	copyreg_n
 14433              	.LVL1029:
1736:src/xeq.c     **** 
 14434              		.loc 1 1736 1 view .LVU3790
 14435 0074 0CB0     		add	sp, sp, #48
 14436              		.cfi_def_cfa_offset 8
 14437              		@ sp needed
 14438 0076 10BD     		pop	{r4, pc}
 14439              	.L1048:
 14440              		.align	2
 14441              	.L1047:
 14442 0078 00000000 		.word	main_ram
 14443 007c 00000000 		.word	Error
 14444              		.cfi_endproc
 14445              	.LFE117:
 14447              		.section	.text.cmdrcl,"ax",%progbits
 14448              		.align	1
 14449              		.p2align 2,,3
 14450              		.global	cmdrcl
 14451              		.syntax unified
 14452              		.thumb
 14453              		.thumb_func
 14454              		.fpu fpv4-sp-d16
 14456              	cmdrcl:
 14457              	.LVL1030:
 14458              	.LFB119:
1765:src/xeq.c     **** 	do_rcl(arg, op);
 14459              		.loc 1 1765 45 is_stmt 1 view -0
 14460              		.cfi_startproc
 14461              		@ args = 0, pretend = 0, frame = 0
 14462              		@ frame_needed = 0, uses_anonymous_args = 0
 14463              		@ link register save eliminated.
1766:src/xeq.c     **** }
 14464              		.loc 1 1766 2 view .LVU3792
 14465 0000 FFF7FEBF 		b	do_rcl
 14466              	.LVL1031:
1766:src/xeq.c     **** }
 14467              		.loc 1 1766 2 is_stmt 0 view .LVU3793
 14468              		.cfi_endproc
 14469              	.LFE119:
 14471              		.section	.text.cmdcsto,"ax",%progbits
 14472              		.align	1
 14473              		.p2align 2,,3
 14474              		.global	cmdcsto
 14475              		.syntax unified
 14476              		.thumb
 14477              		.thumb_func
 14478              		.fpu fpv4-sp-d16
 14480              	cmdcsto:
 14481              	.LVL1032:
 14482              	.LFB121:
1810:src/xeq.c     **** 	decNumber r1, r2;
 14483              		.loc 1 1810 46 is_stmt 1 view -0
ARM GAS  /tmp/ccQQPlfu.s 			page 417


 14484              		.cfi_startproc
 14485              		@ args = 0, pretend = 0, frame = 72
 14486              		@ frame_needed = 0, uses_anonymous_args = 0
1811:src/xeq.c     **** 	REGISTER *t1, *t2;
 14487              		.loc 1 1811 2 view .LVU3795
1812:src/xeq.c     **** 
 14488              		.loc 1 1812 2 view .LVU3796
1814:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14489              		.loc 1 1814 2 view .LVU3797
1810:src/xeq.c     **** 	decNumber r1, r2;
 14490              		.loc 1 1810 46 is_stmt 0 view .LVU3798
 14491 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 14492              		.cfi_def_cfa_offset 24
 14493              		.cfi_offset 4, -24
 14494              		.cfi_offset 5, -20
 14495              		.cfi_offset 6, -16
 14496              		.cfi_offset 7, -12
 14497              		.cfi_offset 8, -8
 14498              		.cfi_offset 14, -4
 14499 0004 94B0     		sub	sp, sp, #80
 14500              		.cfi_def_cfa_offset 104
1810:src/xeq.c     **** 	decNumber r1, r2;
 14501              		.loc 1 1810 46 view .LVU3799
 14502 0006 0C46     		mov	r4, r1
1815:src/xeq.c     **** 
 14503              		.loc 1 1815 21 view .LVU3800
 14504 0008 461C     		adds	r6, r0, #1
1810:src/xeq.c     **** 	decNumber r1, r2;
 14505              		.loc 1 1810 46 view .LVU3801
 14506 000a 0546     		mov	r5, r0
1814:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14507              		.loc 1 1814 7 view .LVU3802
 14508 000c FFF7FEFF 		bl	get_reg_n
 14509              	.LVL1033:
1814:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14510              		.loc 1 1814 7 view .LVU3803
 14511 0010 8046     		mov	r8, r0
1815:src/xeq.c     **** 
 14512              		.loc 1 1815 7 view .LVU3804
 14513 0012 3046     		mov	r0, r6
 14514              	.LVL1034:
1815:src/xeq.c     **** 
 14515              		.loc 1 1815 2 is_stmt 1 view .LVU3805
1815:src/xeq.c     **** 
 14516              		.loc 1 1815 7 is_stmt 0 view .LVU3806
 14517 0014 FFF7FEFF 		bl	get_reg_n
 14518              	.LVL1035:
1817:src/xeq.c     **** 		copyreg(t1, StackBase);
 14519              		.loc 1 1817 2 is_stmt 1 view .LVU3807
1817:src/xeq.c     **** 		copyreg(t1, StackBase);
 14520              		.loc 1 1817 5 is_stmt 0 view .LVU3808
 14521 0018 152C     		cmp	r4, #21
 14522 001a 24D0     		beq	.L1062
1821:src/xeq.c     **** 			bad_mode_error();
 14523              		.loc 1 1821 3 is_stmt 1 view .LVU3809
1821:src/xeq.c     **** 			bad_mode_error();
 14524              		.loc 1 1821 7 is_stmt 0 view .LVU3810
ARM GAS  /tmp/ccQQPlfu.s 			page 418


 14525 001c 284B     		ldr	r3, .L1063
 14526 001e 1B68     		ldr	r3, [r3]
 14527 0020 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1821:src/xeq.c     **** 			bad_mode_error();
 14528              		.loc 1 1821 6 view .LVU3811
 14529 0024 13F00103 		ands	r3, r3, #1
 14530 0028 0DD0     		beq	.L1055
1822:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
 14531              		.loc 1 1822 4 is_stmt 1 view .LVU3812
 14532              	.LBB2631:
 14533              	.LBI2631:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14534              		.loc 1 569 6 view .LVU3813
 14535              	.LBE2631:
 570:src/xeq.c     **** }
 14536              		.loc 1 570 2 view .LVU3814
 14537              	.LVL1036:
 14538              	.LBB2636:
 14539              	.LBB2632:
 14540              	.LBI2632:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14541              		.loc 1 540 5 view .LVU3815
 14542              	.LBB2633:
 541:src/xeq.c     **** 		Error = e;
 14543              		.loc 1 541 2 view .LVU3816
 541:src/xeq.c     **** 		Error = e;
 14544              		.loc 1 541 12 is_stmt 0 view .LVU3817
 14545 002a 264B     		ldr	r3, .L1063+4
 541:src/xeq.c     **** 		Error = e;
 14546              		.loc 1 541 5 view .LVU3818
 14547 002c 1A68     		ldr	r2, [r3]
 14548 002e 0AB9     		cbnz	r2, .L1054
 14549              	.LVL1037:
 14550              	.LBB2634:
 14551              	.LBI2634:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14552              		.loc 1 540 5 is_stmt 1 view .LVU3819
 14553              	.LBB2635:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14554              		.loc 1 542 3 view .LVU3820
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14555              		.loc 1 542 9 is_stmt 0 view .LVU3821
 14556 0030 0D22     		movs	r2, #13
 14557 0032 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14558              		.loc 1 543 3 is_stmt 1 view .LVU3822
 14559              	.LVL1038:
 14560              	.L1054:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14561              		.loc 1 543 3 is_stmt 0 view .LVU3823
 14562              	.LBE2635:
 14563              	.LBE2634:
 14564              	.LBE2633:
 14565              	.LBE2632:
 14566              	.LBE2636:
1830:src/xeq.c     **** }
 14567              		.loc 1 1830 2 is_stmt 1 view .LVU3824
ARM GAS  /tmp/ccQQPlfu.s 			page 419


 14568              	.LBB2637:
 14569              	.LBI2637:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 14570              		.loc 1 533 13 view .LVU3825
 14571              	.LBB2638:
 534:src/xeq.c     **** }
 14572              		.loc 1 534 2 view .LVU3826
 534:src/xeq.c     **** }
 14573              		.loc 1 534 20 is_stmt 0 view .LVU3827
 14574 0034 244B     		ldr	r3, .L1063+8
 14575 0036 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14576 0038 0121     		movs	r1, #1
 14577 003a 61F38712 		bfi	r2, r1, #6, #2
 14578 003e 1A75     		strb	r2, [r3, #20]
 14579              	.LBE2638:
 14580              	.LBE2637:
1831:src/xeq.c     **** 
 14581              		.loc 1 1831 1 view .LVU3828
 14582 0040 14B0     		add	sp, sp, #80
 14583              		.cfi_remember_state
 14584              		.cfi_def_cfa_offset 24
 14585              		@ sp needed
 14586 0042 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 14587              	.LVL1039:
 14588              	.L1055:
 14589              		.cfi_restore_state
1823:src/xeq.c     **** 			illegal(op);
 14590              		.loc 1 1823 8 is_stmt 1 view .LVU3829
1823:src/xeq.c     **** 			illegal(op);
 14591              		.loc 1 1823 12 is_stmt 0 view .LVU3830
 14592 0046 153C     		subs	r4, r4, #21
 14593 0048 0093     		str	r3, [sp]
 14594 004a A0B2     		uxth	r0, r4
 14595              	.LVL1040:
1823:src/xeq.c     **** 			illegal(op);
 14596              		.loc 1 1823 12 view .LVU3831
 14597 004c 0BAB     		add	r3, sp, #44
 14598 004e 02AA     		add	r2, sp, #8
 14599 0050 2946     		mov	r1, r5
 14600 0052 FFF7FEFF 		bl	storcl_cop
 14601              	.LVL1041:
1823:src/xeq.c     **** 			illegal(op);
 14602              		.loc 1 1823 11 view .LVU3832
 14603 0056 50B3     		cbz	r0, .L1057
1824:src/xeq.c     **** 		else {
 14604              		.loc 1 1824 4 is_stmt 1 view .LVU3833
1824:src/xeq.c     **** 		else {
 14605              		.loc 1 1824 4 view .LVU3834
 14606              	.LVL1042:
 14607              	.LBB2639:
 14608              	.LBI2639:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14609              		.loc 1 540 5 view .LVU3835
 14610              	.LBB2640:
 541:src/xeq.c     **** 		Error = e;
 14611              		.loc 1 541 2 view .LVU3836
 541:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccQQPlfu.s 			page 420


 14612              		.loc 1 541 12 is_stmt 0 view .LVU3837
 14613 0058 1A4B     		ldr	r3, .L1063+4
 541:src/xeq.c     **** 		Error = e;
 14614              		.loc 1 541 5 view .LVU3838
 14615 005a 1A68     		ldr	r2, [r3]
 14616 005c 002A     		cmp	r2, #0
 14617 005e E9D1     		bne	.L1054
 14618              	.LVL1043:
 14619              	.LBB2641:
 14620              	.LBI2641:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14621              		.loc 1 540 5 is_stmt 1 view .LVU3839
 14622              	.LBB2642:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14623              		.loc 1 542 3 view .LVU3840
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14624              		.loc 1 542 9 is_stmt 0 view .LVU3841
 14625 0060 0322     		movs	r2, #3
 14626 0062 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14627              		.loc 1 543 3 is_stmt 1 view .LVU3842
 14628 0064 E6E7     		b	.L1054
 14629              	.LVL1044:
 14630              	.L1062:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14631              		.loc 1 543 3 is_stmt 0 view .LVU3843
 14632              	.LBE2642:
 14633              	.LBE2641:
 14634              	.LBE2640:
 14635              	.LBE2639:
1818:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 14636              		.loc 1 1818 3 is_stmt 1 view .LVU3844
 14637              	.LBB2643:
 14638              	.LBB2644:
 14639              	.LBB2645:
 14640              	.LBB2646:
1113:src/xeq.c     **** }
 14641              		.loc 1 1113 24 is_stmt 0 view .LVU3845
 14642 0066 164D     		ldr	r5, .L1063
 14643              	.LVL1045:
1113:src/xeq.c     **** }
 14644              		.loc 1 1113 24 view .LVU3846
 14645              	.LBE2646:
 14646              	.LBE2645:
 14647              	.LBE2644:
 14648              	.LBE2643:
1818:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 14649              		.loc 1 1818 3 view .LVU3847
 14650 0068 184A     		ldr	r2, .L1063+12
 14651              	.LVL1046:
 14652              	.LBB2652:
 14653              	.LBI2643:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14654              		.loc 1 720 6 is_stmt 1 view .LVU3848
 14655              	.LBB2651:
 721:src/xeq.c     **** }
 14656              		.loc 1 721 2 view .LVU3849
ARM GAS  /tmp/ccQQPlfu.s 			page 421


 14657              	.LBB2649:
 14658              	.LBI2645:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14659              		.loc 1 1112 5 view .LVU3850
 14660              	.LBB2647:
1113:src/xeq.c     **** }
 14661              		.loc 1 1113 2 view .LVU3851
1113:src/xeq.c     **** }
 14662              		.loc 1 1113 24 is_stmt 0 view .LVU3852
 14663 006a 2B68     		ldr	r3, [r5]
 14664              	.LBE2647:
 14665              	.LBE2649:
 721:src/xeq.c     **** }
 14666              		.loc 1 721 2 view .LVU3853
 14667 006c 1168     		ldr	r1, [r2]
 14668              	.LBB2650:
 14669              	.LBB2648:
1113:src/xeq.c     **** }
 14670              		.loc 1 1113 24 view .LVU3854
 14671 006e B3F8E837 		ldrh	r3, [r3, #2024]
 14672 0072 44F20104 		movw	r4, #16385
 14673              	.LBE2648:
 14674              	.LBE2650:
 721:src/xeq.c     **** }
 14675              		.loc 1 721 2 view .LVU3855
 14676 0076 2340     		ands	r3, r3, r4
 14677 0078 B3F5804F 		cmp	r3, #16384
 14678 007c 0CBF     		ite	eq
 14679 007e 1022     		moveq	r2, #16
 14680              	.LVL1047:
 721:src/xeq.c     **** }
 14681              		.loc 1 721 2 view .LVU3856
 14682 0080 0822     		movne	r2, #8
 14683 0082 0746     		mov	r7, r0
 14684 0084 4046     		mov	r0, r8
 14685              	.LVL1048:
 721:src/xeq.c     **** }
 14686              		.loc 1 721 2 view .LVU3857
 14687 0086 FFF7FEFF 		bl	xcopy
 14688              	.LVL1049:
 721:src/xeq.c     **** }
 14689              		.loc 1 721 2 view .LVU3858
 14690              	.LBE2651:
 14691              	.LBE2652:
1819:src/xeq.c     **** 	} else {
 14692              		.loc 1 1819 3 is_stmt 1 view .LVU3859
1819:src/xeq.c     **** 	} else {
 14693              		.loc 1 1819 15 is_stmt 0 view .LVU3860
 14694 008a 6520     		movs	r0, #101
 14695 008c FFF7FEFF 		bl	get_reg_n
 14696              	.LVL1050:
 14697              	.LBB2653:
 14698              	.LBB2654:
 14699              	.LBB2655:
 14700              	.LBB2656:
1113:src/xeq.c     **** }
 14701              		.loc 1 1113 24 view .LVU3861
ARM GAS  /tmp/ccQQPlfu.s 			page 422


 14702 0090 2B68     		ldr	r3, [r5]
 14703 0092 B3F8E837 		ldrh	r3, [r3, #2024]
 14704              	.LBE2656:
 14705              	.LBE2655:
 721:src/xeq.c     **** }
 14706              		.loc 1 721 2 view .LVU3862
 14707 0096 1C40     		ands	r4, r4, r3
 14708 0098 B4F5804F 		cmp	r4, #16384
 14709              	.LBE2654:
 14710              	.LBE2653:
1819:src/xeq.c     **** 	} else {
 14711              		.loc 1 1819 15 view .LVU3863
 14712 009c 0146     		mov	r1, r0
 14713              	.LVL1051:
 14714              	.LBB2660:
 14715              	.LBI2653:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14716              		.loc 1 720 6 is_stmt 1 view .LVU3864
 14717              	.LBB2659:
 721:src/xeq.c     **** }
 14718              		.loc 1 721 2 view .LVU3865
 14719              	.LBB2658:
 14720              	.LBI2655:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14721              		.loc 1 1112 5 view .LVU3866
 14722              	.LBB2657:
1113:src/xeq.c     **** }
 14723              		.loc 1 1113 2 view .LVU3867
 14724              	.LBE2657:
 14725              	.LBE2658:
 721:src/xeq.c     **** }
 14726              		.loc 1 721 2 is_stmt 0 view .LVU3868
 14727 009e 08BF     		it	eq
 14728 00a0 1022     		moveq	r2, #16
 14729 00a2 3846     		mov	r0, r7
 14730              	.LVL1052:
 721:src/xeq.c     **** }
 14731              		.loc 1 721 2 view .LVU3869
 14732 00a4 18BF     		it	ne
 14733 00a6 0822     		movne	r2, #8
 14734 00a8 FFF7FEFF 		bl	xcopy
 14735              	.LVL1053:
 722:src/xeq.c     **** 
 14736              		.loc 1 722 1 view .LVU3870
 14737 00ac C2E7     		b	.L1054
 14738              	.LVL1054:
 14739              	.L1057:
 722:src/xeq.c     **** 
 14740              		.loc 1 722 1 view .LVU3871
 14741              	.LBE2659:
 14742              	.LBE2660:
1826:src/xeq.c     **** 			setRegister(arg + 1, &r2);
 14743              		.loc 1 1826 4 is_stmt 1 view .LVU3872
 14744 00ae 02A9     		add	r1, sp, #8
 14745 00b0 2846     		mov	r0, r5
 14746 00b2 FFF7FEFF 		bl	setRegister
 14747              	.LVL1055:
ARM GAS  /tmp/ccQQPlfu.s 			page 423


1827:src/xeq.c     **** 		}
 14748              		.loc 1 1827 4 view .LVU3873
 14749 00b6 0BA9     		add	r1, sp, #44
 14750 00b8 3046     		mov	r0, r6
 14751 00ba FFF7FEFF 		bl	setRegister
 14752              	.LVL1056:
 14753 00be B9E7     		b	.L1054
 14754              	.L1064:
 14755              		.align	2
 14756              	.L1063:
 14757 00c0 00000000 		.word	main_ram
 14758 00c4 00000000 		.word	Error
 14759 00c8 00000000 		.word	StateWhileOn
 14760 00cc 00000000 		.word	StackBase
 14761              		.cfi_endproc
 14762              	.LFE121:
 14764              		.section	.text.cmdcrcl,"ax",%progbits
 14765              		.align	1
 14766              		.p2align 2,,3
 14767              		.global	cmdcrcl
 14768              		.syntax unified
 14769              		.thumb
 14770              		.thumb_func
 14771              		.fpu fpv4-sp-d16
 14773              	cmdcrcl:
 14774              	.LVL1057:
 14775              	.LFB123:
1856:src/xeq.c     **** 	do_crcl(arg, op);
 14776              		.loc 1 1856 46 view -0
 14777              		.cfi_startproc
 14778              		@ args = 0, pretend = 0, frame = 72
 14779              		@ frame_needed = 0, uses_anonymous_args = 0
1857:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14780              		.loc 1 1857 2 view .LVU3875
1856:src/xeq.c     **** 	do_crcl(arg, op);
 14781              		.loc 1 1856 46 is_stmt 0 view .LVU3876
 14782 0000 70B5     		push	{r4, r5, r6, lr}
 14783              		.cfi_def_cfa_offset 16
 14784              		.cfi_offset 4, -16
 14785              		.cfi_offset 5, -12
 14786              		.cfi_offset 6, -8
 14787              		.cfi_offset 14, -4
 14788              	.LBB2691:
 14789              	.LBB2692:
1836:src/xeq.c     **** 		REGISTER x, y;
 14790              		.loc 1 1836 5 view .LVU3877
 14791 0002 1A29     		cmp	r1, #26
 14792              	.LBE2692:
 14793              	.LBE2691:
1856:src/xeq.c     **** 	do_crcl(arg, op);
 14794              		.loc 1 1856 46 view .LVU3878
 14795 0004 94B0     		sub	sp, sp, #80
 14796              		.cfi_def_cfa_offset 96
1856:src/xeq.c     **** 	do_crcl(arg, op);
 14797              		.loc 1 1856 46 view .LVU3879
 14798 0006 0446     		mov	r4, r0
 14799              	.LVL1058:
ARM GAS  /tmp/ccQQPlfu.s 			page 424


 14800              	.LBB2741:
 14801              	.LBI2691:
1833:src/xeq.c     **** 	decNumber r1, r2;
 14802              		.loc 1 1833 13 is_stmt 1 view .LVU3880
 14803              	.LBB2738:
1834:src/xeq.c     **** 
 14804              		.loc 1 1834 2 view .LVU3881
1836:src/xeq.c     **** 		REGISTER x, y;
 14805              		.loc 1 1836 2 view .LVU3882
1836:src/xeq.c     **** 		REGISTER x, y;
 14806              		.loc 1 1836 5 is_stmt 0 view .LVU3883
 14807 0008 2AD0     		beq	.L1081
1844:src/xeq.c     **** 			bad_mode_error();
 14808              		.loc 1 1844 3 is_stmt 1 view .LVU3884
1844:src/xeq.c     **** 			bad_mode_error();
 14809              		.loc 1 1844 7 is_stmt 0 view .LVU3885
 14810 000a 3B4D     		ldr	r5, .L1082
 14811 000c 2B68     		ldr	r3, [r5]
 14812 000e 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1844:src/xeq.c     **** 			bad_mode_error();
 14813              		.loc 1 1844 6 view .LVU3886
 14814 0012 D207     		lsls	r2, r2, #31
 14815 0014 11D5     		bpl	.L1072
1845:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
 14816              		.loc 1 1845 4 is_stmt 1 view .LVU3887
 14817              	.LBB2693:
 14818              	.LBI2693:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14819              		.loc 1 569 6 view .LVU3888
 14820              	.LBE2693:
 14821              	.LBE2738:
 14822              	.LBE2741:
 570:src/xeq.c     **** }
 14823              		.loc 1 570 2 view .LVU3889
 14824              	.LVL1059:
 14825              	.LBB2742:
 14826              	.LBB2739:
 14827              	.LBB2698:
 14828              	.LBB2694:
 14829              	.LBI2694:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14830              		.loc 1 540 5 view .LVU3890
 14831              	.LBB2695:
 541:src/xeq.c     **** 		Error = e;
 14832              		.loc 1 541 2 view .LVU3891
 541:src/xeq.c     **** 		Error = e;
 14833              		.loc 1 541 12 is_stmt 0 view .LVU3892
 14834 0016 394A     		ldr	r2, .L1082+4
 541:src/xeq.c     **** 		Error = e;
 14835              		.loc 1 541 5 view .LVU3893
 14836 0018 1168     		ldr	r1, [r2]
 14837              	.LVL1060:
 541:src/xeq.c     **** 		Error = e;
 14838              		.loc 1 541 5 view .LVU3894
 14839 001a 09B9     		cbnz	r1, .L1071
 14840              	.LVL1061:
 14841              	.LBB2696:
ARM GAS  /tmp/ccQQPlfu.s 			page 425


 14842              	.LBI2696:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14843              		.loc 1 540 5 is_stmt 1 view .LVU3895
 14844              	.LBB2697:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14845              		.loc 1 542 3 view .LVU3896
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14846              		.loc 1 542 9 is_stmt 0 view .LVU3897
 14847 001c 0D21     		movs	r1, #13
 14848 001e 1160     		str	r1, [r2]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14849              		.loc 1 543 3 is_stmt 1 view .LVU3898
 14850              	.LVL1062:
 14851              	.L1071:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14852              		.loc 1 543 3 is_stmt 0 view .LVU3899
 14853              	.LBE2697:
 14854              	.LBE2696:
 14855              	.LBE2695:
 14856              	.LBE2694:
 14857              	.LBE2698:
1853:src/xeq.c     **** }
 14858              		.loc 1 1853 2 is_stmt 1 view .LVU3900
 14859              	.LBB2699:
 14860              	.LBI2699:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 14861              		.loc 1 533 13 view .LVU3901
 14862              	.LBB2700:
 534:src/xeq.c     **** }
 14863              		.loc 1 534 2 view .LVU3902
 534:src/xeq.c     **** }
 14864              		.loc 1 534 20 is_stmt 0 view .LVU3903
 14865 0020 374A     		ldr	r2, .L1082+8
 14866 0022 117D     		ldrb	r1, [r2, #20]	@ zero_extendqisi2
 14867 0024 0120     		movs	r0, #1
 14868 0026 60F38711 		bfi	r1, r0, #6, #2
 14869 002a 1175     		strb	r1, [r2, #20]
 14870              	.LVL1063:
 534:src/xeq.c     **** }
 14871              		.loc 1 534 20 view .LVU3904
 14872              	.LBE2700:
 14873              	.LBE2699:
 14874              	.LBE2739:
 14875              	.LBE2742:
1859:src/xeq.c     **** #endif
 14876              		.loc 1 1859 2 is_stmt 1 view .LVU3905
 14877 002c 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 14878 0030 0243     		orrs	r2, r2, r0
 14879 0032 83F8AD27 		strb	r2, [r3, #1965]
1861:src/xeq.c     **** 
 14880              		.loc 1 1861 1 is_stmt 0 view .LVU3906
 14881 0036 14B0     		add	sp, sp, #80
 14882              		.cfi_remember_state
 14883              		.cfi_def_cfa_offset 16
 14884              		@ sp needed
 14885 0038 70BD     		pop	{r4, r5, r6, pc}
 14886              	.LVL1064:
ARM GAS  /tmp/ccQQPlfu.s 			page 426


 14887              	.L1072:
 14888              		.cfi_restore_state
 14889              	.LBB2743:
 14890              	.LBB2740:
1846:src/xeq.c     **** 			illegal(op);
 14891              		.loc 1 1846 8 is_stmt 1 view .LVU3907
1846:src/xeq.c     **** 			illegal(op);
 14892              		.loc 1 1846 12 is_stmt 0 view .LVU3908
 14893 003a 1A39     		subs	r1, r1, #26
 14894              	.LVL1065:
1846:src/xeq.c     **** 			illegal(op);
 14895              		.loc 1 1846 12 view .LVU3909
 14896 003c 0126     		movs	r6, #1
 14897 003e 88B2     		uxth	r0, r1
 14898              	.LVL1066:
1846:src/xeq.c     **** 			illegal(op);
 14899              		.loc 1 1846 12 view .LVU3910
 14900 0040 0BAB     		add	r3, sp, #44
 14901 0042 2146     		mov	r1, r4
 14902 0044 02AA     		add	r2, sp, #8
 14903 0046 0096     		str	r6, [sp]
 14904 0048 FFF7FEFF 		bl	storcl_cop
 14905              	.LVL1067:
1846:src/xeq.c     **** 			illegal(op);
 14906              		.loc 1 1846 11 view .LVU3911
 14907 004c 0028     		cmp	r0, #0
 14908 004e 4AD0     		beq	.L1073
1847:src/xeq.c     **** 		else {
 14909              		.loc 1 1847 4 is_stmt 1 view .LVU3912
1847:src/xeq.c     **** 		else {
 14910              		.loc 1 1847 4 view .LVU3913
 14911              	.LVL1068:
 14912              	.LBB2701:
 14913              	.LBI2701:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14914              		.loc 1 540 5 view .LVU3914
 14915              	.LBB2702:
 541:src/xeq.c     **** 		Error = e;
 14916              		.loc 1 541 2 view .LVU3915
 541:src/xeq.c     **** 		Error = e;
 14917              		.loc 1 541 12 is_stmt 0 view .LVU3916
 14918 0050 2A4A     		ldr	r2, .L1082+4
 541:src/xeq.c     **** 		Error = e;
 14919              		.loc 1 541 5 view .LVU3917
 14920 0052 1368     		ldr	r3, [r2]
 14921 0054 002B     		cmp	r3, #0
 14922 0056 4CD1     		bne	.L1080
 14923              	.LVL1069:
 14924              	.LBB2703:
 14925              	.LBI2703:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14926              		.loc 1 540 5 is_stmt 1 view .LVU3918
 14927              	.LBB2704:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14928              		.loc 1 542 3 view .LVU3919
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14929              		.loc 1 542 9 is_stmt 0 view .LVU3920
ARM GAS  /tmp/ccQQPlfu.s 			page 427


 14930 0058 0321     		movs	r1, #3
 14931 005a 2B68     		ldr	r3, [r5]
 14932 005c 1160     		str	r1, [r2]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14933              		.loc 1 543 3 is_stmt 1 view .LVU3921
 14934 005e DFE7     		b	.L1071
 14935              	.LVL1070:
 14936              	.L1081:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14937              		.loc 1 543 3 is_stmt 0 view .LVU3922
 14938              	.LBE2704:
 14939              	.LBE2703:
 14940              	.LBE2702:
 14941              	.LBE2701:
 14942              	.LBB2705:
1837:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
 14943              		.loc 1 1837 3 is_stmt 1 view .LVU3923
1838:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 14944              		.loc 1 1838 3 view .LVU3924
 14945              	.LBB2706:
 14946              	.LBB2707:
 14947              	.LBB2708:
 14948              	.LBB2709:
1113:src/xeq.c     **** }
 14949              		.loc 1 1113 24 is_stmt 0 view .LVU3925
 14950 0060 254E     		ldr	r6, .L1082
 14951              	.LBE2709:
 14952              	.LBE2708:
 14953              	.LBE2707:
 14954              	.LBE2706:
1838:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 14955              		.loc 1 1838 15 view .LVU3926
 14956 0062 FFF7FEFF 		bl	get_reg_n
 14957              	.LVL1071:
 14958              	.LBB2716:
 14959              	.LBB2714:
 14960              	.LBB2712:
 14961              	.LBB2710:
1113:src/xeq.c     **** }
 14962              		.loc 1 1113 24 view .LVU3927
 14963 0066 3368     		ldr	r3, [r6]
 14964 0068 B3F8E837 		ldrh	r3, [r3, #2024]
 14965 006c 44F20105 		movw	r5, #16385
 14966              	.LBE2710:
 14967              	.LBE2712:
 721:src/xeq.c     **** }
 14968              		.loc 1 721 2 view .LVU3928
 14969 0070 2B40     		ands	r3, r3, r5
 14970 0072 B3F5804F 		cmp	r3, #16384
 14971 0076 0CBF     		ite	eq
 14972 0078 1022     		moveq	r2, #16
 14973 007a 0822     		movne	r2, #8
 14974              	.LBE2714:
 14975              	.LBE2716:
1838:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 14976              		.loc 1 1838 15 view .LVU3929
 14977 007c 0146     		mov	r1, r0
ARM GAS  /tmp/ccQQPlfu.s 			page 428


 14978              	.LVL1072:
 14979              	.LBB2717:
 14980              	.LBI2706:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14981              		.loc 1 720 6 is_stmt 1 view .LVU3930
 14982              	.LBB2715:
 721:src/xeq.c     **** }
 14983              		.loc 1 721 2 view .LVU3931
 14984              	.LBB2713:
 14985              	.LBI2708:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14986              		.loc 1 1112 5 view .LVU3932
 14987              	.LBB2711:
1113:src/xeq.c     **** }
 14988              		.loc 1 1113 2 view .LVU3933
 14989              	.LBE2711:
 14990              	.LBE2713:
 721:src/xeq.c     **** }
 14991              		.loc 1 721 2 is_stmt 0 view .LVU3934
 14992 007e 02A8     		add	r0, sp, #8
 14993              	.LVL1073:
 721:src/xeq.c     **** }
 14994              		.loc 1 721 2 view .LVU3935
 14995 0080 FFF7FEFF 		bl	xcopy
 14996              	.LVL1074:
 721:src/xeq.c     **** }
 14997              		.loc 1 721 2 view .LVU3936
 14998              	.LBE2715:
 14999              	.LBE2717:
1839:src/xeq.c     **** 		lift2_if_enabled();
 15000              		.loc 1 1839 3 is_stmt 1 view .LVU3937
1839:src/xeq.c     **** 		lift2_if_enabled();
 15001              		.loc 1 1839 15 is_stmt 0 view .LVU3938
 15002 0084 601C     		adds	r0, r4, #1
 15003 0086 FFF7FEFF 		bl	get_reg_n
 15004              	.LVL1075:
 15005              	.LBB2718:
 15006              	.LBB2719:
 15007              	.LBB2720:
 15008              	.LBB2721:
1113:src/xeq.c     **** }
 15009              		.loc 1 1113 24 view .LVU3939
 15010 008a 3368     		ldr	r3, [r6]
 15011 008c B3F8E837 		ldrh	r3, [r3, #2024]
 15012              	.LBE2721:
 15013              	.LBE2720:
 721:src/xeq.c     **** }
 15014              		.loc 1 721 2 view .LVU3940
 15015 0090 2B40     		ands	r3, r3, r5
 15016 0092 B3F5804F 		cmp	r3, #16384
 15017              	.LBE2719:
 15018              	.LBE2718:
1839:src/xeq.c     **** 		lift2_if_enabled();
 15019              		.loc 1 1839 15 view .LVU3941
 15020 0096 0146     		mov	r1, r0
 15021              	.LVL1076:
 15022              	.LBB2725:
ARM GAS  /tmp/ccQQPlfu.s 			page 429


 15023              	.LBI2718:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15024              		.loc 1 720 6 is_stmt 1 view .LVU3942
 15025              	.LBB2724:
 721:src/xeq.c     **** }
 15026              		.loc 1 721 2 view .LVU3943
 15027              	.LBB2723:
 15028              	.LBI2720:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15029              		.loc 1 1112 5 view .LVU3944
 15030              	.LBB2722:
1113:src/xeq.c     **** }
 15031              		.loc 1 1113 2 view .LVU3945
 15032              	.LBE2722:
 15033              	.LBE2723:
 721:src/xeq.c     **** }
 15034              		.loc 1 721 2 is_stmt 0 view .LVU3946
 15035 0098 0CBF     		ite	eq
 15036 009a 1022     		moveq	r2, #16
 15037 009c 0822     		movne	r2, #8
 15038 009e 0BA8     		add	r0, sp, #44
 15039              	.LVL1077:
 721:src/xeq.c     **** }
 15040              		.loc 1 721 2 view .LVU3947
 15041 00a0 FFF7FEFF 		bl	xcopy
 15042              	.LVL1078:
 721:src/xeq.c     **** }
 15043              		.loc 1 721 2 view .LVU3948
 15044              	.LBE2724:
 15045              	.LBE2725:
1840:src/xeq.c     **** 		copyreg(StackBase, &x);
 15046              		.loc 1 1840 3 is_stmt 1 view .LVU3949
 15047 00a4 FFF7FEFF 		bl	lift2_if_enabled
 15048              	.LVL1079:
1841:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 15049              		.loc 1 1841 3 view .LVU3950
 15050              	.LBB2726:
 15051              	.LBB2727:
 15052              	.LBB2728:
 15053              	.LBB2729:
1113:src/xeq.c     **** }
 15054              		.loc 1 1113 24 is_stmt 0 view .LVU3951
 15055 00a8 3368     		ldr	r3, [r6]
 15056              	.LBE2729:
 15057              	.LBE2728:
 15058              	.LBE2727:
 15059              	.LBE2726:
1841:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 15060              		.loc 1 1841 3 view .LVU3952
 15061 00aa 164A     		ldr	r2, .L1082+12
 15062              	.LVL1080:
 15063              	.LBB2733:
 15064              	.LBI2726:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15065              		.loc 1 720 6 is_stmt 1 view .LVU3953
 15066              	.LBB2732:
 721:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 430


 15067              		.loc 1 721 2 view .LVU3954
 15068              	.LBB2731:
 15069              	.LBI2728:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15070              		.loc 1 1112 5 view .LVU3955
 15071              	.LBB2730:
1113:src/xeq.c     **** }
 15072              		.loc 1 1113 2 view .LVU3956
1113:src/xeq.c     **** }
 15073              		.loc 1 1113 24 is_stmt 0 view .LVU3957
 15074 00ac B3F8E837 		ldrh	r3, [r3, #2024]
 15075              	.LBE2730:
 15076              	.LBE2731:
 721:src/xeq.c     **** }
 15077              		.loc 1 721 2 view .LVU3958
 15078 00b0 1068     		ldr	r0, [r2]
 15079 00b2 2B40     		ands	r3, r3, r5
 15080 00b4 B3F5804F 		cmp	r3, #16384
 15081 00b8 0CBF     		ite	eq
 15082 00ba 1022     		moveq	r2, #16
 15083              	.LVL1081:
 721:src/xeq.c     **** }
 15084              		.loc 1 721 2 view .LVU3959
 15085 00bc 0822     		movne	r2, #8
 15086 00be 02A9     		add	r1, sp, #8
 15087              	.LVL1082:
 721:src/xeq.c     **** }
 15088              		.loc 1 721 2 view .LVU3960
 15089 00c0 FFF7FEFF 		bl	xcopy
 15090              	.LVL1083:
 721:src/xeq.c     **** }
 15091              		.loc 1 721 2 view .LVU3961
 15092              	.LBE2732:
 15093              	.LBE2733:
1842:src/xeq.c     **** 	} else {
 15094              		.loc 1 1842 3 is_stmt 1 view .LVU3962
 15095 00c4 6520     		movs	r0, #101
 15096 00c6 FFF7FEFF 		bl	get_reg_n
 15097              	.LVL1084:
 15098              	.LBB2734:
 15099              	.LBI2734:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15100              		.loc 1 720 6 view .LVU3963
 15101              	.LBB2735:
 721:src/xeq.c     **** }
 15102              		.loc 1 721 2 view .LVU3964
 15103              	.LBB2736:
 15104              	.LBI2736:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15105              		.loc 1 1112 5 view .LVU3965
 15106              	.LBB2737:
1113:src/xeq.c     **** }
 15107              		.loc 1 1113 2 view .LVU3966
1113:src/xeq.c     **** }
 15108              		.loc 1 1113 24 is_stmt 0 view .LVU3967
 15109 00ca 3368     		ldr	r3, [r6]
 15110 00cc B3F8E837 		ldrh	r3, [r3, #2024]
ARM GAS  /tmp/ccQQPlfu.s 			page 431


 15111              	.LBE2737:
 15112              	.LBE2736:
 721:src/xeq.c     **** }
 15113              		.loc 1 721 2 view .LVU3968
 15114 00d0 1D40     		ands	r5, r5, r3
 15115 00d2 B5F5804F 		cmp	r5, #16384
 15116 00d6 0BA9     		add	r1, sp, #44
 15117              	.LVL1085:
 721:src/xeq.c     **** }
 15118              		.loc 1 721 2 view .LVU3969
 15119 00d8 0CBF     		ite	eq
 15120 00da 1022     		moveq	r2, #16
 15121 00dc 0822     		movne	r2, #8
 15122 00de FFF7FEFF 		bl	xcopy
 15123              	.LVL1086:
 721:src/xeq.c     **** }
 15124              		.loc 1 721 2 view .LVU3970
 15125 00e2 3368     		ldr	r3, [r6]
 15126              	.LBE2735:
 15127              	.LBE2734:
 15128              	.LBE2705:
 15129 00e4 9CE7     		b	.L1071
 15130              	.L1073:
1849:src/xeq.c     **** 			setXY(&r1, &r2);
 15131              		.loc 1 1849 4 is_stmt 1 view .LVU3971
 15132 00e6 FFF7FEFF 		bl	setlastXY
 15133              	.LVL1087:
1850:src/xeq.c     **** 		}
 15134              		.loc 1 1850 4 view .LVU3972
 15135 00ea 0BA9     		add	r1, sp, #44
 15136 00ec 02A8     		add	r0, sp, #8
 15137 00ee FFF7FEFF 		bl	setXY
 15138              	.LVL1088:
 15139              	.L1080:
 15140 00f2 2B68     		ldr	r3, [r5]
 15141 00f4 94E7     		b	.L1071
 15142              	.L1083:
 15143 00f6 00BF     		.align	2
 15144              	.L1082:
 15145 00f8 00000000 		.word	main_ram
 15146 00fc 00000000 		.word	Error
 15147 0100 00000000 		.word	StateWhileOn
 15148 0104 00000000 		.word	StackBase
 15149              	.LBE2740:
 15150              	.LBE2743:
 15151              		.cfi_endproc
 15152              	.LFE123:
 15154              		.section	.text.cmdircl,"ax",%progbits
 15155              		.align	1
 15156              		.p2align 2,,3
 15157              		.global	cmdircl
 15158              		.syntax unified
 15159              		.thumb
 15160              		.thumb_func
 15161              		.fpu fpv4-sp-d16
 15163              	cmdircl:
 15164              	.LVL1089:
ARM GAS  /tmp/ccQQPlfu.s 			page 432


 15165              	.LFB124:
1873:src/xeq.c     **** 	if (is_intmode())
 15166              		.loc 1 1873 46 view -0
 15167              		.cfi_startproc
 15168              		@ args = 0, pretend = 0, frame = 0
 15169              		@ frame_needed = 0, uses_anonymous_args = 0
 15170              		@ link register save eliminated.
1874:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15171              		.loc 1 1874 2 view .LVU3974
1874:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15172              		.loc 1 1874 6 is_stmt 0 view .LVU3975
 15173 0000 064B     		ldr	r3, .L1086
 15174 0002 1B68     		ldr	r3, [r3]
 15175 0004 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1874:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15176              		.loc 1 1874 5 view .LVU3976
 15177 0008 12F00102 		ands	r2, r2, #1
1873:src/xeq.c     **** 	if (is_intmode())
 15178              		.loc 1 1873 46 view .LVU3977
 15179 000c 0146     		mov	r1, r0
 15180              	.LVL1090:
1874:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15181              		.loc 1 1874 5 view .LVU3978
 15182 000e 02D0     		beq	.L1085
1875:src/xeq.c     **** 	else
 15183              		.loc 1 1875 3 is_stmt 1 view .LVU3979
 15184              	.LVL1091:
 15185              	.LBB2744:
 15186              	.LBI2744:
1765:src/xeq.c     **** 	do_rcl(arg, op);
 15187              		.loc 1 1765 6 view .LVU3980
 15188              	.LBB2745:
1766:src/xeq.c     **** }
 15189              		.loc 1 1766 2 view .LVU3981
 15190 0010 0A21     		movs	r1, #10
 15191 0012 FFF7FEBF 		b	do_rcl
 15192              	.LVL1092:
 15193              	.L1085:
1766:src/xeq.c     **** }
 15194              		.loc 1 1766 2 is_stmt 0 view .LVU3982
 15195              	.LBE2745:
 15196              	.LBE2744:
1877:src/xeq.c     **** }
 15197              		.loc 1 1877 3 is_stmt 1 view .LVU3983
 15198 0016 6420     		movs	r0, #100
 15199              	.LVL1093:
1877:src/xeq.c     **** }
 15200              		.loc 1 1877 3 is_stmt 0 view .LVU3984
 15201 0018 FFF7FEBF 		b	register_from_int
 15202              	.LVL1094:
 15203              	.L1087:
1877:src/xeq.c     **** }
 15204              		.loc 1 1877 3 view .LVU3985
 15205              		.align	2
 15206              	.L1086:
 15207 001c 00000000 		.word	main_ram
 15208              		.cfi_endproc
ARM GAS  /tmp/ccQQPlfu.s 			page 433


 15209              	.LFE124:
 15211              		.section	.text.cmdrrcl,"ax",%progbits
 15212              		.align	1
 15213              		.p2align 2,,3
 15214              		.global	cmdrrcl
 15215              		.syntax unified
 15216              		.thumb
 15217              		.thumb_func
 15218              		.fpu fpv4-sp-d16
 15220              	cmdrrcl:
 15221              	.LVL1095:
 15222              	.LFB125:
1881:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15223              		.loc 1 1881 46 is_stmt 1 view -0
 15224              		.cfi_startproc
 15225              		@ args = 0, pretend = 0, frame = 40
 15226              		@ frame_needed = 0, uses_anonymous_args = 0
1882:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15227              		.loc 1 1882 2 view .LVU3987
1881:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15228              		.loc 1 1881 46 is_stmt 0 view .LVU3988
 15229 0000 70B5     		push	{r4, r5, r6, lr}
 15230              		.cfi_def_cfa_offset 16
 15231              		.cfi_offset 4, -16
 15232              		.cfi_offset 5, -12
 15233              		.cfi_offset 6, -8
 15234              		.cfi_offset 14, -4
1882:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15235              		.loc 1 1882 22 view .LVU3989
 15236 0002 1F4C     		ldr	r4, .L1095
 15237 0004 2368     		ldr	r3, [r4]
1882:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15238              		.loc 1 1882 28 view .LVU3990
 15239 0006 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1883:src/xeq.c     **** 
 15240              		.loc 1 1883 26 view .LVU3991
 15241 000a 8029     		cmp	r1, #128
1881:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15242              		.loc 1 1881 46 view .LVU3992
 15243 000c 8AB0     		sub	sp, sp, #40
 15244              		.cfi_def_cfa_offset 56
1882:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15245              		.loc 1 1882 28 view .LVU3993
 15246 000e C2F38015 		ubfx	r5, r2, #6, #1
 15247              	.LVL1096:
1883:src/xeq.c     **** 
 15248              		.loc 1 1883 2 is_stmt 1 view .LVU3994
1883:src/xeq.c     **** 
 15249              		.loc 1 1883 26 is_stmt 0 view .LVU3995
 15250 0012 0CBF     		ite	eq
 15251 0014 0121     		moveq	r1, #1
 15252              	.LVL1097:
1883:src/xeq.c     **** 
 15253              		.loc 1 1883 26 view .LVU3996
 15254 0016 0021     		movne	r1, #0
 15255              	.LVL1098:
1885:src/xeq.c     **** 		// dRCL is not valid for lettered registers
ARM GAS  /tmp/ccQQPlfu.s 			page 434


 15256              		.loc 1 1885 2 is_stmt 1 view .LVU3997
1885:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15257              		.loc 1 1885 5 is_stmt 0 view .LVU3998
 15258 0018 26D0     		beq	.L1093
 15259              	.LVL1099:
 15260              	.L1089:
1891:src/xeq.c     **** 	if (is_intmode()) {
 15261              		.loc 1 1891 2 is_stmt 1 view .LVU3999
1891:src/xeq.c     **** 	if (is_intmode()) {
 15262              		.loc 1 1891 21 is_stmt 0 view .LVU4000
 15263 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1892:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15264              		.loc 1 1892 6 view .LVU4001
 15265 001e 93F8E867 		ldrb	r6, [r3, #2024]	@ zero_extendqisi2
1891:src/xeq.c     **** 	if (is_intmode()) {
 15266              		.loc 1 1891 21 view .LVU4002
 15267 0022 61F38612 		bfi	r2, r1, #6, #1
 15268 0026 83F8E927 		strb	r2, [r3, #2025]
 15269              	.LVL1100:
1892:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15270              		.loc 1 1892 2 is_stmt 1 view .LVU4003
1892:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15271              		.loc 1 1892 5 is_stmt 0 view .LVU4004
 15272 002a F307     		lsls	r3, r6, #31
1893:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15273              		.loc 1 1893 3 view .LVU4005
 15274 002c 0146     		mov	r1, r0
 15275              	.LVL1101:
1892:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15276              		.loc 1 1892 5 view .LVU4006
 15277 002e 0FD4     		bmi	.L1094
 15278              	.LBB2753:
1897:src/xeq.c     **** 		getRegister(&x, arg);
 15279              		.loc 1 1897 3 is_stmt 1 view .LVU4007
1898:src/xeq.c     **** 
 15280              		.loc 1 1898 3 view .LVU4008
 15281 0030 01A8     		add	r0, sp, #4
 15282              	.LVL1102:
1898:src/xeq.c     **** 
 15283              		.loc 1 1898 3 is_stmt 0 view .LVU4009
 15284 0032 FFF7FEFF 		bl	getRegister
 15285              	.LVL1103:
1900:src/xeq.c     **** 		setX(&x);
 15286              		.loc 1 1900 3 is_stmt 1 view .LVU4010
1900:src/xeq.c     **** 		setX(&x);
 15287              		.loc 1 1900 22 is_stmt 0 view .LVU4011
 15288 0036 2368     		ldr	r3, [r4]
 15289 0038 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 15290 003c 65F38612 		bfi	r2, r5, #6, #1
 15291              	.LBB2754:
 15292              	.LBB2755:
 823:src/xeq.c     **** }
 15293              		.loc 1 823 2 view .LVU4012
 15294 0040 01A9     		add	r1, sp, #4
 15295              	.LBE2755:
 15296              	.LBE2754:
1900:src/xeq.c     **** 		setX(&x);
ARM GAS  /tmp/ccQQPlfu.s 			page 435


 15297              		.loc 1 1900 22 view .LVU4013
 15298 0042 83F8E927 		strb	r2, [r3, #2025]
1901:src/xeq.c     **** 	}
 15299              		.loc 1 1901 3 is_stmt 1 view .LVU4014
 15300              	.LVL1104:
 15301              	.LBB2757:
 15302              	.LBI2754:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 15303              		.loc 1 822 6 view .LVU4015
 15304              	.LBB2756:
 823:src/xeq.c     **** }
 15305              		.loc 1 823 2 view .LVU4016
 15306 0046 6420     		movs	r0, #100
 15307 0048 FFF7FEFF 		bl	setRegister
 15308              	.LVL1105:
 15309              	.L1088:
 823:src/xeq.c     **** }
 15310              		.loc 1 823 2 is_stmt 0 view .LVU4017
 15311              	.LBE2756:
 15312              	.LBE2757:
 15313              	.LBE2753:
1903:src/xeq.c     **** 
 15314              		.loc 1 1903 1 view .LVU4018
 15315 004c 0AB0     		add	sp, sp, #40
 15316              		.cfi_remember_state
 15317              		.cfi_def_cfa_offset 16
 15318              		@ sp needed
 15319 004e 70BD     		pop	{r4, r5, r6, pc}
 15320              	.LVL1106:
 15321              	.L1094:
 15322              		.cfi_restore_state
1893:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15323              		.loc 1 1893 3 is_stmt 1 view .LVU4019
 15324 0050 6420     		movs	r0, #100
 15325              	.LVL1107:
1893:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15326              		.loc 1 1893 3 is_stmt 0 view .LVU4020
 15327 0052 FFF7FEFF 		bl	int_from_register
 15328              	.LVL1108:
1894:src/xeq.c     **** 	}
 15329              		.loc 1 1894 3 is_stmt 1 view .LVU4021
1894:src/xeq.c     **** 	}
 15330              		.loc 1 1894 22 is_stmt 0 view .LVU4022
 15331 0056 2368     		ldr	r3, [r4]
 15332 0058 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 15333 005c 65F38612 		bfi	r2, r5, #6, #1
 15334 0060 83F8E927 		strb	r2, [r3, #2025]
1903:src/xeq.c     **** 
 15335              		.loc 1 1903 1 view .LVU4023
 15336 0064 0AB0     		add	sp, sp, #40
 15337              		.cfi_remember_state
 15338              		.cfi_def_cfa_offset 16
 15339              		@ sp needed
 15340 0066 70BD     		pop	{r4, r5, r6, pc}
 15341              	.LVL1109:
 15342              	.L1093:
 15343              		.cfi_restore_state
ARM GAS  /tmp/ccQQPlfu.s 			page 436


1885:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15344              		.loc 1 1885 14 discriminator 1 view .LVU4024
 15345 0068 A0F16402 		sub	r2, r0, #100
 15346              	.LVL1110:
1885:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15347              		.loc 1 1885 14 discriminator 1 view .LVU4025
 15348 006c 0B2A     		cmp	r2, #11
 15349 006e D4D8     		bhi	.L1089
1887:src/xeq.c     **** 		return;
 15350              		.loc 1 1887 3 is_stmt 1 view .LVU4026
 15351              	.LVL1111:
 15352              	.LBB2758:
 15353              	.LBI2758:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 15354              		.loc 1 540 5 view .LVU4027
 15355              	.LBB2759:
 541:src/xeq.c     **** 		Error = e;
 15356              		.loc 1 541 2 view .LVU4028
 541:src/xeq.c     **** 		Error = e;
 15357              		.loc 1 541 12 is_stmt 0 view .LVU4029
 15358 0070 044B     		ldr	r3, .L1095+4
 15359              	.LVL1112:
 541:src/xeq.c     **** 		Error = e;
 15360              		.loc 1 541 5 view .LVU4030
 15361 0072 1A68     		ldr	r2, [r3]
 15362 0074 002A     		cmp	r2, #0
 15363 0076 E9D1     		bne	.L1088
 15364              	.LVL1113:
 15365              	.LBB2760:
 15366              	.LBI2760:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 15367              		.loc 1 540 5 is_stmt 1 view .LVU4031
 15368              	.LBB2761:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 15369              		.loc 1 542 3 view .LVU4032
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 15370              		.loc 1 542 9 is_stmt 0 view .LVU4033
 15371 0078 0822     		movs	r2, #8
 15372 007a 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 15373              		.loc 1 543 3 is_stmt 1 view .LVU4034
 15374 007c E6E7     		b	.L1088
 15375              	.L1096:
 15376 007e 00BF     		.align	2
 15377              	.L1095:
 15378 0080 00000000 		.word	main_ram
 15379 0084 00000000 		.word	Error
 15380              	.LBE2761:
 15381              	.LBE2760:
 15382              	.LBE2759:
 15383              	.LBE2758:
 15384              		.cfi_endproc
 15385              	.LFE125:
 15387              		.section	.text.swap_reg,"ax",%progbits
 15388              		.align	1
 15389              		.p2align 2,,3
 15390              		.global	swap_reg
ARM GAS  /tmp/ccQQPlfu.s 			page 437


 15391              		.syntax unified
 15392              		.thumb
 15393              		.thumb_func
 15394              		.fpu fpv4-sp-d16
 15396              	swap_reg:
 15397              	.LVL1114:
 15398              	.LFB126:
1908:src/xeq.c     **** 	REGISTER t;
 15399              		.loc 1 1908 41 view -0
 15400              		.cfi_startproc
 15401              		@ args = 0, pretend = 0, frame = 16
 15402              		@ frame_needed = 0, uses_anonymous_args = 0
1909:src/xeq.c     **** 
 15403              		.loc 1 1909 2 view .LVU4036
1911:src/xeq.c     **** 	copyreg(a, b);
 15404              		.loc 1 1911 2 view .LVU4037
1908:src/xeq.c     **** 	REGISTER t;
 15405              		.loc 1 1908 41 is_stmt 0 view .LVU4038
 15406 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 15407              		.cfi_def_cfa_offset 20
 15408              		.cfi_offset 4, -20
 15409              		.cfi_offset 5, -16
 15410              		.cfi_offset 6, -12
 15411              		.cfi_offset 7, -8
 15412              		.cfi_offset 14, -4
 15413              	.LBB2762:
 15414              	.LBB2763:
 15415              	.LBB2764:
 15416              	.LBB2765:
1113:src/xeq.c     **** }
 15417              		.loc 1 1113 24 view .LVU4039
 15418 0002 174F     		ldr	r7, .L1105
 15419 0004 3B68     		ldr	r3, [r7]
 15420 0006 B3F8E837 		ldrh	r3, [r3, #2024]
 15421 000a 44F20104 		movw	r4, #16385
 15422              	.LBE2765:
 15423              	.LBE2764:
 721:src/xeq.c     **** }
 15424              		.loc 1 721 2 view .LVU4040
 15425 000e 2340     		ands	r3, r3, r4
 15426              	.LBE2763:
 15427              	.LBE2762:
1908:src/xeq.c     **** 	REGISTER t;
 15428              		.loc 1 1908 41 view .LVU4041
 15429 0010 85B0     		sub	sp, sp, #20
 15430              		.cfi_def_cfa_offset 40
 15431              	.LVL1115:
 15432              	.LBB2770:
 15433              	.LBB2768:
 721:src/xeq.c     **** }
 15434              		.loc 1 721 2 view .LVU4042
 15435 0012 B3F5804F 		cmp	r3, #16384
 15436 0016 0CBF     		ite	eq
 15437 0018 1022     		moveq	r2, #16
 15438 001a 0822     		movne	r2, #8
 15439              	.LBE2768:
 15440              	.LBE2770:
ARM GAS  /tmp/ccQQPlfu.s 			page 438


1908:src/xeq.c     **** 	REGISTER t;
 15441              		.loc 1 1908 41 view .LVU4043
 15442 001c 0D46     		mov	r5, r1
 15443 001e 0646     		mov	r6, r0
 15444              	.LVL1116:
 15445              	.LBB2771:
 15446              	.LBI2762:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15447              		.loc 1 720 6 is_stmt 1 view .LVU4044
 15448              	.LBB2769:
 721:src/xeq.c     **** }
 15449              		.loc 1 721 2 view .LVU4045
 15450              	.LBB2767:
 15451              	.LBI2764:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15452              		.loc 1 1112 5 view .LVU4046
 15453              	.LBB2766:
1113:src/xeq.c     **** }
 15454              		.loc 1 1113 2 view .LVU4047
 15455              	.LBE2766:
 15456              	.LBE2767:
 721:src/xeq.c     **** }
 15457              		.loc 1 721 2 is_stmt 0 view .LVU4048
 15458 0020 0146     		mov	r1, r0
 15459              	.LVL1117:
 721:src/xeq.c     **** }
 15460              		.loc 1 721 2 view .LVU4049
 15461 0022 6846     		mov	r0, sp
 15462              	.LVL1118:
 721:src/xeq.c     **** }
 15463              		.loc 1 721 2 view .LVU4050
 15464 0024 FFF7FEFF 		bl	xcopy
 15465              	.LVL1119:
 721:src/xeq.c     **** }
 15466              		.loc 1 721 2 view .LVU4051
 15467              	.LBE2769:
 15468              	.LBE2771:
1912:src/xeq.c     **** 	copyreg(b, &t);
 15469              		.loc 1 1912 2 is_stmt 1 view .LVU4052
 15470              	.LBB2772:
 15471              	.LBI2772:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15472              		.loc 1 720 6 view .LVU4053
 15473              	.LBB2773:
 721:src/xeq.c     **** }
 15474              		.loc 1 721 2 view .LVU4054
 15475              	.LBB2774:
 15476              	.LBI2774:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15477              		.loc 1 1112 5 view .LVU4055
 15478              	.LBB2775:
1113:src/xeq.c     **** }
 15479              		.loc 1 1113 2 view .LVU4056
1113:src/xeq.c     **** }
 15480              		.loc 1 1113 24 is_stmt 0 view .LVU4057
 15481 0028 3B68     		ldr	r3, [r7]
 15482 002a B3F8E837 		ldrh	r3, [r3, #2024]
ARM GAS  /tmp/ccQQPlfu.s 			page 439


 15483              	.LBE2775:
 15484              	.LBE2774:
 721:src/xeq.c     **** }
 15485              		.loc 1 721 2 view .LVU4058
 15486 002e 2340     		ands	r3, r3, r4
 15487 0030 B3F5804F 		cmp	r3, #16384
 15488 0034 0CBF     		ite	eq
 15489 0036 1022     		moveq	r2, #16
 15490 0038 0822     		movne	r2, #8
 15491 003a 2946     		mov	r1, r5
 15492 003c 3046     		mov	r0, r6
 15493 003e FFF7FEFF 		bl	xcopy
 15494              	.LVL1120:
 721:src/xeq.c     **** }
 15495              		.loc 1 721 2 view .LVU4059
 15496              	.LBE2773:
 15497              	.LBE2772:
1913:src/xeq.c     **** }
 15498              		.loc 1 1913 2 is_stmt 1 view .LVU4060
 15499              	.LBB2776:
 15500              	.LBI2776:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15501              		.loc 1 720 6 view .LVU4061
 15502              	.LBB2777:
 721:src/xeq.c     **** }
 15503              		.loc 1 721 2 view .LVU4062
 15504              	.LBB2778:
 15505              	.LBI2778:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15506              		.loc 1 1112 5 view .LVU4063
 15507              	.LBB2779:
1113:src/xeq.c     **** }
 15508              		.loc 1 1113 2 view .LVU4064
1113:src/xeq.c     **** }
 15509              		.loc 1 1113 24 is_stmt 0 view .LVU4065
 15510 0042 3B68     		ldr	r3, [r7]
 15511 0044 B3F8E837 		ldrh	r3, [r3, #2024]
 15512              	.LBE2779:
 15513              	.LBE2778:
 721:src/xeq.c     **** }
 15514              		.loc 1 721 2 view .LVU4066
 15515 0048 1C40     		ands	r4, r4, r3
 15516 004a B4F5804F 		cmp	r4, #16384
 15517 004e 2846     		mov	r0, r5
 15518 0050 6946     		mov	r1, sp
 15519 0052 0CBF     		ite	eq
 15520 0054 1022     		moveq	r2, #16
 15521 0056 0822     		movne	r2, #8
 15522 0058 FFF7FEFF 		bl	xcopy
 15523              	.LVL1121:
 721:src/xeq.c     **** }
 15524              		.loc 1 721 2 view .LVU4067
 15525              	.LBE2777:
 15526              	.LBE2776:
1914:src/xeq.c     **** 
 15527              		.loc 1 1914 1 view .LVU4068
 15528 005c 05B0     		add	sp, sp, #20
ARM GAS  /tmp/ccQQPlfu.s 			page 440


 15529              		.cfi_def_cfa_offset 20
 15530              		@ sp needed
 15531 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 15532              	.LVL1122:
 15533              	.L1106:
1914:src/xeq.c     **** 
 15534              		.loc 1 1914 1 view .LVU4069
 15535              		.align	2
 15536              	.L1105:
 15537 0060 00000000 		.word	main_ram
 15538              		.cfi_endproc
 15539              	.LFE126:
 15541              		.section	.text.cmdswap,"ax",%progbits
 15542              		.align	1
 15543              		.p2align 2,,3
 15544              		.global	cmdswap
 15545              		.syntax unified
 15546              		.thumb
 15547              		.thumb_func
 15548              		.fpu fpv4-sp-d16
 15550              	cmdswap:
 15551              	.LVL1123:
 15552              	.LFB127:
1916:src/xeq.c     **** 	int idx;
 15553              		.loc 1 1916 46 is_stmt 1 view -0
 15554              		.cfi_startproc
 15555              		@ args = 0, pretend = 0, frame = 0
 15556              		@ frame_needed = 0, uses_anonymous_args = 0
1917:src/xeq.c     **** 
 15557              		.loc 1 1917 2 view .LVU4071
1919:src/xeq.c     **** 		idx = regX_idx;
 15558              		.loc 1 1919 2 view .LVU4072
1919:src/xeq.c     **** 		idx = regX_idx;
 15559              		.loc 1 1919 5 is_stmt 0 view .LVU4073
 15560 0000 1F29     		cmp	r1, #31
1916:src/xeq.c     **** 	int idx;
 15561              		.loc 1 1916 46 view .LVU4074
 15562 0002 70B5     		push	{r4, r5, r6, lr}
 15563              		.cfi_def_cfa_offset 16
 15564              		.cfi_offset 4, -16
 15565              		.cfi_offset 5, -12
 15566              		.cfi_offset 6, -8
 15567              		.cfi_offset 14, -4
1916:src/xeq.c     **** 	int idx;
 15568              		.loc 1 1916 46 view .LVU4075
 15569 0004 0546     		mov	r5, r0
1919:src/xeq.c     **** 		idx = regX_idx;
 15570              		.loc 1 1919 5 view .LVU4076
 15571 0006 11D0     		beq	.L1108
1921:src/xeq.c     **** 		idx = regZ_idx;
 15572              		.loc 1 1921 10 view .LVU4077
 15573 0008 2029     		cmp	r1, #32
 15574 000a 0C46     		mov	r4, r1
1921:src/xeq.c     **** 		idx = regZ_idx;
 15575              		.loc 1 1921 7 is_stmt 1 view .LVU4078
1921:src/xeq.c     **** 		idx = regZ_idx;
 15576              		.loc 1 1921 10 is_stmt 0 view .LVU4079
ARM GAS  /tmp/ccQQPlfu.s 			page 441


 15577 000c 32D0     		beq	.L1109
1924:src/xeq.c     **** 
 15578              		.loc 1 1924 3 is_stmt 1 view .LVU4080
 15579              	.LVL1124:
1926:src/xeq.c     **** 
 15580              		.loc 1 1926 2 view .LVU4081
 15581 000e 01F15300 		add	r0, r1, #83
 15582              	.LVL1125:
1926:src/xeq.c     **** 
 15583              		.loc 1 1926 2 is_stmt 0 view .LVU4082
 15584 0012 FFF7FEFF 		bl	get_reg_n
 15585              	.LVL1126:
1926:src/xeq.c     **** 
 15586              		.loc 1 1926 2 view .LVU4083
 15587 0016 0646     		mov	r6, r0
 15588 0018 2846     		mov	r0, r5
 15589 001a FFF7FEFF 		bl	get_reg_n
 15590              	.LVL1127:
 15591 001e 0146     		mov	r1, r0
 15592 0020 3046     		mov	r0, r6
 15593 0022 FFF7FEFF 		bl	swap_reg
 15594              	.LVL1128:
1928:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15595              		.loc 1 1928 2 is_stmt 1 view .LVU4084
1928:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15596              		.loc 1 1928 5 is_stmt 0 view .LVU4085
 15597 0026 1E2C     		cmp	r4, #30
 15598 0028 31D8     		bhi	.L1113
1935:src/xeq.c     **** 
 15599              		.loc 1 1935 1 view .LVU4086
 15600 002a 70BD     		pop	{r4, r5, r6, pc}
 15601              	.LVL1129:
 15602              	.L1108:
1926:src/xeq.c     **** 
 15603              		.loc 1 1926 2 is_stmt 1 view .LVU4087
 15604 002c 6420     		movs	r0, #100
 15605              	.LVL1130:
1926:src/xeq.c     **** 
 15606              		.loc 1 1926 2 is_stmt 0 view .LVU4088
 15607 002e FFF7FEFF 		bl	get_reg_n
 15608              	.LVL1131:
1926:src/xeq.c     **** 
 15609              		.loc 1 1926 2 view .LVU4089
 15610 0032 0446     		mov	r4, r0
 15611 0034 2846     		mov	r0, r5
 15612 0036 FFF7FEFF 		bl	get_reg_n
 15613              	.LVL1132:
 15614 003a 0146     		mov	r1, r0
 15615 003c 2046     		mov	r0, r4
 15616 003e FFF7FEFF 		bl	swap_reg
 15617              	.LVL1133:
1928:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15618              		.loc 1 1928 2 is_stmt 1 view .LVU4090
1926:src/xeq.c     **** 
 15619              		.loc 1 1926 2 is_stmt 0 view .LVU4091
 15620 0042 6520     		movs	r0, #101
 15621              	.LVL1134:
ARM GAS  /tmp/ccQQPlfu.s 			page 442


 15622              	.L1111:
1929:src/xeq.c     **** 		set_was_complex();
 15623              		.loc 1 1929 3 is_stmt 1 view .LVU4092
 15624 0044 FFF7FEFF 		bl	get_reg_n
 15625              	.LVL1135:
 15626 0048 0446     		mov	r4, r0
 15627 004a 681C     		adds	r0, r5, #1
 15628 004c FFF7FEFF 		bl	get_reg_n
 15629              	.LVL1136:
 15630 0050 0146     		mov	r1, r0
 15631 0052 2046     		mov	r0, r4
 15632 0054 FFF7FEFF 		bl	swap_reg
 15633              	.LVL1137:
1930:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 15634              		.loc 1 1930 3 view .LVU4093
 15635              	.LBB2780:
 15636              	.LBI2780:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 15637              		.loc 1 533 13 view .LVU4094
 15638              	.LBB2781:
 534:src/xeq.c     **** }
 15639              		.loc 1 534 2 view .LVU4095
 534:src/xeq.c     **** }
 15640              		.loc 1 534 20 is_stmt 0 view .LVU4096
 15641 0058 0E4B     		ldr	r3, .L1114
 15642              	.LBE2781:
 15643              	.LBE2780:
1932:src/xeq.c     **** #endif
 15644              		.loc 1 1932 2 view .LVU4097
 15645 005a 0F4A     		ldr	r2, .L1114+4
 15646              	.LBB2784:
 15647              	.LBB2782:
 534:src/xeq.c     **** }
 15648              		.loc 1 534 20 view .LVU4098
 15649 005c 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 15650              	.LBE2782:
 15651              	.LBE2784:
1932:src/xeq.c     **** #endif
 15652              		.loc 1 1932 2 view .LVU4099
 15653 005e 1268     		ldr	r2, [r2]
 15654              	.LBB2785:
 15655              	.LBB2783:
 534:src/xeq.c     **** }
 15656              		.loc 1 534 20 view .LVU4100
 15657 0060 0120     		movs	r0, #1
 15658 0062 60F38711 		bfi	r1, r0, #6, #2
 15659 0066 1975     		strb	r1, [r3, #20]
 15660              	.LBE2783:
 15661              	.LBE2785:
1932:src/xeq.c     **** #endif
 15662              		.loc 1 1932 2 is_stmt 1 view .LVU4101
 15663 0068 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 15664 006c 0343     		orrs	r3, r3, r0
 15665 006e 82F8AD37 		strb	r3, [r2, #1965]
1935:src/xeq.c     **** 
 15666              		.loc 1 1935 1 is_stmt 0 view .LVU4102
 15667 0072 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccQQPlfu.s 			page 443


 15668              	.LVL1138:
 15669              	.L1109:
1926:src/xeq.c     **** 
 15670              		.loc 1 1926 2 is_stmt 1 view .LVU4103
 15671 0074 6620     		movs	r0, #102
 15672              	.LVL1139:
1926:src/xeq.c     **** 
 15673              		.loc 1 1926 2 is_stmt 0 view .LVU4104
 15674 0076 FFF7FEFF 		bl	get_reg_n
 15675              	.LVL1140:
1926:src/xeq.c     **** 
 15676              		.loc 1 1926 2 view .LVU4105
 15677 007a 0446     		mov	r4, r0
 15678 007c 2846     		mov	r0, r5
 15679 007e FFF7FEFF 		bl	get_reg_n
 15680              	.LVL1141:
 15681 0082 0146     		mov	r1, r0
 15682 0084 2046     		mov	r0, r4
 15683 0086 FFF7FEFF 		bl	swap_reg
 15684              	.LVL1142:
1928:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15685              		.loc 1 1928 2 is_stmt 1 view .LVU4106
1926:src/xeq.c     **** 
 15686              		.loc 1 1926 2 is_stmt 0 view .LVU4107
 15687 008a 6720     		movs	r0, #103
 15688 008c DAE7     		b	.L1111
 15689              	.LVL1143:
 15690              	.L1113:
1926:src/xeq.c     **** 
 15691              		.loc 1 1926 2 view .LVU4108
 15692 008e 04F15400 		add	r0, r4, #84
 15693 0092 D7E7     		b	.L1111
 15694              	.L1115:
 15695              		.align	2
 15696              	.L1114:
 15697 0094 00000000 		.word	StateWhileOn
 15698 0098 00000000 		.word	main_ram
 15699              		.cfi_endproc
 15700              	.LFE127:
 15702              		.section	.text.cmdview,"ax",%progbits
 15703              		.align	1
 15704              		.p2align 2,,3
 15705              		.global	cmdview
 15706              		.syntax unified
 15707              		.thumb
 15708              		.thumb_func
 15709              		.fpu fpv4-sp-d16
 15711              	cmdview:
 15712              	.LVL1144:
 15713              	.LFB128:
1940:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15714              		.loc 1 1940 46 is_stmt 1 view -0
 15715              		.cfi_startproc
 15716              		@ args = 0, pretend = 0, frame = 0
 15717              		@ frame_needed = 0, uses_anonymous_args = 0
1941:src/xeq.c     **** 
 15718              		.loc 1 1941 2 view .LVU4110
ARM GAS  /tmp/ccQQPlfu.s 			page 444


1940:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15719              		.loc 1 1940 46 is_stmt 0 view .LVU4111
 15720 0000 70B5     		push	{r4, r5, r6, lr}
 15721              		.cfi_def_cfa_offset 16
 15722              		.cfi_offset 4, -16
 15723              		.cfi_offset 5, -12
 15724              		.cfi_offset 6, -8
 15725              		.cfi_offset 14, -4
1943:src/xeq.c     **** 	ShowRegister = arg;
 15726              		.loc 1 1943 20 view .LVU4112
 15727 0002 134D     		ldr	r5, .L1122
1944:src/xeq.c     **** 	State2.disp_freeze = 0;
 15728              		.loc 1 1944 15 view .LVU4113
 15729 0004 134A     		ldr	r2, .L1122+4
1943:src/xeq.c     **** 	ShowRegister = arg;
 15730              		.loc 1 1943 20 view .LVU4114
 15731 0006 6B69     		ldr	r3, [r5, #20]
1944:src/xeq.c     **** 	State2.disp_freeze = 0;
 15732              		.loc 1 1944 15 view .LVU4115
 15733 0008 1060     		str	r0, [r2]
1940:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15734              		.loc 1 1940 46 view .LVU4116
 15735 000a 0E46     		mov	r6, r1
 15736              	.LVL1145:
1943:src/xeq.c     **** 	ShowRegister = arg;
 15737              		.loc 1 1943 2 is_stmt 1 view .LVU4117
1944:src/xeq.c     **** 	State2.disp_freeze = 0;
 15738              		.loc 1 1944 2 view .LVU4118
1945:src/xeq.c     **** 	display();
 15739              		.loc 1 1945 2 view .LVU4119
1941:src/xeq.c     **** 
 15740              		.loc 1 1941 41 is_stmt 0 view .LVU4120
 15741 000c A1F18C01 		sub	r1, #140
 15742              	.LVL1146:
1943:src/xeq.c     **** 	ShowRegister = arg;
 15743              		.loc 1 1943 20 view .LVU4121
 15744 0010 23F08053 		bic	r3, r3, #268435456
1941:src/xeq.c     **** 
 15745              		.loc 1 1941 41 view .LVU4122
 15746 0014 B1FA81F1 		clz	r1, r1
 15747 0018 4909     		lsrs	r1, r1, #5
1943:src/xeq.c     **** 	ShowRegister = arg;
 15748              		.loc 1 1943 20 view .LVU4123
 15749 001a 23F0C003 		bic	r3, r3, #192
 15750 001e 43EA8113 		orr	r3, r3, r1, lsl #6
1940:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15751              		.loc 1 1940 46 view .LVU4124
 15752 0022 0446     		mov	r4, r0
1943:src/xeq.c     **** 	ShowRegister = arg;
 15753              		.loc 1 1943 20 view .LVU4125
 15754 0024 6B61     		str	r3, [r5, #20]
1946:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
 15755              		.loc 1 1946 2 is_stmt 1 view .LVU4126
 15756 0026 FFF7FEFF 		bl	display
 15757              	.LVL1147:
1947:src/xeq.c     **** }
 15758              		.loc 1 1947 2 view .LVU4127
ARM GAS  /tmp/ccQQPlfu.s 			page 445


1947:src/xeq.c     **** }
 15759              		.loc 1 1947 40 is_stmt 0 view .LVU4128
 15760 002a 8C2E     		cmp	r6, #140
 15761 002c 02D0     		beq	.L1119
1947:src/xeq.c     **** }
 15762              		.loc 1 1947 29 discriminator 2 view .LVU4129
 15763 002e 0A4B     		ldr	r3, .L1122+8
 15764 0030 1B68     		ldr	r3, [r3]
 15765 0032 2BB1     		cbz	r3, .L1121
 15766              	.L1119:
1947:src/xeq.c     **** }
 15767              		.loc 1 1947 21 view .LVU4130
 15768 0034 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 15769 0036 0124     		movs	r4, #1
 15770              	.LVL1148:
1947:src/xeq.c     **** }
 15771              		.loc 1 1947 21 view .LVU4131
 15772 0038 64F30413 		bfi	r3, r4, #4, #1
 15773 003c EB75     		strb	r3, [r5, #23]
1948:src/xeq.c     **** 
 15774              		.loc 1 1948 1 view .LVU4132
 15775 003e 70BD     		pop	{r4, r5, r6, pc}
 15776              	.LVL1149:
 15777              	.L1121:
1947:src/xeq.c     **** }
 15778              		.loc 1 1947 21 discriminator 4 view .LVU4133
 15779 0040 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
1947:src/xeq.c     **** }
 15780              		.loc 1 1947 40 discriminator 4 view .LVU4134
 15781 0042 643C     		subs	r4, r4, #100
 15782              	.LVL1150:
1947:src/xeq.c     **** }
 15783              		.loc 1 1947 40 discriminator 4 view .LVU4135
 15784 0044 18BF     		it	ne
 15785 0046 0124     		movne	r4, #1
 15786              	.LVL1151:
1947:src/xeq.c     **** }
 15787              		.loc 1 1947 21 discriminator 4 view .LVU4136
 15788 0048 64F30413 		bfi	r3, r4, #4, #1
 15789 004c EB75     		strb	r3, [r5, #23]
1948:src/xeq.c     **** 
 15790              		.loc 1 1948 1 discriminator 4 view .LVU4137
 15791 004e 70BD     		pop	{r4, r5, r6, pc}
 15792              	.L1123:
 15793              		.align	2
 15794              	.L1122:
 15795 0050 00000000 		.word	StateWhileOn
 15796 0054 00000000 		.word	ShowRegister
 15797 0058 00000000 		.word	Running
 15798              		.cfi_endproc
 15799              	.LFE128:
 15801              		.section	.text.get_stack_size,"ax",%progbits
 15802              		.align	1
 15803              		.p2align 2,,3
 15804              		.global	get_stack_size
 15805              		.syntax unified
 15806              		.thumb
ARM GAS  /tmp/ccQQPlfu.s 			page 446


 15807              		.thumb_func
 15808              		.fpu fpv4-sp-d16
 15810              	get_stack_size:
 15811              	.LVL1152:
 15812              	.LFB129:
1952:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15813              		.loc 1 1952 36 is_stmt 1 view -0
 15814              		.cfi_startproc
 15815              		@ args = 0, pretend = 0, frame = 0
 15816              		@ frame_needed = 0, uses_anonymous_args = 0
1953:src/xeq.c     **** }
 15817              		.loc 1 1953 2 view .LVU4139
 15818              	.LBB2786:
 15819              	.LBI2786:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 15820              		.loc 1 706 5 view .LVU4140
 15821              	.LBB2787:
 707:src/xeq.c     **** 		return 4;
 15822              		.loc 1 707 2 view .LVU4141
 707:src/xeq.c     **** 		return 4;
 15823              		.loc 1 707 8 is_stmt 0 view .LVU4142
 15824 0000 0F4B     		ldr	r3, .L1131
 15825              	.LBE2787:
 15826              	.LBE2786:
1952:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15827              		.loc 1 1952 36 view .LVU4143
 15828 0002 00B5     		push	{lr}
 15829              		.cfi_def_cfa_offset 4
 15830              		.cfi_offset 14, -4
 15831              	.LBB2793:
 15832              	.LBB2790:
 707:src/xeq.c     **** 		return 4;
 15833              		.loc 1 707 8 view .LVU4144
 15834 0004 1B68     		ldr	r3, [r3]
 707:src/xeq.c     **** 		return 4;
 15835              		.loc 1 707 6 view .LVU4145
 15836 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 15837              		.loc 1 707 5 view .LVU4146
 15838 000a 1207     		lsls	r2, r2, #28
 15839              	.LBE2790:
 15840              	.LBE2793:
1952:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15841              		.loc 1 1952 36 view .LVU4147
 15842 000c 83B0     		sub	sp, sp, #12
 15843              		.cfi_def_cfa_offset 16
 15844              	.LBB2794:
 15845              	.LBB2791:
 707:src/xeq.c     **** 		return 4;
 15846              		.loc 1 707 5 view .LVU4148
 15847 000e 13D5     		bpl	.L1126
 15848              	.LBB2788:
 15849              	.LBI2788:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 15850              		.loc 1 185 5 is_stmt 1 view .LVU4149
 15851              	.LBB2789:
 186:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 447


 15852              		.loc 1 186 2 view .LVU4150
 186:src/xeq.c     **** }
 15853              		.loc 1 186 9 is_stmt 0 view .LVU4151
 15854 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 15855              	.LBE2789:
 15856              	.LBE2788:
 707:src/xeq.c     **** 		return 4;
 15857              		.loc 1 707 27 view .LVU4152
 15858 0014 9B0B     		lsrs	r3, r3, #14
 15859 0016 032B     		cmp	r3, #3
 15860 0018 09D0     		beq	.L1130
 15861              	.L1128:
 15862 001a 0822     		movs	r2, #8
 15863 001c 0023     		movs	r3, #0
 15864              	.L1125:
 15865              	.LVL1153:
 707:src/xeq.c     **** 		return 4;
 15866              		.loc 1 707 27 view .LVU4153
 15867              	.LBE2791:
 15868              	.LBE2794:
 15869              	.LBB2795:
 15870              	.LBI2795:
1503:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15871              		.loc 1 1503 6 is_stmt 1 view .LVU4154
 15872              	.LBB2796:
1504:src/xeq.c     **** }
 15873              		.loc 1 1504 2 view .LVU4155
 15874 001e 0021     		movs	r1, #0
 15875 0020 0091     		str	r1, [sp]
 15876 0022 6420     		movs	r0, #100
 15877              	.LVL1154:
1504:src/xeq.c     **** }
 15878              		.loc 1 1504 2 is_stmt 0 view .LVU4156
 15879 0024 FFF7FEFF 		bl	set_reg_n_int_sgn
 15880              	.LVL1155:
1504:src/xeq.c     **** }
 15881              		.loc 1 1504 2 view .LVU4157
 15882              	.LBE2796:
 15883              	.LBE2795:
1954:src/xeq.c     **** 
 15884              		.loc 1 1954 1 view .LVU4158
 15885 0028 03B0     		add	sp, sp, #12
 15886              		.cfi_remember_state
 15887              		.cfi_def_cfa_offset 4
 15888              		@ sp needed
 15889 002a 5DF804FB 		ldr	pc, [sp], #4
 15890              	.LVL1156:
 15891              	.L1130:
 15892              		.cfi_restore_state
 15893              	.LBB2797:
 15894              	.LBB2792:
 707:src/xeq.c     **** 		return 4;
 15895              		.loc 1 707 44 view .LVU4159
 15896 002e 054B     		ldr	r3, .L1131+4
 707:src/xeq.c     **** 		return 4;
 15897              		.loc 1 707 41 view .LVU4160
 15898 0030 93F90130 		ldrsb	r3, [r3, #1]
ARM GAS  /tmp/ccQQPlfu.s 			page 448


 15899 0034 002B     		cmp	r3, #0
 15900 0036 F0DB     		blt	.L1128
 15901              	.L1126:
 15902 0038 0422     		movs	r2, #4
 15903 003a 0023     		movs	r3, #0
 15904 003c EFE7     		b	.L1125
 15905              	.L1132:
 15906 003e 00BF     		.align	2
 15907              	.L1131:
 15908 0040 00000000 		.word	main_ram
 15909 0044 00000000 		.word	XromParams
 15910              	.LBE2792:
 15911              	.LBE2797:
 15912              		.cfi_endproc
 15913              	.LFE129:
 15915              		.section	.text.get_word_size,"ax",%progbits
 15916              		.align	1
 15917              		.p2align 2,,3
 15918              		.global	get_word_size
 15919              		.syntax unified
 15920              		.thumb
 15921              		.thumb_func
 15922              		.fpu fpv4-sp-d16
 15924              	get_word_size:
 15925              	.LVL1157:
 15926              	.LFB130:
1956:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 15927              		.loc 1 1956 35 is_stmt 1 view -0
 15928              		.cfi_startproc
 15929              		@ args = 0, pretend = 0, frame = 0
 15930              		@ frame_needed = 0, uses_anonymous_args = 0
1957:src/xeq.c     **** }
 15931              		.loc 1 1957 2 view .LVU4162
1956:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 15932              		.loc 1 1956 35 is_stmt 0 view .LVU4163
 15933 0000 00B5     		push	{lr}
 15934              		.cfi_def_cfa_offset 4
 15935              		.cfi_offset 14, -4
 15936 0002 83B0     		sub	sp, sp, #12
 15937              		.cfi_def_cfa_offset 16
1957:src/xeq.c     **** }
 15938              		.loc 1 1957 20 view .LVU4164
 15939 0004 FFF7FEFF 		bl	word_size
 15940              	.LVL1158:
 15941              	.LBB2798:
 15942              	.LBI2798:
1503:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15943              		.loc 1 1503 6 is_stmt 1 view .LVU4165
 15944              	.LBB2799:
1504:src/xeq.c     **** }
 15945              		.loc 1 1504 2 view .LVU4166
 15946 0008 0021     		movs	r1, #0
 15947 000a 0246     		mov	r2, r0
 15948 000c C317     		asrs	r3, r0, #31
 15949 000e 0091     		str	r1, [sp]
 15950 0010 6420     		movs	r0, #100
 15951              	.LVL1159:
ARM GAS  /tmp/ccQQPlfu.s 			page 449


1504:src/xeq.c     **** }
 15952              		.loc 1 1504 2 is_stmt 0 view .LVU4167
 15953 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 15954              	.LVL1160:
1504:src/xeq.c     **** }
 15955              		.loc 1 1504 2 view .LVU4168
 15956              	.LBE2799:
 15957              	.LBE2798:
1958:src/xeq.c     **** 
 15958              		.loc 1 1958 1 view .LVU4169
 15959 0016 03B0     		add	sp, sp, #12
 15960              		.cfi_def_cfa_offset 4
 15961              		@ sp needed
 15962 0018 5DF804FB 		ldr	pc, [sp], #4
 15963              		.cfi_endproc
 15964              	.LFE130:
 15966              		.section	.text.get_sign_mode,"ax",%progbits
 15967              		.align	1
 15968              		.p2align 2,,3
 15969              		.global	get_sign_mode
 15970              		.syntax unified
 15971              		.thumb
 15972              		.thumb_func
 15973              		.fpu fpv4-sp-d16
 15975              	get_sign_mode:
 15976              	.LVL1161:
 15977              	.LFB131:
1960:src/xeq.c     **** 	static const unsigned char modes[4] = {
 15978              		.loc 1 1960 35 is_stmt 1 view -0
 15979              		.cfi_startproc
 15980              		@ args = 0, pretend = 0, frame = 0
 15981              		@ frame_needed = 0, uses_anonymous_args = 0
1961:src/xeq.c     **** 		0x02,		// 2's complement
 15982              		.loc 1 1961 2 view .LVU4171
1967:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15983              		.loc 1 1967 2 view .LVU4172
1960:src/xeq.c     **** 	static const unsigned char modes[4] = {
 15984              		.loc 1 1960 35 is_stmt 0 view .LVU4173
 15985 0000 00B5     		push	{lr}
 15986              		.cfi_def_cfa_offset 4
 15987              		.cfi_offset 14, -4
 15988 0002 83B0     		sub	sp, sp, #12
 15989              		.cfi_def_cfa_offset 16
1967:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15990              		.loc 1 1967 37 view .LVU4174
 15991 0004 FFF7FEFF 		bl	int_mode
 15992              	.LVL1162:
1967:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15993              		.loc 1 1967 22 view .LVU4175
 15994 0008 064B     		ldr	r3, .L1137
 15995 000a 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
 15996              	.LVL1163:
1968:src/xeq.c     **** }
 15997              		.loc 1 1968 2 is_stmt 1 view .LVU4176
 15998              	.LBB2800:
 15999              	.LBI2800:
1503:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
ARM GAS  /tmp/ccQQPlfu.s 			page 450


 16000              		.loc 1 1503 6 view .LVU4177
 16001              	.LBB2801:
1504:src/xeq.c     **** }
 16002              		.loc 1 1504 2 view .LVU4178
 16003              	.LBE2801:
 16004              	.LBE2800:
1968:src/xeq.c     **** }
 16005              		.loc 1 1968 2 is_stmt 0 view .LVU4179
 16006 000c 03F00302 		and	r2, r3, #3
 16007 0010 03F08003 		and	r3, r3, #128
 16008              	.LVL1164:
1968:src/xeq.c     **** }
 16009              		.loc 1 1968 2 view .LVU4180
 16010 0014 0093     		str	r3, [sp]
 16011              	.LBB2803:
 16012              	.LBB2802:
1504:src/xeq.c     **** }
 16013              		.loc 1 1504 2 view .LVU4181
 16014 0016 6420     		movs	r0, #100
 16015              	.LVL1165:
1504:src/xeq.c     **** }
 16016              		.loc 1 1504 2 view .LVU4182
 16017 0018 0023     		movs	r3, #0
 16018 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 16019              	.LVL1166:
1504:src/xeq.c     **** }
 16020              		.loc 1 1504 2 view .LVU4183
 16021              	.LBE2802:
 16022              	.LBE2803:
1969:src/xeq.c     **** 
 16023              		.loc 1 1969 1 view .LVU4184
 16024 001e 03B0     		add	sp, sp, #12
 16025              		.cfi_def_cfa_offset 4
 16026              		@ sp needed
 16027 0020 5DF804FB 		ldr	pc, [sp], #4
 16028              	.L1138:
 16029              		.align	2
 16030              	.L1137:
 16031 0024 00000000 		.word	.LANCHOR4
 16032              		.cfi_endproc
 16033              	.LFE131:
 16035              		.section	.text.get_base,"ax",%progbits
 16036              		.align	1
 16037              		.p2align 2,,3
 16038              		.global	get_base
 16039              		.syntax unified
 16040              		.thumb
 16041              		.thumb_func
 16042              		.fpu fpv4-sp-d16
 16044              	get_base:
 16045              	.LVL1167:
 16046              	.LFB132:
1971:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 16047              		.loc 1 1971 30 is_stmt 1 view -0
 16048              		.cfi_startproc
 16049              		@ args = 0, pretend = 0, frame = 0
 16050              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQQPlfu.s 			page 451


1972:src/xeq.c     **** }
 16051              		.loc 1 1972 2 view .LVU4186
1971:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 16052              		.loc 1 1971 30 is_stmt 0 view .LVU4187
 16053 0000 00B5     		push	{lr}
 16054              		.cfi_def_cfa_offset 4
 16055              		.cfi_offset 14, -4
 16056 0002 83B0     		sub	sp, sp, #12
 16057              		.cfi_def_cfa_offset 16
1972:src/xeq.c     **** }
 16058              		.loc 1 1972 20 view .LVU4188
 16059 0004 FFF7FEFF 		bl	int_base
 16060              	.LVL1168:
 16061              	.LBB2804:
 16062              	.LBI2804:
1503:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16063              		.loc 1 1503 6 is_stmt 1 view .LVU4189
 16064              	.LBB2805:
1504:src/xeq.c     **** }
 16065              		.loc 1 1504 2 view .LVU4190
 16066 0008 0021     		movs	r1, #0
 16067 000a 0246     		mov	r2, r0
 16068 000c C317     		asrs	r3, r0, #31
 16069 000e 0091     		str	r1, [sp]
 16070 0010 6420     		movs	r0, #100
 16071              	.LVL1169:
1504:src/xeq.c     **** }
 16072              		.loc 1 1504 2 is_stmt 0 view .LVU4191
 16073 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 16074              	.LVL1170:
1504:src/xeq.c     **** }
 16075              		.loc 1 1504 2 view .LVU4192
 16076              	.LBE2805:
 16077              	.LBE2804:
1973:src/xeq.c     **** 
 16078              		.loc 1 1973 1 view .LVU4193
 16079 0016 03B0     		add	sp, sp, #12
 16080              		.cfi_def_cfa_offset 4
 16081              		@ sp needed
 16082 0018 5DF804FB 		ldr	pc, [sp], #4
 16083              		.cfi_endproc
 16084              	.LFE132:
 16086              		.section	.text.DM42_Ticker,"ax",%progbits
 16087              		.align	1
 16088              		.p2align 2,,3
 16089              		.global	DM42_Ticker
 16090              		.syntax unified
 16091              		.thumb
 16092              		.thumb_func
 16093              		.fpu fpv4-sp-d16
 16095              	DM42_Ticker:
 16096              	.LFB133:
1976:src/xeq.c     ****     long int f, t;
 16097              		.loc 1 1976 26 is_stmt 1 view -0
 16098              		.cfi_startproc
 16099              		@ args = 0, pretend = 0, frame = 0
 16100              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQQPlfu.s 			page 452


1977:src/xeq.c     ****     t = get_rtc_ticks();
 16101              		.loc 1 1977 5 view .LVU4195
1978:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16102              		.loc 1 1978 5 view .LVU4196
1976:src/xeq.c     ****     long int f, t;
 16103              		.loc 1 1976 26 is_stmt 0 view .LVU4197
 16104 0000 08B5     		push	{r3, lr}
 16105              		.cfi_def_cfa_offset 8
 16106              		.cfi_offset 3, -8
 16107              		.cfi_offset 14, -4
1978:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16108              		.loc 1 1978 9 view .LVU4198
 16109 0002 044B     		ldr	r3, .L1143
 16110 0004 9847     		blx	r3
 16111              	.LVL1171:
1979:src/xeq.c     ****     return f;
 16112              		.loc 1 1979 5 is_stmt 1 view .LVU4199
1980:src/xeq.c     ****  }
 16113              		.loc 1 1980 5 view .LVU4200
1979:src/xeq.c     ****     return f;
 16114              		.loc 1 1979 13 is_stmt 0 view .LVU4201
 16115 0006 C0F31300 		ubfx	r0, r0, #0, #20
 16116              	.LVL1172:
1979:src/xeq.c     ****     return f;
 16117              		.loc 1 1979 23 view .LVU4202
 16118 000a 00EB8000 		add	r0, r0, r0, lsl #2
1981:src/xeq.c     **** #endif
 16119              		.loc 1 1981 2 view .LVU4203
 16120 000e C009     		lsrs	r0, r0, #7
 16121 0010 08BD     		pop	{r3, pc}
 16122              	.L1144:
 16123 0012 00BF     		.align	2
 16124              	.L1143:
 16125 0014 B9040008 		.word	134218937
 16126              		.cfi_endproc
 16127              	.LFE133:
 16129              		.section	.text.op_ticks,"ax",%progbits
 16130              		.align	1
 16131              		.p2align 2,,3
 16132              		.global	op_ticks
 16133              		.syntax unified
 16134              		.thumb
 16135              		.thumb_func
 16136              		.fpu fpv4-sp-d16
 16138              	op_ticks:
 16139              	.LVL1173:
 16140              	.LFB134:
1984:src/xeq.c     **** #if !defined(CONSOLE)
 16141              		.loc 1 1984 30 is_stmt 1 view -0
 16142              		.cfi_startproc
 16143              		@ args = 0, pretend = 0, frame = 0
 16144              		@ frame_needed = 0, uses_anonymous_args = 0
1986:src/xeq.c     **** #else 
 16145              		.loc 1 1986 5 view .LVU4205
 16146              	.LBB2806:
 16147              	.LBI2806:
1976:src/xeq.c     ****     long int f, t;
ARM GAS  /tmp/ccQQPlfu.s 			page 453


 16148              		.loc 1 1976 11 view .LVU4206
 16149              	.LBB2807:
1977:src/xeq.c     ****     t = get_rtc_ticks();
 16150              		.loc 1 1977 5 view .LVU4207
1978:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16151              		.loc 1 1978 5 view .LVU4208
 16152              	.LBE2807:
 16153              	.LBE2806:
1984:src/xeq.c     **** #if !defined(CONSOLE)
 16154              		.loc 1 1984 30 is_stmt 0 view .LVU4209
 16155 0000 00B5     		push	{lr}
 16156              		.cfi_def_cfa_offset 4
 16157              		.cfi_offset 14, -4
 16158              	.LBB2811:
 16159              	.LBB2808:
1978:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16160              		.loc 1 1978 9 view .LVU4210
 16161 0002 084B     		ldr	r3, .L1147
 16162              	.LBE2808:
 16163              	.LBE2811:
1984:src/xeq.c     **** #if !defined(CONSOLE)
 16164              		.loc 1 1984 30 view .LVU4211
 16165 0004 83B0     		sub	sp, sp, #12
 16166              		.cfi_def_cfa_offset 16
 16167              	.LBB2812:
 16168              	.LBB2809:
1978:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16169              		.loc 1 1978 9 view .LVU4212
 16170 0006 9847     		blx	r3
 16171              	.LVL1174:
1979:src/xeq.c     ****     return f;
 16172              		.loc 1 1979 5 is_stmt 1 view .LVU4213
1980:src/xeq.c     ****  }
 16173              		.loc 1 1980 5 view .LVU4214
1980:src/xeq.c     ****  }
 16174              		.loc 1 1980 5 is_stmt 0 view .LVU4215
 16175              	.LBE2809:
 16176              	.LBE2812:
 16177              	.LBB2813:
 16178              	.LBI2813:
1503:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16179              		.loc 1 1503 6 is_stmt 1 view .LVU4216
 16180              	.LBB2814:
1504:src/xeq.c     **** }
 16181              		.loc 1 1504 2 view .LVU4217
 16182              	.LBE2814:
 16183              	.LBE2813:
 16184              	.LBB2816:
 16185              	.LBB2810:
1979:src/xeq.c     ****     return f;
 16186              		.loc 1 1979 13 is_stmt 0 view .LVU4218
 16187 0008 C0F31300 		ubfx	r0, r0, #0, #20
 16188              	.LVL1175:
1979:src/xeq.c     ****     return f;
 16189              		.loc 1 1979 23 view .LVU4219
 16190 000c 00EB8000 		add	r0, r0, r0, lsl #2
1979:src/xeq.c     ****     return f;
ARM GAS  /tmp/ccQQPlfu.s 			page 454


 16191              		.loc 1 1979 7 view .LVU4220
 16192 0010 C209     		lsrs	r2, r0, #7
 16193              	.LBE2810:
 16194              	.LBE2816:
 16195              	.LBB2817:
 16196              	.LBB2815:
1504:src/xeq.c     **** }
 16197              		.loc 1 1504 2 view .LVU4221
 16198 0012 0021     		movs	r1, #0
 16199 0014 D317     		asrs	r3, r2, #31
 16200 0016 0091     		str	r1, [sp]
 16201 0018 6420     		movs	r0, #100
 16202 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 16203              	.LVL1176:
1504:src/xeq.c     **** }
 16204              		.loc 1 1504 2 view .LVU4222
 16205              	.LBE2815:
 16206              	.LBE2817:
1994:src/xeq.c     **** 
 16207              		.loc 1 1994 1 view .LVU4223
 16208 001e 03B0     		add	sp, sp, #12
 16209              		.cfi_def_cfa_offset 4
 16210              		@ sp needed
 16211 0020 5DF804FB 		ldr	pc, [sp], #4
 16212              	.L1148:
 16213              		.align	2
 16214              	.L1147:
 16215 0024 B9040008 		.word	134218937
 16216              		.cfi_endproc
 16217              	.LFE134:
 16219              		.section	.text.op_voltage,"ax",%progbits
 16220              		.align	1
 16221              		.p2align 2,,3
 16222              		.global	op_voltage
 16223              		.syntax unified
 16224              		.thumb
 16225              		.thumb_func
 16226              		.fpu fpv4-sp-d16
 16228              	op_voltage:
 16229              	.LVL1177:
 16230              	.LFB135:
1997:src/xeq.c     **** 	decNumber t, u;
 16231              		.loc 1 1997 32 is_stmt 1 view -0
 16232              		.cfi_startproc
 16233              		@ args = 0, pretend = 0, frame = 72
 16234              		@ frame_needed = 0, uses_anonymous_args = 0
1998:src/xeq.c     **** #ifdef REALBUILD
 16235              		.loc 1 1998 2 view .LVU4225
2002:src/xeq.c     **** 	v = v / 100;
 16236              		.loc 1 2002 2 view .LVU4226
1997:src/xeq.c     **** 	decNumber t, u;
 16237              		.loc 1 1997 32 is_stmt 0 view .LVU4227
 16238 0000 00B5     		push	{lr}
 16239              		.cfi_def_cfa_offset 4
 16240              		.cfi_offset 14, -4
2002:src/xeq.c     **** 	v = v / 100;
 16241              		.loc 1 2002 10 view .LVU4228
ARM GAS  /tmp/ccQQPlfu.s 			page 455


 16242 0002 154B     		ldr	r3, .L1153
1997:src/xeq.c     **** 	decNumber t, u;
 16243              		.loc 1 1997 32 view .LVU4229
 16244 0004 95B0     		sub	sp, sp, #84
 16245              		.cfi_def_cfa_offset 88
2002:src/xeq.c     **** 	v = v / 100;
 16246              		.loc 1 2002 10 view .LVU4230
 16247 0006 9847     		blx	r3
 16248              	.LVL1178:
2008:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16249              		.loc 1 2008 6 view .LVU4231
 16250 0008 144B     		ldr	r3, .L1153+4
2003:src/xeq.c     **** #else
 16251              		.loc 1 2003 4 view .LVU4232
 16252 000a 154A     		ldr	r2, .L1153+8
2008:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16253              		.loc 1 2008 6 view .LVU4233
 16254 000c 1B68     		ldr	r3, [r3]
 16255              	.LVL1179:
2003:src/xeq.c     **** #else
 16256              		.loc 1 2003 2 is_stmt 1 view .LVU4234
2008:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16257              		.loc 1 2008 6 is_stmt 0 view .LVU4235
 16258 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2003:src/xeq.c     **** #else
 16259              		.loc 1 2003 4 view .LVU4236
 16260 0012 82FB0012 		smull	r1, r2, r2, r0
2008:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16261              		.loc 1 2008 5 view .LVU4237
 16262 0016 DB07     		lsls	r3, r3, #31
2003:src/xeq.c     **** #else
 16263              		.loc 1 2003 4 view .LVU4238
 16264 0018 4FEAE070 		asr	r0, r0, #31
 16265              	.LVL1180:
2003:src/xeq.c     **** #else
 16266              		.loc 1 2003 4 view .LVU4239
 16267 001c C0EB6212 		rsb	r2, r0, r2, asr #5
 16268              	.LVL1181:
2008:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16269              		.loc 1 2008 2 is_stmt 1 view .LVU4240
2008:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16270              		.loc 1 2008 5 is_stmt 0 view .LVU4241
 16271 0020 08D5     		bpl	.L1150
2009:src/xeq.c     **** 	} else {
 16272              		.loc 1 2009 3 is_stmt 1 view .LVU4242
 16273              	.LVL1182:
 16274              	.LBB2818:
 16275              	.LBI2818:
1503:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16276              		.loc 1 1503 6 view .LVU4243
 16277              	.LBB2819:
1504:src/xeq.c     **** }
 16278              		.loc 1 1504 2 view .LVU4244
 16279 0022 0023     		movs	r3, #0
 16280 0024 0093     		str	r3, [sp]
 16281 0026 6420     		movs	r0, #100
 16282 0028 D317     		asrs	r3, r2, #31
ARM GAS  /tmp/ccQQPlfu.s 			page 456


 16283 002a FFF7FEFF 		bl	set_reg_n_int_sgn
 16284              	.LVL1183:
1504:src/xeq.c     **** }
 16285              		.loc 1 1504 2 is_stmt 0 view .LVU4245
 16286              	.LBE2819:
 16287              	.LBE2818:
2015:src/xeq.c     **** 
 16288              		.loc 1 2015 1 view .LVU4246
 16289 002e 15B0     		add	sp, sp, #84
 16290              		.cfi_remember_state
 16291              		.cfi_def_cfa_offset 4
 16292              		@ sp needed
 16293 0030 5DF804FB 		ldr	pc, [sp], #4
 16294              	.LVL1184:
 16295              	.L1150:
 16296              		.cfi_restore_state
2011:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
 16297              		.loc 1 2011 3 is_stmt 1 view .LVU4247
 16298 0034 D317     		asrs	r3, r2, #31
 16299 0036 02A8     		add	r0, sp, #8
 16300 0038 FFF7FEFF 		bl	ullint_to_dn
 16301              	.LVL1185:
2012:src/xeq.c     **** 		setX(&u);
 16302              		.loc 1 2012 3 view .LVU4248
 16303 003c 02A9     		add	r1, sp, #8
 16304 003e 4FF0FF32 		mov	r2, #-1
 16305 0042 0BA8     		add	r0, sp, #44
 16306 0044 FFF7FEFF 		bl	dn_mulpow10
 16307              	.LVL1186:
2013:src/xeq.c     **** 	}
 16308              		.loc 1 2013 3 view .LVU4249
 16309              	.LBB2820:
 16310              	.LBI2820:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 16311              		.loc 1 822 6 view .LVU4250
 16312              	.LBB2821:
 823:src/xeq.c     **** }
 16313              		.loc 1 823 2 view .LVU4251
 16314 0048 0BA9     		add	r1, sp, #44
 16315              	.LVL1187:
 823:src/xeq.c     **** }
 16316              		.loc 1 823 2 is_stmt 0 view .LVU4252
 16317 004a 6420     		movs	r0, #100
 16318 004c FFF7FEFF 		bl	setRegister
 16319              	.LVL1188:
 823:src/xeq.c     **** }
 16320              		.loc 1 823 2 view .LVU4253
 16321              	.LBE2821:
 16322              	.LBE2820:
2015:src/xeq.c     **** 
 16323              		.loc 1 2015 1 view .LVU4254
 16324 0050 15B0     		add	sp, sp, #84
 16325              		.cfi_def_cfa_offset 4
 16326              		@ sp needed
 16327 0052 5DF804FB 		ldr	pc, [sp], #4
 16328              	.L1154:
 16329 0056 00BF     		.align	2
ARM GAS  /tmp/ccQQPlfu.s 			page 457


 16330              	.L1153:
 16331 0058 F1020008 		.word	134218481
 16332 005c 00000000 		.word	main_ram
 16333 0060 1F85EB51 		.word	1374389535
 16334              		.cfi_endproc
 16335              	.LFE135:
 16337              		.section	.text.free_mem,"ax",%progbits
 16338              		.align	1
 16339              		.p2align 2,,3
 16340              		.global	free_mem
 16341              		.syntax unified
 16342              		.thumb
 16343              		.thumb_func
 16344              		.fpu fpv4-sp-d16
 16346              	free_mem:
 16347              	.LFB136:
2020:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 16348              		.loc 1 2020 20 is_stmt 1 view -0
 16349              		.cfi_startproc
 16350              		@ args = 0, pretend = 0, frame = 0
 16351              		@ frame_needed = 0, uses_anonymous_args = 0
 16352              		@ link register save eliminated.
2021:src/xeq.c     **** }
 16353              		.loc 1 2021 2 view .LVU4256
2021:src/xeq.c     **** }
 16354              		.loc 1 2021 22 is_stmt 0 view .LVU4257
 16355 0000 034A     		ldr	r2, .L1156
2021:src/xeq.c     **** }
 16356              		.loc 1 2021 20 view .LVU4258
 16357 0002 044B     		ldr	r3, .L1156+4
2021:src/xeq.c     **** }
 16358              		.loc 1 2021 22 view .LVU4259
 16359 0004 1268     		ldr	r2, [r2]
2021:src/xeq.c     **** }
 16360              		.loc 1 2021 20 view .LVU4260
 16361 0006 1B68     		ldr	r3, [r3]
2021:src/xeq.c     **** }
 16362              		.loc 1 2021 22 view .LVU4261
 16363 0008 B2F9E207 		ldrsh	r0, [r2, #2018]
2022:src/xeq.c     **** 
 16364              		.loc 1 2022 1 view .LVU4262
 16365 000c 1844     		add	r0, r0, r3
 16366 000e 7047     		bx	lr
 16367              	.L1157:
 16368              		.align	2
 16369              	.L1156:
 16370 0010 00000000 		.word	main_ram
 16371 0014 00000000 		.word	RetStkSize
 16372              		.cfi_endproc
 16373              	.LFE136:
 16375              		.section	.text.free_flash,"ax",%progbits
 16376              		.align	1
 16377              		.p2align 2,,3
 16378              		.global	free_flash
 16379              		.syntax unified
 16380              		.thumb
 16381              		.thumb_func
ARM GAS  /tmp/ccQQPlfu.s 			page 458


 16382              		.fpu fpv4-sp-d16
 16384              	free_flash:
 16385              	.LFB137:
2024:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 16386              		.loc 1 2024 22 is_stmt 1 view -0
 16387              		.cfi_startproc
 16388              		@ args = 0, pretend = 0, frame = 0
 16389              		@ frame_needed = 0, uses_anonymous_args = 0
 16390              		@ link register save eliminated.
2025:src/xeq.c     **** }
 16391              		.loc 1 2025 2 view .LVU4264
2025:src/xeq.c     **** }
 16392              		.loc 1 2025 38 is_stmt 0 view .LVU4265
 16393 0000 034B     		ldr	r3, .L1159
 16394 0002 1B68     		ldr	r3, [r3]
 16395 0004 5888     		ldrh	r0, [r3, #2]
2026:src/xeq.c     **** 
 16396              		.loc 1 2026 1 view .LVU4266
 16397 0006 C0F5FF50 		rsb	r0, r0, #8160
 16398 000a 1E30     		adds	r0, r0, #30
 16399 000c 7047     		bx	lr
 16400              	.L1160:
 16401 000e 00BF     		.align	2
 16402              	.L1159:
 16403 0010 00000000 		.word	library_ram
 16404              		.cfi_endproc
 16405              	.LFE137:
 16407              		.section	.text.get_mem,"ax",%progbits
 16408              		.align	1
 16409              		.p2align 2,,3
 16410              		.global	get_mem
 16411              		.syntax unified
 16412              		.thumb
 16413              		.thumb_func
 16414              		.fpu fpv4-sp-d16
 16416              	get_mem:
 16417              	.LVL1189:
 16418              	.LFB138:
2028:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16419              		.loc 1 2028 29 is_stmt 1 view -0
 16420              		.cfi_startproc
 16421              		@ args = 0, pretend = 0, frame = 0
 16422              		@ frame_needed = 0, uses_anonymous_args = 0
2029:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16423              		.loc 1 2029 2 view .LVU4268
2028:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16424              		.loc 1 2028 29 is_stmt 0 view .LVU4269
 16425 0000 00B5     		push	{lr}
 16426              		.cfi_def_cfa_offset 4
 16427              		.cfi_offset 14, -4
2029:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16428              		.loc 1 2029 2 view .LVU4270
 16429 0002 A928     		cmp	r0, #169
2028:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16430              		.loc 1 2028 29 view .LVU4271
 16431 0004 83B0     		sub	sp, sp, #12
 16432              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccQQPlfu.s 			page 459


2029:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16433              		.loc 1 2029 2 view .LVU4272
 16434 0006 23D0     		beq	.L1170
2029:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16435              		.loc 1 2029 2 discriminator 2 view .LVU4273
 16436 0008 AA28     		cmp	r0, #170
 16437 000a 18D0     		beq	.L1171
2029:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16438              		.loc 1 2029 2 discriminator 5 view .LVU4274
 16439 000c AC28     		cmp	r0, #172
 16440 000e 3CD0     		beq	.L1172
 16441              	.LBB2822:
 16442              	.LBI2822:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 16443              		.loc 1 253 14 is_stmt 1 view .LVU4275
 16444              	.LBE2822:
 254:src/xeq.c     **** }
 16445              		.loc 1 254 2 view .LVU4276
 16446              	.LVL1190:
 16447              	.LBB2831:
 16448              	.LBB2823:
 16449              	.LBI2823:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 16450              		.loc 1 241 14 view .LVU4277
 16451              	.LBB2824:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 16452              		.loc 1 242 2 view .LVU4278
 16453              	.LBB2825:
 16454              	.LBI2825:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 16455              		.loc 1 1112 5 view .LVU4279
 16456              	.LBB2826:
1113:src/xeq.c     **** }
 16457              		.loc 1 1113 2 view .LVU4280
1113:src/xeq.c     **** }
 16458              		.loc 1 1113 12 is_stmt 0 view .LVU4281
 16459 0010 224B     		ldr	r3, .L1174
 16460 0012 1A68     		ldr	r2, [r3]
1113:src/xeq.c     **** }
 16461              		.loc 1 1113 24 view .LVU4282
 16462 0014 B2F8E817 		ldrh	r1, [r2, #2024]
 16463              	.LBE2826:
 16464              	.LBE2825:
 16465              	.LBB2828:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16466              		.loc 1 243 24 view .LVU4283
 16467 0018 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 16468              	.LBE2828:
 16469              	.LBB2829:
 16470              	.LBB2827:
1113:src/xeq.c     **** }
 16471              		.loc 1 1113 24 view .LVU4284
 16472 001c 44F20103 		movw	r3, #16385
 16473              	.LBE2827:
 16474              	.LBE2829:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 16475              		.loc 1 242 5 view .LVU4285
ARM GAS  /tmp/ccQQPlfu.s 			page 460


 16476 0020 0B40     		ands	r3, r3, r1
 16477 0022 B3F5804F 		cmp	r3, #16384
 16478              	.LBB2830:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16479              		.loc 1 243 3 is_stmt 1 view .LVU4286
 16480              	.LVL1191:
 244:src/xeq.c     **** 	}
 16481              		.loc 1 244 3 view .LVU4287
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16482              		.loc 1 243 13 is_stmt 0 view .LVU4288
 16483 0026 04BF     		itt	eq
 16484 0028 0C3A     		subeq	r2, r2, #12
 16485              	.LVL1192:
 244:src/xeq.c     **** 	}
 16486              		.loc 1 244 67 view .LVU4289
 16487 002a 5210     		asreq	r2, r2, #1
 16488              	.LBE2830:
 247:src/xeq.c     **** }
 16489              		.loc 1 247 3 is_stmt 1 view .LVU4290
 16490 002c 0023     		movs	r3, #0
 16491              	.LVL1193:
 16492              	.L1163:
 247:src/xeq.c     **** }
 16493              		.loc 1 247 3 is_stmt 0 view .LVU4291
 16494              	.LBE2824:
 16495              	.LBE2823:
 16496              	.LBE2831:
 16497              	.LBB2832:
 16498              	.LBI2832:
1503:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16499              		.loc 1 1503 6 is_stmt 1 discriminator 10 view .LVU4292
 16500              	.LBB2833:
1504:src/xeq.c     **** }
 16501              		.loc 1 1504 2 discriminator 10 view .LVU4293
 16502 002e 0021     		movs	r1, #0
 16503 0030 0091     		str	r1, [sp]
 16504 0032 6420     		movs	r0, #100
 16505 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 16506              	.LVL1194:
1504:src/xeq.c     **** }
 16507              		.loc 1 1504 2 is_stmt 0 discriminator 10 view .LVU4294
 16508              	.LBE2833:
 16509              	.LBE2832:
2034:src/xeq.c     **** 
 16510              		.loc 1 2034 1 discriminator 10 view .LVU4295
 16511 0038 03B0     		add	sp, sp, #12
 16512              		.cfi_remember_state
 16513              		.cfi_def_cfa_offset 4
 16514              		@ sp needed
 16515 003a 5DF804FB 		ldr	pc, [sp], #4
 16516              	.LVL1195:
 16517              	.L1171:
 16518              		.cfi_restore_state
 16519              	.LBB2834:
 16520              	.LBI2834:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 16521              		.loc 1 233 5 is_stmt 1 view .LVU4296
ARM GAS  /tmp/ccQQPlfu.s 			page 461


 16522              	.LBE2834:
 234:src/xeq.c     **** }
 16523              		.loc 1 234 2 view .LVU4297
 16524              	.LBB2855:
 16525              	.LBB2835:
 16526              	.LBI2835:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 16527              		.loc 1 225 5 view .LVU4298
 16528              	.LBB2836:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16529              		.loc 1 226 2 view .LVU4299
 16530              	.LBB2837:
 16531              	.LBI2837:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 16532              		.loc 1 1112 5 view .LVU4300
 16533              	.LBB2838:
1113:src/xeq.c     **** }
 16534              		.loc 1 1113 2 view .LVU4301
1113:src/xeq.c     **** }
 16535              		.loc 1 1113 12 is_stmt 0 view .LVU4302
 16536 003e 174B     		ldr	r3, .L1174
 16537 0040 1B68     		ldr	r3, [r3]
 16538              	.LVL1196:
1113:src/xeq.c     **** }
 16539              		.loc 1 1113 12 view .LVU4303
 16540              	.LBE2838:
 16541              	.LBE2837:
 227:src/xeq.c     **** }
 16542              		.loc 1 227 2 is_stmt 1 view .LVU4304
 16543              	.LBB2841:
 16544              	.LBI2841:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 16545              		.loc 1 217 5 view .LVU4305
 16546              	.LBB2842:
 218:src/xeq.c     **** }
 16547              		.loc 1 218 2 view .LVU4306
 218:src/xeq.c     **** }
 16548              		.loc 1 218 9 is_stmt 0 view .LVU4307
 16549 0042 B3F9DE27 		ldrsh	r2, [r3, #2014]
 218:src/xeq.c     **** }
 16550              		.loc 1 218 57 view .LVU4308
 16551 0046 002A     		cmp	r2, #0
 16552 0048 0BDB     		blt	.L1173
 16553 004a 0022     		movs	r2, #0
 16554 004c 0023     		movs	r3, #0
 16555              	.LVL1197:
 218:src/xeq.c     **** }
 16556              		.loc 1 218 57 view .LVU4309
 16557 004e EEE7     		b	.L1163
 16558              	.LVL1198:
 16559              	.L1170:
 218:src/xeq.c     **** }
 16560              		.loc 1 218 57 view .LVU4310
 16561              	.LBE2842:
 16562              	.LBE2841:
 16563              	.LBE2836:
 16564              	.LBE2835:
ARM GAS  /tmp/ccQQPlfu.s 			page 462


 16565              	.LBE2855:
 16566              	.LBB2856:
 16567              	.LBI2856:
2020:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 16568              		.loc 1 2020 5 is_stmt 1 view .LVU4311
 16569              	.LBB2857:
2021:src/xeq.c     **** }
 16570              		.loc 1 2021 2 view .LVU4312
2021:src/xeq.c     **** }
 16571              		.loc 1 2021 22 is_stmt 0 view .LVU4313
 16572 0050 124A     		ldr	r2, .L1174
2021:src/xeq.c     **** }
 16573              		.loc 1 2021 20 view .LVU4314
 16574 0052 134B     		ldr	r3, .L1174+4
2021:src/xeq.c     **** }
 16575              		.loc 1 2021 22 view .LVU4315
 16576 0054 1268     		ldr	r2, [r2]
2021:src/xeq.c     **** }
 16577              		.loc 1 2021 20 view .LVU4316
 16578 0056 1B68     		ldr	r3, [r3]
2021:src/xeq.c     **** }
 16579              		.loc 1 2021 22 view .LVU4317
 16580 0058 B2F9E227 		ldrsh	r2, [r2, #2018]
2021:src/xeq.c     **** }
 16581              		.loc 1 2021 20 view .LVU4318
 16582 005c 1A44     		add	r2, r2, r3
 16583 005e 0023     		movs	r3, #0
 16584              	.LBE2857:
 16585              	.LBE2856:
 16586 0060 E5E7     		b	.L1163
 16587              	.LVL1199:
 16588              	.L1173:
 16589              	.LBB2858:
 16590              	.LBB2854:
 16591              	.LBB2853:
 16592              	.LBB2847:
 16593              	.LBB2839:
1113:src/xeq.c     **** }
 16594              		.loc 1 1113 24 view .LVU4319
 16595 0062 B3F8E807 		ldrh	r0, [r3, #2024]
 16596              	.LVL1200:
1113:src/xeq.c     **** }
 16597              		.loc 1 1113 24 view .LVU4320
 16598              	.LBE2839:
 16599              	.LBE2847:
 16600              	.LBB2848:
 16601              	.LBB2843:
 218:src/xeq.c     **** }
 16602              		.loc 1 218 25 view .LVU4321
 16603 0066 0F49     		ldr	r1, .L1174+8
 16604              	.LBE2843:
 16605              	.LBE2848:
 16606              	.LBB2849:
 16607              	.LBB2840:
1113:src/xeq.c     **** }
 16608              		.loc 1 1113 24 view .LVU4322
 16609 0068 44F20103 		movw	r3, #16385
ARM GAS  /tmp/ccQQPlfu.s 			page 463


 16610              	.LVL1201:
1113:src/xeq.c     **** }
 16611              		.loc 1 1113 24 view .LVU4323
 16612              	.LBE2840:
 16613              	.LBE2849:
 16614              	.LBB2850:
 16615              	.LBB2844:
 218:src/xeq.c     **** }
 16616              		.loc 1 218 25 view .LVU4324
 16617 006c 0968     		ldr	r1, [r1]
 16618              	.LBE2844:
 16619              	.LBE2850:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16620              		.loc 1 226 73 view .LVU4325
 16621 006e 0340     		ands	r3, r3, r0
 16622 0070 A3F58043 		sub	r3, r3, #16384
 16623              	.LBB2851:
 16624              	.LBB2845:
 218:src/xeq.c     **** }
 16625              		.loc 1 218 57 view .LVU4326
 16626 0074 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 16627              	.LBE2845:
 16628              	.LBE2851:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16629              		.loc 1 226 73 view .LVU4327
 16630 0078 B3FA83F3 		clz	r3, r3
 16631 007c 5B09     		lsrs	r3, r3, #5
 16632 007e 0233     		adds	r3, r3, #2
 16633              	.LBB2852:
 16634              	.LBB2846:
 218:src/xeq.c     **** }
 16635              		.loc 1 218 57 view .LVU4328
 16636 0080 C2F30B02 		ubfx	r2, r2, #0, #12
 16637 0084 1A41     		asrs	r2, r2, r3
 16638 0086 D317     		asrs	r3, r2, #31
 16639 0088 D1E7     		b	.L1163
 16640              	.LVL1202:
 16641              	.L1172:
 218:src/xeq.c     **** }
 16642              		.loc 1 218 57 view .LVU4329
 16643              	.LBE2846:
 16644              	.LBE2852:
 16645              	.LBE2853:
 16646              	.LBE2854:
 16647              	.LBE2858:
 16648              	.LBB2859:
 16649              	.LBI2859:
2024:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 16650              		.loc 1 2024 5 is_stmt 1 view .LVU4330
 16651              	.LBB2860:
2025:src/xeq.c     **** }
 16652              		.loc 1 2025 2 view .LVU4331
2025:src/xeq.c     **** }
 16653              		.loc 1 2025 38 is_stmt 0 view .LVU4332
 16654 008a 074B     		ldr	r3, .L1174+12
 16655 008c 1B68     		ldr	r3, [r3]
 16656 008e 5A88     		ldrh	r2, [r3, #2]
ARM GAS  /tmp/ccQQPlfu.s 			page 464


2025:src/xeq.c     **** }
 16657              		.loc 1 2025 27 view .LVU4333
 16658 0090 C2F5FF52 		rsb	r2, r2, #8160
 16659 0094 1E32     		adds	r2, r2, #30
 16660 0096 0023     		movs	r3, #0
 16661              	.LBE2860:
 16662              	.LBE2859:
 16663 0098 C9E7     		b	.L1163
 16664              	.L1175:
 16665 009a 00BF     		.align	2
 16666              	.L1174:
 16667 009c 00000000 		.word	main_ram
 16668 00a0 00000000 		.word	RetStkSize
 16669 00a4 00000000 		.word	RetStk
 16670 00a8 00000000 		.word	library_ram
 16671              		.cfi_endproc
 16672              	.LFE138:
 16674              		.section	.text.cmdputkey,"ax",%progbits
 16675              		.align	1
 16676              		.p2align 2,,3
 16677              		.global	cmdputkey
 16678              		.syntax unified
 16679              		.thumb
 16680              		.thumb_func
 16681              		.fpu fpv4-sp-d16
 16683              	cmdputkey:
 16684              	.LVL1203:
 16685              	.LFB141:
2069:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16686              		.loc 1 2069 1 is_stmt 1 view -0
 16687              		.cfi_startproc
 16688              		@ args = 0, pretend = 0, frame = 0
 16689              		@ frame_needed = 0, uses_anonymous_args = 0
2070:src/xeq.c     **** 
 16690              		.loc 1 2070 2 view .LVU4335
2069:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16691              		.loc 1 2069 1 is_stmt 0 view .LVU4336
 16692 0000 10B5     		push	{r4, lr}
 16693              		.cfi_def_cfa_offset 8
 16694              		.cfi_offset 4, -8
 16695              		.cfi_offset 14, -4
2070:src/xeq.c     **** 
 16696              		.loc 1 2070 16 view .LVU4337
 16697 0002 FFF7FEFF 		bl	get_keycode_from_reg
 16698              	.LVL1204:
2072:src/xeq.c     **** 		set_running_off();
 16699              		.loc 1 2072 2 is_stmt 1 view .LVU4338
2072:src/xeq.c     **** 		set_running_off();
 16700              		.loc 1 2072 5 is_stmt 0 view .LVU4339
 16701 0006 041E     		subs	r4, r0, #0
 16702 0008 00DA     		bge	.L1179
2076:src/xeq.c     **** 
 16703              		.loc 1 2076 1 view .LVU4340
 16704 000a 10BD     		pop	{r4, pc}
 16705              	.L1179:
2073:src/xeq.c     **** 		put_key(c);
 16706              		.loc 1 2073 3 is_stmt 1 view .LVU4341
ARM GAS  /tmp/ccQQPlfu.s 			page 465


 16707              	.LBB2861:
 16708              	.LBI2861:
5802:src/xeq.c     **** 	set_running_off_sst();
 16709              		.loc 1 5802 6 view .LVU4342
 16710              	.LBB2862:
5803:src/xeq.c     **** 	State.entryp = 0;
 16711              		.loc 1 5803 2 view .LVU4343
 16712              	.LBB2863:
 16713              	.LBI2863:
5794:src/xeq.c     **** 	Running = 0;
 16714              		.loc 1 5794 6 view .LVU4344
 16715              	.LBB2864:
5795:src/xeq.c     **** }
 16716              		.loc 1 5795 2 view .LVU4345
 16717              	.LBE2864:
 16718              	.LBE2863:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 16719              		.loc 1 5804 15 is_stmt 0 view .LVU4346
 16720 000c 094B     		ldr	r3, .L1180
 16721              	.LBB2867:
 16722              	.LBB2865:
5795:src/xeq.c     **** }
 16723              		.loc 1 5795 10 view .LVU4347
 16724 000e 0A4A     		ldr	r2, .L1180+4
 16725              	.LBE2865:
 16726              	.LBE2867:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 16727              		.loc 1 5804 15 view .LVU4348
 16728 0010 1B68     		ldr	r3, [r3]
 16729              	.LBB2868:
 16730              	.LBB2866:
5795:src/xeq.c     **** }
 16731              		.loc 1 5795 10 view .LVU4349
 16732 0012 0021     		movs	r1, #0
 16733 0014 1160     		str	r1, [r2]
 16734              	.LBE2866:
 16735              	.LBE2868:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 16736              		.loc 1 5804 2 is_stmt 1 view .LVU4350
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 16737              		.loc 1 5804 15 is_stmt 0 view .LVU4351
 16738 0016 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 16739 001a 61F30412 		bfi	r2, r1, #4, #1
 16740              		.loc 1 5805 2 view .LVU4352
 16741 001e 8A20     		movs	r0, #138
 16742              	.LVL1205:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 16743              		.loc 1 5804 15 view .LVU4353
 16744 0020 83F8DD27 		strb	r2, [r3, #2013]
 16745              		.loc 1 5805 2 is_stmt 1 view .LVU4354
 16746 0024 FFF7FEFF 		bl	dot
 16747              	.LVL1206:
 16748              	.LBE2862:
 16749              	.LBE2861:
2074:src/xeq.c     **** 	}
 16750              		.loc 1 2074 3 view .LVU4355
 16751 0028 2046     		mov	r0, r4
ARM GAS  /tmp/ccQQPlfu.s 			page 466


2076:src/xeq.c     **** 
 16752              		.loc 1 2076 1 is_stmt 0 view .LVU4356
 16753 002a BDE81040 		pop	{r4, lr}
 16754              		.cfi_restore 14
 16755              		.cfi_restore 4
 16756              		.cfi_def_cfa_offset 0
 16757              	.LVL1207:
2074:src/xeq.c     **** 	}
 16758              		.loc 1 2074 3 view .LVU4357
 16759 002e FFF7FEBF 		b	put_key
 16760              	.LVL1208:
 16761              	.L1181:
2074:src/xeq.c     **** 	}
 16762              		.loc 1 2074 3 view .LVU4358
 16763 0032 00BF     		.align	2
 16764              	.L1180:
 16765 0034 00000000 		.word	main_ram
 16766 0038 00000000 		.word	Running
 16767              		.cfi_endproc
 16768              	.LFE141:
 16770              		.section	.text.cmdkeytype,"ax",%progbits
 16771              		.align	1
 16772              		.p2align 2,,3
 16773              		.global	cmdkeytype
 16774              		.syntax unified
 16775              		.thumb
 16776              		.thumb_func
 16777              		.fpu fpv4-sp-d16
 16779              	cmdkeytype:
 16780              	.LVL1209:
 16781              	.LFB142:
2084:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16782              		.loc 1 2084 1 is_stmt 1 view -0
 16783              		.cfi_startproc
 16784              		@ args = 0, pretend = 0, frame = 48
 16785              		@ frame_needed = 0, uses_anonymous_args = 0
2085:src/xeq.c     **** 	if ( c >= 0 ) {
 16786              		.loc 1 2085 2 view .LVU4360
2084:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16787              		.loc 1 2084 1 is_stmt 0 view .LVU4361
 16788 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 16789              		.cfi_def_cfa_offset 20
 16790              		.cfi_offset 4, -20
 16791              		.cfi_offset 5, -16
 16792              		.cfi_offset 6, -12
 16793              		.cfi_offset 7, -8
 16794              		.cfi_offset 14, -4
 16795 0002 8FB0     		sub	sp, sp, #60
 16796              		.cfi_def_cfa_offset 80
2085:src/xeq.c     **** 	if ( c >= 0 ) {
 16797              		.loc 1 2085 16 view .LVU4362
 16798 0004 FFF7FEFF 		bl	get_keycode_from_reg
 16799              	.LVL1210:
2086:src/xeq.c     **** 		const char types[] = {
 16800              		.loc 1 2086 2 is_stmt 1 view .LVU4363
2086:src/xeq.c     **** 		const char types[] = {
 16801              		.loc 1 2086 5 is_stmt 0 view .LVU4364
ARM GAS  /tmp/ccQQPlfu.s 			page 467


 16802 0008 061E     		subs	r6, r0, #0
 16803 000a 17DB     		blt	.L1182
 16804              	.LBB2869:
2087:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16805              		.loc 1 2087 3 is_stmt 1 view .LVU4365
2087:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16806              		.loc 1 2087 14 is_stmt 0 view .LVU4366
 16807 000c 0E4D     		ldr	r5, .L1190
 16808              	.LBB2870:
 16809              	.LBB2871:
 16810              	.LBB2872:
 16811              	.LBB2873:
 738:src/xeq.c     **** }
 16812              		.loc 1 738 15 view .LVU4367
 16813 000e 0F4F     		ldr	r7, .L1190+4
 16814              	.LBE2873:
 16815              	.LBE2872:
 16816              	.LBE2871:
 16817              	.LBE2870:
2087:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16818              		.loc 1 2087 14 view .LVU4368
 16819 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 16820              	.LVL1211:
2087:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16821              		.loc 1 2087 14 view .LVU4369
 16822 0012 03AC     		add	r4, sp, #12
 16823 0014 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 16824 0016 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 16825 0018 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 16826 001a 95E80700 		ldm	r5, {r0, r1, r2}
 16827              	.LBB2882:
 16828              	.LBB2878:
 16829              	.LBB2876:
 16830              	.LBB2874:
 738:src/xeq.c     **** }
 16831              		.loc 1 738 15 view .LVU4370
 16832 001e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 16833              	.LBE2874:
 16834              	.LBE2876:
 16835              	.LBE2878:
 16836              	.LBE2882:
2087:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16837              		.loc 1 2087 14 view .LVU4371
 16838 0020 03C4     		stmia	r4!, {r0, r1}
 16839              	.LBB2883:
 16840              	.LBB2879:
 742:src/xeq.c     **** 		lift();
 16841              		.loc 1 742 5 view .LVU4372
 16842 0022 5B06     		lsls	r3, r3, #25
 16843              	.LBE2879:
 16844              	.LBE2883:
2087:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16845              		.loc 1 2087 14 view .LVU4373
 16846 0024 2270     		strb	r2, [r4]
2095:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
 16847              		.loc 1 2095 3 is_stmt 1 view .LVU4374
 16848              	.LBB2884:
ARM GAS  /tmp/ccQQPlfu.s 			page 468


 16849              	.LBI2870:
 741:src/xeq.c     **** 	if (get_lift())
 16850              		.loc 1 741 6 view .LVU4375
 16851              	.LBB2880:
 742:src/xeq.c     **** 		lift();
 16852              		.loc 1 742 2 view .LVU4376
 16853              	.LBB2877:
 16854              	.LBI2872:
 737:src/xeq.c     **** 	return State2.state_lift;
 16855              		.loc 1 737 12 view .LVU4377
 16856              	.LBB2875:
 738:src/xeq.c     **** }
 16857              		.loc 1 738 2 view .LVU4378
 16858              	.LBE2875:
 16859              	.LBE2877:
 742:src/xeq.c     **** 		lift();
 16860              		.loc 1 742 5 is_stmt 0 view .LVU4379
 16861 0026 0BD4     		bmi	.L1189
 16862              	.L1184:
 16863              	.LBE2880:
 16864              	.LBE2884:
2096:src/xeq.c     **** 	}
 16865              		.loc 1 2096 3 is_stmt 1 view .LVU4380
 16866              	.LVL1212:
 16867              	.LBB2885:
 16868              	.LBI2885:
1503:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16869              		.loc 1 1503 6 view .LVU4381
 16870              	.LBB2886:
1504:src/xeq.c     **** }
 16871              		.loc 1 1504 2 view .LVU4382
 16872              	.LBE2886:
 16873              	.LBE2885:
2096:src/xeq.c     **** 	}
 16874              		.loc 1 2096 21 is_stmt 0 view .LVU4383
 16875 0028 0EAB     		add	r3, sp, #56
 16876 002a 9819     		adds	r0, r3, r6
 16877              	.LBB2888:
 16878              	.LBB2887:
1504:src/xeq.c     **** }
 16879              		.loc 1 1504 2 view .LVU4384
 16880 002c 0021     		movs	r1, #0
 16881 002e 10F82C2C 		ldrb	r2, [r0, #-44]	@ zero_extendqisi2
 16882 0032 0091     		str	r1, [sp]
 16883              	.LVL1213:
1504:src/xeq.c     **** }
 16884              		.loc 1 1504 2 view .LVU4385
 16885 0034 0023     		movs	r3, #0
 16886 0036 6420     		movs	r0, #100
 16887 0038 FFF7FEFF 		bl	set_reg_n_int_sgn
 16888              	.LVL1214:
 16889              	.L1182:
1504:src/xeq.c     **** }
 16890              		.loc 1 1504 2 view .LVU4386
 16891              	.LBE2887:
 16892              	.LBE2888:
 16893              	.LBE2869:
ARM GAS  /tmp/ccQQPlfu.s 			page 469


2098:src/xeq.c     **** 
 16894              		.loc 1 2098 1 view .LVU4387
 16895 003c 0FB0     		add	sp, sp, #60
 16896              		.cfi_remember_state
 16897              		.cfi_def_cfa_offset 20
 16898              		@ sp needed
 16899 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 16900              	.LVL1215:
 16901              	.L1189:
 16902              		.cfi_restore_state
 16903              	.LBB2890:
 16904              	.LBB2889:
 16905              	.LBB2881:
 743:src/xeq.c     **** }
 16906              		.loc 1 743 3 is_stmt 1 view .LVU4388
 16907 0040 FFF7FEFF 		bl	lift
 16908              	.LVL1216:
 16909 0044 F0E7     		b	.L1184
 16910              	.L1191:
 16911 0046 00BF     		.align	2
 16912              	.L1190:
 16913 0048 00000000 		.word	.LANCHOR5
 16914 004c 00000000 		.word	StateWhileOn
 16915              	.LBE2881:
 16916              	.LBE2889:
 16917              	.LBE2890:
 16918              		.cfi_endproc
 16919              	.LFE142:
 16921              		.section	.rodata.op_query_xtal.str1.4,"aMS",%progbits,1
 16922              		.align	2
 16923              	.LC2:
 16924 0000 74727565 		.ascii	"true\000"
 16924      00
 16925              		.section	.text.op_query_xtal,"ax",%progbits
 16926              		.align	1
 16927              		.p2align 2,,3
 16928              		.global	op_query_xtal
 16929              		.syntax unified
 16930              		.thumb
 16931              		.thumb_func
 16932              		.fpu fpv4-sp-d16
 16934              	op_query_xtal:
 16935              	.LVL1217:
 16936              	.LFB145:
2118:src/xeq.c     **** 	fin_tst(Xtal);
 16937              		.loc 1 2118 35 view -0
 16938              		.cfi_startproc
 16939              		@ args = 0, pretend = 0, frame = 0
 16940              		@ frame_needed = 0, uses_anonymous_args = 0
 16941              		@ link register save eliminated.
2119:src/xeq.c     **** }
 16942              		.loc 1 2119 2 view .LVU4390
 16943              	.LBB2891:
 16944              	.LBI2891:
2563:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 16945              		.loc 1 2563 6 view .LVU4391
 16946              	.LBB2892:
ARM GAS  /tmp/ccQQPlfu.s 			page 470


2564:src/xeq.c     **** 	if (Running || XromRunning) {
 16947              		.loc 1 2564 2 view .LVU4392
2565:src/xeq.c     **** 		if (! a && incpc())
 16948              		.loc 1 2565 2 view .LVU4393
2565:src/xeq.c     **** 		if (! a && incpc())
 16949              		.loc 1 2565 6 is_stmt 0 view .LVU4394
 16950 0000 044A     		ldr	r2, .L1194
2565:src/xeq.c     **** 		if (! a && incpc())
 16951              		.loc 1 2565 14 view .LVU4395
 16952 0002 054B     		ldr	r3, .L1194+4
 16953 0004 1268     		ldr	r2, [r2]
 16954 0006 1B68     		ldr	r3, [r3]
 16955 0008 1343     		orrs	r3, r2, r3
 16956 000a 02D1     		bne	.L1192
2570:src/xeq.c     **** #ifdef INFRARED
 16957              		.loc 1 2570 3 is_stmt 1 view .LVU4396
2570:src/xeq.c     **** #ifdef INFRARED
 16958              		.loc 1 2570 11 is_stmt 0 view .LVU4397
 16959 000c 034B     		ldr	r3, .L1194+8
 16960 000e 044A     		ldr	r2, .L1194+12
 16961 0010 1A60     		str	r2, [r3]
 16962              	.LVL1218:
 16963              	.L1192:
2570:src/xeq.c     **** #ifdef INFRARED
 16964              		.loc 1 2570 11 view .LVU4398
 16965              	.LBE2892:
 16966              	.LBE2891:
2120:src/xeq.c     **** 
 16967              		.loc 1 2120 1 view .LVU4399
 16968 0012 7047     		bx	lr
 16969              	.L1195:
 16970              		.align	2
 16971              	.L1194:
 16972 0014 00000000 		.word	Running
 16973 0018 00000000 		.word	XromRunning
 16974 001c 00000000 		.word	DispMsg
 16975 0020 00000000 		.word	.LC2
 16976              		.cfi_endproc
 16977              	.LFE145:
 16979              		.section	.rodata.op_query_print.str1.4,"aMS",%progbits,1
 16980              		.align	2
 16981              	.LC3:
 16982 0000 66616C73 		.ascii	"false\000"
 16982      6500
 16983              		.section	.text.op_query_print,"ax",%progbits
 16984              		.align	1
 16985              		.p2align 2,,3
 16986              		.global	op_query_print
 16987              		.syntax unified
 16988              		.thumb
 16989              		.thumb_func
 16990              		.fpu fpv4-sp-d16
 16992              	op_query_print:
 16993              	.LVL1219:
 16994              	.LFB146:
2122:src/xeq.c     **** #ifdef INFRARED
 16995              		.loc 1 2122 36 is_stmt 1 view -0
ARM GAS  /tmp/ccQQPlfu.s 			page 471


 16996              		.cfi_startproc
 16997              		@ args = 0, pretend = 0, frame = 0
 16998              		@ frame_needed = 0, uses_anonymous_args = 0
 16999              		@ link register save eliminated.
2126:src/xeq.c     **** #endif
 17000              		.loc 1 2126 2 view .LVU4401
 17001              	.LBB2893:
 17002              	.LBI2893:
2563:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 17003              		.loc 1 2563 6 view .LVU4402
 17004              	.LBB2894:
2564:src/xeq.c     **** 	if (Running || XromRunning) {
 17005              		.loc 1 2564 2 view .LVU4403
2565:src/xeq.c     **** 		if (! a && incpc())
 17006              		.loc 1 2565 2 view .LVU4404
2565:src/xeq.c     **** 		if (! a && incpc())
 17007              		.loc 1 2565 6 is_stmt 0 view .LVU4405
 17008 0000 054A     		ldr	r2, .L1199
2565:src/xeq.c     **** 		if (! a && incpc())
 17009              		.loc 1 2565 14 view .LVU4406
 17010 0002 064B     		ldr	r3, .L1199+4
 17011 0004 1268     		ldr	r2, [r2]
 17012 0006 1B68     		ldr	r3, [r3]
 17013 0008 1343     		orrs	r3, r2, r3
 17014 000a 03D1     		bne	.L1198
2570:src/xeq.c     **** #ifdef INFRARED
 17015              		.loc 1 2570 3 is_stmt 1 view .LVU4407
2570:src/xeq.c     **** #ifdef INFRARED
 17016              		.loc 1 2570 11 is_stmt 0 view .LVU4408
 17017 000c 044B     		ldr	r3, .L1199+8
 17018 000e 054A     		ldr	r2, .L1199+12
 17019 0010 1A60     		str	r2, [r3]
 17020              	.LVL1220:
2570:src/xeq.c     **** #ifdef INFRARED
 17021              		.loc 1 2570 11 view .LVU4409
 17022              	.LBE2894:
 17023              	.LBE2893:
2128:src/xeq.c     **** 
 17024              		.loc 1 2128 1 view .LVU4410
 17025 0012 7047     		bx	lr
 17026              	.LVL1221:
 17027              	.L1198:
 17028              	.LBB2896:
 17029              	.LBB2895:
2566:src/xeq.c     **** 			decpc();
 17030              		.loc 1 2566 3 is_stmt 1 view .LVU4411
 17031 0014 FFF7FEBF 		b	fin_tst.part.0
 17032              	.LVL1222:
 17033              	.L1200:
2566:src/xeq.c     **** 			decpc();
 17034              		.loc 1 2566 3 is_stmt 0 view .LVU4412
 17035              		.align	2
 17036              	.L1199:
 17037 0018 00000000 		.word	Running
 17038 001c 00000000 		.word	XromRunning
 17039 0020 00000000 		.word	DispMsg
 17040 0024 00000000 		.word	.LC3
ARM GAS  /tmp/ccQQPlfu.s 			page 472


 17041              	.LBE2895:
 17042              	.LBE2896:
 17043              		.cfi_endproc
 17044              	.LFE146:
 17046              		.section	.text.cmdstostk,"ax",%progbits
 17047              		.align	1
 17048              		.p2align 2,,3
 17049              		.global	cmdstostk
 17050              		.syntax unified
 17051              		.thumb
 17052              		.thumb_func
 17053              		.fpu fpv4-sp-d16
 17055              	cmdstostk:
 17056              	.LVL1223:
 17057              	.LFB148:
2141:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17058              		.loc 1 2141 48 is_stmt 1 view -0
 17059              		.cfi_startproc
 17060              		@ args = 0, pretend = 0, frame = 0
 17061              		@ frame_needed = 0, uses_anonymous_args = 0
2142:src/xeq.c     **** 
 17062              		.loc 1 2142 2 view .LVU4414
2141:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17063              		.loc 1 2141 48 is_stmt 0 view .LVU4415
 17064 0000 70B5     		push	{r4, r5, r6, lr}
 17065              		.cfi_def_cfa_offset 16
 17066              		.cfi_offset 4, -16
 17067              		.cfi_offset 5, -12
 17068              		.cfi_offset 6, -8
 17069              		.cfi_offset 14, -4
2141:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17070              		.loc 1 2141 48 view .LVU4416
 17071 0002 0546     		mov	r5, r0
2142:src/xeq.c     **** 
 17072              		.loc 1 2142 13 view .LVU4417
 17073 0004 FFF7FEFF 		bl	check_stack_overlap
 17074              	.LVL1224:
2144:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17075              		.loc 1 2144 2 is_stmt 1 view .LVU4418
2144:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17076              		.loc 1 2144 12 view .LVU4419
2144:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17077              		.loc 1 2144 2 is_stmt 0 view .LVU4420
 17078 0008 031E     		subs	r3, r0, #0
 17079 000a 0ADD     		ble	.L1201
 17080 000c 2C46     		mov	r4, r5
 17081 000e C4F16406 		rsb	r6, r4, #100
 17082 0012 1D44     		add	r5, r5, r3
 17083              	.LVL1225:
 17084              	.L1203:
2145:src/xeq.c     **** }
 17085              		.loc 1 2145 3 is_stmt 1 discriminator 3 view .LVU4421
 17086 0014 3119     		adds	r1, r6, r4
 17087 0016 2046     		mov	r0, r4
 17088 0018 0134     		adds	r4, r4, #1
 17089              	.LVL1226:
2145:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 473


 17090              		.loc 1 2145 3 is_stmt 0 discriminator 3 view .LVU4422
 17091 001a FFF7FEFF 		bl	copyreg_n
 17092              	.LVL1227:
2144:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17093              		.loc 1 2144 17 is_stmt 1 discriminator 3 view .LVU4423
2144:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17094              		.loc 1 2144 12 discriminator 3 view .LVU4424
2144:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17095              		.loc 1 2144 2 is_stmt 0 discriminator 3 view .LVU4425
 17096 001e AC42     		cmp	r4, r5
 17097 0020 F8D1     		bne	.L1203
 17098              	.L1201:
2146:src/xeq.c     **** 
 17099              		.loc 1 2146 1 view .LVU4426
 17100 0022 70BD     		pop	{r4, r5, r6, pc}
 17101              		.cfi_endproc
 17102              	.LFE148:
 17104              		.section	.text.cmdrclstk,"ax",%progbits
 17105              		.align	1
 17106              		.p2align 2,,3
 17107              		.global	cmdrclstk
 17108              		.syntax unified
 17109              		.thumb
 17110              		.thumb_func
 17111              		.fpu fpv4-sp-d16
 17113              	cmdrclstk:
 17114              	.LVL1228:
 17115              	.LFB149:
2148:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17116              		.loc 1 2148 48 is_stmt 1 view -0
 17117              		.cfi_startproc
 17118              		@ args = 0, pretend = 0, frame = 0
 17119              		@ frame_needed = 0, uses_anonymous_args = 0
2149:src/xeq.c     **** 
 17120              		.loc 1 2149 2 view .LVU4428
2148:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17121              		.loc 1 2148 48 is_stmt 0 view .LVU4429
 17122 0000 70B5     		push	{r4, r5, r6, lr}
 17123              		.cfi_def_cfa_offset 16
 17124              		.cfi_offset 4, -16
 17125              		.cfi_offset 5, -12
 17126              		.cfi_offset 6, -8
 17127              		.cfi_offset 14, -4
2148:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17128              		.loc 1 2148 48 view .LVU4430
 17129 0002 0646     		mov	r6, r0
2149:src/xeq.c     **** 
 17130              		.loc 1 2149 13 view .LVU4431
 17131 0004 FFF7FEFF 		bl	check_stack_overlap
 17132              	.LVL1229:
2151:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17133              		.loc 1 2151 2 is_stmt 1 view .LVU4432
2151:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17134              		.loc 1 2151 12 view .LVU4433
2151:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17135              		.loc 1 2151 2 is_stmt 0 view .LVU4434
 17136 0008 051E     		subs	r5, r0, #0
ARM GAS  /tmp/ccQQPlfu.s 			page 474


 17137 000a 09DD     		ble	.L1206
 17138 000c 6435     		adds	r5, r5, #100
 17139 000e 643E     		subs	r6, r6, #100
 17140              	.LVL1230:
2151:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17141              		.loc 1 2151 2 view .LVU4435
 17142 0010 6424     		movs	r4, #100
 17143              	.LVL1231:
 17144              	.L1208:
2152:src/xeq.c     **** }
 17145              		.loc 1 2152 3 is_stmt 1 discriminator 3 view .LVU4436
 17146 0012 3119     		adds	r1, r6, r4
 17147 0014 2046     		mov	r0, r4
 17148 0016 0134     		adds	r4, r4, #1
 17149              	.LVL1232:
2152:src/xeq.c     **** }
 17150              		.loc 1 2152 3 is_stmt 0 discriminator 3 view .LVU4437
 17151 0018 FFF7FEFF 		bl	copyreg_n
 17152              	.LVL1233:
2151:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17153              		.loc 1 2151 17 is_stmt 1 discriminator 3 view .LVU4438
2151:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17154              		.loc 1 2151 12 discriminator 3 view .LVU4439
2151:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17155              		.loc 1 2151 2 is_stmt 0 discriminator 3 view .LVU4440
 17156 001c AC42     		cmp	r4, r5
 17157 001e F8D1     		bne	.L1208
 17158              	.LVL1234:
 17159              	.L1206:
2153:src/xeq.c     **** 
 17160              		.loc 1 2153 1 view .LVU4441
 17161 0020 70BD     		pop	{r4, r5, r6, pc}
 17162              		.cfi_endproc
 17163              	.LFE149:
 17165 0022 00BF     		.section	.text.find_opcode_from,"ax",%progbits
 17166              		.align	1
 17167              		.p2align 2,,3
 17168              		.global	find_opcode_from
 17169              		.syntax unified
 17170              		.thumb
 17171              		.thumb_func
 17172              		.fpu fpv4-sp-d16
 17174              	find_opcode_from:
 17175              	.LVL1235:
 17176              	.LFB151:
2186:src/xeq.c     **** 	unsigned short int top;
 17177              		.loc 1 2186 81 is_stmt 1 view -0
 17178              		.cfi_startproc
 17179              		@ args = 0, pretend = 0, frame = 8
 17180              		@ frame_needed = 0, uses_anonymous_args = 0
2186:src/xeq.c     **** 	unsigned short int top;
 17181              		.loc 1 2186 81 is_stmt 0 view .LVU4443
 17182 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 17183              		.cfi_def_cfa_offset 24
 17184              		.cfi_offset 4, -24
 17185              		.cfi_offset 5, -20
 17186              		.cfi_offset 6, -16
ARM GAS  /tmp/ccQQPlfu.s 			page 475


 17187              		.cfi_offset 7, -12
 17188              		.cfi_offset 8, -8
 17189              		.cfi_offset 14, -4
2189:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 17190              		.loc 1 2189 12 view .LVU4444
 17191 0004 02F00207 		and	r7, r2, #2
2186:src/xeq.c     **** 	unsigned short int top;
 17192              		.loc 1 2186 81 view .LVU4445
 17193 0008 82B0     		sub	sp, sp, #8
 17194              		.cfi_def_cfa_offset 32
2186:src/xeq.c     **** 	unsigned short int top;
 17195              		.loc 1 2186 81 view .LVU4446
 17196 000a 9046     		mov	r8, r2
 17197 000c 0E46     		mov	r6, r1
2192:src/xeq.c     **** 	count -= top;
 17198              		.loc 1 2192 14 view .LVU4447
 17199 000e 0DF10602 		add	r2, sp, #6
 17200              	.LVL1236:
2192:src/xeq.c     **** 	count -= top;
 17201              		.loc 1 2192 14 view .LVU4448
 17202 0012 3946     		mov	r1, r7
 17203              	.LVL1237:
2186:src/xeq.c     **** 	unsigned short int top;
 17204              		.loc 1 2186 81 view .LVU4449
 17205 0014 0446     		mov	r4, r0
2187:src/xeq.c     **** 	int count;
 17206              		.loc 1 2187 2 is_stmt 1 view .LVU4450
2188:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
 17207              		.loc 1 2188 2 view .LVU4451
2189:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 17208              		.loc 1 2189 2 view .LVU4452
 17209              	.LVL1238:
2190:src/xeq.c     **** 
 17210              		.loc 1 2190 2 view .LVU4453
2192:src/xeq.c     **** 	count -= top;
 17211              		.loc 1 2192 2 view .LVU4454
2192:src/xeq.c     **** 	count -= top;
 17212              		.loc 1 2192 14 is_stmt 0 view .LVU4455
 17213 0016 FFF7FEFF 		bl	find_section_bounds
 17214              	.LVL1239:
2193:src/xeq.c     **** 	while (count--) {
 17215              		.loc 1 2193 8 view .LVU4456
 17216 001a BDF80650 		ldrh	r5, [sp, #6]
2192:src/xeq.c     **** 	count -= top;
 17217              		.loc 1 2192 8 view .LVU4457
 17218 001e 0130     		adds	r0, r0, #1
 17219              	.LVL1240:
2193:src/xeq.c     **** 	while (count--) {
 17220              		.loc 1 2193 2 is_stmt 1 view .LVU4458
2194:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17221              		.loc 1 2194 2 view .LVU4459
2194:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17222              		.loc 1 2194 8 view .LVU4460
2194:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17223              		.loc 1 2194 8 is_stmt 0 view .LVU4461
 17224 0020 451B     		subs	r5, r0, r5
 17225              	.LVL1241:
ARM GAS  /tmp/ccQQPlfu.s 			page 476


2194:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17226              		.loc 1 2194 8 view .LVU4462
 17227 0022 05D1     		bne	.L1214
 17228 0024 10E0     		b	.L1212
 17229              	.LVL1242:
 17230              	.L1222:
2200:src/xeq.c     **** 	}
 17231              		.loc 1 2200 8 view .LVU4463
 17232 0026 FFF7FEFF 		bl	do_inc
 17233              	.LVL1243:
2194:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17234              		.loc 1 2194 8 view .LVU4464
 17235 002a 013D     		subs	r5, r5, #1
 17236              	.LVL1244:
2200:src/xeq.c     **** 	}
 17237              		.loc 1 2200 8 view .LVU4465
 17238 002c 0446     		mov	r4, r0
 17239              	.LVL1245:
2194:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17240              		.loc 1 2194 8 is_stmt 1 view .LVU4466
2194:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17241              		.loc 1 2194 8 is_stmt 0 view .LVU4467
 17242 002e 0BD0     		beq	.L1212
 17243              	.LVL1246:
 17244              	.L1214:
2198:src/xeq.c     **** 			return pc;
 17245              		.loc 1 2198 3 is_stmt 1 view .LVU4468
2198:src/xeq.c     **** 			return pc;
 17246              		.loc 1 2198 7 is_stmt 0 view .LVU4469
 17247 0030 2046     		mov	r0, r4
 17248 0032 FFF7FEFF 		bl	getprog
 17249              	.LVL1247:
2200:src/xeq.c     **** 	}
 17250              		.loc 1 2200 3 is_stmt 1 view .LVU4470
2198:src/xeq.c     **** 			return pc;
 17251              		.loc 1 2198 7 is_stmt 0 view .LVU4471
 17252 0036 0346     		mov	r3, r0
2198:src/xeq.c     **** 			return pc;
 17253              		.loc 1 2198 6 view .LVU4472
 17254 0038 B342     		cmp	r3, r6
2200:src/xeq.c     **** 	}
 17255              		.loc 1 2200 8 view .LVU4473
 17256 003a 3946     		mov	r1, r7
 17257 003c 2046     		mov	r0, r4
2198:src/xeq.c     **** 			return pc;
 17258              		.loc 1 2198 6 view .LVU4474
 17259 003e F2D1     		bne	.L1222
 17260              	.LVL1248:
 17261              	.L1211:
2205:src/xeq.c     **** 
 17262              		.loc 1 2205 1 view .LVU4475
 17263 0040 2046     		mov	r0, r4
 17264 0042 02B0     		add	sp, sp, #8
 17265              		.cfi_remember_state
 17266              		.cfi_def_cfa_offset 24
 17267              		@ sp needed
 17268 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  /tmp/ccQQPlfu.s 			page 477


 17269              	.LVL1249:
 17270              	.L1212:
 17271              		.cfi_restore_state
2202:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17272              		.loc 1 2202 2 is_stmt 1 view .LVU4476
2202:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17273              		.loc 1 2202 5 is_stmt 0 view .LVU4477
 17274 0048 18F00104 		ands	r4, r8, #1
 17275 004c F8D0     		beq	.L1211
 17276              	.LBB2903:
 17277              	.LBI2903:
2186:src/xeq.c     **** 	unsigned short int top;
 17278              		.loc 1 2186 14 is_stmt 1 view .LVU4478
 17279              	.LVL1250:
 17280              	.LBB2904:
2203:src/xeq.c     **** 	return 0;
 17281              		.loc 1 2203 3 view .LVU4479
 17282              	.LBB2905:
 17283              	.LBI2905:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17284              		.loc 1 540 5 view .LVU4480
 17285              	.LBB2906:
 541:src/xeq.c     **** 		Error = e;
 17286              		.loc 1 541 2 view .LVU4481
 541:src/xeq.c     **** 		Error = e;
 17287              		.loc 1 541 12 is_stmt 0 view .LVU4482
 17288 004e 074B     		ldr	r3, .L1223
 541:src/xeq.c     **** 		Error = e;
 17289              		.loc 1 541 5 view .LVU4483
 17290 0050 1C68     		ldr	r4, [r3]
 17291 0052 2CB9     		cbnz	r4, .L1216
 17292              	.LVL1251:
 17293              	.LBB2907:
 17294              	.LBI2907:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17295              		.loc 1 540 5 is_stmt 1 view .LVU4484
 17296              	.LBB2908:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 17297              		.loc 1 542 3 view .LVU4485
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 17298              		.loc 1 542 9 is_stmt 0 view .LVU4486
 17299 0054 0622     		movs	r2, #6
 17300              	.LBE2908:
 17301              	.LBE2907:
 17302              	.LBE2906:
 17303              	.LBE2905:
 17304              	.LBE2904:
 17305              	.LBE2903:
2205:src/xeq.c     **** 
 17306              		.loc 1 2205 1 view .LVU4487
 17307 0056 2046     		mov	r0, r4
 17308              	.LBB2914:
 17309              	.LBB2913:
 17310              	.LBB2912:
 17311              	.LBB2911:
 17312              	.LBB2910:
 17313              	.LBB2909:
ARM GAS  /tmp/ccQQPlfu.s 			page 478


 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 17314              		.loc 1 542 9 view .LVU4488
 17315 0058 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 17316              		.loc 1 543 3 is_stmt 1 view .LVU4489
 17317              	.LBE2909:
 17318              	.LBE2910:
 17319              	.LBE2911:
 17320              	.LBE2912:
 17321              	.LBE2913:
 17322              	.LBE2914:
2205:src/xeq.c     **** 
 17323              		.loc 1 2205 1 is_stmt 0 view .LVU4490
 17324 005a 02B0     		add	sp, sp, #8
 17325              		.cfi_remember_state
 17326              		.cfi_def_cfa_offset 24
 17327              		@ sp needed
 17328 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17329              	.LVL1252:
 17330              	.L1216:
 17331              		.cfi_restore_state
2204:src/xeq.c     **** }
 17332              		.loc 1 2204 9 view .LVU4491
 17333 0060 0024     		movs	r4, #0
 17334              	.LVL1253:
2205:src/xeq.c     **** 
 17335              		.loc 1 2205 1 view .LVU4492
 17336 0062 2046     		mov	r0, r4
 17337 0064 02B0     		add	sp, sp, #8
 17338              		.cfi_def_cfa_offset 24
 17339              		@ sp needed
 17340 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17341              	.LVL1254:
 17342              	.L1224:
2205:src/xeq.c     **** 
 17343              		.loc 1 2205 1 view .LVU4493
 17344 006a 00BF     		.align	2
 17345              	.L1223:
 17346 006c 00000000 		.word	Error
 17347              		.cfi_endproc
 17348              	.LFE151:
 17350              		.section	.text.find_label_from,"ax",%progbits
 17351              		.align	1
 17352              		.p2align 2,,3
 17353              		.global	find_label_from
 17354              		.syntax unified
 17355              		.thumb
 17356              		.thumb_func
 17357              		.fpu fpv4-sp-d16
 17359              	find_label_from:
 17360              	.LVL1255:
 17361              	.LFB152:
2208:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 17362              		.loc 1 2208 76 is_stmt 1 view -0
 17363              		.cfi_startproc
 17364              		@ args = 0, pretend = 0, frame = 0
 17365              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQQPlfu.s 			page 479


 17366              		@ link register save eliminated.
2209:src/xeq.c     **** }
 17367              		.loc 1 2209 2 view .LVU4495
2209:src/xeq.c     **** }
 17368              		.loc 1 2209 9 is_stmt 0 view .LVU4496
 17369 0000 41F4C441 		orr	r1, r1, #25088
 17370              	.LVL1256:
2209:src/xeq.c     **** }
 17371              		.loc 1 2209 9 view .LVU4497
 17372 0004 FFF7FEBF 		b	find_opcode_from
 17373              	.LVL1257:
2209:src/xeq.c     **** }
 17374              		.loc 1 2209 9 view .LVU4498
 17375              		.cfi_endproc
 17376              	.LFE152:
 17378              		.section	.text.op_rtn,"ax",%progbits
 17379              		.align	1
 17380              		.p2align 2,,3
 17381              		.global	op_rtn
 17382              		.syntax unified
 17383              		.thumb
 17384              		.thumb_func
 17385              		.fpu fpv4-sp-d16
 17387              	op_rtn:
 17388              	.LVL1258:
 17389              	.LFB155:
2267:src/xeq.c     **** 	if (! Running && ! XromRunning) {
 17390              		.loc 1 2267 28 is_stmt 1 view -0
 17391              		.cfi_startproc
 17392              		@ args = 0, pretend = 0, frame = 0
 17393              		@ frame_needed = 0, uses_anonymous_args = 0
 17394              		@ link register save eliminated.
2268:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17395              		.loc 1 2268 2 view .LVU4500
2268:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17396              		.loc 1 2268 6 is_stmt 0 view .LVU4501
 17397 0000 074A     		ldr	r2, .L1229
2268:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17398              		.loc 1 2268 19 view .LVU4502
 17399 0002 084B     		ldr	r3, .L1229+4
2268:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17400              		.loc 1 2268 16 view .LVU4503
 17401 0004 1268     		ldr	r2, [r2]
 17402 0006 1B68     		ldr	r3, [r3]
 17403 0008 1343     		orrs	r3, r2, r3
 17404 000a 06D0     		beq	.L1228
2273:src/xeq.c     **** }
 17405              		.loc 1 2273 3 is_stmt 1 view .LVU4504
 17406 000c A0F13900 		sub	r0, #57
 17407              	.LVL1259:
2273:src/xeq.c     **** }
 17408              		.loc 1 2273 3 is_stmt 0 view .LVU4505
 17409 0010 B0FA80F0 		clz	r0, r0
 17410 0014 4009     		lsrs	r0, r0, #5
 17411 0016 FFF7FEBF 		b	do_rtn
 17412              	.LVL1260:
 17413              	.L1228:
ARM GAS  /tmp/ccQQPlfu.s 			page 480


2270:src/xeq.c     **** 	}
 17414              		.loc 1 2270 3 is_stmt 1 view .LVU4506
 17415 001a FFF7FEBF 		b	clrretstk_pc
 17416              	.LVL1261:
 17417              	.L1230:
2270:src/xeq.c     **** 	}
 17418              		.loc 1 2270 3 is_stmt 0 view .LVU4507
 17419 001e 00BF     		.align	2
 17420              	.L1229:
 17421 0020 00000000 		.word	Running
 17422 0024 00000000 		.word	XromRunning
 17423              		.cfi_endproc
 17424              	.LFE155:
 17426              		.section	.text.op_popusr,"ax",%progbits
 17427              		.align	1
 17428              		.p2align 2,,3
 17429              		.global	op_popusr
 17430              		.syntax unified
 17431              		.thumb
 17432              		.thumb_func
 17433              		.fpu fpv4-sp-d16
 17435              	op_popusr:
 17436              	.LVL1262:
 17437              	.LFB159:
2314:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 17438              		.loc 1 2314 31 is_stmt 1 view -0
 17439              		.cfi_startproc
 17440              		@ args = 0, pretend = 0, frame = 0
 17441              		@ frame_needed = 0, uses_anonymous_args = 0
 17442              		@ link register save eliminated.
2315:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17443              		.loc 1 2315 2 view .LVU4509
2315:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17444              		.loc 1 2315 25 is_stmt 0 view .LVU4510
 17445 0000 134A     		ldr	r2, .L1233
2315:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17446              		.loc 1 2315 24 view .LVU4511
 17447 0002 144B     		ldr	r3, .L1233+4
2315:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17448              		.loc 1 2315 25 view .LVU4512
 17449 0004 1268     		ldr	r2, [r2]
2315:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17450              		.loc 1 2315 24 view .LVU4513
 17451 0006 1B68     		ldr	r3, [r3]
2314:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 17452              		.loc 1 2314 31 view .LVU4514
 17453 0008 70B4     		push	{r4, r5, r6}
 17454              		.cfi_def_cfa_offset 12
 17455              		.cfi_offset 4, -12
 17456              		.cfi_offset 5, -8
 17457              		.cfi_offset 6, -4
2315:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17458              		.loc 1 2315 25 view .LVU4515
 17459 000a B2F9E257 		ldrsh	r5, [r2, #2018]
2317:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17460              		.loc 1 2317 13 view .LVU4516
 17461 000e 124E     		ldr	r6, .L1233+8
ARM GAS  /tmp/ccQQPlfu.s 			page 481


2315:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17462              		.loc 1 2315 34 view .LVU4517
 17463 0010 A9B2     		uxth	r1, r5
 17464 0012 4C1C     		adds	r4, r1, #1
 17465 0014 24B2     		sxth	r4, r4
2316:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17466              		.loc 1 2316 34 view .LVU4518
 17467 0016 881C     		adds	r0, r1, #2
 17468              	.LVL1263:
2315:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17469              		.loc 1 2315 34 view .LVU4519
 17470 0018 A2F8E247 		strh	r4, [r2, #2018]	@ movhi
2316:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17471              		.loc 1 2316 34 view .LVU4520
 17472 001c 00B2     		sxth	r0, r0
2315:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17473              		.loc 1 2315 24 view .LVU4521
 17474 001e 33F81550 		ldrh	r5, [r3, r5, lsl #1]
2316:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17475              		.loc 1 2316 34 view .LVU4522
 17476 0022 A2F8E207 		strh	r0, [r2, #2018]	@ movhi
2316:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17477              		.loc 1 2316 24 view .LVU4523
 17478 0026 33F91440 		ldrsh	r4, [r3, r4, lsl #1]
2316:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17479              		.loc 1 2316 12 view .LVU4524
 17480 002a A2F8DE47 		strh	r4, [r2, #2014]	@ movhi
2317:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17481              		.loc 1 2317 34 view .LVU4525
 17482 002e 0331     		adds	r1, r1, #3
 17483 0030 A2F8E217 		strh	r1, [r2, #2018]	@ movhi
2318:src/xeq.c     **** }
 17484              		.loc 1 2318 20 view .LVU4526
 17485 0034 33F81420 		ldrh	r2, [r3, r4, lsl #1]
2315:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17486              		.loc 1 2315 16 view .LVU4527
 17487 0038 0849     		ldr	r1, .L1233+12
2317:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17488              		.loc 1 2317 24 view .LVU4528
 17489 003a 33F81000 		ldrh	r0, [r3, r0, lsl #1]
 17490 003e 3060     		str	r0, [r6]
2318:src/xeq.c     **** }
 17491              		.loc 1 2318 20 view .LVU4529
 17492 0040 22F40052 		bic	r2, r2, #8192
2315:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17493              		.loc 1 2315 24 view .LVU4530
 17494 0044 0D60     		str	r5, [r1]
2316:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17495              		.loc 1 2316 2 is_stmt 1 view .LVU4531
2317:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17496              		.loc 1 2317 2 view .LVU4532
2318:src/xeq.c     **** }
 17497              		.loc 1 2318 2 view .LVU4533
2318:src/xeq.c     **** }
 17498              		.loc 1 2318 20 is_stmt 0 view .LVU4534
 17499 0046 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
2319:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 482


 17500              		.loc 1 2319 1 view .LVU4535
 17501 004a 70BC     		pop	{r4, r5, r6}
 17502              		.cfi_restore 6
 17503              		.cfi_restore 5
 17504              		.cfi_restore 4
 17505              		.cfi_def_cfa_offset 0
 17506 004c 7047     		bx	lr
 17507              	.L1234:
 17508 004e 00BF     		.align	2
 17509              	.L1233:
 17510 0050 00000000 		.word	main_ram
 17511 0054 00000000 		.word	RetStk
 17512 0058 00000000 		.word	XromUserPc
 17513 005c 00000000 		.word	UserLocalRegs
 17514              		.cfi_endproc
 17515              	.LFE159:
 17517              		.section	.text.findmultilbl,"ax",%progbits
 17518              		.align	1
 17519              		.p2align 2,,3
 17520              		.global	findmultilbl
 17521              		.syntax unified
 17522              		.thumb
 17523              		.thumb_func
 17524              		.fpu fpv4-sp-d16
 17526              	findmultilbl:
 17527              	.LVL1264:
 17528              	.LFB163:
2347:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17529              		.loc 1 2347 54 is_stmt 1 view -0
 17530              		.cfi_startproc
 17531              		@ args = 0, pretend = 0, frame = 0
 17532              		@ frame_needed = 0, uses_anonymous_args = 0
2348:src/xeq.c     **** 	unsigned int lbl;
 17533              		.loc 1 2348 2 view .LVU4537
2347:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17534              		.loc 1 2347 54 is_stmt 0 view .LVU4538
 17535 0000 38B5     		push	{r3, r4, r5, lr}
 17536              		.cfi_def_cfa_offset 16
 17537              		.cfi_offset 3, -16
 17538              		.cfi_offset 4, -12
 17539              		.cfi_offset 5, -8
 17540              		.cfi_offset 14, -4
2351:src/xeq.c     **** 	if (lbl == 0)
 17541              		.loc 1 2351 8 view .LVU4539
 17542 0002 0022     		movs	r2, #0
2348:src/xeq.c     **** 	unsigned int lbl;
 17543              		.loc 1 2348 15 view .LVU4540
 17544 0004 20F47064 		bic	r4, r0, #3840
 17545              	.LVL1265:
2349:src/xeq.c     **** 
 17546              		.loc 1 2349 2 is_stmt 1 view .LVU4541
2351:src/xeq.c     **** 	if (lbl == 0)
 17547              		.loc 1 2351 2 view .LVU4542
2347:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17548              		.loc 1 2347 54 is_stmt 0 view .LVU4543
 17549 0008 0D46     		mov	r5, r1
2351:src/xeq.c     **** 	if (lbl == 0)
ARM GAS  /tmp/ccQQPlfu.s 			page 483


 17550              		.loc 1 2351 8 view .LVU4544
 17551 000a 1046     		mov	r0, r2
 17552              	.LVL1266:
2351:src/xeq.c     **** 	if (lbl == 0)
 17553              		.loc 1 2351 8 view .LVU4545
 17554 000c 2146     		mov	r1, r4
 17555              	.LVL1267:
2351:src/xeq.c     **** 	if (lbl == 0)
 17556              		.loc 1 2351 8 view .LVU4546
 17557 000e FFF7FEFF 		bl	find_opcode_from
 17558              	.LVL1268:
2352:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 17559              		.loc 1 2352 2 is_stmt 1 view .LVU4547
2352:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 17560              		.loc 1 2352 5 is_stmt 0 view .LVU4548
 17561 0012 00B1     		cbz	r0, .L1241
 17562              	.L1235:
2359:src/xeq.c     **** 
 17563              		.loc 1 2359 1 view .LVU4549
 17564 0014 38BD     		pop	{r3, r4, r5, pc}
 17565              	.LVL1269:
 17566              	.L1241:
2353:src/xeq.c     **** 	if (lbl == 0)
 17567              		.loc 1 2353 3 is_stmt 1 view .LVU4550
2353:src/xeq.c     **** 	if (lbl == 0)
 17568              		.loc 1 2353 9 is_stmt 0 view .LVU4551
 17569 0016 0246     		mov	r2, r0
 17570 0018 2146     		mov	r1, r4
 17571 001a 4FF48040 		mov	r0, #16384
 17572              	.LVL1270:
2353:src/xeq.c     **** 	if (lbl == 0)
 17573              		.loc 1 2353 9 view .LVU4552
 17574 001e FFF7FEFF 		bl	find_opcode_from
 17575              	.LVL1271:
2354:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 17576              		.loc 1 2354 2 is_stmt 1 view .LVU4553
2354:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 17577              		.loc 1 2354 5 is_stmt 0 view .LVU4554
 17578 0022 0028     		cmp	r0, #0
 17579 0024 F6D1     		bne	.L1235
2355:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17580              		.loc 1 2355 3 is_stmt 1 view .LVU4555
2355:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17581              		.loc 1 2355 9 is_stmt 0 view .LVU4556
 17582 0026 0246     		mov	r2, r0
 17583 0028 2146     		mov	r1, r4
 17584 002a 4FF40040 		mov	r0, #32768
 17585              	.LVL1272:
2355:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17586              		.loc 1 2355 9 view .LVU4557
 17587 002e FFF7FEFF 		bl	find_opcode_from
 17588              	.LVL1273:
2356:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17589              		.loc 1 2356 2 is_stmt 1 view .LVU4558
2356:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17590              		.loc 1 2356 5 is_stmt 0 view .LVU4559
 17591 0032 0028     		cmp	r0, #0
ARM GAS  /tmp/ccQQPlfu.s 			page 484


 17592 0034 EED1     		bne	.L1235
2356:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17593              		.loc 1 2356 15 discriminator 1 view .LVU4560
 17594 0036 EB07     		lsls	r3, r5, #31
 17595 0038 ECD5     		bpl	.L1235
 17596              	.LBB2921:
 17597              	.LBI2921:
2347:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17598              		.loc 1 2347 14 is_stmt 1 view .LVU4561
 17599              	.LVL1274:
 17600              	.LBB2922:
2357:src/xeq.c     **** 	return lbl;
 17601              		.loc 1 2357 3 view .LVU4562
 17602              	.LBB2923:
 17603              	.LBI2923:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17604              		.loc 1 540 5 view .LVU4563
 17605              	.LBB2924:
 541:src/xeq.c     **** 		Error = e;
 17606              		.loc 1 541 2 view .LVU4564
 541:src/xeq.c     **** 		Error = e;
 17607              		.loc 1 541 12 is_stmt 0 view .LVU4565
 17608 003a 034B     		ldr	r3, .L1242
 541:src/xeq.c     **** 		Error = e;
 17609              		.loc 1 541 5 view .LVU4566
 17610 003c 1A68     		ldr	r2, [r3]
 17611 003e 002A     		cmp	r2, #0
 17612 0040 E8D1     		bne	.L1235
 17613              	.LVL1275:
 17614              	.LBB2925:
 17615              	.LBI2925:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17616              		.loc 1 540 5 is_stmt 1 view .LVU4567
 17617              	.LBB2926:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 17618              		.loc 1 542 3 view .LVU4568
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 17619              		.loc 1 542 9 is_stmt 0 view .LVU4569
 17620 0042 0622     		movs	r2, #6
 17621 0044 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 17622              		.loc 1 543 3 is_stmt 1 view .LVU4570
 17623              	.LVL1276:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 17624              		.loc 1 543 3 is_stmt 0 view .LVU4571
 17625              	.LBE2926:
 17626              	.LBE2925:
 17627              	.LBE2924:
 17628              	.LBE2923:
 17629              	.LBE2922:
 17630              	.LBE2921:
2358:src/xeq.c     **** }
 17631              		.loc 1 2358 2 is_stmt 1 view .LVU4572
2359:src/xeq.c     **** 
 17632              		.loc 1 2359 1 is_stmt 0 view .LVU4573
 17633 0046 38BD     		pop	{r3, r4, r5, pc}
 17634              	.LVL1277:
ARM GAS  /tmp/ccQQPlfu.s 			page 485


 17635              	.L1243:
2359:src/xeq.c     **** 
 17636              		.loc 1 2359 1 view .LVU4574
 17637              		.align	2
 17638              	.L1242:
 17639 0048 00000000 		.word	Error
 17640              		.cfi_endproc
 17641              	.LFE163:
 17643              		.section	.text.get_dispmode_digs,"ax",%progbits
 17644              		.align	1
 17645              		.p2align 2,,3
 17646              		.global	get_dispmode_digs
 17647              		.syntax unified
 17648              		.thumb
 17649              		.thumb_func
 17650              		.fpu fpv4-sp-d16
 17652              	get_dispmode_digs:
 17653              	.LVL1278:
 17654              	.LFB170:
2411:src/xeq.c     **** 	int dispmode = UState.dispmode;
 17655              		.loc 1 2411 1 is_stmt 1 view -0
 17656              		.cfi_startproc
 17657              		@ args = 0, pretend = 0, frame = 0
 17658              		@ frame_needed = 0, uses_anonymous_args = 0
 17659              		@ link register save eliminated.
2412:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17660              		.loc 1 2412 2 view .LVU4576
2412:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17661              		.loc 1 2412 17 is_stmt 0 view .LVU4577
 17662 0000 0A4B     		ldr	r3, .L1247
 17663 0002 1A68     		ldr	r2, [r3]
2413:src/xeq.c     **** 
 17664              		.loc 1 2413 23 view .LVU4578
 17665 0004 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
2412:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17666              		.loc 1 2412 23 view .LVU4579
 17667 0008 92F8E627 		ldrb	r2, [r2, #2022]	@ zero_extendqisi2
2413:src/xeq.c     **** 
 17668              		.loc 1 2413 6 view .LVU4580
 17669 000c 03F00F03 		and	r3, r3, #15
2415:src/xeq.c     **** 		dispdigs -= 12;
 17670              		.loc 1 2415 5 view .LVU4581
 17671 0010 0B2B     		cmp	r3, #11
2411:src/xeq.c     **** 	int dispmode = UState.dispmode;
 17672              		.loc 1 2411 1 view .LVU4582
 17673 0012 0146     		mov	r1, r0
2412:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17674              		.loc 1 2412 6 view .LVU4583
 17675 0014 4FEA9210 		lsr	r0, r2, #6
 17676              	.LVL1279:
2413:src/xeq.c     **** 
 17677              		.loc 1 2413 2 is_stmt 1 view .LVU4584
2415:src/xeq.c     **** 		dispdigs -= 12;
 17678              		.loc 1 2415 2 view .LVU4585
2415:src/xeq.c     **** 		dispdigs -= 12;
 17679              		.loc 1 2415 5 is_stmt 0 view .LVU4586
 17680 0018 06DD     		ble	.L1245
ARM GAS  /tmp/ccQQPlfu.s 			page 486


2416:src/xeq.c     **** 		dispmode += 4;
 17681              		.loc 1 2416 3 is_stmt 1 view .LVU4587
 17682              	.LVL1280:
2417:src/xeq.c     **** 		if (dispmode >= 6) {
 17683              		.loc 1 2417 3 view .LVU4588
2417:src/xeq.c     **** 		if (dispmode >= 6) {
 17684              		.loc 1 2417 12 is_stmt 0 view .LVU4589
 17685 001a 021D     		adds	r2, r0, #4
 17686              	.LVL1281:
2418:src/xeq.c     **** 			dispmode -= 2;
 17687              		.loc 1 2418 3 is_stmt 1 view .LVU4590
2418:src/xeq.c     **** 			dispmode -= 2;
 17688              		.loc 1 2418 6 is_stmt 0 view .LVU4591
 17689 001c 052A     		cmp	r2, #5
2416:src/xeq.c     **** 		dispmode += 4;
 17690              		.loc 1 2416 12 view .LVU4592
 17691 001e D9BF     		ittee	le
 17692 0020 0C3B     		suble	r3, r3, #12
 17693              	.LVL1282:
2416:src/xeq.c     **** 		dispmode += 4;
 17694              		.loc 1 2416 12 view .LVU4593
 17695 0022 1046     		movle	r0, r2
2419:src/xeq.c     **** 			dispdigs += 4;
 17696              		.loc 1 2419 4 is_stmt 1 view .LVU4594
2419:src/xeq.c     **** 			dispdigs += 4;
 17697              		.loc 1 2419 13 is_stmt 0 view .LVU4595
 17698 0024 0230     		addgt	r0, r0, #2
 17699              	.LVL1283:
2420:src/xeq.c     **** 		}
 17700              		.loc 1 2420 4 is_stmt 1 view .LVU4596
2420:src/xeq.c     **** 		}
 17701              		.loc 1 2420 13 is_stmt 0 view .LVU4597
 17702 0026 083B     		subgt	r3, r3, #8
 17703              	.LVL1284:
 17704              	.L1245:
2423:src/xeq.c     **** 	return dispmode;
 17705              		.loc 1 2423 2 is_stmt 1 view .LVU4598
2423:src/xeq.c     **** 	return dispmode;
 17706              		.loc 1 2423 9 is_stmt 0 view .LVU4599
 17707 0028 0B60     		str	r3, [r1]
2424:src/xeq.c     **** }
 17708              		.loc 1 2424 2 is_stmt 1 view .LVU4600
2425:src/xeq.c     **** 
 17709              		.loc 1 2425 1 is_stmt 0 view .LVU4601
 17710 002a 7047     		bx	lr
 17711              	.L1248:
 17712              		.align	2
 17713              	.L1247:
 17714 002c 00000000 		.word	main_ram
 17715              		.cfi_endproc
 17716              	.LFE170:
 17718              		.section	.text.set_dispmode_digs,"ax",%progbits
 17719              		.align	1
 17720              		.p2align 2,,3
 17721              		.global	set_dispmode_digs
 17722              		.syntax unified
 17723              		.thumb
ARM GAS  /tmp/ccQQPlfu.s 			page 487


 17724              		.thumb_func
 17725              		.fpu fpv4-sp-d16
 17727              	set_dispmode_digs:
 17728              	.LVL1285:
 17729              	.LFB171:
2428:src/xeq.c     **** 	if (dispmode >= 4) {
 17730              		.loc 1 2428 1 is_stmt 1 view -0
 17731              		.cfi_startproc
 17732              		@ args = 0, pretend = 0, frame = 0
 17733              		@ frame_needed = 0, uses_anonymous_args = 0
 17734              		@ link register save eliminated.
2429:src/xeq.c     **** 		dispmode -= 4;
 17735              		.loc 1 2429 2 view .LVU4603
2429:src/xeq.c     **** 		dispmode -= 4;
 17736              		.loc 1 2429 5 is_stmt 0 view .LVU4604
 17737 0000 0328     		cmp	r0, #3
 17738 0002 07DD     		ble	.L1250
2430:src/xeq.c     **** 		dispdigs += 12;
 17739              		.loc 1 2430 3 is_stmt 1 view .LVU4605
 17740              	.LVL1286:
2431:src/xeq.c     **** 		if (dispdigs >= 16) {
 17741              		.loc 1 2431 3 view .LVU4606
2431:src/xeq.c     **** 		if (dispdigs >= 16) {
 17742              		.loc 1 2431 12 is_stmt 0 view .LVU4607
 17743 0004 01F10C03 		add	r3, r1, #12
 17744              	.LVL1287:
2432:src/xeq.c     **** 			dispdigs -= 4;
 17745              		.loc 1 2432 3 is_stmt 1 view .LVU4608
2432:src/xeq.c     **** 			dispdigs -= 4;
 17746              		.loc 1 2432 6 is_stmt 0 view .LVU4609
 17747 0008 0F2B     		cmp	r3, #15
2430:src/xeq.c     **** 		dispdigs += 12;
 17748              		.loc 1 2430 12 view .LVU4610
 17749 000a D9BF     		ittee	le
 17750 000c 0438     		suble	r0, r0, #4
 17751              	.LVL1288:
2430:src/xeq.c     **** 		dispdigs += 12;
 17752              		.loc 1 2430 12 view .LVU4611
 17753 000e 1946     		movle	r1, r3
2433:src/xeq.c     **** 			dispmode += 2;
 17754              		.loc 1 2433 4 is_stmt 1 view .LVU4612
2433:src/xeq.c     **** 			dispmode += 2;
 17755              		.loc 1 2433 13 is_stmt 0 view .LVU4613
 17756 0010 0831     		addgt	r1, r1, #8
 17757              	.LVL1289:
2434:src/xeq.c     **** 		}
 17758              		.loc 1 2434 4 is_stmt 1 view .LVU4614
2434:src/xeq.c     **** 		}
 17759              		.loc 1 2434 13 is_stmt 0 view .LVU4615
 17760 0012 0238     		subgt	r0, r0, #2
 17761              	.LVL1290:
 17762              	.L1250:
2437:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17763              		.loc 1 2437 2 is_stmt 1 view .LVU4616
 17764 0014 084B     		ldr	r3, .L1252
 17765 0016 1A68     		ldr	r2, [r3]
2438:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 488


 17766              		.loc 1 2438 2 view .LVU4617
2437:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17767              		.loc 1 2437 18 is_stmt 0 view .LVU4618
 17768 0018 00F00300 		and	r0, r0, #3
 17769              	.LVL1291:
2437:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17770              		.loc 1 2437 18 view .LVU4619
 17771 001c B2F8E637 		ldrh	r3, [r2, #2022]
 17772 0020 8001     		lsls	r0, r0, #6
 17773 0022 01F00F01 		and	r1, r1, #15
 17774              	.LVL1292:
2437:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17775              		.loc 1 2437 18 view .LVU4620
 17776 0026 40EA0120 		orr	r0, r0, r1, lsl #8
 17777 002a 23F47C63 		bic	r3, r3, #4032
 17778 002e 1843     		orrs	r0, r0, r3
 17779 0030 A2F8E607 		strh	r0, [r2, #2022]	@ movhi
2439:src/xeq.c     **** #endif
 17780              		.loc 1 2439 1 view .LVU4621
 17781 0034 7047     		bx	lr
 17782              	.L1253:
 17783 0036 00BF     		.align	2
 17784              	.L1252:
 17785 0038 00000000 		.word	main_ram
 17786              		.cfi_endproc
 17787              	.LFE171:
 17789              		.section	.text.convC2F,"ax",%progbits
 17790              		.align	1
 17791              		.p2align 2,,3
 17792              		.global	convC2F
 17793              		.syntax unified
 17794              		.thumb
 17795              		.thumb_func
 17796              		.fpu fpv4-sp-d16
 17798              	convC2F:
 17799              	.LVL1293:
 17800              	.LFB173:
2491:src/xeq.c     **** 	decNumber s;
 17801              		.loc 1 2491 54 is_stmt 1 view -0
 17802              		.cfi_startproc
 17803              		@ args = 0, pretend = 0, frame = 40
 17804              		@ frame_needed = 0, uses_anonymous_args = 0
2492:src/xeq.c     **** 
 17805              		.loc 1 2492 2 view .LVU4623
2494:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17806              		.loc 1 2494 2 view .LVU4624
2491:src/xeq.c     **** 	decNumber s;
 17807              		.loc 1 2491 54 is_stmt 0 view .LVU4625
 17808 0000 10B5     		push	{r4, lr}
 17809              		.cfi_def_cfa_offset 8
 17810              		.cfi_offset 4, -8
 17811              		.cfi_offset 14, -4
 17812 0002 8AB0     		sub	sp, sp, #40
 17813              		.cfi_def_cfa_offset 48
2491:src/xeq.c     **** 	decNumber s;
 17814              		.loc 1 2491 54 view .LVU4626
 17815 0004 0446     		mov	r4, r0
ARM GAS  /tmp/ccQQPlfu.s 			page 489


2494:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17816              		.loc 1 2494 2 view .LVU4627
 17817 0006 054A     		ldr	r2, .L1256
 17818 0008 01A8     		add	r0, sp, #4
 17819              	.LVL1294:
2494:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17820              		.loc 1 2494 2 view .LVU4628
 17821 000a FFF7FEFF 		bl	dn_multiply
 17822              	.LVL1295:
2495:src/xeq.c     **** }
 17823              		.loc 1 2495 2 is_stmt 1 view .LVU4629
2495:src/xeq.c     **** }
 17824              		.loc 1 2495 9 is_stmt 0 view .LVU4630
 17825 000e 044A     		ldr	r2, .L1256+4
 17826 0010 2046     		mov	r0, r4
 17827 0012 01A9     		add	r1, sp, #4
 17828 0014 FFF7FEFF 		bl	dn_add
 17829              	.LVL1296:
2496:src/xeq.c     **** 
 17830              		.loc 1 2496 1 view .LVU4631
 17831 0018 0AB0     		add	sp, sp, #40
 17832              		.cfi_def_cfa_offset 8
 17833              		@ sp needed
 17834 001a 10BD     		pop	{r4, pc}
 17835              	.LVL1297:
 17836              	.L1257:
2496:src/xeq.c     **** 
 17837              		.loc 1 2496 1 view .LVU4632
 17838              		.align	2
 17839              	.L1256:
 17840 001c 00000000 		.word	const_9on5
 17841 0020 00000000 		.word	const_32
 17842              		.cfi_endproc
 17843              	.LFE173:
 17845              		.section	.text.convF2C,"ax",%progbits
 17846              		.align	1
 17847              		.p2align 2,,3
 17848              		.global	convF2C
 17849              		.syntax unified
 17850              		.thumb
 17851              		.thumb_func
 17852              		.fpu fpv4-sp-d16
 17854              	convF2C:
 17855              	.LVL1298:
 17856              	.LFB174:
2498:src/xeq.c     **** 	decNumber s;
 17857              		.loc 1 2498 54 is_stmt 1 view -0
 17858              		.cfi_startproc
 17859              		@ args = 0, pretend = 0, frame = 40
 17860              		@ frame_needed = 0, uses_anonymous_args = 0
2499:src/xeq.c     **** 
 17861              		.loc 1 2499 2 view .LVU4634
2501:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17862              		.loc 1 2501 2 view .LVU4635
2498:src/xeq.c     **** 	decNumber s;
 17863              		.loc 1 2498 54 is_stmt 0 view .LVU4636
 17864 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccQQPlfu.s 			page 490


 17865              		.cfi_def_cfa_offset 8
 17866              		.cfi_offset 4, -8
 17867              		.cfi_offset 14, -4
 17868 0002 8AB0     		sub	sp, sp, #40
 17869              		.cfi_def_cfa_offset 48
2498:src/xeq.c     **** 	decNumber s;
 17870              		.loc 1 2498 54 view .LVU4637
 17871 0004 0446     		mov	r4, r0
2501:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17872              		.loc 1 2501 2 view .LVU4638
 17873 0006 054A     		ldr	r2, .L1260
 17874 0008 01A8     		add	r0, sp, #4
 17875              	.LVL1299:
2501:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17876              		.loc 1 2501 2 view .LVU4639
 17877 000a FFF7FEFF 		bl	dn_subtract
 17878              	.LVL1300:
2502:src/xeq.c     **** }
 17879              		.loc 1 2502 2 is_stmt 1 view .LVU4640
2502:src/xeq.c     **** }
 17880              		.loc 1 2502 9 is_stmt 0 view .LVU4641
 17881 000e 044A     		ldr	r2, .L1260+4
 17882 0010 2046     		mov	r0, r4
 17883 0012 01A9     		add	r1, sp, #4
 17884 0014 FFF7FEFF 		bl	dn_divide
 17885              	.LVL1301:
2503:src/xeq.c     **** 
 17886              		.loc 1 2503 1 view .LVU4642
 17887 0018 0AB0     		add	sp, sp, #40
 17888              		.cfi_def_cfa_offset 8
 17889              		@ sp needed
 17890 001a 10BD     		pop	{r4, pc}
 17891              	.LVL1302:
 17892              	.L1261:
2503:src/xeq.c     **** 
 17893              		.loc 1 2503 1 view .LVU4643
 17894              		.align	2
 17895              	.L1260:
 17896 001c 00000000 		.word	const_32
 17897 0020 00000000 		.word	const_9on5
 17898              		.cfi_endproc
 17899              	.LFE174:
 17901              		.section	.text.convDB2AR,"ax",%progbits
 17902              		.align	1
 17903              		.p2align 2,,3
 17904              		.global	convDB2AR
 17905              		.syntax unified
 17906              		.thumb
 17907              		.thumb_func
 17908              		.fpu fpv4-sp-d16
 17910              	convDB2AR:
 17911              	.LVL1303:
 17912              	.LFB175:
2505:src/xeq.c     **** 	decNumber t;
 17913              		.loc 1 2505 56 is_stmt 1 view -0
 17914              		.cfi_startproc
 17915              		@ args = 0, pretend = 0, frame = 40
ARM GAS  /tmp/ccQQPlfu.s 			page 491


 17916              		@ frame_needed = 0, uses_anonymous_args = 0
2506:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
 17917              		.loc 1 2506 2 view .LVU4645
2507:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17918              		.loc 1 2507 2 view .LVU4646
2505:src/xeq.c     **** 	decNumber t;
 17919              		.loc 1 2505 56 is_stmt 0 view .LVU4647
 17920 0000 10B5     		push	{r4, lr}
 17921              		.cfi_def_cfa_offset 8
 17922              		.cfi_offset 4, -8
 17923              		.cfi_offset 14, -4
 17924 0002 8AB0     		sub	sp, sp, #40
 17925              		.cfi_def_cfa_offset 48
2507:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17926              		.loc 1 2507 2 view .LVU4648
 17927 0004 054A     		ldr	r2, .L1264
2505:src/xeq.c     **** 	decNumber t;
 17928              		.loc 1 2505 56 view .LVU4649
 17929 0006 0446     		mov	r4, r0
2507:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17930              		.loc 1 2507 2 view .LVU4650
 17931 0008 01A8     		add	r0, sp, #4
 17932              	.LVL1304:
2507:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17933              		.loc 1 2507 2 view .LVU4651
 17934 000a FFF7FEFF 		bl	dn_multiply
 17935              	.LVL1305:
2508:src/xeq.c     **** }
 17936              		.loc 1 2508 2 is_stmt 1 view .LVU4652
2508:src/xeq.c     **** }
 17937              		.loc 1 2508 9 is_stmt 0 view .LVU4653
 17938 000e 01A9     		add	r1, sp, #4
 17939 0010 2046     		mov	r0, r4
 17940 0012 FFF7FEFF 		bl	decNumberPow10
 17941              	.LVL1306:
2509:src/xeq.c     **** 
 17942              		.loc 1 2509 1 view .LVU4654
 17943 0016 0AB0     		add	sp, sp, #40
 17944              		.cfi_def_cfa_offset 8
 17945              		@ sp needed
 17946 0018 10BD     		pop	{r4, pc}
 17947              	.LVL1307:
 17948              	.L1265:
2509:src/xeq.c     **** 
 17949              		.loc 1 2509 1 view .LVU4655
 17950 001a 00BF     		.align	2
 17951              	.L1264:
 17952 001c 00000000 		.word	const_0_05
 17953              		.cfi_endproc
 17954              	.LFE175:
 17956              		.section	.text.convAR2DB,"ax",%progbits
 17957              		.align	1
 17958              		.p2align 2,,3
 17959              		.global	convAR2DB
 17960              		.syntax unified
 17961              		.thumb
 17962              		.thumb_func
ARM GAS  /tmp/ccQQPlfu.s 			page 492


 17963              		.fpu fpv4-sp-d16
 17965              	convAR2DB:
 17966              	.LVL1308:
 17967              	.LFB176:
2511:src/xeq.c     **** 	decNumber t;
 17968              		.loc 1 2511 56 is_stmt 1 view -0
 17969              		.cfi_startproc
 17970              		@ args = 0, pretend = 0, frame = 40
 17971              		@ frame_needed = 0, uses_anonymous_args = 0
2512:src/xeq.c     **** 	dn_log10(&t, x);
 17972              		.loc 1 2512 2 view .LVU4657
2513:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17973              		.loc 1 2513 2 view .LVU4658
2511:src/xeq.c     **** 	decNumber t;
 17974              		.loc 1 2511 56 is_stmt 0 view .LVU4659
 17975 0000 10B5     		push	{r4, lr}
 17976              		.cfi_def_cfa_offset 8
 17977              		.cfi_offset 4, -8
 17978              		.cfi_offset 14, -4
 17979 0002 8AB0     		sub	sp, sp, #40
 17980              		.cfi_def_cfa_offset 48
2511:src/xeq.c     **** 	decNumber t;
 17981              		.loc 1 2511 56 view .LVU4660
 17982 0004 0446     		mov	r4, r0
2513:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17983              		.loc 1 2513 2 view .LVU4661
 17984 0006 01A8     		add	r0, sp, #4
 17985              	.LVL1309:
2513:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17986              		.loc 1 2513 2 view .LVU4662
 17987 0008 FFF7FEFF 		bl	dn_log10
 17988              	.LVL1310:
2514:src/xeq.c     **** }
 17989              		.loc 1 2514 2 is_stmt 1 view .LVU4663
2514:src/xeq.c     **** }
 17990              		.loc 1 2514 9 is_stmt 0 view .LVU4664
 17991 000c 034A     		ldr	r2, .L1268
 17992 000e 2046     		mov	r0, r4
 17993 0010 01A9     		add	r1, sp, #4
 17994 0012 FFF7FEFF 		bl	dn_multiply
 17995              	.LVL1311:
2515:src/xeq.c     **** 
 17996              		.loc 1 2515 1 view .LVU4665
 17997 0016 0AB0     		add	sp, sp, #40
 17998              		.cfi_def_cfa_offset 8
 17999              		@ sp needed
 18000 0018 10BD     		pop	{r4, pc}
 18001              	.LVL1312:
 18002              	.L1269:
2515:src/xeq.c     **** 
 18003              		.loc 1 2515 1 view .LVU4666
 18004 001a 00BF     		.align	2
 18005              	.L1268:
 18006 001c 00000000 		.word	const_20
 18007              		.cfi_endproc
 18008              	.LFE176:
 18010              		.section	.text.convDB2PR,"ax",%progbits
ARM GAS  /tmp/ccQQPlfu.s 			page 493


 18011              		.align	1
 18012              		.p2align 2,,3
 18013              		.global	convDB2PR
 18014              		.syntax unified
 18015              		.thumb
 18016              		.thumb_func
 18017              		.fpu fpv4-sp-d16
 18019              	convDB2PR:
 18020              	.LVL1313:
 18021              	.LFB177:
2517:src/xeq.c     **** 	decNumber t;
 18022              		.loc 1 2517 56 is_stmt 1 view -0
 18023              		.cfi_startproc
 18024              		@ args = 0, pretend = 0, frame = 40
 18025              		@ frame_needed = 0, uses_anonymous_args = 0
2518:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
 18026              		.loc 1 2518 2 view .LVU4668
2519:src/xeq.c     **** 	return decNumberPow10(r, &t);
 18027              		.loc 1 2519 2 view .LVU4669
2517:src/xeq.c     **** 	decNumber t;
 18028              		.loc 1 2517 56 is_stmt 0 view .LVU4670
 18029 0000 10B5     		push	{r4, lr}
 18030              		.cfi_def_cfa_offset 8
 18031              		.cfi_offset 4, -8
 18032              		.cfi_offset 14, -4
 18033 0002 8AB0     		sub	sp, sp, #40
 18034              		.cfi_def_cfa_offset 48
2517:src/xeq.c     **** 	decNumber t;
 18035              		.loc 1 2517 56 view .LVU4671
 18036 0004 0446     		mov	r4, r0
2519:src/xeq.c     **** 	return decNumberPow10(r, &t);
 18037              		.loc 1 2519 2 view .LVU4672
 18038 0006 4FF0FF32 		mov	r2, #-1
 18039 000a 01A8     		add	r0, sp, #4
 18040              	.LVL1314:
2519:src/xeq.c     **** 	return decNumberPow10(r, &t);
 18041              		.loc 1 2519 2 view .LVU4673
 18042 000c FFF7FEFF 		bl	dn_mulpow10
 18043              	.LVL1315:
2520:src/xeq.c     **** }
 18044              		.loc 1 2520 2 is_stmt 1 view .LVU4674
2520:src/xeq.c     **** }
 18045              		.loc 1 2520 9 is_stmt 0 view .LVU4675
 18046 0010 01A9     		add	r1, sp, #4
 18047 0012 2046     		mov	r0, r4
 18048 0014 FFF7FEFF 		bl	decNumberPow10
 18049              	.LVL1316:
2521:src/xeq.c     **** 
 18050              		.loc 1 2521 1 view .LVU4676
 18051 0018 0AB0     		add	sp, sp, #40
 18052              		.cfi_def_cfa_offset 8
 18053              		@ sp needed
 18054 001a 10BD     		pop	{r4, pc}
2521:src/xeq.c     **** 
 18055              		.loc 1 2521 1 view .LVU4677
 18056              		.cfi_endproc
 18057              	.LFE177:
ARM GAS  /tmp/ccQQPlfu.s 			page 494


 18059              		.section	.text.convPR2DB,"ax",%progbits
 18060              		.align	1
 18061              		.p2align 2,,3
 18062              		.global	convPR2DB
 18063              		.syntax unified
 18064              		.thumb
 18065              		.thumb_func
 18066              		.fpu fpv4-sp-d16
 18068              	convPR2DB:
 18069              	.LVL1317:
 18070              	.LFB178:
2523:src/xeq.c     **** 	decNumber t;
 18071              		.loc 1 2523 56 is_stmt 1 view -0
 18072              		.cfi_startproc
 18073              		@ args = 0, pretend = 0, frame = 40
 18074              		@ frame_needed = 0, uses_anonymous_args = 0
2524:src/xeq.c     **** 	dn_log10(&t, x);
 18075              		.loc 1 2524 2 view .LVU4679
2525:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18076              		.loc 1 2525 2 view .LVU4680
2523:src/xeq.c     **** 	decNumber t;
 18077              		.loc 1 2523 56 is_stmt 0 view .LVU4681
 18078 0000 10B5     		push	{r4, lr}
 18079              		.cfi_def_cfa_offset 8
 18080              		.cfi_offset 4, -8
 18081              		.cfi_offset 14, -4
 18082 0002 8AB0     		sub	sp, sp, #40
 18083              		.cfi_def_cfa_offset 48
2523:src/xeq.c     **** 	decNumber t;
 18084              		.loc 1 2523 56 view .LVU4682
 18085 0004 0446     		mov	r4, r0
2525:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18086              		.loc 1 2525 2 view .LVU4683
 18087 0006 01A8     		add	r0, sp, #4
 18088              	.LVL1318:
2525:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18089              		.loc 1 2525 2 view .LVU4684
 18090 0008 FFF7FEFF 		bl	dn_log10
 18091              	.LVL1319:
2526:src/xeq.c     **** }
 18092              		.loc 1 2526 2 is_stmt 1 view .LVU4685
2526:src/xeq.c     **** }
 18093              		.loc 1 2526 9 is_stmt 0 view .LVU4686
 18094 000c 2046     		mov	r0, r4
 18095 000e 01A9     		add	r1, sp, #4
 18096 0010 0122     		movs	r2, #1
 18097 0012 FFF7FEFF 		bl	dn_mulpow10
 18098              	.LVL1320:
2527:src/xeq.c     **** 
 18099              		.loc 1 2527 1 view .LVU4687
 18100 0016 0AB0     		add	sp, sp, #40
 18101              		.cfi_def_cfa_offset 8
 18102              		@ sp needed
 18103 0018 10BD     		pop	{r4, pc}
2527:src/xeq.c     **** 
 18104              		.loc 1 2527 1 view .LVU4688
 18105              		.cfi_endproc
ARM GAS  /tmp/ccQQPlfu.s 			page 495


 18106              	.LFE178:
 18108 001a 00BF     		.section	.text.do_conv,"ax",%progbits
 18109              		.align	1
 18110              		.p2align 2,,3
 18111              		.global	do_conv
 18112              		.syntax unified
 18113              		.thumb
 18114              		.thumb_func
 18115              		.fpu fpv4-sp-d16
 18117              	do_conv:
 18118              	.LVL1321:
 18119              	.LFB179:
2530:src/xeq.c     **** 	decNumber m;
 18120              		.loc 1 2530 66 is_stmt 1 view -0
 18121              		.cfi_startproc
 18122              		@ args = 0, pretend = 0, frame = 40
 18123              		@ frame_needed = 0, uses_anonymous_args = 0
2531:src/xeq.c     **** 	const unsigned int conv = arg / 2;
 18124              		.loc 1 2531 2 view .LVU4690
2532:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18125              		.loc 1 2532 2 view .LVU4691
2533:src/xeq.c     **** 
 18126              		.loc 1 2533 2 view .LVU4692
2535:src/xeq.c     **** 		decNumberCopy(r, x);
 18127              		.loc 1 2535 2 view .LVU4693
2530:src/xeq.c     **** 	decNumber m;
 18128              		.loc 1 2530 66 is_stmt 0 view .LVU4694
 18129 0000 70B5     		push	{r4, r5, r6, lr}
 18130              		.cfi_def_cfa_offset 16
 18131              		.cfi_offset 4, -16
 18132              		.cfi_offset 5, -12
 18133              		.cfi_offset 6, -8
 18134              		.cfi_offset 14, -4
2535:src/xeq.c     **** 		decNumberCopy(r, x);
 18135              		.loc 1 2535 5 view .LVU4695
 18136 0002 4D29     		cmp	r1, #77
2530:src/xeq.c     **** 	decNumber m;
 18137              		.loc 1 2530 66 view .LVU4696
 18138 0004 8AB0     		sub	sp, sp, #40
 18139              		.cfi_def_cfa_offset 56
2530:src/xeq.c     **** 	decNumber m;
 18140              		.loc 1 2530 66 view .LVU4697
 18141 0006 1546     		mov	r5, r2
2535:src/xeq.c     **** 		decNumberCopy(r, x);
 18142              		.loc 1 2535 5 view .LVU4698
 18143 0008 15D8     		bhi	.L1280
2540:src/xeq.c     **** 
 18144              		.loc 1 2540 2 is_stmt 1 view .LVU4699
 18145 000a 0D4B     		ldr	r3, .L1282
 18146 000c 0646     		mov	r6, r0
2532:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18147              		.loc 1 2532 21 is_stmt 0 view .LVU4700
 18148 000e 4808     		lsrs	r0, r1, #1
 18149              	.LVL1322:
2532:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18150              		.loc 1 2532 21 view .LVU4701
 18151 0010 0C46     		mov	r4, r1
ARM GAS  /tmp/ccQQPlfu.s 			page 496


2540:src/xeq.c     **** 
 18152              		.loc 1 2540 2 view .LVU4702
 18153 0012 03EB0010 		add	r0, r3, r0, lsl #4
 18154 0016 01A9     		add	r1, sp, #4
 18155              	.LVL1323:
2540:src/xeq.c     **** 
 18156              		.loc 1 2540 2 view .LVU4703
 18157 0018 FFF7FEFF 		bl	decimal64ToNumber
 18158              	.LVL1324:
2542:src/xeq.c     **** 		dn_divide(r, x, &m);
 18159              		.loc 1 2542 2 is_stmt 1 view .LVU4704
2542:src/xeq.c     **** 		dn_divide(r, x, &m);
 18160              		.loc 1 2542 5 is_stmt 0 view .LVU4705
 18161 001c E307     		lsls	r3, r4, #31
2543:src/xeq.c     **** 	else			// imperial to metric
 18162              		.loc 1 2543 3 view .LVU4706
 18163 001e 01AA     		add	r2, sp, #4
 18164 0020 2946     		mov	r1, r5
 18165 0022 3046     		mov	r0, r6
2542:src/xeq.c     **** 		dn_divide(r, x, &m);
 18166              		.loc 1 2542 5 view .LVU4707
 18167 0024 03D5     		bpl	.L1281
2545:src/xeq.c     **** }
 18168              		.loc 1 2545 3 is_stmt 1 view .LVU4708
 18169 0026 FFF7FEFF 		bl	dn_multiply
 18170              	.LVL1325:
2546:src/xeq.c     **** 
 18171              		.loc 1 2546 1 is_stmt 0 view .LVU4709
 18172 002a 0AB0     		add	sp, sp, #40
 18173              		.cfi_remember_state
 18174              		.cfi_def_cfa_offset 16
 18175              		@ sp needed
 18176 002c 70BD     		pop	{r4, r5, r6, pc}
 18177              	.LVL1326:
 18178              	.L1281:
 18179              		.cfi_restore_state
2543:src/xeq.c     **** 	else			// imperial to metric
 18180              		.loc 1 2543 3 is_stmt 1 view .LVU4710
 18181 002e FFF7FEFF 		bl	dn_divide
 18182              	.LVL1327:
2546:src/xeq.c     **** 
 18183              		.loc 1 2546 1 is_stmt 0 view .LVU4711
 18184 0032 0AB0     		add	sp, sp, #40
 18185              		.cfi_remember_state
 18186              		.cfi_def_cfa_offset 16
 18187              		@ sp needed
 18188 0034 70BD     		pop	{r4, r5, r6, pc}
 18189              	.LVL1328:
 18190              	.L1280:
 18191              		.cfi_restore_state
2536:src/xeq.c     **** 		return;
 18192              		.loc 1 2536 3 is_stmt 1 view .LVU4712
 18193 0036 1146     		mov	r1, r2
 18194              	.LVL1329:
2536:src/xeq.c     **** 		return;
 18195              		.loc 1 2536 3 is_stmt 0 view .LVU4713
 18196 0038 FFF7FEFF 		bl	decNumberCopy
ARM GAS  /tmp/ccQQPlfu.s 			page 497


 18197              	.LVL1330:
2537:src/xeq.c     **** 	}
 18198              		.loc 1 2537 3 is_stmt 1 view .LVU4714
2546:src/xeq.c     **** 
 18199              		.loc 1 2546 1 is_stmt 0 view .LVU4715
 18200 003c 0AB0     		add	sp, sp, #40
 18201              		.cfi_def_cfa_offset 16
 18202              		@ sp needed
 18203 003e 70BD     		pop	{r4, r5, r6, pc}
 18204              	.LVL1331:
 18205              	.L1283:
2546:src/xeq.c     **** 
 18206              		.loc 1 2546 1 view .LVU4716
 18207              		.align	2
 18208              	.L1282:
 18209 0040 00000000 		.word	cnsts_conv
 18210              		.cfi_endproc
 18211              	.LFE179:
 18213              		.section	.text.cmdconv,"ax",%progbits
 18214              		.align	1
 18215              		.p2align 2,,3
 18216              		.global	cmdconv
 18217              		.syntax unified
 18218              		.thumb
 18219              		.thumb_func
 18220              		.fpu fpv4-sp-d16
 18222              	cmdconv:
 18223              	.LVL1332:
 18224              	.LFB180:
2548:src/xeq.c     **** 	decNumber x, r;
 18225              		.loc 1 2548 46 is_stmt 1 view -0
 18226              		.cfi_startproc
 18227              		@ args = 0, pretend = 0, frame = 72
 18228              		@ frame_needed = 0, uses_anonymous_args = 0
2549:src/xeq.c     **** 
 18229              		.loc 1 2549 2 view .LVU4718
2551:src/xeq.c     **** 		return;
 18230              		.loc 1 2551 2 view .LVU4719
2551:src/xeq.c     **** 		return;
 18231              		.loc 1 2551 6 is_stmt 0 view .LVU4720
 18232 0000 0E4B     		ldr	r3, .L1292
 18233 0002 1B68     		ldr	r3, [r3]
 18234 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2551:src/xeq.c     **** 		return;
 18235              		.loc 1 2551 5 view .LVU4721
 18236 0008 DB07     		lsls	r3, r3, #31
 18237 000a 00D5     		bpl	.L1291
 18238 000c 7047     		bx	lr
 18239              	.L1291:
2548:src/xeq.c     **** 	decNumber x, r;
 18240              		.loc 1 2548 46 view .LVU4722
 18241 000e 10B5     		push	{r4, lr}
 18242              		.cfi_def_cfa_offset 8
 18243              		.cfi_offset 4, -8
 18244              		.cfi_offset 14, -4
 18245 0010 92B0     		sub	sp, sp, #72
 18246              		.cfi_def_cfa_offset 80
ARM GAS  /tmp/ccQQPlfu.s 			page 498


 18247 0012 0446     		mov	r4, r0
2554:src/xeq.c     **** 	do_conv(&r, arg, &x);
 18248              		.loc 1 2554 2 is_stmt 1 view .LVU4723
 18249              	.LVL1333:
 18250              	.LBB2927:
 18251              	.LBI2927:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18252              		.loc 1 818 12 view .LVU4724
 18253              	.LBB2928:
 819:src/xeq.c     **** }
 18254              		.loc 1 819 2 view .LVU4725
 819:src/xeq.c     **** }
 18255              		.loc 1 819 9 is_stmt 0 view .LVU4726
 18256 0014 6421     		movs	r1, #100
 18257              	.LVL1334:
 819:src/xeq.c     **** }
 18258              		.loc 1 819 9 view .LVU4727
 18259 0016 6846     		mov	r0, sp
 18260              	.LVL1335:
 819:src/xeq.c     **** }
 18261              		.loc 1 819 9 view .LVU4728
 18262 0018 FFF7FEFF 		bl	getRegister
 18263              	.LVL1336:
 819:src/xeq.c     **** }
 18264              		.loc 1 819 9 view .LVU4729
 18265              	.LBE2928:
 18266              	.LBE2927:
2555:src/xeq.c     **** 	setlastX();
 18267              		.loc 1 2555 2 is_stmt 1 view .LVU4730
 18268 001c 6A46     		mov	r2, sp
 18269 001e 2146     		mov	r1, r4
 18270 0020 09A8     		add	r0, sp, #36
 18271 0022 FFF7FEFF 		bl	do_conv
 18272              	.LVL1337:
2556:src/xeq.c     **** 	setX(&r);
 18273              		.loc 1 2556 2 view .LVU4731
 18274              	.LBB2929:
 18275              	.LBI2929:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 18276              		.loc 1 786 6 view .LVU4732
 18277              	.LBB2930:
 787:src/xeq.c     **** }
 18278              		.loc 1 787 2 view .LVU4733
 18279 0026 6421     		movs	r1, #100
 18280 0028 6C20     		movs	r0, #108
 18281 002a FFF7FEFF 		bl	copyreg_n
 18282              	.LVL1338:
 18283              	.LBE2930:
 18284              	.LBE2929:
2557:src/xeq.c     **** }
 18285              		.loc 1 2557 2 view .LVU4734
 18286              	.LBB2931:
 18287              	.LBI2931:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 18288              		.loc 1 822 6 view .LVU4735
 18289              	.LBB2932:
 823:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 499


 18290              		.loc 1 823 2 view .LVU4736
 18291 002e 09A9     		add	r1, sp, #36
 18292              	.LVL1339:
 823:src/xeq.c     **** }
 18293              		.loc 1 823 2 is_stmt 0 view .LVU4737
 18294 0030 6420     		movs	r0, #100
 18295 0032 FFF7FEFF 		bl	setRegister
 18296              	.LVL1340:
 823:src/xeq.c     **** }
 18297              		.loc 1 823 2 view .LVU4738
 18298              	.LBE2932:
 18299              	.LBE2931:
2558:src/xeq.c     **** 
 18300              		.loc 1 2558 1 view .LVU4739
 18301 0036 12B0     		add	sp, sp, #72
 18302              		.cfi_def_cfa_offset 8
 18303              		@ sp needed
 18304 0038 10BD     		pop	{r4, pc}
 18305              	.LVL1341:
 18306              	.L1293:
2558:src/xeq.c     **** 
 18307              		.loc 1 2558 1 view .LVU4740
 18308 003a 00BF     		.align	2
 18309              	.L1292:
 18310 003c 00000000 		.word	main_ram
 18311              		.cfi_endproc
 18312              	.LFE180:
 18314              		.section	.text.fin_tst,"ax",%progbits
 18315              		.align	1
 18316              		.p2align 2,,3
 18317              		.global	fin_tst
 18318              		.syntax unified
 18319              		.thumb
 18320              		.thumb_func
 18321              		.fpu fpv4-sp-d16
 18323              	fin_tst:
 18324              	.LVL1342:
 18325              	.LFB181:
2563:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 18326              		.loc 1 2563 27 is_stmt 1 view -0
 18327              		.cfi_startproc
 18328              		@ args = 0, pretend = 0, frame = 0
 18329              		@ frame_needed = 0, uses_anonymous_args = 0
 18330              		@ link register save eliminated.
2564:src/xeq.c     **** 	if (Running || XromRunning) {
 18331              		.loc 1 2564 2 view .LVU4742
2564:src/xeq.c     **** 	if (Running || XromRunning) {
 18332              		.loc 1 2564 31 is_stmt 0 view .LVU4743
 18333 0000 30B1     		cbz	r0, .L1301
 18334              	.LVL1343:
2565:src/xeq.c     **** 		if (! a && incpc())
 18335              		.loc 1 2565 2 is_stmt 1 view .LVU4744
2565:src/xeq.c     **** 		if (! a && incpc())
 18336              		.loc 1 2565 14 is_stmt 0 view .LVU4745
 18337 0002 0A4A     		ldr	r2, .L1303
2565:src/xeq.c     **** 		if (! a && incpc())
 18338              		.loc 1 2565 6 view .LVU4746
ARM GAS  /tmp/ccQQPlfu.s 			page 500


 18339 0004 0A4B     		ldr	r3, .L1303+4
2565:src/xeq.c     **** 		if (! a && incpc())
 18340              		.loc 1 2565 14 view .LVU4747
 18341 0006 1268     		ldr	r2, [r2]
 18342 0008 1B68     		ldr	r3, [r3]
 18343 000a 1343     		orrs	r3, r2, r3
 18344 000c 0CD0     		beq	.L1302
2577:src/xeq.c     **** 
 18345              		.loc 1 2577 1 view .LVU4748
 18346 000e 7047     		bx	lr
 18347              	.LVL1344:
 18348              	.L1301:
2565:src/xeq.c     **** 		if (! a && incpc())
 18349              		.loc 1 2565 2 is_stmt 1 view .LVU4749
2565:src/xeq.c     **** 		if (! a && incpc())
 18350              		.loc 1 2565 14 is_stmt 0 view .LVU4750
 18351 0010 064A     		ldr	r2, .L1303
2565:src/xeq.c     **** 		if (! a && incpc())
 18352              		.loc 1 2565 6 view .LVU4751
 18353 0012 074B     		ldr	r3, .L1303+4
2565:src/xeq.c     **** 		if (! a && incpc())
 18354              		.loc 1 2565 14 view .LVU4752
 18355 0014 1268     		ldr	r2, [r2]
 18356 0016 1B68     		ldr	r3, [r3]
 18357 0018 1343     		orrs	r3, r2, r3
 18358 001a 03D1     		bne	.L1297
2564:src/xeq.c     **** 	if (Running || XromRunning) {
 18359              		.loc 1 2564 31 view .LVU4753
 18360 001c 054B     		ldr	r3, .L1303+8
 18361              	.LVL1345:
 18362              	.L1298:
2570:src/xeq.c     **** #ifdef INFRARED
 18363              		.loc 1 2570 3 is_stmt 1 view .LVU4754
2570:src/xeq.c     **** #ifdef INFRARED
 18364              		.loc 1 2570 11 is_stmt 0 view .LVU4755
 18365 001e 064A     		ldr	r2, .L1303+12
 18366 0020 1360     		str	r3, [r2]
2577:src/xeq.c     **** 
 18367              		.loc 1 2577 1 view .LVU4756
 18368 0022 7047     		bx	lr
 18369              	.LVL1346:
 18370              	.L1297:
2577:src/xeq.c     **** 
 18371              		.loc 1 2577 1 view .LVU4757
 18372 0024 FFF7FEBF 		b	fin_tst.part.0
 18373              	.LVL1347:
 18374              	.L1302:
2564:src/xeq.c     **** 	if (Running || XromRunning) {
 18375              		.loc 1 2564 31 view .LVU4758
 18376 0028 044B     		ldr	r3, .L1303+16
 18377 002a F8E7     		b	.L1298
 18378              	.L1304:
 18379              		.align	2
 18380              	.L1303:
 18381 002c 00000000 		.word	XromRunning
 18382 0030 00000000 		.word	Running
 18383 0034 00000000 		.word	.LC3
ARM GAS  /tmp/ccQQPlfu.s 			page 501


 18384 0038 00000000 		.word	DispMsg
 18385 003c 00000000 		.word	.LC2
 18386              		.cfi_endproc
 18387              	.LFE181:
 18389              		.section	.text.check_mode,"ax",%progbits
 18390              		.align	1
 18391              		.p2align 2,,3
 18392              		.global	check_mode
 18393              		.syntax unified
 18394              		.thumb
 18395              		.thumb_func
 18396              		.fpu fpv4-sp-d16
 18398              	check_mode:
 18399              	.LVL1348:
 18400              	.LFB143:
2104:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
 18401              		.loc 1 2104 32 is_stmt 1 view -0
 18402              		.cfi_startproc
 18403              		@ args = 0, pretend = 0, frame = 0
 18404              		@ frame_needed = 0, uses_anonymous_args = 0
 18405              		@ link register save eliminated.
2105:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18406              		.loc 1 2105 2 view .LVU4760
2106:src/xeq.c     **** 
 18407              		.loc 1 2106 2 view .LVU4761
2105:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18408              		.loc 1 2105 35 is_stmt 0 view .LVU4762
 18409 0000 084B     		ldr	r3, .L1306
 18410              	.LVL1349:
2105:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18411              		.loc 1 2105 35 view .LVU4763
 18412 0002 1B68     		ldr	r3, [r3]
 18413              	.LVL1350:
2108:src/xeq.c     **** }
 18414              		.loc 1 2108 2 view .LVU4764
 18415 0004 A0F19F00 		sub	r0, #159
 18416              	.LVL1351:
2108:src/xeq.c     **** }
 18417              		.loc 1 2108 2 view .LVU4765
 18418 0008 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 18419              	.LVL1352:
2108:src/xeq.c     **** }
 18420              		.loc 1 2108 2 is_stmt 1 view .LVU4766
 18421 000c B0FA80F0 		clz	r0, r0
 18422 0010 4009     		lsrs	r0, r0, #5
 18423 0012 03F00103 		and	r3, r3, #1
 18424 0016 C01A     		subs	r0, r0, r3
 18425 0018 B0FA80F0 		clz	r0, r0
 18426 001c 4009     		lsrs	r0, r0, #5
 18427 001e FFF7FEBF 		b	fin_tst
 18428              	.LVL1353:
 18429              	.L1307:
2108:src/xeq.c     **** }
 18430              		.loc 1 2108 2 is_stmt 0 view .LVU4767
 18431 0022 00BF     		.align	2
 18432              	.L1306:
 18433 0024 00000000 		.word	main_ram
ARM GAS  /tmp/ccQQPlfu.s 			page 502


 18434              		.cfi_endproc
 18435              	.LFE143:
 18437              		.section	.text.check_dblmode,"ax",%progbits
 18438              		.align	1
 18439              		.p2align 2,,3
 18440              		.global	check_dblmode
 18441              		.syntax unified
 18442              		.thumb
 18443              		.thumb_func
 18444              		.fpu fpv4-sp-d16
 18446              	check_dblmode:
 18447              	.LVL1354:
 18448              	.LFB144:
2114:src/xeq.c     **** 	fin_tst(is_dblmode());
 18449              		.loc 1 2114 35 is_stmt 1 view -0
 18450              		.cfi_startproc
 18451              		@ args = 0, pretend = 0, frame = 0
 18452              		@ frame_needed = 0, uses_anonymous_args = 0
 18453              		@ link register save eliminated.
2115:src/xeq.c     **** }
 18454              		.loc 1 2115 2 view .LVU4769
 18455              	.LBB2933:
 18456              	.LBI2933:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 18457              		.loc 1 1112 5 view .LVU4770
 18458              	.LBB2934:
1113:src/xeq.c     **** }
 18459              		.loc 1 1113 2 view .LVU4771
1113:src/xeq.c     **** }
 18460              		.loc 1 1113 24 is_stmt 0 view .LVU4772
 18461 0000 064B     		ldr	r3, .L1309
 18462 0002 1B68     		ldr	r3, [r3]
 18463 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 18464 0008 44F20100 		movw	r0, #16385
 18465              	.LVL1355:
1113:src/xeq.c     **** }
 18466              		.loc 1 1113 24 view .LVU4773
 18467 000c 1840     		ands	r0, r0, r3
 18468              	.LBE2934:
 18469              	.LBE2933:
2115:src/xeq.c     **** }
 18470              		.loc 1 2115 2 view .LVU4774
 18471 000e A0F58040 		sub	r0, r0, #16384
 18472 0012 B0FA80F0 		clz	r0, r0
 18473 0016 4009     		lsrs	r0, r0, #5
 18474 0018 FFF7FEBF 		b	fin_tst
 18475              	.LVL1356:
 18476              	.L1310:
 18477              		.align	2
 18478              	.L1309:
 18479 001c 00000000 		.word	main_ram
 18480              		.cfi_endproc
 18481              	.LFE144:
 18483              		.section	.text.isTop,"ax",%progbits
 18484              		.align	1
 18485              		.p2align 2,,3
 18486              		.global	isTop
ARM GAS  /tmp/ccQQPlfu.s 			page 503


 18487              		.syntax unified
 18488              		.thumb
 18489              		.thumb_func
 18490              		.fpu fpv4-sp-d16
 18492              	isTop:
 18493              	.LVL1357:
 18494              	.LFB160:
2322:src/xeq.c     **** 	int top = 0;
 18495              		.loc 1 2322 27 is_stmt 1 view -0
 18496              		.cfi_startproc
 18497              		@ args = 0, pretend = 0, frame = 0
 18498              		@ frame_needed = 0, uses_anonymous_args = 0
 18499              		@ link register save eliminated.
2323:src/xeq.c     **** 
 18500              		.loc 1 2323 2 view .LVU4776
2325:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18501              		.loc 1 2325 2 view .LVU4777
2325:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18502              		.loc 1 2325 6 is_stmt 0 view .LVU4778
 18503 0000 0D4B     		ldr	r3, .L1319
 18504 0002 1868     		ldr	r0, [r3]
 18505              	.LVL1358:
2325:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18506              		.loc 1 2325 5 view .LVU4779
 18507 0004 68B1     		cbz	r0, .L1312
2326:src/xeq.c     **** 	}
 18508              		.loc 1 2326 3 is_stmt 1 view .LVU4780
2326:src/xeq.c     **** 	}
 18509              		.loc 1 2326 9 is_stmt 0 view .LVU4781
 18510 0006 0D4B     		ldr	r3, .L1319+4
 18511 0008 1B68     		ldr	r3, [r3]
 18512              	.LBB2935:
 18513              	.LBB2936:
 218:src/xeq.c     **** }
 18514              		.loc 1 218 9 view .LVU4782
 18515 000a B3F9DE27 		ldrsh	r2, [r3, #2014]
 18516              	.LBE2936:
 18517              	.LBE2935:
2326:src/xeq.c     **** 	}
 18518              		.loc 1 2326 9 view .LVU4783
 18519 000e B3F9E207 		ldrsh	r0, [r3, #2018]
 18520              	.LBB2939:
 18521              	.LBI2935:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 18522              		.loc 1 217 5 is_stmt 1 view .LVU4784
 18523              	.LBB2937:
 218:src/xeq.c     **** }
 18524              		.loc 1 218 2 view .LVU4785
 218:src/xeq.c     **** }
 18525              		.loc 1 218 57 is_stmt 0 view .LVU4786
 18526 0012 002A     		cmp	r2, #0
 18527 0014 07DB     		blt	.L1318
 18528 0016 4FF0FF33 		mov	r3, #-1
 18529              	.L1313:
 18530              	.LBE2937:
 18531              	.LBE2939:
2326:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQQPlfu.s 			page 504


 18532              		.loc 1 2326 19 view .LVU4787
 18533 001a 9842     		cmp	r0, r3
 18534 001c B4BF     		ite	lt
 18535 001e 0020     		movlt	r0, #0
 18536 0020 0120     		movge	r0, #1
 18537              	.LVL1359:
 18538              	.L1312:
2328:src/xeq.c     **** }
 18539              		.loc 1 2328 2 is_stmt 1 view .LVU4788
 18540 0022 FFF7FEBF 		b	fin_tst
 18541              	.LVL1360:
 18542              	.L1318:
 18543              	.LBB2940:
 18544              	.LBB2938:
 218:src/xeq.c     **** }
 18545              		.loc 1 218 25 is_stmt 0 view .LVU4789
 18546 0026 064B     		ldr	r3, .L1319+8
 18547 0028 1B68     		ldr	r3, [r3]
 218:src/xeq.c     **** }
 18548              		.loc 1 218 57 view .LVU4790
 18549 002a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 18550 002e C3F30B03 		ubfx	r3, r3, #0, #12
 18551 0032 DB43     		mvns	r3, r3
 18552 0034 F1E7     		b	.L1313
 18553              	.L1320:
 18554 0036 00BF     		.align	2
 18555              	.L1319:
 18556 0038 00000000 		.word	Running
 18557 003c 00000000 		.word	main_ram
 18558 0040 00000000 		.word	RetStk
 18559              	.LBE2938:
 18560              	.LBE2940:
 18561              		.cfi_endproc
 18562              	.LFE160:
 18564              		.section	.text.cmdlblp,"ax",%progbits
 18565              		.align	1
 18566              		.p2align 2,,3
 18567              		.global	cmdlblp
 18568              		.syntax unified
 18569              		.thumb
 18570              		.thumb_func
 18571              		.fpu fpv4-sp-d16
 18573              	cmdlblp:
 18574              	.LVL1361:
 18575              	.LFB161:
2333:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 18576              		.loc 1 2333 46 is_stmt 1 view -0
 18577              		.cfi_startproc
 18578              		@ args = 0, pretend = 0, frame = 0
 18579              		@ frame_needed = 0, uses_anonymous_args = 0
2334:src/xeq.c     **** }
 18580              		.loc 1 2334 2 view .LVU4792
2333:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 18581              		.loc 1 2333 46 is_stmt 0 view .LVU4793
 18582 0000 08B5     		push	{r3, lr}
 18583              		.cfi_def_cfa_offset 8
 18584              		.cfi_offset 3, -8
ARM GAS  /tmp/ccQQPlfu.s 			page 505


 18585              		.cfi_offset 14, -4
2334:src/xeq.c     **** }
 18586              		.loc 1 2334 26 view .LVU4794
 18587 0002 084B     		ldr	r3, .L1323
 18588              	.LVL1362:
2334:src/xeq.c     **** }
 18589              		.loc 1 2334 26 view .LVU4795
 18590 0004 1B68     		ldr	r3, [r3]
 18591              	.LVL1363:
 18592              	.LBB2941:
 18593              	.LBI2941:
2208:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 18594              		.loc 1 2208 14 is_stmt 1 view .LVU4796
 18595              	.LBB2942:
2209:src/xeq.c     **** }
 18596              		.loc 1 2209 2 view .LVU4797
2209:src/xeq.c     **** }
 18597              		.loc 1 2209 9 is_stmt 0 view .LVU4798
 18598 0006 40F4C441 		orr	r1, r0, #25088
 18599              	.LVL1364:
2209:src/xeq.c     **** }
 18600              		.loc 1 2209 9 view .LVU4799
 18601 000a 0222     		movs	r2, #2
 18602 000c B3F8E007 		ldrh	r0, [r3, #2016]
 18603              	.LVL1365:
2209:src/xeq.c     **** }
 18604              		.loc 1 2209 9 view .LVU4800
 18605 0010 FFF7FEFF 		bl	find_opcode_from
 18606              	.LVL1366:
2209:src/xeq.c     **** }
 18607              		.loc 1 2209 9 view .LVU4801
 18608              	.LBE2942:
 18609              	.LBE2941:
2334:src/xeq.c     **** }
 18610              		.loc 1 2334 2 view .LVU4802
 18611 0014 0038     		subs	r0, r0, #0
2335:src/xeq.c     **** 
 18612              		.loc 1 2335 1 view .LVU4803
 18613 0016 BDE80840 		pop	{r3, lr}
 18614              		.cfi_restore 14
 18615              		.cfi_restore 3
 18616              		.cfi_def_cfa_offset 0
2334:src/xeq.c     **** }
 18617              		.loc 1 2334 2 view .LVU4804
 18618 001a 18BF     		it	ne
 18619 001c 0120     		movne	r0, #1
 18620 001e FFF7FEBF 		b	fin_tst
 18621              	.LVL1367:
 18622              	.L1324:
 18623 0022 00BF     		.align	2
 18624              	.L1323:
 18625 0024 00000000 		.word	main_ram
 18626              		.cfi_endproc
 18627              	.LFE161:
 18629              		.section	.text.cmdmultilblp,"ax",%progbits
 18630              		.align	1
 18631              		.p2align 2,,3
ARM GAS  /tmp/ccQQPlfu.s 			page 506


 18632              		.global	cmdmultilblp
 18633              		.syntax unified
 18634              		.thumb
 18635              		.thumb_func
 18636              		.fpu fpv4-sp-d16
 18638              	cmdmultilblp:
 18639              	.LVL1368:
 18640              	.LFB164:
2362:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 18641              		.loc 1 2362 55 is_stmt 1 view -0
 18642              		.cfi_startproc
 18643              		@ args = 0, pretend = 0, frame = 0
 18644              		@ frame_needed = 0, uses_anonymous_args = 0
2363:src/xeq.c     **** }
 18645              		.loc 1 2363 2 view .LVU4806
2362:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 18646              		.loc 1 2362 55 is_stmt 0 view .LVU4807
 18647 0000 08B5     		push	{r3, lr}
 18648              		.cfi_def_cfa_offset 8
 18649              		.cfi_offset 3, -8
 18650              		.cfi_offset 14, -4
2363:src/xeq.c     **** }
 18651              		.loc 1 2363 10 view .LVU4808
 18652 0002 0021     		movs	r1, #0
 18653              	.LVL1369:
2363:src/xeq.c     **** }
 18654              		.loc 1 2363 10 view .LVU4809
 18655 0004 FFF7FEFF 		bl	findmultilbl
 18656              	.LVL1370:
2363:src/xeq.c     **** }
 18657              		.loc 1 2363 2 view .LVU4810
 18658 0008 0038     		subs	r0, r0, #0
2364:src/xeq.c     **** 
 18659              		.loc 1 2364 1 view .LVU4811
 18660 000a BDE80840 		pop	{r3, lr}
 18661              		.cfi_restore 14
 18662              		.cfi_restore 3
 18663              		.cfi_def_cfa_offset 0
2363:src/xeq.c     **** }
 18664              		.loc 1 2363 2 view .LVU4812
 18665 000e 18BF     		it	ne
 18666 0010 0120     		movne	r0, #1
 18667 0012 FFF7FEBF 		b	fin_tst
 18668              	.LVL1371:
 18669              		.cfi_endproc
 18670              	.LFE164:
 18672 0016 00BF     		.section	.text.cmdkeyp,"ax",%progbits
 18673              		.align	1
 18674              		.p2align 2,,3
 18675              		.global	cmdkeyp
 18676              		.syntax unified
 18677              		.thumb
 18678              		.thumb_func
 18679              		.fpu fpv4-sp-d16
 18681              	cmdkeyp:
 18682              	.LVL1372:
 18683              	.LFB139:
ARM GAS  /tmp/ccQQPlfu.s 			page 507


2040:src/xeq.c     **** 	int cond = LastKey == 0;
 18684              		.loc 1 2040 46 is_stmt 1 view -0
 18685              		.cfi_startproc
 18686              		@ args = 0, pretend = 0, frame = 0
 18687              		@ frame_needed = 0, uses_anonymous_args = 0
2041:src/xeq.c     **** 	if (!cond) {
 18688              		.loc 1 2041 2 view .LVU4814
2040:src/xeq.c     **** 	int cond = LastKey == 0;
 18689              		.loc 1 2040 46 is_stmt 0 view .LVU4815
 18690 0000 70B5     		push	{r4, r5, r6, lr}
 18691              		.cfi_def_cfa_offset 16
 18692              		.cfi_offset 4, -16
 18693              		.cfi_offset 5, -12
 18694              		.cfi_offset 6, -8
 18695              		.cfi_offset 14, -4
2041:src/xeq.c     **** 	if (!cond) {
 18696              		.loc 1 2041 13 view .LVU4816
 18697 0002 104B     		ldr	r3, .L1334
 18698 0004 93F91320 		ldrsb	r2, [r3, #19]
2041:src/xeq.c     **** 	if (!cond) {
 18699              		.loc 1 2041 21 view .LVU4817
 18700 0008 002A     		cmp	r2, #0
2040:src/xeq.c     **** 	int cond = LastKey == 0;
 18701              		.loc 1 2040 46 view .LVU4818
 18702 000a 82B0     		sub	sp, sp, #8
 18703              		.cfi_def_cfa_offset 24
2041:src/xeq.c     **** 	if (!cond) {
 18704              		.loc 1 2041 21 view .LVU4819
 18705 000c 0CBF     		ite	eq
 18706 000e 0125     		moveq	r5, #1
 18707 0010 0025     		movne	r5, #0
 18708              	.LVL1373:
2042:src/xeq.c     **** 		int k = LastKey - 1;
 18709              		.loc 1 2042 2 is_stmt 1 view .LVU4820
2042:src/xeq.c     **** 		int k = LastKey - 1;
 18710              		.loc 1 2042 5 is_stmt 0 view .LVU4821
 18711 0012 05D1     		bne	.L1333
2047:src/xeq.c     **** }
 18712              		.loc 1 2047 2 is_stmt 1 view .LVU4822
 18713 0014 2846     		mov	r0, r5
 18714              	.LVL1374:
2048:src/xeq.c     **** 
 18715              		.loc 1 2048 1 is_stmt 0 view .LVU4823
 18716 0016 02B0     		add	sp, sp, #8
 18717              		.cfi_remember_state
 18718              		.cfi_def_cfa_offset 16
 18719              		@ sp needed
 18720 0018 BDE87040 		pop	{r4, r5, r6, lr}
 18721              		.cfi_restore 14
 18722              		.cfi_restore 6
 18723              		.cfi_restore 5
 18724              		.cfi_restore 4
 18725              		.cfi_def_cfa_offset 0
 18726              	.LVL1375:
2047:src/xeq.c     **** }
 18727              		.loc 1 2047 2 view .LVU4824
 18728 001c FFF7FEBF 		b	fin_tst
ARM GAS  /tmp/ccQQPlfu.s 			page 508


 18729              	.LVL1376:
 18730              	.L1333:
 18731              		.cfi_restore_state
 18732              	.LBB2943:
2043:src/xeq.c     **** 		LastKey = 0;
 18733              		.loc 1 2043 3 is_stmt 1 view .LVU4825
2044:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18734              		.loc 1 2044 3 view .LVU4826
 18735 0020 0446     		mov	r4, r0
2044:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18736              		.loc 1 2044 11 is_stmt 0 view .LVU4827
 18737 0022 0026     		movs	r6, #0
2045:src/xeq.c     **** 	}
 18738              		.loc 1 2045 26 view .LVU4828
 18739 0024 501E     		subs	r0, r2, #1
 18740              	.LVL1377:
2044:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18741              		.loc 1 2044 11 view .LVU4829
 18742 0026 DE74     		strb	r6, [r3, #19]
2045:src/xeq.c     **** 	}
 18743              		.loc 1 2045 3 is_stmt 1 view .LVU4830
2045:src/xeq.c     **** 	}
 18744              		.loc 1 2045 26 is_stmt 0 view .LVU4831
 18745 0028 FFF7FEFF 		bl	keycode_to_row_column
 18746              	.LVL1378:
2045:src/xeq.c     **** 	}
 18747              		.loc 1 2045 26 view .LVU4832
 18748 002c 0246     		mov	r2, r0
2045:src/xeq.c     **** 	}
 18749              		.loc 1 2045 3 view .LVU4833
 18750 002e 0096     		str	r6, [sp]
 18751 0030 2046     		mov	r0, r4
 18752 0032 D317     		asrs	r3, r2, #31
 18753 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 18754              	.LVL1379:
 18755              	.LBE2943:
2047:src/xeq.c     **** }
 18756              		.loc 1 2047 2 is_stmt 1 view .LVU4834
 18757 0038 2846     		mov	r0, r5
2048:src/xeq.c     **** 
 18758              		.loc 1 2048 1 is_stmt 0 view .LVU4835
 18759 003a 02B0     		add	sp, sp, #8
 18760              		.cfi_def_cfa_offset 16
 18761              		@ sp needed
 18762 003c BDE87040 		pop	{r4, r5, r6, lr}
 18763              		.cfi_restore 14
 18764              		.cfi_restore 6
 18765              		.cfi_restore 5
 18766              		.cfi_restore 4
 18767              		.cfi_def_cfa_offset 0
 18768              	.LVL1380:
2047:src/xeq.c     **** }
 18769              		.loc 1 2047 2 view .LVU4836
 18770 0040 FFF7FEBF 		b	fin_tst
 18771              	.LVL1381:
 18772              	.L1335:
2047:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 509


 18773              		.loc 1 2047 2 view .LVU4837
 18774              		.align	2
 18775              	.L1334:
 18776 0044 00000000 		.word	StateWhileOn
 18777              		.cfi_endproc
 18778              	.LFE139:
 18780              		.section	.text.do_tst,"ax",%progbits
 18781              		.align	1
 18782              		.p2align 2,,3
 18783              		.syntax unified
 18784              		.thumb
 18785              		.thumb_func
 18786              		.fpu fpv4-sp-d16
 18788              	do_tst:
 18789              	.LVL1382:
 18790              	.LFB187:
3278:src/xeq.c     **** 	int a = 0;
 18791              		.loc 1 3278 51 is_stmt 1 view -0
 18792              		.cfi_startproc
 18793              		@ args = 0, pretend = 0, frame = 112
 18794              		@ frame_needed = 0, uses_anonymous_args = 0
3279:src/xeq.c     **** 	int iszero, isneg;
 18795              		.loc 1 3279 2 view .LVU4839
3280:src/xeq.c     **** 
 18796              		.loc 1 3280 2 view .LVU4840
3282:src/xeq.c     **** 
 18797              		.loc 1 3282 2 view .LVU4841
 18798              	.LBB2944:
 18799              	.LBI2944:
1326:src/xeq.c     **** 	process_cmdline();
 18800              		.loc 1 1326 6 view .LVU4842
 18801              	.LBE2944:
1327:src/xeq.c     **** 	set_lift();
 18802              		.loc 1 1327 2 view .LVU4843
 18803              	.LBB2959:
 18804              	.LBB2945:
 18805              	.LBI2945:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 18806              		.loc 1 1220 6 view .LVU4844
 18807              	.LBB2946:
1221:src/xeq.c     **** 
 18808              		.loc 1 1221 2 view .LVU4845
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18809              		.loc 1 1223 2 view .LVU4846
 18810              	.LBE2946:
 18811              	.LBE2945:
 18812              	.LBE2959:
3278:src/xeq.c     **** 	int a = 0;
 18813              		.loc 1 3278 51 is_stmt 0 view .LVU4847
 18814 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 18815              		.cfi_def_cfa_offset 28
 18816              		.cfi_offset 4, -28
 18817              		.cfi_offset 5, -24
 18818              		.cfi_offset 6, -20
 18819              		.cfi_offset 7, -16
 18820              		.cfi_offset 8, -12
 18821              		.cfi_offset 9, -8
ARM GAS  /tmp/ccQQPlfu.s 			page 510


 18822              		.cfi_offset 14, -4
 18823              	.LBB2960:
 18824              	.LBB2950:
 18825              	.LBB2947:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18826              		.loc 1 1223 6 view .LVU4848
 18827 0004 584D     		ldr	r5, .L1371
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18828              		.loc 1 1223 5 view .LVU4849
 18829 0006 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 18830              	.LBE2947:
 18831              	.LBE2950:
 18832              	.LBE2960:
3278:src/xeq.c     **** 	int a = 0;
 18833              		.loc 1 3278 51 view .LVU4850
 18834 0008 9DB0     		sub	sp, sp, #116
 18835              		.cfi_def_cfa_offset 144
3278:src/xeq.c     **** 	int a = 0;
 18836              		.loc 1 3278 51 view .LVU4851
 18837 000a 8046     		mov	r8, r0
 18838 000c 0C46     		mov	r4, r1
 18839              	.LBB2961:
 18840              	.LBB2951:
 18841              	.LBB2948:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18842              		.loc 1 1223 5 view .LVU4852
 18843 000e 002B     		cmp	r3, #0
 18844 0010 5DD1     		bne	.L1369
 18845              	.LVL1383:
 18846              	.L1337:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18847              		.loc 1 1223 5 view .LVU4853
 18848              	.LBE2948:
 18849              	.LBE2951:
 18850              	.LBE2961:
1328:src/xeq.c     **** }
 18851              		.loc 1 1328 2 is_stmt 1 view .LVU4854
 18852              	.LBB2962:
 18853              	.LBB2952:
 18854              	.LBI2952:
 761:src/xeq.c     ****     State2.state_lift = 1;
 18855              		.loc 1 761 6 view .LVU4855
 18856              	.LBB2953:
 762:src/xeq.c     **** }
 18857              		.loc 1 762 5 view .LVU4856
 762:src/xeq.c     **** }
 18858              		.loc 1 762 23 is_stmt 0 view .LVU4857
 18859 0012 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 18860              	.LBE2953:
 18861              	.LBE2952:
 18862              	.LBE2962:
3284:src/xeq.c     **** 		unsigned long long int xv, yv;
 18863              		.loc 1 3284 6 view .LVU4858
 18864 0014 554A     		ldr	r2, .L1371+4
 18865              	.LBB2963:
 18866              	.LBB2956:
 18867              	.LBB2954:
ARM GAS  /tmp/ccQQPlfu.s 			page 511


 762:src/xeq.c     **** }
 18868              		.loc 1 762 23 view .LVU4859
 18869 0016 43F04003 		orr	r3, r3, #64
 18870              	.LBE2954:
 18871              	.LBE2956:
 18872              	.LBE2963:
3284:src/xeq.c     **** 		unsigned long long int xv, yv;
 18873              		.loc 1 3284 6 view .LVU4860
 18874 001a 1268     		ldr	r2, [r2]
 18875              	.LBB2964:
 18876              	.LBB2957:
 18877              	.LBB2955:
 762:src/xeq.c     **** }
 18878              		.loc 1 762 23 view .LVU4861
 18879 001c EB75     		strb	r3, [r5, #23]
 18880              	.LBE2955:
 18881              	.LBE2957:
 18882              	.LBE2964:
3284:src/xeq.c     **** 		unsigned long long int xv, yv;
 18883              		.loc 1 3284 2 is_stmt 1 view .LVU4862
3284:src/xeq.c     **** 		unsigned long long int xv, yv;
 18884              		.loc 1 3284 6 is_stmt 0 view .LVU4863
 18885 001e 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3284:src/xeq.c     **** 		unsigned long long int xv, yv;
 18886              		.loc 1 3284 5 view .LVU4864
 18887 0022 DB07     		lsls	r3, r3, #31
 18888 0024 2CD5     		bpl	.L1338
 18889              	.LBB2965:
3285:src/xeq.c     **** 		int xs, ys;
 18890              		.loc 1 3285 3 is_stmt 1 view .LVU4865
3286:src/xeq.c     **** 
 18891              		.loc 1 3286 3 view .LVU4866
3288:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18892              		.loc 1 3288 3 view .LVU4867
 18893              	.LBB2966:
 18894              	.LBI2966:
1436:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 18895              		.loc 1 1436 15 view .LVU4868
 18896              	.LBB2967:
1437:src/xeq.c     **** }
 18897              		.loc 1 1437 2 view .LVU4869
1437:src/xeq.c     **** }
 18898              		.loc 1 1437 9 is_stmt 0 view .LVU4870
 18899 0026 6420     		movs	r0, #100
 18900 0028 FFF7FEFF 		bl	get_reg_n_int
 18901              	.LVL1384:
 18902              	.LBE2967:
 18903              	.LBE2966:
3288:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18904              		.loc 1 3288 8 view .LVU4871
 18905 002c 0AAA     		add	r2, sp, #40
 18906 002e FFF7FEFF 		bl	extract_value
 18907              	.LVL1385:
3289:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18908              		.loc 1 3289 6 view .LVU4872
 18909 0032 B8F5FA6F 		cmp	r8, #2000
3288:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
ARM GAS  /tmp/ccQQPlfu.s 			page 512


 18910              		.loc 1 3288 8 view .LVU4873
 18911 0036 0646     		mov	r6, r0
 18912 0038 0F46     		mov	r7, r1
 18913              	.LVL1386:
3289:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18914              		.loc 1 3289 3 is_stmt 1 view .LVU4874
3289:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18915              		.loc 1 3289 6 is_stmt 0 view .LVU4875
 18916 003a 54DB     		blt	.L1339
3290:src/xeq.c     **** 			ys = 0;
 18917              		.loc 1 3290 4 is_stmt 1 view .LVU4876
3290:src/xeq.c     **** 			ys = 0;
 18918              		.loc 1 3290 30 is_stmt 0 view .LVU4877
 18919 003c A8F61B08 		subw	r8, r8, #2075
 18920              	.LVL1387:
3290:src/xeq.c     **** 			ys = 0;
 18921              		.loc 1 3290 7 view .LVU4878
 18922 0040 4FEAE879 		asr	r9, r8, #31
 18923              	.LVL1388:
3291:src/xeq.c     **** 		} else
 18924              		.loc 1 3291 4 is_stmt 1 view .LVU4879
 18925 0044 0022     		movs	r2, #0
 18926              	.LVL1389:
 18927              	.L1340:
3295:src/xeq.c     **** 			iszero = 1;
 18928              		.loc 1 3295 3 view .LVU4880
3295:src/xeq.c     **** 			iszero = 1;
 18929              		.loc 1 3295 6 is_stmt 0 view .LVU4881
 18930 0046 56EA0703 		orrs	r3, r6, r7
 18931 004a 43D1     		bne	.L1341
3295:src/xeq.c     **** 			iszero = 1;
 18932              		.loc 1 3295 15 discriminator 1 view .LVU4882
 18933 004c 58EA0903 		orrs	r3, r8, r9
 18934 0050 53D0     		beq	.L1342
 18935              	.L1344:
 18936 0052 0A9B     		ldr	r3, [sp, #40]
3300:src/xeq.c     **** 			if (xs)		// both negative
 18937              		.loc 1 3300 6 view .LVU4883
 18938 0054 9A42     		cmp	r2, r3
3298:src/xeq.c     **** 
 18939              		.loc 1 3298 24 view .LVU4884
 18940 0056 4FF00000 		mov	r0, #0
 18941              	.LVL1390:
3300:src/xeq.c     **** 			if (xs)		// both negative
 18942              		.loc 1 3300 3 is_stmt 1 view .LVU4885
3300:src/xeq.c     **** 			if (xs)		// both negative
 18943              		.loc 1 3300 6 is_stmt 0 view .LVU4886
 18944 005a 53D0     		beq	.L1345
 18945              	.LVL1391:
 18946              	.L1348:
3300:src/xeq.c     **** 			if (xs)		// both negative
 18947              		.loc 1 3300 6 view .LVU4887
 18948              	.LBE2965:
3328:src/xeq.c     **** 	case TST_APX:
 18949              		.loc 1 3328 2 is_stmt 1 view .LVU4888
 18950 005c 062C     		cmp	r4, #6
 18951 005e 30D8     		bhi	.L1354
ARM GAS  /tmp/ccQQPlfu.s 			page 513


 18952 0060 DFE804F0 		tbb	[pc, r4]
 18953              	.L1356:
 18954 0064 09       		.byte	(.L1353-.L1356)/2
 18955 0065 58       		.byte	(.L1368-.L1356)/2
 18956 0066 09       		.byte	(.L1353-.L1356)/2
 18957 0067 2E       		.byte	(.L1359-.L1356)/2
 18958 0068 67       		.byte	(.L1358-.L1356)/2
 18959 0069 6C       		.byte	(.L1357-.L1356)/2
 18960 006a 04       		.byte	(.L1355-.L1356)/2
 18961 006b 00       		.p2align 1
 18962              	.L1355:
3335:src/xeq.c     **** 	default:	a = 0;			break;
 18963              		.loc 1 3335 15 view .LVU4889
3335:src/xeq.c     **** 	default:	a = 0;			break;
 18964              		.loc 1 3335 26 is_stmt 0 view .LVU4890
 18965 006c 002B     		cmp	r3, #0
 18966 006e 6AD0     		beq	.L1363
3335:src/xeq.c     **** 	default:	a = 0;			break;
 18967              		.loc 1 3335 26 discriminator 2 view .LVU4891
 18968 0070 0038     		subs	r0, r0, #0
3335:src/xeq.c     **** 	default:	a = 0;			break;
 18969              		.loc 1 3335 26 discriminator 2 view .LVU4892
 18970 0072 18BF     		it	ne
 18971 0074 0120     		movne	r0, #1
 18972              	.LVL1392:
 18973              	.L1353:
3339:src/xeq.c     **** }
 18974              		.loc 1 3339 7 is_stmt 1 view .LVU4893
 18975 0076 FFF7FEFF 		bl	fin_tst
 18976              	.LVL1393:
3340:src/xeq.c     **** 
 18977              		.loc 1 3340 1 is_stmt 0 view .LVU4894
 18978 007a 1DB0     		add	sp, sp, #116
 18979              		.cfi_remember_state
 18980              		.cfi_def_cfa_offset 28
 18981              		@ sp needed
 18982 007c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 18983              	.LVL1394:
 18984              	.L1338:
 18985              		.cfi_restore_state
 18986              	.LBB2968:
3308:src/xeq.c     **** 
 18987              		.loc 1 3308 3 is_stmt 1 view .LVU4895
3310:src/xeq.c     **** 		if (decNumberIsNaN(&x))
 18988              		.loc 1 3310 3 view .LVU4896
 18989              	.LBB2969:
 18990              	.LBI2969:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18991              		.loc 1 818 12 view .LVU4897
 18992              	.LBB2970:
 819:src/xeq.c     **** }
 18993              		.loc 1 819 2 view .LVU4898
 819:src/xeq.c     **** }
 18994              		.loc 1 819 9 is_stmt 0 view .LVU4899
 18995 0080 0AA8     		add	r0, sp, #40
 18996              	.LVL1395:
 819:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 514


 18997              		.loc 1 819 9 view .LVU4900
 18998 0082 6421     		movs	r1, #100
 18999 0084 FFF7FEFF 		bl	getRegister
 19000              	.LVL1396:
 819:src/xeq.c     **** }
 19001              		.loc 1 819 9 view .LVU4901
 19002              	.LBE2970:
 19003              	.LBE2969:
3311:src/xeq.c     **** 			goto flse;
 19004              		.loc 1 3311 3 is_stmt 1 view .LVU4902
3311:src/xeq.c     **** 			goto flse;
 19005              		.loc 1 3311 6 is_stmt 0 view .LVU4903
 19006 0088 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
 19007 008c 13F0300F 		tst	r3, #48
 19008 0090 17D1     		bne	.L1354
3314:src/xeq.c     **** 		if (decNumberIsNaN(&t))
 19009              		.loc 1 3314 3 is_stmt 1 view .LVU4904
 19010 0092 01A8     		add	r0, sp, #4
 19011 0094 4146     		mov	r1, r8
 19012 0096 FFF7FEFF 		bl	getRegister
 19013              	.LVL1397:
3315:src/xeq.c     **** 			goto flse;
 19014              		.loc 1 3315 3 view .LVU4905
3315:src/xeq.c     **** 			goto flse;
 19015              		.loc 1 3315 6 is_stmt 0 view .LVU4906
 19016 009a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 19017 009e 13F0300F 		tst	r3, #48
 19018 00a2 0ED1     		bne	.L1354
3318:src/xeq.c     **** 			decNumberRnd(&x, &x);
 19019              		.loc 1 3318 3 is_stmt 1 view .LVU4907
3318:src/xeq.c     **** 			decNumberRnd(&x, &x);
 19020              		.loc 1 3318 6 is_stmt 0 view .LVU4908
 19021 00a4 022C     		cmp	r4, #2
 19022 00a6 53D0     		beq	.L1370
 19023              	.L1351:
3323:src/xeq.c     **** 		iszero = dn_eq0(&r);
 19024              		.loc 1 3323 3 is_stmt 1 view .LVU4909
 19025 00a8 01AA     		add	r2, sp, #4
 19026 00aa 0AA9     		add	r1, sp, #40
 19027 00ac 13A8     		add	r0, sp, #76
 19028 00ae FFF7FEFF 		bl	dn_compare
 19029              	.LVL1398:
3324:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 19030              		.loc 1 3324 3 view .LVU4910
3324:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 19031              		.loc 1 3324 12 is_stmt 0 view .LVU4911
 19032 00b2 13A8     		add	r0, sp, #76
 19033 00b4 FFF7FEFF 		bl	dn_eq0
 19034              	.LVL1399:
3325:src/xeq.c     **** 	}
 19035              		.loc 1 3325 11 view .LVU4912
 19036 00b8 9DF95430 		ldrsb	r3, [sp, #84]
 19037              	.LVL1400:
3325:src/xeq.c     **** 	}
 19038              		.loc 1 3325 3 is_stmt 1 view .LVU4913
3325:src/xeq.c     **** 	}
 19039              		.loc 1 3325 11 is_stmt 0 view .LVU4914
ARM GAS  /tmp/ccQQPlfu.s 			page 515


 19040 00bc DB0F     		lsrs	r3, r3, #31
 19041              	.LVL1401:
3325:src/xeq.c     **** 	}
 19042              		.loc 1 3325 11 view .LVU4915
 19043 00be CDE7     		b	.L1348
 19044              	.LVL1402:
 19045              	.L1359:
3325:src/xeq.c     **** 	}
 19046              		.loc 1 3325 11 view .LVU4916
 19047              	.LBE2968:
3332:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19048              		.loc 1 3332 15 is_stmt 1 view .LVU4917
3332:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19049              		.loc 1 3332 25 is_stmt 0 view .LVU4918
 19050 00c0 43BB     		cbnz	r3, .L1368
 19051              	.LVL1403:
 19052              	.L1354:
3332:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19053              		.loc 1 3332 25 view .LVU4919
 19054 00c2 0020     		movs	r0, #0
 19055              	.LVL1404:
3339:src/xeq.c     **** }
 19056              		.loc 1 3339 7 is_stmt 1 view .LVU4920
 19057 00c4 FFF7FEFF 		bl	fin_tst
 19058              	.LVL1405:
3340:src/xeq.c     **** 
 19059              		.loc 1 3340 1 is_stmt 0 view .LVU4921
 19060 00c8 1DB0     		add	sp, sp, #116
 19061              		.cfi_remember_state
 19062              		.cfi_def_cfa_offset 28
 19063              		@ sp needed
 19064 00ca BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 19065              	.LVL1406:
 19066              	.L1369:
 19067              		.cfi_restore_state
 19068              	.LBB2971:
 19069              	.LBB2958:
 19070              	.LBB2949:
3340:src/xeq.c     **** 
 19071              		.loc 1 3340 1 view .LVU4922
 19072 00ce FFF7FEFF 		bl	process_cmdline.part.0
 19073              	.LVL1407:
3340:src/xeq.c     **** 
 19074              		.loc 1 3340 1 view .LVU4923
 19075 00d2 9EE7     		b	.L1337
 19076              	.LVL1408:
 19077              	.L1341:
3340:src/xeq.c     **** 
 19078              		.loc 1 3340 1 view .LVU4924
 19079              	.LBE2949:
 19080              	.LBE2958:
 19081              	.LBE2971:
 19082              	.LBB2972:
3298:src/xeq.c     **** 
 19083              		.loc 1 3298 4 is_stmt 1 view .LVU4925
3298:src/xeq.c     **** 
 19084              		.loc 1 3298 24 is_stmt 0 view .LVU4926
ARM GAS  /tmp/ccQQPlfu.s 			page 516


 19085 00d4 B945     		cmp	r9, r7
 19086 00d6 08BF     		it	eq
 19087 00d8 B045     		cmpeq	r8, r6
 19088 00da BAD1     		bne	.L1344
3298:src/xeq.c     **** 
 19089              		.loc 1 3298 31 discriminator 1 view .LVU4927
 19090 00dc 0A9B     		ldr	r3, [sp, #40]
3298:src/xeq.c     **** 
 19091              		.loc 1 3298 24 discriminator 1 view .LVU4928
 19092 00de 9342     		cmp	r3, r2
 19093 00e0 33D0     		beq	.L1361
3298:src/xeq.c     **** 
 19094              		.loc 1 3298 24 view .LVU4929
 19095 00e2 0020     		movs	r0, #0
 19096 00e4 BAE7     		b	.L1348
 19097              	.LVL1409:
 19098              	.L1339:
3293:src/xeq.c     **** 
 19099              		.loc 1 3293 4 is_stmt 1 view .LVU4930
3293:src/xeq.c     **** 
 19100              		.loc 1 3293 9 is_stmt 0 view .LVU4931
 19101 00e6 4046     		mov	r0, r8
 19102 00e8 FFF7FEFF 		bl	get_reg_n_int
 19103              	.LVL1410:
 19104 00ec 13AA     		add	r2, sp, #76
 19105 00ee FFF7FEFF 		bl	extract_value
 19106              	.LVL1411:
 19107 00f2 139A     		ldr	r2, [sp, #76]
 19108 00f4 8046     		mov	r8, r0
 19109              	.LVL1412:
3293:src/xeq.c     **** 
 19110              		.loc 1 3293 9 view .LVU4932
 19111 00f6 8946     		mov	r9, r1
 19112              	.LVL1413:
3293:src/xeq.c     **** 
 19113              		.loc 1 3293 9 view .LVU4933
 19114 00f8 A5E7     		b	.L1340
 19115              	.L1342:
3293:src/xeq.c     **** 
 19116              		.loc 1 3293 9 view .LVU4934
 19117 00fa 0A9B     		ldr	r3, [sp, #40]
3300:src/xeq.c     **** 			if (xs)		// both negative
 19118              		.loc 1 3300 6 view .LVU4935
 19119 00fc 9A42     		cmp	r2, r3
3296:src/xeq.c     **** 		else
 19120              		.loc 1 3296 11 view .LVU4936
 19121 00fe 4FF00100 		mov	r0, #1
 19122              	.LVL1414:
3300:src/xeq.c     **** 			if (xs)		// both negative
 19123              		.loc 1 3300 3 is_stmt 1 view .LVU4937
3300:src/xeq.c     **** 			if (xs)		// both negative
 19124              		.loc 1 3300 6 is_stmt 0 view .LVU4938
 19125 0102 ABD1     		bne	.L1348
 19126              	.LVL1415:
 19127              	.L1345:
3301:src/xeq.c     **** 				isneg = xv > yv;
 19128              		.loc 1 3301 4 is_stmt 1 view .LVU4939
ARM GAS  /tmp/ccQQPlfu.s 			page 517


3301:src/xeq.c     **** 				isneg = xv > yv;
 19129              		.loc 1 3301 7 is_stmt 0 view .LVU4940
 19130 0104 73B1     		cbz	r3, .L1347
3302:src/xeq.c     **** 			else		// both positive
 19131              		.loc 1 3302 5 is_stmt 1 view .LVU4941
3302:src/xeq.c     **** 			else		// both positive
 19132              		.loc 1 3302 16 is_stmt 0 view .LVU4942
 19133 0106 B945     		cmp	r9, r7
 19134 0108 08BF     		it	eq
 19135 010a B045     		cmpeq	r8, r6
 19136 010c 34BF     		ite	cc
 19137 010e 0123     		movcc	r3, #1
 19138 0110 0023     		movcs	r3, #0
 19139              	.LVL1416:
3302:src/xeq.c     **** 			else		// both positive
 19140              		.loc 1 3302 16 view .LVU4943
 19141 0112 A3E7     		b	.L1348
 19142              	.LVL1417:
 19143              	.L1368:
3302:src/xeq.c     **** 			else		// both positive
 19144              		.loc 1 3302 16 view .LVU4944
 19145              	.LBE2972:
3332:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19146              		.loc 1 3332 25 discriminator 1 view .LVU4945
 19147 0114 B0FA80F0 		clz	r0, r0
 19148              	.LVL1418:
3332:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19149              		.loc 1 3332 25 discriminator 1 view .LVU4946
 19150 0118 4009     		lsrs	r0, r0, #5
 19151              	.LVL1419:
3339:src/xeq.c     **** }
 19152              		.loc 1 3339 7 is_stmt 1 discriminator 1 view .LVU4947
 19153 011a FFF7FEFF 		bl	fin_tst
 19154              	.LVL1420:
3340:src/xeq.c     **** 
 19155              		.loc 1 3340 1 is_stmt 0 discriminator 1 view .LVU4948
 19156 011e 1DB0     		add	sp, sp, #116
 19157              		.cfi_remember_state
 19158              		.cfi_def_cfa_offset 28
 19159              		@ sp needed
 19160 0120 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 19161              	.LVL1421:
 19162              	.L1347:
 19163              		.cfi_restore_state
 19164              	.LBB2973:
3304:src/xeq.c     **** 		} else
 19165              		.loc 1 3304 5 is_stmt 1 view .LVU4949
3304:src/xeq.c     **** 		} else
 19166              		.loc 1 3304 16 is_stmt 0 view .LVU4950
 19167 0124 4F45     		cmp	r7, r9
 19168 0126 08BF     		it	eq
 19169 0128 4645     		cmpeq	r6, r8
 19170 012a 34BF     		ite	cc
 19171 012c 0123     		movcc	r3, #1
 19172 012e 0023     		movcs	r3, #0
 19173              	.LVL1422:
3304:src/xeq.c     **** 		} else
ARM GAS  /tmp/ccQQPlfu.s 			page 518


 19174              		.loc 1 3304 16 view .LVU4951
 19175 0130 94E7     		b	.L1348
 19176              	.LVL1423:
 19177              	.L1358:
3304:src/xeq.c     **** 		} else
 19178              		.loc 1 3304 16 view .LVU4952
 19179              	.LBE2973:
3333:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19180              		.loc 1 3333 15 is_stmt 1 discriminator 2 view .LVU4953
3333:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19181              		.loc 1 3333 25 is_stmt 0 discriminator 2 view .LVU4954
 19182 0132 0343     		orrs	r3, r0, r3
 19183              	.LVL1424:
3333:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19184              		.loc 1 3333 25 discriminator 2 view .LVU4955
 19185 0134 14BF     		ite	ne
 19186 0136 0120     		movne	r0, #1
 19187              	.LVL1425:
3333:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19188              		.loc 1 3333 25 discriminator 2 view .LVU4956
 19189 0138 0020     		moveq	r0, #0
 19190 013a 9CE7     		b	.L1353
 19191              	.LVL1426:
 19192              	.L1357:
3334:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19193              		.loc 1 3334 15 is_stmt 1 discriminator 1 view .LVU4957
3334:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19194              		.loc 1 3334 26 is_stmt 0 discriminator 1 view .LVU4958
 19195 013c 0343     		orrs	r3, r0, r3
 19196              	.LVL1427:
3334:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19197              		.loc 1 3334 26 discriminator 1 view .LVU4959
 19198 013e 0CBF     		ite	eq
 19199 0140 0120     		moveq	r0, #1
 19200              	.LVL1428:
3334:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19201              		.loc 1 3334 26 discriminator 1 view .LVU4960
 19202 0142 0020     		movne	r0, #0
 19203 0144 97E7     		b	.L1353
 19204              	.LVL1429:
 19205              	.L1363:
3335:src/xeq.c     **** 	default:	a = 0;			break;
 19206              		.loc 1 3335 26 view .LVU4961
 19207 0146 0120     		movs	r0, #1
 19208              	.LVL1430:
3335:src/xeq.c     **** 	default:	a = 0;			break;
 19209              		.loc 1 3335 26 view .LVU4962
 19210 0148 95E7     		b	.L1353
 19211              	.LVL1431:
 19212              	.L1361:
 19213              	.LBB2974:
3335:src/xeq.c     **** 	default:	a = 0;			break;
 19214              		.loc 1 3335 26 view .LVU4963
 19215 014a 1346     		mov	r3, r2
3298:src/xeq.c     **** 
 19216              		.loc 1 3298 24 view .LVU4964
 19217 014c 0120     		movs	r0, #1
ARM GAS  /tmp/ccQQPlfu.s 			page 519


 19218 014e D9E7     		b	.L1345
 19219              	.LVL1432:
 19220              	.L1370:
3298:src/xeq.c     **** 
 19221              		.loc 1 3298 24 view .LVU4965
 19222              	.LBE2974:
 19223              	.LBB2975:
3319:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
 19224              		.loc 1 3319 4 is_stmt 1 view .LVU4966
 19225 0150 0AA9     		add	r1, sp, #40
 19226 0152 0846     		mov	r0, r1
 19227 0154 FFF7FEFF 		bl	decNumberRnd
 19228              	.LVL1433:
3320:src/xeq.c     **** 				decNumberRnd(&t, &t);
 19229              		.loc 1 3320 4 view .LVU4967
3320:src/xeq.c     **** 				decNumberRnd(&t, &t);
 19230              		.loc 1 3320 7 is_stmt 0 view .LVU4968
 19231 0158 B8F5FA6F 		cmp	r8, #2000
 19232 015c A4DA     		bge	.L1351
3321:src/xeq.c     **** 		}
 19233              		.loc 1 3321 5 is_stmt 1 view .LVU4969
 19234 015e 01A9     		add	r1, sp, #4
 19235 0160 0846     		mov	r0, r1
 19236 0162 FFF7FEFF 		bl	decNumberRnd
 19237              	.LVL1434:
 19238 0166 9FE7     		b	.L1351
 19239              	.L1372:
 19240              		.align	2
 19241              	.L1371:
 19242 0168 00000000 		.word	StateWhileOn
 19243 016c 00000000 		.word	main_ram
 19244              	.LBE2975:
 19245              		.cfi_endproc
 19246              	.LFE187:
 19248              		.section	.text.do_ztst,"ax",%progbits
 19249              		.align	1
 19250              		.p2align 2,,3
 19251              		.syntax unified
 19252              		.thumb
 19253              		.thumb_func
 19254              		.fpu fpv4-sp-d16
 19256              	do_ztst:
 19257              	.LVL1435:
 19258              	.LFB190:
3365:src/xeq.c     **** 	decNumber x, y;
 19259              		.loc 1 3365 79 view -0
 19260              		.cfi_startproc
 19261              		@ args = 0, pretend = 0, frame = 72
 19262              		@ frame_needed = 0, uses_anonymous_args = 0
3366:src/xeq.c     **** 
 19263              		.loc 1 3366 2 view .LVU4971
3368:src/xeq.c     **** 	if (is_intmode()) {
 19264              		.loc 1 3368 2 view .LVU4972
 19265              	.LBB2993:
 19266              	.LBI2993:
1326:src/xeq.c     **** 	process_cmdline();
 19267              		.loc 1 1326 6 view .LVU4973
ARM GAS  /tmp/ccQQPlfu.s 			page 520


 19268              	.LBE2993:
1327:src/xeq.c     **** 	set_lift();
 19269              		.loc 1 1327 2 view .LVU4974
 19270              	.LBB3008:
 19271              	.LBB2994:
 19272              	.LBI2994:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 19273              		.loc 1 1220 6 view .LVU4975
 19274              	.LBB2995:
1221:src/xeq.c     **** 
 19275              		.loc 1 1221 2 view .LVU4976
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19276              		.loc 1 1223 2 view .LVU4977
 19277              	.LBE2995:
 19278              	.LBE2994:
 19279              	.LBE3008:
3365:src/xeq.c     **** 	decNumber x, y;
 19280              		.loc 1 3365 79 is_stmt 0 view .LVU4978
 19281 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 19282              		.cfi_def_cfa_offset 20
 19283              		.cfi_offset 4, -20
 19284              		.cfi_offset 5, -16
 19285              		.cfi_offset 6, -12
 19286              		.cfi_offset 7, -8
 19287              		.cfi_offset 14, -4
 19288              	.LBB3009:
 19289              	.LBB2999:
 19290              	.LBB2996:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19291              		.loc 1 1223 6 view .LVU4979
 19292 0002 2C4C     		ldr	r4, .L1392
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19293              		.loc 1 1223 5 view .LVU4980
 19294 0004 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 19295              	.LBE2996:
 19296              	.LBE2999:
 19297              	.LBE3009:
3365:src/xeq.c     **** 	decNumber x, y;
 19298              		.loc 1 3365 79 view .LVU4981
 19299 0006 93B0     		sub	sp, sp, #76
 19300              		.cfi_def_cfa_offset 96
3365:src/xeq.c     **** 	decNumber x, y;
 19301              		.loc 1 3365 79 view .LVU4982
 19302 0008 0546     		mov	r5, r0
 19303 000a 0F46     		mov	r7, r1
 19304 000c 1646     		mov	r6, r2
 19305              	.LBB3010:
 19306              	.LBB3000:
 19307              	.LBB2997:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19308              		.loc 1 1223 5 view .LVU4983
 19309 000e 002B     		cmp	r3, #0
 19310 0010 3FD1     		bne	.L1389
 19311              	.LVL1436:
 19312              	.L1374:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19313              		.loc 1 1223 5 view .LVU4984
ARM GAS  /tmp/ccQQPlfu.s 			page 521


 19314              	.LBE2997:
 19315              	.LBE3000:
 19316              	.LBE3010:
1328:src/xeq.c     **** }
 19317              		.loc 1 1328 2 is_stmt 1 view .LVU4985
 19318              	.LBB3011:
 19319              	.LBB3001:
 19320              	.LBI3001:
 761:src/xeq.c     ****     State2.state_lift = 1;
 19321              		.loc 1 761 6 view .LVU4986
 19322              	.LBB3002:
 762:src/xeq.c     **** }
 19323              		.loc 1 762 5 view .LVU4987
 762:src/xeq.c     **** }
 19324              		.loc 1 762 23 is_stmt 0 view .LVU4988
 19325 0012 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 19326              	.LBE3002:
 19327              	.LBE3001:
 19328              	.LBE3011:
3369:src/xeq.c     **** 		bad_mode_error();
 19329              		.loc 1 3369 6 view .LVU4989
 19330 0014 284A     		ldr	r2, .L1392+4
 19331              	.LBB3012:
 19332              	.LBB3005:
 19333              	.LBB3003:
 762:src/xeq.c     **** }
 19334              		.loc 1 762 23 view .LVU4990
 19335 0016 43F04003 		orr	r3, r3, #64
 19336              	.LBE3003:
 19337              	.LBE3005:
 19338              	.LBE3012:
3369:src/xeq.c     **** 		bad_mode_error();
 19339              		.loc 1 3369 6 view .LVU4991
 19340 001a 1268     		ldr	r2, [r2]
 19341              	.LBB3013:
 19342              	.LBB3006:
 19343              	.LBB3004:
 762:src/xeq.c     **** }
 19344              		.loc 1 762 23 view .LVU4992
 19345 001c E375     		strb	r3, [r4, #23]
 19346              	.LBE3004:
 19347              	.LBE3006:
 19348              	.LBE3013:
3369:src/xeq.c     **** 		bad_mode_error();
 19349              		.loc 1 3369 2 is_stmt 1 view .LVU4993
3369:src/xeq.c     **** 		bad_mode_error();
 19350              		.loc 1 3369 6 is_stmt 0 view .LVU4994
 19351 001e 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3369:src/xeq.c     **** 		bad_mode_error();
 19352              		.loc 1 3369 5 view .LVU4995
 19353 0022 DB07     		lsls	r3, r3, #31
 19354 0024 06D5     		bpl	.L1375
3370:src/xeq.c     **** 		return;
 19355              		.loc 1 3370 3 is_stmt 1 view .LVU4996
 19356              	.LBB3014:
 19357              	.LBI3014:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
ARM GAS  /tmp/ccQQPlfu.s 			page 522


 19358              		.loc 1 569 6 view .LVU4997
 19359              	.LBE3014:
 570:src/xeq.c     **** }
 19360              		.loc 1 570 2 view .LVU4998
 19361              	.LVL1437:
 19362              	.LBB3019:
 19363              	.LBB3015:
 19364              	.LBI3015:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19365              		.loc 1 540 5 view .LVU4999
 19366              	.LBB3016:
 541:src/xeq.c     **** 		Error = e;
 19367              		.loc 1 541 2 view .LVU5000
 541:src/xeq.c     **** 		Error = e;
 19368              		.loc 1 541 12 is_stmt 0 view .LVU5001
 19369 0026 254B     		ldr	r3, .L1392+8
 541:src/xeq.c     **** 		Error = e;
 19370              		.loc 1 541 5 view .LVU5002
 19371 0028 1A68     		ldr	r2, [r3]
 19372 002a 0AB9     		cbnz	r2, .L1373
 19373              	.LVL1438:
 19374              	.LBB3017:
 19375              	.LBI3017:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19376              		.loc 1 540 5 is_stmt 1 view .LVU5003
 19377              	.LBB3018:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 19378              		.loc 1 542 3 view .LVU5004
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 19379              		.loc 1 542 9 is_stmt 0 view .LVU5005
 19380 002c 0D22     		movs	r2, #13
 19381 002e 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 19382              		.loc 1 543 3 is_stmt 1 view .LVU5006
 19383              	.LVL1439:
 19384              	.L1373:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 19385              		.loc 1 543 3 is_stmt 0 view .LVU5007
 19386              	.LBE3018:
 19387              	.LBE3017:
 19388              	.LBE3016:
 19389              	.LBE3015:
 19390              	.LBE3019:
3379:src/xeq.c     **** 
 19391              		.loc 1 3379 1 view .LVU5008
 19392 0030 13B0     		add	sp, sp, #76
 19393              		.cfi_remember_state
 19394              		.cfi_def_cfa_offset 20
 19395              		@ sp needed
 19396 0032 F0BD     		pop	{r4, r5, r6, r7, pc}
 19397              	.LVL1440:
 19398              	.L1375:
 19399              		.cfi_restore_state
3373:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
 19400              		.loc 1 3373 2 is_stmt 1 view .LVU5009
 19401              	.LBB3020:
 19402              	.LBI3020:
ARM GAS  /tmp/ccQQPlfu.s 			page 523


 848:src/xeq.c     **** 	getX(x);
 19403              		.loc 1 848 6 view .LVU5010
 19404              	.LBE3020:
 849:src/xeq.c     **** 	getY(y);
 19405              		.loc 1 849 2 view .LVU5011
 19406              	.LBB3025:
 19407              	.LBB3021:
 19408              	.LBI3021:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19409              		.loc 1 818 12 view .LVU5012
 19410              	.LBB3022:
 819:src/xeq.c     **** }
 19411              		.loc 1 819 2 view .LVU5013
 819:src/xeq.c     **** }
 19412              		.loc 1 819 9 is_stmt 0 view .LVU5014
 19413 0034 6421     		movs	r1, #100
 19414 0036 6846     		mov	r0, sp
 19415 0038 FFF7FEFF 		bl	getRegister
 19416              	.LVL1441:
 819:src/xeq.c     **** }
 19417              		.loc 1 819 9 view .LVU5015
 19418              	.LBE3022:
 19419              	.LBE3021:
 19420              	.LBE3025:
 850:src/xeq.c     **** }
 19421              		.loc 1 850 2 is_stmt 1 view .LVU5016
 19422              	.LBB3026:
 19423              	.LBB3023:
 19424              	.LBI3023:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 19425              		.loc 1 826 6 view .LVU5017
 19426              	.LBB3024:
 827:src/xeq.c     **** }
 19427              		.loc 1 827 2 view .LVU5018
 19428 003c 09A8     		add	r0, sp, #36
 19429              	.LVL1442:
 827:src/xeq.c     **** }
 19430              		.loc 1 827 2 is_stmt 0 view .LVU5019
 19431 003e 6521     		movs	r1, #101
 19432 0040 FFF7FEFF 		bl	getRegister
 19433              	.LVL1443:
 827:src/xeq.c     **** }
 19434              		.loc 1 827 2 view .LVU5020
 19435              	.LBE3024:
 19436              	.LBE3023:
 19437              	.LBE3026:
3374:src/xeq.c     **** 		fin_tst(0);
 19438              		.loc 1 3374 2 is_stmt 1 view .LVU5021
3374:src/xeq.c     **** 		fin_tst(0);
 19439              		.loc 1 3374 25 is_stmt 0 view .LVU5022
 19440 0044 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 19441 0048 9DF82C20 		ldrb	r2, [sp, #44]	@ zero_extendqisi2
 19442 004c 1343     		orrs	r3, r3, r2
 19443 004e 13F0300F 		tst	r3, #48
 19444 0052 13D1     		bne	.L1377
3374:src/xeq.c     **** 		fin_tst(0);
 19445              		.loc 1 3374 47 discriminator 2 view .LVU5023
ARM GAS  /tmp/ccQQPlfu.s 			page 524


 19446 0054 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 19447 0056 13F0300F 		tst	r3, #48
 19448 005a 0FD1     		bne	.L1377
3374:src/xeq.c     **** 		fin_tst(0);
 19449              		.loc 1 3374 69 discriminator 3 view .LVU5024
 19450 005c 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 19451 005e 13F0300F 		tst	r3, #48
 19452 0062 0BD1     		bne	.L1377
3378:src/xeq.c     **** }
 19453              		.loc 1 3378 2 is_stmt 1 view .LVU5025
3378:src/xeq.c     **** }
 19454              		.loc 1 3378 29 is_stmt 0 view .LVU5026
 19455 0064 2946     		mov	r1, r5
 19456 0066 6846     		mov	r0, sp
 19457 0068 FFF7FEFF 		bl	dn_eq
 19458              	.LVL1444:
3378:src/xeq.c     **** }
 19459              		.loc 1 3378 25 view .LVU5027
 19460 006c 003E     		subs	r6, r6, #0
 19461 006e 18BF     		it	ne
 19462 0070 0126     		movne	r6, #1
3378:src/xeq.c     **** }
 19463              		.loc 1 3378 43 view .LVU5028
 19464 0072 A8B9     		cbnz	r0, .L1390
 19465              	.L1380:
3378:src/xeq.c     **** }
 19466              		.loc 1 3378 2 discriminator 6 view .LVU5029
 19467 0074 3046     		mov	r0, r6
 19468 0076 FFF7FEFF 		bl	fin_tst
 19469              	.LVL1445:
 19470 007a D9E7     		b	.L1373
 19471              	.L1377:
3375:src/xeq.c     **** 		return;
 19472              		.loc 1 3375 3 is_stmt 1 view .LVU5030
 19473              	.LVL1446:
 19474              	.LBB3027:
 19475              	.LBI3027:
2563:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 19476              		.loc 1 2563 6 view .LVU5031
 19477              	.LBB3028:
2564:src/xeq.c     **** 	if (Running || XromRunning) {
 19478              		.loc 1 2564 2 view .LVU5032
2565:src/xeq.c     **** 		if (! a && incpc())
 19479              		.loc 1 2565 2 view .LVU5033
2565:src/xeq.c     **** 		if (! a && incpc())
 19480              		.loc 1 2565 6 is_stmt 0 view .LVU5034
 19481 007c 104A     		ldr	r2, .L1392+12
2565:src/xeq.c     **** 		if (! a && incpc())
 19482              		.loc 1 2565 14 view .LVU5035
 19483 007e 114B     		ldr	r3, .L1392+16
 19484 0080 1268     		ldr	r2, [r2]
 19485 0082 1B68     		ldr	r3, [r3]
 19486 0084 1343     		orrs	r3, r2, r3
 19487 0086 07D1     		bne	.L1391
2570:src/xeq.c     **** #ifdef INFRARED
 19488              		.loc 1 2570 3 is_stmt 1 view .LVU5036
2570:src/xeq.c     **** #ifdef INFRARED
ARM GAS  /tmp/ccQQPlfu.s 			page 525


 19489              		.loc 1 2570 11 is_stmt 0 view .LVU5037
 19490 0088 0F4B     		ldr	r3, .L1392+20
 19491 008a 104A     		ldr	r2, .L1392+24
 19492 008c 1A60     		str	r2, [r3]
 19493              	.LBE3028:
 19494              	.LBE3027:
3379:src/xeq.c     **** 
 19495              		.loc 1 3379 1 view .LVU5038
 19496 008e 13B0     		add	sp, sp, #76
 19497              		.cfi_remember_state
 19498              		.cfi_def_cfa_offset 20
 19499              		@ sp needed
 19500 0090 F0BD     		pop	{r4, r5, r6, r7, pc}
 19501              	.LVL1447:
 19502              	.L1389:
 19503              		.cfi_restore_state
 19504              	.LBB3030:
 19505              	.LBB3007:
 19506              	.LBB2998:
3379:src/xeq.c     **** 
 19507              		.loc 1 3379 1 view .LVU5039
 19508 0092 FFF7FEFF 		bl	process_cmdline.part.0
 19509              	.LVL1448:
3379:src/xeq.c     **** 
 19510              		.loc 1 3379 1 view .LVU5040
 19511 0096 BCE7     		b	.L1374
 19512              	.LVL1449:
 19513              	.L1391:
3379:src/xeq.c     **** 
 19514              		.loc 1 3379 1 view .LVU5041
 19515              	.LBE2998:
 19516              	.LBE3007:
 19517              	.LBE3030:
 19518              	.LBB3031:
 19519              	.LBB3029:
2566:src/xeq.c     **** 			decpc();
 19520              		.loc 1 2566 3 is_stmt 1 view .LVU5042
 19521 0098 FFF7FEFF 		bl	fin_tst.part.0
 19522              	.LVL1450:
 19523              	.LBE3029:
 19524              	.LBE3031:
3379:src/xeq.c     **** 
 19525              		.loc 1 3379 1 is_stmt 0 view .LVU5043
 19526 009c 13B0     		add	sp, sp, #76
 19527              		.cfi_remember_state
 19528              		.cfi_def_cfa_offset 20
 19529              		@ sp needed
 19530 009e F0BD     		pop	{r4, r5, r6, r7, pc}
 19531              	.LVL1451:
 19532              	.L1390:
 19533              		.cfi_restore_state
3378:src/xeq.c     **** }
 19534              		.loc 1 3378 46 discriminator 1 view .LVU5044
 19535 00a0 3946     		mov	r1, r7
 19536 00a2 09A8     		add	r0, sp, #36
 19537 00a4 FFF7FEFF 		bl	dn_eq
 19538              	.LVL1452:
ARM GAS  /tmp/ccQQPlfu.s 			page 526


 19539 00a8 0028     		cmp	r0, #0
 19540 00aa 18BF     		it	ne
 19541 00ac 86F00106 		eorne	r6, r6, #1
 19542 00b0 E0E7     		b	.L1380
 19543              	.L1393:
 19544 00b2 00BF     		.align	2
 19545              	.L1392:
 19546 00b4 00000000 		.word	StateWhileOn
 19547 00b8 00000000 		.word	main_ram
 19548 00bc 00000000 		.word	Error
 19549 00c0 00000000 		.word	Running
 19550 00c4 00000000 		.word	XromRunning
 19551 00c8 00000000 		.word	DispMsg
 19552 00cc 00000000 		.word	.LC3
 19553              		.cfi_endproc
 19554              	.LFE190:
 19556              		.section	.text.check_zero,"ax",%progbits
 19557              		.align	1
 19558              		.p2align 2,,3
 19559              		.global	check_zero
 19560              		.syntax unified
 19561              		.thumb
 19562              		.thumb_func
 19563              		.fpu fpv4-sp-d16
 19565              	check_zero:
 19566              	.LVL1453:
 19567              	.LFB188:
3342:src/xeq.c     **** 	int neg;
 19568              		.loc 1 3342 32 is_stmt 1 view -0
 19569              		.cfi_startproc
 19570              		@ args = 0, pretend = 0, frame = 40
 19571              		@ frame_needed = 0, uses_anonymous_args = 0
3343:src/xeq.c     **** 	int zero;
 19572              		.loc 1 3343 2 view .LVU5046
3344:src/xeq.c     **** 
 19573              		.loc 1 3344 2 view .LVU5047
3346:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19574              		.loc 1 3346 2 view .LVU5048
3346:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19575              		.loc 1 3346 6 is_stmt 0 view .LVU5049
 19576 0000 1A4B     		ldr	r3, .L1409
3342:src/xeq.c     **** 	int neg;
 19577              		.loc 1 3342 32 view .LVU5050
 19578 0002 10B5     		push	{r4, lr}
 19579              		.cfi_def_cfa_offset 8
 19580              		.cfi_offset 4, -8
 19581              		.cfi_offset 14, -4
3346:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19582              		.loc 1 3346 6 view .LVU5051
 19583 0004 1B68     		ldr	r3, [r3]
 19584 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3346:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19585              		.loc 1 3346 5 view .LVU5052
 19586 000a DB07     		lsls	r3, r3, #31
3342:src/xeq.c     **** 	int neg;
 19587              		.loc 1 3342 32 view .LVU5053
 19588 000c 8AB0     		sub	sp, sp, #40
ARM GAS  /tmp/ccQQPlfu.s 			page 527


 19589              		.cfi_def_cfa_offset 48
3342:src/xeq.c     **** 	int neg;
 19590              		.loc 1 3342 32 view .LVU5054
 19591 000e 0446     		mov	r4, r0
3346:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19592              		.loc 1 3346 5 view .LVU5055
 19593 0010 15D5     		bpl	.L1395
 19594              	.LBB3032:
3347:src/xeq.c     **** 		zero = (xv == 0);
 19595              		.loc 1 3347 3 is_stmt 1 view .LVU5056
 19596              	.LBB3033:
 19597              	.LBI3033:
1436:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 19598              		.loc 1 1436 15 view .LVU5057
 19599              	.LBB3034:
1437:src/xeq.c     **** }
 19600              		.loc 1 1437 2 view .LVU5058
1437:src/xeq.c     **** }
 19601              		.loc 1 1437 9 is_stmt 0 view .LVU5059
 19602 0012 6420     		movs	r0, #100
 19603              	.LVL1454:
1437:src/xeq.c     **** }
 19604              		.loc 1 1437 9 view .LVU5060
 19605 0014 FFF7FEFF 		bl	get_reg_n_int
 19606              	.LVL1455:
 19607              	.LBE3034:
 19608              	.LBE3033:
3347:src/xeq.c     **** 		zero = (xv == 0);
 19609              		.loc 1 3347 37 view .LVU5061
 19610 0018 6A46     		mov	r2, sp
 19611 001a FFF7FEFF 		bl	extract_value
 19612              	.LVL1456:
3348:src/xeq.c     **** 	} else {
 19613              		.loc 1 3348 3 is_stmt 1 view .LVU5062
3348:src/xeq.c     **** 	} else {
 19614              		.loc 1 3348 14 is_stmt 0 view .LVU5063
 19615 001e 50EA0103 		orrs	r3, r0, r1
 19616 0022 0CBF     		ite	eq
 19617 0024 0120     		moveq	r0, #1
 19618              	.LVL1457:
3348:src/xeq.c     **** 	} else {
 19619              		.loc 1 3348 14 view .LVU5064
 19620 0026 0020     		movne	r0, #0
 19621              	.LVL1458:
3348:src/xeq.c     **** 	} else {
 19622              		.loc 1 3348 14 view .LVU5065
 19623              	.LBE3032:
3355:src/xeq.c     **** 		fin_tst(zero && !neg);
 19624              		.loc 1 3355 2 is_stmt 1 view .LVU5066
3355:src/xeq.c     **** 		fin_tst(zero && !neg);
 19625              		.loc 1 3355 5 is_stmt 0 view .LVU5067
 19626 0028 A12C     		cmp	r4, #161
 19627 002a 15D0     		beq	.L1408
 19628              	.L1397:
3358:src/xeq.c     **** }
 19629              		.loc 1 3358 3 is_stmt 1 view .LVU5068
 19630 002c 18B1     		cbz	r0, .L1400
ARM GAS  /tmp/ccQQPlfu.s 			page 528


3358:src/xeq.c     **** }
 19631              		.loc 1 3358 3 is_stmt 0 discriminator 1 view .LVU5069
 19632 002e 0098     		ldr	r0, [sp]
 19633              	.LVL1459:
3358:src/xeq.c     **** }
 19634              		.loc 1 3358 3 discriminator 1 view .LVU5070
 19635 0030 0038     		subs	r0, r0, #0
 19636 0032 18BF     		it	ne
 19637 0034 0120     		movne	r0, #1
 19638              	.L1400:
3358:src/xeq.c     **** }
 19639              		.loc 1 3358 3 discriminator 6 view .LVU5071
 19640 0036 FFF7FEFF 		bl	fin_tst
 19641              	.LVL1460:
3359:src/xeq.c     **** 
 19642              		.loc 1 3359 1 discriminator 6 view .LVU5072
 19643 003a 0AB0     		add	sp, sp, #40
 19644              		.cfi_remember_state
 19645              		.cfi_def_cfa_offset 8
 19646              		@ sp needed
 19647 003c 10BD     		pop	{r4, pc}
 19648              	.LVL1461:
 19649              	.L1395:
 19650              		.cfi_restore_state
 19651              	.LBB3035:
3350:src/xeq.c     **** 		getX(&x);
 19652              		.loc 1 3350 3 is_stmt 1 view .LVU5073
3351:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
 19653              		.loc 1 3351 3 view .LVU5074
 19654              	.LBB3036:
 19655              	.LBI3036:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19656              		.loc 1 818 12 view .LVU5075
 19657              	.LBB3037:
 819:src/xeq.c     **** }
 19658              		.loc 1 819 2 view .LVU5076
 819:src/xeq.c     **** }
 19659              		.loc 1 819 9 is_stmt 0 view .LVU5077
 19660 003e 6421     		movs	r1, #100
 19661 0040 01A8     		add	r0, sp, #4
 19662              	.LVL1462:
 819:src/xeq.c     **** }
 19663              		.loc 1 819 9 view .LVU5078
 19664 0042 FFF7FEFF 		bl	getRegister
 19665              	.LVL1463:
 819:src/xeq.c     **** }
 19666              		.loc 1 819 9 view .LVU5079
 19667              	.LBE3037:
 19668              	.LBE3036:
3352:src/xeq.c     **** 		zero = dn_eq0(&x);
 19669              		.loc 1 3352 3 is_stmt 1 view .LVU5080
3352:src/xeq.c     **** 		zero = dn_eq0(&x);
 19670              		.loc 1 3352 9 is_stmt 0 view .LVU5081
 19671 0046 9DF90C30 		ldrsb	r3, [sp, #12]
3353:src/xeq.c     **** 	}
 19672              		.loc 1 3353 10 view .LVU5082
 19673 004a 01A8     		add	r0, sp, #4
ARM GAS  /tmp/ccQQPlfu.s 			page 529


3352:src/xeq.c     **** 		zero = dn_eq0(&x);
 19674              		.loc 1 3352 9 view .LVU5083
 19675 004c DB0F     		lsrs	r3, r3, #31
3352:src/xeq.c     **** 		zero = dn_eq0(&x);
 19676              		.loc 1 3352 7 view .LVU5084
 19677 004e 0093     		str	r3, [sp]
3353:src/xeq.c     **** 	}
 19678              		.loc 1 3353 3 is_stmt 1 view .LVU5085
3353:src/xeq.c     **** 	}
 19679              		.loc 1 3353 10 is_stmt 0 view .LVU5086
 19680 0050 FFF7FEFF 		bl	dn_eq0
 19681              	.LVL1464:
3353:src/xeq.c     **** 	}
 19682              		.loc 1 3353 10 view .LVU5087
 19683              	.LBE3035:
3355:src/xeq.c     **** 		fin_tst(zero && !neg);
 19684              		.loc 1 3355 2 is_stmt 1 view .LVU5088
3355:src/xeq.c     **** 		fin_tst(zero && !neg);
 19685              		.loc 1 3355 5 is_stmt 0 view .LVU5089
 19686 0054 A12C     		cmp	r4, #161
 19687 0056 E9D1     		bne	.L1397
 19688              	.L1408:
3356:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19689              		.loc 1 3356 3 is_stmt 1 view .LVU5090
 19690 0058 0028     		cmp	r0, #0
 19691 005a ECD0     		beq	.L1400
3356:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19692              		.loc 1 3356 3 is_stmt 0 discriminator 1 view .LVU5091
 19693 005c 0098     		ldr	r0, [sp]
 19694              	.LVL1465:
3356:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19695              		.loc 1 3356 3 discriminator 1 view .LVU5092
 19696 005e B0FA80F0 		clz	r0, r0
 19697 0062 4009     		lsrs	r0, r0, #5
3358:src/xeq.c     **** }
 19698              		.loc 1 3358 3 discriminator 1 view .LVU5093
 19699 0064 FFF7FEFF 		bl	fin_tst
 19700              	.LVL1466:
3359:src/xeq.c     **** 
 19701              		.loc 1 3359 1 discriminator 1 view .LVU5094
 19702 0068 0AB0     		add	sp, sp, #40
 19703              		.cfi_def_cfa_offset 8
 19704              		@ sp needed
 19705 006a 10BD     		pop	{r4, pc}
 19706              	.L1410:
 19707              		.align	2
 19708              	.L1409:
 19709 006c 00000000 		.word	main_ram
 19710              		.cfi_endproc
 19711              	.LFE188:
 19713              		.section	.text.cmdtest,"ax",%progbits
 19714              		.align	1
 19715              		.p2align 2,,3
 19716              		.global	cmdtest
 19717              		.syntax unified
 19718              		.thumb
 19719              		.thumb_func
ARM GAS  /tmp/ccQQPlfu.s 			page 530


 19720              		.fpu fpv4-sp-d16
 19722              	cmdtest:
 19723              	.LVL1467:
 19724              	.LFB189:
3361:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
 19725              		.loc 1 3361 46 is_stmt 1 view -0
 19726              		.cfi_startproc
 19727              		@ args = 0, pretend = 0, frame = 0
 19728              		@ frame_needed = 0, uses_anonymous_args = 0
 19729              		@ link register save eliminated.
3362:src/xeq.c     **** }
 19730              		.loc 1 3362 2 view .LVU5096
3362:src/xeq.c     **** }
 19731              		.loc 1 3362 31 is_stmt 0 view .LVU5097
 19732 0000 2D39     		subs	r1, r1, #45
 19733              	.LVL1468:
3362:src/xeq.c     **** }
 19734              		.loc 1 3362 2 view .LVU5098
 19735 0002 C9B2     		uxtb	r1, r1
 19736 0004 FFF7FEBF 		b	do_tst
 19737              	.LVL1469:
3362:src/xeq.c     **** }
 19738              		.loc 1 3362 2 view .LVU5099
 19739              		.cfi_endproc
 19740              	.LFE189:
 19742              		.section	.text.cmdztest,"ax",%progbits
 19743              		.align	1
 19744              		.p2align 2,,3
 19745              		.global	cmdztest
 19746              		.syntax unified
 19747              		.thumb
 19748              		.thumb_func
 19749              		.fpu fpv4-sp-d16
 19751              	cmdztest:
 19752              	.LVL1470:
 19753              	.LFB191:
3381:src/xeq.c     **** 	decNumber re, im;
 19754              		.loc 1 3381 47 is_stmt 1 view -0
 19755              		.cfi_startproc
 19756              		@ args = 0, pretend = 0, frame = 72
 19757              		@ frame_needed = 0, uses_anonymous_args = 0
3382:src/xeq.c     **** 	getRegister(&re, arg);
 19758              		.loc 1 3382 2 view .LVU5101
3383:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19759              		.loc 1 3383 2 view .LVU5102
3381:src/xeq.c     **** 	decNumber re, im;
 19760              		.loc 1 3381 47 is_stmt 0 view .LVU5103
 19761 0000 30B5     		push	{r4, r5, lr}
 19762              		.cfi_def_cfa_offset 12
 19763              		.cfi_offset 4, -12
 19764              		.cfi_offset 5, -8
 19765              		.cfi_offset 14, -4
 19766 0002 0546     		mov	r5, r0
 19767 0004 93B0     		sub	sp, sp, #76
 19768              		.cfi_def_cfa_offset 88
3381:src/xeq.c     **** 	decNumber re, im;
 19769              		.loc 1 3381 47 view .LVU5104
ARM GAS  /tmp/ccQQPlfu.s 			page 531


 19770 0006 0C46     		mov	r4, r1
3383:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19771              		.loc 1 3383 2 view .LVU5105
 19772 0008 6846     		mov	r0, sp
 19773              	.LVL1471:
3383:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19774              		.loc 1 3383 2 view .LVU5106
 19775 000a 2946     		mov	r1, r5
 19776              	.LVL1472:
3383:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19777              		.loc 1 3383 2 view .LVU5107
 19778 000c FFF7FEFF 		bl	getRegister
 19779              	.LVL1473:
3384:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
 19780              		.loc 1 3384 2 is_stmt 1 view .LVU5108
 19781 0010 691C     		adds	r1, r5, #1
 19782 0012 09A8     		add	r0, sp, #36
 19783 0014 FFF7FEFF 		bl	getRegister
 19784              	.LVL1474:
3385:src/xeq.c     **** }
 19785              		.loc 1 3385 2 view .LVU5109
3385:src/xeq.c     **** }
 19786              		.loc 1 3385 37 is_stmt 0 view .LVU5110
 19787 0018 A4F13402 		sub	r2, r4, #52
3385:src/xeq.c     **** }
 19788              		.loc 1 3385 2 view .LVU5111
 19789 001c D2B2     		uxtb	r2, r2
 19790 001e 09A9     		add	r1, sp, #36
 19791 0020 6846     		mov	r0, sp
 19792 0022 FFF7FEFF 		bl	do_ztst
 19793              	.LVL1475:
3386:src/xeq.c     **** 
 19794              		.loc 1 3386 1 view .LVU5112
 19795 0026 13B0     		add	sp, sp, #76
 19796              		.cfi_def_cfa_offset 12
 19797              		@ sp needed
 19798 0028 30BD     		pop	{r4, r5, pc}
3386:src/xeq.c     **** 
 19799              		.loc 1 3386 1 view .LVU5113
 19800              		.cfi_endproc
 19801              	.LFE191:
 19803 002a 00BF     		.section	.text.cmdlincdec,"ax",%progbits
 19804              		.align	1
 19805              		.p2align 2,,3
 19806              		.global	cmdlincdec
 19807              		.syntax unified
 19808              		.thumb
 19809              		.thumb_func
 19810              		.fpu fpv4-sp-d16
 19812              	cmdlincdec:
 19813              	.LVL1476:
 19814              	.LFB193:
3416:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
 19815              		.loc 1 3416 49 is_stmt 1 view -0
 19816              		.cfi_startproc
 19817              		@ args = 0, pretend = 0, frame = 0
 19818              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQQPlfu.s 			page 532


 19819              		@ link register save eliminated.
3417:src/xeq.c     **** }
 19820              		.loc 1 3417 2 view .LVU5115
 19821 0000 A1F14101 		sub	r1, #65
 19822              	.LVL1477:
3417:src/xeq.c     **** }
 19823              		.loc 1 3417 2 is_stmt 0 view .LVU5116
 19824 0004 B1FA81F1 		clz	r1, r1
 19825 0008 4909     		lsrs	r1, r1, #5
 19826 000a FFF7FEBF 		b	incdec
 19827              	.LVL1478:
3417:src/xeq.c     **** }
 19828              		.loc 1 3417 2 view .LVU5117
 19829              		.cfi_endproc
 19830              	.LFE193:
 19832 000e 00BF     		.section	.text.cmdloopz,"ax",%progbits
 19833              		.align	1
 19834              		.p2align 2,,3
 19835              		.global	cmdloopz
 19836              		.syntax unified
 19837              		.thumb
 19838              		.thumb_func
 19839              		.fpu fpv4-sp-d16
 19841              	cmdloopz:
 19842              	.LVL1479:
 19843              	.LFB194:
3420:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 19844              		.loc 1 3420 47 is_stmt 1 view -0
 19845              		.cfi_startproc
 19846              		@ args = 0, pretend = 0, frame = 0
 19847              		@ frame_needed = 0, uses_anonymous_args = 0
3421:src/xeq.c     **** }
 19848              		.loc 1 3421 2 view .LVU5119
3420:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 19849              		.loc 1 3420 47 is_stmt 0 view .LVU5120
 19850 0000 08B5     		push	{r3, lr}
 19851              		.cfi_def_cfa_offset 8
 19852              		.cfi_offset 3, -8
 19853              		.cfi_offset 14, -4
3421:src/xeq.c     **** }
 19854              		.loc 1 3421 2 view .LVU5121
 19855 0002 A1F13F01 		sub	r1, #63
 19856              	.LVL1480:
3421:src/xeq.c     **** }
 19857              		.loc 1 3421 2 view .LVU5122
 19858 0006 B1FA81F1 		clz	r1, r1
 19859 000a 4909     		lsrs	r1, r1, #5
 19860 000c FFF7FEFF 		bl	incdec
 19861              	.LVL1481:
3422:src/xeq.c     **** 
 19862              		.loc 1 3422 1 view .LVU5123
 19863 0010 BDE80840 		pop	{r3, lr}
 19864              		.cfi_restore 14
 19865              		.cfi_restore 3
 19866              		.cfi_def_cfa_offset 0
3421:src/xeq.c     **** }
 19867              		.loc 1 3421 2 view .LVU5124
ARM GAS  /tmp/ccQQPlfu.s 			page 533


 19868 0014 FFF7FEBF 		b	fin_tst
 19869              	.LVL1482:
 19870              		.cfi_endproc
 19871              	.LFE194:
 19873              		.section	.text.cmdloop,"ax",%progbits
 19874              		.align	1
 19875              		.p2align 2,,3
 19876              		.global	cmdloop
 19877              		.syntax unified
 19878              		.thumb
 19879              		.thumb_func
 19880              		.fpu fpv4-sp-d16
 19882              	cmdloop:
 19883              	.LVL1483:
 19884              	.LFB195:
3424:src/xeq.c     **** 	if (is_intmode()) {
 19885              		.loc 1 3424 46 is_stmt 1 view -0
 19886              		.cfi_startproc
 19887              		@ args = 0, pretend = 0, frame = 184
 19888              		@ frame_needed = 0, uses_anonymous_args = 0
3425:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19889              		.loc 1 3425 2 view .LVU5126
3425:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19890              		.loc 1 3425 6 is_stmt 0 view .LVU5127
 19891 0000 7C4B     		ldr	r3, .L1457
3424:src/xeq.c     **** 	if (is_intmode()) {
 19892              		.loc 1 3424 46 view .LVU5128
 19893 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 19894              		.cfi_def_cfa_offset 20
 19895              		.cfi_offset 4, -20
 19896              		.cfi_offset 5, -16
 19897              		.cfi_offset 6, -12
 19898              		.cfi_offset 7, -8
 19899              		.cfi_offset 14, -4
3425:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19900              		.loc 1 3425 6 view .LVU5129
 19901 0004 1B68     		ldr	r3, [r3]
 19902 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3425:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19903              		.loc 1 3425 5 view .LVU5130
 19904 000a DB07     		lsls	r3, r3, #31
3424:src/xeq.c     **** 	if (is_intmode()) {
 19905              		.loc 1 3424 46 view .LVU5131
 19906 000c AFB0     		sub	sp, sp, #188
 19907              		.cfi_def_cfa_offset 208
3424:src/xeq.c     **** 	if (is_intmode()) {
 19908              		.loc 1 3424 46 view .LVU5132
 19909 000e 0C46     		mov	r4, r1
 19910 0010 0546     		mov	r5, r0
3425:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19911              		.loc 1 3425 5 view .LVU5133
 19912 0012 7BD4     		bmi	.L1449
 19913              	.LBB3038:
3447:src/xeq.c     **** 
 19914              		.loc 1 3447 3 is_stmt 1 view .LVU5134
3449:src/xeq.c     **** 
 19915              		.loc 1 3449 3 view .LVU5135
ARM GAS  /tmp/ccQQPlfu.s 			page 534


 19916 0014 2946     		mov	r1, r5
 19917              	.LVL1484:
3449:src/xeq.c     **** 
 19918              		.loc 1 3449 3 is_stmt 0 view .LVU5136
 19919 0016 6846     		mov	r0, sp
 19920              	.LVL1485:
3449:src/xeq.c     **** 
 19921              		.loc 1 3449 3 view .LVU5137
 19922 0018 FFF7FEFF 		bl	getRegister
 19923              	.LVL1486:
3453:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
 19924              		.loc 1 3453 3 is_stmt 1 view .LVU5138
 19925 001c 6946     		mov	r1, sp
 19926 001e 12A8     		add	r0, sp, #72
 19927 0020 FFF7FEFF 		bl	dn_abs
 19928              	.LVL1487:
3454:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
 19929              		.loc 1 3454 3 view .LVU5139
 19930 0024 12A9     		add	r1, sp, #72
 19931 0026 1BA8     		add	r0, sp, #108
 19932 0028 FFF7FEFF 		bl	decNumberTrunc
 19933              	.LVL1488:
3455:src/xeq.c     **** 		if (decNumberIsNegative(&x))
 19934              		.loc 1 3455 3 view .LVU5140
 19935 002c 1BAA     		add	r2, sp, #108
 19936 002e 12A9     		add	r1, sp, #72
 19937 0030 24A8     		add	r0, sp, #144
 19938 0032 FFF7FEFF 		bl	dn_subtract
 19939              	.LVL1489:
3456:src/xeq.c     **** 			dn_minus(&n, &n);
 19940              		.loc 1 3456 3 view .LVU5141
3456:src/xeq.c     **** 			dn_minus(&n, &n);
 19941              		.loc 1 3456 6 is_stmt 0 view .LVU5142
 19942 0036 9DF90830 		ldrsb	r3, [sp, #8]
 19943 003a 002B     		cmp	r3, #0
 19944 003c C0F29080 		blt	.L1450
 19945              	.L1427:
3458:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
 19946              		.loc 1 3458 3 is_stmt 1 view .LVU5143
 19947 0040 0322     		movs	r2, #3
 19948 0042 24A9     		add	r1, sp, #144
 19949 0044 09A8     		add	r0, sp, #36
 19950 0046 FFF7FEFF 		bl	dn_mulpow10
 19951              	.LVL1490:
3459:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
 19952              		.loc 1 3459 3 view .LVU5144
 19953 004a 09A9     		add	r1, sp, #36
 19954 004c 12A8     		add	r0, sp, #72
 19955 004e FFF7FEFF 		bl	decNumberTrunc
 19956              	.LVL1491:
3460:src/xeq.c     **** 		dn_mul100(&x, &i);
 19957              		.loc 1 3460 3 view .LVU5145
 19958 0052 09A9     		add	r1, sp, #36
 19959 0054 12AA     		add	r2, sp, #72
 19960 0056 0846     		mov	r0, r1
 19961 0058 FFF7FEFF 		bl	dn_subtract
 19962              	.LVL1492:
ARM GAS  /tmp/ccQQPlfu.s 			page 535


3461:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
 19963              		.loc 1 3461 3 view .LVU5146
 19964 005c 09A9     		add	r1, sp, #36
 19965 005e 6846     		mov	r0, sp
 19966 0060 FFF7FEFF 		bl	dn_mul100
 19967              	.LVL1493:
3462:src/xeq.c     **** 		if (dn_eq0(&i))
 19968              		.loc 1 3462 3 view .LVU5147
 19969 0064 6946     		mov	r1, sp
 19970 0066 09A8     		add	r0, sp, #36
 19971 0068 FFF7FEFF 		bl	decNumberTrunc
 19972              	.LVL1494:
3463:src/xeq.c     **** 			dn_1(&i);
 19973              		.loc 1 3463 3 view .LVU5148
3463:src/xeq.c     **** 			dn_1(&i);
 19974              		.loc 1 3463 7 is_stmt 0 view .LVU5149
 19975 006c 09A8     		add	r0, sp, #36
 19976 006e FFF7FEFF 		bl	dn_eq0
 19977              	.LVL1495:
3463:src/xeq.c     **** 			dn_1(&i);
 19978              		.loc 1 3463 6 view .LVU5150
 19979 0072 98BB     		cbnz	r0, .L1451
3466:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19980              		.loc 1 3466 3 is_stmt 1 view .LVU5151
3467:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19981              		.loc 1 3467 4 is_stmt 0 view .LVU5152
 19982 0074 1BA9     		add	r1, sp, #108
3466:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19983              		.loc 1 3466 6 view .LVU5153
 19984 0076 3B2C     		cmp	r4, #59
3467:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19985              		.loc 1 3467 4 view .LVU5154
 19986 0078 09AA     		add	r2, sp, #36
 19987 007a 0846     		mov	r0, r1
3466:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19988              		.loc 1 3466 6 view .LVU5155
 19989 007c 36D0     		beq	.L1429
 19990              	.L1454:
3466:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19991              		.loc 1 3466 22 discriminator 1 view .LVU5156
 19992 007e 3D2C     		cmp	r4, #61
 19993 0080 1DD1     		bne	.L1430
3467:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19994              		.loc 1 3467 4 is_stmt 1 view .LVU5157
 19995 0082 FFF7FEFF 		bl	dn_add
 19996              	.LVL1496:
3468:src/xeq.c     **** 			if (op == RARG_ISE)
 19997              		.loc 1 3468 4 view .LVU5158
 19998 0086 1BAA     		add	r2, sp, #108
 19999 0088 12A9     		add	r1, sp, #72
 20000 008a 6846     		mov	r0, sp
 20001 008c FFF7FEFF 		bl	dn_compare
 20002              	.LVL1497:
3469:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 20003              		.loc 1 3469 4 view .LVU5159
3470:src/xeq.c     **** 			else
 20004              		.loc 1 3470 5 view .LVU5160
ARM GAS  /tmp/ccQQPlfu.s 			page 536


3470:src/xeq.c     **** 			else
 20005              		.loc 1 3470 13 is_stmt 0 view .LVU5161
 20006 0090 6846     		mov	r0, sp
 20007 0092 FFF7FEFF 		bl	dn_le0
 20008              	.LVL1498:
3470:src/xeq.c     **** 			else
 20009              		.loc 1 3470 5 view .LVU5162
 20010 0096 B0FA80F0 		clz	r0, r0
 20011 009a 4009     		lsrs	r0, r0, #5
 20012 009c FFF7FEFF 		bl	fin_tst
 20013              	.LVL1499:
 20014              	.L1431:
3483:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 20015              		.loc 1 3483 3 is_stmt 1 view .LVU5163
3483:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 20016              		.loc 1 3483 6 is_stmt 0 view .LVU5164
 20017 00a0 9DF97430 		ldrsb	r3, [sp, #116]
 20018 00a4 002B     		cmp	r3, #0
3484:src/xeq.c     **** 		} else
 20019              		.loc 1 3484 4 view .LVU5165
 20020 00a6 24AA     		add	r2, sp, #144
 20021 00a8 1BA9     		add	r1, sp, #108
 20022 00aa 6846     		mov	r0, sp
3483:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 20023              		.loc 1 3483 6 view .LVU5166
 20024 00ac 55DB     		blt	.L1452
3486:src/xeq.c     **** 		setRegister(arg, &x);
 20025              		.loc 1 3486 4 is_stmt 1 view .LVU5167
 20026 00ae FFF7FEFF 		bl	dn_add
 20027              	.LVL1500:
 20028              	.L1434:
3487:src/xeq.c     **** 	}
 20029              		.loc 1 3487 3 discriminator 2 view .LVU5168
 20030 00b2 6946     		mov	r1, sp
 20031 00b4 2846     		mov	r0, r5
 20032 00b6 FFF7FEFF 		bl	setRegister
 20033              	.LVL1501:
 20034              	.L1417:
3487:src/xeq.c     **** 	}
 20035              		.loc 1 3487 3 is_stmt 0 discriminator 2 view .LVU5169
 20036              	.LBE3038:
3489:src/xeq.c     **** 
 20037              		.loc 1 3489 1 view .LVU5170
 20038 00ba 2FB0     		add	sp, sp, #188
 20039              		.cfi_remember_state
 20040              		.cfi_def_cfa_offset 20
 20041              		@ sp needed
 20042 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 20043              	.LVL1502:
 20044              	.L1430:
 20045              		.cfi_restore_state
 20046              	.LBB3039:
3474:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20047              		.loc 1 3474 4 is_stmt 1 view .LVU5171
 20048 00be FFF7FEFF 		bl	dn_subtract
 20049              	.LVL1503:
3475:src/xeq.c     **** 			if (op == RARG_DSL)
ARM GAS  /tmp/ccQQPlfu.s 			page 537


 20050              		.loc 1 3475 4 view .LVU5172
 20051 00c2 1BAA     		add	r2, sp, #108
 20052 00c4 12A9     		add	r1, sp, #72
 20053 00c6 6846     		mov	r0, sp
 20054 00c8 FFF7FEFF 		bl	dn_compare
 20055              	.LVL1504:
3476:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20056              		.loc 1 3476 4 view .LVU5173
3476:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20057              		.loc 1 3476 7 is_stmt 0 view .LVU5174
 20058 00cc 3C2C     		cmp	r4, #60
3477:src/xeq.c     **** 			else
 20059              		.loc 1 3477 5 view .LVU5175
 20060 00ce 6846     		mov	r0, sp
3476:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20061              		.loc 1 3476 7 view .LVU5176
 20062 00d0 6AD0     		beq	.L1453
3479:src/xeq.c     **** 		}
 20063              		.loc 1 3479 5 is_stmt 1 view .LVU5177
 20064 00d2 FFF7FEFF 		bl	dn_lt0
 20065              	.LVL1505:
 20066 00d6 FFF7FEFF 		bl	fin_tst
 20067              	.LVL1506:
 20068 00da E1E7     		b	.L1431
 20069              	.L1451:
3464:src/xeq.c     **** 
 20070              		.loc 1 3464 4 view .LVU5178
 20071 00dc 09A8     		add	r0, sp, #36
 20072 00de FFF7FEFF 		bl	dn_1
 20073              	.LVL1507:
3466:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20074              		.loc 1 3466 3 view .LVU5179
3467:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20075              		.loc 1 3467 4 is_stmt 0 view .LVU5180
 20076 00e2 1BA9     		add	r1, sp, #108
3466:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20077              		.loc 1 3466 6 view .LVU5181
 20078 00e4 3B2C     		cmp	r4, #59
3467:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20079              		.loc 1 3467 4 view .LVU5182
 20080 00e6 09AA     		add	r2, sp, #36
 20081 00e8 0846     		mov	r0, r1
3466:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20082              		.loc 1 3466 6 view .LVU5183
 20083 00ea C8D1     		bne	.L1454
 20084              	.L1429:
3467:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20085              		.loc 1 3467 4 is_stmt 1 view .LVU5184
 20086 00ec FFF7FEFF 		bl	dn_add
 20087              	.LVL1508:
3468:src/xeq.c     **** 			if (op == RARG_ISE)
 20088              		.loc 1 3468 4 view .LVU5185
 20089 00f0 1BAA     		add	r2, sp, #108
 20090 00f2 12A9     		add	r1, sp, #72
 20091 00f4 6846     		mov	r0, sp
 20092 00f6 FFF7FEFF 		bl	dn_compare
 20093              	.LVL1509:
ARM GAS  /tmp/ccQQPlfu.s 			page 538


3469:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 20094              		.loc 1 3469 4 view .LVU5186
3472:src/xeq.c     **** 		} else {
 20095              		.loc 1 3472 5 view .LVU5187
3472:src/xeq.c     **** 		} else {
 20096              		.loc 1 3472 13 is_stmt 0 view .LVU5188
 20097 00fa 6846     		mov	r0, sp
 20098 00fc FFF7FEFF 		bl	dn_lt0
 20099              	.LVL1510:
3472:src/xeq.c     **** 		} else {
 20100              		.loc 1 3472 5 view .LVU5189
 20101 0100 B0FA80F0 		clz	r0, r0
 20102 0104 4009     		lsrs	r0, r0, #5
 20103 0106 FFF7FEFF 		bl	fin_tst
 20104              	.LVL1511:
 20105 010a C9E7     		b	.L1431
 20106              	.LVL1512:
 20107              	.L1449:
3472:src/xeq.c     **** 		} else {
 20108              		.loc 1 3472 5 view .LVU5190
 20109              	.LBE3039:
 20110              	.LBB3040:
3426:src/xeq.c     **** 		int xs;
 20111              		.loc 1 3426 3 is_stmt 1 view .LVU5191
3426:src/xeq.c     **** 		int xs;
 20112              		.loc 1 3426 21 is_stmt 0 view .LVU5192
 20113 010c FFF7FEFF 		bl	get_reg_n_int
 20114              	.LVL1513:
3427:src/xeq.c     **** 		unsigned long long int xv;
 20115              		.loc 1 3427 3 is_stmt 1 view .LVU5193
3428:src/xeq.c     **** 
 20116              		.loc 1 3428 3 view .LVU5194
3430:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20117              		.loc 1 3430 3 view .LVU5195
3430:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20118              		.loc 1 3430 6 is_stmt 0 view .LVU5196
 20119 0110 3B2C     		cmp	r4, #59
3431:src/xeq.c     **** 		else
 20120              		.loc 1 3431 8 view .LVU5197
 20121 0112 4FF00102 		mov	r2, #1
 20122 0116 4FF00003 		mov	r3, #0
3430:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20123              		.loc 1 3430 6 view .LVU5198
 20124 011a 4AD0     		beq	.L1419
3430:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20125              		.loc 1 3430 22 discriminator 1 view .LVU5199
 20126 011c 3D2C     		cmp	r4, #61
 20127 011e 24D1     		bne	.L1455
3431:src/xeq.c     **** 		else
 20128              		.loc 1 3431 4 is_stmt 1 view .LVU5200
3431:src/xeq.c     **** 		else
 20129              		.loc 1 3431 8 is_stmt 0 view .LVU5201
 20130 0120 FFF7FEFF 		bl	intAdd
 20131              	.LVL1514:
3431:src/xeq.c     **** 		else
 20132              		.loc 1 3431 8 view .LVU5202
 20133 0124 0646     		mov	r6, r0
ARM GAS  /tmp/ccQQPlfu.s 			page 539


 20134              	.LBB3041:
 20135              	.LBB3042:
1417:src/xeq.c     **** }
 20136              		.loc 1 1417 8 view .LVU5203
 20137 0126 2846     		mov	r0, r5
 20138              	.LBE3042:
 20139              	.LBE3041:
3431:src/xeq.c     **** 		else
 20140              		.loc 1 3431 8 view .LVU5204
 20141 0128 0C46     		mov	r4, r1
 20142              	.LVL1515:
3434:src/xeq.c     **** 
 20143              		.loc 1 3434 3 is_stmt 1 view .LVU5205
3434:src/xeq.c     **** 
 20144              		.loc 1 3434 3 is_stmt 0 view .LVU5206
 20145 012a CDE92461 		strd	r6, r1, [sp, #144]
 20146              	.LVL1516:
 20147              	.LBB3048:
 20148              	.LBI3041:
1416:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20149              		.loc 1 1416 6 is_stmt 1 view .LVU5207
 20150              	.LBB3043:
1417:src/xeq.c     **** }
 20151              		.loc 1 1417 2 view .LVU5208
1417:src/xeq.c     **** }
 20152              		.loc 1 1417 8 is_stmt 0 view .LVU5209
 20153 012e FFF7FEFF 		bl	get_reg_n
 20154              	.LVL1517:
1417:src/xeq.c     **** }
 20155              		.loc 1 1417 2 view .LVU5210
 20156 0132 24A9     		add	r1, sp, #144
 20157 0134 0822     		movs	r2, #8
 20158 0136 FFF7FEFF 		bl	xcopy
 20159              	.LVL1518:
1417:src/xeq.c     **** }
 20160              		.loc 1 1417 2 view .LVU5211
 20161              	.LBE3043:
 20162              	.LBE3048:
3436:src/xeq.c     **** 		if (op == RARG_ISG)
 20163              		.loc 1 3436 3 is_stmt 1 view .LVU5212
3436:src/xeq.c     **** 		if (op == RARG_ISG)
 20164              		.loc 1 3436 8 is_stmt 0 view .LVU5213
 20165 013a 24AA     		add	r2, sp, #144
 20166 013c 3046     		mov	r0, r6
 20167 013e 2146     		mov	r1, r4
 20168 0140 FFF7FEFF 		bl	extract_value
 20169              	.LVL1519:
3442:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20170              		.loc 1 3442 18 view .LVU5214
 20171 0144 249B     		ldr	r3, [sp, #144]
 20172              	.LVL1520:
3437:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20173              		.loc 1 3437 3 is_stmt 1 view .LVU5215
3439:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20174              		.loc 1 3439 8 view .LVU5216
3441:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
 20175              		.loc 1 3441 8 view .LVU5217
ARM GAS  /tmp/ccQQPlfu.s 			page 540


3442:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20176              		.loc 1 3442 4 view .LVU5218
 20177 0146 23B1     		cbz	r3, .L1438
3442:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20178              		.loc 1 3442 4 is_stmt 0 discriminator 1 view .LVU5219
 20179 0148 50EA0103 		orrs	r3, r0, r1
 20180 014c 14BF     		ite	ne
 20181 014e 0123     		movne	r3, #1
 20182 0150 0023     		moveq	r3, #0
 20183              	.L1438:
3442:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20184              		.loc 1 3442 4 discriminator 6 view .LVU5220
 20185 0152 1846     		mov	r0, r3
 20186              	.LVL1521:
3442:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20187              		.loc 1 3442 4 discriminator 6 view .LVU5221
 20188 0154 FFF7FEFF 		bl	fin_tst
 20189              	.LVL1522:
 20190 0158 AFE7     		b	.L1417
 20191              	.L1452:
3442:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20192              		.loc 1 3442 4 discriminator 6 view .LVU5222
 20193              	.LBE3040:
 20194              	.LBB3053:
3484:src/xeq.c     **** 		} else
 20195              		.loc 1 3484 4 is_stmt 1 view .LVU5223
 20196 015a FFF7FEFF 		bl	dn_subtract
 20197              	.LVL1523:
 20198 015e A8E7     		b	.L1434
 20199              	.L1450:
3457:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 20200              		.loc 1 3457 4 view .LVU5224
 20201 0160 1BA9     		add	r1, sp, #108
 20202 0162 0846     		mov	r0, r1
 20203 0164 FFF7FEFF 		bl	dn_minus
 20204              	.LVL1524:
 20205 0168 6AE7     		b	.L1427
 20206              	.LVL1525:
 20207              	.L1455:
3457:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 20208              		.loc 1 3457 4 is_stmt 0 view .LVU5225
 20209              	.LBE3053:
 20210              	.LBB3054:
3433:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20211              		.loc 1 3433 4 is_stmt 1 view .LVU5226
3433:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20212              		.loc 1 3433 8 is_stmt 0 view .LVU5227
 20213 016a FFF7FEFF 		bl	intSubtract
 20214              	.LVL1526:
3433:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20215              		.loc 1 3433 8 view .LVU5228
 20216 016e 0746     		mov	r7, r0
 20217              	.LBB3049:
 20218              	.LBB3044:
1417:src/xeq.c     **** }
 20219              		.loc 1 1417 8 view .LVU5229
 20220 0170 2846     		mov	r0, r5
ARM GAS  /tmp/ccQQPlfu.s 			page 541


 20221              	.LBE3044:
 20222              	.LBE3049:
3433:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20223              		.loc 1 3433 8 view .LVU5230
 20224 0172 0E46     		mov	r6, r1
 20225              	.LVL1527:
3434:src/xeq.c     **** 
 20226              		.loc 1 3434 3 is_stmt 1 view .LVU5231
3434:src/xeq.c     **** 
 20227              		.loc 1 3434 3 is_stmt 0 view .LVU5232
 20228 0174 CDE92471 		strd	r7, r1, [sp, #144]
 20229              	.LVL1528:
 20230              	.LBB3050:
1416:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20231              		.loc 1 1416 6 is_stmt 1 view .LVU5233
 20232              	.LBB3045:
1417:src/xeq.c     **** }
 20233              		.loc 1 1417 2 view .LVU5234
1417:src/xeq.c     **** }
 20234              		.loc 1 1417 8 is_stmt 0 view .LVU5235
 20235 0178 FFF7FEFF 		bl	get_reg_n
 20236              	.LVL1529:
1417:src/xeq.c     **** }
 20237              		.loc 1 1417 2 view .LVU5236
 20238 017c 24A9     		add	r1, sp, #144
 20239 017e 0822     		movs	r2, #8
 20240 0180 FFF7FEFF 		bl	xcopy
 20241              	.LVL1530:
1417:src/xeq.c     **** }
 20242              		.loc 1 1417 2 view .LVU5237
 20243              	.LBE3045:
 20244              	.LBE3050:
3436:src/xeq.c     **** 		if (op == RARG_ISG)
 20245              		.loc 1 3436 3 is_stmt 1 view .LVU5238
3436:src/xeq.c     **** 		if (op == RARG_ISG)
 20246              		.loc 1 3436 8 is_stmt 0 view .LVU5239
 20247 0184 24AA     		add	r2, sp, #144
 20248 0186 3846     		mov	r0, r7
 20249 0188 3146     		mov	r1, r6
 20250 018a FFF7FEFF 		bl	extract_value
 20251              	.LVL1531:
3437:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20252              		.loc 1 3437 3 is_stmt 1 view .LVU5240
3439:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20253              		.loc 1 3439 8 view .LVU5241
3439:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20254              		.loc 1 3439 11 is_stmt 0 view .LVU5242
 20255 018e 3A2C     		cmp	r4, #58
3440:src/xeq.c     **** 		else if (op == RARG_ISE)
 20256              		.loc 1 3440 4 view .LVU5243
 20257 0190 249B     		ldr	r3, [sp, #144]
3439:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20258              		.loc 1 3439 11 view .LVU5244
 20259 0192 25D0     		beq	.L1456
3444:src/xeq.c     **** 		return;
 20260              		.loc 1 3444 4 is_stmt 1 view .LVU5245
 20261 0194 13B3     		cbz	r3, .L1440
ARM GAS  /tmp/ccQQPlfu.s 			page 542


 20262              	.LVL1532:
 20263              	.L1448:
3444:src/xeq.c     **** 		return;
 20264              		.loc 1 3444 4 is_stmt 0 discriminator 2 view .LVU5246
 20265 0196 50EA0103 		orrs	r3, r0, r1
 20266 019a 0CBF     		ite	eq
 20267 019c 0120     		moveq	r0, #1
 20268 019e 0020     		movne	r0, #0
 20269              	.L1425:
3444:src/xeq.c     **** 		return;
 20270              		.loc 1 3444 4 discriminator 6 view .LVU5247
 20271 01a0 FFF7FEFF 		bl	fin_tst
 20272              	.LVL1533:
3445:src/xeq.c     **** 	} else {
 20273              		.loc 1 3445 3 is_stmt 1 discriminator 6 view .LVU5248
 20274              	.LBE3054:
3489:src/xeq.c     **** 
 20275              		.loc 1 3489 1 is_stmt 0 discriminator 6 view .LVU5249
 20276 01a4 2FB0     		add	sp, sp, #188
 20277              		.cfi_remember_state
 20278              		.cfi_def_cfa_offset 20
 20279              		@ sp needed
 20280 01a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 20281              	.LVL1534:
 20282              	.L1453:
 20283              		.cfi_restore_state
 20284              	.LBB3055:
3477:src/xeq.c     **** 			else
 20285              		.loc 1 3477 5 is_stmt 1 view .LVU5250
 20286 01a8 FFF7FEFF 		bl	dn_le0
 20287              	.LVL1535:
 20288 01ac FFF7FEFF 		bl	fin_tst
 20289              	.LVL1536:
 20290 01b0 76E7     		b	.L1431
 20291              	.LVL1537:
 20292              	.L1419:
3477:src/xeq.c     **** 			else
 20293              		.loc 1 3477 5 is_stmt 0 view .LVU5251
 20294              	.LBE3055:
 20295              	.LBB3056:
3431:src/xeq.c     **** 		else
 20296              		.loc 1 3431 4 is_stmt 1 view .LVU5252
3431:src/xeq.c     **** 		else
 20297              		.loc 1 3431 8 is_stmt 0 view .LVU5253
 20298 01b2 FFF7FEFF 		bl	intAdd
 20299              	.LVL1538:
3431:src/xeq.c     **** 		else
 20300              		.loc 1 3431 8 view .LVU5254
 20301 01b6 0646     		mov	r6, r0
 20302              	.LBB3051:
 20303              	.LBB3046:
1417:src/xeq.c     **** }
 20304              		.loc 1 1417 8 view .LVU5255
 20305 01b8 2846     		mov	r0, r5
 20306              	.LBE3046:
 20307              	.LBE3051:
3431:src/xeq.c     **** 		else
ARM GAS  /tmp/ccQQPlfu.s 			page 543


 20308              		.loc 1 3431 8 view .LVU5256
 20309 01ba 0C46     		mov	r4, r1
 20310              	.LVL1539:
3434:src/xeq.c     **** 
 20311              		.loc 1 3434 3 is_stmt 1 view .LVU5257
3434:src/xeq.c     **** 
 20312              		.loc 1 3434 3 is_stmt 0 view .LVU5258
 20313 01bc CDE92461 		strd	r6, r1, [sp, #144]
 20314              	.LVL1540:
 20315              	.LBB3052:
1416:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20316              		.loc 1 1416 6 is_stmt 1 view .LVU5259
 20317              	.LBB3047:
1417:src/xeq.c     **** }
 20318              		.loc 1 1417 2 view .LVU5260
1417:src/xeq.c     **** }
 20319              		.loc 1 1417 8 is_stmt 0 view .LVU5261
 20320 01c0 FFF7FEFF 		bl	get_reg_n
 20321              	.LVL1541:
1417:src/xeq.c     **** }
 20322              		.loc 1 1417 2 view .LVU5262
 20323 01c4 24A9     		add	r1, sp, #144
 20324 01c6 0822     		movs	r2, #8
 20325 01c8 FFF7FEFF 		bl	xcopy
 20326              	.LVL1542:
1417:src/xeq.c     **** }
 20327              		.loc 1 1417 2 view .LVU5263
 20328              	.LBE3047:
 20329              	.LBE3052:
3436:src/xeq.c     **** 		if (op == RARG_ISG)
 20330              		.loc 1 3436 3 is_stmt 1 view .LVU5264
3436:src/xeq.c     **** 		if (op == RARG_ISG)
 20331              		.loc 1 3436 8 is_stmt 0 view .LVU5265
 20332 01cc 24AA     		add	r2, sp, #144
 20333 01ce 3046     		mov	r0, r6
 20334 01d0 2146     		mov	r1, r4
 20335 01d2 FFF7FEFF 		bl	extract_value
 20336              	.LVL1543:
3438:src/xeq.c     **** 		else if (op == RARG_DSE)
 20337              		.loc 1 3438 4 view .LVU5266
 20338 01d6 249B     		ldr	r3, [sp, #144]
 20339              	.LVL1544:
3437:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20340              		.loc 1 3437 3 is_stmt 1 view .LVU5267
3438:src/xeq.c     **** 		else if (op == RARG_DSE)
 20341              		.loc 1 3438 4 view .LVU5268
 20342 01d8 002B     		cmp	r3, #0
 20343 01da DCD0     		beq	.L1448
 20344              	.LVL1545:
 20345              	.L1440:
3444:src/xeq.c     **** 		return;
 20346              		.loc 1 3444 4 is_stmt 0 view .LVU5269
 20347 01dc 0120     		movs	r0, #1
 20348 01de DFE7     		b	.L1425
 20349              	.LVL1546:
 20350              	.L1456:
3440:src/xeq.c     **** 		else if (op == RARG_ISE)
ARM GAS  /tmp/ccQQPlfu.s 			page 544


 20351              		.loc 1 3440 4 is_stmt 1 view .LVU5270
 20352 01e0 2BB9     		cbnz	r3, .L1439
3440:src/xeq.c     **** 		else if (op == RARG_ISE)
 20353              		.loc 1 3440 4 is_stmt 0 discriminator 1 view .LVU5271
 20354 01e2 50EA0103 		orrs	r3, r0, r1
 20355 01e6 14BF     		ite	ne
 20356 01e8 0120     		movne	r0, #1
 20357              	.LVL1547:
3440:src/xeq.c     **** 		else if (op == RARG_ISE)
 20358              		.loc 1 3440 4 discriminator 1 view .LVU5272
 20359 01ea 0020     		moveq	r0, #0
 20360 01ec D8E7     		b	.L1425
 20361              	.LVL1548:
 20362              	.L1439:
3440:src/xeq.c     **** 		else if (op == RARG_ISE)
 20363              		.loc 1 3440 4 view .LVU5273
 20364 01ee 0020     		movs	r0, #0
 20365              	.LVL1549:
3440:src/xeq.c     **** 		else if (op == RARG_ISE)
 20366              		.loc 1 3440 4 view .LVU5274
 20367 01f0 D6E7     		b	.L1425
 20368              	.L1458:
 20369 01f2 00BF     		.align	2
 20370              	.L1457:
 20371 01f4 00000000 		.word	main_ram
 20372              	.LBE3056:
 20373              		.cfi_endproc
 20374              	.LFE195:
 20376              		.section	.text.op_shift_digit,"ax",%progbits
 20377              		.align	1
 20378              		.p2align 2,,3
 20379              		.global	op_shift_digit
 20380              		.syntax unified
 20381              		.thumb
 20382              		.thumb_func
 20383              		.fpu fpv4-sp-d16
 20385              	op_shift_digit:
 20386              	.LVL1550:
 20387              	.LFB196:
3494:src/xeq.c     **** 	decNumber x;
 20388              		.loc 1 3494 51 is_stmt 1 view -0
 20389              		.cfi_startproc
 20390              		@ args = 0, pretend = 0, frame = 40
 20391              		@ frame_needed = 0, uses_anonymous_args = 0
3495:src/xeq.c     **** 	int adjust = n;
 20392              		.loc 1 3495 2 view .LVU5276
3496:src/xeq.c     **** 
 20393              		.loc 1 3496 2 view .LVU5277
3498:src/xeq.c     **** 		bad_mode_error();
 20394              		.loc 1 3498 6 is_stmt 0 view .LVU5278
 20395 0000 174B     		ldr	r3, .L1468
 20396 0002 1B68     		ldr	r3, [r3]
 20397 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 20398              	.LVL1551:
3498:src/xeq.c     **** 		bad_mode_error();
 20399              		.loc 1 3498 2 is_stmt 1 view .LVU5279
3498:src/xeq.c     **** 		bad_mode_error();
ARM GAS  /tmp/ccQQPlfu.s 			page 545


 20400              		.loc 1 3498 5 is_stmt 0 view .LVU5280
 20401 0008 DB07     		lsls	r3, r3, #31
 20402 000a 06D5     		bpl	.L1460
3499:src/xeq.c     **** 		return;
 20403              		.loc 1 3499 3 is_stmt 1 view .LVU5281
 20404              	.LBB3068:
 20405              	.LBI3068:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 20406              		.loc 1 569 6 view .LVU5282
 20407              	.LBE3068:
 570:src/xeq.c     **** }
 20408              		.loc 1 570 2 view .LVU5283
 20409              	.LVL1552:
 20410              	.LBB3073:
 20411              	.LBB3069:
 20412              	.LBI3069:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 20413              		.loc 1 540 5 view .LVU5284
 20414              	.LBB3070:
 541:src/xeq.c     **** 		Error = e;
 20415              		.loc 1 541 2 view .LVU5285
 541:src/xeq.c     **** 		Error = e;
 20416              		.loc 1 541 12 is_stmt 0 view .LVU5286
 20417 000c 154B     		ldr	r3, .L1468+4
 541:src/xeq.c     **** 		Error = e;
 20418              		.loc 1 541 5 view .LVU5287
 20419 000e 1A68     		ldr	r2, [r3]
 20420 0010 12B9     		cbnz	r2, .L1466
 20421              	.LVL1553:
 20422              	.LBB3071:
 20423              	.LBI3071:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 20424              		.loc 1 540 5 is_stmt 1 view .LVU5288
 20425              	.LBB3072:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 20426              		.loc 1 542 3 view .LVU5289
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 20427              		.loc 1 542 9 is_stmt 0 view .LVU5290
 20428 0012 0D22     		movs	r2, #13
 20429 0014 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 20430              		.loc 1 543 3 is_stmt 1 view .LVU5291
 20431 0016 7047     		bx	lr
 20432              	.LVL1554:
 20433              	.L1466:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 20434              		.loc 1 543 3 is_stmt 0 view .LVU5292
 20435 0018 7047     		bx	lr
 20436              	.LVL1555:
 20437              	.L1460:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 20438              		.loc 1 543 3 view .LVU5293
 20439              	.LBE3072:
 20440              	.LBE3071:
 20441              	.LBE3070:
 20442              	.LBE3069:
 20443              	.LBE3073:
ARM GAS  /tmp/ccQQPlfu.s 			page 546


3502:src/xeq.c     **** 	setlastX();
 20444              		.loc 1 3502 2 is_stmt 1 view .LVU5294
3494:src/xeq.c     **** 	decNumber x;
 20445              		.loc 1 3494 51 is_stmt 0 view .LVU5295
 20446 001a 30B5     		push	{r4, r5, lr}
 20447              		.cfi_def_cfa_offset 12
 20448              		.cfi_offset 4, -12
 20449              		.cfi_offset 5, -8
 20450              		.cfi_offset 14, -4
 20451 001c 8BB0     		sub	sp, sp, #44
 20452              		.cfi_def_cfa_offset 56
 20453              	.LVL1556:
 20454              	.LBB3074:
 20455              	.LBI3074:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 20456              		.loc 1 818 12 is_stmt 1 view .LVU5296
 20457              	.LBB3075:
 819:src/xeq.c     **** }
 20458              		.loc 1 819 2 view .LVU5297
 20459 001e 0446     		mov	r4, r0
 20460 0020 0D46     		mov	r5, r1
 819:src/xeq.c     **** }
 20461              		.loc 1 819 9 is_stmt 0 view .LVU5298
 20462 0022 01A8     		add	r0, sp, #4
 20463              	.LVL1557:
 819:src/xeq.c     **** }
 20464              		.loc 1 819 9 view .LVU5299
 20465 0024 6421     		movs	r1, #100
 20466              	.LVL1558:
 819:src/xeq.c     **** }
 20467              		.loc 1 819 9 view .LVU5300
 20468 0026 FFF7FEFF 		bl	getRegister
 20469              	.LVL1559:
 819:src/xeq.c     **** }
 20470              		.loc 1 819 9 view .LVU5301
 20471              	.LBE3075:
 20472              	.LBE3074:
3503:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
 20473              		.loc 1 3503 2 is_stmt 1 view .LVU5302
 20474              	.LBB3076:
 20475              	.LBI3076:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 20476              		.loc 1 786 6 view .LVU5303
 20477              	.LBB3077:
 787:src/xeq.c     **** }
 20478              		.loc 1 787 2 view .LVU5304
 20479 002a 6421     		movs	r1, #100
 20480 002c 6C20     		movs	r0, #108
 20481 002e FFF7FEFF 		bl	copyreg_n
 20482              	.LVL1560:
 20483              	.LBE3077:
 20484              	.LBE3076:
3504:src/xeq.c     **** 		return;
 20485              		.loc 1 3504 2 view .LVU5305
3504:src/xeq.c     **** 		return;
 20486              		.loc 1 3504 5 is_stmt 0 view .LVU5306
 20487 0032 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
ARM GAS  /tmp/ccQQPlfu.s 			page 547


 20488 0036 13F0700F 		tst	r3, #112
 20489 003a 0ED1     		bne	.L1459
3504:src/xeq.c     **** 		return;
 20490              		.loc 1 3504 32 discriminator 1 view .LVU5307
 20491 003c 01A8     		add	r0, sp, #4
 20492 003e FFF7FEFF 		bl	dn_eq0
 20493              	.LVL1561:
3504:src/xeq.c     **** 		return;
 20494              		.loc 1 3504 29 discriminator 1 view .LVU5308
 20495 0042 50B9     		cbnz	r0, .L1459
3506:src/xeq.c     **** 		adjust = -adjust;
 20496              		.loc 1 3506 5 view .LVU5309
 20497 0044 722D     		cmp	r5, #114
3496:src/xeq.c     **** 
 20498              		.loc 1 3496 6 view .LVU5310
 20499 0046 2046     		mov	r0, r4
3506:src/xeq.c     **** 		adjust = -adjust;
 20500              		.loc 1 3506 2 is_stmt 1 view .LVU5311
3507:src/xeq.c     **** 	x.exponent += adjust;
 20501              		.loc 1 3507 3 view .LVU5312
3507:src/xeq.c     **** 	x.exponent += adjust;
 20502              		.loc 1 3507 10 is_stmt 0 view .LVU5313
 20503 0048 08BF     		it	eq
 20504 004a 6042     		rsbeq	r0, r4, #0
 20505              	.LVL1562:
3508:src/xeq.c     **** 	setX(&x);
 20506              		.loc 1 3508 2 is_stmt 1 view .LVU5314
3508:src/xeq.c     **** 	setX(&x);
 20507              		.loc 1 3508 13 is_stmt 0 view .LVU5315
 20508 004c 029C     		ldr	r4, [sp, #8]
 20509              	.LVL1563:
 20510              	.LBB3078:
 20511              	.LBB3079:
 823:src/xeq.c     **** }
 20512              		.loc 1 823 2 view .LVU5316
 20513 004e 01A9     		add	r1, sp, #4
 20514              	.LBE3079:
 20515              	.LBE3078:
3508:src/xeq.c     **** 	setX(&x);
 20516              		.loc 1 3508 13 view .LVU5317
 20517 0050 0444     		add	r4, r4, r0
 20518              	.LBB3082:
 20519              	.LBB3080:
 823:src/xeq.c     **** }
 20520              		.loc 1 823 2 view .LVU5318
 20521 0052 6420     		movs	r0, #100
 20522              	.LVL1564:
 823:src/xeq.c     **** }
 20523              		.loc 1 823 2 view .LVU5319
 20524              	.LBE3080:
 20525              	.LBE3082:
3508:src/xeq.c     **** 	setX(&x);
 20526              		.loc 1 3508 13 view .LVU5320
 20527 0054 0294     		str	r4, [sp, #8]
3509:src/xeq.c     **** }
 20528              		.loc 1 3509 2 is_stmt 1 view .LVU5321
 20529              	.LVL1565:
ARM GAS  /tmp/ccQQPlfu.s 			page 548


 20530              	.LBB3083:
 20531              	.LBI3078:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 20532              		.loc 1 822 6 view .LVU5322
 20533              	.LBB3081:
 823:src/xeq.c     **** }
 20534              		.loc 1 823 2 view .LVU5323
 20535 0056 FFF7FEFF 		bl	setRegister
 20536              	.LVL1566:
 20537              	.L1459:
 823:src/xeq.c     **** }
 20538              		.loc 1 823 2 is_stmt 0 view .LVU5324
 20539              	.LBE3081:
 20540              	.LBE3083:
3510:src/xeq.c     **** 
 20541              		.loc 1 3510 1 view .LVU5325
 20542 005a 0BB0     		add	sp, sp, #44
 20543              		.cfi_def_cfa_offset 12
 20544              		@ sp needed
 20545 005c 30BD     		pop	{r4, r5, pc}
 20546              	.L1469:
 20547 005e 00BF     		.align	2
 20548              	.L1468:
 20549 0060 00000000 		.word	main_ram
 20550 0064 00000000 		.word	Error
 20551              		.cfi_endproc
 20552              	.LFE196:
 20554              		.section	.text.get_user_flag,"ax",%progbits
 20555              		.align	1
 20556              		.p2align 2,,3
 20557              		.global	get_user_flag
 20558              		.syntax unified
 20559              		.thumb
 20560              		.thumb_func
 20561              		.fpu fpv4-sp-d16
 20563              	get_user_flag:
 20564              	.LVL1567:
 20565              	.LFB198:
3543:src/xeq.c     **** 	unsigned short mask;
 20566              		.loc 1 3543 26 is_stmt 1 view -0
 20567              		.cfi_startproc
 20568              		@ args = 0, pretend = 0, frame = 8
 20569              		@ frame_needed = 0, uses_anonymous_args = 0
3544:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 20570              		.loc 1 3544 2 view .LVU5327
3545:src/xeq.c     **** 
 20571              		.loc 1 3545 2 view .LVU5328
3543:src/xeq.c     **** 	unsigned short mask;
 20572              		.loc 1 3543 26 is_stmt 0 view .LVU5329
 20573 0000 00B5     		push	{lr}
 20574              		.cfi_def_cfa_offset 4
 20575              		.cfi_offset 14, -4
 20576 0002 83B0     		sub	sp, sp, #12
 20577              		.cfi_def_cfa_offset 16
3545:src/xeq.c     **** 
 20578              		.loc 1 3545 34 view .LVU5330
 20579 0004 0DF10601 		add	r1, sp, #6
ARM GAS  /tmp/ccQQPlfu.s 			page 549


 20580 0008 FFF7FEFF 		bl	flag_word
 20581              	.LVL1568:
3547:src/xeq.c     **** }
 20582              		.loc 1 3547 2 is_stmt 1 view .LVU5331
3547:src/xeq.c     **** }
 20583              		.loc 1 3547 24 is_stmt 0 view .LVU5332
 20584 000c BDF80630 		ldrh	r3, [sp, #6]
 20585 0010 0288     		ldrh	r2, [r0]
 20586 0012 1A42     		tst	r2, r3
3548:src/xeq.c     **** 
 20587              		.loc 1 3548 1 view .LVU5333
 20588 0014 14BF     		ite	ne
 20589 0016 0120     		movne	r0, #1
 20590              	.LVL1569:
3548:src/xeq.c     **** 
 20591              		.loc 1 3548 1 view .LVU5334
 20592 0018 0020     		moveq	r0, #0
 20593 001a 03B0     		add	sp, sp, #12
 20594              		.cfi_def_cfa_offset 4
 20595              		@ sp needed
 20596 001c 5DF804FB 		ldr	pc, [sp], #4
 20597              		.cfi_endproc
 20598              	.LFE198:
 20600              		.section	.text.cmdflag,"ax",%progbits
 20601              		.align	1
 20602              		.p2align 2,,3
 20603              		.global	cmdflag
 20604              		.syntax unified
 20605              		.thumb
 20606              		.thumb_func
 20607              		.fpu fpv4-sp-d16
 20609              	cmdflag:
 20610              	.LVL1570:
 20611              	.LFB200:
3571:src/xeq.c     **** 	unsigned short mask;
 20612              		.loc 1 3571 46 is_stmt 1 view -0
 20613              		.cfi_startproc
 20614              		@ args = 0, pretend = 0, frame = 8
 20615              		@ frame_needed = 0, uses_anonymous_args = 0
3572:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
 20616              		.loc 1 3572 2 view .LVU5336
3573:src/xeq.c     **** 	int flg = *f & mask;
 20617              		.loc 1 3573 2 view .LVU5337
3571:src/xeq.c     **** 	unsigned short mask;
 20618              		.loc 1 3571 46 is_stmt 0 view .LVU5338
 20619 0000 70B5     		push	{r4, r5, r6, lr}
 20620              		.cfi_def_cfa_offset 16
 20621              		.cfi_offset 4, -16
 20622              		.cfi_offset 5, -12
 20623              		.cfi_offset 6, -8
 20624              		.cfi_offset 14, -4
 20625 0002 82B0     		sub	sp, sp, #8
 20626              		.cfi_def_cfa_offset 24
3571:src/xeq.c     **** 	unsigned short mask;
 20627              		.loc 1 3571 46 view .LVU5339
 20628 0004 0C46     		mov	r4, r1
3573:src/xeq.c     **** 	int flg = *f & mask;
ARM GAS  /tmp/ccQQPlfu.s 			page 550


 20629              		.loc 1 3573 28 view .LVU5340
 20630 0006 0DF10601 		add	r1, sp, #6
 20631              	.LVL1571:
3571:src/xeq.c     **** 	unsigned short mask;
 20632              		.loc 1 3571 46 view .LVU5341
 20633 000a 0646     		mov	r6, r0
3573:src/xeq.c     **** 	int flg = *f & mask;
 20634              		.loc 1 3573 28 view .LVU5342
 20635 000c FFF7FEFF 		bl	flag_word
 20636              	.LVL1572:
3574:src/xeq.c     **** 
 20637              		.loc 1 3574 15 view .LVU5343
 20638 0010 BDF80620 		ldrh	r2, [sp, #6]
3574:src/xeq.c     **** 
 20639              		.loc 1 3574 12 view .LVU5344
 20640 0014 0388     		ldrh	r3, [r0]
 20641 0016 A4F15101 		sub	r1, r4, #81
3573:src/xeq.c     **** 	int flg = *f & mask;
 20642              		.loc 1 3573 28 view .LVU5345
 20643 001a 0546     		mov	r5, r0
 20644              	.LVL1573:
3574:src/xeq.c     **** 
 20645              		.loc 1 3574 2 is_stmt 1 view .LVU5346
3574:src/xeq.c     **** 
 20646              		.loc 1 3574 6 is_stmt 0 view .LVU5347
 20647 001c 03EA0200 		and	r0, r3, r2
 20648              	.LVL1574:
3576:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
 20649              		.loc 1 3576 2 is_stmt 1 view .LVU5348
 20650 0020 0A29     		cmp	r1, #10
 20651 0022 1AD8     		bhi	.L1472
 20652 0024 DFE801F0 		tbb	[pc, r1]
 20653              	.L1475:
 20654 0028 23       		.byte	(.L1485-.L1475)/2
 20655 0029 0E       		.byte	(.L1484-.L1475)/2
 20656 002a 46       		.byte	(.L1483-.L1475)/2
 20657 002b 29       		.byte	(.L1496-.L1475)/2
 20658 002c 26       		.byte	(.L1481-.L1475)/2
 20659 002d 09       		.byte	(.L1495-.L1475)/2
 20660 002e 1E       		.byte	(.L1494-.L1475)/2
 20661 002f 2D       		.byte	(.L1478-.L1475)/2
 20662 0030 06       		.byte	(.L1477-.L1475)/2
 20663 0031 1B       		.byte	(.L1476-.L1475)/2
 20664 0032 3A       		.byte	(.L1474-.L1475)/2
 20665 0033 00       		.p2align 1
 20666              	.L1477:
3588:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20667              		.loc 1 3588 17 view .LVU5349
 20668 0034 B0FA80F0 		clz	r0, r0
 20669              	.LVL1575:
3588:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20670              		.loc 1 3588 17 is_stmt 0 view .LVU5350
 20671 0038 4009     		lsrs	r0, r0, #5
 20672              	.L1495:
3588:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20673              		.loc 1 3588 17 view .LVU5351
 20674 003a FFF7FEFF 		bl	fin_tst
ARM GAS  /tmp/ccQQPlfu.s 			page 551


 20675              	.LVL1576:
3588:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20676              		.loc 1 3588 33 is_stmt 1 view .LVU5352
3588:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20677              		.loc 1 3588 45 view .LVU5353
3597:src/xeq.c     **** 		*f |= mask;
 20678              		.loc 1 3597 2 view .LVU5354
 20679 003e 2B88     		ldrh	r3, [r5]
 20680 0040 BDF80620 		ldrh	r2, [sp, #6]
 20681              	.LVL1577:
 20682              	.L1484:
3600:src/xeq.c     **** 
 20683              		.loc 1 3600 3 view .LVU5355
3600:src/xeq.c     **** 
 20684              		.loc 1 3600 6 is_stmt 0 view .LVU5356
 20685 0044 23EA0203 		bic	r3, r3, r2
 20686 0048 0021     		movs	r1, #0
 20687              	.L1487:
3602:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20688              		.loc 1 3602 5 view .LVU5357
 20689 004a 682E     		cmp	r6, #104
 20690 004c 2B80     		strh	r3, [r5]	@ movhi
3602:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20691              		.loc 1 3602 2 is_stmt 1 view .LVU5358
3602:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20692              		.loc 1 3602 5 is_stmt 0 view .LVU5359
 20693 004e 04D1     		bne	.L1472
3603:src/xeq.c     **** 		finish_display(); // BIG_EQ
 20694              		.loc 1 3603 3 is_stmt 1 view .LVU5360
 20695 0050 8320     		movs	r0, #131
 20696 0052 FFF7FEFF 		bl	dot
 20697              	.LVL1578:
3604:src/xeq.c     **** 	}
 20698              		.loc 1 3604 3 view .LVU5361
 20699 0056 FFF7FEFF 		bl	finish_display
 20700              	.LVL1579:
 20701              	.L1472:
3606:src/xeq.c     **** 
 20702              		.loc 1 3606 1 is_stmt 0 view .LVU5362
 20703 005a 02B0     		add	sp, sp, #8
 20704              		.cfi_remember_state
 20705              		.cfi_def_cfa_offset 16
 20706              		@ sp needed
 20707 005c 70BD     		pop	{r4, r5, r6, pc}
 20708              	.LVL1580:
 20709              	.L1476:
 20710              		.cfi_restore_state
3589:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20711              		.loc 1 3589 17 is_stmt 1 view .LVU5363
 20712 005e B0FA80F0 		clz	r0, r0
 20713              	.LVL1581:
3589:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20714              		.loc 1 3589 17 is_stmt 0 view .LVU5364
 20715 0062 4009     		lsrs	r0, r0, #5
 20716              	.L1494:
3589:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20717              		.loc 1 3589 17 view .LVU5365
ARM GAS  /tmp/ccQQPlfu.s 			page 552


 20718 0064 FFF7FEFF 		bl	fin_tst
 20719              	.LVL1582:
3589:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20720              		.loc 1 3589 33 is_stmt 1 view .LVU5366
3589:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20721              		.loc 1 3589 45 view .LVU5367
3597:src/xeq.c     **** 		*f |= mask;
 20722              		.loc 1 3597 2 view .LVU5368
 20723 0068 2B88     		ldrh	r3, [r5]
 20724 006a BDF80620 		ldrh	r2, [sp, #6]
 20725              	.LVL1583:
 20726              	.L1485:
3598:src/xeq.c     **** 	else
 20727              		.loc 1 3598 3 view .LVU5369
3598:src/xeq.c     **** 	else
 20728              		.loc 1 3598 6 is_stmt 0 view .LVU5370
 20729 006e 1343     		orrs	r3, r3, r2
 20730 0070 0121     		movs	r1, #1
 20731 0072 EAE7     		b	.L1487
 20732              	.LVL1584:
 20733              	.L1481:
3582:src/xeq.c     **** 
 20734              		.loc 1 3582 16 is_stmt 1 view .LVU5371
 20735 0074 B0FA80F0 		clz	r0, r0
 20736              	.LVL1585:
3582:src/xeq.c     **** 
 20737              		.loc 1 3582 16 is_stmt 0 view .LVU5372
 20738 0078 4009     		lsrs	r0, r0, #5
 20739              	.L1496:
3582:src/xeq.c     **** 
 20740              		.loc 1 3582 16 view .LVU5373
 20741 007a FFF7FEFF 		bl	fin_tst
 20742              	.LVL1586:
3582:src/xeq.c     **** 
 20743              		.loc 1 3582 37 is_stmt 1 view .LVU5374
3606:src/xeq.c     **** 
 20744              		.loc 1 3606 1 is_stmt 0 view .LVU5375
 20745 007e 02B0     		add	sp, sp, #8
 20746              		.cfi_remember_state
 20747              		.cfi_def_cfa_offset 16
 20748              		@ sp needed
 20749 0080 70BD     		pop	{r4, r5, r6, pc}
 20750              	.LVL1587:
 20751              	.L1478:
 20752              		.cfi_restore_state
3586:src/xeq.c     **** 
 20753              		.loc 1 3586 17 is_stmt 1 view .LVU5376
3586:src/xeq.c     **** 
 20754              		.loc 1 3586 45 is_stmt 0 view .LVU5377
 20755 0082 B0FA80F4 		clz	r4, r0
 20756 0086 6409     		lsrs	r4, r4, #5
3586:src/xeq.c     **** 
 20757              		.loc 1 3586 17 view .LVU5378
 20758 0088 FFF7FEFF 		bl	fin_tst
 20759              	.LVL1588:
3586:src/xeq.c     **** 
 20760              		.loc 1 3586 31 is_stmt 1 view .LVU5379
ARM GAS  /tmp/ccQQPlfu.s 			page 553


3586:src/xeq.c     **** 
 20761              		.loc 1 3586 52 view .LVU5380
3597:src/xeq.c     **** 		*f |= mask;
 20762              		.loc 1 3597 2 view .LVU5381
 20763 008c 2B88     		ldrh	r3, [r5]
 20764 008e BDF80620 		ldrh	r2, [sp, #6]
3597:src/xeq.c     **** 		*f |= mask;
 20765              		.loc 1 3597 5 is_stmt 0 view .LVU5382
 20766 0092 002C     		cmp	r4, #0
 20767 0094 D6D0     		beq	.L1484
 20768              	.L1497:
 20769              	.LVL1589:
3598:src/xeq.c     **** 	else
 20770              		.loc 1 3598 3 is_stmt 1 view .LVU5383
3598:src/xeq.c     **** 	else
 20771              		.loc 1 3598 6 is_stmt 0 view .LVU5384
 20772 0096 1343     		orrs	r3, r3, r2
 20773 0098 0121     		movs	r1, #1
 20774 009a D6E7     		b	.L1487
 20775              	.LVL1590:
 20776              	.L1474:
3590:src/xeq.c     **** 
 20777              		.loc 1 3590 17 is_stmt 1 view .LVU5385
 20778 009c B0FA80F4 		clz	r4, r0
 20779 00a0 6409     		lsrs	r4, r4, #5
 20780 00a2 2046     		mov	r0, r4
 20781              	.LVL1591:
3590:src/xeq.c     **** 
 20782              		.loc 1 3590 17 is_stmt 0 view .LVU5386
 20783 00a4 FFF7FEFF 		bl	fin_tst
 20784              	.LVL1592:
3590:src/xeq.c     **** 
 20785              		.loc 1 3590 33 is_stmt 1 view .LVU5387
3590:src/xeq.c     **** 
 20786              		.loc 1 3590 52 view .LVU5388
 20787 00a8 2B88     		ldrh	r3, [r5]
 20788 00aa BDF80620 		ldrh	r2, [sp, #6]
3597:src/xeq.c     **** 		*f |= mask;
 20789              		.loc 1 3597 2 view .LVU5389
3597:src/xeq.c     **** 		*f |= mask;
 20790              		.loc 1 3597 5 is_stmt 0 view .LVU5390
 20791 00ae 002C     		cmp	r4, #0
 20792 00b0 C8D0     		beq	.L1484
 20793 00b2 F0E7     		b	.L1497
 20794              	.LVL1593:
 20795              	.L1483:
3579:src/xeq.c     **** 
 20796              		.loc 1 3579 16 is_stmt 1 view .LVU5391
3579:src/xeq.c     **** 
 20797              		.loc 1 3579 29 is_stmt 0 view .LVU5392
 20798 00b4 B0FA80F4 		clz	r4, r0
 20799 00b8 6409     		lsrs	r4, r4, #5
 20800              	.LVL1594:
3579:src/xeq.c     **** 
 20801              		.loc 1 3579 38 is_stmt 1 view .LVU5393
3597:src/xeq.c     **** 		*f |= mask;
 20802              		.loc 1 3597 2 view .LVU5394
ARM GAS  /tmp/ccQQPlfu.s 			page 554


3597:src/xeq.c     **** 		*f |= mask;
 20803              		.loc 1 3597 5 is_stmt 0 view .LVU5395
 20804 00ba 002C     		cmp	r4, #0
 20805 00bc C2D0     		beq	.L1484
 20806 00be EAE7     		b	.L1497
 20807              		.cfi_endproc
 20808              	.LFE200:
 20810              		.section	.text.put_user_flag,"ax",%progbits
 20811              		.align	1
 20812              		.p2align 2,,3
 20813              		.global	put_user_flag
 20814              		.syntax unified
 20815              		.thumb
 20816              		.thumb_func
 20817              		.fpu fpv4-sp-d16
 20819              	put_user_flag:
 20820              	.LVL1595:
 20821              	.LFB199:
3550:src/xeq.c     **** 	if (f)	set_user_flag(n);
 20822              		.loc 1 3550 34 is_stmt 1 view -0
 20823              		.cfi_startproc
 20824              		@ args = 0, pretend = 0, frame = 0
 20825              		@ frame_needed = 0, uses_anonymous_args = 0
 20826              		@ link register save eliminated.
3551:src/xeq.c     **** 	else	clr_user_flag(n);
 20827              		.loc 1 3551 2 view .LVU5397
3551:src/xeq.c     **** 	else	clr_user_flag(n);
 20828              		.loc 1 3551 5 is_stmt 0 view .LVU5398
 20829 0000 11B1     		cbz	r1, .L1499
3551:src/xeq.c     **** 	else	clr_user_flag(n);
 20830              		.loc 1 3551 9 is_stmt 1 discriminator 1 view .LVU5399
 20831 0002 5121     		movs	r1, #81
 20832              	.LVL1596:
3551:src/xeq.c     **** 	else	clr_user_flag(n);
 20833              		.loc 1 3551 9 is_stmt 0 discriminator 1 view .LVU5400
 20834 0004 FFF7FEBF 		b	cmdflag
 20835              	.LVL1597:
 20836              	.L1499:
3552:src/xeq.c     **** }
 20837              		.loc 1 3552 7 is_stmt 1 view .LVU5401
 20838 0008 5221     		movs	r1, #82
 20839              	.LVL1598:
3552:src/xeq.c     **** }
 20840              		.loc 1 3552 7 is_stmt 0 view .LVU5402
 20841 000a FFF7FEBF 		b	cmdflag
 20842              	.LVL1599:
3552:src/xeq.c     **** }
 20843              		.loc 1 3552 7 view .LVU5403
 20844              		.cfi_endproc
 20845              	.LFE199:
 20847 000e 00BF     		.section	.text.clrflags,"ax",%progbits
 20848              		.align	1
 20849              		.p2align 2,,3
 20850              		.global	clrflags
 20851              		.syntax unified
 20852              		.thumb
 20853              		.thumb_func
ARM GAS  /tmp/ccQQPlfu.s 			page 555


 20854              		.fpu fpv4-sp-d16
 20856              	clrflags:
 20857              	.LVL1600:
 20858              	.LFB201:
3610:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 20859              		.loc 1 3610 30 is_stmt 1 view -0
 20860              		.cfi_startproc
 20861              		@ args = 0, pretend = 0, frame = 0
 20862              		@ frame_needed = 0, uses_anonymous_args = 0
3611:src/xeq.c     **** 	if (LocalRegs < 0) {
 20863              		.loc 1 3611 2 view .LVU5405
3610:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 20864              		.loc 1 3610 30 is_stmt 0 view .LVU5406
 20865 0000 10B5     		push	{r4, lr}
 20866              		.cfi_def_cfa_offset 8
 20867              		.cfi_offset 4, -8
 20868              		.cfi_offset 14, -4
3611:src/xeq.c     **** 	if (LocalRegs < 0) {
 20869              		.loc 1 3611 7 view .LVU5407
 20870 0002 0A4C     		ldr	r4, .L1504
 20871 0004 2068     		ldr	r0, [r4]
 20872              	.LVL1601:
3611:src/xeq.c     **** 	if (LocalRegs < 0) {
 20873              		.loc 1 3611 2 view .LVU5408
 20874 0006 0E22     		movs	r2, #14
 20875 0008 00F5FE60 		add	r0, r0, #2032
 20876 000c 0021     		movs	r1, #0
 20877 000e FFF7FEFF 		bl	xset
 20878              	.LVL1602:
3612:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20879              		.loc 1 3612 2 is_stmt 1 view .LVU5409
3612:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20880              		.loc 1 3612 6 is_stmt 0 view .LVU5410
 20881 0012 2368     		ldr	r3, [r4]
3612:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20882              		.loc 1 3612 5 view .LVU5411
 20883 0014 B3F9DE37 		ldrsh	r3, [r3, #2014]
 20884 0018 002B     		cmp	r3, #0
 20885 001a 00DB     		blt	.L1503
3615:src/xeq.c     **** 
 20886              		.loc 1 3615 1 view .LVU5412
 20887 001c 10BD     		pop	{r4, pc}
 20888              	.L1503:
3613:src/xeq.c     **** 	}
 20889              		.loc 1 3613 3 is_stmt 1 view .LVU5413
3613:src/xeq.c     **** 	}
 20890              		.loc 1 3613 5 is_stmt 0 view .LVU5414
 20891 001e 0021     		movs	r1, #0
 20892 0020 7020     		movs	r0, #112
 20893 0022 FFF7FEFF 		bl	flag_word
 20894              	.LVL1603:
3613:src/xeq.c     **** 	}
 20895              		.loc 1 3613 37 view .LVU5415
 20896 0026 0023     		movs	r3, #0
 20897 0028 0380     		strh	r3, [r0]	@ movhi
3615:src/xeq.c     **** 
 20898              		.loc 1 3615 1 view .LVU5416
ARM GAS  /tmp/ccQQPlfu.s 			page 556


 20899 002a 10BD     		pop	{r4, pc}
 20900              	.L1505:
 20901              		.align	2
 20902              	.L1504:
 20903 002c 00000000 		.word	main_ram
 20904              		.cfi_endproc
 20905              	.LFE201:
 20907              		.section	.text.intws,"ax",%progbits
 20908              		.align	1
 20909              		.p2align 2,,3
 20910              		.global	intws
 20911              		.syntax unified
 20912              		.thumb
 20913              		.thumb_func
 20914              		.fpu fpv4-sp-d16
 20916              	intws:
 20917              	.LVL1604:
 20918              	.LFB202:
3620:src/xeq.c     **** 	if (is_intmode()) {
 20919              		.loc 1 3620 44 is_stmt 1 view -0
 20920              		.cfi_startproc
 20921              		@ args = 0, pretend = 0, frame = 8
 20922              		@ frame_needed = 0, uses_anonymous_args = 0
3621:src/xeq.c     **** 		int i, ss = stack_size();
 20923              		.loc 1 3621 2 view .LVU5418
3620:src/xeq.c     **** 	if (is_intmode()) {
 20924              		.loc 1 3620 44 is_stmt 0 view .LVU5419
 20925 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 20926              		.cfi_def_cfa_offset 24
 20927              		.cfi_offset 4, -24
 20928              		.cfi_offset 5, -20
 20929              		.cfi_offset 6, -16
 20930              		.cfi_offset 7, -12
 20931              		.cfi_offset 8, -8
 20932              		.cfi_offset 14, -4
3621:src/xeq.c     **** 		int i, ss = stack_size();
 20933              		.loc 1 3621 6 view .LVU5420
 20934 0004 DFF8E080 		ldr	r8, .L1517+4
 20935 0008 D8F80030 		ldr	r3, [r8]
 20936 000c 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3621:src/xeq.c     **** 		int i, ss = stack_size();
 20937              		.loc 1 3621 5 view .LVU5421
 20938 0010 D107     		lsls	r1, r2, #31
 20939              	.LVL1605:
3620:src/xeq.c     **** 	if (is_intmode()) {
 20940              		.loc 1 3620 44 view .LVU5422
 20941 0012 82B0     		sub	sp, sp, #8
 20942              		.cfi_def_cfa_offset 32
3621:src/xeq.c     **** 		int i, ss = stack_size();
 20943              		.loc 1 3621 5 view .LVU5423
 20944 0014 53D5     		bpl	.L1507
 20945              	.LBB3084:
3622:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
 20946              		.loc 1 3622 3 is_stmt 1 view .LVU5424
 20947              	.LBB3085:
 20948              	.LBI3085:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
ARM GAS  /tmp/ccQQPlfu.s 			page 557


 20949              		.loc 1 706 5 view .LVU5425
 20950              	.LBB3086:
 707:src/xeq.c     **** 		return 4;
 20951              		.loc 1 707 2 view .LVU5426
 707:src/xeq.c     **** 		return 4;
 20952              		.loc 1 707 6 is_stmt 0 view .LVU5427
 20953 0016 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 20954              		.loc 1 707 5 view .LVU5428
 20955 001a 1207     		lsls	r2, r2, #28
 20956 001c 58D5     		bpl	.L1511
 20957              	.LBB3087:
 20958              	.LBI3087:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 20959              		.loc 1 185 5 is_stmt 1 view .LVU5429
 20960              	.LBB3088:
 186:src/xeq.c     **** }
 20961              		.loc 1 186 2 view .LVU5430
 186:src/xeq.c     **** }
 20962              		.loc 1 186 9 is_stmt 0 view .LVU5431
 20963 001e B3F8E027 		ldrh	r2, [r3, #2016]
 20964              	.LBE3088:
 20965              	.LBE3087:
 707:src/xeq.c     **** 		return 4;
 20966              		.loc 1 707 27 view .LVU5432
 20967 0022 920B     		lsrs	r2, r2, #14
 20968 0024 032A     		cmp	r2, #3
 20969 0026 55D0     		beq	.L1516
 709:src/xeq.c     **** }
 20970              		.loc 1 709 9 view .LVU5433
 20971 0028 0827     		movs	r7, #8
 20972              	.L1508:
 20973              	.LVL1606:
 709:src/xeq.c     **** }
 20974              		.loc 1 709 9 view .LVU5434
 20975              	.LBE3086:
 20976              	.LBE3085:
3623:src/xeq.c     **** 		long long int v;
 20977              		.loc 1 3623 3 is_stmt 1 view .LVU5435
3623:src/xeq.c     **** 		long long int v;
 20978              		.loc 1 3623 31 is_stmt 0 view .LVU5436
 20979 002a 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
 20980 002e 00F03F05 		and	r5, r0, #63
 20981 0032 06F03F06 		and	r6, r6, #63
 20982              	.LVL1607:
3624:src/xeq.c     **** 
 20983              		.loc 1 3624 3 is_stmt 1 view .LVU5437
3626:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20984              		.loc 1 3626 3 view .LVU5438
3626:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20985              		.loc 1 3626 13 view .LVU5439
 20986 0036 6437     		adds	r7, r7, #100
 20987              	.LVL1608:
3623:src/xeq.c     **** 		long long int v;
 20988              		.loc 1 3623 31 is_stmt 0 view .LVU5440
 20989 0038 6424     		movs	r4, #100
 20990              	.LVL1609:
ARM GAS  /tmp/ccQQPlfu.s 			page 558


 20991              	.L1509:
3627:src/xeq.c     **** 			UState.int_len = arg;
 20992              		.loc 1 3627 4 is_stmt 1 discriminator 3 view .LVU5441
3627:src/xeq.c     **** 			UState.int_len = arg;
 20993              		.loc 1 3627 8 is_stmt 0 discriminator 3 view .LVU5442
 20994 003a 2046     		mov	r0, r4
 20995 003c FFF7FEFF 		bl	get_reg_n_int
 20996              	.LVL1610:
 20997 0040 FFF7FEFF 		bl	mask_value
 20998              	.LVL1611:
3628:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 20999              		.loc 1 3628 4 is_stmt 1 discriminator 3 view .LVU5443
3628:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 21000              		.loc 1 3628 19 is_stmt 0 discriminator 3 view .LVU5444
 21001 0044 D8F80030 		ldr	r3, [r8]
 21002 0048 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21003 004c 65F30502 		bfi	r2, r5, #0, #6
 21004 0050 83F8E927 		strb	r2, [r3, #2025]
3629:src/xeq.c     **** 			UState.int_len = oldlen;
 21005              		.loc 1 3629 4 is_stmt 1 discriminator 3 view .LVU5445
 21006 0054 FFF7FEFF 		bl	mask_value
 21007              	.LVL1612:
3629:src/xeq.c     **** 			UState.int_len = oldlen;
 21008              		.loc 1 3629 4 is_stmt 0 discriminator 3 view .LVU5446
 21009 0058 0B46     		mov	r3, r1
 21010 005a 0246     		mov	r2, r0
 21011              	.LBB3090:
 21012              	.LBB3091:
1417:src/xeq.c     **** }
 21013              		.loc 1 1417 8 discriminator 3 view .LVU5447
 21014 005c 2046     		mov	r0, r4
 21015 005e CDE90023 		strd	r2, [sp]
 21016              	.LVL1613:
1417:src/xeq.c     **** }
 21017              		.loc 1 1417 8 discriminator 3 view .LVU5448
 21018              	.LBE3091:
 21019              	.LBI3090:
1416:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 21020              		.loc 1 1416 6 is_stmt 1 discriminator 3 view .LVU5449
 21021              	.LBB3092:
1417:src/xeq.c     **** }
 21022              		.loc 1 1417 2 discriminator 3 view .LVU5450
1417:src/xeq.c     **** }
 21023              		.loc 1 1417 8 is_stmt 0 discriminator 3 view .LVU5451
 21024 0062 FFF7FEFF 		bl	get_reg_n
 21025              	.LVL1614:
1417:src/xeq.c     **** }
 21026              		.loc 1 1417 2 discriminator 3 view .LVU5452
 21027 0066 0822     		movs	r2, #8
 21028 0068 6946     		mov	r1, sp
 21029 006a FFF7FEFF 		bl	xcopy
 21030              	.LVL1615:
1417:src/xeq.c     **** }
 21031              		.loc 1 1417 2 discriminator 3 view .LVU5453
 21032              	.LBE3092:
 21033              	.LBE3090:
3630:src/xeq.c     **** 		}
ARM GAS  /tmp/ccQQPlfu.s 			page 559


 21034              		.loc 1 3630 4 is_stmt 1 discriminator 3 view .LVU5454
3630:src/xeq.c     **** 		}
 21035              		.loc 1 3630 19 is_stmt 0 discriminator 3 view .LVU5455
 21036 006e D8F80030 		ldr	r3, [r8]
 21037 0072 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21038 0076 0134     		adds	r4, r4, #1
 21039              	.LVL1616:
3630:src/xeq.c     **** 		}
 21040              		.loc 1 3630 19 discriminator 3 view .LVU5456
 21041 0078 66F30502 		bfi	r2, r6, #0, #6
3626:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21042              		.loc 1 3626 3 discriminator 3 view .LVU5457
 21043 007c BC42     		cmp	r4, r7
3630:src/xeq.c     **** 		}
 21044              		.loc 1 3630 19 discriminator 3 view .LVU5458
 21045 007e 83F8E927 		strb	r2, [r3, #2025]
3626:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21046              		.loc 1 3626 19 is_stmt 1 discriminator 3 view .LVU5459
 21047              	.LVL1617:
3626:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21048              		.loc 1 3626 13 discriminator 3 view .LVU5460
3626:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21049              		.loc 1 3626 3 is_stmt 0 discriminator 3 view .LVU5461
 21050 0082 DAD1     		bne	.L1509
3632:src/xeq.c     **** 		UState.int_len = arg;
 21051              		.loc 1 3632 3 is_stmt 1 view .LVU5462
3632:src/xeq.c     **** 		UState.int_len = arg;
 21052              		.loc 1 3632 7 is_stmt 0 view .LVU5463
 21053 0084 6C20     		movs	r0, #108
 21054 0086 FFF7FEFF 		bl	get_reg_n_int
 21055              	.LVL1618:
 21056 008a FFF7FEFF 		bl	mask_value
 21057              	.LVL1619:
3633:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 21058              		.loc 1 3633 3 is_stmt 1 view .LVU5464
3633:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 21059              		.loc 1 3633 18 is_stmt 0 view .LVU5465
 21060 008e D8F80030 		ldr	r3, [r8]
 21061 0092 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21062 0096 65F30502 		bfi	r2, r5, #0, #6
 21063 009a 83F8E927 		strb	r2, [r3, #2025]
3634:src/xeq.c     **** 	} else
 21064              		.loc 1 3634 3 is_stmt 1 view .LVU5466
 21065 009e FFF7FEFF 		bl	mask_value
 21066              	.LVL1620:
3634:src/xeq.c     **** 	} else
 21067              		.loc 1 3634 3 is_stmt 0 view .LVU5467
 21068 00a2 0B46     		mov	r3, r1
 21069 00a4 0246     		mov	r2, r0
 21070              	.LBB3093:
 21071              	.LBB3094:
1417:src/xeq.c     **** }
 21072              		.loc 1 1417 8 view .LVU5468
 21073 00a6 6C20     		movs	r0, #108
 21074 00a8 CDE90023 		strd	r2, [sp]
 21075              	.LVL1621:
1417:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 560


 21076              		.loc 1 1417 8 view .LVU5469
 21077              	.LBE3094:
 21078              	.LBI3093:
1416:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 21079              		.loc 1 1416 6 is_stmt 1 view .LVU5470
 21080              	.LBB3095:
1417:src/xeq.c     **** }
 21081              		.loc 1 1417 2 view .LVU5471
1417:src/xeq.c     **** }
 21082              		.loc 1 1417 8 is_stmt 0 view .LVU5472
 21083 00ac FFF7FEFF 		bl	get_reg_n
 21084              	.LVL1622:
1417:src/xeq.c     **** }
 21085              		.loc 1 1417 2 view .LVU5473
 21086 00b0 6946     		mov	r1, sp
 21087 00b2 0822     		movs	r2, #8
 21088 00b4 FFF7FEFF 		bl	xcopy
 21089              	.LVL1623:
1417:src/xeq.c     **** }
 21090              		.loc 1 1417 2 view .LVU5474
 21091              	.LBE3095:
 21092              	.LBE3093:
 21093              	.LBE3084:
3637:src/xeq.c     **** 
 21094              		.loc 1 3637 1 view .LVU5475
 21095 00b8 02B0     		add	sp, sp, #8
 21096              		.cfi_remember_state
 21097              		.cfi_def_cfa_offset 24
 21098              		@ sp needed
 21099 00ba BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21100              	.LVL1624:
 21101              	.L1507:
 21102              		.cfi_restore_state
3636:src/xeq.c     **** }
 21103              		.loc 1 3636 6 is_stmt 1 view .LVU5476
3636:src/xeq.c     **** }
 21104              		.loc 1 3636 21 is_stmt 0 view .LVU5477
 21105 00be 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21106 00c2 60F30502 		bfi	r2, r0, #0, #6
 21107              	.LVL1625:
3636:src/xeq.c     **** }
 21108              		.loc 1 3636 21 view .LVU5478
 21109 00c6 83F8E927 		strb	r2, [r3, #2025]
3637:src/xeq.c     **** 
 21110              		.loc 1 3637 1 view .LVU5479
 21111 00ca 02B0     		add	sp, sp, #8
 21112              		.cfi_remember_state
 21113              		.cfi_def_cfa_offset 24
 21114              		@ sp needed
 21115 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21116              	.LVL1626:
 21117              	.L1511:
 21118              		.cfi_restore_state
 21119              	.LBB3097:
 21120              	.LBB3096:
 21121              	.LBB3089:
 708:src/xeq.c     **** 	return 8;
ARM GAS  /tmp/ccQQPlfu.s 			page 561


 21122              		.loc 1 708 10 view .LVU5480
 21123 00d0 0427     		movs	r7, #4
 21124 00d2 AAE7     		b	.L1508
 21125              	.L1516:
 707:src/xeq.c     **** 		return 4;
 21126              		.loc 1 707 44 view .LVU5481
 21127 00d4 034A     		ldr	r2, .L1517
 707:src/xeq.c     **** 		return 4;
 21128              		.loc 1 707 41 view .LVU5482
 21129 00d6 92F90120 		ldrsb	r2, [r2, #1]
 708:src/xeq.c     **** 	return 8;
 21130              		.loc 1 708 10 view .LVU5483
 21131 00da 002A     		cmp	r2, #0
 21132 00dc B4BF     		ite	lt
 21133 00de 0827     		movlt	r7, #8
 21134 00e0 0427     		movge	r7, #4
 21135 00e2 A2E7     		b	.L1508
 21136              	.L1518:
 21137              		.align	2
 21138              	.L1517:
 21139 00e4 00000000 		.word	XromParams
 21140 00e8 00000000 		.word	main_ram
 21141              	.LBE3089:
 21142              	.LBE3096:
 21143              	.LBE3097:
 21144              		.cfi_endproc
 21145              	.LFE202:
 21147              		.section	.text.get_maxdenom,"ax",%progbits
 21148              		.align	1
 21149              		.p2align 2,,3
 21150              		.global	get_maxdenom
 21151              		.syntax unified
 21152              		.thumb
 21153              		.thumb_func
 21154              		.fpu fpv4-sp-d16
 21156              	get_maxdenom:
 21157              	.LVL1627:
 21158              	.LFB203:
3643:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
 21159              		.loc 1 3643 33 is_stmt 1 view -0
 21160              		.cfi_startproc
 21161              		@ args = 0, pretend = 0, frame = 0
 21162              		@ frame_needed = 0, uses_anonymous_args = 0
 21163              		@ link register save eliminated.
3644:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21164              		.loc 1 3644 2 view .LVU5485
3644:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21165              		.loc 1 3644 32 is_stmt 0 view .LVU5486
 21166 0000 064B     		ldr	r3, .L1521
 21167 0002 1B68     		ldr	r3, [r3]
 21168 0004 D3F8E417 		ldr	r1, [r3, #2020]
3645:src/xeq.c     **** }
 21169              		.loc 1 3645 2 view .LVU5487
 21170 0008 42F20F73 		movw	r3, #9999
3644:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21171              		.loc 1 3644 32 view .LVU5488
 21172 000c C1F38D11 		ubfx	r1, r1, #6, #14
ARM GAS  /tmp/ccQQPlfu.s 			page 562


 21173              	.LVL1628:
3645:src/xeq.c     **** }
 21174              		.loc 1 3645 2 is_stmt 1 view .LVU5489
 21175 0010 0029     		cmp	r1, #0
 21176 0012 08BF     		it	eq
 21177 0014 1946     		moveq	r1, r3
 21178 0016 FFF7FEBF 		b	int_to_dn
 21179              	.LVL1629:
 21180              	.L1522:
3645:src/xeq.c     **** }
 21181              		.loc 1 3645 2 is_stmt 0 view .LVU5490
 21182 001a 00BF     		.align	2
 21183              	.L1521:
 21184 001c 00000000 		.word	main_ram
 21185              		.cfi_endproc
 21186              	.LFE203:
 21188              		.section	.rodata.op_2frac.str1.4,"aMS",%progbits,1
 21189              		.align	2
 21190              	.LC4:
 21191 0000 792F7820 		.ascii	"y/x =\000"
 21191      3D00
 21192 0006 0000     		.align	2
 21193              	.LC5:
 21194 0008 792F7820 		.ascii	"y/x \007\344<\000"
 21194      07E43C00 
 21195              		.align	2
 21196              	.LC6:
 21197 0010 792F7820 		.ascii	"y/x \007\344>\000"
 21197      07E43E00 
 21198              		.section	.text.op_2frac,"ax",%progbits
 21199              		.align	1
 21200              		.p2align 2,,3
 21201              		.global	op_2frac
 21202              		.syntax unified
 21203              		.thumb
 21204              		.thumb_func
 21205              		.fpu fpv4-sp-d16
 21207              	op_2frac:
 21208              	.LVL1630:
 21209              	.LFB204:
3648:src/xeq.c     **** 	decNumber z, n, d, t;
 21210              		.loc 1 3648 30 is_stmt 1 view -0
 21211              		.cfi_startproc
 21212              		@ args = 0, pretend = 0, frame = 144
 21213              		@ frame_needed = 0, uses_anonymous_args = 0
3649:src/xeq.c     **** 
 21214              		.loc 1 3649 2 view .LVU5492
3651:src/xeq.c     **** 		setX_int(1);
 21215              		.loc 1 3651 2 view .LVU5493
3651:src/xeq.c     **** 		setX_int(1);
 21216              		.loc 1 3651 6 is_stmt 0 view .LVU5494
 21217 0000 214B     		ldr	r3, .L1535
3648:src/xeq.c     **** 	decNumber z, n, d, t;
 21218              		.loc 1 3648 30 view .LVU5495
 21219 0002 00B5     		push	{lr}
 21220              		.cfi_def_cfa_offset 4
 21221              		.cfi_offset 14, -4
ARM GAS  /tmp/ccQQPlfu.s 			page 563


3651:src/xeq.c     **** 		setX_int(1);
 21222              		.loc 1 3651 6 view .LVU5496
 21223 0004 1B68     		ldr	r3, [r3]
 21224 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3651:src/xeq.c     **** 		setX_int(1);
 21225              		.loc 1 3651 5 view .LVU5497
 21226 000a DA07     		lsls	r2, r3, #31
3648:src/xeq.c     **** 	decNumber z, n, d, t;
 21227              		.loc 1 3648 30 view .LVU5498
 21228 000c A5B0     		sub	sp, sp, #148
 21229              		.cfi_def_cfa_offset 152
3651:src/xeq.c     **** 		setX_int(1);
 21230              		.loc 1 3651 5 view .LVU5499
 21231 000e 27D4     		bmi	.L1533
3656:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
 21232              		.loc 1 3656 2 is_stmt 1 view .LVU5500
 21233              	.LVL1631:
 21234              	.LBB3098:
 21235              	.LBI3098:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 21236              		.loc 1 826 6 view .LVU5501
 21237              	.LBB3099:
 827:src/xeq.c     **** }
 21238              		.loc 1 827 2 view .LVU5502
 21239 0010 6521     		movs	r1, #101
 21240 0012 6846     		mov	r0, sp
 21241              	.LVL1632:
 827:src/xeq.c     **** }
 21242              		.loc 1 827 2 is_stmt 0 view .LVU5503
 21243 0014 FFF7FEFF 		bl	getRegister
 21244              	.LVL1633:
 827:src/xeq.c     **** }
 21245              		.loc 1 827 2 view .LVU5504
 21246              	.LBE3099:
 21247              	.LBE3098:
3657:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
 21248              		.loc 1 3657 2 is_stmt 1 view .LVU5505
 21249 0018 6A46     		mov	r2, sp
 21250 001a 12A9     		add	r1, sp, #72
 21251 001c 09A8     		add	r0, sp, #36
 21252 001e FFF7FEFF 		bl	decNumber2Fraction
 21253              	.LVL1634:
3658:src/xeq.c     **** 	if (State2.runmode) {
 21254              		.loc 1 3658 2 view .LVU5506
 21255 0022 09A9     		add	r1, sp, #36
 21256 0024 12A8     		add	r0, sp, #72
 21257 0026 FFF7FEFF 		bl	setXY
 21258              	.LVL1635:
3659:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21259              		.loc 1 3659 2 view .LVU5507
3659:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21260              		.loc 1 3659 6 is_stmt 0 view .LVU5508
 21261 002a 184B     		ldr	r3, .L1535+4
 21262 002c 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3659:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21263              		.loc 1 3659 5 view .LVU5509
 21264 002e 5B06     		lsls	r3, r3, #25
ARM GAS  /tmp/ccQQPlfu.s 			page 564


 21265 0030 02D4     		bmi	.L1534
3675:src/xeq.c     **** 
 21266              		.loc 1 3675 1 view .LVU5510
 21267 0032 25B0     		add	sp, sp, #148
 21268              		.cfi_remember_state
 21269              		.cfi_def_cfa_offset 4
 21270              		@ sp needed
 21271 0034 5DF804FB 		ldr	pc, [sp], #4
 21272              	.L1534:
 21273              		.cfi_restore_state
3660:src/xeq.c     **** 		dn_compare(&n, &t, &z);
 21274              		.loc 1 3660 3 is_stmt 1 view .LVU5511
 21275 0038 12AA     		add	r2, sp, #72
 21276 003a 09A9     		add	r1, sp, #36
 21277 003c 1BA8     		add	r0, sp, #108
 21278 003e FFF7FEFF 		bl	dn_divide
 21279              	.LVL1636:
3661:src/xeq.c     **** 		if (dn_eq0(&n))
 21280              		.loc 1 3661 3 view .LVU5512
 21281 0042 6A46     		mov	r2, sp
 21282 0044 1BA9     		add	r1, sp, #108
 21283 0046 09A8     		add	r0, sp, #36
 21284 0048 FFF7FEFF 		bl	dn_compare
 21285              	.LVL1637:
3662:src/xeq.c     **** 			DispMsg = "y/x =";
 21286              		.loc 1 3662 3 view .LVU5513
3662:src/xeq.c     **** 			DispMsg = "y/x =";
 21287              		.loc 1 3662 7 is_stmt 0 view .LVU5514
 21288 004c 09A8     		add	r0, sp, #36
 21289 004e FFF7FEFF 		bl	dn_eq0
 21290              	.LVL1638:
3662:src/xeq.c     **** 			DispMsg = "y/x =";
 21291              		.loc 1 3662 6 view .LVU5515
 21292 0052 60B1     		cbz	r0, .L1527
3663:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 21293              		.loc 1 3663 4 is_stmt 1 view .LVU5516
3663:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 21294              		.loc 1 3663 12 is_stmt 0 view .LVU5517
 21295 0054 0E4B     		ldr	r3, .L1535+8
 21296 0056 0F4A     		ldr	r2, .L1535+12
 21297 0058 1A60     		str	r2, [r3]
3675:src/xeq.c     **** 
 21298              		.loc 1 3675 1 view .LVU5518
 21299 005a 25B0     		add	sp, sp, #148
 21300              		.cfi_remember_state
 21301              		.cfi_def_cfa_offset 4
 21302              		@ sp needed
 21303 005c 5DF804FB 		ldr	pc, [sp], #4
 21304              	.LVL1639:
 21305              	.L1533:
 21306              		.cfi_restore_state
3652:src/xeq.c     **** 		return;
 21307              		.loc 1 3652 3 is_stmt 1 view .LVU5519
 21308 0060 0120     		movs	r0, #1
 21309              	.LVL1640:
3652:src/xeq.c     **** 		return;
 21310              		.loc 1 3652 3 is_stmt 0 view .LVU5520
ARM GAS  /tmp/ccQQPlfu.s 			page 565


 21311 0062 0021     		movs	r1, #0
 21312 0064 FFF7FEFF 		bl	setX_int
 21313              	.LVL1641:
3653:src/xeq.c     **** 	}
 21314              		.loc 1 3653 3 is_stmt 1 view .LVU5521
3675:src/xeq.c     **** 
 21315              		.loc 1 3675 1 is_stmt 0 view .LVU5522
 21316 0068 25B0     		add	sp, sp, #148
 21317              		.cfi_remember_state
 21318              		.cfi_def_cfa_offset 4
 21319              		@ sp needed
 21320 006a 5DF804FB 		ldr	pc, [sp], #4
 21321              	.L1527:
 21322              		.cfi_restore_state
3664:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 21323              		.loc 1 3664 8 is_stmt 1 view .LVU5523
3664:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 21324              		.loc 1 3664 11 is_stmt 0 view .LVU5524
 21325 006e 9DF92C30 		ldrsb	r3, [sp, #44]
 21326 0072 002B     		cmp	r3, #0
3666:src/xeq.c     **** 		else
 21327              		.loc 1 3666 12 view .LVU5525
 21328 0074 B8BF     		it	lt
 21329 0076 084A     		ldrlt	r2, .L1535+16
 21330 0078 054B     		ldr	r3, .L1535+8
3666:src/xeq.c     **** 		else
 21331              		.loc 1 3666 4 is_stmt 1 view .LVU5526
3668:src/xeq.c     **** #else
 21332              		.loc 1 3668 4 view .LVU5527
3668:src/xeq.c     **** #else
 21333              		.loc 1 3668 12 is_stmt 0 view .LVU5528
 21334 007a A8BF     		it	ge
 21335 007c 074A     		ldrge	r2, .L1535+20
 21336 007e 1A60     		str	r2, [r3]
3675:src/xeq.c     **** 
 21337              		.loc 1 3675 1 view .LVU5529
 21338 0080 25B0     		add	sp, sp, #148
 21339              		.cfi_def_cfa_offset 4
 21340              		@ sp needed
 21341 0082 5DF804FB 		ldr	pc, [sp], #4
 21342              	.L1536:
 21343 0086 00BF     		.align	2
 21344              	.L1535:
 21345 0088 00000000 		.word	main_ram
 21346 008c 00000000 		.word	StateWhileOn
 21347 0090 00000000 		.word	DispMsg
 21348 0094 00000000 		.word	.LC4
 21349 0098 08000000 		.word	.LC5
 21350 009c 10000000 		.word	.LC6
 21351              		.cfi_endproc
 21352              	.LFE204:
 21354              		.section	.text.op_fracdenom,"ax",%progbits
 21355              		.align	1
 21356              		.p2align 2,,3
 21357              		.global	op_fracdenom
 21358              		.syntax unified
 21359              		.thumb
ARM GAS  /tmp/ccQQPlfu.s 			page 566


 21360              		.thumb_func
 21361              		.fpu fpv4-sp-d16
 21363              	op_fracdenom:
 21364              	.LVL1642:
 21365              	.LFB205:
3677:src/xeq.c     **** 	int s;
 21366              		.loc 1 3677 34 is_stmt 1 view -0
 21367              		.cfi_startproc
 21368              		@ args = 0, pretend = 0, frame = 8
 21369              		@ frame_needed = 0, uses_anonymous_args = 0
3678:src/xeq.c     **** 	unsigned long long int i;
 21370              		.loc 1 3678 2 view .LVU5531
3679:src/xeq.c     **** 
 21371              		.loc 1 3679 2 view .LVU5532
3681:src/xeq.c     **** 	if (i > 9999)
 21372              		.loc 1 3681 2 view .LVU5533
3677:src/xeq.c     **** 	int s;
 21373              		.loc 1 3677 34 is_stmt 0 view .LVU5534
 21374 0000 2DE90048 		push	{fp, lr}
 21375              		.cfi_def_cfa_offset 8
 21376              		.cfi_offset 11, -8
 21377              		.cfi_offset 14, -4
 21378 0004 84B0     		sub	sp, sp, #16
 21379              		.cfi_def_cfa_offset 24
 21380              	.LVL1643:
 21381              	.LBB3100:
 21382              	.LBI3100:
1440:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 21383              		.loc 1 1440 24 is_stmt 1 view .LVU5535
 21384              	.LBB3101:
1441:src/xeq.c     **** }
 21385              		.loc 1 1441 2 view .LVU5536
1441:src/xeq.c     **** }
 21386              		.loc 1 1441 9 is_stmt 0 view .LVU5537
 21387 0006 03A9     		add	r1, sp, #12
 21388              	.LVL1644:
1441:src/xeq.c     **** }
 21389              		.loc 1 1441 9 view .LVU5538
 21390 0008 6420     		movs	r0, #100
 21391              	.LVL1645:
1441:src/xeq.c     **** }
 21392              		.loc 1 1441 9 view .LVU5539
 21393 000a FFF7FEFF 		bl	get_reg_n_int_sgn
 21394              	.LVL1646:
1441:src/xeq.c     **** }
 21395              		.loc 1 1441 9 view .LVU5540
 21396 000e 8C46     		mov	ip, r1
 21397              	.LVL1647:
1441:src/xeq.c     **** }
 21398              		.loc 1 1441 9 view .LVU5541
 21399              	.LBE3101:
 21400              	.LBE3100:
3682:src/xeq.c     **** 		UState.denom_max = 0;
 21401              		.loc 1 3682 5 view .LVU5542
 21402 0010 0021     		movs	r1, #0
 21403              	.LBB3103:
 21404              	.LBB3102:
ARM GAS  /tmp/ccQQPlfu.s 			page 567


1441:src/xeq.c     **** }
 21405              		.loc 1 1441 9 view .LVU5543
 21406 0012 8346     		mov	fp, r0
 21407              	.LVL1648:
1441:src/xeq.c     **** }
 21408              		.loc 1 1441 9 view .LVU5544
 21409              	.LBE3102:
 21410              	.LBE3103:
3682:src/xeq.c     **** 		UState.denom_max = 0;
 21411              		.loc 1 3682 2 is_stmt 1 view .LVU5545
3682:src/xeq.c     **** 		UState.denom_max = 0;
 21412              		.loc 1 3682 5 is_stmt 0 view .LVU5546
 21413 0014 6145     		cmp	r1, ip
 21414 0016 42F20F70 		movw	r0, #9999
 21415 001a 08BF     		it	eq
 21416 001c 5845     		cmpeq	r0, fp
 21417 001e 0AD2     		bcs	.L1538
3683:src/xeq.c     **** 	else if (i != 1)
 21418              		.loc 1 3683 3 is_stmt 1 view .LVU5547
3683:src/xeq.c     **** 	else if (i != 1)
 21419              		.loc 1 3683 20 is_stmt 0 view .LVU5548
 21420 0020 174B     		ldr	r3, .L1542
 21421 0022 1B68     		ldr	r3, [r3]
 21422 0024 D3F8E427 		ldr	r2, [r3, #2020]
 21423 0028 6FF39312 		bfc	r2, #6, #14
 21424 002c C3F8E427 		str	r2, [r3, #2020]
3690:src/xeq.c     **** 
 21425              		.loc 1 3690 1 view .LVU5549
 21426 0030 04B0     		add	sp, sp, #16
 21427              		.cfi_remember_state
 21428              		.cfi_def_cfa_offset 8
 21429              		@ sp needed
 21430 0032 BDE80088 		pop	{fp, pc}
 21431              	.LVL1649:
 21432              	.L1538:
 21433              		.cfi_restore_state
3684:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 21434              		.loc 1 3684 7 is_stmt 1 view .LVU5550
3684:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 21435              		.loc 1 3684 10 is_stmt 0 view .LVU5551
 21436 0036 BCF1000F 		cmp	ip, #0
 21437 003a 08BF     		it	eq
 21438 003c BBF1010F 		cmpeq	fp, #1
 21439 0040 0AD0     		beq	.L1540
3685:src/xeq.c     **** 	else {
 21440              		.loc 1 3685 3 is_stmt 1 view .LVU5552
3685:src/xeq.c     **** 	else {
 21441              		.loc 1 3685 20 is_stmt 0 view .LVU5553
 21442 0042 0F4B     		ldr	r3, .L1542
 21443 0044 1B68     		ldr	r3, [r3]
 21444 0046 D3F8E417 		ldr	r1, [r3, #2020]
 21445 004a 6BF39311 		bfi	r1, fp, #6, #14
 21446 004e C3F8E417 		str	r1, [r3, #2020]
3690:src/xeq.c     **** 
 21447              		.loc 1 3690 1 view .LVU5554
 21448 0052 04B0     		add	sp, sp, #16
 21449              		.cfi_remember_state
ARM GAS  /tmp/ccQQPlfu.s 			page 568


 21450              		.cfi_def_cfa_offset 8
 21451              		@ sp needed
 21452 0054 BDE80088 		pop	{fp, pc}
 21453              	.LVL1650:
 21454              	.L1540:
 21455              		.cfi_restore_state
3687:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
 21456              		.loc 1 3687 3 is_stmt 1 view .LVU5555
 21457              	.LBB3104:
 21458              	.LBI3104:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 21459              		.loc 1 786 6 view .LVU5556
 21460              	.LBB3105:
 787:src/xeq.c     **** }
 21461              		.loc 1 787 2 view .LVU5557
 21462 0058 6421     		movs	r1, #100
 21463 005a 6C20     		movs	r0, #108
 21464 005c FFF7FEFF 		bl	copyreg_n
 21465              	.LVL1651:
 21466              	.LBE3105:
 21467              	.LBE3104:
3688:src/xeq.c     **** 	}
 21468              		.loc 1 3688 3 view .LVU5558
 21469              	.LBB3106:
 21470              	.LBI3106:
1503:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 21471              		.loc 1 1503 6 view .LVU5559
 21472              	.LBB3107:
1504:src/xeq.c     **** }
 21473              		.loc 1 1504 2 view .LVU5560
 21474              	.LBE3107:
 21475              	.LBE3106:
3688:src/xeq.c     **** 	}
 21476              		.loc 1 3688 22 is_stmt 0 view .LVU5561
 21477 0060 074B     		ldr	r3, .L1542
 21478              	.LVL1652:
3688:src/xeq.c     **** 	}
 21479              		.loc 1 3688 22 view .LVU5562
 21480 0062 1B68     		ldr	r3, [r3]
 21481              	.LVL1653:
3688:src/xeq.c     **** 	}
 21482              		.loc 1 3688 22 view .LVU5563
 21483 0064 D3F8E427 		ldr	r2, [r3, #2020]
 21484              	.LBB3110:
 21485              	.LBB3108:
1504:src/xeq.c     **** }
 21486              		.loc 1 1504 2 view .LVU5564
 21487 0068 0021     		movs	r1, #0
 21488              	.LBE3108:
 21489              	.LBE3110:
3688:src/xeq.c     **** 	}
 21490              		.loc 1 3688 22 view .LVU5565
 21491 006a C2F38D12 		ubfx	r2, r2, #6, #14
 21492              	.LBB3111:
 21493              	.LBB3109:
1504:src/xeq.c     **** }
 21494              		.loc 1 1504 2 view .LVU5566
ARM GAS  /tmp/ccQQPlfu.s 			page 569


 21495 006e 92B2     		uxth	r2, r2
 21496 0070 0023     		movs	r3, #0
 21497              	.LVL1654:
1504:src/xeq.c     **** }
 21498              		.loc 1 1504 2 view .LVU5567
 21499 0072 0091     		str	r1, [sp]
 21500              	.LVL1655:
1504:src/xeq.c     **** }
 21501              		.loc 1 1504 2 view .LVU5568
 21502 0074 6420     		movs	r0, #100
 21503 0076 FFF7FEFF 		bl	set_reg_n_int_sgn
 21504              	.LVL1656:
1504:src/xeq.c     **** }
 21505              		.loc 1 1504 2 view .LVU5569
 21506              	.LBE3109:
 21507              	.LBE3111:
3690:src/xeq.c     **** 
 21508              		.loc 1 3690 1 view .LVU5570
 21509 007a 04B0     		add	sp, sp, #16
 21510              		.cfi_def_cfa_offset 8
 21511              		@ sp needed
 21512 007c BDE80088 		pop	{fp, pc}
 21513              	.LVL1657:
 21514              	.L1543:
3690:src/xeq.c     **** 
 21515              		.loc 1 3690 1 view .LVU5571
 21516              		.align	2
 21517              	.L1542:
 21518 0080 00000000 		.word	main_ram
 21519              		.cfi_endproc
 21520              	.LFE205:
 21522              		.section	.text.op_float,"ax",%progbits
 21523              		.align	1
 21524              		.p2align 2,,3
 21525              		.global	op_float
 21526              		.syntax unified
 21527              		.thumb
 21528              		.thumb_func
 21529              		.fpu fpv4-sp-d16
 21531              	op_float:
 21532              	.LVL1658:
 21533              	.LFB206:
3698:src/xeq.c     **** 
 21534              		.loc 1 3698 30 is_stmt 1 view -0
 21535              		.cfi_startproc
 21536              		@ args = 0, pretend = 0, frame = 40
 21537              		@ frame_needed = 0, uses_anonymous_args = 0
3700:src/xeq.c     **** 		int i;
 21538              		.loc 1 3700 2 view .LVU5573
3698:src/xeq.c     **** 
 21539              		.loc 1 3698 30 is_stmt 0 view .LVU5574
 21540 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 21541              		.cfi_def_cfa_offset 28
 21542              		.cfi_offset 4, -28
 21543              		.cfi_offset 5, -24
 21544              		.cfi_offset 6, -20
 21545              		.cfi_offset 7, -16
ARM GAS  /tmp/ccQQPlfu.s 			page 570


 21546              		.cfi_offset 8, -12
 21547              		.cfi_offset 9, -8
 21548              		.cfi_offset 14, -4
3700:src/xeq.c     **** 		int i;
 21549              		.loc 1 3700 6 view .LVU5575
 21550 0004 2F4F     		ldr	r7, .L1556
 21551 0006 3B68     		ldr	r3, [r7]
 21552 0008 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3700:src/xeq.c     **** 		int i;
 21553              		.loc 1 3700 5 view .LVU5576
 21554 000c D207     		lsls	r2, r2, #31
3698:src/xeq.c     **** 
 21555              		.loc 1 3698 30 view .LVU5577
 21556 000e 8BB0     		sub	sp, sp, #44
 21557              		.cfi_def_cfa_offset 72
3698:src/xeq.c     **** 
 21558              		.loc 1 3698 30 view .LVU5578
 21559 0010 0646     		mov	r6, r0
3700:src/xeq.c     **** 		int i;
 21560              		.loc 1 3700 5 view .LVU5579
 21561 0012 27D5     		bpl	.L1545
 21562              	.LBB3112:
3701:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
 21563              		.loc 1 3701 3 is_stmt 1 view .LVU5580
3702:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21564              		.loc 1 3702 3 view .LVU5581
3702:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21565              		.loc 1 3702 33 is_stmt 0 view .LVU5582
 21566 0014 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
3702:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21567              		.loc 1 3702 26 view .LVU5583
 21568 0018 2B4A     		ldr	r2, .L1556+4
3702:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21569              		.loc 1 3702 33 view .LVU5584
 21570 001a C3F3C003 		ubfx	r3, r3, #3, #1
3703:src/xeq.c     **** 			if (mask & 1) {
 21571              		.loc 1 3703 10 view .LVU5585
 21572 001e 6424     		movs	r4, #100
3702:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21573              		.loc 1 3702 7 view .LVU5586
 21574 0020 32F81350 		ldrh	r5, [r2, r3, lsl #1]
 21575              	.LVL1659:
3703:src/xeq.c     **** 			if (mask & 1) {
 21576              		.loc 1 3703 3 is_stmt 1 view .LVU5587
3703:src/xeq.c     **** 			if (mask & 1) {
 21577              		.loc 1 3703 22 view .LVU5588
 21578              	.LBB3113:
 21579              	.LBB3114:
1113:src/xeq.c     **** }
 21580              		.loc 1 1113 24 is_stmt 0 view .LVU5589
 21581 0024 44F20108 		movw	r8, #16385
 21582 0028 0CE0     		b	.L1548
 21583              	.LVL1660:
 21584              	.L1546:
1113:src/xeq.c     **** }
 21585              		.loc 1 1113 24 view .LVU5590
 21586 002a 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccQQPlfu.s 			page 571


 21587 002c B3F8E837 		ldrh	r3, [r3, #2024]
 21588              	.LBE3114:
 21589              	.LBE3113:
3708:src/xeq.c     **** 				// expand the other registers which have been left
 21590              		.loc 1 3708 12 view .LVU5591
 21591 0030 08EA0303 		and	r3, r8, r3
 21592 0034 B3F5804F 		cmp	r3, #16384
 21593 0038 32D0     		beq	.L1555
 21594              	.L1547:
3703:src/xeq.c     **** 			if (mask & 1) {
 21595              		.loc 1 3703 37 is_stmt 1 discriminator 2 view .LVU5592
 21596 003a 0134     		adds	r4, r4, #1
 21597              	.LVL1661:
3703:src/xeq.c     **** 			if (mask & 1) {
 21598              		.loc 1 3703 3 is_stmt 0 discriminator 2 view .LVU5593
 21599 003c 702C     		cmp	r4, #112
3703:src/xeq.c     **** 			if (mask & 1) {
 21600              		.loc 1 3703 47 discriminator 2 view .LVU5594
 21601 003e 4FEA6505 		asr	r5, r5, #1
 21602              	.LVL1662:
3703:src/xeq.c     **** 			if (mask & 1) {
 21603              		.loc 1 3703 22 is_stmt 1 discriminator 2 view .LVU5595
3703:src/xeq.c     **** 			if (mask & 1) {
 21604              		.loc 1 3703 3 is_stmt 0 discriminator 2 view .LVU5596
 21605 0042 0FD0     		beq	.L1545
 21606              	.LVL1663:
 21607              	.L1548:
3704:src/xeq.c     **** 				// register belongs to stack
 21608              		.loc 1 3704 4 is_stmt 1 view .LVU5597
3708:src/xeq.c     **** 				// expand the other registers which have been left
 21609              		.loc 1 3708 9 view .LVU5598
 21610              	.LBB3116:
 21611              	.LBI3113:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 21612              		.loc 1 1112 5 view .LVU5599
 21613              	.LBB3115:
1113:src/xeq.c     **** }
 21614              		.loc 1 1113 2 view .LVU5600
 21615              	.LBE3115:
 21616              	.LBE3116:
3704:src/xeq.c     **** 				// register belongs to stack
 21617              		.loc 1 3704 7 is_stmt 0 view .LVU5601
 21618 0044 EB07     		lsls	r3, r5, #31
 21619 0046 F0D5     		bpl	.L1546
3706:src/xeq.c     **** 			}
 21620              		.loc 1 3706 5 is_stmt 1 view .LVU5602
 21621 0048 A6F1D002 		sub	r2, r6, #208
 21622 004c B2FA82F2 		clz	r2, r2
 21623 0050 2146     		mov	r1, r4
 21624 0052 2046     		mov	r0, r4
 21625 0054 5209     		lsrs	r2, r2, #5
3703:src/xeq.c     **** 			if (mask & 1) {
 21626              		.loc 1 3703 37 is_stmt 0 view .LVU5603
 21627 0056 0134     		adds	r4, r4, #1
 21628              	.LVL1664:
3706:src/xeq.c     **** 			}
 21629              		.loc 1 3706 5 view .LVU5604
ARM GAS  /tmp/ccQQPlfu.s 			page 572


 21630 0058 FFF7FEFF 		bl	register_from_int
 21631              	.LVL1665:
3703:src/xeq.c     **** 			if (mask & 1) {
 21632              		.loc 1 3703 37 is_stmt 1 view .LVU5605
3703:src/xeq.c     **** 			if (mask & 1) {
 21633              		.loc 1 3703 3 is_stmt 0 view .LVU5606
 21634 005c 702C     		cmp	r4, #112
3703:src/xeq.c     **** 			if (mask & 1) {
 21635              		.loc 1 3703 47 view .LVU5607
 21636 005e 4FEA6505 		asr	r5, r5, #1
 21637              	.LVL1666:
3703:src/xeq.c     **** 			if (mask & 1) {
 21638              		.loc 1 3703 22 is_stmt 1 view .LVU5608
3703:src/xeq.c     **** 			if (mask & 1) {
 21639              		.loc 1 3703 3 is_stmt 0 view .LVU5609
 21640 0062 EFD1     		bne	.L1548
 21641              	.LVL1667:
 21642              	.L1545:
3703:src/xeq.c     **** 			if (mask & 1) {
 21643              		.loc 1 3703 3 view .LVU5610
 21644              	.LBE3112:
3715:src/xeq.c     **** 		UState.fract = 0;
 21645              		.loc 1 3715 2 is_stmt 1 view .LVU5611
3715:src/xeq.c     **** 		UState.fract = 0;
 21646              		.loc 1 3715 25 is_stmt 0 view .LVU5612
 21647 0064 06F13003 		add	r3, r6, #48
3715:src/xeq.c     **** 		UState.fract = 0;
 21648              		.loc 1 3715 5 view .LVU5613
 21649 0068 DBB2     		uxtb	r3, r3
 21650 006a 012B     		cmp	r3, #1
 21651 006c 10D9     		bls	.L1549
3716:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21652              		.loc 1 3716 3 is_stmt 1 view .LVU5614
3716:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21653              		.loc 1 3716 16 is_stmt 0 view .LVU5615
 21654 006e 3A68     		ldr	r2, [r7]
3717:src/xeq.c     **** 	}
 21655              		.loc 1 3717 14 view .LVU5616
 21656 0070 164B     		ldr	r3, .L1556+8
3716:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21657              		.loc 1 3716 16 view .LVU5617
 21658 0072 92F8E617 		ldrb	r1, [r2, #2022]	@ zero_extendqisi2
 21659 0076 6FF34511 		bfc	r1, #5, #1
 21660 007a 82F8E617 		strb	r1, [r2, #2022]
3717:src/xeq.c     **** 	}
 21661              		.loc 1 3717 3 is_stmt 1 view .LVU5618
3717:src/xeq.c     **** 	}
 21662              		.loc 1 3717 35 is_stmt 0 view .LVU5619
 21663 007e A6F15C06 		sub	r6, #92
3717:src/xeq.c     **** 	}
 21664              		.loc 1 3717 14 view .LVU5620
 21665 0082 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
3717:src/xeq.c     **** 	}
 21666              		.loc 1 3717 35 view .LVU5621
 21667 0084 B6FA86F6 		clz	r6, r6
 21668 0088 7609     		lsrs	r6, r6, #5
3717:src/xeq.c     **** 	}
ARM GAS  /tmp/ccQQPlfu.s 			page 573


 21669              		.loc 1 3717 14 view .LVU5622
 21670 008a 66F30002 		bfi	r2, r6, #0, #1
 21671 008e DA75     		strb	r2, [r3, #23]
 21672              	.L1549:
3719:src/xeq.c     **** }
 21673              		.loc 1 3719 2 is_stmt 1 view .LVU5623
3719:src/xeq.c     **** }
 21674              		.loc 1 3719 14 is_stmt 0 view .LVU5624
 21675 0090 6420     		movs	r0, #100
 21676 0092 FFF7FEFF 		bl	get_reg_n
 21677              	.LVL1668:
3719:src/xeq.c     **** }
 21678              		.loc 1 3719 12 view .LVU5625
 21679 0096 0E4B     		ldr	r3, .L1556+12
 21680 0098 1860     		str	r0, [r3]
3720:src/xeq.c     **** 
 21681              		.loc 1 3720 1 view .LVU5626
 21682 009a 0BB0     		add	sp, sp, #44
 21683              		.cfi_remember_state
 21684              		.cfi_def_cfa_offset 28
 21685              		@ sp needed
 21686 009c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 21687              	.LVL1669:
 21688              	.L1555:
 21689              		.cfi_restore_state
 21690              	.LBB3119:
3711:src/xeq.c     **** 			}
 21691              		.loc 1 3711 5 is_stmt 1 view .LVU5627
3711:src/xeq.c     **** 			}
 21692              		.loc 1 3711 29 is_stmt 0 view .LVU5628
 21693 00a0 2046     		mov	r0, r4
 21694 00a2 FFF7FEFF 		bl	get_reg_n
 21695              	.LVL1670:
3711:src/xeq.c     **** 			}
 21696              		.loc 1 3711 47 view .LVU5629
 21697 00a6 3B68     		ldr	r3, [r7]
 21698 00a8 03F22C43 		addw	r3, r3, #1068
3711:src/xeq.c     **** 			}
 21699              		.loc 1 3711 29 view .LVU5630
 21700 00ac 8146     		mov	r9, r0
 21701              	.LVL1671:
 21702              	.LBB3117:
 21703              	.LBI3117:
 648:src/xeq.c     **** 	decNumber temp;
 21704              		.loc 1 648 6 is_stmt 1 view .LVU5631
 21705              	.LBB3118:
 649:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 21706              		.loc 1 649 2 view .LVU5632
 650:src/xeq.c     **** }
 21707              		.loc 1 650 2 view .LVU5633
 650:src/xeq.c     **** }
 21708              		.loc 1 650 27 is_stmt 0 view .LVU5634
 21709 00ae 01A9     		add	r1, sp, #4
 21710 00b0 03EBC400 		add	r0, r3, r4, lsl #3
 21711              	.LVL1672:
 650:src/xeq.c     **** }
 21712              		.loc 1 650 27 view .LVU5635
ARM GAS  /tmp/ccQQPlfu.s 			page 574


 21713 00b4 FFF7FEFF 		bl	decimal64ToNumber
 21714              	.LVL1673:
 650:src/xeq.c     **** }
 21715              		.loc 1 650 27 view .LVU5636
 21716 00b8 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 21717              		.loc 1 650 2 view .LVU5637
 21718 00ba 4846     		mov	r0, r9
 21719 00bc FFF7FEFF 		bl	packed128_from_number
 21720              	.LVL1674:
 651:src/xeq.c     **** 
 21721              		.loc 1 651 1 view .LVU5638
 21722 00c0 BBE7     		b	.L1547
 21723              	.L1557:
 21724 00c2 00BF     		.align	2
 21725              	.L1556:
 21726 00c4 00000000 		.word	main_ram
 21727 00c8 00000000 		.word	.LANCHOR3
 21728 00cc 00000000 		.word	StateWhileOn
 21729 00d0 00000000 		.word	StackBase
 21730              	.LBE3118:
 21731              	.LBE3117:
 21732              	.LBE3119:
 21733              		.cfi_endproc
 21734              	.LFE206:
 21736              		.section	.text.cmddisp,"ax",%progbits
 21737              		.align	1
 21738              		.p2align 2,,3
 21739              		.global	cmddisp
 21740              		.syntax unified
 21741              		.thumb
 21742              		.thumb_func
 21743              		.fpu fpv4-sp-d16
 21745              	cmddisp:
 21746              	.LVL1675:
 21747              	.LFB172:
2442:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 21748              		.loc 1 2442 46 is_stmt 1 view -0
 21749              		.cfi_startproc
 21750              		@ args = 0, pretend = 0, frame = 0
 21751              		@ frame_needed = 0, uses_anonymous_args = 0
 21752              		@ link register save eliminated.
2444:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
 21753              		.loc 1 2444 2 view .LVU5640
2445:src/xeq.c     **** #ifdef DM42
 21754              		.loc 1 2445 2 view .LVU5641
 21755              	.LBB3128:
 21756              	.LBI3128:
2410:src/xeq.c     **** {
 21757              		.loc 1 2410 5 view .LVU5642
 21758              	.LBB3129:
2412:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21759              		.loc 1 2412 2 view .LVU5643
2412:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21760              		.loc 1 2412 17 is_stmt 0 view .LVU5644
 21761 0000 2E4B     		ldr	r3, .L1578
 21762 0002 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccQQPlfu.s 			page 575


 21763              	.LBE3129:
 21764              	.LBE3128:
2442:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 21765              		.loc 1 2442 46 view .LVU5645
 21766 0004 10B4     		push	{r4}
 21767              		.cfi_def_cfa_offset 4
 21768              		.cfi_offset 4, -4
 21769              	.LBB3131:
 21770              	.LBB3130:
2413:src/xeq.c     **** 
 21771              		.loc 1 2413 23 view .LVU5646
 21772 0006 92F8E747 		ldrb	r4, [r2, #2023]	@ zero_extendqisi2
2412:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21773              		.loc 1 2412 23 view .LVU5647
 21774 000a 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
2415:src/xeq.c     **** 		dispdigs -= 12;
 21775              		.loc 1 2415 5 view .LVU5648
 21776 000e 04F00F04 		and	r4, r4, #15
 21777 0012 0B2C     		cmp	r4, #11
2412:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21778              		.loc 1 2412 6 view .LVU5649
 21779 0014 4FEA9313 		lsr	r3, r3, #6
 21780              	.LVL1676:
2413:src/xeq.c     **** 
 21781              		.loc 1 2413 2 is_stmt 1 view .LVU5650
2415:src/xeq.c     **** 		dispdigs -= 12;
 21782              		.loc 1 2415 2 view .LVU5651
2415:src/xeq.c     **** 		dispdigs -= 12;
 21783              		.loc 1 2415 5 is_stmt 0 view .LVU5652
 21784 0018 04D9     		bls	.L1559
2416:src/xeq.c     **** 		dispmode += 4;
 21785              		.loc 1 2416 3 is_stmt 1 view .LVU5653
 21786              	.LVL1677:
2417:src/xeq.c     **** 		if (dispmode >= 6) {
 21787              		.loc 1 2417 3 view .LVU5654
2417:src/xeq.c     **** 		if (dispmode >= 6) {
 21788              		.loc 1 2417 12 is_stmt 0 view .LVU5655
 21789 001a 1C1D     		adds	r4, r3, #4
 21790              	.LVL1678:
2418:src/xeq.c     **** 			dispmode -= 2;
 21791              		.loc 1 2418 3 is_stmt 1 view .LVU5656
2418:src/xeq.c     **** 			dispmode -= 2;
 21792              		.loc 1 2418 6 is_stmt 0 view .LVU5657
 21793 001c 052C     		cmp	r4, #5
2419:src/xeq.c     **** 			dispdigs += 4;
 21794              		.loc 1 2419 4 is_stmt 1 view .LVU5658
2419:src/xeq.c     **** 			dispdigs += 4;
 21795              		.loc 1 2419 13 is_stmt 0 view .LVU5659
 21796 001e CCBF     		ite	gt
 21797 0020 0233     		addgt	r3, r3, #2
 21798              	.LVL1679:
2420:src/xeq.c     **** 		}
 21799              		.loc 1 2420 4 is_stmt 1 view .LVU5660
2420:src/xeq.c     **** 		}
 21800              		.loc 1 2420 4 is_stmt 0 view .LVU5661
 21801 0022 2346     		movle	r3, r4
 21802              	.LVL1680:
ARM GAS  /tmp/ccQQPlfu.s 			page 576


 21803              	.L1559:
2423:src/xeq.c     **** 	return dispmode;
 21804              		.loc 1 2423 2 is_stmt 1 view .LVU5662
2424:src/xeq.c     **** }
 21805              		.loc 1 2424 2 view .LVU5663
2424:src/xeq.c     **** }
 21806              		.loc 1 2424 2 is_stmt 0 view .LVU5664
 21807              	.LBE3130:
 21808              	.LBE3131:
2447:src/xeq.c     **** 	case RARG_STD:
 21809              		.loc 1 2447 2 is_stmt 1 view .LVU5665
 21810 0024 4F29     		cmp	r1, #79
 21811 0026 1DD8     		bhi	.L1560
 21812 0028 4B29     		cmp	r1, #75
 21813 002a 3ED9     		bls	.L1561
 21814 002c 4D39     		subs	r1, r1, #77
 21815              	.LVL1681:
2447:src/xeq.c     **** 	case RARG_STD:
 21816              		.loc 1 2447 2 is_stmt 0 view .LVU5666
 21817 002e 0229     		cmp	r1, #2
 21818 0030 41D8     		bhi	.L1562
 21819 0032 DFE801F0 		tbb	[pc, r1]
 21820              	.LVL1682:
 21821              	.L1564:
 21822 0036 15       		.byte	(.L1566-.L1564)/2
 21823 0037 02       		.byte	(.L1573-.L1564)/2
 21824 0038 38       		.byte	(.L1563-.L1564)/2
 21825 0039 00       		.p2align 1
 21826              	.L1573:
2447:src/xeq.c     **** 	case RARG_STD:
 21827              		.loc 1 2447 2 view .LVU5667
 21828 003a 0223     		movs	r3, #2
 21829              	.L1565:
2480:src/xeq.c     **** #else
 21830              		.loc 1 2480 2 is_stmt 1 view .LVU5668
 21831 003c 0146     		mov	r1, r0
 21832              	.LVL1683:
 21833              	.LBB3132:
 21834              	.LBI3132:
2427:src/xeq.c     **** {
 21835              		.loc 1 2427 6 view .LVU5669
 21836              	.LBB3133:
2429:src/xeq.c     **** 		dispmode -= 4;
 21837              		.loc 1 2429 2 view .LVU5670
 21838              	.L1570:
2437:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21839              		.loc 1 2437 2 view .LVU5671
2438:src/xeq.c     **** }
 21840              		.loc 1 2438 2 view .LVU5672
2437:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21841              		.loc 1 2437 18 is_stmt 0 view .LVU5673
 21842 003e B2F8E607 		ldrh	r0, [r2, #2022]
 21843              	.LVL1684:
2437:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21844              		.loc 1 2437 18 view .LVU5674
 21845              	.LBE3133:
 21846              	.LBE3132:
ARM GAS  /tmp/ccQQPlfu.s 			page 577


2487:src/xeq.c     **** 
 21847              		.loc 1 2487 1 view .LVU5675
 21848 0042 5DF8044B 		ldr	r4, [sp], #4
 21849              		.cfi_remember_state
 21850              		.cfi_restore 4
 21851              		.cfi_def_cfa_offset 0
 21852              	.LBB3137:
 21853              	.LBB3134:
2437:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21854              		.loc 1 2437 18 view .LVU5676
 21855 0046 01F00F01 		and	r1, r1, #15
 21856              	.LVL1685:
2437:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21857              		.loc 1 2437 18 view .LVU5677
 21858 004a 9B01     		lsls	r3, r3, #6
 21859 004c 43EA0123 		orr	r3, r3, r1, lsl #8
 21860 0050 20F47C61 		bic	r1, r0, #4032
 21861 0054 0B43     		orrs	r3, r3, r1
 21862 0056 A2F8E637 		strh	r3, [r2, #2022]	@ movhi
2437:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21863              		.loc 1 2437 18 view .LVU5678
 21864              	.LBE3134:
 21865              	.LBE3137:
2486:src/xeq.c     **** }
 21866              		.loc 1 2486 2 is_stmt 1 view .LVU5679
 21867 005a 5B20     		movs	r0, #91
 21868 005c FFF7FEBF 		b	op_float
 21869              	.LVL1686:
 21870              	.L1566:
 21871              		.cfi_restore_state
2447:src/xeq.c     **** 	case RARG_STD:
 21872              		.loc 1 2447 2 is_stmt 0 view .LVU5680
 21873 0060 0123     		movs	r3, #1
 21874 0062 EBE7     		b	.L1565
 21875              	.LVL1687:
 21876              	.L1560:
2447:src/xeq.c     **** 	case RARG_STD:
 21877              		.loc 1 2447 2 view .LVU5681
 21878 0064 8D29     		cmp	r1, #141
 21879 0066 0CD0     		beq	.L1574
 21880 0068 8E29     		cmp	r1, #142
 21881 006a 08BF     		it	eq
 21882 006c 0523     		moveq	r3, #5
 21883              	.LVL1688:
2447:src/xeq.c     **** 	case RARG_STD:
 21884              		.loc 1 2447 2 view .LVU5682
 21885 006e 1CD1     		bne	.L1561
 21886              	.LVL1689:
 21887              	.L1567:
2468:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21888              		.loc 1 2468 54 discriminator 1 view .LVU5683
 21889 0070 0728     		cmp	r0, #7
 21890 0072 0AD8     		bhi	.L1577
 21891              	.L1568:
2480:src/xeq.c     **** #else
 21892              		.loc 1 2480 2 is_stmt 1 view .LVU5684
 21893              	.LVL1690:
ARM GAS  /tmp/ccQQPlfu.s 			page 578


 21894              	.LBB3138:
2427:src/xeq.c     **** {
 21895              		.loc 1 2427 6 view .LVU5685
 21896              	.LBB3135:
2429:src/xeq.c     **** 		dispmode -= 4;
 21897              		.loc 1 2429 2 view .LVU5686
2430:src/xeq.c     **** 		dispdigs += 12;
 21898              		.loc 1 2430 3 view .LVU5687
2431:src/xeq.c     **** 		if (dispdigs >= 16) {
 21899              		.loc 1 2431 3 view .LVU5688
2431:src/xeq.c     **** 		if (dispdigs >= 16) {
 21900              		.loc 1 2431 12 is_stmt 0 view .LVU5689
 21901 0074 00F10C01 		add	r1, r0, #12
 21902              	.LVL1691:
2432:src/xeq.c     **** 			dispdigs -= 4;
 21903              		.loc 1 2432 3 is_stmt 1 view .LVU5690
2432:src/xeq.c     **** 			dispdigs -= 4;
 21904              		.loc 1 2432 6 is_stmt 0 view .LVU5691
 21905 0078 0F29     		cmp	r1, #15
 21906 007a 0EDC     		bgt	.L1571
2432:src/xeq.c     **** 			dispdigs -= 4;
 21907              		.loc 1 2432 6 view .LVU5692
 21908 007c 03F00303 		and	r3, r3, #3
 21909              	.LVL1692:
2432:src/xeq.c     **** 			dispdigs -= 4;
 21910              		.loc 1 2432 6 view .LVU5693
 21911 0080 DDE7     		b	.L1570
 21912              	.LVL1693:
 21913              	.L1574:
2432:src/xeq.c     **** 			dispdigs -= 4;
 21914              		.loc 1 2432 6 view .LVU5694
 21915              	.LBE3135:
 21916              	.LBE3138:
2468:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21917              		.loc 1 2468 54 view .LVU5695
 21918 0082 0728     		cmp	r0, #7
2461:src/xeq.c     **** 	  break;
 21919              		.loc 1 2461 13 view .LVU5696
 21920 0084 4FF00403 		mov	r3, #4
 21921              	.LVL1694:
2468:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21922              		.loc 1 2468 54 view .LVU5697
 21923 0088 F4D9     		bls	.L1568
 21924              	.LVL1695:
 21925              	.L1577:
2469:src/xeq.c     **** 	  return;
 21926              		.loc 1 2469 4 is_stmt 1 view .LVU5698
 21927              	.LBB3139:
 21928              	.LBI3139:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21929              		.loc 1 540 5 view .LVU5699
 21930              	.LBB3140:
 541:src/xeq.c     **** 		Error = e;
 21931              		.loc 1 541 2 view .LVU5700
 541:src/xeq.c     **** 		Error = e;
 21932              		.loc 1 541 12 is_stmt 0 view .LVU5701
 21933 008a 0D4B     		ldr	r3, .L1578+4
ARM GAS  /tmp/ccQQPlfu.s 			page 579


 21934              	.LVL1696:
 541:src/xeq.c     **** 		Error = e;
 21935              		.loc 1 541 5 view .LVU5702
 21936 008c 1A68     		ldr	r2, [r3]
 21937 008e 0AB9     		cbnz	r2, .L1558
 21938              	.LVL1697:
 21939              	.LBB3141:
 21940              	.LBI3141:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21941              		.loc 1 540 5 is_stmt 1 view .LVU5703
 21942              	.LBB3142:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 21943              		.loc 1 542 3 view .LVU5704
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 21944              		.loc 1 542 9 is_stmt 0 view .LVU5705
 21945 0090 0822     		movs	r2, #8
 21946 0092 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 21947              		.loc 1 543 3 is_stmt 1 view .LVU5706
 21948              	.LVL1698:
 21949              	.L1558:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 21950              		.loc 1 543 3 is_stmt 0 view .LVU5707
 21951              	.LBE3142:
 21952              	.LBE3141:
 21953              	.LBE3140:
 21954              	.LBE3139:
2487:src/xeq.c     **** 
 21955              		.loc 1 2487 1 view .LVU5708
 21956 0094 5DF8044B 		ldr	r4, [sp], #4
 21957              		.cfi_remember_state
 21958              		.cfi_restore 4
 21959              		.cfi_def_cfa_offset 0
 21960 0098 7047     		bx	lr
 21961              	.LVL1699:
 21962              	.L1571:
 21963              		.cfi_restore_state
 21964              	.LBB3143:
 21965              	.LBB3136:
2433:src/xeq.c     **** 			dispmode += 2;
 21966              		.loc 1 2433 4 is_stmt 1 view .LVU5709
2434:src/xeq.c     **** 		}
 21967              		.loc 1 2434 13 is_stmt 0 view .LVU5710
 21968 009a 023B     		subs	r3, r3, #2
 21969              	.LVL1700:
2434:src/xeq.c     **** 		}
 21970              		.loc 1 2434 13 view .LVU5711
 21971 009c 03F00303 		and	r3, r3, #3
 21972              	.LVL1701:
2433:src/xeq.c     **** 			dispmode += 2;
 21973              		.loc 1 2433 13 view .LVU5712
 21974 00a0 00F10801 		add	r1, r0, #8
 21975              	.LVL1702:
2434:src/xeq.c     **** 		}
 21976              		.loc 1 2434 4 is_stmt 1 view .LVU5713
2434:src/xeq.c     **** 		}
 21977              		.loc 1 2434 4 is_stmt 0 view .LVU5714
ARM GAS  /tmp/ccQQPlfu.s 			page 580


 21978 00a4 CBE7     		b	.L1570
 21979              	.LVL1703:
 21980              	.L1563:
2434:src/xeq.c     **** 		}
 21981              		.loc 1 2434 4 view .LVU5715
 21982              	.LBE3136:
 21983              	.LBE3143:
2458:src/xeq.c     **** 	  break;
 21984              		.loc 1 2458 4 is_stmt 1 view .LVU5716
2459:src/xeq.c     **** 	case RARG_SIG:
 21985              		.loc 1 2459 4 view .LVU5717
 21986 00a6 0323     		movs	r3, #3
 21987 00a8 C8E7     		b	.L1565
 21988              	.LVL1704:
 21989              	.L1561:
2466:src/xeq.c     **** 	}
 21990              		.loc 1 2466 10 view .LVU5718
2468:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21991              		.loc 1 2468 2 view .LVU5719
2468:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21992              		.loc 1 2468 28 is_stmt 0 view .LVU5720
 21993 00aa 191F     		subs	r1, r3, #4
 21994              	.LVL1705:
2468:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21995              		.loc 1 2468 5 view .LVU5721
 21996 00ac 0129     		cmp	r1, #1
 21997 00ae DFD9     		bls	.L1567
 21998 00b0 03F00303 		and	r3, r3, #3
 21999              	.LVL1706:
2468:src/xeq.c     **** 	  report_err(ERR_RANGE);
 22000              		.loc 1 2468 5 view .LVU5722
 22001 00b4 C2E7     		b	.L1565
 22002              	.LVL1707:
 22003              	.L1562:
2447:src/xeq.c     **** 	case RARG_STD:
 22004              		.loc 1 2447 2 view .LVU5723
 22005 00b6 0023     		movs	r3, #0
 22006 00b8 C0E7     		b	.L1565
 22007              	.L1579:
 22008 00ba 00BF     		.align	2
 22009              	.L1578:
 22010 00bc 00000000 		.word	main_ram
 22011 00c0 00000000 		.word	Error
 22012              		.cfi_endproc
 22013              	.LFE172:
 22015              		.section	.text.set_int_base,"ax",%progbits
 22016              		.align	1
 22017              		.p2align 2,,3
 22018              		.global	set_int_base
 22019              		.syntax unified
 22020              		.thumb
 22021              		.thumb_func
 22022              		.fpu fpv4-sp-d16
 22024              	set_int_base:
 22025              	.LVL1708:
 22026              	.LFB209:
3748:src/xeq.c     **** 	if (arg < 2) {
ARM GAS  /tmp/ccQQPlfu.s 			page 581


 22027              		.loc 1 3748 51 is_stmt 1 view -0
 22028              		.cfi_startproc
 22029              		@ args = 0, pretend = 0, frame = 0
 22030              		@ frame_needed = 0, uses_anonymous_args = 0
3749:src/xeq.c     **** 		if (arg == 0)
 22031              		.loc 1 3749 2 view .LVU5725
3749:src/xeq.c     **** 		if (arg == 0)
 22032              		.loc 1 3749 5 is_stmt 0 view .LVU5726
 22033 0000 0128     		cmp	r0, #1
3748:src/xeq.c     **** 	if (arg < 2) {
 22034              		.loc 1 3748 51 view .LVU5727
 22035 0002 08B5     		push	{r3, lr}
 22036              		.cfi_def_cfa_offset 8
 22037              		.cfi_offset 3, -8
 22038              		.cfi_offset 14, -4
3749:src/xeq.c     **** 		if (arg == 0)
 22039              		.loc 1 3749 5 view .LVU5728
 22040 0004 0BD9     		bls	.L1585
3755:src/xeq.c     **** }
 22041              		.loc 1 3755 3 is_stmt 1 view .LVU5729
 22042              	.LVL1709:
 22043              	.LBB3144:
 22044              	.LBI3144:
3742:src/xeq.c     **** 	UState.int_base = b - 1;
 22045              		.loc 1 3742 13 view .LVU5730
 22046              	.LBB3145:
3743:src/xeq.c     **** 	if (!is_intmode())
 22047              		.loc 1 3743 2 view .LVU5731
 22048 0006 114B     		ldr	r3, .L1587
 22049 0008 1A68     		ldr	r2, [r3]
3743:src/xeq.c     **** 	if (!is_intmode())
 22050              		.loc 1 3743 18 is_stmt 0 view .LVU5732
 22051 000a 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3743:src/xeq.c     **** 	if (!is_intmode())
 22052              		.loc 1 3743 22 view .LVU5733
 22053 000e 0138     		subs	r0, r0, #1
 22054              	.LVL1710:
3743:src/xeq.c     **** 	if (!is_intmode())
 22055              		.loc 1 3743 18 view .LVU5734
 22056 0010 60F30713 		bfi	r3, r0, #4, #4
 22057 0014 82F8E837 		strb	r3, [r2, #2024]
3744:src/xeq.c     **** 		switch_to_int();
 22058              		.loc 1 3744 2 is_stmt 1 view .LVU5735
3744:src/xeq.c     **** 		switch_to_int();
 22059              		.loc 1 3744 5 is_stmt 0 view .LVU5736
 22060 0018 DB07     		lsls	r3, r3, #31
 22061 001a 12D5     		bpl	.L1586
 22062              	.LBE3145:
 22063              	.LBE3144:
3756:src/xeq.c     **** 
 22064              		.loc 1 3756 1 view .LVU5737
 22065 001c 08BD     		pop	{r3, pc}
 22066              	.LVL1711:
 22067              	.L1585:
3750:src/xeq.c     **** 			op_float(OP_FLOAT);
 22068              		.loc 1 3750 3 is_stmt 1 view .LVU5738
3750:src/xeq.c     **** 			op_float(OP_FLOAT);
ARM GAS  /tmp/ccQQPlfu.s 			page 582


 22069              		.loc 1 3750 6 is_stmt 0 view .LVU5739
 22070 001e 20B9     		cbnz	r0, .L1582
3751:src/xeq.c     **** 		else
 22071              		.loc 1 3751 4 is_stmt 1 view .LVU5740
3756:src/xeq.c     **** 
 22072              		.loc 1 3756 1 is_stmt 0 view .LVU5741
 22073 0020 BDE80840 		pop	{r3, lr}
 22074              		.cfi_remember_state
 22075              		.cfi_restore 14
 22076              		.cfi_restore 3
 22077              		.cfi_def_cfa_offset 0
3751:src/xeq.c     **** 		else
 22078              		.loc 1 3751 4 view .LVU5742
 22079 0024 5B20     		movs	r0, #91
 22080              	.LVL1712:
3751:src/xeq.c     **** 		else
 22081              		.loc 1 3751 4 view .LVU5743
 22082 0026 FFF7FEBF 		b	op_float
 22083              	.LVL1713:
 22084              	.L1582:
 22085              		.cfi_restore_state
3753:src/xeq.c     **** 	} else
 22086              		.loc 1 3753 4 is_stmt 1 view .LVU5744
 22087              	.LBB3148:
 22088              	.LBI3148:
3759:src/xeq.c     **** 	op_float(OP_FLOAT);
 22089              		.loc 1 3759 6 view .LVU5745
 22090              	.LBB3149:
3760:src/xeq.c     **** 	UState.fract = 1;
 22091              		.loc 1 3760 2 view .LVU5746
 22092 002a 5B20     		movs	r0, #91
 22093              	.LVL1714:
3760:src/xeq.c     **** 	UState.fract = 1;
 22094              		.loc 1 3760 2 is_stmt 0 view .LVU5747
 22095 002c FFF7FEFF 		bl	op_float
 22096              	.LVL1715:
3761:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22097              		.loc 1 3761 2 is_stmt 1 view .LVU5748
3761:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22098              		.loc 1 3761 15 is_stmt 0 view .LVU5749
 22099 0030 064B     		ldr	r3, .L1587
 22100 0032 1A68     		ldr	r2, [r3]
 22101 0034 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 22102 0038 43F02003 		orr	r3, r3, #32
 22103 003c 82F8E637 		strb	r3, [r2, #2022]
3762:src/xeq.c     **** 		UState.improperfrac = 1;
 22104              		.loc 1 3762 2 is_stmt 1 view .LVU5750
3764:src/xeq.c     **** 		UState.improperfrac = 0;
 22105              		.loc 1 3764 7 view .LVU5751
 22106              	.LBE3149:
 22107              	.LBE3148:
3756:src/xeq.c     **** 
 22108              		.loc 1 3756 1 is_stmt 0 view .LVU5752
 22109 0040 08BD     		pop	{r3, pc}
 22110              	.LVL1716:
 22111              	.L1586:
 22112              	.LBB3150:
ARM GAS  /tmp/ccQQPlfu.s 			page 583


 22113              	.LBB3146:
3745:src/xeq.c     **** }
 22114              		.loc 1 3745 3 is_stmt 1 view .LVU5753
 22115              	.LBE3146:
 22116              	.LBE3150:
3756:src/xeq.c     **** 
 22117              		.loc 1 3756 1 is_stmt 0 view .LVU5754
 22118 0042 BDE80840 		pop	{r3, lr}
 22119              		.cfi_restore 14
 22120              		.cfi_restore 3
 22121              		.cfi_def_cfa_offset 0
 22122              	.LBB3151:
 22123              	.LBB3147:
3745:src/xeq.c     **** }
 22124              		.loc 1 3745 3 view .LVU5755
 22125 0046 FFF7FEBF 		b	switch_to_int
 22126              	.LVL1717:
 22127              	.L1588:
3745:src/xeq.c     **** }
 22128              		.loc 1 3745 3 view .LVU5756
 22129 004a 00BF     		.align	2
 22130              	.L1587:
 22131 004c 00000000 		.word	main_ram
 22132              	.LBE3147:
 22133              	.LBE3151:
 22134              		.cfi_endproc
 22135              	.LFE209:
 22137              		.section	.text.op_fract,"ax",%progbits
 22138              		.align	1
 22139              		.p2align 2,,3
 22140              		.global	op_fract
 22141              		.syntax unified
 22142              		.thumb
 22143              		.thumb_func
 22144              		.fpu fpv4-sp-d16
 22146              	op_fract:
 22147              	.LVL1718:
 22148              	.LFB210:
3759:src/xeq.c     **** 	op_float(OP_FLOAT);
 22149              		.loc 1 3759 30 is_stmt 1 view -0
 22150              		.cfi_startproc
 22151              		@ args = 0, pretend = 0, frame = 0
 22152              		@ frame_needed = 0, uses_anonymous_args = 0
3760:src/xeq.c     **** 	UState.fract = 1;
 22153              		.loc 1 3760 2 view .LVU5758
3759:src/xeq.c     **** 	op_float(OP_FLOAT);
 22154              		.loc 1 3759 30 is_stmt 0 view .LVU5759
 22155 0000 10B5     		push	{r4, lr}
 22156              		.cfi_def_cfa_offset 8
 22157              		.cfi_offset 4, -8
 22158              		.cfi_offset 14, -4
3759:src/xeq.c     **** 	op_float(OP_FLOAT);
 22159              		.loc 1 3759 30 view .LVU5760
 22160 0002 0446     		mov	r4, r0
3760:src/xeq.c     **** 	UState.fract = 1;
 22161              		.loc 1 3760 2 view .LVU5761
 22162 0004 5B20     		movs	r0, #91
ARM GAS  /tmp/ccQQPlfu.s 			page 584


 22163              	.LVL1719:
3760:src/xeq.c     **** 	UState.fract = 1;
 22164              		.loc 1 3760 2 view .LVU5762
 22165 0006 FFF7FEFF 		bl	op_float
 22166              	.LVL1720:
3761:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22167              		.loc 1 3761 2 is_stmt 1 view .LVU5763
 22168 000a 0D4B     		ldr	r3, .L1595
 22169 000c 1B68     		ldr	r3, [r3]
3761:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22170              		.loc 1 3761 15 is_stmt 0 view .LVU5764
 22171 000e 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
3762:src/xeq.c     **** 		UState.improperfrac = 1;
 22172              		.loc 1 3762 5 view .LVU5765
 22173 0012 4D2C     		cmp	r4, #77
3761:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22174              		.loc 1 3761 15 view .LVU5766
 22175 0014 42F02002 		orr	r2, r2, #32
 22176 0018 83F8E627 		strb	r2, [r3, #2022]
3762:src/xeq.c     **** 		UState.improperfrac = 1;
 22177              		.loc 1 3762 2 is_stmt 1 view .LVU5767
3762:src/xeq.c     **** 		UState.improperfrac = 1;
 22178              		.loc 1 3762 5 is_stmt 0 view .LVU5768
 22179 001c 09D0     		beq	.L1593
3764:src/xeq.c     **** 		UState.improperfrac = 0;
 22180              		.loc 1 3764 7 is_stmt 1 view .LVU5769
3764:src/xeq.c     **** 		UState.improperfrac = 0;
 22181              		.loc 1 3764 10 is_stmt 0 view .LVU5770
 22182 001e 4E2C     		cmp	r4, #78
 22183 0020 00D0     		beq	.L1594
3766:src/xeq.c     **** 
 22184              		.loc 1 3766 1 view .LVU5771
 22185 0022 10BD     		pop	{r4, pc}
 22186              	.L1594:
3765:src/xeq.c     **** }
 22187              		.loc 1 3765 3 is_stmt 1 view .LVU5772
3765:src/xeq.c     **** }
 22188              		.loc 1 3765 23 is_stmt 0 view .LVU5773
 22189 0024 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 22190 0028 6FF30412 		bfc	r2, #4, #1
 22191 002c 83F8E627 		strb	r2, [r3, #2022]
3766:src/xeq.c     **** 
 22192              		.loc 1 3766 1 view .LVU5774
 22193 0030 10BD     		pop	{r4, pc}
 22194              	.L1593:
3763:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 22195              		.loc 1 3763 3 is_stmt 1 view .LVU5775
3763:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 22196              		.loc 1 3763 23 is_stmt 0 view .LVU5776
 22197 0032 D2B2     		uxtb	r2, r2
 22198 0034 42F01002 		orr	r2, r2, #16
 22199 0038 83F8E627 		strb	r2, [r3, #2022]
3766:src/xeq.c     **** 
 22200              		.loc 1 3766 1 view .LVU5777
 22201 003c 10BD     		pop	{r4, pc}
 22202              	.L1596:
 22203 003e 00BF     		.align	2
ARM GAS  /tmp/ccQQPlfu.s 			page 585


 22204              	.L1595:
 22205 0040 00000000 		.word	main_ram
 22206              		.cfi_endproc
 22207              	.LFE210:
 22209              		.section	.text.cmdsavem,"ax",%progbits
 22210              		.align	1
 22211              		.p2align 2,,3
 22212              		.global	cmdsavem
 22213              		.syntax unified
 22214              		.thumb
 22215              		.thumb_func
 22216              		.fpu fpv4-sp-d16
 22218              	cmdsavem:
 22219              	.LVL1721:
 22220              	.LFB211:
3771:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 22221              		.loc 1 3771 47 is_stmt 1 view -0
 22222              		.cfi_startproc
 22223              		@ args = 0, pretend = 0, frame = 0
 22224              		@ frame_needed = 0, uses_anonymous_args = 0
3772:src/xeq.c     **** }
 22225              		.loc 1 3772 2 view .LVU5779
3771:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 22226              		.loc 1 3771 47 is_stmt 0 view .LVU5780
 22227 0000 08B5     		push	{r3, lr}
 22228              		.cfi_def_cfa_offset 8
 22229              		.cfi_offset 3, -8
 22230              		.cfi_offset 14, -4
3772:src/xeq.c     **** }
 22231              		.loc 1 3772 9 view .LVU5781
 22232 0002 FFF7FEFF 		bl	get_reg_n
 22233              	.LVL1722:
3772:src/xeq.c     **** }
 22234              		.loc 1 3772 26 view .LVU5782
 22235 0006 044B     		ldr	r3, .L1599
3772:src/xeq.c     **** }
 22236              		.loc 1 3772 25 view .LVU5783
 22237 0008 1968     		ldr	r1, [r3]
3772:src/xeq.c     **** }
 22238              		.loc 1 3772 2 view .LVU5784
 22239 000a 0822     		movs	r2, #8
3773:src/xeq.c     **** 
 22240              		.loc 1 3773 1 view .LVU5785
 22241 000c BDE80840 		pop	{r3, lr}
 22242              		.cfi_restore 14
 22243              		.cfi_restore 3
 22244              		.cfi_def_cfa_offset 0
3772:src/xeq.c     **** }
 22245              		.loc 1 3772 2 view .LVU5786
 22246 0010 01F2E471 		addw	r1, r1, #2020
 22247 0014 FFF7FEBF 		b	xcopy
 22248              	.LVL1723:
 22249              	.L1600:
 22250              		.align	2
 22251              	.L1599:
 22252 0018 00000000 		.word	main_ram
 22253              		.cfi_endproc
ARM GAS  /tmp/ccQQPlfu.s 			page 586


 22254              	.LFE211:
 22256              		.section	.text.set_entry,"ax",%progbits
 22257              		.align	1
 22258              		.p2align 2,,3
 22259              		.global	set_entry
 22260              		.syntax unified
 22261              		.thumb
 22262              		.thumb_func
 22263              		.fpu fpv4-sp-d16
 22265              	set_entry:
 22266              	.LFB214:
3897:src/xeq.c     **** 	if (!Running && !XromRunning)
 22267              		.loc 1 3897 18 is_stmt 1 view -0
 22268              		.cfi_startproc
 22269              		@ args = 0, pretend = 0, frame = 0
 22270              		@ frame_needed = 0, uses_anonymous_args = 0
 22271              		@ link register save eliminated.
3898:src/xeq.c     **** 		State.entryp = 1;
 22272              		.loc 1 3898 2 view .LVU5788
 22273              	.LBB3154:
 22274              	.LBI3154:
3897:src/xeq.c     **** 	if (!Running && !XromRunning)
 22275              		.loc 1 3897 6 view .LVU5789
 22276              	.LBE3154:
3898:src/xeq.c     **** 		State.entryp = 1;
 22277              		.loc 1 3898 6 is_stmt 0 view .LVU5790
 22278 0000 074A     		ldr	r2, .L1603
 22279              	.LBB3156:
 22280              	.LBB3155:
3898:src/xeq.c     **** 		State.entryp = 1;
 22281              		.loc 1 3898 18 view .LVU5791
 22282 0002 084B     		ldr	r3, .L1603+4
3898:src/xeq.c     **** 		State.entryp = 1;
 22283              		.loc 1 3898 15 view .LVU5792
 22284 0004 1268     		ldr	r2, [r2]
 22285 0006 1B68     		ldr	r3, [r3]
 22286 0008 1343     		orrs	r3, r2, r3
 22287 000a 07D1     		bne	.L1601
3899:src/xeq.c     **** }
 22288              		.loc 1 3899 3 is_stmt 1 view .LVU5793
3899:src/xeq.c     **** }
 22289              		.loc 1 3899 16 is_stmt 0 view .LVU5794
 22290 000c 064B     		ldr	r3, .L1603+8
 22291 000e 1A68     		ldr	r2, [r3]
 22292 0010 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 22293 0014 43F01003 		orr	r3, r3, #16
 22294 0018 82F8DD37 		strb	r3, [r2, #2013]
 22295              	.L1601:
 22296              	.LBE3155:
 22297              	.LBE3156:
3900:src/xeq.c     **** 
 22298              		.loc 1 3900 1 view .LVU5795
 22299 001c 7047     		bx	lr
 22300              	.L1604:
 22301 001e 00BF     		.align	2
 22302              	.L1603:
 22303 0020 00000000 		.word	Running
ARM GAS  /tmp/ccQQPlfu.s 			page 587


 22304 0024 00000000 		.word	XromRunning
 22305 0028 00000000 		.word	main_ram
 22306              		.cfi_endproc
 22307              	.LFE214:
 22309              		.section	.text.get_trig_mode,"ax",%progbits
 22310              		.align	1
 22311              		.p2align 2,,3
 22312              		.global	get_trig_mode
 22313              		.syntax unified
 22314              		.thumb
 22315              		.thumb_func
 22316              		.fpu fpv4-sp-d16
 22318              	get_trig_mode:
 22319              	.LFB216:
4085:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 22320              		.loc 1 4085 37 is_stmt 1 view -0
 22321              		.cfi_startproc
 22322              		@ args = 0, pretend = 0, frame = 0
 22323              		@ frame_needed = 0, uses_anonymous_args = 0
 22324              		@ link register save eliminated.
4086:src/xeq.c     **** 		return TRIG_RAD;
 22325              		.loc 1 4086 2 view .LVU5797
4086:src/xeq.c     **** 		return TRIG_RAD;
 22326              		.loc 1 4086 6 is_stmt 0 view .LVU5798
 22327 0000 084B     		ldr	r3, .L1609
 22328 0002 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
4086:src/xeq.c     **** 		return TRIG_RAD;
 22329              		.loc 1 4086 5 view .LVU5799
 22330 0004 9B07     		lsls	r3, r3, #30
 22331 0006 0AD4     		bmi	.L1608
4086:src/xeq.c     **** 		return TRIG_RAD;
 22332              		.loc 1 4086 19 discriminator 1 view .LVU5800
 22333 0008 074B     		ldr	r3, .L1609+4
 22334 000a 93F90130 		ldrsb	r3, [r3, #1]
 22335 000e 002B     		cmp	r3, #0
 22336 0010 05DB     		blt	.L1608
4089:src/xeq.c     **** }
 22337              		.loc 1 4089 2 is_stmt 1 view .LVU5801
4089:src/xeq.c     **** }
 22338              		.loc 1 4089 33 is_stmt 0 view .LVU5802
 22339 0012 064B     		ldr	r3, .L1609+8
 22340 0014 1B68     		ldr	r3, [r3]
 22341 0016 93F8EA07 		ldrb	r0, [r3, #2026]	@ zero_extendqisi2
4089:src/xeq.c     **** }
 22342              		.loc 1 4089 9 view .LVU5803
 22343 001a 8009     		lsrs	r0, r0, #6
 22344 001c 7047     		bx	lr
 22345              	.L1608:
4087:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
 22346              		.loc 1 4087 10 view .LVU5804
 22347 001e 0120     		movs	r0, #1
4090:src/xeq.c     **** 
 22348              		.loc 1 4090 1 view .LVU5805
 22349 0020 7047     		bx	lr
 22350              	.L1610:
 22351 0022 00BF     		.align	2
 22352              	.L1609:
ARM GAS  /tmp/ccQQPlfu.s 			page 588


 22353 0024 00000000 		.word	StateWhileOn
 22354 0028 00000000 		.word	XromParams
 22355 002c 00000000 		.word	main_ram
 22356              		.cfi_endproc
 22357              	.LFE216:
 22359              		.section	.text.cmdpause,"ax",%progbits
 22360              		.align	1
 22361              		.p2align 2,,3
 22362              		.global	cmdpause
 22363              		.syntax unified
 22364              		.thumb
 22365              		.thumb_func
 22366              		.fpu fpv4-sp-d16
 22368              	cmdpause:
 22369              	.LVL1724:
 22370              	.LFB218:
4135:src/xeq.c     **** 	display();
 22371              		.loc 1 4135 47 is_stmt 1 view -0
 22372              		.cfi_startproc
 22373              		@ args = 0, pretend = 0, frame = 0
 22374              		@ frame_needed = 0, uses_anonymous_args = 0
4136:src/xeq.c     **** #ifndef CONSOLE
 22375              		.loc 1 4136 2 view .LVU5807
4135:src/xeq.c     **** 	display();
 22376              		.loc 1 4135 47 is_stmt 0 view .LVU5808
 22377 0000 10B5     		push	{r4, lr}
 22378              		.cfi_def_cfa_offset 8
 22379              		.cfi_offset 4, -8
 22380              		.cfi_offset 14, -4
4135:src/xeq.c     **** 	display();
 22381              		.loc 1 4135 47 view .LVU5809
 22382 0002 0446     		mov	r4, r0
4136:src/xeq.c     **** #ifndef CONSOLE
 22383              		.loc 1 4136 2 view .LVU5810
 22384 0004 FFF7FEFF 		bl	display
 22385              	.LVL1725:
4139:src/xeq.c     **** 	GoFast = (arg == 0);
 22386              		.loc 1 4139 2 is_stmt 1 view .LVU5811
4139:src/xeq.c     **** 	GoFast = (arg == 0);
 22387              		.loc 1 4139 8 is_stmt 0 view .LVU5812
 22388 0008 044A     		ldr	r2, .L1613
4140:src/xeq.c     **** #elif 0
 22389              		.loc 1 4140 9 view .LVU5813
 22390 000a 0549     		ldr	r1, .L1613+4
4140:src/xeq.c     **** #elif 0
 22391              		.loc 1 4140 16 view .LVU5814
 22392 000c B4FA84F3 		clz	r3, r4
4139:src/xeq.c     **** 	GoFast = (arg == 0);
 22393              		.loc 1 4139 8 view .LVU5815
 22394 0010 E4B2     		uxtb	r4, r4
 22395              	.LVL1726:
4140:src/xeq.c     **** #elif 0
 22396              		.loc 1 4140 16 view .LVU5816
 22397 0012 5B09     		lsrs	r3, r3, #5
4139:src/xeq.c     **** 	GoFast = (arg == 0);
 22398              		.loc 1 4139 8 view .LVU5817
 22399 0014 1470     		strb	r4, [r2]
ARM GAS  /tmp/ccQQPlfu.s 			page 589


4140:src/xeq.c     **** #elif 0
 22400              		.loc 1 4140 2 is_stmt 1 view .LVU5818
4140:src/xeq.c     **** #elif 0
 22401              		.loc 1 4140 9 is_stmt 0 view .LVU5819
 22402 0016 0B60     		str	r3, [r1]
4151:src/xeq.c     **** 
 22403              		.loc 1 4151 1 view .LVU5820
 22404 0018 10BD     		pop	{r4, pc}
 22405              	.L1614:
 22406 001a 00BF     		.align	2
 22407              	.L1613:
 22408 001c 00000000 		.word	Pause
 22409 0020 00000000 		.word	GoFast
 22410              		.cfi_endproc
 22411              	.LFE218:
 22413              		.section	.text.op_setspeed,"ax",%progbits
 22414              		.align	1
 22415              		.p2align 2,,3
 22416              		.global	op_setspeed
 22417              		.syntax unified
 22418              		.thumb
 22419              		.thumb_func
 22420              		.fpu fpv4-sp-d16
 22422              	op_setspeed:
 22423              	.LVL1727:
 22424              	.LFB219:
4155:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
 22425              		.loc 1 4155 33 is_stmt 1 view -0
 22426              		.cfi_startproc
 22427              		@ args = 0, pretend = 0, frame = 0
 22428              		@ frame_needed = 0, uses_anonymous_args = 0
 22429              		@ link register save eliminated.
4156:src/xeq.c     **** 	update_speed(1);
 22430              		.loc 1 4156 2 view .LVU5822
4156:src/xeq.c     **** 	update_speed(1);
 22431              		.loc 1 4156 20 is_stmt 0 view .LVU5823
 22432 0000 064B     		ldr	r3, .L1616
 22433 0002 1B68     		ldr	r3, [r3]
4156:src/xeq.c     **** 	update_speed(1);
 22434              		.loc 1 4156 42 view .LVU5824
 22435 0004 A0F19A00 		sub	r0, #154
 22436              	.LVL1728:
4156:src/xeq.c     **** 	update_speed(1);
 22437              		.loc 1 4156 20 view .LVU5825
 22438 0008 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
4156:src/xeq.c     **** 	update_speed(1);
 22439              		.loc 1 4156 42 view .LVU5826
 22440 000c B0FA80F0 		clz	r0, r0
 22441 0010 4009     		lsrs	r0, r0, #5
4156:src/xeq.c     **** 	update_speed(1);
 22442              		.loc 1 4156 20 view .LVU5827
 22443 0012 60F3C302 		bfi	r2, r0, #3, #1
 22444 0016 83F8EB27 		strb	r2, [r3, #2027]
4157:src/xeq.c     **** }
 22445              		.loc 1 4157 17 is_stmt 1 view .LVU5828
4158:src/xeq.c     **** 
 22446              		.loc 1 4158 1 is_stmt 0 view .LVU5829
ARM GAS  /tmp/ccQQPlfu.s 			page 590


 22447 001a 7047     		bx	lr
 22448              	.L1617:
 22449              		.align	2
 22450              	.L1616:
 22451 001c 00000000 		.word	main_ram
 22452              		.cfi_endproc
 22453              	.LFE219:
 22455              		.section	.text.op_prompt,"ax",%progbits
 22456              		.align	1
 22457              		.p2align 2,,3
 22458              		.global	op_prompt
 22459              		.syntax unified
 22460              		.thumb
 22461              		.thumb_func
 22462              		.fpu fpv4-sp-d16
 22464              	op_prompt:
 22465              	.LVL1729:
 22466              	.LFB220:
4161:src/xeq.c     **** 	set_running_off();
 22467              		.loc 1 4161 31 is_stmt 1 view -0
 22468              		.cfi_startproc
 22469              		@ args = 0, pretend = 0, frame = 0
 22470              		@ frame_needed = 0, uses_anonymous_args = 0
4162:src/xeq.c     **** 	alpha_view_common(regX_idx);
 22471              		.loc 1 4162 2 view .LVU5831
 22472              	.LBB3157:
 22473              	.LBI3157:
5802:src/xeq.c     **** 	set_running_off_sst();
 22474              		.loc 1 5802 6 view .LVU5832
 22475              	.LBB3158:
5803:src/xeq.c     **** 	State.entryp = 0;
 22476              		.loc 1 5803 2 view .LVU5833
 22477              	.LBB3159:
 22478              	.LBI3159:
5794:src/xeq.c     **** 	Running = 0;
 22479              		.loc 1 5794 6 view .LVU5834
 22480              	.LBB3160:
5795:src/xeq.c     **** }
 22481              		.loc 1 5795 2 view .LVU5835
 22482              	.LBE3160:
 22483              	.LBE3159:
 22484              	.LBE3158:
 22485              	.LBE3157:
4161:src/xeq.c     **** 	set_running_off();
 22486              		.loc 1 4161 31 is_stmt 0 view .LVU5836
 22487 0000 08B5     		push	{r3, lr}
 22488              		.cfi_def_cfa_offset 8
 22489              		.cfi_offset 3, -8
 22490              		.cfi_offset 14, -4
 22491              	.LBB3166:
 22492              	.LBB3165:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 22493              		.loc 1 5804 15 view .LVU5837
 22494 0002 094B     		ldr	r3, .L1620
 22495              	.LBB3163:
 22496              	.LBB3161:
5795:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 591


 22497              		.loc 1 5795 10 view .LVU5838
 22498 0004 094A     		ldr	r2, .L1620+4
 22499              	.LBE3161:
 22500              	.LBE3163:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 22501              		.loc 1 5804 15 view .LVU5839
 22502 0006 1B68     		ldr	r3, [r3]
 22503              	.LBB3164:
 22504              	.LBB3162:
5795:src/xeq.c     **** }
 22505              		.loc 1 5795 10 view .LVU5840
 22506 0008 0021     		movs	r1, #0
 22507 000a 1160     		str	r1, [r2]
 22508              	.LBE3162:
 22509              	.LBE3164:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 22510              		.loc 1 5804 2 is_stmt 1 view .LVU5841
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 22511              		.loc 1 5804 15 is_stmt 0 view .LVU5842
 22512 000c 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 22513 0010 61F30412 		bfi	r2, r1, #4, #1
 22514 0014 83F8DD27 		strb	r2, [r3, #2013]
 22515              		.loc 1 5805 2 is_stmt 1 view .LVU5843
 22516 0018 8A20     		movs	r0, #138
 22517              	.LVL1730:
 22518              		.loc 1 5805 2 is_stmt 0 view .LVU5844
 22519 001a FFF7FEFF 		bl	dot
 22520              	.LVL1731:
 22521              	.LBE3165:
 22522              	.LBE3166:
4163:src/xeq.c     **** }
 22523              		.loc 1 4163 2 is_stmt 1 view .LVU5845
4164:src/xeq.c     **** 
 22524              		.loc 1 4164 1 is_stmt 0 view .LVU5846
 22525 001e BDE80840 		pop	{r3, lr}
 22526              		.cfi_restore 14
 22527              		.cfi_restore 3
 22528              		.cfi_def_cfa_offset 0
4163:src/xeq.c     **** }
 22529              		.loc 1 4163 2 view .LVU5847
 22530 0022 6420     		movs	r0, #100
 22531 0024 FFF7FEBF 		b	alpha_view_common
 22532              	.LVL1732:
 22533              	.L1621:
 22534              		.align	2
 22535              	.L1620:
 22536 0028 00000000 		.word	main_ram
 22537 002c 00000000 		.word	Running
 22538              		.cfi_endproc
 22539              	.LFE220:
 22541              		.section	.text.XisInt,"ax",%progbits
 22542              		.align	1
 22543              		.p2align 2,,3
 22544              		.global	XisInt
 22545              		.syntax unified
 22546              		.thumb
 22547              		.thumb_func
ARM GAS  /tmp/ccQQPlfu.s 			page 592


 22548              		.fpu fpv4-sp-d16
 22550              	XisInt:
 22551              	.LVL1733:
 22552              	.LFB221:
4168:src/xeq.c     **** 	decNumber x;
 22553              		.loc 1 4168 28 is_stmt 1 view -0
 22554              		.cfi_startproc
 22555              		@ args = 0, pretend = 0, frame = 40
 22556              		@ frame_needed = 0, uses_anonymous_args = 0
4169:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
 22557              		.loc 1 4169 2 view .LVU5849
4170:src/xeq.c     **** 	if ( is_intmode() )
 22558              		.loc 1 4170 2 view .LVU5850
4171:src/xeq.c     **** 		result = op_int;
 22559              		.loc 1 4171 7 is_stmt 0 view .LVU5851
 22560 0000 164B     		ldr	r3, .L1628
4168:src/xeq.c     **** 	decNumber x;
 22561              		.loc 1 4168 28 view .LVU5852
 22562 0002 30B5     		push	{r4, r5, lr}
 22563              		.cfi_def_cfa_offset 12
 22564              		.cfi_offset 4, -12
 22565              		.cfi_offset 5, -8
 22566              		.cfi_offset 14, -4
4171:src/xeq.c     **** 		result = op_int;
 22567              		.loc 1 4171 7 view .LVU5853
 22568 0004 1B68     		ldr	r3, [r3]
 22569 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4170:src/xeq.c     **** 	if ( is_intmode() )
 22570              		.loc 1 4170 27 view .LVU5854
 22571 000a A0F18704 		sub	r4, r0, #135
 22572 000e B4FA84F4 		clz	r4, r4
4171:src/xeq.c     **** 		result = op_int;
 22573              		.loc 1 4171 5 view .LVU5855
 22574 0012 13F00105 		ands	r5, r3, #1
4168:src/xeq.c     **** 	decNumber x;
 22575              		.loc 1 4168 28 view .LVU5856
 22576 0016 8BB0     		sub	sp, sp, #44
 22577              		.cfi_def_cfa_offset 56
4170:src/xeq.c     **** 	if ( is_intmode() )
 22578              		.loc 1 4170 27 view .LVU5857
 22579 0018 4FEA5414 		lsr	r4, r4, #5
 22580              	.LVL1734:
4171:src/xeq.c     **** 		result = op_int;
 22581              		.loc 1 4171 2 is_stmt 1 view .LVU5858
4171:src/xeq.c     **** 		result = op_int;
 22582              		.loc 1 4171 5 is_stmt 0 view .LVU5859
 22583 001c 04D0     		beq	.L1626
 22584              	.LVL1735:
4177:src/xeq.c     **** }
 22585              		.loc 1 4177 2 is_stmt 1 view .LVU5860
 22586 001e 2046     		mov	r0, r4
 22587              	.LVL1736:
4177:src/xeq.c     **** }
 22588              		.loc 1 4177 2 is_stmt 0 view .LVU5861
 22589 0020 FFF7FEFF 		bl	fin_tst
 22590              	.LVL1737:
4178:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 593


 22591              		.loc 1 4178 1 view .LVU5862
 22592 0024 0BB0     		add	sp, sp, #44
 22593              		.cfi_remember_state
 22594              		.cfi_def_cfa_offset 12
 22595              		@ sp needed
 22596 0026 30BD     		pop	{r4, r5, pc}
 22597              	.LVL1738:
 22598              	.L1626:
 22599              		.cfi_restore_state
4173:src/xeq.c     **** 		result = 0;
 22600              		.loc 1 4173 7 is_stmt 1 view .LVU5863
 22601              	.LBB3167:
 22602              	.LBI3167:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22603              		.loc 1 818 12 view .LVU5864
 22604              	.LBB3168:
 819:src/xeq.c     **** }
 22605              		.loc 1 819 2 view .LVU5865
 819:src/xeq.c     **** }
 22606              		.loc 1 819 9 is_stmt 0 view .LVU5866
 22607 0028 01A8     		add	r0, sp, #4
 22608              	.LVL1739:
 819:src/xeq.c     **** }
 22609              		.loc 1 819 9 view .LVU5867
 22610 002a 6421     		movs	r1, #100
 22611 002c FFF7FEFF 		bl	getRegister
 22612              	.LVL1740:
 819:src/xeq.c     **** }
 22613              		.loc 1 819 9 view .LVU5868
 22614              	.LBE3168:
 22615              	.LBE3167:
4173:src/xeq.c     **** 		result = 0;
 22616              		.loc 1 4173 10 view .LVU5869
 22617 0030 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 22618 0032 13F0700F 		tst	r3, #112
 22619 0036 05D0     		beq	.L1627
4174:src/xeq.c     **** 	else
 22620              		.loc 1 4174 10 view .LVU5870
 22621 0038 2C46     		mov	r4, r5
 22622              	.LVL1741:
4177:src/xeq.c     **** }
 22623              		.loc 1 4177 2 is_stmt 1 view .LVU5871
 22624 003a 2046     		mov	r0, r4
 22625 003c FFF7FEFF 		bl	fin_tst
 22626              	.LVL1742:
4178:src/xeq.c     **** 
 22627              		.loc 1 4178 1 is_stmt 0 view .LVU5872
 22628 0040 0BB0     		add	sp, sp, #44
 22629              		.cfi_remember_state
 22630              		.cfi_def_cfa_offset 12
 22631              		@ sp needed
 22632 0042 30BD     		pop	{r4, r5, pc}
 22633              	.LVL1743:
 22634              	.L1627:
 22635              		.cfi_restore_state
4176:src/xeq.c     **** 	fin_tst(result);
 22636              		.loc 1 4176 10 is_stmt 1 view .LVU5873
ARM GAS  /tmp/ccQQPlfu.s 			page 594


4176:src/xeq.c     **** 	fin_tst(result);
 22637              		.loc 1 4176 20 is_stmt 0 view .LVU5874
 22638 0044 01A8     		add	r0, sp, #4
 22639 0046 FFF7FEFF 		bl	is_int
 22640              	.LVL1744:
4176:src/xeq.c     **** 	fin_tst(result);
 22641              		.loc 1 4176 31 view .LVU5875
 22642 004a 041B     		subs	r4, r0, r4
 22643              	.LVL1745:
4176:src/xeq.c     **** 	fin_tst(result);
 22644              		.loc 1 4176 31 view .LVU5876
 22645 004c B4FA84F4 		clz	r4, r4
 22646 0050 6409     		lsrs	r4, r4, #5
 22647              	.LVL1746:
4177:src/xeq.c     **** }
 22648              		.loc 1 4177 2 is_stmt 1 view .LVU5877
 22649 0052 2046     		mov	r0, r4
 22650 0054 FFF7FEFF 		bl	fin_tst
 22651              	.LVL1747:
4178:src/xeq.c     **** 
 22652              		.loc 1 4178 1 is_stmt 0 view .LVU5878
 22653 0058 0BB0     		add	sp, sp, #44
 22654              		.cfi_def_cfa_offset 12
 22655              		@ sp needed
 22656 005a 30BD     		pop	{r4, r5, pc}
 22657              	.LVL1748:
 22658              	.L1629:
4178:src/xeq.c     **** 
 22659              		.loc 1 4178 1 view .LVU5879
 22660              		.align	2
 22661              	.L1628:
 22662 005c 00000000 		.word	main_ram
 22663              		.cfi_endproc
 22664              	.LFE221:
 22666              		.section	.text.XisEvenOrOdd,"ax",%progbits
 22667              		.align	1
 22668              		.p2align 2,,3
 22669              		.global	XisEvenOrOdd
 22670              		.syntax unified
 22671              		.thumb
 22672              		.thumb_func
 22673              		.fpu fpv4-sp-d16
 22675              	XisEvenOrOdd:
 22676              	.LVL1749:
 22677              	.LFB222:
4182:src/xeq.c     **** 	decNumber x;
 22678              		.loc 1 4182 34 is_stmt 1 view -0
 22679              		.cfi_startproc
 22680              		@ args = 0, pretend = 0, frame = 40
 22681              		@ frame_needed = 0, uses_anonymous_args = 0
4183:src/xeq.c     **** 	int odd = (op == OP_XisODD);
 22682              		.loc 1 4183 2 view .LVU5881
4184:src/xeq.c     **** 
 22683              		.loc 1 4184 2 view .LVU5882
4186:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22684              		.loc 1 4186 6 is_stmt 0 view .LVU5883
 22685 0000 174B     		ldr	r3, .L1634
ARM GAS  /tmp/ccQQPlfu.s 			page 595


4182:src/xeq.c     **** 	decNumber x;
 22686              		.loc 1 4182 34 view .LVU5884
 22687 0002 30B5     		push	{r4, r5, lr}
 22688              		.cfi_def_cfa_offset 12
 22689              		.cfi_offset 4, -12
 22690              		.cfi_offset 5, -8
 22691              		.cfi_offset 14, -4
4186:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22692              		.loc 1 4186 6 view .LVU5885
 22693 0004 1B68     		ldr	r3, [r3]
 22694 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4186:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22695              		.loc 1 4186 5 view .LVU5886
 22696 000a DB07     		lsls	r3, r3, #31
4182:src/xeq.c     **** 	decNumber x;
 22697              		.loc 1 4182 34 view .LVU5887
 22698 000c 8BB0     		sub	sp, sp, #44
 22699              		.cfi_def_cfa_offset 56
4182:src/xeq.c     **** 	decNumber x;
 22700              		.loc 1 4182 34 view .LVU5888
 22701 000e 0446     		mov	r4, r0
 22702              	.LVL1750:
4186:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22703              		.loc 1 4186 2 is_stmt 1 view .LVU5889
4186:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22704              		.loc 1 4186 5 is_stmt 0 view .LVU5890
 22705 0010 15D5     		bpl	.L1631
4187:src/xeq.c     **** 	} else {
 22706              		.loc 1 4187 3 is_stmt 1 view .LVU5891
 22707              	.LBB3169:
 22708              	.LBI3169:
1436:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 22709              		.loc 1 1436 15 view .LVU5892
 22710              	.LBB3170:
1437:src/xeq.c     **** }
 22711              		.loc 1 1437 2 view .LVU5893
1437:src/xeq.c     **** }
 22712              		.loc 1 1437 9 is_stmt 0 view .LVU5894
 22713 0012 6420     		movs	r0, #100
 22714              	.LVL1751:
1437:src/xeq.c     **** }
 22715              		.loc 1 1437 9 view .LVU5895
 22716 0014 FFF7FEFF 		bl	get_reg_n_int
 22717              	.LVL1752:
 22718              	.LBE3170:
 22719              	.LBE3169:
4184:src/xeq.c     **** 
 22720              		.loc 1 4184 16 view .LVU5896
 22721 0018 A4F18A04 		sub	r4, #138
 22722              	.LVL1753:
4187:src/xeq.c     **** 	} else {
 22723              		.loc 1 4187 23 view .LVU5897
 22724 001c 0023     		movs	r3, #0
4184:src/xeq.c     **** 
 22725              		.loc 1 4184 16 view .LVU5898
 22726 001e 0025     		movs	r5, #0
 22727 0020 B4FA84F4 		clz	r4, r4
ARM GAS  /tmp/ccQQPlfu.s 			page 596


4187:src/xeq.c     **** 	} else {
 22728              		.loc 1 4187 23 view .LVU5899
 22729 0024 00F00102 		and	r2, r0, #1
4187:src/xeq.c     **** 	} else {
 22730              		.loc 1 4187 3 view .LVU5900
 22731 0028 AB42     		cmp	r3, r5
4184:src/xeq.c     **** 
 22732              		.loc 1 4184 16 view .LVU5901
 22733 002a 4FEA5414 		lsr	r4, r4, #5
4187:src/xeq.c     **** 	} else {
 22734              		.loc 1 4187 3 view .LVU5902
 22735 002e 06BF     		itte	eq
 22736 0030 A242     		cmpeq	r2, r4
 22737 0032 0120     		moveq	r0, #1
 22738 0034 1846     		movne	r0, r3
 22739 0036 FFF7FEFF 		bl	fin_tst
 22740              	.LVL1754:
4191:src/xeq.c     **** 
 22741              		.loc 1 4191 1 view .LVU5903
 22742 003a 0BB0     		add	sp, sp, #44
 22743              		.cfi_remember_state
 22744              		.cfi_def_cfa_offset 12
 22745              		@ sp needed
 22746 003c 30BD     		pop	{r4, r5, pc}
 22747              	.LVL1755:
 22748              	.L1631:
 22749              		.cfi_restore_state
4189:src/xeq.c     **** 	}
 22750              		.loc 1 4189 3 is_stmt 1 view .LVU5904
 22751              	.LBB3171:
 22752              	.LBI3171:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22753              		.loc 1 818 12 view .LVU5905
 22754              	.LBB3172:
 819:src/xeq.c     **** }
 22755              		.loc 1 819 2 view .LVU5906
 819:src/xeq.c     **** }
 22756              		.loc 1 819 9 is_stmt 0 view .LVU5907
 22757 003e 6421     		movs	r1, #100
 22758 0040 01A8     		add	r0, sp, #4
 22759              	.LVL1756:
 819:src/xeq.c     **** }
 22760              		.loc 1 819 9 view .LVU5908
 22761 0042 FFF7FEFF 		bl	getRegister
 22762              	.LVL1757:
 819:src/xeq.c     **** }
 22763              		.loc 1 819 9 view .LVU5909
 22764              	.LBE3172:
 22765              	.LBE3171:
4189:src/xeq.c     **** 	}
 22766              		.loc 1 4189 11 view .LVU5910
 22767 0046 FFF7FEFF 		bl	is_even
 22768              	.LVL1758:
4189:src/xeq.c     **** 	}
 22769              		.loc 1 4189 32 view .LVU5911
 22770 004a 8A3C     		subs	r4, r4, #138
 22771              	.LVL1759:
ARM GAS  /tmp/ccQQPlfu.s 			page 597


4189:src/xeq.c     **** 	}
 22772              		.loc 1 4189 32 view .LVU5912
 22773 004c 18BF     		it	ne
 22774 004e 0124     		movne	r4, #1
4189:src/xeq.c     **** 	}
 22775              		.loc 1 4189 3 view .LVU5913
 22776 0050 201A     		subs	r0, r4, r0
 22777 0052 B0FA80F0 		clz	r0, r0
 22778 0056 4009     		lsrs	r0, r0, #5
 22779 0058 FFF7FEFF 		bl	fin_tst
 22780              	.LVL1760:
4191:src/xeq.c     **** 
 22781              		.loc 1 4191 1 view .LVU5914
 22782 005c 0BB0     		add	sp, sp, #44
 22783              		.cfi_def_cfa_offset 12
 22784              		@ sp needed
 22785 005e 30BD     		pop	{r4, r5, pc}
 22786              	.L1635:
 22787              		.align	2
 22788              	.L1634:
 22789 0060 00000000 		.word	main_ram
 22790              		.cfi_endproc
 22791              	.LFE222:
 22793              		.section	.text.XisPrime,"ax",%progbits
 22794              		.align	1
 22795              		.p2align 2,,3
 22796              		.global	XisPrime
 22797              		.syntax unified
 22798              		.thumb
 22799              		.thumb_func
 22800              		.fpu fpv4-sp-d16
 22802              	XisPrime:
 22803              	.LVL1761:
 22804              	.LFB223:
4195:src/xeq.c     **** 	unsigned long long int i;
 22805              		.loc 1 4195 30 is_stmt 1 view -0
 22806              		.cfi_startproc
 22807              		@ args = 0, pretend = 0, frame = 40
 22808              		@ frame_needed = 0, uses_anonymous_args = 0
4196:src/xeq.c     **** 	int sgn;
 22809              		.loc 1 4196 2 view .LVU5916
4197:src/xeq.c     **** 
 22810              		.loc 1 4197 2 view .LVU5917
4199:src/xeq.c     **** 	if (!is_intmode()) {
 22811              		.loc 1 4199 2 view .LVU5918
4195:src/xeq.c     **** 	unsigned long long int i;
 22812              		.loc 1 4195 30 is_stmt 0 view .LVU5919
 22813 0000 70B5     		push	{r4, r5, r6, lr}
 22814              		.cfi_def_cfa_offset 16
 22815              		.cfi_offset 4, -16
 22816              		.cfi_offset 5, -12
 22817              		.cfi_offset 6, -8
 22818              		.cfi_offset 14, -4
 22819 0002 8AB0     		sub	sp, sp, #40
 22820              		.cfi_def_cfa_offset 56
 22821              	.LVL1762:
 22822              	.LBB3173:
ARM GAS  /tmp/ccQQPlfu.s 			page 598


 22823              	.LBI3173:
1440:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 22824              		.loc 1 1440 24 is_stmt 1 view .LVU5920
 22825              	.LBB3174:
1441:src/xeq.c     **** }
 22826              		.loc 1 1441 2 view .LVU5921
1441:src/xeq.c     **** }
 22827              		.loc 1 1441 9 is_stmt 0 view .LVU5922
 22828 0004 6946     		mov	r1, sp
 22829 0006 6420     		movs	r0, #100
 22830              	.LVL1763:
1441:src/xeq.c     **** }
 22831              		.loc 1 1441 9 view .LVU5923
 22832 0008 FFF7FEFF 		bl	get_reg_n_int_sgn
 22833              	.LVL1764:
 22834              	.LBE3174:
 22835              	.LBE3173:
4200:src/xeq.c     **** 		decNumber x;
 22836              		.loc 1 4200 6 view .LVU5924
 22837 000c 1B4B     		ldr	r3, .L1646
 22838 000e 1B68     		ldr	r3, [r3]
 22839 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4200:src/xeq.c     **** 		decNumber x;
 22840              		.loc 1 4200 5 view .LVU5925
 22841 0014 13F00104 		ands	r4, r3, #1
 22842              	.LBB3176:
 22843              	.LBB3175:
1441:src/xeq.c     **** }
 22844              		.loc 1 1441 9 view .LVU5926
 22845 0018 0646     		mov	r6, r0
 22846 001a 0D46     		mov	r5, r1
 22847              	.LVL1765:
1441:src/xeq.c     **** }
 22848              		.loc 1 1441 9 view .LVU5927
 22849              	.LBE3175:
 22850              	.LBE3176:
4200:src/xeq.c     **** 		decNumber x;
 22851              		.loc 1 4200 2 is_stmt 1 view .LVU5928
4200:src/xeq.c     **** 		decNumber x;
 22852              		.loc 1 4200 5 is_stmt 0 view .LVU5929
 22853 001c 11D0     		beq	.L1637
 22854 001e 009B     		ldr	r3, [sp]
 22855              	.LVL1766:
 22856              	.L1638:
4210:src/xeq.c     **** }
 22857              		.loc 1 4210 2 is_stmt 1 view .LVU5930
 22858 0020 23B1     		cbz	r3, .L1645
 22859              	.L1643:
4210:src/xeq.c     **** }
 22860              		.loc 1 4210 2 is_stmt 0 view .LVU5931
 22861 0022 0020     		movs	r0, #0
 22862 0024 FFF7FEFF 		bl	fin_tst
 22863              	.LVL1767:
4211:src/xeq.c     **** 
 22864              		.loc 1 4211 1 view .LVU5932
 22865 0028 0AB0     		add	sp, sp, #40
 22866              		.cfi_remember_state
ARM GAS  /tmp/ccQQPlfu.s 			page 599


 22867              		.cfi_def_cfa_offset 16
 22868              		@ sp needed
 22869 002a 70BD     		pop	{r4, r5, r6, pc}
 22870              	.L1645:
 22871              		.cfi_restore_state
4210:src/xeq.c     **** }
 22872              		.loc 1 4210 22 discriminator 1 view .LVU5933
 22873 002c 2946     		mov	r1, r5
 22874 002e 3046     		mov	r0, r6
 22875 0030 FFF7FEFF 		bl	isPrime
 22876              	.LVL1768:
4210:src/xeq.c     **** }
 22877              		.loc 1 4210 2 discriminator 1 view .LVU5934
 22878 0034 0038     		subs	r0, r0, #0
 22879 0036 18BF     		it	ne
 22880 0038 0120     		movne	r0, #1
 22881 003a FFF7FEFF 		bl	fin_tst
 22882              	.LVL1769:
4211:src/xeq.c     **** 
 22883              		.loc 1 4211 1 discriminator 1 view .LVU5935
 22884 003e 0AB0     		add	sp, sp, #40
 22885              		.cfi_remember_state
 22886              		.cfi_def_cfa_offset 16
 22887              		@ sp needed
 22888 0040 70BD     		pop	{r4, r5, r6, pc}
 22889              	.LVL1770:
 22890              	.L1637:
 22891              		.cfi_restore_state
 22892              	.LBB3177:
4201:src/xeq.c     **** 
 22893              		.loc 1 4201 3 is_stmt 1 view .LVU5936
4203:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
 22894              		.loc 1 4203 3 view .LVU5937
 22895              	.LBB3178:
 22896              	.LBI3178:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22897              		.loc 1 818 12 view .LVU5938
 22898              	.LBB3179:
 819:src/xeq.c     **** }
 22899              		.loc 1 819 2 view .LVU5939
 819:src/xeq.c     **** }
 22900              		.loc 1 819 9 is_stmt 0 view .LVU5940
 22901 0042 01A8     		add	r0, sp, #4
 22902              	.LVL1771:
 819:src/xeq.c     **** }
 22903              		.loc 1 819 9 view .LVU5941
 22904 0044 6421     		movs	r1, #100
 22905 0046 FFF7FEFF 		bl	getRegister
 22906              	.LVL1772:
 819:src/xeq.c     **** }
 22907              		.loc 1 819 9 view .LVU5942
 22908              	.LBE3179:
 22909              	.LBE3178:
4204:src/xeq.c     **** 			sgn = 1; // not prime
 22910              		.loc 1 4204 3 is_stmt 1 view .LVU5943
4204:src/xeq.c     **** 			sgn = 1; // not prime
 22911              		.loc 1 4204 6 is_stmt 0 view .LVU5944
ARM GAS  /tmp/ccQQPlfu.s 			page 600


 22912 004a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 22913 004e 13F0700F 		tst	r3, #112
 22914 0052 06D0     		beq	.L1639
4205:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22915              		.loc 1 4205 4 is_stmt 1 view .LVU5945
4205:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22916              		.loc 1 4205 8 is_stmt 0 view .LVU5946
 22917 0054 0123     		movs	r3, #1
 22918              	.LBE3177:
4210:src/xeq.c     **** }
 22919              		.loc 1 4210 2 view .LVU5947
 22920 0056 2046     		mov	r0, r4
 22921              	.LBB3180:
4205:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22922              		.loc 1 4205 8 view .LVU5948
 22923 0058 0093     		str	r3, [sp]
4205:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22924              		.loc 1 4205 8 view .LVU5949
 22925              	.LBE3180:
4210:src/xeq.c     **** }
 22926              		.loc 1 4210 2 is_stmt 1 view .LVU5950
 22927 005a FFF7FEFF 		bl	fin_tst
 22928              	.LVL1773:
4211:src/xeq.c     **** 
 22929              		.loc 1 4211 1 is_stmt 0 view .LVU5951
 22930 005e 0AB0     		add	sp, sp, #40
 22931              		.cfi_remember_state
 22932              		.cfi_def_cfa_offset 16
 22933              		@ sp needed
 22934 0060 70BD     		pop	{r4, r5, r6, pc}
 22935              	.L1639:
 22936              		.cfi_restore_state
 22937              	.LBB3181:
4206:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22938              		.loc 1 4206 8 is_stmt 1 view .LVU5952
4206:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22939              		.loc 1 4206 12 is_stmt 0 view .LVU5953
 22940 0062 0749     		ldr	r1, .L1646+4
 22941 0064 01A8     		add	r0, sp, #4
 22942 0066 FFF7FEFF 		bl	dn_lt
 22943              	.LVL1774:
 22944 006a 009B     		ldr	r3, [sp]
4206:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22945              		.loc 1 4206 11 view .LVU5954
 22946 006c 0028     		cmp	r0, #0
 22947 006e D7D1     		bne	.L1638
4208:src/xeq.c     **** 	}
 22948              		.loc 1 4208 4 is_stmt 1 view .LVU5955
 22949              	.LVL1775:
4208:src/xeq.c     **** 	}
 22950              		.loc 1 4208 6 is_stmt 0 view .LVU5956
 22951 0070 4FF0FF36 		mov	r6, #-1
 22952 0074 3546     		mov	r5, r6
4208:src/xeq.c     **** 	}
 22953              		.loc 1 4208 6 view .LVU5957
 22954              	.LBE3181:
4210:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 601


 22955              		.loc 1 4210 2 is_stmt 1 view .LVU5958
 22956 0076 002B     		cmp	r3, #0
 22957 0078 D3D1     		bne	.L1643
 22958 007a D7E7     		b	.L1645
 22959              	.L1647:
 22960              		.align	2
 22961              	.L1646:
 22962 007c 00000000 		.word	main_ram
 22963 0080 00000000 		.word	const_2pow64
 22964              		.cfi_endproc
 22965              	.LFE223:
 22967              		.section	.text.isInfinite,"ax",%progbits
 22968              		.align	1
 22969              		.p2align 2,,3
 22970              		.global	isInfinite
 22971              		.syntax unified
 22972              		.thumb
 22973              		.thumb_func
 22974              		.fpu fpv4-sp-d16
 22976              	isInfinite:
 22977              	.LVL1776:
 22978              	.LFB224:
4215:src/xeq.c     **** 	decNumber x;
 22979              		.loc 1 4215 32 view -0
 22980              		.cfi_startproc
 22981              		@ args = 0, pretend = 0, frame = 40
 22982              		@ frame_needed = 0, uses_anonymous_args = 0
4216:src/xeq.c     **** 
 22983              		.loc 1 4216 2 view .LVU5960
4218:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
 22984              		.loc 1 4218 2 view .LVU5961
4215:src/xeq.c     **** 	decNumber x;
 22985              		.loc 1 4215 32 is_stmt 0 view .LVU5962
 22986 0000 00B5     		push	{lr}
 22987              		.cfi_def_cfa_offset 4
 22988              		.cfi_offset 14, -4
 22989 0002 8BB0     		sub	sp, sp, #44
 22990              		.cfi_def_cfa_offset 48
 22991              	.LVL1777:
 22992              	.LBB3182:
 22993              	.LBI3182:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22994              		.loc 1 818 12 is_stmt 1 view .LVU5963
 22995              	.LBB3183:
 819:src/xeq.c     **** }
 22996              		.loc 1 819 2 view .LVU5964
 819:src/xeq.c     **** }
 22997              		.loc 1 819 9 is_stmt 0 view .LVU5965
 22998 0004 6421     		movs	r1, #100
 22999 0006 01A8     		add	r0, sp, #4
 23000              	.LVL1778:
 819:src/xeq.c     **** }
 23001              		.loc 1 819 9 view .LVU5966
 23002 0008 FFF7FEFF 		bl	getRegister
 23003              	.LVL1779:
 819:src/xeq.c     **** }
 23004              		.loc 1 819 9 view .LVU5967
ARM GAS  /tmp/ccQQPlfu.s 			page 602


 23005              	.LBE3183:
 23006              	.LBE3182:
4219:src/xeq.c     **** }
 23007              		.loc 1 4219 2 is_stmt 1 view .LVU5968
4219:src/xeq.c     **** }
 23008              		.loc 1 4219 10 is_stmt 0 view .LVU5969
 23009 000c 074B     		ldr	r3, .L1652
 23010 000e 1B68     		ldr	r3, [r3]
 23011 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4219:src/xeq.c     **** }
 23012              		.loc 1 4219 2 view .LVU5970
 23013 0014 DB07     		lsls	r3, r3, #31
 23014 0016 56BF     		itet	pl
 23015 0018 9DF80C00 		ldrbpl	r0, [sp, #12]	@ zero_extendqisi2
 23016 001c 0020     		movmi	r0, #0
 23017 001e C0F38010 		ubfxpl	r0, r0, #6, #1
 23018 0022 FFF7FEFF 		bl	fin_tst
 23019              	.LVL1780:
4220:src/xeq.c     **** 
 23020              		.loc 1 4220 1 view .LVU5971
 23021 0026 0BB0     		add	sp, sp, #44
 23022              		.cfi_def_cfa_offset 4
 23023              		@ sp needed
 23024 0028 5DF804FB 		ldr	pc, [sp], #4
 23025              	.L1653:
 23026              		.align	2
 23027              	.L1652:
 23028 002c 00000000 		.word	main_ram
 23029              		.cfi_endproc
 23030              	.LFE224:
 23032              		.section	.text.isNan,"ax",%progbits
 23033              		.align	1
 23034              		.p2align 2,,3
 23035              		.global	isNan
 23036              		.syntax unified
 23037              		.thumb
 23038              		.thumb_func
 23039              		.fpu fpv4-sp-d16
 23041              	isNan:
 23042              	.LVL1781:
 23043              	.LFB225:
4226:src/xeq.c     **** 	decNumber x;
 23044              		.loc 1 4226 27 is_stmt 1 view -0
 23045              		.cfi_startproc
 23046              		@ args = 0, pretend = 0, frame = 40
 23047              		@ frame_needed = 0, uses_anonymous_args = 0
4227:src/xeq.c     **** 
 23048              		.loc 1 4227 2 view .LVU5973
4229:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
 23049              		.loc 1 4229 2 view .LVU5974
4226:src/xeq.c     **** 	decNumber x;
 23050              		.loc 1 4226 27 is_stmt 0 view .LVU5975
 23051 0000 00B5     		push	{lr}
 23052              		.cfi_def_cfa_offset 4
 23053              		.cfi_offset 14, -4
 23054 0002 8BB0     		sub	sp, sp, #44
 23055              		.cfi_def_cfa_offset 48
ARM GAS  /tmp/ccQQPlfu.s 			page 603


 23056              	.LVL1782:
 23057              	.LBB3184:
 23058              	.LBI3184:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23059              		.loc 1 818 12 is_stmt 1 view .LVU5976
 23060              	.LBB3185:
 819:src/xeq.c     **** }
 23061              		.loc 1 819 2 view .LVU5977
 819:src/xeq.c     **** }
 23062              		.loc 1 819 9 is_stmt 0 view .LVU5978
 23063 0004 6421     		movs	r1, #100
 23064 0006 01A8     		add	r0, sp, #4
 23065              	.LVL1783:
 819:src/xeq.c     **** }
 23066              		.loc 1 819 9 view .LVU5979
 23067 0008 FFF7FEFF 		bl	getRegister
 23068              	.LVL1784:
 819:src/xeq.c     **** }
 23069              		.loc 1 819 9 view .LVU5980
 23070              	.LBE3185:
 23071              	.LBE3184:
4230:src/xeq.c     **** }
 23072              		.loc 1 4230 2 is_stmt 1 view .LVU5981
4230:src/xeq.c     **** }
 23073              		.loc 1 4230 10 is_stmt 0 view .LVU5982
 23074 000c 0B4B     		ldr	r3, .L1658
 23075 000e 1B68     		ldr	r3, [r3]
 23076 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4230:src/xeq.c     **** }
 23077              		.loc 1 4230 2 view .LVU5983
 23078 0014 DB07     		lsls	r3, r3, #31
 23079 0016 0BD4     		bmi	.L1656
4230:src/xeq.c     **** }
 23080              		.loc 1 4230 2 discriminator 1 view .LVU5984
 23081 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 23082 001c 13F0300F 		tst	r3, #48
 23083 0020 14BF     		ite	ne
 23084 0022 0120     		movne	r0, #1
 23085 0024 0020     		moveq	r0, #0
 23086 0026 FFF7FEFF 		bl	fin_tst
 23087              	.LVL1785:
4231:src/xeq.c     **** 
 23088              		.loc 1 4231 1 discriminator 1 view .LVU5985
 23089 002a 0BB0     		add	sp, sp, #44
 23090              		.cfi_remember_state
 23091              		.cfi_def_cfa_offset 4
 23092              		@ sp needed
 23093 002c 5DF804FB 		ldr	pc, [sp], #4
 23094              	.L1656:
 23095              		.cfi_restore_state
4230:src/xeq.c     **** }
 23096              		.loc 1 4230 2 view .LVU5986
 23097 0030 0020     		movs	r0, #0
 23098 0032 FFF7FEFF 		bl	fin_tst
 23099              	.LVL1786:
4231:src/xeq.c     **** 
 23100              		.loc 1 4231 1 view .LVU5987
ARM GAS  /tmp/ccQQPlfu.s 			page 604


 23101 0036 0BB0     		add	sp, sp, #44
 23102              		.cfi_def_cfa_offset 4
 23103              		@ sp needed
 23104 0038 5DF804FB 		ldr	pc, [sp], #4
 23105              	.L1659:
 23106              		.align	2
 23107              	.L1658:
 23108 003c 00000000 		.word	main_ram
 23109              		.cfi_endproc
 23110              	.LFE225:
 23112              		.section	.text.isSpecial,"ax",%progbits
 23113              		.align	1
 23114              		.p2align 2,,3
 23115              		.global	isSpecial
 23116              		.syntax unified
 23117              		.thumb
 23118              		.thumb_func
 23119              		.fpu fpv4-sp-d16
 23121              	isSpecial:
 23122              	.LVL1787:
 23123              	.LFB226:
4233:src/xeq.c     **** 	decNumber x;
 23124              		.loc 1 4233 31 is_stmt 1 view -0
 23125              		.cfi_startproc
 23126              		@ args = 0, pretend = 0, frame = 40
 23127              		@ frame_needed = 0, uses_anonymous_args = 0
4234:src/xeq.c     **** 
 23128              		.loc 1 4234 2 view .LVU5989
4236:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
 23129              		.loc 1 4236 2 view .LVU5990
4233:src/xeq.c     **** 	decNumber x;
 23130              		.loc 1 4233 31 is_stmt 0 view .LVU5991
 23131 0000 00B5     		push	{lr}
 23132              		.cfi_def_cfa_offset 4
 23133              		.cfi_offset 14, -4
 23134 0002 8BB0     		sub	sp, sp, #44
 23135              		.cfi_def_cfa_offset 48
 23136              	.LVL1788:
 23137              	.LBB3186:
 23138              	.LBI3186:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23139              		.loc 1 818 12 is_stmt 1 view .LVU5992
 23140              	.LBB3187:
 819:src/xeq.c     **** }
 23141              		.loc 1 819 2 view .LVU5993
 819:src/xeq.c     **** }
 23142              		.loc 1 819 9 is_stmt 0 view .LVU5994
 23143 0004 6421     		movs	r1, #100
 23144 0006 01A8     		add	r0, sp, #4
 23145              	.LVL1789:
 819:src/xeq.c     **** }
 23146              		.loc 1 819 9 view .LVU5995
 23147 0008 FFF7FEFF 		bl	getRegister
 23148              	.LVL1790:
 819:src/xeq.c     **** }
 23149              		.loc 1 819 9 view .LVU5996
 23150              	.LBE3187:
ARM GAS  /tmp/ccQQPlfu.s 			page 605


 23151              	.LBE3186:
4237:src/xeq.c     **** }
 23152              		.loc 1 4237 2 is_stmt 1 view .LVU5997
4237:src/xeq.c     **** }
 23153              		.loc 1 4237 10 is_stmt 0 view .LVU5998
 23154 000c 0B4B     		ldr	r3, .L1664
 23155 000e 1B68     		ldr	r3, [r3]
 23156 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4237:src/xeq.c     **** }
 23157              		.loc 1 4237 2 view .LVU5999
 23158 0014 DB07     		lsls	r3, r3, #31
 23159 0016 0BD4     		bmi	.L1662
4237:src/xeq.c     **** }
 23160              		.loc 1 4237 2 discriminator 1 view .LVU6000
 23161 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 23162 001c 13F0700F 		tst	r3, #112
 23163 0020 14BF     		ite	ne
 23164 0022 0120     		movne	r0, #1
 23165 0024 0020     		moveq	r0, #0
 23166 0026 FFF7FEFF 		bl	fin_tst
 23167              	.LVL1791:
4238:src/xeq.c     **** 
 23168              		.loc 1 4238 1 discriminator 1 view .LVU6001
 23169 002a 0BB0     		add	sp, sp, #44
 23170              		.cfi_remember_state
 23171              		.cfi_def_cfa_offset 4
 23172              		@ sp needed
 23173 002c 5DF804FB 		ldr	pc, [sp], #4
 23174              	.L1662:
 23175              		.cfi_restore_state
4237:src/xeq.c     **** }
 23176              		.loc 1 4237 2 view .LVU6002
 23177 0030 0020     		movs	r0, #0
 23178 0032 FFF7FEFF 		bl	fin_tst
 23179              	.LVL1792:
4238:src/xeq.c     **** 
 23180              		.loc 1 4238 1 view .LVU6003
 23181 0036 0BB0     		add	sp, sp, #44
 23182              		.cfi_def_cfa_offset 4
 23183              		@ sp needed
 23184 0038 5DF804FB 		ldr	pc, [sp], #4
 23185              	.L1665:
 23186              		.align	2
 23187              	.L1664:
 23188 003c 00000000 		.word	main_ram
 23189              		.cfi_endproc
 23190              	.LFE226:
 23192              		.section	.text.op_entryp,"ax",%progbits
 23193              		.align	1
 23194              		.p2align 2,,3
 23195              		.global	op_entryp
 23196              		.syntax unified
 23197              		.thumb
 23198              		.thumb_func
 23199              		.fpu fpv4-sp-d16
 23201              	op_entryp:
 23202              	.LVL1793:
ARM GAS  /tmp/ccQQPlfu.s 			page 606


 23203              	.LFB227:
4240:src/xeq.c     **** 	fin_tst(State.entryp);
 23204              		.loc 1 4240 31 is_stmt 1 view -0
 23205              		.cfi_startproc
 23206              		@ args = 0, pretend = 0, frame = 0
 23207              		@ frame_needed = 0, uses_anonymous_args = 0
 23208              		@ link register save eliminated.
4241:src/xeq.c     **** }
 23209              		.loc 1 4241 2 view .LVU6005
4241:src/xeq.c     **** }
 23210              		.loc 1 4241 15 is_stmt 0 view .LVU6006
 23211 0000 034B     		ldr	r3, .L1667
 23212 0002 1B68     		ldr	r3, [r3]
 23213 0004 93F8DD07 		ldrb	r0, [r3, #2013]	@ zero_extendqisi2
 23214              	.LVL1794:
4241:src/xeq.c     **** }
 23215              		.loc 1 4241 2 view .LVU6007
 23216 0008 C0F30010 		ubfx	r0, r0, #4, #1
 23217 000c FFF7FEBF 		b	fin_tst
 23218              	.LVL1795:
 23219              	.L1668:
 23220              		.align	2
 23221              	.L1667:
 23222 0010 00000000 		.word	main_ram
 23223              		.cfi_endproc
 23224              	.LFE227:
 23226              		.section	.text.reg_decode,"ax",%progbits
 23227              		.align	1
 23228              		.p2align 2,,3
 23229              		.global	reg_decode
 23230              		.syntax unified
 23231              		.thumb
 23232              		.thumb_func
 23233              		.fpu fpv4-sp-d16
 23235              	reg_decode:
 23236              	.LVL1796:
 23237              	.LFB228:
4245:src/xeq.c     **** 	decNumber x, y;
 23238              		.loc 1 4245 51 is_stmt 1 view -0
 23239              		.cfi_startproc
 23240              		@ args = 0, pretend = 0, frame = 80
 23241              		@ frame_needed = 0, uses_anonymous_args = 0
4246:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
 23242              		.loc 1 4246 2 view .LVU6009
4247:src/xeq.c     **** 
 23243              		.loc 1 4247 2 view .LVU6010
4249:src/xeq.c     **** 		bad_mode_error();
 23244              		.loc 1 4249 2 view .LVU6011
4245:src/xeq.c     **** 	decNumber x, y;
 23245              		.loc 1 4245 51 is_stmt 0 view .LVU6012
 23246 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 23247              		.cfi_def_cfa_offset 36
 23248              		.cfi_offset 4, -36
 23249              		.cfi_offset 5, -32
 23250              		.cfi_offset 6, -28
 23251              		.cfi_offset 7, -24
 23252              		.cfi_offset 8, -20
ARM GAS  /tmp/ccQQPlfu.s 			page 607


 23253              		.cfi_offset 9, -16
 23254              		.cfi_offset 10, -12
 23255              		.cfi_offset 11, -8
 23256              		.cfi_offset 14, -4
4249:src/xeq.c     **** 		bad_mode_error();
 23257              		.loc 1 4249 6 view .LVU6013
 23258 0004 DFF82CA2 		ldr	r10, .L1721+28
 23259 0008 DAF80040 		ldr	r4, [r10]
 23260 000c 94F8E847 		ldrb	r4, [r4, #2024]	@ zero_extendqisi2
4245:src/xeq.c     **** 	decNumber x, y;
 23261              		.loc 1 4245 51 view .LVU6014
 23262 0010 1F46     		mov	r7, r3
4249:src/xeq.c     **** 		bad_mode_error();
 23263              		.loc 1 4249 5 view .LVU6015
 23264 0012 14F00103 		ands	r3, r4, #1
 23265              	.LVL1797:
4245:src/xeq.c     **** 	decNumber x, y;
 23266              		.loc 1 4245 51 view .LVU6016
 23267 0016 95B0     		sub	sp, sp, #84
 23268              		.cfi_def_cfa_offset 120
4249:src/xeq.c     **** 		bad_mode_error();
 23269              		.loc 1 4249 5 view .LVU6017
 23270 0018 0CD0     		beq	.L1670
4250:src/xeq.c     **** 		return 1;
 23271              		.loc 1 4250 3 is_stmt 1 view .LVU6018
 23272              	.LBB3230:
 23273              	.LBI3230:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 23274              		.loc 1 569 6 view .LVU6019
 23275              	.LBE3230:
 570:src/xeq.c     **** }
 23276              		.loc 1 570 2 view .LVU6020
 23277              	.LVL1798:
 23278              	.LBB3241:
 23279              	.LBB3231:
 23280              	.LBI3231:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23281              		.loc 1 540 5 view .LVU6021
 23282              	.LBB3232:
 541:src/xeq.c     **** 		Error = e;
 23283              		.loc 1 541 2 view .LVU6022
 541:src/xeq.c     **** 		Error = e;
 23284              		.loc 1 541 12 is_stmt 0 view .LVU6023
 23285 001a 7F4B     		ldr	r3, .L1721
 541:src/xeq.c     **** 		Error = e;
 23286              		.loc 1 541 5 view .LVU6024
 23287 001c 1A68     		ldr	r2, [r3]
 23288              	.LVL1799:
 541:src/xeq.c     **** 		Error = e;
 23289              		.loc 1 541 5 view .LVU6025
 23290 001e 1AB1     		cbz	r2, .L1715
 23291              	.LVL1800:
 23292              	.L1698:
 541:src/xeq.c     **** 		Error = e;
 23293              		.loc 1 541 5 view .LVU6026
 23294              	.LBE3232:
 23295              	.LBE3231:
ARM GAS  /tmp/ccQQPlfu.s 			page 608


 23296              	.LBE3241:
4251:src/xeq.c     **** 	}
 23297              		.loc 1 4251 10 view .LVU6027
 23298 0020 0120     		movs	r0, #1
4323:src/xeq.c     **** 
 23299              		.loc 1 4323 1 view .LVU6028
 23300 0022 15B0     		add	sp, sp, #84
 23301              		.cfi_remember_state
 23302              		.cfi_def_cfa_offset 36
 23303              		@ sp needed
 23304 0024 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23305              	.LVL1801:
 23306              	.L1715:
 23307              		.cfi_restore_state
 23308              	.LBB3242:
 23309              	.LBB3239:
 23310              	.LBB3237:
 23311              	.LBB3233:
 23312              	.LBI3233:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23313              		.loc 1 540 5 is_stmt 1 view .LVU6029
 23314              	.LBB3234:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 23315              		.loc 1 542 3 view .LVU6030
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 23316              		.loc 1 542 9 is_stmt 0 view .LVU6031
 23317 0028 0D22     		movs	r2, #13
 23318              	.LBE3234:
 23319              	.LBE3233:
 23320              	.LBE3237:
 23321              	.LBE3239:
 23322              	.LBE3242:
4251:src/xeq.c     **** 	}
 23323              		.loc 1 4251 10 view .LVU6032
 23324 002a 0120     		movs	r0, #1
 23325              	.LVL1802:
 23326              	.LBB3243:
 23327              	.LBB3240:
 23328              	.LBB3238:
 23329              	.LBB3236:
 23330              	.LBB3235:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 23331              		.loc 1 542 9 view .LVU6033
 23332 002c 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 23333              		.loc 1 543 3 is_stmt 1 view .LVU6034
 23334              	.LBE3235:
 23335              	.LBE3236:
 23336              	.LBE3238:
 23337              	.LBE3240:
 23338              	.LBE3243:
4323:src/xeq.c     **** 
 23339              		.loc 1 4323 1 is_stmt 0 view .LVU6035
 23340 002e 15B0     		add	sp, sp, #84
 23341              		.cfi_remember_state
 23342              		.cfi_def_cfa_offset 36
 23343              		@ sp needed
ARM GAS  /tmp/ccQQPlfu.s 			page 609


 23344 0030 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23345              	.LVL1803:
 23346              	.L1670:
 23347              		.cfi_restore_state
4323:src/xeq.c     **** 
 23348              		.loc 1 4323 1 view .LVU6036
 23349 0034 8346     		mov	fp, r0
 23350              	.LVL1804:
4323:src/xeq.c     **** 
 23351              		.loc 1 4323 1 view .LVU6037
 23352 0036 8946     		mov	r9, r1
 23353              	.LVL1805:
 23354              	.LBB3244:
 23355              	.LBB3245:
 23356              	.LBB3246:
 23357              	.LBB3247:
 819:src/xeq.c     **** }
 23358              		.loc 1 819 9 view .LVU6038
 23359 0038 02A8     		add	r0, sp, #8
 23360              	.LVL1806:
 819:src/xeq.c     **** }
 23361              		.loc 1 819 9 view .LVU6039
 23362 003a 6421     		movs	r1, #100
 23363              	.LVL1807:
 819:src/xeq.c     **** }
 23364              		.loc 1 819 9 view .LVU6040
 23365 003c 0193     		str	r3, [sp, #4]
 23366 003e 9046     		mov	r8, r2
 23367              	.LVL1808:
 819:src/xeq.c     **** }
 23368              		.loc 1 819 9 view .LVU6041
 23369              	.LBE3247:
 23370              	.LBE3246:
 23371              	.LBE3245:
 23372              	.LBI3244:
4245:src/xeq.c     **** 	decNumber x, y;
 23373              		.loc 1 4245 5 is_stmt 1 view .LVU6042
 23374              	.LBB3327:
4253:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
 23375              		.loc 1 4253 2 view .LVU6043
 23376              	.LBB3249:
 23377              	.LBI3246:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23378              		.loc 1 818 12 view .LVU6044
 23379              	.LBB3248:
 819:src/xeq.c     **** }
 23380              		.loc 1 819 2 view .LVU6045
 819:src/xeq.c     **** }
 23381              		.loc 1 819 9 is_stmt 0 view .LVU6046
 23382 0040 FFF7FEFF 		bl	getRegister
 23383              	.LVL1809:
 819:src/xeq.c     **** }
 23384              		.loc 1 819 9 view .LVU6047
 23385              	.LBE3248:
 23386              	.LBE3249:
4254:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
 23387              		.loc 1 4254 2 is_stmt 1 view .LVU6048
ARM GAS  /tmp/ccQQPlfu.s 			page 610


 23388 0044 0522     		movs	r2, #5
 23389 0046 02A9     		add	r1, sp, #8
 23390 0048 0BA8     		add	r0, sp, #44
 23391 004a FFF7FEFF 		bl	dn_mulpow10
 23392              	.LVL1810:
4255:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
 23393              		.loc 1 4255 2 view .LVU6049
 23394 004e 0BA9     		add	r1, sp, #44
 23395 0050 02A8     		add	r0, sp, #8
 23396 0052 FFF7FEFF 		bl	decNumberTrunc
 23397              	.LVL1811:
4256:src/xeq.c     **** 
 23398              		.loc 1 4256 2 view .LVU6050
4256:src/xeq.c     **** 
 23399              		.loc 1 4256 9 is_stmt 0 view .LVU6051
 23400 0056 02A8     		add	r0, sp, #8
 23401 0058 FFF7FEFF 		bl	dn_to_int
 23402              	.LVL1812:
4258:src/xeq.c     **** 		if (!flash)
 23403              		.loc 1 4258 2 is_stmt 1 view .LVU6052
4258:src/xeq.c     **** 		if (!flash)
 23404              		.loc 1 4258 5 is_stmt 0 view .LVU6053
 23405 005c 041E     		subs	r4, r0, #0
 23406 005e 35DB     		blt	.L1672
 23407              	.LVL1813:
4266:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23408              		.loc 1 4266 2 is_stmt 1 view .LVU6054
4266:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23409              		.loc 1 4266 8 is_stmt 0 view .LVU6055
 23410 0060 6E4A     		ldr	r2, .L1721+4
4268:src/xeq.c     **** 	rsrc /= 100;			// sss
 23411              		.loc 1 4268 6 view .LVU6056
 23412 0062 6F4E     		ldr	r6, .L1721+8
4272:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23413              		.loc 1 4272 9 view .LVU6057
 23414 0064 6F48     		ldr	r0, .L1721+12
 23415              	.LVL1814:
4266:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23416              		.loc 1 4266 8 view .LVU6058
 23417 0066 82FB0432 		smull	r3, r2, r2, r4
 23418 006a E517     		asrs	r5, r4, #31
4267:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23419              		.loc 1 4267 7 view .LVU6059
 23420 006c C5EBA211 		rsb	r1, r5, r2, asr #6
4268:src/xeq.c     **** 	rsrc /= 100;			// sss
 23421              		.loc 1 4268 6 view .LVU6060
 23422 0070 A6FB0136 		umull	r3, r6, r6, r1
4266:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23423              		.loc 1 4266 8 view .LVU6061
 23424 0074 4FF47A77 		mov	r7, #1000
 23425              	.LVL1815:
4268:src/xeq.c     **** 	rsrc /= 100;			// sss
 23426              		.loc 1 4268 6 view .LVU6062
 23427 0078 7209     		lsrs	r2, r6, #5
4266:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23428              		.loc 1 4266 8 view .LVU6063
 23429 007a 07FB1145 		mls	r5, r7, r1, r4
ARM GAS  /tmp/ccQQPlfu.s 			page 611


 23430              	.LVL1816:
4267:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23431              		.loc 1 4267 2 is_stmt 1 view .LVU6064
4268:src/xeq.c     **** 	rsrc /= 100;			// sss
 23432              		.loc 1 4268 2 view .LVU6065
4272:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23433              		.loc 1 4272 9 is_stmt 0 view .LVU6066
 23434 007e 8442     		cmp	r4, r0
4268:src/xeq.c     **** 	rsrc /= 100;			// sss
 23435              		.loc 1 4268 6 view .LVU6067
 23436 0080 4FF06407 		mov	r7, #100
4269:src/xeq.c     **** 
 23437              		.loc 1 4269 7 view .LVU6068
 23438 0084 1646     		mov	r6, r2
4268:src/xeq.c     **** 	rsrc /= 100;			// sss
 23439              		.loc 1 4268 6 view .LVU6069
 23440 0086 07FB1212 		mls	r2, r7, r2, r1
 23441              	.LVL1817:
4269:src/xeq.c     **** 
 23442              		.loc 1 4269 2 is_stmt 1 view .LVU6070
4271:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23443              		.loc 1 4271 2 view .LVU6071
4272:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23444              		.loc 1 4272 9 is_stmt 0 view .LVU6072
 23445 008a 59DA     		bge	.L1673
 23446 008c 6649     		ldr	r1, .L1721+16
 23447 008e 019B     		ldr	r3, [sp, #4]
 23448 0090 8C42     		cmp	r4, r1
 23449 0092 7ADA     		bge	.L1700
 23450              	.LBB3250:
 23451              	.LBI3250:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 23452              		.loc 1 253 14 is_stmt 1 view .LVU6073
 23453              	.LBE3250:
 23454              	.LBE3327:
 23455              	.LBE3244:
 254:src/xeq.c     **** }
 23456              		.loc 1 254 2 view .LVU6074
 23457              	.LVL1818:
 23458              	.LBB3334:
 23459              	.LBB3328:
 23460              	.LBB3256:
 23461              	.LBB3251:
 23462              	.LBI3251:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 23463              		.loc 1 241 14 view .LVU6075
 23464              	.LBB3252:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23465              		.loc 1 242 2 view .LVU6076
 23466              	.LBB3253:
 23467              	.LBI3253:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23468              		.loc 1 1112 5 view .LVU6077
 23469              	.LBB3254:
1113:src/xeq.c     **** }
 23470              		.loc 1 1113 2 view .LVU6078
1113:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 612


 23471              		.loc 1 1113 12 is_stmt 0 view .LVU6079
 23472 0094 DAF80010 		ldr	r1, [r10]
1113:src/xeq.c     **** }
 23473              		.loc 1 1113 24 view .LVU6080
 23474 0098 B1F8E807 		ldrh	r0, [r1, #2024]
 23475 009c 44F20103 		movw	r3, #16385
 23476              	.LBE3254:
 23477              	.LBE3253:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23478              		.loc 1 242 5 view .LVU6081
 23479 00a0 0340     		ands	r3, r3, r0
 23480 00a2 B3F5804F 		cmp	r3, #16384
 23481              	.LBB3255:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23482              		.loc 1 243 24 view .LVU6082
 23483 00a6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23484              		.loc 1 243 3 is_stmt 1 view .LVU6083
 244:src/xeq.c     **** 	}
 23485              		.loc 1 244 3 view .LVU6084
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23486              		.loc 1 243 13 is_stmt 0 view .LVU6085
 23487 00aa 04BF     		itt	eq
 23488 00ac 0C3B     		subeq	r3, r3, #12
 244:src/xeq.c     **** 	}
 23489              		.loc 1 244 67 view .LVU6086
 23490 00ae 5B10     		asreq	r3, r3, #1
 23491              	.LVL1819:
 23492              	.L1679:
 244:src/xeq.c     **** 	}
 23493              		.loc 1 244 67 view .LVU6087
 23494              	.LBE3255:
 23495              	.LBE3252:
 23496              	.LBE3251:
 23497              	.LBE3256:
4275:src/xeq.c     **** 		goto range_error;
 23498              		.loc 1 4275 5 view .LVU6088
 23499 00b0 B342     		cmp	r3, r6
 23500 00b2 4FF00007 		mov	r7, #0
 23501              	.LVL1820:
4275:src/xeq.c     **** 		goto range_error;
 23502              		.loc 1 4275 2 is_stmt 1 view .LVU6089
4275:src/xeq.c     **** 		goto range_error;
 23503              		.loc 1 4275 5 is_stmt 0 view .LVU6090
 23504 00b6 22DC     		bgt	.L1716
 23505              	.LVL1821:
 23506              	.L1675:
 23507              	.LDL1:
4321:src/xeq.c     **** 	return 1;
 23508              		.loc 1 4321 2 is_stmt 1 view .LVU6091
 23509              	.LBB3257:
 23510              	.LBI3257:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23511              		.loc 1 540 5 view .LVU6092
 23512              	.LBB3258:
 541:src/xeq.c     **** 		Error = e;
 23513              		.loc 1 541 2 view .LVU6093
ARM GAS  /tmp/ccQQPlfu.s 			page 613


 541:src/xeq.c     **** 		Error = e;
 23514              		.loc 1 541 12 is_stmt 0 view .LVU6094
 23515 00b8 574B     		ldr	r3, .L1721
 541:src/xeq.c     **** 		Error = e;
 23516              		.loc 1 541 5 view .LVU6095
 23517 00ba 1A68     		ldr	r2, [r3]
 23518 00bc 002A     		cmp	r2, #0
 23519 00be AFD1     		bne	.L1698
 23520              	.LVL1822:
 23521              	.LBB3259:
 23522              	.LBI3259:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23523              		.loc 1 540 5 is_stmt 1 view .LVU6096
 23524              	.LBB3260:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 23525              		.loc 1 542 3 view .LVU6097
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 23526              		.loc 1 542 9 is_stmt 0 view .LVU6098
 23527 00c0 0822     		movs	r2, #8
 23528              	.LBE3260:
 23529              	.LBE3259:
 23530              	.LBE3258:
 23531              	.LBE3257:
4322:src/xeq.c     **** }
 23532              		.loc 1 4322 9 view .LVU6099
 23533 00c2 0120     		movs	r0, #1
 23534              	.LBB3264:
 23535              	.LBB3263:
 23536              	.LBB3262:
 23537              	.LBB3261:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 23538              		.loc 1 542 9 view .LVU6100
 23539 00c4 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 23540              		.loc 1 543 3 is_stmt 1 view .LVU6101
 23541              	.LBE3261:
 23542              	.LBE3262:
 23543              	.LBE3263:
 23544              	.LBE3264:
 23545              	.LBE3328:
 23546              	.LBE3334:
4323:src/xeq.c     **** 
 23547              		.loc 1 4323 1 is_stmt 0 view .LVU6102
 23548 00c6 15B0     		add	sp, sp, #84
 23549              		.cfi_remember_state
 23550              		.cfi_def_cfa_offset 36
 23551              		@ sp needed
 23552 00c8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23553              	.LVL1823:
 23554              	.L1672:
 23555              		.cfi_restore_state
 23556              	.LBB3335:
 23557              	.LBB3329:
4259:src/xeq.c     **** 			goto range_error;
 23558              		.loc 1 4259 3 is_stmt 1 view .LVU6103
4259:src/xeq.c     **** 			goto range_error;
 23559              		.loc 1 4259 6 is_stmt 0 view .LVU6104
ARM GAS  /tmp/ccQQPlfu.s 			page 614


 23560 00cc 002F     		cmp	r7, #0
 23561 00ce F3D0     		beq	.L1675
4261:src/xeq.c     **** 	}
 23562              		.loc 1 4261 3 is_stmt 1 view .LVU6105
4266:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23563              		.loc 1 4266 8 is_stmt 0 view .LVU6106
 23564 00d0 524D     		ldr	r5, .L1721+4
4271:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23565              		.loc 1 4271 30 view .LVU6107
 23566 00d2 564A     		ldr	r2, .L1721+20
4268:src/xeq.c     **** 	rsrc /= 100;			// sss
 23567              		.loc 1 4268 6 view .LVU6108
 23568 00d4 524E     		ldr	r6, .L1721+8
4261:src/xeq.c     **** 	}
 23569              		.loc 1 4261 8 view .LVU6109
 23570 00d6 6442     		rsbs	r4, r4, #0
 23571              	.LVL1824:
4266:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23572              		.loc 1 4266 2 is_stmt 1 view .LVU6110
4266:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23573              		.loc 1 4266 8 is_stmt 0 view .LVU6111
 23574 00d8 A5FB0435 		umull	r3, r5, r5, r4
4267:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23575              		.loc 1 4267 7 view .LVU6112
 23576 00dc AB09     		lsrs	r3, r5, #6
4268:src/xeq.c     **** 	rsrc /= 100;			// sss
 23577              		.loc 1 4268 6 view .LVU6113
 23578 00de A6FB0316 		umull	r1, r6, r6, r3
4266:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23579              		.loc 1 4266 8 view .LVU6114
 23580 00e2 4FF47A70 		mov	r0, #1000
4271:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23581              		.loc 1 4271 30 view .LVU6115
 23582 00e6 1168     		ldr	r1, [r2]
4266:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23583              		.loc 1 4266 8 view .LVU6116
 23584 00e8 00FB1345 		mls	r5, r0, r3, r4
 23585              	.LVL1825:
4267:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23586              		.loc 1 4267 2 is_stmt 1 view .LVU6117
4268:src/xeq.c     **** 	rsrc /= 100;			// sss
 23587              		.loc 1 4268 2 view .LVU6118
4268:src/xeq.c     **** 	rsrc /= 100;			// sss
 23588              		.loc 1 4268 6 is_stmt 0 view .LVU6119
 23589 00ec 7209     		lsrs	r2, r6, #5
 23590 00ee 6420     		movs	r0, #100
4269:src/xeq.c     **** 
 23591              		.loc 1 4269 7 view .LVU6120
 23592 00f0 1646     		mov	r6, r2
4268:src/xeq.c     **** 	rsrc /= 100;			// sss
 23593              		.loc 1 4268 6 view .LVU6121
 23594 00f2 00FB1232 		mls	r2, r0, r2, r3
 23595              	.LVL1826:
4269:src/xeq.c     **** 
 23596              		.loc 1 4269 2 is_stmt 1 view .LVU6122
4271:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23597              		.loc 1 4271 2 view .LVU6123
ARM GAS  /tmp/ccQQPlfu.s 			page 615


4272:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23598              		.loc 1 4272 9 is_stmt 0 view .LVU6124
 23599 00f6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 23600              	.LVL1827:
 23601              	.L1676:
4275:src/xeq.c     **** 		goto range_error;
 23602              		.loc 1 4275 2 is_stmt 1 view .LVU6125
4275:src/xeq.c     **** 		goto range_error;
 23603              		.loc 1 4275 5 is_stmt 0 view .LVU6126
 23604 00fa B342     		cmp	r3, r6
 23605 00fc DCDD     		ble	.L1675
 23606              	.L1716:
4278:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 23607              		.loc 1 4278 2 is_stmt 1 view .LVU6127
4278:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 23608              		.loc 1 4278 5 is_stmt 0 view .LVU6128
 23609 00fe B8F1000F 		cmp	r8, #0
 23610 0102 25D0     		beq	.L1680
4279:src/xeq.c     **** 
 23611              		.loc 1 4279 3 is_stmt 1 view .LVU6129
4279:src/xeq.c     **** 
 23612              		.loc 1 4279 52 is_stmt 0 view .LVU6130
 23613 0104 6F2D     		cmp	r5, #111
 23614 0106 27DD     		ble	.L1681
 23615              	.LBB3265:
 23616              	.LBI3265:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 23617              		.loc 1 233 5 is_stmt 1 view .LVU6131
 23618              	.LBE3265:
 23619              	.LBE3329:
 23620              	.LBE3335:
 234:src/xeq.c     **** }
 23621              		.loc 1 234 2 view .LVU6132
 23622              	.LVL1828:
 23623              	.LBB3336:
 23624              	.LBB3330:
 23625              	.LBB3290:
 23626              	.LBB3266:
 23627              	.LBI3266:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 23628              		.loc 1 225 5 view .LVU6133
 23629              	.LBB3267:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23630              		.loc 1 226 2 view .LVU6134
 23631              	.LBB3268:
 23632              	.LBI3268:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23633              		.loc 1 1112 5 view .LVU6135
 23634              	.LBB3269:
1113:src/xeq.c     **** }
 23635              		.loc 1 1113 2 view .LVU6136
1113:src/xeq.c     **** }
 23636              		.loc 1 1113 12 is_stmt 0 view .LVU6137
 23637 0108 DAF80010 		ldr	r1, [r10]
 23638              	.LVL1829:
1113:src/xeq.c     **** }
 23639              		.loc 1 1113 12 view .LVU6138
ARM GAS  /tmp/ccQQPlfu.s 			page 616


 23640              	.LBE3269:
 23641              	.LBE3268:
 227:src/xeq.c     **** }
 23642              		.loc 1 227 2 is_stmt 1 view .LVU6139
 23643              	.LBB3272:
 23644              	.LBI3272:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 23645              		.loc 1 217 5 view .LVU6140
 23646              	.LBB3273:
 218:src/xeq.c     **** }
 23647              		.loc 1 218 2 view .LVU6141
 218:src/xeq.c     **** }
 23648              		.loc 1 218 9 is_stmt 0 view .LVU6142
 23649 010c B1F9DE07 		ldrsh	r0, [r1, #2014]
 218:src/xeq.c     **** }
 23650              		.loc 1 218 57 view .LVU6143
 23651 0110 0028     		cmp	r0, #0
 23652 0112 69DB     		blt	.L1717
 23653              	.LVL1830:
 218:src/xeq.c     **** }
 23654              		.loc 1 218 57 view .LVU6144
 23655              	.LBE3273:
 23656              	.LBE3272:
 23657              	.LBE3267:
 23658              	.LBE3266:
 23659              	.LBE3290:
4281:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23660              		.loc 1 4281 3 is_stmt 1 view .LVU6145
 23661              	.LBB3291:
 23662              	.LBB3288:
 23663              	.LBB3286:
 23664              	.LBB3279:
 23665              	.LBB3274:
 23666 0114 0021     		movs	r1, #0
 23667              	.LVL1831:
4281:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23668              		.loc 1 4281 3 is_stmt 0 view .LVU6146
 23669              	.LBE3274:
 23670              	.LBE3279:
 23671              	.LBE3286:
 23672              	.LBE3288:
 23673              	.LBE3291:
4281:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23674              		.loc 1 4281 6 view .LVU6147
 23675 0116 82B3     		cbz	r2, .L1683
 23676              	.LVL1832:
 23677              	.L1684:
4300:src/xeq.c     **** 		if (rdest + num > mx_dest)
 23678              		.loc 1 4300 4 is_stmt 1 view .LVU6148
4300:src/xeq.c     **** 		if (rdest + num > mx_dest)
 23679              		.loc 1 4300 12 is_stmt 0 view .LVU6149
 23680 0118 7031     		adds	r1, r1, #112
 23681              	.LVL1833:
 23682              	.L1687:
4301:src/xeq.c     **** 			goto range_error;
 23683              		.loc 1 4301 3 is_stmt 1 view .LVU6150
4301:src/xeq.c     **** 			goto range_error;
ARM GAS  /tmp/ccQQPlfu.s 			page 617


 23684              		.loc 1 4301 13 is_stmt 0 view .LVU6151
 23685 011a A818     		adds	r0, r5, r2
4301:src/xeq.c     **** 			goto range_error;
 23686              		.loc 1 4301 6 view .LVU6152
 23687 011c 8842     		cmp	r0, r1
 23688 011e CBDC     		bgt	.L1675
4304:src/xeq.c     **** 	}
 23689              		.loc 1 4304 3 is_stmt 1 view .LVU6153
4304:src/xeq.c     **** 	}
 23690              		.loc 1 4304 6 is_stmt 0 view .LVU6154
 23691 0120 C8F80050 		str	r5, [r8]
 23692 0124 B118     		adds	r1, r6, r2
 23693              	.LVL1834:
 23694              	.L1693:
4311:src/xeq.c     **** 		goto range_error;
 23695              		.loc 1 4311 2 is_stmt 1 view .LVU6155
4311:src/xeq.c     **** 		goto range_error;
 23696              		.loc 1 4311 5 is_stmt 0 view .LVU6156
 23697 0126 8B42     		cmp	r3, r1
 23698 0128 C6DB     		blt	.L1675
 23699              	.L1695:
4315:src/xeq.c     **** 	*n = num;
 23700              		.loc 1 4315 2 is_stmt 1 view .LVU6157
4315:src/xeq.c     **** 	*n = num;
 23701              		.loc 1 4315 37 is_stmt 0 view .LVU6158
 23702 012a 0FB1     		cbz	r7, .L1696
4315:src/xeq.c     **** 	*n = num;
 23703              		.loc 1 4315 37 view .LVU6159
 23704 012c 06F57A76 		add	r6, r6, #1000
 23705              	.LVL1835:
 23706              	.L1696:
4318:src/xeq.c     **** 
 23707              		.loc 1 4318 9 view .LVU6160
 23708 0130 0020     		movs	r0, #0
4315:src/xeq.c     **** 	*n = num;
 23709              		.loc 1 4315 5 view .LVU6161
 23710 0132 CBF80060 		str	r6, [fp]
4316:src/xeq.c     **** 
 23711              		.loc 1 4316 2 is_stmt 1 view .LVU6162
4316:src/xeq.c     **** 
 23712              		.loc 1 4316 5 is_stmt 0 view .LVU6163
 23713 0136 C9F80020 		str	r2, [r9]
4318:src/xeq.c     **** 
 23714              		.loc 1 4318 2 is_stmt 1 view .LVU6164
 23715              	.LBE3330:
 23716              	.LBE3336:
4323:src/xeq.c     **** 
 23717              		.loc 1 4323 1 is_stmt 0 view .LVU6165
 23718 013a 15B0     		add	sp, sp, #84
 23719              		.cfi_remember_state
 23720              		.cfi_def_cfa_offset 36
 23721              		@ sp needed
 23722 013c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23723              	.LVL1836:
 23724              	.L1673:
 23725              		.cfi_restore_state
 23726              	.LBB3337:
ARM GAS  /tmp/ccQQPlfu.s 			page 618


 23727              	.LBB3331:
 23728              	.LBB3292:
 23729              	.LBI3292:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 23730              		.loc 1 233 5 is_stmt 1 view .LVU6166
 23731              	.LBE3292:
 23732              	.LBE3331:
 23733              	.LBE3337:
 234:src/xeq.c     **** }
 23734              		.loc 1 234 2 view .LVU6167
 23735              	.LBB3338:
 23736              	.LBB3332:
 23737              	.LBB3313:
 23738              	.LBB3293:
 23739              	.LBI3293:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 23740              		.loc 1 225 5 view .LVU6168
 23741              	.LBB3294:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23742              		.loc 1 226 2 view .LVU6169
 23743              	.LBB3295:
 23744              	.LBI3295:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23745              		.loc 1 1112 5 view .LVU6170
 23746              	.LBB3296:
1113:src/xeq.c     **** }
 23747              		.loc 1 1113 2 view .LVU6171
1113:src/xeq.c     **** }
 23748              		.loc 1 1113 12 is_stmt 0 view .LVU6172
 23749 0140 DAF80030 		ldr	r3, [r10]
 23750              	.LVL1837:
1113:src/xeq.c     **** }
 23751              		.loc 1 1113 12 view .LVU6173
 23752              	.LBE3296:
 23753              	.LBE3295:
 227:src/xeq.c     **** }
 23754              		.loc 1 227 2 is_stmt 1 view .LVU6174
 23755              	.LBB3299:
 23756              	.LBI3299:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 23757              		.loc 1 217 5 view .LVU6175
 23758              	.LBB3300:
 218:src/xeq.c     **** }
 23759              		.loc 1 218 2 view .LVU6176
 218:src/xeq.c     **** }
 23760              		.loc 1 218 9 is_stmt 0 view .LVU6177
 23761 0144 B3F9DE17 		ldrsh	r1, [r3, #2014]
 218:src/xeq.c     **** }
 23762              		.loc 1 218 57 view .LVU6178
 23763 0148 0029     		cmp	r1, #0
 23764 014a 38DB     		blt	.L1718
 23765 014c 7023     		movs	r3, #112
 23766              	.LVL1838:
 218:src/xeq.c     **** }
 23767              		.loc 1 218 57 view .LVU6179
 23768 014e AFE7     		b	.L1679
 23769              	.LVL1839:
ARM GAS  /tmp/ccQQPlfu.s 			page 619


 23770              	.L1680:
 218:src/xeq.c     **** }
 23771              		.loc 1 218 57 view .LVU6180
 23772              	.LBE3300:
 23773              	.LBE3299:
 23774              	.LBE3294:
 23775              	.LBE3293:
 23776              	.LBE3313:
4307:src/xeq.c     **** 			num = mx_src - rsrc;
 23777              		.loc 1 4307 3 is_stmt 1 view .LVU6181
4307:src/xeq.c     **** 			num = mx_src - rsrc;
 23778              		.loc 1 4307 6 is_stmt 0 view .LVU6182
 23779 0150 002A     		cmp	r2, #0
 23780 0152 32D1     		bne	.L1719
4308:src/xeq.c     **** 		}
 23781              		.loc 1 4308 4 is_stmt 1 view .LVU6183
4308:src/xeq.c     **** 		}
 23782              		.loc 1 4308 8 is_stmt 0 view .LVU6184
 23783 0154 9A1B     		subs	r2, r3, r6
 23784              	.LVL1840:
4311:src/xeq.c     **** 		goto range_error;
 23785              		.loc 1 4311 2 is_stmt 1 view .LVU6185
 23786 0156 E8E7     		b	.L1695
 23787              	.L1681:
 23788              	.LBB3314:
 23789              	.LBI3314:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 23790              		.loc 1 253 14 view .LVU6186
 23791              	.LBE3314:
 23792              	.LBE3332:
 23793              	.LBE3338:
 254:src/xeq.c     **** }
 23794              		.loc 1 254 2 view .LVU6187
 23795              	.LVL1841:
 23796              	.LBB3339:
 23797              	.LBB3333:
 23798              	.LBB3323:
 23799              	.LBB3315:
 23800              	.LBI3315:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 23801              		.loc 1 241 14 view .LVU6188
 23802              	.LBB3316:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23803              		.loc 1 242 2 view .LVU6189
 23804              	.LBB3317:
 23805              	.LBI3317:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23806              		.loc 1 1112 5 view .LVU6190
 23807              	.LBB3318:
1113:src/xeq.c     **** }
 23808              		.loc 1 1113 2 view .LVU6191
1113:src/xeq.c     **** }
 23809              		.loc 1 1113 12 is_stmt 0 view .LVU6192
 23810 0158 DAF80000 		ldr	r0, [r10]
1113:src/xeq.c     **** }
 23811              		.loc 1 1113 24 view .LVU6193
 23812 015c B0F8E8C7 		ldrh	ip, [r0, #2024]
ARM GAS  /tmp/ccQQPlfu.s 			page 620


 23813 0160 44F20101 		movw	r1, #16385
 23814              	.LBE3318:
 23815              	.LBE3317:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23816              		.loc 1 242 5 view .LVU6194
 23817 0164 01EA0C01 		and	r1, r1, ip
 23818 0168 B1F5804F 		cmp	r1, #16384
 23819              	.LBB3319:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23820              		.loc 1 243 24 view .LVU6195
 23821 016c 90F8CF17 		ldrb	r1, [r0, #1999]	@ zero_extendqisi2
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23822              		.loc 1 243 3 is_stmt 1 view .LVU6196
 244:src/xeq.c     **** 	}
 23823              		.loc 1 244 3 view .LVU6197
 23824              	.LVL1842:
 244:src/xeq.c     **** 	}
 23825              		.loc 1 244 3 is_stmt 0 view .LVU6198
 23826              	.LBE3319:
 23827              	.LBE3316:
 23828              	.LBE3315:
 23829              	.LBE3323:
4281:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23830              		.loc 1 4281 3 is_stmt 1 view .LVU6199
 23831              	.LBB3324:
 23832              	.LBB3322:
 23833              	.LBB3321:
 23834              	.LBB3320:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23835              		.loc 1 243 13 is_stmt 0 view .LVU6200
 23836 0170 04BF     		itt	eq
 23837 0172 0C39     		subeq	r1, r1, #12
 244:src/xeq.c     **** 	}
 23838              		.loc 1 244 67 view .LVU6201
 23839 0174 4910     		asreq	r1, r1, #1
 23840              	.LBE3320:
 23841              	.LBE3321:
 23842              	.LBE3322:
 23843              	.LBE3324:
4281:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23844              		.loc 1 4281 6 view .LVU6202
 23845 0176 002A     		cmp	r2, #0
 23846 0178 CFD1     		bne	.L1687
 23847              	.L1683:
4283:src/xeq.c     **** 				// source & destination in different memory areas
 23848              		.loc 1 4283 4 is_stmt 1 view .LVU6203
4283:src/xeq.c     **** 				// source & destination in different memory areas
 23849              		.loc 1 4283 7 is_stmt 0 view .LVU6204
 23850 017a 4FB1     		cbz	r7, .L1720
 23851              	.LVL1843:
 23852              	.L1688:
4285:src/xeq.c     **** 			else {
 23853              		.loc 1 4285 5 is_stmt 1 view .LVU6205
4285:src/xeq.c     **** 			else {
 23854              		.loc 1 4285 9 is_stmt 0 view .LVU6206
 23855 017c 8B42     		cmp	r3, r1
 23856 017e 1A46     		mov	r2, r3
ARM GAS  /tmp/ccQQPlfu.s 			page 621


 23857 0180 A8BF     		it	ge
 23858 0182 0A46     		movge	r2, r1
 23859              	.LVL1844:
 23860              	.L1690:
4299:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23861              		.loc 1 4299 3 is_stmt 1 view .LVU6207
4299:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23862              		.loc 1 4299 6 is_stmt 0 view .LVU6208
 23863 0184 6F2D     		cmp	r5, #111
 23864 0186 C8DD     		ble	.L1687
 23865 0188 C6E7     		b	.L1684
 23866              	.LVL1845:
 23867              	.L1700:
4299:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23868              		.loc 1 4299 6 view .LVU6209
 23869 018a 1F46     		mov	r7, r3
4272:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23870              		.loc 1 4272 9 view .LVU6210
 23871 018c 7023     		movs	r3, #112
 23872 018e B4E7     		b	.L1676
 23873              	.LVL1846:
 23874              	.L1720:
4283:src/xeq.c     **** 				// source & destination in different memory areas
 23875              		.loc 1 4283 42 view .LVU6211
 23876 0190 244A     		ldr	r2, .L1721+12
 23877              	.LVL1847:
4283:src/xeq.c     **** 				// source & destination in different memory areas
 23878              		.loc 1 4283 14 view .LVU6212
 23879 0192 9442     		cmp	r4, r2
 23880 0194 B4BF     		ite	lt
 23881 0196 0024     		movlt	r4, #0
 23882 0198 0124     		movge	r4, #1
 23883 019a 6F2D     		cmp	r5, #111
 23884 019c D4BF     		ite	le
 23885 019e 0022     		movle	r2, #0
 23886 01a0 0122     		movgt	r2, #1
 23887 01a2 9442     		cmp	r4, r2
 23888 01a4 EAD1     		bne	.L1688
4287:src/xeq.c     **** 					num = mx_src - rsrc;
 23889              		.loc 1 4287 5 is_stmt 1 view .LVU6213
4287:src/xeq.c     **** 					num = mx_src - rsrc;
 23890              		.loc 1 4287 8 is_stmt 0 view .LVU6214
 23891 01a6 B542     		cmp	r5, r6
4288:src/xeq.c     **** 					q = rsrc - rdest;
 23892              		.loc 1 4288 6 is_stmt 1 view .LVU6215
4292:src/xeq.c     **** 					q = rdest - rsrc;
 23893              		.loc 1 4292 10 is_stmt 0 view .LVU6216
 23894 01a8 A7BF     		ittee	ge
 23895 01aa 4A1B     		subge	r2, r1, r5
4293:src/xeq.c     **** 				}
 23896              		.loc 1 4293 8 view .LVU6217
 23897 01ac A81B     		subge	r0, r5, r6
4288:src/xeq.c     **** 					q = rsrc - rdest;
 23898              		.loc 1 4288 10 view .LVU6218
 23899 01ae 9A1B     		sublt	r2, r3, r6
4289:src/xeq.c     **** 				}
 23900              		.loc 1 4289 6 is_stmt 1 view .LVU6219
ARM GAS  /tmp/ccQQPlfu.s 			page 622


4289:src/xeq.c     **** 				}
 23901              		.loc 1 4289 8 is_stmt 0 view .LVU6220
 23902 01b0 701B     		sublt	r0, r6, r5
4292:src/xeq.c     **** 					q = rdest - rsrc;
 23903              		.loc 1 4292 6 is_stmt 1 view .LVU6221
 23904              	.LVL1848:
4293:src/xeq.c     **** 				}
 23905              		.loc 1 4293 6 view .LVU6222
4295:src/xeq.c     **** 					num = q;
 23906              		.loc 1 4295 5 view .LVU6223
 23907 01b2 8242     		cmp	r2, r0
 23908 01b4 A8BF     		it	ge
 23909 01b6 0246     		movge	r2, r0
 23910              	.LVL1849:
4295:src/xeq.c     **** 					num = q;
 23911              		.loc 1 4295 5 is_stmt 0 view .LVU6224
 23912 01b8 E4E7     		b	.L1690
 23913              	.LVL1850:
 23914              	.L1719:
4295:src/xeq.c     **** 					num = q;
 23915              		.loc 1 4295 5 view .LVU6225
 23916 01ba 9119     		adds	r1, r2, r6
 23917 01bc B3E7     		b	.L1693
 23918              	.LVL1851:
 23919              	.L1718:
 23920              	.LBB3325:
 23921              	.LBB3312:
 23922              	.LBB3311:
 23923              	.LBB3305:
 23924              	.LBB3297:
1113:src/xeq.c     **** }
 23925              		.loc 1 1113 24 view .LVU6226
 23926 01be B3F8E877 		ldrh	r7, [r3, #2024]
 23927              	.LBE3297:
 23928              	.LBE3305:
 23929              	.LBB3306:
 23930              	.LBB3301:
 218:src/xeq.c     **** }
 23931              		.loc 1 218 25 view .LVU6227
 23932 01c2 1B48     		ldr	r0, .L1721+24
 23933              	.LBE3301:
 23934              	.LBE3306:
 23935              	.LBB3307:
 23936              	.LBB3298:
1113:src/xeq.c     **** }
 23937              		.loc 1 1113 24 view .LVU6228
 23938 01c4 44F20103 		movw	r3, #16385
 23939              	.LVL1852:
1113:src/xeq.c     **** }
 23940              		.loc 1 1113 24 view .LVU6229
 23941              	.LBE3298:
 23942              	.LBE3307:
 23943              	.LBB3308:
 23944              	.LBB3302:
 218:src/xeq.c     **** }
 23945              		.loc 1 218 25 view .LVU6230
 23946 01c8 0068     		ldr	r0, [r0]
ARM GAS  /tmp/ccQQPlfu.s 			page 623


 23947              	.LBE3302:
 23948              	.LBE3308:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23949              		.loc 1 226 73 view .LVU6231
 23950 01ca 3B40     		ands	r3, r3, r7
 23951 01cc A3F58043 		sub	r3, r3, #16384
 23952              	.LBB3309:
 23953              	.LBB3303:
 218:src/xeq.c     **** }
 23954              		.loc 1 218 57 view .LVU6232
 23955 01d0 30F81110 		ldrh	r1, [r0, r1, lsl #1]
 23956              	.LBE3303:
 23957              	.LBE3309:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23958              		.loc 1 226 73 view .LVU6233
 23959 01d4 B3FA83F3 		clz	r3, r3
 23960 01d8 5B09     		lsrs	r3, r3, #5
 23961 01da 0233     		adds	r3, r3, #2
 23962              	.LBB3310:
 23963              	.LBB3304:
 218:src/xeq.c     **** }
 23964              		.loc 1 218 57 view .LVU6234
 23965 01dc C1F30B01 		ubfx	r1, r1, #0, #12
 23966 01e0 41FA03F3 		asr	r3, r1, r3
 23967 01e4 7033     		adds	r3, r3, #112
 23968 01e6 63E7     		b	.L1679
 23969              	.LVL1853:
 23970              	.L1717:
 218:src/xeq.c     **** }
 23971              		.loc 1 218 57 view .LVU6235
 23972              	.LBE3304:
 23973              	.LBE3310:
 23974              	.LBE3311:
 23975              	.LBE3312:
 23976              	.LBE3325:
 23977              	.LBB3326:
 23978              	.LBB3289:
 23979              	.LBB3287:
 23980              	.LBB3280:
 23981              	.LBB3270:
1113:src/xeq.c     **** }
 23982              		.loc 1 1113 24 view .LVU6236
 23983 01e8 B1F8E8E7 		ldrh	lr, [r1, #2024]
 23984              	.LBE3270:
 23985              	.LBE3280:
 23986              	.LBB3281:
 23987              	.LBB3275:
 218:src/xeq.c     **** }
 23988              		.loc 1 218 25 view .LVU6237
 23989 01ec DFF840C0 		ldr	ip, .L1721+24
 23990              	.LBE3275:
 23991              	.LBE3281:
 23992              	.LBB3282:
 23993              	.LBB3271:
1113:src/xeq.c     **** }
 23994              		.loc 1 1113 24 view .LVU6238
 23995 01f0 44F20101 		movw	r1, #16385
ARM GAS  /tmp/ccQQPlfu.s 			page 624


 23996              	.LVL1854:
1113:src/xeq.c     **** }
 23997              		.loc 1 1113 24 view .LVU6239
 23998              	.LBE3271:
 23999              	.LBE3282:
 24000              	.LBB3283:
 24001              	.LBB3276:
 218:src/xeq.c     **** }
 24002              		.loc 1 218 25 view .LVU6240
 24003 01f4 DCF800C0 		ldr	ip, [ip]
 24004              	.LBE3276:
 24005              	.LBE3283:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 24006              		.loc 1 226 73 view .LVU6241
 24007 01f8 01EA0E01 		and	r1, r1, lr
 24008 01fc A1F58041 		sub	r1, r1, #16384
 24009              	.LBB3284:
 24010              	.LBB3277:
 218:src/xeq.c     **** }
 24011              		.loc 1 218 57 view .LVU6242
 24012 0200 3CF810C0 		ldrh	ip, [ip, r0, lsl #1]
 24013              	.LBE3277:
 24014              	.LBE3284:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 24015              		.loc 1 226 73 view .LVU6243
 24016 0204 B1FA81F1 		clz	r1, r1
 24017 0208 4909     		lsrs	r1, r1, #5
 24018 020a 881C     		adds	r0, r1, #2
 24019              	.LBB3285:
 24020              	.LBB3278:
 218:src/xeq.c     **** }
 24021              		.loc 1 218 57 view .LVU6244
 24022 020c CCF30B01 		ubfx	r1, ip, #0, #12
 24023 0210 0141     		asrs	r1, r1, r0
 24024              	.LVL1855:
 218:src/xeq.c     **** }
 24025              		.loc 1 218 57 view .LVU6245
 24026              	.LBE3278:
 24027              	.LBE3285:
 24028              	.LBE3287:
 24029              	.LBE3289:
 24030              	.LBE3326:
4281:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 24031              		.loc 1 4281 3 is_stmt 1 view .LVU6246
4281:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 24032              		.loc 1 4281 6 is_stmt 0 view .LVU6247
 24033 0212 002A     		cmp	r2, #0
 24034 0214 B1D0     		beq	.L1683
 24035 0216 7FE7     		b	.L1684
 24036              	.L1722:
 24037              		.align	2
 24038              	.L1721:
 24039 0218 00000000 		.word	Error
 24040 021c D34D6210 		.word	274877907
 24041 0220 1F85EB51 		.word	1374389535
 24042 0224 00E6AA00 		.word	11200000
 24043 0228 80969800 		.word	10000000
ARM GAS  /tmp/ccQQPlfu.s 			page 625


 24044 022c 00000000 		.word	backup_ram
 24045 0230 00000000 		.word	RetStk
 24046 0234 00000000 		.word	main_ram
 24047              	.LBE3333:
 24048              	.LBE3339:
 24049              		.cfi_endproc
 24050              	.LFE228:
 24052              		.section	.text.op_regcopy,"ax",%progbits
 24053              		.align	1
 24054              		.p2align 2,,3
 24055              		.global	op_regcopy
 24056              		.syntax unified
 24057              		.thumb
 24058              		.thumb_func
 24059              		.fpu fpv4-sp-d16
 24061              	op_regcopy:
 24062              	.LVL1856:
 24063              	.LFB229:
4325:src/xeq.c     **** 	int s, n, d;
 24064              		.loc 1 4325 32 is_stmt 1 view -0
 24065              		.cfi_startproc
 24066              		@ args = 0, pretend = 0, frame = 16
 24067              		@ frame_needed = 0, uses_anonymous_args = 0
4326:src/xeq.c     **** 
 24068              		.loc 1 4326 2 view .LVU6249
4328:src/xeq.c     **** 		return;
 24069              		.loc 1 4328 2 view .LVU6250
4325:src/xeq.c     **** 	int s, n, d;
 24070              		.loc 1 4325 32 is_stmt 0 view .LVU6251
 24071 0000 10B5     		push	{r4, lr}
 24072              		.cfi_def_cfa_offset 8
 24073              		.cfi_offset 4, -8
 24074              		.cfi_offset 14, -4
 24075 0002 84B0     		sub	sp, sp, #16
 24076              		.cfi_def_cfa_offset 24
4328:src/xeq.c     **** 		return;
 24077              		.loc 1 4328 6 view .LVU6252
 24078 0004 0123     		movs	r3, #1
 24079 0006 03AA     		add	r2, sp, #12
 24080 0008 02A9     		add	r1, sp, #8
 24081 000a 01A8     		add	r0, sp, #4
 24082              	.LVL1857:
4328:src/xeq.c     **** 		return;
 24083              		.loc 1 4328 6 view .LVU6253
 24084 000c FFF7FEFF 		bl	reg_decode
 24085              	.LVL1858:
4328:src/xeq.c     **** 		return;
 24086              		.loc 1 4328 5 view .LVU6254
 24087 0010 B8B9     		cbnz	r0, .L1723
4330:src/xeq.c     **** }
 24088              		.loc 1 4330 2 is_stmt 1 view .LVU6255
 24089 0012 0398     		ldr	r0, [sp, #12]
 24090 0014 FFF7FEFF 		bl	get_reg_n
 24091              	.LVL1859:
 24092 0018 0446     		mov	r4, r0
 24093 001a 0198     		ldr	r0, [sp, #4]
 24094 001c FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/ccQQPlfu.s 			page 626


 24095              	.LVL1860:
 24096              	.LBB3340:
 24097              	.LBB3341:
 24098              	.LBB3342:
 24099              	.LBB3343:
1113:src/xeq.c     **** }
 24100              		.loc 1 1113 24 is_stmt 0 view .LVU6256
 24101 0020 094B     		ldr	r3, .L1728
 24102              	.LBE3343:
 24103              	.LBE3342:
 24104              	.LBE3341:
 24105              	.LBE3340:
4330:src/xeq.c     **** }
 24106              		.loc 1 4330 2 view .LVU6257
 24107 0022 029A     		ldr	r2, [sp, #8]
 24108              	.LVL1861:
 24109              	.LBB3350:
 24110              	.LBB3348:
 24111              	.LBB3346:
 24112              	.LBB3344:
1113:src/xeq.c     **** }
 24113              		.loc 1 1113 24 view .LVU6258
 24114 0024 1B68     		ldr	r3, [r3]
 24115 0026 B3F8E817 		ldrh	r1, [r3, #2024]
 24116 002a 44F20103 		movw	r3, #16385
 24117              	.LBE3344:
 24118              	.LBE3346:
1532:src/xeq.c     **** 		n <<= 1;
 24119              		.loc 1 1532 5 view .LVU6259
 24120 002e 0B40     		ands	r3, r3, r1
 24121 0030 B3F5804F 		cmp	r3, #16384
1533:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 24122              		.loc 1 1533 5 view .LVU6260
 24123 0034 08BF     		it	eq
 24124 0036 5200     		lsleq	r2, r2, #1
 24125              	.LBE3348:
 24126              	.LBE3350:
4330:src/xeq.c     **** }
 24127              		.loc 1 4330 2 view .LVU6261
 24128 0038 0146     		mov	r1, r0
 24129              	.LVL1862:
 24130              	.LBB3351:
 24131              	.LBI3340:
1531:src/xeq.c     **** 	if (is_dblmode())
 24132              		.loc 1 1531 6 is_stmt 1 view .LVU6262
 24133              	.LBB3349:
1532:src/xeq.c     **** 		n <<= 1;
 24134              		.loc 1 1532 2 view .LVU6263
 24135              	.LBB3347:
 24136              	.LBI3342:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 24137              		.loc 1 1112 5 view .LVU6264
 24138              	.LBB3345:
1113:src/xeq.c     **** }
 24139              		.loc 1 1113 2 view .LVU6265
 24140              	.LBE3345:
 24141              	.LBE3347:
ARM GAS  /tmp/ccQQPlfu.s 			page 627


1533:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 24142              		.loc 1 1533 3 view .LVU6266
1534:src/xeq.c     **** }
 24143              		.loc 1 1534 2 view .LVU6267
 24144 003a D200     		lsls	r2, r2, #3
 24145              	.LVL1863:
1534:src/xeq.c     **** }
 24146              		.loc 1 1534 2 is_stmt 0 view .LVU6268
 24147 003c 2046     		mov	r0, r4
 24148              	.LVL1864:
1534:src/xeq.c     **** }
 24149              		.loc 1 1534 2 view .LVU6269
 24150 003e FFF7FEFF 		bl	xcopy
 24151              	.LVL1865:
 24152              	.L1723:
1534:src/xeq.c     **** }
 24153              		.loc 1 1534 2 view .LVU6270
 24154              	.LBE3349:
 24155              	.LBE3351:
4331:src/xeq.c     **** 
 24156              		.loc 1 4331 1 view .LVU6271
 24157 0042 04B0     		add	sp, sp, #16
 24158              		.cfi_def_cfa_offset 8
 24159              		@ sp needed
 24160 0044 10BD     		pop	{r4, pc}
 24161              	.L1729:
 24162 0046 00BF     		.align	2
 24163              	.L1728:
 24164 0048 00000000 		.word	main_ram
 24165              		.cfi_endproc
 24166              	.LFE229:
 24168              		.section	.text.op_regswap,"ax",%progbits
 24169              		.align	1
 24170              		.p2align 2,,3
 24171              		.global	op_regswap
 24172              		.syntax unified
 24173              		.thumb
 24174              		.thumb_func
 24175              		.fpu fpv4-sp-d16
 24177              	op_regswap:
 24178              	.LVL1866:
 24179              	.LFB230:
4333:src/xeq.c     **** 	int s, n, d, i;
 24180              		.loc 1 4333 32 is_stmt 1 view -0
 24181              		.cfi_startproc
 24182              		@ args = 0, pretend = 0, frame = 16
 24183              		@ frame_needed = 0, uses_anonymous_args = 0
4334:src/xeq.c     **** 
 24184              		.loc 1 4334 2 view .LVU6273
4336:src/xeq.c     **** 		return;
 24185              		.loc 1 4336 2 view .LVU6274
4333:src/xeq.c     **** 	int s, n, d, i;
 24186              		.loc 1 4333 32 is_stmt 0 view .LVU6275
 24187 0000 30B5     		push	{r4, r5, lr}
 24188              		.cfi_def_cfa_offset 12
 24189              		.cfi_offset 4, -12
 24190              		.cfi_offset 5, -8
ARM GAS  /tmp/ccQQPlfu.s 			page 628


 24191              		.cfi_offset 14, -4
 24192 0002 85B0     		sub	sp, sp, #20
 24193              		.cfi_def_cfa_offset 32
4336:src/xeq.c     **** 		return;
 24194              		.loc 1 4336 6 view .LVU6276
 24195 0004 0023     		movs	r3, #0
 24196 0006 03AA     		add	r2, sp, #12
 24197 0008 02A9     		add	r1, sp, #8
 24198 000a 01A8     		add	r0, sp, #4
 24199              	.LVL1867:
4336:src/xeq.c     **** 		return;
 24200              		.loc 1 4336 6 view .LVU6277
 24201 000c FFF7FEFF 		bl	reg_decode
 24202              	.LVL1868:
4336:src/xeq.c     **** 		return;
 24203              		.loc 1 4336 5 view .LVU6278
 24204 0010 E8B9     		cbnz	r0, .L1730
4336:src/xeq.c     **** 		return;
 24205              		.loc 1 4336 37 discriminator 1 view .LVU6279
 24206 0012 039B     		ldr	r3, [sp, #12]
 24207 0014 0446     		mov	r4, r0
 24208 0016 0198     		ldr	r0, [sp, #4]
4336:src/xeq.c     **** 		return;
 24209              		.loc 1 4336 32 discriminator 1 view .LVU6280
 24210 0018 9842     		cmp	r0, r3
 24211 001a 18D0     		beq	.L1730
4339:src/xeq.c     **** 			report_err(ERR_RANGE);
 24212              		.loc 1 4339 3 is_stmt 1 view .LVU6281
4339:src/xeq.c     **** 			report_err(ERR_RANGE);
 24213              		.loc 1 4339 19 is_stmt 0 view .LVU6282
 24214 001c 029A     		ldr	r2, [sp, #8]
4339:src/xeq.c     **** 			report_err(ERR_RANGE);
 24215              		.loc 1 4339 6 view .LVU6283
 24216 001e 18DD     		ble	.L1735
4339:src/xeq.c     **** 			report_err(ERR_RANGE);
 24217              		.loc 1 4339 19 discriminator 1 view .LVU6284
 24218 0020 1344     		add	r3, r3, r2
4339:src/xeq.c     **** 			report_err(ERR_RANGE);
 24219              		.loc 1 4339 14 discriminator 1 view .LVU6285
 24220 0022 9842     		cmp	r0, r3
 24221 0024 19DB     		blt	.L1736
 24222              	.L1737:
 24223              	.LVL1869:
4342:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24224              		.loc 1 4342 16 is_stmt 1 discriminator 1 view .LVU6286
4342:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24225              		.loc 1 4342 4 is_stmt 0 discriminator 1 view .LVU6287
 24226 0026 002A     		cmp	r2, #0
 24227 0028 01DC     		bgt	.L1739
 24228 002a 10E0     		b	.L1730
 24229              	.LVL1870:
 24230              	.L1742:
4342:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24231              		.loc 1 4342 4 discriminator 1 view .LVU6288
 24232 002c 0198     		ldr	r0, [sp, #4]
 24233              	.LVL1871:
 24234              	.L1739:
ARM GAS  /tmp/ccQQPlfu.s 			page 629


4343:src/xeq.c     **** 		}
 24235              		.loc 1 4343 5 is_stmt 1 discriminator 3 view .LVU6289
 24236 002e 2044     		add	r0, r0, r4
 24237 0030 FFF7FEFF 		bl	get_reg_n
 24238              	.LVL1872:
 24239 0034 039B     		ldr	r3, [sp, #12]
 24240 0036 0546     		mov	r5, r0
 24241 0038 E018     		adds	r0, r4, r3
 24242 003a FFF7FEFF 		bl	get_reg_n
 24243              	.LVL1873:
 24244 003e 0146     		mov	r1, r0
 24245 0040 2846     		mov	r0, r5
 24246 0042 FFF7FEFF 		bl	swap_reg
 24247              	.LVL1874:
4342:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24248              		.loc 1 4342 23 discriminator 3 view .LVU6290
4342:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24249              		.loc 1 4342 4 is_stmt 0 discriminator 3 view .LVU6291
 24250 0046 029B     		ldr	r3, [sp, #8]
4342:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24251              		.loc 1 4342 24 discriminator 3 view .LVU6292
 24252 0048 0134     		adds	r4, r4, #1
 24253              	.LVL1875:
4342:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24254              		.loc 1 4342 16 is_stmt 1 discriminator 3 view .LVU6293
4342:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24255              		.loc 1 4342 4 is_stmt 0 discriminator 3 view .LVU6294
 24256 004a A342     		cmp	r3, r4
 24257 004c EEDC     		bgt	.L1742
 24258              	.LVL1876:
 24259              	.L1730:
4346:src/xeq.c     **** 
 24260              		.loc 1 4346 1 view .LVU6295
 24261 004e 05B0     		add	sp, sp, #20
 24262              		.cfi_remember_state
 24263              		.cfi_def_cfa_offset 12
 24264              		@ sp needed
 24265 0050 30BD     		pop	{r4, r5, pc}
 24266              	.L1735:
 24267              		.cfi_restore_state
4339:src/xeq.c     **** 			report_err(ERR_RANGE);
 24268              		.loc 1 4339 28 discriminator 3 view .LVU6296
 24269 0052 E8DA     		bge	.L1737
4339:src/xeq.c     **** 			report_err(ERR_RANGE);
 24270              		.loc 1 4339 43 discriminator 4 view .LVU6297
 24271 0054 8118     		adds	r1, r0, r2
4339:src/xeq.c     **** 			report_err(ERR_RANGE);
 24272              		.loc 1 4339 38 discriminator 4 view .LVU6298
 24273 0056 8B42     		cmp	r3, r1
 24274 0058 E5DA     		bge	.L1737
 24275              	.L1736:
4340:src/xeq.c     **** 		else {
 24276              		.loc 1 4340 4 is_stmt 1 view .LVU6299
 24277              	.LVL1877:
 24278              	.LBB3356:
 24279              	.LBI3356:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/ccQQPlfu.s 			page 630


 24280              		.loc 1 540 5 view .LVU6300
 24281              	.LBB3357:
 541:src/xeq.c     **** 		Error = e;
 24282              		.loc 1 541 2 view .LVU6301
 541:src/xeq.c     **** 		Error = e;
 24283              		.loc 1 541 12 is_stmt 0 view .LVU6302
 24284 005a 044B     		ldr	r3, .L1743
 541:src/xeq.c     **** 		Error = e;
 24285              		.loc 1 541 5 view .LVU6303
 24286 005c 1A68     		ldr	r2, [r3]
 24287 005e 002A     		cmp	r2, #0
 24288 0060 F5D1     		bne	.L1730
 24289              	.LVL1878:
 24290              	.LBB3358:
 24291              	.LBI3358:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24292              		.loc 1 540 5 is_stmt 1 view .LVU6304
 24293              	.LBB3359:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 24294              		.loc 1 542 3 view .LVU6305
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 24295              		.loc 1 542 9 is_stmt 0 view .LVU6306
 24296 0062 0822     		movs	r2, #8
 24297 0064 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 24298              		.loc 1 543 3 is_stmt 1 view .LVU6307
 24299              	.LBE3359:
 24300              	.LBE3358:
 24301              	.LBE3357:
 24302              	.LBE3356:
4346:src/xeq.c     **** 
 24303              		.loc 1 4346 1 is_stmt 0 view .LVU6308
 24304 0066 05B0     		add	sp, sp, #20
 24305              		.cfi_def_cfa_offset 12
 24306              		@ sp needed
 24307 0068 30BD     		pop	{r4, r5, pc}
 24308              	.L1744:
 24309 006a 00BF     		.align	2
 24310              	.L1743:
 24311 006c 00000000 		.word	Error
 24312              		.cfi_endproc
 24313              	.LFE230:
 24315              		.section	.text.op_regclr,"ax",%progbits
 24316              		.align	1
 24317              		.p2align 2,,3
 24318              		.global	op_regclr
 24319              		.syntax unified
 24320              		.thumb
 24321              		.thumb_func
 24322              		.fpu fpv4-sp-d16
 24324              	op_regclr:
 24325              	.LVL1879:
 24326              	.LFB231:
4348:src/xeq.c     **** 	int s, n;
 24327              		.loc 1 4348 31 is_stmt 1 view -0
 24328              		.cfi_startproc
 24329              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccQQPlfu.s 			page 631


 24330              		@ frame_needed = 0, uses_anonymous_args = 0
4349:src/xeq.c     **** 
 24331              		.loc 1 4349 2 view .LVU6310
4351:src/xeq.c     **** 		return;
 24332              		.loc 1 4351 2 view .LVU6311
4348:src/xeq.c     **** 	int s, n;
 24333              		.loc 1 4348 31 is_stmt 0 view .LVU6312
 24334 0000 10B5     		push	{r4, lr}
 24335              		.cfi_def_cfa_offset 8
 24336              		.cfi_offset 4, -8
 24337              		.cfi_offset 14, -4
4351:src/xeq.c     **** 		return;
 24338              		.loc 1 4351 6 view .LVU6313
 24339 0002 0023     		movs	r3, #0
4348:src/xeq.c     **** 	int s, n;
 24340              		.loc 1 4348 31 view .LVU6314
 24341 0004 82B0     		sub	sp, sp, #8
 24342              		.cfi_def_cfa_offset 16
4351:src/xeq.c     **** 		return;
 24343              		.loc 1 4351 6 view .LVU6315
 24344 0006 1A46     		mov	r2, r3
 24345 0008 01A9     		add	r1, sp, #4
 24346 000a 6846     		mov	r0, sp
 24347              	.LVL1880:
4351:src/xeq.c     **** 		return;
 24348              		.loc 1 4351 6 view .LVU6316
 24349 000c FFF7FEFF 		bl	reg_decode
 24350              	.LVL1881:
4351:src/xeq.c     **** 		return;
 24351              		.loc 1 4351 5 view .LVU6317
 24352 0010 A8B9     		cbnz	r0, .L1745
4353:src/xeq.c     **** }
 24353              		.loc 1 4353 2 is_stmt 1 view .LVU6318
 24354 0012 0446     		mov	r4, r0
 24355 0014 0098     		ldr	r0, [sp]
 24356 0016 FFF7FEFF 		bl	get_reg_n
 24357              	.LVL1882:
 24358              	.LBB3360:
 24359              	.LBI3360:
1512:src/xeq.c     **** #if 0
 24360              		.loc 1 1512 6 view .LVU6319
 24361              	.LBB3361:
1527:src/xeq.c     **** #endif
 24362              		.loc 1 1527 2 view .LVU6320
 24363              	.LBB3362:
 24364              	.LBI3362:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 24365              		.loc 1 1112 5 view .LVU6321
 24366              	.LBB3363:
1113:src/xeq.c     **** }
 24367              		.loc 1 1113 2 view .LVU6322
1113:src/xeq.c     **** }
 24368              		.loc 1 1113 24 is_stmt 0 view .LVU6323
 24369 001a 0A4B     		ldr	r3, .L1749
 24370              	.LBE3363:
 24371              	.LBE3362:
1527:src/xeq.c     **** #endif
ARM GAS  /tmp/ccQQPlfu.s 			page 632


 24372              		.loc 1 1527 2 view .LVU6324
 24373 001c 019A     		ldr	r2, [sp, #4]
 24374              	.LBB3365:
 24375              	.LBB3364:
1113:src/xeq.c     **** }
 24376              		.loc 1 1113 24 view .LVU6325
 24377 001e 1B68     		ldr	r3, [r3]
 24378 0020 B3F8E817 		ldrh	r1, [r3, #2024]
 24379 0024 44F20103 		movw	r3, #16385
 24380 0028 0B40     		ands	r3, r3, r1
 24381 002a A3F58043 		sub	r3, r3, #16384
 24382 002e B3FA83F3 		clz	r3, r3
 24383 0032 5B09     		lsrs	r3, r3, #5
 24384              	.LBE3364:
 24385              	.LBE3365:
1527:src/xeq.c     **** #endif
 24386              		.loc 1 1527 24 view .LVU6326
 24387 0034 0333     		adds	r3, r3, #3
1527:src/xeq.c     **** #endif
 24388              		.loc 1 1527 2 view .LVU6327
 24389 0036 2146     		mov	r1, r4
 24390 0038 9A40     		lsls	r2, r2, r3
 24391 003a FFF7FEFF 		bl	xset
 24392              	.LVL1883:
 24393              	.L1745:
1527:src/xeq.c     **** #endif
 24394              		.loc 1 1527 2 view .LVU6328
 24395              	.LBE3361:
 24396              	.LBE3360:
4354:src/xeq.c     **** 
 24397              		.loc 1 4354 1 view .LVU6329
 24398 003e 02B0     		add	sp, sp, #8
 24399              		.cfi_def_cfa_offset 8
 24400              		@ sp needed
 24401 0040 10BD     		pop	{r4, pc}
 24402              	.L1750:
 24403 0042 00BF     		.align	2
 24404              	.L1749:
 24405 0044 00000000 		.word	main_ram
 24406              		.cfi_endproc
 24407              	.LFE231:
 24409              		.section	.text.op_regsort,"ax",%progbits
 24410              		.align	1
 24411              		.p2align 2,,3
 24412              		.global	op_regsort
 24413              		.syntax unified
 24414              		.thumb
 24415              		.thumb_func
 24416              		.fpu fpv4-sp-d16
 24418              	op_regsort:
 24419              	.LVL1884:
 24420              	.LFB232:
4356:src/xeq.c     **** 	int s, n;
 24421              		.loc 1 4356 32 is_stmt 1 view -0
 24422              		.cfi_startproc
 24423              		@ args = 0, pretend = 0, frame = 160
 24424              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQQPlfu.s 			page 633


4357:src/xeq.c     **** 	decNumber pivot, a;
 24425              		.loc 1 4357 2 view .LVU6331
4358:src/xeq.c     **** 	int beg[10], end[10], i;
 24426              		.loc 1 4358 2 view .LVU6332
4359:src/xeq.c     **** 
 24427              		.loc 1 4359 2 view .LVU6333
4361:src/xeq.c     **** 		return;
 24428              		.loc 1 4361 2 view .LVU6334
4356:src/xeq.c     **** 	int s, n;
 24429              		.loc 1 4356 32 is_stmt 0 view .LVU6335
 24430 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 24431              		.cfi_def_cfa_offset 28
 24432              		.cfi_offset 4, -28
 24433              		.cfi_offset 5, -24
 24434              		.cfi_offset 6, -20
 24435              		.cfi_offset 7, -16
 24436              		.cfi_offset 8, -12
 24437              		.cfi_offset 9, -8
 24438              		.cfi_offset 14, -4
4361:src/xeq.c     **** 		return;
 24439              		.loc 1 4361 6 view .LVU6336
 24440 0004 0023     		movs	r3, #0
4356:src/xeq.c     **** 	int s, n;
 24441              		.loc 1 4356 32 view .LVU6337
 24442 0006 A9B0     		sub	sp, sp, #164
 24443              		.cfi_def_cfa_offset 192
4361:src/xeq.c     **** 		return;
 24444              		.loc 1 4361 6 view .LVU6338
 24445 0008 1A46     		mov	r2, r3
 24446 000a 01A9     		add	r1, sp, #4
 24447 000c 6846     		mov	r0, sp
 24448              	.LVL1885:
4361:src/xeq.c     **** 		return;
 24449              		.loc 1 4361 6 view .LVU6339
 24450 000e FFF7FEFF 		bl	reg_decode
 24451              	.LVL1886:
4361:src/xeq.c     **** 		return;
 24452              		.loc 1 4361 5 view .LVU6340
 24453 0012 20B9     		cbnz	r0, .L1751
4361:src/xeq.c     **** 		return;
 24454              		.loc 1 4361 39 discriminator 1 view .LVU6341
 24455 0014 DDF80480 		ldr	r8, [sp, #4]
4361:src/xeq.c     **** 		return;
 24456              		.loc 1 4361 34 discriminator 1 view .LVU6342
 24457 0018 B8F1010F 		cmp	r8, #1
 24458 001c 02D1     		bne	.L1775
 24459              	.L1751:
4406:src/xeq.c     **** 
 24460              		.loc 1 4406 1 view .LVU6343
 24461 001e 29B0     		add	sp, sp, #164
 24462              		.cfi_remember_state
 24463              		.cfi_def_cfa_offset 28
 24464              		@ sp needed
 24465 0020 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 24466              	.L1775:
 24467              		.cfi_restore_state
 24468 0024 0646     		mov	r6, r0
ARM GAS  /tmp/ccQQPlfu.s 			page 634


4365:src/xeq.c     **** 	end[0] = n;
 24469              		.loc 1 4365 2 is_stmt 1 view .LVU6344
4365:src/xeq.c     **** 	end[0] = n;
 24470              		.loc 1 4365 9 is_stmt 0 view .LVU6345
 24471 0026 1490     		str	r0, [sp, #80]
4366:src/xeq.c     **** 	i = 0;
 24472              		.loc 1 4366 2 is_stmt 1 view .LVU6346
4366:src/xeq.c     **** 	i = 0;
 24473              		.loc 1 4366 9 is_stmt 0 view .LVU6347
 24474 0028 CDF87880 		str	r8, [sp, #120]
4367:src/xeq.c     **** 	while (i>=0) {
 24475              		.loc 1 4367 2 is_stmt 1 view .LVU6348
 24476              	.LVL1887:
4368:src/xeq.c     **** 		int L = beg[i];
 24477              		.loc 1 4368 2 view .LVU6349
4368:src/xeq.c     **** 		int L = beg[i];
 24478              		.loc 1 4368 8 view .LVU6350
4367:src/xeq.c     **** 	while (i>=0) {
 24479              		.loc 1 4367 4 is_stmt 0 view .LVU6351
 24480 002c 0746     		mov	r7, r0
 24481              	.LVL1888:
 24482              	.L1765:
 24483              	.LBB3366:
4369:src/xeq.c     **** 		int R = end[i] - 1;
 24484              		.loc 1 4369 3 is_stmt 1 view .LVU6352
4370:src/xeq.c     **** 		if (L<R) {
 24485              		.loc 1 4370 3 view .LVU6353
4370:src/xeq.c     **** 		if (L<R) {
 24486              		.loc 1 4370 7 is_stmt 0 view .LVU6354
 24487 002e 08F1FF34 		add	r4, r8, #-1
 24488              	.LVL1889:
4371:src/xeq.c     **** 			const int pvt = s + L;
 24489              		.loc 1 4371 3 is_stmt 1 view .LVU6355
4371:src/xeq.c     **** 			const int pvt = s + L;
 24490              		.loc 1 4371 6 is_stmt 0 view .LVU6356
 24491 0032 B442     		cmp	r4, r6
 24492 0034 0CDC     		bgt	.L1776
 24493              	.LVL1890:
 24494              	.L1754:
4404:src/xeq.c     **** 	}
 24495              		.loc 1 4404 4 is_stmt 1 view .LVU6357
 24496              	.LBE3366:
4368:src/xeq.c     **** 		int L = beg[i];
 24497              		.loc 1 4368 8 is_stmt 0 view .LVU6358
 24498 0036 013F     		subs	r7, r7, #1
 24499              	.LVL1891:
4368:src/xeq.c     **** 		int L = beg[i];
 24500              		.loc 1 4368 8 view .LVU6359
 24501 0038 F1D3     		bcc	.L1751
 24502 003a 28AB     		add	r3, sp, #160
 24503 003c 03EB8703 		add	r3, r3, r7, lsl #2
 24504 0040 53F8288C 		ldr	r8, [r3, #-40]
 24505 0044 53F8506C 		ldr	r6, [r3, #-80]
 24506              	.LVL1892:
 24507              	.LBB3369:
4369:src/xeq.c     **** 		int R = end[i] - 1;
 24508              		.loc 1 4369 3 is_stmt 1 view .LVU6360
ARM GAS  /tmp/ccQQPlfu.s 			page 635


4370:src/xeq.c     **** 		if (L<R) {
 24509              		.loc 1 4370 3 view .LVU6361
4370:src/xeq.c     **** 		if (L<R) {
 24510              		.loc 1 4370 7 is_stmt 0 view .LVU6362
 24511 0048 08F1FF34 		add	r4, r8, #-1
 24512              	.LVL1893:
4371:src/xeq.c     **** 			const int pvt = s + L;
 24513              		.loc 1 4371 3 is_stmt 1 view .LVU6363
4371:src/xeq.c     **** 			const int pvt = s + L;
 24514              		.loc 1 4371 6 is_stmt 0 view .LVU6364
 24515 004c B442     		cmp	r4, r6
 24516 004e F2DD     		ble	.L1754
 24517              	.LVL1894:
 24518              	.L1776:
 24519              	.LBB3367:
4372:src/xeq.c     **** 			getRegister(&pivot, pvt);
 24520              		.loc 1 4372 4 is_stmt 1 view .LVU6365
4373:src/xeq.c     **** 			while (L<R) {
 24521              		.loc 1 4373 4 view .LVU6366
4372:src/xeq.c     **** 			getRegister(&pivot, pvt);
 24522              		.loc 1 4372 14 is_stmt 0 view .LVU6367
 24523 0050 0099     		ldr	r1, [sp]
4373:src/xeq.c     **** 			while (L<R) {
 24524              		.loc 1 4373 4 view .LVU6368
 24525 0052 02A8     		add	r0, sp, #8
 24526 0054 3144     		add	r1, r1, r6
 24527              	.LVL1895:
4373:src/xeq.c     **** 			while (L<R) {
 24528              		.loc 1 4373 4 view .LVU6369
 24529 0056 FFF7FEFF 		bl	getRegister
 24530              	.LVL1896:
4374:src/xeq.c     **** 				while (L<R) {
 24531              		.loc 1 4374 4 is_stmt 1 view .LVU6370
4374:src/xeq.c     **** 				while (L<R) {
 24532              		.loc 1 4374 10 view .LVU6371
4373:src/xeq.c     **** 			while (L<R) {
 24533              		.loc 1 4373 4 is_stmt 0 view .LVU6372
 24534 005a B146     		mov	r9, r6
 24535              	.L1757:
4376:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
 24536              		.loc 1 4376 6 is_stmt 1 view .LVU6373
 24537 005c 0099     		ldr	r1, [sp]
 24538 005e 0BA8     		add	r0, sp, #44
 24539 0060 2144     		add	r1, r1, r4
 24540 0062 FFF7FEFF 		bl	getRegister
 24541              	.LVL1897:
4377:src/xeq.c     **** 						break;
 24542              		.loc 1 4377 6 view .LVU6374
4377:src/xeq.c     **** 						break;
 24543              		.loc 1 4377 10 is_stmt 0 view .LVU6375
 24544 0066 02A9     		add	r1, sp, #8
 24545 0068 0BA8     		add	r0, sp, #44
 24546 006a FFF7FEFF 		bl	dn_lt
 24547              	.LVL1898:
4379:src/xeq.c     **** 				}
 24548              		.loc 1 4379 6 is_stmt 1 view .LVU6376
4377:src/xeq.c     **** 						break;
ARM GAS  /tmp/ccQQPlfu.s 			page 636


 24549              		.loc 1 4377 9 is_stmt 0 view .LVU6377
 24550 006e 00BB     		cbnz	r0, .L1756
4379:src/xeq.c     **** 				}
 24551              		.loc 1 4379 7 view .LVU6378
 24552 0070 013C     		subs	r4, r4, #1
 24553              	.LVL1899:
4375:src/xeq.c     **** 					getRegister(&a, s + R);
 24554              		.loc 1 4375 11 is_stmt 1 view .LVU6379
 24555 0072 4C45     		cmp	r4, r9
 24556 0074 F2DC     		bgt	.L1757
 24557              	.L1758:
 24558              	.LVL1900:
4383:src/xeq.c     **** 					getRegister(&a, s + L);
 24559              		.loc 1 4383 11 is_stmt 0 view .LVU6380
 24560 0076 4D46     		mov	r5, r9
 24561              	.LVL1901:
4374:src/xeq.c     **** 				while (L<R) {
 24562              		.loc 1 4374 10 is_stmt 1 view .LVU6381
 24563              	.L1766:
4392:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
 24564              		.loc 1 4392 4 view .LVU6382
 24565 0078 0098     		ldr	r0, [sp]
 24566 007a 02A9     		add	r1, sp, #8
 24567 007c 2844     		add	r0, r0, r5
 24568 007e FFF7FEFF 		bl	setRegister
 24569              	.LVL1902:
4393:src/xeq.c     **** 				beg[i+1] = beg[i];
 24570              		.loc 1 4393 4 view .LVU6383
4393:src/xeq.c     **** 				beg[i+1] = beg[i];
 24571              		.loc 1 4393 32 is_stmt 0 view .LVU6384
 24572 0082 6B1C     		adds	r3, r5, #1
4393:src/xeq.c     **** 				beg[i+1] = beg[i];
 24573              		.loc 1 4393 28 view .LVU6385
 24574 0084 A8EB0302 		sub	r2, r8, r3
4393:src/xeq.c     **** 				beg[i+1] = beg[i];
 24575              		.loc 1 4393 10 view .LVU6386
 24576 0088 A91B     		subs	r1, r5, r6
4393:src/xeq.c     **** 				beg[i+1] = beg[i];
 24577              		.loc 1 4393 7 view .LVU6387
 24578 008a 9142     		cmp	r1, r2
4394:src/xeq.c     **** 				end[i+1] = L;
 24579              		.loc 1 4394 10 view .LVU6388
 24580 008c 07F10101 		add	r1, r7, #1
4396:src/xeq.c     **** 			} else {
 24581              		.loc 1 4396 12 view .LVU6389
 24582 0090 28AA     		add	r2, sp, #160
 24583 0092 02EB8700 		add	r0, r2, r7, lsl #2
4394:src/xeq.c     **** 				end[i+1] = L;
 24584              		.loc 1 4394 14 view .LVU6390
 24585 0096 02EB8102 		add	r2, r2, r1, lsl #2
 24586 009a 0F46     		mov	r7, r1
 24587              	.LVL1903:
4393:src/xeq.c     **** 				beg[i+1] = beg[i];
 24588              		.loc 1 4393 7 view .LVU6391
 24589 009c 2DDA     		bge	.L1762
4394:src/xeq.c     **** 				end[i+1] = L;
 24590              		.loc 1 4394 5 is_stmt 1 view .LVU6392
ARM GAS  /tmp/ccQQPlfu.s 			page 637


4394:src/xeq.c     **** 				end[i+1] = L;
 24591              		.loc 1 4394 14 is_stmt 0 view .LVU6393
 24592 009e 42F8506C 		str	r6, [r2, #-80]
4395:src/xeq.c     **** 				beg[i] = L+1;
 24593              		.loc 1 4395 5 is_stmt 1 view .LVU6394
4396:src/xeq.c     **** 			} else {
 24594              		.loc 1 4396 12 is_stmt 0 view .LVU6395
 24595 00a2 40F8503C 		str	r3, [r0, #-80]
 24596 00a6 52F8506C 		ldr	r6, [r2, #-80]
4395:src/xeq.c     **** 				beg[i] = L+1;
 24597              		.loc 1 4395 14 view .LVU6396
 24598 00aa 42F8285C 		str	r5, [r2, #-40]
4396:src/xeq.c     **** 			} else {
 24599              		.loc 1 4396 5 is_stmt 1 view .LVU6397
 24600 00ae A846     		mov	r8, r5
 24601 00b0 BDE7     		b	.L1765
 24602              	.LVL1904:
 24603              	.L1756:
4381:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 24604              		.loc 1 4381 5 view .LVU6398
4381:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 24605              		.loc 1 4381 8 is_stmt 0 view .LVU6399
 24606 00b2 A145     		cmp	r9, r4
 24607 00b4 DFDA     		bge	.L1758
4382:src/xeq.c     **** 				while (L<R) {
 24608              		.loc 1 4382 6 is_stmt 1 view .LVU6400
 24609 00b6 0098     		ldr	r0, [sp]
4382:src/xeq.c     **** 				while (L<R) {
 24610              		.loc 1 4382 21 is_stmt 0 view .LVU6401
 24611 00b8 09F10105 		add	r5, r9, #1
 24612              	.LVL1905:
4382:src/xeq.c     **** 				while (L<R) {
 24613              		.loc 1 4382 6 view .LVU6402
 24614 00bc 0119     		adds	r1, r0, r4
 24615 00be 4844     		add	r0, r0, r9
 24616 00c0 FFF7FEFF 		bl	copyreg_n
 24617              	.LVL1906:
4383:src/xeq.c     **** 					getRegister(&a, s + L);
 24618              		.loc 1 4383 11 is_stmt 1 view .LVU6403
 24619 00c4 A542     		cmp	r5, r4
 24620 00c6 03DB     		blt	.L1760
 24621 00c8 21E0     		b	.L1767
 24622              	.L1777:
4387:src/xeq.c     **** 				}
 24623              		.loc 1 4387 7 is_stmt 0 view .LVU6404
 24624 00ca 0135     		adds	r5, r5, #1
 24625              	.LVL1907:
4383:src/xeq.c     **** 					getRegister(&a, s + L);
 24626              		.loc 1 4383 11 is_stmt 1 view .LVU6405
 24627 00cc A542     		cmp	r5, r4
 24628 00ce D3D0     		beq	.L1766
 24629              	.L1760:
4384:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
 24630              		.loc 1 4384 6 view .LVU6406
 24631 00d0 0099     		ldr	r1, [sp]
 24632 00d2 0BA8     		add	r0, sp, #44
 24633 00d4 2944     		add	r1, r1, r5
ARM GAS  /tmp/ccQQPlfu.s 			page 638


 24634 00d6 FFF7FEFF 		bl	getRegister
 24635              	.LVL1908:
4385:src/xeq.c     **** 						break;
 24636              		.loc 1 4385 6 view .LVU6407
4385:src/xeq.c     **** 						break;
 24637              		.loc 1 4385 10 is_stmt 0 view .LVU6408
 24638 00da 0BA9     		add	r1, sp, #44
 24639 00dc 02A8     		add	r0, sp, #8
 24640 00de FFF7FEFF 		bl	dn_lt
 24641              	.LVL1909:
4387:src/xeq.c     **** 				}
 24642              		.loc 1 4387 6 is_stmt 1 view .LVU6409
4385:src/xeq.c     **** 						break;
 24643              		.loc 1 4385 9 is_stmt 0 view .LVU6410
 24644 00e2 0028     		cmp	r0, #0
 24645 00e4 F1D0     		beq	.L1777
4389:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
 24646              		.loc 1 4389 5 is_stmt 1 view .LVU6411
4390:src/xeq.c     **** 			}
 24647              		.loc 1 4390 6 view .LVU6412
 24648 00e6 0098     		ldr	r0, [sp]
 24649 00e8 4119     		adds	r1, r0, r5
 24650 00ea 2044     		add	r0, r0, r4
4390:src/xeq.c     **** 			}
 24651              		.loc 1 4390 21 is_stmt 0 view .LVU6413
 24652 00ec 013C     		subs	r4, r4, #1
 24653              	.LVL1910:
4390:src/xeq.c     **** 			}
 24654              		.loc 1 4390 6 view .LVU6414
 24655 00ee FFF7FEFF 		bl	copyreg_n
 24656              	.LVL1911:
4374:src/xeq.c     **** 				while (L<R) {
 24657              		.loc 1 4374 10 is_stmt 1 view .LVU6415
 24658 00f2 A542     		cmp	r5, r4
 24659 00f4 C0DA     		bge	.L1766
 24660 00f6 A946     		mov	r9, r5
4375:src/xeq.c     **** 					getRegister(&a, s + R);
 24661              		.loc 1 4375 11 view .LVU6416
 24662 00f8 B0E7     		b	.L1757
 24663              	.LVL1912:
 24664              	.L1762:
4398:src/xeq.c     **** 				end[i+1] = end[i];
 24665              		.loc 1 4398 5 view .LVU6417
4399:src/xeq.c     **** 				end[i] = L;
 24666              		.loc 1 4399 14 is_stmt 0 view .LVU6418
 24667 00fa 42F8288C 		str	r8, [r2, #-40]
4400:src/xeq.c     **** 			}
 24668              		.loc 1 4400 12 view .LVU6419
 24669 00fe 40F8285C 		str	r5, [r0, #-40]
 24670 0102 52F8288C 		ldr	r8, [r2, #-40]
4398:src/xeq.c     **** 				end[i+1] = end[i];
 24671              		.loc 1 4398 14 view .LVU6420
 24672 0106 42F8503C 		str	r3, [r2, #-80]
4399:src/xeq.c     **** 				end[i] = L;
 24673              		.loc 1 4399 5 is_stmt 1 view .LVU6421
4400:src/xeq.c     **** 			}
 24674              		.loc 1 4400 5 view .LVU6422
ARM GAS  /tmp/ccQQPlfu.s 			page 639


4402:src/xeq.c     **** 		} else
 24675              		.loc 1 4402 4 view .LVU6423
 24676              	.LVL1913:
4402:src/xeq.c     **** 		} else
 24677              		.loc 1 4402 4 is_stmt 0 view .LVU6424
 24678              	.LBE3367:
 24679              	.LBE3369:
4368:src/xeq.c     **** 		int L = beg[i];
 24680              		.loc 1 4368 8 is_stmt 1 view .LVU6425
 24681              	.LBB3370:
 24682              	.LBB3368:
4400:src/xeq.c     **** 			}
 24683              		.loc 1 4400 12 is_stmt 0 view .LVU6426
 24684 010a 1E46     		mov	r6, r3
 24685 010c 8FE7     		b	.L1765
 24686              	.LVL1914:
 24687              	.L1767:
4383:src/xeq.c     **** 					getRegister(&a, s + L);
 24688              		.loc 1 4383 11 view .LVU6427
 24689 010e A946     		mov	r9, r5
 24690              	.LVL1915:
4383:src/xeq.c     **** 					getRegister(&a, s + L);
 24691              		.loc 1 4383 11 view .LVU6428
 24692 0110 4D46     		mov	r5, r9
 24693              	.LVL1916:
4374:src/xeq.c     **** 				while (L<R) {
 24694              		.loc 1 4374 10 is_stmt 1 view .LVU6429
 24695 0112 B1E7     		b	.L1766
 24696              	.LBE3368:
 24697              	.LBE3370:
 24698              		.cfi_endproc
 24699              	.LFE232:
 24701              		.section	.text.reset_volatile_state,"ax",%progbits
 24702              		.align	1
 24703              		.p2align 2,,3
 24704              		.global	reset_volatile_state
 24705              		.syntax unified
 24706              		.thumb
 24707              		.thumb_func
 24708              		.fpu fpv4-sp-d16
 24710              	reset_volatile_state:
 24711              	.LFB234:
4441:src/xeq.c     **** 	// extern int IntMaxWindow;
 24712              		.loc 1 4441 33 view -0
 24713              		.cfi_startproc
 24714              		@ args = 0, pretend = 0, frame = 0
 24715              		@ frame_needed = 0, uses_anonymous_args = 0
 24716              		@ link register save eliminated.
4444:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24717              		.loc 1 4444 2 view .LVU6431
4444:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24718              		.loc 1 4444 16 is_stmt 0 view .LVU6432
 24719 0000 034B     		ldr	r3, .L1779
 24720 0002 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
4445:src/xeq.c     **** }
 24721              		.loc 1 4445 15 view .LVU6433
 24722 0004 0021     		movs	r1, #0
ARM GAS  /tmp/ccQQPlfu.s 			page 640


4444:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24723              		.loc 1 4444 16 view .LVU6434
 24724 0006 6FF3C502 		bfc	r2, #3, #3
 24725 000a 1A75     		strb	r2, [r3, #20]
4445:src/xeq.c     **** }
 24726              		.loc 1 4445 2 is_stmt 1 view .LVU6435
4445:src/xeq.c     **** }
 24727              		.loc 1 4445 15 is_stmt 0 view .LVU6436
 24728 000c 5974     		strb	r1, [r3, #17]
4446:src/xeq.c     **** 
 24729              		.loc 1 4446 1 view .LVU6437
 24730 000e 7047     		bx	lr
 24731              	.L1780:
 24732              		.align	2
 24733              	.L1779:
 24734 0010 00000000 		.word	StateWhileOn
 24735              		.cfi_endproc
 24736              	.LFE234:
 24738              		.section	.rodata.busy.str1.4,"aMS",%progbits,1
 24739              		.align	2
 24740              	.LC7:
 24741 0000 57616974 		.ascii	"Wait...\000"
 24741      2E2E2E00 
 24742              		.section	.text.busy,"ax",%progbits
 24743              		.align	1
 24744              		.p2align 2,,3
 24745              		.global	busy
 24746              		.syntax unified
 24747              		.thumb
 24748              		.thumb_func
 24749              		.fpu fpv4-sp-d16
 24751              	busy:
 24752              	.LFB235:
4453:src/xeq.c     **** 	/*
 24753              		.loc 1 4453 1 is_stmt 1 view -0
 24754              		.cfi_startproc
 24755              		@ args = 0, pretend = 0, frame = 0
 24756              		@ frame_needed = 0, uses_anonymous_args = 0
 24757              		@ link register save eliminated.
4457:src/xeq.c     **** 
 24758              		.loc 1 4457 12 view .LVU6439
4462:src/xeq.c     **** 
 24759              		.loc 1 4462 17 view .LVU6440
4467:src/xeq.c     **** 		Busy = 1;
 24760              		.loc 1 4467 2 view .LVU6441
4467:src/xeq.c     **** 		Busy = 1;
 24761              		.loc 1 4467 6 is_stmt 0 view .LVU6442
 24762 0000 054A     		ldr	r2, .L1784
4467:src/xeq.c     **** 		Busy = 1;
 24763              		.loc 1 4467 15 view .LVU6443
 24764 0002 064B     		ldr	r3, .L1784+4
4467:src/xeq.c     **** 		Busy = 1;
 24765              		.loc 1 4467 12 view .LVU6444
 24766 0004 1168     		ldr	r1, [r2]
 24767 0006 1B68     		ldr	r3, [r3]
 24768 0008 1943     		orrs	r1, r1, r3
 24769 000a 00D0     		beq	.L1783
ARM GAS  /tmp/ccQQPlfu.s 			page 641


4471:src/xeq.c     **** 
 24770              		.loc 1 4471 1 view .LVU6445
 24771 000c 7047     		bx	lr
 24772              	.L1783:
 24773              	.LBB3373:
 24774              	.LBI3373:
4452:src/xeq.c     **** {
 24775              		.loc 1 4452 6 is_stmt 1 view .LVU6446
 24776              	.LBB3374:
4468:src/xeq.c     **** 		message("Wait...", NULL);
 24777              		.loc 1 4468 3 view .LVU6447
4468:src/xeq.c     **** 		message("Wait...", NULL);
 24778              		.loc 1 4468 8 is_stmt 0 view .LVU6448
 24779 000e 0123     		movs	r3, #1
4469:src/xeq.c     **** 	}
 24780              		.loc 1 4469 3 view .LVU6449
 24781 0010 0348     		ldr	r0, .L1784+8
4468:src/xeq.c     **** 		message("Wait...", NULL);
 24782              		.loc 1 4468 8 view .LVU6450
 24783 0012 1360     		str	r3, [r2]
4469:src/xeq.c     **** 	}
 24784              		.loc 1 4469 3 is_stmt 1 view .LVU6451
 24785 0014 FFF7FEBF 		b	message
 24786              	.LVL1917:
 24787              	.L1785:
 24788              		.align	2
 24789              	.L1784:
 24790 0018 00000000 		.word	Busy
 24791 001c 00000000 		.word	Running
 24792 0020 00000000 		.word	.LC7
 24793              	.LBE3374:
 24794              	.LBE3373:
 24795              		.cfi_endproc
 24796              	.LFE235:
 24798              		.section	.text.intMonadic,"ax",%progbits
 24799              		.align	1
 24800              		.p2align 2,,3
 24801              		.global	intMonadic
 24802              		.syntax unified
 24803              		.thumb
 24804              		.thumb_func
 24805              		.fpu fpv4-sp-d16
 24807              	intMonadic:
 24808              	.LVL1918:
 24809              	.LFB239:
4549:src/xeq.c     **** 	int s;
 24810              		.loc 1 4549 43 view -0
 24811              		.cfi_startproc
 24812              		@ args = 0, pretend = 0, frame = 80
 24813              		@ frame_needed = 0, uses_anonymous_args = 0
4550:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
 24814              		.loc 1 4550 2 view .LVU6453
4551:src/xeq.c     **** 	decNumber rx, r;
 24815              		.loc 1 4551 2 view .LVU6454
4549:src/xeq.c     **** 	int s;
 24816              		.loc 1 4549 43 is_stmt 0 view .LVU6455
 24817 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/ccQQPlfu.s 			page 642


 24818              		.cfi_def_cfa_offset 12
 24819              		.cfi_offset 4, -12
 24820              		.cfi_offset 5, -8
 24821              		.cfi_offset 14, -4
 24822 0002 95B0     		sub	sp, sp, #84
 24823              		.cfi_def_cfa_offset 96
4551:src/xeq.c     **** 	decNumber rx, r;
 24824              		.loc 1 4551 30 view .LVU6456
 24825 0004 01AA     		add	r2, sp, #4
 24826 0006 FFF7FEFF 		bl	extract_value
 24827              	.LVL1919:
4553:src/xeq.c     **** 
 24828              		.loc 1 4553 19 view .LVU6457
 24829 000a 1E4A     		ldr	r2, .L1801
4555:src/xeq.c     **** 		bad_mode_error();
 24830              		.loc 1 4555 6 view .LVU6458
 24831 000c 1E4B     		ldr	r3, .L1801+4
4553:src/xeq.c     **** 
 24832              		.loc 1 4553 15 view .LVU6459
 24833 000e 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4555:src/xeq.c     **** 		bad_mode_error();
 24834              		.loc 1 4555 6 view .LVU6460
 24835 0010 04EB4404 		add	r4, r4, r4, lsl #1
 24836 0014 53F83440 		ldr	r4, [r3, r4, lsl #3]
 24837              	.LVL1920:
4552:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 24838              		.loc 1 4552 2 is_stmt 1 view .LVU6461
4553:src/xeq.c     **** 
 24839              		.loc 1 4553 2 view .LVU6462
4555:src/xeq.c     **** 		bad_mode_error();
 24840              		.loc 1 4555 2 view .LVU6463
4555:src/xeq.c     **** 		bad_mode_error();
 24841              		.loc 1 4555 5 is_stmt 0 view .LVU6464
 24842 0018 5CB1     		cbz	r4, .L1791
 24843              	.LBB3392:
4558:src/xeq.c     **** #ifndef REALBUILD
 24844              		.loc 1 4558 3 is_stmt 1 view .LVU6465
 24845              	.LVL1921:
4560:src/xeq.c     **** 			bad_mode_error();
 24846              		.loc 1 4560 3 view .LVU6466
 24847              	.LBB3393:
 24848              	.LBI3393:
4487:src/xeq.c     **** {
 24849              		.loc 1 4487 24 view .LVU6467
 24850              	.LBB3394:
4489:src/xeq.c     **** 	if (xp < xrom)
 24851              		.loc 1 4489 2 view .LVU6468
4490:src/xeq.c     **** 		return NULL;
 24852              		.loc 1 4490 5 is_stmt 0 view .LVU6469
 24853 001a 1C4B     		ldr	r3, .L1801+8
4489:src/xeq.c     **** 	if (xp < xrom)
 24854              		.loc 1 4489 59 view .LVU6470
 24855 001c 24F00102 		bic	r2, r4, #1
 24856              	.LVL1922:
4490:src/xeq.c     **** 		return NULL;
 24857              		.loc 1 4490 2 is_stmt 1 view .LVU6471
4490:src/xeq.c     **** 		return NULL;
ARM GAS  /tmp/ccQQPlfu.s 			page 643


 24858              		.loc 1 4490 5 is_stmt 0 view .LVU6472
 24859 0020 9A42     		cmp	r2, r3
 24860 0022 10D3     		bcc	.L1790
4494:src/xeq.c     **** 		return NULL;
 24861              		.loc 1 4494 2 is_stmt 1 view .LVU6473
4494:src/xeq.c     **** 		return NULL;
 24862              		.loc 1 4494 17 is_stmt 0 view .LVU6474
 24863 0024 1A4D     		ldr	r5, .L1801+12
 24864 0026 2D88     		ldrh	r5, [r5]
 24865 0028 03EB4503 		add	r3, r3, r5, lsl #1
4494:src/xeq.c     **** 		return NULL;
 24866              		.loc 1 4494 5 view .LVU6475
 24867 002c 9A42     		cmp	r2, r3
 24868 002e 0AD2     		bcs	.L1790
 24869              	.LVL1923:
4494:src/xeq.c     **** 		return NULL;
 24870              		.loc 1 4494 5 view .LVU6476
 24871              	.LBE3394:
 24872              	.LBE3393:
4560:src/xeq.c     **** 			bad_mode_error();
 24873              		.loc 1 4560 6 view .LVU6477
 24874 0030 4AB1     		cbz	r2, .L1790
 24875              	.LVL1924:
 24876              	.L1791:
4560:src/xeq.c     **** 			bad_mode_error();
 24877              		.loc 1 4560 6 view .LVU6478
 24878              	.LBE3392:
4556:src/xeq.c     **** 	else {
 24879              		.loc 1 4556 3 is_stmt 1 view .LVU6479
 24880              	.LBB3403:
 24881              	.LBI3403:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 24882              		.loc 1 569 6 view .LVU6480
 24883              	.LBE3403:
 570:src/xeq.c     **** }
 24884              		.loc 1 570 2 view .LVU6481
 24885              	.LBB3412:
 24886              	.LBB3404:
 24887              	.LBI3404:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24888              		.loc 1 540 5 view .LVU6482
 24889              	.LBB3405:
 541:src/xeq.c     **** 		Error = e;
 24890              		.loc 1 541 2 view .LVU6483
 541:src/xeq.c     **** 		Error = e;
 24891              		.loc 1 541 12 is_stmt 0 view .LVU6484
 24892 0032 184B     		ldr	r3, .L1801+16
 541:src/xeq.c     **** 		Error = e;
 24893              		.loc 1 541 5 view .LVU6485
 24894 0034 1A68     		ldr	r2, [r3]
 24895 0036 1AB1     		cbz	r2, .L1788
 24896              	.LVL1925:
 24897              	.L1799:
 24898              	.LBB3406:
 24899              	.LBB3407:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 24900              		.loc 1 543 3 is_stmt 1 view .LVU6486
ARM GAS  /tmp/ccQQPlfu.s 			page 644


 24901              	.LBE3407:
 24902              	.LBE3406:
 24903              	.LBE3405:
 24904              	.LBE3404:
 24905              	.LBE3412:
4574:src/xeq.c     **** }
 24906              		.loc 1 4574 9 is_stmt 0 view .LVU6487
 24907 0038 0020     		movs	r0, #0
 24908 003a 0146     		mov	r1, r0
4575:src/xeq.c     **** 
 24909              		.loc 1 4575 1 view .LVU6488
 24910 003c 15B0     		add	sp, sp, #84
 24911              		.cfi_remember_state
 24912              		.cfi_def_cfa_offset 12
 24913              		@ sp needed
 24914 003e 30BD     		pop	{r4, r5, pc}
 24915              	.LVL1926:
 24916              	.L1788:
 24917              		.cfi_restore_state
 24918              	.LBB3413:
 24919              	.LBB3411:
 24920              	.LBB3410:
 24921              	.LBB3409:
 24922              	.LBI3406:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24923              		.loc 1 540 5 is_stmt 1 view .LVU6489
 24924              	.LBB3408:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 24925              		.loc 1 542 3 view .LVU6490
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 24926              		.loc 1 542 9 is_stmt 0 view .LVU6491
 24927 0040 0D22     		movs	r2, #13
 24928 0042 1A60     		str	r2, [r3]
 24929 0044 F8E7     		b	.L1799
 24930              	.LVL1927:
 24931              	.L1790:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 24932              		.loc 1 542 9 view .LVU6492
 24933              	.LBE3408:
 24934              	.LBE3409:
 24935              	.LBE3410:
 24936              	.LBE3411:
 24937              	.LBE3413:
 24938              	.LBB3414:
4565:src/xeq.c     **** 			if (s)
 24939              		.loc 1 4565 4 is_stmt 1 view .LVU6493
 24940 0046 0246     		mov	r2, r0
 24941 0048 0B46     		mov	r3, r1
 24942 004a 02A8     		add	r0, sp, #8
 24943              	.LVL1928:
4565:src/xeq.c     **** 			if (s)
 24944              		.loc 1 4565 4 is_stmt 0 view .LVU6494
 24945 004c FFF7FEFF 		bl	ullint_to_dn
 24946              	.LVL1929:
4566:src/xeq.c     **** 				dn_minus(&rx, &rx);
 24947              		.loc 1 4566 4 is_stmt 1 view .LVU6495
4566:src/xeq.c     **** 				dn_minus(&rx, &rx);
ARM GAS  /tmp/ccQQPlfu.s 			page 645


 24948              		.loc 1 4566 7 is_stmt 0 view .LVU6496
 24949 0050 019B     		ldr	r3, [sp, #4]
 24950 0052 8BB9     		cbnz	r3, .L1800
 24951              	.L1792:
4568:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24952              		.loc 1 4568 4 is_stmt 1 view .LVU6497
4568:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24953              		.loc 1 4568 16 is_stmt 0 view .LVU6498
 24954 0054 02A9     		add	r1, sp, #8
 24955 0056 0BA8     		add	r0, sp, #44
 24956 0058 A047     		blx	r4
 24957              	.LVL1930:
4568:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24958              		.loc 1 4568 7 view .LVU6499
 24959 005a 40B9     		cbnz	r0, .L1793
4569:src/xeq.c     **** 			else
 24960              		.loc 1 4569 5 is_stmt 1 view .LVU6500
 24961              	.LVL1931:
 24962              	.LBB3395:
 24963              	.LBI3395:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24964              		.loc 1 540 5 view .LVU6501
 24965              	.LBB3396:
 541:src/xeq.c     **** 		Error = e;
 24966              		.loc 1 541 2 view .LVU6502
 541:src/xeq.c     **** 		Error = e;
 24967              		.loc 1 541 12 is_stmt 0 view .LVU6503
 24968 005c 0D4B     		ldr	r3, .L1801+16
 541:src/xeq.c     **** 		Error = e;
 24969              		.loc 1 541 5 view .LVU6504
 24970 005e 1A68     		ldr	r2, [r3]
 24971 0060 002A     		cmp	r2, #0
 24972 0062 E9D1     		bne	.L1799
 24973              	.LVL1932:
 24974              	.LBB3397:
 24975              	.LBI3397:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24976              		.loc 1 540 5 is_stmt 1 view .LVU6505
 24977              	.LBB3398:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 24978              		.loc 1 542 3 view .LVU6506
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 24979              		.loc 1 542 9 is_stmt 0 view .LVU6507
 24980 0064 0122     		movs	r2, #1
 24981              	.LBE3398:
 24982              	.LBE3397:
 24983              	.LBE3396:
 24984              	.LBE3395:
 24985              	.LBE3414:
4574:src/xeq.c     **** }
 24986              		.loc 1 4574 9 view .LVU6508
 24987 0066 0146     		mov	r1, r0
 24988              	.LBB3415:
 24989              	.LBB3402:
 24990              	.LBB3401:
 24991              	.LBB3400:
 24992              	.LBB3399:
ARM GAS  /tmp/ccQQPlfu.s 			page 646


 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 24993              		.loc 1 542 9 view .LVU6509
 24994 0068 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 24995              		.loc 1 543 3 is_stmt 1 view .LVU6510
 24996              	.LBE3399:
 24997              	.LBE3400:
 24998              	.LBE3401:
 24999              	.LBE3402:
 25000              	.LBE3415:
4575:src/xeq.c     **** 
 25001              		.loc 1 4575 1 is_stmt 0 view .LVU6511
 25002 006a 15B0     		add	sp, sp, #84
 25003              		.cfi_remember_state
 25004              		.cfi_def_cfa_offset 12
 25005              		@ sp needed
 25006 006c 30BD     		pop	{r4, r5, pc}
 25007              	.LVL1933:
 25008              	.L1793:
 25009              		.cfi_restore_state
 25010              	.LBB3416:
4571:src/xeq.c     **** 		}
 25011              		.loc 1 4571 5 is_stmt 1 view .LVU6512
4571:src/xeq.c     **** 		}
 25012              		.loc 1 4571 12 is_stmt 0 view .LVU6513
 25013 006e 0BA8     		add	r0, sp, #44
 25014 0070 FFF7FEFF 		bl	intResult
 25015              	.LVL1934:
 25016              	.LBE3416:
4575:src/xeq.c     **** 
 25017              		.loc 1 4575 1 view .LVU6514
 25018 0074 15B0     		add	sp, sp, #84
 25019              		.cfi_remember_state
 25020              		.cfi_def_cfa_offset 12
 25021              		@ sp needed
 25022 0076 30BD     		pop	{r4, r5, pc}
 25023              	.LVL1935:
 25024              	.L1800:
 25025              		.cfi_restore_state
 25026              	.LBB3417:
4567:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
 25027              		.loc 1 4567 5 is_stmt 1 view .LVU6515
 25028 0078 02A9     		add	r1, sp, #8
 25029 007a 0846     		mov	r0, r1
 25030 007c FFF7FEFF 		bl	dn_minus
 25031              	.LVL1936:
 25032 0080 E8E7     		b	.L1792
 25033              	.L1802:
 25034 0082 00BF     		.align	2
 25035              	.L1801:
 25036 0084 00000000 		.word	XeqOpCode
 25037 0088 00000000 		.word	monfuncs
 25038 008c 00000000 		.word	xrom
 25039 0090 00000000 		.word	xrom_size
 25040 0094 00000000 		.word	Error
 25041              	.LBE3417:
 25042              		.cfi_endproc
ARM GAS  /tmp/ccQQPlfu.s 			page 647


 25043              	.LFE239:
 25045              		.section	.text.intDyadic,"ax",%progbits
 25046              		.align	1
 25047              		.p2align 2,,3
 25048              		.global	intDyadic
 25049              		.syntax unified
 25050              		.thumb
 25051              		.thumb_func
 25052              		.fpu fpv4-sp-d16
 25054              	intDyadic:
 25055              	.LVL1937:
 25056              	.LFB240:
4580:src/xeq.c     **** 	int sx, sy;
 25057              		.loc 1 4580 59 view -0
 25058              		.cfi_startproc
 25059              		@ args = 0, pretend = 0, frame = 120
 25060              		@ frame_needed = 0, uses_anonymous_args = 0
4581:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 25061              		.loc 1 4581 2 view .LVU6517
4582:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25062              		.loc 1 4582 2 view .LVU6518
4580:src/xeq.c     **** 	int sx, sy;
 25063              		.loc 1 4580 59 is_stmt 0 view .LVU6519
 25064 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25065              		.cfi_def_cfa_offset 24
 25066              		.cfi_offset 4, -24
 25067              		.cfi_offset 5, -20
 25068              		.cfi_offset 6, -16
 25069              		.cfi_offset 7, -12
 25070              		.cfi_offset 8, -8
 25071              		.cfi_offset 14, -4
 25072 0004 9EB0     		sub	sp, sp, #120
 25073              		.cfi_def_cfa_offset 144
4580:src/xeq.c     **** 	int sx, sy;
 25074              		.loc 1 4580 59 view .LVU6520
 25075 0006 0546     		mov	r5, r0
 25076 0008 0C46     		mov	r4, r1
4582:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25077              		.loc 1 4582 30 view .LVU6521
 25078 000a 1046     		mov	r0, r2
 25079              	.LVL1938:
4582:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25080              		.loc 1 4582 30 view .LVU6522
 25081 000c 1946     		mov	r1, r3
 25082 000e 01AA     		add	r2, sp, #4
 25083              	.LVL1939:
4582:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25084              		.loc 1 4582 30 view .LVU6523
 25085 0010 FFF7FEFF 		bl	extract_value
 25086              	.LVL1940:
4583:src/xeq.c     **** 	decNumber rx, ry, r;
 25087              		.loc 1 4583 30 view .LVU6524
 25088 0014 02AA     		add	r2, sp, #8
4582:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25089              		.loc 1 4582 30 view .LVU6525
 25090 0016 0B46     		mov	r3, r1
 25091 0018 0646     		mov	r6, r0
ARM GAS  /tmp/ccQQPlfu.s 			page 648


4583:src/xeq.c     **** 	decNumber rx, ry, r;
 25092              		.loc 1 4583 30 view .LVU6526
 25093 001a 2146     		mov	r1, r4
 25094 001c 2846     		mov	r0, r5
4582:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25095              		.loc 1 4582 30 view .LVU6527
 25096 001e 1D46     		mov	r5, r3
 25097              	.LVL1941:
4583:src/xeq.c     **** 	decNumber rx, ry, r;
 25098              		.loc 1 4583 2 is_stmt 1 view .LVU6528
4583:src/xeq.c     **** 	decNumber rx, ry, r;
 25099              		.loc 1 4583 30 is_stmt 0 view .LVU6529
 25100 0020 FFF7FEFF 		bl	extract_value
 25101              	.LVL1942:
4585:src/xeq.c     **** 
 25102              		.loc 1 4585 19 view .LVU6530
 25103 0024 264A     		ldr	r2, .L1823
4587:src/xeq.c     **** 		bad_mode_error();
 25104              		.loc 1 4587 6 view .LVU6531
 25105 0026 274B     		ldr	r3, .L1823+4
4585:src/xeq.c     **** 
 25106              		.loc 1 4585 15 view .LVU6532
 25107 0028 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4587:src/xeq.c     **** 		bad_mode_error();
 25108              		.loc 1 4587 6 view .LVU6533
 25109 002a 04EB4404 		add	r4, r4, r4, lsl #1
 25110 002e 53F83440 		ldr	r4, [r3, r4, lsl #3]
 25111              	.LVL1943:
4584:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 25112              		.loc 1 4584 2 is_stmt 1 view .LVU6534
4585:src/xeq.c     **** 
 25113              		.loc 1 4585 2 view .LVU6535
4587:src/xeq.c     **** 		bad_mode_error();
 25114              		.loc 1 4587 2 view .LVU6536
4587:src/xeq.c     **** 		bad_mode_error();
 25115              		.loc 1 4587 5 is_stmt 0 view .LVU6537
 25116 0032 6CB1     		cbz	r4, .L1808
 25117              	.LBB3435:
 25118              	.LBB3436:
 25119              	.LBB3437:
4490:src/xeq.c     **** 		return NULL;
 25120              		.loc 1 4490 5 view .LVU6538
 25121 0034 244B     		ldr	r3, .L1823+8
4489:src/xeq.c     **** 	if (xp < xrom)
 25122              		.loc 1 4489 59 view .LVU6539
 25123 0036 24F00102 		bic	r2, r4, #1
 25124              	.LVL1944:
4490:src/xeq.c     **** 		return NULL;
 25125              		.loc 1 4490 5 view .LVU6540
 25126 003a 9A42     		cmp	r2, r3
 25127 003c 0746     		mov	r7, r0
 25128 003e 8846     		mov	r8, r1
 25129              	.LBE3437:
 25130              	.LBE3436:
4590:src/xeq.c     **** 
 25131              		.loc 1 4590 3 is_stmt 1 view .LVU6541
 25132              	.LVL1945:
ARM GAS  /tmp/ccQQPlfu.s 			page 649


4593:src/xeq.c     **** 			bad_mode_error();
 25133              		.loc 1 4593 3 view .LVU6542
 25134              	.LBB3439:
 25135              	.LBI3436:
4487:src/xeq.c     **** {
 25136              		.loc 1 4487 24 view .LVU6543
 25137              	.LBB3438:
4489:src/xeq.c     **** 	if (xp < xrom)
 25138              		.loc 1 4489 2 view .LVU6544
4490:src/xeq.c     **** 		return NULL;
 25139              		.loc 1 4490 2 view .LVU6545
4490:src/xeq.c     **** 		return NULL;
 25140              		.loc 1 4490 5 is_stmt 0 view .LVU6546
 25141 0040 11D3     		bcc	.L1807
4494:src/xeq.c     **** 		return NULL;
 25142              		.loc 1 4494 2 is_stmt 1 view .LVU6547
4494:src/xeq.c     **** 		return NULL;
 25143              		.loc 1 4494 17 is_stmt 0 view .LVU6548
 25144 0042 2249     		ldr	r1, .L1823+12
 25145              	.LVL1946:
4494:src/xeq.c     **** 		return NULL;
 25146              		.loc 1 4494 17 view .LVU6549
 25147 0044 0988     		ldrh	r1, [r1]
 25148 0046 03EB4103 		add	r3, r3, r1, lsl #1
4494:src/xeq.c     **** 		return NULL;
 25149              		.loc 1 4494 5 view .LVU6550
 25150 004a 9A42     		cmp	r2, r3
 25151 004c 0BD2     		bcs	.L1807
 25152              	.LVL1947:
4494:src/xeq.c     **** 		return NULL;
 25153              		.loc 1 4494 5 view .LVU6551
 25154              	.LBE3438:
 25155              	.LBE3439:
4593:src/xeq.c     **** 			bad_mode_error();
 25156              		.loc 1 4593 6 view .LVU6552
 25157 004e 52B1     		cbz	r2, .L1807
 25158              	.LVL1948:
 25159              	.L1808:
4593:src/xeq.c     **** 			bad_mode_error();
 25160              		.loc 1 4593 6 view .LVU6553
 25161              	.LBE3435:
4588:src/xeq.c     **** 	else {
 25162              		.loc 1 4588 3 is_stmt 1 view .LVU6554
 25163              	.LBB3448:
 25164              	.LBI3448:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 25165              		.loc 1 569 6 view .LVU6555
 25166              	.LBE3448:
 570:src/xeq.c     **** }
 25167              		.loc 1 570 2 view .LVU6556
 25168              	.LBB3457:
 25169              	.LBB3449:
 25170              	.LBI3449:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25171              		.loc 1 540 5 view .LVU6557
 25172              	.LBB3450:
 541:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccQQPlfu.s 			page 650


 25173              		.loc 1 541 2 view .LVU6558
 541:src/xeq.c     **** 		Error = e;
 25174              		.loc 1 541 12 is_stmt 0 view .LVU6559
 25175 0050 1F4B     		ldr	r3, .L1823+16
 541:src/xeq.c     **** 		Error = e;
 25176              		.loc 1 541 5 view .LVU6560
 25177 0052 1A68     		ldr	r2, [r3]
 25178 0054 22B1     		cbz	r2, .L1805
 25179              	.LVL1949:
 25180              	.L1820:
 25181              	.LBB3451:
 25182              	.LBB3452:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 25183              		.loc 1 543 3 is_stmt 1 view .LVU6561
 25184              	.LBE3452:
 25185              	.LBE3451:
 25186              	.LBE3450:
 25187              	.LBE3449:
 25188              	.LBE3457:
4607:src/xeq.c     **** }
 25189              		.loc 1 4607 9 is_stmt 0 view .LVU6562
 25190 0056 0020     		movs	r0, #0
 25191 0058 0146     		mov	r1, r0
4608:src/xeq.c     **** 
 25192              		.loc 1 4608 1 view .LVU6563
 25193 005a 1EB0     		add	sp, sp, #120
 25194              		.cfi_remember_state
 25195              		.cfi_def_cfa_offset 24
 25196              		@ sp needed
 25197 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25198              	.LVL1950:
 25199              	.L1805:
 25200              		.cfi_restore_state
 25201              	.LBB3458:
 25202              	.LBB3456:
 25203              	.LBB3455:
 25204              	.LBB3454:
 25205              	.LBI3451:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25206              		.loc 1 540 5 is_stmt 1 view .LVU6564
 25207              	.LBB3453:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25208              		.loc 1 542 3 view .LVU6565
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25209              		.loc 1 542 9 is_stmt 0 view .LVU6566
 25210 0060 0D22     		movs	r2, #13
 25211 0062 1A60     		str	r2, [r3]
 25212 0064 F7E7     		b	.L1820
 25213              	.LVL1951:
 25214              	.L1807:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25215              		.loc 1 542 9 view .LVU6567
 25216              	.LBE3453:
 25217              	.LBE3454:
 25218              	.LBE3455:
 25219              	.LBE3456:
 25220              	.LBE3458:
ARM GAS  /tmp/ccQQPlfu.s 			page 651


 25221              	.LBB3459:
4598:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25222              		.loc 1 4598 4 is_stmt 1 view .LVU6568
 25223 0066 2B46     		mov	r3, r5
 25224 0068 3246     		mov	r2, r6
 25225 006a 03A8     		add	r0, sp, #12
 25226              	.LVL1952:
4598:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25227              		.loc 1 4598 4 is_stmt 0 view .LVU6569
 25228 006c FFF7FEFF 		bl	ullint_to_dn
 25229              	.LVL1953:
4598:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25230              		.loc 1 4598 27 is_stmt 1 view .LVU6570
4598:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25231              		.loc 1 4598 30 is_stmt 0 view .LVU6571
 25232 0070 019B     		ldr	r3, [sp, #4]
 25233 0072 03BB     		cbnz	r3, .L1821
 25234              	.L1809:
4599:src/xeq.c     **** 
 25235              		.loc 1 4599 4 is_stmt 1 view .LVU6572
 25236 0074 4346     		mov	r3, r8
 25237 0076 3A46     		mov	r2, r7
 25238 0078 0CA8     		add	r0, sp, #48
 25239 007a FFF7FEFF 		bl	ullint_to_dn
 25240              	.LVL1954:
4599:src/xeq.c     **** 
 25241              		.loc 1 4599 27 view .LVU6573
4599:src/xeq.c     **** 
 25242              		.loc 1 4599 30 is_stmt 0 view .LVU6574
 25243 007e 029B     		ldr	r3, [sp, #8]
 25244 0080 A3B9     		cbnz	r3, .L1822
 25245              	.L1810:
4601:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25246              		.loc 1 4601 4 is_stmt 1 view .LVU6575
4601:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25247              		.loc 1 4601 16 is_stmt 0 view .LVU6576
 25248 0082 03AA     		add	r2, sp, #12
 25249 0084 0CA9     		add	r1, sp, #48
 25250 0086 15A8     		add	r0, sp, #84
 25251 0088 A047     		blx	r4
 25252              	.LVL1955:
4601:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25253              		.loc 1 4601 7 view .LVU6577
 25254 008a 48B9     		cbnz	r0, .L1811
4602:src/xeq.c     **** 			else
 25255              		.loc 1 4602 5 is_stmt 1 view .LVU6578
 25256              	.LVL1956:
 25257              	.LBB3440:
 25258              	.LBI3440:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25259              		.loc 1 540 5 view .LVU6579
 25260              	.LBB3441:
 541:src/xeq.c     **** 		Error = e;
 25261              		.loc 1 541 2 view .LVU6580
 541:src/xeq.c     **** 		Error = e;
 25262              		.loc 1 541 12 is_stmt 0 view .LVU6581
 25263 008c 104B     		ldr	r3, .L1823+16
ARM GAS  /tmp/ccQQPlfu.s 			page 652


 541:src/xeq.c     **** 		Error = e;
 25264              		.loc 1 541 5 view .LVU6582
 25265 008e 1A68     		ldr	r2, [r3]
 25266 0090 002A     		cmp	r2, #0
 25267 0092 E0D1     		bne	.L1820
 25268              	.LVL1957:
 25269              	.LBB3442:
 25270              	.LBI3442:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25271              		.loc 1 540 5 is_stmt 1 view .LVU6583
 25272              	.LBB3443:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25273              		.loc 1 542 3 view .LVU6584
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25274              		.loc 1 542 9 is_stmt 0 view .LVU6585
 25275 0094 0122     		movs	r2, #1
 25276              	.LBE3443:
 25277              	.LBE3442:
 25278              	.LBE3441:
 25279              	.LBE3440:
 25280              	.LBE3459:
4607:src/xeq.c     **** }
 25281              		.loc 1 4607 9 view .LVU6586
 25282 0096 0146     		mov	r1, r0
 25283              	.LBB3460:
 25284              	.LBB3447:
 25285              	.LBB3446:
 25286              	.LBB3445:
 25287              	.LBB3444:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25288              		.loc 1 542 9 view .LVU6587
 25289 0098 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 25290              		.loc 1 543 3 is_stmt 1 view .LVU6588
 25291              	.LBE3444:
 25292              	.LBE3445:
 25293              	.LBE3446:
 25294              	.LBE3447:
 25295              	.LBE3460:
4608:src/xeq.c     **** 
 25296              		.loc 1 4608 1 is_stmt 0 view .LVU6589
 25297 009a 1EB0     		add	sp, sp, #120
 25298              		.cfi_remember_state
 25299              		.cfi_def_cfa_offset 24
 25300              		@ sp needed
 25301 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25302              	.LVL1958:
 25303              	.L1811:
 25304              		.cfi_restore_state
 25305              	.LBB3461:
4604:src/xeq.c     **** 		}
 25306              		.loc 1 4604 5 is_stmt 1 view .LVU6590
4604:src/xeq.c     **** 		}
 25307              		.loc 1 4604 12 is_stmt 0 view .LVU6591
 25308 00a0 15A8     		add	r0, sp, #84
 25309 00a2 FFF7FEFF 		bl	intResult
 25310              	.LVL1959:
ARM GAS  /tmp/ccQQPlfu.s 			page 653


 25311              	.LBE3461:
4608:src/xeq.c     **** 
 25312              		.loc 1 4608 1 view .LVU6592
 25313 00a6 1EB0     		add	sp, sp, #120
 25314              		.cfi_remember_state
 25315              		.cfi_def_cfa_offset 24
 25316              		@ sp needed
 25317 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25318              	.LVL1960:
 25319              	.L1822:
 25320              		.cfi_restore_state
 25321              	.LBB3462:
4599:src/xeq.c     **** 
 25322              		.loc 1 4599 35 is_stmt 1 discriminator 1 view .LVU6593
 25323 00ac 0CA9     		add	r1, sp, #48
 25324 00ae 0846     		mov	r0, r1
 25325 00b0 FFF7FEFF 		bl	dn_minus
 25326              	.LVL1961:
 25327 00b4 E5E7     		b	.L1810
 25328              	.L1821:
4598:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25329              		.loc 1 4598 35 discriminator 1 view .LVU6594
 25330 00b6 03A9     		add	r1, sp, #12
 25331 00b8 0846     		mov	r0, r1
 25332 00ba FFF7FEFF 		bl	dn_minus
 25333              	.LVL1962:
 25334 00be D9E7     		b	.L1809
 25335              	.L1824:
 25336              		.align	2
 25337              	.L1823:
 25338 00c0 00000000 		.word	XeqOpCode
 25339 00c4 00000000 		.word	dyfuncs
 25340 00c8 00000000 		.word	xrom
 25341 00cc 00000000 		.word	xrom_size
 25342 00d0 00000000 		.word	Error
 25343              	.LBE3462:
 25344              		.cfi_endproc
 25345              	.LFE240:
 25347              		.section	.text.xeq_init_contexts,"ax",%progbits
 25348              		.align	1
 25349              		.p2align 2,,3
 25350              		.global	xeq_init_contexts
 25351              		.syntax unified
 25352              		.thumb
 25353              		.thumb_func
 25354              		.fpu fpv4-sp-d16
 25356              	xeq_init_contexts:
 25357              	.LFB257:
5613:src/xeq.c     **** 	/*
 25358              		.loc 1 5613 30 view -0
 25359              		.cfi_startproc
 25360              		@ args = 0, pretend = 0, frame = 0
 25361              		@ frame_needed = 0, uses_anonymous_args = 0
5617:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
 25362              		.loc 1 5617 2 view .LVU6596
5618:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25363              		.loc 1 5618 2 view .LVU6597
ARM GAS  /tmp/ccQQPlfu.s 			page 654


5613:src/xeq.c     **** 	/*
 25364              		.loc 1 5613 30 is_stmt 0 view .LVU6598
 25365 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 25366              		.cfi_def_cfa_offset 24
 25367              		.cfi_offset 3, -24
 25368              		.cfi_offset 4, -20
 25369              		.cfi_offset 5, -16
 25370              		.cfi_offset 6, -12
 25371              		.cfi_offset 7, -8
 25372              		.cfi_offset 14, -4
5618:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25373              		.loc 1 5618 17 view .LVU6599
 25374 0002 1D4B     		ldr	r3, .L1830
5621:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25375              		.loc 1 5621 13 view .LVU6600
 25376 0004 1D4F     		ldr	r7, .L1830+4
5618:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25377              		.loc 1 5618 17 view .LVU6601
 25378 0006 1A68     		ldr	r2, [r3]
5618:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25379              		.loc 1 5618 34 view .LVU6602
 25380 0008 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
5619:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25381              		.loc 1 5619 21 view .LVU6603
 25382 000c 92F8CF17 		ldrb	r1, [r2, #1999]	@ zero_extendqisi2
5621:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25383              		.loc 1 5621 36 view .LVU6604
 25384 0010 5088     		ldrh	r0, [r2, #2]
5623:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25385              		.loc 1 5623 34 view .LVU6605
 25386 0012 B2F9E247 		ldrsh	r4, [r2, #2018]
5618:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25387              		.loc 1 5618 59 view .LVU6606
 25388 0016 13F02003 		ands	r3, r3, #32
 25389 001a 18BF     		it	ne
 25390 001c 4623     		movne	r3, #70
5619:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25391              		.loc 1 5619 19 view .LVU6607
 25392 001e C1F16401 		rsb	r1, r1, #100
5618:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25393              		.loc 1 5618 59 view .LVU6608
 25394 0022 1E46     		mov	r6, r3
5619:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25395              		.loc 1 5619 36 view .LVU6609
 25396 0024 C3EB8103 		rsb	r3, r3, r1, lsl #2
5622:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25397              		.loc 1 5622 31 view .LVU6610
 25398 0028 03F20E21 		addw	r1, r3, #526
 25399 002c 89B2     		uxth	r1, r1
5623:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25400              		.loc 1 5623 21 view .LVU6611
 25401 002e 0D1A     		subs	r5, r1, r0
5620:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25402              		.loc 1 5620 22 view .LVU6612
 25403 0030 03F50573 		add	r3, r3, #532
5621:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25404              		.loc 1 5621 34 view .LVU6613
ARM GAS  /tmp/ccQQPlfu.s 			page 655


 25405 0034 181A     		subs	r0, r3, r0
5623:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25406              		.loc 1 5623 32 view .LVU6614
 25407 0036 2544     		add	r5, r5, r4
5620:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25408              		.loc 1 5620 11 view .LVU6615
 25409 0038 141D     		adds	r4, r2, #4
5621:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25410              		.loc 1 5621 13 view .LVU6616
 25411 003a 3860     		str	r0, [r7]
5620:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25412              		.loc 1 5620 22 view .LVU6617
 25413 003c 04EB4303 		add	r3, r4, r3, lsl #1
5618:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25414              		.loc 1 5618 15 view .LVU6618
 25415 0040 0F48     		ldr	r0, .L1830+8
5620:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25416              		.loc 1 5620 9 view .LVU6619
 25417 0042 104C     		ldr	r4, .L1830+12
5623:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25418              		.loc 1 5623 11 view .LVU6620
 25419 0044 104F     		ldr	r7, .L1830+16
5620:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25420              		.loc 1 5620 9 view .LVU6621
 25421 0046 2360     		str	r3, [r4]
5618:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25422              		.loc 1 5618 15 view .LVU6622
 25423 0048 0660     		str	r6, [r0]
5619:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25424              		.loc 1 5619 2 is_stmt 1 view .LVU6623
 25425              	.LVL1963:
5620:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25426              		.loc 1 5620 2 view .LVU6624
5621:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25427              		.loc 1 5621 2 view .LVU6625
5622:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25428              		.loc 1 5622 2 view .LVU6626
5622:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25429              		.loc 1 5622 10 is_stmt 0 view .LVU6627
 25430 004a 1180     		strh	r1, [r2]	@ movhi
5623:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25431              		.loc 1 5623 2 is_stmt 1 view .LVU6628
5624:src/xeq.c     **** 
 25432              		.loc 1 5624 14 is_stmt 0 view .LVU6629
 25433 004c 6420     		movs	r0, #100
5623:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25434              		.loc 1 5623 11 view .LVU6630
 25435 004e 3D60     		str	r5, [r7]
5624:src/xeq.c     **** 
 25436              		.loc 1 5624 2 is_stmt 1 view .LVU6631
5624:src/xeq.c     **** 
 25437              		.loc 1 5624 14 is_stmt 0 view .LVU6632
 25438 0050 FFF7FEFF 		bl	get_reg_n
 25439              	.LVL1964:
5630:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25440              		.loc 1 5630 2 view .LVU6633
 25441 0054 0D4C     		ldr	r4, .L1830+20
ARM GAS  /tmp/ccQQPlfu.s 			page 656


5624:src/xeq.c     **** 
 25442              		.loc 1 5624 12 view .LVU6634
 25443 0056 0E4B     		ldr	r3, .L1830+24
5624:src/xeq.c     **** 
 25444              		.loc 1 5624 14 view .LVU6635
 25445 0058 0246     		mov	r2, r0
5630:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25446              		.loc 1 5630 2 view .LVU6636
 25447 005a 0021     		movs	r1, #0
 25448 005c 2046     		mov	r0, r4
5624:src/xeq.c     **** 
 25449              		.loc 1 5624 12 view .LVU6637
 25450 005e 1A60     		str	r2, [r3]
5630:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25451              		.loc 1 5630 2 is_stmt 1 view .LVU6638
 25452 0060 FFF7FEFF 		bl	decContextDefault
 25453              	.LVL1965:
5631:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25454              		.loc 1 5631 2 view .LVU6639
5631:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25455              		.loc 1 5631 13 is_stmt 0 view .LVU6640
 25456 0064 2723     		movs	r3, #39
5632:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 25457              		.loc 1 5632 10 view .LVU6641
 25458 0066 0B49     		ldr	r1, .L1830+28
5633:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 25459              		.loc 1 5633 10 view .LVU6642
 25460 0068 0B4A     		ldr	r2, .L1830+32
5631:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25461              		.loc 1 5631 13 view .LVU6643
 25462 006a 2360     		str	r3, [r4]
5632:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 25463              		.loc 1 5632 2 is_stmt 1 view .LVU6644
5634:src/xeq.c     **** }
 25464              		.loc 1 5634 12 is_stmt 0 view .LVU6645
 25465 006c 0323     		movs	r3, #3
 25466 006e 2373     		strb	r3, [r4, #12]
5633:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 25467              		.loc 1 5633 10 view .LVU6646
 25468 0070 C4E90112 		strd	r1, r2, [r4, #4]
5634:src/xeq.c     **** }
 25469              		.loc 1 5634 2 is_stmt 1 view .LVU6647
5635:src/xeq.c     **** 
 25470              		.loc 1 5635 1 is_stmt 0 view .LVU6648
 25471 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 25472              	.L1831:
 25473 0076 00BF     		.align	2
 25474              	.L1830:
 25475 0078 00000000 		.word	main_ram
 25476 007c 00000000 		.word	RetStkSize
 25477 0080 00000000 		.word	SizeStatRegs
 25478 0084 00000000 		.word	RetStk
 25479 0088 00000000 		.word	ProgFree
 25480 008c 00000000 		.word	Ctx
 25481 0090 00000000 		.word	StackBase
 25482 0094 3F420F00 		.word	999999
 25483 0098 C1BDF0FF 		.word	-999999
ARM GAS  /tmp/ccQQPlfu.s 			page 657


 25484              		.cfi_endproc
 25485              	.LFE257:
 25487              		.section	.text.not_running,"ax",%progbits
 25488              		.align	1
 25489              		.p2align 2,,3
 25490              		.global	not_running
 25491              		.syntax unified
 25492              		.thumb
 25493              		.thumb_func
 25494              		.fpu fpv4-sp-d16
 25496              	not_running:
 25497              	.LFB258:
5783:src/xeq.c     **** 	if ( Running ) {
 25498              		.loc 1 5783 23 is_stmt 1 view -0
 25499              		.cfi_startproc
 25500              		@ args = 0, pretend = 0, frame = 0
 25501              		@ frame_needed = 0, uses_anonymous_args = 0
 25502              		@ link register save eliminated.
5784:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25503              		.loc 1 5784 2 view .LVU6650
5784:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25504              		.loc 1 5784 7 is_stmt 0 view .LVU6651
 25505 0000 064B     		ldr	r3, .L1837
5784:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25506              		.loc 1 5784 5 view .LVU6652
 25507 0002 1B68     		ldr	r3, [r3]
 25508 0004 0BB9     		cbnz	r3, .L1836
5788:src/xeq.c     **** }
 25509              		.loc 1 5788 9 view .LVU6653
 25510 0006 0120     		movs	r0, #1
 25511 0008 7047     		bx	lr
 25512              	.L1836:
5785:src/xeq.c     **** 		return 0;
 25513              		.loc 1 5785 3 is_stmt 1 view .LVU6654
 25514              	.LVL1966:
 25515              	.LBB3467:
 25516              	.LBI3467:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25517              		.loc 1 540 5 view .LVU6655
 25518              	.LBB3468:
 541:src/xeq.c     **** 		Error = e;
 25519              		.loc 1 541 2 view .LVU6656
 541:src/xeq.c     **** 		Error = e;
 25520              		.loc 1 541 12 is_stmt 0 view .LVU6657
 25521 000a 054B     		ldr	r3, .L1837+4
 25522 000c 1868     		ldr	r0, [r3]
 541:src/xeq.c     **** 		Error = e;
 25523              		.loc 1 541 5 view .LVU6658
 25524 000e 10B9     		cbnz	r0, .L1835
 25525              	.LVL1967:
 25526              	.LBB3469:
 25527              	.LBI3469:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25528              		.loc 1 540 5 is_stmt 1 view .LVU6659
 25529              	.LBB3470:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25530              		.loc 1 542 3 view .LVU6660
ARM GAS  /tmp/ccQQPlfu.s 			page 658


 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25531              		.loc 1 542 9 is_stmt 0 view .LVU6661
 25532 0010 0722     		movs	r2, #7
 25533 0012 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 25534              		.loc 1 543 3 is_stmt 1 view .LVU6662
 25535 0014 7047     		bx	lr
 25536              	.LVL1968:
 25537              	.L1835:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 25538              		.loc 1 543 3 is_stmt 0 view .LVU6663
 25539              	.LBE3470:
 25540              	.LBE3469:
 25541              	.LBE3468:
 25542              	.LBE3467:
5786:src/xeq.c     **** 	}
 25543              		.loc 1 5786 10 view .LVU6664
 25544 0016 0020     		movs	r0, #0
 25545              	.LVL1969:
5789:src/xeq.c     **** 
 25546              		.loc 1 5789 1 view .LVU6665
 25547 0018 7047     		bx	lr
 25548              	.L1838:
 25549 001a 00BF     		.align	2
 25550              	.L1837:
 25551 001c 00000000 		.word	Running
 25552 0020 00000000 		.word	Error
 25553              		.cfi_endproc
 25554              	.LFE258:
 25556              		.section	.text.set_running_off_sst,"ax",%progbits
 25557              		.align	1
 25558              		.p2align 2,,3
 25559              		.global	set_running_off_sst
 25560              		.syntax unified
 25561              		.thumb
 25562              		.thumb_func
 25563              		.fpu fpv4-sp-d16
 25565              	set_running_off_sst:
 25566              	.LFB259:
5794:src/xeq.c     **** 	Running = 0;
 25567              		.loc 1 5794 28 is_stmt 1 view -0
 25568              		.cfi_startproc
 25569              		@ args = 0, pretend = 0, frame = 0
 25570              		@ frame_needed = 0, uses_anonymous_args = 0
 25571              		@ link register save eliminated.
5795:src/xeq.c     **** }
 25572              		.loc 1 5795 2 view .LVU6667
5795:src/xeq.c     **** }
 25573              		.loc 1 5795 10 is_stmt 0 view .LVU6668
 25574 0000 014B     		ldr	r3, .L1840
 25575 0002 0022     		movs	r2, #0
 25576 0004 1A60     		str	r2, [r3]
5796:src/xeq.c     **** 
 25577              		.loc 1 5796 1 view .LVU6669
 25578 0006 7047     		bx	lr
 25579              	.L1841:
 25580              		.align	2
ARM GAS  /tmp/ccQQPlfu.s 			page 659


 25581              	.L1840:
 25582 0008 00000000 		.word	Running
 25583              		.cfi_endproc
 25584              	.LFE259:
 25586              		.section	.text.set_running_on_sst,"ax",%progbits
 25587              		.align	1
 25588              		.p2align 2,,3
 25589              		.global	set_running_on_sst
 25590              		.syntax unified
 25591              		.thumb
 25592              		.thumb_func
 25593              		.fpu fpv4-sp-d16
 25595              	set_running_on_sst:
 25596              	.LFB260:
5798:src/xeq.c     **** 	Running = 1;
 25597              		.loc 1 5798 27 is_stmt 1 view -0
 25598              		.cfi_startproc
 25599              		@ args = 0, pretend = 0, frame = 0
 25600              		@ frame_needed = 0, uses_anonymous_args = 0
 25601              		@ link register save eliminated.
5799:src/xeq.c     **** }
 25602              		.loc 1 5799 2 view .LVU6671
5799:src/xeq.c     **** }
 25603              		.loc 1 5799 10 is_stmt 0 view .LVU6672
 25604 0000 014B     		ldr	r3, .L1843
 25605 0002 0122     		movs	r2, #1
 25606 0004 1A60     		str	r2, [r3]
5800:src/xeq.c     **** 
 25607              		.loc 1 5800 1 view .LVU6673
 25608 0006 7047     		bx	lr
 25609              	.L1844:
 25610              		.align	2
 25611              	.L1843:
 25612 0008 00000000 		.word	Running
 25613              		.cfi_endproc
 25614              	.LFE260:
 25616              		.section	.text.set_running_off,"ax",%progbits
 25617              		.align	1
 25618              		.p2align 2,,3
 25619              		.global	set_running_off
 25620              		.syntax unified
 25621              		.thumb
 25622              		.thumb_func
 25623              		.fpu fpv4-sp-d16
 25625              	set_running_off:
 25626              	.LFB261:
5802:src/xeq.c     **** 	set_running_off_sst();
 25627              		.loc 1 5802 24 is_stmt 1 view -0
 25628              		.cfi_startproc
 25629              		@ args = 0, pretend = 0, frame = 0
 25630              		@ frame_needed = 0, uses_anonymous_args = 0
 25631              		@ link register save eliminated.
5803:src/xeq.c     **** 	State.entryp = 0;
 25632              		.loc 1 5803 2 view .LVU6675
 25633              	.LBB3471:
 25634              	.LBI3471:
5794:src/xeq.c     **** 	Running = 0;
ARM GAS  /tmp/ccQQPlfu.s 			page 660


 25635              		.loc 1 5794 6 view .LVU6676
 25636              	.LBB3472:
5795:src/xeq.c     **** }
 25637              		.loc 1 5795 2 view .LVU6677
 25638              	.LBE3472:
 25639              	.LBE3471:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 25640              		.loc 1 5804 15 is_stmt 0 view .LVU6678
 25641 0000 064B     		ldr	r3, .L1846
 25642              	.LBB3475:
 25643              	.LBB3473:
5795:src/xeq.c     **** }
 25644              		.loc 1 5795 10 view .LVU6679
 25645 0002 074A     		ldr	r2, .L1846+4
 25646              	.LBE3473:
 25647              	.LBE3475:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 25648              		.loc 1 5804 15 view .LVU6680
 25649 0004 1B68     		ldr	r3, [r3]
 25650              	.LBB3476:
 25651              	.LBB3474:
5795:src/xeq.c     **** }
 25652              		.loc 1 5795 10 view .LVU6681
 25653 0006 0021     		movs	r1, #0
 25654 0008 1160     		str	r1, [r2]
 25655              	.LBE3474:
 25656              	.LBE3476:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 25657              		.loc 1 5804 2 is_stmt 1 view .LVU6682
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 25658              		.loc 1 5804 15 is_stmt 0 view .LVU6683
 25659 000a 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 25660 000e 61F30412 		bfi	r2, r1, #4, #1
 25661 0012 83F8DD27 		strb	r2, [r3, #2013]
 25662              		.loc 1 5805 2 is_stmt 1 view .LVU6684
 25663 0016 8A20     		movs	r0, #138
 25664 0018 FFF7FEBF 		b	dot
 25665              	.LVL1970:
 25666              	.L1847:
 25667              		.align	2
 25668              	.L1846:
 25669 001c 00000000 		.word	main_ram
 25670 0020 00000000 		.word	Running
 25671              		.cfi_endproc
 25672              	.LFE261:
 25674              		.section	.text.set_running_on,"ax",%progbits
 25675              		.align	1
 25676              		.p2align 2,,3
 25677              		.global	set_running_on
 25678              		.syntax unified
 25679              		.thumb
 25680              		.thumb_func
 25681              		.fpu fpv4-sp-d16
 25683              	set_running_on:
 25684              	.LFB262:
5806:src/xeq.c     **** }
5807:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 661


5808:src/xeq.c     **** void set_running_on() {
 25685              		.loc 1 5808 23 view -0
 25686              		.cfi_startproc
 25687              		@ args = 0, pretend = 0, frame = 0
 25688              		@ frame_needed = 0, uses_anonymous_args = 0
5809:src/xeq.c     **** 	update_speed(0);
 25689              		.loc 1 5809 17 view .LVU6686
5810:src/xeq.c     **** 	GoFast = 1;
 25690              		.loc 1 5810 2 view .LVU6687
5808:src/xeq.c     **** 	update_speed(0);
 25691              		.loc 1 5808 23 is_stmt 0 view .LVU6688
 25692 0000 38B5     		push	{r3, r4, r5, lr}
 25693              		.cfi_def_cfa_offset 16
 25694              		.cfi_offset 3, -16
 25695              		.cfi_offset 4, -12
 25696              		.cfi_offset 5, -8
 25697              		.cfi_offset 14, -4
 25698              	.LBB3477:
 25699              	.LBB3478:
 186:src/xeq.c     **** }
 25700              		.loc 1 186 9 view .LVU6689
 25701 0002 0C4B     		ldr	r3, .L1854
 25702              	.LBE3478:
 25703              	.LBE3477:
 25704              		.loc 1 5810 9 view .LVU6690
 25705 0004 0C4D     		ldr	r5, .L1854+4
 25706              	.LBB3482:
 25707              	.LBB3479:
 186:src/xeq.c     **** }
 25708              		.loc 1 186 9 view .LVU6691
 25709 0006 1B68     		ldr	r3, [r3]
 25710              	.LBE3479:
 25711              	.LBE3482:
 25712              	.LBB3483:
 25713              	.LBB3484:
5799:src/xeq.c     **** }
 25714              		.loc 1 5799 10 view .LVU6692
 25715 0008 0C4C     		ldr	r4, .L1854+8
 25716              	.LBE3484:
 25717              	.LBE3483:
 25718              	.LBB3486:
 25719              	.LBB3480:
 186:src/xeq.c     **** }
 25720              		.loc 1 186 9 view .LVU6693
 25721 000a B3F8E037 		ldrh	r3, [r3, #2016]
 25722              	.LBE3480:
 25723              	.LBE3486:
5811:src/xeq.c     **** 	set_running_on_sst();
5812:src/xeq.c     **** 	LastKey = 0;
 25724              		.loc 1 5812 10 view .LVU6694
 25725 000e 0C49     		ldr	r1, .L1854+12
5813:src/xeq.c     **** 	if (!is_xrom())
 25726              		.loc 1 5813 5 view .LVU6695
 25727 0010 9B0B     		lsrs	r3, r3, #14
5810:src/xeq.c     **** 	set_running_on_sst();
 25728              		.loc 1 5810 9 view .LVU6696
 25729 0012 0122     		movs	r2, #1
ARM GAS  /tmp/ccQQPlfu.s 			page 662


5812:src/xeq.c     **** 	if (!is_xrom())
 25730              		.loc 1 5812 10 view .LVU6697
 25731 0014 0020     		movs	r0, #0
 25732              		.loc 1 5813 5 view .LVU6698
 25733 0016 032B     		cmp	r3, #3
5810:src/xeq.c     **** 	set_running_on_sst();
 25734              		.loc 1 5810 9 view .LVU6699
 25735 0018 2A60     		str	r2, [r5]
5811:src/xeq.c     **** 	LastKey = 0;
 25736              		.loc 1 5811 2 is_stmt 1 view .LVU6700
 25737              	.LBB3487:
 25738              	.LBI3483:
5798:src/xeq.c     **** 	Running = 1;
 25739              		.loc 1 5798 6 view .LVU6701
 25740              	.LBB3485:
5799:src/xeq.c     **** }
 25741              		.loc 1 5799 2 view .LVU6702
5799:src/xeq.c     **** }
 25742              		.loc 1 5799 10 is_stmt 0 view .LVU6703
 25743 001a 2260     		str	r2, [r4]
 25744              	.LBE3485:
 25745              	.LBE3487:
5812:src/xeq.c     **** 	if (!is_xrom())
 25746              		.loc 1 5812 2 is_stmt 1 view .LVU6704
5812:src/xeq.c     **** 	if (!is_xrom())
 25747              		.loc 1 5812 10 is_stmt 0 view .LVU6705
 25748 001c C874     		strb	r0, [r1, #19]
 25749              		.loc 1 5813 2 is_stmt 1 view .LVU6706
 25750              	.LBB3488:
 25751              	.LBI3477:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 25752              		.loc 1 185 5 view .LVU6707
 25753              	.LBB3481:
 186:src/xeq.c     **** }
 25754              		.loc 1 186 2 view .LVU6708
 25755              	.LBE3481:
 25756              	.LBE3488:
 25757              		.loc 1 5813 5 is_stmt 0 view .LVU6709
 25758 001e 01D0     		beq	.L1849
5814:src/xeq.c     **** 		error_message(ERR_NONE);
 25759              		.loc 1 5814 3 is_stmt 1 view .LVU6710
 25760 0020 FFF7FEFF 		bl	error_message
 25761              	.LVL1971:
 25762              	.L1849:
5815:src/xeq.c     **** 	dot(BEG, 0);
 25763              		.loc 1 5815 2 view .LVU6711
 25764 0024 0021     		movs	r1, #0
 25765 0026 8820     		movs	r0, #136
 25766 0028 FFF7FEFF 		bl	dot
 25767              	.LVL1972:
5816:src/xeq.c     **** 	finish_display(); // BEG
 25768              		.loc 1 5816 2 view .LVU6712
5817:src/xeq.c     **** }
 25769              		.loc 1 5817 1 is_stmt 0 view .LVU6713
 25770 002c BDE83840 		pop	{r3, r4, r5, lr}
 25771              		.cfi_restore 14
 25772              		.cfi_restore 5
ARM GAS  /tmp/ccQQPlfu.s 			page 663


 25773              		.cfi_restore 4
 25774              		.cfi_restore 3
 25775              		.cfi_def_cfa_offset 0
5816:src/xeq.c     **** 	finish_display(); // BEG
 25776              		.loc 1 5816 2 view .LVU6714
 25777 0030 FFF7FEBF 		b	finish_display
 25778              	.LVL1973:
 25779              	.L1855:
 25780              		.align	2
 25781              	.L1854:
 25782 0034 00000000 		.word	main_ram
 25783 0038 00000000 		.word	GoFast
 25784 003c 00000000 		.word	Running
 25785 0040 00000000 		.word	StateWhileOn
 25786              		.cfi_endproc
 25787              	.LFE262:
 25789              		.section	.text.gsbgto,"ax",%progbits
 25790              		.align	1
 25791              		.p2align 2,,3
 25792              		.syntax unified
 25793              		.thumb
 25794              		.thumb_func
 25795              		.fpu fpv4-sp-d16
 25797              	gsbgto:
 25798              	.LVL1974:
 25799              	.LFB153:
2216:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25800              		.loc 1 2216 66 is_stmt 1 view -0
 25801              		.cfi_startproc
 25802              		@ args = 0, pretend = 0, frame = 0
 25803              		@ frame_needed = 0, uses_anonymous_args = 0
2217:src/xeq.c     **** 	raw_set_pc(pc);
 25804              		.loc 1 2217 2 view .LVU6716
2216:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25805              		.loc 1 2216 66 is_stmt 0 view .LVU6717
 25806 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25807              		.cfi_def_cfa_offset 24
 25808              		.cfi_offset 4, -24
 25809              		.cfi_offset 5, -20
 25810              		.cfi_offset 6, -16
 25811              		.cfi_offset 7, -12
 25812              		.cfi_offset 8, -8
 25813              		.cfi_offset 14, -4
2217:src/xeq.c     **** 	raw_set_pc(pc);
 25814              		.loc 1 2217 39 view .LVU6718
 25815 0004 214F     		ldr	r7, .L1867
 25816 0006 3B68     		ldr	r3, [r7]
2216:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25817              		.loc 1 2216 66 view .LVU6719
 25818 0008 0446     		mov	r4, r0
 25819 000a 0D46     		mov	r5, r1
 25820              	.LBB3497:
 25821              	.LBB3498:
 283:src/xeq.c     **** 	update_program_bounds(0);
 25822              		.loc 1 283 11 view .LVU6720
 25823 000c A3F8E007 		strh	r0, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 664


 25824              		.loc 1 284 2 view .LVU6721
 25825 0010 0020     		movs	r0, #0
 25826              	.LVL1975:
 284:src/xeq.c     **** }
 25827              		.loc 1 284 2 view .LVU6722
 25828              	.LBE3498:
 25829              	.LBE3497:
2217:src/xeq.c     **** 	raw_set_pc(pc);
 25830              		.loc 1 2217 27 view .LVU6723
 25831 0012 B3F8EC87 		ldrh	r8, [r3, #2028]
 25832              	.LVL1976:
2218:src/xeq.c     **** 	if (gsb) {
 25833              		.loc 1 2218 2 is_stmt 1 view .LVU6724
 25834              	.LBB3501:
 25835              	.LBI3497:
 282:src/xeq.c     **** 	State.pc = pc;
 25836              		.loc 1 282 13 view .LVU6725
 25837              	.LBB3499:
 283:src/xeq.c     **** 	update_program_bounds(0);
 25838              		.loc 1 283 2 view .LVU6726
 284:src/xeq.c     **** }
 25839              		.loc 1 284 2 view .LVU6727
 25840              	.LBE3499:
 25841              	.LBE3501:
2216:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25842              		.loc 1 2216 66 is_stmt 0 view .LVU6728
 25843 0016 1646     		mov	r6, r2
 25844              	.LBB3502:
 25845              	.LBB3500:
 284:src/xeq.c     **** }
 25846              		.loc 1 284 2 view .LVU6729
 25847 0018 FFF7FEFF 		bl	update_program_bounds
 25848              	.LVL1977:
 284:src/xeq.c     **** }
 25849              		.loc 1 284 2 view .LVU6730
 25850              	.LBE3500:
 25851              	.LBE3502:
2219:src/xeq.c     **** 		if (!Running && !XromRunning) {
 25852              		.loc 1 2219 2 is_stmt 1 view .LVU6731
2219:src/xeq.c     **** 		if (!Running && !XromRunning) {
 25853              		.loc 1 2219 5 is_stmt 0 view .LVU6732
 25854 001c D5B1     		cbz	r5, .L1856
2220:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25855              		.loc 1 2220 3 is_stmt 1 view .LVU6733
2220:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25856              		.loc 1 2220 7 is_stmt 0 view .LVU6734
 25857 001e 1C4B     		ldr	r3, .L1867+4
2220:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25858              		.loc 1 2220 19 view .LVU6735
 25859 0020 1C4A     		ldr	r2, .L1867+8
2220:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25860              		.loc 1 2220 16 view .LVU6736
 25861 0022 1B68     		ldr	r3, [r3]
 25862 0024 1268     		ldr	r2, [r2]
 25863 0026 1343     		orrs	r3, r3, r2
 25864              	.LBB3503:
 25865              	.LBB3504:
ARM GAS  /tmp/ccQQPlfu.s 			page 665


1601:src/xeq.c     **** }
 25866              		.loc 1 1601 14 view .LVU6737
 25867 0028 3A68     		ldr	r2, [r7]
 25868              	.LBE3504:
 25869              	.LBE3503:
2220:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25870              		.loc 1 2220 16 view .LVU6738
 25871 002a 1FD0     		beq	.L1859
 25872              	.LVL1978:
 25873              	.L1860:
2228:src/xeq.c     **** 			// Stack is full
 25874              		.loc 1 2228 3 is_stmt 1 view .LVU6739
2228:src/xeq.c     **** 			// Stack is full
 25875              		.loc 1 2228 36 is_stmt 0 view .LVU6740
 25876 002c 1A49     		ldr	r1, .L1867+12
2228:src/xeq.c     **** 			// Stack is full
 25877              		.loc 1 2228 8 view .LVU6741
 25878 002e B2F9E237 		ldrsh	r3, [r2, #2018]
2228:src/xeq.c     **** 			// Stack is full
 25879              		.loc 1 2228 58 view .LVU6742
 25880 0032 91F90110 		ldrsb	r1, [r1, #1]
 25881 0036 0029     		cmp	r1, #0
 25882 0038 A4BF     		itt	ge
 25883 003a 1849     		ldrge	r1, .L1867+16
 25884 003c 0968     		ldrge	r1, [r1]
2228:src/xeq.c     **** 			// Stack is full
 25885              		.loc 1 2228 7 view .LVU6743
 25886 003e C3F10000 		rsb	r0, r3, #0
2228:src/xeq.c     **** 			// Stack is full
 25887              		.loc 1 2228 58 view .LVU6744
 25888 0042 B8BF     		it	lt
 25889 0044 8821     		movlt	r1, #136
2228:src/xeq.c     **** 			// Stack is full
 25890              		.loc 1 2228 6 view .LVU6745
 25891 0046 8842     		cmp	r0, r1
 25892 0048 06DB     		blt	.L1863
2230:src/xeq.c     **** 			// clrretstk();
 25893              		.loc 1 2230 4 is_stmt 1 view .LVU6746
 25894              	.LVL1979:
 25895              	.LBB3506:
 25896              	.LBI3506:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25897              		.loc 1 540 5 view .LVU6747
 25898              	.LBB3507:
 541:src/xeq.c     **** 		Error = e;
 25899              		.loc 1 541 2 view .LVU6748
 541:src/xeq.c     **** 		Error = e;
 25900              		.loc 1 541 12 is_stmt 0 view .LVU6749
 25901 004a 154B     		ldr	r3, .L1867+20
 541:src/xeq.c     **** 		Error = e;
 25902              		.loc 1 541 5 view .LVU6750
 25903 004c 1A68     		ldr	r2, [r3]
 25904 004e 0AB9     		cbnz	r2, .L1856
 25905              	.LVL1980:
 25906              	.LBB3508:
 25907              	.LBI3508:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/ccQQPlfu.s 			page 666


 25908              		.loc 1 540 5 is_stmt 1 view .LVU6751
 25909              	.LBB3509:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25910              		.loc 1 542 3 view .LVU6752
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25911              		.loc 1 542 9 is_stmt 0 view .LVU6753
 25912 0050 0B22     		movs	r2, #11
 25913 0052 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 25914              		.loc 1 543 3 is_stmt 1 view .LVU6754
 25915              	.LVL1981:
 25916              	.L1856:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 25917              		.loc 1 543 3 is_stmt 0 view .LVU6755
 25918              	.LBE3509:
 25919              	.LBE3508:
 25920              	.LBE3507:
 25921              	.LBE3506:
2238:src/xeq.c     **** 
 25922              		.loc 1 2238 1 view .LVU6756
 25923 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25924              	.LVL1982:
 25925              	.L1863:
2235:src/xeq.c     **** 		}
 25926              		.loc 1 2235 4 is_stmt 1 view .LVU6757
2235:src/xeq.c     **** 		}
 25927              		.loc 1 2235 10 is_stmt 0 view .LVU6758
 25928 0058 1249     		ldr	r1, .L1867+24
2235:src/xeq.c     **** 		}
 25929              		.loc 1 2235 11 view .LVU6759
 25930 005a 013B     		subs	r3, r3, #1
 25931 005c 1BB2     		sxth	r3, r3
2235:src/xeq.c     **** 		}
 25932              		.loc 1 2235 10 view .LVU6760
 25933 005e 0968     		ldr	r1, [r1]
2235:src/xeq.c     **** 		}
 25934              		.loc 1 2235 24 view .LVU6761
 25935 0060 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 25936 0064 21F81360 		strh	r6, [r1, r3, lsl #1]	@ movhi
2238:src/xeq.c     **** 
 25937              		.loc 1 2238 1 view .LVU6762
 25938 0068 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25939              	.LVL1983:
 25940              	.L1859:
2222:src/xeq.c     **** 			set_running_on();
 25941              		.loc 1 2222 4 is_stmt 1 view .LVU6763
 25942              	.LBB3510:
 25943              	.LBI3503:
1600:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 25944              		.loc 1 1600 6 view .LVU6764
 25945              	.LBB3505:
1601:src/xeq.c     **** }
 25946              		.loc 1 1601 2 view .LVU6765
1601:src/xeq.c     **** }
 25947              		.loc 1 1601 24 is_stmt 0 view .LVU6766
 25948 006c A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
1601:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 667


 25949              		.loc 1 1601 12 view .LVU6767
 25950 0070 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 25951              	.LBE3505:
 25952              	.LBE3510:
2223:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
 25953              		.loc 1 2223 4 is_stmt 1 view .LVU6768
 25954 0074 FFF7FEFF 		bl	set_running_on
 25955              	.LVL1984:
2224:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25956              		.loc 1 2224 4 view .LVU6769
2224:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25957              		.loc 1 2224 10 is_stmt 0 view .LVU6770
 25958 0078 A30B     		lsrs	r3, r4, #14
2224:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25959              		.loc 1 2224 7 view .LVU6771
 25960 007a 032B     		cmp	r3, #3
2224:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25961              		.loc 1 2224 24 view .LVU6772
 25962 007c 3A68     		ldr	r2, [r7]
2224:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25963              		.loc 1 2224 7 view .LVU6773
 25964 007e D5D0     		beq	.L1860
2224:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25965              		.loc 1 2224 21 discriminator 1 view .LVU6774
 25966 0080 B2F8EC37 		ldrh	r3, [r2, #2028]
 25967 0084 4345     		cmp	r3, r8
 25968 0086 18BF     		it	ne
 25969 0088 2646     		movne	r6, r4
 25970              	.LVL1985:
2224:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25971              		.loc 1 2224 21 discriminator 1 view .LVU6775
 25972 008a CFE7     		b	.L1860
 25973              	.L1868:
 25974              		.align	2
 25975              	.L1867:
 25976 008c 00000000 		.word	main_ram
 25977 0090 00000000 		.word	Running
 25978 0094 00000000 		.word	XromRunning
 25979 0098 00000000 		.word	XromParams
 25980 009c 00000000 		.word	RetStkSize
 25981 00a0 00000000 		.word	Error
 25982 00a4 00000000 		.word	RetStk
 25983              		.cfi_endproc
 25984              	.LFE153:
 25986              		.section	.text.cmdgtocommon,"ax",%progbits
 25987              		.align	1
 25988              		.p2align 2,,3
 25989              		.global	cmdgtocommon
 25990              		.syntax unified
 25991              		.thumb
 25992              		.thumb_func
 25993              		.fpu fpv4-sp-d16
 25995              	cmdgtocommon:
 25996              	.LVL1986:
 25997              	.LFB156:
2278:src/xeq.c     **** 	if (pc == 0)
 25998              		.loc 1 2278 45 is_stmt 1 view -0
ARM GAS  /tmp/ccQQPlfu.s 			page 668


 25999              		.cfi_startproc
 26000              		@ args = 0, pretend = 0, frame = 0
 26001              		@ frame_needed = 0, uses_anonymous_args = 0
 26002              		@ link register save eliminated.
2279:src/xeq.c     **** 		set_running_off();
 26003              		.loc 1 2279 2 view .LVU6777
 26004              	.LBB3517:
 26005              	.LBB3518:
 26006              	.LBB3519:
 26007              	.LBB3520:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 26008              		.loc 1 5804 15 is_stmt 0 view .LVU6778
 26009 0000 0A4A     		ldr	r2, .L1871
 26010              	.LBE3520:
 26011              	.LBE3519:
 26012              	.LBE3518:
 26013              	.LBE3517:
2279:src/xeq.c     **** 		set_running_off();
 26014              		.loc 1 2279 5 view .LVU6779
 26015 0002 0B46     		mov	r3, r1
 26016 0004 59B9     		cbnz	r1, .L1870
 26017              	.LBB3528:
 26018              	.LBI3517:
2278:src/xeq.c     **** 	if (pc == 0)
 26019              		.loc 1 2278 6 is_stmt 1 view .LVU6780
 26020              	.LVL1987:
 26021              	.LBB3527:
2280:src/xeq.c     **** 	else
 26022              		.loc 1 2280 3 view .LVU6781
 26023              	.LBB3526:
 26024              	.LBI3519:
5802:src/xeq.c     **** 	set_running_off_sst();
 26025              		.loc 1 5802 6 view .LVU6782
 26026              	.LBB3525:
5803:src/xeq.c     **** 	State.entryp = 0;
 26027              		.loc 1 5803 2 view .LVU6783
 26028              	.LBB3521:
 26029              	.LBI3521:
5794:src/xeq.c     **** 	Running = 0;
 26030              		.loc 1 5794 6 view .LVU6784
 26031              	.LBB3522:
5795:src/xeq.c     **** }
 26032              		.loc 1 5795 2 view .LVU6785
5795:src/xeq.c     **** }
 26033              		.loc 1 5795 10 is_stmt 0 view .LVU6786
 26034 0006 0A48     		ldr	r0, .L1871+4
 26035              	.LVL1988:
5795:src/xeq.c     **** }
 26036              		.loc 1 5795 10 view .LVU6787
 26037              	.LBE3522:
 26038              	.LBE3521:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 26039              		.loc 1 5804 15 view .LVU6788
 26040 0008 1268     		ldr	r2, [r2]
 26041              	.LBB3524:
 26042              	.LBB3523:
5795:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 669


 26043              		.loc 1 5795 10 view .LVU6789
 26044 000a 0160     		str	r1, [r0]
 26045              	.LBE3523:
 26046              	.LBE3524:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 26047              		.loc 1 5804 2 is_stmt 1 view .LVU6790
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 26048              		.loc 1 5804 15 is_stmt 0 view .LVU6791
 26049 000c 92F8DD07 		ldrb	r0, [r2, #2013]	@ zero_extendqisi2
 26050 0010 61F30410 		bfi	r0, r1, #4, #1
 26051              	.LVL1989:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 26052              		.loc 1 5804 15 view .LVU6792
 26053 0014 82F8DD07 		strb	r0, [r2, #2013]
5805:src/xeq.c     **** }
 26054              		.loc 1 5805 2 is_stmt 1 view .LVU6793
 26055 0018 8A20     		movs	r0, #138
 26056 001a FFF7FEBF 		b	dot
 26057              	.LVL1990:
 26058              	.L1870:
5805:src/xeq.c     **** }
 26059              		.loc 1 5805 2 is_stmt 0 view .LVU6794
 26060              	.LBE3525:
 26061              	.LBE3526:
 26062              	.LBE3527:
 26063              	.LBE3528:
2282:src/xeq.c     **** }
 26064              		.loc 1 2282 3 is_stmt 1 view .LVU6795
2282:src/xeq.c     **** }
 26065              		.loc 1 2282 19 is_stmt 0 view .LVU6796
 26066 001e 1268     		ldr	r2, [r2]
2282:src/xeq.c     **** }
 26067              		.loc 1 2282 3 view .LVU6797
 26068 0020 0146     		mov	r1, r0
 26069              	.LVL1991:
2282:src/xeq.c     **** }
 26070              		.loc 1 2282 3 view .LVU6798
 26071 0022 B2F8E027 		ldrh	r2, [r2, #2016]
 26072 0026 1846     		mov	r0, r3
 26073              	.LVL1992:
2282:src/xeq.c     **** }
 26074              		.loc 1 2282 3 view .LVU6799
 26075 0028 FFF7FEBF 		b	gsbgto
 26076              	.LVL1993:
 26077              	.L1872:
2282:src/xeq.c     **** }
 26078              		.loc 1 2282 3 view .LVU6800
 26079              		.align	2
 26080              	.L1871:
 26081 002c 00000000 		.word	main_ram
 26082 0030 00000000 		.word	Running
 26083              		.cfi_endproc
 26084              	.LFE156:
 26086              		.section	.text.cmdgto,"ax",%progbits
 26087              		.align	1
 26088              		.p2align 2,,3
 26089              		.global	cmdgto
ARM GAS  /tmp/ccQQPlfu.s 			page 670


 26090              		.syntax unified
 26091              		.thumb
 26092              		.thumb_func
 26093              		.fpu fpv4-sp-d16
 26095              	cmdgto:
 26096              	.LVL1994:
 26097              	.LFB162:
2338:src/xeq.c     **** 	unsigned int lbl;
 26098              		.loc 1 2338 45 is_stmt 1 view -0
 26099              		.cfi_startproc
 26100              		@ args = 0, pretend = 0, frame = 0
 26101              		@ frame_needed = 0, uses_anonymous_args = 0
2339:src/xeq.c     **** 	if (is_xrom())
 26102              		.loc 1 2339 2 view .LVU6802
2340:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26103              		.loc 1 2340 2 view .LVU6803
 26104              	.LBB3529:
 26105              	.LBI3529:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 26106              		.loc 1 185 5 view .LVU6804
 26107              	.LBB3530:
 186:src/xeq.c     **** }
 26108              		.loc 1 186 2 view .LVU6805
 186:src/xeq.c     **** }
 26109              		.loc 1 186 9 is_stmt 0 view .LVU6806
 26110 0000 0E4B     		ldr	r3, .L1877
 26111 0002 1B68     		ldr	r3, [r3]
 26112 0004 B3F8E037 		ldrh	r3, [r3, #2016]
 26113              	.LBE3530:
 26114              	.LBE3529:
2340:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26115              		.loc 1 2340 5 view .LVU6807
 26116 0008 9A0B     		lsrs	r2, r3, #14
 26117 000a 032A     		cmp	r2, #3
2338:src/xeq.c     **** 	unsigned int lbl;
 26118              		.loc 1 2338 45 view .LVU6808
 26119 000c 10B5     		push	{r4, lr}
 26120              		.cfi_def_cfa_offset 8
 26121              		.cfi_offset 4, -8
 26122              		.cfi_offset 14, -4
2338:src/xeq.c     **** 	unsigned int lbl;
 26123              		.loc 1 2338 45 view .LVU6809
 26124 000e 0C46     		mov	r4, r1
2340:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26125              		.loc 1 2340 5 view .LVU6810
 26126 0010 0CD1     		bne	.L1874
2341:src/xeq.c     **** 	else
 26127              		.loc 1 2341 3 is_stmt 1 view .LVU6811
2341:src/xeq.c     **** 	else
 26128              		.loc 1 2341 9 is_stmt 0 view .LVU6812
 26129 0012 0B4B     		ldr	r3, .L1877+4
2341:src/xeq.c     **** 	else
 26130              		.loc 1 2341 37 view .LVU6813
 26131 0014 33F81010 		ldrh	r1, [r3, r0, lsl #1]
 26132              	.LVL1995:
2341:src/xeq.c     **** 	else
 26133              		.loc 1 2341 7 view .LVU6814
ARM GAS  /tmp/ccQQPlfu.s 			page 671


 26134 0018 41F44041 		orr	r1, r1, #49152
 26135              	.LVL1996:
 26136              	.L1875:
2344:src/xeq.c     **** }
 26137              		.loc 1 2344 2 is_stmt 1 view .LVU6815
 26138 001c B4F14500 		subs	r0, r4, #69
 26139 0020 18BF     		it	ne
 26140 0022 0120     		movne	r0, #1
2345:src/xeq.c     **** 
 26141              		.loc 1 2345 1 is_stmt 0 view .LVU6816
 26142 0024 BDE81040 		pop	{r4, lr}
 26143              		.cfi_remember_state
 26144              		.cfi_restore 14
 26145              		.cfi_restore 4
 26146              		.cfi_def_cfa_offset 0
2344:src/xeq.c     **** }
 26147              		.loc 1 2344 2 view .LVU6817
 26148 0028 FFF7FEBF 		b	cmdgtocommon
 26149              	.LVL1997:
 26150              	.L1874:
 26151              		.cfi_restore_state
2343:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
 26152              		.loc 1 2343 3 is_stmt 1 view .LVU6818
 26153              	.LBB3531:
 26154              	.LBI3531:
2208:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 26155              		.loc 1 2208 14 view .LVU6819
 26156              	.LBB3532:
2209:src/xeq.c     **** }
 26157              		.loc 1 2209 2 view .LVU6820
2209:src/xeq.c     **** }
 26158              		.loc 1 2209 9 is_stmt 0 view .LVU6821
 26159 002c 40F4C441 		orr	r1, r0, #25088
 26160              	.LVL1998:
2209:src/xeq.c     **** }
 26161              		.loc 1 2209 9 view .LVU6822
 26162 0030 0322     		movs	r2, #3
 26163 0032 1846     		mov	r0, r3
 26164              	.LVL1999:
2209:src/xeq.c     **** }
 26165              		.loc 1 2209 9 view .LVU6823
 26166 0034 FFF7FEFF 		bl	find_opcode_from
 26167              	.LVL2000:
2209:src/xeq.c     **** }
 26168              		.loc 1 2209 9 view .LVU6824
 26169 0038 0146     		mov	r1, r0
 26170              	.LVL2001:
2209:src/xeq.c     **** }
 26171              		.loc 1 2209 9 view .LVU6825
 26172 003a EFE7     		b	.L1875
 26173              	.L1878:
 26174              		.align	2
 26175              	.L1877:
 26176 003c 00000000 		.word	main_ram
 26177 0040 00000000 		.word	.LANCHOR6
 26178              	.LBE3532:
 26179              	.LBE3531:
ARM GAS  /tmp/ccQQPlfu.s 			page 672


 26180              		.cfi_endproc
 26181              	.LFE162:
 26183              		.section	.text.branchtoalpha,"ax",%progbits
 26184              		.align	1
 26185              		.p2align 2,,3
 26186              		.syntax unified
 26187              		.thumb
 26188              		.thumb_func
 26189              		.fpu fpv4-sp-d16
 26191              	branchtoalpha:
 26192              	.LVL2002:
 26193              	.LFB166:
2380:src/xeq.c     **** 	unsigned int op;
 26194              		.loc 1 2380 51 is_stmt 1 view -0
 26195              		.cfi_startproc
 26196              		@ args = 0, pretend = 0, frame = 0
 26197              		@ frame_needed = 0, uses_anonymous_args = 0
2381:src/xeq.c     **** 
 26198              		.loc 1 2381 2 view .LVU6827
2383:src/xeq.c     **** 	op |= buf[0] & 0xff;
 26199              		.loc 1 2383 2 view .LVU6828
2384:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 26200              		.loc 1 2384 2 view .LVU6829
2385:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 26201              		.loc 1 2385 2 view .LVU6830
2386:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26202              		.loc 1 2386 2 view .LVU6831
2387:src/xeq.c     **** }
 26203              		.loc 1 2387 2 view .LVU6832
2380:src/xeq.c     **** 	unsigned int op;
 26204              		.loc 1 2380 51 is_stmt 0 view .LVU6833
 26205 0000 10B5     		push	{r4, lr}
 26206              		.cfi_def_cfa_offset 8
 26207              		.cfi_offset 4, -8
 26208              		.cfi_offset 14, -4
2386:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26209              		.loc 1 2386 16 view .LVU6834
 26210 0002 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
2385:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 26211              		.loc 1 2385 16 view .LVU6835
 26212 0004 4C78     		ldrb	r4, [r1, #1]	@ zero_extendqisi2
2384:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 26213              		.loc 1 2384 15 view .LVU6836
 26214 0006 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
2386:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26215              		.loc 1 2386 24 view .LVU6837
 26216 0008 1B06     		lsls	r3, r3, #24
2386:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26217              		.loc 1 2386 5 view .LVU6838
 26218 000a 43EA0443 		orr	r3, r3, r4, lsl #16
 26219 000e 1343     		orrs	r3, r3, r2
2380:src/xeq.c     **** 	unsigned int op;
 26220              		.loc 1 2380 51 view .LVU6839
 26221 0010 0446     		mov	r4, r0
2387:src/xeq.c     **** }
 26222              		.loc 1 2387 2 view .LVU6840
 26223 0012 0121     		movs	r1, #1
ARM GAS  /tmp/ccQQPlfu.s 			page 673


 26224              	.LVL2003:
2387:src/xeq.c     **** }
 26225              		.loc 1 2387 2 view .LVU6841
 26226 0014 43F47040 		orr	r0, r3, #61440
 26227              	.LVL2004:
2387:src/xeq.c     **** }
 26228              		.loc 1 2387 2 view .LVU6842
 26229 0018 FFF7FEFF 		bl	findmultilbl
 26230              	.LVL2005:
2387:src/xeq.c     **** }
 26231              		.loc 1 2387 2 view .LVU6843
 26232 001c 0146     		mov	r1, r0
 26233 001e 2046     		mov	r0, r4
2388:src/xeq.c     **** 
 26234              		.loc 1 2388 1 view .LVU6844
 26235 0020 BDE81040 		pop	{r4, lr}
 26236              		.cfi_restore 14
 26237              		.cfi_restore 4
 26238              		.cfi_def_cfa_offset 0
 26239              	.LVL2006:
2387:src/xeq.c     **** }
 26240              		.loc 1 2387 2 view .LVU6845
 26241 0024 FFF7FEBF 		b	cmdgtocommon
 26242              	.LVL2007:
2387:src/xeq.c     **** }
 26243              		.loc 1 2387 2 view .LVU6846
 26244              		.cfi_endproc
 26245              	.LFE166:
 26247              		.section	.text.cmdalphagto,"ax",%progbits
 26248              		.align	1
 26249              		.p2align 2,,3
 26250              		.global	cmdalphagto
 26251              		.syntax unified
 26252              		.thumb
 26253              		.thumb_func
 26254              		.fpu fpv4-sp-d16
 26256              	cmdalphagto:
 26257              	.LVL2008:
 26258              	.LFB167:
2390:src/xeq.c     **** 	char buf[14];
 26259              		.loc 1 2390 50 is_stmt 1 view -0
 26260              		.cfi_startproc
 26261              		@ args = 0, pretend = 0, frame = 16
 26262              		@ frame_needed = 0, uses_anonymous_args = 0
2391:src/xeq.c     **** 
 26263              		.loc 1 2391 2 view .LVU6848
2393:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26264              		.loc 1 2393 2 view .LVU6849
2390:src/xeq.c     **** 	char buf[14];
 26265              		.loc 1 2390 50 is_stmt 0 view .LVU6850
 26266 0000 30B5     		push	{r4, r5, lr}
 26267              		.cfi_def_cfa_offset 12
 26268              		.cfi_offset 4, -12
 26269              		.cfi_offset 5, -8
 26270              		.cfi_offset 14, -4
 26271 0002 85B0     		sub	sp, sp, #20
 26272              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccQQPlfu.s 			page 674


2393:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26273              		.loc 1 2393 2 view .LVU6851
 26274 0004 0E22     		movs	r2, #14
2390:src/xeq.c     **** 	char buf[14];
 26275              		.loc 1 2390 50 view .LVU6852
 26276 0006 0546     		mov	r5, r0
 26277 0008 0C46     		mov	r4, r1
2393:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26278              		.loc 1 2393 2 view .LVU6853
 26279 000a 6846     		mov	r0, sp
 26280              	.LVL2009:
2393:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26281              		.loc 1 2393 2 view .LVU6854
 26282 000c 0021     		movs	r1, #0
 26283              	.LVL2010:
2393:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26284              		.loc 1 2393 2 view .LVU6855
 26285 000e FFF7FEFF 		bl	xset
 26286              	.LVL2011:
2394:src/xeq.c     **** }
 26287              		.loc 1 2394 2 is_stmt 1 view .LVU6856
 26288 0012 6946     		mov	r1, sp
 26289 0014 2846     		mov	r0, r5
 26290 0016 FFF7FEFF 		bl	alpha_rcl_s
 26291              	.LVL2012:
 26292 001a 0146     		mov	r1, r0
 26293 001c B4F17000 		subs	r0, r4, #112
 26294 0020 18BF     		it	ne
 26295 0022 0120     		movne	r0, #1
 26296 0024 FFF7FEFF 		bl	branchtoalpha
 26297              	.LVL2013:
2395:src/xeq.c     **** 
 26298              		.loc 1 2395 1 is_stmt 0 view .LVU6857
 26299 0028 05B0     		add	sp, sp, #20
 26300              		.cfi_def_cfa_offset 12
 26301              		@ sp needed
 26302 002a 30BD     		pop	{r4, r5, pc}
2395:src/xeq.c     **** 
 26303              		.loc 1 2395 1 view .LVU6858
 26304              		.cfi_endproc
 26305              	.LFE167:
 26307              		.section	.text.op_gtoalpha,"ax",%progbits
 26308              		.align	1
 26309              		.p2align 2,,3
 26310              		.global	op_gtoalpha
 26311              		.syntax unified
 26312              		.thumb
 26313              		.thumb_func
 26314              		.fpu fpv4-sp-d16
 26316              	op_gtoalpha:
 26317              	.LVL2014:
 26318              	.LFB169:
2405:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26319              		.loc 1 2405 33 is_stmt 1 view -0
 26320              		.cfi_startproc
 26321              		@ args = 0, pretend = 0, frame = 8
 26322              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQQPlfu.s 			page 675


2406:src/xeq.c     **** }
 26323              		.loc 1 2406 2 view .LVU6860
2405:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26324              		.loc 1 2405 33 is_stmt 0 view .LVU6861
 26325 0000 10B5     		push	{r4, lr}
 26326              		.cfi_def_cfa_offset 8
 26327              		.cfi_offset 4, -8
 26328              		.cfi_offset 14, -4
 26329              	.LBB3535:
 26330              	.LBB3536:
2400:src/xeq.c     **** 	buf[3] = '\0';
 26331              		.loc 1 2400 13 view .LVU6862
 26332 0002 0B4B     		ldr	r3, .L1885
 26333 0004 1968     		ldr	r1, [r3]
 26334              	.LBE3536:
 26335              	.LBE3535:
2405:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26336              		.loc 1 2405 33 view .LVU6863
 26337 0006 82B0     		sub	sp, sp, #8
 26338              		.cfi_def_cfa_offset 16
2405:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26339              		.loc 1 2405 33 view .LVU6864
 26340 0008 0446     		mov	r4, r0
 26341              	.LVL2015:
 26342              	.LBB3538:
 26343              	.LBI3535:
2397:src/xeq.c     **** 	char buf[4];
 26344              		.loc 1 2397 13 is_stmt 1 view .LVU6865
 26345              	.LBB3537:
2398:src/xeq.c     **** 
 26346              		.loc 1 2398 2 view .LVU6866
2400:src/xeq.c     **** 	buf[3] = '\0';
 26347              		.loc 1 2400 2 view .LVU6867
 26348 000a 0322     		movs	r2, #3
 26349 000c 01F5F661 		add	r1, r1, #1968
 26350 0010 01A8     		add	r0, sp, #4
 26351              	.LVL2016:
2400:src/xeq.c     **** 	buf[3] = '\0';
 26352              		.loc 1 2400 2 is_stmt 0 view .LVU6868
 26353 0012 FFF7FEFF 		bl	xcopy
 26354              	.LVL2017:
2401:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26355              		.loc 1 2401 2 is_stmt 1 view .LVU6869
2402:src/xeq.c     **** }
 26356              		.loc 1 2402 2 is_stmt 0 view .LVU6870
 26357 0016 B4F19800 		subs	r0, r4, #152
2401:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26358              		.loc 1 2401 9 view .LVU6871
 26359 001a 4FF00003 		mov	r3, #0
2402:src/xeq.c     **** }
 26360              		.loc 1 2402 2 view .LVU6872
 26361 001e 18BF     		it	ne
 26362 0020 0120     		movne	r0, #1
 26363 0022 01A9     		add	r1, sp, #4
2401:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26364              		.loc 1 2401 9 view .LVU6873
 26365 0024 8DF80730 		strb	r3, [sp, #7]
ARM GAS  /tmp/ccQQPlfu.s 			page 676


2402:src/xeq.c     **** }
 26366              		.loc 1 2402 2 is_stmt 1 view .LVU6874
 26367 0028 FFF7FEFF 		bl	branchtoalpha
 26368              	.LVL2018:
2402:src/xeq.c     **** }
 26369              		.loc 1 2402 2 is_stmt 0 view .LVU6875
 26370              	.LBE3537:
 26371              	.LBE3538:
2407:src/xeq.c     **** 
 26372              		.loc 1 2407 1 view .LVU6876
 26373 002c 02B0     		add	sp, sp, #8
 26374              		.cfi_def_cfa_offset 8
 26375              		@ sp needed
 26376 002e 10BD     		pop	{r4, pc}
 26377              	.L1886:
 26378              		.align	2
 26379              	.L1885:
 26380 0030 00000000 		.word	main_ram
 26381              		.cfi_endproc
 26382              	.LFE169:
 26384              		.section	.text.cmdskip,"ax",%progbits
 26385              		.align	1
 26386              		.p2align 2,,3
 26387              		.global	cmdskip
 26388              		.syntax unified
 26389              		.thumb
 26390              		.thumb_func
 26391              		.fpu fpv4-sp-d16
 26393              	cmdskip:
 26394              	.LVL2019:
 26395              	.LFB182:
2581:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26396              		.loc 1 2581 46 is_stmt 1 view -0
 26397              		.cfi_startproc
 26398              		@ args = 0, pretend = 0, frame = 8
 26399              		@ frame_needed = 0, uses_anonymous_args = 0
2582:src/xeq.c     **** 	unsigned int pc;
 26400              		.loc 1 2582 2 view .LVU6878
2581:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26401              		.loc 1 2581 46 is_stmt 0 view .LVU6879
 26402 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 26403              		.cfi_def_cfa_offset 20
 26404              		.cfi_offset 4, -20
 26405              		.cfi_offset 5, -16
 26406              		.cfi_offset 6, -12
 26407              		.cfi_offset 7, -8
 26408              		.cfi_offset 14, -4
2582:src/xeq.c     **** 	unsigned int pc;
 26409              		.loc 1 2582 30 view .LVU6880
 26410 0002 1D4F     		ldr	r7, .L1911
 26411 0004 3B68     		ldr	r3, [r7]
2585:src/xeq.c     **** 		int sgn;
 26412              		.loc 1 2585 5 view .LVU6881
 26413 0006 8B29     		cmp	r1, #139
2582:src/xeq.c     **** 	unsigned int pc;
 26414              		.loc 1 2582 21 view .LVU6882
 26415 0008 B3F8E067 		ldrh	r6, [r3, #2016]
ARM GAS  /tmp/ccQQPlfu.s 			page 677


 26416              	.LVL2020:
2583:src/xeq.c     **** 
 26417              		.loc 1 2583 2 is_stmt 1 view .LVU6883
2585:src/xeq.c     **** 		int sgn;
 26418              		.loc 1 2585 2 view .LVU6884
2581:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26419              		.loc 1 2581 46 is_stmt 0 view .LVU6885
 26420 000c 83B0     		sub	sp, sp, #12
 26421              		.cfi_def_cfa_offset 32
2581:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26422              		.loc 1 2581 46 view .LVU6886
 26423 000e 0D46     		mov	r5, r1
2585:src/xeq.c     **** 		int sgn;
 26424              		.loc 1 2585 5 view .LVU6887
 26425 0010 22D0     		beq	.L1908
 26426 0012 0446     		mov	r4, r0
 26427              	.LVL2021:
 26428              	.L1888:
2594:src/xeq.c     **** 		pc = origpc + arg;
 26429              		.loc 1 2594 2 is_stmt 1 view .LVU6888
2594:src/xeq.c     **** 		pc = origpc + arg;
 26430              		.loc 1 2594 6 is_stmt 0 view .LVU6889
 26431 0014 B30B     		lsrs	r3, r6, #14
2594:src/xeq.c     **** 		pc = origpc + arg;
 26432              		.loc 1 2594 5 view .LVU6890
 26433 0016 032B     		cmp	r3, #3
 26434 0018 15D0     		beq	.L1909
 26435              	.LVL2022:
 26436              	.L1893:
2597:src/xeq.c     **** 		if (PcWrapped) {
 26437              		.loc 1 2597 28 is_stmt 1 discriminator 2 view .LVU6891
2597:src/xeq.c     **** 		if (PcWrapped) {
 26438              		.loc 1 2597 9 discriminator 2 view .LVU6892
2597:src/xeq.c     **** 		if (PcWrapped) {
 26439              		.loc 1 2597 9 is_stmt 0 discriminator 2 view .LVU6893
 26440 001a 24B1     		cbz	r4, .L1895
2597:src/xeq.c     **** 		if (PcWrapped) {
 26441              		.loc 1 2597 20 discriminator 1 view .LVU6894
 26442 001c FFF7FEFF 		bl	incpc
 26443              	.LVL2023:
 26444 0020 013C     		subs	r4, r4, #1
 26445              	.LVL2024:
2597:src/xeq.c     **** 		if (PcWrapped) {
 26446              		.loc 1 2597 16 discriminator 1 view .LVU6895
 26447 0022 0028     		cmp	r0, #0
 26448 0024 F9D0     		beq	.L1893
 26449              	.LVL2025:
 26450              	.L1895:
2598:src/xeq.c     **** 			report_err(ERR_RANGE);
 26451              		.loc 1 2598 3 is_stmt 1 view .LVU6896
2598:src/xeq.c     **** 			report_err(ERR_RANGE);
 26452              		.loc 1 2598 7 is_stmt 0 view .LVU6897
 26453 0026 154B     		ldr	r3, .L1911+4
2598:src/xeq.c     **** 			report_err(ERR_RANGE);
 26454              		.loc 1 2598 6 view .LVU6898
 26455 0028 1B68     		ldr	r3, [r3]
 26456 002a 73B9     		cbnz	r3, .L1910
ARM GAS  /tmp/ccQQPlfu.s 			page 678


 26457              	.L1896:
2601:src/xeq.c     **** 	}
 26458              		.loc 1 2601 3 is_stmt 1 view .LVU6899
2601:src/xeq.c     **** 	}
 26459              		.loc 1 2601 8 is_stmt 0 view .LVU6900
 26460 002c 3B68     		ldr	r3, [r7]
2601:src/xeq.c     **** 	}
 26461              		.loc 1 2601 6 view .LVU6901
 26462 002e B3F8E007 		ldrh	r0, [r3, #2016]
 26463              	.LVL2026:
 26464              	.L1894:
2603:src/xeq.c     **** }
 26465              		.loc 1 2603 2 is_stmt 1 view .LVU6902
 26466 0032 A5F13801 		sub	r1, r5, #56
 26467 0036 B1FA81F1 		clz	r1, r1
 26468 003a 3246     		mov	r2, r6
 26469 003c 4909     		lsrs	r1, r1, #5
 26470 003e FFF7FEFF 		bl	gsbgto
 26471              	.LVL2027:
 26472              	.L1887:
2604:src/xeq.c     **** 
 26473              		.loc 1 2604 1 is_stmt 0 view .LVU6903
 26474 0042 03B0     		add	sp, sp, #12
 26475              		.cfi_remember_state
 26476              		.cfi_def_cfa_offset 20
 26477              		@ sp needed
 26478 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 26479              	.LVL2028:
 26480              	.L1909:
 26481              		.cfi_restore_state
2595:src/xeq.c     **** 	else {
 26482              		.loc 1 2595 3 is_stmt 1 view .LVU6904
2595:src/xeq.c     **** 	else {
 26483              		.loc 1 2595 6 is_stmt 0 view .LVU6905
 26484 0046 A019     		adds	r0, r4, r6
 26485              	.LVL2029:
2595:src/xeq.c     **** 	else {
 26486              		.loc 1 2595 6 view .LVU6906
 26487 0048 F3E7     		b	.L1894
 26488              	.LVL2030:
 26489              	.L1910:
2599:src/xeq.c     **** 		}
 26490              		.loc 1 2599 4 is_stmt 1 view .LVU6907
 26491              	.LBB3548:
 26492              	.LBI3548:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26493              		.loc 1 540 5 view .LVU6908
 26494              	.LBB3549:
 541:src/xeq.c     **** 		Error = e;
 26495              		.loc 1 541 2 view .LVU6909
 541:src/xeq.c     **** 		Error = e;
 26496              		.loc 1 541 12 is_stmt 0 view .LVU6910
 26497 004a 0D4B     		ldr	r3, .L1911+8
 541:src/xeq.c     **** 		Error = e;
 26498              		.loc 1 541 5 view .LVU6911
 26499 004c 1A68     		ldr	r2, [r3]
 26500 004e 002A     		cmp	r2, #0
ARM GAS  /tmp/ccQQPlfu.s 			page 679


 26501 0050 ECD1     		bne	.L1896
 26502              	.LVL2031:
 26503              	.LBB3550:
 26504              	.LBI3550:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26505              		.loc 1 540 5 is_stmt 1 view .LVU6912
 26506              	.LBB3551:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 26507              		.loc 1 542 3 view .LVU6913
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 26508              		.loc 1 542 9 is_stmt 0 view .LVU6914
 26509 0052 0822     		movs	r2, #8
 26510 0054 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 26511              		.loc 1 543 3 is_stmt 1 view .LVU6915
 26512 0056 E9E7     		b	.L1896
 26513              	.LVL2032:
 26514              	.L1908:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 26515              		.loc 1 543 3 is_stmt 0 view .LVU6916
 26516              	.LBE3551:
 26517              	.LBE3550:
 26518              	.LBE3549:
 26519              	.LBE3548:
 26520              	.LBB3552:
2586:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
 26521              		.loc 1 2586 3 is_stmt 1 view .LVU6917
2587:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26522              		.loc 1 2587 3 view .LVU6918
2587:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26523              		.loc 1 2587 15 is_stmt 0 view .LVU6919
 26524 0058 01A9     		add	r1, sp, #4
 26525              	.LVL2033:
2587:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26526              		.loc 1 2587 15 view .LVU6920
 26527 005a FFF7FEFF 		bl	get_reg_n_int_sgn
 26528              	.LVL2034:
2588:src/xeq.c     **** 			report_err(ERR_RANGE);
 26529              		.loc 1 2588 6 view .LVU6921
 26530 005e 019B     		ldr	r3, [sp, #4]
 26531              	.LVL2035:
2588:src/xeq.c     **** 			report_err(ERR_RANGE);
 26532              		.loc 1 2588 3 is_stmt 1 view .LVU6922
2588:src/xeq.c     **** 			report_err(ERR_RANGE);
 26533              		.loc 1 2588 6 is_stmt 0 view .LVU6923
 26534 0060 13B9     		cbnz	r3, .L1889
2588:src/xeq.c     **** 			report_err(ERR_RANGE);
 26535              		.loc 1 2588 11 discriminator 1 view .LVU6924
 26536 0062 6328     		cmp	r0, #99
2587:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26537              		.loc 1 2587 7 discriminator 1 view .LVU6925
 26538 0064 0446     		mov	r4, r0
2588:src/xeq.c     **** 			report_err(ERR_RANGE);
 26539              		.loc 1 2588 11 discriminator 1 view .LVU6926
 26540 0066 D5D9     		bls	.L1888
 26541              	.L1889:
2589:src/xeq.c     **** 			return;
ARM GAS  /tmp/ccQQPlfu.s 			page 680


 26542              		.loc 1 2589 4 is_stmt 1 view .LVU6927
 26543              	.LVL2036:
 26544              	.LBB3553:
 26545              	.LBI3553:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26546              		.loc 1 540 5 view .LVU6928
 26547              	.LBB3554:
 541:src/xeq.c     **** 		Error = e;
 26548              		.loc 1 541 2 view .LVU6929
 541:src/xeq.c     **** 		Error = e;
 26549              		.loc 1 541 12 is_stmt 0 view .LVU6930
 26550 0068 054B     		ldr	r3, .L1911+8
 541:src/xeq.c     **** 		Error = e;
 26551              		.loc 1 541 5 view .LVU6931
 26552 006a 1A68     		ldr	r2, [r3]
 26553 006c 002A     		cmp	r2, #0
 26554 006e E8D1     		bne	.L1887
 26555              	.LVL2037:
 26556              	.LBB3555:
 26557              	.LBI3555:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26558              		.loc 1 540 5 is_stmt 1 view .LVU6932
 26559              	.LBB3556:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 26560              		.loc 1 542 3 view .LVU6933
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 26561              		.loc 1 542 9 is_stmt 0 view .LVU6934
 26562 0070 0822     		movs	r2, #8
 26563 0072 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 26564              		.loc 1 543 3 is_stmt 1 view .LVU6935
 26565              	.LVL2038:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 26566              		.loc 1 543 3 is_stmt 0 view .LVU6936
 26567              	.LBE3556:
 26568              	.LBE3555:
 26569              	.LBE3554:
 26570              	.LBE3553:
2590:src/xeq.c     **** 		}
 26571              		.loc 1 2590 4 is_stmt 1 view .LVU6937
 26572 0074 E5E7     		b	.L1887
 26573              	.L1912:
 26574 0076 00BF     		.align	2
 26575              	.L1911:
 26576 0078 00000000 		.word	main_ram
 26577 007c 00000000 		.word	PcWrapped
 26578 0080 00000000 		.word	Error
 26579              	.LBE3552:
 26580              		.cfi_endproc
 26581              	.LFE182:
 26583              		.section	.text.cmdback,"ax",%progbits
 26584              		.align	1
 26585              		.p2align 2,,3
 26586              		.global	cmdback
 26587              		.syntax unified
 26588              		.thumb
 26589              		.thumb_func
ARM GAS  /tmp/ccQQPlfu.s 			page 681


 26590              		.fpu fpv4-sp-d16
 26592              	cmdback:
 26593              	.LVL2039:
 26594              	.LFB183:
2607:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26595              		.loc 1 2607 46 view -0
 26596              		.cfi_startproc
 26597              		@ args = 0, pretend = 0, frame = 0
 26598              		@ frame_needed = 0, uses_anonymous_args = 0
2608:src/xeq.c     **** 	unsigned int pc = origpc;
 26599              		.loc 1 2608 2 view .LVU6939
2607:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26600              		.loc 1 2607 46 is_stmt 0 view .LVU6940
 26601 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 26602              		.cfi_def_cfa_offset 24
 26603              		.cfi_offset 3, -24
 26604              		.cfi_offset 4, -20
 26605              		.cfi_offset 5, -16
 26606              		.cfi_offset 6, -12
 26607              		.cfi_offset 7, -8
 26608              		.cfi_offset 14, -4
2608:src/xeq.c     **** 	unsigned int pc = origpc;
 26609              		.loc 1 2608 30 view .LVU6941
 26610 0002 184B     		ldr	r3, .L1932
 26611 0004 1B68     		ldr	r3, [r3]
2608:src/xeq.c     **** 	unsigned int pc = origpc;
 26612              		.loc 1 2608 21 view .LVU6942
 26613 0006 B3F8E067 		ldrh	r6, [r3, #2016]
 26614              	.LVL2040:
2609:src/xeq.c     **** 
 26615              		.loc 1 2609 2 is_stmt 1 view .LVU6943
2611:src/xeq.c     **** 		pc -= arg + 1;
 26616              		.loc 1 2611 2 view .LVU6944
2611:src/xeq.c     **** 		pc -= arg + 1;
 26617              		.loc 1 2611 6 is_stmt 0 view .LVU6945
 26618 000a B30B     		lsrs	r3, r6, #14
2611:src/xeq.c     **** 		pc -= arg + 1;
 26619              		.loc 1 2611 5 view .LVU6946
 26620 000c 032B     		cmp	r3, #3
2607:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26621              		.loc 1 2607 46 view .LVU6947
 26622 000e 0446     		mov	r4, r0
 26623 0010 0D46     		mov	r5, r1
2611:src/xeq.c     **** 		pc -= arg + 1;
 26624              		.loc 1 2611 5 view .LVU6948
 26625 0012 1FD0     		beq	.L1929
2613:src/xeq.c     **** 		if ( Running ) {
 26626              		.loc 1 2613 14 is_stmt 1 view .LVU6949
2613:src/xeq.c     **** 		if ( Running ) {
 26627              		.loc 1 2613 17 is_stmt 0 view .LVU6950
 26628 0014 98B1     		cbz	r0, .L1921
2614:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26629              		.loc 1 2614 3 is_stmt 1 view .LVU6951
2614:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26630              		.loc 1 2614 8 is_stmt 0 view .LVU6952
 26631 0016 144B     		ldr	r3, .L1932+4
2614:src/xeq.c     **** 			// Handles the case properly that we are on last step
ARM GAS  /tmp/ccQQPlfu.s 			page 682


 26632              		.loc 1 2614 6 view .LVU6953
 26633 0018 1B68     		ldr	r3, [r3]
 26634 001a F3B9     		cbnz	r3, .L1930
 26635 001c 3046     		mov	r0, r6
 26636              	.LVL2041:
 26637              	.L1916:
2614:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26638              		.loc 1 2614 6 view .LVU6954
 26639 001e 134F     		ldr	r7, .L1932+8
 26640 0020 00E0     		b	.L1918
 26641              	.L1931:
2620:src/xeq.c     **** 		if (PcWrapped) {
 26642              		.loc 1 2620 18 discriminator 1 view .LVU6955
 26643 0022 33B9     		cbnz	r3, .L1919
 26644              	.L1918:
2618:src/xeq.c     **** 			pc = do_dec(pc, 1);
 26645              		.loc 1 2618 3 is_stmt 1 discriminator 2 view .LVU6956
2619:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 26646              		.loc 1 2619 4 discriminator 2 view .LVU6957
2619:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 26647              		.loc 1 2619 9 is_stmt 0 discriminator 2 view .LVU6958
 26648 0024 0121     		movs	r1, #1
 26649 0026 FFF7FEFF 		bl	do_dec
 26650              	.LVL2042:
2620:src/xeq.c     **** 		if (PcWrapped) {
 26651              		.loc 1 2620 11 is_stmt 1 discriminator 2 view .LVU6959
2620:src/xeq.c     **** 		if (PcWrapped) {
 26652              		.loc 1 2620 3 is_stmt 0 discriminator 2 view .LVU6960
 26653 002a 013C     		subs	r4, r4, #1
 26654              	.LVL2043:
2620:src/xeq.c     **** 		if (PcWrapped) {
 26655              		.loc 1 2620 18 discriminator 2 view .LVU6961
 26656 002c 3B68     		ldr	r3, [r7]
2620:src/xeq.c     **** 		if (PcWrapped) {
 26657              		.loc 1 2620 3 discriminator 2 view .LVU6962
 26658 002e F8D1     		bne	.L1931
2621:src/xeq.c     **** 			report_err(ERR_RANGE);
 26659              		.loc 1 2621 3 is_stmt 1 view .LVU6963
2621:src/xeq.c     **** 			report_err(ERR_RANGE);
 26660              		.loc 1 2621 6 is_stmt 0 view .LVU6964
 26661 0030 33B1     		cbz	r3, .L1915
 26662              	.L1919:
2622:src/xeq.c     **** 			return;
 26663              		.loc 1 2622 4 is_stmt 1 view .LVU6965
 26664              	.LVL2044:
 26665              	.LBB3561:
 26666              	.LBI3561:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26667              		.loc 1 540 5 view .LVU6966
 26668              	.LBB3562:
 541:src/xeq.c     **** 		Error = e;
 26669              		.loc 1 541 2 view .LVU6967
 541:src/xeq.c     **** 		Error = e;
 26670              		.loc 1 541 12 is_stmt 0 view .LVU6968
 26671 0032 0F4B     		ldr	r3, .L1932+12
 541:src/xeq.c     **** 		Error = e;
 26672              		.loc 1 541 5 view .LVU6969
ARM GAS  /tmp/ccQQPlfu.s 			page 683


 26673 0034 1A68     		ldr	r2, [r3]
 26674 0036 0AB9     		cbnz	r2, .L1913
 26675              	.LVL2045:
 26676              	.LBB3563:
 26677              	.LBI3563:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26678              		.loc 1 540 5 is_stmt 1 view .LVU6970
 26679              	.LBB3564:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 26680              		.loc 1 542 3 view .LVU6971
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 26681              		.loc 1 542 9 is_stmt 0 view .LVU6972
 26682 0038 0822     		movs	r2, #8
 26683 003a 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 26684              		.loc 1 543 3 is_stmt 1 view .LVU6973
 26685              	.LVL2046:
 26686              	.L1913:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 26687              		.loc 1 543 3 is_stmt 0 view .LVU6974
 26688              	.LBE3564:
 26689              	.LBE3563:
 26690              	.LBE3562:
 26691              	.LBE3561:
2627:src/xeq.c     **** 
 26692              		.loc 1 2627 1 view .LVU6975
 26693 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 26694              	.LVL2047:
 26695              	.L1921:
2627:src/xeq.c     **** 
 26696              		.loc 1 2627 1 view .LVU6976
 26697 003e 3046     		mov	r0, r6
 26698              	.LVL2048:
 26699              	.L1915:
2626:src/xeq.c     **** }
 26700              		.loc 1 2626 2 is_stmt 1 view .LVU6977
 26701 0040 A5F13901 		sub	r1, r5, #57
 26702 0044 B1FA81F1 		clz	r1, r1
 26703 0048 3246     		mov	r2, r6
 26704 004a 4909     		lsrs	r1, r1, #5
2627:src/xeq.c     **** 
 26705              		.loc 1 2627 1 is_stmt 0 view .LVU6978
 26706 004c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 26707              		.cfi_remember_state
 26708              		.cfi_restore 14
 26709              		.cfi_restore 7
 26710              		.cfi_restore 6
 26711              		.cfi_restore 5
 26712              		.cfi_restore 4
 26713              		.cfi_restore 3
 26714              		.cfi_def_cfa_offset 0
 26715              	.LVL2049:
2626:src/xeq.c     **** }
 26716              		.loc 1 2626 2 view .LVU6979
 26717 0050 FFF7FEBF 		b	gsbgto
 26718              	.LVL2050:
 26719              	.L1929:
ARM GAS  /tmp/ccQQPlfu.s 			page 684


 26720              		.cfi_restore_state
2612:src/xeq.c     ****         else if (arg) {
 26721              		.loc 1 2612 3 is_stmt 1 view .LVU6980
2612:src/xeq.c     ****         else if (arg) {
 26722              		.loc 1 2612 6 is_stmt 0 view .LVU6981
 26723 0054 731E     		subs	r3, r6, #1
 26724 0056 181A     		subs	r0, r3, r0
 26725              	.LVL2051:
2612:src/xeq.c     ****         else if (arg) {
 26726              		.loc 1 2612 6 view .LVU6982
 26727 0058 F2E7     		b	.L1915
 26728              	.LVL2052:
 26729              	.L1930:
2616:src/xeq.c     **** 		}
 26730              		.loc 1 2616 4 is_stmt 1 view .LVU6983
2616:src/xeq.c     **** 		}
 26731              		.loc 1 2616 9 is_stmt 0 view .LVU6984
 26732 005a 0121     		movs	r1, #1
 26733              	.LVL2053:
2616:src/xeq.c     **** 		}
 26734              		.loc 1 2616 9 view .LVU6985
 26735 005c 3046     		mov	r0, r6
 26736              	.LVL2054:
2616:src/xeq.c     **** 		}
 26737              		.loc 1 2616 9 view .LVU6986
 26738 005e FFF7FEFF 		bl	do_dec
 26739              	.LVL2055:
2616:src/xeq.c     **** 		}
 26740              		.loc 1 2616 9 view .LVU6987
 26741 0062 DCE7     		b	.L1916
 26742              	.L1933:
 26743              		.align	2
 26744              	.L1932:
 26745 0064 00000000 		.word	main_ram
 26746 0068 00000000 		.word	Running
 26747 006c 00000000 		.word	PcWrapped
 26748 0070 00000000 		.word	Error
 26749              		.cfi_endproc
 26750              	.LFE183:
 26752              		.section	.text.usergsb_common,"ax",%progbits
 26753              		.align	1
 26754              		.p2align 2,,3
 26755              		.syntax unified
 26756              		.thumb
 26757              		.thumb_func
 26758              		.fpu fpv4-sp-d16
 26760              	usergsb_common:
 26761              	.LVL2056:
 26762              	.LFB157:
2288:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26763              		.loc 1 2288 55 is_stmt 1 view -0
 26764              		.cfi_startproc
 26765              		@ args = 0, pretend = 0, frame = 0
 26766              		@ frame_needed = 0, uses_anonymous_args = 0
2289:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26767              		.loc 1 2289 2 view .LVU6989
2288:src/xeq.c     **** 	const unsigned int pc = state_pc();
ARM GAS  /tmp/ccQQPlfu.s 			page 685


 26768              		.loc 1 2288 55 is_stmt 0 view .LVU6990
 26769 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 26770              		.cfi_def_cfa_offset 24
 26771              		.cfi_offset 4, -24
 26772              		.cfi_offset 5, -20
 26773              		.cfi_offset 6, -16
 26774              		.cfi_offset 7, -12
 26775              		.cfi_offset 8, -8
 26776              		.cfi_offset 14, -4
2289:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26777              		.loc 1 2289 26 view .LVU6991
 26778 0004 1C4D     		ldr	r5, .L1938
2290:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26779              		.loc 1 2290 2 view .LVU6992
 26780 0006 1D4F     		ldr	r7, .L1938+4
2289:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26781              		.loc 1 2289 26 view .LVU6993
 26782 0008 2B68     		ldr	r3, [r5]
2290:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26783              		.loc 1 2290 2 view .LVU6994
 26784 000a 3A68     		ldr	r2, [r7]
2289:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26785              		.loc 1 2289 21 view .LVU6995
 26786 000c B3F8E047 		ldrh	r4, [r3, #2016]
 26787              	.LVL2057:
2290:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26788              		.loc 1 2290 2 is_stmt 1 view .LVU6996
2292:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 26789              		.loc 1 2292 2 is_stmt 0 view .LVU6997
 26790 0010 DFF87480 		ldr	r8, .L1938+16
2288:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26791              		.loc 1 2288 55 view .LVU6998
 26792 0014 0646     		mov	r6, r0
2290:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26793              		.loc 1 2290 2 view .LVU6999
 26794 0016 0121     		movs	r1, #1
 26795 0018 2046     		mov	r0, r4
 26796              	.LVL2058:
2290:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26797              		.loc 1 2290 2 view .LVU7000
 26798 001a FFF7FEFF 		bl	gsbgto
 26799              	.LVL2059:
2291:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26800              		.loc 1 2291 2 is_stmt 1 view .LVU7001
2291:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26801              		.loc 1 2291 16 is_stmt 0 view .LVU7002
 26802 001e 2B68     		ldr	r3, [r5]
2291:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26803              		.loc 1 2291 2 view .LVU7003
 26804 0020 2046     		mov	r0, r4
 26805 0022 B3F9DE27 		ldrsh	r2, [r3, #2014]
 26806 0026 0121     		movs	r1, #1
 26807 0028 FFF7FEFF 		bl	gsbgto
 26808              	.LVL2060:
2292:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 26809              		.loc 1 2292 2 is_stmt 1 view .LVU7004
 26810 002c 2046     		mov	r0, r4
ARM GAS  /tmp/ccQQPlfu.s 			page 686


 26811 002e D8F80020 		ldr	r2, [r8]
 26812 0032 0121     		movs	r1, #1
 26813 0034 FFF7FEFF 		bl	gsbgto
 26814              	.LVL2061:
2293:src/xeq.c     **** 
 26815              		.loc 1 2293 2 view .LVU7005
 26816 0038 2246     		mov	r2, r4
 26817 003a 3046     		mov	r0, r6
 26818 003c 0121     		movs	r1, #1
 26819 003e FFF7FEFF 		bl	gsbgto
 26820              	.LVL2062:
2295:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26821              		.loc 1 2295 2 view .LVU7006
2296:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26822              		.loc 1 2296 9 is_stmt 0 view .LVU7007
 26823 0042 2A68     		ldr	r2, [r5]
2296:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26824              		.loc 1 2296 20 view .LVU7008
 26825 0044 0E4B     		ldr	r3, .L1938+8
 26826 0046 B2F9DE07 		ldrsh	r0, [r2, #2014]
 26827 004a 1968     		ldr	r1, [r3]
2298:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26828              		.loc 1 2298 6 view .LVU7009
 26829 004c 0D4C     		ldr	r4, .L1938+12
 26830              	.LVL2063:
2296:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26831              		.loc 1 2296 20 view .LVU7010
 26832 004e 31F81030 		ldrh	r3, [r1, r0, lsl #1]
2298:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26833              		.loc 1 2298 5 view .LVU7011
 26834 0052 2468     		ldr	r4, [r4]
2297:src/xeq.c     **** 	if (! Running)
 26835              		.loc 1 2297 12 view .LVU7012
 26836 0054 D8F80050 		ldr	r5, [r8]
2295:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26837              		.loc 1 2295 13 view .LVU7013
 26838 0058 0026     		movs	r6, #0
2296:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26839              		.loc 1 2296 20 view .LVU7014
 26840 005a 43F40053 		orr	r3, r3, #8192
2295:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26841              		.loc 1 2295 13 view .LVU7015
 26842 005e 3E60     		str	r6, [r7]
2296:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26843              		.loc 1 2296 2 is_stmt 1 view .LVU7016
2296:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26844              		.loc 1 2296 20 is_stmt 0 view .LVU7017
 26845 0060 21F81030 		strh	r3, [r1, r0, lsl #1]	@ movhi
2297:src/xeq.c     **** 	if (! Running)
 26846              		.loc 1 2297 2 is_stmt 1 view .LVU7018
2297:src/xeq.c     **** 	if (! Running)
 26847              		.loc 1 2297 12 is_stmt 0 view .LVU7019
 26848 0064 A2F8DE57 		strh	r5, [r2, #2014]	@ movhi
2298:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26849              		.loc 1 2298 2 is_stmt 1 view .LVU7020
2298:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26850              		.loc 1 2298 5 is_stmt 0 view .LVU7021
ARM GAS  /tmp/ccQQPlfu.s 			page 687


 26851 0068 0CB1     		cbz	r4, .L1937
2301:src/xeq.c     **** 
 26852              		.loc 1 2301 1 view .LVU7022
 26853 006a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 26854              	.L1937:
2299:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 26855              		.loc 1 2299 3 is_stmt 1 view .LVU7023
2301:src/xeq.c     **** 
 26856              		.loc 1 2301 1 is_stmt 0 view .LVU7024
 26857 006e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 26858              		.cfi_restore 14
 26859              		.cfi_restore 8
 26860              		.cfi_restore 7
 26861              		.cfi_restore 6
 26862              		.cfi_restore 5
 26863              		.cfi_restore 4
 26864              		.cfi_def_cfa_offset 0
2299:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 26865              		.loc 1 2299 3 view .LVU7025
 26866 0072 FFF7FEBF 		b	set_running_on
 26867              	.LVL2064:
 26868              	.L1939:
 26869 0076 00BF     		.align	2
 26870              	.L1938:
 26871 0078 00000000 		.word	main_ram
 26872 007c 00000000 		.word	XromUserPc
 26873 0080 00000000 		.word	RetStk
 26874 0084 00000000 		.word	Running
 26875 0088 00000000 		.word	UserLocalRegs
 26876              		.cfi_endproc
 26877              	.LFE157:
 26879              		.section	.text.do_usergsb,"ax",%progbits
 26880              		.align	1
 26881              		.p2align 2,,3
 26882              		.global	do_usergsb
 26883              		.syntax unified
 26884              		.thumb
 26885              		.thumb_func
 26886              		.fpu fpv4-sp-d16
 26888              	do_usergsb:
 26889              	.LVL2065:
 26890              	.LFB158:
2307:src/xeq.c     **** 	usergsb_common(XromUserPc);
 26891              		.loc 1 2307 32 is_stmt 1 view -0
 26892              		.cfi_startproc
 26893              		@ args = 0, pretend = 0, frame = 0
 26894              		@ frame_needed = 0, uses_anonymous_args = 0
2308:src/xeq.c     ****         fill(OP_FILL);
 26895              		.loc 1 2308 2 view .LVU7027
2307:src/xeq.c     **** 	usergsb_common(XromUserPc);
 26896              		.loc 1 2307 32 is_stmt 0 view .LVU7028
 26897 0000 08B5     		push	{r3, lr}
 26898              		.cfi_def_cfa_offset 8
 26899              		.cfi_offset 3, -8
 26900              		.cfi_offset 14, -4
2308:src/xeq.c     ****         fill(OP_FILL);
 26901              		.loc 1 2308 2 view .LVU7029
ARM GAS  /tmp/ccQQPlfu.s 			page 688


 26902 0002 044B     		ldr	r3, .L1942
 26903 0004 1888     		ldrh	r0, [r3]
 26904              	.LVL2066:
2308:src/xeq.c     ****         fill(OP_FILL);
 26905              		.loc 1 2308 2 view .LVU7030
 26906 0006 FFF7FEFF 		bl	usergsb_common
 26907              	.LVL2067:
2309:src/xeq.c     **** }
 26908              		.loc 1 2309 9 is_stmt 1 view .LVU7031
2310:src/xeq.c     **** 
 26909              		.loc 1 2310 1 is_stmt 0 view .LVU7032
 26910 000a BDE80840 		pop	{r3, lr}
 26911              		.cfi_restore 14
 26912              		.cfi_restore 3
 26913              		.cfi_def_cfa_offset 0
2309:src/xeq.c     **** }
 26914              		.loc 1 2309 9 view .LVU7033
 26915 000e 0C20     		movs	r0, #12
 26916 0010 FFF7FEBF 		b	fill
 26917              	.LVL2068:
 26918              	.L1943:
 26919              		.align	2
 26920              	.L1942:
 26921 0014 00000000 		.word	XromUserPc
 26922              		.cfi_endproc
 26923              	.LFE158:
 26925              		.section	.text.cmdmultigto,"ax",%progbits
 26926              		.align	1
 26927              		.p2align 2,,3
 26928              		.global	cmdmultigto
 26929              		.syntax unified
 26930              		.thumb
 26931              		.thumb_func
 26932              		.fpu fpv4-sp-d16
 26934              	cmdmultigto:
 26935              	.LVL2069:
 26936              	.LFB165:
2366:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26937              		.loc 1 2366 54 is_stmt 1 view -0
 26938              		.cfi_startproc
 26939              		@ args = 0, pretend = 0, frame = 0
 26940              		@ frame_needed = 0, uses_anonymous_args = 0
2367:src/xeq.c     **** 		// In XROM the command behaves differently!
 26941              		.loc 1 2367 2 view .LVU7035
2367:src/xeq.c     **** 		// In XROM the command behaves differently!
 26942              		.loc 1 2367 5 is_stmt 0 view .LVU7036
 26943 0000 0229     		cmp	r1, #2
2366:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26944              		.loc 1 2366 54 view .LVU7037
 26945 0002 10B5     		push	{r4, lr}
 26946              		.cfi_def_cfa_offset 8
 26947              		.cfi_offset 4, -8
 26948              		.cfi_offset 14, -4
2366:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26949              		.loc 1 2366 54 view .LVU7038
 26950 0004 0346     		mov	r3, r0
 26951 0006 0C46     		mov	r4, r1
ARM GAS  /tmp/ccQQPlfu.s 			page 689


2367:src/xeq.c     **** 		// In XROM the command behaves differently!
 26952              		.loc 1 2367 5 view .LVU7039
 26953 0008 06D1     		bne	.L1945
 26954              	.LBB3565:
 26955              	.LBI3565:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 26956              		.loc 1 185 5 is_stmt 1 view .LVU7040
 26957              	.LBB3566:
 186:src/xeq.c     **** }
 26958              		.loc 1 186 2 view .LVU7041
 186:src/xeq.c     **** }
 26959              		.loc 1 186 9 is_stmt 0 view .LVU7042
 26960 000a 104A     		ldr	r2, .L1949
 26961 000c 1268     		ldr	r2, [r2]
 26962 000e B2F8E027 		ldrh	r2, [r2, #2016]
 26963              	.LBE3566:
 26964              	.LBE3565:
2367:src/xeq.c     **** 		// In XROM the command behaves differently!
 26965              		.loc 1 2367 22 view .LVU7043
 26966 0012 920B     		lsrs	r2, r2, #14
 26967 0014 032A     		cmp	r2, #3
 26968 0016 0BD0     		beq	.L1948
 26969              	.L1945:
2376:src/xeq.c     **** 	}
 26970              		.loc 1 2376 3 is_stmt 1 view .LVU7044
 26971 0018 0121     		movs	r1, #1
 26972              	.LVL2070:
2376:src/xeq.c     **** 	}
 26973              		.loc 1 2376 3 is_stmt 0 view .LVU7045
 26974 001a 1846     		mov	r0, r3
 26975              	.LVL2071:
2376:src/xeq.c     **** 	}
 26976              		.loc 1 2376 3 view .LVU7046
 26977 001c FFF7FEFF 		bl	findmultilbl
 26978              	.LVL2072:
2376:src/xeq.c     **** 	}
 26979              		.loc 1 2376 3 view .LVU7047
 26980 0020 0146     		mov	r1, r0
 26981 0022 E01E     		subs	r0, r4, #3
 26982 0024 18BF     		it	ne
 26983 0026 0120     		movne	r0, #1
2378:src/xeq.c     **** 
 26984              		.loc 1 2378 1 view .LVU7048
 26985 0028 BDE81040 		pop	{r4, lr}
 26986              		.cfi_remember_state
 26987              		.cfi_restore 14
 26988              		.cfi_restore 4
 26989              		.cfi_def_cfa_offset 0
2376:src/xeq.c     **** 	}
 26990              		.loc 1 2376 3 view .LVU7049
 26991 002c FFF7FEBF 		b	cmdgtocommon
 26992              	.LVL2073:
 26993              	.L1948:
 26994              		.cfi_restore_state
 26995              	.LBB3567:
2369:src/xeq.c     **** 		if (target != 0)
 26996              		.loc 1 2369 3 is_stmt 1 view .LVU7050
ARM GAS  /tmp/ccQQPlfu.s 			page 690


2369:src/xeq.c     **** 		if (target != 0)
 26997              		.loc 1 2369 31 is_stmt 0 view .LVU7051
 26998 0030 0021     		movs	r1, #0
 26999              	.LVL2074:
2369:src/xeq.c     **** 		if (target != 0)
 27000              		.loc 1 2369 31 view .LVU7052
 27001 0032 FFF7FEFF 		bl	findmultilbl
 27002              	.LVL2075:
2369:src/xeq.c     **** 		if (target != 0)
 27003              		.loc 1 2369 22 view .LVU7053
 27004 0036 80B2     		uxth	r0, r0
 27005              	.LVL2076:
2370:src/xeq.c     **** 			usergsb_common(target); 
 27006              		.loc 1 2370 3 is_stmt 1 view .LVU7054
2370:src/xeq.c     **** 			usergsb_common(target); 
 27007              		.loc 1 2370 6 is_stmt 0 view .LVU7055
 27008 0038 18B1     		cbz	r0, .L1946
2371:src/xeq.c     **** 		else
 27009              		.loc 1 2371 4 is_stmt 1 view .LVU7056
 27010              	.LBE3567:
2378:src/xeq.c     **** 
 27011              		.loc 1 2378 1 is_stmt 0 view .LVU7057
 27012 003a BDE81040 		pop	{r4, lr}
 27013              		.cfi_remember_state
 27014              		.cfi_restore 14
 27015              		.cfi_restore 4
 27016              		.cfi_def_cfa_offset 0
 27017              	.LBB3568:
2371:src/xeq.c     **** 		else
 27018              		.loc 1 2371 4 view .LVU7058
 27019 003e FFF7FEBF 		b	usergsb_common
 27020              	.LVL2077:
 27021              	.L1946:
 27022              		.cfi_restore_state
2373:src/xeq.c     **** 	}
 27023              		.loc 1 2373 4 is_stmt 1 view .LVU7059
 27024              	.LBE3568:
2378:src/xeq.c     **** 
 27025              		.loc 1 2378 1 is_stmt 0 view .LVU7060
 27026 0042 BDE81040 		pop	{r4, lr}
 27027              		.cfi_restore 14
 27028              		.cfi_restore 4
 27029              		.cfi_def_cfa_offset 0
 27030              	.LBB3569:
2373:src/xeq.c     **** 	}
 27031              		.loc 1 2373 4 view .LVU7061
 27032 0046 FFF7FEBF 		b	incpc
 27033              	.LVL2078:
 27034              	.L1950:
2373:src/xeq.c     **** 	}
 27035              		.loc 1 2373 4 view .LVU7062
 27036 004a 00BF     		.align	2
 27037              	.L1949:
 27038 004c 00000000 		.word	main_ram
 27039              	.LBE3569:
 27040              		.cfi_endproc
 27041              	.LFE165:
ARM GAS  /tmp/ccQQPlfu.s 			page 691


 27043              		.section	.text.store_a_to_d,"ax",%progbits
 27044              		.align	1
 27045              		.p2align 2,,3
 27046              		.global	store_a_to_d
 27047              		.syntax unified
 27048              		.thumb
 27049              		.thumb_func
 27050              		.fpu fpv4-sp-d16
 27052              	store_a_to_d:
 27053              	.LVL2079:
 27054              	.LFB263:
5818:src/xeq.c     **** 
5819:src/xeq.c     **** /* Command to stash registers A through D into volatile RAM and to restore them
5820:src/xeq.c     ****  * again.
5821:src/xeq.c     ****  */
5822:src/xeq.c     **** void store_a_to_d(enum nilop op) {
 27055              		.loc 1 5822 34 is_stmt 1 view -0
 27056              		.cfi_startproc
 27057              		@ args = 0, pretend = 0, frame = 0
 27058              		@ frame_needed = 0, uses_anonymous_args = 0
5823:src/xeq.c     **** 	const void *src = XromA2D;
 27059              		.loc 1 5823 2 view .LVU7064
5824:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 27060              		.loc 1 5824 2 view .LVU7065
5822:src/xeq.c     **** 	const void *src = XromA2D;
 27061              		.loc 1 5822 34 is_stmt 0 view .LVU7066
 27062 0000 10B5     		push	{r4, lr}
 27063              		.cfi_def_cfa_offset 8
 27064              		.cfi_offset 4, -8
 27065              		.cfi_offset 14, -4
5822:src/xeq.c     **** 	const void *src = XromA2D;
 27066              		.loc 1 5822 34 view .LVU7067
 27067 0002 0446     		mov	r4, r0
 27068              		.loc 1 5824 15 view .LVU7068
 27069 0004 6820     		movs	r0, #104
 27070              	.LVL2080:
 27071              		.loc 1 5824 15 view .LVU7069
 27072 0006 FFF7FEFF 		bl	get_reg_n
 27073              	.LVL2081:
5825:src/xeq.c     **** 
5826:src/xeq.c     **** 	if (op == OP_SAVEA2D) {
 27074              		.loc 1 5826 2 is_stmt 1 view .LVU7070
 27075              		.loc 1 5826 5 is_stmt 0 view .LVU7071
 27076 000a 802C     		cmp	r4, #128
5827:src/xeq.c     **** 		src = dest;
 27077              		.loc 1 5827 7 view .LVU7072
 27078 000c 08BF     		it	eq
 27079 000e 0146     		moveq	r1, r0
5828:src/xeq.c     **** 		dest = XromA2D;
5829:src/xeq.c     **** 	}
5830:src/xeq.c     **** 	xcopy(dest, src, sizeof(REGISTER) * 4);
5831:src/xeq.c     **** }
 27080              		.loc 1 5831 1 view .LVU7073
 27081 0010 BDE81040 		pop	{r4, lr}
 27082              		.cfi_restore 14
 27083              		.cfi_restore 4
 27084              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccQQPlfu.s 			page 692


5828:src/xeq.c     **** 		dest = XromA2D;
 27085              		.loc 1 5828 8 view .LVU7074
 27086 0014 0CBF     		ite	eq
 27087 0016 0248     		ldreq	r0, .L1955
 27088              	.LVL2082:
5823:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 27089              		.loc 1 5823 14 view .LVU7075
 27090 0018 0149     		ldrne	r1, .L1955
 27091              	.LVL2083:
5830:src/xeq.c     **** }
 27092              		.loc 1 5830 2 is_stmt 1 view .LVU7076
 27093 001a 4022     		movs	r2, #64
 27094 001c FFF7FEBF 		b	xcopy
 27095              	.LVL2084:
 27096              	.L1956:
5830:src/xeq.c     **** }
 27097              		.loc 1 5830 2 is_stmt 0 view .LVU7077
 27098              		.align	2
 27099              	.L1955:
 27100 0020 00000000 		.word	XromA2D
 27101              		.cfi_endproc
 27102              	.LFE263:
 27104              		.section	.text.cmdlocr,"ax",%progbits
 27105              		.align	1
 27106              		.p2align 2,,3
 27107              		.global	cmdlocr
 27108              		.syntax unified
 27109              		.thumb
 27110              		.thumb_func
 27111              		.fpu fpv4-sp-d16
 27113              	cmdlocr:
 27114              	.LVL2085:
 27115              	.LFB264:
5832:src/xeq.c     **** 
5833:src/xeq.c     **** /*
5834:src/xeq.c     ****  *  Command to support local variables.
5835:src/xeq.c     ****  *  A stack frame is constructed:
5836:src/xeq.c     ****  *	marker including size of frame,
5837:src/xeq.c     ****  *	register + flag area.
5838:src/xeq.c     ****  *  Registers must reside on even stack positions
5839:src/xeq.c     ****  *  so the flag word is either at the top or at the bottom of the frame.
5840:src/xeq.c     ****  */
5841:src/xeq.c     **** void cmdlocr(unsigned int arg, enum rarg op) {
 27116              		.loc 1 5841 46 is_stmt 1 view -0
 27117              		.cfi_startproc
 27118              		@ args = 0, pretend = 0, frame = 0
 27119              		@ frame_needed = 0, uses_anonymous_args = 0
5842:src/xeq.c     **** 	short int sp = RetStkPtr;
 27120              		.loc 1 5842 2 view .LVU7079
5841:src/xeq.c     **** 	short int sp = RetStkPtr;
 27121              		.loc 1 5841 46 is_stmt 0 view .LVU7080
 27122 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 27123              		.cfi_def_cfa_offset 40
 27124              		.cfi_offset 3, -40
 27125              		.cfi_offset 4, -36
 27126              		.cfi_offset 5, -32
 27127              		.cfi_offset 6, -28
ARM GAS  /tmp/ccQQPlfu.s 			page 693


 27128              		.cfi_offset 7, -24
 27129              		.cfi_offset 8, -20
 27130              		.cfi_offset 9, -16
 27131              		.cfi_offset 10, -12
 27132              		.cfi_offset 11, -8
 27133              		.cfi_offset 14, -4
 27134              		.loc 1 5842 17 view .LVU7081
 27135 0004 554F     		ldr	r7, .L1977
 27136 0006 3C68     		ldr	r4, [r7]
 27137              	.LBB3579:
 27138              	.LBB3580:
1113:src/xeq.c     **** }
 27139              		.loc 1 1113 24 view .LVU7082
 27140 0008 B4F8E827 		ldrh	r2, [r4, #2024]
 27141              	.LBE3580:
 27142              	.LBE3579:
 27143              		.loc 1 5842 12 view .LVU7083
 27144 000c B4F9E267 		ldrsh	r6, [r4, #2018]
 27145              	.LVL2086:
5843:src/xeq.c     **** 	int size = (arg << (is_dblmode() ? 3 : 2)) + 2;
 27146              		.loc 1 5843 2 is_stmt 1 view .LVU7084
 27147              	.LBB3582:
 27148              	.LBI3579:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27149              		.loc 1 1112 5 view .LVU7085
 27150              	.LBB3581:
1113:src/xeq.c     **** }
 27151              		.loc 1 1113 2 view .LVU7086
1113:src/xeq.c     **** }
 27152              		.loc 1 1113 24 is_stmt 0 view .LVU7087
 27153 0010 44F20103 		movw	r3, #16385
 27154              	.LBE3581:
 27155              	.LBE3582:
 27156              		.loc 1 5843 39 view .LVU7088
 27157 0014 1340     		ands	r3, r3, r2
 27158 0016 B3F5804F 		cmp	r3, #16384
 27159 001a 0CBF     		ite	eq
 27160 001c 0325     		moveq	r5, #3
 27161 001e 0225     		movne	r5, #2
 27162              		.loc 1 5843 18 view .LVU7089
 27163 0020 A840     		lsls	r0, r0, r5
 27164              	.LVL2087:
 27165              		.loc 1 5843 45 view .LVU7090
 27166 0022 851C     		adds	r5, r0, #2
 27167              	.LVL2088:
5844:src/xeq.c     **** 	const unsigned short marker = LOCAL_MARKER | size;
 27168              		.loc 1 5844 2 is_stmt 1 view .LVU7091
 27169              		.loc 1 5844 45 is_stmt 0 view .LVU7092
 27170 0024 1FFA85F8 		uxth	r8, r5
 27171              	.LVL2089:
5845:src/xeq.c     **** 	int old_size = 0;
 27172              		.loc 1 5845 2 is_stmt 1 view .LVU7093
5846:src/xeq.c     **** 	short unsigned int old_flags = 0;
 27173              		.loc 1 5846 2 view .LVU7094
5847:src/xeq.c     **** 
5848:src/xeq.c     **** 	if (sp != 0 && sp == LocalRegs) {
 27174              		.loc 1 5848 2 view .LVU7095
ARM GAS  /tmp/ccQQPlfu.s 			page 694


 27175              		.loc 1 5848 5 is_stmt 0 view .LVU7096
 27176 0028 7EB9     		cbnz	r6, .L1959
 27177              	.LVL2090:
5849:src/xeq.c     **** 		// resize required
5850:src/xeq.c     **** 		old_size = local_levels();
5851:src/xeq.c     **** 		sp += old_size;
5852:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
5853:src/xeq.c     **** 	}
5854:src/xeq.c     **** 	// compute space needed
5855:src/xeq.c     **** 	sp -= size;
 27178              		.loc 1 5855 2 is_stmt 1 view .LVU7097
5856:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27179              		.loc 1 5856 10 is_stmt 0 view .LVU7098
 27180 002a 4D4B     		ldr	r3, .L1977+4
5855:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27181              		.loc 1 5855 5 view .LVU7099
 27182 002c C8F10004 		rsb	r4, r8, #0
 27183              		.loc 1 5856 5 view .LVU7100
 27184 0030 1B68     		ldr	r3, [r3]
5855:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27185              		.loc 1 5855 5 view .LVU7101
 27186 0032 24B2     		sxth	r4, r4
 27187              	.LVL2091:
 27188              		.loc 1 5856 2 is_stmt 1 view .LVU7102
 27189              		.loc 1 5856 6 is_stmt 0 view .LVU7103
 27190 0034 6242     		rsbs	r2, r4, #0
 27191              		.loc 1 5856 5 view .LVU7104
 27192 0036 9A42     		cmp	r2, r3
 27193 0038 42DC     		bgt	.L1965
 27194 003a 4FEA4409 		lsl	r9, r4, #1
 27195 003e DFF828B1 		ldr	fp, .L1977+12
 27196 0042 4FEA450A 		lsl	r10, r5, #1
 27197 0046 4B46     		mov	r3, r9
 27198 0048 13E0     		b	.L1963
 27199              	.LVL2092:
 27200              	.L1959:
5848:src/xeq.c     **** 		// resize required
 27201              		.loc 1 5848 23 discriminator 1 view .LVU7105
 27202 004a B4F9DE47 		ldrsh	r4, [r4, #2014]
5848:src/xeq.c     **** 		// resize required
 27203              		.loc 1 5848 14 discriminator 1 view .LVU7106
 27204 004e B442     		cmp	r4, r6
 27205 0050 28D0     		beq	.L1964
5855:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27206              		.loc 1 5855 2 is_stmt 1 view .LVU7107
 27207              		.loc 1 5856 10 is_stmt 0 view .LVU7108
 27208 0052 434B     		ldr	r3, .L1977+4
5855:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27209              		.loc 1 5855 5 view .LVU7109
 27210 0054 A6EB0804 		sub	r4, r6, r8
 27211              		.loc 1 5856 5 view .LVU7110
 27212 0058 1B68     		ldr	r3, [r3]
5855:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27213              		.loc 1 5855 5 view .LVU7111
 27214 005a 24B2     		sxth	r4, r4
 27215              	.LVL2093:
 27216              		.loc 1 5856 2 is_stmt 1 view .LVU7112
ARM GAS  /tmp/ccQQPlfu.s 			page 695


 27217              		.loc 1 5856 6 is_stmt 0 view .LVU7113
 27218 005c 6242     		rsbs	r2, r4, #0
 27219              		.loc 1 5856 5 view .LVU7114
 27220 005e 9A42     		cmp	r2, r3
 27221 0060 2EDC     		bgt	.L1965
 27222 0062 4FEA4409 		lsl	r9, r4, #1
 27223 0066 DFF800B1 		ldr	fp, .L1977+12
 27224 006a 4FEA450A 		lsl	r10, r5, #1
 27225 006e 4B46     		mov	r3, r9
5846:src/xeq.c     **** 
 27226              		.loc 1 5846 21 view .LVU7115
 27227 0070 0026     		movs	r6, #0
 27228              	.LVL2094:
 27229              	.L1963:
5857:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
5858:src/xeq.c     **** 		return;
5859:src/xeq.c     **** 	}
5860:src/xeq.c     **** 	if ( old_size > 0 ) {
5861:src/xeq.c     **** 		// move previous contents to new destination
5862:src/xeq.c     **** 		int n;
5863:src/xeq.c     **** 		if (size > old_size) {
5864:src/xeq.c     **** 			n = old_size;
5865:src/xeq.c     **** 			size -= old_size;
5866:src/xeq.c     **** 		}
5867:src/xeq.c     **** 		else {
5868:src/xeq.c     **** 			n = size;
5869:src/xeq.c     **** 			size = 0;
5870:src/xeq.c     **** 		}
5871:src/xeq.c     **** 		xcopy(RetStk + sp, RetStk + LocalRegs, n + n);
5872:src/xeq.c     **** 	}
5873:src/xeq.c     **** 	// fill the rest with 0
5874:src/xeq.c     **** 	xset(RetStk + sp + old_size, 0, size + size);
 27230              		.loc 1 5874 2 is_stmt 1 view .LVU7116
 27231              		.loc 1 5874 19 is_stmt 0 view .LVU7117
 27232 0072 DBF80000 		ldr	r0, [fp]
 27233              		.loc 1 5874 2 view .LVU7118
 27234 0076 5246     		mov	r2, r10
 27235 0078 1844     		add	r0, r0, r3
 27236 007a 0021     		movs	r1, #0
 27237 007c FFF7FEFF 		bl	xset
 27238              	.LVL2095:
5875:src/xeq.c     **** 
5876:src/xeq.c     **** 	// set marker, pointers and flags
5877:src/xeq.c     **** 	RetStk[sp] = marker;
 27239              		.loc 1 5877 2 is_stmt 1 view .LVU7119
5878:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 27240              		.loc 1 5878 14 is_stmt 0 view .LVU7120
 27241 0080 3B68     		ldr	r3, [r7]
5877:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 27242              		.loc 1 5877 13 view .LVU7121
 27243 0082 DBF80020 		ldr	r2, [fp]
5844:src/xeq.c     **** 	int old_size = 0;
 27244              		.loc 1 5844 23 view .LVU7122
 27245 0086 48F48058 		orr	r8, r8, #4096
 27246              	.LVL2096:
5877:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 27247              		.loc 1 5877 13 view .LVU7123
ARM GAS  /tmp/ccQQPlfu.s 			page 696


 27248 008a 22F80980 		strh	r8, [r2, r9]	@ movhi
 27249              		.loc 1 5878 2 is_stmt 1 view .LVU7124
5879:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 27250              		.loc 1 5879 3 is_stmt 0 view .LVU7125
 27251 008e 0021     		movs	r1, #0
5878:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 27252              		.loc 1 5878 24 view .LVU7126
 27253 0090 A3F8DE47 		strh	r4, [r3, #2014]	@ movhi
5878:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 27254              		.loc 1 5878 12 view .LVU7127
 27255 0094 A3F8E247 		strh	r4, [r3, #2018]	@ movhi
 27256              		.loc 1 5879 2 is_stmt 1 view .LVU7128
 27257              		.loc 1 5879 3 is_stmt 0 view .LVU7129
 27258 0098 7020     		movs	r0, #112
 27259 009a FFF7FEFF 		bl	flag_word
 27260              	.LVL2097:
 27261              		.loc 1 5879 36 view .LVU7130
 27262 009e 0680     		strh	r6, [r0]	@ movhi
 27263              	.L1957:
5880:src/xeq.c     **** }
 27264              		.loc 1 5880 1 view .LVU7131
 27265 00a0 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27266              	.LVL2098:
 27267              	.L1964:
5850:src/xeq.c     **** 		sp += old_size;
 27268              		.loc 1 5850 3 is_stmt 1 view .LVU7132
 27269              	.LBB3583:
 27270              	.LBI3583:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 27271              		.loc 1 217 5 view .LVU7133
 27272              	.LBB3584:
 218:src/xeq.c     **** }
 27273              		.loc 1 218 2 view .LVU7134
 218:src/xeq.c     **** }
 27274              		.loc 1 218 57 is_stmt 0 view .LVU7135
 27275 00a4 002C     		cmp	r4, #0
 27276 00a6 13DB     		blt	.L1974
 218:src/xeq.c     **** }
 27277              		.loc 1 218 57 view .LVU7136
 27278              	.LBE3584:
 27279              	.LBE3583:
5851:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27280              		.loc 1 5851 3 is_stmt 1 view .LVU7137
 27281              	.LVL2099:
5852:src/xeq.c     **** 	}
 27282              		.loc 1 5852 3 view .LVU7138
5852:src/xeq.c     **** 	}
 27283              		.loc 1 5852 16 is_stmt 0 view .LVU7139
 27284 00a8 0021     		movs	r1, #0
 27285              	.LVL2100:
5852:src/xeq.c     **** 	}
 27286              		.loc 1 5852 16 view .LVU7140
 27287 00aa 7020     		movs	r0, #112
 27288 00ac FFF7FEFF 		bl	flag_word
 27289              	.LVL2101:
5856:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27290              		.loc 1 5856 10 view .LVU7141
ARM GAS  /tmp/ccQQPlfu.s 			page 697


 27291 00b0 2B4B     		ldr	r3, .L1977+4
5855:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27292              		.loc 1 5855 5 view .LVU7142
 27293 00b2 A4EB0804 		sub	r4, r4, r8
 27294              	.LVL2102:
5856:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27295              		.loc 1 5856 5 view .LVU7143
 27296 00b6 1B68     		ldr	r3, [r3]
5855:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27297              		.loc 1 5855 5 view .LVU7144
 27298 00b8 24B2     		sxth	r4, r4
5856:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27299              		.loc 1 5856 6 view .LVU7145
 27300 00ba 6242     		rsbs	r2, r4, #0
 27301              	.LVL2103:
5855:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27302              		.loc 1 5855 2 is_stmt 1 view .LVU7146
5856:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27303              		.loc 1 5856 2 view .LVU7147
5856:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27304              		.loc 1 5856 5 is_stmt 0 view .LVU7148
 27305 00bc 9A42     		cmp	r2, r3
 27306 00be 3EDD     		ble	.L1975
 27307              	.LVL2104:
 27308              	.L1965:
5857:src/xeq.c     **** 		return;
 27309              		.loc 1 5857 3 is_stmt 1 view .LVU7149
 27310              	.LBB3586:
 27311              	.LBI3586:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27312              		.loc 1 540 5 view .LVU7150
 27313              	.LBB3587:
 541:src/xeq.c     **** 		Error = e;
 27314              		.loc 1 541 2 view .LVU7151
 541:src/xeq.c     **** 		Error = e;
 27315              		.loc 1 541 12 is_stmt 0 view .LVU7152
 27316 00c0 284B     		ldr	r3, .L1977+8
 541:src/xeq.c     **** 		Error = e;
 27317              		.loc 1 541 5 view .LVU7153
 27318 00c2 1A68     		ldr	r2, [r3]
 27319 00c4 002A     		cmp	r2, #0
 27320 00c6 EBD1     		bne	.L1957
 27321              	.LVL2105:
 27322              	.LBB3588:
 27323              	.LBI3588:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27324              		.loc 1 540 5 is_stmt 1 view .LVU7154
 27325              	.LBB3589:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 27326              		.loc 1 542 3 view .LVU7155
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 27327              		.loc 1 542 9 is_stmt 0 view .LVU7156
 27328 00c8 0B22     		movs	r2, #11
 27329 00ca 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 27330              		.loc 1 543 3 is_stmt 1 view .LVU7157
 27331              	.LBE3589:
ARM GAS  /tmp/ccQQPlfu.s 			page 698


 27332              	.LBE3588:
 27333              	.LBE3587:
 27334              	.LBE3586:
 27335              		.loc 1 5880 1 is_stmt 0 view .LVU7158
 27336 00cc BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27337              	.LVL2106:
 27338              	.L1974:
 27339              	.LBB3590:
 27340              	.LBB3585:
 218:src/xeq.c     **** }
 27341              		.loc 1 218 25 view .LVU7159
 27342 00d0 DFF894B0 		ldr	fp, .L1977+12
 27343 00d4 DBF80030 		ldr	r3, [fp]
 27344 00d8 33F81490 		ldrh	r9, [r3, r4, lsl #1]
 27345 00dc C9F30B09 		ubfx	r9, r9, #0, #12
 27346              	.LVL2107:
 218:src/xeq.c     **** }
 27347              		.loc 1 218 25 view .LVU7160
 27348              	.LBE3585:
 27349              	.LBE3590:
5851:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27350              		.loc 1 5851 3 is_stmt 1 view .LVU7161
5851:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27351              		.loc 1 5851 6 is_stmt 0 view .LVU7162
 27352 00e0 4C44     		add	r4, r4, r9
5852:src/xeq.c     **** 	}
 27353              		.loc 1 5852 16 view .LVU7163
 27354 00e2 0021     		movs	r1, #0
 27355              	.LVL2108:
5852:src/xeq.c     **** 	}
 27356              		.loc 1 5852 16 view .LVU7164
 27357 00e4 7020     		movs	r0, #112
 27358 00e6 FFF7FEFF 		bl	flag_word
 27359              	.LVL2109:
5851:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27360              		.loc 1 5851 6 view .LVU7165
 27361 00ea A4B2     		uxth	r4, r4
 27362              	.LVL2110:
5852:src/xeq.c     **** 	}
 27363              		.loc 1 5852 3 is_stmt 1 view .LVU7166
5856:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27364              		.loc 1 5856 10 is_stmt 0 view .LVU7167
 27365 00ec 1C4B     		ldr	r3, .L1977+4
5852:src/xeq.c     **** 	}
 27366              		.loc 1 5852 13 view .LVU7168
 27367 00ee 0688     		ldrh	r6, [r0]
 27368              	.LVL2111:
5855:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27369              		.loc 1 5855 2 is_stmt 1 view .LVU7169
5856:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27370              		.loc 1 5856 5 is_stmt 0 view .LVU7170
 27371 00f0 1B68     		ldr	r3, [r3]
5855:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27372              		.loc 1 5855 5 view .LVU7171
 27373 00f2 A4EB0804 		sub	r4, r4, r8
 27374              	.LVL2112:
5855:src/xeq.c     **** 	if (-sp > RetStkSize) {
ARM GAS  /tmp/ccQQPlfu.s 			page 699


 27375              		.loc 1 5855 5 view .LVU7172
 27376 00f6 24B2     		sxth	r4, r4
 27377              	.LVL2113:
5856:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27378              		.loc 1 5856 2 is_stmt 1 view .LVU7173
5856:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27379              		.loc 1 5856 6 is_stmt 0 view .LVU7174
 27380 00f8 6242     		rsbs	r2, r4, #0
5856:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27381              		.loc 1 5856 5 view .LVU7175
 27382 00fa 9A42     		cmp	r2, r3
 27383 00fc E0DC     		bgt	.L1965
5860:src/xeq.c     **** 		// move previous contents to new destination
 27384              		.loc 1 5860 2 is_stmt 1 view .LVU7176
5860:src/xeq.c     **** 		// move previous contents to new destination
 27385              		.loc 1 5860 5 is_stmt 0 view .LVU7177
 27386 00fe B9F1000F 		cmp	r9, #0
 27387 0102 25D0     		beq	.L1976
 27388              	.LBB3591:
5862:src/xeq.c     **** 		if (size > old_size) {
 27389              		.loc 1 5862 3 is_stmt 1 view .LVU7178
5863:src/xeq.c     **** 			n = old_size;
 27390              		.loc 1 5863 3 view .LVU7179
5871:src/xeq.c     **** 	}
 27391              		.loc 1 5871 31 is_stmt 0 view .LVU7180
 27392 0104 3B68     		ldr	r3, [r7]
5871:src/xeq.c     **** 	}
 27393              		.loc 1 5871 3 view .LVU7181
 27394 0106 DBF80000 		ldr	r0, [fp]
5871:src/xeq.c     **** 	}
 27395              		.loc 1 5871 29 view .LVU7182
 27396 010a B3F9DE17 		ldrsh	r1, [r3, #2014]
5863:src/xeq.c     **** 			n = old_size;
 27397              		.loc 1 5863 6 view .LVU7183
 27398 010e 4D45     		cmp	r5, r9
5864:src/xeq.c     **** 			size -= old_size;
 27399              		.loc 1 5864 4 is_stmt 1 view .LVU7184
 27400              	.LVL2114:
5865:src/xeq.c     **** 		}
 27401              		.loc 1 5865 4 view .LVU7185
5865:src/xeq.c     **** 		}
 27402              		.loc 1 5865 9 is_stmt 0 view .LVU7186
 27403 0110 C2BF     		ittt	gt
 27404 0112 A5EB0905 		subgt	r5, r5, r9
 27405              	.LVL2115:
5865:src/xeq.c     **** 		}
 27406              		.loc 1 5865 9 view .LVU7187
 27407 0116 4FEA450A 		lslgt	r10, r5, #1
 27408 011a 4D46     		movgt	r5, r9
 27409              	.LVL2116:
5871:src/xeq.c     **** 	}
 27410              		.loc 1 5871 3 is_stmt 1 view .LVU7188
 27411 011c 00EB4101 		add	r1, r0, r1, lsl #1
 27412 0120 4FEA4502 		lsl	r2, r5, #1
 27413 0124 00EB4400 		add	r0, r0, r4, lsl #1
 27414 0128 D8BF     		it	le
 27415 012a 4FF0000A 		movle	r10, #0
ARM GAS  /tmp/ccQQPlfu.s 			page 700


 27416 012e FFF7FEFF 		bl	xcopy
 27417              	.LVL2117:
 27418 0132 04EB0903 		add	r3, r4, r9
 27419 0136 5B00     		lsls	r3, r3, #1
5871:src/xeq.c     **** 	}
 27420              		.loc 1 5871 16 is_stmt 0 view .LVU7189
 27421 0138 4FEA4409 		lsl	r9, r4, #1
 27422              	.LVL2118:
5871:src/xeq.c     **** 	}
 27423              		.loc 1 5871 16 view .LVU7190
 27424 013c 99E7     		b	.L1963
 27425              	.LVL2119:
 27426              	.L1975:
5871:src/xeq.c     **** 	}
 27427              		.loc 1 5871 16 view .LVU7191
 27428 013e 4FEA4409 		lsl	r9, r4, #1
 27429              	.LBE3591:
5852:src/xeq.c     **** 	}
 27430              		.loc 1 5852 13 view .LVU7192
 27431 0142 0688     		ldrh	r6, [r0]
 27432 0144 DFF820B0 		ldr	fp, .L1977+12
 27433 0148 4FEA450A 		lsl	r10, r5, #1
 27434 014c 4B46     		mov	r3, r9
 27435 014e 90E7     		b	.L1963
 27436              	.LVL2120:
 27437              	.L1976:
5852:src/xeq.c     **** 	}
 27438              		.loc 1 5852 13 view .LVU7193
 27439 0150 4FEA4409 		lsl	r9, r4, #1
 27440              	.LVL2121:
5852:src/xeq.c     **** 	}
 27441              		.loc 1 5852 13 view .LVU7194
 27442 0154 4FEA450A 		lsl	r10, r5, #1
5860:src/xeq.c     **** 		// move previous contents to new destination
 27443              		.loc 1 5860 5 view .LVU7195
 27444 0158 4B46     		mov	r3, r9
 27445 015a 8AE7     		b	.L1963
 27446              	.L1978:
 27447              		.align	2
 27448              	.L1977:
 27449 015c 00000000 		.word	main_ram
 27450 0160 00000000 		.word	RetStkSize
 27451 0164 00000000 		.word	Error
 27452 0168 00000000 		.word	RetStk
 27453              		.cfi_endproc
 27454              	.LFE264:
 27456              		.section	.text.cmdxout,"ax",%progbits
 27457              		.align	1
 27458              		.p2align 2,,3
 27459              		.global	cmdxout
 27460              		.syntax unified
 27461              		.thumb
 27462              		.thumb_func
 27463              		.fpu fpv4-sp-d16
 27465              	cmdxout:
 27466              	.LVL2122:
 27467              	.LFB266:
ARM GAS  /tmp/ccQQPlfu.s 			page 701


5881:src/xeq.c     **** 
5882:src/xeq.c     **** 
5883:src/xeq.c     **** /*
5884:src/xeq.c     ****  *  xIN: Setup an environment for XROM based math routines:
5885:src/xeq.c     ****  *
5886:src/xeq.c     ****  *  - 12 Private double precision stack & special registers X to K
5887:src/xeq.c     ****  *  - private return stack for local flags & registers
5888:src/xeq.c     ****  *  - 6 system flags
5889:src/xeq.c     ****  *
5890:src/xeq.c     ****  *  Argument:
5891:src/xeq.c     ****  *      noLocals - bit 7
5892:src/xeq.c     ****  *      out      - bits 4..5
5893:src/xeq.c     ****  *      in       - bits 2..4		
5894:src/xeq.c     ****  *      setLastX - bit 1
5895:src/xeq.c     ****  *      complex  - bit 0
5896:src/xeq.c     ****  *
5897:src/xeq.c     ****  *  Local flags:
5898:src/xeq.c     ****  *      .00 to .09 are free for general use.
5899:src/xeq.c     ****  *	.10 - stack_depth as previously set by user, don't touch it!
5900:src/xeq.c     ****  *	.11 - mode_double as previously set by user, don't touch it!
5901:src/xeq.c     ****  *      .12 - complex, from argument, can be modified.
5902:src/xeq.c     ****  *	.13 - setLastX, from argumment, can be modified.
5903:src/xeq.c     ****  *	.14 - state_lift as desired on exit, set to 1 by default, can be modified.
5904:src/xeq.c     ****  *      .15 - reserved, indicates that xIN is active, set to 1, don't touch it!
5905:src/xeq.c     ****  *
5906:src/xeq.c     ****  *  If the call is repeated only the argument values are reevaluated.
5907:src/xeq.c     ****  */
5908:src/xeq.c     **** void cmdxin(unsigned int arg, enum rarg op) {
5909:src/xeq.c     **** 
5910:src/xeq.c     **** 	int i;
5911:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5912:src/xeq.c     **** 	REGISTER *previousLocals = NULL;
5913:src/xeq.c     **** 	unsigned short previousFlags = 0;
5914:src/xeq.c     **** 	int num_locals = 0;
5915:src/xeq.c     **** #endif
5916:src/xeq.c     **** #ifndef REALBUILD
5917:src/xeq.c     **** 	/* This should never happen in a real build but it causes havoc writing
5918:src/xeq.c     **** 	 * xrom code, so trap it here.
5919:src/xeq.c     **** 	 */
5920:src/xeq.c     **** 	if (XromFlags.xIN) {
5921:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5922:src/xeq.c     **** 		return;
5923:src/xeq.c     **** 	}
5924:src/xeq.c     **** #endif
5925:src/xeq.c     **** 
5926:src/xeq.c     **** 	// Setup the XromLocal and XromParams structures in volatile RAM
5927:src/xeq.c     **** 	// fill with 0
5928:src/xeq.c     **** 	xset(&XromLocal, 0, sizeof(XromLocal));
5929:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
5930:src/xeq.c     **** 
5931:src/xeq.c     **** 	// Flags
5932:src/xeq.c     **** 	XromFlags.state_lift_in = get_lift();
5933:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
5934:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
5935:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
5936:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
5937:src/xeq.c     **** 	XromFlags.state_lift = 1;
ARM GAS  /tmp/ccQQPlfu.s 			page 702


5938:src/xeq.c     **** 	XromFlags.xIN = 1;
5939:src/xeq.c     **** 
5940:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5941:src/xeq.c     **** 	// Save pointers to original local data
5942:src/xeq.c     **** 	if ((arg & 0x80) != 0 && LocalRegs < 0) {
5943:src/xeq.c     **** 		XromFlags.copyLocals = 1;
5944:src/xeq.c     **** 		previousFlags = *flag_word(LOCAL_FLAG_BASE, NULL);
5945:src/xeq.c     **** 		previousLocals = get_reg_n(LOCAL_REG_BASE);
5946:src/xeq.c     **** 		num_locals = local_regs();
5947:src/xeq.c     **** 	}
5948:src/xeq.c     **** #endif
5949:src/xeq.c     **** 	// Establish local return stack
5950:src/xeq.c     **** 	XromUserRetStk = RetStk;
5951:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
5952:src/xeq.c     **** 
5953:src/xeq.c     **** 	RetStk = XromRetStk;
5954:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5955:src/xeq.c     **** 	RetStkPtr = 0;			// Locals will be allocated later
5956:src/xeq.c     **** #else
5957:src/xeq.c     **** 	LocalRegs = RetStkPtr = -2;	// Allocate just the local flags
5958:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
5959:src/xeq.c     **** #endif
5960:src/xeq.c     **** 
5961:src/xeq.c     **** 	// Parse the argument into fields
5962:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5963:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x20) != 0;
5964:src/xeq.c     **** 	XromFlags.complex = (arg & 0x40) != 0;
5965:src/xeq.c     **** 	XromIn = (arg & 0x1f) % 5;
5966:src/xeq.c     **** 	XromOut = (arg & 0x1f) / 5;
5967:src/xeq.c     **** #else
5968:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x40) != 0;
5969:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
5970:src/xeq.c     **** 	XromIn = (arg & 0x7);
5971:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
5972:src/xeq.c     **** #endif
5973:src/xeq.c     **** 	if (XromFlags.complex) {
5974:src/xeq.c     **** 		// Complex arguments are always in pairs
5975:src/xeq.c     **** 		XromIn <<= 1;
5976:src/xeq.c     **** 		XromOut <<= 1;
5977:src/xeq.c     **** 	}
5978:src/xeq.c     **** 
5979:src/xeq.c     ****         UState.rounding_mode = 0;
5980:src/xeq.c     **** 
5981:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5982:src/xeq.c     **** 	// Allocate the local frame
5983:src/xeq.c     **** 	LocalRegs = 0;
5984:src/xeq.c     **** 	UState.mode_double = 1;		// Needed to allocate enough registers
5985:src/xeq.c     **** 	cmdlocr(num_locals, RARG_LOCR);
5986:src/xeq.c     **** 	if (XromFlags.copyLocals)
5987:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = previousFlags;
5988:src/xeq.c     **** #endif
5989:src/xeq.c     **** 	// Switch to double precision mode
5990:src/xeq.c     **** 	if (XromFlags.mode_int) {
5991:src/xeq.c     **** 		// Convert integers to decimal128
5992:src/xeq.c     **** #ifndef ENABLE_COPYLOCALS
5993:src/xeq.c     **** 		UState.mode_double = 1;
5994:src/xeq.c     **** #endif
ARM GAS  /tmp/ccQQPlfu.s 			page 703


5995:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
5996:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
5997:src/xeq.c     **** 	}
5998:src/xeq.c     **** 	else if (XromFlags.mode_double) {
5999:src/xeq.c     **** 		// No conversion necessary
6000:src/xeq.c     **** 		xcopy(XromStack, StackBase, sizeof(XromStack));
6001:src/xeq.c     **** 		StackBase = XromStack;
6002:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6003:src/xeq.c     **** 		if (XromFlags.copyLocals)
6004:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), previousLocals, num_locals);
6005:src/xeq.c     **** #endif
6006:src/xeq.c     **** 	}
6007:src/xeq.c     **** 	else {
6008:src/xeq.c     **** 		// Convert decimal64 to decinal128
6009:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6010:src/xeq.c     **** 		UState.mode_double = 0;		// This was the original state before xIN
6011:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
6012:src/xeq.c     **** 		if (XromFlags.copyLocals) {
6013:src/xeq.c     **** 			decimal64  *src  = &(previousLocals->s);
6014:src/xeq.c     **** 			decimal128 *dest = &(get_reg_n(LOCAL_REG_BASE)->d);
6015:src/xeq.c     **** 			while (num_locals--)
6016:src/xeq.c     **** 				packed128_from_packed(dest++, src++);
6017:src/xeq.c     **** 		}
6018:src/xeq.c     **** #else
6019:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
6020:src/xeq.c     **** #endif
6021:src/xeq.c     **** 	}
6022:src/xeq.c     **** 
6023:src/xeq.c     **** 	// Set stack size to 8 and turn on stack_lift
6024:src/xeq.c     **** 	set_lift();
6025:src/xeq.c     **** 	UState.stack_depth = 1;
6026:src/xeq.c     **** 
6027:src/xeq.c     **** 	// check for any NaNs in input
6028:src/xeq.c     **** 	for (i = 0; i < XromIn; ++i) {
6029:src/xeq.c     **** 		decNumber x;
6030:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
6031:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
6032:src/xeq.c     **** 			// domain error
6033:src/xeq.c     **** 			if (get_user_flag(NAN_FLAG)) {
6034:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
6035:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
6036:src/xeq.c     **** 				// Early exit of routine
6037:src/xeq.c     **** 				cmdxout(0, RARG_XROM_OUT);
6038:src/xeq.c     **** 			} 
6039:src/xeq.c     **** 			else
6040:src/xeq.c     **** 				report_err(ERR_DOMAIN);	// this will do all the cleanup
6041:src/xeq.c     **** 			return;
6042:src/xeq.c     **** 		}
6043:src/xeq.c     **** 	}
6044:src/xeq.c     **** }
6045:src/xeq.c     **** 
6046:src/xeq.c     **** /*
6047:src/xeq.c     ****  *  xOUT: Return from an XROM routine that has previously called xIN
6048:src/xeq.c     ****  *  Argument:
6049:src/xeq.c     ****  *     bit 0 set - do a RTN+1
6050:src/xeq.c     ****  *     bit 1 set - leave I alone even with a complex result
6051:src/xeq.c     ****  */
ARM GAS  /tmp/ccQQPlfu.s 			page 704


6052:src/xeq.c     **** void cmdxout(unsigned int arg, enum rarg op) {
 27468              		.loc 1 6052 46 is_stmt 1 view -0
 27469              		.cfi_startproc
 27470              		@ args = 0, pretend = 0, frame = 56
 27471              		@ frame_needed = 0, uses_anonymous_args = 0
6053:src/xeq.c     **** 	int i, dbl, intm;
 27472              		.loc 1 6053 2 view .LVU7197
6054:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6055:src/xeq.c     **** 	unsigned short flags = *flag_word(LOCAL_FLAG_BASE, NULL);
6056:src/xeq.c     **** 	REGISTER *locals = get_reg_n(LOCAL_REG_BASE);
6057:src/xeq.c     **** 	int num_locals = local_regs();
6058:src/xeq.c     **** #endif
6059:src/xeq.c     **** #ifndef REALBUILD
6060:src/xeq.c     **** 	// shouldn't happen in final build
6061:src/xeq.c     **** 	if (! XromFlags.xIN) {
 27473              		.loc 1 6061 2 view .LVU7198
6052:src/xeq.c     **** 	int i, dbl, intm;
 27474              		.loc 1 6052 46 is_stmt 0 view .LVU7199
 27475 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 27476              		.cfi_def_cfa_offset 36
 27477              		.cfi_offset 4, -36
 27478              		.cfi_offset 5, -32
 27479              		.cfi_offset 6, -28
 27480              		.cfi_offset 7, -24
 27481              		.cfi_offset 8, -20
 27482              		.cfi_offset 9, -16
 27483              		.cfi_offset 10, -12
 27484              		.cfi_offset 11, -8
 27485              		.cfi_offset 14, -4
 27486              		.loc 1 6061 6 view .LVU7200
 27487 0004 774C     		ldr	r4, .L2025
 27488              		.loc 1 6061 5 view .LVU7201
 27489 0006 94F90130 		ldrsb	r3, [r4, #1]
 27490 000a 002B     		cmp	r3, #0
6052:src/xeq.c     **** 	int i, dbl, intm;
 27491              		.loc 1 6052 46 view .LVU7202
 27492 000c 8FB0     		sub	sp, sp, #60
 27493              		.cfi_def_cfa_offset 96
 27494              		.loc 1 6061 5 view .LVU7203
 27495 000e 07DB     		blt	.L1980
6062:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 27496              		.loc 1 6062 3 is_stmt 1 view .LVU7204
 27497              	.LVL2123:
 27498              	.LBB3615:
 27499              	.LBI3615:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27500              		.loc 1 540 5 view .LVU7205
 27501              	.LBB3616:
 541:src/xeq.c     **** 		Error = e;
 27502              		.loc 1 541 2 view .LVU7206
 541:src/xeq.c     **** 		Error = e;
 27503              		.loc 1 541 12 is_stmt 0 view .LVU7207
 27504 0010 754B     		ldr	r3, .L2025+4
 541:src/xeq.c     **** 		Error = e;
 27505              		.loc 1 541 5 view .LVU7208
 27506 0012 1A68     		ldr	r2, [r3]
 27507 0014 0AB9     		cbnz	r2, .L1979
ARM GAS  /tmp/ccQQPlfu.s 			page 705


 27508              	.LVL2124:
 27509              	.LBB3617:
 27510              	.LBI3617:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27511              		.loc 1 540 5 is_stmt 1 view .LVU7209
 27512              	.LBB3618:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 27513              		.loc 1 542 3 view .LVU7210
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 27514              		.loc 1 542 9 is_stmt 0 view .LVU7211
 27515 0016 0722     		movs	r2, #7
 27516 0018 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 27517              		.loc 1 543 3 is_stmt 1 view .LVU7212
 27518              	.LVL2125:
 27519              	.L1979:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 27520              		.loc 1 543 3 is_stmt 0 view .LVU7213
 27521              	.LBE3618:
 27522              	.LBE3617:
 27523              	.LBE3616:
 27524              	.LBE3615:
6063:src/xeq.c     **** 		return;
6064:src/xeq.c     **** 	}
6065:src/xeq.c     **** #endif
6066:src/xeq.c     **** 	// End special handling
6067:src/xeq.c     **** 	XromFlags.xIN = 0;
6068:src/xeq.c     **** 
6069:src/xeq.c     **** 	// Restore the global return stack
6070:src/xeq.c     **** 	RetStk = XromUserRetStk;
6071:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
6072:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
6073:src/xeq.c     **** 
6074:src/xeq.c     **** 	// RTN or RTN+1 depending on bit 0 of argument
6075:src/xeq.c     **** 	do_rtn(arg & 1);
6076:src/xeq.c     **** 
6077:src/xeq.c     **** 	// Switch back to user stack settings
6078:src/xeq.c     **** 	dbl = UState.mode_double = XromFlags.mode_double;
6079:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
6080:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
6081:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
6082:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
6083:src/xeq.c     **** 
6084:src/xeq.c     **** 	// Last X handling and complex flag
6085:src/xeq.c     **** 	if (XromFlags.setLastX) {
6086:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
6087:src/xeq.c     **** 			setlastXY();
6088:src/xeq.c     **** 		else
6089:src/xeq.c     **** 			setlastX();
6090:src/xeq.c     **** 	}
6091:src/xeq.c     **** 
6092:src/xeq.c     **** 	// Move the stack according to the in/out fields
6093:src/xeq.c     **** 	i = (int) XromOut - (int) XromIn;
6094:src/xeq.c     **** 	if (XromFlags.complex) {
6095:src/xeq.c     **** 		set_was_complex();
6096:src/xeq.c     **** 		while (i < 0) {
6097:src/xeq.c     **** 			// different stack handling in complex mode
ARM GAS  /tmp/ccQQPlfu.s 			page 706


6098:src/xeq.c     **** 			// more to consume then to push back
6099:src/xeq.c     **** 			lower2();
6100:src/xeq.c     **** 			i += 2;
6101:src/xeq.c     **** 		}
6102:src/xeq.c     **** 	}
6103:src/xeq.c     **** 	else {
6104:src/xeq.c     **** 		while (i < 0) {
6105:src/xeq.c     **** 			// more to consume then to push back
6106:src/xeq.c     **** 			lower();	
6107:src/xeq.c     **** 			++i;
6108:src/xeq.c     **** 		}
6109:src/xeq.c     **** 	}
6110:src/xeq.c     **** 	if (i > 0) {
6111:src/xeq.c     **** 		// more to push back then to consume
6112:src/xeq.c     **** 		if (! XromFlags.state_lift_in)
6113:src/xeq.c     **** 			--i;
6114:src/xeq.c     **** 		while (i > 0) {
6115:src/xeq.c     **** 			lift();
6116:src/xeq.c     **** 			--i;
6117:src/xeq.c     **** 		}
6118:src/xeq.c     **** 	}
6119:src/xeq.c     **** 	State2.state_lift = XromFlags.state_lift;
6120:src/xeq.c     **** 
6121:src/xeq.c     **** 	// Copy results
6122:src/xeq.c     **** 	i = XromOut;
6123:src/xeq.c     **** 	if (intm) {
6124:src/xeq.c     **** 		while (i--) {
6125:src/xeq.c     **** 			decNumber r;
6126:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
6127:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
6128:src/xeq.c     **** 		}
6129:src/xeq.c     **** 	}
6130:src/xeq.c     **** 	else if (dbl) {
6131:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
6132:src/xeq.c     **** 	}
6133:src/xeq.c     **** 	else {
6134:src/xeq.c     **** 		while (i--)
6135:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
6136:src/xeq.c     **** 	}
6137:src/xeq.c     **** 
6138:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6139:src/xeq.c     **** 	// Copy back local data
6140:src/xeq.c     **** 	if (XromFlags.copyLocals) {
6141:src/xeq.c     **** 		i = local_regs();
6142:src/xeq.c     **** 		num_locals = i < num_locals ? i : num_locals; 
6143:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = flags;
6144:src/xeq.c     **** 		if (intm) {
6145:src/xeq.c     **** 			// not used
6146:src/xeq.c     **** 		}
6147:src/xeq.c     **** 		else if (dbl) {
6148:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), locals, num_locals);
6149:src/xeq.c     **** 		}
6150:src/xeq.c     **** 		else {
6151:src/xeq.c     **** 			decimal64  *dest = &(get_reg_n(LOCAL_REG_BASE)->s);
6152:src/xeq.c     **** 			decimal128 *src  = &(locals->d);
6153:src/xeq.c     **** 			while (num_locals--)
6154:src/xeq.c     **** 				packed_from_packed128(dest++, src++);
ARM GAS  /tmp/ccQQPlfu.s 			page 707


6155:src/xeq.c     **** 		}
6156:src/xeq.c     **** 	}
6157:src/xeq.c     **** #endif
6158:src/xeq.c     **** }
 27525              		.loc 1 6158 1 view .LVU7214
 27526 001a 0FB0     		add	sp, sp, #60
 27527              		.cfi_remember_state
 27528              		.cfi_def_cfa_offset 36
 27529              		@ sp needed
 27530 001c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27531              	.LVL2126:
 27532              	.L1980:
 27533              		.cfi_restore_state
 27534              	.LBB3619:
 27535              	.LBB3620:
6071:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27536              		.loc 1 6071 2 view .LVU7215
 27537 0020 724F     		ldr	r7, .L2025+8
6072:src/xeq.c     **** 
 27538              		.loc 1 6072 12 view .LVU7216
 27539 0022 7349     		ldr	r1, .L2025+12
 27540              	.LVL2127:
6071:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27541              		.loc 1 6071 2 view .LVU7217
 27542 0024 3A68     		ldr	r2, [r7]
6067:src/xeq.c     **** 
 27543              		.loc 1 6067 16 view .LVU7218
 27544 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6071:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27545              		.loc 1 6071 12 view .LVU7219
 27546 0028 A689     		ldrh	r6, [r4, #12]
 27547 002a A2F8E267 		strh	r6, [r2, #2018]	@ movhi
 27548 002e 0546     		mov	r5, r0
 27549              	.LVL2128:
6071:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27550              		.loc 1 6071 12 view .LVU7220
 27551              	.LBE3620:
 27552              	.LBI3619:
6052:src/xeq.c     **** 	int i, dbl, intm;
 27553              		.loc 1 6052 6 is_stmt 1 view .LVU7221
 27554              	.LBB3649:
6067:src/xeq.c     **** 
 27555              		.loc 1 6067 2 view .LVU7222
6072:src/xeq.c     **** 
 27556              		.loc 1 6072 12 is_stmt 0 view .LVU7223
 27557 0030 0868     		ldr	r0, [r1]
 27558              	.LVL2129:
6070:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27559              		.loc 1 6070 9 view .LVU7224
 27560 0032 7049     		ldr	r1, .L2025+16
6072:src/xeq.c     **** 
 27561              		.loc 1 6072 12 view .LVU7225
 27562 0034 A2F8DE07 		strh	r0, [r2, #2014]	@ movhi
6067:src/xeq.c     **** 
 27563              		.loc 1 6067 16 view .LVU7226
 27564 0038 6FF3C713 		bfc	r3, #7, #1
6070:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
ARM GAS  /tmp/ccQQPlfu.s 			page 708


 27565              		.loc 1 6070 9 view .LVU7227
 27566 003c A268     		ldr	r2, [r4, #8]
 27567 003e 0A60     		str	r2, [r1]
6075:src/xeq.c     **** 
 27568              		.loc 1 6075 2 view .LVU7228
 27569 0040 05F00100 		and	r0, r5, #1
6067:src/xeq.c     **** 
 27570              		.loc 1 6067 16 view .LVU7229
 27571 0044 6370     		strb	r3, [r4, #1]
6070:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27572              		.loc 1 6070 2 is_stmt 1 view .LVU7230
6071:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27573              		.loc 1 6071 2 view .LVU7231
6072:src/xeq.c     **** 
 27574              		.loc 1 6072 2 view .LVU7232
6075:src/xeq.c     **** 
 27575              		.loc 1 6075 2 view .LVU7233
 27576 0046 FFF7FEFF 		bl	do_rtn
 27577              	.LVL2130:
6078:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27578              		.loc 1 6078 2 view .LVU7234
6078:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27579              		.loc 1 6078 38 is_stmt 0 view .LVU7235
 27580 004a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6078:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27581              		.loc 1 6078 8 view .LVU7236
 27582 004c 3868     		ldr	r0, [r7]
6080:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 27583              		.loc 1 6080 41 view .LVU7237
 27584 004e A678     		ldrb	r6, [r4, #2]	@ zero_extendqisi2
6079:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27585              		.loc 1 6079 21 view .LVU7238
 27586 0050 D0F8E827 		ldr	r2, [r0, #2024]
6082:src/xeq.c     **** 
 27587              		.loc 1 6082 12 view .LVU7239
 27588 0054 DFF8ACA1 		ldr	r10, .L2025+32
6078:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27589              		.loc 1 6078 38 view .LVU7240
 27590 0058 C3F3C009 		ubfx	r9, r3, #3, #1
 27591              	.LVL2131:
6079:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27592              		.loc 1 6079 2 is_stmt 1 view .LVU7241
6079:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27593              		.loc 1 6079 32 is_stmt 0 view .LVU7242
 27594 005c 03F00108 		and	r8, r3, #1
 27595              	.LVL2132:
6080:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 27596              		.loc 1 6080 9 is_stmt 1 view .LVU7243
6081:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 27597              		.loc 1 6081 2 view .LVU7244
6079:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27598              		.loc 1 6079 21 is_stmt 0 view .LVU7245
 27599 0060 C3F38001 		ubfx	r1, r3, #2, #1
 27600 0064 48EA8933 		orr	r3, r8, r9, lsl #14
 27601              	.LVL2133:
6079:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27602              		.loc 1 6079 21 view .LVU7246
ARM GAS  /tmp/ccQQPlfu.s 			page 709


 27603 0068 43EAC143 		orr	r3, r3, r1, lsl #19
 27604 006c 6249     		ldr	r1, .L2025+20
 27605 006e 06F00706 		and	r6, r6, #7
 27606 0072 1140     		ands	r1, r1, r2
 27607 0074 43EA0673 		orr	r3, r3, r6, lsl #28
 27608 0078 0B43     		orrs	r3, r3, r1
 27609 007a C0F8E837 		str	r3, [r0, #2024]
6082:src/xeq.c     **** 
 27610              		.loc 1 6082 2 is_stmt 1 view .LVU7247
6082:src/xeq.c     **** 
 27611              		.loc 1 6082 14 is_stmt 0 view .LVU7248
 27612 007e 6420     		movs	r0, #100
 27613 0080 FFF7FEFF 		bl	get_reg_n
 27614              	.LVL2134:
6085:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27615              		.loc 1 6085 6 view .LVU7249
 27616 0084 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6082:src/xeq.c     **** 
 27617              		.loc 1 6082 12 view .LVU7250
 27618 0086 CAF80000 		str	r0, [r10]
6085:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27619              		.loc 1 6085 2 is_stmt 1 view .LVU7251
6085:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27620              		.loc 1 6085 5 is_stmt 0 view .LVU7252
 27621 008a 9606     		lsls	r6, r2, #26
 27622 008c 09D5     		bpl	.L1983
6086:src/xeq.c     **** 			setlastXY();
 27623              		.loc 1 6086 3 is_stmt 1 view .LVU7253
6086:src/xeq.c     **** 			setlastXY();
 27624              		.loc 1 6086 6 is_stmt 0 view .LVU7254
 27625 008e D006     		lsls	r0, r2, #27
 27626 0090 02D5     		bpl	.L1984
6086:src/xeq.c     **** 			setlastXY();
 27627              		.loc 1 6086 25 view .LVU7255
 27628 0092 A907     		lsls	r1, r5, #30
 27629 0094 40F19F80 		bpl	.L2021
 27630              	.L1984:
6089:src/xeq.c     **** 	}
 27631              		.loc 1 6089 4 is_stmt 1 view .LVU7256
 27632              	.LBB3621:
 27633              	.LBI3621:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 27634              		.loc 1 786 6 view .LVU7257
 27635              	.LBB3622:
 787:src/xeq.c     **** }
 27636              		.loc 1 787 2 view .LVU7258
 27637 0098 6421     		movs	r1, #100
 27638 009a 6C20     		movs	r0, #108
 27639 009c FFF7FEFF 		bl	copyreg_n
 27640              	.LVL2135:
 27641 00a0 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 27642              	.L1983:
 27643              	.LBE3622:
 27644              	.LBE3621:
6093:src/xeq.c     **** 	if (XromFlags.complex) {
 27645              		.loc 1 6093 2 view .LVU7259
6093:src/xeq.c     **** 	if (XromFlags.complex) {
ARM GAS  /tmp/ccQQPlfu.s 			page 710


 27646              		.loc 1 6093 6 is_stmt 0 view .LVU7260
 27647 00a2 94F805B0 		ldrb	fp, [r4, #5]	@ zero_extendqisi2
6093:src/xeq.c     **** 	if (XromFlags.complex) {
 27648              		.loc 1 6093 22 view .LVU7261
 27649 00a6 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
6094:src/xeq.c     **** 		set_was_complex();
 27650              		.loc 1 6094 5 view .LVU7262
 27651 00a8 D206     		lsls	r2, r2, #27
6093:src/xeq.c     **** 	if (XromFlags.complex) {
 27652              		.loc 1 6093 4 view .LVU7263
 27653 00aa ABEB030B 		sub	fp, fp, r3
 27654              	.LVL2136:
6094:src/xeq.c     **** 		set_was_complex();
 27655              		.loc 1 6094 2 is_stmt 1 view .LVU7264
6094:src/xeq.c     **** 		set_was_complex();
 27656              		.loc 1 6094 5 is_stmt 0 view .LVU7265
 27657 00ae 2BD5     		bpl	.L2022
6095:src/xeq.c     **** 		while (i < 0) {
 27658              		.loc 1 6095 3 is_stmt 1 view .LVU7266
 27659              	.LBB3623:
 27660              	.LBI3623:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 27661              		.loc 1 533 13 view .LVU7267
 27662              	.LBB3624:
 534:src/xeq.c     **** }
 27663              		.loc 1 534 2 view .LVU7268
 534:src/xeq.c     **** }
 27664              		.loc 1 534 20 is_stmt 0 view .LVU7269
 27665 00b0 524E     		ldr	r6, .L2025+24
 27666 00b2 327D     		ldrb	r2, [r6, #20]	@ zero_extendqisi2
 27667 00b4 0121     		movs	r1, #1
 27668 00b6 61F38712 		bfi	r2, r1, #6, #2
 27669              	.LBE3624:
 27670              	.LBE3623:
6096:src/xeq.c     **** 			// different stack handling in complex mode
 27671              		.loc 1 6096 9 view .LVU7270
 27672 00ba BBF1000F 		cmp	fp, #0
 27673              	.LBB3626:
 27674              	.LBB3625:
 534:src/xeq.c     **** }
 27675              		.loc 1 534 20 view .LVU7271
 27676 00be 3275     		strb	r2, [r6, #20]
 534:src/xeq.c     **** }
 27677              		.loc 1 534 20 view .LVU7272
 27678              	.LBE3625:
 27679              	.LBE3626:
6096:src/xeq.c     **** 			// different stack handling in complex mode
 27680              		.loc 1 6096 9 is_stmt 1 view .LVU7273
 27681 00c0 13DA     		bge	.L1987
 27682 00c2 6FEA0B03 		mvn	r3, fp
 27683 00c6 23F00105 		bic	r5, r3, #1
 27684              	.LVL2137:
6096:src/xeq.c     **** 			// different stack handling in complex mode
 27685              		.loc 1 6096 9 is_stmt 0 view .LVU7274
 27686 00ca 0093     		str	r3, [sp]
 27687 00cc 0BF10203 		add	r3, fp, #2
 27688 00d0 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccQQPlfu.s 			page 711


 27689 00d2 1D44     		add	r5, r5, r3
 27690              	.L1988:
6099:src/xeq.c     **** 			i += 2;
 27691              		.loc 1 6099 4 is_stmt 1 view .LVU7275
6100:src/xeq.c     **** 		}
 27692              		.loc 1 6100 6 is_stmt 0 view .LVU7276
 27693 00d4 0BF1020B 		add	fp, fp, #2
 27694              	.LVL2138:
6099:src/xeq.c     **** 			i += 2;
 27695              		.loc 1 6099 4 view .LVU7277
 27696 00d8 FFF7FEFF 		bl	lower2
 27697              	.LVL2139:
6100:src/xeq.c     **** 		}
 27698              		.loc 1 6100 4 is_stmt 1 view .LVU7278
6096:src/xeq.c     **** 			// different stack handling in complex mode
 27699              		.loc 1 6096 9 view .LVU7279
 27700 00dc AB45     		cmp	fp, r5
 27701 00de F9D1     		bne	.L1988
 27702 00e0 009B     		ldr	r3, [sp]
 27703 00e2 23F0010B 		bic	fp, r3, #1
 27704              	.LVL2140:
6096:src/xeq.c     **** 			// different stack handling in complex mode
 27705              		.loc 1 6096 9 is_stmt 0 view .LVU7280
 27706 00e6 019B     		ldr	r3, [sp, #4]
 27707 00e8 9B44     		add	fp, fp, r3
 27708              	.L1987:
 27709              	.LVL2141:
6110:src/xeq.c     **** 		// more to push back then to consume
 27710              		.loc 1 6110 2 is_stmt 1 view .LVU7281
6110:src/xeq.c     **** 		// more to push back then to consume
 27711              		.loc 1 6110 5 is_stmt 0 view .LVU7282
 27712 00ea BBF1000F 		cmp	fp, #0
 27713 00ee 14D0     		beq	.L1989
6112:src/xeq.c     **** 			--i;
 27714              		.loc 1 6112 3 is_stmt 1 view .LVU7283
6112:src/xeq.c     **** 			--i;
 27715              		.loc 1 6112 7 is_stmt 0 view .LVU7284
 27716 00f0 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6112:src/xeq.c     **** 			--i;
 27717              		.loc 1 6112 6 view .LVU7285
 27718 00f2 9307     		lsls	r3, r2, #30
 27719 00f4 02D4     		bmi	.L1994
6113:src/xeq.c     **** 		while (i > 0) {
 27720              		.loc 1 6113 4 is_stmt 1 view .LVU7286
 27721              	.LVL2142:
6114:src/xeq.c     **** 			lift();
 27722              		.loc 1 6114 9 view .LVU7287
 27723 00f6 BBF1010B 		subs	fp, fp, #1
 27724              	.LVL2143:
6114:src/xeq.c     **** 			lift();
 27725              		.loc 1 6114 9 is_stmt 0 view .LVU7288
 27726 00fa 0ED0     		beq	.L1989
 27727              	.L1994:
6115:src/xeq.c     **** 			--i;
 27728              		.loc 1 6115 4 is_stmt 1 view .LVU7289
 27729 00fc FFF7FEFF 		bl	lift
 27730              	.LVL2144:
ARM GAS  /tmp/ccQQPlfu.s 			page 712


6116:src/xeq.c     **** 		}
 27731              		.loc 1 6116 4 view .LVU7290
6114:src/xeq.c     **** 			lift();
 27732              		.loc 1 6114 9 view .LVU7291
 27733 0100 BBF1010B 		subs	fp, fp, #1
 27734              	.LVL2145:
6114:src/xeq.c     **** 			lift();
 27735              		.loc 1 6114 9 is_stmt 0 view .LVU7292
 27736 0104 FAD1     		bne	.L1994
 27737 0106 08E0     		b	.L1989
 27738              	.LVL2146:
 27739              	.L2022:
6104:src/xeq.c     **** 			// more to consume then to push back
 27740              		.loc 1 6104 9 is_stmt 1 view .LVU7293
 27741 0108 BBF1000F 		cmp	fp, #0
 27742 010c 67DA     		bge	.L2023
 27743              	.L1986:
6106:src/xeq.c     **** 			++i;
 27744              		.loc 1 6106 4 view .LVU7294
 27745 010e FFF7FEFF 		bl	lower
 27746              	.LVL2147:
6107:src/xeq.c     **** 		}
 27747              		.loc 1 6107 4 view .LVU7295
6104:src/xeq.c     **** 			// more to consume then to push back
 27748              		.loc 1 6104 9 view .LVU7296
 27749 0112 1BF1010B 		adds	fp, fp, #1
 27750              	.LVL2148:
6104:src/xeq.c     **** 			// more to consume then to push back
 27751              		.loc 1 6104 9 is_stmt 0 view .LVU7297
 27752 0116 FAD1     		bne	.L1986
 27753 0118 384E     		ldr	r6, .L2025+24
 27754              	.LVL2149:
 27755              	.L1989:
6119:src/xeq.c     **** 
 27756              		.loc 1 6119 2 is_stmt 1 view .LVU7298
6119:src/xeq.c     **** 
 27757              		.loc 1 6119 31 is_stmt 0 view .LVU7299
 27758 011a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6119:src/xeq.c     **** 
 27759              		.loc 1 6119 20 view .LVU7300
 27760 011c F27D     		ldrb	r2, [r6, #23]	@ zero_extendqisi2
6122:src/xeq.c     **** 	if (intm) {
 27761              		.loc 1 6122 4 view .LVU7301
 27762 011e 6479     		ldrb	r4, [r4, #5]	@ zero_extendqisi2
6119:src/xeq.c     **** 
 27763              		.loc 1 6119 31 view .LVU7302
 27764 0120 C3F38013 		ubfx	r3, r3, #6, #1
6119:src/xeq.c     **** 
 27765              		.loc 1 6119 20 view .LVU7303
 27766 0124 63F38612 		bfi	r2, r3, #6, #1
 27767 0128 F275     		strb	r2, [r6, #23]
6122:src/xeq.c     **** 	if (intm) {
 27768              		.loc 1 6122 2 is_stmt 1 view .LVU7304
 27769              	.LVL2150:
6123:src/xeq.c     **** 		while (i--) {
 27770              		.loc 1 6123 2 view .LVU7305
6123:src/xeq.c     **** 		while (i--) {
ARM GAS  /tmp/ccQQPlfu.s 			page 713


 27771              		.loc 1 6123 5 is_stmt 0 view .LVU7306
 27772 012a B8F1000F 		cmp	r8, #0
 27773 012e 23D0     		beq	.L2024
6124:src/xeq.c     **** 			decNumber r;
 27774              		.loc 1 6124 9 is_stmt 1 view .LVU7307
6124:src/xeq.c     **** 			decNumber r;
 27775              		.loc 1 6124 11 is_stmt 0 view .LVU7308
 27776 0130 631E     		subs	r3, r4, #1
 27777              	.LVL2151:
6124:src/xeq.c     **** 			decNumber r;
 27778              		.loc 1 6124 9 view .LVU7309
 27779 0132 002C     		cmp	r4, #0
 27780 0134 3FF471AF 		beq	.L1979
 27781 0138 314D     		ldr	r5, .L2025+28
 27782 013a 6334     		adds	r4, r4, #99
 27783 013c 05EB0315 		add	r5, r5, r3, lsl #4
 27784 0140 05AE     		add	r6, sp, #20
 27785              	.LVL2152:
 27786              	.L1996:
 27787              	.LBB3627:
6125:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
 27788              		.loc 1 6125 4 is_stmt 1 view .LVU7310
6126:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
 27789              		.loc 1 6126 4 view .LVU7311
 27790 0142 3146     		mov	r1, r6
 27791 0144 2846     		mov	r0, r5
 27792 0146 FFF7FEFF 		bl	decimal128ToNumber
 27793              	.LVL2153:
6127:src/xeq.c     **** 		}
 27794              		.loc 1 6127 4 view .LVU7312
 27795 014a 3046     		mov	r0, r6
 27796 014c FFF7FEFF 		bl	intResult
 27797              	.LVL2154:
6127:src/xeq.c     **** 		}
 27798              		.loc 1 6127 4 is_stmt 0 view .LVU7313
 27799 0150 0246     		mov	r2, r0
 27800 0152 0B46     		mov	r3, r1
 27801              	.LBB3628:
 27802              	.LBB3629:
1417:src/xeq.c     **** }
 27803              		.loc 1 1417 8 view .LVU7314
 27804 0154 2046     		mov	r0, r4
 27805 0156 CDE90223 		strd	r2, [sp, #8]
 27806              	.LVL2155:
1417:src/xeq.c     **** }
 27807              		.loc 1 1417 8 view .LVU7315
 27808              	.LBE3629:
 27809              	.LBI3628:
1416:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 27810              		.loc 1 1416 6 is_stmt 1 view .LVU7316
 27811              	.LBB3630:
1417:src/xeq.c     **** }
 27812              		.loc 1 1417 2 view .LVU7317
1417:src/xeq.c     **** }
 27813              		.loc 1 1417 8 is_stmt 0 view .LVU7318
 27814 015a FFF7FEFF 		bl	get_reg_n
 27815              	.LVL2156:
ARM GAS  /tmp/ccQQPlfu.s 			page 714


1417:src/xeq.c     **** }
 27816              		.loc 1 1417 2 view .LVU7319
 27817 015e 0822     		movs	r2, #8
 27818 0160 013C     		subs	r4, r4, #1
 27819              	.LVL2157:
1417:src/xeq.c     **** }
 27820              		.loc 1 1417 2 view .LVU7320
 27821 0162 0DEB0201 		add	r1, sp, r2
 27822 0166 FFF7FEFF 		bl	xcopy
 27823              	.LVL2158:
1417:src/xeq.c     **** }
 27824              		.loc 1 1417 2 view .LVU7321
 27825              	.LBE3630:
 27826              	.LBE3628:
 27827              	.LBE3627:
6124:src/xeq.c     **** 			decNumber r;
 27828              		.loc 1 6124 9 is_stmt 1 view .LVU7322
 27829 016a 632C     		cmp	r4, #99
 27830 016c A5F11005 		sub	r5, r5, #16
 27831 0170 E7D1     		bne	.L1996
 27832              	.LBE3649:
 27833              	.LBE3619:
 27834              		.loc 1 6158 1 is_stmt 0 view .LVU7323
 27835 0172 0FB0     		add	sp, sp, #60
 27836              		.cfi_remember_state
 27837              		.cfi_def_cfa_offset 36
 27838              		@ sp needed
 27839 0174 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27840              	.LVL2159:
 27841              	.L2024:
 27842              		.cfi_restore_state
 27843              	.LBB3651:
 27844              	.LBB3650:
6130:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 27845              		.loc 1 6130 7 is_stmt 1 view .LVU7324
6130:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 27846              		.loc 1 6130 10 is_stmt 0 view .LVU7325
 27847 0178 B9F1000F 		cmp	r9, #0
 27848 017c 1AD1     		bne	.L1997
6134:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27849              		.loc 1 6134 9 is_stmt 1 view .LVU7326
6134:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27850              		.loc 1 6134 11 is_stmt 0 view .LVU7327
 27851 017e 631E     		subs	r3, r4, #1
 27852              	.LVL2160:
6134:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27853              		.loc 1 6134 9 view .LVU7328
 27854 0180 002C     		cmp	r4, #0
 27855 0182 3FF44AAF 		beq	.L1979
 27856 0186 1E4F     		ldr	r7, .L2025+28
 27857 0188 6334     		adds	r4, r4, #99
 27858 018a 07EB0317 		add	r7, r7, r3, lsl #4
 27859 018e 05AE     		add	r6, sp, #20
 27860              	.LVL2161:
 27861              	.L2000:
6135:src/xeq.c     **** 	}
 27862              		.loc 1 6135 4 is_stmt 1 view .LVU7329
ARM GAS  /tmp/ccQQPlfu.s 			page 715


 27863              	.LBB3631:
 27864              	.LBI3631:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27865              		.loc 1 712 11 view .LVU7330
 27866              	.LBB3632:
 713:src/xeq.c     **** }
 27867              		.loc 1 713 2 view .LVU7331
 713:src/xeq.c     **** }
 27868              		.loc 1 713 9 is_stmt 0 view .LVU7332
 27869 0190 2046     		mov	r0, r4
 27870 0192 FFF7FEFF 		bl	get_reg_n
 27871              	.LVL2162:
 27872              	.LBE3632:
 27873              	.LBE3631:
 27874              	.LBB3634:
 27875              	.LBB3635:
 644:src/xeq.c     **** }
 27876              		.loc 1 644 24 view .LVU7333
 27877 0196 3146     		mov	r1, r6
 27878              	.LBE3635:
 27879              	.LBE3634:
 27880              	.LBB3637:
 27881              	.LBB3633:
 713:src/xeq.c     **** }
 27882              		.loc 1 713 9 view .LVU7334
 27883 0198 0546     		mov	r5, r0
 27884              	.LVL2163:
 713:src/xeq.c     **** }
 27885              		.loc 1 713 9 view .LVU7335
 27886              	.LBE3633:
 27887              	.LBE3637:
 27888              	.LBB3638:
 27889              	.LBI3634:
 642:src/xeq.c     **** 	decNumber temp;
 27890              		.loc 1 642 6 is_stmt 1 view .LVU7336
 27891              	.LBB3636:
 643:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 27892              		.loc 1 643 2 view .LVU7337
 644:src/xeq.c     **** }
 27893              		.loc 1 644 2 view .LVU7338
 644:src/xeq.c     **** }
 27894              		.loc 1 644 24 is_stmt 0 view .LVU7339
 27895 019a 3846     		mov	r0, r7
 27896              	.LVL2164:
 644:src/xeq.c     **** }
 27897              		.loc 1 644 24 view .LVU7340
 27898 019c FFF7FEFF 		bl	decimal128ToNumber
 27899              	.LVL2165:
 27900 01a0 013C     		subs	r4, r4, #1
 27901              	.LVL2166:
 644:src/xeq.c     **** }
 27902              		.loc 1 644 24 view .LVU7341
 27903 01a2 0146     		mov	r1, r0
 644:src/xeq.c     **** }
 27904              		.loc 1 644 2 view .LVU7342
 27905 01a4 2846     		mov	r0, r5
 27906 01a6 FFF7FEFF 		bl	packed_from_number
ARM GAS  /tmp/ccQQPlfu.s 			page 716


 27907              	.LVL2167:
 644:src/xeq.c     **** }
 27908              		.loc 1 644 2 view .LVU7343
 27909              	.LBE3636:
 27910              	.LBE3638:
6134:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27911              		.loc 1 6134 9 is_stmt 1 view .LVU7344
6134:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27912              		.loc 1 6134 9 is_stmt 0 view .LVU7345
 27913 01aa 632C     		cmp	r4, #99
 27914 01ac A7F11007 		sub	r7, r7, #16
 27915 01b0 EED1     		bne	.L2000
 27916 01b2 32E7     		b	.L1979
 27917              	.LVL2168:
 27918              	.L1997:
6131:src/xeq.c     **** 	}
 27919              		.loc 1 6131 3 is_stmt 1 view .LVU7346
 27920              	.LBB3639:
 27921              	.LBB3640:
 27922              	.LBB3641:
 27923              	.LBB3642:
1113:src/xeq.c     **** }
 27924              		.loc 1 1113 24 is_stmt 0 view .LVU7347
 27925 01b4 3B68     		ldr	r3, [r7]
 27926              	.LBE3642:
 27927              	.LBE3641:
 27928              	.LBE3640:
 27929              	.LBE3639:
6131:src/xeq.c     **** 	}
 27930              		.loc 1 6131 3 view .LVU7348
 27931 01b6 DAF80000 		ldr	r0, [r10]
 27932              	.LVL2169:
 27933              	.LBB3648:
 27934              	.LBI3639:
1531:src/xeq.c     **** 	if (is_dblmode())
 27935              		.loc 1 1531 6 is_stmt 1 view .LVU7349
 27936              	.LBB3647:
1532:src/xeq.c     **** 		n <<= 1;
 27937              		.loc 1 1532 2 view .LVU7350
 27938              	.LBB3645:
 27939              	.LBI3641:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27940              		.loc 1 1112 5 view .LVU7351
 27941              	.LBB3643:
1113:src/xeq.c     **** }
 27942              		.loc 1 1113 2 view .LVU7352
1113:src/xeq.c     **** }
 27943              		.loc 1 1113 24 is_stmt 0 view .LVU7353
 27944 01ba B3F8E827 		ldrh	r2, [r3, #2024]
 27945              	.LBE3643:
 27946              	.LBE3645:
1534:src/xeq.c     **** }
 27947              		.loc 1 1534 2 view .LVU7354
 27948 01be 1049     		ldr	r1, .L2025+28
 27949              	.LBB3646:
 27950              	.LBB3644:
1113:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 717


 27951              		.loc 1 1113 24 view .LVU7355
 27952 01c0 44F20103 		movw	r3, #16385
 27953              	.LBE3644:
 27954              	.LBE3646:
1532:src/xeq.c     **** 		n <<= 1;
 27955              		.loc 1 1532 5 view .LVU7356
 27956 01c4 1340     		ands	r3, r3, r2
 27957 01c6 B3F5804F 		cmp	r3, #16384
1533:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 27958              		.loc 1 1533 3 is_stmt 1 view .LVU7357
1533:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 27959              		.loc 1 1533 5 is_stmt 0 view .LVU7358
 27960 01ca 08BF     		it	eq
 27961 01cc 6400     		lsleq	r4, r4, #1
 27962              	.LVL2170:
1534:src/xeq.c     **** }
 27963              		.loc 1 1534 2 is_stmt 1 view .LVU7359
 27964 01ce E200     		lsls	r2, r4, #3
 27965 01d0 FFF7FEFF 		bl	xcopy
 27966              	.LVL2171:
1535:src/xeq.c     **** 
 27967              		.loc 1 1535 1 is_stmt 0 view .LVU7360
 27968 01d4 21E7     		b	.L1979
 27969              	.LVL2172:
 27970              	.L2021:
1535:src/xeq.c     **** 
 27971              		.loc 1 1535 1 view .LVU7361
 27972              	.LBE3647:
 27973              	.LBE3648:
6087:src/xeq.c     **** 		else
 27974              		.loc 1 6087 4 is_stmt 1 view .LVU7362
 27975 01d6 FFF7FEFF 		bl	setlastXY
 27976              	.LVL2173:
 27977 01da 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 27978 01dc 61E7     		b	.L1983
 27979              	.LVL2174:
 27980              	.L2023:
6087:src/xeq.c     **** 		else
 27981              		.loc 1 6087 4 is_stmt 0 view .LVU7363
 27982 01de 074E     		ldr	r6, .L2025+24
 27983 01e0 83E7     		b	.L1987
 27984              	.L2026:
 27985 01e2 00BF     		.align	2
 27986              	.L2025:
 27987 01e4 00000000 		.word	XromParams
 27988 01e8 00000000 		.word	Error
 27989 01ec 00000000 		.word	main_ram
 27990 01f0 00000000 		.word	UserLocalRegs
 27991 01f4 00000000 		.word	RetStk
 27992 01f8 FEBFF78F 		.word	-1879588866
 27993 01fc 00000000 		.word	StateWhileOn
 27994 0200 00000000 		.word	XromLocal
 27995 0204 00000000 		.word	StackBase
 27996              	.LBE3650:
 27997              	.LBE3651:
 27998              		.cfi_endproc
 27999              	.LFE266:
ARM GAS  /tmp/ccQQPlfu.s 			page 718


 28001              		.section	.text.cmdconverged,"ax",%progbits
 28002              		.align	1
 28003              		.p2align 2,,3
 28004              		.global	cmdconverged
 28005              		.syntax unified
 28006              		.thumb
 28007              		.thumb_func
 28008              		.fpu fpv4-sp-d16
 28010              	cmdconverged:
 28011              	.LVL2175:
 28012              	.LFB267:
6159:src/xeq.c     **** 
6160:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
6161:src/xeq.c     **** /*
6162:src/xeq.c     ****  *  Allow access to command argument from XROM
6163:src/xeq.c     ****  */
6164:src/xeq.c     **** void cmdxarg(unsigned int arg, enum rarg op) {
6165:src/xeq.c     **** 	set_reg_n_int_sgn(arg, XromArg, 0);
6166:src/xeq.c     **** }
6167:src/xeq.c     **** #endif
6168:src/xeq.c     **** 
6169:src/xeq.c     **** 
6170:src/xeq.c     **** /* A slightly obtuse command to check for convergence.
6171:src/xeq.c     ****  * Arguments are organised bitwise in this form:
6172:src/xeq.c     ****  *
6173:src/xeq.c     ****  *	SMMTT
6174:src/xeq.c     ****  *
6175:src/xeq.c     ****  * where:
6176:src/xeq.c     ****  *	TT is the tolerance parameter:
6177:src/xeq.c     ****  *
6178:src/xeq.c     ****  *	  	0	1e-14 tolerance
6179:src/xeq.c     ****  *	  	1	1e-24 tolerance
6180:src/xeq.c     ****  *	  	2	1e-32 tolerance
6181:src/xeq.c     ****  *	  	3	choose the best tolerance for the current modes
6182:src/xeq.c     ****  *			for user mode this means 0 for single precision and 2 for double precision
6183:src/xeq.c     ****  *
6184:src/xeq.c     ****  *	MM is the mode parameter:
6185:src/xeq.c     ****  *	  	0	compare real X & Y relatively
6186:src/xeq.c     ****  *	  	1	compare real X & Y absolutely
6187:src/xeq.c     ****  *	  	2	compare complex X/Y & Z/T for absolute difference
6188:src/xeq.c     ****  *	  	3	compare real X & Y relatively
6189:src/xeq.c     ****  *
6190:src/xeq.c     ****  *	S is the special number validation:
6191:src/xeq.c     ****  *		0	Nan & infinities are considered converged
6192:src/xeq.c     ****  *		1	NaN & infinities are not considered converged
6193:src/xeq.c     ****  *
6194:src/xeq.c     ****  * In integer mode, the arguemnt is completely ignored and an equality
6195:src/xeq.c     ****  * comparision is undertaken instead.
6196:src/xeq.c     ****  */
6197:src/xeq.c     **** static const decNumber * const convergence_tolerances[3] = {
6198:src/xeq.c     **** 	&const_1e_14, &const_1e_24, &const_1e_32
6199:src/xeq.c     **** };
6200:src/xeq.c     **** 
6201:src/xeq.c     **** void cmdconverged(unsigned int arg, enum rarg cmd) {
 28013              		.loc 1 6201 52 is_stmt 1 view -0
 28014              		.cfi_startproc
 28015              		@ args = 0, pretend = 0, frame = 216
ARM GAS  /tmp/ccQQPlfu.s 			page 719


 28016              		@ frame_needed = 0, uses_anonymous_args = 0
6202:src/xeq.c     **** 	const decNumber *tolerance;
 28017              		.loc 1 6202 2 view .LVU7365
6203:src/xeq.c     **** 	unsigned int tol = arg & 3;
 28018              		.loc 1 6203 2 view .LVU7366
6204:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
6205:src/xeq.c     **** 	const int specials = arg & 0x10;
6206:src/xeq.c     **** 	const int complex = mode == 2;
6207:src/xeq.c     **** 	const int absolute = mode == 1;
6208:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
6209:src/xeq.c     **** 	int res;
6210:src/xeq.c     **** 
6211:src/xeq.c     **** 	if (is_intmode()) {
 28019              		.loc 1 6211 6 is_stmt 0 view .LVU7367
 28020 0000 374B     		ldr	r3, .L2042
6201:src/xeq.c     **** 	const decNumber *tolerance;
 28021              		.loc 1 6201 52 view .LVU7368
 28022 0002 70B5     		push	{r4, r5, r6, lr}
 28023              		.cfi_def_cfa_offset 16
 28024              		.cfi_offset 4, -16
 28025              		.cfi_offset 5, -12
 28026              		.cfi_offset 6, -8
 28027              		.cfi_offset 14, -4
 28028              		.loc 1 6211 6 view .LVU7369
 28029 0004 1A68     		ldr	r2, [r3]
 28030 0006 92F8E817 		ldrb	r1, [r2, #2024]	@ zero_extendqisi2
 28031              	.LVL2176:
6204:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
 28032              		.loc 1 6204 2 is_stmt 1 view .LVU7370
6205:src/xeq.c     **** 	const int complex = mode == 2;
 28033              		.loc 1 6205 2 view .LVU7371
6206:src/xeq.c     **** 	const int absolute = mode == 1;
 28034              		.loc 1 6206 2 view .LVU7372
6207:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
 28035              		.loc 1 6207 2 view .LVU7373
6208:src/xeq.c     **** 	int res;
 28036              		.loc 1 6208 2 view .LVU7374
6209:src/xeq.c     **** 
 28037              		.loc 1 6209 2 view .LVU7375
 28038              		.loc 1 6211 2 view .LVU7376
 28039              		.loc 1 6211 5 is_stmt 0 view .LVU7377
 28040 000a CB07     		lsls	r3, r1, #31
6201:src/xeq.c     **** 	const decNumber *tolerance;
 28041              		.loc 1 6201 52 view .LVU7378
 28042 000c B8B0     		sub	sp, sp, #224
 28043              		.cfi_def_cfa_offset 240
 28044              		.loc 1 6211 5 view .LVU7379
 28045 000e 35D4     		bmi	.L2038
 28046 0010 00F00303 		and	r3, r0, #3
 28047              	.LVL2177:
6212:src/xeq.c     **** 		do_tst(regY_idx, TST_EQ);
6213:src/xeq.c     **** 		return;
6214:src/xeq.c     **** 	}
6215:src/xeq.c     **** 
6216:src/xeq.c     **** 	if (tol == 3) {
 28048              		.loc 1 6216 5 view .LVU7380
 28049 0014 032B     		cmp	r3, #3
ARM GAS  /tmp/ccQQPlfu.s 			page 720


 28050 0016 0446     		mov	r4, r0
 28051 0018 00F01005 		and	r5, r0, #16
 28052              	.LVL2178:
 28053              		.loc 1 6216 2 is_stmt 1 view .LVU7381
 28054              		.loc 1 6216 5 is_stmt 0 view .LVU7382
 28055 001c 24D0     		beq	.L2030
 28056 001e 314A     		ldr	r2, .L2042+4
 28057 0020 52F82360 		ldr	r6, [r2, r3, lsl #2]
 28058              	.LVL2179:
 28059              	.L2031:
6217:src/xeq.c     **** 		if (is_dblmode())
6218:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
6219:src/xeq.c     **** 		else
6220:src/xeq.c     **** 			tol = 0;
6221:src/xeq.c     **** 	}
6222:src/xeq.c     **** 	tolerance = convergence_tolerances[tol];
 28060              		.loc 1 6222 2 is_stmt 1 view .LVU7383
6223:src/xeq.c     **** 
6224:src/xeq.c     **** 	getXYZT(&x, &y, &z, &t);
 28061              		.loc 1 6224 2 view .LVU7384
 28062              	.LBB3652:
 28063              	.LBI3652:
 873:src/xeq.c     **** 	getXYZ(x, y, z);
 28064              		.loc 1 873 6 view .LVU7385
 28065              	.LBB3653:
 874:src/xeq.c     **** 	getT(t);
 28066              		.loc 1 874 2 view .LVU7386
 28067 0024 1DAA     		add	r2, sp, #116
 28068              	.LVL2180:
 874:src/xeq.c     **** 	getT(t);
 28069              		.loc 1 874 2 is_stmt 0 view .LVU7387
 28070 0026 14A9     		add	r1, sp, #80
 28071              	.LVL2181:
 874:src/xeq.c     **** 	getT(t);
 28072              		.loc 1 874 2 view .LVU7388
 28073 0028 0BA8     		add	r0, sp, #44
 28074              	.LVL2182:
 874:src/xeq.c     **** 	getT(t);
 28075              		.loc 1 874 2 view .LVU7389
 28076 002a FFF7FEFF 		bl	getXYZ
 28077              	.LVL2183:
 875:src/xeq.c     **** }
 28078              		.loc 1 875 2 is_stmt 1 view .LVU7390
 28079              	.LBB3654:
 28080              	.LBI3654:
 844:src/xeq.c     **** 	getRegister(t, regT_idx);
 28081              		.loc 1 844 13 view .LVU7391
 28082              	.LBB3655:
 845:src/xeq.c     **** }
 28083              		.loc 1 845 2 view .LVU7392
 28084 002e 02A8     		add	r0, sp, #8
 28085              	.LVL2184:
 845:src/xeq.c     **** }
 28086              		.loc 1 845 2 is_stmt 0 view .LVU7393
 28087 0030 6721     		movs	r1, #103
 28088 0032 FFF7FEFF 		bl	getRegister
 28089              	.LVL2185:
ARM GAS  /tmp/ccQQPlfu.s 			page 721


 845:src/xeq.c     **** }
 28090              		.loc 1 845 2 view .LVU7394
 28091              	.LBE3655:
 28092              	.LBE3654:
 28093              	.LBE3653:
 28094              	.LBE3652:
6225:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || decNumberIsSpecial(&y))
 28095              		.loc 1 6225 2 is_stmt 1 view .LVU7395
 28096              		.loc 1 6225 29 is_stmt 0 view .LVU7396
 28097 0036 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 28098 003a 9DF85820 		ldrb	r2, [sp, #88]	@ zero_extendqisi2
 28099 003e 1343     		orrs	r3, r3, r2
 28100 0040 13F0700F 		tst	r3, #112
 28101 0044 0BD1     		bne	.L2032
6204:src/xeq.c     **** 	const int specials = arg & 0x10;
 28102              		.loc 1 6204 21 view .LVU7397
 28103 0046 C4F38104 		ubfx	r4, r4, #2, #2
 28104              	.LVL2186:
6226:src/xeq.c     **** 		res = specials;
6227:src/xeq.c     **** 	else if (complex) {
 28105              		.loc 1 6227 7 is_stmt 1 view .LVU7398
 28106              		.loc 1 6227 10 is_stmt 0 view .LVU7399
 28107 004a 022C     		cmp	r4, #2
 28108 004c 26D0     		beq	.L2039
6228:src/xeq.c     **** 		if (decNumberIsSpecial(&z) || decNumberIsSpecial(&t))
6229:src/xeq.c     **** 			res = specials;
6230:src/xeq.c     **** 		else {
6231:src/xeq.c     **** 			cmplxSubtract(&a, &b, &x, &y, &z, &t);
6232:src/xeq.c     **** 			cmplxR(&x, &a, &b);
6233:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
6234:src/xeq.c     **** 		}
6235:src/xeq.c     **** 	} else {
6236:src/xeq.c     **** 		if (absolute)
 28109              		.loc 1 6236 3 is_stmt 1 view .LVU7400
 28110              		.loc 1 6236 6 is_stmt 0 view .LVU7401
 28111 004e 012C     		cmp	r4, #1
6237:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 28112              		.loc 1 6237 10 view .LVU7402
 28113 0050 3246     		mov	r2, r6
 28114 0052 14A9     		add	r1, sp, #80
 28115 0054 0BA8     		add	r0, sp, #44
6236:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 28116              		.loc 1 6236 6 view .LVU7403
 28117 0056 3ED0     		beq	.L2040
6238:src/xeq.c     **** 		else
6239:src/xeq.c     **** 			res = relative_error(&x, &y, tolerance);
 28118              		.loc 1 6239 4 is_stmt 1 view .LVU7404
 28119              		.loc 1 6239 10 is_stmt 0 view .LVU7405
 28120 0058 FFF7FEFF 		bl	relative_error
 28121              	.LVL2187:
 28122 005c 0546     		mov	r5, r0
 28123              	.LVL2188:
 28124              	.L2032:
6240:src/xeq.c     **** 	}
6241:src/xeq.c     **** 	fin_tst(res);
 28125              		.loc 1 6241 2 is_stmt 1 discriminator 1 view .LVU7406
 28126 005e 2846     		mov	r0, r5
ARM GAS  /tmp/ccQQPlfu.s 			page 722


 28127 0060 FFF7FEFF 		bl	fin_tst
 28128              	.LVL2189:
6242:src/xeq.c     **** }
 28129              		.loc 1 6242 1 is_stmt 0 discriminator 1 view .LVU7407
 28130 0064 38B0     		add	sp, sp, #224
 28131              		.cfi_remember_state
 28132              		.cfi_def_cfa_offset 16
 28133              		@ sp needed
 28134 0066 70BD     		pop	{r4, r5, r6, pc}
 28135              	.LVL2190:
 28136              	.L2030:
 28137              		.cfi_restore_state
6217:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 28138              		.loc 1 6217 3 is_stmt 1 view .LVU7408
 28139              	.LBB3656:
 28140              	.LBI3656:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28141              		.loc 1 1112 5 view .LVU7409
 28142              	.LBB3657:
1113:src/xeq.c     **** }
 28143              		.loc 1 1113 2 view .LVU7410
1113:src/xeq.c     **** }
 28144              		.loc 1 1113 24 is_stmt 0 view .LVU7411
 28145 0068 B2F8E827 		ldrh	r2, [r2, #2024]
 28146 006c 44F20103 		movw	r3, #16385
 28147              	.LVL2191:
1113:src/xeq.c     **** }
 28148              		.loc 1 1113 24 view .LVU7412
 28149              	.LBE3657:
 28150              	.LBE3656:
6217:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 28151              		.loc 1 6217 6 view .LVU7413
 28152 0070 1340     		ands	r3, r3, r2
 28153 0072 B3F5804F 		cmp	r3, #16384
 28154 0076 07D0     		beq	.L2041
 28155 0078 1B4E     		ldr	r6, .L2042+8
 28156 007a D3E7     		b	.L2031
 28157              	.LVL2192:
 28158              	.L2038:
6212:src/xeq.c     **** 		return;
 28159              		.loc 1 6212 3 is_stmt 1 view .LVU7414
 28160 007c 0021     		movs	r1, #0
 28161 007e 6520     		movs	r0, #101
 28162              	.LVL2193:
6212:src/xeq.c     **** 		return;
 28163              		.loc 1 6212 3 is_stmt 0 view .LVU7415
 28164 0080 FFF7FEFF 		bl	do_tst
 28165              	.LVL2194:
6213:src/xeq.c     **** 	}
 28166              		.loc 1 6213 3 is_stmt 1 view .LVU7416
 28167              		.loc 1 6242 1 is_stmt 0 view .LVU7417
 28168 0084 38B0     		add	sp, sp, #224
 28169              		.cfi_remember_state
 28170              		.cfi_def_cfa_offset 16
 28171              		@ sp needed
 28172 0086 70BD     		pop	{r4, r5, r6, pc}
 28173              	.LVL2195:
ARM GAS  /tmp/ccQQPlfu.s 			page 723


 28174              	.L2041:
 28175              		.cfi_restore_state
6218:src/xeq.c     **** 		else
 28176              		.loc 1 6218 4 is_stmt 1 view .LVU7418
6218:src/xeq.c     **** 		else
 28177              		.loc 1 6218 27 is_stmt 0 view .LVU7419
 28178 0088 184B     		ldr	r3, .L2042+12
6218:src/xeq.c     **** 		else
 28179              		.loc 1 6218 57 view .LVU7420
 28180 008a 194E     		ldr	r6, .L2042+16
6218:src/xeq.c     **** 		else
 28181              		.loc 1 6218 27 view .LVU7421
 28182 008c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
6218:src/xeq.c     **** 		else
 28183              		.loc 1 6218 57 view .LVU7422
 28184 008e 194A     		ldr	r2, .L2042+20
 28185 0090 03F08803 		and	r3, r3, #136
 28186 0094 802B     		cmp	r3, #128
 28187 0096 08BF     		it	eq
 28188 0098 1646     		moveq	r6, r2
 28189 009a C3E7     		b	.L2031
 28190              	.LVL2196:
 28191              	.L2039:
6228:src/xeq.c     **** 			res = specials;
 28192              		.loc 1 6228 3 is_stmt 1 view .LVU7423
6228:src/xeq.c     **** 			res = specials;
 28193              		.loc 1 6228 30 is_stmt 0 view .LVU7424
 28194 009c 9DF87C30 		ldrb	r3, [sp, #124]	@ zero_extendqisi2
 28195 00a0 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 28196 00a4 1343     		orrs	r3, r3, r2
 28197 00a6 13F0700F 		tst	r3, #112
 28198 00aa D8D1     		bne	.L2032
6231:src/xeq.c     **** 			cmplxR(&x, &a, &b);
 28199              		.loc 1 6231 4 is_stmt 1 view .LVU7425
 28200 00ac 02AB     		add	r3, sp, #8
 28201 00ae 0193     		str	r3, [sp, #4]
 28202 00b0 1DAB     		add	r3, sp, #116
 28203 00b2 0093     		str	r3, [sp]
 28204 00b4 2FA9     		add	r1, sp, #188
 28205 00b6 14AB     		add	r3, sp, #80
 28206 00b8 26A8     		add	r0, sp, #152
 28207 00ba 0BAA     		add	r2, sp, #44
 28208 00bc FFF7FEFF 		bl	cmplxSubtract
 28209              	.LVL2197:
6232:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
 28210              		.loc 1 6232 4 view .LVU7426
 28211 00c0 2FAA     		add	r2, sp, #188
 28212 00c2 26A9     		add	r1, sp, #152
 28213 00c4 0BA8     		add	r0, sp, #44
 28214 00c6 FFF7FEFF 		bl	cmplxR
 28215              	.LVL2198:
6233:src/xeq.c     **** 		}
 28216              		.loc 1 6233 4 view .LVU7427
6233:src/xeq.c     **** 		}
 28217              		.loc 1 6233 10 is_stmt 0 view .LVU7428
 28218 00ca 3146     		mov	r1, r6
 28219 00cc 0BA8     		add	r0, sp, #44
ARM GAS  /tmp/ccQQPlfu.s 			page 724


 28220 00ce FFF7FEFF 		bl	dn_lt
 28221              	.LVL2199:
 28222 00d2 0546     		mov	r5, r0
 28223              	.LVL2200:
6233:src/xeq.c     **** 		}
 28224              		.loc 1 6233 10 view .LVU7429
 28225 00d4 C3E7     		b	.L2032
 28226              	.LVL2201:
 28227              	.L2040:
6237:src/xeq.c     **** 		else
 28228              		.loc 1 6237 4 is_stmt 1 view .LVU7430
6237:src/xeq.c     **** 		else
 28229              		.loc 1 6237 10 is_stmt 0 view .LVU7431
 28230 00d6 FFF7FEFF 		bl	absolute_error
 28231              	.LVL2202:
 28232 00da 0546     		mov	r5, r0
 28233              	.LVL2203:
6237:src/xeq.c     **** 		else
 28234              		.loc 1 6237 10 view .LVU7432
 28235 00dc BFE7     		b	.L2032
 28236              	.L2043:
 28237 00de 00BF     		.align	2
 28238              	.L2042:
 28239 00e0 00000000 		.word	main_ram
 28240 00e4 00000000 		.word	.LANCHOR7
 28241 00e8 00000000 		.word	const_1e_14
 28242 00ec 00000000 		.word	XromParams
 28243 00f0 00000000 		.word	const_1e_32
 28244 00f4 00000000 		.word	const_1e_24
 28245              		.cfi_endproc
 28246              	.LFE267:
 28248              		.section	.text.cmdshuffle,"ax",%progbits
 28249              		.align	1
 28250              		.p2align 2,,3
 28251              		.global	cmdshuffle
 28252              		.syntax unified
 28253              		.thumb
 28254              		.thumb_func
 28255              		.fpu fpv4-sp-d16
 28257              	cmdshuffle:
 28258              	.LVL2204:
 28259              	.LFB268:
6243:src/xeq.c     **** 
6244:src/xeq.c     **** void cmdshuffle(unsigned int arg, enum rarg cmd) {
 28260              		.loc 1 6244 50 is_stmt 1 view -0
 28261              		.cfi_startproc
 28262              		@ args = 0, pretend = 0, frame = 64
 28263              		@ frame_needed = 0, uses_anonymous_args = 0
6245:src/xeq.c     **** 	REGISTER xyzt[4];
 28264              		.loc 1 6245 2 view .LVU7434
6246:src/xeq.c     **** 	int i;
 28265              		.loc 1 6246 2 view .LVU7435
6247:src/xeq.c     **** 
6248:src/xeq.c     **** 	set_lift();
 28266              		.loc 1 6248 2 view .LVU7436
 28267              	.LBB3658:
 28268              	.LBI3658:
ARM GAS  /tmp/ccQQPlfu.s 			page 725


 761:src/xeq.c     ****     State2.state_lift = 1;
 28269              		.loc 1 761 6 view .LVU7437
 28270              	.LBB3659:
 762:src/xeq.c     **** }
 28271              		.loc 1 762 5 view .LVU7438
 28272              	.LBE3659:
 28273              	.LBE3658:
6244:src/xeq.c     **** 	REGISTER xyzt[4];
 28274              		.loc 1 6244 50 is_stmt 0 view .LVU7439
 28275 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28276              		.cfi_def_cfa_offset 24
 28277              		.cfi_offset 4, -24
 28278              		.cfi_offset 5, -20
 28279              		.cfi_offset 6, -16
 28280              		.cfi_offset 7, -12
 28281              		.cfi_offset 8, -8
 28282              		.cfi_offset 14, -4
 28283              	.LBB3664:
 28284              	.LBB3660:
 762:src/xeq.c     **** }
 28285              		.loc 1 762 23 view .LVU7440
 28286 0004 1F4A     		ldr	r2, .L2054
 28287 0006 204E     		ldr	r6, .L2054+4
 28288 0008 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 28289              	.LBE3660:
 28290              	.LBE3664:
6244:src/xeq.c     **** 	REGISTER xyzt[4];
 28291              		.loc 1 6244 50 view .LVU7441
 28292 000a 90B0     		sub	sp, sp, #64
 28293              		.cfi_def_cfa_offset 88
 28294              	.LBB3665:
 28295              	.LBB3661:
 762:src/xeq.c     **** }
 28296              		.loc 1 762 23 view .LVU7442
 28297 000c 43F04003 		orr	r3, r3, #64
 28298              	.LBE3661:
 28299              	.LBE3665:
6244:src/xeq.c     **** 	REGISTER xyzt[4];
 28300              		.loc 1 6244 50 view .LVU7443
 28301 0010 0546     		mov	r5, r0
 28302              	.LBB3666:
 28303              	.LBB3662:
 762:src/xeq.c     **** }
 28304              		.loc 1 762 23 view .LVU7444
 28305 0012 D375     		strb	r3, [r2, #23]
 28306              	.LBE3662:
 28307              	.LBE3666:
6249:src/xeq.c     **** 	for (i=0; i<4; i++)
 28308              		.loc 1 6249 2 is_stmt 1 view .LVU7445
 28309              	.LVL2205:
 28310              		.loc 1 6249 12 view .LVU7446
 28311 0014 6F46     		mov	r7, sp
 28312              	.LBB3667:
 28313              	.LBB3663:
 762:src/xeq.c     **** }
 28314              		.loc 1 762 23 is_stmt 0 view .LVU7447
 28315 0016 6424     		movs	r4, #100
ARM GAS  /tmp/ccQQPlfu.s 			page 726


 28316              	.LBE3663:
 28317              	.LBE3667:
 28318              	.LBB3668:
 28319              	.LBB3669:
 28320              	.LBB3670:
 28321              	.LBB3671:
1113:src/xeq.c     **** }
 28322              		.loc 1 1113 24 view .LVU7448
 28323 0018 44F20108 		movw	r8, #16385
 28324              	.LVL2206:
 28325              	.L2046:
1113:src/xeq.c     **** }
 28326              		.loc 1 1113 24 view .LVU7449
 28327              	.LBE3671:
 28328              	.LBE3670:
 28329              	.LBE3669:
 28330              	.LBE3668:
6250:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28331              		.loc 1 6250 3 is_stmt 1 discriminator 3 view .LVU7450
 28332              	.LBB3678:
 28333              	.LBI3678:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28334              		.loc 1 712 11 discriminator 3 view .LVU7451
 28335              	.LBB3679:
 713:src/xeq.c     **** }
 28336              		.loc 1 713 2 discriminator 3 view .LVU7452
 713:src/xeq.c     **** }
 28337              		.loc 1 713 9 is_stmt 0 discriminator 3 view .LVU7453
 28338 001c 2046     		mov	r0, r4
 28339 001e FFF7FEFF 		bl	get_reg_n
 28340              	.LVL2207:
 713:src/xeq.c     **** }
 28341              		.loc 1 713 9 discriminator 3 view .LVU7454
 28342              	.LBE3679:
 28343              	.LBE3678:
 28344              	.LBB3681:
 28345              	.LBB3676:
 28346              	.LBB3674:
 28347              	.LBB3672:
1113:src/xeq.c     **** }
 28348              		.loc 1 1113 24 discriminator 3 view .LVU7455
 28349 0022 3368     		ldr	r3, [r6]
 28350 0024 B3F8E837 		ldrh	r3, [r3, #2024]
 28351              	.LBE3672:
 28352              	.LBE3674:
 721:src/xeq.c     **** }
 28353              		.loc 1 721 2 discriminator 3 view .LVU7456
 28354 0028 08EA0303 		and	r3, r8, r3
 28355 002c B3F5804F 		cmp	r3, #16384
 28356              	.LBE3676:
 28357              	.LBE3681:
 28358              	.LBB3682:
 28359              	.LBB3680:
 713:src/xeq.c     **** }
 28360              		.loc 1 713 9 discriminator 3 view .LVU7457
 28361 0030 0146     		mov	r1, r0
 28362              	.LVL2208:
ARM GAS  /tmp/ccQQPlfu.s 			page 727


 713:src/xeq.c     **** }
 28363              		.loc 1 713 9 discriminator 3 view .LVU7458
 28364              	.LBE3680:
 28365              	.LBE3682:
 28366              	.LBB3683:
 28367              	.LBI3668:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 28368              		.loc 1 720 6 is_stmt 1 discriminator 3 view .LVU7459
 28369              	.LBB3677:
 721:src/xeq.c     **** }
 28370              		.loc 1 721 2 discriminator 3 view .LVU7460
 28371              	.LBB3675:
 28372              	.LBI3670:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28373              		.loc 1 1112 5 discriminator 3 view .LVU7461
 28374              	.LBB3673:
1113:src/xeq.c     **** }
 28375              		.loc 1 1113 2 discriminator 3 view .LVU7462
 28376              	.LBE3673:
 28377              	.LBE3675:
 721:src/xeq.c     **** }
 28378              		.loc 1 721 2 is_stmt 0 discriminator 3 view .LVU7463
 28379 0032 0CBF     		ite	eq
 28380 0034 1022     		moveq	r2, #16
 28381 0036 0822     		movne	r2, #8
 28382 0038 3846     		mov	r0, r7
 28383              	.LVL2209:
 721:src/xeq.c     **** }
 28384              		.loc 1 721 2 discriminator 3 view .LVU7464
 28385 003a 0134     		adds	r4, r4, #1
 28386              	.LVL2210:
 721:src/xeq.c     **** }
 28387              		.loc 1 721 2 discriminator 3 view .LVU7465
 28388 003c FFF7FEFF 		bl	xcopy
 28389              	.LVL2211:
 721:src/xeq.c     **** }
 28390              		.loc 1 721 2 discriminator 3 view .LVU7466
 28391              	.LBE3677:
 28392              	.LBE3683:
6249:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28393              		.loc 1 6249 17 is_stmt 1 discriminator 3 view .LVU7467
6249:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28394              		.loc 1 6249 12 discriminator 3 view .LVU7468
6249:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28395              		.loc 1 6249 2 is_stmt 0 discriminator 3 view .LVU7469
 28396 0040 682C     		cmp	r4, #104
 28397 0042 07F11007 		add	r7, r7, #16
 28398 0046 E9D1     		bne	.L2046
 28399 0048 6424     		movs	r4, #100
 28400              	.LBB3684:
 28401              	.LBB3685:
 28402              	.LBB3686:
 28403              	.LBB3687:
1113:src/xeq.c     **** }
 28404              		.loc 1 1113 24 view .LVU7470
 28405 004a 44F20107 		movw	r7, #16385
 28406              	.L2048:
ARM GAS  /tmp/ccQQPlfu.s 			page 728


 28407              	.LVL2212:
1113:src/xeq.c     **** }
 28408              		.loc 1 1113 24 view .LVU7471
 28409              	.LBE3687:
 28410              	.LBE3686:
 28411              	.LBE3685:
 28412              	.LBE3684:
6251:src/xeq.c     **** 
6252:src/xeq.c     **** 	for (i=0; i<4; i++) {
6253:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28413              		.loc 1 6253 3 is_stmt 1 view .LVU7472
 28414              	.LBB3694:
 28415              	.LBI3694:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28416              		.loc 1 712 11 view .LVU7473
 28417              	.LBB3695:
 713:src/xeq.c     **** }
 28418              		.loc 1 713 2 view .LVU7474
 713:src/xeq.c     **** }
 28419              		.loc 1 713 9 is_stmt 0 view .LVU7475
 28420 004e 2046     		mov	r0, r4
 28421 0050 FFF7FEFF 		bl	get_reg_n
 28422              	.LVL2213:
 713:src/xeq.c     **** }
 28423              		.loc 1 713 9 view .LVU7476
 28424              	.LBE3695:
 28425              	.LBE3694:
 28426              	.LBB3696:
 28427              	.LBB3692:
 28428              	.LBB3690:
 28429              	.LBB3688:
1113:src/xeq.c     **** }
 28430              		.loc 1 1113 24 view .LVU7477
 28431 0054 3368     		ldr	r3, [r6]
 28432 0056 B3F8E837 		ldrh	r3, [r3, #2024]
 28433              	.LBE3688:
 28434              	.LBE3690:
 721:src/xeq.c     **** }
 28435              		.loc 1 721 2 view .LVU7478
 28436 005a 3B40     		ands	r3, r3, r7
 28437 005c B3F5804F 		cmp	r3, #16384
 28438              	.LBE3692:
 28439              	.LBE3696:
 28440              		.loc 1 6253 36 view .LVU7479
 28441 0060 05F00301 		and	r1, r5, #3
 28442              	.LVL2214:
 28443              	.LBB3697:
 28444              	.LBI3684:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 28445              		.loc 1 720 6 is_stmt 1 view .LVU7480
 28446              	.LBB3693:
 721:src/xeq.c     **** }
 28447              		.loc 1 721 2 view .LVU7481
 28448              	.LBB3691:
 28449              	.LBI3686:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28450              		.loc 1 1112 5 view .LVU7482
ARM GAS  /tmp/ccQQPlfu.s 			page 729


 28451              	.LBB3689:
1113:src/xeq.c     **** }
 28452              		.loc 1 1113 2 view .LVU7483
 28453              	.LBE3689:
 28454              	.LBE3691:
 721:src/xeq.c     **** }
 28455              		.loc 1 721 2 is_stmt 0 view .LVU7484
 28456 0064 0CBF     		ite	eq
 28457 0066 1022     		moveq	r2, #16
 28458 0068 0822     		movne	r2, #8
 28459 006a 0134     		adds	r4, r4, #1
 28460              	.LVL2215:
 721:src/xeq.c     **** }
 28461              		.loc 1 721 2 view .LVU7485
 28462 006c 0DEB0111 		add	r1, sp, r1, lsl #4
 28463              	.LVL2216:
 721:src/xeq.c     **** }
 28464              		.loc 1 721 2 view .LVU7486
 28465 0070 FFF7FEFF 		bl	xcopy
 28466              	.LVL2217:
 721:src/xeq.c     **** }
 28467              		.loc 1 721 2 view .LVU7487
 28468              	.LBE3693:
 28469              	.LBE3697:
6254:src/xeq.c     **** 		arg >>= 2;
 28470              		.loc 1 6254 3 is_stmt 1 view .LVU7488
6252:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28471              		.loc 1 6252 2 is_stmt 0 view .LVU7489
 28472 0074 682C     		cmp	r4, #104
 28473              		.loc 1 6254 7 view .LVU7490
 28474 0076 4FEA9505 		lsr	r5, r5, #2
 28475              	.LVL2218:
6252:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28476              		.loc 1 6252 17 is_stmt 1 view .LVU7491
6252:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28477              		.loc 1 6252 12 view .LVU7492
6252:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28478              		.loc 1 6252 2 is_stmt 0 view .LVU7493
 28479 007a E8D1     		bne	.L2048
6255:src/xeq.c     **** 	}
6256:src/xeq.c     **** }
 28480              		.loc 1 6256 1 view .LVU7494
 28481 007c 10B0     		add	sp, sp, #64
 28482              		.cfi_def_cfa_offset 24
 28483              		@ sp needed
 28484 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28485              	.LVL2219:
 28486              	.L2055:
 28487              		.loc 1 6256 1 view .LVU7495
 28488 0082 00BF     		.align	2
 28489              	.L2054:
 28490 0084 00000000 		.word	StateWhileOn
 28491 0088 00000000 		.word	main_ram
 28492              		.cfi_endproc
 28493              	.LFE268:
 28495              		.section	.text.cmdmode,"ax",%progbits
 28496              		.align	1
ARM GAS  /tmp/ccQQPlfu.s 			page 730


 28497              		.p2align 2,,3
 28498              		.global	cmdmode
 28499              		.syntax unified
 28500              		.thumb
 28501              		.thumb_func
 28502              		.fpu fpv4-sp-d16
 28504              	cmdmode:
 28505              	.LVL2220:
 28506              	.LFB269:
6257:src/xeq.c     **** 
6258:src/xeq.c     **** /*
6259:src/xeq.c     ****  *  Toggle UState mode bits from XROM
6260:src/xeq.c     ****  */
6261:src/xeq.c     **** void cmdmode(unsigned int arg, enum rarg cmd) {
 28507              		.loc 1 6261 47 is_stmt 1 view -0
 28508              		.cfi_startproc
 28509              		@ args = 0, pretend = 0, frame = 0
 28510              		@ frame_needed = 0, uses_anonymous_args = 0
 28511              		@ link register save eliminated.
6262:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28512              		.loc 1 6262 2 view .LVU7497
6261:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28513              		.loc 1 6261 47 is_stmt 0 view .LVU7498
 28514 0000 30B4     		push	{r4, r5}
 28515              		.cfi_def_cfa_offset 8
 28516              		.cfi_offset 4, -8
 28517              		.cfi_offset 5, -4
6263:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 28518              		.loc 1 6263 62 view .LVU7499
 28519 0002 134D     		ldr	r5, .L2061
6262:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28520              		.loc 1 6262 35 view .LVU7500
 28521 0004 0122     		movs	r2, #1
 28522 0006 A0F12003 		sub	r3, r0, #32
 28523 000a C0F12004 		rsb	r4, r0, #32
 28524 000e 02FA03F3 		lsl	r3, r2, r3
 28525 0012 22FA04F4 		lsr	r4, r2, r4
 28526 0016 8240     		lsls	r2, r2, r0
 28527              		.loc 1 6263 62 view .LVU7501
 28528 0018 2868     		ldr	r0, [r5]
 28529              	.LVL2221:
6264:src/xeq.c     **** 
6265:src/xeq.c     **** 	if (cmd == RARG_MODE_SET)
 28530              		.loc 1 6265 5 view .LVU7502
 28531 001a 8129     		cmp	r1, #129
6266:src/xeq.c     **** 		*mode |= bit;
 28532              		.loc 1 6266 9 view .LVU7503
 28533 001c D0F8E457 		ldr	r5, [r0, #2020]
6262:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 28534              		.loc 1 6262 35 view .LVU7504
 28535 0020 43EA0403 		orr	r3, r3, r4
 28536              	.LVL2222:
6263:src/xeq.c     **** 
 28537              		.loc 1 6263 2 is_stmt 1 view .LVU7505
6265:src/xeq.c     **** 		*mode |= bit;
 28538              		.loc 1 6265 2 view .LVU7506
 28539              		.loc 1 6266 9 is_stmt 0 view .LVU7507
ARM GAS  /tmp/ccQQPlfu.s 			page 731


 28540 0024 00F2E471 		addw	r1, r0, #2020
 28541              	.LVL2223:
6265:src/xeq.c     **** 		*mode |= bit;
 28542              		.loc 1 6265 5 view .LVU7508
 28543 0028 0AD0     		beq	.L2060
6267:src/xeq.c     **** 	else
6268:src/xeq.c     **** 		*mode &= ~bit;
 28544              		.loc 1 6268 3 is_stmt 1 view .LVU7509
 28545              		.loc 1 6268 9 is_stmt 0 view .LVU7510
 28546 002a D0F8E847 		ldr	r4, [r0, #2024]
 28547 002e 25EA0202 		bic	r2, r5, r2
 28548              	.LVL2224:
 28549              		.loc 1 6268 9 view .LVU7511
 28550 0032 24EA0303 		bic	r3, r4, r3
 28551              	.LVL2225:
 28552              		.loc 1 6268 9 view .LVU7512
 28553 0036 C0F8E427 		str	r2, [r0, #2020]
6269:src/xeq.c     **** }
 28554              		.loc 1 6269 1 view .LVU7513
 28555 003a 30BC     		pop	{r4, r5}
 28556              		.cfi_remember_state
 28557              		.cfi_restore 5
 28558              		.cfi_restore 4
 28559              		.cfi_def_cfa_offset 0
 28560 003c 4B60     		str	r3, [r1, #4]
 28561 003e 7047     		bx	lr
 28562              	.LVL2226:
 28563              	.L2060:
 28564              		.cfi_restore_state
6266:src/xeq.c     **** 	else
 28565              		.loc 1 6266 3 is_stmt 1 view .LVU7514
6266:src/xeq.c     **** 	else
 28566              		.loc 1 6266 9 is_stmt 0 view .LVU7515
 28567 0040 4C68     		ldr	r4, [r1, #4]
 28568 0042 2A43     		orrs	r2, r2, r5
 28569              	.LVL2227:
6266:src/xeq.c     **** 	else
 28570              		.loc 1 6266 9 view .LVU7516
 28571 0044 2343     		orrs	r3, r3, r4
 28572              	.LVL2228:
6266:src/xeq.c     **** 	else
 28573              		.loc 1 6266 9 view .LVU7517
 28574 0046 C0F8E427 		str	r2, [r0, #2020]
 28575              		.loc 1 6269 1 view .LVU7518
 28576 004a 30BC     		pop	{r4, r5}
 28577              		.cfi_restore 5
 28578              		.cfi_restore 4
 28579              		.cfi_def_cfa_offset 0
 28580 004c 4B60     		str	r3, [r1, #4]
 28581 004e 7047     		bx	lr
 28582              	.L2062:
 28583              		.align	2
 28584              	.L2061:
 28585 0050 00000000 		.word	main_ram
 28586              		.cfi_endproc
 28587              	.LFE269:
 28589              		.section	.text.cmdlpop,"ax",%progbits
ARM GAS  /tmp/ccQQPlfu.s 			page 732


 28590              		.align	1
 28591              		.p2align 2,,3
 28592              		.global	cmdlpop
 28593              		.syntax unified
 28594              		.thumb
 28595              		.thumb_func
 28596              		.fpu fpv4-sp-d16
 28598              	cmdlpop:
 28599              	.LVL2229:
 28600              	.LFB270:
6270:src/xeq.c     **** 
6271:src/xeq.c     **** /*
6272:src/xeq.c     ****  *  Undo the effect of LOCL by popping the current local frame.
6273:src/xeq.c     ****  *  Needs to be executed from the same level that has established the frame.
6274:src/xeq.c     ****  */
6275:src/xeq.c     **** void cmdlpop(enum nilop op) {
 28601              		.loc 1 6275 29 is_stmt 1 view -0
 28602              		.cfi_startproc
 28603              		@ args = 0, pretend = 0, frame = 0
 28604              		@ frame_needed = 0, uses_anonymous_args = 0
6276:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 28605              		.loc 1 6276 2 view .LVU7520
6275:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 28606              		.loc 1 6275 29 is_stmt 0 view .LVU7521
 28607 0000 10B5     		push	{r4, lr}
 28608              		.cfi_def_cfa_offset 8
 28609              		.cfi_offset 4, -8
 28610              		.cfi_offset 14, -4
 28611              		.loc 1 6276 6 view .LVU7522
 28612 0002 0C4C     		ldr	r4, .L2067
 28613 0004 2368     		ldr	r3, [r4]
 28614 0006 B3F9DE17 		ldrsh	r1, [r3, #2014]
 28615              		.loc 1 6276 5 view .LVU7523
 28616 000a B3F9E227 		ldrsh	r2, [r3, #2018]
 28617 000e 8A42     		cmp	r2, r1
 28618 0010 05D0     		beq	.L2064
6277:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28619              		.loc 1 6277 3 is_stmt 1 view .LVU7524
 28620              	.LVL2230:
 28621              	.LBB3702:
 28622              	.LBI3702:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28623              		.loc 1 540 5 view .LVU7525
 28624              	.LBB3703:
 541:src/xeq.c     **** 		Error = e;
 28625              		.loc 1 541 2 view .LVU7526
 541:src/xeq.c     **** 		Error = e;
 28626              		.loc 1 541 12 is_stmt 0 view .LVU7527
 28627 0012 094B     		ldr	r3, .L2067+4
 541:src/xeq.c     **** 		Error = e;
 28628              		.loc 1 541 5 view .LVU7528
 28629 0014 1A68     		ldr	r2, [r3]
 28630 0016 0AB9     		cbnz	r2, .L2063
 28631              	.LVL2231:
 28632              	.LBB3704:
 28633              	.LBI3704:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/ccQQPlfu.s 			page 733


 28634              		.loc 1 540 5 is_stmt 1 view .LVU7529
 28635              	.LBB3705:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 28636              		.loc 1 542 3 view .LVU7530
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 28637              		.loc 1 542 9 is_stmt 0 view .LVU7531
 28638 0018 0722     		movs	r2, #7
 28639 001a 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 28640              		.loc 1 543 3 is_stmt 1 view .LVU7532
 28641              	.LVL2232:
 28642              	.L2063:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 28643              		.loc 1 543 3 is_stmt 0 view .LVU7533
 28644              	.LBE3705:
 28645              	.LBE3704:
 28646              	.LBE3703:
 28647              	.LBE3702:
6278:src/xeq.c     **** 		return;
6279:src/xeq.c     **** 	}
6280:src/xeq.c     **** 	RetStkPtr = LocalRegs;
6281:src/xeq.c     **** 	retstk_up();
6282:src/xeq.c     **** 	--RetStkPtr;
6283:src/xeq.c     **** }
 28648              		.loc 1 6283 1 view .LVU7534
 28649 001c 10BD     		pop	{r4, pc}
 28650              	.LVL2233:
 28651              	.L2064:
6280:src/xeq.c     **** 	retstk_up();
 28652              		.loc 1 6280 2 is_stmt 1 view .LVU7535
6280:src/xeq.c     **** 	retstk_up();
 28653              		.loc 1 6280 12 is_stmt 0 view .LVU7536
 28654 001e A3F8E227 		strh	r2, [r3, #2018]	@ movhi
6281:src/xeq.c     **** 	--RetStkPtr;
 28655              		.loc 1 6281 2 is_stmt 1 view .LVU7537
 28656 0022 FFF7FEFF 		bl	retstk_up
 28657              	.LVL2234:
6282:src/xeq.c     **** }
 28658              		.loc 1 6282 2 view .LVU7538
6282:src/xeq.c     **** }
 28659              		.loc 1 6282 4 is_stmt 0 view .LVU7539
 28660 0026 2268     		ldr	r2, [r4]
6282:src/xeq.c     **** }
 28661              		.loc 1 6282 2 view .LVU7540
 28662 0028 B2F8E237 		ldrh	r3, [r2, #2018]
 28663 002c 013B     		subs	r3, r3, #1
 28664 002e A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 28665              		.loc 1 6283 1 view .LVU7541
 28666 0032 10BD     		pop	{r4, pc}
 28667              	.L2068:
 28668              		.align	2
 28669              	.L2067:
 28670 0034 00000000 		.word	main_ram
 28671 0038 00000000 		.word	Error
 28672              		.cfi_endproc
 28673              	.LFE270:
 28675              		.section	.text.cmdregs,"ax",%progbits
ARM GAS  /tmp/ccQQPlfu.s 			page 734


 28676              		.align	1
 28677              		.p2align 2,,3
 28678              		.global	cmdregs
 28679              		.syntax unified
 28680              		.thumb
 28681              		.thumb_func
 28682              		.fpu fpv4-sp-d16
 28684              	cmdregs:
 28685              	.LVL2235:
 28686              	.LFB271:
6284:src/xeq.c     **** 
6285:src/xeq.c     **** /*
6286:src/xeq.c     ****  *  Reduce the number of global registers in favour of local data on the return stack
6287:src/xeq.c     ****  */
6288:src/xeq.c     **** void cmdregs(unsigned int arg, enum rarg op) {
 28687              		.loc 1 6288 46 is_stmt 1 view -0
 28688              		.cfi_startproc
 28689              		@ args = 0, pretend = 0, frame = 0
 28690              		@ frame_needed = 0, uses_anonymous_args = 0
6289:src/xeq.c     **** 	int distance;
 28691              		.loc 1 6289 2 view .LVU7543
6290:src/xeq.c     **** 	int length;
 28692              		.loc 1 6290 2 view .LVU7544
6291:src/xeq.c     **** 
6292:src/xeq.c     **** 	if (is_dblmode()) {
 28693              		.loc 1 6292 2 view .LVU7545
 28694              	.LBB3712:
 28695              	.LBI3712:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28696              		.loc 1 1112 5 view .LVU7546
 28697              	.LBB3713:
1113:src/xeq.c     **** }
 28698              		.loc 1 1113 2 view .LVU7547
 28699              	.LBE3713:
 28700              	.LBE3712:
6288:src/xeq.c     **** 	int distance;
 28701              		.loc 1 6288 46 is_stmt 0 view .LVU7548
 28702 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28703              		.cfi_def_cfa_offset 24
 28704              		.cfi_offset 4, -24
 28705              		.cfi_offset 5, -20
 28706              		.cfi_offset 6, -16
 28707              		.cfi_offset 7, -12
 28708              		.cfi_offset 8, -8
 28709              		.cfi_offset 14, -4
 28710              	.LBB3715:
 28711              	.LBB3714:
1113:src/xeq.c     **** }
 28712              		.loc 1 1113 12 view .LVU7549
 28713 0004 294F     		ldr	r7, .L2085
 28714 0006 3A68     		ldr	r2, [r7]
1113:src/xeq.c     **** }
 28715              		.loc 1 1113 24 view .LVU7550
 28716 0008 B2F8E817 		ldrh	r1, [r2, #2024]
 28717              	.LVL2236:
1113:src/xeq.c     **** }
 28718              		.loc 1 1113 24 view .LVU7551
ARM GAS  /tmp/ccQQPlfu.s 			page 735


 28719 000c 44F20103 		movw	r3, #16385
 28720              	.LBE3714:
 28721              	.LBE3715:
 28722              		.loc 1 6292 5 view .LVU7552
 28723 0010 0B40     		ands	r3, r3, r1
 28724 0012 B3F5804F 		cmp	r3, #16384
6288:src/xeq.c     **** 	int distance;
 28725              		.loc 1 6288 46 view .LVU7553
 28726 0016 0446     		mov	r4, r0
 28727              		.loc 1 6292 5 view .LVU7554
 28728 0018 36D0     		beq	.L2081
6293:src/xeq.c     **** 		// DP register length 16 bytes
6294:src/xeq.c     **** 		length = (arg << 4); 
6295:src/xeq.c     **** 		// We need additional room for lettered registers
6296:src/xeq.c     **** 		arg = (arg << 1) + STACK_SIZE + EXTRA_REG;
6297:src/xeq.c     **** 	}
6298:src/xeq.c     **** 	else {
6299:src/xeq.c     **** 		if (UState.mode_double && arg < STACK_SIZE + EXTRA_REG) {
 28729              		.loc 1 6299 3 is_stmt 1 view .LVU7555
 28730              		.loc 1 6299 7 is_stmt 0 view .LVU7556
 28731 001a 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 28732              		.loc 1 6299 6 view .LVU7557
 28733 001e 5B06     		lsls	r3, r3, #25
 28734 0020 29D4     		bmi	.L2082
 28735              	.L2072:
6300:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
6301:src/xeq.c     **** 			// We must not release the space needed for the DP lettered registers
6302:src/xeq.c     **** 			report_err(ERR_RANGE);
6303:src/xeq.c     **** 			return;
6304:src/xeq.c     **** 		}
6305:src/xeq.c     **** 		// register length 8 bytes
6306:src/xeq.c     **** 		length = (arg << 3);
 28736              		.loc 1 6306 3 is_stmt 1 view .LVU7558
 28737              		.loc 1 6306 17 is_stmt 0 view .LVU7559
 28738 0022 4FEAC408 		lsl	r8, r4, #3
 28739              	.LVL2237:
 28740              	.L2071:
6307:src/xeq.c     **** 	}
6308:src/xeq.c     **** 	distance = NumRegs - arg;
 28741              		.loc 1 6308 2 is_stmt 1 view .LVU7560
 28742              		.loc 1 6308 13 is_stmt 0 view .LVU7561
 28743 0026 92F8CF57 		ldrb	r5, [r2, #1999]	@ zero_extendqisi2
 28744              		.loc 1 6308 21 view .LVU7562
 28745 002a 2D1B     		subs	r5, r5, r4
 28746              	.LVL2238:
6309:src/xeq.c     **** 	
6310:src/xeq.c     **** 	// Move return stack, check for room
6311:src/xeq.c     **** 	if (move_retstk(distance << 2))
 28747              		.loc 1 6311 2 is_stmt 1 view .LVU7563
 28748              		.loc 1 6311 6 is_stmt 0 view .LVU7564
 28749 002c A800     		lsls	r0, r5, #2
 28750 002e FFF7FEFF 		bl	move_retstk
 28751              	.LVL2239:
 28752              		.loc 1 6311 5 view .LVU7565
 28753 0032 0646     		mov	r6, r0
 28754 0034 08B1     		cbz	r0, .L2083
 28755              	.LVL2240:
ARM GAS  /tmp/ccQQPlfu.s 			page 736


 28756              	.L2069:
6312:src/xeq.c     **** 		return;
6313:src/xeq.c     **** 	
6314:src/xeq.c     **** 	// Move register contents, including the statistics registers
6315:src/xeq.c     **** 	xcopy((unsigned short *)(Regs + TOPREALREG - arg)     - SizeStatRegs,
6316:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
6317:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
6318:src/xeq.c     **** 
6319:src/xeq.c     **** 	// Clear the left space
6320:src/xeq.c     **** 	if (distance < 0)
6321:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
6322:src/xeq.c     **** 	NumRegs = arg;
6323:src/xeq.c     **** }
 28757              		.loc 1 6323 1 view .LVU7566
 28758 0036 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28759              	.LVL2241:
 28760              	.L2083:
6315:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28761              		.loc 1 6315 2 is_stmt 1 view .LVU7567
6315:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28762              		.loc 1 6315 27 is_stmt 0 view .LVU7568
 28763 003a 3B68     		ldr	r3, [r7]
6315:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28764              		.loc 1 6315 56 view .LVU7569
 28765 003c 1C4A     		ldr	r2, .L2085+4
6316:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28766              		.loc 1 6316 45 view .LVU7570
 28767 003e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
6315:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28768              		.loc 1 6315 56 view .LVU7571
 28769 0042 1268     		ldr	r2, [r2]
6316:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28770              		.loc 1 6316 45 view .LVU7572
 28771 0044 C1F16401 		rsb	r1, r1, #100
6315:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28772              		.loc 1 6315 45 view .LVU7573
 28773 0048 C4F16400 		rsb	r0, r4, #100
6315:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28774              		.loc 1 6315 27 view .LVU7574
 28775 004c 03F22C43 		addw	r3, r3, #1068
6316:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28776              		.loc 1 6316 56 view .LVU7575
 28777 0050 C2EB8101 		rsb	r1, r2, r1, lsl #2
6315:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28778              		.loc 1 6315 56 view .LVU7576
 28779 0054 C2EB8000 		rsb	r0, r2, r0, lsl #2
6315:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28780              		.loc 1 6315 2 view .LVU7577
 28781 0058 03EB4101 		add	r1, r3, r1, lsl #1
 28782 005c 08EB4202 		add	r2, r8, r2, lsl #1
 28783 0060 03EB4000 		add	r0, r3, r0, lsl #1
 28784 0064 FFF7FEFF 		bl	xcopy
 28785              	.LVL2242:
6320:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 28786              		.loc 1 6320 2 is_stmt 1 view .LVU7578
6320:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 28787              		.loc 1 6320 5 is_stmt 0 view .LVU7579
ARM GAS  /tmp/ccQQPlfu.s 			page 737


 28788 0068 002D     		cmp	r5, #0
 28789 006a 13DB     		blt	.L2084
 28790              	.L2076:
6322:src/xeq.c     **** }
 28791              		.loc 1 6322 2 is_stmt 1 view .LVU7580
6322:src/xeq.c     **** }
 28792              		.loc 1 6322 10 is_stmt 0 view .LVU7581
 28793 006c 3B68     		ldr	r3, [r7]
 28794 006e 83F8CF47 		strb	r4, [r3, #1999]
 28795              		.loc 1 6323 1 view .LVU7582
 28796 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28797              	.LVL2243:
 28798              	.L2082:
6299:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
 28799              		.loc 1 6299 26 discriminator 1 view .LVU7583
 28800 0076 0B28     		cmp	r0, #11
 28801 0078 D3D8     		bhi	.L2072
6302:src/xeq.c     **** 			return;
 28802              		.loc 1 6302 4 is_stmt 1 view .LVU7584
 28803              	.LVL2244:
 28804              	.LBB3716:
 28805              	.LBI3716:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28806              		.loc 1 540 5 view .LVU7585
 28807              	.LBB3717:
 541:src/xeq.c     **** 		Error = e;
 28808              		.loc 1 541 2 view .LVU7586
 541:src/xeq.c     **** 		Error = e;
 28809              		.loc 1 541 12 is_stmt 0 view .LVU7587
 28810 007a 0E4B     		ldr	r3, .L2085+8
 541:src/xeq.c     **** 		Error = e;
 28811              		.loc 1 541 5 view .LVU7588
 28812 007c 1A68     		ldr	r2, [r3]
 28813 007e 002A     		cmp	r2, #0
 28814 0080 D9D1     		bne	.L2069
 28815              	.LVL2245:
 28816              	.LBB3718:
 28817              	.LBI3718:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28818              		.loc 1 540 5 is_stmt 1 view .LVU7589
 28819              	.LBB3719:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 28820              		.loc 1 542 3 view .LVU7590
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 28821              		.loc 1 542 9 is_stmt 0 view .LVU7591
 28822 0082 0822     		movs	r2, #8
 28823 0084 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 28824              		.loc 1 543 3 is_stmt 1 view .LVU7592
 28825 0086 D6E7     		b	.L2069
 28826              	.LVL2246:
 28827              	.L2081:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 28828              		.loc 1 543 3 is_stmt 0 view .LVU7593
 28829              	.LBE3719:
 28830              	.LBE3718:
 28831              	.LBE3717:
ARM GAS  /tmp/ccQQPlfu.s 			page 738


 28832              	.LBE3716:
6294:src/xeq.c     **** 		// We need additional room for lettered registers
 28833              		.loc 1 6294 3 is_stmt 1 view .LVU7594
6296:src/xeq.c     **** 	}
 28834              		.loc 1 6296 14 is_stmt 0 view .LVU7595
 28835 0088 4300     		lsls	r3, r0, #1
6294:src/xeq.c     **** 		// We need additional room for lettered registers
 28836              		.loc 1 6294 17 view .LVU7596
 28837 008a 4FEA0018 		lsl	r8, r0, #4
 28838              	.LVL2247:
6296:src/xeq.c     **** 	}
 28839              		.loc 1 6296 3 is_stmt 1 view .LVU7597
6296:src/xeq.c     **** 	}
 28840              		.loc 1 6296 7 is_stmt 0 view .LVU7598
 28841 008e 03F10C04 		add	r4, r3, #12
 28842              	.LVL2248:
6296:src/xeq.c     **** 	}
 28843              		.loc 1 6296 7 view .LVU7599
 28844 0092 C8E7     		b	.L2071
 28845              	.LVL2249:
 28846              	.L2084:
6321:src/xeq.c     **** 	NumRegs = arg;
 28847              		.loc 1 6321 3 is_stmt 1 view .LVU7600
6321:src/xeq.c     **** 	NumRegs = arg;
 28848              		.loc 1 6321 8 is_stmt 0 view .LVU7601
 28849 0094 3868     		ldr	r0, [r7]
6321:src/xeq.c     **** 	NumRegs = arg;
 28850              		.loc 1 6321 41 view .LVU7602
 28851 0096 6A42     		rsbs	r2, r5, #0
6321:src/xeq.c     **** 	NumRegs = arg;
 28852              		.loc 1 6321 26 view .LVU7603
 28853 0098 00EBC500 		add	r0, r0, r5, lsl #3
6321:src/xeq.c     **** 	NumRegs = arg;
 28854              		.loc 1 6321 3 view .LVU7604
 28855 009c 3146     		mov	r1, r6
 28856 009e D200     		lsls	r2, r2, #3
 28857 00a0 00F24C70 		addw	r0, r0, #1868
 28858 00a4 FFF7FEFF 		bl	xset
 28859              	.LVL2250:
 28860 00a8 E0E7     		b	.L2076
 28861              	.L2086:
 28862 00aa 00BF     		.align	2
 28863              	.L2085:
 28864 00ac 00000000 		.word	main_ram
 28865 00b0 00000000 		.word	SizeStatRegs
 28866 00b4 00000000 		.word	Error
 28867              		.cfi_endproc
 28868              	.LFE271:
 28870              		.section	.text.op_double,"ax",%progbits
 28871              		.align	1
 28872              		.p2align 2,,3
 28873              		.global	op_double
 28874              		.syntax unified
 28875              		.thumb
 28876              		.thumb_func
 28877              		.fpu fpv4-sp-d16
 28879              	op_double:
ARM GAS  /tmp/ccQQPlfu.s 			page 739


 28880              	.LVL2251:
 28881              	.LFB217:
4092:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28882              		.loc 1 4092 31 is_stmt 1 view -0
 28883              		.cfi_startproc
 28884              		@ args = 0, pretend = 0, frame = 40
 28885              		@ frame_needed = 0, uses_anonymous_args = 0
4093:src/xeq.c     **** 	const int intm = is_intmode();
 28886              		.loc 1 4093 2 view .LVU7606
4092:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28887              		.loc 1 4092 31 is_stmt 0 view .LVU7607
 28888 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28889              		.cfi_def_cfa_offset 24
 28890              		.cfi_offset 4, -24
 28891              		.cfi_offset 5, -20
 28892              		.cfi_offset 6, -16
 28893              		.cfi_offset 7, -12
 28894              		.cfi_offset 8, -8
 28895              		.cfi_offset 14, -4
4094:src/xeq.c     **** 	int i;
 28896              		.loc 1 4094 19 view .LVU7608
 28897 0004 454E     		ldr	r6, .L2115
 28898 0006 3368     		ldr	r3, [r6]
4097:src/xeq.c     **** 		// Mode switch
 28899              		.loc 1 4097 5 view .LVU7609
 28900 0008 A0F1B504 		sub	r4, r0, #181
4097:src/xeq.c     **** 		// Mode switch
 28901              		.loc 1 4097 19 view .LVU7610
 28902 000c 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
4094:src/xeq.c     **** 	int i;
 28903              		.loc 1 4094 19 view .LVU7611
 28904 0010 93F8E887 		ldrb	r8, [r3, #2024]	@ zero_extendqisi2
 28905              	.LVL2252:
4094:src/xeq.c     **** 	int i;
 28906              		.loc 1 4094 2 is_stmt 1 view .LVU7612
4097:src/xeq.c     **** 		// Mode switch
 28907              		.loc 1 4097 5 is_stmt 0 view .LVU7613
 28908 0014 B4FA84F4 		clz	r4, r4
 28909 0018 C2F38011 		ubfx	r1, r2, #6, #1
 28910 001c 6409     		lsrs	r4, r4, #5
 28911 001e 8C42     		cmp	r4, r1
4092:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28912              		.loc 1 4092 31 view .LVU7614
 28913 0020 8AB0     		sub	sp, sp, #40
 28914              		.cfi_def_cfa_offset 64
4094:src/xeq.c     **** 	int i;
 28915              		.loc 1 4094 12 view .LVU7615
 28916 0022 08F00108 		and	r8, r8, #1
 28917              	.LVL2253:
4095:src/xeq.c     **** 
 28918              		.loc 1 4095 2 is_stmt 1 view .LVU7616
4097:src/xeq.c     **** 		// Mode switch
 28919              		.loc 1 4097 2 view .LVU7617
4097:src/xeq.c     **** 		// Mode switch
 28920              		.loc 1 4097 5 is_stmt 0 view .LVU7618
 28921 0026 41D0     		beq	.L2088
4099:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
ARM GAS  /tmp/ccQQPlfu.s 			page 740


 28922              		.loc 1 4099 3 is_stmt 1 view .LVU7619
4099:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 28923              		.loc 1 4099 6 is_stmt 0 view .LVU7620
 28924 0028 B528     		cmp	r0, #181
 28925 002a 4AD0     		beq	.L2113
4117:src/xeq.c     **** 				// Convert X to K to single precision
 28926              		.loc 1 4117 4 is_stmt 1 view .LVU7621
4117:src/xeq.c     **** 				// Convert X to K to single precision
 28927              		.loc 1 4117 7 is_stmt 0 view .LVU7622
 28928 002c B8F1000F 		cmp	r8, #0
 28929 0030 25D1     		bne	.L2096
 28930 0032 6F24     		movs	r4, #111
 28931 0034 01AF     		add	r7, sp, #4
 28932              	.LVL2254:
 28933              	.L2098:
4121:src/xeq.c     **** 			}
 28934              		.loc 1 4121 6 is_stmt 1 discriminator 3 view .LVU7623
4121:src/xeq.c     **** 			}
 28935              		.loc 1 4121 28 is_stmt 0 discriminator 3 view .LVU7624
 28936 0036 03F22C43 		addw	r3, r3, #1068
 28937              	.LBB3720:
 28938              	.LBB3721:
 713:src/xeq.c     **** }
 28939              		.loc 1 713 9 discriminator 3 view .LVU7625
 28940 003a 2046     		mov	r0, r4
 28941              	.LBE3721:
 28942              	.LBE3720:
4121:src/xeq.c     **** 			}
 28943              		.loc 1 4121 6 discriminator 3 view .LVU7626
 28944 003c 03EBC405 		add	r5, r3, r4, lsl #3
 28945              	.LVL2255:
 28946              	.LBB3723:
 28947              	.LBI3720:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28948              		.loc 1 712 11 is_stmt 1 discriminator 3 view .LVU7627
 28949              	.LBB3722:
 713:src/xeq.c     **** }
 28950              		.loc 1 713 2 discriminator 3 view .LVU7628
 713:src/xeq.c     **** }
 28951              		.loc 1 713 9 is_stmt 0 discriminator 3 view .LVU7629
 28952 0040 FFF7FEFF 		bl	get_reg_n
 28953              	.LVL2256:
 713:src/xeq.c     **** }
 28954              		.loc 1 713 9 discriminator 3 view .LVU7630
 28955              	.LBE3722:
 28956              	.LBE3723:
 28957              	.LBB3724:
 28958              	.LBI3724:
 642:src/xeq.c     **** 	decNumber temp;
 28959              		.loc 1 642 6 is_stmt 1 discriminator 3 view .LVU7631
 28960              	.LBB3725:
 643:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 28961              		.loc 1 643 2 discriminator 3 view .LVU7632
 644:src/xeq.c     **** }
 28962              		.loc 1 644 2 discriminator 3 view .LVU7633
 644:src/xeq.c     **** }
 28963              		.loc 1 644 24 is_stmt 0 discriminator 3 view .LVU7634
ARM GAS  /tmp/ccQQPlfu.s 			page 741


 28964 0044 3946     		mov	r1, r7
 28965 0046 FFF7FEFF 		bl	decimal128ToNumber
 28966              	.LVL2257:
 644:src/xeq.c     **** }
 28967              		.loc 1 644 24 discriminator 3 view .LVU7635
 28968 004a 013C     		subs	r4, r4, #1
 28969              	.LVL2258:
 644:src/xeq.c     **** }
 28970              		.loc 1 644 24 discriminator 3 view .LVU7636
 28971 004c 0146     		mov	r1, r0
 644:src/xeq.c     **** }
 28972              		.loc 1 644 2 discriminator 3 view .LVU7637
 28973 004e 2846     		mov	r0, r5
 28974 0050 FFF7FEFF 		bl	packed_from_number
 28975              	.LVL2259:
 644:src/xeq.c     **** }
 28976              		.loc 1 644 2 discriminator 3 view .LVU7638
 28977              	.LBE3725:
 28978              	.LBE3724:
4120:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28979              		.loc 1 4120 50 is_stmt 1 discriminator 3 view .LVU7639
4120:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28980              		.loc 1 4120 42 discriminator 3 view .LVU7640
4120:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28981              		.loc 1 4120 5 is_stmt 0 discriminator 3 view .LVU7641
 28982 0054 632C     		cmp	r4, #99
 28983 0056 3368     		ldr	r3, [r6]
 28984 0058 EDD1     		bne	.L2098
4123:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28985              		.loc 1 4123 4 is_stmt 1 view .LVU7642
4123:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28986              		.loc 1 4123 23 is_stmt 0 view .LVU7643
 28987 005a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
4124:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28988              		.loc 1 4124 7 view .LVU7644
 28989 005e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
4123:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28990              		.loc 1 4123 23 view .LVU7645
 28991 0062 6FF38612 		bfc	r2, #6, #1
4124:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28992              		.loc 1 4124 7 view .LVU7646
 28993 0066 6429     		cmp	r1, #100
4123:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28994              		.loc 1 4123 23 view .LVU7647
 28995 0068 83F8E927 		strb	r2, [r3, #2025]
4124:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28996              		.loc 1 4124 4 is_stmt 1 view .LVU7648
4124:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28997              		.loc 1 4124 7 is_stmt 0 view .LVU7649
 28998 006c 1AD8     		bhi	.L2101
 28999              	.LVL2260:
 29000              	.L2110:
4128:src/xeq.c     **** 	if (intm) {
 29001              		.loc 1 4128 2 is_stmt 1 view .LVU7650
4128:src/xeq.c     **** 	if (intm) {
 29002              		.loc 1 4128 14 is_stmt 0 view .LVU7651
 29003 006e 6420     		movs	r0, #100
ARM GAS  /tmp/ccQQPlfu.s 			page 742


 29004 0070 FFF7FEFF 		bl	get_reg_n
 29005              	.LVL2261:
4128:src/xeq.c     **** 	if (intm) {
 29006              		.loc 1 4128 12 view .LVU7652
 29007 0074 2A4B     		ldr	r3, .L2115+4
 29008 0076 1860     		str	r0, [r3]
4129:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29009              		.loc 1 4129 2 is_stmt 1 view .LVU7653
 29010              	.L2087:
4133:src/xeq.c     **** 
 29011              		.loc 1 4133 1 is_stmt 0 view .LVU7654
 29012 0078 0AB0     		add	sp, sp, #40
 29013              		.cfi_remember_state
 29014              		.cfi_def_cfa_offset 24
 29015              		@ sp needed
 29016 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29017              	.LVL2262:
 29018              	.L2096:
 29019              		.cfi_restore_state
4123:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29020              		.loc 1 4123 4 is_stmt 1 view .LVU7655
4124:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29021              		.loc 1 4124 7 is_stmt 0 view .LVU7656
 29022 007e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
4123:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29023              		.loc 1 4123 23 view .LVU7657
 29024 0082 6FF38612 		bfc	r2, #6, #1
4124:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29025              		.loc 1 4124 7 view .LVU7658
 29026 0086 6429     		cmp	r1, #100
4123:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29027              		.loc 1 4123 23 view .LVU7659
 29028 0088 83F8E927 		strb	r2, [r3, #2025]
4124:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29029              		.loc 1 4124 4 is_stmt 1 view .LVU7660
4124:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29030              		.loc 1 4124 7 is_stmt 0 view .LVU7661
 29031 008c 0AD8     		bhi	.L2101
 29032              	.LVL2263:
 29033              	.L2109:
4128:src/xeq.c     **** 	if (intm) {
 29034              		.loc 1 4128 2 is_stmt 1 view .LVU7662
4128:src/xeq.c     **** 	if (intm) {
 29035              		.loc 1 4128 14 is_stmt 0 view .LVU7663
 29036 008e 6420     		movs	r0, #100
 29037 0090 FFF7FEFF 		bl	get_reg_n
 29038              	.LVL2264:
4128:src/xeq.c     **** 	if (intm) {
 29039              		.loc 1 4128 12 view .LVU7664
 29040 0094 224B     		ldr	r3, .L2115+4
 29041 0096 1860     		str	r0, [r3]
4129:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29042              		.loc 1 4129 2 is_stmt 1 view .LVU7665
 29043              	.L2100:
4131:src/xeq.c     **** 	}
 29044              		.loc 1 4131 3 view .LVU7666
 29045 0098 D020     		movs	r0, #208
ARM GAS  /tmp/ccQQPlfu.s 			page 743


 29046 009a FFF7FEFF 		bl	op_float
 29047              	.LVL2265:
4133:src/xeq.c     **** 
 29048              		.loc 1 4133 1 is_stmt 0 view .LVU7667
 29049 009e 0AB0     		add	sp, sp, #40
 29050              		.cfi_remember_state
 29051              		.cfi_def_cfa_offset 24
 29052              		@ sp needed
 29053 00a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29054              	.LVL2266:
 29055              	.L2101:
 29056              		.cfi_restore_state
4125:src/xeq.c     **** 		}
 29057              		.loc 1 4125 5 is_stmt 1 view .LVU7668
 29058 00a4 7D21     		movs	r1, #125
 29059 00a6 6420     		movs	r0, #100
 29060 00a8 FFF7FEFF 		bl	cmdregs
 29061              	.LVL2267:
 29062              	.L2088:
4128:src/xeq.c     **** 	if (intm) {
 29063              		.loc 1 4128 2 view .LVU7669
4128:src/xeq.c     **** 	if (intm) {
 29064              		.loc 1 4128 14 is_stmt 0 view .LVU7670
 29065 00ac 6420     		movs	r0, #100
 29066 00ae FFF7FEFF 		bl	get_reg_n
 29067              	.LVL2268:
4128:src/xeq.c     **** 	if (intm) {
 29068              		.loc 1 4128 12 view .LVU7671
 29069 00b2 1B4B     		ldr	r3, .L2115+4
 29070 00b4 1860     		str	r0, [r3]
4129:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29071              		.loc 1 4129 2 is_stmt 1 view .LVU7672
4129:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29072              		.loc 1 4129 5 is_stmt 0 view .LVU7673
 29073 00b6 B8F1000F 		cmp	r8, #0
 29074 00ba EDD1     		bne	.L2100
4133:src/xeq.c     **** 
 29075              		.loc 1 4133 1 view .LVU7674
 29076 00bc 0AB0     		add	sp, sp, #40
 29077              		.cfi_remember_state
 29078              		.cfi_def_cfa_offset 24
 29079              		@ sp needed
 29080 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29081              	.LVL2269:
 29082              	.L2113:
 29083              		.cfi_restore_state
4100:src/xeq.c     **** 				// Need space for double precision stack
 29084              		.loc 1 4100 4 is_stmt 1 view .LVU7675
4100:src/xeq.c     **** 				// Need space for double precision stack
 29085              		.loc 1 4100 7 is_stmt 0 view .LVU7676
 29086 00c2 93F8CF27 		ldrb	r2, [r3, #1999]	@ zero_extendqisi2
 29087 00c6 0B2A     		cmp	r2, #11
 29088 00c8 1ED9     		bls	.L2114
 29089              	.LVL2270:
 29090              	.L2090:
4108:src/xeq.c     **** 			if (! intm) {
 29091              		.loc 1 4108 4 is_stmt 1 view .LVU7677
ARM GAS  /tmp/ccQQPlfu.s 			page 744


4108:src/xeq.c     **** 			if (! intm) {
 29092              		.loc 1 4108 23 is_stmt 0 view .LVU7678
 29093 00ca 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 29094 00ce 42F04002 		orr	r2, r2, #64
 29095 00d2 83F8E927 		strb	r2, [r3, #2025]
4109:src/xeq.c     **** 				// Convert X to K to double precision
 29096              		.loc 1 4109 4 is_stmt 1 view .LVU7679
4109:src/xeq.c     **** 				// Convert X to K to double precision
 29097              		.loc 1 4109 7 is_stmt 0 view .LVU7680
 29098 00d6 B8F1000F 		cmp	r8, #0
 29099 00da D8D1     		bne	.L2109
 29100 00dc 6424     		movs	r4, #100
 29101 00de 01AF     		add	r7, sp, #4
 29102              	.L2094:
 29103              	.LVL2271:
4113:src/xeq.c     **** 			}
 29104              		.loc 1 4113 6 is_stmt 1 view .LVU7681
 29105              	.LBB3726:
 29106              	.LBI3726:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 29107              		.loc 1 712 11 view .LVU7682
 29108              	.LBB3727:
 713:src/xeq.c     **** }
 29109              		.loc 1 713 2 view .LVU7683
 713:src/xeq.c     **** }
 29110              		.loc 1 713 9 is_stmt 0 view .LVU7684
 29111 00e0 2046     		mov	r0, r4
 29112 00e2 FFF7FEFF 		bl	get_reg_n
 29113              	.LVL2272:
 29114              	.LBE3727:
 29115              	.LBE3726:
4113:src/xeq.c     **** 			}
 29116              		.loc 1 4113 48 view .LVU7685
 29117 00e6 3368     		ldr	r3, [r6]
 29118 00e8 03F22C43 		addw	r3, r3, #1068
 29119              	.LBB3729:
 29120              	.LBB3728:
 713:src/xeq.c     **** }
 29121              		.loc 1 713 9 view .LVU7686
 29122 00ec 0546     		mov	r5, r0
 29123              	.LVL2273:
 713:src/xeq.c     **** }
 29124              		.loc 1 713 9 view .LVU7687
 29125              	.LBE3728:
 29126              	.LBE3729:
 29127              	.LBB3730:
 29128              	.LBI3730:
 648:src/xeq.c     **** 	decNumber temp;
 29129              		.loc 1 648 6 is_stmt 1 view .LVU7688
 29130              	.LBB3731:
 649:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 29131              		.loc 1 649 2 view .LVU7689
 650:src/xeq.c     **** }
 29132              		.loc 1 650 2 view .LVU7690
 650:src/xeq.c     **** }
 29133              		.loc 1 650 27 is_stmt 0 view .LVU7691
 29134 00ee 3946     		mov	r1, r7
ARM GAS  /tmp/ccQQPlfu.s 			page 745


 29135 00f0 03EBC400 		add	r0, r3, r4, lsl #3
 29136              	.LVL2274:
 650:src/xeq.c     **** }
 29137              		.loc 1 650 27 view .LVU7692
 29138 00f4 FFF7FEFF 		bl	decimal64ToNumber
 29139              	.LVL2275:
 650:src/xeq.c     **** }
 29140              		.loc 1 650 27 view .LVU7693
 29141 00f8 0134     		adds	r4, r4, #1
 29142              	.LVL2276:
 650:src/xeq.c     **** }
 29143              		.loc 1 650 27 view .LVU7694
 29144 00fa 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 29145              		.loc 1 650 2 view .LVU7695
 29146 00fc 2846     		mov	r0, r5
 29147 00fe FFF7FEFF 		bl	packed128_from_number
 29148              	.LVL2277:
 650:src/xeq.c     **** }
 29149              		.loc 1 650 2 view .LVU7696
 29150              	.LBE3731:
 29151              	.LBE3730:
4112:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29152              		.loc 1 4112 45 is_stmt 1 view .LVU7697
4112:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29153              		.loc 1 4112 17 view .LVU7698
4112:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29154              		.loc 1 4112 5 is_stmt 0 view .LVU7699
 29155 0102 702C     		cmp	r4, #112
 29156 0104 ECD1     		bne	.L2094
 29157 0106 B2E7     		b	.L2110
 29158              	.LVL2278:
 29159              	.L2114:
4102:src/xeq.c     **** 				if (Error) {
 29160              		.loc 1 4102 5 is_stmt 1 view .LVU7700
 29161 0108 7D21     		movs	r1, #125
 29162 010a 0C20     		movs	r0, #12
 29163              	.LVL2279:
4102:src/xeq.c     **** 				if (Error) {
 29164              		.loc 1 4102 5 is_stmt 0 view .LVU7701
 29165 010c FFF7FEFF 		bl	cmdregs
 29166              	.LVL2280:
4103:src/xeq.c     **** 					return;
 29167              		.loc 1 4103 5 is_stmt 1 view .LVU7702
4103:src/xeq.c     **** 					return;
 29168              		.loc 1 4103 9 is_stmt 0 view .LVU7703
 29169 0110 044B     		ldr	r3, .L2115+8
4103:src/xeq.c     **** 					return;
 29170              		.loc 1 4103 8 view .LVU7704
 29171 0112 1B68     		ldr	r3, [r3]
 29172 0114 002B     		cmp	r3, #0
 29173 0116 AFD1     		bne	.L2087
 29174 0118 3368     		ldr	r3, [r6]
 29175 011a D6E7     		b	.L2090
 29176              	.L2116:
 29177              		.align	2
 29178              	.L2115:
ARM GAS  /tmp/ccQQPlfu.s 			page 746


 29179 011c 00000000 		.word	main_ram
 29180 0120 00000000 		.word	StackBase
 29181 0124 00000000 		.word	Error
 29182              		.cfi_endproc
 29183              	.LFE217:
 29185              		.section	.text.cmdrestm,"ax",%progbits
 29186              		.align	1
 29187              		.p2align 2,,3
 29188              		.global	cmdrestm
 29189              		.syntax unified
 29190              		.thumb
 29191              		.thumb_func
 29192              		.fpu fpv4-sp-d16
 29194              	cmdrestm:
 29195              	.LVL2281:
 29196              	.LFB212:
3775:src/xeq.c     **** 	const int dbl = is_dblmode();
 29197              		.loc 1 3775 47 is_stmt 1 view -0
 29198              		.cfi_startproc
 29199              		@ args = 0, pretend = 0, frame = 0
 29200              		@ frame_needed = 0, uses_anonymous_args = 0
3776:src/xeq.c     **** 	const int intm = is_intmode();
 29201              		.loc 1 3776 2 view .LVU7706
 29202              	.LBB3732:
 29203              	.LBI3732:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 29204              		.loc 1 1112 5 view .LVU7707
 29205              	.LBB3733:
1113:src/xeq.c     **** }
 29206              		.loc 1 1113 2 view .LVU7708
 29207              	.LBE3733:
 29208              	.LBE3732:
3775:src/xeq.c     **** 	const int dbl = is_dblmode();
 29209              		.loc 1 3775 47 is_stmt 0 view .LVU7709
 29210 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 29211              		.cfi_def_cfa_offset 24
 29212              		.cfi_offset 3, -24
 29213              		.cfi_offset 4, -20
 29214              		.cfi_offset 5, -16
 29215              		.cfi_offset 6, -12
 29216              		.cfi_offset 7, -8
 29217              		.cfi_offset 14, -4
 29218              	.LBB3741:
 29219              	.LBB3734:
1113:src/xeq.c     **** }
 29220              		.loc 1 1113 12 view .LVU7710
 29221 0002 294F     		ldr	r7, .L2125
 29222 0004 3D68     		ldr	r5, [r7]
 29223              	.LBE3734:
 29224              	.LBE3741:
3777:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29225              		.loc 1 3777 19 view .LVU7711
 29226 0006 95F8E847 		ldrb	r4, [r5, #2024]	@ zero_extendqisi2
 29227              	.LBB3742:
 29228              	.LBB3735:
1113:src/xeq.c     **** }
 29229              		.loc 1 1113 24 view .LVU7712
ARM GAS  /tmp/ccQQPlfu.s 			page 747


 29230 000a B5F8E867 		ldrh	r6, [r5, #2024]
 29231              	.LVL2282:
1113:src/xeq.c     **** }
 29232              		.loc 1 1113 24 view .LVU7713
 29233              	.LBE3735:
 29234              	.LBE3742:
3777:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29235              		.loc 1 3777 2 is_stmt 1 view .LVU7714
3778:src/xeq.c     **** 
 29236              		.loc 1 3778 18 is_stmt 0 view .LVU7715
 29237 000e FFF7FEFF 		bl	get_reg_n
 29238              	.LVL2283:
3778:src/xeq.c     **** 
 29239              		.loc 1 3778 2 view .LVU7716
 29240 0012 0822     		movs	r2, #8
3778:src/xeq.c     **** 
 29241              		.loc 1 3778 18 view .LVU7717
 29242 0014 0146     		mov	r1, r0
3778:src/xeq.c     **** 
 29243              		.loc 1 3778 2 view .LVU7718
 29244 0016 05F2E470 		addw	r0, r5, #2020
 29245 001a FFF7FEFF 		bl	xcopy
 29246              	.LVL2284:
3781:src/xeq.c     **** 		UState.contrast = 6;
 29247              		.loc 1 3781 7 view .LVU7719
 29248 001e 3B68     		ldr	r3, [r7]
3781:src/xeq.c     **** 		UState.contrast = 6;
 29249              		.loc 1 3781 23 view .LVU7720
 29250 0020 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
3781:src/xeq.c     **** 		UState.contrast = 6;
 29251              		.loc 1 3781 5 view .LVU7721
 29252 0024 1107     		lsls	r1, r2, #28
3777:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29253              		.loc 1 3777 19 view .LVU7722
 29254 0026 04F00104 		and	r4, r4, #1
 29255              	.LVL2285:
3778:src/xeq.c     **** 
 29256              		.loc 1 3778 2 is_stmt 1 view .LVU7723
3781:src/xeq.c     **** 		UState.contrast = 6;
 29257              		.loc 1 3781 2 view .LVU7724
3781:src/xeq.c     **** 		UState.contrast = 6;
 29258              		.loc 1 3781 5 is_stmt 0 view .LVU7725
 29259 002a 04D1     		bne	.L2118
3782:src/xeq.c     **** 
 29260              		.loc 1 3782 3 is_stmt 1 view .LVU7726
3782:src/xeq.c     **** 
 29261              		.loc 1 3782 19 is_stmt 0 view .LVU7727
 29262 002c 0621     		movs	r1, #6
 29263 002e 61F30302 		bfi	r2, r1, #0, #4
 29264 0032 83F8E427 		strb	r2, [r3, #2020]
 29265              	.L2118:
3784:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29266              		.loc 1 3784 2 is_stmt 1 view .LVU7728
3784:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29267              		.loc 1 3784 14 is_stmt 0 view .LVU7729
 29268 0036 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3784:src/xeq.c     **** 		// Switch back to decimal or integer mode
ARM GAS  /tmp/ccQQPlfu.s 			page 748


 29269              		.loc 1 3784 5 view .LVU7730
 29270 003a 02F00101 		and	r1, r2, #1
 29271 003e A142     		cmp	r1, r4
 29272 0040 08D0     		beq	.L2119
3786:src/xeq.c     **** 		if (intm)
 29273              		.loc 1 3786 3 is_stmt 1 view .LVU7731
3786:src/xeq.c     **** 		if (intm)
 29274              		.loc 1 3786 15 is_stmt 0 view .LVU7732
 29275 0042 64F30002 		bfi	r2, r4, #0, #1
 29276 0046 83F8E827 		strb	r2, [r3, #2024]
3787:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 29277              		.loc 1 3787 3 is_stmt 1 view .LVU7733
3787:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 29278              		.loc 1 3787 6 is_stmt 0 view .LVU7734
 29279 004a 4CB3     		cbz	r4, .L2120
3788:src/xeq.c     **** 		else
 29280              		.loc 1 3788 4 is_stmt 1 view .LVU7735
 29281 004c D120     		movs	r0, #209
 29282 004e FFF7FEFF 		bl	op_float
 29283              	.LVL2286:
 29284 0052 3B68     		ldr	r3, [r7]
 29285              	.L2119:
3792:src/xeq.c     **** 		// Switch back to double/single precision
 29286              		.loc 1 3792 2 view .LVU7736
3792:src/xeq.c     **** 		// Switch back to double/single precision
 29287              		.loc 1 3792 6 is_stmt 0 view .LVU7737
 29288 0054 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3792:src/xeq.c     **** 		// Switch back to double/single precision
 29289              		.loc 1 3792 5 view .LVU7738
 29290 0058 D207     		lsls	r2, r2, #31
 29291 005a 20D4     		bmi	.L2117
 29292              	.LBB3743:
 29293              	.LBB3744:
1113:src/xeq.c     **** }
 29294              		.loc 1 1113 24 view .LVU7739
 29295 005c B3F8E827 		ldrh	r2, [r3, #2024]
 29296              	.LBE3744:
 29297              	.LBE3743:
 29298              	.LBB3747:
 29299              	.LBB3736:
 29300 0060 44F20101 		movw	r1, #16385
 29301              	.LBE3736:
 29302              	.LBE3747:
 29303              	.LBB3748:
 29304              	.LBB3745:
 29305 0064 0A40     		ands	r2, r2, r1
 29306              	.LBE3745:
 29307              	.LBE3748:
 29308              	.LBB3749:
 29309              	.LBB3737:
 29310 0066 0E40     		ands	r6, r6, r1
 29311              	.LVL2287:
1113:src/xeq.c     **** }
 29312              		.loc 1 1113 24 view .LVU7740
 29313              	.LBE3737:
 29314              	.LBE3749:
3792:src/xeq.c     **** 		// Switch back to double/single precision
ARM GAS  /tmp/ccQQPlfu.s 			page 749


 29315              		.loc 1 3792 21 view .LVU7741
 29316 0068 A2F58042 		sub	r2, r2, #16384
 29317              	.LBB3750:
 29318              	.LBB3738:
1113:src/xeq.c     **** }
 29319              		.loc 1 1113 24 view .LVU7742
 29320 006c A6F58041 		sub	r1, r6, #16384
 29321              	.LBE3738:
 29322              	.LBE3750:
3792:src/xeq.c     **** 		// Switch back to double/single precision
 29323              		.loc 1 3792 21 view .LVU7743
 29324 0070 B2FA82F2 		clz	r2, r2
 29325              	.LBB3751:
 29326              	.LBB3739:
1113:src/xeq.c     **** }
 29327              		.loc 1 1113 24 view .LVU7744
 29328 0074 B1FA81F1 		clz	r1, r1
 29329              	.LBE3739:
 29330              	.LBE3751:
3792:src/xeq.c     **** 		// Switch back to double/single precision
 29331              		.loc 1 3792 21 view .LVU7745
 29332 0078 5209     		lsrs	r2, r2, #5
 29333              	.LBB3752:
 29334              	.LBB3740:
1113:src/xeq.c     **** }
 29335              		.loc 1 1113 24 view .LVU7746
 29336 007a 4909     		lsrs	r1, r1, #5
 29337              	.LBE3740:
 29338              	.LBE3752:
 29339              	.LBB3753:
 29340              	.LBI3743:
1112:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 29341              		.loc 1 1112 5 is_stmt 1 view .LVU7747
 29342              	.LBB3746:
1113:src/xeq.c     **** }
 29343              		.loc 1 1113 2 view .LVU7748
 29344              	.LBE3746:
 29345              	.LBE3753:
3792:src/xeq.c     **** 		// Switch back to double/single precision
 29346              		.loc 1 3792 21 is_stmt 0 view .LVU7749
 29347 007c 8A42     		cmp	r2, r1
 29348 007e 0ED0     		beq	.L2117
3794:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29349              		.loc 1 3794 3 is_stmt 1 view .LVU7750
3794:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29350              		.loc 1 3794 22 is_stmt 0 view .LVU7751
 29351 0080 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 29352 0084 61F38612 		bfi	r2, r1, #6, #1
3795:src/xeq.c     **** 	}
 29353              		.loc 1 3795 3 view .LVU7752
 29354 0088 B6F5804F 		cmp	r6, #16384
3794:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29355              		.loc 1 3794 22 view .LVU7753
 29356 008c 83F8E927 		strb	r2, [r3, #2025]
3795:src/xeq.c     **** 	}
 29357              		.loc 1 3795 3 is_stmt 1 view .LVU7754
3797:src/xeq.c     **** #endif
ARM GAS  /tmp/ccQQPlfu.s 			page 750


 29358              		.loc 1 3797 1 is_stmt 0 view .LVU7755
 29359 0090 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 29360              		.cfi_remember_state
 29361              		.cfi_restore 14
 29362              		.cfi_restore 7
 29363              		.cfi_restore 6
 29364              		.cfi_restore 5
 29365              		.cfi_restore 4
 29366              		.cfi_restore 3
 29367              		.cfi_def_cfa_offset 0
3795:src/xeq.c     **** 	}
 29368              		.loc 1 3795 3 view .LVU7756
 29369 0094 0CBF     		ite	eq
 29370 0096 B620     		moveq	r0, #182
 29371 0098 B520     		movne	r0, #181
 29372 009a FFF7FEBF 		b	op_double
 29373              	.LVL2288:
 29374              	.L2117:
 29375              		.cfi_restore_state
3797:src/xeq.c     **** #endif
 29376              		.loc 1 3797 1 view .LVU7757
 29377 009e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 29378              	.LVL2289:
 29379              	.L2120:
3790:src/xeq.c     **** 	}
 29380              		.loc 1 3790 4 is_stmt 1 view .LVU7758
 29381 00a0 FFF7FEFF 		bl	switch_to_int
 29382              	.LVL2290:
 29383 00a4 3B68     		ldr	r3, [r7]
 29384 00a6 D5E7     		b	.L2119
 29385              	.L2126:
 29386              		.align	2
 29387              	.L2125:
 29388 00a8 00000000 		.word	main_ram
 29389              		.cfi_endproc
 29390              	.LFE212:
 29392              		.section	.text.cmdxin,"ax",%progbits
 29393              		.align	1
 29394              		.p2align 2,,3
 29395              		.global	cmdxin
 29396              		.syntax unified
 29397              		.thumb
 29398              		.thumb_func
 29399              		.fpu fpv4-sp-d16
 29401              	cmdxin:
 29402              	.LVL2291:
 29403              	.LFB265:
5908:src/xeq.c     **** 
 29404              		.loc 1 5908 45 view -0
 29405              		.cfi_startproc
 29406              		@ args = 0, pretend = 0, frame = 40
 29407              		@ frame_needed = 0, uses_anonymous_args = 0
5910:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29408              		.loc 1 5910 2 view .LVU7760
5920:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29409              		.loc 1 5920 2 view .LVU7761
5908:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 751


 29410              		.loc 1 5908 45 is_stmt 0 view .LVU7762
 29411 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 29412              		.cfi_def_cfa_offset 32
 29413              		.cfi_offset 4, -32
 29414              		.cfi_offset 5, -28
 29415              		.cfi_offset 6, -24
 29416              		.cfi_offset 7, -20
 29417              		.cfi_offset 8, -16
 29418              		.cfi_offset 9, -12
 29419              		.cfi_offset 10, -8
 29420              		.cfi_offset 14, -4
5920:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29421              		.loc 1 5920 6 view .LVU7763
 29422 0004 6A4D     		ldr	r5, .L2156
5920:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29423              		.loc 1 5920 5 view .LVU7764
 29424 0006 95F90130 		ldrsb	r3, [r5, #1]
 29425 000a 002B     		cmp	r3, #0
5908:src/xeq.c     **** 
 29426              		.loc 1 5908 45 view .LVU7765
 29427 000c 8AB0     		sub	sp, sp, #40
 29428              		.cfi_def_cfa_offset 72
5920:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29429              		.loc 1 5920 5 view .LVU7766
 29430 000e C0F2AD80 		blt	.L2153
5928:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29431              		.loc 1 5928 2 is_stmt 1 view .LVU7767
 29432 0012 684E     		ldr	r6, .L2156+4
5933:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29433              		.loc 1 5933 26 is_stmt 0 view .LVU7768
 29434 0014 684F     		ldr	r7, .L2156+8
 29435              	.LBB3769:
 29436              	.LBB3770:
 738:src/xeq.c     **** }
 29437              		.loc 1 738 15 view .LVU7769
 29438 0016 DFF8B481 		ldr	r8, .L2156+28
 29439 001a 0446     		mov	r4, r0
 29440              	.LBE3770:
 29441              	.LBE3769:
5928:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29442              		.loc 1 5928 2 view .LVU7770
 29443 001c 4FF4E872 		mov	r2, #464
 29444 0020 0021     		movs	r1, #0
 29445              	.LVL2292:
5928:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29446              		.loc 1 5928 2 view .LVU7771
 29447 0022 3046     		mov	r0, r6
 29448              	.LVL2293:
5928:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29449              		.loc 1 5928 2 view .LVU7772
 29450 0024 FFF7FEFF 		bl	xset
 29451              	.LVL2294:
5929:src/xeq.c     **** 
 29452              		.loc 1 5929 2 is_stmt 1 view .LVU7773
 29453 0028 1022     		movs	r2, #16
 29454 002a 0021     		movs	r1, #0
 29455 002c 2846     		mov	r0, r5
ARM GAS  /tmp/ccQQPlfu.s 			page 752


 29456 002e FFF7FEFF 		bl	xset
 29457              	.LVL2295:
5932:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
 29458              		.loc 1 5932 2 view .LVU7774
 29459              	.LBB3774:
 29460              	.LBI3769:
 737:src/xeq.c     **** 	return State2.state_lift;
 29461              		.loc 1 737 12 view .LVU7775
 29462              	.LBB3771:
 738:src/xeq.c     **** }
 29463              		.loc 1 738 2 view .LVU7776
 29464              	.LBE3771:
 29465              	.LBE3774:
5933:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29466              		.loc 1 5933 26 is_stmt 0 view .LVU7777
 29467 0032 3A68     		ldr	r2, [r7]
 29468              	.LBB3775:
 29469              	.LBB3772:
 738:src/xeq.c     **** }
 29470              		.loc 1 738 15 view .LVU7778
 29471 0034 98F817E0 		ldrb	lr, [r8, #23]	@ zero_extendqisi2
 29472              	.LBE3772:
 29473              	.LBE3775:
5935:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29474              		.loc 1 5935 29 view .LVU7779
 29475 0038 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
5933:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29476              		.loc 1 5933 32 view .LVU7780
 29477 003c 92F8EAC7 		ldrb	ip, [r2, #2026]	@ zero_extendqisi2
5934:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29478              		.loc 1 5934 32 view .LVU7781
 29479 0040 92F8E907 		ldrb	r0, [r2, #2025]	@ zero_extendqisi2
5936:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29480              		.loc 1 5936 41 view .LVU7782
 29481 0044 92F8EB17 		ldrb	r1, [r2, #2027]	@ zero_extendqisi2
5951:src/xeq.c     **** 
 29482              		.loc 1 5951 20 view .LVU7783
 29483 0048 B2F8E2A7 		ldrh	r10, [r2, #2018]
 29484 004c A5F80CA0 		strh	r10, [r5, #12]	@ movhi
5935:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29485              		.loc 1 5935 29 view .LVU7784
 29486 0050 03F00103 		and	r3, r3, #1
 29487              	.LBB3776:
 29488              	.LBB3773:
 738:src/xeq.c     **** }
 29489              		.loc 1 738 15 view .LVU7785
 29490 0054 CEF3801E 		ubfx	lr, lr, #6, #1
 29491              	.LBE3773:
 29492              	.LBE3776:
5933:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29493              		.loc 1 5933 2 is_stmt 1 view .LVU7786
5935:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29494              		.loc 1 5935 21 is_stmt 0 view .LVU7787
 29495 0058 63F03F03 		orn	r3, r3, #63
 29496 005c 43EA4E03 		orr	r3, r3, lr, lsl #1
5933:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29497              		.loc 1 5933 32 view .LVU7788
ARM GAS  /tmp/ccQQPlfu.s 			page 753


 29498 0060 CCF3C00C 		ubfx	ip, ip, #3, #1
5934:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29499              		.loc 1 5934 2 is_stmt 1 view .LVU7789
5935:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29500              		.loc 1 5935 21 is_stmt 0 view .LVU7790
 29501 0064 43EA8C03 		orr	r3, r3, ip, lsl #2
5934:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29502              		.loc 1 5934 32 view .LVU7791
 29503 0068 C0F38010 		ubfx	r0, r0, #6, #1
5935:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29504              		.loc 1 5935 2 is_stmt 1 view .LVU7792
5936:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29505              		.loc 1 5936 9 view .LVU7793
5969:src/xeq.c     **** 	XromIn = (arg & 0x7);
 29506              		.loc 1 5969 35 is_stmt 0 view .LVU7794
 29507 006c C4F3C01C 		ubfx	ip, r4, #7, #1
5936:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29508              		.loc 1 5936 33 view .LVU7795
 29509 0070 95F802E0 		ldrb	lr, [r5, #2]	@ zero_extendqisi2
5935:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29510              		.loc 1 5935 21 view .LVU7796
 29511 0074 43EAC003 		orr	r3, r3, r0, lsl #3
5968:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 29512              		.loc 1 5968 36 view .LVU7797
 29513 0078 C4F38019 		ubfx	r9, r4, #6, #1
5950:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29514              		.loc 1 5950 17 view .LVU7798
 29515 007c 4F48     		ldr	r0, .L2156+12
5935:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29516              		.loc 1 5935 21 view .LVU7799
 29517 007e 43EA0C13 		orr	r3, r3, ip, lsl #4
5936:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29518              		.loc 1 5936 41 view .LVU7800
 29519 0082 C1F30211 		ubfx	r1, r1, #4, #3
5937:src/xeq.c     **** 	XromFlags.xIN = 1;
 29520              		.loc 1 5937 2 is_stmt 1 view .LVU7801
5938:src/xeq.c     **** 
 29521              		.loc 1 5938 2 view .LVU7802
5950:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29522              		.loc 1 5950 2 view .LVU7803
5935:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29523              		.loc 1 5935 21 is_stmt 0 view .LVU7804
 29524 0086 43EA4913 		orr	r3, r3, r9, lsl #5
5936:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29525              		.loc 1 5936 33 view .LVU7805
 29526 008a 61F3020E 		bfi	lr, r1, #0, #3
5958:src/xeq.c     **** #endif
 29527              		.loc 1 5958 17 view .LVU7806
 29528 008e 41F2020C 		movw	ip, #4098
5957:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29529              		.loc 1 5957 24 view .LVU7807
 29530 0092 4FF6FE71 		movw	r1, #65534
5950:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29531              		.loc 1 5950 17 view .LVU7808
 29532 0096 D0F80090 		ldr	r9, [r0]
5958:src/xeq.c     **** #endif
 29533              		.loc 1 5958 17 view .LVU7809
ARM GAS  /tmp/ccQQPlfu.s 			page 754


 29534 009a A6F8CCC1 		strh	ip, [r6, #460]	@ movhi
5935:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29535              		.loc 1 5935 21 view .LVU7810
 29536 009e 6B70     		strb	r3, [r5, #1]
5973:src/xeq.c     **** 		// Complex arguments are always in pairs
 29537              		.loc 1 5973 6 view .LVU7811
 29538 00a0 5FFA83FC 		uxtb	ip, r3
5936:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29539              		.loc 1 5936 33 view .LVU7812
 29540 00a4 85F802E0 		strb	lr, [r5, #2]
5957:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29541              		.loc 1 5957 24 view .LVU7813
 29542 00a8 A2F8E217 		strh	r1, [r2, #2018]	@ movhi
5953:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29543              		.loc 1 5953 9 view .LVU7814
 29544 00ac 06F5E87E 		add	lr, r6, #464
5957:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29545              		.loc 1 5957 12 view .LVU7815
 29546 00b0 A2F8DE17 		strh	r1, [r2, #2014]	@ movhi
5973:src/xeq.c     **** 		// Complex arguments are always in pairs
 29547              		.loc 1 5973 5 view .LVU7816
 29548 00b4 DB06     		lsls	r3, r3, #27
5970:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29549              		.loc 1 5970 16 view .LVU7817
 29550 00b6 04F00701 		and	r1, r4, #7
5971:src/xeq.c     **** #endif
 29551              		.loc 1 5971 24 view .LVU7818
 29552 00ba C4F3C204 		ubfx	r4, r4, #3, #3
 29553              	.LVL2296:
5953:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29554              		.loc 1 5953 9 view .LVU7819
 29555 00be C0F800E0 		str	lr, [r0]
5950:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29556              		.loc 1 5950 17 view .LVU7820
 29557 00c2 C5F80890 		str	r9, [r5, #8]
5951:src/xeq.c     **** 
 29558              		.loc 1 5951 2 is_stmt 1 view .LVU7821
5953:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29559              		.loc 1 5953 2 view .LVU7822
5957:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29560              		.loc 1 5957 2 view .LVU7823
5958:src/xeq.c     **** #endif
 29561              		.loc 1 5958 2 view .LVU7824
5968:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 29562              		.loc 1 5968 2 view .LVU7825
5969:src/xeq.c     **** 	XromIn = (arg & 0x7);
 29563              		.loc 1 5969 2 view .LVU7826
5970:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29564              		.loc 1 5970 2 view .LVU7827
5970:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29565              		.loc 1 5970 9 is_stmt 0 view .LVU7828
 29566 00c6 2971     		strb	r1, [r5, #4]
5971:src/xeq.c     **** #endif
 29567              		.loc 1 5971 2 is_stmt 1 view .LVU7829
5971:src/xeq.c     **** #endif
 29568              		.loc 1 5971 10 is_stmt 0 view .LVU7830
 29569 00c8 6C71     		strb	r4, [r5, #5]
ARM GAS  /tmp/ccQQPlfu.s 			page 755


5973:src/xeq.c     **** 		// Complex arguments are always in pairs
 29570              		.loc 1 5973 2 is_stmt 1 view .LVU7831
5973:src/xeq.c     **** 		// Complex arguments are always in pairs
 29571              		.loc 1 5973 5 is_stmt 0 view .LVU7832
 29572 00ca 03D5     		bpl	.L2131
5975:src/xeq.c     **** 		XromOut <<= 1;
 29573              		.loc 1 5975 3 is_stmt 1 view .LVU7833
5975:src/xeq.c     **** 		XromOut <<= 1;
 29574              		.loc 1 5975 10 is_stmt 0 view .LVU7834
 29575 00cc 4900     		lsls	r1, r1, #1
5976:src/xeq.c     **** 	}
 29576              		.loc 1 5976 11 view .LVU7835
 29577 00ce 6400     		lsls	r4, r4, #1
5975:src/xeq.c     **** 		XromOut <<= 1;
 29578              		.loc 1 5975 10 view .LVU7836
 29579 00d0 2971     		strb	r1, [r5, #4]
5976:src/xeq.c     **** 	}
 29580              		.loc 1 5976 3 is_stmt 1 view .LVU7837
5976:src/xeq.c     **** 	}
 29581              		.loc 1 5976 11 is_stmt 0 view .LVU7838
 29582 00d2 6C71     		strb	r4, [r5, #5]
 29583              	.L2131:
5979:src/xeq.c     **** 
 29584              		.loc 1 5979 9 is_stmt 1 view .LVU7839
5979:src/xeq.c     **** 
 29585              		.loc 1 5979 30 is_stmt 0 view .LVU7840
 29586 00d4 92F8EB37 		ldrb	r3, [r2, #2027]	@ zero_extendqisi2
5990:src/xeq.c     **** 		// Convert integers to decimal128
 29587              		.loc 1 5990 5 view .LVU7841
 29588 00d8 1CF0010F 		tst	ip, #1
5979:src/xeq.c     **** 
 29589              		.loc 1 5979 30 view .LVU7842
 29590 00dc 6FF30613 		bfc	r3, #4, #3
 29591 00e0 82F8EB37 		strb	r3, [r2, #2027]
5990:src/xeq.c     **** 		// Convert integers to decimal128
 29592              		.loc 1 5990 2 is_stmt 1 view .LVU7843
5990:src/xeq.c     **** 		// Convert integers to decimal128
 29593              		.loc 1 5990 5 is_stmt 0 view .LVU7844
 29594 00e4 52D1     		bne	.L2154
5998:src/xeq.c     **** 		// No conversion necessary
 29595              		.loc 1 5998 7 is_stmt 1 view .LVU7845
5998:src/xeq.c     **** 		// No conversion necessary
 29596              		.loc 1 5998 10 is_stmt 0 view .LVU7846
 29597 00e6 1CF0080F 		tst	ip, #8
 29598 00ea 47D1     		bne	.L2155
6019:src/xeq.c     **** #endif
 29599              		.loc 1 6019 3 is_stmt 1 view .LVU7847
 29600 00ec B520     		movs	r0, #181
 29601 00ee FFF7FEFF 		bl	op_double
 29602              	.LVL2297:
 29603              	.L2133:
6024:src/xeq.c     **** 	UState.stack_depth = 1;
 29604              		.loc 1 6024 2 view .LVU7848
 29605              	.LBB3777:
 29606              	.LBI3777:
 761:src/xeq.c     ****     State2.state_lift = 1;
 29607              		.loc 1 761 6 view .LVU7849
ARM GAS  /tmp/ccQQPlfu.s 			page 756


 29608              	.LBB3778:
 762:src/xeq.c     **** }
 29609              		.loc 1 762 5 view .LVU7850
 762:src/xeq.c     **** }
 29610              		.loc 1 762 23 is_stmt 0 view .LVU7851
 29611 00f2 98F81730 		ldrb	r3, [r8, #23]	@ zero_extendqisi2
 29612              	.LBE3778:
 29613              	.LBE3777:
6025:src/xeq.c     **** 
 29614              		.loc 1 6025 21 view .LVU7852
 29615 00f6 3A68     		ldr	r2, [r7]
 29616              	.LBB3780:
 29617              	.LBB3779:
 762:src/xeq.c     **** }
 29618              		.loc 1 762 23 view .LVU7853
 29619 00f8 43F04003 		orr	r3, r3, #64
 29620 00fc 88F81730 		strb	r3, [r8, #23]
 29621              	.LBE3779:
 29622              	.LBE3780:
6025:src/xeq.c     **** 
 29623              		.loc 1 6025 2 is_stmt 1 view .LVU7854
6025:src/xeq.c     **** 
 29624              		.loc 1 6025 21 is_stmt 0 view .LVU7855
 29625 0100 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 29626 0104 43F00803 		orr	r3, r3, #8
 29627 0108 82F8EA37 		strb	r3, [r2, #2026]
6028:src/xeq.c     **** 		decNumber x;
 29628              		.loc 1 6028 2 is_stmt 1 view .LVU7856
 29629              	.LVL2298:
6028:src/xeq.c     **** 		decNumber x;
 29630              		.loc 1 6028 14 view .LVU7857
6028:src/xeq.c     **** 		decNumber x;
 29631              		.loc 1 6028 2 is_stmt 0 view .LVU7858
 29632 010c 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 29633 010e 93B3     		cbz	r3, .L2127
6028:src/xeq.c     **** 		decNumber x;
 29634              		.loc 1 6028 9 view .LVU7859
 29635 0110 0024     		movs	r4, #0
 29636 0112 02E0     		b	.L2140
 29637              	.LVL2299:
 29638              	.L2135:
6028:src/xeq.c     **** 		decNumber x;
 29639              		.loc 1 6028 18 view .LVU7860
 29640 0114 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
6028:src/xeq.c     **** 		decNumber x;
 29641              		.loc 1 6028 2 view .LVU7861
 29642 0116 A342     		cmp	r3, r4
 29643 0118 2DDD     		ble	.L2127
 29644              	.LVL2300:
 29645              	.L2140:
 29646              	.LBB3781:
6029:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
 29647              		.loc 1 6029 3 is_stmt 1 view .LVU7862
6030:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29648              		.loc 1 6030 3 view .LVU7863
6030:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29649              		.loc 1 6030 7 is_stmt 0 view .LVU7864
ARM GAS  /tmp/ccQQPlfu.s 			page 757


 29650 011a 04F16401 		add	r1, r4, #100
 29651 011e 01A8     		add	r0, sp, #4
 29652 0120 FFF7FEFF 		bl	getRegister
 29653              	.LVL2301:
 29654              	.LBE3781:
6028:src/xeq.c     **** 		decNumber x;
 29655              		.loc 1 6028 26 is_stmt 1 view .LVU7865
 29656              	.LBB3788:
6030:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29657              		.loc 1 6030 6 is_stmt 0 view .LVU7866
 29658 0124 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 29659 0126 13F0300F 		tst	r3, #48
 29660              	.LBE3788:
6028:src/xeq.c     **** 		decNumber x;
 29661              		.loc 1 6028 26 view .LVU7867
 29662 012a 04F10104 		add	r4, r4, #1
 29663              	.LVL2302:
6028:src/xeq.c     **** 		decNumber x;
 29664              		.loc 1 6028 14 is_stmt 1 view .LVU7868
 29665              	.LBB3789:
6030:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29666              		.loc 1 6030 6 is_stmt 0 view .LVU7869
 29667 012e F1D0     		beq	.L2135
6033:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 29668              		.loc 1 6033 4 is_stmt 1 view .LVU7870
 29669              	.LVL2303:
 29670              	.LBB3782:
 29671              	.LBI3782:
3543:src/xeq.c     **** 	unsigned short mask;
 29672              		.loc 1 3543 5 view .LVU7871
 29673              	.LBB3783:
3544:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 29674              		.loc 1 3544 2 view .LVU7872
3545:src/xeq.c     **** 
 29675              		.loc 1 3545 2 view .LVU7873
3545:src/xeq.c     **** 
 29676              		.loc 1 3545 34 is_stmt 0 view .LVU7874
 29677 0130 0DF10201 		add	r1, sp, #2
 29678 0134 6B20     		movs	r0, #107
 29679 0136 FFF7FEFF 		bl	flag_word
 29680              	.LVL2304:
3547:src/xeq.c     **** }
 29681              		.loc 1 3547 2 is_stmt 1 view .LVU7875
3547:src/xeq.c     **** }
 29682              		.loc 1 3547 24 is_stmt 0 view .LVU7876
 29683 013a BDF80230 		ldrh	r3, [sp, #2]
 29684 013e 0288     		ldrh	r2, [r0]
 29685              	.LBE3783:
 29686              	.LBE3782:
6033:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 29687              		.loc 1 6033 7 view .LVU7877
 29688 0140 1A42     		tst	r2, r3
 29689 0142 2DD0     		beq	.L2136
 29690              	.LVL2305:
6034:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29691              		.loc 1 6034 17 is_stmt 1 view .LVU7878
6034:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
ARM GAS  /tmp/ccQQPlfu.s 			page 758


 29692              		.loc 1 6034 5 is_stmt 0 view .LVU7879
 29693 0144 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 29694 0146 53B1     		cbz	r3, .L2137
6035:src/xeq.c     **** 				// Early exit of routine
 29695              		.loc 1 6035 6 view .LVU7880
 29696 0148 1D4E     		ldr	r6, .L2156+16
6034:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29697              		.loc 1 6034 12 view .LVU7881
 29698 014a 0024     		movs	r4, #0
 29699              	.LVL2306:
 29700              	.L2138:
6035:src/xeq.c     **** 				// Early exit of routine
 29701              		.loc 1 6035 6 is_stmt 1 discriminator 3 view .LVU7882
 29702 014c 04F16400 		add	r0, r4, #100
 29703 0150 3146     		mov	r1, r6
 29704 0152 FFF7FEFF 		bl	setRegister
 29705              	.LVL2307:
6034:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29706              		.loc 1 6034 30 discriminator 3 view .LVU7883
6034:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29707              		.loc 1 6034 21 is_stmt 0 discriminator 3 view .LVU7884
 29708 0156 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
6034:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29709              		.loc 1 6034 30 discriminator 3 view .LVU7885
 29710 0158 0134     		adds	r4, r4, #1
 29711              	.LVL2308:
6034:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29712              		.loc 1 6034 17 is_stmt 1 discriminator 3 view .LVU7886
6034:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29713              		.loc 1 6034 5 is_stmt 0 discriminator 3 view .LVU7887
 29714 015a A342     		cmp	r3, r4
 29715 015c F6DC     		bgt	.L2138
 29716              	.LVL2309:
 29717              	.L2137:
6037:src/xeq.c     **** 			} 
 29718              		.loc 1 6037 5 is_stmt 1 view .LVU7888
 29719 015e 8421     		movs	r1, #132
 29720 0160 0020     		movs	r0, #0
 29721 0162 FFF7FEFF 		bl	cmdxout
 29722              	.LVL2310:
 29723              	.LBE3789:
6044:src/xeq.c     **** 
 29724              		.loc 1 6044 1 is_stmt 0 view .LVU7889
 29725 0166 0AB0     		add	sp, sp, #40
 29726              		.cfi_remember_state
 29727              		.cfi_def_cfa_offset 32
 29728              		@ sp needed
 29729 0168 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 29730              	.LVL2311:
 29731              	.L2153:
 29732              		.cfi_restore_state
5921:src/xeq.c     **** 		return;
 29733              		.loc 1 5921 3 is_stmt 1 view .LVU7890
 29734              	.LBB3790:
 29735              	.LBI3790:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29736              		.loc 1 540 5 view .LVU7891
ARM GAS  /tmp/ccQQPlfu.s 			page 759


 29737              	.LBB3791:
 541:src/xeq.c     **** 		Error = e;
 29738              		.loc 1 541 2 view .LVU7892
 541:src/xeq.c     **** 		Error = e;
 29739              		.loc 1 541 12 is_stmt 0 view .LVU7893
 29740 016c 154B     		ldr	r3, .L2156+20
 541:src/xeq.c     **** 		Error = e;
 29741              		.loc 1 541 5 view .LVU7894
 29742 016e 1A68     		ldr	r2, [r3]
 29743 0170 0AB9     		cbnz	r2, .L2127
 29744              	.LVL2312:
 29745              	.LBB3792:
 29746              	.LBI3792:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29747              		.loc 1 540 5 is_stmt 1 view .LVU7895
 29748              	.LBB3793:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 29749              		.loc 1 542 3 view .LVU7896
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 29750              		.loc 1 542 9 is_stmt 0 view .LVU7897
 29751 0172 0722     		movs	r2, #7
 29752 0174 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 29753              		.loc 1 543 3 is_stmt 1 view .LVU7898
 29754              	.LVL2313:
 29755              	.L2127:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 29756              		.loc 1 543 3 is_stmt 0 view .LVU7899
 29757              	.LBE3793:
 29758              	.LBE3792:
 29759              	.LBE3791:
 29760              	.LBE3790:
6044:src/xeq.c     **** 
 29761              		.loc 1 6044 1 view .LVU7900
 29762 0176 0AB0     		add	sp, sp, #40
 29763              		.cfi_remember_state
 29764              		.cfi_def_cfa_offset 32
 29765              		@ sp needed
 29766 0178 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 29767              	.L2155:
 29768              		.cfi_restore_state
6000:src/xeq.c     **** 		StackBase = XromStack;
 29769              		.loc 1 6000 3 is_stmt 1 view .LVU7901
 29770 017c 124C     		ldr	r4, .L2156+24
 29771 017e 0D48     		ldr	r0, .L2156+4
 29772 0180 2168     		ldr	r1, [r4]
 29773 0182 C022     		movs	r2, #192
 29774 0184 FFF7FEFF 		bl	xcopy
 29775              	.LVL2314:
6001:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29776              		.loc 1 6001 3 view .LVU7902
6001:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29777              		.loc 1 6001 13 is_stmt 0 view .LVU7903
 29778 0188 2660     		str	r6, [r4]
 29779 018a B2E7     		b	.L2133
 29780              	.L2154:
5993:src/xeq.c     **** #endif
ARM GAS  /tmp/ccQQPlfu.s 			page 760


 29781              		.loc 1 5993 3 is_stmt 1 view .LVU7904
5993:src/xeq.c     **** #endif
 29782              		.loc 1 5993 22 is_stmt 0 view .LVU7905
 29783 018c 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 29784 0190 43F04003 		orr	r3, r3, #64
 29785 0194 82F8E937 		strb	r3, [r2, #2025]
5995:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
 29786              		.loc 1 5995 3 is_stmt 1 view .LVU7906
 29787 0198 D020     		movs	r0, #208
 29788 019a FFF7FEFF 		bl	op_float
 29789              	.LVL2315:
 29790 019e A8E7     		b	.L2133
 29791              	.LVL2316:
 29792              	.L2136:
 29793              	.LBB3794:
6040:src/xeq.c     **** 			return;
 29794              		.loc 1 6040 5 view .LVU7907
 29795              	.LBB3784:
 29796              	.LBI3784:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29797              		.loc 1 540 5 view .LVU7908
 29798              	.LBB3785:
 541:src/xeq.c     **** 		Error = e;
 29799              		.loc 1 541 2 view .LVU7909
 541:src/xeq.c     **** 		Error = e;
 29800              		.loc 1 541 12 is_stmt 0 view .LVU7910
 29801 01a0 084B     		ldr	r3, .L2156+20
 541:src/xeq.c     **** 		Error = e;
 29802              		.loc 1 541 5 view .LVU7911
 29803 01a2 1A68     		ldr	r2, [r3]
 29804 01a4 002A     		cmp	r2, #0
 29805 01a6 E6D1     		bne	.L2127
 29806              	.LVL2317:
 29807              	.LBB3786:
 29808              	.LBI3786:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29809              		.loc 1 540 5 is_stmt 1 view .LVU7912
 29810              	.LBB3787:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 29811              		.loc 1 542 3 view .LVU7913
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 29812              		.loc 1 542 9 is_stmt 0 view .LVU7914
 29813 01a8 0122     		movs	r2, #1
 29814 01aa 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 29815              		.loc 1 543 3 is_stmt 1 view .LVU7915
 29816              	.LVL2318:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 29817              		.loc 1 543 3 is_stmt 0 view .LVU7916
 29818              	.LBE3787:
 29819              	.LBE3786:
 29820              	.LBE3785:
 29821              	.LBE3784:
6041:src/xeq.c     **** 		}
 29822              		.loc 1 6041 4 is_stmt 1 view .LVU7917
 29823 01ac E3E7     		b	.L2127
 29824              	.L2157:
ARM GAS  /tmp/ccQQPlfu.s 			page 761


 29825 01ae 00BF     		.align	2
 29826              	.L2156:
 29827 01b0 00000000 		.word	XromParams
 29828 01b4 00000000 		.word	XromLocal
 29829 01b8 00000000 		.word	main_ram
 29830 01bc 00000000 		.word	RetStk
 29831 01c0 00000000 		.word	const_NaN
 29832 01c4 00000000 		.word	Error
 29833 01c8 00000000 		.word	StackBase
 29834 01cc 00000000 		.word	StateWhileOn
 29835              	.LBE3794:
 29836              		.cfi_endproc
 29837              	.LFE265:
 29839              		.section	.rodata.xeq.str1.4,"aMS",%progbits,1
 29840              		.align	2
 29841              	.LC8:
 29842 0000 25303458 		.ascii	"%04X:%s\000"
 29842      3A257300 
 29843              		.section	.text.xeq,"ax",%progbits
 29844              		.align	1
 29845              		.p2align 2,,3
 29846              		.global	xeq
 29847              		.syntax unified
 29848              		.thumb
 29849              		.thumb_func
 29850              		.fpu fpv4-sp-d16
 29852              	xeq:
 29853              	.LVL2319:
 29854              	.LFB250:
5305:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29855              		.loc 1 5305 1 view -0
 29856              		.cfi_startproc
 29857              		@ args = 0, pretend = 0, frame = 416
 29858              		@ frame_needed = 0, uses_anonymous_args = 0
5306:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
 29859              		.loc 1 5306 2 view .LVU7919
5307:src/xeq.c     **** 	const struct _ustate old = UState;
 29860              		.loc 1 5307 2 view .LVU7920
5305:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29861              		.loc 1 5305 1 is_stmt 0 view .LVU7921
 29862 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 29863              		.cfi_def_cfa_offset 36
 29864              		.cfi_offset 4, -36
 29865              		.cfi_offset 5, -32
 29866              		.cfi_offset 6, -28
 29867              		.cfi_offset 7, -24
 29868              		.cfi_offset 8, -20
 29869              		.cfi_offset 9, -16
 29870              		.cfi_offset 10, -12
 29871              		.cfi_offset 11, -8
 29872              		.cfi_offset 14, -4
5307:src/xeq.c     **** 	const struct _ustate old = UState;
 29873              		.loc 1 5307 31 view .LVU7922
 29874 0004 BC4F     		ldr	r7, .L2502
 29875              	.LBB4096:
 29876              	.LBB4097:
 738:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 762


 29877              		.loc 1 738 15 view .LVU7923
 29878 0006 BD4C     		ldr	r4, .L2502+4
 29879              	.LBE4097:
 29880              	.LBE4096:
5307:src/xeq.c     **** 	const struct _ustate old = UState;
 29881              		.loc 1 5307 31 view .LVU7924
 29882 0008 3B68     		ldr	r3, [r7]
 29883              	.LBB4101:
 29884              	.LBB4098:
 738:src/xeq.c     **** }
 29885              		.loc 1 738 15 view .LVU7925
 29886 000a 94F817C0 		ldrb	ip, [r4, #23]	@ zero_extendqisi2
 29887              	.LBE4098:
 29888              	.LBE4101:
5308:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29889              		.loc 1 5308 23 view .LVU7926
 29890 000e D3F8E817 		ldr	r1, [r3, #2024]
5326:src/xeq.c     **** #if defined(CONSOLE)
 29891              		.loc 1 5326 2 view .LVU7927
 29892 0012 DFF82483 		ldr	r8, .L2502+64
5307:src/xeq.c     **** 	const struct _ustate old = UState;
 29893              		.loc 1 5307 23 view .LVU7928
 29894 0016 B3F8FC27 		ldrh	r2, [r3, #2044]
5310:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 29895              		.loc 1 5310 23 view .LVU7929
 29896 001a B3F8E0B7 		ldrh	fp, [r3, #2016]
5311:src/xeq.c     **** #ifdef INFRARED
 29897              		.loc 1 5311 12 view .LVU7930
 29898 001e D4F81C90 		ldr	r9, [r4, #28]
5305:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29899              		.loc 1 5305 1 view .LVU7931
 29900 0022 EBB0     		sub	sp, sp, #428
 29901              		.cfi_def_cfa_offset 464
5305:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29902              		.loc 1 5305 1 view .LVU7932
 29903 0024 0546     		mov	r5, r0
5308:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29904              		.loc 1 5308 23 view .LVU7933
 29905 0026 D3F8E407 		ldr	r0, [r3, #2020]
 29906              	.LVL2320:
5307:src/xeq.c     **** 	const struct _ustate old = UState;
 29907              		.loc 1 5307 23 view .LVU7934
 29908 002a 0392     		str	r2, [sp, #12]
 29909              	.LVL2321:
5308:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29910              		.loc 1 5308 2 is_stmt 1 view .LVU7935
5308:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29911              		.loc 1 5308 23 is_stmt 0 view .LVU7936
 29912 002c 0AAE     		add	r6, sp, #40
 29913 002e 86E80300 		stm	r6, {r0, r1}
5309:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
 29914              		.loc 1 5309 2 is_stmt 1 view .LVU7937
 29915              	.LBB4102:
 29916              	.LBI4096:
 737:src/xeq.c     **** 	return State2.state_lift;
 29917              		.loc 1 737 12 view .LVU7938
 29918              	.LBB4099:
ARM GAS  /tmp/ccQQPlfu.s 			page 763


 738:src/xeq.c     **** }
 29919              		.loc 1 738 2 view .LVU7939
 738:src/xeq.c     **** }
 29920              		.loc 1 738 15 is_stmt 0 view .LVU7940
 29921 0032 CCF38013 		ubfx	r3, ip, #6, #1
 29922              	.LBE4099:
 29923              	.LBE4102:
5326:src/xeq.c     **** #if defined(CONSOLE)
 29924              		.loc 1 5326 2 view .LVU7941
 29925 0036 D8F80010 		ldr	r1, [r8]
 29926              	.LBB4103:
 29927              	.LBB4100:
 738:src/xeq.c     **** }
 29928              		.loc 1 738 15 view .LVU7942
 29929 003a 0493     		str	r3, [sp, #16]
 29930              	.LVL2322:
 738:src/xeq.c     **** }
 29931              		.loc 1 738 15 view .LVU7943
 29932              	.LBE4100:
 29933              	.LBE4103:
5310:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 29934              		.loc 1 5310 2 is_stmt 1 view .LVU7944
5311:src/xeq.c     **** #ifdef INFRARED
 29935              		.loc 1 5311 2 view .LVU7945
5326:src/xeq.c     **** #if defined(CONSOLE)
 29936              		.loc 1 5326 2 view .LVU7946
 29937 003c A022     		movs	r2, #160
 29938 003e 42A8     		add	r0, sp, #264
 29939 0040 FFF7FEFF 		bl	xcopy
 29940              	.LVL2323:
5331:src/xeq.c     **** 		char buf[16];
 29941              		.loc 1 5331 2 view .LVU7947
5331:src/xeq.c     **** 		char buf[16];
 29942              		.loc 1 5331 5 is_stmt 0 view .LVU7948
 29943 0044 94F91730 		ldrsb	r3, [r4, #23]
 29944 0048 002B     		cmp	r3, #0
 29945 004a 1CDB     		blt	.L2469
 29946              	.L2159:
5349:src/xeq.c     **** 	State2.wascomplex = 0;
 29947              		.loc 1 5349 2 is_stmt 1 view .LVU7949
5350:src/xeq.c     **** 	if (isDBL(op))
 29948              		.loc 1 5350 20 is_stmt 0 view .LVU7950
 29949 004c 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
5349:src/xeq.c     **** 	State2.wascomplex = 0;
 29950              		.loc 1 5349 7 view .LVU7951
 29951 004e AC49     		ldr	r1, .L2502+8
 29952 0050 0023     		movs	r3, #0
5350:src/xeq.c     **** 	if (isDBL(op))
 29953              		.loc 1 5350 20 view .LVU7952
 29954 0052 63F38712 		bfi	r2, r3, #6, #2
 29955 0056 2275     		strb	r2, [r4, #20]
5351:src/xeq.c     **** 		multi(op);
 29956              		.loc 1 5351 6 view .LVU7953
 29957 0058 05F47042 		and	r2, r5, #61440
5351:src/xeq.c     **** 		multi(op);
 29958              		.loc 1 5351 5 view .LVU7954
 29959 005c B2F5704F 		cmp	r2, #61440
ARM GAS  /tmp/ccQQPlfu.s 			page 764


5349:src/xeq.c     **** 	State2.wascomplex = 0;
 29960              		.loc 1 5349 7 view .LVU7955
 29961 0060 0B60     		str	r3, [r1]
5350:src/xeq.c     **** 	if (isDBL(op))
 29962              		.loc 1 5350 2 is_stmt 1 view .LVU7956
5351:src/xeq.c     **** 		multi(op);
 29963              		.loc 1 5351 2 view .LVU7957
5351:src/xeq.c     **** 		multi(op);
 29964              		.loc 1 5351 5 is_stmt 0 view .LVU7958
 29965 0062 5FD0     		beq	.L2470
5353:src/xeq.c     **** 		rargs(op);
 29966              		.loc 1 5353 7 is_stmt 1 view .LVU7959
5353:src/xeq.c     **** 		rargs(op);
 29967              		.loc 1 5353 10 is_stmt 0 view .LVU7960
 29968 0064 32BB     		cbnz	r2, .L2471
5356:src/xeq.c     **** 		switch (opKIND(op)) {
 29969              		.loc 1 5356 3 is_stmt 1 view .LVU7961
5356:src/xeq.c     **** 		switch (opKIND(op)) {
 29970              		.loc 1 5356 13 is_stmt 0 view .LVU7962
 29971 0066 A74A     		ldr	r2, .L2502+12
 29972 0068 C5F30723 		ubfx	r3, r5, #8, #8
5356:src/xeq.c     **** 		switch (opKIND(op)) {
 29973              		.loc 1 5356 15 view .LVU7963
 29974 006c 1580     		strh	r5, [r2]	@ movhi
5357:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
 29975              		.loc 1 5357 3 is_stmt 1 view .LVU7964
 29976 006e 062B     		cmp	r3, #6
 29977 0070 00F2A280 		bhi	.L2196
 29978 0074 DFE813F0 		tbh	[pc, r3, lsl #1]
 29979              	.L2198:
 29980 0078 D101     		.2byte	(.L2204-.L2198)/2
 29981 007a 6A01     		.2byte	(.L2203-.L2198)/2
 29982 007c A301     		.2byte	(.L2202-.L2198)/2
 29983 007e 9400     		.2byte	(.L2201-.L2198)/2
 29984 0080 0402     		.2byte	(.L2200-.L2198)/2
 29985 0082 4402     		.2byte	(.L2199-.L2198)/2
 29986 0084 7902     		.2byte	(.L2197-.L2198)/2
 29987              		.p2align 1
 29988              	.L2469:
5331:src/xeq.c     **** 		char buf[16];
 29989              		.loc 1 5331 22 is_stmt 0 discriminator 1 view .LVU7965
 29990 0086 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
5331:src/xeq.c     **** 		char buf[16];
 29991              		.loc 1 5331 19 discriminator 1 view .LVU7966
 29992 0088 9B07     		lsls	r3, r3, #30
 29993 008a DFD4     		bmi	.L2159
 29994              	.LBB4104:
5332:src/xeq.c     **** 		if (Running)
 29995              		.loc 1 5332 3 is_stmt 1 view .LVU7967
5333:src/xeq.c     **** 			print_step(op);
 29996              		.loc 1 5333 3 view .LVU7968
5333:src/xeq.c     **** 			print_step(op);
 29997              		.loc 1 5333 7 is_stmt 0 view .LVU7969
 29998 008c DFF8ACA2 		ldr	r10, .L2502+68
5333:src/xeq.c     **** 			print_step(op);
 29999              		.loc 1 5333 6 view .LVU7970
 30000 0090 DAF80030 		ldr	r3, [r10]
ARM GAS  /tmp/ccQQPlfu.s 			page 765


 30001 0094 002B     		cmp	r3, #0
 30002 0096 7FD1     		bne	.L2472
5336:src/xeq.c     **** 		DispMsg = TraceBuffer;
 30003              		.loc 1 5336 4 is_stmt 1 view .LVU7971
 30004 0098 39A9     		add	r1, sp, #228
 30005 009a 2846     		mov	r0, r5
 30006 009c FFF7FEFF 		bl	prt
 30007              	.LVL2324:
 30008 00a0 9949     		ldr	r1, .L2502+16
 30009 00a2 0346     		mov	r3, r0
 30010 00a4 2A46     		mov	r2, r5
 30011 00a6 9948     		ldr	r0, .L2502+20
 30012 00a8 FFF7FEFF 		bl	sprintf
 30013              	.LVL2325:
 30014              	.L2161:
5337:src/xeq.c     **** 	}
 30015              		.loc 1 5337 3 view .LVU7972
5337:src/xeq.c     **** 	}
 30016              		.loc 1 5337 11 is_stmt 0 view .LVU7973
 30017 00ac 984B     		ldr	r3, .L2502+24
 30018 00ae 974A     		ldr	r2, .L2502+20
 30019 00b0 1A60     		str	r2, [r3]
 30020 00b2 CBE7     		b	.L2159
 30021              	.L2471:
5337:src/xeq.c     **** 	}
 30022              		.loc 1 5337 11 view .LVU7974
 30023              	.LBE4104:
5354:src/xeq.c     **** 	else {
 30024              		.loc 1 5354 3 is_stmt 1 view .LVU7975
 30025              	.LVL2326:
 30026              	.LBB4105:
 30027              	.LBI4105:
5173:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
 30028              		.loc 1 5173 13 view .LVU7976
 30029              	.LBB4106:
5174:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 30030              		.loc 1 5174 2 view .LVU7977
5175:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 30031              		.loc 1 5175 2 view .LVU7978
5175:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 30032              		.loc 1 5175 27 is_stmt 0 view .LVU7979
 30033 00b4 4FEA152A 		lsr	r10, r5, #8
5177:src/xeq.c     **** 
 30034              		.loc 1 5177 33 view .LVU7980
 30035 00b8 964B     		ldr	r3, .L2502+28
5179:src/xeq.c     **** 
 30036              		.loc 1 5179 12 view .LVU7981
 30037 00ba 9248     		ldr	r0, .L2502+12
 30038              	.LBB4107:
 30039              	.LBB4108:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30040              		.loc 1 1223 5 view .LVU7982
 30041 00bc 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 30042              	.LBE4108:
 30043              	.LBE4107:
5175:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 30044              		.loc 1 5175 27 view .LVU7983
ARM GAS  /tmp/ccQQPlfu.s 			page 766


 30045 00be AAF1200A 		sub	r10, r10, #32
 30046 00c2 5FFA8AFA 		uxtb	r10, r10
 30047              	.LVL2327:
5176:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
 30048              		.loc 1 5176 2 is_stmt 1 view .LVU7984
5177:src/xeq.c     **** 
 30049              		.loc 1 5177 2 view .LVU7985
5177:src/xeq.c     **** 
 30050              		.loc 1 5177 33 is_stmt 0 view .LVU7986
 30051 00c6 03EB0A12 		add	r2, r3, r10, lsl #4
5179:src/xeq.c     **** 
 30052              		.loc 1 5179 14 view .LVU7987
 30053 00ca A0F800A0 		strh	r10, [r0]	@ movhi
5177:src/xeq.c     **** 
 30054              		.loc 1 5177 33 view .LVU7988
 30055 00ce 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 30056 00d0 0592     		str	r2, [sp, #20]
 30057              	.LVL2328:
5179:src/xeq.c     **** 
 30058              		.loc 1 5179 2 is_stmt 1 view .LVU7989
5181:src/xeq.c     **** 
 30059              		.loc 1 5181 2 view .LVU7990
 30060              	.LBB4112:
 30061              	.LBI4107:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 30062              		.loc 1 1220 6 view .LVU7991
 30063              	.LBB4109:
1221:src/xeq.c     **** 
 30064              		.loc 1 1221 2 view .LVU7992
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30065              		.loc 1 1223 2 view .LVU7993
 30066              	.LBE4109:
 30067              	.LBE4112:
5177:src/xeq.c     **** 
 30068              		.loc 1 5177 33 is_stmt 0 view .LVU7994
 30069 00d2 4FEA0A12 		lsl	r2, r10, #4
 30070              	.LBB4113:
 30071              	.LBB4110:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30072              		.loc 1 1223 5 view .LVU7995
 30073 00d6 0029     		cmp	r1, #0
 30074 00d8 40F03281 		bne	.L2473
 30075              	.L2173:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30076              		.loc 1 1223 5 view .LVU7996
 30077              	.LBE4110:
 30078              	.LBE4113:
5183:src/xeq.c     **** 		illegal(op);
 30079              		.loc 1 5183 2 is_stmt 1 view .LVU7997
5183:src/xeq.c     **** 		illegal(op);
 30080              		.loc 1 5183 5 is_stmt 0 view .LVU7998
 30081 00dc BAF18E0F 		cmp	r10, #142
 30082 00e0 6AD8     		bhi	.L2196
5187:src/xeq.c     **** 		set_lift();
 30083              		.loc 1 5187 2 is_stmt 1 view .LVU7999
5187:src/xeq.c     **** 		set_lift();
 30084              		.loc 1 5187 6 is_stmt 0 view .LVU8000
ARM GAS  /tmp/ccQQPlfu.s 			page 767


 30085 00e2 9958     		ldr	r1, [r3, r2]
 30086 00e4 0891     		str	r1, [sp, #32]
 30087 00e6 9818     		adds	r0, r3, r2
5187:src/xeq.c     **** 		set_lift();
 30088              		.loc 1 5187 5 view .LVU8001
 30089 00e8 0029     		cmp	r1, #0
 30090 00ea 44D0     		beq	.L2444
5174:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 30091              		.loc 1 5174 15 view .LVU8002
 30092 00ec 05F07F01 		and	r1, r5, #127
5192:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30093              		.loc 1 5192 2 is_stmt 1 view .LVU8003
5192:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30094              		.loc 1 5192 5 is_stmt 0 view .LVU8004
 30095 00f0 2D06     		lsls	r5, r5, #24
 30096              	.LVL2329:
5192:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30097              		.loc 1 5192 5 view .LVU8005
 30098 00f2 40F1A282 		bpl	.L2177
5193:src/xeq.c     **** 			// Get the argument by reading a register
 30099              		.loc 1 5193 3 is_stmt 1 view .LVU8006
5193:src/xeq.c     **** 			// Get the argument by reading a register
 30100              		.loc 1 5193 19 is_stmt 0 view .LVU8007
 30101 00f6 4579     		ldrb	r5, [r0, #5]	@ zero_extendqisi2
5193:src/xeq.c     **** 			// Get the argument by reading a register
 30102              		.loc 1 5193 6 view .LVU8008
 30103 00f8 E807     		lsls	r0, r5, #31
 30104 00fa 40F12583 		bpl	.L2178
 30105              	.LBB4114:
5195:src/xeq.c     **** 			unsigned long long int regval;
 30106              		.loc 1 5195 4 is_stmt 1 view .LVU8009
5196:src/xeq.c     **** 
 30107              		.loc 1 5196 4 view .LVU8010
5198:src/xeq.c     **** 				// Invalid register specified for indirect access
 30108              		.loc 1 5198 4 view .LVU8011
5198:src/xeq.c     **** 				// Invalid register specified for indirect access
 30109              		.loc 1 5198 14 is_stmt 0 view .LVU8012
 30110 00fe 0A20     		movs	r0, #10
 30111 0100 0992     		str	r2, [sp, #36]
 30112 0102 0691     		str	r1, [sp, #24]
 30113 0104 FFF7FEFF 		bl	get_reg_limit
 30114              	.LVL2330:
5198:src/xeq.c     **** 				// Invalid register specified for indirect access
 30115              		.loc 1 5198 7 view .LVU8013
 30116 0108 0699     		ldr	r1, [sp, #24]
 30117 010a 099A     		ldr	r2, [sp, #36]
 30118 010c 8142     		cmp	r1, r0
 30119 010e 40F27F82 		bls	.L2179
5200:src/xeq.c     **** 				return;
 30120              		.loc 1 5200 5 is_stmt 1 view .LVU8014
 30121              	.LVL2331:
 30122              	.LBB4115:
 30123              	.LBI4115:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30124              		.loc 1 540 5 view .LVU8015
 30125              	.LBB4116:
 541:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccQQPlfu.s 			page 768


 30126              		.loc 1 541 2 view .LVU8016
 541:src/xeq.c     **** 		Error = e;
 30127              		.loc 1 541 12 is_stmt 0 view .LVU8017
 30128 0112 814B     		ldr	r3, .L2502+32
 30129 0114 1A68     		ldr	r2, [r3]
 541:src/xeq.c     **** 		Error = e;
 30130              		.loc 1 541 5 view .LVU8018
 30131 0116 0AB9     		cbnz	r2, .L2181
 30132              	.LVL2332:
 30133              	.LBB4117:
 30134              	.LBI4117:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30135              		.loc 1 540 5 is_stmt 1 view .LVU8019
 30136              	.LBB4118:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 30137              		.loc 1 542 3 view .LVU8020
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 30138              		.loc 1 542 9 is_stmt 0 view .LVU8021
 30139 0118 0822     		movs	r2, #8
 30140 011a 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 30141              		.loc 1 543 3 is_stmt 1 view .LVU8022
 30142              	.LVL2333:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 30143              		.loc 1 543 3 is_stmt 0 view .LVU8023
 30144              	.LBE4118:
 30145              	.LBE4117:
 30146              	.LBE4116:
 30147              	.LBE4115:
5201:src/xeq.c     **** 			}
 30148              		.loc 1 5201 5 is_stmt 1 view .LVU8024
5201:src/xeq.c     **** 			}
 30149              		.loc 1 5201 5 is_stmt 0 view .LVU8025
 30150              	.LBE4114:
 30151              	.LBE4106:
 30152              	.LBE4105:
5365:src/xeq.c     **** 		}
 30153              		.loc 1 5365 12 is_stmt 1 view .LVU8026
5375:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30154              		.loc 1 5375 2 view .LVU8027
 30155              	.L2181:
5375:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30156              		.loc 1 5375 2 is_stmt 0 view .LVU8028
 30157 011c DFF81CA2 		ldr	r10, .L2502+68
 30158 0120 1046     		mov	r0, r2
 30159 0122 52E0     		b	.L2306
 30160              	.LVL2334:
 30161              	.L2470:
5352:src/xeq.c     **** 	else if (isRARG(op))
 30162              		.loc 1 5352 3 is_stmt 1 view .LVU8029
 30163              	.LBB4147:
 30164              	.LBI4147:
5269:src/xeq.c     **** 	const int cmd = opDBL(op);
 30165              		.loc 1 5269 13 view .LVU8030
 30166              	.LBB4148:
5270:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 30167              		.loc 1 5270 2 view .LVU8031
ARM GAS  /tmp/ccQQPlfu.s 			page 769


5271:src/xeq.c     **** 
 30168              		.loc 1 5271 12 is_stmt 0 view .LVU8032
 30169 0124 774A     		ldr	r2, .L2502+12
 30170              	.LBB4149:
 30171              	.LBB4150:
 30172              	.LBB4151:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30173              		.loc 1 1223 5 view .LVU8033
 30174 0126 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30175              	.LBE4151:
 30176              	.LBE4150:
 30177              	.LBE4149:
5270:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 30178              		.loc 1 5270 12 view .LVU8034
 30179 0128 C5F3032A 		ubfx	r10, r5, #8, #4
 30180              	.LVL2335:
5271:src/xeq.c     **** 
 30181              		.loc 1 5271 2 is_stmt 1 view .LVU8035
5271:src/xeq.c     **** 
 30182              		.loc 1 5271 14 is_stmt 0 view .LVU8036
 30183 012c A2F800A0 		strh	r10, [r2]	@ movhi
5273:src/xeq.c     **** 
 30184              		.loc 1 5273 2 is_stmt 1 view .LVU8037
 30185              	.LBB4160:
 30186              	.LBI4149:
1326:src/xeq.c     **** 	process_cmdline();
 30187              		.loc 1 1326 6 view .LVU8038
 30188              	.LBE4160:
 30189              	.LBE4148:
 30190              	.LBE4147:
1327:src/xeq.c     **** 	set_lift();
 30191              		.loc 1 1327 2 view .LVU8039
 30192              	.LBB4184:
 30193              	.LBB4179:
 30194              	.LBB4161:
 30195              	.LBB4154:
 30196              	.LBI4150:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 30197              		.loc 1 1220 6 view .LVU8040
 30198              	.LBB4152:
1221:src/xeq.c     **** 
 30199              		.loc 1 1221 2 view .LVU8041
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30200              		.loc 1 1223 2 view .LVU8042
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30201              		.loc 1 1223 5 is_stmt 0 view .LVU8043
 30202 0130 002B     		cmp	r3, #0
 30203 0132 40F05482 		bne	.L2474
 30204              	.L2163:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30205              		.loc 1 1223 5 view .LVU8044
 30206              	.LBE4152:
 30207              	.LBE4154:
 30208              	.LBE4161:
 30209              	.LBE4179:
 30210              	.LBE4184:
1328:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 770


 30211              		.loc 1 1328 2 is_stmt 1 view .LVU8045
 30212              	.LBB4185:
 30213              	.LBB4180:
 30214              	.LBB4162:
 30215              	.LBB4155:
 30216              	.LBI4155:
 761:src/xeq.c     ****     State2.state_lift = 1;
 30217              		.loc 1 761 6 view .LVU8046
 30218              	.LBB4156:
 762:src/xeq.c     **** }
 30219              		.loc 1 762 5 view .LVU8047
 762:src/xeq.c     **** }
 30220              		.loc 1 762 23 is_stmt 0 view .LVU8048
 30221 0136 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30222              	.LBE4156:
 30223              	.LBE4155:
 30224              	.LBE4162:
5275:src/xeq.c     **** 		illegal(op);
 30225              		.loc 1 5275 5 view .LVU8049
 30226 0138 BAF10A0F 		cmp	r10, #10
 30227              	.LBB4163:
 30228              	.LBB4158:
 30229              	.LBB4157:
 762:src/xeq.c     **** }
 30230              		.loc 1 762 23 view .LVU8050
 30231 013c 43F04003 		orr	r3, r3, #64
 30232 0140 E375     		strb	r3, [r4, #23]
 30233              	.LBE4157:
 30234              	.LBE4158:
 30235              	.LBE4163:
5275:src/xeq.c     **** 		illegal(op);
 30236              		.loc 1 5275 2 is_stmt 1 view .LVU8051
5275:src/xeq.c     **** 		illegal(op);
 30237              		.loc 1 5275 5 is_stmt 0 view .LVU8052
 30238 0142 00F34482 		bgt	.L2475
5279:src/xeq.c     **** 		return;
 30239              		.loc 1 5279 2 is_stmt 1 view .LVU8053
5279:src/xeq.c     **** 		return;
 30240              		.loc 1 5279 6 is_stmt 0 view .LVU8054
 30241 0146 754A     		ldr	r2, .L2502+36
 30242 0148 4FEA0A13 		lsl	r3, r10, #4
 30243 014c D258     		ldr	r2, [r2, r3]
5279:src/xeq.c     **** 		return;
 30244              		.loc 1 5279 5 view .LVU8055
 30245 014e 002A     		cmp	r2, #0
 30246 0150 00F09C82 		beq	.L2167
 30247              	.LBB4164:
5282:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 30248              		.loc 1 5282 3 is_stmt 1 view .LVU8056
 30249              	.LVL2336:
5283:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 30250              		.loc 1 5283 3 view .LVU8057
 30251              	.LBB4165:
 30252              	.LBI4165:
4487:src/xeq.c     **** {
 30253              		.loc 1 4487 24 view .LVU8058
 30254              	.LBB4166:
ARM GAS  /tmp/ccQQPlfu.s 			page 771


4489:src/xeq.c     **** 	if (xp < xrom)
 30255              		.loc 1 4489 2 view .LVU8059
4490:src/xeq.c     **** 		return NULL;
 30256              		.loc 1 4490 5 is_stmt 0 view .LVU8060
 30257 0154 724B     		ldr	r3, .L2502+40
4489:src/xeq.c     **** 	if (xp < xrom)
 30258              		.loc 1 4489 59 view .LVU8061
 30259 0156 22F00101 		bic	r1, r2, #1
 30260              	.LVL2337:
4490:src/xeq.c     **** 		return NULL;
 30261              		.loc 1 4490 2 is_stmt 1 view .LVU8062
4490:src/xeq.c     **** 		return NULL;
 30262              		.loc 1 4490 5 is_stmt 0 view .LVU8063
 30263 015a 9942     		cmp	r1, r3
 30264 015c 08D3     		bcc	.L2168
4494:src/xeq.c     **** 		return NULL;
 30265              		.loc 1 4494 2 is_stmt 1 view .LVU8064
4494:src/xeq.c     **** 		return NULL;
 30266              		.loc 1 4494 17 is_stmt 0 view .LVU8065
 30267 015e 7148     		ldr	r0, .L2502+44
 30268 0160 0088     		ldrh	r0, [r0]
 30269 0162 03EB4003 		add	r3, r3, r0, lsl #1
4494:src/xeq.c     **** 		return NULL;
 30270              		.loc 1 4494 5 view .LVU8066
 30271 0166 9942     		cmp	r1, r3
 30272 0168 02D2     		bcs	.L2168
 30273              	.LVL2338:
4494:src/xeq.c     **** 		return NULL;
 30274              		.loc 1 4494 5 view .LVU8067
 30275              	.LBE4166:
 30276              	.LBE4165:
5283:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 30277              		.loc 1 5283 6 view .LVU8068
 30278 016a 0029     		cmp	r1, #0
 30279 016c 40F04F83 		bne	.L2476
 30280              	.L2168:
5293:src/xeq.c     **** 			set_lift();
 30281              		.loc 1 5293 4 is_stmt 1 view .LVU8069
 30282 0170 5146     		mov	r1, r10
 30283 0172 2846     		mov	r0, r5
 30284 0174 9047     		blx	r2
 30285              	.LVL2339:
5294:src/xeq.c     **** 		}
 30286              		.loc 1 5294 4 view .LVU8070
 30287              	.LBB4167:
 30288              	.LBI4167:
 761:src/xeq.c     ****     State2.state_lift = 1;
 30289              		.loc 1 761 6 view .LVU8071
 30290              	.LBB4168:
 762:src/xeq.c     **** }
 30291              		.loc 1 762 5 view .LVU8072
 30292              	.L2444:
 762:src/xeq.c     **** }
 30293              		.loc 1 762 5 is_stmt 0 view .LVU8073
 30294              	.LBE4168:
 30295              	.LBE4167:
 30296              	.LBE4164:
ARM GAS  /tmp/ccQQPlfu.s 			page 772


 30297              	.LBE4180:
 30298              	.LBE4185:
 30299              	.LBB4186:
 30300              	.LBB4187:
3992:src/xeq.c     **** 		} else {
 30301              		.loc 1 3992 4 is_stmt 1 view .LVU8074
 30302              	.LBB4188:
 30303              	.LBI4188:
 761:src/xeq.c     ****     State2.state_lift = 1;
 30304              		.loc 1 761 6 view .LVU8075
 30305              	.LBB4189:
 762:src/xeq.c     **** }
 30306              		.loc 1 762 5 view .LVU8076
 762:src/xeq.c     **** }
 30307              		.loc 1 762 23 is_stmt 0 view .LVU8077
 30308 0176 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 30309 0178 674B     		ldr	r3, .L2502+32
 30310 017a 42F04002 		orr	r2, r2, #64
 30311 017e E275     		strb	r2, [r4, #23]
 30312 0180 1A68     		ldr	r2, [r3]
 30313              	.L2170:
 30314              	.LBE4189:
 30315              	.LBE4188:
 30316              	.LBE4187:
 30317              	.LBE4186:
5365:src/xeq.c     **** 		}
 30318              		.loc 1 5365 12 is_stmt 1 discriminator 1 view .LVU8078
5375:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30319              		.loc 1 5375 2 discriminator 1 view .LVU8079
5375:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30320              		.loc 1 5375 5 is_stmt 0 discriminator 1 view .LVU8080
 30321 0182 002A     		cmp	r2, #0
 30322 0184 CAD1     		bne	.L2181
 30323              	.LVL2340:
 30324              	.L2292:
5444:src/xeq.c     **** #ifdef INFRARED
 30325              		.loc 1 5444 2 is_stmt 1 view .LVU8081
 30326              	.LBB4260:
 30327              	.LBI4260:
4441:src/xeq.c     **** 	// extern int IntMaxWindow;
 30328              		.loc 1 4441 6 view .LVU8082
 30329              	.LBB4261:
4444:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30330              		.loc 1 4444 2 view .LVU8083
4444:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30331              		.loc 1 4444 16 is_stmt 0 view .LVU8084
 30332 0186 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4445:src/xeq.c     **** }
 30333              		.loc 1 4445 15 view .LVU8085
 30334 0188 0022     		movs	r2, #0
4444:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30335              		.loc 1 4444 16 view .LVU8086
 30336 018a 6FF3C503 		bfc	r3, #3, #3
 30337 018e 2375     		strb	r3, [r4, #20]
4445:src/xeq.c     **** }
 30338              		.loc 1 4445 2 is_stmt 1 view .LVU8087
4445:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 773


 30339              		.loc 1 4445 15 is_stmt 0 view .LVU8088
 30340 0190 6274     		strb	r2, [r4, #17]
 30341              	.LBE4261:
 30342              	.LBE4260:
5449:src/xeq.c     **** 
 30343              		.loc 1 5449 1 view .LVU8089
 30344 0192 6BB0     		add	sp, sp, #428
 30345              		.cfi_remember_state
 30346              		.cfi_def_cfa_offset 36
 30347              		@ sp needed
 30348 0194 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 30349              	.LVL2341:
 30350              	.L2472:
 30351              		.cfi_restore_state
 30352              	.LBB4262:
5334:src/xeq.c     **** 		else
 30353              		.loc 1 5334 4 is_stmt 1 view .LVU8090
 30354 0198 2846     		mov	r0, r5
 30355 019a FFF7FEFF 		bl	print_step
 30356              	.LVL2342:
 30357 019e 85E7     		b	.L2161
 30358              	.L2201:
5334:src/xeq.c     **** 		else
 30359              		.loc 1 5334 4 is_stmt 0 view .LVU8091
 30360              	.LBE4262:
5361:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
 30361              		.loc 1 5361 18 is_stmt 1 view .LVU8092
 30362              	.LVL2343:
 30363              	.LBB4263:
 30364              	.LBI4263:
4728:src/xeq.c     **** 
 30365              		.loc 1 4728 13 view .LVU8093
 30366              	.LBB4264:
4730:src/xeq.c     **** 	process_cmdline_set_lift();
 30367              		.loc 1 4730 2 view .LVU8094
4731:src/xeq.c     **** 
 30368              		.loc 1 4731 2 view .LVU8095
 30369              	.LBB4265:
 30370              	.LBI4265:
1326:src/xeq.c     **** 	process_cmdline();
 30371              		.loc 1 1326 6 view .LVU8096
 30372              	.LBE4265:
 30373              	.LBE4264:
 30374              	.LBE4263:
1327:src/xeq.c     **** 	set_lift();
 30375              		.loc 1 1327 2 view .LVU8097
 30376              	.LBB4313:
 30377              	.LBB4306:
 30378              	.LBB4274:
 30379              	.LBB4266:
 30380              	.LBI4266:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 30381              		.loc 1 1220 6 view .LVU8098
 30382              	.LBB4267:
1221:src/xeq.c     **** 
 30383              		.loc 1 1221 2 view .LVU8099
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
ARM GAS  /tmp/ccQQPlfu.s 			page 774


 30384              		.loc 1 1223 2 view .LVU8100
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30385              		.loc 1 1223 5 is_stmt 0 view .LVU8101
 30386 01a0 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30387 01a2 0BB1     		cbz	r3, .L2266
 30388 01a4 FFF7FEFF 		bl	process_cmdline.part.0
 30389              	.LVL2344:
 30390              	.L2266:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30391              		.loc 1 1223 5 view .LVU8102
 30392              	.LBE4267:
 30393              	.LBE4266:
 30394              	.LBE4274:
 30395              	.LBE4306:
 30396              	.LBE4313:
1328:src/xeq.c     **** }
 30397              		.loc 1 1328 2 is_stmt 1 view .LVU8103
 30398              	.LBB4314:
 30399              	.LBB4307:
 30400              	.LBB4275:
 30401              	.LBB4268:
 30402              	.LBI4268:
 761:src/xeq.c     ****     State2.state_lift = 1;
 30403              		.loc 1 761 6 view .LVU8104
 30404              	.LBB4269:
 762:src/xeq.c     **** }
 30405              		.loc 1 762 5 view .LVU8105
 762:src/xeq.c     **** }
 30406              		.loc 1 762 23 is_stmt 0 view .LVU8106
 30407 01a8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30408              	.LBE4269:
 30409              	.LBE4268:
 30410              	.LBE4275:
4733:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30411              		.loc 1 4733 4 view .LVU8107
 30412 01aa EDB2     		uxtb	r5, r5
 30413              	.LVL2345:
 30414              	.LBB4276:
 30415              	.LBB4272:
 30416              	.LBB4270:
 762:src/xeq.c     **** }
 30417              		.loc 1 762 23 view .LVU8108
 30418 01ac 43F04003 		orr	r3, r3, #64
 30419              	.LBE4270:
 30420              	.LBE4272:
 30421              	.LBE4276:
4734:src/xeq.c     **** 		if (is_intmode()) {
 30422              		.loc 1 4734 5 view .LVU8109
 30423 01b0 342D     		cmp	r5, #52
 30424              	.LBB4277:
 30425              	.LBB4273:
 30426              	.LBB4271:
 762:src/xeq.c     **** }
 30427              		.loc 1 762 23 view .LVU8110
 30428 01b2 E375     		strb	r3, [r4, #23]
 30429              	.LBE4271:
 30430              	.LBE4273:
ARM GAS  /tmp/ccQQPlfu.s 			page 775


 30431              	.LBE4277:
4733:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30432              		.loc 1 4733 2 is_stmt 1 view .LVU8111
 30433              	.LVL2346:
4734:src/xeq.c     **** 		if (is_intmode()) {
 30434              		.loc 1 4734 2 view .LVU8112
4734:src/xeq.c     **** 		if (is_intmode()) {
 30435              		.loc 1 4734 5 is_stmt 0 view .LVU8113
 30436 01b4 40F2CB82 		bls	.L2477
 30437              	.LVL2347:
 30438              	.L2196:
4734:src/xeq.c     **** 		if (is_intmode()) {
 30439              		.loc 1 4734 5 view .LVU8114
 30440              	.LBE4307:
 30441              	.LBE4314:
5365:src/xeq.c     **** 		}
 30442              		.loc 1 5365 12 is_stmt 1 view .LVU8115
5365:src/xeq.c     **** 		}
 30443              		.loc 1 5365 12 view .LVU8116
 30444              	.LBB4315:
 30445              	.LBI4315:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30446              		.loc 1 540 5 view .LVU8117
 30447              	.LBB4316:
 541:src/xeq.c     **** 		Error = e;
 30448              		.loc 1 541 2 view .LVU8118
 541:src/xeq.c     **** 		Error = e;
 30449              		.loc 1 541 12 is_stmt 0 view .LVU8119
 30450 01b8 574B     		ldr	r3, .L2502+32
 30451 01ba 1868     		ldr	r0, [r3]
 541:src/xeq.c     **** 		Error = e;
 30452              		.loc 1 541 5 view .LVU8120
 30453 01bc 0028     		cmp	r0, #0
 30454 01be 40F04F82 		bne	.L2439
 30455 01c2 DFF878A1 		ldr	r10, .L2502+68
 30456              	.LVL2348:
 30457              	.L2175:
 541:src/xeq.c     **** 		Error = e;
 30458              		.loc 1 541 5 view .LVU8121
 30459              	.LBE4316:
 30460              	.LBE4315:
 30461              	.LBB4317:
 30462              	.LBB4181:
 30463              	.LBB4171:
 30464              	.LBB4172:
 30465              	.LBB4173:
 30466              	.LBI4173:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30467              		.loc 1 540 5 is_stmt 1 view .LVU8122
 30468              	.LBB4174:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 30469              		.loc 1 542 3 view .LVU8123
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 30470              		.loc 1 542 9 is_stmt 0 view .LVU8124
 30471 01c6 0320     		movs	r0, #3
 30472 01c8 1860     		str	r0, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/ccQQPlfu.s 			page 776


 30473              		.loc 1 543 3 is_stmt 1 view .LVU8125
 30474              	.LVL2349:
 30475              	.L2306:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 30476              		.loc 1 543 3 is_stmt 0 view .LVU8126
 30477              	.LBE4174:
 30478              	.LBE4173:
 30479              	.LBE4172:
 30480              	.LBE4171:
 30481              	.LBE4181:
 30482              	.LBE4317:
5377:src/xeq.c     **** 		// Repair stack and state
 30483              		.loc 1 5377 3 is_stmt 1 view .LVU8127
 30484 01ca 0593     		str	r3, [sp, #20]
 30485 01cc FFF7FEFF 		bl	error_message
 30486              	.LVL2350:
5380:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
 30487              		.loc 1 5380 3 view .LVU8128
 30488 01d0 42A9     		add	r1, sp, #264
 30489 01d2 A022     		movs	r2, #160
 30490 01d4 D8F80000 		ldr	r0, [r8]
 30491 01d8 FFF7FEFF 		bl	xcopy
 30492              	.LVL2351:
5381:src/xeq.c     **** 		UState = old;
 30493              		.loc 1 5381 3 view .LVU8129
5382:src/xeq.c     **** 		State2.state_lift = lift;
 30494              		.loc 1 5382 10 is_stmt 0 view .LVU8130
 30495 01dc 96E80300 		ldm	r6, {r0, r1}
5381:src/xeq.c     **** 		UState = old;
 30496              		.loc 1 5381 3 view .LVU8131
 30497 01e0 3A68     		ldr	r2, [r7]
5381:src/xeq.c     **** 		UState = old;
 30498              		.loc 1 5381 28 view .LVU8132
 30499 01e2 039B     		ldr	r3, [sp, #12]
 30500 01e4 A2F8FC37 		strh	r3, [r2, #2044]	@ movhi
5382:src/xeq.c     **** 		State2.state_lift = lift;
 30501              		.loc 1 5382 3 is_stmt 1 view .LVU8133
5382:src/xeq.c     **** 		State2.state_lift = lift;
 30502              		.loc 1 5382 10 is_stmt 0 view .LVU8134
 30503 01e8 02F2E475 		addw	r5, r2, #2020
 30504 01ec 85E80300 		stm	r5, {r0, r1}
5383:src/xeq.c     **** 		raw_set_pc(old_pc);
 30505              		.loc 1 5383 3 is_stmt 1 view .LVU8135
5383:src/xeq.c     **** 		raw_set_pc(old_pc);
 30506              		.loc 1 5383 21 is_stmt 0 view .LVU8136
 30507 01f0 049B     		ldr	r3, [sp, #16]
 30508 01f2 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 30509 01f4 63F38611 		bfi	r1, r3, #6, #1
 30510 01f8 E175     		strb	r1, [r4, #23]
5384:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
 30511              		.loc 1 5384 3 is_stmt 1 view .LVU8137
 30512              	.LVL2352:
 30513              	.LBB4318:
 30514              	.LBI4318:
 282:src/xeq.c     **** 	State.pc = pc;
 30515              		.loc 1 282 13 view .LVU8138
 30516              	.LBB4319:
ARM GAS  /tmp/ccQQPlfu.s 			page 777


 283:src/xeq.c     **** 	update_program_bounds(0);
 30517              		.loc 1 283 2 view .LVU8139
 284:src/xeq.c     **** }
 30518              		.loc 1 284 2 is_stmt 0 view .LVU8140
 30519 01fa 0020     		movs	r0, #0
 283:src/xeq.c     **** 	update_program_bounds(0);
 30520              		.loc 1 283 11 view .LVU8141
 30521 01fc A2F8E0B7 		strh	fp, [r2, #2016]	@ movhi
 284:src/xeq.c     **** }
 30522              		.loc 1 284 2 is_stmt 1 view .LVU8142
 30523 0200 FFF7FEFF 		bl	update_program_bounds
 30524              	.LVL2353:
 284:src/xeq.c     **** }
 30525              		.loc 1 284 2 is_stmt 0 view .LVU8143
 30526              	.LBE4319:
 30527              	.LBE4318:
5385:src/xeq.c     **** 		process_cmdline_set_lift();
 30528              		.loc 1 5385 3 is_stmt 1 view .LVU8144
 30529              	.LBB4320:
 30530              	.LBB4321:
 30531              	.LBB4322:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30532              		.loc 1 1223 5 is_stmt 0 view .LVU8145
 30533 0204 19F0FF0F 		tst	r9, #255
 30534 0208 059B     		ldr	r3, [sp, #20]
 30535              	.LBE4322:
 30536              	.LBE4321:
 30537              	.LBE4320:
5385:src/xeq.c     **** 		process_cmdline_set_lift();
 30538              		.loc 1 5385 26 view .LVU8146
 30539 020a C4F81C90 		str	r9, [r4, #28]
5386:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
 30540              		.loc 1 5386 3 is_stmt 1 view .LVU8147
 30541              	.LBB4333:
 30542              	.LBI4320:
1326:src/xeq.c     **** 	process_cmdline();
 30543              		.loc 1 1326 6 view .LVU8148
 30544              	.LBE4333:
1327:src/xeq.c     **** 	set_lift();
 30545              		.loc 1 1327 2 view .LVU8149
 30546              	.LBB4334:
 30547              	.LBB4325:
 30548              	.LBI4321:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 30549              		.loc 1 1220 6 view .LVU8150
 30550              	.LBB4323:
1221:src/xeq.c     **** 
 30551              		.loc 1 1221 2 view .LVU8151
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30552              		.loc 1 1223 2 view .LVU8152
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30553              		.loc 1 1223 5 is_stmt 0 view .LVU8153
 30554 020e 40F04082 		bne	.L2478
 30555              	.LVL2354:
 30556              	.L2293:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30557              		.loc 1 1223 5 view .LVU8154
ARM GAS  /tmp/ccQQPlfu.s 			page 778


 30558              	.LBE4323:
 30559              	.LBE4325:
 30560              	.LBE4334:
1328:src/xeq.c     **** }
 30561              		.loc 1 1328 2 is_stmt 1 view .LVU8155
 30562              	.LBB4335:
 30563              	.LBB4326:
 30564              	.LBI4326:
 761:src/xeq.c     ****     State2.state_lift = 1;
 30565              		.loc 1 761 6 view .LVU8156
 30566              	.LBB4327:
 762:src/xeq.c     **** }
 30567              		.loc 1 762 5 view .LVU8157
 30568              	.LBE4327:
 30569              	.LBE4326:
 30570              	.LBE4335:
5390:src/xeq.c     **** #ifndef REALBUILD
 30571              		.loc 1 5390 15 is_stmt 0 view .LVU8158
 30572 0212 4549     		ldr	r1, .L2502+48
 30573              	.LBB4336:
 30574              	.LBB4330:
 30575              	.LBB4328:
 762:src/xeq.c     **** }
 30576              		.loc 1 762 23 view .LVU8159
 30577 0214 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 30578              	.LBE4328:
 30579              	.LBE4330:
 30580              	.LBE4336:
5390:src/xeq.c     **** #ifndef REALBUILD
 30581              		.loc 1 5390 15 view .LVU8160
 30582 0216 0D68     		ldr	r5, [r1]
 30583 0218 DAF80010 		ldr	r1, [r10]
 30584              	.LBB4337:
 30585              	.LBB4331:
 30586              	.LBB4329:
 762:src/xeq.c     **** }
 30587              		.loc 1 762 23 view .LVU8161
 30588 021c 42F04002 		orr	r2, r2, #64
 30589 0220 E275     		strb	r2, [r4, #23]
 30590              	.LBE4329:
 30591              	.LBE4331:
 30592              	.LBE4337:
5389:src/xeq.c     **** 		if (Running || XromRunning) {
 30593              		.loc 1 5389 3 is_stmt 1 view .LVU8162
5389:src/xeq.c     **** 		if (Running || XromRunning) {
 30594              		.loc 1 5389 9 is_stmt 0 view .LVU8163
 30595 0222 0020     		movs	r0, #0
5390:src/xeq.c     **** #ifndef REALBUILD
 30596              		.loc 1 5390 15 view .LVU8164
 30597 0224 51EA0502 		orrs	r2, r1, r5
5389:src/xeq.c     **** 		if (Running || XromRunning) {
 30598              		.loc 1 5389 9 view .LVU8165
 30599 0228 1860     		str	r0, [r3]
5390:src/xeq.c     **** #ifndef REALBUILD
 30600              		.loc 1 5390 3 is_stmt 1 view .LVU8166
5390:src/xeq.c     **** #ifndef REALBUILD
 30601              		.loc 1 5390 15 is_stmt 0 view .LVU8167
ARM GAS  /tmp/ccQQPlfu.s 			page 779


 30602 022a ACD0     		beq	.L2292
5392:src/xeq.c     **** 				// Special handling for debug environment
 30603              		.loc 1 5392 4 is_stmt 1 view .LVU8168
5392:src/xeq.c     **** 				// Special handling for debug environment
 30604              		.loc 1 5392 7 is_stmt 0 view .LVU8169
 30605 022c 94F91720 		ldrsb	r2, [r4, #23]
 30606 0230 8242     		cmp	r2, r0
 30607 0232 C0F23382 		blt	.L2479
 30608              	.LBB4338:
5414:src/xeq.c     **** 				if (XromFlags.xIN) {
 30609              		.loc 1 5414 5 is_stmt 1 view .LVU8170
5415:src/xeq.c     **** 					// Restore state to before xIN
 30610              		.loc 1 5415 9 is_stmt 0 view .LVU8171
 30611 0236 3D4E     		ldr	r6, .L2502+52
5414:src/xeq.c     **** 				if (XromFlags.xIN) {
 30612              		.loc 1 5414 29 view .LVU8172
 30613 0238 3968     		ldr	r1, [r7]
5415:src/xeq.c     **** 					// Restore state to before xIN
 30614              		.loc 1 5415 8 view .LVU8173
 30615 023a 96F90120 		ldrsb	r2, [r6, #1]
5414:src/xeq.c     **** 				if (XromFlags.xIN) {
 30616              		.loc 1 5414 24 view .LVU8174
 30617 023e B1F8E037 		ldrh	r3, [r1, #2016]
 30618              	.LVL2355:
5415:src/xeq.c     **** 					// Restore state to before xIN
 30619              		.loc 1 5415 5 is_stmt 1 view .LVU8175
5415:src/xeq.c     **** 					// Restore state to before xIN
 30620              		.loc 1 5415 8 is_stmt 0 view .LVU8176
 30621 0242 002A     		cmp	r2, #0
 30622 0244 22DA     		bge	.L2301
5417:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30623              		.loc 1 5417 6 is_stmt 1 view .LVU8177
5417:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30624              		.loc 1 5417 20 is_stmt 0 view .LVU8178
 30625 0246 96F801C0 		ldrb	ip, [r6, #1]	@ zero_extendqisi2
5419:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30626              		.loc 1 5419 18 view .LVU8179
 30627 024a D1F8E857 		ldr	r5, [r1, #2024]
5422:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30628              		.loc 1 5422 13 view .LVU8180
 30629 024e D6F808E0 		ldr	lr, [r6, #8]
5417:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30630              		.loc 1 5417 20 view .LVU8181
 30631 0252 60F3C71C 		bfi	ip, r0, #7, #1
5419:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30632              		.loc 1 5419 18 view .LVU8182
 30633 0256 CCF3C000 		ubfx	r0, ip, #3, #1
 30634 025a 0CF00102 		and	r2, ip, #1
 30635 025e 42EA8032 		orr	r2, r2, r0, lsl #14
 30636 0262 CCF38000 		ubfx	r0, ip, #2, #1
 30637 0266 42EAC042 		orr	r2, r2, r0, lsl #19
 30638 026a 3148     		ldr	r0, .L2502+56
5417:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30639              		.loc 1 5417 20 view .LVU8183
 30640 026c 86F801C0 		strb	ip, [r6, #1]
5418:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
 30641              		.loc 1 5418 6 is_stmt 1 view .LVU8184
ARM GAS  /tmp/ccQQPlfu.s 			page 780


5419:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30642              		.loc 1 5419 6 view .LVU8185
5420:src/xeq.c     **** 					// Restore the global return stack
 30643              		.loc 1 5420 6 view .LVU8186
5419:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30644              		.loc 1 5419 18 is_stmt 0 view .LVU8187
 30645 0270 25F40425 		bic	r5, r5, #540672
 30646 0274 0240     		ands	r2, r2, r0
 30647 0276 25F00105 		bic	r5, r5, #1
5422:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30648              		.loc 1 5422 13 view .LVU8188
 30649 027a 2E48     		ldr	r0, .L2502+60
5423:src/xeq.c     **** 				}
 30650              		.loc 1 5423 16 view .LVU8189
 30651 027c B689     		ldrh	r6, [r6, #12]
5422:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30652              		.loc 1 5422 13 view .LVU8190
 30653 027e C0F800E0 		str	lr, [r0]
5419:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30654              		.loc 1 5419 18 view .LVU8191
 30655 0282 2A43     		orrs	r2, r2, r5
 30656 0284 C1F8E827 		str	r2, [r1, #2024]
5422:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30657              		.loc 1 5422 6 is_stmt 1 view .LVU8192
5423:src/xeq.c     **** 				}
 30658              		.loc 1 5423 6 view .LVU8193
5423:src/xeq.c     **** 				}
 30659              		.loc 1 5423 16 is_stmt 0 view .LVU8194
 30660 0288 A1F8E267 		strh	r6, [r1, #2018]	@ movhi
 30661              	.L2301:
5425:src/xeq.c     **** 					// Leave XROM
 30662              		.loc 1 5425 11 is_stmt 1 view .LVU8195
 30663 028c 9A0B     		lsrs	r2, r3, #14
 30664 028e 032A     		cmp	r2, #3
 30665 0290 1AD1     		bne	.L2302
5429:src/xeq.c     **** 					}
 30666              		.loc 1 5429 10 is_stmt 0 view .LVU8196
 30667 0292 284E     		ldr	r6, .L2502+60
5429:src/xeq.c     **** 					}
 30668              		.loc 1 5429 18 view .LVU8197
 30669 0294 6FF00045 		mvn	r5, #-2147483648
 30670 0298 04E0     		b	.L2305
 30671              	.L2303:
5432:src/xeq.c     **** 				}
 30672              		.loc 1 5432 7 is_stmt 1 view .LVU8198
 30673 029a 0133     		adds	r3, r3, #1
 30674              	.LVL2356:
5432:src/xeq.c     **** 				}
 30675              		.loc 1 5432 7 is_stmt 0 view .LVU8199
 30676 029c 9BB2     		uxth	r3, r3
 30677              	.LVL2357:
5425:src/xeq.c     **** 					// Leave XROM
 30678              		.loc 1 5425 11 is_stmt 1 view .LVU8200
 30679 029e 9A0B     		lsrs	r2, r3, #14
 30680 02a0 032A     		cmp	r2, #3
 30681 02a2 11D1     		bne	.L2302
 30682              	.L2305:
ARM GAS  /tmp/ccQQPlfu.s 			page 781


5427:src/xeq.c     **** 						retstk_up();
 30683              		.loc 1 5427 6 view .LVU8201
5427:src/xeq.c     **** 						retstk_up();
 30684              		.loc 1 5427 9 is_stmt 0 view .LVU8202
 30685 02a4 B1F9E227 		ldrsh	r2, [r1, #2018]
 30686 02a8 002A     		cmp	r2, #0
 30687 02aa F6D0     		beq	.L2303
5428:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
 30688              		.loc 1 5428 7 is_stmt 1 view .LVU8203
 30689 02ac FFF7FEFF 		bl	retstk_up
 30690              	.LVL2358:
5429:src/xeq.c     **** 					}
 30691              		.loc 1 5429 7 view .LVU8204
5429:src/xeq.c     **** 					}
 30692              		.loc 1 5429 19 is_stmt 0 view .LVU8205
 30693 02b0 3968     		ldr	r1, [r7]
5429:src/xeq.c     **** 					}
 30694              		.loc 1 5429 10 view .LVU8206
 30695 02b2 3368     		ldr	r3, [r6]
5429:src/xeq.c     **** 					}
 30696              		.loc 1 5429 19 view .LVU8207
 30697 02b4 B1F9E227 		ldrsh	r2, [r1, #2018]
5429:src/xeq.c     **** 					}
 30698              		.loc 1 5429 18 view .LVU8208
 30699 02b8 5019     		adds	r0, r2, r5
5429:src/xeq.c     **** 					}
 30700              		.loc 1 5429 10 view .LVU8209
 30701 02ba 33F81030 		ldrh	r3, [r3, r0, lsl #1]
 30702              	.LVL2359:
5431:src/xeq.c     **** 						++pc; // compensate for decpc below
 30703              		.loc 1 5431 6 is_stmt 1 view .LVU8210
5431:src/xeq.c     **** 						++pc; // compensate for decpc below
 30704              		.loc 1 5431 9 is_stmt 0 view .LVU8211
 30705 02be 002A     		cmp	r2, #0
 30706 02c0 EBD0     		beq	.L2303
5425:src/xeq.c     **** 					// Leave XROM
 30707              		.loc 1 5425 11 is_stmt 1 view .LVU8212
 30708 02c2 9A0B     		lsrs	r2, r3, #14
 30709 02c4 032A     		cmp	r2, #3
 30710 02c6 EDD0     		beq	.L2305
 30711              	.L2302:
5434:src/xeq.c     **** #ifndef REALBUILD
 30712              		.loc 1 5434 5 view .LVU8213
 30713              	.LVL2360:
 30714              	.LBB4339:
 30715              	.LBI4339:
 282:src/xeq.c     **** 	State.pc = pc;
 30716              		.loc 1 282 13 view .LVU8214
 30717              	.LBB4340:
 283:src/xeq.c     **** 	update_program_bounds(0);
 30718              		.loc 1 283 2 view .LVU8215
 283:src/xeq.c     **** 	update_program_bounds(0);
 30719              		.loc 1 283 11 is_stmt 0 view .LVU8216
 30720 02c8 A1F8E037 		strh	r3, [r1, #2016]	@ movhi
 284:src/xeq.c     **** }
 30721              		.loc 1 284 2 is_stmt 1 view .LVU8217
 30722 02cc 0020     		movs	r0, #0
ARM GAS  /tmp/ccQQPlfu.s 			page 782


 30723 02ce FFF7FEFF 		bl	update_program_bounds
 30724              	.LVL2361:
 30725              	.L2296:
 284:src/xeq.c     **** }
 30726              		.loc 1 284 2 is_stmt 0 view .LVU8218
 30727              	.LBE4340:
 30728              	.LBE4339:
 30729              	.LBE4338:
5438:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
 30730              		.loc 1 5438 4 is_stmt 1 view .LVU8219
 30731 02d2 FFF7FEFF 		bl	decpc
 30732              	.LVL2362:
5439:src/xeq.c     **** 
 30733              		.loc 1 5439 4 view .LVU8220
 30734 02d6 FFF7FEFF 		bl	xeq_init_contexts
 30735              	.LVL2363:
5441:src/xeq.c     **** 		}
 30736              		.loc 1 5441 4 view .LVU8221
 30737              	.LBB4341:
 30738              	.LBI4341:
5802:src/xeq.c     **** 	set_running_off_sst();
 30739              		.loc 1 5802 6 view .LVU8222
 30740              	.LBB4342:
5803:src/xeq.c     **** 	State.entryp = 0;
 30741              		.loc 1 5803 2 view .LVU8223
 30742              	.LBB4343:
 30743              	.LBI4343:
5794:src/xeq.c     **** 	Running = 0;
 30744              		.loc 1 5794 6 view .LVU8224
 30745              	.LBB4344:
5795:src/xeq.c     **** }
 30746              		.loc 1 5795 2 view .LVU8225
 30747              	.LBE4344:
 30748              	.LBE4343:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 30749              		.loc 1 5804 15 is_stmt 0 view .LVU8226
 30750 02da 3B68     		ldr	r3, [r7]
 30751              	.LBB4346:
 30752              	.LBB4345:
5795:src/xeq.c     **** }
 30753              		.loc 1 5795 10 view .LVU8227
 30754 02dc 0021     		movs	r1, #0
 30755 02de CAF80010 		str	r1, [r10]
 30756              	.LBE4345:
 30757              	.LBE4346:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 30758              		.loc 1 5804 2 is_stmt 1 view .LVU8228
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 30759              		.loc 1 5804 15 is_stmt 0 view .LVU8229
 30760 02e2 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 30761 02e6 61F30412 		bfi	r2, r1, #4, #1
 30762 02ea 83F8DD27 		strb	r2, [r3, #2013]
5805:src/xeq.c     **** }
 30763              		.loc 1 5805 2 is_stmt 1 view .LVU8230
 30764 02ee 8A20     		movs	r0, #138
 30765 02f0 FFF7FEFF 		bl	dot
 30766              	.LVL2364:
ARM GAS  /tmp/ccQQPlfu.s 			page 783


5806:src/xeq.c     **** 
 30767              		.loc 1 5806 1 is_stmt 0 view .LVU8231
 30768 02f4 47E7     		b	.L2292
 30769              	.L2503:
 30770 02f6 00BF     		.align	2
 30771              	.L2502:
 30772 02f8 00000000 		.word	main_ram
 30773 02fc 00000000 		.word	StateWhileOn
 30774 0300 00000000 		.word	Busy
 30775 0304 00000000 		.word	XeqOpCode
 30776 0308 00000000 		.word	.LC8
 30777 030c 00000000 		.word	TraceBuffer
 30778 0310 00000000 		.word	DispMsg
 30779 0314 00000000 		.word	argcmds
 30780 0318 00000000 		.word	Error
 30781 031c 00000000 		.word	multicmds
 30782 0320 00000000 		.word	xrom
 30783 0324 00000000 		.word	xrom_size
 30784 0328 00000000 		.word	XromRunning
 30785 032c 00000000 		.word	XromParams
 30786 0330 01400800 		.word	540673
 30787 0334 00000000 		.word	RetStk
 30788 0338 00000000 		.word	StackBase
 30789 033c 00000000 		.word	Running
 30790              	.LVL2365:
 30791              	.L2473:
5806:src/xeq.c     **** 
 30792              		.loc 1 5806 1 view .LVU8232
 30793 0340 0892     		str	r2, [sp, #32]
 30794              	.LBE4342:
 30795              	.LBE4341:
 30796              	.LBB4347:
 30797              	.LBB4143:
 30798              	.LBB4119:
 30799              	.LBB4111:
 30800 0342 FFF7FEFF 		bl	process_cmdline.part.0
 30801              	.LVL2366:
 30802 0346 AB4B     		ldr	r3, .L2504
 30803 0348 089A     		ldr	r2, [sp, #32]
 30804 034a C7E6     		b	.L2173
 30805              	.LVL2367:
 30806              	.L2203:
5806:src/xeq.c     **** 
 30807              		.loc 1 5806 1 view .LVU8233
 30808              	.LBE4111:
 30809              	.LBE4119:
 30810              	.LBE4143:
 30811              	.LBE4347:
5359:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
 30812              		.loc 1 5359 18 is_stmt 1 view .LVU8234
 30813              	.LBB4348:
 30814              	.LBI4348:
4613:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
 30815              		.loc 1 4613 13 view .LVU8235
 30816              	.LBB4349:
4614:src/xeq.c     **** 
 30817              		.loc 1 4614 2 view .LVU8236
ARM GAS  /tmp/ccQQPlfu.s 			page 784


 30818              	.LBB4350:
 30819              	.LBB4351:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30820              		.loc 1 1223 5 is_stmt 0 view .LVU8237
 30821 034c 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30822              	.LBE4351:
 30823              	.LBE4350:
4614:src/xeq.c     **** 
 30824              		.loc 1 4614 21 view .LVU8238
 30825 034e EDB2     		uxtb	r5, r5
 30826              	.LVL2368:
4616:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
 30827              		.loc 1 4616 2 is_stmt 1 view .LVU8239
 30828              	.LBB4354:
 30829              	.LBI4350:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 30830              		.loc 1 1220 6 view .LVU8240
 30831              	.LBB4352:
1221:src/xeq.c     **** 
 30832              		.loc 1 1221 2 view .LVU8241
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30833              		.loc 1 1223 2 view .LVU8242
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30834              		.loc 1 1223 5 is_stmt 0 view .LVU8243
 30835 0350 002B     		cmp	r3, #0
 30836 0352 40F08582 		bne	.L2480
 30837              	.L2244:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30838              		.loc 1 1223 5 view .LVU8244
 30839              	.LBE4352:
 30840              	.LBE4354:
4617:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 30841              		.loc 1 4617 2 is_stmt 1 view .LVU8245
4617:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 30842              		.loc 1 4617 5 is_stmt 0 view .LVU8246
 30843 0356 CE2D     		cmp	r5, #206
 30844 0358 00F22982 		bhi	.L2245
4618:src/xeq.c     **** 			bad_mode_error();
 30845              		.loc 1 4618 3 is_stmt 1 view .LVU8247
4618:src/xeq.c     **** 			bad_mode_error();
 30846              		.loc 1 4618 7 is_stmt 0 view .LVU8248
 30847 035c 3A68     		ldr	r2, [r7]
4618:src/xeq.c     **** 			bad_mode_error();
 30848              		.loc 1 4618 23 view .LVU8249
 30849 035e A649     		ldr	r1, .L2504+4
4618:src/xeq.c     **** 			bad_mode_error();
 30850              		.loc 1 4618 7 view .LVU8250
 30851 0360 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
4618:src/xeq.c     **** 			bad_mode_error();
 30852              		.loc 1 4618 6 view .LVU8251
 30853 0364 D807     		lsls	r0, r3, #31
 30854 0366 00F11C84 		bmi	.L2434
 30855 036a 4FEA051A 		lsl	r10, r5, #4
 30856              	.L2246:
4620:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 30857              		.loc 1 4620 8 is_stmt 1 view .LVU8252
4620:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
ARM GAS  /tmp/ccQQPlfu.s 			page 785


 30858              		.loc 1 4620 14 is_stmt 0 view .LVU8253
 30859 036e 51F80A30 		ldr	r3, [r1, r10]
 30860 0372 8A44     		add	r10, r10, r1
4620:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 30861              		.loc 1 4620 11 view .LVU8254
 30862 0374 002B     		cmp	r3, #0
 30863 0376 00F02D84 		beq	.L2481
 30864              	.LBB4355:
4621:src/xeq.c     **** 			if (dispatch_xrom(fp))
 30865              		.loc 1 4621 4 is_stmt 1 view .LVU8255
 30866              	.LVL2369:
4622:src/xeq.c     **** 				return;
 30867              		.loc 1 4622 4 view .LVU8256
4622:src/xeq.c     **** 				return;
 30868              		.loc 1 4622 8 is_stmt 0 view .LVU8257
 30869 037a 1846     		mov	r0, r3
 30870 037c 0593     		str	r3, [sp, #20]
 30871 037e FFF7FEFF 		bl	dispatch_xrom
 30872              	.LVL2370:
4622:src/xeq.c     **** 				return;
 30873              		.loc 1 4622 7 view .LVU8258
 30874 0382 059B     		ldr	r3, [sp, #20]
 30875 0384 0028     		cmp	r0, #0
 30876 0386 40F08181 		bne	.L2167
4625:src/xeq.c     **** 				case 2:	lift_if_enabled();
 30877              		.loc 1 4625 5 is_stmt 1 view .LVU8259
 30878 038a 9AF80420 		ldrb	r2, [r10, #4]	@ zero_extendqisi2
 30879 038e 02F00302 		and	r2, r2, #3
 30880 0392 012A     		cmp	r2, #1
 30881 0394 00F04884 		beq	.L2249
 30882 0398 022A     		cmp	r2, #2
 30883 039a 03D1     		bne	.L2250
4626:src/xeq.c     **** 				case 1:	lift_if_enabled();
 30884              		.loc 1 4626 13 view .LVU8260
 30885              	.LBB4356:
 30886              	.LBI4356:
 741:src/xeq.c     **** 	if (get_lift())
 30887              		.loc 1 741 6 view .LVU8261
 30888              	.LBB4357:
 742:src/xeq.c     **** 		lift();
 30889              		.loc 1 742 2 view .LVU8262
 30890              	.LBB4358:
 30891              	.LBI4358:
 737:src/xeq.c     **** 	return State2.state_lift;
 30892              		.loc 1 737 12 view .LVU8263
 30893              	.LBB4359:
 738:src/xeq.c     **** }
 30894              		.loc 1 738 2 view .LVU8264
 738:src/xeq.c     **** }
 30895              		.loc 1 738 15 is_stmt 0 view .LVU8265
 30896 039c E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 30897              	.LBE4359:
 30898              	.LBE4358:
 742:src/xeq.c     **** 		lift();
 30899              		.loc 1 742 5 view .LVU8266
 30900 039e 5206     		lsls	r2, r2, #25
 30901 03a0 00F13E84 		bmi	.L2482
ARM GAS  /tmp/ccQQPlfu.s 			page 786


 30902              	.LVL2371:
 30903              	.L2250:
 742:src/xeq.c     **** 		lift();
 30904              		.loc 1 742 5 view .LVU8267
 30905              	.LBE4357:
 30906              	.LBE4356:
4629:src/xeq.c     **** 					break;
 30907              		.loc 1 4629 6 is_stmt 1 view .LVU8268
 30908 03a4 2846     		mov	r0, r5
 30909 03a6 9847     		blx	r3
 30910              	.LVL2372:
4630:src/xeq.c     **** 				}
 30911              		.loc 1 4630 6 view .LVU8269
 30912 03a8 944B     		ldr	r3, .L2504+8
 30913 03aa 3A68     		ldr	r2, [r7]
 30914              	.LVL2373:
 30915              	.L2247:
4630:src/xeq.c     **** 				}
 30916              		.loc 1 4630 6 is_stmt 0 view .LVU8270
 30917              	.LBE4355:
4635:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 30918              		.loc 1 4635 3 is_stmt 1 view .LVU8271
4637:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 30919              		.loc 1 4637 2 view .LVU8272
4637:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 30920              		.loc 1 4637 6 is_stmt 0 view .LVU8273
 30921 03ac 92F8AD17 		ldrb	r1, [r2, #1965]	@ zero_extendqisi2
4637:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 30922              		.loc 1 4637 5 view .LVU8274
 30923 03b0 8907     		lsls	r1, r1, #30
 30924 03b2 40F10884 		bpl	.L2254
4637:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 30925              		.loc 1 4637 24 view .LVU8275
 30926 03b6 3F2D     		cmp	r5, #63
 30927 03b8 00F06981 		beq	.L2445
 30928 03bc 08E2     		b	.L2446
 30929              	.LVL2374:
 30930              	.L2202:
4637:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 30931              		.loc 1 4637 24 view .LVU8276
 30932              	.LBE4349:
 30933              	.LBE4348:
5360:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
 30934              		.loc 1 5360 18 is_stmt 1 view .LVU8277
 30935              	.LBB4385:
 30936              	.LBI4385:
4654:src/xeq.c     **** {
 30937              		.loc 1 4654 13 view .LVU8278
 30938              	.LBB4386:
4656:src/xeq.c     **** 	process_cmdline_set_lift();
 30939              		.loc 1 4656 2 view .LVU8279
4657:src/xeq.c     **** 
 30940              		.loc 1 4657 2 view .LVU8280
 30941              	.LBB4387:
 30942              	.LBI4387:
1326:src/xeq.c     **** 	process_cmdline();
 30943              		.loc 1 1326 6 view .LVU8281
ARM GAS  /tmp/ccQQPlfu.s 			page 787


 30944              	.LBE4387:
 30945              	.LBE4386:
 30946              	.LBE4385:
1327:src/xeq.c     **** 	set_lift();
 30947              		.loc 1 1327 2 view .LVU8282
 30948              	.LBB4426:
 30949              	.LBB4421:
 30950              	.LBB4398:
 30951              	.LBB4388:
 30952              	.LBI4388:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 30953              		.loc 1 1220 6 view .LVU8283
 30954              	.LBB4389:
1221:src/xeq.c     **** 
 30955              		.loc 1 1221 2 view .LVU8284
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30956              		.loc 1 1223 2 view .LVU8285
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30957              		.loc 1 1223 5 is_stmt 0 view .LVU8286
 30958 03be 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30959 03c0 002B     		cmp	r3, #0
 30960 03c2 40F04A82 		bne	.L2483
 30961              	.L2258:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30962              		.loc 1 1223 5 view .LVU8287
 30963              	.LBE4389:
 30964              	.LBE4388:
 30965              	.LBE4398:
 30966              	.LBE4421:
 30967              	.LBE4426:
1328:src/xeq.c     **** }
 30968              		.loc 1 1328 2 is_stmt 1 view .LVU8288
 30969              	.LBB4427:
 30970              	.LBB4422:
 30971              	.LBB4399:
 30972              	.LBB4391:
 30973              	.LBI4391:
 761:src/xeq.c     ****     State2.state_lift = 1;
 30974              		.loc 1 761 6 view .LVU8289
 30975              	.LBB4392:
 762:src/xeq.c     **** }
 30976              		.loc 1 762 5 view .LVU8290
 762:src/xeq.c     **** }
 30977              		.loc 1 762 23 is_stmt 0 view .LVU8291
 30978 03c6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30979              	.LBE4392:
 30980              	.LBE4391:
 30981              	.LBE4399:
4659:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 30982              		.loc 1 4659 4 view .LVU8292
 30983 03c8 EDB2     		uxtb	r5, r5
 30984              	.LVL2375:
 30985              	.LBB4400:
 30986              	.LBB4395:
 30987              	.LBB4393:
 762:src/xeq.c     **** }
 30988              		.loc 1 762 23 view .LVU8293
ARM GAS  /tmp/ccQQPlfu.s 			page 788


 30989 03ca 43F04003 		orr	r3, r3, #64
 30990              	.LBE4393:
 30991              	.LBE4395:
 30992              	.LBE4400:
4660:src/xeq.c     **** 		if (is_intmode()) {
 30993              		.loc 1 4660 5 view .LVU8294
 30994 03ce 9B2D     		cmp	r5, #155
 30995              	.LBB4401:
 30996              	.LBB4396:
 30997              	.LBB4394:
 762:src/xeq.c     **** }
 30998              		.loc 1 762 23 view .LVU8295
 30999 03d0 E375     		strb	r3, [r4, #23]
 31000              	.LBE4394:
 31001              	.LBE4396:
 31002              	.LBE4401:
4659:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 31003              		.loc 1 4659 2 is_stmt 1 view .LVU8296
 31004              	.LVL2376:
4660:src/xeq.c     **** 		if (is_intmode()) {
 31005              		.loc 1 4660 2 view .LVU8297
4660:src/xeq.c     **** 		if (is_intmode()) {
 31006              		.loc 1 4660 5 is_stmt 0 view .LVU8298
 31007 03d2 3FF6F1AE 		bhi	.L2196
4661:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 31008              		.loc 1 4661 3 is_stmt 1 view .LVU8299
4661:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 31009              		.loc 1 4661 7 is_stmt 0 view .LVU8300
 31010 03d6 3B68     		ldr	r3, [r7]
 31011 03d8 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4661:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 31012              		.loc 1 4661 6 view .LVU8301
 31013 03dc DA07     		lsls	r2, r3, #31
 31014 03de 40F19B83 		bpl	.L2260
4662:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 31015              		.loc 1 4662 4 is_stmt 1 view .LVU8302
4662:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 31016              		.loc 1 4662 10 is_stmt 0 view .LVU8303
 31017 03e2 874B     		ldr	r3, .L2504+12
 31018 03e4 05EB4505 		add	r5, r5, r5, lsl #1
 31019              	.LVL2377:
4662:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 31020              		.loc 1 4662 10 view .LVU8304
 31021 03e8 03EBC505 		add	r5, r3, r5, lsl #3
 31022 03ec AD68     		ldr	r5, [r5, #8]
4662:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 31023              		.loc 1 4662 7 view .LVU8305
 31024 03ee 002D     		cmp	r5, #0
 31025 03f0 00F04783 		beq	.L2279
 31026              	.LBB4402:
4663:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31027              		.loc 1 4663 5 is_stmt 1 view .LVU8306
 31028              	.LVL2378:
4664:src/xeq.c     **** 					return;
 31029              		.loc 1 4664 5 view .LVU8307
4664:src/xeq.c     **** 					return;
 31030              		.loc 1 4664 9 is_stmt 0 view .LVU8308
ARM GAS  /tmp/ccQQPlfu.s 			page 789


 31031 03f4 2846     		mov	r0, r5
 31032 03f6 FFF7FEFF 		bl	dispatch_xrom
 31033              	.LVL2379:
4664:src/xeq.c     **** 					return;
 31034              		.loc 1 4664 8 view .LVU8309
 31035 03fa 0028     		cmp	r0, #0
 31036 03fc 40F04681 		bne	.L2167
 31037              	.LBB4403:
4667:src/xeq.c     **** 					x = fp(x);
 31038              		.loc 1 4667 6 is_stmt 1 view .LVU8310
 31039              	.LBB4404:
 31040              	.LBI4404:
1436:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 31041              		.loc 1 1436 15 view .LVU8311
 31042              	.LBB4405:
1437:src/xeq.c     **** }
 31043              		.loc 1 1437 2 view .LVU8312
1437:src/xeq.c     **** }
 31044              		.loc 1 1437 9 is_stmt 0 view .LVU8313
 31045 0400 6420     		movs	r0, #100
 31046 0402 FFF7FEFF 		bl	get_reg_n_int
 31047              	.LVL2380:
1437:src/xeq.c     **** }
 31048              		.loc 1 1437 9 view .LVU8314
 31049              	.LBE4405:
 31050              	.LBE4404:
4668:src/xeq.c     **** 					setlastX();
 31051              		.loc 1 4668 6 is_stmt 1 view .LVU8315
4668:src/xeq.c     **** 					setlastX();
 31052              		.loc 1 4668 10 is_stmt 0 view .LVU8316
 31053 0406 A847     		blx	r5
 31054              	.LVL2381:
4668:src/xeq.c     **** 					setlastX();
 31055              		.loc 1 4668 10 view .LVU8317
 31056 0408 7C4B     		ldr	r3, .L2504+8
 31057 040a 0593     		str	r3, [sp, #20]
 31058 040c 0546     		mov	r5, r0
 31059              	.LVL2382:
4668:src/xeq.c     **** 					setlastX();
 31060              		.loc 1 4668 10 view .LVU8318
 31061 040e 8A46     		mov	r10, r1
 31062              	.LVL2383:
4669:src/xeq.c     **** 					setX_int(x);
 31063              		.loc 1 4669 6 is_stmt 1 view .LVU8319
 31064              	.LBB4406:
 31065              	.LBI4406:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31066              		.loc 1 786 6 view .LVU8320
 31067              	.LBB4407:
 787:src/xeq.c     **** }
 31068              		.loc 1 787 2 view .LVU8321
 31069 0410 6C20     		movs	r0, #108
 31070              	.LVL2384:
 787:src/xeq.c     **** }
 31071              		.loc 1 787 2 is_stmt 0 view .LVU8322
 31072 0412 6421     		movs	r1, #100
 31073              	.LVL2385:
ARM GAS  /tmp/ccQQPlfu.s 			page 790


 787:src/xeq.c     **** }
 31074              		.loc 1 787 2 view .LVU8323
 31075 0414 FFF7FEFF 		bl	copyreg_n
 31076              	.LVL2386:
 31077              	.LBE4407:
 31078              	.LBE4406:
4670:src/xeq.c     **** 				}
 31079              		.loc 1 4670 6 is_stmt 1 view .LVU8324
 31080 0418 C2E1     		b	.L2451
 31081              	.LVL2387:
 31082              	.L2204:
4670:src/xeq.c     **** 				}
 31083              		.loc 1 4670 6 is_stmt 0 view .LVU8325
 31084              	.LBE4403:
 31085              	.LBE4402:
 31086              	.LBE4422:
 31087              	.LBE4427:
5358:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
 31088              		.loc 1 5358 19 is_stmt 1 view .LVU8326
 31089              	.LBB4428:
 31090              	.LBI4186:
3906:src/xeq.c     **** 	int opm = argKIND(op);
 31091              		.loc 1 3906 13 view .LVU8327
 31092              	.LBB4252:
3907:src/xeq.c     **** 
 31093              		.loc 1 3907 2 view .LVU8328
3907:src/xeq.c     **** 
 31094              		.loc 1 3907 6 is_stmt 0 view .LVU8329
 31095 041a 5FFA85FA 		uxtb	r10, r5
 31096              	.LVL2388:
3909:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 31097              		.loc 1 3909 2 is_stmt 1 view .LVU8330
 31098 041e BAF12A0F 		cmp	r10, #42
 31099 0422 3FF6C9AE 		bhi	.L2196
 31100 0426 DFE81AF0 		tbh	[pc, r10, lsl #1]
 31101              	.L2207:
 31102 042a DB02     		.2byte	(.L2218-.L2207)/2
 31103 042c 1E03     		.2byte	(.L2217-.L2207)/2
 31104 042e F902     		.2byte	(.L2216-.L2207)/2
 31105 0430 C802     		.2byte	(.L2215-.L2207)/2
 31106 0432 9702     		.2byte	(.L2214-.L2207)/2
 31107 0434 0F02     		.2byte	(.L2213-.L2207)/2
 31108 0436 0F02     		.2byte	(.L2213-.L2207)/2
 31109 0438 0F02     		.2byte	(.L2213-.L2207)/2
 31110 043a 0F02     		.2byte	(.L2213-.L2207)/2
 31111 043c 0F02     		.2byte	(.L2213-.L2207)/2
 31112 043e 0F02     		.2byte	(.L2213-.L2207)/2
 31113 0440 0F02     		.2byte	(.L2213-.L2207)/2
 31114 0442 0F02     		.2byte	(.L2213-.L2207)/2
 31115 0444 0F02     		.2byte	(.L2213-.L2207)/2
 31116 0446 0F02     		.2byte	(.L2213-.L2207)/2
 31117 0448 0F02     		.2byte	(.L2213-.L2207)/2
 31118 044a 0F02     		.2byte	(.L2213-.L2207)/2
 31119 044c 0F02     		.2byte	(.L2213-.L2207)/2
 31120 044e 0F02     		.2byte	(.L2213-.L2207)/2
 31121 0450 0F02     		.2byte	(.L2213-.L2207)/2
 31122 0452 0F02     		.2byte	(.L2213-.L2207)/2
ARM GAS  /tmp/ccQQPlfu.s 			page 791


 31123 0454 3F02     		.2byte	(.L2212-.L2207)/2
 31124 0456 3F02     		.2byte	(.L2212-.L2207)/2
 31125 0458 3302     		.2byte	(.L2211-.L2207)/2
 31126 045a 3302     		.2byte	(.L2211-.L2207)/2
 31127 045c 3302     		.2byte	(.L2211-.L2207)/2
 31128 045e 3302     		.2byte	(.L2211-.L2207)/2
 31129 0460 3302     		.2byte	(.L2211-.L2207)/2
 31130 0462 3302     		.2byte	(.L2211-.L2207)/2
 31131 0464 3302     		.2byte	(.L2211-.L2207)/2
 31132 0466 2702     		.2byte	(.L2210-.L2207)/2
 31133 0468 2702     		.2byte	(.L2210-.L2207)/2
 31134 046a 2702     		.2byte	(.L2210-.L2207)/2
 31135 046c 2702     		.2byte	(.L2210-.L2207)/2
 31136 046e 2702     		.2byte	(.L2210-.L2207)/2
 31137 0470 2702     		.2byte	(.L2210-.L2207)/2
 31138 0472 2702     		.2byte	(.L2210-.L2207)/2
 31139 0474 8B02     		.2byte	(.L2209-.L2207)/2
 31140 0476 8B02     		.2byte	(.L2209-.L2207)/2
 31141 0478 7F02     		.2byte	(.L2208-.L2207)/2
 31142 047a 7F02     		.2byte	(.L2208-.L2207)/2
 31143 047c 7302     		.2byte	(.L2206-.L2207)/2
 31144 047e 7302     		.2byte	(.L2206-.L2207)/2
 31145              	.LVL2389:
 31146              		.p2align 1
 31147              	.L2200:
3909:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 31148              		.loc 1 3909 2 is_stmt 0 view .LVU8331
 31149              	.LBE4252:
 31150              	.LBE4428:
5362:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
 31151              		.loc 1 5362 18 is_stmt 1 view .LVU8332
 31152              	.LBB4429:
 31153              	.LBI4429:
4803:src/xeq.c     **** 	unsigned int f;
 31154              		.loc 1 4803 13 view .LVU8333
 31155              	.LBB4430:
4804:src/xeq.c     **** 	process_cmdline_set_lift();
 31156              		.loc 1 4804 2 view .LVU8334
4805:src/xeq.c     **** 
 31157              		.loc 1 4805 2 view .LVU8335
 31158              	.LBB4431:
 31159              	.LBI4431:
1326:src/xeq.c     **** 	process_cmdline();
 31160              		.loc 1 1326 6 view .LVU8336
 31161              	.LBE4431:
 31162              	.LBE4430:
 31163              	.LBE4429:
1327:src/xeq.c     **** 	set_lift();
 31164              		.loc 1 1327 2 view .LVU8337
 31165              	.LBB4477:
 31166              	.LBB4469:
 31167              	.LBB4442:
 31168              	.LBB4432:
 31169              	.LBI4432:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 31170              		.loc 1 1220 6 view .LVU8338
 31171              	.LBB4433:
ARM GAS  /tmp/ccQQPlfu.s 			page 792


1221:src/xeq.c     **** 
 31172              		.loc 1 1221 2 view .LVU8339
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31173              		.loc 1 1223 2 view .LVU8340
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31174              		.loc 1 1223 5 is_stmt 0 view .LVU8341
 31175 0480 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31176 0482 002B     		cmp	r3, #0
 31177 0484 40F0F581 		bne	.L2484
 31178              	.L2274:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31179              		.loc 1 1223 5 view .LVU8342
 31180              	.LBE4433:
 31181              	.LBE4432:
 31182              	.LBE4442:
 31183              	.LBE4469:
 31184              	.LBE4477:
1328:src/xeq.c     **** }
 31185              		.loc 1 1328 2 is_stmt 1 view .LVU8343
 31186              	.LBB4478:
 31187              	.LBB4470:
 31188              	.LBB4443:
 31189              	.LBB4435:
 31190              	.LBI4435:
 761:src/xeq.c     ****     State2.state_lift = 1;
 31191              		.loc 1 761 6 view .LVU8344
 31192              	.LBB4436:
 762:src/xeq.c     **** }
 31193              		.loc 1 762 5 view .LVU8345
 762:src/xeq.c     **** }
 31194              		.loc 1 762 23 is_stmt 0 view .LVU8346
 31195 0488 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31196              	.LBE4436:
 31197              	.LBE4435:
 31198              	.LBE4443:
4807:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 31199              		.loc 1 4807 4 view .LVU8347
 31200 048a EDB2     		uxtb	r5, r5
 31201              	.LVL2390:
 31202              	.LBB4444:
 31203              	.LBB4439:
 31204              	.LBB4437:
 762:src/xeq.c     **** }
 31205              		.loc 1 762 23 view .LVU8348
 31206 048c 43F04003 		orr	r3, r3, #64
 31207              	.LBE4437:
 31208              	.LBE4439:
 31209              	.LBE4444:
4808:src/xeq.c     **** 		if (is_intmode()) {
 31210              		.loc 1 4808 5 view .LVU8349
 31211 0490 0B2D     		cmp	r5, #11
 31212              	.LBB4445:
 31213              	.LBB4440:
 31214              	.LBB4438:
 762:src/xeq.c     **** }
 31215              		.loc 1 762 23 view .LVU8350
 31216 0492 E375     		strb	r3, [r4, #23]
ARM GAS  /tmp/ccQQPlfu.s 			page 793


 31217              	.LBE4438:
 31218              	.LBE4440:
 31219              	.LBE4445:
4807:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 31220              		.loc 1 4807 2 is_stmt 1 view .LVU8351
 31221              	.LVL2391:
4808:src/xeq.c     **** 		if (is_intmode()) {
 31222              		.loc 1 4808 2 view .LVU8352
4808:src/xeq.c     **** 		if (is_intmode()) {
 31223              		.loc 1 4808 5 is_stmt 0 view .LVU8353
 31224 0494 3FF690AE 		bhi	.L2196
4809:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31225              		.loc 1 4809 3 is_stmt 1 view .LVU8354
4809:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31226              		.loc 1 4809 7 is_stmt 0 view .LVU8355
 31227 0498 3B68     		ldr	r3, [r7]
 31228 049a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4809:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31229              		.loc 1 4809 6 view .LVU8356
 31230 049e D807     		lsls	r0, r3, #31
 31231 04a0 40F10C83 		bpl	.L2276
4810:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31232              		.loc 1 4810 4 is_stmt 1 view .LVU8357
4810:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31233              		.loc 1 4810 10 is_stmt 0 view .LVU8358
 31234 04a4 574B     		ldr	r3, .L2504+16
 31235 04a6 05EB8505 		add	r5, r5, r5, lsl #2
 31236              	.LVL2392:
4810:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31237              		.loc 1 4810 10 view .LVU8359
 31238 04aa 03EB8505 		add	r5, r3, r5, lsl #2
 31239 04ae 6D68     		ldr	r5, [r5, #4]
4810:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31240              		.loc 1 4810 7 view .LVU8360
 31241 04b0 002D     		cmp	r5, #0
 31242 04b2 00F0E682 		beq	.L2279
 31243              	.LBB4446:
4811:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31244              		.loc 1 4811 5 is_stmt 1 view .LVU8361
 31245              	.LVL2393:
4812:src/xeq.c     **** 					return;
 31246              		.loc 1 4812 5 view .LVU8362
4812:src/xeq.c     **** 					return;
 31247              		.loc 1 4812 9 is_stmt 0 view .LVU8363
 31248 04b6 2846     		mov	r0, r5
 31249 04b8 FFF7FEFF 		bl	dispatch_xrom
 31250              	.LVL2394:
4812:src/xeq.c     **** 					return;
 31251              		.loc 1 4812 8 view .LVU8364
 31252 04bc 0028     		cmp	r0, #0
 31253 04be 40F0E580 		bne	.L2167
 31254              	.LBB4447:
4815:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 31255              		.loc 1 4815 6 is_stmt 1 view .LVU8365
 31256              	.LBB4448:
 31257              	.LBI4448:
1436:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
ARM GAS  /tmp/ccQQPlfu.s 			page 794


 31258              		.loc 1 1436 15 view .LVU8366
 31259              	.LBB4449:
1437:src/xeq.c     **** }
 31260              		.loc 1 1437 2 view .LVU8367
1437:src/xeq.c     **** }
 31261              		.loc 1 1437 9 is_stmt 0 view .LVU8368
 31262 04c2 6420     		movs	r0, #100
 31263 04c4 FFF7FEFF 		bl	get_reg_n_int
 31264              	.LVL2395:
 31265 04c8 8246     		mov	r10, r0
 31266              	.LVL2396:
1437:src/xeq.c     **** }
 31267              		.loc 1 1437 9 view .LVU8369
 31268              	.LBE4449:
 31269              	.LBE4448:
4816:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31270              		.loc 1 4816 6 is_stmt 1 view .LVU8370
4816:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31271              		.loc 1 4816 24 is_stmt 0 view .LVU8371
 31272 04ca 6520     		movs	r0, #101
 31273              	.LVL2397:
 31274              	.LBB4451:
 31275              	.LBB4450:
1437:src/xeq.c     **** }
 31276              		.loc 1 1437 9 view .LVU8372
 31277 04cc 0591     		str	r1, [sp, #20]
 31278              	.LVL2398:
1437:src/xeq.c     **** }
 31279              		.loc 1 1437 9 view .LVU8373
 31280              	.LBE4450:
 31281              	.LBE4451:
4816:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31282              		.loc 1 4816 24 view .LVU8374
 31283 04ce FFF7FEFF 		bl	get_reg_n_int
 31284              	.LVL2399:
 31285 04d2 0690     		str	r0, [sp, #24]
4817:src/xeq.c     **** 					x = fp(z, y, x);
 31286              		.loc 1 4817 24 view .LVU8375
 31287 04d4 6620     		movs	r0, #102
4816:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31288              		.loc 1 4816 24 view .LVU8376
 31289 04d6 0891     		str	r1, [sp, #32]
 31290              	.LVL2400:
4817:src/xeq.c     **** 					x = fp(z, y, x);
 31291              		.loc 1 4817 6 is_stmt 1 view .LVU8377
4817:src/xeq.c     **** 					x = fp(z, y, x);
 31292              		.loc 1 4817 24 is_stmt 0 view .LVU8378
 31293 04d8 FFF7FEFF 		bl	get_reg_n_int
 31294              	.LVL2401:
4818:src/xeq.c     **** 					setlastX();
 31295              		.loc 1 4818 6 is_stmt 1 view .LVU8379
4818:src/xeq.c     **** 					setlastX();
 31296              		.loc 1 4818 10 is_stmt 0 view .LVU8380
 31297 04dc 059B     		ldr	r3, [sp, #20]
 31298 04de 069A     		ldr	r2, [sp, #24]
 31299 04e0 CDF800A0 		str	r10, [sp]
 31300 04e4 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccQQPlfu.s 			page 795


 31301 04e6 089B     		ldr	r3, [sp, #32]
 31302 04e8 A847     		blx	r5
 31303              	.LVL2402:
4818:src/xeq.c     **** 					setlastX();
 31304              		.loc 1 4818 10 view .LVU8381
 31305 04ea 444B     		ldr	r3, .L2504+8
 31306 04ec 0593     		str	r3, [sp, #20]
 31307 04ee 0546     		mov	r5, r0
 31308              	.LVL2403:
4818:src/xeq.c     **** 					setlastX();
 31309              		.loc 1 4818 10 view .LVU8382
 31310 04f0 8A46     		mov	r10, r1
 31311              	.LVL2404:
4819:src/xeq.c     **** 					lower();
 31312              		.loc 1 4819 6 is_stmt 1 view .LVU8383
 31313              	.LBB4452:
 31314              	.LBI4452:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31315              		.loc 1 786 6 view .LVU8384
 31316              	.LBB4453:
 787:src/xeq.c     **** }
 31317              		.loc 1 787 2 view .LVU8385
 31318 04f2 6C20     		movs	r0, #108
 31319              	.LVL2405:
 787:src/xeq.c     **** }
 31320              		.loc 1 787 2 is_stmt 0 view .LVU8386
 31321 04f4 6421     		movs	r1, #100
 31322              	.LVL2406:
 787:src/xeq.c     **** }
 31323              		.loc 1 787 2 view .LVU8387
 31324 04f6 FFF7FEFF 		bl	copyreg_n
 31325              	.LVL2407:
 31326              	.LBE4453:
 31327              	.LBE4452:
4820:src/xeq.c     **** 					lower();
 31328              		.loc 1 4820 6 is_stmt 1 view .LVU8388
 31329 04fa FFF7FEFF 		bl	lower
 31330              	.LVL2408:
 31331 04fe 4DE1     		b	.L2449
 31332              	.LVL2409:
 31333              	.L2199:
4820:src/xeq.c     **** 					lower();
 31334              		.loc 1 4820 6 is_stmt 0 view .LVU8389
 31335              	.LBE4447:
 31336              	.LBE4446:
 31337              	.LBE4470:
 31338              	.LBE4478:
5363:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
 31339              		.loc 1 5363 19 is_stmt 1 view .LVU8390
 31340              	.LBB4479:
 31341              	.LBI4479:
4694:src/xeq.c     **** 	decNumber x, y, rx, ry;
 31342              		.loc 1 4694 13 view .LVU8391
 31343              	.LBB4480:
4695:src/xeq.c     **** 	unsigned int f;
 31344              		.loc 1 4695 2 view .LVU8392
4696:src/xeq.c     **** 
ARM GAS  /tmp/ccQQPlfu.s 			page 796


 31345              		.loc 1 4696 2 view .LVU8393
4698:src/xeq.c     **** 
 31346              		.loc 1 4698 2 view .LVU8394
 31347              	.LBB4481:
 31348              	.LBI4481:
1326:src/xeq.c     **** 	process_cmdline();
 31349              		.loc 1 1326 6 view .LVU8395
 31350              	.LBE4481:
 31351              	.LBE4480:
 31352              	.LBE4479:
1327:src/xeq.c     **** 	set_lift();
 31353              		.loc 1 1327 2 view .LVU8396
 31354              	.LBB4512:
 31355              	.LBB4507:
 31356              	.LBB4492:
 31357              	.LBB4482:
 31358              	.LBI4482:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 31359              		.loc 1 1220 6 view .LVU8397
 31360              	.LBB4483:
1221:src/xeq.c     **** 
 31361              		.loc 1 1221 2 view .LVU8398
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31362              		.loc 1 1223 2 view .LVU8399
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31363              		.loc 1 1223 5 is_stmt 0 view .LVU8400
 31364 0500 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31365 0502 002B     		cmp	r3, #0
 31366 0504 40F0B281 		bne	.L2485
 31367              	.L2282:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31368              		.loc 1 1223 5 view .LVU8401
 31369              	.LBE4483:
 31370              	.LBE4482:
 31371              	.LBE4492:
 31372              	.LBE4507:
 31373              	.LBE4512:
1328:src/xeq.c     **** }
 31374              		.loc 1 1328 2 is_stmt 1 view .LVU8402
 31375              	.LBB4513:
 31376              	.LBB4508:
 31377              	.LBB4493:
 31378              	.LBB4485:
 31379              	.LBI4485:
 761:src/xeq.c     ****     State2.state_lift = 1;
 31380              		.loc 1 761 6 view .LVU8403
 31381              	.LBB4486:
 762:src/xeq.c     **** }
 31382              		.loc 1 762 5 view .LVU8404
 762:src/xeq.c     **** }
 31383              		.loc 1 762 23 is_stmt 0 view .LVU8405
 31384 0508 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31385              	.LBE4486:
 31386              	.LBE4485:
 31387              	.LBE4493:
4700:src/xeq.c     **** 
 31388              		.loc 1 4700 4 view .LVU8406
ARM GAS  /tmp/ccQQPlfu.s 			page 797


 31389 050a EDB2     		uxtb	r5, r5
 31390              	.LVL2410:
 31391              	.LBB4494:
 31392              	.LBB4489:
 31393              	.LBB4487:
 762:src/xeq.c     **** }
 31394              		.loc 1 762 23 view .LVU8407
 31395 050c 43F04003 		orr	r3, r3, #64
 31396              	.LBE4487:
 31397              	.LBE4489:
 31398              	.LBE4494:
4702:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31399              		.loc 1 4702 5 view .LVU8408
 31400 0510 9B2D     		cmp	r5, #155
 31401              	.LBB4495:
 31402              	.LBB4490:
 31403              	.LBB4488:
 762:src/xeq.c     **** }
 31404              		.loc 1 762 23 view .LVU8409
 31405 0512 E375     		strb	r3, [r4, #23]
 31406              	.LBE4488:
 31407              	.LBE4490:
 31408              	.LBE4495:
4700:src/xeq.c     **** 
 31409              		.loc 1 4700 2 is_stmt 1 view .LVU8410
 31410              	.LVL2411:
4702:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31411              		.loc 1 4702 2 view .LVU8411
4702:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31412              		.loc 1 4702 5 is_stmt 0 view .LVU8412
 31413 0514 66D8     		bhi	.L2288
4703:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31414              		.loc 1 4703 3 is_stmt 1 view .LVU8413
4703:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31415              		.loc 1 4703 9 is_stmt 0 view .LVU8414
 31416 0516 3A4B     		ldr	r3, .L2504+12
 31417 0518 05EB4505 		add	r5, r5, r5, lsl #1
 31418              	.LVL2412:
4703:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31419              		.loc 1 4703 9 view .LVU8415
 31420 051c 03EBC505 		add	r5, r3, r5, lsl #3
 31421 0520 6D68     		ldr	r5, [r5, #4]
4703:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31422              		.loc 1 4703 6 view .LVU8416
 31423 0522 002D     		cmp	r5, #0
 31424 0524 00F0B882 		beq	.L2289
 31425              	.LBB4496:
4704:src/xeq.c     **** 			if (dispatch_xrom(fp))
 31426              		.loc 1 4704 4 is_stmt 1 view .LVU8417
 31427              	.LVL2413:
4705:src/xeq.c     **** 				return;
 31428              		.loc 1 4705 4 view .LVU8418
4705:src/xeq.c     **** 				return;
 31429              		.loc 1 4705 8 is_stmt 0 view .LVU8419
 31430 0528 2846     		mov	r0, r5
 31431 052a FFF7FEFF 		bl	dispatch_xrom
 31432              	.LVL2414:
ARM GAS  /tmp/ccQQPlfu.s 			page 798


4705:src/xeq.c     **** 				return;
 31433              		.loc 1 4705 7 view .LVU8420
 31434 052e 0028     		cmp	r0, #0
 31435 0530 40F0AC80 		bne	.L2167
4708:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
 31436              		.loc 1 4708 5 is_stmt 1 view .LVU8421
 31437              	.LVL2415:
 31438              	.LBB4497:
 31439              	.LBI4497:
 848:src/xeq.c     **** 	getX(x);
 31440              		.loc 1 848 6 view .LVU8422
 31441              	.LBE4497:
 31442              	.LBE4496:
 31443              	.LBE4508:
 31444              	.LBE4513:
 849:src/xeq.c     **** 	getY(y);
 31445              		.loc 1 849 2 view .LVU8423
 31446              	.LBB4514:
 31447              	.LBB4509:
 31448              	.LBB4504:
 31449              	.LBB4502:
 31450              	.LBB4498:
 31451              	.LBI4498:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 31452              		.loc 1 818 12 view .LVU8424
 31453              	.LBB4499:
 819:src/xeq.c     **** }
 31454              		.loc 1 819 2 view .LVU8425
 819:src/xeq.c     **** }
 31455              		.loc 1 819 9 is_stmt 0 view .LVU8426
 31456 0534 6421     		movs	r1, #100
 31457 0536 1EA8     		add	r0, sp, #120
 31458              	.LVL2416:
 819:src/xeq.c     **** }
 31459              		.loc 1 819 9 view .LVU8427
 31460 0538 FFF7FEFF 		bl	getRegister
 31461              	.LVL2417:
 819:src/xeq.c     **** }
 31462              		.loc 1 819 9 view .LVU8428
 31463              	.LBE4499:
 31464              	.LBE4498:
 31465              	.LBE4502:
 31466              	.LBE4504:
 31467              	.LBE4509:
 31468              	.LBE4514:
 850:src/xeq.c     **** }
 31469              		.loc 1 850 2 is_stmt 1 view .LVU8429
 31470              	.LBB4515:
 31471              	.LBB4510:
 31472              	.LBB4505:
 31473              	.LBB4503:
 31474              	.LBB4500:
 31475              	.LBI4500:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 31476              		.loc 1 826 6 view .LVU8430
 31477              	.LBB4501:
 827:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 799


 31478              		.loc 1 827 2 view .LVU8431
 31479 053c 6521     		movs	r1, #101
 31480 053e 27A8     		add	r0, sp, #156
 31481              	.LVL2418:
 827:src/xeq.c     **** }
 31482              		.loc 1 827 2 is_stmt 0 view .LVU8432
 31483 0540 FFF7FEFF 		bl	getRegister
 31484              	.LVL2419:
 827:src/xeq.c     **** }
 31485              		.loc 1 827 2 view .LVU8433
 31486              	.LBE4501:
 31487              	.LBE4500:
 31488              	.LBE4503:
4709:src/xeq.c     **** 				setlastXY();
 31489              		.loc 1 4709 5 is_stmt 1 view .LVU8434
 31490 0544 27AB     		add	r3, sp, #156
 31491 0546 1EAA     		add	r2, sp, #120
 31492 0548 39A9     		add	r1, sp, #228
 31493 054a 30A8     		add	r0, sp, #192
 31494 054c A847     		blx	r5
 31495              	.LVL2420:
4710:src/xeq.c     **** 				setXY(&rx, &ry);
 31496              		.loc 1 4710 5 view .LVU8435
 31497 054e FFF7FEFF 		bl	setlastXY
 31498              	.LVL2421:
4711:src/xeq.c     **** 				set_was_complex();
 31499              		.loc 1 4711 5 view .LVU8436
 31500              	.L2448:
4711:src/xeq.c     **** 				set_was_complex();
 31501              		.loc 1 4711 5 is_stmt 0 view .LVU8437
 31502              	.LBE4505:
 31503              	.LBE4510:
 31504              	.LBE4515:
 31505              	.LBB4516:
 31506              	.LBB4517:
 31507              	.LBB4518:
4790:src/xeq.c     **** 				set_was_complex();
 31508              		.loc 1 4790 5 is_stmt 1 view .LVU8438
 31509 0552 39A9     		add	r1, sp, #228
 31510 0554 30A8     		add	r0, sp, #192
 31511 0556 FFF7FEFF 		bl	setXY
 31512              	.LVL2422:
4791:src/xeq.c     **** 			}
 31513              		.loc 1 4791 5 view .LVU8439
 31514              	.LBB4519:
 31515              	.LBI4519:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 31516              		.loc 1 533 13 view .LVU8440
 31517              	.LBB4520:
 534:src/xeq.c     **** }
 31518              		.loc 1 534 2 view .LVU8441
 534:src/xeq.c     **** }
 31519              		.loc 1 534 20 is_stmt 0 view .LVU8442
 31520 055a 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 31521 055c 274B     		ldr	r3, .L2504+8
 31522 055e 0121     		movs	r1, #1
 31523 0560 61F38712 		bfi	r2, r1, #6, #2
ARM GAS  /tmp/ccQQPlfu.s 			page 800


 31524 0564 2275     		strb	r2, [r4, #20]
 31525 0566 1A68     		ldr	r2, [r3]
 535:src/xeq.c     **** 
 31526              		.loc 1 535 1 view .LVU8443
 31527 0568 0BE6     		b	.L2170
 31528              	.LVL2423:
 31529              	.L2197:
 535:src/xeq.c     **** 
 31530              		.loc 1 535 1 view .LVU8444
 31531              	.LBE4520:
 31532              	.LBE4519:
 31533              	.LBE4518:
 31534              	.LBE4517:
 31535              	.LBE4516:
5364:src/xeq.c     **** 		default:	illegal(op);
 31536              		.loc 1 5364 19 is_stmt 1 view .LVU8445
 31537              	.LBB4559:
 31538              	.LBI4516:
4771:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
 31539              		.loc 1 4771 13 view .LVU8446
 31540              	.LBB4552:
4772:src/xeq.c     **** 	unsigned int f;
 31541              		.loc 1 4772 2 view .LVU8447
4773:src/xeq.c     **** 
 31542              		.loc 1 4773 2 view .LVU8448
4775:src/xeq.c     **** 
 31543              		.loc 1 4775 2 view .LVU8449
 31544              	.LBB4525:
 31545              	.LBI4525:
1326:src/xeq.c     **** 	process_cmdline();
 31546              		.loc 1 1326 6 view .LVU8450
 31547              	.LBE4525:
 31548              	.LBE4552:
 31549              	.LBE4559:
1327:src/xeq.c     **** 	set_lift();
 31550              		.loc 1 1327 2 view .LVU8451
 31551              	.LBB4560:
 31552              	.LBB4553:
 31553              	.LBB4536:
 31554              	.LBB4526:
 31555              	.LBI4526:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 31556              		.loc 1 1220 6 view .LVU8452
 31557              	.LBB4527:
1221:src/xeq.c     **** 
 31558              		.loc 1 1221 2 view .LVU8453
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31559              		.loc 1 1223 2 view .LVU8454
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31560              		.loc 1 1223 5 is_stmt 0 view .LVU8455
 31561 056a 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31562 056c 002B     		cmp	r3, #0
 31563 056e 40F07A81 		bne	.L2486
 31564              	.L2287:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31565              		.loc 1 1223 5 view .LVU8456
 31566              	.LBE4527:
ARM GAS  /tmp/ccQQPlfu.s 			page 801


 31567              	.LBE4526:
 31568              	.LBE4536:
 31569              	.LBE4553:
 31570              	.LBE4560:
1328:src/xeq.c     **** }
 31571              		.loc 1 1328 2 is_stmt 1 view .LVU8457
 31572              	.LBB4561:
 31573              	.LBB4554:
 31574              	.LBB4537:
 31575              	.LBB4529:
 31576              	.LBI4529:
 761:src/xeq.c     ****     State2.state_lift = 1;
 31577              		.loc 1 761 6 view .LVU8458
 31578              	.LBB4530:
 762:src/xeq.c     **** }
 31579              		.loc 1 762 5 view .LVU8459
 762:src/xeq.c     **** }
 31580              		.loc 1 762 23 is_stmt 0 view .LVU8460
 31581 0572 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31582              	.LBE4530:
 31583              	.LBE4529:
 31584              	.LBE4537:
4777:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 31585              		.loc 1 4777 4 view .LVU8461
 31586 0574 EDB2     		uxtb	r5, r5
 31587              	.LVL2424:
 31588              	.LBB4538:
 31589              	.LBB4533:
 31590              	.LBB4531:
 762:src/xeq.c     **** }
 31591              		.loc 1 762 23 view .LVU8462
 31592 0576 43F04003 		orr	r3, r3, #64
 31593              	.LBE4531:
 31594              	.LBE4533:
 31595              	.LBE4538:
4778:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31596              		.loc 1 4778 5 view .LVU8463
 31597 057a 342D     		cmp	r5, #52
 31598              	.LBB4539:
 31599              	.LBB4534:
 31600              	.LBB4532:
 762:src/xeq.c     **** }
 31601              		.loc 1 762 23 view .LVU8464
 31602 057c E375     		strb	r3, [r4, #23]
 31603              	.LBE4532:
 31604              	.LBE4534:
 31605              	.LBE4539:
4777:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 31606              		.loc 1 4777 2 is_stmt 1 view .LVU8465
 31607              	.LVL2425:
4778:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31608              		.loc 1 4778 2 view .LVU8466
4778:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31609              		.loc 1 4778 5 is_stmt 0 view .LVU8467
 31610 057e 31D8     		bhi	.L2288
4779:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31611              		.loc 1 4779 3 is_stmt 1 view .LVU8468
ARM GAS  /tmp/ccQQPlfu.s 			page 802


4779:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31612              		.loc 1 4779 9 is_stmt 0 view .LVU8469
 31613 0580 214B     		ldr	r3, .L2504+20
 31614 0582 05EB4505 		add	r5, r5, r5, lsl #1
 31615              	.LVL2426:
4779:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31616              		.loc 1 4779 9 view .LVU8470
 31617 0586 03EBC505 		add	r5, r3, r5, lsl #3
 31618 058a 6D68     		ldr	r5, [r5, #4]
4779:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31619              		.loc 1 4779 6 view .LVU8471
 31620 058c 002D     		cmp	r5, #0
 31621 058e 00F08382 		beq	.L2289
 31622              	.LBB4540:
4780:src/xeq.c     **** 			if (dispatch_xrom(fp))
 31623              		.loc 1 4780 4 is_stmt 1 view .LVU8472
 31624              	.LVL2427:
4781:src/xeq.c     **** 				return;
 31625              		.loc 1 4781 4 view .LVU8473
4781:src/xeq.c     **** 				return;
 31626              		.loc 1 4781 8 is_stmt 0 view .LVU8474
 31627 0592 2846     		mov	r0, r5
 31628 0594 FFF7FEFF 		bl	dispatch_xrom
 31629              	.LVL2428:
4781:src/xeq.c     **** 				return;
 31630              		.loc 1 4781 7 view .LVU8475
 31631 0598 0028     		cmp	r0, #0
 31632 059a 77D1     		bne	.L2167
4784:src/xeq.c     **** 
 31633              		.loc 1 4784 5 is_stmt 1 view .LVU8476
 31634              	.LVL2429:
 31635              	.LBB4521:
 31636              	.LBI4521:
 873:src/xeq.c     **** 	getXYZ(x, y, z);
 31637              		.loc 1 873 6 view .LVU8477
 31638              	.LBB4522:
 874:src/xeq.c     **** 	getT(t);
 31639              		.loc 1 874 2 view .LVU8478
 31640 059c 15AB     		add	r3, sp, #84
 31641              	.LVL2430:
 874:src/xeq.c     **** 	getT(t);
 31642              		.loc 1 874 2 is_stmt 0 view .LVU8479
 31643 059e 0DF1300A 		add	r10, sp, #48
 31644              	.LVL2431:
 874:src/xeq.c     **** 	getT(t);
 31645              		.loc 1 874 2 view .LVU8480
 31646 05a2 1EAA     		add	r2, sp, #120
 31647              	.LVL2432:
 874:src/xeq.c     **** 	getT(t);
 31648              		.loc 1 874 2 view .LVU8481
 31649 05a4 1946     		mov	r1, r3
 31650 05a6 5046     		mov	r0, r10
 31651 05a8 FFF7FEFF 		bl	getXYZ
 31652              	.LVL2433:
 875:src/xeq.c     **** }
 31653              		.loc 1 875 2 is_stmt 1 view .LVU8482
 31654              	.LBB4523:
ARM GAS  /tmp/ccQQPlfu.s 			page 803


 31655              	.LBI4523:
 844:src/xeq.c     **** 	getRegister(t, regT_idx);
 31656              		.loc 1 844 13 view .LVU8483
 31657              	.LBB4524:
 845:src/xeq.c     **** }
 31658              		.loc 1 845 2 view .LVU8484
 31659 05ac 27A8     		add	r0, sp, #156
 31660              	.LVL2434:
 845:src/xeq.c     **** }
 31661              		.loc 1 845 2 is_stmt 0 view .LVU8485
 31662 05ae 6721     		movs	r1, #103
 31663 05b0 FFF7FEFF 		bl	getRegister
 31664              	.LVL2435:
 845:src/xeq.c     **** }
 31665              		.loc 1 845 2 view .LVU8486
 31666              	.LBE4524:
 31667              	.LBE4523:
 31668              	.LBE4522:
 31669              	.LBE4521:
4786:src/xeq.c     **** 
 31670              		.loc 1 4786 5 is_stmt 1 view .LVU8487
 31671 05b4 15AB     		add	r3, sp, #84
 31672 05b6 1EAA     		add	r2, sp, #120
 31673 05b8 39A9     		add	r1, sp, #228
 31674 05ba 30A8     		add	r0, sp, #192
 31675 05bc CDE900A3 		strd	r10, r3, [sp]
 31676 05c0 27AB     		add	r3, sp, #156
 31677 05c2 A847     		blx	r5
 31678              	.LVL2436:
4788:src/xeq.c     **** 				lower2();
 31679              		.loc 1 4788 5 view .LVU8488
 31680 05c4 FFF7FEFF 		bl	setlastXY
 31681              	.LVL2437:
4789:src/xeq.c     **** 				setXY(&xr, &yr);
 31682              		.loc 1 4789 5 view .LVU8489
 31683 05c8 FFF7FEFF 		bl	lower2
 31684              	.LVL2438:
 31685 05cc C1E7     		b	.L2448
 31686              	.LVL2439:
 31687              	.L2475:
4789:src/xeq.c     **** 				setXY(&xr, &yr);
 31688              		.loc 1 4789 5 is_stmt 0 view .LVU8490
 31689              	.LBE4540:
 31690              	.LBE4554:
 31691              	.LBE4561:
 31692              	.LBB4562:
 31693              	.LBB4182:
5276:src/xeq.c     **** 		return;
 31694              		.loc 1 5276 3 is_stmt 1 view .LVU8491
5276:src/xeq.c     **** 		return;
 31695              		.loc 1 5276 3 view .LVU8492
 31696              	.LBB4176:
 31697              	.LBI4171:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31698              		.loc 1 540 5 view .LVU8493
 31699              	.LBB4175:
 541:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccQQPlfu.s 			page 804


 31700              		.loc 1 541 2 view .LVU8494
 541:src/xeq.c     **** 		Error = e;
 31701              		.loc 1 541 12 is_stmt 0 view .LVU8495
 31702 05ce 0B4B     		ldr	r3, .L2504+8
 31703 05d0 DFF838A0 		ldr	r10, .L2504+24
 31704              	.LVL2440:
 541:src/xeq.c     **** 		Error = e;
 31705              		.loc 1 541 12 view .LVU8496
 31706 05d4 1868     		ldr	r0, [r3]
 541:src/xeq.c     **** 		Error = e;
 31707              		.loc 1 541 5 view .LVU8497
 31708 05d6 0028     		cmp	r0, #0
 31709 05d8 7FF4F7AD 		bne	.L2306
 31710 05dc F3E5     		b	.L2175
 31711              	.LVL2441:
 31712              	.L2474:
 541:src/xeq.c     **** 		Error = e;
 31713              		.loc 1 541 5 view .LVU8498
 31714              	.LBE4175:
 31715              	.LBE4176:
 31716              	.LBB4177:
 31717              	.LBB4159:
 31718              	.LBB4153:
 31719 05de FFF7FEFF 		bl	process_cmdline.part.0
 31720              	.LVL2442:
 31721 05e2 A8E5     		b	.L2163
 31722              	.LVL2443:
 31723              	.L2288:
 541:src/xeq.c     **** 		Error = e;
 31724              		.loc 1 541 5 view .LVU8499
 31725              	.LBE4153:
 31726              	.LBE4159:
 31727              	.LBE4177:
 31728              	.LBE4182:
 31729              	.LBE4562:
 31730              	.LBB4563:
 31731              	.LBB4555:
4796:src/xeq.c     **** }
 31732              		.loc 1 4796 3 is_stmt 1 view .LVU8500
4796:src/xeq.c     **** }
 31733              		.loc 1 4796 3 view .LVU8501
 31734              	.LBB4541:
 31735              	.LBI4541:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31736              		.loc 1 540 5 view .LVU8502
 31737              	.LBB4542:
 541:src/xeq.c     **** 		Error = e;
 31738              		.loc 1 541 2 view .LVU8503
 541:src/xeq.c     **** 		Error = e;
 31739              		.loc 1 541 12 is_stmt 0 view .LVU8504
 31740 05e4 054B     		ldr	r3, .L2504+8
 31741 05e6 1A68     		ldr	r2, [r3]
 541:src/xeq.c     **** 		Error = e;
 31742              		.loc 1 541 5 view .LVU8505
 31743 05e8 002A     		cmp	r2, #0
 31744 05ea 7FF497AD 		bne	.L2181
 31745              	.LVL2444:
ARM GAS  /tmp/ccQQPlfu.s 			page 805


 31746              	.LBB4543:
 31747              	.LBI4543:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31748              		.loc 1 540 5 is_stmt 1 view .LVU8506
 31749              	.LBB4544:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 31750              		.loc 1 542 3 view .LVU8507
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 31751              		.loc 1 542 9 is_stmt 0 view .LVU8508
 31752 05ee 0322     		movs	r2, #3
 31753 05f0 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 31754              		.loc 1 543 3 is_stmt 1 view .LVU8509
 31755              	.LVL2445:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 31756              		.loc 1 543 3 is_stmt 0 view .LVU8510
 31757              	.LBE4544:
 31758              	.LBE4543:
 31759              	.LBE4542:
 31760              	.LBE4541:
4796:src/xeq.c     **** }
 31761              		.loc 1 4796 3 is_stmt 1 view .LVU8511
 31762              	.LBE4555:
 31763              	.LBE4563:
5365:src/xeq.c     **** 		}
 31764              		.loc 1 5365 12 view .LVU8512
5375:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31765              		.loc 1 5375 2 view .LVU8513
 31766 05f2 93E5     		b	.L2181
 31767              	.L2505:
 31768              		.align	2
 31769              	.L2504:
 31770 05f4 00000000 		.word	argcmds
 31771 05f8 00000000 		.word	niladics
 31772 05fc 00000000 		.word	Error
 31773 0600 00000000 		.word	monfuncs
 31774 0604 00000000 		.word	trifuncs
 31775 0608 00000000 		.word	dyfuncs
 31776 060c 00000000 		.word	Running
 31777              	.LVL2446:
 31778              	.L2179:
 31779              	.LBB4564:
 31780              	.LBB4144:
 31781              	.LBB4120:
5203:src/xeq.c     **** 			if ((regval >> 32) != 0)
 31782              		.loc 1 5203 4 view .LVU8514
5203:src/xeq.c     **** 			if ((regval >> 32) != 0)
 31783              		.loc 1 5203 13 is_stmt 0 view .LVU8515
 31784 0610 0846     		mov	r0, r1
 31785 0612 39A9     		add	r1, sp, #228
 31786 0614 0992     		str	r2, [sp, #36]
 31787 0616 FFF7FEFF 		bl	get_reg_n_int_sgn
 31788              	.LVL2447:
5204:src/xeq.c     **** 				goto range;
 31789              		.loc 1 5204 16 view .LVU8516
 31790 061a 0023     		movs	r3, #0
 31791 061c 0691     		str	r1, [sp, #24]
ARM GAS  /tmp/ccQQPlfu.s 			page 806


 31792 061e 0793     		str	r3, [sp, #28]
 31793              	.LVL2448:
5204:src/xeq.c     **** 				goto range;
 31794              		.loc 1 5204 4 is_stmt 1 view .LVU8517
5204:src/xeq.c     **** 				goto range;
 31795              		.loc 1 5204 7 is_stmt 0 view .LVU8518
 31796 0620 DDE90623 		ldrd	r2, [sp, #24]
 31797 0624 1343     		orrs	r3, r2, r3
 31798 0626 16D1     		bne	.L2183
5206:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 31799              		.loc 1 5206 4 is_stmt 1 view .LVU8519
5207:src/xeq.c     **** 				// negative arguments address local registers or flags
 31800              		.loc 1 5207 7 is_stmt 0 view .LVU8520
 31801 0628 15F0080F 		tst	r5, #8
 31802 062c 099A     		ldr	r2, [sp, #36]
 31803 062e AE4B     		ldr	r3, .L2506
5206:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 31804              		.loc 1 5206 8 view .LVU8521
 31805 0630 0146     		mov	r1, r0
 31806              	.LVL2449:
5207:src/xeq.c     **** 				// negative arguments address local registers or flags
 31807              		.loc 1 5207 4 is_stmt 1 view .LVU8522
5207:src/xeq.c     **** 				// negative arguments address local registers or flags
 31808              		.loc 1 5207 7 is_stmt 0 view .LVU8523
 31809 0632 02D0     		beq	.L2177
5207:src/xeq.c     **** 				// negative arguments address local registers or flags
 31810              		.loc 1 5207 27 view .LVU8524
 31811 0634 3998     		ldr	r0, [sp, #228]
 31812              	.LVL2450:
5207:src/xeq.c     **** 				// negative arguments address local registers or flags
 31813              		.loc 1 5207 27 view .LVU8525
 31814 0636 00B1     		cbz	r0, .L2177
5209:src/xeq.c     **** 			}
 31815              		.loc 1 5209 5 is_stmt 1 view .LVU8526
5209:src/xeq.c     **** 			}
 31816              		.loc 1 5209 9 is_stmt 0 view .LVU8527
 31817 0638 7031     		adds	r1, r1, #112
 31818              	.LVL2451:
 31819              	.L2177:
5209:src/xeq.c     **** 			}
 31820              		.loc 1 5209 9 view .LVU8528
 31821              	.LBE4120:
5217:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31822              		.loc 1 5217 2 is_stmt 1 view .LVU8529
5217:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31823              		.loc 1 5217 18 is_stmt 0 view .LVU8530
 31824 063a 9818     		adds	r0, r3, r2
 31825 063c 4079     		ldrb	r0, [r0, #5]	@ zero_extendqisi2
5217:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31826              		.loc 1 5217 5 view .LVU8531
 31827 063e 8507     		lsls	r5, r0, #30
 31828 0640 51D5     		bpl	.L2185
5219:src/xeq.c     **** 	}
 31829              		.loc 1 5219 9 view .LVU8532
 31830 0642 5046     		mov	r0, r10
 31831 0644 CDE90512 		strd	r1, r2, [sp, #20]
 31832              	.LVL2452:
ARM GAS  /tmp/ccQQPlfu.s 			page 807


5219:src/xeq.c     **** 	}
 31833              		.loc 1 5219 9 view .LVU8533
 31834 0648 FFF7FEFF 		bl	get_reg_limit
 31835              	.LVL2453:
5219:src/xeq.c     **** 	}
 31836              		.loc 1 5219 9 view .LVU8534
 31837 064c DDE90512 		ldrd	r1, r2, [sp, #20]
 31838 0650 A54B     		ldr	r3, .L2506
 31839              	.LVL2454:
 31840              	.L2186:
5227:src/xeq.c     **** 		// Argument is too large
 31841              		.loc 1 5227 2 is_stmt 1 view .LVU8535
5227:src/xeq.c     **** 		// Argument is too large
 31842              		.loc 1 5227 5 is_stmt 0 view .LVU8536
 31843 0652 8142     		cmp	r1, r0
 31844 0654 07D9     		bls	.L2188
 31845              	.LVL2455:
 31846              	.L2183:
5229:src/xeq.c     **** 	}
 31847              		.loc 1 5229 9 is_stmt 1 view .LVU8537
 31848              	.LBB4121:
 31849              	.LBI4121:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31850              		.loc 1 540 5 view .LVU8538
 31851              	.LBB4122:
 541:src/xeq.c     **** 		Error = e;
 31852              		.loc 1 541 2 view .LVU8539
 541:src/xeq.c     **** 		Error = e;
 31853              		.loc 1 541 12 is_stmt 0 view .LVU8540
 31854 0656 A54B     		ldr	r3, .L2506+4
 31855 0658 1868     		ldr	r0, [r3]
 541:src/xeq.c     **** 		Error = e;
 31856              		.loc 1 541 5 view .LVU8541
 31857 065a 0028     		cmp	r0, #0
 31858 065c 00F0BE80 		beq	.L2189
 31859              	.LVL2456:
 31860              	.L2439:
 541:src/xeq.c     **** 		Error = e;
 31861              		.loc 1 541 5 view .LVU8542
 31862 0660 DFF8A8A2 		ldr	r10, .L2506+36
 31863 0664 B1E5     		b	.L2306
 31864              	.LVL2457:
 31865              	.L2188:
 541:src/xeq.c     **** 		Error = e;
 31866              		.loc 1 541 5 view .LVU8543
 31867              	.LBE4122:
 31868              	.LBE4121:
5231:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31869              		.loc 1 5231 7 is_stmt 1 view .LVU8544
5231:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31870              		.loc 1 5231 23 is_stmt 0 view .LVU8545
 31871 0666 1344     		add	r3, r3, r2
 31872 0668 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
5231:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31873              		.loc 1 5231 10 view .LVU8546
 31874 066a DD06     		lsls	r5, r3, #27
 31875 066c 00F1BB80 		bmi	.L2487
ARM GAS  /tmp/ccQQPlfu.s 			page 808


 31876              	.LVL2458:
 31877              	.L2190:
 31878              	.LBB4126:
5237:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 31879              		.loc 1 5237 3 is_stmt 1 view .LVU8547
5238:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 31880              		.loc 1 5238 3 view .LVU8548
 31881              	.LBB4127:
 31882              	.LBI4127:
4487:src/xeq.c     **** {
 31883              		.loc 1 4487 24 view .LVU8549
 31884              	.LBB4128:
4489:src/xeq.c     **** 	if (xp < xrom)
 31885              		.loc 1 4489 2 view .LVU8550
4489:src/xeq.c     **** 	if (xp < xrom)
 31886              		.loc 1 4489 59 is_stmt 0 view .LVU8551
 31887 0670 089A     		ldr	r2, [sp, #32]
4490:src/xeq.c     **** 		return NULL;
 31888              		.loc 1 4490 5 view .LVU8552
 31889 0672 9F4B     		ldr	r3, .L2506+8
4489:src/xeq.c     **** 	if (xp < xrom)
 31890              		.loc 1 4489 59 view .LVU8553
 31891 0674 22F00102 		bic	r2, r2, #1
 31892              	.LVL2459:
4490:src/xeq.c     **** 		return NULL;
 31893              		.loc 1 4490 2 is_stmt 1 view .LVU8554
4490:src/xeq.c     **** 		return NULL;
 31894              		.loc 1 4490 5 is_stmt 0 view .LVU8555
 31895 0678 9A42     		cmp	r2, r3
 31896 067a 3FD2     		bcs	.L2488
 31897              	.LVL2460:
 31898              	.L2192:
4490:src/xeq.c     **** 		return NULL;
 31899              		.loc 1 4490 5 view .LVU8556
 31900              	.LBE4128:
 31901              	.LBE4127:
5260:src/xeq.c     **** 		}
 31902              		.loc 1 5260 4 is_stmt 1 view .LVU8557
 31903 067c 0846     		mov	r0, r1
 31904 067e 089B     		ldr	r3, [sp, #32]
 31905 0680 5146     		mov	r1, r10
 31906              	.LVL2461:
5260:src/xeq.c     **** 		}
 31907              		.loc 1 5260 4 is_stmt 0 view .LVU8558
 31908 0682 9847     		blx	r3
 31909              	.LVL2462:
5262:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31910              		.loc 1 5262 3 is_stmt 1 view .LVU8559
5262:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31911              		.loc 1 5262 6 is_stmt 0 view .LVU8560
 31912 0684 BAF1840F 		cmp	r10, #132
 31913 0688 7FF475AD 		bne	.L2444
 31914              	.LVL2463:
 31915              	.L2167:
5262:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31916              		.loc 1 5262 6 view .LVU8561
 31917 068c 974B     		ldr	r3, .L2506+4
ARM GAS  /tmp/ccQQPlfu.s 			page 809


 31918              	.L2445:
 31919 068e 1A68     		ldr	r2, [r3]
 31920 0690 77E5     		b	.L2170
 31921              	.L2478:
5262:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31922              		.loc 1 5262 6 view .LVU8562
 31923 0692 0393     		str	r3, [sp, #12]
 31924              	.LVL2464:
5262:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31925              		.loc 1 5262 6 view .LVU8563
 31926              	.LBE4126:
 31927              	.LBE4144:
 31928              	.LBE4564:
 31929              	.LBB4565:
 31930              	.LBB4332:
 31931              	.LBB4324:
 31932 0694 FFF7FEFF 		bl	process_cmdline.part.0
 31933              	.LVL2465:
 31934 0698 039B     		ldr	r3, [sp, #12]
 31935 069a BAE5     		b	.L2293
 31936              	.L2479:
 31937              	.LBE4324:
 31938              	.LBE4332:
 31939              	.LBE4565:
5394:src/xeq.c     **** 					// Restore the global return stack
 31940              		.loc 1 5394 5 is_stmt 1 view .LVU8564
5394:src/xeq.c     **** 					// Restore the global return stack
 31941              		.loc 1 5394 9 is_stmt 0 view .LVU8565
 31942 069c 954D     		ldr	r5, .L2506+12
5394:src/xeq.c     **** 					// Restore the global return stack
 31943              		.loc 1 5394 8 view .LVU8566
 31944 069e 95F90110 		ldrsb	r1, [r5, #1]
5394:src/xeq.c     **** 					// Restore the global return stack
 31945              		.loc 1 5394 9 view .LVU8567
 31946 06a2 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
5394:src/xeq.c     **** 					// Restore the global return stack
 31947              		.loc 1 5394 8 view .LVU8568
 31948 06a4 8142     		cmp	r1, r0
 31949 06a6 BFF614AE 		bge	.L2296
5396:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31950              		.loc 1 5396 6 is_stmt 1 view .LVU8569
5396:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31951              		.loc 1 5396 13 is_stmt 0 view .LVU8570
 31952 06aa 9349     		ldr	r1, .L2506+16
5397:src/xeq.c     **** 					// Restore private stack to normal stack
 31953              		.loc 1 5397 6 view .LVU8571
 31954 06ac D7F800C0 		ldr	ip, [r7]
5396:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31955              		.loc 1 5396 13 view .LVU8572
 31956 06b0 AE68     		ldr	r6, [r5, #8]
 31957 06b2 0E60     		str	r6, [r1]
5397:src/xeq.c     **** 					// Restore private stack to normal stack
 31958              		.loc 1 5397 6 is_stmt 1 view .LVU8573
5399:src/xeq.c     **** 						// Need space for double precision stack
 31959              		.loc 1 5399 9 is_stmt 0 view .LVU8574
 31960 06b4 12F00808 		ands	r8, r2, #8
5397:src/xeq.c     **** 					// Restore private stack to normal stack
ARM GAS  /tmp/ccQQPlfu.s 			page 810


 31961              		.loc 1 5397 16 view .LVU8575
 31962 06b8 A989     		ldrh	r1, [r5, #12]
 31963 06ba ACF8E217 		strh	r1, [ip, #2018]	@ movhi
5399:src/xeq.c     **** 						// Need space for double precision stack
 31964              		.loc 1 5399 6 is_stmt 1 view .LVU8576
5399:src/xeq.c     **** 						// Need space for double precision stack
 31965              		.loc 1 5399 9 is_stmt 0 view .LVU8577
 31966 06be 00F0F481 		beq	.L2297
5403:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31967              		.loc 1 5403 6 is_stmt 1 view .LVU8578
5403:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31968              		.loc 1 5403 20 is_stmt 0 view .LVU8579
 31969 06c2 60F3C712 		bfi	r2, r0, #7, #1
 31970 06c6 6A70     		strb	r2, [r5, #1]
5404:src/xeq.c     **** 						UState.mode_double = 1;
 31971              		.loc 1 5404 6 is_stmt 1 view .LVU8580
 31972              	.L2298:
5405:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 31973              		.loc 1 5405 7 view .LVU8581
5405:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 31974              		.loc 1 5405 26 is_stmt 0 view .LVU8582
 31975 06c8 3A68     		ldr	r2, [r7]
 31976 06ca 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 31977 06ce 43F04003 		orr	r3, r3, #64
 31978 06d2 82F8E937 		strb	r3, [r2, #2025]
5406:src/xeq.c     **** 					}
 31979              		.loc 1 5406 7 is_stmt 1 view .LVU8583
5406:src/xeq.c     **** 					}
 31980              		.loc 1 5406 13 is_stmt 0 view .LVU8584
 31981 06d6 6420     		movs	r0, #100
 31982 06d8 FFF7FEFF 		bl	get_reg_n
 31983              	.LVL2466:
5406:src/xeq.c     **** 					}
 31984              		.loc 1 5406 7 view .LVU8585
 31985 06dc 8749     		ldr	r1, .L2506+20
 31986 06de C022     		movs	r2, #192
 31987 06e0 FFF7FEFF 		bl	xcopy
 31988              	.LVL2467:
 31989 06e4 F5E5     		b	.L2296
 31990              	.LVL2468:
 31991              	.L2185:
 31992              	.LBB4566:
 31993              	.LBB4145:
5221:src/xeq.c     **** 		if (LocalRegs == 0)
 31994              		.loc 1 5221 7 is_stmt 1 view .LVU8586
5221:src/xeq.c     **** 		if (LocalRegs == 0)
 31995              		.loc 1 5221 10 is_stmt 0 view .LVU8587
 31996 06e6 4006     		lsls	r0, r0, #25
 31997 06e8 40F18F80 		bpl	.L2489
5222:src/xeq.c     **** 			lim = NUMFLG - 1;
 31998              		.loc 1 5222 3 is_stmt 1 view .LVU8588
5222:src/xeq.c     **** 			lim = NUMFLG - 1;
 31999              		.loc 1 5222 7 is_stmt 0 view .LVU8589
 32000 06ec 3868     		ldr	r0, [r7]
5222:src/xeq.c     **** 			lim = NUMFLG - 1;
 32001              		.loc 1 5222 6 view .LVU8590
 32002 06ee B0F9DE07 		ldrsh	r0, [r0, #2014]
ARM GAS  /tmp/ccQQPlfu.s 			page 811


5225:src/xeq.c     **** 	}
 32003              		.loc 1 5225 8 view .LVU8591
 32004 06f2 0028     		cmp	r0, #0
 32005 06f4 0CBF     		ite	eq
 32006 06f6 6F20     		moveq	r0, #111
 32007 06f8 7F20     		movne	r0, #127
 32008 06fa AAE7     		b	.L2186
 32009              	.LVL2469:
 32010              	.L2488:
 32011              	.LBB4137:
 32012              	.LBB4130:
 32013              	.LBB4129:
4494:src/xeq.c     **** 		return NULL;
 32014              		.loc 1 4494 2 is_stmt 1 view .LVU8592
4494:src/xeq.c     **** 		return NULL;
 32015              		.loc 1 4494 17 is_stmt 0 view .LVU8593
 32016 06fc 8048     		ldr	r0, .L2506+24
 32017 06fe 0088     		ldrh	r0, [r0]
 32018 0700 03EB4003 		add	r3, r3, r0, lsl #1
4494:src/xeq.c     **** 		return NULL;
 32019              		.loc 1 4494 5 view .LVU8594
 32020 0704 9A42     		cmp	r2, r3
 32021 0706 B9D2     		bcs	.L2192
 32022              	.LVL2470:
4494:src/xeq.c     **** 		return NULL;
 32023              		.loc 1 4494 5 view .LVU8595
 32024              	.LBE4129:
 32025              	.LBE4130:
5238:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 32026              		.loc 1 5238 6 view .LVU8596
 32027 0708 002A     		cmp	r2, #0
 32028 070a B7D0     		beq	.L2192
5250:src/xeq.c     **** 			if (XromUserPc == 0)
 32029              		.loc 1 5250 4 is_stmt 1 view .LVU8597
 32030              	.LVL2471:
 32031              	.LBB4131:
 32032              	.LBI4131:
2208:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 32033              		.loc 1 2208 14 view .LVU8598
 32034              	.LBB4132:
2209:src/xeq.c     **** }
 32035              		.loc 1 2209 2 view .LVU8599
 32036              	.LBE4132:
 32037              	.LBE4131:
5250:src/xeq.c     **** 			if (XromUserPc == 0)
 32038              		.loc 1 5250 33 is_stmt 0 view .LVU8600
 32039 070c 3B68     		ldr	r3, [r7]
 32040              	.LBB4134:
 32041              	.LBB4133:
2209:src/xeq.c     **** }
 32042              		.loc 1 2209 9 view .LVU8601
 32043 070e 41F4C441 		orr	r1, r1, #25088
 32044              	.LVL2472:
2209:src/xeq.c     **** }
 32045              		.loc 1 2209 9 view .LVU8602
 32046 0712 B3F8E007 		ldrh	r0, [r3, #2016]
 32047 0716 0322     		movs	r2, #3
ARM GAS  /tmp/ccQQPlfu.s 			page 812


 32048 0718 FFF7FEFF 		bl	find_opcode_from
 32049              	.LVL2473:
2209:src/xeq.c     **** }
 32050              		.loc 1 2209 9 view .LVU8603
 32051              	.LBE4133:
 32052              	.LBE4134:
5250:src/xeq.c     **** 			if (XromUserPc == 0)
 32053              		.loc 1 5250 15 view .LVU8604
 32054 071c 794B     		ldr	r3, .L2506+28
 32055              	.LVL2474:
5250:src/xeq.c     **** 			if (XromUserPc == 0)
 32056              		.loc 1 5250 15 view .LVU8605
 32057 071e 1860     		str	r0, [r3]
5251:src/xeq.c     **** 				return;
 32058              		.loc 1 5251 4 is_stmt 1 view .LVU8606
5251:src/xeq.c     **** 				return;
 32059              		.loc 1 5251 7 is_stmt 0 view .LVU8607
 32060 0720 0028     		cmp	r0, #0
 32061 0722 B3D0     		beq	.L2167
5253:src/xeq.c     **** 				clrretstk();
 32062              		.loc 1 5253 4 is_stmt 1 view .LVU8608
5253:src/xeq.c     **** 				clrretstk();
 32063              		.loc 1 5253 8 is_stmt 0 view .LVU8609
 32064 0724 DFF8E4A1 		ldr	r10, .L2506+36
 32065              	.LVL2475:
5253:src/xeq.c     **** 				clrretstk();
 32066              		.loc 1 5253 7 view .LVU8610
 32067 0728 DAF80030 		ldr	r3, [r10]
 32068 072c 23B9     		cbnz	r3, .L2194
5254:src/xeq.c     **** #endif
 32069              		.loc 1 5254 5 is_stmt 1 view .LVU8611
 32070              	.LBB4135:
 32071              	.LBI4135:
1600:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 32072              		.loc 1 1600 6 view .LVU8612
 32073              	.LBB4136:
1601:src/xeq.c     **** }
 32074              		.loc 1 1601 2 view .LVU8613
1601:src/xeq.c     **** }
 32075              		.loc 1 1601 14 is_stmt 0 view .LVU8614
 32076 072e 3A68     		ldr	r2, [r7]
1601:src/xeq.c     **** }
 32077              		.loc 1 1601 24 view .LVU8615
 32078 0730 A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
1601:src/xeq.c     **** }
 32079              		.loc 1 1601 12 view .LVU8616
 32080 0734 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 32081              	.L2194:
 32082              	.LBE4136:
 32083              	.LBE4135:
5256:src/xeq.c     **** 			return;
 32084              		.loc 1 5256 4 is_stmt 1 view .LVU8617
 32085 0738 6C4B     		ldr	r3, .L2506+4
 32086 073a 0898     		ldr	r0, [sp, #32]
 32087 073c 0593     		str	r3, [sp, #20]
 32088 073e FFF7FEFF 		bl	dispatch_xrom
 32089              	.LVL2476:
ARM GAS  /tmp/ccQQPlfu.s 			page 813


5257:src/xeq.c     **** 		}
 32090              		.loc 1 5257 4 view .LVU8618
 32091 0742 059B     		ldr	r3, [sp, #20]
 32092 0744 1A68     		ldr	r2, [r3]
 32093 0746 1CE5     		b	.L2170
 32094              	.LVL2477:
 32095              	.L2178:
5257:src/xeq.c     **** 		}
 32096              		.loc 1 5257 4 is_stmt 0 view .LVU8619
 32097              	.LBE4137:
5214:src/xeq.c     **** 		}
 32098              		.loc 1 5214 4 is_stmt 1 view .LVU8620
5214:src/xeq.c     **** 		}
 32099              		.loc 1 5214 8 is_stmt 0 view .LVU8621
 32100 0748 41F08001 		orr	r1, r1, #128
 32101              	.LVL2478:
5214:src/xeq.c     **** 		}
 32102              		.loc 1 5214 8 view .LVU8622
 32103 074c 75E7     		b	.L2177
 32104              	.LVL2479:
 32105              	.L2477:
5214:src/xeq.c     **** 		}
 32106              		.loc 1 5214 8 view .LVU8623
 32107              	.LBE4145:
 32108              	.LBE4566:
 32109              	.LBB4567:
 32110              	.LBB4308:
4735:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32111              		.loc 1 4735 3 is_stmt 1 view .LVU8624
4735:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32112              		.loc 1 4735 7 is_stmt 0 view .LVU8625
 32113 074e 3B68     		ldr	r3, [r7]
 32114 0750 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4735:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32115              		.loc 1 4735 6 view .LVU8626
 32116 0754 DB07     		lsls	r3, r3, #31
 32117 0756 40F1FF81 		bpl	.L2268
4736:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32118              		.loc 1 4736 4 is_stmt 1 view .LVU8627
4736:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32119              		.loc 1 4736 10 is_stmt 0 view .LVU8628
 32120 075a 6B4B     		ldr	r3, .L2506+32
 32121 075c 05EB4505 		add	r5, r5, r5, lsl #1
 32122              	.LVL2480:
4736:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32123              		.loc 1 4736 10 view .LVU8629
 32124 0760 03EBC505 		add	r5, r3, r5, lsl #3
 32125 0764 AD68     		ldr	r5, [r5, #8]
4736:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32126              		.loc 1 4736 7 view .LVU8630
 32127 0766 002D     		cmp	r5, #0
 32128 0768 00F08B81 		beq	.L2279
 32129              	.LBB4278:
4737:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32130              		.loc 1 4737 5 is_stmt 1 view .LVU8631
 32131              	.LVL2481:
4738:src/xeq.c     **** 					return;
ARM GAS  /tmp/ccQQPlfu.s 			page 814


 32132              		.loc 1 4738 5 view .LVU8632
4738:src/xeq.c     **** 					return;
 32133              		.loc 1 4738 9 is_stmt 0 view .LVU8633
 32134 076c 2846     		mov	r0, r5
 32135 076e FFF7FEFF 		bl	dispatch_xrom
 32136              	.LVL2482:
4738:src/xeq.c     **** 					return;
 32137              		.loc 1 4738 8 view .LVU8634
 32138 0772 0028     		cmp	r0, #0
 32139 0774 8AD1     		bne	.L2167
 32140              	.LBB4279:
4741:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 32141              		.loc 1 4741 6 is_stmt 1 view .LVU8635
 32142              	.LBB4280:
 32143              	.LBI4280:
1436:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 32144              		.loc 1 1436 15 view .LVU8636
 32145              	.LBB4281:
1437:src/xeq.c     **** }
 32146              		.loc 1 1437 2 view .LVU8637
1437:src/xeq.c     **** }
 32147              		.loc 1 1437 9 is_stmt 0 view .LVU8638
 32148 0776 6420     		movs	r0, #100
 32149 0778 FFF7FEFF 		bl	get_reg_n_int
 32150              	.LVL2483:
 32151 077c 0890     		str	r0, [sp, #32]
 32152              	.LBE4281:
 32153              	.LBE4280:
4742:src/xeq.c     **** 					x = fp(y, x);
 32154              		.loc 1 4742 24 view .LVU8639
 32155 077e 6520     		movs	r0, #101
 32156              	.LBB4283:
 32157              	.LBB4282:
1437:src/xeq.c     **** }
 32158              		.loc 1 1437 9 view .LVU8640
 32159 0780 0591     		str	r1, [sp, #20]
 32160              	.LVL2484:
1437:src/xeq.c     **** }
 32161              		.loc 1 1437 9 view .LVU8641
 32162              	.LBE4282:
 32163              	.LBE4283:
4742:src/xeq.c     **** 					x = fp(y, x);
 32164              		.loc 1 4742 6 is_stmt 1 view .LVU8642
4742:src/xeq.c     **** 					x = fp(y, x);
 32165              		.loc 1 4742 24 is_stmt 0 view .LVU8643
 32166 0782 FFF7FEFF 		bl	get_reg_n_int
 32167              	.LVL2485:
4743:src/xeq.c     **** 					setlastX();
 32168              		.loc 1 4743 6 is_stmt 1 view .LVU8644
4743:src/xeq.c     **** 					setlastX();
 32169              		.loc 1 4743 10 is_stmt 0 view .LVU8645
 32170 0786 059B     		ldr	r3, [sp, #20]
 32171 0788 089A     		ldr	r2, [sp, #32]
 32172 078a A847     		blx	r5
 32173              	.LVL2486:
4743:src/xeq.c     **** 					setlastX();
 32174              		.loc 1 4743 10 view .LVU8646
ARM GAS  /tmp/ccQQPlfu.s 			page 815


 32175 078c 574B     		ldr	r3, .L2506+4
 32176 078e 0593     		str	r3, [sp, #20]
 32177              	.LVL2487:
4743:src/xeq.c     **** 					setlastX();
 32178              		.loc 1 4743 10 view .LVU8647
 32179 0790 0546     		mov	r5, r0
 32180              	.LVL2488:
4743:src/xeq.c     **** 					setlastX();
 32181              		.loc 1 4743 10 view .LVU8648
 32182 0792 8A46     		mov	r10, r1
 32183              	.LVL2489:
4744:src/xeq.c     **** 					lower();
 32184              		.loc 1 4744 6 is_stmt 1 view .LVU8649
 32185              	.LBB4284:
 32186              	.LBI4284:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32187              		.loc 1 786 6 view .LVU8650
 32188              	.LBB4285:
 787:src/xeq.c     **** }
 32189              		.loc 1 787 2 view .LVU8651
 32190 0794 6C20     		movs	r0, #108
 32191              	.LVL2490:
 787:src/xeq.c     **** }
 32192              		.loc 1 787 2 is_stmt 0 view .LVU8652
 32193 0796 6421     		movs	r1, #100
 32194              	.LVL2491:
 787:src/xeq.c     **** }
 32195              		.loc 1 787 2 view .LVU8653
 32196 0798 FFF7FEFF 		bl	copyreg_n
 32197              	.LVL2492:
 32198              	.LBE4285:
 32199              	.LBE4284:
4745:src/xeq.c     **** 					setX_int(x);
 32200              		.loc 1 4745 6 is_stmt 1 view .LVU8654
 32201              	.L2449:
4745:src/xeq.c     **** 					setX_int(x);
 32202              		.loc 1 4745 6 is_stmt 0 view .LVU8655
 32203              	.LBE4279:
 32204              	.LBE4278:
 32205              	.LBE4308:
 32206              	.LBE4567:
 32207              	.LBB4568:
 32208              	.LBB4471:
 32209              	.LBB4455:
 32210              	.LBB4454:
4821:src/xeq.c     **** 					setX_int(x);
 32211              		.loc 1 4821 6 is_stmt 1 view .LVU8656
 32212 079c FFF7FEFF 		bl	lower
 32213              	.LVL2493:
 32214              	.L2451:
4822:src/xeq.c     **** 				}
 32215              		.loc 1 4822 6 view .LVU8657
 32216 07a0 2846     		mov	r0, r5
 32217 07a2 5146     		mov	r1, r10
 32218 07a4 FFF7FEFF 		bl	setX_int
 32219              	.LVL2494:
 32220 07a8 059B     		ldr	r3, [sp, #20]
ARM GAS  /tmp/ccQQPlfu.s 			page 816


 32221 07aa 1A68     		ldr	r2, [r3]
 32222              	.LBE4454:
 32223              	.LBE4455:
 32224 07ac E9E4     		b	.L2170
 32225              	.LVL2495:
 32226              	.L2245:
4822:src/xeq.c     **** 				}
 32227              		.loc 1 4822 6 is_stmt 0 view .LVU8658
 32228              	.LBE4471:
 32229              	.LBE4568:
 32230              	.LBB4569:
 32231              	.LBB4380:
4635:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32232              		.loc 1 4635 3 is_stmt 1 view .LVU8659
4635:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32233              		.loc 1 4635 3 view .LVU8660
 32234              	.LBB4366:
 32235              	.LBI4366:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32236              		.loc 1 540 5 view .LVU8661
 32237              	.LBB4367:
 541:src/xeq.c     **** 		Error = e;
 32238              		.loc 1 541 2 view .LVU8662
 541:src/xeq.c     **** 		Error = e;
 32239              		.loc 1 541 12 is_stmt 0 view .LVU8663
 32240 07ae 4F4B     		ldr	r3, .L2506+4
 541:src/xeq.c     **** 		Error = e;
 32241              		.loc 1 541 5 view .LVU8664
 32242 07b0 1A68     		ldr	r2, [r3]
 32243 07b2 0AB9     		cbnz	r2, .L2253
 32244              	.LVL2496:
 32245              	.LBB4368:
 32246              	.LBI4368:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32247              		.loc 1 540 5 is_stmt 1 view .LVU8665
 32248              	.LBB4369:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 32249              		.loc 1 542 3 view .LVU8666
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 32250              		.loc 1 542 9 is_stmt 0 view .LVU8667
 32251 07b4 0322     		movs	r2, #3
 32252 07b6 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 32253              		.loc 1 543 3 is_stmt 1 view .LVU8668
 32254              	.LVL2497:
 32255              	.L2253:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 32256              		.loc 1 543 3 is_stmt 0 view .LVU8669
 32257              	.LBE4369:
 32258              	.LBE4368:
 32259              	.LBE4367:
 32260              	.LBE4366:
4635:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32261              		.loc 1 4635 3 is_stmt 1 view .LVU8670
4637:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 32262              		.loc 1 4637 2 view .LVU8671
4637:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
ARM GAS  /tmp/ccQQPlfu.s 			page 817


 32263              		.loc 1 4637 6 is_stmt 0 view .LVU8672
 32264 07b8 3A68     		ldr	r2, [r7]
 32265 07ba 92F8AD17 		ldrb	r1, [r2, #1965]	@ zero_extendqisi2
4637:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 32266              		.loc 1 4637 5 view .LVU8673
 32267 07be 8907     		lsls	r1, r1, #30
 32268 07c0 06D4     		bmi	.L2446
 32269              	.L2307:
4640:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 32270              		.loc 1 4640 60 view .LVU8674
 32271 07c2 92F8AC27 		ldrb	r2, [r2, #1964]	@ zero_extendqisi2
4640:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 32272              		.loc 1 4640 56 view .LVU8675
 32273 07c6 02F04102 		and	r2, r2, #65
 32274 07ca 412A     		cmp	r2, #65
 32275 07cc 7FF45FAF 		bne	.L2445
 32276              	.L2446:
4641:src/xeq.c     **** 	}
 32277              		.loc 1 4641 4 is_stmt 1 view .LVU8676
 32278              	.LBB4370:
 32279              	.LBI4370:
 761:src/xeq.c     ****     State2.state_lift = 1;
 32280              		.loc 1 761 6 view .LVU8677
 32281              	.LBB4371:
 762:src/xeq.c     **** }
 32282              		.loc 1 762 5 view .LVU8678
 762:src/xeq.c     **** }
 32283              		.loc 1 762 23 is_stmt 0 view .LVU8679
 32284 07d0 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 32285 07d2 1A68     		ldr	r2, [r3]
 32286 07d4 41F04001 		orr	r1, r1, #64
 32287 07d8 E175     		strb	r1, [r4, #23]
 763:src/xeq.c     **** 
 32288              		.loc 1 763 1 view .LVU8680
 32289 07da D2E4     		b	.L2170
 32290              	.LVL2498:
 32291              	.L2189:
 763:src/xeq.c     **** 
 32292              		.loc 1 763 1 view .LVU8681
 32293              	.LBE4371:
 32294              	.LBE4370:
 32295              	.LBE4380:
 32296              	.LBE4569:
 32297              	.LBB4570:
 32298              	.LBB4146:
 32299              	.LBB4138:
 32300              	.LBB4125:
 32301              	.LBB4123:
 32302              	.LBI4123:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32303              		.loc 1 540 5 is_stmt 1 view .LVU8682
 32304              	.LBB4124:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 32305              		.loc 1 542 3 view .LVU8683
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 32306              		.loc 1 542 9 is_stmt 0 view .LVU8684
 32307 07dc 0820     		movs	r0, #8
ARM GAS  /tmp/ccQQPlfu.s 			page 818


 32308 07de DFF82CA1 		ldr	r10, .L2506+36
 32309              	.LVL2499:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 32310              		.loc 1 542 9 view .LVU8685
 32311 07e2 1860     		str	r0, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 32312              		.loc 1 543 3 is_stmt 1 view .LVU8686
 32313 07e4 F1E4     		b	.L2306
 32314              	.LVL2500:
 32315              	.L2487:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 32316              		.loc 1 543 3 is_stmt 0 view .LVU8687
 32317              	.LBE4124:
 32318              	.LBE4123:
 32319              	.LBE4125:
 32320              	.LBE4138:
5231:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32321              		.loc 1 5231 30 view .LVU8688
 32322 07e6 A1F16303 		sub	r3, r1, #99
 32323 07ea 0C2B     		cmp	r3, #12
 32324 07ec 3FF640AF 		bhi	.L2190
5231:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32325              		.loc 1 5231 69 view .LVU8689
 32326 07f0 C807     		lsls	r0, r1, #31
 32327              	.LVL2501:
5231:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32328              		.loc 1 5231 69 view .LVU8690
 32329 07f2 7FF53DAF 		bpl	.L2190
5233:src/xeq.c     **** 	}
 32330              		.loc 1 5233 3 is_stmt 1 view .LVU8691
 32331              	.LVL2502:
 32332              	.LBB4139:
 32333              	.LBI4139:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32334              		.loc 1 540 5 view .LVU8692
 32335              	.LBB4140:
 541:src/xeq.c     **** 		Error = e;
 32336              		.loc 1 541 2 view .LVU8693
 541:src/xeq.c     **** 		Error = e;
 32337              		.loc 1 541 12 is_stmt 0 view .LVU8694
 32338 07f6 3D4B     		ldr	r3, .L2506+4
 32339 07f8 1868     		ldr	r0, [r3]
 541:src/xeq.c     **** 		Error = e;
 32340              		.loc 1 541 5 view .LVU8695
 32341 07fa 0028     		cmp	r0, #0
 32342 07fc 7FF430AF 		bne	.L2439
 32343              	.LVL2503:
 32344              	.LBB4141:
 32345              	.LBI4141:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32346              		.loc 1 540 5 is_stmt 1 view .LVU8696
 32347              	.LBB4142:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 32348              		.loc 1 542 3 view .LVU8697
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 32349              		.loc 1 542 9 is_stmt 0 view .LVU8698
 32350 0800 0720     		movs	r0, #7
ARM GAS  /tmp/ccQQPlfu.s 			page 819


 32351 0802 DFF808A1 		ldr	r10, .L2506+36
 32352              	.LVL2504:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 32353              		.loc 1 542 9 view .LVU8699
 32354 0806 1860     		str	r0, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 32355              		.loc 1 543 3 is_stmt 1 view .LVU8700
 32356 0808 DFE4     		b	.L2306
 32357              	.LVL2505:
 32358              	.L2489:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 32359              		.loc 1 543 3 is_stmt 0 view .LVU8701
 32360              	.LBE4142:
 32361              	.LBE4141:
 32362              	.LBE4140:
 32363              	.LBE4139:
5177:src/xeq.c     **** 
 32364              		.loc 1 5177 15 view .LVU8702
 32365 080a 0598     		ldr	r0, [sp, #20]
 32366 080c 21E7     		b	.L2186
 32367              	.LVL2506:
 32368              	.L2476:
5177:src/xeq.c     **** 
 32369              		.loc 1 5177 15 view .LVU8703
 32370              	.LBE4146:
 32371              	.LBE4570:
 32372              	.LBB4571:
 32373              	.LBB4183:
 32374              	.LBB4178:
5284:src/xeq.c     **** 			if (XromUserPc != 0) {
 32375              		.loc 1 5284 4 is_stmt 1 view .LVU8704
5284:src/xeq.c     **** 			if (XromUserPc != 0) {
 32376              		.loc 1 5284 17 is_stmt 0 view .LVU8705
 32377 080e 2846     		mov	r0, r5
 32378 0810 0121     		movs	r1, #1
 32379 0812 0592     		str	r2, [sp, #20]
 32380 0814 FFF7FEFF 		bl	findmultilbl
 32381              	.LVL2507:
5284:src/xeq.c     **** 			if (XromUserPc != 0) {
 32382              		.loc 1 5284 15 view .LVU8706
 32383 0818 3A4B     		ldr	r3, .L2506+28
5285:src/xeq.c     **** 				if (! Running)
 32384              		.loc 1 5285 7 view .LVU8707
 32385 081a 059A     		ldr	r2, [sp, #20]
5284:src/xeq.c     **** 			if (XromUserPc != 0) {
 32386              		.loc 1 5284 15 view .LVU8708
 32387 081c 1860     		str	r0, [r3]
5285:src/xeq.c     **** 				if (! Running)
 32388              		.loc 1 5285 4 is_stmt 1 view .LVU8709
5285:src/xeq.c     **** 				if (! Running)
 32389              		.loc 1 5285 7 is_stmt 0 view .LVU8710
 32390 081e 0028     		cmp	r0, #0
 32391 0820 3FF434AF 		beq	.L2167
 32392              	.LVL2508:
5286:src/xeq.c     **** 					clrretstk();
 32393              		.loc 1 5286 5 is_stmt 1 view .LVU8711
5286:src/xeq.c     **** 					clrretstk();
ARM GAS  /tmp/ccQQPlfu.s 			page 820


 32394              		.loc 1 5286 9 is_stmt 0 view .LVU8712
 32395 0824 DFF8E4A0 		ldr	r10, .L2506+36
 32396              	.LVL2509:
5286:src/xeq.c     **** 					clrretstk();
 32397              		.loc 1 5286 8 view .LVU8713
 32398 0828 DAF80030 		ldr	r3, [r10]
 32399 082c 23B9     		cbnz	r3, .L2171
5287:src/xeq.c     **** 				dispatch_xrom(fp);
 32400              		.loc 1 5287 6 is_stmt 1 view .LVU8714
 32401              	.LBB4169:
 32402              	.LBI4169:
1600:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 32403              		.loc 1 1600 6 view .LVU8715
 32404              	.LBB4170:
1601:src/xeq.c     **** }
 32405              		.loc 1 1601 2 view .LVU8716
1601:src/xeq.c     **** }
 32406              		.loc 1 1601 14 is_stmt 0 view .LVU8717
 32407 082e 3968     		ldr	r1, [r7]
1601:src/xeq.c     **** }
 32408              		.loc 1 1601 24 view .LVU8718
 32409 0830 A1F8DE37 		strh	r3, [r1, #2014]	@ movhi
1601:src/xeq.c     **** }
 32410              		.loc 1 1601 12 view .LVU8719
 32411 0834 A1F8E237 		strh	r3, [r1, #2018]	@ movhi
 32412              	.L2171:
 32413              	.LBE4170:
 32414              	.LBE4169:
5288:src/xeq.c     **** 			}
 32415              		.loc 1 5288 5 is_stmt 1 view .LVU8720
 32416 0838 2C4B     		ldr	r3, .L2506+4
 32417 083a 0593     		str	r3, [sp, #20]
 32418              	.LVL2510:
5288:src/xeq.c     **** 			}
 32419              		.loc 1 5288 5 is_stmt 0 view .LVU8721
 32420 083c 1046     		mov	r0, r2
 32421 083e FFF7FEFF 		bl	dispatch_xrom
 32422              	.LVL2511:
 32423 0842 059B     		ldr	r3, [sp, #20]
 32424 0844 1A68     		ldr	r2, [r3]
 32425 0846 9CE4     		b	.L2170
 32426              	.LVL2512:
 32427              	.L2213:
5288:src/xeq.c     **** 			}
 32428              		.loc 1 5288 5 view .LVU8722
 32429              	.LBE4178:
 32430              	.LBE4183:
 32431              	.LBE4571:
 32432              	.LBB4572:
 32433              	.LBB4253:
3916:src/xeq.c     **** 		break;
 32434              		.loc 1 3916 3 is_stmt 1 view .LVU8723
 32435 0848 284B     		ldr	r3, .L2506+4
 32436 084a 0593     		str	r3, [sp, #20]
 32437 084c AAF10500 		sub	r0, r10, #5
 32438 0850 FFF7FEFF 		bl	digit
 32439              	.LVL2513:
ARM GAS  /tmp/ccQQPlfu.s 			page 821


3917:src/xeq.c     **** 
 32440              		.loc 1 3917 3 view .LVU8724
 32441 0854 059B     		ldr	r3, [sp, #20]
 32442 0856 1A68     		ldr	r2, [r3]
 32443 0858 93E4     		b	.L2170
 32444              	.LVL2514:
 32445              	.L2483:
3917:src/xeq.c     **** 
 32446              		.loc 1 3917 3 is_stmt 0 view .LVU8725
 32447              	.LBE4253:
 32448              	.LBE4572:
 32449              	.LBB4573:
 32450              	.LBB4423:
 32451              	.LBB4408:
 32452              	.LBB4397:
 32453              	.LBB4390:
 32454 085a FFF7FEFF 		bl	process_cmdline.part.0
 32455              	.LVL2515:
 32456 085e B2E5     		b	.L2258
 32457              	.LVL2516:
 32458              	.L2480:
3917:src/xeq.c     **** 
 32459              		.loc 1 3917 3 view .LVU8726
 32460              	.LBE4390:
 32461              	.LBE4397:
 32462              	.LBE4408:
 32463              	.LBE4423:
 32464              	.LBE4573:
 32465              	.LBB4574:
 32466              	.LBB4381:
 32467              	.LBB4372:
 32468              	.LBB4353:
 32469 0860 FFF7FEFF 		bl	process_cmdline.part.0
 32470              	.LVL2517:
 32471 0864 77E5     		b	.L2244
 32472              	.LVL2518:
 32473              	.L2486:
3917:src/xeq.c     **** 
 32474              		.loc 1 3917 3 view .LVU8727
 32475              	.LBE4353:
 32476              	.LBE4372:
 32477              	.LBE4381:
 32478              	.LBE4574:
 32479              	.LBB4575:
 32480              	.LBB4556:
 32481              	.LBB4545:
 32482              	.LBB4535:
 32483              	.LBB4528:
 32484 0866 FFF7FEFF 		bl	process_cmdline.part.0
 32485              	.LVL2519:
 32486 086a 82E6     		b	.L2287
 32487              	.LVL2520:
 32488              	.L2485:
3917:src/xeq.c     **** 
 32489              		.loc 1 3917 3 view .LVU8728
 32490              	.LBE4528:
 32491              	.LBE4535:
ARM GAS  /tmp/ccQQPlfu.s 			page 822


 32492              	.LBE4545:
 32493              	.LBE4556:
 32494              	.LBE4575:
 32495              	.LBB4576:
 32496              	.LBB4511:
 32497              	.LBB4506:
 32498              	.LBB4491:
 32499              	.LBB4484:
 32500 086c FFF7FEFF 		bl	process_cmdline.part.0
 32501              	.LVL2521:
 32502 0870 4AE6     		b	.L2282
 32503              	.LVL2522:
 32504              	.L2484:
3917:src/xeq.c     **** 
 32505              		.loc 1 3917 3 view .LVU8729
 32506              	.LBE4484:
 32507              	.LBE4491:
 32508              	.LBE4506:
 32509              	.LBE4511:
 32510              	.LBE4576:
 32511              	.LBB4577:
 32512              	.LBB4472:
 32513              	.LBB4456:
 32514              	.LBB4441:
 32515              	.LBB4434:
 32516 0872 FFF7FEFF 		bl	process_cmdline.part.0
 32517              	.LVL2523:
 32518 0876 07E6     		b	.L2274
 32519              	.LVL2524:
 32520              	.L2210:
3917:src/xeq.c     **** 
 32521              		.loc 1 3917 3 view .LVU8730
 32522              	.LBE4434:
 32523              	.LBE4441:
 32524              	.LBE4456:
 32525              	.LBE4472:
 32526              	.LBE4577:
 32527              	.LBB4578:
 32528              	.LBB4254:
4071:src/xeq.c     **** 		break;
 32529              		.loc 1 4071 3 is_stmt 1 view .LVU8731
4071:src/xeq.c     **** 		break;
 32530              		.loc 1 4071 53 is_stmt 0 view .LVU8732
 32531 0878 A5F11E01 		sub	r1, r5, #30
 32532 087c 1B4B     		ldr	r3, .L2506+4
 32533 087e 0593     		str	r3, [sp, #20]
4071:src/xeq.c     **** 		break;
 32534              		.loc 1 4071 3 view .LVU8733
 32535 0880 C9B2     		uxtb	r1, r1
 32536 0882 40F61C00 		movw	r0, #2076
 32537 0886 FFF7FEFF 		bl	do_tst
 32538              	.LVL2525:
4072:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
 32539              		.loc 1 4072 3 is_stmt 1 view .LVU8734
 32540 088a 059B     		ldr	r3, [sp, #20]
 32541 088c 1A68     		ldr	r2, [r3]
 32542 088e 78E4     		b	.L2170
ARM GAS  /tmp/ccQQPlfu.s 			page 823


 32543              	.L2211:
4062:src/xeq.c     **** 		break;
 32544              		.loc 1 4062 3 view .LVU8735
4062:src/xeq.c     **** 		break;
 32545              		.loc 1 4062 54 is_stmt 0 view .LVU8736
 32546 0890 A5F11701 		sub	r1, r5, #23
 32547 0894 154B     		ldr	r3, .L2506+4
 32548 0896 0593     		str	r3, [sp, #20]
4062:src/xeq.c     **** 		break;
 32549              		.loc 1 4062 3 view .LVU8737
 32550 0898 C9B2     		uxtb	r1, r1
 32551 089a 40F61B00 		movw	r0, #2075
 32552 089e FFF7FEFF 		bl	do_tst
 32553              	.LVL2526:
4063:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
 32554              		.loc 1 4063 3 is_stmt 1 view .LVU8738
 32555 08a2 059B     		ldr	r3, [sp, #20]
 32556 08a4 1A68     		ldr	r2, [r3]
 32557 08a6 6CE4     		b	.L2170
 32558              	.L2212:
4044:src/xeq.c     **** 			bad_mode_error();
 32559              		.loc 1 4044 3 view .LVU8739
4044:src/xeq.c     **** 			bad_mode_error();
 32560              		.loc 1 4044 7 is_stmt 0 view .LVU8740
 32561 08a8 3B68     		ldr	r3, [r7]
 32562 08aa 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4044:src/xeq.c     **** 			bad_mode_error();
 32563              		.loc 1 4044 6 view .LVU8741
 32564 08ae DD07     		lsls	r5, r3, #31
 32565              	.LVL2527:
4044:src/xeq.c     **** 			bad_mode_error();
 32566              		.loc 1 4044 6 view .LVU8742
 32567 08b0 00F1E780 		bmi	.L2279
4048:src/xeq.c     **** 		clr_lift();
 32568              		.loc 1 4048 3 is_stmt 1 view .LVU8743
 32569              	.LBB4190:
 32570              	.LBI4190:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 32571              		.loc 1 1220 6 view .LVU8744
 32572              	.LBB4191:
1221:src/xeq.c     **** 
 32573              		.loc 1 1221 2 view .LVU8745
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32574              		.loc 1 1223 2 view .LVU8746
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32575              		.loc 1 1223 5 is_stmt 0 view .LVU8747
 32576 08b4 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32577 08b6 002B     		cmp	r3, #0
 32578 08b8 40F02582 		bne	.L2490
 32579              	.L2241:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32580              		.loc 1 1223 5 view .LVU8748
 32581              	.LBE4191:
 32582              	.LBE4190:
4049:src/xeq.c     **** 		setlastX();
 32583              		.loc 1 4049 3 is_stmt 1 view .LVU8749
 32584              	.LBB4193:
ARM GAS  /tmp/ccQQPlfu.s 			page 824


 32585              	.LBI4193:
 765:src/xeq.c     ****     State2.state_lift = 0;
 32586              		.loc 1 765 13 view .LVU8750
 32587              	.LBB4194:
 766:src/xeq.c     **** }
 32588              		.loc 1 766 5 view .LVU8751
 766:src/xeq.c     **** }
 32589              		.loc 1 766 23 is_stmt 0 view .LVU8752
 32590 08bc E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32591              	.LBE4194:
 32592              	.LBE4193:
 32593              	.LBB4197:
 32594              	.LBB4198:
 787:src/xeq.c     **** }
 32595              		.loc 1 787 2 view .LVU8753
 32596 08be 6421     		movs	r1, #100
 32597              	.LBE4198:
 32598              	.LBE4197:
 32599              	.LBB4201:
 32600              	.LBB4195:
 766:src/xeq.c     **** }
 32601              		.loc 1 766 23 view .LVU8754
 32602 08c0 6FF38613 		bfc	r3, #6, #1
 32603              	.LBE4195:
 32604              	.LBE4201:
 32605              	.LBB4202:
 32606              	.LBB4199:
 787:src/xeq.c     **** }
 32607              		.loc 1 787 2 view .LVU8755
 32608 08c4 6C20     		movs	r0, #108
 32609              	.LBE4199:
 32610              	.LBE4202:
 32611              	.LBB4203:
 32612              	.LBB4196:
 766:src/xeq.c     **** }
 32613              		.loc 1 766 23 view .LVU8756
 32614 08c6 E375     		strb	r3, [r4, #23]
 32615              	.LBE4196:
 32616              	.LBE4203:
4050:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
 32617              		.loc 1 4050 3 is_stmt 1 view .LVU8757
 32618              	.LBB4204:
 32619              	.LBI4197:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32620              		.loc 1 786 6 view .LVU8758
 32621              	.LBB4200:
 787:src/xeq.c     **** }
 32622              		.loc 1 787 2 view .LVU8759
 32623 08c8 FFF7FEFF 		bl	copyreg_n
 32624              	.LVL2528:
 32625              	.LBE4200:
 32626              	.LBE4204:
4051:src/xeq.c     **** 			sigma_plus();
 32627              		.loc 1 4051 3 view .LVU8760
4051:src/xeq.c     **** 			sigma_plus();
 32628              		.loc 1 4051 6 is_stmt 0 view .LVU8761
 32629 08cc BAF1150F 		cmp	r10, #21
ARM GAS  /tmp/ccQQPlfu.s 			page 825


 32630 08d0 00F0FB81 		beq	.L2491
4054:src/xeq.c     **** 		sigma_val(OP_sigmaN);
 32631              		.loc 1 4054 4 is_stmt 1 view .LVU8762
 32632 08d4 FFF7FEFF 		bl	sigma_minus
 32633              	.LVL2529:
 32634              	.L2243:
4055:src/xeq.c     **** 		break;
 32635              		.loc 1 4055 3 view .LVU8763
 32636 08d8 044B     		ldr	r3, .L2506+4
 32637 08da 0593     		str	r3, [sp, #20]
 32638 08dc 1D20     		movs	r0, #29
 32639 08de FFF7FEFF 		bl	sigma_val
 32640              	.LVL2530:
4056:src/xeq.c     **** 
 32641              		.loc 1 4056 3 view .LVU8764
 32642 08e2 059B     		ldr	r3, [sp, #20]
 32643 08e4 1A68     		ldr	r2, [r3]
 32644 08e6 4CE4     		b	.L2170
 32645              	.L2507:
 32646              		.align	2
 32647              	.L2506:
 32648 08e8 00000000 		.word	argcmds
 32649 08ec 00000000 		.word	Error
 32650 08f0 00000000 		.word	xrom
 32651 08f4 00000000 		.word	XromParams
 32652 08f8 00000000 		.word	RetStk
 32653 08fc 00000000 		.word	XromLocal
 32654 0900 00000000 		.word	xrom_size
 32655 0904 00000000 		.word	XromUserPc
 32656 0908 00000000 		.word	dyfuncs
 32657 090c 00000000 		.word	Running
 32658              	.LVL2531:
 32659              	.L2206:
4077:src/xeq.c     **** 		break;
 32660              		.loc 1 4077 3 view .LVU8765
4077:src/xeq.c     **** 		break;
 32661              		.loc 1 4077 49 is_stmt 0 view .LVU8766
 32662 0910 A5F12902 		sub	r2, r5, #41
 32663 0914 BA4B     		ldr	r3, .L2508
4077:src/xeq.c     **** 		break;
 32664              		.loc 1 4077 3 view .LVU8767
 32665 0916 BB49     		ldr	r1, .L2508+4
 32666 0918 BB48     		ldr	r0, .L2508+8
 32667 091a 0593     		str	r3, [sp, #20]
 32668 091c D2B2     		uxtb	r2, r2
 32669 091e FFF7FEFF 		bl	do_ztst
 32670              	.LVL2532:
4078:src/xeq.c     **** 
 32671              		.loc 1 4078 3 is_stmt 1 view .LVU8768
 32672 0922 059B     		ldr	r3, [sp, #20]
 32673 0924 1A68     		ldr	r2, [r3]
 32674 0926 2CE4     		b	.L2170
 32675              	.L2208:
4074:src/xeq.c     **** 		break;
 32676              		.loc 1 4074 3 view .LVU8769
4074:src/xeq.c     **** 		break;
 32677              		.loc 1 4074 49 is_stmt 0 view .LVU8770
ARM GAS  /tmp/ccQQPlfu.s 			page 826


 32678 0928 A5F12702 		sub	r2, r5, #39
 32679 092c B44B     		ldr	r3, .L2508
4074:src/xeq.c     **** 		break;
 32680              		.loc 1 4074 3 view .LVU8771
 32681 092e B649     		ldr	r1, .L2508+8
 32682 0930 B448     		ldr	r0, .L2508+4
 32683 0932 0593     		str	r3, [sp, #20]
 32684 0934 D2B2     		uxtb	r2, r2
 32685 0936 FFF7FEFF 		bl	do_ztst
 32686              	.LVL2533:
4075:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
 32687              		.loc 1 4075 3 is_stmt 1 view .LVU8772
 32688 093a 059B     		ldr	r3, [sp, #20]
 32689 093c 1A68     		ldr	r2, [r3]
 32690 093e 20E4     		b	.L2170
 32691              	.L2209:
4065:src/xeq.c     **** 		break;
 32692              		.loc 1 4065 3 view .LVU8773
 32693 0940 B149     		ldr	r1, .L2508+8
 32694 0942 AF4B     		ldr	r3, .L2508
 32695 0944 0593     		str	r3, [sp, #20]
4065:src/xeq.c     **** 		break;
 32696              		.loc 1 4065 49 is_stmt 0 view .LVU8774
 32697 0946 A5F12502 		sub	r2, r5, #37
4065:src/xeq.c     **** 		break;
 32698              		.loc 1 4065 3 view .LVU8775
 32699 094a D2B2     		uxtb	r2, r2
 32700 094c 0846     		mov	r0, r1
 32701 094e FFF7FEFF 		bl	do_ztst
 32702              	.LVL2534:
4066:src/xeq.c     **** 
 32703              		.loc 1 4066 3 is_stmt 1 view .LVU8776
 32704 0952 059B     		ldr	r3, [sp, #20]
 32705 0954 1A68     		ldr	r2, [r3]
 32706 0956 14E4     		b	.L2170
 32707              	.L2214:
3920:src/xeq.c     **** 			break;
 32708              		.loc 1 3920 3 view .LVU8777
3920:src/xeq.c     **** 			break;
 32709              		.loc 1 3920 7 is_stmt 0 view .LVU8778
 32710 0958 3B68     		ldr	r3, [r7]
 32711 095a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3920:src/xeq.c     **** 			break;
 32712              		.loc 1 3920 6 view .LVU8779
 32713 095e DA07     		lsls	r2, r3, #31
 32714 0960 3FF594AE 		bmi	.L2167
3923:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32715              		.loc 1 3923 3 is_stmt 1 view .LVU8780
3923:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32716              		.loc 1 3923 7 is_stmt 0 view .LVU8781
 32717 0964 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
3923:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32718              		.loc 1 3923 6 view .LVU8782
 32719 0966 012B     		cmp	r3, #1
 32720 0968 3FF690AE 		bhi	.L2167
3923:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32721              		.loc 1 3923 22 view .LVU8783
ARM GAS  /tmp/ccQQPlfu.s 			page 827


 32722 096c 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 32723 096e 002A     		cmp	r2, #0
 32724 0970 7FF48CAE 		bne	.L2167
3923:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32725              		.loc 1 3923 54 view .LVU8784
 32726 0974 002B     		cmp	r3, #0
3923:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32727              		.loc 1 3923 40 view .LVU8785
 32728 0976 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3923:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32729              		.loc 1 3923 54 view .LVU8786
 32730 0978 0CBF     		ite	eq
 32731 097a 0C22     		moveq	r2, #12
 32732 097c 0D22     		movne	r2, #13
3923:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32733              		.loc 1 3923 37 view .LVU8787
 32734 097e 9A42     		cmp	r2, r3
 32735 0980 FFF684AE 		blt	.L2167
3924:src/xeq.c     **** #else
 32736              		.loc 1 3924 4 is_stmt 1 view .LVU8788
3924:src/xeq.c     **** #else
 32737              		.loc 1 3924 7 is_stmt 0 view .LVU8789
 32738 0984 002B     		cmp	r3, #0
 32739 0986 00F0F781 		beq	.L2221
3924:src/xeq.c     **** #else
 32740              		.loc 1 3924 37 view .LVU8790
 32741 098a 2344     		add	r3, r3, r4
3924:src/xeq.c     **** #else
 32742              		.loc 1 3924 27 view .LVU8791
 32743 098c DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 32744 098e 2D2B     		cmp	r3, #45
 32745 0990 00F0F281 		beq	.L2221
 32746              	.L2222:
3935:src/xeq.c     **** 			append_cmdline('.');
 32747              		.loc 1 3935 4 is_stmt 1 view .LVU8792
 32748              	.LBB4205:
 32749              	.LBB4206:
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32750              		.loc 1 2633 10 is_stmt 0 view .LVU8793
 32751 0994 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32752              	.LBE4206:
 32753              	.LBE4205:
3935:src/xeq.c     **** 			append_cmdline('.');
 32754              		.loc 1 3935 14 view .LVU8794
 32755 0996 A17F     		ldrb	r1, [r4, #30]	@ zero_extendqisi2
 32756              	.LBB4210:
 32757              	.LBB4207:
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32758              		.loc 1 2633 23 view .LVU8795
 32759 0998 5A1C     		adds	r2, r3, #1
 32760 099a D2B2     		uxtb	r2, r2
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32761              		.loc 1 2633 27 view .LVU8796
 32762 099c 2344     		add	r3, r3, r4
2634:src/xeq.c     **** }
 32763              		.loc 1 2634 25 view .LVU8797
 32764 099e A018     		adds	r0, r4, r2
ARM GAS  /tmp/ccQQPlfu.s 			page 828


2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32765              		.loc 1 2633 23 view .LVU8798
 32766 09a0 2277     		strb	r2, [r4, #28]
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32767              		.loc 1 2633 27 view .LVU8799
 32768 09a2 2E22     		movs	r2, #46
 32769 09a4 83F82020 		strb	r2, [r3, #32]
 32770 09a8 954B     		ldr	r3, .L2508
2634:src/xeq.c     **** }
 32771              		.loc 1 2634 25 view .LVU8800
 32772 09aa 0022     		movs	r2, #0
 32773              	.LBE4207:
 32774              	.LBE4210:
3935:src/xeq.c     **** 			append_cmdline('.');
 32775              		.loc 1 3935 14 view .LVU8801
 32776 09ac 0131     		adds	r1, r1, #1
 32777              	.LBB4211:
 32778              	.LBB4208:
2634:src/xeq.c     **** }
 32779              		.loc 1 2634 25 view .LVU8802
 32780 09ae 80F82020 		strb	r2, [r0, #32]
 32781              	.LBE4208:
 32782              	.LBE4211:
3935:src/xeq.c     **** 			append_cmdline('.');
 32783              		.loc 1 3935 14 view .LVU8803
 32784 09b2 A177     		strb	r1, [r4, #30]
3936:src/xeq.c     **** 		}
 32785              		.loc 1 3936 4 is_stmt 1 view .LVU8804
 32786              	.LVL2535:
 32787              	.LBB4212:
 32788              	.LBI4205:
2632:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 32789              		.loc 1 2632 13 view .LVU8805
 32790              	.LBB4209:
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32791              		.loc 1 2633 2 view .LVU8806
2634:src/xeq.c     **** }
 32792              		.loc 1 2634 2 view .LVU8807
 32793 09b4 1A68     		ldr	r2, [r3]
2635:src/xeq.c     **** 
 32794              		.loc 1 2635 1 is_stmt 0 view .LVU8808
 32795 09b6 FFF7E4BB 		b	.L2170
 32796              	.LVL2536:
 32797              	.L2215:
2635:src/xeq.c     **** 
 32798              		.loc 1 2635 1 view .LVU8809
 32799              	.LBE4209:
 32800              	.LBE4212:
3988:src/xeq.c     **** 			cmdlinechs();
 32801              		.loc 1 3988 3 is_stmt 1 view .LVU8810
3988:src/xeq.c     **** 			cmdlinechs();
 32802              		.loc 1 3988 7 is_stmt 0 view .LVU8811
 32803 09ba 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3988:src/xeq.c     **** 			cmdlinechs();
 32804              		.loc 1 3988 6 view .LVU8812
 32805 09bc 002A     		cmp	r2, #0
 32806 09be 40F06C81 		bne	.L2492
ARM GAS  /tmp/ccQQPlfu.s 			page 829


3990:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32807              		.loc 1 3990 8 is_stmt 1 view .LVU8813
3990:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32808              		.loc 1 3990 12 is_stmt 0 view .LVU8814
 32809 09c2 3B68     		ldr	r3, [r7]
 32810 09c4 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3990:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32811              		.loc 1 3990 11 view .LVU8815
 32812 09c8 DB07     		lsls	r3, r3, #31
 32813 09ca 40F15881 		bpl	.L2228
3991:src/xeq.c     **** 			set_lift();
 32814              		.loc 1 3991 4 is_stmt 1 view .LVU8816
 32815              	.LBB4213:
 32816              	.LBI4213:
1436:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 32817              		.loc 1 1436 15 view .LVU8817
 32818              	.LBB4214:
1437:src/xeq.c     **** }
 32819              		.loc 1 1437 2 view .LVU8818
1437:src/xeq.c     **** }
 32820              		.loc 1 1437 9 is_stmt 0 view .LVU8819
 32821 09ce 6420     		movs	r0, #100
 32822 09d0 FFF7FEFF 		bl	get_reg_n_int
 32823              	.LVL2537:
 32824              	.LBE4214:
 32825              	.LBE4213:
3991:src/xeq.c     **** 			set_lift();
 32826              		.loc 1 3991 4 view .LVU8820
 32827 09d4 FFF7FEFF 		bl	intChs
 32828              	.LVL2538:
 32829 09d8 FFF7FEFF 		bl	setX_int
 32830              	.LVL2539:
 32831 09dc FFF7CBBB 		b	.L2444
 32832              	.L2218:
4023:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 32833              		.loc 1 4023 5 is_stmt 1 view .LVU8821
4023:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 32834              		.loc 1 4023 9 is_stmt 0 view .LVU8822
 32835 09e0 3B68     		ldr	r3, [r7]
 32836 09e2 93F8AD37 		ldrb	r3, [r3, #1965]	@ zero_extendqisi2
4023:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 32837              		.loc 1 4023 8 view .LVU8823
 32838 09e6 13F0020F 		tst	r3, #2
4024:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32839              		.loc 1 4024 10 view .LVU8824
 32840 09ea 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
4023:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 32841              		.loc 1 4023 8 view .LVU8825
 32842 09ec 00F02681 		beq	.L2234
4024:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32843              		.loc 1 4024 7 is_stmt 1 view .LVU8826
4024:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32844              		.loc 1 4024 10 is_stmt 0 view .LVU8827
 32845 09f0 002B     		cmp	r3, #0
 32846 09f2 40F05F81 		bne	.L2432
 32847 09f6 DFF824A2 		ldr	r10, .L2508+28
 32848              	.LVL2540:
ARM GAS  /tmp/ccQQPlfu.s 			page 830


4024:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32849              		.loc 1 4024 10 view .LVU8828
 32850 09fa 844D     		ldr	r5, .L2508+12
 32851              	.LVL2541:
 32852              	.L2235:
4029:src/xeq.c     **** 		      if ( (XromRunning || Running) ) {//JMTEST Explicitly including standard functionality if co
 32853              		.loc 1 4029 9 is_stmt 1 view .LVU8829
 32854 09fc FFF7FEFF 		bl	lift
 32855              	.LVL2542:
4030:src/xeq.c     **** 			clr_lift();
 32856              		.loc 1 4030 9 view .LVU8830
4030:src/xeq.c     **** 			clr_lift();
 32857              		.loc 1 4030 27 is_stmt 0 view .LVU8831
 32858 0a00 2A68     		ldr	r2, [r5]
 32859 0a02 DAF80030 		ldr	r3, [r10]
 32860 0a06 1343     		orrs	r3, r2, r3
 32861 0a08 3FF440AE 		beq	.L2167
 32862              	.L2447:
4038:src/xeq.c     **** 		  }
 32863              		.loc 1 4038 7 is_stmt 1 view .LVU8832
 32864              	.LBB4215:
 32865              	.LBI4215:
 765:src/xeq.c     ****     State2.state_lift = 0;
 32866              		.loc 1 765 13 view .LVU8833
 32867              	.LBB4216:
 766:src/xeq.c     **** }
 32868              		.loc 1 766 5 view .LVU8834
 766:src/xeq.c     **** }
 32869              		.loc 1 766 23 is_stmt 0 view .LVU8835
 32870 0a0c E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 32871 0a0e 7C4B     		ldr	r3, .L2508
 32872 0a10 6FF38612 		bfc	r2, #6, #1
 32873 0a14 E275     		strb	r2, [r4, #23]
 32874 0a16 1A68     		ldr	r2, [r3]
 767:src/xeq.c     **** 
 32875              		.loc 1 767 1 view .LVU8836
 32876 0a18 FFF7B3BB 		b	.L2170
 32877              	.LVL2543:
 32878              	.L2216:
 767:src/xeq.c     **** 
 32879              		.loc 1 767 1 view .LVU8837
 32880              	.LBE4216:
 32881              	.LBE4215:
3941:src/xeq.c     **** 			break;
 32882              		.loc 1 3941 3 is_stmt 1 view .LVU8838
 32883              	.LBB4217:
3949:src/xeq.c     **** #endif
 32884              		.loc 1 3949 4 view .LVU8839
3952:src/xeq.c     **** 				if (eex_pi) {
 32885              		.loc 1 3952 4 view .LVU8840
3952:src/xeq.c     **** 				if (eex_pi) {
 32886              		.loc 1 3952 7 is_stmt 0 view .LVU8841
 32887 0a1c A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 32888 0a1e 022B     		cmp	r3, #2
 32889 0a20 3FF434AE 		beq	.L2167
3967:src/xeq.c     **** 				break;
 32890              		.loc 1 3967 4 is_stmt 1 view .LVU8842
ARM GAS  /tmp/ccQQPlfu.s 			page 831


 32891              	.LBE4217:
3941:src/xeq.c     **** 			break;
 32892              		.loc 1 3941 7 is_stmt 0 view .LVU8843
 32893 0a24 3B68     		ldr	r3, [r7]
 32894              	.LBB4220:
3967:src/xeq.c     **** 				break;
 32895              		.loc 1 3967 7 view .LVU8844
 32896 0a26 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 32897              	.LBE4220:
3941:src/xeq.c     **** 			break;
 32898              		.loc 1 3941 7 view .LVU8845
 32899 0a28 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 32900 0a2c 03F00103 		and	r3, r3, #1
 32901              	.LBB4221:
3967:src/xeq.c     **** 				break;
 32902              		.loc 1 3967 7 view .LVU8846
 32903 0a30 1343     		orrs	r3, r3, r2
 32904 0a32 7FF42BAE 		bne	.L2167
3967:src/xeq.c     **** 				break;
 32905              		.loc 1 3967 22 view .LVU8847
 32906 0a36 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3967:src/xeq.c     **** 				break;
 32907              		.loc 1 3967 19 view .LVU8848
 32908 0a38 122B     		cmp	r3, #18
 32909 0a3a 3FF627AE 		bhi	.L2167
3969:src/xeq.c     **** 				// empty command line: enter pi
 32910              		.loc 1 3969 4 is_stmt 1 view .LVU8849
3980:src/xeq.c     **** 				digit(1);
 32911              		.loc 1 3980 4 view .LVU8850
3980:src/xeq.c     **** 				digit(1);
 32912              		.loc 1 3980 7 is_stmt 0 view .LVU8851
 32913 0a3e 002B     		cmp	r3, #0
 32914 0a40 00F09E81 		beq	.L2493
 32915              	.L2223:
3982:src/xeq.c     **** 			append_cmdline('E');
 32916              		.loc 1 3982 4 is_stmt 1 view .LVU8852
3982:src/xeq.c     **** 			append_cmdline('E');
 32917              		.loc 1 3982 17 is_stmt 0 view .LVU8853
 32918 0a44 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3982:src/xeq.c     **** 			append_cmdline('E');
 32919              		.loc 1 3982 15 view .LVU8854
 32920 0a46 6377     		strb	r3, [r4, #29]
3983:src/xeq.c     **** 		}
 32921              		.loc 1 3983 4 is_stmt 1 view .LVU8855
 32922              	.LVL2544:
 32923              	.LBB4218:
 32924              	.LBI4218:
2632:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 32925              		.loc 1 2632 13 view .LVU8856
 32926              	.LBB4219:
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32927              		.loc 1 2633 2 view .LVU8857
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32928              		.loc 1 2633 23 is_stmt 0 view .LVU8858
 32929 0a48 591C     		adds	r1, r3, #1
 32930 0a4a C9B2     		uxtb	r1, r1
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
ARM GAS  /tmp/ccQQPlfu.s 			page 832


 32931              		.loc 1 2633 27 view .LVU8859
 32932 0a4c E218     		adds	r2, r4, r3
2634:src/xeq.c     **** }
 32933              		.loc 1 2634 25 view .LVU8860
 32934 0a4e 6018     		adds	r0, r4, r1
 32935 0a50 6B4B     		ldr	r3, .L2508
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32936              		.loc 1 2633 23 view .LVU8861
 32937 0a52 2177     		strb	r1, [r4, #28]
2633:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32938              		.loc 1 2633 27 view .LVU8862
 32939 0a54 4521     		movs	r1, #69
 32940 0a56 82F82010 		strb	r1, [r2, #32]
2634:src/xeq.c     **** }
 32941              		.loc 1 2634 2 is_stmt 1 view .LVU8863
2634:src/xeq.c     **** }
 32942              		.loc 1 2634 25 is_stmt 0 view .LVU8864
 32943 0a5a 0022     		movs	r2, #0
 32944 0a5c 80F82020 		strb	r2, [r0, #32]
 32945 0a60 1A68     		ldr	r2, [r3]
2635:src/xeq.c     **** 
 32946              		.loc 1 2635 1 view .LVU8865
 32947 0a62 FFF78EBB 		b	.L2170
 32948              	.LVL2545:
 32949              	.L2217:
2635:src/xeq.c     **** 
 32950              		.loc 1 2635 1 view .LVU8866
 32951              	.LBE4219:
 32952              	.LBE4218:
 32953              	.LBE4221:
4004:src/xeq.c     **** 			illegal(op);
 32954              		.loc 1 4004 3 is_stmt 1 view .LVU8867
4004:src/xeq.c     **** 			illegal(op);
 32955              		.loc 1 4004 7 is_stmt 0 view .LVU8868
 32956 0a66 DFF8B4A1 		ldr	r10, .L2508+28
 32957              	.LVL2546:
4004:src/xeq.c     **** 			illegal(op);
 32958              		.loc 1 4004 6 view .LVU8869
 32959 0a6a DAF80030 		ldr	r3, [r10]
 32960 0a6e 002B     		cmp	r3, #0
 32961 0a70 00F0E980 		beq	.L2229
4005:src/xeq.c     **** 		else if (CmdLineLength) {
 32962              		.loc 1 4005 4 is_stmt 1 view .LVU8870
4005:src/xeq.c     **** 		else if (CmdLineLength) {
 32963              		.loc 1 4005 4 view .LVU8871
 32964              	.LVL2547:
 32965              	.LBB4222:
 32966              	.LBI4222:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32967              		.loc 1 540 5 view .LVU8872
 32968              	.LBB4223:
 541:src/xeq.c     **** 		Error = e;
 32969              		.loc 1 541 2 view .LVU8873
 541:src/xeq.c     **** 		Error = e;
 32970              		.loc 1 541 12 is_stmt 0 view .LVU8874
 32971 0a74 624B     		ldr	r3, .L2508
 32972 0a76 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccQQPlfu.s 			page 833


 541:src/xeq.c     **** 		Error = e;
 32973              		.loc 1 541 5 view .LVU8875
 32974 0a78 0028     		cmp	r0, #0
 32975 0a7a 3FF4A4AB 		beq	.L2175
 32976 0a7e FFF7A4BB 		b	.L2306
 32977              	.LVL2548:
 32978              	.L2279:
 541:src/xeq.c     **** 		Error = e;
 32979              		.loc 1 541 5 view .LVU8876
 32980              	.LBE4223:
 32981              	.LBE4222:
 32982              	.LBE4254:
 32983              	.LBE4578:
 32984              	.LBB4579:
 32985              	.LBB4473:
4842:src/xeq.c     **** 		}
 32986              		.loc 1 4842 5 is_stmt 1 view .LVU8877
 32987              	.LBB4457:
 32988              	.LBI4457:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 32989              		.loc 1 569 6 view .LVU8878
 32990              	.LBE4457:
 32991              	.LBE4473:
 32992              	.LBE4579:
 570:src/xeq.c     **** }
 32993              		.loc 1 570 2 view .LVU8879
 32994              	.LBB4580:
 32995              	.LBB4474:
 32996              	.LBB4460:
 32997              	.LBB4458:
 32998              	.LBI4458:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32999              		.loc 1 540 5 view .LVU8880
 33000              	.LBB4459:
 541:src/xeq.c     **** 		Error = e;
 33001              		.loc 1 541 2 view .LVU8881
 541:src/xeq.c     **** 		Error = e;
 33002              		.loc 1 541 12 is_stmt 0 view .LVU8882
 33003 0a82 5F4B     		ldr	r3, .L2508
 33004 0a84 1868     		ldr	r0, [r3]
 541:src/xeq.c     **** 		Error = e;
 33005              		.loc 1 541 5 view .LVU8883
 33006 0a86 0028     		cmp	r0, #0
 33007 0a88 7FF4EAAD 		bne	.L2439
 33008              	.LVL2549:
 541:src/xeq.c     **** 		Error = e;
 33009              		.loc 1 541 5 view .LVU8884
 33010              	.LBE4459:
 33011              	.LBE4458:
 33012              	.LBE4460:
 33013              	.LBE4474:
 33014              	.LBE4580:
 33015              	.LBB4581:
 33016              	.LBB4255:
 33017              	.LBB4224:
 33018              	.LBB4225:
 33019              	.LBB4226:
ARM GAS  /tmp/ccQQPlfu.s 			page 834


 33020              	.LBB4227:
 33021              	.LBI4227:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33022              		.loc 1 540 5 is_stmt 1 view .LVU8885
 33023              	.LBB4228:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 33024              		.loc 1 542 3 view .LVU8886
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 33025              		.loc 1 542 9 is_stmt 0 view .LVU8887
 33026 0a8c 0D20     		movs	r0, #13
 33027 0a8e DFF88CA1 		ldr	r10, .L2508+28
 33028 0a92 1860     		str	r0, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 33029              		.loc 1 543 3 is_stmt 1 view .LVU8888
 33030 0a94 FFF799BB 		b	.L2306
 33031              	.LVL2550:
 33032              	.L2289:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 33033              		.loc 1 543 3 is_stmt 0 view .LVU8889
 33034              	.LBE4228:
 33035              	.LBE4227:
 33036              	.LBE4226:
 33037              	.LBE4225:
 33038              	.LBE4224:
 33039              	.LBE4255:
 33040              	.LBE4581:
 33041              	.LBB4582:
 33042              	.LBB4557:
4794:src/xeq.c     **** 	} else
 33043              		.loc 1 4794 4 is_stmt 1 view .LVU8890
 33044              	.LBB4546:
 33045              	.LBI4546:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 33046              		.loc 1 569 6 view .LVU8891
 33047              	.LBE4546:
 33048              	.LBE4557:
 33049              	.LBE4582:
 570:src/xeq.c     **** }
 33050              		.loc 1 570 2 view .LVU8892
 33051              	.LBB4583:
 33052              	.LBB4558:
 33053              	.LBB4551:
 33054              	.LBB4547:
 33055              	.LBI4547:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33056              		.loc 1 540 5 view .LVU8893
 33057              	.LBB4548:
 541:src/xeq.c     **** 		Error = e;
 33058              		.loc 1 541 2 view .LVU8894
 541:src/xeq.c     **** 		Error = e;
 33059              		.loc 1 541 12 is_stmt 0 view .LVU8895
 33060 0a98 594B     		ldr	r3, .L2508
 33061 0a9a 1A68     		ldr	r2, [r3]
 541:src/xeq.c     **** 		Error = e;
 33062              		.loc 1 541 5 view .LVU8896
 33063 0a9c 002A     		cmp	r2, #0
 33064 0a9e 7FF43DAB 		bne	.L2181
ARM GAS  /tmp/ccQQPlfu.s 			page 835


 33065              	.LVL2551:
 33066              	.LBB4549:
 33067              	.LBI4549:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33068              		.loc 1 540 5 is_stmt 1 view .LVU8897
 33069              	.LBB4550:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 33070              		.loc 1 542 3 view .LVU8898
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 33071              		.loc 1 542 9 is_stmt 0 view .LVU8899
 33072 0aa2 0D22     		movs	r2, #13
 33073 0aa4 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 33074              		.loc 1 543 3 is_stmt 1 view .LVU8900
 33075              	.LVL2552:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 33076              		.loc 1 543 3 is_stmt 0 view .LVU8901
 33077              	.LBE4550:
 33078              	.LBE4549:
 33079              	.LBE4548:
 33080              	.LBE4547:
 33081              	.LBE4551:
4796:src/xeq.c     **** }
 33082              		.loc 1 4796 3 is_stmt 1 view .LVU8902
 33083              	.LBE4558:
 33084              	.LBE4583:
5365:src/xeq.c     **** 		}
 33085              		.loc 1 5365 12 view .LVU8903
5375:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 33086              		.loc 1 5375 2 view .LVU8904
 33087 0aa6 FFF739BB 		b	.L2181
 33088              	.LVL2553:
 33089              	.L2297:
5399:src/xeq.c     **** 						// Need space for double precision stack
 33090              		.loc 1 5399 34 is_stmt 0 discriminator 1 view .LVU8905
 33091 0aaa 9CF8CF17 		ldrb	r1, [ip, #1999]	@ zero_extendqisi2
 33092 0aae 0B29     		cmp	r1, #11
 33093 0ab0 40F29380 		bls	.L2299
5403:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33094              		.loc 1 5403 6 is_stmt 1 view .LVU8906
5403:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33095              		.loc 1 5403 20 is_stmt 0 view .LVU8907
 33096 0ab4 68F3C712 		bfi	r2, r8, #7, #1
 33097 0ab8 6A70     		strb	r2, [r5, #1]
5404:src/xeq.c     **** 						UState.mode_double = 1;
 33098              		.loc 1 5404 6 is_stmt 1 view .LVU8908
 33099 0aba 05E6     		b	.L2298
 33100              	.LVL2554:
 33101              	.L2276:
 33102              	.LBB4584:
 33103              	.LBB4475:
4827:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33104              		.loc 1 4827 4 view .LVU8909
4827:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33105              		.loc 1 4827 10 is_stmt 0 view .LVU8910
 33106 0abc 544B     		ldr	r3, .L2508+16
 33107 0abe 05EB8505 		add	r5, r5, r5, lsl #2
ARM GAS  /tmp/ccQQPlfu.s 			page 836


 33108              	.LVL2555:
4827:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33109              		.loc 1 4827 10 view .LVU8911
 33110 0ac2 53F82550 		ldr	r5, [r3, r5, lsl #2]
4827:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33111              		.loc 1 4827 7 view .LVU8912
 33112 0ac6 002D     		cmp	r5, #0
 33113 0ac8 DBD0     		beq	.L2279
 33114              	.LBB4461:
4828:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33115              		.loc 1 4828 5 is_stmt 1 view .LVU8913
 33116              	.LVL2556:
4829:src/xeq.c     **** 					return;
 33117              		.loc 1 4829 5 view .LVU8914
4829:src/xeq.c     **** 					return;
 33118              		.loc 1 4829 9 is_stmt 0 view .LVU8915
 33119 0aca 2846     		mov	r0, r5
 33120 0acc FFF7FEFF 		bl	dispatch_xrom
 33121              	.LVL2557:
4829:src/xeq.c     **** 					return;
 33122              		.loc 1 4829 8 view .LVU8916
 33123 0ad0 0028     		cmp	r0, #0
 33124 0ad2 7FF4DBAD 		bne	.L2167
 33125              	.LBB4462:
4832:src/xeq.c     **** 					getXYZ(&x, &y, &z);
 33126              		.loc 1 4832 6 is_stmt 1 view .LVU8917
4833:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 33127              		.loc 1 4833 6 view .LVU8918
 33128 0ad6 30AA     		add	r2, sp, #192
 33129 0ad8 27A9     		add	r1, sp, #156
 33130 0ada 1EA8     		add	r0, sp, #120
4834:src/xeq.c     **** 						set_NaN(&r);
 33131              		.loc 1 4834 18 is_stmt 0 view .LVU8919
 33132 0adc 0DF1E40A 		add	r10, sp, #228
4833:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 33133              		.loc 1 4833 6 view .LVU8920
 33134 0ae0 FFF7FEFF 		bl	getXYZ
 33135              	.LVL2558:
4834:src/xeq.c     **** 						set_NaN(&r);
 33136              		.loc 1 4834 6 is_stmt 1 view .LVU8921
4834:src/xeq.c     **** 						set_NaN(&r);
 33137              		.loc 1 4834 18 is_stmt 0 view .LVU8922
 33138 0ae4 1EAB     		add	r3, sp, #120
 33139 0ae6 27AA     		add	r2, sp, #156
 33140 0ae8 30A9     		add	r1, sp, #192
 33141 0aea 5046     		mov	r0, r10
 33142 0aec A847     		blx	r5
 33143              	.LVL2559:
4834:src/xeq.c     **** 						set_NaN(&r);
 33144              		.loc 1 4834 9 view .LVU8923
 33145 0aee 0028     		cmp	r0, #0
 33146 0af0 00F01C81 		beq	.L2494
 33147              	.L2281:
4836:src/xeq.c     **** 					lower();
 33148              		.loc 1 4836 6 is_stmt 1 view .LVU8924
 33149              	.LBB4463:
 33150              	.LBI4463:
ARM GAS  /tmp/ccQQPlfu.s 			page 837


 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33151              		.loc 1 786 6 view .LVU8925
 33152              	.LBB4464:
 787:src/xeq.c     **** }
 33153              		.loc 1 787 2 view .LVU8926
 33154 0af4 424B     		ldr	r3, .L2508
 33155 0af6 0593     		str	r3, [sp, #20]
 33156 0af8 6421     		movs	r1, #100
 33157 0afa 6C20     		movs	r0, #108
 33158 0afc FFF7FEFF 		bl	copyreg_n
 33159              	.LVL2560:
 33160              	.LBE4464:
 33161              	.LBE4463:
4837:src/xeq.c     **** 					lower();
 33162              		.loc 1 4837 6 view .LVU8927
 33163 0b00 FFF7FEFF 		bl	lower
 33164              	.LVL2561:
 33165              	.L2450:
4838:src/xeq.c     **** 					setX(&r);
 33166              		.loc 1 4838 6 view .LVU8928
 33167 0b04 FFF7FEFF 		bl	lower
 33168              	.LVL2562:
 33169              	.L2452:
4839:src/xeq.c     **** 				}
 33170              		.loc 1 4839 6 view .LVU8929
 33171              	.LBB4465:
 33172              	.LBI4465:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 33173              		.loc 1 822 6 view .LVU8930
 33174              	.LBB4466:
 823:src/xeq.c     **** }
 33175              		.loc 1 823 2 view .LVU8931
 33176 0b08 5146     		mov	r1, r10
 33177 0b0a 6420     		movs	r0, #100
 33178 0b0c FFF7FEFF 		bl	setRegister
 33179              	.LVL2563:
 823:src/xeq.c     **** }
 33180              		.loc 1 823 2 is_stmt 0 view .LVU8932
 33181 0b10 059B     		ldr	r3, [sp, #20]
 33182 0b12 1A68     		ldr	r2, [r3]
 33183              	.LBE4466:
 33184              	.LBE4465:
 33185              	.LBE4462:
 33186              	.LBE4461:
 33187 0b14 FFF735BB 		b	.L2170
 33188              	.LVL2564:
 33189              	.L2260:
 823:src/xeq.c     **** }
 33190              		.loc 1 823 2 view .LVU8933
 33191              	.LBE4475:
 33192              	.LBE4584:
 33193              	.LBB4585:
 33194              	.LBB4424:
4675:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33195              		.loc 1 4675 4 is_stmt 1 view .LVU8934
4675:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33196              		.loc 1 4675 10 is_stmt 0 view .LVU8935
ARM GAS  /tmp/ccQQPlfu.s 			page 838


 33197 0b18 3E4B     		ldr	r3, .L2508+20
 33198 0b1a 05EB4505 		add	r5, r5, r5, lsl #1
 33199              	.LVL2565:
4675:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33200              		.loc 1 4675 10 view .LVU8936
 33201 0b1e 53F83550 		ldr	r5, [r3, r5, lsl #3]
4675:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33202              		.loc 1 4675 7 view .LVU8937
 33203 0b22 002D     		cmp	r5, #0
 33204 0b24 ADD0     		beq	.L2279
 33205              	.LBB4409:
4676:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33206              		.loc 1 4676 5 is_stmt 1 view .LVU8938
 33207              	.LVL2566:
4677:src/xeq.c     **** 					return;
 33208              		.loc 1 4677 5 view .LVU8939
4677:src/xeq.c     **** 					return;
 33209              		.loc 1 4677 9 is_stmt 0 view .LVU8940
 33210 0b26 2846     		mov	r0, r5
 33211 0b28 FFF7FEFF 		bl	dispatch_xrom
 33212              	.LVL2567:
4677:src/xeq.c     **** 					return;
 33213              		.loc 1 4677 8 view .LVU8941
 33214 0b2c 0028     		cmp	r0, #0
 33215 0b2e 7FF4ADAD 		bne	.L2167
 33216              	.LBB4410:
4680:src/xeq.c     **** 					getX(&x);
 33217              		.loc 1 4680 6 is_stmt 1 view .LVU8942
4681:src/xeq.c     **** 					if (NULL == fp(&r, &x))
 33218              		.loc 1 4681 6 view .LVU8943
 33219              	.LVL2568:
 33220              	.LBB4411:
 33221              	.LBI4411:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33222              		.loc 1 818 12 view .LVU8944
 33223              	.LBB4412:
 819:src/xeq.c     **** }
 33224              		.loc 1 819 2 view .LVU8945
 819:src/xeq.c     **** }
 33225              		.loc 1 819 9 is_stmt 0 view .LVU8946
 33226 0b32 6421     		movs	r1, #100
 33227 0b34 30A8     		add	r0, sp, #192
 33228              	.LVL2569:
 819:src/xeq.c     **** }
 33229              		.loc 1 819 9 view .LVU8947
 33230              	.LBE4412:
 33231              	.LBE4411:
4682:src/xeq.c     **** 						set_NaN(&r);
 33232              		.loc 1 4682 18 view .LVU8948
 33233 0b36 0DF1E40A 		add	r10, sp, #228
 33234              	.LBB4414:
 33235              	.LBB4413:
 819:src/xeq.c     **** }
 33236              		.loc 1 819 9 view .LVU8949
 33237 0b3a FFF7FEFF 		bl	getRegister
 33238              	.LVL2570:
 819:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 839


 33239              		.loc 1 819 9 view .LVU8950
 33240              	.LBE4413:
 33241              	.LBE4414:
4682:src/xeq.c     **** 						set_NaN(&r);
 33242              		.loc 1 4682 6 is_stmt 1 view .LVU8951
4682:src/xeq.c     **** 						set_NaN(&r);
 33243              		.loc 1 4682 18 is_stmt 0 view .LVU8952
 33244 0b3e 30A9     		add	r1, sp, #192
 33245 0b40 5046     		mov	r0, r10
 33246 0b42 A847     		blx	r5
 33247              	.LVL2571:
4682:src/xeq.c     **** 						set_NaN(&r);
 33248              		.loc 1 4682 9 view .LVU8953
 33249 0b44 0028     		cmp	r0, #0
 33250 0b46 00F0EA80 		beq	.L2495
 33251              	.L2265:
4684:src/xeq.c     **** 					setX(&r);
 33252              		.loc 1 4684 6 is_stmt 1 view .LVU8954
 33253              	.LBB4415:
 33254              	.LBI4415:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33255              		.loc 1 786 6 view .LVU8955
 33256              	.LBB4416:
 787:src/xeq.c     **** }
 33257              		.loc 1 787 2 view .LVU8956
 33258 0b4a 2D4B     		ldr	r3, .L2508
 33259 0b4c 0593     		str	r3, [sp, #20]
 33260 0b4e 6421     		movs	r1, #100
 33261 0b50 6C20     		movs	r0, #108
 33262 0b52 FFF7FEFF 		bl	copyreg_n
 33263              	.LVL2572:
 33264              	.LBE4416:
 33265              	.LBE4415:
4685:src/xeq.c     **** 				}
 33266              		.loc 1 4685 6 view .LVU8957
 33267              	.LBB4417:
 33268              	.LBI4417:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 33269              		.loc 1 822 6 view .LVU8958
 33270              	.LBB4418:
 823:src/xeq.c     **** }
 33271              		.loc 1 823 2 view .LVU8959
 33272 0b56 D7E7     		b	.L2452
 33273              	.LVL2573:
 33274              	.L2268:
 823:src/xeq.c     **** }
 33275              		.loc 1 823 2 is_stmt 0 view .LVU8960
 33276              	.LBE4418:
 33277              	.LBE4417:
 33278              	.LBE4410:
 33279              	.LBE4409:
 33280              	.LBE4424:
 33281              	.LBE4585:
 33282              	.LBB4586:
 33283              	.LBB4309:
4751:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33284              		.loc 1 4751 4 is_stmt 1 view .LVU8961
ARM GAS  /tmp/ccQQPlfu.s 			page 840


4751:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33285              		.loc 1 4751 10 is_stmt 0 view .LVU8962
 33286 0b58 2F4B     		ldr	r3, .L2508+24
 33287 0b5a 05EB4505 		add	r5, r5, r5, lsl #1
 33288              	.LVL2574:
4751:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33289              		.loc 1 4751 10 view .LVU8963
 33290 0b5e 53F83550 		ldr	r5, [r3, r5, lsl #3]
4751:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33291              		.loc 1 4751 7 view .LVU8964
 33292 0b62 002D     		cmp	r5, #0
 33293 0b64 8DD0     		beq	.L2279
 33294              	.LBB4286:
4752:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33295              		.loc 1 4752 5 is_stmt 1 view .LVU8965
 33296              	.LVL2575:
4753:src/xeq.c     **** 					return;
 33297              		.loc 1 4753 5 view .LVU8966
4753:src/xeq.c     **** 					return;
 33298              		.loc 1 4753 9 is_stmt 0 view .LVU8967
 33299 0b66 2846     		mov	r0, r5
 33300 0b68 FFF7FEFF 		bl	dispatch_xrom
 33301              	.LVL2576:
4753:src/xeq.c     **** 					return;
 33302              		.loc 1 4753 8 view .LVU8968
 33303 0b6c 0028     		cmp	r0, #0
 33304 0b6e 7FF48DAD 		bne	.L2167
 33305              	.LBB4287:
4756:src/xeq.c     **** 					getXY(&x, &y);
 33306              		.loc 1 4756 6 is_stmt 1 view .LVU8969
4757:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
 33307              		.loc 1 4757 6 view .LVU8970
 33308              	.LVL2577:
 33309              	.LBB4288:
 33310              	.LBI4288:
 848:src/xeq.c     **** 	getX(x);
 33311              		.loc 1 848 6 view .LVU8971
 33312              	.LBE4288:
 33313              	.LBE4287:
 33314              	.LBE4286:
 33315              	.LBE4309:
 33316              	.LBE4586:
 849:src/xeq.c     **** 	getY(y);
 33317              		.loc 1 849 2 view .LVU8972
 33318              	.LBB4587:
 33319              	.LBB4310:
 33320              	.LBB4303:
 33321              	.LBB4300:
 33322              	.LBB4295:
 33323              	.LBB4289:
 33324              	.LBI4289:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33325              		.loc 1 818 12 view .LVU8973
 33326              	.LBB4290:
 819:src/xeq.c     **** }
 33327              		.loc 1 819 2 view .LVU8974
 819:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 841


 33328              		.loc 1 819 9 is_stmt 0 view .LVU8975
 33329 0b72 6421     		movs	r1, #100
 33330 0b74 27A8     		add	r0, sp, #156
 33331              	.LVL2578:
 819:src/xeq.c     **** }
 33332              		.loc 1 819 9 view .LVU8976
 33333 0b76 FFF7FEFF 		bl	getRegister
 33334              	.LVL2579:
 819:src/xeq.c     **** }
 33335              		.loc 1 819 9 view .LVU8977
 33336              	.LBE4290:
 33337              	.LBE4289:
 33338              	.LBE4295:
 33339              	.LBE4300:
 33340              	.LBE4303:
 33341              	.LBE4310:
 33342              	.LBE4587:
 850:src/xeq.c     **** }
 33343              		.loc 1 850 2 is_stmt 1 view .LVU8978
 33344              	.LBB4588:
 33345              	.LBB4311:
 33346              	.LBB4304:
 33347              	.LBB4301:
 33348              	.LBB4296:
 33349              	.LBB4291:
 33350              	.LBI4291:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 33351              		.loc 1 826 6 view .LVU8979
 33352              	.LBB4292:
 827:src/xeq.c     **** }
 33353              		.loc 1 827 2 view .LVU8980
 33354              	.LBE4292:
 33355              	.LBE4291:
 33356              	.LBE4296:
4758:src/xeq.c     **** 						set_NaN(&r);
 33357              		.loc 1 4758 18 is_stmt 0 view .LVU8981
 33358 0b7a 0DF1E40A 		add	r10, sp, #228
 33359              	.LBB4297:
 33360              	.LBB4294:
 33361              	.LBB4293:
 827:src/xeq.c     **** }
 33362              		.loc 1 827 2 view .LVU8982
 33363 0b7e 6521     		movs	r1, #101
 33364 0b80 30A8     		add	r0, sp, #192
 33365              	.LVL2580:
 827:src/xeq.c     **** }
 33366              		.loc 1 827 2 view .LVU8983
 33367 0b82 FFF7FEFF 		bl	getRegister
 33368              	.LVL2581:
 827:src/xeq.c     **** }
 33369              		.loc 1 827 2 view .LVU8984
 33370              	.LBE4293:
 33371              	.LBE4294:
 33372              	.LBE4297:
4758:src/xeq.c     **** 						set_NaN(&r);
 33373              		.loc 1 4758 6 is_stmt 1 view .LVU8985
4758:src/xeq.c     **** 						set_NaN(&r);
ARM GAS  /tmp/ccQQPlfu.s 			page 842


 33374              		.loc 1 4758 18 is_stmt 0 view .LVU8986
 33375 0b86 27AA     		add	r2, sp, #156
 33376 0b88 30A9     		add	r1, sp, #192
 33377 0b8a 5046     		mov	r0, r10
 33378 0b8c A847     		blx	r5
 33379              	.LVL2582:
4758:src/xeq.c     **** 						set_NaN(&r);
 33380              		.loc 1 4758 9 view .LVU8987
 33381 0b8e 0028     		cmp	r0, #0
 33382 0b90 00F09E80 		beq	.L2496
 33383              	.L2273:
4760:src/xeq.c     **** 					lower();
 33384              		.loc 1 4760 6 is_stmt 1 view .LVU8988
 33385              	.LBB4298:
 33386              	.LBI4298:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33387              		.loc 1 786 6 view .LVU8989
 33388              	.LBB4299:
 787:src/xeq.c     **** }
 33389              		.loc 1 787 2 view .LVU8990
 33390 0b94 1A4B     		ldr	r3, .L2508
 33391 0b96 0593     		str	r3, [sp, #20]
 33392 0b98 6421     		movs	r1, #100
 33393 0b9a 6C20     		movs	r0, #108
 33394 0b9c FFF7FEFF 		bl	copyreg_n
 33395              	.LVL2583:
 33396              	.LBE4299:
 33397              	.LBE4298:
4761:src/xeq.c     **** 					setX(&r);
 33398              		.loc 1 4761 6 view .LVU8991
 33399 0ba0 B0E7     		b	.L2450
 33400              	.LVL2584:
 33401              	.L2434:
4761:src/xeq.c     **** 					setX(&r);
 33402              		.loc 1 4761 6 is_stmt 0 view .LVU8992
 33403              	.LBE4301:
 33404              	.LBE4304:
 33405              	.LBE4311:
 33406              	.LBE4588:
 33407              	.LBB4589:
 33408              	.LBB4382:
4618:src/xeq.c     **** 			bad_mode_error();
 33409              		.loc 1 4618 23 view .LVU8993
 33410 0ba2 01EB0513 		add	r3, r1, r5, lsl #4
 33411 0ba6 4FEA051A 		lsl	r10, r5, #4
4618:src/xeq.c     **** 			bad_mode_error();
 33412              		.loc 1 4618 20 view .LVU8994
 33413 0baa 93F90430 		ldrsb	r3, [r3, #4]
 33414 0bae 002B     		cmp	r3, #0
 33415 0bb0 BFF6DDAB 		bge	.L2246
4619:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
 33416              		.loc 1 4619 4 is_stmt 1 view .LVU8995
 33417              	.LBB4373:
 33418              	.LBI4373:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 33419              		.loc 1 569 6 view .LVU8996
 33420              	.LBE4373:
ARM GAS  /tmp/ccQQPlfu.s 			page 843


 33421              	.LBE4382:
 33422              	.LBE4589:
 570:src/xeq.c     **** }
 33423              		.loc 1 570 2 view .LVU8997
 33424              	.LVL2585:
 33425              	.LBB4590:
 33426              	.LBB4383:
 33427              	.LBB4378:
 33428              	.LBB4374:
 33429              	.LBI4374:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33430              		.loc 1 540 5 view .LVU8998
 33431              	.LBB4375:
 541:src/xeq.c     **** 		Error = e;
 33432              		.loc 1 541 2 view .LVU8999
 541:src/xeq.c     **** 		Error = e;
 33433              		.loc 1 541 12 is_stmt 0 view .LVU9000
 33434 0bb4 124B     		ldr	r3, .L2508
 541:src/xeq.c     **** 		Error = e;
 33435              		.loc 1 541 5 view .LVU9001
 33436 0bb6 1968     		ldr	r1, [r3]
 33437 0bb8 0029     		cmp	r1, #0
 33438 0bba 7FF4F7AB 		bne	.L2247
 33439              	.LVL2586:
 33440              	.LBB4376:
 33441              	.LBI4376:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33442              		.loc 1 540 5 is_stmt 1 view .LVU9002
 33443              	.LBB4377:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 33444              		.loc 1 542 3 view .LVU9003
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 33445              		.loc 1 542 9 is_stmt 0 view .LVU9004
 33446 0bbe 0D21     		movs	r1, #13
 33447 0bc0 1960     		str	r1, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 33448              		.loc 1 543 3 is_stmt 1 view .LVU9005
 33449 0bc2 FFF7F3BB 		b	.L2247
 33450              	.LVL2587:
 33451              	.L2254:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 33452              		.loc 1 543 3 is_stmt 0 view .LVU9006
 33453              	.LBE4377:
 33454              	.LBE4376:
 33455              	.LBE4375:
 33456              	.LBE4374:
 33457              	.LBE4378:
4640:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33458              		.loc 1 4640 7 is_stmt 1 view .LVU9007
4640:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33459              		.loc 1 4640 10 is_stmt 0 view .LVU9008
 33460 0bc6 3F2D     		cmp	r5, #63
 33461 0bc8 3FF461AD 		beq	.L2445
4640:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33462              		.loc 1 4640 29 view .LVU9009
 33463 0bcc 0B2D     		cmp	r5, #11
 33464 0bce 3FF45EAD 		beq	.L2445
ARM GAS  /tmp/ccQQPlfu.s 			page 844


 33465 0bd2 F6E5     		b	.L2307
 33466              	.L2481:
4640:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33467              		.loc 1 4640 29 view .LVU9010
 33468 0bd4 0A4B     		ldr	r3, .L2508
 33469 0bd6 FFF7E9BB 		b	.L2247
 33470              	.LVL2588:
 33471              	.L2299:
4640:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33472              		.loc 1 4640 29 view .LVU9011
 33473              	.LBE4383:
 33474              	.LBE4590:
5401:src/xeq.c     **** 					}
 33475              		.loc 1 5401 7 is_stmt 1 view .LVU9012
 33476 0bda 7D21     		movs	r1, #125
 33477 0bdc 0C20     		movs	r0, #12
 33478 0bde 0393     		str	r3, [sp, #12]
 33479 0be0 FFF7FEFF 		bl	cmdregs
 33480              	.LVL2589:
 33481 0be4 039B     		ldr	r3, [sp, #12]
5403:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33482              		.loc 1 5403 20 is_stmt 0 view .LVU9013
 33483 0be6 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 33484 0be8 1968     		ldr	r1, [r3]
5403:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33485              		.loc 1 5403 6 is_stmt 1 view .LVU9014
5403:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33486              		.loc 1 5403 20 is_stmt 0 view .LVU9015
 33487 0bea 68F3C712 		bfi	r2, r8, #7, #1
 33488 0bee 6A70     		strb	r2, [r5, #1]
5404:src/xeq.c     **** 						UState.mode_double = 1;
 33489              		.loc 1 5404 6 is_stmt 1 view .LVU9016
5404:src/xeq.c     **** 						UState.mode_double = 1;
 33490              		.loc 1 5404 9 is_stmt 0 view .LVU9017
 33491 0bf0 0029     		cmp	r1, #0
 33492 0bf2 3FF469AD 		beq	.L2298
5409:src/xeq.c     **** 				}
 33493              		.loc 1 5409 7 is_stmt 1 view .LVU9018
5409:src/xeq.c     **** 				}
 33494              		.loc 1 5409 13 is_stmt 0 view .LVU9019
 33495 0bf6 C3F80080 		str	r8, [r3]
 33496 0bfa FFF76ABB 		b	.L2296
 33497              	.L2509:
 33498 0bfe 00BF     		.align	2
 33499              	.L2508:
 33500 0c00 00000000 		.word	Error
 33501 0c04 00000000 		.word	const_1
 33502 0c08 00000000 		.word	const_0
 33503 0c0c 00000000 		.word	XromRunning
 33504 0c10 00000000 		.word	trifuncs
 33505 0c14 00000000 		.word	monfuncs
 33506 0c18 00000000 		.word	dyfuncs
 33507 0c1c 00000000 		.word	Running
 33508              	.LVL2590:
 33509              	.L2482:
5409:src/xeq.c     **** 				}
 33510              		.loc 1 5409 13 view .LVU9020
ARM GAS  /tmp/ccQQPlfu.s 			page 845


 33511 0c20 0593     		str	r3, [sp, #20]
 33512              	.LVL2591:
 33513              	.LBB4591:
 33514              	.LBB4384:
 33515              	.LBB4379:
 33516              	.LBB4361:
 33517              	.LBB4360:
 743:src/xeq.c     **** }
 33518              		.loc 1 743 3 is_stmt 1 view .LVU9021
 33519 0c22 FFF7FEFF 		bl	lift
 33520              	.LVL2592:
 33521 0c26 059B     		ldr	r3, [sp, #20]
 33522              	.L2249:
 33523              	.LBE4360:
 33524              	.LBE4361:
4627:src/xeq.c     **** 				default:
 33525              		.loc 1 4627 13 view .LVU9022
 33526              	.LBB4362:
 33527              	.LBI4362:
 741:src/xeq.c     **** 	if (get_lift())
 33528              		.loc 1 741 6 view .LVU9023
 33529              	.LBB4363:
 742:src/xeq.c     **** 		lift();
 33530              		.loc 1 742 2 view .LVU9024
 33531              	.LBB4364:
 33532              	.LBI4364:
 737:src/xeq.c     **** 	return State2.state_lift;
 33533              		.loc 1 737 12 view .LVU9025
 33534              	.LBB4365:
 738:src/xeq.c     **** }
 33535              		.loc 1 738 2 view .LVU9026
 738:src/xeq.c     **** }
 33536              		.loc 1 738 15 is_stmt 0 view .LVU9027
 33537 0c28 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 33538              	.LBE4365:
 33539              	.LBE4364:
 742:src/xeq.c     **** 		lift();
 33540              		.loc 1 742 5 view .LVU9028
 33541 0c2a 5006     		lsls	r0, r2, #25
 33542 0c2c 7FF5BAAB 		bpl	.L2250
 33543 0c30 0593     		str	r3, [sp, #20]
 743:src/xeq.c     **** }
 33544              		.loc 1 743 3 is_stmt 1 view .LVU9029
 33545 0c32 FFF7FEFF 		bl	lift
 33546              	.LVL2593:
 33547 0c36 059B     		ldr	r3, [sp, #20]
 33548 0c38 FFF7B4BB 		b	.L2250
 33549              	.LVL2594:
 33550              	.L2234:
 743:src/xeq.c     **** }
 33551              		.loc 1 743 3 is_stmt 0 view .LVU9030
 33552              	.LBE4363:
 33553              	.LBE4362:
 33554              	.LBE4379:
 33555              	.LBE4384:
 33556              	.LBE4591:
 33557              	.LBB4592:
ARM GAS  /tmp/ccQQPlfu.s 			page 846


 33558              	.LBB4256:
4036:src/xeq.c     **** 		    lift();
 33559              		.loc 1 4036 7 is_stmt 1 view .LVU9031
 33560              	.LBB4229:
 33561              	.LBI4229:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 33562              		.loc 1 1220 6 view .LVU9032
 33563              	.LBB4230:
1221:src/xeq.c     **** 
 33564              		.loc 1 1221 2 view .LVU9033
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33565              		.loc 1 1223 2 view .LVU9034
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33566              		.loc 1 1223 5 is_stmt 0 view .LVU9035
 33567 0c3c 002B     		cmp	r3, #0
 33568 0c3e 72D1     		bne	.L2497
 33569              	.L2238:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33570              		.loc 1 1223 5 view .LVU9036
 33571              	.LBE4230:
 33572              	.LBE4229:
4037:src/xeq.c     **** 		    clr_lift();
 33573              		.loc 1 4037 7 is_stmt 1 view .LVU9037
 33574 0c40 FFF7FEFF 		bl	lift
 33575              	.LVL2595:
 33576 0c44 E2E6     		b	.L2447
 33577              	.LVL2596:
 33578              	.L2229:
4006:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33579              		.loc 1 4006 8 view .LVU9038
4006:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33580              		.loc 1 4006 12 is_stmt 0 view .LVU9039
 33581 0c46 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
4006:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33582              		.loc 1 4006 11 view .LVU9040
 33583 0c48 002B     		cmp	r3, #0
 33584 0c4a 5FD0     		beq	.L2230
4008:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33585              		.loc 1 4008 4 is_stmt 1 view .LVU9041
4008:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33586              		.loc 1 4008 7 is_stmt 0 view .LVU9042
 33587 0c4c 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
4008:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33588              		.loc 1 4008 48 view .LVU9043
 33589 0c4e 013B     		subs	r3, r3, #1
4008:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33590              		.loc 1 4008 7 view .LVU9044
 33591 0c50 22B1     		cbz	r2, .L2231
4008:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33592              		.loc 1 4008 34 view .LVU9045
 33593 0c52 E118     		adds	r1, r4, r3
4008:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33594              		.loc 1 4008 24 view .LVU9046
 33595 0c54 91F82020 		ldrb	r2, [r1, #32]	@ zero_extendqisi2
 33596 0c58 442A     		cmp	r2, #68
 33597 0c5a 7ED0     		beq	.L2498
 33598              	.L2231:
ARM GAS  /tmp/ccQQPlfu.s 			page 847


4013:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33599              		.loc 1 4013 4 is_stmt 1 view .LVU9047
4013:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33600              		.loc 1 4013 17 is_stmt 0 view .LVU9048
 33601 0c5c DBB2     		uxtb	r3, r3
4014:src/xeq.c     **** 				CmdLineEex = 0;
 33602              		.loc 1 4014 15 view .LVU9049
 33603 0c5e E218     		adds	r2, r4, r3
4013:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33604              		.loc 1 4013 17 view .LVU9050
 33605 0c60 2377     		strb	r3, [r4, #28]
4014:src/xeq.c     **** 				CmdLineEex = 0;
 33606              		.loc 1 4014 4 is_stmt 1 view .LVU9051
4014:src/xeq.c     **** 				CmdLineEex = 0;
 33607              		.loc 1 4014 15 is_stmt 0 view .LVU9052
 33608 0c62 92F82030 		ldrb	r3, [r2, #32]	@ zero_extendqisi2
4014:src/xeq.c     **** 				CmdLineEex = 0;
 33609              		.loc 1 4014 7 view .LVU9053
 33610 0c66 452B     		cmp	r3, #69
 33611 0c68 64D0     		beq	.L2499
4016:src/xeq.c     **** 				CmdLineDot--;
 33612              		.loc 1 4016 9 is_stmt 1 view .LVU9054
4016:src/xeq.c     **** 				CmdLineDot--;
 33613              		.loc 1 4016 12 is_stmt 0 view .LVU9055
 33614 0c6a 2E2B     		cmp	r3, #46
 33615 0c6c 7FF40EAD 		bne	.L2167
4017:src/xeq.c     **** 		} else
 33616              		.loc 1 4017 5 is_stmt 1 view .LVU9056
4017:src/xeq.c     **** 		} else
 33617              		.loc 1 4017 15 is_stmt 0 view .LVU9057
 33618 0c70 A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 33619 0c72 454B     		ldr	r3, .L2510
 33620 0c74 013A     		subs	r2, r2, #1
 33621 0c76 A277     		strb	r2, [r4, #30]
 33622 0c78 1A68     		ldr	r2, [r3]
 33623 0c7a FFF782BA 		b	.L2170
 33624              	.LVL2597:
 33625              	.L2228:
 33626              	.LBB4232:
3994:src/xeq.c     **** 
 33627              		.loc 1 3994 4 is_stmt 1 view .LVU9058
3996:src/xeq.c     **** 			dn_minus(&r, &x);
 33628              		.loc 1 3996 4 view .LVU9059
 33629              	.LBB4233:
 33630              	.LBI4233:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33631              		.loc 1 818 12 view .LVU9060
 33632              	.LBB4234:
 819:src/xeq.c     **** }
 33633              		.loc 1 819 2 view .LVU9061
 819:src/xeq.c     **** }
 33634              		.loc 1 819 9 is_stmt 0 view .LVU9062
 33635 0c7e 30A8     		add	r0, sp, #192
 33636              	.LVL2598:
 819:src/xeq.c     **** }
 33637              		.loc 1 819 9 view .LVU9063
 33638 0c80 6421     		movs	r1, #100
ARM GAS  /tmp/ccQQPlfu.s 			page 848


 33639 0c82 FFF7FEFF 		bl	getRegister
 33640              	.LVL2599:
 819:src/xeq.c     **** }
 33641              		.loc 1 819 9 view .LVU9064
 33642              	.LBE4234:
 33643              	.LBE4233:
3997:src/xeq.c     **** 			setX(&r);
 33644              		.loc 1 3997 4 is_stmt 1 view .LVU9065
 33645 0c86 30A9     		add	r1, sp, #192
 33646 0c88 39A8     		add	r0, sp, #228
 33647 0c8a FFF7FEFF 		bl	dn_minus
 33648              	.LVL2600:
3998:src/xeq.c     **** 			set_lift();
 33649              		.loc 1 3998 4 view .LVU9066
 33650              	.LBB4235:
 33651              	.LBI4235:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 33652              		.loc 1 822 6 view .LVU9067
 33653              	.LBB4236:
 823:src/xeq.c     **** }
 33654              		.loc 1 823 2 view .LVU9068
 33655 0c8e 39A9     		add	r1, sp, #228
 33656              	.LVL2601:
 823:src/xeq.c     **** }
 33657              		.loc 1 823 2 is_stmt 0 view .LVU9069
 33658 0c90 6420     		movs	r0, #100
 33659 0c92 FFF7FEFF 		bl	setRegister
 33660              	.LVL2602:
 823:src/xeq.c     **** }
 33661              		.loc 1 823 2 view .LVU9070
 33662              	.LBE4236:
 33663              	.LBE4235:
3999:src/xeq.c     **** 		}
 33664              		.loc 1 3999 4 is_stmt 1 view .LVU9071
 33665              	.LBB4237:
 33666              	.LBI4237:
 761:src/xeq.c     ****     State2.state_lift = 1;
 33667              		.loc 1 761 6 view .LVU9072
 33668              	.LBB4238:
 762:src/xeq.c     **** }
 33669              		.loc 1 762 5 view .LVU9073
 33670 0c96 FFF76EBA 		b	.L2444
 33671              	.L2492:
 33672              	.LBE4238:
 33673              	.LBE4237:
 33674              	.LBE4232:
3989:src/xeq.c     **** 		else if (is_intmode()) {
 33675              		.loc 1 3989 4 view .LVU9074
 33676              	.LBB4239:
 33677              	.LBI4239:
3232:src/xeq.c     **** 	if (CmdLineEex) {
 33678              		.loc 1 3232 13 view .LVU9075
 33679              	.LBB4240:
3233:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33680              		.loc 1 3233 2 view .LVU9076
3233:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33681              		.loc 1 3233 6 is_stmt 0 view .LVU9077
ARM GAS  /tmp/ccQQPlfu.s 			page 849


 33682 0c9a 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3233:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33683              		.loc 1 3233 5 view .LVU9078
 33684 0c9c E3B1     		cbz	r3, .L2225
3237:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
 33685              		.loc 1 3237 3 is_stmt 1 view .LVU9079
3238:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 33686              		.loc 1 3238 4 view .LVU9080
3238:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 33687              		.loc 1 3238 24 is_stmt 0 view .LVU9081
 33688 0c9e E218     		adds	r2, r4, r3
 33689 0ca0 394B     		ldr	r3, .L2510
 33690 0ca2 92F82010 		ldrb	r1, [r2, #32]	@ zero_extendqisi2
 33691 0ca6 81F00101 		eor	r1, r1, #1
 33692 0caa 82F82010 		strb	r1, [r2, #32]
 33693 0cae 1A68     		ldr	r2, [r3]
 33694 0cb0 FFF767BA 		b	.L2170
 33695              	.L2432:
 33696              	.LBE4240:
 33697              	.LBE4239:
4024:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 33698              		.loc 1 4024 31 view .LVU9082
 33699 0cb4 354D     		ldr	r5, .L2510+4
 33700              	.LVL2603:
4024:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 33701              		.loc 1 4024 43 view .LVU9083
 33702 0cb6 DFF8E0A0 		ldr	r10, .L2510+16
 33703              	.LVL2604:
4024:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 33704              		.loc 1 4024 29 view .LVU9084
 33705 0cba 2A68     		ldr	r2, [r5]
 33706 0cbc DAF80030 		ldr	r3, [r10]
 33707 0cc0 1343     		orrs	r3, r2, r3
 33708 0cc2 51D0     		beq	.L2500
4028:src/xeq.c     **** 		      lift();
 33709              		.loc 1 4028 9 is_stmt 1 view .LVU9085
 33710              	.LBB4243:
 33711              	.LBI4243:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 33712              		.loc 1 1220 6 view .LVU9086
 33713              	.LBB4244:
1221:src/xeq.c     **** 
 33714              		.loc 1 1221 2 view .LVU9087
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33715              		.loc 1 1223 2 view .LVU9088
 33716 0cc4 FFF7FEFF 		bl	process_cmdline.part.0
 33717              	.LVL2605:
 33718 0cc8 98E6     		b	.L2235
 33719              	.LVL2606:
 33720              	.L2491:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33721              		.loc 1 1223 2 is_stmt 0 view .LVU9089
 33722              	.LBE4244:
 33723              	.LBE4243:
4052:src/xeq.c     **** 		else
 33724              		.loc 1 4052 4 is_stmt 1 view .LVU9090
 33725 0cca FFF7FEFF 		bl	sigma_plus
ARM GAS  /tmp/ccQQPlfu.s 			page 850


 33726              	.LVL2607:
 33727 0cce 03E6     		b	.L2243
 33728              	.LVL2608:
 33729              	.L2496:
4052:src/xeq.c     **** 		else
 33730              		.loc 1 4052 4 is_stmt 0 view .LVU9091
 33731              	.LBE4256:
 33732              	.LBE4592:
 33733              	.LBB4593:
 33734              	.LBB4312:
 33735              	.LBB4305:
 33736              	.LBB4302:
4759:src/xeq.c     **** 					setlastX();
 33737              		.loc 1 4759 7 is_stmt 1 view .LVU9092
 33738 0cd0 5046     		mov	r0, r10
 33739 0cd2 FFF7FEFF 		bl	set_NaN
 33740              	.LVL2609:
 33741 0cd6 5DE7     		b	.L2273
 33742              	.LVL2610:
 33743              	.L2225:
4759:src/xeq.c     **** 					setlastX();
 33744              		.loc 1 4759 7 is_stmt 0 view .LVU9093
 33745              	.LBE4302:
 33746              	.LBE4305:
 33747              	.LBE4312:
 33748              	.LBE4593:
 33749              	.LBB4594:
 33750              	.LBB4257:
 33751              	.LBB4245:
 33752              	.LBB4241:
3264:src/xeq.c     **** 			if (CmdLineLength > 1)
 33753              		.loc 1 3264 3 is_stmt 1 view .LVU9094
3264:src/xeq.c     **** 			if (CmdLineLength > 1)
 33754              		.loc 1 3264 6 is_stmt 0 view .LVU9095
 33755 0cd8 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 33756 0cdc 2D2B     		cmp	r3, #45
 33757 0cde 2FD0     		beq	.L2501
3268:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 33758              		.loc 1 3268 10 is_stmt 1 view .LVU9096
3268:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 33759              		.loc 1 3268 13 is_stmt 0 view .LVU9097
 33760 0ce0 122A     		cmp	r2, #18
 33761 0ce2 3FF6D3AC 		bhi	.L2167
3269:src/xeq.c     **** 			Cmdline[0] = '-';
 33762              		.loc 1 3269 4 is_stmt 1 view .LVU9098
 33763 0ce6 2A49     		ldr	r1, .L2510+8
 33764 0ce8 274B     		ldr	r3, .L2510
 33765 0cea 0593     		str	r3, [sp, #20]
 33766 0cec 481C     		adds	r0, r1, #1
 33767 0cee FFF7FEFF 		bl	xcopy
 33768              	.LVL2611:
3270:src/xeq.c     **** 			CmdLineLength++;
 33769              		.loc 1 3270 4 view .LVU9099
3271:src/xeq.c     **** 		}
 33770              		.loc 1 3271 17 is_stmt 0 view .LVU9100
 33771 0cf2 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 33772 0cf4 059B     		ldr	r3, [sp, #20]
ARM GAS  /tmp/ccQQPlfu.s 			page 851


 33773 0cf6 0131     		adds	r1, r1, #1
3270:src/xeq.c     **** 			CmdLineLength++;
 33774              		.loc 1 3270 15 view .LVU9101
 33775 0cf8 2D20     		movs	r0, #45
 33776 0cfa 1A68     		ldr	r2, [r3]
3271:src/xeq.c     **** 		}
 33777              		.loc 1 3271 17 view .LVU9102
 33778 0cfc 2177     		strb	r1, [r4, #28]
3270:src/xeq.c     **** 			CmdLineLength++;
 33779              		.loc 1 3270 15 view .LVU9103
 33780 0cfe 84F82000 		strb	r0, [r4, #32]
3271:src/xeq.c     **** 		}
 33781              		.loc 1 3271 4 is_stmt 1 view .LVU9104
 33782 0d02 FFF73EBA 		b	.L2170
 33783              	.LVL2612:
 33784              	.L2490:
3271:src/xeq.c     **** 		}
 33785              		.loc 1 3271 4 is_stmt 0 view .LVU9105
 33786              	.LBE4241:
 33787              	.LBE4245:
 33788              	.LBB4246:
 33789              	.LBB4192:
 33790 0d06 FFF7FEFF 		bl	process_cmdline.part.0
 33791              	.LVL2613:
 33792 0d0a D7E5     		b	.L2241
 33793              	.LVL2614:
 33794              	.L2230:
3271:src/xeq.c     **** 		}
 33795              		.loc 1 3271 4 view .LVU9106
 33796              	.LBE4192:
 33797              	.LBE4246:
4019:src/xeq.c     **** 		break;
 33798              		.loc 1 4019 4 is_stmt 1 view .LVU9107
 33799 0d0c 1E4B     		ldr	r3, .L2510
 33800 0d0e 0593     		str	r3, [sp, #20]
 33801 0d10 3F20     		movs	r0, #63
 33802 0d12 FFF7FEFF 		bl	clrx
 33803              	.LVL2615:
 33804 0d16 059B     		ldr	r3, [sp, #20]
 33805 0d18 1A68     		ldr	r2, [r3]
 33806 0d1a FFF732BA 		b	.L2170
 33807              	.LVL2616:
 33808              	.L2495:
4019:src/xeq.c     **** 		break;
 33809              		.loc 1 4019 4 is_stmt 0 view .LVU9108
 33810              	.LBE4257:
 33811              	.LBE4594:
 33812              	.LBB4595:
 33813              	.LBB4425:
 33814              	.LBB4420:
 33815              	.LBB4419:
4683:src/xeq.c     **** 					setlastX();
 33816              		.loc 1 4683 7 is_stmt 1 view .LVU9109
 33817 0d1e 5046     		mov	r0, r10
 33818 0d20 FFF7FEFF 		bl	set_NaN
 33819              	.LVL2617:
 33820 0d24 11E7     		b	.L2265
ARM GAS  /tmp/ccQQPlfu.s 			page 852


 33821              	.LVL2618:
 33822              	.L2497:
4683:src/xeq.c     **** 					setlastX();
 33823              		.loc 1 4683 7 is_stmt 0 view .LVU9110
 33824              	.LBE4419:
 33825              	.LBE4420:
 33826              	.LBE4425:
 33827              	.LBE4595:
 33828              	.LBB4596:
 33829              	.LBB4258:
 33830              	.LBB4247:
 33831              	.LBB4231:
 33832 0d26 FFF7FEFF 		bl	process_cmdline.part.0
 33833              	.LVL2619:
 33834 0d2a 89E7     		b	.L2238
 33835              	.LVL2620:
 33836              	.L2494:
4683:src/xeq.c     **** 					setlastX();
 33837              		.loc 1 4683 7 view .LVU9111
 33838              	.LBE4231:
 33839              	.LBE4247:
 33840              	.LBE4258:
 33841              	.LBE4596:
 33842              	.LBB4597:
 33843              	.LBB4476:
 33844              	.LBB4468:
 33845              	.LBB4467:
4835:src/xeq.c     **** 					setlastX();
 33846              		.loc 1 4835 7 is_stmt 1 view .LVU9112
 33847 0d2c 5046     		mov	r0, r10
 33848 0d2e FFF7FEFF 		bl	set_NaN
 33849              	.LVL2621:
 33850 0d32 DFE6     		b	.L2281
 33851              	.LVL2622:
 33852              	.L2499:
4835:src/xeq.c     **** 					setlastX();
 33853              		.loc 1 4835 7 is_stmt 0 view .LVU9113
 33854              	.LBE4467:
 33855              	.LBE4468:
 33856              	.LBE4476:
 33857              	.LBE4597:
 33858              	.LBB4598:
 33859              	.LBB4259:
4015:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 33860              		.loc 1 4015 5 is_stmt 1 view .LVU9114
 33861 0d34 144B     		ldr	r3, .L2510
4015:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 33862              		.loc 1 4015 16 is_stmt 0 view .LVU9115
 33863 0d36 0021     		movs	r1, #0
 33864 0d38 1A68     		ldr	r2, [r3]
 33865 0d3a 6177     		strb	r1, [r4, #29]
 33866 0d3c FFF721BA 		b	.L2170
 33867              	.LVL2623:
 33868              	.L2501:
 33869              	.LBB4248:
 33870              	.LBB4242:
3265:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
ARM GAS  /tmp/ccQQPlfu.s 			page 853


 33871              		.loc 1 3265 4 is_stmt 1 view .LVU9116
3265:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 33872              		.loc 1 3265 7 is_stmt 0 view .LVU9117
 33873 0d40 012A     		cmp	r2, #1
 33874 0d42 03D9     		bls	.L2227
3266:src/xeq.c     **** 			CmdLineLength--;
 33875              		.loc 1 3266 5 is_stmt 1 view .LVU9118
 33876 0d44 1349     		ldr	r1, .L2510+12
 33877 0d46 481E     		subs	r0, r1, #1
 33878 0d48 FFF7FEFF 		bl	xcopy
 33879              	.LVL2624:
 33880              	.L2227:
3267:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33881              		.loc 1 3267 4 view .LVU9119
3267:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33882              		.loc 1 3267 17 is_stmt 0 view .LVU9120
 33883 0d4c 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 33884 0d4e 0E4B     		ldr	r3, .L2510
 33885 0d50 013A     		subs	r2, r2, #1
 33886 0d52 2277     		strb	r2, [r4, #28]
 33887 0d54 1A68     		ldr	r2, [r3]
 33888 0d56 FFF714BA 		b	.L2170
 33889              	.LVL2625:
 33890              	.L2498:
3267:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33891              		.loc 1 3267 17 view .LVU9121
 33892              	.LBE4242:
 33893              	.LBE4248:
4009:src/xeq.c     **** 				break;
 33894              		.loc 1 4009 5 is_stmt 1 view .LVU9122
 33895 0d5a 0B4B     		ldr	r3, .L2510
4009:src/xeq.c     **** 				break;
 33896              		.loc 1 4009 30 is_stmt 0 view .LVU9123
 33897 0d5c 4520     		movs	r0, #69
 33898 0d5e 1A68     		ldr	r2, [r3]
 33899 0d60 81F82000 		strb	r0, [r1, #32]
4010:src/xeq.c     **** 			}
 33900              		.loc 1 4010 5 is_stmt 1 view .LVU9124
 33901 0d64 FFF70DBA 		b	.L2170
 33902              	.LVL2626:
 33903              	.L2500:
4026:src/xeq.c     **** 		    } else {                       //JM
 33904              		.loc 1 4026 9 view .LVU9125
 33905              	.LBB4249:
 33906              	.LBI4249:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 33907              		.loc 1 1220 6 view .LVU9126
 33908              	.LBB4250:
1221:src/xeq.c     **** 
 33909              		.loc 1 1221 2 view .LVU9127
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33910              		.loc 1 1223 2 view .LVU9128
 33911 0d68 074B     		ldr	r3, .L2510
 33912 0d6a 0593     		str	r3, [sp, #20]
 33913 0d6c FFF7FEFF 		bl	process_cmdline.part.0
 33914              	.LVL2627:
 33915 0d70 059B     		ldr	r3, [sp, #20]
ARM GAS  /tmp/ccQQPlfu.s 			page 854


 33916 0d72 1A68     		ldr	r2, [r3]
 33917 0d74 FFF705BA 		b	.L2170
 33918              	.LVL2628:
 33919              	.L2221:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33920              		.loc 1 1223 2 is_stmt 0 view .LVU9129
 33921              	.LBE4250:
 33922              	.LBE4249:
3934:src/xeq.c     **** 			CmdLineDot++;
 33923              		.loc 1 3934 5 is_stmt 1 view .LVU9130
 33924 0d78 0020     		movs	r0, #0
 33925 0d7a FFF7FEFF 		bl	digit
 33926              	.LVL2629:
 33927 0d7e 09E6     		b	.L2222
 33928              	.LVL2630:
 33929              	.L2493:
 33930              	.LBB4251:
3981:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 33931              		.loc 1 3981 5 view .LVU9131
 33932 0d80 0120     		movs	r0, #1
 33933 0d82 FFF7FEFF 		bl	digit
 33934              	.LVL2631:
 33935 0d86 5DE6     		b	.L2223
 33936              	.L2511:
 33937              		.align	2
 33938              	.L2510:
 33939 0d88 00000000 		.word	Error
 33940 0d8c 00000000 		.word	XromRunning
 33941 0d90 20000000 		.word	StateWhileOn+32
 33942 0d94 21000000 		.word	StateWhileOn+33
 33943 0d98 00000000 		.word	Running
 33944              	.LBE4251:
 33945              	.LBE4259:
 33946              	.LBE4598:
 33947              		.cfi_endproc
 33948              	.LFE250:
 33950              		.section	.text.xeq_single,"ax",%progbits
 33951              		.align	1
 33952              		.p2align 2,,3
 33953              		.syntax unified
 33954              		.thumb
 33955              		.thumb_func
 33956              		.fpu fpv4-sp-d16
 33958              	xeq_single:
 33959              	.LFB251:
5453:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 33960              		.loc 1 5453 30 view -0
 33961              		.cfi_startproc
 33962              		@ args = 0, pretend = 0, frame = 0
 33963              		@ frame_needed = 0, uses_anonymous_args = 0
5454:src/xeq.c     **** 
 33964              		.loc 1 5454 2 view .LVU9133
5454:src/xeq.c     **** 
 33965              		.loc 1 5454 28 is_stmt 0 view .LVU9134
 33966 0000 074B     		ldr	r3, .L2514
 33967 0002 1B68     		ldr	r3, [r3]
5453:src/xeq.c     **** 	const opcode op = getprog(state_pc());
ARM GAS  /tmp/ccQQPlfu.s 			page 855


 33968              		.loc 1 5453 30 view .LVU9135
 33969 0004 10B5     		push	{r4, lr}
 33970              		.cfi_def_cfa_offset 8
 33971              		.cfi_offset 4, -8
 33972              		.cfi_offset 14, -4
5454:src/xeq.c     **** 
 33973              		.loc 1 5454 20 view .LVU9136
 33974 0006 B3F8E007 		ldrh	r0, [r3, #2016]
 33975 000a FFF7FEFF 		bl	getprog
 33976              	.LVL2632:
 33977 000e 0446     		mov	r4, r0
 33978              	.LVL2633:
5456:src/xeq.c     **** 	xeq(op);
 33979              		.loc 1 5456 2 is_stmt 1 view .LVU9137
 33980 0010 FFF7FEFF 		bl	incpc
 33981              	.LVL2634:
5457:src/xeq.c     **** }
 33982              		.loc 1 5457 2 view .LVU9138
 33983 0014 2046     		mov	r0, r4
5458:src/xeq.c     **** 
 33984              		.loc 1 5458 1 is_stmt 0 view .LVU9139
 33985 0016 BDE81040 		pop	{r4, lr}
 33986              		.cfi_restore 14
 33987              		.cfi_restore 4
 33988              		.cfi_def_cfa_offset 0
 33989              	.LVL2635:
5457:src/xeq.c     **** }
 33990              		.loc 1 5457 2 view .LVU9140
 33991 001a FFF7FEBF 		b	xeq
 33992              	.LVL2636:
 33993              	.L2515:
5457:src/xeq.c     **** }
 33994              		.loc 1 5457 2 view .LVU9141
 33995 001e 00BF     		.align	2
 33996              	.L2514:
 33997 0020 00000000 		.word	main_ram
 33998              		.cfi_endproc
 33999              	.LFE251:
 34001              		.section	.text.xeq_xrom2,"ax",%progbits
 34002              		.align	1
 34003              		.p2align 2,,3
 34004              		.syntax unified
 34005              		.thumb
 34006              		.thumb_func
 34007              		.fpu fpv4-sp-d16
 34009              	xeq_xrom2:
 34010              	.LFB252:
5465:src/xeq.c     **** #endif
 34011              		.loc 1 5465 29 is_stmt 1 view -0
 34012              		.cfi_startproc
 34013              		@ args = 0, pretend = 0, frame = 0
 34014              		@ frame_needed = 0, uses_anonymous_args = 0
5467:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
 34015              		.loc 1 5467 2 view .LVU9143
 34016              	.LVL2637:
5471:src/xeq.c     **** 		XromRunning = 1;
 34017              		.loc 1 5471 4 view .LVU9144
ARM GAS  /tmp/ccQQPlfu.s 			page 856


5471:src/xeq.c     **** 		XromRunning = 1;
 34018              		.loc 1 5471 10 view .LVU9145
5465:src/xeq.c     **** #endif
 34019              		.loc 1 5465 29 is_stmt 0 view .LVU9146
 34020 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 34021              		.cfi_def_cfa_offset 32
 34022              		.cfi_offset 4, -32
 34023              		.cfi_offset 5, -28
 34024              		.cfi_offset 6, -24
 34025              		.cfi_offset 7, -20
 34026              		.cfi_offset 8, -16
 34027              		.cfi_offset 9, -12
 34028              		.cfi_offset 10, -8
 34029              		.cfi_offset 14, -4
5471:src/xeq.c     **** 		XromRunning = 1;
 34030              		.loc 1 5471 11 view .LVU9147
 34031 0004 1A4D     		ldr	r5, .L2528
 34032 0006 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5471:src/xeq.c     **** 		XromRunning = 1;
 34033              		.loc 1 5471 10 view .LVU9148
 34034 0008 53BB     		cbnz	r3, .L2516
 34035 000a DFF87080 		ldr	r8, .L2528+12
5472:src/xeq.c     **** 		xeq_single();
 34036              		.loc 1 5472 15 view .LVU9149
 34037 000e 194F     		ldr	r7, .L2528+4
 34038              	.LBB4605:
 34039              	.LBB4606:
4467:src/xeq.c     **** 		Busy = 1;
 34040              		.loc 1 4467 6 view .LVU9150
 34041 0010 DFF86CA0 		ldr	r10, .L2528+16
4467:src/xeq.c     **** 		Busy = 1;
 34042              		.loc 1 4467 15 view .LVU9151
 34043 0014 DFF86C90 		ldr	r9, .L2528+20
 34044 0018 03F0FF04 		and	r4, r3, #255
 34045              	.LVL2638:
 34046              	.L2517:
4467:src/xeq.c     **** 		Busy = 1;
 34047              		.loc 1 4467 15 view .LVU9152
 34048              	.LBE4606:
 34049              	.LBE4605:
5472:src/xeq.c     **** 		xeq_single();
 34050              		.loc 1 5472 3 is_stmt 1 view .LVU9153
 34051              	.LBB4613:
 34052              	.LBI4613:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 34053              		.loc 1 185 5 view .LVU9154
 34054              	.LBB4614:
 186:src/xeq.c     **** }
 34055              		.loc 1 186 2 view .LVU9155
 186:src/xeq.c     **** }
 34056              		.loc 1 186 9 is_stmt 0 view .LVU9156
 34057 001c D8F80020 		ldr	r2, [r8]
 34058 0020 B2F8E037 		ldrh	r3, [r2, #2016]
 34059              	.LBE4614:
 34060              	.LBE4613:
5471:src/xeq.c     **** 		XromRunning = 1;
 34061              		.loc 1 5471 18 view .LVU9157
ARM GAS  /tmp/ccQQPlfu.s 			page 857


 34062 0024 9B0B     		lsrs	r3, r3, #14
5472:src/xeq.c     **** 		xeq_single();
 34063              		.loc 1 5472 15 view .LVU9158
 34064 0026 0126     		movs	r6, #1
5471:src/xeq.c     **** 		XromRunning = 1;
 34065              		.loc 1 5471 18 view .LVU9159
 34066 0028 032B     		cmp	r3, #3
5475:src/xeq.c     **** 			busy();
 34067              		.loc 1 5475 6 view .LVU9160
 34068 002a 3444     		add	r4, r4, r6
 34069              	.LVL2639:
5471:src/xeq.c     **** 		XromRunning = 1;
 34070              		.loc 1 5471 18 view .LVU9161
 34071 002c 18D1     		bne	.L2516
5471:src/xeq.c     **** 		XromRunning = 1;
 34072              		.loc 1 5471 31 discriminator 2 view .LVU9162
 34073 002e B2F9E237 		ldrsh	r3, [r2, #2018]
 34074 0032 ABB1     		cbz	r3, .L2516
5472:src/xeq.c     **** 		xeq_single();
 34075              		.loc 1 5472 15 view .LVU9163
 34076 0034 3E60     		str	r6, [r7]
5473:src/xeq.c     **** 		XromRunning = 0;
 34077              		.loc 1 5473 3 is_stmt 1 view .LVU9164
 34078 0036 FFF7FEFF 		bl	xeq_single
 34079              	.LVL2640:
5474:src/xeq.c     **** 		if ((++count & 31) == 0)
 34080              		.loc 1 5474 3 view .LVU9165
 34081              	.LBB4615:
 34082              	.LBB4609:
4467:src/xeq.c     **** 		Busy = 1;
 34083              		.loc 1 4467 12 is_stmt 0 view .LVU9166
 34084 003a D9F80030 		ldr	r3, [r9]
 34085 003e DAF80010 		ldr	r1, [r10]
 34086 0042 1943     		orrs	r1, r1, r3
 34087              	.LBE4609:
 34088              	.LBE4615:
5475:src/xeq.c     **** 			busy();
 34089              		.loc 1 5475 16 view .LVU9167
 34090 0044 04F01F03 		and	r3, r4, #31
5474:src/xeq.c     **** 		if ((++count & 31) == 0)
 34091              		.loc 1 5474 15 view .LVU9168
 34092 0048 0022     		movs	r2, #0
 34093              	.LBB4616:
 34094              	.LBB4610:
4467:src/xeq.c     **** 		Busy = 1;
 34095              		.loc 1 4467 12 view .LVU9169
 34096 004a 1943     		orrs	r1, r1, r3
 34097              	.LBE4610:
 34098              	.LBE4616:
5474:src/xeq.c     **** 		if ((++count & 31) == 0)
 34099              		.loc 1 5474 15 view .LVU9170
 34100 004c 3A60     		str	r2, [r7]
5475:src/xeq.c     **** 			busy();
 34101              		.loc 1 5475 3 is_stmt 1 view .LVU9171
 34102              	.LVL2641:
5476:src/xeq.c     **** 		  if (Pause)
 34103              		.loc 1 5476 4 view .LVU9172
ARM GAS  /tmp/ccQQPlfu.s 			page 858


 34104              	.LBB4617:
 34105              	.LBI4605:
4452:src/xeq.c     **** {
 34106              		.loc 1 4452 6 view .LVU9173
 34107              	.LBB4611:
4457:src/xeq.c     **** 
 34108              		.loc 1 4457 12 view .LVU9174
4462:src/xeq.c     **** 
 34109              		.loc 1 4462 17 view .LVU9175
4467:src/xeq.c     **** 		Busy = 1;
 34110              		.loc 1 4467 2 view .LVU9176
4467:src/xeq.c     **** 		Busy = 1;
 34111              		.loc 1 4467 12 is_stmt 0 view .LVU9177
 34112 004e 09D0     		beq	.L2527
 34113              	.L2518:
 34114              	.LBE4611:
 34115              	.LBE4617:
5477:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 34116              		.loc 1 5477 5 is_stmt 1 view .LVU9178
5480:src/xeq.c     **** 		
 34117              		.loc 1 5480 4 view .LVU9179
5471:src/xeq.c     **** 		XromRunning = 1;
 34118              		.loc 1 5471 10 view .LVU9180
5477:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 34119              		.loc 1 5477 9 is_stmt 0 view .LVU9181
 34120 0050 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
5471:src/xeq.c     **** 		XromRunning = 1;
 34121              		.loc 1 5471 11 view .LVU9182
 34122 0052 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5477:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 34123              		.loc 1 5477 8 view .LVU9183
 34124 0054 12B1     		cbz	r2, .L2519
5480:src/xeq.c     **** 		
 34125              		.loc 1 5480 12 view .LVU9184
 34126 0056 0122     		movs	r2, #1
 34127 0058 C9F80020 		str	r2, [r9]
 34128              	.L2519:
5471:src/xeq.c     **** 		XromRunning = 1;
 34129              		.loc 1 5471 10 view .LVU9185
 34130 005c 002B     		cmp	r3, #0
 34131 005e DDD0     		beq	.L2517
 34132              	.LVL2642:
 34133              	.L2516:
5483:src/xeq.c     **** 
 34134              		.loc 1 5483 1 view .LVU9186
 34135 0060 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 34136              	.LVL2643:
 34137              	.L2527:
 34138              	.LBB4618:
 34139              	.LBB4612:
 34140              	.LBB4607:
 34141              	.LBI4607:
4452:src/xeq.c     **** {
 34142              		.loc 1 4452 6 is_stmt 1 view .LVU9187
 34143              	.LBB4608:
4468:src/xeq.c     **** 		message("Wait...", NULL);
 34144              		.loc 1 4468 3 view .LVU9188
ARM GAS  /tmp/ccQQPlfu.s 			page 859


4469:src/xeq.c     **** 	}
 34145              		.loc 1 4469 3 is_stmt 0 view .LVU9189
 34146 0064 0448     		ldr	r0, .L2528+8
4468:src/xeq.c     **** 		message("Wait...", NULL);
 34147              		.loc 1 4468 8 view .LVU9190
 34148 0066 CAF80060 		str	r6, [r10]
4469:src/xeq.c     **** 	}
 34149              		.loc 1 4469 3 is_stmt 1 view .LVU9191
 34150 006a FFF7FEFF 		bl	message
 34151              	.LVL2644:
4471:src/xeq.c     **** 
 34152              		.loc 1 4471 1 is_stmt 0 view .LVU9192
 34153 006e EFE7     		b	.L2518
 34154              	.L2529:
 34155              		.align	2
 34156              	.L2528:
 34157 0070 00000000 		.word	Pause
 34158 0074 00000000 		.word	XromRunning
 34159 0078 00000000 		.word	.LC7
 34160 007c 00000000 		.word	main_ram
 34161 0080 00000000 		.word	Busy
 34162 0084 00000000 		.word	Running
 34163              	.LBE4608:
 34164              	.LBE4607:
 34165              	.LBE4612:
 34166              	.LBE4618:
 34167              		.cfi_endproc
 34168              	.LFE252:
 34170              		.section	.text.xeq_xrom,"ax",%progbits
 34171              		.align	1
 34172              		.p2align 2,,3
 34173              		.global	xeq_xrom
 34174              		.syntax unified
 34175              		.thumb
 34176              		.thumb_func
 34177              		.fpu fpv4-sp-d16
 34179              	xeq_xrom:
 34180              	.LFB253:
5486:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34181              		.loc 1 5486 21 is_stmt 1 view -0
 34182              		.cfi_startproc
 34183              		@ args = 0, pretend = 0, frame = 0
 34184              		@ frame_needed = 0, uses_anonymous_args = 0
 34185              		@ link register save eliminated.
5488:src/xeq.c     **** 		xeq_xrom2();
 34186              		.loc 1 5488 2 view .LVU9194
5488:src/xeq.c     **** 		xeq_xrom2();
 34187              		.loc 1 5488 6 is_stmt 0 view .LVU9195
 34188 0000 034B     		ldr	r3, .L2533
5488:src/xeq.c     **** 		xeq_xrom2();
 34189              		.loc 1 5488 5 view .LVU9196
 34190 0002 93F91730 		ldrsb	r3, [r3, #23]
 34191 0006 002B     		cmp	r3, #0
 34192 0008 00DA     		bge	.L2532
5490:src/xeq.c     **** #endif
 34193              		.loc 1 5490 1 view .LVU9197
 34194 000a 7047     		bx	lr
ARM GAS  /tmp/ccQQPlfu.s 			page 860


 34195              	.L2532:
5489:src/xeq.c     **** }
 34196              		.loc 1 5489 3 is_stmt 1 view .LVU9198
 34197 000c FFF7FEBF 		b	xeq_xrom2
 34198              	.LVL2645:
 34199              	.L2534:
 34200              		.align	2
 34201              	.L2533:
 34202 0010 00000000 		.word	StateWhileOn
 34203              		.cfi_endproc
 34204              	.LFE253:
 34206              		.section	.text.dispatch_xrom,"ax",%progbits
 34207              		.align	1
 34208              		.p2align 2,,3
 34209              		.syntax unified
 34210              		.thumb
 34211              		.thumb_func
 34212              		.fpu fpv4-sp-d16
 34214              	dispatch_xrom:
 34215              	.LVL2646:
 34216              	.LFB237:
4504:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 34217              		.loc 1 4504 1 view -0
 34218              		.cfi_startproc
 34219              		@ args = 0, pretend = 0, frame = 0
 34220              		@ frame_needed = 0, uses_anonymous_args = 0
4505:src/xeq.c     **** 	if (xp == NULL)
 34221              		.loc 1 4505 2 view .LVU9200
 34222              	.LBB4619:
 34223              	.LBI4619:
4487:src/xeq.c     **** {
 34224              		.loc 1 4487 24 view .LVU9201
 34225              	.LBB4620:
4489:src/xeq.c     **** 	if (xp < xrom)
 34226              		.loc 1 4489 2 view .LVU9202
4490:src/xeq.c     **** 		return NULL;
 34227              		.loc 1 4490 5 is_stmt 0 view .LVU9203
 34228 0000 1649     		ldr	r1, .L2546
4489:src/xeq.c     **** 	if (xp < xrom)
 34229              		.loc 1 4489 59 view .LVU9204
 34230 0002 20F00100 		bic	r0, r0, #1
 34231              	.LVL2647:
4490:src/xeq.c     **** 		return NULL;
 34232              		.loc 1 4490 2 is_stmt 1 view .LVU9205
4490:src/xeq.c     **** 		return NULL;
 34233              		.loc 1 4490 5 is_stmt 0 view .LVU9206
 34234 0006 8842     		cmp	r0, r1
 34235 0008 22D3     		bcc	.L2538
4494:src/xeq.c     **** 		return NULL;
 34236              		.loc 1 4494 2 is_stmt 1 view .LVU9207
4494:src/xeq.c     **** 		return NULL;
 34237              		.loc 1 4494 17 is_stmt 0 view .LVU9208
 34238 000a 154B     		ldr	r3, .L2546+4
 34239 000c 1B88     		ldrh	r3, [r3]
 34240 000e 01EB4303 		add	r3, r1, r3, lsl #1
4494:src/xeq.c     **** 		return NULL;
 34241              		.loc 1 4494 5 view .LVU9209
ARM GAS  /tmp/ccQQPlfu.s 			page 861


 34242 0012 9842     		cmp	r0, r3
 34243 0014 1CD2     		bcs	.L2538
 34244              	.LVL2648:
4494:src/xeq.c     **** 		return NULL;
 34245              		.loc 1 4494 5 view .LVU9210
 34246              	.LBE4620:
 34247              	.LBE4619:
4506:src/xeq.c     **** 		return 0;
 34248              		.loc 1 4506 2 is_stmt 1 view .LVU9211
4506:src/xeq.c     **** 		return 0;
 34249              		.loc 1 4506 5 is_stmt 0 view .LVU9212
 34250 0016 D0B1     		cbz	r0, .L2542
4509:src/xeq.c     **** 	XromRunning = 1;
 34251              		.loc 1 4509 2 is_stmt 1 view .LVU9213
4509:src/xeq.c     **** 	XromRunning = 1;
 34252              		.loc 1 4509 18 is_stmt 0 view .LVU9214
 34253 0018 124B     		ldr	r3, .L2546+8
 34254 001a 1B68     		ldr	r3, [r3]
4504:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 34255              		.loc 1 4504 1 view .LVU9215
 34256 001c 70B5     		push	{r4, r5, r6, lr}
 34257              		.cfi_def_cfa_offset 16
 34258              		.cfi_offset 4, -16
 34259              		.cfi_offset 5, -12
 34260              		.cfi_offset 6, -8
 34261              		.cfi_offset 14, -4
4511:src/xeq.c     **** 	xeq_xrom();
 34262              		.loc 1 4511 9 view .LVU9216
 34263 001e 401A     		subs	r0, r0, r1
 34264              	.LVL2649:
4509:src/xeq.c     **** 	XromRunning = 1;
 34265              		.loc 1 4509 16 view .LVU9217
 34266 0020 114C     		ldr	r4, .L2546+12
4509:src/xeq.c     **** 	XromRunning = 1;
 34267              		.loc 1 4509 18 view .LVU9218
 34268 0022 B3F9DE67 		ldrsh	r6, [r3, #2014]
 34269 0026 2660     		str	r6, [r4]
4510:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34270              		.loc 1 4510 2 is_stmt 1 view .LVU9219
4511:src/xeq.c     **** 	xeq_xrom();
 34271              		.loc 1 4511 9 is_stmt 0 view .LVU9220
 34272 0028 4010     		asrs	r0, r0, #1
 34273              	.LVL2650:
4510:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34274              		.loc 1 4510 14 view .LVU9221
 34275 002a 0124     		movs	r4, #1
 34276 002c 0F4D     		ldr	r5, .L2546+16
4511:src/xeq.c     **** 	xeq_xrom();
 34277              		.loc 1 4511 2 view .LVU9222
 34278 002e B3F8E027 		ldrh	r2, [r3, #2016]
4510:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34279              		.loc 1 4510 14 view .LVU9223
 34280 0032 2C60     		str	r4, [r5]
4511:src/xeq.c     **** 	xeq_xrom();
 34281              		.loc 1 4511 2 is_stmt 1 view .LVU9224
4511:src/xeq.c     **** 	xeq_xrom();
 34282              		.loc 1 4511 9 is_stmt 0 view .LVU9225
ARM GAS  /tmp/ccQQPlfu.s 			page 862


 34283 0034 0130     		adds	r0, r0, #1
4511:src/xeq.c     **** 	xeq_xrom();
 34284              		.loc 1 4511 2 view .LVU9226
 34285 0036 40F44040 		orr	r0, r0, #49152
 34286 003a 2146     		mov	r1, r4
 34287 003c FFF7FEFF 		bl	gsbgto
 34288              	.LVL2651:
4512:src/xeq.c     **** 	return 1;
 34289              		.loc 1 4512 2 is_stmt 1 view .LVU9227
 34290              	.LBB4621:
 34291              	.LBI4621:
5486:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34292              		.loc 1 5486 6 view .LVU9228
 34293              	.LBB4622:
5488:src/xeq.c     **** 		xeq_xrom2();
 34294              		.loc 1 5488 2 view .LVU9229
5488:src/xeq.c     **** 		xeq_xrom2();
 34295              		.loc 1 5488 6 is_stmt 0 view .LVU9230
 34296 0040 0B4B     		ldr	r3, .L2546+20
5488:src/xeq.c     **** 		xeq_xrom2();
 34297              		.loc 1 5488 5 view .LVU9231
 34298 0042 93F91730 		ldrsb	r3, [r3, #23]
 34299 0046 002B     		cmp	r3, #0
 34300 0048 04DA     		bge	.L2545
 34301              	.LBE4622:
 34302              	.LBE4621:
4513:src/xeq.c     **** }
 34303              		.loc 1 4513 9 view .LVU9232
 34304 004a 2046     		mov	r0, r4
 34305              	.LVL2652:
4514:src/xeq.c     **** 
 34306              		.loc 1 4514 1 view .LVU9233
 34307 004c 70BD     		pop	{r4, r5, r6, pc}
 34308              	.LVL2653:
 34309              	.L2542:
 34310              		.cfi_def_cfa_offset 0
 34311              		.cfi_restore 4
 34312              		.cfi_restore 5
 34313              		.cfi_restore 6
 34314              		.cfi_restore 14
4514:src/xeq.c     **** 
 34315              		.loc 1 4514 1 view .LVU9234
 34316 004e 7047     		bx	lr
 34317              	.LVL2654:
 34318              	.L2538:
4507:src/xeq.c     **** 	// set_lift();
 34319              		.loc 1 4507 10 view .LVU9235
 34320 0050 0020     		movs	r0, #0
 34321              	.LVL2655:
4507:src/xeq.c     **** 	// set_lift();
 34322              		.loc 1 4507 10 view .LVU9236
 34323 0052 7047     		bx	lr
 34324              	.LVL2656:
 34325              	.L2545:
 34326              		.cfi_def_cfa_offset 16
 34327              		.cfi_offset 4, -16
 34328              		.cfi_offset 5, -12
ARM GAS  /tmp/ccQQPlfu.s 			page 863


 34329              		.cfi_offset 6, -8
 34330              		.cfi_offset 14, -4
 34331              	.LBB4624:
 34332              	.LBB4623:
5489:src/xeq.c     **** }
 34333              		.loc 1 5489 3 is_stmt 1 view .LVU9237
 34334 0054 FFF7FEFF 		bl	xeq_xrom2
 34335              	.LVL2657:
 34336              	.LBE4623:
 34337              	.LBE4624:
4513:src/xeq.c     **** }
 34338              		.loc 1 4513 9 is_stmt 0 view .LVU9238
 34339 0058 2046     		mov	r0, r4
4514:src/xeq.c     **** 
 34340              		.loc 1 4514 1 view .LVU9239
 34341 005a 70BD     		pop	{r4, r5, r6, pc}
 34342              	.L2547:
 34343              		.align	2
 34344              	.L2546:
 34345 005c 00000000 		.word	xrom
 34346 0060 00000000 		.word	xrom_size
 34347 0064 00000000 		.word	main_ram
 34348 0068 00000000 		.word	UserLocalRegs
 34349 006c 00000000 		.word	XromRunning
 34350 0070 00000000 		.word	StateWhileOn
 34351              		.cfi_endproc
 34352              	.LFE237:
 34354              		.section	.text.op_rs,"ax",%progbits
 34355              		.align	1
 34356              		.p2align 2,,3
 34357              		.global	op_rs
 34358              		.syntax unified
 34359              		.thumb
 34360              		.thumb_func
 34361              		.fpu fpv4-sp-d16
 34363              	op_rs:
 34364              	.LVL2658:
 34365              	.LFB256:
5585:src/xeq.c     **** #ifndef REALBUILD
 34366              		.loc 1 5585 27 is_stmt 1 view -0
 34367              		.cfi_startproc
 34368              		@ args = 0, pretend = 0, frame = 0
 34369              		@ frame_needed = 0, uses_anonymous_args = 0
5589:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 34370              		.loc 1 5589 2 view .LVU9241
 34371              	.LBB4625:
 34372              	.LBI4625:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 34373              		.loc 1 185 5 view .LVU9242
 34374              	.LBB4626:
 186:src/xeq.c     **** }
 34375              		.loc 1 186 2 view .LVU9243
 34376              	.LBE4626:
 34377              	.LBE4625:
5585:src/xeq.c     **** #ifndef REALBUILD
 34378              		.loc 1 5585 27 is_stmt 0 view .LVU9244
 34379 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccQQPlfu.s 			page 864


 34380              		.cfi_def_cfa_offset 8
 34381              		.cfi_offset 4, -8
 34382              		.cfi_offset 14, -4
 34383              	.LBB4628:
 34384              	.LBB4627:
 186:src/xeq.c     **** }
 34385              		.loc 1 186 9 view .LVU9245
 34386 0002 1D4C     		ldr	r4, .L2558
 34387 0004 2268     		ldr	r2, [r4]
 34388 0006 B2F8E037 		ldrh	r3, [r2, #2016]
 34389              	.LBE4627:
 34390              	.LBE4628:
5589:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 34391              		.loc 1 5589 5 view .LVU9246
 34392 000a 9B0B     		lsrs	r3, r3, #14
 34393 000c 032B     		cmp	r3, #3
 34394 000e 20D0     		beq	.L2557
5599:src/xeq.c     **** 		set_running_off();
 34395              		.loc 1 5599 2 is_stmt 1 view .LVU9247
5599:src/xeq.c     **** 		set_running_off();
 34396              		.loc 1 5599 6 is_stmt 0 view .LVU9248
 34397 0010 1A4B     		ldr	r3, .L2558+4
5599:src/xeq.c     **** 		set_running_off();
 34398              		.loc 1 5599 5 view .LVU9249
 34399 0012 1968     		ldr	r1, [r3]
 34400 0014 61B1     		cbz	r1, .L2552
5600:src/xeq.c     **** 	else {
 34401              		.loc 1 5600 3 is_stmt 1 view .LVU9250
 34402              	.LBB4629:
 34403              	.LBI4629:
5802:src/xeq.c     **** 	set_running_off_sst();
 34404              		.loc 1 5802 6 view .LVU9251
 34405              	.LBB4630:
5803:src/xeq.c     **** 	State.entryp = 0;
 34406              		.loc 1 5803 2 view .LVU9252
 34407              	.LBB4631:
 34408              	.LBI4631:
5794:src/xeq.c     **** 	Running = 0;
 34409              		.loc 1 5794 6 view .LVU9253
 34410              	.LBB4632:
5795:src/xeq.c     **** }
 34411              		.loc 1 5795 2 view .LVU9254
5795:src/xeq.c     **** }
 34412              		.loc 1 5795 10 is_stmt 0 view .LVU9255
 34413 0016 0021     		movs	r1, #0
 34414 0018 1960     		str	r1, [r3]
 34415              	.LBE4632:
 34416              	.LBE4631:
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 34417              		.loc 1 5804 2 is_stmt 1 view .LVU9256
5804:src/xeq.c     **** 	dot( RCL_annun, 0);
 34418              		.loc 1 5804 15 is_stmt 0 view .LVU9257
 34419 001a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 34420 001e 61F30413 		bfi	r3, r1, #4, #1
 34421 0022 82F8DD37 		strb	r3, [r2, #2013]
5805:src/xeq.c     **** }
 34422              		.loc 1 5805 2 is_stmt 1 view .LVU9258
ARM GAS  /tmp/ccQQPlfu.s 			page 865


 34423              	.LBE4630:
 34424              	.LBE4629:
5606:src/xeq.c     **** 
 34425              		.loc 1 5606 1 is_stmt 0 view .LVU9259
 34426 0026 BDE81040 		pop	{r4, lr}
 34427              		.cfi_remember_state
 34428              		.cfi_restore 14
 34429              		.cfi_restore 4
 34430              		.cfi_def_cfa_offset 0
 34431              	.LBB4634:
 34432              	.LBB4633:
5805:src/xeq.c     **** }
 34433              		.loc 1 5805 2 view .LVU9260
 34434 002a 8A20     		movs	r0, #138
 34435              	.LVL2659:
5805:src/xeq.c     **** }
 34436              		.loc 1 5805 2 view .LVU9261
 34437 002c FFF7FEBF 		b	dot
 34438              	.LVL2660:
 34439              	.L2552:
 34440              		.cfi_restore_state
5805:src/xeq.c     **** }
 34441              		.loc 1 5805 2 view .LVU9262
 34442              	.LBE4633:
 34443              	.LBE4634:
5602:src/xeq.c     **** 		if (RetStkPtr == 0)
 34444              		.loc 1 5602 3 is_stmt 1 view .LVU9263
 34445 0030 FFF7FEFF 		bl	set_running_on
 34446              	.LVL2661:
5603:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34447              		.loc 1 5603 3 view .LVU9264
5603:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34448              		.loc 1 5603 7 is_stmt 0 view .LVU9265
 34449 0034 2368     		ldr	r3, [r4]
5603:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34450              		.loc 1 5603 6 view .LVU9266
 34451 0036 B3F9E227 		ldrsh	r2, [r3, #2018]
 34452 003a 4AB9     		cbnz	r2, .L2548
5604:src/xeq.c     **** 	}
 34453              		.loc 1 5604 4 is_stmt 1 view .LVU9267
5604:src/xeq.c     **** 	}
 34454              		.loc 1 5604 10 is_stmt 0 view .LVU9268
 34455 003c 104A     		ldr	r2, .L2558+8
5604:src/xeq.c     **** 	}
 34456              		.loc 1 5604 26 view .LVU9269
 34457 003e B3F8E017 		ldrh	r1, [r3, #2016]
5604:src/xeq.c     **** 	}
 34458              		.loc 1 5604 10 view .LVU9270
 34459 0042 1268     		ldr	r2, [r2]
5604:src/xeq.c     **** 	}
 34460              		.loc 1 5604 24 view .LVU9271
 34461 0044 4FF6FF70 		movw	r0, #65535
 34462 0048 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 34463 004c 22F8021C 		strh	r1, [r2, #-2]	@ movhi
 34464              	.L2548:
5606:src/xeq.c     **** 
 34465              		.loc 1 5606 1 view .LVU9272
ARM GAS  /tmp/ccQQPlfu.s 			page 866


 34466 0050 10BD     		pop	{r4, pc}
 34467              	.LVL2662:
 34468              	.L2557:
5590:src/xeq.c     **** 			Running = XromRunning = 0;
 34469              		.loc 1 5590 3 is_stmt 1 view .LVU9273
5590:src/xeq.c     **** 			Running = XromRunning = 0;
 34470              		.loc 1 5590 7 is_stmt 0 view .LVU9274
 34471 0052 0C4B     		ldr	r3, .L2558+12
5590:src/xeq.c     **** 			Running = XromRunning = 0;
 34472              		.loc 1 5590 6 view .LVU9275
 34473 0054 93F91730 		ldrsb	r3, [r3, #23]
 34474 0058 002B     		cmp	r3, #0
 34475 005a 09DA     		bge	.L2550
5590:src/xeq.c     **** 			Running = XromRunning = 0;
 34476              		.loc 1 5590 24 discriminator 1 view .LVU9276
 34477 005c 074B     		ldr	r3, .L2558+4
5590:src/xeq.c     **** 			Running = XromRunning = 0;
 34478              		.loc 1 5590 32 discriminator 1 view .LVU9277
 34479 005e 0A4A     		ldr	r2, .L2558+16
 34480 0060 1868     		ldr	r0, [r3]
 34481              	.LVL2663:
5590:src/xeq.c     **** 			Running = XromRunning = 0;
 34482              		.loc 1 5590 32 discriminator 1 view .LVU9278
 34483 0062 1168     		ldr	r1, [r2]
 34484 0064 0143     		orrs	r1, r0, r1
 34485 0066 03D0     		beq	.L2550
5591:src/xeq.c     **** 		}
 34486              		.loc 1 5591 4 is_stmt 1 view .LVU9279
5591:src/xeq.c     **** 		}
 34487              		.loc 1 5591 26 is_stmt 0 view .LVU9280
 34488 0068 0021     		movs	r1, #0
 34489 006a 1160     		str	r1, [r2]
5591:src/xeq.c     **** 		}
 34490              		.loc 1 5591 12 view .LVU9281
 34491 006c 1960     		str	r1, [r3]
5606:src/xeq.c     **** 
 34492              		.loc 1 5606 1 view .LVU9282
 34493 006e 10BD     		pop	{r4, pc}
 34494              	.L2550:
5594:src/xeq.c     **** 		}
 34495              		.loc 1 5594 4 is_stmt 1 view .LVU9283
5606:src/xeq.c     **** 
 34496              		.loc 1 5606 1 is_stmt 0 view .LVU9284
 34497 0070 BDE81040 		pop	{r4, lr}
 34498              		.cfi_restore 14
 34499              		.cfi_restore 4
 34500              		.cfi_def_cfa_offset 0
5594:src/xeq.c     **** 		}
 34501              		.loc 1 5594 4 view .LVU9285
 34502 0074 FFF7FEBF 		b	xeq_xrom2
 34503              	.LVL2664:
 34504              	.L2559:
 34505              		.align	2
 34506              	.L2558:
 34507 0078 00000000 		.word	main_ram
 34508 007c 00000000 		.word	Running
 34509 0080 00000000 		.word	RetStk
ARM GAS  /tmp/ccQQPlfu.s 			page 867


 34510 0084 00000000 		.word	StateWhileOn
 34511 0088 00000000 		.word	XromRunning
 34512              		.cfi_endproc
 34513              	.LFE256:
 34515              		.section	.text.xeqprog,"ax",%progbits
 34516              		.align	1
 34517              		.p2align 2,,3
 34518              		.global	xeqprog
 34519              		.syntax unified
 34520              		.thumb
 34521              		.thumb_func
 34522              		.fpu fpv4-sp-d16
 34524              	xeqprog:
 34525              	.LFB254:
5502:src/xeq.c     ****    int state = 0;
 34526              		.loc 1 5502 2 is_stmt 1 view -0
 34527              		.cfi_startproc
 34528              		@ args = 0, pretend = 0, frame = 0
 34529              		@ frame_needed = 0, uses_anonymous_args = 0
5503:src/xeq.c     ****    if (Running || Pause) {
 34530              		.loc 1 5503 4 view .LVU9287
 34531              	.LVL2665:
5504:src/xeq.c     **** 
 34532              		.loc 1 5504 4 view .LVU9288
5502:src/xeq.c     ****    int state = 0;
 34533              		.loc 1 5502 2 is_stmt 0 view .LVU9289
 34534 0000 38B5     		push	{r3, r4, r5, lr}
 34535              		.cfi_def_cfa_offset 16
 34536              		.cfi_offset 3, -16
 34537              		.cfi_offset 4, -12
 34538              		.cfi_offset 5, -8
 34539              		.cfi_offset 14, -4
5504:src/xeq.c     **** 
 34540              		.loc 1 5504 8 view .LVU9290
 34541 0002 184C     		ldr	r4, .L2585
 34542 0004 184D     		ldr	r5, .L2585+4
5504:src/xeq.c     **** 
 34543              		.loc 1 5504 7 view .LVU9291
 34544 0006 2368     		ldr	r3, [r4]
 34545 0008 0BB9     		cbnz	r3, .L2561
5504:src/xeq.c     **** 
 34546              		.loc 1 5504 16 discriminator 1 view .LVU9292
 34547 000a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 34548 000c 9BB1     		cbz	r3, .L2566
 34549              	.L2561:
5510:src/xeq.c     **** #endif
 34550              		.loc 1 5510 6 is_stmt 1 view .LVU9293
 34551              	.LVL2666:
5514:src/xeq.c     ****      finish_RPN(); // RPN
 34552              		.loc 1 5514 6 view .LVU9294
 34553 000e 0121     		movs	r1, #1
 34554 0010 8A20     		movs	r0, #138
 34555 0012 FFF7FEFF 		bl	dot
 34556              	.LVL2667:
5515:src/xeq.c     **** 
 34557              		.loc 1 5515 6 view .LVU9295
 34558 0016 FFF7FEFF 		bl	finish_RPN
ARM GAS  /tmp/ccQQPlfu.s 			page 868


 34559              	.LVL2668:
5517:src/xeq.c     ****        xeq_single();
 34560              		.loc 1 5517 6 view .LVU9296
5517:src/xeq.c     ****        xeq_single();
 34561              		.loc 1 5517 12 is_stmt 0 view .LVU9297
 34562 001a 06E0     		b	.L2563
 34563              	.L2583:
5517:src/xeq.c     ****        xeq_single();
 34564              		.loc 1 5517 21 discriminator 1 view .LVU9298
 34565 001c 2368     		ldr	r3, [r4]
 34566 001e 53B1     		cbz	r3, .L2566
5518:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 34567              		.loc 1 5518 8 view .LVU9299
 34568 0020 FFF7FEFF 		bl	xeq_single
 34569              	.LVL2669:
5520:src/xeq.c     **** 	 {
 34570              		.loc 1 5520 8 is_stmt 1 view .LVU9300
5520:src/xeq.c     **** 	 {
 34571              		.loc 1 5520 12 is_stmt 0 view .LVU9301
 34572 0024 FFF7FEFF 		bl	is_key_pressed
 34573              	.LVL2670:
5520:src/xeq.c     **** 	 {
 34574              		.loc 1 5520 11 view .LVU9302
 34575 0028 10B9     		cbnz	r0, .L2564
 34576              	.L2563:
5518:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 34577              		.loc 1 5518 8 is_stmt 1 view .LVU9303
5517:src/xeq.c     ****        xeq_single();
 34578              		.loc 1 5517 12 view .LVU9304
5517:src/xeq.c     ****        xeq_single();
 34579              		.loc 1 5517 13 is_stmt 0 view .LVU9305
 34580 002a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5517:src/xeq.c     ****        xeq_single();
 34581              		.loc 1 5517 12 view .LVU9306
 34582 002c 002B     		cmp	r3, #0
 34583 002e F5D0     		beq	.L2583
 34584              	.L2564:
5529:src/xeq.c     ****      // Program has terminated
 34585              		.loc 1 5529 4 is_stmt 1 view .LVU9307
5529:src/xeq.c     ****      // Program has terminated
 34586              		.loc 1 5529 7 is_stmt 0 view .LVU9308
 34587 0030 2368     		ldr	r3, [r4]
 34588 0032 03B1     		cbz	r3, .L2566
 34589              	.LVL2671:
 34590              	.L2560:
5543:src/xeq.c     **** 
 34591              		.loc 1 5543 2 view .LVU9309
 34592 0034 38BD     		pop	{r3, r4, r5, pc}
 34593              	.L2566:
5529:src/xeq.c     ****      // Program has terminated
 34594              		.loc 1 5529 4 is_stmt 1 view .LVU9310
5529:src/xeq.c     ****      // Program has terminated
 34595              		.loc 1 5529 21 is_stmt 0 view .LVU9311
 34596 0036 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5529:src/xeq.c     ****      // Program has terminated
 34597              		.loc 1 5529 18 view .LVU9312
 34598 0038 002B     		cmp	r3, #0
ARM GAS  /tmp/ccQQPlfu.s 			page 869


 34599 003a FBD1     		bne	.L2560
5531:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
 34600              		.loc 1 5531 6 is_stmt 1 view .LVU9313
5532:src/xeq.c     ****      display();
 34601              		.loc 1 5532 14 is_stmt 0 view .LVU9314
 34602 003c 0B4C     		ldr	r4, .L2585+8
5531:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
 34603              		.loc 1 5531 6 view .LVU9315
 34604 003e 8A20     		movs	r0, #138
 34605 0040 FFF7FEFF 		bl	clr_dot
 34606              	.LVL2672:
5532:src/xeq.c     ****      display();
 34607              		.loc 1 5532 6 is_stmt 1 view .LVU9316
5532:src/xeq.c     ****      display();
 34608              		.loc 1 5532 14 is_stmt 0 view .LVU9317
 34609 0044 0123     		movs	r3, #1
 34610 0046 2360     		str	r3, [r4]
5533:src/xeq.c     ****      if (ShowRPN) {
 34611              		.loc 1 5533 6 is_stmt 1 view .LVU9318
 34612 0048 FFF7FEFF 		bl	display
 34613              	.LVL2673:
5534:src/xeq.c     ****        set_dot(RPN);
 34614              		.loc 1 5534 6 view .LVU9319
5534:src/xeq.c     ****        set_dot(RPN);
 34615              		.loc 1 5534 9 is_stmt 0 view .LVU9320
 34616 004c 2368     		ldr	r3, [r4]
 34617 004e 1BB9     		cbnz	r3, .L2584
 34618              	.L2568:
5540:src/xeq.c     **** #endif
 34619              		.loc 1 5540 6 is_stmt 1 view .LVU9321
5540:src/xeq.c     **** #endif
 34620              		.loc 1 5540 18 is_stmt 0 view .LVU9322
 34621 0050 074B     		ldr	r3, .L2585+12
 34622 0052 0122     		movs	r2, #1
 34623 0054 1A60     		str	r2, [r3]
5543:src/xeq.c     **** 
 34624              		.loc 1 5543 2 view .LVU9323
 34625 0056 38BD     		pop	{r3, r4, r5, pc}
 34626              	.L2584:
5535:src/xeq.c     ****        finish_RPN(); // RPN
 34627              		.loc 1 5535 8 is_stmt 1 view .LVU9324
 34628 0058 8D20     		movs	r0, #141
 34629 005a FFF7FEFF 		bl	set_dot
 34630              	.LVL2674:
5536:src/xeq.c     ****      }
 34631              		.loc 1 5536 8 view .LVU9325
 34632 005e FFF7FEFF 		bl	finish_RPN
 34633              	.LVL2675:
 34634 0062 F5E7     		b	.L2568
 34635              	.L2586:
 34636              		.align	2
 34637              	.L2585:
 34638 0064 00000000 		.word	Running
 34639 0068 00000000 		.word	Pause
 34640 006c 00000000 		.word	ShowRPN
 34641 0070 00000000 		.word	JustStopped
 34642              		.cfi_endproc
ARM GAS  /tmp/ccQQPlfu.s 			page 870


 34643              	.LFE254:
 34645              		.section	.text.xeq_sst_bst,"ax",%progbits
 34646              		.align	1
 34647              		.p2align 2,,3
 34648              		.global	xeq_sst_bst
 34649              		.syntax unified
 34650              		.thumb
 34651              		.thumb_func
 34652              		.fpu fpv4-sp-d16
 34654              	xeq_sst_bst:
 34655              	.LVL2676:
 34656              	.LFB255:
5548:src/xeq.c     **** 	opcode op;
 34657              		.loc 1 5548 1 view -0
 34658              		.cfi_startproc
 34659              		@ args = 0, pretend = 0, frame = 0
 34660              		@ frame_needed = 0, uses_anonymous_args = 0
5549:src/xeq.c     **** 
 34661              		.loc 1 5549 2 view .LVU9327
5551:src/xeq.c     **** 	if (kind == -1)
 34662              		.loc 1 5551 2 view .LVU9328
 34663              	.LBB4635:
 34664              	.LBI4635:
4441:src/xeq.c     **** 	// extern int IntMaxWindow;
 34665              		.loc 1 4441 6 view .LVU9329
 34666              	.LBB4636:
4444:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34667              		.loc 1 4444 2 view .LVU9330
 34668              	.LBE4636:
 34669              	.LBE4635:
5548:src/xeq.c     **** 	opcode op;
 34670              		.loc 1 5548 1 is_stmt 0 view .LVU9331
 34671 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 34672              		.cfi_def_cfa_offset 24
 34673              		.cfi_offset 4, -24
 34674              		.cfi_offset 5, -20
 34675              		.cfi_offset 6, -16
 34676              		.cfi_offset 7, -12
 34677              		.cfi_offset 8, -8
 34678              		.cfi_offset 14, -4
 34679              	.LBB4639:
 34680              	.LBB4637:
4444:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34681              		.loc 1 4444 16 view .LVU9332
 34682 0004 254C     		ldr	r4, .L2600
 34683 0006 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4445:src/xeq.c     **** }
 34684              		.loc 1 4445 15 view .LVU9333
 34685 0008 0026     		movs	r6, #0
4444:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34686              		.loc 1 4444 16 view .LVU9334
 34687 000a 6FF3C503 		bfc	r3, #3, #3
 34688              	.LBE4637:
 34689              	.LBE4639:
5552:src/xeq.c     **** 		decpc();
 34690              		.loc 1 5552 5 view .LVU9335
 34691 000e 411C     		adds	r1, r0, #1
ARM GAS  /tmp/ccQQPlfu.s 			page 871


 34692              	.LBB4640:
 34693              	.LBB4638:
4444:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34694              		.loc 1 4444 16 view .LVU9336
 34695 0010 2375     		strb	r3, [r4, #20]
4445:src/xeq.c     **** }
 34696              		.loc 1 4445 2 is_stmt 1 view .LVU9337
4445:src/xeq.c     **** }
 34697              		.loc 1 4445 15 is_stmt 0 view .LVU9338
 34698 0012 6674     		strb	r6, [r4, #17]
 34699              	.LBE4638:
 34700              	.LBE4640:
5552:src/xeq.c     **** 		decpc();
 34701              		.loc 1 5552 2 is_stmt 1 view .LVU9339
5552:src/xeq.c     **** 		decpc();
 34702              		.loc 1 5552 5 is_stmt 0 view .LVU9340
 34703 0014 30D0     		beq	.L2596
5555:src/xeq.c     **** 		// Display the step
 34704              		.loc 1 5555 2 is_stmt 1 view .LVU9341
5555:src/xeq.c     **** 		// Display the step
 34705              		.loc 1 5555 6 is_stmt 0 view .LVU9342
 34706 0016 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5555:src/xeq.c     **** 		// Display the step
 34707              		.loc 1 5555 5 view .LVU9343
 34708 0018 5B06     		lsls	r3, r3, #25
 34709 001a 0546     		mov	r5, r0
 34710 001c 08D4     		bmi	.L2597
5574:src/xeq.c     **** 		// Key down in program mode
 34711              		.loc 1 5574 7 is_stmt 1 view .LVU9344
5574:src/xeq.c     **** 		// Key down in program mode
 34712              		.loc 1 5574 10 is_stmt 0 view .LVU9345
 34713 001e 08B1     		cbz	r0, .L2598
 34714              	.LVL2677:
 34715              	.L2587:
5579:src/xeq.c     **** 
 34716              		.loc 1 5579 1 view .LVU9346
 34717 0020 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 34718              	.LVL2678:
 34719              	.L2598:
5576:src/xeq.c     **** 		OpCode = 0;
 34720              		.loc 1 5576 3 is_stmt 1 view .LVU9347
 34721 0024 FFF7FEFF 		bl	incpc
 34722              	.LVL2679:
5577:src/xeq.c     **** 	}
 34723              		.loc 1 5577 3 view .LVU9348
5577:src/xeq.c     **** 	}
 34724              		.loc 1 5577 10 is_stmt 0 view .LVU9349
 34725 0028 1D4B     		ldr	r3, .L2600+4
 34726 002a 1D60     		str	r5, [r3]
5579:src/xeq.c     **** 
 34727              		.loc 1 5579 1 view .LVU9350
 34728 002c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 34729              	.LVL2680:
 34730              	.L2597:
5557:src/xeq.c     **** 		print_step(op);
 34731              		.loc 1 5557 3 is_stmt 1 view .LVU9351
5557:src/xeq.c     **** 		print_step(op);
ARM GAS  /tmp/ccQQPlfu.s 			page 872


 34732              		.loc 1 5557 16 is_stmt 0 view .LVU9352
 34733 0030 1C4B     		ldr	r3, .L2600+8
 34734 0032 1B68     		ldr	r3, [r3]
5557:src/xeq.c     **** 		print_step(op);
 34735              		.loc 1 5557 8 view .LVU9353
 34736 0034 B3F8E007 		ldrh	r0, [r3, #2016]
 34737              	.LVL2681:
5557:src/xeq.c     **** 		print_step(op);
 34738              		.loc 1 5557 8 view .LVU9354
 34739 0038 FFF7FEFF 		bl	getprog
 34740              	.LVL2682:
 34741 003c 0746     		mov	r7, r0
 34742              	.LVL2683:
5558:src/xeq.c     **** 		if (kind == 1) {
 34743              		.loc 1 5558 3 is_stmt 1 view .LVU9355
 34744 003e FFF7FEFF 		bl	print_step
 34745              	.LVL2684:
5559:src/xeq.c     **** 			// Execute the step on key up
 34746              		.loc 1 5559 3 view .LVU9356
5559:src/xeq.c     **** 			// Execute the step on key up
 34747              		.loc 1 5559 6 is_stmt 0 view .LVU9357
 34748 0042 012D     		cmp	r5, #1
 34749 0044 ECD1     		bne	.L2587
5562:src/xeq.c     **** #endif
 34750              		.loc 1 5562 4 is_stmt 1 view .LVU9358
5562:src/xeq.c     **** #endif
 34751              		.loc 1 5562 15 is_stmt 0 view .LVU9359
 34752 0046 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 34753              	.LBB4641:
 34754              	.LBB4642:
5799:src/xeq.c     **** }
 34755              		.loc 1 5799 10 view .LVU9360
 34756 0048 DFF85C80 		ldr	r8, .L2600+12
 34757              	.LBE4642:
 34758              	.LBE4641:
5562:src/xeq.c     **** #endif
 34759              		.loc 1 5562 15 view .LVU9361
 34760 004c 43F00203 		orr	r3, r3, #2
 34761 0050 2376     		strb	r3, [r4, #24]
5564:src/xeq.c     **** 			incpc();
 34762              		.loc 1 5564 4 is_stmt 1 view .LVU9362
 34763              	.LBB4644:
 34764              	.LBI4641:
5798:src/xeq.c     **** 	Running = 1;
 34765              		.loc 1 5798 6 view .LVU9363
 34766              	.LBB4643:
5799:src/xeq.c     **** }
 34767              		.loc 1 5799 2 view .LVU9364
5799:src/xeq.c     **** }
 34768              		.loc 1 5799 10 is_stmt 0 view .LVU9365
 34769 0052 C8F80050 		str	r5, [r8]
 34770              	.LBE4643:
 34771              	.LBE4644:
5565:src/xeq.c     **** 			xeq(op);
 34772              		.loc 1 5565 4 is_stmt 1 view .LVU9366
 34773 0056 FFF7FEFF 		bl	incpc
 34774              	.LVL2685:
ARM GAS  /tmp/ccQQPlfu.s 			page 873


5566:src/xeq.c     **** #ifndef REALBUILD
 34775              		.loc 1 5566 4 view .LVU9367
 34776 005a 3846     		mov	r0, r7
 34777 005c FFF7FEFF 		bl	xeq
 34778              	.LVL2686:
5568:src/xeq.c     **** #endif
 34779              		.loc 1 5568 4 view .LVU9368
5568:src/xeq.c     **** #endif
 34780              		.loc 1 5568 15 is_stmt 0 view .LVU9369
 34781 0060 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 34782              	.LBB4645:
 34783              	.LBB4646:
5488:src/xeq.c     **** 		xeq_xrom2();
 34784              		.loc 1 5488 5 view .LVU9370
 34785 0062 94F91720 		ldrsb	r2, [r4, #23]
 34786              	.LBE4646:
 34787              	.LBE4645:
5568:src/xeq.c     **** #endif
 34788              		.loc 1 5568 15 view .LVU9371
 34789 0066 66F34103 		bfi	r3, r6, #1, #1
 34790              	.LBB4650:
 34791              	.LBB4647:
5488:src/xeq.c     **** 		xeq_xrom2();
 34792              		.loc 1 5488 5 view .LVU9372
 34793 006a 002A     		cmp	r2, #0
 34794              	.LBE4647:
 34795              	.LBE4650:
5568:src/xeq.c     **** #endif
 34796              		.loc 1 5568 15 view .LVU9373
 34797 006c 2376     		strb	r3, [r4, #24]
5570:src/xeq.c     **** 			set_running_off_sst();
 34798              		.loc 1 5570 4 is_stmt 1 view .LVU9374
 34799              	.LBB4651:
 34800              	.LBI4645:
5486:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34801              		.loc 1 5486 6 view .LVU9375
 34802              	.LBB4648:
5488:src/xeq.c     **** 		xeq_xrom2();
 34803              		.loc 1 5488 2 view .LVU9376
5488:src/xeq.c     **** 		xeq_xrom2();
 34804              		.loc 1 5488 5 is_stmt 0 view .LVU9377
 34805 006e 12DA     		bge	.L2599
 34806              	.L2594:
 34807              	.LBE4648:
 34808              	.LBE4651:
5571:src/xeq.c     **** 		}
 34809              		.loc 1 5571 4 is_stmt 1 view .LVU9378
 34810              	.LBB4652:
 34811              	.LBI4652:
5794:src/xeq.c     **** 	Running = 0;
 34812              		.loc 1 5794 6 view .LVU9379
 34813              	.LBB4653:
5795:src/xeq.c     **** }
 34814              		.loc 1 5795 2 view .LVU9380
5795:src/xeq.c     **** }
 34815              		.loc 1 5795 10 is_stmt 0 view .LVU9381
 34816 0070 0023     		movs	r3, #0
ARM GAS  /tmp/ccQQPlfu.s 			page 874


 34817 0072 C8F80030 		str	r3, [r8]
5796:src/xeq.c     **** 
 34818              		.loc 1 5796 1 view .LVU9382
 34819 0076 D3E7     		b	.L2587
 34820              	.LVL2687:
 34821              	.L2596:
5796:src/xeq.c     **** 
 34822              		.loc 1 5796 1 view .LVU9383
 34823              	.LBE4653:
 34824              	.LBE4652:
5553:src/xeq.c     **** 
 34825              		.loc 1 5553 3 is_stmt 1 view .LVU9384
 34826 0078 FFF7FEFF 		bl	decpc
 34827              	.LVL2688:
5555:src/xeq.c     **** 		// Display the step
 34828              		.loc 1 5555 2 view .LVU9385
5555:src/xeq.c     **** 		// Display the step
 34829              		.loc 1 5555 6 is_stmt 0 view .LVU9386
 34830 007c A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5555:src/xeq.c     **** 		// Display the step
 34831              		.loc 1 5555 5 view .LVU9387
 34832 007e 5A06     		lsls	r2, r3, #25
 34833 0080 CED5     		bpl	.L2587
5557:src/xeq.c     **** 		print_step(op);
 34834              		.loc 1 5557 3 is_stmt 1 view .LVU9388
5557:src/xeq.c     **** 		print_step(op);
 34835              		.loc 1 5557 16 is_stmt 0 view .LVU9389
 34836 0082 084B     		ldr	r3, .L2600+8
 34837 0084 1B68     		ldr	r3, [r3]
5557:src/xeq.c     **** 		print_step(op);
 34838              		.loc 1 5557 8 view .LVU9390
 34839 0086 B3F8E007 		ldrh	r0, [r3, #2016]
 34840 008a FFF7FEFF 		bl	getprog
 34841              	.LVL2689:
5558:src/xeq.c     **** 		if (kind == 1) {
 34842              		.loc 1 5558 3 is_stmt 1 view .LVU9391
5579:src/xeq.c     **** 
 34843              		.loc 1 5579 1 is_stmt 0 view .LVU9392
 34844 008e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 34845              		.cfi_remember_state
 34846              		.cfi_restore 14
 34847              		.cfi_restore 8
 34848              		.cfi_restore 7
 34849              		.cfi_restore 6
 34850              		.cfi_restore 5
 34851              		.cfi_restore 4
 34852              		.cfi_def_cfa_offset 0
5558:src/xeq.c     **** 		if (kind == 1) {
 34853              		.loc 1 5558 3 view .LVU9393
 34854 0092 FFF7FEBF 		b	print_step
 34855              	.LVL2690:
 34856              	.L2599:
 34857              		.cfi_restore_state
 34858              	.LBB4654:
 34859              	.LBB4649:
5489:src/xeq.c     **** }
 34860              		.loc 1 5489 3 is_stmt 1 view .LVU9394
ARM GAS  /tmp/ccQQPlfu.s 			page 875


 34861 0096 FFF7FEFF 		bl	xeq_xrom2
 34862              	.LVL2691:
 34863 009a E9E7     		b	.L2594
 34864              	.L2601:
 34865              		.align	2
 34866              	.L2600:
 34867 009c 00000000 		.word	StateWhileOn
 34868 00a0 00000000 		.word	OpCode
 34869 00a4 00000000 		.word	main_ram
 34870 00a8 00000000 		.word	Running
 34871              	.LBE4649:
 34872              	.LBE4654:
 34873              		.cfi_endproc
 34874              	.LFE255:
 34876              		.section	.text.init_34s,"ax",%progbits
 34877              		.align	1
 34878              		.p2align 2,,3
 34879              		.global	init_34s
 34880              		.syntax unified
 34881              		.thumb
 34882              		.thumb_func
 34883              		.fpu fpv4-sp-d16
 34885              	init_34s:
 34886              	.LFB272:
6324:src/xeq.c     **** 
6325:src/xeq.c     **** 
6326:src/xeq.c     **** /*
6327:src/xeq.c     ****  *  Debugging output for the console version
6328:src/xeq.c     ****  */
6329:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE) && !defined(WP34STEST)
6330:src/xeq.c     **** extern unsigned char remap_chars(unsigned char ch);
6331:src/xeq.c     **** 
6332:src/xeq.c     **** static int compare(s_opcode a1, s_opcode a2, int cata) {
6333:src/xeq.c     **** 	char b1[16], b2[16];
6334:src/xeq.c     **** 	const unsigned char *s1, *s2;
6335:src/xeq.c     **** 	int i;
6336:src/xeq.c     **** 
6337:src/xeq.c     **** 	xset(b1, 0, sizeof(b1));
6338:src/xeq.c     **** 	xset(b2, 0, sizeof(b2));
6339:src/xeq.c     **** 	s1 = (unsigned char *)catcmd(a1, b1);
6340:src/xeq.c     **** 	s2 = (unsigned char *)catcmd(a2, b2);
6341:src/xeq.c     **** 	if (*s1 == COMPLEX_PREFIX) s1++;
6342:src/xeq.c     **** 	if (*s2 == COMPLEX_PREFIX) s2++;
6343:src/xeq.c     **** 
6344:src/xeq.c     **** 	for (i=0;;i++) {
6345:src/xeq.c     **** 		unsigned char c1 = *s1++;
6346:src/xeq.c     **** 		unsigned char c2 = *s2++;
6347:src/xeq.c     **** 		c1 = remap_chars(c1);
6348:src/xeq.c     **** 		c2 = remap_chars(c2);
6349:src/xeq.c     **** 
6350:src/xeq.c     **** 		if (c1 != c2) {
6351:src/xeq.c     **** 			if (c1 > c2) {
6352:src/xeq.c     **** 				return 1;
6353:src/xeq.c     **** 			}
6354:src/xeq.c     **** 			return 0;
6355:src/xeq.c     **** 		} else if (c1 == '\0')
6356:src/xeq.c     **** 			break;
ARM GAS  /tmp/ccQQPlfu.s 			page 876


6357:src/xeq.c     **** 	}
6358:src/xeq.c     **** 	return 0;
6359:src/xeq.c     **** }
6360:src/xeq.c     **** 
6361:src/xeq.c     **** static void check_cat(const enum catalogues cata, const char *name) {
6362:src/xeq.c     **** 	int i;
6363:src/xeq.c     **** 	char b1[16], b2[16];
6364:src/xeq.c     **** 	const int oldcata = State2.catalogue;
6365:src/xeq.c     **** 	int n;
6366:src/xeq.c     **** 
6367:src/xeq.c     **** 	State2.catalogue = cata;
6368:src/xeq.c     **** 	n = current_catalogue_max();
6369:src/xeq.c     **** 	for (i=1; i<n; i++) {
6370:src/xeq.c     **** 		opcode cold = current_catalogue(i-1);
6371:src/xeq.c     **** 		opcode c = current_catalogue(i);
6372:src/xeq.c     **** 		if (compare(cold, c, cata))
6373:src/xeq.c     **** 			error("catalogue %s row %04x / %04x  %d / %d: %04o / %04o (%s / %s)", name, cold, c, i-1, i,
6374:src/xeq.c     **** 					0xff & cold, 0xff & c,
6375:src/xeq.c     **** 					catcmd(cold, b1), catcmd(c, b2));
6376:src/xeq.c     **** 	}
6377:src/xeq.c     **** 	State2.catalogue = oldcata;
6378:src/xeq.c     **** }
6379:src/xeq.c     **** 
6380:src/xeq.c     **** static void check_const_cat(void) {
6381:src/xeq.c     **** 	int i;
6382:src/xeq.c     **** 	char b1[16], b2[16];
6383:src/xeq.c     **** 	char p1[64], p2[64];
6384:src/xeq.c     **** 
6385:src/xeq.c     **** 	for (i=1; i<NUM_CONSTS_CAT; i++) {
6386:src/xeq.c     **** 		if (compare(CONST(i-1), CONST(i), 0)) {
6387:src/xeq.c     **** 			prettify(catcmd(CONST(i-1), b1), p1, 0);
6388:src/xeq.c     **** 			prettify(catcmd(CONST(i), b2), p2, 0);
6389:src/xeq.c     **** 			error("constants row %d / %d: %s / %s", i, i+1, p1, p2);
6390:src/xeq.c     **** 		}
6391:src/xeq.c     **** 	}
6392:src/xeq.c     **** }
6393:src/xeq.c     **** 
6394:src/xeq.c     **** static void bad_table(const char *t, int row, const char *n, int nlen) {
6395:src/xeq.c     **** 	char buf[64], name[20];
6396:src/xeq.c     **** 	int i;
6397:src/xeq.c     **** 
6398:src/xeq.c     **** 	for (i=0; i<nlen; i++)
6399:src/xeq.c     **** 		name[i] = n[i];
6400:src/xeq.c     **** 	name[nlen] = '\0';
6401:src/xeq.c     **** 	prettify(name, buf, 0);
6402:src/xeq.c     **** 	error("%s table row %d: %6s", t, row, buf);
6403:src/xeq.c     **** }
6404:src/xeq.c     **** 
6405:src/xeq.c     **** #endif
6406:src/xeq.c     **** 
6407:src/xeq.c     **** /* Main initialisation routine that sets things up for us.
6408:src/xeq.c     ****  * Returns a nonzero result if it has cleared ram.
6409:src/xeq.c     ****  */
6410:src/xeq.c     **** int init_34s(void)
6411:src/xeq.c     **** {
 34887              		.loc 1 6411 1 view -0
 34888              		.cfi_startproc
ARM GAS  /tmp/ccQQPlfu.s 			page 877


 34889              		@ args = 0, pretend = 0, frame = 0
 34890              		@ frame_needed = 0, uses_anonymous_args = 0
6412:src/xeq.c     **** 	const int cleared = checksum_all();
 34891              		.loc 1 6412 2 view .LVU9396
6411:src/xeq.c     **** 	const int cleared = checksum_all();
 34892              		.loc 1 6411 1 is_stmt 0 view .LVU9397
 34893 0000 10B5     		push	{r4, lr}
 34894              		.cfi_def_cfa_offset 8
 34895              		.cfi_offset 4, -8
 34896              		.cfi_offset 14, -4
 34897              		.loc 1 6412 22 view .LVU9398
 34898 0002 FFF7FEFF 		bl	checksum_ram
 34899              	.LVL2692:
6413:src/xeq.c     **** 	if (cleared) {
 34900              		.loc 1 6413 2 is_stmt 1 view .LVU9399
 34901              		.loc 1 6413 5 is_stmt 0 view .LVU9400
 34902 0006 0446     		mov	r4, r0
 34903 0008 58B9     		cbnz	r0, .L2608
 34904              	.LVL2693:
 34905              	.L2603:
6414:src/xeq.c     **** 		reset();
6415:src/xeq.c     **** 	}
6416:src/xeq.c     **** 	init_state();
 34906              		.loc 1 6416 2 is_stmt 1 view .LVU9401
 34907 000a FFF7FEFF 		bl	init_state
 34908              	.LVL2694:
6417:src/xeq.c     **** 	xeq_init_contexts();
 34909              		.loc 1 6417 2 view .LVU9402
 34910 000e FFF7FEFF 		bl	xeq_init_contexts
 34911              	.LVL2695:
6418:src/xeq.c     **** 	ShowRPN = 1;
 34912              		.loc 1 6418 2 view .LVU9403
 34913              		.loc 1 6418 10 is_stmt 0 view .LVU9404
 34914 0012 054B     		ldr	r3, .L2609
 34915 0014 0122     		movs	r2, #1
6419:src/xeq.c     **** 	set_dot(RPN);
 34916              		.loc 1 6419 2 view .LVU9405
 34917 0016 8D20     		movs	r0, #141
6418:src/xeq.c     **** 	ShowRPN = 1;
 34918              		.loc 1 6418 10 view .LVU9406
 34919 0018 1A60     		str	r2, [r3]
 34920              		.loc 1 6419 2 is_stmt 1 view .LVU9407
 34921 001a FFF7FEFF 		bl	set_dot
 34922              	.LVL2696:
6420:src/xeq.c     **** 
6421:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
6422:src/xeq.c     **** 	StopWatchRunning = 0;
6423:src/xeq.c     **** #endif
6424:src/xeq.c     **** #if defined(CONSOLE) && !defined(WP34STEST) && defined(DEBUG)
6425:src/xeq.c     **** 	{
6426:src/xeq.c     **** 		int i;
6427:src/xeq.c     **** 	/* Sanity check the function table indices.
6428:src/xeq.c     **** 	 * These indicies must correspond exactly with the enum definition.
6429:src/xeq.c     **** 	 * This code validates that this is true and prints error messages
6430:src/xeq.c     **** 	 * if it isn't.
6431:src/xeq.c     **** 	 */
6432:src/xeq.c     **** 	for (i=0; i<NUM_MONADIC; i++)
ARM GAS  /tmp/ccQQPlfu.s 			page 878


6433:src/xeq.c     **** 		if (monfuncs[i].n != i)
6434:src/xeq.c     **** 			bad_table("monadic function", i, monfuncs[i].fname, NAME_LEN);
6435:src/xeq.c     **** 	for (i=0; i<NUM_DYADIC; i++)
6436:src/xeq.c     **** 		if (dyfuncs[i].n != i)
6437:src/xeq.c     **** 			bad_table("dyadic function", i, dyfuncs[i].fname, NAME_LEN);
6438:src/xeq.c     **** 	for (i=0; i<NUM_TRIADIC; i++)
6439:src/xeq.c     **** 		if (trifuncs[i].n != i)
6440:src/xeq.c     **** 			bad_table("triadic function", i, trifuncs[i].fname, NAME_LEN);
6441:src/xeq.c     **** 	for (i=0; i<NUM_NILADIC; i++)
6442:src/xeq.c     **** 		if (niladics[i].n != i)
6443:src/xeq.c     **** 			bad_table("niladic function", i, niladics[i].nname, NAME_LEN);
6444:src/xeq.c     **** 	for (i=0; i<NUM_RARG; i++)
6445:src/xeq.c     **** 		if (argcmds[i].n != i)
6446:src/xeq.c     **** 			bad_table("argument command", i, argcmds[i].cmd, NAME_LEN);
6447:src/xeq.c     **** 	for (i=0; i<NUM_MULTI; i++)
6448:src/xeq.c     **** 		if (multicmds[i].n != i)
6449:src/xeq.c     **** 			bad_table("multi command", i, multicmds[i].cmd, NAME_LEN);
6450:src/xeq.c     **** 	check_const_cat();
6451:src/xeq.c     **** 	check_cat(CATALOGUE_COMPLEX, "complex");
6452:src/xeq.c     **** 	check_cat(CATALOGUE_STATS, "statistics");
6453:src/xeq.c     **** 	check_cat(CATALOGUE_SUMS, "summations");
6454:src/xeq.c     **** 	check_cat(CATALOGUE_PROB, "probability");
6455:src/xeq.c     **** 	check_cat(CATALOGUE_PROG, "programme");
6456:src/xeq.c     **** 	check_cat(CATALOGUE_MODE, "mode");
6457:src/xeq.c     **** 	check_cat(CATALOGUE_TEST, "tests");
6458:src/xeq.c     **** 	check_cat(CATALOGUE_INT, "int");
6459:src/xeq.c     **** 	check_cat(CATALOGUE_MATRIX, "matrix");
6460:src/xeq.c     **** 	/*
6461:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA, "alpha");
6462:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_LETTERS, "alpha special upper case letters");
6463:src/xeq.c     **** 	// check_cat(CATALOGUE_ALPHA_LETTERS_LOWER, "alpha special lower letters");
6464:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SUBSCRIPTS, "alpha subscripts");
6465:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SYMBOLS, "alpha symbols");
6466:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_COMPARES, "alpha compares");
6467:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_ARROWS, "alpha arrows");
6468:src/xeq.c     **** 	*/
6469:src/xeq.c     **** 	check_cat(CATALOGUE_CONV, "conversion");
6470:src/xeq.c     **** 	check_cat(CATALOGUE_NORMAL, "float");
6471:src/xeq.c     **** #ifdef INCLUDE_INTERNAL_CATALOGUE
6472:src/xeq.c     **** 	check_cat(CATALOGUE_INTERNAL, "internal");
6473:src/xeq.c     **** #endif
6474:src/xeq.c     ****         if (sizeof(unsigned long long int) != sizeof(UState))
6475:src/xeq.c     ****             error("sizeof register (%u) != sizeof user state (%u)\n", sizeof(unsigned long long int
6476:src/xeq.c     **** 	}
6477:src/xeq.c     **** #endif
6478:src/xeq.c     **** 	return cleared;
 34923              		.loc 1 6478 2 view .LVU9408
6479:src/xeq.c     **** }
 34924              		.loc 1 6479 1 is_stmt 0 view .LVU9409
 34925 001e 2046     		mov	r0, r4
 34926 0020 10BD     		pop	{r4, pc}
 34927              	.LVL2697:
 34928              	.L2608:
6414:src/xeq.c     **** 	}
 34929              		.loc 1 6414 3 is_stmt 1 view .LVU9410
 34930 0022 FFF7FEFF 		bl	reset
 34931              	.LVL2698:
ARM GAS  /tmp/ccQQPlfu.s 			page 879


6414:src/xeq.c     **** 	}
 34932              		.loc 1 6414 3 is_stmt 0 view .LVU9411
 34933 0026 F0E7     		b	.L2603
 34934              	.L2610:
 34935              		.align	2
 34936              	.L2609:
 34937 0028 00000000 		.word	ShowRPN
 34938              		.cfi_endproc
 34939              	.LFE272:
 34941              		.section	.rodata.paste_raw_x.str1.4,"aMS",%progbits,1
 34942              		.align	2
 34943              	.LC9:
 34944 0000 0D0A0920 		.ascii	"\015\012\011 :;\000"
 34944      3A3B00
 34945              		.section	.text.paste_raw_x,"ax",%progbits
 34946              		.align	1
 34947              		.p2align 2,,3
 34948              		.global	paste_raw_x
 34949              		.syntax unified
 34950              		.thumb
 34951              		.thumb_func
 34952              		.fpu fpv4-sp-d16
 34954              	paste_raw_x:
 34955              	.LVL2699:
 34956              	.LFB273:
6480:src/xeq.c     **** 
6481:src/xeq.c     **** #ifndef REALBUILD
6482:src/xeq.c     **** 
6483:src/xeq.c     **** #include "string.h"
6484:src/xeq.c     **** 
6485:src/xeq.c     **** void paste_raw_x(const char *in)
6486:src/xeq.c     **** {
 34957              		.loc 1 6486 1 is_stmt 1 view -0
 34958              		.cfi_startproc
 34959              		@ args = 0, pretend = 0, frame = 40
 34960              		@ frame_needed = 0, uses_anonymous_args = 0
6487:src/xeq.c     **** 	char *buffer = strdup( in );
 34961              		.loc 1 6487 2 view .LVU9413
6486:src/xeq.c     **** 	char *buffer = strdup( in );
 34962              		.loc 1 6486 1 is_stmt 0 view .LVU9414
 34963 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 34964              		.cfi_def_cfa_offset 32
 34965              		.cfi_offset 4, -32
 34966              		.cfi_offset 5, -28
 34967              		.cfi_offset 6, -24
 34968              		.cfi_offset 7, -20
 34969              		.cfi_offset 8, -16
 34970              		.cfi_offset 9, -12
 34971              		.cfi_offset 10, -8
 34972              		.cfi_offset 14, -4
 34973 0004 8AB0     		sub	sp, sp, #40
 34974              		.cfi_def_cfa_offset 72
 34975              		.loc 1 6487 17 view .LVU9415
 34976 0006 FFF7FEFF 		bl	strdup
 34977              	.LVL2700:
6488:src/xeq.c     **** 
6489:src/xeq.c     **** 	if ( buffer ) {
ARM GAS  /tmp/ccQQPlfu.s 			page 880


 34978              		.loc 1 6489 2 is_stmt 1 view .LVU9416
 34979              		.loc 1 6489 5 is_stmt 0 view .LVU9417
 34980 000a 0028     		cmp	r0, #0
 34981 000c 5CD0     		beq	.L2612
 34982              	.LBB4655:
6490:src/xeq.c     **** 		static const char *delim = "\r\n\t :;";
 34983              		.loc 1 6490 3 is_stmt 1 view .LVU9418
6491:src/xeq.c     **** 		char *p = strtok( buffer, delim );
 34984              		.loc 1 6491 3 view .LVU9419
 34985              	.LBB4656:
 34986              	.LBB4657:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34987              		.loc 1 1223 6 is_stmt 0 view .LVU9420
 34988 000e 394D     		ldr	r5, .L2647
 34989              	.LBE4657:
 34990              	.LBE4656:
 34991              		.loc 1 6491 13 view .LVU9421
 34992 0010 3949     		ldr	r1, .L2647+4
 34993 0012 8146     		mov	r9, r0
 34994 0014 FFF7FEFF 		bl	strtok
 34995              	.LVL2701:
 34996              	.LBB4661:
 34997              	.LBB4658:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34998              		.loc 1 1223 5 view .LVU9422
 34999 0018 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 35000              	.LBE4658:
 35001              	.LBE4661:
 35002              		.loc 1 6491 13 view .LVU9423
 35003 001a 0446     		mov	r4, r0
 35004              	.LVL2702:
6492:src/xeq.c     **** 		process_cmdline();
 35005              		.loc 1 6492 3 is_stmt 1 view .LVU9424
 35006              	.LBB4662:
 35007              	.LBI4656:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 35008              		.loc 1 1220 6 view .LVU9425
 35009              	.LBB4659:
1221:src/xeq.c     **** 
 35010              		.loc 1 1221 2 view .LVU9426
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35011              		.loc 1 1223 2 view .LVU9427
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35012              		.loc 1 1223 5 is_stmt 0 view .LVU9428
 35013 001c 002B     		cmp	r3, #0
 35014 001e 5ED1     		bne	.L2643
 35015              	.LVL2703:
 35016              	.L2613:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35017              		.loc 1 1223 5 view .LVU9429
 35018              	.LBE4659:
 35019              	.LBE4662:
6493:src/xeq.c     **** 		while ( p ) {
 35020              		.loc 1 6493 9 is_stmt 1 view .LVU9430
 35021 0020 002C     		cmp	r4, #0
 35022 0022 4ED0     		beq	.L2621
 35023 0024 354E     		ldr	r6, .L2647+8
ARM GAS  /tmp/ccQQPlfu.s 			page 881


 35024              	.LBB4663:
 35025              	.LBB4664:
6494:src/xeq.c     **** 			char *pp = strchr( p, ',' );
6495:src/xeq.c     **** 			if ( pp ) {
6496:src/xeq.c     **** 				*pp = '.';
6497:src/xeq.c     **** 			}
6498:src/xeq.c     **** 			if (is_intmode()) {
6499:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
6500:src/xeq.c     **** 				lift_if_enabled();
6501:src/xeq.c     **** 				set_lift();
6502:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
6503:src/xeq.c     **** 			} else {
6504:src/xeq.c     **** 				decNumber x;
6505:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 35026              		.loc 1 6505 5 is_stmt 0 view .LVU9431
 35027 0026 DFF8DC80 		ldr	r8, .L2647+16
 35028              	.LBE4664:
6506:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
6507:src/xeq.c     **** 					lift_if_enabled();
6508:src/xeq.c     **** 					set_lift();
6509:src/xeq.c     **** 					setX(&x);
6510:src/xeq.c     **** 				}
6511:src/xeq.c     **** 				else {
6512:src/xeq.c     **** 					error_message(Error);
6513:src/xeq.c     **** 					Error = 0;
6514:src/xeq.c     **** 					break;
6515:src/xeq.c     **** 				}
6516:src/xeq.c     **** 			}
6517:src/xeq.c     **** 			p = strtok( NULL, delim );
 35029              		.loc 1 6517 8 view .LVU9432
 35030 002a 334F     		ldr	r7, .L2647+4
 35031 002c 21E0     		b	.L2622
 35032              	.LVL2704:
 35033              	.L2645:
 35034              	.LBB4683:
6499:src/xeq.c     **** 				lift_if_enabled();
 35035              		.loc 1 6499 5 is_stmt 1 view .LVU9433
6499:src/xeq.c     **** 				lift_if_enabled();
 35036              		.loc 1 6499 31 is_stmt 0 view .LVU9434
 35037 002e 94F800A0 		ldrb	r10, [r4]	@ zero_extendqisi2
 35038              	.LBB4684:
 35039              	.LBB4685:
 35040              	.LBB4686:
 35041              	.LBB4687:
 738:src/xeq.c     **** }
 35042              		.loc 1 738 15 view .LVU9435
 35043 0032 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35044              	.LBE4687:
 35045              	.LBE4686:
 35046              	.LBE4685:
 35047              	.LBE4684:
6499:src/xeq.c     **** 				lift_if_enabled();
 35048              		.loc 1 6499 31 view .LVU9436
 35049 0034 AAF12D0A 		sub	r10, r10, #45
 35050 0038 BAFA8AFA 		clz	r10, r10
 35051              	.LBB4693:
 35052              	.LBB4690:
ARM GAS  /tmp/ccQQPlfu.s 			page 882


 742:src/xeq.c     **** 		lift();
 35053              		.loc 1 742 5 view .LVU9437
 35054 003c 5A06     		lsls	r2, r3, #25
 35055              	.LBE4690:
 35056              	.LBE4693:
6499:src/xeq.c     **** 				lift_if_enabled();
 35057              		.loc 1 6499 31 view .LVU9438
 35058 003e 4FEA5A1A 		lsr	r10, r10, #5
 35059              	.LVL2705:
6500:src/xeq.c     **** 				set_lift();
 35060              		.loc 1 6500 5 is_stmt 1 view .LVU9439
 35061              	.LBB4694:
 35062              	.LBI4684:
 741:src/xeq.c     **** 	if (get_lift())
 35063              		.loc 1 741 6 view .LVU9440
 35064              	.LBB4691:
 742:src/xeq.c     **** 		lift();
 35065              		.loc 1 742 2 view .LVU9441
 35066              	.LBB4689:
 35067              	.LBI4686:
 737:src/xeq.c     **** 	return State2.state_lift;
 35068              		.loc 1 737 12 view .LVU9442
 35069              	.LBB4688:
 738:src/xeq.c     **** }
 35070              		.loc 1 738 2 view .LVU9443
 35071              	.LBE4688:
 35072              	.LBE4689:
 742:src/xeq.c     **** 		lift();
 35073              		.loc 1 742 5 is_stmt 0 view .LVU9444
 35074 0042 46D4     		bmi	.L2644
 35075              	.LVL2706:
 35076              	.L2617:
 742:src/xeq.c     **** 		lift();
 35077              		.loc 1 742 5 view .LVU9445
 35078              	.LBE4691:
 35079              	.LBE4694:
6501:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
 35080              		.loc 1 6501 5 is_stmt 1 view .LVU9446
 35081              	.LBB4695:
 35082              	.LBI4695:
 761:src/xeq.c     ****     State2.state_lift = 1;
 35083              		.loc 1 761 6 view .LVU9447
 35084              	.LBB4696:
 762:src/xeq.c     **** }
 35085              		.loc 1 762 5 view .LVU9448
 762:src/xeq.c     **** }
 35086              		.loc 1 762 23 is_stmt 0 view .LVU9449
 35087 0044 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35088 0046 43F04003 		orr	r3, r3, #64
 35089 004a EB75     		strb	r3, [r5, #23]
 35090              	.LBE4696:
 35091              	.LBE4695:
6502:src/xeq.c     **** 			} else {
 35092              		.loc 1 6502 5 is_stmt 1 view .LVU9450
6502:src/xeq.c     **** 			} else {
 35093              		.loc 1 6502 50 is_stmt 0 view .LVU9451
 35094 004c FFF7FEFF 		bl	int_base
ARM GAS  /tmp/ccQQPlfu.s 			page 883


 35095              	.LVL2707:
6502:src/xeq.c     **** 			} else {
 35096              		.loc 1 6502 37 view .LVU9452
 35097 0050 5444     		add	r4, r4, r10
 35098              	.LVL2708:
6502:src/xeq.c     **** 			} else {
 35099              		.loc 1 6502 50 view .LVU9453
 35100 0052 0246     		mov	r2, r0
6502:src/xeq.c     **** 			} else {
 35101              		.loc 1 6502 5 view .LVU9454
 35102 0054 0021     		movs	r1, #0
 35103 0056 2046     		mov	r0, r4
 35104 0058 FFF7FEFF 		bl	strtoull
 35105              	.LVL2709:
 35106 005c 5246     		mov	r2, r10
 35107 005e FFF7FEFF 		bl	build_value
 35108              	.LVL2710:
 35109 0062 FFF7FEFF 		bl	setX_int
 35110              	.LVL2711:
 35111              	.LBE4683:
 35112              		.loc 1 6517 4 is_stmt 1 view .LVU9455
 35113              		.loc 1 6517 8 is_stmt 0 view .LVU9456
 35114 0066 3946     		mov	r1, r7
 35115 0068 0020     		movs	r0, #0
 35116 006a FFF7FEFF 		bl	strtok
 35117              	.LVL2712:
 35118              		.loc 1 6517 8 view .LVU9457
 35119              	.LBE4663:
6493:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 35120              		.loc 1 6493 9 is_stmt 1 view .LVU9458
 35121 006e 0446     		mov	r4, r0
 35122 0070 38B3     		cbz	r0, .L2621
 35123              	.LVL2713:
 35124              	.L2622:
 35125              	.LBB4702:
6494:src/xeq.c     **** 			if ( pp ) {
 35126              		.loc 1 6494 4 view .LVU9459
6494:src/xeq.c     **** 			if ( pp ) {
 35127              		.loc 1 6494 15 is_stmt 0 view .LVU9460
 35128 0072 2C21     		movs	r1, #44
 35129 0074 2046     		mov	r0, r4
 35130 0076 FFF7FEFF 		bl	strchr
 35131              	.LVL2714:
6495:src/xeq.c     **** 				*pp = '.';
 35132              		.loc 1 6495 4 is_stmt 1 view .LVU9461
6495:src/xeq.c     **** 				*pp = '.';
 35133              		.loc 1 6495 7 is_stmt 0 view .LVU9462
 35134 007a 08B1     		cbz	r0, .L2615
6496:src/xeq.c     **** 			}
 35135              		.loc 1 6496 5 is_stmt 1 view .LVU9463
6496:src/xeq.c     **** 			}
 35136              		.loc 1 6496 9 is_stmt 0 view .LVU9464
 35137 007c 2E23     		movs	r3, #46
 35138 007e 0370     		strb	r3, [r0]
 35139              	.L2615:
6498:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 35140              		.loc 1 6498 4 is_stmt 1 view .LVU9465
ARM GAS  /tmp/ccQQPlfu.s 			page 884


6498:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 35141              		.loc 1 6498 8 is_stmt 0 view .LVU9466
 35142 0080 3368     		ldr	r3, [r6]
 35143 0082 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
6498:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 35144              		.loc 1 6498 7 view .LVU9467
 35145 0086 13F0010A 		ands	r10, r3, #1
 35146 008a D0D1     		bne	.L2645
 35147              	.LBB4698:
6504:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 35148              		.loc 1 6504 5 is_stmt 1 view .LVU9468
6505:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 35149              		.loc 1 6505 5 view .LVU9469
 35150 008c 2146     		mov	r1, r4
 35151 008e 01A8     		add	r0, sp, #4
 35152              	.LVL2715:
6505:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 35153              		.loc 1 6505 5 is_stmt 0 view .LVU9470
 35154 0090 4246     		mov	r2, r8
 35155 0092 FFF7FEFF 		bl	decNumberFromString
 35156              	.LVL2716:
6506:src/xeq.c     **** 					lift_if_enabled();
 35157              		.loc 1 6506 5 is_stmt 1 view .LVU9471
6506:src/xeq.c     **** 					lift_if_enabled();
 35158              		.loc 1 6506 11 is_stmt 0 view .LVU9472
 35159 0096 01A8     		add	r0, sp, #4
 35160 0098 FFF7FEFF 		bl	check_special
 35161              	.LVL2717:
6506:src/xeq.c     **** 					lift_if_enabled();
 35162              		.loc 1 6506 8 view .LVU9473
 35163 009c 10BB     		cbnz	r0, .L2619
6507:src/xeq.c     **** 					set_lift();
 35164              		.loc 1 6507 6 is_stmt 1 view .LVU9474
 35165              	.LBB4665:
 35166              	.LBI4665:
 741:src/xeq.c     **** 	if (get_lift())
 35167              		.loc 1 741 6 view .LVU9475
 35168              	.LBB4666:
 742:src/xeq.c     **** 		lift();
 35169              		.loc 1 742 2 view .LVU9476
 35170              	.LBB4667:
 35171              	.LBI4667:
 737:src/xeq.c     **** 	return State2.state_lift;
 35172              		.loc 1 737 12 view .LVU9477
 35173              	.LBB4668:
 738:src/xeq.c     **** }
 35174              		.loc 1 738 2 view .LVU9478
 738:src/xeq.c     **** }
 35175              		.loc 1 738 15 is_stmt 0 view .LVU9479
 35176 009e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35177              	.LBE4668:
 35178              	.LBE4667:
 742:src/xeq.c     **** 		lift();
 35179              		.loc 1 742 5 view .LVU9480
 35180 00a0 5B06     		lsls	r3, r3, #25
 35181 00a2 19D4     		bmi	.L2646
 35182              	.L2620:
ARM GAS  /tmp/ccQQPlfu.s 			page 885


 35183              	.LBE4666:
 35184              	.LBE4665:
6508:src/xeq.c     **** 					setX(&x);
 35185              		.loc 1 6508 6 is_stmt 1 view .LVU9481
 35186              	.LBB4670:
 35187              	.LBI4670:
 761:src/xeq.c     ****     State2.state_lift = 1;
 35188              		.loc 1 761 6 view .LVU9482
 35189              	.LBB4671:
 762:src/xeq.c     **** }
 35190              		.loc 1 762 5 view .LVU9483
 762:src/xeq.c     **** }
 35191              		.loc 1 762 23 is_stmt 0 view .LVU9484
 35192 00a4 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35193              	.LBE4671:
 35194              	.LBE4670:
 35195              	.LBB4674:
 35196              	.LBB4675:
 823:src/xeq.c     **** }
 35197              		.loc 1 823 2 view .LVU9485
 35198 00a6 01A9     		add	r1, sp, #4
 35199              	.LBE4675:
 35200              	.LBE4674:
 35201              	.LBB4678:
 35202              	.LBB4672:
 762:src/xeq.c     **** }
 35203              		.loc 1 762 23 view .LVU9486
 35204 00a8 43F04003 		orr	r3, r3, #64
 35205              	.LBE4672:
 35206              	.LBE4678:
 35207              	.LBB4679:
 35208              	.LBB4676:
 823:src/xeq.c     **** }
 35209              		.loc 1 823 2 view .LVU9487
 35210 00ac 6420     		movs	r0, #100
 35211              	.LBE4676:
 35212              	.LBE4679:
 35213              	.LBB4680:
 35214              	.LBB4673:
 762:src/xeq.c     **** }
 35215              		.loc 1 762 23 view .LVU9488
 35216 00ae EB75     		strb	r3, [r5, #23]
 35217              	.LBE4673:
 35218              	.LBE4680:
6509:src/xeq.c     **** 				}
 35219              		.loc 1 6509 6 is_stmt 1 view .LVU9489
 35220              	.LVL2718:
 35221              	.LBB4681:
 35222              	.LBI4674:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 35223              		.loc 1 822 6 view .LVU9490
 35224              	.LBB4677:
 823:src/xeq.c     **** }
 35225              		.loc 1 823 2 view .LVU9491
 35226 00b0 FFF7FEFF 		bl	setRegister
 35227              	.LVL2719:
 823:src/xeq.c     **** }
ARM GAS  /tmp/ccQQPlfu.s 			page 886


 35228              		.loc 1 823 2 is_stmt 0 view .LVU9492
 35229              	.LBE4677:
 35230              	.LBE4681:
 35231              	.LBE4698:
 35232              		.loc 1 6517 4 is_stmt 1 view .LVU9493
 35233              		.loc 1 6517 8 is_stmt 0 view .LVU9494
 35234 00b4 3946     		mov	r1, r7
 35235 00b6 0020     		movs	r0, #0
 35236 00b8 FFF7FEFF 		bl	strtok
 35237              	.LVL2720:
 35238              		.loc 1 6517 8 view .LVU9495
 35239              	.LBE4702:
6493:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 35240              		.loc 1 6493 9 is_stmt 1 view .LVU9496
 35241 00bc 0446     		mov	r4, r0
 35242 00be 0028     		cmp	r0, #0
 35243 00c0 D7D1     		bne	.L2622
 35244              	.LVL2721:
 35245              	.L2621:
6518:src/xeq.c     **** 		}
6519:src/xeq.c     **** 		free( buffer );
 35246              		.loc 1 6519 3 view .LVU9497
 35247 00c2 4846     		mov	r0, r9
 35248 00c4 FFF7FEFF 		bl	free
 35249              	.LVL2722:
 35250              	.L2612:
 35251              		.loc 1 6519 3 is_stmt 0 view .LVU9498
 35252              	.LBE4655:
6520:src/xeq.c     **** 	}
6521:src/xeq.c     **** 	display();
 35253              		.loc 1 6521 2 is_stmt 1 view .LVU9499
 35254 00c8 FFF7FEFF 		bl	display
 35255              	.LVL2723:
6522:src/xeq.c     **** }
 35256              		.loc 1 6522 1 is_stmt 0 view .LVU9500
 35257 00cc 0AB0     		add	sp, sp, #40
 35258              		.cfi_remember_state
 35259              		.cfi_def_cfa_offset 32
 35260              		@ sp needed
 35261 00ce BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 35262              	.LVL2724:
 35263              	.L2644:
 35264              		.cfi_restore_state
 35265              	.LBB4706:
 35266              	.LBB4703:
 35267              	.LBB4699:
 35268              	.LBB4697:
 35269              	.LBB4692:
 743:src/xeq.c     **** }
 35270              		.loc 1 743 3 is_stmt 1 view .LVU9501
 35271 00d2 FFF7FEFF 		bl	lift
 35272              	.LVL2725:
 743:src/xeq.c     **** }
 35273              		.loc 1 743 3 is_stmt 0 view .LVU9502
 35274 00d6 B5E7     		b	.L2617
 35275              	.LVL2726:
 35276              	.L2646:
ARM GAS  /tmp/ccQQPlfu.s 			page 887


 743:src/xeq.c     **** }
 35277              		.loc 1 743 3 view .LVU9503
 35278              	.LBE4692:
 35279              	.LBE4697:
 35280              	.LBE4699:
 35281              	.LBB4700:
 35282              	.LBB4682:
 35283              	.LBB4669:
 743:src/xeq.c     **** }
 35284              		.loc 1 743 3 is_stmt 1 view .LVU9504
 35285 00d8 FFF7FEFF 		bl	lift
 35286              	.LVL2727:
 35287 00dc E2E7     		b	.L2620
 35288              	.LVL2728:
 35289              	.L2643:
 743:src/xeq.c     **** }
 35290              		.loc 1 743 3 is_stmt 0 view .LVU9505
 35291              	.LBE4669:
 35292              	.LBE4682:
 35293              	.LBE4700:
 35294              	.LBE4703:
 35295              	.LBB4704:
 35296              	.LBB4660:
 35297 00de FFF7FEFF 		bl	process_cmdline.part.0
 35298              	.LVL2729:
 743:src/xeq.c     **** }
 35299              		.loc 1 743 3 view .LVU9506
 35300 00e2 9DE7     		b	.L2613
 35301              	.L2619:
 743:src/xeq.c     **** }
 35302              		.loc 1 743 3 view .LVU9507
 35303              	.LBE4660:
 35304              	.LBE4704:
 35305              	.LBB4705:
 35306              	.LBB4701:
6512:src/xeq.c     **** 					Error = 0;
 35307              		.loc 1 6512 6 is_stmt 1 view .LVU9508
 35308 00e4 064C     		ldr	r4, .L2647+12
 35309              	.LVL2730:
6512:src/xeq.c     **** 					Error = 0;
 35310              		.loc 1 6512 6 is_stmt 0 view .LVU9509
 35311 00e6 2068     		ldr	r0, [r4]
 35312 00e8 FFF7FEFF 		bl	error_message
 35313              	.LVL2731:
6513:src/xeq.c     **** 					break;
 35314              		.loc 1 6513 6 is_stmt 1 view .LVU9510
6513:src/xeq.c     **** 					break;
 35315              		.loc 1 6513 12 is_stmt 0 view .LVU9511
 35316 00ec C4F800A0 		str	r10, [r4]
6514:src/xeq.c     **** 				}
 35317              		.loc 1 6514 6 is_stmt 1 view .LVU9512
 35318 00f0 E7E7     		b	.L2621
 35319              	.L2648:
 35320 00f2 00BF     		.align	2
 35321              	.L2647:
 35322 00f4 00000000 		.word	StateWhileOn
 35323 00f8 00000000 		.word	.LC9
ARM GAS  /tmp/ccQQPlfu.s 			page 888


 35324 00fc 00000000 		.word	main_ram
 35325 0100 00000000 		.word	Error
 35326 0104 00000000 		.word	Ctx
 35327              	.LBE4701:
 35328              	.LBE4705:
 35329              	.LBE4706:
 35330              		.cfi_endproc
 35331              	.LFE273:
 35333              		.global	__aeabi_uldivmod
 35334              		.section	.rodata.fill_buffer_from_raw_x.str1.4,"aMS",%progbits,1
 35335              		.align	2
 35336              	.LC10:
 35337 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 35337      34353637 
 35337      38394142 
 35337      43444546 
 35337      00
 35338              		.section	.text.fill_buffer_from_raw_x,"ax",%progbits
 35339              		.align	1
 35340              		.p2align 2,,3
 35341              		.global	fill_buffer_from_raw_x
 35342              		.syntax unified
 35343              		.thumb
 35344              		.thumb_func
 35345              		.fpu fpv4-sp-d16
 35347              	fill_buffer_from_raw_x:
 35348              	.LVL2732:
 35349              	.LFB274:
6523:src/xeq.c     **** 
6524:src/xeq.c     **** char* fill_buffer_from_raw_x(char *buffer)
6525:src/xeq.c     **** {
 35350              		.loc 1 6525 1 view -0
 35351              		.cfi_startproc
 35352              		@ args = 0, pretend = 0, frame = 40
 35353              		@ frame_needed = 0, uses_anonymous_args = 0
6526:src/xeq.c     **** 	process_cmdline();
 35354              		.loc 1 6526 2 view .LVU9514
 35355              	.LBB4707:
 35356              	.LBI4707:
1220:src/xeq.c     **** 	decNumber a, b, x, t;
 35357              		.loc 1 1220 6 view .LVU9515
 35358              	.LBB4708:
1221:src/xeq.c     **** 
 35359              		.loc 1 1221 2 view .LVU9516
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35360              		.loc 1 1223 2 view .LVU9517
 35361              	.LBE4708:
 35362              	.LBE4707:
6525:src/xeq.c     **** 	process_cmdline();
 35363              		.loc 1 6525 1 is_stmt 0 view .LVU9518
 35364 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 35365              		.cfi_def_cfa_offset 36
 35366              		.cfi_offset 4, -36
 35367              		.cfi_offset 5, -32
 35368              		.cfi_offset 6, -28
 35369              		.cfi_offset 7, -24
 35370              		.cfi_offset 8, -20
ARM GAS  /tmp/ccQQPlfu.s 			page 889


 35371              		.cfi_offset 9, -16
 35372              		.cfi_offset 10, -12
 35373              		.cfi_offset 11, -8
 35374              		.cfi_offset 14, -4
 35375              	.LBB4712:
 35376              	.LBB4709:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35377              		.loc 1 1223 6 view .LVU9519
 35378 0004 2F4B     		ldr	r3, .L2673
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35379              		.loc 1 1223 5 view .LVU9520
 35380 0006 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 35381              	.LBE4709:
 35382              	.LBE4712:
6525:src/xeq.c     **** 	process_cmdline();
 35383              		.loc 1 6525 1 view .LVU9521
 35384 0008 8BB0     		sub	sp, sp, #44
 35385              		.cfi_def_cfa_offset 80
6525:src/xeq.c     **** 	process_cmdline();
 35386              		.loc 1 6525 1 view .LVU9522
 35387 000a 0446     		mov	r4, r0
 35388              	.LBB4713:
 35389              	.LBB4710:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35390              		.loc 1 1223 5 view .LVU9523
 35391 000c 002B     		cmp	r3, #0
 35392 000e 55D1     		bne	.L2670
 35393              	.LVL2733:
 35394              	.L2650:
1223:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35395              		.loc 1 1223 5 view .LVU9524
 35396              	.LBE4710:
 35397              	.LBE4713:
6527:src/xeq.c     **** 	if (is_intmode()) {
 35398              		.loc 1 6527 2 is_stmt 1 view .LVU9525
 35399              		.loc 1 6527 6 is_stmt 0 view .LVU9526
 35400 0010 2D4D     		ldr	r5, .L2673+4
 35401 0012 2B68     		ldr	r3, [r5]
 35402 0014 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 35403              		.loc 1 6527 5 view .LVU9527
 35404 0018 DA07     		lsls	r2, r3, #31
 35405 001a 2CD5     		bpl	.L2651
 35406              	.LBB4714:
6528:src/xeq.c     **** 		int sgn;
 35407              		.loc 1 6528 3 is_stmt 1 view .LVU9528
6529:src/xeq.c     **** 		unsigned long long int x = extract_value(get_reg_n_int(regX_idx), &sgn);
 35408              		.loc 1 6529 3 view .LVU9529
 35409              		.loc 1 6529 30 is_stmt 0 view .LVU9530
 35410 001c 6420     		movs	r0, #100
 35411 001e FFF7FEFF 		bl	get_reg_n_int
 35412              	.LVL2734:
 35413 0022 01AA     		add	r2, sp, #4
 35414 0024 FFF7FEFF 		bl	extract_value
 35415              	.LVL2735:
 35416 0028 0646     		mov	r6, r0
 35417 002a 0F46     		mov	r7, r1
 35418              	.LVL2736:
ARM GAS  /tmp/ccQQPlfu.s 			page 890


6530:src/xeq.c     **** 		const int base = int_base();
 35419              		.loc 1 6530 3 is_stmt 1 view .LVU9531
 35420              		.loc 1 6530 20 is_stmt 0 view .LVU9532
 35421 002c FFF7FEFF 		bl	int_base
 35422              	.LVL2737:
6531:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
6532:src/xeq.c     **** 
6533:src/xeq.c     **** 		*p-- = '\0';
 35423              		.loc 1 6533 8 view .LVU9533
 35424 0030 0023     		movs	r3, #0
 35425              	.LVL2738:
6531:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
 35426              		.loc 1 6531 3 is_stmt 1 view .LVU9534
 35427              		.loc 1 6533 3 view .LVU9535
 35428              		.loc 1 6533 8 is_stmt 0 view .LVU9536
 35429 0032 E370     		strb	r3, [r4, #3]
6534:src/xeq.c     **** 		if (x == 0)
 35430              		.loc 1 6534 3 is_stmt 1 view .LVU9537
 35431              		.loc 1 6534 6 is_stmt 0 view .LVU9538
 35432 0034 56EA0703 		orrs	r3, r6, r7
 35433 0038 35D0     		beq	.L2671
 35434 003a 244D     		ldr	r5, .L2673+8
6533:src/xeq.c     **** 		if (x == 0)
 35435              		.loc 1 6533 5 view .LVU9539
 35436 003c 0234     		adds	r4, r4, #2
 35437              	.LVL2739:
6533:src/xeq.c     **** 		if (x == 0)
 35438              		.loc 1 6533 5 view .LVU9540
 35439 003e 8046     		mov	r8, r0
 35440 0040 4FEAE079 		asr	r9, r0, #31
 35441              	.LVL2740:
 35442              	.L2654:
 35443              	.LBB4715:
6535:src/xeq.c     **** 			*p-- = '0'; 
6536:src/xeq.c     **** 		else {
6537:src/xeq.c     **** 			while (x != 0) {
6538:src/xeq.c     **** 				const int n = x % base;
 35444              		.loc 1 6538 5 is_stmt 1 view .LVU9541
 35445 0044 3046     		mov	r0, r6
 35446 0046 3946     		mov	r1, r7
 35447 0048 4246     		mov	r2, r8
 35448 004a 4B46     		mov	r3, r9
 35449 004c FFF7FEFF 		bl	__aeabi_uldivmod
 35450              	.LVL2741:
6539:src/xeq.c     **** 				x /= base;
 35451              		.loc 1 6539 5 view .LVU9542
 35452 0050 BB46     		mov	fp, r7
 35453 0052 B246     		mov	r10, r6
 35454              	.LBE4715:
6537:src/xeq.c     **** 				const int n = x % base;
 35455              		.loc 1 6537 10 is_stmt 0 view .LVU9543
 35456 0054 CB45     		cmp	fp, r9
 35457              	.LBB4716:
6540:src/xeq.c     **** 				*p-- = n["0123456789ABCDEF"];
 35458              		.loc 1 6540 10 view .LVU9544
 35459 0056 AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 35460 0058 04F80139 		strb	r3, [r4], #-1
ARM GAS  /tmp/ccQQPlfu.s 			page 891


 35461              	.LVL2742:
 35462              		.loc 1 6540 10 view .LVU9545
 35463              	.LBE4716:
6537:src/xeq.c     **** 				const int n = x % base;
 35464              		.loc 1 6537 10 view .LVU9546
 35465 005c 08BF     		it	eq
 35466 005e C245     		cmpeq	r10, r8
 35467              	.LBB4717:
6539:src/xeq.c     **** 				x /= base;
 35468              		.loc 1 6539 7 view .LVU9547
 35469 0060 0646     		mov	r6, r0
 35470              	.LVL2743:
6539:src/xeq.c     **** 				x /= base;
 35471              		.loc 1 6539 7 view .LVU9548
 35472 0062 0F46     		mov	r7, r1
 35473              	.LVL2744:
 35474              		.loc 1 6540 5 is_stmt 1 view .LVU9549
 35475              		.loc 1 6540 5 is_stmt 0 view .LVU9550
 35476              	.LBE4717:
6537:src/xeq.c     **** 				const int n = x % base;
 35477              		.loc 1 6537 10 is_stmt 1 view .LVU9551
 35478 0064 EED2     		bcs	.L2654
6541:src/xeq.c     **** 			}
6542:src/xeq.c     **** 		}
6543:src/xeq.c     **** 		if (sgn)
 35479              		.loc 1 6543 3 view .LVU9552
 35480              		.loc 1 6543 6 is_stmt 0 view .LVU9553
 35481 0066 019B     		ldr	r3, [sp, #4]
 35482 0068 1BB3     		cbz	r3, .L2655
 35483              	.LVL2745:
 35484              	.L2672:
6544:src/xeq.c     **** 			*p = '-';
 35485              		.loc 1 6544 4 is_stmt 1 view .LVU9554
 35486              		.loc 1 6544 7 is_stmt 0 view .LVU9555
 35487 006a 2D23     		movs	r3, #45
 35488 006c 2370     		strb	r3, [r4]
 35489              	.LVL2746:
 35490              	.L2649:
 35491              		.loc 1 6544 7 view .LVU9556
 35492              	.LBE4714:
6545:src/xeq.c     **** 		else
6546:src/xeq.c     **** 			p++;
6547:src/xeq.c     **** 		return p;
6548:src/xeq.c     **** 	} else {
6549:src/xeq.c     **** 		decNumber x;
6550:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
6551:src/xeq.c     **** 		if (UState.fraccomma) {
6552:src/xeq.c     **** 			char *p = strchr(buffer, '.');
6553:src/xeq.c     **** 			if (p != NULL)
6554:src/xeq.c     **** 				*p = ',';
6555:src/xeq.c     **** 		}
6556:src/xeq.c     **** 
6557:src/xeq.c     **** 		return buffer;
6558:src/xeq.c     **** 	}
6559:src/xeq.c     **** }
 35493              		.loc 1 6559 1 view .LVU9557
 35494 006e 2046     		mov	r0, r4
ARM GAS  /tmp/ccQQPlfu.s 			page 892


 35495 0070 0BB0     		add	sp, sp, #44
 35496              		.cfi_remember_state
 35497              		.cfi_def_cfa_offset 36
 35498              		@ sp needed
 35499 0072 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35500              	.LVL2747:
 35501              	.L2651:
 35502              		.cfi_restore_state
 35503              	.LBB4718:
6549:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
 35504              		.loc 1 6549 3 is_stmt 1 view .LVU9558
6550:src/xeq.c     **** 		if (UState.fraccomma) {
 35505              		.loc 1 6550 3 view .LVU9559
 35506              	.LBB4719:
 35507              	.LBI4719:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 35508              		.loc 1 818 12 view .LVU9560
 35509              	.LBB4720:
 819:src/xeq.c     **** }
 35510              		.loc 1 819 2 view .LVU9561
 819:src/xeq.c     **** }
 35511              		.loc 1 819 9 is_stmt 0 view .LVU9562
 35512 0076 6421     		movs	r1, #100
 35513 0078 01A8     		add	r0, sp, #4
 35514              	.LVL2748:
 819:src/xeq.c     **** }
 35515              		.loc 1 819 9 view .LVU9563
 35516 007a FFF7FEFF 		bl	getRegister
 35517              	.LVL2749:
 819:src/xeq.c     **** }
 35518              		.loc 1 819 9 view .LVU9564
 35519              	.LBE4720:
 35520              	.LBE4719:
6550:src/xeq.c     **** 		if (UState.fraccomma) {
 35521              		.loc 1 6550 3 view .LVU9565
 35522 007e 2146     		mov	r1, r4
 35523 0080 FFF7FEFF 		bl	decNumberToString
 35524              	.LVL2750:
6551:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35525              		.loc 1 6551 3 is_stmt 1 view .LVU9566
6551:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35526              		.loc 1 6551 7 is_stmt 0 view .LVU9567
 35527 0084 2B68     		ldr	r3, [r5]
 35528 0086 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
6551:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35529              		.loc 1 6551 6 view .LVU9568
 35530 008a 9B06     		lsls	r3, r3, #26
 35531 008c EFD5     		bpl	.L2649
 35532              	.LBB4721:
6552:src/xeq.c     **** 			if (p != NULL)
 35533              		.loc 1 6552 4 is_stmt 1 view .LVU9569
6552:src/xeq.c     **** 			if (p != NULL)
 35534              		.loc 1 6552 14 is_stmt 0 view .LVU9570
 35535 008e 2E21     		movs	r1, #46
 35536 0090 2046     		mov	r0, r4
 35537 0092 FFF7FEFF 		bl	strchr
 35538              	.LVL2751:
ARM GAS  /tmp/ccQQPlfu.s 			page 893


6553:src/xeq.c     **** 				*p = ',';
 35539              		.loc 1 6553 4 is_stmt 1 view .LVU9571
6553:src/xeq.c     **** 				*p = ',';
 35540              		.loc 1 6553 7 is_stmt 0 view .LVU9572
 35541 0096 0028     		cmp	r0, #0
 35542 0098 E9D0     		beq	.L2649
6554:src/xeq.c     **** 		}
 35543              		.loc 1 6554 5 is_stmt 1 view .LVU9573
6554:src/xeq.c     **** 		}
 35544              		.loc 1 6554 8 is_stmt 0 view .LVU9574
 35545 009a 2C23     		movs	r3, #44
 35546 009c 0370     		strb	r3, [r0]
 35547              	.LBE4721:
6557:src/xeq.c     **** 	}
 35548              		.loc 1 6557 3 is_stmt 1 view .LVU9575
 35549              	.LBE4718:
 35550              		.loc 1 6559 1 is_stmt 0 view .LVU9576
 35551 009e 2046     		mov	r0, r4
 35552              	.LVL2752:
 35553              		.loc 1 6559 1 view .LVU9577
 35554 00a0 0BB0     		add	sp, sp, #44
 35555              		.cfi_remember_state
 35556              		.cfi_def_cfa_offset 36
 35557              		@ sp needed
 35558 00a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35559              	.LVL2753:
 35560              	.L2671:
 35561              		.cfi_restore_state
 35562              	.LBB4722:
6535:src/xeq.c     **** 		else {
 35563              		.loc 1 6535 4 is_stmt 1 view .LVU9578
6535:src/xeq.c     **** 		else {
 35564              		.loc 1 6535 9 is_stmt 0 view .LVU9579
 35565 00a6 3023     		movs	r3, #48
 35566 00a8 A370     		strb	r3, [r4, #2]
6543:src/xeq.c     **** 			*p = '-';
 35567              		.loc 1 6543 6 view .LVU9580
 35568 00aa 019B     		ldr	r3, [sp, #4]
6535:src/xeq.c     **** 		else {
 35569              		.loc 1 6535 6 view .LVU9581
 35570 00ac 0134     		adds	r4, r4, #1
 35571              	.LVL2754:
6543:src/xeq.c     **** 			*p = '-';
 35572              		.loc 1 6543 3 is_stmt 1 view .LVU9582
6543:src/xeq.c     **** 			*p = '-';
 35573              		.loc 1 6543 6 is_stmt 0 view .LVU9583
 35574 00ae 002B     		cmp	r3, #0
 35575 00b0 DBD1     		bne	.L2672
 35576              	.LVL2755:
 35577              	.L2655:
6546:src/xeq.c     **** 		return p;
 35578              		.loc 1 6546 4 is_stmt 1 view .LVU9584
6546:src/xeq.c     **** 		return p;
 35579              		.loc 1 6546 5 is_stmt 0 view .LVU9585
 35580 00b2 0134     		adds	r4, r4, #1
 35581              	.LVL2756:
6547:src/xeq.c     **** 	} else {
ARM GAS  /tmp/ccQQPlfu.s 			page 894


 35582              		.loc 1 6547 3 is_stmt 1 view .LVU9586
 35583              	.LBE4722:
 35584              		.loc 1 6559 1 is_stmt 0 view .LVU9587
 35585 00b4 2046     		mov	r0, r4
 35586 00b6 0BB0     		add	sp, sp, #44
 35587              		.cfi_remember_state
 35588              		.cfi_def_cfa_offset 36
 35589              		@ sp needed
 35590 00b8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35591              	.LVL2757:
 35592              	.L2670:
 35593              		.cfi_restore_state
 35594              	.LBB4723:
 35595              	.LBB4711:
 35596              		.loc 1 6559 1 view .LVU9588
 35597 00bc FFF7FEFF 		bl	process_cmdline.part.0
 35598              	.LVL2758:
 35599              		.loc 1 6559 1 view .LVU9589
 35600 00c0 A6E7     		b	.L2650
 35601              	.L2674:
 35602 00c2 00BF     		.align	2
 35603              	.L2673:
 35604 00c4 00000000 		.word	StateWhileOn
 35605 00c8 00000000 		.word	main_ram
 35606 00cc 00000000 		.word	.LC10
 35607              	.LBE4711:
 35608              	.LBE4723:
 35609              		.cfi_endproc
 35610              	.LFE274:
 35612              		.comm	RectPolConv,4,4
 35613              		.comm	StackBase,4,4
 35614              		.comm	RetStk,4,4
 35615              		.comm	ProgFree,4,4
 35616              		.comm	RetStkSize,4,4
 35617              		.comm	TraceBuffer,25,4
 35618              		.comm	Ctx,24,4
 35619              		.comm	UserLocalRegs,4,4
 35620              		.comm	XromUserPc,4,4
 35621              		.comm	ShowRegister,4,4
 35622              		.comm	XeqOpCode,2,2
 35623              		.comm	PcWrapped,4,4
 35624              		.comm	Error,4,4
 35625              		.comm	Busy,4,4
 35626              		.comm	Pause,1,1
 35627              		.comm	JustStopped,4,4
 35628              		.comm	XromRunning,4,4
 35629              		.comm	Running,4,4
 35630              		.global	xrom_targets
 35631              		.section	.rodata
 35632              		.align	2
 35633              		.set	.LANCHOR5,. + 0
 35634              	.LC1:
 35635 0000 0C0C0C0C 		.ascii	"\014\014\014\014\014\014\014\014\014\013\013\013\014"
 35635      0C0C0C0C 
 35635      0C0B0B0B 
 35635      0C
 35636 000d 0C0A0A0C 		.ascii	"\014\012\012\014\014\014\007\010\011\014\014\014\004"
ARM GAS  /tmp/ccQQPlfu.s 			page 895


 35636      0C0C0708 
 35636      090C0C0C 
 35636      04
 35637 001a 05060C0C 		.ascii	"\005\006\014\014\014\001\002\003\014\014\014\000\012"
 35637      0C010203 
 35637      0C0C0C00 
 35637      0A
 35638 0027 0C0C     		.ascii	"\014\014"
 35639              		.section	.bss.result.11597,"aw",%nobits
 35640              		.align	2
 35641              		.set	.LANCHOR2,. + 0
 35644              	result.11597:
 35645 0000 00000000 		.space	16
 35645      00000000 
 35645      00000000 
 35645      00000000 
 35646              		.section	.data.RegionTab,"aw"
 35647              		.align	2
 35648              		.set	.LANCHOR0,. + 0
 35651              	RegionTab:
 35652 0000 00000000 		.word	0
 35653 0004 00000000 		.word	0
 35654 0008 00000000 		.word	0
 35655 000c 00000000 		.word	xrom
 35656              		.section	.rodata.StackRegMask,"a"
 35657              		.align	2
 35658              		.set	.LANCHOR3,. + 0
 35661              	StackRegMask:
 35662 0000 0F01     		.short	271
 35663 0002 FF01     		.short	511
 35664              		.section	.rodata.convergence_tolerances,"a"
 35665              		.align	2
 35666              		.set	.LANCHOR7,. + 0
 35669              	convergence_tolerances:
 35670 0000 00000000 		.word	const_1e_14
 35671 0004 00000000 		.word	const_1e_24
 35672 0008 00000000 		.word	const_1e_32
 35673              		.section	.rodata.modes.11290,"a"
 35674              		.align	2
 35675              		.set	.LANCHOR1,. + 0
 35678              	modes.11290:
 35679 0000 03020401 		.ascii	"\003\002\004\001\005\000\006"
 35679      050006
 35680              		.section	.rodata.modes.11807,"a"
 35681              		.align	2
 35682              		.set	.LANCHOR4,. + 0
 35685              	modes.11807:
 35686 0000 02010081 		.ascii	"\002\001\000\201"
 35687              		.section	.rodata.xrom_targets,"a"
 35688              		.align	2
 35689              		.set	.LANCHOR6,. + 0
 35692              	xrom_targets:
 35693 0000 9107     		.short	1937
 35694 0002 B70B     		.short	2999
 35695 0004 4602     		.short	582
 35696 0006 4402     		.short	580
 35697 0008 420A     		.short	2626
ARM GAS  /tmp/ccQQPlfu.s 			page 896


 35698 000a 340A     		.short	2612
 35699 000c 100C     		.short	3088
 35700 000e 9C05     		.short	1436
 35701 0010 3B0A     		.short	2619
 35702 0012 5A06     		.short	1626
 35703 0014 6F06     		.short	1647
 35704 0016 6B06     		.short	1643
 35705 0018 6406     		.short	1636
 35706 001a 390A     		.short	2617
 35707 001c 7206     		.short	1650
 35708 001e 7506     		.short	1653
 35709 0020 7706     		.short	1655
 35710 0022 5D06     		.short	1629
 35711 0024 5707     		.short	1879
 35712 0026 4F08     		.short	2127
 35713 0028 EB05     		.short	1515
 35714 002a 0405     		.short	1284
 35715 002c 2907     		.short	1833
 35716 002e 8205     		.short	1410
 35717 0030 9A05     		.short	1434
 35718 0032 EC05     		.short	1516
 35719 0034 490A     		.short	2633
 35720              		.text
 35721              	.Letext0:
 35722              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 35723              		.file 3 "dmcp/dmcp.h"
 35724              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 35725              		.file 5 "/usr/include/newlib/sys/_types.h"
 35726              		.file 6 "/usr/include/newlib/sys/reent.h"
 35727              		.file 7 "/usr/include/newlib/sys/lock.h"
 35728              		.file 8 "/usr/include/newlib/stdlib.h"
 35729              		.file 9 "src/decNumber/decContext.h"
 35730              		.file 10 "src/decNumber/decNumber.h"
 35731              		.file 11 "src/decNumber/decimal64.h"
 35732              		.file 12 "src/decNumber/decimal128.h"
 35733              		.file 13 "src/xeq.h"
 35734              		.file 14 "src/data.h"
 35735              		.file 15 "src/keys.h"
 35736              		.file 16 "src/menu.h"
 35737              		.file 17 "src/storage.h"
 35738              		.file 18 "src/stats.h"
 35739              		.file 19 "src/display.h"
 35740              		.file 20 "src/consts.h"
 35741              		.file 21 "src/xrom.h"
 35742              		.file 22 "src/pretty.h"
 35743              		.file 23 "src/xrom_targets.c"
 35744              		.file 24 "src/int.h"
 35745              		.file 25 "/usr/include/newlib/string.h"
 35746              		.file 26 "src/lcd.h"
 35747              		.file 27 "src/decn.h"
 35748              		.file 28 "src/complex.h"
 35749              		.file 29 "/usr/include/newlib/stdio.h"
 35750              		.file 30 "src/alpha.h"
ARM GAS  /tmp/ccQQPlfu.s 			page 897


DEFINED SYMBOLS
                            *ABS*:0000000000000000 xeq.c
     /tmp/ccQQPlfu.s:18     .text.find_section_bounds:0000000000000000 $t
     /tmp/ccQQPlfu.s:26     .text.find_section_bounds:0000000000000000 find_section_bounds
     /tmp/ccQQPlfu.s:164    .text.find_section_bounds:0000000000000068 $d
     /tmp/ccQQPlfu.s:172    .text.reg_address:0000000000000000 $t
     /tmp/ccQQPlfu.s:179    .text.reg_address:0000000000000000 reg_address
     /tmp/ccQQPlfu.s:293    .text.reg_address:0000000000000058 $d
     /tmp/ccQQPlfu.s:300    .text.retstk_up:0000000000000000 $t
     /tmp/ccQQPlfu.s:307    .text.retstk_up:0000000000000000 retstk_up
     /tmp/ccQQPlfu.s:440    .text.retstk_up:000000000000006c $d
                            *COM*:0000000000000004 RetStk
     /tmp/ccQQPlfu.s:447    .text.flag_word:0000000000000000 $t
     /tmp/ccQQPlfu.s:454    .text.flag_word:0000000000000000 flag_word
     /tmp/ccQQPlfu.s:574    .text.flag_word:000000000000006c $d
     /tmp/ccQQPlfu.s:581    .text.set_zero:0000000000000000 $t
     /tmp/ccQQPlfu.s:588    .text.set_zero:0000000000000000 set_zero
     /tmp/ccQQPlfu.s:627    .text.set_zero:0000000000000020 $d
     /tmp/ccQQPlfu.s:634    .text.intResult:0000000000000000 $t
     /tmp/ccQQPlfu.s:641    .text.intResult:0000000000000000 intResult
     /tmp/ccQQPlfu.s:841    .text.intResult:00000000000000a4 $d
                            *COM*:0000000000000004 Error
     /tmp/ccQQPlfu.s:847    .text.check_stack_overlap:0000000000000000 $t
     /tmp/ccQQPlfu.s:854    .text.check_stack_overlap:0000000000000000 check_stack_overlap
     /tmp/ccQQPlfu.s:1068   .text.check_stack_overlap:0000000000000068 $d
     /tmp/ccQQPlfu.s:1075   .text.is_xrom:0000000000000000 $t
     /tmp/ccQQPlfu.s:1083   .text.is_xrom:0000000000000000 is_xrom
     /tmp/ccQQPlfu.s:1104   .text.is_xrom:0000000000000018 $d
     /tmp/ccQQPlfu.s:1109   .text.move_retstk:0000000000000000 $t
     /tmp/ccQQPlfu.s:1117   .text.move_retstk:0000000000000000 move_retstk
     /tmp/ccQQPlfu.s:1300   .text.move_retstk:000000000000006c $d
                            *COM*:0000000000000004 RetStkSize
     /tmp/ccQQPlfu.s:1309   .text.local_levels:0000000000000000 $t
     /tmp/ccQQPlfu.s:1317   .text.local_levels:0000000000000000 local_levels
     /tmp/ccQQPlfu.s:1346   .text.local_levels:0000000000000020 $d
     /tmp/ccQQPlfu.s:1352   .text.local_regs_rarg:0000000000000000 $t
     /tmp/ccQQPlfu.s:1360   .text.local_regs_rarg:0000000000000000 local_regs_rarg
     /tmp/ccQQPlfu.s:1460   .text.local_regs_rarg:0000000000000058 $d
     /tmp/ccQQPlfu.s:1466   .text.get_reg_limit:0000000000000000 $t
     /tmp/ccQQPlfu.s:1473   .text.get_reg_limit:0000000000000000 get_reg_limit
     /tmp/ccQQPlfu.s:1711   .text.get_reg_limit:00000000000000b0 $d
     /tmp/ccQQPlfu.s:1720   .text.local_regs:0000000000000000 $t
     /tmp/ccQQPlfu.s:1728   .text.local_regs:0000000000000000 local_regs
     /tmp/ccQQPlfu.s:1826   .text.local_regs:0000000000000038 $d
     /tmp/ccQQPlfu.s:1836   .text.global_regs_rarg:0000000000000000 $t
     /tmp/ccQQPlfu.s:1844   .text.global_regs_rarg:0000000000000000 global_regs_rarg
     /tmp/ccQQPlfu.s:1917   .text.global_regs_rarg:000000000000003c $d
     /tmp/ccQQPlfu.s:1922   .text.global_regs:0000000000000000 $t
     /tmp/ccQQPlfu.s:1930   .text.global_regs:0000000000000000 global_regs
     /tmp/ccQQPlfu.s:1988   .text.global_regs:0000000000000020 $d
     /tmp/ccQQPlfu.s:1993   .text.version:0000000000000000 $t
     /tmp/ccQQPlfu.s:2001   .text.version:0000000000000000 version
     /tmp/ccQQPlfu.s:2032   .text.version:0000000000000018 $d
     /tmp/ccQQPlfu.s:2037   .text.cmd_off:0000000000000000 $t
     /tmp/ccQQPlfu.s:2045   .text.cmd_off:0000000000000000 cmd_off
     /tmp/ccQQPlfu.s:2061   .text.init_RegionTab:0000000000000000 $t
     /tmp/ccQQPlfu.s:2069   .text.init_RegionTab:0000000000000000 init_RegionTab
ARM GAS  /tmp/ccQQPlfu.s 			page 898


     /tmp/ccQQPlfu.s:2107   .text.init_RegionTab:000000000000001c $d
     /tmp/ccQQPlfu.s:2115   .text.sizeLIB:0000000000000000 $t
     /tmp/ccQQPlfu.s:2123   .text.sizeLIB:0000000000000000 sizeLIB
     /tmp/ccQQPlfu.s:2157   .text.sizeLIB:0000000000000018 $d
     /tmp/ccQQPlfu.s:2163   .text.getprog:0000000000000000 $t
     /tmp/ccQQPlfu.s:2171   .text.getprog:0000000000000000 getprog
     /tmp/ccQQPlfu.s:2275   .text.getprog:0000000000000048 $d
     /tmp/ccQQPlfu.s:2283   .text.get_current_prog:0000000000000000 $t
     /tmp/ccQQPlfu.s:2291   .text.get_current_prog:0000000000000000 get_current_prog
     /tmp/ccQQPlfu.s:2323   .text.get_current_prog:0000000000000020 $d
     /tmp/ccQQPlfu.s:2329   .text.do_inc:0000000000000000 $t
     /tmp/ccQQPlfu.s:2337   .text.do_inc:0000000000000000 do_inc
     /tmp/ccQQPlfu.s:2417   .text.do_inc:0000000000000044 $d
                            *COM*:0000000000000004 PcWrapped
     /tmp/ccQQPlfu.s:2422   .text.user_pc.part.0:0000000000000000 $t
     /tmp/ccQQPlfu.s:2429   .text.user_pc.part.0:0000000000000000 user_pc.part.0
     /tmp/ccQQPlfu.s:2499   .text.user_pc.part.0:0000000000000034 $d
     /tmp/ccQQPlfu.s:2504   .rodata.print_step.str1.4:0000000000000000 $d
     /tmp/ccQQPlfu.s:2508   .text.print_step:0000000000000000 $t
     /tmp/ccQQPlfu.s:2515   .text.print_step:0000000000000000 print_step
     /tmp/ccQQPlfu.s:2684   .text.print_step:0000000000000098 $d
                            *COM*:0000000000000019 TraceBuffer
     /tmp/ccQQPlfu.s:2695   .text.do_dec:0000000000000000 $t
     /tmp/ccQQPlfu.s:2703   .text.do_dec:0000000000000000 do_dec
     /tmp/ccQQPlfu.s:2785   .text.do_dec:0000000000000048 $d
     /tmp/ccQQPlfu.s:2790   .text.update_program_bounds:0000000000000000 $t
     /tmp/ccQQPlfu.s:2798   .text.update_program_bounds:0000000000000000 update_program_bounds
     /tmp/ccQQPlfu.s:2951   .text.update_program_bounds:000000000000008c $d
     /tmp/ccQQPlfu.s:2958   .text.set_pc:0000000000000000 $t
     /tmp/ccQQPlfu.s:2966   .text.set_pc:0000000000000000 set_pc
     /tmp/ccQQPlfu.s:3200   .text.set_pc:00000000000000a4 $d
     /tmp/ccQQPlfu.s:3209   .text.incpc:0000000000000000 $t
     /tmp/ccQQPlfu.s:3217   .text.incpc:0000000000000000 incpc
     /tmp/ccQQPlfu.s:3271   .text.incpc:0000000000000024 $d
     /tmp/ccQQPlfu.s:3277   .text.decpc:0000000000000000 $t
     /tmp/ccQQPlfu.s:3285   .text.decpc:0000000000000000 decpc
     /tmp/ccQQPlfu.s:3340   .text.decpc:0000000000000024 $d
     /tmp/ccQQPlfu.s:3347   .text.fin_tst.part.0:0000000000000000 $t
     /tmp/ccQQPlfu.s:3354   .text.fin_tst.part.0:0000000000000000 fin_tst.part.0
     /tmp/ccQQPlfu.s:3387   .text.do_rtn:0000000000000000 $t
     /tmp/ccQQPlfu.s:3394   .text.do_rtn:0000000000000000 do_rtn
     /tmp/ccQQPlfu.s:3572   .text.do_rtn:000000000000008c $d
                            *COM*:0000000000000004 Running
     /tmp/ccQQPlfu.s:3581   .text.user_pc:0000000000000000 $t
     /tmp/ccQQPlfu.s:3589   .text.user_pc:0000000000000000 user_pc
     /tmp/ccQQPlfu.s:3621   .text.find_user_pc:0000000000000000 $t
     /tmp/ccQQPlfu.s:3629   .text.find_user_pc:0000000000000000 find_user_pc
     /tmp/ccQQPlfu.s:3737   .text.find_user_pc:000000000000004c $d
     /tmp/ccQQPlfu.s:3743   .text.report_err:0000000000000000 $t
     /tmp/ccQQPlfu.s:3751   .text.report_err:0000000000000000 report_err
     /tmp/ccQQPlfu.s:3810   .text.report_err:000000000000001c $d
     /tmp/ccQQPlfu.s:3815   .text.report_warn:0000000000000000 $t
     /tmp/ccQQPlfu.s:3823   .text.report_warn:0000000000000000 report_warn
     /tmp/ccQQPlfu.s:3943   .text.report_warn:0000000000000048 $d
     /tmp/ccQQPlfu.s:3952   .text.bad_mode_error:0000000000000000 $t
     /tmp/ccQQPlfu.s:3960   .text.bad_mode_error:0000000000000000 bad_mode_error
     /tmp/ccQQPlfu.s:4001   .text.bad_mode_error:000000000000000c $d
ARM GAS  /tmp/ccQQPlfu.s 			page 899


     /tmp/ccQQPlfu.s:4006   .text.cmderr:0000000000000000 $t
     /tmp/ccQQPlfu.s:4014   .text.cmderr:0000000000000000 cmderr
     /tmp/ccQQPlfu.s:4071   .text.cmderr:0000000000000010 $d
     /tmp/ccQQPlfu.s:4080   .text.cmdmsg:0000000000000000 $t
     /tmp/ccQQPlfu.s:4088   .text.cmdmsg:0000000000000000 cmdmsg
     /tmp/ccQQPlfu.s:4104   .text.rarg_roundingmode:0000000000000000 $t
     /tmp/ccQQPlfu.s:4112   .text.rarg_roundingmode:0000000000000000 rarg_roundingmode
     /tmp/ccQQPlfu.s:4134   .text.rarg_roundingmode:0000000000000014 $d
     /tmp/ccQQPlfu.s:4139   .text.packed_from_number:0000000000000000 $t
     /tmp/ccQQPlfu.s:4147   .text.packed_from_number:0000000000000000 packed_from_number
     /tmp/ccQQPlfu.s:4214   .text.packed_from_number:0000000000000034 $d
     /tmp/ccQQPlfu.s:4220   .text.packed128_from_number:0000000000000000 $t
     /tmp/ccQQPlfu.s:4228   .text.packed128_from_number:0000000000000000 packed128_from_number
     /tmp/ccQQPlfu.s:4295   .text.packed128_from_number:0000000000000034 $d
     /tmp/ccQQPlfu.s:4301   .text.check_special:0000000000000000 $t
     /tmp/ccQQPlfu.s:4308   .text.check_special:0000000000000000 check_special
     /tmp/ccQQPlfu.s:4535   .text.check_special:00000000000000a0 $d
     /tmp/ccQQPlfu.s:4541   .text.packed_from_packed128:0000000000000000 $t
     /tmp/ccQQPlfu.s:4549   .text.packed_from_packed128:0000000000000000 packed_from_packed128
     /tmp/ccQQPlfu.s:4592   .text.packed128_from_packed:0000000000000000 $t
     /tmp/ccQQPlfu.s:4600   .text.packed128_from_packed:0000000000000000 packed128_from_packed
     /tmp/ccQQPlfu.s:4643   .text.stack_size:0000000000000000 $t
     /tmp/ccQQPlfu.s:4651   .text.stack_size:0000000000000000 stack_size
     /tmp/ccQQPlfu.s:4702   .text.stack_size:0000000000000030 $d
     /tmp/ccQQPlfu.s:4708   .text.copyreg:0000000000000000 $t
     /tmp/ccQQPlfu.s:4716   .text.copyreg:0000000000000000 copyreg
     /tmp/ccQQPlfu.s:4749   .text.copyreg:000000000000001c $d
     /tmp/ccQQPlfu.s:4754   .text.set_lift:0000000000000000 $t
     /tmp/ccQQPlfu.s:4762   .text.set_lift:0000000000000000 set_lift
     /tmp/ccQQPlfu.s:4780   .text.set_lift:000000000000000c $d
     /tmp/ccQQPlfu.s:4785   .text.entry_rpn_on_off:0000000000000000 $t
     /tmp/ccQQPlfu.s:4793   .text.entry_rpn_on_off:0000000000000000 entry_rpn_on_off
     /tmp/ccQQPlfu.s:4830   .text.entry_rpn_on_off:0000000000000030 $d
     /tmp/ccQQPlfu.s:4835   .text.is_dblmode:0000000000000000 $t
     /tmp/ccQQPlfu.s:4843   .text.is_dblmode:0000000000000000 is_dblmode
     /tmp/ccQQPlfu.s:4865   .text.is_dblmode:000000000000001c $d
     /tmp/ccQQPlfu.s:4870   .text.is_usrdblmode:0000000000000000 $t
     /tmp/ccQQPlfu.s:4878   .text.is_usrdblmode:0000000000000000 is_usrdblmode
     /tmp/ccQQPlfu.s:4920   .text.is_usrdblmode:000000000000002c $d
     /tmp/ccQQPlfu.s:4926   .text.s_to_i:0000000000000000 $t
     /tmp/ccQQPlfu.s:4934   .text.s_to_i:0000000000000000 s_to_i
     /tmp/ccQQPlfu.s:5082   .text.digit:0000000000000000 $t
     /tmp/ccQQPlfu.s:5089   .text.digit:0000000000000000 digit
     /tmp/ccQQPlfu.s:5634   .text.digit:0000000000000184 $d
     /tmp/ccQQPlfu.s:5641   .text.s_to_ull:0000000000000000 $t
     /tmp/ccQQPlfu.s:5649   .text.s_to_ull:0000000000000000 s_to_ull
     /tmp/ccQQPlfu.s:5743   .text.get_cmdline:0000000000000000 $t
     /tmp/ccQQPlfu.s:5751   .text.get_cmdline:0000000000000000 get_cmdline
     /tmp/ccQQPlfu.s:5779   .text.get_cmdline:0000000000000014 $d
     /tmp/ccQQPlfu.s:5784   .text.is_bad_cmdline:0000000000000000 $t
     /tmp/ccQQPlfu.s:5792   .text.is_bad_cmdline:0000000000000000 is_bad_cmdline
     /tmp/ccQQPlfu.s:5807   .text.get_flash_reg_n:0000000000000000 $t
     /tmp/ccQQPlfu.s:5815   .text.get_flash_reg_n:0000000000000000 get_flash_reg_n
     /tmp/ccQQPlfu.s:5842   .text.get_flash_reg_n:000000000000001c $d
     /tmp/ccQQPlfu.s:5847   .text.get_const:0000000000000000 $t
     /tmp/ccQQPlfu.s:5855   .text.get_const:0000000000000000 get_const
     /tmp/ccQQPlfu.s:6003   .text.get_const:0000000000000074 $d
ARM GAS  /tmp/ccQQPlfu.s 			page 900


     /tmp/ccQQPlfu.s:6011   .text.get_reg_n:0000000000000000 $t
     /tmp/ccQQPlfu.s:6019   .text.get_reg_n:0000000000000000 get_reg_n
     /tmp/ccQQPlfu.s:6239   .text.get_reg_n:00000000000000a8 $d
     /tmp/ccQQPlfu.s:6246   .text.get_stack:0000000000000000 $t
     /tmp/ccQQPlfu.s:6254   .text.get_stack:0000000000000000 get_stack
     /tmp/ccQQPlfu.s:6274   .text.lift:0000000000000000 $t
     /tmp/ccQQPlfu.s:6282   .text.lift:0000000000000000 lift
     /tmp/ccQQPlfu.s:6461   .text.lift:0000000000000064 $d
     /tmp/ccQQPlfu.s:6469   .text.lift_if_enabled:0000000000000000 $t
     /tmp/ccQQPlfu.s:6477   .text.lift_if_enabled:0000000000000000 lift_if_enabled
     /tmp/ccQQPlfu.s:6507   .text.lift_if_enabled:0000000000000010 $d
     /tmp/ccQQPlfu.s:6512   .text.lift2_if_enabled:0000000000000000 $t
     /tmp/ccQQPlfu.s:6519   .text.lift2_if_enabled:0000000000000000 lift2_if_enabled
     /tmp/ccQQPlfu.s:6630   .text.lift2_if_enabled:0000000000000040 $d
     /tmp/ccQQPlfu.s:6639   .text.lower:0000000000000000 $t
     /tmp/ccQQPlfu.s:6646   .text.lower:0000000000000000 lower
     /tmp/ccQQPlfu.s:6828   .text.lower:000000000000006c $d
     /tmp/ccQQPlfu.s:6836   .text.get_stack_top:0000000000000000 $t
     /tmp/ccQQPlfu.s:6843   .text.get_stack_top:0000000000000000 get_stack_top
     /tmp/ccQQPlfu.s:6928   .text.get_stack_top:0000000000000034 $d
     /tmp/ccQQPlfu.s:6936   .text.roll_down:0000000000000000 $t
     /tmp/ccQQPlfu.s:6944   .text.roll_down:0000000000000000 roll_down
     /tmp/ccQQPlfu.s:7062   .text.roll_down:000000000000004c $d
                            *COM*:0000000000000004 StackBase
     /tmp/ccQQPlfu.s:7068   .text.cpx_roll_down:0000000000000000 $t
     /tmp/ccQQPlfu.s:7076   .text.cpx_roll_down:0000000000000000 cpx_roll_down
     /tmp/ccQQPlfu.s:7136   .text.cpx_roll_down:000000000000002c $d
     /tmp/ccQQPlfu.s:7142   .text.roll_up:0000000000000000 $t
     /tmp/ccQQPlfu.s:7150   .text.roll_up:0000000000000000 roll_up
     /tmp/ccQQPlfu.s:7277   .text.roll_up:000000000000004c $d
     /tmp/ccQQPlfu.s:7283   .text.cpx_roll_up:0000000000000000 $t
     /tmp/ccQQPlfu.s:7291   .text.cpx_roll_up:0000000000000000 cpx_roll_up
     /tmp/ccQQPlfu.s:7351   .text.cpx_roll_up:000000000000002c $d
     /tmp/ccQQPlfu.s:7357   .text.fill:0000000000000000 $t
     /tmp/ccQQPlfu.s:7365   .text.fill:0000000000000000 fill
     /tmp/ccQQPlfu.s:7520   .text.fill:0000000000000064 $d
     /tmp/ccQQPlfu.s:7529   .text.lower2:0000000000000000 $t
     /tmp/ccQQPlfu.s:7536   .text.lower2:0000000000000000 lower2
     /tmp/ccQQPlfu.s:7718   .text.lower2:000000000000006c $d
     /tmp/ccQQPlfu.s:7726   .text.drop:0000000000000000 $t
     /tmp/ccQQPlfu.s:7734   .text.drop:0000000000000000 drop
     /tmp/ccQQPlfu.s:7777   .text.drop:000000000000001c $d
     /tmp/ccQQPlfu.s:7782   .text.copyreg_n:0000000000000000 $t
     /tmp/ccQQPlfu.s:7790   .text.copyreg_n:0000000000000000 copyreg_n
     /tmp/ccQQPlfu.s:7874   .text.copyreg_n:0000000000000038 $d
     /tmp/ccQQPlfu.s:7881   .text.setlastX:0000000000000000 $t
     /tmp/ccQQPlfu.s:7889   .text.setlastX:0000000000000000 setlastX
     /tmp/ccQQPlfu.s:7905   .text.setlastXY:0000000000000000 $t
     /tmp/ccQQPlfu.s:7912   .text.setlastXY:0000000000000000 setlastXY
     /tmp/ccQQPlfu.s:7955   .text.getRegister:0000000000000000 $t
     /tmp/ccQQPlfu.s:7963   .text.getRegister:0000000000000000 getRegister
     /tmp/ccQQPlfu.s:8025   .text.getRegister:0000000000000030 $d
     /tmp/ccQQPlfu.s:8030   .text.getX:0000000000000000 $t
     /tmp/ccQQPlfu.s:8038   .text.getX:0000000000000000 getX
     /tmp/ccQQPlfu.s:8056   .text.getY:0000000000000000 $t
     /tmp/ccQQPlfu.s:8064   .text.getY:0000000000000000 getY
     /tmp/ccQQPlfu.s:8081   .text.getXY:0000000000000000 $t
ARM GAS  /tmp/ccQQPlfu.s 			page 901


     /tmp/ccQQPlfu.s:8089   .text.getXY:0000000000000000 getXY
     /tmp/ccQQPlfu.s:8150   .text.getXYZ:0000000000000000 $t
     /tmp/ccQQPlfu.s:8158   .text.getXYZ:0000000000000000 getXYZ
     /tmp/ccQQPlfu.s:8251   .text.getYZ:0000000000000000 $t
     /tmp/ccQQPlfu.s:8259   .text.getYZ:0000000000000000 getYZ
     /tmp/ccQQPlfu.s:8320   .text.getXYZT:0000000000000000 $t
     /tmp/ccQQPlfu.s:8328   .text.getXYZT:0000000000000000 getXYZT
     /tmp/ccQQPlfu.s:8374   .text.storcl_op:0000000000000000 $t
     /tmp/ccQQPlfu.s:8381   .text.storcl_op:0000000000000000 storcl_op
     /tmp/ccQQPlfu.s:8455   .text.storcl_op:000000000000002c $d
     /tmp/ccQQPlfu.s:8462   .text.storcl_op:0000000000000032 $t
     /tmp/ccQQPlfu.s:8574   .text.storcl_cop:0000000000000000 $t
     /tmp/ccQQPlfu.s:8581   .text.storcl_cop:0000000000000000 storcl_cop
     /tmp/ccQQPlfu.s:8691   .text.storcl_cop:0000000000000040 $d
     /tmp/ccQQPlfu.s:8696   .text.storcl_cop:0000000000000044 $t
     /tmp/ccQQPlfu.s:8809   .text.cpx_enter:0000000000000000 $t
     /tmp/ccQQPlfu.s:8817   .text.cpx_enter:0000000000000000 cpx_enter
     /tmp/ccQQPlfu.s:8913   .text.cpx_enter:0000000000000048 $d
     /tmp/ccQQPlfu.s:8919   .text.cpx_fill:0000000000000000 $t
     /tmp/ccQQPlfu.s:8927   .text.cpx_fill:0000000000000000 cpx_fill
     /tmp/ccQQPlfu.s:9128   .text.cpx_fill:0000000000000084 $d
     /tmp/ccQQPlfu.s:9138   .text.setRegister:0000000000000000 $t
     /tmp/ccQQPlfu.s:9146   .text.setRegister:0000000000000000 setRegister
     /tmp/ccQQPlfu.s:9241   .text.setRegister:000000000000004c $d
                            *COM*:0000000000000018 Ctx
     /tmp/ccQQPlfu.s:9247   .text.setX:0000000000000000 $t
     /tmp/ccQQPlfu.s:9255   .text.setX:0000000000000000 setX
     /tmp/ccQQPlfu.s:9277   .text.rarg_round:0000000000000000 $t
     /tmp/ccQQPlfu.s:9285   .text.rarg_round:0000000000000000 rarg_round
     /tmp/ccQQPlfu.s:9466   .text.rarg_round:0000000000000064 $d
     /tmp/ccQQPlfu.s:9473   .text.setY:0000000000000000 $t
     /tmp/ccQQPlfu.s:9481   .text.setY:0000000000000000 setY
     /tmp/ccQQPlfu.s:9503   .text.setXY:0000000000000000 $t
     /tmp/ccQQPlfu.s:9511   .text.setXY:0000000000000000 setXY
     /tmp/ccQQPlfu.s:9573   .text.setXY:0000000000000028 $d
     /tmp/ccQQPlfu.s:9578   .text.convert_regK:0000000000000000 $t
     /tmp/ccQQPlfu.s:9586   .text.convert_regK:0000000000000000 convert_regK
     /tmp/ccQQPlfu.s:9762   .text.convert_regK:00000000000000ac $d
     /tmp/ccQQPlfu.s:9772   .text.cpx_nop:0000000000000000 $t
     /tmp/ccQQPlfu.s:9780   .text.cpx_nop:0000000000000000 cpx_nop
     /tmp/ccQQPlfu.s:9805   .text.cpx_nop:0000000000000016 $d
     /tmp/ccQQPlfu.s:9817   .text.cpx_nop:0000000000000022 $t
     /tmp/ccQQPlfu.s:10101  .text.cpx_nop:0000000000000164 $d
     /tmp/ccQQPlfu.s:10108  .text.get_reg_n_int:0000000000000000 $t
     /tmp/ccQQPlfu.s:10116  .text.get_reg_n_int:0000000000000000 get_reg_n_int
     /tmp/ccQQPlfu.s:10153  .text.storcl_intop:0000000000000000 $t
     /tmp/ccQQPlfu.s:10160  .text.storcl_intop:0000000000000000 storcl_intop
     /tmp/ccQQPlfu.s:10252  .text.storcl_intop:0000000000000038 $d
     /tmp/ccQQPlfu.s:10258  .text.storcl_intop:000000000000003e $t
     /tmp/ccQQPlfu.s:10360  .text.incdec:0000000000000000 $t
     /tmp/ccQQPlfu.s:10367  .text.incdec:0000000000000000 incdec
     /tmp/ccQQPlfu.s:10548  .text.incdec:0000000000000094 $d
     /tmp/ccQQPlfu.s:10555  .text.set_reg_n_int:0000000000000000 $t
     /tmp/ccQQPlfu.s:10563  .text.set_reg_n_int:0000000000000000 set_reg_n_int
     /tmp/ccQQPlfu.s:10596  .text.get_reg_n_int_sgn:0000000000000000 $t
     /tmp/ccQQPlfu.s:10604  .text.get_reg_n_int_sgn:0000000000000000 get_reg_n_int_sgn
     /tmp/ccQQPlfu.s:10684  .text.get_reg_n_int_sgn:0000000000000034 $d
ARM GAS  /tmp/ccQQPlfu.s 			page 902


     /tmp/ccQQPlfu.s:10689  .text.get_keycode_from_reg:0000000000000000 $t
     /tmp/ccQQPlfu.s:10696  .text.get_keycode_from_reg:0000000000000000 get_keycode_from_reg
     /tmp/ccQQPlfu.s:10776  .text.get_keycode_from_reg:000000000000002c $d
     /tmp/ccQQPlfu.s:10781  .text.getX_int:0000000000000000 $t
     /tmp/ccQQPlfu.s:10789  .text.getX_int:0000000000000000 getX_int
     /tmp/ccQQPlfu.s:10805  .text.getX_int_sgn:0000000000000000 $t
     /tmp/ccQQPlfu.s:10813  .text.getX_int_sgn:0000000000000000 getX_int_sgn
     /tmp/ccQQPlfu.s:10835  .text.set_reg_n_int_sgn:0000000000000000 $t
     /tmp/ccQQPlfu.s:10843  .text.set_reg_n_int_sgn:0000000000000000 set_reg_n_int_sgn
     /tmp/ccQQPlfu.s:10969  .text.set_reg_n_int_sgn:0000000000000060 $d
     /tmp/ccQQPlfu.s:10975  .text.op_roundingmode:0000000000000000 $t
     /tmp/ccQQPlfu.s:10983  .text.op_roundingmode:0000000000000000 op_roundingmode
     /tmp/ccQQPlfu.s:11047  .text.op_roundingmode:0000000000000024 $d
     /tmp/ccQQPlfu.s:11052  .text.register_from_int:0000000000000000 $t
     /tmp/ccQQPlfu.s:11059  .text.register_from_int:0000000000000000 register_from_int
     /tmp/ccQQPlfu.s:11156  .text.register_from_int:000000000000005c $d
     /tmp/ccQQPlfu.s:11162  .text.int_from_register:0000000000000000 $t
     /tmp/ccQQPlfu.s:11169  .text.int_from_register:0000000000000000 int_from_register
     /tmp/ccQQPlfu.s:11240  .text.int_from_register:0000000000000044 $d
     /tmp/ccQQPlfu.s:11245  .text.switch_to_int:0000000000000000 $t
     /tmp/ccQQPlfu.s:11252  .text.switch_to_int:0000000000000000 switch_to_int
     /tmp/ccQQPlfu.s:11403  .text.switch_to_int:0000000000000078 $d
     /tmp/ccQQPlfu.s:11411  .text.process_cmdline.part.0:0000000000000000 $t
     /tmp/ccQQPlfu.s:11418  .text.process_cmdline.part.0:0000000000000000 process_cmdline.part.0
     /tmp/ccQQPlfu.s:12005  .text.process_cmdline.part.0:000000000000023c $d
                            *COM*:0000000000000004 XromRunning
     /tmp/ccQQPlfu.s:12016  .text.process_cmdline:0000000000000000 $t
     /tmp/ccQQPlfu.s:12024  .text.process_cmdline:0000000000000000 process_cmdline
     /tmp/ccQQPlfu.s:12046  .text.process_cmdline:000000000000000c $d
     /tmp/ccQQPlfu.s:12051  .text.cpx_pi:0000000000000000 $t
     /tmp/ccQQPlfu.s:12059  .text.cpx_pi:0000000000000000 cpx_pi
     /tmp/ccQQPlfu.s:12297  .text.cpx_pi:00000000000000bc $d
     /tmp/ccQQPlfu.s:12305  .text.process_cmdline_set_lift:0000000000000000 $t
     /tmp/ccQQPlfu.s:12313  .text.process_cmdline_set_lift:0000000000000000 process_cmdline_set_lift
     /tmp/ccQQPlfu.s:12379  .text.process_cmdline_set_lift:0000000000000020 $d
     /tmp/ccQQPlfu.s:12384  .text.setX_int:0000000000000000 $t
     /tmp/ccQQPlfu.s:12392  .text.setX_int:0000000000000000 setX_int
     /tmp/ccQQPlfu.s:12443  .text.do_rcl:0000000000000000 $t
     /tmp/ccQQPlfu.s:12450  .text.do_rcl:0000000000000000 do_rcl
     /tmp/ccQQPlfu.s:12788  .text.do_rcl:00000000000000cc $d
     /tmp/ccQQPlfu.s:12799  .text.setX_int_sgn:0000000000000000 $t
     /tmp/ccQQPlfu.s:12807  .text.setX_int_sgn:0000000000000000 setX_int_sgn
     /tmp/ccQQPlfu.s:12841  .text.zero_regs:0000000000000000 $t
     /tmp/ccQQPlfu.s:12849  .text.zero_regs:0000000000000000 zero_regs
     /tmp/ccQQPlfu.s:12887  .text.zero_regs:0000000000000024 $d
     /tmp/ccQQPlfu.s:12892  .text.move_regs:0000000000000000 $t
     /tmp/ccQQPlfu.s:12900  .text.move_regs:0000000000000000 move_regs
     /tmp/ccQQPlfu.s:12953  .text.move_regs:0000000000000024 $d
     /tmp/ccQQPlfu.s:12958  .text.zero_X:0000000000000000 $t
     /tmp/ccQQPlfu.s:12966  .text.zero_X:0000000000000000 zero_X
     /tmp/ccQQPlfu.s:12981  .text.zero_X:0000000000000008 $d
     /tmp/ccQQPlfu.s:12986  .text.zero_Y:0000000000000000 $t
     /tmp/ccQQPlfu.s:12994  .text.zero_Y:0000000000000000 zero_Y
     /tmp/ccQQPlfu.s:13022  .text.clrx:0000000000000000 $t
     /tmp/ccQQPlfu.s:13030  .text.clrx:0000000000000000 clrx
     /tmp/ccQQPlfu.s:13146  .text.clrx:000000000000006c $d
     /tmp/ccQQPlfu.s:13153  .text.clrstk:0000000000000000 $t
ARM GAS  /tmp/ccQQPlfu.s 			page 903


     /tmp/ccQQPlfu.s:13161  .text.clrstk:0000000000000000 clrstk
     /tmp/ccQQPlfu.s:13286  .text.clrstk:000000000000005c $d
     /tmp/ccQQPlfu.s:13296  .text.clrreg:0000000000000000 $t
     /tmp/ccQQPlfu.s:13304  .text.clrreg:0000000000000000 clrreg
     /tmp/ccQQPlfu.s:13809  .text.clrreg:000000000000011c $d
     /tmp/ccQQPlfu.s:13819  .text.clrretstk:0000000000000000 $t
     /tmp/ccQQPlfu.s:13827  .text.clrretstk:0000000000000000 clrretstk
     /tmp/ccQQPlfu.s:13848  .text.clrretstk:0000000000000010 $d
     /tmp/ccQQPlfu.s:13853  .text.clrretstk_pc:0000000000000000 $t
     /tmp/ccQQPlfu.s:13861  .text.clrretstk_pc:0000000000000000 clrretstk_pc
     /tmp/ccQQPlfu.s:13926  .text.clrretstk_pc:0000000000000020 $d
     /tmp/ccQQPlfu.s:13931  .text.cmdconst:0000000000000000 $t
     /tmp/ccQQPlfu.s:13939  .text.cmdconst:0000000000000000 cmdconst
     /tmp/ccQQPlfu.s:14234  .text.cmdconst:00000000000000c4 $d
     /tmp/ccQQPlfu.s:14244  .text.cmdsto:0000000000000000 $t
     /tmp/ccQQPlfu.s:14252  .text.cmdsto:0000000000000000 cmdsto
     /tmp/ccQQPlfu.s:14442  .text.cmdsto:0000000000000078 $d
     /tmp/ccQQPlfu.s:14448  .text.cmdrcl:0000000000000000 $t
     /tmp/ccQQPlfu.s:14456  .text.cmdrcl:0000000000000000 cmdrcl
     /tmp/ccQQPlfu.s:14472  .text.cmdcsto:0000000000000000 $t
     /tmp/ccQQPlfu.s:14480  .text.cmdcsto:0000000000000000 cmdcsto
     /tmp/ccQQPlfu.s:14757  .text.cmdcsto:00000000000000c0 $d
     /tmp/ccQQPlfu.s:14765  .text.cmdcrcl:0000000000000000 $t
     /tmp/ccQQPlfu.s:14773  .text.cmdcrcl:0000000000000000 cmdcrcl
     /tmp/ccQQPlfu.s:15145  .text.cmdcrcl:00000000000000f8 $d
     /tmp/ccQQPlfu.s:15155  .text.cmdircl:0000000000000000 $t
     /tmp/ccQQPlfu.s:15163  .text.cmdircl:0000000000000000 cmdircl
     /tmp/ccQQPlfu.s:15207  .text.cmdircl:000000000000001c $d
     /tmp/ccQQPlfu.s:15212  .text.cmdrrcl:0000000000000000 $t
     /tmp/ccQQPlfu.s:15220  .text.cmdrrcl:0000000000000000 cmdrrcl
     /tmp/ccQQPlfu.s:15378  .text.cmdrrcl:0000000000000080 $d
     /tmp/ccQQPlfu.s:15388  .text.swap_reg:0000000000000000 $t
     /tmp/ccQQPlfu.s:15396  .text.swap_reg:0000000000000000 swap_reg
     /tmp/ccQQPlfu.s:15537  .text.swap_reg:0000000000000060 $d
     /tmp/ccQQPlfu.s:15542  .text.cmdswap:0000000000000000 $t
     /tmp/ccQQPlfu.s:15550  .text.cmdswap:0000000000000000 cmdswap
     /tmp/ccQQPlfu.s:15697  .text.cmdswap:0000000000000094 $d
     /tmp/ccQQPlfu.s:15703  .text.cmdview:0000000000000000 $t
     /tmp/ccQQPlfu.s:15711  .text.cmdview:0000000000000000 cmdview
     /tmp/ccQQPlfu.s:15795  .text.cmdview:0000000000000050 $d
                            *COM*:0000000000000004 ShowRegister
     /tmp/ccQQPlfu.s:15802  .text.get_stack_size:0000000000000000 $t
     /tmp/ccQQPlfu.s:15810  .text.get_stack_size:0000000000000000 get_stack_size
     /tmp/ccQQPlfu.s:15908  .text.get_stack_size:0000000000000040 $d
     /tmp/ccQQPlfu.s:15916  .text.get_word_size:0000000000000000 $t
     /tmp/ccQQPlfu.s:15924  .text.get_word_size:0000000000000000 get_word_size
     /tmp/ccQQPlfu.s:15967  .text.get_sign_mode:0000000000000000 $t
     /tmp/ccQQPlfu.s:15975  .text.get_sign_mode:0000000000000000 get_sign_mode
     /tmp/ccQQPlfu.s:16031  .text.get_sign_mode:0000000000000024 $d
     /tmp/ccQQPlfu.s:16036  .text.get_base:0000000000000000 $t
     /tmp/ccQQPlfu.s:16044  .text.get_base:0000000000000000 get_base
     /tmp/ccQQPlfu.s:16087  .text.DM42_Ticker:0000000000000000 $t
     /tmp/ccQQPlfu.s:16095  .text.DM42_Ticker:0000000000000000 DM42_Ticker
     /tmp/ccQQPlfu.s:16125  .text.DM42_Ticker:0000000000000014 $d
     /tmp/ccQQPlfu.s:16130  .text.op_ticks:0000000000000000 $t
     /tmp/ccQQPlfu.s:16138  .text.op_ticks:0000000000000000 op_ticks
     /tmp/ccQQPlfu.s:16215  .text.op_ticks:0000000000000024 $d
ARM GAS  /tmp/ccQQPlfu.s 			page 904


     /tmp/ccQQPlfu.s:16220  .text.op_voltage:0000000000000000 $t
     /tmp/ccQQPlfu.s:16228  .text.op_voltage:0000000000000000 op_voltage
     /tmp/ccQQPlfu.s:16331  .text.op_voltage:0000000000000058 $d
     /tmp/ccQQPlfu.s:16338  .text.free_mem:0000000000000000 $t
     /tmp/ccQQPlfu.s:16346  .text.free_mem:0000000000000000 free_mem
     /tmp/ccQQPlfu.s:16370  .text.free_mem:0000000000000010 $d
     /tmp/ccQQPlfu.s:16376  .text.free_flash:0000000000000000 $t
     /tmp/ccQQPlfu.s:16384  .text.free_flash:0000000000000000 free_flash
     /tmp/ccQQPlfu.s:16403  .text.free_flash:0000000000000010 $d
     /tmp/ccQQPlfu.s:16408  .text.get_mem:0000000000000000 $t
     /tmp/ccQQPlfu.s:16416  .text.get_mem:0000000000000000 get_mem
     /tmp/ccQQPlfu.s:16667  .text.get_mem:000000000000009c $d
     /tmp/ccQQPlfu.s:16675  .text.cmdputkey:0000000000000000 $t
     /tmp/ccQQPlfu.s:16683  .text.cmdputkey:0000000000000000 cmdputkey
     /tmp/ccQQPlfu.s:16765  .text.cmdputkey:0000000000000034 $d
     /tmp/ccQQPlfu.s:16771  .text.cmdkeytype:0000000000000000 $t
     /tmp/ccQQPlfu.s:16779  .text.cmdkeytype:0000000000000000 cmdkeytype
     /tmp/ccQQPlfu.s:16913  .text.cmdkeytype:0000000000000048 $d
     /tmp/ccQQPlfu.s:16922  .rodata.op_query_xtal.str1.4:0000000000000000 $d
     /tmp/ccQQPlfu.s:16926  .text.op_query_xtal:0000000000000000 $t
     /tmp/ccQQPlfu.s:16934  .text.op_query_xtal:0000000000000000 op_query_xtal
     /tmp/ccQQPlfu.s:16972  .text.op_query_xtal:0000000000000014 $d
     /tmp/ccQQPlfu.s:16980  .rodata.op_query_print.str1.4:0000000000000000 $d
     /tmp/ccQQPlfu.s:16984  .text.op_query_print:0000000000000000 $t
     /tmp/ccQQPlfu.s:16992  .text.op_query_print:0000000000000000 op_query_print
     /tmp/ccQQPlfu.s:17037  .text.op_query_print:0000000000000018 $d
     /tmp/ccQQPlfu.s:17047  .text.cmdstostk:0000000000000000 $t
     /tmp/ccQQPlfu.s:17055  .text.cmdstostk:0000000000000000 cmdstostk
     /tmp/ccQQPlfu.s:17105  .text.cmdrclstk:0000000000000000 $t
     /tmp/ccQQPlfu.s:17113  .text.cmdrclstk:0000000000000000 cmdrclstk
     /tmp/ccQQPlfu.s:17166  .text.find_opcode_from:0000000000000000 $t
     /tmp/ccQQPlfu.s:17174  .text.find_opcode_from:0000000000000000 find_opcode_from
     /tmp/ccQQPlfu.s:17346  .text.find_opcode_from:000000000000006c $d
     /tmp/ccQQPlfu.s:17351  .text.find_label_from:0000000000000000 $t
     /tmp/ccQQPlfu.s:17359  .text.find_label_from:0000000000000000 find_label_from
     /tmp/ccQQPlfu.s:17379  .text.op_rtn:0000000000000000 $t
     /tmp/ccQQPlfu.s:17387  .text.op_rtn:0000000000000000 op_rtn
     /tmp/ccQQPlfu.s:17421  .text.op_rtn:0000000000000020 $d
     /tmp/ccQQPlfu.s:17427  .text.op_popusr:0000000000000000 $t
     /tmp/ccQQPlfu.s:17435  .text.op_popusr:0000000000000000 op_popusr
     /tmp/ccQQPlfu.s:17510  .text.op_popusr:0000000000000050 $d
                            *COM*:0000000000000004 XromUserPc
                            *COM*:0000000000000004 UserLocalRegs
     /tmp/ccQQPlfu.s:17518  .text.findmultilbl:0000000000000000 $t
     /tmp/ccQQPlfu.s:17526  .text.findmultilbl:0000000000000000 findmultilbl
     /tmp/ccQQPlfu.s:17639  .text.findmultilbl:0000000000000048 $d
     /tmp/ccQQPlfu.s:17644  .text.get_dispmode_digs:0000000000000000 $t
     /tmp/ccQQPlfu.s:17652  .text.get_dispmode_digs:0000000000000000 get_dispmode_digs
     /tmp/ccQQPlfu.s:17714  .text.get_dispmode_digs:000000000000002c $d
     /tmp/ccQQPlfu.s:17719  .text.set_dispmode_digs:0000000000000000 $t
     /tmp/ccQQPlfu.s:17727  .text.set_dispmode_digs:0000000000000000 set_dispmode_digs
     /tmp/ccQQPlfu.s:17785  .text.set_dispmode_digs:0000000000000038 $d
     /tmp/ccQQPlfu.s:17790  .text.convC2F:0000000000000000 $t
     /tmp/ccQQPlfu.s:17798  .text.convC2F:0000000000000000 convC2F
     /tmp/ccQQPlfu.s:17840  .text.convC2F:000000000000001c $d
     /tmp/ccQQPlfu.s:17846  .text.convF2C:0000000000000000 $t
     /tmp/ccQQPlfu.s:17854  .text.convF2C:0000000000000000 convF2C
ARM GAS  /tmp/ccQQPlfu.s 			page 905


     /tmp/ccQQPlfu.s:17896  .text.convF2C:000000000000001c $d
     /tmp/ccQQPlfu.s:17902  .text.convDB2AR:0000000000000000 $t
     /tmp/ccQQPlfu.s:17910  .text.convDB2AR:0000000000000000 convDB2AR
     /tmp/ccQQPlfu.s:17952  .text.convDB2AR:000000000000001c $d
     /tmp/ccQQPlfu.s:17957  .text.convAR2DB:0000000000000000 $t
     /tmp/ccQQPlfu.s:17965  .text.convAR2DB:0000000000000000 convAR2DB
     /tmp/ccQQPlfu.s:18006  .text.convAR2DB:000000000000001c $d
     /tmp/ccQQPlfu.s:18011  .text.convDB2PR:0000000000000000 $t
     /tmp/ccQQPlfu.s:18019  .text.convDB2PR:0000000000000000 convDB2PR
     /tmp/ccQQPlfu.s:18060  .text.convPR2DB:0000000000000000 $t
     /tmp/ccQQPlfu.s:18068  .text.convPR2DB:0000000000000000 convPR2DB
     /tmp/ccQQPlfu.s:18109  .text.do_conv:0000000000000000 $t
     /tmp/ccQQPlfu.s:18117  .text.do_conv:0000000000000000 do_conv
     /tmp/ccQQPlfu.s:18209  .text.do_conv:0000000000000040 $d
     /tmp/ccQQPlfu.s:18214  .text.cmdconv:0000000000000000 $t
     /tmp/ccQQPlfu.s:18222  .text.cmdconv:0000000000000000 cmdconv
     /tmp/ccQQPlfu.s:18310  .text.cmdconv:000000000000003c $d
     /tmp/ccQQPlfu.s:18315  .text.fin_tst:0000000000000000 $t
     /tmp/ccQQPlfu.s:18323  .text.fin_tst:0000000000000000 fin_tst
     /tmp/ccQQPlfu.s:18381  .text.fin_tst:000000000000002c $d
     /tmp/ccQQPlfu.s:18390  .text.check_mode:0000000000000000 $t
     /tmp/ccQQPlfu.s:18398  .text.check_mode:0000000000000000 check_mode
     /tmp/ccQQPlfu.s:18433  .text.check_mode:0000000000000024 $d
     /tmp/ccQQPlfu.s:18438  .text.check_dblmode:0000000000000000 $t
     /tmp/ccQQPlfu.s:18446  .text.check_dblmode:0000000000000000 check_dblmode
     /tmp/ccQQPlfu.s:18479  .text.check_dblmode:000000000000001c $d
     /tmp/ccQQPlfu.s:18484  .text.isTop:0000000000000000 $t
     /tmp/ccQQPlfu.s:18492  .text.isTop:0000000000000000 isTop
     /tmp/ccQQPlfu.s:18556  .text.isTop:0000000000000038 $d
     /tmp/ccQQPlfu.s:18565  .text.cmdlblp:0000000000000000 $t
     /tmp/ccQQPlfu.s:18573  .text.cmdlblp:0000000000000000 cmdlblp
     /tmp/ccQQPlfu.s:18625  .text.cmdlblp:0000000000000024 $d
     /tmp/ccQQPlfu.s:18630  .text.cmdmultilblp:0000000000000000 $t
     /tmp/ccQQPlfu.s:18638  .text.cmdmultilblp:0000000000000000 cmdmultilblp
     /tmp/ccQQPlfu.s:18673  .text.cmdkeyp:0000000000000000 $t
     /tmp/ccQQPlfu.s:18681  .text.cmdkeyp:0000000000000000 cmdkeyp
     /tmp/ccQQPlfu.s:18776  .text.cmdkeyp:0000000000000044 $d
     /tmp/ccQQPlfu.s:18781  .text.do_tst:0000000000000000 $t
     /tmp/ccQQPlfu.s:18788  .text.do_tst:0000000000000000 do_tst
     /tmp/ccQQPlfu.s:18954  .text.do_tst:0000000000000064 $d
     /tmp/ccQQPlfu.s:19242  .text.do_tst:0000000000000168 $d
     /tmp/ccQQPlfu.s:19249  .text.do_ztst:0000000000000000 $t
     /tmp/ccQQPlfu.s:19256  .text.do_ztst:0000000000000000 do_ztst
     /tmp/ccQQPlfu.s:19546  .text.do_ztst:00000000000000b4 $d
     /tmp/ccQQPlfu.s:19557  .text.check_zero:0000000000000000 $t
     /tmp/ccQQPlfu.s:19565  .text.check_zero:0000000000000000 check_zero
     /tmp/ccQQPlfu.s:19709  .text.check_zero:000000000000006c $d
     /tmp/ccQQPlfu.s:19714  .text.cmdtest:0000000000000000 $t
     /tmp/ccQQPlfu.s:19722  .text.cmdtest:0000000000000000 cmdtest
     /tmp/ccQQPlfu.s:19743  .text.cmdztest:0000000000000000 $t
     /tmp/ccQQPlfu.s:19751  .text.cmdztest:0000000000000000 cmdztest
     /tmp/ccQQPlfu.s:19804  .text.cmdlincdec:0000000000000000 $t
     /tmp/ccQQPlfu.s:19812  .text.cmdlincdec:0000000000000000 cmdlincdec
     /tmp/ccQQPlfu.s:19833  .text.cmdloopz:0000000000000000 $t
     /tmp/ccQQPlfu.s:19841  .text.cmdloopz:0000000000000000 cmdloopz
     /tmp/ccQQPlfu.s:19874  .text.cmdloop:0000000000000000 $t
     /tmp/ccQQPlfu.s:19882  .text.cmdloop:0000000000000000 cmdloop
ARM GAS  /tmp/ccQQPlfu.s 			page 906


     /tmp/ccQQPlfu.s:20371  .text.cmdloop:00000000000001f4 $d
     /tmp/ccQQPlfu.s:20377  .text.op_shift_digit:0000000000000000 $t
     /tmp/ccQQPlfu.s:20385  .text.op_shift_digit:0000000000000000 op_shift_digit
     /tmp/ccQQPlfu.s:20549  .text.op_shift_digit:0000000000000060 $d
     /tmp/ccQQPlfu.s:20555  .text.get_user_flag:0000000000000000 $t
     /tmp/ccQQPlfu.s:20563  .text.get_user_flag:0000000000000000 get_user_flag
     /tmp/ccQQPlfu.s:20601  .text.cmdflag:0000000000000000 $t
     /tmp/ccQQPlfu.s:20609  .text.cmdflag:0000000000000000 cmdflag
     /tmp/ccQQPlfu.s:20654  .text.cmdflag:0000000000000028 $d
     /tmp/ccQQPlfu.s:20811  .text.put_user_flag:0000000000000000 $t
     /tmp/ccQQPlfu.s:20819  .text.put_user_flag:0000000000000000 put_user_flag
     /tmp/ccQQPlfu.s:20848  .text.clrflags:0000000000000000 $t
     /tmp/ccQQPlfu.s:20856  .text.clrflags:0000000000000000 clrflags
     /tmp/ccQQPlfu.s:20903  .text.clrflags:000000000000002c $d
     /tmp/ccQQPlfu.s:20908  .text.intws:0000000000000000 $t
     /tmp/ccQQPlfu.s:20916  .text.intws:0000000000000000 intws
     /tmp/ccQQPlfu.s:21139  .text.intws:00000000000000e4 $d
     /tmp/ccQQPlfu.s:21148  .text.get_maxdenom:0000000000000000 $t
     /tmp/ccQQPlfu.s:21156  .text.get_maxdenom:0000000000000000 get_maxdenom
     /tmp/ccQQPlfu.s:21184  .text.get_maxdenom:000000000000001c $d
     /tmp/ccQQPlfu.s:21189  .rodata.op_2frac.str1.4:0000000000000000 $d
     /tmp/ccQQPlfu.s:21199  .text.op_2frac:0000000000000000 $t
     /tmp/ccQQPlfu.s:21207  .text.op_2frac:0000000000000000 op_2frac
     /tmp/ccQQPlfu.s:21345  .text.op_2frac:0000000000000088 $d
     /tmp/ccQQPlfu.s:21355  .text.op_fracdenom:0000000000000000 $t
     /tmp/ccQQPlfu.s:21363  .text.op_fracdenom:0000000000000000 op_fracdenom
     /tmp/ccQQPlfu.s:21518  .text.op_fracdenom:0000000000000080 $d
     /tmp/ccQQPlfu.s:21523  .text.op_float:0000000000000000 $t
     /tmp/ccQQPlfu.s:21531  .text.op_float:0000000000000000 op_float
     /tmp/ccQQPlfu.s:21726  .text.op_float:00000000000000c4 $d
     /tmp/ccQQPlfu.s:21737  .text.cmddisp:0000000000000000 $t
     /tmp/ccQQPlfu.s:21745  .text.cmddisp:0000000000000000 cmddisp
     /tmp/ccQQPlfu.s:21822  .text.cmddisp:0000000000000036 $d
     /tmp/ccQQPlfu.s:22010  .text.cmddisp:00000000000000bc $d
     /tmp/ccQQPlfu.s:22016  .text.set_int_base:0000000000000000 $t
     /tmp/ccQQPlfu.s:22024  .text.set_int_base:0000000000000000 set_int_base
     /tmp/ccQQPlfu.s:22131  .text.set_int_base:000000000000004c $d
     /tmp/ccQQPlfu.s:22138  .text.op_fract:0000000000000000 $t
     /tmp/ccQQPlfu.s:22146  .text.op_fract:0000000000000000 op_fract
     /tmp/ccQQPlfu.s:22205  .text.op_fract:0000000000000040 $d
     /tmp/ccQQPlfu.s:22210  .text.cmdsavem:0000000000000000 $t
     /tmp/ccQQPlfu.s:22218  .text.cmdsavem:0000000000000000 cmdsavem
     /tmp/ccQQPlfu.s:22252  .text.cmdsavem:0000000000000018 $d
     /tmp/ccQQPlfu.s:22257  .text.set_entry:0000000000000000 $t
     /tmp/ccQQPlfu.s:22265  .text.set_entry:0000000000000000 set_entry
     /tmp/ccQQPlfu.s:22303  .text.set_entry:0000000000000020 $d
     /tmp/ccQQPlfu.s:22310  .text.get_trig_mode:0000000000000000 $t
     /tmp/ccQQPlfu.s:22318  .text.get_trig_mode:0000000000000000 get_trig_mode
     /tmp/ccQQPlfu.s:22353  .text.get_trig_mode:0000000000000024 $d
     /tmp/ccQQPlfu.s:22360  .text.cmdpause:0000000000000000 $t
     /tmp/ccQQPlfu.s:22368  .text.cmdpause:0000000000000000 cmdpause
     /tmp/ccQQPlfu.s:22408  .text.cmdpause:000000000000001c $d
                            *COM*:0000000000000001 Pause
     /tmp/ccQQPlfu.s:22414  .text.op_setspeed:0000000000000000 $t
     /tmp/ccQQPlfu.s:22422  .text.op_setspeed:0000000000000000 op_setspeed
     /tmp/ccQQPlfu.s:22451  .text.op_setspeed:000000000000001c $d
     /tmp/ccQQPlfu.s:22456  .text.op_prompt:0000000000000000 $t
ARM GAS  /tmp/ccQQPlfu.s 			page 907


     /tmp/ccQQPlfu.s:22464  .text.op_prompt:0000000000000000 op_prompt
     /tmp/ccQQPlfu.s:22536  .text.op_prompt:0000000000000028 $d
     /tmp/ccQQPlfu.s:22542  .text.XisInt:0000000000000000 $t
     /tmp/ccQQPlfu.s:22550  .text.XisInt:0000000000000000 XisInt
     /tmp/ccQQPlfu.s:22662  .text.XisInt:000000000000005c $d
     /tmp/ccQQPlfu.s:22667  .text.XisEvenOrOdd:0000000000000000 $t
     /tmp/ccQQPlfu.s:22675  .text.XisEvenOrOdd:0000000000000000 XisEvenOrOdd
     /tmp/ccQQPlfu.s:22789  .text.XisEvenOrOdd:0000000000000060 $d
     /tmp/ccQQPlfu.s:22794  .text.XisPrime:0000000000000000 $t
     /tmp/ccQQPlfu.s:22802  .text.XisPrime:0000000000000000 XisPrime
     /tmp/ccQQPlfu.s:22962  .text.XisPrime:000000000000007c $d
     /tmp/ccQQPlfu.s:22968  .text.isInfinite:0000000000000000 $t
     /tmp/ccQQPlfu.s:22976  .text.isInfinite:0000000000000000 isInfinite
     /tmp/ccQQPlfu.s:23028  .text.isInfinite:000000000000002c $d
     /tmp/ccQQPlfu.s:23033  .text.isNan:0000000000000000 $t
     /tmp/ccQQPlfu.s:23041  .text.isNan:0000000000000000 isNan
     /tmp/ccQQPlfu.s:23108  .text.isNan:000000000000003c $d
     /tmp/ccQQPlfu.s:23113  .text.isSpecial:0000000000000000 $t
     /tmp/ccQQPlfu.s:23121  .text.isSpecial:0000000000000000 isSpecial
     /tmp/ccQQPlfu.s:23188  .text.isSpecial:000000000000003c $d
     /tmp/ccQQPlfu.s:23193  .text.op_entryp:0000000000000000 $t
     /tmp/ccQQPlfu.s:23201  .text.op_entryp:0000000000000000 op_entryp
     /tmp/ccQQPlfu.s:23222  .text.op_entryp:0000000000000010 $d
     /tmp/ccQQPlfu.s:23227  .text.reg_decode:0000000000000000 $t
     /tmp/ccQQPlfu.s:23235  .text.reg_decode:0000000000000000 reg_decode
     /tmp/ccQQPlfu.s:24039  .text.reg_decode:0000000000000218 $d
     /tmp/ccQQPlfu.s:24053  .text.op_regcopy:0000000000000000 $t
     /tmp/ccQQPlfu.s:24061  .text.op_regcopy:0000000000000000 op_regcopy
     /tmp/ccQQPlfu.s:24164  .text.op_regcopy:0000000000000048 $d
     /tmp/ccQQPlfu.s:24169  .text.op_regswap:0000000000000000 $t
     /tmp/ccQQPlfu.s:24177  .text.op_regswap:0000000000000000 op_regswap
     /tmp/ccQQPlfu.s:24311  .text.op_regswap:000000000000006c $d
     /tmp/ccQQPlfu.s:24316  .text.op_regclr:0000000000000000 $t
     /tmp/ccQQPlfu.s:24324  .text.op_regclr:0000000000000000 op_regclr
     /tmp/ccQQPlfu.s:24405  .text.op_regclr:0000000000000044 $d
     /tmp/ccQQPlfu.s:24410  .text.op_regsort:0000000000000000 $t
     /tmp/ccQQPlfu.s:24418  .text.op_regsort:0000000000000000 op_regsort
     /tmp/ccQQPlfu.s:24702  .text.reset_volatile_state:0000000000000000 $t
     /tmp/ccQQPlfu.s:24710  .text.reset_volatile_state:0000000000000000 reset_volatile_state
     /tmp/ccQQPlfu.s:24734  .text.reset_volatile_state:0000000000000010 $d
     /tmp/ccQQPlfu.s:24739  .rodata.busy.str1.4:0000000000000000 $d
     /tmp/ccQQPlfu.s:24743  .text.busy:0000000000000000 $t
     /tmp/ccQQPlfu.s:24751  .text.busy:0000000000000000 busy
     /tmp/ccQQPlfu.s:24790  .text.busy:0000000000000018 $d
                            *COM*:0000000000000004 Busy
     /tmp/ccQQPlfu.s:24799  .text.intMonadic:0000000000000000 $t
     /tmp/ccQQPlfu.s:24807  .text.intMonadic:0000000000000000 intMonadic
     /tmp/ccQQPlfu.s:25036  .text.intMonadic:0000000000000084 $d
                            *COM*:0000000000000002 XeqOpCode
     /tmp/ccQQPlfu.s:25046  .text.intDyadic:0000000000000000 $t
     /tmp/ccQQPlfu.s:25054  .text.intDyadic:0000000000000000 intDyadic
     /tmp/ccQQPlfu.s:25338  .text.intDyadic:00000000000000c0 $d
     /tmp/ccQQPlfu.s:25348  .text.xeq_init_contexts:0000000000000000 $t
     /tmp/ccQQPlfu.s:25356  .text.xeq_init_contexts:0000000000000000 xeq_init_contexts
     /tmp/ccQQPlfu.s:25475  .text.xeq_init_contexts:0000000000000078 $d
                            *COM*:0000000000000004 ProgFree
     /tmp/ccQQPlfu.s:25488  .text.not_running:0000000000000000 $t
ARM GAS  /tmp/ccQQPlfu.s 			page 908


     /tmp/ccQQPlfu.s:25496  .text.not_running:0000000000000000 not_running
     /tmp/ccQQPlfu.s:25551  .text.not_running:000000000000001c $d
     /tmp/ccQQPlfu.s:25557  .text.set_running_off_sst:0000000000000000 $t
     /tmp/ccQQPlfu.s:25565  .text.set_running_off_sst:0000000000000000 set_running_off_sst
     /tmp/ccQQPlfu.s:25582  .text.set_running_off_sst:0000000000000008 $d
     /tmp/ccQQPlfu.s:25587  .text.set_running_on_sst:0000000000000000 $t
     /tmp/ccQQPlfu.s:25595  .text.set_running_on_sst:0000000000000000 set_running_on_sst
     /tmp/ccQQPlfu.s:25612  .text.set_running_on_sst:0000000000000008 $d
     /tmp/ccQQPlfu.s:25617  .text.set_running_off:0000000000000000 $t
     /tmp/ccQQPlfu.s:25625  .text.set_running_off:0000000000000000 set_running_off
     /tmp/ccQQPlfu.s:25669  .text.set_running_off:000000000000001c $d
     /tmp/ccQQPlfu.s:25675  .text.set_running_on:0000000000000000 $t
     /tmp/ccQQPlfu.s:25683  .text.set_running_on:0000000000000000 set_running_on
     /tmp/ccQQPlfu.s:25782  .text.set_running_on:0000000000000034 $d
     /tmp/ccQQPlfu.s:25790  .text.gsbgto:0000000000000000 $t
     /tmp/ccQQPlfu.s:25797  .text.gsbgto:0000000000000000 gsbgto
     /tmp/ccQQPlfu.s:25976  .text.gsbgto:000000000000008c $d
     /tmp/ccQQPlfu.s:25987  .text.cmdgtocommon:0000000000000000 $t
     /tmp/ccQQPlfu.s:25995  .text.cmdgtocommon:0000000000000000 cmdgtocommon
     /tmp/ccQQPlfu.s:26081  .text.cmdgtocommon:000000000000002c $d
     /tmp/ccQQPlfu.s:26087  .text.cmdgto:0000000000000000 $t
     /tmp/ccQQPlfu.s:26095  .text.cmdgto:0000000000000000 cmdgto
     /tmp/ccQQPlfu.s:26176  .text.cmdgto:000000000000003c $d
     /tmp/ccQQPlfu.s:26184  .text.branchtoalpha:0000000000000000 $t
     /tmp/ccQQPlfu.s:26191  .text.branchtoalpha:0000000000000000 branchtoalpha
     /tmp/ccQQPlfu.s:26248  .text.cmdalphagto:0000000000000000 $t
     /tmp/ccQQPlfu.s:26256  .text.cmdalphagto:0000000000000000 cmdalphagto
     /tmp/ccQQPlfu.s:26308  .text.op_gtoalpha:0000000000000000 $t
     /tmp/ccQQPlfu.s:26316  .text.op_gtoalpha:0000000000000000 op_gtoalpha
     /tmp/ccQQPlfu.s:26380  .text.op_gtoalpha:0000000000000030 $d
     /tmp/ccQQPlfu.s:26385  .text.cmdskip:0000000000000000 $t
     /tmp/ccQQPlfu.s:26393  .text.cmdskip:0000000000000000 cmdskip
     /tmp/ccQQPlfu.s:26576  .text.cmdskip:0000000000000078 $d
     /tmp/ccQQPlfu.s:26584  .text.cmdback:0000000000000000 $t
     /tmp/ccQQPlfu.s:26592  .text.cmdback:0000000000000000 cmdback
     /tmp/ccQQPlfu.s:26745  .text.cmdback:0000000000000064 $d
     /tmp/ccQQPlfu.s:26753  .text.usergsb_common:0000000000000000 $t
     /tmp/ccQQPlfu.s:26760  .text.usergsb_common:0000000000000000 usergsb_common
     /tmp/ccQQPlfu.s:26871  .text.usergsb_common:0000000000000078 $d
     /tmp/ccQQPlfu.s:26880  .text.do_usergsb:0000000000000000 $t
     /tmp/ccQQPlfu.s:26888  .text.do_usergsb:0000000000000000 do_usergsb
     /tmp/ccQQPlfu.s:26921  .text.do_usergsb:0000000000000014 $d
     /tmp/ccQQPlfu.s:26926  .text.cmdmultigto:0000000000000000 $t
     /tmp/ccQQPlfu.s:26934  .text.cmdmultigto:0000000000000000 cmdmultigto
     /tmp/ccQQPlfu.s:27038  .text.cmdmultigto:000000000000004c $d
     /tmp/ccQQPlfu.s:27044  .text.store_a_to_d:0000000000000000 $t
     /tmp/ccQQPlfu.s:27052  .text.store_a_to_d:0000000000000000 store_a_to_d
     /tmp/ccQQPlfu.s:27100  .text.store_a_to_d:0000000000000020 $d
     /tmp/ccQQPlfu.s:27105  .text.cmdlocr:0000000000000000 $t
     /tmp/ccQQPlfu.s:27113  .text.cmdlocr:0000000000000000 cmdlocr
     /tmp/ccQQPlfu.s:27449  .text.cmdlocr:000000000000015c $d
     /tmp/ccQQPlfu.s:27457  .text.cmdxout:0000000000000000 $t
     /tmp/ccQQPlfu.s:27465  .text.cmdxout:0000000000000000 cmdxout
     /tmp/ccQQPlfu.s:27987  .text.cmdxout:00000000000001e4 $d
     /tmp/ccQQPlfu.s:28002  .text.cmdconverged:0000000000000000 $t
     /tmp/ccQQPlfu.s:28010  .text.cmdconverged:0000000000000000 cmdconverged
     /tmp/ccQQPlfu.s:28239  .text.cmdconverged:00000000000000e0 $d
ARM GAS  /tmp/ccQQPlfu.s 			page 909


     /tmp/ccQQPlfu.s:28249  .text.cmdshuffle:0000000000000000 $t
     /tmp/ccQQPlfu.s:28257  .text.cmdshuffle:0000000000000000 cmdshuffle
     /tmp/ccQQPlfu.s:28490  .text.cmdshuffle:0000000000000084 $d
     /tmp/ccQQPlfu.s:28496  .text.cmdmode:0000000000000000 $t
     /tmp/ccQQPlfu.s:28504  .text.cmdmode:0000000000000000 cmdmode
     /tmp/ccQQPlfu.s:28585  .text.cmdmode:0000000000000050 $d
     /tmp/ccQQPlfu.s:28590  .text.cmdlpop:0000000000000000 $t
     /tmp/ccQQPlfu.s:28598  .text.cmdlpop:0000000000000000 cmdlpop
     /tmp/ccQQPlfu.s:28670  .text.cmdlpop:0000000000000034 $d
     /tmp/ccQQPlfu.s:28676  .text.cmdregs:0000000000000000 $t
     /tmp/ccQQPlfu.s:28684  .text.cmdregs:0000000000000000 cmdregs
     /tmp/ccQQPlfu.s:28864  .text.cmdregs:00000000000000ac $d
     /tmp/ccQQPlfu.s:28871  .text.op_double:0000000000000000 $t
     /tmp/ccQQPlfu.s:28879  .text.op_double:0000000000000000 op_double
     /tmp/ccQQPlfu.s:29179  .text.op_double:000000000000011c $d
     /tmp/ccQQPlfu.s:29186  .text.cmdrestm:0000000000000000 $t
     /tmp/ccQQPlfu.s:29194  .text.cmdrestm:0000000000000000 cmdrestm
     /tmp/ccQQPlfu.s:29388  .text.cmdrestm:00000000000000a8 $d
     /tmp/ccQQPlfu.s:29393  .text.cmdxin:0000000000000000 $t
     /tmp/ccQQPlfu.s:29401  .text.cmdxin:0000000000000000 cmdxin
     /tmp/ccQQPlfu.s:29827  .text.cmdxin:00000000000001b0 $d
     /tmp/ccQQPlfu.s:29840  .rodata.xeq.str1.4:0000000000000000 $d
     /tmp/ccQQPlfu.s:29844  .text.xeq:0000000000000000 $t
     /tmp/ccQQPlfu.s:29852  .text.xeq:0000000000000000 xeq
     /tmp/ccQQPlfu.s:29980  .text.xeq:0000000000000078 $d
     /tmp/ccQQPlfu.s:29987  .text.xeq:0000000000000086 $t
     /tmp/ccQQPlfu.s:30772  .text.xeq:00000000000002f8 $d
     /tmp/ccQQPlfu.s:30793  .text.xeq:0000000000000340 $t
     /tmp/ccQQPlfu.s:34214  .text.dispatch_xrom:0000000000000000 dispatch_xrom
     /tmp/ccQQPlfu.s:31102  .text.xeq:000000000000042a $d
     /tmp/ccQQPlfu.s:31146  .text.xeq:0000000000000480 $t
     /tmp/ccQQPlfu.s:31770  .text.xeq:00000000000005f4 $d
     /tmp/ccQQPlfu.s:31784  .text.xeq:0000000000000610 $t
     /tmp/ccQQPlfu.s:32648  .text.xeq:00000000000008e8 $d
     /tmp/ccQQPlfu.s:32662  .text.xeq:0000000000000910 $t
     /tmp/ccQQPlfu.s:33500  .text.xeq:0000000000000c00 $d
     /tmp/ccQQPlfu.s:33511  .text.xeq:0000000000000c20 $t
     /tmp/ccQQPlfu.s:33939  .text.xeq:0000000000000d88 $d
     /tmp/ccQQPlfu.s:33951  .text.xeq_single:0000000000000000 $t
     /tmp/ccQQPlfu.s:33958  .text.xeq_single:0000000000000000 xeq_single
     /tmp/ccQQPlfu.s:33997  .text.xeq_single:0000000000000020 $d
     /tmp/ccQQPlfu.s:34002  .text.xeq_xrom2:0000000000000000 $t
     /tmp/ccQQPlfu.s:34009  .text.xeq_xrom2:0000000000000000 xeq_xrom2
     /tmp/ccQQPlfu.s:34157  .text.xeq_xrom2:0000000000000070 $d
     /tmp/ccQQPlfu.s:34171  .text.xeq_xrom:0000000000000000 $t
     /tmp/ccQQPlfu.s:34179  .text.xeq_xrom:0000000000000000 xeq_xrom
     /tmp/ccQQPlfu.s:34202  .text.xeq_xrom:0000000000000010 $d
     /tmp/ccQQPlfu.s:34207  .text.dispatch_xrom:0000000000000000 $t
     /tmp/ccQQPlfu.s:34345  .text.dispatch_xrom:000000000000005c $d
     /tmp/ccQQPlfu.s:34355  .text.op_rs:0000000000000000 $t
     /tmp/ccQQPlfu.s:34363  .text.op_rs:0000000000000000 op_rs
     /tmp/ccQQPlfu.s:34507  .text.op_rs:0000000000000078 $d
     /tmp/ccQQPlfu.s:34516  .text.xeqprog:0000000000000000 $t
     /tmp/ccQQPlfu.s:34524  .text.xeqprog:0000000000000000 xeqprog
     /tmp/ccQQPlfu.s:34638  .text.xeqprog:0000000000000064 $d
                            *COM*:0000000000000004 JustStopped
     /tmp/ccQQPlfu.s:34646  .text.xeq_sst_bst:0000000000000000 $t
ARM GAS  /tmp/ccQQPlfu.s 			page 910


     /tmp/ccQQPlfu.s:34654  .text.xeq_sst_bst:0000000000000000 xeq_sst_bst
     /tmp/ccQQPlfu.s:34867  .text.xeq_sst_bst:000000000000009c $d
     /tmp/ccQQPlfu.s:34877  .text.init_34s:0000000000000000 $t
     /tmp/ccQQPlfu.s:34885  .text.init_34s:0000000000000000 init_34s
     /tmp/ccQQPlfu.s:34937  .text.init_34s:0000000000000028 $d
     /tmp/ccQQPlfu.s:34942  .rodata.paste_raw_x.str1.4:0000000000000000 $d
     /tmp/ccQQPlfu.s:34946  .text.paste_raw_x:0000000000000000 $t
     /tmp/ccQQPlfu.s:34954  .text.paste_raw_x:0000000000000000 paste_raw_x
     /tmp/ccQQPlfu.s:35322  .text.paste_raw_x:00000000000000f4 $d
     /tmp/ccQQPlfu.s:35335  .rodata.fill_buffer_from_raw_x.str1.4:0000000000000000 $d
     /tmp/ccQQPlfu.s:35339  .text.fill_buffer_from_raw_x:0000000000000000 $t
     /tmp/ccQQPlfu.s:35347  .text.fill_buffer_from_raw_x:0000000000000000 fill_buffer_from_raw_x
     /tmp/ccQQPlfu.s:35604  .text.fill_buffer_from_raw_x:00000000000000c4 $d
                            *COM*:0000000000000004 RectPolConv
     /tmp/ccQQPlfu.s:35692  .rodata.xrom_targets:0000000000000000 xrom_targets
     /tmp/ccQQPlfu.s:35632  .rodata:0000000000000000 $d
     /tmp/ccQQPlfu.s:35640  .bss.result.11597:0000000000000000 $d
     /tmp/ccQQPlfu.s:35644  .bss.result.11597:0000000000000000 result.11597
     /tmp/ccQQPlfu.s:35647  .data.RegionTab:0000000000000000 $d
     /tmp/ccQQPlfu.s:35651  .data.RegionTab:0000000000000000 RegionTab
     /tmp/ccQQPlfu.s:35657  .rodata.StackRegMask:0000000000000000 $d
     /tmp/ccQQPlfu.s:35661  .rodata.StackRegMask:0000000000000000 StackRegMask
     /tmp/ccQQPlfu.s:35665  .rodata.convergence_tolerances:0000000000000000 $d
     /tmp/ccQQPlfu.s:35669  .rodata.convergence_tolerances:0000000000000000 convergence_tolerances
     /tmp/ccQQPlfu.s:35674  .rodata.modes.11290:0000000000000000 $d
     /tmp/ccQQPlfu.s:35678  .rodata.modes.11290:0000000000000000 modes.11290
     /tmp/ccQQPlfu.s:35681  .rodata.modes.11807:0000000000000000 $d
     /tmp/ccQQPlfu.s:35685  .rodata.modes.11807:0000000000000000 modes.11807
     /tmp/ccQQPlfu.s:35688  .rodata.xrom_targets:0000000000000000 $d
     /tmp/ccQQPlfu.s:18961  .text.do_tst:000000000000006b $d
     /tmp/ccQQPlfu.s:18961  .text.do_tst:000000000000006c $t
     /tmp/ccQQPlfu.s:20665  .text.cmdflag:0000000000000033 $d
     /tmp/ccQQPlfu.s:20665  .text.cmdflag:0000000000000034 $t
     /tmp/ccQQPlfu.s:21825  .text.cmddisp:0000000000000039 $d
     /tmp/ccQQPlfu.s:21825  .text.cmddisp:000000000000003a $t

UNDEFINED SYMBOLS
StateWhileOn
main_ram
xrom_size
XromParams
XromLocal
xset
decNumberRoundDigits
decNumberTrunc
dn_eq
set_carry
dn_to_ull
dn_abs
check_overflow
set_overflow
build_value
dn_lt
const_2pow64
xcopy
argcmds
display
ARM GAS  /tmp/ccQQPlfu.s 			page 911


shutdown
library_ram
backup_ram
scopy
num_arg_0
prt
scopy_char
DispMsg
dot
error_message
JustDisplayed
ShowRPN
decContextDefault
decimal64FromNumber
decimal128FromNumber
decimal64ToNumber
decimal128ToNumber
int_base
cnsts
cnsts_d128
cnsts_d64
dn_max
dn_add
dn_subtract
dn_multiply
dn_divide
dn_min
cmplxDivide
cmplxAdd
cmplxSubtract
cmplxMultiply
decNumberNormalize
decNumberRoundDecimals
const_360
const_2PI
const_400
reset_shift
dn_minus
set_menu
display_current_menu
finish_cpx_entry
set_default_menu
intMax
intAdd
intSubtract
intMultiply
intDivide
intMin
extract_value
dn_dec
dn_eq0
dn_inc
row_column_to_keycode
ullint_to_dn
find_char
decNumberFromString
decNumberCopy
ARM GAS  /tmp/ccQQPlfu.s 			page 912


decNumberZero
stack_begin
const_PI
word_size
int_mode
dn_mulpow10
put_key
const_9on5
const_32
decNumberPow10
const_0_05
dn_log10
const_20
cnsts_conv
keycode_to_row_column
dn_compare
decNumberRnd
dn_mul100
dn_le0
dn_lt0
dn_1
finish_display
mask_value
int_to_dn
decNumber2Fraction
GoFast
alpha_view_common
is_int
is_even
isPrime
dn_to_int
message
monfuncs
xrom
dyfuncs
SizeStatRegs
alpha_rcl_s
XromA2D
relative_error
cmplxR
absolute_error
const_1e_14
const_1e_32
const_1e_24
const_NaN
sprintf
multicmds
niladics
trifuncs
sigma_minus
sigma_val
intChs
const_1
const_0
sigma_plus
set_NaN
finish_RPN
ARM GAS  /tmp/ccQQPlfu.s 			page 913


is_key_pressed
clr_dot
set_dot
OpCode
checksum_ram
init_state
reset
strdup
strtok
strtoull
strchr
free
__aeabi_uldivmod
decNumberToString

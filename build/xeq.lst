ARM GAS  /tmp/cccVhVyH.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"xeq.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.find_section_bounds,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	find_section_bounds:
  27              	.LVL0:
  28              	.LFB19:
  29              		.file 1 "src/xeq.c"
   1:src/xeq.c     **** /* This file is part of 34S.
   2:src/xeq.c     ****  * 
   3:src/xeq.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/xeq.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/xeq.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/xeq.c     ****  * (at your option) any later version.
   7:src/xeq.c     ****  * 
   8:src/xeq.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/xeq.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/xeq.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/xeq.c     ****  * GNU General Public License for more details.
  12:src/xeq.c     ****  * 
  13:src/xeq.c     ****  * You should have received a copy of the GNU General Public License
  14:src/xeq.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/xeq.c     ****  */
  16:src/xeq.c     **** 
  17:src/xeq.c     **** #ifndef REALBUILD
  18:src/xeq.c     **** 
  19:src/xeq.c     **** #if defined(WIN32) && !defined(QTGUI) && !defined(IOS) && !defined(__GNUC__) && !defined(DM42)
  20:src/xeq.c     **** 
  21:src/xeq.c     **** #include <stdlib.h>  // sleep
  22:src/xeq.c     **** #include "win32.h"
  23:src/xeq.c     **** #define sleep _sleep
  24:src/xeq.c     **** #define strtoull _strtoui64
  25:src/xeq.c     **** 
  26:src/xeq.c     **** #else
  27:src/xeq.c     **** 
  28:src/xeq.c     **** #ifdef DM42
  29:src/xeq.c     **** #include "dmcp.h"
ARM GAS  /tmp/cccVhVyH.s 			page 2


  30:src/xeq.c     **** #else
  31:src/xeq.c     **** #include <unistd.h>
  32:src/xeq.c     **** #include <sys/time.h>
  33:src/xeq.c     **** extern unsigned long long strtoull(const char *, char **, int);
  34:src/xeq.c     **** #endif
  35:src/xeq.c     **** 
  36:src/xeq.c     **** #endif
  37:src/xeq.c     **** 
  38:src/xeq.c     **** #include <stdio.h>   // (s)printf
  39:src/xeq.c     **** #include <string.h>
  40:src/xeq.c     **** #include <stdlib.h>
  41:src/xeq.c     **** 
  42:src/xeq.c     **** #endif // not REALBUILD
  43:src/xeq.c     **** 
  44:src/xeq.c     **** #ifdef IOS
  45:src/xeq.c     **** #include <stdarg.h>
  46:src/xeq.c     **** #endif
  47:src/xeq.c     **** 
  48:src/xeq.c     **** #if __GNUC__ >= 4 && __GNUC_MINOR__ >= 6
  49:src/xeq.c     **** #define GNUC_POP_ERROR
  50:src/xeq.c     **** #pragma GCC diagnostic push
  51:src/xeq.c     **** #pragma GCC diagnostic ignored "-Warray-bounds"
  52:src/xeq.c     **** #endif
  53:src/xeq.c     **** 
  54:src/xeq.c     **** #define XEQ_INTERNAL 1
  55:src/xeq.c     **** #define DM42SAFE
  56:src/xeq.c     **** #include "xeq.h"
  57:src/xeq.c     **** #ifdef DM42
  58:src/xeq.c     **** #include "keys.h"
  59:src/xeq.c     **** #endif
  60:src/xeq.c     **** #include "storage.h"
  61:src/xeq.c     **** #include "decn.h"
  62:src/xeq.c     **** #include "complex.h"
  63:src/xeq.c     **** #include "stats.h"
  64:src/xeq.c     **** #include "display.h"
  65:src/xeq.c     **** #include "consts.h"
  66:src/xeq.c     **** #include "int.h"
  67:src/xeq.c     **** #include "date.h"
  68:src/xeq.c     **** #include "lcd.h"
  69:src/xeq.c     **** #include "xrom.h"
  70:src/xeq.c     **** #include "alpha.h"
  71:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
  72:src/xeq.c     **** #include "stopwatch.h"
  73:src/xeq.c     **** #endif
  74:src/xeq.c     **** #ifdef INFRARED
  75:src/xeq.c     **** #include "printer.h"
  76:src/xeq.c     **** #endif
  77:src/xeq.c     **** #undef DM42SAFE
  78:src/xeq.c     **** 
  79:src/xeq.c     **** #include "pretty.h"
  80:src/xeq.c     **** 
  81:src/xeq.c     **** 
  82:src/xeq.c     **** #include "xrom_targets.c"	// Generated by PP
  83:src/xeq.c     **** 
  84:src/xeq.c     **** /* Define the number of program Ticks that must elapse between flashing the
  85:src/xeq.c     ****  * RCL annunciator.
  86:src/xeq.c     ****  */
ARM GAS  /tmp/cccVhVyH.s 			page 3


  87:src/xeq.c     **** #define TICKS_PER_FLASH	(5)
  88:src/xeq.c     **** 
  89:src/xeq.c     **** /*
  90:src/xeq.c     ****  *  A program is running
  91:src/xeq.c     ****  */
  92:src/xeq.c     **** FLAG Running;
  93:src/xeq.c     **** FLAG XromRunning;
  94:src/xeq.c     **** 
  95:src/xeq.c     **** #ifndef CONSOLE
  96:src/xeq.c     **** /*
  97:src/xeq.c     ****  *  A program has just stopped
  98:src/xeq.c     ****  */
  99:src/xeq.c     **** FLAG JustStopped;
 100:src/xeq.c     **** #endif
 101:src/xeq.c     **** 
 102:src/xeq.c     **** /*
 103:src/xeq.c     ****  *  Count down counter for a programmed pause
 104:src/xeq.c     ****  */
 105:src/xeq.c     **** volatile unsigned char Pause;
 106:src/xeq.c     **** 
 107:src/xeq.c     **** /*
 108:src/xeq.c     ****  *  Some long running function has called busy();
 109:src/xeq.c     ****  */
 110:src/xeq.c     **** FLAG Busy;
 111:src/xeq.c     **** 
 112:src/xeq.c     **** /*
 113:src/xeq.c     ****  *  Error code
 114:src/xeq.c     ****  */
 115:src/xeq.c     **** SMALL_INT Error;
 116:src/xeq.c     **** 
 117:src/xeq.c     **** /*
 118:src/xeq.c     ****  *  Indication of PC wrap around
 119:src/xeq.c     ****  */
 120:src/xeq.c     **** FLAG PcWrapped;
 121:src/xeq.c     **** 
 122:src/xeq.c     **** /*
 123:src/xeq.c     ****  *  Currently executed function
 124:src/xeq.c     ****  */
 125:src/xeq.c     **** s_opcode XeqOpCode;
 126:src/xeq.c     **** 
 127:src/xeq.c     **** /*
 128:src/xeq.c     ****  *  Temporary display (not X)
 129:src/xeq.c     ****  */
 130:src/xeq.c     **** SMALL_INT ShowRegister;
 131:src/xeq.c     **** 
 132:src/xeq.c     **** /*
 133:src/xeq.c     ****  *  User code being called from XROM
 134:src/xeq.c     ****  */
 135:src/xeq.c     **** SMALL_INT XromUserPc;
 136:src/xeq.c     **** SMALL_INT UserLocalRegs;
 137:src/xeq.c     **** 
 138:src/xeq.c     **** /* We need various different math contexts.
 139:src/xeq.c     ****  * More efficient to define these globally and reuse them as needed.
 140:src/xeq.c     ****  */
 141:src/xeq.c     **** decContext Ctx;
 142:src/xeq.c     **** 
 143:src/xeq.c     **** /*
ARM GAS  /tmp/cccVhVyH.s 			page 4


 144:src/xeq.c     ****  * A buffer for instruction display
 145:src/xeq.c     ****  */
 146:src/xeq.c     **** char TraceBuffer[25];
 147:src/xeq.c     **** 
 148:src/xeq.c     **** /*
 149:src/xeq.c     ****  *  Total Size of the return stack
 150:src/xeq.c     ****  */
 151:src/xeq.c     **** SMALL_INT RetStkSize;
 152:src/xeq.c     **** 
 153:src/xeq.c     **** /*
 154:src/xeq.c     ****  *  Number of remaining program steps
 155:src/xeq.c     ****  */
 156:src/xeq.c     **** SMALL_INT ProgFree;
 157:src/xeq.c     **** 
 158:src/xeq.c     **** /*
 159:src/xeq.c     ****  * The actual top of the return stack
 160:src/xeq.c     ****  */
 161:src/xeq.c     **** unsigned short *RetStk;
 162:src/xeq.c     **** 
 163:src/xeq.c     **** /*
 164:src/xeq.c     ****  *  The location of the RPN stack
 165:src/xeq.c     ****  */
 166:src/xeq.c     **** REGISTER *StackBase;
 167:src/xeq.c     **** 
 168:src/xeq.c     **** #ifdef INFRARED
 169:src/xeq.c     **** /*
 170:src/xeq.c     ****  *  Is tracing active?
 171:src/xeq.c     ****  */
 172:src/xeq.c     **** FLAG Tracing;
 173:src/xeq.c     **** #endif
 174:src/xeq.c     **** 
 175:src/xeq.c     **** /*
 176:src/xeq.c     **** *	Indicates that a coordinate converstion has just happened
 177:src/xeq.c     **** */
 178:src/xeq.c     **** #ifdef RP_PREFIX
 179:src/xeq.c     **** SMALL_INT RectPolConv; // 1 - R->P just done; 2 - P->R just done
 180:src/xeq.c     **** #endif
 181:src/xeq.c     **** 
 182:src/xeq.c     **** /*
 183:src/xeq.c     ****  *  Check if the current PC is in XROM
 184:src/xeq.c     ****  */
 185:src/xeq.c     **** int is_xrom(void) {
 186:src/xeq.c     **** 	return isXROM(state_pc());
 187:src/xeq.c     **** }
 188:src/xeq.c     **** 
 189:src/xeq.c     **** /*
 190:src/xeq.c     ****  *  Shift the return stack.
 191:src/xeq.c     ****  *  The distance is in levels.
 192:src/xeq.c     ****  *  If argument is negative, return stack will shrink.
 193:src/xeq.c     ****  *  Returns 1 if unsuccessful (error is set)
 194:src/xeq.c     ****  */
 195:src/xeq.c     **** int move_retstk(int distance)
 196:src/xeq.c     **** {
 197:src/xeq.c     **** #ifndef REALBUILD
 198:src/xeq.c     **** 	// Sanity check
 199:src/xeq.c     **** 	if (XromFlags.xIN) {
 200:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
ARM GAS  /tmp/cccVhVyH.s 			page 5


 201:src/xeq.c     **** 		return 1;
 202:src/xeq.c     **** 	}
 203:src/xeq.c     **** #endif
 204:src/xeq.c     **** 	if (RetStkSize + RetStkPtr + distance < 0) {
 205:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 206:src/xeq.c     **** 		return 1;
 207:src/xeq.c     **** 	}
 208:src/xeq.c     **** 	xcopy(RetStk + RetStkPtr + distance, RetStk + RetStkPtr, (-RetStkPtr) << 1);
 209:src/xeq.c     **** 	RetStk += distance;
 210:src/xeq.c     **** 	RetStkSize += distance;
 211:src/xeq.c     **** 	return 0;
 212:src/xeq.c     **** }
 213:src/xeq.c     **** 
 214:src/xeq.c     **** /*
 215:src/xeq.c     ****  *  How many stack levels with local data have we?
 216:src/xeq.c     ****  */
 217:src/xeq.c     **** int local_levels(void) {
 218:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 219:src/xeq.c     **** }
 220:src/xeq.c     **** 
 221:src/xeq.c     **** /*
 222:src/xeq.c     ****  *  How many local registers have we?
 223:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 224:src/xeq.c     ****  */
 225:src/xeq.c     **** int local_regs_rarg(enum rarg op) {
 226:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 227:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 228:src/xeq.c     **** }
 229:src/xeq.c     **** 
 230:src/xeq.c     **** /*
 231:src/xeq.c     ****  *  How many local registers have we?
 232:src/xeq.c     ****  */
 233:src/xeq.c     **** int local_regs(void) {
 234:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 235:src/xeq.c     **** }
 236:src/xeq.c     **** 
 237:src/xeq.c     **** /*
 238:src/xeq.c     ****  *  How many global registers have we?
 239:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 240:src/xeq.c     ****  */
 241:src/xeq.c     **** unsigned int global_regs_rarg(enum rarg op) {
 242:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 243:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 244:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 245:src/xeq.c     **** 	}
 246:src/xeq.c     **** 	else
 247:src/xeq.c     **** 		return NumRegs;
 248:src/xeq.c     **** }
 249:src/xeq.c     **** 
 250:src/xeq.c     **** /*
 251:src/xeq.c     ****  *  How many global registers have we?
 252:src/xeq.c     ****  */
 253:src/xeq.c     **** unsigned int global_regs(void) {
 254:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 255:src/xeq.c     **** }
 256:src/xeq.c     **** 
 257:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 6


 258:src/xeq.c     **** #if defined(CONSOLE)
 259:src/xeq.c     **** // Console screen only
 260:src/xeq.c     **** unsigned int get_local_flags(void) {
 261:src/xeq.c     **** 	if (LocalRegs == 0)
 262:src/xeq.c     **** 		return 0;
 263:src/xeq.c     **** 	return RetStk[LocalRegs + 1];
 264:src/xeq.c     **** }
 265:src/xeq.c     **** #endif
 266:src/xeq.c     **** 
 267:src/xeq.c     **** void version(enum nilop op) {
 268:src/xeq.c     **** 	State2.version = 1;
 269:src/xeq.c     **** 	if (!State2.runmode)
 270:src/xeq.c     **** 		display();
 271:src/xeq.c     **** }
 272:src/xeq.c     **** 
 273:src/xeq.c     **** void cmd_off(enum nilop op) {
 274:src/xeq.c     **** 	shutdown();
 275:src/xeq.c     **** }
 276:src/xeq.c     **** 
 277:src/xeq.c     **** #ifndef state_pc
 278:src/xeq.c     **** unsigned int state_pc(void) {
 279:src/xeq.c     **** 	return State.pc;	
 280:src/xeq.c     **** }
 281:src/xeq.c     **** #endif
 282:src/xeq.c     **** static void raw_set_pc(unsigned int pc) {
 283:src/xeq.c     **** 	State.pc = pc;
 284:src/xeq.c     **** 	update_program_bounds(0);
 285:src/xeq.c     **** }
 286:src/xeq.c     **** 
 287:src/xeq.c     **** /*
 288:src/xeq.c     ****  *  Where do the program regions start?
 289:src/xeq.c     ****  */
 290:src/xeq.c     **** #ifdef DM42
 291:src/xeq.c     **** 
 292:src/xeq.c     **** #pragma GCC diagnostic push
 293:src/xeq.c     **** #pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
 294:src/xeq.c     **** static s_opcode * RegionTab[] = {
 295:src/xeq.c     **** 	NULL,
 296:src/xeq.c     **** 	NULL,
 297:src/xeq.c     **** 	NULL,
 298:src/xeq.c     **** 	xrom
 299:src/xeq.c     **** };
 300:src/xeq.c     **** #pragma GCC diagnostic pop
 301:src/xeq.c     **** 
 302:src/xeq.c     **** void init_RegionTab (void) {
 303:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 304:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 305:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 306:src/xeq.c     **** }
 307:src/xeq.c     **** 
 308:src/xeq.c     **** #else
 309:src/xeq.c     **** static const s_opcode *const RegionTab[] = {
 310:src/xeq.c     **** 	Prog,
 311:src/xeq.c     **** 	UserFlash.prog,
 312:src/xeq.c     **** 	BackupFlash._prog,
 313:src/xeq.c     **** 	xrom
 314:src/xeq.c     **** };
ARM GAS  /tmp/cccVhVyH.s 			page 7


 315:src/xeq.c     **** #endif
 316:src/xeq.c     **** /*
 317:src/xeq.c     ****  *  Size of a program segment
 318:src/xeq.c     ****  */
 319:src/xeq.c     **** int sizeLIB(int region) {
 320:src/xeq.c     **** 	if (region == REGION_XROM)
 321:src/xeq.c     **** 		return xrom_size;
 322:src/xeq.c     **** 	else
 323:src/xeq.c     **** 		return (int)RegionTab[region][-1];
 324:src/xeq.c     **** }
 325:src/xeq.c     **** 
 326:src/xeq.c     **** 
 327:src/xeq.c     **** /*
 328:src/xeq.c     ****  *  Get an opcode, check for double length codes
 329:src/xeq.c     ****  */
 330:src/xeq.c     **** static opcode get_opcode( const s_opcode *loc )
 331:src/xeq.c     **** {
 332:src/xeq.c     **** 	opcode r = *loc;
 333:src/xeq.c     **** 	if ( isDBL(r) ) {
 334:src/xeq.c     **** 		r |= loc[1] << 16;
 335:src/xeq.c     **** 	}
 336:src/xeq.c     **** 	return r;
 337:src/xeq.c     **** }
 338:src/xeq.c     **** 
 339:src/xeq.c     **** 
 340:src/xeq.c     **** /* 
 341:src/xeq.c     ****  * Return the program memory location specified.
 342:src/xeq.c     ****  */
 343:src/xeq.c     **** opcode getprog(unsigned int pc) {
 344:src/xeq.c     **** 
 345:src/xeq.c     **** 	const int region = nLIB(pc);
 346:src/xeq.c     **** 	int offset = offsetLIB(pc);
 347:src/xeq.c     **** 
 348:src/xeq.c     **** 	if (offset < 0 || offset >= sizeLIB(region))
 349:src/xeq.c     **** 		return OP_NIL | OP_END;
 350:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 351:src/xeq.c     **** }
 352:src/xeq.c     **** 
 353:src/xeq.c     **** 
 354:src/xeq.c     **** /* 
 355:src/xeq.c     ****  * Return the physical start-address of the current program
 356:src/xeq.c     ****  */
 357:src/xeq.c     **** const s_opcode *get_current_prog(void) {
 358:src/xeq.c     **** 
 359:src/xeq.c     **** 	const int region = nLIB(ProgBegin);
 360:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 361:src/xeq.c     **** }
 362:src/xeq.c     **** 
 363:src/xeq.c     **** 
 364:src/xeq.c     **** /*
 365:src/xeq.c     ****  *  Set PC with sanity check
 366:src/xeq.c     ****  */
 367:src/xeq.c     **** void set_pc(unsigned int pc) {
 368:src/xeq.c     **** 	if (isRAM(pc)) {
 369:src/xeq.c     **** 		if (pc > ProgSize)
 370:src/xeq.c     **** 			pc = ProgSize;
 371:src/xeq.c     **** 		if (pc > 1 && isDBL(Prog_1[pc - 1]))
ARM GAS  /tmp/cccVhVyH.s 			page 8


 372:src/xeq.c     **** 			pc--;
 373:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 374:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 375:src/xeq.c     **** 		if (pc > n - 1)
 376:src/xeq.c     **** 			pc = n - 1;
 377:src/xeq.c     **** 		if (pc > startLIB(pc) && isDBL(getprog(pc - 1)))
 378:src/xeq.c     **** 			--pc;
 379:src/xeq.c     **** 	}
 380:src/xeq.c     **** 	raw_set_pc(pc);
 381:src/xeq.c     **** }
 382:src/xeq.c     **** 
 383:src/xeq.c     **** 
 384:src/xeq.c     **** 
 385:src/xeq.c     **** /* Locate the beginning and end of a section from a PC that points anywhere within
 386:src/xeq.c     ****  */
 387:src/xeq.c     **** static unsigned short int find_section_bounds(const unsigned int pc, const int endp, unsigned short
  30              		.loc 1 387 119 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 388:src/xeq.c     **** 	unsigned short int top, bottom;
  35              		.loc 1 388 2 view .LVU1
 389:src/xeq.c     **** 
 390:src/xeq.c     **** 	if (endp && State2.runmode) { 
  36              		.loc 1 390 2 view .LVU2
  37              		.loc 1 390 5 is_stmt 0 view .LVU3
  38 0000 71B1     		cbz	r1, .L2
  39              		.loc 1 390 11 discriminator 1 view .LVU4
  40 0002 194B     		ldr	r3, .L14
  41 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
  42 0006 5B06     		lsls	r3, r3, #25
  43 0008 0AD5     		bpl	.L2
 391:src/xeq.c     **** 		// Use the current program as bounds
 392:src/xeq.c     **** 		top = ProgBegin;
  44              		.loc 1 392 3 is_stmt 1 view .LVU5
  45              		.loc 1 392 9 is_stmt 0 view .LVU6
  46 000a 184B     		ldr	r3, .L14+4
  47 000c 1968     		ldr	r1, [r3]
  48              	.LVL1:
 393:src/xeq.c     **** 		bottom = ProgEnd;
  49              		.loc 1 393 3 is_stmt 1 view .LVU7
  50 000e B1F8EC37 		ldrh	r3, [r1, #2028]
  51              		.loc 1 393 10 is_stmt 0 view .LVU8
  52 0012 B1F8EE07 		ldrh	r0, [r1, #2030]
  53              	.LVL2:
 394:src/xeq.c     **** 		if (top == 0)
  54              		.loc 1 394 3 is_stmt 1 view .LVU9
  55 0016 012B     		cmp	r3, #1
  56 0018 38BF     		it	cc
  57 001a 0123     		movcc	r3, #1
  58              	.LVL3:
 395:src/xeq.c     **** 			top = 1;
 396:src/xeq.c     **** 	}
 397:src/xeq.c     **** 	else if (isXROM(pc)) {
 398:src/xeq.c     **** 		top = addrXROM(1);
 399:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
ARM GAS  /tmp/cccVhVyH.s 			page 9


 400:src/xeq.c     **** 	} 
 401:src/xeq.c     **** 	else if (isLIB(pc)) {
 402:src/xeq.c     **** 		top = startLIB(pc);
 403:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
 404:src/xeq.c     **** 	}
 405:src/xeq.c     **** 	else {
 406:src/xeq.c     **** 		top = State2.runmode;  // step 001 if not entering a program
 407:src/xeq.c     **** 		bottom = ProgSize;
 408:src/xeq.c     **** 	}
 409:src/xeq.c     **** 	*p_top = top;
  59              		.loc 1 409 2 view .LVU10
  60              		.loc 1 409 9 is_stmt 0 view .LVU11
  61 001c 1380     		strh	r3, [r2]	@ movhi
 410:src/xeq.c     **** 	return bottom;
  62              		.loc 1 410 2 is_stmt 1 view .LVU12
 411:src/xeq.c     **** }
  63              		.loc 1 411 1 is_stmt 0 view .LVU13
  64 001e 7047     		bx	lr
  65              	.LVL4:
  66              	.L2:
 397:src/xeq.c     **** 		top = addrXROM(1);
  67              		.loc 1 397 7 is_stmt 1 view .LVU14
 397:src/xeq.c     **** 		top = addrXROM(1);
  68              		.loc 1 397 11 is_stmt 0 view .LVU15
  69 0020 830B     		lsrs	r3, r0, #14
 397:src/xeq.c     **** 		top = addrXROM(1);
  70              		.loc 1 397 10 view .LVU16
  71 0022 032B     		cmp	r3, #3
  72 0024 0FD0     		beq	.L13
 401:src/xeq.c     **** 		top = startLIB(pc);
  73              		.loc 1 401 7 is_stmt 1 view .LVU17
 401:src/xeq.c     **** 		top = startLIB(pc);
  74              		.loc 1 401 10 is_stmt 0 view .LVU18
  75 0026 10F4404F 		tst	r0, #49152
  76 002a 14D0     		beq	.L5
 402:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  77              		.loc 1 402 3 is_stmt 1 view .LVU19
  78              	.LBB1346:
  79              	.LBB1347:
 323:src/xeq.c     **** }
  80              		.loc 1 323 24 is_stmt 0 view .LVU20
  81 002c 1049     		ldr	r1, .L14+8
  82              	.LVL5:
 323:src/xeq.c     **** }
  83              		.loc 1 323 32 view .LVU21
  84 002e 51F82330 		ldr	r3, [r1, r3, lsl #2]
  85              	.LBE1347:
  86              	.LBE1346:
 403:src/xeq.c     **** 	}
  87              		.loc 1 403 10 view .LVU22
  88 0032 33F8021C 		ldrh	r1, [r3, #-2]
 402:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  89              		.loc 1 402 9 view .LVU23
  90 0036 00F44043 		and	r3, r0, #49152
 403:src/xeq.c     **** 	}
  91              		.loc 1 403 10 view .LVU24
  92 003a 5818     		adds	r0, r3, r1
ARM GAS  /tmp/cccVhVyH.s 			page 10


  93              	.LVL6:
 402:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  94              		.loc 1 402 7 view .LVU25
  95 003c 0133     		adds	r3, r3, #1
  96 003e 9BB2     		uxth	r3, r3
  97              	.LVL7:
 403:src/xeq.c     **** 	}
  98              		.loc 1 403 3 is_stmt 1 view .LVU26
  99              	.LBB1349:
 100              	.LBI1346:
 319:src/xeq.c     **** 	if (region == REGION_XROM)
 101              		.loc 1 319 5 view .LVU27
 102              	.LBB1348:
 320:src/xeq.c     **** 		return xrom_size;
 103              		.loc 1 320 2 view .LVU28
 323:src/xeq.c     **** }
 104              		.loc 1 323 3 view .LVU29
 323:src/xeq.c     **** }
 105              		.loc 1 323 3 is_stmt 0 view .LVU30
 106              	.LBE1348:
 107              	.LBE1349:
 403:src/xeq.c     **** 	}
 108              		.loc 1 403 10 view .LVU31
 109 0040 80B2     		uxth	r0, r0
 110              	.LVL8:
 409:src/xeq.c     **** 	return bottom;
 111              		.loc 1 409 2 is_stmt 1 view .LVU32
 409:src/xeq.c     **** 	return bottom;
 112              		.loc 1 409 9 is_stmt 0 view .LVU33
 113 0042 1380     		strh	r3, [r2]	@ movhi
 410:src/xeq.c     **** }
 114              		.loc 1 410 2 is_stmt 1 view .LVU34
 115              		.loc 1 411 1 is_stmt 0 view .LVU35
 116 0044 7047     		bx	lr
 117              	.LVL9:
 118              	.L13:
 398:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 119              		.loc 1 398 3 is_stmt 1 view .LVU36
 399:src/xeq.c     **** 	} 
 120              		.loc 1 399 3 view .LVU37
 399:src/xeq.c     **** 	} 
 121              		.loc 1 399 10 is_stmt 0 view .LVU38
 122 0046 0B4B     		ldr	r3, .L14+12
 123 0048 1888     		ldrh	r0, [r3]
 124              	.LVL10:
 398:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 125              		.loc 1 398 7 view .LVU39
 126 004a 4CF20103 		movw	r3, #49153
 399:src/xeq.c     **** 	} 
 127              		.loc 1 399 10 view .LVU40
 128 004e 40F44040 		orr	r0, r0, #49152
 129              	.LVL11:
 409:src/xeq.c     **** 	return bottom;
 130              		.loc 1 409 2 is_stmt 1 view .LVU41
 409:src/xeq.c     **** 	return bottom;
 131              		.loc 1 409 9 is_stmt 0 view .LVU42
 132 0052 1380     		strh	r3, [r2]	@ movhi
ARM GAS  /tmp/cccVhVyH.s 			page 11


 410:src/xeq.c     **** }
 133              		.loc 1 410 2 is_stmt 1 view .LVU43
 134              		.loc 1 411 1 is_stmt 0 view .LVU44
 135 0054 7047     		bx	lr
 136              	.LVL12:
 137              	.L5:
 406:src/xeq.c     **** 		bottom = ProgSize;
 138              		.loc 1 406 3 is_stmt 1 view .LVU45
 406:src/xeq.c     **** 		bottom = ProgSize;
 139              		.loc 1 406 15 is_stmt 0 view .LVU46
 140 0056 044B     		ldr	r3, .L14
 407:src/xeq.c     **** 	}
 141              		.loc 1 407 10 view .LVU47
 142 0058 0449     		ldr	r1, .L14+4
 143              	.LVL13:
 406:src/xeq.c     **** 		bottom = ProgSize;
 144              		.loc 1 406 15 view .LVU48
 145 005a 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 407:src/xeq.c     **** 	}
 146              		.loc 1 407 10 view .LVU49
 147 005c 0968     		ldr	r1, [r1]
 406:src/xeq.c     **** 		bottom = ProgSize;
 148              		.loc 1 406 7 view .LVU50
 149 005e C3F38013 		ubfx	r3, r3, #6, #1
 150              	.LVL14:
 407:src/xeq.c     **** 	}
 151              		.loc 1 407 3 is_stmt 1 view .LVU51
 407:src/xeq.c     **** 	}
 152              		.loc 1 407 10 is_stmt 0 view .LVU52
 153 0062 4888     		ldrh	r0, [r1, #2]
 154              	.LVL15:
 409:src/xeq.c     **** 	return bottom;
 155              		.loc 1 409 2 is_stmt 1 view .LVU53
 409:src/xeq.c     **** 	return bottom;
 156              		.loc 1 409 9 is_stmt 0 view .LVU54
 157 0064 1380     		strh	r3, [r2]	@ movhi
 410:src/xeq.c     **** }
 158              		.loc 1 410 2 is_stmt 1 view .LVU55
 159              		.loc 1 411 1 is_stmt 0 view .LVU56
 160 0066 7047     		bx	lr
 161              	.L15:
 162              		.align	2
 163              	.L14:
 164 0068 00000000 		.word	StateWhileOn
 165 006c 00000000 		.word	main_ram
 166 0070 00000000 		.word	.LANCHOR0
 167 0074 00000000 		.word	xrom_size
 168              		.cfi_endproc
 169              	.LFE19:
 171              		.section	.text.reg_address,"ax",%progbits
 172              		.align	1
 173              		.p2align 2,,3
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu fpv4-sp-d16
 179              	reg_address:
ARM GAS  /tmp/cccVhVyH.s 			page 12


 180              	.LVL16:
 181              	.LFB90:
 412:src/xeq.c     **** 
 413:src/xeq.c     **** 
 414:src/xeq.c     **** /* Increment the passed PC.  Account for wrap around but nothing else.
 415:src/xeq.c     ****  * Return the updated PC.
 416:src/xeq.c     ****  * Set PcWrapped on wrap around
 417:src/xeq.c     ****  */
 418:src/xeq.c     **** unsigned int do_inc(const unsigned int pc, int endp) {
 419:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 420:src/xeq.c     **** 	unsigned short int top = 0;
 421:src/xeq.c     **** 	unsigned short int bottom = 0;
 422:src/xeq.c     **** 
 423:src/xeq.c     **** 	PcWrapped = 0;
 424:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 425:src/xeq.c     **** 
 426:src/xeq.c     **** 	if (npc > bottom) {
 427:src/xeq.c     **** 		PcWrapped = 1;
 428:src/xeq.c     **** 		return top;
 429:src/xeq.c     **** 	}
 430:src/xeq.c     **** 	return npc;
 431:src/xeq.c     **** }
 432:src/xeq.c     **** 
 433:src/xeq.c     **** /* Decrement the passed PC.  Account for wrap around but nothing else.
 434:src/xeq.c     ****  * Return the updated PC.
 435:src/xeq.c     ****  * Set PcWrapped on wrap around
 436:src/xeq.c     ****  */
 437:src/xeq.c     **** unsigned int do_dec(unsigned int pc, int endp) {
 438:src/xeq.c     **** 	unsigned short int top = 0;
 439:src/xeq.c     **** 	unsigned short int bottom = 0;
 440:src/xeq.c     **** 
 441:src/xeq.c     **** 	PcWrapped = 0;
 442:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 443:src/xeq.c     **** 
 444:src/xeq.c     **** 	if (pc <= top) {
 445:src/xeq.c     **** 		PcWrapped = 1;
 446:src/xeq.c     **** 		pc = bottom;
 447:src/xeq.c     **** 	}
 448:src/xeq.c     **** 	else
 449:src/xeq.c     **** 		--pc;
 450:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 451:src/xeq.c     **** 		--pc;
 452:src/xeq.c     **** 	return pc;
 453:src/xeq.c     **** }
 454:src/xeq.c     **** 
 455:src/xeq.c     **** /* Increment the PC keeping account of wrapping around and stopping
 456:src/xeq.c     ****  * programs on such.  Return non-zero if we wrapped.
 457:src/xeq.c     ****  */
 458:src/xeq.c     **** int incpc(void) {
 459:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 460:src/xeq.c     **** 	return PcWrapped;
 461:src/xeq.c     **** }
 462:src/xeq.c     **** 
 463:src/xeq.c     **** void decpc(void) {
 464:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 465:src/xeq.c     **** }
 466:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 13


 467:src/xeq.c     **** /*
 468:src/xeq.c     ****  * Update the pointers to the current program delimited by END statements
 469:src/xeq.c     ****  */
 470:src/xeq.c     **** void update_program_bounds(const int force) {
 471:src/xeq.c     **** 	unsigned int pc = state_pc();
 472:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 473:src/xeq.c     **** 		State.pc = pc = 1;
 474:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 475:src/xeq.c     **** 		return;
 476:src/xeq.c     **** 	for (PcWrapped = 0; !PcWrapped; pc = do_inc(pc, 0)) {
 477:src/xeq.c     **** 		ProgEnd = pc;
 478:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 479:src/xeq.c     **** 			break;
 480:src/xeq.c     **** 		}
 481:src/xeq.c     **** 	}
 482:src/xeq.c     **** 	for (pc = state_pc();;) {
 483:src/xeq.c     **** 		const unsigned int opc = pc;
 484:src/xeq.c     **** 		pc = do_dec(opc, 0);
 485:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 486:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 487:src/xeq.c     **** 			break;
 488:src/xeq.c     **** 		}
 489:src/xeq.c     **** 	}
 490:src/xeq.c     **** }
 491:src/xeq.c     **** 
 492:src/xeq.c     **** /* Determine where in program space the PC really is
 493:src/xeq.c     ****  */
 494:src/xeq.c     **** unsigned int user_pc(unsigned int pc) {
 495:src/xeq.c     **** 	unsigned int n = 1;
 496:src/xeq.c     **** 	unsigned int base;
 497:src/xeq.c     **** 
 498:src/xeq.c     **** #ifndef REALBUILD
 499:src/xeq.c     **** 	if (pc == 0 || isXROM(pc))
 500:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 501:src/xeq.c     **** #else
 502:src/xeq.c     **** 	if (pc == 0)
 503:src/xeq.c     **** 		return 0;
 504:src/xeq.c     **** #endif
 505:src/xeq.c     **** 	base = startLIB(pc);
 506:src/xeq.c     **** 	while (base < pc) {
 507:src/xeq.c     **** 		base = do_inc(base, 0);
 508:src/xeq.c     **** 		if (PcWrapped)
 509:src/xeq.c     **** 			return n;
 510:src/xeq.c     **** 		++n;
 511:src/xeq.c     **** 	}
 512:src/xeq.c     **** 	return n;
 513:src/xeq.c     **** }
 514:src/xeq.c     **** 
 515:src/xeq.c     **** /* Given a target user PC, figure out the real matching PC
 516:src/xeq.c     ****  */
 517:src/xeq.c     **** unsigned int find_user_pc(unsigned int target) {
 518:src/xeq.c     **** 	unsigned int upc = state_pc();
 519:src/xeq.c     **** 	const int libp = isLIB(upc);
 520:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 521:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 522:src/xeq.c     **** #ifndef REALBUILD
 523:src/xeq.c     **** 	if (isXROM(upc))
ARM GAS  /tmp/cccVhVyH.s 			page 14


 524:src/xeq.c     **** 		return addrXROM(target);
 525:src/xeq.c     **** #endif
 526:src/xeq.c     **** 	while (n++ < target) {
 527:src/xeq.c     **** 		const unsigned int oldbase = base;
 528:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 529:src/xeq.c     **** 		if (PcWrapped)
 530:src/xeq.c     **** 			return oldbase;
 531:src/xeq.c     **** 	}
 532:src/xeq.c     **** 	return base;
 533:src/xeq.c     **** }
 534:src/xeq.c     **** 
 535:src/xeq.c     **** 
 536:src/xeq.c     **** /* Set a flag to indicate that a complex operation has taken place
 537:src/xeq.c     ****  * The flag disappears with the next command executed.
 538:src/xeq.c     ****  */
 539:src/xeq.c     **** static void set_was_complex(void) {
 540:src/xeq.c     **** 	State2.wascomplex = 1;
 541:src/xeq.c     **** }
 542:src/xeq.c     **** 
 543:src/xeq.c     **** 
 544:src/xeq.c     **** /* Produce an error and stop
 545:src/xeq.c     ****  */
 546:src/xeq.c     **** int report_err(const unsigned int e) {
 547:src/xeq.c     **** 	if (Error == ERR_NONE) {
 548:src/xeq.c     **** 		Error = e;
 549:src/xeq.c     **** 		if (e == ERR_NONE) {
 550:src/xeq.c     **** 			error_message(e); // "Running Program"
 551:src/xeq.c     **** 			return 0;
 552:src/xeq.c     **** 		}
 553:src/xeq.c     **** 	}
 554:src/xeq.c     **** 	return 1;
 555:src/xeq.c     **** }
 556:src/xeq.c     **** 
 557:src/xeq.c     **** 
 558:src/xeq.c     **** /* Display a warning
 559:src/xeq.c     ****  */
 560:src/xeq.c     **** int report_warn(const unsigned int e) {
 561:src/xeq.c     **** 	if (Running) {
 562:src/xeq.c     **** 		return report_err(e);
 563:src/xeq.c     **** 	}
 564:src/xeq.c     **** 	error_message(e);
 565:src/xeq.c     **** #ifndef CONSOLE
 566:src/xeq.c     **** 	State2.disp_freeze = 0;
 567:src/xeq.c     **** 	JustDisplayed = 1;
 568:src/xeq.c     **** 	ShowRPN = 1;
 569:src/xeq.c     **** #endif
 570:src/xeq.c     **** 	return e != ERR_NONE;
 571:src/xeq.c     **** }
 572:src/xeq.c     **** 
 573:src/xeq.c     **** 
 574:src/xeq.c     **** /* Doing something in the wrong mode */
 575:src/xeq.c     **** void bad_mode_error(void) {
 576:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 577:src/xeq.c     **** }
 578:src/xeq.c     **** 
 579:src/xeq.c     **** 
 580:src/xeq.c     **** /* User command to produce an error */
ARM GAS  /tmp/cccVhVyH.s 			page 15


 581:src/xeq.c     **** void cmderr(unsigned int arg, enum rarg op) {
 582:src/xeq.c     **** 	report_err(arg);
 583:src/xeq.c     **** }
 584:src/xeq.c     **** 
 585:src/xeq.c     **** 
 586:src/xeq.c     **** /* User command to display a warning */
 587:src/xeq.c     **** void cmdmsg(unsigned int arg, enum rarg op) {
 588:src/xeq.c     **** 	error_message(arg);
 589:src/xeq.c     **** }
 590:src/xeq.c     **** 
 591:src/xeq.c     **** 
 592:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE)
 593:src/xeq.c     **** #include <stdlib.h>
 594:src/xeq.c     **** static void error(const char *fmt, ...) {
 595:src/xeq.c     **** 	va_list ap;
 596:src/xeq.c     **** 	va_start(ap, fmt);
 597:src/xeq.c     **** 	vprintf(fmt, ap);
 598:src/xeq.c     **** 	va_end(ap);
 599:src/xeq.c     **** 	putchar('\n');
 600:src/xeq.c     **** 	exit(1);
 601:src/xeq.c     **** }
 602:src/xeq.c     **** 
 603:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); printf("illegal opcode 0x%08x\n", op); } while (
 604:src/xeq.c     **** #else
 605:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); } while (0)
 606:src/xeq.c     **** #endif
 607:src/xeq.c     **** 
 608:src/xeq.c     **** /* Real rounding mode access routine
 609:src/xeq.c     ****  */
 610:src/xeq.c     **** static enum rounding get_rounding_mode() {
 611:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 612:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 613:src/xeq.c     **** 		DEC_ROUND_UP, DEC_ROUND_DOWN,
 614:src/xeq.c     **** 		DEC_ROUND_CEILING, DEC_ROUND_FLOOR
 615:src/xeq.c     **** 	};
 616:src/xeq.c     **** 	return (enum rounding) modes[UState.rounding_mode];
 617:src/xeq.c     **** }
 618:src/xeq.c     **** 
 619:src/xeq.c     **** void op_roundingmode(enum nilop op) {
 620:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 621:src/xeq.c     **** }
 622:src/xeq.c     **** 
 623:src/xeq.c     **** void rarg_roundingmode(unsigned int arg, enum rarg op) {
 624:src/xeq.c     **** 	UState.rounding_mode = arg;
 625:src/xeq.c     **** }
 626:src/xeq.c     **** 
 627:src/xeq.c     **** 
 628:src/xeq.c     **** /* Pack a number into our DPD register format
 629:src/xeq.c     ****  */
 630:src/xeq.c     **** 
 631:src/xeq.c     **** void packed_from_number(decimal64 *r, const decNumber *x) {
 632:src/xeq.c     **** 	decContext ctx64;
 633:src/xeq.c     **** 
 634:src/xeq.c     **** 	decContextDefault(&ctx64, DEC_INIT_DECIMAL64);
 635:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 636:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 637:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 16


 638:src/xeq.c     **** 
 639:src/xeq.c     **** void packed128_from_number(decimal128 *r, const decNumber *x) {
 640:src/xeq.c     **** 	decContext ctx128;
 641:src/xeq.c     **** 
 642:src/xeq.c     **** 	decContextDefault(&ctx128, DEC_INIT_DECIMAL128);
 643:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 644:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 645:src/xeq.c     **** }
 646:src/xeq.c     **** 
 647:src/xeq.c     **** // Repack a decimal128 to decimal64
 648:src/xeq.c     **** void packed_from_packed128(decimal64 *r, const decimal128 *s) {
 649:src/xeq.c     **** 	decNumber temp;
 650:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 651:src/xeq.c     **** }
 652:src/xeq.c     **** 
 653:src/xeq.c     **** // Repack a decimal64 to decimal128
 654:src/xeq.c     **** void packed128_from_packed(decimal128 *r, const decimal64 *s) {
 655:src/xeq.c     **** 	decNumber temp;
 656:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 657:src/xeq.c     **** }
 658:src/xeq.c     **** 
 659:src/xeq.c     **** /*
 660:src/xeq.c     ****  *  User command to round to a specific number of digits
 661:src/xeq.c     ****  */
 662:src/xeq.c     **** void rarg_round(unsigned int arg, enum rarg op) {
 663:src/xeq.c     **** 	decNumber res, x;
 664:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 665:src/xeq.c     **** 
 666:src/xeq.c     **** 	if (is_intmode()) {
 667:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 668:src/xeq.c     **** 		return;
 669:src/xeq.c     **** 	}
 670:src/xeq.c     **** 
 671:src/xeq.c     **** 	setlastX();
 672:src/xeq.c     **** 	getX(&x);
 673:src/xeq.c     **** 	if (op == RARG_ROUND)
 674:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 675:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 676:src/xeq.c     **** 		decNumberRoundDecimals(&res, &x, arg, rm);
 677:src/xeq.c     **** 	setX(&res);
 678:src/xeq.c     **** }
 679:src/xeq.c     **** 
 680:src/xeq.c     **** /* Check if a value is bogus and error out if so.
 681:src/xeq.c     ****  * A value is bogus if it is infinite, NaN *and* flag D is not set.
 682:src/xeq.c     ****  * If flag D is set, these values are allowed through just fine.
 683:src/xeq.c     ****  */
 684:src/xeq.c     **** static int check_special(const decNumber *x) {
 685:src/xeq.c     **** 	decNumber y;
 686:src/xeq.c     **** 	decimal64 z;
 687:src/xeq.c     **** 	decimal128 d;
 688:src/xeq.c     **** 	if (is_dblmode()) {
 689:src/xeq.c     **** 		packed128_from_number(&d, x);
 690:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 691:src/xeq.c     **** 	}
 692:src/xeq.c     **** 	else 
 693:src/xeq.c     **** 	{
 694:src/xeq.c     **** 		packed_from_number(&z, x);
ARM GAS  /tmp/cccVhVyH.s 			page 17


 695:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 696:src/xeq.c     **** 	}
 697:src/xeq.c     **** 	if (decNumberIsSpecial(&y)) {
 698:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 699:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 700:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 701:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 702:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 703:src/xeq.c     **** 			else
 704:src/xeq.c     **** 				report_err(ERR_INFINITY);
 705:src/xeq.c     **** 			return 1;
 706:src/xeq.c     **** 		}
 707:src/xeq.c     **** 	}
 708:src/xeq.c     **** 	return 0;
 709:src/xeq.c     **** }
 710:src/xeq.c     **** 
 711:src/xeq.c     **** 
 712:src/xeq.c     **** int stack_size(void) {
 713:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 714:src/xeq.c     **** 		return 4;
 715:src/xeq.c     **** 	return 8;
 716:src/xeq.c     **** }
 717:src/xeq.c     **** 
 718:src/xeq.c     **** REGISTER *get_stack(int pos) {
 719:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 720:src/xeq.c     **** }
 721:src/xeq.c     **** 
 722:src/xeq.c     **** static REGISTER *get_stack_top(void) {
 723:src/xeq.c     **** 	return get_stack(stack_size()-1);
 724:src/xeq.c     **** }
 725:src/xeq.c     **** 
 726:src/xeq.c     **** void copyreg(REGISTER *d, const REGISTER *s) {
 727:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 728:src/xeq.c     **** }
 729:src/xeq.c     **** 
 730:src/xeq.c     **** void copyreg_n(int d, int s) {
 731:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 732:src/xeq.c     **** }
 733:src/xeq.c     **** 
 734:src/xeq.c     **** /* Lift the stack one level.
 735:src/xeq.c     ****  */
 736:src/xeq.c     **** void lift(void) {
 737:src/xeq.c     **** 	const int n = stack_size();
 738:src/xeq.c     **** 	int i;
 739:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 740:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 741:src/xeq.c     **** }
 742:src/xeq.c     **** 
 743:src/xeq.c     **** static int get_lift(void) {
 744:src/xeq.c     **** 	return State2.state_lift;
 745:src/xeq.c     **** }
 746:src/xeq.c     **** 
 747:src/xeq.c     **** void lift_if_enabled(void) {
 748:src/xeq.c     **** 	if (get_lift())
 749:src/xeq.c     **** 		lift();
 750:src/xeq.c     **** }
 751:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 18


 752:src/xeq.c     **** static void lift2_if_enabled(void) {
 753:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 754:src/xeq.c     **** 	lift_if_enabled();
 755:src/xeq.c     **** 	if (C_LOCKED) {
 756:src/xeq.c     **** 		lift_if_enabled();
 757:src/xeq.c     **** 	}
 758:src/xeq.c     **** 	else {
 759:src/xeq.c     **** 		lift();
 760:src/xeq.c     **** 	}
 761:src/xeq.c     **** #else
 762:src/xeq.c     **** 	lift_if_enabled();
 763:src/xeq.c     **** 	lift();
 764:src/xeq.c     **** #endif
 765:src/xeq.c     **** }
 766:src/xeq.c     **** 
 767:src/xeq.c     **** void set_lift(void) {
 768:src/xeq.c     ****     State2.state_lift = 1;
 769:src/xeq.c     **** }
 770:src/xeq.c     **** 
 771:src/xeq.c     **** static void clr_lift(void) {
 772:src/xeq.c     ****     State2.state_lift = 0;
 773:src/xeq.c     **** }
 774:src/xeq.c     **** 
 775:src/xeq.c     **** static void lower(void) {
 776:src/xeq.c     **** 	const int n = stack_size();
 777:src/xeq.c     **** 	int i;
 778:src/xeq.c     **** 
 779:src/xeq.c     **** 	for (i=1; i<n; i++)
 780:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 781:src/xeq.c     **** }
 782:src/xeq.c     **** 
 783:src/xeq.c     **** static void lower2(void) {
 784:src/xeq.c     **** 	const int n = stack_size();
 785:src/xeq.c     **** 	int i;
 786:src/xeq.c     **** 
 787:src/xeq.c     **** 	for (i=2; i<n; i++)
 788:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 789:src/xeq.c     **** }
 790:src/xeq.c     **** 
 791:src/xeq.c     **** 
 792:src/xeq.c     **** void setlastX(void) {
 793:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 794:src/xeq.c     **** }
 795:src/xeq.c     **** 
 796:src/xeq.c     **** static void setlastXY(void) {
 797:src/xeq.c     **** 	setlastX();
 798:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 799:src/xeq.c     **** }
 800:src/xeq.c     **** 
 801:src/xeq.c     **** 
 802:src/xeq.c     **** decNumber *getRegister(decNumber *r, int index) {
 803:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 804:src/xeq.c     **** 	if (is_dblmode())
 805:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 806:src/xeq.c     **** 	else
 807:src/xeq.c     **** 		decimal64ToNumber(&(reg->s), r);
 808:src/xeq.c     **** 	return r;
ARM GAS  /tmp/cccVhVyH.s 			page 19


 809:src/xeq.c     **** }
 810:src/xeq.c     **** 
 811:src/xeq.c     **** void setRegister(int index, const decNumber *x) {
 812:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 813:src/xeq.c     **** 	decNumber dn;
 814:src/xeq.c     **** 
 815:src/xeq.c     **** 	if (! check_special(x)) {	/* This correctly deals with infinities and NaN based on flag D */
 816:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 817:src/xeq.c     **** 		if (is_dblmode())
 818:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 819:src/xeq.c     **** 		else
 820:src/xeq.c     **** 			packed_from_number(&(reg->s), &dn);
 821:src/xeq.c     **** 	}
 822:src/xeq.c     **** }
 823:src/xeq.c     **** 
 824:src/xeq.c     **** decNumber *getX(decNumber *x) {
 825:src/xeq.c     **** 	return getRegister(x, regX_idx);
 826:src/xeq.c     **** }
 827:src/xeq.c     **** 
 828:src/xeq.c     **** void setX(const decNumber *x) {
 829:src/xeq.c     **** 	setRegister(regX_idx, x);
 830:src/xeq.c     **** }
 831:src/xeq.c     **** 
 832:src/xeq.c     **** void getY(decNumber *y) {
 833:src/xeq.c     **** 	getRegister(y, regY_idx);
 834:src/xeq.c     **** }
 835:src/xeq.c     **** 
 836:src/xeq.c     **** void setY(const decNumber *y) {
 837:src/xeq.c     **** 	setRegister(regY_idx, y);
 838:src/xeq.c     **** }
 839:src/xeq.c     **** 
 840:src/xeq.c     **** static void getZ(decNumber *z) {
 841:src/xeq.c     **** 	getRegister(z, regZ_idx);
 842:src/xeq.c     **** }
 843:src/xeq.c     **** 
 844:src/xeq.c     **** #if 0
 845:src/xeq.c     **** static void setZ(const decNumber *z) {
 846:src/xeq.c     **** 	setRegister(regZ_idx, z);
 847:src/xeq.c     **** }
 848:src/xeq.c     **** #endif
 849:src/xeq.c     **** 
 850:src/xeq.c     **** static void getT(decNumber *t) {
 851:src/xeq.c     **** 	getRegister(t, regT_idx);
 852:src/xeq.c     **** }
 853:src/xeq.c     **** 
 854:src/xeq.c     **** void getXY(decNumber *x, decNumber *y) {
 855:src/xeq.c     **** 	getX(x);
 856:src/xeq.c     **** 	getY(y);
 857:src/xeq.c     **** }
 858:src/xeq.c     **** 
 859:src/xeq.c     **** void setXY(const decNumber *x, const decNumber *y) {
 860:src/xeq.c     **** 	setX(x);
 861:src/xeq.c     **** 	setY(y);
 862:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 863:src/xeq.c     **** 	CLEAR_POLAR_READY;
 864:src/xeq.c     **** #endif
 865:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 20


 866:src/xeq.c     **** 
 867:src/xeq.c     **** void getXYZ(decNumber *x, decNumber *y, decNumber *z) {
 868:src/xeq.c     **** 	getXY(x, y);
 869:src/xeq.c     **** 	getZ(z);
 870:src/xeq.c     **** }
 871:src/xeq.c     **** 
 872:src/xeq.c     **** #if 0
 873:src/xeq.c     **** void setXYZ(const decNumber *x, const decNumber *y, const decNumber *z) {
 874:src/xeq.c     **** 	setXY(x, y);
 875:src/xeq.c     **** 	setZ(z);
 876:src/xeq.c     **** }
 877:src/xeq.c     **** #endif
 878:src/xeq.c     **** 
 879:src/xeq.c     **** void getXYZT(decNumber *x, decNumber *y, decNumber *z, decNumber *t) {
 880:src/xeq.c     **** 	getXYZ(x, y, z);
 881:src/xeq.c     **** 	getT(t);
 882:src/xeq.c     **** }
 883:src/xeq.c     **** 
 884:src/xeq.c     **** void getYZ(decNumber *y, decNumber *z) {
 885:src/xeq.c     **** 	getY(y);
 886:src/xeq.c     **** 	getZ(z);
 887:src/xeq.c     **** }
 888:src/xeq.c     **** 
 889:src/xeq.c     **** void roll_down(enum nilop op) {
 890:src/xeq.c     **** 	REGISTER r;
 891:src/xeq.c     **** 	copyreg(&r, StackBase);
 892:src/xeq.c     **** 	lower();
 893:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 894:src/xeq.c     **** }
 895:src/xeq.c     **** 
 896:src/xeq.c     **** void roll_up(enum nilop op) {
 897:src/xeq.c     **** 	REGISTER r;
 898:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 899:src/xeq.c     **** 	lift();
 900:src/xeq.c     **** 	copyreg(StackBase, &r);
 901:src/xeq.c     **** }
 902:src/xeq.c     **** 
 903:src/xeq.c     **** void cpx_roll_down(enum nilop op) {
 904:src/xeq.c     **** 	roll_down(OP_RDOWN);
 905:src/xeq.c     **** 	roll_down(OP_RDOWN);
 906:src/xeq.c     **** 	set_was_complex();
 907:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 908:src/xeq.c     **** 	CLEAR_POLAR_READY;
 909:src/xeq.c     **** #endif
 910:src/xeq.c     **** }
 911:src/xeq.c     **** 
 912:src/xeq.c     **** void cpx_roll_up(enum nilop op) {
 913:src/xeq.c     **** 	roll_up(OP_RUP);
 914:src/xeq.c     **** 	roll_up(OP_RUP);
 915:src/xeq.c     **** 	set_was_complex();
 916:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 917:src/xeq.c     **** 	CLEAR_POLAR_READY;
 918:src/xeq.c     **** #endif
 919:src/xeq.c     **** }
 920:src/xeq.c     **** 
 921:src/xeq.c     **** void cpx_enter(enum nilop op) {
 922:src/xeq.c     ****   if( (State2.state_lift || (XromRunning || Running)) && ENTRY_RPN_ENABLED ) { // flag is zero if e
ARM GAS  /tmp/cccVhVyH.s 			page 21


 923:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 924:src/xeq.c     ****     lift();
 925:src/xeq.c     ****     lift();
 926:src/xeq.c     ****     copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 927:src/xeq.c     ****     set_was_complex();
 928:src/xeq.c     ****   }
 929:src/xeq.c     ****   else {
 930:src/xeq.c     ****     lift();
 931:src/xeq.c     ****     lift();
 932:src/xeq.c     ****     copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 933:src/xeq.c     ****     set_was_complex();
 934:src/xeq.c     ****   }
 935:src/xeq.c     **** }
 936:src/xeq.c     **** 
 937:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 938:src/xeq.c     **** 
 939:src/xeq.c     **** void convert_regK ( enum trig_modes i ) { // needed to change the displayed angular part in polar m
 940:src/xeq.c     **** 	decNumber k;
 941:src/xeq.c     **** 
 942:src/xeq.c     **** 	enum trig_modes j = get_trig_mode();
 943:src/xeq.c     **** 	if (i==j) return; // no mode change
 944:src/xeq.c     **** 	getRegister(&k, regK_idx);
 945:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 946:src/xeq.c     **** 		case TRIG_DEG:
 947:src/xeq.c     **** 			dn_divide(&k, &k, &const_360);
 948:src/xeq.c     **** 			break;
 949:src/xeq.c     **** 		case TRIG_RAD:
 950:src/xeq.c     **** 			dn_divide(&k, &k, &const_2PI);
 951:src/xeq.c     **** 			break;
 952:src/xeq.c     **** 		case TRIG_GRAD:
 953:src/xeq.c     **** 			dn_divide(&k, &k, &const_400);
 954:src/xeq.c     **** 		default:;
 955:src/xeq.c     **** 	}
 956:src/xeq.c     **** 	switch (i) { // convert to new angular units
 957:src/xeq.c     **** 		case TRIG_DEG:
 958:src/xeq.c     **** 			dn_multiply(&k, &k, &const_360);
 959:src/xeq.c     **** 			break;
 960:src/xeq.c     **** 		case TRIG_RAD:
 961:src/xeq.c     **** 			dn_multiply(&k, &k, &const_2PI);
 962:src/xeq.c     **** 			break;
 963:src/xeq.c     **** 		case TRIG_GRAD:
 964:src/xeq.c     **** 			dn_multiply(&k, &k, &const_400);
 965:src/xeq.c     **** 		default:;
 966:src/xeq.c     **** 	}
 967:src/xeq.c     **** 	setRegister(regK_idx, &k);
 968:src/xeq.c     **** }
 969:src/xeq.c     **** 
 970:src/xeq.c     **** void finish_cpx_entry ( int lift );
 971:src/xeq.c     **** void stack_begin ( int zero_y ); // defined in keys.c - needed so it can be called here
 972:src/xeq.c     **** 
 973:src/xeq.c     **** void cpx_pi (enum nilop op) {
 974:src/xeq.c     **** 	switch (op) {
 975:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 976:src/xeq.c     **** 		if (!REAL_FLAG && !IMAG_FLAG) {
 977:src/xeq.c     **** 			stack_begin( 1 );
 978:src/xeq.c     **** 			SET_REAL;
 979:src/xeq.c     **** 		}
ARM GAS  /tmp/cccVhVyH.s 			page 22


 980:src/xeq.c     **** 		copyreg(StackBase, get_const(OP_PI, is_dblmode()));
 981:src/xeq.c     **** 		break;
 982:src/xeq.c     **** 	case OP_PIB: // command line present - multiplies contents by pi
 983:src/xeq.c     **** 		State2.state_lift = 0;
 984:src/xeq.c     **** 		process_cmdline();
 985:src/xeq.c     **** 		State2.state_lift = 0;
 986:src/xeq.c     **** 		{
 987:src/xeq.c     **** 			decNumber r;
 988:src/xeq.c     **** 			getX(&r);
 989:src/xeq.c     **** 			dn_multiply (&r, &const_PI, &r);
 990:src/xeq.c     **** 			setX(&r);
 991:src/xeq.c     **** 		}
 992:src/xeq.c     **** 	default:;
 993:src/xeq.c     **** 	}
 994:src/xeq.c     **** 	CLEAR_POLAR_READY;
 995:src/xeq.c     **** }
 996:src/xeq.c     **** 
 997:src/xeq.c     **** #ifdef ENTRY_RPN
 998:src/xeq.c     **** void entry_rpn_on_off(enum nilop op) { // turn entry_rpn on/off
 999:src/xeq.c     ****   switch (op) {
1000:src/xeq.c     ****   case OP_ENTRY_ON:
1001:src/xeq.c     ****     ENTRY_RPN_ON;
1002:src/xeq.c     ****     return;
1003:src/xeq.c     ****   case OP_ENTRY_OFF:
1004:src/xeq.c     ****     ENTRY_RPN_OFF;
1005:src/xeq.c     ****     return;
1006:src/xeq.c     ****   default:;
1007:src/xeq.c     ****   }
1008:src/xeq.c     **** }
1009:src/xeq.c     **** #endif
1010:src/xeq.c     **** 
1011:src/xeq.c     **** void cpx_nop(enum nilop op) { // miscellaneous complex operations
1012:src/xeq.c     ****   reset_shift();
1013:src/xeq.c     **** 	switch (op) {
1014:src/xeq.c     **** 	case OP_CYES: // set flag to allow complex mode to be entered - can be called at any time
1015:src/xeq.c     **** 	        SET_CPX_YES;
1016:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
1017:src/xeq.c     **** 		CLEAR_IMAG;
1018:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
1019:src/xeq.c     **** 		return;
1020:src/xeq.c     **** 	case OP_C_ON: // start complex mode - only called if CPX_ENABLED and C_LOCK_OFF
1021:src/xeq.c     **** 		if (UState.stack_depth) { // save prior stack size 
1022:src/xeq.c     **** 			INIT_8;
1023:src/xeq.c     **** 		}
1024:src/xeq.c     **** 		else {
1025:src/xeq.c     **** 			INIT_4;
1026:src/xeq.c     **** 		}
1027:src/xeq.c     **** 		LOCK_C;
1028:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
1029:src/xeq.c     **** #ifdef DM42
1030:src/xeq.c     **** 		set_menu(M_C_Lock);
1031:src/xeq.c     **** 		display_current_menu();
1032:src/xeq.c     **** #endif
1033:src/xeq.c     **** 		break;
1034:src/xeq.c     **** 	case OP_CNO: // reset flag so that complex mode cannot be entered
1035:src/xeq.c     **** 		if (!C_LOCKED) { 
1036:src/xeq.c     **** 			SET_CPX_NO;
ARM GAS  /tmp/cccVhVyH.s 			page 23


1037:src/xeq.c     **** 			UNLOCK_C; //just in case
1038:src/xeq.c     **** 			return;
1039:src/xeq.c     **** 		}
1040:src/xeq.c     **** 		SET_CPX_NO;
1041:src/xeq.c     **** 	case OP_C_OFF: // exit complex mode - only called if CPX_ENABLED and C_LOCK_ON
1042:src/xeq.c     **** 		finish_cpx_entry(1);
1043:src/xeq.c     **** #ifdef DM42
1044:src/xeq.c     **** 		dot(LIT_EQ,0); // turn off C_LK before turning off C_LOCKED
1045:src/xeq.c     **** #endif
1046:src/xeq.c     **** 		UNLOCK_C;
1047:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
1048:src/xeq.c     **** 		State2.wascomplex = 0;
1049:src/xeq.c     **** #ifdef DM42
1050:src/xeq.c     **** 		set_default_menu();
1051:src/xeq.c     **** 		display_current_menu();
1052:src/xeq.c     **** #endif
1053:src/xeq.c     **** 		return;
1054:src/xeq.c     **** 	case OP_C_MIM: // change sign of imaginary part
1055:src/xeq.c     **** 		{
1056:src/xeq.c     **** 		decNumber y;
1057:src/xeq.c     **** 		getY(&y);
1058:src/xeq.c     **** 		dn_minus(&y, &y);
1059:src/xeq.c     **** 		setY(&y);
1060:src/xeq.c     **** 		}
1061:src/xeq.c     **** 		break;
1062:src/xeq.c     **** 	case OP_C_MRE: // change sign of real part
1063:src/xeq.c     **** 		{
1064:src/xeq.c     **** 		decNumber x;
1065:src/xeq.c     **** 		getX(&x);
1066:src/xeq.c     **** 		dn_minus(&x, &x);
1067:src/xeq.c     **** 		setX(&x);
1068:src/xeq.c     **** 		}
1069:src/xeq.c     **** 		break;
1070:src/xeq.c     **** 	case OP_C_IM: // zero real part
1071:src/xeq.c     **** 		zero_X();
1072:src/xeq.c     **** 		break;
1073:src/xeq.c     **** 	case OP_C_RE: // zero imag part
1074:src/xeq.c     **** 		zero_Y();
1075:src/xeq.c     **** 		break;
1076:src/xeq.c     **** 	case OP_CPXI: // use i to display complex numbers
1077:src/xeq.c     **** 		SET_CPX_I;
1078:src/xeq.c     **** 		break;
1079:src/xeq.c     **** 	case OP_CPXJ: // use j to display complex numbers
1080:src/xeq.c     **** 		SET_CPX_J;
1081:src/xeq.c     **** 		break;
1082:src/xeq.c     **** 	default:;
1083:src/xeq.c     **** 	}
1084:src/xeq.c     **** 	set_was_complex();
1085:src/xeq.c     **** 	CLEAR_POLAR_READY;
1086:src/xeq.c     **** }
1087:src/xeq.c     **** #endif
1088:src/xeq.c     **** 
1089:src/xeq.c     **** void cpx_fill(enum nilop op) {
1090:src/xeq.c     **** 	const int n = stack_size();
1091:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
1092:src/xeq.c     **** 	int i;
1093:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 24


1094:src/xeq.c     **** 	for (i=2; i<n; i++)
1095:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
1096:src/xeq.c     **** 	set_was_complex();
1097:src/xeq.c     **** }
1098:src/xeq.c     **** 
1099:src/xeq.c     **** void fill(enum nilop op) {
1100:src/xeq.c     **** 	const int n = stack_size();
1101:src/xeq.c     **** 	int i;
1102:src/xeq.c     **** 
1103:src/xeq.c     **** 	for (i=1; i<n; i++)
1104:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
1105:src/xeq.c     **** }
1106:src/xeq.c     **** 
1107:src/xeq.c     **** void drop(enum nilop op) {
1108:src/xeq.c     **** 	if (op == OP_DROPXY) {
1109:src/xeq.c     **** 		lower2();
1110:src/xeq.c     **** 		set_was_complex();
1111:src/xeq.c     **** 	} else
1112:src/xeq.c     **** 		lower();
1113:src/xeq.c     **** }
1114:src/xeq.c     **** 
1115:src/xeq.c     **** #ifndef is_intmode
1116:src/xeq.c     **** int is_intmode(void) {
1117:src/xeq.c     **** 	return UState.intm;
1118:src/xeq.c     **** }
1119:src/xeq.c     **** #endif
1120:src/xeq.c     **** 
1121:src/xeq.c     **** int is_dblmode(void) {
1122:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
1123:src/xeq.c     **** }
1124:src/xeq.c     **** 
1125:src/xeq.c     **** int is_usrdblmode(void) {
1126:src/xeq.c     **** 	if (XromFlags.xIN)
1127:src/xeq.c     **** 		return XromFlags.mode_double;
1128:src/xeq.c     **** 	return is_dblmode();
1129:src/xeq.c     **** }
1130:src/xeq.c     **** 
1131:src/xeq.c     **** /* Convert a possibly signed string to an integer
1132:src/xeq.c     ****  */
1133:src/xeq.c     **** int s_to_i(const char *s) {
1134:src/xeq.c     **** 	int x = 0;
1135:src/xeq.c     **** 	int neg;
1136:src/xeq.c     **** 
1137:src/xeq.c     **** 	if (*s == '-') {
1138:src/xeq.c     **** 		s++;
1139:src/xeq.c     **** 		neg = 1;
1140:src/xeq.c     **** 	} else {
1141:src/xeq.c     **** 		if (*s == '+')
1142:src/xeq.c     **** 			s++;
1143:src/xeq.c     **** 		neg = 0;
1144:src/xeq.c     **** 	}
1145:src/xeq.c     **** 
1146:src/xeq.c     **** 	for (;;) {
1147:src/xeq.c     **** 		const char c = *s++;
1148:src/xeq.c     **** 
1149:src/xeq.c     **** 		if (c < '0' || c > '9')
1150:src/xeq.c     **** 			break;
ARM GAS  /tmp/cccVhVyH.s 			page 25


1151:src/xeq.c     **** 		x = 10 * x + (c - '0');
1152:src/xeq.c     **** 	}
1153:src/xeq.c     **** 	if (neg)
1154:src/xeq.c     **** 		return -x;
1155:src/xeq.c     **** 	return x;
1156:src/xeq.c     **** }
1157:src/xeq.c     **** 
1158:src/xeq.c     **** /* Convert a string in the given base to an unsigned integer
1159:src/xeq.c     ****  */
1160:src/xeq.c     **** unsigned long long int s_to_ull(const char *s, unsigned int base) {
1161:src/xeq.c     **** 	unsigned long long int x = 0;
1162:src/xeq.c     **** 
1163:src/xeq.c     **** 	for (;;) {
1164:src/xeq.c     **** 		unsigned int n;
1165:src/xeq.c     **** 		const char c = *s++;
1166:src/xeq.c     **** 
1167:src/xeq.c     **** 		if (c >= '0' && c <= '9')
1168:src/xeq.c     **** 			n = c - '0';
1169:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
1170:src/xeq.c     **** 			n = c - 'A' + 10;
1171:src/xeq.c     **** 		else
1172:src/xeq.c     **** 			break;
1173:src/xeq.c     **** 		if (n >= base)
1174:src/xeq.c     **** 			break;
1175:src/xeq.c     **** 		x = x * base + n;
1176:src/xeq.c     **** 	}
1177:src/xeq.c     **** 	return x;
1178:src/xeq.c     **** }
1179:src/xeq.c     **** 
1180:src/xeq.c     **** const char *get_cmdline(void) {
1181:src/xeq.c     **** 	if (CmdLineLength) {
1182:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
1183:src/xeq.c     **** 		return Cmdline;
1184:src/xeq.c     **** 	}
1185:src/xeq.c     **** 	return NULL;
1186:src/xeq.c     **** }
1187:src/xeq.c     **** 
1188:src/xeq.c     **** #if 0
1189:src/xeq.c     **** static int fract_convert_number(decNumber *x, const char *s) {
1190:src/xeq.c     **** 	if (*s == '\0') {
1191:src/xeq.c     **** 		report_err(ERR_DOMAIN);
1192:src/xeq.c     **** 		return 1;
1193:src/xeq.c     **** 	}
1194:src/xeq.c     **** 	decNumberFromString(x, s, &Ctx);
1195:src/xeq.c     **** 	return check_special(x);
1196:src/xeq.c     **** }
1197:src/xeq.c     **** #endif
1198:src/xeq.c     **** 
1199:src/xeq.c     **** /* Return 1 if the command line contains an error and also set an appropriate
1200:src/xeq.c     ****  * error message.
1201:src/xeq.c     ****  */
1202:src/xeq.c     **** int is_bad_cmdline(void)
1203:src/xeq.c     **** {
1204:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
1205:src/xeq.c     **** 	if (CmdLineDot == 2) {
1206:src/xeq.c     **** 		char *p;
1207:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 26


1208:src/xeq.c     **** 		// Check if there's a non-zero digit after the last decimal mark
1209:src/xeq.c     **** 		p = Cmdline + CmdLineLength;
1210:src/xeq.c     **** 		for (;;) {
1211:src/xeq.c     **** 			p--;
1212:src/xeq.c     **** 			if (*p >= '1' && *p <= '9')
1213:src/xeq.c     **** 				return 0;
1214:src/xeq.c     **** 			if (*p == '.')
1215:src/xeq.c     **** 				break;
1216:src/xeq.c     **** 		}
1217:src/xeq.c     **** 
1218:src/xeq.c     **** 		reset_shift();
1219:src/xeq.c     **** 		error_message(ERR_DOMAIN);
1220:src/xeq.c     **** 		State2.invalid_disp = 1;
1221:src/xeq.c     **** 		return 1;
1222:src/xeq.c     **** 	}
1223:src/xeq.c     **** #endif
1224:src/xeq.c     **** 	return 0;
1225:src/xeq.c     **** }
1226:src/xeq.c     **** 
1227:src/xeq.c     **** /* Process the command line if any
1228:src/xeq.c     ****  */
1229:src/xeq.c     **** void process_cmdline(void) {
1230:src/xeq.c     **** 	decNumber a, b, x, t;
1231:src/xeq.c     **** 
1232:src/xeq.c     **** 	if (CmdLineLength) {
1233:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
1234:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
1235:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1236:src/xeq.c     **** 		char cmdline[CMDLINELEN + 2];
1237:src/xeq.c     **** #else
1238:src/xeq.c     **** 		char cmdline[CMDLINELEN + 1];
1239:src/xeq.c     **** #endif
1240:src/xeq.c     **** 
1241:src/xeq.c     **** 		xcopy(cmdline, Cmdline, CMDLINELEN + 1);
1242:src/xeq.c     **** 
1243:src/xeq.c     **** 		cmdline[CmdLineLength] = '\0';
1244:src/xeq.c     **** 		if (!is_intmode()) {
1245:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1246:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E' || cmdline[CmdLineLength-1] == 'D')
1247:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1248:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
1249:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
1250:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
1251:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
1252:src/xeq.c     **** 			}
1253:src/xeq.c     **** #else
1254:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E')
1255:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1256:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
1257:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
1258:src/xeq.c     **** #endif
1259:src/xeq.c     **** 			if (0
1260:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
1261:src/xeq.c     **** 			    || CmdLineEex
1262:src/xeq.c     **** #endif
1263:src/xeq.c     **** #if FRACTION_MODE_INPUT & 4
1264:src/xeq.c     **** 			    || cmdlinedot == 1
ARM GAS  /tmp/cccVhVyH.s 			page 27


1265:src/xeq.c     **** #endif
1266:src/xeq.c     **** 			   )
1267:src/xeq.c     **** 				UState.fract = 0;
1268:src/xeq.c     **** 		}
1269:src/xeq.c     **** 		CmdLineLength = 0;
1270:src/xeq.c     **** 		lift_if_enabled();
1271:src/xeq.c     **** 		set_lift();
1272:src/xeq.c     **** 		CmdLineDot = 0;
1273:src/xeq.c     **** 		CmdLineEex = 0;
1274:src/xeq.c     **** 		if (is_intmode()) {
1275:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
1276:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
1277:src/xeq.c     **** 			setX_int_sgn(x, sgn);
1278:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
1279:src/xeq.c     **** 			char *d0, *d1, *d2;
1280:src/xeq.c     **** 			int neg;
1281:src/xeq.c     **** 
1282:src/xeq.c     **** 			if (bad_cmdline)
1283:src/xeq.c     **** 				return;
1284:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 8)
1285:src/xeq.c     **** 			UState.fract = 1;
1286:src/xeq.c     **** #endif
1287:src/xeq.c     **** 			if (cmdline[0] == '-') {
1288:src/xeq.c     **** 				neg = 1;
1289:src/xeq.c     **** 				d0 = cmdline+1;
1290:src/xeq.c     **** 			} else {
1291:src/xeq.c     **** 				neg = 0;
1292:src/xeq.c     **** 				d0 = cmdline;
1293:src/xeq.c     **** 			}
1294:src/xeq.c     **** 			d1 = find_char(d0, '.');
1295:src/xeq.c     **** 			*d1++ = '\0';
1296:src/xeq.c     **** 			d2 = find_char(d1, '.');
1297:src/xeq.c     **** 			*d2++ = '\0';
1298:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
1299:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
1300:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1301:src/xeq.c     **** 			if (d2 == d1+1) { // ND change starts here; if dots are adjacent...
1302:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
1303:src/xeq.c     **** 				decNumberZero(&x); // and zero x
1304:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
1305:src/xeq.c     **** 				UState.improperfrac = 1;
1306:src/xeq.c     **** #endif
1307:src/xeq.c     **** 			}
1308:src/xeq.c     **** 			else
1309:src/xeq.c     **** #endif
1310:src/xeq.c     **** 			{
1311:src/xeq.c     **** 				decNumberFromString(&a, d1, &Ctx);
1312:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1313:src/xeq.c     **** 				UState.improperfrac = 0;
1314:src/xeq.c     **** #endif
1315:src/xeq.c     **** 			}
1316:src/xeq.c     **** 			dn_divide(&t, &a, &b);
1317:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
1318:src/xeq.c     **** 			if (!decNumberIsSpecial(&t))
1319:src/xeq.c     **** #endif
1320:src/xeq.c     **** 				dn_add(&x, &x, &t);
1321:src/xeq.c     **** 			if (neg)
ARM GAS  /tmp/cccVhVyH.s 			page 28


1322:src/xeq.c     **** 				dn_minus(&x, &x);
1323:src/xeq.c     **** 			setX(&x);
1324:src/xeq.c     **** 		} else {
1325:src/xeq.c     **** 			decNumberFromString(&x, cmdline, &Ctx);
1326:src/xeq.c     **** 			setX(&x);
1327:src/xeq.c     **** 		}
1328:src/xeq.c     **** 		set_entry();
1329:src/xeq.c     **** #ifndef DM42
1330:src/xeq.c     **** 		print_trace( TRACE_DATA_ENTRY, 1 );
1331:src/xeq.c     **** #endif
1332:src/xeq.c     **** 	}
1333:src/xeq.c     **** }
1334:src/xeq.c     **** 
1335:src/xeq.c     **** void process_cmdline_set_lift(void) {
1336:src/xeq.c     **** 	process_cmdline();
1337:src/xeq.c     **** 	set_lift();
1338:src/xeq.c     **** }
1339:src/xeq.c     **** 
1340:src/xeq.c     **** 
1341:src/xeq.c     **** /*
1342:src/xeq.c     ****  *  Return a pointer to a numbered register.
1343:src/xeq.c     ****  *  If locals are enabled and a non existent local register
1344:src/xeq.c     ****  *  is accessed, the respective global register is returned.
1345:src/xeq.c     ****  *  Error checking must be done outside this routine.
1346:src/xeq.c     ****  *  We force the beginning of the local registers on an even stack position.
1347:src/xeq.c     ****  *  This ensures 32 bit alignment of the decima64 object.
1348:src/xeq.c     ****  */
1349:src/xeq.c     **** /*
1350:src/xeq.c     ****  *  If working in double precision, register numbers must be remapped
1351:src/xeq.c     ****  */
1352:src/xeq.c     **** static decimal64 *reg_address(int n, decimal64 *const regs, decimal64 *const named_regs) {
 182              		.loc 1 1352 90 is_stmt 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
1353:src/xeq.c     **** 	const int dbl = is_dblmode();
 187              		.loc 1 1353 2 view .LVU58
 188              	.LBB1350:
 189              	.LBI1350:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 190              		.loc 1 1121 5 view .LVU59
 191              	.LBB1351:
1122:src/xeq.c     **** }
 192              		.loc 1 1122 2 view .LVU60
1122:src/xeq.c     **** }
 193              		.loc 1 1122 24 is_stmt 0 view .LVU61
 194 0000 154B     		ldr	r3, .L25
 195 0002 1B68     		ldr	r3, [r3]
 196              	.LBE1351:
 197              	.LBE1350:
1352:src/xeq.c     **** 	const int dbl = is_dblmode();
 198              		.loc 1 1352 90 view .LVU62
 199 0004 10B4     		push	{r4}
 200              		.cfi_def_cfa_offset 4
 201              		.cfi_offset 4, -4
 202              	.LBB1354:
ARM GAS  /tmp/cccVhVyH.s 			page 29


 203              	.LBB1352:
1122:src/xeq.c     **** }
 204              		.loc 1 1122 24 view .LVU63
 205 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 206              	.LBE1352:
 207              	.LBE1354:
1354:src/xeq.c     **** 
1355:src/xeq.c     **** 	if (n < regX_idx)
 208              		.loc 1 1355 5 view .LVU64
 209 000a 6328     		cmp	r0, #99
 210              	.LBB1355:
 211              	.LBB1353:
1122:src/xeq.c     **** }
 212              		.loc 1 1122 24 view .LVU65
 213 000c 44F20103 		movw	r3, #16385
 214 0010 03EA0403 		and	r3, r3, r4
 215              	.LVL17:
1122:src/xeq.c     **** }
 216              		.loc 1 1122 24 view .LVU66
 217              	.LBE1353:
 218              	.LBE1355:
 219              		.loc 1 1355 2 is_stmt 1 view .LVU67
 220              		.loc 1 1355 5 is_stmt 0 view .LVU68
 221 0014 10DD     		ble	.L23
1356:src/xeq.c     **** 		return regs + n + (dbl ? n : 0);
1357:src/xeq.c     **** 
1358:src/xeq.c     **** 	n -= regX_idx;
 222              		.loc 1 1358 2 is_stmt 1 view .LVU69
1359:src/xeq.c     **** 	// Lettered register
1360:src/xeq.c     **** 	if (XromFlags.xIN)
 223              		.loc 1 1360 6 is_stmt 0 view .LVU70
 224 0016 1149     		ldr	r1, .L25+4
 225              	.LVL18:
 226              		.loc 1 1360 5 view .LVU71
 227 0018 91F90140 		ldrsb	r4, [r1, #1]
 228 001c 002C     		cmp	r4, #0
1358:src/xeq.c     **** 	// Lettered register
 229              		.loc 1 1358 4 view .LVU72
 230 001e A0F16401 		sub	r1, r0, #100
 231              	.LVL19:
 232              		.loc 1 1360 2 is_stmt 1 view .LVU73
 233              		.loc 1 1360 5 is_stmt 0 view .LVU74
 234 0022 13DB     		blt	.L24
1361:src/xeq.c     **** 		return (decimal64 *) (XromStack + n);
1362:src/xeq.c     **** 	if (dbl)
 235              		.loc 1 1362 2 is_stmt 1 view .LVU75
 236              		.loc 1 1362 5 is_stmt 0 view .LVU76
 237 0024 B3F5804F 		cmp	r3, #16384
1363:src/xeq.c     **** 		n = (n << 1) - STACK_SIZE - EXTRA_REG;
 238              		.loc 1 1363 3 is_stmt 1 view .LVU77
 239              		.loc 1 1363 10 is_stmt 0 view .LVU78
 240 0028 04BF     		itt	eq
 241 002a 4900     		lsleq	r1, r1, #1
 242              	.LVL20:
 243              		.loc 1 1363 5 view .LVU79
 244 002c 0C39     		subeq	r1, r1, #12
 245              	.LVL21:
ARM GAS  /tmp/cccVhVyH.s 			page 30


1364:src/xeq.c     **** 	return named_regs + n;
 246              		.loc 1 1364 2 is_stmt 1 view .LVU80
 247              		.loc 1 1364 20 is_stmt 0 view .LVU81
 248 002e 02EBC100 		add	r0, r2, r1, lsl #3
1365:src/xeq.c     **** }
 249              		.loc 1 1365 1 view .LVU82
 250 0032 5DF8044B 		ldr	r4, [sp], #4
 251              		.cfi_remember_state
 252              		.cfi_restore 4
 253              		.cfi_def_cfa_offset 0
 254 0036 7047     		bx	lr
 255              	.LVL22:
 256              	.L23:
 257              		.cfi_restore_state
1356:src/xeq.c     **** 
 258              		.loc 1 1356 3 is_stmt 1 view .LVU83
1356:src/xeq.c     **** 
 259              		.loc 1 1356 19 is_stmt 0 view .LVU84
 260 0038 B3F5804F 		cmp	r3, #16384
1356:src/xeq.c     **** 
 261              		.loc 1 1356 15 view .LVU85
 262 003c 4FEAC002 		lsl	r2, r0, #3
 263              	.LVL23:
1356:src/xeq.c     **** 
 264              		.loc 1 1356 15 view .LVU86
 265 0040 08BF     		it	eq
 266 0042 0201     		lsleq	r2, r0, #4
1356:src/xeq.c     **** 
 267              		.loc 1 1356 19 view .LVU87
 268 0044 8818     		adds	r0, r1, r2
 269              	.LVL24:
 270              		.loc 1 1365 1 view .LVU88
 271 0046 5DF8044B 		ldr	r4, [sp], #4
 272              		.cfi_remember_state
 273              		.cfi_restore 4
 274              		.cfi_def_cfa_offset 0
 275 004a 7047     		bx	lr
 276              	.LVL25:
 277              	.L24:
 278              		.cfi_restore_state
1361:src/xeq.c     **** 	if (dbl)
 279              		.loc 1 1361 3 is_stmt 1 view .LVU89
1361:src/xeq.c     **** 	if (dbl)
 280              		.loc 1 1361 10 is_stmt 0 view .LVU90
 281 004c 0448     		ldr	r0, .L25+8
 282              		.loc 1 1365 1 view .LVU91
 283 004e 5DF8044B 		ldr	r4, [sp], #4
 284              		.cfi_restore 4
 285              		.cfi_def_cfa_offset 0
1361:src/xeq.c     **** 	if (dbl)
 286              		.loc 1 1361 10 view .LVU92
 287 0052 00EB0110 		add	r0, r0, r1, lsl #4
 288              		.loc 1 1365 1 view .LVU93
 289 0056 7047     		bx	lr
 290              	.L26:
 291              		.align	2
 292              	.L25:
ARM GAS  /tmp/cccVhVyH.s 			page 31


 293 0058 00000000 		.word	main_ram
 294 005c 00000000 		.word	XromParams
 295 0060 00000000 		.word	XromLocal
 296              		.cfi_endproc
 297              	.LFE90:
 299              		.section	.text.retstk_up,"ax",%progbits
 300              		.align	1
 301              		.p2align 2,,3
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	retstk_up:
 308              	.LFB150:
1366:src/xeq.c     **** 
1367:src/xeq.c     **** REGISTER *get_reg_n(int n) {
1368:src/xeq.c     **** 	const int dbl = is_dblmode();
1369:src/xeq.c     **** 
1370:src/xeq.c     **** 	if (n >= CONST_REG_BASE) {
1371:src/xeq.c     **** 		n -= CONST_REG_BASE;
1372:src/xeq.c     **** 		return get_const(n, dbl);
1373:src/xeq.c     **** 	}
1374:src/xeq.c     **** 	if (n >= FLASH_REG_BASE)
1375:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
1376:src/xeq.c     **** 
1377:src/xeq.c     **** 	if (n >= LOCAL_REG_BASE && local_regs() > 0) {
1378:src/xeq.c     **** 		// local register on the return stack
1379:src/xeq.c     **** 		n -= LOCAL_REG_BASE;
1380:src/xeq.c     **** 		if (dbl)
1381:src/xeq.c     **** 			n <<= 1;
1382:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
1383:src/xeq.c     **** 	}
1384:src/xeq.c     **** 	return (REGISTER *) reg_address(n, Regs + TOPREALREG - NumRegs, Regs + regX_idx);
1385:src/xeq.c     **** }
1386:src/xeq.c     **** 
1387:src/xeq.c     **** 
1388:src/xeq.c     **** REGISTER *get_flash_reg_n(int n) {
1389:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
1390:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
1391:src/xeq.c     **** }
1392:src/xeq.c     **** 
1393:src/xeq.c     **** 
1394:src/xeq.c     **** /*
1395:src/xeq.c     ****  *  Get a constatnt by index and mode
1396:src/xeq.c     ****  *  In case of a conversion, a private copy is returned
1397:src/xeq.c     ****  */
1398:src/xeq.c     **** REGISTER *get_const(int index, int dbl)
1399:src/xeq.c     **** {
1400:src/xeq.c     **** 	static REGISTER result;
1401:src/xeq.c     **** 	const int i = cnsts[index].index;
1402:src/xeq.c     **** 	if (dbl) {
1403:src/xeq.c     **** 		if (i <= 1 || i >= 128)
1404:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
1405:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
1406:src/xeq.c     **** 	}
1407:src/xeq.c     **** 	else {
1408:src/xeq.c     **** 		if (i < 128)
ARM GAS  /tmp/cccVhVyH.s 			page 32


1409:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
1410:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
1411:src/xeq.c     **** 	}
1412:src/xeq.c     **** 	return &result;
1413:src/xeq.c     **** }
1414:src/xeq.c     **** 
1415:src/xeq.c     **** 
1416:src/xeq.c     **** /*  Some conversion routines to take decimals and produce integers
1417:src/xeq.c     ****  *  This is for opaque storage, no conversion takes place.
1418:src/xeq.c     ****  */
1419:src/xeq.c     **** long long int get_reg_n_int(int index) {
1420:src/xeq.c     **** 	long long int ll;
1421:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
1422:src/xeq.c     **** 	return ll;
1423:src/xeq.c     **** }
1424:src/xeq.c     **** 
1425:src/xeq.c     **** void set_reg_n_int(int index, long long int ll) {
1426:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
1427:src/xeq.c     **** }
1428:src/xeq.c     **** 
1429:src/xeq.c     **** /* Get an integer from a register
1430:src/xeq.c     ****  */
1431:src/xeq.c     **** unsigned long long int get_reg_n_int_sgn(int index, int *sgn) {
1432:src/xeq.c     **** 	if (is_intmode()) {
1433:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
1434:src/xeq.c     **** 	} else {
1435:src/xeq.c     **** 		decNumber n;
1436:src/xeq.c     **** 
1437:src/xeq.c     **** 		getRegister(&n, index);
1438:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
1439:src/xeq.c     **** 	}
1440:src/xeq.c     **** }
1441:src/xeq.c     **** 
1442:src/xeq.c     **** 
1443:src/xeq.c     **** /* Get an integer from X
1444:src/xeq.c     ****  */
1445:src/xeq.c     **** long long int getX_int(void) {
1446:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
1447:src/xeq.c     **** }
1448:src/xeq.c     **** 
1449:src/xeq.c     **** unsigned long long int getX_int_sgn(int *sgn) {
1450:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
1451:src/xeq.c     **** }
1452:src/xeq.c     **** 
1453:src/xeq.c     **** /*
1454:src/xeq.c     ****  *  Forced conversion from real to intger
1455:src/xeq.c     ****  *  Leaves integer mode active on return!
1456:src/xeq.c     ****  */
1457:src/xeq.c     **** static void int_from_register(int out, int in) {
1458:src/xeq.c     **** 	int sgn;
1459:src/xeq.c     **** 	unsigned long long int val;
1460:src/xeq.c     **** 	
1461:src/xeq.c     **** 	UState.intm = 0;	// Force real mode access
1462:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1463:src/xeq.c     **** 
1464:src/xeq.c     **** 	UState.intm = 1;	// Force integer access
1465:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
ARM GAS  /tmp/cccVhVyH.s 			page 33


1466:src/xeq.c     **** }
1467:src/xeq.c     **** 
1468:src/xeq.c     **** /* Put an integer into a register
1469:src/xeq.c     ****  */
1470:src/xeq.c     **** void set_reg_n_int_sgn(int index, unsigned long long int val, int sgn) {
1471:src/xeq.c     **** 	if (is_intmode()) {
1472:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
1473:src/xeq.c     **** 	} else {
1474:src/xeq.c     **** 		decNumber t;
1475:src/xeq.c     **** 
1476:src/xeq.c     **** 		ullint_to_dn(&t, val);
1477:src/xeq.c     **** 		if (sgn)
1478:src/xeq.c     **** 			dn_minus(&t, &t);
1479:src/xeq.c     **** 		setRegister(index, &t);
1480:src/xeq.c     **** 	}
1481:src/xeq.c     **** }
1482:src/xeq.c     **** 
1483:src/xeq.c     **** /* 
1484:src/xeq.c     ****  *  Forced conversion from integer to register format.
1485:src/xeq.c     ****  *  Leaves integer mode off after conversion.
1486:src/xeq.c     ****  *  Destination may be in XROM register space
1487:src/xeq.c     ****  */
1488:src/xeq.c     **** static void register_from_int(int out, int in, int called_from_xin) {
1489:src/xeq.c     **** 	int sgn;
1490:src/xeq.c     **** 	unsigned long long int val;
1491:src/xeq.c     **** 	const int xin = XromFlags.xIN;
1492:src/xeq.c     **** 	
1493:src/xeq.c     **** 	if (called_from_xin)
1494:src/xeq.c     **** 		XromFlags.xIN = 0;
1495:src/xeq.c     **** 	UState.intm = 1;
1496:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1497:src/xeq.c     **** 
1498:src/xeq.c     **** 	XromFlags.xIN = xin;
1499:src/xeq.c     **** 	UState.intm = 0;
1500:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1501:src/xeq.c     **** }
1502:src/xeq.c     **** 
1503:src/xeq.c     **** 
1504:src/xeq.c     **** /* Put an integer into X
1505:src/xeq.c     ****  * Integer registers are always single precision!
1506:src/xeq.c     ****  */
1507:src/xeq.c     **** void setX_int(long long int val) {
1508:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
1509:src/xeq.c     **** }
1510:src/xeq.c     **** 
1511:src/xeq.c     **** 
1512:src/xeq.c     **** void setX_int_sgn(unsigned long long int val, int sgn) {
1513:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
1514:src/xeq.c     **** }
1515:src/xeq.c     **** 
1516:src/xeq.c     **** 
1517:src/xeq.c     **** 
1518:src/xeq.c     **** /*
1519:src/xeq.c     ****  *  Set the register value explicitely
1520:src/xeq.c     ****  */
1521:src/xeq.c     **** void zero_regs(REGISTER *dest, int n) {
1522:src/xeq.c     **** #if 0
ARM GAS  /tmp/cccVhVyH.s 			page 34


1523:src/xeq.c     **** 	if (is_intmode())
1524:src/xeq.c     **** 		xset(dest, 0, n << 3);
1525:src/xeq.c     **** 	else {
1526:src/xeq.c     **** 		REGISTER *const zero = get_reg_n(CONST_REG_BASE + OP_ZERO);
1527:src/xeq.c     **** 		const int reg_size = is_dblmode() ? sizeof(decimal128) : sizeof(decimal64);
1528:src/xeq.c     **** 		char *d = (char *) dest;
1529:src/xeq.c     **** 		int i;
1530:src/xeq.c     **** 		for (i = 0; i < n; ++i, d += reg_size)
1531:src/xeq.c     **** 			copyreg((REGISTER *) d, zero);
1532:src/xeq.c     **** 	}
1533:src/xeq.c     **** #else
1534:src/xeq.c     **** 	// This works for all modes
1535:src/xeq.c     **** 	// no it doesn't -- it leaves varying values of zero around
1536:src/xeq.c     **** 	xset(dest, 0, n << (3 + is_dblmode()));
1537:src/xeq.c     **** #endif
1538:src/xeq.c     **** }
1539:src/xeq.c     **** 
1540:src/xeq.c     **** void move_regs(REGISTER *dest, REGISTER *src, int n) {
1541:src/xeq.c     **** 	if (is_dblmode())
1542:src/xeq.c     **** 		n <<= 1;
1543:src/xeq.c     **** 	xcopy(dest, src, n << 3);
1544:src/xeq.c     **** }
1545:src/xeq.c     **** 
1546:src/xeq.c     **** 
1547:src/xeq.c     **** /* Zero a register
1548:src/xeq.c     ****  */
1549:src/xeq.c     **** static void set_zero(REGISTER *x) {
1550:src/xeq.c     **** 	zero_regs(x, 1);
1551:src/xeq.c     **** }
1552:src/xeq.c     **** 
1553:src/xeq.c     **** void zero_X(void) {
1554:src/xeq.c     **** 	set_zero(StackBase);
1555:src/xeq.c     **** }
1556:src/xeq.c     **** 
1557:src/xeq.c     **** void zero_Y(void) {
1558:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
1559:src/xeq.c     **** }
1560:src/xeq.c     **** 
1561:src/xeq.c     **** void clrx(enum nilop op) {
1562:src/xeq.c     **** 	zero_X();
1563:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1564:src/xeq.c     **** 	if (C_LOCKED) {
1565:src/xeq.c     **** 		zero_Y();
1566:src/xeq.c     **** 		if (POLAR_DISPLAY) {
1567:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
1568:src/xeq.c     **** 			set_zero(get_reg_n(regK_idx));
1569:src/xeq.c     **** 		}
1570:src/xeq.c     **** 		CLEAR_REAL;
1571:src/xeq.c     **** 		CLEAR_IMAG;
1572:src/xeq.c     **** 	}
1573:src/xeq.c     **** #endif
1574:src/xeq.c     **** 	clr_lift();
1575:src/xeq.c     **** }
1576:src/xeq.c     **** 
1577:src/xeq.c     **** /* Zero out the stack
1578:src/xeq.c     ****  */
1579:src/xeq.c     **** void clrstk(enum nilop op) {
ARM GAS  /tmp/cccVhVyH.s 			page 35


1580:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
1581:src/xeq.c     **** 	set_lift();
1582:src/xeq.c     **** }
1583:src/xeq.c     **** 
1584:src/xeq.c     **** 
1585:src/xeq.c     **** /* Zero out all registers excluding the stack and lastx
1586:src/xeq.c     ****  */	
1587:src/xeq.c     **** void clrreg(enum nilop op) {
1588:src/xeq.c     **** 	const int local = local_regs();
1589:src/xeq.c     **** 	process_cmdline_set_lift();
1590:src/xeq.c     **** 
1591:src/xeq.c     **** 	// erase register memory
1592:src/xeq.c     **** 	zero_regs(get_reg_n(0), global_regs());
1593:src/xeq.c     **** 
1594:src/xeq.c     **** 	// Clear A, B, C & D if they aren't part of the stack
1595:src/xeq.c     **** 	if (stack_size() != 8)
1596:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
1597:src/xeq.c     **** 
1598:src/xeq.c     **** 	// Clear J & K but not I and L since they are last X.
1599:src/xeq.c     **** 	zero_regs(get_reg_n(regJ_idx), 2);
1600:src/xeq.c     **** 
1601:src/xeq.c     **** 	// erase local registers but keep them allocated
1602:src/xeq.c     **** 	if (local)
1603:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
1604:src/xeq.c     **** }
1605:src/xeq.c     **** 
1606:src/xeq.c     **** 
1607:src/xeq.c     **** /* Clear the subroutine return stack
1608:src/xeq.c     ****  */
1609:src/xeq.c     **** void clrretstk(void) {
1610:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
1611:src/xeq.c     **** }
1612:src/xeq.c     **** 
1613:src/xeq.c     **** void clrretstk_pc(void) {
1614:src/xeq.c     **** 	clrretstk();
1615:src/xeq.c     **** 	raw_set_pc(0);
1616:src/xeq.c     **** 	update_program_bounds(1);
1617:src/xeq.c     **** }
1618:src/xeq.c     **** 
1619:src/xeq.c     **** 
1620:src/xeq.c     **** /*
1621:src/xeq.c     ****  *  Command to allow access to constants and small integers
1622:src/xeq.c     ****  */
1623:src/xeq.c     **** void cmdconst(unsigned int arg, enum rarg op) {
1624:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
1625:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX || op == RARG_IND_CONST_CMPLX) {
1626:src/xeq.c     **** #else
1627:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX) {
1628:src/xeq.c     **** #endif
1629:src/xeq.c     **** 		lift2_if_enabled();
1630:src/xeq.c     **** 		zero_Y();
1631:src/xeq.c     **** 		set_was_complex();
1632:src/xeq.c     **** 	} else
1633:src/xeq.c     **** 		lift_if_enabled();
1634:src/xeq.c     **** 
1635:src/xeq.c     **** 	if (op == RARG_INTNUM || op == RARG_INTNUM_CMPLX)
1636:src/xeq.c     **** 		setX_int_sgn(arg, 0);
ARM GAS  /tmp/cccVhVyH.s 			page 36


1637:src/xeq.c     **** 	else if (is_intmode())
1638:src/xeq.c     **** 		bad_mode_error();
1639:src/xeq.c     **** 	else 
1640:src/xeq.c     **** 		copyreg(StackBase, get_const(arg, is_dblmode()));
1641:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1642:src/xeq.c     **** 	CLEAR_POLAR_READY;
1643:src/xeq.c     **** #endif
1644:src/xeq.c     **** }
1645:src/xeq.c     **** 
1646:src/xeq.c     **** 
1647:src/xeq.c     **** /* Store/recall code here.
1648:src/xeq.c     ****  * These two are pretty much the same so we define some utility routines first.
1649:src/xeq.c     ****  */
1650:src/xeq.c     **** 
1651:src/xeq.c     **** /* Do a basic STO/RCL arithmetic operation.
1652:src/xeq.c     ****  */
1653:src/xeq.c     **** static int storcl_op(unsigned short opr, int index, decNumber *r, int rev) {
1654:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
1655:src/xeq.c     **** 
1656:src/xeq.c     **** 	getX(x);
1657:src/xeq.c     **** 	getRegister(y, index);
1658:src/xeq.c     **** 	if (rev) {
1659:src/xeq.c     **** 		x = y;
1660:src/xeq.c     **** 		y = &a;
1661:src/xeq.c     **** 	}
1662:src/xeq.c     **** 
1663:src/xeq.c     **** 	switch (opr) {
1664:src/xeq.c     **** 	case 1:
1665:src/xeq.c     **** 		dn_add(r, y, x);
1666:src/xeq.c     **** 		break;
1667:src/xeq.c     **** 	case 2:
1668:src/xeq.c     **** 		dn_subtract(r, y, x);
1669:src/xeq.c     **** 		break;
1670:src/xeq.c     **** 	case 3:
1671:src/xeq.c     **** 		dn_multiply(r, y, x);
1672:src/xeq.c     **** 		break;
1673:src/xeq.c     **** 	case 4:
1674:src/xeq.c     **** 		dn_divide(r, y, x);
1675:src/xeq.c     **** 		break;
1676:src/xeq.c     **** 	case 5:
1677:src/xeq.c     **** 		dn_min(r, y, x);
1678:src/xeq.c     **** 		break;
1679:src/xeq.c     **** 	case 6:
1680:src/xeq.c     **** 		dn_max(r, y, x);
1681:src/xeq.c     **** 		break;
1682:src/xeq.c     **** 	default:
1683:src/xeq.c     **** 		return 1;
1684:src/xeq.c     **** 	}
1685:src/xeq.c     **** 	return 0;
1686:src/xeq.c     **** }
1687:src/xeq.c     **** 
1688:src/xeq.c     **** static int storcl_intop(unsigned short opr, int index, long long int *r, int rev) {
1689:src/xeq.c     **** 	long long int x, y;
1690:src/xeq.c     **** 
1691:src/xeq.c     **** 	x = getX_int();
1692:src/xeq.c     **** 	y = get_reg_n_int(index);
1693:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 37


1694:src/xeq.c     **** 	if (rev) {
1695:src/xeq.c     **** 		const long long int t = x;
1696:src/xeq.c     **** 		x = y;
1697:src/xeq.c     **** 		y = t;
1698:src/xeq.c     **** 	}
1699:src/xeq.c     **** 
1700:src/xeq.c     **** 	switch (opr) {
1701:src/xeq.c     **** 	case 1:
1702:src/xeq.c     **** 		*r = intAdd(y, x);
1703:src/xeq.c     **** 		break;
1704:src/xeq.c     **** 	case 2:
1705:src/xeq.c     **** 		*r = intSubtract(y, x);
1706:src/xeq.c     **** 		break;
1707:src/xeq.c     **** 	case 3:
1708:src/xeq.c     **** 		*r = intMultiply(y, x);
1709:src/xeq.c     **** 		break;
1710:src/xeq.c     **** 	case 4:
1711:src/xeq.c     **** 		*r = intDivide(y, x);
1712:src/xeq.c     **** 		break;
1713:src/xeq.c     **** 	case 5:
1714:src/xeq.c     **** 		*r = intMin(y, x);
1715:src/xeq.c     **** 		break;
1716:src/xeq.c     **** 	case 6:
1717:src/xeq.c     **** 		*r = intMax(y, x);
1718:src/xeq.c     **** 		break;
1719:src/xeq.c     **** 	default:
1720:src/xeq.c     **** 		return 1;
1721:src/xeq.c     **** 	}
1722:src/xeq.c     **** 	return 0;
1723:src/xeq.c     **** }
1724:src/xeq.c     **** 
1725:src/xeq.c     **** /* We've got a STO operation to do.
1726:src/xeq.c     ****  */
1727:src/xeq.c     **** void cmdsto(unsigned int arg, enum rarg op) {
1728:src/xeq.c     **** 	if (op == RARG_STO) {
1729:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
1730:src/xeq.c     **** 	} else {
1731:src/xeq.c     **** 		if (is_intmode()) {
1732:src/xeq.c     **** 			long long int r;
1733:src/xeq.c     **** 
1734:src/xeq.c     **** 			if (storcl_intop(op - RARG_STO, arg, &r, 0))
1735:src/xeq.c     **** 				illegal(op);
1736:src/xeq.c     **** 			set_reg_n_int(arg, r);
1737:src/xeq.c     **** 		} else {
1738:src/xeq.c     **** 			decNumber r;
1739:src/xeq.c     **** 
1740:src/xeq.c     **** 			if (storcl_op(op - RARG_STO, arg, &r, 0))
1741:src/xeq.c     **** 				illegal(op);
1742:src/xeq.c     **** 			setRegister(arg, &r);
1743:src/xeq.c     **** 		}
1744:src/xeq.c     **** 	}
1745:src/xeq.c     **** }
1746:src/xeq.c     **** 
1747:src/xeq.c     **** /* We've got a RCL operation to do.
1748:src/xeq.c     ****  */
1749:src/xeq.c     **** static void do_rcl(int index, enum rarg op) {
1750:src/xeq.c     **** 	if (op == RARG_RCL) {
ARM GAS  /tmp/cccVhVyH.s 			page 38


1751:src/xeq.c     **** 		REGISTER temp;
1752:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
1753:src/xeq.c     **** 		lift_if_enabled();
1754:src/xeq.c     **** 		copyreg(StackBase, &temp);
1755:src/xeq.c     **** 	} else {
1756:src/xeq.c     **** 		if (is_intmode()) {
1757:src/xeq.c     **** 			long long int r;
1758:src/xeq.c     **** 
1759:src/xeq.c     **** 			if (storcl_intop(op - RARG_RCL, index, &r, 1))
1760:src/xeq.c     **** 				illegal(op);
1761:src/xeq.c     **** 			setlastX();
1762:src/xeq.c     **** 			setX_int(r);
1763:src/xeq.c     **** 		} else {
1764:src/xeq.c     **** 			decNumber r;
1765:src/xeq.c     **** 
1766:src/xeq.c     **** 			if (storcl_op(op - RARG_RCL, index, &r, 1))
1767:src/xeq.c     **** 				illegal(op);
1768:src/xeq.c     **** 			setlastX();
1769:src/xeq.c     **** 			setX(&r);
1770:src/xeq.c     **** 		}
1771:src/xeq.c     **** 	}
1772:src/xeq.c     **** }
1773:src/xeq.c     **** 
1774:src/xeq.c     **** void cmdrcl(unsigned int arg, enum rarg op) {
1775:src/xeq.c     **** 	do_rcl(arg, op);
1776:src/xeq.c     **** }
1777:src/xeq.c     **** 
1778:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1779:src/xeq.c     **** void cmdflashrcl(unsigned int arg, enum rarg op) {
1780:src/xeq.c     **** 	do_rcl(FLASH_REG_BASE + arg, op - RARG_FLRCL + RARG_RCL);
1781:src/xeq.c     **** }
1782:src/xeq.c     **** #endif
1783:src/xeq.c     **** 
1784:src/xeq.c     **** /* And the complex equivalents for the above.
1785:src/xeq.c     ****  * We pair registers arg & arg+1 to provide a complex number
1786:src/xeq.c     ****  */
1787:src/xeq.c     **** static int storcl_cop(unsigned short opr, int index, decNumber *r1, decNumber *r2, int rev) {
1788:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
1789:src/xeq.c     **** 
1790:src/xeq.c     **** 	getXY(x + 0, x + 1);
1791:src/xeq.c     **** 	getRegister(y + 0, index);
1792:src/xeq.c     **** 	getRegister(y + 1, index + 1);
1793:src/xeq.c     **** 
1794:src/xeq.c     **** 	if (rev) {
1795:src/xeq.c     **** 		x = y;
1796:src/xeq.c     **** 		y = a;
1797:src/xeq.c     **** 	}
1798:src/xeq.c     **** 
1799:src/xeq.c     **** 	switch (opr) {
1800:src/xeq.c     **** 	case 1:
1801:src/xeq.c     **** 		cmplxAdd(r1, r2, y + 0, y + 1, x + 0, x + 1);
1802:src/xeq.c     **** 		break;
1803:src/xeq.c     **** 	case 2:
1804:src/xeq.c     **** 		cmplxSubtract(r1, r2, y + 0, y + 1, x + 0, x + 1);
1805:src/xeq.c     **** 		break;
1806:src/xeq.c     **** 	case 3:
1807:src/xeq.c     **** 		cmplxMultiply(r1, r2, y + 0, y + 1, x + 0, x + 1);
ARM GAS  /tmp/cccVhVyH.s 			page 39


1808:src/xeq.c     **** 		break;
1809:src/xeq.c     **** 	case 4:
1810:src/xeq.c     **** 		cmplxDivide(r1, r2, y + 0, y + 1, x + 0, x + 1);
1811:src/xeq.c     **** 		break;
1812:src/xeq.c     **** 	default:
1813:src/xeq.c     **** 		return 1;
1814:src/xeq.c     **** 	}
1815:src/xeq.c     **** 	return 0;
1816:src/xeq.c     **** }
1817:src/xeq.c     **** 
1818:src/xeq.c     **** 
1819:src/xeq.c     **** void cmdcsto(unsigned int arg, enum rarg op) {
1820:src/xeq.c     **** 	decNumber r1, r2;
1821:src/xeq.c     **** 	REGISTER *t1, *t2;
1822:src/xeq.c     **** 
1823:src/xeq.c     **** 	t1 = get_reg_n(arg);
1824:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
1825:src/xeq.c     **** 
1826:src/xeq.c     **** 	if (op == RARG_CSTO) {
1827:src/xeq.c     **** 		copyreg(t1, StackBase);
1828:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
1829:src/xeq.c     **** 	} else {
1830:src/xeq.c     **** 		if (is_intmode())
1831:src/xeq.c     **** 			bad_mode_error();
1832:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
1833:src/xeq.c     **** 			illegal(op);
1834:src/xeq.c     **** 		else {
1835:src/xeq.c     **** 			setRegister(arg, &r1);
1836:src/xeq.c     **** 			setRegister(arg + 1, &r2);
1837:src/xeq.c     **** 		}
1838:src/xeq.c     **** 	}
1839:src/xeq.c     **** 	set_was_complex();
1840:src/xeq.c     **** }
1841:src/xeq.c     **** 
1842:src/xeq.c     **** static void do_crcl(int index, enum rarg op) {
1843:src/xeq.c     **** 	decNumber r1, r2;
1844:src/xeq.c     **** 
1845:src/xeq.c     **** 	if (op == RARG_CRCL) {
1846:src/xeq.c     **** 		REGISTER x, y;
1847:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
1848:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
1849:src/xeq.c     **** 		lift2_if_enabled();
1850:src/xeq.c     **** 		copyreg(StackBase, &x);
1851:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
1852:src/xeq.c     **** 	} else {
1853:src/xeq.c     **** 		if (is_intmode())
1854:src/xeq.c     **** 			bad_mode_error();
1855:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
1856:src/xeq.c     **** 			illegal(op);
1857:src/xeq.c     **** 		else {
1858:src/xeq.c     **** 			setlastXY();
1859:src/xeq.c     **** 			setXY(&r1, &r2);
1860:src/xeq.c     **** 		}
1861:src/xeq.c     **** 	}
1862:src/xeq.c     **** 	set_was_complex();
1863:src/xeq.c     **** }
1864:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 40


1865:src/xeq.c     **** void cmdcrcl(unsigned int arg, enum rarg op) {
1866:src/xeq.c     **** 	do_crcl(arg, op);
1867:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1868:src/xeq.c     **** 	CLEAR_POLAR_READY;
1869:src/xeq.c     **** #endif
1870:src/xeq.c     **** }
1871:src/xeq.c     **** 
1872:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1873:src/xeq.c     **** void cmdflashcrcl(unsigned int arg, enum rarg op) {
1874:src/xeq.c     **** 	do_crcl(FLASH_REG_BASE + arg, op - RARG_FLCRCL + RARG_CRCL);
1875:src/xeq.c     **** }
1876:src/xeq.c     **** #endif
1877:src/xeq.c     **** 
1878:src/xeq.c     **** /*
1879:src/xeq.c     ****  *  "Alien" RCL commands to convert registers originally stored in a different format
1880:src/xeq.c     ****  */
1881:src/xeq.c     **** // RCL of an integer value
1882:src/xeq.c     **** void cmdircl(unsigned int arg, enum rarg op) {
1883:src/xeq.c     **** 	if (is_intmode())
1884:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
1885:src/xeq.c     **** 	else
1886:src/xeq.c     **** 		register_from_int(regX_idx, arg, 0);
1887:src/xeq.c     **** }
1888:src/xeq.c     **** 
1889:src/xeq.c     **** // RCL of a single or double precision real value
1890:src/xeq.c     **** void cmdrrcl(unsigned int arg, enum rarg op) {
1891:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
1892:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
1893:src/xeq.c     **** 
1894:src/xeq.c     **** 	if (rcl_dbl && arg >= regX_idx && arg <= regK_idx) {
1895:src/xeq.c     **** 		// dRCL is not valid for lettered registers
1896:src/xeq.c     **** 		report_err(ERR_RANGE);
1897:src/xeq.c     **** 		return;
1898:src/xeq.c     **** 	}
1899:src/xeq.c     **** 
1900:src/xeq.c     **** 	UState.mode_double = rcl_dbl; // Force reading in requested format
1901:src/xeq.c     **** 	if (is_intmode()) {
1902:src/xeq.c     **** 		int_from_register(regX_idx, arg);
1903:src/xeq.c     **** 		UState.mode_double = was_dbl;
1904:src/xeq.c     **** 	}
1905:src/xeq.c     **** 	else {
1906:src/xeq.c     **** 		decNumber x;
1907:src/xeq.c     **** 		getRegister(&x, arg);
1908:src/xeq.c     **** 
1909:src/xeq.c     **** 		UState.mode_double = was_dbl; // Force access in original mode
1910:src/xeq.c     **** 		setX(&x);
1911:src/xeq.c     **** 	}
1912:src/xeq.c     **** }
1913:src/xeq.c     **** 
1914:src/xeq.c     **** 
1915:src/xeq.c     **** /* SWAP x with the specified register
1916:src/xeq.c     ****  */
1917:src/xeq.c     **** void swap_reg(REGISTER *a, REGISTER *b) {
1918:src/xeq.c     **** 	REGISTER t;
1919:src/xeq.c     **** 
1920:src/xeq.c     **** 	copyreg(&t, a);
1921:src/xeq.c     **** 	copyreg(a, b);
ARM GAS  /tmp/cccVhVyH.s 			page 41


1922:src/xeq.c     **** 	copyreg(b, &t);
1923:src/xeq.c     **** }
1924:src/xeq.c     **** 
1925:src/xeq.c     **** void cmdswap(unsigned int arg, enum rarg op) {
1926:src/xeq.c     **** 	int idx;
1927:src/xeq.c     **** 
1928:src/xeq.c     **** 	if (op == RARG_CSWAPX)
1929:src/xeq.c     **** 		idx = regX_idx;
1930:src/xeq.c     **** 	else if (op == RARG_CSWAPZ)
1931:src/xeq.c     **** 		idx = regZ_idx;
1932:src/xeq.c     **** 	else
1933:src/xeq.c     **** 		idx = regX_idx + (int)(op - RARG_SWAPX);
1934:src/xeq.c     **** 
1935:src/xeq.c     **** 	swap_reg(get_reg_n(idx), get_reg_n(arg));
1936:src/xeq.c     **** 
1937:src/xeq.c     **** 	if (op >= RARG_CSWAPX) {
1938:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
1939:src/xeq.c     **** 		set_was_complex();
1940:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1941:src/xeq.c     **** 	CLEAR_POLAR_READY;
1942:src/xeq.c     **** #endif
1943:src/xeq.c     **** 	}
1944:src/xeq.c     **** }
1945:src/xeq.c     **** 
1946:src/xeq.c     **** 
1947:src/xeq.c     **** /* View a specified register
1948:src/xeq.c     ****  */
1949:src/xeq.c     **** void cmdview(unsigned int arg, enum rarg op) {
1950:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
1951:src/xeq.c     **** 
1952:src/xeq.c     **** 	State2.wascomplex = cmplx;
1953:src/xeq.c     **** 	ShowRegister = arg;
1954:src/xeq.c     **** 	State2.disp_freeze = 0;
1955:src/xeq.c     **** 	display();
1956:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
1957:src/xeq.c     **** }
1958:src/xeq.c     **** 
1959:src/xeq.c     **** 
1960:src/xeq.c     **** /* Get the stack size */
1961:src/xeq.c     **** void get_stack_size(enum nilop op) {
1962:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
1963:src/xeq.c     **** }
1964:src/xeq.c     **** 
1965:src/xeq.c     **** void get_word_size(enum nilop op) {
1966:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
1967:src/xeq.c     **** }
1968:src/xeq.c     **** 
1969:src/xeq.c     **** void get_sign_mode(enum nilop op) {
1970:src/xeq.c     **** 	static const unsigned char modes[4] = {
1971:src/xeq.c     **** 		0x02,		// 2's complement
1972:src/xeq.c     **** 		0x01,		// 1's complement
1973:src/xeq.c     **** 		0x00,		// unsigned
1974:src/xeq.c     **** 		0x81		// sign and mantissa
1975:src/xeq.c     **** 	};
1976:src/xeq.c     **** 	const unsigned char v = modes[(int)int_mode()];
1977:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
1978:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 42


1979:src/xeq.c     **** 
1980:src/xeq.c     **** void get_base(enum nilop op) {
1981:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
1982:src/xeq.c     **** }
1983:src/xeq.c     **** 
1984:src/xeq.c     **** #ifdef DM42
1985:src/xeq.c     ****  long int DM42_Ticker () {
1986:src/xeq.c     ****     long int f, t;
1987:src/xeq.c     ****     t = get_rtc_ticks();
1988:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
1989:src/xeq.c     ****     return f;
1990:src/xeq.c     ****  }
1991:src/xeq.c     **** #endif
1992:src/xeq.c     **** /* Get the current ticker value */
1993:src/xeq.c     **** void op_ticks(enum nilop op) {
1994:src/xeq.c     **** #if !defined(CONSOLE)
1995:src/xeq.c     ****     setX_int_sgn(Ticker, 0);
1996:src/xeq.c     **** #else 
1997:src/xeq.c     ****     struct timeval tv;
1998:src/xeq.c     ****     long long int t;
1999:src/xeq.c     ****     gettimeofday(&tv, NULL);
2000:src/xeq.c     ****     t = tv.tv_sec * 10 + tv.tv_usec / 100000;
2001:src/xeq.c     ****     setX_int_sgn(t, 0);
2002:src/xeq.c     **** #endif
2003:src/xeq.c     **** }
2004:src/xeq.c     **** 
2005:src/xeq.c     **** /* Display the battery voltage */
2006:src/xeq.c     **** void op_voltage(enum nilop op) {
2007:src/xeq.c     **** 	decNumber t, u;
2008:src/xeq.c     **** #ifdef REALBUILD
2009:src/xeq.c     **** 	unsigned long long int v = 19 + Voltage;
2010:src/xeq.c     **** #elif defined(DM42)
2011:src/xeq.c     **** 	int v = get_vbat();
2012:src/xeq.c     **** 	v = v / 100;
2013:src/xeq.c     **** #else
2014:src/xeq.c     **** 	unsigned long long int v = 32;
2015:src/xeq.c     **** #endif
2016:src/xeq.c     **** 
2017:src/xeq.c     **** 	if (is_intmode()) {
2018:src/xeq.c     **** 		setX_int_sgn(v, 0);
2019:src/xeq.c     **** 	} else {
2020:src/xeq.c     **** 		ullint_to_dn(&t, v);
2021:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
2022:src/xeq.c     **** 		setX(&u);
2023:src/xeq.c     **** 	}
2024:src/xeq.c     **** }
2025:src/xeq.c     **** 
2026:src/xeq.c     **** /*
2027:src/xeq.c     ****  *  Commands to determine free memory
2028:src/xeq.c     ****  */
2029:src/xeq.c     **** int free_mem(void) {
2030:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
2031:src/xeq.c     **** }
2032:src/xeq.c     **** 
2033:src/xeq.c     **** int free_flash(void) {
2034:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
2035:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 43


2036:src/xeq.c     **** 
2037:src/xeq.c     **** void get_mem(enum nilop op) {
2038:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
2039:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
2040:src/xeq.c     **** 		 op == OP_FLASHQ ? free_flash() :
2041:src/xeq.c     **** 		 global_regs(),
2042:src/xeq.c     **** 		 0);
2043:src/xeq.c     **** }
2044:src/xeq.c     **** 
2045:src/xeq.c     **** 
2046:src/xeq.c     **** /* Check if a keystroke is pending in the buffer, if so return it to the specified
2047:src/xeq.c     ****  * register, if not skip the next step.
2048:src/xeq.c     ****  */
2049:src/xeq.c     **** void cmdkeyp(unsigned int arg, enum rarg op) {
2050:src/xeq.c     **** 	int cond = LastKey == 0;
2051:src/xeq.c     **** 	if (!cond) {
2052:src/xeq.c     **** 		int k = LastKey - 1;
2053:src/xeq.c     **** 		LastKey = 0;
2054:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
2055:src/xeq.c     **** 	}
2056:src/xeq.c     **** 	fin_tst(cond);
2057:src/xeq.c     **** }
2058:src/xeq.c     **** 
2059:src/xeq.c     **** /*
2060:src/xeq.c     ****  *  Get a key code from a register and translate it from row/colum to internal
2061:src/xeq.c     ****  *  Check for valid arguments
2062:src/xeq.c     ****  */
2063:src/xeq.c     **** static int get_keycode_from_reg(unsigned int n)
2064:src/xeq.c     **** {
2065:src/xeq.c     **** 	int sgn;
2066:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
2067:src/xeq.c     **** 	if ( c < 0 )
2068:src/xeq.c     **** 		report_err(ERR_RANGE);
2069:src/xeq.c     **** 	return c;
2070:src/xeq.c     **** }
2071:src/xeq.c     **** 
2072:src/xeq.c     **** /*
2073:src/xeq.c     ****  *  Take a row/column key code and feed it to the keyboard buffer
2074:src/xeq.c     ****  *  This stops program execution first to make sure, the key is not
2075:src/xeq.c     ****  *  read in by KEY? again.
2076:src/xeq.c     ****  */
2077:src/xeq.c     **** void cmdputkey(unsigned int arg, enum rarg op)
2078:src/xeq.c     **** {
2079:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
2080:src/xeq.c     **** 
2081:src/xeq.c     **** 	if (c >= 0) {
2082:src/xeq.c     **** 		set_running_off();
2083:src/xeq.c     **** 		put_key(c);
2084:src/xeq.c     **** 	}
2085:src/xeq.c     **** }
2086:src/xeq.c     **** 
2087:src/xeq.c     **** /*
2088:src/xeq.c     ****  *  Return the type of the keycode in register n
2089:src/xeq.c     ****  *  returns 0-9 for digits, 10 for ., +/-, EEX, 11 for f,g,h, 12 for all other keys.
2090:src/xeq.c     ****  *  Invalid codes produce an error.
2091:src/xeq.c     ****  */
2092:src/xeq.c     **** void cmdkeytype(unsigned int arg, enum rarg op)
ARM GAS  /tmp/cccVhVyH.s 			page 44


2093:src/xeq.c     **** {
2094:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
2095:src/xeq.c     **** 	if ( c >= 0 ) {
2096:src/xeq.c     **** 		const char types[] = {
2097:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
2098:src/xeq.c     **** 			12, 12, 12, 11, 11, 11,
2099:src/xeq.c     **** 			12, 12, 10, 10, 12, 12,
2100:src/xeq.c     **** 			12,  7,  8,  9, 12, 12,
2101:src/xeq.c     **** 			12,  4,  5,  6, 12, 12,
2102:src/xeq.c     **** 			12,  1,  2,  3, 12, 12,
2103:src/xeq.c     **** 			12,  0, 10, 12, 12 };
2104:src/xeq.c     **** 		lift_if_enabled();
2105:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
2106:src/xeq.c     **** 	}
2107:src/xeq.c     **** }
2108:src/xeq.c     **** 
2109:src/xeq.c     **** 
2110:src/xeq.c     **** /* Check which operating mode we're in -- integer or real -- they both
2111:src/xeq.c     ****  * vector through this routine.
2112:src/xeq.c     ****  */
2113:src/xeq.c     **** void check_mode(enum nilop op) {
2114:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
2115:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
2116:src/xeq.c     **** 
2117:src/xeq.c     **** 	fin_tst(intmode == desired);
2118:src/xeq.c     **** }
2119:src/xeq.c     **** 
2120:src/xeq.c     **** 
2121:src/xeq.c     **** /* Check if DBLON is active
2122:src/xeq.c     ****  */
2123:src/xeq.c     **** void check_dblmode(enum nilop op) {
2124:src/xeq.c     **** 	fin_tst(is_dblmode());
2125:src/xeq.c     **** }
2126:src/xeq.c     **** 
2127:src/xeq.c     **** void op_query_xtal(enum nilop op) {
2128:src/xeq.c     **** 	fin_tst(Xtal);
2129:src/xeq.c     **** }
2130:src/xeq.c     **** 
2131:src/xeq.c     **** void op_query_print(enum nilop op) {
2132:src/xeq.c     **** #ifdef INFRARED
2133:src/xeq.c     **** 	fin_tst(1);
2134:src/xeq.c     **** #else
2135:src/xeq.c     **** 	fin_tst(0);
2136:src/xeq.c     **** #endif
2137:src/xeq.c     **** }
2138:src/xeq.c     **** 
2139:src/xeq.c     **** /* Save and restore the entire stack to sequential registers */
2140:src/xeq.c     **** static int check_stack_overlap(unsigned int arg) {
2141:src/xeq.c     **** 	const int n = stack_size();
2142:src/xeq.c     **** 
2143:src/xeq.c     **** 	if (arg + n <= global_regs() || arg >= NUMREG) {
2144:src/xeq.c     **** 		return n;
2145:src/xeq.c     **** 	}
2146:src/xeq.c     **** 	report_err(ERR_STK_CLASH);
2147:src/xeq.c     **** 	return 0;
2148:src/xeq.c     **** }
2149:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 45


2150:src/xeq.c     **** void cmdstostk(unsigned int arg, enum rarg op) {
2151:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
2152:src/xeq.c     **** 
2153:src/xeq.c     **** 	for (i=0; i<n; i++)
2154:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
2155:src/xeq.c     **** }
2156:src/xeq.c     **** 
2157:src/xeq.c     **** void cmdrclstk(unsigned int arg, enum rarg op) {
2158:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
2159:src/xeq.c     **** 
2160:src/xeq.c     **** 	for (i=0; i<n; i++)
2161:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
2162:src/xeq.c     **** }
2163:src/xeq.c     **** 
2164:src/xeq.c     **** 
2165:src/xeq.c     **** /*
2166:src/xeq.c     ****  *  Move up the return stack, skipping any local variables
2167:src/xeq.c     ****  */
2168:src/xeq.c     **** static void retstk_up(void)
2169:src/xeq.c     **** {
 309              		.loc 1 2169 1 is_stmt 1 view -0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
2170:src/xeq.c     **** 	if (RetStkPtr < 0) {
 314              		.loc 1 2170 2 view .LVU95
 315              		.loc 1 2170 6 is_stmt 0 view .LVU96
 316 0000 1D4B     		ldr	r3, .L39
2169:src/xeq.c     **** 	if (RetStkPtr < 0) {
 317              		.loc 1 2169 1 view .LVU97
 318 0002 F0B4     		push	{r4, r5, r6, r7}
 319              		.cfi_def_cfa_offset 16
 320              		.cfi_offset 4, -16
 321              		.cfi_offset 5, -12
 322              		.cfi_offset 6, -8
 323              		.cfi_offset 7, -4
 324              		.loc 1 2170 6 view .LVU98
 325 0004 1C68     		ldr	r4, [r3]
 326 0006 B4F9E227 		ldrsh	r2, [r4, #2018]
 327              		.loc 1 2170 5 view .LVU99
 328 000a 002A     		cmp	r2, #0
 329 000c 01DB     		blt	.L37
 330              	.L27:
2171:src/xeq.c     **** 		int sp = RetStkPtr++;
2172:src/xeq.c     **** 		unsigned int s = RetStk[sp++];
2173:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
2174:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
2175:src/xeq.c     **** 			RetStkPtr = sp;
2176:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
2177:src/xeq.c     **** 			LocalRegs = 0;
2178:src/xeq.c     **** 			while (sp < 0) {
2179:src/xeq.c     **** 				s = RetStk[sp];
2180:src/xeq.c     **** 				if (isLOCAL(s)) {
2181:src/xeq.c     **** 					LocalRegs = sp;
2182:src/xeq.c     **** 					break;
2183:src/xeq.c     **** 				}
ARM GAS  /tmp/cccVhVyH.s 			page 46


2184:src/xeq.c     **** 				++sp;
2185:src/xeq.c     **** 				if (isHIDDEN(s))
2186:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
2187:src/xeq.c     **** 			}
2188:src/xeq.c     **** 		}
2189:src/xeq.c     **** 	}
2190:src/xeq.c     **** }
 331              		.loc 1 2190 1 view .LVU100
 332 000e F0BC     		pop	{r4, r5, r6, r7}
 333              		.cfi_remember_state
 334              		.cfi_restore 7
 335              		.cfi_restore 6
 336              		.cfi_restore 5
 337              		.cfi_restore 4
 338              		.cfi_def_cfa_offset 0
 339 0010 7047     		bx	lr
 340              	.L37:
 341              		.cfi_restore_state
 342              	.LBB1356:
2171:src/xeq.c     **** 		int sp = RetStkPtr++;
 343              		.loc 1 2171 3 is_stmt 1 view .LVU101
2172:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 344              		.loc 1 2172 26 is_stmt 0 view .LVU102
 345 0012 1A4B     		ldr	r3, .L39+4
2171:src/xeq.c     **** 		int sp = RetStkPtr++;
 346              		.loc 1 2171 21 view .LVU103
 347 0014 511C     		adds	r1, r2, #1
2172:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 348              		.loc 1 2172 26 view .LVU104
 349 0016 1D68     		ldr	r5, [r3]
2171:src/xeq.c     **** 		int sp = RetStkPtr++;
 350              		.loc 1 2171 21 view .LVU105
 351 0018 A4F8E217 		strh	r1, [r4, #2018]	@ movhi
 352              	.LVL26:
2172:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 353              		.loc 1 2172 3 is_stmt 1 view .LVU106
2172:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 354              		.loc 1 2172 26 is_stmt 0 view .LVU107
 355 001c 35F81230 		ldrh	r3, [r5, r2, lsl #1]
 356              	.LVL27:
2173:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 357              		.loc 1 2173 3 is_stmt 1 view .LVU108
2173:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 358              		.loc 1 2173 7 is_stmt 0 view .LVU109
 359 0020 1A0B     		lsrs	r2, r3, #12
 360              	.LVL28:
2173:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 361              		.loc 1 2173 6 view .LVU110
 362 0022 22F00202 		bic	r2, r2, #2
 363 0026 012A     		cmp	r2, #1
 364 0028 F1D1     		bne	.L27
2174:src/xeq.c     **** 			RetStkPtr = sp;
 365              		.loc 1 2174 4 is_stmt 1 view .LVU111
2177:src/xeq.c     **** 			while (sp < 0) {
 366              		.loc 1 2177 14 is_stmt 0 view .LVU112
 367 002a B4F8DE67 		ldrh	r6, [r4, #2014]
2174:src/xeq.c     **** 			RetStkPtr = sp;
ARM GAS  /tmp/cccVhVyH.s 			page 47


 368              		.loc 1 2174 10 view .LVU113
 369 002e C3F30B03 		ubfx	r3, r3, #0, #12
 370              	.LVL29:
2174:src/xeq.c     **** 			RetStkPtr = sp;
 371              		.loc 1 2174 7 view .LVU114
 372 0032 0B44     		add	r3, r3, r1
 373              	.LVL30:
2175:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 374              		.loc 1 2175 4 is_stmt 1 view .LVU115
2177:src/xeq.c     **** 			while (sp < 0) {
 375              		.loc 1 2177 14 is_stmt 0 view .LVU116
 376 0034 6FF34F16 		bfc	r6, #5, #11
 377              	.LVL31:
2175:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 378              		.loc 1 2175 14 view .LVU117
 379 0038 A4F8E237 		strh	r3, [r4, #2018]	@ movhi
 380              	.LVL32:
2177:src/xeq.c     **** 			while (sp < 0) {
 381              		.loc 1 2177 4 is_stmt 1 view .LVU118
2177:src/xeq.c     **** 			while (sp < 0) {
 382              		.loc 1 2177 14 is_stmt 0 view .LVU119
 383 003c A4F8DE67 		strh	r6, [r4, #2014]	@ movhi
2178:src/xeq.c     **** 				s = RetStk[sp];
 384              		.loc 1 2178 4 is_stmt 1 view .LVU120
 385 0040 6FF00047 		mvn	r7, #-2147483648
 386              	.L31:
2178:src/xeq.c     **** 				s = RetStk[sp];
 387              		.loc 1 2178 4 is_stmt 0 view .LVU121
 388 0044 D919     		adds	r1, r3, r7
 389 0046 05EB4101 		add	r1, r5, r1, lsl #1
 390 004a 03E0     		b	.L33
 391              	.LVL33:
 392              	.L32:
2185:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 393              		.loc 1 2185 8 view .LVU122
 394 004c 032A     		cmp	r2, #3
2184:src/xeq.c     **** 				if (isHIDDEN(s))
 395              		.loc 1 2184 5 view .LVU123
 396 004e 03F10103 		add	r3, r3, #1
 397              	.LVL34:
2185:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 398              		.loc 1 2185 5 is_stmt 1 view .LVU124
2185:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 399              		.loc 1 2185 8 is_stmt 0 view .LVU125
 400 0052 0CD0     		beq	.L38
 401              	.LVL35:
 402              	.L33:
2179:src/xeq.c     **** 				if (isLOCAL(s)) {
 403              		.loc 1 2179 5 is_stmt 1 view .LVU126
2184:src/xeq.c     **** 				if (isHIDDEN(s))
 404              		.loc 1 2184 5 view .LVU127
2178:src/xeq.c     **** 				s = RetStk[sp];
 405              		.loc 1 2178 10 view .LVU128
 406 0054 002B     		cmp	r3, #0
 407 0056 DADA     		bge	.L27
2179:src/xeq.c     **** 				if (isLOCAL(s)) {
 408              		.loc 1 2179 15 is_stmt 0 view .LVU129
ARM GAS  /tmp/cccVhVyH.s 			page 48


 409 0058 31F8020F 		ldrh	r0, [r1, #2]!
 410              	.LVL36:
2180:src/xeq.c     **** 					LocalRegs = sp;
 411              		.loc 1 2180 5 is_stmt 1 view .LVU130
2180:src/xeq.c     **** 					LocalRegs = sp;
 412              		.loc 1 2180 9 is_stmt 0 view .LVU131
 413 005c 020B     		lsrs	r2, r0, #12
2180:src/xeq.c     **** 					LocalRegs = sp;
 414              		.loc 1 2180 8 view .LVU132
 415 005e 012A     		cmp	r2, #1
 416 0060 F4D1     		bne	.L32
2181:src/xeq.c     **** 					break;
 417              		.loc 1 2181 6 is_stmt 1 view .LVU133
2181:src/xeq.c     **** 					break;
 418              		.loc 1 2181 16 is_stmt 0 view .LVU134
 419 0062 63F34F16 		bfi	r6, r3, #5, #11
 420              	.LVL37:
2181:src/xeq.c     **** 					break;
 421              		.loc 1 2181 16 view .LVU135
 422 0066 A4F8DE67 		strh	r6, [r4, #2014]	@ movhi
2182:src/xeq.c     **** 				}
 423              		.loc 1 2182 6 is_stmt 1 view .LVU136
 424              	.LBE1356:
 425              		.loc 1 2190 1 is_stmt 0 view .LVU137
 426 006a F0BC     		pop	{r4, r5, r6, r7}
 427              		.cfi_remember_state
 428              		.cfi_restore 7
 429              		.cfi_restore 6
 430              		.cfi_restore 5
 431              		.cfi_restore 4
 432              		.cfi_def_cfa_offset 0
 433 006c 7047     		bx	lr
 434              	.LVL38:
 435              	.L38:
 436              		.cfi_restore_state
 437              	.LBB1357:
2186:src/xeq.c     **** 			}
 438              		.loc 1 2186 6 is_stmt 1 view .LVU138
2186:src/xeq.c     **** 			}
 439              		.loc 1 2186 12 is_stmt 0 view .LVU139
 440 006e C0F30B00 		ubfx	r0, r0, #0, #12
 441              	.LVL39:
2186:src/xeq.c     **** 			}
 442              		.loc 1 2186 9 view .LVU140
 443 0072 0344     		add	r3, r3, r0
 444              	.LVL40:
2186:src/xeq.c     **** 			}
 445              		.loc 1 2186 9 view .LVU141
 446 0074 E6E7     		b	.L31
 447              	.L40:
 448 0076 00BF     		.align	2
 449              	.L39:
 450 0078 00000000 		.word	main_ram
 451 007c 00000000 		.word	RetStk
 452              	.LBE1357:
 453              		.cfi_endproc
 454              	.LFE150:
ARM GAS  /tmp/cccVhVyH.s 			page 49


 456              		.section	.text.flag_word,"ax",%progbits
 457              		.align	1
 458              		.p2align 2,,3
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 462              		.fpu fpv4-sp-d16
 464              	flag_word:
 465              	.LVL41:
 466              	.LFB198:
2191:src/xeq.c     **** 
2192:src/xeq.c     **** 
2193:src/xeq.c     **** /* Search from the given position for the specified numeric label.
2194:src/xeq.c     ****  */
2195:src/xeq.c     **** unsigned int find_opcode_from(unsigned int pc, const opcode l, const int flags) {
2196:src/xeq.c     **** 	unsigned short int top;
2197:src/xeq.c     **** 	int count;
2198:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
2199:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
2200:src/xeq.c     **** 
2201:src/xeq.c     **** 	count = 1 + find_section_bounds(pc, endp, &top);
2202:src/xeq.c     **** 	count -= top;
2203:src/xeq.c     **** 	while (count--) {
2204:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
2205:src/xeq.c     **** 		// If we don't find the label, we may search a little too far if many double word
2206:src/xeq.c     **** 		// instructions are in the code, but this doesn't do any harm.
2207:src/xeq.c     **** 		if (getprog(pc) == l)
2208:src/xeq.c     **** 			return pc;
2209:src/xeq.c     **** 		pc = do_inc(pc, endp);
2210:src/xeq.c     **** 	}
2211:src/xeq.c     **** 	if (errp)
2212:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2213:src/xeq.c     **** 	return 0;
2214:src/xeq.c     **** }
2215:src/xeq.c     **** 
2216:src/xeq.c     **** 
2217:src/xeq.c     **** unsigned int find_label_from(unsigned int pc, unsigned int arg, int flags) {
2218:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
2219:src/xeq.c     **** }
2220:src/xeq.c     **** 
2221:src/xeq.c     **** 
2222:src/xeq.c     **** 
2223:src/xeq.c     **** /* Handle a GTO/GSB instruction
2224:src/xeq.c     ****  */
2225:src/xeq.c     **** static void gsbgto(unsigned int pc, int gsb, unsigned int oldpc) {
2226:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
2227:src/xeq.c     **** 	raw_set_pc(pc);
2228:src/xeq.c     **** 	if (gsb) {
2229:src/xeq.c     **** 		if (!Running && !XromRunning) {
2230:src/xeq.c     **** 			// XEQ or hot key from keyboard
2231:src/xeq.c     **** 			clrretstk();
2232:src/xeq.c     **** 			set_running_on();
2233:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
2234:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
2235:src/xeq.c     **** 				oldpc = pc;
2236:src/xeq.c     **** 		}
2237:src/xeq.c     **** 		if (-RetStkPtr >= (XromFlags.xIN ? XROM_RET_STACK_SIZE : RetStkSize)) {
ARM GAS  /tmp/cccVhVyH.s 			page 50


2238:src/xeq.c     **** 			// Stack is full
2239:src/xeq.c     **** 			report_err(ERR_RAM_FULL);
2240:src/xeq.c     **** 			// clrretstk();
2241:src/xeq.c     **** 		}
2242:src/xeq.c     **** 		else {
2243:src/xeq.c     **** 			// Push PC on return stack
2244:src/xeq.c     **** 			RetStk[--RetStkPtr] = oldpc;
2245:src/xeq.c     **** 		}
2246:src/xeq.c     **** 	}
2247:src/xeq.c     **** }
2248:src/xeq.c     **** 
2249:src/xeq.c     **** // Handle a RTN
2250:src/xeq.c     **** static void do_rtn(int plus1) {
2251:src/xeq.c     **** 	unsigned short pc;
2252:src/xeq.c     **** 
2253:src/xeq.c     **** 	if (RetStkPtr >= 0) {
2254:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
2255:src/xeq.c     **** 		clrretstk();
2256:src/xeq.c     **** 		raw_set_pc(ProgBegin);
2257:src/xeq.c     **** 	}
2258:src/xeq.c     **** 	else {
2259:src/xeq.c     **** 		// Normal RTN within program
2260:src/xeq.c     **** 		// Pop any LOCALS off the stack, increment sp
2261:src/xeq.c     **** 		retstk_up();
2262:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
2263:src/xeq.c     **** 		raw_set_pc(pc);
2264:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
2265:src/xeq.c     **** 		if (plus1 && getprog(pc) != (OP_NIL | OP_POPUSR))
2266:src/xeq.c     **** 			if (incpc())
2267:src/xeq.c     **** 				decpc();
2268:src/xeq.c     **** 	}
2269:src/xeq.c     **** 	if (RetStkPtr == 0) {
2270:src/xeq.c     **** 		// RTN with empty stack stops
2271:src/xeq.c     **** 		set_running_off();
2272:src/xeq.c     **** 	}
2273:src/xeq.c     **** }
2274:src/xeq.c     **** 
2275:src/xeq.c     **** // RTN and RTN+1
2276:src/xeq.c     **** void op_rtn(enum nilop op) {
2277:src/xeq.c     **** 	if (! Running && ! XromRunning) {
2278:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
2279:src/xeq.c     **** 		clrretstk_pc();
2280:src/xeq.c     **** 	}
2281:src/xeq.c     **** 	else
2282:src/xeq.c     **** 		do_rtn(op == OP_RTNp1 ? 1 : 0);
2283:src/xeq.c     **** }
2284:src/xeq.c     **** 
2285:src/xeq.c     **** 
2286:src/xeq.c     **** // Called by XEQ, GTO and CAT browser
2287:src/xeq.c     **** void cmdgtocommon(int gsb, unsigned int pc) {
2288:src/xeq.c     **** 	if (pc == 0)
2289:src/xeq.c     **** 		set_running_off();
2290:src/xeq.c     **** 	else
2291:src/xeq.c     **** 		gsbgto(pc, gsb, state_pc());
2292:src/xeq.c     **** }
2293:src/xeq.c     **** 
2294:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 51


2295:src/xeq.c     **** // Common part of XEQUSR and XEQ'...' from XROM
2296:src/xeq.c     **** // Command pushes 4 values on stack, needs to be followed by POPUSR
2297:src/xeq.c     **** static void usergsb_common(unsigned short int target) {
2298:src/xeq.c     **** 	const unsigned int pc = state_pc();
2299:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
2300:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
2301:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
2302:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
2303:src/xeq.c     **** 
2304:src/xeq.c     **** 	XromUserPc = 0;			     // Hide information irrelevant to user code
2305:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
2306:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
2307:src/xeq.c     **** 	if (! Running)
2308:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
2309:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
2310:src/xeq.c     **** }
2311:src/xeq.c     **** 
2312:src/xeq.c     **** 
2313:src/xeq.c     **** // XEQUSR
2314:src/xeq.c     **** // Command fills the stack and calls the user's code.
2315:src/xeq.c     **** // Needs to be followed by POPUSR
2316:src/xeq.c     **** void do_usergsb(enum nilop op) {
2317:src/xeq.c     **** 	usergsb_common(XromUserPc);
2318:src/xeq.c     ****         fill(OP_FILL);
2319:src/xeq.c     **** }
2320:src/xeq.c     **** 
2321:src/xeq.c     **** 
2322:src/xeq.c     **** // POPUSR
2323:src/xeq.c     **** void op_popusr(enum nilop op) {
2324:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
2325:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
2326:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
2327:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
2328:src/xeq.c     **** }
2329:src/xeq.c     **** 
2330:src/xeq.c     **** /* Tests if the user program is at the top level */
2331:src/xeq.c     **** void isTop(enum nilop op) {
2332:src/xeq.c     **** 	int top = 0;
2333:src/xeq.c     **** 
2334:src/xeq.c     **** 	if (Running) {
2335:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
2336:src/xeq.c     **** 	}
2337:src/xeq.c     **** 	fin_tst(top);
2338:src/xeq.c     **** }
2339:src/xeq.c     **** 
2340:src/xeq.c     **** 
2341:src/xeq.c     **** // LBL?
2342:src/xeq.c     **** void cmdlblp(unsigned int arg, enum rarg op) {
2343:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
2344:src/xeq.c     **** }
2345:src/xeq.c     **** 
2346:src/xeq.c     **** 
2347:src/xeq.c     **** void cmdgto(unsigned int arg, enum rarg op) {
2348:src/xeq.c     **** 	unsigned int lbl;
2349:src/xeq.c     **** 	if (is_xrom())
2350:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
2351:src/xeq.c     **** 	else
ARM GAS  /tmp/cccVhVyH.s 			page 52


2352:src/xeq.c     **** 		lbl = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
2353:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
2354:src/xeq.c     **** }
2355:src/xeq.c     **** 
2356:src/xeq.c     **** unsigned int findmultilbl(const opcode o, int flags) {
2357:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
2358:src/xeq.c     **** 	unsigned int lbl;
2359:src/xeq.c     **** 
2360:src/xeq.c     **** 	lbl = find_opcode_from(0, dest, 0);					// RAM
2361:src/xeq.c     **** 	if (lbl == 0)
2362:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
2363:src/xeq.c     **** 	if (lbl == 0)
2364:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
2365:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
2366:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2367:src/xeq.c     **** 	return lbl;
2368:src/xeq.c     **** }
2369:src/xeq.c     **** 
2370:src/xeq.c     **** // LBL?'...'
2371:src/xeq.c     **** void cmdmultilblp(const opcode o, enum multiops mopr) {
2372:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
2373:src/xeq.c     **** }
2374:src/xeq.c     **** 
2375:src/xeq.c     **** void cmdmultigto(const opcode o, enum multiops mopr) {
2376:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
2377:src/xeq.c     **** 		// In XROM the command behaves differently!
2378:src/xeq.c     **** 		unsigned short int target = findmultilbl(o, 0);
2379:src/xeq.c     **** 		if (target != 0)
2380:src/xeq.c     **** 			usergsb_common(target); 
2381:src/xeq.c     **** 		else
2382:src/xeq.c     **** 			incpc();
2383:src/xeq.c     **** 	}
2384:src/xeq.c     **** 	else {
2385:src/xeq.c     **** 		cmdgtocommon(mopr != DBL_GTO, findmultilbl(o, FIND_OP_ERROR));
2386:src/xeq.c     **** 	}
2387:src/xeq.c     **** }
2388:src/xeq.c     **** 
2389:src/xeq.c     **** void multiumenu(const opcode o, enum multiops mopr) {
2390:src/xeq.c     ****   opcode op = (o & 0xFFFFF0FF) + ((DBL_LBL) << DBL_SHIFT); // change opcode to LBL
2391:src/xeq.c     ****   build_user_menu_from_program(op);
2392:src/xeq.c     ****   set_menu (M_User);
2393:src/xeq.c     ****   display_current_menu ();
2394:src/xeq.c     **** }
2395:src/xeq.c     **** 
2396:src/xeq.c     **** static void branchtoalpha(int is_gsb, char buf[]) {
2397:src/xeq.c     **** 	unsigned int op;
2398:src/xeq.c     **** 
2399:src/xeq.c     **** 	op = OP_DBL + (DBL_LBL << DBL_SHIFT);
2400:src/xeq.c     **** 	op |= buf[0] & 0xff;
2401:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
2402:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
2403:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
2404:src/xeq.c     **** }
2405:src/xeq.c     **** 
2406:src/xeq.c     **** void cmdalphagto(unsigned int arg, enum rarg op) {
2407:src/xeq.c     **** 	char buf[14];
2408:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 53


2409:src/xeq.c     **** 	xset(buf, '\0', sizeof(buf));
2410:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
2411:src/xeq.c     **** }
2412:src/xeq.c     **** 
2413:src/xeq.c     **** static void do_branchalpha(int is_gsb) {
2414:src/xeq.c     **** 	char buf[4];
2415:src/xeq.c     **** 
2416:src/xeq.c     **** 	xcopy(buf, Alpha, 3);
2417:src/xeq.c     **** 	buf[3] = '\0';
2418:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
2419:src/xeq.c     **** }
2420:src/xeq.c     **** 
2421:src/xeq.c     **** void op_gtoalpha(enum nilop op) {
2422:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
2423:src/xeq.c     **** }
2424:src/xeq.c     **** 
2425:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2426:src/xeq.c     **** int get_dispmode_digs(int *pdigs)
2427:src/xeq.c     **** {
2428:src/xeq.c     **** 	int dispmode = UState.dispmode;
2429:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
2430:src/xeq.c     **** 
2431:src/xeq.c     **** 	if (dispdigs >= 12) {
2432:src/xeq.c     **** 		dispdigs -= 12;
2433:src/xeq.c     **** 		dispmode += 4;
2434:src/xeq.c     **** 		if (dispmode >= 6) {
2435:src/xeq.c     **** 			dispmode -= 2;
2436:src/xeq.c     **** 			dispdigs += 4;
2437:src/xeq.c     **** 		}
2438:src/xeq.c     **** 	}
2439:src/xeq.c     **** 	*pdigs = dispdigs;
2440:src/xeq.c     **** 	return dispmode;
2441:src/xeq.c     **** }
2442:src/xeq.c     **** 
2443:src/xeq.c     **** void set_dispmode_digs(int dispmode, int dispdigs)
2444:src/xeq.c     **** {
2445:src/xeq.c     **** 	if (dispmode >= 4) {
2446:src/xeq.c     **** 		dispmode -= 4;
2447:src/xeq.c     **** 		dispdigs += 12;
2448:src/xeq.c     **** 		if (dispdigs >= 16) {
2449:src/xeq.c     **** 			dispdigs -= 4;
2450:src/xeq.c     **** 			dispmode += 2;
2451:src/xeq.c     **** 		}
2452:src/xeq.c     **** 	}
2453:src/xeq.c     **** 	UState.dispmode = dispmode;
2454:src/xeq.c     **** 	UState.dispdigs = dispdigs;
2455:src/xeq.c     **** }
2456:src/xeq.c     **** #endif
2457:src/xeq.c     **** 
2458:src/xeq.c     **** void cmddisp(unsigned int arg, enum rarg op) {
2459:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2460:src/xeq.c     **** 	int dispdigs;
2461:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
2462:src/xeq.c     **** #ifdef DM42
2463:src/xeq.c     **** 	switch (op) {
2464:src/xeq.c     **** 	case RARG_STD:
2465:src/xeq.c     **** 	  dispmode = MODE_STD;
ARM GAS  /tmp/cccVhVyH.s 			page 54


2466:src/xeq.c     **** 	  break;
2467:src/xeq.c     **** 	case RARG_FIX:
2468:src/xeq.c     **** 	  dispmode = MODE_FIX;
2469:src/xeq.c     **** 	  break;
2470:src/xeq.c     **** 	case RARG_SCI:
2471:src/xeq.c     **** 	  dispmode = MODE_SCI;
2472:src/xeq.c     **** 	  break;
2473:src/xeq.c     **** 	case RARG_ENG:
2474:src/xeq.c     **** 	  dispmode = MODE_ENG;
2475:src/xeq.c     **** 	  break;
2476:src/xeq.c     **** 	case RARG_SIG:
2477:src/xeq.c     **** 	  dispmode = MODE_SIG;
2478:src/xeq.c     **** 	  break;
2479:src/xeq.c     **** 	case RARG_SIG0:
2480:src/xeq.c     **** 	  dispmode = MODE_SIG0;
2481:src/xeq.c     **** 	  break;
2482:src/xeq.c     **** 	default:;
2483:src/xeq.c     **** 	}
2484:src/xeq.c     **** 	if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2485:src/xeq.c     **** 	  report_err(ERR_RANGE);
2486:src/xeq.c     **** 	  return;
2487:src/xeq.c     **** 	}
2488:src/xeq.c     **** #else	
2489:src/xeq.c     **** 	if (op != RARG_DISP)
2490:src/xeq.c     **** 		dispmode = (op - RARG_STD) + MODE_STD;
2491:src/xeq.c     **** 	else if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2492:src/xeq.c     **** 		report_err(ERR_RANGE);
2493:src/xeq.c     **** 		return;
2494:src/xeq.c     **** 	}
2495:src/xeq.c     **** #endif
2496:src/xeq.c     **** 	set_dispmode_digs(dispmode, arg);
2497:src/xeq.c     **** #else
2498:src/xeq.c     **** 	UState.dispdigs = arg;
2499:src/xeq.c     **** 	if (op != RARG_DISP)
2500:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
2501:src/xeq.c     **** #endif
2502:src/xeq.c     **** 	op_float(OP_FLOAT);
2503:src/xeq.c     **** }
2504:src/xeq.c     **** 
2505:src/xeq.c     **** 
2506:src/xeq.c     **** /* Metric / Imperial conversion code */
2507:src/xeq.c     **** decNumber *convC2F(decNumber *r, const decNumber *x) {
2508:src/xeq.c     **** 	decNumber s;
2509:src/xeq.c     **** 
2510:src/xeq.c     **** 	dn_multiply(&s, x, &const_9on5);
2511:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
2512:src/xeq.c     **** }
2513:src/xeq.c     **** 
2514:src/xeq.c     **** decNumber *convF2C(decNumber *r, const decNumber *x) {
2515:src/xeq.c     **** 	decNumber s;
2516:src/xeq.c     **** 
2517:src/xeq.c     **** 	dn_subtract(&s, x, &const_32);
2518:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
2519:src/xeq.c     **** }
2520:src/xeq.c     **** 
2521:src/xeq.c     **** decNumber *convDB2AR(decNumber *r, const decNumber *x) {
2522:src/xeq.c     **** 	decNumber t;
ARM GAS  /tmp/cccVhVyH.s 			page 55


2523:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
2524:src/xeq.c     **** 	return decNumberPow10(r, &t);
2525:src/xeq.c     **** }
2526:src/xeq.c     **** 
2527:src/xeq.c     **** decNumber *convAR2DB(decNumber *r, const decNumber *x) {
2528:src/xeq.c     **** 	decNumber t;
2529:src/xeq.c     **** 	dn_log10(&t, x);
2530:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
2531:src/xeq.c     **** }
2532:src/xeq.c     **** 
2533:src/xeq.c     **** decNumber *convDB2PR(decNumber *r, const decNumber *x) {
2534:src/xeq.c     **** 	decNumber t;
2535:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
2536:src/xeq.c     **** 	return decNumberPow10(r, &t);
2537:src/xeq.c     **** }
2538:src/xeq.c     **** 
2539:src/xeq.c     **** decNumber *convPR2DB(decNumber *r, const decNumber *x) {
2540:src/xeq.c     **** 	decNumber t;
2541:src/xeq.c     **** 	dn_log10(&t, x);
2542:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
2543:src/xeq.c     **** }
2544:src/xeq.c     **** 
2545:src/xeq.c     **** /* Scale conversions */
2546:src/xeq.c     **** void do_conv(decNumber *r, unsigned int arg, const decNumber *x) {
2547:src/xeq.c     **** 	decNumber m;
2548:src/xeq.c     **** 	const unsigned int conv = arg / 2;
2549:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
2550:src/xeq.c     **** 
2551:src/xeq.c     **** 	if (conv > NUM_CONSTS_CONV) {
2552:src/xeq.c     **** 		decNumberCopy(r, x);
2553:src/xeq.c     **** 		return;
2554:src/xeq.c     **** 	}
2555:src/xeq.c     **** 
2556:src/xeq.c     **** 	decimal64ToNumber(&CONSTANT_CONV(conv), &m);
2557:src/xeq.c     **** 
2558:src/xeq.c     **** 	if (dirn == 0)		// metric to imperial
2559:src/xeq.c     **** 		dn_divide(r, x, &m);
2560:src/xeq.c     **** 	else			// imperial to metric
2561:src/xeq.c     **** 		dn_multiply(r, x, &m);
2562:src/xeq.c     **** }
2563:src/xeq.c     **** 
2564:src/xeq.c     **** void cmdconv(unsigned int arg, enum rarg op) {
2565:src/xeq.c     **** 	decNumber x, r;
2566:src/xeq.c     **** 
2567:src/xeq.c     **** 	if (is_intmode())
2568:src/xeq.c     **** 		return;
2569:src/xeq.c     **** 
2570:src/xeq.c     **** 	getX(&x);
2571:src/xeq.c     **** 	do_conv(&r, arg, &x);
2572:src/xeq.c     **** 	setlastX();
2573:src/xeq.c     **** 	setX(&r);
2574:src/xeq.c     **** }
2575:src/xeq.c     **** 
2576:src/xeq.c     **** /*  Finish up a test -- if the value is non-zero, the test passes.
2577:src/xeq.c     ****  *  If it is zero, the test fails.
2578:src/xeq.c     ****  */
2579:src/xeq.c     **** void fin_tst(const int a) {
ARM GAS  /tmp/cccVhVyH.s 			page 56


2580:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
2581:src/xeq.c     **** 	if (Running || XromRunning) {
2582:src/xeq.c     **** 		if (! a && incpc())
2583:src/xeq.c     **** 			decpc();
2584:src/xeq.c     **** 	}
2585:src/xeq.c     **** 	else
2586:src/xeq.c     **** 		DispMsg = msg;
2587:src/xeq.c     **** #ifdef INFRARED
2588:src/xeq.c     **** 	if (Tracing) {
2589:src/xeq.c     **** 		print_justified( msg );
2590:src/xeq.c     **** 		Tracing = 0;
2591:src/xeq.c     **** 	}
2592:src/xeq.c     **** #endif
2593:src/xeq.c     **** }
2594:src/xeq.c     **** 
2595:src/xeq.c     **** 
2596:src/xeq.c     **** /* Skip a number of instructions forwards */
2597:src/xeq.c     **** void cmdskip(unsigned int arg, enum rarg op) {
2598:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2599:src/xeq.c     **** 	unsigned int pc;
2600:src/xeq.c     **** 
2601:src/xeq.c     **** 	if (op == RARG_CASE) {
2602:src/xeq.c     **** 		int sgn;
2603:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
2604:src/xeq.c     **** 		if (sgn || arg >= 100) {
2605:src/xeq.c     **** 			report_err(ERR_RANGE);
2606:src/xeq.c     **** 			return;
2607:src/xeq.c     **** 		}
2608:src/xeq.c     **** 	}
2609:src/xeq.c     **** 
2610:src/xeq.c     **** 	if (isXROM(origpc))
2611:src/xeq.c     **** 		pc = origpc + arg;
2612:src/xeq.c     **** 	else {
2613:src/xeq.c     **** 		while (arg-- && !incpc());
2614:src/xeq.c     **** 		if (PcWrapped) {
2615:src/xeq.c     **** 			report_err(ERR_RANGE);
2616:src/xeq.c     **** 		}
2617:src/xeq.c     **** 		pc = state_pc();
2618:src/xeq.c     **** 	}
2619:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSF, origpc);
2620:src/xeq.c     **** }
2621:src/xeq.c     **** 
2622:src/xeq.c     **** /* Skip backwards */
2623:src/xeq.c     **** void cmdback(unsigned int arg, enum rarg op) {
2624:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2625:src/xeq.c     **** 	unsigned int pc = origpc;
2626:src/xeq.c     **** 
2627:src/xeq.c     **** 	if (isXROM(origpc))
2628:src/xeq.c     **** 		pc -= arg + 1;
2629:src/xeq.c     ****         else if (arg) {
2630:src/xeq.c     **** 		if ( Running ) {
2631:src/xeq.c     **** 			// Handles the case properly that we are on last step
2632:src/xeq.c     **** 			pc = do_dec(pc, 1);
2633:src/xeq.c     **** 		}
2634:src/xeq.c     **** 		do {
2635:src/xeq.c     **** 			pc = do_dec(pc, 1);
2636:src/xeq.c     **** 		} while (--arg && !PcWrapped);
ARM GAS  /tmp/cccVhVyH.s 			page 57


2637:src/xeq.c     **** 		if (PcWrapped) {
2638:src/xeq.c     **** 			report_err(ERR_RANGE);
2639:src/xeq.c     **** 			return;
2640:src/xeq.c     **** 		}
2641:src/xeq.c     **** 	}
2642:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSB, origpc);
2643:src/xeq.c     **** }
2644:src/xeq.c     **** 
2645:src/xeq.c     **** 
2646:src/xeq.c     **** /* Append a character to the command line
2647:src/xeq.c     ****  */
2648:src/xeq.c     **** static void append_cmdline(char c) {
2649:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
2650:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
2651:src/xeq.c     **** }
2652:src/xeq.c     **** 
2653:src/xeq.c     **** /* Make sure exponent stays within allowed limits.
2654:src/xeq.c     ****  * was_digit_entered: 0: sign was changed
2655:src/xeq.c     ****  *                    1: new digit was entered
2656:src/xeq.c     ****  */
2657:src/xeq.c     **** static void exponent_adjusted(int was_digit_entered)
2658:src/xeq.c     **** {
2659:src/xeq.c     **** 	const int dbl = is_dblmode();
2660:src/xeq.c     **** 	int i;
2661:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
2662:src/xeq.c     **** 	const int neg_type_dc = get_reg_n_int_sgn(0, &i);
2663:src/xeq.c     **** #else
2664:src/xeq.c     **** 	const int neg_type_dc = SP_NEG_EXP_ENTRY_TYPE_DC;
2665:src/xeq.c     **** #endif
2666:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DC == -1
2667:src/xeq.c     **** 	const int neg_lim_dc = get_reg_n_int_sgn(1, &i);
2668:src/xeq.c     **** #else
2669:src/xeq.c     **** 	const int neg_lim_dc = SP_NEG_EXP_ENTRY_LIMIT_DC;
2670:src/xeq.c     **** #endif
2671:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DS == -1
2672:src/xeq.c     **** 	const int neg_type_ds = get_reg_n_int_sgn(2, &i);
2673:src/xeq.c     **** #else
2674:src/xeq.c     **** 	const int neg_type_ds = SP_NEG_EXP_ENTRY_TYPE_DS;
2675:src/xeq.c     **** #endif
2676:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DS == -1
2677:src/xeq.c     **** 	const int neg_lim_ds = get_reg_n_int_sgn(3, &i);
2678:src/xeq.c     **** #else
2679:src/xeq.c     **** 	const int neg_lim_ds = SP_NEG_EXP_ENTRY_LIMIT_DS;
2680:src/xeq.c     **** #endif
2681:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DC == -1
2682:src/xeq.c     **** 	const int pos_type_dc = get_reg_n_int_sgn(4, &i);
2683:src/xeq.c     **** #else
2684:src/xeq.c     **** 	const int pos_type_dc = SP_POS_EXP_ENTRY_TYPE_DC;
2685:src/xeq.c     **** #endif
2686:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DC == -1
2687:src/xeq.c     **** 	const int pos_lim_dc = get_reg_n_int_sgn(5, &i);
2688:src/xeq.c     **** #else
2689:src/xeq.c     **** 	const int pos_lim_dc = SP_POS_EXP_ENTRY_LIMIT_DC;
2690:src/xeq.c     **** #endif
2691:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DS == -1
2692:src/xeq.c     **** 	const int pos_type_ds = get_reg_n_int_sgn(6, &i);
2693:src/xeq.c     **** #else
ARM GAS  /tmp/cccVhVyH.s 			page 58


2694:src/xeq.c     **** 	const int pos_type_ds = SP_POS_EXP_ENTRY_TYPE_DS;
2695:src/xeq.c     **** #endif
2696:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DS == -1
2697:src/xeq.c     **** 	const int pos_lim_ds = get_reg_n_int_sgn(7, &i);
2698:src/xeq.c     **** #else
2699:src/xeq.c     **** 	const int pos_lim_ds = SP_POS_EXP_ENTRY_LIMIT_DS;
2700:src/xeq.c     **** #endif
2701:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1
2702:src/xeq.c     **** 	const int exp_chs_dc = get_reg_n_int_sgn(8, &i);
2703:src/xeq.c     **** #else
2704:src/xeq.c     **** 	const int exp_chs_dc = SP_EXP_ENTRY_CHS_DC;
2705:src/xeq.c     **** #endif
2706:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DS == -1
2707:src/xeq.c     **** 	const int exp_chs_ds = get_reg_n_int_sgn(9, &i);
2708:src/xeq.c     **** #else
2709:src/xeq.c     **** 	const int exp_chs_ds = SP_EXP_ENTRY_CHS_DS;
2710:src/xeq.c     **** #endif
2711:src/xeq.c     **** 	const int dp_neg_type_dc = DP_NEG_EXP_ENTRY_TYPE_DC;
2712:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
2713:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
2714:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
2715:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
2716:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
2717:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
2718:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
2719:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
2720:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
2721:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2722:src/xeq.c     **** 	const int large_exp_entry = 1;
2723:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
2724:src/xeq.c     **** #else
2725:src/xeq.c     **** 	const int large_exp_entry = 0;
2726:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex + 1];
2727:src/xeq.c     **** #endif
2728:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1 || SP_NEG_EXP_ENTRY_TYPE_DC != SP_NEG_EXP_ENTRY_TYPE_DS \
2729:src/xeq.c     ****     || SP_NEG_EXP_ENTRY_LIMIT_DC == -1 || SP_NEG_EXP_ENTRY_LIMIT_DC != SP_NEG_EXP_ENTRY_LIMIT_DS \
2730:src/xeq.c     ****     || SP_POS_EXP_ENTRY_TYPE_DC == -1 || SP_POS_EXP_ENTRY_TYPE_DC != SP_POS_EXP_ENTRY_TYPE_DS \
2731:src/xeq.c     ****     || SP_POS_EXP_ENTRY_LIMIT_DC == -1 || SP_POS_EXP_ENTRY_LIMIT_DC != SP_POS_EXP_ENTRY_LIMIT_DS \
2732:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC != SP_EXP_ENTRY_CHS_DS \
2733:src/xeq.c     ****     || SP_EXP_ENTRY_ZERO_DC == -1 || SP_EXP_ENTRY_ZERO_DC != SP_EXP_ENTRY_ZERO_DS \
2734:src/xeq.c     ****     || ((DP_NEG_EXP_ENTRY_TYPE_DC != DP_NEG_EXP_ENTRY_TYPE_DS \
2735:src/xeq.c     ****          || DP_NEG_EXP_ENTRY_LIMIT_DC != DP_NEG_EXP_ENTRY_LIMIT_DS \
2736:src/xeq.c     ****          || DP_POS_EXP_ENTRY_TYPE_DC != DP_POS_EXP_ENTRY_TYPE_DS \
2737:src/xeq.c     ****          || DP_POS_EXP_ENTRY_LIMIT_DC != DP_POS_EXP_ENTRY_LIMIT_DS \
2738:src/xeq.c     ****          || DP_EXP_ENTRY_CHS_DC != DP_EXP_ENTRY_CHS_DS \
2739:src/xeq.c     ****          || DP_EXP_ENTRY_ZERO_DC != DP_EXP_ENTRY_ZERO_DS) && defined(LARGE_EXPONENT_ENTRY))
2740:src/xeq.c     **** 	const int flag_D = get_user_flag(NAN_FLAG);
2741:src/xeq.c     **** #else
2742:src/xeq.c     **** 	const int flag_D = 0;
2743:src/xeq.c     **** #endif
2744:src/xeq.c     **** #ifndef SHIFT_EXPONENT
2745:src/xeq.c     **** 	int negative;
2746:src/xeq.c     **** #endif
2747:src/xeq.c     **** 	int emax;
2748:src/xeq.c     **** 
2749:src/xeq.c     **** 	/* Figure out the range limit for the exponent */
2750:src/xeq.c     **** 	if (!large_exp_entry && dbl) {
ARM GAS  /tmp/cccVhVyH.s 			page 59


2751:src/xeq.c     **** 		emax = 999;
2752:src/xeq.c     **** 	}
2753:src/xeq.c     **** 	else {
2754:src/xeq.c     **** 		int emax_plus, emax_minus;
2755:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
2756:src/xeq.c     **** 
2757:src/xeq.c     **** 		if ((neg_type_dc >= 1 && neg_type_dc <= 9)
2758:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
2759:src/xeq.c     **** 		    || (pos_type_dc >= 1 && pos_type_dc <= 3)
2760:src/xeq.c     **** 		    || (pos_type_ds >= 1 && pos_type_ds <= 3)
2761:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2762:src/xeq.c     **** 		    || (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9)
2763:src/xeq.c     **** 		    || (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9)
2764:src/xeq.c     **** 		    || (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2765:src/xeq.c     **** 		    || (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2766:src/xeq.c     **** #endif
2767:src/xeq.c     **** 		   ) {
2768:src/xeq.c     **** 			// Exponent limits have to be calculated at run-time
2769:src/xeq.c     **** 
2770:src/xeq.c     **** 			for (i = 0; i < CmdLineLength; ++i) {
2771:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2772:src/xeq.c     **** 				if (Cmdline[i] == 'E' || Cmdline[i] == 'D')
2773:src/xeq.c     **** #else
2774:src/xeq.c     **** 				if (Cmdline[i] == 'E')
2775:src/xeq.c     **** #endif
2776:src/xeq.c     **** 					break;
2777:src/xeq.c     **** 				else if (Cmdline[i] == '.')
2778:src/xeq.c     **** 					dot = i;
2779:src/xeq.c     **** 				else if (Cmdline[i] != '0') {
2780:src/xeq.c     **** 					last_nonzero = i - (dot != 0);
2781:src/xeq.c     **** 					if (first_nonzero < 0)
2782:src/xeq.c     **** 						first_nonzero = i - (dot != 0);
2783:src/xeq.c     **** 				}
2784:src/xeq.c     **** 			}
2785:src/xeq.c     **** 			if (first_nonzero < 0) { // Mantissa is zero.
2786:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DC == -1
2787:src/xeq.c     **** 				const int zero_dc = (get_user_flag(1) << 1) | get_user_flag(0);
2788:src/xeq.c     **** #else
2789:src/xeq.c     **** 				const int zero_dc = SP_EXP_ENTRY_ZERO_DC;
2790:src/xeq.c     **** #endif
2791:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DS == -1
2792:src/xeq.c     **** 				const int zero_ds = (get_user_flag(3) << 1) | get_user_flag(2);
2793:src/xeq.c     **** #else
2794:src/xeq.c     **** 				const int zero_ds = SP_EXP_ENTRY_ZERO_DS;
2795:src/xeq.c     **** #endif
2796:src/xeq.c     **** 				const int dp_zero_dc = DP_EXP_ENTRY_ZERO_DC;
2797:src/xeq.c     **** 				const int dp_zero_ds = DP_EXP_ENTRY_ZERO_DS;
2798:src/xeq.c     **** 
2799:src/xeq.c     **** 				if (large_exp_entry && dbl) {
2800:src/xeq.c     **** 					if ((dp_zero_dc == 1 && dp_zero_ds == 1)
2801:src/xeq.c     **** 					    || (dp_zero_dc == 1 && !flag_D)
2802:src/xeq.c     **** 					    || (dp_zero_ds == 1 && flag_D)) {
2803:src/xeq.c     **** 						// Double precision: Allow any exponent
2804:src/xeq.c     **** 						// within configured limits if any.
2805:src/xeq.c     **** 						emax_plus = emax_minus = 9999;
2806:src/xeq.c     **** 						goto check_limits;
2807:src/xeq.c     **** 					}
ARM GAS  /tmp/cccVhVyH.s 			page 60


2808:src/xeq.c     **** 					else if ((dp_zero_dc == 2 && dp_zero_ds == 2)
2809:src/xeq.c     **** 					         || (dp_zero_dc == 2 && !flag_D)
2810:src/xeq.c     **** 					         || (dp_zero_ds == 2 && flag_D)) {
2811:src/xeq.c     **** 						// Double precision: Allow any exponent
2812:src/xeq.c     **** 						// even outside of configured limits.
2813:src/xeq.c     **** 						emax = 9999;
2814:src/xeq.c     **** 						goto do_not_check_limits;
2815:src/xeq.c     **** 					}
2816:src/xeq.c     **** 					goto zero_has_one_significant_digit;
2817:src/xeq.c     **** 				}
2818:src/xeq.c     **** 				if ((zero_dc == 1 && zero_ds == 1)
2819:src/xeq.c     **** 				    || (zero_dc == 1 && !flag_D)
2820:src/xeq.c     **** 				    || (zero_ds == 1 && flag_D)) {
2821:src/xeq.c     **** 					// Allow any exponent within configured limits if any.
2822:src/xeq.c     **** 					emax_plus = emax_minus = 999;
2823:src/xeq.c     **** 					goto check_limits;
2824:src/xeq.c     **** 				}
2825:src/xeq.c     **** 				else if ((zero_dc == 2 && zero_ds == 2)
2826:src/xeq.c     **** 				         || (zero_dc == 2 && !flag_D)
2827:src/xeq.c     **** 				         || (zero_ds == 2 && flag_D)) {
2828:src/xeq.c     **** 					// Allow any exponent even outside of configured limits.
2829:src/xeq.c     **** 					emax = 999;
2830:src/xeq.c     **** 					goto do_not_check_limits;
2831:src/xeq.c     **** 				}
2832:src/xeq.c     **** 				else {
2833:src/xeq.c     **** zero_has_one_significant_digit:
2834:src/xeq.c     **** 					// Treat zero as if it had one significant digit.
2835:src/xeq.c     **** 					first_nonzero = 0;
2836:src/xeq.c     **** 					dot = 1;
2837:src/xeq.c     **** 				}
2838:src/xeq.c     **** 			}
2839:src/xeq.c     **** 			else if (dot == 0)
2840:src/xeq.c     **** 				dot = i;
2841:src/xeq.c     **** 		}
2842:src/xeq.c     **** 
2843:src/xeq.c     **** 		if (large_exp_entry && dbl) {
2844:src/xeq.c     **** 			// Double precision mode
2845:src/xeq.c     **** 			if (flag_D && dp_neg_type_dc != dp_neg_type_ds) {
2846:src/xeq.c     **** 				if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 3) {
2847:src/xeq.c     **** 					// Don't allow denormal numbers
2848:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2849:src/xeq.c     **** 				}
2850:src/xeq.c     **** 				else if (dp_neg_type_ds >= 4 && dp_neg_type_ds <= 6) {
2851:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2852:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2853:src/xeq.c     **** 				}
2854:src/xeq.c     **** 				else if (dp_neg_type_ds >= 7 && dp_neg_type_ds <= 9) {
2855:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2856:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2857:src/xeq.c     **** 				}
2858:src/xeq.c     **** 				else {
2859:src/xeq.c     **** 					// Fixed limit
2860:src/xeq.c     **** 					emax_minus = dp_neg_lim_ds;
2861:src/xeq.c     **** 				}
2862:src/xeq.c     **** 			}
2863:src/xeq.c     **** 			else {
2864:src/xeq.c     **** 				if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 3) {
ARM GAS  /tmp/cccVhVyH.s 			page 61


2865:src/xeq.c     **** 					// Don't allow denormal numbers
2866:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2867:src/xeq.c     **** 				}
2868:src/xeq.c     **** 				else if (dp_neg_type_dc >= 4 && dp_neg_type_dc <= 6) {
2869:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2870:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2871:src/xeq.c     **** 				}
2872:src/xeq.c     **** 				else if (dp_neg_type_dc >= 7 && dp_neg_type_dc <= 9) {
2873:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2874:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2875:src/xeq.c     **** 				}
2876:src/xeq.c     **** 				else {
2877:src/xeq.c     **** 					// Fixed limit
2878:src/xeq.c     **** 					emax_minus = dp_neg_lim_dc;
2879:src/xeq.c     **** 				}
2880:src/xeq.c     **** 			}
2881:src/xeq.c     **** 
2882:src/xeq.c     **** 			if (flag_D && dp_pos_type_dc != dp_pos_type_ds) {
2883:src/xeq.c     **** 				if (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2884:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2885:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2886:src/xeq.c     **** 				else
2887:src/xeq.c     **** 					// Fixed limit
2888:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2889:src/xeq.c     **** 			}
2890:src/xeq.c     **** 			else {
2891:src/xeq.c     **** 				if (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2892:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2893:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2894:src/xeq.c     **** 				else
2895:src/xeq.c     **** 					// Fixed limit
2896:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2897:src/xeq.c     **** 			}
2898:src/xeq.c     **** 
2899:src/xeq.c     **** 			goto check_limits;
2900:src/xeq.c     **** 		}
2901:src/xeq.c     **** 
2902:src/xeq.c     **** 		if (flag_D && neg_type_dc != neg_type_ds) {
2903:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 3) {
2904:src/xeq.c     **** 				// Don't allow denormal numbers
2905:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2906:src/xeq.c     **** 			}
2907:src/xeq.c     **** 			else if (neg_type_ds >= 4 && neg_type_ds <= 6) {
2908:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2909:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2910:src/xeq.c     **** 			}
2911:src/xeq.c     **** 			else if (neg_type_ds >= 7 && neg_type_ds <= 9) {
2912:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2913:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2914:src/xeq.c     **** 			}
2915:src/xeq.c     **** 			else {
2916:src/xeq.c     **** 				// Fixed limit
2917:src/xeq.c     **** 				emax_minus = neg_lim_ds;
2918:src/xeq.c     **** 			}
2919:src/xeq.c     **** 		}
2920:src/xeq.c     **** 		else {
2921:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 3) {
ARM GAS  /tmp/cccVhVyH.s 			page 62


2922:src/xeq.c     **** 				// Don't allow denormal numbers
2923:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2924:src/xeq.c     **** 			}
2925:src/xeq.c     **** 			else if (neg_type_dc >= 4 && neg_type_dc <= 6) {
2926:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2927:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2928:src/xeq.c     **** 			}
2929:src/xeq.c     **** 			else if (neg_type_dc >= 7 && neg_type_dc <= 9) {
2930:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2931:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2932:src/xeq.c     **** 			}
2933:src/xeq.c     **** 			else {
2934:src/xeq.c     **** 				// Fixed limit
2935:src/xeq.c     **** 				emax_minus = neg_lim_dc;
2936:src/xeq.c     **** 			}
2937:src/xeq.c     **** 		}
2938:src/xeq.c     **** 
2939:src/xeq.c     **** 		if (flag_D && pos_type_dc != pos_type_ds) {
2940:src/xeq.c     **** 			if (pos_type_ds >= 1 && pos_type_ds <= 3)
2941:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2942:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2943:src/xeq.c     **** 			else
2944:src/xeq.c     **** 				// Fixed limit
2945:src/xeq.c     **** 				emax_plus = pos_lim_ds;
2946:src/xeq.c     **** 		}
2947:src/xeq.c     **** 		else {
2948:src/xeq.c     **** 			if (pos_type_dc >= 1 && pos_type_dc <= 3)
2949:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2950:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2951:src/xeq.c     **** 			else
2952:src/xeq.c     **** 				// Fixed limit
2953:src/xeq.c     **** 				emax_plus = pos_lim_dc;
2954:src/xeq.c     **** 		}
2955:src/xeq.c     **** 
2956:src/xeq.c     **** check_limits:
2957:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2958:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
2959:src/xeq.c     **** 		    && (dp_neg_type_ds != neg_type_ds || dp_neg_lim_ds != neg_lim_ds)) {
2960:src/xeq.c     **** 			if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9) {
2961:src/xeq.c     **** 				if (dp_neg_type_ds % 3 == 2) { // low limit
2962:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_ds)
2963:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2964:src/xeq.c     **** 				}
2965:src/xeq.c     **** 				else if (dp_neg_type_ds % 3 == 0) { // high limit
2966:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_ds)
2967:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2968:src/xeq.c     **** 				}
2969:src/xeq.c     **** 			}
2970:src/xeq.c     **** 			if (dp_neg_lim_ds < 0 && emax_minus < 0)
2971:src/xeq.c     **** 				emax_minus = 0;
2972:src/xeq.c     **** 		}
2973:src/xeq.c     **** 		else if (large_exp_entry && dbl
2974:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
2975:src/xeq.c     **** 		                         && dp_neg_lim_dc == dp_neg_lim_ds))
2976:src/xeq.c     **** 		         && (dp_neg_type_dc != neg_type_dc || dp_neg_lim_dc != neg_lim_dc)) {
2977:src/xeq.c     **** 			if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9) {
2978:src/xeq.c     **** 				if (dp_neg_type_dc % 3 == 2) { // low limit
ARM GAS  /tmp/cccVhVyH.s 			page 63


2979:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_dc)
2980:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2981:src/xeq.c     **** 				}
2982:src/xeq.c     **** 				else if (dp_neg_type_dc % 3 == 0) { // high limit
2983:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_dc)
2984:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2985:src/xeq.c     **** 				}
2986:src/xeq.c     **** 			}
2987:src/xeq.c     **** 			if (dp_neg_lim_dc < 0 && emax_minus < 0)
2988:src/xeq.c     **** 				emax_minus = 0;
2989:src/xeq.c     **** 		}
2990:src/xeq.c     **** 		else if (flag_D && (neg_type_dc != neg_type_ds || neg_lim_dc != neg_lim_ds)) {
2991:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 9) {
2992:src/xeq.c     **** 				if (neg_type_ds % 3 == 2) { // low limit
2993:src/xeq.c     **** 					if (emax_minus > neg_lim_ds)
2994:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2995:src/xeq.c     **** 				}
2996:src/xeq.c     **** 				else if (neg_type_ds % 3 == 0) { // high limit
2997:src/xeq.c     **** 					if (emax_minus < neg_lim_ds)
2998:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2999:src/xeq.c     **** 				}
3000:src/xeq.c     **** 			}
3001:src/xeq.c     **** 			if (neg_lim_ds < 0 && emax_minus < 0)
3002:src/xeq.c     **** 				emax_minus = 0;
3003:src/xeq.c     **** 		}
3004:src/xeq.c     **** 		else {
3005:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 9) {
3006:src/xeq.c     **** 				if (neg_type_dc % 3 == 2) { // low limit
3007:src/xeq.c     **** 					if (emax_minus > neg_lim_dc)
3008:src/xeq.c     **** 						emax_minus = neg_lim_dc;
3009:src/xeq.c     **** 				}
3010:src/xeq.c     **** 				else if (neg_type_dc % 3 == 0) { // high limit
3011:src/xeq.c     **** 					if (emax_minus < neg_lim_dc)
3012:src/xeq.c     **** 						emax_minus = neg_lim_dc;
3013:src/xeq.c     **** 				}
3014:src/xeq.c     **** 			}
3015:src/xeq.c     **** 			if (neg_lim_dc < 0 && emax_minus < 0)
3016:src/xeq.c     **** 				emax_minus = 0;
3017:src/xeq.c     **** 		}
3018:src/xeq.c     **** 
3019:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
3020:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
3021:src/xeq.c     **** 		    && (dp_pos_type_ds != pos_type_ds || dp_pos_lim_ds != pos_lim_ds)) {
3022:src/xeq.c     **** 			if (dp_pos_type_ds == 2) { // low limit
3023:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_ds)
3024:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
3025:src/xeq.c     **** 			}
3026:src/xeq.c     **** 			else if (dp_pos_type_ds == 3) { // high limit
3027:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_ds)
3028:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
3029:src/xeq.c     **** 			}
3030:src/xeq.c     **** 			if (dp_pos_lim_ds < 0 && emax_plus < 0)
3031:src/xeq.c     **** 				emax_plus = 0;
3032:src/xeq.c     **** 		}
3033:src/xeq.c     **** 		else if (large_exp_entry && dbl
3034:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
3035:src/xeq.c     **** 		                         && dp_pos_lim_dc == dp_pos_lim_ds))
ARM GAS  /tmp/cccVhVyH.s 			page 64


3036:src/xeq.c     **** 		         && (dp_pos_type_dc != pos_type_dc || dp_pos_lim_dc != pos_lim_dc)) {
3037:src/xeq.c     **** 			if (dp_pos_type_dc == 2) { // low limit
3038:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_dc)
3039:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
3040:src/xeq.c     **** 			}
3041:src/xeq.c     **** 			else if (dp_pos_type_dc == 3) { // high limit
3042:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_dc)
3043:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
3044:src/xeq.c     **** 			}
3045:src/xeq.c     **** 			if (dp_pos_lim_dc < 0 && emax_plus < 0)
3046:src/xeq.c     **** 				emax_plus = 0;
3047:src/xeq.c     **** 		}
3048:src/xeq.c     **** 		else if (flag_D && (pos_type_dc != pos_type_ds || pos_lim_dc != pos_lim_ds)) {
3049:src/xeq.c     **** 			if (pos_type_ds == 2) { // low limit
3050:src/xeq.c     **** 				if (emax_plus < pos_lim_ds)
3051:src/xeq.c     **** 					emax_plus = pos_lim_ds;
3052:src/xeq.c     **** 			}
3053:src/xeq.c     **** 			else if (pos_type_ds == 3) { // high limit
3054:src/xeq.c     **** 				if (emax_plus > pos_lim_ds)
3055:src/xeq.c     **** 					emax_plus = pos_lim_ds;
3056:src/xeq.c     **** 			}
3057:src/xeq.c     **** 			if (pos_lim_ds < 0 && emax_plus < 0)
3058:src/xeq.c     **** 				emax_plus = 0;
3059:src/xeq.c     **** 		}
3060:src/xeq.c     **** 		else {
3061:src/xeq.c     **** 			if (pos_type_dc == 2) { // low limit
3062:src/xeq.c     **** 				if (emax_plus < pos_lim_dc)
3063:src/xeq.c     **** 					emax_plus = pos_lim_dc;
3064:src/xeq.c     **** 			}
3065:src/xeq.c     **** 			else if (pos_type_dc == 3) { // high limit
3066:src/xeq.c     **** 				if (emax_plus > pos_lim_dc)
3067:src/xeq.c     **** 					emax_plus = pos_lim_dc;
3068:src/xeq.c     **** 			}
3069:src/xeq.c     **** 			if (pos_lim_dc < 0 && emax_plus < 0)
3070:src/xeq.c     **** 				emax_plus = 0;
3071:src/xeq.c     **** 		}
3072:src/xeq.c     **** 
3073:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
3074:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
3075:src/xeq.c     **** 		    && (dp_exp_chs_ds != exp_chs_ds)) {
3076:src/xeq.c     **** 			if (dp_exp_chs_ds == 0) {
3077:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3078:src/xeq.c     **** 				if (emax_minus < emax_plus)
3079:src/xeq.c     **** 					emax = emax_minus;
3080:src/xeq.c     **** 				else
3081:src/xeq.c     **** 					emax = emax_plus;
3082:src/xeq.c     **** 			}
3083:src/xeq.c     **** 			else if (dp_exp_chs_ds == 3) {
3084:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3085:src/xeq.c     **** 				if (emax_minus > emax_plus)
3086:src/xeq.c     **** 					emax = emax_minus;
3087:src/xeq.c     **** 				else
3088:src/xeq.c     **** 					emax = emax_plus;
3089:src/xeq.c     **** 			}
3090:src/xeq.c     **** 			else {
3091:src/xeq.c     **** 				if (dp_exp_chs_ds == 2 && !was_digit_entered)
3092:src/xeq.c     **** 					return;
ARM GAS  /tmp/cccVhVyH.s 			page 65


3093:src/xeq.c     **** 				if (*p == 'D')
3094:src/xeq.c     **** 					emax = emax_minus;
3095:src/xeq.c     **** 				else
3096:src/xeq.c     **** 					emax = emax_plus;
3097:src/xeq.c     **** 			}
3098:src/xeq.c     **** 		}
3099:src/xeq.c     **** 		else if (large_exp_entry && dbl
3100:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
3101:src/xeq.c     **** 		         && (dp_exp_chs_dc != exp_chs_dc)) {
3102:src/xeq.c     **** 			if (dp_exp_chs_dc == 0) {
3103:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3104:src/xeq.c     **** 				if (emax_minus < emax_plus)
3105:src/xeq.c     **** 					emax = emax_minus;
3106:src/xeq.c     **** 				else
3107:src/xeq.c     **** 					emax = emax_plus;
3108:src/xeq.c     **** 			}
3109:src/xeq.c     **** 			else if (dp_exp_chs_dc == 3) {
3110:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3111:src/xeq.c     **** 				if (emax_minus > emax_plus)
3112:src/xeq.c     **** 					emax = emax_minus;
3113:src/xeq.c     **** 				else
3114:src/xeq.c     **** 					emax = emax_plus;
3115:src/xeq.c     **** 			}
3116:src/xeq.c     **** 			else {
3117:src/xeq.c     **** 				if (dp_exp_chs_dc == 2 && !was_digit_entered)
3118:src/xeq.c     **** 					return;
3119:src/xeq.c     **** 				if (*p == 'D')
3120:src/xeq.c     **** 					emax = emax_minus;
3121:src/xeq.c     **** 				else
3122:src/xeq.c     **** 					emax = emax_plus;
3123:src/xeq.c     **** 			}
3124:src/xeq.c     **** 		}
3125:src/xeq.c     **** 		else if (flag_D && exp_chs_dc != exp_chs_ds) {
3126:src/xeq.c     **** 			if (exp_chs_ds == 0) {
3127:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3128:src/xeq.c     **** 				if (emax_minus < emax_plus)
3129:src/xeq.c     **** 					emax = emax_minus;
3130:src/xeq.c     **** 				else
3131:src/xeq.c     **** 					emax = emax_plus;
3132:src/xeq.c     **** 			}
3133:src/xeq.c     **** 			else if (exp_chs_ds == 3) {
3134:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3135:src/xeq.c     **** 				if (emax_minus > emax_plus)
3136:src/xeq.c     **** 					emax = emax_minus;
3137:src/xeq.c     **** 				else
3138:src/xeq.c     **** 					emax = emax_plus;
3139:src/xeq.c     **** 			}
3140:src/xeq.c     **** 			else {
3141:src/xeq.c     **** 				if (exp_chs_ds == 2 && !was_digit_entered)
3142:src/xeq.c     **** 					return;
3143:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3144:src/xeq.c     **** 				if (*p == 'D')
3145:src/xeq.c     **** #else
3146:src/xeq.c     **** 				if (*p == '-')
3147:src/xeq.c     **** #endif
3148:src/xeq.c     **** 					emax = emax_minus;
3149:src/xeq.c     **** 				else
ARM GAS  /tmp/cccVhVyH.s 			page 66


3150:src/xeq.c     **** 					emax = emax_plus;
3151:src/xeq.c     **** 			}
3152:src/xeq.c     **** 		}
3153:src/xeq.c     **** 		else {
3154:src/xeq.c     **** 			if (exp_chs_dc == 0) {
3155:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3156:src/xeq.c     **** 				if (emax_minus < emax_plus)
3157:src/xeq.c     **** 					emax = emax_minus;
3158:src/xeq.c     **** 				else
3159:src/xeq.c     **** 					emax = emax_plus;
3160:src/xeq.c     **** 			}
3161:src/xeq.c     **** 			else if (exp_chs_dc == 3) {
3162:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3163:src/xeq.c     **** 				if (emax_minus > emax_plus)
3164:src/xeq.c     **** 					emax = emax_minus;
3165:src/xeq.c     **** 				else
3166:src/xeq.c     **** 					emax = emax_plus;
3167:src/xeq.c     **** 			}
3168:src/xeq.c     **** 			else {
3169:src/xeq.c     **** 				if (exp_chs_dc == 2 && !was_digit_entered)
3170:src/xeq.c     **** 					return;
3171:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3172:src/xeq.c     **** 				if (*p == 'D')
3173:src/xeq.c     **** #else
3174:src/xeq.c     **** 				if (*p == '-')
3175:src/xeq.c     **** #endif
3176:src/xeq.c     **** 					emax = emax_minus;
3177:src/xeq.c     **** 				else
3178:src/xeq.c     **** 					emax = emax_plus;
3179:src/xeq.c     **** 			}
3180:src/xeq.c     **** 		}
3181:src/xeq.c     **** 	}
3182:src/xeq.c     **** 
3183:src/xeq.c     **** do_not_check_limits:
3184:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3185:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3186:src/xeq.c     **** 	p++;
3187:src/xeq.c     **** #  else
3188:src/xeq.c     **** 	if (*p == '-')
3189:src/xeq.c     **** 		p++;
3190:src/xeq.c     **** #  endif
3191:src/xeq.c     **** 	/* Check if the current exponent exceeds the range.
3192:src/xeq.c     **** 	 * If so, shift it back until it doesn't.
3193:src/xeq.c     **** 	 * Also remove leading zeros.
3194:src/xeq.c     **** 	 */
3195:src/xeq.c     **** 	while (s_to_i(p) > emax || *p == '0') {
3196:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
3197:src/xeq.c     **** 			p[i] = p[i + 1];
3198:src/xeq.c     **** 		CmdLineLength--;
3199:src/xeq.c     **** 	}
3200:src/xeq.c     **** #else
3201:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3202:src/xeq.c     **** 	negative = (*p == 'D');
3203:src/xeq.c     **** 	p++;
3204:src/xeq.c     **** #  else
3205:src/xeq.c     **** 	if (*p == '-') {
3206:src/xeq.c     **** 		p++;
ARM GAS  /tmp/cccVhVyH.s 			page 67


3207:src/xeq.c     **** 		negative = 1;
3208:src/xeq.c     **** 	}
3209:src/xeq.c     **** 	else negative = 0;
3210:src/xeq.c     **** #  endif
3211:src/xeq.c     **** 	// Display a warning if the exponent is out of range.
3212:src/xeq.c     **** 	if ((i = s_to_i(p)) > emax) {
3213:src/xeq.c     **** 		if (was_digit_entered) {
3214:src/xeq.c     **** 			CmdLineLength--;
3215:src/xeq.c     **** 			if (large_exp_entry && dbl ? i > 9999 : i > 999) {
3216:src/xeq.c     **** 				report_warn(ERR_TOO_LONG);
3217:src/xeq.c     **** 				return;
3218:src/xeq.c     **** 			}
3219:src/xeq.c     **** 		}
3220:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3221:src/xeq.c     **** 		else if (('D' | 1) == 'E')
3222:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3223:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3224:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3225:src/xeq.c     **** 		else
3226:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3227:src/xeq.c     **** #  else
3228:src/xeq.c     **** 		else if (negative) {
3229:src/xeq.c     **** 			scopy(p - 1, p);
3230:src/xeq.c     **** 			CmdLineLength--;
3231:src/xeq.c     **** 		}
3232:src/xeq.c     **** 		else {
3233:src/xeq.c     **** 			xcopy(p + 1, p, CMDLINELEN - 1 - CmdLineEex);
3234:src/xeq.c     **** 			*p = '-';
3235:src/xeq.c     **** 			CmdLineLength++;
3236:src/xeq.c     **** 		}
3237:src/xeq.c     **** #  endif
3238:src/xeq.c     **** 		if (negative)
3239:src/xeq.c     **** 			report_warn(ERR_TOO_SMALL);
3240:src/xeq.c     **** 		else
3241:src/xeq.c     **** 			report_warn(ERR_TOO_BIG);
3242:src/xeq.c     **** 	}
3243:src/xeq.c     **** #endif
3244:src/xeq.c     **** }
3245:src/xeq.c     **** 
3246:src/xeq.c     **** /* We've encountered a CHS while entering the command line.
3247:src/xeq.c     ****  */
3248:src/xeq.c     **** static void cmdlinechs(void) {
3249:src/xeq.c     **** 	if (CmdLineEex) {
3250:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3251:src/xeq.c     **** 		// 'D' instead of 'E' indicates a negative exponent.
3252:src/xeq.c     **** 		// Four-digit exponents wouldn't fit into Cmdline if we used 'E-'.
3253:src/xeq.c     **** 		if (('D' | 1) == 'E')
3254:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3255:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3256:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3257:src/xeq.c     **** 		else
3258:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3259:src/xeq.c     **** #else
3260:src/xeq.c     **** 		const unsigned int pos = CmdLineEex + 1;
3261:src/xeq.c     **** 		if (CmdLineLength <= pos) {
3262:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
3263:src/xeq.c     **** 				append_cmdline('-');
ARM GAS  /tmp/cccVhVyH.s 			page 68


3264:src/xeq.c     **** 		} else if (Cmdline[pos] == '-') {
3265:src/xeq.c     **** 			if (CmdLineLength != pos)
3266:src/xeq.c     **** 				xcopy(Cmdline + pos, Cmdline + pos + 1, CmdLineLength-pos);
3267:src/xeq.c     **** 			CmdLineLength--;
3268:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3269:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
3270:src/xeq.c     **** 			Cmdline[pos] = '-';
3271:src/xeq.c     **** 			CmdLineLength++;
3272:src/xeq.c     **** 		}
3273:src/xeq.c     **** #endif
3274:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC == 1 \
3275:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DS == -1 || SP_EXP_ENTRY_CHS_DS == 1 \
3276:src/xeq.c     ****     || ((DP_EXP_ENTRY_CHS_DC == 1 || DP_EXP_ENTRY_CHS_DS == 1) && defined(LARGE_EXPONENT_ENTRY))
3277:src/xeq.c     **** 		exponent_adjusted(0);
3278:src/xeq.c     **** #endif
3279:src/xeq.c     **** 	} else {
3280:src/xeq.c     **** 		if (Cmdline[0] == '-') {
3281:src/xeq.c     **** 			if (CmdLineLength > 1)
3282:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
3283:src/xeq.c     **** 			CmdLineLength--;
3284:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3285:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
3286:src/xeq.c     **** 			Cmdline[0] = '-';
3287:src/xeq.c     **** 			CmdLineLength++;
3288:src/xeq.c     **** 		}
3289:src/xeq.c     **** 	}
3290:src/xeq.c     **** }
3291:src/xeq.c     **** 
3292:src/xeq.c     **** /* Execute a tests command
3293:src/xeq.c     ****  */
3294:src/xeq.c     **** static void do_tst(int cmp, const enum tst_op op) {
3295:src/xeq.c     **** 	int a = 0;
3296:src/xeq.c     **** 	int iszero, isneg;
3297:src/xeq.c     **** 
3298:src/xeq.c     **** 	process_cmdline_set_lift();
3299:src/xeq.c     **** 
3300:src/xeq.c     **** 	if (is_intmode()) {
3301:src/xeq.c     **** 		unsigned long long int xv, yv;
3302:src/xeq.c     **** 		int xs, ys;
3303:src/xeq.c     **** 
3304:src/xeq.c     **** 		xv = extract_value(getX_int(), &xs);
3305:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
3306:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
3307:src/xeq.c     **** 			ys = 0;
3308:src/xeq.c     **** 		} else
3309:src/xeq.c     **** 			yv = extract_value(get_reg_n_int(cmp), &ys);
3310:src/xeq.c     **** 
3311:src/xeq.c     **** 		if (xv == 0 && yv == 0)
3312:src/xeq.c     **** 			iszero = 1;
3313:src/xeq.c     **** 		else
3314:src/xeq.c     **** 			iszero = (xv == yv) && (xs == ys);
3315:src/xeq.c     **** 
3316:src/xeq.c     **** 		if (xs == ys) {		// same sign
3317:src/xeq.c     **** 			if (xs)		// both negative
3318:src/xeq.c     **** 				isneg = xv > yv;
3319:src/xeq.c     **** 			else		// both positive
3320:src/xeq.c     **** 				isneg = xv < yv;
ARM GAS  /tmp/cccVhVyH.s 			page 69


3321:src/xeq.c     **** 		} else
3322:src/xeq.c     **** 			isneg = xs;	// opposite signs
3323:src/xeq.c     **** 	} else {
3324:src/xeq.c     **** 		decNumber t, x, r;
3325:src/xeq.c     **** 
3326:src/xeq.c     **** 		getX(&x);
3327:src/xeq.c     **** 		if (decNumberIsNaN(&x))
3328:src/xeq.c     **** 			goto flse;
3329:src/xeq.c     **** 
3330:src/xeq.c     **** 		getRegister(&t, cmp);
3331:src/xeq.c     **** 		if (decNumberIsNaN(&t))
3332:src/xeq.c     **** 			goto flse;
3333:src/xeq.c     **** 
3334:src/xeq.c     **** 		if (op == TST_APX) {
3335:src/xeq.c     **** 			decNumberRnd(&x, &x);
3336:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
3337:src/xeq.c     **** 				decNumberRnd(&t, &t);
3338:src/xeq.c     **** 		}
3339:src/xeq.c     **** 		dn_compare(&r, &x, &t);
3340:src/xeq.c     **** 		iszero = dn_eq0(&r);
3341:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
3342:src/xeq.c     **** 	}
3343:src/xeq.c     **** 
3344:src/xeq.c     **** 	switch (op) {
3345:src/xeq.c     **** 	case TST_APX:
3346:src/xeq.c     **** 	case TST_EQ:	a = iszero;		break;
3347:src/xeq.c     **** 	case TST_NE:	a = !iszero;		break;
3348:src/xeq.c     **** 	case TST_LT:	a = isneg && !iszero;	break;
3349:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
3350:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
3351:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
3352:src/xeq.c     **** 	default:	a = 0;			break;
3353:src/xeq.c     **** 	}
3354:src/xeq.c     **** 
3355:src/xeq.c     **** flse:	fin_tst(a);
3356:src/xeq.c     **** }
3357:src/xeq.c     **** 
3358:src/xeq.c     **** void check_zero(enum nilop op) {
3359:src/xeq.c     **** 	int neg;
3360:src/xeq.c     **** 	int zero;
3361:src/xeq.c     **** 
3362:src/xeq.c     **** 	if (is_intmode()) {
3363:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
3364:src/xeq.c     **** 		zero = (xv == 0);
3365:src/xeq.c     **** 	} else {
3366:src/xeq.c     **** 		decNumber x;
3367:src/xeq.c     **** 		getX(&x);
3368:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
3369:src/xeq.c     **** 		zero = dn_eq0(&x);
3370:src/xeq.c     **** 	}
3371:src/xeq.c     **** 	if (op == OP_Xeq_pos0)
3372:src/xeq.c     **** 		fin_tst(zero && !neg);
3373:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
3374:src/xeq.c     **** 		fin_tst(zero && neg);
3375:src/xeq.c     **** }
3376:src/xeq.c     **** 
3377:src/xeq.c     **** void cmdtest(unsigned int arg, enum rarg op) {
ARM GAS  /tmp/cccVhVyH.s 			page 70


3378:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
3379:src/xeq.c     **** }
3380:src/xeq.c     **** 
3381:src/xeq.c     **** static void do_ztst(const decNumber *re, const decNumber *im, enum tst_op op) {
3382:src/xeq.c     **** 	decNumber x, y;
3383:src/xeq.c     **** 
3384:src/xeq.c     **** 	process_cmdline_set_lift();
3385:src/xeq.c     **** 	if (is_intmode()) {
3386:src/xeq.c     **** 		bad_mode_error();
3387:src/xeq.c     **** 		return;
3388:src/xeq.c     **** 	}
3389:src/xeq.c     **** 	getXY(&x, &y);
3390:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
3391:src/xeq.c     **** 		fin_tst(0);
3392:src/xeq.c     **** 		return;
3393:src/xeq.c     **** 	}
3394:src/xeq.c     **** 	fin_tst((op == TST_EQ) == (dn_eq(&x, re) && dn_eq(&y, im)));
3395:src/xeq.c     **** }
3396:src/xeq.c     **** 
3397:src/xeq.c     **** void cmdztest(unsigned int arg, enum rarg op) {
3398:src/xeq.c     **** 	decNumber re, im;
3399:src/xeq.c     **** 	getRegister(&re, arg);
3400:src/xeq.c     **** 	getRegister(&im, arg + 1);
3401:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
3402:src/xeq.c     **** }
3403:src/xeq.c     **** 
3404:src/xeq.c     **** static int incdec(unsigned int arg, int inc) {
3405:src/xeq.c     **** 	if (is_intmode()) {
3406:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3407:src/xeq.c     **** 		int xs;
3408:src/xeq.c     **** 		unsigned long long int xv;
3409:src/xeq.c     **** 
3410:src/xeq.c     **** 		if (inc)
3411:src/xeq.c     **** 			x = intAdd(x, 1LL);
3412:src/xeq.c     **** 		else
3413:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3414:src/xeq.c     **** 		set_reg_n_int(arg, x);
3415:src/xeq.c     **** 
3416:src/xeq.c     **** 		xv = extract_value(x, &xs);
3417:src/xeq.c     **** 		return xv != 0;
3418:src/xeq.c     **** 	} else {
3419:src/xeq.c     **** 		decNumber x, y;
3420:src/xeq.c     **** 
3421:src/xeq.c     **** 		getRegister(&x, arg);
3422:src/xeq.c     **** 		if (inc)
3423:src/xeq.c     **** 			dn_inc(&x);
3424:src/xeq.c     **** 		else
3425:src/xeq.c     **** 			dn_dec(&x);
3426:src/xeq.c     **** 		setRegister(arg, &x);
3427:src/xeq.c     **** 		decNumberTrunc(&y, &x);
3428:src/xeq.c     **** 		return ! dn_eq0(&y);
3429:src/xeq.c     **** 	}
3430:src/xeq.c     **** }
3431:src/xeq.c     **** 
3432:src/xeq.c     **** void cmdlincdec(unsigned int arg, enum rarg op) {
3433:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
3434:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 71


3435:src/xeq.c     **** 
3436:src/xeq.c     **** void cmdloopz(unsigned int arg, enum rarg op) {
3437:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
3438:src/xeq.c     **** }
3439:src/xeq.c     **** 
3440:src/xeq.c     **** void cmdloop(unsigned int arg, enum rarg op) {
3441:src/xeq.c     **** 	if (is_intmode()) {
3442:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3443:src/xeq.c     **** 		int xs;
3444:src/xeq.c     **** 		unsigned long long int xv;
3445:src/xeq.c     **** 
3446:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE)
3447:src/xeq.c     **** 			x = intAdd(x, 1LL);
3448:src/xeq.c     **** 		else
3449:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3450:src/xeq.c     **** 		set_reg_n_int(arg, x);
3451:src/xeq.c     **** 
3452:src/xeq.c     **** 		xv = extract_value(x, &xs);
3453:src/xeq.c     **** 		if (op == RARG_ISG)
3454:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
3455:src/xeq.c     **** 		else if (op == RARG_DSE)
3456:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
3457:src/xeq.c     **** 		else if (op == RARG_ISE)
3458:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
3459:src/xeq.c     **** 		else // if (op == RARG_DSL)
3460:src/xeq.c     **** 			fin_tst(! (xs != 0 && xv > 0));		// < 0
3461:src/xeq.c     **** 		return;
3462:src/xeq.c     **** 	} else {
3463:src/xeq.c     **** 		decNumber x, i, f, n, u;
3464:src/xeq.c     **** 
3465:src/xeq.c     **** 		getRegister(&x, arg);
3466:src/xeq.c     **** 
3467:src/xeq.c     **** 		// Break the number into the important bits
3468:src/xeq.c     **** 		// nnnnn.fffii
3469:src/xeq.c     **** 		dn_abs(&f, &x);
3470:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
3471:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
3472:src/xeq.c     **** 		if (decNumberIsNegative(&x))
3473:src/xeq.c     **** 			dn_minus(&n, &n);
3474:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
3475:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
3476:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
3477:src/xeq.c     **** 		dn_mul100(&x, &i);
3478:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
3479:src/xeq.c     **** 		if (dn_eq0(&i))
3480:src/xeq.c     **** 			dn_1(&i);
3481:src/xeq.c     **** 
3482:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE) {
3483:src/xeq.c     **** 			dn_add(&n, &n, &i);
3484:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3485:src/xeq.c     **** 			if (op == RARG_ISE)
3486:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
3487:src/xeq.c     **** 			else
3488:src/xeq.c     **** 				fin_tst(dn_ge0(&x));
3489:src/xeq.c     **** 		} else {
3490:src/xeq.c     **** 			dn_subtract(&n, &n, &i);
3491:src/xeq.c     **** 			dn_compare(&x, &f, &n);
ARM GAS  /tmp/cccVhVyH.s 			page 72


3492:src/xeq.c     **** 			if (op == RARG_DSL)
3493:src/xeq.c     **** 				fin_tst(dn_le0(&x));
3494:src/xeq.c     **** 			else
3495:src/xeq.c     **** 				fin_tst(dn_lt0(&x));
3496:src/xeq.c     **** 		}
3497:src/xeq.c     **** 
3498:src/xeq.c     **** 		// Finally rebuild the result
3499:src/xeq.c     **** 		if (decNumberIsNegative(&n)) {
3500:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
3501:src/xeq.c     **** 		} else
3502:src/xeq.c     **** 			dn_add(&x, &n, &u);
3503:src/xeq.c     **** 		setRegister(arg, &x);
3504:src/xeq.c     **** 	}
3505:src/xeq.c     **** }
3506:src/xeq.c     **** 
3507:src/xeq.c     **** 
3508:src/xeq.c     **** /* Shift a real number by 10 to the specified power
3509:src/xeq.c     ****  */
3510:src/xeq.c     **** void op_shift_digit(unsigned int n, enum rarg op) {
3511:src/xeq.c     **** 	decNumber x;
3512:src/xeq.c     **** 	int adjust = n;
3513:src/xeq.c     **** 
3514:src/xeq.c     **** 	if (is_intmode()) {
3515:src/xeq.c     **** 		bad_mode_error();
3516:src/xeq.c     **** 		return;
3517:src/xeq.c     **** 	}
3518:src/xeq.c     **** 	getX(&x);
3519:src/xeq.c     **** 	setlastX();
3520:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
3521:src/xeq.c     **** 		return;
3522:src/xeq.c     **** 	if (op == RARG_SRD)
3523:src/xeq.c     **** 		adjust = -adjust;
3524:src/xeq.c     **** 	x.exponent += adjust;
3525:src/xeq.c     **** 	setX(&x);
3526:src/xeq.c     **** }
3527:src/xeq.c     **** 
3528:src/xeq.c     **** 
3529:src/xeq.c     **** /* Return a pointer to the byte with the indicated flag in it.
3530:src/xeq.c     ****  * also return a byte with the relevant bit mask set up.
3531:src/xeq.c     ****  * Also, handle local flags.
3532:src/xeq.c     ****  */
3533:src/xeq.c     **** static unsigned short int *flag_word(int n, unsigned short int *mask) {
 467              		.loc 1 3533 71 is_stmt 1 view -0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471              		@ link register save eliminated.
3534:src/xeq.c     **** 	unsigned short int *p;
 472              		.loc 1 3534 2 view .LVU143
3535:src/xeq.c     **** 
3536:src/xeq.c     **** 	if (n >= LOCAL_FLAG_BASE) {
 473              		.loc 1 3536 2 view .LVU144
 474              		.loc 1 3536 5 is_stmt 0 view .LVU145
 475 0000 6F28     		cmp	r0, #111
3533:src/xeq.c     **** 	unsigned short int *p;
 476              		.loc 1 3533 71 view .LVU146
 477 0002 10B4     		push	{r4}
ARM GAS  /tmp/cccVhVyH.s 			page 73


 478              		.cfi_def_cfa_offset 4
 479              		.cfi_offset 4, -4
 480              		.loc 1 3536 5 view .LVU147
 481 0004 2CDD     		ble	.L42
3537:src/xeq.c     **** 		n -= LOCAL_FLAG_BASE;
 482              		.loc 1 3537 3 is_stmt 1 view .LVU148
 483              		.loc 1 3537 5 is_stmt 0 view .LVU149
 484 0006 7038     		subs	r0, r0, #112
 485              	.LVL42:
3538:src/xeq.c     **** 		if (n > XROM_SYSTEM_FLAG_BASE && XromFlags.xIN) {
 486              		.loc 1 3538 3 is_stmt 1 view .LVU150
 487              		.loc 1 3538 6 is_stmt 0 view .LVU151
 488 0008 0828     		cmp	r0, #8
 489 000a 04DD     		ble	.L43
 490              		.loc 1 3538 33 discriminator 1 view .LVU152
 491 000c 194B     		ldr	r3, .L54
 492 000e 93F90120 		ldrsb	r2, [r3, #1]
 493 0012 002A     		cmp	r2, #0
 494 0014 18DB     		blt	.L44
 495              	.L43:
3539:src/xeq.c     **** 			// XROM special
3540:src/xeq.c     **** 			p = &XromFlagWord;
3541:src/xeq.c     **** 		}
3542:src/xeq.c     **** 		else if (LocalRegs & 1) {
 496              		.loc 1 3542 8 is_stmt 1 view .LVU153
 497              		.loc 1 3542 12 is_stmt 0 view .LVU154
 498 0016 184B     		ldr	r3, .L54+4
 499 0018 1B68     		ldr	r3, [r3]
 500 001a B3F8DE37 		ldrh	r3, [r3, #2014]
 501 001e 43F34A12 		sbfx	r2, r3, #5, #11
 502              		.loc 1 3542 11 view .LVU155
 503 0022 13F0200F 		tst	r3, #32
3543:src/xeq.c     **** 			// Odd frame: flags are at end of frame
3544:src/xeq.c     **** 			p = RetStk + LocalRegs + local_levels() - 1;
 504              		.loc 1 3544 44 view .LVU156
 505 0026 154B     		ldr	r3, .L54+8
 506 0028 1B68     		ldr	r3, [r3]
3542:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 507              		.loc 1 3542 11 view .LVU157
 508 002a 1ED0     		beq	.L45
 509              		.loc 1 3544 4 is_stmt 1 view .LVU158
 510              	.LBB1358:
 511              	.LBI1358:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 512              		.loc 1 217 5 view .LVU159
 513              	.LBB1359:
 218:src/xeq.c     **** }
 514              		.loc 1 218 2 view .LVU160
 218:src/xeq.c     **** }
 515              		.loc 1 218 57 is_stmt 0 view .LVU161
 516 002c 002A     		cmp	r2, #0
 517 002e B8BF     		it	lt
 518 0030 33F81240 		ldrhlt	r4, [r3, r2, lsl #1]
 519              	.LBE1359:
 520              	.LBE1358:
 521              		.loc 1 3544 44 view .LVU162
 522 0034 02F10042 		add	r2, r2, #-2147483648
ARM GAS  /tmp/cccVhVyH.s 			page 74


 523 0038 B4BF     		ite	lt
 524 003a C4F30B04 		ubfxlt	r4, r4, #0, #12
 525              	.LBB1361:
 526              	.LBB1360:
 527 003e 0024     		movge	r4, #0
 528              	.LBE1360:
 529              	.LBE1361:
 530 0040 013A     		subs	r2, r2, #1
 531 0042 2244     		add	r2, r2, r4
 532              		.loc 1 3544 6 view .LVU163
 533 0044 03EB4203 		add	r3, r3, r2, lsl #1
 534              	.LVL43:
 535              	.L44:
3545:src/xeq.c     **** 		}
3546:src/xeq.c     **** 		else {
3547:src/xeq.c     **** 			// Even frame: Flags are at beginning of frame
3548:src/xeq.c     **** 			p = RetStk + LocalRegs + 1;
3549:src/xeq.c     **** 		}
3550:src/xeq.c     **** 	}
3551:src/xeq.c     **** 	else
3552:src/xeq.c     **** 		p = UserFlags;
3553:src/xeq.c     **** 
3554:src/xeq.c     **** 	if (mask != NULL)
 536              		.loc 1 3554 2 is_stmt 1 view .LVU164
 537              		.loc 1 3554 5 is_stmt 0 view .LVU165
 538 0048 21B1     		cbz	r1, .L47
3555:src/xeq.c     **** 		*mask = 1 << (n & 15);
 539              		.loc 1 3555 3 is_stmt 1 view .LVU166
 540              		.loc 1 3555 19 is_stmt 0 view .LVU167
 541 004a 00F00F04 		and	r4, r0, #15
 542              		.loc 1 3555 13 view .LVU168
 543 004e 0122     		movs	r2, #1
 544 0050 A240     		lsls	r2, r2, r4
 545              		.loc 1 3555 9 view .LVU169
 546 0052 0A80     		strh	r2, [r1]	@ movhi
 547              	.L47:
3556:src/xeq.c     **** 	return p + (n >> 4);
 548              		.loc 1 3556 2 is_stmt 1 view .LVU170
 549              		.loc 1 3556 16 is_stmt 0 view .LVU171
 550 0054 0011     		asrs	r0, r0, #4
 551              	.LVL44:
3557:src/xeq.c     **** }
 552              		.loc 1 3557 1 view .LVU172
 553 0056 03EB4000 		add	r0, r3, r0, lsl #1
 554 005a 5DF8044B 		ldr	r4, [sp], #4
 555              		.cfi_remember_state
 556              		.cfi_restore 4
 557              		.cfi_def_cfa_offset 0
 558 005e 7047     		bx	lr
 559              	.LVL45:
 560              	.L42:
 561              		.cfi_restore_state
3552:src/xeq.c     **** 
 562              		.loc 1 3552 3 is_stmt 1 view .LVU173
3552:src/xeq.c     **** 
 563              		.loc 1 3552 7 is_stmt 0 view .LVU174
 564 0060 054B     		ldr	r3, .L54+4
ARM GAS  /tmp/cccVhVyH.s 			page 75


3552:src/xeq.c     **** 
 565              		.loc 1 3552 5 view .LVU175
 566 0062 1B68     		ldr	r3, [r3]
 567 0064 03F5FE63 		add	r3, r3, #2032
 568              	.LVL46:
3552:src/xeq.c     **** 
 569              		.loc 1 3552 5 view .LVU176
 570 0068 EEE7     		b	.L44
 571              	.LVL47:
 572              	.L45:
3548:src/xeq.c     **** 		}
 573              		.loc 1 3548 4 is_stmt 1 view .LVU177
3548:src/xeq.c     **** 		}
 574              		.loc 1 3548 27 is_stmt 0 view .LVU178
 575 006a 0132     		adds	r2, r2, #1
3548:src/xeq.c     **** 		}
 576              		.loc 1 3548 6 view .LVU179
 577 006c 03EB4203 		add	r3, r3, r2, lsl #1
 578              	.LVL48:
3548:src/xeq.c     **** 		}
 579              		.loc 1 3548 6 view .LVU180
 580 0070 EAE7     		b	.L44
 581              	.L55:
 582 0072 00BF     		.align	2
 583              	.L54:
 584 0074 00000000 		.word	XromParams
 585 0078 00000000 		.word	main_ram
 586 007c 00000000 		.word	RetStk
 587              		.cfi_endproc
 588              	.LFE198:
 590              		.section	.text.set_zero,"ax",%progbits
 591              		.align	1
 592              		.p2align 2,,3
 593              		.syntax unified
 594              		.thumb
 595              		.thumb_func
 596              		.fpu fpv4-sp-d16
 598              	set_zero:
 599              	.LVL49:
 600              	.LFB106:
1549:src/xeq.c     **** 	zero_regs(x, 1);
 601              		.loc 1 1549 35 is_stmt 1 view -0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
 605              		@ link register save eliminated.
1550:src/xeq.c     **** }
 606              		.loc 1 1550 2 view .LVU182
 607              	.LBB1362:
 608              	.LBI1362:
1521:src/xeq.c     **** #if 0
 609              		.loc 1 1521 6 view .LVU183
 610              	.LBB1363:
1536:src/xeq.c     **** #endif
 611              		.loc 1 1536 2 view .LVU184
 612              	.LBB1364:
 613              	.LBI1364:
ARM GAS  /tmp/cccVhVyH.s 			page 76


1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 614              		.loc 1 1121 5 view .LVU185
 615              	.LBB1365:
1122:src/xeq.c     **** }
 616              		.loc 1 1122 2 view .LVU186
1122:src/xeq.c     **** }
 617              		.loc 1 1122 24 is_stmt 0 view .LVU187
 618 0000 074B     		ldr	r3, .L57
 619 0002 1B68     		ldr	r3, [r3]
 620 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 621 0008 44F20102 		movw	r2, #16385
 622 000c 1A40     		ands	r2, r2, r3
 623              	.LBE1365:
 624              	.LBE1364:
1536:src/xeq.c     **** #endif
 625              		.loc 1 1536 2 view .LVU188
 626 000e B2F5804F 		cmp	r2, #16384
 627 0012 0CBF     		ite	eq
 628 0014 1022     		moveq	r2, #16
 629 0016 0822     		movne	r2, #8
 630 0018 0021     		movs	r1, #0
 631 001a FFF7FEBF 		b	xset
 632              	.LVL50:
 633              	.L58:
1536:src/xeq.c     **** #endif
 634              		.loc 1 1536 2 view .LVU189
 635 001e 00BF     		.align	2
 636              	.L57:
 637 0020 00000000 		.word	main_ram
 638              	.LBE1363:
 639              	.LBE1362:
 640              		.cfi_endproc
 641              	.LFE106:
 643              		.section	.text.intResult,"ax",%progbits
 644              		.align	1
 645              		.p2align 2,,3
 646              		.syntax unified
 647              		.thumb
 648              		.thumb_func
 649              		.fpu fpv4-sp-d16
 651              	intResult:
 652              	.LVL51:
 653              	.LFB239:
3558:src/xeq.c     **** 
3559:src/xeq.c     **** int get_user_flag(int n) {
3560:src/xeq.c     **** 	unsigned short mask;
3561:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
3562:src/xeq.c     **** 
3563:src/xeq.c     **** 	return (*f & mask)? 1 : 0;
3564:src/xeq.c     **** }
3565:src/xeq.c     **** 
3566:src/xeq.c     **** void put_user_flag(int n, int f) {
3567:src/xeq.c     **** 	if (f)	set_user_flag(n);
3568:src/xeq.c     **** 	else	clr_user_flag(n);
3569:src/xeq.c     **** }
3570:src/xeq.c     **** 
3571:src/xeq.c     **** #ifndef set_user_flag
ARM GAS  /tmp/cccVhVyH.s 			page 77


3572:src/xeq.c     **** void set_user_flag(int n) {
3573:src/xeq.c     **** 	unsigned short mask;
3574:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3575:src/xeq.c     **** 
3576:src/xeq.c     **** 	*f |= mask;
3577:src/xeq.c     **** }
3578:src/xeq.c     **** 
3579:src/xeq.c     **** void clr_user_flag(int n) {
3580:src/xeq.c     **** 	unsigned short mask;
3581:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3582:src/xeq.c     **** 
3583:src/xeq.c     **** 	*f &= ~mask;
3584:src/xeq.c     **** }
3585:src/xeq.c     **** #endif
3586:src/xeq.c     **** 
3587:src/xeq.c     **** void cmdflag(unsigned int arg, enum rarg op) {
3588:src/xeq.c     **** 	unsigned short mask;
3589:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
3590:src/xeq.c     **** 	int flg = *f & mask;
3591:src/xeq.c     **** 
3592:src/xeq.c     **** 	switch (op) {
3593:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
3594:src/xeq.c     **** 	case RARG_CF:	flg = 0;			   break;
3595:src/xeq.c     **** 	case RARG_FF:	flg = flg? 0 : 1;		   break;
3596:src/xeq.c     **** 
3597:src/xeq.c     **** 	case RARG_FS:	fin_tst(flg);			   return;
3598:src/xeq.c     **** 	case RARG_FC:	fin_tst(! flg);			   return;
3599:src/xeq.c     **** 
3600:src/xeq.c     **** 	case RARG_FSC:	fin_tst(flg); flg = 0;		   break;
3601:src/xeq.c     **** 	case RARG_FSS:	fin_tst(flg); flg = 1;		   break;
3602:src/xeq.c     **** 	case RARG_FSF:	fin_tst(flg); flg = flg ? 0 : 1;   break;
3603:src/xeq.c     **** 
3604:src/xeq.c     **** 	case RARG_FCC:	fin_tst(! flg);	flg = 0;	   break;
3605:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
3606:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
3607:src/xeq.c     **** 
3608:src/xeq.c     **** 	default:
3609:src/xeq.c     **** 		return;
3610:src/xeq.c     **** 	}
3611:src/xeq.c     **** 
3612:src/xeq.c     **** 	// And write the value back
3613:src/xeq.c     **** 	if (flg)
3614:src/xeq.c     **** 		*f |= mask;
3615:src/xeq.c     **** 	else
3616:src/xeq.c     **** 		*f &= ~mask;
3617:src/xeq.c     **** 
3618:src/xeq.c     **** 	if ( arg == A_FLAG ) {
3619:src/xeq.c     **** 		dot( BIG_EQ, flg );
3620:src/xeq.c     **** 		//		finish_display(); // BIG_EQ
3621:src/xeq.c     **** 		lcd_refresh();
3622:src/xeq.c     **** 	}
3623:src/xeq.c     **** }
3624:src/xeq.c     **** 
3625:src/xeq.c     **** /* Reset all flags to off/false
3626:src/xeq.c     ****  */
3627:src/xeq.c     **** void clrflags(enum nilop op) {
3628:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
ARM GAS  /tmp/cccVhVyH.s 			page 78


3629:src/xeq.c     **** 	if (LocalRegs < 0) {
3630:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
3631:src/xeq.c     **** 	}
3632:src/xeq.c     **** }
3633:src/xeq.c     **** 
3634:src/xeq.c     **** 
3635:src/xeq.c     **** /* Integer word size
3636:src/xeq.c     ****  */
3637:src/xeq.c     **** void intws(unsigned int arg, enum rarg op) {
3638:src/xeq.c     **** 	if (is_intmode()) {
3639:src/xeq.c     **** 		int i, ss = stack_size();
3640:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
3641:src/xeq.c     **** 		long long int v;
3642:src/xeq.c     **** 
3643:src/xeq.c     **** 		for (i=0; i<ss; i++) {
3644:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
3645:src/xeq.c     **** 			UState.int_len = arg;
3646:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
3647:src/xeq.c     **** 			UState.int_len = oldlen;
3648:src/xeq.c     **** 		}
3649:src/xeq.c     **** 		v = mask_value(get_reg_n_int(regL_idx));
3650:src/xeq.c     **** 		UState.int_len = arg;
3651:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
3652:src/xeq.c     **** 	} else
3653:src/xeq.c     **** 	    UState.int_len = arg;
3654:src/xeq.c     **** }
3655:src/xeq.c     **** 
3656:src/xeq.c     **** 
3657:src/xeq.c     **** /* Convert from a real to a fraction
3658:src/xeq.c     ****  */
3659:src/xeq.c     **** 
3660:src/xeq.c     **** void get_maxdenom(decNumber *d) {
3661:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
3662:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
3663:src/xeq.c     **** }
3664:src/xeq.c     **** 
3665:src/xeq.c     **** void op_2frac(enum nilop op) {
3666:src/xeq.c     **** 	decNumber z, n, d, t;
3667:src/xeq.c     **** 
3668:src/xeq.c     **** 	if (UState.intm) {
3669:src/xeq.c     **** 		setX_int(1);
3670:src/xeq.c     **** 		return;
3671:src/xeq.c     **** 	}
3672:src/xeq.c     **** 
3673:src/xeq.c     **** 	getY(&z);			// Stack has been lifted already
3674:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
3675:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
3676:src/xeq.c     **** 	if (State2.runmode) {
3677:src/xeq.c     **** 		dn_divide(&t, &n, &d);
3678:src/xeq.c     **** 		dn_compare(&n, &t, &z);
3679:src/xeq.c     **** 		if (dn_eq0(&n))
3680:src/xeq.c     **** 			DispMsg = "y/x =";
3681:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
3682:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
3683:src/xeq.c     **** 			DispMsg = "y/x \007\344<";
3684:src/xeq.c     **** 		else
3685:src/xeq.c     **** 			DispMsg = "y/x \007\344>";
ARM GAS  /tmp/cccVhVyH.s 			page 79


3686:src/xeq.c     **** #else
3687:src/xeq.c     **** 			DispMsg = "y/x <";
3688:src/xeq.c     **** 		else
3689:src/xeq.c     **** 			DispMsg = "y/x >";
3690:src/xeq.c     **** #endif
3691:src/xeq.c     **** 	}
3692:src/xeq.c     **** }
3693:src/xeq.c     **** 
3694:src/xeq.c     **** void op_fracdenom(enum nilop op) {
3695:src/xeq.c     **** 	int s;
3696:src/xeq.c     **** 	unsigned long long int i;
3697:src/xeq.c     **** 
3698:src/xeq.c     **** 	i = getX_int_sgn(&s);
3699:src/xeq.c     **** 	if (i > 9999)
3700:src/xeq.c     **** 		UState.denom_max = 0;
3701:src/xeq.c     **** 	else if (i != 1)
3702:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
3703:src/xeq.c     **** 	else {
3704:src/xeq.c     **** 		setlastX();
3705:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
3706:src/xeq.c     **** 	}
3707:src/xeq.c     **** }
3708:src/xeq.c     **** 
3709:src/xeq.c     **** 
3710:src/xeq.c     **** /*  Switching from an integer mode to real mode
3711:src/xeq.c     ****  *  We convert the stack and LastX 
3712:src/xeq.c     ****  */
3713:src/xeq.c     **** static const unsigned short int StackRegMask[] = { 0x10f, 0x1ff };
3714:src/xeq.c     **** 
3715:src/xeq.c     **** void op_float(enum nilop op) {
3716:src/xeq.c     **** 
3717:src/xeq.c     **** 	if (is_intmode()) {
3718:src/xeq.c     **** 		int i;
3719:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
3720:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
3721:src/xeq.c     **** 			if (mask & 1) {
3722:src/xeq.c     **** 				// register belongs to stack
3723:src/xeq.c     **** 				register_from_int(i, i, op == OP_FLOAT_XIN);
3724:src/xeq.c     **** 			}
3725:src/xeq.c     **** 			else if (is_dblmode()) {
3726:src/xeq.c     **** 				// expand the other registers which have been left
3727:src/xeq.c     **** 				// in decimal64 format by the integer mode switch
3728:src/xeq.c     **** 				packed128_from_packed(&(get_reg_n(i)->d), Regs + i);
3729:src/xeq.c     **** 			}
3730:src/xeq.c     **** 		}
3731:src/xeq.c     **** 	}
3732:src/xeq.c     **** 	if (op != OP_FLOAT_XIN && op != OP_FLOAT_RCLM) {
3733:src/xeq.c     **** 		UState.fract = 0;
3734:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
3735:src/xeq.c     **** 	}
3736:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
3737:src/xeq.c     **** }
3738:src/xeq.c     **** 
3739:src/xeq.c     **** /*  Switch to integer mode.
3740:src/xeq.c     ****  *  We convert the stack and LastX
3741:src/xeq.c     ****  */
3742:src/xeq.c     **** static void switch_to_int(void) {
ARM GAS  /tmp/cccVhVyH.s 			page 80


3743:src/xeq.c     **** 	int i;
3744:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
3745:src/xeq.c     **** 	const int dbl = is_dblmode();
3746:src/xeq.c     **** 
3747:src/xeq.c     **** 	for (i = regK_idx; i >= regX_idx; --i, mask <<= 1) {
3748:src/xeq.c     **** 		if (mask & 0x800) {
3749:src/xeq.c     **** 			// register belongs to stack
3750:src/xeq.c     **** 			int_from_register(i, i);
3751:src/xeq.c     **** 		}
3752:src/xeq.c     **** 		else if (dbl) {
3753:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
3754:src/xeq.c     **** 			packed_from_packed128(Regs + i, &(get_reg_n(i)->d));
3755:src/xeq.c     **** 		}
3756:src/xeq.c     **** 	}
3757:src/xeq.c     **** }
3758:src/xeq.c     **** 
3759:src/xeq.c     **** static void set_base(unsigned int b) {
3760:src/xeq.c     **** 	UState.int_base = b - 1;
3761:src/xeq.c     **** 	if (!is_intmode())
3762:src/xeq.c     **** 		switch_to_int();
3763:src/xeq.c     **** }
3764:src/xeq.c     **** 
3765:src/xeq.c     **** void set_int_base(unsigned int arg, enum rarg op) {
3766:src/xeq.c     **** 	if (arg < 2) {
3767:src/xeq.c     **** 		if (arg == 0)
3768:src/xeq.c     **** 			op_float(OP_FLOAT);
3769:src/xeq.c     **** 		else
3770:src/xeq.c     **** 			op_fract(OP_FRACT);
3771:src/xeq.c     **** 	} else
3772:src/xeq.c     **** 		set_base(arg);
3773:src/xeq.c     **** }
3774:src/xeq.c     **** 
3775:src/xeq.c     **** 
3776:src/xeq.c     **** void op_fract(enum nilop op) {
3777:src/xeq.c     **** 	op_float(OP_FLOAT);
3778:src/xeq.c     **** 	UState.fract = 1;
3779:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
3780:src/xeq.c     **** 		UState.improperfrac = 1;
3781:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
3782:src/xeq.c     **** 		UState.improperfrac = 0;
3783:src/xeq.c     **** }
3784:src/xeq.c     **** 
3785:src/xeq.c     **** #ifdef INCLUDE_USER_MODE
3786:src/xeq.c     **** /* Save and restore user state.
3787:src/xeq.c     ****  */
3788:src/xeq.c     **** void cmdsavem(unsigned int arg, enum rarg op) {
3789:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
3790:src/xeq.c     **** }
3791:src/xeq.c     **** 
3792:src/xeq.c     **** void cmdrestm(unsigned int arg, enum rarg op) {
3793:src/xeq.c     **** 	const int dbl = is_dblmode();
3794:src/xeq.c     **** 	const int intm = is_intmode();
3795:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
3796:src/xeq.c     **** 
3797:src/xeq.c     **** 	// Fix things
3798:src/xeq.c     **** #ifndef DM42
3799:src/xeq.c     **** 	if ( UState.contrast == 0 )
ARM GAS  /tmp/cccVhVyH.s 			page 81


3800:src/xeq.c     **** 		UState.contrast = 6;
3801:src/xeq.c     **** #endif
3802:src/xeq.c     **** 	if (intm != is_intmode()) {
3803:src/xeq.c     **** 		// Switch back to decimal or integer mode
3804:src/xeq.c     **** 		UState.intm = intm;
3805:src/xeq.c     **** 		if (intm)
3806:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
3807:src/xeq.c     **** 		else
3808:src/xeq.c     **** 			switch_to_int();
3809:src/xeq.c     **** 	}
3810:src/xeq.c     **** 	if (! is_intmode() && dbl != is_dblmode()) {
3811:src/xeq.c     **** 		// Switch back to double/single precision
3812:src/xeq.c     **** 		UState.mode_double = dbl;
3813:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
3814:src/xeq.c     **** 	}
3815:src/xeq.c     **** }
3816:src/xeq.c     **** #endif
3817:src/xeq.c     **** 
3818:src/xeq.c     **** /* Process a single digit.
3819:src/xeq.c     ****  */
3820:src/xeq.c     **** #if 0 // unused
3821:src/xeq.c     **** static int is_digit(const char c) {
3822:src/xeq.c     **** 	if (c >= '0' && c <= '9')
3823:src/xeq.c     **** 		return 1;
3824:src/xeq.c     **** 	return 0;
3825:src/xeq.c     **** }
3826:src/xeq.c     **** 
3827:src/xeq.c     **** static int is_xdigit(const char c) {
3828:src/xeq.c     **** 	if (is_digit(c) || (c >= 'A' && c <= 'F'))
3829:src/xeq.c     **** 		return 1;
3830:src/xeq.c     **** 	return 0;
3831:src/xeq.c     **** }
3832:src/xeq.c     **** #endif
3833:src/xeq.c     **** 
3834:src/xeq.c     **** static void digit(unsigned int c) {
3835:src/xeq.c     **** 	const int intm = is_intmode();
3836:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
3837:src/xeq.c     **** 
3838:src/xeq.c     **** 	if (Cmdline[0] == '-')
3839:src/xeq.c     **** 		lim++;
3840:src/xeq.c     **** 	if (intm) {
3841:src/xeq.c     **** 		if (c >= int_base()) {
3842:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3843:src/xeq.c     **** 			return;
3844:src/xeq.c     **** 		}
3845:src/xeq.c     **** 	} else {
3846:src/xeq.c     **** 		if (c >= 10) {
3847:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3848:src/xeq.c     **** 			return;
3849:src/xeq.c     **** 		}
3850:src/xeq.c     **** 
3851:src/xeq.c     **** 		if (CmdLineEex) {
3852:src/xeq.c     **** 			lim = CMDLINELEN;
3853:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3854:src/xeq.c     **** 			if (CmdLineLength >= lim) {
3855:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
3856:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 82


3857:src/xeq.c     **** 				if (*p == '-')
3858:src/xeq.c     **** 					p++;
3859:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
3860:src/xeq.c     **** 					p[0] = p[1];
3861:src/xeq.c     **** 					p++;
3862:src/xeq.c     **** 				}
3863:src/xeq.c     **** 				CmdLineLength--;
3864:src/xeq.c     **** 			}
3865:src/xeq.c     **** #endif
3866:src/xeq.c     **** 		}
3867:src/xeq.c     **** 		else {
3868:src/xeq.c     **** 			lim += CmdLineDot;
3869:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
3870:src/xeq.c     **** 			if (CmdLineDot >= 2) {
3871:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
3872:src/xeq.c     **** 				// Make space for the minus sign
3873:src/xeq.c     **** 				lim = CMDLINELEN - (Cmdline[0] != '-');
3874:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3875:src/xeq.c     **** 				lim += 1 + (find_char(Cmdline, '.')[1] == '.');
3876:src/xeq.c     **** #  else
3877:src/xeq.c     **** 				lim++;
3878:src/xeq.c     **** #  endif
3879:src/xeq.c     **** 			}
3880:src/xeq.c     **** #endif
3881:src/xeq.c     **** 		}
3882:src/xeq.c     **** 	}
3883:src/xeq.c     **** 	if (CmdLineLength >= lim
3884:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
3885:src/xeq.c     **** 		report_warn(ERR_TOO_LONG);
3886:src/xeq.c     **** 		return;
3887:src/xeq.c     **** 	}
3888:src/xeq.c     **** 
3889:src/xeq.c     **** 	if (c >= 10)
3890:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
3891:src/xeq.c     **** 	else {
3892:src/xeq.c     **** 		// Leading zeros in the exponent aren't visible to the user,
3893:src/xeq.c     **** 		// and they're removed automatically if digits are shifted,
3894:src/xeq.c     **** 		// so it's more consistent if they can't be entered, either.
3895:src/xeq.c     **** 		if (c == 0 && CmdLineEex) {
3896:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
3897:src/xeq.c     **** 				return;
3898:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3899:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'D')
3900:src/xeq.c     **** 				return;
3901:src/xeq.c     **** #else
3902:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == '-')
3903:src/xeq.c     **** 				return;
3904:src/xeq.c     **** #endif
3905:src/xeq.c     **** 		}
3906:src/xeq.c     **** 
3907:src/xeq.c     **** 		append_cmdline(c + '0');
3908:src/xeq.c     **** 
3909:src/xeq.c     **** 		if (CmdLineEex)
3910:src/xeq.c     **** 			exponent_adjusted(1);
3911:src/xeq.c     **** 	}
3912:src/xeq.c     **** }
3913:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 83


3914:src/xeq.c     **** 
3915:src/xeq.c     **** void set_entry() {
3916:src/xeq.c     **** 	if (!Running && !XromRunning)
3917:src/xeq.c     **** 		State.entryp = 1;
3918:src/xeq.c     **** }
3919:src/xeq.c     **** 
3920:src/xeq.c     **** 
3921:src/xeq.c     **** /* Decode and process the specials.  These are niladic functions and
3922:src/xeq.c     ****  * commands with non-standard stack operation.
3923:src/xeq.c     ****  */
3924:src/xeq.c     **** static void specials(const opcode op) {
3925:src/xeq.c     **** 	int opm = argKIND(op);
3926:src/xeq.c     **** 
3927:src/xeq.c     **** 	switch (opm) {
3928:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
3929:src/xeq.c     **** 	case OP_3:	case OP_4:	case OP_5:
3930:src/xeq.c     **** 	case OP_6:	case OP_7:	case OP_8:
3931:src/xeq.c     **** 	case OP_9:	case OP_A:	case OP_B:
3932:src/xeq.c     **** 	case OP_C:	case OP_D:	case OP_E:
3933:src/xeq.c     **** 	case OP_F:
3934:src/xeq.c     **** 		digit(opm - OP_0);
3935:src/xeq.c     **** 		break;
3936:src/xeq.c     **** 
3937:src/xeq.c     **** 	case OP_DOT:
3938:src/xeq.c     **** 		if (is_intmode())
3939:src/xeq.c     **** 			break;
3940:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3941:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 13 + CmdLineDot) {
3942:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
3943:src/xeq.c     **** #else
3944:src/xeq.c     **** #  if defined(PRETTY_FRACTION_ENTRY)
3945:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + 2*CmdLineDot) {
3946:src/xeq.c     **** #  else
3947:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + CmdLineDot) {
3948:src/xeq.c     **** #  endif
3949:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '.'
3950:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
3951:src/xeq.c     **** #endif
3952:src/xeq.c     **** 				digit(0);
3953:src/xeq.c     **** 			CmdLineDot++;
3954:src/xeq.c     **** 			append_cmdline('.');
3955:src/xeq.c     **** 		}
3956:src/xeq.c     **** 		break;
3957:src/xeq.c     **** 
3958:src/xeq.c     **** 	case OP_EEX:
3959:src/xeq.c     **** 		if (is_intmode())
3960:src/xeq.c     **** 			break;
3961:src/xeq.c     **** 		else {
3962:src/xeq.c     **** #if INCLUDE_EEX_PI == 2
3963:src/xeq.c     **** 			const int eex_pi = 1;
3964:src/xeq.c     **** #elif INCLUDE_EEX_PI == 1
3965:src/xeq.c     **** 			const int eex_pi = get_user_flag(regL_idx);
3966:src/xeq.c     **** #else
3967:src/xeq.c     **** 			const int eex_pi = 0;
3968:src/xeq.c     **** #endif
3969:src/xeq.c     **** 
3970:src/xeq.c     **** 			if (CmdLineDot == 2) {
ARM GAS  /tmp/cccVhVyH.s 			page 84


3971:src/xeq.c     **** 				if (eex_pi) {
3972:src/xeq.c     **** 					// fraction entered (two dots); execute ENTER and enter pi
3973:src/xeq.c     **** 					if (is_bad_cmdline()) {
3974:src/xeq.c     **** 						if (Running || XromRunning)
3975:src/xeq.c     **** 							report_err(ERR_DOMAIN);
3976:src/xeq.c     **** 						break;
3977:src/xeq.c     **** 					}
3978:src/xeq.c     **** 					process_cmdline();
3979:src/xeq.c     **** 					lift();
3980:src/xeq.c     **** 					copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3981:src/xeq.c     **** 					set_lift();
3982:src/xeq.c     **** 				}
3983:src/xeq.c     **** 				break;
3984:src/xeq.c     **** 			}
3985:src/xeq.c     **** 			if (CmdLineEex || CmdLineLength >= CMDLINELEN)
3986:src/xeq.c     **** 				break;
3987:src/xeq.c     **** 			if (eex_pi && CmdLineLength == 0) {
3988:src/xeq.c     **** 				// empty command line: enter pi
3989:src/xeq.c     **** 				lift_if_enabled();
3990:src/xeq.c     **** 				copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3991:src/xeq.c     **** 				set_lift();
3992:src/xeq.c     **** 				break;
3993:src/xeq.c     **** 			}
3994:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 1)
3995:src/xeq.c     **** 			if (UState.fract)
3996:src/xeq.c     **** 				break;
3997:src/xeq.c     **** #endif
3998:src/xeq.c     **** 			if (CmdLineLength == 0)
3999:src/xeq.c     **** 				digit(1);
4000:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
4001:src/xeq.c     **** 			append_cmdline('E');
4002:src/xeq.c     **** 		}
4003:src/xeq.c     **** 		break;
4004:src/xeq.c     **** 
4005:src/xeq.c     **** 	case OP_CHS:
4006:src/xeq.c     **** 		if (CmdLineLength)
4007:src/xeq.c     **** 			cmdlinechs();
4008:src/xeq.c     **** 		else if (is_intmode()) {
4009:src/xeq.c     **** 			setX_int(intChs(getX_int()));
4010:src/xeq.c     **** 			set_lift();
4011:src/xeq.c     **** 		} else {
4012:src/xeq.c     **** 			decNumber x, r;
4013:src/xeq.c     **** 
4014:src/xeq.c     **** 			getX(&x);
4015:src/xeq.c     **** 			dn_minus(&r, &x);
4016:src/xeq.c     **** 			setX(&r);
4017:src/xeq.c     **** 			set_lift();
4018:src/xeq.c     **** 		}
4019:src/xeq.c     **** 		break;
4020:src/xeq.c     **** 
4021:src/xeq.c     **** 	case OP_CLX:
4022:src/xeq.c     **** 		if (Running)
4023:src/xeq.c     **** 			illegal(op);
4024:src/xeq.c     **** 		else if (CmdLineLength) {
4025:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
4026:src/xeq.c     **** 			if (CmdLineEex != 0 && Cmdline[CmdLineLength-1] == 'D') {
4027:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
ARM GAS  /tmp/cccVhVyH.s 			page 85


4028:src/xeq.c     **** 				break;
4029:src/xeq.c     **** 			}
4030:src/xeq.c     **** #endif
4031:src/xeq.c     **** 			CmdLineLength--;
4032:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
4033:src/xeq.c     **** 				CmdLineEex = 0;
4034:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
4035:src/xeq.c     **** 				CmdLineDot--;
4036:src/xeq.c     **** 		} else
4037:src/xeq.c     **** 			clrx(OP_rCLX);
4038:src/xeq.c     **** 		break;
4039:src/xeq.c     **** 
4040:src/xeq.c     **** 		case OP_ENTER:
4041:src/xeq.c     **** 		  if (ENTRY_RPN_ENABLED) {  
4042:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
4043:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
4044:src/xeq.c     **** 		      process_cmdline();     //JM
4045:src/xeq.c     **** 		    } else {                       //JM
4046:src/xeq.c     **** 		      process_cmdline();
4047:src/xeq.c     **** 		      lift();
4048:src/xeq.c     **** 		      if ( (XromRunning || Running) ) {//JMTEST Explicitly including standard functionality if co
4049:src/xeq.c     **** 			clr_lift();
4050:src/xeq.c     **** 		      }   
4051:src/xeq.c     **** 		    }                              //JM
4052:src/xeq.c     **** 		  }
4053:src/xeq.c     **** 		  else {
4054:src/xeq.c     **** 		    process_cmdline();
4055:src/xeq.c     **** 		    lift();
4056:src/xeq.c     **** 		    clr_lift();
4057:src/xeq.c     **** 		  }
4058:src/xeq.c     **** 		  break;
4059:src/xeq.c     **** 		  
4060:src/xeq.c     **** 	case OP_SIGMAPLUS:
4061:src/xeq.c     **** 	case OP_SIGMAMINUS:
4062:src/xeq.c     **** 		if (is_intmode()) {
4063:src/xeq.c     **** 			bad_mode_error();
4064:src/xeq.c     **** 			break;
4065:src/xeq.c     **** 		}
4066:src/xeq.c     **** 		process_cmdline();
4067:src/xeq.c     **** 		clr_lift();
4068:src/xeq.c     **** 		setlastX();
4069:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
4070:src/xeq.c     **** 			sigma_plus();
4071:src/xeq.c     **** 		else
4072:src/xeq.c     **** 			sigma_minus();
4073:src/xeq.c     **** 		sigma_val(OP_sigmaN);
4074:src/xeq.c     **** 		break;
4075:src/xeq.c     **** 
4076:src/xeq.c     **** 	// Conditional tests vs registers....
4077:src/xeq.c     **** 	case OP_Xeq0:	case OP_Xlt0:	case OP_Xgt0:
4078:src/xeq.c     **** 	case OP_Xne0:	case OP_Xle0:	case OP_Xge0:
4079:src/xeq.c     **** 	case OP_Xapx0:
4080:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ZERO, (enum tst_op)(opm - OP_Xeq0));
4081:src/xeq.c     **** 		break;
4082:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
4083:src/xeq.c     **** 		do_ztst(&const_0, &const_0, (enum tst_op)(opm - OP_Zeq0));
4084:src/xeq.c     **** 		break;
ARM GAS  /tmp/cccVhVyH.s 			page 86


4085:src/xeq.c     **** 
4086:src/xeq.c     **** 	case OP_Xeq1:	case OP_Xlt1:	case OP_Xgt1:
4087:src/xeq.c     **** 	case OP_Xne1:	case OP_Xle1:	case OP_Xge1:
4088:src/xeq.c     **** 	case OP_Xapx1:
4089:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ONE, (enum tst_op)(opm - OP_Xeq1));
4090:src/xeq.c     **** 		break;
4091:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
4092:src/xeq.c     **** 		do_ztst(&const_1, &const_0, (enum tst_op)(opm - OP_Zeq1));
4093:src/xeq.c     **** 		break;
4094:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
4095:src/xeq.c     **** 		do_ztst(&const_0, &const_1, (enum tst_op)(opm - OP_Zeqi));
4096:src/xeq.c     **** 		break;
4097:src/xeq.c     **** 
4098:src/xeq.c     **** 	default:
4099:src/xeq.c     **** 		illegal(op);
4100:src/xeq.c     **** 	}
4101:src/xeq.c     **** }
4102:src/xeq.c     **** 
4103:src/xeq.c     **** enum trig_modes get_trig_mode(void) {
4104:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
4105:src/xeq.c     **** 		return TRIG_RAD;
4106:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
4107:src/xeq.c     **** 	return (enum trig_modes) UState.trigmode;
4108:src/xeq.c     **** }
4109:src/xeq.c     **** 
4110:src/xeq.c     **** void op_double(enum nilop op) {
4111:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
4112:src/xeq.c     **** 	const int intm = is_intmode();
4113:src/xeq.c     **** 	int i;
4114:src/xeq.c     **** 
4115:src/xeq.c     **** 	if (dbl != UState.mode_double) {
4116:src/xeq.c     **** 		// Mode switch
4117:src/xeq.c     **** 		if (dbl) {
4118:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
4119:src/xeq.c     **** 				// Need space for double precision stack
4120:src/xeq.c     **** 				cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
4121:src/xeq.c     **** 				if (Error) {
4122:src/xeq.c     **** 					return;
4123:src/xeq.c     **** 				}
4124:src/xeq.c     **** 			}
4125:src/xeq.c     **** 
4126:src/xeq.c     **** 			UState.mode_double = 1;
4127:src/xeq.c     **** 			if (! intm) {
4128:src/xeq.c     **** 				// Convert X to K to double precision
4129:src/xeq.c     **** 				// Avoid this in integer mode
4130:src/xeq.c     **** 				for (i = 0; i < STACK_SIZE + EXTRA_REG; ++i)
4131:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
4132:src/xeq.c     **** 			}
4133:src/xeq.c     **** 		}
4134:src/xeq.c     **** 		else {
4135:src/xeq.c     **** 			if (! intm) {
4136:src/xeq.c     **** 				// Convert X to K to single precision
4137:src/xeq.c     **** 				// Avoid this in integer mode
4138:src/xeq.c     **** 				for (i = STACK_SIZE + EXTRA_REG - 1; i >= 0; --i)
4139:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
4140:src/xeq.c     **** 			}
4141:src/xeq.c     **** 			UState.mode_double = 0;
ARM GAS  /tmp/cccVhVyH.s 			page 87


4142:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
4143:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
4144:src/xeq.c     **** 		}
4145:src/xeq.c     **** 	}
4146:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
4147:src/xeq.c     **** 	if (intm) {
4148:src/xeq.c     **** 		// Do the necessary conversions from integer mode
4149:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
4150:src/xeq.c     **** 	}
4151:src/xeq.c     **** }
4152:src/xeq.c     **** 
4153:src/xeq.c     **** void cmdpause(unsigned int arg, enum rarg op) {
4154:src/xeq.c     **** 	display();
4155:src/xeq.c     **** #ifndef CONSOLE
4156:src/xeq.c     **** 	// decremented in the low level heartbeat
4157:src/xeq.c     **** 	Pause = arg;
4158:src/xeq.c     **** 	GoFast = (arg == 0);
4159:src/xeq.c     **** #elif 0
4160:src/xeq.c     **** 	start_pause(arg);
4161:src/xeq.c     **** #else	
4162:src/xeq.c     **** #if defined(WIN32) && !defined(__GNUC__)
4163:src/xeq.c     **** #pragma warning(disable:4996)
4164:src/xeq.c     **** 	sleep(arg/10);
4165:src/xeq.c     **** #else
4166:src/xeq.c     **** 	usleep(arg * 100000);
4167:src/xeq.c     **** #endif
4168:src/xeq.c     **** #endif
4169:src/xeq.c     **** }
4170:src/xeq.c     **** 
4171:src/xeq.c     **** 
4172:src/xeq.c     **** 
4173:src/xeq.c     **** void op_setspeed(enum nilop op) {
4174:src/xeq.c     **** #ifdef DM42
4175:src/xeq.c     **** #else
4176:src/xeq.c     ****   UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
4177:src/xeq.c     ****   update_speed(1);
4178:src/xeq.c     **** #endif
4179:src/xeq.c     **** }
4180:src/xeq.c     **** 
4181:src/xeq.c     **** 
4182:src/xeq.c     **** void op_prompt(enum nilop op) {
4183:src/xeq.c     **** 	set_running_off();
4184:src/xeq.c     **** 	alpha_view_common(regX_idx);
4185:src/xeq.c     **** }
4186:src/xeq.c     **** 
4187:src/xeq.c     **** /* Test if a number is an integer or fractional */
4188:src/xeq.c     **** /* Special numbers are neither */
4189:src/xeq.c     **** void XisInt(enum nilop op) {
4190:src/xeq.c     **** 	decNumber x;
4191:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
4192:src/xeq.c     **** 	if ( is_intmode() )
4193:src/xeq.c     **** 		result = op_int;
4194:src/xeq.c     **** 	else if (decNumberIsSpecial(getX(&x)))
4195:src/xeq.c     **** 		result = 0;
4196:src/xeq.c     **** 	else
4197:src/xeq.c     **** 	        result = (is_int(&x) == op_int);
4198:src/xeq.c     **** 	fin_tst(result);
ARM GAS  /tmp/cccVhVyH.s 			page 88


4199:src/xeq.c     **** }
4200:src/xeq.c     **** 
4201:src/xeq.c     **** /* Test if a number is an even or odd integer */
4202:src/xeq.c     **** /* fractional or special values are neither even nor odd */
4203:src/xeq.c     **** void XisEvenOrOdd(enum nilop op) {
4204:src/xeq.c     **** 	decNumber x;
4205:src/xeq.c     **** 	int odd = (op == OP_XisODD);
4206:src/xeq.c     **** 
4207:src/xeq.c     **** 	if (is_intmode()) {
4208:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
4209:src/xeq.c     **** 	} else {
4210:src/xeq.c     **** 		fin_tst(is_even(getX(&x)) == !odd);
4211:src/xeq.c     **** 	}
4212:src/xeq.c     **** }
4213:src/xeq.c     **** 
4214:src/xeq.c     **** 
4215:src/xeq.c     **** /* Test if a number is prime */
4216:src/xeq.c     **** void XisPrime(enum nilop op) {
4217:src/xeq.c     **** 	unsigned long long int i;
4218:src/xeq.c     **** 	int sgn;
4219:src/xeq.c     **** 
4220:src/xeq.c     **** 	i = getX_int_sgn(&sgn);
4221:src/xeq.c     **** 	if (!is_intmode()) {
4222:src/xeq.c     **** 		decNumber x;
4223:src/xeq.c     **** 
4224:src/xeq.c     **** 		getX(&x);
4225:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
4226:src/xeq.c     **** 			sgn = 1; // not prime
4227:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
4228:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
4229:src/xeq.c     **** 			i = 0xFFFFFFFFFFFFFFFFull;
4230:src/xeq.c     **** 	}
4231:src/xeq.c     **** 	fin_tst(sgn == 0 && isPrime(i));
4232:src/xeq.c     **** }
4233:src/xeq.c     **** 
4234:src/xeq.c     **** /* Test is a number is infinite.
4235:src/xeq.c     ****  */
4236:src/xeq.c     **** void isInfinite(enum nilop op) {
4237:src/xeq.c     **** 	decNumber x;
4238:src/xeq.c     **** 
4239:src/xeq.c     **** 	getX(&x);
4240:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
4241:src/xeq.c     **** }
4242:src/xeq.c     **** 
4243:src/xeq.c     **** /* Test for NaN.
4244:src/xeq.c     ****  * this could be done by testing x != x, but having a special command
4245:src/xeq.c     ****  * for it reads easier.
4246:src/xeq.c     ****  */
4247:src/xeq.c     **** void isNan(enum nilop op) {
4248:src/xeq.c     **** 	decNumber x;
4249:src/xeq.c     **** 
4250:src/xeq.c     **** 	getX(&x);
4251:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
4252:src/xeq.c     **** }
4253:src/xeq.c     **** 
4254:src/xeq.c     **** void isSpecial(enum nilop op) {
4255:src/xeq.c     **** 	decNumber x;
ARM GAS  /tmp/cccVhVyH.s 			page 89


4256:src/xeq.c     **** 
4257:src/xeq.c     **** 	getX(&x);
4258:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
4259:src/xeq.c     **** }
4260:src/xeq.c     **** 
4261:src/xeq.c     **** void op_entryp(enum nilop op) {
4262:src/xeq.c     **** 	fin_tst(State.entryp);
4263:src/xeq.c     **** }
4264:src/xeq.c     **** 
4265:src/xeq.c     **** /* Bulk register operations */
4266:src/xeq.c     **** int reg_decode(int *s, int *n, int *d, int flash) {
4267:src/xeq.c     **** 	decNumber x, y;
4268:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
4269:src/xeq.c     **** 
4270:src/xeq.c     **** 	if (is_intmode()) {
4271:src/xeq.c     **** 		bad_mode_error();
4272:src/xeq.c     **** 		return 1;
4273:src/xeq.c     **** 	}
4274:src/xeq.c     **** 	getX(&x);			// sss.nnddd~
4275:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
4276:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
4277:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
4278:src/xeq.c     **** 
4279:src/xeq.c     **** 	if (rsrc < 0) {
4280:src/xeq.c     **** 		if (!flash)
4281:src/xeq.c     **** 			goto range_error;
4282:src/xeq.c     **** 		rsrc = -rsrc;
4283:src/xeq.c     **** 	}
4284:src/xeq.c     **** 	else
4285:src/xeq.c     **** 		flash = 0;
4286:src/xeq.c     **** 
4287:src/xeq.c     **** 	rdest = rsrc % 1000;		// ddd
4288:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
4289:src/xeq.c     **** 	num = rsrc % 100;		// nn
4290:src/xeq.c     **** 	rsrc /= 100;			// sss
4291:src/xeq.c     **** 
4292:src/xeq.c     **** 	mx_src = flash ? BackupFlash._numregs
4293:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
4294:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
4295:src/xeq.c     **** 	       : global_regs();
4296:src/xeq.c     **** 	if (rsrc >= mx_src)
4297:src/xeq.c     **** 		goto range_error;
4298:src/xeq.c     **** 
4299:src/xeq.c     **** 	if (d != NULL) {
4300:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
4301:src/xeq.c     **** 
4302:src/xeq.c     **** 		if (num == 0) {
4303:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
4304:src/xeq.c     **** 			if (flash || (rsrc >= LOCAL_REG_BASE) != (rdest >= LOCAL_REG_BASE))
4305:src/xeq.c     **** 				// source & destination in different memory areas
4306:src/xeq.c     **** 				num = mx_dest < mx_src ? mx_dest : mx_src;
4307:src/xeq.c     **** 			else {
4308:src/xeq.c     **** 				if (rsrc > rdest) {
4309:src/xeq.c     **** 					num = mx_src - rsrc;
4310:src/xeq.c     **** 					q = rsrc - rdest;
4311:src/xeq.c     **** 				}
4312:src/xeq.c     **** 				else {
ARM GAS  /tmp/cccVhVyH.s 			page 90


4313:src/xeq.c     **** 					num = mx_dest - rdest;
4314:src/xeq.c     **** 					q = rdest - rsrc;
4315:src/xeq.c     **** 				}
4316:src/xeq.c     **** 				if (num > q)
4317:src/xeq.c     **** 					num = q;
4318:src/xeq.c     **** 			}
4319:src/xeq.c     **** 		}
4320:src/xeq.c     **** 		if (rdest >= LOCAL_REG_BASE)
4321:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
4322:src/xeq.c     **** 		if (rdest + num > mx_dest)
4323:src/xeq.c     **** 			goto range_error;
4324:src/xeq.c     **** 		// Set pointer
4325:src/xeq.c     **** 		*d = rdest;
4326:src/xeq.c     **** 	}
4327:src/xeq.c     **** 	else {
4328:src/xeq.c     **** 		if (num == 0) {
4329:src/xeq.c     **** 			num = mx_src - rsrc;
4330:src/xeq.c     **** 		}
4331:src/xeq.c     **** 	}
4332:src/xeq.c     **** 	if (rsrc + num > mx_src)
4333:src/xeq.c     **** 		goto range_error;
4334:src/xeq.c     **** 
4335:src/xeq.c     **** 	// Now point to the correct source register
4336:src/xeq.c     **** 	*s = flash ? FLASH_REG_BASE + rsrc : rsrc;
4337:src/xeq.c     **** 	*n = num;
4338:src/xeq.c     **** 
4339:src/xeq.c     **** 	return 0;
4340:src/xeq.c     **** 
4341:src/xeq.c     **** range_error:
4342:src/xeq.c     **** 	report_err(ERR_RANGE);
4343:src/xeq.c     **** 	return 1;
4344:src/xeq.c     **** }
4345:src/xeq.c     **** 
4346:src/xeq.c     **** void op_regcopy(enum nilop op) {
4347:src/xeq.c     **** 	int s, n, d;
4348:src/xeq.c     **** 
4349:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 1))
4350:src/xeq.c     **** 		return;
4351:src/xeq.c     **** 	move_regs(get_reg_n(d), get_reg_n(s), n);
4352:src/xeq.c     **** }
4353:src/xeq.c     **** 
4354:src/xeq.c     **** void op_regswap(enum nilop op) {
4355:src/xeq.c     **** 	int s, n, d, i;
4356:src/xeq.c     **** 
4357:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 0) || s == d)
4358:src/xeq.c     **** 		return;
4359:src/xeq.c     **** 	else {
4360:src/xeq.c     **** 		if ((s > d && d + n > s) || (d > s && s + n > d))
4361:src/xeq.c     **** 			report_err(ERR_RANGE);
4362:src/xeq.c     **** 		else {
4363:src/xeq.c     **** 			for (i = 0; i < n; i++)
4364:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
4365:src/xeq.c     **** 		}
4366:src/xeq.c     **** 	}
4367:src/xeq.c     **** }
4368:src/xeq.c     **** 
4369:src/xeq.c     **** void op_regclr(enum nilop op) {
ARM GAS  /tmp/cccVhVyH.s 			page 91


4370:src/xeq.c     **** 	int s, n;
4371:src/xeq.c     **** 
4372:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0))
4373:src/xeq.c     **** 		return;
4374:src/xeq.c     **** 	zero_regs(get_reg_n(s), n);
4375:src/xeq.c     **** }
4376:src/xeq.c     **** 
4377:src/xeq.c     **** void op_regsort(enum nilop op) {
4378:src/xeq.c     **** 	int s, n;
4379:src/xeq.c     **** 	decNumber pivot, a;
4380:src/xeq.c     **** 	int beg[10], end[10], i;
4381:src/xeq.c     **** 
4382:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0) || n == 1)
4383:src/xeq.c     **** 		return;
4384:src/xeq.c     **** 
4385:src/xeq.c     **** 	/* Non-recursive quicksort */
4386:src/xeq.c     **** 	beg[0] = 0;
4387:src/xeq.c     **** 	end[0] = n;
4388:src/xeq.c     **** 	i = 0;
4389:src/xeq.c     **** 	while (i>=0) {
4390:src/xeq.c     **** 		int L = beg[i];
4391:src/xeq.c     **** 		int R = end[i] - 1;
4392:src/xeq.c     **** 		if (L<R) {
4393:src/xeq.c     **** 			const int pvt = s + L;
4394:src/xeq.c     **** 			getRegister(&pivot, pvt);
4395:src/xeq.c     **** 			while (L<R) {
4396:src/xeq.c     **** 				while (L<R) {
4397:src/xeq.c     **** 					getRegister(&a, s + R);
4398:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
4399:src/xeq.c     **** 						break;
4400:src/xeq.c     **** 					R--;
4401:src/xeq.c     **** 				}
4402:src/xeq.c     **** 				if (L<R)
4403:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
4404:src/xeq.c     **** 				while (L<R) {
4405:src/xeq.c     **** 					getRegister(&a, s + L);
4406:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
4407:src/xeq.c     **** 						break;
4408:src/xeq.c     **** 					L++;
4409:src/xeq.c     **** 				}
4410:src/xeq.c     **** 				if (L<R)
4411:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
4412:src/xeq.c     **** 			}
4413:src/xeq.c     **** 			setRegister(s + L, &pivot);
4414:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
4415:src/xeq.c     **** 				beg[i+1] = beg[i];
4416:src/xeq.c     **** 				end[i+1] = L;
4417:src/xeq.c     **** 				beg[i] = L+1;
4418:src/xeq.c     **** 			} else {
4419:src/xeq.c     **** 				beg[i+1] = L+1;
4420:src/xeq.c     **** 				end[i+1] = end[i];
4421:src/xeq.c     **** 				end[i] = L;
4422:src/xeq.c     **** 			}
4423:src/xeq.c     **** 			i++;
4424:src/xeq.c     **** 		} else
4425:src/xeq.c     **** 			i--;
4426:src/xeq.c     **** 	}
ARM GAS  /tmp/cccVhVyH.s 			page 92


4427:src/xeq.c     **** }
4428:src/xeq.c     **** 
4429:src/xeq.c     **** 
4430:src/xeq.c     **** 
4431:src/xeq.c     **** /* Print a single program step nicely.
4432:src/xeq.c     ****  */
4433:src/xeq.c     **** static void print_step(const opcode op) {
4434:src/xeq.c     **** 	char buf[16];
4435:src/xeq.c     **** 	const unsigned int pc = state_pc();
4436:src/xeq.c     **** 	char *p = TraceBuffer;
4437:src/xeq.c     **** 
4438:src/xeq.c     **** 	if (isXROM(pc)) {
4439:src/xeq.c     **** 		*p++ = 'x';
4440:src/xeq.c     **** 	} else if (isLIB(pc)) {
4441:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
4442:src/xeq.c     **** 		*p++ = ' ';
4443:src/xeq.c     **** 	}
4444:src/xeq.c     **** 	if (pc == 0)
4445:src/xeq.c     **** 		scopy(p, "000:");
4446:src/xeq.c     **** 	else {
4447:src/xeq.c     **** 		p = num_arg_0(p, user_pc(pc), 3);
4448:src/xeq.c     **** 		*p++ = ':';
4449:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
4450:src/xeq.c     **** 		if (*p == '?')
4451:src/xeq.c     **** 			*p = '\0';
4452:src/xeq.c     **** 	}
4453:src/xeq.c     **** 	State2.disp_small = 1;
4454:src/xeq.c     **** 	DispMsg = TraceBuffer;
4455:src/xeq.c     **** }
4456:src/xeq.c     **** 
4457:src/xeq.c     **** 
4458:src/xeq.c     **** /* When stuff gets done, there are some bits of state that need
4459:src/xeq.c     ****  * to be reset -- SHOW, ->base change the display mode until something
4460:src/xeq.c     ****  * happens.  This should be called on that something.
4461:src/xeq.c     ****  */
4462:src/xeq.c     **** void reset_volatile_state(void) {
4463:src/xeq.c     **** 	// extern int IntMaxWindow;
4464:src/xeq.c     **** 	// IntMaxWindow = 0;
4465:src/xeq.c     **** 	State2.window = 0;
4466:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
4467:src/xeq.c     **** }
4468:src/xeq.c     **** 
4469:src/xeq.c     **** 
4470:src/xeq.c     **** /*
4471:src/xeq.c     ****  *  Called by any long running function
4472:src/xeq.c     ****  */
4473:src/xeq.c     **** void busy(void)
4474:src/xeq.c     **** {
4475:src/xeq.c     **** 	/*
4476:src/xeq.c     **** 	 *  Serve the hardware watch dog
4477:src/xeq.c     **** 	 */
4478:src/xeq.c     **** 	watchdog();
4479:src/xeq.c     **** 
4480:src/xeq.c     **** 	/*
4481:src/xeq.c     **** 	 *  Increase the speed
4482:src/xeq.c     **** 	 */
4483:src/xeq.c     **** 	update_speed(1);
ARM GAS  /tmp/cccVhVyH.s 			page 93


4484:src/xeq.c     **** 
4485:src/xeq.c     **** 	/*
4486:src/xeq.c     **** 	 *  Indicate busy state to the user
4487:src/xeq.c     **** 	 */
4488:src/xeq.c     **** 	if (!Busy && !Running) {
4489:src/xeq.c     **** 		Busy = 1;
4490:src/xeq.c     **** 		message("Wait...", NULL);
4491:src/xeq.c     **** 	}
4492:src/xeq.c     **** }
4493:src/xeq.c     **** 
4494:src/xeq.c     **** /***************************************************************************
4495:src/xeq.c     ****  * Function dispatchers.
4496:src/xeq.c     ****  */
4497:src/xeq.c     **** 
4498:src/xeq.c     **** /*
4499:src/xeq.c     ****  *  Check for a call into XROM space.
4500:src/xeq.c     ****  *  Fix the pointer alignment on the go.
4501:src/xeq.c     ****  */
4502:src/xeq.c     **** #ifdef REALBUILD
4503:src/xeq.c     **** typedef unsigned long uintptr_t;
4504:src/xeq.c     **** #else
4505:src/xeq.c     **** #include <stdint.h>
4506:src/xeq.c     **** #endif
4507:src/xeq.c     **** 
4508:src/xeq.c     **** static const s_opcode *check_for_xrom_address(void *fp)
4509:src/xeq.c     **** {
4510:src/xeq.c     **** 	const s_opcode *xp = (const s_opcode *) ((uintptr_t ) fp & ~1);
4511:src/xeq.c     **** 	if (xp < xrom)
4512:src/xeq.c     **** 		return NULL;
4513:src/xeq.c     **** #ifndef REALBUILD
4514:src/xeq.c     **** 	// On the device, XROM is at the end so this is not needed
4515:src/xeq.c     **** 	if (xp >= xrom + xrom_size)
4516:src/xeq.c     **** 		return NULL;
4517:src/xeq.c     **** #endif
4518:src/xeq.c     **** 	return xp;
4519:src/xeq.c     **** }
4520:src/xeq.c     **** 
4521:src/xeq.c     **** /*
4522:src/xeq.c     ****  *  Check for a call into XROM space and dispatch it.
4523:src/xeq.c     ****  */
4524:src/xeq.c     **** static int dispatch_xrom(void *fp)
4525:src/xeq.c     **** {
4526:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
4527:src/xeq.c     **** 	if (xp == NULL)
4528:src/xeq.c     **** 		return 0;
4529:src/xeq.c     **** 	// set_lift();
4530:src/xeq.c     **** 	UserLocalRegs = LocalRegs;
4531:src/xeq.c     **** 	XromRunning = 1;
4532:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
4533:src/xeq.c     **** 	xeq_xrom();
4534:src/xeq.c     **** 	return 1;
4535:src/xeq.c     **** }
4536:src/xeq.c     **** 
4537:src/xeq.c     **** /*
4538:src/xeq.c     ****  *  Return an integer result from a decimal value, setting flags properly
4539:src/xeq.c     ****  */
4540:src/xeq.c     **** static long long int intResult(decNumber *r) {
ARM GAS  /tmp/cccVhVyH.s 			page 94


 654              		.loc 1 4540 46 is_stmt 1 view -0
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 80
 657              		@ frame_needed = 0, uses_anonymous_args = 0
4541:src/xeq.c     **** 	unsigned long long int i;
 658              		.loc 1 4541 2 view .LVU191
4542:src/xeq.c     **** 	int s;
 659              		.loc 1 4542 2 view .LVU192
4543:src/xeq.c     **** 	decNumber ri, t;
 660              		.loc 1 4543 2 view .LVU193
4544:src/xeq.c     **** 
4545:src/xeq.c     **** 	decNumberRoundDigits(&t, r, 25, DEC_ROUND_HALF_EVEN);
 661              		.loc 1 4545 2 view .LVU194
4540:src/xeq.c     **** 	unsigned long long int i;
 662              		.loc 1 4540 46 is_stmt 0 view .LVU195
 663 0000 30B5     		push	{r4, r5, lr}
 664              		.cfi_def_cfa_offset 12
 665              		.cfi_offset 4, -12
 666              		.cfi_offset 5, -8
 667              		.cfi_offset 14, -4
 668 0002 95B0     		sub	sp, sp, #84
 669              		.cfi_def_cfa_offset 96
 670              		.loc 1 4545 2 view .LVU196
 671 0004 0323     		movs	r3, #3
 672 0006 1922     		movs	r2, #25
4540:src/xeq.c     **** 	unsigned long long int i;
 673              		.loc 1 4540 46 view .LVU197
 674 0008 0146     		mov	r1, r0
 675              		.loc 1 4545 2 view .LVU198
 676 000a 0BA8     		add	r0, sp, #44
 677              	.LVL52:
 678              		.loc 1 4545 2 view .LVU199
 679 000c FFF7FEFF 		bl	decNumberRoundDigits
 680              	.LVL53:
4546:src/xeq.c     **** 	decNumberTrunc(&ri, &t);
 681              		.loc 1 4546 2 is_stmt 1 view .LVU200
 682 0010 0BA9     		add	r1, sp, #44
 683 0012 02A8     		add	r0, sp, #8
 684 0014 FFF7FEFF 		bl	decNumberTrunc
 685              	.LVL54:
4547:src/xeq.c     **** 	set_carry(dn_eq(&ri, &t) ? 0 : 1);
 686              		.loc 1 4547 2 view .LVU201
 687              		.loc 1 4547 12 is_stmt 0 view .LVU202
 688 0018 0BA9     		add	r1, sp, #44
 689 001a 02A8     		add	r0, sp, #8
 690 001c FFF7FEFF 		bl	dn_eq
 691              	.LVL55:
 692              		.loc 1 4547 2 view .LVU203
 693 0020 B0FA80F0 		clz	r0, r0
 694 0024 4009     		lsrs	r0, r0, #5
 695 0026 FFF7FEFF 		bl	set_carry
 696              	.LVL56:
4548:src/xeq.c     **** 
4549:src/xeq.c     **** 	if (decNumberIsNaN(&t)) {
 697              		.loc 1 4549 2 is_stmt 1 view .LVU204
 698              		.loc 1 4549 6 is_stmt 0 view .LVU205
 699 002a 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
ARM GAS  /tmp/cccVhVyH.s 			page 95


 700              		.loc 1 4549 5 view .LVU206
 701 002e 13F0300F 		tst	r3, #48
 702 0032 22D1     		bne	.L67
4550:src/xeq.c     **** 		report_err(ERR_DOMAIN);
4551:src/xeq.c     **** 		return 0;
4552:src/xeq.c     **** 	}
4553:src/xeq.c     **** 	if (decNumberIsSpecial(&t)) {
 703              		.loc 1 4553 2 is_stmt 1 view .LVU207
 704              		.loc 1 4553 5 is_stmt 0 view .LVU208
 705 0034 13F0700F 		tst	r3, #112
 706 0038 18D1     		bne	.L68
4554:src/xeq.c     **** 		set_overflow(1);
4555:src/xeq.c     **** 		return 0;
4556:src/xeq.c     **** 	}
4557:src/xeq.c     **** 	i = dn_to_ull(&ri, &s);
 707              		.loc 1 4557 2 is_stmt 1 view .LVU209
 708              		.loc 1 4557 6 is_stmt 0 view .LVU210
 709 003a 02A8     		add	r0, sp, #8
 710 003c 01A9     		add	r1, sp, #4
 711 003e FFF7FEFF 		bl	dn_to_ull
 712              	.LVL57:
 713 0042 0C46     		mov	r4, r1
4558:src/xeq.c     **** 	dn_abs(&t, &t);
 714              		.loc 1 4558 2 view .LVU211
 715 0044 0BA9     		add	r1, sp, #44
4557:src/xeq.c     **** 	dn_abs(&t, &t);
 716              		.loc 1 4557 6 view .LVU212
 717 0046 0546     		mov	r5, r0
 718              	.LVL58:
 719              		.loc 1 4558 2 is_stmt 1 view .LVU213
 720 0048 0846     		mov	r0, r1
 721              	.LVL59:
 722              		.loc 1 4558 2 is_stmt 0 view .LVU214
 723 004a FFF7FEFF 		bl	dn_abs
 724              	.LVL60:
4559:src/xeq.c     **** 	set_overflow(check_overflow(i) || dn_ge(&t, &const_2pow64));
 725              		.loc 1 4559 2 is_stmt 1 view .LVU215
 726              		.loc 1 4559 15 is_stmt 0 view .LVU216
 727 004e 2846     		mov	r0, r5
 728 0050 2146     		mov	r1, r4
 729 0052 FFF7FEFF 		bl	check_overflow
 730              	.LVL61:
 731              		.loc 1 4559 2 view .LVU217
 732 0056 E8B1     		cbz	r0, .L69
 733 0058 0120     		movs	r0, #1
 734              	.L63:
 735              		.loc 1 4559 2 discriminator 6 view .LVU218
 736 005a FFF7FEFF 		bl	set_overflow
 737              	.LVL62:
4560:src/xeq.c     **** 	return build_value(i, s);
 738              		.loc 1 4560 2 is_stmt 1 discriminator 6 view .LVU219
 739              		.loc 1 4560 9 is_stmt 0 discriminator 6 view .LVU220
 740 005e 019A     		ldr	r2, [sp, #4]
 741 0060 2846     		mov	r0, r5
 742 0062 2146     		mov	r1, r4
 743 0064 FFF7FEFF 		bl	build_value
 744              	.LVL63:
ARM GAS  /tmp/cccVhVyH.s 			page 96


4561:src/xeq.c     **** }
 745              		.loc 1 4561 1 discriminator 6 view .LVU221
 746 0068 15B0     		add	sp, sp, #84
 747              		.cfi_remember_state
 748              		.cfi_def_cfa_offset 12
 749              		@ sp needed
 750 006a 30BD     		pop	{r4, r5, pc}
 751              	.LVL64:
 752              	.L68:
 753              		.cfi_restore_state
4554:src/xeq.c     **** 		return 0;
 754              		.loc 1 4554 3 is_stmt 1 view .LVU222
 755 006c 0120     		movs	r0, #1
 756 006e FFF7FEFF 		bl	set_overflow
 757              	.LVL65:
4555:src/xeq.c     **** 	}
 758              		.loc 1 4555 3 view .LVU223
4555:src/xeq.c     **** 	}
 759              		.loc 1 4555 10 is_stmt 0 view .LVU224
 760 0072 0020     		movs	r0, #0
 761 0074 0146     		mov	r1, r0
 762              		.loc 1 4561 1 view .LVU225
 763 0076 15B0     		add	sp, sp, #84
 764              		.cfi_remember_state
 765              		.cfi_def_cfa_offset 12
 766              		@ sp needed
 767 0078 30BD     		pop	{r4, r5, pc}
 768              	.L67:
 769              		.cfi_restore_state
4550:src/xeq.c     **** 		return 0;
 770              		.loc 1 4550 3 is_stmt 1 view .LVU226
 771              	.LVL66:
 772              	.LBB1370:
 773              	.LBI1370:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 774              		.loc 1 546 5 view .LVU227
 775              	.LBB1371:
 547:src/xeq.c     **** 		Error = e;
 776              		.loc 1 547 2 view .LVU228
 547:src/xeq.c     **** 		Error = e;
 777              		.loc 1 547 12 is_stmt 0 view .LVU229
 778 007a 0A4B     		ldr	r3, .L70
 547:src/xeq.c     **** 		Error = e;
 779              		.loc 1 547 5 view .LVU230
 780 007c 1A68     		ldr	r2, [r3]
 781 007e 2AB9     		cbnz	r2, .L64
 782              	.LVL67:
 783              	.LBB1372:
 784              	.LBI1372:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 785              		.loc 1 546 5 is_stmt 1 view .LVU231
 786              	.LBB1373:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 787              		.loc 1 548 3 view .LVU232
 788              	.LBE1373:
 789              	.LBE1372:
 790              	.LBE1371:
ARM GAS  /tmp/cccVhVyH.s 			page 97


 791              	.LBE1370:
4551:src/xeq.c     **** 	}
 792              		.loc 1 4551 10 is_stmt 0 view .LVU233
 793 0080 0020     		movs	r0, #0
 794              	.LBB1380:
 795              	.LBB1378:
 796              	.LBB1376:
 797              	.LBB1374:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 798              		.loc 1 548 9 view .LVU234
 799 0082 0122     		movs	r2, #1
 800              	.LBE1374:
 801              	.LBE1376:
 802              	.LBE1378:
 803              	.LBE1380:
4551:src/xeq.c     **** 	}
 804              		.loc 1 4551 10 view .LVU235
 805 0084 0146     		mov	r1, r0
 806              	.LBB1381:
 807              	.LBB1379:
 808              	.LBB1377:
 809              	.LBB1375:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 810              		.loc 1 548 9 view .LVU236
 811 0086 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 812              		.loc 1 549 3 is_stmt 1 view .LVU237
 813              	.LBE1375:
 814              	.LBE1377:
 815              	.LBE1379:
 816              	.LBE1381:
 817              		.loc 1 4561 1 is_stmt 0 view .LVU238
 818 0088 15B0     		add	sp, sp, #84
 819              		.cfi_remember_state
 820              		.cfi_def_cfa_offset 12
 821              		@ sp needed
 822 008a 30BD     		pop	{r4, r5, pc}
 823              	.LVL68:
 824              	.L64:
 825              		.cfi_restore_state
4551:src/xeq.c     **** 	}
 826              		.loc 1 4551 10 view .LVU239
 827 008c 0020     		movs	r0, #0
 828 008e 0146     		mov	r1, r0
 829              	.LVL69:
 830              		.loc 1 4561 1 view .LVU240
 831 0090 15B0     		add	sp, sp, #84
 832              		.cfi_remember_state
 833              		.cfi_def_cfa_offset 12
 834              		@ sp needed
 835 0092 30BD     		pop	{r4, r5, pc}
 836              	.LVL70:
 837              	.L69:
 838              		.cfi_restore_state
4559:src/xeq.c     **** 	return build_value(i, s);
 839              		.loc 1 4559 36 discriminator 2 view .LVU241
 840 0094 0449     		ldr	r1, .L70+4
ARM GAS  /tmp/cccVhVyH.s 			page 98


 841 0096 0BA8     		add	r0, sp, #44
 842 0098 FFF7FEFF 		bl	dn_lt
 843              	.LVL71:
4559:src/xeq.c     **** 	return build_value(i, s);
 844              		.loc 1 4559 2 discriminator 2 view .LVU242
 845 009c B0FA80F0 		clz	r0, r0
 846 00a0 4009     		lsrs	r0, r0, #5
 847 00a2 DAE7     		b	.L63
 848              	.L71:
 849              		.align	2
 850              	.L70:
 851 00a4 00000000 		.word	Error
 852 00a8 00000000 		.word	const_2pow64
 853              		.cfi_endproc
 854              	.LFE239:
 856              		.section	.text.check_stack_overlap,"ax",%progbits
 857              		.align	1
 858              		.p2align 2,,3
 859              		.syntax unified
 860              		.thumb
 861              		.thumb_func
 862              		.fpu fpv4-sp-d16
 864              	check_stack_overlap:
 865              	.LVL72:
 866              	.LFB147:
2140:src/xeq.c     **** 	const int n = stack_size();
 867              		.loc 1 2140 50 is_stmt 1 view -0
 868              		.cfi_startproc
 869              		@ args = 0, pretend = 0, frame = 0
 870              		@ frame_needed = 0, uses_anonymous_args = 0
 871              		@ link register save eliminated.
2141:src/xeq.c     **** 
 872              		.loc 1 2141 2 view .LVU244
 873              	.LBB1408:
 874              	.LBI1408:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 875              		.loc 1 712 5 view .LVU245
 876              	.LBB1409:
 713:src/xeq.c     **** 		return 4;
 877              		.loc 1 713 2 view .LVU246
 713:src/xeq.c     **** 		return 4;
 878              		.loc 1 713 8 is_stmt 0 view .LVU247
 879 0000 194B     		ldr	r3, .L83
 880 0002 1A68     		ldr	r2, [r3]
 713:src/xeq.c     **** 		return 4;
 881              		.loc 1 713 6 view .LVU248
 882 0004 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 883              		.loc 1 713 5 view .LVU249
 884 0008 1B07     		lsls	r3, r3, #28
 885              	.LBE1409:
 886              	.LBE1408:
2140:src/xeq.c     **** 	const int n = stack_size();
 887              		.loc 1 2140 50 view .LVU250
 888 000a 30B4     		push	{r4, r5}
 889              		.cfi_def_cfa_offset 8
 890              		.cfi_offset 4, -8
ARM GAS  /tmp/cccVhVyH.s 			page 99


 891              		.cfi_offset 5, -4
 892              	.LBB1414:
 893              	.LBB1412:
 713:src/xeq.c     **** 		return 4;
 894              		.loc 1 713 5 view .LVU251
 895 000c 25D5     		bpl	.L77
 896              	.LBB1410:
 897              	.LBI1410:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 898              		.loc 1 185 5 is_stmt 1 view .LVU252
 899              	.LBB1411:
 186:src/xeq.c     **** }
 900              		.loc 1 186 2 view .LVU253
 186:src/xeq.c     **** }
 901              		.loc 1 186 9 is_stmt 0 view .LVU254
 902 000e B2F8E037 		ldrh	r3, [r2, #2016]
 903              	.LBE1411:
 904              	.LBE1410:
 713:src/xeq.c     **** 		return 4;
 905              		.loc 1 713 27 view .LVU255
 906 0012 9B0B     		lsrs	r3, r3, #14
 907 0014 032B     		cmp	r3, #3
 908 0016 1BD0     		beq	.L82
 909              	.L79:
 910 0018 0823     		movs	r3, #8
 715:src/xeq.c     **** }
 911              		.loc 1 715 9 view .LVU256
 912 001a 1C46     		mov	r4, r3
 913              	.L73:
 914              	.LVL73:
 715:src/xeq.c     **** }
 915              		.loc 1 715 9 view .LVU257
 916              	.LBE1412:
 917              	.LBE1414:
2143:src/xeq.c     **** 		return n;
 918              		.loc 1 2143 2 is_stmt 1 view .LVU258
 919              	.LBB1415:
 920              	.LBB1416:
 921              	.LBB1417:
 922              	.LBB1418:
 923              	.LBB1419:
1122:src/xeq.c     **** }
 924              		.loc 1 1122 24 is_stmt 0 view .LVU259
 925 001c B2F8E857 		ldrh	r5, [r2, #2024]
 926              	.LBE1419:
 927              	.LBE1418:
 928              	.LBB1422:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 929              		.loc 1 243 24 view .LVU260
 930 0020 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 931              	.LBE1422:
 932              	.LBB1423:
 933              	.LBB1420:
1122:src/xeq.c     **** }
 934              		.loc 1 1122 24 view .LVU261
 935 0024 44F20101 		movw	r1, #16385
 936              	.LBE1420:
ARM GAS  /tmp/cccVhVyH.s 			page 100


 937              	.LBE1423:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 938              		.loc 1 242 5 view .LVU262
 939 0028 2940     		ands	r1, r1, r5
 940 002a B1F5804F 		cmp	r1, #16384
 941              	.LBB1424:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 942              		.loc 1 243 13 view .LVU263
 943 002e 08BF     		it	eq
 944 0030 0C3A     		subeq	r2, r2, #12
 945              	.LBE1424:
 946              	.LBE1417:
 947              	.LBE1416:
 948              	.LBE1415:
2143:src/xeq.c     **** 		return n;
 949              		.loc 1 2143 10 view .LVU264
 950 0032 0344     		add	r3, r3, r0
 951              	.LBB1429:
 952              	.LBI1415:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 953              		.loc 1 253 14 is_stmt 1 view .LVU265
 954              	.LBE1429:
 254:src/xeq.c     **** }
 955              		.loc 1 254 2 view .LVU266
 956              	.LVL74:
 957              	.LBB1430:
 958              	.LBB1428:
 959              	.LBI1416:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 960              		.loc 1 241 14 view .LVU267
 961              	.LBB1427:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 962              		.loc 1 242 2 view .LVU268
 963              	.LBB1425:
 964              	.LBI1418:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 965              		.loc 1 1121 5 view .LVU269
 966              	.LBB1421:
1122:src/xeq.c     **** }
 967              		.loc 1 1122 2 view .LVU270
 968              	.LBE1421:
 969              	.LBE1425:
 970              	.LBB1426:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 971              		.loc 1 243 3 view .LVU271
 244:src/xeq.c     **** 	}
 972              		.loc 1 244 3 view .LVU272
 244:src/xeq.c     **** 	}
 973              		.loc 1 244 67 is_stmt 0 view .LVU273
 974 0034 08BF     		it	eq
 975 0036 5210     		asreq	r2, r2, #1
 976              	.LVL75:
 244:src/xeq.c     **** 	}
 977              		.loc 1 244 67 view .LVU274
 978              	.LBE1426:
 979              	.LBE1427:
 980              	.LBE1428:
ARM GAS  /tmp/cccVhVyH.s 			page 101


 981              	.LBE1430:
2143:src/xeq.c     **** 		return n;
 982              		.loc 1 2143 5 view .LVU275
 983 0038 9342     		cmp	r3, r2
 984 003a 06D9     		bls	.L72
2143:src/xeq.c     **** 		return n;
 985              		.loc 1 2143 31 discriminator 1 view .LVU276
 986 003c 6F28     		cmp	r0, #111
 987 003e 04D8     		bhi	.L72
 988              	.LBB1431:
 989              	.LBI1431:
2140:src/xeq.c     **** 	const int n = stack_size();
 990              		.loc 1 2140 12 is_stmt 1 view .LVU277
 991              	.LVL76:
 992              	.LBB1432:
2146:src/xeq.c     **** 	return 0;
 993              		.loc 1 2146 2 view .LVU278
 994              	.LBB1433:
 995              	.LBI1433:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 996              		.loc 1 546 5 view .LVU279
 997              	.LBB1434:
 547:src/xeq.c     **** 		Error = e;
 998              		.loc 1 547 2 view .LVU280
 547:src/xeq.c     **** 		Error = e;
 999              		.loc 1 547 12 is_stmt 0 view .LVU281
 1000 0040 0A4B     		ldr	r3, .L83+4
 1001 0042 1C68     		ldr	r4, [r3]
 1002              	.LVL77:
 547:src/xeq.c     **** 		Error = e;
 1003              		.loc 1 547 5 view .LVU282
 1004 0044 64B9     		cbnz	r4, .L80
 1005              	.LVL78:
 1006              	.LBB1435:
 1007              	.LBI1435:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1008              		.loc 1 546 5 is_stmt 1 view .LVU283
 1009              	.LBB1436:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1010              		.loc 1 548 3 view .LVU284
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1011              		.loc 1 548 9 is_stmt 0 view .LVU285
 1012 0046 0C22     		movs	r2, #12
 1013 0048 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 1014              		.loc 1 549 3 is_stmt 1 view .LVU286
 1015              	.LVL79:
 1016              	.L72:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 1017              		.loc 1 549 3 is_stmt 0 view .LVU287
 1018              	.LBE1436:
 1019              	.LBE1435:
 1020              	.LBE1434:
 1021              	.LBE1433:
 1022              	.LBE1432:
 1023              	.LBE1431:
2148:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 102


 1024              		.loc 1 2148 1 view .LVU288
 1025 004a 2046     		mov	r0, r4
 1026              	.LVL80:
2148:src/xeq.c     **** 
 1027              		.loc 1 2148 1 view .LVU289
 1028 004c 30BC     		pop	{r4, r5}
 1029              		.cfi_remember_state
 1030              		.cfi_restore 5
 1031              		.cfi_restore 4
 1032              		.cfi_def_cfa_offset 0
 1033 004e 7047     		bx	lr
 1034              	.LVL81:
 1035              	.L82:
 1036              		.cfi_restore_state
 1037              	.LBB1440:
 1038              	.LBB1413:
 713:src/xeq.c     **** 		return 4;
 1039              		.loc 1 713 44 view .LVU290
 1040 0050 074B     		ldr	r3, .L83+8
 713:src/xeq.c     **** 		return 4;
 1041              		.loc 1 713 41 view .LVU291
 1042 0052 93F90130 		ldrsb	r3, [r3, #1]
 1043 0056 002B     		cmp	r3, #0
 1044 0058 DEDB     		blt	.L79
 1045              	.L77:
 1046 005a 0423     		movs	r3, #4
 714:src/xeq.c     **** 	return 8;
 1047              		.loc 1 714 10 view .LVU292
 1048 005c 1C46     		mov	r4, r3
 1049 005e DDE7     		b	.L73
 1050              	.LVL82:
 1051              	.L80:
 714:src/xeq.c     **** 	return 8;
 1052              		.loc 1 714 10 view .LVU293
 1053              	.LBE1413:
 1054              	.LBE1440:
 1055              	.LBB1441:
 1056              	.LBB1439:
 1057              	.LBB1438:
 1058              	.LBB1437:
 1059 0060 0024     		movs	r4, #0
 1060              	.LVL83:
 714:src/xeq.c     **** 	return 8;
 1061              		.loc 1 714 10 view .LVU294
 1062              	.LBE1437:
 1063              	.LBE1438:
 1064              	.LBE1439:
 1065              	.LBE1441:
2148:src/xeq.c     **** 
 1066              		.loc 1 2148 1 view .LVU295
 1067 0062 2046     		mov	r0, r4
 1068              	.LVL84:
2148:src/xeq.c     **** 
 1069              		.loc 1 2148 1 view .LVU296
 1070 0064 30BC     		pop	{r4, r5}
 1071              		.cfi_restore 5
 1072              		.cfi_restore 4
ARM GAS  /tmp/cccVhVyH.s 			page 103


 1073              		.cfi_def_cfa_offset 0
 1074 0066 7047     		bx	lr
 1075              	.L84:
 1076              		.align	2
 1077              	.L83:
 1078 0068 00000000 		.word	main_ram
 1079 006c 00000000 		.word	Error
 1080 0070 00000000 		.word	XromParams
 1081              		.cfi_endproc
 1082              	.LFE147:
 1084              		.section	.text.is_xrom,"ax",%progbits
 1085              		.align	1
 1086              		.p2align 2,,3
 1087              		.global	is_xrom
 1088              		.syntax unified
 1089              		.thumb
 1090              		.thumb_func
 1091              		.fpu fpv4-sp-d16
 1093              	is_xrom:
 1094              	.LFB3:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 1095              		.loc 1 185 19 is_stmt 1 view -0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              		@ link register save eliminated.
 186:src/xeq.c     **** }
 1100              		.loc 1 186 2 view .LVU298
 186:src/xeq.c     **** }
 1101              		.loc 1 186 9 is_stmt 0 view .LVU299
 1102 0000 054B     		ldr	r3, .L86
 1103 0002 1B68     		ldr	r3, [r3]
 1104 0004 B3F8E007 		ldrh	r0, [r3, #2016]
 1105 0008 800B     		lsrs	r0, r0, #14
 187:src/xeq.c     **** 
 1106              		.loc 1 187 1 view .LVU300
 1107 000a A0F10300 		sub	r0, #3
 1108 000e B0FA80F0 		clz	r0, r0
 1109 0012 4009     		lsrs	r0, r0, #5
 1110 0014 7047     		bx	lr
 1111              	.L87:
 1112 0016 00BF     		.align	2
 1113              	.L86:
 1114 0018 00000000 		.word	main_ram
 1115              		.cfi_endproc
 1116              	.LFE3:
 1118              		.section	.text.move_retstk,"ax",%progbits
 1119              		.align	1
 1120              		.p2align 2,,3
 1121              		.global	move_retstk
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu fpv4-sp-d16
 1127              	move_retstk:
 1128              	.LVL85:
 1129              	.LFB4:
ARM GAS  /tmp/cccVhVyH.s 			page 104


 196:src/xeq.c     **** #ifndef REALBUILD
 1130              		.loc 1 196 1 is_stmt 1 view -0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 0
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1134              		.loc 1 199 2 view .LVU302
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1135              		.loc 1 199 6 is_stmt 0 view .LVU303
 1136 0000 1A4B     		ldr	r3, .L99
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1137              		.loc 1 199 5 view .LVU304
 1138 0002 93F90130 		ldrsb	r3, [r3, #1]
 1139 0006 002B     		cmp	r3, #0
 1140 0008 25DB     		blt	.L97
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1141              		.loc 1 204 2 is_stmt 1 view .LVU305
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1142              		.loc 1 204 19 is_stmt 0 view .LVU306
 1143 000a 194B     		ldr	r3, .L99+4
 196:src/xeq.c     **** #ifndef REALBUILD
 1144              		.loc 1 196 1 view .LVU307
 1145 000c 70B5     		push	{r4, r5, r6, lr}
 1146              		.cfi_def_cfa_offset 16
 1147              		.cfi_offset 4, -16
 1148              		.cfi_offset 5, -12
 1149              		.cfi_offset 6, -8
 1150              		.cfi_offset 14, -4
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1151              		.loc 1 204 19 view .LVU308
 1152 000e 1A68     		ldr	r2, [r3]
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1153              		.loc 1 204 17 view .LVU309
 1154 0010 184D     		ldr	r5, .L99+8
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1155              		.loc 1 204 19 view .LVU310
 1156 0012 B2F9E217 		ldrsh	r1, [r2, #2018]
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1157              		.loc 1 204 17 view .LVU311
 1158 0016 2B68     		ldr	r3, [r5]
 1159 0018 0B44     		add	r3, r3, r1
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1160              		.loc 1 204 5 view .LVU312
 1161 001a C342     		cmn	r3, r0
 1162 001c 0446     		mov	r4, r0
 1163 001e 13D4     		bmi	.L98
 208:src/xeq.c     **** 	RetStk += distance;
 1164              		.loc 1 208 2 is_stmt 1 view .LVU313
 1165 0020 154E     		ldr	r6, .L99+12
 1166 0022 3368     		ldr	r3, [r6]
 208:src/xeq.c     **** 	RetStk += distance;
 1167              		.loc 1 208 27 is_stmt 0 view .LVU314
 1168 0024 0818     		adds	r0, r1, r0
 1169              	.LVL86:
 208:src/xeq.c     **** 	RetStk += distance;
 1170              		.loc 1 208 60 view .LVU315
 1171 0026 4A42     		rsbs	r2, r1, #0
ARM GAS  /tmp/cccVhVyH.s 			page 105


 208:src/xeq.c     **** 	RetStk += distance;
 1172              		.loc 1 208 2 view .LVU316
 1173 0028 03EB4000 		add	r0, r3, r0, lsl #1
 1174 002c 03EB4101 		add	r1, r3, r1, lsl #1
 1175 0030 5200     		lsls	r2, r2, #1
 1176 0032 FFF7FEFF 		bl	xcopy
 1177              	.LVL87:
 209:src/xeq.c     **** 	RetStkSize += distance;
 1178              		.loc 1 209 2 is_stmt 1 view .LVU317
 209:src/xeq.c     **** 	RetStkSize += distance;
 1179              		.loc 1 209 9 is_stmt 0 view .LVU318
 1180 0036 3368     		ldr	r3, [r6]
 210:src/xeq.c     **** 	return 0;
 1181              		.loc 1 210 13 view .LVU319
 1182 0038 2868     		ldr	r0, [r5]
 209:src/xeq.c     **** 	RetStkSize += distance;
 1183              		.loc 1 209 9 view .LVU320
 1184 003a 03EB4403 		add	r3, r3, r4, lsl #1
 210:src/xeq.c     **** 	return 0;
 1185              		.loc 1 210 13 view .LVU321
 1186 003e 2044     		add	r0, r0, r4
 1187 0040 2860     		str	r0, [r5]
 209:src/xeq.c     **** 	RetStkSize += distance;
 1188              		.loc 1 209 9 view .LVU322
 1189 0042 3360     		str	r3, [r6]
 210:src/xeq.c     **** 	return 0;
 1190              		.loc 1 210 2 is_stmt 1 view .LVU323
 211:src/xeq.c     **** }
 1191              		.loc 1 211 2 view .LVU324
 211:src/xeq.c     **** }
 1192              		.loc 1 211 9 is_stmt 0 view .LVU325
 1193 0044 0020     		movs	r0, #0
 212:src/xeq.c     **** 
 1194              		.loc 1 212 1 view .LVU326
 1195 0046 70BD     		pop	{r4, r5, r6, pc}
 1196              	.LVL88:
 1197              	.L98:
 205:src/xeq.c     **** 		return 1;
 1198              		.loc 1 205 3 is_stmt 1 view .LVU327
 1199              	.LBB1454:
 1200              	.LBI1454:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1201              		.loc 1 546 5 view .LVU328
 1202              	.LBB1455:
 547:src/xeq.c     **** 		Error = e;
 1203              		.loc 1 547 2 view .LVU329
 547:src/xeq.c     **** 		Error = e;
 1204              		.loc 1 547 12 is_stmt 0 view .LVU330
 1205 0048 0C4B     		ldr	r3, .L99+16
 547:src/xeq.c     **** 		Error = e;
 1206              		.loc 1 547 5 view .LVU331
 1207 004a 1A68     		ldr	r2, [r3]
 1208 004c 52B9     		cbnz	r2, .L93
 1209              	.LVL89:
 1210              	.LBB1456:
 1211              	.LBI1456:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/cccVhVyH.s 			page 106


 1212              		.loc 1 546 5 is_stmt 1 view .LVU332
 1213              	.LBB1457:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1214              		.loc 1 548 3 view .LVU333
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1215              		.loc 1 548 9 is_stmt 0 view .LVU334
 1216 004e 0B22     		movs	r2, #11
 1217 0050 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 1218              		.loc 1 549 3 is_stmt 1 view .LVU335
 1219              	.LBE1457:
 1220              	.LBE1456:
 1221              	.LBE1455:
 1222              	.LBE1454:
 206:src/xeq.c     **** 	}
 1223              		.loc 1 206 10 is_stmt 0 view .LVU336
 1224 0052 0120     		movs	r0, #1
 1225              	.LVL90:
 212:src/xeq.c     **** 
 1226              		.loc 1 212 1 view .LVU337
 1227 0054 70BD     		pop	{r4, r5, r6, pc}
 1228              	.LVL91:
 1229              	.L97:
 1230              		.cfi_def_cfa_offset 0
 1231              		.cfi_restore 4
 1232              		.cfi_restore 5
 1233              		.cfi_restore 6
 1234              		.cfi_restore 14
 1235              	.LBB1459:
 1236              	.LBI1459:
 195:src/xeq.c     **** {
 1237              		.loc 1 195 5 is_stmt 1 view .LVU338
 195:src/xeq.c     **** {
 1238              		.loc 1 195 5 is_stmt 0 view .LVU339
 1239              	.LBE1459:
 200:src/xeq.c     **** 		return 1;
 1240              		.loc 1 200 3 is_stmt 1 view .LVU340
 1241              	.LBB1466:
 1242              	.LBB1460:
 1243              	.LBI1460:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1244              		.loc 1 546 5 view .LVU341
 1245              	.LBB1461:
 547:src/xeq.c     **** 		Error = e;
 1246              		.loc 1 547 2 view .LVU342
 547:src/xeq.c     **** 		Error = e;
 1247              		.loc 1 547 12 is_stmt 0 view .LVU343
 1248 0056 094B     		ldr	r3, .L99+16
 547:src/xeq.c     **** 		Error = e;
 1249              		.loc 1 547 5 view .LVU344
 1250 0058 1A68     		ldr	r2, [r3]
 1251 005a 2AB9     		cbnz	r2, .L92
 1252              	.LVL92:
 1253              	.LBB1462:
 1254              	.LBI1462:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1255              		.loc 1 546 5 is_stmt 1 view .LVU345
ARM GAS  /tmp/cccVhVyH.s 			page 107


 1256              	.LBB1463:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1257              		.loc 1 548 3 view .LVU346
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1258              		.loc 1 548 9 is_stmt 0 view .LVU347
 1259 005c 0722     		movs	r2, #7
 1260 005e 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 1261              		.loc 1 549 3 is_stmt 1 view .LVU348
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1262              		.loc 1 548 9 is_stmt 0 view .LVU349
 1263 0060 0120     		movs	r0, #1
 1264              	.LVL93:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1265              		.loc 1 548 9 view .LVU350
 1266 0062 7047     		bx	lr
 1267              	.LVL94:
 1268              	.L93:
 1269              		.cfi_def_cfa_offset 16
 1270              		.cfi_offset 4, -16
 1271              		.cfi_offset 5, -12
 1272              		.cfi_offset 6, -8
 1273              		.cfi_offset 14, -4
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1274              		.loc 1 548 9 view .LVU351
 1275              	.LBE1463:
 1276              	.LBE1462:
 1277              	.LBE1461:
 1278              	.LBE1460:
 1279              	.LBE1466:
 1280              	.LBB1467:
 1281              	.LBB1458:
 1282 0064 0120     		movs	r0, #1
 1283              	.LVL95:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1284              		.loc 1 548 9 view .LVU352
 1285              	.LBE1458:
 1286              	.LBE1467:
 212:src/xeq.c     **** 
 1287              		.loc 1 212 1 view .LVU353
 1288 0066 70BD     		pop	{r4, r5, r6, pc}
 1289              	.LVL96:
 1290              	.L92:
 1291              		.cfi_def_cfa_offset 0
 1292              		.cfi_restore 4
 1293              		.cfi_restore 5
 1294              		.cfi_restore 6
 1295              		.cfi_restore 14
 1296              	.LBB1468:
 1297              	.LBB1465:
 1298              	.LBB1464:
 212:src/xeq.c     **** 
 1299              		.loc 1 212 1 view .LVU354
 1300 0068 0120     		movs	r0, #1
 1301              	.LVL97:
 212:src/xeq.c     **** 
 1302              		.loc 1 212 1 view .LVU355
ARM GAS  /tmp/cccVhVyH.s 			page 108


 1303              	.LBE1464:
 1304              	.LBE1465:
 1305              	.LBE1468:
 1306 006a 7047     		bx	lr
 1307              	.L100:
 1308              		.align	2
 1309              	.L99:
 1310 006c 00000000 		.word	XromParams
 1311 0070 00000000 		.word	main_ram
 1312 0074 00000000 		.word	RetStkSize
 1313 0078 00000000 		.word	RetStk
 1314 007c 00000000 		.word	Error
 1315              		.cfi_endproc
 1316              	.LFE4:
 1318              		.section	.text.local_levels,"ax",%progbits
 1319              		.align	1
 1320              		.p2align 2,,3
 1321              		.global	local_levels
 1322              		.syntax unified
 1323              		.thumb
 1324              		.thumb_func
 1325              		.fpu fpv4-sp-d16
 1327              	local_levels:
 1328              	.LFB5:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1329              		.loc 1 217 24 is_stmt 1 view -0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 0
 1332              		@ frame_needed = 0, uses_anonymous_args = 0
 1333              		@ link register save eliminated.
 218:src/xeq.c     **** }
 1334              		.loc 1 218 2 view .LVU357
 218:src/xeq.c     **** }
 1335              		.loc 1 218 9 is_stmt 0 view .LVU358
 1336 0000 084B     		ldr	r3, .L105
 1337 0002 1B68     		ldr	r3, [r3]
 1338 0004 B3F8DE37 		ldrh	r3, [r3, #2014]
 1339 0008 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 1340              		.loc 1 218 57 view .LVU359
 1341 000c 002B     		cmp	r3, #0
 1342 000e 01DB     		blt	.L104
 1343 0010 0020     		movs	r0, #0
 219:src/xeq.c     **** 
 1344              		.loc 1 219 1 view .LVU360
 1345 0012 7047     		bx	lr
 1346              	.L104:
 218:src/xeq.c     **** }
 1347              		.loc 1 218 25 discriminator 1 view .LVU361
 1348 0014 044A     		ldr	r2, .L105+4
 1349 0016 1268     		ldr	r2, [r2]
 218:src/xeq.c     **** }
 1350              		.loc 1 218 57 discriminator 1 view .LVU362
 1351 0018 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 1352 001c C0F30B00 		ubfx	r0, r0, #0, #12
 1353 0020 7047     		bx	lr
 1354              	.L106:
ARM GAS  /tmp/cccVhVyH.s 			page 109


 1355 0022 00BF     		.align	2
 1356              	.L105:
 1357 0024 00000000 		.word	main_ram
 1358 0028 00000000 		.word	RetStk
 1359              		.cfi_endproc
 1360              	.LFE5:
 1362              		.section	.text.local_regs_rarg,"ax",%progbits
 1363              		.align	1
 1364              		.p2align 2,,3
 1365              		.global	local_regs_rarg
 1366              		.syntax unified
 1367              		.thumb
 1368              		.thumb_func
 1369              		.fpu fpv4-sp-d16
 1371              	local_regs_rarg:
 1372              	.LVL98:
 1373              	.LFB6:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1374              		.loc 1 225 35 is_stmt 1 view -0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 0
 1377              		@ frame_needed = 0, uses_anonymous_args = 0
 1378              		@ link register save eliminated.
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1379              		.loc 1 226 2 view .LVU364
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1380              		.loc 1 226 53 is_stmt 0 view .LVU365
 1381 0000 A0F17E03 		sub	r3, r0, #126
 1382 0004 012B     		cmp	r3, #1
 1383 0006 164B     		ldr	r3, .L116
 1384 0008 27D9     		bls	.L113
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1385              		.loc 1 226 53 discriminator 1 view .LVU366
 1386 000a 8028     		cmp	r0, #128
 1387 000c 13D0     		beq	.L114
 1388              	.LBB1469:
 1389              	.LBI1469:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1390              		.loc 1 1121 5 is_stmt 1 view .LVU367
 1391              	.LBB1470:
1122:src/xeq.c     **** }
 1392              		.loc 1 1122 2 view .LVU368
1122:src/xeq.c     **** }
 1393              		.loc 1 1122 12 is_stmt 0 view .LVU369
 1394 000e 1B68     		ldr	r3, [r3]
1122:src/xeq.c     **** }
 1395              		.loc 1 1122 24 view .LVU370
 1396 0010 B3F8E827 		ldrh	r2, [r3, #2024]
 1397 0014 44F20100 		movw	r0, #16385
 1398              	.LVL99:
1122:src/xeq.c     **** }
 1399              		.loc 1 1122 24 view .LVU371
 1400              	.LBE1470:
 1401              	.LBE1469:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1402              		.loc 1 226 73 view .LVU372
 1403 0018 1040     		ands	r0, r0, r2
ARM GAS  /tmp/cccVhVyH.s 			page 110


 1404 001a A0F58040 		sub	r0, r0, #16384
 1405 001e B0FA80F0 		clz	r0, r0
 1406 0022 4009     		lsrs	r0, r0, #5
 1407 0024 0230     		adds	r0, r0, #2
 1408              	.L109:
 227:src/xeq.c     **** }
 1409              		.loc 1 227 2 is_stmt 1 discriminator 8 view .LVU373
 1410              	.LBB1471:
 1411              	.LBI1471:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1412              		.loc 1 217 5 discriminator 8 view .LVU374
 1413              	.LBB1472:
 218:src/xeq.c     **** }
 1414              		.loc 1 218 2 discriminator 8 view .LVU375
 218:src/xeq.c     **** }
 1415              		.loc 1 218 9 is_stmt 0 discriminator 8 view .LVU376
 1416 0026 B3F8DE37 		ldrh	r3, [r3, #2014]
 1417 002a 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 1418              		.loc 1 218 57 discriminator 8 view .LVU377
 1419 002e 002B     		cmp	r3, #0
 1420 0030 0ADB     		blt	.L115
 1421              	.L112:
 1422 0032 0020     		movs	r0, #0
 1423              	.LBE1472:
 1424              	.LBE1471:
 228:src/xeq.c     **** 
 1425              		.loc 1 228 1 view .LVU378
 1426 0034 7047     		bx	lr
 1427              	.LVL100:
 1428              	.L114:
 228:src/xeq.c     **** 
 1429              		.loc 1 228 1 view .LVU379
 1430 0036 1B68     		ldr	r3, [r3]
 227:src/xeq.c     **** }
 1431              		.loc 1 227 2 is_stmt 1 view .LVU380
 1432              	.LBB1475:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1433              		.loc 1 217 5 view .LVU381
 1434              	.LBB1473:
 218:src/xeq.c     **** }
 1435              		.loc 1 218 2 view .LVU382
 218:src/xeq.c     **** }
 1436              		.loc 1 218 9 is_stmt 0 view .LVU383
 1437 0038 B3F8DE37 		ldrh	r3, [r3, #2014]
 1438 003c 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 1439              		.loc 1 218 57 view .LVU384
 1440 0040 002B     		cmp	r3, #0
 1441              	.LBE1473:
 1442              	.LBE1475:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1443              		.loc 1 226 53 view .LVU385
 1444 0042 4FF00300 		mov	r0, #3
 1445              	.LVL101:
 1446              	.LBB1476:
 1447              	.LBB1474:
ARM GAS  /tmp/cccVhVyH.s 			page 111


 218:src/xeq.c     **** }
 1448              		.loc 1 218 57 view .LVU386
 1449 0046 F4DA     		bge	.L112
 1450              	.L115:
 218:src/xeq.c     **** }
 1451              		.loc 1 218 25 view .LVU387
 1452 0048 064A     		ldr	r2, .L116+4
 1453 004a 1268     		ldr	r2, [r2]
 218:src/xeq.c     **** }
 1454              		.loc 1 218 57 view .LVU388
 1455 004c 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1456 0050 C3F30B03 		ubfx	r3, r3, #0, #12
 1457 0054 43FA00F0 		asr	r0, r3, r0
 1458 0058 7047     		bx	lr
 1459              	.LVL102:
 1460              	.L113:
 218:src/xeq.c     **** }
 1461              		.loc 1 218 57 view .LVU389
 1462 005a 1B68     		ldr	r3, [r3]
 1463              	.LBE1474:
 1464              	.LBE1476:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1465              		.loc 1 226 53 view .LVU390
 1466 005c 0220     		movs	r0, #2
 1467              	.LVL103:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1468              		.loc 1 226 53 view .LVU391
 1469 005e E2E7     		b	.L109
 1470              	.L117:
 1471              		.align	2
 1472              	.L116:
 1473 0060 00000000 		.word	main_ram
 1474 0064 00000000 		.word	RetStk
 1475              		.cfi_endproc
 1476              	.LFE6:
 1478              		.section	.text.get_reg_limit,"ax",%progbits
 1479              		.align	1
 1480              		.p2align 2,,3
 1481              		.syntax unified
 1482              		.thumb
 1483              		.thumb_func
 1484              		.fpu fpv4-sp-d16
 1486              	get_reg_limit:
 1487              	.LVL104:
 1488              	.LFB248:
4562:src/xeq.c     **** 
4563:src/xeq.c     **** 
4564:src/xeq.c     **** #ifndef UNIVERSAL_DISPATCH
4565:src/xeq.c     **** 
4566:src/xeq.c     **** 
4567:src/xeq.c     **** /*
4568:src/xeq.c     ****  *  Call a monadic function by reusing the decimal code for integer mode
4569:src/xeq.c     ****  */
4570:src/xeq.c     **** long long int intMonadic(long long int x) {
4571:src/xeq.c     **** 	int s;
4572:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
4573:src/xeq.c     **** 	decNumber rx, r;
ARM GAS  /tmp/cccVhVyH.s 			page 112


4574:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4575:src/xeq.c     **** 
4576:src/xeq.c     **** 	if (isNULL(monfuncs[f].mondreal))
4577:src/xeq.c     **** 		bad_mode_error();
4578:src/xeq.c     **** 	else {
4579:src/xeq.c     **** 		FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4580:src/xeq.c     **** #ifndef REALBUILD
4581:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4582:src/xeq.c     **** 			bad_mode_error();
4583:src/xeq.c     **** 		else 
4584:src/xeq.c     **** #endif
4585:src/xeq.c     **** 		{
4586:src/xeq.c     **** 			ullint_to_dn(&rx, vx);
4587:src/xeq.c     **** 			if (s)
4588:src/xeq.c     **** 				dn_minus(&rx, &rx);
4589:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
4590:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4591:src/xeq.c     **** 			else
4592:src/xeq.c     **** 				return intResult(&r);
4593:src/xeq.c     **** 		}
4594:src/xeq.c     **** 	}
4595:src/xeq.c     **** 	return 0;
4596:src/xeq.c     **** }
4597:src/xeq.c     **** 
4598:src/xeq.c     **** /*
4599:src/xeq.c     ****  *  Call a dyadic function by reusing the decimal code for integer mode
4600:src/xeq.c     ****  */
4601:src/xeq.c     **** long long int intDyadic(long long int y, long long int x) {
4602:src/xeq.c     **** 	int sx, sy;
4603:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4604:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
4605:src/xeq.c     **** 	decNumber rx, ry, r;
4606:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4607:src/xeq.c     **** 
4608:src/xeq.c     **** 	if (isNULL(dyfuncs[f].dydreal))
4609:src/xeq.c     **** 		bad_mode_error();
4610:src/xeq.c     **** 	else {
4611:src/xeq.c     **** 		FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4612:src/xeq.c     **** 
4613:src/xeq.c     **** #ifndef REALBUILD
4614:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4615:src/xeq.c     **** 			bad_mode_error();
4616:src/xeq.c     **** 		else 
4617:src/xeq.c     **** #endif
4618:src/xeq.c     **** 		{
4619:src/xeq.c     **** 			ullint_to_dn(&rx, vx);	if (sx) dn_minus(&rx, &rx);
4620:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
4621:src/xeq.c     **** 
4622:src/xeq.c     **** 			if (NULL == fp(&r, &ry, &rx))
4623:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4624:src/xeq.c     **** 			else
4625:src/xeq.c     **** 				return intResult(&r);
4626:src/xeq.c     **** 		}
4627:src/xeq.c     **** 	}
4628:src/xeq.c     **** 	return 0;
4629:src/xeq.c     **** }
4630:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 113


4631:src/xeq.c     **** 
4632:src/xeq.c     **** /* Dispatch routine for niladic functions.
4633:src/xeq.c     ****  */
4634:src/xeq.c     **** static void niladic(const opcode op) {
4635:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
4636:src/xeq.c     **** 
4637:src/xeq.c     **** 	process_cmdline();
4638:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
4639:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
4640:src/xeq.c     **** 			bad_mode_error();
4641:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
4642:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
4643:src/xeq.c     **** 			if (dispatch_xrom(fp))
4644:src/xeq.c     **** 				return;
4645:src/xeq.c     **** 			else {
4646:src/xeq.c     **** 				switch (NILADIC_NUMRESULTS(niladics[idx])) {
4647:src/xeq.c     **** 				case 2:	lift_if_enabled();
4648:src/xeq.c     **** 				case 1:	lift_if_enabled();
4649:src/xeq.c     **** 				default:
4650:src/xeq.c     **** 					fp((enum nilop)idx);
4651:src/xeq.c     **** 					break;
4652:src/xeq.c     **** 				}
4653:src/xeq.c     **** 			}
4654:src/xeq.c     **** 		}
4655:src/xeq.c     **** 	} else
4656:src/xeq.c     **** 		illegal(op);
4657:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
4658:src/xeq.c     **** 	if (ENTRY_RPN_ENABLED && (idx != OP_rCLX)) {
4659:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
4660:src/xeq.c     **** 	}
4661:src/xeq.c     **** 	else if ( (idx != OP_rCLX) && ( ((idx != OP_CENTER) ) && (C_LOCKED) ) ) {
4662:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
4663:src/xeq.c     **** 	}
4664:src/xeq.c     **** #else
4665:src/xeq.c     **** 	if (idx != OP_rCLX) set_lift();// normally, just don't turn on lift after CLX
4666:src/xeq.c     **** #endif
4667:src/xeq.c     **** }
4668:src/xeq.c     **** 
4669:src/xeq.c     **** 
4670:src/xeq.c     **** /* Dispatch routine for monadic operations.
4671:src/xeq.c     ****  * Since these functions take an argument from the X register, save it in
4672:src/xeq.c     ****  * lastx and then replace it with their result, we can factor out the common
4673:src/xeq.c     ****  * stack manipulatin code.
4674:src/xeq.c     ****  */
4675:src/xeq.c     **** static void monadic(const opcode op)
4676:src/xeq.c     **** {
4677:src/xeq.c     **** 	unsigned int f;
4678:src/xeq.c     **** 	process_cmdline_set_lift();
4679:src/xeq.c     **** 
4680:src/xeq.c     **** 	f = argKIND(op);
4681:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4682:src/xeq.c     **** 		if (is_intmode()) {
4683:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
4684:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
4685:src/xeq.c     **** 				if (dispatch_xrom(fp))
4686:src/xeq.c     **** 					return;
4687:src/xeq.c     **** 				else {
ARM GAS  /tmp/cccVhVyH.s 			page 114


4688:src/xeq.c     **** 					long long int x = getX_int();
4689:src/xeq.c     **** 					x = fp(x);
4690:src/xeq.c     **** 					setlastX();
4691:src/xeq.c     **** 					setX_int(x);
4692:src/xeq.c     **** 				}
4693:src/xeq.c     **** 			} else
4694:src/xeq.c     **** 				bad_mode_error();
4695:src/xeq.c     **** 		} else {
4696:src/xeq.c     **** 			if (! isNULL(monfuncs[f].mondreal)) {
4697:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4698:src/xeq.c     **** 				if (dispatch_xrom(fp))
4699:src/xeq.c     **** 					return;
4700:src/xeq.c     **** 				else {
4701:src/xeq.c     **** 					decNumber x, r;
4702:src/xeq.c     **** 					getX(&x);
4703:src/xeq.c     **** 					if (NULL == fp(&r, &x))
4704:src/xeq.c     **** 						set_NaN(&r);
4705:src/xeq.c     **** 					setlastX();
4706:src/xeq.c     **** 					setX(&r);
4707:src/xeq.c     **** 				}
4708:src/xeq.c     **** 			} else
4709:src/xeq.c     **** 				bad_mode_error();
4710:src/xeq.c     **** 		}
4711:src/xeq.c     **** 	} else
4712:src/xeq.c     **** 		illegal(op);
4713:src/xeq.c     **** }
4714:src/xeq.c     **** 
4715:src/xeq.c     **** static void monadic_cmplex(const opcode op) {
4716:src/xeq.c     **** 	decNumber x, y, rx, ry;
4717:src/xeq.c     **** 	unsigned int f;
4718:src/xeq.c     **** 
4719:src/xeq.c     **** 	process_cmdline_set_lift();
4720:src/xeq.c     **** 
4721:src/xeq.c     **** 	f = argKIND(op);
4722:src/xeq.c     **** 
4723:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4724:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
4725:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
4726:src/xeq.c     **** 			if (dispatch_xrom(fp))
4727:src/xeq.c     **** 				return;
4728:src/xeq.c     **** 			else {
4729:src/xeq.c     **** 				getXY(&x, &y);
4730:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
4731:src/xeq.c     **** 				setlastXY();
4732:src/xeq.c     **** 				setXY(&rx, &ry);
4733:src/xeq.c     **** 				set_was_complex();
4734:src/xeq.c     **** 			}
4735:src/xeq.c     **** 		} else
4736:src/xeq.c     **** 			bad_mode_error();
4737:src/xeq.c     **** 	} else
4738:src/xeq.c     **** 		illegal(op);
4739:src/xeq.c     **** }
4740:src/xeq.c     **** 
4741:src/xeq.c     **** /***************************************************************************
4742:src/xeq.c     ****  * Dyadic function handling.
4743:src/xeq.c     ****  */
4744:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 115


4745:src/xeq.c     **** /* Dispatch routine for dyadic operations.
4746:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4747:src/xeq.c     ****  * common stack manipulation.
4748:src/xeq.c     ****  */
4749:src/xeq.c     **** static void dyadic(const opcode op) {
4750:src/xeq.c     **** 
4751:src/xeq.c     **** 	unsigned int f;
4752:src/xeq.c     **** 	process_cmdline_set_lift();
4753:src/xeq.c     **** 
4754:src/xeq.c     **** 	f = argKIND(op);
4755:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4756:src/xeq.c     **** 		if (is_intmode()) {
4757:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
4758:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
4759:src/xeq.c     **** 				if (dispatch_xrom(fp))
4760:src/xeq.c     **** 					return;
4761:src/xeq.c     **** 				else {
4762:src/xeq.c     **** 					long long int x = getX_int();
4763:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4764:src/xeq.c     **** 					x = fp(y, x);
4765:src/xeq.c     **** 					setlastX();
4766:src/xeq.c     **** 					lower();
4767:src/xeq.c     **** 					setX_int(x);
4768:src/xeq.c     **** 				}
4769:src/xeq.c     **** 			} else
4770:src/xeq.c     **** 				bad_mode_error();
4771:src/xeq.c     **** 		} else {
4772:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydreal)) {
4773:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4774:src/xeq.c     **** 				if (dispatch_xrom(fp))
4775:src/xeq.c     **** 					return;
4776:src/xeq.c     **** 				else {
4777:src/xeq.c     **** 					decNumber x, y, r;
4778:src/xeq.c     **** 					getXY(&x, &y);
4779:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
4780:src/xeq.c     **** 						set_NaN(&r);
4781:src/xeq.c     **** 					setlastX();
4782:src/xeq.c     **** 					lower();
4783:src/xeq.c     **** 					setX(&r);
4784:src/xeq.c     **** 				}
4785:src/xeq.c     **** 			} else
4786:src/xeq.c     **** 				bad_mode_error();
4787:src/xeq.c     **** 		}
4788:src/xeq.c     **** 	} else
4789:src/xeq.c     **** 		illegal(op);
4790:src/xeq.c     **** }
4791:src/xeq.c     **** 
4792:src/xeq.c     **** static void dyadic_cmplex(const opcode op) {
4793:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
4794:src/xeq.c     **** 	unsigned int f;
4795:src/xeq.c     **** 
4796:src/xeq.c     **** 	process_cmdline_set_lift();
4797:src/xeq.c     **** 
4798:src/xeq.c     **** 	f = argKIND(op);
4799:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4800:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
4801:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
ARM GAS  /tmp/cccVhVyH.s 			page 116


4802:src/xeq.c     **** 			if (dispatch_xrom(fp))
4803:src/xeq.c     **** 				return;
4804:src/xeq.c     **** 			else {
4805:src/xeq.c     **** 				getXYZT(&x1, &y1, &x2, &y2);
4806:src/xeq.c     **** 
4807:src/xeq.c     **** 				fp(&xr, &yr, &x2, &y2, &x1, &y1);
4808:src/xeq.c     **** 
4809:src/xeq.c     **** 				setlastXY();
4810:src/xeq.c     **** 				lower2();
4811:src/xeq.c     **** 				setXY(&xr, &yr);
4812:src/xeq.c     **** 				set_was_complex();
4813:src/xeq.c     **** 			}
4814:src/xeq.c     **** 		} else
4815:src/xeq.c     **** 			bad_mode_error();
4816:src/xeq.c     **** 	} else
4817:src/xeq.c     **** 		illegal(op);
4818:src/xeq.c     **** }
4819:src/xeq.c     **** 
4820:src/xeq.c     **** /* Dispatch routine for triadic operations.
4821:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4822:src/xeq.c     ****  * common stack manipulation.
4823:src/xeq.c     ****  */
4824:src/xeq.c     **** static void triadic(const opcode op) {
4825:src/xeq.c     **** 	unsigned int f;
4826:src/xeq.c     **** 	process_cmdline_set_lift();
4827:src/xeq.c     **** 
4828:src/xeq.c     **** 	f = argKIND(op);
4829:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
4830:src/xeq.c     **** 		if (is_intmode()) {
4831:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
4832:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
4833:src/xeq.c     **** 				if (dispatch_xrom(fp))
4834:src/xeq.c     **** 					return;
4835:src/xeq.c     **** 				else {
4836:src/xeq.c     **** 					long long int x = getX_int();
4837:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4838:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
4839:src/xeq.c     **** 					x = fp(z, y, x);
4840:src/xeq.c     **** 					setlastX();
4841:src/xeq.c     **** 					lower();
4842:src/xeq.c     **** 					lower();
4843:src/xeq.c     **** 					setX_int(x);
4844:src/xeq.c     **** 				}
4845:src/xeq.c     **** 			} else
4846:src/xeq.c     **** 				bad_mode_error();
4847:src/xeq.c     **** 		} else {
4848:src/xeq.c     **** 			if (! isNULL(trifuncs[f].trireal)) {
4849:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
4850:src/xeq.c     **** 				if (dispatch_xrom(fp))
4851:src/xeq.c     **** 					return;
4852:src/xeq.c     **** 				else {
4853:src/xeq.c     **** 					decNumber x, y, z, r;
4854:src/xeq.c     **** 					getXYZ(&x, &y, &z);
4855:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
4856:src/xeq.c     **** 						set_NaN(&r);
4857:src/xeq.c     **** 					setlastX();
4858:src/xeq.c     **** 					lower();
ARM GAS  /tmp/cccVhVyH.s 			page 117


4859:src/xeq.c     **** 					lower();
4860:src/xeq.c     **** 					setX(&r);
4861:src/xeq.c     **** 				}
4862:src/xeq.c     **** 			} else
4863:src/xeq.c     **** 				bad_mode_error();
4864:src/xeq.c     **** 		}
4865:src/xeq.c     **** 	} else
4866:src/xeq.c     **** 		illegal(op);
4867:src/xeq.c     **** }
4868:src/xeq.c     **** 
4869:src/xeq.c     **** 
4870:src/xeq.c     **** #else // UNIVERSAL_DISPATCH
4871:src/xeq.c     **** 
4872:src/xeq.c     **** 
4873:src/xeq.c     **** /*
4874:src/xeq.c     ****  *  Call functions by reusing the decimal code for integer mode
4875:src/xeq.c     ****  */
4876:src/xeq.c     **** static long long int universal_dispatch_int(long long int y, long long int x, unsigned int dyadic)
4877:src/xeq.c     **** {
4878:src/xeq.c     **** 	int sx, sy;
4879:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4880:src/xeq.c     **** 	unsigned long long int vy;
4881:src/xeq.c     **** 	decNumber rx, ry, r;
4882:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4883:src/xeq.c     **** 	void (*function_pointer)(void);
4884:src/xeq.c     **** 
4885:src/xeq.c     **** #ifdef SHORT_POINTERS
4886:src/xeq.c     **** 	unsigned short compact_pointer;
4887:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4888:src/xeq.c     **** #else
4889:src/xeq.c     **** 	void (*compact_pointer)(void);
4890:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4891:src/xeq.c     **** #endif
4892:src/xeq.c     **** 
4893:src/xeq.c     **** 	if (dyadic) {
4894:src/xeq.c     **** 		vy = extract_value(y, &sy);
4895:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4896:src/xeq.c     **** 	}
4897:src/xeq.c     **** 	else {
4898:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4899:src/xeq.c     **** 	}
4900:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4901:src/xeq.c     **** 		bad_mode_error();
4902:src/xeq.c     **** 	}
4903:src/xeq.c     **** 	else {
4904:src/xeq.c     **** 		function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4905:src/xeq.c     **** #ifndef REALBUILD
4906:src/xeq.c     **** 		if (check_for_xrom_address(function_pointer) != NULL) {
4907:src/xeq.c     **** 			bad_mode_error();
4908:src/xeq.c     **** 		}
4909:src/xeq.c     **** 		else
4910:src/xeq.c     **** #endif
4911:src/xeq.c     **** 		{
4912:src/xeq.c     **** 			void *result;
4913:src/xeq.c     **** 
4914:src/xeq.c     **** 			ullint_to_dn(&rx, vx);		if (sx) dn_minus(&rx, &rx);
4915:src/xeq.c     **** 			if (dyadic) {
ARM GAS  /tmp/cccVhVyH.s 			page 118


4916:src/xeq.c     **** 				ullint_to_dn(&ry, vy);		if (sy) dn_minus(&ry, &ry);
4917:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r, &ry, &rx);
4918:src/xeq.c     **** 			}
4919:src/xeq.c     **** 			else {
4920:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r, &rx);
4921:src/xeq.c     **** 			}
4922:src/xeq.c     **** 			if (NULL == result) {
4923:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4924:src/xeq.c     **** 			}
4925:src/xeq.c     **** 			else {
4926:src/xeq.c     **** 				return intResult(&r);
4927:src/xeq.c     **** 			}
4928:src/xeq.c     **** 		}
4929:src/xeq.c     **** 	}
4930:src/xeq.c     **** 	return 0;
4931:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
4932:src/xeq.c     **** }
4933:src/xeq.c     **** 
4934:src/xeq.c     **** 
4935:src/xeq.c     **** long long int intMonadic(long long int x)
4936:src/xeq.c     **** {
4937:src/xeq.c     **** 	return universal_dispatch_int(0, x, 0);
4938:src/xeq.c     **** }
4939:src/xeq.c     **** 
4940:src/xeq.c     **** long long int intDyadic(long long int y, long long int x)
4941:src/xeq.c     **** {
4942:src/xeq.c     **** 	return universal_dispatch_int(y, x, 1);
4943:src/xeq.c     **** }
4944:src/xeq.c     **** 
4945:src/xeq.c     **** 
4946:src/xeq.c     **** /*
4947:src/xeq.c     ****  *  Universal dispatch function for niladic, monadic, dyadic and triadic functions, both real and c
4948:src/xeq.c     ****  */
4949:src/xeq.c     **** static void universal_dispatch(const opcode op, const unsigned int operands, const unsigned int com
4950:src/xeq.c     **** {
4951:src/xeq.c     **** 	const int intmode = is_intmode();
4952:src/xeq.c     **** 	volatile long long int ix; // declared volatile to avoid bogus warning about variable possibly bei
4953:src/xeq.c     **** 	const unsigned int f = argKIND(op);
4954:src/xeq.c     **** 	void (*function_pointer)(void);
4955:src/xeq.c     **** 
4956:src/xeq.c     **** #ifdef SHORT_POINTERS
4957:src/xeq.c     **** 	unsigned short compact_pointer;
4958:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4959:src/xeq.c     **** #else
4960:src/xeq.c     **** 	void (*compact_pointer)(void);
4961:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4962:src/xeq.c     **** #endif
4963:src/xeq.c     **** 
4964:src/xeq.c     **** 	process_cmdline();
4965:src/xeq.c     **** 	if (operands != 0) {
4966:src/xeq.c     **** 		set_lift();
4967:src/xeq.c     **** 	}
4968:src/xeq.c     **** 	switch (operands) {
4969:src/xeq.c     **** 	default:
4970:src/xeq.c     **** 	case 0:
4971:src/xeq.c     **** 		if (f >= NUM_NILADIC) {
4972:src/xeq.c     **** illegal:
ARM GAS  /tmp/cccVhVyH.s 			page 119


4973:src/xeq.c     **** 			illegal(op);
4974:src/xeq.c     **** 			goto finish_niladic;
4975:src/xeq.c     **** 		}
4976:src/xeq.c     **** 		if (intmode && NILADIC_NOTINT(niladics[f])) {
4977:src/xeq.c     **** 			goto bad_mode;
4978:src/xeq.c     **** 		}
4979:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)niladics[f].niladicf;
4980:src/xeq.c     **** 		break;
4981:src/xeq.c     **** 
4982:src/xeq.c     **** 	case 1:
4983:src/xeq.c     **** 		if (f >= NUM_MONADIC)
4984:src/xeq.c     **** 			goto illegal;
4985:src/xeq.c     **** 		if (intmode)
4986:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].monint;
4987:src/xeq.c     **** 		else if (complex)
4988:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondcmplx;
4989:src/xeq.c     **** 		else
4990:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4991:src/xeq.c     **** 		break;
4992:src/xeq.c     **** 
4993:src/xeq.c     **** 	case 2:
4994:src/xeq.c     **** 		if (f >= NUM_DYADIC)
4995:src/xeq.c     **** 			goto illegal;
4996:src/xeq.c     **** 		if (intmode)
4997:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydint;
4998:src/xeq.c     **** 		else if (complex)
4999:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydcmplx;
5000:src/xeq.c     **** 		else
5001:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
5002:src/xeq.c     **** 		break;
5003:src/xeq.c     **** 
5004:src/xeq.c     **** 	case 3:
5005:src/xeq.c     **** 		if (f >= NUM_TRIADIC)
5006:src/xeq.c     **** 			goto illegal;
5007:src/xeq.c     **** 		if (intmode)
5008:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].triint;
5009:src/xeq.c     **** 		else
5010:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].trireal;
5011:src/xeq.c     **** 		break;
5012:src/xeq.c     **** 	}
5013:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
5014:src/xeq.c     **** 		if (operands != 0) {
5015:src/xeq.c     **** 			// The original niladic() function doesn't invoke
5016:src/xeq.c     **** 			// bad_mode_error() if the function pointer is null.
5017:src/xeq.c     **** 			// TODO:  Verify that this behavior is really needed.
5018:src/xeq.c     **** bad_mode:
5019:src/xeq.c     **** 			bad_mode_error();
5020:src/xeq.c     **** 		}
5021:src/xeq.c     **** 		goto finish_niladic;
5022:src/xeq.c     **** 	}
5023:src/xeq.c     **** 	function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
5024:src/xeq.c     **** 	if (dispatch_xrom(function_pointer)) {
5025:src/xeq.c     **** 		return;
5026:src/xeq.c     **** 	}
5027:src/xeq.c     **** 	if (operands == 0) {
5028:src/xeq.c     **** 		switch (NILADIC_NUMRESULTS(niladics[f])) {
5029:src/xeq.c     **** 		case 2:		lift_if_enabled(); // fall through
ARM GAS  /tmp/cccVhVyH.s 			page 120


5030:src/xeq.c     **** 		case 1:		lift_if_enabled(); break;
5031:src/xeq.c     **** 		}
5032:src/xeq.c     **** 		((FP_NILADIC)function_pointer)((enum nilop)f);
5033:src/xeq.c     **** finish_niladic:
5034:src/xeq.c     **** 		// If an error occurred, we end up here even if a non-niladic function was called.
5035:src/xeq.c     **** 		// set_lift() is always called for non-niladic functions so calling it again does no harm.
5036:src/xeq.c     **** 		if (f != OP_rCLX) {
5037:src/xeq.c     **** 			set_lift();
5038:src/xeq.c     **** 		}
5039:src/xeq.c     **** 	}
5040:src/xeq.c     **** 	else if (intmode) {
5041:src/xeq.c     **** 		long long int iy;
5042:src/xeq.c     **** 		long long int iz;
5043:src/xeq.c     **** 
5044:src/xeq.c     **** 		ix = getX_int();
5045:src/xeq.c     **** 		iy = get_reg_n_int(regY_idx);
5046:src/xeq.c     **** 		switch (operands) {
5047:src/xeq.c     **** 		default:
5048:src/xeq.c     **** 		case 1:
5049:src/xeq.c     **** 			ix = ((FP_MONADIC_INT)function_pointer)(ix);
5050:src/xeq.c     **** 			break;
5051:src/xeq.c     **** 
5052:src/xeq.c     **** 		case 2:
5053:src/xeq.c     **** 			ix = ((FP_DYADIC_INT)function_pointer)(iy, ix);
5054:src/xeq.c     **** 			break;
5055:src/xeq.c     **** 
5056:src/xeq.c     **** 		case 3:
5057:src/xeq.c     **** 			iz = get_reg_n_int(regZ_idx);
5058:src/xeq.c     **** 			ix = ((FP_TRIADIC_INT)function_pointer)(iz, iy, ix);
5059:src/xeq.c     **** 			break;
5060:src/xeq.c     **** 		}
5061:src/xeq.c     **** 		goto finish_x;
5062:src/xeq.c     **** 	}
5063:src/xeq.c     **** 	else {
5064:src/xeq.c     **** 		decNumber x, y, z, t, r1;
5065:src/xeq.c     **** 
5066:src/xeq.c     **** 		if (operands + complex <= 2) {
5067:src/xeq.c     **** 			getXY(&x, &y);
5068:src/xeq.c     **** 		}
5069:src/xeq.c     **** 		else {
5070:src/xeq.c     **** 			getXYZT(&x, &y, &z, &t);
5071:src/xeq.c     **** 		}
5072:src/xeq.c     **** 
5073:src/xeq.c     **** 		if (complex) {
5074:src/xeq.c     **** 			decNumber r2;
5075:src/xeq.c     **** 
5076:src/xeq.c     **** 			if (operands == 1) {
5077:src/xeq.c     **** 				((FP_MONADIC_CMPLX)function_pointer)(&r1, &r2, &x, &y);
5078:src/xeq.c     **** 			}
5079:src/xeq.c     **** 			else {
5080:src/xeq.c     **** 				((FP_DYADIC_CMPLX)function_pointer)(&r1, &r2, &z, &t, &x, &y);
5081:src/xeq.c     **** 			}
5082:src/xeq.c     **** 			setlastXY();
5083:src/xeq.c     **** 			if (operands != 1) {
5084:src/xeq.c     **** 				lower2();
5085:src/xeq.c     **** 			}
5086:src/xeq.c     **** 			setXY(&r1, &r2);
ARM GAS  /tmp/cccVhVyH.s 			page 121


5087:src/xeq.c     **** 			set_was_complex();
5088:src/xeq.c     **** 		}
5089:src/xeq.c     **** 		else { // real
5090:src/xeq.c     **** 			void *result;
5091:src/xeq.c     **** 
5092:src/xeq.c     **** 			switch (operands) {
5093:src/xeq.c     **** 			default:
5094:src/xeq.c     **** 			case 1:
5095:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r1, &x);
5096:src/xeq.c     **** 				break;
5097:src/xeq.c     **** 
5098:src/xeq.c     **** 			case 2:
5099:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r1, &y, &x);
5100:src/xeq.c     **** 				break;
5101:src/xeq.c     **** 
5102:src/xeq.c     **** 			case 3:
5103:src/xeq.c     **** 				result = ((FP_TRIADIC_REAL)function_pointer)(&r1, &z, &y, &x);
5104:src/xeq.c     **** 				break;
5105:src/xeq.c     **** 			}
5106:src/xeq.c     **** 			if (NULL == result) {
5107:src/xeq.c     **** 				set_NaN(&r1);
5108:src/xeq.c     **** 			}
5109:src/xeq.c     **** finish_x:
5110:src/xeq.c     **** 			setlastX();
5111:src/xeq.c     **** 			switch (operands) {
5112:src/xeq.c     **** 			case 3:		lower(); // fall through
5113:src/xeq.c     **** 			case 2:		lower(); break;
5114:src/xeq.c     **** 			}
5115:src/xeq.c     **** 			if (!intmode) {
5116:src/xeq.c     **** 				setX(&r1);
5117:src/xeq.c     **** 			}
5118:src/xeq.c     **** 			else {
5119:src/xeq.c     **** 				setX_int(ix);
5120:src/xeq.c     **** 			}
5121:src/xeq.c     **** 		}
5122:src/xeq.c     **** 	}
5123:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
5124:src/xeq.c     **** }
5125:src/xeq.c     **** 
5126:src/xeq.c     **** 
5127:src/xeq.c     **** static void niladic(const opcode op)
5128:src/xeq.c     **** {
5129:src/xeq.c     **** 	universal_dispatch(op, 0, 0);
5130:src/xeq.c     **** }
5131:src/xeq.c     **** 
5132:src/xeq.c     **** static void monadic(const opcode op)
5133:src/xeq.c     **** {
5134:src/xeq.c     **** 	universal_dispatch(op, 1, 0);
5135:src/xeq.c     **** }
5136:src/xeq.c     **** 
5137:src/xeq.c     **** static void monadic_cmplex(const opcode op)
5138:src/xeq.c     **** {
5139:src/xeq.c     **** 	universal_dispatch(op, 1, 1);
5140:src/xeq.c     **** }
5141:src/xeq.c     **** 
5142:src/xeq.c     **** static void dyadic(const opcode op)
5143:src/xeq.c     **** {
ARM GAS  /tmp/cccVhVyH.s 			page 122


5144:src/xeq.c     **** 	universal_dispatch(op, 2, 0);
5145:src/xeq.c     **** }
5146:src/xeq.c     **** 
5147:src/xeq.c     **** static void dyadic_cmplex(const opcode op)
5148:src/xeq.c     **** {
5149:src/xeq.c     **** 	universal_dispatch(op, 2, 1);
5150:src/xeq.c     **** }
5151:src/xeq.c     **** 
5152:src/xeq.c     **** static void triadic(const opcode op)
5153:src/xeq.c     **** {
5154:src/xeq.c     **** 	universal_dispatch(op, 3, 0);
5155:src/xeq.c     **** }
5156:src/xeq.c     **** 
5157:src/xeq.c     **** 
5158:src/xeq.c     **** #endif // UNIVERSAL_DISPATCH
5159:src/xeq.c     **** 
5160:src/xeq.c     **** 
5161:src/xeq.c     **** /*
5162:src/xeq.c     ****  *  Helper to check the maximum allowed register number, 
5163:src/xeq.c     ****  *  depending on command flags and current allocation.
5164:src/xeq.c     ****  *  This needs to be seperate because its called twice for indirect arguments
5165:src/xeq.c     ****  */
5166:src/xeq.c     **** static unsigned int get_reg_limit(unsigned int cmd, unsigned int arg)
5167:src/xeq.c     **** {
 1489              		.loc 1 5167 1 is_stmt 1 view -0
 1490              		.cfi_startproc
 1491              		@ args = 0, pretend = 0, frame = 0
 1492              		@ frame_needed = 0, uses_anonymous_args = 0
5168:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1493              		.loc 1 5168 2 view .LVU393
5169:src/xeq.c     **** 
5170:src/xeq.c     **** 	if (arg < TOPREALREG) {
 1494              		.loc 1 5170 2 view .LVU394
 1495              		.loc 1 5170 5 is_stmt 0 view .LVU395
 1496 0000 6329     		cmp	r1, #99
5167:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1497              		.loc 1 5167 1 view .LVU396
 1498 0002 38B5     		push	{r3, r4, r5, lr}
 1499              		.cfi_def_cfa_offset 16
 1500              		.cfi_offset 3, -16
 1501              		.cfi_offset 4, -12
 1502              		.cfi_offset 5, -8
 1503              		.cfi_offset 14, -4
5167:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1504              		.loc 1 5167 1 view .LVU397
 1505 0004 0446     		mov	r4, r0
 1506              		.loc 1 5170 5 view .LVU398
 1507 0006 16D8     		bhi	.L119
5171:src/xeq.c     **** 		// Range checking for registers against variable boundary
5172:src/xeq.c     **** 		lim = global_regs_rarg((enum rarg) cmd) - 1;
 1508              		.loc 1 5172 3 is_stmt 1 view .LVU399
 1509              	.LVL105:
 1510              	.LBB1477:
 1511              	.LBI1477:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1512              		.loc 1 241 14 view .LVU400
 1513              	.LBB1478:
ARM GAS  /tmp/cccVhVyH.s 			page 123


 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1514              		.loc 1 242 2 view .LVU401
 1515              	.LBB1479:
 1516              	.LBI1479:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1517              		.loc 1 1121 5 view .LVU402
 1518              	.LBB1480:
1122:src/xeq.c     **** }
 1519              		.loc 1 1122 2 view .LVU403
1122:src/xeq.c     **** }
 1520              		.loc 1 1122 12 is_stmt 0 view .LVU404
 1521 0008 294B     		ldr	r3, .L139
 1522 000a 1A68     		ldr	r2, [r3]
1122:src/xeq.c     **** }
 1523              		.loc 1 1122 24 view .LVU405
 1524 000c B2F8E817 		ldrh	r1, [r2, #2024]
 1525              	.LVL106:
1122:src/xeq.c     **** }
 1526              		.loc 1 1122 24 view .LVU406
 1527 0010 44F20103 		movw	r3, #16385
 1528              	.LBE1480:
 1529              	.LBE1479:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1530              		.loc 1 242 5 view .LVU407
 1531 0014 0B40     		ands	r3, r3, r1
 1532 0016 B3F5804F 		cmp	r3, #16384
 1533 001a 2ED0     		beq	.L120
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1534              		.loc 1 242 19 view .LVU408
 1535 001c 8028     		cmp	r0, #128
 1536 001e 39D0     		beq	.L136
 247:src/xeq.c     **** }
 1537              		.loc 1 247 3 is_stmt 1 view .LVU409
 247:src/xeq.c     **** }
 1538              		.loc 1 247 10 is_stmt 0 view .LVU410
 1539 0020 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1540              	.LVL107:
 1541              	.L124:
 247:src/xeq.c     **** }
 1542              		.loc 1 247 10 view .LVU411
 1543 0024 2349     		ldr	r1, .L139+4
 1544              	.LBE1478:
 1545              	.LBE1477:
 1546              		.loc 1 5172 7 view .LVU412
 1547 0026 0138     		subs	r0, r0, #1
 1548              	.LVL108:
 1549              		.loc 1 5172 7 view .LVU413
 1550 0028 2501     		lsls	r5, r4, #4
 1551              	.LVL109:
 1552              	.L125:
5173:src/xeq.c     **** 	}
5174:src/xeq.c     **** 	else if (argcmds[cmd].local) {
5175:src/xeq.c     **** 		// Range checking for local registers
5176:src/xeq.c     **** 		lim = NUMREG - 1 + local_regs_rarg((enum rarg) cmd);
5177:src/xeq.c     **** 	}
5178:src/xeq.c     **** 	if (argcmds[cmd].cmplx) {
 1553              		.loc 1 5178 2 is_stmt 1 view .LVU414
ARM GAS  /tmp/cccVhVyH.s 			page 124


 1554              		.loc 1 5178 18 is_stmt 0 view .LVU415
 1555 002a 2944     		add	r1, r1, r5
 1556 002c 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 1557              		.loc 1 5178 5 view .LVU416
 1558 002e D906     		lsls	r1, r3, #27
 1559 0030 10D5     		bpl	.L126
 1560              	.L137:
5179:src/xeq.c     **** 		// one short of the last avialable register for complex access
5180:src/xeq.c     **** 		--lim;
 1561              		.loc 1 5180 3 is_stmt 1 view .LVU417
 1562 0032 0138     		subs	r0, r0, #1
 1563              	.LVL110:
 1564              	.L118:
5181:src/xeq.c     **** 	}
5182:src/xeq.c     **** 	else if (cmd == RARG_STOSTK || cmd == RARG_RCLSTK) {
5183:src/xeq.c     **** 		// avoid stack clash error in these commands
5184:src/xeq.c     **** 		lim -= stack_size() - 1;
5185:src/xeq.c     **** 	}
5186:src/xeq.c     **** 	return lim;
5187:src/xeq.c     **** }
 1565              		.loc 1 5187 1 is_stmt 0 view .LVU418
 1566 0034 38BD     		pop	{r3, r4, r5, pc}
 1567              	.LVL111:
 1568              	.L119:
5174:src/xeq.c     **** 		// Range checking for local registers
 1569              		.loc 1 5174 7 is_stmt 1 view .LVU419
5174:src/xeq.c     **** 		// Range checking for local registers
 1570              		.loc 1 5174 23 is_stmt 0 view .LVU420
 1571 0036 1F49     		ldr	r1, .L139+4
 1572              	.LVL112:
5174:src/xeq.c     **** 		// Range checking for local registers
 1573              		.loc 1 5174 23 view .LVU421
 1574 0038 01EB0013 		add	r3, r1, r0, lsl #4
 1575 003c 0501     		lsls	r5, r0, #4
 1576 003e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
5174:src/xeq.c     **** 		// Range checking for local registers
 1577              		.loc 1 5174 10 view .LVU422
 1578 0040 1807     		lsls	r0, r3, #28
 1579              	.LVL113:
5174:src/xeq.c     **** 		// Range checking for local registers
 1580              		.loc 1 5174 10 view .LVU423
 1581 0042 18D5     		bpl	.L130
5176:src/xeq.c     **** 	}
 1582              		.loc 1 5176 3 is_stmt 1 view .LVU424
5176:src/xeq.c     **** 	}
 1583              		.loc 1 5176 22 is_stmt 0 view .LVU425
 1584 0044 E0B2     		uxtb	r0, r4
 1585 0046 FFF7FEFF 		bl	local_regs_rarg
 1586              	.LVL114:
5178:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1587              		.loc 1 5178 18 view .LVU426
 1588 004a 2944     		add	r1, r1, r5
5176:src/xeq.c     **** 	}
 1589              		.loc 1 5176 20 view .LVU427
 1590 004c 6F30     		adds	r0, r0, #111
 1591              	.LVL115:
5178:src/xeq.c     **** 		// one short of the last avialable register for complex access
ARM GAS  /tmp/cccVhVyH.s 			page 125


 1592              		.loc 1 5178 2 is_stmt 1 view .LVU428
5178:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1593              		.loc 1 5178 18 is_stmt 0 view .LVU429
 1594 004e 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
5178:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1595              		.loc 1 5178 5 view .LVU430
 1596 0050 D906     		lsls	r1, r3, #27
 1597 0052 EED4     		bmi	.L137
 1598              	.L126:
5182:src/xeq.c     **** 		// avoid stack clash error in these commands
 1599              		.loc 1 5182 7 is_stmt 1 view .LVU431
5182:src/xeq.c     **** 		// avoid stack clash error in these commands
 1600              		.loc 1 5182 30 is_stmt 0 view .LVU432
 1601 0054 223C     		subs	r4, r4, #34
 1602              	.LVL116:
5182:src/xeq.c     **** 		// avoid stack clash error in these commands
 1603              		.loc 1 5182 10 view .LVU433
 1604 0056 012C     		cmp	r4, #1
 1605 0058 ECD8     		bhi	.L118
5184:src/xeq.c     **** 	}
 1606              		.loc 1 5184 3 is_stmt 1 view .LVU434
 1607              	.LBB1485:
 1608              	.LBI1485:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 1609              		.loc 1 712 5 view .LVU435
 1610              	.LBB1486:
 713:src/xeq.c     **** 		return 4;
 1611              		.loc 1 713 2 view .LVU436
 713:src/xeq.c     **** 		return 4;
 1612              		.loc 1 713 8 is_stmt 0 view .LVU437
 1613 005a 154B     		ldr	r3, .L139
 1614 005c 1B68     		ldr	r3, [r3]
 713:src/xeq.c     **** 		return 4;
 1615              		.loc 1 713 6 view .LVU438
 1616 005e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 1617              		.loc 1 713 5 view .LVU439
 1618 0062 1207     		lsls	r2, r2, #28
 1619 0064 14D5     		bpl	.L131
 1620              	.LBB1487:
 1621              	.LBI1487:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 1622              		.loc 1 185 5 is_stmt 1 view .LVU440
 1623              	.LBB1488:
 186:src/xeq.c     **** }
 1624              		.loc 1 186 2 view .LVU441
 186:src/xeq.c     **** }
 1625              		.loc 1 186 9 is_stmt 0 view .LVU442
 1626 0066 B3F8E037 		ldrh	r3, [r3, #2016]
 1627              	.LBE1488:
 1628              	.LBE1487:
 713:src/xeq.c     **** 		return 4;
 1629              		.loc 1 713 27 view .LVU443
 1630 006a 9B0B     		lsrs	r3, r3, #14
 1631 006c 032B     		cmp	r3, #3
 1632 006e 16D0     		beq	.L138
 1633 0070 0723     		movs	r3, #7
ARM GAS  /tmp/cccVhVyH.s 			page 126


 1634              	.L128:
 1635              	.LBE1486:
 1636              	.LBE1485:
5184:src/xeq.c     **** 	}
 1637              		.loc 1 5184 7 view .LVU444
 1638 0072 C01A     		subs	r0, r0, r3
 1639              	.LVL117:
5186:src/xeq.c     **** }
 1640              		.loc 1 5186 2 is_stmt 1 view .LVU445
 1641              		.loc 1 5187 1 is_stmt 0 view .LVU446
 1642 0074 38BD     		pop	{r3, r4, r5, pc}
 1643              	.LVL118:
 1644              	.L130:
5168:src/xeq.c     **** 
 1645              		.loc 1 5168 15 view .LVU447
 1646 0076 7020     		movs	r0, #112
 1647 0078 D7E7     		b	.L125
 1648              	.LVL119:
 1649              	.L120:
 1650              	.LBB1491:
 1651              	.LBB1483:
 1652              	.LBB1481:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1653              		.loc 1 243 3 is_stmt 1 view .LVU448
 244:src/xeq.c     **** 	}
 1654              		.loc 1 244 26 is_stmt 0 view .LVU449
 1655 007a A4F17E03 		sub	r3, r4, #126
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1656              		.loc 1 243 24 view .LVU450
 1657 007e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1658              	.LVL120:
 244:src/xeq.c     **** 	}
 1659              		.loc 1 244 56 view .LVU451
 1660 0082 DBB2     		uxtb	r3, r3
 1661 0084 012B     		cmp	r3, #1
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1662              		.loc 1 243 13 view .LVU452
 1663 0086 A0F10C00 		sub	r0, r0, #12
 1664              	.LVL121:
 244:src/xeq.c     **** 	}
 1665              		.loc 1 244 3 is_stmt 1 view .LVU453
 244:src/xeq.c     **** 	}
 1666              		.loc 1 244 56 is_stmt 0 view .LVU454
 1667 008a CBD9     		bls	.L124
 244:src/xeq.c     **** 	}
 1668              		.loc 1 244 67 view .LVU455
 1669 008c 4010     		asrs	r0, r0, #1
 1670              	.LVL122:
 244:src/xeq.c     **** 	}
 1671              		.loc 1 244 67 view .LVU456
 1672 008e C9E7     		b	.L124
 1673              	.LVL123:
 1674              	.L131:
 244:src/xeq.c     **** 	}
 1675              		.loc 1 244 67 view .LVU457
 1676              	.LBE1481:
 1677              	.LBE1483:
ARM GAS  /tmp/cccVhVyH.s 			page 127


 1678              	.LBE1491:
 1679              	.LBB1492:
 1680              	.LBB1489:
 1681 0090 0323     		movs	r3, #3
 1682 0092 EEE7     		b	.L128
 1683              	.LVL124:
 1684              	.L136:
 244:src/xeq.c     **** 	}
 1685              		.loc 1 244 67 view .LVU458
 1686              	.LBE1489:
 1687              	.LBE1492:
 1688              	.LBB1493:
 1689              	.LBB1484:
 1690              	.LBB1482:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1691              		.loc 1 243 3 is_stmt 1 view .LVU459
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1692              		.loc 1 243 24 is_stmt 0 view .LVU460
 1693 0094 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1694              	.LVL125:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1695              		.loc 1 243 13 view .LVU461
 1696 0098 0C38     		subs	r0, r0, #12
 1697              	.LVL126:
 244:src/xeq.c     **** 	}
 1698              		.loc 1 244 3 is_stmt 1 view .LVU462
 244:src/xeq.c     **** 	}
 1699              		.loc 1 244 67 is_stmt 0 view .LVU463
 1700 009a 4010     		asrs	r0, r0, #1
 1701              	.LVL127:
 244:src/xeq.c     **** 	}
 1702              		.loc 1 244 67 view .LVU464
 1703 009c C2E7     		b	.L124
 1704              	.LVL128:
 1705              	.L138:
 244:src/xeq.c     **** 	}
 1706              		.loc 1 244 67 view .LVU465
 1707              	.LBE1482:
 1708              	.LBE1484:
 1709              	.LBE1493:
 1710              	.LBB1494:
 1711              	.LBB1490:
 713:src/xeq.c     **** 		return 4;
 1712              		.loc 1 713 44 view .LVU466
 1713 009e 064B     		ldr	r3, .L139+8
 713:src/xeq.c     **** 		return 4;
 1714              		.loc 1 713 41 view .LVU467
 1715 00a0 93F90130 		ldrsb	r3, [r3, #1]
 1716 00a4 002B     		cmp	r3, #0
 1717 00a6 B4BF     		ite	lt
 1718 00a8 0723     		movlt	r3, #7
 1719 00aa 0323     		movge	r3, #3
 1720 00ac E1E7     		b	.L128
 1721              	.L140:
 1722 00ae 00BF     		.align	2
 1723              	.L139:
 1724 00b0 00000000 		.word	main_ram
ARM GAS  /tmp/cccVhVyH.s 			page 128


 1725 00b4 00000000 		.word	argcmds
 1726 00b8 00000000 		.word	XromParams
 1727              	.LBE1490:
 1728              	.LBE1494:
 1729              		.cfi_endproc
 1730              	.LFE248:
 1732              		.section	.text.local_regs,"ax",%progbits
 1733              		.align	1
 1734              		.p2align 2,,3
 1735              		.global	local_regs
 1736              		.syntax unified
 1737              		.thumb
 1738              		.thumb_func
 1739              		.fpu fpv4-sp-d16
 1741              	local_regs:
 1742              	.LFB7:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 1743              		.loc 1 233 22 is_stmt 1 view -0
 1744              		.cfi_startproc
 1745              		@ args = 0, pretend = 0, frame = 0
 1746              		@ frame_needed = 0, uses_anonymous_args = 0
 1747              		@ link register save eliminated.
 234:src/xeq.c     **** }
 1748              		.loc 1 234 2 view .LVU469
 1749              	.LVL129:
 1750              	.LBB1495:
 1751              	.LBI1495:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1752              		.loc 1 225 5 view .LVU470
 1753              	.LBB1496:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1754              		.loc 1 226 2 view .LVU471
 1755              	.LBB1497:
 1756              	.LBI1497:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1757              		.loc 1 1121 5 view .LVU472
 1758              	.LBB1498:
1122:src/xeq.c     **** }
 1759              		.loc 1 1122 2 view .LVU473
1122:src/xeq.c     **** }
 1760              		.loc 1 1122 12 is_stmt 0 view .LVU474
 1761 0000 0E4B     		ldr	r3, .L145
 1762 0002 1A68     		ldr	r2, [r3]
 1763              	.LVL130:
1122:src/xeq.c     **** }
 1764              		.loc 1 1122 12 view .LVU475
 1765              	.LBE1498:
 1766              	.LBE1497:
 227:src/xeq.c     **** }
 1767              		.loc 1 227 2 is_stmt 1 view .LVU476
 1768              	.LBB1501:
 1769              	.LBI1501:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1770              		.loc 1 217 5 view .LVU477
 1771              	.LBB1502:
 218:src/xeq.c     **** }
 1772              		.loc 1 218 2 view .LVU478
ARM GAS  /tmp/cccVhVyH.s 			page 129


 218:src/xeq.c     **** }
 1773              		.loc 1 218 9 is_stmt 0 view .LVU479
 1774 0004 B2F8DE37 		ldrh	r3, [r2, #2014]
 1775 0008 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 1776              		.loc 1 218 57 view .LVU480
 1777 000c 002B     		cmp	r3, #0
 1778 000e 01DB     		blt	.L144
 1779 0010 0020     		movs	r0, #0
 1780              	.LVL131:
 218:src/xeq.c     **** }
 1781              		.loc 1 218 57 view .LVU481
 1782              	.LBE1502:
 1783              	.LBE1501:
 1784              	.LBE1496:
 1785              	.LBE1495:
 235:src/xeq.c     **** 
 1786              		.loc 1 235 1 view .LVU482
 1787 0012 7047     		bx	lr
 1788              	.LVL132:
 1789              	.L144:
 1790              	.LBB1514:
 1791              	.LBB1513:
 1792              	.LBB1507:
 1793              	.LBB1503:
 218:src/xeq.c     **** }
 1794              		.loc 1 218 25 view .LVU483
 1795 0014 0A49     		ldr	r1, .L145+4
 1796              	.LBE1503:
 1797              	.LBE1507:
 1798              	.LBB1508:
 1799              	.LBB1499:
1122:src/xeq.c     **** }
 1800              		.loc 1 1122 24 view .LVU484
 1801 0016 B2F8E807 		ldrh	r0, [r2, #2024]
 1802              	.LBE1499:
 1803              	.LBE1508:
 1804              	.LBB1509:
 1805              	.LBB1504:
 218:src/xeq.c     **** }
 1806              		.loc 1 218 25 view .LVU485
 1807 001a 0968     		ldr	r1, [r1]
 1808              	.LBE1504:
 1809              	.LBE1509:
 1810              	.LBB1510:
 1811              	.LBB1500:
1122:src/xeq.c     **** }
 1812              		.loc 1 1122 24 view .LVU486
 1813 001c 44F20102 		movw	r2, #16385
 1814              	.LVL133:
1122:src/xeq.c     **** }
 1815              		.loc 1 1122 24 view .LVU487
 1816              	.LBE1500:
 1817              	.LBE1510:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1818              		.loc 1 226 73 view .LVU488
 1819 0020 0240     		ands	r2, r2, r0
ARM GAS  /tmp/cccVhVyH.s 			page 130


 1820              	.LBB1511:
 1821              	.LBB1505:
 218:src/xeq.c     **** }
 1822              		.loc 1 218 57 view .LVU489
 1823 0022 31F81300 		ldrh	r0, [r1, r3, lsl #1]
 1824              	.LBE1505:
 1825              	.LBE1511:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1826              		.loc 1 226 73 view .LVU490
 1827 0026 A2F58043 		sub	r3, r2, #16384
 1828 002a B3FA83F3 		clz	r3, r3
 1829 002e 5B09     		lsrs	r3, r3, #5
 1830 0030 0233     		adds	r3, r3, #2
 1831              	.LBB1512:
 1832              	.LBB1506:
 218:src/xeq.c     **** }
 1833              		.loc 1 218 57 view .LVU491
 1834 0032 C0F30B00 		ubfx	r0, r0, #0, #12
 1835 0036 1841     		asrs	r0, r0, r3
 1836 0038 7047     		bx	lr
 1837              	.L146:
 1838 003a 00BF     		.align	2
 1839              	.L145:
 1840 003c 00000000 		.word	main_ram
 1841 0040 00000000 		.word	RetStk
 1842              	.LBE1506:
 1843              	.LBE1512:
 1844              	.LBE1513:
 1845              	.LBE1514:
 1846              		.cfi_endproc
 1847              	.LFE7:
 1849              		.section	.text.global_regs_rarg,"ax",%progbits
 1850              		.align	1
 1851              		.p2align 2,,3
 1852              		.global	global_regs_rarg
 1853              		.syntax unified
 1854              		.thumb
 1855              		.thumb_func
 1856              		.fpu fpv4-sp-d16
 1858              	global_regs_rarg:
 1859              	.LVL134:
 1860              	.LFB8:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1861              		.loc 1 241 45 is_stmt 1 view -0
 1862              		.cfi_startproc
 1863              		@ args = 0, pretend = 0, frame = 0
 1864              		@ frame_needed = 0, uses_anonymous_args = 0
 1865              		@ link register save eliminated.
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1866              		.loc 1 242 2 view .LVU493
 1867              	.LBB1515:
 1868              	.LBI1515:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1869              		.loc 1 1121 5 view .LVU494
 1870              	.LBB1516:
1122:src/xeq.c     **** }
 1871              		.loc 1 1122 2 view .LVU495
ARM GAS  /tmp/cccVhVyH.s 			page 131


1122:src/xeq.c     **** }
 1872              		.loc 1 1122 12 is_stmt 0 view .LVU496
 1873 0000 0E4B     		ldr	r3, .L156
 1874 0002 1A68     		ldr	r2, [r3]
1122:src/xeq.c     **** }
 1875              		.loc 1 1122 24 view .LVU497
 1876 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1877 0008 44F20103 		movw	r3, #16385
 1878              	.LBE1516:
 1879              	.LBE1515:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1880              		.loc 1 242 5 view .LVU498
 1881 000c 0B40     		ands	r3, r3, r1
 1882 000e B3F5804F 		cmp	r3, #16384
 1883 0012 09D0     		beq	.L148
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1884              		.loc 1 242 19 discriminator 1 view .LVU499
 1885 0014 8028     		cmp	r0, #128
 1886 0016 02D0     		beq	.L155
 247:src/xeq.c     **** }
 1887              		.loc 1 247 3 is_stmt 1 view .LVU500
 247:src/xeq.c     **** }
 1888              		.loc 1 247 10 is_stmt 0 view .LVU501
 1889 0018 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1890              	.LVL135:
 247:src/xeq.c     **** }
 1891              		.loc 1 247 10 view .LVU502
 1892 001c 7047     		bx	lr
 1893              	.LVL136:
 1894              	.L155:
 1895              	.LBB1517:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1896              		.loc 1 243 3 is_stmt 1 view .LVU503
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1897              		.loc 1 243 24 is_stmt 0 view .LVU504
 1898 001e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1899              	.LVL137:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1900              		.loc 1 243 13 view .LVU505
 1901 0022 0C38     		subs	r0, r0, #12
 1902              	.LVL138:
 244:src/xeq.c     **** 	}
 1903              		.loc 1 244 3 is_stmt 1 view .LVU506
 1904              	.L153:
 244:src/xeq.c     **** 	}
 1905              		.loc 1 244 67 is_stmt 0 discriminator 1 view .LVU507
 1906 0024 4010     		asrs	r0, r0, #1
 1907              	.LVL139:
 244:src/xeq.c     **** 	}
 1908              		.loc 1 244 67 discriminator 1 view .LVU508
 1909 0026 7047     		bx	lr
 1910              	.LVL140:
 1911              	.L148:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1912              		.loc 1 243 3 is_stmt 1 view .LVU509
 244:src/xeq.c     **** 	}
 1913              		.loc 1 244 56 is_stmt 0 view .LVU510
ARM GAS  /tmp/cccVhVyH.s 			page 132


 1914 0028 A0F17E03 		sub	r3, r0, #126
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1915              		.loc 1 243 24 view .LVU511
 1916 002c 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 244:src/xeq.c     **** 	}
 1917              		.loc 1 244 56 view .LVU512
 1918 0030 012B     		cmp	r3, #1
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1919              		.loc 1 243 13 view .LVU513
 1920 0032 A2F10C00 		sub	r0, r2, #12
 1921              	.LVL141:
 244:src/xeq.c     **** 	}
 1922              		.loc 1 244 3 is_stmt 1 view .LVU514
 244:src/xeq.c     **** 	}
 1923              		.loc 1 244 56 is_stmt 0 view .LVU515
 1924 0036 F5D8     		bhi	.L153
 1925              	.LBE1517:
 248:src/xeq.c     **** 
 1926              		.loc 1 248 1 view .LVU516
 1927 0038 7047     		bx	lr
 1928              	.L157:
 1929 003a 00BF     		.align	2
 1930              	.L156:
 1931 003c 00000000 		.word	main_ram
 1932              		.cfi_endproc
 1933              	.LFE8:
 1935              		.section	.text.global_regs,"ax",%progbits
 1936              		.align	1
 1937              		.p2align 2,,3
 1938              		.global	global_regs
 1939              		.syntax unified
 1940              		.thumb
 1941              		.thumb_func
 1942              		.fpu fpv4-sp-d16
 1944              	global_regs:
 1945              	.LFB9:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 1946              		.loc 1 253 32 is_stmt 1 view -0
 1947              		.cfi_startproc
 1948              		@ args = 0, pretend = 0, frame = 0
 1949              		@ frame_needed = 0, uses_anonymous_args = 0
 1950              		@ link register save eliminated.
 254:src/xeq.c     **** }
 1951              		.loc 1 254 2 view .LVU518
 1952              	.LVL142:
 1953              	.LBB1518:
 1954              	.LBI1518:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1955              		.loc 1 241 14 view .LVU519
 1956              	.LBB1519:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1957              		.loc 1 242 2 view .LVU520
 1958              	.LBB1520:
 1959              	.LBI1520:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1960              		.loc 1 1121 5 view .LVU521
 1961              	.LBB1521:
ARM GAS  /tmp/cccVhVyH.s 			page 133


1122:src/xeq.c     **** }
 1962              		.loc 1 1122 2 view .LVU522
1122:src/xeq.c     **** }
 1963              		.loc 1 1122 12 is_stmt 0 view .LVU523
 1964 0000 074B     		ldr	r3, .L161
 1965 0002 1A68     		ldr	r2, [r3]
1122:src/xeq.c     **** }
 1966              		.loc 1 1122 24 view .LVU524
 1967 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1968              	.LBE1521:
 1969              	.LBE1520:
 1970              	.LBB1523:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1971              		.loc 1 243 24 view .LVU525
 1972 0008 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1973              	.LBE1523:
 1974              	.LBB1524:
 1975              	.LBB1522:
1122:src/xeq.c     **** }
 1976              		.loc 1 1122 24 view .LVU526
 1977 000c 44F20103 		movw	r3, #16385
 1978              	.LBE1522:
 1979              	.LBE1524:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1980              		.loc 1 242 5 view .LVU527
 1981 0010 0B40     		ands	r3, r3, r1
 1982 0012 B3F5804F 		cmp	r3, #16384
 1983              	.LBB1525:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1984              		.loc 1 243 3 is_stmt 1 view .LVU528
 244:src/xeq.c     **** 	}
 1985              		.loc 1 244 3 view .LVU529
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1986              		.loc 1 243 13 is_stmt 0 view .LVU530
 1987 0016 04BF     		itt	eq
 1988 0018 0C38     		subeq	r0, r0, #12
 244:src/xeq.c     **** 	}
 1989              		.loc 1 244 67 view .LVU531
 1990 001a 4010     		asreq	r0, r0, #1
 1991              	.LBE1525:
 247:src/xeq.c     **** }
 1992              		.loc 1 247 3 is_stmt 1 view .LVU532
 1993              	.LVL143:
 247:src/xeq.c     **** }
 1994              		.loc 1 247 3 is_stmt 0 view .LVU533
 1995              	.LBE1519:
 1996              	.LBE1518:
 255:src/xeq.c     **** 
 1997              		.loc 1 255 1 view .LVU534
 1998 001c 7047     		bx	lr
 1999              	.L162:
 2000 001e 00BF     		.align	2
 2001              	.L161:
 2002 0020 00000000 		.word	main_ram
 2003              		.cfi_endproc
 2004              	.LFE9:
 2006              		.section	.text.version,"ax",%progbits
ARM GAS  /tmp/cccVhVyH.s 			page 134


 2007              		.align	1
 2008              		.p2align 2,,3
 2009              		.global	version
 2010              		.syntax unified
 2011              		.thumb
 2012              		.thumb_func
 2013              		.fpu fpv4-sp-d16
 2015              	version:
 2016              	.LVL144:
 2017              	.LFB10:
 267:src/xeq.c     **** 	State2.version = 1;
 2018              		.loc 1 267 29 is_stmt 1 view -0
 2019              		.cfi_startproc
 2020              		@ args = 0, pretend = 0, frame = 0
 2021              		@ frame_needed = 0, uses_anonymous_args = 0
 2022              		@ link register save eliminated.
 268:src/xeq.c     **** 	if (!State2.runmode)
 2023              		.loc 1 268 2 view .LVU536
 268:src/xeq.c     **** 	if (!State2.runmode)
 2024              		.loc 1 268 17 is_stmt 0 view .LVU537
 2025 0000 054B     		ldr	r3, .L166
 2026 0002 5A7D     		ldrb	r2, [r3, #21]	@ zero_extendqisi2
 269:src/xeq.c     **** 		display();
 2027              		.loc 1 269 6 view .LVU538
 2028 0004 997D     		ldrb	r1, [r3, #22]	@ zero_extendqisi2
 268:src/xeq.c     **** 	if (!State2.runmode)
 2029              		.loc 1 268 17 view .LVU539
 2030 0006 42F01002 		orr	r2, r2, #16
 2031 000a 5A75     		strb	r2, [r3, #21]
 269:src/xeq.c     **** 		display();
 2032              		.loc 1 269 2 is_stmt 1 view .LVU540
 269:src/xeq.c     **** 		display();
 2033              		.loc 1 269 5 is_stmt 0 view .LVU541
 2034 000c 4B06     		lsls	r3, r1, #25
 2035 000e 00D5     		bpl	.L165
 271:src/xeq.c     **** 
 2036              		.loc 1 271 1 view .LVU542
 2037 0010 7047     		bx	lr
 2038              	.L165:
 270:src/xeq.c     **** }
 2039              		.loc 1 270 3 is_stmt 1 view .LVU543
 2040 0012 FFF7FEBF 		b	display
 2041              	.LVL145:
 2042              	.L167:
 270:src/xeq.c     **** }
 2043              		.loc 1 270 3 is_stmt 0 view .LVU544
 2044 0016 00BF     		.align	2
 2045              	.L166:
 2046 0018 00000000 		.word	StateWhileOn
 2047              		.cfi_endproc
 2048              	.LFE10:
 2050              		.section	.text.cmd_off,"ax",%progbits
 2051              		.align	1
 2052              		.p2align 2,,3
 2053              		.global	cmd_off
 2054              		.syntax unified
 2055              		.thumb
ARM GAS  /tmp/cccVhVyH.s 			page 135


 2056              		.thumb_func
 2057              		.fpu fpv4-sp-d16
 2059              	cmd_off:
 2060              	.LVL146:
 2061              	.LFB11:
 273:src/xeq.c     **** 	shutdown();
 2062              		.loc 1 273 29 is_stmt 1 view -0
 2063              		.cfi_startproc
 2064              		@ args = 0, pretend = 0, frame = 0
 2065              		@ frame_needed = 0, uses_anonymous_args = 0
 2066              		@ link register save eliminated.
 274:src/xeq.c     **** }
 2067              		.loc 1 274 2 view .LVU546
 2068 0000 FFF7FEBF 		b	shutdown
 2069              	.LVL147:
 274:src/xeq.c     **** }
 2070              		.loc 1 274 2 is_stmt 0 view .LVU547
 2071              		.cfi_endproc
 2072              	.LFE11:
 2074              		.section	.text.init_RegionTab,"ax",%progbits
 2075              		.align	1
 2076              		.p2align 2,,3
 2077              		.global	init_RegionTab
 2078              		.syntax unified
 2079              		.thumb
 2080              		.thumb_func
 2081              		.fpu fpv4-sp-d16
 2083              	init_RegionTab:
 2084              	.LFB13:
 302:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 2085              		.loc 1 302 28 is_stmt 1 view -0
 2086              		.cfi_startproc
 2087              		@ args = 0, pretend = 0, frame = 0
 2088              		@ frame_needed = 0, uses_anonymous_args = 0
 2089              		@ link register save eliminated.
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2090              		.loc 1 303 3 view .LVU549
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2091              		.loc 1 303 30 is_stmt 0 view .LVU550
 2092 0000 0649     		ldr	r1, .L170
 304:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2093              		.loc 1 304 30 view .LVU551
 2094 0002 074A     		ldr	r2, .L170+4
 305:src/xeq.c     **** }
 2095              		.loc 1 305 30 view .LVU552
 2096 0004 074B     		ldr	r3, .L170+8
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2097              		.loc 1 303 30 view .LVU553
 2098 0006 0868     		ldr	r0, [r1]
 304:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2099              		.loc 1 304 30 view .LVU554
 2100 0008 1168     		ldr	r1, [r2]
 305:src/xeq.c     **** }
 2101              		.loc 1 305 30 view .LVU555
 2102 000a 1A68     		ldr	r2, [r3]
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2103              		.loc 1 303 16 view .LVU556
ARM GAS  /tmp/cccVhVyH.s 			page 136


 2104 000c 064B     		ldr	r3, .L170+12
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2105              		.loc 1 303 30 view .LVU557
 2106 000e 0430     		adds	r0, r0, #4
 304:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2107              		.loc 1 304 30 view .LVU558
 2108 0010 0431     		adds	r1, r1, #4
 305:src/xeq.c     **** }
 2109              		.loc 1 305 30 view .LVU559
 2110 0012 0432     		adds	r2, r2, #4
 304:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2111              		.loc 1 304 16 view .LVU560
 2112 0014 C3E90001 		strd	r0, r1, [r3]
 305:src/xeq.c     **** }
 2113              		.loc 1 305 3 is_stmt 1 view .LVU561
 305:src/xeq.c     **** }
 2114              		.loc 1 305 16 is_stmt 0 view .LVU562
 2115 0018 9A60     		str	r2, [r3, #8]
 306:src/xeq.c     **** 
 2116              		.loc 1 306 1 view .LVU563
 2117 001a 7047     		bx	lr
 2118              	.L171:
 2119              		.align	2
 2120              	.L170:
 2121 001c 00000000 		.word	main_ram
 2122 0020 00000000 		.word	library_ram
 2123 0024 00000000 		.word	backup_ram
 2124 0028 00000000 		.word	.LANCHOR0
 2125              		.cfi_endproc
 2126              	.LFE13:
 2128              		.section	.text.sizeLIB,"ax",%progbits
 2129              		.align	1
 2130              		.p2align 2,,3
 2131              		.global	sizeLIB
 2132              		.syntax unified
 2133              		.thumb
 2134              		.thumb_func
 2135              		.fpu fpv4-sp-d16
 2137              	sizeLIB:
 2138              	.LVL148:
 2139              	.LFB14:
 319:src/xeq.c     **** 	if (region == REGION_XROM)
 2140              		.loc 1 319 25 is_stmt 1 view -0
 2141              		.cfi_startproc
 2142              		@ args = 0, pretend = 0, frame = 0
 2143              		@ frame_needed = 0, uses_anonymous_args = 0
 2144              		@ link register save eliminated.
 320:src/xeq.c     **** 		return xrom_size;
 2145              		.loc 1 320 2 view .LVU565
 320:src/xeq.c     **** 		return xrom_size;
 2146              		.loc 1 320 5 is_stmt 0 view .LVU566
 2147 0000 0328     		cmp	r0, #3
 2148 0002 05D0     		beq	.L175
 323:src/xeq.c     **** }
 2149              		.loc 1 323 3 is_stmt 1 view .LVU567
 323:src/xeq.c     **** }
 2150              		.loc 1 323 24 is_stmt 0 view .LVU568
ARM GAS  /tmp/cccVhVyH.s 			page 137


 2151 0004 044B     		ldr	r3, .L176
 323:src/xeq.c     **** }
 2152              		.loc 1 323 32 view .LVU569
 2153 0006 53F82030 		ldr	r3, [r3, r0, lsl #2]
 323:src/xeq.c     **** }
 2154              		.loc 1 323 10 view .LVU570
 2155 000a 33F8020C 		ldrh	r0, [r3, #-2]
 2156              	.LVL149:
 324:src/xeq.c     **** 
 2157              		.loc 1 324 1 view .LVU571
 2158 000e 7047     		bx	lr
 2159              	.LVL150:
 2160              	.L175:
 321:src/xeq.c     **** 	else
 2161              		.loc 1 321 3 is_stmt 1 view .LVU572
 321:src/xeq.c     **** 	else
 2162              		.loc 1 321 10 is_stmt 0 view .LVU573
 2163 0010 024B     		ldr	r3, .L176+4
 2164 0012 1888     		ldrh	r0, [r3]
 2165              	.LVL151:
 321:src/xeq.c     **** 	else
 2166              		.loc 1 321 10 view .LVU574
 2167 0014 7047     		bx	lr
 2168              	.L177:
 2169 0016 00BF     		.align	2
 2170              	.L176:
 2171 0018 00000000 		.word	.LANCHOR0
 2172 001c 00000000 		.word	xrom_size
 2173              		.cfi_endproc
 2174              	.LFE14:
 2176              		.section	.text.getprog,"ax",%progbits
 2177              		.align	1
 2178              		.p2align 2,,3
 2179              		.global	getprog
 2180              		.syntax unified
 2181              		.thumb
 2182              		.thumb_func
 2183              		.fpu fpv4-sp-d16
 2185              	getprog:
 2186              	.LVL152:
 2187              	.LFB16:
 343:src/xeq.c     **** 
 2188              		.loc 1 343 33 is_stmt 1 view -0
 2189              		.cfi_startproc
 2190              		@ args = 0, pretend = 0, frame = 0
 2191              		@ frame_needed = 0, uses_anonymous_args = 0
 2192              		@ link register save eliminated.
 345:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2193              		.loc 1 345 2 view .LVU576
 346:src/xeq.c     **** 
 2194              		.loc 1 346 15 is_stmt 0 view .LVU577
 2195 0000 C0F30D02 		ubfx	r2, r0, #0, #14
 2196 0004 531E     		subs	r3, r2, #1
 345:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2197              		.loc 1 345 21 view .LVU578
 2198 0006 800B     		lsrs	r0, r0, #14
 2199              	.LVL153:
ARM GAS  /tmp/cccVhVyH.s 			page 138


 346:src/xeq.c     **** 
 2200              		.loc 1 346 2 is_stmt 1 view .LVU579
 348:src/xeq.c     **** 		return OP_NIL | OP_END;
 2201              		.loc 1 348 2 view .LVU580
 348:src/xeq.c     **** 		return OP_NIL | OP_END;
 2202              		.loc 1 348 5 is_stmt 0 view .LVU581
 2203 0008 BAB1     		cbz	r2, .L184
 2204              	.LVL154:
 2205              	.LBB1526:
 2206              	.LBI1526:
 319:src/xeq.c     **** 	if (region == REGION_XROM)
 2207              		.loc 1 319 5 is_stmt 1 view .LVU582
 2208              	.LBB1527:
 320:src/xeq.c     **** 		return xrom_size;
 2209              		.loc 1 320 2 view .LVU583
 320:src/xeq.c     **** 		return xrom_size;
 2210              		.loc 1 320 5 is_stmt 0 view .LVU584
 2211 000a 0328     		cmp	r0, #3
 2212 000c 18D0     		beq	.L185
 323:src/xeq.c     **** }
 2213              		.loc 1 323 3 is_stmt 1 view .LVU585
 323:src/xeq.c     **** }
 2214              		.loc 1 323 24 is_stmt 0 view .LVU586
 2215 000e 0E4A     		ldr	r2, .L187
 323:src/xeq.c     **** }
 2216              		.loc 1 323 32 view .LVU587
 2217 0010 52F82020 		ldr	r2, [r2, r0, lsl #2]
 323:src/xeq.c     **** }
 2218              		.loc 1 323 10 view .LVU588
 2219 0014 32F8022C 		ldrh	r2, [r2, #-2]
 2220              	.L181:
 2221              	.LVL155:
 323:src/xeq.c     **** }
 2222              		.loc 1 323 10 view .LVU589
 2223              	.LBE1527:
 2224              	.LBE1526:
 348:src/xeq.c     **** 		return OP_NIL | OP_END;
 2225              		.loc 1 348 17 view .LVU590
 2226 0018 9342     		cmp	r3, r2
 2227 001a 0EDA     		bge	.L184
 350:src/xeq.c     **** }
 2228              		.loc 1 350 2 is_stmt 1 view .LVU591
 350:src/xeq.c     **** }
 2229              		.loc 1 350 29 is_stmt 0 view .LVU592
 2230 001c 0A4A     		ldr	r2, .L187
 350:src/xeq.c     **** }
 2231              		.loc 1 350 38 view .LVU593
 2232 001e 52F82020 		ldr	r2, [r2, r0, lsl #2]
 2233              	.LBB1529:
 2234              	.LBB1530:
 332:src/xeq.c     **** 	if ( isDBL(r) ) {
 2235              		.loc 1 332 13 view .LVU594
 2236 0022 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 2237              	.LVL156:
 333:src/xeq.c     **** 		r |= loc[1] << 16;
 2238              		.loc 1 333 5 view .LVU595
 2239 0026 00F47041 		and	r1, r0, #61440
ARM GAS  /tmp/cccVhVyH.s 			page 139


 2240 002a B1F5704F 		cmp	r1, #61440
 2241              	.LBE1530:
 2242              	.LBE1529:
 350:src/xeq.c     **** }
 2243              		.loc 1 350 38 view .LVU596
 2244 002e 02EB4303 		add	r3, r2, r3, lsl #1
 2245              	.LVL157:
 2246              	.LBB1533:
 2247              	.LBI1529:
 330:src/xeq.c     **** {
 2248              		.loc 1 330 15 is_stmt 1 view .LVU597
 2249              	.LBB1531:
 332:src/xeq.c     **** 	if ( isDBL(r) ) {
 2250              		.loc 1 332 2 view .LVU598
 333:src/xeq.c     **** 		r |= loc[1] << 16;
 2251              		.loc 1 333 2 view .LVU599
 333:src/xeq.c     **** 		r |= loc[1] << 16;
 2252              		.loc 1 333 5 is_stmt 0 view .LVU600
 2253 0032 00D0     		beq	.L186
 2254              	.LBE1531:
 2255              	.LBE1533:
 351:src/xeq.c     **** 
 2256              		.loc 1 351 1 view .LVU601
 2257 0034 7047     		bx	lr
 2258              	.L186:
 2259              	.LBB1534:
 2260              	.LBB1532:
 334:src/xeq.c     **** 	}
 2261              		.loc 1 334 3 is_stmt 1 view .LVU602
 334:src/xeq.c     **** 	}
 2262              		.loc 1 334 5 is_stmt 0 view .LVU603
 2263 0036 1868     		ldr	r0, [r3]	@ unaligned
 2264              	.LVL158:
 334:src/xeq.c     **** 	}
 2265              		.loc 1 334 5 view .LVU604
 2266 0038 7047     		bx	lr
 2267              	.LVL159:
 2268              	.L184:
 334:src/xeq.c     **** 	}
 2269              		.loc 1 334 5 view .LVU605
 2270              	.LBE1532:
 2271              	.LBE1534:
 349:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 2272              		.loc 1 349 10 view .LVU606
 2273 003a 4FF49D70 		mov	r0, #314
 2274              	.LVL160:
 351:src/xeq.c     **** 
 2275              		.loc 1 351 1 view .LVU607
 2276 003e 7047     		bx	lr
 2277              	.LVL161:
 2278              	.L185:
 2279              	.LBB1535:
 2280              	.LBB1528:
 321:src/xeq.c     **** 	else
 2281              		.loc 1 321 3 is_stmt 1 view .LVU608
 321:src/xeq.c     **** 	else
 2282              		.loc 1 321 10 is_stmt 0 view .LVU609
ARM GAS  /tmp/cccVhVyH.s 			page 140


 2283 0040 024A     		ldr	r2, .L187+4
 2284 0042 1288     		ldrh	r2, [r2]
 2285 0044 E8E7     		b	.L181
 2286              	.L188:
 2287 0046 00BF     		.align	2
 2288              	.L187:
 2289 0048 00000000 		.word	.LANCHOR0
 2290 004c 00000000 		.word	xrom_size
 2291              	.LBE1528:
 2292              	.LBE1535:
 2293              		.cfi_endproc
 2294              	.LFE16:
 2296              		.section	.text.get_current_prog,"ax",%progbits
 2297              		.align	1
 2298              		.p2align 2,,3
 2299              		.global	get_current_prog
 2300              		.syntax unified
 2301              		.thumb
 2302              		.thumb_func
 2303              		.fpu fpv4-sp-d16
 2305              	get_current_prog:
 2306              	.LFB17:
 357:src/xeq.c     **** 
 2307              		.loc 1 357 40 is_stmt 1 view -0
 2308              		.cfi_startproc
 2309              		@ args = 0, pretend = 0, frame = 0
 2310              		@ frame_needed = 0, uses_anonymous_args = 0
 2311              		@ link register save eliminated.
 359:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2312              		.loc 1 359 2 view .LVU611
 359:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2313              		.loc 1 359 21 is_stmt 0 view .LVU612
 2314 0000 074B     		ldr	r3, .L190
 360:src/xeq.c     **** }
 2315              		.loc 1 360 18 view .LVU613
 2316 0002 084A     		ldr	r2, .L190+4
 359:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2317              		.loc 1 359 21 view .LVU614
 2318 0004 1B68     		ldr	r3, [r3]
 2319 0006 B3F8EC37 		ldrh	r3, [r3, #2028]
 2320              	.LVL162:
 360:src/xeq.c     **** }
 2321              		.loc 1 360 2 is_stmt 1 view .LVU615
 359:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2322              		.loc 1 359 12 is_stmt 0 view .LVU616
 2323 000a 990B     		lsrs	r1, r3, #14
 360:src/xeq.c     **** }
 2324              		.loc 1 360 27 view .LVU617
 2325 000c C3F30D03 		ubfx	r3, r3, #0, #14
 2326              	.LVL163:
 360:src/xeq.c     **** }
 2327              		.loc 1 360 27 view .LVU618
 2328 0010 52F82100 		ldr	r0, [r2, r1, lsl #2]
 2329 0014 03F10043 		add	r3, r3, #-2147483648
 2330 0018 013B     		subs	r3, r3, #1
 361:src/xeq.c     **** 
 2331              		.loc 1 361 1 view .LVU619
ARM GAS  /tmp/cccVhVyH.s 			page 141


 2332 001a 00EB4300 		add	r0, r0, r3, lsl #1
 2333 001e 7047     		bx	lr
 2334              	.L191:
 2335              		.align	2
 2336              	.L190:
 2337 0020 00000000 		.word	main_ram
 2338 0024 00000000 		.word	.LANCHOR0
 2339              		.cfi_endproc
 2340              	.LFE17:
 2342              		.section	.text.do_inc,"ax",%progbits
 2343              		.align	1
 2344              		.p2align 2,,3
 2345              		.global	do_inc
 2346              		.syntax unified
 2347              		.thumb
 2348              		.thumb_func
 2349              		.fpu fpv4-sp-d16
 2351              	do_inc:
 2352              	.LVL164:
 2353              	.LFB20:
 418:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2354              		.loc 1 418 54 is_stmt 1 view -0
 2355              		.cfi_startproc
 2356              		@ args = 0, pretend = 0, frame = 16
 2357              		@ frame_needed = 0, uses_anonymous_args = 0
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2358              		.loc 1 419 2 view .LVU621
 418:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2359              		.loc 1 418 54 is_stmt 0 view .LVU622
 2360 0000 70B5     		push	{r4, r5, r6, lr}
 2361              		.cfi_def_cfa_offset 16
 2362              		.cfi_offset 4, -16
 2363              		.cfi_offset 5, -12
 2364              		.cfi_offset 6, -8
 2365              		.cfi_offset 14, -4
 2366 0002 84B0     		sub	sp, sp, #16
 2367              		.cfi_def_cfa_offset 32
 418:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2368              		.loc 1 418 54 view .LVU623
 2369 0004 0546     		mov	r5, r0
 2370 0006 0191     		str	r1, [sp, #4]
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2371              		.loc 1 419 42 view .LVU624
 2372 0008 FFF7FEFF 		bl	getprog
 2373              	.LVL165:
 423:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2374              		.loc 1 423 12 view .LVU625
 2375 000c 0D4E     		ldr	r6, .L196
 424:src/xeq.c     **** 
 2376              		.loc 1 424 11 view .LVU626
 2377 000e 0199     		ldr	r1, [sp, #4]
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2378              		.loc 1 419 42 view .LVU627
 2379 0010 00F47040 		and	r0, r0, #61440
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2380              		.loc 1 419 27 view .LVU628
 2381 0014 6C1C     		adds	r4, r5, #1
ARM GAS  /tmp/cccVhVyH.s 			page 142


 420:src/xeq.c     **** 	unsigned short int bottom = 0;
 2382              		.loc 1 420 21 view .LVU629
 2383 0016 0023     		movs	r3, #0
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2384              		.loc 1 419 27 view .LVU630
 2385 0018 B0F5704F 		cmp	r0, #61440
 2386 001c 08BF     		it	eq
 2387 001e 0134     		addeq	r4, r4, #1
 424:src/xeq.c     **** 
 2388              		.loc 1 424 11 view .LVU631
 2389 0020 0DF10E02 		add	r2, sp, #14
 2390 0024 2846     		mov	r0, r5
 423:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2391              		.loc 1 423 12 view .LVU632
 2392 0026 3360     		str	r3, [r6]
 420:src/xeq.c     **** 	unsigned short int bottom = 0;
 2393              		.loc 1 420 21 view .LVU633
 2394 0028 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 424:src/xeq.c     **** 
 2395              		.loc 1 424 11 view .LVU634
 2396 002c FFF7FEFF 		bl	find_section_bounds
 2397              	.LVL166:
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2398              		.loc 1 419 27 view .LVU635
 2399 0030 A4B2     		uxth	r4, r4
 2400              	.LVL167:
 420:src/xeq.c     **** 	unsigned short int bottom = 0;
 2401              		.loc 1 420 2 is_stmt 1 view .LVU636
 421:src/xeq.c     **** 
 2402              		.loc 1 421 2 view .LVU637
 423:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2403              		.loc 1 423 2 view .LVU638
 424:src/xeq.c     **** 
 2404              		.loc 1 424 2 view .LVU639
 426:src/xeq.c     **** 		PcWrapped = 1;
 2405              		.loc 1 426 2 view .LVU640
 426:src/xeq.c     **** 		PcWrapped = 1;
 2406              		.loc 1 426 5 is_stmt 0 view .LVU641
 2407 0032 8442     		cmp	r4, r0
 427:src/xeq.c     **** 		return top;
 2408              		.loc 1 427 3 is_stmt 1 view .LVU642
 428:src/xeq.c     **** 	}
 2409              		.loc 1 428 10 is_stmt 0 view .LVU643
 2410 0034 85BF     		ittet	hi
 2411 0036 BDF80E00 		ldrhhi	r0, [sp, #14]
 2412              	.LVL168:
 427:src/xeq.c     **** 		return top;
 2413              		.loc 1 427 13 view .LVU644
 2414 003a 0123     		movhi	r3, #1
 430:src/xeq.c     **** }
 2415              		.loc 1 430 9 view .LVU645
 2416 003c 2046     		movls	r0, r4
 427:src/xeq.c     **** 		return top;
 2417              		.loc 1 427 13 view .LVU646
 2418 003e 3360     		strhi	r3, [r6]
 428:src/xeq.c     **** 	}
 2419              		.loc 1 428 3 is_stmt 1 view .LVU647
ARM GAS  /tmp/cccVhVyH.s 			page 143


 430:src/xeq.c     **** }
 2420              		.loc 1 430 2 view .LVU648
 431:src/xeq.c     **** 
 2421              		.loc 1 431 1 is_stmt 0 view .LVU649
 2422 0040 04B0     		add	sp, sp, #16
 2423              		.cfi_def_cfa_offset 16
 2424              		@ sp needed
 2425 0042 70BD     		pop	{r4, r5, r6, pc}
 2426              	.LVL169:
 2427              	.L197:
 431:src/xeq.c     **** 
 2428              		.loc 1 431 1 view .LVU650
 2429              		.align	2
 2430              	.L196:
 2431 0044 00000000 		.word	PcWrapped
 2432              		.cfi_endproc
 2433              	.LFE20:
 2435              		.section	.text.user_pc.part.0,"ax",%progbits
 2436              		.align	1
 2437              		.p2align 2,,3
 2438              		.syntax unified
 2439              		.thumb
 2440              		.thumb_func
 2441              		.fpu fpv4-sp-d16
 2443              	user_pc.part.0:
 2444              	.LVL170:
 2445              	.LFB281:
 494:src/xeq.c     **** 	unsigned int n = 1;
 2446              		.loc 1 494 14 is_stmt 1 view -0
 2447              		.cfi_startproc
 2448              		@ args = 0, pretend = 0, frame = 0
 2449              		@ frame_needed = 0, uses_anonymous_args = 0
 505:src/xeq.c     **** 	while (base < pc) {
 2450              		.loc 1 505 2 view .LVU652
 505:src/xeq.c     **** 	while (base < pc) {
 2451              		.loc 1 505 9 is_stmt 0 view .LVU653
 2452 0000 20F47F53 		bic	r3, r0, #16320
 2453 0004 23F03F03 		bic	r3, r3, #63
 494:src/xeq.c     **** 	unsigned int n = 1;
 2454              		.loc 1 494 14 view .LVU654
 2455 0008 70B5     		push	{r4, r5, r6, lr}
 2456              		.cfi_def_cfa_offset 16
 2457              		.cfi_offset 4, -16
 2458              		.cfi_offset 5, -12
 2459              		.cfi_offset 6, -8
 2460              		.cfi_offset 14, -4
 494:src/xeq.c     **** 	unsigned int n = 1;
 2461              		.loc 1 494 14 view .LVU655
 2462 000a 0546     		mov	r5, r0
 505:src/xeq.c     **** 	while (base < pc) {
 2463              		.loc 1 505 7 view .LVU656
 2464 000c 581C     		adds	r0, r3, #1
 2465              	.LVL171:
 506:src/xeq.c     **** 		base = do_inc(base, 0);
 2466              		.loc 1 506 2 is_stmt 1 view .LVU657
 506:src/xeq.c     **** 		base = do_inc(base, 0);
 2467              		.loc 1 506 8 view .LVU658
ARM GAS  /tmp/cccVhVyH.s 			page 144


 2468 000e 8542     		cmp	r5, r0
 2469 0010 0ED9     		bls	.L201
 2470 0012 084E     		ldr	r6, .L205
 495:src/xeq.c     **** 	unsigned int base;
 2471              		.loc 1 495 15 is_stmt 0 view .LVU659
 2472 0014 0124     		movs	r4, #1
 2473 0016 03E0     		b	.L200
 2474              	.LVL172:
 2475              	.L204:
 506:src/xeq.c     **** 		base = do_inc(base, 0);
 2476              		.loc 1 506 8 view .LVU660
 2477 0018 8542     		cmp	r5, r0
 510:src/xeq.c     **** 	}
 2478              		.loc 1 510 3 view .LVU661
 2479 001a 04F10104 		add	r4, r4, #1
 2480              	.LVL173:
 506:src/xeq.c     **** 		base = do_inc(base, 0);
 2481              		.loc 1 506 8 is_stmt 1 view .LVU662
 2482 001e 05D9     		bls	.L198
 2483              	.LVL174:
 2484              	.L200:
 507:src/xeq.c     **** 		if (PcWrapped)
 2485              		.loc 1 507 3 view .LVU663
 507:src/xeq.c     **** 		if (PcWrapped)
 2486              		.loc 1 507 10 is_stmt 0 view .LVU664
 2487 0020 0021     		movs	r1, #0
 2488 0022 FFF7FEFF 		bl	do_inc
 2489              	.LVL175:
 510:src/xeq.c     **** 	}
 2490              		.loc 1 510 3 is_stmt 1 view .LVU665
 508:src/xeq.c     **** 			return n;
 2491              		.loc 1 508 6 is_stmt 0 view .LVU666
 2492 0026 3368     		ldr	r3, [r6]
 2493              	.LVL176:
 508:src/xeq.c     **** 			return n;
 2494              		.loc 1 508 3 is_stmt 1 view .LVU667
 508:src/xeq.c     **** 			return n;
 2495              		.loc 1 508 6 is_stmt 0 view .LVU668
 2496 0028 002B     		cmp	r3, #0
 2497 002a F5D0     		beq	.L204
 2498              	.LVL177:
 2499              	.L198:
 513:src/xeq.c     **** 
 2500              		.loc 1 513 1 view .LVU669
 2501 002c 2046     		mov	r0, r4
 2502              	.LVL178:
 513:src/xeq.c     **** 
 2503              		.loc 1 513 1 view .LVU670
 2504 002e 70BD     		pop	{r4, r5, r6, pc}
 2505              	.LVL179:
 2506              	.L201:
 495:src/xeq.c     **** 	unsigned int base;
 2507              		.loc 1 495 15 view .LVU671
 2508 0030 0124     		movs	r4, #1
 2509 0032 FBE7     		b	.L198
 2510              	.L206:
 2511              		.align	2
ARM GAS  /tmp/cccVhVyH.s 			page 145


 2512              	.L205:
 2513 0034 00000000 		.word	PcWrapped
 2514              		.cfi_endproc
 2515              	.LFE281:
 2517              		.section	.rodata.print_step.str1.4,"aMS",%progbits,1
 2518              		.align	2
 2519              	.LC0:
 2520 0000 3030303A 		.ascii	"000:\000"
 2520      00
 2521              		.section	.text.print_step,"ax",%progbits
 2522              		.align	1
 2523              		.p2align 2,,3
 2524              		.syntax unified
 2525              		.thumb
 2526              		.thumb_func
 2527              		.fpu fpv4-sp-d16
 2529              	print_step:
 2530              	.LVL180:
 2531              	.LFB234:
4433:src/xeq.c     **** 	char buf[16];
 2532              		.loc 1 4433 41 is_stmt 1 view -0
 2533              		.cfi_startproc
 2534              		@ args = 0, pretend = 0, frame = 16
 2535              		@ frame_needed = 0, uses_anonymous_args = 0
4434:src/xeq.c     **** 	const unsigned int pc = state_pc();
 2536              		.loc 1 4434 2 view .LVU673
4435:src/xeq.c     **** 	char *p = TraceBuffer;
 2537              		.loc 1 4435 2 view .LVU674
4435:src/xeq.c     **** 	char *p = TraceBuffer;
 2538              		.loc 1 4435 26 is_stmt 0 view .LVU675
 2539 0000 254B     		ldr	r3, .L221
 2540 0002 1B68     		ldr	r3, [r3]
4433:src/xeq.c     **** 	char buf[16];
 2541              		.loc 1 4433 41 view .LVU676
 2542 0004 F0B5     		push	{r4, r5, r6, r7, lr}
 2543              		.cfi_def_cfa_offset 20
 2544              		.cfi_offset 4, -20
 2545              		.cfi_offset 5, -16
 2546              		.cfi_offset 6, -12
 2547              		.cfi_offset 7, -8
 2548              		.cfi_offset 14, -4
4435:src/xeq.c     **** 	char *p = TraceBuffer;
 2549              		.loc 1 4435 26 view .LVU677
 2550 0006 B3F8E047 		ldrh	r4, [r3, #2016]
 2551              	.LVL181:
4436:src/xeq.c     **** 
 2552              		.loc 1 4436 2 is_stmt 1 view .LVU678
4438:src/xeq.c     **** 		*p++ = 'x';
 2553              		.loc 1 4438 2 view .LVU679
4438:src/xeq.c     **** 		*p++ = 'x';
 2554              		.loc 1 4438 6 is_stmt 0 view .LVU680
 2555 000a A10B     		lsrs	r1, r4, #14
4438:src/xeq.c     **** 		*p++ = 'x';
 2556              		.loc 1 4438 5 view .LVU681
 2557 000c 0329     		cmp	r1, #3
4433:src/xeq.c     **** 	char buf[16];
 2558              		.loc 1 4433 41 view .LVU682
ARM GAS  /tmp/cccVhVyH.s 			page 146


 2559 000e 85B0     		sub	sp, sp, #20
 2560              		.cfi_def_cfa_offset 40
4433:src/xeq.c     **** 	char buf[16];
 2561              		.loc 1 4433 41 view .LVU683
 2562 0010 0546     		mov	r5, r0
4438:src/xeq.c     **** 		*p++ = 'x';
 2563              		.loc 1 4438 5 view .LVU684
 2564 0012 39D0     		beq	.L218
4440:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2565              		.loc 1 4440 9 is_stmt 1 view .LVU685
4440:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2566              		.loc 1 4440 12 is_stmt 0 view .LVU686
 2567 0014 14F4404F 		tst	r4, #49152
 2568 0018 0FD1     		bne	.L219
4436:src/xeq.c     **** 
 2569              		.loc 1 4436 8 view .LVU687
 2570 001a 204E     		ldr	r6, .L221+4
 2571 001c 3746     		mov	r7, r6
 2572              	.LVL182:
4444:src/xeq.c     **** 		scopy(p, "000:");
 2573              		.loc 1 4444 2 is_stmt 1 view .LVU688
4444:src/xeq.c     **** 		scopy(p, "000:");
 2574              		.loc 1 4444 5 is_stmt 0 view .LVU689
 2575 001e BCB9     		cbnz	r4, .L220
 2576              	.LVL183:
 2577              	.L212:
4445:src/xeq.c     **** 	else {
 2578              		.loc 1 4445 3 is_stmt 1 view .LVU690
 2579 0020 1F49     		ldr	r1, .L221+8
 2580 0022 3846     		mov	r0, r7
 2581 0024 FFF7FEFF 		bl	scopy
 2582              	.LVL184:
 2583              	.L211:
4453:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2584              		.loc 1 4453 2 view .LVU691
4453:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2585              		.loc 1 4453 20 is_stmt 0 view .LVU692
 2586 0028 1E4A     		ldr	r2, .L221+12
4454:src/xeq.c     **** }
 2587              		.loc 1 4454 10 view .LVU693
 2588 002a 1F49     		ldr	r1, .L221+16
4453:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2589              		.loc 1 4453 20 view .LVU694
 2590 002c 937D     		ldrb	r3, [r2, #22]	@ zero_extendqisi2
4454:src/xeq.c     **** }
 2591              		.loc 1 4454 10 view .LVU695
 2592 002e 0E60     		str	r6, [r1]
4453:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2593              		.loc 1 4453 20 view .LVU696
 2594 0030 43F08003 		orr	r3, r3, #128
 2595 0034 9375     		strb	r3, [r2, #22]
4454:src/xeq.c     **** }
 2596              		.loc 1 4454 2 is_stmt 1 view .LVU697
4455:src/xeq.c     **** 
 2597              		.loc 1 4455 1 is_stmt 0 view .LVU698
 2598 0036 05B0     		add	sp, sp, #20
 2599              		.cfi_remember_state
ARM GAS  /tmp/cccVhVyH.s 			page 147


 2600              		.cfi_def_cfa_offset 20
 2601              		@ sp needed
 2602 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
 2603              	.LVL185:
 2604              	.L219:
 2605              		.cfi_restore_state
4441:src/xeq.c     **** 		*p++ = ' ';
 2606              		.loc 1 4441 3 is_stmt 1 view .LVU699
4441:src/xeq.c     **** 		*p++ = ' ';
 2607              		.loc 1 4441 7 is_stmt 0 view .LVU700
 2608 003a 1848     		ldr	r0, .L221+4
 2609              	.LVL186:
4441:src/xeq.c     **** 		*p++ = ' ';
 2610              		.loc 1 4441 7 view .LVU701
 2611 003c 0122     		movs	r2, #1
 2612 003e 0646     		mov	r6, r0
 2613 0040 FFF7FEFF 		bl	num_arg_0
 2614              	.LVL187:
4442:src/xeq.c     **** 	}
 2615              		.loc 1 4442 3 is_stmt 1 view .LVU702
4442:src/xeq.c     **** 	}
 2616              		.loc 1 4442 5 is_stmt 0 view .LVU703
 2617 0044 0746     		mov	r7, r0
 2618              	.LVL188:
4442:src/xeq.c     **** 	}
 2619              		.loc 1 4442 8 view .LVU704
 2620 0046 2023     		movs	r3, #32
 2621 0048 07F8013B 		strb	r3, [r7], #1
 2622              	.LVL189:
4444:src/xeq.c     **** 		scopy(p, "000:");
 2623              		.loc 1 4444 2 is_stmt 1 view .LVU705
4444:src/xeq.c     **** 		scopy(p, "000:");
 2624              		.loc 1 4444 5 is_stmt 0 view .LVU706
 2625 004c 002C     		cmp	r4, #0
 2626 004e E7D0     		beq	.L212
 2627              	.L220:
 2628              	.LVL190:
 2629              	.LBB1536:
 2630              	.LBB1537:
4444:src/xeq.c     **** 		scopy(p, "000:");
 2631              		.loc 1 4444 5 view .LVU707
 2632 0050 2046     		mov	r0, r4
 2633 0052 FFF7FEFF 		bl	user_pc.part.0
 2634              	.LVL191:
 2635 0056 0146     		mov	r1, r0
 2636              	.L209:
4444:src/xeq.c     **** 		scopy(p, "000:");
 2637              		.loc 1 4444 5 view .LVU708
 2638              	.LBE1537:
 2639              	.LBE1536:
4447:src/xeq.c     **** 		*p++ = ':';
 2640              		.loc 1 4447 7 view .LVU709
 2641 0058 0322     		movs	r2, #3
 2642 005a 3846     		mov	r0, r7
 2643 005c FFF7FEFF 		bl	num_arg_0
 2644              	.LVL192:
4448:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
ARM GAS  /tmp/cccVhVyH.s 			page 148


 2645              		.loc 1 4448 8 view .LVU710
 2646 0060 0746     		mov	r7, r0
 2647 0062 3A23     		movs	r3, #58
 2648 0064 07F8013B 		strb	r3, [r7], #1
4447:src/xeq.c     **** 		*p++ = ':';
 2649              		.loc 1 4447 7 view .LVU711
 2650 0068 0446     		mov	r4, r0
 2651              	.LVL193:
4448:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2652              		.loc 1 4448 3 is_stmt 1 view .LVU712
4449:src/xeq.c     **** 		if (*p == '?')
 2653              		.loc 1 4449 3 view .LVU713
 2654 006a 6946     		mov	r1, sp
 2655 006c 2846     		mov	r0, r5
 2656 006e FFF7FEFF 		bl	prt
 2657              	.LVL194:
 2658 0072 0022     		movs	r2, #0
 2659 0074 0146     		mov	r1, r0
 2660 0076 3846     		mov	r0, r7
 2661 0078 FFF7FEFF 		bl	scopy_char
 2662              	.LVL195:
4450:src/xeq.c     **** 			*p = '\0';
 2663              		.loc 1 4450 3 view .LVU714
4450:src/xeq.c     **** 			*p = '\0';
 2664              		.loc 1 4450 6 is_stmt 0 view .LVU715
 2665 007c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2666 007e 3F2B     		cmp	r3, #63
4451:src/xeq.c     **** 	}
 2667              		.loc 1 4451 4 is_stmt 1 view .LVU716
4451:src/xeq.c     **** 	}
 2668              		.loc 1 4451 7 is_stmt 0 view .LVU717
 2669 0080 04BF     		itt	eq
 2670 0082 0023     		moveq	r3, #0
 2671 0084 6370     		strbeq	r3, [r4, #1]
 2672 0086 CFE7     		b	.L211
 2673              	.LVL196:
 2674              	.L218:
4439:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2675              		.loc 1 4439 3 is_stmt 1 view .LVU718
4439:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2676              		.loc 1 4439 8 is_stmt 0 view .LVU719
 2677 0088 044E     		ldr	r6, .L221+4
 2678 008a 3746     		mov	r7, r6
 2679 008c 7823     		movs	r3, #120
 2680 008e 07F8013B 		strb	r3, [r7], #1
4444:src/xeq.c     **** 		scopy(p, "000:");
 2681              		.loc 1 4444 2 is_stmt 1 view .LVU720
4447:src/xeq.c     **** 		*p++ = ':';
 2682              		.loc 1 4447 3 view .LVU721
 2683              	.LBB1539:
 2684              	.LBI1536:
 494:src/xeq.c     **** 	unsigned int n = 1;
 2685              		.loc 1 494 14 view .LVU722
 2686              	.LBB1538:
 495:src/xeq.c     **** 	unsigned int base;
 2687              		.loc 1 495 2 view .LVU723
 2688              	.LVL197:
ARM GAS  /tmp/cccVhVyH.s 			page 149


 496:src/xeq.c     **** 
 2689              		.loc 1 496 2 view .LVU724
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 2690              		.loc 1 499 2 view .LVU725
 500:src/xeq.c     **** #else
 2691              		.loc 1 500 3 view .LVU726
 500:src/xeq.c     **** #else
 2692              		.loc 1 500 24 is_stmt 0 view .LVU727
 2693 0092 C4F30D01 		ubfx	r1, r4, #0, #14
 2694 0096 DFE7     		b	.L209
 2695              	.L222:
 2696              		.align	2
 2697              	.L221:
 2698 0098 00000000 		.word	main_ram
 2699 009c 00000000 		.word	TraceBuffer
 2700 00a0 00000000 		.word	.LC0
 2701 00a4 00000000 		.word	StateWhileOn
 2702 00a8 00000000 		.word	DispMsg
 2703              	.LBE1538:
 2704              	.LBE1539:
 2705              		.cfi_endproc
 2706              	.LFE234:
 2708              		.section	.text.do_dec,"ax",%progbits
 2709              		.align	1
 2710              		.p2align 2,,3
 2711              		.global	do_dec
 2712              		.syntax unified
 2713              		.thumb
 2714              		.thumb_func
 2715              		.fpu fpv4-sp-d16
 2717              	do_dec:
 2718              	.LVL198:
 2719              	.LFB21:
 437:src/xeq.c     **** 	unsigned short int top = 0;
 2720              		.loc 1 437 48 is_stmt 1 view -0
 2721              		.cfi_startproc
 2722              		@ args = 0, pretend = 0, frame = 8
 2723              		@ frame_needed = 0, uses_anonymous_args = 0
 438:src/xeq.c     **** 	unsigned short int bottom = 0;
 2724              		.loc 1 438 2 view .LVU729
 437:src/xeq.c     **** 	unsigned short int top = 0;
 2725              		.loc 1 437 48 is_stmt 0 view .LVU730
 2726 0000 70B5     		push	{r4, r5, r6, lr}
 2727              		.cfi_def_cfa_offset 16
 2728              		.cfi_offset 4, -16
 2729              		.cfi_offset 5, -12
 2730              		.cfi_offset 6, -8
 2731              		.cfi_offset 14, -4
 441:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2732              		.loc 1 441 12 view .LVU731
 2733 0002 114E     		ldr	r6, .L228
 437:src/xeq.c     **** 	unsigned short int top = 0;
 2734              		.loc 1 437 48 view .LVU732
 2735 0004 82B0     		sub	sp, sp, #8
 2736              		.cfi_def_cfa_offset 24
 438:src/xeq.c     **** 	unsigned short int bottom = 0;
 2737              		.loc 1 438 21 view .LVU733
ARM GAS  /tmp/cccVhVyH.s 			page 150


 2738 0006 0023     		movs	r3, #0
 442:src/xeq.c     **** 
 2739              		.loc 1 442 11 view .LVU734
 2740 0008 0DF10602 		add	r2, sp, #6
 437:src/xeq.c     **** 	unsigned short int top = 0;
 2741              		.loc 1 437 48 view .LVU735
 2742 000c 0546     		mov	r5, r0
 441:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2743              		.loc 1 441 12 view .LVU736
 2744 000e 3360     		str	r3, [r6]
 438:src/xeq.c     **** 	unsigned short int bottom = 0;
 2745              		.loc 1 438 21 view .LVU737
 2746 0010 ADF80630 		strh	r3, [sp, #6]	@ movhi
 439:src/xeq.c     **** 
 2747              		.loc 1 439 2 is_stmt 1 view .LVU738
 2748              	.LVL199:
 441:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2749              		.loc 1 441 2 view .LVU739
 442:src/xeq.c     **** 
 2750              		.loc 1 442 2 view .LVU740
 442:src/xeq.c     **** 
 2751              		.loc 1 442 11 is_stmt 0 view .LVU741
 2752 0014 FFF7FEFF 		bl	find_section_bounds
 2753              	.LVL200:
 444:src/xeq.c     **** 		PcWrapped = 1;
 2754              		.loc 1 444 9 view .LVU742
 2755 0018 BDF80630 		ldrh	r3, [sp, #6]
 2756              	.LVL201:
 444:src/xeq.c     **** 		PcWrapped = 1;
 2757              		.loc 1 444 2 is_stmt 1 view .LVU743
 444:src/xeq.c     **** 		PcWrapped = 1;
 2758              		.loc 1 444 5 is_stmt 0 view .LVU744
 2759 001c AB42     		cmp	r3, r5
 445:src/xeq.c     **** 		pc = bottom;
 2760              		.loc 1 445 13 view .LVU745
 2761 001e 25BF     		ittet	cs
 2762 0020 0122     		movcs	r2, #1
 2763 0022 0446     		movcs	r4, r0
 445:src/xeq.c     **** 		pc = bottom;
 2764              		.loc 1 445 3 is_stmt 1 view .LVU746
 449:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2765              		.loc 1 449 3 is_stmt 0 view .LVU747
 2766 0024 05F1FF34 		addcc	r4, r5, #-1
 445:src/xeq.c     **** 		pc = bottom;
 2767              		.loc 1 445 13 view .LVU748
 2768 0028 3260     		strcs	r2, [r6]
 446:src/xeq.c     **** 	}
 2769              		.loc 1 446 3 is_stmt 1 view .LVU749
 2770              	.LVL202:
 449:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2771              		.loc 1 449 3 view .LVU750
 450:src/xeq.c     **** 		--pc;
 2772              		.loc 1 450 2 view .LVU751
 450:src/xeq.c     **** 		--pc;
 2773              		.loc 1 450 5 is_stmt 0 view .LVU752
 2774 002a A342     		cmp	r3, r4
 2775 002c 09D2     		bcs	.L223
ARM GAS  /tmp/cccVhVyH.s 			page 151


 450:src/xeq.c     **** 		--pc;
 2776              		.loc 1 450 18 discriminator 1 view .LVU753
 2777 002e 651E     		subs	r5, r4, #1
 2778 0030 2846     		mov	r0, r5
 2779              	.LVL203:
 450:src/xeq.c     **** 		--pc;
 2780              		.loc 1 450 18 discriminator 1 view .LVU754
 2781 0032 FFF7FEFF 		bl	getprog
 2782              	.LVL204:
 2783 0036 00F47040 		and	r0, r0, #61440
 451:src/xeq.c     **** 	return pc;
 2784              		.loc 1 451 3 discriminator 1 view .LVU755
 2785 003a B0F5704F 		cmp	r0, #61440
 2786 003e 08BF     		it	eq
 2787 0040 2C46     		moveq	r4, r5
 2788              	.LVL205:
 2789              	.L223:
 453:src/xeq.c     **** 
 2790              		.loc 1 453 1 view .LVU756
 2791 0042 2046     		mov	r0, r4
 2792 0044 02B0     		add	sp, sp, #8
 2793              		.cfi_def_cfa_offset 16
 2794              		@ sp needed
 2795 0046 70BD     		pop	{r4, r5, r6, pc}
 2796              	.L229:
 2797              		.align	2
 2798              	.L228:
 2799 0048 00000000 		.word	PcWrapped
 2800              		.cfi_endproc
 2801              	.LFE21:
 2803              		.section	.text.update_program_bounds,"ax",%progbits
 2804              		.align	1
 2805              		.p2align 2,,3
 2806              		.global	update_program_bounds
 2807              		.syntax unified
 2808              		.thumb
 2809              		.thumb_func
 2810              		.fpu fpv4-sp-d16
 2812              	update_program_bounds:
 2813              	.LVL206:
 2814              	.LFB24:
 470:src/xeq.c     **** 	unsigned int pc = state_pc();
 2815              		.loc 1 470 45 is_stmt 1 view -0
 2816              		.cfi_startproc
 2817              		@ args = 0, pretend = 0, frame = 0
 2818              		@ frame_needed = 0, uses_anonymous_args = 0
 471:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2819              		.loc 1 471 2 view .LVU758
 470:src/xeq.c     **** 	unsigned int pc = state_pc();
 2820              		.loc 1 470 45 is_stmt 0 view .LVU759
 2821 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2822              		.cfi_def_cfa_offset 24
 2823              		.cfi_offset 3, -24
 2824              		.cfi_offset 4, -20
 2825              		.cfi_offset 5, -16
 2826              		.cfi_offset 6, -12
 2827              		.cfi_offset 7, -8
ARM GAS  /tmp/cccVhVyH.s 			page 152


 2828              		.cfi_offset 14, -4
 471:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2829              		.loc 1 471 20 view .LVU760
 2830 0002 224F     		ldr	r7, .L251
 2831 0004 3D68     		ldr	r5, [r7]
 471:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2832              		.loc 1 471 15 view .LVU761
 2833 0006 B5F8E047 		ldrh	r4, [r5, #2016]
 2834              	.LVL207:
 472:src/xeq.c     **** 		State.pc = pc = 1;
 2835              		.loc 1 472 2 is_stmt 1 view .LVU762
 472:src/xeq.c     **** 		State.pc = pc = 1;
 2836              		.loc 1 472 5 is_stmt 0 view .LVU763
 2837 000a 34B9     		cbnz	r4, .L231
 472:src/xeq.c     **** 		State.pc = pc = 1;
 2838              		.loc 1 472 14 discriminator 1 view .LVU764
 2839 000c 204B     		ldr	r3, .L251+4
 2840 000e 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2841 0010 5B06     		lsls	r3, r3, #25
 473:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2842              		.loc 1 473 3 is_stmt 1 discriminator 1 view .LVU765
 2843              	.LVL208:
 473:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2844              		.loc 1 473 12 is_stmt 0 discriminator 1 view .LVU766
 2845 0012 44BF     		itt	mi
 2846 0014 0124     		movmi	r4, #1
 2847 0016 A5F8E047 		strhmi	r4, [r5, #2016]	@ movhi
 2848              	.LVL209:
 2849              	.L231:
 474:src/xeq.c     **** 		return;
 2850              		.loc 1 474 2 is_stmt 1 view .LVU767
 474:src/xeq.c     **** 		return;
 2851              		.loc 1 474 5 is_stmt 0 view .LVU768
 2852 001a 18B9     		cbnz	r0, .L232
 474:src/xeq.c     **** 		return;
 2853              		.loc 1 474 23 discriminator 1 view .LVU769
 2854 001c B5F8EC37 		ldrh	r3, [r5, #2028]
 474:src/xeq.c     **** 		return;
 2855              		.loc 1 474 14 discriminator 1 view .LVU770
 2856 0020 A342     		cmp	r3, r4
 2857 0022 2DD9     		bls	.L248
 2858              	.L232:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2859              		.loc 1 476 2 is_stmt 1 view .LVU771
 476:src/xeq.c     **** 		ProgEnd = pc;
 2860              		.loc 1 476 17 is_stmt 0 view .LVU772
 2861 0024 1B4E     		ldr	r6, .L251+8
 2862 0026 0023     		movs	r3, #0
 2863 0028 3360     		str	r3, [r6]
 476:src/xeq.c     **** 		ProgEnd = pc;
 2864              		.loc 1 476 22 is_stmt 1 view .LVU773
 2865 002a 05E0     		b	.L236
 2866              	.LVL210:
 2867              	.L249:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2868              		.loc 1 476 39 is_stmt 0 discriminator 2 view .LVU774
 2869 002c FFF7FEFF 		bl	do_inc
ARM GAS  /tmp/cccVhVyH.s 			page 153


 2870              	.LVL211:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2871              		.loc 1 476 2 discriminator 2 view .LVU775
 2872 0030 3368     		ldr	r3, [r6]
 2873 0032 3D68     		ldr	r5, [r7]
 476:src/xeq.c     **** 		ProgEnd = pc;
 2874              		.loc 1 476 39 discriminator 2 view .LVU776
 2875 0034 0446     		mov	r4, r0
 2876              	.LVL212:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2877              		.loc 1 476 22 is_stmt 1 discriminator 2 view .LVU777
 476:src/xeq.c     **** 		ProgEnd = pc;
 2878              		.loc 1 476 2 is_stmt 0 discriminator 2 view .LVU778
 2879 0036 5BB9     		cbnz	r3, .L234
 2880              	.LVL213:
 2881              	.L236:
 477:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2882              		.loc 1 477 3 is_stmt 1 view .LVU779
 477:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2883              		.loc 1 477 11 is_stmt 0 view .LVU780
 2884 0038 A5F8EE47 		strh	r4, [r5, #2030]	@ movhi
 478:src/xeq.c     **** 			break;
 2885              		.loc 1 478 3 is_stmt 1 view .LVU781
 478:src/xeq.c     **** 			break;
 2886              		.loc 1 478 7 is_stmt 0 view .LVU782
 2887 003c 2046     		mov	r0, r4
 2888 003e FFF7FEFF 		bl	getprog
 2889              	.LVL214:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2890              		.loc 1 476 34 is_stmt 1 view .LVU783
 478:src/xeq.c     **** 			break;
 2891              		.loc 1 478 7 is_stmt 0 view .LVU784
 2892 0042 0346     		mov	r3, r0
 478:src/xeq.c     **** 			break;
 2893              		.loc 1 478 6 view .LVU785
 2894 0044 B3F59D7F 		cmp	r3, #314
 476:src/xeq.c     **** 		ProgEnd = pc;
 2895              		.loc 1 476 39 view .LVU786
 2896 0048 4FF00001 		mov	r1, #0
 2897 004c 2046     		mov	r0, r4
 478:src/xeq.c     **** 			break;
 2898              		.loc 1 478 6 view .LVU787
 2899 004e EDD1     		bne	.L249
 2900              	.LVL215:
 2901              	.L234:
 482:src/xeq.c     **** 		const unsigned int opc = pc;
 2902              		.loc 1 482 2 is_stmt 1 view .LVU788
 482:src/xeq.c     **** 		const unsigned int opc = pc;
 2903              		.loc 1 482 10 is_stmt 0 view .LVU789
 2904 0050 B5F8E047 		ldrh	r4, [r5, #2016]
 2905              	.LVL216:
 482:src/xeq.c     **** 		const unsigned int opc = pc;
 2906              		.loc 1 482 10 view .LVU790
 2907 0054 04E0     		b	.L238
 2908              	.LVL217:
 2909              	.L250:
 2910              	.LBB1540:
ARM GAS  /tmp/cccVhVyH.s 			page 154


 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2911              		.loc 1 485 20 discriminator 1 view .LVU791
 2912 0056 FFF7FEFF 		bl	getprog
 2913              	.LVL218:
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2914              		.loc 1 485 17 discriminator 1 view .LVU792
 2915 005a B0F59D7F 		cmp	r0, #314
 2916 005e 08D0     		beq	.L237
 2917              	.LVL219:
 2918              	.L238:
 483:src/xeq.c     **** 		pc = do_dec(opc, 0);
 2919              		.loc 1 483 3 is_stmt 1 view .LVU793
 484:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2920              		.loc 1 484 3 view .LVU794
 484:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2921              		.loc 1 484 8 is_stmt 0 view .LVU795
 2922 0060 2046     		mov	r0, r4
 2923 0062 0021     		movs	r1, #0
 2924 0064 FFF7FEFF 		bl	do_dec
 2925              	.LVL220:
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2926              		.loc 1 485 6 view .LVU796
 2927 0068 3368     		ldr	r3, [r6]
 2928 006a 2546     		mov	r5, r4
 484:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2929              		.loc 1 484 8 view .LVU797
 2930 006c 0446     		mov	r4, r0
 2931              	.LVL221:
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2932              		.loc 1 485 3 is_stmt 1 view .LVU798
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2933              		.loc 1 485 6 is_stmt 0 view .LVU799
 2934 006e 002B     		cmp	r3, #0
 2935 0070 F1D0     		beq	.L250
 2936              	.LVL222:
 2937              	.L237:
 486:src/xeq.c     **** 			break;
 2938              		.loc 1 486 4 is_stmt 1 view .LVU800
 486:src/xeq.c     **** 			break;
 2939              		.loc 1 486 14 is_stmt 0 view .LVU801
 2940 0072 3B68     		ldr	r3, [r7]
 2941 0074 012D     		cmp	r5, #1
 2942 0076 38BF     		it	cc
 2943 0078 0125     		movcc	r5, #1
 2944              	.LVL223:
 486:src/xeq.c     **** 			break;
 2945              		.loc 1 486 14 view .LVU802
 2946 007a A3F8EC57 		strh	r5, [r3, #2028]	@ movhi
 487:src/xeq.c     **** 		}
 2947              		.loc 1 487 4 is_stmt 1 view .LVU803
 2948              	.LBE1540:
 490:src/xeq.c     **** 
 2949              		.loc 1 490 1 is_stmt 0 view .LVU804
 2950 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2951              	.LVL224:
 2952              	.L248:
 474:src/xeq.c     **** 		return;
ARM GAS  /tmp/cccVhVyH.s 			page 155


 2953              		.loc 1 474 42 discriminator 2 view .LVU805
 2954 0080 B5F8EE37 		ldrh	r3, [r5, #2030]
 474:src/xeq.c     **** 		return;
 2955              		.loc 1 474 33 discriminator 2 view .LVU806
 2956 0084 A342     		cmp	r3, r4
 2957 0086 CDD3     		bcc	.L232
 490:src/xeq.c     **** 
 2958              		.loc 1 490 1 view .LVU807
 2959 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2960              	.LVL225:
 2961              	.L252:
 490:src/xeq.c     **** 
 2962              		.loc 1 490 1 view .LVU808
 2963 008a 00BF     		.align	2
 2964              	.L251:
 2965 008c 00000000 		.word	main_ram
 2966 0090 00000000 		.word	StateWhileOn
 2967 0094 00000000 		.word	PcWrapped
 2968              		.cfi_endproc
 2969              	.LFE24:
 2971              		.section	.text.set_pc,"ax",%progbits
 2972              		.align	1
 2973              		.p2align 2,,3
 2974              		.global	set_pc
 2975              		.syntax unified
 2976              		.thumb
 2977              		.thumb_func
 2978              		.fpu fpv4-sp-d16
 2980              	set_pc:
 2981              	.LVL226:
 2982              	.LFB18:
 367:src/xeq.c     **** 	if (isRAM(pc)) {
 2983              		.loc 1 367 30 is_stmt 1 view -0
 2984              		.cfi_startproc
 2985              		@ args = 0, pretend = 0, frame = 0
 2986              		@ frame_needed = 0, uses_anonymous_args = 0
 368:src/xeq.c     **** 		if (pc > ProgSize)
 2987              		.loc 1 368 2 view .LVU810
 368:src/xeq.c     **** 		if (pc > ProgSize)
 2988              		.loc 1 368 5 is_stmt 0 view .LVU811
 2989 0000 10F4704F 		tst	r0, #61440
 367:src/xeq.c     **** 	if (isRAM(pc)) {
 2990              		.loc 1 367 30 view .LVU812
 2991 0004 38B5     		push	{r3, r4, r5, lr}
 2992              		.cfi_def_cfa_offset 16
 2993              		.cfi_offset 3, -16
 2994              		.cfi_offset 4, -12
 2995              		.cfi_offset 5, -8
 2996              		.cfi_offset 14, -4
 367:src/xeq.c     **** 	if (isRAM(pc)) {
 2997              		.loc 1 367 30 view .LVU813
 2998 0006 0446     		mov	r4, r0
 368:src/xeq.c     **** 		if (pc > ProgSize)
 2999              		.loc 1 368 5 view .LVU814
 3000 0008 15D1     		bne	.L254
 369:src/xeq.c     **** 			pc = ProgSize;
 3001              		.loc 1 369 3 is_stmt 1 view .LVU815
ARM GAS  /tmp/cccVhVyH.s 			page 156


 369:src/xeq.c     **** 			pc = ProgSize;
 3002              		.loc 1 369 12 is_stmt 0 view .LVU816
 3003 000a 264B     		ldr	r3, .L262
 3004 000c 1B68     		ldr	r3, [r3]
 3005 000e 5A88     		ldrh	r2, [r3, #2]
 3006 0010 9042     		cmp	r0, r2
 3007 0012 28BF     		it	cs
 3008 0014 1446     		movcs	r4, r2
 3009              	.LVL227:
 371:src/xeq.c     **** 			pc--;
 3010              		.loc 1 371 3 is_stmt 1 view .LVU817
 371:src/xeq.c     **** 			pc--;
 3011              		.loc 1 371 6 is_stmt 0 view .LVU818
 3012 0016 012C     		cmp	r4, #1
 3013 0018 06D9     		bls	.L255
 371:src/xeq.c     **** 			pc--;
 3014              		.loc 1 371 14 discriminator 1 view .LVU819
 3015 001a 33F81420 		ldrh	r2, [r3, r4, lsl #1]
 3016 001e 02F47042 		and	r2, r2, #61440
 3017 0022 B2F5704F 		cmp	r2, #61440
 3018 0026 35D0     		beq	.L261
 3019              	.L255:
 380:src/xeq.c     **** }
 3020              		.loc 1 380 2 is_stmt 1 view .LVU820
 3021              	.LVL228:
 3022              	.LBB1541:
 3023              	.LBI1541:
 282:src/xeq.c     **** 	State.pc = pc;
 3024              		.loc 1 282 13 view .LVU821
 3025              	.LBB1542:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3026              		.loc 1 283 2 view .LVU822
 283:src/xeq.c     **** 	update_program_bounds(0);
 3027              		.loc 1 283 11 is_stmt 0 view .LVU823
 3028 0028 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3029              		.loc 1 284 2 is_stmt 1 view .LVU824
 3030 002c 0020     		movs	r0, #0
 3031              	.LBE1542:
 3032              	.LBE1541:
 381:src/xeq.c     **** 
 3033              		.loc 1 381 1 is_stmt 0 view .LVU825
 3034 002e BDE83840 		pop	{r3, r4, r5, lr}
 3035              		.cfi_remember_state
 3036              		.cfi_restore 14
 3037              		.cfi_restore 5
 3038              		.cfi_restore 4
 3039              		.cfi_restore 3
 3040              		.cfi_def_cfa_offset 0
 3041              	.LVL229:
 3042              	.LBB1550:
 3043              	.LBB1543:
 284:src/xeq.c     **** }
 3044              		.loc 1 284 2 view .LVU826
 3045 0032 FFF7FEBF 		b	update_program_bounds
 3046              	.LVL230:
 3047              	.L254:
ARM GAS  /tmp/cccVhVyH.s 			page 157


 3048              		.cfi_restore_state
 284:src/xeq.c     **** }
 3049              		.loc 1 284 2 view .LVU827
 3050              	.LBE1543:
 3051              	.LBE1550:
 373:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3052              		.loc 1 373 9 is_stmt 1 view .LVU828
 373:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3053              		.loc 1 373 14 is_stmt 0 view .LVU829
 3054 0036 820B     		lsrs	r2, r0, #14
 373:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3055              		.loc 1 373 12 view .LVU830
 3056 0038 032A     		cmp	r2, #3
 3057 003a 22D0     		beq	.L260
 3058              	.LBB1551:
 374:src/xeq.c     **** 		if (pc > n - 1)
 3059              		.loc 1 374 3 is_stmt 1 view .LVU831
 3060              	.LVL231:
 3061              	.LBB1552:
 3062              	.LBI1552:
 319:src/xeq.c     **** 	if (region == REGION_XROM)
 3063              		.loc 1 319 5 view .LVU832
 3064              	.LBB1553:
 320:src/xeq.c     **** 		return xrom_size;
 3065              		.loc 1 320 2 view .LVU833
 323:src/xeq.c     **** }
 3066              		.loc 1 323 3 view .LVU834
 323:src/xeq.c     **** }
 3067              		.loc 1 323 24 is_stmt 0 view .LVU835
 3068 003c 1A49     		ldr	r1, .L262+4
 3069              	.LBE1553:
 3070              	.LBE1552:
 374:src/xeq.c     **** 		if (pc > n - 1)
 3071              		.loc 1 374 26 view .LVU836
 3072 003e 1B4B     		ldr	r3, .L262+8
 3073              	.LBB1555:
 3074              	.LBB1554:
 323:src/xeq.c     **** }
 3075              		.loc 1 323 32 view .LVU837
 3076 0040 51F82220 		ldr	r2, [r1, r2, lsl #2]
 3077              	.LBE1554:
 3078              	.LBE1555:
 374:src/xeq.c     **** 		if (pc > n - 1)
 3079              		.loc 1 374 39 view .LVU838
 3080 0044 32F8022C 		ldrh	r2, [r2, #-2]
 374:src/xeq.c     **** 		if (pc > n - 1)
 3081              		.loc 1 374 26 view .LVU839
 3082 0048 00EA0301 		and	r1, r0, r3
 374:src/xeq.c     **** 		if (pc > n - 1)
 3083              		.loc 1 374 39 view .LVU840
 3084 004c 0A44     		add	r2, r2, r1
 3085              	.LVL232:
 375:src/xeq.c     **** 			pc = n - 1;
 3086              		.loc 1 375 3 is_stmt 1 view .LVU841
 3087 004e 9042     		cmp	r0, r2
 3088 0050 28BF     		it	cs
 3089 0052 1446     		movcs	r4, r2
ARM GAS  /tmp/cccVhVyH.s 			page 158


 3090              	.LVL233:
 377:src/xeq.c     **** 			--pc;
 3091              		.loc 1 377 3 view .LVU842
 377:src/xeq.c     **** 			--pc;
 3092              		.loc 1 377 12 is_stmt 0 view .LVU843
 3093 0054 2340     		ands	r3, r3, r4
 3094 0056 0133     		adds	r3, r3, #1
 377:src/xeq.c     **** 			--pc;
 3095              		.loc 1 377 6 view .LVU844
 3096 0058 A342     		cmp	r3, r4
 3097 005a 12D2     		bcs	.L260
 377:src/xeq.c     **** 			--pc;
 3098              		.loc 1 377 28 discriminator 1 view .LVU845
 3099 005c 651E     		subs	r5, r4, #1
 3100 005e 2846     		mov	r0, r5
 3101 0060 FFF7FEFF 		bl	getprog
 3102              	.LVL234:
 377:src/xeq.c     **** 			--pc;
 3103              		.loc 1 377 28 discriminator 1 view .LVU846
 3104 0064 0F4B     		ldr	r3, .L262
 3105 0066 00F47040 		and	r0, r0, #61440
 3106 006a 1B68     		ldr	r3, [r3]
 377:src/xeq.c     **** 			--pc;
 3107              		.loc 1 377 25 discriminator 1 view .LVU847
 3108 006c B0F5704F 		cmp	r0, #61440
 378:src/xeq.c     **** 	}
 3109              		.loc 1 378 4 is_stmt 1 discriminator 1 view .LVU848
 3110              	.LVL235:
 378:src/xeq.c     **** 	}
 3111              		.loc 1 378 4 is_stmt 0 discriminator 1 view .LVU849
 3112 0070 08BF     		it	eq
 3113 0072 2C46     		moveq	r4, r5
 3114              	.LVL236:
 378:src/xeq.c     **** 	}
 3115              		.loc 1 378 4 discriminator 1 view .LVU850
 3116              	.LBE1551:
 380:src/xeq.c     **** }
 3117              		.loc 1 380 2 is_stmt 1 discriminator 1 view .LVU851
 3118              	.LBB1556:
 282:src/xeq.c     **** 	State.pc = pc;
 3119              		.loc 1 282 13 discriminator 1 view .LVU852
 3120              	.LBB1544:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3121              		.loc 1 283 2 discriminator 1 view .LVU853
 283:src/xeq.c     **** 	update_program_bounds(0);
 3122              		.loc 1 283 11 is_stmt 0 discriminator 1 view .LVU854
 3123 0074 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3124              		.loc 1 284 2 is_stmt 1 discriminator 1 view .LVU855
 3125 0078 0020     		movs	r0, #0
 3126              	.LBE1544:
 3127              	.LBE1556:
 381:src/xeq.c     **** 
 3128              		.loc 1 381 1 is_stmt 0 discriminator 1 view .LVU856
 3129 007a BDE83840 		pop	{r3, r4, r5, lr}
 3130              		.cfi_remember_state
 3131              		.cfi_restore 14
ARM GAS  /tmp/cccVhVyH.s 			page 159


 3132              		.cfi_restore 5
 3133              		.cfi_restore 4
 3134              		.cfi_restore 3
 3135              		.cfi_def_cfa_offset 0
 3136              	.LVL237:
 3137              	.LBB1557:
 3138              	.LBB1545:
 284:src/xeq.c     **** }
 3139              		.loc 1 284 2 discriminator 1 view .LVU857
 3140 007e FFF7FEBF 		b	update_program_bounds
 3141              	.LVL238:
 3142              	.L260:
 3143              		.cfi_restore_state
 284:src/xeq.c     **** }
 3144              		.loc 1 284 2 discriminator 1 view .LVU858
 3145 0082 084B     		ldr	r3, .L262
 3146 0084 1B68     		ldr	r3, [r3]
 284:src/xeq.c     **** }
 3147              		.loc 1 284 2 discriminator 1 view .LVU859
 3148              	.LBE1545:
 3149              	.LBE1557:
 380:src/xeq.c     **** }
 3150              		.loc 1 380 2 is_stmt 1 view .LVU860
 3151              	.LVL239:
 3152              	.LBB1558:
 282:src/xeq.c     **** 	State.pc = pc;
 3153              		.loc 1 282 13 view .LVU861
 3154              	.LBB1546:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3155              		.loc 1 283 2 view .LVU862
 284:src/xeq.c     **** }
 3156              		.loc 1 284 2 is_stmt 0 view .LVU863
 3157 0086 0020     		movs	r0, #0
 283:src/xeq.c     **** 	update_program_bounds(0);
 3158              		.loc 1 283 11 view .LVU864
 3159 0088 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3160              		.loc 1 284 2 is_stmt 1 view .LVU865
 3161              	.LBE1546:
 3162              	.LBE1558:
 381:src/xeq.c     **** 
 3163              		.loc 1 381 1 is_stmt 0 view .LVU866
 3164 008c BDE83840 		pop	{r3, r4, r5, lr}
 3165              		.cfi_remember_state
 3166              		.cfi_restore 14
 3167              		.cfi_restore 5
 3168              		.cfi_restore 4
 3169              		.cfi_restore 3
 3170              		.cfi_def_cfa_offset 0
 3171              	.LVL240:
 3172              	.LBB1559:
 3173              	.LBB1547:
 284:src/xeq.c     **** }
 3174              		.loc 1 284 2 view .LVU867
 3175 0090 FFF7FEBF 		b	update_program_bounds
 3176              	.LVL241:
 3177              	.L261:
ARM GAS  /tmp/cccVhVyH.s 			page 160


 3178              		.cfi_restore_state
 284:src/xeq.c     **** }
 3179              		.loc 1 284 2 view .LVU868
 3180              	.LBE1547:
 3181              	.LBE1559:
 372:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3182              		.loc 1 372 4 is_stmt 1 view .LVU869
 372:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3183              		.loc 1 372 6 is_stmt 0 view .LVU870
 3184 0094 013C     		subs	r4, r4, #1
 3185              	.LVL242:
 380:src/xeq.c     **** }
 3186              		.loc 1 380 2 is_stmt 1 view .LVU871
 3187              	.LBB1560:
 282:src/xeq.c     **** 	State.pc = pc;
 3188              		.loc 1 282 13 view .LVU872
 3189              	.LBB1548:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3190              		.loc 1 283 2 view .LVU873
 283:src/xeq.c     **** 	update_program_bounds(0);
 3191              		.loc 1 283 11 is_stmt 0 view .LVU874
 3192 0096 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3193              		.loc 1 284 2 is_stmt 1 view .LVU875
 3194 009a 0020     		movs	r0, #0
 3195              	.LBE1548:
 3196              	.LBE1560:
 381:src/xeq.c     **** 
 3197              		.loc 1 381 1 is_stmt 0 view .LVU876
 3198 009c BDE83840 		pop	{r3, r4, r5, lr}
 3199              		.cfi_restore 14
 3200              		.cfi_restore 5
 3201              		.cfi_restore 4
 3202              		.cfi_restore 3
 3203              		.cfi_def_cfa_offset 0
 3204              	.LVL243:
 3205              	.LBB1561:
 3206              	.LBB1549:
 284:src/xeq.c     **** }
 3207              		.loc 1 284 2 view .LVU877
 3208 00a0 FFF7FEBF 		b	update_program_bounds
 3209              	.LVL244:
 3210              	.L263:
 284:src/xeq.c     **** }
 3211              		.loc 1 284 2 view .LVU878
 3212              		.align	2
 3213              	.L262:
 3214 00a4 00000000 		.word	main_ram
 3215 00a8 00000000 		.word	.LANCHOR0
 3216 00ac 00C0FFFF 		.word	-16384
 3217              	.LBE1549:
 3218              	.LBE1561:
 3219              		.cfi_endproc
 3220              	.LFE18:
 3222              		.section	.text.incpc,"ax",%progbits
 3223              		.align	1
 3224              		.p2align 2,,3
ARM GAS  /tmp/cccVhVyH.s 			page 161


 3225              		.global	incpc
 3226              		.syntax unified
 3227              		.thumb
 3228              		.thumb_func
 3229              		.fpu fpv4-sp-d16
 3231              	incpc:
 3232              	.LFB22:
 458:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3233              		.loc 1 458 17 is_stmt 1 view -0
 3234              		.cfi_startproc
 3235              		@ args = 0, pretend = 0, frame = 0
 3236              		@ frame_needed = 0, uses_anonymous_args = 0
 459:src/xeq.c     **** 	return PcWrapped;
 3237              		.loc 1 459 2 view .LVU880
 458:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3238              		.loc 1 458 17 is_stmt 0 view .LVU881
 3239 0000 10B5     		push	{r4, lr}
 3240              		.cfi_def_cfa_offset 8
 3241              		.cfi_offset 4, -8
 3242              		.cfi_offset 14, -4
 459:src/xeq.c     **** 	return PcWrapped;
 3243              		.loc 1 459 20 view .LVU882
 3244 0002 084C     		ldr	r4, .L266
 3245 0004 2368     		ldr	r3, [r4]
 459:src/xeq.c     **** 	return PcWrapped;
 3246              		.loc 1 459 2 view .LVU883
 3247 0006 0121     		movs	r1, #1
 3248 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3249 000c FFF7FEFF 		bl	do_inc
 3250              	.LVL245:
 3251              	.LBB1562:
 3252              	.LBB1563:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3253              		.loc 1 283 11 view .LVU884
 3254 0010 2368     		ldr	r3, [r4]
 3255              	.LBE1563:
 3256              	.LBE1562:
 459:src/xeq.c     **** 	return PcWrapped;
 3257              		.loc 1 459 2 view .LVU885
 3258 0012 0246     		mov	r2, r0
 3259              	.LVL246:
 3260              	.LBB1565:
 3261              	.LBI1562:
 282:src/xeq.c     **** 	State.pc = pc;
 3262              		.loc 1 282 13 is_stmt 1 view .LVU886
 3263              	.LBB1564:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3264              		.loc 1 283 2 view .LVU887
 283:src/xeq.c     **** 	update_program_bounds(0);
 3265              		.loc 1 283 11 is_stmt 0 view .LVU888
 3266 0014 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3267              		.loc 1 284 2 is_stmt 1 view .LVU889
 3268 0018 0020     		movs	r0, #0
 3269              	.LVL247:
 284:src/xeq.c     **** }
 3270              		.loc 1 284 2 is_stmt 0 view .LVU890
ARM GAS  /tmp/cccVhVyH.s 			page 162


 3271 001a FFF7FEFF 		bl	update_program_bounds
 3272              	.LVL248:
 284:src/xeq.c     **** }
 3273              		.loc 1 284 2 view .LVU891
 3274              	.LBE1564:
 3275              	.LBE1565:
 460:src/xeq.c     **** }
 3276              		.loc 1 460 2 is_stmt 1 view .LVU892
 460:src/xeq.c     **** }
 3277              		.loc 1 460 9 is_stmt 0 view .LVU893
 3278 001e 024B     		ldr	r3, .L266+4
 461:src/xeq.c     **** 
 3279              		.loc 1 461 1 view .LVU894
 3280 0020 1868     		ldr	r0, [r3]
 3281 0022 10BD     		pop	{r4, pc}
 3282              	.L267:
 3283              		.align	2
 3284              	.L266:
 3285 0024 00000000 		.word	main_ram
 3286 0028 00000000 		.word	PcWrapped
 3287              		.cfi_endproc
 3288              	.LFE22:
 3290              		.section	.text.decpc,"ax",%progbits
 3291              		.align	1
 3292              		.p2align 2,,3
 3293              		.global	decpc
 3294              		.syntax unified
 3295              		.thumb
 3296              		.thumb_func
 3297              		.fpu fpv4-sp-d16
 3299              	decpc:
 3300              	.LFB23:
 463:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3301              		.loc 1 463 18 is_stmt 1 view -0
 3302              		.cfi_startproc
 3303              		@ args = 0, pretend = 0, frame = 0
 3304              		@ frame_needed = 0, uses_anonymous_args = 0
 464:src/xeq.c     **** }
 3305              		.loc 1 464 2 view .LVU896
 463:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3306              		.loc 1 463 18 is_stmt 0 view .LVU897
 3307 0000 10B5     		push	{r4, lr}
 3308              		.cfi_def_cfa_offset 8
 3309              		.cfi_offset 4, -8
 3310              		.cfi_offset 14, -4
 464:src/xeq.c     **** }
 3311              		.loc 1 464 20 view .LVU898
 3312 0002 084C     		ldr	r4, .L270
 3313 0004 2368     		ldr	r3, [r4]
 464:src/xeq.c     **** }
 3314              		.loc 1 464 2 view .LVU899
 3315 0006 0121     		movs	r1, #1
 3316 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3317 000c FFF7FEFF 		bl	do_dec
 3318              	.LVL249:
 3319              	.LBB1566:
 3320              	.LBB1567:
ARM GAS  /tmp/cccVhVyH.s 			page 163


 283:src/xeq.c     **** 	update_program_bounds(0);
 3321              		.loc 1 283 11 view .LVU900
 3322 0010 2368     		ldr	r3, [r4]
 3323              	.LBE1567:
 3324              	.LBE1566:
 464:src/xeq.c     **** }
 3325              		.loc 1 464 2 view .LVU901
 3326 0012 0246     		mov	r2, r0
 3327              	.LVL250:
 3328              	.LBB1570:
 3329              	.LBI1566:
 282:src/xeq.c     **** 	State.pc = pc;
 3330              		.loc 1 282 13 is_stmt 1 view .LVU902
 3331              	.LBB1568:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3332              		.loc 1 283 2 view .LVU903
 3333              	.LBE1568:
 3334              	.LBE1570:
 465:src/xeq.c     **** 
 3335              		.loc 1 465 1 is_stmt 0 view .LVU904
 3336 0014 BDE81040 		pop	{r4, lr}
 3337              		.cfi_restore 14
 3338              		.cfi_restore 4
 3339              		.cfi_def_cfa_offset 0
 3340              	.LBB1571:
 3341              	.LBB1569:
 284:src/xeq.c     **** }
 3342              		.loc 1 284 2 view .LVU905
 3343 0018 0020     		movs	r0, #0
 3344              	.LVL251:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3345              		.loc 1 283 11 view .LVU906
 3346 001a A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3347              		.loc 1 284 2 is_stmt 1 view .LVU907
 3348 001e FFF7FEBF 		b	update_program_bounds
 3349              	.LVL252:
 3350              	.L271:
 284:src/xeq.c     **** }
 3351              		.loc 1 284 2 is_stmt 0 view .LVU908
 3352 0022 00BF     		.align	2
 3353              	.L270:
 3354 0024 00000000 		.word	main_ram
 3355              	.LBE1569:
 3356              	.LBE1571:
 3357              		.cfi_endproc
 3358              	.LFE23:
 3360              		.section	.text.do_rtn,"ax",%progbits
 3361              		.align	1
 3362              		.p2align 2,,3
 3363              		.syntax unified
 3364              		.thumb
 3365              		.thumb_func
 3366              		.fpu fpv4-sp-d16
 3368              	do_rtn:
 3369              	.LVL253:
 3370              	.LFB154:
ARM GAS  /tmp/cccVhVyH.s 			page 164


2250:src/xeq.c     **** 	unsigned short pc;
 3371              		.loc 1 2250 31 is_stmt 1 view -0
 3372              		.cfi_startproc
 3373              		@ args = 0, pretend = 0, frame = 0
 3374              		@ frame_needed = 0, uses_anonymous_args = 0
2251:src/xeq.c     **** 
 3375              		.loc 1 2251 2 view .LVU910
2253:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3376              		.loc 1 2253 2 view .LVU911
2250:src/xeq.c     **** 	unsigned short pc;
 3377              		.loc 1 2250 31 is_stmt 0 view .LVU912
 3378 0000 70B5     		push	{r4, r5, r6, lr}
 3379              		.cfi_def_cfa_offset 16
 3380              		.cfi_offset 4, -16
 3381              		.cfi_offset 5, -12
 3382              		.cfi_offset 6, -8
 3383              		.cfi_offset 14, -4
2253:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3384              		.loc 1 2253 6 view .LVU913
 3385 0002 244C     		ldr	r4, .L286
 3386 0004 2368     		ldr	r3, [r4]
2253:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3387              		.loc 1 2253 5 view .LVU914
 3388 0006 B3F9E227 		ldrsh	r2, [r3, #2018]
 3389 000a 002A     		cmp	r2, #0
 3390 000c 13DB     		blt	.L273
2255:src/xeq.c     **** 		raw_set_pc(ProgBegin);
 3391              		.loc 1 2255 3 is_stmt 1 view .LVU915
 3392              	.LBB1572:
 3393              	.LBI1572:
1609:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 3394              		.loc 1 1609 6 view .LVU916
 3395              	.LBB1573:
1610:src/xeq.c     **** }
 3396              		.loc 1 1610 2 view .LVU917
1610:src/xeq.c     **** }
 3397              		.loc 1 1610 24 is_stmt 0 view .LVU918
 3398 000e B3F8DE27 		ldrh	r2, [r3, #2014]
 3399              	.LBE1573:
 3400              	.LBE1572:
 3401              	.LBB1575:
 3402              	.LBB1576:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3403              		.loc 1 283 11 view .LVU919
 3404 0012 B3F8EC17 		ldrh	r1, [r3, #2028]
 3405 0016 A3F8E017 		strh	r1, [r3, #2016]	@ movhi
 3406              	.LBE1576:
 3407              	.LBE1575:
 3408              	.LBB1578:
 3409              	.LBB1574:
1610:src/xeq.c     **** }
 3410              		.loc 1 1610 24 view .LVU920
 3411 001a 6FF34F12 		bfc	r2, #5, #11
1610:src/xeq.c     **** }
 3412              		.loc 1 1610 12 view .LVU921
 3413 001e 0020     		movs	r0, #0
 3414              	.LVL254:
ARM GAS  /tmp/cccVhVyH.s 			page 165


1610:src/xeq.c     **** }
 3415              		.loc 1 1610 24 view .LVU922
 3416 0020 A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
1610:src/xeq.c     **** }
 3417              		.loc 1 1610 12 view .LVU923
 3418 0024 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 3419              	.LBE1574:
 3420              	.LBE1578:
2256:src/xeq.c     **** 	}
 3421              		.loc 1 2256 3 is_stmt 1 view .LVU924
 3422              	.LVL255:
 3423              	.LBB1579:
 3424              	.LBI1575:
 282:src/xeq.c     **** 	State.pc = pc;
 3425              		.loc 1 282 13 view .LVU925
 3426              	.LBB1577:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3427              		.loc 1 283 2 view .LVU926
 284:src/xeq.c     **** }
 3428              		.loc 1 284 2 view .LVU927
 3429 0028 FFF7FEFF 		bl	update_program_bounds
 3430              	.LVL256:
 3431              	.L274:
 284:src/xeq.c     **** }
 3432              		.loc 1 284 2 is_stmt 0 view .LVU928
 3433              	.LBE1577:
 3434              	.LBE1579:
2269:src/xeq.c     **** 		// RTN with empty stack stops
 3435              		.loc 1 2269 2 is_stmt 1 view .LVU929
2269:src/xeq.c     **** 		// RTN with empty stack stops
 3436              		.loc 1 2269 6 is_stmt 0 view .LVU930
 3437 002c 2368     		ldr	r3, [r4]
2269:src/xeq.c     **** 		// RTN with empty stack stops
 3438              		.loc 1 2269 5 view .LVU931
 3439 002e B3F9E217 		ldrsh	r1, [r3, #2018]
 3440 0032 09B3     		cbz	r1, .L285
2273:src/xeq.c     **** 
 3441              		.loc 1 2273 1 view .LVU932
 3442 0034 70BD     		pop	{r4, r5, r6, pc}
 3443              	.LVL257:
 3444              	.L273:
2261:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
 3445              		.loc 1 2261 3 is_stmt 1 view .LVU933
 3446 0036 0546     		mov	r5, r0
 3447 0038 FFF7FEFF 		bl	retstk_up
 3448              	.LVL258:
2262:src/xeq.c     **** 		raw_set_pc(pc);
 3449              		.loc 1 2262 3 view .LVU934
2262:src/xeq.c     **** 		raw_set_pc(pc);
 3450              		.loc 1 2262 15 is_stmt 0 view .LVU935
 3451 003c 2268     		ldr	r2, [r4]
2262:src/xeq.c     **** 		raw_set_pc(pc);
 3452              		.loc 1 2262 6 view .LVU936
 3453 003e 1649     		ldr	r1, .L286+4
2262:src/xeq.c     **** 		raw_set_pc(pc);
 3454              		.loc 1 2262 14 view .LVU937
 3455 0040 B2F9E237 		ldrsh	r3, [r2, #2018]
ARM GAS  /tmp/cccVhVyH.s 			page 166


2262:src/xeq.c     **** 		raw_set_pc(pc);
 3456              		.loc 1 2262 6 view .LVU938
 3457 0044 0968     		ldr	r1, [r1]
2262:src/xeq.c     **** 		raw_set_pc(pc);
 3458              		.loc 1 2262 14 view .LVU939
 3459 0046 03F10043 		add	r3, r3, #-2147483648
 3460 004a 013B     		subs	r3, r3, #1
 3461              	.LBB1580:
 3462              	.LBB1581:
 284:src/xeq.c     **** }
 3463              		.loc 1 284 2 view .LVU940
 3464 004c 0020     		movs	r0, #0
 3465              	.LBE1581:
 3466              	.LBE1580:
2262:src/xeq.c     **** 		raw_set_pc(pc);
 3467              		.loc 1 2262 6 view .LVU941
 3468 004e 31F81360 		ldrh	r6, [r1, r3, lsl #1]
 3469              	.LVL259:
2263:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
 3470              		.loc 1 2263 3 is_stmt 1 view .LVU942
 3471              	.LBB1583:
 3472              	.LBI1580:
 282:src/xeq.c     **** 	State.pc = pc;
 3473              		.loc 1 282 13 view .LVU943
 3474              	.LBB1582:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3475              		.loc 1 283 2 view .LVU944
 283:src/xeq.c     **** 	update_program_bounds(0);
 3476              		.loc 1 283 11 is_stmt 0 view .LVU945
 3477 0052 A2F8E067 		strh	r6, [r2, #2016]	@ movhi
 284:src/xeq.c     **** }
 3478              		.loc 1 284 2 is_stmt 1 view .LVU946
 3479 0056 FFF7FEFF 		bl	update_program_bounds
 3480              	.LVL260:
 284:src/xeq.c     **** }
 3481              		.loc 1 284 2 is_stmt 0 view .LVU947
 3482              	.LBE1582:
 3483              	.LBE1583:
2265:src/xeq.c     **** 			if (incpc())
 3484              		.loc 1 2265 3 is_stmt 1 view .LVU948
2265:src/xeq.c     **** 			if (incpc())
 3485              		.loc 1 2265 6 is_stmt 0 view .LVU949
 3486 005a 002D     		cmp	r5, #0
 3487 005c E6D0     		beq	.L274
2265:src/xeq.c     **** 			if (incpc())
 3488              		.loc 1 2265 16 discriminator 1 view .LVU950
 3489 005e 3046     		mov	r0, r6
 3490 0060 FFF7FEFF 		bl	getprog
 3491              	.LVL261:
2265:src/xeq.c     **** 			if (incpc())
 3492              		.loc 1 2265 13 discriminator 1 view .LVU951
 3493 0064 B0F5C17F 		cmp	r0, #386
 3494 0068 E0D0     		beq	.L274
2266:src/xeq.c     **** 				decpc();
 3495              		.loc 1 2266 4 is_stmt 1 view .LVU952
2266:src/xeq.c     **** 				decpc();
 3496              		.loc 1 2266 8 is_stmt 0 view .LVU953
ARM GAS  /tmp/cccVhVyH.s 			page 167


 3497 006a FFF7FEFF 		bl	incpc
 3498              	.LVL262:
2266:src/xeq.c     **** 				decpc();
 3499              		.loc 1 2266 7 view .LVU954
 3500 006e 0028     		cmp	r0, #0
 3501 0070 DCD0     		beq	.L274
2267:src/xeq.c     **** 	}
 3502              		.loc 1 2267 5 is_stmt 1 view .LVU955
 3503 0072 FFF7FEFF 		bl	decpc
 3504              	.LVL263:
 3505 0076 D9E7     		b	.L274
 3506              	.LVL264:
 3507              	.L285:
2271:src/xeq.c     **** 	}
 3508              		.loc 1 2271 3 view .LVU956
 3509              	.LBB1584:
 3510              	.LBI1584:
5188:src/xeq.c     **** 
5189:src/xeq.c     **** 
5190:src/xeq.c     **** /* Handle a command that takes an argument.  The argument is encoded
5191:src/xeq.c     ****  * in the low order bits of the opcode.  We also have to take
5192:src/xeq.c     ****  * account of the indirection flag and various limits.
5193:src/xeq.c     ****  */
5194:src/xeq.c     **** static void rargs(const opcode op) {
5195:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
5196:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
5197:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
5198:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
5199:src/xeq.c     **** 
5200:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5201:src/xeq.c     **** 
5202:src/xeq.c     **** 	process_cmdline();
5203:src/xeq.c     **** 
5204:src/xeq.c     **** 	if (cmd >= NUM_RARG) {
5205:src/xeq.c     **** 		illegal(op);
5206:src/xeq.c     **** 		return;
5207:src/xeq.c     **** 	}
5208:src/xeq.c     **** 	if (isNULL(argcmds[cmd].f)) {
5209:src/xeq.c     **** 		set_lift();
5210:src/xeq.c     **** 		return;
5211:src/xeq.c     **** 	}
5212:src/xeq.c     **** 
5213:src/xeq.c     **** 	if (ind) {
5214:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
5215:src/xeq.c     **** 			// Get the argument by reading a register
5216:src/xeq.c     **** 			int sgn;
5217:src/xeq.c     **** 			unsigned long long int regval;
5218:src/xeq.c     **** 
5219:src/xeq.c     **** 			if (arg > get_reg_limit(RARG_RCL, arg)) {
5220:src/xeq.c     **** 				// Invalid register specified for indirect access
5221:src/xeq.c     **** 				report_err(ERR_RANGE);
5222:src/xeq.c     **** 				return;
5223:src/xeq.c     **** 			}
5224:src/xeq.c     **** 			regval = get_reg_n_int_sgn(arg, &sgn);
5225:src/xeq.c     **** 			if ((regval >> 32) != 0)
5226:src/xeq.c     **** 				goto range;
5227:src/xeq.c     **** 			arg = (unsigned int) regval;
ARM GAS  /tmp/cccVhVyH.s 			page 168


5228:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
5229:src/xeq.c     **** 				// negative arguments address local registers or flags
5230:src/xeq.c     **** 				arg = LOCAL_REG_BASE + arg;
5231:src/xeq.c     **** 			}
5232:src/xeq.c     **** 		} 
5233:src/xeq.c     **** 		else {
5234:src/xeq.c     **** 			// put the top bit back in
5235:src/xeq.c     **** 			arg |= RARG_IND;
5236:src/xeq.c     **** 		}
5237:src/xeq.c     **** 	}
5238:src/xeq.c     **** 	if (argcmds[cmd].reg) {
5239:src/xeq.c     **** 		// Range checking for registers against variable boundary
5240:src/xeq.c     **** 		lim = get_reg_limit(cmd, arg);
5241:src/xeq.c     **** 	}
5242:src/xeq.c     **** 	else if (argcmds[cmd].flag) {
5243:src/xeq.c     **** 		if (LocalRegs == 0)
5244:src/xeq.c     **** 			lim = NUMFLG - 1;
5245:src/xeq.c     **** 		else 
5246:src/xeq.c     **** 			lim = LOCAL_FLAG_BASE + MAX_LOCAL_DIRECT - 1;
5247:src/xeq.c     **** 	}
5248:src/xeq.c     **** 	if (arg > lim) {
5249:src/xeq.c     **** 		// Argument is too large
5250:src/xeq.c     **** range:		report_err(ERR_RANGE);
5251:src/xeq.c     **** 	}
5252:src/xeq.c     **** 	else if (argcmds[cmd].cmplx && arg >= TOPREALREG-1 && arg < NUMREG && (arg & 1)) {
5253:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
5254:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5255:src/xeq.c     **** 	}
5256:src/xeq.c     **** 	else {
5257:src/xeq.c     **** 		// Dispatch the command
5258:src/xeq.c     **** 		FP_RARG fp = (FP_RARG) EXPAND_ADDRESS(argcmds[cmd].f);
5259:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5260:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
5261:src/xeq.c     **** 			if (argcmds[cmd].label) {
5262:src/xeq.c     **** 				XromUserPc = find_label_from(state_pc(), arg, 0);
5263:src/xeq.c     **** 				if (XromUserPc == 0)
5264:src/xeq.c     **** 					return;
5265:src/xeq.c     **** 				if (! Running)
5266:src/xeq.c     **** 					clrretstk();
5267:src/xeq.c     **** 			}
5268:src/xeq.c     **** 			else
5269:src/xeq.c     **** 				XromArg = (unsigned char) arg;
5270:src/xeq.c     **** #else
5271:src/xeq.c     **** 			XromUserPc = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
5272:src/xeq.c     **** 			if (XromUserPc == 0)
5273:src/xeq.c     **** 				return;
5274:src/xeq.c     **** 			if (! Running)
5275:src/xeq.c     **** 				clrretstk();
5276:src/xeq.c     **** #endif
5277:src/xeq.c     **** 			dispatch_xrom(fp);
5278:src/xeq.c     **** 			return;
5279:src/xeq.c     **** 		}
5280:src/xeq.c     **** 		else {
5281:src/xeq.c     **** 			fp(arg, (enum rarg)cmd);
5282:src/xeq.c     **** 		}
5283:src/xeq.c     **** 		if (cmd != RARG_XROM_OUT) {
5284:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
ARM GAS  /tmp/cccVhVyH.s 			page 169


5285:src/xeq.c     **** 			set_lift();
5286:src/xeq.c     **** 		}
5287:src/xeq.c     **** 	}
5288:src/xeq.c     **** }
5289:src/xeq.c     **** 
5290:src/xeq.c     **** static void multi(const opcode op) {
5291:src/xeq.c     **** 	const int cmd = opDBL(op);
5292:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5293:src/xeq.c     **** 
5294:src/xeq.c     **** 	process_cmdline_set_lift();
5295:src/xeq.c     **** 
5296:src/xeq.c     **** 	if (cmd >= NUM_MULTI) {
5297:src/xeq.c     **** 		illegal(op);
5298:src/xeq.c     **** 		return;
5299:src/xeq.c     **** 	}
5300:src/xeq.c     **** 	if (isNULL(multicmds[cmd].f))	// LBL does nothing
5301:src/xeq.c     **** 		return;
5302:src/xeq.c     **** 	else {
5303:src/xeq.c     **** 		FP_MULTI fp = (FP_MULTI) EXPAND_ADDRESS(multicmds[cmd].f);
5304:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5305:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
5306:src/xeq.c     **** 			if (XromUserPc != 0) {
5307:src/xeq.c     **** 				if (! Running)
5308:src/xeq.c     **** 					clrretstk();
5309:src/xeq.c     **** 				dispatch_xrom(fp);
5310:src/xeq.c     **** 			}
5311:src/xeq.c     **** 			return;
5312:src/xeq.c     **** 		}
5313:src/xeq.c     **** 		else {
5314:src/xeq.c     **** 			fp(op, (enum multiops)cmd);
5315:src/xeq.c     **** 			set_lift();
5316:src/xeq.c     **** 		}
5317:src/xeq.c     **** 	}
5318:src/xeq.c     **** }
5319:src/xeq.c     **** 
5320:src/xeq.c     **** 
5321:src/xeq.c     **** 
5322:src/xeq.c     **** /* Main dispatch routine that decodes the top level of the opcode and
5323:src/xeq.c     ****  * goes to the appropriate lower level dispatch routine.
5324:src/xeq.c     ****  */
5325:src/xeq.c     **** void xeq(opcode op) 
5326:src/xeq.c     **** {
5327:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
5328:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
5329:src/xeq.c     **** 	const struct _ustate old = UState;
5330:src/xeq.c     **** 	const unsigned char lift = get_lift();
5331:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
5332:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
5333:src/xeq.c     **** #ifdef INFRARED
5334:src/xeq.c     **** 	int tracing;
5335:src/xeq.c     **** #endif
5336:src/xeq.c     **** 
5337:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
5338:src/xeq.c     **** 	if (op == (OP_NIL | OP_rCLX) || op == (OP_NIL | OP_CLSTK)) {
5339:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
5340:src/xeq.c     **** 		// valid input so no error message will be generated.
5341:src/xeq.c     **** 		CmdLineDot = 0;
ARM GAS  /tmp/cccVhVyH.s 			page 170


5342:src/xeq.c     **** 		Cmdline[0] = '0';
5343:src/xeq.c     **** 		Cmdline[1] = '\0';
5344:src/xeq.c     **** 	}
5345:src/xeq.c     **** #endif
5346:src/xeq.c     **** 
5347:src/xeq.c     **** 	xcopy(save, StackBase, sizeof(save));
5348:src/xeq.c     **** #if defined(CONSOLE)
5349:src/xeq.c     **** 	instruction_count++;
5350:src/xeq.c     **** #endif
5351:src/xeq.c     **** #ifndef REALBUILD
5352:src/xeq.c     **** 	if (State2.trace && ! State2.sst) {
5353:src/xeq.c     **** 		char buf[16];
5354:src/xeq.c     **** 		if (Running)
5355:src/xeq.c     **** 			print_step(op);
5356:src/xeq.c     **** 		else
5357:src/xeq.c     **** 			sprintf(TraceBuffer, "%04X:%s", op, prt(op, buf));
5358:src/xeq.c     **** 		DispMsg = TraceBuffer;
5359:src/xeq.c     **** 	}
5360:src/xeq.c     **** #endif
5361:src/xeq.c     **** #ifdef INFRARED
5362:src/xeq.c     **** #ifdef REALBUILD
5363:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && ! is_xrom() && State2.runmode;
5364:src/xeq.c     **** #else
5365:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && (! is_xrom() || State2.trace) && State2.runmode;
5366:src/xeq.c     **** #endif
5367:src/xeq.c     **** 	Tracing = tracing;
5368:src/xeq.c     **** 	print_trace( op, 0 );
5369:src/xeq.c     **** #endif
5370:src/xeq.c     **** 	Busy = 0;
5371:src/xeq.c     **** 	State2.wascomplex = 0;
5372:src/xeq.c     **** 	if (isDBL(op))
5373:src/xeq.c     **** 		multi(op);
5374:src/xeq.c     **** 	else if (isRARG(op))
5375:src/xeq.c     **** 		rargs(op);
5376:src/xeq.c     **** 	else {
5377:src/xeq.c     **** 		XeqOpCode = (s_opcode) op;
5378:src/xeq.c     **** 		switch (opKIND(op)) {
5379:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
5380:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
5381:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
5382:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
5383:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
5384:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
5385:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
5386:src/xeq.c     **** 		default:	illegal(op);
5387:src/xeq.c     **** 		}
5388:src/xeq.c     **** 	}
5389:src/xeq.c     **** #if INTERRUPT_XROM_TICKS > 0
5390:src/xeq.c     **** 	if (OnKeyTicks >= INTERRUPT_XROM_TICKS) {
5391:src/xeq.c     **** 		report_err(ERR_INTERRUPTED);
5392:src/xeq.c     **** 		while (get_key() >= 0) { } // Empty keyboard buffer
5393:src/xeq.c     **** 	}
5394:src/xeq.c     **** #endif
5395:src/xeq.c     **** 
5396:src/xeq.c     **** 	if (Error != ERR_NONE) {
5397:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
5398:src/xeq.c     **** 		error_message( Error );
ARM GAS  /tmp/cccVhVyH.s 			page 171


5399:src/xeq.c     **** 		// Repair stack and state
5400:src/xeq.c     **** 		// Clear return stack
5401:src/xeq.c     **** 		xcopy(StackBase, save, sizeof(save));
5402:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
5403:src/xeq.c     **** 		UState = old;
5404:src/xeq.c     **** 		State2.state_lift = lift;
5405:src/xeq.c     **** 		raw_set_pc(old_pc);
5406:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
5407:src/xeq.c     **** 		process_cmdline_set_lift();
5408:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
5409:src/xeq.c     **** 		// wrong with the command line, e.g. it had a partially entered fraction
5410:src/xeq.c     **** 		Error = ERR_NONE;
5411:src/xeq.c     **** 		if (Running || XromRunning) {
5412:src/xeq.c     **** #ifndef REALBUILD
5413:src/xeq.c     **** 			if (State2.trace ) {
5414:src/xeq.c     **** 				// Special handling for debug environment
5415:src/xeq.c     **** 				if (XromFlags.xIN) {
5416:src/xeq.c     **** 					// Restore the global return stack
5417:src/xeq.c     **** 					RetStk = XromUserRetStk;
5418:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5419:src/xeq.c     **** 					// Restore private stack to normal stack
5420:src/xeq.c     **** 					if (! XromFlags.mode_double && NumRegs < STACK_SIZE + EXTRA_REG) {
5421:src/xeq.c     **** 						// Need space for double precision stack
5422:src/xeq.c     **** 						cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
5423:src/xeq.c     **** 					}
5424:src/xeq.c     **** 					XromFlags.xIN = 0;		// Clear flag before get_reg_n!
5425:src/xeq.c     **** 					if (Error == ERR_NONE) {
5426:src/xeq.c     **** 						UState.mode_double = 1;
5427:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
5428:src/xeq.c     **** 					}
5429:src/xeq.c     **** 					else
5430:src/xeq.c     **** 						Error = ERR_NONE;	// Not enough RAM, can't restore
5431:src/xeq.c     **** 				}
5432:src/xeq.c     **** 			}
5433:src/xeq.c     **** 			else {
5434:src/xeq.c     **** #endif
5435:src/xeq.c     **** 				unsigned short int pc = state_pc();
5436:src/xeq.c     **** 				if (XromFlags.xIN) {
5437:src/xeq.c     **** 					// Restore state to before xIN
5438:src/xeq.c     **** 					XromFlags.xIN = 0;
5439:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
5440:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
5441:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
5442:src/xeq.c     **** 					// Restore the global return stack
5443:src/xeq.c     **** 					RetStk = XromUserRetStk;
5444:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5445:src/xeq.c     **** 				}
5446:src/xeq.c     **** 				while (isXROM(pc)) {
5447:src/xeq.c     **** 					// Leave XROM
5448:src/xeq.c     **** 					if (RetStkPtr != 0) {
5449:src/xeq.c     **** 						retstk_up();
5450:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
5451:src/xeq.c     **** 					}
5452:src/xeq.c     **** 					if (RetStkPtr == 0)
5453:src/xeq.c     **** 						++pc; // compensate for decpc below
5454:src/xeq.c     **** 				}
5455:src/xeq.c     **** 				raw_set_pc(pc);
ARM GAS  /tmp/cccVhVyH.s 			page 172


5456:src/xeq.c     **** #ifndef REALBUILD
5457:src/xeq.c     **** 			}
5458:src/xeq.c     **** #endif
5459:src/xeq.c     **** 			decpc();		// Back to error instruction
5460:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
5461:src/xeq.c     **** 
5462:src/xeq.c     **** 			set_running_off();
5463:src/xeq.c     **** 		}
5464:src/xeq.c     **** 	} 
5465:src/xeq.c     **** 	reset_volatile_state();
5466:src/xeq.c     **** #ifdef INFRARED
5467:src/xeq.c     **** 	Tracing = tracing;
5468:src/xeq.c     **** 	print_trace( op, 1 );
5469:src/xeq.c     **** #endif
5470:src/xeq.c     **** }
5471:src/xeq.c     **** 
5472:src/xeq.c     **** /* Execute a single step and return.
5473:src/xeq.c     ****  */
5474:src/xeq.c     **** static void xeq_single(void) {
5475:src/xeq.c     **** 	const opcode op = getprog(state_pc());
5476:src/xeq.c     **** 
5477:src/xeq.c     **** 	incpc();
5478:src/xeq.c     **** 	xeq(op);
5479:src/xeq.c     **** }
5480:src/xeq.c     **** 
5481:src/xeq.c     **** /* Continue execution trough xrom code
5482:src/xeq.c     ****  */
5483:src/xeq.c     **** #ifdef REALBUILD
5484:src/xeq.c     **** void xeq_xrom(void) {
5485:src/xeq.c     **** #else
5486:src/xeq.c     **** static void xeq_xrom2(void) {
5487:src/xeq.c     **** #endif
5488:src/xeq.c     **** 	int count = 0;
5489:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
5490:src/xeq.c     **** 	 * we break free.
5491:src/xeq.c     **** 	 */
5492:src/xeq.c     **** 	  while (!Pause && is_xrom() && RetStkPtr != 0) {
5493:src/xeq.c     **** 		XromRunning = 1;
5494:src/xeq.c     **** 		xeq_single();
5495:src/xeq.c     **** 		XromRunning = 0;
5496:src/xeq.c     **** 		if ((++count & 31) == 0)
5497:src/xeq.c     **** 			busy();
5498:src/xeq.c     **** 		  if (Pause)
5499:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
5500:src/xeq.c     **** 			// Switch to Running mode to force continued execution.
5501:src/xeq.c     **** 			Running = 1;
5502:src/xeq.c     **** 		
5503:src/xeq.c     **** 	}
5504:src/xeq.c     **** }
5505:src/xeq.c     **** 
5506:src/xeq.c     **** #ifndef REALBUILD
5507:src/xeq.c     **** void xeq_xrom(void) {
5508:src/xeq.c     **** 	// We split the routine in two parts for debugging only
5509:src/xeq.c     **** 	if (! State2.trace)
5510:src/xeq.c     **** 		xeq_xrom2();
5511:src/xeq.c     **** }
5512:src/xeq.c     **** #endif
ARM GAS  /tmp/cccVhVyH.s 			page 173


5513:src/xeq.c     **** 
5514:src/xeq.c     **** /* Check to see if we're running a program and if so execute it
5515:src/xeq.c     ****  * for a while.
5516:src/xeq.c     ****  *
5517:src/xeq.c     ****  */
5518:src/xeq.c     **** 
5519:src/xeq.c     **** /*
5520:src/xeq.c     **** 'Pause' is true if Pause is non-zero, i.e., if the pause is still running.
5521:src/xeq.c     **** */
5522:src/xeq.c     ****  void xeqprog(void) 
5523:src/xeq.c     ****  {
5524:src/xeq.c     ****    int state = 0;
5525:src/xeq.c     ****    if (Running || Pause) {
5526:src/xeq.c     **** 
5527:src/xeq.c     **** #if !(defined(CONSOLE)) && !(defined(DM42))
5528:src/xeq.c     ****      long long last_ticker = Ticker;
5529:src/xeq.c     ****      state = ((int) last_ticker % (2*TICKS_PER_FLASH) < TICKS_PER_FLASH);
5530:src/xeq.c     **** #else
5531:src/xeq.c     ****      state = 1;
5532:src/xeq.c     **** #endif
5533:src/xeq.c     ****      
5534:src/xeq.c     ****      dot(RCL_annun, state);
5535:src/xeq.c     ****      lcd_refresh();
5536:src/xeq.c     ****      
5537:src/xeq.c     ****      while (! Pause && Running) {
5538:src/xeq.c     ****        xeq_single();
5539:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
5540:src/xeq.c     ****        if (is_key_pressed())
5541:src/xeq.c     **** 	 {
5542:src/xeq.c     **** 	 // Key press or heart beat
5543:src/xeq.c     **** 	 // Note: DM42 doesn't have real heart beat so no flash
5544:src/xeq.c     **** 	 // xeq_xrom(); // Already done by dispatch_xrom()
5545:src/xeq.c     **** 	 break;
5546:src/xeq.c     ****        }
5547:src/xeq.c     ****      }
5548:src/xeq.c     ****    }
5549:src/xeq.c     ****    if (! Running && ! Pause) {	  
5550:src/xeq.c     ****      // Program has terminated
5551:src/xeq.c     ****      clr_dot(RCL_annun);
5552:src/xeq.c     ****      ShowRPN = 1; // display() may turn it off again
5553:src/xeq.c     ****      lcd_refresh(); // put here to turn off the RCL annunciator
5554:src/xeq.c     ****      display(); // turns off RPN if it was freeeeze and returns doing little
5555:src/xeq.c     ****      
5556:src/xeq.c     ****      if (ShowRPN) {
5557:src/xeq.c     ****        set_dot(RPN);
5558:src/xeq.c     ****        lcd_refresh(); // RPN
5559:src/xeq.c     ****      }
5560:src/xeq.c     **** #ifndef CONSOLE
5561:src/xeq.c     ****      // Avoid accidental restart with R/S or APD after program ends
5562:src/xeq.c     ****      JustStopped = 1;
5563:src/xeq.c     **** #endif
5564:src/xeq.c     ****    }
5565:src/xeq.c     ****  }
5566:src/xeq.c     **** 
5567:src/xeq.c     **** /* Single step and back step routine
5568:src/xeq.c     ****  */
5569:src/xeq.c     **** void xeq_sst_bst(int kind) 
ARM GAS  /tmp/cccVhVyH.s 			page 174


5570:src/xeq.c     **** {
5571:src/xeq.c     **** 	opcode op;
5572:src/xeq.c     **** 
5573:src/xeq.c     **** 	reset_volatile_state();
5574:src/xeq.c     **** 	if (kind == -1)
5575:src/xeq.c     **** 		decpc();
5576:src/xeq.c     **** 
5577:src/xeq.c     **** 	if (State2.runmode) {
5578:src/xeq.c     **** 		// Display the step
5579:src/xeq.c     **** 		op = getprog(state_pc());
5580:src/xeq.c     **** 		print_step(op);
5581:src/xeq.c     **** 		if (kind == 1) {
5582:src/xeq.c     **** 			// Execute the step on key up
5583:src/xeq.c     **** #ifndef REALBUILD
5584:src/xeq.c     **** 			State2.sst = 1;
5585:src/xeq.c     **** #endif
5586:src/xeq.c     **** 			set_running_on_sst();
5587:src/xeq.c     **** 			incpc();
5588:src/xeq.c     **** 			xeq(op);
5589:src/xeq.c     **** #ifndef REALBUILD
5590:src/xeq.c     **** 			State2.sst = 0;
5591:src/xeq.c     **** #endif
5592:src/xeq.c     **** 			xeq_xrom();  // necessary for code called from XROM
5593:src/xeq.c     **** 			set_running_off_sst();
5594:src/xeq.c     **** 		}
5595:src/xeq.c     **** 	}
5596:src/xeq.c     **** 	else if (kind == 0) {
5597:src/xeq.c     **** 		// Key down in program mode
5598:src/xeq.c     **** 		incpc();
5599:src/xeq.c     **** 		OpCode = 0;
5600:src/xeq.c     **** 	}
5601:src/xeq.c     **** }
5602:src/xeq.c     **** 
5603:src/xeq.c     **** 
5604:src/xeq.c     **** /*
5605:src/xeq.c     ****  *  User command to start or stop execution
5606:src/xeq.c     ****  */
5607:src/xeq.c     **** void op_rs(enum nilop op) {
5608:src/xeq.c     **** #ifndef REALBUILD
5609:src/xeq.c     **** 	// This is for debugging purposes only
5610:src/xeq.c     **** 	// STOP does not appear in XROM normally
5611:src/xeq.c     **** 	if (is_xrom()) {
5612:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
5613:src/xeq.c     **** 			Running = XromRunning = 0;
5614:src/xeq.c     **** 		}
5615:src/xeq.c     **** 		else {
5616:src/xeq.c     **** 			xeq_xrom2();
5617:src/xeq.c     **** 		}
5618:src/xeq.c     **** 		return;
5619:src/xeq.c     **** 	}
5620:src/xeq.c     **** #endif
5621:src/xeq.c     **** 	if (Running)
5622:src/xeq.c     **** 		set_running_off();
5623:src/xeq.c     **** 	else {
5624:src/xeq.c     **** 		set_running_on();
5625:src/xeq.c     **** 		if (RetStkPtr == 0)
5626:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
ARM GAS  /tmp/cccVhVyH.s 			page 175


5627:src/xeq.c     **** 	}
5628:src/xeq.c     **** }
5629:src/xeq.c     **** 
5630:src/xeq.c     **** 
5631:src/xeq.c     **** /* 
5632:src/xeq.c     ****  *  The following needs to be done each time before any user input is processed.
5633:src/xeq.c     ****  *  On the hardware, RAM is volatile and these pointers and structures need valid values!
5634:src/xeq.c     ****  */
5635:src/xeq.c     **** void xeq_init_contexts(void) {
5636:src/xeq.c     **** 	/*
5637:src/xeq.c     **** 	 *  Compute the sizes of the various memory portions
5638:src/xeq.c     **** 	 */
5639:src/xeq.c     **** 	short int s;
5640:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
5641:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
5642:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
5643:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
5644:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
5645:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
5646:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
5647:src/xeq.c     **** 
5648:src/xeq.c     **** 	/*
5649:src/xeq.c     **** 	 *  Initialise our standard contexts.
5650:src/xeq.c     **** 	 *  We bump the digits for internal calculations.
5651:src/xeq.c     **** 	 */
5652:src/xeq.c     **** 	decContextDefault(&Ctx, DEC_INIT_BASE);
5653:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
5654:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
5655:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
5656:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
5657:src/xeq.c     **** }
5658:src/xeq.c     **** 
5659:src/xeq.c     **** 
5660:src/xeq.c     **** 
5661:src/xeq.c     **** #ifdef INCLUDE_PLOTTING
5662:src/xeq.c     **** /*
5663:src/xeq.c     ****  *  Plotting commands
5664:src/xeq.c     ****  *
5665:src/xeq.c     ****  *  The plot buffer is a range of registers that is treated as pixel data
5666:src/xeq.c     ****  *  The first byte contains the length of the buffer in columns (bytes)
5667:src/xeq.c     ****  */
5668:src/xeq.c     **** 
5669:src/xeq.c     **** /*
5670:src/xeq.c     ****  *  Check register range and return a pointer to the plot data.
5671:src/xeq.c     ****  */
5672:src/xeq.c     **** unsigned char *plot_check_range( int arg, int width, int height )
5673:src/xeq.c     **** {
5674:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
5675:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
5676:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
5677:src/xeq.c     **** 	int bytes;
5678:src/xeq.c     **** 
5679:src/xeq.c     **** 	if ( width == 0 ) {
5680:src/xeq.c     **** 		width = (int) *p;
5681:src/xeq.c     **** 		height = (int) p[ 1 ];
5682:src/xeq.c     **** 	}
5683:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 176


5684:src/xeq.c     **** 	/*
5685:src/xeq.c     **** 	 *  Compute total number of bytes
5686:src/xeq.c     **** 	 */
5687:src/xeq.c     **** 	bytes = 2 + width * height;
5688:src/xeq.c     **** 
5689:src/xeq.c     **** 	/*
5690:src/xeq.c     **** 	 *  Check if we have enough room
5691:src/xeq.c     **** 	 */
5692:src/xeq.c     **** 	if ( width > PAPER_WIDTH || arg + ( bytes + n - 1 ) / n > lim ) {
5693:src/xeq.c     **** 		report_err( ERR_RANGE );
5694:src/xeq.c     **** 		return (unsigned char *) NULL;
5695:src/xeq.c     **** 	}
5696:src/xeq.c     **** 	return p;
5697:src/xeq.c     **** }
5698:src/xeq.c     **** 
5699:src/xeq.c     **** /*
5700:src/xeq.c     ****  * Set up for graphical object display.
5701:src/xeq.c     ****  */
5702:src/xeq.c     **** void cmdplotdisplay( unsigned int arg, enum rarg op )
5703:src/xeq.c     **** {
5704:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
5705:src/xeq.c     **** 		DispPlot = arg + 1;
5706:src/xeq.c     **** 		frozen_display();
5707:src/xeq.c     **** 	}
5708:src/xeq.c     **** }
5709:src/xeq.c     **** 
5710:src/xeq.c     **** /*
5711:src/xeq.c     ****  *  Initialize a block of registers to act as a buffer for plotting
5712:src/xeq.c     ****  *  X contains the maximum width (<= 0 is default: 166)
5713:src/xeq.c     ****  */
5714:src/xeq.c     **** void cmdplotinit( unsigned int arg, enum rarg op )
5715:src/xeq.c     **** {
5716:src/xeq.c     **** 	int sgnx, sgny;
5717:src/xeq.c     **** 	int width = (int) getX_int_sgn( &sgnx );
5718:src/xeq.c     **** 	int height = (int) get_reg_n_int_sgn( regY_idx, &sgny ); 
5719:src/xeq.c     **** 	unsigned char *p;
5720:src/xeq.c     **** 	
5721:src/xeq.c     **** 	if ( sgnx || width == 0 ) {
5722:src/xeq.c     **** 		width = PAPER_WIDTH;
5723:src/xeq.c     **** 	}
5724:src/xeq.c     **** 	if ( sgny || height == 0 ) {
5725:src/xeq.c     **** 		height = 1;
5726:src/xeq.c     **** 	}
5727:src/xeq.c     **** 	else {
5728:src/xeq.c     **** 		/*
5729:src/xeq.c     **** 		 *  Make height count the byte rows
5730:src/xeq.c     **** 		 */
5731:src/xeq.c     **** 		height = ( height + 7 ) >> 3;
5732:src/xeq.c     **** 	}
5733:src/xeq.c     **** 
5734:src/xeq.c     **** 	p = plot_check_range( arg, width, height );
5735:src/xeq.c     **** 	if ( p != NULL ) {
5736:src/xeq.c     **** 		*p++ = (unsigned char) width;
5737:src/xeq.c     **** 		*p++ = (unsigned char) height;
5738:src/xeq.c     **** 		xset( p, 0, width * height );
5739:src/xeq.c     **** 	}
5740:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 177


5741:src/xeq.c     **** 
5742:src/xeq.c     **** /*
5743:src/xeq.c     ****  *  Return the width and height of the plotting block
5744:src/xeq.c     ****  */
5745:src/xeq.c     **** void cmdplotdim( unsigned int arg, enum rarg op )
5746:src/xeq.c     **** {
5747:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5748:src/xeq.c     **** 	if ( p != NULL ) {
5749:src/xeq.c     **** 		lift2_if_enabled();
5750:src/xeq.c     **** 		setX_int_sgn( p[ 0 ], 0 ); // width
5751:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
5752:src/xeq.c     **** 	}
5753:src/xeq.c     **** }
5754:src/xeq.c     **** 
5755:src/xeq.c     **** /*
5756:src/xeq.c     ****  *  All pixel related commands
5757:src/xeq.c     ****  *  X is the horizontal position 0..width
5758:src/xeq.c     ****  *  Y is the vertical position 0..7
5759:src/xeq.c     ****  */
5760:src/xeq.c     **** void cmdplotpixel( unsigned int arg, enum rarg op )
5761:src/xeq.c     **** {
5762:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5763:src/xeq.c     **** 	if ( p != NULL ) {
5764:src/xeq.c     **** 		/*
5765:src/xeq.c     **** 		 *  Get row from Y
5766:src/xeq.c     **** 		 */
5767:src/xeq.c     **** 		int sgn;
5768:src/xeq.c     **** 		unsigned int row = (unsigned int) get_reg_n_int_sgn( regY_idx, &sgn );
5769:src/xeq.c     **** 		int pix = 0;
5770:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
5771:src/xeq.c     **** 			/*
5772:src/xeq.c     **** 			 *  Row is OK, get column from X
5773:src/xeq.c     **** 			 */
5774:src/xeq.c     **** 			unsigned int width = (unsigned int) *p;
5775:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
5776:src/xeq.c     **** 			if ( sgn == 0 && column < width ) {
5777:src/xeq.c     **** 				/*
5778:src/xeq.c     **** 				 *  Modify the bit in the correct byte
5779:src/xeq.c     **** 				 */
5780:src/xeq.c     **** 				pix = 1 << ( row & 7 );
5781:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
5782:src/xeq.c     **** 
5783:src/xeq.c     **** 				if ( op == RARG_PLOT_SETPIX ) {
5784:src/xeq.c     **** 					*p |= pix;
5785:src/xeq.c     **** 				}
5786:src/xeq.c     **** 				else if ( op == RARG_PLOT_CLRPIX ) {
5787:src/xeq.c     **** 					*p &= ~pix;
5788:src/xeq.c     **** 				}
5789:src/xeq.c     **** 				else if ( op == RARG_PLOT_FLIPPIX ) {
5790:src/xeq.c     **** 					*p ^= pix;
5791:src/xeq.c     **** 				}
5792:src/xeq.c     **** 			}
5793:src/xeq.c     **** 		}
5794:src/xeq.c     **** 		if ( op == RARG_PLOT_ISSET ) {
5795:src/xeq.c     **** 			fin_tst( *p & pix );
5796:src/xeq.c     **** 		}
5797:src/xeq.c     **** 	}
ARM GAS  /tmp/cccVhVyH.s 			page 178


5798:src/xeq.c     **** }
5799:src/xeq.c     **** #endif
5800:src/xeq.c     **** 
5801:src/xeq.c     **** 
5802:src/xeq.c     **** /*
5803:src/xeq.c     ****  *  We don't allow some commands from a running program
5804:src/xeq.c     ****  */
5805:src/xeq.c     **** int not_running(void) {
5806:src/xeq.c     **** 	if ( Running ) {
5807:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5808:src/xeq.c     **** 		return 0;
5809:src/xeq.c     **** 	}
5810:src/xeq.c     **** 	return 1;
5811:src/xeq.c     **** }
5812:src/xeq.c     **** 
5813:src/xeq.c     **** /*
5814:src/xeq.c     ****  *  Handle the Running Flag
5815:src/xeq.c     ****  */
5816:src/xeq.c     **** void set_running_off_sst() {
5817:src/xeq.c     **** 	Running = 0;
5818:src/xeq.c     **** }
5819:src/xeq.c     **** 
5820:src/xeq.c     **** void set_running_on_sst() {
5821:src/xeq.c     **** 	Running = 1;
5822:src/xeq.c     **** }
5823:src/xeq.c     **** 
5824:src/xeq.c     **** void set_running_off() {
 3511              		.loc 1 5824 6 view .LVU957
 3512              	.LBB1585:
5825:src/xeq.c     **** 	set_running_off_sst();
 3513              		.loc 1 5825 2 view .LVU958
 3514              	.LBB1586:
 3515              	.LBI1586:
5816:src/xeq.c     **** 	Running = 0;
 3516              		.loc 1 5816 6 view .LVU959
 3517              	.LBB1587:
5817:src/xeq.c     **** }
 3518              		.loc 1 5817 2 view .LVU960
5817:src/xeq.c     **** }
 3519              		.loc 1 5817 10 is_stmt 0 view .LVU961
 3520 0078 084A     		ldr	r2, .L286+8
 3521 007a 1160     		str	r1, [r2]
 3522              	.LBE1587:
 3523              	.LBE1586:
5826:src/xeq.c     **** 	State.entryp = 0;
 3524              		.loc 1 5826 2 is_stmt 1 view .LVU962
 3525              		.loc 1 5826 15 is_stmt 0 view .LVU963
 3526 007c 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 3527 0080 61F30412 		bfi	r2, r1, #4, #1
 3528 0084 83F8DD27 		strb	r2, [r3, #2013]
5827:src/xeq.c     **** 	dot( RCL_annun, 0);
 3529              		.loc 1 5827 2 is_stmt 1 view .LVU964
 3530              	.LBE1585:
 3531              	.LBE1584:
2273:src/xeq.c     **** 
 3532              		.loc 1 2273 1 is_stmt 0 view .LVU965
 3533 0088 BDE87040 		pop	{r4, r5, r6, lr}
ARM GAS  /tmp/cccVhVyH.s 			page 179


 3534              		.cfi_restore 14
 3535              		.cfi_restore 6
 3536              		.cfi_restore 5
 3537              		.cfi_restore 4
 3538              		.cfi_def_cfa_offset 0
 3539              	.LBB1589:
 3540              	.LBB1588:
 3541              		.loc 1 5827 2 view .LVU966
 3542 008c 8A20     		movs	r0, #138
 3543 008e FFF7FEBF 		b	dot
 3544              	.LVL265:
 3545              	.L287:
 3546 0092 00BF     		.align	2
 3547              	.L286:
 3548 0094 00000000 		.word	main_ram
 3549 0098 00000000 		.word	RetStk
 3550 009c 00000000 		.word	Running
 3551              	.LBE1588:
 3552              	.LBE1589:
 3553              		.cfi_endproc
 3554              	.LFE154:
 3556              		.section	.text.user_pc,"ax",%progbits
 3557              		.align	1
 3558              		.p2align 2,,3
 3559              		.global	user_pc
 3560              		.syntax unified
 3561              		.thumb
 3562              		.thumb_func
 3563              		.fpu fpv4-sp-d16
 3565              	user_pc:
 3566              	.LVL266:
 3567              	.LFB25:
 494:src/xeq.c     **** 	unsigned int n = 1;
 3568              		.loc 1 494 39 is_stmt 1 view -0
 3569              		.cfi_startproc
 3570              		@ args = 0, pretend = 0, frame = 0
 3571              		@ frame_needed = 0, uses_anonymous_args = 0
 3572              		@ link register save eliminated.
 495:src/xeq.c     **** 	unsigned int base;
 3573              		.loc 1 495 2 view .LVU968
 496:src/xeq.c     **** 
 3574              		.loc 1 496 2 view .LVU969
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3575              		.loc 1 499 2 view .LVU970
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3576              		.loc 1 499 5 is_stmt 0 view .LVU971
 3577 0000 0346     		mov	r3, r0
 3578 0002 20B1     		cbz	r0, .L289
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3579              		.loc 1 499 17 discriminator 1 view .LVU972
 3580 0004 820B     		lsrs	r2, r0, #14
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3581              		.loc 1 499 14 discriminator 1 view .LVU973
 3582 0006 032A     		cmp	r2, #3
 3583 0008 01D0     		beq	.L289
 3584 000a FFF7FEBF 		b	user_pc.part.0
 3585              	.LVL267:
ARM GAS  /tmp/cccVhVyH.s 			page 180


 3586              	.L289:
 500:src/xeq.c     **** #else
 3587              		.loc 1 500 3 is_stmt 1 view .LVU974
 500:src/xeq.c     **** #else
 3588              		.loc 1 500 24 is_stmt 0 view .LVU975
 3589 000e C3F30D00 		ubfx	r0, r3, #0, #14
 3590              	.LVL268:
 513:src/xeq.c     **** 
 3591              		.loc 1 513 1 view .LVU976
 3592 0012 7047     		bx	lr
 3593              		.cfi_endproc
 3594              	.LFE25:
 3596              		.section	.text.find_user_pc,"ax",%progbits
 3597              		.align	1
 3598              		.p2align 2,,3
 3599              		.global	find_user_pc
 3600              		.syntax unified
 3601              		.thumb
 3602              		.thumb_func
 3603              		.fpu fpv4-sp-d16
 3605              	find_user_pc:
 3606              	.LVL269:
 3607              	.LFB26:
 517:src/xeq.c     **** 	unsigned int upc = state_pc();
 3608              		.loc 1 517 48 is_stmt 1 view -0
 3609              		.cfi_startproc
 3610              		@ args = 0, pretend = 0, frame = 0
 3611              		@ frame_needed = 0, uses_anonymous_args = 0
 518:src/xeq.c     **** 	const int libp = isLIB(upc);
 3612              		.loc 1 518 2 view .LVU978
 517:src/xeq.c     **** 	unsigned int upc = state_pc();
 3613              		.loc 1 517 48 is_stmt 0 view .LVU979
 3614 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3615              		.cfi_def_cfa_offset 24
 3616              		.cfi_offset 3, -24
 3617              		.cfi_offset 4, -20
 3618              		.cfi_offset 5, -16
 3619              		.cfi_offset 6, -12
 3620              		.cfi_offset 7, -8
 3621              		.cfi_offset 14, -4
 518:src/xeq.c     **** 	const int libp = isLIB(upc);
 3622              		.loc 1 518 21 view .LVU980
 3623 0002 124B     		ldr	r3, .L305
 3624 0004 1B68     		ldr	r3, [r3]
 3625 0006 B3F8E037 		ldrh	r3, [r3, #2016]
 3626              	.LVL270:
 519:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 3627              		.loc 1 519 2 is_stmt 1 view .LVU981
 520:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3628              		.loc 1 520 2 view .LVU982
 520:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3629              		.loc 1 520 43 is_stmt 0 view .LVU983
 3630 000a 13F44044 		ands	r4, r3, #49152
 3631              	.LVL271:
 520:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3632              		.loc 1 520 43 view .LVU984
 3633 000e 1ABF     		itte	ne
ARM GAS  /tmp/cccVhVyH.s 			page 181


 3634 0010 03F44045 		andne	r5, r3, #49152
 3635 0014 0135     		addne	r5, r5, #1
 3636 0016 2546     		moveq	r5, r4
 3637              	.LVL272:
 521:src/xeq.c     **** #ifndef REALBUILD
 3638              		.loc 1 521 2 is_stmt 1 view .LVU985
 523:src/xeq.c     **** 		return addrXROM(target);
 3639              		.loc 1 523 6 is_stmt 0 view .LVU986
 3640 0018 9B0B     		lsrs	r3, r3, #14
 3641              	.LVL273:
 521:src/xeq.c     **** #ifndef REALBUILD
 3642              		.loc 1 521 28 view .LVU987
 3643 001a 003C     		subs	r4, r4, #0
 521:src/xeq.c     **** #ifndef REALBUILD
 3644              		.loc 1 521 28 view .LVU988
 3645 001c 18BF     		it	ne
 3646 001e 0124     		movne	r4, #1
 3647              	.LVL274:
 523:src/xeq.c     **** 		return addrXROM(target);
 3648              		.loc 1 523 2 is_stmt 1 view .LVU989
 523:src/xeq.c     **** 		return addrXROM(target);
 3649              		.loc 1 523 5 is_stmt 0 view .LVU990
 3650 0020 032B     		cmp	r3, #3
 517:src/xeq.c     **** 	unsigned int upc = state_pc();
 3651              		.loc 1 517 48 view .LVU991
 3652 0022 0646     		mov	r6, r0
 523:src/xeq.c     **** 		return addrXROM(target);
 3653              		.loc 1 523 5 view .LVU992
 3654 0024 0ED0     		beq	.L303
 3655              	.LBB1590:
 529:src/xeq.c     **** 			return oldbase;
 3656              		.loc 1 529 7 view .LVU993
 3657 0026 0A4F     		ldr	r7, .L305+4
 3658 0028 05E0     		b	.L298
 3659              	.LVL275:
 3660              	.L300:
 528:src/xeq.c     **** 		if (PcWrapped)
 3661              		.loc 1 528 10 view .LVU994
 3662 002a FFF7FEFF 		bl	do_inc
 3663              	.LVL276:
 529:src/xeq.c     **** 			return oldbase;
 3664              		.loc 1 529 6 view .LVU995
 3665 002e 3B68     		ldr	r3, [r7]
 3666              	.LVL277:
 529:src/xeq.c     **** 			return oldbase;
 3667              		.loc 1 529 3 is_stmt 1 view .LVU996
 3668 0030 0134     		adds	r4, r4, #1
 3669              	.LVL278:
 529:src/xeq.c     **** 			return oldbase;
 3670              		.loc 1 529 6 is_stmt 0 view .LVU997
 3671 0032 2BB9     		cbnz	r3, .L296
 528:src/xeq.c     **** 		if (PcWrapped)
 3672              		.loc 1 528 10 view .LVU998
 3673 0034 0546     		mov	r5, r0
 3674              	.LVL279:
 3675              	.L298:
 527:src/xeq.c     **** 		base = do_inc(oldbase, 0);
ARM GAS  /tmp/cccVhVyH.s 			page 182


 3676              		.loc 1 527 3 is_stmt 1 view .LVU999
 528:src/xeq.c     **** 		if (PcWrapped)
 3677              		.loc 1 528 3 view .LVU1000
 528:src/xeq.c     **** 		if (PcWrapped)
 3678              		.loc 1 528 3 is_stmt 0 view .LVU1001
 3679              	.LBE1590:
 526:src/xeq.c     **** 		const unsigned int oldbase = base;
 3680              		.loc 1 526 8 is_stmt 1 view .LVU1002
 526:src/xeq.c     **** 		const unsigned int oldbase = base;
 3681              		.loc 1 526 8 is_stmt 0 view .LVU1003
 3682 0036 A642     		cmp	r6, r4
 3683              	.LBB1591:
 528:src/xeq.c     **** 		if (PcWrapped)
 3684              		.loc 1 528 10 view .LVU1004
 3685 0038 2846     		mov	r0, r5
 3686 003a 4FF00001 		mov	r1, #0
 3687              	.LBE1591:
 526:src/xeq.c     **** 		const unsigned int oldbase = base;
 3688              		.loc 1 526 8 view .LVU1005
 3689 003e F4D8     		bhi	.L300
 3690              	.LVL280:
 3691              	.L296:
 533:src/xeq.c     **** 
 3692              		.loc 1 533 1 view .LVU1006
 3693 0040 2846     		mov	r0, r5
 3694              	.LVL281:
 533:src/xeq.c     **** 
 3695              		.loc 1 533 1 view .LVU1007
 3696 0042 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3697              	.LVL282:
 3698              	.L303:
 524:src/xeq.c     **** #endif
 3699              		.loc 1 524 3 is_stmt 1 view .LVU1008
 524:src/xeq.c     **** #endif
 3700              		.loc 1 524 10 is_stmt 0 view .LVU1009
 3701 0044 40F44045 		orr	r5, r0, #49152
 3702              	.LVL283:
 533:src/xeq.c     **** 
 3703              		.loc 1 533 1 view .LVU1010
 3704 0048 2846     		mov	r0, r5
 3705              	.LVL284:
 533:src/xeq.c     **** 
 3706              		.loc 1 533 1 view .LVU1011
 3707 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3708              	.LVL285:
 3709              	.L306:
 533:src/xeq.c     **** 
 3710              		.loc 1 533 1 view .LVU1012
 3711              		.align	2
 3712              	.L305:
 3713 004c 00000000 		.word	main_ram
 3714 0050 00000000 		.word	PcWrapped
 3715              		.cfi_endproc
 3716              	.LFE26:
 3718              		.section	.text.report_err,"ax",%progbits
 3719              		.align	1
 3720              		.p2align 2,,3
ARM GAS  /tmp/cccVhVyH.s 			page 183


 3721              		.global	report_err
 3722              		.syntax unified
 3723              		.thumb
 3724              		.thumb_func
 3725              		.fpu fpv4-sp-d16
 3727              	report_err:
 3728              	.LVL286:
 3729              	.LFB28:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3730              		.loc 1 546 38 is_stmt 1 view -0
 3731              		.cfi_startproc
 3732              		@ args = 0, pretend = 0, frame = 0
 3733              		@ frame_needed = 0, uses_anonymous_args = 0
 547:src/xeq.c     **** 		Error = e;
 3734              		.loc 1 547 2 view .LVU1014
 547:src/xeq.c     **** 		Error = e;
 3735              		.loc 1 547 12 is_stmt 0 view .LVU1015
 3736 0000 064A     		ldr	r2, .L313
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3737              		.loc 1 546 38 view .LVU1016
 3738 0002 10B5     		push	{r4, lr}
 3739              		.cfi_def_cfa_offset 8
 3740              		.cfi_offset 4, -8
 3741              		.cfi_offset 14, -4
 547:src/xeq.c     **** 		Error = e;
 3742              		.loc 1 547 12 view .LVU1017
 3743 0004 1468     		ldr	r4, [r2]
 547:src/xeq.c     **** 		Error = e;
 3744              		.loc 1 547 5 view .LVU1018
 3745 0006 0CB9     		cbnz	r4, .L310
 3746              	.LVL287:
 3747              	.LBB1594:
 3748              	.LBI1594:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3749              		.loc 1 546 5 is_stmt 1 view .LVU1019
 3750              	.LBB1595:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3751              		.loc 1 548 3 view .LVU1020
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3752              		.loc 1 548 9 is_stmt 0 view .LVU1021
 3753 0008 1060     		str	r0, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3754              		.loc 1 549 3 is_stmt 1 view .LVU1022
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3755              		.loc 1 549 6 is_stmt 0 view .LVU1023
 3756 000a 10B1     		cbz	r0, .L312
 3757              	.LVL288:
 3758              	.L310:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3759              		.loc 1 549 6 view .LVU1024
 3760              	.LBE1595:
 3761              	.LBE1594:
 554:src/xeq.c     **** }
 3762              		.loc 1 554 9 view .LVU1025
 3763 000c 0124     		movs	r4, #1
 555:src/xeq.c     **** 
 3764              		.loc 1 555 1 view .LVU1026
ARM GAS  /tmp/cccVhVyH.s 			page 184


 3765 000e 2046     		mov	r0, r4
 3766              	.LVL289:
 555:src/xeq.c     **** 
 3767              		.loc 1 555 1 view .LVU1027
 3768 0010 10BD     		pop	{r4, pc}
 3769              	.LVL290:
 3770              	.L312:
 3771              	.LBB1597:
 3772              	.LBB1596:
 550:src/xeq.c     **** 			return 0;
 3773              		.loc 1 550 4 is_stmt 1 view .LVU1028
 3774 0012 FFF7FEFF 		bl	error_message
 3775              	.LVL291:
 551:src/xeq.c     **** 		}
 3776              		.loc 1 551 4 view .LVU1029
 551:src/xeq.c     **** 		}
 3777              		.loc 1 551 4 is_stmt 0 view .LVU1030
 3778              	.LBE1596:
 3779              	.LBE1597:
 555:src/xeq.c     **** 
 3780              		.loc 1 555 1 view .LVU1031
 3781 0016 2046     		mov	r0, r4
 3782 0018 10BD     		pop	{r4, pc}
 3783              	.L314:
 3784 001a 00BF     		.align	2
 3785              	.L313:
 3786 001c 00000000 		.word	Error
 3787              		.cfi_endproc
 3788              	.LFE28:
 3790              		.section	.text.report_warn,"ax",%progbits
 3791              		.align	1
 3792              		.p2align 2,,3
 3793              		.global	report_warn
 3794              		.syntax unified
 3795              		.thumb
 3796              		.thumb_func
 3797              		.fpu fpv4-sp-d16
 3799              	report_warn:
 3800              	.LVL292:
 3801              	.LFB29:
 560:src/xeq.c     **** 	if (Running) {
 3802              		.loc 1 560 39 is_stmt 1 view -0
 3803              		.cfi_startproc
 3804              		@ args = 0, pretend = 0, frame = 0
 3805              		@ frame_needed = 0, uses_anonymous_args = 0
 561:src/xeq.c     **** 		return report_err(e);
 3806              		.loc 1 561 2 view .LVU1033
 561:src/xeq.c     **** 		return report_err(e);
 3807              		.loc 1 561 6 is_stmt 0 view .LVU1034
 3808 0000 114B     		ldr	r3, .L321
 560:src/xeq.c     **** 	if (Running) {
 3809              		.loc 1 560 39 view .LVU1035
 3810 0002 70B5     		push	{r4, r5, r6, lr}
 3811              		.cfi_def_cfa_offset 16
 3812              		.cfi_offset 4, -16
 3813              		.cfi_offset 5, -12
 3814              		.cfi_offset 6, -8
ARM GAS  /tmp/cccVhVyH.s 			page 185


 3815              		.cfi_offset 14, -4
 561:src/xeq.c     **** 		return report_err(e);
 3816              		.loc 1 561 5 view .LVU1036
 3817 0004 1D68     		ldr	r5, [r3]
 560:src/xeq.c     **** 	if (Running) {
 3818              		.loc 1 560 39 view .LVU1037
 3819 0006 0446     		mov	r4, r0
 561:src/xeq.c     **** 		return report_err(e);
 3820              		.loc 1 561 5 view .LVU1038
 3821 0008 5DB1     		cbz	r5, .L316
 562:src/xeq.c     **** 	}
 3822              		.loc 1 562 3 is_stmt 1 view .LVU1039
 3823              	.LVL293:
 3824              	.LBB1606:
 3825              	.LBI1606:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3826              		.loc 1 546 5 view .LVU1040
 3827              	.LBB1607:
 547:src/xeq.c     **** 		Error = e;
 3828              		.loc 1 547 2 view .LVU1041
 547:src/xeq.c     **** 		Error = e;
 3829              		.loc 1 547 12 is_stmt 0 view .LVU1042
 3830 000a 104B     		ldr	r3, .L321+4
 3831 000c 1D68     		ldr	r5, [r3]
 547:src/xeq.c     **** 		Error = e;
 3832              		.loc 1 547 5 view .LVU1043
 3833 000e 15B1     		cbz	r5, .L317
 3834              	.L319:
 554:src/xeq.c     **** }
 3835              		.loc 1 554 9 view .LVU1044
 3836 0010 0125     		movs	r5, #1
 3837              	.LVL294:
 3838              	.L315:
 554:src/xeq.c     **** }
 3839              		.loc 1 554 9 view .LVU1045
 3840              	.LBE1607:
 3841              	.LBE1606:
 571:src/xeq.c     **** 
 3842              		.loc 1 571 1 view .LVU1046
 3843 0012 2846     		mov	r0, r5
 3844 0014 70BD     		pop	{r4, r5, r6, pc}
 3845              	.LVL295:
 3846              	.L317:
 3847              	.LBB1611:
 3848              	.LBB1610:
 3849              	.LBB1608:
 3850              	.LBI1608:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3851              		.loc 1 546 5 is_stmt 1 view .LVU1047
 3852              	.LBB1609:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3853              		.loc 1 548 3 view .LVU1048
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3854              		.loc 1 548 9 is_stmt 0 view .LVU1049
 3855 0016 1860     		str	r0, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3856              		.loc 1 549 3 is_stmt 1 view .LVU1050
ARM GAS  /tmp/cccVhVyH.s 			page 186


 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3857              		.loc 1 549 6 is_stmt 0 view .LVU1051
 3858 0018 0028     		cmp	r0, #0
 3859 001a F9D1     		bne	.L319
 550:src/xeq.c     **** 			return 0;
 3860              		.loc 1 550 4 is_stmt 1 view .LVU1052
 3861 001c FFF7FEFF 		bl	error_message
 3862              	.LVL296:
 551:src/xeq.c     **** 		}
 3863              		.loc 1 551 4 view .LVU1053
 551:src/xeq.c     **** 		}
 3864              		.loc 1 551 11 is_stmt 0 view .LVU1054
 3865 0020 F7E7     		b	.L315
 3866              	.LVL297:
 3867              	.L316:
 551:src/xeq.c     **** 		}
 3868              		.loc 1 551 11 view .LVU1055
 3869              	.LBE1609:
 3870              	.LBE1608:
 3871              	.LBE1610:
 3872              	.LBE1611:
 3873              	.LBB1612:
 3874              	.LBI1612:
 560:src/xeq.c     **** 	if (Running) {
 3875              		.loc 1 560 5 is_stmt 1 view .LVU1056
 3876              	.LBB1613:
 564:src/xeq.c     **** #ifndef CONSOLE
 3877              		.loc 1 564 2 view .LVU1057
 3878 0022 FFF7FEFF 		bl	error_message
 3879              	.LVL298:
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3880              		.loc 1 566 2 view .LVU1058
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3881              		.loc 1 566 21 is_stmt 0 view .LVU1059
 3882 0026 0A4A     		ldr	r2, .L321+8
 567:src/xeq.c     **** 	ShowRPN = 1;
 3883              		.loc 1 567 16 view .LVU1060
 3884 0028 0A4E     		ldr	r6, .L321+12
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3885              		.loc 1 566 21 view .LVU1061
 3886 002a D17D     		ldrb	r1, [r2, #23]	@ zero_extendqisi2
 568:src/xeq.c     **** #endif
 3887              		.loc 1 568 10 view .LVU1062
 3888 002c 0A48     		ldr	r0, .L321+16
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3889              		.loc 1 566 21 view .LVU1063
 3890 002e 65F30411 		bfi	r1, r5, #4, #1
 570:src/xeq.c     **** }
 3891              		.loc 1 570 11 view .LVU1064
 3892 0032 251E     		subs	r5, r4, #0
 567:src/xeq.c     **** 	ShowRPN = 1;
 3893              		.loc 1 567 16 view .LVU1065
 3894 0034 4FF00103 		mov	r3, #1
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3895              		.loc 1 566 21 view .LVU1066
 3896 0038 D175     		strb	r1, [r2, #23]
 567:src/xeq.c     **** 	ShowRPN = 1;
ARM GAS  /tmp/cccVhVyH.s 			page 187


 3897              		.loc 1 567 2 is_stmt 1 view .LVU1067
 570:src/xeq.c     **** }
 3898              		.loc 1 570 11 is_stmt 0 view .LVU1068
 3899 003a 18BF     		it	ne
 3900 003c 0125     		movne	r5, #1
 568:src/xeq.c     **** #endif
 3901              		.loc 1 568 10 view .LVU1069
 3902 003e 0360     		str	r3, [r0]
 567:src/xeq.c     **** 	ShowRPN = 1;
 3903              		.loc 1 567 16 view .LVU1070
 3904 0040 3360     		str	r3, [r6]
 568:src/xeq.c     **** #endif
 3905              		.loc 1 568 2 is_stmt 1 view .LVU1071
 570:src/xeq.c     **** }
 3906              		.loc 1 570 2 view .LVU1072
 3907              	.LVL299:
 570:src/xeq.c     **** }
 3908              		.loc 1 570 2 is_stmt 0 view .LVU1073
 3909              	.LBE1613:
 3910              	.LBE1612:
 571:src/xeq.c     **** 
 3911              		.loc 1 571 1 view .LVU1074
 3912 0042 2846     		mov	r0, r5
 3913 0044 70BD     		pop	{r4, r5, r6, pc}
 3914              	.LVL300:
 3915              	.L322:
 571:src/xeq.c     **** 
 3916              		.loc 1 571 1 view .LVU1075
 3917 0046 00BF     		.align	2
 3918              	.L321:
 3919 0048 00000000 		.word	Running
 3920 004c 00000000 		.word	Error
 3921 0050 00000000 		.word	StateWhileOn
 3922 0054 00000000 		.word	JustDisplayed
 3923 0058 00000000 		.word	ShowRPN
 3924              		.cfi_endproc
 3925              	.LFE29:
 3927              		.section	.text.bad_mode_error,"ax",%progbits
 3928              		.align	1
 3929              		.p2align 2,,3
 3930              		.global	bad_mode_error
 3931              		.syntax unified
 3932              		.thumb
 3933              		.thumb_func
 3934              		.fpu fpv4-sp-d16
 3936              	bad_mode_error:
 3937              	.LFB30:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 3938              		.loc 1 575 27 is_stmt 1 view -0
 3939              		.cfi_startproc
 3940              		@ args = 0, pretend = 0, frame = 0
 3941              		@ frame_needed = 0, uses_anonymous_args = 0
 3942              		@ link register save eliminated.
 576:src/xeq.c     **** }
 3943              		.loc 1 576 2 view .LVU1077
 3944              	.LVL301:
 3945              	.LBB1618:
ARM GAS  /tmp/cccVhVyH.s 			page 188


 3946              	.LBI1618:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3947              		.loc 1 546 5 view .LVU1078
 3948              	.LBB1619:
 547:src/xeq.c     **** 		Error = e;
 3949              		.loc 1 547 2 view .LVU1079
 547:src/xeq.c     **** 		Error = e;
 3950              		.loc 1 547 12 is_stmt 0 view .LVU1080
 3951 0000 024B     		ldr	r3, .L325
 547:src/xeq.c     **** 		Error = e;
 3952              		.loc 1 547 5 view .LVU1081
 3953 0002 1A68     		ldr	r2, [r3]
 3954 0004 0AB9     		cbnz	r2, .L323
 3955              	.LVL302:
 3956              	.LBB1620:
 3957              	.LBI1620:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3958              		.loc 1 546 5 is_stmt 1 view .LVU1082
 3959              	.LBB1621:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3960              		.loc 1 548 3 view .LVU1083
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3961              		.loc 1 548 9 is_stmt 0 view .LVU1084
 3962 0006 0D22     		movs	r2, #13
 3963 0008 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3964              		.loc 1 549 3 is_stmt 1 view .LVU1085
 3965              	.LVL303:
 3966              	.L323:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3967              		.loc 1 549 3 is_stmt 0 view .LVU1086
 3968              	.LBE1621:
 3969              	.LBE1620:
 3970              	.LBE1619:
 3971              	.LBE1618:
 577:src/xeq.c     **** 
 3972              		.loc 1 577 1 view .LVU1087
 3973 000a 7047     		bx	lr
 3974              	.L326:
 3975              		.align	2
 3976              	.L325:
 3977 000c 00000000 		.word	Error
 3978              		.cfi_endproc
 3979              	.LFE30:
 3981              		.section	.text.cmderr,"ax",%progbits
 3982              		.align	1
 3983              		.p2align 2,,3
 3984              		.global	cmderr
 3985              		.syntax unified
 3986              		.thumb
 3987              		.thumb_func
 3988              		.fpu fpv4-sp-d16
 3990              	cmderr:
 3991              	.LVL304:
 3992              	.LFB31:
 581:src/xeq.c     **** 	report_err(arg);
 3993              		.loc 1 581 45 is_stmt 1 view -0
ARM GAS  /tmp/cccVhVyH.s 			page 189


 3994              		.cfi_startproc
 3995              		@ args = 0, pretend = 0, frame = 0
 3996              		@ frame_needed = 0, uses_anonymous_args = 0
 3997              		@ link register save eliminated.
 582:src/xeq.c     **** }
 3998              		.loc 1 582 2 view .LVU1089
 3999              	.LBB1626:
 4000              	.LBB1627:
 547:src/xeq.c     **** 		Error = e;
 4001              		.loc 1 547 12 is_stmt 0 view .LVU1090
 4002 0000 034A     		ldr	r2, .L332
 547:src/xeq.c     **** 		Error = e;
 4003              		.loc 1 547 5 view .LVU1091
 4004 0002 1168     		ldr	r1, [r2]
 4005              	.LVL305:
 547:src/xeq.c     **** 		Error = e;
 4006              		.loc 1 547 5 view .LVU1092
 4007              	.LBE1627:
 4008              	.LBI1626:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4009              		.loc 1 546 5 is_stmt 1 view .LVU1093
 4010              	.LBB1632:
 547:src/xeq.c     **** 		Error = e;
 4011              		.loc 1 547 2 view .LVU1094
 547:src/xeq.c     **** 		Error = e;
 4012              		.loc 1 547 5 is_stmt 0 view .LVU1095
 4013 0004 09B9     		cbnz	r1, .L327
 4014              	.LVL306:
 4015              	.LBB1628:
 4016              	.LBI1628:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4017              		.loc 1 546 5 is_stmt 1 view .LVU1096
 4018              	.LBB1629:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4019              		.loc 1 548 3 view .LVU1097
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4020              		.loc 1 548 9 is_stmt 0 view .LVU1098
 4021 0006 1060     		str	r0, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4022              		.loc 1 549 3 is_stmt 1 view .LVU1099
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4023              		.loc 1 549 6 is_stmt 0 view .LVU1100
 4024 0008 00B1     		cbz	r0, .L331
 4025              	.LVL307:
 4026              	.L327:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4027              		.loc 1 549 6 view .LVU1101
 4028              	.LBE1629:
 4029              	.LBE1628:
 4030              	.LBE1632:
 4031              	.LBE1626:
 583:src/xeq.c     **** 
 4032              		.loc 1 583 1 view .LVU1102
 4033 000a 7047     		bx	lr
 4034              	.LVL308:
 4035              	.L331:
 4036              	.LBB1634:
ARM GAS  /tmp/cccVhVyH.s 			page 190


 4037              	.LBB1633:
 4038              	.LBB1631:
 4039              	.LBB1630:
 550:src/xeq.c     **** 			return 0;
 4040              		.loc 1 550 4 is_stmt 1 view .LVU1103
 4041 000c FFF7FEBF 		b	error_message
 4042              	.LVL309:
 4043              	.L333:
 550:src/xeq.c     **** 			return 0;
 4044              		.loc 1 550 4 is_stmt 0 view .LVU1104
 4045              		.align	2
 4046              	.L332:
 4047 0010 00000000 		.word	Error
 4048              	.LBE1630:
 4049              	.LBE1631:
 4050              	.LBE1633:
 4051              	.LBE1634:
 4052              		.cfi_endproc
 4053              	.LFE31:
 4055              		.section	.text.cmdmsg,"ax",%progbits
 4056              		.align	1
 4057              		.p2align 2,,3
 4058              		.global	cmdmsg
 4059              		.syntax unified
 4060              		.thumb
 4061              		.thumb_func
 4062              		.fpu fpv4-sp-d16
 4064              	cmdmsg:
 4065              	.LVL310:
 4066              	.LFB32:
 587:src/xeq.c     **** 	error_message(arg);
 4067              		.loc 1 587 45 is_stmt 1 view -0
 4068              		.cfi_startproc
 4069              		@ args = 0, pretend = 0, frame = 0
 4070              		@ frame_needed = 0, uses_anonymous_args = 0
 4071              		@ link register save eliminated.
 588:src/xeq.c     **** }
 4072              		.loc 1 588 2 view .LVU1106
 4073 0000 FFF7FEBF 		b	error_message
 4074              	.LVL311:
 588:src/xeq.c     **** }
 4075              		.loc 1 588 2 is_stmt 0 view .LVU1107
 4076              		.cfi_endproc
 4077              	.LFE32:
 4079              		.section	.text.rarg_roundingmode,"ax",%progbits
 4080              		.align	1
 4081              		.p2align 2,,3
 4082              		.global	rarg_roundingmode
 4083              		.syntax unified
 4084              		.thumb
 4085              		.thumb_func
 4086              		.fpu fpv4-sp-d16
 4088              	rarg_roundingmode:
 4089              	.LVL312:
 4090              	.LFB35:
 623:src/xeq.c     **** 	UState.rounding_mode = arg;
 4091              		.loc 1 623 56 is_stmt 1 view -0
ARM GAS  /tmp/cccVhVyH.s 			page 191


 4092              		.cfi_startproc
 4093              		@ args = 0, pretend = 0, frame = 0
 4094              		@ frame_needed = 0, uses_anonymous_args = 0
 4095              		@ link register save eliminated.
 624:src/xeq.c     **** }
 4096              		.loc 1 624 2 view .LVU1109
 624:src/xeq.c     **** }
 4097              		.loc 1 624 23 is_stmt 0 view .LVU1110
 4098 0000 044B     		ldr	r3, .L336
 4099 0002 1B68     		ldr	r3, [r3]
 4100 0004 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 4101 0008 60F30612 		bfi	r2, r0, #4, #3
 4102              	.LVL313:
 624:src/xeq.c     **** }
 4103              		.loc 1 624 23 view .LVU1111
 4104 000c 83F8EB27 		strb	r2, [r3, #2027]
 625:src/xeq.c     **** 
 4105              		.loc 1 625 1 view .LVU1112
 4106 0010 7047     		bx	lr
 4107              	.L337:
 4108 0012 00BF     		.align	2
 4109              	.L336:
 4110 0014 00000000 		.word	main_ram
 4111              		.cfi_endproc
 4112              	.LFE35:
 4114              		.section	.text.packed_from_number,"ax",%progbits
 4115              		.align	1
 4116              		.p2align 2,,3
 4117              		.global	packed_from_number
 4118              		.syntax unified
 4119              		.thumb
 4120              		.thumb_func
 4121              		.fpu fpv4-sp-d16
 4123              	packed_from_number:
 4124              	.LVL314:
 4125              	.LFB36:
 631:src/xeq.c     **** 	decContext ctx64;
 4126              		.loc 1 631 59 is_stmt 1 view -0
 4127              		.cfi_startproc
 4128              		@ args = 0, pretend = 0, frame = 24
 4129              		@ frame_needed = 0, uses_anonymous_args = 0
 632:src/xeq.c     **** 
 4130              		.loc 1 632 2 view .LVU1114
 634:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4131              		.loc 1 634 2 view .LVU1115
 631:src/xeq.c     **** 	decContext ctx64;
 4132              		.loc 1 631 59 is_stmt 0 view .LVU1116
 4133 0000 70B5     		push	{r4, r5, r6, lr}
 4134              		.cfi_def_cfa_offset 16
 4135              		.cfi_offset 4, -16
 4136              		.cfi_offset 5, -12
 4137              		.cfi_offset 6, -8
 4138              		.cfi_offset 14, -4
 4139 0002 86B0     		sub	sp, sp, #24
 4140              		.cfi_def_cfa_offset 40
 631:src/xeq.c     **** 	decContext ctx64;
 4141              		.loc 1 631 59 view .LVU1117
ARM GAS  /tmp/cccVhVyH.s 			page 192


 4142 0004 0446     		mov	r4, r0
 4143 0006 0D46     		mov	r5, r1
 634:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4144              		.loc 1 634 2 view .LVU1118
 4145 0008 6846     		mov	r0, sp
 4146              	.LVL315:
 634:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4147              		.loc 1 634 2 view .LVU1119
 4148 000a 4021     		movs	r1, #64
 4149              	.LVL316:
 634:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4150              		.loc 1 634 2 view .LVU1120
 4151 000c FFF7FEFF 		bl	decContextDefault
 4152              	.LVL317:
 635:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4153              		.loc 1 635 2 is_stmt 1 view .LVU1121
 4154              	.LBB1635:
 4155              	.LBI1635:
 610:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4156              		.loc 1 610 22 view .LVU1122
 4157              	.LBB1636:
 611:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4158              		.loc 1 611 2 view .LVU1123
 616:src/xeq.c     **** }
 4159              		.loc 1 616 2 view .LVU1124
 616:src/xeq.c     **** }
 4160              		.loc 1 616 37 is_stmt 0 view .LVU1125
 4161 0010 084B     		ldr	r3, .L340
 616:src/xeq.c     **** }
 4162              		.loc 1 616 9 view .LVU1126
 4163 0012 094E     		ldr	r6, .L340+4
 616:src/xeq.c     **** }
 4164              		.loc 1 616 37 view .LVU1127
 4165 0014 1B68     		ldr	r3, [r3]
 4166 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4167 001a C3F30213 		ubfx	r3, r3, #4, #3
 4168              	.LBE1636:
 4169              	.LBE1635:
 636:src/xeq.c     **** }
 4170              		.loc 1 636 2 view .LVU1128
 4171 001e 2946     		mov	r1, r5
 635:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4172              		.loc 1 635 14 view .LVU1129
 4173 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4174 0022 8DF80C30 		strb	r3, [sp, #12]
 636:src/xeq.c     **** }
 4175              		.loc 1 636 2 is_stmt 1 view .LVU1130
 4176 0026 2046     		mov	r0, r4
 4177 0028 6A46     		mov	r2, sp
 4178 002a FFF7FEFF 		bl	decimal64FromNumber
 4179              	.LVL318:
 637:src/xeq.c     **** 
 4180              		.loc 1 637 1 is_stmt 0 view .LVU1131
 4181 002e 06B0     		add	sp, sp, #24
 4182              		.cfi_def_cfa_offset 16
 4183              		@ sp needed
 4184 0030 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/cccVhVyH.s 			page 193


 4185              	.LVL319:
 4186              	.L341:
 637:src/xeq.c     **** 
 4187              		.loc 1 637 1 view .LVU1132
 4188 0032 00BF     		.align	2
 4189              	.L340:
 4190 0034 00000000 		.word	main_ram
 4191 0038 00000000 		.word	.LANCHOR1
 4192              		.cfi_endproc
 4193              	.LFE36:
 4195              		.section	.text.packed128_from_number,"ax",%progbits
 4196              		.align	1
 4197              		.p2align 2,,3
 4198              		.global	packed128_from_number
 4199              		.syntax unified
 4200              		.thumb
 4201              		.thumb_func
 4202              		.fpu fpv4-sp-d16
 4204              	packed128_from_number:
 4205              	.LVL320:
 4206              	.LFB37:
 639:src/xeq.c     **** 	decContext ctx128;
 4207              		.loc 1 639 63 is_stmt 1 view -0
 4208              		.cfi_startproc
 4209              		@ args = 0, pretend = 0, frame = 24
 4210              		@ frame_needed = 0, uses_anonymous_args = 0
 640:src/xeq.c     **** 
 4211              		.loc 1 640 2 view .LVU1134
 642:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4212              		.loc 1 642 2 view .LVU1135
 639:src/xeq.c     **** 	decContext ctx128;
 4213              		.loc 1 639 63 is_stmt 0 view .LVU1136
 4214 0000 70B5     		push	{r4, r5, r6, lr}
 4215              		.cfi_def_cfa_offset 16
 4216              		.cfi_offset 4, -16
 4217              		.cfi_offset 5, -12
 4218              		.cfi_offset 6, -8
 4219              		.cfi_offset 14, -4
 4220 0002 86B0     		sub	sp, sp, #24
 4221              		.cfi_def_cfa_offset 40
 639:src/xeq.c     **** 	decContext ctx128;
 4222              		.loc 1 639 63 view .LVU1137
 4223 0004 0446     		mov	r4, r0
 4224 0006 0D46     		mov	r5, r1
 642:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4225              		.loc 1 642 2 view .LVU1138
 4226 0008 6846     		mov	r0, sp
 4227              	.LVL321:
 642:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4228              		.loc 1 642 2 view .LVU1139
 4229 000a 8021     		movs	r1, #128
 4230              	.LVL322:
 642:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4231              		.loc 1 642 2 view .LVU1140
 4232 000c FFF7FEFF 		bl	decContextDefault
 4233              	.LVL323:
 643:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
ARM GAS  /tmp/cccVhVyH.s 			page 194


 4234              		.loc 1 643 2 is_stmt 1 view .LVU1141
 4235              	.LBB1637:
 4236              	.LBI1637:
 610:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4237              		.loc 1 610 22 view .LVU1142
 4238              	.LBB1638:
 611:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4239              		.loc 1 611 2 view .LVU1143
 616:src/xeq.c     **** }
 4240              		.loc 1 616 2 view .LVU1144
 616:src/xeq.c     **** }
 4241              		.loc 1 616 37 is_stmt 0 view .LVU1145
 4242 0010 084B     		ldr	r3, .L344
 616:src/xeq.c     **** }
 4243              		.loc 1 616 9 view .LVU1146
 4244 0012 094E     		ldr	r6, .L344+4
 616:src/xeq.c     **** }
 4245              		.loc 1 616 37 view .LVU1147
 4246 0014 1B68     		ldr	r3, [r3]
 4247 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4248 001a C3F30213 		ubfx	r3, r3, #4, #3
 4249              	.LBE1638:
 4250              	.LBE1637:
 644:src/xeq.c     **** }
 4251              		.loc 1 644 2 view .LVU1148
 4252 001e 2946     		mov	r1, r5
 643:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4253              		.loc 1 643 15 view .LVU1149
 4254 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4255 0022 8DF80C30 		strb	r3, [sp, #12]
 644:src/xeq.c     **** }
 4256              		.loc 1 644 2 is_stmt 1 view .LVU1150
 4257 0026 2046     		mov	r0, r4
 4258 0028 6A46     		mov	r2, sp
 4259 002a FFF7FEFF 		bl	decimal128FromNumber
 4260              	.LVL324:
 645:src/xeq.c     **** 
 4261              		.loc 1 645 1 is_stmt 0 view .LVU1151
 4262 002e 06B0     		add	sp, sp, #24
 4263              		.cfi_def_cfa_offset 16
 4264              		@ sp needed
 4265 0030 70BD     		pop	{r4, r5, r6, pc}
 4266              	.LVL325:
 4267              	.L345:
 645:src/xeq.c     **** 
 4268              		.loc 1 645 1 view .LVU1152
 4269 0032 00BF     		.align	2
 4270              	.L344:
 4271 0034 00000000 		.word	main_ram
 4272 0038 00000000 		.word	.LANCHOR1
 4273              		.cfi_endproc
 4274              	.LFE37:
 4276              		.section	.text.check_special,"ax",%progbits
 4277              		.align	1
 4278              		.p2align 2,,3
 4279              		.syntax unified
 4280              		.thumb
ARM GAS  /tmp/cccVhVyH.s 			page 195


 4281              		.thumb_func
 4282              		.fpu fpv4-sp-d16
 4284              	check_special:
 4285              	.LVL326:
 4286              	.LFB41:
 684:src/xeq.c     **** 	decNumber y;
 4287              		.loc 1 684 46 is_stmt 1 view -0
 4288              		.cfi_startproc
 4289              		@ args = 0, pretend = 0, frame = 64
 4290              		@ frame_needed = 0, uses_anonymous_args = 0
 685:src/xeq.c     **** 	decimal64 z;
 4291              		.loc 1 685 2 view .LVU1154
 686:src/xeq.c     **** 	decimal128 d;
 4292              		.loc 1 686 2 view .LVU1155
 687:src/xeq.c     **** 	if (is_dblmode()) {
 4293              		.loc 1 687 2 view .LVU1156
 688:src/xeq.c     **** 		packed128_from_number(&d, x);
 4294              		.loc 1 688 2 view .LVU1157
 4295              	.LBB1655:
 4296              	.LBI1655:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4297              		.loc 1 1121 5 view .LVU1158
 4298              	.LBB1656:
1122:src/xeq.c     **** }
 4299              		.loc 1 1122 2 view .LVU1159
1122:src/xeq.c     **** }
 4300              		.loc 1 1122 24 is_stmt 0 view .LVU1160
 4301 0000 274B     		ldr	r3, .L360
 4302 0002 1B68     		ldr	r3, [r3]
 4303              	.LBE1656:
 4304              	.LBE1655:
 684:src/xeq.c     **** 	decNumber y;
 4305              		.loc 1 684 46 view .LVU1161
 4306 0004 00B5     		push	{lr}
 4307              		.cfi_def_cfa_offset 4
 4308              		.cfi_offset 14, -4
 4309              	.LBB1658:
 4310              	.LBB1657:
1122:src/xeq.c     **** }
 4311              		.loc 1 1122 24 view .LVU1162
 4312 0006 B3F8E827 		ldrh	r2, [r3, #2024]
 4313 000a 44F20103 		movw	r3, #16385
 4314              	.LBE1657:
 4315              	.LBE1658:
 688:src/xeq.c     **** 		packed128_from_number(&d, x);
 4316              		.loc 1 688 5 view .LVU1163
 4317 000e 1340     		ands	r3, r3, r2
 4318 0010 B3F5804F 		cmp	r3, #16384
 684:src/xeq.c     **** 	decNumber y;
 4319              		.loc 1 684 46 view .LVU1164
 4320 0014 91B0     		sub	sp, sp, #68
 4321              		.cfi_def_cfa_offset 72
 684:src/xeq.c     **** 	decNumber y;
 4322              		.loc 1 684 46 view .LVU1165
 4323 0016 0146     		mov	r1, r0
 688:src/xeq.c     **** 		packed128_from_number(&d, x);
 4324              		.loc 1 688 5 view .LVU1166
ARM GAS  /tmp/cccVhVyH.s 			page 196


 4325 0018 0FD0     		beq	.L358
 694:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4326              		.loc 1 694 3 is_stmt 1 view .LVU1167
 4327 001a 01A8     		add	r0, sp, #4
 4328              	.LVL327:
 694:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4329              		.loc 1 694 3 is_stmt 0 view .LVU1168
 4330 001c FFF7FEFF 		bl	packed_from_number
 4331              	.LVL328:
 695:src/xeq.c     **** 	}
 4332              		.loc 1 695 3 is_stmt 1 view .LVU1169
 4333 0020 01A8     		add	r0, sp, #4
 4334 0022 07A9     		add	r1, sp, #28
 4335 0024 FFF7FEFF 		bl	decimal64ToNumber
 4336              	.LVL329:
 697:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4337              		.loc 1 697 2 view .LVU1170
 697:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4338              		.loc 1 697 5 is_stmt 0 view .LVU1171
 4339 0028 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4340 002c 13F0700F 		tst	r3, #112
 4341 0030 0FD1     		bne	.L349
 4342              	.L351:
 708:src/xeq.c     **** }
 4343              		.loc 1 708 9 view .LVU1172
 4344 0032 0020     		movs	r0, #0
 4345              	.L346:
 709:src/xeq.c     **** 
 4346              		.loc 1 709 1 view .LVU1173
 4347 0034 11B0     		add	sp, sp, #68
 4348              		.cfi_remember_state
 4349              		.cfi_def_cfa_offset 4
 4350              		@ sp needed
 4351 0036 5DF804FB 		ldr	pc, [sp], #4
 4352              	.LVL330:
 4353              	.L358:
 4354              		.cfi_restore_state
 689:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4355              		.loc 1 689 3 is_stmt 1 view .LVU1174
 4356 003a 03A8     		add	r0, sp, #12
 4357              	.LVL331:
 689:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4358              		.loc 1 689 3 is_stmt 0 view .LVU1175
 4359 003c FFF7FEFF 		bl	packed128_from_number
 4360              	.LVL332:
 690:src/xeq.c     **** 	}
 4361              		.loc 1 690 3 is_stmt 1 view .LVU1176
 4362 0040 03A8     		add	r0, sp, #12
 4363 0042 07A9     		add	r1, sp, #28
 4364 0044 FFF7FEFF 		bl	decimal128ToNumber
 4365              	.LVL333:
 697:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4366              		.loc 1 697 2 view .LVU1177
 697:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4367              		.loc 1 697 5 is_stmt 0 view .LVU1178
 4368 0048 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4369 004c 13F0700F 		tst	r3, #112
ARM GAS  /tmp/cccVhVyH.s 			page 197


 4370 0050 EFD0     		beq	.L351
 4371              	.L349:
 698:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4372              		.loc 1 698 3 is_stmt 1 view .LVU1179
 4373              	.LVL334:
 4374              	.LBB1659:
 4375              	.LBI1659:
3559:src/xeq.c     **** 	unsigned short mask;
 4376              		.loc 1 3559 5 view .LVU1180
 4377              	.LBB1660:
3560:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 4378              		.loc 1 3560 2 view .LVU1181
3561:src/xeq.c     **** 
 4379              		.loc 1 3561 2 view .LVU1182
3561:src/xeq.c     **** 
 4380              		.loc 1 3561 34 is_stmt 0 view .LVU1183
 4381 0052 0DF10201 		add	r1, sp, #2
 4382 0056 6B20     		movs	r0, #107
 4383 0058 FFF7FEFF 		bl	flag_word
 4384              	.LVL335:
3563:src/xeq.c     **** }
 4385              		.loc 1 3563 2 is_stmt 1 view .LVU1184
3563:src/xeq.c     **** }
 4386              		.loc 1 3563 24 is_stmt 0 view .LVU1185
 4387 005c BDF80230 		ldrh	r3, [sp, #2]
 4388 0060 0288     		ldrh	r2, [r0]
 4389              	.LBE1660:
 4390              	.LBE1659:
 698:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4391              		.loc 1 698 6 view .LVU1186
 4392 0062 1A42     		tst	r2, r3
 4393 0064 E5D1     		bne	.L351
 699:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4394              		.loc 1 699 4 is_stmt 1 view .LVU1187
 699:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4395              		.loc 1 699 8 is_stmt 0 view .LVU1188
 4396 0066 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 699:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4397              		.loc 1 699 7 view .LVU1189
 4398 006a 13F0300F 		tst	r3, #48
 4399 006e 06D0     		beq	.L352
 700:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 4400              		.loc 1 700 5 is_stmt 1 view .LVU1190
 4401              	.LVL336:
 4402              	.LBB1661:
 4403              	.LBI1661:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4404              		.loc 1 546 5 view .LVU1191
 4405              	.LBB1662:
 547:src/xeq.c     **** 		Error = e;
 4406              		.loc 1 547 2 view .LVU1192
 547:src/xeq.c     **** 		Error = e;
 4407              		.loc 1 547 12 is_stmt 0 view .LVU1193
 4408 0070 0C4B     		ldr	r3, .L360+4
 547:src/xeq.c     **** 		Error = e;
 4409              		.loc 1 547 5 view .LVU1194
 4410 0072 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/cccVhVyH.s 			page 198


 4411              	.LBB1663:
 4412              	.LBB1664:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4413              		.loc 1 548 9 view .LVU1195
 4414 0074 0120     		movs	r0, #1
 4415              	.LBE1664:
 4416              	.LBE1663:
 547:src/xeq.c     **** 		Error = e;
 4417              		.loc 1 547 5 view .LVU1196
 4418 0076 002A     		cmp	r2, #0
 4419 0078 DCD1     		bne	.L346
 4420              	.LVL337:
 4421              	.LBB1666:
 4422              	.LBI1663:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4423              		.loc 1 546 5 is_stmt 1 view .LVU1197
 4424              	.LBB1665:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4425              		.loc 1 548 3 view .LVU1198
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4426              		.loc 1 548 9 is_stmt 0 view .LVU1199
 4427 007a 1860     		str	r0, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4428              		.loc 1 549 3 is_stmt 1 view .LVU1200
 4429 007c DAE7     		b	.L346
 4430              	.LVL338:
 4431              	.L352:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4432              		.loc 1 549 3 is_stmt 0 view .LVU1201
 4433              	.LBE1665:
 4434              	.LBE1666:
 4435              	.LBE1662:
 4436              	.LBE1661:
 701:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4437              		.loc 1 701 9 is_stmt 1 view .LVU1202
 701:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4438              		.loc 1 701 12 is_stmt 0 view .LVU1203
 4439 007e 13F0800F 		tst	r3, #128
 4440              	.LBB1667:
 4441              	.LBB1668:
 547:src/xeq.c     **** 		Error = e;
 4442              		.loc 1 547 12 view .LVU1204
 4443 0082 084B     		ldr	r3, .L360+4
 547:src/xeq.c     **** 		Error = e;
 4444              		.loc 1 547 5 view .LVU1205
 4445 0084 1A68     		ldr	r2, [r3]
 4446              	.LBE1668:
 4447              	.LBE1667:
 701:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4448              		.loc 1 701 12 view .LVU1206
 4449 0086 04D1     		bne	.L359
 704:src/xeq.c     **** 			return 1;
 4450              		.loc 1 704 5 is_stmt 1 view .LVU1207
 4451              	.LVL339:
 4452              	.LBB1672:
 4453              	.LBI1672:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/cccVhVyH.s 			page 199


 4454              		.loc 1 546 5 view .LVU1208
 4455              	.LBB1673:
 547:src/xeq.c     **** 		Error = e;
 4456              		.loc 1 547 2 view .LVU1209
 547:src/xeq.c     **** 		Error = e;
 4457              		.loc 1 547 5 is_stmt 0 view .LVU1210
 4458 0088 42B9     		cbnz	r2, .L356
 4459              	.LVL340:
 4460              	.LBB1674:
 4461              	.LBI1674:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4462              		.loc 1 546 5 is_stmt 1 view .LVU1211
 4463              	.LBB1675:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4464              		.loc 1 548 3 view .LVU1212
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4465              		.loc 1 548 9 is_stmt 0 view .LVU1213
 4466 008a 0422     		movs	r2, #4
 4467 008c 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4468              		.loc 1 549 3 is_stmt 1 view .LVU1214
 4469              	.LBE1675:
 4470              	.LBE1674:
 4471              	.LBE1673:
 4472              	.LBE1672:
 705:src/xeq.c     **** 		}
 4473              		.loc 1 705 11 is_stmt 0 view .LVU1215
 4474 008e 0120     		movs	r0, #1
 4475 0090 D0E7     		b	.L346
 4476              	.LVL341:
 4477              	.L359:
 702:src/xeq.c     **** 			else
 4478              		.loc 1 702 5 is_stmt 1 view .LVU1216
 4479              	.LBB1676:
 4480              	.LBI1667:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4481              		.loc 1 546 5 view .LVU1217
 4482              	.LBB1671:
 547:src/xeq.c     **** 		Error = e;
 4483              		.loc 1 547 2 view .LVU1218
 547:src/xeq.c     **** 		Error = e;
 4484              		.loc 1 547 5 is_stmt 0 view .LVU1219
 4485 0092 1AB9     		cbnz	r2, .L356
 4486              	.LVL342:
 4487              	.LBB1669:
 4488              	.LBI1669:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4489              		.loc 1 546 5 is_stmt 1 view .LVU1220
 4490              	.LBB1670:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4491              		.loc 1 548 3 view .LVU1221
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4492              		.loc 1 548 9 is_stmt 0 view .LVU1222
 4493 0094 0522     		movs	r2, #5
 4494 0096 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4495              		.loc 1 549 3 is_stmt 1 view .LVU1223
ARM GAS  /tmp/cccVhVyH.s 			page 200


 4496              	.LBE1670:
 4497              	.LBE1669:
 4498              	.LBE1671:
 4499              	.LBE1676:
 705:src/xeq.c     **** 		}
 4500              		.loc 1 705 11 is_stmt 0 view .LVU1224
 4501 0098 0120     		movs	r0, #1
 4502 009a CBE7     		b	.L346
 4503              	.LVL343:
 4504              	.L356:
 705:src/xeq.c     **** 		}
 4505              		.loc 1 705 11 view .LVU1225
 4506 009c 0120     		movs	r0, #1
 4507 009e C9E7     		b	.L346
 4508              	.L361:
 4509              		.align	2
 4510              	.L360:
 4511 00a0 00000000 		.word	main_ram
 4512 00a4 00000000 		.word	Error
 4513              		.cfi_endproc
 4514              	.LFE41:
 4516              		.section	.text.packed_from_packed128,"ax",%progbits
 4517              		.align	1
 4518              		.p2align 2,,3
 4519              		.global	packed_from_packed128
 4520              		.syntax unified
 4521              		.thumb
 4522              		.thumb_func
 4523              		.fpu fpv4-sp-d16
 4525              	packed_from_packed128:
 4526              	.LVL344:
 4527              	.LFB38:
 648:src/xeq.c     **** 	decNumber temp;
 4528              		.loc 1 648 63 is_stmt 1 view -0
 4529              		.cfi_startproc
 4530              		@ args = 0, pretend = 0, frame = 40
 4531              		@ frame_needed = 0, uses_anonymous_args = 0
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 4532              		.loc 1 649 2 view .LVU1227
 650:src/xeq.c     **** }
 4533              		.loc 1 650 2 view .LVU1228
 648:src/xeq.c     **** 	decNumber temp;
 4534              		.loc 1 648 63 is_stmt 0 view .LVU1229
 4535 0000 10B5     		push	{r4, lr}
 4536              		.cfi_def_cfa_offset 8
 4537              		.cfi_offset 4, -8
 4538              		.cfi_offset 14, -4
 4539 0002 8AB0     		sub	sp, sp, #40
 4540              		.cfi_def_cfa_offset 48
 648:src/xeq.c     **** 	decNumber temp;
 4541              		.loc 1 648 63 view .LVU1230
 4542 0004 0446     		mov	r4, r0
 650:src/xeq.c     **** }
 4543              		.loc 1 650 24 view .LVU1231
 4544 0006 0846     		mov	r0, r1
 4545              	.LVL345:
 650:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 201


 4546              		.loc 1 650 24 view .LVU1232
 4547 0008 01A9     		add	r1, sp, #4
 4548              	.LVL346:
 650:src/xeq.c     **** }
 4549              		.loc 1 650 24 view .LVU1233
 4550 000a FFF7FEFF 		bl	decimal128ToNumber
 4551              	.LVL347:
 650:src/xeq.c     **** }
 4552              		.loc 1 650 24 view .LVU1234
 4553 000e 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 4554              		.loc 1 650 2 view .LVU1235
 4555 0010 2046     		mov	r0, r4
 4556 0012 FFF7FEFF 		bl	packed_from_number
 4557              	.LVL348:
 651:src/xeq.c     **** 
 4558              		.loc 1 651 1 view .LVU1236
 4559 0016 0AB0     		add	sp, sp, #40
 4560              		.cfi_def_cfa_offset 8
 4561              		@ sp needed
 4562 0018 10BD     		pop	{r4, pc}
 651:src/xeq.c     **** 
 4563              		.loc 1 651 1 view .LVU1237
 4564              		.cfi_endproc
 4565              	.LFE38:
 4567 001a 00BF     		.section	.text.packed128_from_packed,"ax",%progbits
 4568              		.align	1
 4569              		.p2align 2,,3
 4570              		.global	packed128_from_packed
 4571              		.syntax unified
 4572              		.thumb
 4573              		.thumb_func
 4574              		.fpu fpv4-sp-d16
 4576              	packed128_from_packed:
 4577              	.LVL349:
 4578              	.LFB39:
 654:src/xeq.c     **** 	decNumber temp;
 4579              		.loc 1 654 63 is_stmt 1 view -0
 4580              		.cfi_startproc
 4581              		@ args = 0, pretend = 0, frame = 40
 4582              		@ frame_needed = 0, uses_anonymous_args = 0
 655:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 4583              		.loc 1 655 2 view .LVU1239
 656:src/xeq.c     **** }
 4584              		.loc 1 656 2 view .LVU1240
 654:src/xeq.c     **** 	decNumber temp;
 4585              		.loc 1 654 63 is_stmt 0 view .LVU1241
 4586 0000 10B5     		push	{r4, lr}
 4587              		.cfi_def_cfa_offset 8
 4588              		.cfi_offset 4, -8
 4589              		.cfi_offset 14, -4
 4590 0002 8AB0     		sub	sp, sp, #40
 4591              		.cfi_def_cfa_offset 48
 654:src/xeq.c     **** 	decNumber temp;
 4592              		.loc 1 654 63 view .LVU1242
 4593 0004 0446     		mov	r4, r0
 656:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 202


 4594              		.loc 1 656 27 view .LVU1243
 4595 0006 0846     		mov	r0, r1
 4596              	.LVL350:
 656:src/xeq.c     **** }
 4597              		.loc 1 656 27 view .LVU1244
 4598 0008 01A9     		add	r1, sp, #4
 4599              	.LVL351:
 656:src/xeq.c     **** }
 4600              		.loc 1 656 27 view .LVU1245
 4601 000a FFF7FEFF 		bl	decimal64ToNumber
 4602              	.LVL352:
 656:src/xeq.c     **** }
 4603              		.loc 1 656 27 view .LVU1246
 4604 000e 0146     		mov	r1, r0
 656:src/xeq.c     **** }
 4605              		.loc 1 656 2 view .LVU1247
 4606 0010 2046     		mov	r0, r4
 4607 0012 FFF7FEFF 		bl	packed128_from_number
 4608              	.LVL353:
 657:src/xeq.c     **** 
 4609              		.loc 1 657 1 view .LVU1248
 4610 0016 0AB0     		add	sp, sp, #40
 4611              		.cfi_def_cfa_offset 8
 4612              		@ sp needed
 4613 0018 10BD     		pop	{r4, pc}
 657:src/xeq.c     **** 
 4614              		.loc 1 657 1 view .LVU1249
 4615              		.cfi_endproc
 4616              	.LFE39:
 4618 001a 00BF     		.section	.text.stack_size,"ax",%progbits
 4619              		.align	1
 4620              		.p2align 2,,3
 4621              		.global	stack_size
 4622              		.syntax unified
 4623              		.thumb
 4624              		.thumb_func
 4625              		.fpu fpv4-sp-d16
 4627              	stack_size:
 4628              	.LFB42:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 4629              		.loc 1 712 22 is_stmt 1 view -0
 4630              		.cfi_startproc
 4631              		@ args = 0, pretend = 0, frame = 0
 4632              		@ frame_needed = 0, uses_anonymous_args = 0
 4633              		@ link register save eliminated.
 713:src/xeq.c     **** 		return 4;
 4634              		.loc 1 713 2 view .LVU1251
 713:src/xeq.c     **** 		return 4;
 4635              		.loc 1 713 8 is_stmt 0 view .LVU1252
 4636 0000 0B4B     		ldr	r3, .L372
 4637 0002 1B68     		ldr	r3, [r3]
 713:src/xeq.c     **** 		return 4;
 4638              		.loc 1 713 6 view .LVU1253
 4639 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 4640              		.loc 1 713 5 view .LVU1254
 4641 0008 1207     		lsls	r2, r2, #28
ARM GAS  /tmp/cccVhVyH.s 			page 203


 4642 000a 0ED5     		bpl	.L368
 4643              	.LBB1677:
 4644              	.LBI1677:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 4645              		.loc 1 185 5 is_stmt 1 view .LVU1255
 4646              	.LBB1678:
 186:src/xeq.c     **** }
 4647              		.loc 1 186 2 view .LVU1256
 186:src/xeq.c     **** }
 4648              		.loc 1 186 9 is_stmt 0 view .LVU1257
 4649 000c B3F8E037 		ldrh	r3, [r3, #2016]
 4650              	.LBE1678:
 4651              	.LBE1677:
 713:src/xeq.c     **** 		return 4;
 4652              		.loc 1 713 27 view .LVU1258
 4653 0010 9B0B     		lsrs	r3, r3, #14
 4654 0012 032B     		cmp	r3, #3
 4655 0014 01D0     		beq	.L371
 715:src/xeq.c     **** }
 4656              		.loc 1 715 9 view .LVU1259
 4657 0016 0820     		movs	r0, #8
 716:src/xeq.c     **** 
 4658              		.loc 1 716 1 view .LVU1260
 4659 0018 7047     		bx	lr
 4660              	.L371:
 713:src/xeq.c     **** 		return 4;
 4661              		.loc 1 713 44 discriminator 2 view .LVU1261
 4662 001a 064B     		ldr	r3, .L372+4
 713:src/xeq.c     **** 		return 4;
 4663              		.loc 1 713 41 discriminator 2 view .LVU1262
 4664 001c 93F90130 		ldrsb	r3, [r3, #1]
 4665 0020 002B     		cmp	r3, #0
 714:src/xeq.c     **** 	return 8;
 4666              		.loc 1 714 10 discriminator 2 view .LVU1263
 4667 0022 B4BF     		ite	lt
 4668 0024 0820     		movlt	r0, #8
 4669 0026 0420     		movge	r0, #4
 4670 0028 7047     		bx	lr
 4671              	.L368:
 714:src/xeq.c     **** 	return 8;
 4672              		.loc 1 714 10 view .LVU1264
 4673 002a 0420     		movs	r0, #4
 4674 002c 7047     		bx	lr
 4675              	.L373:
 4676 002e 00BF     		.align	2
 4677              	.L372:
 4678 0030 00000000 		.word	main_ram
 4679 0034 00000000 		.word	XromParams
 4680              		.cfi_endproc
 4681              	.LFE42:
 4683              		.section	.text.copyreg,"ax",%progbits
 4684              		.align	1
 4685              		.p2align 2,,3
 4686              		.global	copyreg
 4687              		.syntax unified
 4688              		.thumb
 4689              		.thumb_func
ARM GAS  /tmp/cccVhVyH.s 			page 204


 4690              		.fpu fpv4-sp-d16
 4692              	copyreg:
 4693              	.LVL354:
 4694              	.LFB45:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 4695              		.loc 1 726 46 is_stmt 1 view -0
 4696              		.cfi_startproc
 4697              		@ args = 0, pretend = 0, frame = 0
 4698              		@ frame_needed = 0, uses_anonymous_args = 0
 4699              		@ link register save eliminated.
 727:src/xeq.c     **** }
 4700              		.loc 1 727 2 view .LVU1266
 4701              	.LBB1679:
 4702              	.LBI1679:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4703              		.loc 1 1121 5 view .LVU1267
 4704              	.LBB1680:
1122:src/xeq.c     **** }
 4705              		.loc 1 1122 2 view .LVU1268
1122:src/xeq.c     **** }
 4706              		.loc 1 1122 24 is_stmt 0 view .LVU1269
 4707 0000 064B     		ldr	r3, .L377
 4708 0002 1B68     		ldr	r3, [r3]
 4709 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 4710 0008 44F20103 		movw	r3, #16385
 4711              	.LBE1680:
 4712              	.LBE1679:
 727:src/xeq.c     **** }
 4713              		.loc 1 727 2 view .LVU1270
 4714 000c 1340     		ands	r3, r3, r2
 4715 000e B3F5804F 		cmp	r3, #16384
 4716 0012 0CBF     		ite	eq
 4717 0014 1022     		moveq	r2, #16
 4718 0016 0822     		movne	r2, #8
 4719 0018 FFF7FEBF 		b	xcopy
 4720              	.LVL355:
 4721              	.L378:
 727:src/xeq.c     **** }
 4722              		.loc 1 727 2 view .LVU1271
 4723              		.align	2
 4724              	.L377:
 4725 001c 00000000 		.word	main_ram
 4726              		.cfi_endproc
 4727              	.LFE45:
 4729              		.section	.text.set_lift,"ax",%progbits
 4730              		.align	1
 4731              		.p2align 2,,3
 4732              		.global	set_lift
 4733              		.syntax unified
 4734              		.thumb
 4735              		.thumb_func
 4736              		.fpu fpv4-sp-d16
 4738              	set_lift:
 4739              	.LFB51:
 767:src/xeq.c     ****     State2.state_lift = 1;
 4740              		.loc 1 767 21 is_stmt 1 view -0
 4741              		.cfi_startproc
ARM GAS  /tmp/cccVhVyH.s 			page 205


 4742              		@ args = 0, pretend = 0, frame = 0
 4743              		@ frame_needed = 0, uses_anonymous_args = 0
 4744              		@ link register save eliminated.
 768:src/xeq.c     **** }
 4745              		.loc 1 768 5 view .LVU1273
 768:src/xeq.c     **** }
 4746              		.loc 1 768 23 is_stmt 0 view .LVU1274
 4747 0000 024A     		ldr	r2, .L380
 4748 0002 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 4749 0004 43F04003 		orr	r3, r3, #64
 4750 0008 D375     		strb	r3, [r2, #23]
 769:src/xeq.c     **** 
 4751              		.loc 1 769 1 view .LVU1275
 4752 000a 7047     		bx	lr
 4753              	.L381:
 4754              		.align	2
 4755              	.L380:
 4756 000c 00000000 		.word	StateWhileOn
 4757              		.cfi_endproc
 4758              	.LFE51:
 4760              		.section	.text.entry_rpn_on_off,"ax",%progbits
 4761              		.align	1
 4762              		.p2align 2,,3
 4763              		.global	entry_rpn_on_off
 4764              		.syntax unified
 4765              		.thumb
 4766              		.thumb_func
 4767              		.fpu fpv4-sp-d16
 4769              	entry_rpn_on_off:
 4770              	.LVL356:
 4771              	.LFB77:
 998:src/xeq.c     ****   switch (op) {
 4772              		.loc 1 998 38 is_stmt 1 view -0
 4773              		.cfi_startproc
 4774              		@ args = 0, pretend = 0, frame = 0
 4775              		@ frame_needed = 0, uses_anonymous_args = 0
 4776              		@ link register save eliminated.
 999:src/xeq.c     ****   case OP_ENTRY_ON:
 4777              		.loc 1 999 3 view .LVU1277
 4778 0000 D628     		cmp	r0, #214
 4779 0002 0BD0     		beq	.L383
 4780 0004 D728     		cmp	r0, #215
 4781 0006 08D1     		bne	.L386
1004:src/xeq.c     ****     return;
 4782              		.loc 1 1004 5 view .LVU1278
 4783 0008 094B     		ldr	r3, .L387
 4784 000a 1B68     		ldr	r3, [r3]
 4785 000c 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 4786 0010 6FF3C712 		bfc	r2, #7, #1
 4787 0014 83F8DD27 		strb	r2, [r3, #2013]
1005:src/xeq.c     ****   default:;
 4788              		.loc 1 1005 5 view .LVU1279
1006:src/xeq.c     ****   }
 4789              		.loc 1 1006 11 view .LVU1280
1008:src/xeq.c     **** #endif
 4790              		.loc 1 1008 1 is_stmt 0 view .LVU1281
 4791 0018 7047     		bx	lr
ARM GAS  /tmp/cccVhVyH.s 			page 206


 4792              	.L386:
 4793 001a 7047     		bx	lr
 4794              	.L383:
1001:src/xeq.c     ****     return;
 4795              		.loc 1 1001 5 is_stmt 1 view .LVU1282
 4796 001c 044B     		ldr	r3, .L387
 4797 001e 1A68     		ldr	r2, [r3]
 4798 0020 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 4799 0024 43F08003 		orr	r3, r3, #128
 4800 0028 82F8DD37 		strb	r3, [r2, #2013]
1002:src/xeq.c     ****   case OP_ENTRY_OFF:
 4801              		.loc 1 1002 5 view .LVU1283
 4802 002c 7047     		bx	lr
 4803              	.L388:
 4804 002e 00BF     		.align	2
 4805              	.L387:
 4806 0030 00000000 		.word	main_ram
 4807              		.cfi_endproc
 4808              	.LFE77:
 4810              		.section	.text.is_dblmode,"ax",%progbits
 4811              		.align	1
 4812              		.p2align 2,,3
 4813              		.global	is_dblmode
 4814              		.syntax unified
 4815              		.thumb
 4816              		.thumb_func
 4817              		.fpu fpv4-sp-d16
 4819              	is_dblmode:
 4820              	.LFB82:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4821              		.loc 1 1121 22 view -0
 4822              		.cfi_startproc
 4823              		@ args = 0, pretend = 0, frame = 0
 4824              		@ frame_needed = 0, uses_anonymous_args = 0
 4825              		@ link register save eliminated.
1122:src/xeq.c     **** }
 4826              		.loc 1 1122 2 view .LVU1285
1122:src/xeq.c     **** }
 4827              		.loc 1 1122 24 is_stmt 0 view .LVU1286
 4828 0000 064B     		ldr	r3, .L390
 4829 0002 1B68     		ldr	r3, [r3]
 4830 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 4831 0008 44F20100 		movw	r0, #16385
 4832 000c 1840     		ands	r0, r0, r3
1123:src/xeq.c     **** 
 4833              		.loc 1 1123 1 view .LVU1287
 4834 000e A0F58040 		sub	r0, r0, #16384
 4835 0012 B0FA80F0 		clz	r0, r0
 4836 0016 4009     		lsrs	r0, r0, #5
 4837 0018 7047     		bx	lr
 4838              	.L391:
 4839 001a 00BF     		.align	2
 4840              	.L390:
 4841 001c 00000000 		.word	main_ram
 4842              		.cfi_endproc
 4843              	.LFE82:
 4845              		.section	.text.is_usrdblmode,"ax",%progbits
ARM GAS  /tmp/cccVhVyH.s 			page 207


 4846              		.align	1
 4847              		.p2align 2,,3
 4848              		.global	is_usrdblmode
 4849              		.syntax unified
 4850              		.thumb
 4851              		.thumb_func
 4852              		.fpu fpv4-sp-d16
 4854              	is_usrdblmode:
 4855              	.LFB83:
1125:src/xeq.c     **** 	if (XromFlags.xIN)
 4856              		.loc 1 1125 25 is_stmt 1 view -0
 4857              		.cfi_startproc
 4858              		@ args = 0, pretend = 0, frame = 0
 4859              		@ frame_needed = 0, uses_anonymous_args = 0
 4860              		@ link register save eliminated.
1126:src/xeq.c     **** 		return XromFlags.mode_double;
 4861              		.loc 1 1126 2 view .LVU1289
1126:src/xeq.c     **** 		return XromFlags.mode_double;
 4862              		.loc 1 1126 6 is_stmt 0 view .LVU1290
 4863 0000 0A4B     		ldr	r3, .L396
1126:src/xeq.c     **** 		return XromFlags.mode_double;
 4864              		.loc 1 1126 5 view .LVU1291
 4865 0002 93F90120 		ldrsb	r2, [r3, #1]
 4866 0006 002A     		cmp	r2, #0
 4867 0008 0CDB     		blt	.L395
1128:src/xeq.c     **** }
 4868              		.loc 1 1128 2 is_stmt 1 view .LVU1292
 4869              	.LBB1681:
 4870              	.LBI1681:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4871              		.loc 1 1121 5 view .LVU1293
 4872              	.LBB1682:
1122:src/xeq.c     **** }
 4873              		.loc 1 1122 2 view .LVU1294
1122:src/xeq.c     **** }
 4874              		.loc 1 1122 24 is_stmt 0 view .LVU1295
 4875 000a 094B     		ldr	r3, .L396+4
 4876 000c 1B68     		ldr	r3, [r3]
 4877 000e B3F8E837 		ldrh	r3, [r3, #2024]
 4878 0012 44F20100 		movw	r0, #16385
 4879 0016 1840     		ands	r0, r0, r3
 4880 0018 A0F58040 		sub	r0, r0, #16384
 4881 001c B0FA80F0 		clz	r0, r0
 4882 0020 4009     		lsrs	r0, r0, #5
 4883              	.LBE1682:
 4884              	.LBE1681:
1129:src/xeq.c     **** 
 4885              		.loc 1 1129 1 view .LVU1296
 4886 0022 7047     		bx	lr
 4887              	.L395:
1127:src/xeq.c     **** 	return is_dblmode();
 4888              		.loc 1 1127 3 is_stmt 1 view .LVU1297
1127:src/xeq.c     **** 	return is_dblmode();
 4889              		.loc 1 1127 19 is_stmt 0 view .LVU1298
 4890 0024 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4891 0026 C0F3C000 		ubfx	r0, r0, #3, #1
 4892 002a 7047     		bx	lr
ARM GAS  /tmp/cccVhVyH.s 			page 208


 4893              	.L397:
 4894              		.align	2
 4895              	.L396:
 4896 002c 00000000 		.word	XromParams
 4897 0030 00000000 		.word	main_ram
 4898              		.cfi_endproc
 4899              	.LFE83:
 4901              		.section	.text.s_to_i,"ax",%progbits
 4902              		.align	1
 4903              		.p2align 2,,3
 4904              		.global	s_to_i
 4905              		.syntax unified
 4906              		.thumb
 4907              		.thumb_func
 4908              		.fpu fpv4-sp-d16
 4910              	s_to_i:
 4911              	.LVL357:
 4912              	.LFB84:
1133:src/xeq.c     **** 	int x = 0;
 4913              		.loc 1 1133 27 is_stmt 1 view -0
 4914              		.cfi_startproc
 4915              		@ args = 0, pretend = 0, frame = 0
 4916              		@ frame_needed = 0, uses_anonymous_args = 0
 4917              		@ link register save eliminated.
1134:src/xeq.c     **** 	int neg;
 4918              		.loc 1 1134 2 view .LVU1300
1135:src/xeq.c     **** 
 4919              		.loc 1 1135 2 view .LVU1301
1137:src/xeq.c     **** 		s++;
 4920              		.loc 1 1137 2 view .LVU1302
1133:src/xeq.c     **** 	int x = 0;
 4921              		.loc 1 1133 27 is_stmt 0 view .LVU1303
 4922 0000 10B4     		push	{r4}
 4923              		.cfi_def_cfa_offset 4
 4924              		.cfi_offset 4, -4
1137:src/xeq.c     **** 		s++;
 4925              		.loc 1 1137 6 view .LVU1304
 4926 0002 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
1137:src/xeq.c     **** 		s++;
 4927              		.loc 1 1137 5 view .LVU1305
 4928 0004 2D29     		cmp	r1, #45
 4929 0006 26D0     		beq	.L414
1141:src/xeq.c     **** 			s++;
 4930              		.loc 1 1141 3 is_stmt 1 view .LVU1306
1141:src/xeq.c     **** 			s++;
 4931              		.loc 1 1141 6 is_stmt 0 view .LVU1307
 4932 0008 2B29     		cmp	r1, #43
 4933 000a 18D0     		beq	.L402
 4934              	.LVL358:
1146:src/xeq.c     **** 		const char c = *s++;
 4935              		.loc 1 1146 2 is_stmt 1 view .LVU1308
 4936              	.LBB1683:
1147:src/xeq.c     **** 
 4937              		.loc 1 1147 3 view .LVU1309
1149:src/xeq.c     **** 			break;
 4938              		.loc 1 1149 15 is_stmt 0 view .LVU1310
 4939 000c A1F13003 		sub	r3, r1, #48
ARM GAS  /tmp/cccVhVyH.s 			page 209


1149:src/xeq.c     **** 			break;
 4940              		.loc 1 1149 6 view .LVU1311
 4941 0010 D9B2     		uxtb	r1, r3
 4942 0012 0929     		cmp	r1, #9
1147:src/xeq.c     **** 
 4943              		.loc 1 1147 20 view .LVU1312
 4944 0014 00F10102 		add	r2, r0, #1
 4945              	.LVL359:
1149:src/xeq.c     **** 			break;
 4946              		.loc 1 1149 3 is_stmt 1 view .LVU1313
1149:src/xeq.c     **** 			break;
 4947              		.loc 1 1149 6 is_stmt 0 view .LVU1314
 4948 0018 19D8     		bhi	.L407
 4949              	.LVL360:
 4950              	.L413:
1149:src/xeq.c     **** 			break;
 4951              		.loc 1 1149 6 view .LVU1315
 4952              	.LBE1683:
1143:src/xeq.c     **** 	}
 4953              		.loc 1 1143 7 view .LVU1316
 4954 001a 0024     		movs	r4, #0
 4955              	.LVL361:
 4956              	.L401:
1143:src/xeq.c     **** 	}
 4957              		.loc 1 1143 7 view .LVU1317
 4958 001c 0020     		movs	r0, #0
 4959              	.LVL362:
 4960              	.L404:
 4961              	.LBB1684:
1151:src/xeq.c     **** 	}
 4962              		.loc 1 1151 3 is_stmt 1 view .LVU1318
1147:src/xeq.c     **** 
 4963              		.loc 1 1147 14 is_stmt 0 view .LVU1319
 4964 001e 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 4965              	.LVL363:
1151:src/xeq.c     **** 	}
 4966              		.loc 1 1151 10 view .LVU1320
 4967 0022 00EB8000 		add	r0, r0, r0, lsl #2
 4968              	.LVL364:
1151:src/xeq.c     **** 	}
 4969              		.loc 1 1151 5 view .LVU1321
 4970 0026 03EB4000 		add	r0, r3, r0, lsl #1
 4971              	.LVL365:
1151:src/xeq.c     **** 	}
 4972              		.loc 1 1151 5 view .LVU1322
 4973              	.LBE1684:
1146:src/xeq.c     **** 		const char c = *s++;
 4974              		.loc 1 1146 8 is_stmt 1 view .LVU1323
1146:src/xeq.c     **** 		const char c = *s++;
 4975              		.loc 1 1146 2 view .LVU1324
 4976              	.LBB1685:
1147:src/xeq.c     **** 
 4977              		.loc 1 1147 3 view .LVU1325
1149:src/xeq.c     **** 			break;
 4978              		.loc 1 1149 3 view .LVU1326
1149:src/xeq.c     **** 			break;
 4979              		.loc 1 1149 15 is_stmt 0 view .LVU1327
ARM GAS  /tmp/cccVhVyH.s 			page 210


 4980 002a A1F13003 		sub	r3, r1, #48
1149:src/xeq.c     **** 			break;
 4981              		.loc 1 1149 6 view .LVU1328
 4982 002e D9B2     		uxtb	r1, r3
 4983 0030 0929     		cmp	r1, #9
 4984 0032 F4D9     		bls	.L404
 4985              	.LBE1685:
1153:src/xeq.c     **** 		return -x;
 4986              		.loc 1 1153 2 is_stmt 1 view .LVU1329
1153:src/xeq.c     **** 		return -x;
 4987              		.loc 1 1153 5 is_stmt 0 view .LVU1330
 4988 0034 04B1     		cbz	r4, .L398
 4989 0036 4042     		rsbs	r0, r0, #0
 4990              	.LVL366:
 4991              	.L398:
1156:src/xeq.c     **** 
 4992              		.loc 1 1156 1 view .LVU1331
 4993 0038 5DF8044B 		ldr	r4, [sp], #4
 4994              		.cfi_remember_state
 4995              		.cfi_restore 4
 4996              		.cfi_def_cfa_offset 0
 4997 003c 7047     		bx	lr
 4998              	.LVL367:
 4999              	.L402:
 5000              		.cfi_restore_state
1142:src/xeq.c     **** 		neg = 0;
 5001              		.loc 1 1142 4 is_stmt 1 view .LVU1332
1146:src/xeq.c     **** 		const char c = *s++;
 5002              		.loc 1 1146 2 view .LVU1333
 5003              	.LBB1686:
1147:src/xeq.c     **** 
 5004              		.loc 1 1147 3 view .LVU1334
1147:src/xeq.c     **** 
 5005              		.loc 1 1147 14 is_stmt 0 view .LVU1335
 5006 003e 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
1149:src/xeq.c     **** 			break;
 5007              		.loc 1 1149 15 view .LVU1336
 5008 0040 A1F13003 		sub	r3, r1, #48
1149:src/xeq.c     **** 			break;
 5009              		.loc 1 1149 6 view .LVU1337
 5010 0044 D9B2     		uxtb	r1, r3
 5011 0046 0929     		cmp	r1, #9
1147:src/xeq.c     **** 
 5012              		.loc 1 1147 20 view .LVU1338
 5013 0048 00F10202 		add	r2, r0, #2
 5014              	.LVL368:
1149:src/xeq.c     **** 			break;
 5015              		.loc 1 1149 3 is_stmt 1 view .LVU1339
1149:src/xeq.c     **** 			break;
 5016              		.loc 1 1149 6 is_stmt 0 view .LVU1340
 5017 004c E5D9     		bls	.L413
 5018              	.LVL369:
 5019              	.L407:
1149:src/xeq.c     **** 			break;
 5020              		.loc 1 1149 6 view .LVU1341
 5021 004e 0020     		movs	r0, #0
 5022              	.LBE1686:
ARM GAS  /tmp/cccVhVyH.s 			page 211


1156:src/xeq.c     **** 
 5023              		.loc 1 1156 1 view .LVU1342
 5024 0050 5DF8044B 		ldr	r4, [sp], #4
 5025              		.cfi_remember_state
 5026              		.cfi_restore 4
 5027              		.cfi_def_cfa_offset 0
 5028 0054 7047     		bx	lr
 5029              	.LVL370:
 5030              	.L414:
 5031              		.cfi_restore_state
1138:src/xeq.c     **** 		neg = 1;
 5032              		.loc 1 1138 3 is_stmt 1 view .LVU1343
1139:src/xeq.c     **** 	} else {
 5033              		.loc 1 1139 3 view .LVU1344
1146:src/xeq.c     **** 		const char c = *s++;
 5034              		.loc 1 1146 2 view .LVU1345
 5035              	.LBB1687:
1147:src/xeq.c     **** 
 5036              		.loc 1 1147 3 view .LVU1346
1147:src/xeq.c     **** 
 5037              		.loc 1 1147 14 is_stmt 0 view .LVU1347
 5038 0056 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
1149:src/xeq.c     **** 			break;
 5039              		.loc 1 1149 15 view .LVU1348
 5040 0058 A1F13003 		sub	r3, r1, #48
1149:src/xeq.c     **** 			break;
 5041              		.loc 1 1149 6 view .LVU1349
 5042 005c D9B2     		uxtb	r1, r3
 5043 005e 0929     		cmp	r1, #9
1147:src/xeq.c     **** 
 5044              		.loc 1 1147 20 view .LVU1350
 5045 0060 00F10202 		add	r2, r0, #2
 5046              	.LVL371:
1149:src/xeq.c     **** 			break;
 5047              		.loc 1 1149 3 is_stmt 1 view .LVU1351
1149:src/xeq.c     **** 			break;
 5048              		.loc 1 1149 6 is_stmt 0 view .LVU1352
 5049 0064 F3D8     		bhi	.L407
 5050              	.LBE1687:
1139:src/xeq.c     **** 	} else {
 5051              		.loc 1 1139 7 view .LVU1353
 5052 0066 0124     		movs	r4, #1
 5053 0068 D8E7     		b	.L401
 5054              		.cfi_endproc
 5055              	.LFE84:
 5057 006a 00BF     		.section	.text.digit,"ax",%progbits
 5058              		.align	1
 5059              		.p2align 2,,3
 5060              		.syntax unified
 5061              		.thumb
 5062              		.thumb_func
 5063              		.fpu fpv4-sp-d16
 5065              	digit:
 5066              	.LVL372:
 5067              	.LFB214:
3834:src/xeq.c     **** 	const int intm = is_intmode();
 5068              		.loc 1 3834 35 is_stmt 1 view -0
ARM GAS  /tmp/cccVhVyH.s 			page 212


 5069              		.cfi_startproc
 5070              		@ args = 0, pretend = 0, frame = 0
 5071              		@ frame_needed = 0, uses_anonymous_args = 0
3835:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5072              		.loc 1 3835 2 view .LVU1355
3834:src/xeq.c     **** 	const int intm = is_intmode();
 5073              		.loc 1 3834 35 is_stmt 0 view .LVU1356
 5074 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5075              		.cfi_def_cfa_offset 24
 5076              		.cfi_offset 3, -24
 5077              		.cfi_offset 4, -20
 5078              		.cfi_offset 5, -16
 5079              		.cfi_offset 6, -12
 5080              		.cfi_offset 7, -8
 5081              		.cfi_offset 14, -4
3835:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5082              		.loc 1 3835 19 view .LVU1357
 5083 0002 604E     		ldr	r6, .L461
3838:src/xeq.c     **** 		lim++;
 5084              		.loc 1 3838 13 view .LVU1358
 5085 0004 604C     		ldr	r4, .L461+4
3835:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5086              		.loc 1 3835 19 view .LVU1359
 5087 0006 3368     		ldr	r3, [r6]
3838:src/xeq.c     **** 		lim++;
 5088              		.loc 1 3838 13 view .LVU1360
 5089 0008 94F82020 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
3835:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5090              		.loc 1 3835 19 view .LVU1361
 5091 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 5092              	.LVL373:
3836:src/xeq.c     **** 
 5093              		.loc 1 3836 2 is_stmt 1 view .LVU1362
3838:src/xeq.c     **** 		lim++;
 5094              		.loc 1 3838 2 view .LVU1363
3839:src/xeq.c     **** 	if (intm) {
 5095              		.loc 1 3839 6 is_stmt 0 view .LVU1364
 5096 0010 2D2A     		cmp	r2, #45
 5097 0012 14BF     		ite	ne
 5098 0014 0C27     		movne	r7, #12
 5099 0016 0D27     		moveq	r7, #13
 5100              	.LVL374:
3840:src/xeq.c     **** 		if (c >= int_base()) {
 5101              		.loc 1 3840 2 is_stmt 1 view .LVU1365
3840:src/xeq.c     **** 		if (c >= int_base()) {
 5102              		.loc 1 3840 5 is_stmt 0 view .LVU1366
 5103 0018 DB07     		lsls	r3, r3, #31
 5104              	.LVL375:
3834:src/xeq.c     **** 	const int intm = is_intmode();
 5105              		.loc 1 3834 35 view .LVU1367
 5106 001a 0546     		mov	r5, r0
3840:src/xeq.c     **** 		if (c >= int_base()) {
 5107              		.loc 1 3840 5 view .LVU1368
 5108 001c 79D4     		bmi	.L458
3846:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5109              		.loc 1 3846 3 is_stmt 1 view .LVU1369
3846:src/xeq.c     **** 			report_warn(ERR_DIGIT);
ARM GAS  /tmp/cccVhVyH.s 			page 213


 5110              		.loc 1 3846 6 is_stmt 0 view .LVU1370
 5111 001e 0928     		cmp	r0, #9
 5112 0020 00F28C80 		bhi	.L419
3851:src/xeq.c     **** 			lim = CMDLINELEN;
 5113              		.loc 1 3851 3 is_stmt 1 view .LVU1371
3851:src/xeq.c     **** 			lim = CMDLINELEN;
 5114              		.loc 1 3851 7 is_stmt 0 view .LVU1372
 5115 0024 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3851:src/xeq.c     **** 			lim = CMDLINELEN;
 5116              		.loc 1 3851 6 view .LVU1373
 5117 0026 002B     		cmp	r3, #0
 5118 0028 65D0     		beq	.L420
3852:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5119              		.loc 1 3852 4 is_stmt 1 view .LVU1374
 5120              	.LVL376:
3854:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5121              		.loc 1 3854 4 view .LVU1375
3854:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5122              		.loc 1 3854 8 is_stmt 0 view .LVU1376
 5123 002a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3854:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5124              		.loc 1 3854 7 view .LVU1377
 5125 002c 122A     		cmp	r2, #18
 5126 002e 40F29980 		bls	.L444
 5127              	.LBB1698:
3855:src/xeq.c     **** 
 5128              		.loc 1 3855 5 is_stmt 1 view .LVU1378
3857:src/xeq.c     **** 					p++;
 5129              		.loc 1 3857 9 is_stmt 0 view .LVU1379
 5130 0032 E118     		adds	r1, r4, r3
3855:src/xeq.c     **** 
 5131              		.loc 1 3855 11 view .LVU1380
 5132 0034 2133     		adds	r3, r3, #33
3857:src/xeq.c     **** 					p++;
 5133              		.loc 1 3857 8 view .LVU1381
 5134 0036 91F82110 		ldrb	r1, [r1, #33]	@ zero_extendqisi2
3855:src/xeq.c     **** 
 5135              		.loc 1 3855 11 view .LVU1382
 5136 003a 2344     		add	r3, r3, r4
 5137              	.LVL377:
3857:src/xeq.c     **** 					p++;
 5138              		.loc 1 3857 5 is_stmt 1 view .LVU1383
3857:src/xeq.c     **** 					p++;
 5139              		.loc 1 3857 8 is_stmt 0 view .LVU1384
 5140 003c 2D29     		cmp	r1, #45
3858:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5141              		.loc 1 3858 6 is_stmt 1 view .LVU1385
3859:src/xeq.c     **** 					p[0] = p[1];
 5142              		.loc 1 3859 11 is_stmt 0 view .LVU1386
 5143 003e 5349     		ldr	r1, .L461+8
3858:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5144              		.loc 1 3858 7 view .LVU1387
 5145 0040 08BF     		it	eq
 5146 0042 0133     		addeq	r3, r3, #1
 5147              	.LVL378:
3859:src/xeq.c     **** 					p[0] = p[1];
 5148              		.loc 1 3859 11 is_stmt 1 view .LVU1388
ARM GAS  /tmp/cccVhVyH.s 			page 214


 5149 0044 8B42     		cmp	r3, r1
 5150 0046 05D2     		bcs	.L423
 5151              	.LVL379:
 5152              	.L424:
3860:src/xeq.c     **** 					p++;
 5153              		.loc 1 3860 6 view .LVU1389
3860:src/xeq.c     **** 					p++;
 5154              		.loc 1 3860 11 is_stmt 0 view .LVU1390
 5155 0048 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5156 004a 03F8012B 		strb	r2, [r3], #1
 5157              	.LVL380:
3861:src/xeq.c     **** 				}
 5158              		.loc 1 3861 6 is_stmt 1 view .LVU1391
3859:src/xeq.c     **** 					p[0] = p[1];
 5159              		.loc 1 3859 11 view .LVU1392
 5160 004e 8B42     		cmp	r3, r1
 5161 0050 FAD1     		bne	.L424
 5162 0052 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5163              	.L423:
3863:src/xeq.c     **** 			}
 5164              		.loc 1 3863 5 view .LVU1393
3863:src/xeq.c     **** 			}
 5165              		.loc 1 3863 18 is_stmt 0 view .LVU1394
 5166 0054 013A     		subs	r2, r2, #1
 5167 0056 D2B2     		uxtb	r2, r2
 5168              	.LBE1698:
3852:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5169              		.loc 1 3852 8 view .LVU1395
 5170 0058 1323     		movs	r3, #19
 5171              	.LVL381:
3883:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5172              		.loc 1 3883 2 is_stmt 1 view .LVU1396
3883:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5173              		.loc 1 3883 5 is_stmt 0 view .LVU1397
 5174 005a 9342     		cmp	r3, r2
 5175              	.LBB1699:
3863:src/xeq.c     **** 			}
 5176              		.loc 1 3863 18 view .LVU1398
 5177 005c 2277     		strb	r2, [r4, #28]
 5178              	.LBE1699:
3883:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5179              		.loc 1 3883 5 view .LVU1399
 5180 005e 53DD     		ble	.L441
 5181              	.LVL382:
 5182              	.L428:
3895:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5183              		.loc 1 3895 3 is_stmt 1 view .LVU1400
3895:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5184              		.loc 1 3895 6 is_stmt 0 view .LVU1401
 5185 0060 002D     		cmp	r5, #0
 5186 0062 70D1     		bne	.L430
3895:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5187              		.loc 1 3895 17 discriminator 1 view .LVU1402
 5188 0064 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3895:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5189              		.loc 1 3895 14 discriminator 1 view .LVU1403
 5190 0066 002B     		cmp	r3, #0
ARM GAS  /tmp/cccVhVyH.s 			page 215


 5191 0068 00F08180 		beq	.L431
3896:src/xeq.c     **** 				return;
 5192              		.loc 1 3896 4 is_stmt 1 view .LVU1404
3899:src/xeq.c     **** 				return;
 5193              		.loc 1 3899 4 view .LVU1405
3896:src/xeq.c     **** 				return;
 5194              		.loc 1 3896 15 is_stmt 0 view .LVU1406
 5195 006c A018     		adds	r0, r4, r2
3899:src/xeq.c     **** 				return;
 5196              		.loc 1 3899 7 view .LVU1407
 5197 006e C17F     		ldrb	r1, [r0, #31]	@ zero_extendqisi2
 5198 0070 4439     		subs	r1, r1, #68
 5199 0072 0129     		cmp	r1, #1
 5200 0074 3ED9     		bls	.L415
3907:src/xeq.c     **** 
 5201              		.loc 1 3907 3 is_stmt 1 view .LVU1408
 5202              	.LVL383:
 5203              	.LBB1700:
 5204              	.LBI1700:
2648:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5205              		.loc 1 2648 13 view .LVU1409
 5206              	.LBB1701:
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5207              		.loc 1 2649 2 view .LVU1410
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5208              		.loc 1 2649 23 is_stmt 0 view .LVU1411
 5209 0076 0132     		adds	r2, r2, #1
 5210 0078 D2B2     		uxtb	r2, r2
2650:src/xeq.c     **** }
 5211              		.loc 1 2650 25 view .LVU1412
 5212 007a A118     		adds	r1, r4, r2
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5213              		.loc 1 2649 27 view .LVU1413
 5214 007c 3027     		movs	r7, #48
 5215 007e 80F82070 		strb	r7, [r0, #32]
2650:src/xeq.c     **** }
 5216              		.loc 1 2650 2 is_stmt 1 view .LVU1414
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5217              		.loc 1 2649 23 is_stmt 0 view .LVU1415
 5218 0082 2277     		strb	r2, [r4, #28]
2650:src/xeq.c     **** }
 5219              		.loc 1 2650 25 view .LVU1416
 5220 0084 81F82050 		strb	r5, [r1, #32]
 5221              	.LVL384:
2650:src/xeq.c     **** }
 5222              		.loc 1 2650 25 view .LVU1417
 5223              	.LBE1701:
 5224              	.LBE1700:
3909:src/xeq.c     **** 			exponent_adjusted(1);
 5225              		.loc 1 3909 3 is_stmt 1 view .LVU1418
 5226              	.L442:
 5227              	.L434:
 5228              	.L435:
3910:src/xeq.c     **** 	}
 5229              		.loc 1 3910 4 view .LVU1419
 5230              	.LBB1706:
 5231              	.LBI1706:
ARM GAS  /tmp/cccVhVyH.s 			page 216


2657:src/xeq.c     **** {
 5232              		.loc 1 2657 13 view .LVU1420
 5233              	.LBB1707:
2659:src/xeq.c     **** 	int i;
 5234              		.loc 1 2659 2 view .LVU1421
 5235              	.LBB1708:
 5236              	.LBI1708:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 5237              		.loc 1 1121 5 view .LVU1422
 5238              	.LBB1709:
1122:src/xeq.c     **** }
 5239              		.loc 1 1122 2 view .LVU1423
1122:src/xeq.c     **** }
 5240              		.loc 1 1122 2 is_stmt 0 view .LVU1424
 5241              	.LBE1709:
 5242              	.LBE1708:
2660:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
 5243              		.loc 1 2660 2 is_stmt 1 view .LVU1425
2664:src/xeq.c     **** #endif
 5244              		.loc 1 2664 2 view .LVU1426
2669:src/xeq.c     **** #endif
 5245              		.loc 1 2669 2 view .LVU1427
2674:src/xeq.c     **** #endif
 5246              		.loc 1 2674 2 view .LVU1428
2679:src/xeq.c     **** #endif
 5247              		.loc 1 2679 2 view .LVU1429
2684:src/xeq.c     **** #endif
 5248              		.loc 1 2684 2 view .LVU1430
2689:src/xeq.c     **** #endif
 5249              		.loc 1 2689 2 view .LVU1431
2694:src/xeq.c     **** #endif
 5250              		.loc 1 2694 2 view .LVU1432
2699:src/xeq.c     **** #endif
 5251              		.loc 1 2699 2 view .LVU1433
2704:src/xeq.c     **** #endif
 5252              		.loc 1 2704 2 view .LVU1434
2709:src/xeq.c     **** #endif
 5253              		.loc 1 2709 2 view .LVU1435
2711:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
 5254              		.loc 1 2711 2 view .LVU1436
2712:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
 5255              		.loc 1 2712 2 view .LVU1437
2713:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
 5256              		.loc 1 2713 2 view .LVU1438
2714:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
 5257              		.loc 1 2714 2 view .LVU1439
2715:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
 5258              		.loc 1 2715 2 view .LVU1440
2716:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
 5259              		.loc 1 2716 2 view .LVU1441
2717:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
 5260              		.loc 1 2717 2 view .LVU1442
2718:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
 5261              		.loc 1 2718 2 view .LVU1443
2719:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
 5262              		.loc 1 2719 2 view .LVU1444
2720:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/cccVhVyH.s 			page 217


 5263              		.loc 1 2720 2 view .LVU1445
2722:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
 5264              		.loc 1 2722 2 view .LVU1446
2723:src/xeq.c     **** #else
 5265              		.loc 1 2723 2 view .LVU1447
 5266              	.LBB1712:
 5267              	.LBB1710:
1122:src/xeq.c     **** }
 5268              		.loc 1 1122 24 is_stmt 0 view .LVU1448
 5269 0088 3268     		ldr	r2, [r6]
 5270 008a B2F8E807 		ldrh	r0, [r2, #2024]
 5271              	.LBE1710:
 5272              	.LBE1712:
 5273              	.LBB1713:
3172:src/xeq.c     **** #else
 5274              		.loc 1 3172 9 view .LVU1449
 5275 008e E118     		adds	r1, r4, r3
 5276              	.LBE1713:
2723:src/xeq.c     **** #else
 5277              		.loc 1 2723 8 view .LVU1450
 5278 0090 03F12005 		add	r5, r3, #32
 5279              	.LBB1714:
 5280              	.LBB1711:
1122:src/xeq.c     **** }
 5281              		.loc 1 1122 24 view .LVU1451
 5282 0094 44F20102 		movw	r2, #16385
 5283              	.LBE1711:
 5284              	.LBE1714:
 5285              	.LBB1715:
2843:src/xeq.c     **** 			// Double precision mode
 5286              		.loc 1 2843 6 view .LVU1452
 5287 0098 0240     		ands	r2, r2, r0
 5288              	.LBE1715:
2723:src/xeq.c     **** #else
 5289              		.loc 1 2723 8 view .LVU1453
 5290 009a 2544     		add	r5, r5, r4
 5291              	.LVL385:
2742:src/xeq.c     **** #endif
 5292              		.loc 1 2742 2 is_stmt 1 view .LVU1454
2747:src/xeq.c     **** 
 5293              		.loc 1 2747 2 view .LVU1455
2750:src/xeq.c     **** 		emax = 999;
 5294              		.loc 1 2750 2 view .LVU1456
 5295              	.LBB1716:
2754:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
 5296              		.loc 1 2754 3 view .LVU1457
2755:src/xeq.c     **** 
 5297              		.loc 1 2755 3 view .LVU1458
2757:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
 5298              		.loc 1 2757 3 view .LVU1459
2843:src/xeq.c     **** 			// Double precision mode
 5299              		.loc 1 2843 3 view .LVU1460
2878:src/xeq.c     **** 				}
 5300              		.loc 1 2878 17 is_stmt 0 view .LVU1461
 5301 009c B2F5804F 		cmp	r2, #16384
3172:src/xeq.c     **** #else
 5302              		.loc 1 3172 8 view .LVU1462
ARM GAS  /tmp/cccVhVyH.s 			page 218


 5303 00a0 91F82010 		ldrb	r1, [r1, #32]	@ zero_extendqisi2
2878:src/xeq.c     **** 				}
 5304              		.loc 1 2878 17 view .LVU1463
 5305 00a4 41F2FF72 		movw	r2, #6143
 5306              	.LBE1716:
3186:src/xeq.c     **** #  else
 5307              		.loc 1 3186 3 view .LVU1464
 5308 00a8 05F10107 		add	r7, r5, #1
 5309              	.LBB1717:
2878:src/xeq.c     **** 				}
 5310              		.loc 1 2878 17 view .LVU1465
 5311 00ac 18BF     		it	ne
 5312 00ae 4FF4C072 		movne	r2, #384
 5313 00b2 40F27F16 		movw	r6, #383
 5314              	.LVL386:
2878:src/xeq.c     **** 				}
 5315              		.loc 1 2878 17 view .LVU1466
 5316              	.LBE1717:
3195:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5317              		.loc 1 3195 9 view .LVU1467
 5318 00b6 3846     		mov	r0, r7
 5319              	.LBB1718:
2878:src/xeq.c     **** 				}
 5320              		.loc 1 2878 17 view .LVU1468
 5321 00b8 04BF     		itt	eq
 5322 00ba 1646     		moveq	r6, r2
 5323              	.LVL387:
2878:src/xeq.c     **** 				}
 5324              		.loc 1 2878 17 view .LVU1469
 5325 00bc 4FF4C052 		moveq	r2, #6144
 5326              	.LVL388:
2957:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
 5327              		.loc 1 2957 3 is_stmt 1 view .LVU1470
2973:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
 5328              		.loc 1 2973 8 view .LVU1471
3019:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
 5329              		.loc 1 3019 3 view .LVU1472
3033:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
 5330              		.loc 1 3033 8 view .LVU1473
3073:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
 5331              		.loc 1 3073 3 view .LVU1474
3099:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
 5332              		.loc 1 3099 8 view .LVU1475
3125:src/xeq.c     **** 			if (exp_chs_ds == 0) {
 5333              		.loc 1 3125 8 view .LVU1476
3154:src/xeq.c     **** 				// Limit exponents so sign change is always legal
 5334              		.loc 1 3154 4 view .LVU1477
3161:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
 5335              		.loc 1 3161 9 view .LVU1478
3169:src/xeq.c     **** 					return;
 5336              		.loc 1 3169 5 view .LVU1479
3172:src/xeq.c     **** #else
 5337              		.loc 1 3172 5 view .LVU1480
3178:src/xeq.c     **** 			}
 5338              		.loc 1 3178 11 is_stmt 0 view .LVU1481
 5339 00c0 4429     		cmp	r1, #68
 5340 00c2 18BF     		it	ne
ARM GAS  /tmp/cccVhVyH.s 			page 219


 5341 00c4 1646     		movne	r6, r2
 5342              	.LVL389:
3178:src/xeq.c     **** 			}
 5343              		.loc 1 3178 11 view .LVU1482
 5344              	.LBE1718:
3186:src/xeq.c     **** #  else
 5345              		.loc 1 3186 2 is_stmt 1 view .LVU1483
3195:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5346              		.loc 1 3195 2 view .LVU1484
3195:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5347              		.loc 1 3195 8 view .LVU1485
3195:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5348              		.loc 1 3195 9 is_stmt 0 view .LVU1486
 5349 00c6 FFF7FEFF 		bl	s_to_i
 5350              	.LVL390:
3195:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5351              		.loc 1 3195 8 view .LVU1487
 5352 00ca B042     		cmp	r0, r6
3196:src/xeq.c     **** 			p[i] = p[i + 1];
 5353              		.loc 1 3196 3 view .LVU1488
 5354 00cc 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
3195:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5355              		.loc 1 3195 8 view .LVU1489
 5356 00ce 0FDD     		ble	.L438
 5357              	.L459:
 5358              	.LVL391:
3196:src/xeq.c     **** 			p[i] = p[i + 1];
 5359              		.loc 1 3196 15 is_stmt 1 view .LVU1490
3196:src/xeq.c     **** 			p[i] = p[i + 1];
 5360              		.loc 1 3196 3 is_stmt 0 view .LVU1491
 5361 00d0 2BB1     		cbz	r3, .L440
 5362              	.LVL392:
 5363              	.L447:
3196:src/xeq.c     **** 			p[i] = p[i + 1];
 5364              		.loc 1 3196 3 view .LVU1492
 5365 00d2 3B46     		mov	r3, r7
 5366              	.L437:
3197:src/xeq.c     **** 		CmdLineLength--;
 5367              		.loc 1 3197 4 is_stmt 1 view .LVU1493
3197:src/xeq.c     **** 		CmdLineLength--;
 5368              		.loc 1 3197 9 is_stmt 0 view .LVU1494
 5369 00d4 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5370 00d6 1A70     		strb	r2, [r3]
3196:src/xeq.c     **** 			p[i] = p[i + 1];
 5371              		.loc 1 3196 29 is_stmt 1 view .LVU1495
3196:src/xeq.c     **** 			p[i] = p[i + 1];
 5372              		.loc 1 3196 15 view .LVU1496
3196:src/xeq.c     **** 			p[i] = p[i + 1];
 5373              		.loc 1 3196 3 is_stmt 0 view .LVU1497
 5374 00d8 0133     		adds	r3, r3, #1
 5375 00da 002A     		cmp	r2, #0
 5376 00dc FAD1     		bne	.L437
 5377              	.L440:
3198:src/xeq.c     **** 	}
 5378              		.loc 1 3198 3 is_stmt 1 view .LVU1498
3198:src/xeq.c     **** 	}
 5379              		.loc 1 3198 16 is_stmt 0 view .LVU1499
ARM GAS  /tmp/cccVhVyH.s 			page 220


 5380 00de 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3195:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5381              		.loc 1 3195 9 view .LVU1500
 5382 00e0 3846     		mov	r0, r7
3198:src/xeq.c     **** 	}
 5383              		.loc 1 3198 16 view .LVU1501
 5384 00e2 013B     		subs	r3, r3, #1
 5385 00e4 2377     		strb	r3, [r4, #28]
3195:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5386              		.loc 1 3195 8 is_stmt 1 view .LVU1502
3195:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5387              		.loc 1 3195 9 is_stmt 0 view .LVU1503
 5388 00e6 FFF7FEFF 		bl	s_to_i
 5389              	.LVL393:
3195:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5390              		.loc 1 3195 8 view .LVU1504
 5391 00ea B042     		cmp	r0, r6
3196:src/xeq.c     **** 			p[i] = p[i + 1];
 5392              		.loc 1 3196 3 view .LVU1505
 5393 00ec 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
3195:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5394              		.loc 1 3195 8 view .LVU1506
 5395 00ee EFDC     		bgt	.L459
 5396              	.L438:
3195:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5397              		.loc 1 3195 26 view .LVU1507
 5398 00f0 302B     		cmp	r3, #48
 5399 00f2 EED0     		beq	.L447
 5400              	.LVL394:
 5401              	.L415:
3195:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5402              		.loc 1 3195 26 view .LVU1508
 5403              	.LBE1707:
 5404              	.LBE1706:
3912:src/xeq.c     **** 
 5405              		.loc 1 3912 1 view .LVU1509
 5406 00f4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5407              	.LVL395:
 5408              	.L420:
3868:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5409              		.loc 1 3868 4 is_stmt 1 view .LVU1510
3868:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5410              		.loc 1 3868 11 is_stmt 0 view .LVU1511
 5411 00f6 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 5412              	.LVL396:
3870:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5413              		.loc 1 3870 4 is_stmt 1 view .LVU1512
3870:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5414              		.loc 1 3870 7 is_stmt 0 view .LVU1513
 5415 00f8 012B     		cmp	r3, #1
 5416 00fa 35D9     		bls	.L460
3873:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5417              		.loc 1 3873 5 is_stmt 1 view .LVU1514
3873:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5418              		.loc 1 3873 22 is_stmt 0 view .LVU1515
 5419 00fc 2D2A     		cmp	r2, #45
 5420 00fe 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
ARM GAS  /tmp/cccVhVyH.s 			page 221


 5421 0100 30D0     		beq	.L444
 5422 0102 1223     		movs	r3, #18
 5423              	.LVL397:
 5424              	.L421:
3883:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5425              		.loc 1 3883 2 is_stmt 1 view .LVU1516
3883:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5426              		.loc 1 3883 5 is_stmt 0 view .LVU1517
 5427 0104 9342     		cmp	r3, r2
 5428 0106 ABDC     		bgt	.L428
 5429              	.LVL398:
 5430              	.L441:
3885:src/xeq.c     **** 		return;
 5431              		.loc 1 3885 3 is_stmt 1 view .LVU1518
3912:src/xeq.c     **** 
 5432              		.loc 1 3912 1 is_stmt 0 view .LVU1519
 5433 0108 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5434              		.cfi_remember_state
 5435              		.cfi_restore 14
 5436              		.cfi_restore 7
 5437              		.cfi_restore 6
 5438              		.cfi_restore 5
 5439              		.cfi_restore 4
 5440              		.cfi_restore 3
 5441              		.cfi_def_cfa_offset 0
 5442              	.LVL399:
3885:src/xeq.c     **** 		return;
 5443              		.loc 1 3885 3 view .LVU1520
 5444 010c 0A20     		movs	r0, #10
 5445 010e FFF7FEBF 		b	report_warn
 5446              	.LVL400:
 5447              	.L458:
 5448              		.cfi_restore_state
3841:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5449              		.loc 1 3841 3 is_stmt 1 view .LVU1521
3841:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5450              		.loc 1 3841 12 is_stmt 0 view .LVU1522
 5451 0112 FFF7FEFF 		bl	int_base
 5452              	.LVL401:
3841:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5453              		.loc 1 3841 6 view .LVU1523
 5454 0116 A842     		cmp	r0, r5
 5455 0118 10D9     		bls	.L419
3883:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5456              		.loc 1 3883 2 is_stmt 1 view .LVU1524
3883:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5457              		.loc 1 3883 6 is_stmt 0 view .LVU1525
 5458 011a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3883:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5459              		.loc 1 3883 5 view .LVU1526
 5460 011c BA42     		cmp	r2, r7
 5461 011e F3DA     		bge	.L441
3889:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5462              		.loc 1 3889 2 is_stmt 1 view .LVU1527
3889:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5463              		.loc 1 3889 5 is_stmt 0 view .LVU1528
 5464 0120 092D     		cmp	r5, #9
ARM GAS  /tmp/cccVhVyH.s 			page 222


 5465 0122 9DD9     		bls	.L428
3890:src/xeq.c     **** 	else {
 5466              		.loc 1 3890 3 is_stmt 1 view .LVU1529
 5467              	.LVL402:
 5468              	.LBB1719:
 5469              	.LBI1719:
2648:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5470              		.loc 1 2648 13 view .LVU1530
 5471              	.LBB1720:
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5472              		.loc 1 2649 2 view .LVU1531
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5473              		.loc 1 2649 23 is_stmt 0 view .LVU1532
 5474 0124 531C     		adds	r3, r2, #1
 5475 0126 DBB2     		uxtb	r3, r3
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5476              		.loc 1 2649 27 view .LVU1533
 5477 0128 2244     		add	r2, r2, r4
2650:src/xeq.c     **** }
 5478              		.loc 1 2650 25 view .LVU1534
 5479 012a E118     		adds	r1, r4, r3
 5480              	.LBE1720:
 5481              	.LBE1719:
3890:src/xeq.c     **** 	else {
 5482              		.loc 1 3890 3 view .LVU1535
 5483 012c 3735     		adds	r5, r5, #55
 5484              	.LVL403:
 5485              	.LBB1722:
 5486              	.LBB1721:
2650:src/xeq.c     **** }
 5487              		.loc 1 2650 25 view .LVU1536
 5488 012e 0026     		movs	r6, #0
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5489              		.loc 1 2649 27 view .LVU1537
 5490 0130 82F82050 		strb	r5, [r2, #32]
2650:src/xeq.c     **** }
 5491              		.loc 1 2650 2 is_stmt 1 view .LVU1538
2650:src/xeq.c     **** }
 5492              		.loc 1 2650 25 is_stmt 0 view .LVU1539
 5493 0134 81F82060 		strb	r6, [r1, #32]
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5494              		.loc 1 2649 23 view .LVU1540
 5495 0138 2377     		strb	r3, [r4, #28]
 5496              	.LBE1721:
 5497              	.LBE1722:
3912:src/xeq.c     **** 
 5498              		.loc 1 3912 1 view .LVU1541
 5499 013a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5500              	.LVL404:
 5501              	.L419:
3842:src/xeq.c     **** 			return;
 5502              		.loc 1 3842 4 is_stmt 1 view .LVU1542
3912:src/xeq.c     **** 
 5503              		.loc 1 3912 1 is_stmt 0 view .LVU1543
 5504 013c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5505              		.cfi_remember_state
 5506              		.cfi_restore 14
ARM GAS  /tmp/cccVhVyH.s 			page 223


 5507              		.cfi_restore 7
 5508              		.cfi_restore 6
 5509              		.cfi_restore 5
 5510              		.cfi_restore 4
 5511              		.cfi_restore 3
 5512              		.cfi_def_cfa_offset 0
 5513              	.LVL405:
3842:src/xeq.c     **** 			return;
 5514              		.loc 1 3842 4 view .LVU1544
 5515 0140 0920     		movs	r0, #9
 5516 0142 FFF7FEBF 		b	report_warn
 5517              	.LVL406:
 5518              	.L430:
 5519              		.cfi_restore_state
3907:src/xeq.c     **** 
 5520              		.loc 1 3907 3 is_stmt 1 view .LVU1545
 5521              	.LBB1723:
2648:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5522              		.loc 1 2648 13 view .LVU1546
 5523              	.LBB1702:
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5524              		.loc 1 2649 2 view .LVU1547
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5525              		.loc 1 2649 23 is_stmt 0 view .LVU1548
 5526 0146 511C     		adds	r1, r2, #1
 5527 0148 C9B2     		uxtb	r1, r1
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5528              		.loc 1 2649 27 view .LVU1549
 5529 014a 2244     		add	r2, r2, r4
2650:src/xeq.c     **** }
 5530              		.loc 1 2650 25 view .LVU1550
 5531 014c 6718     		adds	r7, r4, r1
 5532              	.LBE1702:
 5533              	.LBE1723:
3907:src/xeq.c     **** 
 5534              		.loc 1 3907 3 view .LVU1551
 5535 014e 3035     		adds	r5, r5, #48
 5536              	.LVL407:
3909:src/xeq.c     **** 			exponent_adjusted(1);
 5537              		.loc 1 3909 7 view .LVU1552
 5538 0150 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 5539              	.LBB1724:
 5540              	.LBB1703:
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5541              		.loc 1 2649 27 view .LVU1553
 5542 0152 82F82050 		strb	r5, [r2, #32]
2650:src/xeq.c     **** }
 5543              		.loc 1 2650 2 is_stmt 1 view .LVU1554
2650:src/xeq.c     **** }
 5544              		.loc 1 2650 25 is_stmt 0 view .LVU1555
 5545 0156 0022     		movs	r2, #0
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5546              		.loc 1 2649 23 view .LVU1556
 5547 0158 2177     		strb	r1, [r4, #28]
2650:src/xeq.c     **** }
 5548              		.loc 1 2650 25 view .LVU1557
 5549 015a 87F82020 		strb	r2, [r7, #32]
ARM GAS  /tmp/cccVhVyH.s 			page 224


2650:src/xeq.c     **** }
 5550              		.loc 1 2650 25 view .LVU1558
 5551              	.LBE1703:
 5552              	.LBE1724:
3909:src/xeq.c     **** 			exponent_adjusted(1);
 5553              		.loc 1 3909 3 is_stmt 1 view .LVU1559
3909:src/xeq.c     **** 			exponent_adjusted(1);
 5554              		.loc 1 3909 6 is_stmt 0 view .LVU1560
 5555 015e 002B     		cmp	r3, #0
 5556 0160 92D1     		bne	.L442
3912:src/xeq.c     **** 
 5557              		.loc 1 3912 1 view .LVU1561
 5558 0162 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5559              	.LVL408:
 5560              	.L444:
3852:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5561              		.loc 1 3852 8 view .LVU1562
 5562 0164 1323     		movs	r3, #19
 5563 0166 CDE7     		b	.L421
 5564              	.LVL409:
 5565              	.L460:
3852:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5566              		.loc 1 3852 8 view .LVU1563
 5567 0168 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3868:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5568              		.loc 1 3868 8 view .LVU1564
 5569 016a 3B44     		add	r3, r3, r7
 5570              	.LVL410:
3868:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5571              		.loc 1 3868 8 view .LVU1565
 5572 016c CAE7     		b	.L421
 5573              	.LVL411:
 5574              	.L431:
3907:src/xeq.c     **** 
 5575              		.loc 1 3907 3 is_stmt 1 view .LVU1566
 5576              	.LBB1725:
2648:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5577              		.loc 1 2648 13 view .LVU1567
 5578              	.LBB1704:
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5579              		.loc 1 2649 2 view .LVU1568
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5580              		.loc 1 2649 23 is_stmt 0 view .LVU1569
 5581 016e 531C     		adds	r3, r2, #1
 5582 0170 DBB2     		uxtb	r3, r3
2650:src/xeq.c     **** }
 5583              		.loc 1 2650 25 view .LVU1570
 5584 0172 E118     		adds	r1, r4, r3
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5585              		.loc 1 2649 27 view .LVU1571
 5586 0174 2244     		add	r2, r2, r4
 5587 0176 3020     		movs	r0, #48
 5588 0178 82F82000 		strb	r0, [r2, #32]
2650:src/xeq.c     **** }
 5589              		.loc 1 2650 2 is_stmt 1 view .LVU1572
2650:src/xeq.c     **** }
 5590              		.loc 1 2650 25 is_stmt 0 view .LVU1573
ARM GAS  /tmp/cccVhVyH.s 			page 225


 5591 017c 81F82050 		strb	r5, [r1, #32]
 5592              	.LVL412:
2650:src/xeq.c     **** }
 5593              		.loc 1 2650 25 view .LVU1574
 5594              	.LBE1704:
 5595              	.LBE1725:
3909:src/xeq.c     **** 			exponent_adjusted(1);
 5596              		.loc 1 3909 3 is_stmt 1 view .LVU1575
 5597              	.LBB1726:
 5598              	.LBB1705:
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5599              		.loc 1 2649 23 is_stmt 0 view .LVU1576
 5600 0180 2377     		strb	r3, [r4, #28]
 5601              	.LBE1705:
 5602              	.LBE1726:
3912:src/xeq.c     **** 
 5603              		.loc 1 3912 1 view .LVU1577
 5604 0182 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5605              	.LVL413:
 5606              	.L462:
3912:src/xeq.c     **** 
 5607              		.loc 1 3912 1 view .LVU1578
 5608              		.align	2
 5609              	.L461:
 5610 0184 00000000 		.word	main_ram
 5611 0188 00000000 		.word	StateWhileOn
 5612 018c 33000000 		.word	StateWhileOn+51
 5613              		.cfi_endproc
 5614              	.LFE214:
 5616              		.section	.text.s_to_ull,"ax",%progbits
 5617              		.align	1
 5618              		.p2align 2,,3
 5619              		.global	s_to_ull
 5620              		.syntax unified
 5621              		.thumb
 5622              		.thumb_func
 5623              		.fpu fpv4-sp-d16
 5625              	s_to_ull:
 5626              	.LVL414:
 5627              	.LFB85:
1160:src/xeq.c     **** 	unsigned long long int x = 0;
 5628              		.loc 1 1160 67 is_stmt 1 view -0
 5629              		.cfi_startproc
 5630              		@ args = 0, pretend = 0, frame = 0
 5631              		@ frame_needed = 0, uses_anonymous_args = 0
 5632              		@ link register save eliminated.
1161:src/xeq.c     **** 
 5633              		.loc 1 1161 2 view .LVU1580
1160:src/xeq.c     **** 	unsigned long long int x = 0;
 5634              		.loc 1 1160 67 is_stmt 0 view .LVU1581
 5635 0000 F0B4     		push	{r4, r5, r6, r7}
 5636              		.cfi_def_cfa_offset 16
 5637              		.cfi_offset 4, -16
 5638              		.cfi_offset 5, -12
 5639              		.cfi_offset 6, -8
 5640              		.cfi_offset 7, -4
1161:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 226


 5641              		.loc 1 1161 25 view .LVU1582
 5642 0002 0026     		movs	r6, #0
 5643 0004 0027     		movs	r7, #0
 5644 0006 02E0     		b	.L467
 5645              	.LVL415:
 5646              	.L469:
 5647              	.LBB1727:
1175:src/xeq.c     **** 	}
 5648              		.loc 1 1175 5 view .LVU1583
 5649 0008 E618     		adds	r6, r4, r3
 5650              	.LVL416:
1175:src/xeq.c     **** 	}
 5651              		.loc 1 1175 5 view .LVU1584
 5652 000a 45F10007 		adc	r7, r5, #0
 5653              	.LVL417:
1175:src/xeq.c     **** 	}
 5654              		.loc 1 1175 5 view .LVU1585
 5655              	.LBE1727:
1163:src/xeq.c     **** 		unsigned int n;
 5656              		.loc 1 1163 8 is_stmt 1 view .LVU1586
 5657              	.L467:
1163:src/xeq.c     **** 		unsigned int n;
 5658              		.loc 1 1163 2 view .LVU1587
 5659              	.LBB1728:
1164:src/xeq.c     **** 		const char c = *s++;
 5660              		.loc 1 1164 3 view .LVU1588
1165:src/xeq.c     **** 
 5661              		.loc 1 1165 3 view .LVU1589
1168:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 5662              		.loc 1 1168 4 view .LVU1590
1169:src/xeq.c     **** 			n = c - 'A' + 10;
 5663              		.loc 1 1169 8 view .LVU1591
1170:src/xeq.c     **** 		else
 5664              		.loc 1 1170 4 view .LVU1592
1165:src/xeq.c     **** 
 5665              		.loc 1 1165 14 is_stmt 0 view .LVU1593
 5666 000e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5667              	.LVL418:
1167:src/xeq.c     **** 			n = c - '0';
 5668              		.loc 1 1167 3 is_stmt 1 view .LVU1594
1167:src/xeq.c     **** 			n = c - '0';
 5669              		.loc 1 1167 16 is_stmt 0 view .LVU1595
 5670 0012 A2F13003 		sub	r3, r2, #48
1167:src/xeq.c     **** 			n = c - '0';
 5671              		.loc 1 1167 6 view .LVU1596
 5672 0016 DCB2     		uxtb	r4, r3
 5673 0018 092C     		cmp	r4, #9
1169:src/xeq.c     **** 			n = c - 'A' + 10;
 5674              		.loc 1 1169 11 view .LVU1597
 5675 001a A2F14105 		sub	r5, r2, #65
1167:src/xeq.c     **** 			n = c - '0';
 5676              		.loc 1 1167 6 view .LVU1598
 5677 001e 03D9     		bls	.L465
1169:src/xeq.c     **** 			n = c - 'A' + 10;
 5678              		.loc 1 1169 11 view .LVU1599
 5679 0020 052D     		cmp	r5, #5
 5680 0022 07D8     		bhi	.L463
ARM GAS  /tmp/cccVhVyH.s 			page 227


1170:src/xeq.c     **** 		else
 5681              		.loc 1 1170 16 view .LVU1600
 5682 0024 A2F13703 		sub	r3, r2, #55
 5683              	.LVL419:
 5684              	.L465:
1173:src/xeq.c     **** 			break;
 5685              		.loc 1 1173 3 is_stmt 1 view .LVU1601
1175:src/xeq.c     **** 	}
 5686              		.loc 1 1175 3 view .LVU1602
1175:src/xeq.c     **** 	}
 5687              		.loc 1 1175 9 is_stmt 0 view .LVU1603
 5688 0028 A1FB0645 		umull	r4, r5, r1, r6
1173:src/xeq.c     **** 			break;
 5689              		.loc 1 1173 6 view .LVU1604
 5690 002c 8B42     		cmp	r3, r1
1175:src/xeq.c     **** 	}
 5691              		.loc 1 1175 9 view .LVU1605
 5692 002e 01FB0755 		mla	r5, r1, r7, r5
1173:src/xeq.c     **** 			break;
 5693              		.loc 1 1173 6 view .LVU1606
 5694 0032 E9D3     		bcc	.L469
 5695              	.LVL420:
 5696              	.L463:
1173:src/xeq.c     **** 			break;
 5697              		.loc 1 1173 6 view .LVU1607
 5698              	.LBE1728:
1178:src/xeq.c     **** 
 5699              		.loc 1 1178 1 view .LVU1608
 5700 0034 3046     		mov	r0, r6
 5701              	.LVL421:
1178:src/xeq.c     **** 
 5702              		.loc 1 1178 1 view .LVU1609
 5703 0036 3946     		mov	r1, r7
 5704              	.LVL422:
1178:src/xeq.c     **** 
 5705              		.loc 1 1178 1 view .LVU1610
 5706 0038 F0BC     		pop	{r4, r5, r6, r7}
 5707              		.cfi_restore 7
 5708              		.cfi_restore 6
 5709              		.cfi_restore 5
 5710              		.cfi_restore 4
 5711              		.cfi_def_cfa_offset 0
 5712              	.LVL423:
1178:src/xeq.c     **** 
 5713              		.loc 1 1178 1 view .LVU1611
 5714 003a 7047     		bx	lr
 5715              		.cfi_endproc
 5716              	.LFE85:
 5718              		.section	.text.get_cmdline,"ax",%progbits
 5719              		.align	1
 5720              		.p2align 2,,3
 5721              		.global	get_cmdline
 5722              		.syntax unified
 5723              		.thumb
 5724              		.thumb_func
 5725              		.fpu fpv4-sp-d16
 5727              	get_cmdline:
ARM GAS  /tmp/cccVhVyH.s 			page 228


 5728              	.LFB86:
1180:src/xeq.c     **** 	if (CmdLineLength) {
 5729              		.loc 1 1180 31 is_stmt 1 view -0
 5730              		.cfi_startproc
 5731              		@ args = 0, pretend = 0, frame = 0
 5732              		@ frame_needed = 0, uses_anonymous_args = 0
 5733              		@ link register save eliminated.
1181:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5734              		.loc 1 1181 2 view .LVU1613
1181:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5735              		.loc 1 1181 6 is_stmt 0 view .LVU1614
 5736 0000 044B     		ldr	r3, .L473
 5737 0002 187F     		ldrb	r0, [r3, #28]	@ zero_extendqisi2
1181:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5738              		.loc 1 1181 5 view .LVU1615
 5739 0004 28B1     		cbz	r0, .L470
1182:src/xeq.c     **** 		return Cmdline;
 5740              		.loc 1 1182 3 is_stmt 1 view .LVU1616
1182:src/xeq.c     **** 		return Cmdline;
 5741              		.loc 1 1182 26 is_stmt 0 view .LVU1617
 5742 0006 1A18     		adds	r2, r3, r0
 5743 0008 0021     		movs	r1, #0
1183:src/xeq.c     **** 	}
 5744              		.loc 1 1183 10 view .LVU1618
 5745 000a 03F12000 		add	r0, r3, #32
1182:src/xeq.c     **** 		return Cmdline;
 5746              		.loc 1 1182 26 view .LVU1619
 5747 000e 82F82010 		strb	r1, [r2, #32]
1183:src/xeq.c     **** 	}
 5748              		.loc 1 1183 3 is_stmt 1 view .LVU1620
 5749              	.L470:
1186:src/xeq.c     **** 
 5750              		.loc 1 1186 1 is_stmt 0 view .LVU1621
 5751 0012 7047     		bx	lr
 5752              	.L474:
 5753              		.align	2
 5754              	.L473:
 5755 0014 00000000 		.word	StateWhileOn
 5756              		.cfi_endproc
 5757              	.LFE86:
 5759              		.section	.text.is_bad_cmdline,"ax",%progbits
 5760              		.align	1
 5761              		.p2align 2,,3
 5762              		.global	is_bad_cmdline
 5763              		.syntax unified
 5764              		.thumb
 5765              		.thumb_func
 5766              		.fpu fpv4-sp-d16
 5768              	is_bad_cmdline:
 5769              	.LFB87:
1203:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
 5770              		.loc 1 1203 1 is_stmt 1 view -0
 5771              		.cfi_startproc
 5772              		@ args = 0, pretend = 0, frame = 0
 5773              		@ frame_needed = 0, uses_anonymous_args = 0
 5774              		@ link register save eliminated.
1224:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 229


 5775              		.loc 1 1224 2 view .LVU1623
1225:src/xeq.c     **** 
 5776              		.loc 1 1225 1 is_stmt 0 view .LVU1624
 5777 0000 0020     		movs	r0, #0
 5778 0002 7047     		bx	lr
 5779              		.cfi_endproc
 5780              	.LFE87:
 5782              		.section	.text.get_flash_reg_n,"ax",%progbits
 5783              		.align	1
 5784              		.p2align 2,,3
 5785              		.global	get_flash_reg_n
 5786              		.syntax unified
 5787              		.thumb
 5788              		.thumb_func
 5789              		.fpu fpv4-sp-d16
 5791              	get_flash_reg_n:
 5792              	.LVL424:
 5793              	.LFB92:
1388:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 5794              		.loc 1 1388 34 is_stmt 1 view -0
 5795              		.cfi_startproc
 5796              		@ args = 0, pretend = 0, frame = 0
 5797              		@ frame_needed = 0, uses_anonymous_args = 0
 5798              		@ link register save eliminated.
1389:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5799              		.loc 1 1389 2 view .LVU1626
1389:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5800              		.loc 1 1389 37 is_stmt 0 view .LVU1627
 5801 0000 064B     		ldr	r3, .L477
 5802 0002 1A68     		ldr	r2, [r3]
1389:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5803              		.loc 1 1389 68 view .LVU1628
 5804 0004 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1389:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5805              		.loc 1 1389 37 view .LVU1629
 5806 0008 02F58661 		add	r1, r2, #1072
1389:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5807              		.loc 1 1389 68 view .LVU1630
 5808 000c C3F16403 		rsb	r3, r3, #100
1389:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5809              		.loc 1 1389 22 view .LVU1631
 5810 0010 01EBC301 		add	r1, r1, r3, lsl #3
 5811 0014 02F5EA62 		add	r2, r2, #1872
 5812 0018 FFF7FEBF 		b	reg_address
 5813              	.LVL425:
 5814              	.L478:
1389:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5815              		.loc 1 1389 22 view .LVU1632
 5816              		.align	2
 5817              	.L477:
 5818 001c 00000000 		.word	backup_ram
 5819              		.cfi_endproc
 5820              	.LFE92:
 5822              		.section	.text.get_const,"ax",%progbits
 5823              		.align	1
 5824              		.p2align 2,,3
 5825              		.global	get_const
ARM GAS  /tmp/cccVhVyH.s 			page 230


 5826              		.syntax unified
 5827              		.thumb
 5828              		.thumb_func
 5829              		.fpu fpv4-sp-d16
 5831              	get_const:
 5832              	.LVL426:
 5833              	.LFB93:
1399:src/xeq.c     **** 	static REGISTER result;
 5834              		.loc 1 1399 1 is_stmt 1 view -0
 5835              		.cfi_startproc
 5836              		@ args = 0, pretend = 0, frame = 40
 5837              		@ frame_needed = 0, uses_anonymous_args = 0
1400:src/xeq.c     **** 	const int i = cnsts[index].index;
 5838              		.loc 1 1400 2 view .LVU1634
1401:src/xeq.c     **** 	if (dbl) {
 5839              		.loc 1 1401 2 view .LVU1635
1399:src/xeq.c     **** 	static REGISTER result;
 5840              		.loc 1 1399 1 is_stmt 0 view .LVU1636
 5841 0000 00B5     		push	{lr}
 5842              		.cfi_def_cfa_offset 4
 5843              		.cfi_offset 14, -4
1401:src/xeq.c     **** 	if (dbl) {
 5844              		.loc 1 1401 28 view .LVU1637
 5845 0002 1C4B     		ldr	r3, .L485
 5846 0004 00EB4000 		add	r0, r0, r0, lsl #1
 5847              	.LVL427:
1399:src/xeq.c     **** 	static REGISTER result;
 5848              		.loc 1 1399 1 view .LVU1638
 5849 0008 8BB0     		sub	sp, sp, #44
 5850              		.cfi_def_cfa_offset 48
1401:src/xeq.c     **** 	if (dbl) {
 5851              		.loc 1 1401 28 view .LVU1639
 5852 000a 13F82030 		ldrb	r3, [r3, r0, lsl #2]	@ zero_extendqisi2
 5853              	.LVL428:
1402:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5854              		.loc 1 1402 2 is_stmt 1 view .LVU1640
1402:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5855              		.loc 1 1402 5 is_stmt 0 view .LVU1641
 5856 000e 51B1     		cbz	r1, .L480
1403:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5857              		.loc 1 1403 3 is_stmt 1 view .LVU1642
1403:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5858              		.loc 1 1403 14 is_stmt 0 view .LVU1643
 5859 0010 9A1E     		subs	r2, r3, #2
1403:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5860              		.loc 1 1403 6 view .LVU1644
 5861 0012 7D2A     		cmp	r2, #125
 5862 0014 0FD9     		bls	.L481
1404:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5863              		.loc 1 1404 4 is_stmt 1 view .LVU1645
1404:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5864              		.loc 1 1404 11 is_stmt 0 view .LVU1646
 5865 0016 184A     		ldr	r2, .L485+4
1404:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5866              		.loc 1 1404 36 view .LVU1647
 5867 0018 03F07F00 		and	r0, r3, #127
1404:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
ARM GAS  /tmp/cccVhVyH.s 			page 231


 5868              		.loc 1 1404 11 view .LVU1648
 5869 001c 02EB0010 		add	r0, r2, r0, lsl #4
1413:src/xeq.c     **** 
 5870              		.loc 1 1413 1 view .LVU1649
 5871 0020 0BB0     		add	sp, sp, #44
 5872              		.cfi_remember_state
 5873              		.cfi_def_cfa_offset 4
 5874              		@ sp needed
 5875 0022 5DF804FB 		ldr	pc, [sp], #4
 5876              	.L480:
 5877              		.cfi_restore_state
1408:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5878              		.loc 1 1408 3 is_stmt 1 view .LVU1650
1408:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5879              		.loc 1 1408 6 is_stmt 0 view .LVU1651
 5880 0026 1A06     		lsls	r2, r3, #24
 5881 0028 13D4     		bmi	.L483
1409:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5882              		.loc 1 1409 4 is_stmt 1 view .LVU1652
1409:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5883              		.loc 1 1409 11 is_stmt 0 view .LVU1653
 5884 002a 1448     		ldr	r0, .L485+8
 5885 002c 00EBC300 		add	r0, r0, r3, lsl #3
1413:src/xeq.c     **** 
 5886              		.loc 1 1413 1 view .LVU1654
 5887 0030 0BB0     		add	sp, sp, #44
 5888              		.cfi_remember_state
 5889              		.cfi_def_cfa_offset 4
 5890              		@ sp needed
 5891 0032 5DF804FB 		ldr	pc, [sp], #4
 5892              	.L481:
 5893              		.cfi_restore_state
1405:src/xeq.c     **** 	}
 5894              		.loc 1 1405 3 is_stmt 1 view .LVU1655
 5895              	.LVL429:
 5896              	.LBB1729:
 5897              	.LBI1729:
 654:src/xeq.c     **** 	decNumber temp;
 5898              		.loc 1 654 6 view .LVU1656
 5899              	.LBB1730:
 655:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 5900              		.loc 1 655 2 view .LVU1657
 656:src/xeq.c     **** }
 5901              		.loc 1 656 2 view .LVU1658
 5902              	.LBE1730:
 5903              	.LBE1729:
1405:src/xeq.c     **** 	}
 5904              		.loc 1 1405 3 is_stmt 0 view .LVU1659
 5905 0036 1148     		ldr	r0, .L485+8
 5906              	.LBB1732:
 5907              	.LBB1731:
 656:src/xeq.c     **** }
 5908              		.loc 1 656 27 view .LVU1660
 5909 0038 01A9     		add	r1, sp, #4
 5910              	.LVL430:
 656:src/xeq.c     **** }
 5911              		.loc 1 656 27 view .LVU1661
ARM GAS  /tmp/cccVhVyH.s 			page 232


 5912 003a 00EBC300 		add	r0, r0, r3, lsl #3
 5913 003e FFF7FEFF 		bl	decimal64ToNumber
 5914              	.LVL431:
 656:src/xeq.c     **** }
 5915              		.loc 1 656 27 view .LVU1662
 5916 0042 0146     		mov	r1, r0
 656:src/xeq.c     **** }
 5917              		.loc 1 656 2 view .LVU1663
 5918 0044 0E48     		ldr	r0, .L485+12
 5919 0046 FFF7FEFF 		bl	packed128_from_number
 5920              	.LVL432:
 5921              	.LBE1731:
 5922              	.LBE1732:
1412:src/xeq.c     **** }
 5923              		.loc 1 1412 9 view .LVU1664
 5924 004a 0D48     		ldr	r0, .L485+12
1413:src/xeq.c     **** 
 5925              		.loc 1 1413 1 view .LVU1665
 5926 004c 0BB0     		add	sp, sp, #44
 5927              		.cfi_remember_state
 5928              		.cfi_def_cfa_offset 4
 5929              		@ sp needed
 5930 004e 5DF804FB 		ldr	pc, [sp], #4
 5931              	.LVL433:
 5932              	.L483:
 5933              		.cfi_restore_state
1410:src/xeq.c     **** 	}
 5934              		.loc 1 1410 3 is_stmt 1 view .LVU1666
 5935              	.LBB1733:
 5936              	.LBI1733:
 648:src/xeq.c     **** 	decNumber temp;
 5937              		.loc 1 648 6 view .LVU1667
 5938              	.LBB1734:
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 5939              		.loc 1 649 2 view .LVU1668
 650:src/xeq.c     **** }
 5940              		.loc 1 650 2 view .LVU1669
 5941              	.LBE1734:
 5942              	.LBE1733:
1410:src/xeq.c     **** 	}
 5943              		.loc 1 1410 3 is_stmt 0 view .LVU1670
 5944 0052 0948     		ldr	r0, .L485+4
1410:src/xeq.c     **** 	}
 5945              		.loc 1 1410 55 view .LVU1671
 5946 0054 03F18053 		add	r3, r3, #268435456
 5947              	.LVL434:
1410:src/xeq.c     **** 	}
 5948              		.loc 1 1410 55 view .LVU1672
 5949 0058 803B     		subs	r3, r3, #128
 5950              	.LVL435:
 5951              	.LBB1736:
 5952              	.LBB1735:
 650:src/xeq.c     **** }
 5953              		.loc 1 650 24 view .LVU1673
 5954 005a 00EB0310 		add	r0, r0, r3, lsl #4
 5955 005e 01A9     		add	r1, sp, #4
 5956              	.LVL436:
ARM GAS  /tmp/cccVhVyH.s 			page 233


 650:src/xeq.c     **** }
 5957              		.loc 1 650 24 view .LVU1674
 5958 0060 FFF7FEFF 		bl	decimal128ToNumber
 5959              	.LVL437:
 650:src/xeq.c     **** }
 5960              		.loc 1 650 24 view .LVU1675
 5961 0064 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 5962              		.loc 1 650 2 view .LVU1676
 5963 0066 0648     		ldr	r0, .L485+12
 5964 0068 FFF7FEFF 		bl	packed_from_number
 5965              	.LVL438:
 5966              	.LBE1735:
 5967              	.LBE1736:
1412:src/xeq.c     **** }
 5968              		.loc 1 1412 9 view .LVU1677
 5969 006c 0448     		ldr	r0, .L485+12
 5970              	.LVL439:
1413:src/xeq.c     **** 
 5971              		.loc 1 1413 1 view .LVU1678
 5972 006e 0BB0     		add	sp, sp, #44
 5973              		.cfi_def_cfa_offset 4
 5974              		@ sp needed
 5975 0070 5DF804FB 		ldr	pc, [sp], #4
 5976              	.L486:
 5977              		.align	2
 5978              	.L485:
 5979 0074 00000000 		.word	cnsts
 5980 0078 00000000 		.word	cnsts_d128
 5981 007c 00000000 		.word	cnsts_d64
 5982 0080 00000000 		.word	.LANCHOR2
 5983              		.cfi_endproc
 5984              	.LFE93:
 5986              		.section	.text.get_reg_n,"ax",%progbits
 5987              		.align	1
 5988              		.p2align 2,,3
 5989              		.global	get_reg_n
 5990              		.syntax unified
 5991              		.thumb
 5992              		.thumb_func
 5993              		.fpu fpv4-sp-d16
 5995              	get_reg_n:
 5996              	.LVL440:
 5997              	.LFB91:
1367:src/xeq.c     **** 	const int dbl = is_dblmode();
 5998              		.loc 1 1367 28 is_stmt 1 view -0
 5999              		.cfi_startproc
 6000              		@ args = 0, pretend = 0, frame = 0
 6001              		@ frame_needed = 0, uses_anonymous_args = 0
 6002              		@ link register save eliminated.
1368:src/xeq.c     **** 
 6003              		.loc 1 1368 2 view .LVU1680
 6004              	.LBB1737:
 6005              	.LBI1737:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6006              		.loc 1 1121 5 view .LVU1681
 6007              	.LBB1738:
ARM GAS  /tmp/cccVhVyH.s 			page 234


1122:src/xeq.c     **** }
 6008              		.loc 1 1122 2 view .LVU1682
1122:src/xeq.c     **** }
 6009              		.loc 1 1122 12 is_stmt 0 view .LVU1683
 6010 0000 2B4B     		ldr	r3, .L502
 6011 0002 1A68     		ldr	r2, [r3]
1122:src/xeq.c     **** }
 6012              		.loc 1 1122 24 view .LVU1684
 6013 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 6014 0008 44F20103 		movw	r3, #16385
 6015 000c 0B40     		ands	r3, r3, r1
 6016 000e A3F58041 		sub	r1, r3, #16384
 6017 0012 B1FA81F1 		clz	r1, r1
 6018              	.LBE1738:
 6019              	.LBE1737:
1370:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6020              		.loc 1 1370 5 view .LVU1685
 6021 0016 B0F5FA6F 		cmp	r0, #2000
 6022              	.LBB1740:
 6023              	.LBB1739:
1122:src/xeq.c     **** }
 6024              		.loc 1 1122 24 view .LVU1686
 6025 001a 4FEA5111 		lsr	r1, r1, #5
 6026              	.LVL441:
1122:src/xeq.c     **** }
 6027              		.loc 1 1122 24 view .LVU1687
 6028              	.LBE1739:
 6029              	.LBE1740:
1370:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6030              		.loc 1 1370 2 is_stmt 1 view .LVU1688
1370:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6031              		.loc 1 1370 5 is_stmt 0 view .LVU1689
 6032 001e 29DA     		bge	.L499
1374:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6033              		.loc 1 1374 2 is_stmt 1 view .LVU1690
1374:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6034              		.loc 1 1374 5 is_stmt 0 view .LVU1691
 6035 0020 B0F57A7F 		cmp	r0, #1000
 6036 0024 16DA     		bge	.L500
1377:src/xeq.c     **** 		// local register on the return stack
 6037              		.loc 1 1377 2 is_stmt 1 view .LVU1692
1377:src/xeq.c     **** 		// local register on the return stack
 6038              		.loc 1 1377 5 is_stmt 0 view .LVU1693
 6039 0026 6F28     		cmp	r0, #111
1367:src/xeq.c     **** 	const int dbl = is_dblmode();
 6040              		.loc 1 1367 28 view .LVU1694
 6041 0028 70B4     		push	{r4, r5, r6}
 6042              		.cfi_def_cfa_offset 12
 6043              		.cfi_offset 4, -12
 6044              		.cfi_offset 5, -8
 6045              		.cfi_offset 6, -4
1377:src/xeq.c     **** 		// local register on the return stack
 6046              		.loc 1 1377 5 view .LVU1695
 6047 002a 06DD     		ble	.L490
 6048              	.LBB1741:
 6049              	.LBI1741:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
ARM GAS  /tmp/cccVhVyH.s 			page 235


 6050              		.loc 1 233 5 is_stmt 1 view .LVU1696
 6051              	.LBE1741:
 234:src/xeq.c     **** }
 6052              		.loc 1 234 2 view .LVU1697
 6053              	.LVL442:
 6054              	.LBB1754:
 6055              	.LBB1742:
 6056              	.LBI1742:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 6057              		.loc 1 225 5 view .LVU1698
 6058              	.LBB1743:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 6059              		.loc 1 226 2 view .LVU1699
 6060              	.LBE1743:
 6061              	.LBE1742:
 6062              	.LBE1754:
1122:src/xeq.c     **** }
 6063              		.loc 1 1122 2 view .LVU1700
 6064              	.LBB1755:
 6065              	.LBB1752:
 6066              	.LBB1750:
 227:src/xeq.c     **** }
 6067              		.loc 1 227 2 view .LVU1701
 6068              	.LBB1744:
 6069              	.LBI1744:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 6070              		.loc 1 217 5 view .LVU1702
 6071              	.LBB1745:
 218:src/xeq.c     **** }
 6072              		.loc 1 218 2 view .LVU1703
 218:src/xeq.c     **** }
 6073              		.loc 1 218 9 is_stmt 0 view .LVU1704
 6074 002c B2F8DE47 		ldrh	r4, [r2, #2014]
 6075 0030 44F34A15 		sbfx	r5, r4, #5, #11
 218:src/xeq.c     **** }
 6076              		.loc 1 218 57 view .LVU1705
 6077 0034 002D     		cmp	r5, #0
 218:src/xeq.c     **** }
 6078              		.loc 1 218 9 view .LVU1706
 6079 0036 2C46     		mov	r4, r5
 218:src/xeq.c     **** }
 6080              		.loc 1 218 57 view .LVU1707
 6081 0038 20DB     		blt	.L501
 6082              	.LVL443:
 6083              	.L490:
 218:src/xeq.c     **** }
 6084              		.loc 1 218 57 view .LVU1708
 6085              	.LBE1745:
 6086              	.LBE1744:
 6087              	.LBE1750:
 6088              	.LBE1752:
 6089              	.LBE1755:
1384:src/xeq.c     **** }
 6090              		.loc 1 1384 2 is_stmt 1 view .LVU1709
1384:src/xeq.c     **** }
 6091              		.loc 1 1384 55 is_stmt 0 view .LVU1710
 6092 003a 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
ARM GAS  /tmp/cccVhVyH.s 			page 236


 6093              	.LVL444:
1384:src/xeq.c     **** }
 6094              		.loc 1 1384 37 view .LVU1711
 6095 003e 02F58661 		add	r1, r2, #1072
1384:src/xeq.c     **** }
 6096              		.loc 1 1384 55 view .LVU1712
 6097 0042 C3F16403 		rsb	r3, r3, #100
1385:src/xeq.c     **** 
 6098              		.loc 1 1385 1 view .LVU1713
 6099 0046 70BC     		pop	{r4, r5, r6}
 6100              		.cfi_restore 6
 6101              		.cfi_restore 5
 6102              		.cfi_restore 4
 6103              		.cfi_def_cfa_offset 0
1384:src/xeq.c     **** }
 6104              		.loc 1 1384 22 view .LVU1714
 6105 0048 01EBC301 		add	r1, r1, r3, lsl #3
 6106 004c 02F5EA62 		add	r2, r2, #1872
 6107              	.LVL445:
1384:src/xeq.c     **** }
 6108              		.loc 1 1384 22 view .LVU1715
 6109 0050 FFF7FEBF 		b	reg_address
 6110              	.LVL446:
 6111              	.L500:
1375:src/xeq.c     **** 
 6112              		.loc 1 1375 3 is_stmt 1 view .LVU1716
 6113              	.LBB1756:
 6114              	.LBI1756:
1388:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 6115              		.loc 1 1388 11 view .LVU1717
 6116              	.LBB1757:
1389:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6117              		.loc 1 1389 2 view .LVU1718
1389:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6118              		.loc 1 1389 37 is_stmt 0 view .LVU1719
 6119 0054 174B     		ldr	r3, .L502+4
 6120 0056 1A68     		ldr	r2, [r3]
1389:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6121              		.loc 1 1389 68 view .LVU1720
 6122 0058 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1389:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6123              		.loc 1 1389 37 view .LVU1721
 6124 005c 02F58661 		add	r1, r2, #1072
 6125              	.LVL447:
1389:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6126              		.loc 1 1389 68 view .LVU1722
 6127 0060 C3F16403 		rsb	r3, r3, #100
1389:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6128              		.loc 1 1389 22 view .LVU1723
 6129 0064 A0F57A70 		sub	r0, r0, #1000
 6130              	.LVL448:
1389:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6131              		.loc 1 1389 22 view .LVU1724
 6132 0068 01EBC301 		add	r1, r1, r3, lsl #3
 6133 006c 02F5EA62 		add	r2, r2, #1872
 6134 0070 FFF7FEBF 		b	reg_address
 6135              	.LVL449:
ARM GAS  /tmp/cccVhVyH.s 			page 237


 6136              	.L499:
1389:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6137              		.loc 1 1389 22 view .LVU1725
 6138              	.LBE1757:
 6139              	.LBE1756:
1371:src/xeq.c     **** 		return get_const(n, dbl);
 6140              		.loc 1 1371 3 is_stmt 1 view .LVU1726
1372:src/xeq.c     **** 	}
 6141              		.loc 1 1372 3 view .LVU1727
1372:src/xeq.c     **** 	}
 6142              		.loc 1 1372 10 is_stmt 0 view .LVU1728
 6143 0074 A0F5FA60 		sub	r0, r0, #2000
 6144              	.LVL450:
1372:src/xeq.c     **** 	}
 6145              		.loc 1 1372 10 view .LVU1729
 6146 0078 FFF7FEBF 		b	get_const
 6147              	.LVL451:
 6148              	.L501:
 6149              		.cfi_def_cfa_offset 12
 6150              		.cfi_offset 4, -12
 6151              		.cfi_offset 5, -8
 6152              		.cfi_offset 6, -4
 6153              	.LBB1758:
 6154              	.LBB1753:
 6155              	.LBB1751:
 6156              	.LBB1748:
 6157              	.LBB1746:
 218:src/xeq.c     **** }
 6158              		.loc 1 218 25 view .LVU1730
 6159 007c 0E4E     		ldr	r6, .L502+8
 6160 007e 3668     		ldr	r6, [r6]
 6161              	.LVL452:
 218:src/xeq.c     **** }
 6162              		.loc 1 218 57 view .LVU1731
 6163 0080 36F81550 		ldrh	r5, [r6, r5, lsl #1]
 6164              	.LBE1746:
 6165              	.LBE1748:
 227:src/xeq.c     **** }
 6166              		.loc 1 227 30 view .LVU1732
 6167 0084 0231     		adds	r1, r1, #2
 6168              	.LVL453:
 6169              	.LBB1749:
 6170              	.LBB1747:
 218:src/xeq.c     **** }
 6171              		.loc 1 218 57 view .LVU1733
 6172 0086 C5F30B05 		ubfx	r5, r5, #0, #12
 6173              	.LBE1747:
 6174              	.LBE1749:
 6175              	.LBE1751:
 6176              	.LBE1753:
 6177              	.LBE1758:
1377:src/xeq.c     **** 		// local register on the return stack
 6178              		.loc 1 1377 26 view .LVU1734
 6179 008a 55FA01F1 		asrs	r1, r5, r1
 6180              	.LVL454:
1377:src/xeq.c     **** 		// local register on the return stack
 6181              		.loc 1 1377 26 view .LVU1735
ARM GAS  /tmp/cccVhVyH.s 			page 238


 6182 008e D4D0     		beq	.L490
1379:src/xeq.c     **** 		if (dbl)
 6183              		.loc 1 1379 3 is_stmt 1 view .LVU1736
1379:src/xeq.c     **** 		if (dbl)
 6184              		.loc 1 1379 5 is_stmt 0 view .LVU1737
 6185 0090 7038     		subs	r0, r0, #112
 6186              	.LVL455:
1380:src/xeq.c     **** 			n <<= 1;
 6187              		.loc 1 1380 3 is_stmt 1 view .LVU1738
1380:src/xeq.c     **** 			n <<= 1;
 6188              		.loc 1 1380 6 is_stmt 0 view .LVU1739
 6189 0092 B3F5804F 		cmp	r3, #16384
1381:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6190              		.loc 1 1381 4 is_stmt 1 view .LVU1740
1381:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6191              		.loc 1 1381 6 is_stmt 0 view .LVU1741
 6192 0096 08BF     		it	eq
 6193 0098 4000     		lsleq	r0, r0, #1
 6194              	.LVL456:
1382:src/xeq.c     **** 	}
 6195              		.loc 1 1382 3 is_stmt 1 view .LVU1742
1382:src/xeq.c     **** 	}
 6196              		.loc 1 1382 67 is_stmt 0 view .LVU1743
 6197 009a 0234     		adds	r4, r4, #2
1382:src/xeq.c     **** 	}
 6198              		.loc 1 1382 48 view .LVU1744
 6199 009c 24F00104 		bic	r4, r4, #1
1382:src/xeq.c     **** 	}
 6200              		.loc 1 1382 83 view .LVU1745
 6201 00a0 C000     		lsls	r0, r0, #3
 6202              	.LVL457:
1382:src/xeq.c     **** 	}
 6203              		.loc 1 1382 10 view .LVU1746
 6204 00a2 0223     		movs	r3, #2
 6205              	.LVL458:
1382:src/xeq.c     **** 	}
 6206              		.loc 1 1382 10 view .LVU1747
 6207 00a4 14FB0300 		smlabb	r0, r4, r3, r0
 6208 00a8 3044     		add	r0, r0, r6
1385:src/xeq.c     **** 
 6209              		.loc 1 1385 1 view .LVU1748
 6210 00aa 70BC     		pop	{r4, r5, r6}
 6211              		.cfi_restore 6
 6212              		.cfi_restore 5
 6213              		.cfi_restore 4
 6214              		.cfi_def_cfa_offset 0
 6215 00ac 7047     		bx	lr
 6216              	.L503:
 6217 00ae 00BF     		.align	2
 6218              	.L502:
 6219 00b0 00000000 		.word	main_ram
 6220 00b4 00000000 		.word	backup_ram
 6221 00b8 00000000 		.word	RetStk
 6222              		.cfi_endproc
 6223              	.LFE91:
 6225              		.section	.text.get_stack,"ax",%progbits
 6226              		.align	1
ARM GAS  /tmp/cccVhVyH.s 			page 239


 6227              		.p2align 2,,3
 6228              		.global	get_stack
 6229              		.syntax unified
 6230              		.thumb
 6231              		.thumb_func
 6232              		.fpu fpv4-sp-d16
 6234              	get_stack:
 6235              	.LVL459:
 6236              	.LFB43:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6237              		.loc 1 718 30 is_stmt 1 view -0
 6238              		.cfi_startproc
 6239              		@ args = 0, pretend = 0, frame = 0
 6240              		@ frame_needed = 0, uses_anonymous_args = 0
 6241              		@ link register save eliminated.
 719:src/xeq.c     **** }
 6242              		.loc 1 719 2 view .LVU1750
 719:src/xeq.c     **** }
 6243              		.loc 1 719 9 is_stmt 0 view .LVU1751
 6244 0000 6430     		adds	r0, r0, #100
 6245              	.LVL460:
 719:src/xeq.c     **** }
 6246              		.loc 1 719 9 view .LVU1752
 6247 0002 FFF7FEBF 		b	get_reg_n
 6248              	.LVL461:
 719:src/xeq.c     **** }
 6249              		.loc 1 719 9 view .LVU1753
 6250              		.cfi_endproc
 6251              	.LFE43:
 6253 0006 00BF     		.section	.text.lift,"ax",%progbits
 6254              		.align	1
 6255              		.p2align 2,,3
 6256              		.global	lift
 6257              		.syntax unified
 6258              		.thumb
 6259              		.thumb_func
 6260              		.fpu fpv4-sp-d16
 6262              	lift:
 6263              	.LFB47:
 736:src/xeq.c     **** 	const int n = stack_size();
 6264              		.loc 1 736 17 is_stmt 1 view -0
 6265              		.cfi_startproc
 6266              		@ args = 0, pretend = 0, frame = 0
 6267              		@ frame_needed = 0, uses_anonymous_args = 0
 737:src/xeq.c     **** 	int i;
 6268              		.loc 1 737 2 view .LVU1755
 6269              	.LBB1759:
 6270              	.LBI1759:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6271              		.loc 1 712 5 view .LVU1756
 6272              	.LBB1760:
 713:src/xeq.c     **** 		return 4;
 6273              		.loc 1 713 2 view .LVU1757
 6274              	.LBE1760:
 6275              	.LBE1759:
 736:src/xeq.c     **** 	const int n = stack_size();
 6276              		.loc 1 736 17 is_stmt 0 view .LVU1758
ARM GAS  /tmp/cccVhVyH.s 			page 240


 6277 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6278              		.cfi_def_cfa_offset 24
 6279              		.cfi_offset 3, -24
 6280              		.cfi_offset 4, -20
 6281              		.cfi_offset 5, -16
 6282              		.cfi_offset 6, -12
 6283              		.cfi_offset 7, -8
 6284              		.cfi_offset 14, -4
 6285              	.LBB1765:
 6286              	.LBB1763:
 713:src/xeq.c     **** 		return 4;
 6287              		.loc 1 713 8 view .LVU1759
 6288 0002 184E     		ldr	r6, .L516
 6289 0004 3368     		ldr	r3, [r6]
 713:src/xeq.c     **** 		return 4;
 6290              		.loc 1 713 6 view .LVU1760
 6291 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 6292              		.loc 1 713 5 view .LVU1761
 6293 000a 1207     		lsls	r2, r2, #28
 6294 000c 28D5     		bpl	.L509
 6295              	.LBB1761:
 6296              	.LBI1761:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6297              		.loc 1 185 5 is_stmt 1 view .LVU1762
 6298              	.LBB1762:
 186:src/xeq.c     **** }
 6299              		.loc 1 186 2 view .LVU1763
 186:src/xeq.c     **** }
 6300              		.loc 1 186 9 is_stmt 0 view .LVU1764
 6301 000e B3F8E037 		ldrh	r3, [r3, #2016]
 6302              	.LBE1762:
 6303              	.LBE1761:
 713:src/xeq.c     **** 		return 4;
 6304              		.loc 1 713 27 view .LVU1765
 6305 0012 9B0B     		lsrs	r3, r3, #14
 6306 0014 032B     		cmp	r3, #3
 6307 0016 1BD0     		beq	.L515
 6308 0018 0724     		movs	r4, #7
 6309              	.L506:
 6310              	.LBE1763:
 6311              	.LBE1765:
 738:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 6312              		.loc 1 738 2 is_stmt 1 view .LVU1766
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6313              		.loc 1 739 2 view .LVU1767
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6314              		.loc 1 739 14 view .LVU1768
 6315 001a 6434     		adds	r4, r4, #100
 6316              	.LBB1766:
 6317              	.LBB1767:
 6318              	.LBB1768:
 6319              	.LBB1769:
1122:src/xeq.c     **** }
 6320              		.loc 1 1122 24 is_stmt 0 view .LVU1769
 6321 001c 44F20107 		movw	r7, #16385
 6322              	.L508:
ARM GAS  /tmp/cccVhVyH.s 			page 241


 6323              	.LVL462:
1122:src/xeq.c     **** }
 6324              		.loc 1 1122 24 view .LVU1770
 6325              	.LBE1769:
 6326              	.LBE1768:
 6327              	.LBE1767:
 6328              	.LBE1766:
 740:src/xeq.c     **** }
 6329              		.loc 1 740 3 is_stmt 1 view .LVU1771
 6330              	.LBB1776:
 6331              	.LBI1776:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6332              		.loc 1 718 11 view .LVU1772
 6333              	.LBB1777:
 719:src/xeq.c     **** }
 6334              		.loc 1 719 2 view .LVU1773
 719:src/xeq.c     **** }
 6335              		.loc 1 719 9 is_stmt 0 view .LVU1774
 6336 0020 2046     		mov	r0, r4
 6337 0022 FFF7FEFF 		bl	get_reg_n
 6338              	.LVL463:
 6339              	.LBE1777:
 6340              	.LBE1776:
 6341              	.LBB1779:
 6342              	.LBB1780:
 6343 0026 013C     		subs	r4, r4, #1
 6344              	.LVL464:
 719:src/xeq.c     **** }
 6345              		.loc 1 719 9 view .LVU1775
 6346              	.LBE1780:
 6347              	.LBE1779:
 6348              	.LBB1784:
 6349              	.LBB1778:
 6350 0028 0546     		mov	r5, r0
 6351              	.LBE1778:
 6352              	.LBE1784:
 6353              	.LBB1785:
 6354              	.LBB1781:
 6355 002a 2046     		mov	r0, r4
 6356              	.LVL465:
 719:src/xeq.c     **** }
 6357              		.loc 1 719 9 view .LVU1776
 6358              	.LBE1781:
 6359              	.LBI1779:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6360              		.loc 1 718 11 is_stmt 1 view .LVU1777
 6361              	.LBB1782:
 719:src/xeq.c     **** }
 6362              		.loc 1 719 2 view .LVU1778
 719:src/xeq.c     **** }
 6363              		.loc 1 719 9 is_stmt 0 view .LVU1779
 6364 002c FFF7FEFF 		bl	get_reg_n
 6365              	.LVL466:
 719:src/xeq.c     **** }
 6366              		.loc 1 719 9 view .LVU1780
 6367              	.LBE1782:
 6368              	.LBE1785:
ARM GAS  /tmp/cccVhVyH.s 			page 242


 6369              	.LBB1786:
 6370              	.LBB1774:
 6371              	.LBB1772:
 6372              	.LBB1770:
1122:src/xeq.c     **** }
 6373              		.loc 1 1122 24 view .LVU1781
 6374 0030 3368     		ldr	r3, [r6]
 6375 0032 B3F8E837 		ldrh	r3, [r3, #2024]
 6376              	.LBE1770:
 6377              	.LBE1772:
 727:src/xeq.c     **** }
 6378              		.loc 1 727 2 view .LVU1782
 6379 0036 3B40     		ands	r3, r3, r7
 6380 0038 B3F5804F 		cmp	r3, #16384
 6381              	.LBE1774:
 6382              	.LBE1786:
 6383              	.LBB1787:
 6384              	.LBB1783:
 719:src/xeq.c     **** }
 6385              		.loc 1 719 9 view .LVU1783
 6386 003c 0146     		mov	r1, r0
 6387              	.LVL467:
 719:src/xeq.c     **** }
 6388              		.loc 1 719 9 view .LVU1784
 6389              	.LBE1783:
 6390              	.LBE1787:
 6391              	.LBB1788:
 6392              	.LBI1766:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6393              		.loc 1 726 6 is_stmt 1 view .LVU1785
 6394              	.LBB1775:
 727:src/xeq.c     **** }
 6395              		.loc 1 727 2 view .LVU1786
 6396              	.LBB1773:
 6397              	.LBI1768:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6398              		.loc 1 1121 5 view .LVU1787
 6399              	.LBB1771:
1122:src/xeq.c     **** }
 6400              		.loc 1 1122 2 view .LVU1788
 6401              	.LBE1771:
 6402              	.LBE1773:
 727:src/xeq.c     **** }
 6403              		.loc 1 727 2 is_stmt 0 view .LVU1789
 6404 003e 0CBF     		ite	eq
 6405 0040 1022     		moveq	r2, #16
 6406 0042 0822     		movne	r2, #8
 6407 0044 2846     		mov	r0, r5
 6408              	.LVL468:
 727:src/xeq.c     **** }
 6409              		.loc 1 727 2 view .LVU1790
 6410 0046 FFF7FEFF 		bl	xcopy
 6411              	.LVL469:
 727:src/xeq.c     **** }
 6412              		.loc 1 727 2 view .LVU1791
 6413              	.LBE1775:
 6414              	.LBE1788:
ARM GAS  /tmp/cccVhVyH.s 			page 243


 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6415              		.loc 1 739 19 is_stmt 1 view .LVU1792
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6416              		.loc 1 739 14 view .LVU1793
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6417              		.loc 1 739 2 is_stmt 0 view .LVU1794
 6418 004a 642C     		cmp	r4, #100
 6419 004c E8D1     		bne	.L508
 741:src/xeq.c     **** 
 6420              		.loc 1 741 1 view .LVU1795
 6421 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6422              	.LVL470:
 6423              	.L515:
 6424              	.LBB1789:
 6425              	.LBB1764:
 713:src/xeq.c     **** 		return 4;
 6426              		.loc 1 713 44 view .LVU1796
 6427 0050 054B     		ldr	r3, .L516+4
 713:src/xeq.c     **** 		return 4;
 6428              		.loc 1 713 41 view .LVU1797
 6429 0052 93F90130 		ldrsb	r3, [r3, #1]
 6430 0056 002B     		cmp	r3, #0
 6431 0058 B4BF     		ite	lt
 6432 005a 0724     		movlt	r4, #7
 6433 005c 0324     		movge	r4, #3
 6434 005e DCE7     		b	.L506
 6435              	.L509:
 6436 0060 0324     		movs	r4, #3
 6437 0062 DAE7     		b	.L506
 6438              	.L517:
 6439              		.align	2
 6440              	.L516:
 6441 0064 00000000 		.word	main_ram
 6442 0068 00000000 		.word	XromParams
 6443              	.LBE1764:
 6444              	.LBE1789:
 6445              		.cfi_endproc
 6446              	.LFE47:
 6448              		.section	.text.lift_if_enabled,"ax",%progbits
 6449              		.align	1
 6450              		.p2align 2,,3
 6451              		.global	lift_if_enabled
 6452              		.syntax unified
 6453              		.thumb
 6454              		.thumb_func
 6455              		.fpu fpv4-sp-d16
 6457              	lift_if_enabled:
 6458              	.LFB49:
 747:src/xeq.c     **** 	if (get_lift())
 6459              		.loc 1 747 28 is_stmt 1 view -0
 6460              		.cfi_startproc
 6461              		@ args = 0, pretend = 0, frame = 0
 6462              		@ frame_needed = 0, uses_anonymous_args = 0
 6463              		@ link register save eliminated.
 748:src/xeq.c     **** 		lift();
 6464              		.loc 1 748 2 view .LVU1799
 6465              	.LBB1790:
ARM GAS  /tmp/cccVhVyH.s 			page 244


 6466              	.LBI1790:
 743:src/xeq.c     **** 	return State2.state_lift;
 6467              		.loc 1 743 12 view .LVU1800
 6468              	.LBB1791:
 744:src/xeq.c     **** }
 6469              		.loc 1 744 2 view .LVU1801
 744:src/xeq.c     **** }
 6470              		.loc 1 744 15 is_stmt 0 view .LVU1802
 6471 0000 034B     		ldr	r3, .L521
 6472 0002 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 6473              	.LBE1791:
 6474              	.LBE1790:
 748:src/xeq.c     **** 		lift();
 6475              		.loc 1 748 5 view .LVU1803
 6476 0004 5B06     		lsls	r3, r3, #25
 6477 0006 00D4     		bmi	.L520
 750:src/xeq.c     **** 
 6478              		.loc 1 750 1 view .LVU1804
 6479 0008 7047     		bx	lr
 6480              	.L520:
 749:src/xeq.c     **** }
 6481              		.loc 1 749 3 is_stmt 1 view .LVU1805
 6482 000a FFF7FEBF 		b	lift
 6483              	.LVL471:
 6484              	.L522:
 6485 000e 00BF     		.align	2
 6486              	.L521:
 6487 0010 00000000 		.word	StateWhileOn
 6488              		.cfi_endproc
 6489              	.LFE49:
 6491              		.section	.text.lift2_if_enabled,"ax",%progbits
 6492              		.align	1
 6493              		.p2align 2,,3
 6494              		.syntax unified
 6495              		.thumb
 6496              		.thumb_func
 6497              		.fpu fpv4-sp-d16
 6499              	lift2_if_enabled:
 6500              	.LFB50:
 752:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6501              		.loc 1 752 36 view -0
 6502              		.cfi_startproc
 6503              		@ args = 0, pretend = 0, frame = 0
 6504              		@ frame_needed = 0, uses_anonymous_args = 0
 754:src/xeq.c     **** 	if (C_LOCKED) {
 6505              		.loc 1 754 2 view .LVU1807
 6506              	.LBB1806:
 6507              	.LBI1806:
 747:src/xeq.c     **** 	if (get_lift())
 6508              		.loc 1 747 6 view .LVU1808
 6509              	.LBB1807:
 748:src/xeq.c     **** 		lift();
 6510              		.loc 1 748 2 view .LVU1809
 6511              	.LBB1808:
 6512              	.LBI1808:
 743:src/xeq.c     **** 	return State2.state_lift;
 6513              		.loc 1 743 12 view .LVU1810
ARM GAS  /tmp/cccVhVyH.s 			page 245


 6514              	.LBB1809:
 744:src/xeq.c     **** }
 6515              		.loc 1 744 2 view .LVU1811
 6516              	.LBE1809:
 6517              	.LBE1808:
 6518              	.LBE1807:
 6519              	.LBE1806:
 752:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6520              		.loc 1 752 36 is_stmt 0 view .LVU1812
 6521 0000 10B5     		push	{r4, lr}
 6522              		.cfi_def_cfa_offset 8
 6523              		.cfi_offset 4, -8
 6524              		.cfi_offset 14, -4
 6525              	.LBB1814:
 6526              	.LBB1812:
 6527              	.LBB1811:
 6528              	.LBB1810:
 744:src/xeq.c     **** }
 6529              		.loc 1 744 15 view .LVU1813
 6530 0002 0C4C     		ldr	r4, .L538
 6531 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 6532              	.LBE1810:
 6533              	.LBE1811:
 748:src/xeq.c     **** 		lift();
 6534              		.loc 1 748 5 view .LVU1814
 6535 0006 5806     		lsls	r0, r3, #25
 6536 0008 11D4     		bmi	.L537
 6537              	.L524:
 6538              	.LBE1812:
 6539              	.LBE1814:
 755:src/xeq.c     **** 		lift_if_enabled();
 6540              		.loc 1 755 2 is_stmt 1 view .LVU1815
 755:src/xeq.c     **** 		lift_if_enabled();
 6541              		.loc 1 755 6 is_stmt 0 view .LVU1816
 6542 000a 0B4B     		ldr	r3, .L538+4
 6543 000c 1B68     		ldr	r3, [r3]
 6544 000e 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 755:src/xeq.c     **** 		lift_if_enabled();
 6545              		.loc 1 755 5 view .LVU1817
 6546 0012 5107     		lsls	r1, r2, #29
 6547 0014 07D5     		bpl	.L525
 755:src/xeq.c     **** 		lift_if_enabled();
 6548              		.loc 1 755 6 discriminator 1 view .LVU1818
 6549 0016 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 6550 001a 5A07     		lsls	r2, r3, #29
 6551 001c 03D5     		bpl	.L525
 6552              	.LBB1815:
 6553              	.LBI1815:
 752:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6554              		.loc 1 752 13 is_stmt 1 view .LVU1819
 6555              	.LBE1815:
 756:src/xeq.c     **** 	}
 6556              		.loc 1 756 3 view .LVU1820
 6557              	.LBB1824:
 6558              	.LBB1816:
 6559              	.LBI1816:
 747:src/xeq.c     **** 	if (get_lift())
ARM GAS  /tmp/cccVhVyH.s 			page 246


 6560              		.loc 1 747 6 view .LVU1821
 6561              	.LBB1817:
 748:src/xeq.c     **** 		lift();
 6562              		.loc 1 748 2 view .LVU1822
 6563              	.LBB1818:
 6564              	.LBI1818:
 743:src/xeq.c     **** 	return State2.state_lift;
 6565              		.loc 1 743 12 view .LVU1823
 6566              	.LBB1819:
 744:src/xeq.c     **** }
 6567              		.loc 1 744 2 view .LVU1824
 744:src/xeq.c     **** }
 6568              		.loc 1 744 15 is_stmt 0 view .LVU1825
 6569 001e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 6570              	.LBE1819:
 6571              	.LBE1818:
 748:src/xeq.c     **** 		lift();
 6572              		.loc 1 748 5 view .LVU1826
 6573 0020 5B06     		lsls	r3, r3, #25
 6574 0022 00D4     		bmi	.L525
 6575              	.LBE1817:
 6576              	.LBE1816:
 6577              	.LBE1824:
 765:src/xeq.c     **** 
 6578              		.loc 1 765 1 view .LVU1827
 6579 0024 10BD     		pop	{r4, pc}
 6580              	.L525:
 6581              	.LBB1825:
 6582              	.LBB1822:
 6583              	.LBB1820:
 749:src/xeq.c     **** }
 6584              		.loc 1 749 3 is_stmt 1 view .LVU1828
 6585              	.LBE1820:
 6586              	.LBE1822:
 6587              	.LBE1825:
 765:src/xeq.c     **** 
 6588              		.loc 1 765 1 is_stmt 0 view .LVU1829
 6589 0026 BDE81040 		pop	{r4, lr}
 6590              		.cfi_remember_state
 6591              		.cfi_restore 14
 6592              		.cfi_restore 4
 6593              		.cfi_def_cfa_offset 0
 6594              	.LBB1826:
 6595              	.LBB1823:
 6596              	.LBB1821:
 749:src/xeq.c     **** }
 6597              		.loc 1 749 3 view .LVU1830
 6598 002a FFF7FEBF 		b	lift
 6599              	.LVL472:
 6600              	.L537:
 6601              		.cfi_restore_state
 6602              	.LBE1821:
 6603              	.LBE1823:
 6604              	.LBE1826:
 6605              	.LBB1827:
 6606              	.LBB1813:
 749:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 247


 6607              		.loc 1 749 3 is_stmt 1 view .LVU1831
 6608 002e FFF7FEFF 		bl	lift
 6609              	.LVL473:
 6610 0032 EAE7     		b	.L524
 6611              	.L539:
 6612              		.align	2
 6613              	.L538:
 6614 0034 00000000 		.word	StateWhileOn
 6615 0038 00000000 		.word	main_ram
 6616              	.LBE1813:
 6617              	.LBE1827:
 6618              		.cfi_endproc
 6619              	.LFE50:
 6621              		.section	.text.lower,"ax",%progbits
 6622              		.align	1
 6623              		.p2align 2,,3
 6624              		.syntax unified
 6625              		.thumb
 6626              		.thumb_func
 6627              		.fpu fpv4-sp-d16
 6629              	lower:
 6630              	.LFB53:
 775:src/xeq.c     **** 	const int n = stack_size();
 6631              		.loc 1 775 25 view -0
 6632              		.cfi_startproc
 6633              		@ args = 0, pretend = 0, frame = 0
 6634              		@ frame_needed = 0, uses_anonymous_args = 0
 776:src/xeq.c     **** 	int i;
 6635              		.loc 1 776 2 view .LVU1833
 6636              	.LBB1828:
 6637              	.LBI1828:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6638              		.loc 1 712 5 view .LVU1834
 6639              	.LBB1829:
 713:src/xeq.c     **** 		return 4;
 6640              		.loc 1 713 2 view .LVU1835
 6641              	.LBE1829:
 6642              	.LBE1828:
 775:src/xeq.c     **** 	const int n = stack_size();
 6643              		.loc 1 775 25 is_stmt 0 view .LVU1836
 6644 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6645              		.cfi_def_cfa_offset 24
 6646              		.cfi_offset 4, -24
 6647              		.cfi_offset 5, -20
 6648              		.cfi_offset 6, -16
 6649              		.cfi_offset 7, -12
 6650              		.cfi_offset 8, -8
 6651              		.cfi_offset 14, -4
 6652              	.LBB1835:
 6653              	.LBB1832:
 713:src/xeq.c     **** 		return 4;
 6654              		.loc 1 713 8 view .LVU1837
 6655 0004 194F     		ldr	r7, .L551
 6656 0006 3B68     		ldr	r3, [r7]
 713:src/xeq.c     **** 		return 4;
 6657              		.loc 1 713 6 view .LVU1838
 6658 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
ARM GAS  /tmp/cccVhVyH.s 			page 248


 713:src/xeq.c     **** 		return 4;
 6659              		.loc 1 713 5 view .LVU1839
 6660 000c 1207     		lsls	r2, r2, #28
 6661 000e 2BD5     		bpl	.L544
 6662              	.LBB1830:
 6663              	.LBI1830:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6664              		.loc 1 185 5 is_stmt 1 view .LVU1840
 6665              	.LBB1831:
 186:src/xeq.c     **** }
 6666              		.loc 1 186 2 view .LVU1841
 186:src/xeq.c     **** }
 6667              		.loc 1 186 9 is_stmt 0 view .LVU1842
 6668 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 6669              	.LBE1831:
 6670              	.LBE1830:
 713:src/xeq.c     **** 		return 4;
 6671              		.loc 1 713 27 view .LVU1843
 6672 0014 9B0B     		lsrs	r3, r3, #14
 6673 0016 032B     		cmp	r3, #3
 6674 0018 1ED0     		beq	.L550
 715:src/xeq.c     **** }
 6675              		.loc 1 715 9 view .LVU1844
 6676 001a 0826     		movs	r6, #8
 6677              	.L541:
 6678              	.LVL474:
 715:src/xeq.c     **** }
 6679              		.loc 1 715 9 view .LVU1845
 6680              	.LBE1832:
 6681              	.LBE1835:
 777:src/xeq.c     **** 
 6682              		.loc 1 777 2 is_stmt 1 view .LVU1846
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6683              		.loc 1 779 2 view .LVU1847
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6684              		.loc 1 779 12 view .LVU1848
 6685 001c 6336     		adds	r6, r6, #99
 6686              	.LVL475:
 6687              	.LBB1836:
 6688              	.LBB1833:
 714:src/xeq.c     **** 	return 8;
 6689              		.loc 1 714 10 is_stmt 0 view .LVU1849
 6690 001e 6424     		movs	r4, #100
 6691              	.LBE1833:
 6692              	.LBE1836:
 6693              	.LBB1837:
 6694              	.LBB1838:
 6695              	.LBB1839:
 6696              	.LBB1840:
1122:src/xeq.c     **** }
 6697              		.loc 1 1122 24 view .LVU1850
 6698 0020 44F20108 		movw	r8, #16385
 6699              	.LVL476:
 6700              	.L543:
1122:src/xeq.c     **** }
 6701              		.loc 1 1122 24 view .LVU1851
 6702              	.LBE1840:
ARM GAS  /tmp/cccVhVyH.s 			page 249


 6703              	.LBE1839:
 6704              	.LBE1838:
 6705              	.LBE1837:
 780:src/xeq.c     **** }
 6706              		.loc 1 780 3 is_stmt 1 discriminator 3 view .LVU1852
 6707              	.LBB1847:
 6708              	.LBI1847:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6709              		.loc 1 718 11 discriminator 3 view .LVU1853
 6710              	.LBB1848:
 719:src/xeq.c     **** }
 6711              		.loc 1 719 2 discriminator 3 view .LVU1854
 719:src/xeq.c     **** }
 6712              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU1855
 6713 0024 2046     		mov	r0, r4
 6714 0026 FFF7FEFF 		bl	get_reg_n
 6715              	.LVL477:
 6716 002a 0134     		adds	r4, r4, #1
 6717              	.LVL478:
 719:src/xeq.c     **** }
 6718              		.loc 1 719 9 discriminator 3 view .LVU1856
 6719 002c 0546     		mov	r5, r0
 6720              	.LBE1848:
 6721              	.LBE1847:
 6722              	.LBB1849:
 6723              	.LBB1850:
 6724 002e 2046     		mov	r0, r4
 6725              	.LVL479:
 719:src/xeq.c     **** }
 6726              		.loc 1 719 9 discriminator 3 view .LVU1857
 6727              	.LBE1850:
 6728              	.LBI1849:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6729              		.loc 1 718 11 is_stmt 1 discriminator 3 view .LVU1858
 6730              	.LBB1851:
 719:src/xeq.c     **** }
 6731              		.loc 1 719 2 discriminator 3 view .LVU1859
 719:src/xeq.c     **** }
 6732              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU1860
 6733 0030 FFF7FEFF 		bl	get_reg_n
 6734              	.LVL480:
 719:src/xeq.c     **** }
 6735              		.loc 1 719 9 discriminator 3 view .LVU1861
 6736              	.LBE1851:
 6737              	.LBE1849:
 6738              	.LBB1853:
 6739              	.LBB1845:
 6740              	.LBB1843:
 6741              	.LBB1841:
1122:src/xeq.c     **** }
 6742              		.loc 1 1122 24 discriminator 3 view .LVU1862
 6743 0034 3B68     		ldr	r3, [r7]
 6744 0036 B3F8E837 		ldrh	r3, [r3, #2024]
 6745              	.LBE1841:
 6746              	.LBE1843:
 727:src/xeq.c     **** }
 6747              		.loc 1 727 2 discriminator 3 view .LVU1863
ARM GAS  /tmp/cccVhVyH.s 			page 250


 6748 003a 08EA0303 		and	r3, r8, r3
 6749 003e B3F5804F 		cmp	r3, #16384
 6750              	.LBE1845:
 6751              	.LBE1853:
 6752              	.LBB1854:
 6753              	.LBB1852:
 719:src/xeq.c     **** }
 6754              		.loc 1 719 9 discriminator 3 view .LVU1864
 6755 0042 0146     		mov	r1, r0
 6756              	.LVL481:
 719:src/xeq.c     **** }
 6757              		.loc 1 719 9 discriminator 3 view .LVU1865
 6758              	.LBE1852:
 6759              	.LBE1854:
 6760              	.LBB1855:
 6761              	.LBI1837:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6762              		.loc 1 726 6 is_stmt 1 discriminator 3 view .LVU1866
 6763              	.LBB1846:
 727:src/xeq.c     **** }
 6764              		.loc 1 727 2 discriminator 3 view .LVU1867
 6765              	.LBB1844:
 6766              	.LBI1839:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6767              		.loc 1 1121 5 discriminator 3 view .LVU1868
 6768              	.LBB1842:
1122:src/xeq.c     **** }
 6769              		.loc 1 1122 2 discriminator 3 view .LVU1869
 6770              	.LBE1842:
 6771              	.LBE1844:
 727:src/xeq.c     **** }
 6772              		.loc 1 727 2 is_stmt 0 discriminator 3 view .LVU1870
 6773 0044 0CBF     		ite	eq
 6774 0046 1022     		moveq	r2, #16
 6775 0048 0822     		movne	r2, #8
 6776 004a 2846     		mov	r0, r5
 6777              	.LVL482:
 727:src/xeq.c     **** }
 6778              		.loc 1 727 2 discriminator 3 view .LVU1871
 6779 004c FFF7FEFF 		bl	xcopy
 6780              	.LVL483:
 727:src/xeq.c     **** }
 6781              		.loc 1 727 2 discriminator 3 view .LVU1872
 6782              	.LBE1846:
 6783              	.LBE1855:
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6784              		.loc 1 779 17 is_stmt 1 discriminator 3 view .LVU1873
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6785              		.loc 1 779 12 discriminator 3 view .LVU1874
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6786              		.loc 1 779 2 is_stmt 0 discriminator 3 view .LVU1875
 6787 0050 B442     		cmp	r4, r6
 6788 0052 E7D1     		bne	.L543
 781:src/xeq.c     **** 
 6789              		.loc 1 781 1 view .LVU1876
 6790 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6791              	.LVL484:
ARM GAS  /tmp/cccVhVyH.s 			page 251


 6792              	.L550:
 6793              	.LBB1856:
 6794              	.LBB1834:
 713:src/xeq.c     **** 		return 4;
 6795              		.loc 1 713 44 view .LVU1877
 6796 0058 054B     		ldr	r3, .L551+4
 713:src/xeq.c     **** 		return 4;
 6797              		.loc 1 713 41 view .LVU1878
 6798 005a 93F90130 		ldrsb	r3, [r3, #1]
 714:src/xeq.c     **** 	return 8;
 6799              		.loc 1 714 10 view .LVU1879
 6800 005e 002B     		cmp	r3, #0
 6801 0060 B4BF     		ite	lt
 6802 0062 0826     		movlt	r6, #8
 6803 0064 0426     		movge	r6, #4
 6804 0066 D9E7     		b	.L541
 6805              	.L544:
 6806 0068 0426     		movs	r6, #4
 6807 006a D7E7     		b	.L541
 6808              	.L552:
 6809              		.align	2
 6810              	.L551:
 6811 006c 00000000 		.word	main_ram
 6812 0070 00000000 		.word	XromParams
 6813              	.LBE1834:
 6814              	.LBE1856:
 6815              		.cfi_endproc
 6816              	.LFE53:
 6818              		.section	.text.get_stack_top,"ax",%progbits
 6819              		.align	1
 6820              		.p2align 2,,3
 6821              		.syntax unified
 6822              		.thumb
 6823              		.thumb_func
 6824              		.fpu fpv4-sp-d16
 6826              	get_stack_top:
 6827              	.LFB44:
 722:src/xeq.c     **** 	return get_stack(stack_size()-1);
 6828              		.loc 1 722 38 is_stmt 1 view -0
 6829              		.cfi_startproc
 6830              		@ args = 0, pretend = 0, frame = 0
 6831              		@ frame_needed = 0, uses_anonymous_args = 0
 6832              		@ link register save eliminated.
 723:src/xeq.c     **** }
 6833              		.loc 1 723 2 view .LVU1881
 6834              	.LBB1857:
 6835              	.LBI1857:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6836              		.loc 1 712 5 view .LVU1882
 6837              	.LBB1858:
 713:src/xeq.c     **** 		return 4;
 6838              		.loc 1 713 2 view .LVU1883
 713:src/xeq.c     **** 		return 4;
 6839              		.loc 1 713 8 is_stmt 0 view .LVU1884
 6840 0000 0C4B     		ldr	r3, .L559
 6841 0002 1B68     		ldr	r3, [r3]
 713:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/cccVhVyH.s 			page 252


 6842              		.loc 1 713 6 view .LVU1885
 6843 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 6844              		.loc 1 713 5 view .LVU1886
 6845 0008 1207     		lsls	r2, r2, #28
 6846 000a 10D5     		bpl	.L555
 6847              	.LBB1859:
 6848              	.LBI1859:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6849              		.loc 1 185 5 is_stmt 1 view .LVU1887
 6850              	.LBB1860:
 186:src/xeq.c     **** }
 6851              		.loc 1 186 2 view .LVU1888
 186:src/xeq.c     **** }
 6852              		.loc 1 186 9 is_stmt 0 view .LVU1889
 6853 000c B3F8E037 		ldrh	r3, [r3, #2016]
 6854              	.LBE1860:
 6855              	.LBE1859:
 713:src/xeq.c     **** 		return 4;
 6856              		.loc 1 713 27 view .LVU1890
 6857 0010 9B0B     		lsrs	r3, r3, #14
 6858 0012 032B     		cmp	r3, #3
 6859 0014 02D0     		beq	.L558
 6860 0016 6B20     		movs	r0, #107
 6861              	.LBE1858:
 6862              	.LBE1857:
 6863              	.LBB1863:
 6864              	.LBI1863:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6865              		.loc 1 718 11 is_stmt 1 view .LVU1891
 6866              	.LBB1864:
 719:src/xeq.c     **** }
 6867              		.loc 1 719 2 view .LVU1892
 719:src/xeq.c     **** }
 6868              		.loc 1 719 9 is_stmt 0 view .LVU1893
 6869 0018 FFF7FEBF 		b	get_reg_n
 6870              	.LVL485:
 6871              	.L558:
 6872              	.LBE1864:
 6873              	.LBE1863:
 6874              	.LBB1867:
 6875              	.LBB1861:
 713:src/xeq.c     **** 		return 4;
 6876              		.loc 1 713 44 view .LVU1894
 6877 001c 064B     		ldr	r3, .L559+4
 713:src/xeq.c     **** 		return 4;
 6878              		.loc 1 713 41 view .LVU1895
 6879 001e 93F90130 		ldrsb	r3, [r3, #1]
 6880 0022 002B     		cmp	r3, #0
 6881 0024 B4BF     		ite	lt
 6882 0026 6B20     		movlt	r0, #107
 6883 0028 6720     		movge	r0, #103
 6884              	.LBE1861:
 6885              	.LBE1867:
 6886              	.LBB1868:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6887              		.loc 1 718 11 is_stmt 1 view .LVU1896
ARM GAS  /tmp/cccVhVyH.s 			page 253


 6888              	.LBB1865:
 719:src/xeq.c     **** }
 6889              		.loc 1 719 2 view .LVU1897
 719:src/xeq.c     **** }
 6890              		.loc 1 719 9 is_stmt 0 view .LVU1898
 6891 002a FFF7FEBF 		b	get_reg_n
 6892              	.LVL486:
 6893              	.L555:
 6894              	.LBE1865:
 6895              	.LBE1868:
 6896              	.LBB1869:
 6897              	.LBB1862:
 6898 002e 6720     		movs	r0, #103
 6899              	.LBE1862:
 6900              	.LBE1869:
 6901              	.LBB1870:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6902              		.loc 1 718 11 is_stmt 1 view .LVU1899
 6903              	.LBB1866:
 719:src/xeq.c     **** }
 6904              		.loc 1 719 2 view .LVU1900
 719:src/xeq.c     **** }
 6905              		.loc 1 719 9 is_stmt 0 view .LVU1901
 6906 0030 FFF7FEBF 		b	get_reg_n
 6907              	.LVL487:
 6908              	.L560:
 6909              		.align	2
 6910              	.L559:
 6911 0034 00000000 		.word	main_ram
 6912 0038 00000000 		.word	XromParams
 6913              	.LBE1866:
 6914              	.LBE1870:
 6915              		.cfi_endproc
 6916              	.LFE44:
 6918              		.section	.text.roll_down,"ax",%progbits
 6919              		.align	1
 6920              		.p2align 2,,3
 6921              		.global	roll_down
 6922              		.syntax unified
 6923              		.thumb
 6924              		.thumb_func
 6925              		.fpu fpv4-sp-d16
 6927              	roll_down:
 6928              	.LVL488:
 6929              	.LFB70:
 889:src/xeq.c     **** 	REGISTER r;
 6930              		.loc 1 889 31 is_stmt 1 view -0
 6931              		.cfi_startproc
 6932              		@ args = 0, pretend = 0, frame = 16
 6933              		@ frame_needed = 0, uses_anonymous_args = 0
 890:src/xeq.c     **** 	copyreg(&r, StackBase);
 6934              		.loc 1 890 2 view .LVU1903
 891:src/xeq.c     **** 	lower();
 6935              		.loc 1 891 2 view .LVU1904
 889:src/xeq.c     **** 	REGISTER r;
 6936              		.loc 1 889 31 is_stmt 0 view .LVU1905
 6937 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/cccVhVyH.s 			page 254


 6938              		.cfi_def_cfa_offset 12
 6939              		.cfi_offset 4, -12
 6940              		.cfi_offset 5, -8
 6941              		.cfi_offset 14, -4
 6942              	.LBB1871:
 6943              	.LBB1872:
 6944              	.LBB1873:
 6945              	.LBB1874:
1122:src/xeq.c     **** }
 6946              		.loc 1 1122 24 view .LVU1906
 6947 0002 124D     		ldr	r5, .L567
 6948              	.LBE1874:
 6949              	.LBE1873:
 6950              	.LBE1872:
 6951              	.LBE1871:
 891:src/xeq.c     **** 	lower();
 6952              		.loc 1 891 2 view .LVU1907
 6953 0004 124A     		ldr	r2, .L567+4
 6954              	.LBB1883:
 6955              	.LBB1881:
 6956              	.LBB1878:
 6957              	.LBB1875:
1122:src/xeq.c     **** }
 6958              		.loc 1 1122 24 view .LVU1908
 6959 0006 2B68     		ldr	r3, [r5]
 6960              	.LBE1875:
 6961              	.LBE1878:
 727:src/xeq.c     **** }
 6962              		.loc 1 727 2 view .LVU1909
 6963 0008 1168     		ldr	r1, [r2]
 6964              	.LBB1879:
 6965              	.LBB1876:
1122:src/xeq.c     **** }
 6966              		.loc 1 1122 24 view .LVU1910
 6967 000a B3F8E837 		ldrh	r3, [r3, #2024]
 6968 000e 44F20104 		movw	r4, #16385
 6969              	.LBE1876:
 6970              	.LBE1879:
 727:src/xeq.c     **** }
 6971              		.loc 1 727 2 view .LVU1911
 6972 0012 2340     		ands	r3, r3, r4
 6973              	.LBE1881:
 6974              	.LBE1883:
 889:src/xeq.c     **** 	REGISTER r;
 6975              		.loc 1 889 31 view .LVU1912
 6976 0014 85B0     		sub	sp, sp, #20
 6977              		.cfi_def_cfa_offset 32
 6978              	.LVL489:
 6979              	.LBB1884:
 6980              	.LBI1871:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6981              		.loc 1 726 6 is_stmt 1 view .LVU1913
 6982              	.LBB1882:
 727:src/xeq.c     **** }
 6983              		.loc 1 727 2 view .LVU1914
 6984              	.LBB1880:
 6985              	.LBI1873:
ARM GAS  /tmp/cccVhVyH.s 			page 255


1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6986              		.loc 1 1121 5 view .LVU1915
 6987              	.LBB1877:
1122:src/xeq.c     **** }
 6988              		.loc 1 1122 2 view .LVU1916
 6989              	.LBE1877:
 6990              	.LBE1880:
 727:src/xeq.c     **** }
 6991              		.loc 1 727 2 is_stmt 0 view .LVU1917
 6992 0016 B3F5804F 		cmp	r3, #16384
 6993 001a 0CBF     		ite	eq
 6994 001c 1022     		moveq	r2, #16
 6995 001e 0822     		movne	r2, #8
 6996 0020 6846     		mov	r0, sp
 6997              	.LVL490:
 727:src/xeq.c     **** }
 6998              		.loc 1 727 2 view .LVU1918
 6999 0022 FFF7FEFF 		bl	xcopy
 7000              	.LVL491:
 727:src/xeq.c     **** }
 7001              		.loc 1 727 2 view .LVU1919
 7002              	.LBE1882:
 7003              	.LBE1884:
 892:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 7004              		.loc 1 892 2 is_stmt 1 view .LVU1920
 7005 0026 FFF7FEFF 		bl	lower
 7006              	.LVL492:
 893:src/xeq.c     **** }
 7007              		.loc 1 893 2 view .LVU1921
 7008 002a FFF7FEFF 		bl	get_stack_top
 7009              	.LVL493:
 7010              	.LBB1885:
 7011              	.LBI1885:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7012              		.loc 1 726 6 view .LVU1922
 7013              	.LBB1886:
 727:src/xeq.c     **** }
 7014              		.loc 1 727 2 view .LVU1923
 7015              	.LBB1887:
 7016              	.LBI1887:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7017              		.loc 1 1121 5 view .LVU1924
 7018              	.LBB1888:
1122:src/xeq.c     **** }
 7019              		.loc 1 1122 2 view .LVU1925
1122:src/xeq.c     **** }
 7020              		.loc 1 1122 24 is_stmt 0 view .LVU1926
 7021 002e 2B68     		ldr	r3, [r5]
 7022 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7023              	.LBE1888:
 7024              	.LBE1887:
 727:src/xeq.c     **** }
 7025              		.loc 1 727 2 view .LVU1927
 7026 0034 1C40     		ands	r4, r4, r3
 7027 0036 B4F5804F 		cmp	r4, #16384
 7028 003a 6946     		mov	r1, sp
 7029 003c 0CBF     		ite	eq
ARM GAS  /tmp/cccVhVyH.s 			page 256


 7030 003e 1022     		moveq	r2, #16
 7031 0040 0822     		movne	r2, #8
 7032 0042 FFF7FEFF 		bl	xcopy
 7033              	.LVL494:
 727:src/xeq.c     **** }
 7034              		.loc 1 727 2 view .LVU1928
 7035              	.LBE1886:
 7036              	.LBE1885:
 894:src/xeq.c     **** 
 7037              		.loc 1 894 1 view .LVU1929
 7038 0046 05B0     		add	sp, sp, #20
 7039              		.cfi_def_cfa_offset 12
 7040              		@ sp needed
 7041 0048 30BD     		pop	{r4, r5, pc}
 7042              	.L568:
 7043 004a 00BF     		.align	2
 7044              	.L567:
 7045 004c 00000000 		.word	main_ram
 7046 0050 00000000 		.word	StackBase
 7047              		.cfi_endproc
 7048              	.LFE70:
 7050              		.section	.text.cpx_roll_down,"ax",%progbits
 7051              		.align	1
 7052              		.p2align 2,,3
 7053              		.global	cpx_roll_down
 7054              		.syntax unified
 7055              		.thumb
 7056              		.thumb_func
 7057              		.fpu fpv4-sp-d16
 7059              	cpx_roll_down:
 7060              	.LVL495:
 7061              	.LFB72:
 903:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7062              		.loc 1 903 35 is_stmt 1 view -0
 7063              		.cfi_startproc
 7064              		@ args = 0, pretend = 0, frame = 0
 7065              		@ frame_needed = 0, uses_anonymous_args = 0
 904:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7066              		.loc 1 904 2 view .LVU1931
 903:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7067              		.loc 1 903 35 is_stmt 0 view .LVU1932
 7068 0000 08B5     		push	{r3, lr}
 7069              		.cfi_def_cfa_offset 8
 7070              		.cfi_offset 3, -8
 7071              		.cfi_offset 14, -4
 904:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7072              		.loc 1 904 2 view .LVU1933
 7073 0002 0720     		movs	r0, #7
 7074              	.LVL496:
 904:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7075              		.loc 1 904 2 view .LVU1934
 7076 0004 FFF7FEFF 		bl	roll_down
 7077              	.LVL497:
 905:src/xeq.c     **** 	set_was_complex();
 7078              		.loc 1 905 2 is_stmt 1 view .LVU1935
 7079 0008 0720     		movs	r0, #7
 7080 000a FFF7FEFF 		bl	roll_down
ARM GAS  /tmp/cccVhVyH.s 			page 257


 7081              	.LVL498:
 906:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 7082              		.loc 1 906 2 view .LVU1936
 7083              	.LBB1889:
 7084              	.LBI1889:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 7085              		.loc 1 539 13 view .LVU1937
 7086              	.LBB1890:
 540:src/xeq.c     **** }
 7087              		.loc 1 540 2 view .LVU1938
 540:src/xeq.c     **** }
 7088              		.loc 1 540 20 is_stmt 0 view .LVU1939
 7089 000e 074B     		ldr	r3, .L571
 7090              	.LBE1890:
 7091              	.LBE1889:
 908:src/xeq.c     **** #endif
 7092              		.loc 1 908 2 view .LVU1940
 7093 0010 074A     		ldr	r2, .L571+4
 7094              	.LBB1893:
 7095              	.LBB1891:
 540:src/xeq.c     **** }
 7096              		.loc 1 540 20 view .LVU1941
 7097 0012 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 7098              	.LBE1891:
 7099              	.LBE1893:
 908:src/xeq.c     **** #endif
 7100              		.loc 1 908 2 view .LVU1942
 7101 0014 1268     		ldr	r2, [r2]
 7102              	.LBB1894:
 7103              	.LBB1892:
 540:src/xeq.c     **** }
 7104              		.loc 1 540 20 view .LVU1943
 7105 0016 0120     		movs	r0, #1
 7106 0018 60F38711 		bfi	r1, r0, #6, #2
 7107 001c 1975     		strb	r1, [r3, #20]
 7108              	.LBE1892:
 7109              	.LBE1894:
 908:src/xeq.c     **** #endif
 7110              		.loc 1 908 2 is_stmt 1 view .LVU1944
 7111 001e 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 7112 0022 43F01003 		orr	r3, r3, #16
 7113 0026 82F8DE37 		strb	r3, [r2, #2014]
 910:src/xeq.c     **** 
 7114              		.loc 1 910 1 is_stmt 0 view .LVU1945
 7115 002a 08BD     		pop	{r3, pc}
 7116              	.L572:
 7117              		.align	2
 7118              	.L571:
 7119 002c 00000000 		.word	StateWhileOn
 7120 0030 00000000 		.word	main_ram
 7121              		.cfi_endproc
 7122              	.LFE72:
 7124              		.section	.text.roll_up,"ax",%progbits
 7125              		.align	1
 7126              		.p2align 2,,3
 7127              		.global	roll_up
 7128              		.syntax unified
ARM GAS  /tmp/cccVhVyH.s 			page 258


 7129              		.thumb
 7130              		.thumb_func
 7131              		.fpu fpv4-sp-d16
 7133              	roll_up:
 7134              	.LVL499:
 7135              	.LFB71:
 896:src/xeq.c     **** 	REGISTER r;
 7136              		.loc 1 896 29 is_stmt 1 view -0
 7137              		.cfi_startproc
 7138              		@ args = 0, pretend = 0, frame = 16
 7139              		@ frame_needed = 0, uses_anonymous_args = 0
 897:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 7140              		.loc 1 897 2 view .LVU1947
 898:src/xeq.c     **** 	lift();
 7141              		.loc 1 898 2 view .LVU1948
 896:src/xeq.c     **** 	REGISTER r;
 7142              		.loc 1 896 29 is_stmt 0 view .LVU1949
 7143 0000 30B5     		push	{r4, r5, lr}
 7144              		.cfi_def_cfa_offset 12
 7145              		.cfi_offset 4, -12
 7146              		.cfi_offset 5, -8
 7147              		.cfi_offset 14, -4
 7148              	.LBB1895:
 7149              	.LBB1896:
 7150              	.LBB1897:
 7151              	.LBB1898:
1122:src/xeq.c     **** }
 7152              		.loc 1 1122 24 view .LVU1950
 7153 0002 124D     		ldr	r5, .L579
 7154              	.LBE1898:
 7155              	.LBE1897:
 7156              	.LBE1896:
 7157              	.LBE1895:
 896:src/xeq.c     **** 	REGISTER r;
 7158              		.loc 1 896 29 view .LVU1951
 7159 0004 85B0     		sub	sp, sp, #20
 7160              		.cfi_def_cfa_offset 32
 898:src/xeq.c     **** 	lift();
 7161              		.loc 1 898 14 view .LVU1952
 7162 0006 FFF7FEFF 		bl	get_stack_top
 7163              	.LVL500:
 7164              	.LBB1905:
 7165              	.LBB1903:
 7166              	.LBB1901:
 7167              	.LBB1899:
1122:src/xeq.c     **** }
 7168              		.loc 1 1122 24 view .LVU1953
 7169 000a 2B68     		ldr	r3, [r5]
 7170 000c B3F8E837 		ldrh	r3, [r3, #2024]
 7171 0010 44F20104 		movw	r4, #16385
 7172              	.LBE1899:
 7173              	.LBE1901:
 727:src/xeq.c     **** }
 7174              		.loc 1 727 2 view .LVU1954
 7175 0014 2340     		ands	r3, r3, r4
 7176 0016 B3F5804F 		cmp	r3, #16384
 7177              	.LBE1903:
ARM GAS  /tmp/cccVhVyH.s 			page 259


 7178              	.LBE1905:
 898:src/xeq.c     **** 	lift();
 7179              		.loc 1 898 14 view .LVU1955
 7180 001a 0146     		mov	r1, r0
 7181              	.LVL501:
 7182              	.LBB1906:
 7183              	.LBI1895:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7184              		.loc 1 726 6 is_stmt 1 view .LVU1956
 7185              	.LBB1904:
 727:src/xeq.c     **** }
 7186              		.loc 1 727 2 view .LVU1957
 7187              	.LBB1902:
 7188              	.LBI1897:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7189              		.loc 1 1121 5 view .LVU1958
 7190              	.LBB1900:
1122:src/xeq.c     **** }
 7191              		.loc 1 1122 2 view .LVU1959
 7192              	.LBE1900:
 7193              	.LBE1902:
 727:src/xeq.c     **** }
 7194              		.loc 1 727 2 is_stmt 0 view .LVU1960
 7195 001c 0CBF     		ite	eq
 7196 001e 1022     		moveq	r2, #16
 7197 0020 0822     		movne	r2, #8
 7198 0022 6846     		mov	r0, sp
 7199              	.LVL502:
 727:src/xeq.c     **** }
 7200              		.loc 1 727 2 view .LVU1961
 7201 0024 FFF7FEFF 		bl	xcopy
 7202              	.LVL503:
 727:src/xeq.c     **** }
 7203              		.loc 1 727 2 view .LVU1962
 7204              	.LBE1904:
 7205              	.LBE1906:
 899:src/xeq.c     **** 	copyreg(StackBase, &r);
 7206              		.loc 1 899 2 is_stmt 1 view .LVU1963
 7207 0028 FFF7FEFF 		bl	lift
 7208              	.LVL504:
 900:src/xeq.c     **** }
 7209              		.loc 1 900 2 view .LVU1964
 7210              	.LBB1907:
 7211              	.LBB1908:
 7212              	.LBB1909:
 7213              	.LBB1910:
1122:src/xeq.c     **** }
 7214              		.loc 1 1122 24 is_stmt 0 view .LVU1965
 7215 002c 2B68     		ldr	r3, [r5]
 7216              	.LBE1910:
 7217              	.LBE1909:
 7218              	.LBE1908:
 7219              	.LBE1907:
 900:src/xeq.c     **** }
 7220              		.loc 1 900 2 view .LVU1966
 7221 002e 084A     		ldr	r2, .L579+4
 7222              	.LVL505:
ARM GAS  /tmp/cccVhVyH.s 			page 260


 7223              	.LBB1914:
 7224              	.LBI1907:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7225              		.loc 1 726 6 is_stmt 1 view .LVU1967
 7226              	.LBB1913:
 727:src/xeq.c     **** }
 7227              		.loc 1 727 2 view .LVU1968
 7228              	.LBB1912:
 7229              	.LBI1909:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7230              		.loc 1 1121 5 view .LVU1969
 7231              	.LBB1911:
1122:src/xeq.c     **** }
 7232              		.loc 1 1122 2 view .LVU1970
1122:src/xeq.c     **** }
 7233              		.loc 1 1122 24 is_stmt 0 view .LVU1971
 7234 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7235              	.LBE1911:
 7236              	.LBE1912:
 727:src/xeq.c     **** }
 7237              		.loc 1 727 2 view .LVU1972
 7238 0034 1068     		ldr	r0, [r2]
 7239 0036 1C40     		ands	r4, r4, r3
 7240 0038 B4F5804F 		cmp	r4, #16384
 7241 003c 6946     		mov	r1, sp
 7242 003e 0CBF     		ite	eq
 7243 0040 1022     		moveq	r2, #16
 7244              	.LVL506:
 727:src/xeq.c     **** }
 7245              		.loc 1 727 2 view .LVU1973
 7246 0042 0822     		movne	r2, #8
 7247 0044 FFF7FEFF 		bl	xcopy
 7248              	.LVL507:
 727:src/xeq.c     **** }
 7249              		.loc 1 727 2 view .LVU1974
 7250              	.LBE1913:
 7251              	.LBE1914:
 901:src/xeq.c     **** 
 7252              		.loc 1 901 1 view .LVU1975
 7253 0048 05B0     		add	sp, sp, #20
 7254              		.cfi_def_cfa_offset 12
 7255              		@ sp needed
 7256 004a 30BD     		pop	{r4, r5, pc}
 7257              	.L580:
 7258              		.align	2
 7259              	.L579:
 7260 004c 00000000 		.word	main_ram
 7261 0050 00000000 		.word	StackBase
 7262              		.cfi_endproc
 7263              	.LFE71:
 7265              		.section	.text.cpx_roll_up,"ax",%progbits
 7266              		.align	1
 7267              		.p2align 2,,3
 7268              		.global	cpx_roll_up
 7269              		.syntax unified
 7270              		.thumb
 7271              		.thumb_func
ARM GAS  /tmp/cccVhVyH.s 			page 261


 7272              		.fpu fpv4-sp-d16
 7274              	cpx_roll_up:
 7275              	.LVL508:
 7276              	.LFB73:
 912:src/xeq.c     **** 	roll_up(OP_RUP);
 7277              		.loc 1 912 33 is_stmt 1 view -0
 7278              		.cfi_startproc
 7279              		@ args = 0, pretend = 0, frame = 0
 7280              		@ frame_needed = 0, uses_anonymous_args = 0
 913:src/xeq.c     **** 	roll_up(OP_RUP);
 7281              		.loc 1 913 2 view .LVU1977
 912:src/xeq.c     **** 	roll_up(OP_RUP);
 7282              		.loc 1 912 33 is_stmt 0 view .LVU1978
 7283 0000 08B5     		push	{r3, lr}
 7284              		.cfi_def_cfa_offset 8
 7285              		.cfi_offset 3, -8
 7286              		.cfi_offset 14, -4
 913:src/xeq.c     **** 	roll_up(OP_RUP);
 7287              		.loc 1 913 2 view .LVU1979
 7288 0002 0820     		movs	r0, #8
 7289              	.LVL509:
 913:src/xeq.c     **** 	roll_up(OP_RUP);
 7290              		.loc 1 913 2 view .LVU1980
 7291 0004 FFF7FEFF 		bl	roll_up
 7292              	.LVL510:
 914:src/xeq.c     **** 	set_was_complex();
 7293              		.loc 1 914 2 is_stmt 1 view .LVU1981
 7294 0008 0820     		movs	r0, #8
 7295 000a FFF7FEFF 		bl	roll_up
 7296              	.LVL511:
 915:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 7297              		.loc 1 915 2 view .LVU1982
 7298              	.LBB1915:
 7299              	.LBI1915:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 7300              		.loc 1 539 13 view .LVU1983
 7301              	.LBB1916:
 540:src/xeq.c     **** }
 7302              		.loc 1 540 2 view .LVU1984
 540:src/xeq.c     **** }
 7303              		.loc 1 540 20 is_stmt 0 view .LVU1985
 7304 000e 074B     		ldr	r3, .L583
 7305              	.LBE1916:
 7306              	.LBE1915:
 917:src/xeq.c     **** #endif
 7307              		.loc 1 917 2 view .LVU1986
 7308 0010 074A     		ldr	r2, .L583+4
 7309              	.LBB1919:
 7310              	.LBB1917:
 540:src/xeq.c     **** }
 7311              		.loc 1 540 20 view .LVU1987
 7312 0012 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 7313              	.LBE1917:
 7314              	.LBE1919:
 917:src/xeq.c     **** #endif
 7315              		.loc 1 917 2 view .LVU1988
 7316 0014 1268     		ldr	r2, [r2]
ARM GAS  /tmp/cccVhVyH.s 			page 262


 7317              	.LBB1920:
 7318              	.LBB1918:
 540:src/xeq.c     **** }
 7319              		.loc 1 540 20 view .LVU1989
 7320 0016 0120     		movs	r0, #1
 7321 0018 60F38711 		bfi	r1, r0, #6, #2
 7322 001c 1975     		strb	r1, [r3, #20]
 7323              	.LBE1918:
 7324              	.LBE1920:
 917:src/xeq.c     **** #endif
 7325              		.loc 1 917 2 is_stmt 1 view .LVU1990
 7326 001e 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 7327 0022 43F01003 		orr	r3, r3, #16
 7328 0026 82F8DE37 		strb	r3, [r2, #2014]
 919:src/xeq.c     **** 
 7329              		.loc 1 919 1 is_stmt 0 view .LVU1991
 7330 002a 08BD     		pop	{r3, pc}
 7331              	.L584:
 7332              		.align	2
 7333              	.L583:
 7334 002c 00000000 		.word	StateWhileOn
 7335 0030 00000000 		.word	main_ram
 7336              		.cfi_endproc
 7337              	.LFE73:
 7339              		.section	.text.fill,"ax",%progbits
 7340              		.align	1
 7341              		.p2align 2,,3
 7342              		.global	fill
 7343              		.syntax unified
 7344              		.thumb
 7345              		.thumb_func
 7346              		.fpu fpv4-sp-d16
 7348              	fill:
 7349              	.LVL512:
 7350              	.LFB80:
1099:src/xeq.c     **** 	const int n = stack_size();
 7351              		.loc 1 1099 26 is_stmt 1 view -0
 7352              		.cfi_startproc
 7353              		@ args = 0, pretend = 0, frame = 0
 7354              		@ frame_needed = 0, uses_anonymous_args = 0
1100:src/xeq.c     **** 	int i;
 7355              		.loc 1 1100 2 view .LVU1993
 7356              	.LBB1921:
 7357              	.LBI1921:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7358              		.loc 1 712 5 view .LVU1994
 7359              	.LBB1922:
 713:src/xeq.c     **** 		return 4;
 7360              		.loc 1 713 2 view .LVU1995
 7361              	.LBE1922:
 7362              	.LBE1921:
1099:src/xeq.c     **** 	const int n = stack_size();
 7363              		.loc 1 1099 26 is_stmt 0 view .LVU1996
 7364 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7365              		.cfi_def_cfa_offset 24
 7366              		.cfi_offset 4, -24
 7367              		.cfi_offset 5, -20
ARM GAS  /tmp/cccVhVyH.s 			page 263


 7368              		.cfi_offset 6, -16
 7369              		.cfi_offset 7, -12
 7370              		.cfi_offset 8, -8
 7371              		.cfi_offset 14, -4
 7372              	.LBB1928:
 7373              	.LBB1925:
 713:src/xeq.c     **** 		return 4;
 7374              		.loc 1 713 8 view .LVU1997
 7375 0004 174E     		ldr	r6, .L596
 7376 0006 3368     		ldr	r3, [r6]
 713:src/xeq.c     **** 		return 4;
 7377              		.loc 1 713 6 view .LVU1998
 7378 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 7379              		.loc 1 713 5 view .LVU1999
 7380 000c 1207     		lsls	r2, r2, #28
 7381 000e 27D5     		bpl	.L589
 7382              	.LBB1923:
 7383              	.LBI1923:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 7384              		.loc 1 185 5 is_stmt 1 view .LVU2000
 7385              	.LBB1924:
 186:src/xeq.c     **** }
 7386              		.loc 1 186 2 view .LVU2001
 186:src/xeq.c     **** }
 7387              		.loc 1 186 9 is_stmt 0 view .LVU2002
 7388 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7389              	.LBE1924:
 7390              	.LBE1923:
 713:src/xeq.c     **** 		return 4;
 7391              		.loc 1 713 27 view .LVU2003
 7392 0014 9B0B     		lsrs	r3, r3, #14
 7393 0016 032B     		cmp	r3, #3
 7394 0018 1AD0     		beq	.L595
 715:src/xeq.c     **** }
 7395              		.loc 1 715 9 view .LVU2004
 7396 001a 0825     		movs	r5, #8
 7397              	.L586:
 7398              	.LVL513:
 715:src/xeq.c     **** }
 7399              		.loc 1 715 9 view .LVU2005
 7400              	.LBE1925:
 7401              	.LBE1928:
1101:src/xeq.c     **** 
 7402              		.loc 1 1101 2 is_stmt 1 view .LVU2006
1103:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7403              		.loc 1 1103 2 view .LVU2007
1103:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7404              		.loc 1 1103 12 view .LVU2008
 7405 001c 124F     		ldr	r7, .L596+4
 7406 001e 6435     		adds	r5, r5, #100
 7407              	.LVL514:
 7408              	.LBB1929:
 7409              	.LBB1926:
 714:src/xeq.c     **** 	return 8;
 7410              		.loc 1 714 10 is_stmt 0 view .LVU2009
 7411 0020 6524     		movs	r4, #101
ARM GAS  /tmp/cccVhVyH.s 			page 264


 7412              	.LBE1926:
 7413              	.LBE1929:
 7414              	.LBB1930:
 7415              	.LBB1931:
 7416              	.LBB1932:
 7417              	.LBB1933:
1122:src/xeq.c     **** }
 7418              		.loc 1 1122 24 view .LVU2010
 7419 0022 44F20108 		movw	r8, #16385
 7420              	.LVL515:
 7421              	.L588:
1122:src/xeq.c     **** }
 7422              		.loc 1 1122 24 view .LVU2011
 7423              	.LBE1933:
 7424              	.LBE1932:
 7425              	.LBE1931:
 7426              	.LBE1930:
1104:src/xeq.c     **** }
 7427              		.loc 1 1104 3 is_stmt 1 view .LVU2012
 7428              	.LBB1939:
 7429              	.LBI1939:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7430              		.loc 1 718 11 view .LVU2013
 7431              	.LBB1940:
 719:src/xeq.c     **** }
 7432              		.loc 1 719 2 view .LVU2014
 719:src/xeq.c     **** }
 7433              		.loc 1 719 9 is_stmt 0 view .LVU2015
 7434 0026 2046     		mov	r0, r4
 7435 0028 FFF7FEFF 		bl	get_reg_n
 7436              	.LVL516:
 719:src/xeq.c     **** }
 7437              		.loc 1 719 9 view .LVU2016
 7438              	.LBE1940:
 7439              	.LBE1939:
 7440              	.LBB1941:
 7441              	.LBI1930:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7442              		.loc 1 726 6 is_stmt 1 view .LVU2017
 7443              	.LBB1938:
 727:src/xeq.c     **** }
 7444              		.loc 1 727 2 view .LVU2018
 7445              	.LBB1936:
 7446              	.LBI1932:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7447              		.loc 1 1121 5 view .LVU2019
 7448              	.LBB1934:
1122:src/xeq.c     **** }
 7449              		.loc 1 1122 2 view .LVU2020
1122:src/xeq.c     **** }
 7450              		.loc 1 1122 24 is_stmt 0 view .LVU2021
 7451 002c 3368     		ldr	r3, [r6]
 7452              	.LBE1934:
 7453              	.LBE1936:
 727:src/xeq.c     **** }
 7454              		.loc 1 727 2 view .LVU2022
 7455 002e 3968     		ldr	r1, [r7]
ARM GAS  /tmp/cccVhVyH.s 			page 265


 7456              	.LBB1937:
 7457              	.LBB1935:
1122:src/xeq.c     **** }
 7458              		.loc 1 1122 24 view .LVU2023
 7459 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7460              	.LBE1935:
 7461              	.LBE1937:
 727:src/xeq.c     **** }
 7462              		.loc 1 727 2 view .LVU2024
 7463 0034 08EA0303 		and	r3, r8, r3
 7464 0038 B3F5804F 		cmp	r3, #16384
 7465 003c 0CBF     		ite	eq
 7466 003e 1022     		moveq	r2, #16
 7467 0040 0822     		movne	r2, #8
 7468 0042 0134     		adds	r4, r4, #1
 7469              	.LVL517:
 727:src/xeq.c     **** }
 7470              		.loc 1 727 2 view .LVU2025
 7471 0044 FFF7FEFF 		bl	xcopy
 7472              	.LVL518:
 727:src/xeq.c     **** }
 7473              		.loc 1 727 2 view .LVU2026
 7474              	.LBE1938:
 7475              	.LBE1941:
1103:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7476              		.loc 1 1103 17 is_stmt 1 view .LVU2027
1103:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7477              		.loc 1 1103 12 view .LVU2028
1103:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7478              		.loc 1 1103 2 is_stmt 0 view .LVU2029
 7479 0048 AC42     		cmp	r4, r5
 7480 004a ECD1     		bne	.L588
1105:src/xeq.c     **** 
 7481              		.loc 1 1105 1 view .LVU2030
 7482 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7483              	.LVL519:
 7484              	.L595:
 7485              	.LBB1942:
 7486              	.LBB1927:
 713:src/xeq.c     **** 		return 4;
 7487              		.loc 1 713 44 view .LVU2031
 7488 0050 064B     		ldr	r3, .L596+8
 713:src/xeq.c     **** 		return 4;
 7489              		.loc 1 713 41 view .LVU2032
 7490 0052 93F90130 		ldrsb	r3, [r3, #1]
 714:src/xeq.c     **** 	return 8;
 7491              		.loc 1 714 10 view .LVU2033
 7492 0056 002B     		cmp	r3, #0
 7493 0058 B4BF     		ite	lt
 7494 005a 0825     		movlt	r5, #8
 7495 005c 0425     		movge	r5, #4
 7496 005e DDE7     		b	.L586
 7497              	.L589:
 7498 0060 0425     		movs	r5, #4
 7499 0062 DBE7     		b	.L586
 7500              	.L597:
 7501              		.align	2
ARM GAS  /tmp/cccVhVyH.s 			page 266


 7502              	.L596:
 7503 0064 00000000 		.word	main_ram
 7504 0068 00000000 		.word	StackBase
 7505 006c 00000000 		.word	XromParams
 7506              	.LBE1927:
 7507              	.LBE1942:
 7508              		.cfi_endproc
 7509              	.LFE80:
 7511              		.section	.text.lower2,"ax",%progbits
 7512              		.align	1
 7513              		.p2align 2,,3
 7514              		.syntax unified
 7515              		.thumb
 7516              		.thumb_func
 7517              		.fpu fpv4-sp-d16
 7519              	lower2:
 7520              	.LFB54:
 783:src/xeq.c     **** 	const int n = stack_size();
 7521              		.loc 1 783 26 is_stmt 1 view -0
 7522              		.cfi_startproc
 7523              		@ args = 0, pretend = 0, frame = 0
 7524              		@ frame_needed = 0, uses_anonymous_args = 0
 784:src/xeq.c     **** 	int i;
 7525              		.loc 1 784 2 view .LVU2035
 7526              	.LBB1943:
 7527              	.LBI1943:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7528              		.loc 1 712 5 view .LVU2036
 7529              	.LBB1944:
 713:src/xeq.c     **** 		return 4;
 7530              		.loc 1 713 2 view .LVU2037
 7531              	.LBE1944:
 7532              	.LBE1943:
 783:src/xeq.c     **** 	const int n = stack_size();
 7533              		.loc 1 783 26 is_stmt 0 view .LVU2038
 7534 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7535              		.cfi_def_cfa_offset 24
 7536              		.cfi_offset 4, -24
 7537              		.cfi_offset 5, -20
 7538              		.cfi_offset 6, -16
 7539              		.cfi_offset 7, -12
 7540              		.cfi_offset 8, -8
 7541              		.cfi_offset 14, -4
 7542              	.LBB1950:
 7543              	.LBB1947:
 713:src/xeq.c     **** 		return 4;
 7544              		.loc 1 713 8 view .LVU2039
 7545 0004 194F     		ldr	r7, .L609
 7546 0006 3B68     		ldr	r3, [r7]
 713:src/xeq.c     **** 		return 4;
 7547              		.loc 1 713 6 view .LVU2040
 7548 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 7549              		.loc 1 713 5 view .LVU2041
 7550 000c 1207     		lsls	r2, r2, #28
 7551 000e 2BD5     		bpl	.L602
 7552              	.LBB1945:
ARM GAS  /tmp/cccVhVyH.s 			page 267


 7553              	.LBI1945:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 7554              		.loc 1 185 5 is_stmt 1 view .LVU2042
 7555              	.LBB1946:
 186:src/xeq.c     **** }
 7556              		.loc 1 186 2 view .LVU2043
 186:src/xeq.c     **** }
 7557              		.loc 1 186 9 is_stmt 0 view .LVU2044
 7558 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7559              	.LBE1946:
 7560              	.LBE1945:
 713:src/xeq.c     **** 		return 4;
 7561              		.loc 1 713 27 view .LVU2045
 7562 0014 9B0B     		lsrs	r3, r3, #14
 7563 0016 032B     		cmp	r3, #3
 7564 0018 1ED0     		beq	.L608
 715:src/xeq.c     **** }
 7565              		.loc 1 715 9 view .LVU2046
 7566 001a 0826     		movs	r6, #8
 7567              	.L599:
 7568              	.LVL520:
 715:src/xeq.c     **** }
 7569              		.loc 1 715 9 view .LVU2047
 7570              	.LBE1947:
 7571              	.LBE1950:
 785:src/xeq.c     **** 
 7572              		.loc 1 785 2 is_stmt 1 view .LVU2048
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7573              		.loc 1 787 2 view .LVU2049
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7574              		.loc 1 787 12 view .LVU2050
 7575 001c 6236     		adds	r6, r6, #98
 7576              	.LVL521:
 7577              	.LBB1951:
 7578              	.LBB1948:
 714:src/xeq.c     **** 	return 8;
 7579              		.loc 1 714 10 is_stmt 0 view .LVU2051
 7580 001e 6424     		movs	r4, #100
 7581              	.LBE1948:
 7582              	.LBE1951:
 7583              	.LBB1952:
 7584              	.LBB1953:
 7585              	.LBB1954:
 7586              	.LBB1955:
1122:src/xeq.c     **** }
 7587              		.loc 1 1122 24 view .LVU2052
 7588 0020 44F20108 		movw	r8, #16385
 7589              	.LVL522:
 7590              	.L601:
1122:src/xeq.c     **** }
 7591              		.loc 1 1122 24 view .LVU2053
 7592              	.LBE1955:
 7593              	.LBE1954:
 7594              	.LBE1953:
 7595              	.LBE1952:
 788:src/xeq.c     **** }
 7596              		.loc 1 788 3 is_stmt 1 discriminator 3 view .LVU2054
ARM GAS  /tmp/cccVhVyH.s 			page 268


 7597              	.LBB1962:
 7598              	.LBI1962:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7599              		.loc 1 718 11 discriminator 3 view .LVU2055
 7600              	.LBB1963:
 719:src/xeq.c     **** }
 7601              		.loc 1 719 2 discriminator 3 view .LVU2056
 719:src/xeq.c     **** }
 7602              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU2057
 7603 0024 2046     		mov	r0, r4
 7604 0026 FFF7FEFF 		bl	get_reg_n
 7605              	.LVL523:
 7606 002a 0546     		mov	r5, r0
 7607              	.LBE1963:
 7608              	.LBE1962:
 7609              	.LBB1964:
 7610              	.LBB1965:
 7611 002c A01C     		adds	r0, r4, #2
 7612              	.LVL524:
 719:src/xeq.c     **** }
 7613              		.loc 1 719 9 discriminator 3 view .LVU2058
 7614              	.LBE1965:
 7615              	.LBI1964:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7616              		.loc 1 718 11 is_stmt 1 discriminator 3 view .LVU2059
 7617              	.LBB1966:
 719:src/xeq.c     **** }
 7618              		.loc 1 719 2 discriminator 3 view .LVU2060
 719:src/xeq.c     **** }
 7619              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU2061
 7620 002e FFF7FEFF 		bl	get_reg_n
 7621              	.LVL525:
 719:src/xeq.c     **** }
 7622              		.loc 1 719 9 discriminator 3 view .LVU2062
 7623              	.LBE1966:
 7624              	.LBE1964:
 7625              	.LBB1968:
 7626              	.LBB1960:
 7627              	.LBB1958:
 7628              	.LBB1956:
1122:src/xeq.c     **** }
 7629              		.loc 1 1122 24 discriminator 3 view .LVU2063
 7630 0032 3B68     		ldr	r3, [r7]
 7631 0034 B3F8E837 		ldrh	r3, [r3, #2024]
 7632              	.LBE1956:
 7633              	.LBE1958:
 727:src/xeq.c     **** }
 7634              		.loc 1 727 2 discriminator 3 view .LVU2064
 7635 0038 08EA0303 		and	r3, r8, r3
 7636 003c B3F5804F 		cmp	r3, #16384
 7637              	.LBE1960:
 7638              	.LBE1968:
 7639              	.LBB1969:
 7640              	.LBB1967:
 719:src/xeq.c     **** }
 7641              		.loc 1 719 9 discriminator 3 view .LVU2065
 7642 0040 0146     		mov	r1, r0
ARM GAS  /tmp/cccVhVyH.s 			page 269


 7643              	.LVL526:
 719:src/xeq.c     **** }
 7644              		.loc 1 719 9 discriminator 3 view .LVU2066
 7645              	.LBE1967:
 7646              	.LBE1969:
 7647              	.LBB1970:
 7648              	.LBI1952:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7649              		.loc 1 726 6 is_stmt 1 discriminator 3 view .LVU2067
 7650              	.LBB1961:
 727:src/xeq.c     **** }
 7651              		.loc 1 727 2 discriminator 3 view .LVU2068
 7652              	.LBB1959:
 7653              	.LBI1954:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7654              		.loc 1 1121 5 discriminator 3 view .LVU2069
 7655              	.LBB1957:
1122:src/xeq.c     **** }
 7656              		.loc 1 1122 2 discriminator 3 view .LVU2070
 7657              	.LBE1957:
 7658              	.LBE1959:
 727:src/xeq.c     **** }
 7659              		.loc 1 727 2 is_stmt 0 discriminator 3 view .LVU2071
 7660 0042 0CBF     		ite	eq
 7661 0044 1022     		moveq	r2, #16
 7662 0046 0822     		movne	r2, #8
 7663 0048 2846     		mov	r0, r5
 7664              	.LVL527:
 727:src/xeq.c     **** }
 7665              		.loc 1 727 2 discriminator 3 view .LVU2072
 7666 004a 0134     		adds	r4, r4, #1
 7667              	.LVL528:
 727:src/xeq.c     **** }
 7668              		.loc 1 727 2 discriminator 3 view .LVU2073
 7669 004c FFF7FEFF 		bl	xcopy
 7670              	.LVL529:
 727:src/xeq.c     **** }
 7671              		.loc 1 727 2 discriminator 3 view .LVU2074
 7672              	.LBE1961:
 7673              	.LBE1970:
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7674              		.loc 1 787 17 is_stmt 1 discriminator 3 view .LVU2075
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7675              		.loc 1 787 12 discriminator 3 view .LVU2076
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7676              		.loc 1 787 2 is_stmt 0 discriminator 3 view .LVU2077
 7677 0050 B442     		cmp	r4, r6
 7678 0052 E7D1     		bne	.L601
 789:src/xeq.c     **** 
 7679              		.loc 1 789 1 view .LVU2078
 7680 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7681              	.LVL530:
 7682              	.L608:
 7683              	.LBB1971:
 7684              	.LBB1949:
 713:src/xeq.c     **** 		return 4;
 7685              		.loc 1 713 44 view .LVU2079
ARM GAS  /tmp/cccVhVyH.s 			page 270


 7686 0058 054B     		ldr	r3, .L609+4
 713:src/xeq.c     **** 		return 4;
 7687              		.loc 1 713 41 view .LVU2080
 7688 005a 93F90130 		ldrsb	r3, [r3, #1]
 714:src/xeq.c     **** 	return 8;
 7689              		.loc 1 714 10 view .LVU2081
 7690 005e 002B     		cmp	r3, #0
 7691 0060 B4BF     		ite	lt
 7692 0062 0826     		movlt	r6, #8
 7693 0064 0426     		movge	r6, #4
 7694 0066 D9E7     		b	.L599
 7695              	.L602:
 7696 0068 0426     		movs	r6, #4
 7697 006a D7E7     		b	.L599
 7698              	.L610:
 7699              		.align	2
 7700              	.L609:
 7701 006c 00000000 		.word	main_ram
 7702 0070 00000000 		.word	XromParams
 7703              	.LBE1949:
 7704              	.LBE1971:
 7705              		.cfi_endproc
 7706              	.LFE54:
 7708              		.section	.text.drop,"ax",%progbits
 7709              		.align	1
 7710              		.p2align 2,,3
 7711              		.global	drop
 7712              		.syntax unified
 7713              		.thumb
 7714              		.thumb_func
 7715              		.fpu fpv4-sp-d16
 7717              	drop:
 7718              	.LVL531:
 7719              	.LFB81:
1107:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7720              		.loc 1 1107 26 is_stmt 1 view -0
 7721              		.cfi_startproc
 7722              		@ args = 0, pretend = 0, frame = 0
 7723              		@ frame_needed = 0, uses_anonymous_args = 0
1108:src/xeq.c     **** 		lower2();
 7724              		.loc 1 1108 2 view .LVU2083
1108:src/xeq.c     **** 		lower2();
 7725              		.loc 1 1108 5 is_stmt 0 view .LVU2084
 7726 0000 0F28     		cmp	r0, #15
 7727 0002 01D0     		beq	.L618
1112:src/xeq.c     **** }
 7728              		.loc 1 1112 3 is_stmt 1 view .LVU2085
 7729 0004 FFF7FEBF 		b	lower
 7730              	.LVL532:
 7731              	.L618:
1109:src/xeq.c     **** 		set_was_complex();
 7732              		.loc 1 1109 3 view .LVU2086
1107:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7733              		.loc 1 1107 26 is_stmt 0 view .LVU2087
 7734 0008 08B5     		push	{r3, lr}
 7735              		.cfi_def_cfa_offset 8
 7736              		.cfi_offset 3, -8
ARM GAS  /tmp/cccVhVyH.s 			page 271


 7737              		.cfi_offset 14, -4
1109:src/xeq.c     **** 		set_was_complex();
 7738              		.loc 1 1109 3 view .LVU2088
 7739 000a FFF7FEFF 		bl	lower2
 7740              	.LVL533:
1110:src/xeq.c     **** 	} else
 7741              		.loc 1 1110 3 is_stmt 1 view .LVU2089
 7742              	.LBB1972:
 7743              	.LBI1972:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 7744              		.loc 1 539 13 view .LVU2090
 7745              	.LBB1973:
 540:src/xeq.c     **** }
 7746              		.loc 1 540 2 view .LVU2091
 540:src/xeq.c     **** }
 7747              		.loc 1 540 20 is_stmt 0 view .LVU2092
 7748 000e 034B     		ldr	r3, .L619
 7749 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 7750 0012 0121     		movs	r1, #1
 7751 0014 61F38712 		bfi	r2, r1, #6, #2
 7752 0018 1A75     		strb	r2, [r3, #20]
 7753              	.LBE1973:
 7754              	.LBE1972:
1113:src/xeq.c     **** 
 7755              		.loc 1 1113 1 view .LVU2093
 7756 001a 08BD     		pop	{r3, pc}
 7757              	.L620:
 7758              		.align	2
 7759              	.L619:
 7760 001c 00000000 		.word	StateWhileOn
 7761              		.cfi_endproc
 7762              	.LFE81:
 7764              		.section	.text.copyreg_n,"ax",%progbits
 7765              		.align	1
 7766              		.p2align 2,,3
 7767              		.global	copyreg_n
 7768              		.syntax unified
 7769              		.thumb
 7770              		.thumb_func
 7771              		.fpu fpv4-sp-d16
 7773              	copyreg_n:
 7774              	.LVL534:
 7775              	.LFB46:
 730:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7776              		.loc 1 730 30 is_stmt 1 view -0
 7777              		.cfi_startproc
 7778              		@ args = 0, pretend = 0, frame = 0
 7779              		@ frame_needed = 0, uses_anonymous_args = 0
 731:src/xeq.c     **** }
 7780              		.loc 1 731 2 view .LVU2095
 730:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7781              		.loc 1 730 30 is_stmt 0 view .LVU2096
 7782 0000 38B5     		push	{r3, r4, r5, lr}
 7783              		.cfi_def_cfa_offset 16
 7784              		.cfi_offset 3, -16
 7785              		.cfi_offset 4, -12
 7786              		.cfi_offset 5, -8
ARM GAS  /tmp/cccVhVyH.s 			page 272


 7787              		.cfi_offset 14, -4
 730:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7788              		.loc 1 730 30 view .LVU2097
 7789 0002 0D46     		mov	r5, r1
 731:src/xeq.c     **** }
 7790              		.loc 1 731 2 view .LVU2098
 7791 0004 FFF7FEFF 		bl	get_reg_n
 7792              	.LVL535:
 731:src/xeq.c     **** }
 7793              		.loc 1 731 2 view .LVU2099
 7794 0008 0446     		mov	r4, r0
 731:src/xeq.c     **** }
 7795              		.loc 1 731 24 view .LVU2100
 7796 000a 2846     		mov	r0, r5
 7797 000c FFF7FEFF 		bl	get_reg_n
 7798              	.LVL536:
 7799              	.LBB1974:
 7800              	.LBB1975:
 7801              	.LBB1976:
 7802              	.LBB1977:
1122:src/xeq.c     **** }
 7803              		.loc 1 1122 24 view .LVU2101
 7804 0010 094B     		ldr	r3, .L625
 7805 0012 1B68     		ldr	r3, [r3]
 7806 0014 B3F8E827 		ldrh	r2, [r3, #2024]
 7807 0018 44F20103 		movw	r3, #16385
 7808              	.LBE1977:
 7809              	.LBE1976:
 727:src/xeq.c     **** }
 7810              		.loc 1 727 2 view .LVU2102
 7811 001c 1340     		ands	r3, r3, r2
 7812 001e B3F5804F 		cmp	r3, #16384
 7813              	.LBE1975:
 7814              	.LBE1974:
 731:src/xeq.c     **** }
 7815              		.loc 1 731 24 view .LVU2103
 7816 0022 0146     		mov	r1, r0
 7817              	.LVL537:
 7818              	.LBB1982:
 7819              	.LBI1974:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7820              		.loc 1 726 6 is_stmt 1 view .LVU2104
 7821              	.LBB1980:
 727:src/xeq.c     **** }
 7822              		.loc 1 727 2 view .LVU2105
 7823              	.LBB1979:
 7824              	.LBI1976:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7825              		.loc 1 1121 5 view .LVU2106
 7826              	.LBB1978:
1122:src/xeq.c     **** }
 7827              		.loc 1 1122 2 view .LVU2107
 7828              	.LBE1978:
 7829              	.LBE1979:
 727:src/xeq.c     **** }
 7830              		.loc 1 727 2 is_stmt 0 view .LVU2108
 7831 0024 08BF     		it	eq
ARM GAS  /tmp/cccVhVyH.s 			page 273


 7832 0026 1022     		moveq	r2, #16
 7833 0028 2046     		mov	r0, r4
 7834              	.LVL538:
 727:src/xeq.c     **** }
 7835              		.loc 1 727 2 view .LVU2109
 7836 002a 18BF     		it	ne
 7837 002c 0822     		movne	r2, #8
 7838              	.LBE1980:
 7839              	.LBE1982:
 732:src/xeq.c     **** 
 7840              		.loc 1 732 1 view .LVU2110
 7841 002e BDE83840 		pop	{r3, r4, r5, lr}
 7842              		.cfi_restore 14
 7843              		.cfi_restore 5
 7844              		.cfi_restore 4
 7845              		.cfi_restore 3
 7846              		.cfi_def_cfa_offset 0
 7847              	.LVL539:
 7848              	.LBB1983:
 7849              	.LBB1981:
 727:src/xeq.c     **** }
 7850              		.loc 1 727 2 view .LVU2111
 7851 0032 FFF7FEBF 		b	xcopy
 7852              	.LVL540:
 7853              	.L626:
 727:src/xeq.c     **** }
 7854              		.loc 1 727 2 view .LVU2112
 7855 0036 00BF     		.align	2
 7856              	.L625:
 7857 0038 00000000 		.word	main_ram
 7858              	.LBE1981:
 7859              	.LBE1983:
 7860              		.cfi_endproc
 7861              	.LFE46:
 7863              		.section	.text.setlastX,"ax",%progbits
 7864              		.align	1
 7865              		.p2align 2,,3
 7866              		.global	setlastX
 7867              		.syntax unified
 7868              		.thumb
 7869              		.thumb_func
 7870              		.fpu fpv4-sp-d16
 7872              	setlastX:
 7873              	.LFB55:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7874              		.loc 1 792 21 is_stmt 1 view -0
 7875              		.cfi_startproc
 7876              		@ args = 0, pretend = 0, frame = 0
 7877              		@ frame_needed = 0, uses_anonymous_args = 0
 7878              		@ link register save eliminated.
 793:src/xeq.c     **** }
 7879              		.loc 1 793 2 view .LVU2114
 7880 0000 6421     		movs	r1, #100
 7881 0002 6C20     		movs	r0, #108
 7882 0004 FFF7FEBF 		b	copyreg_n
 7883              	.LVL541:
 7884              		.cfi_endproc
ARM GAS  /tmp/cccVhVyH.s 			page 274


 7885              	.LFE55:
 7887              		.section	.text.setlastXY,"ax",%progbits
 7888              		.align	1
 7889              		.p2align 2,,3
 7890              		.syntax unified
 7891              		.thumb
 7892              		.thumb_func
 7893              		.fpu fpv4-sp-d16
 7895              	setlastXY:
 7896              	.LFB56:
 796:src/xeq.c     **** 	setlastX();
 7897              		.loc 1 796 29 view -0
 7898              		.cfi_startproc
 7899              		@ args = 0, pretend = 0, frame = 0
 7900              		@ frame_needed = 0, uses_anonymous_args = 0
 797:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 7901              		.loc 1 797 2 view .LVU2116
 7902              	.LBB1984:
 7903              	.LBI1984:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7904              		.loc 1 792 6 view .LVU2117
 7905              	.LBB1985:
 793:src/xeq.c     **** }
 7906              		.loc 1 793 2 view .LVU2118
 7907              	.LBE1985:
 7908              	.LBE1984:
 796:src/xeq.c     **** 	setlastX();
 7909              		.loc 1 796 29 is_stmt 0 view .LVU2119
 7910 0000 08B5     		push	{r3, lr}
 7911              		.cfi_def_cfa_offset 8
 7912              		.cfi_offset 3, -8
 7913              		.cfi_offset 14, -4
 7914              	.LBB1987:
 7915              	.LBB1986:
 793:src/xeq.c     **** }
 7916              		.loc 1 793 2 view .LVU2120
 7917 0002 6421     		movs	r1, #100
 7918 0004 6C20     		movs	r0, #108
 7919 0006 FFF7FEFF 		bl	copyreg_n
 7920              	.LVL542:
 7921              	.LBE1986:
 7922              	.LBE1987:
 798:src/xeq.c     **** }
 7923              		.loc 1 798 2 is_stmt 1 view .LVU2121
 799:src/xeq.c     **** 
 7924              		.loc 1 799 1 is_stmt 0 view .LVU2122
 7925 000a BDE80840 		pop	{r3, lr}
 7926              		.cfi_restore 14
 7927              		.cfi_restore 3
 7928              		.cfi_def_cfa_offset 0
 798:src/xeq.c     **** }
 7929              		.loc 1 798 2 view .LVU2123
 7930 000e 6521     		movs	r1, #101
 7931 0010 6D20     		movs	r0, #109
 7932 0012 FFF7FEBF 		b	copyreg_n
 7933              	.LVL543:
 7934              		.cfi_endproc
ARM GAS  /tmp/cccVhVyH.s 			page 275


 7935              	.LFE56:
 7937 0016 00BF     		.section	.text.getRegister,"ax",%progbits
 7938              		.align	1
 7939              		.p2align 2,,3
 7940              		.global	getRegister
 7941              		.syntax unified
 7942              		.thumb
 7943              		.thumb_func
 7944              		.fpu fpv4-sp-d16
 7946              	getRegister:
 7947              	.LVL544:
 7948              	.LFB57:
 802:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7949              		.loc 1 802 49 is_stmt 1 view -0
 7950              		.cfi_startproc
 7951              		@ args = 0, pretend = 0, frame = 0
 7952              		@ frame_needed = 0, uses_anonymous_args = 0
 803:src/xeq.c     **** 	if (is_dblmode())
 7953              		.loc 1 803 2 view .LVU2125
 802:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7954              		.loc 1 802 49 is_stmt 0 view .LVU2126
 7955 0000 10B5     		push	{r4, lr}
 7956              		.cfi_def_cfa_offset 8
 7957              		.cfi_offset 4, -8
 7958              		.cfi_offset 14, -4
 802:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7959              		.loc 1 802 49 view .LVU2127
 7960 0002 0446     		mov	r4, r0
 803:src/xeq.c     **** 	if (is_dblmode())
 7961              		.loc 1 803 30 view .LVU2128
 7962 0004 0846     		mov	r0, r1
 7963              	.LVL545:
 803:src/xeq.c     **** 	if (is_dblmode())
 7964              		.loc 1 803 30 view .LVU2129
 7965 0006 FFF7FEFF 		bl	get_reg_n
 7966              	.LVL546:
 804:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7967              		.loc 1 804 2 is_stmt 1 view .LVU2130
 7968              	.LBB1988:
 7969              	.LBI1988:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7970              		.loc 1 1121 5 view .LVU2131
 7971              	.LBB1989:
1122:src/xeq.c     **** }
 7972              		.loc 1 1122 2 view .LVU2132
1122:src/xeq.c     **** }
 7973              		.loc 1 1122 24 is_stmt 0 view .LVU2133
 7974 000a 094B     		ldr	r3, .L635
 7975 000c 1B68     		ldr	r3, [r3]
 7976 000e B3F8E827 		ldrh	r2, [r3, #2024]
 7977 0012 44F20103 		movw	r3, #16385
 7978              	.LBE1989:
 7979              	.LBE1988:
 804:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7980              		.loc 1 804 5 view .LVU2134
 7981 0016 1340     		ands	r3, r3, r2
 7982 0018 B3F5804F 		cmp	r3, #16384
ARM GAS  /tmp/cccVhVyH.s 			page 276


 805:src/xeq.c     **** 	else
 7983              		.loc 1 805 3 view .LVU2135
 7984 001c 2146     		mov	r1, r4
 804:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7985              		.loc 1 804 5 view .LVU2136
 7986 001e 03D0     		beq	.L634
 807:src/xeq.c     **** 	return r;
 7987              		.loc 1 807 3 is_stmt 1 view .LVU2137
 7988 0020 FFF7FEFF 		bl	decimal64ToNumber
 7989              	.LVL547:
 808:src/xeq.c     **** }
 7990              		.loc 1 808 2 view .LVU2138
 809:src/xeq.c     **** 
 7991              		.loc 1 809 1 is_stmt 0 view .LVU2139
 7992 0024 2046     		mov	r0, r4
 7993 0026 10BD     		pop	{r4, pc}
 7994              	.LVL548:
 7995              	.L634:
 805:src/xeq.c     **** 	else
 7996              		.loc 1 805 3 is_stmt 1 view .LVU2140
 7997 0028 FFF7FEFF 		bl	decimal128ToNumber
 7998              	.LVL549:
 808:src/xeq.c     **** }
 7999              		.loc 1 808 2 view .LVU2141
 809:src/xeq.c     **** 
 8000              		.loc 1 809 1 is_stmt 0 view .LVU2142
 8001 002c 2046     		mov	r0, r4
 8002 002e 10BD     		pop	{r4, pc}
 8003              	.LVL550:
 8004              	.L636:
 809:src/xeq.c     **** 
 8005              		.loc 1 809 1 view .LVU2143
 8006              		.align	2
 8007              	.L635:
 8008 0030 00000000 		.word	main_ram
 8009              		.cfi_endproc
 8010              	.LFE57:
 8012              		.section	.text.getX,"ax",%progbits
 8013              		.align	1
 8014              		.p2align 2,,3
 8015              		.global	getX
 8016              		.syntax unified
 8017              		.thumb
 8018              		.thumb_func
 8019              		.fpu fpv4-sp-d16
 8021              	getX:
 8022              	.LVL551:
 8023              	.LFB59:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8024              		.loc 1 824 31 is_stmt 1 view -0
 8025              		.cfi_startproc
 8026              		@ args = 0, pretend = 0, frame = 0
 8027              		@ frame_needed = 0, uses_anonymous_args = 0
 8028              		@ link register save eliminated.
 825:src/xeq.c     **** }
 8029              		.loc 1 825 2 view .LVU2145
 825:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 277


 8030              		.loc 1 825 9 is_stmt 0 view .LVU2146
 8031 0000 6421     		movs	r1, #100
 8032 0002 FFF7FEBF 		b	getRegister
 8033              	.LVL552:
 825:src/xeq.c     **** }
 8034              		.loc 1 825 9 view .LVU2147
 8035              		.cfi_endproc
 8036              	.LFE59:
 8038 0006 00BF     		.section	.text.getY,"ax",%progbits
 8039              		.align	1
 8040              		.p2align 2,,3
 8041              		.global	getY
 8042              		.syntax unified
 8043              		.thumb
 8044              		.thumb_func
 8045              		.fpu fpv4-sp-d16
 8047              	getY:
 8048              	.LVL553:
 8049              	.LFB61:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8050              		.loc 1 832 25 is_stmt 1 view -0
 8051              		.cfi_startproc
 8052              		@ args = 0, pretend = 0, frame = 0
 8053              		@ frame_needed = 0, uses_anonymous_args = 0
 8054              		@ link register save eliminated.
 833:src/xeq.c     **** }
 8055              		.loc 1 833 2 view .LVU2149
 8056 0000 6521     		movs	r1, #101
 8057 0002 FFF7FEBF 		b	getRegister
 8058              	.LVL554:
 833:src/xeq.c     **** }
 8059              		.loc 1 833 2 is_stmt 0 view .LVU2150
 8060              		.cfi_endproc
 8061              	.LFE61:
 8063 0006 00BF     		.section	.text.getXY,"ax",%progbits
 8064              		.align	1
 8065              		.p2align 2,,3
 8066              		.global	getXY
 8067              		.syntax unified
 8068              		.thumb
 8069              		.thumb_func
 8070              		.fpu fpv4-sp-d16
 8072              	getXY:
 8073              	.LVL555:
 8074              	.LFB65:
 854:src/xeq.c     **** 	getX(x);
 8075              		.loc 1 854 40 is_stmt 1 view -0
 8076              		.cfi_startproc
 8077              		@ args = 0, pretend = 0, frame = 0
 8078              		@ frame_needed = 0, uses_anonymous_args = 0
 855:src/xeq.c     **** 	getY(y);
 8079              		.loc 1 855 2 view .LVU2152
 8080              	.LBB1990:
 8081              	.LBI1990:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8082              		.loc 1 824 12 view .LVU2153
 8083              	.LBB1991:
ARM GAS  /tmp/cccVhVyH.s 			page 278


 825:src/xeq.c     **** }
 8084              		.loc 1 825 2 view .LVU2154
 8085              	.LBE1991:
 8086              	.LBE1990:
 854:src/xeq.c     **** 	getX(x);
 8087              		.loc 1 854 40 is_stmt 0 view .LVU2155
 8088 0000 10B5     		push	{r4, lr}
 8089              		.cfi_def_cfa_offset 8
 8090              		.cfi_offset 4, -8
 8091              		.cfi_offset 14, -4
 854:src/xeq.c     **** 	getX(x);
 8092              		.loc 1 854 40 view .LVU2156
 8093 0002 0C46     		mov	r4, r1
 8094              	.LBB1993:
 8095              	.LBB1992:
 825:src/xeq.c     **** }
 8096              		.loc 1 825 9 view .LVU2157
 8097 0004 6421     		movs	r1, #100
 8098              	.LVL556:
 825:src/xeq.c     **** }
 8099              		.loc 1 825 9 view .LVU2158
 8100 0006 FFF7FEFF 		bl	getRegister
 8101              	.LVL557:
 825:src/xeq.c     **** }
 8102              		.loc 1 825 9 view .LVU2159
 8103              	.LBE1992:
 8104              	.LBE1993:
 856:src/xeq.c     **** }
 8105              		.loc 1 856 2 is_stmt 1 view .LVU2160
 8106              	.LBB1994:
 8107              	.LBI1994:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8108              		.loc 1 832 6 view .LVU2161
 8109              	.LBB1995:
 833:src/xeq.c     **** }
 8110              		.loc 1 833 2 view .LVU2162
 8111 000a 2046     		mov	r0, r4
 8112 000c 6521     		movs	r1, #101
 8113              	.LBE1995:
 8114              	.LBE1994:
 857:src/xeq.c     **** 
 8115              		.loc 1 857 1 is_stmt 0 view .LVU2163
 8116 000e BDE81040 		pop	{r4, lr}
 8117              		.cfi_restore 14
 8118              		.cfi_restore 4
 8119              		.cfi_def_cfa_offset 0
 8120              	.LVL558:
 8121              	.LBB1997:
 8122              	.LBB1996:
 833:src/xeq.c     **** }
 8123              		.loc 1 833 2 view .LVU2164
 8124 0012 FFF7FEBF 		b	getRegister
 8125              	.LVL559:
 833:src/xeq.c     **** }
 8126              		.loc 1 833 2 view .LVU2165
 8127              	.LBE1996:
 8128              	.LBE1997:
ARM GAS  /tmp/cccVhVyH.s 			page 279


 8129              		.cfi_endproc
 8130              	.LFE65:
 8132 0016 00BF     		.section	.text.getXYZ,"ax",%progbits
 8133              		.align	1
 8134              		.p2align 2,,3
 8135              		.global	getXYZ
 8136              		.syntax unified
 8137              		.thumb
 8138              		.thumb_func
 8139              		.fpu fpv4-sp-d16
 8141              	getXYZ:
 8142              	.LVL560:
 8143              	.LFB67:
 867:src/xeq.c     **** 	getXY(x, y);
 8144              		.loc 1 867 55 is_stmt 1 view -0
 8145              		.cfi_startproc
 8146              		@ args = 0, pretend = 0, frame = 0
 8147              		@ frame_needed = 0, uses_anonymous_args = 0
 868:src/xeq.c     **** 	getZ(z);
 8148              		.loc 1 868 2 view .LVU2167
 867:src/xeq.c     **** 	getXY(x, y);
 8149              		.loc 1 867 55 is_stmt 0 view .LVU2168
 8150 0000 38B5     		push	{r3, r4, r5, lr}
 8151              		.cfi_def_cfa_offset 16
 8152              		.cfi_offset 3, -16
 8153              		.cfi_offset 4, -12
 8154              		.cfi_offset 5, -8
 8155              		.cfi_offset 14, -4
 867:src/xeq.c     **** 	getXY(x, y);
 8156              		.loc 1 867 55 view .LVU2169
 8157 0002 0D46     		mov	r5, r1
 8158              	.LVL561:
 8159              	.LBB1998:
 8160              	.LBI1998:
 854:src/xeq.c     **** 	getX(x);
 8161              		.loc 1 854 6 is_stmt 1 view .LVU2170
 8162              	.LBE1998:
 855:src/xeq.c     **** 	getY(y);
 8163              		.loc 1 855 2 view .LVU2171
 8164              	.LBB2005:
 8165              	.LBB1999:
 8166              	.LBI1999:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8167              		.loc 1 824 12 view .LVU2172
 8168              	.LBB2000:
 825:src/xeq.c     **** }
 8169              		.loc 1 825 2 view .LVU2173
 825:src/xeq.c     **** }
 8170              		.loc 1 825 9 is_stmt 0 view .LVU2174
 8171 0004 6421     		movs	r1, #100
 8172              	.LVL562:
 825:src/xeq.c     **** }
 8173              		.loc 1 825 9 view .LVU2175
 8174              	.LBE2000:
 8175              	.LBE1999:
 8176              	.LBE2005:
 867:src/xeq.c     **** 	getXY(x, y);
ARM GAS  /tmp/cccVhVyH.s 			page 280


 8177              		.loc 1 867 55 view .LVU2176
 8178 0006 1446     		mov	r4, r2
 8179              	.LBB2006:
 8180              	.LBB2002:
 8181              	.LBB2001:
 825:src/xeq.c     **** }
 8182              		.loc 1 825 9 view .LVU2177
 8183 0008 FFF7FEFF 		bl	getRegister
 8184              	.LVL563:
 825:src/xeq.c     **** }
 8185              		.loc 1 825 9 view .LVU2178
 8186              	.LBE2001:
 8187              	.LBE2002:
 8188              	.LBE2006:
 856:src/xeq.c     **** }
 8189              		.loc 1 856 2 is_stmt 1 view .LVU2179
 8190              	.LBB2007:
 8191              	.LBB2003:
 8192              	.LBI2003:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8193              		.loc 1 832 6 view .LVU2180
 8194              	.LBB2004:
 833:src/xeq.c     **** }
 8195              		.loc 1 833 2 view .LVU2181
 8196 000c 2846     		mov	r0, r5
 8197 000e 6521     		movs	r1, #101
 8198 0010 FFF7FEFF 		bl	getRegister
 8199              	.LVL564:
 833:src/xeq.c     **** }
 8200              		.loc 1 833 2 is_stmt 0 view .LVU2182
 8201              	.LBE2004:
 8202              	.LBE2003:
 8203              	.LBE2007:
 869:src/xeq.c     **** }
 8204              		.loc 1 869 2 is_stmt 1 view .LVU2183
 8205              	.LBB2008:
 8206              	.LBI2008:
 840:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8207              		.loc 1 840 13 view .LVU2184
 8208              	.LBB2009:
 841:src/xeq.c     **** }
 8209              		.loc 1 841 2 view .LVU2185
 8210 0014 2046     		mov	r0, r4
 8211 0016 6621     		movs	r1, #102
 8212              	.LBE2009:
 8213              	.LBE2008:
 870:src/xeq.c     **** 
 8214              		.loc 1 870 1 is_stmt 0 view .LVU2186
 8215 0018 BDE83840 		pop	{r3, r4, r5, lr}
 8216              		.cfi_restore 14
 8217              		.cfi_restore 5
 8218              		.cfi_restore 4
 8219              		.cfi_restore 3
 8220              		.cfi_def_cfa_offset 0
 8221              	.LVL565:
 8222              	.LBB2011:
 8223              	.LBB2010:
ARM GAS  /tmp/cccVhVyH.s 			page 281


 841:src/xeq.c     **** }
 8224              		.loc 1 841 2 view .LVU2187
 8225 001c FFF7FEBF 		b	getRegister
 8226              	.LVL566:
 841:src/xeq.c     **** }
 8227              		.loc 1 841 2 view .LVU2188
 8228              	.LBE2010:
 8229              	.LBE2011:
 8230              		.cfi_endproc
 8231              	.LFE67:
 8233              		.section	.text.getYZ,"ax",%progbits
 8234              		.align	1
 8235              		.p2align 2,,3
 8236              		.global	getYZ
 8237              		.syntax unified
 8238              		.thumb
 8239              		.thumb_func
 8240              		.fpu fpv4-sp-d16
 8242              	getYZ:
 8243              	.LVL567:
 8244              	.LFB69:
 884:src/xeq.c     **** 	getY(y);
 8245              		.loc 1 884 40 is_stmt 1 view -0
 8246              		.cfi_startproc
 8247              		@ args = 0, pretend = 0, frame = 0
 8248              		@ frame_needed = 0, uses_anonymous_args = 0
 885:src/xeq.c     **** 	getZ(z);
 8249              		.loc 1 885 2 view .LVU2190
 8250              	.LBB2012:
 8251              	.LBI2012:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8252              		.loc 1 832 6 view .LVU2191
 8253              	.LBB2013:
 833:src/xeq.c     **** }
 8254              		.loc 1 833 2 view .LVU2192
 8255              	.LBE2013:
 8256              	.LBE2012:
 884:src/xeq.c     **** 	getY(y);
 8257              		.loc 1 884 40 is_stmt 0 view .LVU2193
 8258 0000 10B5     		push	{r4, lr}
 8259              		.cfi_def_cfa_offset 8
 8260              		.cfi_offset 4, -8
 8261              		.cfi_offset 14, -4
 884:src/xeq.c     **** 	getY(y);
 8262              		.loc 1 884 40 view .LVU2194
 8263 0002 0C46     		mov	r4, r1
 8264              	.LBB2015:
 8265              	.LBB2014:
 833:src/xeq.c     **** }
 8266              		.loc 1 833 2 view .LVU2195
 8267 0004 6521     		movs	r1, #101
 8268              	.LVL568:
 833:src/xeq.c     **** }
 8269              		.loc 1 833 2 view .LVU2196
 8270 0006 FFF7FEFF 		bl	getRegister
 8271              	.LVL569:
 833:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 282


 8272              		.loc 1 833 2 view .LVU2197
 8273              	.LBE2014:
 8274              	.LBE2015:
 886:src/xeq.c     **** }
 8275              		.loc 1 886 2 is_stmt 1 view .LVU2198
 8276              	.LBB2016:
 8277              	.LBI2016:
 840:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8278              		.loc 1 840 13 view .LVU2199
 8279              	.LBB2017:
 841:src/xeq.c     **** }
 8280              		.loc 1 841 2 view .LVU2200
 8281 000a 2046     		mov	r0, r4
 8282 000c 6621     		movs	r1, #102
 8283              	.LBE2017:
 8284              	.LBE2016:
 887:src/xeq.c     **** 
 8285              		.loc 1 887 1 is_stmt 0 view .LVU2201
 8286 000e BDE81040 		pop	{r4, lr}
 8287              		.cfi_restore 14
 8288              		.cfi_restore 4
 8289              		.cfi_def_cfa_offset 0
 8290              	.LVL570:
 8291              	.LBB2019:
 8292              	.LBB2018:
 841:src/xeq.c     **** }
 8293              		.loc 1 841 2 view .LVU2202
 8294 0012 FFF7FEBF 		b	getRegister
 8295              	.LVL571:
 841:src/xeq.c     **** }
 8296              		.loc 1 841 2 view .LVU2203
 8297              	.LBE2018:
 8298              	.LBE2019:
 8299              		.cfi_endproc
 8300              	.LFE69:
 8302 0016 00BF     		.section	.text.getXYZT,"ax",%progbits
 8303              		.align	1
 8304              		.p2align 2,,3
 8305              		.global	getXYZT
 8306              		.syntax unified
 8307              		.thumb
 8308              		.thumb_func
 8309              		.fpu fpv4-sp-d16
 8311              	getXYZT:
 8312              	.LVL572:
 8313              	.LFB68:
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 8314              		.loc 1 879 70 is_stmt 1 view -0
 8315              		.cfi_startproc
 8316              		@ args = 0, pretend = 0, frame = 0
 8317              		@ frame_needed = 0, uses_anonymous_args = 0
 880:src/xeq.c     **** 	getT(t);
 8318              		.loc 1 880 2 view .LVU2205
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 8319              		.loc 1 879 70 is_stmt 0 view .LVU2206
 8320 0000 10B5     		push	{r4, lr}
 8321              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cccVhVyH.s 			page 283


 8322              		.cfi_offset 4, -8
 8323              		.cfi_offset 14, -4
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 8324              		.loc 1 879 70 view .LVU2207
 8325 0002 1C46     		mov	r4, r3
 880:src/xeq.c     **** 	getT(t);
 8326              		.loc 1 880 2 view .LVU2208
 8327 0004 FFF7FEFF 		bl	getXYZ
 8328              	.LVL573:
 881:src/xeq.c     **** }
 8329              		.loc 1 881 2 is_stmt 1 view .LVU2209
 8330              	.LBB2020:
 8331              	.LBI2020:
 850:src/xeq.c     **** 	getRegister(t, regT_idx);
 8332              		.loc 1 850 13 view .LVU2210
 8333              	.LBB2021:
 851:src/xeq.c     **** }
 8334              		.loc 1 851 2 view .LVU2211
 8335 0008 2046     		mov	r0, r4
 8336 000a 6721     		movs	r1, #103
 8337              	.LBE2021:
 8338              	.LBE2020:
 882:src/xeq.c     **** 
 8339              		.loc 1 882 1 is_stmt 0 view .LVU2212
 8340 000c BDE81040 		pop	{r4, lr}
 8341              		.cfi_restore 14
 8342              		.cfi_restore 4
 8343              		.cfi_def_cfa_offset 0
 8344              	.LVL574:
 8345              	.LBB2023:
 8346              	.LBB2022:
 851:src/xeq.c     **** }
 8347              		.loc 1 851 2 view .LVU2213
 8348 0010 FFF7FEBF 		b	getRegister
 8349              	.LVL575:
 851:src/xeq.c     **** }
 8350              		.loc 1 851 2 view .LVU2214
 8351              	.LBE2022:
 8352              	.LBE2023:
 8353              		.cfi_endproc
 8354              	.LFE68:
 8356              		.section	.text.storcl_op,"ax",%progbits
 8357              		.align	1
 8358              		.p2align 2,,3
 8359              		.syntax unified
 8360              		.thumb
 8361              		.thumb_func
 8362              		.fpu fpv4-sp-d16
 8364              	storcl_op:
 8365              	.LVL576:
 8366              	.LFB115:
1653:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8367              		.loc 1 1653 76 is_stmt 1 view -0
 8368              		.cfi_startproc
 8369              		@ args = 0, pretend = 0, frame = 72
 8370              		@ frame_needed = 0, uses_anonymous_args = 0
1654:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 284


 8371              		.loc 1 1654 2 view .LVU2216
1653:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8372              		.loc 1 1653 76 is_stmt 0 view .LVU2217
 8373 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 8374              		.cfi_def_cfa_offset 20
 8375              		.cfi_offset 4, -20
 8376              		.cfi_offset 5, -16
 8377              		.cfi_offset 6, -12
 8378              		.cfi_offset 7, -8
 8379              		.cfi_offset 14, -4
 8380 0002 93B0     		sub	sp, sp, #76
 8381              		.cfi_def_cfa_offset 96
 8382              	.LVL577:
1656:src/xeq.c     **** 	getRegister(y, index);
 8383              		.loc 1 1656 2 is_stmt 1 view .LVU2218
 8384              	.LBB2024:
 8385              	.LBI2024:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8386              		.loc 1 824 12 view .LVU2219
 8387              	.LBB2025:
 825:src/xeq.c     **** }
 8388              		.loc 1 825 2 view .LVU2220
 8389              	.LBE2025:
 8390              	.LBE2024:
1653:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8391              		.loc 1 1653 76 is_stmt 0 view .LVU2221
 8392 0004 0E46     		mov	r6, r1
 8393 0006 0446     		mov	r4, r0
 8394              	.LBB2028:
 8395              	.LBB2026:
 825:src/xeq.c     **** }
 8396              		.loc 1 825 9 view .LVU2222
 8397 0008 6421     		movs	r1, #100
 8398              	.LVL578:
 825:src/xeq.c     **** }
 8399              		.loc 1 825 9 view .LVU2223
 8400 000a 6846     		mov	r0, sp
 8401              	.LVL579:
 825:src/xeq.c     **** }
 8402              		.loc 1 825 9 view .LVU2224
 8403              	.LBE2026:
 8404              	.LBE2028:
1653:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8405              		.loc 1 1653 76 view .LVU2225
 8406 000c 1D46     		mov	r5, r3
 8407 000e 1746     		mov	r7, r2
 8408              	.LBB2029:
 8409              	.LBB2027:
 825:src/xeq.c     **** }
 8410              		.loc 1 825 9 view .LVU2226
 8411 0010 FFF7FEFF 		bl	getRegister
 8412              	.LVL580:
 825:src/xeq.c     **** }
 8413              		.loc 1 825 9 view .LVU2227
 8414              	.LBE2027:
 8415              	.LBE2029:
1657:src/xeq.c     **** 	if (rev) {
ARM GAS  /tmp/cccVhVyH.s 			page 285


 8416              		.loc 1 1657 2 is_stmt 1 view .LVU2228
 8417 0014 3146     		mov	r1, r6
 8418 0016 09A8     		add	r0, sp, #36
 8419              	.LVL581:
1657:src/xeq.c     **** 	if (rev) {
 8420              		.loc 1 1657 2 is_stmt 0 view .LVU2229
 8421 0018 FFF7FEFF 		bl	getRegister
 8422              	.LVL582:
1658:src/xeq.c     **** 		x = y;
 8423              		.loc 1 1658 2 is_stmt 1 view .LVU2230
1658:src/xeq.c     **** 		x = y;
 8424              		.loc 1 1658 5 is_stmt 0 view .LVU2231
 8425 001c 4DB1     		cbz	r5, .L657
1660:src/xeq.c     **** 	}
 8426              		.loc 1 1660 5 view .LVU2232
 8427 001e 6946     		mov	r1, sp
1659:src/xeq.c     **** 		y = &a;
 8428              		.loc 1 1659 5 view .LVU2233
 8429 0020 09AA     		add	r2, sp, #36
 8430              	.LVL583:
 8431              	.L648:
1663:src/xeq.c     **** 	case 1:
 8432              		.loc 1 1663 2 is_stmt 1 view .LVU2234
 8433 0022 601E     		subs	r0, r4, #1
 8434 0024 0528     		cmp	r0, #5
 8435 0026 2BD8     		bhi	.L658
 8436 0028 DFE800F0 		tbb	[pc, r0]
 8437              	.L651:
 8438 002c 0C       		.byte	(.L656-.L651)/2
 8439 002d 12       		.byte	(.L655-.L651)/2
 8440 002e 18       		.byte	(.L654-.L651)/2
 8441 002f 1E       		.byte	(.L653-.L651)/2
 8442 0030 24       		.byte	(.L652-.L651)/2
 8443 0031 06       		.byte	(.L650-.L651)/2
 8444              	.LVL584:
 8445              		.p2align 1
 8446              	.L657:
1654:src/xeq.c     **** 
 8447              		.loc 1 1654 28 is_stmt 0 view .LVU2235
 8448 0032 09A9     		add	r1, sp, #36
 8449              	.LVL585:
1654:src/xeq.c     **** 
 8450              		.loc 1 1654 19 view .LVU2236
 8451 0034 6A46     		mov	r2, sp
 8452 0036 F4E7     		b	.L648
 8453              	.LVL586:
 8454              	.L650:
1680:src/xeq.c     **** 		break;
 8455              		.loc 1 1680 3 is_stmt 1 view .LVU2237
 8456 0038 3846     		mov	r0, r7
 8457 003a FFF7FEFF 		bl	dn_max
 8458              	.LVL587:
1681:src/xeq.c     **** 	default:
 8459              		.loc 1 1681 3 view .LVU2238
1685:src/xeq.c     **** }
 8460              		.loc 1 1685 9 is_stmt 0 view .LVU2239
 8461 003e 0020     		movs	r0, #0
ARM GAS  /tmp/cccVhVyH.s 			page 286


 8462              	.L647:
1686:src/xeq.c     **** 
 8463              		.loc 1 1686 1 view .LVU2240
 8464 0040 13B0     		add	sp, sp, #76
 8465              		.cfi_remember_state
 8466              		.cfi_def_cfa_offset 20
 8467              		@ sp needed
 8468 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 8469              	.LVL588:
 8470              	.L656:
 8471              		.cfi_restore_state
1665:src/xeq.c     **** 		break;
 8472              		.loc 1 1665 3 is_stmt 1 view .LVU2241
 8473 0044 3846     		mov	r0, r7
 8474 0046 FFF7FEFF 		bl	dn_add
 8475              	.LVL589:
1666:src/xeq.c     **** 	case 2:
 8476              		.loc 1 1666 3 view .LVU2242
1685:src/xeq.c     **** }
 8477              		.loc 1 1685 9 is_stmt 0 view .LVU2243
 8478 004a 0020     		movs	r0, #0
1686:src/xeq.c     **** 
 8479              		.loc 1 1686 1 view .LVU2244
 8480 004c 13B0     		add	sp, sp, #76
 8481              		.cfi_remember_state
 8482              		.cfi_def_cfa_offset 20
 8483              		@ sp needed
 8484 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 8485              	.LVL590:
 8486              	.L655:
 8487              		.cfi_restore_state
1668:src/xeq.c     **** 		break;
 8488              		.loc 1 1668 3 is_stmt 1 view .LVU2245
 8489 0050 3846     		mov	r0, r7
 8490 0052 FFF7FEFF 		bl	dn_subtract
 8491              	.LVL591:
1669:src/xeq.c     **** 	case 3:
 8492              		.loc 1 1669 3 view .LVU2246
1685:src/xeq.c     **** }
 8493              		.loc 1 1685 9 is_stmt 0 view .LVU2247
 8494 0056 0020     		movs	r0, #0
1686:src/xeq.c     **** 
 8495              		.loc 1 1686 1 view .LVU2248
 8496 0058 13B0     		add	sp, sp, #76
 8497              		.cfi_remember_state
 8498              		.cfi_def_cfa_offset 20
 8499              		@ sp needed
 8500 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 8501              	.LVL592:
 8502              	.L654:
 8503              		.cfi_restore_state
1671:src/xeq.c     **** 		break;
 8504              		.loc 1 1671 3 is_stmt 1 view .LVU2249
 8505 005c 3846     		mov	r0, r7
 8506 005e FFF7FEFF 		bl	dn_multiply
 8507              	.LVL593:
1672:src/xeq.c     **** 	case 4:
ARM GAS  /tmp/cccVhVyH.s 			page 287


 8508              		.loc 1 1672 3 view .LVU2250
1685:src/xeq.c     **** }
 8509              		.loc 1 1685 9 is_stmt 0 view .LVU2251
 8510 0062 0020     		movs	r0, #0
1686:src/xeq.c     **** 
 8511              		.loc 1 1686 1 view .LVU2252
 8512 0064 13B0     		add	sp, sp, #76
 8513              		.cfi_remember_state
 8514              		.cfi_def_cfa_offset 20
 8515              		@ sp needed
 8516 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 8517              	.LVL594:
 8518              	.L653:
 8519              		.cfi_restore_state
1674:src/xeq.c     **** 		break;
 8520              		.loc 1 1674 3 is_stmt 1 view .LVU2253
 8521 0068 3846     		mov	r0, r7
 8522 006a FFF7FEFF 		bl	dn_divide
 8523              	.LVL595:
1675:src/xeq.c     **** 	case 5:
 8524              		.loc 1 1675 3 view .LVU2254
1685:src/xeq.c     **** }
 8525              		.loc 1 1685 9 is_stmt 0 view .LVU2255
 8526 006e 0020     		movs	r0, #0
1686:src/xeq.c     **** 
 8527              		.loc 1 1686 1 view .LVU2256
 8528 0070 13B0     		add	sp, sp, #76
 8529              		.cfi_remember_state
 8530              		.cfi_def_cfa_offset 20
 8531              		@ sp needed
 8532 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 8533              	.LVL596:
 8534              	.L652:
 8535              		.cfi_restore_state
1677:src/xeq.c     **** 		break;
 8536              		.loc 1 1677 3 is_stmt 1 view .LVU2257
 8537 0074 3846     		mov	r0, r7
 8538 0076 FFF7FEFF 		bl	dn_min
 8539              	.LVL597:
1678:src/xeq.c     **** 	case 6:
 8540              		.loc 1 1678 3 view .LVU2258
1685:src/xeq.c     **** }
 8541              		.loc 1 1685 9 is_stmt 0 view .LVU2259
 8542 007a 0020     		movs	r0, #0
1686:src/xeq.c     **** 
 8543              		.loc 1 1686 1 view .LVU2260
 8544 007c 13B0     		add	sp, sp, #76
 8545              		.cfi_def_cfa_offset 20
 8546              		@ sp needed
 8547 007e F0BD     		pop	{r4, r5, r6, r7, pc}
 8548              	.LVL598:
 8549              	.L658:
1685:src/xeq.c     **** }
 8550              		.loc 1 1685 9 view .LVU2261
 8551 0080 0120     		movs	r0, #1
 8552 0082 DDE7     		b	.L647
 8553              		.cfi_endproc
ARM GAS  /tmp/cccVhVyH.s 			page 288


 8554              	.LFE115:
 8556              		.section	.text.storcl_cop,"ax",%progbits
 8557              		.align	1
 8558              		.p2align 2,,3
 8559              		.syntax unified
 8560              		.thumb
 8561              		.thumb_func
 8562              		.fpu fpv4-sp-d16
 8564              	storcl_cop:
 8565              	.LVL599:
 8566              	.LFB120:
1787:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8567              		.loc 1 1787 93 is_stmt 1 view -0
 8568              		.cfi_startproc
 8569              		@ args = 4, pretend = 0, frame = 144
 8570              		@ frame_needed = 0, uses_anonymous_args = 0
1788:src/xeq.c     **** 
 8571              		.loc 1 1788 2 view .LVU2263
1787:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8572              		.loc 1 1787 93 is_stmt 0 view .LVU2264
 8573 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8574              		.cfi_def_cfa_offset 24
 8575              		.cfi_offset 4, -24
 8576              		.cfi_offset 5, -20
 8577              		.cfi_offset 6, -16
 8578              		.cfi_offset 7, -12
 8579              		.cfi_offset 8, -8
 8580              		.cfi_offset 14, -4
 8581 0004 A6B0     		sub	sp, sp, #152
 8582              		.cfi_def_cfa_offset 176
 8583              	.LVL600:
1790:src/xeq.c     **** 	getRegister(y + 0, index);
 8584              		.loc 1 1790 2 is_stmt 1 view .LVU2265
 8585              	.LBB2030:
 8586              	.LBI2030:
 854:src/xeq.c     **** 	getX(x);
 8587              		.loc 1 854 6 view .LVU2266
 8588              	.LBE2030:
 855:src/xeq.c     **** 	getY(y);
 8589              		.loc 1 855 2 view .LVU2267
 8590              	.LBB2039:
 8591              	.LBB2031:
 8592              	.LBI2031:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8593              		.loc 1 824 12 view .LVU2268
 8594              	.LBB2032:
 825:src/xeq.c     **** }
 8595              		.loc 1 825 2 view .LVU2269
 8596              	.LBE2032:
 8597              	.LBE2031:
 8598              	.LBE2039:
1787:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8599              		.loc 1 1787 93 is_stmt 0 view .LVU2270
 8600 0006 0D46     		mov	r5, r1
 8601 0008 0446     		mov	r4, r0
 8602              	.LBB2040:
 8603              	.LBB2035:
ARM GAS  /tmp/cccVhVyH.s 			page 289


 8604              	.LBB2033:
 825:src/xeq.c     **** }
 8605              		.loc 1 825 9 view .LVU2271
 8606 000a 6421     		movs	r1, #100
 8607              	.LVL601:
 825:src/xeq.c     **** }
 8608              		.loc 1 825 9 view .LVU2272
 8609 000c 02A8     		add	r0, sp, #8
 8610              	.LVL602:
 825:src/xeq.c     **** }
 8611              		.loc 1 825 9 view .LVU2273
 8612              	.LBE2033:
 8613              	.LBE2035:
 8614              	.LBE2040:
1787:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8615              		.loc 1 1787 93 view .LVU2274
 8616 000e 9046     		mov	r8, r2
 8617 0010 1E46     		mov	r6, r3
 8618 0012 2C9F     		ldr	r7, [sp, #176]
 8619              	.LBB2041:
 8620              	.LBB2036:
 8621              	.LBB2034:
 825:src/xeq.c     **** }
 8622              		.loc 1 825 9 view .LVU2275
 8623 0014 FFF7FEFF 		bl	getRegister
 8624              	.LVL603:
 825:src/xeq.c     **** }
 8625              		.loc 1 825 9 view .LVU2276
 8626              	.LBE2034:
 8627              	.LBE2036:
 8628              	.LBE2041:
 856:src/xeq.c     **** }
 8629              		.loc 1 856 2 is_stmt 1 view .LVU2277
 8630              	.LBB2042:
 8631              	.LBB2037:
 8632              	.LBI2037:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8633              		.loc 1 832 6 view .LVU2278
 8634              	.LBB2038:
 833:src/xeq.c     **** }
 8635              		.loc 1 833 2 view .LVU2279
 8636 0018 6521     		movs	r1, #101
 8637 001a 0BA8     		add	r0, sp, #44
 8638              	.LVL604:
 833:src/xeq.c     **** }
 8639              		.loc 1 833 2 is_stmt 0 view .LVU2280
 8640 001c FFF7FEFF 		bl	getRegister
 8641              	.LVL605:
 833:src/xeq.c     **** }
 8642              		.loc 1 833 2 view .LVU2281
 8643              	.LBE2038:
 8644              	.LBE2037:
 8645              	.LBE2042:
1791:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8646              		.loc 1 1791 2 is_stmt 1 view .LVU2282
 8647 0020 2946     		mov	r1, r5
 8648 0022 14A8     		add	r0, sp, #80
ARM GAS  /tmp/cccVhVyH.s 			page 290


 8649              	.LVL606:
1791:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8650              		.loc 1 1791 2 is_stmt 0 view .LVU2283
 8651 0024 FFF7FEFF 		bl	getRegister
 8652              	.LVL607:
1792:src/xeq.c     **** 
 8653              		.loc 1 1792 2 is_stmt 1 view .LVU2284
 8654 0028 691C     		adds	r1, r5, #1
 8655 002a 1DA8     		add	r0, sp, #116
 8656 002c FFF7FEFF 		bl	getRegister
 8657              	.LVL608:
1794:src/xeq.c     **** 		x = y;
 8658              		.loc 1 1794 2 view .LVU2285
1794:src/xeq.c     **** 		x = y;
 8659              		.loc 1 1794 5 is_stmt 0 view .LVU2286
 8660 0030 47B1     		cbz	r7, .L668
1796:src/xeq.c     **** 	}
 8661              		.loc 1 1796 5 view .LVU2287
 8662 0032 02AA     		add	r2, sp, #8
 8663              	.LVL609:
1795:src/xeq.c     **** 		y = a;
 8664              		.loc 1 1795 5 view .LVU2288
 8665 0034 14A9     		add	r1, sp, #80
 8666              	.LVL610:
 8667              	.L661:
1799:src/xeq.c     **** 	case 1:
 8668              		.loc 1 1799 2 is_stmt 1 view .LVU2289
 8669 0036 601E     		subs	r0, r4, #1
 8670 0038 0328     		cmp	r0, #3
 8671 003a 3ED8     		bhi	.L669
 8672 003c DFE800F0 		tbb	[pc, r0]
 8673              	.L664:
 8674 0040 13       		.byte	(.L667-.L664)/2
 8675 0041 21       		.byte	(.L666-.L664)/2
 8676 0042 2F       		.byte	(.L665-.L664)/2
 8677 0043 05       		.byte	(.L663-.L664)/2
 8678              	.LVL611:
 8679              		.p2align 1
 8680              	.L668:
1788:src/xeq.c     **** 
 8681              		.loc 1 1788 33 is_stmt 0 view .LVU2290
 8682 0044 14AA     		add	r2, sp, #80
 8683              	.LVL612:
1788:src/xeq.c     **** 
 8684              		.loc 1 1788 25 view .LVU2291
 8685 0046 02A9     		add	r1, sp, #8
 8686              	.LVL613:
1788:src/xeq.c     **** 
 8687              		.loc 1 1788 25 view .LVU2292
 8688 0048 F5E7     		b	.L661
 8689              	.L663:
1810:src/xeq.c     **** 		break;
 8690              		.loc 1 1810 3 is_stmt 1 view .LVU2293
1810:src/xeq.c     **** 		break;
 8691              		.loc 1 1810 46 is_stmt 0 view .LVU2294
 8692 004a 01F12403 		add	r3, r1, #36
1810:src/xeq.c     **** 		break;
ARM GAS  /tmp/cccVhVyH.s 			page 291


 8693              		.loc 1 1810 3 view .LVU2295
 8694 004e CDE90013 		strd	r1, r3, [sp]
 8695 0052 4046     		mov	r0, r8
 8696 0054 3146     		mov	r1, r6
 8697              	.LVL614:
1810:src/xeq.c     **** 		break;
 8698              		.loc 1 1810 3 view .LVU2296
 8699 0056 02F12403 		add	r3, r2, #36
 8700 005a FFF7FEFF 		bl	cmplxDivide
 8701              	.LVL615:
1811:src/xeq.c     **** 	default:
 8702              		.loc 1 1811 3 is_stmt 1 view .LVU2297
1815:src/xeq.c     **** }
 8703              		.loc 1 1815 9 is_stmt 0 view .LVU2298
 8704 005e 0020     		movs	r0, #0
 8705              	.L660:
1816:src/xeq.c     **** 
 8706              		.loc 1 1816 1 view .LVU2299
 8707 0060 26B0     		add	sp, sp, #152
 8708              		.cfi_remember_state
 8709              		.cfi_def_cfa_offset 24
 8710              		@ sp needed
 8711 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8712              	.LVL616:
 8713              	.L667:
 8714              		.cfi_restore_state
1801:src/xeq.c     **** 		break;
 8715              		.loc 1 1801 3 is_stmt 1 view .LVU2300
1801:src/xeq.c     **** 		break;
 8716              		.loc 1 1801 43 is_stmt 0 view .LVU2301
 8717 0066 01F12403 		add	r3, r1, #36
1801:src/xeq.c     **** 		break;
 8718              		.loc 1 1801 3 view .LVU2302
 8719 006a CDE90013 		strd	r1, r3, [sp]
 8720 006e 4046     		mov	r0, r8
 8721 0070 3146     		mov	r1, r6
 8722              	.LVL617:
1801:src/xeq.c     **** 		break;
 8723              		.loc 1 1801 3 view .LVU2303
 8724 0072 02F12403 		add	r3, r2, #36
 8725 0076 FFF7FEFF 		bl	cmplxAdd
 8726              	.LVL618:
1802:src/xeq.c     **** 	case 2:
 8727              		.loc 1 1802 3 is_stmt 1 view .LVU2304
1815:src/xeq.c     **** }
 8728              		.loc 1 1815 9 is_stmt 0 view .LVU2305
 8729 007a 0020     		movs	r0, #0
1816:src/xeq.c     **** 
 8730              		.loc 1 1816 1 view .LVU2306
 8731 007c 26B0     		add	sp, sp, #152
 8732              		.cfi_remember_state
 8733              		.cfi_def_cfa_offset 24
 8734              		@ sp needed
 8735 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8736              	.LVL619:
 8737              	.L666:
 8738              		.cfi_restore_state
ARM GAS  /tmp/cccVhVyH.s 			page 292


1804:src/xeq.c     **** 		break;
 8739              		.loc 1 1804 3 is_stmt 1 view .LVU2307
1804:src/xeq.c     **** 		break;
 8740              		.loc 1 1804 48 is_stmt 0 view .LVU2308
 8741 0082 01F12403 		add	r3, r1, #36
1804:src/xeq.c     **** 		break;
 8742              		.loc 1 1804 3 view .LVU2309
 8743 0086 CDE90013 		strd	r1, r3, [sp]
 8744 008a 4046     		mov	r0, r8
 8745 008c 3146     		mov	r1, r6
 8746              	.LVL620:
1804:src/xeq.c     **** 		break;
 8747              		.loc 1 1804 3 view .LVU2310
 8748 008e 02F12403 		add	r3, r2, #36
 8749 0092 FFF7FEFF 		bl	cmplxSubtract
 8750              	.LVL621:
1805:src/xeq.c     **** 	case 3:
 8751              		.loc 1 1805 3 is_stmt 1 view .LVU2311
1815:src/xeq.c     **** }
 8752              		.loc 1 1815 9 is_stmt 0 view .LVU2312
 8753 0096 0020     		movs	r0, #0
1816:src/xeq.c     **** 
 8754              		.loc 1 1816 1 view .LVU2313
 8755 0098 26B0     		add	sp, sp, #152
 8756              		.cfi_remember_state
 8757              		.cfi_def_cfa_offset 24
 8758              		@ sp needed
 8759 009a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8760              	.LVL622:
 8761              	.L665:
 8762              		.cfi_restore_state
1807:src/xeq.c     **** 		break;
 8763              		.loc 1 1807 3 is_stmt 1 view .LVU2314
1807:src/xeq.c     **** 		break;
 8764              		.loc 1 1807 48 is_stmt 0 view .LVU2315
 8765 009e 01F12403 		add	r3, r1, #36
1807:src/xeq.c     **** 		break;
 8766              		.loc 1 1807 3 view .LVU2316
 8767 00a2 CDE90013 		strd	r1, r3, [sp]
 8768 00a6 4046     		mov	r0, r8
 8769 00a8 3146     		mov	r1, r6
 8770              	.LVL623:
1807:src/xeq.c     **** 		break;
 8771              		.loc 1 1807 3 view .LVU2317
 8772 00aa 02F12403 		add	r3, r2, #36
 8773 00ae FFF7FEFF 		bl	cmplxMultiply
 8774              	.LVL624:
1808:src/xeq.c     **** 	case 4:
 8775              		.loc 1 1808 3 is_stmt 1 view .LVU2318
1815:src/xeq.c     **** }
 8776              		.loc 1 1815 9 is_stmt 0 view .LVU2319
 8777 00b2 0020     		movs	r0, #0
1816:src/xeq.c     **** 
 8778              		.loc 1 1816 1 view .LVU2320
 8779 00b4 26B0     		add	sp, sp, #152
 8780              		.cfi_def_cfa_offset 24
 8781              		@ sp needed
ARM GAS  /tmp/cccVhVyH.s 			page 293


 8782 00b6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8783              	.LVL625:
 8784              	.L669:
1815:src/xeq.c     **** }
 8785              		.loc 1 1815 9 view .LVU2321
 8786 00ba 0120     		movs	r0, #1
 8787 00bc D0E7     		b	.L660
 8788              		.cfi_endproc
 8789              	.LFE120:
 8791 00be 00BF     		.section	.text.cpx_enter,"ax",%progbits
 8792              		.align	1
 8793              		.p2align 2,,3
 8794              		.global	cpx_enter
 8795              		.syntax unified
 8796              		.thumb
 8797              		.thumb_func
 8798              		.fpu fpv4-sp-d16
 8800              	cpx_enter:
 8801              	.LVL626:
 8802              	.LFB74:
 921:src/xeq.c     ****   if( (State2.state_lift || (XromRunning || Running)) && ENTRY_RPN_ENABLED ) { // flag is zero if e
 8803              		.loc 1 921 31 is_stmt 1 view -0
 8804              		.cfi_startproc
 8805              		@ args = 0, pretend = 0, frame = 0
 8806              		@ frame_needed = 0, uses_anonymous_args = 0
 922:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 8807              		.loc 1 922 3 view .LVU2323
 930:src/xeq.c     ****     lift();
 8808              		.loc 1 930 5 view .LVU2324
 921:src/xeq.c     ****   if( (State2.state_lift || (XromRunning || Running)) && ENTRY_RPN_ENABLED ) { // flag is zero if e
 8809              		.loc 1 921 31 is_stmt 0 view .LVU2325
 8810 0000 70B5     		push	{r4, r5, r6, lr}
 8811              		.cfi_def_cfa_offset 16
 8812              		.cfi_offset 4, -16
 8813              		.cfi_offset 5, -12
 8814              		.cfi_offset 6, -8
 8815              		.cfi_offset 14, -4
 930:src/xeq.c     ****     lift();
 8816              		.loc 1 930 5 view .LVU2326
 8817 0002 FFF7FEFF 		bl	lift
 8818              	.LVL627:
 931:src/xeq.c     ****     copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 8819              		.loc 1 931 5 is_stmt 1 view .LVU2327
 8820 0006 FFF7FEFF 		bl	lift
 8821              	.LVL628:
 932:src/xeq.c     ****     set_was_complex();
 8822              		.loc 1 932 5 view .LVU2328
 8823 000a 6520     		movs	r0, #101
 8824 000c FFF7FEFF 		bl	get_reg_n
 8825              	.LVL629:
 922:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 8826              		.loc 1 922 55 is_stmt 0 view .LVU2329
 8827 0010 0D4E     		ldr	r6, .L682
 922:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 8828              		.loc 1 922 8 view .LVU2330
 8829 0012 0E4C     		ldr	r4, .L682+4
 932:src/xeq.c     ****     set_was_complex();
ARM GAS  /tmp/cccVhVyH.s 			page 294


 8830              		.loc 1 932 5 view .LVU2331
 8831 0014 0546     		mov	r5, r0
 932:src/xeq.c     ****     set_was_complex();
 8832              		.loc 1 932 34 view .LVU2332
 8833 0016 6720     		movs	r0, #103
 8834 0018 FFF7FEFF 		bl	get_reg_n
 8835              	.LVL630:
 8836              	.LBB2043:
 8837              	.LBB2044:
 8838              	.LBB2045:
 8839              	.LBB2046:
1122:src/xeq.c     **** }
 8840              		.loc 1 1122 24 view .LVU2333
 8841 001c 3368     		ldr	r3, [r6]
 8842 001e B3F8E827 		ldrh	r2, [r3, #2024]
 8843 0022 44F20103 		movw	r3, #16385
 8844              	.LBE2046:
 8845              	.LBE2045:
 727:src/xeq.c     **** }
 8846              		.loc 1 727 2 view .LVU2334
 8847 0026 1340     		ands	r3, r3, r2
 8848 0028 B3F5804F 		cmp	r3, #16384
 8849              	.LBE2044:
 8850              	.LBE2043:
 932:src/xeq.c     ****     set_was_complex();
 8851              		.loc 1 932 34 view .LVU2335
 8852 002c 0146     		mov	r1, r0
 8853              	.LVL631:
 8854              	.LBB2050:
 8855              	.LBI2043:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 8856              		.loc 1 726 6 is_stmt 1 view .LVU2336
 8857              	.LBB2049:
 727:src/xeq.c     **** }
 8858              		.loc 1 727 2 view .LVU2337
 8859              	.LBB2048:
 8860              	.LBI2045:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 8861              		.loc 1 1121 5 view .LVU2338
 8862              	.LBB2047:
1122:src/xeq.c     **** }
 8863              		.loc 1 1122 2 view .LVU2339
 8864              	.LBE2047:
 8865              	.LBE2048:
 727:src/xeq.c     **** }
 8866              		.loc 1 727 2 is_stmt 0 view .LVU2340
 8867 002e 0CBF     		ite	eq
 8868 0030 1022     		moveq	r2, #16
 8869 0032 0822     		movne	r2, #8
 8870 0034 2846     		mov	r0, r5
 8871              	.LVL632:
 727:src/xeq.c     **** }
 8872              		.loc 1 727 2 view .LVU2341
 8873 0036 FFF7FEFF 		bl	xcopy
 8874              	.LVL633:
 727:src/xeq.c     **** }
 8875              		.loc 1 727 2 view .LVU2342
ARM GAS  /tmp/cccVhVyH.s 			page 295


 8876              	.LBE2049:
 8877              	.LBE2050:
 933:src/xeq.c     ****   }
 8878              		.loc 1 933 5 is_stmt 1 view .LVU2343
 8879              	.LBB2051:
 8880              	.LBI2051:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 8881              		.loc 1 539 13 view .LVU2344
 8882              	.LBB2052:
 540:src/xeq.c     **** }
 8883              		.loc 1 540 2 view .LVU2345
 540:src/xeq.c     **** }
 8884              		.loc 1 540 20 is_stmt 0 view .LVU2346
 8885 003a 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 8886 003c 0122     		movs	r2, #1
 8887 003e 62F38713 		bfi	r3, r2, #6, #2
 8888 0042 2375     		strb	r3, [r4, #20]
 8889              	.LBE2052:
 8890              	.LBE2051:
 935:src/xeq.c     **** 
 8891              		.loc 1 935 1 view .LVU2347
 8892 0044 70BD     		pop	{r4, r5, r6, pc}
 8893              	.L683:
 8894 0046 00BF     		.align	2
 8895              	.L682:
 8896 0048 00000000 		.word	main_ram
 8897 004c 00000000 		.word	StateWhileOn
 8898              		.cfi_endproc
 8899              	.LFE74:
 8901              		.section	.text.cpx_fill,"ax",%progbits
 8902              		.align	1
 8903              		.p2align 2,,3
 8904              		.global	cpx_fill
 8905              		.syntax unified
 8906              		.thumb
 8907              		.thumb_func
 8908              		.fpu fpv4-sp-d16
 8910              	cpx_fill:
 8911              	.LVL634:
 8912              	.LFB79:
1089:src/xeq.c     **** 	const int n = stack_size();
 8913              		.loc 1 1089 30 is_stmt 1 view -0
 8914              		.cfi_startproc
 8915              		@ args = 0, pretend = 0, frame = 0
 8916              		@ frame_needed = 0, uses_anonymous_args = 0
1090:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
 8917              		.loc 1 1090 2 view .LVU2349
 8918              	.LBB2053:
 8919              	.LBI2053:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 8920              		.loc 1 712 5 view .LVU2350
 8921              	.LBB2054:
 713:src/xeq.c     **** 		return 4;
 8922              		.loc 1 713 2 view .LVU2351
 8923              	.LBE2054:
 8924              	.LBE2053:
1089:src/xeq.c     **** 	const int n = stack_size();
ARM GAS  /tmp/cccVhVyH.s 			page 296


 8925              		.loc 1 1089 30 is_stmt 0 view .LVU2352
 8926 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 8927              		.cfi_def_cfa_offset 32
 8928              		.cfi_offset 3, -32
 8929              		.cfi_offset 4, -28
 8930              		.cfi_offset 5, -24
 8931              		.cfi_offset 6, -20
 8932              		.cfi_offset 7, -16
 8933              		.cfi_offset 8, -12
 8934              		.cfi_offset 9, -8
 8935              		.cfi_offset 14, -4
 8936              	.LBB2059:
 8937              	.LBB2057:
 713:src/xeq.c     **** 		return 4;
 8938              		.loc 1 713 8 view .LVU2353
 8939 0004 1F4D     		ldr	r5, .L697
 8940 0006 2B68     		ldr	r3, [r5]
 713:src/xeq.c     **** 		return 4;
 8941              		.loc 1 713 6 view .LVU2354
 8942 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 8943              		.loc 1 713 5 view .LVU2355
 8944 000c 1207     		lsls	r2, r2, #28
 8945 000e 37D5     		bpl	.L689
 8946              	.LBB2055:
 8947              	.LBI2055:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 8948              		.loc 1 185 5 is_stmt 1 view .LVU2356
 8949              	.LBB2056:
 186:src/xeq.c     **** }
 8950              		.loc 1 186 2 view .LVU2357
 186:src/xeq.c     **** }
 8951              		.loc 1 186 9 is_stmt 0 view .LVU2358
 8952 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 8953              	.LBE2056:
 8954              	.LBE2055:
 713:src/xeq.c     **** 		return 4;
 8955              		.loc 1 713 27 view .LVU2359
 8956 0014 9B0B     		lsrs	r3, r3, #14
 8957 0016 032B     		cmp	r3, #3
 8958 0018 2AD0     		beq	.L696
 715:src/xeq.c     **** }
 8959              		.loc 1 715 9 view .LVU2360
 8960 001a 0827     		movs	r7, #8
 8961              	.L685:
 8962              	.LVL635:
 715:src/xeq.c     **** }
 8963              		.loc 1 715 9 view .LVU2361
 8964              	.LBE2057:
 8965              	.LBE2059:
1091:src/xeq.c     **** 	int i;
 8966              		.loc 1 1091 2 is_stmt 1 view .LVU2362
1091:src/xeq.c     **** 	int i;
 8967              		.loc 1 1091 22 is_stmt 0 view .LVU2363
 8968 001c 6520     		movs	r0, #101
 8969              	.LVL636:
1091:src/xeq.c     **** 	int i;
ARM GAS  /tmp/cccVhVyH.s 			page 297


 8970              		.loc 1 1091 22 view .LVU2364
 8971 001e FFF7FEFF 		bl	get_reg_n
 8972              	.LVL637:
1095:src/xeq.c     **** 	set_was_complex();
 8973              		.loc 1 1095 3 view .LVU2365
 8974 0022 DFF86C90 		ldr	r9, .L697+12
1091:src/xeq.c     **** 	int i;
 8975              		.loc 1 1091 22 view .LVU2366
 8976 0026 8046     		mov	r8, r0
 8977              	.LVL638:
1092:src/xeq.c     **** 
 8978              		.loc 1 1092 2 is_stmt 1 view .LVU2367
1094:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8979              		.loc 1 1094 2 view .LVU2368
1094:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8980              		.loc 1 1094 12 view .LVU2369
1094:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8981              		.loc 1 1094 8 is_stmt 0 view .LVU2370
 8982 0028 0224     		movs	r4, #2
 8983              	.LBB2060:
 8984              	.LBB2061:
 8985              	.LBB2062:
 8986              	.LBB2063:
1122:src/xeq.c     **** }
 8987              		.loc 1 1122 24 view .LVU2371
 8988 002a 44F20106 		movw	r6, #16385
 8989              	.LVL639:
 8990              	.L688:
1122:src/xeq.c     **** }
 8991              		.loc 1 1122 24 view .LVU2372
 8992              	.LBE2063:
 8993              	.LBE2062:
 8994              	.LBE2061:
 8995              	.LBE2060:
1095:src/xeq.c     **** 	set_was_complex();
 8996              		.loc 1 1095 3 is_stmt 1 view .LVU2373
 8997              	.LBB2074:
 8998              	.LBI2074:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 8999              		.loc 1 718 11 view .LVU2374
 9000              	.LBB2075:
 719:src/xeq.c     **** }
 9001              		.loc 1 719 2 view .LVU2375
 719:src/xeq.c     **** }
 9002              		.loc 1 719 9 is_stmt 0 view .LVU2376
 9003 002e 04F16400 		add	r0, r4, #100
 9004 0032 FFF7FEFF 		bl	get_reg_n
 9005              	.LVL640:
 719:src/xeq.c     **** }
 9006              		.loc 1 719 9 view .LVU2377
 9007              	.LBE2075:
 9008              	.LBE2074:
1095:src/xeq.c     **** 	set_was_complex();
 9009              		.loc 1 1095 3 view .LVU2378
 9010 0036 E307     		lsls	r3, r4, #31
 9011              	.LBB2076:
 9012              	.LBB2070:
ARM GAS  /tmp/cccVhVyH.s 			page 298


 9013              	.LBB2067:
 9014              	.LBB2064:
1122:src/xeq.c     **** }
 9015              		.loc 1 1122 24 view .LVU2379
 9016 0038 2B68     		ldr	r3, [r5]
 9017              	.LBE2064:
 9018              	.LBE2067:
 9019              	.LBE2070:
 9020              	.LBE2076:
1095:src/xeq.c     **** 	set_was_complex();
 9021              		.loc 1 1095 3 view .LVU2380
 9022 003a 58BF     		it	pl
 9023 003c D9F80010 		ldrpl	r1, [r9]
 9024              	.LBB2077:
 9025              	.LBB2071:
 9026              	.LBB2068:
 9027              	.LBB2065:
1122:src/xeq.c     **** }
 9028              		.loc 1 1122 24 view .LVU2381
 9029 0040 B3F8E837 		ldrh	r3, [r3, #2024]
 9030              	.LBE2065:
 9031              	.LBE2068:
 727:src/xeq.c     **** }
 9032              		.loc 1 727 2 view .LVU2382
 9033 0044 03EA0603 		and	r3, r3, r6
 9034              	.LBE2071:
 9035              	.LBE2077:
1095:src/xeq.c     **** 	set_was_complex();
 9036              		.loc 1 1095 3 view .LVU2383
 9037 0048 48BF     		it	mi
 9038 004a 4146     		movmi	r1, r8
 9039              	.LVL641:
 9040              	.LBB2078:
 9041              	.LBI2060:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 9042              		.loc 1 726 6 is_stmt 1 view .LVU2384
 9043              	.LBB2072:
 727:src/xeq.c     **** }
 9044              		.loc 1 727 2 view .LVU2385
 9045              	.LBB2069:
 9046              	.LBI2062:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 9047              		.loc 1 1121 5 view .LVU2386
 9048              	.LBB2066:
1122:src/xeq.c     **** }
 9049              		.loc 1 1122 2 view .LVU2387
 9050              	.LBE2066:
 9051              	.LBE2069:
 727:src/xeq.c     **** }
 9052              		.loc 1 727 2 is_stmt 0 view .LVU2388
 9053 004c B3F5804F 		cmp	r3, #16384
 9054 0050 0CBF     		ite	eq
 9055 0052 1022     		moveq	r2, #16
 9056 0054 0822     		movne	r2, #8
 9057              	.LBE2072:
 9058              	.LBE2078:
1094:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
ARM GAS  /tmp/cccVhVyH.s 			page 299


 9059              		.loc 1 1094 18 view .LVU2389
 9060 0056 0134     		adds	r4, r4, #1
 9061              	.LVL642:
 9062              	.LBB2079:
 9063              	.LBB2073:
 727:src/xeq.c     **** }
 9064              		.loc 1 727 2 view .LVU2390
 9065 0058 FFF7FEFF 		bl	xcopy
 9066              	.LVL643:
 727:src/xeq.c     **** }
 9067              		.loc 1 727 2 view .LVU2391
 9068              	.LBE2073:
 9069              	.LBE2079:
1094:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9070              		.loc 1 1094 17 is_stmt 1 view .LVU2392
1094:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9071              		.loc 1 1094 12 view .LVU2393
1094:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9072              		.loc 1 1094 2 is_stmt 0 view .LVU2394
 9073 005c BC42     		cmp	r4, r7
 9074 005e E6D1     		bne	.L688
1096:src/xeq.c     **** }
 9075              		.loc 1 1096 2 is_stmt 1 view .LVU2395
 9076              	.LBB2080:
 9077              	.LBI2080:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 9078              		.loc 1 539 13 view .LVU2396
 9079              	.LBB2081:
 540:src/xeq.c     **** }
 9080              		.loc 1 540 2 view .LVU2397
 540:src/xeq.c     **** }
 9081              		.loc 1 540 20 is_stmt 0 view .LVU2398
 9082 0060 094B     		ldr	r3, .L697+4
 9083 0062 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 9084 0064 0121     		movs	r1, #1
 9085 0066 61F38712 		bfi	r2, r1, #6, #2
 9086 006a 1A75     		strb	r2, [r3, #20]
 9087              	.LBE2081:
 9088              	.LBE2080:
1097:src/xeq.c     **** 
 9089              		.loc 1 1097 1 view .LVU2399
 9090 006c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9091              	.LVL644:
 9092              	.L696:
 9093              	.LBB2082:
 9094              	.LBB2058:
 713:src/xeq.c     **** 		return 4;
 9095              		.loc 1 713 44 view .LVU2400
 9096 0070 064B     		ldr	r3, .L697+8
 713:src/xeq.c     **** 		return 4;
 9097              		.loc 1 713 41 view .LVU2401
 9098 0072 93F90130 		ldrsb	r3, [r3, #1]
 714:src/xeq.c     **** 	return 8;
 9099              		.loc 1 714 10 view .LVU2402
 9100 0076 002B     		cmp	r3, #0
 9101 0078 B4BF     		ite	lt
 9102 007a 0827     		movlt	r7, #8
ARM GAS  /tmp/cccVhVyH.s 			page 300


 9103 007c 0427     		movge	r7, #4
 9104 007e CDE7     		b	.L685
 9105              	.L689:
 9106 0080 0427     		movs	r7, #4
 9107 0082 CBE7     		b	.L685
 9108              	.L698:
 9109              		.align	2
 9110              	.L697:
 9111 0084 00000000 		.word	main_ram
 9112 0088 00000000 		.word	StateWhileOn
 9113 008c 00000000 		.word	XromParams
 9114 0090 00000000 		.word	StackBase
 9115              	.LBE2058:
 9116              	.LBE2082:
 9117              		.cfi_endproc
 9118              	.LFE79:
 9120              		.section	.text.setRegister,"ax",%progbits
 9121              		.align	1
 9122              		.p2align 2,,3
 9123              		.global	setRegister
 9124              		.syntax unified
 9125              		.thumb
 9126              		.thumb_func
 9127              		.fpu fpv4-sp-d16
 9129              	setRegister:
 9130              	.LVL645:
 9131              	.LFB58:
 811:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9132              		.loc 1 811 49 is_stmt 1 view -0
 9133              		.cfi_startproc
 9134              		@ args = 0, pretend = 0, frame = 40
 9135              		@ frame_needed = 0, uses_anonymous_args = 0
 812:src/xeq.c     **** 	decNumber dn;
 9136              		.loc 1 812 2 view .LVU2404
 811:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9137              		.loc 1 811 49 is_stmt 0 view .LVU2405
 9138 0000 30B5     		push	{r4, r5, lr}
 9139              		.cfi_def_cfa_offset 12
 9140              		.cfi_offset 4, -12
 9141              		.cfi_offset 5, -8
 9142              		.cfi_offset 14, -4
 9143 0002 8BB0     		sub	sp, sp, #44
 9144              		.cfi_def_cfa_offset 56
 811:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9145              		.loc 1 811 49 view .LVU2406
 9146 0004 0C46     		mov	r4, r1
 812:src/xeq.c     **** 	decNumber dn;
 9147              		.loc 1 812 24 view .LVU2407
 9148 0006 FFF7FEFF 		bl	get_reg_n
 9149              	.LVL646:
 812:src/xeq.c     **** 	decNumber dn;
 9150              		.loc 1 812 24 view .LVU2408
 9151 000a 0546     		mov	r5, r0
 815:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9152              		.loc 1 815 8 view .LVU2409
 9153 000c 2046     		mov	r0, r4
 9154              	.LVL647:
ARM GAS  /tmp/cccVhVyH.s 			page 301


 813:src/xeq.c     **** 
 9155              		.loc 1 813 2 is_stmt 1 view .LVU2410
 815:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9156              		.loc 1 815 2 view .LVU2411
 815:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9157              		.loc 1 815 8 is_stmt 0 view .LVU2412
 9158 000e FFF7FEFF 		bl	check_special
 9159              	.LVL648:
 815:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9160              		.loc 1 815 5 view .LVU2413
 9161 0012 08B1     		cbz	r0, .L703
 822:src/xeq.c     **** 
 9162              		.loc 1 822 1 view .LVU2414
 9163 0014 0BB0     		add	sp, sp, #44
 9164              		.cfi_remember_state
 9165              		.cfi_def_cfa_offset 12
 9166              		@ sp needed
 9167 0016 30BD     		pop	{r4, r5, pc}
 9168              	.LVL649:
 9169              	.L703:
 9170              		.cfi_restore_state
 816:src/xeq.c     **** 		if (is_dblmode())
 9171              		.loc 1 816 3 is_stmt 1 view .LVU2415
 9172 0018 0C4A     		ldr	r2, .L705
 9173 001a 2146     		mov	r1, r4
 9174 001c 01A8     		add	r0, sp, #4
 9175 001e FFF7FEFF 		bl	decNumberNormalize
 9176              	.LVL650:
 817:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9177              		.loc 1 817 3 view .LVU2416
 9178              	.LBB2083:
 9179              	.LBI2083:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 9180              		.loc 1 1121 5 view .LVU2417
 9181              	.LBB2084:
1122:src/xeq.c     **** }
 9182              		.loc 1 1122 2 view .LVU2418
1122:src/xeq.c     **** }
 9183              		.loc 1 1122 24 is_stmt 0 view .LVU2419
 9184 0022 0B4B     		ldr	r3, .L705+4
 9185 0024 1B68     		ldr	r3, [r3]
 9186 0026 B3F8E827 		ldrh	r2, [r3, #2024]
 9187 002a 44F20103 		movw	r3, #16385
 9188              	.LBE2084:
 9189              	.LBE2083:
 817:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9190              		.loc 1 817 6 view .LVU2420
 9191 002e 1340     		ands	r3, r3, r2
 9192 0030 B3F5804F 		cmp	r3, #16384
 818:src/xeq.c     **** 		else
 9193              		.loc 1 818 4 view .LVU2421
 9194 0034 01A9     		add	r1, sp, #4
 9195 0036 2846     		mov	r0, r5
 817:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9196              		.loc 1 817 6 view .LVU2422
 9197 0038 03D0     		beq	.L704
 9198              	.LVL651:
ARM GAS  /tmp/cccVhVyH.s 			page 302


 820:src/xeq.c     **** 	}
 9199              		.loc 1 820 4 is_stmt 1 view .LVU2423
 9200 003a FFF7FEFF 		bl	packed_from_number
 9201              	.LVL652:
 822:src/xeq.c     **** 
 9202              		.loc 1 822 1 is_stmt 0 view .LVU2424
 9203 003e 0BB0     		add	sp, sp, #44
 9204              		.cfi_remember_state
 9205              		.cfi_def_cfa_offset 12
 9206              		@ sp needed
 9207 0040 30BD     		pop	{r4, r5, pc}
 9208              	.LVL653:
 9209              	.L704:
 9210              		.cfi_restore_state
 818:src/xeq.c     **** 		else
 9211              		.loc 1 818 4 is_stmt 1 view .LVU2425
 9212 0042 FFF7FEFF 		bl	packed128_from_number
 9213              	.LVL654:
 822:src/xeq.c     **** 
 9214              		.loc 1 822 1 is_stmt 0 view .LVU2426
 9215 0046 0BB0     		add	sp, sp, #44
 9216              		.cfi_def_cfa_offset 12
 9217              		@ sp needed
 9218 0048 30BD     		pop	{r4, r5, pc}
 9219              	.LVL655:
 9220              	.L706:
 822:src/xeq.c     **** 
 9221              		.loc 1 822 1 view .LVU2427
 9222 004a 00BF     		.align	2
 9223              	.L705:
 9224 004c 00000000 		.word	Ctx
 9225 0050 00000000 		.word	main_ram
 9226              		.cfi_endproc
 9227              	.LFE58:
 9229              		.section	.text.setX,"ax",%progbits
 9230              		.align	1
 9231              		.p2align 2,,3
 9232              		.global	setX
 9233              		.syntax unified
 9234              		.thumb
 9235              		.thumb_func
 9236              		.fpu fpv4-sp-d16
 9238              	setX:
 9239              	.LVL656:
 9240              	.LFB60:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9241              		.loc 1 828 31 is_stmt 1 view -0
 9242              		.cfi_startproc
 9243              		@ args = 0, pretend = 0, frame = 0
 9244              		@ frame_needed = 0, uses_anonymous_args = 0
 9245              		@ link register save eliminated.
 829:src/xeq.c     **** }
 9246              		.loc 1 829 2 view .LVU2429
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9247              		.loc 1 828 31 is_stmt 0 view .LVU2430
 9248 0000 0146     		mov	r1, r0
 829:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 303


 9249              		.loc 1 829 2 view .LVU2431
 9250 0002 6420     		movs	r0, #100
 9251              	.LVL657:
 829:src/xeq.c     **** }
 9252              		.loc 1 829 2 view .LVU2432
 9253 0004 FFF7FEBF 		b	setRegister
 9254              	.LVL658:
 829:src/xeq.c     **** }
 9255              		.loc 1 829 2 view .LVU2433
 9256              		.cfi_endproc
 9257              	.LFE60:
 9259              		.section	.text.rarg_round,"ax",%progbits
 9260              		.align	1
 9261              		.p2align 2,,3
 9262              		.global	rarg_round
 9263              		.syntax unified
 9264              		.thumb
 9265              		.thumb_func
 9266              		.fpu fpv4-sp-d16
 9268              	rarg_round:
 9269              	.LVL659:
 9270              	.LFB40:
 662:src/xeq.c     **** 	decNumber res, x;
 9271              		.loc 1 662 49 is_stmt 1 view -0
 9272              		.cfi_startproc
 9273              		@ args = 0, pretend = 0, frame = 80
 9274              		@ frame_needed = 0, uses_anonymous_args = 0
 663:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 9275              		.loc 1 663 2 view .LVU2435
 664:src/xeq.c     **** 
 9276              		.loc 1 664 2 view .LVU2436
 9277              	.LBB2097:
 9278              	.LBI2097:
 610:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 9279              		.loc 1 610 22 view .LVU2437
 9280              	.LBB2098:
 611:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 9281              		.loc 1 611 2 view .LVU2438
 616:src/xeq.c     **** }
 9282              		.loc 1 616 2 view .LVU2439
 616:src/xeq.c     **** }
 9283              		.loc 1 616 31 is_stmt 0 view .LVU2440
 9284 0000 184B     		ldr	r3, .L716
 9285              	.LBE2098:
 9286              	.LBE2097:
 662:src/xeq.c     **** 	decNumber res, x;
 9287              		.loc 1 662 49 view .LVU2441
 9288 0002 70B5     		push	{r4, r5, r6, lr}
 9289              		.cfi_def_cfa_offset 16
 9290              		.cfi_offset 4, -16
 9291              		.cfi_offset 5, -12
 9292              		.cfi_offset 6, -8
 9293              		.cfi_offset 14, -4
 9294              	.LBB2101:
 9295              	.LBB2099:
 616:src/xeq.c     **** }
 9296              		.loc 1 616 31 view .LVU2442
ARM GAS  /tmp/cccVhVyH.s 			page 304


 9297 0004 1B68     		ldr	r3, [r3]
 9298              	.LVL660:
 616:src/xeq.c     **** }
 9299              		.loc 1 616 31 view .LVU2443
 9300              	.LBE2099:
 9301              	.LBE2101:
 666:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9302              		.loc 1 666 2 is_stmt 1 view .LVU2444
 666:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9303              		.loc 1 666 6 is_stmt 0 view .LVU2445
 9304 0006 93F8E857 		ldrb	r5, [r3, #2024]	@ zero_extendqisi2
 666:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9305              		.loc 1 666 5 view .LVU2446
 9306 000a EA07     		lsls	r2, r5, #31
 662:src/xeq.c     **** 	decNumber res, x;
 9307              		.loc 1 662 49 view .LVU2447
 9308 000c 94B0     		sub	sp, sp, #80
 9309              		.cfi_def_cfa_offset 96
 666:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9310              		.loc 1 666 5 view .LVU2448
 9311 000e 06D5     		bpl	.L709
 667:src/xeq.c     **** 		return;
 9312              		.loc 1 667 3 is_stmt 1 view .LVU2449
 9313              	.LVL661:
 9314              	.LBB2102:
 9315              	.LBI2102:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9316              		.loc 1 546 5 view .LVU2450
 9317              	.LBB2103:
 547:src/xeq.c     **** 		Error = e;
 9318              		.loc 1 547 2 view .LVU2451
 547:src/xeq.c     **** 		Error = e;
 9319              		.loc 1 547 12 is_stmt 0 view .LVU2452
 9320 0010 154B     		ldr	r3, .L716+4
 9321              	.LVL662:
 547:src/xeq.c     **** 		Error = e;
 9322              		.loc 1 547 5 view .LVU2453
 9323 0012 1A68     		ldr	r2, [r3]
 9324 0014 0AB9     		cbnz	r2, .L708
 9325              	.LVL663:
 9326              	.LBB2104:
 9327              	.LBI2104:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9328              		.loc 1 546 5 is_stmt 1 view .LVU2454
 9329              	.LBB2105:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 9330              		.loc 1 548 3 view .LVU2455
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 9331              		.loc 1 548 9 is_stmt 0 view .LVU2456
 9332 0016 0D22     		movs	r2, #13
 9333 0018 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 9334              		.loc 1 549 3 is_stmt 1 view .LVU2457
 9335              	.LVL664:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 9336              		.loc 1 549 3 is_stmt 0 view .LVU2458
 9337              	.LBE2105:
ARM GAS  /tmp/cccVhVyH.s 			page 305


 9338              	.LBE2104:
 9339              	.LBE2103:
 9340              	.LBE2102:
 668:src/xeq.c     **** 	}
 9341              		.loc 1 668 3 is_stmt 1 view .LVU2459
 9342              	.L708:
 678:src/xeq.c     **** 
 9343              		.loc 1 678 1 is_stmt 0 view .LVU2460
 9344 001a 14B0     		add	sp, sp, #80
 9345              		.cfi_remember_state
 9346              		.cfi_def_cfa_offset 16
 9347              		@ sp needed
 9348 001c 70BD     		pop	{r4, r5, r6, pc}
 9349              	.LVL665:
 9350              	.L709:
 9351              		.cfi_restore_state
 9352              	.LBB2106:
 9353              	.LBB2100:
 616:src/xeq.c     **** }
 9354              		.loc 1 616 37 view .LVU2461
 9355 001e 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 9356              	.LVL666:
 616:src/xeq.c     **** }
 9357              		.loc 1 616 9 view .LVU2462
 9358 0022 124A     		ldr	r2, .L716+8
 616:src/xeq.c     **** }
 9359              		.loc 1 616 37 view .LVU2463
 9360 0024 C3F30213 		ubfx	r3, r3, #4, #3
 9361 0028 0C46     		mov	r4, r1
 616:src/xeq.c     **** }
 9362              		.loc 1 616 9 view .LVU2464
 9363 002a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9364 002c 0193     		str	r3, [sp, #4]
 9365              	.LBE2100:
 9366              	.LBE2106:
 671:src/xeq.c     **** 	getX(&x);
 9367              		.loc 1 671 2 is_stmt 1 view .LVU2465
 9368              	.LBB2107:
 9369              	.LBI2107:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 9370              		.loc 1 792 6 view .LVU2466
 9371              	.LBB2108:
 793:src/xeq.c     **** }
 9372              		.loc 1 793 2 view .LVU2467
 9373 002e 0646     		mov	r6, r0
 9374 0030 6421     		movs	r1, #100
 9375              	.LVL667:
 793:src/xeq.c     **** }
 9376              		.loc 1 793 2 is_stmt 0 view .LVU2468
 9377 0032 6C20     		movs	r0, #108
 9378              	.LVL668:
 793:src/xeq.c     **** }
 9379              		.loc 1 793 2 view .LVU2469
 9380 0034 FFF7FEFF 		bl	copyreg_n
 9381              	.LVL669:
 793:src/xeq.c     **** }
 9382              		.loc 1 793 2 view .LVU2470
ARM GAS  /tmp/cccVhVyH.s 			page 306


 9383              	.LBE2108:
 9384              	.LBE2107:
 672:src/xeq.c     **** 	if (op == RARG_ROUND)
 9385              		.loc 1 672 2 is_stmt 1 view .LVU2471
 9386              	.LBB2109:
 9387              	.LBI2109:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 9388              		.loc 1 824 12 view .LVU2472
 9389              	.LBB2110:
 825:src/xeq.c     **** }
 9390              		.loc 1 825 2 view .LVU2473
 825:src/xeq.c     **** }
 9391              		.loc 1 825 9 is_stmt 0 view .LVU2474
 9392 0038 6421     		movs	r1, #100
 9393 003a 0BA8     		add	r0, sp, #44
 9394              	.LVL670:
 825:src/xeq.c     **** }
 9395              		.loc 1 825 9 view .LVU2475
 9396 003c FFF7FEFF 		bl	getRegister
 9397              	.LVL671:
 825:src/xeq.c     **** }
 9398              		.loc 1 825 9 view .LVU2476
 9399              	.LBE2110:
 9400              	.LBE2109:
 673:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9401              		.loc 1 673 2 is_stmt 1 view .LVU2477
 673:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9402              		.loc 1 673 5 is_stmt 0 view .LVU2478
 9403 0040 752C     		cmp	r4, #117
 674:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9404              		.loc 1 674 3 view .LVU2479
 9405 0042 02AC     		add	r4, sp, #8
 673:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9406              		.loc 1 673 5 view .LVU2480
 9407 0044 019B     		ldr	r3, [sp, #4]
 674:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9408              		.loc 1 674 3 view .LVU2481
 9409 0046 3246     		mov	r2, r6
 9410 0048 0BA9     		add	r1, sp, #44
 9411 004a 2046     		mov	r0, r4
 673:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9412              		.loc 1 673 5 view .LVU2482
 9413 004c 07D0     		beq	.L715
 9414              	.LVL672:
 676:src/xeq.c     **** 	setX(&res);
 9415              		.loc 1 676 3 is_stmt 1 view .LVU2483
 9416 004e FFF7FEFF 		bl	decNumberRoundDecimals
 9417              	.LVL673:
 9418              	.L713:
 677:src/xeq.c     **** }
 9419              		.loc 1 677 2 view .LVU2484
 9420              	.LBB2111:
 9421              	.LBI2111:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9422              		.loc 1 828 6 view .LVU2485
 9423              	.LBB2112:
 829:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 307


 9424              		.loc 1 829 2 view .LVU2486
 9425 0052 2146     		mov	r1, r4
 9426 0054 6420     		movs	r0, #100
 9427 0056 FFF7FEFF 		bl	setRegister
 9428              	.LVL674:
 829:src/xeq.c     **** }
 9429              		.loc 1 829 2 is_stmt 0 view .LVU2487
 9430              	.LBE2112:
 9431              	.LBE2111:
 678:src/xeq.c     **** 
 9432              		.loc 1 678 1 view .LVU2488
 9433 005a 14B0     		add	sp, sp, #80
 9434              		.cfi_remember_state
 9435              		.cfi_def_cfa_offset 16
 9436              		@ sp needed
 9437 005c 70BD     		pop	{r4, r5, r6, pc}
 9438              	.LVL675:
 9439              	.L715:
 9440              		.cfi_restore_state
 674:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9441              		.loc 1 674 3 is_stmt 1 view .LVU2489
 9442 005e FFF7FEFF 		bl	decNumberRoundDigits
 9443              	.LVL676:
 674:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9444              		.loc 1 674 3 is_stmt 0 view .LVU2490
 9445 0062 F6E7     		b	.L713
 9446              	.L717:
 9447              		.align	2
 9448              	.L716:
 9449 0064 00000000 		.word	main_ram
 9450 0068 00000000 		.word	Error
 9451 006c 00000000 		.word	.LANCHOR1
 9452              		.cfi_endproc
 9453              	.LFE40:
 9455              		.section	.text.setY,"ax",%progbits
 9456              		.align	1
 9457              		.p2align 2,,3
 9458              		.global	setY
 9459              		.syntax unified
 9460              		.thumb
 9461              		.thumb_func
 9462              		.fpu fpv4-sp-d16
 9464              	setY:
 9465              	.LVL677:
 9466              	.LFB62:
 836:src/xeq.c     **** 	setRegister(regY_idx, y);
 9467              		.loc 1 836 31 is_stmt 1 view -0
 9468              		.cfi_startproc
 9469              		@ args = 0, pretend = 0, frame = 0
 9470              		@ frame_needed = 0, uses_anonymous_args = 0
 9471              		@ link register save eliminated.
 837:src/xeq.c     **** }
 9472              		.loc 1 837 2 view .LVU2492
 836:src/xeq.c     **** 	setRegister(regY_idx, y);
 9473              		.loc 1 836 31 is_stmt 0 view .LVU2493
 9474 0000 0146     		mov	r1, r0
 837:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 308


 9475              		.loc 1 837 2 view .LVU2494
 9476 0002 6520     		movs	r0, #101
 9477              	.LVL678:
 837:src/xeq.c     **** }
 9478              		.loc 1 837 2 view .LVU2495
 9479 0004 FFF7FEBF 		b	setRegister
 9480              	.LVL679:
 837:src/xeq.c     **** }
 9481              		.loc 1 837 2 view .LVU2496
 9482              		.cfi_endproc
 9483              	.LFE62:
 9485              		.section	.text.setXY,"ax",%progbits
 9486              		.align	1
 9487              		.p2align 2,,3
 9488              		.global	setXY
 9489              		.syntax unified
 9490              		.thumb
 9491              		.thumb_func
 9492              		.fpu fpv4-sp-d16
 9494              	setXY:
 9495              	.LVL680:
 9496              	.LFB66:
 859:src/xeq.c     **** 	setX(x);
 9497              		.loc 1 859 52 is_stmt 1 view -0
 9498              		.cfi_startproc
 9499              		@ args = 0, pretend = 0, frame = 0
 9500              		@ frame_needed = 0, uses_anonymous_args = 0
 860:src/xeq.c     **** 	setY(y);
 9501              		.loc 1 860 2 view .LVU2498
 9502              	.LBB2113:
 9503              	.LBI2113:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9504              		.loc 1 828 6 view .LVU2499
 9505              	.LBB2114:
 829:src/xeq.c     **** }
 9506              		.loc 1 829 2 view .LVU2500
 9507              	.LBE2114:
 9508              	.LBE2113:
 859:src/xeq.c     **** 	setX(x);
 9509              		.loc 1 859 52 is_stmt 0 view .LVU2501
 9510 0000 10B5     		push	{r4, lr}
 9511              		.cfi_def_cfa_offset 8
 9512              		.cfi_offset 4, -8
 9513              		.cfi_offset 14, -4
 859:src/xeq.c     **** 	setX(x);
 9514              		.loc 1 859 52 view .LVU2502
 9515 0002 0C46     		mov	r4, r1
 9516              	.LBB2116:
 9517              	.LBB2115:
 829:src/xeq.c     **** }
 9518              		.loc 1 829 2 view .LVU2503
 9519 0004 0146     		mov	r1, r0
 9520              	.LVL681:
 829:src/xeq.c     **** }
 9521              		.loc 1 829 2 view .LVU2504
 9522 0006 6420     		movs	r0, #100
 9523              	.LVL682:
ARM GAS  /tmp/cccVhVyH.s 			page 309


 829:src/xeq.c     **** }
 9524              		.loc 1 829 2 view .LVU2505
 9525 0008 FFF7FEFF 		bl	setRegister
 9526              	.LVL683:
 829:src/xeq.c     **** }
 9527              		.loc 1 829 2 view .LVU2506
 9528              	.LBE2115:
 9529              	.LBE2116:
 861:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 9530              		.loc 1 861 2 is_stmt 1 view .LVU2507
 9531              	.LBB2117:
 9532              	.LBI2117:
 836:src/xeq.c     **** 	setRegister(regY_idx, y);
 9533              		.loc 1 836 6 view .LVU2508
 9534              	.LBB2118:
 837:src/xeq.c     **** }
 9535              		.loc 1 837 2 view .LVU2509
 9536 000c 2146     		mov	r1, r4
 9537 000e 6520     		movs	r0, #101
 9538 0010 FFF7FEFF 		bl	setRegister
 9539              	.LVL684:
 837:src/xeq.c     **** }
 9540              		.loc 1 837 2 is_stmt 0 view .LVU2510
 9541              	.LBE2118:
 9542              	.LBE2117:
 863:src/xeq.c     **** #endif
 9543              		.loc 1 863 2 is_stmt 1 view .LVU2511
 9544 0014 044B     		ldr	r3, .L721
 9545 0016 1A68     		ldr	r2, [r3]
 9546 0018 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 9547 001c 43F01003 		orr	r3, r3, #16
 9548 0020 82F8DE37 		strb	r3, [r2, #2014]
 865:src/xeq.c     **** 
 9549              		.loc 1 865 1 is_stmt 0 view .LVU2512
 9550 0024 10BD     		pop	{r4, pc}
 9551              	.LVL685:
 9552              	.L722:
 865:src/xeq.c     **** 
 9553              		.loc 1 865 1 view .LVU2513
 9554 0026 00BF     		.align	2
 9555              	.L721:
 9556 0028 00000000 		.word	main_ram
 9557              		.cfi_endproc
 9558              	.LFE66:
 9560              		.section	.text.convert_regK,"ax",%progbits
 9561              		.align	1
 9562              		.p2align 2,,3
 9563              		.global	convert_regK
 9564              		.syntax unified
 9565              		.thumb
 9566              		.thumb_func
 9567              		.fpu fpv4-sp-d16
 9569              	convert_regK:
 9570              	.LVL686:
 9571              	.LFB75:
 939:src/xeq.c     **** 	decNumber k;
 9572              		.loc 1 939 41 is_stmt 1 view -0
ARM GAS  /tmp/cccVhVyH.s 			page 310


 9573              		.cfi_startproc
 9574              		@ args = 0, pretend = 0, frame = 40
 9575              		@ frame_needed = 0, uses_anonymous_args = 0
 940:src/xeq.c     **** 
 9576              		.loc 1 940 2 view .LVU2515
 942:src/xeq.c     **** 	if (i==j) return; // no mode change
 9577              		.loc 1 942 2 view .LVU2516
 9578              	.LBB2119:
 9579              	.LBI2119:
4103:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 9580              		.loc 1 4103 17 view .LVU2517
 9581              	.LBB2120:
4104:src/xeq.c     **** 		return TRIG_RAD;
 9582              		.loc 1 4104 2 view .LVU2518
 9583              	.LBE2120:
 9584              	.LBE2119:
 939:src/xeq.c     **** 	decNumber k;
 9585              		.loc 1 939 41 is_stmt 0 view .LVU2519
 9586 0000 70B5     		push	{r4, r5, r6, lr}
 9587              		.cfi_def_cfa_offset 16
 9588              		.cfi_offset 4, -16
 9589              		.cfi_offset 5, -12
 9590              		.cfi_offset 6, -8
 9591              		.cfi_offset 14, -4
 9592              	.LBB2124:
 9593              	.LBB2121:
4104:src/xeq.c     **** 		return TRIG_RAD;
 9594              		.loc 1 4104 6 view .LVU2520
 9595 0002 2A4B     		ldr	r3, .L744
 9596 0004 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
4104:src/xeq.c     **** 		return TRIG_RAD;
 9597              		.loc 1 4104 5 view .LVU2521
 9598 0006 9B07     		lsls	r3, r3, #30
 9599              	.LBE2121:
 9600              	.LBE2124:
 939:src/xeq.c     **** 	decNumber k;
 9601              		.loc 1 939 41 view .LVU2522
 9602 0008 8AB0     		sub	sp, sp, #40
 9603              		.cfi_def_cfa_offset 56
 939:src/xeq.c     **** 	decNumber k;
 9604              		.loc 1 939 41 view .LVU2523
 9605 000a 0446     		mov	r4, r0
 9606              	.LBB2125:
 9607              	.LBB2122:
4104:src/xeq.c     **** 		return TRIG_RAD;
 9608              		.loc 1 4104 5 view .LVU2524
 9609 000c 27D4     		bmi	.L727
4104:src/xeq.c     **** 		return TRIG_RAD;
 9610              		.loc 1 4104 19 view .LVU2525
 9611 000e 284B     		ldr	r3, .L744+4
 9612 0010 93F90130 		ldrsb	r3, [r3, #1]
 9613 0014 002B     		cmp	r3, #0
 9614 0016 22DB     		blt	.L727
4107:src/xeq.c     **** }
 9615              		.loc 1 4107 2 is_stmt 1 view .LVU2526
4107:src/xeq.c     **** }
 9616              		.loc 1 4107 33 is_stmt 0 view .LVU2527
ARM GAS  /tmp/cccVhVyH.s 			page 311


 9617 0018 264B     		ldr	r3, .L744+8
 9618 001a 1B68     		ldr	r3, [r3]
 9619 001c 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 9620              	.LBE2122:
 9621              	.LBE2125:
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9622              		.loc 1 943 5 view .LVU2528
 9623 0020 B0EB931F 		cmp	r0, r3, lsr #6
 9624              	.LBB2126:
 9625              	.LBB2123:
4107:src/xeq.c     **** }
 9626              		.loc 1 4107 33 view .LVU2529
 9627 0024 4FEA9316 		lsr	r6, r3, #6
 9628              	.LVL687:
4107:src/xeq.c     **** }
 9629              		.loc 1 4107 33 view .LVU2530
 9630              	.LBE2123:
 9631              	.LBE2126:
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9632              		.loc 1 943 2 is_stmt 1 view .LVU2531
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9633              		.loc 1 943 5 is_stmt 0 view .LVU2532
 9634 0028 17D0     		beq	.L723
 944:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9635              		.loc 1 944 2 is_stmt 1 view .LVU2533
 9636 002a 01AD     		add	r5, sp, #4
 9637 002c 2846     		mov	r0, r5
 9638              	.LVL688:
 944:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9639              		.loc 1 944 2 is_stmt 0 view .LVU2534
 9640 002e 6F21     		movs	r1, #111
 9641 0030 FFF7FEFF 		bl	getRegister
 9642              	.LVL689:
 945:src/xeq.c     **** 		case TRIG_DEG:
 9643              		.loc 1 945 2 is_stmt 1 view .LVU2535
 9644 0034 012E     		cmp	r6, #1
 9645 0036 19D0     		beq	.L726
 9646 0038 022E     		cmp	r6, #2
 9647 003a 24D0     		beq	.L730
 9648 003c 26B9     		cbnz	r6, .L731
 947:src/xeq.c     **** 			break;
 9649              		.loc 1 947 4 view .LVU2536
 9650 003e 1E4A     		ldr	r2, .L744+12
 9651 0040 2946     		mov	r1, r5
 9652 0042 2846     		mov	r0, r5
 9653 0044 FFF7FEFF 		bl	dn_divide
 9654              	.LVL690:
 948:src/xeq.c     **** 		case TRIG_RAD:
 9655              		.loc 1 948 4 view .LVU2537
 9656              	.L731:
 954:src/xeq.c     **** 	}
 9657              		.loc 1 954 11 view .LVU2538
 956:src/xeq.c     **** 		case TRIG_DEG:
 9658              		.loc 1 956 2 view .LVU2539
 9659 0048 012C     		cmp	r4, #1
 9660 004a 16D0     		beq	.L732
 9661              	.L743:
ARM GAS  /tmp/cccVhVyH.s 			page 312


 956:src/xeq.c     **** 		case TRIG_DEG:
 9662              		.loc 1 956 2 is_stmt 0 view .LVU2540
 9663 004c 022C     		cmp	r4, #2
 9664 004e 20D0     		beq	.L733
 9665 0050 2CB3     		cbz	r4, .L742
 9666              	.L734:
 965:src/xeq.c     **** 	}
 9667              		.loc 1 965 11 is_stmt 1 view .LVU2541
 967:src/xeq.c     **** }
 9668              		.loc 1 967 2 view .LVU2542
 9669 0052 2946     		mov	r1, r5
 9670 0054 6F20     		movs	r0, #111
 9671 0056 FFF7FEFF 		bl	setRegister
 9672              	.LVL691:
 9673              	.L723:
 968:src/xeq.c     **** 
 9674              		.loc 1 968 1 is_stmt 0 view .LVU2543
 9675 005a 0AB0     		add	sp, sp, #40
 9676              		.cfi_remember_state
 9677              		.cfi_def_cfa_offset 16
 9678              		@ sp needed
 9679 005c 70BD     		pop	{r4, r5, r6, pc}
 9680              	.LVL692:
 9681              	.L727:
 9682              		.cfi_restore_state
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9683              		.loc 1 943 2 is_stmt 1 view .LVU2544
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9684              		.loc 1 943 5 is_stmt 0 view .LVU2545
 9685 005e 012C     		cmp	r4, #1
 9686 0060 FBD0     		beq	.L723
 944:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9687              		.loc 1 944 2 is_stmt 1 view .LVU2546
 9688 0062 01AD     		add	r5, sp, #4
 9689 0064 2846     		mov	r0, r5
 9690              	.LVL693:
 944:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9691              		.loc 1 944 2 is_stmt 0 view .LVU2547
 9692 0066 6F21     		movs	r1, #111
 9693 0068 FFF7FEFF 		bl	getRegister
 9694              	.LVL694:
 945:src/xeq.c     **** 		case TRIG_DEG:
 9695              		.loc 1 945 2 is_stmt 1 view .LVU2548
 9696              	.L726:
 950:src/xeq.c     **** 			break;
 9697              		.loc 1 950 4 view .LVU2549
 9698 006c 134A     		ldr	r2, .L744+16
 9699 006e 2946     		mov	r1, r5
 9700 0070 2846     		mov	r0, r5
 9701 0072 FFF7FEFF 		bl	dn_divide
 9702              	.LVL695:
 951:src/xeq.c     **** 		case TRIG_GRAD:
 9703              		.loc 1 951 4 view .LVU2550
 954:src/xeq.c     **** 	}
 9704              		.loc 1 954 11 view .LVU2551
 956:src/xeq.c     **** 		case TRIG_DEG:
 9705              		.loc 1 956 2 view .LVU2552
ARM GAS  /tmp/cccVhVyH.s 			page 313


 9706 0076 012C     		cmp	r4, #1
 9707 0078 E8D1     		bne	.L743
 9708              	.L732:
 961:src/xeq.c     **** 			break;
 9709              		.loc 1 961 4 view .LVU2553
 9710 007a 104A     		ldr	r2, .L744+16
 9711 007c 2946     		mov	r1, r5
 9712 007e 2846     		mov	r0, r5
 9713 0080 FFF7FEFF 		bl	dn_multiply
 9714              	.LVL696:
 962:src/xeq.c     **** 		case TRIG_GRAD:
 9715              		.loc 1 962 4 view .LVU2554
 9716 0084 E5E7     		b	.L734
 9717              	.L730:
 953:src/xeq.c     **** 		default:;
 9718              		.loc 1 953 4 view .LVU2555
 9719 0086 0E4A     		ldr	r2, .L744+20
 9720 0088 2946     		mov	r1, r5
 9721 008a 2846     		mov	r0, r5
 9722 008c FFF7FEFF 		bl	dn_divide
 9723              	.LVL697:
 9724 0090 DAE7     		b	.L731
 9725              	.L733:
 964:src/xeq.c     **** 		default:;
 9726              		.loc 1 964 4 view .LVU2556
 9727 0092 0B4A     		ldr	r2, .L744+20
 9728 0094 2946     		mov	r1, r5
 9729 0096 2846     		mov	r0, r5
 9730 0098 FFF7FEFF 		bl	dn_multiply
 9731              	.LVL698:
 9732 009c D9E7     		b	.L734
 9733              	.L742:
 958:src/xeq.c     **** 			break;
 9734              		.loc 1 958 4 view .LVU2557
 9735 009e 064A     		ldr	r2, .L744+12
 9736 00a0 2946     		mov	r1, r5
 9737 00a2 2846     		mov	r0, r5
 9738 00a4 FFF7FEFF 		bl	dn_multiply
 9739              	.LVL699:
 959:src/xeq.c     **** 		case TRIG_RAD:
 9740              		.loc 1 959 4 view .LVU2558
 9741 00a8 D3E7     		b	.L734
 9742              	.L745:
 9743 00aa 00BF     		.align	2
 9744              	.L744:
 9745 00ac 00000000 		.word	StateWhileOn
 9746 00b0 00000000 		.word	XromParams
 9747 00b4 00000000 		.word	main_ram
 9748 00b8 00000000 		.word	const_360
 9749 00bc 00000000 		.word	const_2PI
 9750 00c0 00000000 		.word	const_400
 9751              		.cfi_endproc
 9752              	.LFE75:
 9754              		.section	.text.cpx_nop,"ax",%progbits
 9755              		.align	1
 9756              		.p2align 2,,3
 9757              		.global	cpx_nop
ARM GAS  /tmp/cccVhVyH.s 			page 314


 9758              		.syntax unified
 9759              		.thumb
 9760              		.thumb_func
 9761              		.fpu fpv4-sp-d16
 9763              	cpx_nop:
 9764              	.LVL700:
 9765              	.LFB78:
1011:src/xeq.c     ****   reset_shift();
 9766              		.loc 1 1011 29 view -0
 9767              		.cfi_startproc
 9768              		@ args = 0, pretend = 0, frame = 40
 9769              		@ frame_needed = 0, uses_anonymous_args = 0
1012:src/xeq.c     **** 	switch (op) {
 9770              		.loc 1 1012 3 view .LVU2560
1011:src/xeq.c     ****   reset_shift();
 9771              		.loc 1 1011 29 is_stmt 0 view .LVU2561
 9772 0000 30B5     		push	{r4, r5, lr}
 9773              		.cfi_def_cfa_offset 12
 9774              		.cfi_offset 4, -12
 9775              		.cfi_offset 5, -8
 9776              		.cfi_offset 14, -4
 9777 0002 0446     		mov	r4, r0
 9778 0004 8BB0     		sub	sp, sp, #44
 9779              		.cfi_def_cfa_offset 56
1012:src/xeq.c     **** 	switch (op) {
 9780              		.loc 1 1012 3 view .LVU2562
 9781 0006 FFF7FEFF 		bl	reset_shift
 9782              	.LVL701:
1013:src/xeq.c     **** 	case OP_CYES: // set flag to allow complex mode to be entered - can be called at any time
 9783              		.loc 1 1013 2 is_stmt 1 view .LVU2563
 9784 000a A4F1CA00 		sub	r0, r4, #202
 9785 000e 0B28     		cmp	r0, #11
 9786 0010 13D8     		bhi	.L768
 9787 0012 DFE800F0 		tbb	[pc, r0]
 9788              	.L749:
 9789 0016 22       		.byte	(.L758-.L749)/2
 9790 0017 3F       		.byte	(.L764-.L749)/2
 9791 0018 06       		.byte	(.L756-.L749)/2
 9792 0019 63       		.byte	(.L755-.L749)/2
 9793 001a 72       		.byte	(.L754-.L749)/2
 9794 001b 7A       		.byte	(.L753-.L749)/2
 9795 001c 12       		.byte	(.L768-.L749)/2
 9796 001d 12       		.byte	(.L768-.L749)/2
 9797 001e 81       		.byte	(.L752-.L749)/2
 9798 001f 8A       		.byte	(.L751-.L749)/2
 9799 0020 93       		.byte	(.L750-.L749)/2
 9800 0021 AA       		.byte	(.L748-.L749)/2
 9801              		.p2align 1
 9802              	.L756:
 9803              	.LBB2127:
1056:src/xeq.c     **** 		getY(&y);
 9804              		.loc 1 1056 3 view .LVU2564
1057:src/xeq.c     **** 		dn_minus(&y, &y);
 9805              		.loc 1 1057 3 view .LVU2565
 9806              	.LVL702:
 9807              	.LBB2128:
 9808              	.LBI2128:
ARM GAS  /tmp/cccVhVyH.s 			page 315


 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 9809              		.loc 1 832 6 view .LVU2566
 9810              	.LBB2129:
 833:src/xeq.c     **** }
 9811              		.loc 1 833 2 view .LVU2567
 9812 0022 6521     		movs	r1, #101
 9813 0024 01A8     		add	r0, sp, #4
 9814              	.LVL703:
 833:src/xeq.c     **** }
 9815              		.loc 1 833 2 is_stmt 0 view .LVU2568
 9816 0026 FFF7FEFF 		bl	getRegister
 9817              	.LVL704:
 833:src/xeq.c     **** }
 9818              		.loc 1 833 2 view .LVU2569
 9819              	.LBE2129:
 9820              	.LBE2128:
1058:src/xeq.c     **** 		setY(&y);
 9821              		.loc 1 1058 3 is_stmt 1 view .LVU2570
 9822 002a 01A9     		add	r1, sp, #4
 9823 002c 0846     		mov	r0, r1
 9824 002e FFF7FEFF 		bl	dn_minus
 9825              	.LVL705:
1059:src/xeq.c     **** 		}
 9826              		.loc 1 1059 3 view .LVU2571
 9827              	.LBB2130:
 9828              	.LBI2130:
 836:src/xeq.c     **** 	setRegister(regY_idx, y);
 9829              		.loc 1 836 6 view .LVU2572
 9830              	.LBB2131:
 837:src/xeq.c     **** }
 9831              		.loc 1 837 2 view .LVU2573
 9832 0032 01A9     		add	r1, sp, #4
 9833              	.LVL706:
 837:src/xeq.c     **** }
 9834              		.loc 1 837 2 is_stmt 0 view .LVU2574
 9835 0034 6520     		movs	r0, #101
 9836 0036 FFF7FEFF 		bl	setRegister
 9837              	.LVL707:
 9838              	.L768:
 837:src/xeq.c     **** }
 9839              		.loc 1 837 2 view .LVU2575
 9840              	.LBE2131:
 9841              	.LBE2130:
 9842              	.LBE2127:
1061:src/xeq.c     **** 	case OP_C_MRE: // change sign of real part
 9843              		.loc 1 1061 3 is_stmt 1 view .LVU2576
 9844 003a 5A4B     		ldr	r3, .L769
 9845 003c 1A68     		ldr	r2, [r3]
 9846              	.L759:
1082:src/xeq.c     **** 	}
 9847              		.loc 1 1082 10 view .LVU2577
1084:src/xeq.c     **** 	CLEAR_POLAR_READY;
 9848              		.loc 1 1084 2 view .LVU2578
 9849              	.LBB2132:
 9850              	.LBI2132:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 9851              		.loc 1 539 13 view .LVU2579
ARM GAS  /tmp/cccVhVyH.s 			page 316


 9852              	.LBB2133:
 540:src/xeq.c     **** }
 9853              		.loc 1 540 2 view .LVU2580
 540:src/xeq.c     **** }
 9854              		.loc 1 540 20 is_stmt 0 view .LVU2581
 9855 003e 5A4B     		ldr	r3, .L769+4
 9856 0040 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 9857 0042 0120     		movs	r0, #1
 9858 0044 60F38711 		bfi	r1, r0, #6, #2
 9859 0048 1975     		strb	r1, [r3, #20]
 9860              	.LBE2133:
 9861              	.LBE2132:
1085:src/xeq.c     **** }
 9862              		.loc 1 1085 2 is_stmt 1 view .LVU2582
 9863 004a 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 9864 004e 43F01003 		orr	r3, r3, #16
 9865 0052 82F8DE37 		strb	r3, [r2, #2014]
 9866              	.L746:
1086:src/xeq.c     **** #endif
 9867              		.loc 1 1086 1 is_stmt 0 view .LVU2583
 9868 0056 0BB0     		add	sp, sp, #44
 9869              		.cfi_remember_state
 9870              		.cfi_def_cfa_offset 12
 9871              		@ sp needed
 9872 0058 30BD     		pop	{r4, r5, pc}
 9873              	.L758:
 9874              		.cfi_restore_state
1021:src/xeq.c     **** 			INIT_8;
 9875              		.loc 1 1021 3 is_stmt 1 view .LVU2584
1021:src/xeq.c     **** 			INIT_8;
 9876              		.loc 1 1021 7 is_stmt 0 view .LVU2585
 9877 005a 524C     		ldr	r4, .L769
 9878 005c 2368     		ldr	r3, [r4]
1021:src/xeq.c     **** 			INIT_8;
 9879              		.loc 1 1021 6 view .LVU2586
 9880 005e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 9881 0062 93F8DD07 		ldrb	r0, [r3, #2013]	@ zero_extendqisi2
1027:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9882              		.loc 1 1027 3 view .LVU2587
 9883 0066 93F8E417 		ldrb	r1, [r3, #2020]	@ zero_extendqisi2
1021:src/xeq.c     **** 			INIT_8;
 9884              		.loc 1 1021 6 view .LVU2588
 9885 006a C2F3C005 		ubfx	r5, r2, #3, #1
1027:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9886              		.loc 1 1027 3 view .LVU2589
 9887 006e 41F00401 		orr	r1, r1, #4
1028:src/xeq.c     **** #ifdef DM42
 9888              		.loc 1 1028 22 view .LVU2590
 9889 0072 42F00802 		orr	r2, r2, #8
 9890 0076 65F38610 		bfi	r0, r5, #6, #1
 9891 007a 83F8EA27 		strb	r2, [r3, #2026]
 9892 007e 83F8DD07 		strb	r0, [r3, #2013]
1027:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9893              		.loc 1 1027 3 is_stmt 1 view .LVU2591
 9894 0082 83F8E417 		strb	r1, [r3, #2020]
1028:src/xeq.c     **** #ifdef DM42
 9895              		.loc 1 1028 3 view .LVU2592
ARM GAS  /tmp/cccVhVyH.s 			page 317


1030:src/xeq.c     **** 		display_current_menu();
 9896              		.loc 1 1030 3 view .LVU2593
 9897 0086 1120     		movs	r0, #17
 9898 0088 FFF7FEFF 		bl	set_menu
 9899              	.LVL708:
1031:src/xeq.c     **** #endif
 9900              		.loc 1 1031 3 view .LVU2594
 9901 008c FFF7FEFF 		bl	display_current_menu
 9902              	.LVL709:
1033:src/xeq.c     **** 	case OP_CNO: // reset flag so that complex mode cannot be entered
 9903              		.loc 1 1033 3 view .LVU2595
 9904 0090 2268     		ldr	r2, [r4]
 9905 0092 D4E7     		b	.L759
 9906              	.L764:
 9907 0094 434C     		ldr	r4, .L769
 9908              	.L757:
1042:src/xeq.c     **** #ifdef DM42
 9909              		.loc 1 1042 3 view .LVU2596
 9910 0096 0120     		movs	r0, #1
 9911 0098 FFF7FEFF 		bl	finish_cpx_entry
 9912              	.LVL710:
1044:src/xeq.c     **** #endif
 9913              		.loc 1 1044 3 view .LVU2597
 9914 009c 0021     		movs	r1, #0
 9915 009e 8420     		movs	r0, #132
 9916 00a0 FFF7FEFF 		bl	dot
 9917              	.LVL711:
1046:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9918              		.loc 1 1046 3 view .LVU2598
 9919 00a4 2368     		ldr	r3, [r4]
1048:src/xeq.c     **** #ifdef DM42
 9920              		.loc 1 1048 21 is_stmt 0 view .LVU2599
 9921 00a6 4049     		ldr	r1, .L769+4
1047:src/xeq.c     **** 		State2.wascomplex = 0;
 9922              		.loc 1 1047 24 view .LVU2600
 9923 00a8 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
1047:src/xeq.c     **** 		State2.wascomplex = 0;
 9924              		.loc 1 1047 22 view .LVU2601
 9925 00ac 93F8EA47 		ldrb	r4, [r3, #2026]	@ zero_extendqisi2
1046:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9926              		.loc 1 1046 3 view .LVU2602
 9927 00b0 93F8E407 		ldrb	r0, [r3, #2020]	@ zero_extendqisi2
1047:src/xeq.c     **** 		State2.wascomplex = 0;
 9928              		.loc 1 1047 24 view .LVU2603
 9929 00b4 C2F38012 		ubfx	r2, r2, #6, #1
1047:src/xeq.c     **** 		State2.wascomplex = 0;
 9930              		.loc 1 1047 22 view .LVU2604
 9931 00b8 62F3C304 		bfi	r4, r2, #3, #1
 9932 00bc 83F8EA47 		strb	r4, [r3, #2026]
1048:src/xeq.c     **** #ifdef DM42
 9933              		.loc 1 1048 21 view .LVU2605
 9934 00c0 0A7D     		ldrb	r2, [r1, #20]	@ zero_extendqisi2
1046:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9935              		.loc 1 1046 3 view .LVU2606
 9936 00c2 6FF38200 		bfc	r0, #2, #1
1048:src/xeq.c     **** #ifdef DM42
 9937              		.loc 1 1048 21 view .LVU2607
ARM GAS  /tmp/cccVhVyH.s 			page 318


 9938 00c6 6FF38712 		bfc	r2, #6, #2
1046:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9939              		.loc 1 1046 3 view .LVU2608
 9940 00ca 83F8E407 		strb	r0, [r3, #2020]
1047:src/xeq.c     **** 		State2.wascomplex = 0;
 9941              		.loc 1 1047 3 is_stmt 1 view .LVU2609
1048:src/xeq.c     **** #ifdef DM42
 9942              		.loc 1 1048 3 view .LVU2610
1048:src/xeq.c     **** #ifdef DM42
 9943              		.loc 1 1048 21 is_stmt 0 view .LVU2611
 9944 00ce 0A75     		strb	r2, [r1, #20]
1050:src/xeq.c     **** 		display_current_menu();
 9945              		.loc 1 1050 3 is_stmt 1 view .LVU2612
 9946 00d0 FFF7FEFF 		bl	set_default_menu
 9947              	.LVL712:
1051:src/xeq.c     **** #endif
 9948              		.loc 1 1051 3 view .LVU2613
 9949 00d4 FFF7FEFF 		bl	display_current_menu
 9950              	.LVL713:
1053:src/xeq.c     **** 	case OP_C_MIM: // change sign of imaginary part
 9951              		.loc 1 1053 3 view .LVU2614
1086:src/xeq.c     **** #endif
 9952              		.loc 1 1086 1 is_stmt 0 view .LVU2615
 9953 00d8 0BB0     		add	sp, sp, #44
 9954              		.cfi_remember_state
 9955              		.cfi_def_cfa_offset 12
 9956              		@ sp needed
 9957 00da 30BD     		pop	{r4, r5, pc}
 9958              	.L755:
 9959              		.cfi_restore_state
 9960              	.LBB2134:
1064:src/xeq.c     **** 		getX(&x);
 9961              		.loc 1 1064 3 is_stmt 1 view .LVU2616
1065:src/xeq.c     **** 		dn_minus(&x, &x);
 9962              		.loc 1 1065 3 view .LVU2617
 9963              	.LVL714:
 9964              	.LBB2135:
 9965              	.LBI2135:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 9966              		.loc 1 824 12 view .LVU2618
 9967              	.LBB2136:
 825:src/xeq.c     **** }
 9968              		.loc 1 825 2 view .LVU2619
 825:src/xeq.c     **** }
 9969              		.loc 1 825 9 is_stmt 0 view .LVU2620
 9970 00dc 6421     		movs	r1, #100
 9971 00de 01A8     		add	r0, sp, #4
 9972              	.LVL715:
 825:src/xeq.c     **** }
 9973              		.loc 1 825 9 view .LVU2621
 9974 00e0 FFF7FEFF 		bl	getRegister
 9975              	.LVL716:
 825:src/xeq.c     **** }
 9976              		.loc 1 825 9 view .LVU2622
 9977              	.LBE2136:
 9978              	.LBE2135:
1066:src/xeq.c     **** 		setX(&x);
ARM GAS  /tmp/cccVhVyH.s 			page 319


 9979              		.loc 1 1066 3 is_stmt 1 view .LVU2623
 9980 00e4 01A9     		add	r1, sp, #4
 9981 00e6 0846     		mov	r0, r1
 9982 00e8 FFF7FEFF 		bl	dn_minus
 9983              	.LVL717:
1067:src/xeq.c     **** 		}
 9984              		.loc 1 1067 3 view .LVU2624
 9985              	.LBB2137:
 9986              	.LBI2137:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9987              		.loc 1 828 6 view .LVU2625
 9988              	.LBB2138:
 829:src/xeq.c     **** }
 9989              		.loc 1 829 2 view .LVU2626
 9990 00ec 01A9     		add	r1, sp, #4
 9991              	.LVL718:
 829:src/xeq.c     **** }
 9992              		.loc 1 829 2 is_stmt 0 view .LVU2627
 9993 00ee 6420     		movs	r0, #100
 9994 00f0 FFF7FEFF 		bl	setRegister
 9995              	.LVL719:
 829:src/xeq.c     **** }
 9996              		.loc 1 829 2 view .LVU2628
 9997              	.LBE2138:
 9998              	.LBE2137:
 9999              	.LBE2134:
1069:src/xeq.c     **** 	case OP_C_IM: // zero real part
 10000              		.loc 1 1069 3 is_stmt 1 view .LVU2629
 10001 00f4 2B4B     		ldr	r3, .L769
 10002 00f6 1A68     		ldr	r2, [r3]
 10003 00f8 A1E7     		b	.L759
 10004              	.L754:
1074:src/xeq.c     **** 		break;
 10005              		.loc 1 1074 3 view .LVU2630
 10006              	.LBB2139:
 10007              	.LBI2139:
1557:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 10008              		.loc 1 1557 6 view .LVU2631
 10009              	.LBB2140:
1558:src/xeq.c     **** }
 10010              		.loc 1 1558 2 view .LVU2632
 10011 00fa 6520     		movs	r0, #101
 10012 00fc FFF7FEFF 		bl	get_reg_n
 10013              	.LVL720:
 10014 0100 FFF7FEFF 		bl	set_zero
 10015              	.LVL721:
 10016 0104 274B     		ldr	r3, .L769
 10017 0106 1A68     		ldr	r2, [r3]
1559:src/xeq.c     **** 
 10018              		.loc 1 1559 1 is_stmt 0 view .LVU2633
 10019 0108 99E7     		b	.L759
 10020              	.L753:
 10021              	.LBE2140:
 10022              	.LBE2139:
1071:src/xeq.c     **** 		break;
 10023              		.loc 1 1071 3 is_stmt 1 view .LVU2634
 10024              	.LBB2141:
ARM GAS  /tmp/cccVhVyH.s 			page 320


 10025              	.LBI2141:
1553:src/xeq.c     **** 	set_zero(StackBase);
 10026              		.loc 1 1553 6 view .LVU2635
 10027              	.LBB2142:
1554:src/xeq.c     **** }
 10028              		.loc 1 1554 2 view .LVU2636
 10029 010a 284B     		ldr	r3, .L769+8
 10030 010c 1868     		ldr	r0, [r3]
 10031 010e FFF7FEFF 		bl	set_zero
 10032              	.LVL722:
 10033 0112 244B     		ldr	r3, .L769
 10034 0114 1A68     		ldr	r2, [r3]
1555:src/xeq.c     **** 
 10035              		.loc 1 1555 1 is_stmt 0 view .LVU2637
 10036 0116 92E7     		b	.L759
 10037              	.L752:
 10038              	.LBE2142:
 10039              	.LBE2141:
1077:src/xeq.c     **** 		break;
 10040              		.loc 1 1077 3 is_stmt 1 view .LVU2638
 10041 0118 224B     		ldr	r3, .L769
 10042 011a 1A68     		ldr	r2, [r3]
 10043 011c 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 10044 0120 6FF34103 		bfc	r3, #1, #1
 10045 0124 82F8DE37 		strb	r3, [r2, #2014]
1078:src/xeq.c     **** 	case OP_CPXJ: // use j to display complex numbers
 10046              		.loc 1 1078 3 view .LVU2639
 10047 0128 89E7     		b	.L759
 10048              	.L751:
1080:src/xeq.c     **** 		break;
 10049              		.loc 1 1080 3 view .LVU2640
 10050 012a 1E4B     		ldr	r3, .L769
 10051 012c 1A68     		ldr	r2, [r3]
 10052 012e 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 10053 0132 43F00203 		orr	r3, r3, #2
 10054 0136 82F8DE37 		strb	r3, [r2, #2014]
1081:src/xeq.c     **** 	default:;
 10055              		.loc 1 1081 3 view .LVU2641
 10056 013a 80E7     		b	.L759
 10057              	.L750:
1015:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 10058              		.loc 1 1015 10 view .LVU2642
 10059 013c 194B     		ldr	r3, .L769
 10060 013e 1B68     		ldr	r3, [r3]
1016:src/xeq.c     **** 		CLEAR_IMAG;
 10061              		.loc 1 1016 3 view .LVU2643
1015:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 10062              		.loc 1 1015 10 is_stmt 0 view .LVU2644
 10063 0140 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
1016:src/xeq.c     **** 		CLEAR_IMAG;
 10064              		.loc 1 1016 3 view .LVU2645
 10065 0144 93F8E407 		ldrb	r0, [r3, #2020]	@ zero_extendqisi2
1017:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
 10066              		.loc 1 1017 3 view .LVU2646
 10067 0148 93F8EB17 		ldrb	r1, [r3, #2027]	@ zero_extendqisi2
1015:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 10068              		.loc 1 1015 10 view .LVU2647
ARM GAS  /tmp/cccVhVyH.s 			page 321


 10069 014c 22F00C02 		bic	r2, r2, #12
1016:src/xeq.c     **** 		CLEAR_IMAG;
 10070              		.loc 1 1016 3 view .LVU2648
 10071 0150 6FF3C300 		bfc	r0, #3, #1
1017:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
 10072              		.loc 1 1017 3 view .LVU2649
 10073 0154 6FF3C301 		bfc	r1, #3, #1
1015:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 10074              		.loc 1 1015 10 view .LVU2650
 10075 0158 42F00402 		orr	r2, r2, #4
1016:src/xeq.c     **** 		CLEAR_IMAG;
 10076              		.loc 1 1016 3 view .LVU2651
 10077 015c 83F8E407 		strb	r0, [r3, #2020]
1017:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
 10078              		.loc 1 1017 3 is_stmt 1 view .LVU2652
 10079 0160 83F8EB17 		strb	r1, [r3, #2027]
1018:src/xeq.c     **** 		return;
 10080              		.loc 1 1018 3 view .LVU2653
1015:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 10081              		.loc 1 1015 10 is_stmt 0 view .LVU2654
 10082 0164 83F8DE27 		strb	r2, [r3, #2014]
1019:src/xeq.c     **** 	case OP_C_ON: // start complex mode - only called if CPX_ENABLED and C_LOCK_OFF
 10083              		.loc 1 1019 3 is_stmt 1 view .LVU2655
 10084 0168 75E7     		b	.L746
 10085              	.L748:
1035:src/xeq.c     **** 			SET_CPX_NO;
 10086              		.loc 1 1035 3 view .LVU2656
1035:src/xeq.c     **** 			SET_CPX_NO;
 10087              		.loc 1 1035 8 is_stmt 0 view .LVU2657
 10088 016a 0E4C     		ldr	r4, .L769
 10089 016c 2368     		ldr	r3, [r4]
 10090 016e 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
1035:src/xeq.c     **** 			SET_CPX_NO;
 10091              		.loc 1 1035 6 view .LVU2658
 10092 0172 5007     		lsls	r0, r2, #29
 10093 0174 08D5     		bpl	.L761
1035:src/xeq.c     **** 			SET_CPX_NO;
 10094              		.loc 1 1035 8 discriminator 1 view .LVU2659
 10095 0176 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
1035:src/xeq.c     **** 			SET_CPX_NO;
 10096              		.loc 1 1035 7 discriminator 1 view .LVU2660
 10097 017a 5107     		lsls	r1, r2, #29
 10098 017c 04D5     		bpl	.L761
1040:src/xeq.c     **** 	case OP_C_OFF: // exit complex mode - only called if CPX_ENABLED and C_LOCK_ON
 10099              		.loc 1 1040 3 is_stmt 1 view .LVU2661
 10100 017e 6FF38202 		bfc	r2, #2, #1
 10101 0182 83F8DE27 		strb	r2, [r3, #2014]
 10102 0186 86E7     		b	.L757
 10103              	.L761:
1036:src/xeq.c     **** 			UNLOCK_C; //just in case
 10104              		.loc 1 1036 4 view .LVU2662
 10105 0188 93F8DE17 		ldrb	r1, [r3, #2014]	@ zero_extendqisi2
1037:src/xeq.c     **** 			return;
 10106              		.loc 1 1037 4 is_stmt 0 view .LVU2663
 10107 018c 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
1036:src/xeq.c     **** 			UNLOCK_C; //just in case
 10108              		.loc 1 1036 4 view .LVU2664
ARM GAS  /tmp/cccVhVyH.s 			page 322


 10109 0190 6FF38201 		bfc	r1, #2, #1
1037:src/xeq.c     **** 			return;
 10110              		.loc 1 1037 4 view .LVU2665
 10111 0194 6FF38202 		bfc	r2, #2, #1
1036:src/xeq.c     **** 			UNLOCK_C; //just in case
 10112              		.loc 1 1036 4 view .LVU2666
 10113 0198 83F8DE17 		strb	r1, [r3, #2014]
1037:src/xeq.c     **** 			return;
 10114              		.loc 1 1037 4 is_stmt 1 view .LVU2667
 10115 019c 83F8E427 		strb	r2, [r3, #2020]
1038:src/xeq.c     **** 		}
 10116              		.loc 1 1038 4 view .LVU2668
 10117 01a0 59E7     		b	.L746
 10118              	.L770:
 10119 01a2 00BF     		.align	2
 10120              	.L769:
 10121 01a4 00000000 		.word	main_ram
 10122 01a8 00000000 		.word	StateWhileOn
 10123 01ac 00000000 		.word	StackBase
 10124              		.cfi_endproc
 10125              	.LFE78:
 10127              		.section	.text.get_reg_n_int,"ax",%progbits
 10128              		.align	1
 10129              		.p2align 2,,3
 10130              		.global	get_reg_n_int
 10131              		.syntax unified
 10132              		.thumb
 10133              		.thumb_func
 10134              		.fpu fpv4-sp-d16
 10136              	get_reg_n_int:
 10137              	.LVL723:
 10138              	.LFB94:
1419:src/xeq.c     **** 	long long int ll;
 10139              		.loc 1 1419 40 view -0
 10140              		.cfi_startproc
 10141              		@ args = 0, pretend = 0, frame = 8
 10142              		@ frame_needed = 0, uses_anonymous_args = 0
1420:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
 10143              		.loc 1 1420 2 view .LVU2670
1421:src/xeq.c     **** 	return ll;
 10144              		.loc 1 1421 2 view .LVU2671
1419:src/xeq.c     **** 	long long int ll;
 10145              		.loc 1 1419 40 is_stmt 0 view .LVU2672
 10146 0000 00B5     		push	{lr}
 10147              		.cfi_def_cfa_offset 4
 10148              		.cfi_offset 14, -4
 10149 0002 83B0     		sub	sp, sp, #12
 10150              		.cfi_def_cfa_offset 16
1421:src/xeq.c     **** 	return ll;
 10151              		.loc 1 1421 13 view .LVU2673
 10152 0004 FFF7FEFF 		bl	get_reg_n
 10153              	.LVL724:
1421:src/xeq.c     **** 	return ll;
 10154              		.loc 1 1421 2 view .LVU2674
 10155 0008 0822     		movs	r2, #8
1421:src/xeq.c     **** 	return ll;
 10156              		.loc 1 1421 13 view .LVU2675
ARM GAS  /tmp/cccVhVyH.s 			page 323


 10157 000a 0146     		mov	r1, r0
1421:src/xeq.c     **** 	return ll;
 10158              		.loc 1 1421 2 view .LVU2676
 10159 000c 6846     		mov	r0, sp
 10160 000e FFF7FEFF 		bl	xcopy
 10161              	.LVL725:
1422:src/xeq.c     **** }
 10162              		.loc 1 1422 2 is_stmt 1 view .LVU2677
1423:src/xeq.c     **** 
 10163              		.loc 1 1423 1 is_stmt 0 view .LVU2678
 10164 0012 DDE90001 		ldrd	r0, [sp]
 10165 0016 03B0     		add	sp, sp, #12
 10166              		.cfi_def_cfa_offset 4
 10167              		@ sp needed
 10168 0018 5DF804FB 		ldr	pc, [sp], #4
 10169              		.cfi_endproc
 10170              	.LFE94:
 10172              		.section	.text.storcl_intop,"ax",%progbits
 10173              		.align	1
 10174              		.p2align 2,,3
 10175              		.syntax unified
 10176              		.thumb
 10177              		.thumb_func
 10178              		.fpu fpv4-sp-d16
 10180              	storcl_intop:
 10181              	.LVL726:
 10182              	.LFB116:
1688:src/xeq.c     **** 	long long int x, y;
 10183              		.loc 1 1688 83 is_stmt 1 view -0
 10184              		.cfi_startproc
 10185              		@ args = 0, pretend = 0, frame = 0
 10186              		@ frame_needed = 0, uses_anonymous_args = 0
1689:src/xeq.c     **** 
 10187              		.loc 1 1689 2 view .LVU2680
1691:src/xeq.c     **** 	y = get_reg_n_int(index);
 10188              		.loc 1 1691 2 view .LVU2681
 10189              	.LBB2143:
 10190              	.LBI2143:
1445:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10191              		.loc 1 1445 15 view .LVU2682
 10192              	.LBB2144:
1446:src/xeq.c     **** }
 10193              		.loc 1 1446 2 view .LVU2683
 10194              	.LBE2144:
 10195              	.LBE2143:
1688:src/xeq.c     **** 	long long int x, y;
 10196              		.loc 1 1688 83 is_stmt 0 view .LVU2684
 10197 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 10198              		.cfi_def_cfa_offset 32
 10199              		.cfi_offset 3, -32
 10200              		.cfi_offset 4, -28
 10201              		.cfi_offset 5, -24
 10202              		.cfi_offset 6, -20
 10203              		.cfi_offset 7, -16
 10204              		.cfi_offset 8, -12
 10205              		.cfi_offset 9, -8
 10206              		.cfi_offset 14, -4
ARM GAS  /tmp/cccVhVyH.s 			page 324


1688:src/xeq.c     **** 	long long int x, y;
 10207              		.loc 1 1688 83 view .LVU2685
 10208 0004 0446     		mov	r4, r0
 10209              	.LBB2148:
 10210              	.LBB2145:
1446:src/xeq.c     **** }
 10211              		.loc 1 1446 9 view .LVU2686
 10212 0006 6420     		movs	r0, #100
 10213              	.LVL727:
1446:src/xeq.c     **** }
 10214              		.loc 1 1446 9 view .LVU2687
 10215              	.LBE2145:
 10216              	.LBE2148:
1688:src/xeq.c     **** 	long long int x, y;
 10217              		.loc 1 1688 83 view .LVU2688
 10218 0008 8946     		mov	r9, r1
 10219 000a 9846     		mov	r8, r3
 10220 000c 1646     		mov	r6, r2
 10221              	.LBB2149:
 10222              	.LBB2146:
1446:src/xeq.c     **** }
 10223              		.loc 1 1446 9 view .LVU2689
 10224 000e FFF7FEFF 		bl	get_reg_n_int
 10225              	.LVL728:
1446:src/xeq.c     **** }
 10226              		.loc 1 1446 9 view .LVU2690
 10227 0012 0746     		mov	r7, r0
 10228              	.LBE2146:
 10229              	.LBE2149:
1692:src/xeq.c     **** 
 10230              		.loc 1 1692 6 view .LVU2691
 10231 0014 4846     		mov	r0, r9
 10232              	.LBB2150:
 10233              	.LBB2147:
1446:src/xeq.c     **** }
 10234              		.loc 1 1446 9 view .LVU2692
 10235 0016 0D46     		mov	r5, r1
 10236              	.LVL729:
1446:src/xeq.c     **** }
 10237              		.loc 1 1446 9 view .LVU2693
 10238              	.LBE2147:
 10239              	.LBE2150:
1692:src/xeq.c     **** 
 10240              		.loc 1 1692 2 is_stmt 1 view .LVU2694
1692:src/xeq.c     **** 
 10241              		.loc 1 1692 6 is_stmt 0 view .LVU2695
 10242 0018 FFF7FEFF 		bl	get_reg_n_int
 10243              	.LVL730:
1694:src/xeq.c     **** 		const long long int t = x;
 10244              		.loc 1 1694 2 is_stmt 1 view .LVU2696
1694:src/xeq.c     **** 		const long long int t = x;
 10245              		.loc 1 1694 5 is_stmt 0 view .LVU2697
 10246 001c B8F1000F 		cmp	r8, #0
 10247 0020 05D0     		beq	.L774
 10248 0022 3A46     		mov	r2, r7
 10249 0024 2B46     		mov	r3, r5
 10250              	.LBB2151:
ARM GAS  /tmp/cccVhVyH.s 			page 325


1696:src/xeq.c     **** 		y = t;
 10251              		.loc 1 1696 5 view .LVU2698
 10252 0026 0746     		mov	r7, r0
 10253              	.LVL731:
1696:src/xeq.c     **** 		y = t;
 10254              		.loc 1 1696 5 view .LVU2699
 10255 0028 0D46     		mov	r5, r1
 10256              	.LVL732:
1697:src/xeq.c     **** 	}
 10257              		.loc 1 1697 5 view .LVU2700
 10258 002a 1046     		mov	r0, r2
 10259              	.LVL733:
1697:src/xeq.c     **** 	}
 10260              		.loc 1 1697 5 view .LVU2701
 10261 002c 1946     		mov	r1, r3
 10262              	.LVL734:
 10263              	.L774:
1697:src/xeq.c     **** 	}
 10264              		.loc 1 1697 5 view .LVU2702
 10265              	.LBE2151:
1700:src/xeq.c     **** 	case 1:
 10266              		.loc 1 1700 2 is_stmt 1 view .LVU2703
 10267 002e 013C     		subs	r4, r4, #1
 10268 0030 052C     		cmp	r4, #5
 10269 0032 3AD8     		bhi	.L783
 10270 0034 DFE804F0 		tbb	[pc, r4]
 10271              	.L777:
 10272 0038 0C       		.byte	(.L782-.L777)/2
 10273 0039 15       		.byte	(.L781-.L777)/2
 10274 003a 1E       		.byte	(.L780-.L777)/2
 10275 003b 27       		.byte	(.L779-.L777)/2
 10276 003c 30       		.byte	(.L778-.L777)/2
 10277 003d 03       		.byte	(.L776-.L777)/2
 10278              		.p2align 1
 10279              	.L776:
1717:src/xeq.c     **** 		break;
 10280              		.loc 1 1717 3 view .LVU2704
1717:src/xeq.c     **** 		break;
 10281              		.loc 1 1717 8 is_stmt 0 view .LVU2705
 10282 003e 3A46     		mov	r2, r7
 10283 0040 2B46     		mov	r3, r5
 10284 0042 FFF7FEFF 		bl	intMax
 10285              	.LVL735:
1717:src/xeq.c     **** 		break;
 10286              		.loc 1 1717 6 view .LVU2706
 10287 0046 C6E90001 		strd	r0, [r6]
1718:src/xeq.c     **** 	default:
 10288              		.loc 1 1718 3 is_stmt 1 view .LVU2707
1722:src/xeq.c     **** }
 10289              		.loc 1 1722 9 is_stmt 0 view .LVU2708
 10290 004a 0020     		movs	r0, #0
 10291              	.L773:
1723:src/xeq.c     **** 
 10292              		.loc 1 1723 1 view .LVU2709
 10293 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10294              	.LVL736:
 10295              	.L782:
ARM GAS  /tmp/cccVhVyH.s 			page 326


1702:src/xeq.c     **** 		break;
 10296              		.loc 1 1702 3 is_stmt 1 view .LVU2710
1702:src/xeq.c     **** 		break;
 10297              		.loc 1 1702 8 is_stmt 0 view .LVU2711
 10298 0050 3A46     		mov	r2, r7
 10299 0052 2B46     		mov	r3, r5
 10300 0054 FFF7FEFF 		bl	intAdd
 10301              	.LVL737:
1702:src/xeq.c     **** 		break;
 10302              		.loc 1 1702 6 view .LVU2712
 10303 0058 C6E90001 		strd	r0, [r6]
1703:src/xeq.c     **** 	case 2:
 10304              		.loc 1 1703 3 is_stmt 1 view .LVU2713
1722:src/xeq.c     **** }
 10305              		.loc 1 1722 9 is_stmt 0 view .LVU2714
 10306 005c 0020     		movs	r0, #0
1723:src/xeq.c     **** 
 10307              		.loc 1 1723 1 view .LVU2715
 10308 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10309              	.LVL738:
 10310              	.L781:
1705:src/xeq.c     **** 		break;
 10311              		.loc 1 1705 3 is_stmt 1 view .LVU2716
1705:src/xeq.c     **** 		break;
 10312              		.loc 1 1705 8 is_stmt 0 view .LVU2717
 10313 0062 3A46     		mov	r2, r7
 10314 0064 2B46     		mov	r3, r5
 10315 0066 FFF7FEFF 		bl	intSubtract
 10316              	.LVL739:
1705:src/xeq.c     **** 		break;
 10317              		.loc 1 1705 6 view .LVU2718
 10318 006a C6E90001 		strd	r0, [r6]
1706:src/xeq.c     **** 	case 3:
 10319              		.loc 1 1706 3 is_stmt 1 view .LVU2719
1722:src/xeq.c     **** }
 10320              		.loc 1 1722 9 is_stmt 0 view .LVU2720
 10321 006e 0020     		movs	r0, #0
1723:src/xeq.c     **** 
 10322              		.loc 1 1723 1 view .LVU2721
 10323 0070 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10324              	.LVL740:
 10325              	.L780:
1708:src/xeq.c     **** 		break;
 10326              		.loc 1 1708 3 is_stmt 1 view .LVU2722
1708:src/xeq.c     **** 		break;
 10327              		.loc 1 1708 8 is_stmt 0 view .LVU2723
 10328 0074 3A46     		mov	r2, r7
 10329 0076 2B46     		mov	r3, r5
 10330 0078 FFF7FEFF 		bl	intMultiply
 10331              	.LVL741:
1708:src/xeq.c     **** 		break;
 10332              		.loc 1 1708 6 view .LVU2724
 10333 007c C6E90001 		strd	r0, [r6]
1709:src/xeq.c     **** 	case 4:
 10334              		.loc 1 1709 3 is_stmt 1 view .LVU2725
1722:src/xeq.c     **** }
 10335              		.loc 1 1722 9 is_stmt 0 view .LVU2726
ARM GAS  /tmp/cccVhVyH.s 			page 327


 10336 0080 0020     		movs	r0, #0
1723:src/xeq.c     **** 
 10337              		.loc 1 1723 1 view .LVU2727
 10338 0082 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10339              	.LVL742:
 10340              	.L779:
1711:src/xeq.c     **** 		break;
 10341              		.loc 1 1711 3 is_stmt 1 view .LVU2728
1711:src/xeq.c     **** 		break;
 10342              		.loc 1 1711 8 is_stmt 0 view .LVU2729
 10343 0086 3A46     		mov	r2, r7
 10344 0088 2B46     		mov	r3, r5
 10345 008a FFF7FEFF 		bl	intDivide
 10346              	.LVL743:
1711:src/xeq.c     **** 		break;
 10347              		.loc 1 1711 6 view .LVU2730
 10348 008e C6E90001 		strd	r0, [r6]
1712:src/xeq.c     **** 	case 5:
 10349              		.loc 1 1712 3 is_stmt 1 view .LVU2731
1722:src/xeq.c     **** }
 10350              		.loc 1 1722 9 is_stmt 0 view .LVU2732
 10351 0092 0020     		movs	r0, #0
1723:src/xeq.c     **** 
 10352              		.loc 1 1723 1 view .LVU2733
 10353 0094 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10354              	.LVL744:
 10355              	.L778:
1714:src/xeq.c     **** 		break;
 10356              		.loc 1 1714 3 is_stmt 1 view .LVU2734
1714:src/xeq.c     **** 		break;
 10357              		.loc 1 1714 8 is_stmt 0 view .LVU2735
 10358 0098 3A46     		mov	r2, r7
 10359 009a 2B46     		mov	r3, r5
 10360 009c FFF7FEFF 		bl	intMin
 10361              	.LVL745:
1714:src/xeq.c     **** 		break;
 10362              		.loc 1 1714 6 view .LVU2736
 10363 00a0 C6E90001 		strd	r0, [r6]
1715:src/xeq.c     **** 	case 6:
 10364              		.loc 1 1715 3 is_stmt 1 view .LVU2737
1722:src/xeq.c     **** }
 10365              		.loc 1 1722 9 is_stmt 0 view .LVU2738
 10366 00a4 0020     		movs	r0, #0
1723:src/xeq.c     **** 
 10367              		.loc 1 1723 1 view .LVU2739
 10368 00a6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10369              	.LVL746:
 10370              	.L783:
1722:src/xeq.c     **** }
 10371              		.loc 1 1722 9 view .LVU2740
 10372 00aa 0120     		movs	r0, #1
 10373              	.LVL747:
1722:src/xeq.c     **** }
 10374              		.loc 1 1722 9 view .LVU2741
 10375 00ac CEE7     		b	.L773
 10376              		.cfi_endproc
 10377              	.LFE116:
ARM GAS  /tmp/cccVhVyH.s 			page 328


 10379 00ae 00BF     		.section	.text.incdec,"ax",%progbits
 10380              		.align	1
 10381              		.p2align 2,,3
 10382              		.syntax unified
 10383              		.thumb
 10384              		.thumb_func
 10385              		.fpu fpv4-sp-d16
 10387              	incdec:
 10388              	.LVL748:
 10389              	.LFB193:
3404:src/xeq.c     **** 	if (is_intmode()) {
 10390              		.loc 1 3404 46 is_stmt 1 view -0
 10391              		.cfi_startproc
 10392              		@ args = 0, pretend = 0, frame = 80
 10393              		@ frame_needed = 0, uses_anonymous_args = 0
3405:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10394              		.loc 1 3405 2 view .LVU2743
3405:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10395              		.loc 1 3405 6 is_stmt 0 view .LVU2744
 10396 0000 244B     		ldr	r3, .L798
3404:src/xeq.c     **** 	if (is_intmode()) {
 10397              		.loc 1 3404 46 view .LVU2745
 10398 0002 70B5     		push	{r4, r5, r6, lr}
 10399              		.cfi_def_cfa_offset 16
 10400              		.cfi_offset 4, -16
 10401              		.cfi_offset 5, -12
 10402              		.cfi_offset 6, -8
 10403              		.cfi_offset 14, -4
3405:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10404              		.loc 1 3405 6 view .LVU2746
 10405 0004 1B68     		ldr	r3, [r3]
 10406 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3405:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10407              		.loc 1 3405 5 view .LVU2747
 10408 000a DB07     		lsls	r3, r3, #31
3404:src/xeq.c     **** 	if (is_intmode()) {
 10409              		.loc 1 3404 46 view .LVU2748
 10410 000c 94B0     		sub	sp, sp, #80
 10411              		.cfi_def_cfa_offset 96
3404:src/xeq.c     **** 	if (is_intmode()) {
 10412              		.loc 1 3404 46 view .LVU2749
 10413 000e 0D46     		mov	r5, r1
 10414 0010 0446     		mov	r4, r0
3405:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10415              		.loc 1 3405 5 view .LVU2750
 10416 0012 1ED5     		bpl	.L789
 10417              	.LVL749:
 10418              	.LBB2159:
 10419              	.LBI2159:
3404:src/xeq.c     **** 	if (is_intmode()) {
 10420              		.loc 1 3404 12 is_stmt 1 view .LVU2751
 10421              	.LBB2160:
3406:src/xeq.c     **** 		int xs;
 10422              		.loc 1 3406 3 view .LVU2752
3406:src/xeq.c     **** 		int xs;
 10423              		.loc 1 3406 21 is_stmt 0 view .LVU2753
 10424 0014 FFF7FEFF 		bl	get_reg_n_int
ARM GAS  /tmp/cccVhVyH.s 			page 329


 10425              	.LVL750:
3407:src/xeq.c     **** 		unsigned long long int xv;
 10426              		.loc 1 3407 3 is_stmt 1 view .LVU2754
3408:src/xeq.c     **** 
 10427              		.loc 1 3408 3 view .LVU2755
3410:src/xeq.c     **** 			x = intAdd(x, 1LL);
 10428              		.loc 1 3410 3 view .LVU2756
3411:src/xeq.c     **** 		else
 10429              		.loc 1 3411 8 is_stmt 0 view .LVU2757
 10430 0018 0122     		movs	r2, #1
 10431 001a 0023     		movs	r3, #0
3410:src/xeq.c     **** 			x = intAdd(x, 1LL);
 10432              		.loc 1 3410 6 view .LVU2758
 10433 001c 002D     		cmp	r5, #0
 10434 001e 33D1     		bne	.L796
3413:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10435              		.loc 1 3413 4 is_stmt 1 view .LVU2759
3413:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10436              		.loc 1 3413 8 is_stmt 0 view .LVU2760
 10437 0020 FFF7FEFF 		bl	intSubtract
 10438              	.LVL751:
3413:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10439              		.loc 1 3413 8 view .LVU2761
 10440 0024 0646     		mov	r6, r0
 10441 0026 0D46     		mov	r5, r1
 10442              	.LVL752:
 10443              	.L791:
3414:src/xeq.c     **** 
 10444              		.loc 1 3414 3 is_stmt 1 view .LVU2762
 10445              	.LBB2161:
 10446              	.LBB2162:
1426:src/xeq.c     **** }
 10447              		.loc 1 1426 8 is_stmt 0 view .LVU2763
 10448 0028 2046     		mov	r0, r4
 10449 002a CDE90A65 		strd	r6, r5, [sp, #40]
 10450              	.LVL753:
1426:src/xeq.c     **** }
 10451              		.loc 1 1426 8 view .LVU2764
 10452              	.LBE2162:
 10453              	.LBI2161:
1425:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10454              		.loc 1 1425 6 is_stmt 1 view .LVU2765
 10455              	.LBB2163:
1426:src/xeq.c     **** }
 10456              		.loc 1 1426 2 view .LVU2766
1426:src/xeq.c     **** }
 10457              		.loc 1 1426 8 is_stmt 0 view .LVU2767
 10458 002e FFF7FEFF 		bl	get_reg_n
 10459              	.LVL754:
1426:src/xeq.c     **** }
 10460              		.loc 1 1426 2 view .LVU2768
 10461 0032 0AA9     		add	r1, sp, #40
 10462 0034 0822     		movs	r2, #8
 10463 0036 FFF7FEFF 		bl	xcopy
 10464              	.LVL755:
1426:src/xeq.c     **** }
 10465              		.loc 1 1426 2 view .LVU2769
ARM GAS  /tmp/cccVhVyH.s 			page 330


 10466              	.LBE2163:
 10467              	.LBE2161:
3416:src/xeq.c     **** 		return xv != 0;
 10468              		.loc 1 3416 3 is_stmt 1 view .LVU2770
3416:src/xeq.c     **** 		return xv != 0;
 10469              		.loc 1 3416 8 is_stmt 0 view .LVU2771
 10470 003a 0AAA     		add	r2, sp, #40
 10471 003c 3046     		mov	r0, r6
 10472 003e 2946     		mov	r1, r5
 10473 0040 FFF7FEFF 		bl	extract_value
 10474              	.LVL756:
3417:src/xeq.c     **** 	} else {
 10475              		.loc 1 3417 3 is_stmt 1 view .LVU2772
3417:src/xeq.c     **** 	} else {
 10476              		.loc 1 3417 13 is_stmt 0 view .LVU2773
 10477 0044 50EA0103 		orrs	r3, r0, r1
 10478 0048 14BF     		ite	ne
 10479 004a 0120     		movne	r0, #1
 10480              	.LVL757:
3417:src/xeq.c     **** 	} else {
 10481              		.loc 1 3417 13 view .LVU2774
 10482 004c 0020     		moveq	r0, #0
 10483              	.LVL758:
3417:src/xeq.c     **** 	} else {
 10484              		.loc 1 3417 13 view .LVU2775
 10485              	.LBE2160:
 10486              	.LBE2159:
3430:src/xeq.c     **** 
 10487              		.loc 1 3430 1 view .LVU2776
 10488 004e 14B0     		add	sp, sp, #80
 10489              		.cfi_remember_state
 10490              		.cfi_def_cfa_offset 16
 10491              		@ sp needed
 10492 0050 70BD     		pop	{r4, r5, r6, pc}
 10493              	.LVL759:
 10494              	.L789:
 10495              		.cfi_restore_state
 10496              	.LBB2165:
3419:src/xeq.c     **** 
 10497              		.loc 1 3419 3 is_stmt 1 view .LVU2777
3421:src/xeq.c     **** 		if (inc)
 10498              		.loc 1 3421 3 view .LVU2778
 10499 0052 01A8     		add	r0, sp, #4
 10500              	.LVL760:
3421:src/xeq.c     **** 		if (inc)
 10501              		.loc 1 3421 3 is_stmt 0 view .LVU2779
 10502 0054 2146     		mov	r1, r4
 10503              	.LVL761:
3421:src/xeq.c     **** 		if (inc)
 10504              		.loc 1 3421 3 view .LVU2780
 10505 0056 FFF7FEFF 		bl	getRegister
 10506              	.LVL762:
3422:src/xeq.c     **** 			dn_inc(&x);
 10507              		.loc 1 3422 3 is_stmt 1 view .LVU2781
3423:src/xeq.c     **** 		else
 10508              		.loc 1 3423 4 is_stmt 0 view .LVU2782
 10509 005a 01A8     		add	r0, sp, #4
ARM GAS  /tmp/cccVhVyH.s 			page 331


3422:src/xeq.c     **** 			dn_inc(&x);
 10510              		.loc 1 3422 6 view .LVU2783
 10511 005c 8DB9     		cbnz	r5, .L797
3425:src/xeq.c     **** 		setRegister(arg, &x);
 10512              		.loc 1 3425 4 is_stmt 1 view .LVU2784
 10513 005e FFF7FEFF 		bl	dn_dec
 10514              	.LVL763:
 10515              	.L794:
3426:src/xeq.c     **** 		decNumberTrunc(&y, &x);
 10516              		.loc 1 3426 3 view .LVU2785
 10517 0062 2046     		mov	r0, r4
 10518 0064 01A9     		add	r1, sp, #4
 10519 0066 FFF7FEFF 		bl	setRegister
 10520              	.LVL764:
3427:src/xeq.c     **** 		return ! dn_eq0(&y);
 10521              		.loc 1 3427 3 view .LVU2786
 10522 006a 01A9     		add	r1, sp, #4
 10523 006c 0AA8     		add	r0, sp, #40
 10524 006e FFF7FEFF 		bl	decNumberTrunc
 10525              	.LVL765:
3428:src/xeq.c     **** 	}
 10526              		.loc 1 3428 3 view .LVU2787
3428:src/xeq.c     **** 	}
 10527              		.loc 1 3428 12 is_stmt 0 view .LVU2788
 10528 0072 0AA8     		add	r0, sp, #40
 10529 0074 FFF7FEFF 		bl	dn_eq0
 10530              	.LVL766:
3428:src/xeq.c     **** 	}
 10531              		.loc 1 3428 10 view .LVU2789
 10532 0078 B0FA80F0 		clz	r0, r0
 10533 007c 4009     		lsrs	r0, r0, #5
 10534              	.LBE2165:
3430:src/xeq.c     **** 
 10535              		.loc 1 3430 1 view .LVU2790
 10536 007e 14B0     		add	sp, sp, #80
 10537              		.cfi_remember_state
 10538              		.cfi_def_cfa_offset 16
 10539              		@ sp needed
 10540 0080 70BD     		pop	{r4, r5, r6, pc}
 10541              	.LVL767:
 10542              	.L797:
 10543              		.cfi_restore_state
 10544              	.LBB2166:
3423:src/xeq.c     **** 		else
 10545              		.loc 1 3423 4 is_stmt 1 view .LVU2791
 10546 0082 FFF7FEFF 		bl	dn_inc
 10547              	.LVL768:
 10548 0086 ECE7     		b	.L794
 10549              	.LVL769:
 10550              	.L796:
3423:src/xeq.c     **** 		else
 10551              		.loc 1 3423 4 is_stmt 0 view .LVU2792
 10552              	.LBE2166:
 10553              	.LBB2167:
 10554              	.LBB2164:
3411:src/xeq.c     **** 		else
 10555              		.loc 1 3411 4 is_stmt 1 view .LVU2793
ARM GAS  /tmp/cccVhVyH.s 			page 332


3411:src/xeq.c     **** 		else
 10556              		.loc 1 3411 8 is_stmt 0 view .LVU2794
 10557 0088 FFF7FEFF 		bl	intAdd
 10558              	.LVL770:
3411:src/xeq.c     **** 		else
 10559              		.loc 1 3411 8 view .LVU2795
 10560 008c 0646     		mov	r6, r0
 10561 008e 0D46     		mov	r5, r1
 10562              	.LVL771:
3411:src/xeq.c     **** 		else
 10563              		.loc 1 3411 8 view .LVU2796
 10564 0090 CAE7     		b	.L791
 10565              	.L799:
 10566 0092 00BF     		.align	2
 10567              	.L798:
 10568 0094 00000000 		.word	main_ram
 10569              	.LBE2164:
 10570              	.LBE2167:
 10571              		.cfi_endproc
 10572              	.LFE193:
 10574              		.section	.text.set_reg_n_int,"ax",%progbits
 10575              		.align	1
 10576              		.p2align 2,,3
 10577              		.global	set_reg_n_int
 10578              		.syntax unified
 10579              		.thumb
 10580              		.thumb_func
 10581              		.fpu fpv4-sp-d16
 10583              	set_reg_n_int:
 10584              	.LVL772:
 10585              	.LFB95:
1425:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10586              		.loc 1 1425 49 is_stmt 1 view -0
 10587              		.cfi_startproc
 10588              		@ args = 0, pretend = 0, frame = 8
 10589              		@ frame_needed = 0, uses_anonymous_args = 0
1426:src/xeq.c     **** }
 10590              		.loc 1 1426 2 view .LVU2798
1425:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10591              		.loc 1 1425 49 is_stmt 0 view .LVU2799
 10592 0000 00B5     		push	{lr}
 10593              		.cfi_def_cfa_offset 4
 10594              		.cfi_offset 14, -4
 10595 0002 83B0     		sub	sp, sp, #12
 10596              		.cfi_def_cfa_offset 16
1425:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10597              		.loc 1 1425 49 view .LVU2800
 10598 0004 CDE90023 		strd	r2, [sp]
1426:src/xeq.c     **** }
 10599              		.loc 1 1426 8 view .LVU2801
 10600 0008 FFF7FEFF 		bl	get_reg_n
 10601              	.LVL773:
1426:src/xeq.c     **** }
 10602              		.loc 1 1426 2 view .LVU2802
 10603 000c 0822     		movs	r2, #8
 10604 000e 6946     		mov	r1, sp
 10605 0010 FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/cccVhVyH.s 			page 333


 10606              	.LVL774:
1427:src/xeq.c     **** 
 10607              		.loc 1 1427 1 view .LVU2803
 10608 0014 03B0     		add	sp, sp, #12
 10609              		.cfi_def_cfa_offset 4
 10610              		@ sp needed
 10611 0016 5DF804FB 		ldr	pc, [sp], #4
 10612              		.cfi_endproc
 10613              	.LFE95:
 10615 001a 00BF     		.section	.text.get_reg_n_int_sgn,"ax",%progbits
 10616              		.align	1
 10617              		.p2align 2,,3
 10618              		.global	get_reg_n_int_sgn
 10619              		.syntax unified
 10620              		.thumb
 10621              		.thumb_func
 10622              		.fpu fpv4-sp-d16
 10624              	get_reg_n_int_sgn:
 10625              	.LVL775:
 10626              	.LFB96:
1431:src/xeq.c     **** 	if (is_intmode()) {
 10627              		.loc 1 1431 63 is_stmt 1 view -0
 10628              		.cfi_startproc
 10629              		@ args = 0, pretend = 0, frame = 40
 10630              		@ frame_needed = 0, uses_anonymous_args = 0
1432:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10631              		.loc 1 1432 2 view .LVU2805
1432:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10632              		.loc 1 1432 6 is_stmt 0 view .LVU2806
 10633 0000 0C4B     		ldr	r3, .L806
1431:src/xeq.c     **** 	if (is_intmode()) {
 10634              		.loc 1 1431 63 view .LVU2807
 10635 0002 10B5     		push	{r4, lr}
 10636              		.cfi_def_cfa_offset 8
 10637              		.cfi_offset 4, -8
 10638              		.cfi_offset 14, -4
1432:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10639              		.loc 1 1432 6 view .LVU2808
 10640 0004 1B68     		ldr	r3, [r3]
 10641 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1432:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10642              		.loc 1 1432 5 view .LVU2809
 10643 000a DB07     		lsls	r3, r3, #31
1431:src/xeq.c     **** 	if (is_intmode()) {
 10644              		.loc 1 1431 63 view .LVU2810
 10645 000c 8AB0     		sub	sp, sp, #40
 10646              		.cfi_def_cfa_offset 48
1431:src/xeq.c     **** 	if (is_intmode()) {
 10647              		.loc 1 1431 63 view .LVU2811
 10648 000e 0C46     		mov	r4, r1
1432:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10649              		.loc 1 1432 5 view .LVU2812
 10650 0010 06D5     		bpl	.L803
 10651              	.LVL776:
 10652              	.LBB2172:
 10653              	.LBI2172:
1431:src/xeq.c     **** 	if (is_intmode()) {
ARM GAS  /tmp/cccVhVyH.s 			page 334


 10654              		.loc 1 1431 24 is_stmt 1 view .LVU2813
 10655              	.LBB2173:
1433:src/xeq.c     **** 	} else {
 10656              		.loc 1 1433 3 view .LVU2814
1433:src/xeq.c     **** 	} else {
 10657              		.loc 1 1433 10 is_stmt 0 view .LVU2815
 10658 0012 FFF7FEFF 		bl	get_reg_n_int
 10659              	.LVL777:
1433:src/xeq.c     **** 	} else {
 10660              		.loc 1 1433 10 view .LVU2816
 10661 0016 2246     		mov	r2, r4
 10662 0018 FFF7FEFF 		bl	extract_value
 10663              	.LVL778:
1433:src/xeq.c     **** 	} else {
 10664              		.loc 1 1433 10 view .LVU2817
 10665              	.LBE2173:
 10666              	.LBE2172:
1440:src/xeq.c     **** 
 10667              		.loc 1 1440 1 view .LVU2818
 10668 001c 0AB0     		add	sp, sp, #40
 10669              		.cfi_remember_state
 10670              		.cfi_def_cfa_offset 8
 10671              		@ sp needed
 10672 001e 10BD     		pop	{r4, pc}
 10673              	.LVL779:
 10674              	.L803:
 10675              		.cfi_restore_state
1440:src/xeq.c     **** 
 10676              		.loc 1 1440 1 view .LVU2819
 10677 0020 0146     		mov	r1, r0
 10678              	.LVL780:
 10679              	.LBB2174:
1435:src/xeq.c     **** 
 10680              		.loc 1 1435 3 is_stmt 1 view .LVU2820
1437:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 10681              		.loc 1 1437 3 view .LVU2821
 10682 0022 01A8     		add	r0, sp, #4
 10683              	.LVL781:
1437:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 10684              		.loc 1 1437 3 is_stmt 0 view .LVU2822
 10685 0024 FFF7FEFF 		bl	getRegister
 10686              	.LVL782:
1438:src/xeq.c     **** 	}
 10687              		.loc 1 1438 3 is_stmt 1 view .LVU2823
1438:src/xeq.c     **** 	}
 10688              		.loc 1 1438 10 is_stmt 0 view .LVU2824
 10689 0028 2146     		mov	r1, r4
 10690 002a 01A8     		add	r0, sp, #4
 10691 002c FFF7FEFF 		bl	dn_to_ull
 10692              	.LVL783:
 10693              	.LBE2174:
1440:src/xeq.c     **** 
 10694              		.loc 1 1440 1 view .LVU2825
 10695 0030 0AB0     		add	sp, sp, #40
 10696              		.cfi_def_cfa_offset 8
 10697              		@ sp needed
 10698 0032 10BD     		pop	{r4, pc}
ARM GAS  /tmp/cccVhVyH.s 			page 335


 10699              	.LVL784:
 10700              	.L807:
1440:src/xeq.c     **** 
 10701              		.loc 1 1440 1 view .LVU2826
 10702              		.align	2
 10703              	.L806:
 10704 0034 00000000 		.word	main_ram
 10705              		.cfi_endproc
 10706              	.LFE96:
 10708              		.section	.text.get_keycode_from_reg,"ax",%progbits
 10709              		.align	1
 10710              		.p2align 2,,3
 10711              		.syntax unified
 10712              		.thumb
 10713              		.thumb_func
 10714              		.fpu fpv4-sp-d16
 10716              	get_keycode_from_reg:
 10717              	.LVL785:
 10718              	.LFB140:
2064:src/xeq.c     **** 	int sgn;
 10719              		.loc 1 2064 1 is_stmt 1 view -0
 10720              		.cfi_startproc
 10721              		@ args = 0, pretend = 0, frame = 8
 10722              		@ frame_needed = 0, uses_anonymous_args = 0
2065:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
 10723              		.loc 1 2065 2 view .LVU2828
2066:src/xeq.c     **** 	if ( c < 0 )
 10724              		.loc 1 2066 2 view .LVU2829
2064:src/xeq.c     **** 	int sgn;
 10725              		.loc 1 2064 1 is_stmt 0 view .LVU2830
 10726 0000 00B5     		push	{lr}
 10727              		.cfi_def_cfa_offset 4
 10728              		.cfi_offset 14, -4
 10729 0002 83B0     		sub	sp, sp, #12
 10730              		.cfi_def_cfa_offset 16
2066:src/xeq.c     **** 	if ( c < 0 )
 10731              		.loc 1 2066 44 view .LVU2831
 10732 0004 01A9     		add	r1, sp, #4
 10733 0006 FFF7FEFF 		bl	get_reg_n_int_sgn
 10734              	.LVL786:
2066:src/xeq.c     **** 	if ( c < 0 )
 10735              		.loc 1 2066 16 view .LVU2832
 10736 000a FFF7FEFF 		bl	row_column_to_keycode
 10737              	.LVL787:
2067:src/xeq.c     **** 		report_err(ERR_RANGE);
 10738              		.loc 1 2067 2 is_stmt 1 view .LVU2833
2067:src/xeq.c     **** 		report_err(ERR_RANGE);
 10739              		.loc 1 2067 5 is_stmt 0 view .LVU2834
 10740 000e 0028     		cmp	r0, #0
2067:src/xeq.c     **** 		report_err(ERR_RANGE);
 10741              		.loc 1 2067 5 view .LVU2835
 10742 0010 02DB     		blt	.L811
 10743              	.L808:
2070:src/xeq.c     **** 
 10744              		.loc 1 2070 1 view .LVU2836
 10745 0012 03B0     		add	sp, sp, #12
 10746              		.cfi_remember_state
ARM GAS  /tmp/cccVhVyH.s 			page 336


 10747              		.cfi_def_cfa_offset 4
 10748              		@ sp needed
 10749 0014 5DF804FB 		ldr	pc, [sp], #4
 10750              	.L811:
 10751              		.cfi_restore_state
 10752              	.LBB2181:
 10753              	.LBI2181:
2063:src/xeq.c     **** {
 10754              		.loc 1 2063 12 is_stmt 1 view .LVU2837
 10755              	.LVL788:
 10756              	.LBB2182:
2068:src/xeq.c     **** 	return c;
 10757              		.loc 1 2068 3 view .LVU2838
 10758              	.LBB2183:
 10759              	.LBI2183:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10760              		.loc 1 546 5 view .LVU2839
 10761              	.LBB2184:
 547:src/xeq.c     **** 		Error = e;
 10762              		.loc 1 547 2 view .LVU2840
 547:src/xeq.c     **** 		Error = e;
 10763              		.loc 1 547 12 is_stmt 0 view .LVU2841
 10764 0018 044B     		ldr	r3, .L812
 547:src/xeq.c     **** 		Error = e;
 10765              		.loc 1 547 5 view .LVU2842
 10766 001a 1A68     		ldr	r2, [r3]
 10767 001c 002A     		cmp	r2, #0
 10768 001e F8D1     		bne	.L808
 10769              	.LVL789:
 10770              	.LBB2185:
 10771              	.LBI2185:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10772              		.loc 1 546 5 is_stmt 1 view .LVU2843
 10773              	.LBB2186:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 10774              		.loc 1 548 3 view .LVU2844
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 10775              		.loc 1 548 9 is_stmt 0 view .LVU2845
 10776 0020 0822     		movs	r2, #8
 10777 0022 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 10778              		.loc 1 549 3 is_stmt 1 view .LVU2846
 10779              	.LVL790:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 10780              		.loc 1 549 3 is_stmt 0 view .LVU2847
 10781              	.LBE2186:
 10782              	.LBE2185:
 10783              	.LBE2184:
 10784              	.LBE2183:
 10785              	.LBE2182:
 10786              	.LBE2181:
2069:src/xeq.c     **** }
 10787              		.loc 1 2069 2 is_stmt 1 view .LVU2848
2070:src/xeq.c     **** 
 10788              		.loc 1 2070 1 is_stmt 0 view .LVU2849
 10789 0024 03B0     		add	sp, sp, #12
 10790              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cccVhVyH.s 			page 337


 10791              		@ sp needed
 10792 0026 5DF804FB 		ldr	pc, [sp], #4
 10793              	.L813:
 10794 002a 00BF     		.align	2
 10795              	.L812:
 10796 002c 00000000 		.word	Error
 10797              		.cfi_endproc
 10798              	.LFE140:
 10800              		.section	.text.getX_int,"ax",%progbits
 10801              		.align	1
 10802              		.p2align 2,,3
 10803              		.global	getX_int
 10804              		.syntax unified
 10805              		.thumb
 10806              		.thumb_func
 10807              		.fpu fpv4-sp-d16
 10809              	getX_int:
 10810              	.LFB97:
1445:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10811              		.loc 1 1445 30 is_stmt 1 view -0
 10812              		.cfi_startproc
 10813              		@ args = 0, pretend = 0, frame = 0
 10814              		@ frame_needed = 0, uses_anonymous_args = 0
 10815              		@ link register save eliminated.
1446:src/xeq.c     **** }
 10816              		.loc 1 1446 2 view .LVU2851
1446:src/xeq.c     **** }
 10817              		.loc 1 1446 9 is_stmt 0 view .LVU2852
 10818 0000 6420     		movs	r0, #100
 10819 0002 FFF7FEBF 		b	get_reg_n_int
 10820              	.LVL791:
 10821              		.cfi_endproc
 10822              	.LFE97:
 10824 0006 00BF     		.section	.text.getX_int_sgn,"ax",%progbits
 10825              		.align	1
 10826              		.p2align 2,,3
 10827              		.global	getX_int_sgn
 10828              		.syntax unified
 10829              		.thumb
 10830              		.thumb_func
 10831              		.fpu fpv4-sp-d16
 10833              	getX_int_sgn:
 10834              	.LVL792:
 10835              	.LFB98:
1449:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10836              		.loc 1 1449 47 is_stmt 1 view -0
 10837              		.cfi_startproc
 10838              		@ args = 0, pretend = 0, frame = 0
 10839              		@ frame_needed = 0, uses_anonymous_args = 0
 10840              		@ link register save eliminated.
1450:src/xeq.c     **** }
 10841              		.loc 1 1450 2 view .LVU2854
1449:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10842              		.loc 1 1449 47 is_stmt 0 view .LVU2855
 10843 0000 0146     		mov	r1, r0
1450:src/xeq.c     **** }
 10844              		.loc 1 1450 9 view .LVU2856
ARM GAS  /tmp/cccVhVyH.s 			page 338


 10845 0002 6420     		movs	r0, #100
 10846              	.LVL793:
1450:src/xeq.c     **** }
 10847              		.loc 1 1450 9 view .LVU2857
 10848 0004 FFF7FEBF 		b	get_reg_n_int_sgn
 10849              	.LVL794:
1450:src/xeq.c     **** }
 10850              		.loc 1 1450 9 view .LVU2858
 10851              		.cfi_endproc
 10852              	.LFE98:
 10854              		.section	.text.set_reg_n_int_sgn,"ax",%progbits
 10855              		.align	1
 10856              		.p2align 2,,3
 10857              		.global	set_reg_n_int_sgn
 10858              		.syntax unified
 10859              		.thumb
 10860              		.thumb_func
 10861              		.fpu fpv4-sp-d16
 10863              	set_reg_n_int_sgn:
 10864              	.LVL795:
 10865              	.LFB100:
1470:src/xeq.c     **** 	if (is_intmode()) {
 10866              		.loc 1 1470 72 is_stmt 1 view -0
 10867              		.cfi_startproc
 10868              		@ args = 4, pretend = 0, frame = 40
 10869              		@ frame_needed = 0, uses_anonymous_args = 0
1471:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10870              		.loc 1 1471 2 view .LVU2860
1471:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10871              		.loc 1 1471 6 is_stmt 0 view .LVU2861
 10872 0000 1749     		ldr	r1, .L826
1470:src/xeq.c     **** 	if (is_intmode()) {
 10873              		.loc 1 1470 72 view .LVU2862
 10874 0002 30B5     		push	{r4, r5, lr}
 10875              		.cfi_def_cfa_offset 12
 10876              		.cfi_offset 4, -12
 10877              		.cfi_offset 5, -8
 10878              		.cfi_offset 14, -4
1471:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10879              		.loc 1 1471 6 view .LVU2863
 10880 0004 0968     		ldr	r1, [r1]
 10881 0006 91F8E857 		ldrb	r5, [r1, #2024]	@ zero_extendqisi2
1471:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10882              		.loc 1 1471 5 view .LVU2864
 10883 000a E907     		lsls	r1, r5, #31
1470:src/xeq.c     **** 	if (is_intmode()) {
 10884              		.loc 1 1470 72 view .LVU2865
 10885 000c 8BB0     		sub	sp, sp, #44
 10886              		.cfi_def_cfa_offset 56
1470:src/xeq.c     **** 	if (is_intmode()) {
 10887              		.loc 1 1470 72 view .LVU2866
 10888 000e 0446     		mov	r4, r0
1471:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10889              		.loc 1 1471 5 view .LVU2867
 10890 0010 11D5     		bpl	.L817
 10891              	.LVL796:
1471:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
ARM GAS  /tmp/cccVhVyH.s 			page 339


 10892              		.loc 1 1471 5 view .LVU2868
 10893 0012 1046     		mov	r0, r2
 10894              	.LVL797:
1471:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10895              		.loc 1 1471 5 view .LVU2869
 10896 0014 1946     		mov	r1, r3
 10897              	.LVL798:
 10898              	.LBB2193:
 10899              	.LBI2193:
1470:src/xeq.c     **** 	if (is_intmode()) {
 10900              		.loc 1 1470 6 is_stmt 1 view .LVU2870
 10901              	.LBB2194:
1472:src/xeq.c     **** 	} else {
 10902              		.loc 1 1472 3 view .LVU2871
 10903 0016 0E9A     		ldr	r2, [sp, #56]
 10904              	.LVL799:
1472:src/xeq.c     **** 	} else {
 10905              		.loc 1 1472 3 is_stmt 0 view .LVU2872
 10906 0018 FFF7FEFF 		bl	build_value
 10907              	.LVL800:
1472:src/xeq.c     **** 	} else {
 10908              		.loc 1 1472 3 view .LVU2873
 10909 001c 0B46     		mov	r3, r1
 10910 001e 0246     		mov	r2, r0
 10911              	.LBB2195:
 10912              	.LBB2196:
1426:src/xeq.c     **** }
 10913              		.loc 1 1426 8 view .LVU2874
 10914 0020 2046     		mov	r0, r4
 10915 0022 CDE90023 		strd	r2, [sp]
 10916              	.LVL801:
1426:src/xeq.c     **** }
 10917              		.loc 1 1426 8 view .LVU2875
 10918              	.LBE2196:
 10919              	.LBI2195:
1425:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10920              		.loc 1 1425 6 is_stmt 1 view .LVU2876
 10921              	.LBB2197:
1426:src/xeq.c     **** }
 10922              		.loc 1 1426 2 view .LVU2877
1426:src/xeq.c     **** }
 10923              		.loc 1 1426 8 is_stmt 0 view .LVU2878
 10924 0026 FFF7FEFF 		bl	get_reg_n
 10925              	.LVL802:
1426:src/xeq.c     **** }
 10926              		.loc 1 1426 2 view .LVU2879
 10927 002a 0822     		movs	r2, #8
 10928 002c 6946     		mov	r1, sp
 10929 002e FFF7FEFF 		bl	xcopy
 10930              	.LVL803:
1426:src/xeq.c     **** }
 10931              		.loc 1 1426 2 view .LVU2880
 10932              	.LBE2197:
 10933              	.LBE2195:
 10934              	.LBE2194:
 10935              	.LBE2193:
1481:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 340


 10936              		.loc 1 1481 1 view .LVU2881
 10937 0032 0BB0     		add	sp, sp, #44
 10938              		.cfi_remember_state
 10939              		.cfi_def_cfa_offset 12
 10940              		@ sp needed
 10941 0034 30BD     		pop	{r4, r5, pc}
 10942              	.LVL804:
 10943              	.L817:
 10944              		.cfi_restore_state
 10945              	.LBB2198:
1474:src/xeq.c     **** 
 10946              		.loc 1 1474 3 is_stmt 1 view .LVU2882
1476:src/xeq.c     **** 		if (sgn)
 10947              		.loc 1 1476 3 view .LVU2883
 10948 0036 6846     		mov	r0, sp
 10949              	.LVL805:
1476:src/xeq.c     **** 		if (sgn)
 10950              		.loc 1 1476 3 is_stmt 0 view .LVU2884
 10951 0038 FFF7FEFF 		bl	ullint_to_dn
 10952              	.LVL806:
1477:src/xeq.c     **** 			dn_minus(&t, &t);
 10953              		.loc 1 1477 3 is_stmt 1 view .LVU2885
1477:src/xeq.c     **** 			dn_minus(&t, &t);
 10954              		.loc 1 1477 6 is_stmt 0 view .LVU2886
 10955 003c 0E9B     		ldr	r3, [sp, #56]
 10956 003e 2BB9     		cbnz	r3, .L824
1479:src/xeq.c     **** 	}
 10957              		.loc 1 1479 3 is_stmt 1 view .LVU2887
 10958 0040 6946     		mov	r1, sp
 10959 0042 2046     		mov	r0, r4
 10960 0044 FFF7FEFF 		bl	setRegister
 10961              	.LVL807:
 10962              	.L825:
1479:src/xeq.c     **** 	}
 10963              		.loc 1 1479 3 is_stmt 0 view .LVU2888
 10964              	.LBE2198:
1481:src/xeq.c     **** 
 10965              		.loc 1 1481 1 view .LVU2889
 10966 0048 0BB0     		add	sp, sp, #44
 10967              		.cfi_remember_state
 10968              		.cfi_def_cfa_offset 12
 10969              		@ sp needed
 10970 004a 30BD     		pop	{r4, r5, pc}
 10971              	.LVL808:
 10972              	.L824:
 10973              		.cfi_restore_state
 10974              	.LBB2199:
1478:src/xeq.c     **** 		setRegister(index, &t);
 10975              		.loc 1 1478 4 is_stmt 1 view .LVU2890
 10976 004c 6946     		mov	r1, sp
 10977 004e 6846     		mov	r0, sp
 10978 0050 FFF7FEFF 		bl	dn_minus
 10979              	.LVL809:
1479:src/xeq.c     **** 	}
 10980              		.loc 1 1479 3 view .LVU2891
 10981 0054 6946     		mov	r1, sp
 10982 0056 2046     		mov	r0, r4
ARM GAS  /tmp/cccVhVyH.s 			page 341


 10983 0058 FFF7FEFF 		bl	setRegister
 10984              	.LVL810:
 10985 005c F4E7     		b	.L825
 10986              	.L827:
 10987 005e 00BF     		.align	2
 10988              	.L826:
 10989 0060 00000000 		.word	main_ram
 10990              	.LBE2199:
 10991              		.cfi_endproc
 10992              	.LFE100:
 10994              		.section	.text.op_roundingmode,"ax",%progbits
 10995              		.align	1
 10996              		.p2align 2,,3
 10997              		.global	op_roundingmode
 10998              		.syntax unified
 10999              		.thumb
 11000              		.thumb_func
 11001              		.fpu fpv4-sp-d16
 11003              	op_roundingmode:
 11004              	.LVL811:
 11005              	.LFB34:
 619:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 11006              		.loc 1 619 37 view -0
 11007              		.cfi_startproc
 11008              		@ args = 0, pretend = 0, frame = 0
 11009              		@ frame_needed = 0, uses_anonymous_args = 0
 620:src/xeq.c     **** }
 11010              		.loc 1 620 2 view .LVU2893
 11011              	.LBB2200:
 11012              	.LBI2200:
1512:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11013              		.loc 1 1512 6 view .LVU2894
 11014              	.LBB2201:
1513:src/xeq.c     **** }
 11015              		.loc 1 1513 2 view .LVU2895
 11016              	.LBE2201:
 11017              	.LBE2200:
 619:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 11018              		.loc 1 619 37 is_stmt 0 view .LVU2896
 11019 0000 00B5     		push	{lr}
 11020              		.cfi_def_cfa_offset 4
 11021              		.cfi_offset 14, -4
 620:src/xeq.c     **** }
 11022              		.loc 1 620 21 view .LVU2897
 11023 0002 084B     		ldr	r3, .L830
 11024              	.LVL812:
 620:src/xeq.c     **** }
 11025              		.loc 1 620 21 view .LVU2898
 11026 0004 1B68     		ldr	r3, [r3]
 11027              	.LVL813:
 620:src/xeq.c     **** }
 11028              		.loc 1 620 21 view .LVU2899
 11029 0006 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 619:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 11030              		.loc 1 619 37 view .LVU2900
 11031 000a 83B0     		sub	sp, sp, #12
 11032              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cccVhVyH.s 			page 342


 11033              	.LBB2204:
 11034              	.LBB2202:
1513:src/xeq.c     **** }
 11035              		.loc 1 1513 2 view .LVU2901
 11036 000c 0021     		movs	r1, #0
 11037              	.LBE2202:
 11038              	.LBE2204:
 620:src/xeq.c     **** }
 11039              		.loc 1 620 21 view .LVU2902
 11040 000e C2F30212 		ubfx	r2, r2, #4, #3
 11041              	.LBB2205:
 11042              	.LBB2203:
1513:src/xeq.c     **** }
 11043              		.loc 1 1513 2 view .LVU2903
 11044 0012 D2B2     		uxtb	r2, r2
 11045 0014 0023     		movs	r3, #0
 11046              	.LVL814:
1513:src/xeq.c     **** }
 11047              		.loc 1 1513 2 view .LVU2904
 11048 0016 0091     		str	r1, [sp]
 11049              	.LVL815:
1513:src/xeq.c     **** }
 11050              		.loc 1 1513 2 view .LVU2905
 11051 0018 6420     		movs	r0, #100
 11052              	.LVL816:
1513:src/xeq.c     **** }
 11053              		.loc 1 1513 2 view .LVU2906
 11054 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 11055              	.LVL817:
1513:src/xeq.c     **** }
 11056              		.loc 1 1513 2 view .LVU2907
 11057              	.LBE2203:
 11058              	.LBE2205:
 621:src/xeq.c     **** 
 11059              		.loc 1 621 1 view .LVU2908
 11060 001e 03B0     		add	sp, sp, #12
 11061              		.cfi_def_cfa_offset 4
 11062              		@ sp needed
 11063 0020 5DF804FB 		ldr	pc, [sp], #4
 11064              	.L831:
 11065              		.align	2
 11066              	.L830:
 11067 0024 00000000 		.word	main_ram
 11068              		.cfi_endproc
 11069              	.LFE34:
 11071              		.section	.text.register_from_int,"ax",%progbits
 11072              		.align	1
 11073              		.p2align 2,,3
 11074              		.syntax unified
 11075              		.thumb
 11076              		.thumb_func
 11077              		.fpu fpv4-sp-d16
 11079              	register_from_int:
 11080              	.LVL818:
 11081              	.LFB101:
1488:src/xeq.c     **** 	int sgn;
 11082              		.loc 1 1488 69 is_stmt 1 view -0
ARM GAS  /tmp/cccVhVyH.s 			page 343


 11083              		.cfi_startproc
 11084              		@ args = 0, pretend = 0, frame = 8
 11085              		@ frame_needed = 0, uses_anonymous_args = 0
1489:src/xeq.c     **** 	unsigned long long int val;
 11086              		.loc 1 1489 2 view .LVU2910
1490:src/xeq.c     **** 	const int xin = XromFlags.xIN;
 11087              		.loc 1 1490 2 view .LVU2911
1491:src/xeq.c     **** 	
 11088              		.loc 1 1491 2 view .LVU2912
1488:src/xeq.c     **** 	int sgn;
 11089              		.loc 1 1488 69 is_stmt 0 view .LVU2913
 11090 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 11091              		.cfi_def_cfa_offset 28
 11092              		.cfi_offset 4, -28
 11093              		.cfi_offset 5, -24
 11094              		.cfi_offset 6, -20
 11095              		.cfi_offset 7, -16
 11096              		.cfi_offset 8, -12
 11097              		.cfi_offset 9, -8
 11098              		.cfi_offset 14, -4
1491:src/xeq.c     **** 	
 11099              		.loc 1 1491 27 view .LVU2914
 11100 0004 154C     		ldr	r4, .L838
 11101 0006 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
1488:src/xeq.c     **** 	int sgn;
 11102              		.loc 1 1488 69 view .LVU2915
 11103 0008 0546     		mov	r5, r0
 11104 000a 85B0     		sub	sp, sp, #20
 11105              		.cfi_def_cfa_offset 48
1488:src/xeq.c     **** 	int sgn;
 11106              		.loc 1 1488 69 view .LVU2916
 11107 000c 0846     		mov	r0, r1
 11108              	.LVL819:
1491:src/xeq.c     **** 	
 11109              		.loc 1 1491 27 view .LVU2917
 11110 000e DE09     		lsrs	r6, r3, #7
 11111              	.LVL820:
1493:src/xeq.c     **** 		XromFlags.xIN = 0;
 11112              		.loc 1 1493 2 is_stmt 1 view .LVU2918
1493:src/xeq.c     **** 		XromFlags.xIN = 0;
 11113              		.loc 1 1493 5 is_stmt 0 view .LVU2919
 11114 0010 12B1     		cbz	r2, .L833
1494:src/xeq.c     **** 	UState.intm = 1;
 11115              		.loc 1 1494 3 is_stmt 1 view .LVU2920
1494:src/xeq.c     **** 	UState.intm = 1;
 11116              		.loc 1 1494 17 is_stmt 0 view .LVU2921
 11117 0012 6FF3C713 		bfc	r3, #7, #1
 11118              	.LVL821:
1494:src/xeq.c     **** 	UState.intm = 1;
 11119              		.loc 1 1494 17 view .LVU2922
 11120 0016 6370     		strb	r3, [r4, #1]
 11121              	.LVL822:
 11122              	.L833:
1495:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11123              		.loc 1 1495 2 is_stmt 1 view .LVU2923
1495:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11124              		.loc 1 1495 14 is_stmt 0 view .LVU2924
ARM GAS  /tmp/cccVhVyH.s 			page 344


 11125 0018 114F     		ldr	r7, .L838+4
 11126 001a 3A68     		ldr	r2, [r7]
 11127              	.LVL823:
1495:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11128              		.loc 1 1495 14 view .LVU2925
 11129 001c 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
 11130 0020 43F00103 		orr	r3, r3, #1
 11131 0024 82F8E837 		strb	r3, [r2, #2024]
1496:src/xeq.c     **** 
 11132              		.loc 1 1496 2 is_stmt 1 view .LVU2926
1496:src/xeq.c     **** 
 11133              		.loc 1 1496 8 is_stmt 0 view .LVU2927
 11134 0028 03A9     		add	r1, sp, #12
 11135              	.LVL824:
1496:src/xeq.c     **** 
 11136              		.loc 1 1496 8 view .LVU2928
 11137 002a FFF7FEFF 		bl	get_reg_n_int_sgn
 11138              	.LVL825:
1498:src/xeq.c     **** 	UState.intm = 0;
 11139              		.loc 1 1498 16 view .LVU2929
 11140 002e 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
1499:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11141              		.loc 1 1499 14 view .LVU2930
 11142 0030 3B68     		ldr	r3, [r7]
1498:src/xeq.c     **** 	UState.intm = 0;
 11143              		.loc 1 1498 16 view .LVU2931
 11144 0032 66F3C712 		bfi	r2, r6, #7, #1
 11145 0036 6270     		strb	r2, [r4, #1]
1496:src/xeq.c     **** 
 11146              		.loc 1 1496 8 view .LVU2932
 11147 0038 8946     		mov	r9, r1
1499:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11148              		.loc 1 1499 14 view .LVU2933
 11149 003a 93F8E817 		ldrb	r1, [r3, #2024]	@ zero_extendqisi2
 11150 003e 6FF30001 		bfc	r1, #0, #1
 11151 0042 83F8E817 		strb	r1, [r3, #2024]
1500:src/xeq.c     **** }
 11152              		.loc 1 1500 2 view .LVU2934
 11153 0046 039B     		ldr	r3, [sp, #12]
 11154 0048 0093     		str	r3, [sp]
1496:src/xeq.c     **** 
 11155              		.loc 1 1496 8 view .LVU2935
 11156 004a 8046     		mov	r8, r0
 11157              	.LVL826:
1498:src/xeq.c     **** 	UState.intm = 0;
 11158              		.loc 1 1498 2 is_stmt 1 view .LVU2936
1499:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11159              		.loc 1 1499 2 view .LVU2937
1500:src/xeq.c     **** }
 11160              		.loc 1 1500 2 view .LVU2938
 11161 004c 4246     		mov	r2, r8
 11162 004e 4B46     		mov	r3, r9
 11163 0050 2846     		mov	r0, r5
 11164 0052 FFF7FEFF 		bl	set_reg_n_int_sgn
 11165              	.LVL827:
1501:src/xeq.c     **** 
 11166              		.loc 1 1501 1 is_stmt 0 view .LVU2939
ARM GAS  /tmp/cccVhVyH.s 			page 345


 11167 0056 05B0     		add	sp, sp, #20
 11168              		.cfi_def_cfa_offset 28
 11169              		@ sp needed
 11170 0058 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 11171              	.LVL828:
 11172              	.L839:
1501:src/xeq.c     **** 
 11173              		.loc 1 1501 1 view .LVU2940
 11174              		.align	2
 11175              	.L838:
 11176 005c 00000000 		.word	XromParams
 11177 0060 00000000 		.word	main_ram
 11178              		.cfi_endproc
 11179              	.LFE101:
 11181              		.section	.text.int_from_register,"ax",%progbits
 11182              		.align	1
 11183              		.p2align 2,,3
 11184              		.syntax unified
 11185              		.thumb
 11186              		.thumb_func
 11187              		.fpu fpv4-sp-d16
 11189              	int_from_register:
 11190              	.LVL829:
 11191              	.LFB99:
1457:src/xeq.c     **** 	int sgn;
 11192              		.loc 1 1457 48 is_stmt 1 view -0
 11193              		.cfi_startproc
 11194              		@ args = 0, pretend = 0, frame = 8
 11195              		@ frame_needed = 0, uses_anonymous_args = 0
1458:src/xeq.c     **** 	unsigned long long int val;
 11196              		.loc 1 1458 2 view .LVU2942
1459:src/xeq.c     **** 	
 11197              		.loc 1 1459 2 view .LVU2943
1461:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11198              		.loc 1 1461 2 view .LVU2944
1457:src/xeq.c     **** 	int sgn;
 11199              		.loc 1 1457 48 is_stmt 0 view .LVU2945
 11200 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 11201              		.cfi_def_cfa_offset 20
 11202              		.cfi_offset 4, -20
 11203              		.cfi_offset 5, -16
 11204              		.cfi_offset 6, -12
 11205              		.cfi_offset 7, -8
 11206              		.cfi_offset 14, -4
1461:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11207              		.loc 1 1461 14 view .LVU2946
 11208 0002 104D     		ldr	r5, .L842
 11209 0004 2B68     		ldr	r3, [r5]
 11210 0006 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1457:src/xeq.c     **** 	int sgn;
 11211              		.loc 1 1457 48 view .LVU2947
 11212 000a 85B0     		sub	sp, sp, #20
 11213              		.cfi_def_cfa_offset 40
1461:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11214              		.loc 1 1461 14 view .LVU2948
 11215 000c 6FF30002 		bfc	r2, #0, #1
1457:src/xeq.c     **** 	int sgn;
ARM GAS  /tmp/cccVhVyH.s 			page 346


 11216              		.loc 1 1457 48 view .LVU2949
 11217 0010 0446     		mov	r4, r0
1461:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11218              		.loc 1 1461 14 view .LVU2950
 11219 0012 83F8E827 		strb	r2, [r3, #2024]
1462:src/xeq.c     **** 
 11220              		.loc 1 1462 2 is_stmt 1 view .LVU2951
1462:src/xeq.c     **** 
 11221              		.loc 1 1462 8 is_stmt 0 view .LVU2952
 11222 0016 0846     		mov	r0, r1
 11223              	.LVL830:
1462:src/xeq.c     **** 
 11224              		.loc 1 1462 8 view .LVU2953
 11225 0018 03A9     		add	r1, sp, #12
 11226              	.LVL831:
1462:src/xeq.c     **** 
 11227              		.loc 1 1462 8 view .LVU2954
 11228 001a FFF7FEFF 		bl	get_reg_n_int_sgn
 11229              	.LVL832:
1462:src/xeq.c     **** 
 11230              		.loc 1 1462 8 view .LVU2955
 11231 001e 0F46     		mov	r7, r1
1464:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11232              		.loc 1 1464 14 view .LVU2956
 11233 0020 2968     		ldr	r1, [r5]
 11234 0022 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
 11235 0026 43F00103 		orr	r3, r3, #1
 11236 002a 81F8E837 		strb	r3, [r1, #2024]
1465:src/xeq.c     **** }
 11237              		.loc 1 1465 2 view .LVU2957
 11238 002e 039B     		ldr	r3, [sp, #12]
 11239 0030 0093     		str	r3, [sp]
1462:src/xeq.c     **** 
 11240              		.loc 1 1462 8 view .LVU2958
 11241 0032 0646     		mov	r6, r0
 11242              	.LVL833:
1464:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11243              		.loc 1 1464 2 is_stmt 1 view .LVU2959
1465:src/xeq.c     **** }
 11244              		.loc 1 1465 2 view .LVU2960
 11245 0034 3246     		mov	r2, r6
 11246 0036 2046     		mov	r0, r4
 11247 0038 3B46     		mov	r3, r7
 11248 003a FFF7FEFF 		bl	set_reg_n_int_sgn
 11249              	.LVL834:
1466:src/xeq.c     **** 
 11250              		.loc 1 1466 1 is_stmt 0 view .LVU2961
 11251 003e 05B0     		add	sp, sp, #20
 11252              		.cfi_def_cfa_offset 20
 11253              		@ sp needed
 11254 0040 F0BD     		pop	{r4, r5, r6, r7, pc}
 11255              	.LVL835:
 11256              	.L843:
1466:src/xeq.c     **** 
 11257              		.loc 1 1466 1 view .LVU2962
 11258 0042 00BF     		.align	2
 11259              	.L842:
ARM GAS  /tmp/cccVhVyH.s 			page 347


 11260 0044 00000000 		.word	main_ram
 11261              		.cfi_endproc
 11262              	.LFE99:
 11264              		.section	.text.switch_to_int,"ax",%progbits
 11265              		.align	1
 11266              		.p2align 2,,3
 11267              		.syntax unified
 11268              		.thumb
 11269              		.thumb_func
 11270              		.fpu fpv4-sp-d16
 11272              	switch_to_int:
 11273              	.LFB208:
3742:src/xeq.c     **** 	int i;
 11274              		.loc 1 3742 33 is_stmt 1 view -0
 11275              		.cfi_startproc
 11276              		@ args = 0, pretend = 0, frame = 40
 11277              		@ frame_needed = 0, uses_anonymous_args = 0
3743:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
 11278              		.loc 1 3743 2 view .LVU2964
3744:src/xeq.c     **** 	const int dbl = is_dblmode();
 11279              		.loc 1 3744 2 view .LVU2965
3742:src/xeq.c     **** 	int i;
 11280              		.loc 1 3742 33 is_stmt 0 view .LVU2966
 11281 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 11282              		.cfi_def_cfa_offset 24
 11283              		.cfi_offset 4, -24
 11284              		.cfi_offset 5, -20
 11285              		.cfi_offset 6, -16
 11286              		.cfi_offset 7, -12
 11287              		.cfi_offset 8, -8
 11288              		.cfi_offset 14, -4
3744:src/xeq.c     **** 	const int dbl = is_dblmode();
 11289              		.loc 1 3744 26 view .LVU2967
 11290 0004 DFF87480 		ldr	r8, .L852+4
3744:src/xeq.c     **** 	const int dbl = is_dblmode();
 11291              		.loc 1 3744 25 view .LVU2968
 11292 0008 1B49     		ldr	r1, .L852
3744:src/xeq.c     **** 	const int dbl = is_dblmode();
 11293              		.loc 1 3744 26 view .LVU2969
 11294 000a D8F80020 		ldr	r2, [r8]
3744:src/xeq.c     **** 	const int dbl = is_dblmode();
 11295              		.loc 1 3744 32 view .LVU2970
 11296 000e 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 11297              	.LBB2206:
 11298              	.LBB2207:
1122:src/xeq.c     **** }
 11299              		.loc 1 1122 24 view .LVU2971
 11300 0012 B2F8E827 		ldrh	r2, [r2, #2024]
 11301              	.LBE2207:
 11302              	.LBE2206:
3744:src/xeq.c     **** 	const int dbl = is_dblmode();
 11303              		.loc 1 3744 32 view .LVU2972
 11304 0016 C3F3C003 		ubfx	r3, r3, #3, #1
 11305              	.LBB2211:
 11306              	.LBB2208:
1122:src/xeq.c     **** }
 11307              		.loc 1 1122 24 view .LVU2973
ARM GAS  /tmp/cccVhVyH.s 			page 348


 11308 001a 44F20106 		movw	r6, #16385
 11309              	.LBE2208:
 11310              	.LBE2211:
3744:src/xeq.c     **** 	const int dbl = is_dblmode();
 11311              		.loc 1 3744 6 view .LVU2974
 11312 001e 31F81350 		ldrh	r5, [r1, r3, lsl #1]
 11313              	.LVL836:
3745:src/xeq.c     **** 
 11314              		.loc 1 3745 2 is_stmt 1 view .LVU2975
 11315              	.LBB2212:
 11316              	.LBI2206:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11317              		.loc 1 1121 5 view .LVU2976
 11318              	.LBB2209:
1122:src/xeq.c     **** }
 11319              		.loc 1 1122 2 view .LVU2977
 11320              	.LBE2209:
 11321              	.LBE2212:
3742:src/xeq.c     **** 	int i;
 11322              		.loc 1 3742 33 is_stmt 0 view .LVU2978
 11323 0022 8AB0     		sub	sp, sp, #40
 11324              		.cfi_def_cfa_offset 64
 11325              	.LBB2213:
 11326              	.LBB2210:
1122:src/xeq.c     **** }
 11327              		.loc 1 1122 24 view .LVU2979
 11328 0024 1640     		ands	r6, r6, r2
 11329              	.LVL837:
1122:src/xeq.c     **** }
 11330              		.loc 1 1122 24 view .LVU2980
 11331              	.LBE2210:
 11332              	.LBE2213:
3747:src/xeq.c     **** 		if (mask & 0x800) {
 11333              		.loc 1 3747 2 is_stmt 1 view .LVU2981
3747:src/xeq.c     **** 		if (mask & 0x800) {
 11334              		.loc 1 3747 21 view .LVU2982
3747:src/xeq.c     **** 		if (mask & 0x800) {
 11335              		.loc 1 3747 9 is_stmt 0 view .LVU2983
 11336 0026 6F24     		movs	r4, #111
 11337 0028 07E0     		b	.L847
 11338              	.LVL838:
 11339              	.L845:
3752:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 11340              		.loc 1 3752 11 view .LVU2984
 11341 002a B6F5804F 		cmp	r6, #16384
 11342 002e 12D0     		beq	.L850
 11343              	.L846:
3747:src/xeq.c     **** 		if (mask & 0x800) {
 11344              		.loc 1 3747 36 is_stmt 1 discriminator 2 view .LVU2985
 11345 0030 013C     		subs	r4, r4, #1
 11346              	.LVL839:
3747:src/xeq.c     **** 		if (mask & 0x800) {
 11347              		.loc 1 3747 2 is_stmt 0 discriminator 2 view .LVU2986
 11348 0032 632C     		cmp	r4, #99
3747:src/xeq.c     **** 		if (mask & 0x800) {
 11349              		.loc 1 3747 46 discriminator 2 view .LVU2987
 11350 0034 4FEA4505 		lsl	r5, r5, #1
ARM GAS  /tmp/cccVhVyH.s 			page 349


 11351              	.LVL840:
3747:src/xeq.c     **** 		if (mask & 0x800) {
 11352              		.loc 1 3747 21 is_stmt 1 discriminator 2 view .LVU2988
3747:src/xeq.c     **** 		if (mask & 0x800) {
 11353              		.loc 1 3747 2 is_stmt 0 discriminator 2 view .LVU2989
 11354 0038 0AD0     		beq	.L851
 11355              	.LVL841:
 11356              	.L847:
3748:src/xeq.c     **** 			// register belongs to stack
 11357              		.loc 1 3748 3 is_stmt 1 view .LVU2990
3752:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 11358              		.loc 1 3752 8 view .LVU2991
3748:src/xeq.c     **** 			// register belongs to stack
 11359              		.loc 1 3748 6 is_stmt 0 view .LVU2992
 11360 003a 2B05     		lsls	r3, r5, #20
 11361 003c F5D5     		bpl	.L845
3750:src/xeq.c     **** 		}
 11362              		.loc 1 3750 4 is_stmt 1 view .LVU2993
 11363 003e 2146     		mov	r1, r4
 11364 0040 2046     		mov	r0, r4
3747:src/xeq.c     **** 		if (mask & 0x800) {
 11365              		.loc 1 3747 36 is_stmt 0 view .LVU2994
 11366 0042 013C     		subs	r4, r4, #1
 11367              	.LVL842:
3750:src/xeq.c     **** 		}
 11368              		.loc 1 3750 4 view .LVU2995
 11369 0044 FFF7FEFF 		bl	int_from_register
 11370              	.LVL843:
3747:src/xeq.c     **** 		if (mask & 0x800) {
 11371              		.loc 1 3747 36 is_stmt 1 view .LVU2996
3747:src/xeq.c     **** 		if (mask & 0x800) {
 11372              		.loc 1 3747 2 is_stmt 0 view .LVU2997
 11373 0048 632C     		cmp	r4, #99
3747:src/xeq.c     **** 		if (mask & 0x800) {
 11374              		.loc 1 3747 46 view .LVU2998
 11375 004a 4FEA4505 		lsl	r5, r5, #1
 11376              	.LVL844:
3747:src/xeq.c     **** 		if (mask & 0x800) {
 11377              		.loc 1 3747 21 is_stmt 1 view .LVU2999
3747:src/xeq.c     **** 		if (mask & 0x800) {
 11378              		.loc 1 3747 2 is_stmt 0 view .LVU3000
 11379 004e F4D1     		bne	.L847
 11380              	.L851:
3757:src/xeq.c     **** 
 11381              		.loc 1 3757 1 view .LVU3001
 11382 0050 0AB0     		add	sp, sp, #40
 11383              		.cfi_remember_state
 11384              		.cfi_def_cfa_offset 24
 11385              		@ sp needed
 11386 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11387              	.LVL845:
 11388              	.L850:
 11389              		.cfi_restore_state
3754:src/xeq.c     **** 		}
 11390              		.loc 1 3754 4 is_stmt 1 view .LVU3002
3754:src/xeq.c     **** 		}
 11391              		.loc 1 3754 26 is_stmt 0 view .LVU3003
ARM GAS  /tmp/cccVhVyH.s 			page 350


 11392 0056 D8F80030 		ldr	r3, [r8]
3754:src/xeq.c     **** 		}
 11393              		.loc 1 3754 38 view .LVU3004
 11394 005a 2046     		mov	r0, r4
3754:src/xeq.c     **** 		}
 11395              		.loc 1 3754 26 view .LVU3005
 11396 005c 03F58663 		add	r3, r3, #1072
3754:src/xeq.c     **** 		}
 11397              		.loc 1 3754 4 view .LVU3006
 11398 0060 03EBC407 		add	r7, r3, r4, lsl #3
3754:src/xeq.c     **** 		}
 11399              		.loc 1 3754 38 view .LVU3007
 11400 0064 FFF7FEFF 		bl	get_reg_n
 11401              	.LVL846:
 11402              	.LBB2214:
 11403              	.LBI2214:
 648:src/xeq.c     **** 	decNumber temp;
 11404              		.loc 1 648 6 is_stmt 1 view .LVU3008
 11405              	.LBB2215:
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 11406              		.loc 1 649 2 view .LVU3009
 650:src/xeq.c     **** }
 11407              		.loc 1 650 2 view .LVU3010
 650:src/xeq.c     **** }
 11408              		.loc 1 650 24 is_stmt 0 view .LVU3011
 11409 0068 01A9     		add	r1, sp, #4
 11410 006a FFF7FEFF 		bl	decimal128ToNumber
 11411              	.LVL847:
 650:src/xeq.c     **** }
 11412              		.loc 1 650 24 view .LVU3012
 11413 006e 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 11414              		.loc 1 650 2 view .LVU3013
 11415 0070 3846     		mov	r0, r7
 11416 0072 FFF7FEFF 		bl	packed_from_number
 11417              	.LVL848:
 651:src/xeq.c     **** 
 11418              		.loc 1 651 1 view .LVU3014
 11419 0076 DBE7     		b	.L846
 11420              	.L853:
 11421              		.align	2
 11422              	.L852:
 11423 0078 00000000 		.word	.LANCHOR3
 11424 007c 00000000 		.word	main_ram
 11425              	.LBE2215:
 11426              	.LBE2214:
 11427              		.cfi_endproc
 11428              	.LFE208:
 11430              		.section	.text.process_cmdline.part.0,"ax",%progbits
 11431              		.align	1
 11432              		.p2align 2,,3
 11433              		.syntax unified
 11434              		.thumb
 11435              		.thumb_func
 11436              		.fpu fpv4-sp-d16
 11438              	process_cmdline.part.0:
 11439              	.LFB294:
ARM GAS  /tmp/cccVhVyH.s 			page 351


1229:src/xeq.c     **** 	decNumber a, b, x, t;
 11440              		.loc 1 1229 6 is_stmt 1 view -0
 11441              		.cfi_startproc
 11442              		@ args = 0, pretend = 0, frame = 168
 11443              		@ frame_needed = 0, uses_anonymous_args = 0
 11444              	.LBB2238:
1233:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
 11445              		.loc 1 1233 3 view .LVU3016
 11446              	.LBE2238:
1224:src/xeq.c     **** }
 11447              		.loc 1 1224 2 view .LVU3017
 11448              	.LVL849:
 11449              	.LBB2282:
1234:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11450              		.loc 1 1234 3 view .LVU3018
 11451              	.LBE2282:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 11452              		.loc 1 1229 6 is_stmt 0 view .LVU3019
 11453 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 11454              		.cfi_def_cfa_offset 32
 11455              		.cfi_offset 4, -32
 11456              		.cfi_offset 5, -28
 11457              		.cfi_offset 6, -24
 11458              		.cfi_offset 7, -20
 11459              		.cfi_offset 8, -16
 11460              		.cfi_offset 9, -12
 11461              		.cfi_offset 10, -8
 11462              		.cfi_offset 14, -4
 11463              	.LBB2283:
1234:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11464              		.loc 1 1234 35 view .LVU3020
 11465 0004 8D4C     		ldr	r4, .L893
1244:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11466              		.loc 1 1244 7 view .LVU3021
 11467 0006 DFF84482 		ldr	r8, .L893+16
1234:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11468              		.loc 1 1234 22 view .LVU3022
 11469 000a A57F     		ldrb	r5, [r4, #30]	@ zero_extendqisi2
 11470              	.LVL850:
1236:src/xeq.c     **** #else
 11471              		.loc 1 1236 3 is_stmt 1 view .LVU3023
1241:src/xeq.c     **** 
 11472              		.loc 1 1241 3 view .LVU3024
 11473              	.LBE2283:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 11474              		.loc 1 1229 6 is_stmt 0 view .LVU3025
 11475 000c ACB0     		sub	sp, sp, #176
 11476              		.cfi_def_cfa_offset 208
 11477              	.LBB2284:
1241:src/xeq.c     **** 
 11478              		.loc 1 1241 3 view .LVU3026
 11479 000e 04F12001 		add	r1, r4, #32
 11480 0012 1422     		movs	r2, #20
 11481 0014 02A8     		add	r0, sp, #8
 11482 0016 FFF7FEFF 		bl	xcopy
 11483              	.LVL851:
1243:src/xeq.c     **** 		if (!is_intmode()) {
ARM GAS  /tmp/cccVhVyH.s 			page 352


 11484              		.loc 1 1243 3 is_stmt 1 view .LVU3027
1244:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11485              		.loc 1 1244 7 is_stmt 0 view .LVU3028
 11486 001a D8F80020 		ldr	r2, [r8]
1243:src/xeq.c     **** 		if (!is_intmode()) {
 11487              		.loc 1 1243 11 view .LVU3029
 11488 001e 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
1244:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11489              		.loc 1 1244 7 view .LVU3030
 11490 0020 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1243:src/xeq.c     **** 		if (!is_intmode()) {
 11491              		.loc 1 1243 26 view .LVU3031
 11492 0024 2CA9     		add	r1, sp, #176
 11493 0026 1944     		add	r1, r1, r3
 11494 0028 0020     		movs	r0, #0
1244:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11495              		.loc 1 1244 6 view .LVU3032
 11496 002a 12F00102 		ands	r2, r2, #1
1243:src/xeq.c     **** 		if (!is_intmode()) {
 11497              		.loc 1 1243 26 view .LVU3033
 11498 002e 01F8A80C 		strb	r0, [r1, #-168]
1244:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11499              		.loc 1 1244 3 is_stmt 1 view .LVU3034
1244:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11500              		.loc 1 1244 6 is_stmt 0 view .LVU3035
 11501 0032 16D1     		bne	.L856
1246:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11502              		.loc 1 1246 4 is_stmt 1 view .LVU3036
1246:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11503              		.loc 1 1246 15 is_stmt 0 view .LVU3037
 11504 0034 2CA9     		add	r1, sp, #176
1246:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11505              		.loc 1 1246 29 view .LVU3038
 11506 0036 013B     		subs	r3, r3, #1
1246:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11507              		.loc 1 1246 15 view .LVU3039
 11508 0038 0B44     		add	r3, r3, r1
1246:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11509              		.loc 1 1246 40 view .LVU3040
 11510 003a 13F8A81C 		ldrb	r1, [r3, #-168]	@ zero_extendqisi2
1246:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11511              		.loc 1 1246 7 view .LVU3041
 11512 003e 4439     		subs	r1, r1, #68
 11513 0040 0129     		cmp	r1, #1
 11514 0042 40F28B80 		bls	.L884
1248:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11515              		.loc 1 1248 9 is_stmt 1 view .LVU3042
1248:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11516              		.loc 1 1248 21 is_stmt 0 view .LVU3043
 11517 0046 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1248:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11518              		.loc 1 1248 20 view .LVU3044
 11519 0048 2CAB     		add	r3, sp, #176
 11520 004a 1344     		add	r3, r3, r2
1248:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11521              		.loc 1 1248 12 view .LVU3045
 11522 004c 13F8A83C 		ldrb	r3, [r3, #-168]	@ zero_extendqisi2
ARM GAS  /tmp/cccVhVyH.s 			page 353


 11523 0050 442B     		cmp	r3, #68
 11524 0052 00F0D080 		beq	.L885
 11525              	.L858:
1259:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11526              		.loc 1 1259 4 is_stmt 1 view .LVU3046
1259:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11527              		.loc 1 1259 7 is_stmt 0 view .LVU3047
 11528 0056 002A     		cmp	r2, #0
 11529 0058 40F08680 		bne	.L859
 11530              	.L890:
1264:src/xeq.c     **** #endif
 11531              		.loc 1 1264 8 view .LVU3048
 11532 005c 012D     		cmp	r5, #1
 11533 005e 00F08380 		beq	.L859
 11534              	.L856:
1269:src/xeq.c     **** 		lift_if_enabled();
 11535              		.loc 1 1269 3 is_stmt 1 view .LVU3049
 11536              	.LBB2239:
 11537              	.LBB2240:
 11538              	.LBB2241:
 11539              	.LBB2242:
 744:src/xeq.c     **** }
 11540              		.loc 1 744 15 is_stmt 0 view .LVU3050
 11541 0062 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11542              	.LBE2242:
 11543              	.LBE2241:
 11544              	.LBE2240:
 11545              	.LBE2239:
1269:src/xeq.c     **** 		lift_if_enabled();
 11546              		.loc 1 1269 17 view .LVU3051
 11547 0064 0022     		movs	r2, #0
 11548              	.LBB2254:
 11549              	.LBB2249:
 748:src/xeq.c     **** 		lift();
 11550              		.loc 1 748 5 view .LVU3052
 11551 0066 5B06     		lsls	r3, r3, #25
 11552              	.LBE2249:
 11553              	.LBE2254:
1269:src/xeq.c     **** 		lift_if_enabled();
 11554              		.loc 1 1269 17 view .LVU3053
 11555 0068 2277     		strb	r2, [r4, #28]
1270:src/xeq.c     **** 		set_lift();
 11556              		.loc 1 1270 3 is_stmt 1 view .LVU3054
 11557              	.LBB2255:
 11558              	.LBI2239:
 747:src/xeq.c     **** 	if (get_lift())
 11559              		.loc 1 747 6 view .LVU3055
 11560              	.LBB2250:
 748:src/xeq.c     **** 		lift();
 11561              		.loc 1 748 2 view .LVU3056
 11562              	.LBB2246:
 11563              	.LBI2241:
 743:src/xeq.c     **** 	return State2.state_lift;
 11564              		.loc 1 743 12 view .LVU3057
 11565              	.LBB2243:
 744:src/xeq.c     **** }
 11566              		.loc 1 744 2 view .LVU3058
ARM GAS  /tmp/cccVhVyH.s 			page 354


 11567              	.LBE2243:
 11568              	.LBE2246:
 748:src/xeq.c     **** 		lift();
 11569              		.loc 1 748 5 is_stmt 0 view .LVU3059
 11570 006a 00F18B80 		bmi	.L886
 11571              	.L861:
 11572              	.LBE2250:
 11573              	.LBE2255:
1271:src/xeq.c     **** 		CmdLineDot = 0;
 11574              		.loc 1 1271 3 is_stmt 1 view .LVU3060
 11575              	.LBB2256:
 11576              	.LBI2256:
 767:src/xeq.c     ****     State2.state_lift = 1;
 11577              		.loc 1 767 6 view .LVU3061
 11578              	.LBB2257:
 768:src/xeq.c     **** }
 11579              		.loc 1 768 5 view .LVU3062
 768:src/xeq.c     **** }
 11580              		.loc 1 768 23 is_stmt 0 view .LVU3063
 11581 006e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11582              	.LBE2257:
 11583              	.LBE2256:
1274:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11584              		.loc 1 1274 7 view .LVU3064
 11585 0070 D8F80010 		ldr	r1, [r8]
 11586              	.LBB2259:
 11587              	.LBB2258:
 768:src/xeq.c     **** }
 11588              		.loc 1 768 23 view .LVU3065
 11589 0074 43F04003 		orr	r3, r3, #64
 11590 0078 E375     		strb	r3, [r4, #23]
 11591              	.LBE2258:
 11592              	.LBE2259:
1272:src/xeq.c     **** 		CmdLineEex = 0;
 11593              		.loc 1 1272 3 is_stmt 1 view .LVU3066
1274:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11594              		.loc 1 1274 7 is_stmt 0 view .LVU3067
 11595 007a 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
1272:src/xeq.c     **** 		CmdLineEex = 0;
 11596              		.loc 1 1272 14 view .LVU3068
 11597 007e 0022     		movs	r2, #0
1274:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11598              		.loc 1 1274 6 view .LVU3069
 11599 0080 13F00103 		ands	r3, r3, #1
1272:src/xeq.c     **** 		CmdLineEex = 0;
 11600              		.loc 1 1272 14 view .LVU3070
 11601 0084 A277     		strb	r2, [r4, #30]
1273:src/xeq.c     **** 		if (is_intmode()) {
 11602              		.loc 1 1273 3 is_stmt 1 view .LVU3071
1273:src/xeq.c     **** 		if (is_intmode()) {
 11603              		.loc 1 1273 14 is_stmt 0 view .LVU3072
 11604 0086 6277     		strb	r2, [r4, #29]
1274:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11605              		.loc 1 1274 3 is_stmt 1 view .LVU3073
1274:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11606              		.loc 1 1274 6 is_stmt 0 view .LVU3074
 11607 0088 7FD1     		bne	.L887
ARM GAS  /tmp/cccVhVyH.s 			page 355


1278:src/xeq.c     **** 			char *d0, *d1, *d2;
 11608              		.loc 1 1278 10 is_stmt 1 view .LVU3075
1278:src/xeq.c     **** 			char *d0, *d1, *d2;
 11609              		.loc 1 1278 13 is_stmt 0 view .LVU3076
 11610 008a 022D     		cmp	r5, #2
 11611 008c 4CD1     		bne	.L868
 11612              	.LBB2260:
1279:src/xeq.c     **** 			int neg;
 11613              		.loc 1 1279 4 is_stmt 1 view .LVU3077
1280:src/xeq.c     **** 
 11614              		.loc 1 1280 4 view .LVU3078
1282:src/xeq.c     **** 				return;
 11615              		.loc 1 1282 4 view .LVU3079
1285:src/xeq.c     **** #endif
 11616              		.loc 1 1285 4 view .LVU3080
1285:src/xeq.c     **** #endif
 11617              		.loc 1 1285 17 is_stmt 0 view .LVU3081
 11618 008e 91F8E627 		ldrb	r2, [r1, #2022]	@ zero_extendqisi2
 11619 0092 42F02002 		orr	r2, r2, #32
 11620 0096 81F8E627 		strb	r2, [r1, #2022]
1287:src/xeq.c     **** 				neg = 1;
 11621              		.loc 1 1287 4 is_stmt 1 view .LVU3082
1287:src/xeq.c     **** 				neg = 1;
 11622              		.loc 1 1287 7 is_stmt 0 view .LVU3083
 11623 009a 9DF80820 		ldrb	r2, [sp, #8]	@ zero_extendqisi2
 11624 009e 2D2A     		cmp	r2, #45
1292:src/xeq.c     **** 			}
 11625              		.loc 1 1292 8 view .LVU3084
 11626 00a0 14BF     		ite	ne
 11627 00a2 02AD     		addne	r5, sp, #8
 11628              	.LVL852:
1289:src/xeq.c     **** 			} else {
 11629              		.loc 1 1289 8 view .LVU3085
 11630 00a4 0DF10905 		addeq	r5, sp, #9
1294:src/xeq.c     **** 			*d1++ = '\0';
 11631              		.loc 1 1294 9 view .LVU3086
 11632 00a8 4FF02E01 		mov	r1, #46
 11633 00ac 2846     		mov	r0, r5
1291:src/xeq.c     **** 				d0 = cmdline;
 11634              		.loc 1 1291 9 view .LVU3087
 11635 00ae 14BF     		ite	ne
 11636 00b0 1C46     		movne	r4, r3
1288:src/xeq.c     **** 				d0 = cmdline+1;
 11637              		.loc 1 1288 9 view .LVU3088
 11638 00b2 0124     		moveq	r4, #1
 11639              	.LVL853:
1294:src/xeq.c     **** 			*d1++ = '\0';
 11640              		.loc 1 1294 4 is_stmt 1 view .LVU3089
1294:src/xeq.c     **** 			*d1++ = '\0';
 11641              		.loc 1 1294 9 is_stmt 0 view .LVU3090
 11642 00b4 FFF7FEFF 		bl	find_char
 11643              	.LVL854:
1295:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11644              		.loc 1 1295 4 is_stmt 1 view .LVU3091
1295:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11645              		.loc 1 1295 10 is_stmt 0 view .LVU3092
 11646 00b8 8146     		mov	r9, r0
ARM GAS  /tmp/cccVhVyH.s 			page 356


 11647 00ba 4FF0000A 		mov	r10, #0
1295:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11648              		.loc 1 1295 7 view .LVU3093
 11649 00be 461C     		adds	r6, r0, #1
 11650              	.LVL855:
1295:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11651              		.loc 1 1295 10 view .LVU3094
 11652 00c0 09F802AB 		strb	r10, [r9], #2
1296:src/xeq.c     **** 			*d2++ = '\0';
 11653              		.loc 1 1296 4 is_stmt 1 view .LVU3095
1296:src/xeq.c     **** 			*d2++ = '\0';
 11654              		.loc 1 1296 9 is_stmt 0 view .LVU3096
 11655 00c4 2E21     		movs	r1, #46
 11656 00c6 3046     		mov	r0, r6
 11657 00c8 FFF7FEFF 		bl	find_char
 11658              	.LVL856:
1297:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11659              		.loc 1 1297 4 is_stmt 1 view .LVU3097
1297:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11660              		.loc 1 1297 7 is_stmt 0 view .LVU3098
 11661 00cc 0746     		mov	r7, r0
 11662              	.LVL857:
1298:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11663              		.loc 1 1298 4 view .LVU3099
 11664 00ce 5C4A     		ldr	r2, .L893+4
1297:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11665              		.loc 1 1297 10 view .LVU3100
 11666 00d0 07F801AB 		strb	r10, [r7], #1
 11667              	.LVL858:
1298:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11668              		.loc 1 1298 4 is_stmt 1 view .LVU3101
 11669 00d4 11A8     		add	r0, sp, #68
 11670 00d6 3946     		mov	r1, r7
 11671 00d8 FFF7FEFF 		bl	decNumberFromString
 11672              	.LVL859:
1299:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11673              		.loc 1 1299 4 view .LVU3102
 11674 00dc 2946     		mov	r1, r5
 11675 00de 584A     		ldr	r2, .L893+4
 11676 00e0 1AA8     		add	r0, sp, #104
 11677 00e2 FFF7FEFF 		bl	decNumberFromString
 11678              	.LVL860:
1301:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11679              		.loc 1 1301 4 view .LVU3103
1301:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11680              		.loc 1 1301 7 is_stmt 0 view .LVU3104
 11681 00e6 4F45     		cmp	r7, r9
1302:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 11682              		.loc 1 1302 5 view .LVU3105
 11683 00e8 08AD     		add	r5, sp, #32
 11684              	.LVL861:
1301:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11685              		.loc 1 1301 7 view .LVU3106
 11686 00ea 00F09780 		beq	.L888
1311:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11687              		.loc 1 1311 5 is_stmt 1 view .LVU3107
 11688 00ee 544A     		ldr	r2, .L893+4
ARM GAS  /tmp/cccVhVyH.s 			page 357


 11689 00f0 3146     		mov	r1, r6
 11690 00f2 2846     		mov	r0, r5
 11691 00f4 FFF7FEFF 		bl	decNumberFromString
 11692              	.LVL862:
1313:src/xeq.c     **** #endif
 11693              		.loc 1 1313 5 view .LVU3108
1313:src/xeq.c     **** #endif
 11694              		.loc 1 1313 25 is_stmt 0 view .LVU3109
 11695 00f8 D8F80030 		ldr	r3, [r8]
 11696 00fc 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 11697 0100 6AF30412 		bfi	r2, r10, #4, #1
 11698 0104 83F8E627 		strb	r2, [r3, #2022]
 11699              	.L871:
1316:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
 11700              		.loc 1 1316 4 is_stmt 1 view .LVU3110
 11701 0108 11AA     		add	r2, sp, #68
 11702 010a 2946     		mov	r1, r5
 11703 010c 23A8     		add	r0, sp, #140
 11704 010e FFF7FEFF 		bl	dn_divide
 11705              	.LVL863:
1318:src/xeq.c     **** #endif
 11706              		.loc 1 1318 4 view .LVU3111
1318:src/xeq.c     **** #endif
 11707              		.loc 1 1318 7 is_stmt 0 view .LVU3112
 11708 0112 9DF89430 		ldrb	r3, [sp, #148]	@ zero_extendqisi2
 11709 0116 13F0700F 		tst	r3, #112
 11710 011a 64D0     		beq	.L889
1321:src/xeq.c     **** 				dn_minus(&x, &x);
 11711              		.loc 1 1321 4 is_stmt 1 view .LVU3113
1321:src/xeq.c     **** 				dn_minus(&x, &x);
 11712              		.loc 1 1321 7 is_stmt 0 view .LVU3114
 11713 011c 4CB1     		cbz	r4, .L883
 11714              	.L892:
1322:src/xeq.c     **** 			setX(&x);
 11715              		.loc 1 1322 5 is_stmt 1 view .LVU3115
 11716 011e 1AA9     		add	r1, sp, #104
 11717 0120 0846     		mov	r0, r1
 11718 0122 FFF7FEFF 		bl	dn_minus
 11719              	.LVL864:
1323:src/xeq.c     **** 		} else {
 11720              		.loc 1 1323 4 view .LVU3116
 11721              	.LBB2261:
 11722              	.LBI2261:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 11723              		.loc 1 828 6 view .LVU3117
 11724              	.LBB2262:
 829:src/xeq.c     **** }
 11725              		.loc 1 829 2 view .LVU3118
 11726 0126 04E0     		b	.L883
 11727              	.LVL865:
 11728              	.L868:
 829:src/xeq.c     **** }
 11729              		.loc 1 829 2 is_stmt 0 view .LVU3119
 11730              	.LBE2262:
 11731              	.LBE2261:
 11732              	.LBE2260:
1325:src/xeq.c     **** 			setX(&x);
ARM GAS  /tmp/cccVhVyH.s 			page 358


 11733              		.loc 1 1325 4 is_stmt 1 view .LVU3120
 11734 0128 454A     		ldr	r2, .L893+4
 11735 012a 02A9     		add	r1, sp, #8
 11736 012c 1AA8     		add	r0, sp, #104
 11737 012e FFF7FEFF 		bl	decNumberFromString
 11738              	.LVL866:
 11739              	.L883:
1326:src/xeq.c     **** 		}
 11740              		.loc 1 1326 4 view .LVU3121
 11741              	.LBB2263:
 11742              	.LBI2263:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 11743              		.loc 1 828 6 view .LVU3122
 11744              	.LBB2264:
 829:src/xeq.c     **** }
 11745              		.loc 1 829 2 view .LVU3123
 11746 0132 1AA9     		add	r1, sp, #104
 11747              	.LVL867:
 829:src/xeq.c     **** }
 11748              		.loc 1 829 2 is_stmt 0 view .LVU3124
 11749 0134 6420     		movs	r0, #100
 11750 0136 FFF7FEFF 		bl	setRegister
 11751              	.LVL868:
 11752              	.L867:
 829:src/xeq.c     **** }
 11753              		.loc 1 829 2 view .LVU3125
 11754              	.LBE2264:
 11755              	.LBE2263:
1328:src/xeq.c     **** #ifndef DM42
 11756              		.loc 1 1328 3 is_stmt 1 view .LVU3126
 11757              	.LBB2265:
 11758              	.LBI2265:
3915:src/xeq.c     **** 	if (!Running && !XromRunning)
 11759              		.loc 1 3915 6 view .LVU3127
 11760              	.LBB2266:
3916:src/xeq.c     **** 		State.entryp = 1;
 11761              		.loc 1 3916 2 view .LVU3128
 11762              	.LBB2267:
 11763              	.LBI2267:
3915:src/xeq.c     **** 	if (!Running && !XromRunning)
 11764              		.loc 1 3915 6 view .LVU3129
 11765              	.LBE2267:
3916:src/xeq.c     **** 		State.entryp = 1;
 11766              		.loc 1 3916 6 is_stmt 0 view .LVU3130
 11767 013a 424A     		ldr	r2, .L893+8
 11768              	.LBB2269:
 11769              	.LBB2268:
3916:src/xeq.c     **** 		State.entryp = 1;
 11770              		.loc 1 3916 18 view .LVU3131
 11771 013c 424B     		ldr	r3, .L893+12
3916:src/xeq.c     **** 		State.entryp = 1;
 11772              		.loc 1 3916 15 view .LVU3132
 11773 013e 1268     		ldr	r2, [r2]
 11774 0140 1B68     		ldr	r3, [r3]
 11775 0142 1343     		orrs	r3, r2, r3
 11776 0144 07D1     		bne	.L854
3917:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 359


 11777              		.loc 1 3917 3 is_stmt 1 view .LVU3133
3917:src/xeq.c     **** }
 11778              		.loc 1 3917 16 is_stmt 0 view .LVU3134
 11779 0146 D8F80020 		ldr	r2, [r8]
 11780 014a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 11781 014e 43F01003 		orr	r3, r3, #16
 11782 0152 82F8DD37 		strb	r3, [r2, #2013]
 11783              	.L854:
 11784              	.LBE2268:
 11785              	.LBE2269:
 11786              	.LBE2266:
 11787              	.LBE2265:
 11788              	.LBE2284:
1333:src/xeq.c     **** 
 11789              		.loc 1 1333 1 view .LVU3135
 11790 0156 2CB0     		add	sp, sp, #176
 11791              		.cfi_remember_state
 11792              		.cfi_def_cfa_offset 32
 11793              		@ sp needed
 11794 0158 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 11795              	.LVL869:
 11796              	.L884:
 11797              		.cfi_restore_state
 11798              	.LBB2285:
1247:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
 11799              		.loc 1 1247 5 is_stmt 1 view .LVU3136
1247:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
 11800              		.loc 1 1247 30 is_stmt 0 view .LVU3137
 11801 015c 03F8A82C 		strb	r2, [r3, #-168]
 11802 0160 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1259:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11803              		.loc 1 1259 4 is_stmt 1 view .LVU3138
1259:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11804              		.loc 1 1259 7 is_stmt 0 view .LVU3139
 11805 0162 002A     		cmp	r2, #0
 11806 0164 3FF47AAF 		beq	.L890
 11807              	.L859:
1267:src/xeq.c     **** 		}
 11808              		.loc 1 1267 5 is_stmt 1 view .LVU3140
1267:src/xeq.c     **** 		}
 11809              		.loc 1 1267 18 is_stmt 0 view .LVU3141
 11810 0168 D8F80030 		ldr	r3, [r8]
 11811 016c 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 11812 0170 6FF34512 		bfc	r2, #5, #1
 11813 0174 83F8E627 		strb	r2, [r3, #2022]
1269:src/xeq.c     **** 		lift_if_enabled();
 11814              		.loc 1 1269 3 is_stmt 1 view .LVU3142
 11815              	.LBB2270:
 11816              	.LBB2251:
 11817              	.LBB2247:
 11818              	.LBB2244:
 744:src/xeq.c     **** }
 11819              		.loc 1 744 15 is_stmt 0 view .LVU3143
 11820 0178 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11821              	.LBE2244:
 11822              	.LBE2247:
 11823              	.LBE2251:
ARM GAS  /tmp/cccVhVyH.s 			page 360


 11824              	.LBE2270:
1269:src/xeq.c     **** 		lift_if_enabled();
 11825              		.loc 1 1269 17 view .LVU3144
 11826 017a 0022     		movs	r2, #0
 11827              	.LBB2271:
 11828              	.LBB2252:
 748:src/xeq.c     **** 		lift();
 11829              		.loc 1 748 5 view .LVU3145
 11830 017c 5B06     		lsls	r3, r3, #25
 11831              	.LBE2252:
 11832              	.LBE2271:
1269:src/xeq.c     **** 		lift_if_enabled();
 11833              		.loc 1 1269 17 view .LVU3146
 11834 017e 2277     		strb	r2, [r4, #28]
1270:src/xeq.c     **** 		set_lift();
 11835              		.loc 1 1270 3 is_stmt 1 view .LVU3147
 11836              	.LBB2272:
 747:src/xeq.c     **** 	if (get_lift())
 11837              		.loc 1 747 6 view .LVU3148
 11838              	.LBB2253:
 748:src/xeq.c     **** 		lift();
 11839              		.loc 1 748 2 view .LVU3149
 11840              	.LBB2248:
 743:src/xeq.c     **** 	return State2.state_lift;
 11841              		.loc 1 743 12 view .LVU3150
 11842              	.LBB2245:
 744:src/xeq.c     **** }
 11843              		.loc 1 744 2 view .LVU3151
 11844              	.LBE2245:
 11845              	.LBE2248:
 748:src/xeq.c     **** 		lift();
 11846              		.loc 1 748 5 is_stmt 0 view .LVU3152
 11847 0180 7FF575AF 		bpl	.L861
 11848              	.L886:
 749:src/xeq.c     **** }
 11849              		.loc 1 749 3 is_stmt 1 view .LVU3153
 11850 0184 FFF7FEFF 		bl	lift
 11851              	.LVL870:
 11852 0188 71E7     		b	.L861
 11853              	.L887:
 11854              	.LBE2253:
 11855              	.LBE2272:
 11856              	.LBB2273:
1275:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11857              		.loc 1 1275 4 view .LVU3154
1275:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11858              		.loc 1 1275 41 is_stmt 0 view .LVU3155
 11859 018a 9DF80890 		ldrb	r9, [sp, #8]	@ zero_extendqisi2
 11860 018e A9F12D09 		sub	r9, r9, #45
 11861 0192 B9FA89F9 		clz	r9, r9
1276:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11862              		.loc 1 1276 31 view .LVU3156
 11863 0196 FFF7FEFF 		bl	int_base
 11864              	.LVL871:
1275:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11865              		.loc 1 1275 41 view .LVU3157
 11866 019a 4FEA5919 		lsr	r9, r9, #5
ARM GAS  /tmp/cccVhVyH.s 			page 361


 11867              	.LVL872:
1276:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11868              		.loc 1 1276 4 is_stmt 1 view .LVU3158
1276:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11869              		.loc 1 1276 31 is_stmt 0 view .LVU3159
 11870 019e 02AB     		add	r3, sp, #8
 11871 01a0 03EB0902 		add	r2, r3, r9
 11872              	.LVL873:
 11873              	.LBB2274:
 11874              	.LBI2274:
1160:src/xeq.c     **** 	unsigned long long int x = 0;
 11875              		.loc 1 1160 24 is_stmt 1 view .LVU3160
 11876              	.LBB2275:
1161:src/xeq.c     **** 
 11877              		.loc 1 1161 2 view .LVU3161
1161:src/xeq.c     **** 
 11878              		.loc 1 1161 25 is_stmt 0 view .LVU3162
 11879 01a4 0026     		movs	r6, #0
 11880 01a6 0027     		movs	r7, #0
 11881 01a8 02E0     		b	.L866
 11882              	.LVL874:
 11883              	.L891:
 11884              	.LBB2276:
1175:src/xeq.c     **** 	}
 11885              		.loc 1 1175 5 view .LVU3163
 11886 01aa E618     		adds	r6, r4, r3
 11887              	.LVL875:
1175:src/xeq.c     **** 	}
 11888              		.loc 1 1175 5 view .LVU3164
 11889 01ac 45F10007 		adc	r7, r5, #0
 11890              	.LVL876:
1175:src/xeq.c     **** 	}
 11891              		.loc 1 1175 5 view .LVU3165
 11892              	.LBE2276:
1163:src/xeq.c     **** 		unsigned int n;
 11893              		.loc 1 1163 8 is_stmt 1 view .LVU3166
 11894              	.L866:
1163:src/xeq.c     **** 		unsigned int n;
 11895              		.loc 1 1163 2 view .LVU3167
 11896              	.LBB2277:
1164:src/xeq.c     **** 		const char c = *s++;
 11897              		.loc 1 1164 3 view .LVU3168
1165:src/xeq.c     **** 
 11898              		.loc 1 1165 3 view .LVU3169
1168:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 11899              		.loc 1 1168 4 view .LVU3170
1169:src/xeq.c     **** 			n = c - 'A' + 10;
 11900              		.loc 1 1169 8 view .LVU3171
1170:src/xeq.c     **** 		else
 11901              		.loc 1 1170 4 view .LVU3172
1165:src/xeq.c     **** 
 11902              		.loc 1 1165 14 is_stmt 0 view .LVU3173
 11903 01b0 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 11904              	.LVL877:
1167:src/xeq.c     **** 			n = c - '0';
 11905              		.loc 1 1167 3 is_stmt 1 view .LVU3174
1167:src/xeq.c     **** 			n = c - '0';
ARM GAS  /tmp/cccVhVyH.s 			page 362


 11906              		.loc 1 1167 16 is_stmt 0 view .LVU3175
 11907 01b4 A1F13003 		sub	r3, r1, #48
1167:src/xeq.c     **** 			n = c - '0';
 11908              		.loc 1 1167 6 view .LVU3176
 11909 01b8 DCB2     		uxtb	r4, r3
 11910 01ba 092C     		cmp	r4, #9
1169:src/xeq.c     **** 			n = c - 'A' + 10;
 11911              		.loc 1 1169 11 view .LVU3177
 11912 01bc A1F14105 		sub	r5, r1, #65
1167:src/xeq.c     **** 			n = c - '0';
 11913              		.loc 1 1167 6 view .LVU3178
 11914 01c0 03D9     		bls	.L864
1169:src/xeq.c     **** 			n = c - 'A' + 10;
 11915              		.loc 1 1169 11 view .LVU3179
 11916 01c2 052D     		cmp	r5, #5
 11917 01c4 07D8     		bhi	.L865
1170:src/xeq.c     **** 		else
 11918              		.loc 1 1170 16 view .LVU3180
 11919 01c6 A1F13703 		sub	r3, r1, #55
 11920              	.LVL878:
 11921              	.L864:
1173:src/xeq.c     **** 			break;
 11922              		.loc 1 1173 3 is_stmt 1 view .LVU3181
1175:src/xeq.c     **** 	}
 11923              		.loc 1 1175 3 view .LVU3182
1175:src/xeq.c     **** 	}
 11924              		.loc 1 1175 9 is_stmt 0 view .LVU3183
 11925 01ca A0FB0645 		umull	r4, r5, r0, r6
1173:src/xeq.c     **** 			break;
 11926              		.loc 1 1173 6 view .LVU3184
 11927 01ce 9842     		cmp	r0, r3
1175:src/xeq.c     **** 	}
 11928              		.loc 1 1175 9 view .LVU3185
 11929 01d0 00FB0755 		mla	r5, r0, r7, r5
1173:src/xeq.c     **** 			break;
 11930              		.loc 1 1173 6 view .LVU3186
 11931 01d4 E9D8     		bhi	.L891
 11932              	.LVL879:
 11933              	.L865:
1173:src/xeq.c     **** 			break;
 11934              		.loc 1 1173 6 view .LVU3187
 11935              	.LBE2277:
1177:src/xeq.c     **** }
 11936              		.loc 1 1177 2 is_stmt 1 view .LVU3188
1177:src/xeq.c     **** }
 11937              		.loc 1 1177 2 is_stmt 0 view .LVU3189
 11938              	.LBE2275:
 11939              	.LBE2274:
1277:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
 11940              		.loc 1 1277 4 is_stmt 1 view .LVU3190
 11941              	.LBB2278:
 11942              	.LBI2278:
1512:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11943              		.loc 1 1512 6 view .LVU3191
 11944              	.LBB2279:
1513:src/xeq.c     **** }
 11945              		.loc 1 1513 2 view .LVU3192
ARM GAS  /tmp/cccVhVyH.s 			page 363


 11946 01d6 CDF80090 		str	r9, [sp]
 11947 01da 3246     		mov	r2, r6
 11948 01dc 3B46     		mov	r3, r7
 11949 01de 6420     		movs	r0, #100
 11950 01e0 FFF7FEFF 		bl	set_reg_n_int_sgn
 11951              	.LVL880:
1514:src/xeq.c     **** 
 11952              		.loc 1 1514 1 is_stmt 0 view .LVU3193
 11953 01e4 A9E7     		b	.L867
 11954              	.LVL881:
 11955              	.L889:
1514:src/xeq.c     **** 
 11956              		.loc 1 1514 1 view .LVU3194
 11957              	.LBE2279:
 11958              	.LBE2278:
 11959              	.LBE2273:
 11960              	.LBB2280:
1320:src/xeq.c     **** 			if (neg)
 11961              		.loc 1 1320 5 is_stmt 1 view .LVU3195
 11962 01e6 1AA9     		add	r1, sp, #104
 11963 01e8 23AA     		add	r2, sp, #140
 11964 01ea 0846     		mov	r0, r1
 11965 01ec FFF7FEFF 		bl	dn_add
 11966              	.LVL882:
1321:src/xeq.c     **** 				dn_minus(&x, &x);
 11967              		.loc 1 1321 4 view .LVU3196
1321:src/xeq.c     **** 				dn_minus(&x, &x);
 11968              		.loc 1 1321 7 is_stmt 0 view .LVU3197
 11969 01f0 002C     		cmp	r4, #0
 11970 01f2 9ED0     		beq	.L883
 11971 01f4 93E7     		b	.L892
 11972              	.LVL883:
 11973              	.L885:
1321:src/xeq.c     **** 				dn_minus(&x, &x);
 11974              		.loc 1 1321 7 view .LVU3198
 11975              	.LBE2280:
1249:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11976              		.loc 1 1249 5 is_stmt 1 view .LVU3199
 11977 01f6 02AB     		add	r3, sp, #8
1249:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11978              		.loc 1 1249 58 is_stmt 0 view .LVU3200
 11979 01f8 511C     		adds	r1, r2, #1
1249:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11980              		.loc 1 1249 32 view .LVU3201
 11981 01fa 901C     		adds	r0, r2, #2
1249:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11982              		.loc 1 1249 5 view .LVU3202
 11983 01fc 1944     		add	r1, r1, r3
 11984 01fe 1844     		add	r0, r0, r3
 11985 0200 C2F11202 		rsb	r2, r2, #18
 11986 0204 FFF7FEFF 		bl	xcopy
 11987              	.LVL884:
1250:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11988              		.loc 1 1250 5 is_stmt 1 view .LVU3203
1250:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11989              		.loc 1 1250 13 is_stmt 0 view .LVU3204
 11990 0208 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
ARM GAS  /tmp/cccVhVyH.s 			page 364


1250:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11991              		.loc 1 1250 25 view .LVU3205
 11992 020a 2CAB     		add	r3, sp, #176
 11993 020c 1344     		add	r3, r3, r2
 11994 020e 4520     		movs	r0, #69
1251:src/xeq.c     **** 			}
 11995              		.loc 1 1251 29 view .LVU3206
 11996 0210 2D21     		movs	r1, #45
1250:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11997              		.loc 1 1250 25 view .LVU3207
 11998 0212 03F8A80C 		strb	r0, [r3, #-168]
1251:src/xeq.c     **** 			}
 11999              		.loc 1 1251 5 is_stmt 1 view .LVU3208
1251:src/xeq.c     **** 			}
 12000              		.loc 1 1251 29 is_stmt 0 view .LVU3209
 12001 0216 03F8A71C 		strb	r1, [r3, #-167]
 12002 021a 1CE7     		b	.L858
 12003              	.LVL885:
 12004              	.L888:
 12005              	.LBB2281:
1302:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 12006              		.loc 1 1302 5 is_stmt 1 view .LVU3210
 12007 021c 1AA9     		add	r1, sp, #104
 12008 021e 2846     		mov	r0, r5
 12009 0220 FFF7FEFF 		bl	decNumberCopy
 12010              	.LVL886:
1303:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
 12011              		.loc 1 1303 5 view .LVU3211
 12012 0224 1AA8     		add	r0, sp, #104
 12013 0226 FFF7FEFF 		bl	decNumberZero
 12014              	.LVL887:
1305:src/xeq.c     **** #endif
 12015              		.loc 1 1305 5 view .LVU3212
1305:src/xeq.c     **** #endif
 12016              		.loc 1 1305 25 is_stmt 0 view .LVU3213
 12017 022a D8F80020 		ldr	r2, [r8]
 12018 022e 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 12019 0232 43F01003 		orr	r3, r3, #16
 12020 0236 82F8E637 		strb	r3, [r2, #2022]
 12021 023a 65E7     		b	.L871
 12022              	.L894:
 12023              		.align	2
 12024              	.L893:
 12025 023c 00000000 		.word	StateWhileOn
 12026 0240 00000000 		.word	Ctx
 12027 0244 00000000 		.word	Running
 12028 0248 00000000 		.word	XromRunning
 12029 024c 00000000 		.word	main_ram
 12030              	.LBE2281:
 12031              	.LBE2285:
 12032              		.cfi_endproc
 12033              	.LFE294:
 12035              		.section	.text.process_cmdline,"ax",%progbits
 12036              		.align	1
 12037              		.p2align 2,,3
 12038              		.global	process_cmdline
 12039              		.syntax unified
ARM GAS  /tmp/cccVhVyH.s 			page 365


 12040              		.thumb
 12041              		.thumb_func
 12042              		.fpu fpv4-sp-d16
 12044              	process_cmdline:
 12045              	.LFB88:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 12046              		.loc 1 1229 28 is_stmt 1 view -0
 12047              		.cfi_startproc
 12048              		@ args = 0, pretend = 0, frame = 0
 12049              		@ frame_needed = 0, uses_anonymous_args = 0
 12050              		@ link register save eliminated.
1230:src/xeq.c     **** 
 12051              		.loc 1 1230 2 view .LVU3215
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12052              		.loc 1 1232 2 view .LVU3216
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12053              		.loc 1 1232 6 is_stmt 0 view .LVU3217
 12054 0000 024B     		ldr	r3, .L898
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12055              		.loc 1 1232 5 view .LVU3218
 12056 0002 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 12057 0004 03B9     		cbnz	r3, .L897
1333:src/xeq.c     **** 
 12058              		.loc 1 1333 1 view .LVU3219
 12059 0006 7047     		bx	lr
 12060              	.L897:
 12061 0008 FFF7FEBF 		b	process_cmdline.part.0
 12062              	.LVL888:
 12063              	.L899:
 12064              		.align	2
 12065              	.L898:
 12066 000c 00000000 		.word	StateWhileOn
 12067              		.cfi_endproc
 12068              	.LFE88:
 12070              		.section	.text.cpx_pi,"ax",%progbits
 12071              		.align	1
 12072              		.p2align 2,,3
 12073              		.global	cpx_pi
 12074              		.syntax unified
 12075              		.thumb
 12076              		.thumb_func
 12077              		.fpu fpv4-sp-d16
 12079              	cpx_pi:
 12080              	.LVL889:
 12081              	.LFB76:
 973:src/xeq.c     **** 	switch (op) {
 12082              		.loc 1 973 29 is_stmt 1 view -0
 12083              		.cfi_startproc
 12084              		@ args = 0, pretend = 0, frame = 40
 12085              		@ frame_needed = 0, uses_anonymous_args = 0
 974:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12086              		.loc 1 974 2 view .LVU3221
 973:src/xeq.c     **** 	switch (op) {
 12087              		.loc 1 973 29 is_stmt 0 view .LVU3222
 12088 0000 70B5     		push	{r4, r5, r6, lr}
 12089              		.cfi_def_cfa_offset 16
 12090              		.cfi_offset 4, -16
ARM GAS  /tmp/cccVhVyH.s 			page 366


 12091              		.cfi_offset 5, -12
 12092              		.cfi_offset 6, -8
 12093              		.cfi_offset 14, -4
 974:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12094              		.loc 1 974 2 view .LVU3223
 12095 0002 D028     		cmp	r0, #208
 973:src/xeq.c     **** 	switch (op) {
 12096              		.loc 1 973 29 view .LVU3224
 12097 0004 8AB0     		sub	sp, sp, #40
 12098              		.cfi_def_cfa_offset 56
 974:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12099              		.loc 1 974 2 view .LVU3225
 12100 0006 26D0     		beq	.L901
 12101 0008 D128     		cmp	r0, #209
 12102 000a 1AD1     		bne	.L912
 983:src/xeq.c     **** 		process_cmdline();
 12103              		.loc 1 983 3 is_stmt 1 view .LVU3226
 983:src/xeq.c     **** 		process_cmdline();
 12104              		.loc 1 983 21 is_stmt 0 view .LVU3227
 12105 000c 2C4D     		ldr	r5, .L914
 12106 000e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12107              	.LBB2286:
 12108              	.LBB2287:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12109              		.loc 1 1232 5 view .LVU3228
 12110 0010 2A7F     		ldrb	r2, [r5, #28]	@ zero_extendqisi2
 12111              	.LBE2287:
 12112              	.LBE2286:
 983:src/xeq.c     **** 		process_cmdline();
 12113              		.loc 1 983 21 view .LVU3229
 12114 0012 6FF38613 		bfc	r3, #6, #1
 12115 0016 EB75     		strb	r3, [r5, #23]
 984:src/xeq.c     **** 		State2.state_lift = 0;
 12116              		.loc 1 984 3 is_stmt 1 view .LVU3230
 12117              	.LBB2290:
 12118              	.LBI2286:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 12119              		.loc 1 1229 6 view .LVU3231
 12120              	.LBB2288:
1230:src/xeq.c     **** 
 12121              		.loc 1 1230 2 view .LVU3232
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12122              		.loc 1 1232 2 view .LVU3233
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12123              		.loc 1 1232 5 is_stmt 0 view .LVU3234
 12124 0018 002A     		cmp	r2, #0
 12125 001a 4ED1     		bne	.L913
 12126              	.LVL890:
 12127              	.L906:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12128              		.loc 1 1232 5 view .LVU3235
 12129              	.LBE2288:
 12130              	.LBE2290:
 985:src/xeq.c     **** 		{
 12131              		.loc 1 985 3 is_stmt 1 view .LVU3236
 985:src/xeq.c     **** 		{
 12132              		.loc 1 985 21 is_stmt 0 view .LVU3237
ARM GAS  /tmp/cccVhVyH.s 			page 367


 12133 001c EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12134 001e 294C     		ldr	r4, .L914+4
 12135 0020 6FF38613 		bfc	r3, #6, #1
 12136 0024 EB75     		strb	r3, [r5, #23]
 12137              	.LBB2291:
 987:src/xeq.c     **** 			getX(&r);
 12138              		.loc 1 987 4 is_stmt 1 view .LVU3238
 988:src/xeq.c     **** 			dn_multiply (&r, &const_PI, &r);
 12139              		.loc 1 988 4 view .LVU3239
 12140              	.LVL891:
 12141              	.LBB2292:
 12142              	.LBI2292:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 12143              		.loc 1 824 12 view .LVU3240
 12144              	.LBB2293:
 825:src/xeq.c     **** }
 12145              		.loc 1 825 2 view .LVU3241
 825:src/xeq.c     **** }
 12146              		.loc 1 825 9 is_stmt 0 view .LVU3242
 12147 0026 01A8     		add	r0, sp, #4
 12148              	.LVL892:
 825:src/xeq.c     **** }
 12149              		.loc 1 825 9 view .LVU3243
 12150 0028 6421     		movs	r1, #100
 12151 002a FFF7FEFF 		bl	getRegister
 12152              	.LVL893:
 825:src/xeq.c     **** }
 12153              		.loc 1 825 9 view .LVU3244
 12154              	.LBE2293:
 12155              	.LBE2292:
 989:src/xeq.c     **** 			setX(&r);
 12156              		.loc 1 989 4 is_stmt 1 view .LVU3245
 12157 002e 01AA     		add	r2, sp, #4
 12158 0030 2549     		ldr	r1, .L914+8
 12159 0032 1046     		mov	r0, r2
 12160 0034 FFF7FEFF 		bl	dn_multiply
 12161              	.LVL894:
 990:src/xeq.c     **** 		}
 12162              		.loc 1 990 4 view .LVU3246
 12163              	.LBB2294:
 12164              	.LBI2294:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 12165              		.loc 1 828 6 view .LVU3247
 12166              	.LBB2295:
 829:src/xeq.c     **** }
 12167              		.loc 1 829 2 view .LVU3248
 12168 0038 01A9     		add	r1, sp, #4
 12169              	.LVL895:
 829:src/xeq.c     **** }
 12170              		.loc 1 829 2 is_stmt 0 view .LVU3249
 12171 003a 6420     		movs	r0, #100
 12172 003c FFF7FEFF 		bl	setRegister
 12173              	.LVL896:
 829:src/xeq.c     **** }
 12174              		.loc 1 829 2 view .LVU3250
 12175 0040 00E0     		b	.L903
 12176              	.LVL897:
ARM GAS  /tmp/cccVhVyH.s 			page 368


 12177              	.L912:
 829:src/xeq.c     **** }
 12178              		.loc 1 829 2 view .LVU3251
 12179 0042 204C     		ldr	r4, .L914+4
 12180              	.LVL898:
 12181              	.L903:
 829:src/xeq.c     **** }
 12182              		.loc 1 829 2 view .LVU3252
 12183              	.LBE2295:
 12184              	.LBE2294:
 12185              	.LBE2291:
 992:src/xeq.c     **** 	}
 12186              		.loc 1 992 10 is_stmt 1 view .LVU3253
 994:src/xeq.c     **** }
 12187              		.loc 1 994 2 view .LVU3254
 12188 0044 2268     		ldr	r2, [r4]
 12189 0046 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 12190 004a 43F01003 		orr	r3, r3, #16
 12191 004e 82F8DE37 		strb	r3, [r2, #2014]
 995:src/xeq.c     **** 
 12192              		.loc 1 995 1 is_stmt 0 view .LVU3255
 12193 0052 0AB0     		add	sp, sp, #40
 12194              		.cfi_remember_state
 12195              		.cfi_def_cfa_offset 16
 12196              		@ sp needed
 12197 0054 70BD     		pop	{r4, r5, r6, pc}
 12198              	.LVL899:
 12199              	.L901:
 12200              		.cfi_restore_state
 976:src/xeq.c     **** 			stack_begin( 1 );
 12201              		.loc 1 976 3 is_stmt 1 view .LVU3256
 976:src/xeq.c     **** 			stack_begin( 1 );
 12202              		.loc 1 976 8 is_stmt 0 view .LVU3257
 12203 0056 1B4C     		ldr	r4, .L914+4
 12204 0058 2368     		ldr	r3, [r4]
 976:src/xeq.c     **** 			stack_begin( 1 );
 12205              		.loc 1 976 7 view .LVU3258
 12206 005a 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 976:src/xeq.c     **** 			stack_begin( 1 );
 12207              		.loc 1 976 6 view .LVU3259
 12208 005e 1107     		lsls	r1, r2, #28
 12209 0060 0DD4     		bmi	.L904
 976:src/xeq.c     **** 			stack_begin( 1 );
 12210              		.loc 1 976 21 discriminator 1 view .LVU3260
 12211 0062 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 976:src/xeq.c     **** 			stack_begin( 1 );
 12212              		.loc 1 976 18 discriminator 1 view .LVU3261
 12213 0066 1207     		lsls	r2, r2, #28
 12214 0068 09D4     		bmi	.L904
 977:src/xeq.c     **** 			SET_REAL;
 12215              		.loc 1 977 4 is_stmt 1 view .LVU3262
 12216 006a 0120     		movs	r0, #1
 12217              	.LVL900:
 977:src/xeq.c     **** 			SET_REAL;
 12218              		.loc 1 977 4 is_stmt 0 view .LVU3263
 12219 006c FFF7FEFF 		bl	stack_begin
 12220              	.LVL901:
ARM GAS  /tmp/cccVhVyH.s 			page 369


 978:src/xeq.c     **** 		}
 12221              		.loc 1 978 4 is_stmt 1 view .LVU3264
 12222 0070 2368     		ldr	r3, [r4]
 12223 0072 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 12224 0076 42F00802 		orr	r2, r2, #8
 12225 007a 83F8E427 		strb	r2, [r3, #2020]
 12226              	.L904:
 980:src/xeq.c     **** 		break;
 12227              		.loc 1 980 3 view .LVU3265
 12228              	.LBB2296:
 12229              	.LBB2297:
1122:src/xeq.c     **** }
 12230              		.loc 1 1122 24 is_stmt 0 view .LVU3266
 12231 007e B3F8E817 		ldrh	r1, [r3, #2024]
 12232              	.LBE2297:
 12233              	.LBE2296:
 980:src/xeq.c     **** 		break;
 12234              		.loc 1 980 3 view .LVU3267
 12235 0082 124B     		ldr	r3, .L914+12
 12236              	.LBB2300:
 12237              	.LBB2298:
1122:src/xeq.c     **** }
 12238              		.loc 1 1122 24 view .LVU3268
 12239 0084 44F20105 		movw	r5, #16385
 12240 0088 2940     		ands	r1, r1, r5
 12241              	.LBE2298:
 12242              	.LBE2300:
 980:src/xeq.c     **** 		break;
 12243              		.loc 1 980 22 view .LVU3269
 12244 008a A1F58041 		sub	r1, r1, #16384
 12245 008e B1FA81F1 		clz	r1, r1
 12246 0092 4909     		lsrs	r1, r1, #5
 12247 0094 6620     		movs	r0, #102
 980:src/xeq.c     **** 		break;
 12248              		.loc 1 980 3 view .LVU3270
 12249 0096 1E68     		ldr	r6, [r3]
 12250              	.LBB2301:
 12251              	.LBI2296:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12252              		.loc 1 1121 5 is_stmt 1 view .LVU3271
 12253              	.LBB2299:
1122:src/xeq.c     **** }
 12254              		.loc 1 1122 2 view .LVU3272
 12255              	.LBE2299:
 12256              	.LBE2301:
 980:src/xeq.c     **** 		break;
 12257              		.loc 1 980 22 is_stmt 0 view .LVU3273
 12258 0098 FFF7FEFF 		bl	get_const
 12259              	.LVL902:
 12260              	.LBB2302:
 12261              	.LBB2303:
 12262              	.LBB2304:
 12263              	.LBB2305:
1122:src/xeq.c     **** }
 12264              		.loc 1 1122 24 view .LVU3274
 12265 009c 2368     		ldr	r3, [r4]
 12266 009e B3F8E837 		ldrh	r3, [r3, #2024]
ARM GAS  /tmp/cccVhVyH.s 			page 370


 12267              	.LBE2305:
 12268              	.LBE2304:
 727:src/xeq.c     **** }
 12269              		.loc 1 727 2 view .LVU3275
 12270 00a2 1D40     		ands	r5, r5, r3
 12271 00a4 B5F5804F 		cmp	r5, #16384
 12272              	.LBE2303:
 12273              	.LBE2302:
 980:src/xeq.c     **** 		break;
 12274              		.loc 1 980 22 view .LVU3276
 12275 00a8 0146     		mov	r1, r0
 12276              	.LVL903:
 12277              	.LBB2309:
 12278              	.LBI2302:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12279              		.loc 1 726 6 is_stmt 1 view .LVU3277
 12280              	.LBB2308:
 727:src/xeq.c     **** }
 12281              		.loc 1 727 2 view .LVU3278
 12282              	.LBB2307:
 12283              	.LBI2304:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12284              		.loc 1 1121 5 view .LVU3279
 12285              	.LBB2306:
1122:src/xeq.c     **** }
 12286              		.loc 1 1122 2 view .LVU3280
 12287              	.LBE2306:
 12288              	.LBE2307:
 727:src/xeq.c     **** }
 12289              		.loc 1 727 2 is_stmt 0 view .LVU3281
 12290 00aa 08BF     		it	eq
 12291 00ac 1022     		moveq	r2, #16
 12292 00ae 3046     		mov	r0, r6
 12293              	.LVL904:
 727:src/xeq.c     **** }
 12294              		.loc 1 727 2 view .LVU3282
 12295 00b0 18BF     		it	ne
 12296 00b2 0822     		movne	r2, #8
 12297 00b4 FFF7FEFF 		bl	xcopy
 12298              	.LVL905:
 728:src/xeq.c     **** 
 12299              		.loc 1 728 1 view .LVU3283
 12300 00b8 C4E7     		b	.L903
 12301              	.LVL906:
 12302              	.L913:
 728:src/xeq.c     **** 
 12303              		.loc 1 728 1 view .LVU3284
 12304              	.LBE2308:
 12305              	.LBE2309:
 12306              	.LBB2310:
 12307              	.LBB2289:
 12308 00ba FFF7FEFF 		bl	process_cmdline.part.0
 12309              	.LVL907:
 728:src/xeq.c     **** 
 12310              		.loc 1 728 1 view .LVU3285
 12311 00be ADE7     		b	.L906
 12312              	.L915:
ARM GAS  /tmp/cccVhVyH.s 			page 371


 12313              		.align	2
 12314              	.L914:
 12315 00c0 00000000 		.word	StateWhileOn
 12316 00c4 00000000 		.word	main_ram
 12317 00c8 00000000 		.word	const_PI
 12318 00cc 00000000 		.word	StackBase
 12319              	.LBE2289:
 12320              	.LBE2310:
 12321              		.cfi_endproc
 12322              	.LFE76:
 12324              		.section	.text.process_cmdline_set_lift,"ax",%progbits
 12325              		.align	1
 12326              		.p2align 2,,3
 12327              		.global	process_cmdline_set_lift
 12328              		.syntax unified
 12329              		.thumb
 12330              		.thumb_func
 12331              		.fpu fpv4-sp-d16
 12333              	process_cmdline_set_lift:
 12334              	.LFB89:
1335:src/xeq.c     **** 	process_cmdline();
 12335              		.loc 1 1335 37 is_stmt 1 view -0
 12336              		.cfi_startproc
 12337              		@ args = 0, pretend = 0, frame = 0
 12338              		@ frame_needed = 0, uses_anonymous_args = 0
1336:src/xeq.c     **** 	set_lift();
 12339              		.loc 1 1336 2 view .LVU3287
 12340              	.LBB2311:
 12341              	.LBI2311:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 12342              		.loc 1 1229 6 view .LVU3288
 12343              	.LBB2312:
1230:src/xeq.c     **** 
 12344              		.loc 1 1230 2 view .LVU3289
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12345              		.loc 1 1232 2 view .LVU3290
 12346              	.LBE2312:
 12347              	.LBE2311:
1335:src/xeq.c     **** 	process_cmdline();
 12348              		.loc 1 1335 37 is_stmt 0 view .LVU3291
 12349 0000 10B5     		push	{r4, lr}
 12350              		.cfi_def_cfa_offset 8
 12351              		.cfi_offset 4, -8
 12352              		.cfi_offset 14, -4
 12353              	.LBB2315:
 12354              	.LBB2313:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12355              		.loc 1 1232 6 view .LVU3292
 12356 0002 074C     		ldr	r4, .L923
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12357              		.loc 1 1232 5 view .LVU3293
 12358 0004 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 12359 0006 23B9     		cbnz	r3, .L922
 12360              	.LBE2313:
 12361              	.LBE2315:
1337:src/xeq.c     **** }
 12362              		.loc 1 1337 2 is_stmt 1 view .LVU3294
ARM GAS  /tmp/cccVhVyH.s 			page 372


 12363              	.LBB2316:
 12364              	.LBI2316:
 767:src/xeq.c     ****     State2.state_lift = 1;
 12365              		.loc 1 767 6 view .LVU3295
 12366              	.LBB2317:
 768:src/xeq.c     **** }
 12367              		.loc 1 768 5 view .LVU3296
 768:src/xeq.c     **** }
 12368              		.loc 1 768 23 is_stmt 0 view .LVU3297
 12369 0008 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12370 000a 43F04003 		orr	r3, r3, #64
 12371 000e E375     		strb	r3, [r4, #23]
 12372              	.LBE2317:
 12373              	.LBE2316:
1338:src/xeq.c     **** 
 12374              		.loc 1 1338 1 view .LVU3298
 12375 0010 10BD     		pop	{r4, pc}
 12376              	.L922:
 12377              	.LBB2319:
 12378              	.LBB2314:
 12379 0012 FFF7FEFF 		bl	process_cmdline.part.0
 12380              	.LVL908:
 12381              	.LBE2314:
 12382              	.LBE2319:
1337:src/xeq.c     **** }
 12383              		.loc 1 1337 2 is_stmt 1 view .LVU3299
 12384              	.LBB2320:
 767:src/xeq.c     ****     State2.state_lift = 1;
 12385              		.loc 1 767 6 view .LVU3300
 12386              	.LBB2318:
 768:src/xeq.c     **** }
 12387              		.loc 1 768 5 view .LVU3301
 768:src/xeq.c     **** }
 12388              		.loc 1 768 23 is_stmt 0 view .LVU3302
 12389 0016 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12390 0018 43F04003 		orr	r3, r3, #64
 12391 001c E375     		strb	r3, [r4, #23]
 12392              	.LBE2318:
 12393              	.LBE2320:
1338:src/xeq.c     **** 
 12394              		.loc 1 1338 1 view .LVU3303
 12395 001e 10BD     		pop	{r4, pc}
 12396              	.L924:
 12397              		.align	2
 12398              	.L923:
 12399 0020 00000000 		.word	StateWhileOn
 12400              		.cfi_endproc
 12401              	.LFE89:
 12403              		.section	.text.setX_int,"ax",%progbits
 12404              		.align	1
 12405              		.p2align 2,,3
 12406              		.global	setX_int
 12407              		.syntax unified
 12408              		.thumb
 12409              		.thumb_func
 12410              		.fpu fpv4-sp-d16
 12412              	setX_int:
ARM GAS  /tmp/cccVhVyH.s 			page 373


 12413              	.LVL909:
 12414              	.LFB102:
1507:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12415              		.loc 1 1507 34 is_stmt 1 view -0
 12416              		.cfi_startproc
 12417              		@ args = 0, pretend = 0, frame = 8
 12418              		@ frame_needed = 0, uses_anonymous_args = 0
1508:src/xeq.c     **** }
 12419              		.loc 1 1508 2 view .LVU3305
1507:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12420              		.loc 1 1507 34 is_stmt 0 view .LVU3306
 12421 0000 00B5     		push	{lr}
 12422              		.cfi_def_cfa_offset 4
 12423              		.cfi_offset 14, -4
 12424 0002 0B46     		mov	r3, r1
 12425 0004 83B0     		sub	sp, sp, #12
 12426              		.cfi_def_cfa_offset 16
1507:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12427              		.loc 1 1507 34 view .LVU3307
 12428 0006 0246     		mov	r2, r0
 12429              	.LBB2321:
 12430              	.LBB2322:
1426:src/xeq.c     **** }
 12431              		.loc 1 1426 8 view .LVU3308
 12432 0008 6420     		movs	r0, #100
 12433              	.LVL910:
1426:src/xeq.c     **** }
 12434              		.loc 1 1426 8 view .LVU3309
 12435 000a CDE90023 		strd	r2, [sp]
 12436              	.LVL911:
1426:src/xeq.c     **** }
 12437              		.loc 1 1426 8 view .LVU3310
 12438              	.LBE2322:
 12439              	.LBI2321:
1425:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 12440              		.loc 1 1425 6 is_stmt 1 view .LVU3311
 12441              	.LBB2323:
1426:src/xeq.c     **** }
 12442              		.loc 1 1426 2 view .LVU3312
1426:src/xeq.c     **** }
 12443              		.loc 1 1426 8 is_stmt 0 view .LVU3313
 12444 000e FFF7FEFF 		bl	get_reg_n
 12445              	.LVL912:
1426:src/xeq.c     **** }
 12446              		.loc 1 1426 2 view .LVU3314
 12447 0012 0822     		movs	r2, #8
 12448 0014 6946     		mov	r1, sp
 12449 0016 FFF7FEFF 		bl	xcopy
 12450              	.LVL913:
1426:src/xeq.c     **** }
 12451              		.loc 1 1426 2 view .LVU3315
 12452              	.LBE2323:
 12453              	.LBE2321:
1509:src/xeq.c     **** 
 12454              		.loc 1 1509 1 view .LVU3316
 12455 001a 03B0     		add	sp, sp, #12
 12456              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cccVhVyH.s 			page 374


 12457              		@ sp needed
 12458 001c 5DF804FB 		ldr	pc, [sp], #4
 12459              		.cfi_endproc
 12460              	.LFE102:
 12462              		.section	.text.do_rcl,"ax",%progbits
 12463              		.align	1
 12464              		.p2align 2,,3
 12465              		.syntax unified
 12466              		.thumb
 12467              		.thumb_func
 12468              		.fpu fpv4-sp-d16
 12470              	do_rcl:
 12471              	.LVL914:
 12472              	.LFB118:
1749:src/xeq.c     **** 	if (op == RARG_RCL) {
 12473              		.loc 1 1749 45 is_stmt 1 view -0
 12474              		.cfi_startproc
 12475              		@ args = 0, pretend = 0, frame = 40
 12476              		@ frame_needed = 0, uses_anonymous_args = 0
1750:src/xeq.c     **** 		REGISTER temp;
 12477              		.loc 1 1750 2 view .LVU3318
1749:src/xeq.c     **** 	if (op == RARG_RCL) {
 12478              		.loc 1 1749 45 is_stmt 0 view .LVU3319
 12479 0000 30B5     		push	{r4, r5, lr}
 12480              		.cfi_def_cfa_offset 12
 12481              		.cfi_offset 4, -12
 12482              		.cfi_offset 5, -8
 12483              		.cfi_offset 14, -4
1750:src/xeq.c     **** 		REGISTER temp;
 12484              		.loc 1 1750 5 view .LVU3320
 12485 0002 0A29     		cmp	r1, #10
1749:src/xeq.c     **** 	if (op == RARG_RCL) {
 12486              		.loc 1 1749 45 view .LVU3321
 12487 0004 8BB0     		sub	sp, sp, #44
 12488              		.cfi_def_cfa_offset 56
1749:src/xeq.c     **** 	if (op == RARG_RCL) {
 12489              		.loc 1 1749 45 view .LVU3322
 12490 0006 0B46     		mov	r3, r1
1750:src/xeq.c     **** 		REGISTER temp;
 12491              		.loc 1 1750 5 view .LVU3323
 12492 0008 33D0     		beq	.L948
1756:src/xeq.c     **** 			long long int r;
 12493              		.loc 1 1756 3 is_stmt 1 view .LVU3324
1756:src/xeq.c     **** 			long long int r;
 12494              		.loc 1 1756 7 is_stmt 0 view .LVU3325
 12495 000a 304A     		ldr	r2, .L950
 12496 000c 1268     		ldr	r2, [r2]
 12497 000e 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1756:src/xeq.c     **** 			long long int r;
 12498              		.loc 1 1756 6 view .LVU3326
 12499 0012 D207     		lsls	r2, r2, #31
 12500 0014 0146     		mov	r1, r0
 12501              	.LVL915:
 12502              	.LBB2353:
1759:src/xeq.c     **** 				illegal(op);
 12503              		.loc 1 1759 8 view .LVU3327
 12504 0016 A3F10A03 		sub	r3, r3, #10
ARM GAS  /tmp/cccVhVyH.s 			page 375


 12505              	.LBE2353:
1756:src/xeq.c     **** 			long long int r;
 12506              		.loc 1 1756 6 view .LVU3328
 12507 001a 14D5     		bpl	.L933
 12508              	.LBB2360:
1757:src/xeq.c     **** 
 12509              		.loc 1 1757 4 is_stmt 1 view .LVU3329
1759:src/xeq.c     **** 				illegal(op);
 12510              		.loc 1 1759 4 view .LVU3330
1759:src/xeq.c     **** 				illegal(op);
 12511              		.loc 1 1759 8 is_stmt 0 view .LVU3331
 12512 001c 98B2     		uxth	r0, r3
 12513              	.LVL916:
1759:src/xeq.c     **** 				illegal(op);
 12514              		.loc 1 1759 8 view .LVU3332
 12515 001e 6A46     		mov	r2, sp
 12516 0020 0123     		movs	r3, #1
 12517 0022 FFF7FEFF 		bl	storcl_intop
 12518              	.LVL917:
1759:src/xeq.c     **** 				illegal(op);
 12519              		.loc 1 1759 7 view .LVU3333
 12520 0026 20B1     		cbz	r0, .L934
1760:src/xeq.c     **** 			setlastX();
 12521              		.loc 1 1760 5 is_stmt 1 view .LVU3334
1760:src/xeq.c     **** 			setlastX();
 12522              		.loc 1 1760 5 view .LVU3335
 12523              	.LVL918:
 12524              	.LBB2354:
 12525              	.LBI2354:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12526              		.loc 1 546 5 view .LVU3336
 12527              	.LBB2355:
 547:src/xeq.c     **** 		Error = e;
 12528              		.loc 1 547 2 view .LVU3337
 547:src/xeq.c     **** 		Error = e;
 12529              		.loc 1 547 12 is_stmt 0 view .LVU3338
 12530 0028 294B     		ldr	r3, .L950+4
 547:src/xeq.c     **** 		Error = e;
 12531              		.loc 1 547 5 view .LVU3339
 12532 002a 1A68     		ldr	r2, [r3]
 12533 002c 0AB9     		cbnz	r2, .L934
 12534              	.LVL919:
 12535              	.LBB2356:
 12536              	.LBI2356:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12537              		.loc 1 546 5 is_stmt 1 view .LVU3340
 12538              	.LBB2357:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 12539              		.loc 1 548 3 view .LVU3341
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 12540              		.loc 1 548 9 is_stmt 0 view .LVU3342
 12541 002e 0322     		movs	r2, #3
 12542 0030 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 12543              		.loc 1 549 3 is_stmt 1 view .LVU3343
 12544              	.LVL920:
 12545              	.L934:
ARM GAS  /tmp/cccVhVyH.s 			page 376


 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 12546              		.loc 1 549 3 is_stmt 0 view .LVU3344
 12547              	.LBE2357:
 12548              	.LBE2356:
 12549              	.LBE2355:
 12550              	.LBE2354:
1760:src/xeq.c     **** 			setlastX();
 12551              		.loc 1 1760 5 is_stmt 1 discriminator 1 view .LVU3345
1761:src/xeq.c     **** 			setX_int(r);
 12552              		.loc 1 1761 4 discriminator 1 view .LVU3346
 12553              	.LBB2358:
 12554              	.LBI2358:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 12555              		.loc 1 792 6 discriminator 1 view .LVU3347
 12556              	.LBB2359:
 793:src/xeq.c     **** }
 12557              		.loc 1 793 2 discriminator 1 view .LVU3348
 12558 0032 6421     		movs	r1, #100
 12559 0034 6C20     		movs	r0, #108
 12560 0036 FFF7FEFF 		bl	copyreg_n
 12561              	.LVL921:
 12562              	.LBE2359:
 12563              	.LBE2358:
1762:src/xeq.c     **** 		} else {
 12564              		.loc 1 1762 4 discriminator 1 view .LVU3349
 12565 003a DDE90001 		ldrd	r0, [sp]
 12566 003e FFF7FEFF 		bl	setX_int
 12567              	.LVL922:
 12568              	.LBE2360:
1772:src/xeq.c     **** 
 12569              		.loc 1 1772 1 is_stmt 0 discriminator 1 view .LVU3350
 12570 0042 0BB0     		add	sp, sp, #44
 12571              		.cfi_remember_state
 12572              		.cfi_def_cfa_offset 12
 12573              		@ sp needed
 12574 0044 30BD     		pop	{r4, r5, pc}
 12575              	.LVL923:
 12576              	.L933:
 12577              		.cfi_restore_state
 12578              	.LBB2361:
1764:src/xeq.c     **** 
 12579              		.loc 1 1764 4 is_stmt 1 view .LVU3351
1766:src/xeq.c     **** 				illegal(op);
 12580              		.loc 1 1766 4 view .LVU3352
1766:src/xeq.c     **** 				illegal(op);
 12581              		.loc 1 1766 8 is_stmt 0 view .LVU3353
 12582 0046 6C46     		mov	r4, sp
 12583 0048 98B2     		uxth	r0, r3
 12584              	.LVL924:
1766:src/xeq.c     **** 				illegal(op);
 12585              		.loc 1 1766 8 view .LVU3354
 12586 004a 2246     		mov	r2, r4
 12587 004c 0123     		movs	r3, #1
 12588 004e FFF7FEFF 		bl	storcl_op
 12589              	.LVL925:
1766:src/xeq.c     **** 				illegal(op);
 12590              		.loc 1 1766 7 view .LVU3355
ARM GAS  /tmp/cccVhVyH.s 			page 377


 12591 0052 20B1     		cbz	r0, .L935
1767:src/xeq.c     **** 			setlastX();
 12592              		.loc 1 1767 5 is_stmt 1 view .LVU3356
1767:src/xeq.c     **** 			setlastX();
 12593              		.loc 1 1767 5 view .LVU3357
 12594              	.LVL926:
 12595              	.LBB2362:
 12596              	.LBI2362:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12597              		.loc 1 546 5 view .LVU3358
 12598              	.LBB2363:
 547:src/xeq.c     **** 		Error = e;
 12599              		.loc 1 547 2 view .LVU3359
 547:src/xeq.c     **** 		Error = e;
 12600              		.loc 1 547 12 is_stmt 0 view .LVU3360
 12601 0054 1E4B     		ldr	r3, .L950+4
 547:src/xeq.c     **** 		Error = e;
 12602              		.loc 1 547 5 view .LVU3361
 12603 0056 1A68     		ldr	r2, [r3]
 12604 0058 0AB9     		cbnz	r2, .L935
 12605              	.LVL927:
 12606              	.LBB2364:
 12607              	.LBI2364:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12608              		.loc 1 546 5 is_stmt 1 view .LVU3362
 12609              	.LBB2365:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 12610              		.loc 1 548 3 view .LVU3363
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 12611              		.loc 1 548 9 is_stmt 0 view .LVU3364
 12612 005a 0322     		movs	r2, #3
 12613 005c 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 12614              		.loc 1 549 3 is_stmt 1 view .LVU3365
 12615              	.LVL928:
 12616              	.L935:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 12617              		.loc 1 549 3 is_stmt 0 view .LVU3366
 12618              	.LBE2365:
 12619              	.LBE2364:
 12620              	.LBE2363:
 12621              	.LBE2362:
1767:src/xeq.c     **** 			setlastX();
 12622              		.loc 1 1767 5 is_stmt 1 discriminator 1 view .LVU3367
1768:src/xeq.c     **** 			setX(&r);
 12623              		.loc 1 1768 4 discriminator 1 view .LVU3368
 12624              	.LBB2366:
 12625              	.LBI2366:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 12626              		.loc 1 792 6 discriminator 1 view .LVU3369
 12627              	.LBB2367:
 793:src/xeq.c     **** }
 12628              		.loc 1 793 2 discriminator 1 view .LVU3370
 12629 005e 6421     		movs	r1, #100
 12630 0060 6C20     		movs	r0, #108
 12631 0062 FFF7FEFF 		bl	copyreg_n
 12632              	.LVL929:
ARM GAS  /tmp/cccVhVyH.s 			page 378


 12633              	.LBE2367:
 12634              	.LBE2366:
1769:src/xeq.c     **** 		}
 12635              		.loc 1 1769 4 discriminator 1 view .LVU3371
 12636              	.LBB2368:
 12637              	.LBI2368:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 12638              		.loc 1 828 6 discriminator 1 view .LVU3372
 12639              	.LBB2369:
 829:src/xeq.c     **** }
 12640              		.loc 1 829 2 discriminator 1 view .LVU3373
 12641 0066 2146     		mov	r1, r4
 12642 0068 6420     		movs	r0, #100
 12643 006a FFF7FEFF 		bl	setRegister
 12644              	.LVL930:
 829:src/xeq.c     **** }
 12645              		.loc 1 829 2 is_stmt 0 discriminator 1 view .LVU3374
 12646              	.LBE2369:
 12647              	.LBE2368:
 12648              	.LBE2361:
1772:src/xeq.c     **** 
 12649              		.loc 1 1772 1 discriminator 1 view .LVU3375
 12650 006e 0BB0     		add	sp, sp, #44
 12651              		.cfi_remember_state
 12652              		.cfi_def_cfa_offset 12
 12653              		@ sp needed
 12654 0070 30BD     		pop	{r4, r5, pc}
 12655              	.LVL931:
 12656              	.L948:
 12657              		.cfi_restore_state
 12658              	.LBB2370:
1751:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
 12659              		.loc 1 1751 3 is_stmt 1 view .LVU3376
1752:src/xeq.c     **** 		lift_if_enabled();
 12660              		.loc 1 1752 3 view .LVU3377
 12661              	.LBB2371:
 12662              	.LBB2372:
 12663              	.LBB2373:
 12664              	.LBB2374:
1122:src/xeq.c     **** }
 12665              		.loc 1 1122 24 is_stmt 0 view .LVU3378
 12666 0072 164D     		ldr	r5, .L950
 12667              	.LBE2374:
 12668              	.LBE2373:
 12669              	.LBE2372:
 12670              	.LBE2371:
1752:src/xeq.c     **** 		lift_if_enabled();
 12671              		.loc 1 1752 18 view .LVU3379
 12672 0074 FFF7FEFF 		bl	get_reg_n
 12673              	.LVL932:
 12674              	.LBB2381:
 12675              	.LBB2379:
 12676              	.LBB2377:
 12677              	.LBB2375:
1122:src/xeq.c     **** }
 12678              		.loc 1 1122 24 view .LVU3380
 12679 0078 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/cccVhVyH.s 			page 379


 12680 007a B3F8E827 		ldrh	r2, [r3, #2024]
 12681 007e 44F20103 		movw	r3, #16385
 12682              	.LBE2375:
 12683              	.LBE2377:
 727:src/xeq.c     **** }
 12684              		.loc 1 727 2 view .LVU3381
 12685 0082 1340     		ands	r3, r3, r2
 12686 0084 B3F5804F 		cmp	r3, #16384
 12687 0088 6C46     		mov	r4, sp
 12688              	.LBE2379:
 12689              	.LBE2381:
1752:src/xeq.c     **** 		lift_if_enabled();
 12690              		.loc 1 1752 18 view .LVU3382
 12691 008a 0146     		mov	r1, r0
 12692              	.LVL933:
 12693              	.LBB2382:
 12694              	.LBI2371:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12695              		.loc 1 726 6 is_stmt 1 view .LVU3383
 12696              	.LBB2380:
 727:src/xeq.c     **** }
 12697              		.loc 1 727 2 view .LVU3384
 12698              	.LBB2378:
 12699              	.LBI2373:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12700              		.loc 1 1121 5 view .LVU3385
 12701              	.LBB2376:
1122:src/xeq.c     **** }
 12702              		.loc 1 1122 2 view .LVU3386
 12703              	.LBE2376:
 12704              	.LBE2378:
 727:src/xeq.c     **** }
 12705              		.loc 1 727 2 is_stmt 0 view .LVU3387
 12706 008c 0CBF     		ite	eq
 12707 008e 1022     		moveq	r2, #16
 12708 0090 0822     		movne	r2, #8
 12709 0092 2046     		mov	r0, r4
 12710              	.LVL934:
 727:src/xeq.c     **** }
 12711              		.loc 1 727 2 view .LVU3388
 12712 0094 FFF7FEFF 		bl	xcopy
 12713              	.LVL935:
 727:src/xeq.c     **** }
 12714              		.loc 1 727 2 view .LVU3389
 12715              	.LBE2380:
 12716              	.LBE2382:
1753:src/xeq.c     **** 		copyreg(StackBase, &temp);
 12717              		.loc 1 1753 3 is_stmt 1 view .LVU3390
 12718              	.LBB2383:
 12719              	.LBI2383:
 747:src/xeq.c     **** 	if (get_lift())
 12720              		.loc 1 747 6 view .LVU3391
 12721              	.LBB2384:
 748:src/xeq.c     **** 		lift();
 12722              		.loc 1 748 2 view .LVU3392
 12723              	.LBB2385:
 12724              	.LBI2385:
ARM GAS  /tmp/cccVhVyH.s 			page 380


 743:src/xeq.c     **** 	return State2.state_lift;
 12725              		.loc 1 743 12 view .LVU3393
 12726              	.LBB2386:
 744:src/xeq.c     **** }
 12727              		.loc 1 744 2 view .LVU3394
 744:src/xeq.c     **** }
 12728              		.loc 1 744 15 is_stmt 0 view .LVU3395
 12729 0098 0E4B     		ldr	r3, .L950+8
 12730 009a DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 12731              	.LBE2386:
 12732              	.LBE2385:
 748:src/xeq.c     **** 		lift();
 12733              		.loc 1 748 5 view .LVU3396
 12734 009c 5906     		lsls	r1, r3, #25
 12735 009e 11D4     		bmi	.L949
 12736              	.L930:
 12737              	.LBE2384:
 12738              	.LBE2383:
1754:src/xeq.c     **** 	} else {
 12739              		.loc 1 1754 3 is_stmt 1 view .LVU3397
 12740              	.LBB2388:
 12741              	.LBB2389:
 12742              	.LBB2390:
 12743              	.LBB2391:
1122:src/xeq.c     **** }
 12744              		.loc 1 1122 24 is_stmt 0 view .LVU3398
 12745 00a0 2A68     		ldr	r2, [r5]
 12746              	.LBE2391:
 12747              	.LBE2390:
 12748              	.LBE2389:
 12749              	.LBE2388:
1754:src/xeq.c     **** 	} else {
 12750              		.loc 1 1754 3 view .LVU3399
 12751 00a2 0D4B     		ldr	r3, .L950+12
 12752              	.LVL936:
 12753              	.LBB2397:
 12754              	.LBI2388:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12755              		.loc 1 726 6 is_stmt 1 view .LVU3400
 12756              	.LBB2396:
 727:src/xeq.c     **** }
 12757              		.loc 1 727 2 view .LVU3401
 12758              	.LBB2394:
 12759              	.LBI2390:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12760              		.loc 1 1121 5 view .LVU3402
 12761              	.LBB2392:
1122:src/xeq.c     **** }
 12762              		.loc 1 1122 2 view .LVU3403
1122:src/xeq.c     **** }
 12763              		.loc 1 1122 24 is_stmt 0 view .LVU3404
 12764 00a4 B2F8E827 		ldrh	r2, [r2, #2024]
 12765              	.LBE2392:
 12766              	.LBE2394:
 727:src/xeq.c     **** }
 12767              		.loc 1 727 2 view .LVU3405
 12768 00a8 1868     		ldr	r0, [r3]
ARM GAS  /tmp/cccVhVyH.s 			page 381


 12769              	.LBB2395:
 12770              	.LBB2393:
1122:src/xeq.c     **** }
 12771              		.loc 1 1122 24 view .LVU3406
 12772 00aa 44F20103 		movw	r3, #16385
 12773              	.LVL937:
1122:src/xeq.c     **** }
 12774              		.loc 1 1122 24 view .LVU3407
 12775              	.LBE2393:
 12776              	.LBE2395:
 727:src/xeq.c     **** }
 12777              		.loc 1 727 2 view .LVU3408
 12778 00ae 1340     		ands	r3, r3, r2
 12779 00b0 B3F5804F 		cmp	r3, #16384
 12780 00b4 2146     		mov	r1, r4
 12781 00b6 0CBF     		ite	eq
 12782 00b8 1022     		moveq	r2, #16
 12783 00ba 0822     		movne	r2, #8
 12784 00bc FFF7FEFF 		bl	xcopy
 12785              	.LVL938:
 727:src/xeq.c     **** }
 12786              		.loc 1 727 2 view .LVU3409
 12787              	.LBE2396:
 12788              	.LBE2397:
 12789              	.LBE2370:
1772:src/xeq.c     **** 
 12790              		.loc 1 1772 1 view .LVU3410
 12791 00c0 0BB0     		add	sp, sp, #44
 12792              		.cfi_remember_state
 12793              		.cfi_def_cfa_offset 12
 12794              		@ sp needed
 12795 00c2 30BD     		pop	{r4, r5, pc}
 12796              	.L949:
 12797              		.cfi_restore_state
 12798              	.LBB2399:
 12799              	.LBB2398:
 12800              	.LBB2387:
 749:src/xeq.c     **** }
 12801              		.loc 1 749 3 is_stmt 1 view .LVU3411
 12802 00c4 FFF7FEFF 		bl	lift
 12803              	.LVL939:
 12804 00c8 EAE7     		b	.L930
 12805              	.L951:
 12806 00ca 00BF     		.align	2
 12807              	.L950:
 12808 00cc 00000000 		.word	main_ram
 12809 00d0 00000000 		.word	Error
 12810 00d4 00000000 		.word	StateWhileOn
 12811 00d8 00000000 		.word	StackBase
 12812              	.LBE2387:
 12813              	.LBE2398:
 12814              	.LBE2399:
 12815              		.cfi_endproc
 12816              	.LFE118:
 12818              		.section	.text.setX_int_sgn,"ax",%progbits
 12819              		.align	1
 12820              		.p2align 2,,3
ARM GAS  /tmp/cccVhVyH.s 			page 382


 12821              		.global	setX_int_sgn
 12822              		.syntax unified
 12823              		.thumb
 12824              		.thumb_func
 12825              		.fpu fpv4-sp-d16
 12827              	setX_int_sgn:
 12828              	.LVL940:
 12829              	.LFB103:
1512:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 12830              		.loc 1 1512 56 view -0
 12831              		.cfi_startproc
 12832              		@ args = 0, pretend = 0, frame = 0
 12833              		@ frame_needed = 0, uses_anonymous_args = 0
1513:src/xeq.c     **** }
 12834              		.loc 1 1513 2 view .LVU3413
1512:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 12835              		.loc 1 1512 56 is_stmt 0 view .LVU3414
 12836 0000 00B5     		push	{lr}
 12837              		.cfi_def_cfa_offset 4
 12838              		.cfi_offset 14, -4
 12839 0002 83B0     		sub	sp, sp, #12
 12840              		.cfi_def_cfa_offset 16
1513:src/xeq.c     **** }
 12841              		.loc 1 1513 2 view .LVU3415
 12842 0004 0B46     		mov	r3, r1
 12843 0006 0092     		str	r2, [sp]
 12844 0008 0246     		mov	r2, r0
 12845              	.LVL941:
1513:src/xeq.c     **** }
 12846              		.loc 1 1513 2 view .LVU3416
 12847 000a 6420     		movs	r0, #100
 12848              	.LVL942:
1513:src/xeq.c     **** }
 12849              		.loc 1 1513 2 view .LVU3417
 12850 000c FFF7FEFF 		bl	set_reg_n_int_sgn
 12851              	.LVL943:
1514:src/xeq.c     **** 
 12852              		.loc 1 1514 1 view .LVU3418
 12853 0010 03B0     		add	sp, sp, #12
 12854              		.cfi_def_cfa_offset 4
 12855              		@ sp needed
 12856 0012 5DF804FB 		ldr	pc, [sp], #4
 12857              		.cfi_endproc
 12858              	.LFE103:
 12860 0016 00BF     		.section	.text.zero_regs,"ax",%progbits
 12861              		.align	1
 12862              		.p2align 2,,3
 12863              		.global	zero_regs
 12864              		.syntax unified
 12865              		.thumb
 12866              		.thumb_func
 12867              		.fpu fpv4-sp-d16
 12869              	zero_regs:
 12870              	.LVL944:
 12871              	.LFB104:
1521:src/xeq.c     **** #if 0
 12872              		.loc 1 1521 39 is_stmt 1 view -0
ARM GAS  /tmp/cccVhVyH.s 			page 383


 12873              		.cfi_startproc
 12874              		@ args = 0, pretend = 0, frame = 0
 12875              		@ frame_needed = 0, uses_anonymous_args = 0
 12876              		@ link register save eliminated.
1536:src/xeq.c     **** #endif
 12877              		.loc 1 1536 2 view .LVU3420
 12878              	.LBB2400:
 12879              	.LBI2400:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12880              		.loc 1 1121 5 view .LVU3421
 12881              	.LBB2401:
1122:src/xeq.c     **** }
 12882              		.loc 1 1122 2 view .LVU3422
1122:src/xeq.c     **** }
 12883              		.loc 1 1122 24 is_stmt 0 view .LVU3423
 12884 0000 084B     		ldr	r3, .L955
 12885 0002 1B68     		ldr	r3, [r3]
 12886 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 12887 0008 44F20103 		movw	r3, #16385
 12888 000c 1340     		ands	r3, r3, r2
 12889 000e A3F58043 		sub	r3, r3, #16384
 12890 0012 B3FA83F3 		clz	r3, r3
 12891 0016 5B09     		lsrs	r3, r3, #5
 12892              	.LBE2401:
 12893              	.LBE2400:
1536:src/xeq.c     **** #endif
 12894              		.loc 1 1536 24 view .LVU3424
 12895 0018 0333     		adds	r3, r3, #3
1536:src/xeq.c     **** #endif
 12896              		.loc 1 1536 2 view .LVU3425
 12897 001a 01FA03F2 		lsl	r2, r1, r3
 12898 001e 0021     		movs	r1, #0
 12899              	.LVL945:
1536:src/xeq.c     **** #endif
 12900              		.loc 1 1536 2 view .LVU3426
 12901 0020 FFF7FEBF 		b	xset
 12902              	.LVL946:
 12903              	.L956:
1536:src/xeq.c     **** #endif
 12904              		.loc 1 1536 2 view .LVU3427
 12905              		.align	2
 12906              	.L955:
 12907 0024 00000000 		.word	main_ram
 12908              		.cfi_endproc
 12909              	.LFE104:
 12911              		.section	.text.move_regs,"ax",%progbits
 12912              		.align	1
 12913              		.p2align 2,,3
 12914              		.global	move_regs
 12915              		.syntax unified
 12916              		.thumb
 12917              		.thumb_func
 12918              		.fpu fpv4-sp-d16
 12920              	move_regs:
 12921              	.LVL947:
 12922              	.LFB105:
1540:src/xeq.c     **** 	if (is_dblmode())
ARM GAS  /tmp/cccVhVyH.s 			page 384


 12923              		.loc 1 1540 54 is_stmt 1 view -0
 12924              		.cfi_startproc
 12925              		@ args = 0, pretend = 0, frame = 0
 12926              		@ frame_needed = 0, uses_anonymous_args = 0
 12927              		@ link register save eliminated.
1541:src/xeq.c     **** 		n <<= 1;
 12928              		.loc 1 1541 2 view .LVU3429
 12929              	.LBB2402:
 12930              	.LBI2402:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12931              		.loc 1 1121 5 view .LVU3430
 12932              	.LBB2403:
1122:src/xeq.c     **** }
 12933              		.loc 1 1122 2 view .LVU3431
1122:src/xeq.c     **** }
 12934              		.loc 1 1122 24 is_stmt 0 view .LVU3432
 12935 0000 084B     		ldr	r3, .L960
 12936 0002 1B68     		ldr	r3, [r3]
 12937              	.LBE2403:
 12938              	.LBE2402:
1540:src/xeq.c     **** 	if (is_dblmode())
 12939              		.loc 1 1540 54 view .LVU3433
 12940 0004 10B4     		push	{r4}
 12941              		.cfi_def_cfa_offset 4
 12942              		.cfi_offset 4, -4
 12943              	.LBB2405:
 12944              	.LBB2404:
1122:src/xeq.c     **** }
 12945              		.loc 1 1122 24 view .LVU3434
 12946 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 12947 000a 44F20103 		movw	r3, #16385
 12948              	.LBE2404:
 12949              	.LBE2405:
1541:src/xeq.c     **** 		n <<= 1;
 12950              		.loc 1 1541 5 view .LVU3435
 12951 000e 2340     		ands	r3, r3, r4
 12952 0010 B3F5804F 		cmp	r3, #16384
1542:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 12953              		.loc 1 1542 3 is_stmt 1 view .LVU3436
1542:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 12954              		.loc 1 1542 5 is_stmt 0 view .LVU3437
 12955 0014 08BF     		it	eq
 12956 0016 5200     		lsleq	r2, r2, #1
 12957              	.LVL948:
1543:src/xeq.c     **** }
 12958              		.loc 1 1543 2 is_stmt 1 view .LVU3438
1544:src/xeq.c     **** 
 12959              		.loc 1 1544 1 is_stmt 0 view .LVU3439
 12960 0018 5DF8044B 		ldr	r4, [sp], #4
 12961              		.cfi_restore 4
 12962              		.cfi_def_cfa_offset 0
1543:src/xeq.c     **** }
 12963              		.loc 1 1543 2 view .LVU3440
 12964 001c D200     		lsls	r2, r2, #3
 12965              	.LVL949:
1543:src/xeq.c     **** }
 12966              		.loc 1 1543 2 view .LVU3441
ARM GAS  /tmp/cccVhVyH.s 			page 385


 12967 001e FFF7FEBF 		b	xcopy
 12968              	.LVL950:
 12969              	.L961:
1543:src/xeq.c     **** }
 12970              		.loc 1 1543 2 view .LVU3442
 12971 0022 00BF     		.align	2
 12972              	.L960:
 12973 0024 00000000 		.word	main_ram
 12974              		.cfi_endproc
 12975              	.LFE105:
 12977              		.section	.text.zero_X,"ax",%progbits
 12978              		.align	1
 12979              		.p2align 2,,3
 12980              		.global	zero_X
 12981              		.syntax unified
 12982              		.thumb
 12983              		.thumb_func
 12984              		.fpu fpv4-sp-d16
 12986              	zero_X:
 12987              	.LFB107:
1553:src/xeq.c     **** 	set_zero(StackBase);
 12988              		.loc 1 1553 19 is_stmt 1 view -0
 12989              		.cfi_startproc
 12990              		@ args = 0, pretend = 0, frame = 0
 12991              		@ frame_needed = 0, uses_anonymous_args = 0
 12992              		@ link register save eliminated.
1554:src/xeq.c     **** }
 12993              		.loc 1 1554 2 view .LVU3444
 12994 0000 014B     		ldr	r3, .L963
 12995 0002 1868     		ldr	r0, [r3]
 12996 0004 FFF7FEBF 		b	set_zero
 12997              	.LVL951:
 12998              	.L964:
 12999              		.align	2
 13000              	.L963:
 13001 0008 00000000 		.word	StackBase
 13002              		.cfi_endproc
 13003              	.LFE107:
 13005              		.section	.text.zero_Y,"ax",%progbits
 13006              		.align	1
 13007              		.p2align 2,,3
 13008              		.global	zero_Y
 13009              		.syntax unified
 13010              		.thumb
 13011              		.thumb_func
 13012              		.fpu fpv4-sp-d16
 13014              	zero_Y:
 13015              	.LFB108:
1557:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 13016              		.loc 1 1557 19 view -0
 13017              		.cfi_startproc
 13018              		@ args = 0, pretend = 0, frame = 0
 13019              		@ frame_needed = 0, uses_anonymous_args = 0
1558:src/xeq.c     **** }
 13020              		.loc 1 1558 2 view .LVU3446
1557:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 13021              		.loc 1 1557 19 is_stmt 0 view .LVU3447
ARM GAS  /tmp/cccVhVyH.s 			page 386


 13022 0000 08B5     		push	{r3, lr}
 13023              		.cfi_def_cfa_offset 8
 13024              		.cfi_offset 3, -8
 13025              		.cfi_offset 14, -4
1558:src/xeq.c     **** }
 13026              		.loc 1 1558 2 view .LVU3448
 13027 0002 6520     		movs	r0, #101
 13028 0004 FFF7FEFF 		bl	get_reg_n
 13029              	.LVL952:
1559:src/xeq.c     **** 
 13030              		.loc 1 1559 1 view .LVU3449
 13031 0008 BDE80840 		pop	{r3, lr}
 13032              		.cfi_restore 14
 13033              		.cfi_restore 3
 13034              		.cfi_def_cfa_offset 0
1558:src/xeq.c     **** }
 13035              		.loc 1 1558 2 view .LVU3450
 13036 000c FFF7FEBF 		b	set_zero
 13037              	.LVL953:
 13038              		.cfi_endproc
 13039              	.LFE108:
 13041              		.section	.text.clrx,"ax",%progbits
 13042              		.align	1
 13043              		.p2align 2,,3
 13044              		.global	clrx
 13045              		.syntax unified
 13046              		.thumb
 13047              		.thumb_func
 13048              		.fpu fpv4-sp-d16
 13050              	clrx:
 13051              	.LVL954:
 13052              	.LFB109:
1561:src/xeq.c     **** 	zero_X();
 13053              		.loc 1 1561 26 is_stmt 1 view -0
 13054              		.cfi_startproc
 13055              		@ args = 0, pretend = 0, frame = 0
 13056              		@ frame_needed = 0, uses_anonymous_args = 0
1562:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 13057              		.loc 1 1562 2 view .LVU3452
 13058              	.LBB2406:
 13059              	.LBI2406:
1553:src/xeq.c     **** 	set_zero(StackBase);
 13060              		.loc 1 1553 6 view .LVU3453
 13061              	.LBB2407:
1554:src/xeq.c     **** }
 13062              		.loc 1 1554 2 view .LVU3454
 13063 0000 1E4B     		ldr	r3, .L982
 13064              	.LBE2407:
 13065              	.LBE2406:
1561:src/xeq.c     **** 	zero_X();
 13066              		.loc 1 1561 26 is_stmt 0 view .LVU3455
 13067 0002 10B5     		push	{r4, lr}
 13068              		.cfi_def_cfa_offset 8
 13069              		.cfi_offset 4, -8
 13070              		.cfi_offset 14, -4
1564:src/xeq.c     **** 		zero_Y();
 13071              		.loc 1 1564 6 view .LVU3456
ARM GAS  /tmp/cccVhVyH.s 			page 387


 13072 0004 1E4C     		ldr	r4, .L982+4
 13073              	.LBB2409:
 13074              	.LBB2408:
1554:src/xeq.c     **** }
 13075              		.loc 1 1554 2 view .LVU3457
 13076 0006 1868     		ldr	r0, [r3]
 13077              	.LVL955:
1554:src/xeq.c     **** }
 13078              		.loc 1 1554 2 view .LVU3458
 13079 0008 FFF7FEFF 		bl	set_zero
 13080              	.LVL956:
 13081              	.LBE2408:
 13082              	.LBE2409:
1564:src/xeq.c     **** 		zero_Y();
 13083              		.loc 1 1564 2 is_stmt 1 view .LVU3459
1564:src/xeq.c     **** 		zero_Y();
 13084              		.loc 1 1564 6 is_stmt 0 view .LVU3460
 13085 000c 2368     		ldr	r3, [r4]
 13086 000e 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
1564:src/xeq.c     **** 		zero_Y();
 13087              		.loc 1 1564 5 view .LVU3461
 13088 0012 5007     		lsls	r0, r2, #29
 13089 0014 03D5     		bpl	.L968
1564:src/xeq.c     **** 		zero_Y();
 13090              		.loc 1 1564 6 discriminator 1 view .LVU3462
 13091 0016 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 13092 001a 5907     		lsls	r1, r3, #29
 13093 001c 05D4     		bmi	.L980
 13094              	.L968:
1574:src/xeq.c     **** }
 13095              		.loc 1 1574 2 is_stmt 1 view .LVU3463
 13096              	.LBB2410:
 13097              	.LBI2410:
 771:src/xeq.c     ****     State2.state_lift = 0;
 13098              		.loc 1 771 13 view .LVU3464
 13099              	.LBB2411:
 772:src/xeq.c     **** }
 13100              		.loc 1 772 5 view .LVU3465
 772:src/xeq.c     **** }
 13101              		.loc 1 772 23 is_stmt 0 view .LVU3466
 13102 001e 194B     		ldr	r3, .L982+8
 13103 0020 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 13104 0022 6FF38612 		bfc	r2, #6, #1
 13105 0026 DA75     		strb	r2, [r3, #23]
 13106              	.LBE2411:
 13107              	.LBE2410:
1575:src/xeq.c     **** 
 13108              		.loc 1 1575 1 view .LVU3467
 13109 0028 10BD     		pop	{r4, pc}
 13110              	.L980:
1565:src/xeq.c     **** 		if (POLAR_DISPLAY) {
 13111              		.loc 1 1565 3 is_stmt 1 view .LVU3468
 13112              	.LBB2413:
 13113              	.LBI2413:
1557:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 13114              		.loc 1 1557 6 view .LVU3469
 13115              	.LBB2414:
ARM GAS  /tmp/cccVhVyH.s 			page 388


1558:src/xeq.c     **** }
 13116              		.loc 1 1558 2 view .LVU3470
 13117 002a 6520     		movs	r0, #101
 13118 002c FFF7FEFF 		bl	get_reg_n
 13119              	.LVL957:
 13120 0030 FFF7FEFF 		bl	set_zero
 13121              	.LVL958:
 13122              	.LBE2414:
 13123              	.LBE2413:
1566:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13124              		.loc 1 1566 3 view .LVU3471
1566:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13125              		.loc 1 1566 7 is_stmt 0 view .LVU3472
 13126 0034 2368     		ldr	r3, [r4]
 13127 0036 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
1566:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13128              		.loc 1 1566 6 view .LVU3473
 13129 003a 1207     		lsls	r2, r2, #28
 13130 003c 11D4     		bmi	.L981
 13131              	.L969:
1570:src/xeq.c     **** 		CLEAR_IMAG;
 13132              		.loc 1 1570 3 is_stmt 1 view .LVU3474
 13133 003e 93F8E417 		ldrb	r1, [r3, #2020]	@ zero_extendqisi2
1571:src/xeq.c     **** 	}
 13134              		.loc 1 1571 3 is_stmt 0 view .LVU3475
 13135 0042 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
1570:src/xeq.c     **** 		CLEAR_IMAG;
 13136              		.loc 1 1570 3 view .LVU3476
 13137 0046 6FF3C301 		bfc	r1, #3, #1
1571:src/xeq.c     **** 	}
 13138              		.loc 1 1571 3 view .LVU3477
 13139 004a 6FF3C302 		bfc	r2, #3, #1
 13140 004e 83F8EB27 		strb	r2, [r3, #2027]
1570:src/xeq.c     **** 		CLEAR_IMAG;
 13141              		.loc 1 1570 3 view .LVU3478
 13142 0052 83F8E417 		strb	r1, [r3, #2020]
1571:src/xeq.c     **** 	}
 13143              		.loc 1 1571 3 is_stmt 1 view .LVU3479
1574:src/xeq.c     **** }
 13144              		.loc 1 1574 2 view .LVU3480
 13145              	.LBB2415:
 771:src/xeq.c     ****     State2.state_lift = 0;
 13146              		.loc 1 771 13 view .LVU3481
 13147              	.LBB2412:
 772:src/xeq.c     **** }
 13148              		.loc 1 772 5 view .LVU3482
 772:src/xeq.c     **** }
 13149              		.loc 1 772 23 is_stmt 0 view .LVU3483
 13150 0056 0B4B     		ldr	r3, .L982+8
 13151 0058 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 13152 005a 6FF38612 		bfc	r2, #6, #1
 13153 005e DA75     		strb	r2, [r3, #23]
 13154              	.LBE2412:
 13155              	.LBE2415:
1575:src/xeq.c     **** 
 13156              		.loc 1 1575 1 view .LVU3484
 13157 0060 10BD     		pop	{r4, pc}
ARM GAS  /tmp/cccVhVyH.s 			page 389


 13158              	.L981:
1567:src/xeq.c     **** 			set_zero(get_reg_n(regK_idx));
 13159              		.loc 1 1567 4 is_stmt 1 view .LVU3485
 13160 0062 6E20     		movs	r0, #110
 13161 0064 FFF7FEFF 		bl	get_reg_n
 13162              	.LVL959:
 13163 0068 FFF7FEFF 		bl	set_zero
 13164              	.LVL960:
1568:src/xeq.c     **** 		}
 13165              		.loc 1 1568 4 view .LVU3486
 13166 006c 6F20     		movs	r0, #111
 13167 006e FFF7FEFF 		bl	get_reg_n
 13168              	.LVL961:
 13169 0072 FFF7FEFF 		bl	set_zero
 13170              	.LVL962:
 13171 0076 2368     		ldr	r3, [r4]
 13172 0078 E1E7     		b	.L969
 13173              	.L983:
 13174 007a 00BF     		.align	2
 13175              	.L982:
 13176 007c 00000000 		.word	StackBase
 13177 0080 00000000 		.word	main_ram
 13178 0084 00000000 		.word	StateWhileOn
 13179              		.cfi_endproc
 13180              	.LFE109:
 13182              		.section	.text.clrstk,"ax",%progbits
 13183              		.align	1
 13184              		.p2align 2,,3
 13185              		.global	clrstk
 13186              		.syntax unified
 13187              		.thumb
 13188              		.thumb_func
 13189              		.fpu fpv4-sp-d16
 13191              	clrstk:
 13192              	.LVL963:
 13193              	.LFB110:
1579:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 13194              		.loc 1 1579 28 view -0
 13195              		.cfi_startproc
 13196              		@ args = 0, pretend = 0, frame = 0
 13197              		@ frame_needed = 0, uses_anonymous_args = 0
1580:src/xeq.c     **** 	set_lift();
 13198              		.loc 1 1580 2 view .LVU3488
1579:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 13199              		.loc 1 1579 28 is_stmt 0 view .LVU3489
 13200 0000 08B5     		push	{r3, lr}
 13201              		.cfi_def_cfa_offset 8
 13202              		.cfi_offset 3, -8
 13203              		.cfi_offset 14, -4
 13204              	.LBB2416:
 13205              	.LBB2417:
 713:src/xeq.c     **** 		return 4;
 13206              		.loc 1 713 8 view .LVU3490
 13207 0002 164B     		ldr	r3, .L991
 13208              	.LBE2417:
 13209              	.LBE2416:
1580:src/xeq.c     **** 	set_lift();
ARM GAS  /tmp/cccVhVyH.s 			page 390


 13210              		.loc 1 1580 2 view .LVU3491
 13211 0004 164A     		ldr	r2, .L991+4
 13212              	.LBB2423:
 13213              	.LBB2420:
 713:src/xeq.c     **** 		return 4;
 13214              		.loc 1 713 8 view .LVU3492
 13215 0006 1B68     		ldr	r3, [r3]
 13216              	.LBE2420:
 13217              	.LBE2423:
1580:src/xeq.c     **** 	set_lift();
 13218              		.loc 1 1580 2 view .LVU3493
 13219 0008 1068     		ldr	r0, [r2]
 13220              	.LVL964:
 13221              	.LBB2424:
 13222              	.LBI2416:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 13223              		.loc 1 712 5 is_stmt 1 view .LVU3494
 13224              	.LBB2421:
 713:src/xeq.c     **** 		return 4;
 13225              		.loc 1 713 2 view .LVU3495
 713:src/xeq.c     **** 		return 4;
 13226              		.loc 1 713 6 is_stmt 0 view .LVU3496
 13227 000a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 13228              		.loc 1 713 5 view .LVU3497
 13229 000e 1207     		lsls	r2, r2, #28
 13230 0010 22D5     		bpl	.L986
 13231              	.LBB2418:
 13232              	.LBI2418:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 13233              		.loc 1 185 5 is_stmt 1 view .LVU3498
 13234              	.LBB2419:
 186:src/xeq.c     **** }
 13235              		.loc 1 186 2 view .LVU3499
 186:src/xeq.c     **** }
 13236              		.loc 1 186 9 is_stmt 0 view .LVU3500
 13237 0012 B3F8E027 		ldrh	r2, [r3, #2016]
 13238              	.LBE2419:
 13239              	.LBE2418:
 713:src/xeq.c     **** 		return 4;
 13240              		.loc 1 713 27 view .LVU3501
 13241 0016 920B     		lsrs	r2, r2, #14
 13242 0018 032A     		cmp	r2, #3
 13243 001a 15D0     		beq	.L990
 715:src/xeq.c     **** }
 13244              		.loc 1 715 9 view .LVU3502
 13245 001c 0822     		movs	r2, #8
 13246              	.L985:
 13247              	.LVL965:
 715:src/xeq.c     **** }
 13248              		.loc 1 715 9 view .LVU3503
 13249              	.LBE2421:
 13250              	.LBE2424:
 13251              	.LBB2425:
 13252              	.LBI2425:
1521:src/xeq.c     **** #if 0
 13253              		.loc 1 1521 6 is_stmt 1 view .LVU3504
ARM GAS  /tmp/cccVhVyH.s 			page 391


 13254              	.LBB2426:
1536:src/xeq.c     **** #endif
 13255              		.loc 1 1536 2 view .LVU3505
 13256              	.LBB2427:
 13257              	.LBI2427:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13258              		.loc 1 1121 5 view .LVU3506
 13259              	.LBB2428:
1122:src/xeq.c     **** }
 13260              		.loc 1 1122 2 view .LVU3507
1122:src/xeq.c     **** }
 13261              		.loc 1 1122 24 is_stmt 0 view .LVU3508
 13262 001e B3F8E817 		ldrh	r1, [r3, #2024]
 13263 0022 44F20103 		movw	r3, #16385
 13264 0026 0B40     		ands	r3, r3, r1
 13265 0028 A3F58043 		sub	r3, r3, #16384
 13266 002c B3FA83F3 		clz	r3, r3
 13267 0030 5B09     		lsrs	r3, r3, #5
 13268              	.LBE2428:
 13269              	.LBE2427:
1536:src/xeq.c     **** #endif
 13270              		.loc 1 1536 24 view .LVU3509
 13271 0032 0333     		adds	r3, r3, #3
1536:src/xeq.c     **** #endif
 13272              		.loc 1 1536 2 view .LVU3510
 13273 0034 9A40     		lsls	r2, r2, r3
 13274              	.LVL966:
1536:src/xeq.c     **** #endif
 13275              		.loc 1 1536 2 view .LVU3511
 13276 0036 0021     		movs	r1, #0
 13277 0038 FFF7FEFF 		bl	xset
 13278              	.LVL967:
1536:src/xeq.c     **** #endif
 13279              		.loc 1 1536 2 view .LVU3512
 13280              	.LBE2426:
 13281              	.LBE2425:
1581:src/xeq.c     **** }
 13282              		.loc 1 1581 2 is_stmt 1 view .LVU3513
 13283              	.LBB2429:
 13284              	.LBI2429:
 767:src/xeq.c     ****     State2.state_lift = 1;
 13285              		.loc 1 767 6 view .LVU3514
 13286              	.LBB2430:
 768:src/xeq.c     **** }
 13287              		.loc 1 768 5 view .LVU3515
 768:src/xeq.c     **** }
 13288              		.loc 1 768 23 is_stmt 0 view .LVU3516
 13289 003c 094A     		ldr	r2, .L991+8
 13290 003e D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 13291 0040 43F04003 		orr	r3, r3, #64
 13292 0044 D375     		strb	r3, [r2, #23]
 13293              	.LBE2430:
 13294              	.LBE2429:
1582:src/xeq.c     **** 
 13295              		.loc 1 1582 1 view .LVU3517
 13296 0046 08BD     		pop	{r3, pc}
 13297              	.L990:
ARM GAS  /tmp/cccVhVyH.s 			page 392


 13298              	.LBB2431:
 13299              	.LBB2422:
 713:src/xeq.c     **** 		return 4;
 13300              		.loc 1 713 44 view .LVU3518
 13301 0048 074A     		ldr	r2, .L991+12
 713:src/xeq.c     **** 		return 4;
 13302              		.loc 1 713 41 view .LVU3519
 13303 004a 92F90120 		ldrsb	r2, [r2, #1]
 13304 004e 002A     		cmp	r2, #0
 714:src/xeq.c     **** 	return 8;
 13305              		.loc 1 714 10 view .LVU3520
 13306 0050 B4BF     		ite	lt
 13307 0052 0822     		movlt	r2, #8
 13308 0054 0422     		movge	r2, #4
 13309 0056 E2E7     		b	.L985
 13310              	.L986:
 13311 0058 0422     		movs	r2, #4
 13312 005a E0E7     		b	.L985
 13313              	.L992:
 13314              		.align	2
 13315              	.L991:
 13316 005c 00000000 		.word	main_ram
 13317 0060 00000000 		.word	StackBase
 13318 0064 00000000 		.word	StateWhileOn
 13319 0068 00000000 		.word	XromParams
 13320              	.LBE2422:
 13321              	.LBE2431:
 13322              		.cfi_endproc
 13323              	.LFE110:
 13325              		.section	.text.clrreg,"ax",%progbits
 13326              		.align	1
 13327              		.p2align 2,,3
 13328              		.global	clrreg
 13329              		.syntax unified
 13330              		.thumb
 13331              		.thumb_func
 13332              		.fpu fpv4-sp-d16
 13334              	clrreg:
 13335              	.LVL968:
 13336              	.LFB111:
1587:src/xeq.c     **** 	const int local = local_regs();
 13337              		.loc 1 1587 28 is_stmt 1 view -0
 13338              		.cfi_startproc
 13339              		@ args = 0, pretend = 0, frame = 0
 13340              		@ frame_needed = 0, uses_anonymous_args = 0
1588:src/xeq.c     **** 	process_cmdline_set_lift();
 13341              		.loc 1 1588 2 view .LVU3522
 13342              	.LBB2432:
 13343              	.LBI2432:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 13344              		.loc 1 233 5 view .LVU3523
 13345              	.LBE2432:
 234:src/xeq.c     **** }
 13346              		.loc 1 234 2 view .LVU3524
 13347              	.LBB2463:
 13348              	.LBB2433:
 13349              	.LBI2433:
ARM GAS  /tmp/cccVhVyH.s 			page 393


 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 13350              		.loc 1 225 5 view .LVU3525
 13351              	.LBB2434:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13352              		.loc 1 226 2 view .LVU3526
 13353              	.LBB2435:
 13354              	.LBI2435:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13355              		.loc 1 1121 5 view .LVU3527
 13356              	.LBB2436:
1122:src/xeq.c     **** }
 13357              		.loc 1 1122 2 view .LVU3528
 13358              	.LBE2436:
 13359              	.LBE2435:
 13360              	.LBE2434:
 13361              	.LBE2433:
 13362              	.LBE2463:
1587:src/xeq.c     **** 	const int local = local_regs();
 13363              		.loc 1 1587 28 is_stmt 0 view .LVU3529
 13364 0000 70B5     		push	{r4, r5, r6, lr}
 13365              		.cfi_def_cfa_offset 16
 13366              		.cfi_offset 4, -16
 13367              		.cfi_offset 5, -12
 13368              		.cfi_offset 6, -8
 13369              		.cfi_offset 14, -4
 13370              	.LBB2464:
 13371              	.LBB2459:
 13372              	.LBB2455:
 13373              	.LBB2440:
 13374              	.LBB2437:
1122:src/xeq.c     **** }
 13375              		.loc 1 1122 12 view .LVU3530
 13376 0002 474C     		ldr	r4, .L1013
 13377 0004 2268     		ldr	r2, [r4]
 13378              	.LVL969:
1122:src/xeq.c     **** }
 13379              		.loc 1 1122 12 view .LVU3531
 13380              	.LBE2437:
 13381              	.LBE2440:
 227:src/xeq.c     **** }
 13382              		.loc 1 227 2 is_stmt 1 view .LVU3532
 13383              	.LBB2441:
 13384              	.LBI2441:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 13385              		.loc 1 217 5 view .LVU3533
 13386              	.LBB2442:
 218:src/xeq.c     **** }
 13387              		.loc 1 218 2 view .LVU3534
 218:src/xeq.c     **** }
 13388              		.loc 1 218 9 is_stmt 0 view .LVU3535
 13389 0006 B2F8DE37 		ldrh	r3, [r2, #2014]
 13390 000a 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 13391              		.loc 1 218 57 view .LVU3536
 13392 000e 002B     		cmp	r3, #0
 13393 0010 58DB     		blt	.L1009
 13394              	.LVL970:
ARM GAS  /tmp/cccVhVyH.s 			page 394


 218:src/xeq.c     **** }
 13395              		.loc 1 218 57 view .LVU3537
 13396              	.LBE2442:
 13397              	.LBE2441:
 13398              	.LBE2455:
 13399              	.LBE2459:
 13400              	.LBE2464:
1589:src/xeq.c     **** 
 13401              		.loc 1 1589 2 is_stmt 1 view .LVU3538
 13402              	.LBB2465:
 13403              	.LBI2465:
1335:src/xeq.c     **** 	process_cmdline();
 13404              		.loc 1 1335 6 view .LVU3539
 13405              	.LBE2465:
1336:src/xeq.c     **** 	set_lift();
 13406              		.loc 1 1336 2 view .LVU3540
 13407              	.LBB2476:
 13408              	.LBB2466:
 13409              	.LBI2466:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 13410              		.loc 1 1229 6 view .LVU3541
 13411              	.LBB2467:
1230:src/xeq.c     **** 
 13412              		.loc 1 1230 2 view .LVU3542
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13413              		.loc 1 1232 2 view .LVU3543
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13414              		.loc 1 1232 6 is_stmt 0 view .LVU3544
 13415 0012 444D     		ldr	r5, .L1013+4
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13416              		.loc 1 1232 5 view .LVU3545
 13417 0014 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 13418              	.LBE2467:
 13419              	.LBE2466:
 13420              	.LBE2476:
 13421              	.LBB2477:
 13422              	.LBB2460:
 13423              	.LBB2456:
 13424              	.LBB2448:
 13425              	.LBB2443:
 13426 0016 0026     		movs	r6, #0
 13427              	.LBE2443:
 13428              	.LBE2448:
 13429              	.LBE2456:
 13430              	.LBE2460:
 13431              	.LBE2477:
 13432              	.LBB2478:
 13433              	.LBB2471:
 13434              	.LBB2468:
 13435 0018 002B     		cmp	r3, #0
 13436 001a 69D1     		bne	.L1010
 13437              	.LVL971:
 13438              	.L995:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13439              		.loc 1 1232 5 view .LVU3546
 13440              	.LBE2468:
 13441              	.LBE2471:
ARM GAS  /tmp/cccVhVyH.s 			page 395


 13442              	.LBE2478:
1337:src/xeq.c     **** }
 13443              		.loc 1 1337 2 is_stmt 1 view .LVU3547
 13444              	.LBB2479:
 13445              	.LBB2472:
 13446              	.LBI2472:
 767:src/xeq.c     ****     State2.state_lift = 1;
 13447              		.loc 1 767 6 view .LVU3548
 13448              	.LBB2473:
 768:src/xeq.c     **** }
 13449              		.loc 1 768 5 view .LVU3549
 768:src/xeq.c     **** }
 13450              		.loc 1 768 23 is_stmt 0 view .LVU3550
 13451 001c EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 13452 001e 43F04003 		orr	r3, r3, #64
 13453 0022 EB75     		strb	r3, [r5, #23]
 13454              	.LBE2473:
 13455              	.LBE2472:
 13456              	.LBE2479:
1592:src/xeq.c     **** 
 13457              		.loc 1 1592 2 is_stmt 1 view .LVU3551
 13458 0024 0020     		movs	r0, #0
 13459 0026 FFF7FEFF 		bl	get_reg_n
 13460              	.LVL972:
 13461              	.LBB2480:
 13462              	.LBB2481:
 13463              	.LBB2482:
 13464              	.LBB2483:
 13465              	.LBB2484:
1122:src/xeq.c     **** }
 13466              		.loc 1 1122 12 is_stmt 0 view .LVU3552
 13467 002a 2168     		ldr	r1, [r4]
1122:src/xeq.c     **** }
 13468              		.loc 1 1122 24 view .LVU3553
 13469 002c B1F8E827 		ldrh	r2, [r1, #2024]
 13470 0030 44F20103 		movw	r3, #16385
 13471 0034 1340     		ands	r3, r3, r2
 13472              	.LBE2484:
 13473              	.LBE2483:
 13474              	.LBE2482:
 13475              	.LBE2481:
 13476              	.LBI2480:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 13477              		.loc 1 253 14 is_stmt 1 view .LVU3554
 13478              	.LBE2480:
 254:src/xeq.c     **** }
 13479              		.loc 1 254 2 view .LVU3555
 13480              	.LVL973:
 13481              	.LBB2499:
 13482              	.LBB2495:
 13483              	.LBI2481:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 13484              		.loc 1 241 14 view .LVU3556
 13485              	.LBB2491:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 13486              		.loc 1 242 2 view .LVU3557
 13487              	.LBB2486:
ARM GAS  /tmp/cccVhVyH.s 			page 396


 13488              	.LBI2483:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13489              		.loc 1 1121 5 view .LVU3558
 13490              	.LBB2485:
1122:src/xeq.c     **** }
 13491              		.loc 1 1122 2 view .LVU3559
 13492              	.LBE2485:
 13493              	.LBE2486:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 13494              		.loc 1 242 5 is_stmt 0 view .LVU3560
 13495 0036 B3F5804F 		cmp	r3, #16384
 13496              	.LBB2487:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13497              		.loc 1 243 3 is_stmt 1 view .LVU3561
 244:src/xeq.c     **** 	}
 13498              		.loc 1 244 3 view .LVU3562
 13499              	.LVL974:
 244:src/xeq.c     **** 	}
 13500              		.loc 1 244 3 is_stmt 0 view .LVU3563
 13501              	.LBE2487:
 13502              	.LBE2491:
 13503              	.LBE2495:
 13504              	.LBE2499:
 13505              	.LBB2500:
 13506              	.LBI2500:
1521:src/xeq.c     **** #if 0
 13507              		.loc 1 1521 6 is_stmt 1 view .LVU3564
 13508              	.LBB2501:
1536:src/xeq.c     **** #endif
 13509              		.loc 1 1536 2 view .LVU3565
 13510              	.LBB2502:
 13511              	.LBI2502:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13512              		.loc 1 1121 5 view .LVU3566
 13513              	.LBB2503:
1122:src/xeq.c     **** }
 13514              		.loc 1 1122 2 view .LVU3567
 13515              	.LBE2503:
 13516              	.LBE2502:
 13517              	.LBE2501:
 13518              	.LBE2500:
 13519              	.LBB2511:
 13520              	.LBB2496:
 13521              	.LBB2492:
 13522              	.LBB2488:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13523              		.loc 1 243 24 is_stmt 0 view .LVU3568
 13524 003a 91F8CF27 		ldrb	r2, [r1, #1999]	@ zero_extendqisi2
 13525              	.LBE2488:
 13526              	.LBE2492:
 13527              	.LBE2496:
 13528              	.LBE2511:
 13529              	.LBB2512:
 13530              	.LBB2508:
 13531              	.LBB2506:
 13532              	.LBB2504:
1122:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 397


 13533              		.loc 1 1122 24 view .LVU3569
 13534 003e A3F58043 		sub	r3, r3, #16384
 13535 0042 B3FA83F3 		clz	r3, r3
 13536              	.LBE2504:
 13537              	.LBE2506:
 13538              	.LBE2508:
 13539              	.LBE2512:
 13540              	.LBB2513:
 13541              	.LBB2497:
 13542              	.LBB2493:
 13543              	.LBB2489:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13544              		.loc 1 243 13 view .LVU3570
 13545 0046 08BF     		it	eq
 13546 0048 0C3A     		subeq	r2, r2, #12
 13547              	.LBE2489:
 13548              	.LBE2493:
 13549              	.LBE2497:
 13550              	.LBE2513:
 13551              	.LBB2514:
 13552              	.LBB2509:
 13553              	.LBB2507:
 13554              	.LBB2505:
1122:src/xeq.c     **** }
 13555              		.loc 1 1122 24 view .LVU3571
 13556 004a 4FEA5313 		lsr	r3, r3, #5
 13557              	.LBE2505:
 13558              	.LBE2507:
 13559              	.LBE2509:
 13560              	.LBE2514:
 13561              	.LBB2515:
 13562              	.LBB2498:
 13563              	.LBB2494:
 13564              	.LBB2490:
 244:src/xeq.c     **** 	}
 13565              		.loc 1 244 67 view .LVU3572
 13566 004e 08BF     		it	eq
 13567 0050 5210     		asreq	r2, r2, #1
 13568              	.LBE2490:
 13569              	.LBE2494:
 13570              	.LBE2498:
 13571              	.LBE2515:
 13572              	.LBB2516:
 13573              	.LBB2510:
1536:src/xeq.c     **** #endif
 13574              		.loc 1 1536 24 view .LVU3573
 13575 0052 0333     		adds	r3, r3, #3
1536:src/xeq.c     **** #endif
 13576              		.loc 1 1536 2 view .LVU3574
 13577 0054 9A40     		lsls	r2, r2, r3
 13578 0056 0021     		movs	r1, #0
 13579 0058 FFF7FEFF 		bl	xset
 13580              	.LVL975:
1536:src/xeq.c     **** #endif
 13581              		.loc 1 1536 2 view .LVU3575
 13582              	.LBE2510:
 13583              	.LBE2516:
ARM GAS  /tmp/cccVhVyH.s 			page 398


1595:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
 13584              		.loc 1 1595 2 is_stmt 1 view .LVU3576
 13585              	.LBB2517:
 13586              	.LBI2517:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 13587              		.loc 1 712 5 view .LVU3577
 13588              	.LBB2518:
 713:src/xeq.c     **** 		return 4;
 13589              		.loc 1 713 2 view .LVU3578
 713:src/xeq.c     **** 		return 4;
 13590              		.loc 1 713 8 is_stmt 0 view .LVU3579
 13591 005c 2368     		ldr	r3, [r4]
 713:src/xeq.c     **** 		return 4;
 13592              		.loc 1 713 6 view .LVU3580
 13593 005e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 13594              		.loc 1 713 5 view .LVU3581
 13595 0062 1207     		lsls	r2, r2, #28
 13596 0064 1CD5     		bpl	.L998
 13597              	.LBB2519:
 13598              	.LBI2519:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 13599              		.loc 1 185 5 is_stmt 1 view .LVU3582
 13600              	.LBB2520:
 186:src/xeq.c     **** }
 13601              		.loc 1 186 2 view .LVU3583
 186:src/xeq.c     **** }
 13602              		.loc 1 186 9 is_stmt 0 view .LVU3584
 13603 0066 B3F8E037 		ldrh	r3, [r3, #2016]
 13604              	.LBE2520:
 13605              	.LBE2519:
 713:src/xeq.c     **** 		return 4;
 13606              		.loc 1 713 27 view .LVU3585
 13607 006a 9B0B     		lsrs	r3, r3, #14
 13608 006c 032B     		cmp	r3, #3
 13609 006e 12D0     		beq	.L1011
 13610              	.L999:
 13611              	.LBE2518:
 13612              	.LBE2517:
1599:src/xeq.c     **** 
 13613              		.loc 1 1599 2 is_stmt 1 view .LVU3586
 13614 0070 6E20     		movs	r0, #110
 13615 0072 FFF7FEFF 		bl	get_reg_n
 13616              	.LVL976:
 13617              	.LBB2522:
 13618              	.LBI2522:
1521:src/xeq.c     **** #if 0
 13619              		.loc 1 1521 6 view .LVU3587
 13620              	.LBB2523:
1536:src/xeq.c     **** #endif
 13621              		.loc 1 1536 2 view .LVU3588
 13622              	.LBB2524:
 13623              	.LBI2524:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13624              		.loc 1 1121 5 view .LVU3589
 13625              	.LBB2525:
1122:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 399


 13626              		.loc 1 1122 2 view .LVU3590
1122:src/xeq.c     **** }
 13627              		.loc 1 1122 24 is_stmt 0 view .LVU3591
 13628 0076 2368     		ldr	r3, [r4]
 13629 0078 B3F8E827 		ldrh	r2, [r3, #2024]
 13630 007c 44F20105 		movw	r5, #16385
 13631 0080 2A40     		ands	r2, r2, r5
 13632              	.LBE2525:
 13633              	.LBE2524:
1536:src/xeq.c     **** #endif
 13634              		.loc 1 1536 2 view .LVU3592
 13635 0082 B2F5804F 		cmp	r2, #16384
 13636 0086 0CBF     		ite	eq
 13637 0088 2022     		moveq	r2, #32
 13638 008a 1022     		movne	r2, #16
 13639 008c 0021     		movs	r1, #0
 13640 008e FFF7FEFF 		bl	xset
 13641              	.LVL977:
1536:src/xeq.c     **** #endif
 13642              		.loc 1 1536 2 view .LVU3593
 13643              	.LBE2523:
 13644              	.LBE2522:
1602:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 13645              		.loc 1 1602 2 is_stmt 1 view .LVU3594
1602:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 13646              		.loc 1 1602 5 is_stmt 0 view .LVU3595
 13647 0092 86BB     		cbnz	r6, .L1012
1604:src/xeq.c     **** 
 13648              		.loc 1 1604 1 view .LVU3596
 13649 0094 70BD     		pop	{r4, r5, r6, pc}
 13650              	.L1011:
 13651              	.LBB2526:
 13652              	.LBB2521:
 713:src/xeq.c     **** 		return 4;
 13653              		.loc 1 713 44 view .LVU3597
 13654 0096 244B     		ldr	r3, .L1013+8
 713:src/xeq.c     **** 		return 4;
 13655              		.loc 1 713 41 view .LVU3598
 13656 0098 93F90130 		ldrsb	r3, [r3, #1]
 13657 009c 002B     		cmp	r3, #0
 13658 009e E7DB     		blt	.L999
 13659              	.L998:
 714:src/xeq.c     **** 	return 8;
 13660              		.loc 1 714 3 is_stmt 1 view .LVU3599
 13661              	.LBE2521:
 13662              	.LBE2526:
1596:src/xeq.c     **** 
 13663              		.loc 1 1596 3 view .LVU3600
 13664 00a0 6820     		movs	r0, #104
 13665 00a2 FFF7FEFF 		bl	get_reg_n
 13666              	.LVL978:
 13667              	.LBB2527:
 13668              	.LBI2527:
1521:src/xeq.c     **** #if 0
 13669              		.loc 1 1521 6 view .LVU3601
 13670              	.LBB2528:
1536:src/xeq.c     **** #endif
ARM GAS  /tmp/cccVhVyH.s 			page 400


 13671              		.loc 1 1536 2 view .LVU3602
 13672              	.LBB2529:
 13673              	.LBI2529:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13674              		.loc 1 1121 5 view .LVU3603
 13675              	.LBB2530:
1122:src/xeq.c     **** }
 13676              		.loc 1 1122 2 view .LVU3604
1122:src/xeq.c     **** }
 13677              		.loc 1 1122 24 is_stmt 0 view .LVU3605
 13678 00a6 2368     		ldr	r3, [r4]
 13679 00a8 B3F8E837 		ldrh	r3, [r3, #2024]
 13680 00ac 44F20102 		movw	r2, #16385
 13681 00b0 1A40     		ands	r2, r2, r3
 13682              	.LBE2530:
 13683              	.LBE2529:
1536:src/xeq.c     **** #endif
 13684              		.loc 1 1536 2 view .LVU3606
 13685 00b2 B2F5804F 		cmp	r2, #16384
 13686 00b6 0CBF     		ite	eq
 13687 00b8 4022     		moveq	r2, #64
 13688 00ba 2022     		movne	r2, #32
 13689 00bc 0021     		movs	r1, #0
 13690 00be FFF7FEFF 		bl	xset
 13691              	.LVL979:
1538:src/xeq.c     **** 
 13692              		.loc 1 1538 1 view .LVU3607
 13693 00c2 D5E7     		b	.L999
 13694              	.LVL980:
 13695              	.L1009:
1538:src/xeq.c     **** 
 13696              		.loc 1 1538 1 view .LVU3608
 13697              	.LBE2528:
 13698              	.LBE2527:
 13699              	.LBB2531:
 13700              	.LBB2461:
 13701              	.LBB2457:
 13702              	.LBB2449:
 13703              	.LBB2444:
 218:src/xeq.c     **** }
 13704              		.loc 1 218 25 view .LVU3609
 13705 00c4 1948     		ldr	r0, .L1013+12
 13706              	.LVL981:
 218:src/xeq.c     **** }
 13707              		.loc 1 218 25 view .LVU3610
 13708              	.LBE2444:
 13709              	.LBE2449:
 13710              	.LBB2450:
 13711              	.LBB2438:
1122:src/xeq.c     **** }
 13712              		.loc 1 1122 24 view .LVU3611
 13713 00c6 B2F8E817 		ldrh	r1, [r2, #2024]
 13714              	.LBE2438:
 13715              	.LBE2450:
 13716              	.LBB2451:
 13717              	.LBB2445:
 218:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 401


 13718              		.loc 1 218 25 view .LVU3612
 13719 00ca 0268     		ldr	r2, [r0]
 13720              	.LVL982:
 218:src/xeq.c     **** }
 13721              		.loc 1 218 25 view .LVU3613
 13722              	.LBE2445:
 13723              	.LBE2451:
 13724              	.LBE2457:
 13725              	.LBE2461:
 13726              	.LBE2531:
 13727              	.LBB2532:
 13728              	.LBB2474:
 13729              	.LBB2469:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13730              		.loc 1 1232 6 view .LVU3614
 13731 00cc 154D     		ldr	r5, .L1013+4
 13732              	.LBE2469:
 13733              	.LBE2474:
 13734              	.LBE2532:
 13735              	.LBB2533:
 13736              	.LBB2462:
 13737              	.LBB2458:
 13738              	.LBB2452:
 13739              	.LBB2446:
 218:src/xeq.c     **** }
 13740              		.loc 1 218 57 view .LVU3615
 13741 00ce 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 13742              	.LBE2446:
 13743              	.LBE2452:
 13744              	.LBB2453:
 13745              	.LBB2439:
1122:src/xeq.c     **** }
 13746              		.loc 1 1122 24 view .LVU3616
 13747 00d2 44F20106 		movw	r6, #16385
 13748              	.LBE2439:
 13749              	.LBE2453:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13750              		.loc 1 226 73 view .LVU3617
 13751 00d6 0E40     		ands	r6, r6, r1
 13752 00d8 A6F58043 		sub	r3, r6, #16384
 13753 00dc B3FA83F3 		clz	r3, r3
 13754 00e0 5B09     		lsrs	r3, r3, #5
 13755 00e2 0233     		adds	r3, r3, #2
 13756              	.LBB2454:
 13757              	.LBB2447:
 218:src/xeq.c     **** }
 13758              		.loc 1 218 57 view .LVU3618
 13759 00e4 C2F30B06 		ubfx	r6, r2, #0, #12
 13760 00e8 1E41     		asrs	r6, r6, r3
 13761              	.LVL983:
 218:src/xeq.c     **** }
 13762              		.loc 1 218 57 view .LVU3619
 13763              	.LBE2447:
 13764              	.LBE2454:
 13765              	.LBE2458:
 13766              	.LBE2462:
 13767              	.LBE2533:
ARM GAS  /tmp/cccVhVyH.s 			page 402


1589:src/xeq.c     **** 
 13768              		.loc 1 1589 2 is_stmt 1 view .LVU3620
 13769              	.LBB2534:
1335:src/xeq.c     **** 	process_cmdline();
 13770              		.loc 1 1335 6 view .LVU3621
 13771              	.LBE2534:
1336:src/xeq.c     **** 	set_lift();
 13772              		.loc 1 1336 2 view .LVU3622
 13773              	.LBB2535:
 13774              	.LBB2475:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 13775              		.loc 1 1229 6 view .LVU3623
 13776              	.LBB2470:
1230:src/xeq.c     **** 
 13777              		.loc 1 1230 2 view .LVU3624
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13778              		.loc 1 1232 2 view .LVU3625
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13779              		.loc 1 1232 5 is_stmt 0 view .LVU3626
 13780 00ea 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 13781 00ec 002B     		cmp	r3, #0
 13782 00ee 95D0     		beq	.L995
 13783              	.L1010:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13784              		.loc 1 1232 5 view .LVU3627
 13785 00f0 FFF7FEFF 		bl	process_cmdline.part.0
 13786              	.LVL984:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13787              		.loc 1 1232 5 view .LVU3628
 13788 00f4 92E7     		b	.L995
 13789              	.L1012:
 13790              	.LBE2470:
 13791              	.LBE2475:
 13792              	.LBE2535:
1603:src/xeq.c     **** }
 13793              		.loc 1 1603 3 is_stmt 1 view .LVU3629
 13794 00f6 7020     		movs	r0, #112
 13795 00f8 FFF7FEFF 		bl	get_reg_n
 13796              	.LVL985:
 13797              	.LBB2536:
 13798              	.LBI2536:
1521:src/xeq.c     **** #if 0
 13799              		.loc 1 1521 6 view .LVU3630
 13800              	.LBB2537:
1536:src/xeq.c     **** #endif
 13801              		.loc 1 1536 2 view .LVU3631
 13802              	.LBB2538:
 13803              	.LBI2538:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13804              		.loc 1 1121 5 view .LVU3632
 13805              	.LBB2539:
1122:src/xeq.c     **** }
 13806              		.loc 1 1122 2 view .LVU3633
1122:src/xeq.c     **** }
 13807              		.loc 1 1122 24 is_stmt 0 view .LVU3634
 13808 00fc 2368     		ldr	r3, [r4]
 13809 00fe B3F8E827 		ldrh	r2, [r3, #2024]
ARM GAS  /tmp/cccVhVyH.s 			page 403


 13810 0102 2A40     		ands	r2, r2, r5
 13811 0104 A2F58042 		sub	r2, r2, #16384
 13812 0108 B2FA82F2 		clz	r2, r2
 13813 010c 5209     		lsrs	r2, r2, #5
 13814              	.LBE2539:
 13815              	.LBE2538:
1536:src/xeq.c     **** #endif
 13816              		.loc 1 1536 24 view .LVU3635
 13817 010e 0332     		adds	r2, r2, #3
1536:src/xeq.c     **** #endif
 13818              		.loc 1 1536 2 view .LVU3636
 13819 0110 06FA02F2 		lsl	r2, r6, r2
 13820 0114 0021     		movs	r1, #0
 13821              	.LBE2537:
 13822              	.LBE2536:
1604:src/xeq.c     **** 
 13823              		.loc 1 1604 1 view .LVU3637
 13824 0116 BDE87040 		pop	{r4, r5, r6, lr}
 13825              		.cfi_restore 14
 13826              		.cfi_restore 6
 13827              		.cfi_restore 5
 13828              		.cfi_restore 4
 13829              		.cfi_def_cfa_offset 0
 13830              	.LBB2541:
 13831              	.LBB2540:
1536:src/xeq.c     **** #endif
 13832              		.loc 1 1536 2 view .LVU3638
 13833 011a FFF7FEBF 		b	xset
 13834              	.LVL986:
 13835              	.L1014:
1536:src/xeq.c     **** #endif
 13836              		.loc 1 1536 2 view .LVU3639
 13837 011e 00BF     		.align	2
 13838              	.L1013:
 13839 0120 00000000 		.word	main_ram
 13840 0124 00000000 		.word	StateWhileOn
 13841 0128 00000000 		.word	XromParams
 13842 012c 00000000 		.word	RetStk
 13843              	.LBE2540:
 13844              	.LBE2541:
 13845              		.cfi_endproc
 13846              	.LFE111:
 13848              		.section	.text.clrretstk,"ax",%progbits
 13849              		.align	1
 13850              		.p2align 2,,3
 13851              		.global	clrretstk
 13852              		.syntax unified
 13853              		.thumb
 13854              		.thumb_func
 13855              		.fpu fpv4-sp-d16
 13857              	clrretstk:
 13858              	.LFB112:
1609:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 13859              		.loc 1 1609 22 is_stmt 1 view -0
 13860              		.cfi_startproc
 13861              		@ args = 0, pretend = 0, frame = 0
 13862              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cccVhVyH.s 			page 404


 13863              		@ link register save eliminated.
1610:src/xeq.c     **** }
 13864              		.loc 1 1610 2 view .LVU3641
1610:src/xeq.c     **** }
 13865              		.loc 1 1610 14 is_stmt 0 view .LVU3642
 13866 0000 054B     		ldr	r3, .L1016
 13867 0002 1B68     		ldr	r3, [r3]
1610:src/xeq.c     **** }
 13868              		.loc 1 1610 24 view .LVU3643
 13869 0004 B3F8DE27 		ldrh	r2, [r3, #2014]
1610:src/xeq.c     **** }
 13870              		.loc 1 1610 12 view .LVU3644
 13871 0008 0021     		movs	r1, #0
1610:src/xeq.c     **** }
 13872              		.loc 1 1610 24 view .LVU3645
 13873 000a 6FF34F12 		bfc	r2, #5, #11
 13874 000e A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
1610:src/xeq.c     **** }
 13875              		.loc 1 1610 12 view .LVU3646
 13876 0012 A3F8E217 		strh	r1, [r3, #2018]	@ movhi
1611:src/xeq.c     **** 
 13877              		.loc 1 1611 1 view .LVU3647
 13878 0016 7047     		bx	lr
 13879              	.L1017:
 13880              		.align	2
 13881              	.L1016:
 13882 0018 00000000 		.word	main_ram
 13883              		.cfi_endproc
 13884              	.LFE112:
 13886              		.section	.text.clrretstk_pc,"ax",%progbits
 13887              		.align	1
 13888              		.p2align 2,,3
 13889              		.global	clrretstk_pc
 13890              		.syntax unified
 13891              		.thumb
 13892              		.thumb_func
 13893              		.fpu fpv4-sp-d16
 13895              	clrretstk_pc:
 13896              	.LFB113:
1613:src/xeq.c     **** 	clrretstk();
 13897              		.loc 1 1613 25 is_stmt 1 view -0
 13898              		.cfi_startproc
 13899              		@ args = 0, pretend = 0, frame = 0
 13900              		@ frame_needed = 0, uses_anonymous_args = 0
1614:src/xeq.c     **** 	raw_set_pc(0);
 13901              		.loc 1 1614 2 view .LVU3649
 13902              	.LBB2542:
 13903              	.LBI2542:
1609:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 13904              		.loc 1 1609 6 view .LVU3650
 13905              	.LBB2543:
1610:src/xeq.c     **** }
 13906              		.loc 1 1610 2 view .LVU3651
 13907              	.LBE2543:
 13908              	.LBE2542:
1613:src/xeq.c     **** 	clrretstk();
 13909              		.loc 1 1613 25 is_stmt 0 view .LVU3652
ARM GAS  /tmp/cccVhVyH.s 			page 405


 13910 0000 08B5     		push	{r3, lr}
 13911              		.cfi_def_cfa_offset 8
 13912              		.cfi_offset 3, -8
 13913              		.cfi_offset 14, -4
 13914              	.LBB2548:
 13915              	.LBB2544:
1610:src/xeq.c     **** }
 13916              		.loc 1 1610 14 view .LVU3653
 13917 0002 094B     		ldr	r3, .L1020
 13918 0004 1B68     		ldr	r3, [r3]
 13919              	.LBE2544:
 13920              	.LBE2548:
1615:src/xeq.c     **** 	update_program_bounds(1);
 13921              		.loc 1 1615 2 is_stmt 1 view .LVU3654
 13922              	.LVL987:
 13923              	.LBB2549:
 13924              	.LBI2549:
 282:src/xeq.c     **** 	State.pc = pc;
 13925              		.loc 1 282 13 view .LVU3655
 13926              	.LBB2550:
 283:src/xeq.c     **** 	update_program_bounds(0);
 13927              		.loc 1 283 2 view .LVU3656
 13928              	.LBE2550:
 13929              	.LBE2549:
 13930              	.LBB2554:
 13931              	.LBB2545:
1610:src/xeq.c     **** }
 13932              		.loc 1 1610 24 is_stmt 0 view .LVU3657
 13933 0006 B3F8DE27 		ldrh	r2, [r3, #2014]
 13934              	.LBE2545:
 13935              	.LBE2554:
 13936              	.LBB2555:
 13937              	.LBB2551:
 283:src/xeq.c     **** 	update_program_bounds(0);
 13938              		.loc 1 283 11 view .LVU3658
 13939 000a 0020     		movs	r0, #0
 13940              	.LBE2551:
 13941              	.LBE2555:
 13942              	.LBB2556:
 13943              	.LBB2546:
1610:src/xeq.c     **** }
 13944              		.loc 1 1610 24 view .LVU3659
 13945 000c 6FF34F12 		bfc	r2, #5, #11
 13946              	.LBE2546:
 13947              	.LBE2556:
 13948              	.LBB2557:
 13949              	.LBB2552:
 283:src/xeq.c     **** 	update_program_bounds(0);
 13950              		.loc 1 283 11 view .LVU3660
 13951 0010 C3F8E007 		str	r0, [r3, #2016]
 284:src/xeq.c     **** }
 13952              		.loc 1 284 2 is_stmt 1 view .LVU3661
 13953              	.LBE2552:
 13954              	.LBE2557:
 13955              	.LBB2558:
 13956              	.LBB2547:
1610:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 406


 13957              		.loc 1 1610 24 is_stmt 0 view .LVU3662
 13958 0014 A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
 13959              	.LBE2547:
 13960              	.LBE2558:
 13961              	.LBB2559:
 13962              	.LBB2553:
 284:src/xeq.c     **** }
 13963              		.loc 1 284 2 view .LVU3663
 13964 0018 FFF7FEFF 		bl	update_program_bounds
 13965              	.LVL988:
 284:src/xeq.c     **** }
 13966              		.loc 1 284 2 view .LVU3664
 13967              	.LBE2553:
 13968              	.LBE2559:
1616:src/xeq.c     **** }
 13969              		.loc 1 1616 2 is_stmt 1 view .LVU3665
1617:src/xeq.c     **** 
 13970              		.loc 1 1617 1 is_stmt 0 view .LVU3666
 13971 001c BDE80840 		pop	{r3, lr}
 13972              		.cfi_restore 14
 13973              		.cfi_restore 3
 13974              		.cfi_def_cfa_offset 0
1616:src/xeq.c     **** }
 13975              		.loc 1 1616 2 view .LVU3667
 13976 0020 0120     		movs	r0, #1
 13977 0022 FFF7FEBF 		b	update_program_bounds
 13978              	.LVL989:
 13979              	.L1021:
 13980 0026 00BF     		.align	2
 13981              	.L1020:
 13982 0028 00000000 		.word	main_ram
 13983              		.cfi_endproc
 13984              	.LFE113:
 13986              		.section	.text.cmdconst,"ax",%progbits
 13987              		.align	1
 13988              		.p2align 2,,3
 13989              		.global	cmdconst
 13990              		.syntax unified
 13991              		.thumb
 13992              		.thumb_func
 13993              		.fpu fpv4-sp-d16
 13995              	cmdconst:
 13996              	.LVL990:
 13997              	.LFB114:
1623:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13998              		.loc 1 1623 47 is_stmt 1 view -0
 13999              		.cfi_startproc
 14000              		@ args = 0, pretend = 0, frame = 0
 14001              		@ frame_needed = 0, uses_anonymous_args = 0
1625:src/xeq.c     **** #else
 14002              		.loc 1 1625 2 view .LVU3669
1623:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 14003              		.loc 1 1623 47 is_stmt 0 view .LVU3670
 14004 0000 70B5     		push	{r4, r5, r6, lr}
 14005              		.cfi_def_cfa_offset 16
 14006              		.cfi_offset 4, -16
 14007              		.cfi_offset 5, -12
ARM GAS  /tmp/cccVhVyH.s 			page 407


 14008              		.cfi_offset 6, -8
 14009              		.cfi_offset 14, -4
1625:src/xeq.c     **** #else
 14010              		.loc 1 1625 5 view .LVU3671
 14011 0002 01F0FD03 		and	r3, r1, #253
 14012 0006 882B     		cmp	r3, #136
1623:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 14013              		.loc 1 1623 47 view .LVU3672
 14014 0008 82B0     		sub	sp, sp, #8
 14015              		.cfi_def_cfa_offset 24
1623:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 14016              		.loc 1 1623 47 view .LVU3673
 14017 000a 0C46     		mov	r4, r1
 14018 000c 0546     		mov	r5, r0
1625:src/xeq.c     **** #else
 14019              		.loc 1 1625 5 view .LVU3674
 14020 000e 1CD0     		beq	.L1023
1625:src/xeq.c     **** #else
 14021              		.loc 1 1625 30 discriminator 1 view .LVU3675
 14022 0010 0129     		cmp	r1, #1
 14023 0012 1AD0     		beq	.L1023
1633:src/xeq.c     **** 
 14024              		.loc 1 1633 3 is_stmt 1 view .LVU3676
 14025              	.LBB2581:
 14026              	.LBI2581:
 747:src/xeq.c     **** 	if (get_lift())
 14027              		.loc 1 747 6 view .LVU3677
 14028              	.LBB2582:
 748:src/xeq.c     **** 		lift();
 14029              		.loc 1 748 2 view .LVU3678
 14030              	.LBB2583:
 14031              	.LBI2583:
 743:src/xeq.c     **** 	return State2.state_lift;
 14032              		.loc 1 743 12 view .LVU3679
 14033              	.LBB2584:
 744:src/xeq.c     **** }
 14034              		.loc 1 744 2 view .LVU3680
 744:src/xeq.c     **** }
 14035              		.loc 1 744 15 is_stmt 0 view .LVU3681
 14036 0014 2B4B     		ldr	r3, .L1040
 14037 0016 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 14038              	.LBE2584:
 14039              	.LBE2583:
 748:src/xeq.c     **** 		lift();
 14040              		.loc 1 748 5 view .LVU3682
 14041 0018 5906     		lsls	r1, r3, #25
 14042              	.LVL991:
 748:src/xeq.c     **** 		lift();
 14043              		.loc 1 748 5 view .LVU3683
 14044 001a 4FD4     		bmi	.L1038
 14045              	.LVL992:
 14046              	.L1025:
 748:src/xeq.c     **** 		lift();
 14047              		.loc 1 748 5 view .LVU3684
 14048              	.LBE2582:
 14049              	.LBE2581:
1635:src/xeq.c     **** 		setX_int_sgn(arg, 0);
ARM GAS  /tmp/cccVhVyH.s 			page 408


 14050              		.loc 1 1635 2 is_stmt 1 view .LVU3685
1635:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14051              		.loc 1 1635 24 is_stmt 0 view .LVU3686
 14052 001c 7934     		adds	r4, r4, #121
1635:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14053              		.loc 1 1635 5 view .LVU3687
 14054 001e E4B2     		uxtb	r4, r4
 14055 0020 012C     		cmp	r4, #1
 14056 0022 23D9     		bls	.L1039
 14057              	.L1026:
1637:src/xeq.c     **** 		bad_mode_error();
 14058              		.loc 1 1637 7 is_stmt 1 view .LVU3688
1637:src/xeq.c     **** 		bad_mode_error();
 14059              		.loc 1 1637 11 is_stmt 0 view .LVU3689
 14060 0024 284C     		ldr	r4, .L1040+4
 14061 0026 2368     		ldr	r3, [r4]
 14062 0028 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1637:src/xeq.c     **** 		bad_mode_error();
 14063              		.loc 1 1637 10 view .LVU3690
 14064 002c D207     		lsls	r2, r2, #31
 14065 002e 26D5     		bpl	.L1028
1638:src/xeq.c     **** 	else 
 14066              		.loc 1 1638 3 is_stmt 1 view .LVU3691
 14067              	.LBB2586:
 14068              	.LBI2586:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14069              		.loc 1 575 6 view .LVU3692
 14070              	.LBE2586:
 576:src/xeq.c     **** }
 14071              		.loc 1 576 2 view .LVU3693
 14072              	.LVL993:
 14073              	.LBB2591:
 14074              	.LBB2587:
 14075              	.LBI2587:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14076              		.loc 1 546 5 view .LVU3694
 14077              	.LBB2588:
 547:src/xeq.c     **** 		Error = e;
 14078              		.loc 1 547 2 view .LVU3695
 547:src/xeq.c     **** 		Error = e;
 14079              		.loc 1 547 12 is_stmt 0 view .LVU3696
 14080 0030 264A     		ldr	r2, .L1040+8
 547:src/xeq.c     **** 		Error = e;
 14081              		.loc 1 547 5 view .LVU3697
 14082 0032 1168     		ldr	r1, [r2]
 14083 0034 09B9     		cbnz	r1, .L1027
 14084              	.LVL994:
 14085              	.LBB2589:
 14086              	.LBI2589:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14087              		.loc 1 546 5 is_stmt 1 view .LVU3698
 14088              	.LBB2590:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14089              		.loc 1 548 3 view .LVU3699
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14090              		.loc 1 548 9 is_stmt 0 view .LVU3700
 14091 0036 0D21     		movs	r1, #13
ARM GAS  /tmp/cccVhVyH.s 			page 409


 14092 0038 1160     		str	r1, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14093              		.loc 1 549 3 is_stmt 1 view .LVU3701
 14094              	.LVL995:
 14095              	.L1027:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14096              		.loc 1 549 3 is_stmt 0 view .LVU3702
 14097              	.LBE2590:
 14098              	.LBE2589:
 14099              	.LBE2588:
 14100              	.LBE2587:
 14101              	.LBE2591:
1642:src/xeq.c     **** #endif
 14102              		.loc 1 1642 2 is_stmt 1 view .LVU3703
 14103 003a 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
 14104 003e 42F01002 		orr	r2, r2, #16
 14105 0042 83F8DE27 		strb	r2, [r3, #2014]
1644:src/xeq.c     **** 
 14106              		.loc 1 1644 1 is_stmt 0 view .LVU3704
 14107 0046 02B0     		add	sp, sp, #8
 14108              		.cfi_remember_state
 14109              		.cfi_def_cfa_offset 16
 14110              		@ sp needed
 14111 0048 70BD     		pop	{r4, r5, r6, pc}
 14112              	.LVL996:
 14113              	.L1023:
 14114              		.cfi_restore_state
1629:src/xeq.c     **** 		zero_Y();
 14115              		.loc 1 1629 3 is_stmt 1 view .LVU3705
 14116 004a FFF7FEFF 		bl	lift2_if_enabled
 14117              	.LVL997:
1630:src/xeq.c     **** 		set_was_complex();
 14118              		.loc 1 1630 3 view .LVU3706
 14119              	.LBB2592:
 14120              	.LBI2592:
1557:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 14121              		.loc 1 1557 6 view .LVU3707
 14122              	.LBB2593:
1558:src/xeq.c     **** }
 14123              		.loc 1 1558 2 view .LVU3708
 14124 004e 6520     		movs	r0, #101
 14125 0050 FFF7FEFF 		bl	get_reg_n
 14126              	.LVL998:
 14127 0054 FFF7FEFF 		bl	set_zero
 14128              	.LVL999:
 14129              	.LBE2593:
 14130              	.LBE2592:
1631:src/xeq.c     **** 	} else
 14131              		.loc 1 1631 3 view .LVU3709
 14132              	.LBB2594:
 14133              	.LBI2594:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 14134              		.loc 1 539 13 view .LVU3710
 14135              	.LBB2595:
 540:src/xeq.c     **** }
 14136              		.loc 1 540 2 view .LVU3711
 540:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 410


 14137              		.loc 1 540 20 is_stmt 0 view .LVU3712
 14138 0058 1A4B     		ldr	r3, .L1040
 14139              	.LBE2595:
 14140              	.LBE2594:
1635:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14141              		.loc 1 1635 24 view .LVU3713
 14142 005a 7934     		adds	r4, r4, #121
 14143              	.LBB2599:
 14144              	.LBB2596:
 540:src/xeq.c     **** }
 14145              		.loc 1 540 20 view .LVU3714
 14146 005c 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14147 005e 0121     		movs	r1, #1
 14148              	.LBE2596:
 14149              	.LBE2599:
1635:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14150              		.loc 1 1635 5 view .LVU3715
 14151 0060 E4B2     		uxtb	r4, r4
 14152              	.LBB2600:
 14153              	.LBB2597:
 540:src/xeq.c     **** }
 14154              		.loc 1 540 20 view .LVU3716
 14155 0062 61F38712 		bfi	r2, r1, #6, #2
 14156              	.LBE2597:
 14157              	.LBE2600:
1635:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14158              		.loc 1 1635 5 view .LVU3717
 14159 0066 012C     		cmp	r4, #1
 14160              	.LBB2601:
 14161              	.LBB2598:
 540:src/xeq.c     **** }
 14162              		.loc 1 540 20 view .LVU3718
 14163 0068 1A75     		strb	r2, [r3, #20]
 14164              	.LBE2598:
 14165              	.LBE2601:
1635:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14166              		.loc 1 1635 2 is_stmt 1 view .LVU3719
1635:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14167              		.loc 1 1635 5 is_stmt 0 view .LVU3720
 14168 006a DBD8     		bhi	.L1026
 14169              	.L1039:
1636:src/xeq.c     **** 	else if (is_intmode())
 14170              		.loc 1 1636 3 is_stmt 1 view .LVU3721
 14171              	.LVL1000:
 14172              	.LBB2602:
 14173              	.LBI2602:
1512:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14174              		.loc 1 1512 6 view .LVU3722
 14175              	.LBB2603:
1513:src/xeq.c     **** }
 14176              		.loc 1 1513 2 view .LVU3723
 14177              	.LBE2603:
 14178              	.LBE2602:
1636:src/xeq.c     **** 	else if (is_intmode())
 14179              		.loc 1 1636 3 is_stmt 0 view .LVU3724
 14180 006c 0023     		movs	r3, #0
 14181              	.LBB2605:
ARM GAS  /tmp/cccVhVyH.s 			page 411


 14182              	.LBB2604:
1513:src/xeq.c     **** }
 14183              		.loc 1 1513 2 view .LVU3725
 14184 006e 0093     		str	r3, [sp]
 14185 0070 2A46     		mov	r2, r5
 14186 0072 6420     		movs	r0, #100
 14187 0074 FFF7FEFF 		bl	set_reg_n_int_sgn
 14188              	.LVL1001:
 14189 0078 134B     		ldr	r3, .L1040+4
 14190 007a 1B68     		ldr	r3, [r3]
1514:src/xeq.c     **** 
 14191              		.loc 1 1514 1 view .LVU3726
 14192 007c DDE7     		b	.L1027
 14193              	.LVL1002:
 14194              	.L1028:
1514:src/xeq.c     **** 
 14195              		.loc 1 1514 1 view .LVU3727
 14196              	.LBE2604:
 14197              	.LBE2605:
1640:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14198              		.loc 1 1640 3 is_stmt 1 view .LVU3728
 14199              	.LBB2606:
 14200              	.LBB2607:
1122:src/xeq.c     **** }
 14201              		.loc 1 1122 24 is_stmt 0 view .LVU3729
 14202 007e B3F8E817 		ldrh	r1, [r3, #2024]
 14203              	.LBE2607:
 14204              	.LBE2606:
1640:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14205              		.loc 1 1640 3 view .LVU3730
 14206 0082 134B     		ldr	r3, .L1040+12
 14207              	.LBB2610:
 14208              	.LBB2608:
1122:src/xeq.c     **** }
 14209              		.loc 1 1122 24 view .LVU3731
 14210 0084 44F20106 		movw	r6, #16385
 14211 0088 3140     		ands	r1, r1, r6
 14212              	.LBE2608:
 14213              	.LBE2610:
1640:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14214              		.loc 1 1640 22 view .LVU3732
 14215 008a A1F58041 		sub	r1, r1, #16384
 14216 008e B1FA81F1 		clz	r1, r1
 14217 0092 2846     		mov	r0, r5
 14218 0094 4909     		lsrs	r1, r1, #5
1640:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14219              		.loc 1 1640 3 view .LVU3733
 14220 0096 1D68     		ldr	r5, [r3]
 14221              	.LVL1003:
 14222              	.LBB2611:
 14223              	.LBI2606:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14224              		.loc 1 1121 5 is_stmt 1 view .LVU3734
 14225              	.LBB2609:
1122:src/xeq.c     **** }
 14226              		.loc 1 1122 2 view .LVU3735
 14227              	.LBE2609:
ARM GAS  /tmp/cccVhVyH.s 			page 412


 14228              	.LBE2611:
1640:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14229              		.loc 1 1640 22 is_stmt 0 view .LVU3736
 14230 0098 FFF7FEFF 		bl	get_const
 14231              	.LVL1004:
 14232              	.LBB2612:
 14233              	.LBB2613:
 14234              	.LBB2614:
 14235              	.LBB2615:
1122:src/xeq.c     **** }
 14236              		.loc 1 1122 24 view .LVU3737
 14237 009c 2368     		ldr	r3, [r4]
 14238 009e B3F8E837 		ldrh	r3, [r3, #2024]
 14239              	.LBE2615:
 14240              	.LBE2614:
 727:src/xeq.c     **** }
 14241              		.loc 1 727 2 view .LVU3738
 14242 00a2 1E40     		ands	r6, r6, r3
 14243 00a4 B6F5804F 		cmp	r6, #16384
 14244              	.LBE2613:
 14245              	.LBE2612:
1640:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14246              		.loc 1 1640 22 view .LVU3739
 14247 00a8 0146     		mov	r1, r0
 14248              	.LVL1005:
 14249              	.LBB2619:
 14250              	.LBI2612:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14251              		.loc 1 726 6 is_stmt 1 view .LVU3740
 14252              	.LBB2618:
 727:src/xeq.c     **** }
 14253              		.loc 1 727 2 view .LVU3741
 14254              	.LBB2617:
 14255              	.LBI2614:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14256              		.loc 1 1121 5 view .LVU3742
 14257              	.LBB2616:
1122:src/xeq.c     **** }
 14258              		.loc 1 1122 2 view .LVU3743
 14259              	.LBE2616:
 14260              	.LBE2617:
 727:src/xeq.c     **** }
 14261              		.loc 1 727 2 is_stmt 0 view .LVU3744
 14262 00aa 08BF     		it	eq
 14263 00ac 1022     		moveq	r2, #16
 14264 00ae 2846     		mov	r0, r5
 14265              	.LVL1006:
 727:src/xeq.c     **** }
 14266              		.loc 1 727 2 view .LVU3745
 14267 00b0 18BF     		it	ne
 14268 00b2 0822     		movne	r2, #8
 14269 00b4 FFF7FEFF 		bl	xcopy
 14270              	.LVL1007:
 727:src/xeq.c     **** }
 14271              		.loc 1 727 2 view .LVU3746
 14272 00b8 2368     		ldr	r3, [r4]
 728:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 413


 14273              		.loc 1 728 1 view .LVU3747
 14274 00ba BEE7     		b	.L1027
 14275              	.LVL1008:
 14276              	.L1038:
 728:src/xeq.c     **** 
 14277              		.loc 1 728 1 view .LVU3748
 14278              	.LBE2618:
 14279              	.LBE2619:
 14280              	.LBB2620:
 14281              	.LBB2585:
 749:src/xeq.c     **** }
 14282              		.loc 1 749 3 is_stmt 1 view .LVU3749
 14283 00bc FFF7FEFF 		bl	lift
 14284              	.LVL1009:
 749:src/xeq.c     **** }
 14285              		.loc 1 749 3 is_stmt 0 view .LVU3750
 14286 00c0 ACE7     		b	.L1025
 14287              	.L1041:
 14288 00c2 00BF     		.align	2
 14289              	.L1040:
 14290 00c4 00000000 		.word	StateWhileOn
 14291 00c8 00000000 		.word	main_ram
 14292 00cc 00000000 		.word	Error
 14293 00d0 00000000 		.word	StackBase
 14294              	.LBE2585:
 14295              	.LBE2620:
 14296              		.cfi_endproc
 14297              	.LFE114:
 14299              		.section	.text.cmdsto,"ax",%progbits
 14300              		.align	1
 14301              		.p2align 2,,3
 14302              		.global	cmdsto
 14303              		.syntax unified
 14304              		.thumb
 14305              		.thumb_func
 14306              		.fpu fpv4-sp-d16
 14308              	cmdsto:
 14309              	.LVL1010:
 14310              	.LFB117:
1727:src/xeq.c     **** 	if (op == RARG_STO) {
 14311              		.loc 1 1727 45 is_stmt 1 view -0
 14312              		.cfi_startproc
 14313              		@ args = 0, pretend = 0, frame = 48
 14314              		@ frame_needed = 0, uses_anonymous_args = 0
1728:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14315              		.loc 1 1728 2 view .LVU3752
1727:src/xeq.c     **** 	if (op == RARG_STO) {
 14316              		.loc 1 1727 45 is_stmt 0 view .LVU3753
 14317 0000 10B5     		push	{r4, lr}
 14318              		.cfi_def_cfa_offset 8
 14319              		.cfi_offset 4, -8
 14320              		.cfi_offset 14, -4
1728:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14321              		.loc 1 1728 5 view .LVU3754
 14322 0002 0329     		cmp	r1, #3
1727:src/xeq.c     **** 	if (op == RARG_STO) {
 14323              		.loc 1 1727 45 view .LVU3755
ARM GAS  /tmp/cccVhVyH.s 			page 414


 14324 0004 8CB0     		sub	sp, sp, #48
 14325              		.cfi_def_cfa_offset 56
1728:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14326              		.loc 1 1728 5 view .LVU3756
 14327 0006 32D0     		beq	.L1055
1731:src/xeq.c     **** 			long long int r;
 14328              		.loc 1 1731 3 is_stmt 1 view .LVU3757
1731:src/xeq.c     **** 			long long int r;
 14329              		.loc 1 1731 7 is_stmt 0 view .LVU3758
 14330 0008 1B4B     		ldr	r3, .L1056
 14331 000a 1B68     		ldr	r3, [r3]
 14332 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 14333              	.LBB2633:
1734:src/xeq.c     **** 				illegal(op);
 14334              		.loc 1 1734 8 view .LVU3759
 14335 0010 0339     		subs	r1, r1, #3
 14336              	.LVL1011:
1734:src/xeq.c     **** 				illegal(op);
 14337              		.loc 1 1734 8 view .LVU3760
 14338              	.LBE2633:
1731:src/xeq.c     **** 			long long int r;
 14339              		.loc 1 1731 6 view .LVU3761
 14340 0012 13F00103 		ands	r3, r3, #1
 14341 0016 0446     		mov	r4, r0
 14342              	.LBB2641:
1734:src/xeq.c     **** 				illegal(op);
 14343              		.loc 1 1734 8 view .LVU3762
 14344 0018 88B2     		uxth	r0, r1
 14345              	.LVL1012:
1734:src/xeq.c     **** 				illegal(op);
 14346              		.loc 1 1734 8 view .LVU3763
 14347              	.LBE2641:
1731:src/xeq.c     **** 			long long int r;
 14348              		.loc 1 1731 6 view .LVU3764
 14349 001a 18D0     		beq	.L1045
 14350              	.LBB2642:
1732:src/xeq.c     **** 
 14351              		.loc 1 1732 4 is_stmt 1 view .LVU3765
1734:src/xeq.c     **** 				illegal(op);
 14352              		.loc 1 1734 4 view .LVU3766
1734:src/xeq.c     **** 				illegal(op);
 14353              		.loc 1 1734 8 is_stmt 0 view .LVU3767
 14354 001c 0023     		movs	r3, #0
 14355 001e 6A46     		mov	r2, sp
 14356 0020 2146     		mov	r1, r4
 14357 0022 FFF7FEFF 		bl	storcl_intop
 14358              	.LVL1013:
1734:src/xeq.c     **** 				illegal(op);
 14359              		.loc 1 1734 7 view .LVU3768
 14360 0026 20B1     		cbz	r0, .L1046
1735:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14361              		.loc 1 1735 5 is_stmt 1 view .LVU3769
1735:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14362              		.loc 1 1735 5 view .LVU3770
 14363              	.LVL1014:
 14364              	.LBB2634:
 14365              	.LBI2634:
ARM GAS  /tmp/cccVhVyH.s 			page 415


 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14366              		.loc 1 546 5 view .LVU3771
 14367              	.LBB2635:
 547:src/xeq.c     **** 		Error = e;
 14368              		.loc 1 547 2 view .LVU3772
 547:src/xeq.c     **** 		Error = e;
 14369              		.loc 1 547 12 is_stmt 0 view .LVU3773
 14370 0028 144B     		ldr	r3, .L1056+4
 547:src/xeq.c     **** 		Error = e;
 14371              		.loc 1 547 5 view .LVU3774
 14372 002a 1A68     		ldr	r2, [r3]
 14373 002c 0AB9     		cbnz	r2, .L1046
 14374              	.LVL1015:
 14375              	.LBB2636:
 14376              	.LBI2636:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14377              		.loc 1 546 5 is_stmt 1 view .LVU3775
 14378              	.LBB2637:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14379              		.loc 1 548 3 view .LVU3776
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14380              		.loc 1 548 9 is_stmt 0 view .LVU3777
 14381 002e 0322     		movs	r2, #3
 14382 0030 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14383              		.loc 1 549 3 is_stmt 1 view .LVU3778
 14384              	.LVL1016:
 14385              	.L1046:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14386              		.loc 1 549 3 is_stmt 0 view .LVU3779
 14387              	.LBE2637:
 14388              	.LBE2636:
 14389              	.LBE2635:
 14390              	.LBE2634:
1735:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14391              		.loc 1 1735 5 is_stmt 1 discriminator 1 view .LVU3780
1736:src/xeq.c     **** 		} else {
 14392              		.loc 1 1736 4 discriminator 1 view .LVU3781
1736:src/xeq.c     **** 		} else {
 14393              		.loc 1 1736 4 is_stmt 0 discriminator 1 view .LVU3782
 14394 0032 DDE90023 		ldrd	r2, [sp]
 14395              	.LBB2638:
 14396              	.LBB2639:
1426:src/xeq.c     **** }
 14397              		.loc 1 1426 8 discriminator 1 view .LVU3783
 14398 0036 2046     		mov	r0, r4
 14399 0038 CDE90223 		strd	r2, [sp, #8]
 14400              	.LVL1017:
1426:src/xeq.c     **** }
 14401              		.loc 1 1426 8 discriminator 1 view .LVU3784
 14402              	.LBE2639:
 14403              	.LBI2638:
1425:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 14404              		.loc 1 1425 6 is_stmt 1 discriminator 1 view .LVU3785
 14405              	.LBB2640:
1426:src/xeq.c     **** }
 14406              		.loc 1 1426 2 discriminator 1 view .LVU3786
ARM GAS  /tmp/cccVhVyH.s 			page 416


1426:src/xeq.c     **** }
 14407              		.loc 1 1426 8 is_stmt 0 discriminator 1 view .LVU3787
 14408 003c FFF7FEFF 		bl	get_reg_n
 14409              	.LVL1018:
1426:src/xeq.c     **** }
 14410              		.loc 1 1426 2 discriminator 1 view .LVU3788
 14411 0040 0822     		movs	r2, #8
 14412 0042 0DEB0201 		add	r1, sp, r2
 14413 0046 FFF7FEFF 		bl	xcopy
 14414              	.LVL1019:
1426:src/xeq.c     **** }
 14415              		.loc 1 1426 2 discriminator 1 view .LVU3789
 14416              	.LBE2640:
 14417              	.LBE2638:
 14418              	.LBE2642:
1745:src/xeq.c     **** 
 14419              		.loc 1 1745 1 discriminator 1 view .LVU3790
 14420 004a 0CB0     		add	sp, sp, #48
 14421              		.cfi_remember_state
 14422              		.cfi_def_cfa_offset 8
 14423              		@ sp needed
 14424 004c 10BD     		pop	{r4, pc}
 14425              	.LVL1020:
 14426              	.L1045:
 14427              		.cfi_restore_state
 14428              	.LBB2643:
1738:src/xeq.c     **** 
 14429              		.loc 1 1738 4 is_stmt 1 view .LVU3791
1740:src/xeq.c     **** 				illegal(op);
 14430              		.loc 1 1740 4 view .LVU3792
1740:src/xeq.c     **** 				illegal(op);
 14431              		.loc 1 1740 8 is_stmt 0 view .LVU3793
 14432 004e 02AA     		add	r2, sp, #8
 14433 0050 2146     		mov	r1, r4
 14434 0052 FFF7FEFF 		bl	storcl_op
 14435              	.LVL1021:
1740:src/xeq.c     **** 				illegal(op);
 14436              		.loc 1 1740 7 view .LVU3794
 14437 0056 20B1     		cbz	r0, .L1047
1741:src/xeq.c     **** 			setRegister(arg, &r);
 14438              		.loc 1 1741 5 is_stmt 1 view .LVU3795
1741:src/xeq.c     **** 			setRegister(arg, &r);
 14439              		.loc 1 1741 5 view .LVU3796
 14440              	.LVL1022:
 14441              	.LBB2644:
 14442              	.LBI2644:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14443              		.loc 1 546 5 view .LVU3797
 14444              	.LBB2645:
 547:src/xeq.c     **** 		Error = e;
 14445              		.loc 1 547 2 view .LVU3798
 547:src/xeq.c     **** 		Error = e;
 14446              		.loc 1 547 12 is_stmt 0 view .LVU3799
 14447 0058 084B     		ldr	r3, .L1056+4
 547:src/xeq.c     **** 		Error = e;
 14448              		.loc 1 547 5 view .LVU3800
 14449 005a 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/cccVhVyH.s 			page 417


 14450 005c 0AB9     		cbnz	r2, .L1047
 14451              	.LVL1023:
 14452              	.LBB2646:
 14453              	.LBI2646:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14454              		.loc 1 546 5 is_stmt 1 view .LVU3801
 14455              	.LBB2647:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14456              		.loc 1 548 3 view .LVU3802
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14457              		.loc 1 548 9 is_stmt 0 view .LVU3803
 14458 005e 0322     		movs	r2, #3
 14459 0060 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14460              		.loc 1 549 3 is_stmt 1 view .LVU3804
 14461              	.LVL1024:
 14462              	.L1047:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14463              		.loc 1 549 3 is_stmt 0 view .LVU3805
 14464              	.LBE2647:
 14465              	.LBE2646:
 14466              	.LBE2645:
 14467              	.LBE2644:
1741:src/xeq.c     **** 			setRegister(arg, &r);
 14468              		.loc 1 1741 5 is_stmt 1 discriminator 1 view .LVU3806
1742:src/xeq.c     **** 		}
 14469              		.loc 1 1742 4 discriminator 1 view .LVU3807
 14470 0062 02A9     		add	r1, sp, #8
 14471 0064 2046     		mov	r0, r4
 14472 0066 FFF7FEFF 		bl	setRegister
 14473              	.LVL1025:
 14474              	.LBE2643:
1745:src/xeq.c     **** 
 14475              		.loc 1 1745 1 is_stmt 0 discriminator 1 view .LVU3808
 14476 006a 0CB0     		add	sp, sp, #48
 14477              		.cfi_remember_state
 14478              		.cfi_def_cfa_offset 8
 14479              		@ sp needed
 14480 006c 10BD     		pop	{r4, pc}
 14481              	.LVL1026:
 14482              	.L1055:
 14483              		.cfi_restore_state
1729:src/xeq.c     **** 	} else {
 14484              		.loc 1 1729 3 is_stmt 1 view .LVU3809
 14485 006e 6421     		movs	r1, #100
 14486              	.LVL1027:
1729:src/xeq.c     **** 	} else {
 14487              		.loc 1 1729 3 is_stmt 0 view .LVU3810
 14488 0070 FFF7FEFF 		bl	copyreg_n
 14489              	.LVL1028:
1745:src/xeq.c     **** 
 14490              		.loc 1 1745 1 view .LVU3811
 14491 0074 0CB0     		add	sp, sp, #48
 14492              		.cfi_def_cfa_offset 8
 14493              		@ sp needed
 14494 0076 10BD     		pop	{r4, pc}
 14495              	.L1057:
ARM GAS  /tmp/cccVhVyH.s 			page 418


 14496              		.align	2
 14497              	.L1056:
 14498 0078 00000000 		.word	main_ram
 14499 007c 00000000 		.word	Error
 14500              		.cfi_endproc
 14501              	.LFE117:
 14503              		.section	.text.cmdrcl,"ax",%progbits
 14504              		.align	1
 14505              		.p2align 2,,3
 14506              		.global	cmdrcl
 14507              		.syntax unified
 14508              		.thumb
 14509              		.thumb_func
 14510              		.fpu fpv4-sp-d16
 14512              	cmdrcl:
 14513              	.LVL1029:
 14514              	.LFB119:
1774:src/xeq.c     **** 	do_rcl(arg, op);
 14515              		.loc 1 1774 45 is_stmt 1 view -0
 14516              		.cfi_startproc
 14517              		@ args = 0, pretend = 0, frame = 0
 14518              		@ frame_needed = 0, uses_anonymous_args = 0
 14519              		@ link register save eliminated.
1775:src/xeq.c     **** }
 14520              		.loc 1 1775 2 view .LVU3813
 14521 0000 FFF7FEBF 		b	do_rcl
 14522              	.LVL1030:
1775:src/xeq.c     **** }
 14523              		.loc 1 1775 2 is_stmt 0 view .LVU3814
 14524              		.cfi_endproc
 14525              	.LFE119:
 14527              		.section	.text.cmdcsto,"ax",%progbits
 14528              		.align	1
 14529              		.p2align 2,,3
 14530              		.global	cmdcsto
 14531              		.syntax unified
 14532              		.thumb
 14533              		.thumb_func
 14534              		.fpu fpv4-sp-d16
 14536              	cmdcsto:
 14537              	.LVL1031:
 14538              	.LFB121:
1819:src/xeq.c     **** 	decNumber r1, r2;
 14539              		.loc 1 1819 46 is_stmt 1 view -0
 14540              		.cfi_startproc
 14541              		@ args = 0, pretend = 0, frame = 72
 14542              		@ frame_needed = 0, uses_anonymous_args = 0
1820:src/xeq.c     **** 	REGISTER *t1, *t2;
 14543              		.loc 1 1820 2 view .LVU3816
1821:src/xeq.c     **** 
 14544              		.loc 1 1821 2 view .LVU3817
1823:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14545              		.loc 1 1823 2 view .LVU3818
1819:src/xeq.c     **** 	decNumber r1, r2;
 14546              		.loc 1 1819 46 is_stmt 0 view .LVU3819
 14547 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 14548              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cccVhVyH.s 			page 419


 14549              		.cfi_offset 4, -24
 14550              		.cfi_offset 5, -20
 14551              		.cfi_offset 6, -16
 14552              		.cfi_offset 7, -12
 14553              		.cfi_offset 8, -8
 14554              		.cfi_offset 14, -4
 14555 0004 94B0     		sub	sp, sp, #80
 14556              		.cfi_def_cfa_offset 104
1819:src/xeq.c     **** 	decNumber r1, r2;
 14557              		.loc 1 1819 46 view .LVU3820
 14558 0006 0C46     		mov	r4, r1
1824:src/xeq.c     **** 
 14559              		.loc 1 1824 21 view .LVU3821
 14560 0008 461C     		adds	r6, r0, #1
1819:src/xeq.c     **** 	decNumber r1, r2;
 14561              		.loc 1 1819 46 view .LVU3822
 14562 000a 0546     		mov	r5, r0
1823:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14563              		.loc 1 1823 7 view .LVU3823
 14564 000c FFF7FEFF 		bl	get_reg_n
 14565              	.LVL1032:
1823:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14566              		.loc 1 1823 7 view .LVU3824
 14567 0010 8046     		mov	r8, r0
1824:src/xeq.c     **** 
 14568              		.loc 1 1824 7 view .LVU3825
 14569 0012 3046     		mov	r0, r6
 14570              	.LVL1033:
1824:src/xeq.c     **** 
 14571              		.loc 1 1824 2 is_stmt 1 view .LVU3826
1824:src/xeq.c     **** 
 14572              		.loc 1 1824 7 is_stmt 0 view .LVU3827
 14573 0014 FFF7FEFF 		bl	get_reg_n
 14574              	.LVL1034:
1826:src/xeq.c     **** 		copyreg(t1, StackBase);
 14575              		.loc 1 1826 2 is_stmt 1 view .LVU3828
1826:src/xeq.c     **** 		copyreg(t1, StackBase);
 14576              		.loc 1 1826 5 is_stmt 0 view .LVU3829
 14577 0018 152C     		cmp	r4, #21
 14578 001a 24D0     		beq	.L1071
1830:src/xeq.c     **** 			bad_mode_error();
 14579              		.loc 1 1830 3 is_stmt 1 view .LVU3830
1830:src/xeq.c     **** 			bad_mode_error();
 14580              		.loc 1 1830 7 is_stmt 0 view .LVU3831
 14581 001c 284B     		ldr	r3, .L1072
 14582 001e 1B68     		ldr	r3, [r3]
 14583 0020 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1830:src/xeq.c     **** 			bad_mode_error();
 14584              		.loc 1 1830 6 view .LVU3832
 14585 0024 13F00103 		ands	r3, r3, #1
 14586 0028 0DD0     		beq	.L1064
1831:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
 14587              		.loc 1 1831 4 is_stmt 1 view .LVU3833
 14588              	.LBB2667:
 14589              	.LBI2667:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14590              		.loc 1 575 6 view .LVU3834
ARM GAS  /tmp/cccVhVyH.s 			page 420


 14591              	.LBE2667:
 576:src/xeq.c     **** }
 14592              		.loc 1 576 2 view .LVU3835
 14593              	.LVL1035:
 14594              	.LBB2672:
 14595              	.LBB2668:
 14596              	.LBI2668:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14597              		.loc 1 546 5 view .LVU3836
 14598              	.LBB2669:
 547:src/xeq.c     **** 		Error = e;
 14599              		.loc 1 547 2 view .LVU3837
 547:src/xeq.c     **** 		Error = e;
 14600              		.loc 1 547 12 is_stmt 0 view .LVU3838
 14601 002a 264B     		ldr	r3, .L1072+4
 547:src/xeq.c     **** 		Error = e;
 14602              		.loc 1 547 5 view .LVU3839
 14603 002c 1A68     		ldr	r2, [r3]
 14604 002e 0AB9     		cbnz	r2, .L1063
 14605              	.LVL1036:
 14606              	.LBB2670:
 14607              	.LBI2670:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14608              		.loc 1 546 5 is_stmt 1 view .LVU3840
 14609              	.LBB2671:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14610              		.loc 1 548 3 view .LVU3841
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14611              		.loc 1 548 9 is_stmt 0 view .LVU3842
 14612 0030 0D22     		movs	r2, #13
 14613 0032 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14614              		.loc 1 549 3 is_stmt 1 view .LVU3843
 14615              	.LVL1037:
 14616              	.L1063:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14617              		.loc 1 549 3 is_stmt 0 view .LVU3844
 14618              	.LBE2671:
 14619              	.LBE2670:
 14620              	.LBE2669:
 14621              	.LBE2668:
 14622              	.LBE2672:
1839:src/xeq.c     **** }
 14623              		.loc 1 1839 2 is_stmt 1 view .LVU3845
 14624              	.LBB2673:
 14625              	.LBI2673:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 14626              		.loc 1 539 13 view .LVU3846
 14627              	.LBB2674:
 540:src/xeq.c     **** }
 14628              		.loc 1 540 2 view .LVU3847
 540:src/xeq.c     **** }
 14629              		.loc 1 540 20 is_stmt 0 view .LVU3848
 14630 0034 244B     		ldr	r3, .L1072+8
 14631 0036 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14632 0038 0121     		movs	r1, #1
 14633 003a 61F38712 		bfi	r2, r1, #6, #2
ARM GAS  /tmp/cccVhVyH.s 			page 421


 14634 003e 1A75     		strb	r2, [r3, #20]
 14635              	.LBE2674:
 14636              	.LBE2673:
1840:src/xeq.c     **** 
 14637              		.loc 1 1840 1 view .LVU3849
 14638 0040 14B0     		add	sp, sp, #80
 14639              		.cfi_remember_state
 14640              		.cfi_def_cfa_offset 24
 14641              		@ sp needed
 14642 0042 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 14643              	.LVL1038:
 14644              	.L1064:
 14645              		.cfi_restore_state
1832:src/xeq.c     **** 			illegal(op);
 14646              		.loc 1 1832 8 is_stmt 1 view .LVU3850
1832:src/xeq.c     **** 			illegal(op);
 14647              		.loc 1 1832 12 is_stmt 0 view .LVU3851
 14648 0046 153C     		subs	r4, r4, #21
 14649 0048 0093     		str	r3, [sp]
 14650 004a A0B2     		uxth	r0, r4
 14651              	.LVL1039:
1832:src/xeq.c     **** 			illegal(op);
 14652              		.loc 1 1832 12 view .LVU3852
 14653 004c 0BAB     		add	r3, sp, #44
 14654 004e 02AA     		add	r2, sp, #8
 14655 0050 2946     		mov	r1, r5
 14656 0052 FFF7FEFF 		bl	storcl_cop
 14657              	.LVL1040:
1832:src/xeq.c     **** 			illegal(op);
 14658              		.loc 1 1832 11 view .LVU3853
 14659 0056 50B3     		cbz	r0, .L1066
1833:src/xeq.c     **** 		else {
 14660              		.loc 1 1833 4 is_stmt 1 view .LVU3854
1833:src/xeq.c     **** 		else {
 14661              		.loc 1 1833 4 view .LVU3855
 14662              	.LVL1041:
 14663              	.LBB2675:
 14664              	.LBI2675:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14665              		.loc 1 546 5 view .LVU3856
 14666              	.LBB2676:
 547:src/xeq.c     **** 		Error = e;
 14667              		.loc 1 547 2 view .LVU3857
 547:src/xeq.c     **** 		Error = e;
 14668              		.loc 1 547 12 is_stmt 0 view .LVU3858
 14669 0058 1A4B     		ldr	r3, .L1072+4
 547:src/xeq.c     **** 		Error = e;
 14670              		.loc 1 547 5 view .LVU3859
 14671 005a 1A68     		ldr	r2, [r3]
 14672 005c 002A     		cmp	r2, #0
 14673 005e E9D1     		bne	.L1063
 14674              	.LVL1042:
 14675              	.LBB2677:
 14676              	.LBI2677:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14677              		.loc 1 546 5 is_stmt 1 view .LVU3860
 14678              	.LBB2678:
ARM GAS  /tmp/cccVhVyH.s 			page 422


 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14679              		.loc 1 548 3 view .LVU3861
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14680              		.loc 1 548 9 is_stmt 0 view .LVU3862
 14681 0060 0322     		movs	r2, #3
 14682 0062 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14683              		.loc 1 549 3 is_stmt 1 view .LVU3863
 14684 0064 E6E7     		b	.L1063
 14685              	.LVL1043:
 14686              	.L1071:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14687              		.loc 1 549 3 is_stmt 0 view .LVU3864
 14688              	.LBE2678:
 14689              	.LBE2677:
 14690              	.LBE2676:
 14691              	.LBE2675:
1827:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 14692              		.loc 1 1827 3 is_stmt 1 view .LVU3865
 14693              	.LBB2679:
 14694              	.LBB2680:
 14695              	.LBB2681:
 14696              	.LBB2682:
1122:src/xeq.c     **** }
 14697              		.loc 1 1122 24 is_stmt 0 view .LVU3866
 14698 0066 164D     		ldr	r5, .L1072
 14699              	.LVL1044:
1122:src/xeq.c     **** }
 14700              		.loc 1 1122 24 view .LVU3867
 14701              	.LBE2682:
 14702              	.LBE2681:
 14703              	.LBE2680:
 14704              	.LBE2679:
1827:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 14705              		.loc 1 1827 3 view .LVU3868
 14706 0068 184A     		ldr	r2, .L1072+12
 14707              	.LVL1045:
 14708              	.LBB2688:
 14709              	.LBI2679:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14710              		.loc 1 726 6 is_stmt 1 view .LVU3869
 14711              	.LBB2687:
 727:src/xeq.c     **** }
 14712              		.loc 1 727 2 view .LVU3870
 14713              	.LBB2685:
 14714              	.LBI2681:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14715              		.loc 1 1121 5 view .LVU3871
 14716              	.LBB2683:
1122:src/xeq.c     **** }
 14717              		.loc 1 1122 2 view .LVU3872
1122:src/xeq.c     **** }
 14718              		.loc 1 1122 24 is_stmt 0 view .LVU3873
 14719 006a 2B68     		ldr	r3, [r5]
 14720              	.LBE2683:
 14721              	.LBE2685:
 727:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 423


 14722              		.loc 1 727 2 view .LVU3874
 14723 006c 1168     		ldr	r1, [r2]
 14724              	.LBB2686:
 14725              	.LBB2684:
1122:src/xeq.c     **** }
 14726              		.loc 1 1122 24 view .LVU3875
 14727 006e B3F8E837 		ldrh	r3, [r3, #2024]
 14728 0072 44F20104 		movw	r4, #16385
 14729              	.LBE2684:
 14730              	.LBE2686:
 727:src/xeq.c     **** }
 14731              		.loc 1 727 2 view .LVU3876
 14732 0076 2340     		ands	r3, r3, r4
 14733 0078 B3F5804F 		cmp	r3, #16384
 14734 007c 0CBF     		ite	eq
 14735 007e 1022     		moveq	r2, #16
 14736              	.LVL1046:
 727:src/xeq.c     **** }
 14737              		.loc 1 727 2 view .LVU3877
 14738 0080 0822     		movne	r2, #8
 14739 0082 0746     		mov	r7, r0
 14740 0084 4046     		mov	r0, r8
 14741              	.LVL1047:
 727:src/xeq.c     **** }
 14742              		.loc 1 727 2 view .LVU3878
 14743 0086 FFF7FEFF 		bl	xcopy
 14744              	.LVL1048:
 727:src/xeq.c     **** }
 14745              		.loc 1 727 2 view .LVU3879
 14746              	.LBE2687:
 14747              	.LBE2688:
1828:src/xeq.c     **** 	} else {
 14748              		.loc 1 1828 3 is_stmt 1 view .LVU3880
1828:src/xeq.c     **** 	} else {
 14749              		.loc 1 1828 15 is_stmt 0 view .LVU3881
 14750 008a 6520     		movs	r0, #101
 14751 008c FFF7FEFF 		bl	get_reg_n
 14752              	.LVL1049:
 14753              	.LBB2689:
 14754              	.LBB2690:
 14755              	.LBB2691:
 14756              	.LBB2692:
1122:src/xeq.c     **** }
 14757              		.loc 1 1122 24 view .LVU3882
 14758 0090 2B68     		ldr	r3, [r5]
 14759 0092 B3F8E837 		ldrh	r3, [r3, #2024]
 14760              	.LBE2692:
 14761              	.LBE2691:
 727:src/xeq.c     **** }
 14762              		.loc 1 727 2 view .LVU3883
 14763 0096 1C40     		ands	r4, r4, r3
 14764 0098 B4F5804F 		cmp	r4, #16384
 14765              	.LBE2690:
 14766              	.LBE2689:
1828:src/xeq.c     **** 	} else {
 14767              		.loc 1 1828 15 view .LVU3884
 14768 009c 0146     		mov	r1, r0
ARM GAS  /tmp/cccVhVyH.s 			page 424


 14769              	.LVL1050:
 14770              	.LBB2696:
 14771              	.LBI2689:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14772              		.loc 1 726 6 is_stmt 1 view .LVU3885
 14773              	.LBB2695:
 727:src/xeq.c     **** }
 14774              		.loc 1 727 2 view .LVU3886
 14775              	.LBB2694:
 14776              	.LBI2691:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14777              		.loc 1 1121 5 view .LVU3887
 14778              	.LBB2693:
1122:src/xeq.c     **** }
 14779              		.loc 1 1122 2 view .LVU3888
 14780              	.LBE2693:
 14781              	.LBE2694:
 727:src/xeq.c     **** }
 14782              		.loc 1 727 2 is_stmt 0 view .LVU3889
 14783 009e 08BF     		it	eq
 14784 00a0 1022     		moveq	r2, #16
 14785 00a2 3846     		mov	r0, r7
 14786              	.LVL1051:
 727:src/xeq.c     **** }
 14787              		.loc 1 727 2 view .LVU3890
 14788 00a4 18BF     		it	ne
 14789 00a6 0822     		movne	r2, #8
 14790 00a8 FFF7FEFF 		bl	xcopy
 14791              	.LVL1052:
 728:src/xeq.c     **** 
 14792              		.loc 1 728 1 view .LVU3891
 14793 00ac C2E7     		b	.L1063
 14794              	.LVL1053:
 14795              	.L1066:
 728:src/xeq.c     **** 
 14796              		.loc 1 728 1 view .LVU3892
 14797              	.LBE2695:
 14798              	.LBE2696:
1835:src/xeq.c     **** 			setRegister(arg + 1, &r2);
 14799              		.loc 1 1835 4 is_stmt 1 view .LVU3893
 14800 00ae 02A9     		add	r1, sp, #8
 14801 00b0 2846     		mov	r0, r5
 14802 00b2 FFF7FEFF 		bl	setRegister
 14803              	.LVL1054:
1836:src/xeq.c     **** 		}
 14804              		.loc 1 1836 4 view .LVU3894
 14805 00b6 0BA9     		add	r1, sp, #44
 14806 00b8 3046     		mov	r0, r6
 14807 00ba FFF7FEFF 		bl	setRegister
 14808              	.LVL1055:
 14809 00be B9E7     		b	.L1063
 14810              	.L1073:
 14811              		.align	2
 14812              	.L1072:
 14813 00c0 00000000 		.word	main_ram
 14814 00c4 00000000 		.word	Error
 14815 00c8 00000000 		.word	StateWhileOn
ARM GAS  /tmp/cccVhVyH.s 			page 425


 14816 00cc 00000000 		.word	StackBase
 14817              		.cfi_endproc
 14818              	.LFE121:
 14820              		.section	.text.cmdcrcl,"ax",%progbits
 14821              		.align	1
 14822              		.p2align 2,,3
 14823              		.global	cmdcrcl
 14824              		.syntax unified
 14825              		.thumb
 14826              		.thumb_func
 14827              		.fpu fpv4-sp-d16
 14829              	cmdcrcl:
 14830              	.LVL1056:
 14831              	.LFB123:
1865:src/xeq.c     **** 	do_crcl(arg, op);
 14832              		.loc 1 1865 46 view -0
 14833              		.cfi_startproc
 14834              		@ args = 0, pretend = 0, frame = 72
 14835              		@ frame_needed = 0, uses_anonymous_args = 0
1866:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14836              		.loc 1 1866 2 view .LVU3896
1865:src/xeq.c     **** 	do_crcl(arg, op);
 14837              		.loc 1 1865 46 is_stmt 0 view .LVU3897
 14838 0000 70B5     		push	{r4, r5, r6, lr}
 14839              		.cfi_def_cfa_offset 16
 14840              		.cfi_offset 4, -16
 14841              		.cfi_offset 5, -12
 14842              		.cfi_offset 6, -8
 14843              		.cfi_offset 14, -4
 14844              	.LBB2727:
 14845              	.LBB2728:
1845:src/xeq.c     **** 		REGISTER x, y;
 14846              		.loc 1 1845 5 view .LVU3898
 14847 0002 1A29     		cmp	r1, #26
 14848              	.LBE2728:
 14849              	.LBE2727:
1865:src/xeq.c     **** 	do_crcl(arg, op);
 14850              		.loc 1 1865 46 view .LVU3899
 14851 0004 94B0     		sub	sp, sp, #80
 14852              		.cfi_def_cfa_offset 96
1865:src/xeq.c     **** 	do_crcl(arg, op);
 14853              		.loc 1 1865 46 view .LVU3900
 14854 0006 0446     		mov	r4, r0
 14855              	.LVL1057:
 14856              	.LBB2777:
 14857              	.LBI2727:
1842:src/xeq.c     **** 	decNumber r1, r2;
 14858              		.loc 1 1842 13 is_stmt 1 view .LVU3901
 14859              	.LBB2774:
1843:src/xeq.c     **** 
 14860              		.loc 1 1843 2 view .LVU3902
1845:src/xeq.c     **** 		REGISTER x, y;
 14861              		.loc 1 1845 2 view .LVU3903
1845:src/xeq.c     **** 		REGISTER x, y;
 14862              		.loc 1 1845 5 is_stmt 0 view .LVU3904
 14863 0008 2BD0     		beq	.L1090
1853:src/xeq.c     **** 			bad_mode_error();
ARM GAS  /tmp/cccVhVyH.s 			page 426


 14864              		.loc 1 1853 3 is_stmt 1 view .LVU3905
1853:src/xeq.c     **** 			bad_mode_error();
 14865              		.loc 1 1853 7 is_stmt 0 view .LVU3906
 14866 000a 3B4D     		ldr	r5, .L1091
 14867 000c 2B68     		ldr	r3, [r5]
 14868 000e 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1853:src/xeq.c     **** 			bad_mode_error();
 14869              		.loc 1 1853 6 view .LVU3907
 14870 0012 D207     		lsls	r2, r2, #31
 14871 0014 12D5     		bpl	.L1081
1854:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
 14872              		.loc 1 1854 4 is_stmt 1 view .LVU3908
 14873              	.LBB2729:
 14874              	.LBI2729:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14875              		.loc 1 575 6 view .LVU3909
 14876              	.LBE2729:
 14877              	.LBE2774:
 14878              	.LBE2777:
 576:src/xeq.c     **** }
 14879              		.loc 1 576 2 view .LVU3910
 14880              	.LVL1058:
 14881              	.LBB2778:
 14882              	.LBB2775:
 14883              	.LBB2734:
 14884              	.LBB2730:
 14885              	.LBI2730:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14886              		.loc 1 546 5 view .LVU3911
 14887              	.LBB2731:
 547:src/xeq.c     **** 		Error = e;
 14888              		.loc 1 547 2 view .LVU3912
 547:src/xeq.c     **** 		Error = e;
 14889              		.loc 1 547 12 is_stmt 0 view .LVU3913
 14890 0016 394A     		ldr	r2, .L1091+4
 547:src/xeq.c     **** 		Error = e;
 14891              		.loc 1 547 5 view .LVU3914
 14892 0018 1168     		ldr	r1, [r2]
 14893              	.LVL1059:
 547:src/xeq.c     **** 		Error = e;
 14894              		.loc 1 547 5 view .LVU3915
 14895 001a 09B9     		cbnz	r1, .L1080
 14896              	.LVL1060:
 14897              	.LBB2732:
 14898              	.LBI2732:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14899              		.loc 1 546 5 is_stmt 1 view .LVU3916
 14900              	.LBB2733:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14901              		.loc 1 548 3 view .LVU3917
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14902              		.loc 1 548 9 is_stmt 0 view .LVU3918
 14903 001c 0D21     		movs	r1, #13
 14904 001e 1160     		str	r1, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14905              		.loc 1 549 3 is_stmt 1 view .LVU3919
 14906              	.LVL1061:
ARM GAS  /tmp/cccVhVyH.s 			page 427


 14907              	.L1080:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14908              		.loc 1 549 3 is_stmt 0 view .LVU3920
 14909              	.LBE2733:
 14910              	.LBE2732:
 14911              	.LBE2731:
 14912              	.LBE2730:
 14913              	.LBE2734:
1862:src/xeq.c     **** }
 14914              		.loc 1 1862 2 is_stmt 1 view .LVU3921
 14915              	.LBB2735:
 14916              	.LBI2735:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 14917              		.loc 1 539 13 view .LVU3922
 14918              	.LBB2736:
 540:src/xeq.c     **** }
 14919              		.loc 1 540 2 view .LVU3923
 540:src/xeq.c     **** }
 14920              		.loc 1 540 20 is_stmt 0 view .LVU3924
 14921 0020 374A     		ldr	r2, .L1091+8
 14922 0022 117D     		ldrb	r1, [r2, #20]	@ zero_extendqisi2
 14923 0024 0120     		movs	r0, #1
 14924 0026 60F38711 		bfi	r1, r0, #6, #2
 14925 002a 1175     		strb	r1, [r2, #20]
 14926              	.LVL1062:
 540:src/xeq.c     **** }
 14927              		.loc 1 540 20 view .LVU3925
 14928              	.LBE2736:
 14929              	.LBE2735:
 14930              	.LBE2775:
 14931              	.LBE2778:
1868:src/xeq.c     **** #endif
 14932              		.loc 1 1868 2 is_stmt 1 view .LVU3926
 14933 002c 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
 14934 0030 42F01002 		orr	r2, r2, #16
 14935 0034 83F8DE27 		strb	r2, [r3, #2014]
1870:src/xeq.c     **** 
 14936              		.loc 1 1870 1 is_stmt 0 view .LVU3927
 14937 0038 14B0     		add	sp, sp, #80
 14938              		.cfi_remember_state
 14939              		.cfi_def_cfa_offset 16
 14940              		@ sp needed
 14941 003a 70BD     		pop	{r4, r5, r6, pc}
 14942              	.LVL1063:
 14943              	.L1081:
 14944              		.cfi_restore_state
 14945              	.LBB2779:
 14946              	.LBB2776:
1855:src/xeq.c     **** 			illegal(op);
 14947              		.loc 1 1855 8 is_stmt 1 view .LVU3928
1855:src/xeq.c     **** 			illegal(op);
 14948              		.loc 1 1855 12 is_stmt 0 view .LVU3929
 14949 003c 1A39     		subs	r1, r1, #26
 14950              	.LVL1064:
1855:src/xeq.c     **** 			illegal(op);
 14951              		.loc 1 1855 12 view .LVU3930
 14952 003e 0126     		movs	r6, #1
ARM GAS  /tmp/cccVhVyH.s 			page 428


 14953 0040 88B2     		uxth	r0, r1
 14954              	.LVL1065:
1855:src/xeq.c     **** 			illegal(op);
 14955              		.loc 1 1855 12 view .LVU3931
 14956 0042 0BAB     		add	r3, sp, #44
 14957 0044 2146     		mov	r1, r4
 14958 0046 02AA     		add	r2, sp, #8
 14959 0048 0096     		str	r6, [sp]
 14960 004a FFF7FEFF 		bl	storcl_cop
 14961              	.LVL1066:
1855:src/xeq.c     **** 			illegal(op);
 14962              		.loc 1 1855 11 view .LVU3932
 14963 004e 0028     		cmp	r0, #0
 14964 0050 4AD0     		beq	.L1082
1856:src/xeq.c     **** 		else {
 14965              		.loc 1 1856 4 is_stmt 1 view .LVU3933
1856:src/xeq.c     **** 		else {
 14966              		.loc 1 1856 4 view .LVU3934
 14967              	.LVL1067:
 14968              	.LBB2737:
 14969              	.LBI2737:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14970              		.loc 1 546 5 view .LVU3935
 14971              	.LBB2738:
 547:src/xeq.c     **** 		Error = e;
 14972              		.loc 1 547 2 view .LVU3936
 547:src/xeq.c     **** 		Error = e;
 14973              		.loc 1 547 12 is_stmt 0 view .LVU3937
 14974 0052 2A4A     		ldr	r2, .L1091+4
 547:src/xeq.c     **** 		Error = e;
 14975              		.loc 1 547 5 view .LVU3938
 14976 0054 1368     		ldr	r3, [r2]
 14977 0056 002B     		cmp	r3, #0
 14978 0058 4CD1     		bne	.L1089
 14979              	.LVL1068:
 14980              	.LBB2739:
 14981              	.LBI2739:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14982              		.loc 1 546 5 is_stmt 1 view .LVU3939
 14983              	.LBB2740:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14984              		.loc 1 548 3 view .LVU3940
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14985              		.loc 1 548 9 is_stmt 0 view .LVU3941
 14986 005a 0321     		movs	r1, #3
 14987 005c 2B68     		ldr	r3, [r5]
 14988 005e 1160     		str	r1, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14989              		.loc 1 549 3 is_stmt 1 view .LVU3942
 14990 0060 DEE7     		b	.L1080
 14991              	.LVL1069:
 14992              	.L1090:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14993              		.loc 1 549 3 is_stmt 0 view .LVU3943
 14994              	.LBE2740:
 14995              	.LBE2739:
 14996              	.LBE2738:
ARM GAS  /tmp/cccVhVyH.s 			page 429


 14997              	.LBE2737:
 14998              	.LBB2741:
1846:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
 14999              		.loc 1 1846 3 is_stmt 1 view .LVU3944
1847:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 15000              		.loc 1 1847 3 view .LVU3945
 15001              	.LBB2742:
 15002              	.LBB2743:
 15003              	.LBB2744:
 15004              	.LBB2745:
1122:src/xeq.c     **** }
 15005              		.loc 1 1122 24 is_stmt 0 view .LVU3946
 15006 0062 254E     		ldr	r6, .L1091
 15007              	.LBE2745:
 15008              	.LBE2744:
 15009              	.LBE2743:
 15010              	.LBE2742:
1847:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 15011              		.loc 1 1847 15 view .LVU3947
 15012 0064 FFF7FEFF 		bl	get_reg_n
 15013              	.LVL1070:
 15014              	.LBB2752:
 15015              	.LBB2750:
 15016              	.LBB2748:
 15017              	.LBB2746:
1122:src/xeq.c     **** }
 15018              		.loc 1 1122 24 view .LVU3948
 15019 0068 3368     		ldr	r3, [r6]
 15020 006a B3F8E837 		ldrh	r3, [r3, #2024]
 15021 006e 44F20105 		movw	r5, #16385
 15022              	.LBE2746:
 15023              	.LBE2748:
 727:src/xeq.c     **** }
 15024              		.loc 1 727 2 view .LVU3949
 15025 0072 2B40     		ands	r3, r3, r5
 15026 0074 B3F5804F 		cmp	r3, #16384
 15027 0078 0CBF     		ite	eq
 15028 007a 1022     		moveq	r2, #16
 15029 007c 0822     		movne	r2, #8
 15030              	.LBE2750:
 15031              	.LBE2752:
1847:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 15032              		.loc 1 1847 15 view .LVU3950
 15033 007e 0146     		mov	r1, r0
 15034              	.LVL1071:
 15035              	.LBB2753:
 15036              	.LBI2742:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15037              		.loc 1 726 6 is_stmt 1 view .LVU3951
 15038              	.LBB2751:
 727:src/xeq.c     **** }
 15039              		.loc 1 727 2 view .LVU3952
 15040              	.LBB2749:
 15041              	.LBI2744:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15042              		.loc 1 1121 5 view .LVU3953
 15043              	.LBB2747:
ARM GAS  /tmp/cccVhVyH.s 			page 430


1122:src/xeq.c     **** }
 15044              		.loc 1 1122 2 view .LVU3954
 15045              	.LBE2747:
 15046              	.LBE2749:
 727:src/xeq.c     **** }
 15047              		.loc 1 727 2 is_stmt 0 view .LVU3955
 15048 0080 02A8     		add	r0, sp, #8
 15049              	.LVL1072:
 727:src/xeq.c     **** }
 15050              		.loc 1 727 2 view .LVU3956
 15051 0082 FFF7FEFF 		bl	xcopy
 15052              	.LVL1073:
 727:src/xeq.c     **** }
 15053              		.loc 1 727 2 view .LVU3957
 15054              	.LBE2751:
 15055              	.LBE2753:
1848:src/xeq.c     **** 		lift2_if_enabled();
 15056              		.loc 1 1848 3 is_stmt 1 view .LVU3958
1848:src/xeq.c     **** 		lift2_if_enabled();
 15057              		.loc 1 1848 15 is_stmt 0 view .LVU3959
 15058 0086 601C     		adds	r0, r4, #1
 15059 0088 FFF7FEFF 		bl	get_reg_n
 15060              	.LVL1074:
 15061              	.LBB2754:
 15062              	.LBB2755:
 15063              	.LBB2756:
 15064              	.LBB2757:
1122:src/xeq.c     **** }
 15065              		.loc 1 1122 24 view .LVU3960
 15066 008c 3368     		ldr	r3, [r6]
 15067 008e B3F8E837 		ldrh	r3, [r3, #2024]
 15068              	.LBE2757:
 15069              	.LBE2756:
 727:src/xeq.c     **** }
 15070              		.loc 1 727 2 view .LVU3961
 15071 0092 2B40     		ands	r3, r3, r5
 15072 0094 B3F5804F 		cmp	r3, #16384
 15073              	.LBE2755:
 15074              	.LBE2754:
1848:src/xeq.c     **** 		lift2_if_enabled();
 15075              		.loc 1 1848 15 view .LVU3962
 15076 0098 0146     		mov	r1, r0
 15077              	.LVL1075:
 15078              	.LBB2761:
 15079              	.LBI2754:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15080              		.loc 1 726 6 is_stmt 1 view .LVU3963
 15081              	.LBB2760:
 727:src/xeq.c     **** }
 15082              		.loc 1 727 2 view .LVU3964
 15083              	.LBB2759:
 15084              	.LBI2756:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15085              		.loc 1 1121 5 view .LVU3965
 15086              	.LBB2758:
1122:src/xeq.c     **** }
 15087              		.loc 1 1122 2 view .LVU3966
ARM GAS  /tmp/cccVhVyH.s 			page 431


 15088              	.LBE2758:
 15089              	.LBE2759:
 727:src/xeq.c     **** }
 15090              		.loc 1 727 2 is_stmt 0 view .LVU3967
 15091 009a 0CBF     		ite	eq
 15092 009c 1022     		moveq	r2, #16
 15093 009e 0822     		movne	r2, #8
 15094 00a0 0BA8     		add	r0, sp, #44
 15095              	.LVL1076:
 727:src/xeq.c     **** }
 15096              		.loc 1 727 2 view .LVU3968
 15097 00a2 FFF7FEFF 		bl	xcopy
 15098              	.LVL1077:
 727:src/xeq.c     **** }
 15099              		.loc 1 727 2 view .LVU3969
 15100              	.LBE2760:
 15101              	.LBE2761:
1849:src/xeq.c     **** 		copyreg(StackBase, &x);
 15102              		.loc 1 1849 3 is_stmt 1 view .LVU3970
 15103 00a6 FFF7FEFF 		bl	lift2_if_enabled
 15104              	.LVL1078:
1850:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 15105              		.loc 1 1850 3 view .LVU3971
 15106              	.LBB2762:
 15107              	.LBB2763:
 15108              	.LBB2764:
 15109              	.LBB2765:
1122:src/xeq.c     **** }
 15110              		.loc 1 1122 24 is_stmt 0 view .LVU3972
 15111 00aa 3368     		ldr	r3, [r6]
 15112              	.LBE2765:
 15113              	.LBE2764:
 15114              	.LBE2763:
 15115              	.LBE2762:
1850:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 15116              		.loc 1 1850 3 view .LVU3973
 15117 00ac 154A     		ldr	r2, .L1091+12
 15118              	.LVL1079:
 15119              	.LBB2769:
 15120              	.LBI2762:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15121              		.loc 1 726 6 is_stmt 1 view .LVU3974
 15122              	.LBB2768:
 727:src/xeq.c     **** }
 15123              		.loc 1 727 2 view .LVU3975
 15124              	.LBB2767:
 15125              	.LBI2764:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15126              		.loc 1 1121 5 view .LVU3976
 15127              	.LBB2766:
1122:src/xeq.c     **** }
 15128              		.loc 1 1122 2 view .LVU3977
1122:src/xeq.c     **** }
 15129              		.loc 1 1122 24 is_stmt 0 view .LVU3978
 15130 00ae B3F8E837 		ldrh	r3, [r3, #2024]
 15131              	.LBE2766:
 15132              	.LBE2767:
ARM GAS  /tmp/cccVhVyH.s 			page 432


 727:src/xeq.c     **** }
 15133              		.loc 1 727 2 view .LVU3979
 15134 00b2 1068     		ldr	r0, [r2]
 15135 00b4 2B40     		ands	r3, r3, r5
 15136 00b6 B3F5804F 		cmp	r3, #16384
 15137 00ba 0CBF     		ite	eq
 15138 00bc 1022     		moveq	r2, #16
 15139              	.LVL1080:
 727:src/xeq.c     **** }
 15140              		.loc 1 727 2 view .LVU3980
 15141 00be 0822     		movne	r2, #8
 15142 00c0 02A9     		add	r1, sp, #8
 15143              	.LVL1081:
 727:src/xeq.c     **** }
 15144              		.loc 1 727 2 view .LVU3981
 15145 00c2 FFF7FEFF 		bl	xcopy
 15146              	.LVL1082:
 727:src/xeq.c     **** }
 15147              		.loc 1 727 2 view .LVU3982
 15148              	.LBE2768:
 15149              	.LBE2769:
1851:src/xeq.c     **** 	} else {
 15150              		.loc 1 1851 3 is_stmt 1 view .LVU3983
 15151 00c6 6520     		movs	r0, #101
 15152 00c8 FFF7FEFF 		bl	get_reg_n
 15153              	.LVL1083:
 15154              	.LBB2770:
 15155              	.LBI2770:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15156              		.loc 1 726 6 view .LVU3984
 15157              	.LBB2771:
 727:src/xeq.c     **** }
 15158              		.loc 1 727 2 view .LVU3985
 15159              	.LBB2772:
 15160              	.LBI2772:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15161              		.loc 1 1121 5 view .LVU3986
 15162              	.LBB2773:
1122:src/xeq.c     **** }
 15163              		.loc 1 1122 2 view .LVU3987
1122:src/xeq.c     **** }
 15164              		.loc 1 1122 24 is_stmt 0 view .LVU3988
 15165 00cc 3368     		ldr	r3, [r6]
 15166 00ce B3F8E837 		ldrh	r3, [r3, #2024]
 15167              	.LBE2773:
 15168              	.LBE2772:
 727:src/xeq.c     **** }
 15169              		.loc 1 727 2 view .LVU3989
 15170 00d2 1D40     		ands	r5, r5, r3
 15171 00d4 B5F5804F 		cmp	r5, #16384
 15172 00d8 0BA9     		add	r1, sp, #44
 15173              	.LVL1084:
 727:src/xeq.c     **** }
 15174              		.loc 1 727 2 view .LVU3990
 15175 00da 0CBF     		ite	eq
 15176 00dc 1022     		moveq	r2, #16
 15177 00de 0822     		movne	r2, #8
ARM GAS  /tmp/cccVhVyH.s 			page 433


 15178 00e0 FFF7FEFF 		bl	xcopy
 15179              	.LVL1085:
 727:src/xeq.c     **** }
 15180              		.loc 1 727 2 view .LVU3991
 15181 00e4 3368     		ldr	r3, [r6]
 15182              	.LBE2771:
 15183              	.LBE2770:
 15184              	.LBE2741:
 15185 00e6 9BE7     		b	.L1080
 15186              	.L1082:
1858:src/xeq.c     **** 			setXY(&r1, &r2);
 15187              		.loc 1 1858 4 is_stmt 1 view .LVU3992
 15188 00e8 FFF7FEFF 		bl	setlastXY
 15189              	.LVL1086:
1859:src/xeq.c     **** 		}
 15190              		.loc 1 1859 4 view .LVU3993
 15191 00ec 0BA9     		add	r1, sp, #44
 15192 00ee 02A8     		add	r0, sp, #8
 15193 00f0 FFF7FEFF 		bl	setXY
 15194              	.LVL1087:
 15195              	.L1089:
 15196 00f4 2B68     		ldr	r3, [r5]
 15197 00f6 93E7     		b	.L1080
 15198              	.L1092:
 15199              		.align	2
 15200              	.L1091:
 15201 00f8 00000000 		.word	main_ram
 15202 00fc 00000000 		.word	Error
 15203 0100 00000000 		.word	StateWhileOn
 15204 0104 00000000 		.word	StackBase
 15205              	.LBE2776:
 15206              	.LBE2779:
 15207              		.cfi_endproc
 15208              	.LFE123:
 15210              		.section	.text.cmdircl,"ax",%progbits
 15211              		.align	1
 15212              		.p2align 2,,3
 15213              		.global	cmdircl
 15214              		.syntax unified
 15215              		.thumb
 15216              		.thumb_func
 15217              		.fpu fpv4-sp-d16
 15219              	cmdircl:
 15220              	.LVL1088:
 15221              	.LFB124:
1882:src/xeq.c     **** 	if (is_intmode())
 15222              		.loc 1 1882 46 view -0
 15223              		.cfi_startproc
 15224              		@ args = 0, pretend = 0, frame = 0
 15225              		@ frame_needed = 0, uses_anonymous_args = 0
 15226              		@ link register save eliminated.
1883:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15227              		.loc 1 1883 2 view .LVU3995
1883:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15228              		.loc 1 1883 6 is_stmt 0 view .LVU3996
 15229 0000 064B     		ldr	r3, .L1095
 15230 0002 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cccVhVyH.s 			page 434


 15231 0004 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1883:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15232              		.loc 1 1883 5 view .LVU3997
 15233 0008 12F00102 		ands	r2, r2, #1
1882:src/xeq.c     **** 	if (is_intmode())
 15234              		.loc 1 1882 46 view .LVU3998
 15235 000c 0146     		mov	r1, r0
 15236              	.LVL1089:
1883:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15237              		.loc 1 1883 5 view .LVU3999
 15238 000e 02D0     		beq	.L1094
1884:src/xeq.c     **** 	else
 15239              		.loc 1 1884 3 is_stmt 1 view .LVU4000
 15240              	.LVL1090:
 15241              	.LBB2780:
 15242              	.LBI2780:
1774:src/xeq.c     **** 	do_rcl(arg, op);
 15243              		.loc 1 1774 6 view .LVU4001
 15244              	.LBB2781:
1775:src/xeq.c     **** }
 15245              		.loc 1 1775 2 view .LVU4002
 15246 0010 0A21     		movs	r1, #10
 15247 0012 FFF7FEBF 		b	do_rcl
 15248              	.LVL1091:
 15249              	.L1094:
1775:src/xeq.c     **** }
 15250              		.loc 1 1775 2 is_stmt 0 view .LVU4003
 15251              	.LBE2781:
 15252              	.LBE2780:
1886:src/xeq.c     **** }
 15253              		.loc 1 1886 3 is_stmt 1 view .LVU4004
 15254 0016 6420     		movs	r0, #100
 15255              	.LVL1092:
1886:src/xeq.c     **** }
 15256              		.loc 1 1886 3 is_stmt 0 view .LVU4005
 15257 0018 FFF7FEBF 		b	register_from_int
 15258              	.LVL1093:
 15259              	.L1096:
1886:src/xeq.c     **** }
 15260              		.loc 1 1886 3 view .LVU4006
 15261              		.align	2
 15262              	.L1095:
 15263 001c 00000000 		.word	main_ram
 15264              		.cfi_endproc
 15265              	.LFE124:
 15267              		.section	.text.cmdrrcl,"ax",%progbits
 15268              		.align	1
 15269              		.p2align 2,,3
 15270              		.global	cmdrrcl
 15271              		.syntax unified
 15272              		.thumb
 15273              		.thumb_func
 15274              		.fpu fpv4-sp-d16
 15276              	cmdrrcl:
 15277              	.LVL1094:
 15278              	.LFB125:
1890:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
ARM GAS  /tmp/cccVhVyH.s 			page 435


 15279              		.loc 1 1890 46 is_stmt 1 view -0
 15280              		.cfi_startproc
 15281              		@ args = 0, pretend = 0, frame = 40
 15282              		@ frame_needed = 0, uses_anonymous_args = 0
1891:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15283              		.loc 1 1891 2 view .LVU4008
1890:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15284              		.loc 1 1890 46 is_stmt 0 view .LVU4009
 15285 0000 70B5     		push	{r4, r5, r6, lr}
 15286              		.cfi_def_cfa_offset 16
 15287              		.cfi_offset 4, -16
 15288              		.cfi_offset 5, -12
 15289              		.cfi_offset 6, -8
 15290              		.cfi_offset 14, -4
1891:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15291              		.loc 1 1891 22 view .LVU4010
 15292 0002 1F4C     		ldr	r4, .L1104
 15293 0004 2368     		ldr	r3, [r4]
1891:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15294              		.loc 1 1891 28 view .LVU4011
 15295 0006 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1892:src/xeq.c     **** 
 15296              		.loc 1 1892 26 view .LVU4012
 15297 000a 8029     		cmp	r1, #128
1890:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15298              		.loc 1 1890 46 view .LVU4013
 15299 000c 8AB0     		sub	sp, sp, #40
 15300              		.cfi_def_cfa_offset 56
1891:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15301              		.loc 1 1891 28 view .LVU4014
 15302 000e C2F38015 		ubfx	r5, r2, #6, #1
 15303              	.LVL1095:
1892:src/xeq.c     **** 
 15304              		.loc 1 1892 2 is_stmt 1 view .LVU4015
1892:src/xeq.c     **** 
 15305              		.loc 1 1892 26 is_stmt 0 view .LVU4016
 15306 0012 0CBF     		ite	eq
 15307 0014 0121     		moveq	r1, #1
 15308              	.LVL1096:
1892:src/xeq.c     **** 
 15309              		.loc 1 1892 26 view .LVU4017
 15310 0016 0021     		movne	r1, #0
 15311              	.LVL1097:
1894:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15312              		.loc 1 1894 2 is_stmt 1 view .LVU4018
1894:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15313              		.loc 1 1894 5 is_stmt 0 view .LVU4019
 15314 0018 26D0     		beq	.L1102
 15315              	.LVL1098:
 15316              	.L1098:
1900:src/xeq.c     **** 	if (is_intmode()) {
 15317              		.loc 1 1900 2 is_stmt 1 view .LVU4020
1900:src/xeq.c     **** 	if (is_intmode()) {
 15318              		.loc 1 1900 21 is_stmt 0 view .LVU4021
 15319 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1901:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15320              		.loc 1 1901 6 view .LVU4022
ARM GAS  /tmp/cccVhVyH.s 			page 436


 15321 001e 93F8E867 		ldrb	r6, [r3, #2024]	@ zero_extendqisi2
1900:src/xeq.c     **** 	if (is_intmode()) {
 15322              		.loc 1 1900 21 view .LVU4023
 15323 0022 61F38612 		bfi	r2, r1, #6, #1
 15324 0026 83F8E927 		strb	r2, [r3, #2025]
 15325              	.LVL1099:
1901:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15326              		.loc 1 1901 2 is_stmt 1 view .LVU4024
1901:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15327              		.loc 1 1901 5 is_stmt 0 view .LVU4025
 15328 002a F307     		lsls	r3, r6, #31
1902:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15329              		.loc 1 1902 3 view .LVU4026
 15330 002c 0146     		mov	r1, r0
 15331              	.LVL1100:
1901:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15332              		.loc 1 1901 5 view .LVU4027
 15333 002e 0FD4     		bmi	.L1103
 15334              	.LBB2789:
1906:src/xeq.c     **** 		getRegister(&x, arg);
 15335              		.loc 1 1906 3 is_stmt 1 view .LVU4028
1907:src/xeq.c     **** 
 15336              		.loc 1 1907 3 view .LVU4029
 15337 0030 01A8     		add	r0, sp, #4
 15338              	.LVL1101:
1907:src/xeq.c     **** 
 15339              		.loc 1 1907 3 is_stmt 0 view .LVU4030
 15340 0032 FFF7FEFF 		bl	getRegister
 15341              	.LVL1102:
1909:src/xeq.c     **** 		setX(&x);
 15342              		.loc 1 1909 3 is_stmt 1 view .LVU4031
1909:src/xeq.c     **** 		setX(&x);
 15343              		.loc 1 1909 22 is_stmt 0 view .LVU4032
 15344 0036 2368     		ldr	r3, [r4]
 15345 0038 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 15346 003c 65F38612 		bfi	r2, r5, #6, #1
 15347              	.LBB2790:
 15348              	.LBB2791:
 829:src/xeq.c     **** }
 15349              		.loc 1 829 2 view .LVU4033
 15350 0040 01A9     		add	r1, sp, #4
 15351              	.LBE2791:
 15352              	.LBE2790:
1909:src/xeq.c     **** 		setX(&x);
 15353              		.loc 1 1909 22 view .LVU4034
 15354 0042 83F8E927 		strb	r2, [r3, #2025]
1910:src/xeq.c     **** 	}
 15355              		.loc 1 1910 3 is_stmt 1 view .LVU4035
 15356              	.LVL1103:
 15357              	.LBB2793:
 15358              	.LBI2790:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 15359              		.loc 1 828 6 view .LVU4036
 15360              	.LBB2792:
 829:src/xeq.c     **** }
 15361              		.loc 1 829 2 view .LVU4037
 15362 0046 6420     		movs	r0, #100
ARM GAS  /tmp/cccVhVyH.s 			page 437


 15363 0048 FFF7FEFF 		bl	setRegister
 15364              	.LVL1104:
 15365              	.L1097:
 829:src/xeq.c     **** }
 15366              		.loc 1 829 2 is_stmt 0 view .LVU4038
 15367              	.LBE2792:
 15368              	.LBE2793:
 15369              	.LBE2789:
1912:src/xeq.c     **** 
 15370              		.loc 1 1912 1 view .LVU4039
 15371 004c 0AB0     		add	sp, sp, #40
 15372              		.cfi_remember_state
 15373              		.cfi_def_cfa_offset 16
 15374              		@ sp needed
 15375 004e 70BD     		pop	{r4, r5, r6, pc}
 15376              	.LVL1105:
 15377              	.L1103:
 15378              		.cfi_restore_state
1902:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15379              		.loc 1 1902 3 is_stmt 1 view .LVU4040
 15380 0050 6420     		movs	r0, #100
 15381              	.LVL1106:
1902:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15382              		.loc 1 1902 3 is_stmt 0 view .LVU4041
 15383 0052 FFF7FEFF 		bl	int_from_register
 15384              	.LVL1107:
1903:src/xeq.c     **** 	}
 15385              		.loc 1 1903 3 is_stmt 1 view .LVU4042
1903:src/xeq.c     **** 	}
 15386              		.loc 1 1903 22 is_stmt 0 view .LVU4043
 15387 0056 2368     		ldr	r3, [r4]
 15388 0058 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 15389 005c 65F38612 		bfi	r2, r5, #6, #1
 15390 0060 83F8E927 		strb	r2, [r3, #2025]
1912:src/xeq.c     **** 
 15391              		.loc 1 1912 1 view .LVU4044
 15392 0064 0AB0     		add	sp, sp, #40
 15393              		.cfi_remember_state
 15394              		.cfi_def_cfa_offset 16
 15395              		@ sp needed
 15396 0066 70BD     		pop	{r4, r5, r6, pc}
 15397              	.LVL1108:
 15398              	.L1102:
 15399              		.cfi_restore_state
1894:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15400              		.loc 1 1894 14 discriminator 1 view .LVU4045
 15401 0068 A0F16402 		sub	r2, r0, #100
 15402              	.LVL1109:
1894:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15403              		.loc 1 1894 14 discriminator 1 view .LVU4046
 15404 006c 0B2A     		cmp	r2, #11
 15405 006e D4D8     		bhi	.L1098
1896:src/xeq.c     **** 		return;
 15406              		.loc 1 1896 3 is_stmt 1 view .LVU4047
 15407              	.LVL1110:
 15408              	.LBB2794:
 15409              	.LBI2794:
ARM GAS  /tmp/cccVhVyH.s 			page 438


 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 15410              		.loc 1 546 5 view .LVU4048
 15411              	.LBB2795:
 547:src/xeq.c     **** 		Error = e;
 15412              		.loc 1 547 2 view .LVU4049
 547:src/xeq.c     **** 		Error = e;
 15413              		.loc 1 547 12 is_stmt 0 view .LVU4050
 15414 0070 044B     		ldr	r3, .L1104+4
 15415              	.LVL1111:
 547:src/xeq.c     **** 		Error = e;
 15416              		.loc 1 547 5 view .LVU4051
 15417 0072 1A68     		ldr	r2, [r3]
 15418 0074 002A     		cmp	r2, #0
 15419 0076 E9D1     		bne	.L1097
 15420              	.LVL1112:
 15421              	.LBB2796:
 15422              	.LBI2796:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 15423              		.loc 1 546 5 is_stmt 1 view .LVU4052
 15424              	.LBB2797:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 15425              		.loc 1 548 3 view .LVU4053
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 15426              		.loc 1 548 9 is_stmt 0 view .LVU4054
 15427 0078 0822     		movs	r2, #8
 15428 007a 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 15429              		.loc 1 549 3 is_stmt 1 view .LVU4055
 15430 007c E6E7     		b	.L1097
 15431              	.L1105:
 15432 007e 00BF     		.align	2
 15433              	.L1104:
 15434 0080 00000000 		.word	main_ram
 15435 0084 00000000 		.word	Error
 15436              	.LBE2797:
 15437              	.LBE2796:
 15438              	.LBE2795:
 15439              	.LBE2794:
 15440              		.cfi_endproc
 15441              	.LFE125:
 15443              		.section	.text.swap_reg,"ax",%progbits
 15444              		.align	1
 15445              		.p2align 2,,3
 15446              		.global	swap_reg
 15447              		.syntax unified
 15448              		.thumb
 15449              		.thumb_func
 15450              		.fpu fpv4-sp-d16
 15452              	swap_reg:
 15453              	.LVL1113:
 15454              	.LFB126:
1917:src/xeq.c     **** 	REGISTER t;
 15455              		.loc 1 1917 41 view -0
 15456              		.cfi_startproc
 15457              		@ args = 0, pretend = 0, frame = 16
 15458              		@ frame_needed = 0, uses_anonymous_args = 0
1918:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 439


 15459              		.loc 1 1918 2 view .LVU4057
1920:src/xeq.c     **** 	copyreg(a, b);
 15460              		.loc 1 1920 2 view .LVU4058
1917:src/xeq.c     **** 	REGISTER t;
 15461              		.loc 1 1917 41 is_stmt 0 view .LVU4059
 15462 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 15463              		.cfi_def_cfa_offset 20
 15464              		.cfi_offset 4, -20
 15465              		.cfi_offset 5, -16
 15466              		.cfi_offset 6, -12
 15467              		.cfi_offset 7, -8
 15468              		.cfi_offset 14, -4
 15469              	.LBB2798:
 15470              	.LBB2799:
 15471              	.LBB2800:
 15472              	.LBB2801:
1122:src/xeq.c     **** }
 15473              		.loc 1 1122 24 view .LVU4060
 15474 0002 174F     		ldr	r7, .L1114
 15475 0004 3B68     		ldr	r3, [r7]
 15476 0006 B3F8E837 		ldrh	r3, [r3, #2024]
 15477 000a 44F20104 		movw	r4, #16385
 15478              	.LBE2801:
 15479              	.LBE2800:
 727:src/xeq.c     **** }
 15480              		.loc 1 727 2 view .LVU4061
 15481 000e 2340     		ands	r3, r3, r4
 15482              	.LBE2799:
 15483              	.LBE2798:
1917:src/xeq.c     **** 	REGISTER t;
 15484              		.loc 1 1917 41 view .LVU4062
 15485 0010 85B0     		sub	sp, sp, #20
 15486              		.cfi_def_cfa_offset 40
 15487              	.LVL1114:
 15488              	.LBB2806:
 15489              	.LBB2804:
 727:src/xeq.c     **** }
 15490              		.loc 1 727 2 view .LVU4063
 15491 0012 B3F5804F 		cmp	r3, #16384
 15492 0016 0CBF     		ite	eq
 15493 0018 1022     		moveq	r2, #16
 15494 001a 0822     		movne	r2, #8
 15495              	.LBE2804:
 15496              	.LBE2806:
1917:src/xeq.c     **** 	REGISTER t;
 15497              		.loc 1 1917 41 view .LVU4064
 15498 001c 0D46     		mov	r5, r1
 15499 001e 0646     		mov	r6, r0
 15500              	.LVL1115:
 15501              	.LBB2807:
 15502              	.LBI2798:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15503              		.loc 1 726 6 is_stmt 1 view .LVU4065
 15504              	.LBB2805:
 727:src/xeq.c     **** }
 15505              		.loc 1 727 2 view .LVU4066
 15506              	.LBB2803:
ARM GAS  /tmp/cccVhVyH.s 			page 440


 15507              	.LBI2800:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15508              		.loc 1 1121 5 view .LVU4067
 15509              	.LBB2802:
1122:src/xeq.c     **** }
 15510              		.loc 1 1122 2 view .LVU4068
 15511              	.LBE2802:
 15512              	.LBE2803:
 727:src/xeq.c     **** }
 15513              		.loc 1 727 2 is_stmt 0 view .LVU4069
 15514 0020 0146     		mov	r1, r0
 15515              	.LVL1116:
 727:src/xeq.c     **** }
 15516              		.loc 1 727 2 view .LVU4070
 15517 0022 6846     		mov	r0, sp
 15518              	.LVL1117:
 727:src/xeq.c     **** }
 15519              		.loc 1 727 2 view .LVU4071
 15520 0024 FFF7FEFF 		bl	xcopy
 15521              	.LVL1118:
 727:src/xeq.c     **** }
 15522              		.loc 1 727 2 view .LVU4072
 15523              	.LBE2805:
 15524              	.LBE2807:
1921:src/xeq.c     **** 	copyreg(b, &t);
 15525              		.loc 1 1921 2 is_stmt 1 view .LVU4073
 15526              	.LBB2808:
 15527              	.LBI2808:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15528              		.loc 1 726 6 view .LVU4074
 15529              	.LBB2809:
 727:src/xeq.c     **** }
 15530              		.loc 1 727 2 view .LVU4075
 15531              	.LBB2810:
 15532              	.LBI2810:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15533              		.loc 1 1121 5 view .LVU4076
 15534              	.LBB2811:
1122:src/xeq.c     **** }
 15535              		.loc 1 1122 2 view .LVU4077
1122:src/xeq.c     **** }
 15536              		.loc 1 1122 24 is_stmt 0 view .LVU4078
 15537 0028 3B68     		ldr	r3, [r7]
 15538 002a B3F8E837 		ldrh	r3, [r3, #2024]
 15539              	.LBE2811:
 15540              	.LBE2810:
 727:src/xeq.c     **** }
 15541              		.loc 1 727 2 view .LVU4079
 15542 002e 2340     		ands	r3, r3, r4
 15543 0030 B3F5804F 		cmp	r3, #16384
 15544 0034 0CBF     		ite	eq
 15545 0036 1022     		moveq	r2, #16
 15546 0038 0822     		movne	r2, #8
 15547 003a 2946     		mov	r1, r5
 15548 003c 3046     		mov	r0, r6
 15549 003e FFF7FEFF 		bl	xcopy
 15550              	.LVL1119:
ARM GAS  /tmp/cccVhVyH.s 			page 441


 727:src/xeq.c     **** }
 15551              		.loc 1 727 2 view .LVU4080
 15552              	.LBE2809:
 15553              	.LBE2808:
1922:src/xeq.c     **** }
 15554              		.loc 1 1922 2 is_stmt 1 view .LVU4081
 15555              	.LBB2812:
 15556              	.LBI2812:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15557              		.loc 1 726 6 view .LVU4082
 15558              	.LBB2813:
 727:src/xeq.c     **** }
 15559              		.loc 1 727 2 view .LVU4083
 15560              	.LBB2814:
 15561              	.LBI2814:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15562              		.loc 1 1121 5 view .LVU4084
 15563              	.LBB2815:
1122:src/xeq.c     **** }
 15564              		.loc 1 1122 2 view .LVU4085
1122:src/xeq.c     **** }
 15565              		.loc 1 1122 24 is_stmt 0 view .LVU4086
 15566 0042 3B68     		ldr	r3, [r7]
 15567 0044 B3F8E837 		ldrh	r3, [r3, #2024]
 15568              	.LBE2815:
 15569              	.LBE2814:
 727:src/xeq.c     **** }
 15570              		.loc 1 727 2 view .LVU4087
 15571 0048 1C40     		ands	r4, r4, r3
 15572 004a B4F5804F 		cmp	r4, #16384
 15573 004e 2846     		mov	r0, r5
 15574 0050 6946     		mov	r1, sp
 15575 0052 0CBF     		ite	eq
 15576 0054 1022     		moveq	r2, #16
 15577 0056 0822     		movne	r2, #8
 15578 0058 FFF7FEFF 		bl	xcopy
 15579              	.LVL1120:
 727:src/xeq.c     **** }
 15580              		.loc 1 727 2 view .LVU4088
 15581              	.LBE2813:
 15582              	.LBE2812:
1923:src/xeq.c     **** 
 15583              		.loc 1 1923 1 view .LVU4089
 15584 005c 05B0     		add	sp, sp, #20
 15585              		.cfi_def_cfa_offset 20
 15586              		@ sp needed
 15587 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 15588              	.LVL1121:
 15589              	.L1115:
1923:src/xeq.c     **** 
 15590              		.loc 1 1923 1 view .LVU4090
 15591              		.align	2
 15592              	.L1114:
 15593 0060 00000000 		.word	main_ram
 15594              		.cfi_endproc
 15595              	.LFE126:
 15597              		.section	.text.cmdswap,"ax",%progbits
ARM GAS  /tmp/cccVhVyH.s 			page 442


 15598              		.align	1
 15599              		.p2align 2,,3
 15600              		.global	cmdswap
 15601              		.syntax unified
 15602              		.thumb
 15603              		.thumb_func
 15604              		.fpu fpv4-sp-d16
 15606              	cmdswap:
 15607              	.LVL1122:
 15608              	.LFB127:
1925:src/xeq.c     **** 	int idx;
 15609              		.loc 1 1925 46 is_stmt 1 view -0
 15610              		.cfi_startproc
 15611              		@ args = 0, pretend = 0, frame = 0
 15612              		@ frame_needed = 0, uses_anonymous_args = 0
1926:src/xeq.c     **** 
 15613              		.loc 1 1926 2 view .LVU4092
1928:src/xeq.c     **** 		idx = regX_idx;
 15614              		.loc 1 1928 2 view .LVU4093
1928:src/xeq.c     **** 		idx = regX_idx;
 15615              		.loc 1 1928 5 is_stmt 0 view .LVU4094
 15616 0000 1F29     		cmp	r1, #31
1925:src/xeq.c     **** 	int idx;
 15617              		.loc 1 1925 46 view .LVU4095
 15618 0002 70B5     		push	{r4, r5, r6, lr}
 15619              		.cfi_def_cfa_offset 16
 15620              		.cfi_offset 4, -16
 15621              		.cfi_offset 5, -12
 15622              		.cfi_offset 6, -8
 15623              		.cfi_offset 14, -4
1925:src/xeq.c     **** 	int idx;
 15624              		.loc 1 1925 46 view .LVU4096
 15625 0004 0546     		mov	r5, r0
1928:src/xeq.c     **** 		idx = regX_idx;
 15626              		.loc 1 1928 5 view .LVU4097
 15627 0006 11D0     		beq	.L1117
1930:src/xeq.c     **** 		idx = regZ_idx;
 15628              		.loc 1 1930 10 view .LVU4098
 15629 0008 2029     		cmp	r1, #32
 15630 000a 0C46     		mov	r4, r1
1930:src/xeq.c     **** 		idx = regZ_idx;
 15631              		.loc 1 1930 7 is_stmt 1 view .LVU4099
1930:src/xeq.c     **** 		idx = regZ_idx;
 15632              		.loc 1 1930 10 is_stmt 0 view .LVU4100
 15633 000c 33D0     		beq	.L1118
1933:src/xeq.c     **** 
 15634              		.loc 1 1933 3 is_stmt 1 view .LVU4101
 15635              	.LVL1123:
1935:src/xeq.c     **** 
 15636              		.loc 1 1935 2 view .LVU4102
 15637 000e 01F15300 		add	r0, r1, #83
 15638              	.LVL1124:
1935:src/xeq.c     **** 
 15639              		.loc 1 1935 2 is_stmt 0 view .LVU4103
 15640 0012 FFF7FEFF 		bl	get_reg_n
 15641              	.LVL1125:
1935:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 443


 15642              		.loc 1 1935 2 view .LVU4104
 15643 0016 0646     		mov	r6, r0
 15644 0018 2846     		mov	r0, r5
 15645 001a FFF7FEFF 		bl	get_reg_n
 15646              	.LVL1126:
 15647 001e 0146     		mov	r1, r0
 15648 0020 3046     		mov	r0, r6
 15649 0022 FFF7FEFF 		bl	swap_reg
 15650              	.LVL1127:
1937:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15651              		.loc 1 1937 2 is_stmt 1 view .LVU4105
1937:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15652              		.loc 1 1937 5 is_stmt 0 view .LVU4106
 15653 0026 1E2C     		cmp	r4, #30
 15654 0028 32D8     		bhi	.L1122
1944:src/xeq.c     **** 
 15655              		.loc 1 1944 1 view .LVU4107
 15656 002a 70BD     		pop	{r4, r5, r6, pc}
 15657              	.LVL1128:
 15658              	.L1117:
1935:src/xeq.c     **** 
 15659              		.loc 1 1935 2 is_stmt 1 view .LVU4108
 15660 002c 6420     		movs	r0, #100
 15661              	.LVL1129:
1935:src/xeq.c     **** 
 15662              		.loc 1 1935 2 is_stmt 0 view .LVU4109
 15663 002e FFF7FEFF 		bl	get_reg_n
 15664              	.LVL1130:
1935:src/xeq.c     **** 
 15665              		.loc 1 1935 2 view .LVU4110
 15666 0032 0446     		mov	r4, r0
 15667 0034 2846     		mov	r0, r5
 15668 0036 FFF7FEFF 		bl	get_reg_n
 15669              	.LVL1131:
 15670 003a 0146     		mov	r1, r0
 15671 003c 2046     		mov	r0, r4
 15672 003e FFF7FEFF 		bl	swap_reg
 15673              	.LVL1132:
1937:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15674              		.loc 1 1937 2 is_stmt 1 view .LVU4111
1935:src/xeq.c     **** 
 15675              		.loc 1 1935 2 is_stmt 0 view .LVU4112
 15676 0042 6520     		movs	r0, #101
 15677              	.LVL1133:
 15678              	.L1120:
1938:src/xeq.c     **** 		set_was_complex();
 15679              		.loc 1 1938 3 is_stmt 1 view .LVU4113
 15680 0044 FFF7FEFF 		bl	get_reg_n
 15681              	.LVL1134:
 15682 0048 0446     		mov	r4, r0
 15683 004a 681C     		adds	r0, r5, #1
 15684 004c FFF7FEFF 		bl	get_reg_n
 15685              	.LVL1135:
 15686 0050 0146     		mov	r1, r0
 15687 0052 2046     		mov	r0, r4
 15688 0054 FFF7FEFF 		bl	swap_reg
 15689              	.LVL1136:
ARM GAS  /tmp/cccVhVyH.s 			page 444


1939:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 15690              		.loc 1 1939 3 view .LVU4114
 15691              	.LBB2816:
 15692              	.LBI2816:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 15693              		.loc 1 539 13 view .LVU4115
 15694              	.LBB2817:
 540:src/xeq.c     **** }
 15695              		.loc 1 540 2 view .LVU4116
 540:src/xeq.c     **** }
 15696              		.loc 1 540 20 is_stmt 0 view .LVU4117
 15697 0058 0F4B     		ldr	r3, .L1123
 15698              	.LBE2817:
 15699              	.LBE2816:
1941:src/xeq.c     **** #endif
 15700              		.loc 1 1941 2 view .LVU4118
 15701 005a 104A     		ldr	r2, .L1123+4
 15702              	.LBB2820:
 15703              	.LBB2818:
 540:src/xeq.c     **** }
 15704              		.loc 1 540 20 view .LVU4119
 15705 005c 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 15706              	.LBE2818:
 15707              	.LBE2820:
1941:src/xeq.c     **** #endif
 15708              		.loc 1 1941 2 view .LVU4120
 15709 005e 1268     		ldr	r2, [r2]
 15710              	.LBB2821:
 15711              	.LBB2819:
 540:src/xeq.c     **** }
 15712              		.loc 1 540 20 view .LVU4121
 15713 0060 0120     		movs	r0, #1
 15714 0062 60F38711 		bfi	r1, r0, #6, #2
 15715 0066 1975     		strb	r1, [r3, #20]
 15716              	.LBE2819:
 15717              	.LBE2821:
1941:src/xeq.c     **** #endif
 15718              		.loc 1 1941 2 is_stmt 1 view .LVU4122
 15719 0068 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 15720 006c 43F01003 		orr	r3, r3, #16
 15721 0070 82F8DE37 		strb	r3, [r2, #2014]
1944:src/xeq.c     **** 
 15722              		.loc 1 1944 1 is_stmt 0 view .LVU4123
 15723 0074 70BD     		pop	{r4, r5, r6, pc}
 15724              	.LVL1137:
 15725              	.L1118:
1935:src/xeq.c     **** 
 15726              		.loc 1 1935 2 is_stmt 1 view .LVU4124
 15727 0076 6620     		movs	r0, #102
 15728              	.LVL1138:
1935:src/xeq.c     **** 
 15729              		.loc 1 1935 2 is_stmt 0 view .LVU4125
 15730 0078 FFF7FEFF 		bl	get_reg_n
 15731              	.LVL1139:
1935:src/xeq.c     **** 
 15732              		.loc 1 1935 2 view .LVU4126
 15733 007c 0446     		mov	r4, r0
ARM GAS  /tmp/cccVhVyH.s 			page 445


 15734 007e 2846     		mov	r0, r5
 15735 0080 FFF7FEFF 		bl	get_reg_n
 15736              	.LVL1140:
 15737 0084 0146     		mov	r1, r0
 15738 0086 2046     		mov	r0, r4
 15739 0088 FFF7FEFF 		bl	swap_reg
 15740              	.LVL1141:
1937:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15741              		.loc 1 1937 2 is_stmt 1 view .LVU4127
1935:src/xeq.c     **** 
 15742              		.loc 1 1935 2 is_stmt 0 view .LVU4128
 15743 008c 6720     		movs	r0, #103
 15744 008e D9E7     		b	.L1120
 15745              	.LVL1142:
 15746              	.L1122:
1935:src/xeq.c     **** 
 15747              		.loc 1 1935 2 view .LVU4129
 15748 0090 04F15400 		add	r0, r4, #84
 15749 0094 D6E7     		b	.L1120
 15750              	.L1124:
 15751 0096 00BF     		.align	2
 15752              	.L1123:
 15753 0098 00000000 		.word	StateWhileOn
 15754 009c 00000000 		.word	main_ram
 15755              		.cfi_endproc
 15756              	.LFE127:
 15758              		.section	.text.cmdview,"ax",%progbits
 15759              		.align	1
 15760              		.p2align 2,,3
 15761              		.global	cmdview
 15762              		.syntax unified
 15763              		.thumb
 15764              		.thumb_func
 15765              		.fpu fpv4-sp-d16
 15767              	cmdview:
 15768              	.LVL1143:
 15769              	.LFB128:
1949:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15770              		.loc 1 1949 46 is_stmt 1 view -0
 15771              		.cfi_startproc
 15772              		@ args = 0, pretend = 0, frame = 0
 15773              		@ frame_needed = 0, uses_anonymous_args = 0
1950:src/xeq.c     **** 
 15774              		.loc 1 1950 2 view .LVU4131
1949:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15775              		.loc 1 1949 46 is_stmt 0 view .LVU4132
 15776 0000 70B5     		push	{r4, r5, r6, lr}
 15777              		.cfi_def_cfa_offset 16
 15778              		.cfi_offset 4, -16
 15779              		.cfi_offset 5, -12
 15780              		.cfi_offset 6, -8
 15781              		.cfi_offset 14, -4
1952:src/xeq.c     **** 	ShowRegister = arg;
 15782              		.loc 1 1952 20 view .LVU4133
 15783 0002 134D     		ldr	r5, .L1131
1953:src/xeq.c     **** 	State2.disp_freeze = 0;
 15784              		.loc 1 1953 15 view .LVU4134
ARM GAS  /tmp/cccVhVyH.s 			page 446


 15785 0004 134A     		ldr	r2, .L1131+4
1952:src/xeq.c     **** 	ShowRegister = arg;
 15786              		.loc 1 1952 20 view .LVU4135
 15787 0006 6B69     		ldr	r3, [r5, #20]
1953:src/xeq.c     **** 	State2.disp_freeze = 0;
 15788              		.loc 1 1953 15 view .LVU4136
 15789 0008 1060     		str	r0, [r2]
1949:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15790              		.loc 1 1949 46 view .LVU4137
 15791 000a 0E46     		mov	r6, r1
 15792              	.LVL1144:
1952:src/xeq.c     **** 	ShowRegister = arg;
 15793              		.loc 1 1952 2 is_stmt 1 view .LVU4138
1953:src/xeq.c     **** 	State2.disp_freeze = 0;
 15794              		.loc 1 1953 2 view .LVU4139
1954:src/xeq.c     **** 	display();
 15795              		.loc 1 1954 2 view .LVU4140
1950:src/xeq.c     **** 
 15796              		.loc 1 1950 41 is_stmt 0 view .LVU4141
 15797 000c A1F19B01 		sub	r1, #155
 15798              	.LVL1145:
1952:src/xeq.c     **** 	ShowRegister = arg;
 15799              		.loc 1 1952 20 view .LVU4142
 15800 0010 23F08053 		bic	r3, r3, #268435456
1950:src/xeq.c     **** 
 15801              		.loc 1 1950 41 view .LVU4143
 15802 0014 B1FA81F1 		clz	r1, r1
 15803 0018 4909     		lsrs	r1, r1, #5
1952:src/xeq.c     **** 	ShowRegister = arg;
 15804              		.loc 1 1952 20 view .LVU4144
 15805 001a 23F0C003 		bic	r3, r3, #192
 15806 001e 43EA8113 		orr	r3, r3, r1, lsl #6
1949:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15807              		.loc 1 1949 46 view .LVU4145
 15808 0022 0446     		mov	r4, r0
1952:src/xeq.c     **** 	ShowRegister = arg;
 15809              		.loc 1 1952 20 view .LVU4146
 15810 0024 6B61     		str	r3, [r5, #20]
1955:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
 15811              		.loc 1 1955 2 is_stmt 1 view .LVU4147
 15812 0026 FFF7FEFF 		bl	display
 15813              	.LVL1146:
1956:src/xeq.c     **** }
 15814              		.loc 1 1956 2 view .LVU4148
1956:src/xeq.c     **** }
 15815              		.loc 1 1956 40 is_stmt 0 view .LVU4149
 15816 002a 9B2E     		cmp	r6, #155
 15817 002c 02D0     		beq	.L1128
1956:src/xeq.c     **** }
 15818              		.loc 1 1956 29 discriminator 2 view .LVU4150
 15819 002e 0A4B     		ldr	r3, .L1131+8
 15820 0030 1B68     		ldr	r3, [r3]
 15821 0032 2BB1     		cbz	r3, .L1130
 15822              	.L1128:
1956:src/xeq.c     **** }
 15823              		.loc 1 1956 21 view .LVU4151
 15824 0034 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
ARM GAS  /tmp/cccVhVyH.s 			page 447


 15825 0036 0124     		movs	r4, #1
 15826              	.LVL1147:
1956:src/xeq.c     **** }
 15827              		.loc 1 1956 21 view .LVU4152
 15828 0038 64F30413 		bfi	r3, r4, #4, #1
 15829 003c EB75     		strb	r3, [r5, #23]
1957:src/xeq.c     **** 
 15830              		.loc 1 1957 1 view .LVU4153
 15831 003e 70BD     		pop	{r4, r5, r6, pc}
 15832              	.LVL1148:
 15833              	.L1130:
1956:src/xeq.c     **** }
 15834              		.loc 1 1956 21 discriminator 4 view .LVU4154
 15835 0040 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
1956:src/xeq.c     **** }
 15836              		.loc 1 1956 40 discriminator 4 view .LVU4155
 15837 0042 643C     		subs	r4, r4, #100
 15838              	.LVL1149:
1956:src/xeq.c     **** }
 15839              		.loc 1 1956 40 discriminator 4 view .LVU4156
 15840 0044 18BF     		it	ne
 15841 0046 0124     		movne	r4, #1
 15842              	.LVL1150:
1956:src/xeq.c     **** }
 15843              		.loc 1 1956 21 discriminator 4 view .LVU4157
 15844 0048 64F30413 		bfi	r3, r4, #4, #1
 15845 004c EB75     		strb	r3, [r5, #23]
1957:src/xeq.c     **** 
 15846              		.loc 1 1957 1 discriminator 4 view .LVU4158
 15847 004e 70BD     		pop	{r4, r5, r6, pc}
 15848              	.L1132:
 15849              		.align	2
 15850              	.L1131:
 15851 0050 00000000 		.word	StateWhileOn
 15852 0054 00000000 		.word	ShowRegister
 15853 0058 00000000 		.word	Running
 15854              		.cfi_endproc
 15855              	.LFE128:
 15857              		.section	.text.get_stack_size,"ax",%progbits
 15858              		.align	1
 15859              		.p2align 2,,3
 15860              		.global	get_stack_size
 15861              		.syntax unified
 15862              		.thumb
 15863              		.thumb_func
 15864              		.fpu fpv4-sp-d16
 15866              	get_stack_size:
 15867              	.LVL1151:
 15868              	.LFB129:
1961:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15869              		.loc 1 1961 36 is_stmt 1 view -0
 15870              		.cfi_startproc
 15871              		@ args = 0, pretend = 0, frame = 0
 15872              		@ frame_needed = 0, uses_anonymous_args = 0
1962:src/xeq.c     **** }
 15873              		.loc 1 1962 2 view .LVU4160
 15874              	.LBB2822:
ARM GAS  /tmp/cccVhVyH.s 			page 448


 15875              	.LBI2822:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 15876              		.loc 1 712 5 view .LVU4161
 15877              	.LBB2823:
 713:src/xeq.c     **** 		return 4;
 15878              		.loc 1 713 2 view .LVU4162
 713:src/xeq.c     **** 		return 4;
 15879              		.loc 1 713 8 is_stmt 0 view .LVU4163
 15880 0000 0F4B     		ldr	r3, .L1140
 15881              	.LBE2823:
 15882              	.LBE2822:
1961:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15883              		.loc 1 1961 36 view .LVU4164
 15884 0002 00B5     		push	{lr}
 15885              		.cfi_def_cfa_offset 4
 15886              		.cfi_offset 14, -4
 15887              	.LBB2829:
 15888              	.LBB2826:
 713:src/xeq.c     **** 		return 4;
 15889              		.loc 1 713 8 view .LVU4165
 15890 0004 1B68     		ldr	r3, [r3]
 713:src/xeq.c     **** 		return 4;
 15891              		.loc 1 713 6 view .LVU4166
 15892 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 15893              		.loc 1 713 5 view .LVU4167
 15894 000a 1207     		lsls	r2, r2, #28
 15895              	.LBE2826:
 15896              	.LBE2829:
1961:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15897              		.loc 1 1961 36 view .LVU4168
 15898 000c 83B0     		sub	sp, sp, #12
 15899              		.cfi_def_cfa_offset 16
 15900              	.LBB2830:
 15901              	.LBB2827:
 713:src/xeq.c     **** 		return 4;
 15902              		.loc 1 713 5 view .LVU4169
 15903 000e 13D5     		bpl	.L1135
 15904              	.LBB2824:
 15905              	.LBI2824:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 15906              		.loc 1 185 5 is_stmt 1 view .LVU4170
 15907              	.LBB2825:
 186:src/xeq.c     **** }
 15908              		.loc 1 186 2 view .LVU4171
 186:src/xeq.c     **** }
 15909              		.loc 1 186 9 is_stmt 0 view .LVU4172
 15910 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 15911              	.LBE2825:
 15912              	.LBE2824:
 713:src/xeq.c     **** 		return 4;
 15913              		.loc 1 713 27 view .LVU4173
 15914 0014 9B0B     		lsrs	r3, r3, #14
 15915 0016 032B     		cmp	r3, #3
 15916 0018 09D0     		beq	.L1139
 15917              	.L1137:
 15918 001a 0822     		movs	r2, #8
ARM GAS  /tmp/cccVhVyH.s 			page 449


 15919 001c 0023     		movs	r3, #0
 15920              	.L1134:
 15921              	.LVL1152:
 713:src/xeq.c     **** 		return 4;
 15922              		.loc 1 713 27 view .LVU4174
 15923              	.LBE2827:
 15924              	.LBE2830:
 15925              	.LBB2831:
 15926              	.LBI2831:
1512:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15927              		.loc 1 1512 6 is_stmt 1 view .LVU4175
 15928              	.LBB2832:
1513:src/xeq.c     **** }
 15929              		.loc 1 1513 2 view .LVU4176
 15930 001e 0021     		movs	r1, #0
 15931 0020 0091     		str	r1, [sp]
 15932 0022 6420     		movs	r0, #100
 15933              	.LVL1153:
1513:src/xeq.c     **** }
 15934              		.loc 1 1513 2 is_stmt 0 view .LVU4177
 15935 0024 FFF7FEFF 		bl	set_reg_n_int_sgn
 15936              	.LVL1154:
1513:src/xeq.c     **** }
 15937              		.loc 1 1513 2 view .LVU4178
 15938              	.LBE2832:
 15939              	.LBE2831:
1963:src/xeq.c     **** 
 15940              		.loc 1 1963 1 view .LVU4179
 15941 0028 03B0     		add	sp, sp, #12
 15942              		.cfi_remember_state
 15943              		.cfi_def_cfa_offset 4
 15944              		@ sp needed
 15945 002a 5DF804FB 		ldr	pc, [sp], #4
 15946              	.LVL1155:
 15947              	.L1139:
 15948              		.cfi_restore_state
 15949              	.LBB2833:
 15950              	.LBB2828:
 713:src/xeq.c     **** 		return 4;
 15951              		.loc 1 713 44 view .LVU4180
 15952 002e 054B     		ldr	r3, .L1140+4
 713:src/xeq.c     **** 		return 4;
 15953              		.loc 1 713 41 view .LVU4181
 15954 0030 93F90130 		ldrsb	r3, [r3, #1]
 15955 0034 002B     		cmp	r3, #0
 15956 0036 F0DB     		blt	.L1137
 15957              	.L1135:
 15958 0038 0422     		movs	r2, #4
 15959 003a 0023     		movs	r3, #0
 15960 003c EFE7     		b	.L1134
 15961              	.L1141:
 15962 003e 00BF     		.align	2
 15963              	.L1140:
 15964 0040 00000000 		.word	main_ram
 15965 0044 00000000 		.word	XromParams
 15966              	.LBE2828:
 15967              	.LBE2833:
ARM GAS  /tmp/cccVhVyH.s 			page 450


 15968              		.cfi_endproc
 15969              	.LFE129:
 15971              		.section	.text.get_word_size,"ax",%progbits
 15972              		.align	1
 15973              		.p2align 2,,3
 15974              		.global	get_word_size
 15975              		.syntax unified
 15976              		.thumb
 15977              		.thumb_func
 15978              		.fpu fpv4-sp-d16
 15980              	get_word_size:
 15981              	.LVL1156:
 15982              	.LFB130:
1965:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 15983              		.loc 1 1965 35 is_stmt 1 view -0
 15984              		.cfi_startproc
 15985              		@ args = 0, pretend = 0, frame = 0
 15986              		@ frame_needed = 0, uses_anonymous_args = 0
1966:src/xeq.c     **** }
 15987              		.loc 1 1966 2 view .LVU4183
1965:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 15988              		.loc 1 1965 35 is_stmt 0 view .LVU4184
 15989 0000 00B5     		push	{lr}
 15990              		.cfi_def_cfa_offset 4
 15991              		.cfi_offset 14, -4
 15992 0002 83B0     		sub	sp, sp, #12
 15993              		.cfi_def_cfa_offset 16
1966:src/xeq.c     **** }
 15994              		.loc 1 1966 20 view .LVU4185
 15995 0004 FFF7FEFF 		bl	word_size
 15996              	.LVL1157:
 15997              	.LBB2834:
 15998              	.LBI2834:
1512:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15999              		.loc 1 1512 6 is_stmt 1 view .LVU4186
 16000              	.LBB2835:
1513:src/xeq.c     **** }
 16001              		.loc 1 1513 2 view .LVU4187
 16002 0008 0021     		movs	r1, #0
 16003 000a 0246     		mov	r2, r0
 16004 000c C317     		asrs	r3, r0, #31
 16005 000e 0091     		str	r1, [sp]
 16006 0010 6420     		movs	r0, #100
 16007              	.LVL1158:
1513:src/xeq.c     **** }
 16008              		.loc 1 1513 2 is_stmt 0 view .LVU4188
 16009 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 16010              	.LVL1159:
1513:src/xeq.c     **** }
 16011              		.loc 1 1513 2 view .LVU4189
 16012              	.LBE2835:
 16013              	.LBE2834:
1967:src/xeq.c     **** 
 16014              		.loc 1 1967 1 view .LVU4190
 16015 0016 03B0     		add	sp, sp, #12
 16016              		.cfi_def_cfa_offset 4
 16017              		@ sp needed
ARM GAS  /tmp/cccVhVyH.s 			page 451


 16018 0018 5DF804FB 		ldr	pc, [sp], #4
 16019              		.cfi_endproc
 16020              	.LFE130:
 16022              		.section	.text.get_sign_mode,"ax",%progbits
 16023              		.align	1
 16024              		.p2align 2,,3
 16025              		.global	get_sign_mode
 16026              		.syntax unified
 16027              		.thumb
 16028              		.thumb_func
 16029              		.fpu fpv4-sp-d16
 16031              	get_sign_mode:
 16032              	.LVL1160:
 16033              	.LFB131:
1969:src/xeq.c     **** 	static const unsigned char modes[4] = {
 16034              		.loc 1 1969 35 is_stmt 1 view -0
 16035              		.cfi_startproc
 16036              		@ args = 0, pretend = 0, frame = 0
 16037              		@ frame_needed = 0, uses_anonymous_args = 0
1970:src/xeq.c     **** 		0x02,		// 2's complement
 16038              		.loc 1 1970 2 view .LVU4192
1976:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 16039              		.loc 1 1976 2 view .LVU4193
1969:src/xeq.c     **** 	static const unsigned char modes[4] = {
 16040              		.loc 1 1969 35 is_stmt 0 view .LVU4194
 16041 0000 00B5     		push	{lr}
 16042              		.cfi_def_cfa_offset 4
 16043              		.cfi_offset 14, -4
 16044 0002 83B0     		sub	sp, sp, #12
 16045              		.cfi_def_cfa_offset 16
1976:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 16046              		.loc 1 1976 37 view .LVU4195
 16047 0004 FFF7FEFF 		bl	int_mode
 16048              	.LVL1161:
1976:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 16049              		.loc 1 1976 22 view .LVU4196
 16050 0008 064B     		ldr	r3, .L1146
 16051 000a 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
 16052              	.LVL1162:
1977:src/xeq.c     **** }
 16053              		.loc 1 1977 2 is_stmt 1 view .LVU4197
 16054              	.LBB2836:
 16055              	.LBI2836:
1512:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16056              		.loc 1 1512 6 view .LVU4198
 16057              	.LBB2837:
1513:src/xeq.c     **** }
 16058              		.loc 1 1513 2 view .LVU4199
 16059              	.LBE2837:
 16060              	.LBE2836:
1977:src/xeq.c     **** }
 16061              		.loc 1 1977 2 is_stmt 0 view .LVU4200
 16062 000c 03F00302 		and	r2, r3, #3
 16063 0010 03F08003 		and	r3, r3, #128
 16064              	.LVL1163:
1977:src/xeq.c     **** }
 16065              		.loc 1 1977 2 view .LVU4201
ARM GAS  /tmp/cccVhVyH.s 			page 452


 16066 0014 0093     		str	r3, [sp]
 16067              	.LBB2839:
 16068              	.LBB2838:
1513:src/xeq.c     **** }
 16069              		.loc 1 1513 2 view .LVU4202
 16070 0016 6420     		movs	r0, #100
 16071              	.LVL1164:
1513:src/xeq.c     **** }
 16072              		.loc 1 1513 2 view .LVU4203
 16073 0018 0023     		movs	r3, #0
 16074 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 16075              	.LVL1165:
1513:src/xeq.c     **** }
 16076              		.loc 1 1513 2 view .LVU4204
 16077              	.LBE2838:
 16078              	.LBE2839:
1978:src/xeq.c     **** 
 16079              		.loc 1 1978 1 view .LVU4205
 16080 001e 03B0     		add	sp, sp, #12
 16081              		.cfi_def_cfa_offset 4
 16082              		@ sp needed
 16083 0020 5DF804FB 		ldr	pc, [sp], #4
 16084              	.L1147:
 16085              		.align	2
 16086              	.L1146:
 16087 0024 00000000 		.word	.LANCHOR4
 16088              		.cfi_endproc
 16089              	.LFE131:
 16091              		.section	.text.get_base,"ax",%progbits
 16092              		.align	1
 16093              		.p2align 2,,3
 16094              		.global	get_base
 16095              		.syntax unified
 16096              		.thumb
 16097              		.thumb_func
 16098              		.fpu fpv4-sp-d16
 16100              	get_base:
 16101              	.LVL1166:
 16102              	.LFB132:
1980:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 16103              		.loc 1 1980 30 is_stmt 1 view -0
 16104              		.cfi_startproc
 16105              		@ args = 0, pretend = 0, frame = 0
 16106              		@ frame_needed = 0, uses_anonymous_args = 0
1981:src/xeq.c     **** }
 16107              		.loc 1 1981 2 view .LVU4207
1980:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 16108              		.loc 1 1980 30 is_stmt 0 view .LVU4208
 16109 0000 00B5     		push	{lr}
 16110              		.cfi_def_cfa_offset 4
 16111              		.cfi_offset 14, -4
 16112 0002 83B0     		sub	sp, sp, #12
 16113              		.cfi_def_cfa_offset 16
1981:src/xeq.c     **** }
 16114              		.loc 1 1981 20 view .LVU4209
 16115 0004 FFF7FEFF 		bl	int_base
 16116              	.LVL1167:
ARM GAS  /tmp/cccVhVyH.s 			page 453


 16117              	.LBB2840:
 16118              	.LBI2840:
1512:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16119              		.loc 1 1512 6 is_stmt 1 view .LVU4210
 16120              	.LBB2841:
1513:src/xeq.c     **** }
 16121              		.loc 1 1513 2 view .LVU4211
 16122 0008 0021     		movs	r1, #0
 16123 000a 0246     		mov	r2, r0
 16124 000c C317     		asrs	r3, r0, #31
 16125 000e 0091     		str	r1, [sp]
 16126 0010 6420     		movs	r0, #100
 16127              	.LVL1168:
1513:src/xeq.c     **** }
 16128              		.loc 1 1513 2 is_stmt 0 view .LVU4212
 16129 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 16130              	.LVL1169:
1513:src/xeq.c     **** }
 16131              		.loc 1 1513 2 view .LVU4213
 16132              	.LBE2841:
 16133              	.LBE2840:
1982:src/xeq.c     **** 
 16134              		.loc 1 1982 1 view .LVU4214
 16135 0016 03B0     		add	sp, sp, #12
 16136              		.cfi_def_cfa_offset 4
 16137              		@ sp needed
 16138 0018 5DF804FB 		ldr	pc, [sp], #4
 16139              		.cfi_endproc
 16140              	.LFE132:
 16142              		.section	.text.DM42_Ticker,"ax",%progbits
 16143              		.align	1
 16144              		.p2align 2,,3
 16145              		.global	DM42_Ticker
 16146              		.syntax unified
 16147              		.thumb
 16148              		.thumb_func
 16149              		.fpu fpv4-sp-d16
 16151              	DM42_Ticker:
 16152              	.LFB133:
1985:src/xeq.c     ****     long int f, t;
 16153              		.loc 1 1985 26 is_stmt 1 view -0
 16154              		.cfi_startproc
 16155              		@ args = 0, pretend = 0, frame = 0
 16156              		@ frame_needed = 0, uses_anonymous_args = 0
1986:src/xeq.c     ****     t = get_rtc_ticks();
 16157              		.loc 1 1986 5 view .LVU4216
1987:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16158              		.loc 1 1987 5 view .LVU4217
1985:src/xeq.c     ****     long int f, t;
 16159              		.loc 1 1985 26 is_stmt 0 view .LVU4218
 16160 0000 08B5     		push	{r3, lr}
 16161              		.cfi_def_cfa_offset 8
 16162              		.cfi_offset 3, -8
 16163              		.cfi_offset 14, -4
1987:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16164              		.loc 1 1987 9 view .LVU4219
 16165 0002 044B     		ldr	r3, .L1152
ARM GAS  /tmp/cccVhVyH.s 			page 454


 16166 0004 9847     		blx	r3
 16167              	.LVL1170:
1988:src/xeq.c     ****     return f;
 16168              		.loc 1 1988 5 is_stmt 1 view .LVU4220
1989:src/xeq.c     ****  }
 16169              		.loc 1 1989 5 view .LVU4221
1988:src/xeq.c     ****     return f;
 16170              		.loc 1 1988 13 is_stmt 0 view .LVU4222
 16171 0006 C0F31300 		ubfx	r0, r0, #0, #20
 16172              	.LVL1171:
1988:src/xeq.c     ****     return f;
 16173              		.loc 1 1988 23 view .LVU4223
 16174 000a 00EB8000 		add	r0, r0, r0, lsl #2
1990:src/xeq.c     **** #endif
 16175              		.loc 1 1990 2 view .LVU4224
 16176 000e C009     		lsrs	r0, r0, #7
 16177 0010 08BD     		pop	{r3, pc}
 16178              	.L1153:
 16179 0012 00BF     		.align	2
 16180              	.L1152:
 16181 0014 B9040008 		.word	134218937
 16182              		.cfi_endproc
 16183              	.LFE133:
 16185              		.section	.text.op_ticks,"ax",%progbits
 16186              		.align	1
 16187              		.p2align 2,,3
 16188              		.global	op_ticks
 16189              		.syntax unified
 16190              		.thumb
 16191              		.thumb_func
 16192              		.fpu fpv4-sp-d16
 16194              	op_ticks:
 16195              	.LVL1172:
 16196              	.LFB134:
1993:src/xeq.c     **** #if !defined(CONSOLE)
 16197              		.loc 1 1993 30 is_stmt 1 view -0
 16198              		.cfi_startproc
 16199              		@ args = 0, pretend = 0, frame = 0
 16200              		@ frame_needed = 0, uses_anonymous_args = 0
1995:src/xeq.c     **** #else 
 16201              		.loc 1 1995 5 view .LVU4226
 16202              	.LBB2842:
 16203              	.LBI2842:
1985:src/xeq.c     ****     long int f, t;
 16204              		.loc 1 1985 11 view .LVU4227
 16205              	.LBB2843:
1986:src/xeq.c     ****     t = get_rtc_ticks();
 16206              		.loc 1 1986 5 view .LVU4228
1987:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16207              		.loc 1 1987 5 view .LVU4229
 16208              	.LBE2843:
 16209              	.LBE2842:
1993:src/xeq.c     **** #if !defined(CONSOLE)
 16210              		.loc 1 1993 30 is_stmt 0 view .LVU4230
 16211 0000 00B5     		push	{lr}
 16212              		.cfi_def_cfa_offset 4
 16213              		.cfi_offset 14, -4
ARM GAS  /tmp/cccVhVyH.s 			page 455


 16214              	.LBB2847:
 16215              	.LBB2844:
1987:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16216              		.loc 1 1987 9 view .LVU4231
 16217 0002 084B     		ldr	r3, .L1156
 16218              	.LBE2844:
 16219              	.LBE2847:
1993:src/xeq.c     **** #if !defined(CONSOLE)
 16220              		.loc 1 1993 30 view .LVU4232
 16221 0004 83B0     		sub	sp, sp, #12
 16222              		.cfi_def_cfa_offset 16
 16223              	.LBB2848:
 16224              	.LBB2845:
1987:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16225              		.loc 1 1987 9 view .LVU4233
 16226 0006 9847     		blx	r3
 16227              	.LVL1173:
1988:src/xeq.c     ****     return f;
 16228              		.loc 1 1988 5 is_stmt 1 view .LVU4234
1989:src/xeq.c     ****  }
 16229              		.loc 1 1989 5 view .LVU4235
1989:src/xeq.c     ****  }
 16230              		.loc 1 1989 5 is_stmt 0 view .LVU4236
 16231              	.LBE2845:
 16232              	.LBE2848:
 16233              	.LBB2849:
 16234              	.LBI2849:
1512:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16235              		.loc 1 1512 6 is_stmt 1 view .LVU4237
 16236              	.LBB2850:
1513:src/xeq.c     **** }
 16237              		.loc 1 1513 2 view .LVU4238
 16238              	.LBE2850:
 16239              	.LBE2849:
 16240              	.LBB2852:
 16241              	.LBB2846:
1988:src/xeq.c     ****     return f;
 16242              		.loc 1 1988 13 is_stmt 0 view .LVU4239
 16243 0008 C0F31300 		ubfx	r0, r0, #0, #20
 16244              	.LVL1174:
1988:src/xeq.c     ****     return f;
 16245              		.loc 1 1988 23 view .LVU4240
 16246 000c 00EB8000 		add	r0, r0, r0, lsl #2
1988:src/xeq.c     ****     return f;
 16247              		.loc 1 1988 7 view .LVU4241
 16248 0010 C209     		lsrs	r2, r0, #7
 16249              	.LBE2846:
 16250              	.LBE2852:
 16251              	.LBB2853:
 16252              	.LBB2851:
1513:src/xeq.c     **** }
 16253              		.loc 1 1513 2 view .LVU4242
 16254 0012 0021     		movs	r1, #0
 16255 0014 D317     		asrs	r3, r2, #31
 16256 0016 0091     		str	r1, [sp]
 16257 0018 6420     		movs	r0, #100
 16258 001a FFF7FEFF 		bl	set_reg_n_int_sgn
ARM GAS  /tmp/cccVhVyH.s 			page 456


 16259              	.LVL1175:
1513:src/xeq.c     **** }
 16260              		.loc 1 1513 2 view .LVU4243
 16261              	.LBE2851:
 16262              	.LBE2853:
2003:src/xeq.c     **** 
 16263              		.loc 1 2003 1 view .LVU4244
 16264 001e 03B0     		add	sp, sp, #12
 16265              		.cfi_def_cfa_offset 4
 16266              		@ sp needed
 16267 0020 5DF804FB 		ldr	pc, [sp], #4
 16268              	.L1157:
 16269              		.align	2
 16270              	.L1156:
 16271 0024 B9040008 		.word	134218937
 16272              		.cfi_endproc
 16273              	.LFE134:
 16275              		.section	.text.op_voltage,"ax",%progbits
 16276              		.align	1
 16277              		.p2align 2,,3
 16278              		.global	op_voltage
 16279              		.syntax unified
 16280              		.thumb
 16281              		.thumb_func
 16282              		.fpu fpv4-sp-d16
 16284              	op_voltage:
 16285              	.LVL1176:
 16286              	.LFB135:
2006:src/xeq.c     **** 	decNumber t, u;
 16287              		.loc 1 2006 32 is_stmt 1 view -0
 16288              		.cfi_startproc
 16289              		@ args = 0, pretend = 0, frame = 72
 16290              		@ frame_needed = 0, uses_anonymous_args = 0
2007:src/xeq.c     **** #ifdef REALBUILD
 16291              		.loc 1 2007 2 view .LVU4246
2011:src/xeq.c     **** 	v = v / 100;
 16292              		.loc 1 2011 2 view .LVU4247
2006:src/xeq.c     **** 	decNumber t, u;
 16293              		.loc 1 2006 32 is_stmt 0 view .LVU4248
 16294 0000 00B5     		push	{lr}
 16295              		.cfi_def_cfa_offset 4
 16296              		.cfi_offset 14, -4
2011:src/xeq.c     **** 	v = v / 100;
 16297              		.loc 1 2011 10 view .LVU4249
 16298 0002 154B     		ldr	r3, .L1162
2006:src/xeq.c     **** 	decNumber t, u;
 16299              		.loc 1 2006 32 view .LVU4250
 16300 0004 95B0     		sub	sp, sp, #84
 16301              		.cfi_def_cfa_offset 88
2011:src/xeq.c     **** 	v = v / 100;
 16302              		.loc 1 2011 10 view .LVU4251
 16303 0006 9847     		blx	r3
 16304              	.LVL1177:
2017:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16305              		.loc 1 2017 6 view .LVU4252
 16306 0008 144B     		ldr	r3, .L1162+4
2012:src/xeq.c     **** #else
ARM GAS  /tmp/cccVhVyH.s 			page 457


 16307              		.loc 1 2012 4 view .LVU4253
 16308 000a 154A     		ldr	r2, .L1162+8
2017:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16309              		.loc 1 2017 6 view .LVU4254
 16310 000c 1B68     		ldr	r3, [r3]
 16311              	.LVL1178:
2012:src/xeq.c     **** #else
 16312              		.loc 1 2012 2 is_stmt 1 view .LVU4255
2017:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16313              		.loc 1 2017 6 is_stmt 0 view .LVU4256
 16314 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2012:src/xeq.c     **** #else
 16315              		.loc 1 2012 4 view .LVU4257
 16316 0012 82FB0012 		smull	r1, r2, r2, r0
2017:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16317              		.loc 1 2017 5 view .LVU4258
 16318 0016 DB07     		lsls	r3, r3, #31
2012:src/xeq.c     **** #else
 16319              		.loc 1 2012 4 view .LVU4259
 16320 0018 4FEAE070 		asr	r0, r0, #31
 16321              	.LVL1179:
2012:src/xeq.c     **** #else
 16322              		.loc 1 2012 4 view .LVU4260
 16323 001c C0EB6212 		rsb	r2, r0, r2, asr #5
 16324              	.LVL1180:
2017:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16325              		.loc 1 2017 2 is_stmt 1 view .LVU4261
2017:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16326              		.loc 1 2017 5 is_stmt 0 view .LVU4262
 16327 0020 08D5     		bpl	.L1159
2018:src/xeq.c     **** 	} else {
 16328              		.loc 1 2018 3 is_stmt 1 view .LVU4263
 16329              	.LVL1181:
 16330              	.LBB2854:
 16331              	.LBI2854:
1512:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16332              		.loc 1 1512 6 view .LVU4264
 16333              	.LBB2855:
1513:src/xeq.c     **** }
 16334              		.loc 1 1513 2 view .LVU4265
 16335 0022 0023     		movs	r3, #0
 16336 0024 0093     		str	r3, [sp]
 16337 0026 6420     		movs	r0, #100
 16338 0028 D317     		asrs	r3, r2, #31
 16339 002a FFF7FEFF 		bl	set_reg_n_int_sgn
 16340              	.LVL1182:
1513:src/xeq.c     **** }
 16341              		.loc 1 1513 2 is_stmt 0 view .LVU4266
 16342              	.LBE2855:
 16343              	.LBE2854:
2024:src/xeq.c     **** 
 16344              		.loc 1 2024 1 view .LVU4267
 16345 002e 15B0     		add	sp, sp, #84
 16346              		.cfi_remember_state
 16347              		.cfi_def_cfa_offset 4
 16348              		@ sp needed
 16349 0030 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/cccVhVyH.s 			page 458


 16350              	.LVL1183:
 16351              	.L1159:
 16352              		.cfi_restore_state
2020:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
 16353              		.loc 1 2020 3 is_stmt 1 view .LVU4268
 16354 0034 D317     		asrs	r3, r2, #31
 16355 0036 02A8     		add	r0, sp, #8
 16356 0038 FFF7FEFF 		bl	ullint_to_dn
 16357              	.LVL1184:
2021:src/xeq.c     **** 		setX(&u);
 16358              		.loc 1 2021 3 view .LVU4269
 16359 003c 02A9     		add	r1, sp, #8
 16360 003e 4FF0FF32 		mov	r2, #-1
 16361 0042 0BA8     		add	r0, sp, #44
 16362 0044 FFF7FEFF 		bl	dn_mulpow10
 16363              	.LVL1185:
2022:src/xeq.c     **** 	}
 16364              		.loc 1 2022 3 view .LVU4270
 16365              	.LBB2856:
 16366              	.LBI2856:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 16367              		.loc 1 828 6 view .LVU4271
 16368              	.LBB2857:
 829:src/xeq.c     **** }
 16369              		.loc 1 829 2 view .LVU4272
 16370 0048 0BA9     		add	r1, sp, #44
 16371              	.LVL1186:
 829:src/xeq.c     **** }
 16372              		.loc 1 829 2 is_stmt 0 view .LVU4273
 16373 004a 6420     		movs	r0, #100
 16374 004c FFF7FEFF 		bl	setRegister
 16375              	.LVL1187:
 829:src/xeq.c     **** }
 16376              		.loc 1 829 2 view .LVU4274
 16377              	.LBE2857:
 16378              	.LBE2856:
2024:src/xeq.c     **** 
 16379              		.loc 1 2024 1 view .LVU4275
 16380 0050 15B0     		add	sp, sp, #84
 16381              		.cfi_def_cfa_offset 4
 16382              		@ sp needed
 16383 0052 5DF804FB 		ldr	pc, [sp], #4
 16384              	.L1163:
 16385 0056 00BF     		.align	2
 16386              	.L1162:
 16387 0058 F1020008 		.word	134218481
 16388 005c 00000000 		.word	main_ram
 16389 0060 1F85EB51 		.word	1374389535
 16390              		.cfi_endproc
 16391              	.LFE135:
 16393              		.section	.text.free_mem,"ax",%progbits
 16394              		.align	1
 16395              		.p2align 2,,3
 16396              		.global	free_mem
 16397              		.syntax unified
 16398              		.thumb
 16399              		.thumb_func
ARM GAS  /tmp/cccVhVyH.s 			page 459


 16400              		.fpu fpv4-sp-d16
 16402              	free_mem:
 16403              	.LFB136:
2029:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 16404              		.loc 1 2029 20 is_stmt 1 view -0
 16405              		.cfi_startproc
 16406              		@ args = 0, pretend = 0, frame = 0
 16407              		@ frame_needed = 0, uses_anonymous_args = 0
 16408              		@ link register save eliminated.
2030:src/xeq.c     **** }
 16409              		.loc 1 2030 2 view .LVU4277
2030:src/xeq.c     **** }
 16410              		.loc 1 2030 22 is_stmt 0 view .LVU4278
 16411 0000 034A     		ldr	r2, .L1165
2030:src/xeq.c     **** }
 16412              		.loc 1 2030 20 view .LVU4279
 16413 0002 044B     		ldr	r3, .L1165+4
2030:src/xeq.c     **** }
 16414              		.loc 1 2030 22 view .LVU4280
 16415 0004 1268     		ldr	r2, [r2]
2030:src/xeq.c     **** }
 16416              		.loc 1 2030 20 view .LVU4281
 16417 0006 1B68     		ldr	r3, [r3]
2030:src/xeq.c     **** }
 16418              		.loc 1 2030 22 view .LVU4282
 16419 0008 B2F9E207 		ldrsh	r0, [r2, #2018]
2031:src/xeq.c     **** 
 16420              		.loc 1 2031 1 view .LVU4283
 16421 000c 1844     		add	r0, r0, r3
 16422 000e 7047     		bx	lr
 16423              	.L1166:
 16424              		.align	2
 16425              	.L1165:
 16426 0010 00000000 		.word	main_ram
 16427 0014 00000000 		.word	RetStkSize
 16428              		.cfi_endproc
 16429              	.LFE136:
 16431              		.section	.text.free_flash,"ax",%progbits
 16432              		.align	1
 16433              		.p2align 2,,3
 16434              		.global	free_flash
 16435              		.syntax unified
 16436              		.thumb
 16437              		.thumb_func
 16438              		.fpu fpv4-sp-d16
 16440              	free_flash:
 16441              	.LFB137:
2033:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 16442              		.loc 1 2033 22 is_stmt 1 view -0
 16443              		.cfi_startproc
 16444              		@ args = 0, pretend = 0, frame = 0
 16445              		@ frame_needed = 0, uses_anonymous_args = 0
 16446              		@ link register save eliminated.
2034:src/xeq.c     **** }
 16447              		.loc 1 2034 2 view .LVU4285
2034:src/xeq.c     **** }
 16448              		.loc 1 2034 38 is_stmt 0 view .LVU4286
ARM GAS  /tmp/cccVhVyH.s 			page 460


 16449 0000 034B     		ldr	r3, .L1168
 16450 0002 1B68     		ldr	r3, [r3]
 16451 0004 5888     		ldrh	r0, [r3, #2]
2035:src/xeq.c     **** 
 16452              		.loc 1 2035 1 view .LVU4287
 16453 0006 C0F5FF50 		rsb	r0, r0, #8160
 16454 000a 1E30     		adds	r0, r0, #30
 16455 000c 7047     		bx	lr
 16456              	.L1169:
 16457 000e 00BF     		.align	2
 16458              	.L1168:
 16459 0010 00000000 		.word	library_ram
 16460              		.cfi_endproc
 16461              	.LFE137:
 16463              		.section	.text.get_mem,"ax",%progbits
 16464              		.align	1
 16465              		.p2align 2,,3
 16466              		.global	get_mem
 16467              		.syntax unified
 16468              		.thumb
 16469              		.thumb_func
 16470              		.fpu fpv4-sp-d16
 16472              	get_mem:
 16473              	.LVL1188:
 16474              	.LFB138:
2037:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16475              		.loc 1 2037 29 is_stmt 1 view -0
 16476              		.cfi_startproc
 16477              		@ args = 0, pretend = 0, frame = 0
 16478              		@ frame_needed = 0, uses_anonymous_args = 0
2038:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16479              		.loc 1 2038 2 view .LVU4289
2037:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16480              		.loc 1 2037 29 is_stmt 0 view .LVU4290
 16481 0000 00B5     		push	{lr}
 16482              		.cfi_def_cfa_offset 4
 16483              		.cfi_offset 14, -4
2038:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16484              		.loc 1 2038 2 view .LVU4291
 16485 0002 A928     		cmp	r0, #169
2037:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16486              		.loc 1 2037 29 view .LVU4292
 16487 0004 83B0     		sub	sp, sp, #12
 16488              		.cfi_def_cfa_offset 16
2038:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16489              		.loc 1 2038 2 view .LVU4293
 16490 0006 25D0     		beq	.L1179
2038:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16491              		.loc 1 2038 2 discriminator 2 view .LVU4294
 16492 0008 AA28     		cmp	r0, #170
 16493 000a 18D0     		beq	.L1180
2038:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16494              		.loc 1 2038 2 discriminator 5 view .LVU4295
 16495 000c AC28     		cmp	r0, #172
 16496 000e 3ED0     		beq	.L1181
 16497              	.LBB2858:
 16498              	.LBI2858:
ARM GAS  /tmp/cccVhVyH.s 			page 461


 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 16499              		.loc 1 253 14 is_stmt 1 view .LVU4296
 16500              	.LBE2858:
 254:src/xeq.c     **** }
 16501              		.loc 1 254 2 view .LVU4297
 16502              	.LVL1189:
 16503              	.LBB2867:
 16504              	.LBB2859:
 16505              	.LBI2859:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 16506              		.loc 1 241 14 view .LVU4298
 16507              	.LBB2860:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 16508              		.loc 1 242 2 view .LVU4299
 16509              	.LBB2861:
 16510              	.LBI2861:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 16511              		.loc 1 1121 5 view .LVU4300
 16512              	.LBB2862:
1122:src/xeq.c     **** }
 16513              		.loc 1 1122 2 view .LVU4301
1122:src/xeq.c     **** }
 16514              		.loc 1 1122 12 is_stmt 0 view .LVU4302
 16515 0010 234B     		ldr	r3, .L1183
 16516 0012 1A68     		ldr	r2, [r3]
1122:src/xeq.c     **** }
 16517              		.loc 1 1122 24 view .LVU4303
 16518 0014 B2F8E817 		ldrh	r1, [r2, #2024]
 16519              	.LBE2862:
 16520              	.LBE2861:
 16521              	.LBB2864:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16522              		.loc 1 243 24 view .LVU4304
 16523 0018 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 16524              	.LBE2864:
 16525              	.LBB2865:
 16526              	.LBB2863:
1122:src/xeq.c     **** }
 16527              		.loc 1 1122 24 view .LVU4305
 16528 001c 44F20103 		movw	r3, #16385
 16529              	.LBE2863:
 16530              	.LBE2865:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 16531              		.loc 1 242 5 view .LVU4306
 16532 0020 0B40     		ands	r3, r3, r1
 16533 0022 B3F5804F 		cmp	r3, #16384
 16534              	.LBB2866:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16535              		.loc 1 243 3 is_stmt 1 view .LVU4307
 16536              	.LVL1190:
 244:src/xeq.c     **** 	}
 16537              		.loc 1 244 3 view .LVU4308
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16538              		.loc 1 243 13 is_stmt 0 view .LVU4309
 16539 0026 04BF     		itt	eq
 16540 0028 0C3A     		subeq	r2, r2, #12
 16541              	.LVL1191:
ARM GAS  /tmp/cccVhVyH.s 			page 462


 244:src/xeq.c     **** 	}
 16542              		.loc 1 244 67 view .LVU4310
 16543 002a 5210     		asreq	r2, r2, #1
 16544              	.LBE2866:
 247:src/xeq.c     **** }
 16545              		.loc 1 247 3 is_stmt 1 view .LVU4311
 16546 002c 0023     		movs	r3, #0
 16547              	.LVL1192:
 16548              	.L1172:
 247:src/xeq.c     **** }
 16549              		.loc 1 247 3 is_stmt 0 view .LVU4312
 16550              	.LBE2860:
 16551              	.LBE2859:
 16552              	.LBE2867:
 16553              	.LBB2868:
 16554              	.LBI2868:
1512:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16555              		.loc 1 1512 6 is_stmt 1 discriminator 10 view .LVU4313
 16556              	.LBB2869:
1513:src/xeq.c     **** }
 16557              		.loc 1 1513 2 discriminator 10 view .LVU4314
 16558 002e 0021     		movs	r1, #0
 16559 0030 0091     		str	r1, [sp]
 16560 0032 6420     		movs	r0, #100
 16561 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 16562              	.LVL1193:
1513:src/xeq.c     **** }
 16563              		.loc 1 1513 2 is_stmt 0 discriminator 10 view .LVU4315
 16564              	.LBE2869:
 16565              	.LBE2868:
2043:src/xeq.c     **** 
 16566              		.loc 1 2043 1 discriminator 10 view .LVU4316
 16567 0038 03B0     		add	sp, sp, #12
 16568              		.cfi_remember_state
 16569              		.cfi_def_cfa_offset 4
 16570              		@ sp needed
 16571 003a 5DF804FB 		ldr	pc, [sp], #4
 16572              	.LVL1194:
 16573              	.L1180:
 16574              		.cfi_restore_state
 16575              	.LBB2870:
 16576              	.LBI2870:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 16577              		.loc 1 233 5 is_stmt 1 view .LVU4317
 16578              	.LBE2870:
 234:src/xeq.c     **** }
 16579              		.loc 1 234 2 view .LVU4318
 16580              	.LBB2891:
 16581              	.LBB2871:
 16582              	.LBI2871:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 16583              		.loc 1 225 5 view .LVU4319
 16584              	.LBB2872:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16585              		.loc 1 226 2 view .LVU4320
 16586              	.LBB2873:
 16587              	.LBI2873:
ARM GAS  /tmp/cccVhVyH.s 			page 463


1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 16588              		.loc 1 1121 5 view .LVU4321
 16589              	.LBB2874:
1122:src/xeq.c     **** }
 16590              		.loc 1 1122 2 view .LVU4322
1122:src/xeq.c     **** }
 16591              		.loc 1 1122 12 is_stmt 0 view .LVU4323
 16592 003e 184B     		ldr	r3, .L1183
 16593 0040 1A68     		ldr	r2, [r3]
 16594              	.LVL1195:
1122:src/xeq.c     **** }
 16595              		.loc 1 1122 12 view .LVU4324
 16596              	.LBE2874:
 16597              	.LBE2873:
 227:src/xeq.c     **** }
 16598              		.loc 1 227 2 is_stmt 1 view .LVU4325
 16599              	.LBB2877:
 16600              	.LBI2877:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 16601              		.loc 1 217 5 view .LVU4326
 16602              	.LBB2878:
 218:src/xeq.c     **** }
 16603              		.loc 1 218 2 view .LVU4327
 218:src/xeq.c     **** }
 16604              		.loc 1 218 9 is_stmt 0 view .LVU4328
 16605 0042 B2F8DE37 		ldrh	r3, [r2, #2014]
 16606 0046 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 16607              		.loc 1 218 57 view .LVU4329
 16608 004a 002B     		cmp	r3, #0
 16609 004c 0BDB     		blt	.L1182
 16610 004e 0022     		movs	r2, #0
 16611              	.LVL1196:
 218:src/xeq.c     **** }
 16612              		.loc 1 218 57 view .LVU4330
 16613 0050 0023     		movs	r3, #0
 16614              	.LVL1197:
 218:src/xeq.c     **** }
 16615              		.loc 1 218 57 view .LVU4331
 16616 0052 ECE7     		b	.L1172
 16617              	.LVL1198:
 16618              	.L1179:
 218:src/xeq.c     **** }
 16619              		.loc 1 218 57 view .LVU4332
 16620              	.LBE2878:
 16621              	.LBE2877:
 16622              	.LBE2872:
 16623              	.LBE2871:
 16624              	.LBE2891:
 16625              	.LBB2892:
 16626              	.LBI2892:
2029:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 16627              		.loc 1 2029 5 is_stmt 1 view .LVU4333
 16628              	.LBB2893:
2030:src/xeq.c     **** }
 16629              		.loc 1 2030 2 view .LVU4334
2030:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 464


 16630              		.loc 1 2030 22 is_stmt 0 view .LVU4335
 16631 0054 124A     		ldr	r2, .L1183
2030:src/xeq.c     **** }
 16632              		.loc 1 2030 20 view .LVU4336
 16633 0056 134B     		ldr	r3, .L1183+4
2030:src/xeq.c     **** }
 16634              		.loc 1 2030 22 view .LVU4337
 16635 0058 1268     		ldr	r2, [r2]
2030:src/xeq.c     **** }
 16636              		.loc 1 2030 20 view .LVU4338
 16637 005a 1B68     		ldr	r3, [r3]
2030:src/xeq.c     **** }
 16638              		.loc 1 2030 22 view .LVU4339
 16639 005c B2F9E227 		ldrsh	r2, [r2, #2018]
2030:src/xeq.c     **** }
 16640              		.loc 1 2030 20 view .LVU4340
 16641 0060 1A44     		add	r2, r2, r3
 16642 0062 0023     		movs	r3, #0
 16643              	.LBE2893:
 16644              	.LBE2892:
 16645 0064 E3E7     		b	.L1172
 16646              	.LVL1199:
 16647              	.L1182:
 16648              	.LBB2894:
 16649              	.LBB2890:
 16650              	.LBB2889:
 16651              	.LBB2883:
 16652              	.LBB2879:
 218:src/xeq.c     **** }
 16653              		.loc 1 218 25 view .LVU4341
 16654 0066 1049     		ldr	r1, .L1183+8
 16655              	.LBE2879:
 16656              	.LBE2883:
 16657              	.LBB2884:
 16658              	.LBB2875:
1122:src/xeq.c     **** }
 16659              		.loc 1 1122 24 view .LVU4342
 16660 0068 B2F8E807 		ldrh	r0, [r2, #2024]
 16661              	.LVL1200:
1122:src/xeq.c     **** }
 16662              		.loc 1 1122 24 view .LVU4343
 16663              	.LBE2875:
 16664              	.LBE2884:
 16665              	.LBB2885:
 16666              	.LBB2880:
 218:src/xeq.c     **** }
 16667              		.loc 1 218 25 view .LVU4344
 16668 006c 0A68     		ldr	r2, [r1]
 16669              	.LVL1201:
 218:src/xeq.c     **** }
 16670              		.loc 1 218 25 view .LVU4345
 16671              	.LBE2880:
 16672              	.LBE2885:
 16673              	.LBB2886:
 16674              	.LBB2876:
1122:src/xeq.c     **** }
 16675              		.loc 1 1122 24 view .LVU4346
ARM GAS  /tmp/cccVhVyH.s 			page 465


 16676 006e 44F20101 		movw	r1, #16385
 16677              	.LBE2876:
 16678              	.LBE2886:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16679              		.loc 1 226 73 view .LVU4347
 16680 0072 0140     		ands	r1, r1, r0
 16681              	.LBB2887:
 16682              	.LBB2881:
 218:src/xeq.c     **** }
 16683              		.loc 1 218 57 view .LVU4348
 16684 0074 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 16685              	.LBE2881:
 16686              	.LBE2887:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16687              		.loc 1 226 73 view .LVU4349
 16688 0078 A1F58043 		sub	r3, r1, #16384
 16689 007c B3FA83F3 		clz	r3, r3
 16690 0080 5B09     		lsrs	r3, r3, #5
 16691 0082 0233     		adds	r3, r3, #2
 16692              	.LBB2888:
 16693              	.LBB2882:
 218:src/xeq.c     **** }
 16694              		.loc 1 218 57 view .LVU4350
 16695 0084 C2F30B02 		ubfx	r2, r2, #0, #12
 16696 0088 1A41     		asrs	r2, r2, r3
 16697 008a D317     		asrs	r3, r2, #31
 16698 008c CFE7     		b	.L1172
 16699              	.LVL1202:
 16700              	.L1181:
 218:src/xeq.c     **** }
 16701              		.loc 1 218 57 view .LVU4351
 16702              	.LBE2882:
 16703              	.LBE2888:
 16704              	.LBE2889:
 16705              	.LBE2890:
 16706              	.LBE2894:
 16707              	.LBB2895:
 16708              	.LBI2895:
2033:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 16709              		.loc 1 2033 5 is_stmt 1 view .LVU4352
 16710              	.LBB2896:
2034:src/xeq.c     **** }
 16711              		.loc 1 2034 2 view .LVU4353
2034:src/xeq.c     **** }
 16712              		.loc 1 2034 38 is_stmt 0 view .LVU4354
 16713 008e 074B     		ldr	r3, .L1183+12
 16714 0090 1B68     		ldr	r3, [r3]
 16715 0092 5A88     		ldrh	r2, [r3, #2]
2034:src/xeq.c     **** }
 16716              		.loc 1 2034 27 view .LVU4355
 16717 0094 C2F5FF52 		rsb	r2, r2, #8160
 16718 0098 1E32     		adds	r2, r2, #30
 16719 009a 0023     		movs	r3, #0
 16720              	.LBE2896:
 16721              	.LBE2895:
 16722 009c C7E7     		b	.L1172
 16723              	.L1184:
ARM GAS  /tmp/cccVhVyH.s 			page 466


 16724 009e 00BF     		.align	2
 16725              	.L1183:
 16726 00a0 00000000 		.word	main_ram
 16727 00a4 00000000 		.word	RetStkSize
 16728 00a8 00000000 		.word	RetStk
 16729 00ac 00000000 		.word	library_ram
 16730              		.cfi_endproc
 16731              	.LFE138:
 16733              		.section	.text.cmdputkey,"ax",%progbits
 16734              		.align	1
 16735              		.p2align 2,,3
 16736              		.global	cmdputkey
 16737              		.syntax unified
 16738              		.thumb
 16739              		.thumb_func
 16740              		.fpu fpv4-sp-d16
 16742              	cmdputkey:
 16743              	.LVL1203:
 16744              	.LFB141:
2078:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16745              		.loc 1 2078 1 is_stmt 1 view -0
 16746              		.cfi_startproc
 16747              		@ args = 0, pretend = 0, frame = 0
 16748              		@ frame_needed = 0, uses_anonymous_args = 0
2079:src/xeq.c     **** 
 16749              		.loc 1 2079 2 view .LVU4357
2078:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16750              		.loc 1 2078 1 is_stmt 0 view .LVU4358
 16751 0000 10B5     		push	{r4, lr}
 16752              		.cfi_def_cfa_offset 8
 16753              		.cfi_offset 4, -8
 16754              		.cfi_offset 14, -4
2079:src/xeq.c     **** 
 16755              		.loc 1 2079 16 view .LVU4359
 16756 0002 FFF7FEFF 		bl	get_keycode_from_reg
 16757              	.LVL1204:
2081:src/xeq.c     **** 		set_running_off();
 16758              		.loc 1 2081 2 is_stmt 1 view .LVU4360
2081:src/xeq.c     **** 		set_running_off();
 16759              		.loc 1 2081 5 is_stmt 0 view .LVU4361
 16760 0006 041E     		subs	r4, r0, #0
 16761 0008 00DA     		bge	.L1188
2085:src/xeq.c     **** 
 16762              		.loc 1 2085 1 view .LVU4362
 16763 000a 10BD     		pop	{r4, pc}
 16764              	.L1188:
2082:src/xeq.c     **** 		put_key(c);
 16765              		.loc 1 2082 3 is_stmt 1 view .LVU4363
 16766              	.LBB2897:
 16767              	.LBI2897:
5824:src/xeq.c     **** 	set_running_off_sst();
 16768              		.loc 1 5824 6 view .LVU4364
 16769              	.LBB2898:
5825:src/xeq.c     **** 	State.entryp = 0;
 16770              		.loc 1 5825 2 view .LVU4365
 16771              	.LBB2899:
 16772              	.LBI2899:
ARM GAS  /tmp/cccVhVyH.s 			page 467


5816:src/xeq.c     **** 	Running = 0;
 16773              		.loc 1 5816 6 view .LVU4366
 16774              	.LBB2900:
5817:src/xeq.c     **** }
 16775              		.loc 1 5817 2 view .LVU4367
 16776              	.LBE2900:
 16777              	.LBE2899:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 16778              		.loc 1 5826 15 is_stmt 0 view .LVU4368
 16779 000c 094B     		ldr	r3, .L1189
 16780              	.LBB2903:
 16781              	.LBB2901:
5817:src/xeq.c     **** }
 16782              		.loc 1 5817 10 view .LVU4369
 16783 000e 0A4A     		ldr	r2, .L1189+4
 16784              	.LBE2901:
 16785              	.LBE2903:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 16786              		.loc 1 5826 15 view .LVU4370
 16787 0010 1B68     		ldr	r3, [r3]
 16788              	.LBB2904:
 16789              	.LBB2902:
5817:src/xeq.c     **** }
 16790              		.loc 1 5817 10 view .LVU4371
 16791 0012 0021     		movs	r1, #0
 16792 0014 1160     		str	r1, [r2]
 16793              	.LBE2902:
 16794              	.LBE2904:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 16795              		.loc 1 5826 2 is_stmt 1 view .LVU4372
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 16796              		.loc 1 5826 15 is_stmt 0 view .LVU4373
 16797 0016 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 16798 001a 61F30412 		bfi	r2, r1, #4, #1
 16799              		.loc 1 5827 2 view .LVU4374
 16800 001e 8A20     		movs	r0, #138
 16801              	.LVL1205:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 16802              		.loc 1 5826 15 view .LVU4375
 16803 0020 83F8DD27 		strb	r2, [r3, #2013]
 16804              		.loc 1 5827 2 is_stmt 1 view .LVU4376
 16805 0024 FFF7FEFF 		bl	dot
 16806              	.LVL1206:
 16807              	.LBE2898:
 16808              	.LBE2897:
2083:src/xeq.c     **** 	}
 16809              		.loc 1 2083 3 view .LVU4377
 16810 0028 2046     		mov	r0, r4
2085:src/xeq.c     **** 
 16811              		.loc 1 2085 1 is_stmt 0 view .LVU4378
 16812 002a BDE81040 		pop	{r4, lr}
 16813              		.cfi_restore 14
 16814              		.cfi_restore 4
 16815              		.cfi_def_cfa_offset 0
 16816              	.LVL1207:
2083:src/xeq.c     **** 	}
 16817              		.loc 1 2083 3 view .LVU4379
ARM GAS  /tmp/cccVhVyH.s 			page 468


 16818 002e FFF7FEBF 		b	put_key
 16819              	.LVL1208:
 16820              	.L1190:
2083:src/xeq.c     **** 	}
 16821              		.loc 1 2083 3 view .LVU4380
 16822 0032 00BF     		.align	2
 16823              	.L1189:
 16824 0034 00000000 		.word	main_ram
 16825 0038 00000000 		.word	Running
 16826              		.cfi_endproc
 16827              	.LFE141:
 16829              		.section	.text.cmdkeytype,"ax",%progbits
 16830              		.align	1
 16831              		.p2align 2,,3
 16832              		.global	cmdkeytype
 16833              		.syntax unified
 16834              		.thumb
 16835              		.thumb_func
 16836              		.fpu fpv4-sp-d16
 16838              	cmdkeytype:
 16839              	.LVL1209:
 16840              	.LFB142:
2093:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16841              		.loc 1 2093 1 is_stmt 1 view -0
 16842              		.cfi_startproc
 16843              		@ args = 0, pretend = 0, frame = 48
 16844              		@ frame_needed = 0, uses_anonymous_args = 0
2094:src/xeq.c     **** 	if ( c >= 0 ) {
 16845              		.loc 1 2094 2 view .LVU4382
2093:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16846              		.loc 1 2093 1 is_stmt 0 view .LVU4383
 16847 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 16848              		.cfi_def_cfa_offset 20
 16849              		.cfi_offset 4, -20
 16850              		.cfi_offset 5, -16
 16851              		.cfi_offset 6, -12
 16852              		.cfi_offset 7, -8
 16853              		.cfi_offset 14, -4
 16854 0002 8FB0     		sub	sp, sp, #60
 16855              		.cfi_def_cfa_offset 80
2094:src/xeq.c     **** 	if ( c >= 0 ) {
 16856              		.loc 1 2094 16 view .LVU4384
 16857 0004 FFF7FEFF 		bl	get_keycode_from_reg
 16858              	.LVL1210:
2095:src/xeq.c     **** 		const char types[] = {
 16859              		.loc 1 2095 2 is_stmt 1 view .LVU4385
2095:src/xeq.c     **** 		const char types[] = {
 16860              		.loc 1 2095 5 is_stmt 0 view .LVU4386
 16861 0008 061E     		subs	r6, r0, #0
 16862 000a 17DB     		blt	.L1191
 16863              	.LBB2905:
2096:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16864              		.loc 1 2096 3 is_stmt 1 view .LVU4387
2096:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16865              		.loc 1 2096 14 is_stmt 0 view .LVU4388
 16866 000c 0E4D     		ldr	r5, .L1199
 16867              	.LBB2906:
ARM GAS  /tmp/cccVhVyH.s 			page 469


 16868              	.LBB2907:
 16869              	.LBB2908:
 16870              	.LBB2909:
 744:src/xeq.c     **** }
 16871              		.loc 1 744 15 view .LVU4389
 16872 000e 0F4F     		ldr	r7, .L1199+4
 16873              	.LBE2909:
 16874              	.LBE2908:
 16875              	.LBE2907:
 16876              	.LBE2906:
2096:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16877              		.loc 1 2096 14 view .LVU4390
 16878 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 16879              	.LVL1211:
2096:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16880              		.loc 1 2096 14 view .LVU4391
 16881 0012 03AC     		add	r4, sp, #12
 16882 0014 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 16883 0016 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 16884 0018 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 16885 001a 95E80700 		ldm	r5, {r0, r1, r2}
 16886              	.LBB2918:
 16887              	.LBB2914:
 16888              	.LBB2912:
 16889              	.LBB2910:
 744:src/xeq.c     **** }
 16890              		.loc 1 744 15 view .LVU4392
 16891 001e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 16892              	.LBE2910:
 16893              	.LBE2912:
 16894              	.LBE2914:
 16895              	.LBE2918:
2096:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16896              		.loc 1 2096 14 view .LVU4393
 16897 0020 03C4     		stmia	r4!, {r0, r1}
 16898              	.LBB2919:
 16899              	.LBB2915:
 748:src/xeq.c     **** 		lift();
 16900              		.loc 1 748 5 view .LVU4394
 16901 0022 5B06     		lsls	r3, r3, #25
 16902              	.LBE2915:
 16903              	.LBE2919:
2096:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16904              		.loc 1 2096 14 view .LVU4395
 16905 0024 2270     		strb	r2, [r4]
2104:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
 16906              		.loc 1 2104 3 is_stmt 1 view .LVU4396
 16907              	.LBB2920:
 16908              	.LBI2906:
 747:src/xeq.c     **** 	if (get_lift())
 16909              		.loc 1 747 6 view .LVU4397
 16910              	.LBB2916:
 748:src/xeq.c     **** 		lift();
 16911              		.loc 1 748 2 view .LVU4398
 16912              	.LBB2913:
 16913              	.LBI2908:
 743:src/xeq.c     **** 	return State2.state_lift;
ARM GAS  /tmp/cccVhVyH.s 			page 470


 16914              		.loc 1 743 12 view .LVU4399
 16915              	.LBB2911:
 744:src/xeq.c     **** }
 16916              		.loc 1 744 2 view .LVU4400
 16917              	.LBE2911:
 16918              	.LBE2913:
 748:src/xeq.c     **** 		lift();
 16919              		.loc 1 748 5 is_stmt 0 view .LVU4401
 16920 0026 0BD4     		bmi	.L1198
 16921              	.L1193:
 16922              	.LBE2916:
 16923              	.LBE2920:
2105:src/xeq.c     **** 	}
 16924              		.loc 1 2105 3 is_stmt 1 view .LVU4402
 16925              	.LVL1212:
 16926              	.LBB2921:
 16927              	.LBI2921:
1512:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16928              		.loc 1 1512 6 view .LVU4403
 16929              	.LBB2922:
1513:src/xeq.c     **** }
 16930              		.loc 1 1513 2 view .LVU4404
 16931              	.LBE2922:
 16932              	.LBE2921:
2105:src/xeq.c     **** 	}
 16933              		.loc 1 2105 21 is_stmt 0 view .LVU4405
 16934 0028 0EAB     		add	r3, sp, #56
 16935 002a 9819     		adds	r0, r3, r6
 16936              	.LBB2924:
 16937              	.LBB2923:
1513:src/xeq.c     **** }
 16938              		.loc 1 1513 2 view .LVU4406
 16939 002c 0021     		movs	r1, #0
 16940 002e 10F82C2C 		ldrb	r2, [r0, #-44]	@ zero_extendqisi2
 16941 0032 0091     		str	r1, [sp]
 16942              	.LVL1213:
1513:src/xeq.c     **** }
 16943              		.loc 1 1513 2 view .LVU4407
 16944 0034 0023     		movs	r3, #0
 16945 0036 6420     		movs	r0, #100
 16946 0038 FFF7FEFF 		bl	set_reg_n_int_sgn
 16947              	.LVL1214:
 16948              	.L1191:
1513:src/xeq.c     **** }
 16949              		.loc 1 1513 2 view .LVU4408
 16950              	.LBE2923:
 16951              	.LBE2924:
 16952              	.LBE2905:
2107:src/xeq.c     **** 
 16953              		.loc 1 2107 1 view .LVU4409
 16954 003c 0FB0     		add	sp, sp, #60
 16955              		.cfi_remember_state
 16956              		.cfi_def_cfa_offset 20
 16957              		@ sp needed
 16958 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 16959              	.LVL1215:
 16960              	.L1198:
ARM GAS  /tmp/cccVhVyH.s 			page 471


 16961              		.cfi_restore_state
 16962              	.LBB2926:
 16963              	.LBB2925:
 16964              	.LBB2917:
 749:src/xeq.c     **** }
 16965              		.loc 1 749 3 is_stmt 1 view .LVU4410
 16966 0040 FFF7FEFF 		bl	lift
 16967              	.LVL1216:
 16968 0044 F0E7     		b	.L1193
 16969              	.L1200:
 16970 0046 00BF     		.align	2
 16971              	.L1199:
 16972 0048 00000000 		.word	.LANCHOR5
 16973 004c 00000000 		.word	StateWhileOn
 16974              	.LBE2917:
 16975              	.LBE2925:
 16976              	.LBE2926:
 16977              		.cfi_endproc
 16978              	.LFE142:
 16980              		.section	.text.cmdstostk,"ax",%progbits
 16981              		.align	1
 16982              		.p2align 2,,3
 16983              		.global	cmdstostk
 16984              		.syntax unified
 16985              		.thumb
 16986              		.thumb_func
 16987              		.fpu fpv4-sp-d16
 16989              	cmdstostk:
 16990              	.LVL1217:
 16991              	.LFB148:
2150:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16992              		.loc 1 2150 48 view -0
 16993              		.cfi_startproc
 16994              		@ args = 0, pretend = 0, frame = 0
 16995              		@ frame_needed = 0, uses_anonymous_args = 0
2151:src/xeq.c     **** 
 16996              		.loc 1 2151 2 view .LVU4412
2150:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16997              		.loc 1 2150 48 is_stmt 0 view .LVU4413
 16998 0000 70B5     		push	{r4, r5, r6, lr}
 16999              		.cfi_def_cfa_offset 16
 17000              		.cfi_offset 4, -16
 17001              		.cfi_offset 5, -12
 17002              		.cfi_offset 6, -8
 17003              		.cfi_offset 14, -4
2150:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17004              		.loc 1 2150 48 view .LVU4414
 17005 0002 0546     		mov	r5, r0
2151:src/xeq.c     **** 
 17006              		.loc 1 2151 13 view .LVU4415
 17007 0004 FFF7FEFF 		bl	check_stack_overlap
 17008              	.LVL1218:
2153:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17009              		.loc 1 2153 2 is_stmt 1 view .LVU4416
2153:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17010              		.loc 1 2153 12 view .LVU4417
2153:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
ARM GAS  /tmp/cccVhVyH.s 			page 472


 17011              		.loc 1 2153 2 is_stmt 0 view .LVU4418
 17012 0008 031E     		subs	r3, r0, #0
 17013 000a 0ADD     		ble	.L1201
 17014 000c 2C46     		mov	r4, r5
 17015 000e C4F16406 		rsb	r6, r4, #100
 17016 0012 1D44     		add	r5, r5, r3
 17017              	.LVL1219:
 17018              	.L1203:
2154:src/xeq.c     **** }
 17019              		.loc 1 2154 3 is_stmt 1 discriminator 3 view .LVU4419
 17020 0014 3119     		adds	r1, r6, r4
 17021 0016 2046     		mov	r0, r4
 17022 0018 0134     		adds	r4, r4, #1
 17023              	.LVL1220:
2154:src/xeq.c     **** }
 17024              		.loc 1 2154 3 is_stmt 0 discriminator 3 view .LVU4420
 17025 001a FFF7FEFF 		bl	copyreg_n
 17026              	.LVL1221:
2153:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17027              		.loc 1 2153 17 is_stmt 1 discriminator 3 view .LVU4421
2153:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17028              		.loc 1 2153 12 discriminator 3 view .LVU4422
2153:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17029              		.loc 1 2153 2 is_stmt 0 discriminator 3 view .LVU4423
 17030 001e AC42     		cmp	r4, r5
 17031 0020 F8D1     		bne	.L1203
 17032              	.L1201:
2155:src/xeq.c     **** 
 17033              		.loc 1 2155 1 view .LVU4424
 17034 0022 70BD     		pop	{r4, r5, r6, pc}
 17035              		.cfi_endproc
 17036              	.LFE148:
 17038              		.section	.text.cmdrclstk,"ax",%progbits
 17039              		.align	1
 17040              		.p2align 2,,3
 17041              		.global	cmdrclstk
 17042              		.syntax unified
 17043              		.thumb
 17044              		.thumb_func
 17045              		.fpu fpv4-sp-d16
 17047              	cmdrclstk:
 17048              	.LVL1222:
 17049              	.LFB149:
2157:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17050              		.loc 1 2157 48 is_stmt 1 view -0
 17051              		.cfi_startproc
 17052              		@ args = 0, pretend = 0, frame = 0
 17053              		@ frame_needed = 0, uses_anonymous_args = 0
2158:src/xeq.c     **** 
 17054              		.loc 1 2158 2 view .LVU4426
2157:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17055              		.loc 1 2157 48 is_stmt 0 view .LVU4427
 17056 0000 70B5     		push	{r4, r5, r6, lr}
 17057              		.cfi_def_cfa_offset 16
 17058              		.cfi_offset 4, -16
 17059              		.cfi_offset 5, -12
 17060              		.cfi_offset 6, -8
ARM GAS  /tmp/cccVhVyH.s 			page 473


 17061              		.cfi_offset 14, -4
2157:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17062              		.loc 1 2157 48 view .LVU4428
 17063 0002 0646     		mov	r6, r0
2158:src/xeq.c     **** 
 17064              		.loc 1 2158 13 view .LVU4429
 17065 0004 FFF7FEFF 		bl	check_stack_overlap
 17066              	.LVL1223:
2160:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17067              		.loc 1 2160 2 is_stmt 1 view .LVU4430
2160:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17068              		.loc 1 2160 12 view .LVU4431
2160:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17069              		.loc 1 2160 2 is_stmt 0 view .LVU4432
 17070 0008 051E     		subs	r5, r0, #0
 17071 000a 09DD     		ble	.L1206
 17072 000c 6435     		adds	r5, r5, #100
 17073 000e 643E     		subs	r6, r6, #100
 17074              	.LVL1224:
2160:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17075              		.loc 1 2160 2 view .LVU4433
 17076 0010 6424     		movs	r4, #100
 17077              	.LVL1225:
 17078              	.L1208:
2161:src/xeq.c     **** }
 17079              		.loc 1 2161 3 is_stmt 1 discriminator 3 view .LVU4434
 17080 0012 3119     		adds	r1, r6, r4
 17081 0014 2046     		mov	r0, r4
 17082 0016 0134     		adds	r4, r4, #1
 17083              	.LVL1226:
2161:src/xeq.c     **** }
 17084              		.loc 1 2161 3 is_stmt 0 discriminator 3 view .LVU4435
 17085 0018 FFF7FEFF 		bl	copyreg_n
 17086              	.LVL1227:
2160:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17087              		.loc 1 2160 17 is_stmt 1 discriminator 3 view .LVU4436
2160:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17088              		.loc 1 2160 12 discriminator 3 view .LVU4437
2160:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17089              		.loc 1 2160 2 is_stmt 0 discriminator 3 view .LVU4438
 17090 001c AC42     		cmp	r4, r5
 17091 001e F8D1     		bne	.L1208
 17092              	.LVL1228:
 17093              	.L1206:
2162:src/xeq.c     **** 
 17094              		.loc 1 2162 1 view .LVU4439
 17095 0020 70BD     		pop	{r4, r5, r6, pc}
 17096              		.cfi_endproc
 17097              	.LFE149:
 17099 0022 00BF     		.section	.text.find_opcode_from,"ax",%progbits
 17100              		.align	1
 17101              		.p2align 2,,3
 17102              		.global	find_opcode_from
 17103              		.syntax unified
 17104              		.thumb
 17105              		.thumb_func
 17106              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cccVhVyH.s 			page 474


 17108              	find_opcode_from:
 17109              	.LVL1229:
 17110              	.LFB151:
2195:src/xeq.c     **** 	unsigned short int top;
 17111              		.loc 1 2195 81 is_stmt 1 view -0
 17112              		.cfi_startproc
 17113              		@ args = 0, pretend = 0, frame = 8
 17114              		@ frame_needed = 0, uses_anonymous_args = 0
2195:src/xeq.c     **** 	unsigned short int top;
 17115              		.loc 1 2195 81 is_stmt 0 view .LVU4441
 17116 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 17117              		.cfi_def_cfa_offset 24
 17118              		.cfi_offset 4, -24
 17119              		.cfi_offset 5, -20
 17120              		.cfi_offset 6, -16
 17121              		.cfi_offset 7, -12
 17122              		.cfi_offset 8, -8
 17123              		.cfi_offset 14, -4
2198:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 17124              		.loc 1 2198 12 view .LVU4442
 17125 0004 02F00207 		and	r7, r2, #2
2195:src/xeq.c     **** 	unsigned short int top;
 17126              		.loc 1 2195 81 view .LVU4443
 17127 0008 82B0     		sub	sp, sp, #8
 17128              		.cfi_def_cfa_offset 32
2195:src/xeq.c     **** 	unsigned short int top;
 17129              		.loc 1 2195 81 view .LVU4444
 17130 000a 9046     		mov	r8, r2
 17131 000c 0E46     		mov	r6, r1
2201:src/xeq.c     **** 	count -= top;
 17132              		.loc 1 2201 14 view .LVU4445
 17133 000e 0DF10602 		add	r2, sp, #6
 17134              	.LVL1230:
2201:src/xeq.c     **** 	count -= top;
 17135              		.loc 1 2201 14 view .LVU4446
 17136 0012 3946     		mov	r1, r7
 17137              	.LVL1231:
2195:src/xeq.c     **** 	unsigned short int top;
 17138              		.loc 1 2195 81 view .LVU4447
 17139 0014 0446     		mov	r4, r0
2196:src/xeq.c     **** 	int count;
 17140              		.loc 1 2196 2 is_stmt 1 view .LVU4448
2197:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
 17141              		.loc 1 2197 2 view .LVU4449
2198:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 17142              		.loc 1 2198 2 view .LVU4450
 17143              	.LVL1232:
2199:src/xeq.c     **** 
 17144              		.loc 1 2199 2 view .LVU4451
2201:src/xeq.c     **** 	count -= top;
 17145              		.loc 1 2201 2 view .LVU4452
2201:src/xeq.c     **** 	count -= top;
 17146              		.loc 1 2201 14 is_stmt 0 view .LVU4453
 17147 0016 FFF7FEFF 		bl	find_section_bounds
 17148              	.LVL1233:
2202:src/xeq.c     **** 	while (count--) {
 17149              		.loc 1 2202 8 view .LVU4454
ARM GAS  /tmp/cccVhVyH.s 			page 475


 17150 001a BDF80650 		ldrh	r5, [sp, #6]
2201:src/xeq.c     **** 	count -= top;
 17151              		.loc 1 2201 8 view .LVU4455
 17152 001e 0130     		adds	r0, r0, #1
 17153              	.LVL1234:
2202:src/xeq.c     **** 	while (count--) {
 17154              		.loc 1 2202 2 is_stmt 1 view .LVU4456
2203:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17155              		.loc 1 2203 2 view .LVU4457
2203:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17156              		.loc 1 2203 8 view .LVU4458
2203:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17157              		.loc 1 2203 8 is_stmt 0 view .LVU4459
 17158 0020 451B     		subs	r5, r0, r5
 17159              	.LVL1235:
2203:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17160              		.loc 1 2203 8 view .LVU4460
 17161 0022 05D1     		bne	.L1214
 17162 0024 10E0     		b	.L1212
 17163              	.LVL1236:
 17164              	.L1222:
2209:src/xeq.c     **** 	}
 17165              		.loc 1 2209 8 view .LVU4461
 17166 0026 FFF7FEFF 		bl	do_inc
 17167              	.LVL1237:
2203:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17168              		.loc 1 2203 8 view .LVU4462
 17169 002a 013D     		subs	r5, r5, #1
 17170              	.LVL1238:
2209:src/xeq.c     **** 	}
 17171              		.loc 1 2209 8 view .LVU4463
 17172 002c 0446     		mov	r4, r0
 17173              	.LVL1239:
2203:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17174              		.loc 1 2203 8 is_stmt 1 view .LVU4464
2203:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17175              		.loc 1 2203 8 is_stmt 0 view .LVU4465
 17176 002e 0BD0     		beq	.L1212
 17177              	.LVL1240:
 17178              	.L1214:
2207:src/xeq.c     **** 			return pc;
 17179              		.loc 1 2207 3 is_stmt 1 view .LVU4466
2207:src/xeq.c     **** 			return pc;
 17180              		.loc 1 2207 7 is_stmt 0 view .LVU4467
 17181 0030 2046     		mov	r0, r4
 17182 0032 FFF7FEFF 		bl	getprog
 17183              	.LVL1241:
2209:src/xeq.c     **** 	}
 17184              		.loc 1 2209 3 is_stmt 1 view .LVU4468
2207:src/xeq.c     **** 			return pc;
 17185              		.loc 1 2207 7 is_stmt 0 view .LVU4469
 17186 0036 0346     		mov	r3, r0
2207:src/xeq.c     **** 			return pc;
 17187              		.loc 1 2207 6 view .LVU4470
 17188 0038 B342     		cmp	r3, r6
2209:src/xeq.c     **** 	}
 17189              		.loc 1 2209 8 view .LVU4471
ARM GAS  /tmp/cccVhVyH.s 			page 476


 17190 003a 3946     		mov	r1, r7
 17191 003c 2046     		mov	r0, r4
2207:src/xeq.c     **** 			return pc;
 17192              		.loc 1 2207 6 view .LVU4472
 17193 003e F2D1     		bne	.L1222
 17194              	.LVL1242:
 17195              	.L1211:
2214:src/xeq.c     **** 
 17196              		.loc 1 2214 1 view .LVU4473
 17197 0040 2046     		mov	r0, r4
 17198 0042 02B0     		add	sp, sp, #8
 17199              		.cfi_remember_state
 17200              		.cfi_def_cfa_offset 24
 17201              		@ sp needed
 17202 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17203              	.LVL1243:
 17204              	.L1212:
 17205              		.cfi_restore_state
2211:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17206              		.loc 1 2211 2 is_stmt 1 view .LVU4474
2211:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17207              		.loc 1 2211 5 is_stmt 0 view .LVU4475
 17208 0048 18F00104 		ands	r4, r8, #1
 17209 004c F8D0     		beq	.L1211
 17210              	.LBB2933:
 17211              	.LBI2933:
2195:src/xeq.c     **** 	unsigned short int top;
 17212              		.loc 1 2195 14 is_stmt 1 view .LVU4476
 17213              	.LVL1244:
 17214              	.LBB2934:
2212:src/xeq.c     **** 	return 0;
 17215              		.loc 1 2212 3 view .LVU4477
 17216              	.LBB2935:
 17217              	.LBI2935:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17218              		.loc 1 546 5 view .LVU4478
 17219              	.LBB2936:
 547:src/xeq.c     **** 		Error = e;
 17220              		.loc 1 547 2 view .LVU4479
 547:src/xeq.c     **** 		Error = e;
 17221              		.loc 1 547 12 is_stmt 0 view .LVU4480
 17222 004e 074B     		ldr	r3, .L1223
 547:src/xeq.c     **** 		Error = e;
 17223              		.loc 1 547 5 view .LVU4481
 17224 0050 1C68     		ldr	r4, [r3]
 17225 0052 2CB9     		cbnz	r4, .L1216
 17226              	.LVL1245:
 17227              	.LBB2937:
 17228              	.LBI2937:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17229              		.loc 1 546 5 is_stmt 1 view .LVU4482
 17230              	.LBB2938:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17231              		.loc 1 548 3 view .LVU4483
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17232              		.loc 1 548 9 is_stmt 0 view .LVU4484
 17233 0054 0622     		movs	r2, #6
ARM GAS  /tmp/cccVhVyH.s 			page 477


 17234              	.LBE2938:
 17235              	.LBE2937:
 17236              	.LBE2936:
 17237              	.LBE2935:
 17238              	.LBE2934:
 17239              	.LBE2933:
2214:src/xeq.c     **** 
 17240              		.loc 1 2214 1 view .LVU4485
 17241 0056 2046     		mov	r0, r4
 17242              	.LBB2944:
 17243              	.LBB2943:
 17244              	.LBB2942:
 17245              	.LBB2941:
 17246              	.LBB2940:
 17247              	.LBB2939:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17248              		.loc 1 548 9 view .LVU4486
 17249 0058 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 17250              		.loc 1 549 3 is_stmt 1 view .LVU4487
 17251              	.LBE2939:
 17252              	.LBE2940:
 17253              	.LBE2941:
 17254              	.LBE2942:
 17255              	.LBE2943:
 17256              	.LBE2944:
2214:src/xeq.c     **** 
 17257              		.loc 1 2214 1 is_stmt 0 view .LVU4488
 17258 005a 02B0     		add	sp, sp, #8
 17259              		.cfi_remember_state
 17260              		.cfi_def_cfa_offset 24
 17261              		@ sp needed
 17262 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17263              	.LVL1246:
 17264              	.L1216:
 17265              		.cfi_restore_state
2213:src/xeq.c     **** }
 17266              		.loc 1 2213 9 view .LVU4489
 17267 0060 0024     		movs	r4, #0
 17268              	.LVL1247:
2214:src/xeq.c     **** 
 17269              		.loc 1 2214 1 view .LVU4490
 17270 0062 2046     		mov	r0, r4
 17271 0064 02B0     		add	sp, sp, #8
 17272              		.cfi_def_cfa_offset 24
 17273              		@ sp needed
 17274 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17275              	.LVL1248:
 17276              	.L1224:
2214:src/xeq.c     **** 
 17277              		.loc 1 2214 1 view .LVU4491
 17278 006a 00BF     		.align	2
 17279              	.L1223:
 17280 006c 00000000 		.word	Error
 17281              		.cfi_endproc
 17282              	.LFE151:
 17284              		.section	.text.find_label_from,"ax",%progbits
ARM GAS  /tmp/cccVhVyH.s 			page 478


 17285              		.align	1
 17286              		.p2align 2,,3
 17287              		.global	find_label_from
 17288              		.syntax unified
 17289              		.thumb
 17290              		.thumb_func
 17291              		.fpu fpv4-sp-d16
 17293              	find_label_from:
 17294              	.LVL1249:
 17295              	.LFB152:
2217:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 17296              		.loc 1 2217 76 is_stmt 1 view -0
 17297              		.cfi_startproc
 17298              		@ args = 0, pretend = 0, frame = 0
 17299              		@ frame_needed = 0, uses_anonymous_args = 0
 17300              		@ link register save eliminated.
2218:src/xeq.c     **** }
 17301              		.loc 1 2218 2 view .LVU4493
2218:src/xeq.c     **** }
 17302              		.loc 1 2218 9 is_stmt 0 view .LVU4494
 17303 0000 41F4C441 		orr	r1, r1, #25088
 17304              	.LVL1250:
2218:src/xeq.c     **** }
 17305              		.loc 1 2218 9 view .LVU4495
 17306 0004 FFF7FEBF 		b	find_opcode_from
 17307              	.LVL1251:
2218:src/xeq.c     **** }
 17308              		.loc 1 2218 9 view .LVU4496
 17309              		.cfi_endproc
 17310              	.LFE152:
 17312              		.section	.text.op_rtn,"ax",%progbits
 17313              		.align	1
 17314              		.p2align 2,,3
 17315              		.global	op_rtn
 17316              		.syntax unified
 17317              		.thumb
 17318              		.thumb_func
 17319              		.fpu fpv4-sp-d16
 17321              	op_rtn:
 17322              	.LVL1252:
 17323              	.LFB155:
2276:src/xeq.c     **** 	if (! Running && ! XromRunning) {
 17324              		.loc 1 2276 28 is_stmt 1 view -0
 17325              		.cfi_startproc
 17326              		@ args = 0, pretend = 0, frame = 0
 17327              		@ frame_needed = 0, uses_anonymous_args = 0
 17328              		@ link register save eliminated.
2277:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17329              		.loc 1 2277 2 view .LVU4498
2277:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17330              		.loc 1 2277 6 is_stmt 0 view .LVU4499
 17331 0000 074A     		ldr	r2, .L1229
2277:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17332              		.loc 1 2277 19 view .LVU4500
 17333 0002 084B     		ldr	r3, .L1229+4
2277:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17334              		.loc 1 2277 16 view .LVU4501
ARM GAS  /tmp/cccVhVyH.s 			page 479


 17335 0004 1268     		ldr	r2, [r2]
 17336 0006 1B68     		ldr	r3, [r3]
 17337 0008 1343     		orrs	r3, r2, r3
 17338 000a 06D0     		beq	.L1228
2282:src/xeq.c     **** }
 17339              		.loc 1 2282 3 is_stmt 1 view .LVU4502
 17340 000c A0F13900 		sub	r0, #57
 17341              	.LVL1253:
2282:src/xeq.c     **** }
 17342              		.loc 1 2282 3 is_stmt 0 view .LVU4503
 17343 0010 B0FA80F0 		clz	r0, r0
 17344 0014 4009     		lsrs	r0, r0, #5
 17345 0016 FFF7FEBF 		b	do_rtn
 17346              	.LVL1254:
 17347              	.L1228:
2279:src/xeq.c     **** 	}
 17348              		.loc 1 2279 3 is_stmt 1 view .LVU4504
 17349 001a FFF7FEBF 		b	clrretstk_pc
 17350              	.LVL1255:
 17351              	.L1230:
2279:src/xeq.c     **** 	}
 17352              		.loc 1 2279 3 is_stmt 0 view .LVU4505
 17353 001e 00BF     		.align	2
 17354              	.L1229:
 17355 0020 00000000 		.word	Running
 17356 0024 00000000 		.word	XromRunning
 17357              		.cfi_endproc
 17358              	.LFE155:
 17360              		.section	.text.op_popusr,"ax",%progbits
 17361              		.align	1
 17362              		.p2align 2,,3
 17363              		.global	op_popusr
 17364              		.syntax unified
 17365              		.thumb
 17366              		.thumb_func
 17367              		.fpu fpv4-sp-d16
 17369              	op_popusr:
 17370              	.LVL1256:
 17371              	.LFB159:
2323:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 17372              		.loc 1 2323 31 is_stmt 1 view -0
 17373              		.cfi_startproc
 17374              		@ args = 0, pretend = 0, frame = 0
 17375              		@ frame_needed = 0, uses_anonymous_args = 0
 17376              		@ link register save eliminated.
2324:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17377              		.loc 1 2324 2 view .LVU4507
2324:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17378              		.loc 1 2324 25 is_stmt 0 view .LVU4508
 17379 0000 164B     		ldr	r3, .L1233
2324:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17380              		.loc 1 2324 24 view .LVU4509
 17381 0002 174A     		ldr	r2, .L1233+4
2324:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17382              		.loc 1 2324 25 view .LVU4510
 17383 0004 1B68     		ldr	r3, [r3]
2324:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
ARM GAS  /tmp/cccVhVyH.s 			page 480


 17384              		.loc 1 2324 24 view .LVU4511
 17385 0006 1268     		ldr	r2, [r2]
2323:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 17386              		.loc 1 2323 31 view .LVU4512
 17387 0008 F0B4     		push	{r4, r5, r6, r7}
 17388              		.cfi_def_cfa_offset 16
 17389              		.cfi_offset 4, -16
 17390              		.cfi_offset 5, -12
 17391              		.cfi_offset 6, -8
 17392              		.cfi_offset 7, -4
2324:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17393              		.loc 1 2324 25 view .LVU4513
 17394 000a B3F9E257 		ldrsh	r5, [r3, #2018]
2324:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17395              		.loc 1 2324 16 view .LVU4514
 17396 000e 154F     		ldr	r7, .L1233+8
2326:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17397              		.loc 1 2326 13 view .LVU4515
 17398 0010 154E     		ldr	r6, .L1233+12
2324:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17399              		.loc 1 2324 34 view .LVU4516
 17400 0012 A8B2     		uxth	r0, r5
 17401              	.LVL1257:
2324:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17402              		.loc 1 2324 34 view .LVU4517
 17403 0014 411C     		adds	r1, r0, #1
 17404 0016 09B2     		sxth	r1, r1
2325:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17405              		.loc 1 2325 34 view .LVU4518
 17406 0018 841C     		adds	r4, r0, #2
2324:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17407              		.loc 1 2324 34 view .LVU4519
 17408 001a A3F8E217 		strh	r1, [r3, #2018]	@ movhi
2325:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17409              		.loc 1 2325 34 view .LVU4520
 17410 001e 24B2     		sxth	r4, r4
2324:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17411              		.loc 1 2324 24 view .LVU4521
 17412 0020 32F81550 		ldrh	r5, [r2, r5, lsl #1]
2325:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17413              		.loc 1 2325 34 view .LVU4522
 17414 0024 A3F8E247 		strh	r4, [r3, #2018]	@ movhi
2325:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17415              		.loc 1 2325 24 view .LVU4523
 17416 0028 32F81110 		ldrh	r1, [r2, r1, lsl #1]
2324:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17417              		.loc 1 2324 24 view .LVU4524
 17418 002c 3D60     		str	r5, [r7]
2325:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17419              		.loc 1 2325 2 is_stmt 1 view .LVU4525
2325:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17420              		.loc 1 2325 12 is_stmt 0 view .LVU4526
 17421 002e B3F8DE57 		ldrh	r5, [r3, #2014]
2325:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17422              		.loc 1 2325 24 view .LVU4527
 17423 0032 41F30A01 		sbfx	r1, r1, #0, #11
2325:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
ARM GAS  /tmp/cccVhVyH.s 			page 481


 17424              		.loc 1 2325 12 view .LVU4528
 17425 0036 61F34F15 		bfi	r5, r1, #5, #11
2326:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17426              		.loc 1 2326 34 view .LVU4529
 17427 003a 0330     		adds	r0, r0, #3
2325:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17428              		.loc 1 2325 12 view .LVU4530
 17429 003c A3F8DE57 		strh	r5, [r3, #2014]	@ movhi
2326:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17430              		.loc 1 2326 2 is_stmt 1 view .LVU4531
2326:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17431              		.loc 1 2326 34 is_stmt 0 view .LVU4532
 17432 0040 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
2327:src/xeq.c     **** }
 17433              		.loc 1 2327 20 view .LVU4533
 17434 0044 32F81130 		ldrh	r3, [r2, r1, lsl #1]
2326:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17435              		.loc 1 2326 24 view .LVU4534
 17436 0048 32F81400 		ldrh	r0, [r2, r4, lsl #1]
 17437 004c 3060     		str	r0, [r6]
2327:src/xeq.c     **** }
 17438              		.loc 1 2327 2 is_stmt 1 view .LVU4535
2327:src/xeq.c     **** }
 17439              		.loc 1 2327 20 is_stmt 0 view .LVU4536
 17440 004e 23F40053 		bic	r3, r3, #8192
2328:src/xeq.c     **** 
 17441              		.loc 1 2328 1 view .LVU4537
 17442 0052 F0BC     		pop	{r4, r5, r6, r7}
 17443              		.cfi_restore 7
 17444              		.cfi_restore 6
 17445              		.cfi_restore 5
 17446              		.cfi_restore 4
 17447              		.cfi_def_cfa_offset 0
2327:src/xeq.c     **** }
 17448              		.loc 1 2327 20 view .LVU4538
 17449 0054 22F81130 		strh	r3, [r2, r1, lsl #1]	@ movhi
2328:src/xeq.c     **** 
 17450              		.loc 1 2328 1 view .LVU4539
 17451 0058 7047     		bx	lr
 17452              	.L1234:
 17453 005a 00BF     		.align	2
 17454              	.L1233:
 17455 005c 00000000 		.word	main_ram
 17456 0060 00000000 		.word	RetStk
 17457 0064 00000000 		.word	UserLocalRegs
 17458 0068 00000000 		.word	XromUserPc
 17459              		.cfi_endproc
 17460              	.LFE159:
 17462              		.section	.text.findmultilbl,"ax",%progbits
 17463              		.align	1
 17464              		.p2align 2,,3
 17465              		.global	findmultilbl
 17466              		.syntax unified
 17467              		.thumb
 17468              		.thumb_func
 17469              		.fpu fpv4-sp-d16
 17471              	findmultilbl:
ARM GAS  /tmp/cccVhVyH.s 			page 482


 17472              	.LVL1258:
 17473              	.LFB163:
2356:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17474              		.loc 1 2356 54 is_stmt 1 view -0
 17475              		.cfi_startproc
 17476              		@ args = 0, pretend = 0, frame = 0
 17477              		@ frame_needed = 0, uses_anonymous_args = 0
2357:src/xeq.c     **** 	unsigned int lbl;
 17478              		.loc 1 2357 2 view .LVU4541
2356:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17479              		.loc 1 2356 54 is_stmt 0 view .LVU4542
 17480 0000 38B5     		push	{r3, r4, r5, lr}
 17481              		.cfi_def_cfa_offset 16
 17482              		.cfi_offset 3, -16
 17483              		.cfi_offset 4, -12
 17484              		.cfi_offset 5, -8
 17485              		.cfi_offset 14, -4
2360:src/xeq.c     **** 	if (lbl == 0)
 17486              		.loc 1 2360 8 view .LVU4543
 17487 0002 0022     		movs	r2, #0
2357:src/xeq.c     **** 	unsigned int lbl;
 17488              		.loc 1 2357 15 view .LVU4544
 17489 0004 20F47064 		bic	r4, r0, #3840
 17490              	.LVL1259:
2358:src/xeq.c     **** 
 17491              		.loc 1 2358 2 is_stmt 1 view .LVU4545
2360:src/xeq.c     **** 	if (lbl == 0)
 17492              		.loc 1 2360 2 view .LVU4546
2356:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17493              		.loc 1 2356 54 is_stmt 0 view .LVU4547
 17494 0008 0D46     		mov	r5, r1
2360:src/xeq.c     **** 	if (lbl == 0)
 17495              		.loc 1 2360 8 view .LVU4548
 17496 000a 1046     		mov	r0, r2
 17497              	.LVL1260:
2360:src/xeq.c     **** 	if (lbl == 0)
 17498              		.loc 1 2360 8 view .LVU4549
 17499 000c 2146     		mov	r1, r4
 17500              	.LVL1261:
2360:src/xeq.c     **** 	if (lbl == 0)
 17501              		.loc 1 2360 8 view .LVU4550
 17502 000e FFF7FEFF 		bl	find_opcode_from
 17503              	.LVL1262:
2361:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 17504              		.loc 1 2361 2 is_stmt 1 view .LVU4551
2361:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 17505              		.loc 1 2361 5 is_stmt 0 view .LVU4552
 17506 0012 00B1     		cbz	r0, .L1241
 17507              	.L1235:
2368:src/xeq.c     **** 
 17508              		.loc 1 2368 1 view .LVU4553
 17509 0014 38BD     		pop	{r3, r4, r5, pc}
 17510              	.LVL1263:
 17511              	.L1241:
2362:src/xeq.c     **** 	if (lbl == 0)
 17512              		.loc 1 2362 3 is_stmt 1 view .LVU4554
2362:src/xeq.c     **** 	if (lbl == 0)
ARM GAS  /tmp/cccVhVyH.s 			page 483


 17513              		.loc 1 2362 9 is_stmt 0 view .LVU4555
 17514 0016 0246     		mov	r2, r0
 17515 0018 2146     		mov	r1, r4
 17516 001a 4FF48040 		mov	r0, #16384
 17517              	.LVL1264:
2362:src/xeq.c     **** 	if (lbl == 0)
 17518              		.loc 1 2362 9 view .LVU4556
 17519 001e FFF7FEFF 		bl	find_opcode_from
 17520              	.LVL1265:
2363:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 17521              		.loc 1 2363 2 is_stmt 1 view .LVU4557
2363:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 17522              		.loc 1 2363 5 is_stmt 0 view .LVU4558
 17523 0022 0028     		cmp	r0, #0
 17524 0024 F6D1     		bne	.L1235
2364:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17525              		.loc 1 2364 3 is_stmt 1 view .LVU4559
2364:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17526              		.loc 1 2364 9 is_stmt 0 view .LVU4560
 17527 0026 0246     		mov	r2, r0
 17528 0028 2146     		mov	r1, r4
 17529 002a 4FF40040 		mov	r0, #32768
 17530              	.LVL1266:
2364:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17531              		.loc 1 2364 9 view .LVU4561
 17532 002e FFF7FEFF 		bl	find_opcode_from
 17533              	.LVL1267:
2365:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17534              		.loc 1 2365 2 is_stmt 1 view .LVU4562
2365:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17535              		.loc 1 2365 5 is_stmt 0 view .LVU4563
 17536 0032 0028     		cmp	r0, #0
 17537 0034 EED1     		bne	.L1235
2365:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17538              		.loc 1 2365 15 discriminator 1 view .LVU4564
 17539 0036 EB07     		lsls	r3, r5, #31
 17540 0038 ECD5     		bpl	.L1235
 17541              	.LBB2951:
 17542              	.LBI2951:
2356:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17543              		.loc 1 2356 14 is_stmt 1 view .LVU4565
 17544              	.LVL1268:
 17545              	.LBB2952:
2366:src/xeq.c     **** 	return lbl;
 17546              		.loc 1 2366 3 view .LVU4566
 17547              	.LBB2953:
 17548              	.LBI2953:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17549              		.loc 1 546 5 view .LVU4567
 17550              	.LBB2954:
 547:src/xeq.c     **** 		Error = e;
 17551              		.loc 1 547 2 view .LVU4568
 547:src/xeq.c     **** 		Error = e;
 17552              		.loc 1 547 12 is_stmt 0 view .LVU4569
 17553 003a 034B     		ldr	r3, .L1242
 547:src/xeq.c     **** 		Error = e;
 17554              		.loc 1 547 5 view .LVU4570
ARM GAS  /tmp/cccVhVyH.s 			page 484


 17555 003c 1A68     		ldr	r2, [r3]
 17556 003e 002A     		cmp	r2, #0
 17557 0040 E8D1     		bne	.L1235
 17558              	.LVL1269:
 17559              	.LBB2955:
 17560              	.LBI2955:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17561              		.loc 1 546 5 is_stmt 1 view .LVU4571
 17562              	.LBB2956:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17563              		.loc 1 548 3 view .LVU4572
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17564              		.loc 1 548 9 is_stmt 0 view .LVU4573
 17565 0042 0622     		movs	r2, #6
 17566 0044 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 17567              		.loc 1 549 3 is_stmt 1 view .LVU4574
 17568              	.LVL1270:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 17569              		.loc 1 549 3 is_stmt 0 view .LVU4575
 17570              	.LBE2956:
 17571              	.LBE2955:
 17572              	.LBE2954:
 17573              	.LBE2953:
 17574              	.LBE2952:
 17575              	.LBE2951:
2367:src/xeq.c     **** }
 17576              		.loc 1 2367 2 is_stmt 1 view .LVU4576
2368:src/xeq.c     **** 
 17577              		.loc 1 2368 1 is_stmt 0 view .LVU4577
 17578 0046 38BD     		pop	{r3, r4, r5, pc}
 17579              	.LVL1271:
 17580              	.L1243:
2368:src/xeq.c     **** 
 17581              		.loc 1 2368 1 view .LVU4578
 17582              		.align	2
 17583              	.L1242:
 17584 0048 00000000 		.word	Error
 17585              		.cfi_endproc
 17586              	.LFE163:
 17588              		.section	.text.multiumenu,"ax",%progbits
 17589              		.align	1
 17590              		.p2align 2,,3
 17591              		.global	multiumenu
 17592              		.syntax unified
 17593              		.thumb
 17594              		.thumb_func
 17595              		.fpu fpv4-sp-d16
 17597              	multiumenu:
 17598              	.LVL1272:
 17599              	.LFB166:
2389:src/xeq.c     ****   opcode op = (o & 0xFFFFF0FF) + ((DBL_LBL) << DBL_SHIFT); // change opcode to LBL
 17600              		.loc 1 2389 53 is_stmt 1 view -0
 17601              		.cfi_startproc
 17602              		@ args = 0, pretend = 0, frame = 0
 17603              		@ frame_needed = 0, uses_anonymous_args = 0
2390:src/xeq.c     ****   build_user_menu_from_program(op);
ARM GAS  /tmp/cccVhVyH.s 			page 485


 17604              		.loc 1 2390 3 view .LVU4580
2391:src/xeq.c     ****   set_menu (M_User);
 17605              		.loc 1 2391 3 view .LVU4581
2389:src/xeq.c     ****   opcode op = (o & 0xFFFFF0FF) + ((DBL_LBL) << DBL_SHIFT); // change opcode to LBL
 17606              		.loc 1 2389 53 is_stmt 0 view .LVU4582
 17607 0000 08B5     		push	{r3, lr}
 17608              		.cfi_def_cfa_offset 8
 17609              		.cfi_offset 3, -8
 17610              		.cfi_offset 14, -4
2391:src/xeq.c     ****   set_menu (M_User);
 17611              		.loc 1 2391 3 view .LVU4583
 17612 0002 20F47060 		bic	r0, r0, #3840
 17613              	.LVL1273:
2391:src/xeq.c     ****   set_menu (M_User);
 17614              		.loc 1 2391 3 view .LVU4584
 17615 0006 FFF7FEFF 		bl	build_user_menu_from_program
 17616              	.LVL1274:
2392:src/xeq.c     ****   display_current_menu ();
 17617              		.loc 1 2392 3 is_stmt 1 view .LVU4585
 17618 000a 6320     		movs	r0, #99
 17619 000c FFF7FEFF 		bl	set_menu
 17620              	.LVL1275:
2393:src/xeq.c     **** }
 17621              		.loc 1 2393 3 view .LVU4586
2394:src/xeq.c     **** 
 17622              		.loc 1 2394 1 is_stmt 0 view .LVU4587
 17623 0010 BDE80840 		pop	{r3, lr}
 17624              		.cfi_restore 14
 17625              		.cfi_restore 3
 17626              		.cfi_def_cfa_offset 0
2393:src/xeq.c     **** }
 17627              		.loc 1 2393 3 view .LVU4588
 17628 0014 FFF7FEBF 		b	display_current_menu
 17629              	.LVL1276:
 17630              		.cfi_endproc
 17631              	.LFE166:
 17633              		.section	.text.get_dispmode_digs,"ax",%progbits
 17634              		.align	1
 17635              		.p2align 2,,3
 17636              		.global	get_dispmode_digs
 17637              		.syntax unified
 17638              		.thumb
 17639              		.thumb_func
 17640              		.fpu fpv4-sp-d16
 17642              	get_dispmode_digs:
 17643              	.LVL1277:
 17644              	.LFB171:
2427:src/xeq.c     **** 	int dispmode = UState.dispmode;
 17645              		.loc 1 2427 1 is_stmt 1 view -0
 17646              		.cfi_startproc
 17647              		@ args = 0, pretend = 0, frame = 0
 17648              		@ frame_needed = 0, uses_anonymous_args = 0
 17649              		@ link register save eliminated.
2428:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17650              		.loc 1 2428 2 view .LVU4590
2428:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17651              		.loc 1 2428 17 is_stmt 0 view .LVU4591
ARM GAS  /tmp/cccVhVyH.s 			page 486


 17652 0000 0A4B     		ldr	r3, .L1249
 17653 0002 1A68     		ldr	r2, [r3]
2429:src/xeq.c     **** 
 17654              		.loc 1 2429 23 view .LVU4592
 17655 0004 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
2428:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17656              		.loc 1 2428 23 view .LVU4593
 17657 0008 92F8E627 		ldrb	r2, [r2, #2022]	@ zero_extendqisi2
2429:src/xeq.c     **** 
 17658              		.loc 1 2429 6 view .LVU4594
 17659 000c 03F00F03 		and	r3, r3, #15
2431:src/xeq.c     **** 		dispdigs -= 12;
 17660              		.loc 1 2431 5 view .LVU4595
 17661 0010 0B2B     		cmp	r3, #11
2427:src/xeq.c     **** 	int dispmode = UState.dispmode;
 17662              		.loc 1 2427 1 view .LVU4596
 17663 0012 0146     		mov	r1, r0
2428:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17664              		.loc 1 2428 6 view .LVU4597
 17665 0014 4FEA9210 		lsr	r0, r2, #6
 17666              	.LVL1278:
2429:src/xeq.c     **** 
 17667              		.loc 1 2429 2 is_stmt 1 view .LVU4598
2431:src/xeq.c     **** 		dispdigs -= 12;
 17668              		.loc 1 2431 2 view .LVU4599
2431:src/xeq.c     **** 		dispdigs -= 12;
 17669              		.loc 1 2431 5 is_stmt 0 view .LVU4600
 17670 0018 06DD     		ble	.L1247
2432:src/xeq.c     **** 		dispmode += 4;
 17671              		.loc 1 2432 3 is_stmt 1 view .LVU4601
 17672              	.LVL1279:
2433:src/xeq.c     **** 		if (dispmode >= 6) {
 17673              		.loc 1 2433 3 view .LVU4602
2433:src/xeq.c     **** 		if (dispmode >= 6) {
 17674              		.loc 1 2433 12 is_stmt 0 view .LVU4603
 17675 001a 021D     		adds	r2, r0, #4
 17676              	.LVL1280:
2434:src/xeq.c     **** 			dispmode -= 2;
 17677              		.loc 1 2434 3 is_stmt 1 view .LVU4604
2434:src/xeq.c     **** 			dispmode -= 2;
 17678              		.loc 1 2434 6 is_stmt 0 view .LVU4605
 17679 001c 052A     		cmp	r2, #5
2432:src/xeq.c     **** 		dispmode += 4;
 17680              		.loc 1 2432 12 view .LVU4606
 17681 001e D9BF     		ittee	le
 17682 0020 0C3B     		suble	r3, r3, #12
 17683              	.LVL1281:
2432:src/xeq.c     **** 		dispmode += 4;
 17684              		.loc 1 2432 12 view .LVU4607
 17685 0022 1046     		movle	r0, r2
2435:src/xeq.c     **** 			dispdigs += 4;
 17686              		.loc 1 2435 4 is_stmt 1 view .LVU4608
2435:src/xeq.c     **** 			dispdigs += 4;
 17687              		.loc 1 2435 13 is_stmt 0 view .LVU4609
 17688 0024 0230     		addgt	r0, r0, #2
 17689              	.LVL1282:
2436:src/xeq.c     **** 		}
ARM GAS  /tmp/cccVhVyH.s 			page 487


 17690              		.loc 1 2436 4 is_stmt 1 view .LVU4610
2436:src/xeq.c     **** 		}
 17691              		.loc 1 2436 13 is_stmt 0 view .LVU4611
 17692 0026 083B     		subgt	r3, r3, #8
 17693              	.LVL1283:
 17694              	.L1247:
2439:src/xeq.c     **** 	return dispmode;
 17695              		.loc 1 2439 2 is_stmt 1 view .LVU4612
2439:src/xeq.c     **** 	return dispmode;
 17696              		.loc 1 2439 9 is_stmt 0 view .LVU4613
 17697 0028 0B60     		str	r3, [r1]
2440:src/xeq.c     **** }
 17698              		.loc 1 2440 2 is_stmt 1 view .LVU4614
2441:src/xeq.c     **** 
 17699              		.loc 1 2441 1 is_stmt 0 view .LVU4615
 17700 002a 7047     		bx	lr
 17701              	.L1250:
 17702              		.align	2
 17703              	.L1249:
 17704 002c 00000000 		.word	main_ram
 17705              		.cfi_endproc
 17706              	.LFE171:
 17708              		.section	.text.set_dispmode_digs,"ax",%progbits
 17709              		.align	1
 17710              		.p2align 2,,3
 17711              		.global	set_dispmode_digs
 17712              		.syntax unified
 17713              		.thumb
 17714              		.thumb_func
 17715              		.fpu fpv4-sp-d16
 17717              	set_dispmode_digs:
 17718              	.LVL1284:
 17719              	.LFB172:
2444:src/xeq.c     **** 	if (dispmode >= 4) {
 17720              		.loc 1 2444 1 is_stmt 1 view -0
 17721              		.cfi_startproc
 17722              		@ args = 0, pretend = 0, frame = 0
 17723              		@ frame_needed = 0, uses_anonymous_args = 0
 17724              		@ link register save eliminated.
2445:src/xeq.c     **** 		dispmode -= 4;
 17725              		.loc 1 2445 2 view .LVU4617
2445:src/xeq.c     **** 		dispmode -= 4;
 17726              		.loc 1 2445 5 is_stmt 0 view .LVU4618
 17727 0000 0328     		cmp	r0, #3
 17728 0002 07DD     		ble	.L1252
2446:src/xeq.c     **** 		dispdigs += 12;
 17729              		.loc 1 2446 3 is_stmt 1 view .LVU4619
 17730              	.LVL1285:
2447:src/xeq.c     **** 		if (dispdigs >= 16) {
 17731              		.loc 1 2447 3 view .LVU4620
2447:src/xeq.c     **** 		if (dispdigs >= 16) {
 17732              		.loc 1 2447 12 is_stmt 0 view .LVU4621
 17733 0004 01F10C03 		add	r3, r1, #12
 17734              	.LVL1286:
2448:src/xeq.c     **** 			dispdigs -= 4;
 17735              		.loc 1 2448 3 is_stmt 1 view .LVU4622
2448:src/xeq.c     **** 			dispdigs -= 4;
ARM GAS  /tmp/cccVhVyH.s 			page 488


 17736              		.loc 1 2448 6 is_stmt 0 view .LVU4623
 17737 0008 0F2B     		cmp	r3, #15
2446:src/xeq.c     **** 		dispdigs += 12;
 17738              		.loc 1 2446 12 view .LVU4624
 17739 000a D9BF     		ittee	le
 17740 000c 0438     		suble	r0, r0, #4
 17741              	.LVL1287:
2446:src/xeq.c     **** 		dispdigs += 12;
 17742              		.loc 1 2446 12 view .LVU4625
 17743 000e 1946     		movle	r1, r3
2449:src/xeq.c     **** 			dispmode += 2;
 17744              		.loc 1 2449 4 is_stmt 1 view .LVU4626
2449:src/xeq.c     **** 			dispmode += 2;
 17745              		.loc 1 2449 13 is_stmt 0 view .LVU4627
 17746 0010 0831     		addgt	r1, r1, #8
 17747              	.LVL1288:
2450:src/xeq.c     **** 		}
 17748              		.loc 1 2450 4 is_stmt 1 view .LVU4628
2450:src/xeq.c     **** 		}
 17749              		.loc 1 2450 13 is_stmt 0 view .LVU4629
 17750 0012 0238     		subgt	r0, r0, #2
 17751              	.LVL1289:
 17752              	.L1252:
2453:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17753              		.loc 1 2453 2 is_stmt 1 view .LVU4630
 17754 0014 084B     		ldr	r3, .L1254
 17755 0016 1A68     		ldr	r2, [r3]
2454:src/xeq.c     **** }
 17756              		.loc 1 2454 2 view .LVU4631
2453:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17757              		.loc 1 2453 18 is_stmt 0 view .LVU4632
 17758 0018 00F00300 		and	r0, r0, #3
 17759              	.LVL1290:
2453:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17760              		.loc 1 2453 18 view .LVU4633
 17761 001c B2F8E637 		ldrh	r3, [r2, #2022]
 17762 0020 8001     		lsls	r0, r0, #6
 17763 0022 01F00F01 		and	r1, r1, #15
 17764              	.LVL1291:
2453:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17765              		.loc 1 2453 18 view .LVU4634
 17766 0026 40EA0120 		orr	r0, r0, r1, lsl #8
 17767 002a 23F47C63 		bic	r3, r3, #4032
 17768 002e 1843     		orrs	r0, r0, r3
 17769 0030 A2F8E607 		strh	r0, [r2, #2022]	@ movhi
2455:src/xeq.c     **** #endif
 17770              		.loc 1 2455 1 view .LVU4635
 17771 0034 7047     		bx	lr
 17772              	.L1255:
 17773 0036 00BF     		.align	2
 17774              	.L1254:
 17775 0038 00000000 		.word	main_ram
 17776              		.cfi_endproc
 17777              	.LFE172:
 17779              		.section	.text.convC2F,"ax",%progbits
 17780              		.align	1
 17781              		.p2align 2,,3
ARM GAS  /tmp/cccVhVyH.s 			page 489


 17782              		.global	convC2F
 17783              		.syntax unified
 17784              		.thumb
 17785              		.thumb_func
 17786              		.fpu fpv4-sp-d16
 17788              	convC2F:
 17789              	.LVL1292:
 17790              	.LFB174:
2507:src/xeq.c     **** 	decNumber s;
 17791              		.loc 1 2507 54 is_stmt 1 view -0
 17792              		.cfi_startproc
 17793              		@ args = 0, pretend = 0, frame = 40
 17794              		@ frame_needed = 0, uses_anonymous_args = 0
2508:src/xeq.c     **** 
 17795              		.loc 1 2508 2 view .LVU4637
2510:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17796              		.loc 1 2510 2 view .LVU4638
2507:src/xeq.c     **** 	decNumber s;
 17797              		.loc 1 2507 54 is_stmt 0 view .LVU4639
 17798 0000 10B5     		push	{r4, lr}
 17799              		.cfi_def_cfa_offset 8
 17800              		.cfi_offset 4, -8
 17801              		.cfi_offset 14, -4
 17802 0002 8AB0     		sub	sp, sp, #40
 17803              		.cfi_def_cfa_offset 48
2507:src/xeq.c     **** 	decNumber s;
 17804              		.loc 1 2507 54 view .LVU4640
 17805 0004 0446     		mov	r4, r0
2510:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17806              		.loc 1 2510 2 view .LVU4641
 17807 0006 054A     		ldr	r2, .L1258
 17808 0008 01A8     		add	r0, sp, #4
 17809              	.LVL1293:
2510:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17810              		.loc 1 2510 2 view .LVU4642
 17811 000a FFF7FEFF 		bl	dn_multiply
 17812              	.LVL1294:
2511:src/xeq.c     **** }
 17813              		.loc 1 2511 2 is_stmt 1 view .LVU4643
2511:src/xeq.c     **** }
 17814              		.loc 1 2511 9 is_stmt 0 view .LVU4644
 17815 000e 044A     		ldr	r2, .L1258+4
 17816 0010 2046     		mov	r0, r4
 17817 0012 01A9     		add	r1, sp, #4
 17818 0014 FFF7FEFF 		bl	dn_add
 17819              	.LVL1295:
2512:src/xeq.c     **** 
 17820              		.loc 1 2512 1 view .LVU4645
 17821 0018 0AB0     		add	sp, sp, #40
 17822              		.cfi_def_cfa_offset 8
 17823              		@ sp needed
 17824 001a 10BD     		pop	{r4, pc}
 17825              	.LVL1296:
 17826              	.L1259:
2512:src/xeq.c     **** 
 17827              		.loc 1 2512 1 view .LVU4646
 17828              		.align	2
ARM GAS  /tmp/cccVhVyH.s 			page 490


 17829              	.L1258:
 17830 001c 00000000 		.word	const_9on5
 17831 0020 00000000 		.word	const_32
 17832              		.cfi_endproc
 17833              	.LFE174:
 17835              		.section	.text.convF2C,"ax",%progbits
 17836              		.align	1
 17837              		.p2align 2,,3
 17838              		.global	convF2C
 17839              		.syntax unified
 17840              		.thumb
 17841              		.thumb_func
 17842              		.fpu fpv4-sp-d16
 17844              	convF2C:
 17845              	.LVL1297:
 17846              	.LFB175:
2514:src/xeq.c     **** 	decNumber s;
 17847              		.loc 1 2514 54 is_stmt 1 view -0
 17848              		.cfi_startproc
 17849              		@ args = 0, pretend = 0, frame = 40
 17850              		@ frame_needed = 0, uses_anonymous_args = 0
2515:src/xeq.c     **** 
 17851              		.loc 1 2515 2 view .LVU4648
2517:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17852              		.loc 1 2517 2 view .LVU4649
2514:src/xeq.c     **** 	decNumber s;
 17853              		.loc 1 2514 54 is_stmt 0 view .LVU4650
 17854 0000 10B5     		push	{r4, lr}
 17855              		.cfi_def_cfa_offset 8
 17856              		.cfi_offset 4, -8
 17857              		.cfi_offset 14, -4
 17858 0002 8AB0     		sub	sp, sp, #40
 17859              		.cfi_def_cfa_offset 48
2514:src/xeq.c     **** 	decNumber s;
 17860              		.loc 1 2514 54 view .LVU4651
 17861 0004 0446     		mov	r4, r0
2517:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17862              		.loc 1 2517 2 view .LVU4652
 17863 0006 054A     		ldr	r2, .L1262
 17864 0008 01A8     		add	r0, sp, #4
 17865              	.LVL1298:
2517:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17866              		.loc 1 2517 2 view .LVU4653
 17867 000a FFF7FEFF 		bl	dn_subtract
 17868              	.LVL1299:
2518:src/xeq.c     **** }
 17869              		.loc 1 2518 2 is_stmt 1 view .LVU4654
2518:src/xeq.c     **** }
 17870              		.loc 1 2518 9 is_stmt 0 view .LVU4655
 17871 000e 044A     		ldr	r2, .L1262+4
 17872 0010 2046     		mov	r0, r4
 17873 0012 01A9     		add	r1, sp, #4
 17874 0014 FFF7FEFF 		bl	dn_divide
 17875              	.LVL1300:
2519:src/xeq.c     **** 
 17876              		.loc 1 2519 1 view .LVU4656
 17877 0018 0AB0     		add	sp, sp, #40
ARM GAS  /tmp/cccVhVyH.s 			page 491


 17878              		.cfi_def_cfa_offset 8
 17879              		@ sp needed
 17880 001a 10BD     		pop	{r4, pc}
 17881              	.LVL1301:
 17882              	.L1263:
2519:src/xeq.c     **** 
 17883              		.loc 1 2519 1 view .LVU4657
 17884              		.align	2
 17885              	.L1262:
 17886 001c 00000000 		.word	const_32
 17887 0020 00000000 		.word	const_9on5
 17888              		.cfi_endproc
 17889              	.LFE175:
 17891              		.section	.text.convDB2AR,"ax",%progbits
 17892              		.align	1
 17893              		.p2align 2,,3
 17894              		.global	convDB2AR
 17895              		.syntax unified
 17896              		.thumb
 17897              		.thumb_func
 17898              		.fpu fpv4-sp-d16
 17900              	convDB2AR:
 17901              	.LVL1302:
 17902              	.LFB176:
2521:src/xeq.c     **** 	decNumber t;
 17903              		.loc 1 2521 56 is_stmt 1 view -0
 17904              		.cfi_startproc
 17905              		@ args = 0, pretend = 0, frame = 40
 17906              		@ frame_needed = 0, uses_anonymous_args = 0
2522:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
 17907              		.loc 1 2522 2 view .LVU4659
2523:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17908              		.loc 1 2523 2 view .LVU4660
2521:src/xeq.c     **** 	decNumber t;
 17909              		.loc 1 2521 56 is_stmt 0 view .LVU4661
 17910 0000 10B5     		push	{r4, lr}
 17911              		.cfi_def_cfa_offset 8
 17912              		.cfi_offset 4, -8
 17913              		.cfi_offset 14, -4
 17914 0002 8AB0     		sub	sp, sp, #40
 17915              		.cfi_def_cfa_offset 48
2523:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17916              		.loc 1 2523 2 view .LVU4662
 17917 0004 054A     		ldr	r2, .L1266
2521:src/xeq.c     **** 	decNumber t;
 17918              		.loc 1 2521 56 view .LVU4663
 17919 0006 0446     		mov	r4, r0
2523:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17920              		.loc 1 2523 2 view .LVU4664
 17921 0008 01A8     		add	r0, sp, #4
 17922              	.LVL1303:
2523:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17923              		.loc 1 2523 2 view .LVU4665
 17924 000a FFF7FEFF 		bl	dn_multiply
 17925              	.LVL1304:
2524:src/xeq.c     **** }
 17926              		.loc 1 2524 2 is_stmt 1 view .LVU4666
ARM GAS  /tmp/cccVhVyH.s 			page 492


2524:src/xeq.c     **** }
 17927              		.loc 1 2524 9 is_stmt 0 view .LVU4667
 17928 000e 01A9     		add	r1, sp, #4
 17929 0010 2046     		mov	r0, r4
 17930 0012 FFF7FEFF 		bl	decNumberPow10
 17931              	.LVL1305:
2525:src/xeq.c     **** 
 17932              		.loc 1 2525 1 view .LVU4668
 17933 0016 0AB0     		add	sp, sp, #40
 17934              		.cfi_def_cfa_offset 8
 17935              		@ sp needed
 17936 0018 10BD     		pop	{r4, pc}
 17937              	.LVL1306:
 17938              	.L1267:
2525:src/xeq.c     **** 
 17939              		.loc 1 2525 1 view .LVU4669
 17940 001a 00BF     		.align	2
 17941              	.L1266:
 17942 001c 00000000 		.word	const_0_05
 17943              		.cfi_endproc
 17944              	.LFE176:
 17946              		.section	.text.convAR2DB,"ax",%progbits
 17947              		.align	1
 17948              		.p2align 2,,3
 17949              		.global	convAR2DB
 17950              		.syntax unified
 17951              		.thumb
 17952              		.thumb_func
 17953              		.fpu fpv4-sp-d16
 17955              	convAR2DB:
 17956              	.LVL1307:
 17957              	.LFB177:
2527:src/xeq.c     **** 	decNumber t;
 17958              		.loc 1 2527 56 is_stmt 1 view -0
 17959              		.cfi_startproc
 17960              		@ args = 0, pretend = 0, frame = 40
 17961              		@ frame_needed = 0, uses_anonymous_args = 0
2528:src/xeq.c     **** 	dn_log10(&t, x);
 17962              		.loc 1 2528 2 view .LVU4671
2529:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17963              		.loc 1 2529 2 view .LVU4672
2527:src/xeq.c     **** 	decNumber t;
 17964              		.loc 1 2527 56 is_stmt 0 view .LVU4673
 17965 0000 10B5     		push	{r4, lr}
 17966              		.cfi_def_cfa_offset 8
 17967              		.cfi_offset 4, -8
 17968              		.cfi_offset 14, -4
 17969 0002 8AB0     		sub	sp, sp, #40
 17970              		.cfi_def_cfa_offset 48
2527:src/xeq.c     **** 	decNumber t;
 17971              		.loc 1 2527 56 view .LVU4674
 17972 0004 0446     		mov	r4, r0
2529:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17973              		.loc 1 2529 2 view .LVU4675
 17974 0006 01A8     		add	r0, sp, #4
 17975              	.LVL1308:
2529:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
ARM GAS  /tmp/cccVhVyH.s 			page 493


 17976              		.loc 1 2529 2 view .LVU4676
 17977 0008 FFF7FEFF 		bl	dn_log10
 17978              	.LVL1309:
2530:src/xeq.c     **** }
 17979              		.loc 1 2530 2 is_stmt 1 view .LVU4677
2530:src/xeq.c     **** }
 17980              		.loc 1 2530 9 is_stmt 0 view .LVU4678
 17981 000c 034A     		ldr	r2, .L1270
 17982 000e 2046     		mov	r0, r4
 17983 0010 01A9     		add	r1, sp, #4
 17984 0012 FFF7FEFF 		bl	dn_multiply
 17985              	.LVL1310:
2531:src/xeq.c     **** 
 17986              		.loc 1 2531 1 view .LVU4679
 17987 0016 0AB0     		add	sp, sp, #40
 17988              		.cfi_def_cfa_offset 8
 17989              		@ sp needed
 17990 0018 10BD     		pop	{r4, pc}
 17991              	.LVL1311:
 17992              	.L1271:
2531:src/xeq.c     **** 
 17993              		.loc 1 2531 1 view .LVU4680
 17994 001a 00BF     		.align	2
 17995              	.L1270:
 17996 001c 00000000 		.word	const_20
 17997              		.cfi_endproc
 17998              	.LFE177:
 18000              		.section	.text.convDB2PR,"ax",%progbits
 18001              		.align	1
 18002              		.p2align 2,,3
 18003              		.global	convDB2PR
 18004              		.syntax unified
 18005              		.thumb
 18006              		.thumb_func
 18007              		.fpu fpv4-sp-d16
 18009              	convDB2PR:
 18010              	.LVL1312:
 18011              	.LFB178:
2533:src/xeq.c     **** 	decNumber t;
 18012              		.loc 1 2533 56 is_stmt 1 view -0
 18013              		.cfi_startproc
 18014              		@ args = 0, pretend = 0, frame = 40
 18015              		@ frame_needed = 0, uses_anonymous_args = 0
2534:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
 18016              		.loc 1 2534 2 view .LVU4682
2535:src/xeq.c     **** 	return decNumberPow10(r, &t);
 18017              		.loc 1 2535 2 view .LVU4683
2533:src/xeq.c     **** 	decNumber t;
 18018              		.loc 1 2533 56 is_stmt 0 view .LVU4684
 18019 0000 10B5     		push	{r4, lr}
 18020              		.cfi_def_cfa_offset 8
 18021              		.cfi_offset 4, -8
 18022              		.cfi_offset 14, -4
 18023 0002 8AB0     		sub	sp, sp, #40
 18024              		.cfi_def_cfa_offset 48
2533:src/xeq.c     **** 	decNumber t;
 18025              		.loc 1 2533 56 view .LVU4685
ARM GAS  /tmp/cccVhVyH.s 			page 494


 18026 0004 0446     		mov	r4, r0
2535:src/xeq.c     **** 	return decNumberPow10(r, &t);
 18027              		.loc 1 2535 2 view .LVU4686
 18028 0006 4FF0FF32 		mov	r2, #-1
 18029 000a 01A8     		add	r0, sp, #4
 18030              	.LVL1313:
2535:src/xeq.c     **** 	return decNumberPow10(r, &t);
 18031              		.loc 1 2535 2 view .LVU4687
 18032 000c FFF7FEFF 		bl	dn_mulpow10
 18033              	.LVL1314:
2536:src/xeq.c     **** }
 18034              		.loc 1 2536 2 is_stmt 1 view .LVU4688
2536:src/xeq.c     **** }
 18035              		.loc 1 2536 9 is_stmt 0 view .LVU4689
 18036 0010 01A9     		add	r1, sp, #4
 18037 0012 2046     		mov	r0, r4
 18038 0014 FFF7FEFF 		bl	decNumberPow10
 18039              	.LVL1315:
2537:src/xeq.c     **** 
 18040              		.loc 1 2537 1 view .LVU4690
 18041 0018 0AB0     		add	sp, sp, #40
 18042              		.cfi_def_cfa_offset 8
 18043              		@ sp needed
 18044 001a 10BD     		pop	{r4, pc}
2537:src/xeq.c     **** 
 18045              		.loc 1 2537 1 view .LVU4691
 18046              		.cfi_endproc
 18047              	.LFE178:
 18049              		.section	.text.convPR2DB,"ax",%progbits
 18050              		.align	1
 18051              		.p2align 2,,3
 18052              		.global	convPR2DB
 18053              		.syntax unified
 18054              		.thumb
 18055              		.thumb_func
 18056              		.fpu fpv4-sp-d16
 18058              	convPR2DB:
 18059              	.LVL1316:
 18060              	.LFB179:
2539:src/xeq.c     **** 	decNumber t;
 18061              		.loc 1 2539 56 is_stmt 1 view -0
 18062              		.cfi_startproc
 18063              		@ args = 0, pretend = 0, frame = 40
 18064              		@ frame_needed = 0, uses_anonymous_args = 0
2540:src/xeq.c     **** 	dn_log10(&t, x);
 18065              		.loc 1 2540 2 view .LVU4693
2541:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18066              		.loc 1 2541 2 view .LVU4694
2539:src/xeq.c     **** 	decNumber t;
 18067              		.loc 1 2539 56 is_stmt 0 view .LVU4695
 18068 0000 10B5     		push	{r4, lr}
 18069              		.cfi_def_cfa_offset 8
 18070              		.cfi_offset 4, -8
 18071              		.cfi_offset 14, -4
 18072 0002 8AB0     		sub	sp, sp, #40
 18073              		.cfi_def_cfa_offset 48
2539:src/xeq.c     **** 	decNumber t;
ARM GAS  /tmp/cccVhVyH.s 			page 495


 18074              		.loc 1 2539 56 view .LVU4696
 18075 0004 0446     		mov	r4, r0
2541:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18076              		.loc 1 2541 2 view .LVU4697
 18077 0006 01A8     		add	r0, sp, #4
 18078              	.LVL1317:
2541:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18079              		.loc 1 2541 2 view .LVU4698
 18080 0008 FFF7FEFF 		bl	dn_log10
 18081              	.LVL1318:
2542:src/xeq.c     **** }
 18082              		.loc 1 2542 2 is_stmt 1 view .LVU4699
2542:src/xeq.c     **** }
 18083              		.loc 1 2542 9 is_stmt 0 view .LVU4700
 18084 000c 2046     		mov	r0, r4
 18085 000e 01A9     		add	r1, sp, #4
 18086 0010 0122     		movs	r2, #1
 18087 0012 FFF7FEFF 		bl	dn_mulpow10
 18088              	.LVL1319:
2543:src/xeq.c     **** 
 18089              		.loc 1 2543 1 view .LVU4701
 18090 0016 0AB0     		add	sp, sp, #40
 18091              		.cfi_def_cfa_offset 8
 18092              		@ sp needed
 18093 0018 10BD     		pop	{r4, pc}
2543:src/xeq.c     **** 
 18094              		.loc 1 2543 1 view .LVU4702
 18095              		.cfi_endproc
 18096              	.LFE179:
 18098 001a 00BF     		.section	.text.do_conv,"ax",%progbits
 18099              		.align	1
 18100              		.p2align 2,,3
 18101              		.global	do_conv
 18102              		.syntax unified
 18103              		.thumb
 18104              		.thumb_func
 18105              		.fpu fpv4-sp-d16
 18107              	do_conv:
 18108              	.LVL1320:
 18109              	.LFB180:
2546:src/xeq.c     **** 	decNumber m;
 18110              		.loc 1 2546 66 is_stmt 1 view -0
 18111              		.cfi_startproc
 18112              		@ args = 0, pretend = 0, frame = 40
 18113              		@ frame_needed = 0, uses_anonymous_args = 0
2547:src/xeq.c     **** 	const unsigned int conv = arg / 2;
 18114              		.loc 1 2547 2 view .LVU4704
2548:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18115              		.loc 1 2548 2 view .LVU4705
2549:src/xeq.c     **** 
 18116              		.loc 1 2549 2 view .LVU4706
2551:src/xeq.c     **** 		decNumberCopy(r, x);
 18117              		.loc 1 2551 2 view .LVU4707
2546:src/xeq.c     **** 	decNumber m;
 18118              		.loc 1 2546 66 is_stmt 0 view .LVU4708
 18119 0000 70B5     		push	{r4, r5, r6, lr}
 18120              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cccVhVyH.s 			page 496


 18121              		.cfi_offset 4, -16
 18122              		.cfi_offset 5, -12
 18123              		.cfi_offset 6, -8
 18124              		.cfi_offset 14, -4
2551:src/xeq.c     **** 		decNumberCopy(r, x);
 18125              		.loc 1 2551 5 view .LVU4709
 18126 0002 4D29     		cmp	r1, #77
2546:src/xeq.c     **** 	decNumber m;
 18127              		.loc 1 2546 66 view .LVU4710
 18128 0004 8AB0     		sub	sp, sp, #40
 18129              		.cfi_def_cfa_offset 56
2546:src/xeq.c     **** 	decNumber m;
 18130              		.loc 1 2546 66 view .LVU4711
 18131 0006 1546     		mov	r5, r2
2551:src/xeq.c     **** 		decNumberCopy(r, x);
 18132              		.loc 1 2551 5 view .LVU4712
 18133 0008 15D8     		bhi	.L1282
2556:src/xeq.c     **** 
 18134              		.loc 1 2556 2 is_stmt 1 view .LVU4713
 18135 000a 0D4B     		ldr	r3, .L1284
 18136 000c 0646     		mov	r6, r0
2548:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18137              		.loc 1 2548 21 is_stmt 0 view .LVU4714
 18138 000e 4808     		lsrs	r0, r1, #1
 18139              	.LVL1321:
2548:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18140              		.loc 1 2548 21 view .LVU4715
 18141 0010 0C46     		mov	r4, r1
2556:src/xeq.c     **** 
 18142              		.loc 1 2556 2 view .LVU4716
 18143 0012 03EB0010 		add	r0, r3, r0, lsl #4
 18144 0016 01A9     		add	r1, sp, #4
 18145              	.LVL1322:
2556:src/xeq.c     **** 
 18146              		.loc 1 2556 2 view .LVU4717
 18147 0018 FFF7FEFF 		bl	decimal64ToNumber
 18148              	.LVL1323:
2558:src/xeq.c     **** 		dn_divide(r, x, &m);
 18149              		.loc 1 2558 2 is_stmt 1 view .LVU4718
2558:src/xeq.c     **** 		dn_divide(r, x, &m);
 18150              		.loc 1 2558 5 is_stmt 0 view .LVU4719
 18151 001c E307     		lsls	r3, r4, #31
2559:src/xeq.c     **** 	else			// imperial to metric
 18152              		.loc 1 2559 3 view .LVU4720
 18153 001e 01AA     		add	r2, sp, #4
 18154 0020 2946     		mov	r1, r5
 18155 0022 3046     		mov	r0, r6
2558:src/xeq.c     **** 		dn_divide(r, x, &m);
 18156              		.loc 1 2558 5 view .LVU4721
 18157 0024 03D5     		bpl	.L1283
2561:src/xeq.c     **** }
 18158              		.loc 1 2561 3 is_stmt 1 view .LVU4722
 18159 0026 FFF7FEFF 		bl	dn_multiply
 18160              	.LVL1324:
2562:src/xeq.c     **** 
 18161              		.loc 1 2562 1 is_stmt 0 view .LVU4723
 18162 002a 0AB0     		add	sp, sp, #40
ARM GAS  /tmp/cccVhVyH.s 			page 497


 18163              		.cfi_remember_state
 18164              		.cfi_def_cfa_offset 16
 18165              		@ sp needed
 18166 002c 70BD     		pop	{r4, r5, r6, pc}
 18167              	.LVL1325:
 18168              	.L1283:
 18169              		.cfi_restore_state
2559:src/xeq.c     **** 	else			// imperial to metric
 18170              		.loc 1 2559 3 is_stmt 1 view .LVU4724
 18171 002e FFF7FEFF 		bl	dn_divide
 18172              	.LVL1326:
2562:src/xeq.c     **** 
 18173              		.loc 1 2562 1 is_stmt 0 view .LVU4725
 18174 0032 0AB0     		add	sp, sp, #40
 18175              		.cfi_remember_state
 18176              		.cfi_def_cfa_offset 16
 18177              		@ sp needed
 18178 0034 70BD     		pop	{r4, r5, r6, pc}
 18179              	.LVL1327:
 18180              	.L1282:
 18181              		.cfi_restore_state
2552:src/xeq.c     **** 		return;
 18182              		.loc 1 2552 3 is_stmt 1 view .LVU4726
 18183 0036 1146     		mov	r1, r2
 18184              	.LVL1328:
2552:src/xeq.c     **** 		return;
 18185              		.loc 1 2552 3 is_stmt 0 view .LVU4727
 18186 0038 FFF7FEFF 		bl	decNumberCopy
 18187              	.LVL1329:
2553:src/xeq.c     **** 	}
 18188              		.loc 1 2553 3 is_stmt 1 view .LVU4728
2562:src/xeq.c     **** 
 18189              		.loc 1 2562 1 is_stmt 0 view .LVU4729
 18190 003c 0AB0     		add	sp, sp, #40
 18191              		.cfi_def_cfa_offset 16
 18192              		@ sp needed
 18193 003e 70BD     		pop	{r4, r5, r6, pc}
 18194              	.LVL1330:
 18195              	.L1285:
2562:src/xeq.c     **** 
 18196              		.loc 1 2562 1 view .LVU4730
 18197              		.align	2
 18198              	.L1284:
 18199 0040 00000000 		.word	cnsts_conv
 18200              		.cfi_endproc
 18201              	.LFE180:
 18203              		.section	.text.cmdconv,"ax",%progbits
 18204              		.align	1
 18205              		.p2align 2,,3
 18206              		.global	cmdconv
 18207              		.syntax unified
 18208              		.thumb
 18209              		.thumb_func
 18210              		.fpu fpv4-sp-d16
 18212              	cmdconv:
 18213              	.LVL1331:
 18214              	.LFB181:
ARM GAS  /tmp/cccVhVyH.s 			page 498


2564:src/xeq.c     **** 	decNumber x, r;
 18215              		.loc 1 2564 46 is_stmt 1 view -0
 18216              		.cfi_startproc
 18217              		@ args = 0, pretend = 0, frame = 72
 18218              		@ frame_needed = 0, uses_anonymous_args = 0
2565:src/xeq.c     **** 
 18219              		.loc 1 2565 2 view .LVU4732
2567:src/xeq.c     **** 		return;
 18220              		.loc 1 2567 2 view .LVU4733
2567:src/xeq.c     **** 		return;
 18221              		.loc 1 2567 6 is_stmt 0 view .LVU4734
 18222 0000 0E4B     		ldr	r3, .L1294
 18223 0002 1B68     		ldr	r3, [r3]
 18224 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2567:src/xeq.c     **** 		return;
 18225              		.loc 1 2567 5 view .LVU4735
 18226 0008 DB07     		lsls	r3, r3, #31
 18227 000a 00D5     		bpl	.L1293
 18228 000c 7047     		bx	lr
 18229              	.L1293:
2564:src/xeq.c     **** 	decNumber x, r;
 18230              		.loc 1 2564 46 view .LVU4736
 18231 000e 10B5     		push	{r4, lr}
 18232              		.cfi_def_cfa_offset 8
 18233              		.cfi_offset 4, -8
 18234              		.cfi_offset 14, -4
 18235 0010 92B0     		sub	sp, sp, #72
 18236              		.cfi_def_cfa_offset 80
 18237 0012 0446     		mov	r4, r0
2570:src/xeq.c     **** 	do_conv(&r, arg, &x);
 18238              		.loc 1 2570 2 is_stmt 1 view .LVU4737
 18239              	.LVL1332:
 18240              	.LBB2957:
 18241              	.LBI2957:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18242              		.loc 1 824 12 view .LVU4738
 18243              	.LBB2958:
 825:src/xeq.c     **** }
 18244              		.loc 1 825 2 view .LVU4739
 825:src/xeq.c     **** }
 18245              		.loc 1 825 9 is_stmt 0 view .LVU4740
 18246 0014 6421     		movs	r1, #100
 18247              	.LVL1333:
 825:src/xeq.c     **** }
 18248              		.loc 1 825 9 view .LVU4741
 18249 0016 6846     		mov	r0, sp
 18250              	.LVL1334:
 825:src/xeq.c     **** }
 18251              		.loc 1 825 9 view .LVU4742
 18252 0018 FFF7FEFF 		bl	getRegister
 18253              	.LVL1335:
 825:src/xeq.c     **** }
 18254              		.loc 1 825 9 view .LVU4743
 18255              	.LBE2958:
 18256              	.LBE2957:
2571:src/xeq.c     **** 	setlastX();
 18257              		.loc 1 2571 2 is_stmt 1 view .LVU4744
ARM GAS  /tmp/cccVhVyH.s 			page 499


 18258 001c 6A46     		mov	r2, sp
 18259 001e 2146     		mov	r1, r4
 18260 0020 09A8     		add	r0, sp, #36
 18261 0022 FFF7FEFF 		bl	do_conv
 18262              	.LVL1336:
2572:src/xeq.c     **** 	setX(&r);
 18263              		.loc 1 2572 2 view .LVU4745
 18264              	.LBB2959:
 18265              	.LBI2959:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 18266              		.loc 1 792 6 view .LVU4746
 18267              	.LBB2960:
 793:src/xeq.c     **** }
 18268              		.loc 1 793 2 view .LVU4747
 18269 0026 6421     		movs	r1, #100
 18270 0028 6C20     		movs	r0, #108
 18271 002a FFF7FEFF 		bl	copyreg_n
 18272              	.LVL1337:
 18273              	.LBE2960:
 18274              	.LBE2959:
2573:src/xeq.c     **** }
 18275              		.loc 1 2573 2 view .LVU4748
 18276              	.LBB2961:
 18277              	.LBI2961:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 18278              		.loc 1 828 6 view .LVU4749
 18279              	.LBB2962:
 829:src/xeq.c     **** }
 18280              		.loc 1 829 2 view .LVU4750
 18281 002e 09A9     		add	r1, sp, #36
 18282              	.LVL1338:
 829:src/xeq.c     **** }
 18283              		.loc 1 829 2 is_stmt 0 view .LVU4751
 18284 0030 6420     		movs	r0, #100
 18285 0032 FFF7FEFF 		bl	setRegister
 18286              	.LVL1339:
 829:src/xeq.c     **** }
 18287              		.loc 1 829 2 view .LVU4752
 18288              	.LBE2962:
 18289              	.LBE2961:
2574:src/xeq.c     **** 
 18290              		.loc 1 2574 1 view .LVU4753
 18291 0036 12B0     		add	sp, sp, #72
 18292              		.cfi_def_cfa_offset 8
 18293              		@ sp needed
 18294 0038 10BD     		pop	{r4, pc}
 18295              	.LVL1340:
 18296              	.L1295:
2574:src/xeq.c     **** 
 18297              		.loc 1 2574 1 view .LVU4754
 18298 003a 00BF     		.align	2
 18299              	.L1294:
 18300 003c 00000000 		.word	main_ram
 18301              		.cfi_endproc
 18302              	.LFE181:
 18304              		.section	.rodata.fin_tst.str1.4,"aMS",%progbits,1
 18305              		.align	2
ARM GAS  /tmp/cccVhVyH.s 			page 500


 18306              	.LC2:
 18307 0000 66616C73 		.ascii	"false\000"
 18307      6500
 18308 0006 0000     		.align	2
 18309              	.LC3:
 18310 0008 74727565 		.ascii	"true\000"
 18310      00
 18311              		.section	.text.fin_tst,"ax",%progbits
 18312              		.align	1
 18313              		.p2align 2,,3
 18314              		.global	fin_tst
 18315              		.syntax unified
 18316              		.thumb
 18317              		.thumb_func
 18318              		.fpu fpv4-sp-d16
 18320              	fin_tst:
 18321              	.LVL1341:
 18322              	.LFB182:
2579:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 18323              		.loc 1 2579 27 is_stmt 1 view -0
 18324              		.cfi_startproc
 18325              		@ args = 0, pretend = 0, frame = 0
 18326              		@ frame_needed = 0, uses_anonymous_args = 0
2580:src/xeq.c     **** 	if (Running || XromRunning) {
 18327              		.loc 1 2580 2 view .LVU4756
2579:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 18328              		.loc 1 2579 27 is_stmt 0 view .LVU4757
 18329 0000 10B5     		push	{r4, lr}
 18330              		.cfi_def_cfa_offset 8
 18331              		.cfi_offset 4, -8
 18332              		.cfi_offset 14, -4
2580:src/xeq.c     **** 	if (Running || XromRunning) {
 18333              		.loc 1 2580 31 view .LVU4758
 18334 0002 50B1     		cbz	r0, .L1310
 18335              	.LVL1342:
2581:src/xeq.c     **** 		if (! a && incpc())
 18336              		.loc 1 2581 2 is_stmt 1 view .LVU4759
2581:src/xeq.c     **** 		if (! a && incpc())
 18337              		.loc 1 2581 14 is_stmt 0 view .LVU4760
 18338 0004 124A     		ldr	r2, .L1313
2581:src/xeq.c     **** 		if (! a && incpc())
 18339              		.loc 1 2581 6 view .LVU4761
 18340 0006 134B     		ldr	r3, .L1313+4
2581:src/xeq.c     **** 		if (! a && incpc())
 18341              		.loc 1 2581 14 view .LVU4762
 18342 0008 1268     		ldr	r2, [r2]
 18343 000a 1B68     		ldr	r3, [r3]
2580:src/xeq.c     **** 	if (Running || XromRunning) {
 18344              		.loc 1 2580 31 view .LVU4763
 18345 000c 1248     		ldr	r0, .L1313+8
 18346              	.LVL1343:
2581:src/xeq.c     **** 		if (! a && incpc())
 18347              		.loc 1 2581 14 view .LVU4764
 18348 000e 1343     		orrs	r3, r2, r3
 18349 0010 0AD0     		beq	.L1302
 18350              	.LVL1344:
 18351              	.L1299:
ARM GAS  /tmp/cccVhVyH.s 			page 501


2588:src/xeq.c     **** 		print_justified( msg );
 18352              		.loc 1 2588 2 is_stmt 1 view .LVU4765
2588:src/xeq.c     **** 		print_justified( msg );
 18353              		.loc 1 2588 6 is_stmt 0 view .LVU4766
 18354 0012 124C     		ldr	r4, .L1313+12
2588:src/xeq.c     **** 		print_justified( msg );
 18355              		.loc 1 2588 5 view .LVU4767
 18356 0014 2368     		ldr	r3, [r4]
 18357 0016 6BB9     		cbnz	r3, .L1311
 18358              	.L1296:
2593:src/xeq.c     **** 
 18359              		.loc 1 2593 1 view .LVU4768
 18360 0018 10BD     		pop	{r4, pc}
 18361              	.LVL1345:
 18362              	.L1310:
2581:src/xeq.c     **** 		if (! a && incpc())
 18363              		.loc 1 2581 2 is_stmt 1 view .LVU4769
2581:src/xeq.c     **** 		if (! a && incpc())
 18364              		.loc 1 2581 14 is_stmt 0 view .LVU4770
 18365 001a 0D4A     		ldr	r2, .L1313
2581:src/xeq.c     **** 		if (! a && incpc())
 18366              		.loc 1 2581 6 view .LVU4771
 18367 001c 0D4B     		ldr	r3, .L1313+4
2581:src/xeq.c     **** 		if (! a && incpc())
 18368              		.loc 1 2581 14 view .LVU4772
 18369 001e 1268     		ldr	r2, [r2]
 18370 0020 1B68     		ldr	r3, [r3]
 18371 0022 1343     		orrs	r3, r2, r3
 18372 0024 0BD1     		bne	.L1301
2580:src/xeq.c     **** 	if (Running || XromRunning) {
 18373              		.loc 1 2580 31 view .LVU4773
 18374 0026 0E48     		ldr	r0, .L1313+16
 18375              	.LVL1346:
 18376              	.L1302:
2586:src/xeq.c     **** #ifdef INFRARED
 18377              		.loc 1 2586 3 is_stmt 1 view .LVU4774
2586:src/xeq.c     **** #ifdef INFRARED
 18378              		.loc 1 2586 11 is_stmt 0 view .LVU4775
 18379 0028 0E4B     		ldr	r3, .L1313+20
2588:src/xeq.c     **** 		print_justified( msg );
 18380              		.loc 1 2588 6 view .LVU4776
 18381 002a 0C4C     		ldr	r4, .L1313+12
2586:src/xeq.c     **** #ifdef INFRARED
 18382              		.loc 1 2586 11 view .LVU4777
 18383 002c 1860     		str	r0, [r3]
2588:src/xeq.c     **** 		print_justified( msg );
 18384              		.loc 1 2588 2 is_stmt 1 view .LVU4778
2588:src/xeq.c     **** 		print_justified( msg );
 18385              		.loc 1 2588 5 is_stmt 0 view .LVU4779
 18386 002e 2368     		ldr	r3, [r4]
 18387 0030 002B     		cmp	r3, #0
 18388 0032 F1D0     		beq	.L1296
 18389              	.L1311:
2589:src/xeq.c     **** 		Tracing = 0;
 18390              		.loc 1 2589 3 is_stmt 1 view .LVU4780
 18391 0034 FFF7FEFF 		bl	print_justified
 18392              	.LVL1347:
ARM GAS  /tmp/cccVhVyH.s 			page 502


2590:src/xeq.c     **** 	}
 18393              		.loc 1 2590 3 view .LVU4781
2590:src/xeq.c     **** 	}
 18394              		.loc 1 2590 11 is_stmt 0 view .LVU4782
 18395 0038 0023     		movs	r3, #0
 18396 003a 2360     		str	r3, [r4]
2593:src/xeq.c     **** 
 18397              		.loc 1 2593 1 view .LVU4783
 18398 003c 10BD     		pop	{r4, pc}
 18399              	.LVL1348:
 18400              	.L1301:
2582:src/xeq.c     **** 			decpc();
 18401              		.loc 1 2582 14 discriminator 1 view .LVU4784
 18402 003e FFF7FEFF 		bl	incpc
 18403              	.LVL1349:
2582:src/xeq.c     **** 			decpc();
 18404              		.loc 1 2582 11 discriminator 1 view .LVU4785
 18405 0042 08B9     		cbnz	r0, .L1312
 18406 0044 0648     		ldr	r0, .L1313+16
 18407 0046 E4E7     		b	.L1299
 18408              	.L1312:
2583:src/xeq.c     **** 	}
 18409              		.loc 1 2583 4 is_stmt 1 view .LVU4786
 18410 0048 FFF7FEFF 		bl	decpc
 18411              	.LVL1350:
 18412 004c 0448     		ldr	r0, .L1313+16
 18413 004e E0E7     		b	.L1299
 18414              	.L1314:
 18415              		.align	2
 18416              	.L1313:
 18417 0050 00000000 		.word	XromRunning
 18418 0054 00000000 		.word	Running
 18419 0058 08000000 		.word	.LC3
 18420 005c 00000000 		.word	Tracing
 18421 0060 00000000 		.word	.LC2
 18422 0064 00000000 		.word	DispMsg
 18423              		.cfi_endproc
 18424              	.LFE182:
 18426              		.section	.text.check_mode,"ax",%progbits
 18427              		.align	1
 18428              		.p2align 2,,3
 18429              		.global	check_mode
 18430              		.syntax unified
 18431              		.thumb
 18432              		.thumb_func
 18433              		.fpu fpv4-sp-d16
 18435              	check_mode:
 18436              	.LVL1351:
 18437              	.LFB143:
2113:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
 18438              		.loc 1 2113 32 view -0
 18439              		.cfi_startproc
 18440              		@ args = 0, pretend = 0, frame = 0
 18441              		@ frame_needed = 0, uses_anonymous_args = 0
 18442              		@ link register save eliminated.
2114:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18443              		.loc 1 2114 2 view .LVU4788
ARM GAS  /tmp/cccVhVyH.s 			page 503


2115:src/xeq.c     **** 
 18444              		.loc 1 2115 2 view .LVU4789
2114:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18445              		.loc 1 2114 35 is_stmt 0 view .LVU4790
 18446 0000 084B     		ldr	r3, .L1316
 18447              	.LVL1352:
2114:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18448              		.loc 1 2114 35 view .LVU4791
 18449 0002 1B68     		ldr	r3, [r3]
 18450              	.LVL1353:
2117:src/xeq.c     **** }
 18451              		.loc 1 2117 2 view .LVU4792
 18452 0004 A0F19F00 		sub	r0, #159
 18453              	.LVL1354:
2117:src/xeq.c     **** }
 18454              		.loc 1 2117 2 view .LVU4793
 18455 0008 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 18456              	.LVL1355:
2117:src/xeq.c     **** }
 18457              		.loc 1 2117 2 is_stmt 1 view .LVU4794
 18458 000c B0FA80F0 		clz	r0, r0
 18459 0010 4009     		lsrs	r0, r0, #5
 18460 0012 03F00103 		and	r3, r3, #1
 18461 0016 C01A     		subs	r0, r0, r3
 18462 0018 B0FA80F0 		clz	r0, r0
 18463 001c 4009     		lsrs	r0, r0, #5
 18464 001e FFF7FEBF 		b	fin_tst
 18465              	.LVL1356:
 18466              	.L1317:
2117:src/xeq.c     **** }
 18467              		.loc 1 2117 2 is_stmt 0 view .LVU4795
 18468 0022 00BF     		.align	2
 18469              	.L1316:
 18470 0024 00000000 		.word	main_ram
 18471              		.cfi_endproc
 18472              	.LFE143:
 18474              		.section	.text.check_dblmode,"ax",%progbits
 18475              		.align	1
 18476              		.p2align 2,,3
 18477              		.global	check_dblmode
 18478              		.syntax unified
 18479              		.thumb
 18480              		.thumb_func
 18481              		.fpu fpv4-sp-d16
 18483              	check_dblmode:
 18484              	.LVL1357:
 18485              	.LFB144:
2123:src/xeq.c     **** 	fin_tst(is_dblmode());
 18486              		.loc 1 2123 35 is_stmt 1 view -0
 18487              		.cfi_startproc
 18488              		@ args = 0, pretend = 0, frame = 0
 18489              		@ frame_needed = 0, uses_anonymous_args = 0
 18490              		@ link register save eliminated.
2124:src/xeq.c     **** }
 18491              		.loc 1 2124 2 view .LVU4797
 18492              	.LBB2963:
 18493              	.LBI2963:
ARM GAS  /tmp/cccVhVyH.s 			page 504


1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 18494              		.loc 1 1121 5 view .LVU4798
 18495              	.LBB2964:
1122:src/xeq.c     **** }
 18496              		.loc 1 1122 2 view .LVU4799
1122:src/xeq.c     **** }
 18497              		.loc 1 1122 24 is_stmt 0 view .LVU4800
 18498 0000 064B     		ldr	r3, .L1319
 18499 0002 1B68     		ldr	r3, [r3]
 18500 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 18501 0008 44F20100 		movw	r0, #16385
 18502              	.LVL1358:
1122:src/xeq.c     **** }
 18503              		.loc 1 1122 24 view .LVU4801
 18504 000c 1840     		ands	r0, r0, r3
 18505              	.LBE2964:
 18506              	.LBE2963:
2124:src/xeq.c     **** }
 18507              		.loc 1 2124 2 view .LVU4802
 18508 000e A0F58040 		sub	r0, r0, #16384
 18509 0012 B0FA80F0 		clz	r0, r0
 18510 0016 4009     		lsrs	r0, r0, #5
 18511 0018 FFF7FEBF 		b	fin_tst
 18512              	.LVL1359:
 18513              	.L1320:
 18514              		.align	2
 18515              	.L1319:
 18516 001c 00000000 		.word	main_ram
 18517              		.cfi_endproc
 18518              	.LFE144:
 18520              		.section	.text.op_query_xtal,"ax",%progbits
 18521              		.align	1
 18522              		.p2align 2,,3
 18523              		.global	op_query_xtal
 18524              		.syntax unified
 18525              		.thumb
 18526              		.thumb_func
 18527              		.fpu fpv4-sp-d16
 18529              	op_query_xtal:
 18530              	.LVL1360:
 18531              	.LFB145:
2127:src/xeq.c     **** 	fin_tst(Xtal);
 18532              		.loc 1 2127 35 is_stmt 1 view -0
 18533              		.cfi_startproc
 18534              		@ args = 0, pretend = 0, frame = 0
 18535              		@ frame_needed = 0, uses_anonymous_args = 0
 18536              		@ link register save eliminated.
2128:src/xeq.c     **** }
 18537              		.loc 1 2128 2 view .LVU4804
 18538 0000 0120     		movs	r0, #1
 18539              	.LVL1361:
2128:src/xeq.c     **** }
 18540              		.loc 1 2128 2 is_stmt 0 view .LVU4805
 18541 0002 FFF7FEBF 		b	fin_tst
 18542              	.LVL1362:
 18543              		.cfi_endproc
 18544              	.LFE145:
ARM GAS  /tmp/cccVhVyH.s 			page 505


 18546 0006 00BF     		.section	.text.isTop,"ax",%progbits
 18547              		.align	1
 18548              		.p2align 2,,3
 18549              		.global	isTop
 18550              		.syntax unified
 18551              		.thumb
 18552              		.thumb_func
 18553              		.fpu fpv4-sp-d16
 18555              	isTop:
 18556              	.LVL1363:
 18557              	.LFB160:
2331:src/xeq.c     **** 	int top = 0;
 18558              		.loc 1 2331 27 is_stmt 1 view -0
 18559              		.cfi_startproc
 18560              		@ args = 0, pretend = 0, frame = 0
 18561              		@ frame_needed = 0, uses_anonymous_args = 0
 18562              		@ link register save eliminated.
2332:src/xeq.c     **** 
 18563              		.loc 1 2332 2 view .LVU4807
2334:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18564              		.loc 1 2334 2 view .LVU4808
2334:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18565              		.loc 1 2334 6 is_stmt 0 view .LVU4809
 18566 0000 0E4B     		ldr	r3, .L1330
 18567 0002 1868     		ldr	r0, [r3]
 18568              	.LVL1364:
2334:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18569              		.loc 1 2334 5 view .LVU4810
 18570 0004 78B1     		cbz	r0, .L1323
2335:src/xeq.c     **** 	}
 18571              		.loc 1 2335 3 is_stmt 1 view .LVU4811
2335:src/xeq.c     **** 	}
 18572              		.loc 1 2335 9 is_stmt 0 view .LVU4812
 18573 0006 0E4B     		ldr	r3, .L1330+4
 18574 0008 1A68     		ldr	r2, [r3]
 18575              	.LBB2965:
 18576              	.LBB2966:
 218:src/xeq.c     **** }
 18577              		.loc 1 218 9 view .LVU4813
 18578 000a B2F8DE37 		ldrh	r3, [r2, #2014]
 18579              	.LBE2966:
 18580              	.LBE2965:
2335:src/xeq.c     **** 	}
 18581              		.loc 1 2335 9 view .LVU4814
 18582 000e B2F9E207 		ldrsh	r0, [r2, #2018]
 18583              	.LBB2969:
 18584              	.LBI2965:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 18585              		.loc 1 217 5 is_stmt 1 view .LVU4815
 18586              	.LBB2967:
 218:src/xeq.c     **** }
 18587              		.loc 1 218 2 view .LVU4816
 218:src/xeq.c     **** }
 18588              		.loc 1 218 9 is_stmt 0 view .LVU4817
 18589 0012 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 18590              		.loc 1 218 57 view .LVU4818
ARM GAS  /tmp/cccVhVyH.s 			page 506


 18591 0016 002B     		cmp	r3, #0
 18592 0018 07DB     		blt	.L1329
 18593 001a 4FF0FF33 		mov	r3, #-1
 18594              	.L1324:
 18595              	.LBE2967:
 18596              	.LBE2969:
2335:src/xeq.c     **** 	}
 18597              		.loc 1 2335 19 view .LVU4819
 18598 001e 9842     		cmp	r0, r3
 18599 0020 B4BF     		ite	lt
 18600 0022 0020     		movlt	r0, #0
 18601 0024 0120     		movge	r0, #1
 18602              	.LVL1365:
 18603              	.L1323:
2337:src/xeq.c     **** }
 18604              		.loc 1 2337 2 is_stmt 1 view .LVU4820
 18605 0026 FFF7FEBF 		b	fin_tst
 18606              	.LVL1366:
 18607              	.L1329:
 18608              	.LBB2970:
 18609              	.LBB2968:
 218:src/xeq.c     **** }
 18610              		.loc 1 218 25 is_stmt 0 view .LVU4821
 18611 002a 064A     		ldr	r2, .L1330+8
 18612 002c 1268     		ldr	r2, [r2]
 218:src/xeq.c     **** }
 18613              		.loc 1 218 57 view .LVU4822
 18614 002e 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 18615 0032 C3F30B03 		ubfx	r3, r3, #0, #12
 18616 0036 DB43     		mvns	r3, r3
 18617 0038 F1E7     		b	.L1324
 18618              	.L1331:
 18619 003a 00BF     		.align	2
 18620              	.L1330:
 18621 003c 00000000 		.word	Running
 18622 0040 00000000 		.word	main_ram
 18623 0044 00000000 		.word	RetStk
 18624              	.LBE2968:
 18625              	.LBE2970:
 18626              		.cfi_endproc
 18627              	.LFE160:
 18629              		.section	.text.cmdlblp,"ax",%progbits
 18630              		.align	1
 18631              		.p2align 2,,3
 18632              		.global	cmdlblp
 18633              		.syntax unified
 18634              		.thumb
 18635              		.thumb_func
 18636              		.fpu fpv4-sp-d16
 18638              	cmdlblp:
 18639              	.LVL1367:
 18640              	.LFB161:
2342:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 18641              		.loc 1 2342 46 is_stmt 1 view -0
 18642              		.cfi_startproc
 18643              		@ args = 0, pretend = 0, frame = 0
 18644              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cccVhVyH.s 			page 507


2343:src/xeq.c     **** }
 18645              		.loc 1 2343 2 view .LVU4824
2342:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 18646              		.loc 1 2342 46 is_stmt 0 view .LVU4825
 18647 0000 08B5     		push	{r3, lr}
 18648              		.cfi_def_cfa_offset 8
 18649              		.cfi_offset 3, -8
 18650              		.cfi_offset 14, -4
2343:src/xeq.c     **** }
 18651              		.loc 1 2343 26 view .LVU4826
 18652 0002 084B     		ldr	r3, .L1334
 18653              	.LVL1368:
2343:src/xeq.c     **** }
 18654              		.loc 1 2343 26 view .LVU4827
 18655 0004 1B68     		ldr	r3, [r3]
 18656              	.LVL1369:
 18657              	.LBB2971:
 18658              	.LBI2971:
2217:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 18659              		.loc 1 2217 14 is_stmt 1 view .LVU4828
 18660              	.LBB2972:
2218:src/xeq.c     **** }
 18661              		.loc 1 2218 2 view .LVU4829
2218:src/xeq.c     **** }
 18662              		.loc 1 2218 9 is_stmt 0 view .LVU4830
 18663 0006 40F4C441 		orr	r1, r0, #25088
 18664              	.LVL1370:
2218:src/xeq.c     **** }
 18665              		.loc 1 2218 9 view .LVU4831
 18666 000a 0222     		movs	r2, #2
 18667 000c B3F8E007 		ldrh	r0, [r3, #2016]
 18668              	.LVL1371:
2218:src/xeq.c     **** }
 18669              		.loc 1 2218 9 view .LVU4832
 18670 0010 FFF7FEFF 		bl	find_opcode_from
 18671              	.LVL1372:
2218:src/xeq.c     **** }
 18672              		.loc 1 2218 9 view .LVU4833
 18673              	.LBE2972:
 18674              	.LBE2971:
2343:src/xeq.c     **** }
 18675              		.loc 1 2343 2 view .LVU4834
 18676 0014 0038     		subs	r0, r0, #0
2344:src/xeq.c     **** 
 18677              		.loc 1 2344 1 view .LVU4835
 18678 0016 BDE80840 		pop	{r3, lr}
 18679              		.cfi_restore 14
 18680              		.cfi_restore 3
 18681              		.cfi_def_cfa_offset 0
2343:src/xeq.c     **** }
 18682              		.loc 1 2343 2 view .LVU4836
 18683 001a 18BF     		it	ne
 18684 001c 0120     		movne	r0, #1
 18685 001e FFF7FEBF 		b	fin_tst
 18686              	.LVL1373:
 18687              	.L1335:
 18688 0022 00BF     		.align	2
ARM GAS  /tmp/cccVhVyH.s 			page 508


 18689              	.L1334:
 18690 0024 00000000 		.word	main_ram
 18691              		.cfi_endproc
 18692              	.LFE161:
 18694              		.section	.text.cmdmultilblp,"ax",%progbits
 18695              		.align	1
 18696              		.p2align 2,,3
 18697              		.global	cmdmultilblp
 18698              		.syntax unified
 18699              		.thumb
 18700              		.thumb_func
 18701              		.fpu fpv4-sp-d16
 18703              	cmdmultilblp:
 18704              	.LVL1374:
 18705              	.LFB164:
2371:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 18706              		.loc 1 2371 55 is_stmt 1 view -0
 18707              		.cfi_startproc
 18708              		@ args = 0, pretend = 0, frame = 0
 18709              		@ frame_needed = 0, uses_anonymous_args = 0
2372:src/xeq.c     **** }
 18710              		.loc 1 2372 2 view .LVU4838
2371:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 18711              		.loc 1 2371 55 is_stmt 0 view .LVU4839
 18712 0000 08B5     		push	{r3, lr}
 18713              		.cfi_def_cfa_offset 8
 18714              		.cfi_offset 3, -8
 18715              		.cfi_offset 14, -4
2372:src/xeq.c     **** }
 18716              		.loc 1 2372 10 view .LVU4840
 18717 0002 0021     		movs	r1, #0
 18718              	.LVL1375:
2372:src/xeq.c     **** }
 18719              		.loc 1 2372 10 view .LVU4841
 18720 0004 FFF7FEFF 		bl	findmultilbl
 18721              	.LVL1376:
2372:src/xeq.c     **** }
 18722              		.loc 1 2372 2 view .LVU4842
 18723 0008 0038     		subs	r0, r0, #0
2373:src/xeq.c     **** 
 18724              		.loc 1 2373 1 view .LVU4843
 18725 000a BDE80840 		pop	{r3, lr}
 18726              		.cfi_restore 14
 18727              		.cfi_restore 3
 18728              		.cfi_def_cfa_offset 0
2372:src/xeq.c     **** }
 18729              		.loc 1 2372 2 view .LVU4844
 18730 000e 18BF     		it	ne
 18731 0010 0120     		movne	r0, #1
 18732 0012 FFF7FEBF 		b	fin_tst
 18733              	.LVL1377:
 18734              		.cfi_endproc
 18735              	.LFE164:
 18737 0016 00BF     		.section	.text.cmdkeyp,"ax",%progbits
 18738              		.align	1
 18739              		.p2align 2,,3
 18740              		.global	cmdkeyp
ARM GAS  /tmp/cccVhVyH.s 			page 509


 18741              		.syntax unified
 18742              		.thumb
 18743              		.thumb_func
 18744              		.fpu fpv4-sp-d16
 18746              	cmdkeyp:
 18747              	.LVL1378:
 18748              	.LFB139:
2049:src/xeq.c     **** 	int cond = LastKey == 0;
 18749              		.loc 1 2049 46 is_stmt 1 view -0
 18750              		.cfi_startproc
 18751              		@ args = 0, pretend = 0, frame = 0
 18752              		@ frame_needed = 0, uses_anonymous_args = 0
2050:src/xeq.c     **** 	if (!cond) {
 18753              		.loc 1 2050 2 view .LVU4846
2049:src/xeq.c     **** 	int cond = LastKey == 0;
 18754              		.loc 1 2049 46 is_stmt 0 view .LVU4847
 18755 0000 70B5     		push	{r4, r5, r6, lr}
 18756              		.cfi_def_cfa_offset 16
 18757              		.cfi_offset 4, -16
 18758              		.cfi_offset 5, -12
 18759              		.cfi_offset 6, -8
 18760              		.cfi_offset 14, -4
2050:src/xeq.c     **** 	if (!cond) {
 18761              		.loc 1 2050 13 view .LVU4848
 18762 0002 104B     		ldr	r3, .L1345
 18763 0004 93F91320 		ldrsb	r2, [r3, #19]
2050:src/xeq.c     **** 	if (!cond) {
 18764              		.loc 1 2050 21 view .LVU4849
 18765 0008 002A     		cmp	r2, #0
2049:src/xeq.c     **** 	int cond = LastKey == 0;
 18766              		.loc 1 2049 46 view .LVU4850
 18767 000a 82B0     		sub	sp, sp, #8
 18768              		.cfi_def_cfa_offset 24
2050:src/xeq.c     **** 	if (!cond) {
 18769              		.loc 1 2050 21 view .LVU4851
 18770 000c 0CBF     		ite	eq
 18771 000e 0125     		moveq	r5, #1
 18772 0010 0025     		movne	r5, #0
 18773              	.LVL1379:
2051:src/xeq.c     **** 		int k = LastKey - 1;
 18774              		.loc 1 2051 2 is_stmt 1 view .LVU4852
2051:src/xeq.c     **** 		int k = LastKey - 1;
 18775              		.loc 1 2051 5 is_stmt 0 view .LVU4853
 18776 0012 05D1     		bne	.L1344
2056:src/xeq.c     **** }
 18777              		.loc 1 2056 2 is_stmt 1 view .LVU4854
 18778 0014 2846     		mov	r0, r5
 18779              	.LVL1380:
2057:src/xeq.c     **** 
 18780              		.loc 1 2057 1 is_stmt 0 view .LVU4855
 18781 0016 02B0     		add	sp, sp, #8
 18782              		.cfi_remember_state
 18783              		.cfi_def_cfa_offset 16
 18784              		@ sp needed
 18785 0018 BDE87040 		pop	{r4, r5, r6, lr}
 18786              		.cfi_restore 14
 18787              		.cfi_restore 6
ARM GAS  /tmp/cccVhVyH.s 			page 510


 18788              		.cfi_restore 5
 18789              		.cfi_restore 4
 18790              		.cfi_def_cfa_offset 0
 18791              	.LVL1381:
2056:src/xeq.c     **** }
 18792              		.loc 1 2056 2 view .LVU4856
 18793 001c FFF7FEBF 		b	fin_tst
 18794              	.LVL1382:
 18795              	.L1344:
 18796              		.cfi_restore_state
 18797              	.LBB2973:
2052:src/xeq.c     **** 		LastKey = 0;
 18798              		.loc 1 2052 3 is_stmt 1 view .LVU4857
2053:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18799              		.loc 1 2053 3 view .LVU4858
 18800 0020 0446     		mov	r4, r0
2053:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18801              		.loc 1 2053 11 is_stmt 0 view .LVU4859
 18802 0022 0026     		movs	r6, #0
2054:src/xeq.c     **** 	}
 18803              		.loc 1 2054 26 view .LVU4860
 18804 0024 501E     		subs	r0, r2, #1
 18805              	.LVL1383:
2053:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18806              		.loc 1 2053 11 view .LVU4861
 18807 0026 DE74     		strb	r6, [r3, #19]
2054:src/xeq.c     **** 	}
 18808              		.loc 1 2054 3 is_stmt 1 view .LVU4862
2054:src/xeq.c     **** 	}
 18809              		.loc 1 2054 26 is_stmt 0 view .LVU4863
 18810 0028 FFF7FEFF 		bl	keycode_to_row_column
 18811              	.LVL1384:
2054:src/xeq.c     **** 	}
 18812              		.loc 1 2054 26 view .LVU4864
 18813 002c 0246     		mov	r2, r0
2054:src/xeq.c     **** 	}
 18814              		.loc 1 2054 3 view .LVU4865
 18815 002e 0096     		str	r6, [sp]
 18816 0030 2046     		mov	r0, r4
 18817 0032 D317     		asrs	r3, r2, #31
 18818 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 18819              	.LVL1385:
 18820              	.LBE2973:
2056:src/xeq.c     **** }
 18821              		.loc 1 2056 2 is_stmt 1 view .LVU4866
 18822 0038 2846     		mov	r0, r5
2057:src/xeq.c     **** 
 18823              		.loc 1 2057 1 is_stmt 0 view .LVU4867
 18824 003a 02B0     		add	sp, sp, #8
 18825              		.cfi_def_cfa_offset 16
 18826              		@ sp needed
 18827 003c BDE87040 		pop	{r4, r5, r6, lr}
 18828              		.cfi_restore 14
 18829              		.cfi_restore 6
 18830              		.cfi_restore 5
 18831              		.cfi_restore 4
 18832              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cccVhVyH.s 			page 511


 18833              	.LVL1386:
2056:src/xeq.c     **** }
 18834              		.loc 1 2056 2 view .LVU4868
 18835 0040 FFF7FEBF 		b	fin_tst
 18836              	.LVL1387:
 18837              	.L1346:
2056:src/xeq.c     **** }
 18838              		.loc 1 2056 2 view .LVU4869
 18839              		.align	2
 18840              	.L1345:
 18841 0044 00000000 		.word	StateWhileOn
 18842              		.cfi_endproc
 18843              	.LFE139:
 18845              		.section	.text.do_tst,"ax",%progbits
 18846              		.align	1
 18847              		.p2align 2,,3
 18848              		.syntax unified
 18849              		.thumb
 18850              		.thumb_func
 18851              		.fpu fpv4-sp-d16
 18853              	do_tst:
 18854              	.LVL1388:
 18855              	.LFB188:
3294:src/xeq.c     **** 	int a = 0;
 18856              		.loc 1 3294 51 is_stmt 1 view -0
 18857              		.cfi_startproc
 18858              		@ args = 0, pretend = 0, frame = 112
 18859              		@ frame_needed = 0, uses_anonymous_args = 0
3295:src/xeq.c     **** 	int iszero, isneg;
 18860              		.loc 1 3295 2 view .LVU4871
3296:src/xeq.c     **** 
 18861              		.loc 1 3296 2 view .LVU4872
3298:src/xeq.c     **** 
 18862              		.loc 1 3298 2 view .LVU4873
 18863              	.LBB2974:
 18864              	.LBI2974:
1335:src/xeq.c     **** 	process_cmdline();
 18865              		.loc 1 1335 6 view .LVU4874
 18866              	.LBE2974:
1336:src/xeq.c     **** 	set_lift();
 18867              		.loc 1 1336 2 view .LVU4875
 18868              	.LBB2989:
 18869              	.LBB2975:
 18870              	.LBI2975:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 18871              		.loc 1 1229 6 view .LVU4876
 18872              	.LBB2976:
1230:src/xeq.c     **** 
 18873              		.loc 1 1230 2 view .LVU4877
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18874              		.loc 1 1232 2 view .LVU4878
 18875              	.LBE2976:
 18876              	.LBE2975:
 18877              	.LBE2989:
3294:src/xeq.c     **** 	int a = 0;
 18878              		.loc 1 3294 51 is_stmt 0 view .LVU4879
 18879 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
ARM GAS  /tmp/cccVhVyH.s 			page 512


 18880              		.cfi_def_cfa_offset 28
 18881              		.cfi_offset 4, -28
 18882              		.cfi_offset 5, -24
 18883              		.cfi_offset 6, -20
 18884              		.cfi_offset 7, -16
 18885              		.cfi_offset 8, -12
 18886              		.cfi_offset 9, -8
 18887              		.cfi_offset 14, -4
 18888              	.LBB2990:
 18889              	.LBB2980:
 18890              	.LBB2977:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18891              		.loc 1 1232 6 view .LVU4880
 18892 0004 584D     		ldr	r5, .L1382
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18893              		.loc 1 1232 5 view .LVU4881
 18894 0006 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 18895              	.LBE2977:
 18896              	.LBE2980:
 18897              	.LBE2990:
3294:src/xeq.c     **** 	int a = 0;
 18898              		.loc 1 3294 51 view .LVU4882
 18899 0008 9DB0     		sub	sp, sp, #116
 18900              		.cfi_def_cfa_offset 144
3294:src/xeq.c     **** 	int a = 0;
 18901              		.loc 1 3294 51 view .LVU4883
 18902 000a 8046     		mov	r8, r0
 18903 000c 0C46     		mov	r4, r1
 18904              	.LBB2991:
 18905              	.LBB2981:
 18906              	.LBB2978:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18907              		.loc 1 1232 5 view .LVU4884
 18908 000e 002B     		cmp	r3, #0
 18909 0010 5DD1     		bne	.L1380
 18910              	.LVL1389:
 18911              	.L1348:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18912              		.loc 1 1232 5 view .LVU4885
 18913              	.LBE2978:
 18914              	.LBE2981:
 18915              	.LBE2991:
1337:src/xeq.c     **** }
 18916              		.loc 1 1337 2 is_stmt 1 view .LVU4886
 18917              	.LBB2992:
 18918              	.LBB2982:
 18919              	.LBI2982:
 767:src/xeq.c     ****     State2.state_lift = 1;
 18920              		.loc 1 767 6 view .LVU4887
 18921              	.LBB2983:
 768:src/xeq.c     **** }
 18922              		.loc 1 768 5 view .LVU4888
 768:src/xeq.c     **** }
 18923              		.loc 1 768 23 is_stmt 0 view .LVU4889
 18924 0012 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 18925              	.LBE2983:
 18926              	.LBE2982:
ARM GAS  /tmp/cccVhVyH.s 			page 513


 18927              	.LBE2992:
3300:src/xeq.c     **** 		unsigned long long int xv, yv;
 18928              		.loc 1 3300 6 view .LVU4890
 18929 0014 554A     		ldr	r2, .L1382+4
 18930              	.LBB2993:
 18931              	.LBB2986:
 18932              	.LBB2984:
 768:src/xeq.c     **** }
 18933              		.loc 1 768 23 view .LVU4891
 18934 0016 43F04003 		orr	r3, r3, #64
 18935              	.LBE2984:
 18936              	.LBE2986:
 18937              	.LBE2993:
3300:src/xeq.c     **** 		unsigned long long int xv, yv;
 18938              		.loc 1 3300 6 view .LVU4892
 18939 001a 1268     		ldr	r2, [r2]
 18940              	.LBB2994:
 18941              	.LBB2987:
 18942              	.LBB2985:
 768:src/xeq.c     **** }
 18943              		.loc 1 768 23 view .LVU4893
 18944 001c EB75     		strb	r3, [r5, #23]
 18945              	.LBE2985:
 18946              	.LBE2987:
 18947              	.LBE2994:
3300:src/xeq.c     **** 		unsigned long long int xv, yv;
 18948              		.loc 1 3300 2 is_stmt 1 view .LVU4894
3300:src/xeq.c     **** 		unsigned long long int xv, yv;
 18949              		.loc 1 3300 6 is_stmt 0 view .LVU4895
 18950 001e 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3300:src/xeq.c     **** 		unsigned long long int xv, yv;
 18951              		.loc 1 3300 5 view .LVU4896
 18952 0022 DB07     		lsls	r3, r3, #31
 18953 0024 2CD5     		bpl	.L1349
 18954              	.LBB2995:
3301:src/xeq.c     **** 		int xs, ys;
 18955              		.loc 1 3301 3 is_stmt 1 view .LVU4897
3302:src/xeq.c     **** 
 18956              		.loc 1 3302 3 view .LVU4898
3304:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18957              		.loc 1 3304 3 view .LVU4899
 18958              	.LBB2996:
 18959              	.LBI2996:
1445:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 18960              		.loc 1 1445 15 view .LVU4900
 18961              	.LBB2997:
1446:src/xeq.c     **** }
 18962              		.loc 1 1446 2 view .LVU4901
1446:src/xeq.c     **** }
 18963              		.loc 1 1446 9 is_stmt 0 view .LVU4902
 18964 0026 6420     		movs	r0, #100
 18965 0028 FFF7FEFF 		bl	get_reg_n_int
 18966              	.LVL1390:
 18967              	.LBE2997:
 18968              	.LBE2996:
3304:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18969              		.loc 1 3304 8 view .LVU4903
ARM GAS  /tmp/cccVhVyH.s 			page 514


 18970 002c 0AAA     		add	r2, sp, #40
 18971 002e FFF7FEFF 		bl	extract_value
 18972              	.LVL1391:
3305:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18973              		.loc 1 3305 6 view .LVU4904
 18974 0032 B8F5FA6F 		cmp	r8, #2000
3304:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18975              		.loc 1 3304 8 view .LVU4905
 18976 0036 0646     		mov	r6, r0
 18977 0038 0F46     		mov	r7, r1
 18978              	.LVL1392:
3305:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18979              		.loc 1 3305 3 is_stmt 1 view .LVU4906
3305:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18980              		.loc 1 3305 6 is_stmt 0 view .LVU4907
 18981 003a 54DB     		blt	.L1350
3306:src/xeq.c     **** 			ys = 0;
 18982              		.loc 1 3306 4 is_stmt 1 view .LVU4908
3306:src/xeq.c     **** 			ys = 0;
 18983              		.loc 1 3306 30 is_stmt 0 view .LVU4909
 18984 003c A8F61B08 		subw	r8, r8, #2075
 18985              	.LVL1393:
3306:src/xeq.c     **** 			ys = 0;
 18986              		.loc 1 3306 7 view .LVU4910
 18987 0040 4FEAE879 		asr	r9, r8, #31
 18988              	.LVL1394:
3307:src/xeq.c     **** 		} else
 18989              		.loc 1 3307 4 is_stmt 1 view .LVU4911
 18990 0044 0022     		movs	r2, #0
 18991              	.LVL1395:
 18992              	.L1351:
3311:src/xeq.c     **** 			iszero = 1;
 18993              		.loc 1 3311 3 view .LVU4912
3311:src/xeq.c     **** 			iszero = 1;
 18994              		.loc 1 3311 6 is_stmt 0 view .LVU4913
 18995 0046 56EA0703 		orrs	r3, r6, r7
 18996 004a 43D1     		bne	.L1352
3311:src/xeq.c     **** 			iszero = 1;
 18997              		.loc 1 3311 15 discriminator 1 view .LVU4914
 18998 004c 58EA0903 		orrs	r3, r8, r9
 18999 0050 53D0     		beq	.L1353
 19000              	.L1355:
 19001 0052 0A9B     		ldr	r3, [sp, #40]
3316:src/xeq.c     **** 			if (xs)		// both negative
 19002              		.loc 1 3316 6 view .LVU4915
 19003 0054 9A42     		cmp	r2, r3
3314:src/xeq.c     **** 
 19004              		.loc 1 3314 24 view .LVU4916
 19005 0056 4FF00000 		mov	r0, #0
 19006              	.LVL1396:
3316:src/xeq.c     **** 			if (xs)		// both negative
 19007              		.loc 1 3316 3 is_stmt 1 view .LVU4917
3316:src/xeq.c     **** 			if (xs)		// both negative
 19008              		.loc 1 3316 6 is_stmt 0 view .LVU4918
 19009 005a 53D0     		beq	.L1356
 19010              	.LVL1397:
 19011              	.L1359:
ARM GAS  /tmp/cccVhVyH.s 			page 515


3316:src/xeq.c     **** 			if (xs)		// both negative
 19012              		.loc 1 3316 6 view .LVU4919
 19013              	.LBE2995:
3344:src/xeq.c     **** 	case TST_APX:
 19014              		.loc 1 3344 2 is_stmt 1 view .LVU4920
 19015 005c 062C     		cmp	r4, #6
 19016 005e 30D8     		bhi	.L1365
 19017 0060 DFE804F0 		tbb	[pc, r4]
 19018              	.L1367:
 19019 0064 09       		.byte	(.L1364-.L1367)/2
 19020 0065 58       		.byte	(.L1379-.L1367)/2
 19021 0066 09       		.byte	(.L1364-.L1367)/2
 19022 0067 2E       		.byte	(.L1370-.L1367)/2
 19023 0068 67       		.byte	(.L1369-.L1367)/2
 19024 0069 6C       		.byte	(.L1368-.L1367)/2
 19025 006a 04       		.byte	(.L1366-.L1367)/2
 19026 006b 00       		.p2align 1
 19027              	.L1366:
3351:src/xeq.c     **** 	default:	a = 0;			break;
 19028              		.loc 1 3351 15 view .LVU4921
3351:src/xeq.c     **** 	default:	a = 0;			break;
 19029              		.loc 1 3351 26 is_stmt 0 view .LVU4922
 19030 006c 002B     		cmp	r3, #0
 19031 006e 6AD0     		beq	.L1374
3351:src/xeq.c     **** 	default:	a = 0;			break;
 19032              		.loc 1 3351 26 discriminator 2 view .LVU4923
 19033 0070 0038     		subs	r0, r0, #0
3351:src/xeq.c     **** 	default:	a = 0;			break;
 19034              		.loc 1 3351 26 discriminator 2 view .LVU4924
 19035 0072 18BF     		it	ne
 19036 0074 0120     		movne	r0, #1
 19037              	.LVL1398:
 19038              	.L1364:
3355:src/xeq.c     **** }
 19039              		.loc 1 3355 7 is_stmt 1 view .LVU4925
 19040 0076 FFF7FEFF 		bl	fin_tst
 19041              	.LVL1399:
3356:src/xeq.c     **** 
 19042              		.loc 1 3356 1 is_stmt 0 view .LVU4926
 19043 007a 1DB0     		add	sp, sp, #116
 19044              		.cfi_remember_state
 19045              		.cfi_def_cfa_offset 28
 19046              		@ sp needed
 19047 007c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 19048              	.LVL1400:
 19049              	.L1349:
 19050              		.cfi_restore_state
 19051              	.LBB2998:
3324:src/xeq.c     **** 
 19052              		.loc 1 3324 3 is_stmt 1 view .LVU4927
3326:src/xeq.c     **** 		if (decNumberIsNaN(&x))
 19053              		.loc 1 3326 3 view .LVU4928
 19054              	.LBB2999:
 19055              	.LBI2999:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19056              		.loc 1 824 12 view .LVU4929
 19057              	.LBB3000:
ARM GAS  /tmp/cccVhVyH.s 			page 516


 825:src/xeq.c     **** }
 19058              		.loc 1 825 2 view .LVU4930
 825:src/xeq.c     **** }
 19059              		.loc 1 825 9 is_stmt 0 view .LVU4931
 19060 0080 0AA8     		add	r0, sp, #40
 19061              	.LVL1401:
 825:src/xeq.c     **** }
 19062              		.loc 1 825 9 view .LVU4932
 19063 0082 6421     		movs	r1, #100
 19064 0084 FFF7FEFF 		bl	getRegister
 19065              	.LVL1402:
 825:src/xeq.c     **** }
 19066              		.loc 1 825 9 view .LVU4933
 19067              	.LBE3000:
 19068              	.LBE2999:
3327:src/xeq.c     **** 			goto flse;
 19069              		.loc 1 3327 3 is_stmt 1 view .LVU4934
3327:src/xeq.c     **** 			goto flse;
 19070              		.loc 1 3327 6 is_stmt 0 view .LVU4935
 19071 0088 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
 19072 008c 13F0300F 		tst	r3, #48
 19073 0090 17D1     		bne	.L1365
3330:src/xeq.c     **** 		if (decNumberIsNaN(&t))
 19074              		.loc 1 3330 3 is_stmt 1 view .LVU4936
 19075 0092 01A8     		add	r0, sp, #4
 19076 0094 4146     		mov	r1, r8
 19077 0096 FFF7FEFF 		bl	getRegister
 19078              	.LVL1403:
3331:src/xeq.c     **** 			goto flse;
 19079              		.loc 1 3331 3 view .LVU4937
3331:src/xeq.c     **** 			goto flse;
 19080              		.loc 1 3331 6 is_stmt 0 view .LVU4938
 19081 009a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 19082 009e 13F0300F 		tst	r3, #48
 19083 00a2 0ED1     		bne	.L1365
3334:src/xeq.c     **** 			decNumberRnd(&x, &x);
 19084              		.loc 1 3334 3 is_stmt 1 view .LVU4939
3334:src/xeq.c     **** 			decNumberRnd(&x, &x);
 19085              		.loc 1 3334 6 is_stmt 0 view .LVU4940
 19086 00a4 022C     		cmp	r4, #2
 19087 00a6 53D0     		beq	.L1381
 19088              	.L1362:
3339:src/xeq.c     **** 		iszero = dn_eq0(&r);
 19089              		.loc 1 3339 3 is_stmt 1 view .LVU4941
 19090 00a8 01AA     		add	r2, sp, #4
 19091 00aa 0AA9     		add	r1, sp, #40
 19092 00ac 13A8     		add	r0, sp, #76
 19093 00ae FFF7FEFF 		bl	dn_compare
 19094              	.LVL1404:
3340:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 19095              		.loc 1 3340 3 view .LVU4942
3340:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 19096              		.loc 1 3340 12 is_stmt 0 view .LVU4943
 19097 00b2 13A8     		add	r0, sp, #76
 19098 00b4 FFF7FEFF 		bl	dn_eq0
 19099              	.LVL1405:
3341:src/xeq.c     **** 	}
ARM GAS  /tmp/cccVhVyH.s 			page 517


 19100              		.loc 1 3341 11 view .LVU4944
 19101 00b8 9DF95430 		ldrsb	r3, [sp, #84]
 19102              	.LVL1406:
3341:src/xeq.c     **** 	}
 19103              		.loc 1 3341 3 is_stmt 1 view .LVU4945
3341:src/xeq.c     **** 	}
 19104              		.loc 1 3341 11 is_stmt 0 view .LVU4946
 19105 00bc DB0F     		lsrs	r3, r3, #31
 19106              	.LVL1407:
3341:src/xeq.c     **** 	}
 19107              		.loc 1 3341 11 view .LVU4947
 19108 00be CDE7     		b	.L1359
 19109              	.LVL1408:
 19110              	.L1370:
3341:src/xeq.c     **** 	}
 19111              		.loc 1 3341 11 view .LVU4948
 19112              	.LBE2998:
3348:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19113              		.loc 1 3348 15 is_stmt 1 view .LVU4949
3348:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19114              		.loc 1 3348 25 is_stmt 0 view .LVU4950
 19115 00c0 43BB     		cbnz	r3, .L1379
 19116              	.LVL1409:
 19117              	.L1365:
3348:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19118              		.loc 1 3348 25 view .LVU4951
 19119 00c2 0020     		movs	r0, #0
 19120              	.LVL1410:
3355:src/xeq.c     **** }
 19121              		.loc 1 3355 7 is_stmt 1 view .LVU4952
 19122 00c4 FFF7FEFF 		bl	fin_tst
 19123              	.LVL1411:
3356:src/xeq.c     **** 
 19124              		.loc 1 3356 1 is_stmt 0 view .LVU4953
 19125 00c8 1DB0     		add	sp, sp, #116
 19126              		.cfi_remember_state
 19127              		.cfi_def_cfa_offset 28
 19128              		@ sp needed
 19129 00ca BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 19130              	.LVL1412:
 19131              	.L1380:
 19132              		.cfi_restore_state
 19133              	.LBB3001:
 19134              	.LBB2988:
 19135              	.LBB2979:
3356:src/xeq.c     **** 
 19136              		.loc 1 3356 1 view .LVU4954
 19137 00ce FFF7FEFF 		bl	process_cmdline.part.0
 19138              	.LVL1413:
3356:src/xeq.c     **** 
 19139              		.loc 1 3356 1 view .LVU4955
 19140 00d2 9EE7     		b	.L1348
 19141              	.LVL1414:
 19142              	.L1352:
3356:src/xeq.c     **** 
 19143              		.loc 1 3356 1 view .LVU4956
 19144              	.LBE2979:
ARM GAS  /tmp/cccVhVyH.s 			page 518


 19145              	.LBE2988:
 19146              	.LBE3001:
 19147              	.LBB3002:
3314:src/xeq.c     **** 
 19148              		.loc 1 3314 4 is_stmt 1 view .LVU4957
3314:src/xeq.c     **** 
 19149              		.loc 1 3314 24 is_stmt 0 view .LVU4958
 19150 00d4 B945     		cmp	r9, r7
 19151 00d6 08BF     		it	eq
 19152 00d8 B045     		cmpeq	r8, r6
 19153 00da BAD1     		bne	.L1355
3314:src/xeq.c     **** 
 19154              		.loc 1 3314 31 discriminator 1 view .LVU4959
 19155 00dc 0A9B     		ldr	r3, [sp, #40]
3314:src/xeq.c     **** 
 19156              		.loc 1 3314 24 discriminator 1 view .LVU4960
 19157 00de 9342     		cmp	r3, r2
 19158 00e0 33D0     		beq	.L1372
3314:src/xeq.c     **** 
 19159              		.loc 1 3314 24 view .LVU4961
 19160 00e2 0020     		movs	r0, #0
 19161 00e4 BAE7     		b	.L1359
 19162              	.LVL1415:
 19163              	.L1350:
3309:src/xeq.c     **** 
 19164              		.loc 1 3309 4 is_stmt 1 view .LVU4962
3309:src/xeq.c     **** 
 19165              		.loc 1 3309 9 is_stmt 0 view .LVU4963
 19166 00e6 4046     		mov	r0, r8
 19167 00e8 FFF7FEFF 		bl	get_reg_n_int
 19168              	.LVL1416:
 19169 00ec 13AA     		add	r2, sp, #76
 19170 00ee FFF7FEFF 		bl	extract_value
 19171              	.LVL1417:
 19172 00f2 139A     		ldr	r2, [sp, #76]
 19173 00f4 8046     		mov	r8, r0
 19174              	.LVL1418:
3309:src/xeq.c     **** 
 19175              		.loc 1 3309 9 view .LVU4964
 19176 00f6 8946     		mov	r9, r1
 19177              	.LVL1419:
3309:src/xeq.c     **** 
 19178              		.loc 1 3309 9 view .LVU4965
 19179 00f8 A5E7     		b	.L1351
 19180              	.L1353:
3309:src/xeq.c     **** 
 19181              		.loc 1 3309 9 view .LVU4966
 19182 00fa 0A9B     		ldr	r3, [sp, #40]
3316:src/xeq.c     **** 			if (xs)		// both negative
 19183              		.loc 1 3316 6 view .LVU4967
 19184 00fc 9A42     		cmp	r2, r3
3312:src/xeq.c     **** 		else
 19185              		.loc 1 3312 11 view .LVU4968
 19186 00fe 4FF00100 		mov	r0, #1
 19187              	.LVL1420:
3316:src/xeq.c     **** 			if (xs)		// both negative
 19188              		.loc 1 3316 3 is_stmt 1 view .LVU4969
ARM GAS  /tmp/cccVhVyH.s 			page 519


3316:src/xeq.c     **** 			if (xs)		// both negative
 19189              		.loc 1 3316 6 is_stmt 0 view .LVU4970
 19190 0102 ABD1     		bne	.L1359
 19191              	.LVL1421:
 19192              	.L1356:
3317:src/xeq.c     **** 				isneg = xv > yv;
 19193              		.loc 1 3317 4 is_stmt 1 view .LVU4971
3317:src/xeq.c     **** 				isneg = xv > yv;
 19194              		.loc 1 3317 7 is_stmt 0 view .LVU4972
 19195 0104 73B1     		cbz	r3, .L1358
3318:src/xeq.c     **** 			else		// both positive
 19196              		.loc 1 3318 5 is_stmt 1 view .LVU4973
3318:src/xeq.c     **** 			else		// both positive
 19197              		.loc 1 3318 16 is_stmt 0 view .LVU4974
 19198 0106 B945     		cmp	r9, r7
 19199 0108 08BF     		it	eq
 19200 010a B045     		cmpeq	r8, r6
 19201 010c 34BF     		ite	cc
 19202 010e 0123     		movcc	r3, #1
 19203 0110 0023     		movcs	r3, #0
 19204              	.LVL1422:
3318:src/xeq.c     **** 			else		// both positive
 19205              		.loc 1 3318 16 view .LVU4975
 19206 0112 A3E7     		b	.L1359
 19207              	.LVL1423:
 19208              	.L1379:
3318:src/xeq.c     **** 			else		// both positive
 19209              		.loc 1 3318 16 view .LVU4976
 19210              	.LBE3002:
3348:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19211              		.loc 1 3348 25 discriminator 1 view .LVU4977
 19212 0114 B0FA80F0 		clz	r0, r0
 19213              	.LVL1424:
3348:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19214              		.loc 1 3348 25 discriminator 1 view .LVU4978
 19215 0118 4009     		lsrs	r0, r0, #5
 19216              	.LVL1425:
3355:src/xeq.c     **** }
 19217              		.loc 1 3355 7 is_stmt 1 discriminator 1 view .LVU4979
 19218 011a FFF7FEFF 		bl	fin_tst
 19219              	.LVL1426:
3356:src/xeq.c     **** 
 19220              		.loc 1 3356 1 is_stmt 0 discriminator 1 view .LVU4980
 19221 011e 1DB0     		add	sp, sp, #116
 19222              		.cfi_remember_state
 19223              		.cfi_def_cfa_offset 28
 19224              		@ sp needed
 19225 0120 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 19226              	.LVL1427:
 19227              	.L1358:
 19228              		.cfi_restore_state
 19229              	.LBB3003:
3320:src/xeq.c     **** 		} else
 19230              		.loc 1 3320 5 is_stmt 1 view .LVU4981
3320:src/xeq.c     **** 		} else
 19231              		.loc 1 3320 16 is_stmt 0 view .LVU4982
 19232 0124 4F45     		cmp	r7, r9
ARM GAS  /tmp/cccVhVyH.s 			page 520


 19233 0126 08BF     		it	eq
 19234 0128 4645     		cmpeq	r6, r8
 19235 012a 34BF     		ite	cc
 19236 012c 0123     		movcc	r3, #1
 19237 012e 0023     		movcs	r3, #0
 19238              	.LVL1428:
3320:src/xeq.c     **** 		} else
 19239              		.loc 1 3320 16 view .LVU4983
 19240 0130 94E7     		b	.L1359
 19241              	.LVL1429:
 19242              	.L1369:
3320:src/xeq.c     **** 		} else
 19243              		.loc 1 3320 16 view .LVU4984
 19244              	.LBE3003:
3349:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19245              		.loc 1 3349 15 is_stmt 1 discriminator 2 view .LVU4985
3349:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19246              		.loc 1 3349 25 is_stmt 0 discriminator 2 view .LVU4986
 19247 0132 0343     		orrs	r3, r0, r3
 19248              	.LVL1430:
3349:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19249              		.loc 1 3349 25 discriminator 2 view .LVU4987
 19250 0134 14BF     		ite	ne
 19251 0136 0120     		movne	r0, #1
 19252              	.LVL1431:
3349:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19253              		.loc 1 3349 25 discriminator 2 view .LVU4988
 19254 0138 0020     		moveq	r0, #0
 19255 013a 9CE7     		b	.L1364
 19256              	.LVL1432:
 19257              	.L1368:
3350:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19258              		.loc 1 3350 15 is_stmt 1 discriminator 1 view .LVU4989
3350:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19259              		.loc 1 3350 26 is_stmt 0 discriminator 1 view .LVU4990
 19260 013c 0343     		orrs	r3, r0, r3
 19261              	.LVL1433:
3350:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19262              		.loc 1 3350 26 discriminator 1 view .LVU4991
 19263 013e 0CBF     		ite	eq
 19264 0140 0120     		moveq	r0, #1
 19265              	.LVL1434:
3350:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19266              		.loc 1 3350 26 discriminator 1 view .LVU4992
 19267 0142 0020     		movne	r0, #0
 19268 0144 97E7     		b	.L1364
 19269              	.LVL1435:
 19270              	.L1374:
3351:src/xeq.c     **** 	default:	a = 0;			break;
 19271              		.loc 1 3351 26 view .LVU4993
 19272 0146 0120     		movs	r0, #1
 19273              	.LVL1436:
3351:src/xeq.c     **** 	default:	a = 0;			break;
 19274              		.loc 1 3351 26 view .LVU4994
 19275 0148 95E7     		b	.L1364
 19276              	.LVL1437:
 19277              	.L1372:
ARM GAS  /tmp/cccVhVyH.s 			page 521


 19278              	.LBB3004:
3351:src/xeq.c     **** 	default:	a = 0;			break;
 19279              		.loc 1 3351 26 view .LVU4995
 19280 014a 1346     		mov	r3, r2
3314:src/xeq.c     **** 
 19281              		.loc 1 3314 24 view .LVU4996
 19282 014c 0120     		movs	r0, #1
 19283 014e D9E7     		b	.L1356
 19284              	.LVL1438:
 19285              	.L1381:
3314:src/xeq.c     **** 
 19286              		.loc 1 3314 24 view .LVU4997
 19287              	.LBE3004:
 19288              	.LBB3005:
3335:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
 19289              		.loc 1 3335 4 is_stmt 1 view .LVU4998
 19290 0150 0AA9     		add	r1, sp, #40
 19291 0152 0846     		mov	r0, r1
 19292 0154 FFF7FEFF 		bl	decNumberRnd
 19293              	.LVL1439:
3336:src/xeq.c     **** 				decNumberRnd(&t, &t);
 19294              		.loc 1 3336 4 view .LVU4999
3336:src/xeq.c     **** 				decNumberRnd(&t, &t);
 19295              		.loc 1 3336 7 is_stmt 0 view .LVU5000
 19296 0158 B8F5FA6F 		cmp	r8, #2000
 19297 015c A4DA     		bge	.L1362
3337:src/xeq.c     **** 		}
 19298              		.loc 1 3337 5 is_stmt 1 view .LVU5001
 19299 015e 01A9     		add	r1, sp, #4
 19300 0160 0846     		mov	r0, r1
 19301 0162 FFF7FEFF 		bl	decNumberRnd
 19302              	.LVL1440:
 19303 0166 9FE7     		b	.L1362
 19304              	.L1383:
 19305              		.align	2
 19306              	.L1382:
 19307 0168 00000000 		.word	StateWhileOn
 19308 016c 00000000 		.word	main_ram
 19309              	.LBE3005:
 19310              		.cfi_endproc
 19311              	.LFE188:
 19313              		.section	.text.do_ztst,"ax",%progbits
 19314              		.align	1
 19315              		.p2align 2,,3
 19316              		.syntax unified
 19317              		.thumb
 19318              		.thumb_func
 19319              		.fpu fpv4-sp-d16
 19321              	do_ztst:
 19322              	.LVL1441:
 19323              	.LFB191:
3381:src/xeq.c     **** 	decNumber x, y;
 19324              		.loc 1 3381 79 view -0
 19325              		.cfi_startproc
 19326              		@ args = 0, pretend = 0, frame = 72
 19327              		@ frame_needed = 0, uses_anonymous_args = 0
3382:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 522


 19328              		.loc 1 3382 2 view .LVU5003
3384:src/xeq.c     **** 	if (is_intmode()) {
 19329              		.loc 1 3384 2 view .LVU5004
 19330              	.LBB3021:
 19331              	.LBI3021:
1335:src/xeq.c     **** 	process_cmdline();
 19332              		.loc 1 1335 6 view .LVU5005
 19333              	.LBE3021:
1336:src/xeq.c     **** 	set_lift();
 19334              		.loc 1 1336 2 view .LVU5006
 19335              	.LBB3036:
 19336              	.LBB3022:
 19337              	.LBI3022:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 19338              		.loc 1 1229 6 view .LVU5007
 19339              	.LBB3023:
1230:src/xeq.c     **** 
 19340              		.loc 1 1230 2 view .LVU5008
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19341              		.loc 1 1232 2 view .LVU5009
 19342              	.LBE3023:
 19343              	.LBE3022:
 19344              	.LBE3036:
3381:src/xeq.c     **** 	decNumber x, y;
 19345              		.loc 1 3381 79 is_stmt 0 view .LVU5010
 19346 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 19347              		.cfi_def_cfa_offset 20
 19348              		.cfi_offset 4, -20
 19349              		.cfi_offset 5, -16
 19350              		.cfi_offset 6, -12
 19351              		.cfi_offset 7, -8
 19352              		.cfi_offset 14, -4
 19353              	.LBB3037:
 19354              	.LBB3027:
 19355              	.LBB3024:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19356              		.loc 1 1232 6 view .LVU5011
 19357 0002 274C     		ldr	r4, .L1401
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19358              		.loc 1 1232 5 view .LVU5012
 19359 0004 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 19360              	.LBE3024:
 19361              	.LBE3027:
 19362              	.LBE3037:
3381:src/xeq.c     **** 	decNumber x, y;
 19363              		.loc 1 3381 79 view .LVU5013
 19364 0006 93B0     		sub	sp, sp, #76
 19365              		.cfi_def_cfa_offset 96
3381:src/xeq.c     **** 	decNumber x, y;
 19366              		.loc 1 3381 79 view .LVU5014
 19367 0008 0546     		mov	r5, r0
 19368 000a 0F46     		mov	r7, r1
 19369 000c 1646     		mov	r6, r2
 19370              	.LBB3038:
 19371              	.LBB3028:
 19372              	.LBB3025:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
ARM GAS  /tmp/cccVhVyH.s 			page 523


 19373              		.loc 1 1232 5 view .LVU5015
 19374 000e 002B     		cmp	r3, #0
 19375 0010 39D1     		bne	.L1399
 19376              	.LVL1442:
 19377              	.L1385:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19378              		.loc 1 1232 5 view .LVU5016
 19379              	.LBE3025:
 19380              	.LBE3028:
 19381              	.LBE3038:
1337:src/xeq.c     **** }
 19382              		.loc 1 1337 2 is_stmt 1 view .LVU5017
 19383              	.LBB3039:
 19384              	.LBB3029:
 19385              	.LBI3029:
 767:src/xeq.c     ****     State2.state_lift = 1;
 19386              		.loc 1 767 6 view .LVU5018
 19387              	.LBB3030:
 768:src/xeq.c     **** }
 19388              		.loc 1 768 5 view .LVU5019
 768:src/xeq.c     **** }
 19389              		.loc 1 768 23 is_stmt 0 view .LVU5020
 19390 0012 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 19391              	.LBE3030:
 19392              	.LBE3029:
 19393              	.LBE3039:
3385:src/xeq.c     **** 		bad_mode_error();
 19394              		.loc 1 3385 6 view .LVU5021
 19395 0014 234A     		ldr	r2, .L1401+4
 19396              	.LBB3040:
 19397              	.LBB3033:
 19398              	.LBB3031:
 768:src/xeq.c     **** }
 19399              		.loc 1 768 23 view .LVU5022
 19400 0016 43F04003 		orr	r3, r3, #64
 19401              	.LBE3031:
 19402              	.LBE3033:
 19403              	.LBE3040:
3385:src/xeq.c     **** 		bad_mode_error();
 19404              		.loc 1 3385 6 view .LVU5023
 19405 001a 1268     		ldr	r2, [r2]
 19406              	.LBB3041:
 19407              	.LBB3034:
 19408              	.LBB3032:
 768:src/xeq.c     **** }
 19409              		.loc 1 768 23 view .LVU5024
 19410 001c E375     		strb	r3, [r4, #23]
 19411              	.LBE3032:
 19412              	.LBE3034:
 19413              	.LBE3041:
3385:src/xeq.c     **** 		bad_mode_error();
 19414              		.loc 1 3385 2 is_stmt 1 view .LVU5025
3385:src/xeq.c     **** 		bad_mode_error();
 19415              		.loc 1 3385 6 is_stmt 0 view .LVU5026
 19416 001e 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3385:src/xeq.c     **** 		bad_mode_error();
 19417              		.loc 1 3385 5 view .LVU5027
ARM GAS  /tmp/cccVhVyH.s 			page 524


 19418 0022 DB07     		lsls	r3, r3, #31
 19419 0024 06D5     		bpl	.L1386
3386:src/xeq.c     **** 		return;
 19420              		.loc 1 3386 3 is_stmt 1 view .LVU5028
 19421              	.LBB3042:
 19422              	.LBI3042:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 19423              		.loc 1 575 6 view .LVU5029
 19424              	.LBE3042:
 576:src/xeq.c     **** }
 19425              		.loc 1 576 2 view .LVU5030
 19426              	.LVL1443:
 19427              	.LBB3047:
 19428              	.LBB3043:
 19429              	.LBI3043:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19430              		.loc 1 546 5 view .LVU5031
 19431              	.LBB3044:
 547:src/xeq.c     **** 		Error = e;
 19432              		.loc 1 547 2 view .LVU5032
 547:src/xeq.c     **** 		Error = e;
 19433              		.loc 1 547 12 is_stmt 0 view .LVU5033
 19434 0026 204B     		ldr	r3, .L1401+8
 547:src/xeq.c     **** 		Error = e;
 19435              		.loc 1 547 5 view .LVU5034
 19436 0028 1A68     		ldr	r2, [r3]
 19437 002a 0AB9     		cbnz	r2, .L1384
 19438              	.LVL1444:
 19439              	.LBB3045:
 19440              	.LBI3045:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19441              		.loc 1 546 5 is_stmt 1 view .LVU5035
 19442              	.LBB3046:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 19443              		.loc 1 548 3 view .LVU5036
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 19444              		.loc 1 548 9 is_stmt 0 view .LVU5037
 19445 002c 0D22     		movs	r2, #13
 19446 002e 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 19447              		.loc 1 549 3 is_stmt 1 view .LVU5038
 19448              	.LVL1445:
 19449              	.L1384:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 19450              		.loc 1 549 3 is_stmt 0 view .LVU5039
 19451              	.LBE3046:
 19452              	.LBE3045:
 19453              	.LBE3044:
 19454              	.LBE3043:
 19455              	.LBE3047:
3395:src/xeq.c     **** 
 19456              		.loc 1 3395 1 view .LVU5040
 19457 0030 13B0     		add	sp, sp, #76
 19458              		.cfi_remember_state
 19459              		.cfi_def_cfa_offset 20
 19460              		@ sp needed
 19461 0032 F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /tmp/cccVhVyH.s 			page 525


 19462              	.LVL1446:
 19463              	.L1386:
 19464              		.cfi_restore_state
3389:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
 19465              		.loc 1 3389 2 is_stmt 1 view .LVU5041
 19466              	.LBB3048:
 19467              	.LBI3048:
 854:src/xeq.c     **** 	getX(x);
 19468              		.loc 1 854 6 view .LVU5042
 19469              	.LBE3048:
 855:src/xeq.c     **** 	getY(y);
 19470              		.loc 1 855 2 view .LVU5043
 19471              	.LBB3053:
 19472              	.LBB3049:
 19473              	.LBI3049:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19474              		.loc 1 824 12 view .LVU5044
 19475              	.LBB3050:
 825:src/xeq.c     **** }
 19476              		.loc 1 825 2 view .LVU5045
 825:src/xeq.c     **** }
 19477              		.loc 1 825 9 is_stmt 0 view .LVU5046
 19478 0034 6421     		movs	r1, #100
 19479 0036 6846     		mov	r0, sp
 19480 0038 FFF7FEFF 		bl	getRegister
 19481              	.LVL1447:
 825:src/xeq.c     **** }
 19482              		.loc 1 825 9 view .LVU5047
 19483              	.LBE3050:
 19484              	.LBE3049:
 19485              	.LBE3053:
 856:src/xeq.c     **** }
 19486              		.loc 1 856 2 is_stmt 1 view .LVU5048
 19487              	.LBB3054:
 19488              	.LBB3051:
 19489              	.LBI3051:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 19490              		.loc 1 832 6 view .LVU5049
 19491              	.LBB3052:
 833:src/xeq.c     **** }
 19492              		.loc 1 833 2 view .LVU5050
 19493 003c 09A8     		add	r0, sp, #36
 19494              	.LVL1448:
 833:src/xeq.c     **** }
 19495              		.loc 1 833 2 is_stmt 0 view .LVU5051
 19496 003e 6521     		movs	r1, #101
 19497 0040 FFF7FEFF 		bl	getRegister
 19498              	.LVL1449:
 833:src/xeq.c     **** }
 19499              		.loc 1 833 2 view .LVU5052
 19500              	.LBE3052:
 19501              	.LBE3051:
 19502              	.LBE3054:
3390:src/xeq.c     **** 		fin_tst(0);
 19503              		.loc 1 3390 2 is_stmt 1 view .LVU5053
3390:src/xeq.c     **** 		fin_tst(0);
 19504              		.loc 1 3390 25 is_stmt 0 view .LVU5054
ARM GAS  /tmp/cccVhVyH.s 			page 526


 19505 0044 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 19506 0048 9DF82C20 		ldrb	r2, [sp, #44]	@ zero_extendqisi2
 19507 004c 1343     		orrs	r3, r3, r2
 19508 004e 13F0300F 		tst	r3, #48
 19509 0052 13D1     		bne	.L1388
3390:src/xeq.c     **** 		fin_tst(0);
 19510              		.loc 1 3390 47 discriminator 2 view .LVU5055
 19511 0054 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 19512 0056 13F0300F 		tst	r3, #48
 19513 005a 0FD1     		bne	.L1388
3390:src/xeq.c     **** 		fin_tst(0);
 19514              		.loc 1 3390 69 discriminator 3 view .LVU5056
 19515 005c 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 19516 005e 13F0300F 		tst	r3, #48
 19517 0062 0BD1     		bne	.L1388
3394:src/xeq.c     **** }
 19518              		.loc 1 3394 2 is_stmt 1 view .LVU5057
3394:src/xeq.c     **** }
 19519              		.loc 1 3394 29 is_stmt 0 view .LVU5058
 19520 0064 2946     		mov	r1, r5
 19521 0066 6846     		mov	r0, sp
 19522 0068 FFF7FEFF 		bl	dn_eq
 19523              	.LVL1450:
3394:src/xeq.c     **** }
 19524              		.loc 1 3394 25 view .LVU5059
 19525 006c 003E     		subs	r6, r6, #0
 19526 006e 18BF     		it	ne
 19527 0070 0126     		movne	r6, #1
3394:src/xeq.c     **** }
 19528              		.loc 1 3394 43 view .LVU5060
 19529 0072 58B9     		cbnz	r0, .L1400
 19530              	.L1390:
3394:src/xeq.c     **** }
 19531              		.loc 1 3394 2 discriminator 6 view .LVU5061
 19532 0074 3046     		mov	r0, r6
 19533 0076 FFF7FEFF 		bl	fin_tst
 19534              	.LVL1451:
 19535 007a D9E7     		b	.L1384
 19536              	.L1388:
3391:src/xeq.c     **** 		return;
 19537              		.loc 1 3391 3 is_stmt 1 view .LVU5062
 19538 007c 0020     		movs	r0, #0
 19539 007e FFF7FEFF 		bl	fin_tst
 19540              	.LVL1452:
3392:src/xeq.c     **** 	}
 19541              		.loc 1 3392 3 view .LVU5063
3395:src/xeq.c     **** 
 19542              		.loc 1 3395 1 is_stmt 0 view .LVU5064
 19543 0082 13B0     		add	sp, sp, #76
 19544              		.cfi_remember_state
 19545              		.cfi_def_cfa_offset 20
 19546              		@ sp needed
 19547 0084 F0BD     		pop	{r4, r5, r6, r7, pc}
 19548              	.LVL1453:
 19549              	.L1399:
 19550              		.cfi_restore_state
 19551              	.LBB3055:
ARM GAS  /tmp/cccVhVyH.s 			page 527


 19552              	.LBB3035:
 19553              	.LBB3026:
3395:src/xeq.c     **** 
 19554              		.loc 1 3395 1 view .LVU5065
 19555 0086 FFF7FEFF 		bl	process_cmdline.part.0
 19556              	.LVL1454:
3395:src/xeq.c     **** 
 19557              		.loc 1 3395 1 view .LVU5066
 19558 008a C2E7     		b	.L1385
 19559              	.L1400:
3395:src/xeq.c     **** 
 19560              		.loc 1 3395 1 view .LVU5067
 19561              	.LBE3026:
 19562              	.LBE3035:
 19563              	.LBE3055:
3394:src/xeq.c     **** }
 19564              		.loc 1 3394 46 discriminator 1 view .LVU5068
 19565 008c 3946     		mov	r1, r7
 19566 008e 09A8     		add	r0, sp, #36
 19567 0090 FFF7FEFF 		bl	dn_eq
 19568              	.LVL1455:
 19569 0094 0028     		cmp	r0, #0
 19570 0096 18BF     		it	ne
 19571 0098 86F00106 		eorne	r6, r6, #1
 19572 009c EAE7     		b	.L1390
 19573              	.L1402:
 19574 009e 00BF     		.align	2
 19575              	.L1401:
 19576 00a0 00000000 		.word	StateWhileOn
 19577 00a4 00000000 		.word	main_ram
 19578 00a8 00000000 		.word	Error
 19579              		.cfi_endproc
 19580              	.LFE191:
 19582              		.section	.text.op_query_print,"ax",%progbits
 19583              		.align	1
 19584              		.p2align 2,,3
 19585              		.global	op_query_print
 19586              		.syntax unified
 19587              		.thumb
 19588              		.thumb_func
 19589              		.fpu fpv4-sp-d16
 19591              	op_query_print:
 19592              	.LFB300:
 19593              		.cfi_startproc
 19594              		@ args = 0, pretend = 0, frame = 0
 19595              		@ frame_needed = 0, uses_anonymous_args = 0
 19596              		@ link register save eliminated.
 19597 0000 0120     		movs	r0, #1
 19598 0002 FFF7FEBF 		b	fin_tst
 19599              		.cfi_endproc
 19600              	.LFE300:
 19602 0006 00BF     		.section	.text.check_zero,"ax",%progbits
 19603              		.align	1
 19604              		.p2align 2,,3
 19605              		.global	check_zero
 19606              		.syntax unified
 19607              		.thumb
ARM GAS  /tmp/cccVhVyH.s 			page 528


 19608              		.thumb_func
 19609              		.fpu fpv4-sp-d16
 19611              	check_zero:
 19612              	.LVL1456:
 19613              	.LFB189:
3358:src/xeq.c     **** 	int neg;
 19614              		.loc 1 3358 32 is_stmt 1 view -0
 19615              		.cfi_startproc
 19616              		@ args = 0, pretend = 0, frame = 40
 19617              		@ frame_needed = 0, uses_anonymous_args = 0
3359:src/xeq.c     **** 	int zero;
 19618              		.loc 1 3359 2 view .LVU5070
3360:src/xeq.c     **** 
 19619              		.loc 1 3360 2 view .LVU5071
3362:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19620              		.loc 1 3362 2 view .LVU5072
3362:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19621              		.loc 1 3362 6 is_stmt 0 view .LVU5073
 19622 0000 1A4B     		ldr	r3, .L1419
3358:src/xeq.c     **** 	int neg;
 19623              		.loc 1 3358 32 view .LVU5074
 19624 0002 10B5     		push	{r4, lr}
 19625              		.cfi_def_cfa_offset 8
 19626              		.cfi_offset 4, -8
 19627              		.cfi_offset 14, -4
3362:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19628              		.loc 1 3362 6 view .LVU5075
 19629 0004 1B68     		ldr	r3, [r3]
 19630 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3362:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19631              		.loc 1 3362 5 view .LVU5076
 19632 000a DB07     		lsls	r3, r3, #31
3358:src/xeq.c     **** 	int neg;
 19633              		.loc 1 3358 32 view .LVU5077
 19634 000c 8AB0     		sub	sp, sp, #40
 19635              		.cfi_def_cfa_offset 48
3358:src/xeq.c     **** 	int neg;
 19636              		.loc 1 3358 32 view .LVU5078
 19637 000e 0446     		mov	r4, r0
3362:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19638              		.loc 1 3362 5 view .LVU5079
 19639 0010 15D5     		bpl	.L1405
 19640              	.LBB3056:
3363:src/xeq.c     **** 		zero = (xv == 0);
 19641              		.loc 1 3363 3 is_stmt 1 view .LVU5080
 19642              	.LBB3057:
 19643              	.LBI3057:
1445:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 19644              		.loc 1 1445 15 view .LVU5081
 19645              	.LBB3058:
1446:src/xeq.c     **** }
 19646              		.loc 1 1446 2 view .LVU5082
1446:src/xeq.c     **** }
 19647              		.loc 1 1446 9 is_stmt 0 view .LVU5083
 19648 0012 6420     		movs	r0, #100
 19649              	.LVL1457:
1446:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 529


 19650              		.loc 1 1446 9 view .LVU5084
 19651 0014 FFF7FEFF 		bl	get_reg_n_int
 19652              	.LVL1458:
 19653              	.LBE3058:
 19654              	.LBE3057:
3363:src/xeq.c     **** 		zero = (xv == 0);
 19655              		.loc 1 3363 37 view .LVU5085
 19656 0018 6A46     		mov	r2, sp
 19657 001a FFF7FEFF 		bl	extract_value
 19658              	.LVL1459:
3364:src/xeq.c     **** 	} else {
 19659              		.loc 1 3364 3 is_stmt 1 view .LVU5086
3364:src/xeq.c     **** 	} else {
 19660              		.loc 1 3364 14 is_stmt 0 view .LVU5087
 19661 001e 50EA0103 		orrs	r3, r0, r1
 19662 0022 0CBF     		ite	eq
 19663 0024 0120     		moveq	r0, #1
 19664              	.LVL1460:
3364:src/xeq.c     **** 	} else {
 19665              		.loc 1 3364 14 view .LVU5088
 19666 0026 0020     		movne	r0, #0
 19667              	.LVL1461:
3364:src/xeq.c     **** 	} else {
 19668              		.loc 1 3364 14 view .LVU5089
 19669              	.LBE3056:
3371:src/xeq.c     **** 		fin_tst(zero && !neg);
 19670              		.loc 1 3371 2 is_stmt 1 view .LVU5090
3371:src/xeq.c     **** 		fin_tst(zero && !neg);
 19671              		.loc 1 3371 5 is_stmt 0 view .LVU5091
 19672 0028 A12C     		cmp	r4, #161
 19673 002a 15D0     		beq	.L1418
 19674              	.L1407:
3374:src/xeq.c     **** }
 19675              		.loc 1 3374 3 is_stmt 1 view .LVU5092
 19676 002c 18B1     		cbz	r0, .L1410
3374:src/xeq.c     **** }
 19677              		.loc 1 3374 3 is_stmt 0 discriminator 1 view .LVU5093
 19678 002e 0098     		ldr	r0, [sp]
 19679              	.LVL1462:
3374:src/xeq.c     **** }
 19680              		.loc 1 3374 3 discriminator 1 view .LVU5094
 19681 0030 0038     		subs	r0, r0, #0
 19682 0032 18BF     		it	ne
 19683 0034 0120     		movne	r0, #1
 19684              	.L1410:
3374:src/xeq.c     **** }
 19685              		.loc 1 3374 3 discriminator 6 view .LVU5095
 19686 0036 FFF7FEFF 		bl	fin_tst
 19687              	.LVL1463:
3375:src/xeq.c     **** 
 19688              		.loc 1 3375 1 discriminator 6 view .LVU5096
 19689 003a 0AB0     		add	sp, sp, #40
 19690              		.cfi_remember_state
 19691              		.cfi_def_cfa_offset 8
 19692              		@ sp needed
 19693 003c 10BD     		pop	{r4, pc}
 19694              	.LVL1464:
ARM GAS  /tmp/cccVhVyH.s 			page 530


 19695              	.L1405:
 19696              		.cfi_restore_state
 19697              	.LBB3059:
3366:src/xeq.c     **** 		getX(&x);
 19698              		.loc 1 3366 3 is_stmt 1 view .LVU5097
3367:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
 19699              		.loc 1 3367 3 view .LVU5098
 19700              	.LBB3060:
 19701              	.LBI3060:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19702              		.loc 1 824 12 view .LVU5099
 19703              	.LBB3061:
 825:src/xeq.c     **** }
 19704              		.loc 1 825 2 view .LVU5100
 825:src/xeq.c     **** }
 19705              		.loc 1 825 9 is_stmt 0 view .LVU5101
 19706 003e 6421     		movs	r1, #100
 19707 0040 01A8     		add	r0, sp, #4
 19708              	.LVL1465:
 825:src/xeq.c     **** }
 19709              		.loc 1 825 9 view .LVU5102
 19710 0042 FFF7FEFF 		bl	getRegister
 19711              	.LVL1466:
 825:src/xeq.c     **** }
 19712              		.loc 1 825 9 view .LVU5103
 19713              	.LBE3061:
 19714              	.LBE3060:
3368:src/xeq.c     **** 		zero = dn_eq0(&x);
 19715              		.loc 1 3368 3 is_stmt 1 view .LVU5104
3368:src/xeq.c     **** 		zero = dn_eq0(&x);
 19716              		.loc 1 3368 9 is_stmt 0 view .LVU5105
 19717 0046 9DF90C30 		ldrsb	r3, [sp, #12]
3369:src/xeq.c     **** 	}
 19718              		.loc 1 3369 10 view .LVU5106
 19719 004a 01A8     		add	r0, sp, #4
3368:src/xeq.c     **** 		zero = dn_eq0(&x);
 19720              		.loc 1 3368 9 view .LVU5107
 19721 004c DB0F     		lsrs	r3, r3, #31
3368:src/xeq.c     **** 		zero = dn_eq0(&x);
 19722              		.loc 1 3368 7 view .LVU5108
 19723 004e 0093     		str	r3, [sp]
3369:src/xeq.c     **** 	}
 19724              		.loc 1 3369 3 is_stmt 1 view .LVU5109
3369:src/xeq.c     **** 	}
 19725              		.loc 1 3369 10 is_stmt 0 view .LVU5110
 19726 0050 FFF7FEFF 		bl	dn_eq0
 19727              	.LVL1467:
3369:src/xeq.c     **** 	}
 19728              		.loc 1 3369 10 view .LVU5111
 19729              	.LBE3059:
3371:src/xeq.c     **** 		fin_tst(zero && !neg);
 19730              		.loc 1 3371 2 is_stmt 1 view .LVU5112
3371:src/xeq.c     **** 		fin_tst(zero && !neg);
 19731              		.loc 1 3371 5 is_stmt 0 view .LVU5113
 19732 0054 A12C     		cmp	r4, #161
 19733 0056 E9D1     		bne	.L1407
 19734              	.L1418:
ARM GAS  /tmp/cccVhVyH.s 			page 531


3372:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19735              		.loc 1 3372 3 is_stmt 1 view .LVU5114
 19736 0058 0028     		cmp	r0, #0
 19737 005a ECD0     		beq	.L1410
3372:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19738              		.loc 1 3372 3 is_stmt 0 discriminator 1 view .LVU5115
 19739 005c 0098     		ldr	r0, [sp]
 19740              	.LVL1468:
3372:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19741              		.loc 1 3372 3 discriminator 1 view .LVU5116
 19742 005e B0FA80F0 		clz	r0, r0
 19743 0062 4009     		lsrs	r0, r0, #5
3374:src/xeq.c     **** }
 19744              		.loc 1 3374 3 discriminator 1 view .LVU5117
 19745 0064 FFF7FEFF 		bl	fin_tst
 19746              	.LVL1469:
3375:src/xeq.c     **** 
 19747              		.loc 1 3375 1 discriminator 1 view .LVU5118
 19748 0068 0AB0     		add	sp, sp, #40
 19749              		.cfi_def_cfa_offset 8
 19750              		@ sp needed
 19751 006a 10BD     		pop	{r4, pc}
 19752              	.L1420:
 19753              		.align	2
 19754              	.L1419:
 19755 006c 00000000 		.word	main_ram
 19756              		.cfi_endproc
 19757              	.LFE189:
 19759              		.section	.text.cmdtest,"ax",%progbits
 19760              		.align	1
 19761              		.p2align 2,,3
 19762              		.global	cmdtest
 19763              		.syntax unified
 19764              		.thumb
 19765              		.thumb_func
 19766              		.fpu fpv4-sp-d16
 19768              	cmdtest:
 19769              	.LVL1470:
 19770              	.LFB190:
3377:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
 19771              		.loc 1 3377 46 is_stmt 1 view -0
 19772              		.cfi_startproc
 19773              		@ args = 0, pretend = 0, frame = 0
 19774              		@ frame_needed = 0, uses_anonymous_args = 0
 19775              		@ link register save eliminated.
3378:src/xeq.c     **** }
 19776              		.loc 1 3378 2 view .LVU5120
3378:src/xeq.c     **** }
 19777              		.loc 1 3378 31 is_stmt 0 view .LVU5121
 19778 0000 2D39     		subs	r1, r1, #45
 19779              	.LVL1471:
3378:src/xeq.c     **** }
 19780              		.loc 1 3378 2 view .LVU5122
 19781 0002 C9B2     		uxtb	r1, r1
 19782 0004 FFF7FEBF 		b	do_tst
 19783              	.LVL1472:
3378:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 532


 19784              		.loc 1 3378 2 view .LVU5123
 19785              		.cfi_endproc
 19786              	.LFE190:
 19788              		.section	.text.cmdztest,"ax",%progbits
 19789              		.align	1
 19790              		.p2align 2,,3
 19791              		.global	cmdztest
 19792              		.syntax unified
 19793              		.thumb
 19794              		.thumb_func
 19795              		.fpu fpv4-sp-d16
 19797              	cmdztest:
 19798              	.LVL1473:
 19799              	.LFB192:
3397:src/xeq.c     **** 	decNumber re, im;
 19800              		.loc 1 3397 47 is_stmt 1 view -0
 19801              		.cfi_startproc
 19802              		@ args = 0, pretend = 0, frame = 72
 19803              		@ frame_needed = 0, uses_anonymous_args = 0
3398:src/xeq.c     **** 	getRegister(&re, arg);
 19804              		.loc 1 3398 2 view .LVU5125
3399:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19805              		.loc 1 3399 2 view .LVU5126
3397:src/xeq.c     **** 	decNumber re, im;
 19806              		.loc 1 3397 47 is_stmt 0 view .LVU5127
 19807 0000 30B5     		push	{r4, r5, lr}
 19808              		.cfi_def_cfa_offset 12
 19809              		.cfi_offset 4, -12
 19810              		.cfi_offset 5, -8
 19811              		.cfi_offset 14, -4
 19812 0002 0546     		mov	r5, r0
 19813 0004 93B0     		sub	sp, sp, #76
 19814              		.cfi_def_cfa_offset 88
3397:src/xeq.c     **** 	decNumber re, im;
 19815              		.loc 1 3397 47 view .LVU5128
 19816 0006 0C46     		mov	r4, r1
3399:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19817              		.loc 1 3399 2 view .LVU5129
 19818 0008 6846     		mov	r0, sp
 19819              	.LVL1474:
3399:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19820              		.loc 1 3399 2 view .LVU5130
 19821 000a 2946     		mov	r1, r5
 19822              	.LVL1475:
3399:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19823              		.loc 1 3399 2 view .LVU5131
 19824 000c FFF7FEFF 		bl	getRegister
 19825              	.LVL1476:
3400:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
 19826              		.loc 1 3400 2 is_stmt 1 view .LVU5132
 19827 0010 691C     		adds	r1, r5, #1
 19828 0012 09A8     		add	r0, sp, #36
 19829 0014 FFF7FEFF 		bl	getRegister
 19830              	.LVL1477:
3401:src/xeq.c     **** }
 19831              		.loc 1 3401 2 view .LVU5133
3401:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 533


 19832              		.loc 1 3401 37 is_stmt 0 view .LVU5134
 19833 0018 A4F13402 		sub	r2, r4, #52
3401:src/xeq.c     **** }
 19834              		.loc 1 3401 2 view .LVU5135
 19835 001c D2B2     		uxtb	r2, r2
 19836 001e 09A9     		add	r1, sp, #36
 19837 0020 6846     		mov	r0, sp
 19838 0022 FFF7FEFF 		bl	do_ztst
 19839              	.LVL1478:
3402:src/xeq.c     **** 
 19840              		.loc 1 3402 1 view .LVU5136
 19841 0026 13B0     		add	sp, sp, #76
 19842              		.cfi_def_cfa_offset 12
 19843              		@ sp needed
 19844 0028 30BD     		pop	{r4, r5, pc}
3402:src/xeq.c     **** 
 19845              		.loc 1 3402 1 view .LVU5137
 19846              		.cfi_endproc
 19847              	.LFE192:
 19849 002a 00BF     		.section	.text.cmdlincdec,"ax",%progbits
 19850              		.align	1
 19851              		.p2align 2,,3
 19852              		.global	cmdlincdec
 19853              		.syntax unified
 19854              		.thumb
 19855              		.thumb_func
 19856              		.fpu fpv4-sp-d16
 19858              	cmdlincdec:
 19859              	.LVL1479:
 19860              	.LFB194:
3432:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
 19861              		.loc 1 3432 49 is_stmt 1 view -0
 19862              		.cfi_startproc
 19863              		@ args = 0, pretend = 0, frame = 0
 19864              		@ frame_needed = 0, uses_anonymous_args = 0
 19865              		@ link register save eliminated.
3433:src/xeq.c     **** }
 19866              		.loc 1 3433 2 view .LVU5139
 19867 0000 A1F14101 		sub	r1, #65
 19868              	.LVL1480:
3433:src/xeq.c     **** }
 19869              		.loc 1 3433 2 is_stmt 0 view .LVU5140
 19870 0004 B1FA81F1 		clz	r1, r1
 19871 0008 4909     		lsrs	r1, r1, #5
 19872 000a FFF7FEBF 		b	incdec
 19873              	.LVL1481:
3433:src/xeq.c     **** }
 19874              		.loc 1 3433 2 view .LVU5141
 19875              		.cfi_endproc
 19876              	.LFE194:
 19878 000e 00BF     		.section	.text.cmdloopz,"ax",%progbits
 19879              		.align	1
 19880              		.p2align 2,,3
 19881              		.global	cmdloopz
 19882              		.syntax unified
 19883              		.thumb
 19884              		.thumb_func
ARM GAS  /tmp/cccVhVyH.s 			page 534


 19885              		.fpu fpv4-sp-d16
 19887              	cmdloopz:
 19888              	.LVL1482:
 19889              	.LFB195:
3436:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 19890              		.loc 1 3436 47 is_stmt 1 view -0
 19891              		.cfi_startproc
 19892              		@ args = 0, pretend = 0, frame = 0
 19893              		@ frame_needed = 0, uses_anonymous_args = 0
3437:src/xeq.c     **** }
 19894              		.loc 1 3437 2 view .LVU5143
3436:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 19895              		.loc 1 3436 47 is_stmt 0 view .LVU5144
 19896 0000 08B5     		push	{r3, lr}
 19897              		.cfi_def_cfa_offset 8
 19898              		.cfi_offset 3, -8
 19899              		.cfi_offset 14, -4
3437:src/xeq.c     **** }
 19900              		.loc 1 3437 2 view .LVU5145
 19901 0002 A1F13F01 		sub	r1, #63
 19902              	.LVL1483:
3437:src/xeq.c     **** }
 19903              		.loc 1 3437 2 view .LVU5146
 19904 0006 B1FA81F1 		clz	r1, r1
 19905 000a 4909     		lsrs	r1, r1, #5
 19906 000c FFF7FEFF 		bl	incdec
 19907              	.LVL1484:
3438:src/xeq.c     **** 
 19908              		.loc 1 3438 1 view .LVU5147
 19909 0010 BDE80840 		pop	{r3, lr}
 19910              		.cfi_restore 14
 19911              		.cfi_restore 3
 19912              		.cfi_def_cfa_offset 0
3437:src/xeq.c     **** }
 19913              		.loc 1 3437 2 view .LVU5148
 19914 0014 FFF7FEBF 		b	fin_tst
 19915              	.LVL1485:
 19916              		.cfi_endproc
 19917              	.LFE195:
 19919              		.section	.text.cmdloop,"ax",%progbits
 19920              		.align	1
 19921              		.p2align 2,,3
 19922              		.global	cmdloop
 19923              		.syntax unified
 19924              		.thumb
 19925              		.thumb_func
 19926              		.fpu fpv4-sp-d16
 19928              	cmdloop:
 19929              	.LVL1486:
 19930              	.LFB196:
3440:src/xeq.c     **** 	if (is_intmode()) {
 19931              		.loc 1 3440 46 is_stmt 1 view -0
 19932              		.cfi_startproc
 19933              		@ args = 0, pretend = 0, frame = 184
 19934              		@ frame_needed = 0, uses_anonymous_args = 0
3441:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19935              		.loc 1 3441 2 view .LVU5150
ARM GAS  /tmp/cccVhVyH.s 			page 535


3441:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19936              		.loc 1 3441 6 is_stmt 0 view .LVU5151
 19937 0000 7C4B     		ldr	r3, .L1467
3440:src/xeq.c     **** 	if (is_intmode()) {
 19938              		.loc 1 3440 46 view .LVU5152
 19939 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 19940              		.cfi_def_cfa_offset 20
 19941              		.cfi_offset 4, -20
 19942              		.cfi_offset 5, -16
 19943              		.cfi_offset 6, -12
 19944              		.cfi_offset 7, -8
 19945              		.cfi_offset 14, -4
3441:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19946              		.loc 1 3441 6 view .LVU5153
 19947 0004 1B68     		ldr	r3, [r3]
 19948 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3441:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19949              		.loc 1 3441 5 view .LVU5154
 19950 000a DB07     		lsls	r3, r3, #31
3440:src/xeq.c     **** 	if (is_intmode()) {
 19951              		.loc 1 3440 46 view .LVU5155
 19952 000c AFB0     		sub	sp, sp, #188
 19953              		.cfi_def_cfa_offset 208
3440:src/xeq.c     **** 	if (is_intmode()) {
 19954              		.loc 1 3440 46 view .LVU5156
 19955 000e 0C46     		mov	r4, r1
 19956 0010 0546     		mov	r5, r0
3441:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19957              		.loc 1 3441 5 view .LVU5157
 19958 0012 7BD4     		bmi	.L1459
 19959              	.LBB3062:
3463:src/xeq.c     **** 
 19960              		.loc 1 3463 3 is_stmt 1 view .LVU5158
3465:src/xeq.c     **** 
 19961              		.loc 1 3465 3 view .LVU5159
 19962 0014 2946     		mov	r1, r5
 19963              	.LVL1487:
3465:src/xeq.c     **** 
 19964              		.loc 1 3465 3 is_stmt 0 view .LVU5160
 19965 0016 6846     		mov	r0, sp
 19966              	.LVL1488:
3465:src/xeq.c     **** 
 19967              		.loc 1 3465 3 view .LVU5161
 19968 0018 FFF7FEFF 		bl	getRegister
 19969              	.LVL1489:
3469:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
 19970              		.loc 1 3469 3 is_stmt 1 view .LVU5162
 19971 001c 6946     		mov	r1, sp
 19972 001e 12A8     		add	r0, sp, #72
 19973 0020 FFF7FEFF 		bl	dn_abs
 19974              	.LVL1490:
3470:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
 19975              		.loc 1 3470 3 view .LVU5163
 19976 0024 12A9     		add	r1, sp, #72
 19977 0026 1BA8     		add	r0, sp, #108
 19978 0028 FFF7FEFF 		bl	decNumberTrunc
 19979              	.LVL1491:
ARM GAS  /tmp/cccVhVyH.s 			page 536


3471:src/xeq.c     **** 		if (decNumberIsNegative(&x))
 19980              		.loc 1 3471 3 view .LVU5164
 19981 002c 1BAA     		add	r2, sp, #108
 19982 002e 12A9     		add	r1, sp, #72
 19983 0030 24A8     		add	r0, sp, #144
 19984 0032 FFF7FEFF 		bl	dn_subtract
 19985              	.LVL1492:
3472:src/xeq.c     **** 			dn_minus(&n, &n);
 19986              		.loc 1 3472 3 view .LVU5165
3472:src/xeq.c     **** 			dn_minus(&n, &n);
 19987              		.loc 1 3472 6 is_stmt 0 view .LVU5166
 19988 0036 9DF90830 		ldrsb	r3, [sp, #8]
 19989 003a 002B     		cmp	r3, #0
 19990 003c C0F29080 		blt	.L1460
 19991              	.L1437:
3474:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
 19992              		.loc 1 3474 3 is_stmt 1 view .LVU5167
 19993 0040 0322     		movs	r2, #3
 19994 0042 24A9     		add	r1, sp, #144
 19995 0044 09A8     		add	r0, sp, #36
 19996 0046 FFF7FEFF 		bl	dn_mulpow10
 19997              	.LVL1493:
3475:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
 19998              		.loc 1 3475 3 view .LVU5168
 19999 004a 09A9     		add	r1, sp, #36
 20000 004c 12A8     		add	r0, sp, #72
 20001 004e FFF7FEFF 		bl	decNumberTrunc
 20002              	.LVL1494:
3476:src/xeq.c     **** 		dn_mul100(&x, &i);
 20003              		.loc 1 3476 3 view .LVU5169
 20004 0052 09A9     		add	r1, sp, #36
 20005 0054 12AA     		add	r2, sp, #72
 20006 0056 0846     		mov	r0, r1
 20007 0058 FFF7FEFF 		bl	dn_subtract
 20008              	.LVL1495:
3477:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
 20009              		.loc 1 3477 3 view .LVU5170
 20010 005c 09A9     		add	r1, sp, #36
 20011 005e 6846     		mov	r0, sp
 20012 0060 FFF7FEFF 		bl	dn_mul100
 20013              	.LVL1496:
3478:src/xeq.c     **** 		if (dn_eq0(&i))
 20014              		.loc 1 3478 3 view .LVU5171
 20015 0064 6946     		mov	r1, sp
 20016 0066 09A8     		add	r0, sp, #36
 20017 0068 FFF7FEFF 		bl	decNumberTrunc
 20018              	.LVL1497:
3479:src/xeq.c     **** 			dn_1(&i);
 20019              		.loc 1 3479 3 view .LVU5172
3479:src/xeq.c     **** 			dn_1(&i);
 20020              		.loc 1 3479 7 is_stmt 0 view .LVU5173
 20021 006c 09A8     		add	r0, sp, #36
 20022 006e FFF7FEFF 		bl	dn_eq0
 20023              	.LVL1498:
3479:src/xeq.c     **** 			dn_1(&i);
 20024              		.loc 1 3479 6 view .LVU5174
 20025 0072 98BB     		cbnz	r0, .L1461
ARM GAS  /tmp/cccVhVyH.s 			page 537


3482:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20026              		.loc 1 3482 3 is_stmt 1 view .LVU5175
3483:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20027              		.loc 1 3483 4 is_stmt 0 view .LVU5176
 20028 0074 1BA9     		add	r1, sp, #108
3482:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20029              		.loc 1 3482 6 view .LVU5177
 20030 0076 3B2C     		cmp	r4, #59
3483:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20031              		.loc 1 3483 4 view .LVU5178
 20032 0078 09AA     		add	r2, sp, #36
 20033 007a 0846     		mov	r0, r1
3482:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20034              		.loc 1 3482 6 view .LVU5179
 20035 007c 36D0     		beq	.L1439
 20036              	.L1464:
3482:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20037              		.loc 1 3482 22 discriminator 1 view .LVU5180
 20038 007e 3D2C     		cmp	r4, #61
 20039 0080 1DD1     		bne	.L1440
3483:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20040              		.loc 1 3483 4 is_stmt 1 view .LVU5181
 20041 0082 FFF7FEFF 		bl	dn_add
 20042              	.LVL1499:
3484:src/xeq.c     **** 			if (op == RARG_ISE)
 20043              		.loc 1 3484 4 view .LVU5182
 20044 0086 1BAA     		add	r2, sp, #108
 20045 0088 12A9     		add	r1, sp, #72
 20046 008a 6846     		mov	r0, sp
 20047 008c FFF7FEFF 		bl	dn_compare
 20048              	.LVL1500:
3485:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 20049              		.loc 1 3485 4 view .LVU5183
3486:src/xeq.c     **** 			else
 20050              		.loc 1 3486 5 view .LVU5184
3486:src/xeq.c     **** 			else
 20051              		.loc 1 3486 13 is_stmt 0 view .LVU5185
 20052 0090 6846     		mov	r0, sp
 20053 0092 FFF7FEFF 		bl	dn_le0
 20054              	.LVL1501:
3486:src/xeq.c     **** 			else
 20055              		.loc 1 3486 5 view .LVU5186
 20056 0096 B0FA80F0 		clz	r0, r0
 20057 009a 4009     		lsrs	r0, r0, #5
 20058 009c FFF7FEFF 		bl	fin_tst
 20059              	.LVL1502:
 20060              	.L1441:
3499:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 20061              		.loc 1 3499 3 is_stmt 1 view .LVU5187
3499:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 20062              		.loc 1 3499 6 is_stmt 0 view .LVU5188
 20063 00a0 9DF97430 		ldrsb	r3, [sp, #116]
 20064 00a4 002B     		cmp	r3, #0
3500:src/xeq.c     **** 		} else
 20065              		.loc 1 3500 4 view .LVU5189
 20066 00a6 24AA     		add	r2, sp, #144
 20067 00a8 1BA9     		add	r1, sp, #108
ARM GAS  /tmp/cccVhVyH.s 			page 538


 20068 00aa 6846     		mov	r0, sp
3499:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 20069              		.loc 1 3499 6 view .LVU5190
 20070 00ac 55DB     		blt	.L1462
3502:src/xeq.c     **** 		setRegister(arg, &x);
 20071              		.loc 1 3502 4 is_stmt 1 view .LVU5191
 20072 00ae FFF7FEFF 		bl	dn_add
 20073              	.LVL1503:
 20074              	.L1444:
3503:src/xeq.c     **** 	}
 20075              		.loc 1 3503 3 discriminator 2 view .LVU5192
 20076 00b2 6946     		mov	r1, sp
 20077 00b4 2846     		mov	r0, r5
 20078 00b6 FFF7FEFF 		bl	setRegister
 20079              	.LVL1504:
 20080              	.L1427:
3503:src/xeq.c     **** 	}
 20081              		.loc 1 3503 3 is_stmt 0 discriminator 2 view .LVU5193
 20082              	.LBE3062:
3505:src/xeq.c     **** 
 20083              		.loc 1 3505 1 view .LVU5194
 20084 00ba 2FB0     		add	sp, sp, #188
 20085              		.cfi_remember_state
 20086              		.cfi_def_cfa_offset 20
 20087              		@ sp needed
 20088 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 20089              	.LVL1505:
 20090              	.L1440:
 20091              		.cfi_restore_state
 20092              	.LBB3063:
3490:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20093              		.loc 1 3490 4 is_stmt 1 view .LVU5195
 20094 00be FFF7FEFF 		bl	dn_subtract
 20095              	.LVL1506:
3491:src/xeq.c     **** 			if (op == RARG_DSL)
 20096              		.loc 1 3491 4 view .LVU5196
 20097 00c2 1BAA     		add	r2, sp, #108
 20098 00c4 12A9     		add	r1, sp, #72
 20099 00c6 6846     		mov	r0, sp
 20100 00c8 FFF7FEFF 		bl	dn_compare
 20101              	.LVL1507:
3492:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20102              		.loc 1 3492 4 view .LVU5197
3492:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20103              		.loc 1 3492 7 is_stmt 0 view .LVU5198
 20104 00cc 3C2C     		cmp	r4, #60
3493:src/xeq.c     **** 			else
 20105              		.loc 1 3493 5 view .LVU5199
 20106 00ce 6846     		mov	r0, sp
3492:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20107              		.loc 1 3492 7 view .LVU5200
 20108 00d0 6AD0     		beq	.L1463
3495:src/xeq.c     **** 		}
 20109              		.loc 1 3495 5 is_stmt 1 view .LVU5201
 20110 00d2 FFF7FEFF 		bl	dn_lt0
 20111              	.LVL1508:
 20112 00d6 FFF7FEFF 		bl	fin_tst
ARM GAS  /tmp/cccVhVyH.s 			page 539


 20113              	.LVL1509:
 20114 00da E1E7     		b	.L1441
 20115              	.L1461:
3480:src/xeq.c     **** 
 20116              		.loc 1 3480 4 view .LVU5202
 20117 00dc 09A8     		add	r0, sp, #36
 20118 00de FFF7FEFF 		bl	dn_1
 20119              	.LVL1510:
3482:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20120              		.loc 1 3482 3 view .LVU5203
3483:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20121              		.loc 1 3483 4 is_stmt 0 view .LVU5204
 20122 00e2 1BA9     		add	r1, sp, #108
3482:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20123              		.loc 1 3482 6 view .LVU5205
 20124 00e4 3B2C     		cmp	r4, #59
3483:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20125              		.loc 1 3483 4 view .LVU5206
 20126 00e6 09AA     		add	r2, sp, #36
 20127 00e8 0846     		mov	r0, r1
3482:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20128              		.loc 1 3482 6 view .LVU5207
 20129 00ea C8D1     		bne	.L1464
 20130              	.L1439:
3483:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20131              		.loc 1 3483 4 is_stmt 1 view .LVU5208
 20132 00ec FFF7FEFF 		bl	dn_add
 20133              	.LVL1511:
3484:src/xeq.c     **** 			if (op == RARG_ISE)
 20134              		.loc 1 3484 4 view .LVU5209
 20135 00f0 1BAA     		add	r2, sp, #108
 20136 00f2 12A9     		add	r1, sp, #72
 20137 00f4 6846     		mov	r0, sp
 20138 00f6 FFF7FEFF 		bl	dn_compare
 20139              	.LVL1512:
3485:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 20140              		.loc 1 3485 4 view .LVU5210
3488:src/xeq.c     **** 		} else {
 20141              		.loc 1 3488 5 view .LVU5211
3488:src/xeq.c     **** 		} else {
 20142              		.loc 1 3488 13 is_stmt 0 view .LVU5212
 20143 00fa 6846     		mov	r0, sp
 20144 00fc FFF7FEFF 		bl	dn_lt0
 20145              	.LVL1513:
3488:src/xeq.c     **** 		} else {
 20146              		.loc 1 3488 5 view .LVU5213
 20147 0100 B0FA80F0 		clz	r0, r0
 20148 0104 4009     		lsrs	r0, r0, #5
 20149 0106 FFF7FEFF 		bl	fin_tst
 20150              	.LVL1514:
 20151 010a C9E7     		b	.L1441
 20152              	.LVL1515:
 20153              	.L1459:
3488:src/xeq.c     **** 		} else {
 20154              		.loc 1 3488 5 view .LVU5214
 20155              	.LBE3063:
 20156              	.LBB3064:
ARM GAS  /tmp/cccVhVyH.s 			page 540


3442:src/xeq.c     **** 		int xs;
 20157              		.loc 1 3442 3 is_stmt 1 view .LVU5215
3442:src/xeq.c     **** 		int xs;
 20158              		.loc 1 3442 21 is_stmt 0 view .LVU5216
 20159 010c FFF7FEFF 		bl	get_reg_n_int
 20160              	.LVL1516:
3443:src/xeq.c     **** 		unsigned long long int xv;
 20161              		.loc 1 3443 3 is_stmt 1 view .LVU5217
3444:src/xeq.c     **** 
 20162              		.loc 1 3444 3 view .LVU5218
3446:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20163              		.loc 1 3446 3 view .LVU5219
3446:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20164              		.loc 1 3446 6 is_stmt 0 view .LVU5220
 20165 0110 3B2C     		cmp	r4, #59
3447:src/xeq.c     **** 		else
 20166              		.loc 1 3447 8 view .LVU5221
 20167 0112 4FF00102 		mov	r2, #1
 20168 0116 4FF00003 		mov	r3, #0
3446:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20169              		.loc 1 3446 6 view .LVU5222
 20170 011a 4AD0     		beq	.L1429
3446:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20171              		.loc 1 3446 22 discriminator 1 view .LVU5223
 20172 011c 3D2C     		cmp	r4, #61
 20173 011e 24D1     		bne	.L1465
3447:src/xeq.c     **** 		else
 20174              		.loc 1 3447 4 is_stmt 1 view .LVU5224
3447:src/xeq.c     **** 		else
 20175              		.loc 1 3447 8 is_stmt 0 view .LVU5225
 20176 0120 FFF7FEFF 		bl	intAdd
 20177              	.LVL1517:
3447:src/xeq.c     **** 		else
 20178              		.loc 1 3447 8 view .LVU5226
 20179 0124 0646     		mov	r6, r0
 20180              	.LBB3065:
 20181              	.LBB3066:
1426:src/xeq.c     **** }
 20182              		.loc 1 1426 8 view .LVU5227
 20183 0126 2846     		mov	r0, r5
 20184              	.LBE3066:
 20185              	.LBE3065:
3447:src/xeq.c     **** 		else
 20186              		.loc 1 3447 8 view .LVU5228
 20187 0128 0C46     		mov	r4, r1
 20188              	.LVL1518:
3450:src/xeq.c     **** 
 20189              		.loc 1 3450 3 is_stmt 1 view .LVU5229
3450:src/xeq.c     **** 
 20190              		.loc 1 3450 3 is_stmt 0 view .LVU5230
 20191 012a CDE92461 		strd	r6, r1, [sp, #144]
 20192              	.LVL1519:
 20193              	.LBB3072:
 20194              	.LBI3065:
1425:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20195              		.loc 1 1425 6 is_stmt 1 view .LVU5231
 20196              	.LBB3067:
ARM GAS  /tmp/cccVhVyH.s 			page 541


1426:src/xeq.c     **** }
 20197              		.loc 1 1426 2 view .LVU5232
1426:src/xeq.c     **** }
 20198              		.loc 1 1426 8 is_stmt 0 view .LVU5233
 20199 012e FFF7FEFF 		bl	get_reg_n
 20200              	.LVL1520:
1426:src/xeq.c     **** }
 20201              		.loc 1 1426 2 view .LVU5234
 20202 0132 24A9     		add	r1, sp, #144
 20203 0134 0822     		movs	r2, #8
 20204 0136 FFF7FEFF 		bl	xcopy
 20205              	.LVL1521:
1426:src/xeq.c     **** }
 20206              		.loc 1 1426 2 view .LVU5235
 20207              	.LBE3067:
 20208              	.LBE3072:
3452:src/xeq.c     **** 		if (op == RARG_ISG)
 20209              		.loc 1 3452 3 is_stmt 1 view .LVU5236
3452:src/xeq.c     **** 		if (op == RARG_ISG)
 20210              		.loc 1 3452 8 is_stmt 0 view .LVU5237
 20211 013a 24AA     		add	r2, sp, #144
 20212 013c 3046     		mov	r0, r6
 20213 013e 2146     		mov	r1, r4
 20214 0140 FFF7FEFF 		bl	extract_value
 20215              	.LVL1522:
3458:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20216              		.loc 1 3458 18 view .LVU5238
 20217 0144 249B     		ldr	r3, [sp, #144]
 20218              	.LVL1523:
3453:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20219              		.loc 1 3453 3 is_stmt 1 view .LVU5239
3455:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20220              		.loc 1 3455 8 view .LVU5240
3457:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
 20221              		.loc 1 3457 8 view .LVU5241
3458:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20222              		.loc 1 3458 4 view .LVU5242
 20223 0146 23B1     		cbz	r3, .L1448
3458:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20224              		.loc 1 3458 4 is_stmt 0 discriminator 1 view .LVU5243
 20225 0148 50EA0103 		orrs	r3, r0, r1
 20226 014c 14BF     		ite	ne
 20227 014e 0123     		movne	r3, #1
 20228 0150 0023     		moveq	r3, #0
 20229              	.L1448:
3458:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20230              		.loc 1 3458 4 discriminator 6 view .LVU5244
 20231 0152 1846     		mov	r0, r3
 20232              	.LVL1524:
3458:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20233              		.loc 1 3458 4 discriminator 6 view .LVU5245
 20234 0154 FFF7FEFF 		bl	fin_tst
 20235              	.LVL1525:
 20236 0158 AFE7     		b	.L1427
 20237              	.L1462:
3458:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20238              		.loc 1 3458 4 discriminator 6 view .LVU5246
ARM GAS  /tmp/cccVhVyH.s 			page 542


 20239              	.LBE3064:
 20240              	.LBB3077:
3500:src/xeq.c     **** 		} else
 20241              		.loc 1 3500 4 is_stmt 1 view .LVU5247
 20242 015a FFF7FEFF 		bl	dn_subtract
 20243              	.LVL1526:
 20244 015e A8E7     		b	.L1444
 20245              	.L1460:
3473:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 20246              		.loc 1 3473 4 view .LVU5248
 20247 0160 1BA9     		add	r1, sp, #108
 20248 0162 0846     		mov	r0, r1
 20249 0164 FFF7FEFF 		bl	dn_minus
 20250              	.LVL1527:
 20251 0168 6AE7     		b	.L1437
 20252              	.LVL1528:
 20253              	.L1465:
3473:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 20254              		.loc 1 3473 4 is_stmt 0 view .LVU5249
 20255              	.LBE3077:
 20256              	.LBB3078:
3449:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20257              		.loc 1 3449 4 is_stmt 1 view .LVU5250
3449:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20258              		.loc 1 3449 8 is_stmt 0 view .LVU5251
 20259 016a FFF7FEFF 		bl	intSubtract
 20260              	.LVL1529:
3449:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20261              		.loc 1 3449 8 view .LVU5252
 20262 016e 0746     		mov	r7, r0
 20263              	.LBB3073:
 20264              	.LBB3068:
1426:src/xeq.c     **** }
 20265              		.loc 1 1426 8 view .LVU5253
 20266 0170 2846     		mov	r0, r5
 20267              	.LBE3068:
 20268              	.LBE3073:
3449:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20269              		.loc 1 3449 8 view .LVU5254
 20270 0172 0E46     		mov	r6, r1
 20271              	.LVL1530:
3450:src/xeq.c     **** 
 20272              		.loc 1 3450 3 is_stmt 1 view .LVU5255
3450:src/xeq.c     **** 
 20273              		.loc 1 3450 3 is_stmt 0 view .LVU5256
 20274 0174 CDE92471 		strd	r7, r1, [sp, #144]
 20275              	.LVL1531:
 20276              	.LBB3074:
1425:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20277              		.loc 1 1425 6 is_stmt 1 view .LVU5257
 20278              	.LBB3069:
1426:src/xeq.c     **** }
 20279              		.loc 1 1426 2 view .LVU5258
1426:src/xeq.c     **** }
 20280              		.loc 1 1426 8 is_stmt 0 view .LVU5259
 20281 0178 FFF7FEFF 		bl	get_reg_n
 20282              	.LVL1532:
ARM GAS  /tmp/cccVhVyH.s 			page 543


1426:src/xeq.c     **** }
 20283              		.loc 1 1426 2 view .LVU5260
 20284 017c 24A9     		add	r1, sp, #144
 20285 017e 0822     		movs	r2, #8
 20286 0180 FFF7FEFF 		bl	xcopy
 20287              	.LVL1533:
1426:src/xeq.c     **** }
 20288              		.loc 1 1426 2 view .LVU5261
 20289              	.LBE3069:
 20290              	.LBE3074:
3452:src/xeq.c     **** 		if (op == RARG_ISG)
 20291              		.loc 1 3452 3 is_stmt 1 view .LVU5262
3452:src/xeq.c     **** 		if (op == RARG_ISG)
 20292              		.loc 1 3452 8 is_stmt 0 view .LVU5263
 20293 0184 24AA     		add	r2, sp, #144
 20294 0186 3846     		mov	r0, r7
 20295 0188 3146     		mov	r1, r6
 20296 018a FFF7FEFF 		bl	extract_value
 20297              	.LVL1534:
3453:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20298              		.loc 1 3453 3 is_stmt 1 view .LVU5264
3455:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20299              		.loc 1 3455 8 view .LVU5265
3455:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20300              		.loc 1 3455 11 is_stmt 0 view .LVU5266
 20301 018e 3A2C     		cmp	r4, #58
3456:src/xeq.c     **** 		else if (op == RARG_ISE)
 20302              		.loc 1 3456 4 view .LVU5267
 20303 0190 249B     		ldr	r3, [sp, #144]
3455:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20304              		.loc 1 3455 11 view .LVU5268
 20305 0192 25D0     		beq	.L1466
3460:src/xeq.c     **** 		return;
 20306              		.loc 1 3460 4 is_stmt 1 view .LVU5269
 20307 0194 13B3     		cbz	r3, .L1450
 20308              	.LVL1535:
 20309              	.L1458:
3460:src/xeq.c     **** 		return;
 20310              		.loc 1 3460 4 is_stmt 0 discriminator 2 view .LVU5270
 20311 0196 50EA0103 		orrs	r3, r0, r1
 20312 019a 0CBF     		ite	eq
 20313 019c 0120     		moveq	r0, #1
 20314 019e 0020     		movne	r0, #0
 20315              	.L1435:
3460:src/xeq.c     **** 		return;
 20316              		.loc 1 3460 4 discriminator 6 view .LVU5271
 20317 01a0 FFF7FEFF 		bl	fin_tst
 20318              	.LVL1536:
3461:src/xeq.c     **** 	} else {
 20319              		.loc 1 3461 3 is_stmt 1 discriminator 6 view .LVU5272
 20320              	.LBE3078:
3505:src/xeq.c     **** 
 20321              		.loc 1 3505 1 is_stmt 0 discriminator 6 view .LVU5273
 20322 01a4 2FB0     		add	sp, sp, #188
 20323              		.cfi_remember_state
 20324              		.cfi_def_cfa_offset 20
 20325              		@ sp needed
ARM GAS  /tmp/cccVhVyH.s 			page 544


 20326 01a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 20327              	.LVL1537:
 20328              	.L1463:
 20329              		.cfi_restore_state
 20330              	.LBB3079:
3493:src/xeq.c     **** 			else
 20331              		.loc 1 3493 5 is_stmt 1 view .LVU5274
 20332 01a8 FFF7FEFF 		bl	dn_le0
 20333              	.LVL1538:
 20334 01ac FFF7FEFF 		bl	fin_tst
 20335              	.LVL1539:
 20336 01b0 76E7     		b	.L1441
 20337              	.LVL1540:
 20338              	.L1429:
3493:src/xeq.c     **** 			else
 20339              		.loc 1 3493 5 is_stmt 0 view .LVU5275
 20340              	.LBE3079:
 20341              	.LBB3080:
3447:src/xeq.c     **** 		else
 20342              		.loc 1 3447 4 is_stmt 1 view .LVU5276
3447:src/xeq.c     **** 		else
 20343              		.loc 1 3447 8 is_stmt 0 view .LVU5277
 20344 01b2 FFF7FEFF 		bl	intAdd
 20345              	.LVL1541:
3447:src/xeq.c     **** 		else
 20346              		.loc 1 3447 8 view .LVU5278
 20347 01b6 0646     		mov	r6, r0
 20348              	.LBB3075:
 20349              	.LBB3070:
1426:src/xeq.c     **** }
 20350              		.loc 1 1426 8 view .LVU5279
 20351 01b8 2846     		mov	r0, r5
 20352              	.LBE3070:
 20353              	.LBE3075:
3447:src/xeq.c     **** 		else
 20354              		.loc 1 3447 8 view .LVU5280
 20355 01ba 0C46     		mov	r4, r1
 20356              	.LVL1542:
3450:src/xeq.c     **** 
 20357              		.loc 1 3450 3 is_stmt 1 view .LVU5281
3450:src/xeq.c     **** 
 20358              		.loc 1 3450 3 is_stmt 0 view .LVU5282
 20359 01bc CDE92461 		strd	r6, r1, [sp, #144]
 20360              	.LVL1543:
 20361              	.LBB3076:
1425:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20362              		.loc 1 1425 6 is_stmt 1 view .LVU5283
 20363              	.LBB3071:
1426:src/xeq.c     **** }
 20364              		.loc 1 1426 2 view .LVU5284
1426:src/xeq.c     **** }
 20365              		.loc 1 1426 8 is_stmt 0 view .LVU5285
 20366 01c0 FFF7FEFF 		bl	get_reg_n
 20367              	.LVL1544:
1426:src/xeq.c     **** }
 20368              		.loc 1 1426 2 view .LVU5286
 20369 01c4 24A9     		add	r1, sp, #144
ARM GAS  /tmp/cccVhVyH.s 			page 545


 20370 01c6 0822     		movs	r2, #8
 20371 01c8 FFF7FEFF 		bl	xcopy
 20372              	.LVL1545:
1426:src/xeq.c     **** }
 20373              		.loc 1 1426 2 view .LVU5287
 20374              	.LBE3071:
 20375              	.LBE3076:
3452:src/xeq.c     **** 		if (op == RARG_ISG)
 20376              		.loc 1 3452 3 is_stmt 1 view .LVU5288
3452:src/xeq.c     **** 		if (op == RARG_ISG)
 20377              		.loc 1 3452 8 is_stmt 0 view .LVU5289
 20378 01cc 24AA     		add	r2, sp, #144
 20379 01ce 3046     		mov	r0, r6
 20380 01d0 2146     		mov	r1, r4
 20381 01d2 FFF7FEFF 		bl	extract_value
 20382              	.LVL1546:
3454:src/xeq.c     **** 		else if (op == RARG_DSE)
 20383              		.loc 1 3454 4 view .LVU5290
 20384 01d6 249B     		ldr	r3, [sp, #144]
 20385              	.LVL1547:
3453:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20386              		.loc 1 3453 3 is_stmt 1 view .LVU5291
3454:src/xeq.c     **** 		else if (op == RARG_DSE)
 20387              		.loc 1 3454 4 view .LVU5292
 20388 01d8 002B     		cmp	r3, #0
 20389 01da DCD0     		beq	.L1458
 20390              	.LVL1548:
 20391              	.L1450:
3460:src/xeq.c     **** 		return;
 20392              		.loc 1 3460 4 is_stmt 0 view .LVU5293
 20393 01dc 0120     		movs	r0, #1
 20394 01de DFE7     		b	.L1435
 20395              	.LVL1549:
 20396              	.L1466:
3456:src/xeq.c     **** 		else if (op == RARG_ISE)
 20397              		.loc 1 3456 4 is_stmt 1 view .LVU5294
 20398 01e0 2BB9     		cbnz	r3, .L1449
3456:src/xeq.c     **** 		else if (op == RARG_ISE)
 20399              		.loc 1 3456 4 is_stmt 0 discriminator 1 view .LVU5295
 20400 01e2 50EA0103 		orrs	r3, r0, r1
 20401 01e6 14BF     		ite	ne
 20402 01e8 0120     		movne	r0, #1
 20403              	.LVL1550:
3456:src/xeq.c     **** 		else if (op == RARG_ISE)
 20404              		.loc 1 3456 4 discriminator 1 view .LVU5296
 20405 01ea 0020     		moveq	r0, #0
 20406 01ec D8E7     		b	.L1435
 20407              	.LVL1551:
 20408              	.L1449:
3456:src/xeq.c     **** 		else if (op == RARG_ISE)
 20409              		.loc 1 3456 4 view .LVU5297
 20410 01ee 0020     		movs	r0, #0
 20411              	.LVL1552:
3456:src/xeq.c     **** 		else if (op == RARG_ISE)
 20412              		.loc 1 3456 4 view .LVU5298
 20413 01f0 D6E7     		b	.L1435
 20414              	.L1468:
ARM GAS  /tmp/cccVhVyH.s 			page 546


 20415 01f2 00BF     		.align	2
 20416              	.L1467:
 20417 01f4 00000000 		.word	main_ram
 20418              	.LBE3080:
 20419              		.cfi_endproc
 20420              	.LFE196:
 20422              		.section	.text.op_shift_digit,"ax",%progbits
 20423              		.align	1
 20424              		.p2align 2,,3
 20425              		.global	op_shift_digit
 20426              		.syntax unified
 20427              		.thumb
 20428              		.thumb_func
 20429              		.fpu fpv4-sp-d16
 20431              	op_shift_digit:
 20432              	.LVL1553:
 20433              	.LFB197:
3510:src/xeq.c     **** 	decNumber x;
 20434              		.loc 1 3510 51 is_stmt 1 view -0
 20435              		.cfi_startproc
 20436              		@ args = 0, pretend = 0, frame = 40
 20437              		@ frame_needed = 0, uses_anonymous_args = 0
3511:src/xeq.c     **** 	int adjust = n;
 20438              		.loc 1 3511 2 view .LVU5300
3512:src/xeq.c     **** 
 20439              		.loc 1 3512 2 view .LVU5301
3514:src/xeq.c     **** 		bad_mode_error();
 20440              		.loc 1 3514 6 is_stmt 0 view .LVU5302
 20441 0000 174B     		ldr	r3, .L1478
 20442 0002 1B68     		ldr	r3, [r3]
 20443 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 20444              	.LVL1554:
3514:src/xeq.c     **** 		bad_mode_error();
 20445              		.loc 1 3514 2 is_stmt 1 view .LVU5303
3514:src/xeq.c     **** 		bad_mode_error();
 20446              		.loc 1 3514 5 is_stmt 0 view .LVU5304
 20447 0008 DB07     		lsls	r3, r3, #31
 20448 000a 06D5     		bpl	.L1470
3515:src/xeq.c     **** 		return;
 20449              		.loc 1 3515 3 is_stmt 1 view .LVU5305
 20450              	.LBB3092:
 20451              	.LBI3092:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 20452              		.loc 1 575 6 view .LVU5306
 20453              	.LBE3092:
 576:src/xeq.c     **** }
 20454              		.loc 1 576 2 view .LVU5307
 20455              	.LVL1555:
 20456              	.LBB3097:
 20457              	.LBB3093:
 20458              	.LBI3093:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 20459              		.loc 1 546 5 view .LVU5308
 20460              	.LBB3094:
 547:src/xeq.c     **** 		Error = e;
 20461              		.loc 1 547 2 view .LVU5309
 547:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/cccVhVyH.s 			page 547


 20462              		.loc 1 547 12 is_stmt 0 view .LVU5310
 20463 000c 154B     		ldr	r3, .L1478+4
 547:src/xeq.c     **** 		Error = e;
 20464              		.loc 1 547 5 view .LVU5311
 20465 000e 1A68     		ldr	r2, [r3]
 20466 0010 12B9     		cbnz	r2, .L1476
 20467              	.LVL1556:
 20468              	.LBB3095:
 20469              	.LBI3095:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 20470              		.loc 1 546 5 is_stmt 1 view .LVU5312
 20471              	.LBB3096:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 20472              		.loc 1 548 3 view .LVU5313
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 20473              		.loc 1 548 9 is_stmt 0 view .LVU5314
 20474 0012 0D22     		movs	r2, #13
 20475 0014 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 20476              		.loc 1 549 3 is_stmt 1 view .LVU5315
 20477 0016 7047     		bx	lr
 20478              	.LVL1557:
 20479              	.L1476:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 20480              		.loc 1 549 3 is_stmt 0 view .LVU5316
 20481 0018 7047     		bx	lr
 20482              	.LVL1558:
 20483              	.L1470:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 20484              		.loc 1 549 3 view .LVU5317
 20485              	.LBE3096:
 20486              	.LBE3095:
 20487              	.LBE3094:
 20488              	.LBE3093:
 20489              	.LBE3097:
3518:src/xeq.c     **** 	setlastX();
 20490              		.loc 1 3518 2 is_stmt 1 view .LVU5318
3510:src/xeq.c     **** 	decNumber x;
 20491              		.loc 1 3510 51 is_stmt 0 view .LVU5319
 20492 001a 30B5     		push	{r4, r5, lr}
 20493              		.cfi_def_cfa_offset 12
 20494              		.cfi_offset 4, -12
 20495              		.cfi_offset 5, -8
 20496              		.cfi_offset 14, -4
 20497 001c 8BB0     		sub	sp, sp, #44
 20498              		.cfi_def_cfa_offset 56
 20499              	.LVL1559:
 20500              	.LBB3098:
 20501              	.LBI3098:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 20502              		.loc 1 824 12 is_stmt 1 view .LVU5320
 20503              	.LBB3099:
 825:src/xeq.c     **** }
 20504              		.loc 1 825 2 view .LVU5321
 20505 001e 0446     		mov	r4, r0
 20506 0020 0D46     		mov	r5, r1
 825:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 548


 20507              		.loc 1 825 9 is_stmt 0 view .LVU5322
 20508 0022 01A8     		add	r0, sp, #4
 20509              	.LVL1560:
 825:src/xeq.c     **** }
 20510              		.loc 1 825 9 view .LVU5323
 20511 0024 6421     		movs	r1, #100
 20512              	.LVL1561:
 825:src/xeq.c     **** }
 20513              		.loc 1 825 9 view .LVU5324
 20514 0026 FFF7FEFF 		bl	getRegister
 20515              	.LVL1562:
 825:src/xeq.c     **** }
 20516              		.loc 1 825 9 view .LVU5325
 20517              	.LBE3099:
 20518              	.LBE3098:
3519:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
 20519              		.loc 1 3519 2 is_stmt 1 view .LVU5326
 20520              	.LBB3100:
 20521              	.LBI3100:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 20522              		.loc 1 792 6 view .LVU5327
 20523              	.LBB3101:
 793:src/xeq.c     **** }
 20524              		.loc 1 793 2 view .LVU5328
 20525 002a 6421     		movs	r1, #100
 20526 002c 6C20     		movs	r0, #108
 20527 002e FFF7FEFF 		bl	copyreg_n
 20528              	.LVL1563:
 20529              	.LBE3101:
 20530              	.LBE3100:
3520:src/xeq.c     **** 		return;
 20531              		.loc 1 3520 2 view .LVU5329
3520:src/xeq.c     **** 		return;
 20532              		.loc 1 3520 5 is_stmt 0 view .LVU5330
 20533 0032 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 20534 0036 13F0700F 		tst	r3, #112
 20535 003a 0ED1     		bne	.L1469
3520:src/xeq.c     **** 		return;
 20536              		.loc 1 3520 32 discriminator 1 view .LVU5331
 20537 003c 01A8     		add	r0, sp, #4
 20538 003e FFF7FEFF 		bl	dn_eq0
 20539              	.LVL1564:
3520:src/xeq.c     **** 		return;
 20540              		.loc 1 3520 29 discriminator 1 view .LVU5332
 20541 0042 50B9     		cbnz	r0, .L1469
3522:src/xeq.c     **** 		adjust = -adjust;
 20542              		.loc 1 3522 5 view .LVU5333
 20543 0044 722D     		cmp	r5, #114
3512:src/xeq.c     **** 
 20544              		.loc 1 3512 6 view .LVU5334
 20545 0046 2046     		mov	r0, r4
3522:src/xeq.c     **** 		adjust = -adjust;
 20546              		.loc 1 3522 2 is_stmt 1 view .LVU5335
3523:src/xeq.c     **** 	x.exponent += adjust;
 20547              		.loc 1 3523 3 view .LVU5336
3523:src/xeq.c     **** 	x.exponent += adjust;
 20548              		.loc 1 3523 10 is_stmt 0 view .LVU5337
ARM GAS  /tmp/cccVhVyH.s 			page 549


 20549 0048 08BF     		it	eq
 20550 004a 6042     		rsbeq	r0, r4, #0
 20551              	.LVL1565:
3524:src/xeq.c     **** 	setX(&x);
 20552              		.loc 1 3524 2 is_stmt 1 view .LVU5338
3524:src/xeq.c     **** 	setX(&x);
 20553              		.loc 1 3524 13 is_stmt 0 view .LVU5339
 20554 004c 029C     		ldr	r4, [sp, #8]
 20555              	.LVL1566:
 20556              	.LBB3102:
 20557              	.LBB3103:
 829:src/xeq.c     **** }
 20558              		.loc 1 829 2 view .LVU5340
 20559 004e 01A9     		add	r1, sp, #4
 20560              	.LBE3103:
 20561              	.LBE3102:
3524:src/xeq.c     **** 	setX(&x);
 20562              		.loc 1 3524 13 view .LVU5341
 20563 0050 0444     		add	r4, r4, r0
 20564              	.LBB3106:
 20565              	.LBB3104:
 829:src/xeq.c     **** }
 20566              		.loc 1 829 2 view .LVU5342
 20567 0052 6420     		movs	r0, #100
 20568              	.LVL1567:
 829:src/xeq.c     **** }
 20569              		.loc 1 829 2 view .LVU5343
 20570              	.LBE3104:
 20571              	.LBE3106:
3524:src/xeq.c     **** 	setX(&x);
 20572              		.loc 1 3524 13 view .LVU5344
 20573 0054 0294     		str	r4, [sp, #8]
3525:src/xeq.c     **** }
 20574              		.loc 1 3525 2 is_stmt 1 view .LVU5345
 20575              	.LVL1568:
 20576              	.LBB3107:
 20577              	.LBI3102:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 20578              		.loc 1 828 6 view .LVU5346
 20579              	.LBB3105:
 829:src/xeq.c     **** }
 20580              		.loc 1 829 2 view .LVU5347
 20581 0056 FFF7FEFF 		bl	setRegister
 20582              	.LVL1569:
 20583              	.L1469:
 829:src/xeq.c     **** }
 20584              		.loc 1 829 2 is_stmt 0 view .LVU5348
 20585              	.LBE3105:
 20586              	.LBE3107:
3526:src/xeq.c     **** 
 20587              		.loc 1 3526 1 view .LVU5349
 20588 005a 0BB0     		add	sp, sp, #44
 20589              		.cfi_def_cfa_offset 12
 20590              		@ sp needed
 20591 005c 30BD     		pop	{r4, r5, pc}
 20592              	.L1479:
 20593 005e 00BF     		.align	2
ARM GAS  /tmp/cccVhVyH.s 			page 550


 20594              	.L1478:
 20595 0060 00000000 		.word	main_ram
 20596 0064 00000000 		.word	Error
 20597              		.cfi_endproc
 20598              	.LFE197:
 20600              		.section	.text.get_user_flag,"ax",%progbits
 20601              		.align	1
 20602              		.p2align 2,,3
 20603              		.global	get_user_flag
 20604              		.syntax unified
 20605              		.thumb
 20606              		.thumb_func
 20607              		.fpu fpv4-sp-d16
 20609              	get_user_flag:
 20610              	.LVL1570:
 20611              	.LFB199:
3559:src/xeq.c     **** 	unsigned short mask;
 20612              		.loc 1 3559 26 is_stmt 1 view -0
 20613              		.cfi_startproc
 20614              		@ args = 0, pretend = 0, frame = 8
 20615              		@ frame_needed = 0, uses_anonymous_args = 0
3560:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 20616              		.loc 1 3560 2 view .LVU5351
3561:src/xeq.c     **** 
 20617              		.loc 1 3561 2 view .LVU5352
3559:src/xeq.c     **** 	unsigned short mask;
 20618              		.loc 1 3559 26 is_stmt 0 view .LVU5353
 20619 0000 00B5     		push	{lr}
 20620              		.cfi_def_cfa_offset 4
 20621              		.cfi_offset 14, -4
 20622 0002 83B0     		sub	sp, sp, #12
 20623              		.cfi_def_cfa_offset 16
3561:src/xeq.c     **** 
 20624              		.loc 1 3561 34 view .LVU5354
 20625 0004 0DF10601 		add	r1, sp, #6
 20626 0008 FFF7FEFF 		bl	flag_word
 20627              	.LVL1571:
3563:src/xeq.c     **** }
 20628              		.loc 1 3563 2 is_stmt 1 view .LVU5355
3563:src/xeq.c     **** }
 20629              		.loc 1 3563 24 is_stmt 0 view .LVU5356
 20630 000c BDF80630 		ldrh	r3, [sp, #6]
 20631 0010 0288     		ldrh	r2, [r0]
 20632 0012 1A42     		tst	r2, r3
3564:src/xeq.c     **** 
 20633              		.loc 1 3564 1 view .LVU5357
 20634 0014 14BF     		ite	ne
 20635 0016 0120     		movne	r0, #1
 20636              	.LVL1572:
3564:src/xeq.c     **** 
 20637              		.loc 1 3564 1 view .LVU5358
 20638 0018 0020     		moveq	r0, #0
 20639 001a 03B0     		add	sp, sp, #12
 20640              		.cfi_def_cfa_offset 4
 20641              		@ sp needed
 20642 001c 5DF804FB 		ldr	pc, [sp], #4
 20643              		.cfi_endproc
ARM GAS  /tmp/cccVhVyH.s 			page 551


 20644              	.LFE199:
 20646              		.section	.text.cmdflag,"ax",%progbits
 20647              		.align	1
 20648              		.p2align 2,,3
 20649              		.global	cmdflag
 20650              		.syntax unified
 20651              		.thumb
 20652              		.thumb_func
 20653              		.fpu fpv4-sp-d16
 20655              	cmdflag:
 20656              	.LVL1573:
 20657              	.LFB201:
3587:src/xeq.c     **** 	unsigned short mask;
 20658              		.loc 1 3587 46 is_stmt 1 view -0
 20659              		.cfi_startproc
 20660              		@ args = 0, pretend = 0, frame = 8
 20661              		@ frame_needed = 0, uses_anonymous_args = 0
3588:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
 20662              		.loc 1 3588 2 view .LVU5360
3589:src/xeq.c     **** 	int flg = *f & mask;
 20663              		.loc 1 3589 2 view .LVU5361
3587:src/xeq.c     **** 	unsigned short mask;
 20664              		.loc 1 3587 46 is_stmt 0 view .LVU5362
 20665 0000 70B5     		push	{r4, r5, r6, lr}
 20666              		.cfi_def_cfa_offset 16
 20667              		.cfi_offset 4, -16
 20668              		.cfi_offset 5, -12
 20669              		.cfi_offset 6, -8
 20670              		.cfi_offset 14, -4
 20671 0002 82B0     		sub	sp, sp, #8
 20672              		.cfi_def_cfa_offset 24
3587:src/xeq.c     **** 	unsigned short mask;
 20673              		.loc 1 3587 46 view .LVU5363
 20674 0004 0C46     		mov	r4, r1
3589:src/xeq.c     **** 	int flg = *f & mask;
 20675              		.loc 1 3589 28 view .LVU5364
 20676 0006 0DF10601 		add	r1, sp, #6
 20677              	.LVL1574:
3587:src/xeq.c     **** 	unsigned short mask;
 20678              		.loc 1 3587 46 view .LVU5365
 20679 000a 0646     		mov	r6, r0
3589:src/xeq.c     **** 	int flg = *f & mask;
 20680              		.loc 1 3589 28 view .LVU5366
 20681 000c FFF7FEFF 		bl	flag_word
 20682              	.LVL1575:
3590:src/xeq.c     **** 
 20683              		.loc 1 3590 15 view .LVU5367
 20684 0010 BDF80620 		ldrh	r2, [sp, #6]
3590:src/xeq.c     **** 
 20685              		.loc 1 3590 12 view .LVU5368
 20686 0014 0388     		ldrh	r3, [r0]
 20687 0016 A4F15101 		sub	r1, r4, #81
3589:src/xeq.c     **** 	int flg = *f & mask;
 20688              		.loc 1 3589 28 view .LVU5369
 20689 001a 0546     		mov	r5, r0
 20690              	.LVL1576:
3590:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 552


 20691              		.loc 1 3590 2 is_stmt 1 view .LVU5370
3590:src/xeq.c     **** 
 20692              		.loc 1 3590 6 is_stmt 0 view .LVU5371
 20693 001c 03EA0200 		and	r0, r3, r2
 20694              	.LVL1577:
3592:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
 20695              		.loc 1 3592 2 is_stmt 1 view .LVU5372
 20696 0020 0A29     		cmp	r1, #10
 20697 0022 1AD8     		bhi	.L1482
 20698 0024 DFE801F0 		tbb	[pc, r1]
 20699              	.L1485:
 20700 0028 23       		.byte	(.L1495-.L1485)/2
 20701 0029 0E       		.byte	(.L1494-.L1485)/2
 20702 002a 46       		.byte	(.L1493-.L1485)/2
 20703 002b 29       		.byte	(.L1506-.L1485)/2
 20704 002c 26       		.byte	(.L1491-.L1485)/2
 20705 002d 09       		.byte	(.L1505-.L1485)/2
 20706 002e 1E       		.byte	(.L1504-.L1485)/2
 20707 002f 2D       		.byte	(.L1488-.L1485)/2
 20708 0030 06       		.byte	(.L1487-.L1485)/2
 20709 0031 1B       		.byte	(.L1486-.L1485)/2
 20710 0032 3A       		.byte	(.L1484-.L1485)/2
 20711 0033 00       		.p2align 1
 20712              	.L1487:
3604:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20713              		.loc 1 3604 17 view .LVU5373
 20714 0034 B0FA80F0 		clz	r0, r0
 20715              	.LVL1578:
3604:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20716              		.loc 1 3604 17 is_stmt 0 view .LVU5374
 20717 0038 4009     		lsrs	r0, r0, #5
 20718              	.L1505:
3604:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20719              		.loc 1 3604 17 view .LVU5375
 20720 003a FFF7FEFF 		bl	fin_tst
 20721              	.LVL1579:
3604:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20722              		.loc 1 3604 33 is_stmt 1 view .LVU5376
3604:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20723              		.loc 1 3604 45 view .LVU5377
3613:src/xeq.c     **** 		*f |= mask;
 20724              		.loc 1 3613 2 view .LVU5378
 20725 003e 2B88     		ldrh	r3, [r5]
 20726 0040 BDF80620 		ldrh	r2, [sp, #6]
 20727              	.LVL1580:
 20728              	.L1494:
3616:src/xeq.c     **** 
 20729              		.loc 1 3616 3 view .LVU5379
3616:src/xeq.c     **** 
 20730              		.loc 1 3616 6 is_stmt 0 view .LVU5380
 20731 0044 23EA0203 		bic	r3, r3, r2
 20732 0048 0021     		movs	r1, #0
 20733              	.L1497:
3618:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20734              		.loc 1 3618 5 view .LVU5381
 20735 004a 682E     		cmp	r6, #104
 20736 004c 2B80     		strh	r3, [r5]	@ movhi
ARM GAS  /tmp/cccVhVyH.s 			page 553


3618:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20737              		.loc 1 3618 2 is_stmt 1 view .LVU5382
3618:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20738              		.loc 1 3618 5 is_stmt 0 view .LVU5383
 20739 004e 04D1     		bne	.L1482
3619:src/xeq.c     **** 		//		finish_display(); // BIG_EQ
 20740              		.loc 1 3619 3 is_stmt 1 view .LVU5384
 20741 0050 8320     		movs	r0, #131
 20742 0052 FFF7FEFF 		bl	dot
 20743              	.LVL1581:
3621:src/xeq.c     **** 	}
 20744              		.loc 1 3621 3 view .LVU5385
 20745 0056 1A4B     		ldr	r3, .L1508
 20746 0058 9847     		blx	r3
 20747              	.LVL1582:
 20748              	.L1482:
3623:src/xeq.c     **** 
 20749              		.loc 1 3623 1 is_stmt 0 view .LVU5386
 20750 005a 02B0     		add	sp, sp, #8
 20751              		.cfi_remember_state
 20752              		.cfi_def_cfa_offset 16
 20753              		@ sp needed
 20754 005c 70BD     		pop	{r4, r5, r6, pc}
 20755              	.LVL1583:
 20756              	.L1486:
 20757              		.cfi_restore_state
3605:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20758              		.loc 1 3605 17 is_stmt 1 view .LVU5387
 20759 005e B0FA80F0 		clz	r0, r0
 20760              	.LVL1584:
3605:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20761              		.loc 1 3605 17 is_stmt 0 view .LVU5388
 20762 0062 4009     		lsrs	r0, r0, #5
 20763              	.L1504:
3605:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20764              		.loc 1 3605 17 view .LVU5389
 20765 0064 FFF7FEFF 		bl	fin_tst
 20766              	.LVL1585:
3605:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20767              		.loc 1 3605 33 is_stmt 1 view .LVU5390
3605:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20768              		.loc 1 3605 45 view .LVU5391
3613:src/xeq.c     **** 		*f |= mask;
 20769              		.loc 1 3613 2 view .LVU5392
 20770 0068 2B88     		ldrh	r3, [r5]
 20771 006a BDF80620 		ldrh	r2, [sp, #6]
 20772              	.LVL1586:
 20773              	.L1495:
3614:src/xeq.c     **** 	else
 20774              		.loc 1 3614 3 view .LVU5393
3614:src/xeq.c     **** 	else
 20775              		.loc 1 3614 6 is_stmt 0 view .LVU5394
 20776 006e 1343     		orrs	r3, r3, r2
 20777 0070 0121     		movs	r1, #1
 20778 0072 EAE7     		b	.L1497
 20779              	.LVL1587:
 20780              	.L1491:
ARM GAS  /tmp/cccVhVyH.s 			page 554


3598:src/xeq.c     **** 
 20781              		.loc 1 3598 16 is_stmt 1 view .LVU5395
 20782 0074 B0FA80F0 		clz	r0, r0
 20783              	.LVL1588:
3598:src/xeq.c     **** 
 20784              		.loc 1 3598 16 is_stmt 0 view .LVU5396
 20785 0078 4009     		lsrs	r0, r0, #5
 20786              	.L1506:
3598:src/xeq.c     **** 
 20787              		.loc 1 3598 16 view .LVU5397
 20788 007a FFF7FEFF 		bl	fin_tst
 20789              	.LVL1589:
3598:src/xeq.c     **** 
 20790              		.loc 1 3598 37 is_stmt 1 view .LVU5398
3623:src/xeq.c     **** 
 20791              		.loc 1 3623 1 is_stmt 0 view .LVU5399
 20792 007e 02B0     		add	sp, sp, #8
 20793              		.cfi_remember_state
 20794              		.cfi_def_cfa_offset 16
 20795              		@ sp needed
 20796 0080 70BD     		pop	{r4, r5, r6, pc}
 20797              	.LVL1590:
 20798              	.L1488:
 20799              		.cfi_restore_state
3602:src/xeq.c     **** 
 20800              		.loc 1 3602 17 is_stmt 1 view .LVU5400
3602:src/xeq.c     **** 
 20801              		.loc 1 3602 45 is_stmt 0 view .LVU5401
 20802 0082 B0FA80F4 		clz	r4, r0
 20803 0086 6409     		lsrs	r4, r4, #5
3602:src/xeq.c     **** 
 20804              		.loc 1 3602 17 view .LVU5402
 20805 0088 FFF7FEFF 		bl	fin_tst
 20806              	.LVL1591:
3602:src/xeq.c     **** 
 20807              		.loc 1 3602 31 is_stmt 1 view .LVU5403
3602:src/xeq.c     **** 
 20808              		.loc 1 3602 52 view .LVU5404
3613:src/xeq.c     **** 		*f |= mask;
 20809              		.loc 1 3613 2 view .LVU5405
 20810 008c 2B88     		ldrh	r3, [r5]
 20811 008e BDF80620 		ldrh	r2, [sp, #6]
3613:src/xeq.c     **** 		*f |= mask;
 20812              		.loc 1 3613 5 is_stmt 0 view .LVU5406
 20813 0092 002C     		cmp	r4, #0
 20814 0094 D6D0     		beq	.L1494
 20815              	.L1507:
 20816              	.LVL1592:
3614:src/xeq.c     **** 	else
 20817              		.loc 1 3614 3 is_stmt 1 view .LVU5407
3614:src/xeq.c     **** 	else
 20818              		.loc 1 3614 6 is_stmt 0 view .LVU5408
 20819 0096 1343     		orrs	r3, r3, r2
 20820 0098 0121     		movs	r1, #1
 20821 009a D6E7     		b	.L1497
 20822              	.LVL1593:
 20823              	.L1484:
ARM GAS  /tmp/cccVhVyH.s 			page 555


3606:src/xeq.c     **** 
 20824              		.loc 1 3606 17 is_stmt 1 view .LVU5409
 20825 009c B0FA80F4 		clz	r4, r0
 20826 00a0 6409     		lsrs	r4, r4, #5
 20827 00a2 2046     		mov	r0, r4
 20828              	.LVL1594:
3606:src/xeq.c     **** 
 20829              		.loc 1 3606 17 is_stmt 0 view .LVU5410
 20830 00a4 FFF7FEFF 		bl	fin_tst
 20831              	.LVL1595:
3606:src/xeq.c     **** 
 20832              		.loc 1 3606 33 is_stmt 1 view .LVU5411
3606:src/xeq.c     **** 
 20833              		.loc 1 3606 52 view .LVU5412
 20834 00a8 2B88     		ldrh	r3, [r5]
 20835 00aa BDF80620 		ldrh	r2, [sp, #6]
3613:src/xeq.c     **** 		*f |= mask;
 20836              		.loc 1 3613 2 view .LVU5413
3613:src/xeq.c     **** 		*f |= mask;
 20837              		.loc 1 3613 5 is_stmt 0 view .LVU5414
 20838 00ae 002C     		cmp	r4, #0
 20839 00b0 C8D0     		beq	.L1494
 20840 00b2 F0E7     		b	.L1507
 20841              	.LVL1596:
 20842              	.L1493:
3595:src/xeq.c     **** 
 20843              		.loc 1 3595 16 is_stmt 1 view .LVU5415
3595:src/xeq.c     **** 
 20844              		.loc 1 3595 29 is_stmt 0 view .LVU5416
 20845 00b4 B0FA80F4 		clz	r4, r0
 20846 00b8 6409     		lsrs	r4, r4, #5
 20847              	.LVL1597:
3595:src/xeq.c     **** 
 20848              		.loc 1 3595 38 is_stmt 1 view .LVU5417
3613:src/xeq.c     **** 		*f |= mask;
 20849              		.loc 1 3613 2 view .LVU5418
3613:src/xeq.c     **** 		*f |= mask;
 20850              		.loc 1 3613 5 is_stmt 0 view .LVU5419
 20851 00ba 002C     		cmp	r4, #0
 20852 00bc C2D0     		beq	.L1494
 20853 00be EAE7     		b	.L1507
 20854              	.L1509:
 20855              		.align	2
 20856              	.L1508:
 20857 00c0 31020008 		.word	134218289
 20858              		.cfi_endproc
 20859              	.LFE201:
 20861              		.section	.text.put_user_flag,"ax",%progbits
 20862              		.align	1
 20863              		.p2align 2,,3
 20864              		.global	put_user_flag
 20865              		.syntax unified
 20866              		.thumb
 20867              		.thumb_func
 20868              		.fpu fpv4-sp-d16
 20870              	put_user_flag:
 20871              	.LVL1598:
ARM GAS  /tmp/cccVhVyH.s 			page 556


 20872              	.LFB200:
3566:src/xeq.c     **** 	if (f)	set_user_flag(n);
 20873              		.loc 1 3566 34 is_stmt 1 view -0
 20874              		.cfi_startproc
 20875              		@ args = 0, pretend = 0, frame = 0
 20876              		@ frame_needed = 0, uses_anonymous_args = 0
 20877              		@ link register save eliminated.
3567:src/xeq.c     **** 	else	clr_user_flag(n);
 20878              		.loc 1 3567 2 view .LVU5421
3567:src/xeq.c     **** 	else	clr_user_flag(n);
 20879              		.loc 1 3567 5 is_stmt 0 view .LVU5422
 20880 0000 11B1     		cbz	r1, .L1511
3567:src/xeq.c     **** 	else	clr_user_flag(n);
 20881              		.loc 1 3567 9 is_stmt 1 discriminator 1 view .LVU5423
 20882 0002 5121     		movs	r1, #81
 20883              	.LVL1599:
3567:src/xeq.c     **** 	else	clr_user_flag(n);
 20884              		.loc 1 3567 9 is_stmt 0 discriminator 1 view .LVU5424
 20885 0004 FFF7FEBF 		b	cmdflag
 20886              	.LVL1600:
 20887              	.L1511:
3568:src/xeq.c     **** }
 20888              		.loc 1 3568 7 is_stmt 1 view .LVU5425
 20889 0008 5221     		movs	r1, #82
 20890              	.LVL1601:
3568:src/xeq.c     **** }
 20891              		.loc 1 3568 7 is_stmt 0 view .LVU5426
 20892 000a FFF7FEBF 		b	cmdflag
 20893              	.LVL1602:
3568:src/xeq.c     **** }
 20894              		.loc 1 3568 7 view .LVU5427
 20895              		.cfi_endproc
 20896              	.LFE200:
 20898 000e 00BF     		.section	.text.clrflags,"ax",%progbits
 20899              		.align	1
 20900              		.p2align 2,,3
 20901              		.global	clrflags
 20902              		.syntax unified
 20903              		.thumb
 20904              		.thumb_func
 20905              		.fpu fpv4-sp-d16
 20907              	clrflags:
 20908              	.LVL1603:
 20909              	.LFB202:
3627:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 20910              		.loc 1 3627 30 is_stmt 1 view -0
 20911              		.cfi_startproc
 20912              		@ args = 0, pretend = 0, frame = 0
 20913              		@ frame_needed = 0, uses_anonymous_args = 0
3628:src/xeq.c     **** 	if (LocalRegs < 0) {
 20914              		.loc 1 3628 2 view .LVU5429
3627:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 20915              		.loc 1 3627 30 is_stmt 0 view .LVU5430
 20916 0000 10B5     		push	{r4, lr}
 20917              		.cfi_def_cfa_offset 8
 20918              		.cfi_offset 4, -8
 20919              		.cfi_offset 14, -4
ARM GAS  /tmp/cccVhVyH.s 			page 557


3628:src/xeq.c     **** 	if (LocalRegs < 0) {
 20920              		.loc 1 3628 7 view .LVU5431
 20921 0002 0A4C     		ldr	r4, .L1516
 20922 0004 2068     		ldr	r0, [r4]
 20923              	.LVL1604:
3628:src/xeq.c     **** 	if (LocalRegs < 0) {
 20924              		.loc 1 3628 2 view .LVU5432
 20925 0006 0E22     		movs	r2, #14
 20926 0008 00F5FE60 		add	r0, r0, #2032
 20927 000c 0021     		movs	r1, #0
 20928 000e FFF7FEFF 		bl	xset
 20929              	.LVL1605:
3629:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20930              		.loc 1 3629 2 is_stmt 1 view .LVU5433
3629:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20931              		.loc 1 3629 6 is_stmt 0 view .LVU5434
 20932 0012 2368     		ldr	r3, [r4]
 20933 0014 B3F8DE37 		ldrh	r3, [r3, #2014]
3629:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20934              		.loc 1 3629 5 view .LVU5435
 20935 0018 1B04     		lsls	r3, r3, #16
 20936 001a 00D4     		bmi	.L1515
3632:src/xeq.c     **** 
 20937              		.loc 1 3632 1 view .LVU5436
 20938 001c 10BD     		pop	{r4, pc}
 20939              	.L1515:
3630:src/xeq.c     **** 	}
 20940              		.loc 1 3630 3 is_stmt 1 view .LVU5437
3630:src/xeq.c     **** 	}
 20941              		.loc 1 3630 5 is_stmt 0 view .LVU5438
 20942 001e 0021     		movs	r1, #0
 20943 0020 7020     		movs	r0, #112
 20944 0022 FFF7FEFF 		bl	flag_word
 20945              	.LVL1606:
3630:src/xeq.c     **** 	}
 20946              		.loc 1 3630 37 view .LVU5439
 20947 0026 0023     		movs	r3, #0
 20948 0028 0380     		strh	r3, [r0]	@ movhi
3632:src/xeq.c     **** 
 20949              		.loc 1 3632 1 view .LVU5440
 20950 002a 10BD     		pop	{r4, pc}
 20951              	.L1517:
 20952              		.align	2
 20953              	.L1516:
 20954 002c 00000000 		.word	main_ram
 20955              		.cfi_endproc
 20956              	.LFE202:
 20958              		.section	.text.intws,"ax",%progbits
 20959              		.align	1
 20960              		.p2align 2,,3
 20961              		.global	intws
 20962              		.syntax unified
 20963              		.thumb
 20964              		.thumb_func
 20965              		.fpu fpv4-sp-d16
 20967              	intws:
 20968              	.LVL1607:
ARM GAS  /tmp/cccVhVyH.s 			page 558


 20969              	.LFB203:
3637:src/xeq.c     **** 	if (is_intmode()) {
 20970              		.loc 1 3637 44 is_stmt 1 view -0
 20971              		.cfi_startproc
 20972              		@ args = 0, pretend = 0, frame = 8
 20973              		@ frame_needed = 0, uses_anonymous_args = 0
3638:src/xeq.c     **** 		int i, ss = stack_size();
 20974              		.loc 1 3638 2 view .LVU5442
3637:src/xeq.c     **** 	if (is_intmode()) {
 20975              		.loc 1 3637 44 is_stmt 0 view .LVU5443
 20976 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 20977              		.cfi_def_cfa_offset 24
 20978              		.cfi_offset 4, -24
 20979              		.cfi_offset 5, -20
 20980              		.cfi_offset 6, -16
 20981              		.cfi_offset 7, -12
 20982              		.cfi_offset 8, -8
 20983              		.cfi_offset 14, -4
3638:src/xeq.c     **** 		int i, ss = stack_size();
 20984              		.loc 1 3638 6 view .LVU5444
 20985 0004 DFF8E080 		ldr	r8, .L1529+4
 20986 0008 D8F80030 		ldr	r3, [r8]
 20987 000c 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3638:src/xeq.c     **** 		int i, ss = stack_size();
 20988              		.loc 1 3638 5 view .LVU5445
 20989 0010 D107     		lsls	r1, r2, #31
 20990              	.LVL1608:
3637:src/xeq.c     **** 	if (is_intmode()) {
 20991              		.loc 1 3637 44 view .LVU5446
 20992 0012 82B0     		sub	sp, sp, #8
 20993              		.cfi_def_cfa_offset 32
3638:src/xeq.c     **** 		int i, ss = stack_size();
 20994              		.loc 1 3638 5 view .LVU5447
 20995 0014 53D5     		bpl	.L1519
 20996              	.LBB3108:
3639:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
 20997              		.loc 1 3639 3 is_stmt 1 view .LVU5448
 20998              	.LBB3109:
 20999              	.LBI3109:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 21000              		.loc 1 712 5 view .LVU5449
 21001              	.LBB3110:
 713:src/xeq.c     **** 		return 4;
 21002              		.loc 1 713 2 view .LVU5450
 713:src/xeq.c     **** 		return 4;
 21003              		.loc 1 713 6 is_stmt 0 view .LVU5451
 21004 0016 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 21005              		.loc 1 713 5 view .LVU5452
 21006 001a 1207     		lsls	r2, r2, #28
 21007 001c 58D5     		bpl	.L1523
 21008              	.LBB3111:
 21009              	.LBI3111:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 21010              		.loc 1 185 5 is_stmt 1 view .LVU5453
 21011              	.LBB3112:
 186:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 559


 21012              		.loc 1 186 2 view .LVU5454
 186:src/xeq.c     **** }
 21013              		.loc 1 186 9 is_stmt 0 view .LVU5455
 21014 001e B3F8E027 		ldrh	r2, [r3, #2016]
 21015              	.LBE3112:
 21016              	.LBE3111:
 713:src/xeq.c     **** 		return 4;
 21017              		.loc 1 713 27 view .LVU5456
 21018 0022 920B     		lsrs	r2, r2, #14
 21019 0024 032A     		cmp	r2, #3
 21020 0026 55D0     		beq	.L1528
 715:src/xeq.c     **** }
 21021              		.loc 1 715 9 view .LVU5457
 21022 0028 0827     		movs	r7, #8
 21023              	.L1520:
 21024              	.LVL1609:
 715:src/xeq.c     **** }
 21025              		.loc 1 715 9 view .LVU5458
 21026              	.LBE3110:
 21027              	.LBE3109:
3640:src/xeq.c     **** 		long long int v;
 21028              		.loc 1 3640 3 is_stmt 1 view .LVU5459
3640:src/xeq.c     **** 		long long int v;
 21029              		.loc 1 3640 31 is_stmt 0 view .LVU5460
 21030 002a 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
 21031 002e 00F03F05 		and	r5, r0, #63
 21032 0032 06F03F06 		and	r6, r6, #63
 21033              	.LVL1610:
3641:src/xeq.c     **** 
 21034              		.loc 1 3641 3 is_stmt 1 view .LVU5461
3643:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21035              		.loc 1 3643 3 view .LVU5462
3643:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21036              		.loc 1 3643 13 view .LVU5463
 21037 0036 6437     		adds	r7, r7, #100
 21038              	.LVL1611:
3640:src/xeq.c     **** 		long long int v;
 21039              		.loc 1 3640 31 is_stmt 0 view .LVU5464
 21040 0038 6424     		movs	r4, #100
 21041              	.LVL1612:
 21042              	.L1521:
3644:src/xeq.c     **** 			UState.int_len = arg;
 21043              		.loc 1 3644 4 is_stmt 1 discriminator 3 view .LVU5465
3644:src/xeq.c     **** 			UState.int_len = arg;
 21044              		.loc 1 3644 8 is_stmt 0 discriminator 3 view .LVU5466
 21045 003a 2046     		mov	r0, r4
 21046 003c FFF7FEFF 		bl	get_reg_n_int
 21047              	.LVL1613:
 21048 0040 FFF7FEFF 		bl	mask_value
 21049              	.LVL1614:
3645:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 21050              		.loc 1 3645 4 is_stmt 1 discriminator 3 view .LVU5467
3645:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 21051              		.loc 1 3645 19 is_stmt 0 discriminator 3 view .LVU5468
 21052 0044 D8F80030 		ldr	r3, [r8]
 21053 0048 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21054 004c 65F30502 		bfi	r2, r5, #0, #6
ARM GAS  /tmp/cccVhVyH.s 			page 560


 21055 0050 83F8E927 		strb	r2, [r3, #2025]
3646:src/xeq.c     **** 			UState.int_len = oldlen;
 21056              		.loc 1 3646 4 is_stmt 1 discriminator 3 view .LVU5469
 21057 0054 FFF7FEFF 		bl	mask_value
 21058              	.LVL1615:
3646:src/xeq.c     **** 			UState.int_len = oldlen;
 21059              		.loc 1 3646 4 is_stmt 0 discriminator 3 view .LVU5470
 21060 0058 0B46     		mov	r3, r1
 21061 005a 0246     		mov	r2, r0
 21062              	.LBB3114:
 21063              	.LBB3115:
1426:src/xeq.c     **** }
 21064              		.loc 1 1426 8 discriminator 3 view .LVU5471
 21065 005c 2046     		mov	r0, r4
 21066 005e CDE90023 		strd	r2, [sp]
 21067              	.LVL1616:
1426:src/xeq.c     **** }
 21068              		.loc 1 1426 8 discriminator 3 view .LVU5472
 21069              	.LBE3115:
 21070              	.LBI3114:
1425:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 21071              		.loc 1 1425 6 is_stmt 1 discriminator 3 view .LVU5473
 21072              	.LBB3116:
1426:src/xeq.c     **** }
 21073              		.loc 1 1426 2 discriminator 3 view .LVU5474
1426:src/xeq.c     **** }
 21074              		.loc 1 1426 8 is_stmt 0 discriminator 3 view .LVU5475
 21075 0062 FFF7FEFF 		bl	get_reg_n
 21076              	.LVL1617:
1426:src/xeq.c     **** }
 21077              		.loc 1 1426 2 discriminator 3 view .LVU5476
 21078 0066 0822     		movs	r2, #8
 21079 0068 6946     		mov	r1, sp
 21080 006a FFF7FEFF 		bl	xcopy
 21081              	.LVL1618:
1426:src/xeq.c     **** }
 21082              		.loc 1 1426 2 discriminator 3 view .LVU5477
 21083              	.LBE3116:
 21084              	.LBE3114:
3647:src/xeq.c     **** 		}
 21085              		.loc 1 3647 4 is_stmt 1 discriminator 3 view .LVU5478
3647:src/xeq.c     **** 		}
 21086              		.loc 1 3647 19 is_stmt 0 discriminator 3 view .LVU5479
 21087 006e D8F80030 		ldr	r3, [r8]
 21088 0072 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21089 0076 0134     		adds	r4, r4, #1
 21090              	.LVL1619:
3647:src/xeq.c     **** 		}
 21091              		.loc 1 3647 19 discriminator 3 view .LVU5480
 21092 0078 66F30502 		bfi	r2, r6, #0, #6
3643:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21093              		.loc 1 3643 3 discriminator 3 view .LVU5481
 21094 007c BC42     		cmp	r4, r7
3647:src/xeq.c     **** 		}
 21095              		.loc 1 3647 19 discriminator 3 view .LVU5482
 21096 007e 83F8E927 		strb	r2, [r3, #2025]
3643:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
ARM GAS  /tmp/cccVhVyH.s 			page 561


 21097              		.loc 1 3643 19 is_stmt 1 discriminator 3 view .LVU5483
 21098              	.LVL1620:
3643:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21099              		.loc 1 3643 13 discriminator 3 view .LVU5484
3643:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21100              		.loc 1 3643 3 is_stmt 0 discriminator 3 view .LVU5485
 21101 0082 DAD1     		bne	.L1521
3649:src/xeq.c     **** 		UState.int_len = arg;
 21102              		.loc 1 3649 3 is_stmt 1 view .LVU5486
3649:src/xeq.c     **** 		UState.int_len = arg;
 21103              		.loc 1 3649 7 is_stmt 0 view .LVU5487
 21104 0084 6C20     		movs	r0, #108
 21105 0086 FFF7FEFF 		bl	get_reg_n_int
 21106              	.LVL1621:
 21107 008a FFF7FEFF 		bl	mask_value
 21108              	.LVL1622:
3650:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 21109              		.loc 1 3650 3 is_stmt 1 view .LVU5488
3650:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 21110              		.loc 1 3650 18 is_stmt 0 view .LVU5489
 21111 008e D8F80030 		ldr	r3, [r8]
 21112 0092 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21113 0096 65F30502 		bfi	r2, r5, #0, #6
 21114 009a 83F8E927 		strb	r2, [r3, #2025]
3651:src/xeq.c     **** 	} else
 21115              		.loc 1 3651 3 is_stmt 1 view .LVU5490
 21116 009e FFF7FEFF 		bl	mask_value
 21117              	.LVL1623:
3651:src/xeq.c     **** 	} else
 21118              		.loc 1 3651 3 is_stmt 0 view .LVU5491
 21119 00a2 0B46     		mov	r3, r1
 21120 00a4 0246     		mov	r2, r0
 21121              	.LBB3117:
 21122              	.LBB3118:
1426:src/xeq.c     **** }
 21123              		.loc 1 1426 8 view .LVU5492
 21124 00a6 6C20     		movs	r0, #108
 21125 00a8 CDE90023 		strd	r2, [sp]
 21126              	.LVL1624:
1426:src/xeq.c     **** }
 21127              		.loc 1 1426 8 view .LVU5493
 21128              	.LBE3118:
 21129              	.LBI3117:
1425:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 21130              		.loc 1 1425 6 is_stmt 1 view .LVU5494
 21131              	.LBB3119:
1426:src/xeq.c     **** }
 21132              		.loc 1 1426 2 view .LVU5495
1426:src/xeq.c     **** }
 21133              		.loc 1 1426 8 is_stmt 0 view .LVU5496
 21134 00ac FFF7FEFF 		bl	get_reg_n
 21135              	.LVL1625:
1426:src/xeq.c     **** }
 21136              		.loc 1 1426 2 view .LVU5497
 21137 00b0 6946     		mov	r1, sp
 21138 00b2 0822     		movs	r2, #8
 21139 00b4 FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/cccVhVyH.s 			page 562


 21140              	.LVL1626:
1426:src/xeq.c     **** }
 21141              		.loc 1 1426 2 view .LVU5498
 21142              	.LBE3119:
 21143              	.LBE3117:
 21144              	.LBE3108:
3654:src/xeq.c     **** 
 21145              		.loc 1 3654 1 view .LVU5499
 21146 00b8 02B0     		add	sp, sp, #8
 21147              		.cfi_remember_state
 21148              		.cfi_def_cfa_offset 24
 21149              		@ sp needed
 21150 00ba BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21151              	.LVL1627:
 21152              	.L1519:
 21153              		.cfi_restore_state
3653:src/xeq.c     **** }
 21154              		.loc 1 3653 6 is_stmt 1 view .LVU5500
3653:src/xeq.c     **** }
 21155              		.loc 1 3653 21 is_stmt 0 view .LVU5501
 21156 00be 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21157 00c2 60F30502 		bfi	r2, r0, #0, #6
 21158              	.LVL1628:
3653:src/xeq.c     **** }
 21159              		.loc 1 3653 21 view .LVU5502
 21160 00c6 83F8E927 		strb	r2, [r3, #2025]
3654:src/xeq.c     **** 
 21161              		.loc 1 3654 1 view .LVU5503
 21162 00ca 02B0     		add	sp, sp, #8
 21163              		.cfi_remember_state
 21164              		.cfi_def_cfa_offset 24
 21165              		@ sp needed
 21166 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21167              	.LVL1629:
 21168              	.L1523:
 21169              		.cfi_restore_state
 21170              	.LBB3121:
 21171              	.LBB3120:
 21172              	.LBB3113:
 714:src/xeq.c     **** 	return 8;
 21173              		.loc 1 714 10 view .LVU5504
 21174 00d0 0427     		movs	r7, #4
 21175 00d2 AAE7     		b	.L1520
 21176              	.L1528:
 713:src/xeq.c     **** 		return 4;
 21177              		.loc 1 713 44 view .LVU5505
 21178 00d4 034A     		ldr	r2, .L1529
 713:src/xeq.c     **** 		return 4;
 21179              		.loc 1 713 41 view .LVU5506
 21180 00d6 92F90120 		ldrsb	r2, [r2, #1]
 714:src/xeq.c     **** 	return 8;
 21181              		.loc 1 714 10 view .LVU5507
 21182 00da 002A     		cmp	r2, #0
 21183 00dc B4BF     		ite	lt
 21184 00de 0827     		movlt	r7, #8
 21185 00e0 0427     		movge	r7, #4
 21186 00e2 A2E7     		b	.L1520
ARM GAS  /tmp/cccVhVyH.s 			page 563


 21187              	.L1530:
 21188              		.align	2
 21189              	.L1529:
 21190 00e4 00000000 		.word	XromParams
 21191 00e8 00000000 		.word	main_ram
 21192              	.LBE3113:
 21193              	.LBE3120:
 21194              	.LBE3121:
 21195              		.cfi_endproc
 21196              	.LFE203:
 21198              		.section	.text.get_maxdenom,"ax",%progbits
 21199              		.align	1
 21200              		.p2align 2,,3
 21201              		.global	get_maxdenom
 21202              		.syntax unified
 21203              		.thumb
 21204              		.thumb_func
 21205              		.fpu fpv4-sp-d16
 21207              	get_maxdenom:
 21208              	.LVL1630:
 21209              	.LFB204:
3660:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
 21210              		.loc 1 3660 33 is_stmt 1 view -0
 21211              		.cfi_startproc
 21212              		@ args = 0, pretend = 0, frame = 0
 21213              		@ frame_needed = 0, uses_anonymous_args = 0
 21214              		@ link register save eliminated.
3661:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21215              		.loc 1 3661 2 view .LVU5509
3661:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21216              		.loc 1 3661 32 is_stmt 0 view .LVU5510
 21217 0000 064B     		ldr	r3, .L1533
 21218 0002 1B68     		ldr	r3, [r3]
 21219 0004 D3F8E417 		ldr	r1, [r3, #2020]
3662:src/xeq.c     **** }
 21220              		.loc 1 3662 2 view .LVU5511
 21221 0008 42F20F73 		movw	r3, #9999
3661:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21222              		.loc 1 3661 32 view .LVU5512
 21223 000c C1F38D11 		ubfx	r1, r1, #6, #14
 21224              	.LVL1631:
3662:src/xeq.c     **** }
 21225              		.loc 1 3662 2 is_stmt 1 view .LVU5513
 21226 0010 0029     		cmp	r1, #0
 21227 0012 08BF     		it	eq
 21228 0014 1946     		moveq	r1, r3
 21229 0016 FFF7FEBF 		b	int_to_dn
 21230              	.LVL1632:
 21231              	.L1534:
3662:src/xeq.c     **** }
 21232              		.loc 1 3662 2 is_stmt 0 view .LVU5514
 21233 001a 00BF     		.align	2
 21234              	.L1533:
 21235 001c 00000000 		.word	main_ram
 21236              		.cfi_endproc
 21237              	.LFE204:
 21239              		.section	.rodata.op_2frac.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/cccVhVyH.s 			page 564


 21240              		.align	2
 21241              	.LC4:
 21242 0000 792F7820 		.ascii	"y/x =\000"
 21242      3D00
 21243 0006 0000     		.align	2
 21244              	.LC5:
 21245 0008 792F7820 		.ascii	"y/x \007\344<\000"
 21245      07E43C00 
 21246              		.align	2
 21247              	.LC6:
 21248 0010 792F7820 		.ascii	"y/x \007\344>\000"
 21248      07E43E00 
 21249              		.section	.text.op_2frac,"ax",%progbits
 21250              		.align	1
 21251              		.p2align 2,,3
 21252              		.global	op_2frac
 21253              		.syntax unified
 21254              		.thumb
 21255              		.thumb_func
 21256              		.fpu fpv4-sp-d16
 21258              	op_2frac:
 21259              	.LVL1633:
 21260              	.LFB205:
3665:src/xeq.c     **** 	decNumber z, n, d, t;
 21261              		.loc 1 3665 30 is_stmt 1 view -0
 21262              		.cfi_startproc
 21263              		@ args = 0, pretend = 0, frame = 144
 21264              		@ frame_needed = 0, uses_anonymous_args = 0
3666:src/xeq.c     **** 
 21265              		.loc 1 3666 2 view .LVU5516
3668:src/xeq.c     **** 		setX_int(1);
 21266              		.loc 1 3668 2 view .LVU5517
3668:src/xeq.c     **** 		setX_int(1);
 21267              		.loc 1 3668 6 is_stmt 0 view .LVU5518
 21268 0000 214B     		ldr	r3, .L1547
3665:src/xeq.c     **** 	decNumber z, n, d, t;
 21269              		.loc 1 3665 30 view .LVU5519
 21270 0002 00B5     		push	{lr}
 21271              		.cfi_def_cfa_offset 4
 21272              		.cfi_offset 14, -4
3668:src/xeq.c     **** 		setX_int(1);
 21273              		.loc 1 3668 6 view .LVU5520
 21274 0004 1B68     		ldr	r3, [r3]
 21275 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3668:src/xeq.c     **** 		setX_int(1);
 21276              		.loc 1 3668 5 view .LVU5521
 21277 000a DA07     		lsls	r2, r3, #31
3665:src/xeq.c     **** 	decNumber z, n, d, t;
 21278              		.loc 1 3665 30 view .LVU5522
 21279 000c A5B0     		sub	sp, sp, #148
 21280              		.cfi_def_cfa_offset 152
3668:src/xeq.c     **** 		setX_int(1);
 21281              		.loc 1 3668 5 view .LVU5523
 21282 000e 27D4     		bmi	.L1545
3673:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
 21283              		.loc 1 3673 2 is_stmt 1 view .LVU5524
 21284              	.LVL1634:
ARM GAS  /tmp/cccVhVyH.s 			page 565


 21285              	.LBB3122:
 21286              	.LBI3122:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 21287              		.loc 1 832 6 view .LVU5525
 21288              	.LBB3123:
 833:src/xeq.c     **** }
 21289              		.loc 1 833 2 view .LVU5526
 21290 0010 6521     		movs	r1, #101
 21291 0012 6846     		mov	r0, sp
 21292              	.LVL1635:
 833:src/xeq.c     **** }
 21293              		.loc 1 833 2 is_stmt 0 view .LVU5527
 21294 0014 FFF7FEFF 		bl	getRegister
 21295              	.LVL1636:
 833:src/xeq.c     **** }
 21296              		.loc 1 833 2 view .LVU5528
 21297              	.LBE3123:
 21298              	.LBE3122:
3674:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
 21299              		.loc 1 3674 2 is_stmt 1 view .LVU5529
 21300 0018 6A46     		mov	r2, sp
 21301 001a 12A9     		add	r1, sp, #72
 21302 001c 09A8     		add	r0, sp, #36
 21303 001e FFF7FEFF 		bl	decNumber2Fraction
 21304              	.LVL1637:
3675:src/xeq.c     **** 	if (State2.runmode) {
 21305              		.loc 1 3675 2 view .LVU5530
 21306 0022 09A9     		add	r1, sp, #36
 21307 0024 12A8     		add	r0, sp, #72
 21308 0026 FFF7FEFF 		bl	setXY
 21309              	.LVL1638:
3676:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21310              		.loc 1 3676 2 view .LVU5531
3676:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21311              		.loc 1 3676 6 is_stmt 0 view .LVU5532
 21312 002a 184B     		ldr	r3, .L1547+4
 21313 002c 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3676:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21314              		.loc 1 3676 5 view .LVU5533
 21315 002e 5B06     		lsls	r3, r3, #25
 21316 0030 02D4     		bmi	.L1546
3692:src/xeq.c     **** 
 21317              		.loc 1 3692 1 view .LVU5534
 21318 0032 25B0     		add	sp, sp, #148
 21319              		.cfi_remember_state
 21320              		.cfi_def_cfa_offset 4
 21321              		@ sp needed
 21322 0034 5DF804FB 		ldr	pc, [sp], #4
 21323              	.L1546:
 21324              		.cfi_restore_state
3677:src/xeq.c     **** 		dn_compare(&n, &t, &z);
 21325              		.loc 1 3677 3 is_stmt 1 view .LVU5535
 21326 0038 12AA     		add	r2, sp, #72
 21327 003a 09A9     		add	r1, sp, #36
 21328 003c 1BA8     		add	r0, sp, #108
 21329 003e FFF7FEFF 		bl	dn_divide
 21330              	.LVL1639:
ARM GAS  /tmp/cccVhVyH.s 			page 566


3678:src/xeq.c     **** 		if (dn_eq0(&n))
 21331              		.loc 1 3678 3 view .LVU5536
 21332 0042 6A46     		mov	r2, sp
 21333 0044 1BA9     		add	r1, sp, #108
 21334 0046 09A8     		add	r0, sp, #36
 21335 0048 FFF7FEFF 		bl	dn_compare
 21336              	.LVL1640:
3679:src/xeq.c     **** 			DispMsg = "y/x =";
 21337              		.loc 1 3679 3 view .LVU5537
3679:src/xeq.c     **** 			DispMsg = "y/x =";
 21338              		.loc 1 3679 7 is_stmt 0 view .LVU5538
 21339 004c 09A8     		add	r0, sp, #36
 21340 004e FFF7FEFF 		bl	dn_eq0
 21341              	.LVL1641:
3679:src/xeq.c     **** 			DispMsg = "y/x =";
 21342              		.loc 1 3679 6 view .LVU5539
 21343 0052 60B1     		cbz	r0, .L1539
3680:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 21344              		.loc 1 3680 4 is_stmt 1 view .LVU5540
3680:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 21345              		.loc 1 3680 12 is_stmt 0 view .LVU5541
 21346 0054 0E4B     		ldr	r3, .L1547+8
 21347 0056 0F4A     		ldr	r2, .L1547+12
 21348 0058 1A60     		str	r2, [r3]
3692:src/xeq.c     **** 
 21349              		.loc 1 3692 1 view .LVU5542
 21350 005a 25B0     		add	sp, sp, #148
 21351              		.cfi_remember_state
 21352              		.cfi_def_cfa_offset 4
 21353              		@ sp needed
 21354 005c 5DF804FB 		ldr	pc, [sp], #4
 21355              	.LVL1642:
 21356              	.L1545:
 21357              		.cfi_restore_state
3669:src/xeq.c     **** 		return;
 21358              		.loc 1 3669 3 is_stmt 1 view .LVU5543
 21359 0060 0120     		movs	r0, #1
 21360              	.LVL1643:
3669:src/xeq.c     **** 		return;
 21361              		.loc 1 3669 3 is_stmt 0 view .LVU5544
 21362 0062 0021     		movs	r1, #0
 21363 0064 FFF7FEFF 		bl	setX_int
 21364              	.LVL1644:
3670:src/xeq.c     **** 	}
 21365              		.loc 1 3670 3 is_stmt 1 view .LVU5545
3692:src/xeq.c     **** 
 21366              		.loc 1 3692 1 is_stmt 0 view .LVU5546
 21367 0068 25B0     		add	sp, sp, #148
 21368              		.cfi_remember_state
 21369              		.cfi_def_cfa_offset 4
 21370              		@ sp needed
 21371 006a 5DF804FB 		ldr	pc, [sp], #4
 21372              	.L1539:
 21373              		.cfi_restore_state
3681:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 21374              		.loc 1 3681 8 is_stmt 1 view .LVU5547
3681:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
ARM GAS  /tmp/cccVhVyH.s 			page 567


 21375              		.loc 1 3681 11 is_stmt 0 view .LVU5548
 21376 006e 9DF92C30 		ldrsb	r3, [sp, #44]
 21377 0072 002B     		cmp	r3, #0
3683:src/xeq.c     **** 		else
 21378              		.loc 1 3683 12 view .LVU5549
 21379 0074 B8BF     		it	lt
 21380 0076 084A     		ldrlt	r2, .L1547+16
 21381 0078 054B     		ldr	r3, .L1547+8
3683:src/xeq.c     **** 		else
 21382              		.loc 1 3683 4 is_stmt 1 view .LVU5550
3685:src/xeq.c     **** #else
 21383              		.loc 1 3685 4 view .LVU5551
3685:src/xeq.c     **** #else
 21384              		.loc 1 3685 12 is_stmt 0 view .LVU5552
 21385 007a A8BF     		it	ge
 21386 007c 074A     		ldrge	r2, .L1547+20
 21387 007e 1A60     		str	r2, [r3]
3692:src/xeq.c     **** 
 21388              		.loc 1 3692 1 view .LVU5553
 21389 0080 25B0     		add	sp, sp, #148
 21390              		.cfi_def_cfa_offset 4
 21391              		@ sp needed
 21392 0082 5DF804FB 		ldr	pc, [sp], #4
 21393              	.L1548:
 21394 0086 00BF     		.align	2
 21395              	.L1547:
 21396 0088 00000000 		.word	main_ram
 21397 008c 00000000 		.word	StateWhileOn
 21398 0090 00000000 		.word	DispMsg
 21399 0094 00000000 		.word	.LC4
 21400 0098 08000000 		.word	.LC5
 21401 009c 10000000 		.word	.LC6
 21402              		.cfi_endproc
 21403              	.LFE205:
 21405              		.section	.text.op_fracdenom,"ax",%progbits
 21406              		.align	1
 21407              		.p2align 2,,3
 21408              		.global	op_fracdenom
 21409              		.syntax unified
 21410              		.thumb
 21411              		.thumb_func
 21412              		.fpu fpv4-sp-d16
 21414              	op_fracdenom:
 21415              	.LVL1645:
 21416              	.LFB206:
3694:src/xeq.c     **** 	int s;
 21417              		.loc 1 3694 34 is_stmt 1 view -0
 21418              		.cfi_startproc
 21419              		@ args = 0, pretend = 0, frame = 8
 21420              		@ frame_needed = 0, uses_anonymous_args = 0
3695:src/xeq.c     **** 	unsigned long long int i;
 21421              		.loc 1 3695 2 view .LVU5555
3696:src/xeq.c     **** 
 21422              		.loc 1 3696 2 view .LVU5556
3698:src/xeq.c     **** 	if (i > 9999)
 21423              		.loc 1 3698 2 view .LVU5557
3694:src/xeq.c     **** 	int s;
ARM GAS  /tmp/cccVhVyH.s 			page 568


 21424              		.loc 1 3694 34 is_stmt 0 view .LVU5558
 21425 0000 2DE90048 		push	{fp, lr}
 21426              		.cfi_def_cfa_offset 8
 21427              		.cfi_offset 11, -8
 21428              		.cfi_offset 14, -4
 21429 0004 84B0     		sub	sp, sp, #16
 21430              		.cfi_def_cfa_offset 24
 21431              	.LVL1646:
 21432              	.LBB3124:
 21433              	.LBI3124:
1449:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 21434              		.loc 1 1449 24 is_stmt 1 view .LVU5559
 21435              	.LBB3125:
1450:src/xeq.c     **** }
 21436              		.loc 1 1450 2 view .LVU5560
1450:src/xeq.c     **** }
 21437              		.loc 1 1450 9 is_stmt 0 view .LVU5561
 21438 0006 03A9     		add	r1, sp, #12
 21439              	.LVL1647:
1450:src/xeq.c     **** }
 21440              		.loc 1 1450 9 view .LVU5562
 21441 0008 6420     		movs	r0, #100
 21442              	.LVL1648:
1450:src/xeq.c     **** }
 21443              		.loc 1 1450 9 view .LVU5563
 21444 000a FFF7FEFF 		bl	get_reg_n_int_sgn
 21445              	.LVL1649:
1450:src/xeq.c     **** }
 21446              		.loc 1 1450 9 view .LVU5564
 21447 000e 8C46     		mov	ip, r1
 21448              	.LVL1650:
1450:src/xeq.c     **** }
 21449              		.loc 1 1450 9 view .LVU5565
 21450              	.LBE3125:
 21451              	.LBE3124:
3699:src/xeq.c     **** 		UState.denom_max = 0;
 21452              		.loc 1 3699 5 view .LVU5566
 21453 0010 0021     		movs	r1, #0
 21454              	.LBB3127:
 21455              	.LBB3126:
1450:src/xeq.c     **** }
 21456              		.loc 1 1450 9 view .LVU5567
 21457 0012 8346     		mov	fp, r0
 21458              	.LVL1651:
1450:src/xeq.c     **** }
 21459              		.loc 1 1450 9 view .LVU5568
 21460              	.LBE3126:
 21461              	.LBE3127:
3699:src/xeq.c     **** 		UState.denom_max = 0;
 21462              		.loc 1 3699 2 is_stmt 1 view .LVU5569
3699:src/xeq.c     **** 		UState.denom_max = 0;
 21463              		.loc 1 3699 5 is_stmt 0 view .LVU5570
 21464 0014 6145     		cmp	r1, ip
 21465 0016 42F20F70 		movw	r0, #9999
 21466 001a 08BF     		it	eq
 21467 001c 5845     		cmpeq	r0, fp
 21468 001e 0AD2     		bcs	.L1550
ARM GAS  /tmp/cccVhVyH.s 			page 569


3700:src/xeq.c     **** 	else if (i != 1)
 21469              		.loc 1 3700 3 is_stmt 1 view .LVU5571
3700:src/xeq.c     **** 	else if (i != 1)
 21470              		.loc 1 3700 20 is_stmt 0 view .LVU5572
 21471 0020 174B     		ldr	r3, .L1554
 21472 0022 1B68     		ldr	r3, [r3]
 21473 0024 D3F8E427 		ldr	r2, [r3, #2020]
 21474 0028 6FF39312 		bfc	r2, #6, #14
 21475 002c C3F8E427 		str	r2, [r3, #2020]
3707:src/xeq.c     **** 
 21476              		.loc 1 3707 1 view .LVU5573
 21477 0030 04B0     		add	sp, sp, #16
 21478              		.cfi_remember_state
 21479              		.cfi_def_cfa_offset 8
 21480              		@ sp needed
 21481 0032 BDE80088 		pop	{fp, pc}
 21482              	.LVL1652:
 21483              	.L1550:
 21484              		.cfi_restore_state
3701:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 21485              		.loc 1 3701 7 is_stmt 1 view .LVU5574
3701:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 21486              		.loc 1 3701 10 is_stmt 0 view .LVU5575
 21487 0036 BCF1000F 		cmp	ip, #0
 21488 003a 08BF     		it	eq
 21489 003c BBF1010F 		cmpeq	fp, #1
 21490 0040 0AD0     		beq	.L1552
3702:src/xeq.c     **** 	else {
 21491              		.loc 1 3702 3 is_stmt 1 view .LVU5576
3702:src/xeq.c     **** 	else {
 21492              		.loc 1 3702 20 is_stmt 0 view .LVU5577
 21493 0042 0F4B     		ldr	r3, .L1554
 21494 0044 1B68     		ldr	r3, [r3]
 21495 0046 D3F8E417 		ldr	r1, [r3, #2020]
 21496 004a 6BF39311 		bfi	r1, fp, #6, #14
 21497 004e C3F8E417 		str	r1, [r3, #2020]
3707:src/xeq.c     **** 
 21498              		.loc 1 3707 1 view .LVU5578
 21499 0052 04B0     		add	sp, sp, #16
 21500              		.cfi_remember_state
 21501              		.cfi_def_cfa_offset 8
 21502              		@ sp needed
 21503 0054 BDE80088 		pop	{fp, pc}
 21504              	.LVL1653:
 21505              	.L1552:
 21506              		.cfi_restore_state
3704:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
 21507              		.loc 1 3704 3 is_stmt 1 view .LVU5579
 21508              	.LBB3128:
 21509              	.LBI3128:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 21510              		.loc 1 792 6 view .LVU5580
 21511              	.LBB3129:
 793:src/xeq.c     **** }
 21512              		.loc 1 793 2 view .LVU5581
 21513 0058 6421     		movs	r1, #100
 21514 005a 6C20     		movs	r0, #108
ARM GAS  /tmp/cccVhVyH.s 			page 570


 21515 005c FFF7FEFF 		bl	copyreg_n
 21516              	.LVL1654:
 21517              	.LBE3129:
 21518              	.LBE3128:
3705:src/xeq.c     **** 	}
 21519              		.loc 1 3705 3 view .LVU5582
 21520              	.LBB3130:
 21521              	.LBI3130:
1512:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 21522              		.loc 1 1512 6 view .LVU5583
 21523              	.LBB3131:
1513:src/xeq.c     **** }
 21524              		.loc 1 1513 2 view .LVU5584
 21525              	.LBE3131:
 21526              	.LBE3130:
3705:src/xeq.c     **** 	}
 21527              		.loc 1 3705 22 is_stmt 0 view .LVU5585
 21528 0060 074B     		ldr	r3, .L1554
 21529              	.LVL1655:
3705:src/xeq.c     **** 	}
 21530              		.loc 1 3705 22 view .LVU5586
 21531 0062 1B68     		ldr	r3, [r3]
 21532              	.LVL1656:
3705:src/xeq.c     **** 	}
 21533              		.loc 1 3705 22 view .LVU5587
 21534 0064 D3F8E427 		ldr	r2, [r3, #2020]
 21535              	.LBB3134:
 21536              	.LBB3132:
1513:src/xeq.c     **** }
 21537              		.loc 1 1513 2 view .LVU5588
 21538 0068 0021     		movs	r1, #0
 21539              	.LBE3132:
 21540              	.LBE3134:
3705:src/xeq.c     **** 	}
 21541              		.loc 1 3705 22 view .LVU5589
 21542 006a C2F38D12 		ubfx	r2, r2, #6, #14
 21543              	.LBB3135:
 21544              	.LBB3133:
1513:src/xeq.c     **** }
 21545              		.loc 1 1513 2 view .LVU5590
 21546 006e 92B2     		uxth	r2, r2
 21547 0070 0023     		movs	r3, #0
 21548              	.LVL1657:
1513:src/xeq.c     **** }
 21549              		.loc 1 1513 2 view .LVU5591
 21550 0072 0091     		str	r1, [sp]
 21551              	.LVL1658:
1513:src/xeq.c     **** }
 21552              		.loc 1 1513 2 view .LVU5592
 21553 0074 6420     		movs	r0, #100
 21554 0076 FFF7FEFF 		bl	set_reg_n_int_sgn
 21555              	.LVL1659:
1513:src/xeq.c     **** }
 21556              		.loc 1 1513 2 view .LVU5593
 21557              	.LBE3133:
 21558              	.LBE3135:
3707:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 571


 21559              		.loc 1 3707 1 view .LVU5594
 21560 007a 04B0     		add	sp, sp, #16
 21561              		.cfi_def_cfa_offset 8
 21562              		@ sp needed
 21563 007c BDE80088 		pop	{fp, pc}
 21564              	.LVL1660:
 21565              	.L1555:
3707:src/xeq.c     **** 
 21566              		.loc 1 3707 1 view .LVU5595
 21567              		.align	2
 21568              	.L1554:
 21569 0080 00000000 		.word	main_ram
 21570              		.cfi_endproc
 21571              	.LFE206:
 21573              		.section	.text.op_float,"ax",%progbits
 21574              		.align	1
 21575              		.p2align 2,,3
 21576              		.global	op_float
 21577              		.syntax unified
 21578              		.thumb
 21579              		.thumb_func
 21580              		.fpu fpv4-sp-d16
 21582              	op_float:
 21583              	.LVL1661:
 21584              	.LFB207:
3715:src/xeq.c     **** 
 21585              		.loc 1 3715 30 is_stmt 1 view -0
 21586              		.cfi_startproc
 21587              		@ args = 0, pretend = 0, frame = 40
 21588              		@ frame_needed = 0, uses_anonymous_args = 0
3717:src/xeq.c     **** 		int i;
 21589              		.loc 1 3717 2 view .LVU5597
3715:src/xeq.c     **** 
 21590              		.loc 1 3715 30 is_stmt 0 view .LVU5598
 21591 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 21592              		.cfi_def_cfa_offset 28
 21593              		.cfi_offset 4, -28
 21594              		.cfi_offset 5, -24
 21595              		.cfi_offset 6, -20
 21596              		.cfi_offset 7, -16
 21597              		.cfi_offset 8, -12
 21598              		.cfi_offset 9, -8
 21599              		.cfi_offset 14, -4
3717:src/xeq.c     **** 		int i;
 21600              		.loc 1 3717 6 view .LVU5599
 21601 0004 2F4F     		ldr	r7, .L1568
 21602 0006 3B68     		ldr	r3, [r7]
 21603 0008 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3717:src/xeq.c     **** 		int i;
 21604              		.loc 1 3717 5 view .LVU5600
 21605 000c D207     		lsls	r2, r2, #31
3715:src/xeq.c     **** 
 21606              		.loc 1 3715 30 view .LVU5601
 21607 000e 8BB0     		sub	sp, sp, #44
 21608              		.cfi_def_cfa_offset 72
3715:src/xeq.c     **** 
 21609              		.loc 1 3715 30 view .LVU5602
ARM GAS  /tmp/cccVhVyH.s 			page 572


 21610 0010 0646     		mov	r6, r0
3717:src/xeq.c     **** 		int i;
 21611              		.loc 1 3717 5 view .LVU5603
 21612 0012 27D5     		bpl	.L1557
 21613              	.LBB3136:
3718:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
 21614              		.loc 1 3718 3 is_stmt 1 view .LVU5604
3719:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21615              		.loc 1 3719 3 view .LVU5605
3719:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21616              		.loc 1 3719 33 is_stmt 0 view .LVU5606
 21617 0014 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
3719:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21618              		.loc 1 3719 26 view .LVU5607
 21619 0018 2B4A     		ldr	r2, .L1568+4
3719:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21620              		.loc 1 3719 33 view .LVU5608
 21621 001a C3F3C003 		ubfx	r3, r3, #3, #1
3720:src/xeq.c     **** 			if (mask & 1) {
 21622              		.loc 1 3720 10 view .LVU5609
 21623 001e 6424     		movs	r4, #100
3719:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21624              		.loc 1 3719 7 view .LVU5610
 21625 0020 32F81350 		ldrh	r5, [r2, r3, lsl #1]
 21626              	.LVL1662:
3720:src/xeq.c     **** 			if (mask & 1) {
 21627              		.loc 1 3720 3 is_stmt 1 view .LVU5611
3720:src/xeq.c     **** 			if (mask & 1) {
 21628              		.loc 1 3720 22 view .LVU5612
 21629              	.LBB3137:
 21630              	.LBB3138:
1122:src/xeq.c     **** }
 21631              		.loc 1 1122 24 is_stmt 0 view .LVU5613
 21632 0024 44F20108 		movw	r8, #16385
 21633 0028 0CE0     		b	.L1560
 21634              	.LVL1663:
 21635              	.L1558:
1122:src/xeq.c     **** }
 21636              		.loc 1 1122 24 view .LVU5614
 21637 002a 3B68     		ldr	r3, [r7]
 21638 002c B3F8E837 		ldrh	r3, [r3, #2024]
 21639              	.LBE3138:
 21640              	.LBE3137:
3725:src/xeq.c     **** 				// expand the other registers which have been left
 21641              		.loc 1 3725 12 view .LVU5615
 21642 0030 08EA0303 		and	r3, r8, r3
 21643 0034 B3F5804F 		cmp	r3, #16384
 21644 0038 32D0     		beq	.L1567
 21645              	.L1559:
3720:src/xeq.c     **** 			if (mask & 1) {
 21646              		.loc 1 3720 37 is_stmt 1 discriminator 2 view .LVU5616
 21647 003a 0134     		adds	r4, r4, #1
 21648              	.LVL1664:
3720:src/xeq.c     **** 			if (mask & 1) {
 21649              		.loc 1 3720 3 is_stmt 0 discriminator 2 view .LVU5617
 21650 003c 702C     		cmp	r4, #112
3720:src/xeq.c     **** 			if (mask & 1) {
ARM GAS  /tmp/cccVhVyH.s 			page 573


 21651              		.loc 1 3720 47 discriminator 2 view .LVU5618
 21652 003e 4FEA6505 		asr	r5, r5, #1
 21653              	.LVL1665:
3720:src/xeq.c     **** 			if (mask & 1) {
 21654              		.loc 1 3720 22 is_stmt 1 discriminator 2 view .LVU5619
3720:src/xeq.c     **** 			if (mask & 1) {
 21655              		.loc 1 3720 3 is_stmt 0 discriminator 2 view .LVU5620
 21656 0042 0FD0     		beq	.L1557
 21657              	.LVL1666:
 21658              	.L1560:
3721:src/xeq.c     **** 				// register belongs to stack
 21659              		.loc 1 3721 4 is_stmt 1 view .LVU5621
3725:src/xeq.c     **** 				// expand the other registers which have been left
 21660              		.loc 1 3725 9 view .LVU5622
 21661              	.LBB3140:
 21662              	.LBI3137:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 21663              		.loc 1 1121 5 view .LVU5623
 21664              	.LBB3139:
1122:src/xeq.c     **** }
 21665              		.loc 1 1122 2 view .LVU5624
 21666              	.LBE3139:
 21667              	.LBE3140:
3721:src/xeq.c     **** 				// register belongs to stack
 21668              		.loc 1 3721 7 is_stmt 0 view .LVU5625
 21669 0044 EB07     		lsls	r3, r5, #31
 21670 0046 F0D5     		bpl	.L1558
3723:src/xeq.c     **** 			}
 21671              		.loc 1 3723 5 is_stmt 1 view .LVU5626
 21672 0048 A6F1DC02 		sub	r2, r6, #220
 21673 004c B2FA82F2 		clz	r2, r2
 21674 0050 2146     		mov	r1, r4
 21675 0052 2046     		mov	r0, r4
 21676 0054 5209     		lsrs	r2, r2, #5
3720:src/xeq.c     **** 			if (mask & 1) {
 21677              		.loc 1 3720 37 is_stmt 0 view .LVU5627
 21678 0056 0134     		adds	r4, r4, #1
 21679              	.LVL1667:
3723:src/xeq.c     **** 			}
 21680              		.loc 1 3723 5 view .LVU5628
 21681 0058 FFF7FEFF 		bl	register_from_int
 21682              	.LVL1668:
3720:src/xeq.c     **** 			if (mask & 1) {
 21683              		.loc 1 3720 37 is_stmt 1 view .LVU5629
3720:src/xeq.c     **** 			if (mask & 1) {
 21684              		.loc 1 3720 3 is_stmt 0 view .LVU5630
 21685 005c 702C     		cmp	r4, #112
3720:src/xeq.c     **** 			if (mask & 1) {
 21686              		.loc 1 3720 47 view .LVU5631
 21687 005e 4FEA6505 		asr	r5, r5, #1
 21688              	.LVL1669:
3720:src/xeq.c     **** 			if (mask & 1) {
 21689              		.loc 1 3720 22 is_stmt 1 view .LVU5632
3720:src/xeq.c     **** 			if (mask & 1) {
 21690              		.loc 1 3720 3 is_stmt 0 view .LVU5633
 21691 0062 EFD1     		bne	.L1560
 21692              	.LVL1670:
ARM GAS  /tmp/cccVhVyH.s 			page 574


 21693              	.L1557:
3720:src/xeq.c     **** 			if (mask & 1) {
 21694              		.loc 1 3720 3 view .LVU5634
 21695              	.LBE3136:
3732:src/xeq.c     **** 		UState.fract = 0;
 21696              		.loc 1 3732 2 is_stmt 1 view .LVU5635
3732:src/xeq.c     **** 		UState.fract = 0;
 21697              		.loc 1 3732 25 is_stmt 0 view .LVU5636
 21698 0064 06F12403 		add	r3, r6, #36
3732:src/xeq.c     **** 		UState.fract = 0;
 21699              		.loc 1 3732 5 view .LVU5637
 21700 0068 DBB2     		uxtb	r3, r3
 21701 006a 012B     		cmp	r3, #1
 21702 006c 10D9     		bls	.L1561
3733:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21703              		.loc 1 3733 3 is_stmt 1 view .LVU5638
3733:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21704              		.loc 1 3733 16 is_stmt 0 view .LVU5639
 21705 006e 3A68     		ldr	r2, [r7]
3734:src/xeq.c     **** 	}
 21706              		.loc 1 3734 14 view .LVU5640
 21707 0070 164B     		ldr	r3, .L1568+8
3733:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21708              		.loc 1 3733 16 view .LVU5641
 21709 0072 92F8E617 		ldrb	r1, [r2, #2022]	@ zero_extendqisi2
 21710 0076 6FF34511 		bfc	r1, #5, #1
 21711 007a 82F8E617 		strb	r1, [r2, #2022]
3734:src/xeq.c     **** 	}
 21712              		.loc 1 3734 3 is_stmt 1 view .LVU5642
3734:src/xeq.c     **** 	}
 21713              		.loc 1 3734 35 is_stmt 0 view .LVU5643
 21714 007e A6F15C06 		sub	r6, #92
3734:src/xeq.c     **** 	}
 21715              		.loc 1 3734 14 view .LVU5644
 21716 0082 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
3734:src/xeq.c     **** 	}
 21717              		.loc 1 3734 35 view .LVU5645
 21718 0084 B6FA86F6 		clz	r6, r6
 21719 0088 7609     		lsrs	r6, r6, #5
3734:src/xeq.c     **** 	}
 21720              		.loc 1 3734 14 view .LVU5646
 21721 008a 66F30002 		bfi	r2, r6, #0, #1
 21722 008e DA75     		strb	r2, [r3, #23]
 21723              	.L1561:
3736:src/xeq.c     **** }
 21724              		.loc 1 3736 2 is_stmt 1 view .LVU5647
3736:src/xeq.c     **** }
 21725              		.loc 1 3736 14 is_stmt 0 view .LVU5648
 21726 0090 6420     		movs	r0, #100
 21727 0092 FFF7FEFF 		bl	get_reg_n
 21728              	.LVL1671:
3736:src/xeq.c     **** }
 21729              		.loc 1 3736 12 view .LVU5649
 21730 0096 0E4B     		ldr	r3, .L1568+12
 21731 0098 1860     		str	r0, [r3]
3737:src/xeq.c     **** 
 21732              		.loc 1 3737 1 view .LVU5650
ARM GAS  /tmp/cccVhVyH.s 			page 575


 21733 009a 0BB0     		add	sp, sp, #44
 21734              		.cfi_remember_state
 21735              		.cfi_def_cfa_offset 28
 21736              		@ sp needed
 21737 009c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 21738              	.LVL1672:
 21739              	.L1567:
 21740              		.cfi_restore_state
 21741              	.LBB3143:
3728:src/xeq.c     **** 			}
 21742              		.loc 1 3728 5 is_stmt 1 view .LVU5651
3728:src/xeq.c     **** 			}
 21743              		.loc 1 3728 29 is_stmt 0 view .LVU5652
 21744 00a0 2046     		mov	r0, r4
 21745 00a2 FFF7FEFF 		bl	get_reg_n
 21746              	.LVL1673:
3728:src/xeq.c     **** 			}
 21747              		.loc 1 3728 47 view .LVU5653
 21748 00a6 3B68     		ldr	r3, [r7]
 21749 00a8 03F58663 		add	r3, r3, #1072
3728:src/xeq.c     **** 			}
 21750              		.loc 1 3728 29 view .LVU5654
 21751 00ac 8146     		mov	r9, r0
 21752              	.LVL1674:
 21753              	.LBB3141:
 21754              	.LBI3141:
 654:src/xeq.c     **** 	decNumber temp;
 21755              		.loc 1 654 6 is_stmt 1 view .LVU5655
 21756              	.LBB3142:
 655:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 21757              		.loc 1 655 2 view .LVU5656
 656:src/xeq.c     **** }
 21758              		.loc 1 656 2 view .LVU5657
 656:src/xeq.c     **** }
 21759              		.loc 1 656 27 is_stmt 0 view .LVU5658
 21760 00ae 01A9     		add	r1, sp, #4
 21761 00b0 03EBC400 		add	r0, r3, r4, lsl #3
 21762              	.LVL1675:
 656:src/xeq.c     **** }
 21763              		.loc 1 656 27 view .LVU5659
 21764 00b4 FFF7FEFF 		bl	decimal64ToNumber
 21765              	.LVL1676:
 656:src/xeq.c     **** }
 21766              		.loc 1 656 27 view .LVU5660
 21767 00b8 0146     		mov	r1, r0
 656:src/xeq.c     **** }
 21768              		.loc 1 656 2 view .LVU5661
 21769 00ba 4846     		mov	r0, r9
 21770 00bc FFF7FEFF 		bl	packed128_from_number
 21771              	.LVL1677:
 657:src/xeq.c     **** 
 21772              		.loc 1 657 1 view .LVU5662
 21773 00c0 BBE7     		b	.L1559
 21774              	.L1569:
 21775 00c2 00BF     		.align	2
 21776              	.L1568:
 21777 00c4 00000000 		.word	main_ram
ARM GAS  /tmp/cccVhVyH.s 			page 576


 21778 00c8 00000000 		.word	.LANCHOR3
 21779 00cc 00000000 		.word	StateWhileOn
 21780 00d0 00000000 		.word	StackBase
 21781              	.LBE3142:
 21782              	.LBE3141:
 21783              	.LBE3143:
 21784              		.cfi_endproc
 21785              	.LFE207:
 21787              		.section	.text.cmddisp,"ax",%progbits
 21788              		.align	1
 21789              		.p2align 2,,3
 21790              		.global	cmddisp
 21791              		.syntax unified
 21792              		.thumb
 21793              		.thumb_func
 21794              		.fpu fpv4-sp-d16
 21796              	cmddisp:
 21797              	.LVL1678:
 21798              	.LFB173:
2458:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 21799              		.loc 1 2458 46 is_stmt 1 view -0
 21800              		.cfi_startproc
 21801              		@ args = 0, pretend = 0, frame = 0
 21802              		@ frame_needed = 0, uses_anonymous_args = 0
 21803              		@ link register save eliminated.
2460:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
 21804              		.loc 1 2460 2 view .LVU5664
2461:src/xeq.c     **** #ifdef DM42
 21805              		.loc 1 2461 2 view .LVU5665
 21806              	.LBB3152:
 21807              	.LBI3152:
2426:src/xeq.c     **** {
 21808              		.loc 1 2426 5 view .LVU5666
 21809              	.LBB3153:
2428:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21810              		.loc 1 2428 2 view .LVU5667
2428:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21811              		.loc 1 2428 17 is_stmt 0 view .LVU5668
 21812 0000 2E4B     		ldr	r3, .L1590
 21813 0002 1A68     		ldr	r2, [r3]
 21814              	.LBE3153:
 21815              	.LBE3152:
2458:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 21816              		.loc 1 2458 46 view .LVU5669
 21817 0004 10B4     		push	{r4}
 21818              		.cfi_def_cfa_offset 4
 21819              		.cfi_offset 4, -4
 21820              	.LBB3155:
 21821              	.LBB3154:
2429:src/xeq.c     **** 
 21822              		.loc 1 2429 23 view .LVU5670
 21823 0006 92F8E747 		ldrb	r4, [r2, #2023]	@ zero_extendqisi2
2428:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21824              		.loc 1 2428 23 view .LVU5671
 21825 000a 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
2431:src/xeq.c     **** 		dispdigs -= 12;
 21826              		.loc 1 2431 5 view .LVU5672
ARM GAS  /tmp/cccVhVyH.s 			page 577


 21827 000e 04F00F04 		and	r4, r4, #15
 21828 0012 0B2C     		cmp	r4, #11
2428:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21829              		.loc 1 2428 6 view .LVU5673
 21830 0014 4FEA9313 		lsr	r3, r3, #6
 21831              	.LVL1679:
2429:src/xeq.c     **** 
 21832              		.loc 1 2429 2 is_stmt 1 view .LVU5674
2431:src/xeq.c     **** 		dispdigs -= 12;
 21833              		.loc 1 2431 2 view .LVU5675
2431:src/xeq.c     **** 		dispdigs -= 12;
 21834              		.loc 1 2431 5 is_stmt 0 view .LVU5676
 21835 0018 04D9     		bls	.L1571
2432:src/xeq.c     **** 		dispmode += 4;
 21836              		.loc 1 2432 3 is_stmt 1 view .LVU5677
 21837              	.LVL1680:
2433:src/xeq.c     **** 		if (dispmode >= 6) {
 21838              		.loc 1 2433 3 view .LVU5678
2433:src/xeq.c     **** 		if (dispmode >= 6) {
 21839              		.loc 1 2433 12 is_stmt 0 view .LVU5679
 21840 001a 1C1D     		adds	r4, r3, #4
 21841              	.LVL1681:
2434:src/xeq.c     **** 			dispmode -= 2;
 21842              		.loc 1 2434 3 is_stmt 1 view .LVU5680
2434:src/xeq.c     **** 			dispmode -= 2;
 21843              		.loc 1 2434 6 is_stmt 0 view .LVU5681
 21844 001c 052C     		cmp	r4, #5
2435:src/xeq.c     **** 			dispdigs += 4;
 21845              		.loc 1 2435 4 is_stmt 1 view .LVU5682
2435:src/xeq.c     **** 			dispdigs += 4;
 21846              		.loc 1 2435 13 is_stmt 0 view .LVU5683
 21847 001e CCBF     		ite	gt
 21848 0020 0233     		addgt	r3, r3, #2
 21849              	.LVL1682:
2436:src/xeq.c     **** 		}
 21850              		.loc 1 2436 4 is_stmt 1 view .LVU5684
2436:src/xeq.c     **** 		}
 21851              		.loc 1 2436 4 is_stmt 0 view .LVU5685
 21852 0022 2346     		movle	r3, r4
 21853              	.LVL1683:
 21854              	.L1571:
2439:src/xeq.c     **** 	return dispmode;
 21855              		.loc 1 2439 2 is_stmt 1 view .LVU5686
2440:src/xeq.c     **** }
 21856              		.loc 1 2440 2 view .LVU5687
2440:src/xeq.c     **** }
 21857              		.loc 1 2440 2 is_stmt 0 view .LVU5688
 21858              	.LBE3154:
 21859              	.LBE3155:
2463:src/xeq.c     **** 	case RARG_STD:
 21860              		.loc 1 2463 2 is_stmt 1 view .LVU5689
 21861 0024 4F29     		cmp	r1, #79
 21862 0026 1DD8     		bhi	.L1572
 21863 0028 4B29     		cmp	r1, #75
 21864 002a 3ED9     		bls	.L1573
 21865 002c 4D39     		subs	r1, r1, #77
 21866              	.LVL1684:
ARM GAS  /tmp/cccVhVyH.s 			page 578


2463:src/xeq.c     **** 	case RARG_STD:
 21867              		.loc 1 2463 2 is_stmt 0 view .LVU5690
 21868 002e 0229     		cmp	r1, #2
 21869 0030 41D8     		bhi	.L1574
 21870 0032 DFE801F0 		tbb	[pc, r1]
 21871              	.LVL1685:
 21872              	.L1576:
 21873 0036 15       		.byte	(.L1578-.L1576)/2
 21874 0037 02       		.byte	(.L1585-.L1576)/2
 21875 0038 38       		.byte	(.L1575-.L1576)/2
 21876 0039 00       		.p2align 1
 21877              	.L1585:
2463:src/xeq.c     **** 	case RARG_STD:
 21878              		.loc 1 2463 2 view .LVU5691
 21879 003a 0223     		movs	r3, #2
 21880              	.L1577:
2496:src/xeq.c     **** #else
 21881              		.loc 1 2496 2 is_stmt 1 view .LVU5692
 21882 003c 0146     		mov	r1, r0
 21883              	.LVL1686:
 21884              	.LBB3156:
 21885              	.LBI3156:
2443:src/xeq.c     **** {
 21886              		.loc 1 2443 6 view .LVU5693
 21887              	.LBB3157:
2445:src/xeq.c     **** 		dispmode -= 4;
 21888              		.loc 1 2445 2 view .LVU5694
 21889              	.L1582:
2453:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21890              		.loc 1 2453 2 view .LVU5695
2454:src/xeq.c     **** }
 21891              		.loc 1 2454 2 view .LVU5696
2453:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21892              		.loc 1 2453 18 is_stmt 0 view .LVU5697
 21893 003e B2F8E607 		ldrh	r0, [r2, #2022]
 21894              	.LVL1687:
2453:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21895              		.loc 1 2453 18 view .LVU5698
 21896              	.LBE3157:
 21897              	.LBE3156:
2503:src/xeq.c     **** 
 21898              		.loc 1 2503 1 view .LVU5699
 21899 0042 5DF8044B 		ldr	r4, [sp], #4
 21900              		.cfi_remember_state
 21901              		.cfi_restore 4
 21902              		.cfi_def_cfa_offset 0
 21903              	.LBB3161:
 21904              	.LBB3158:
2453:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21905              		.loc 1 2453 18 view .LVU5700
 21906 0046 01F00F01 		and	r1, r1, #15
 21907              	.LVL1688:
2453:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21908              		.loc 1 2453 18 view .LVU5701
 21909 004a 9B01     		lsls	r3, r3, #6
 21910 004c 43EA0123 		orr	r3, r3, r1, lsl #8
 21911 0050 20F47C61 		bic	r1, r0, #4032
ARM GAS  /tmp/cccVhVyH.s 			page 579


 21912 0054 0B43     		orrs	r3, r3, r1
 21913 0056 A2F8E637 		strh	r3, [r2, #2022]	@ movhi
2453:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21914              		.loc 1 2453 18 view .LVU5702
 21915              	.LBE3158:
 21916              	.LBE3161:
2502:src/xeq.c     **** }
 21917              		.loc 1 2502 2 is_stmt 1 view .LVU5703
 21918 005a 5B20     		movs	r0, #91
 21919 005c FFF7FEBF 		b	op_float
 21920              	.LVL1689:
 21921              	.L1578:
 21922              		.cfi_restore_state
2463:src/xeq.c     **** 	case RARG_STD:
 21923              		.loc 1 2463 2 is_stmt 0 view .LVU5704
 21924 0060 0123     		movs	r3, #1
 21925 0062 EBE7     		b	.L1577
 21926              	.LVL1690:
 21927              	.L1572:
2463:src/xeq.c     **** 	case RARG_STD:
 21928              		.loc 1 2463 2 view .LVU5705
 21929 0064 9C29     		cmp	r1, #156
 21930 0066 0CD0     		beq	.L1586
 21931 0068 9D29     		cmp	r1, #157
 21932 006a 08BF     		it	eq
 21933 006c 0523     		moveq	r3, #5
 21934              	.LVL1691:
2463:src/xeq.c     **** 	case RARG_STD:
 21935              		.loc 1 2463 2 view .LVU5706
 21936 006e 1CD1     		bne	.L1573
 21937              	.LVL1692:
 21938              	.L1579:
2484:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21939              		.loc 1 2484 54 discriminator 1 view .LVU5707
 21940 0070 0728     		cmp	r0, #7
 21941 0072 0AD8     		bhi	.L1589
 21942              	.L1580:
2496:src/xeq.c     **** #else
 21943              		.loc 1 2496 2 is_stmt 1 view .LVU5708
 21944              	.LVL1693:
 21945              	.LBB3162:
2443:src/xeq.c     **** {
 21946              		.loc 1 2443 6 view .LVU5709
 21947              	.LBB3159:
2445:src/xeq.c     **** 		dispmode -= 4;
 21948              		.loc 1 2445 2 view .LVU5710
2446:src/xeq.c     **** 		dispdigs += 12;
 21949              		.loc 1 2446 3 view .LVU5711
2447:src/xeq.c     **** 		if (dispdigs >= 16) {
 21950              		.loc 1 2447 3 view .LVU5712
2447:src/xeq.c     **** 		if (dispdigs >= 16) {
 21951              		.loc 1 2447 12 is_stmt 0 view .LVU5713
 21952 0074 00F10C01 		add	r1, r0, #12
 21953              	.LVL1694:
2448:src/xeq.c     **** 			dispdigs -= 4;
 21954              		.loc 1 2448 3 is_stmt 1 view .LVU5714
2448:src/xeq.c     **** 			dispdigs -= 4;
ARM GAS  /tmp/cccVhVyH.s 			page 580


 21955              		.loc 1 2448 6 is_stmt 0 view .LVU5715
 21956 0078 0F29     		cmp	r1, #15
 21957 007a 0EDC     		bgt	.L1583
2448:src/xeq.c     **** 			dispdigs -= 4;
 21958              		.loc 1 2448 6 view .LVU5716
 21959 007c 03F00303 		and	r3, r3, #3
 21960              	.LVL1695:
2448:src/xeq.c     **** 			dispdigs -= 4;
 21961              		.loc 1 2448 6 view .LVU5717
 21962 0080 DDE7     		b	.L1582
 21963              	.LVL1696:
 21964              	.L1586:
2448:src/xeq.c     **** 			dispdigs -= 4;
 21965              		.loc 1 2448 6 view .LVU5718
 21966              	.LBE3159:
 21967              	.LBE3162:
2484:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21968              		.loc 1 2484 54 view .LVU5719
 21969 0082 0728     		cmp	r0, #7
2477:src/xeq.c     **** 	  break;
 21970              		.loc 1 2477 13 view .LVU5720
 21971 0084 4FF00403 		mov	r3, #4
 21972              	.LVL1697:
2484:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21973              		.loc 1 2484 54 view .LVU5721
 21974 0088 F4D9     		bls	.L1580
 21975              	.LVL1698:
 21976              	.L1589:
2485:src/xeq.c     **** 	  return;
 21977              		.loc 1 2485 4 is_stmt 1 view .LVU5722
 21978              	.LBB3163:
 21979              	.LBI3163:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21980              		.loc 1 546 5 view .LVU5723
 21981              	.LBB3164:
 547:src/xeq.c     **** 		Error = e;
 21982              		.loc 1 547 2 view .LVU5724
 547:src/xeq.c     **** 		Error = e;
 21983              		.loc 1 547 12 is_stmt 0 view .LVU5725
 21984 008a 0D4B     		ldr	r3, .L1590+4
 21985              	.LVL1699:
 547:src/xeq.c     **** 		Error = e;
 21986              		.loc 1 547 5 view .LVU5726
 21987 008c 1A68     		ldr	r2, [r3]
 21988 008e 0AB9     		cbnz	r2, .L1570
 21989              	.LVL1700:
 21990              	.LBB3165:
 21991              	.LBI3165:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21992              		.loc 1 546 5 is_stmt 1 view .LVU5727
 21993              	.LBB3166:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 21994              		.loc 1 548 3 view .LVU5728
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 21995              		.loc 1 548 9 is_stmt 0 view .LVU5729
 21996 0090 0822     		movs	r2, #8
 21997 0092 1A60     		str	r2, [r3]
ARM GAS  /tmp/cccVhVyH.s 			page 581


 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 21998              		.loc 1 549 3 is_stmt 1 view .LVU5730
 21999              	.LVL1701:
 22000              	.L1570:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 22001              		.loc 1 549 3 is_stmt 0 view .LVU5731
 22002              	.LBE3166:
 22003              	.LBE3165:
 22004              	.LBE3164:
 22005              	.LBE3163:
2503:src/xeq.c     **** 
 22006              		.loc 1 2503 1 view .LVU5732
 22007 0094 5DF8044B 		ldr	r4, [sp], #4
 22008              		.cfi_remember_state
 22009              		.cfi_restore 4
 22010              		.cfi_def_cfa_offset 0
 22011 0098 7047     		bx	lr
 22012              	.LVL1702:
 22013              	.L1583:
 22014              		.cfi_restore_state
 22015              	.LBB3167:
 22016              	.LBB3160:
2449:src/xeq.c     **** 			dispmode += 2;
 22017              		.loc 1 2449 4 is_stmt 1 view .LVU5733
2450:src/xeq.c     **** 		}
 22018              		.loc 1 2450 13 is_stmt 0 view .LVU5734
 22019 009a 023B     		subs	r3, r3, #2
 22020              	.LVL1703:
2450:src/xeq.c     **** 		}
 22021              		.loc 1 2450 13 view .LVU5735
 22022 009c 03F00303 		and	r3, r3, #3
 22023              	.LVL1704:
2449:src/xeq.c     **** 			dispmode += 2;
 22024              		.loc 1 2449 13 view .LVU5736
 22025 00a0 00F10801 		add	r1, r0, #8
 22026              	.LVL1705:
2450:src/xeq.c     **** 		}
 22027              		.loc 1 2450 4 is_stmt 1 view .LVU5737
2450:src/xeq.c     **** 		}
 22028              		.loc 1 2450 4 is_stmt 0 view .LVU5738
 22029 00a4 CBE7     		b	.L1582
 22030              	.LVL1706:
 22031              	.L1575:
2450:src/xeq.c     **** 		}
 22032              		.loc 1 2450 4 view .LVU5739
 22033              	.LBE3160:
 22034              	.LBE3167:
2474:src/xeq.c     **** 	  break;
 22035              		.loc 1 2474 4 is_stmt 1 view .LVU5740
2475:src/xeq.c     **** 	case RARG_SIG:
 22036              		.loc 1 2475 4 view .LVU5741
 22037 00a6 0323     		movs	r3, #3
 22038 00a8 C8E7     		b	.L1577
 22039              	.LVL1707:
 22040              	.L1573:
2482:src/xeq.c     **** 	}
 22041              		.loc 1 2482 10 view .LVU5742
ARM GAS  /tmp/cccVhVyH.s 			page 582


2484:src/xeq.c     **** 	  report_err(ERR_RANGE);
 22042              		.loc 1 2484 2 view .LVU5743
2484:src/xeq.c     **** 	  report_err(ERR_RANGE);
 22043              		.loc 1 2484 28 is_stmt 0 view .LVU5744
 22044 00aa 191F     		subs	r1, r3, #4
 22045              	.LVL1708:
2484:src/xeq.c     **** 	  report_err(ERR_RANGE);
 22046              		.loc 1 2484 5 view .LVU5745
 22047 00ac 0129     		cmp	r1, #1
 22048 00ae DFD9     		bls	.L1579
 22049 00b0 03F00303 		and	r3, r3, #3
 22050              	.LVL1709:
2484:src/xeq.c     **** 	  report_err(ERR_RANGE);
 22051              		.loc 1 2484 5 view .LVU5746
 22052 00b4 C2E7     		b	.L1577
 22053              	.LVL1710:
 22054              	.L1574:
2463:src/xeq.c     **** 	case RARG_STD:
 22055              		.loc 1 2463 2 view .LVU5747
 22056 00b6 0023     		movs	r3, #0
 22057 00b8 C0E7     		b	.L1577
 22058              	.L1591:
 22059 00ba 00BF     		.align	2
 22060              	.L1590:
 22061 00bc 00000000 		.word	main_ram
 22062 00c0 00000000 		.word	Error
 22063              		.cfi_endproc
 22064              	.LFE173:
 22066              		.section	.text.set_int_base,"ax",%progbits
 22067              		.align	1
 22068              		.p2align 2,,3
 22069              		.global	set_int_base
 22070              		.syntax unified
 22071              		.thumb
 22072              		.thumb_func
 22073              		.fpu fpv4-sp-d16
 22075              	set_int_base:
 22076              	.LVL1711:
 22077              	.LFB210:
3765:src/xeq.c     **** 	if (arg < 2) {
 22078              		.loc 1 3765 51 is_stmt 1 view -0
 22079              		.cfi_startproc
 22080              		@ args = 0, pretend = 0, frame = 0
 22081              		@ frame_needed = 0, uses_anonymous_args = 0
3766:src/xeq.c     **** 		if (arg == 0)
 22082              		.loc 1 3766 2 view .LVU5749
3766:src/xeq.c     **** 		if (arg == 0)
 22083              		.loc 1 3766 5 is_stmt 0 view .LVU5750
 22084 0000 0128     		cmp	r0, #1
3765:src/xeq.c     **** 	if (arg < 2) {
 22085              		.loc 1 3765 51 view .LVU5751
 22086 0002 08B5     		push	{r3, lr}
 22087              		.cfi_def_cfa_offset 8
 22088              		.cfi_offset 3, -8
 22089              		.cfi_offset 14, -4
3766:src/xeq.c     **** 		if (arg == 0)
 22090              		.loc 1 3766 5 view .LVU5752
ARM GAS  /tmp/cccVhVyH.s 			page 583


 22091 0004 0BD9     		bls	.L1597
3772:src/xeq.c     **** }
 22092              		.loc 1 3772 3 is_stmt 1 view .LVU5753
 22093              	.LVL1712:
 22094              	.LBB3168:
 22095              	.LBI3168:
3759:src/xeq.c     **** 	UState.int_base = b - 1;
 22096              		.loc 1 3759 13 view .LVU5754
 22097              	.LBB3169:
3760:src/xeq.c     **** 	if (!is_intmode())
 22098              		.loc 1 3760 2 view .LVU5755
 22099 0006 114B     		ldr	r3, .L1599
 22100 0008 1A68     		ldr	r2, [r3]
3760:src/xeq.c     **** 	if (!is_intmode())
 22101              		.loc 1 3760 18 is_stmt 0 view .LVU5756
 22102 000a 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3760:src/xeq.c     **** 	if (!is_intmode())
 22103              		.loc 1 3760 22 view .LVU5757
 22104 000e 0138     		subs	r0, r0, #1
 22105              	.LVL1713:
3760:src/xeq.c     **** 	if (!is_intmode())
 22106              		.loc 1 3760 18 view .LVU5758
 22107 0010 60F30713 		bfi	r3, r0, #4, #4
 22108 0014 82F8E837 		strb	r3, [r2, #2024]
3761:src/xeq.c     **** 		switch_to_int();
 22109              		.loc 1 3761 2 is_stmt 1 view .LVU5759
3761:src/xeq.c     **** 		switch_to_int();
 22110              		.loc 1 3761 5 is_stmt 0 view .LVU5760
 22111 0018 DB07     		lsls	r3, r3, #31
 22112 001a 12D5     		bpl	.L1598
 22113              	.LBE3169:
 22114              	.LBE3168:
3773:src/xeq.c     **** 
 22115              		.loc 1 3773 1 view .LVU5761
 22116 001c 08BD     		pop	{r3, pc}
 22117              	.LVL1714:
 22118              	.L1597:
3767:src/xeq.c     **** 			op_float(OP_FLOAT);
 22119              		.loc 1 3767 3 is_stmt 1 view .LVU5762
3767:src/xeq.c     **** 			op_float(OP_FLOAT);
 22120              		.loc 1 3767 6 is_stmt 0 view .LVU5763
 22121 001e 20B9     		cbnz	r0, .L1594
3768:src/xeq.c     **** 		else
 22122              		.loc 1 3768 4 is_stmt 1 view .LVU5764
3773:src/xeq.c     **** 
 22123              		.loc 1 3773 1 is_stmt 0 view .LVU5765
 22124 0020 BDE80840 		pop	{r3, lr}
 22125              		.cfi_remember_state
 22126              		.cfi_restore 14
 22127              		.cfi_restore 3
 22128              		.cfi_def_cfa_offset 0
3768:src/xeq.c     **** 		else
 22129              		.loc 1 3768 4 view .LVU5766
 22130 0024 5B20     		movs	r0, #91
 22131              	.LVL1715:
3768:src/xeq.c     **** 		else
 22132              		.loc 1 3768 4 view .LVU5767
ARM GAS  /tmp/cccVhVyH.s 			page 584


 22133 0026 FFF7FEBF 		b	op_float
 22134              	.LVL1716:
 22135              	.L1594:
 22136              		.cfi_restore_state
3770:src/xeq.c     **** 	} else
 22137              		.loc 1 3770 4 is_stmt 1 view .LVU5768
 22138              	.LBB3172:
 22139              	.LBI3172:
3776:src/xeq.c     **** 	op_float(OP_FLOAT);
 22140              		.loc 1 3776 6 view .LVU5769
 22141              	.LBB3173:
3777:src/xeq.c     **** 	UState.fract = 1;
 22142              		.loc 1 3777 2 view .LVU5770
 22143 002a 5B20     		movs	r0, #91
 22144              	.LVL1717:
3777:src/xeq.c     **** 	UState.fract = 1;
 22145              		.loc 1 3777 2 is_stmt 0 view .LVU5771
 22146 002c FFF7FEFF 		bl	op_float
 22147              	.LVL1718:
3778:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22148              		.loc 1 3778 2 is_stmt 1 view .LVU5772
3778:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22149              		.loc 1 3778 15 is_stmt 0 view .LVU5773
 22150 0030 064B     		ldr	r3, .L1599
 22151 0032 1A68     		ldr	r2, [r3]
 22152 0034 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 22153 0038 43F02003 		orr	r3, r3, #32
 22154 003c 82F8E637 		strb	r3, [r2, #2022]
3779:src/xeq.c     **** 		UState.improperfrac = 1;
 22155              		.loc 1 3779 2 is_stmt 1 view .LVU5774
3781:src/xeq.c     **** 		UState.improperfrac = 0;
 22156              		.loc 1 3781 7 view .LVU5775
 22157              	.LBE3173:
 22158              	.LBE3172:
3773:src/xeq.c     **** 
 22159              		.loc 1 3773 1 is_stmt 0 view .LVU5776
 22160 0040 08BD     		pop	{r3, pc}
 22161              	.LVL1719:
 22162              	.L1598:
 22163              	.LBB3174:
 22164              	.LBB3170:
3762:src/xeq.c     **** }
 22165              		.loc 1 3762 3 is_stmt 1 view .LVU5777
 22166              	.LBE3170:
 22167              	.LBE3174:
3773:src/xeq.c     **** 
 22168              		.loc 1 3773 1 is_stmt 0 view .LVU5778
 22169 0042 BDE80840 		pop	{r3, lr}
 22170              		.cfi_restore 14
 22171              		.cfi_restore 3
 22172              		.cfi_def_cfa_offset 0
 22173              	.LBB3175:
 22174              	.LBB3171:
3762:src/xeq.c     **** }
 22175              		.loc 1 3762 3 view .LVU5779
 22176 0046 FFF7FEBF 		b	switch_to_int
 22177              	.LVL1720:
ARM GAS  /tmp/cccVhVyH.s 			page 585


 22178              	.L1600:
3762:src/xeq.c     **** }
 22179              		.loc 1 3762 3 view .LVU5780
 22180 004a 00BF     		.align	2
 22181              	.L1599:
 22182 004c 00000000 		.word	main_ram
 22183              	.LBE3171:
 22184              	.LBE3175:
 22185              		.cfi_endproc
 22186              	.LFE210:
 22188              		.section	.text.op_fract,"ax",%progbits
 22189              		.align	1
 22190              		.p2align 2,,3
 22191              		.global	op_fract
 22192              		.syntax unified
 22193              		.thumb
 22194              		.thumb_func
 22195              		.fpu fpv4-sp-d16
 22197              	op_fract:
 22198              	.LVL1721:
 22199              	.LFB211:
3776:src/xeq.c     **** 	op_float(OP_FLOAT);
 22200              		.loc 1 3776 30 is_stmt 1 view -0
 22201              		.cfi_startproc
 22202              		@ args = 0, pretend = 0, frame = 0
 22203              		@ frame_needed = 0, uses_anonymous_args = 0
3777:src/xeq.c     **** 	UState.fract = 1;
 22204              		.loc 1 3777 2 view .LVU5782
3776:src/xeq.c     **** 	op_float(OP_FLOAT);
 22205              		.loc 1 3776 30 is_stmt 0 view .LVU5783
 22206 0000 10B5     		push	{r4, lr}
 22207              		.cfi_def_cfa_offset 8
 22208              		.cfi_offset 4, -8
 22209              		.cfi_offset 14, -4
3776:src/xeq.c     **** 	op_float(OP_FLOAT);
 22210              		.loc 1 3776 30 view .LVU5784
 22211 0002 0446     		mov	r4, r0
3777:src/xeq.c     **** 	UState.fract = 1;
 22212              		.loc 1 3777 2 view .LVU5785
 22213 0004 5B20     		movs	r0, #91
 22214              	.LVL1722:
3777:src/xeq.c     **** 	UState.fract = 1;
 22215              		.loc 1 3777 2 view .LVU5786
 22216 0006 FFF7FEFF 		bl	op_float
 22217              	.LVL1723:
3778:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22218              		.loc 1 3778 2 is_stmt 1 view .LVU5787
 22219 000a 0D4B     		ldr	r3, .L1607
 22220 000c 1B68     		ldr	r3, [r3]
3778:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22221              		.loc 1 3778 15 is_stmt 0 view .LVU5788
 22222 000e 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
3779:src/xeq.c     **** 		UState.improperfrac = 1;
 22223              		.loc 1 3779 5 view .LVU5789
 22224 0012 4D2C     		cmp	r4, #77
3778:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22225              		.loc 1 3778 15 view .LVU5790
ARM GAS  /tmp/cccVhVyH.s 			page 586


 22226 0014 42F02002 		orr	r2, r2, #32
 22227 0018 83F8E627 		strb	r2, [r3, #2022]
3779:src/xeq.c     **** 		UState.improperfrac = 1;
 22228              		.loc 1 3779 2 is_stmt 1 view .LVU5791
3779:src/xeq.c     **** 		UState.improperfrac = 1;
 22229              		.loc 1 3779 5 is_stmt 0 view .LVU5792
 22230 001c 09D0     		beq	.L1605
3781:src/xeq.c     **** 		UState.improperfrac = 0;
 22231              		.loc 1 3781 7 is_stmt 1 view .LVU5793
3781:src/xeq.c     **** 		UState.improperfrac = 0;
 22232              		.loc 1 3781 10 is_stmt 0 view .LVU5794
 22233 001e 4E2C     		cmp	r4, #78
 22234 0020 00D0     		beq	.L1606
3783:src/xeq.c     **** 
 22235              		.loc 1 3783 1 view .LVU5795
 22236 0022 10BD     		pop	{r4, pc}
 22237              	.L1606:
3782:src/xeq.c     **** }
 22238              		.loc 1 3782 3 is_stmt 1 view .LVU5796
3782:src/xeq.c     **** }
 22239              		.loc 1 3782 23 is_stmt 0 view .LVU5797
 22240 0024 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 22241 0028 6FF30412 		bfc	r2, #4, #1
 22242 002c 83F8E627 		strb	r2, [r3, #2022]
3783:src/xeq.c     **** 
 22243              		.loc 1 3783 1 view .LVU5798
 22244 0030 10BD     		pop	{r4, pc}
 22245              	.L1605:
3780:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 22246              		.loc 1 3780 3 is_stmt 1 view .LVU5799
3780:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 22247              		.loc 1 3780 23 is_stmt 0 view .LVU5800
 22248 0032 D2B2     		uxtb	r2, r2
 22249 0034 42F01002 		orr	r2, r2, #16
 22250 0038 83F8E627 		strb	r2, [r3, #2022]
3783:src/xeq.c     **** 
 22251              		.loc 1 3783 1 view .LVU5801
 22252 003c 10BD     		pop	{r4, pc}
 22253              	.L1608:
 22254 003e 00BF     		.align	2
 22255              	.L1607:
 22256 0040 00000000 		.word	main_ram
 22257              		.cfi_endproc
 22258              	.LFE211:
 22260              		.section	.text.cmdsavem,"ax",%progbits
 22261              		.align	1
 22262              		.p2align 2,,3
 22263              		.global	cmdsavem
 22264              		.syntax unified
 22265              		.thumb
 22266              		.thumb_func
 22267              		.fpu fpv4-sp-d16
 22269              	cmdsavem:
 22270              	.LVL1724:
 22271              	.LFB212:
3788:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 22272              		.loc 1 3788 47 is_stmt 1 view -0
ARM GAS  /tmp/cccVhVyH.s 			page 587


 22273              		.cfi_startproc
 22274              		@ args = 0, pretend = 0, frame = 0
 22275              		@ frame_needed = 0, uses_anonymous_args = 0
3789:src/xeq.c     **** }
 22276              		.loc 1 3789 2 view .LVU5803
3788:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 22277              		.loc 1 3788 47 is_stmt 0 view .LVU5804
 22278 0000 08B5     		push	{r3, lr}
 22279              		.cfi_def_cfa_offset 8
 22280              		.cfi_offset 3, -8
 22281              		.cfi_offset 14, -4
3789:src/xeq.c     **** }
 22282              		.loc 1 3789 9 view .LVU5805
 22283 0002 FFF7FEFF 		bl	get_reg_n
 22284              	.LVL1725:
3789:src/xeq.c     **** }
 22285              		.loc 1 3789 26 view .LVU5806
 22286 0006 044B     		ldr	r3, .L1611
3789:src/xeq.c     **** }
 22287              		.loc 1 3789 25 view .LVU5807
 22288 0008 1968     		ldr	r1, [r3]
3789:src/xeq.c     **** }
 22289              		.loc 1 3789 2 view .LVU5808
 22290 000a 0822     		movs	r2, #8
3790:src/xeq.c     **** 
 22291              		.loc 1 3790 1 view .LVU5809
 22292 000c BDE80840 		pop	{r3, lr}
 22293              		.cfi_restore 14
 22294              		.cfi_restore 3
 22295              		.cfi_def_cfa_offset 0
3789:src/xeq.c     **** }
 22296              		.loc 1 3789 2 view .LVU5810
 22297 0010 01F2E471 		addw	r1, r1, #2020
 22298 0014 FFF7FEBF 		b	xcopy
 22299              	.LVL1726:
 22300              	.L1612:
 22301              		.align	2
 22302              	.L1611:
 22303 0018 00000000 		.word	main_ram
 22304              		.cfi_endproc
 22305              	.LFE212:
 22307              		.section	.text.set_entry,"ax",%progbits
 22308              		.align	1
 22309              		.p2align 2,,3
 22310              		.global	set_entry
 22311              		.syntax unified
 22312              		.thumb
 22313              		.thumb_func
 22314              		.fpu fpv4-sp-d16
 22316              	set_entry:
 22317              	.LFB215:
3915:src/xeq.c     **** 	if (!Running && !XromRunning)
 22318              		.loc 1 3915 18 is_stmt 1 view -0
 22319              		.cfi_startproc
 22320              		@ args = 0, pretend = 0, frame = 0
 22321              		@ frame_needed = 0, uses_anonymous_args = 0
 22322              		@ link register save eliminated.
ARM GAS  /tmp/cccVhVyH.s 			page 588


3916:src/xeq.c     **** 		State.entryp = 1;
 22323              		.loc 1 3916 2 view .LVU5812
 22324              	.LBB3178:
 22325              	.LBI3178:
3915:src/xeq.c     **** 	if (!Running && !XromRunning)
 22326              		.loc 1 3915 6 view .LVU5813
 22327              	.LBE3178:
3916:src/xeq.c     **** 		State.entryp = 1;
 22328              		.loc 1 3916 6 is_stmt 0 view .LVU5814
 22329 0000 074A     		ldr	r2, .L1615
 22330              	.LBB3180:
 22331              	.LBB3179:
3916:src/xeq.c     **** 		State.entryp = 1;
 22332              		.loc 1 3916 18 view .LVU5815
 22333 0002 084B     		ldr	r3, .L1615+4
3916:src/xeq.c     **** 		State.entryp = 1;
 22334              		.loc 1 3916 15 view .LVU5816
 22335 0004 1268     		ldr	r2, [r2]
 22336 0006 1B68     		ldr	r3, [r3]
 22337 0008 1343     		orrs	r3, r2, r3
 22338 000a 07D1     		bne	.L1613
3917:src/xeq.c     **** }
 22339              		.loc 1 3917 3 is_stmt 1 view .LVU5817
3917:src/xeq.c     **** }
 22340              		.loc 1 3917 16 is_stmt 0 view .LVU5818
 22341 000c 064B     		ldr	r3, .L1615+8
 22342 000e 1A68     		ldr	r2, [r3]
 22343 0010 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 22344 0014 43F01003 		orr	r3, r3, #16
 22345 0018 82F8DD37 		strb	r3, [r2, #2013]
 22346              	.L1613:
 22347              	.LBE3179:
 22348              	.LBE3180:
3918:src/xeq.c     **** 
 22349              		.loc 1 3918 1 view .LVU5819
 22350 001c 7047     		bx	lr
 22351              	.L1616:
 22352 001e 00BF     		.align	2
 22353              	.L1615:
 22354 0020 00000000 		.word	Running
 22355 0024 00000000 		.word	XromRunning
 22356 0028 00000000 		.word	main_ram
 22357              		.cfi_endproc
 22358              	.LFE215:
 22360              		.section	.text.get_trig_mode,"ax",%progbits
 22361              		.align	1
 22362              		.p2align 2,,3
 22363              		.global	get_trig_mode
 22364              		.syntax unified
 22365              		.thumb
 22366              		.thumb_func
 22367              		.fpu fpv4-sp-d16
 22369              	get_trig_mode:
 22370              	.LFB217:
4103:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 22371              		.loc 1 4103 37 is_stmt 1 view -0
 22372              		.cfi_startproc
ARM GAS  /tmp/cccVhVyH.s 			page 589


 22373              		@ args = 0, pretend = 0, frame = 0
 22374              		@ frame_needed = 0, uses_anonymous_args = 0
 22375              		@ link register save eliminated.
4104:src/xeq.c     **** 		return TRIG_RAD;
 22376              		.loc 1 4104 2 view .LVU5821
4104:src/xeq.c     **** 		return TRIG_RAD;
 22377              		.loc 1 4104 6 is_stmt 0 view .LVU5822
 22378 0000 084B     		ldr	r3, .L1621
 22379 0002 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
4104:src/xeq.c     **** 		return TRIG_RAD;
 22380              		.loc 1 4104 5 view .LVU5823
 22381 0004 9B07     		lsls	r3, r3, #30
 22382 0006 0AD4     		bmi	.L1620
4104:src/xeq.c     **** 		return TRIG_RAD;
 22383              		.loc 1 4104 19 discriminator 1 view .LVU5824
 22384 0008 074B     		ldr	r3, .L1621+4
 22385 000a 93F90130 		ldrsb	r3, [r3, #1]
 22386 000e 002B     		cmp	r3, #0
 22387 0010 05DB     		blt	.L1620
4107:src/xeq.c     **** }
 22388              		.loc 1 4107 2 is_stmt 1 view .LVU5825
4107:src/xeq.c     **** }
 22389              		.loc 1 4107 33 is_stmt 0 view .LVU5826
 22390 0012 064B     		ldr	r3, .L1621+8
 22391 0014 1B68     		ldr	r3, [r3]
 22392 0016 93F8EA07 		ldrb	r0, [r3, #2026]	@ zero_extendqisi2
4107:src/xeq.c     **** }
 22393              		.loc 1 4107 9 view .LVU5827
 22394 001a 8009     		lsrs	r0, r0, #6
 22395 001c 7047     		bx	lr
 22396              	.L1620:
4105:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
 22397              		.loc 1 4105 10 view .LVU5828
 22398 001e 0120     		movs	r0, #1
4108:src/xeq.c     **** 
 22399              		.loc 1 4108 1 view .LVU5829
 22400 0020 7047     		bx	lr
 22401              	.L1622:
 22402 0022 00BF     		.align	2
 22403              	.L1621:
 22404 0024 00000000 		.word	StateWhileOn
 22405 0028 00000000 		.word	XromParams
 22406 002c 00000000 		.word	main_ram
 22407              		.cfi_endproc
 22408              	.LFE217:
 22410              		.section	.text.cmdpause,"ax",%progbits
 22411              		.align	1
 22412              		.p2align 2,,3
 22413              		.global	cmdpause
 22414              		.syntax unified
 22415              		.thumb
 22416              		.thumb_func
 22417              		.fpu fpv4-sp-d16
 22419              	cmdpause:
 22420              	.LVL1727:
 22421              	.LFB219:
4153:src/xeq.c     **** 	display();
ARM GAS  /tmp/cccVhVyH.s 			page 590


 22422              		.loc 1 4153 47 is_stmt 1 view -0
 22423              		.cfi_startproc
 22424              		@ args = 0, pretend = 0, frame = 0
 22425              		@ frame_needed = 0, uses_anonymous_args = 0
4154:src/xeq.c     **** #ifndef CONSOLE
 22426              		.loc 1 4154 2 view .LVU5831
4153:src/xeq.c     **** 	display();
 22427              		.loc 1 4153 47 is_stmt 0 view .LVU5832
 22428 0000 10B5     		push	{r4, lr}
 22429              		.cfi_def_cfa_offset 8
 22430              		.cfi_offset 4, -8
 22431              		.cfi_offset 14, -4
4153:src/xeq.c     **** 	display();
 22432              		.loc 1 4153 47 view .LVU5833
 22433 0002 0446     		mov	r4, r0
4154:src/xeq.c     **** #ifndef CONSOLE
 22434              		.loc 1 4154 2 view .LVU5834
 22435 0004 FFF7FEFF 		bl	display
 22436              	.LVL1728:
4157:src/xeq.c     **** 	GoFast = (arg == 0);
 22437              		.loc 1 4157 2 is_stmt 1 view .LVU5835
4157:src/xeq.c     **** 	GoFast = (arg == 0);
 22438              		.loc 1 4157 8 is_stmt 0 view .LVU5836
 22439 0008 044A     		ldr	r2, .L1625
4158:src/xeq.c     **** #elif 0
 22440              		.loc 1 4158 9 view .LVU5837
 22441 000a 0549     		ldr	r1, .L1625+4
4158:src/xeq.c     **** #elif 0
 22442              		.loc 1 4158 16 view .LVU5838
 22443 000c B4FA84F3 		clz	r3, r4
4157:src/xeq.c     **** 	GoFast = (arg == 0);
 22444              		.loc 1 4157 8 view .LVU5839
 22445 0010 E4B2     		uxtb	r4, r4
 22446              	.LVL1729:
4158:src/xeq.c     **** #elif 0
 22447              		.loc 1 4158 16 view .LVU5840
 22448 0012 5B09     		lsrs	r3, r3, #5
4157:src/xeq.c     **** 	GoFast = (arg == 0);
 22449              		.loc 1 4157 8 view .LVU5841
 22450 0014 1470     		strb	r4, [r2]
4158:src/xeq.c     **** #elif 0
 22451              		.loc 1 4158 2 is_stmt 1 view .LVU5842
4158:src/xeq.c     **** #elif 0
 22452              		.loc 1 4158 9 is_stmt 0 view .LVU5843
 22453 0016 0B60     		str	r3, [r1]
4169:src/xeq.c     **** 
 22454              		.loc 1 4169 1 view .LVU5844
 22455 0018 10BD     		pop	{r4, pc}
 22456              	.L1626:
 22457 001a 00BF     		.align	2
 22458              	.L1625:
 22459 001c 00000000 		.word	Pause
 22460 0020 00000000 		.word	GoFast
 22461              		.cfi_endproc
 22462              	.LFE219:
 22464              		.section	.text.op_setspeed,"ax",%progbits
 22465              		.align	1
ARM GAS  /tmp/cccVhVyH.s 			page 591


 22466              		.p2align 2,,3
 22467              		.global	op_setspeed
 22468              		.syntax unified
 22469              		.thumb
 22470              		.thumb_func
 22471              		.fpu fpv4-sp-d16
 22473              	op_setspeed:
 22474              	.LVL1730:
 22475              	.LFB220:
4173:src/xeq.c     **** #ifdef DM42
 22476              		.loc 1 4173 33 is_stmt 1 view -0
 22477              		.cfi_startproc
 22478              		@ args = 0, pretend = 0, frame = 0
 22479              		@ frame_needed = 0, uses_anonymous_args = 0
 22480              		@ link register save eliminated.
4179:src/xeq.c     **** 
 22481              		.loc 1 4179 1 view .LVU5846
 22482 0000 7047     		bx	lr
 22483              		.cfi_endproc
 22484              	.LFE220:
 22486 0002 00BF     		.section	.text.op_prompt,"ax",%progbits
 22487              		.align	1
 22488              		.p2align 2,,3
 22489              		.global	op_prompt
 22490              		.syntax unified
 22491              		.thumb
 22492              		.thumb_func
 22493              		.fpu fpv4-sp-d16
 22495              	op_prompt:
 22496              	.LVL1731:
 22497              	.LFB221:
4182:src/xeq.c     **** 	set_running_off();
 22498              		.loc 1 4182 31 view -0
 22499              		.cfi_startproc
 22500              		@ args = 0, pretend = 0, frame = 0
 22501              		@ frame_needed = 0, uses_anonymous_args = 0
4183:src/xeq.c     **** 	alpha_view_common(regX_idx);
 22502              		.loc 1 4183 2 view .LVU5848
 22503              	.LBB3181:
 22504              	.LBI3181:
5824:src/xeq.c     **** 	set_running_off_sst();
 22505              		.loc 1 5824 6 view .LVU5849
 22506              	.LBB3182:
5825:src/xeq.c     **** 	State.entryp = 0;
 22507              		.loc 1 5825 2 view .LVU5850
 22508              	.LBB3183:
 22509              	.LBI3183:
5816:src/xeq.c     **** 	Running = 0;
 22510              		.loc 1 5816 6 view .LVU5851
 22511              	.LBB3184:
5817:src/xeq.c     **** }
 22512              		.loc 1 5817 2 view .LVU5852
 22513              	.LBE3184:
 22514              	.LBE3183:
 22515              	.LBE3182:
 22516              	.LBE3181:
4182:src/xeq.c     **** 	set_running_off();
ARM GAS  /tmp/cccVhVyH.s 			page 592


 22517              		.loc 1 4182 31 is_stmt 0 view .LVU5853
 22518 0000 08B5     		push	{r3, lr}
 22519              		.cfi_def_cfa_offset 8
 22520              		.cfi_offset 3, -8
 22521              		.cfi_offset 14, -4
 22522              	.LBB3190:
 22523              	.LBB3189:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 22524              		.loc 1 5826 15 view .LVU5854
 22525 0002 094B     		ldr	r3, .L1630
 22526              	.LBB3187:
 22527              	.LBB3185:
5817:src/xeq.c     **** }
 22528              		.loc 1 5817 10 view .LVU5855
 22529 0004 094A     		ldr	r2, .L1630+4
 22530              	.LBE3185:
 22531              	.LBE3187:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 22532              		.loc 1 5826 15 view .LVU5856
 22533 0006 1B68     		ldr	r3, [r3]
 22534              	.LBB3188:
 22535              	.LBB3186:
5817:src/xeq.c     **** }
 22536              		.loc 1 5817 10 view .LVU5857
 22537 0008 0021     		movs	r1, #0
 22538 000a 1160     		str	r1, [r2]
 22539              	.LBE3186:
 22540              	.LBE3188:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 22541              		.loc 1 5826 2 is_stmt 1 view .LVU5858
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 22542              		.loc 1 5826 15 is_stmt 0 view .LVU5859
 22543 000c 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 22544 0010 61F30412 		bfi	r2, r1, #4, #1
 22545 0014 83F8DD27 		strb	r2, [r3, #2013]
 22546              		.loc 1 5827 2 is_stmt 1 view .LVU5860
 22547 0018 8A20     		movs	r0, #138
 22548              	.LVL1732:
 22549              		.loc 1 5827 2 is_stmt 0 view .LVU5861
 22550 001a FFF7FEFF 		bl	dot
 22551              	.LVL1733:
 22552              	.LBE3189:
 22553              	.LBE3190:
4184:src/xeq.c     **** }
 22554              		.loc 1 4184 2 is_stmt 1 view .LVU5862
4185:src/xeq.c     **** 
 22555              		.loc 1 4185 1 is_stmt 0 view .LVU5863
 22556 001e BDE80840 		pop	{r3, lr}
 22557              		.cfi_restore 14
 22558              		.cfi_restore 3
 22559              		.cfi_def_cfa_offset 0
4184:src/xeq.c     **** }
 22560              		.loc 1 4184 2 view .LVU5864
 22561 0022 6420     		movs	r0, #100
 22562 0024 FFF7FEBF 		b	alpha_view_common
 22563              	.LVL1734:
 22564              	.L1631:
ARM GAS  /tmp/cccVhVyH.s 			page 593


 22565              		.align	2
 22566              	.L1630:
 22567 0028 00000000 		.word	main_ram
 22568 002c 00000000 		.word	Running
 22569              		.cfi_endproc
 22570              	.LFE221:
 22572              		.section	.text.XisInt,"ax",%progbits
 22573              		.align	1
 22574              		.p2align 2,,3
 22575              		.global	XisInt
 22576              		.syntax unified
 22577              		.thumb
 22578              		.thumb_func
 22579              		.fpu fpv4-sp-d16
 22581              	XisInt:
 22582              	.LVL1735:
 22583              	.LFB222:
4189:src/xeq.c     **** 	decNumber x;
 22584              		.loc 1 4189 28 is_stmt 1 view -0
 22585              		.cfi_startproc
 22586              		@ args = 0, pretend = 0, frame = 40
 22587              		@ frame_needed = 0, uses_anonymous_args = 0
4190:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
 22588              		.loc 1 4190 2 view .LVU5866
4191:src/xeq.c     **** 	if ( is_intmode() )
 22589              		.loc 1 4191 2 view .LVU5867
4192:src/xeq.c     **** 		result = op_int;
 22590              		.loc 1 4192 7 is_stmt 0 view .LVU5868
 22591 0000 164B     		ldr	r3, .L1638
4189:src/xeq.c     **** 	decNumber x;
 22592              		.loc 1 4189 28 view .LVU5869
 22593 0002 30B5     		push	{r4, r5, lr}
 22594              		.cfi_def_cfa_offset 12
 22595              		.cfi_offset 4, -12
 22596              		.cfi_offset 5, -8
 22597              		.cfi_offset 14, -4
4192:src/xeq.c     **** 		result = op_int;
 22598              		.loc 1 4192 7 view .LVU5870
 22599 0004 1B68     		ldr	r3, [r3]
 22600 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4191:src/xeq.c     **** 	if ( is_intmode() )
 22601              		.loc 1 4191 27 view .LVU5871
 22602 000a A0F18704 		sub	r4, r0, #135
 22603 000e B4FA84F4 		clz	r4, r4
4192:src/xeq.c     **** 		result = op_int;
 22604              		.loc 1 4192 5 view .LVU5872
 22605 0012 13F00105 		ands	r5, r3, #1
4189:src/xeq.c     **** 	decNumber x;
 22606              		.loc 1 4189 28 view .LVU5873
 22607 0016 8BB0     		sub	sp, sp, #44
 22608              		.cfi_def_cfa_offset 56
4191:src/xeq.c     **** 	if ( is_intmode() )
 22609              		.loc 1 4191 27 view .LVU5874
 22610 0018 4FEA5414 		lsr	r4, r4, #5
 22611              	.LVL1736:
4192:src/xeq.c     **** 		result = op_int;
 22612              		.loc 1 4192 2 is_stmt 1 view .LVU5875
ARM GAS  /tmp/cccVhVyH.s 			page 594


4192:src/xeq.c     **** 		result = op_int;
 22613              		.loc 1 4192 5 is_stmt 0 view .LVU5876
 22614 001c 04D0     		beq	.L1636
 22615              	.LVL1737:
4198:src/xeq.c     **** }
 22616              		.loc 1 4198 2 is_stmt 1 view .LVU5877
 22617 001e 2046     		mov	r0, r4
 22618              	.LVL1738:
4198:src/xeq.c     **** }
 22619              		.loc 1 4198 2 is_stmt 0 view .LVU5878
 22620 0020 FFF7FEFF 		bl	fin_tst
 22621              	.LVL1739:
4199:src/xeq.c     **** 
 22622              		.loc 1 4199 1 view .LVU5879
 22623 0024 0BB0     		add	sp, sp, #44
 22624              		.cfi_remember_state
 22625              		.cfi_def_cfa_offset 12
 22626              		@ sp needed
 22627 0026 30BD     		pop	{r4, r5, pc}
 22628              	.LVL1740:
 22629              	.L1636:
 22630              		.cfi_restore_state
4194:src/xeq.c     **** 		result = 0;
 22631              		.loc 1 4194 7 is_stmt 1 view .LVU5880
 22632              	.LBB3191:
 22633              	.LBI3191:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22634              		.loc 1 824 12 view .LVU5881
 22635              	.LBB3192:
 825:src/xeq.c     **** }
 22636              		.loc 1 825 2 view .LVU5882
 825:src/xeq.c     **** }
 22637              		.loc 1 825 9 is_stmt 0 view .LVU5883
 22638 0028 01A8     		add	r0, sp, #4
 22639              	.LVL1741:
 825:src/xeq.c     **** }
 22640              		.loc 1 825 9 view .LVU5884
 22641 002a 6421     		movs	r1, #100
 22642 002c FFF7FEFF 		bl	getRegister
 22643              	.LVL1742:
 825:src/xeq.c     **** }
 22644              		.loc 1 825 9 view .LVU5885
 22645              	.LBE3192:
 22646              	.LBE3191:
4194:src/xeq.c     **** 		result = 0;
 22647              		.loc 1 4194 10 view .LVU5886
 22648 0030 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 22649 0032 13F0700F 		tst	r3, #112
 22650 0036 05D0     		beq	.L1637
4195:src/xeq.c     **** 	else
 22651              		.loc 1 4195 10 view .LVU5887
 22652 0038 2C46     		mov	r4, r5
 22653              	.LVL1743:
4198:src/xeq.c     **** }
 22654              		.loc 1 4198 2 is_stmt 1 view .LVU5888
 22655 003a 2046     		mov	r0, r4
 22656 003c FFF7FEFF 		bl	fin_tst
ARM GAS  /tmp/cccVhVyH.s 			page 595


 22657              	.LVL1744:
4199:src/xeq.c     **** 
 22658              		.loc 1 4199 1 is_stmt 0 view .LVU5889
 22659 0040 0BB0     		add	sp, sp, #44
 22660              		.cfi_remember_state
 22661              		.cfi_def_cfa_offset 12
 22662              		@ sp needed
 22663 0042 30BD     		pop	{r4, r5, pc}
 22664              	.LVL1745:
 22665              	.L1637:
 22666              		.cfi_restore_state
4197:src/xeq.c     **** 	fin_tst(result);
 22667              		.loc 1 4197 10 is_stmt 1 view .LVU5890
4197:src/xeq.c     **** 	fin_tst(result);
 22668              		.loc 1 4197 20 is_stmt 0 view .LVU5891
 22669 0044 01A8     		add	r0, sp, #4
 22670 0046 FFF7FEFF 		bl	is_int
 22671              	.LVL1746:
4197:src/xeq.c     **** 	fin_tst(result);
 22672              		.loc 1 4197 31 view .LVU5892
 22673 004a 041B     		subs	r4, r0, r4
 22674              	.LVL1747:
4197:src/xeq.c     **** 	fin_tst(result);
 22675              		.loc 1 4197 31 view .LVU5893
 22676 004c B4FA84F4 		clz	r4, r4
 22677 0050 6409     		lsrs	r4, r4, #5
 22678              	.LVL1748:
4198:src/xeq.c     **** }
 22679              		.loc 1 4198 2 is_stmt 1 view .LVU5894
 22680 0052 2046     		mov	r0, r4
 22681 0054 FFF7FEFF 		bl	fin_tst
 22682              	.LVL1749:
4199:src/xeq.c     **** 
 22683              		.loc 1 4199 1 is_stmt 0 view .LVU5895
 22684 0058 0BB0     		add	sp, sp, #44
 22685              		.cfi_def_cfa_offset 12
 22686              		@ sp needed
 22687 005a 30BD     		pop	{r4, r5, pc}
 22688              	.LVL1750:
 22689              	.L1639:
4199:src/xeq.c     **** 
 22690              		.loc 1 4199 1 view .LVU5896
 22691              		.align	2
 22692              	.L1638:
 22693 005c 00000000 		.word	main_ram
 22694              		.cfi_endproc
 22695              	.LFE222:
 22697              		.section	.text.XisEvenOrOdd,"ax",%progbits
 22698              		.align	1
 22699              		.p2align 2,,3
 22700              		.global	XisEvenOrOdd
 22701              		.syntax unified
 22702              		.thumb
 22703              		.thumb_func
 22704              		.fpu fpv4-sp-d16
 22706              	XisEvenOrOdd:
 22707              	.LVL1751:
ARM GAS  /tmp/cccVhVyH.s 			page 596


 22708              	.LFB223:
4203:src/xeq.c     **** 	decNumber x;
 22709              		.loc 1 4203 34 is_stmt 1 view -0
 22710              		.cfi_startproc
 22711              		@ args = 0, pretend = 0, frame = 40
 22712              		@ frame_needed = 0, uses_anonymous_args = 0
4204:src/xeq.c     **** 	int odd = (op == OP_XisODD);
 22713              		.loc 1 4204 2 view .LVU5898
4205:src/xeq.c     **** 
 22714              		.loc 1 4205 2 view .LVU5899
4207:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22715              		.loc 1 4207 6 is_stmt 0 view .LVU5900
 22716 0000 174B     		ldr	r3, .L1644
4203:src/xeq.c     **** 	decNumber x;
 22717              		.loc 1 4203 34 view .LVU5901
 22718 0002 30B5     		push	{r4, r5, lr}
 22719              		.cfi_def_cfa_offset 12
 22720              		.cfi_offset 4, -12
 22721              		.cfi_offset 5, -8
 22722              		.cfi_offset 14, -4
4207:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22723              		.loc 1 4207 6 view .LVU5902
 22724 0004 1B68     		ldr	r3, [r3]
 22725 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4207:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22726              		.loc 1 4207 5 view .LVU5903
 22727 000a DB07     		lsls	r3, r3, #31
4203:src/xeq.c     **** 	decNumber x;
 22728              		.loc 1 4203 34 view .LVU5904
 22729 000c 8BB0     		sub	sp, sp, #44
 22730              		.cfi_def_cfa_offset 56
4203:src/xeq.c     **** 	decNumber x;
 22731              		.loc 1 4203 34 view .LVU5905
 22732 000e 0446     		mov	r4, r0
 22733              	.LVL1752:
4207:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22734              		.loc 1 4207 2 is_stmt 1 view .LVU5906
4207:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22735              		.loc 1 4207 5 is_stmt 0 view .LVU5907
 22736 0010 15D5     		bpl	.L1641
4208:src/xeq.c     **** 	} else {
 22737              		.loc 1 4208 3 is_stmt 1 view .LVU5908
 22738              	.LBB3193:
 22739              	.LBI3193:
1445:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 22740              		.loc 1 1445 15 view .LVU5909
 22741              	.LBB3194:
1446:src/xeq.c     **** }
 22742              		.loc 1 1446 2 view .LVU5910
1446:src/xeq.c     **** }
 22743              		.loc 1 1446 9 is_stmt 0 view .LVU5911
 22744 0012 6420     		movs	r0, #100
 22745              	.LVL1753:
1446:src/xeq.c     **** }
 22746              		.loc 1 1446 9 view .LVU5912
 22747 0014 FFF7FEFF 		bl	get_reg_n_int
 22748              	.LVL1754:
ARM GAS  /tmp/cccVhVyH.s 			page 597


 22749              	.LBE3194:
 22750              	.LBE3193:
4205:src/xeq.c     **** 
 22751              		.loc 1 4205 16 view .LVU5913
 22752 0018 A4F18A04 		sub	r4, #138
 22753              	.LVL1755:
4208:src/xeq.c     **** 	} else {
 22754              		.loc 1 4208 23 view .LVU5914
 22755 001c 0023     		movs	r3, #0
4205:src/xeq.c     **** 
 22756              		.loc 1 4205 16 view .LVU5915
 22757 001e 0025     		movs	r5, #0
 22758 0020 B4FA84F4 		clz	r4, r4
4208:src/xeq.c     **** 	} else {
 22759              		.loc 1 4208 23 view .LVU5916
 22760 0024 00F00102 		and	r2, r0, #1
4208:src/xeq.c     **** 	} else {
 22761              		.loc 1 4208 3 view .LVU5917
 22762 0028 AB42     		cmp	r3, r5
4205:src/xeq.c     **** 
 22763              		.loc 1 4205 16 view .LVU5918
 22764 002a 4FEA5414 		lsr	r4, r4, #5
4208:src/xeq.c     **** 	} else {
 22765              		.loc 1 4208 3 view .LVU5919
 22766 002e 06BF     		itte	eq
 22767 0030 A242     		cmpeq	r2, r4
 22768 0032 0120     		moveq	r0, #1
 22769 0034 1846     		movne	r0, r3
 22770 0036 FFF7FEFF 		bl	fin_tst
 22771              	.LVL1756:
4212:src/xeq.c     **** 
 22772              		.loc 1 4212 1 view .LVU5920
 22773 003a 0BB0     		add	sp, sp, #44
 22774              		.cfi_remember_state
 22775              		.cfi_def_cfa_offset 12
 22776              		@ sp needed
 22777 003c 30BD     		pop	{r4, r5, pc}
 22778              	.LVL1757:
 22779              	.L1641:
 22780              		.cfi_restore_state
4210:src/xeq.c     **** 	}
 22781              		.loc 1 4210 3 is_stmt 1 view .LVU5921
 22782              	.LBB3195:
 22783              	.LBI3195:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22784              		.loc 1 824 12 view .LVU5922
 22785              	.LBB3196:
 825:src/xeq.c     **** }
 22786              		.loc 1 825 2 view .LVU5923
 825:src/xeq.c     **** }
 22787              		.loc 1 825 9 is_stmt 0 view .LVU5924
 22788 003e 6421     		movs	r1, #100
 22789 0040 01A8     		add	r0, sp, #4
 22790              	.LVL1758:
 825:src/xeq.c     **** }
 22791              		.loc 1 825 9 view .LVU5925
 22792 0042 FFF7FEFF 		bl	getRegister
ARM GAS  /tmp/cccVhVyH.s 			page 598


 22793              	.LVL1759:
 825:src/xeq.c     **** }
 22794              		.loc 1 825 9 view .LVU5926
 22795              	.LBE3196:
 22796              	.LBE3195:
4210:src/xeq.c     **** 	}
 22797              		.loc 1 4210 11 view .LVU5927
 22798 0046 FFF7FEFF 		bl	is_even
 22799              	.LVL1760:
4210:src/xeq.c     **** 	}
 22800              		.loc 1 4210 32 view .LVU5928
 22801 004a 8A3C     		subs	r4, r4, #138
 22802              	.LVL1761:
4210:src/xeq.c     **** 	}
 22803              		.loc 1 4210 32 view .LVU5929
 22804 004c 18BF     		it	ne
 22805 004e 0124     		movne	r4, #1
4210:src/xeq.c     **** 	}
 22806              		.loc 1 4210 3 view .LVU5930
 22807 0050 201A     		subs	r0, r4, r0
 22808 0052 B0FA80F0 		clz	r0, r0
 22809 0056 4009     		lsrs	r0, r0, #5
 22810 0058 FFF7FEFF 		bl	fin_tst
 22811              	.LVL1762:
4212:src/xeq.c     **** 
 22812              		.loc 1 4212 1 view .LVU5931
 22813 005c 0BB0     		add	sp, sp, #44
 22814              		.cfi_def_cfa_offset 12
 22815              		@ sp needed
 22816 005e 30BD     		pop	{r4, r5, pc}
 22817              	.L1645:
 22818              		.align	2
 22819              	.L1644:
 22820 0060 00000000 		.word	main_ram
 22821              		.cfi_endproc
 22822              	.LFE223:
 22824              		.section	.text.XisPrime,"ax",%progbits
 22825              		.align	1
 22826              		.p2align 2,,3
 22827              		.global	XisPrime
 22828              		.syntax unified
 22829              		.thumb
 22830              		.thumb_func
 22831              		.fpu fpv4-sp-d16
 22833              	XisPrime:
 22834              	.LVL1763:
 22835              	.LFB224:
4216:src/xeq.c     **** 	unsigned long long int i;
 22836              		.loc 1 4216 30 is_stmt 1 view -0
 22837              		.cfi_startproc
 22838              		@ args = 0, pretend = 0, frame = 40
 22839              		@ frame_needed = 0, uses_anonymous_args = 0
4217:src/xeq.c     **** 	int sgn;
 22840              		.loc 1 4217 2 view .LVU5933
4218:src/xeq.c     **** 
 22841              		.loc 1 4218 2 view .LVU5934
4220:src/xeq.c     **** 	if (!is_intmode()) {
ARM GAS  /tmp/cccVhVyH.s 			page 599


 22842              		.loc 1 4220 2 view .LVU5935
4216:src/xeq.c     **** 	unsigned long long int i;
 22843              		.loc 1 4216 30 is_stmt 0 view .LVU5936
 22844 0000 70B5     		push	{r4, r5, r6, lr}
 22845              		.cfi_def_cfa_offset 16
 22846              		.cfi_offset 4, -16
 22847              		.cfi_offset 5, -12
 22848              		.cfi_offset 6, -8
 22849              		.cfi_offset 14, -4
 22850 0002 8AB0     		sub	sp, sp, #40
 22851              		.cfi_def_cfa_offset 56
 22852              	.LVL1764:
 22853              	.LBB3197:
 22854              	.LBI3197:
1449:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 22855              		.loc 1 1449 24 is_stmt 1 view .LVU5937
 22856              	.LBB3198:
1450:src/xeq.c     **** }
 22857              		.loc 1 1450 2 view .LVU5938
1450:src/xeq.c     **** }
 22858              		.loc 1 1450 9 is_stmt 0 view .LVU5939
 22859 0004 6946     		mov	r1, sp
 22860 0006 6420     		movs	r0, #100
 22861              	.LVL1765:
1450:src/xeq.c     **** }
 22862              		.loc 1 1450 9 view .LVU5940
 22863 0008 FFF7FEFF 		bl	get_reg_n_int_sgn
 22864              	.LVL1766:
 22865              	.LBE3198:
 22866              	.LBE3197:
4221:src/xeq.c     **** 		decNumber x;
 22867              		.loc 1 4221 6 view .LVU5941
 22868 000c 1B4B     		ldr	r3, .L1656
 22869 000e 1B68     		ldr	r3, [r3]
 22870 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4221:src/xeq.c     **** 		decNumber x;
 22871              		.loc 1 4221 5 view .LVU5942
 22872 0014 13F00104 		ands	r4, r3, #1
 22873              	.LBB3200:
 22874              	.LBB3199:
1450:src/xeq.c     **** }
 22875              		.loc 1 1450 9 view .LVU5943
 22876 0018 0646     		mov	r6, r0
 22877 001a 0D46     		mov	r5, r1
 22878              	.LVL1767:
1450:src/xeq.c     **** }
 22879              		.loc 1 1450 9 view .LVU5944
 22880              	.LBE3199:
 22881              	.LBE3200:
4221:src/xeq.c     **** 		decNumber x;
 22882              		.loc 1 4221 2 is_stmt 1 view .LVU5945
4221:src/xeq.c     **** 		decNumber x;
 22883              		.loc 1 4221 5 is_stmt 0 view .LVU5946
 22884 001c 11D0     		beq	.L1647
 22885 001e 009B     		ldr	r3, [sp]
 22886              	.LVL1768:
 22887              	.L1648:
ARM GAS  /tmp/cccVhVyH.s 			page 600


4231:src/xeq.c     **** }
 22888              		.loc 1 4231 2 is_stmt 1 view .LVU5947
 22889 0020 23B1     		cbz	r3, .L1655
 22890              	.L1653:
4231:src/xeq.c     **** }
 22891              		.loc 1 4231 2 is_stmt 0 view .LVU5948
 22892 0022 0020     		movs	r0, #0
 22893 0024 FFF7FEFF 		bl	fin_tst
 22894              	.LVL1769:
4232:src/xeq.c     **** 
 22895              		.loc 1 4232 1 view .LVU5949
 22896 0028 0AB0     		add	sp, sp, #40
 22897              		.cfi_remember_state
 22898              		.cfi_def_cfa_offset 16
 22899              		@ sp needed
 22900 002a 70BD     		pop	{r4, r5, r6, pc}
 22901              	.L1655:
 22902              		.cfi_restore_state
4231:src/xeq.c     **** }
 22903              		.loc 1 4231 22 discriminator 1 view .LVU5950
 22904 002c 2946     		mov	r1, r5
 22905 002e 3046     		mov	r0, r6
 22906 0030 FFF7FEFF 		bl	isPrime
 22907              	.LVL1770:
4231:src/xeq.c     **** }
 22908              		.loc 1 4231 2 discriminator 1 view .LVU5951
 22909 0034 0038     		subs	r0, r0, #0
 22910 0036 18BF     		it	ne
 22911 0038 0120     		movne	r0, #1
 22912 003a FFF7FEFF 		bl	fin_tst
 22913              	.LVL1771:
4232:src/xeq.c     **** 
 22914              		.loc 1 4232 1 discriminator 1 view .LVU5952
 22915 003e 0AB0     		add	sp, sp, #40
 22916              		.cfi_remember_state
 22917              		.cfi_def_cfa_offset 16
 22918              		@ sp needed
 22919 0040 70BD     		pop	{r4, r5, r6, pc}
 22920              	.LVL1772:
 22921              	.L1647:
 22922              		.cfi_restore_state
 22923              	.LBB3201:
4222:src/xeq.c     **** 
 22924              		.loc 1 4222 3 is_stmt 1 view .LVU5953
4224:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
 22925              		.loc 1 4224 3 view .LVU5954
 22926              	.LBB3202:
 22927              	.LBI3202:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22928              		.loc 1 824 12 view .LVU5955
 22929              	.LBB3203:
 825:src/xeq.c     **** }
 22930              		.loc 1 825 2 view .LVU5956
 825:src/xeq.c     **** }
 22931              		.loc 1 825 9 is_stmt 0 view .LVU5957
 22932 0042 01A8     		add	r0, sp, #4
 22933              	.LVL1773:
ARM GAS  /tmp/cccVhVyH.s 			page 601


 825:src/xeq.c     **** }
 22934              		.loc 1 825 9 view .LVU5958
 22935 0044 6421     		movs	r1, #100
 22936 0046 FFF7FEFF 		bl	getRegister
 22937              	.LVL1774:
 825:src/xeq.c     **** }
 22938              		.loc 1 825 9 view .LVU5959
 22939              	.LBE3203:
 22940              	.LBE3202:
4225:src/xeq.c     **** 			sgn = 1; // not prime
 22941              		.loc 1 4225 3 is_stmt 1 view .LVU5960
4225:src/xeq.c     **** 			sgn = 1; // not prime
 22942              		.loc 1 4225 6 is_stmt 0 view .LVU5961
 22943 004a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 22944 004e 13F0700F 		tst	r3, #112
 22945 0052 06D0     		beq	.L1649
4226:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22946              		.loc 1 4226 4 is_stmt 1 view .LVU5962
4226:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22947              		.loc 1 4226 8 is_stmt 0 view .LVU5963
 22948 0054 0123     		movs	r3, #1
 22949              	.LBE3201:
4231:src/xeq.c     **** }
 22950              		.loc 1 4231 2 view .LVU5964
 22951 0056 2046     		mov	r0, r4
 22952              	.LBB3204:
4226:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22953              		.loc 1 4226 8 view .LVU5965
 22954 0058 0093     		str	r3, [sp]
4226:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22955              		.loc 1 4226 8 view .LVU5966
 22956              	.LBE3204:
4231:src/xeq.c     **** }
 22957              		.loc 1 4231 2 is_stmt 1 view .LVU5967
 22958 005a FFF7FEFF 		bl	fin_tst
 22959              	.LVL1775:
4232:src/xeq.c     **** 
 22960              		.loc 1 4232 1 is_stmt 0 view .LVU5968
 22961 005e 0AB0     		add	sp, sp, #40
 22962              		.cfi_remember_state
 22963              		.cfi_def_cfa_offset 16
 22964              		@ sp needed
 22965 0060 70BD     		pop	{r4, r5, r6, pc}
 22966              	.L1649:
 22967              		.cfi_restore_state
 22968              	.LBB3205:
4227:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22969              		.loc 1 4227 8 is_stmt 1 view .LVU5969
4227:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22970              		.loc 1 4227 12 is_stmt 0 view .LVU5970
 22971 0062 0749     		ldr	r1, .L1656+4
 22972 0064 01A8     		add	r0, sp, #4
 22973 0066 FFF7FEFF 		bl	dn_lt
 22974              	.LVL1776:
 22975 006a 009B     		ldr	r3, [sp]
4227:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22976              		.loc 1 4227 11 view .LVU5971
ARM GAS  /tmp/cccVhVyH.s 			page 602


 22977 006c 0028     		cmp	r0, #0
 22978 006e D7D1     		bne	.L1648
4229:src/xeq.c     **** 	}
 22979              		.loc 1 4229 4 is_stmt 1 view .LVU5972
 22980              	.LVL1777:
4229:src/xeq.c     **** 	}
 22981              		.loc 1 4229 6 is_stmt 0 view .LVU5973
 22982 0070 4FF0FF36 		mov	r6, #-1
 22983 0074 3546     		mov	r5, r6
4229:src/xeq.c     **** 	}
 22984              		.loc 1 4229 6 view .LVU5974
 22985              	.LBE3205:
4231:src/xeq.c     **** }
 22986              		.loc 1 4231 2 is_stmt 1 view .LVU5975
 22987 0076 002B     		cmp	r3, #0
 22988 0078 D3D1     		bne	.L1653
 22989 007a D7E7     		b	.L1655
 22990              	.L1657:
 22991              		.align	2
 22992              	.L1656:
 22993 007c 00000000 		.word	main_ram
 22994 0080 00000000 		.word	const_2pow64
 22995              		.cfi_endproc
 22996              	.LFE224:
 22998              		.section	.text.isInfinite,"ax",%progbits
 22999              		.align	1
 23000              		.p2align 2,,3
 23001              		.global	isInfinite
 23002              		.syntax unified
 23003              		.thumb
 23004              		.thumb_func
 23005              		.fpu fpv4-sp-d16
 23007              	isInfinite:
 23008              	.LVL1778:
 23009              	.LFB225:
4236:src/xeq.c     **** 	decNumber x;
 23010              		.loc 1 4236 32 view -0
 23011              		.cfi_startproc
 23012              		@ args = 0, pretend = 0, frame = 40
 23013              		@ frame_needed = 0, uses_anonymous_args = 0
4237:src/xeq.c     **** 
 23014              		.loc 1 4237 2 view .LVU5977
4239:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
 23015              		.loc 1 4239 2 view .LVU5978
4236:src/xeq.c     **** 	decNumber x;
 23016              		.loc 1 4236 32 is_stmt 0 view .LVU5979
 23017 0000 00B5     		push	{lr}
 23018              		.cfi_def_cfa_offset 4
 23019              		.cfi_offset 14, -4
 23020 0002 8BB0     		sub	sp, sp, #44
 23021              		.cfi_def_cfa_offset 48
 23022              	.LVL1779:
 23023              	.LBB3206:
 23024              	.LBI3206:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23025              		.loc 1 824 12 is_stmt 1 view .LVU5980
 23026              	.LBB3207:
ARM GAS  /tmp/cccVhVyH.s 			page 603


 825:src/xeq.c     **** }
 23027              		.loc 1 825 2 view .LVU5981
 825:src/xeq.c     **** }
 23028              		.loc 1 825 9 is_stmt 0 view .LVU5982
 23029 0004 6421     		movs	r1, #100
 23030 0006 01A8     		add	r0, sp, #4
 23031              	.LVL1780:
 825:src/xeq.c     **** }
 23032              		.loc 1 825 9 view .LVU5983
 23033 0008 FFF7FEFF 		bl	getRegister
 23034              	.LVL1781:
 825:src/xeq.c     **** }
 23035              		.loc 1 825 9 view .LVU5984
 23036              	.LBE3207:
 23037              	.LBE3206:
4240:src/xeq.c     **** }
 23038              		.loc 1 4240 2 is_stmt 1 view .LVU5985
4240:src/xeq.c     **** }
 23039              		.loc 1 4240 10 is_stmt 0 view .LVU5986
 23040 000c 074B     		ldr	r3, .L1662
 23041 000e 1B68     		ldr	r3, [r3]
 23042 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4240:src/xeq.c     **** }
 23043              		.loc 1 4240 2 view .LVU5987
 23044 0014 DB07     		lsls	r3, r3, #31
 23045 0016 56BF     		itet	pl
 23046 0018 9DF80C00 		ldrbpl	r0, [sp, #12]	@ zero_extendqisi2
 23047 001c 0020     		movmi	r0, #0
 23048 001e C0F38010 		ubfxpl	r0, r0, #6, #1
 23049 0022 FFF7FEFF 		bl	fin_tst
 23050              	.LVL1782:
4241:src/xeq.c     **** 
 23051              		.loc 1 4241 1 view .LVU5988
 23052 0026 0BB0     		add	sp, sp, #44
 23053              		.cfi_def_cfa_offset 4
 23054              		@ sp needed
 23055 0028 5DF804FB 		ldr	pc, [sp], #4
 23056              	.L1663:
 23057              		.align	2
 23058              	.L1662:
 23059 002c 00000000 		.word	main_ram
 23060              		.cfi_endproc
 23061              	.LFE225:
 23063              		.section	.text.isNan,"ax",%progbits
 23064              		.align	1
 23065              		.p2align 2,,3
 23066              		.global	isNan
 23067              		.syntax unified
 23068              		.thumb
 23069              		.thumb_func
 23070              		.fpu fpv4-sp-d16
 23072              	isNan:
 23073              	.LVL1783:
 23074              	.LFB226:
4247:src/xeq.c     **** 	decNumber x;
 23075              		.loc 1 4247 27 is_stmt 1 view -0
 23076              		.cfi_startproc
ARM GAS  /tmp/cccVhVyH.s 			page 604


 23077              		@ args = 0, pretend = 0, frame = 40
 23078              		@ frame_needed = 0, uses_anonymous_args = 0
4248:src/xeq.c     **** 
 23079              		.loc 1 4248 2 view .LVU5990
4250:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
 23080              		.loc 1 4250 2 view .LVU5991
4247:src/xeq.c     **** 	decNumber x;
 23081              		.loc 1 4247 27 is_stmt 0 view .LVU5992
 23082 0000 00B5     		push	{lr}
 23083              		.cfi_def_cfa_offset 4
 23084              		.cfi_offset 14, -4
 23085 0002 8BB0     		sub	sp, sp, #44
 23086              		.cfi_def_cfa_offset 48
 23087              	.LVL1784:
 23088              	.LBB3208:
 23089              	.LBI3208:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23090              		.loc 1 824 12 is_stmt 1 view .LVU5993
 23091              	.LBB3209:
 825:src/xeq.c     **** }
 23092              		.loc 1 825 2 view .LVU5994
 825:src/xeq.c     **** }
 23093              		.loc 1 825 9 is_stmt 0 view .LVU5995
 23094 0004 6421     		movs	r1, #100
 23095 0006 01A8     		add	r0, sp, #4
 23096              	.LVL1785:
 825:src/xeq.c     **** }
 23097              		.loc 1 825 9 view .LVU5996
 23098 0008 FFF7FEFF 		bl	getRegister
 23099              	.LVL1786:
 825:src/xeq.c     **** }
 23100              		.loc 1 825 9 view .LVU5997
 23101              	.LBE3209:
 23102              	.LBE3208:
4251:src/xeq.c     **** }
 23103              		.loc 1 4251 2 is_stmt 1 view .LVU5998
4251:src/xeq.c     **** }
 23104              		.loc 1 4251 10 is_stmt 0 view .LVU5999
 23105 000c 0B4B     		ldr	r3, .L1668
 23106 000e 1B68     		ldr	r3, [r3]
 23107 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4251:src/xeq.c     **** }
 23108              		.loc 1 4251 2 view .LVU6000
 23109 0014 DB07     		lsls	r3, r3, #31
 23110 0016 0BD4     		bmi	.L1666
4251:src/xeq.c     **** }
 23111              		.loc 1 4251 2 discriminator 1 view .LVU6001
 23112 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 23113 001c 13F0300F 		tst	r3, #48
 23114 0020 14BF     		ite	ne
 23115 0022 0120     		movne	r0, #1
 23116 0024 0020     		moveq	r0, #0
 23117 0026 FFF7FEFF 		bl	fin_tst
 23118              	.LVL1787:
4252:src/xeq.c     **** 
 23119              		.loc 1 4252 1 discriminator 1 view .LVU6002
 23120 002a 0BB0     		add	sp, sp, #44
ARM GAS  /tmp/cccVhVyH.s 			page 605


 23121              		.cfi_remember_state
 23122              		.cfi_def_cfa_offset 4
 23123              		@ sp needed
 23124 002c 5DF804FB 		ldr	pc, [sp], #4
 23125              	.L1666:
 23126              		.cfi_restore_state
4251:src/xeq.c     **** }
 23127              		.loc 1 4251 2 view .LVU6003
 23128 0030 0020     		movs	r0, #0
 23129 0032 FFF7FEFF 		bl	fin_tst
 23130              	.LVL1788:
4252:src/xeq.c     **** 
 23131              		.loc 1 4252 1 view .LVU6004
 23132 0036 0BB0     		add	sp, sp, #44
 23133              		.cfi_def_cfa_offset 4
 23134              		@ sp needed
 23135 0038 5DF804FB 		ldr	pc, [sp], #4
 23136              	.L1669:
 23137              		.align	2
 23138              	.L1668:
 23139 003c 00000000 		.word	main_ram
 23140              		.cfi_endproc
 23141              	.LFE226:
 23143              		.section	.text.isSpecial,"ax",%progbits
 23144              		.align	1
 23145              		.p2align 2,,3
 23146              		.global	isSpecial
 23147              		.syntax unified
 23148              		.thumb
 23149              		.thumb_func
 23150              		.fpu fpv4-sp-d16
 23152              	isSpecial:
 23153              	.LVL1789:
 23154              	.LFB227:
4254:src/xeq.c     **** 	decNumber x;
 23155              		.loc 1 4254 31 is_stmt 1 view -0
 23156              		.cfi_startproc
 23157              		@ args = 0, pretend = 0, frame = 40
 23158              		@ frame_needed = 0, uses_anonymous_args = 0
4255:src/xeq.c     **** 
 23159              		.loc 1 4255 2 view .LVU6006
4257:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
 23160              		.loc 1 4257 2 view .LVU6007
4254:src/xeq.c     **** 	decNumber x;
 23161              		.loc 1 4254 31 is_stmt 0 view .LVU6008
 23162 0000 00B5     		push	{lr}
 23163              		.cfi_def_cfa_offset 4
 23164              		.cfi_offset 14, -4
 23165 0002 8BB0     		sub	sp, sp, #44
 23166              		.cfi_def_cfa_offset 48
 23167              	.LVL1790:
 23168              	.LBB3210:
 23169              	.LBI3210:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23170              		.loc 1 824 12 is_stmt 1 view .LVU6009
 23171              	.LBB3211:
 825:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 606


 23172              		.loc 1 825 2 view .LVU6010
 825:src/xeq.c     **** }
 23173              		.loc 1 825 9 is_stmt 0 view .LVU6011
 23174 0004 6421     		movs	r1, #100
 23175 0006 01A8     		add	r0, sp, #4
 23176              	.LVL1791:
 825:src/xeq.c     **** }
 23177              		.loc 1 825 9 view .LVU6012
 23178 0008 FFF7FEFF 		bl	getRegister
 23179              	.LVL1792:
 825:src/xeq.c     **** }
 23180              		.loc 1 825 9 view .LVU6013
 23181              	.LBE3211:
 23182              	.LBE3210:
4258:src/xeq.c     **** }
 23183              		.loc 1 4258 2 is_stmt 1 view .LVU6014
4258:src/xeq.c     **** }
 23184              		.loc 1 4258 10 is_stmt 0 view .LVU6015
 23185 000c 0B4B     		ldr	r3, .L1674
 23186 000e 1B68     		ldr	r3, [r3]
 23187 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4258:src/xeq.c     **** }
 23188              		.loc 1 4258 2 view .LVU6016
 23189 0014 DB07     		lsls	r3, r3, #31
 23190 0016 0BD4     		bmi	.L1672
4258:src/xeq.c     **** }
 23191              		.loc 1 4258 2 discriminator 1 view .LVU6017
 23192 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 23193 001c 13F0700F 		tst	r3, #112
 23194 0020 14BF     		ite	ne
 23195 0022 0120     		movne	r0, #1
 23196 0024 0020     		moveq	r0, #0
 23197 0026 FFF7FEFF 		bl	fin_tst
 23198              	.LVL1793:
4259:src/xeq.c     **** 
 23199              		.loc 1 4259 1 discriminator 1 view .LVU6018
 23200 002a 0BB0     		add	sp, sp, #44
 23201              		.cfi_remember_state
 23202              		.cfi_def_cfa_offset 4
 23203              		@ sp needed
 23204 002c 5DF804FB 		ldr	pc, [sp], #4
 23205              	.L1672:
 23206              		.cfi_restore_state
4258:src/xeq.c     **** }
 23207              		.loc 1 4258 2 view .LVU6019
 23208 0030 0020     		movs	r0, #0
 23209 0032 FFF7FEFF 		bl	fin_tst
 23210              	.LVL1794:
4259:src/xeq.c     **** 
 23211              		.loc 1 4259 1 view .LVU6020
 23212 0036 0BB0     		add	sp, sp, #44
 23213              		.cfi_def_cfa_offset 4
 23214              		@ sp needed
 23215 0038 5DF804FB 		ldr	pc, [sp], #4
 23216              	.L1675:
 23217              		.align	2
 23218              	.L1674:
ARM GAS  /tmp/cccVhVyH.s 			page 607


 23219 003c 00000000 		.word	main_ram
 23220              		.cfi_endproc
 23221              	.LFE227:
 23223              		.section	.text.op_entryp,"ax",%progbits
 23224              		.align	1
 23225              		.p2align 2,,3
 23226              		.global	op_entryp
 23227              		.syntax unified
 23228              		.thumb
 23229              		.thumb_func
 23230              		.fpu fpv4-sp-d16
 23232              	op_entryp:
 23233              	.LVL1795:
 23234              	.LFB228:
4261:src/xeq.c     **** 	fin_tst(State.entryp);
 23235              		.loc 1 4261 31 is_stmt 1 view -0
 23236              		.cfi_startproc
 23237              		@ args = 0, pretend = 0, frame = 0
 23238              		@ frame_needed = 0, uses_anonymous_args = 0
 23239              		@ link register save eliminated.
4262:src/xeq.c     **** }
 23240              		.loc 1 4262 2 view .LVU6022
4262:src/xeq.c     **** }
 23241              		.loc 1 4262 15 is_stmt 0 view .LVU6023
 23242 0000 034B     		ldr	r3, .L1677
 23243 0002 1B68     		ldr	r3, [r3]
 23244 0004 93F8DD07 		ldrb	r0, [r3, #2013]	@ zero_extendqisi2
 23245              	.LVL1796:
4262:src/xeq.c     **** }
 23246              		.loc 1 4262 2 view .LVU6024
 23247 0008 C0F30010 		ubfx	r0, r0, #4, #1
 23248 000c FFF7FEBF 		b	fin_tst
 23249              	.LVL1797:
 23250              	.L1678:
 23251              		.align	2
 23252              	.L1677:
 23253 0010 00000000 		.word	main_ram
 23254              		.cfi_endproc
 23255              	.LFE228:
 23257              		.section	.text.reg_decode,"ax",%progbits
 23258              		.align	1
 23259              		.p2align 2,,3
 23260              		.global	reg_decode
 23261              		.syntax unified
 23262              		.thumb
 23263              		.thumb_func
 23264              		.fpu fpv4-sp-d16
 23266              	reg_decode:
 23267              	.LVL1798:
 23268              	.LFB229:
4266:src/xeq.c     **** 	decNumber x, y;
 23269              		.loc 1 4266 51 is_stmt 1 view -0
 23270              		.cfi_startproc
 23271              		@ args = 0, pretend = 0, frame = 80
 23272              		@ frame_needed = 0, uses_anonymous_args = 0
4267:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
 23273              		.loc 1 4267 2 view .LVU6026
ARM GAS  /tmp/cccVhVyH.s 			page 608


4268:src/xeq.c     **** 
 23274              		.loc 1 4268 2 view .LVU6027
4270:src/xeq.c     **** 		bad_mode_error();
 23275              		.loc 1 4270 2 view .LVU6028
4266:src/xeq.c     **** 	decNumber x, y;
 23276              		.loc 1 4266 51 is_stmt 0 view .LVU6029
 23277 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 23278              		.cfi_def_cfa_offset 36
 23279              		.cfi_offset 4, -36
 23280              		.cfi_offset 5, -32
 23281              		.cfi_offset 6, -28
 23282              		.cfi_offset 7, -24
 23283              		.cfi_offset 8, -20
 23284              		.cfi_offset 9, -16
 23285              		.cfi_offset 10, -12
 23286              		.cfi_offset 11, -8
 23287              		.cfi_offset 14, -4
4270:src/xeq.c     **** 		bad_mode_error();
 23288              		.loc 1 4270 6 view .LVU6030
 23289 0004 DFF834A2 		ldr	r10, .L1731+28
 23290 0008 DAF80040 		ldr	r4, [r10]
 23291 000c 94F8E847 		ldrb	r4, [r4, #2024]	@ zero_extendqisi2
4266:src/xeq.c     **** 	decNumber x, y;
 23292              		.loc 1 4266 51 view .LVU6031
 23293 0010 1F46     		mov	r7, r3
4270:src/xeq.c     **** 		bad_mode_error();
 23294              		.loc 1 4270 5 view .LVU6032
 23295 0012 14F00103 		ands	r3, r4, #1
 23296              	.LVL1799:
4266:src/xeq.c     **** 	decNumber x, y;
 23297              		.loc 1 4266 51 view .LVU6033
 23298 0016 95B0     		sub	sp, sp, #84
 23299              		.cfi_def_cfa_offset 120
4270:src/xeq.c     **** 		bad_mode_error();
 23300              		.loc 1 4270 5 view .LVU6034
 23301 0018 0CD0     		beq	.L1680
4271:src/xeq.c     **** 		return 1;
 23302              		.loc 1 4271 3 is_stmt 1 view .LVU6035
 23303              	.LBB3254:
 23304              	.LBI3254:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 23305              		.loc 1 575 6 view .LVU6036
 23306              	.LBE3254:
 576:src/xeq.c     **** }
 23307              		.loc 1 576 2 view .LVU6037
 23308              	.LVL1800:
 23309              	.LBB3265:
 23310              	.LBB3255:
 23311              	.LBI3255:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23312              		.loc 1 546 5 view .LVU6038
 23313              	.LBB3256:
 547:src/xeq.c     **** 		Error = e;
 23314              		.loc 1 547 2 view .LVU6039
 547:src/xeq.c     **** 		Error = e;
 23315              		.loc 1 547 12 is_stmt 0 view .LVU6040
 23316 001a 814B     		ldr	r3, .L1731
ARM GAS  /tmp/cccVhVyH.s 			page 609


 547:src/xeq.c     **** 		Error = e;
 23317              		.loc 1 547 5 view .LVU6041
 23318 001c 1A68     		ldr	r2, [r3]
 23319              	.LVL1801:
 547:src/xeq.c     **** 		Error = e;
 23320              		.loc 1 547 5 view .LVU6042
 23321 001e 1AB1     		cbz	r2, .L1725
 23322              	.LVL1802:
 23323              	.L1708:
 547:src/xeq.c     **** 		Error = e;
 23324              		.loc 1 547 5 view .LVU6043
 23325              	.LBE3256:
 23326              	.LBE3255:
 23327              	.LBE3265:
4272:src/xeq.c     **** 	}
 23328              		.loc 1 4272 10 view .LVU6044
 23329 0020 0120     		movs	r0, #1
4344:src/xeq.c     **** 
 23330              		.loc 1 4344 1 view .LVU6045
 23331 0022 15B0     		add	sp, sp, #84
 23332              		.cfi_remember_state
 23333              		.cfi_def_cfa_offset 36
 23334              		@ sp needed
 23335 0024 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23336              	.LVL1803:
 23337              	.L1725:
 23338              		.cfi_restore_state
 23339              	.LBB3266:
 23340              	.LBB3263:
 23341              	.LBB3261:
 23342              	.LBB3257:
 23343              	.LBI3257:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23344              		.loc 1 546 5 is_stmt 1 view .LVU6046
 23345              	.LBB3258:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23346              		.loc 1 548 3 view .LVU6047
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23347              		.loc 1 548 9 is_stmt 0 view .LVU6048
 23348 0028 0D22     		movs	r2, #13
 23349              	.LBE3258:
 23350              	.LBE3257:
 23351              	.LBE3261:
 23352              	.LBE3263:
 23353              	.LBE3266:
4272:src/xeq.c     **** 	}
 23354              		.loc 1 4272 10 view .LVU6049
 23355 002a 0120     		movs	r0, #1
 23356              	.LVL1804:
 23357              	.LBB3267:
 23358              	.LBB3264:
 23359              	.LBB3262:
 23360              	.LBB3260:
 23361              	.LBB3259:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23362              		.loc 1 548 9 view .LVU6050
 23363 002c 1A60     		str	r2, [r3]
ARM GAS  /tmp/cccVhVyH.s 			page 610


 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 23364              		.loc 1 549 3 is_stmt 1 view .LVU6051
 23365              	.LBE3259:
 23366              	.LBE3260:
 23367              	.LBE3262:
 23368              	.LBE3264:
 23369              	.LBE3267:
4344:src/xeq.c     **** 
 23370              		.loc 1 4344 1 is_stmt 0 view .LVU6052
 23371 002e 15B0     		add	sp, sp, #84
 23372              		.cfi_remember_state
 23373              		.cfi_def_cfa_offset 36
 23374              		@ sp needed
 23375 0030 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23376              	.LVL1805:
 23377              	.L1680:
 23378              		.cfi_restore_state
4344:src/xeq.c     **** 
 23379              		.loc 1 4344 1 view .LVU6053
 23380 0034 8346     		mov	fp, r0
 23381              	.LVL1806:
4344:src/xeq.c     **** 
 23382              		.loc 1 4344 1 view .LVU6054
 23383 0036 8946     		mov	r9, r1
 23384              	.LVL1807:
 23385              	.LBB3268:
 23386              	.LBB3269:
 23387              	.LBB3270:
 23388              	.LBB3271:
 825:src/xeq.c     **** }
 23389              		.loc 1 825 9 view .LVU6055
 23390 0038 02A8     		add	r0, sp, #8
 23391              	.LVL1808:
 825:src/xeq.c     **** }
 23392              		.loc 1 825 9 view .LVU6056
 23393 003a 6421     		movs	r1, #100
 23394              	.LVL1809:
 825:src/xeq.c     **** }
 23395              		.loc 1 825 9 view .LVU6057
 23396 003c 0193     		str	r3, [sp, #4]
 23397 003e 9046     		mov	r8, r2
 23398              	.LVL1810:
 825:src/xeq.c     **** }
 23399              		.loc 1 825 9 view .LVU6058
 23400              	.LBE3271:
 23401              	.LBE3270:
 23402              	.LBE3269:
 23403              	.LBI3268:
4266:src/xeq.c     **** 	decNumber x, y;
 23404              		.loc 1 4266 5 is_stmt 1 view .LVU6059
 23405              	.LBB3351:
4274:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
 23406              		.loc 1 4274 2 view .LVU6060
 23407              	.LBB3273:
 23408              	.LBI3270:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23409              		.loc 1 824 12 view .LVU6061
ARM GAS  /tmp/cccVhVyH.s 			page 611


 23410              	.LBB3272:
 825:src/xeq.c     **** }
 23411              		.loc 1 825 2 view .LVU6062
 825:src/xeq.c     **** }
 23412              		.loc 1 825 9 is_stmt 0 view .LVU6063
 23413 0040 FFF7FEFF 		bl	getRegister
 23414              	.LVL1811:
 825:src/xeq.c     **** }
 23415              		.loc 1 825 9 view .LVU6064
 23416              	.LBE3272:
 23417              	.LBE3273:
4275:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
 23418              		.loc 1 4275 2 is_stmt 1 view .LVU6065
 23419 0044 0522     		movs	r2, #5
 23420 0046 02A9     		add	r1, sp, #8
 23421 0048 0BA8     		add	r0, sp, #44
 23422 004a FFF7FEFF 		bl	dn_mulpow10
 23423              	.LVL1812:
4276:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
 23424              		.loc 1 4276 2 view .LVU6066
 23425 004e 0BA9     		add	r1, sp, #44
 23426 0050 02A8     		add	r0, sp, #8
 23427 0052 FFF7FEFF 		bl	decNumberTrunc
 23428              	.LVL1813:
4277:src/xeq.c     **** 
 23429              		.loc 1 4277 2 view .LVU6067
4277:src/xeq.c     **** 
 23430              		.loc 1 4277 9 is_stmt 0 view .LVU6068
 23431 0056 02A8     		add	r0, sp, #8
 23432 0058 FFF7FEFF 		bl	dn_to_int
 23433              	.LVL1814:
4279:src/xeq.c     **** 		if (!flash)
 23434              		.loc 1 4279 2 is_stmt 1 view .LVU6069
4279:src/xeq.c     **** 		if (!flash)
 23435              		.loc 1 4279 5 is_stmt 0 view .LVU6070
 23436 005c 041E     		subs	r4, r0, #0
 23437 005e 35DB     		blt	.L1682
 23438              	.LVL1815:
4287:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23439              		.loc 1 4287 2 is_stmt 1 view .LVU6071
4287:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23440              		.loc 1 4287 8 is_stmt 0 view .LVU6072
 23441 0060 704A     		ldr	r2, .L1731+4
4289:src/xeq.c     **** 	rsrc /= 100;			// sss
 23442              		.loc 1 4289 6 view .LVU6073
 23443 0062 714E     		ldr	r6, .L1731+8
4293:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23444              		.loc 1 4293 9 view .LVU6074
 23445 0064 7148     		ldr	r0, .L1731+12
 23446              	.LVL1816:
4287:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23447              		.loc 1 4287 8 view .LVU6075
 23448 0066 82FB0432 		smull	r3, r2, r2, r4
 23449 006a E517     		asrs	r5, r4, #31
4288:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23450              		.loc 1 4288 7 view .LVU6076
 23451 006c C5EBA211 		rsb	r1, r5, r2, asr #6
ARM GAS  /tmp/cccVhVyH.s 			page 612


4289:src/xeq.c     **** 	rsrc /= 100;			// sss
 23452              		.loc 1 4289 6 view .LVU6077
 23453 0070 A6FB0136 		umull	r3, r6, r6, r1
4287:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23454              		.loc 1 4287 8 view .LVU6078
 23455 0074 4FF47A77 		mov	r7, #1000
 23456              	.LVL1817:
4289:src/xeq.c     **** 	rsrc /= 100;			// sss
 23457              		.loc 1 4289 6 view .LVU6079
 23458 0078 7209     		lsrs	r2, r6, #5
4287:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23459              		.loc 1 4287 8 view .LVU6080
 23460 007a 07FB1145 		mls	r5, r7, r1, r4
 23461              	.LVL1818:
4288:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23462              		.loc 1 4288 2 is_stmt 1 view .LVU6081
4289:src/xeq.c     **** 	rsrc /= 100;			// sss
 23463              		.loc 1 4289 2 view .LVU6082
4293:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23464              		.loc 1 4293 9 is_stmt 0 view .LVU6083
 23465 007e 8442     		cmp	r4, r0
4289:src/xeq.c     **** 	rsrc /= 100;			// sss
 23466              		.loc 1 4289 6 view .LVU6084
 23467 0080 4FF06407 		mov	r7, #100
4290:src/xeq.c     **** 
 23468              		.loc 1 4290 7 view .LVU6085
 23469 0084 1646     		mov	r6, r2
4289:src/xeq.c     **** 	rsrc /= 100;			// sss
 23470              		.loc 1 4289 6 view .LVU6086
 23471 0086 07FB1212 		mls	r2, r7, r2, r1
 23472              	.LVL1819:
4290:src/xeq.c     **** 
 23473              		.loc 1 4290 2 is_stmt 1 view .LVU6087
4292:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23474              		.loc 1 4292 2 view .LVU6088
4293:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23475              		.loc 1 4293 9 is_stmt 0 view .LVU6089
 23476 008a 5BDA     		bge	.L1683
 23477 008c 6849     		ldr	r1, .L1731+16
 23478 008e 019B     		ldr	r3, [sp, #4]
 23479 0090 8C42     		cmp	r4, r1
 23480 0092 7EDA     		bge	.L1710
 23481              	.LBB3274:
 23482              	.LBI3274:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 23483              		.loc 1 253 14 is_stmt 1 view .LVU6090
 23484              	.LBE3274:
 23485              	.LBE3351:
 23486              	.LBE3268:
 254:src/xeq.c     **** }
 23487              		.loc 1 254 2 view .LVU6091
 23488              	.LVL1820:
 23489              	.LBB3358:
 23490              	.LBB3352:
 23491              	.LBB3280:
 23492              	.LBB3275:
 23493              	.LBI3275:
ARM GAS  /tmp/cccVhVyH.s 			page 613


 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 23494              		.loc 1 241 14 view .LVU6092
 23495              	.LBB3276:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23496              		.loc 1 242 2 view .LVU6093
 23497              	.LBB3277:
 23498              	.LBI3277:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23499              		.loc 1 1121 5 view .LVU6094
 23500              	.LBB3278:
1122:src/xeq.c     **** }
 23501              		.loc 1 1122 2 view .LVU6095
1122:src/xeq.c     **** }
 23502              		.loc 1 1122 12 is_stmt 0 view .LVU6096
 23503 0094 DAF80010 		ldr	r1, [r10]
1122:src/xeq.c     **** }
 23504              		.loc 1 1122 24 view .LVU6097
 23505 0098 B1F8E807 		ldrh	r0, [r1, #2024]
 23506 009c 44F20103 		movw	r3, #16385
 23507              	.LBE3278:
 23508              	.LBE3277:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23509              		.loc 1 242 5 view .LVU6098
 23510 00a0 0340     		ands	r3, r3, r0
 23511 00a2 B3F5804F 		cmp	r3, #16384
 23512              	.LBB3279:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23513              		.loc 1 243 24 view .LVU6099
 23514 00a6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23515              		.loc 1 243 3 is_stmt 1 view .LVU6100
 244:src/xeq.c     **** 	}
 23516              		.loc 1 244 3 view .LVU6101
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23517              		.loc 1 243 13 is_stmt 0 view .LVU6102
 23518 00aa 04BF     		itt	eq
 23519 00ac 0C3B     		subeq	r3, r3, #12
 244:src/xeq.c     **** 	}
 23520              		.loc 1 244 67 view .LVU6103
 23521 00ae 5B10     		asreq	r3, r3, #1
 23522              	.LVL1821:
 23523              	.L1689:
 244:src/xeq.c     **** 	}
 23524              		.loc 1 244 67 view .LVU6104
 23525              	.LBE3279:
 23526              	.LBE3276:
 23527              	.LBE3275:
 23528              	.LBE3280:
4296:src/xeq.c     **** 		goto range_error;
 23529              		.loc 1 4296 5 view .LVU6105
 23530 00b0 B342     		cmp	r3, r6
 23531 00b2 4FF00007 		mov	r7, #0
 23532              	.LVL1822:
4296:src/xeq.c     **** 		goto range_error;
 23533              		.loc 1 4296 2 is_stmt 1 view .LVU6106
4296:src/xeq.c     **** 		goto range_error;
 23534              		.loc 1 4296 5 is_stmt 0 view .LVU6107
ARM GAS  /tmp/cccVhVyH.s 			page 614


 23535 00b6 22DC     		bgt	.L1726
 23536              	.LVL1823:
 23537              	.L1685:
 23538              	.LDL1:
4342:src/xeq.c     **** 	return 1;
 23539              		.loc 1 4342 2 is_stmt 1 view .LVU6108
 23540              	.LBB3281:
 23541              	.LBI3281:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23542              		.loc 1 546 5 view .LVU6109
 23543              	.LBB3282:
 547:src/xeq.c     **** 		Error = e;
 23544              		.loc 1 547 2 view .LVU6110
 547:src/xeq.c     **** 		Error = e;
 23545              		.loc 1 547 12 is_stmt 0 view .LVU6111
 23546 00b8 594B     		ldr	r3, .L1731
 547:src/xeq.c     **** 		Error = e;
 23547              		.loc 1 547 5 view .LVU6112
 23548 00ba 1A68     		ldr	r2, [r3]
 23549 00bc 002A     		cmp	r2, #0
 23550 00be AFD1     		bne	.L1708
 23551              	.LVL1824:
 23552              	.LBB3283:
 23553              	.LBI3283:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23554              		.loc 1 546 5 is_stmt 1 view .LVU6113
 23555              	.LBB3284:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23556              		.loc 1 548 3 view .LVU6114
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23557              		.loc 1 548 9 is_stmt 0 view .LVU6115
 23558 00c0 0822     		movs	r2, #8
 23559              	.LBE3284:
 23560              	.LBE3283:
 23561              	.LBE3282:
 23562              	.LBE3281:
4343:src/xeq.c     **** }
 23563              		.loc 1 4343 9 view .LVU6116
 23564 00c2 0120     		movs	r0, #1
 23565              	.LBB3288:
 23566              	.LBB3287:
 23567              	.LBB3286:
 23568              	.LBB3285:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23569              		.loc 1 548 9 view .LVU6117
 23570 00c4 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 23571              		.loc 1 549 3 is_stmt 1 view .LVU6118
 23572              	.LBE3285:
 23573              	.LBE3286:
 23574              	.LBE3287:
 23575              	.LBE3288:
 23576              	.LBE3352:
 23577              	.LBE3358:
4344:src/xeq.c     **** 
 23578              		.loc 1 4344 1 is_stmt 0 view .LVU6119
 23579 00c6 15B0     		add	sp, sp, #84
ARM GAS  /tmp/cccVhVyH.s 			page 615


 23580              		.cfi_remember_state
 23581              		.cfi_def_cfa_offset 36
 23582              		@ sp needed
 23583 00c8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23584              	.LVL1825:
 23585              	.L1682:
 23586              		.cfi_restore_state
 23587              	.LBB3359:
 23588              	.LBB3353:
4280:src/xeq.c     **** 			goto range_error;
 23589              		.loc 1 4280 3 is_stmt 1 view .LVU6120
4280:src/xeq.c     **** 			goto range_error;
 23590              		.loc 1 4280 6 is_stmt 0 view .LVU6121
 23591 00cc 002F     		cmp	r7, #0
 23592 00ce F3D0     		beq	.L1685
4282:src/xeq.c     **** 	}
 23593              		.loc 1 4282 3 is_stmt 1 view .LVU6122
4287:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23594              		.loc 1 4287 8 is_stmt 0 view .LVU6123
 23595 00d0 544D     		ldr	r5, .L1731+4
4292:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23596              		.loc 1 4292 30 view .LVU6124
 23597 00d2 584A     		ldr	r2, .L1731+20
4289:src/xeq.c     **** 	rsrc /= 100;			// sss
 23598              		.loc 1 4289 6 view .LVU6125
 23599 00d4 544E     		ldr	r6, .L1731+8
4282:src/xeq.c     **** 	}
 23600              		.loc 1 4282 8 view .LVU6126
 23601 00d6 6442     		rsbs	r4, r4, #0
 23602              	.LVL1826:
4287:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23603              		.loc 1 4287 2 is_stmt 1 view .LVU6127
4287:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23604              		.loc 1 4287 8 is_stmt 0 view .LVU6128
 23605 00d8 A5FB0435 		umull	r3, r5, r5, r4
4288:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23606              		.loc 1 4288 7 view .LVU6129
 23607 00dc AB09     		lsrs	r3, r5, #6
4289:src/xeq.c     **** 	rsrc /= 100;			// sss
 23608              		.loc 1 4289 6 view .LVU6130
 23609 00de A6FB0316 		umull	r1, r6, r6, r3
4287:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23610              		.loc 1 4287 8 view .LVU6131
 23611 00e2 4FF47A70 		mov	r0, #1000
4292:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23612              		.loc 1 4292 30 view .LVU6132
 23613 00e6 1168     		ldr	r1, [r2]
4287:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23614              		.loc 1 4287 8 view .LVU6133
 23615 00e8 00FB1345 		mls	r5, r0, r3, r4
 23616              	.LVL1827:
4288:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23617              		.loc 1 4288 2 is_stmt 1 view .LVU6134
4289:src/xeq.c     **** 	rsrc /= 100;			// sss
 23618              		.loc 1 4289 2 view .LVU6135
4289:src/xeq.c     **** 	rsrc /= 100;			// sss
 23619              		.loc 1 4289 6 is_stmt 0 view .LVU6136
ARM GAS  /tmp/cccVhVyH.s 			page 616


 23620 00ec 7209     		lsrs	r2, r6, #5
 23621 00ee 6420     		movs	r0, #100
4290:src/xeq.c     **** 
 23622              		.loc 1 4290 7 view .LVU6137
 23623 00f0 1646     		mov	r6, r2
4289:src/xeq.c     **** 	rsrc /= 100;			// sss
 23624              		.loc 1 4289 6 view .LVU6138
 23625 00f2 00FB1232 		mls	r2, r0, r2, r3
 23626              	.LVL1828:
4290:src/xeq.c     **** 
 23627              		.loc 1 4290 2 is_stmt 1 view .LVU6139
4292:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23628              		.loc 1 4292 2 view .LVU6140
4293:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23629              		.loc 1 4293 9 is_stmt 0 view .LVU6141
 23630 00f6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 23631              	.LVL1829:
 23632              	.L1686:
4296:src/xeq.c     **** 		goto range_error;
 23633              		.loc 1 4296 2 is_stmt 1 view .LVU6142
4296:src/xeq.c     **** 		goto range_error;
 23634              		.loc 1 4296 5 is_stmt 0 view .LVU6143
 23635 00fa B342     		cmp	r3, r6
 23636 00fc DCDD     		ble	.L1685
 23637              	.L1726:
4299:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 23638              		.loc 1 4299 2 is_stmt 1 view .LVU6144
4299:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 23639              		.loc 1 4299 5 is_stmt 0 view .LVU6145
 23640 00fe B8F1000F 		cmp	r8, #0
 23641 0102 29D0     		beq	.L1690
4300:src/xeq.c     **** 
 23642              		.loc 1 4300 3 is_stmt 1 view .LVU6146
4300:src/xeq.c     **** 
 23643              		.loc 1 4300 52 is_stmt 0 view .LVU6147
 23644 0104 6F2D     		cmp	r5, #111
 23645 0106 2BDD     		ble	.L1691
 23646              	.LBB3289:
 23647              	.LBI3289:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 23648              		.loc 1 233 5 is_stmt 1 view .LVU6148
 23649              	.LBE3289:
 23650              	.LBE3353:
 23651              	.LBE3359:
 234:src/xeq.c     **** }
 23652              		.loc 1 234 2 view .LVU6149
 23653              	.LVL1830:
 23654              	.LBB3360:
 23655              	.LBB3354:
 23656              	.LBB3314:
 23657              	.LBB3290:
 23658              	.LBI3290:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 23659              		.loc 1 225 5 view .LVU6150
 23660              	.LBB3291:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23661              		.loc 1 226 2 view .LVU6151
ARM GAS  /tmp/cccVhVyH.s 			page 617


 23662              	.LBB3292:
 23663              	.LBI3292:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23664              		.loc 1 1121 5 view .LVU6152
 23665              	.LBB3293:
1122:src/xeq.c     **** }
 23666              		.loc 1 1122 2 view .LVU6153
1122:src/xeq.c     **** }
 23667              		.loc 1 1122 12 is_stmt 0 view .LVU6154
 23668 0108 DAF80010 		ldr	r1, [r10]
 23669              	.LVL1831:
1122:src/xeq.c     **** }
 23670              		.loc 1 1122 12 view .LVU6155
 23671              	.LBE3293:
 23672              	.LBE3292:
 227:src/xeq.c     **** }
 23673              		.loc 1 227 2 is_stmt 1 view .LVU6156
 23674              	.LBB3296:
 23675              	.LBI3296:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 23676              		.loc 1 217 5 view .LVU6157
 23677              	.LBB3297:
 218:src/xeq.c     **** }
 23678              		.loc 1 218 2 view .LVU6158
 218:src/xeq.c     **** }
 23679              		.loc 1 218 9 is_stmt 0 view .LVU6159
 23680 010c B1F8DE07 		ldrh	r0, [r1, #2014]
 23681 0110 40F34A10 		sbfx	r0, r0, #5, #11
 218:src/xeq.c     **** }
 23682              		.loc 1 218 57 view .LVU6160
 23683 0114 0028     		cmp	r0, #0
 23684 0116 6BDB     		blt	.L1727
 23685              	.LVL1832:
 218:src/xeq.c     **** }
 23686              		.loc 1 218 57 view .LVU6161
 23687              	.LBE3297:
 23688              	.LBE3296:
 23689              	.LBE3291:
 23690              	.LBE3290:
 23691              	.LBE3314:
4302:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23692              		.loc 1 4302 3 is_stmt 1 view .LVU6162
 23693              	.LBB3315:
 23694              	.LBB3312:
 23695              	.LBB3310:
 23696              	.LBB3303:
 23697              	.LBB3298:
 23698 0118 0021     		movs	r1, #0
 23699              	.LVL1833:
4302:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23700              		.loc 1 4302 3 is_stmt 0 view .LVU6163
 23701              	.LBE3298:
 23702              	.LBE3303:
 23703              	.LBE3310:
 23704              	.LBE3312:
 23705              	.LBE3315:
4302:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
ARM GAS  /tmp/cccVhVyH.s 			page 618


 23706              		.loc 1 4302 6 view .LVU6164
 23707 011a 92B3     		cbz	r2, .L1693
 23708              	.LVL1834:
 23709              	.L1694:
4321:src/xeq.c     **** 		if (rdest + num > mx_dest)
 23710              		.loc 1 4321 4 is_stmt 1 view .LVU6165
4321:src/xeq.c     **** 		if (rdest + num > mx_dest)
 23711              		.loc 1 4321 12 is_stmt 0 view .LVU6166
 23712 011c 7031     		adds	r1, r1, #112
 23713              	.LVL1835:
 23714              	.L1697:
4322:src/xeq.c     **** 			goto range_error;
 23715              		.loc 1 4322 3 is_stmt 1 view .LVU6167
4322:src/xeq.c     **** 			goto range_error;
 23716              		.loc 1 4322 13 is_stmt 0 view .LVU6168
 23717 011e A818     		adds	r0, r5, r2
4322:src/xeq.c     **** 			goto range_error;
 23718              		.loc 1 4322 6 view .LVU6169
 23719 0120 8842     		cmp	r0, r1
 23720 0122 C9DC     		bgt	.L1685
4325:src/xeq.c     **** 	}
 23721              		.loc 1 4325 3 is_stmt 1 view .LVU6170
4325:src/xeq.c     **** 	}
 23722              		.loc 1 4325 6 is_stmt 0 view .LVU6171
 23723 0124 C8F80050 		str	r5, [r8]
 23724 0128 B118     		adds	r1, r6, r2
 23725              	.LVL1836:
 23726              	.L1703:
4332:src/xeq.c     **** 		goto range_error;
 23727              		.loc 1 4332 2 is_stmt 1 view .LVU6172
4332:src/xeq.c     **** 		goto range_error;
 23728              		.loc 1 4332 5 is_stmt 0 view .LVU6173
 23729 012a 8B42     		cmp	r3, r1
 23730 012c C4DB     		blt	.L1685
 23731              	.L1705:
4336:src/xeq.c     **** 	*n = num;
 23732              		.loc 1 4336 2 is_stmt 1 view .LVU6174
4336:src/xeq.c     **** 	*n = num;
 23733              		.loc 1 4336 37 is_stmt 0 view .LVU6175
 23734 012e 0FB1     		cbz	r7, .L1706
4336:src/xeq.c     **** 	*n = num;
 23735              		.loc 1 4336 37 view .LVU6176
 23736 0130 06F57A76 		add	r6, r6, #1000
 23737              	.LVL1837:
 23738              	.L1706:
4339:src/xeq.c     **** 
 23739              		.loc 1 4339 9 view .LVU6177
 23740 0134 0020     		movs	r0, #0
4336:src/xeq.c     **** 	*n = num;
 23741              		.loc 1 4336 5 view .LVU6178
 23742 0136 CBF80060 		str	r6, [fp]
4337:src/xeq.c     **** 
 23743              		.loc 1 4337 2 is_stmt 1 view .LVU6179
4337:src/xeq.c     **** 
 23744              		.loc 1 4337 5 is_stmt 0 view .LVU6180
 23745 013a C9F80020 		str	r2, [r9]
4339:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 619


 23746              		.loc 1 4339 2 is_stmt 1 view .LVU6181
 23747              	.LBE3354:
 23748              	.LBE3360:
4344:src/xeq.c     **** 
 23749              		.loc 1 4344 1 is_stmt 0 view .LVU6182
 23750 013e 15B0     		add	sp, sp, #84
 23751              		.cfi_remember_state
 23752              		.cfi_def_cfa_offset 36
 23753              		@ sp needed
 23754 0140 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23755              	.LVL1838:
 23756              	.L1683:
 23757              		.cfi_restore_state
 23758              	.LBB3361:
 23759              	.LBB3355:
 23760              	.LBB3316:
 23761              	.LBI3316:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 23762              		.loc 1 233 5 is_stmt 1 view .LVU6183
 23763              	.LBE3316:
 23764              	.LBE3355:
 23765              	.LBE3361:
 234:src/xeq.c     **** }
 23766              		.loc 1 234 2 view .LVU6184
 23767              	.LBB3362:
 23768              	.LBB3356:
 23769              	.LBB3337:
 23770              	.LBB3317:
 23771              	.LBI3317:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 23772              		.loc 1 225 5 view .LVU6185
 23773              	.LBB3318:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23774              		.loc 1 226 2 view .LVU6186
 23775              	.LBB3319:
 23776              	.LBI3319:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23777              		.loc 1 1121 5 view .LVU6187
 23778              	.LBB3320:
1122:src/xeq.c     **** }
 23779              		.loc 1 1122 2 view .LVU6188
1122:src/xeq.c     **** }
 23780              		.loc 1 1122 12 is_stmt 0 view .LVU6189
 23781 0144 DAF80030 		ldr	r3, [r10]
 23782              	.LVL1839:
1122:src/xeq.c     **** }
 23783              		.loc 1 1122 12 view .LVU6190
 23784              	.LBE3320:
 23785              	.LBE3319:
 227:src/xeq.c     **** }
 23786              		.loc 1 227 2 is_stmt 1 view .LVU6191
 23787              	.LBB3323:
 23788              	.LBI3323:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 23789              		.loc 1 217 5 view .LVU6192
 23790              	.LBB3324:
 218:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 620


 23791              		.loc 1 218 2 view .LVU6193
 218:src/xeq.c     **** }
 23792              		.loc 1 218 9 is_stmt 0 view .LVU6194
 23793 0148 B3F8DE17 		ldrh	r1, [r3, #2014]
 23794 014c 41F34A11 		sbfx	r1, r1, #5, #11
 218:src/xeq.c     **** }
 23795              		.loc 1 218 57 view .LVU6195
 23796 0150 0029     		cmp	r1, #0
 23797 0152 38DB     		blt	.L1728
 23798 0154 7023     		movs	r3, #112
 23799              	.LVL1840:
 218:src/xeq.c     **** }
 23800              		.loc 1 218 57 view .LVU6196
 23801 0156 ABE7     		b	.L1689
 23802              	.LVL1841:
 23803              	.L1690:
 218:src/xeq.c     **** }
 23804              		.loc 1 218 57 view .LVU6197
 23805              	.LBE3324:
 23806              	.LBE3323:
 23807              	.LBE3318:
 23808              	.LBE3317:
 23809              	.LBE3337:
4328:src/xeq.c     **** 			num = mx_src - rsrc;
 23810              		.loc 1 4328 3 is_stmt 1 view .LVU6198
4328:src/xeq.c     **** 			num = mx_src - rsrc;
 23811              		.loc 1 4328 6 is_stmt 0 view .LVU6199
 23812 0158 002A     		cmp	r2, #0
 23813 015a 32D1     		bne	.L1729
4329:src/xeq.c     **** 		}
 23814              		.loc 1 4329 4 is_stmt 1 view .LVU6200
4329:src/xeq.c     **** 		}
 23815              		.loc 1 4329 8 is_stmt 0 view .LVU6201
 23816 015c 9A1B     		subs	r2, r3, r6
 23817              	.LVL1842:
4332:src/xeq.c     **** 		goto range_error;
 23818              		.loc 1 4332 2 is_stmt 1 view .LVU6202
 23819 015e E6E7     		b	.L1705
 23820              	.L1691:
 23821              	.LBB3338:
 23822              	.LBI3338:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 23823              		.loc 1 253 14 view .LVU6203
 23824              	.LBE3338:
 23825              	.LBE3356:
 23826              	.LBE3362:
 254:src/xeq.c     **** }
 23827              		.loc 1 254 2 view .LVU6204
 23828              	.LVL1843:
 23829              	.LBB3363:
 23830              	.LBB3357:
 23831              	.LBB3347:
 23832              	.LBB3339:
 23833              	.LBI3339:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 23834              		.loc 1 241 14 view .LVU6205
 23835              	.LBB3340:
ARM GAS  /tmp/cccVhVyH.s 			page 621


 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23836              		.loc 1 242 2 view .LVU6206
 23837              	.LBB3341:
 23838              	.LBI3341:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23839              		.loc 1 1121 5 view .LVU6207
 23840              	.LBB3342:
1122:src/xeq.c     **** }
 23841              		.loc 1 1122 2 view .LVU6208
1122:src/xeq.c     **** }
 23842              		.loc 1 1122 12 is_stmt 0 view .LVU6209
 23843 0160 DAF80000 		ldr	r0, [r10]
1122:src/xeq.c     **** }
 23844              		.loc 1 1122 24 view .LVU6210
 23845 0164 B0F8E8C7 		ldrh	ip, [r0, #2024]
 23846 0168 44F20101 		movw	r1, #16385
 23847              	.LBE3342:
 23848              	.LBE3341:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23849              		.loc 1 242 5 view .LVU6211
 23850 016c 01EA0C01 		and	r1, r1, ip
 23851 0170 B1F5804F 		cmp	r1, #16384
 23852              	.LBB3343:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23853              		.loc 1 243 24 view .LVU6212
 23854 0174 90F8CF17 		ldrb	r1, [r0, #1999]	@ zero_extendqisi2
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23855              		.loc 1 243 3 is_stmt 1 view .LVU6213
 244:src/xeq.c     **** 	}
 23856              		.loc 1 244 3 view .LVU6214
 23857              	.LVL1844:
 244:src/xeq.c     **** 	}
 23858              		.loc 1 244 3 is_stmt 0 view .LVU6215
 23859              	.LBE3343:
 23860              	.LBE3340:
 23861              	.LBE3339:
 23862              	.LBE3347:
4302:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23863              		.loc 1 4302 3 is_stmt 1 view .LVU6216
 23864              	.LBB3348:
 23865              	.LBB3346:
 23866              	.LBB3345:
 23867              	.LBB3344:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23868              		.loc 1 243 13 is_stmt 0 view .LVU6217
 23869 0178 04BF     		itt	eq
 23870 017a 0C39     		subeq	r1, r1, #12
 244:src/xeq.c     **** 	}
 23871              		.loc 1 244 67 view .LVU6218
 23872 017c 4910     		asreq	r1, r1, #1
 23873              	.LBE3344:
 23874              	.LBE3345:
 23875              	.LBE3346:
 23876              	.LBE3348:
4302:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23877              		.loc 1 4302 6 view .LVU6219
 23878 017e 002A     		cmp	r2, #0
ARM GAS  /tmp/cccVhVyH.s 			page 622


 23879 0180 CDD1     		bne	.L1697
 23880              	.L1693:
4304:src/xeq.c     **** 				// source & destination in different memory areas
 23881              		.loc 1 4304 4 is_stmt 1 view .LVU6220
4304:src/xeq.c     **** 				// source & destination in different memory areas
 23882              		.loc 1 4304 7 is_stmt 0 view .LVU6221
 23883 0182 4FB1     		cbz	r7, .L1730
 23884              	.LVL1845:
 23885              	.L1698:
4306:src/xeq.c     **** 			else {
 23886              		.loc 1 4306 5 is_stmt 1 view .LVU6222
4306:src/xeq.c     **** 			else {
 23887              		.loc 1 4306 9 is_stmt 0 view .LVU6223
 23888 0184 8B42     		cmp	r3, r1
 23889 0186 1A46     		mov	r2, r3
 23890 0188 A8BF     		it	ge
 23891 018a 0A46     		movge	r2, r1
 23892              	.LVL1846:
 23893              	.L1700:
4320:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23894              		.loc 1 4320 3 is_stmt 1 view .LVU6224
4320:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23895              		.loc 1 4320 6 is_stmt 0 view .LVU6225
 23896 018c 6F2D     		cmp	r5, #111
 23897 018e C6DD     		ble	.L1697
 23898 0190 C4E7     		b	.L1694
 23899              	.LVL1847:
 23900              	.L1710:
4320:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23901              		.loc 1 4320 6 view .LVU6226
 23902 0192 1F46     		mov	r7, r3
4293:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23903              		.loc 1 4293 9 view .LVU6227
 23904 0194 7023     		movs	r3, #112
 23905 0196 B0E7     		b	.L1686
 23906              	.LVL1848:
 23907              	.L1730:
4304:src/xeq.c     **** 				// source & destination in different memory areas
 23908              		.loc 1 4304 42 view .LVU6228
 23909 0198 244A     		ldr	r2, .L1731+12
 23910              	.LVL1849:
4304:src/xeq.c     **** 				// source & destination in different memory areas
 23911              		.loc 1 4304 14 view .LVU6229
 23912 019a 9442     		cmp	r4, r2
 23913 019c B4BF     		ite	lt
 23914 019e 0024     		movlt	r4, #0
 23915 01a0 0124     		movge	r4, #1
 23916 01a2 6F2D     		cmp	r5, #111
 23917 01a4 D4BF     		ite	le
 23918 01a6 0022     		movle	r2, #0
 23919 01a8 0122     		movgt	r2, #1
 23920 01aa 9442     		cmp	r4, r2
 23921 01ac EAD1     		bne	.L1698
4308:src/xeq.c     **** 					num = mx_src - rsrc;
 23922              		.loc 1 4308 5 is_stmt 1 view .LVU6230
4308:src/xeq.c     **** 					num = mx_src - rsrc;
 23923              		.loc 1 4308 8 is_stmt 0 view .LVU6231
ARM GAS  /tmp/cccVhVyH.s 			page 623


 23924 01ae B542     		cmp	r5, r6
4309:src/xeq.c     **** 					q = rsrc - rdest;
 23925              		.loc 1 4309 6 is_stmt 1 view .LVU6232
4313:src/xeq.c     **** 					q = rdest - rsrc;
 23926              		.loc 1 4313 10 is_stmt 0 view .LVU6233
 23927 01b0 A7BF     		ittee	ge
 23928 01b2 4A1B     		subge	r2, r1, r5
4314:src/xeq.c     **** 				}
 23929              		.loc 1 4314 8 view .LVU6234
 23930 01b4 A81B     		subge	r0, r5, r6
4309:src/xeq.c     **** 					q = rsrc - rdest;
 23931              		.loc 1 4309 10 view .LVU6235
 23932 01b6 9A1B     		sublt	r2, r3, r6
4310:src/xeq.c     **** 				}
 23933              		.loc 1 4310 6 is_stmt 1 view .LVU6236
4310:src/xeq.c     **** 				}
 23934              		.loc 1 4310 8 is_stmt 0 view .LVU6237
 23935 01b8 701B     		sublt	r0, r6, r5
4313:src/xeq.c     **** 					q = rdest - rsrc;
 23936              		.loc 1 4313 6 is_stmt 1 view .LVU6238
 23937              	.LVL1850:
4314:src/xeq.c     **** 				}
 23938              		.loc 1 4314 6 view .LVU6239
4316:src/xeq.c     **** 					num = q;
 23939              		.loc 1 4316 5 view .LVU6240
 23940 01ba 8242     		cmp	r2, r0
 23941 01bc A8BF     		it	ge
 23942 01be 0246     		movge	r2, r0
 23943              	.LVL1851:
4316:src/xeq.c     **** 					num = q;
 23944              		.loc 1 4316 5 is_stmt 0 view .LVU6241
 23945 01c0 E4E7     		b	.L1700
 23946              	.LVL1852:
 23947              	.L1729:
4316:src/xeq.c     **** 					num = q;
 23948              		.loc 1 4316 5 view .LVU6242
 23949 01c2 9119     		adds	r1, r2, r6
 23950 01c4 B1E7     		b	.L1703
 23951              	.LVL1853:
 23952              	.L1728:
 23953              	.LBB3349:
 23954              	.LBB3336:
 23955              	.LBB3335:
 23956              	.LBB3329:
 23957              	.LBB3321:
1122:src/xeq.c     **** }
 23958              		.loc 1 1122 24 view .LVU6243
 23959 01c6 B3F8E877 		ldrh	r7, [r3, #2024]
 23960              	.LBE3321:
 23961              	.LBE3329:
 23962              	.LBB3330:
 23963              	.LBB3325:
 218:src/xeq.c     **** }
 23964              		.loc 1 218 25 view .LVU6244
 23965 01ca 1B48     		ldr	r0, .L1731+24
 23966              	.LBE3325:
 23967              	.LBE3330:
ARM GAS  /tmp/cccVhVyH.s 			page 624


 23968              	.LBB3331:
 23969              	.LBB3322:
1122:src/xeq.c     **** }
 23970              		.loc 1 1122 24 view .LVU6245
 23971 01cc 44F20103 		movw	r3, #16385
 23972              	.LVL1854:
1122:src/xeq.c     **** }
 23973              		.loc 1 1122 24 view .LVU6246
 23974              	.LBE3322:
 23975              	.LBE3331:
 23976              	.LBB3332:
 23977              	.LBB3326:
 218:src/xeq.c     **** }
 23978              		.loc 1 218 25 view .LVU6247
 23979 01d0 0068     		ldr	r0, [r0]
 23980              	.LBE3326:
 23981              	.LBE3332:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23982              		.loc 1 226 73 view .LVU6248
 23983 01d2 3B40     		ands	r3, r3, r7
 23984 01d4 A3F58043 		sub	r3, r3, #16384
 23985              	.LBB3333:
 23986              	.LBB3327:
 218:src/xeq.c     **** }
 23987              		.loc 1 218 57 view .LVU6249
 23988 01d8 30F81110 		ldrh	r1, [r0, r1, lsl #1]
 23989              	.LBE3327:
 23990              	.LBE3333:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23991              		.loc 1 226 73 view .LVU6250
 23992 01dc B3FA83F3 		clz	r3, r3
 23993 01e0 5B09     		lsrs	r3, r3, #5
 23994 01e2 0233     		adds	r3, r3, #2
 23995              	.LBB3334:
 23996              	.LBB3328:
 218:src/xeq.c     **** }
 23997              		.loc 1 218 57 view .LVU6251
 23998 01e4 C1F30B01 		ubfx	r1, r1, #0, #12
 23999 01e8 41FA03F3 		asr	r3, r1, r3
 24000 01ec 7033     		adds	r3, r3, #112
 24001 01ee 5FE7     		b	.L1689
 24002              	.LVL1855:
 24003              	.L1727:
 218:src/xeq.c     **** }
 24004              		.loc 1 218 57 view .LVU6252
 24005              	.LBE3328:
 24006              	.LBE3334:
 24007              	.LBE3335:
 24008              	.LBE3336:
 24009              	.LBE3349:
 24010              	.LBB3350:
 24011              	.LBB3313:
 24012              	.LBB3311:
 24013              	.LBB3304:
 24014              	.LBB3294:
1122:src/xeq.c     **** }
 24015              		.loc 1 1122 24 view .LVU6253
ARM GAS  /tmp/cccVhVyH.s 			page 625


 24016 01f0 B1F8E8E7 		ldrh	lr, [r1, #2024]
 24017              	.LBE3294:
 24018              	.LBE3304:
 24019              	.LBB3305:
 24020              	.LBB3299:
 218:src/xeq.c     **** }
 24021              		.loc 1 218 25 view .LVU6254
 24022 01f4 DFF840C0 		ldr	ip, .L1731+24
 24023              	.LBE3299:
 24024              	.LBE3305:
 24025              	.LBB3306:
 24026              	.LBB3295:
1122:src/xeq.c     **** }
 24027              		.loc 1 1122 24 view .LVU6255
 24028 01f8 44F20101 		movw	r1, #16385
 24029              	.LVL1856:
1122:src/xeq.c     **** }
 24030              		.loc 1 1122 24 view .LVU6256
 24031              	.LBE3295:
 24032              	.LBE3306:
 24033              	.LBB3307:
 24034              	.LBB3300:
 218:src/xeq.c     **** }
 24035              		.loc 1 218 25 view .LVU6257
 24036 01fc DCF800C0 		ldr	ip, [ip]
 24037              	.LBE3300:
 24038              	.LBE3307:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 24039              		.loc 1 226 73 view .LVU6258
 24040 0200 01EA0E01 		and	r1, r1, lr
 24041 0204 A1F58041 		sub	r1, r1, #16384
 24042              	.LBB3308:
 24043              	.LBB3301:
 218:src/xeq.c     **** }
 24044              		.loc 1 218 57 view .LVU6259
 24045 0208 3CF810C0 		ldrh	ip, [ip, r0, lsl #1]
 24046              	.LBE3301:
 24047              	.LBE3308:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 24048              		.loc 1 226 73 view .LVU6260
 24049 020c B1FA81F1 		clz	r1, r1
 24050 0210 4909     		lsrs	r1, r1, #5
 24051 0212 881C     		adds	r0, r1, #2
 24052              	.LBB3309:
 24053              	.LBB3302:
 218:src/xeq.c     **** }
 24054              		.loc 1 218 57 view .LVU6261
 24055 0214 CCF30B01 		ubfx	r1, ip, #0, #12
 24056 0218 0141     		asrs	r1, r1, r0
 24057              	.LVL1857:
 218:src/xeq.c     **** }
 24058              		.loc 1 218 57 view .LVU6262
 24059              	.LBE3302:
 24060              	.LBE3309:
 24061              	.LBE3311:
 24062              	.LBE3313:
 24063              	.LBE3350:
ARM GAS  /tmp/cccVhVyH.s 			page 626


4302:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 24064              		.loc 1 4302 3 is_stmt 1 view .LVU6263
4302:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 24065              		.loc 1 4302 6 is_stmt 0 view .LVU6264
 24066 021a 002A     		cmp	r2, #0
 24067 021c B1D0     		beq	.L1693
 24068 021e 7DE7     		b	.L1694
 24069              	.L1732:
 24070              		.align	2
 24071              	.L1731:
 24072 0220 00000000 		.word	Error
 24073 0224 D34D6210 		.word	274877907
 24074 0228 1F85EB51 		.word	1374389535
 24075 022c 00E6AA00 		.word	11200000
 24076 0230 80969800 		.word	10000000
 24077 0234 00000000 		.word	backup_ram
 24078 0238 00000000 		.word	RetStk
 24079 023c 00000000 		.word	main_ram
 24080              	.LBE3357:
 24081              	.LBE3363:
 24082              		.cfi_endproc
 24083              	.LFE229:
 24085              		.section	.text.op_regcopy,"ax",%progbits
 24086              		.align	1
 24087              		.p2align 2,,3
 24088              		.global	op_regcopy
 24089              		.syntax unified
 24090              		.thumb
 24091              		.thumb_func
 24092              		.fpu fpv4-sp-d16
 24094              	op_regcopy:
 24095              	.LVL1858:
 24096              	.LFB230:
4346:src/xeq.c     **** 	int s, n, d;
 24097              		.loc 1 4346 32 is_stmt 1 view -0
 24098              		.cfi_startproc
 24099              		@ args = 0, pretend = 0, frame = 16
 24100              		@ frame_needed = 0, uses_anonymous_args = 0
4347:src/xeq.c     **** 
 24101              		.loc 1 4347 2 view .LVU6266
4349:src/xeq.c     **** 		return;
 24102              		.loc 1 4349 2 view .LVU6267
4346:src/xeq.c     **** 	int s, n, d;
 24103              		.loc 1 4346 32 is_stmt 0 view .LVU6268
 24104 0000 10B5     		push	{r4, lr}
 24105              		.cfi_def_cfa_offset 8
 24106              		.cfi_offset 4, -8
 24107              		.cfi_offset 14, -4
 24108 0002 84B0     		sub	sp, sp, #16
 24109              		.cfi_def_cfa_offset 24
4349:src/xeq.c     **** 		return;
 24110              		.loc 1 4349 6 view .LVU6269
 24111 0004 0123     		movs	r3, #1
 24112 0006 03AA     		add	r2, sp, #12
 24113 0008 02A9     		add	r1, sp, #8
 24114 000a 01A8     		add	r0, sp, #4
 24115              	.LVL1859:
ARM GAS  /tmp/cccVhVyH.s 			page 627


4349:src/xeq.c     **** 		return;
 24116              		.loc 1 4349 6 view .LVU6270
 24117 000c FFF7FEFF 		bl	reg_decode
 24118              	.LVL1860:
4349:src/xeq.c     **** 		return;
 24119              		.loc 1 4349 5 view .LVU6271
 24120 0010 B8B9     		cbnz	r0, .L1733
4351:src/xeq.c     **** }
 24121              		.loc 1 4351 2 is_stmt 1 view .LVU6272
 24122 0012 0398     		ldr	r0, [sp, #12]
 24123 0014 FFF7FEFF 		bl	get_reg_n
 24124              	.LVL1861:
 24125 0018 0446     		mov	r4, r0
 24126 001a 0198     		ldr	r0, [sp, #4]
 24127 001c FFF7FEFF 		bl	get_reg_n
 24128              	.LVL1862:
 24129              	.LBB3364:
 24130              	.LBB3365:
 24131              	.LBB3366:
 24132              	.LBB3367:
1122:src/xeq.c     **** }
 24133              		.loc 1 1122 24 is_stmt 0 view .LVU6273
 24134 0020 094B     		ldr	r3, .L1738
 24135              	.LBE3367:
 24136              	.LBE3366:
 24137              	.LBE3365:
 24138              	.LBE3364:
4351:src/xeq.c     **** }
 24139              		.loc 1 4351 2 view .LVU6274
 24140 0022 029A     		ldr	r2, [sp, #8]
 24141              	.LVL1863:
 24142              	.LBB3374:
 24143              	.LBB3372:
 24144              	.LBB3370:
 24145              	.LBB3368:
1122:src/xeq.c     **** }
 24146              		.loc 1 1122 24 view .LVU6275
 24147 0024 1B68     		ldr	r3, [r3]
 24148 0026 B3F8E817 		ldrh	r1, [r3, #2024]
 24149 002a 44F20103 		movw	r3, #16385
 24150              	.LBE3368:
 24151              	.LBE3370:
1541:src/xeq.c     **** 		n <<= 1;
 24152              		.loc 1 1541 5 view .LVU6276
 24153 002e 0B40     		ands	r3, r3, r1
 24154 0030 B3F5804F 		cmp	r3, #16384
1542:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 24155              		.loc 1 1542 5 view .LVU6277
 24156 0034 08BF     		it	eq
 24157 0036 5200     		lsleq	r2, r2, #1
 24158              	.LBE3372:
 24159              	.LBE3374:
4351:src/xeq.c     **** }
 24160              		.loc 1 4351 2 view .LVU6278
 24161 0038 0146     		mov	r1, r0
 24162              	.LVL1864:
 24163              	.LBB3375:
ARM GAS  /tmp/cccVhVyH.s 			page 628


 24164              	.LBI3364:
1540:src/xeq.c     **** 	if (is_dblmode())
 24165              		.loc 1 1540 6 is_stmt 1 view .LVU6279
 24166              	.LBB3373:
1541:src/xeq.c     **** 		n <<= 1;
 24167              		.loc 1 1541 2 view .LVU6280
 24168              	.LBB3371:
 24169              	.LBI3366:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 24170              		.loc 1 1121 5 view .LVU6281
 24171              	.LBB3369:
1122:src/xeq.c     **** }
 24172              		.loc 1 1122 2 view .LVU6282
 24173              	.LBE3369:
 24174              	.LBE3371:
1542:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 24175              		.loc 1 1542 3 view .LVU6283
1543:src/xeq.c     **** }
 24176              		.loc 1 1543 2 view .LVU6284
 24177 003a D200     		lsls	r2, r2, #3
 24178              	.LVL1865:
1543:src/xeq.c     **** }
 24179              		.loc 1 1543 2 is_stmt 0 view .LVU6285
 24180 003c 2046     		mov	r0, r4
 24181              	.LVL1866:
1543:src/xeq.c     **** }
 24182              		.loc 1 1543 2 view .LVU6286
 24183 003e FFF7FEFF 		bl	xcopy
 24184              	.LVL1867:
 24185              	.L1733:
1543:src/xeq.c     **** }
 24186              		.loc 1 1543 2 view .LVU6287
 24187              	.LBE3373:
 24188              	.LBE3375:
4352:src/xeq.c     **** 
 24189              		.loc 1 4352 1 view .LVU6288
 24190 0042 04B0     		add	sp, sp, #16
 24191              		.cfi_def_cfa_offset 8
 24192              		@ sp needed
 24193 0044 10BD     		pop	{r4, pc}
 24194              	.L1739:
 24195 0046 00BF     		.align	2
 24196              	.L1738:
 24197 0048 00000000 		.word	main_ram
 24198              		.cfi_endproc
 24199              	.LFE230:
 24201              		.section	.text.op_regswap,"ax",%progbits
 24202              		.align	1
 24203              		.p2align 2,,3
 24204              		.global	op_regswap
 24205              		.syntax unified
 24206              		.thumb
 24207              		.thumb_func
 24208              		.fpu fpv4-sp-d16
 24210              	op_regswap:
 24211              	.LVL1868:
 24212              	.LFB231:
ARM GAS  /tmp/cccVhVyH.s 			page 629


4354:src/xeq.c     **** 	int s, n, d, i;
 24213              		.loc 1 4354 32 is_stmt 1 view -0
 24214              		.cfi_startproc
 24215              		@ args = 0, pretend = 0, frame = 16
 24216              		@ frame_needed = 0, uses_anonymous_args = 0
4355:src/xeq.c     **** 
 24217              		.loc 1 4355 2 view .LVU6290
4357:src/xeq.c     **** 		return;
 24218              		.loc 1 4357 2 view .LVU6291
4354:src/xeq.c     **** 	int s, n, d, i;
 24219              		.loc 1 4354 32 is_stmt 0 view .LVU6292
 24220 0000 30B5     		push	{r4, r5, lr}
 24221              		.cfi_def_cfa_offset 12
 24222              		.cfi_offset 4, -12
 24223              		.cfi_offset 5, -8
 24224              		.cfi_offset 14, -4
 24225 0002 85B0     		sub	sp, sp, #20
 24226              		.cfi_def_cfa_offset 32
4357:src/xeq.c     **** 		return;
 24227              		.loc 1 4357 6 view .LVU6293
 24228 0004 0023     		movs	r3, #0
 24229 0006 03AA     		add	r2, sp, #12
 24230 0008 02A9     		add	r1, sp, #8
 24231 000a 01A8     		add	r0, sp, #4
 24232              	.LVL1869:
4357:src/xeq.c     **** 		return;
 24233              		.loc 1 4357 6 view .LVU6294
 24234 000c FFF7FEFF 		bl	reg_decode
 24235              	.LVL1870:
4357:src/xeq.c     **** 		return;
 24236              		.loc 1 4357 5 view .LVU6295
 24237 0010 E8B9     		cbnz	r0, .L1740
4357:src/xeq.c     **** 		return;
 24238              		.loc 1 4357 37 discriminator 1 view .LVU6296
 24239 0012 039B     		ldr	r3, [sp, #12]
 24240 0014 0446     		mov	r4, r0
 24241 0016 0198     		ldr	r0, [sp, #4]
4357:src/xeq.c     **** 		return;
 24242              		.loc 1 4357 32 discriminator 1 view .LVU6297
 24243 0018 9842     		cmp	r0, r3
 24244 001a 18D0     		beq	.L1740
4360:src/xeq.c     **** 			report_err(ERR_RANGE);
 24245              		.loc 1 4360 3 is_stmt 1 view .LVU6298
4360:src/xeq.c     **** 			report_err(ERR_RANGE);
 24246              		.loc 1 4360 19 is_stmt 0 view .LVU6299
 24247 001c 029A     		ldr	r2, [sp, #8]
4360:src/xeq.c     **** 			report_err(ERR_RANGE);
 24248              		.loc 1 4360 6 view .LVU6300
 24249 001e 18DD     		ble	.L1745
4360:src/xeq.c     **** 			report_err(ERR_RANGE);
 24250              		.loc 1 4360 19 discriminator 1 view .LVU6301
 24251 0020 1344     		add	r3, r3, r2
4360:src/xeq.c     **** 			report_err(ERR_RANGE);
 24252              		.loc 1 4360 14 discriminator 1 view .LVU6302
 24253 0022 9842     		cmp	r0, r3
 24254 0024 19DB     		blt	.L1746
 24255              	.L1747:
ARM GAS  /tmp/cccVhVyH.s 			page 630


 24256              	.LVL1871:
4363:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24257              		.loc 1 4363 16 is_stmt 1 discriminator 1 view .LVU6303
4363:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24258              		.loc 1 4363 4 is_stmt 0 discriminator 1 view .LVU6304
 24259 0026 002A     		cmp	r2, #0
 24260 0028 01DC     		bgt	.L1749
 24261 002a 10E0     		b	.L1740
 24262              	.LVL1872:
 24263              	.L1752:
4363:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24264              		.loc 1 4363 4 discriminator 1 view .LVU6305
 24265 002c 0198     		ldr	r0, [sp, #4]
 24266              	.LVL1873:
 24267              	.L1749:
4364:src/xeq.c     **** 		}
 24268              		.loc 1 4364 5 is_stmt 1 discriminator 3 view .LVU6306
 24269 002e 2044     		add	r0, r0, r4
 24270 0030 FFF7FEFF 		bl	get_reg_n
 24271              	.LVL1874:
 24272 0034 039B     		ldr	r3, [sp, #12]
 24273 0036 0546     		mov	r5, r0
 24274 0038 E018     		adds	r0, r4, r3
 24275 003a FFF7FEFF 		bl	get_reg_n
 24276              	.LVL1875:
 24277 003e 0146     		mov	r1, r0
 24278 0040 2846     		mov	r0, r5
 24279 0042 FFF7FEFF 		bl	swap_reg
 24280              	.LVL1876:
4363:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24281              		.loc 1 4363 23 discriminator 3 view .LVU6307
4363:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24282              		.loc 1 4363 4 is_stmt 0 discriminator 3 view .LVU6308
 24283 0046 029B     		ldr	r3, [sp, #8]
4363:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24284              		.loc 1 4363 24 discriminator 3 view .LVU6309
 24285 0048 0134     		adds	r4, r4, #1
 24286              	.LVL1877:
4363:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24287              		.loc 1 4363 16 is_stmt 1 discriminator 3 view .LVU6310
4363:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24288              		.loc 1 4363 4 is_stmt 0 discriminator 3 view .LVU6311
 24289 004a A342     		cmp	r3, r4
 24290 004c EEDC     		bgt	.L1752
 24291              	.LVL1878:
 24292              	.L1740:
4367:src/xeq.c     **** 
 24293              		.loc 1 4367 1 view .LVU6312
 24294 004e 05B0     		add	sp, sp, #20
 24295              		.cfi_remember_state
 24296              		.cfi_def_cfa_offset 12
 24297              		@ sp needed
 24298 0050 30BD     		pop	{r4, r5, pc}
 24299              	.L1745:
 24300              		.cfi_restore_state
4360:src/xeq.c     **** 			report_err(ERR_RANGE);
 24301              		.loc 1 4360 28 discriminator 3 view .LVU6313
ARM GAS  /tmp/cccVhVyH.s 			page 631


 24302 0052 E8DA     		bge	.L1747
4360:src/xeq.c     **** 			report_err(ERR_RANGE);
 24303              		.loc 1 4360 43 discriminator 4 view .LVU6314
 24304 0054 8118     		adds	r1, r0, r2
4360:src/xeq.c     **** 			report_err(ERR_RANGE);
 24305              		.loc 1 4360 38 discriminator 4 view .LVU6315
 24306 0056 8B42     		cmp	r3, r1
 24307 0058 E5DA     		bge	.L1747
 24308              	.L1746:
4361:src/xeq.c     **** 		else {
 24309              		.loc 1 4361 4 is_stmt 1 view .LVU6316
 24310              	.LVL1879:
 24311              	.LBB3380:
 24312              	.LBI3380:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24313              		.loc 1 546 5 view .LVU6317
 24314              	.LBB3381:
 547:src/xeq.c     **** 		Error = e;
 24315              		.loc 1 547 2 view .LVU6318
 547:src/xeq.c     **** 		Error = e;
 24316              		.loc 1 547 12 is_stmt 0 view .LVU6319
 24317 005a 044B     		ldr	r3, .L1753
 547:src/xeq.c     **** 		Error = e;
 24318              		.loc 1 547 5 view .LVU6320
 24319 005c 1A68     		ldr	r2, [r3]
 24320 005e 002A     		cmp	r2, #0
 24321 0060 F5D1     		bne	.L1740
 24322              	.LVL1880:
 24323              	.LBB3382:
 24324              	.LBI3382:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24325              		.loc 1 546 5 is_stmt 1 view .LVU6321
 24326              	.LBB3383:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24327              		.loc 1 548 3 view .LVU6322
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24328              		.loc 1 548 9 is_stmt 0 view .LVU6323
 24329 0062 0822     		movs	r2, #8
 24330 0064 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 24331              		.loc 1 549 3 is_stmt 1 view .LVU6324
 24332              	.LBE3383:
 24333              	.LBE3382:
 24334              	.LBE3381:
 24335              	.LBE3380:
4367:src/xeq.c     **** 
 24336              		.loc 1 4367 1 is_stmt 0 view .LVU6325
 24337 0066 05B0     		add	sp, sp, #20
 24338              		.cfi_def_cfa_offset 12
 24339              		@ sp needed
 24340 0068 30BD     		pop	{r4, r5, pc}
 24341              	.L1754:
 24342 006a 00BF     		.align	2
 24343              	.L1753:
 24344 006c 00000000 		.word	Error
 24345              		.cfi_endproc
 24346              	.LFE231:
ARM GAS  /tmp/cccVhVyH.s 			page 632


 24348              		.section	.text.op_regclr,"ax",%progbits
 24349              		.align	1
 24350              		.p2align 2,,3
 24351              		.global	op_regclr
 24352              		.syntax unified
 24353              		.thumb
 24354              		.thumb_func
 24355              		.fpu fpv4-sp-d16
 24357              	op_regclr:
 24358              	.LVL1881:
 24359              	.LFB232:
4369:src/xeq.c     **** 	int s, n;
 24360              		.loc 1 4369 31 is_stmt 1 view -0
 24361              		.cfi_startproc
 24362              		@ args = 0, pretend = 0, frame = 8
 24363              		@ frame_needed = 0, uses_anonymous_args = 0
4370:src/xeq.c     **** 
 24364              		.loc 1 4370 2 view .LVU6327
4372:src/xeq.c     **** 		return;
 24365              		.loc 1 4372 2 view .LVU6328
4369:src/xeq.c     **** 	int s, n;
 24366              		.loc 1 4369 31 is_stmt 0 view .LVU6329
 24367 0000 10B5     		push	{r4, lr}
 24368              		.cfi_def_cfa_offset 8
 24369              		.cfi_offset 4, -8
 24370              		.cfi_offset 14, -4
4372:src/xeq.c     **** 		return;
 24371              		.loc 1 4372 6 view .LVU6330
 24372 0002 0023     		movs	r3, #0
4369:src/xeq.c     **** 	int s, n;
 24373              		.loc 1 4369 31 view .LVU6331
 24374 0004 82B0     		sub	sp, sp, #8
 24375              		.cfi_def_cfa_offset 16
4372:src/xeq.c     **** 		return;
 24376              		.loc 1 4372 6 view .LVU6332
 24377 0006 1A46     		mov	r2, r3
 24378 0008 01A9     		add	r1, sp, #4
 24379 000a 6846     		mov	r0, sp
 24380              	.LVL1882:
4372:src/xeq.c     **** 		return;
 24381              		.loc 1 4372 6 view .LVU6333
 24382 000c FFF7FEFF 		bl	reg_decode
 24383              	.LVL1883:
4372:src/xeq.c     **** 		return;
 24384              		.loc 1 4372 5 view .LVU6334
 24385 0010 A8B9     		cbnz	r0, .L1755
4374:src/xeq.c     **** }
 24386              		.loc 1 4374 2 is_stmt 1 view .LVU6335
 24387 0012 0446     		mov	r4, r0
 24388 0014 0098     		ldr	r0, [sp]
 24389 0016 FFF7FEFF 		bl	get_reg_n
 24390              	.LVL1884:
 24391              	.LBB3384:
 24392              	.LBI3384:
1521:src/xeq.c     **** #if 0
 24393              		.loc 1 1521 6 view .LVU6336
 24394              	.LBB3385:
ARM GAS  /tmp/cccVhVyH.s 			page 633


1536:src/xeq.c     **** #endif
 24395              		.loc 1 1536 2 view .LVU6337
 24396              	.LBB3386:
 24397              	.LBI3386:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 24398              		.loc 1 1121 5 view .LVU6338
 24399              	.LBB3387:
1122:src/xeq.c     **** }
 24400              		.loc 1 1122 2 view .LVU6339
1122:src/xeq.c     **** }
 24401              		.loc 1 1122 24 is_stmt 0 view .LVU6340
 24402 001a 0A4B     		ldr	r3, .L1759
 24403              	.LBE3387:
 24404              	.LBE3386:
1536:src/xeq.c     **** #endif
 24405              		.loc 1 1536 2 view .LVU6341
 24406 001c 019A     		ldr	r2, [sp, #4]
 24407              	.LBB3389:
 24408              	.LBB3388:
1122:src/xeq.c     **** }
 24409              		.loc 1 1122 24 view .LVU6342
 24410 001e 1B68     		ldr	r3, [r3]
 24411 0020 B3F8E817 		ldrh	r1, [r3, #2024]
 24412 0024 44F20103 		movw	r3, #16385
 24413 0028 0B40     		ands	r3, r3, r1
 24414 002a A3F58043 		sub	r3, r3, #16384
 24415 002e B3FA83F3 		clz	r3, r3
 24416 0032 5B09     		lsrs	r3, r3, #5
 24417              	.LBE3388:
 24418              	.LBE3389:
1536:src/xeq.c     **** #endif
 24419              		.loc 1 1536 24 view .LVU6343
 24420 0034 0333     		adds	r3, r3, #3
1536:src/xeq.c     **** #endif
 24421              		.loc 1 1536 2 view .LVU6344
 24422 0036 2146     		mov	r1, r4
 24423 0038 9A40     		lsls	r2, r2, r3
 24424 003a FFF7FEFF 		bl	xset
 24425              	.LVL1885:
 24426              	.L1755:
1536:src/xeq.c     **** #endif
 24427              		.loc 1 1536 2 view .LVU6345
 24428              	.LBE3385:
 24429              	.LBE3384:
4375:src/xeq.c     **** 
 24430              		.loc 1 4375 1 view .LVU6346
 24431 003e 02B0     		add	sp, sp, #8
 24432              		.cfi_def_cfa_offset 8
 24433              		@ sp needed
 24434 0040 10BD     		pop	{r4, pc}
 24435              	.L1760:
 24436 0042 00BF     		.align	2
 24437              	.L1759:
 24438 0044 00000000 		.word	main_ram
 24439              		.cfi_endproc
 24440              	.LFE232:
 24442              		.section	.text.op_regsort,"ax",%progbits
ARM GAS  /tmp/cccVhVyH.s 			page 634


 24443              		.align	1
 24444              		.p2align 2,,3
 24445              		.global	op_regsort
 24446              		.syntax unified
 24447              		.thumb
 24448              		.thumb_func
 24449              		.fpu fpv4-sp-d16
 24451              	op_regsort:
 24452              	.LVL1886:
 24453              	.LFB233:
4377:src/xeq.c     **** 	int s, n;
 24454              		.loc 1 4377 32 is_stmt 1 view -0
 24455              		.cfi_startproc
 24456              		@ args = 0, pretend = 0, frame = 160
 24457              		@ frame_needed = 0, uses_anonymous_args = 0
4378:src/xeq.c     **** 	decNumber pivot, a;
 24458              		.loc 1 4378 2 view .LVU6348
4379:src/xeq.c     **** 	int beg[10], end[10], i;
 24459              		.loc 1 4379 2 view .LVU6349
4380:src/xeq.c     **** 
 24460              		.loc 1 4380 2 view .LVU6350
4382:src/xeq.c     **** 		return;
 24461              		.loc 1 4382 2 view .LVU6351
4377:src/xeq.c     **** 	int s, n;
 24462              		.loc 1 4377 32 is_stmt 0 view .LVU6352
 24463 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 24464              		.cfi_def_cfa_offset 28
 24465              		.cfi_offset 4, -28
 24466              		.cfi_offset 5, -24
 24467              		.cfi_offset 6, -20
 24468              		.cfi_offset 7, -16
 24469              		.cfi_offset 8, -12
 24470              		.cfi_offset 9, -8
 24471              		.cfi_offset 14, -4
4382:src/xeq.c     **** 		return;
 24472              		.loc 1 4382 6 view .LVU6353
 24473 0004 0023     		movs	r3, #0
4377:src/xeq.c     **** 	int s, n;
 24474              		.loc 1 4377 32 view .LVU6354
 24475 0006 A9B0     		sub	sp, sp, #164
 24476              		.cfi_def_cfa_offset 192
4382:src/xeq.c     **** 		return;
 24477              		.loc 1 4382 6 view .LVU6355
 24478 0008 1A46     		mov	r2, r3
 24479 000a 01A9     		add	r1, sp, #4
 24480 000c 6846     		mov	r0, sp
 24481              	.LVL1887:
4382:src/xeq.c     **** 		return;
 24482              		.loc 1 4382 6 view .LVU6356
 24483 000e FFF7FEFF 		bl	reg_decode
 24484              	.LVL1888:
4382:src/xeq.c     **** 		return;
 24485              		.loc 1 4382 5 view .LVU6357
 24486 0012 20B9     		cbnz	r0, .L1761
4382:src/xeq.c     **** 		return;
 24487              		.loc 1 4382 39 discriminator 1 view .LVU6358
 24488 0014 DDF80480 		ldr	r8, [sp, #4]
ARM GAS  /tmp/cccVhVyH.s 			page 635


4382:src/xeq.c     **** 		return;
 24489              		.loc 1 4382 34 discriminator 1 view .LVU6359
 24490 0018 B8F1010F 		cmp	r8, #1
 24491 001c 02D1     		bne	.L1785
 24492              	.L1761:
4427:src/xeq.c     **** 
 24493              		.loc 1 4427 1 view .LVU6360
 24494 001e 29B0     		add	sp, sp, #164
 24495              		.cfi_remember_state
 24496              		.cfi_def_cfa_offset 28
 24497              		@ sp needed
 24498 0020 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 24499              	.L1785:
 24500              		.cfi_restore_state
 24501 0024 0646     		mov	r6, r0
4386:src/xeq.c     **** 	end[0] = n;
 24502              		.loc 1 4386 2 is_stmt 1 view .LVU6361
4386:src/xeq.c     **** 	end[0] = n;
 24503              		.loc 1 4386 9 is_stmt 0 view .LVU6362
 24504 0026 1490     		str	r0, [sp, #80]
4387:src/xeq.c     **** 	i = 0;
 24505              		.loc 1 4387 2 is_stmt 1 view .LVU6363
4387:src/xeq.c     **** 	i = 0;
 24506              		.loc 1 4387 9 is_stmt 0 view .LVU6364
 24507 0028 CDF87880 		str	r8, [sp, #120]
4388:src/xeq.c     **** 	while (i>=0) {
 24508              		.loc 1 4388 2 is_stmt 1 view .LVU6365
 24509              	.LVL1889:
4389:src/xeq.c     **** 		int L = beg[i];
 24510              		.loc 1 4389 2 view .LVU6366
4389:src/xeq.c     **** 		int L = beg[i];
 24511              		.loc 1 4389 8 view .LVU6367
4388:src/xeq.c     **** 	while (i>=0) {
 24512              		.loc 1 4388 4 is_stmt 0 view .LVU6368
 24513 002c 0746     		mov	r7, r0
 24514              	.LVL1890:
 24515              	.L1775:
 24516              	.LBB3390:
4390:src/xeq.c     **** 		int R = end[i] - 1;
 24517              		.loc 1 4390 3 is_stmt 1 view .LVU6369
4391:src/xeq.c     **** 		if (L<R) {
 24518              		.loc 1 4391 3 view .LVU6370
4391:src/xeq.c     **** 		if (L<R) {
 24519              		.loc 1 4391 7 is_stmt 0 view .LVU6371
 24520 002e 08F1FF34 		add	r4, r8, #-1
 24521              	.LVL1891:
4392:src/xeq.c     **** 			const int pvt = s + L;
 24522              		.loc 1 4392 3 is_stmt 1 view .LVU6372
4392:src/xeq.c     **** 			const int pvt = s + L;
 24523              		.loc 1 4392 6 is_stmt 0 view .LVU6373
 24524 0032 B442     		cmp	r4, r6
 24525 0034 0CDC     		bgt	.L1786
 24526              	.LVL1892:
 24527              	.L1764:
4425:src/xeq.c     **** 	}
 24528              		.loc 1 4425 4 is_stmt 1 view .LVU6374
 24529              	.LBE3390:
ARM GAS  /tmp/cccVhVyH.s 			page 636


4389:src/xeq.c     **** 		int L = beg[i];
 24530              		.loc 1 4389 8 is_stmt 0 view .LVU6375
 24531 0036 013F     		subs	r7, r7, #1
 24532              	.LVL1893:
4389:src/xeq.c     **** 		int L = beg[i];
 24533              		.loc 1 4389 8 view .LVU6376
 24534 0038 F1D3     		bcc	.L1761
 24535 003a 28AB     		add	r3, sp, #160
 24536 003c 03EB8703 		add	r3, r3, r7, lsl #2
 24537 0040 53F8288C 		ldr	r8, [r3, #-40]
 24538 0044 53F8506C 		ldr	r6, [r3, #-80]
 24539              	.LVL1894:
 24540              	.LBB3393:
4390:src/xeq.c     **** 		int R = end[i] - 1;
 24541              		.loc 1 4390 3 is_stmt 1 view .LVU6377
4391:src/xeq.c     **** 		if (L<R) {
 24542              		.loc 1 4391 3 view .LVU6378
4391:src/xeq.c     **** 		if (L<R) {
 24543              		.loc 1 4391 7 is_stmt 0 view .LVU6379
 24544 0048 08F1FF34 		add	r4, r8, #-1
 24545              	.LVL1895:
4392:src/xeq.c     **** 			const int pvt = s + L;
 24546              		.loc 1 4392 3 is_stmt 1 view .LVU6380
4392:src/xeq.c     **** 			const int pvt = s + L;
 24547              		.loc 1 4392 6 is_stmt 0 view .LVU6381
 24548 004c B442     		cmp	r4, r6
 24549 004e F2DD     		ble	.L1764
 24550              	.LVL1896:
 24551              	.L1786:
 24552              	.LBB3391:
4393:src/xeq.c     **** 			getRegister(&pivot, pvt);
 24553              		.loc 1 4393 4 is_stmt 1 view .LVU6382
4394:src/xeq.c     **** 			while (L<R) {
 24554              		.loc 1 4394 4 view .LVU6383
4393:src/xeq.c     **** 			getRegister(&pivot, pvt);
 24555              		.loc 1 4393 14 is_stmt 0 view .LVU6384
 24556 0050 0099     		ldr	r1, [sp]
4394:src/xeq.c     **** 			while (L<R) {
 24557              		.loc 1 4394 4 view .LVU6385
 24558 0052 02A8     		add	r0, sp, #8
 24559 0054 3144     		add	r1, r1, r6
 24560              	.LVL1897:
4394:src/xeq.c     **** 			while (L<R) {
 24561              		.loc 1 4394 4 view .LVU6386
 24562 0056 FFF7FEFF 		bl	getRegister
 24563              	.LVL1898:
4395:src/xeq.c     **** 				while (L<R) {
 24564              		.loc 1 4395 4 is_stmt 1 view .LVU6387
4395:src/xeq.c     **** 				while (L<R) {
 24565              		.loc 1 4395 10 view .LVU6388
4394:src/xeq.c     **** 			while (L<R) {
 24566              		.loc 1 4394 4 is_stmt 0 view .LVU6389
 24567 005a B146     		mov	r9, r6
 24568              	.L1767:
4397:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
 24569              		.loc 1 4397 6 is_stmt 1 view .LVU6390
 24570 005c 0099     		ldr	r1, [sp]
ARM GAS  /tmp/cccVhVyH.s 			page 637


 24571 005e 0BA8     		add	r0, sp, #44
 24572 0060 2144     		add	r1, r1, r4
 24573 0062 FFF7FEFF 		bl	getRegister
 24574              	.LVL1899:
4398:src/xeq.c     **** 						break;
 24575              		.loc 1 4398 6 view .LVU6391
4398:src/xeq.c     **** 						break;
 24576              		.loc 1 4398 10 is_stmt 0 view .LVU6392
 24577 0066 02A9     		add	r1, sp, #8
 24578 0068 0BA8     		add	r0, sp, #44
 24579 006a FFF7FEFF 		bl	dn_lt
 24580              	.LVL1900:
4400:src/xeq.c     **** 				}
 24581              		.loc 1 4400 6 is_stmt 1 view .LVU6393
4398:src/xeq.c     **** 						break;
 24582              		.loc 1 4398 9 is_stmt 0 view .LVU6394
 24583 006e 00BB     		cbnz	r0, .L1766
4400:src/xeq.c     **** 				}
 24584              		.loc 1 4400 7 view .LVU6395
 24585 0070 013C     		subs	r4, r4, #1
 24586              	.LVL1901:
4396:src/xeq.c     **** 					getRegister(&a, s + R);
 24587              		.loc 1 4396 11 is_stmt 1 view .LVU6396
 24588 0072 4C45     		cmp	r4, r9
 24589 0074 F2DC     		bgt	.L1767
 24590              	.L1768:
 24591              	.LVL1902:
4404:src/xeq.c     **** 					getRegister(&a, s + L);
 24592              		.loc 1 4404 11 is_stmt 0 view .LVU6397
 24593 0076 4D46     		mov	r5, r9
 24594              	.LVL1903:
4395:src/xeq.c     **** 				while (L<R) {
 24595              		.loc 1 4395 10 is_stmt 1 view .LVU6398
 24596              	.L1776:
4413:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
 24597              		.loc 1 4413 4 view .LVU6399
 24598 0078 0098     		ldr	r0, [sp]
 24599 007a 02A9     		add	r1, sp, #8
 24600 007c 2844     		add	r0, r0, r5
 24601 007e FFF7FEFF 		bl	setRegister
 24602              	.LVL1904:
4414:src/xeq.c     **** 				beg[i+1] = beg[i];
 24603              		.loc 1 4414 4 view .LVU6400
4414:src/xeq.c     **** 				beg[i+1] = beg[i];
 24604              		.loc 1 4414 32 is_stmt 0 view .LVU6401
 24605 0082 6B1C     		adds	r3, r5, #1
4414:src/xeq.c     **** 				beg[i+1] = beg[i];
 24606              		.loc 1 4414 28 view .LVU6402
 24607 0084 A8EB0302 		sub	r2, r8, r3
4414:src/xeq.c     **** 				beg[i+1] = beg[i];
 24608              		.loc 1 4414 10 view .LVU6403
 24609 0088 A91B     		subs	r1, r5, r6
4414:src/xeq.c     **** 				beg[i+1] = beg[i];
 24610              		.loc 1 4414 7 view .LVU6404
 24611 008a 9142     		cmp	r1, r2
4415:src/xeq.c     **** 				end[i+1] = L;
 24612              		.loc 1 4415 10 view .LVU6405
ARM GAS  /tmp/cccVhVyH.s 			page 638


 24613 008c 07F10101 		add	r1, r7, #1
4417:src/xeq.c     **** 			} else {
 24614              		.loc 1 4417 12 view .LVU6406
 24615 0090 28AA     		add	r2, sp, #160
 24616 0092 02EB8700 		add	r0, r2, r7, lsl #2
4415:src/xeq.c     **** 				end[i+1] = L;
 24617              		.loc 1 4415 14 view .LVU6407
 24618 0096 02EB8102 		add	r2, r2, r1, lsl #2
 24619 009a 0F46     		mov	r7, r1
 24620              	.LVL1905:
4414:src/xeq.c     **** 				beg[i+1] = beg[i];
 24621              		.loc 1 4414 7 view .LVU6408
 24622 009c 2DDA     		bge	.L1772
4415:src/xeq.c     **** 				end[i+1] = L;
 24623              		.loc 1 4415 5 is_stmt 1 view .LVU6409
4415:src/xeq.c     **** 				end[i+1] = L;
 24624              		.loc 1 4415 14 is_stmt 0 view .LVU6410
 24625 009e 42F8506C 		str	r6, [r2, #-80]
4416:src/xeq.c     **** 				beg[i] = L+1;
 24626              		.loc 1 4416 5 is_stmt 1 view .LVU6411
4417:src/xeq.c     **** 			} else {
 24627              		.loc 1 4417 12 is_stmt 0 view .LVU6412
 24628 00a2 40F8503C 		str	r3, [r0, #-80]
 24629 00a6 52F8506C 		ldr	r6, [r2, #-80]
4416:src/xeq.c     **** 				beg[i] = L+1;
 24630              		.loc 1 4416 14 view .LVU6413
 24631 00aa 42F8285C 		str	r5, [r2, #-40]
4417:src/xeq.c     **** 			} else {
 24632              		.loc 1 4417 5 is_stmt 1 view .LVU6414
 24633 00ae A846     		mov	r8, r5
 24634 00b0 BDE7     		b	.L1775
 24635              	.LVL1906:
 24636              	.L1766:
4402:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 24637              		.loc 1 4402 5 view .LVU6415
4402:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 24638              		.loc 1 4402 8 is_stmt 0 view .LVU6416
 24639 00b2 A145     		cmp	r9, r4
 24640 00b4 DFDA     		bge	.L1768
4403:src/xeq.c     **** 				while (L<R) {
 24641              		.loc 1 4403 6 is_stmt 1 view .LVU6417
 24642 00b6 0098     		ldr	r0, [sp]
4403:src/xeq.c     **** 				while (L<R) {
 24643              		.loc 1 4403 21 is_stmt 0 view .LVU6418
 24644 00b8 09F10105 		add	r5, r9, #1
 24645              	.LVL1907:
4403:src/xeq.c     **** 				while (L<R) {
 24646              		.loc 1 4403 6 view .LVU6419
 24647 00bc 0119     		adds	r1, r0, r4
 24648 00be 4844     		add	r0, r0, r9
 24649 00c0 FFF7FEFF 		bl	copyreg_n
 24650              	.LVL1908:
4404:src/xeq.c     **** 					getRegister(&a, s + L);
 24651              		.loc 1 4404 11 is_stmt 1 view .LVU6420
 24652 00c4 A542     		cmp	r5, r4
 24653 00c6 03DB     		blt	.L1770
 24654 00c8 21E0     		b	.L1777
ARM GAS  /tmp/cccVhVyH.s 			page 639


 24655              	.L1787:
4408:src/xeq.c     **** 				}
 24656              		.loc 1 4408 7 is_stmt 0 view .LVU6421
 24657 00ca 0135     		adds	r5, r5, #1
 24658              	.LVL1909:
4404:src/xeq.c     **** 					getRegister(&a, s + L);
 24659              		.loc 1 4404 11 is_stmt 1 view .LVU6422
 24660 00cc A542     		cmp	r5, r4
 24661 00ce D3D0     		beq	.L1776
 24662              	.L1770:
4405:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
 24663              		.loc 1 4405 6 view .LVU6423
 24664 00d0 0099     		ldr	r1, [sp]
 24665 00d2 0BA8     		add	r0, sp, #44
 24666 00d4 2944     		add	r1, r1, r5
 24667 00d6 FFF7FEFF 		bl	getRegister
 24668              	.LVL1910:
4406:src/xeq.c     **** 						break;
 24669              		.loc 1 4406 6 view .LVU6424
4406:src/xeq.c     **** 						break;
 24670              		.loc 1 4406 10 is_stmt 0 view .LVU6425
 24671 00da 0BA9     		add	r1, sp, #44
 24672 00dc 02A8     		add	r0, sp, #8
 24673 00de FFF7FEFF 		bl	dn_lt
 24674              	.LVL1911:
4408:src/xeq.c     **** 				}
 24675              		.loc 1 4408 6 is_stmt 1 view .LVU6426
4406:src/xeq.c     **** 						break;
 24676              		.loc 1 4406 9 is_stmt 0 view .LVU6427
 24677 00e2 0028     		cmp	r0, #0
 24678 00e4 F1D0     		beq	.L1787
4410:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
 24679              		.loc 1 4410 5 is_stmt 1 view .LVU6428
4411:src/xeq.c     **** 			}
 24680              		.loc 1 4411 6 view .LVU6429
 24681 00e6 0098     		ldr	r0, [sp]
 24682 00e8 4119     		adds	r1, r0, r5
 24683 00ea 2044     		add	r0, r0, r4
4411:src/xeq.c     **** 			}
 24684              		.loc 1 4411 21 is_stmt 0 view .LVU6430
 24685 00ec 013C     		subs	r4, r4, #1
 24686              	.LVL1912:
4411:src/xeq.c     **** 			}
 24687              		.loc 1 4411 6 view .LVU6431
 24688 00ee FFF7FEFF 		bl	copyreg_n
 24689              	.LVL1913:
4395:src/xeq.c     **** 				while (L<R) {
 24690              		.loc 1 4395 10 is_stmt 1 view .LVU6432
 24691 00f2 A542     		cmp	r5, r4
 24692 00f4 C0DA     		bge	.L1776
 24693 00f6 A946     		mov	r9, r5
4396:src/xeq.c     **** 					getRegister(&a, s + R);
 24694              		.loc 1 4396 11 view .LVU6433
 24695 00f8 B0E7     		b	.L1767
 24696              	.LVL1914:
 24697              	.L1772:
4419:src/xeq.c     **** 				end[i+1] = end[i];
ARM GAS  /tmp/cccVhVyH.s 			page 640


 24698              		.loc 1 4419 5 view .LVU6434
4420:src/xeq.c     **** 				end[i] = L;
 24699              		.loc 1 4420 14 is_stmt 0 view .LVU6435
 24700 00fa 42F8288C 		str	r8, [r2, #-40]
4421:src/xeq.c     **** 			}
 24701              		.loc 1 4421 12 view .LVU6436
 24702 00fe 40F8285C 		str	r5, [r0, #-40]
 24703 0102 52F8288C 		ldr	r8, [r2, #-40]
4419:src/xeq.c     **** 				end[i+1] = end[i];
 24704              		.loc 1 4419 14 view .LVU6437
 24705 0106 42F8503C 		str	r3, [r2, #-80]
4420:src/xeq.c     **** 				end[i] = L;
 24706              		.loc 1 4420 5 is_stmt 1 view .LVU6438
4421:src/xeq.c     **** 			}
 24707              		.loc 1 4421 5 view .LVU6439
4423:src/xeq.c     **** 		} else
 24708              		.loc 1 4423 4 view .LVU6440
 24709              	.LVL1915:
4423:src/xeq.c     **** 		} else
 24710              		.loc 1 4423 4 is_stmt 0 view .LVU6441
 24711              	.LBE3391:
 24712              	.LBE3393:
4389:src/xeq.c     **** 		int L = beg[i];
 24713              		.loc 1 4389 8 is_stmt 1 view .LVU6442
 24714              	.LBB3394:
 24715              	.LBB3392:
4421:src/xeq.c     **** 			}
 24716              		.loc 1 4421 12 is_stmt 0 view .LVU6443
 24717 010a 1E46     		mov	r6, r3
 24718 010c 8FE7     		b	.L1775
 24719              	.LVL1916:
 24720              	.L1777:
4404:src/xeq.c     **** 					getRegister(&a, s + L);
 24721              		.loc 1 4404 11 view .LVU6444
 24722 010e A946     		mov	r9, r5
 24723              	.LVL1917:
4404:src/xeq.c     **** 					getRegister(&a, s + L);
 24724              		.loc 1 4404 11 view .LVU6445
 24725 0110 4D46     		mov	r5, r9
 24726              	.LVL1918:
4395:src/xeq.c     **** 				while (L<R) {
 24727              		.loc 1 4395 10 is_stmt 1 view .LVU6446
 24728 0112 B1E7     		b	.L1776
 24729              	.LBE3392:
 24730              	.LBE3394:
 24731              		.cfi_endproc
 24732              	.LFE233:
 24734              		.section	.text.reset_volatile_state,"ax",%progbits
 24735              		.align	1
 24736              		.p2align 2,,3
 24737              		.global	reset_volatile_state
 24738              		.syntax unified
 24739              		.thumb
 24740              		.thumb_func
 24741              		.fpu fpv4-sp-d16
 24743              	reset_volatile_state:
 24744              	.LFB235:
ARM GAS  /tmp/cccVhVyH.s 			page 641


4462:src/xeq.c     **** 	// extern int IntMaxWindow;
 24745              		.loc 1 4462 33 view -0
 24746              		.cfi_startproc
 24747              		@ args = 0, pretend = 0, frame = 0
 24748              		@ frame_needed = 0, uses_anonymous_args = 0
 24749              		@ link register save eliminated.
4465:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24750              		.loc 1 4465 2 view .LVU6448
4465:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24751              		.loc 1 4465 16 is_stmt 0 view .LVU6449
 24752 0000 034B     		ldr	r3, .L1789
 24753 0002 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
4466:src/xeq.c     **** }
 24754              		.loc 1 4466 15 view .LVU6450
 24755 0004 0021     		movs	r1, #0
4465:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24756              		.loc 1 4465 16 view .LVU6451
 24757 0006 6FF3C502 		bfc	r2, #3, #3
 24758 000a 1A75     		strb	r2, [r3, #20]
4466:src/xeq.c     **** }
 24759              		.loc 1 4466 2 is_stmt 1 view .LVU6452
4466:src/xeq.c     **** }
 24760              		.loc 1 4466 15 is_stmt 0 view .LVU6453
 24761 000c 5974     		strb	r1, [r3, #17]
4467:src/xeq.c     **** 
 24762              		.loc 1 4467 1 view .LVU6454
 24763 000e 7047     		bx	lr
 24764              	.L1790:
 24765              		.align	2
 24766              	.L1789:
 24767 0010 00000000 		.word	StateWhileOn
 24768              		.cfi_endproc
 24769              	.LFE235:
 24771              		.section	.rodata.busy.str1.4,"aMS",%progbits,1
 24772              		.align	2
 24773              	.LC7:
 24774 0000 57616974 		.ascii	"Wait...\000"
 24774      2E2E2E00 
 24775              		.section	.text.busy,"ax",%progbits
 24776              		.align	1
 24777              		.p2align 2,,3
 24778              		.global	busy
 24779              		.syntax unified
 24780              		.thumb
 24781              		.thumb_func
 24782              		.fpu fpv4-sp-d16
 24784              	busy:
 24785              	.LFB236:
4474:src/xeq.c     **** 	/*
 24786              		.loc 1 4474 1 is_stmt 1 view -0
 24787              		.cfi_startproc
 24788              		@ args = 0, pretend = 0, frame = 0
 24789              		@ frame_needed = 0, uses_anonymous_args = 0
 24790              		@ link register save eliminated.
4478:src/xeq.c     **** 
 24791              		.loc 1 4478 12 view .LVU6456
4483:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 642


 24792              		.loc 1 4483 17 view .LVU6457
4488:src/xeq.c     **** 		Busy = 1;
 24793              		.loc 1 4488 2 view .LVU6458
4488:src/xeq.c     **** 		Busy = 1;
 24794              		.loc 1 4488 6 is_stmt 0 view .LVU6459
 24795 0000 054A     		ldr	r2, .L1794
4488:src/xeq.c     **** 		Busy = 1;
 24796              		.loc 1 4488 15 view .LVU6460
 24797 0002 064B     		ldr	r3, .L1794+4
4488:src/xeq.c     **** 		Busy = 1;
 24798              		.loc 1 4488 12 view .LVU6461
 24799 0004 1168     		ldr	r1, [r2]
 24800 0006 1B68     		ldr	r3, [r3]
 24801 0008 1943     		orrs	r1, r1, r3
 24802 000a 00D0     		beq	.L1793
4492:src/xeq.c     **** 
 24803              		.loc 1 4492 1 view .LVU6462
 24804 000c 7047     		bx	lr
 24805              	.L1793:
 24806              	.LBB3397:
 24807              	.LBI3397:
4473:src/xeq.c     **** {
 24808              		.loc 1 4473 6 is_stmt 1 view .LVU6463
 24809              	.LBB3398:
4489:src/xeq.c     **** 		message("Wait...", NULL);
 24810              		.loc 1 4489 3 view .LVU6464
4489:src/xeq.c     **** 		message("Wait...", NULL);
 24811              		.loc 1 4489 8 is_stmt 0 view .LVU6465
 24812 000e 0123     		movs	r3, #1
4490:src/xeq.c     **** 	}
 24813              		.loc 1 4490 3 view .LVU6466
 24814 0010 0348     		ldr	r0, .L1794+8
4489:src/xeq.c     **** 		message("Wait...", NULL);
 24815              		.loc 1 4489 8 view .LVU6467
 24816 0012 1360     		str	r3, [r2]
4490:src/xeq.c     **** 	}
 24817              		.loc 1 4490 3 is_stmt 1 view .LVU6468
 24818 0014 FFF7FEBF 		b	message
 24819              	.LVL1919:
 24820              	.L1795:
 24821              		.align	2
 24822              	.L1794:
 24823 0018 00000000 		.word	Busy
 24824 001c 00000000 		.word	Running
 24825 0020 00000000 		.word	.LC7
 24826              	.LBE3398:
 24827              	.LBE3397:
 24828              		.cfi_endproc
 24829              	.LFE236:
 24831              		.section	.text.intMonadic,"ax",%progbits
 24832              		.align	1
 24833              		.p2align 2,,3
 24834              		.global	intMonadic
 24835              		.syntax unified
 24836              		.thumb
 24837              		.thumb_func
 24838              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cccVhVyH.s 			page 643


 24840              	intMonadic:
 24841              	.LVL1920:
 24842              	.LFB240:
4570:src/xeq.c     **** 	int s;
 24843              		.loc 1 4570 43 view -0
 24844              		.cfi_startproc
 24845              		@ args = 0, pretend = 0, frame = 80
 24846              		@ frame_needed = 0, uses_anonymous_args = 0
4571:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
 24847              		.loc 1 4571 2 view .LVU6470
4572:src/xeq.c     **** 	decNumber rx, r;
 24848              		.loc 1 4572 2 view .LVU6471
4570:src/xeq.c     **** 	int s;
 24849              		.loc 1 4570 43 is_stmt 0 view .LVU6472
 24850 0000 30B5     		push	{r4, r5, lr}
 24851              		.cfi_def_cfa_offset 12
 24852              		.cfi_offset 4, -12
 24853              		.cfi_offset 5, -8
 24854              		.cfi_offset 14, -4
 24855 0002 95B0     		sub	sp, sp, #84
 24856              		.cfi_def_cfa_offset 96
4572:src/xeq.c     **** 	decNumber rx, r;
 24857              		.loc 1 4572 30 view .LVU6473
 24858 0004 01AA     		add	r2, sp, #4
 24859 0006 FFF7FEFF 		bl	extract_value
 24860              	.LVL1921:
4574:src/xeq.c     **** 
 24861              		.loc 1 4574 19 view .LVU6474
 24862 000a 1E4A     		ldr	r2, .L1811
4576:src/xeq.c     **** 		bad_mode_error();
 24863              		.loc 1 4576 6 view .LVU6475
 24864 000c 1E4B     		ldr	r3, .L1811+4
4574:src/xeq.c     **** 
 24865              		.loc 1 4574 15 view .LVU6476
 24866 000e 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4576:src/xeq.c     **** 		bad_mode_error();
 24867              		.loc 1 4576 6 view .LVU6477
 24868 0010 04EB4404 		add	r4, r4, r4, lsl #1
 24869 0014 53F83440 		ldr	r4, [r3, r4, lsl #3]
 24870              	.LVL1922:
4573:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 24871              		.loc 1 4573 2 is_stmt 1 view .LVU6478
4574:src/xeq.c     **** 
 24872              		.loc 1 4574 2 view .LVU6479
4576:src/xeq.c     **** 		bad_mode_error();
 24873              		.loc 1 4576 2 view .LVU6480
4576:src/xeq.c     **** 		bad_mode_error();
 24874              		.loc 1 4576 5 is_stmt 0 view .LVU6481
 24875 0018 5CB1     		cbz	r4, .L1801
 24876              	.LBB3416:
4579:src/xeq.c     **** #ifndef REALBUILD
 24877              		.loc 1 4579 3 is_stmt 1 view .LVU6482
 24878              	.LVL1923:
4581:src/xeq.c     **** 			bad_mode_error();
 24879              		.loc 1 4581 3 view .LVU6483
 24880              	.LBB3417:
 24881              	.LBI3417:
ARM GAS  /tmp/cccVhVyH.s 			page 644


4508:src/xeq.c     **** {
 24882              		.loc 1 4508 24 view .LVU6484
 24883              	.LBB3418:
4510:src/xeq.c     **** 	if (xp < xrom)
 24884              		.loc 1 4510 2 view .LVU6485
4511:src/xeq.c     **** 		return NULL;
 24885              		.loc 1 4511 5 is_stmt 0 view .LVU6486
 24886 001a 1C4B     		ldr	r3, .L1811+8
4510:src/xeq.c     **** 	if (xp < xrom)
 24887              		.loc 1 4510 59 view .LVU6487
 24888 001c 24F00102 		bic	r2, r4, #1
 24889              	.LVL1924:
4511:src/xeq.c     **** 		return NULL;
 24890              		.loc 1 4511 2 is_stmt 1 view .LVU6488
4511:src/xeq.c     **** 		return NULL;
 24891              		.loc 1 4511 5 is_stmt 0 view .LVU6489
 24892 0020 9A42     		cmp	r2, r3
 24893 0022 10D3     		bcc	.L1800
4515:src/xeq.c     **** 		return NULL;
 24894              		.loc 1 4515 2 is_stmt 1 view .LVU6490
4515:src/xeq.c     **** 		return NULL;
 24895              		.loc 1 4515 17 is_stmt 0 view .LVU6491
 24896 0024 1A4D     		ldr	r5, .L1811+12
 24897 0026 2D88     		ldrh	r5, [r5]
 24898 0028 03EB4503 		add	r3, r3, r5, lsl #1
4515:src/xeq.c     **** 		return NULL;
 24899              		.loc 1 4515 5 view .LVU6492
 24900 002c 9A42     		cmp	r2, r3
 24901 002e 0AD2     		bcs	.L1800
 24902              	.LVL1925:
4515:src/xeq.c     **** 		return NULL;
 24903              		.loc 1 4515 5 view .LVU6493
 24904              	.LBE3418:
 24905              	.LBE3417:
4581:src/xeq.c     **** 			bad_mode_error();
 24906              		.loc 1 4581 6 view .LVU6494
 24907 0030 4AB1     		cbz	r2, .L1800
 24908              	.LVL1926:
 24909              	.L1801:
4581:src/xeq.c     **** 			bad_mode_error();
 24910              		.loc 1 4581 6 view .LVU6495
 24911              	.LBE3416:
4577:src/xeq.c     **** 	else {
 24912              		.loc 1 4577 3 is_stmt 1 view .LVU6496
 24913              	.LBB3427:
 24914              	.LBI3427:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 24915              		.loc 1 575 6 view .LVU6497
 24916              	.LBE3427:
 576:src/xeq.c     **** }
 24917              		.loc 1 576 2 view .LVU6498
 24918              	.LBB3436:
 24919              	.LBB3428:
 24920              	.LBI3428:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24921              		.loc 1 546 5 view .LVU6499
 24922              	.LBB3429:
ARM GAS  /tmp/cccVhVyH.s 			page 645


 547:src/xeq.c     **** 		Error = e;
 24923              		.loc 1 547 2 view .LVU6500
 547:src/xeq.c     **** 		Error = e;
 24924              		.loc 1 547 12 is_stmt 0 view .LVU6501
 24925 0032 184B     		ldr	r3, .L1811+16
 547:src/xeq.c     **** 		Error = e;
 24926              		.loc 1 547 5 view .LVU6502
 24927 0034 1A68     		ldr	r2, [r3]
 24928 0036 1AB1     		cbz	r2, .L1798
 24929              	.LVL1927:
 24930              	.L1809:
 24931              	.LBB3430:
 24932              	.LBB3431:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 24933              		.loc 1 549 3 is_stmt 1 view .LVU6503
 24934              	.LBE3431:
 24935              	.LBE3430:
 24936              	.LBE3429:
 24937              	.LBE3428:
 24938              	.LBE3436:
4595:src/xeq.c     **** }
 24939              		.loc 1 4595 9 is_stmt 0 view .LVU6504
 24940 0038 0020     		movs	r0, #0
 24941 003a 0146     		mov	r1, r0
4596:src/xeq.c     **** 
 24942              		.loc 1 4596 1 view .LVU6505
 24943 003c 15B0     		add	sp, sp, #84
 24944              		.cfi_remember_state
 24945              		.cfi_def_cfa_offset 12
 24946              		@ sp needed
 24947 003e 30BD     		pop	{r4, r5, pc}
 24948              	.LVL1928:
 24949              	.L1798:
 24950              		.cfi_restore_state
 24951              	.LBB3437:
 24952              	.LBB3435:
 24953              	.LBB3434:
 24954              	.LBB3433:
 24955              	.LBI3430:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24956              		.loc 1 546 5 is_stmt 1 view .LVU6506
 24957              	.LBB3432:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24958              		.loc 1 548 3 view .LVU6507
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24959              		.loc 1 548 9 is_stmt 0 view .LVU6508
 24960 0040 0D22     		movs	r2, #13
 24961 0042 1A60     		str	r2, [r3]
 24962 0044 F8E7     		b	.L1809
 24963              	.LVL1929:
 24964              	.L1800:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24965              		.loc 1 548 9 view .LVU6509
 24966              	.LBE3432:
 24967              	.LBE3433:
 24968              	.LBE3434:
 24969              	.LBE3435:
ARM GAS  /tmp/cccVhVyH.s 			page 646


 24970              	.LBE3437:
 24971              	.LBB3438:
4586:src/xeq.c     **** 			if (s)
 24972              		.loc 1 4586 4 is_stmt 1 view .LVU6510
 24973 0046 0246     		mov	r2, r0
 24974 0048 0B46     		mov	r3, r1
 24975 004a 02A8     		add	r0, sp, #8
 24976              	.LVL1930:
4586:src/xeq.c     **** 			if (s)
 24977              		.loc 1 4586 4 is_stmt 0 view .LVU6511
 24978 004c FFF7FEFF 		bl	ullint_to_dn
 24979              	.LVL1931:
4587:src/xeq.c     **** 				dn_minus(&rx, &rx);
 24980              		.loc 1 4587 4 is_stmt 1 view .LVU6512
4587:src/xeq.c     **** 				dn_minus(&rx, &rx);
 24981              		.loc 1 4587 7 is_stmt 0 view .LVU6513
 24982 0050 019B     		ldr	r3, [sp, #4]
 24983 0052 8BB9     		cbnz	r3, .L1810
 24984              	.L1802:
4589:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24985              		.loc 1 4589 4 is_stmt 1 view .LVU6514
4589:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24986              		.loc 1 4589 16 is_stmt 0 view .LVU6515
 24987 0054 02A9     		add	r1, sp, #8
 24988 0056 0BA8     		add	r0, sp, #44
 24989 0058 A047     		blx	r4
 24990              	.LVL1932:
4589:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24991              		.loc 1 4589 7 view .LVU6516
 24992 005a 40B9     		cbnz	r0, .L1803
4590:src/xeq.c     **** 			else
 24993              		.loc 1 4590 5 is_stmt 1 view .LVU6517
 24994              	.LVL1933:
 24995              	.LBB3419:
 24996              	.LBI3419:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24997              		.loc 1 546 5 view .LVU6518
 24998              	.LBB3420:
 547:src/xeq.c     **** 		Error = e;
 24999              		.loc 1 547 2 view .LVU6519
 547:src/xeq.c     **** 		Error = e;
 25000              		.loc 1 547 12 is_stmt 0 view .LVU6520
 25001 005c 0D4B     		ldr	r3, .L1811+16
 547:src/xeq.c     **** 		Error = e;
 25002              		.loc 1 547 5 view .LVU6521
 25003 005e 1A68     		ldr	r2, [r3]
 25004 0060 002A     		cmp	r2, #0
 25005 0062 E9D1     		bne	.L1809
 25006              	.LVL1934:
 25007              	.LBB3421:
 25008              	.LBI3421:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25009              		.loc 1 546 5 is_stmt 1 view .LVU6522
 25010              	.LBB3422:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25011              		.loc 1 548 3 view .LVU6523
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/cccVhVyH.s 			page 647


 25012              		.loc 1 548 9 is_stmt 0 view .LVU6524
 25013 0064 0122     		movs	r2, #1
 25014              	.LBE3422:
 25015              	.LBE3421:
 25016              	.LBE3420:
 25017              	.LBE3419:
 25018              	.LBE3438:
4595:src/xeq.c     **** }
 25019              		.loc 1 4595 9 view .LVU6525
 25020 0066 0146     		mov	r1, r0
 25021              	.LBB3439:
 25022              	.LBB3426:
 25023              	.LBB3425:
 25024              	.LBB3424:
 25025              	.LBB3423:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25026              		.loc 1 548 9 view .LVU6526
 25027 0068 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25028              		.loc 1 549 3 is_stmt 1 view .LVU6527
 25029              	.LBE3423:
 25030              	.LBE3424:
 25031              	.LBE3425:
 25032              	.LBE3426:
 25033              	.LBE3439:
4596:src/xeq.c     **** 
 25034              		.loc 1 4596 1 is_stmt 0 view .LVU6528
 25035 006a 15B0     		add	sp, sp, #84
 25036              		.cfi_remember_state
 25037              		.cfi_def_cfa_offset 12
 25038              		@ sp needed
 25039 006c 30BD     		pop	{r4, r5, pc}
 25040              	.LVL1935:
 25041              	.L1803:
 25042              		.cfi_restore_state
 25043              	.LBB3440:
4592:src/xeq.c     **** 		}
 25044              		.loc 1 4592 5 is_stmt 1 view .LVU6529
4592:src/xeq.c     **** 		}
 25045              		.loc 1 4592 12 is_stmt 0 view .LVU6530
 25046 006e 0BA8     		add	r0, sp, #44
 25047 0070 FFF7FEFF 		bl	intResult
 25048              	.LVL1936:
 25049              	.LBE3440:
4596:src/xeq.c     **** 
 25050              		.loc 1 4596 1 view .LVU6531
 25051 0074 15B0     		add	sp, sp, #84
 25052              		.cfi_remember_state
 25053              		.cfi_def_cfa_offset 12
 25054              		@ sp needed
 25055 0076 30BD     		pop	{r4, r5, pc}
 25056              	.LVL1937:
 25057              	.L1810:
 25058              		.cfi_restore_state
 25059              	.LBB3441:
4588:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
 25060              		.loc 1 4588 5 is_stmt 1 view .LVU6532
ARM GAS  /tmp/cccVhVyH.s 			page 648


 25061 0078 02A9     		add	r1, sp, #8
 25062 007a 0846     		mov	r0, r1
 25063 007c FFF7FEFF 		bl	dn_minus
 25064              	.LVL1938:
 25065 0080 E8E7     		b	.L1802
 25066              	.L1812:
 25067 0082 00BF     		.align	2
 25068              	.L1811:
 25069 0084 00000000 		.word	XeqOpCode
 25070 0088 00000000 		.word	monfuncs
 25071 008c 00000000 		.word	xrom
 25072 0090 00000000 		.word	xrom_size
 25073 0094 00000000 		.word	Error
 25074              	.LBE3441:
 25075              		.cfi_endproc
 25076              	.LFE240:
 25078              		.section	.text.intDyadic,"ax",%progbits
 25079              		.align	1
 25080              		.p2align 2,,3
 25081              		.global	intDyadic
 25082              		.syntax unified
 25083              		.thumb
 25084              		.thumb_func
 25085              		.fpu fpv4-sp-d16
 25087              	intDyadic:
 25088              	.LVL1939:
 25089              	.LFB241:
4601:src/xeq.c     **** 	int sx, sy;
 25090              		.loc 1 4601 59 view -0
 25091              		.cfi_startproc
 25092              		@ args = 0, pretend = 0, frame = 120
 25093              		@ frame_needed = 0, uses_anonymous_args = 0
4602:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 25094              		.loc 1 4602 2 view .LVU6534
4603:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25095              		.loc 1 4603 2 view .LVU6535
4601:src/xeq.c     **** 	int sx, sy;
 25096              		.loc 1 4601 59 is_stmt 0 view .LVU6536
 25097 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25098              		.cfi_def_cfa_offset 24
 25099              		.cfi_offset 4, -24
 25100              		.cfi_offset 5, -20
 25101              		.cfi_offset 6, -16
 25102              		.cfi_offset 7, -12
 25103              		.cfi_offset 8, -8
 25104              		.cfi_offset 14, -4
 25105 0004 9EB0     		sub	sp, sp, #120
 25106              		.cfi_def_cfa_offset 144
4601:src/xeq.c     **** 	int sx, sy;
 25107              		.loc 1 4601 59 view .LVU6537
 25108 0006 0546     		mov	r5, r0
 25109 0008 0C46     		mov	r4, r1
4603:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25110              		.loc 1 4603 30 view .LVU6538
 25111 000a 1046     		mov	r0, r2
 25112              	.LVL1940:
4603:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
ARM GAS  /tmp/cccVhVyH.s 			page 649


 25113              		.loc 1 4603 30 view .LVU6539
 25114 000c 1946     		mov	r1, r3
 25115 000e 01AA     		add	r2, sp, #4
 25116              	.LVL1941:
4603:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25117              		.loc 1 4603 30 view .LVU6540
 25118 0010 FFF7FEFF 		bl	extract_value
 25119              	.LVL1942:
4604:src/xeq.c     **** 	decNumber rx, ry, r;
 25120              		.loc 1 4604 30 view .LVU6541
 25121 0014 02AA     		add	r2, sp, #8
4603:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25122              		.loc 1 4603 30 view .LVU6542
 25123 0016 0B46     		mov	r3, r1
 25124 0018 0646     		mov	r6, r0
4604:src/xeq.c     **** 	decNumber rx, ry, r;
 25125              		.loc 1 4604 30 view .LVU6543
 25126 001a 2146     		mov	r1, r4
 25127 001c 2846     		mov	r0, r5
4603:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25128              		.loc 1 4603 30 view .LVU6544
 25129 001e 1D46     		mov	r5, r3
 25130              	.LVL1943:
4604:src/xeq.c     **** 	decNumber rx, ry, r;
 25131              		.loc 1 4604 2 is_stmt 1 view .LVU6545
4604:src/xeq.c     **** 	decNumber rx, ry, r;
 25132              		.loc 1 4604 30 is_stmt 0 view .LVU6546
 25133 0020 FFF7FEFF 		bl	extract_value
 25134              	.LVL1944:
4606:src/xeq.c     **** 
 25135              		.loc 1 4606 19 view .LVU6547
 25136 0024 264A     		ldr	r2, .L1833
4608:src/xeq.c     **** 		bad_mode_error();
 25137              		.loc 1 4608 6 view .LVU6548
 25138 0026 274B     		ldr	r3, .L1833+4
4606:src/xeq.c     **** 
 25139              		.loc 1 4606 15 view .LVU6549
 25140 0028 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4608:src/xeq.c     **** 		bad_mode_error();
 25141              		.loc 1 4608 6 view .LVU6550
 25142 002a 04EB4404 		add	r4, r4, r4, lsl #1
 25143 002e 53F83440 		ldr	r4, [r3, r4, lsl #3]
 25144              	.LVL1945:
4605:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 25145              		.loc 1 4605 2 is_stmt 1 view .LVU6551
4606:src/xeq.c     **** 
 25146              		.loc 1 4606 2 view .LVU6552
4608:src/xeq.c     **** 		bad_mode_error();
 25147              		.loc 1 4608 2 view .LVU6553
4608:src/xeq.c     **** 		bad_mode_error();
 25148              		.loc 1 4608 5 is_stmt 0 view .LVU6554
 25149 0032 6CB1     		cbz	r4, .L1818
 25150              	.LBB3459:
 25151              	.LBB3460:
 25152              	.LBB3461:
4511:src/xeq.c     **** 		return NULL;
 25153              		.loc 1 4511 5 view .LVU6555
ARM GAS  /tmp/cccVhVyH.s 			page 650


 25154 0034 244B     		ldr	r3, .L1833+8
4510:src/xeq.c     **** 	if (xp < xrom)
 25155              		.loc 1 4510 59 view .LVU6556
 25156 0036 24F00102 		bic	r2, r4, #1
 25157              	.LVL1946:
4511:src/xeq.c     **** 		return NULL;
 25158              		.loc 1 4511 5 view .LVU6557
 25159 003a 9A42     		cmp	r2, r3
 25160 003c 0746     		mov	r7, r0
 25161 003e 8846     		mov	r8, r1
 25162              	.LBE3461:
 25163              	.LBE3460:
4611:src/xeq.c     **** 
 25164              		.loc 1 4611 3 is_stmt 1 view .LVU6558
 25165              	.LVL1947:
4614:src/xeq.c     **** 			bad_mode_error();
 25166              		.loc 1 4614 3 view .LVU6559
 25167              	.LBB3463:
 25168              	.LBI3460:
4508:src/xeq.c     **** {
 25169              		.loc 1 4508 24 view .LVU6560
 25170              	.LBB3462:
4510:src/xeq.c     **** 	if (xp < xrom)
 25171              		.loc 1 4510 2 view .LVU6561
4511:src/xeq.c     **** 		return NULL;
 25172              		.loc 1 4511 2 view .LVU6562
4511:src/xeq.c     **** 		return NULL;
 25173              		.loc 1 4511 5 is_stmt 0 view .LVU6563
 25174 0040 11D3     		bcc	.L1817
4515:src/xeq.c     **** 		return NULL;
 25175              		.loc 1 4515 2 is_stmt 1 view .LVU6564
4515:src/xeq.c     **** 		return NULL;
 25176              		.loc 1 4515 17 is_stmt 0 view .LVU6565
 25177 0042 2249     		ldr	r1, .L1833+12
 25178              	.LVL1948:
4515:src/xeq.c     **** 		return NULL;
 25179              		.loc 1 4515 17 view .LVU6566
 25180 0044 0988     		ldrh	r1, [r1]
 25181 0046 03EB4103 		add	r3, r3, r1, lsl #1
4515:src/xeq.c     **** 		return NULL;
 25182              		.loc 1 4515 5 view .LVU6567
 25183 004a 9A42     		cmp	r2, r3
 25184 004c 0BD2     		bcs	.L1817
 25185              	.LVL1949:
4515:src/xeq.c     **** 		return NULL;
 25186              		.loc 1 4515 5 view .LVU6568
 25187              	.LBE3462:
 25188              	.LBE3463:
4614:src/xeq.c     **** 			bad_mode_error();
 25189              		.loc 1 4614 6 view .LVU6569
 25190 004e 52B1     		cbz	r2, .L1817
 25191              	.LVL1950:
 25192              	.L1818:
4614:src/xeq.c     **** 			bad_mode_error();
 25193              		.loc 1 4614 6 view .LVU6570
 25194              	.LBE3459:
4609:src/xeq.c     **** 	else {
ARM GAS  /tmp/cccVhVyH.s 			page 651


 25195              		.loc 1 4609 3 is_stmt 1 view .LVU6571
 25196              	.LBB3472:
 25197              	.LBI3472:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 25198              		.loc 1 575 6 view .LVU6572
 25199              	.LBE3472:
 576:src/xeq.c     **** }
 25200              		.loc 1 576 2 view .LVU6573
 25201              	.LBB3481:
 25202              	.LBB3473:
 25203              	.LBI3473:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25204              		.loc 1 546 5 view .LVU6574
 25205              	.LBB3474:
 547:src/xeq.c     **** 		Error = e;
 25206              		.loc 1 547 2 view .LVU6575
 547:src/xeq.c     **** 		Error = e;
 25207              		.loc 1 547 12 is_stmt 0 view .LVU6576
 25208 0050 1F4B     		ldr	r3, .L1833+16
 547:src/xeq.c     **** 		Error = e;
 25209              		.loc 1 547 5 view .LVU6577
 25210 0052 1A68     		ldr	r2, [r3]
 25211 0054 22B1     		cbz	r2, .L1815
 25212              	.LVL1951:
 25213              	.L1830:
 25214              	.LBB3475:
 25215              	.LBB3476:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25216              		.loc 1 549 3 is_stmt 1 view .LVU6578
 25217              	.LBE3476:
 25218              	.LBE3475:
 25219              	.LBE3474:
 25220              	.LBE3473:
 25221              	.LBE3481:
4628:src/xeq.c     **** }
 25222              		.loc 1 4628 9 is_stmt 0 view .LVU6579
 25223 0056 0020     		movs	r0, #0
 25224 0058 0146     		mov	r1, r0
4629:src/xeq.c     **** 
 25225              		.loc 1 4629 1 view .LVU6580
 25226 005a 1EB0     		add	sp, sp, #120
 25227              		.cfi_remember_state
 25228              		.cfi_def_cfa_offset 24
 25229              		@ sp needed
 25230 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25231              	.LVL1952:
 25232              	.L1815:
 25233              		.cfi_restore_state
 25234              	.LBB3482:
 25235              	.LBB3480:
 25236              	.LBB3479:
 25237              	.LBB3478:
 25238              	.LBI3475:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25239              		.loc 1 546 5 is_stmt 1 view .LVU6581
 25240              	.LBB3477:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/cccVhVyH.s 			page 652


 25241              		.loc 1 548 3 view .LVU6582
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25242              		.loc 1 548 9 is_stmt 0 view .LVU6583
 25243 0060 0D22     		movs	r2, #13
 25244 0062 1A60     		str	r2, [r3]
 25245 0064 F7E7     		b	.L1830
 25246              	.LVL1953:
 25247              	.L1817:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25248              		.loc 1 548 9 view .LVU6584
 25249              	.LBE3477:
 25250              	.LBE3478:
 25251              	.LBE3479:
 25252              	.LBE3480:
 25253              	.LBE3482:
 25254              	.LBB3483:
4619:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25255              		.loc 1 4619 4 is_stmt 1 view .LVU6585
 25256 0066 2B46     		mov	r3, r5
 25257 0068 3246     		mov	r2, r6
 25258 006a 03A8     		add	r0, sp, #12
 25259              	.LVL1954:
4619:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25260              		.loc 1 4619 4 is_stmt 0 view .LVU6586
 25261 006c FFF7FEFF 		bl	ullint_to_dn
 25262              	.LVL1955:
4619:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25263              		.loc 1 4619 27 is_stmt 1 view .LVU6587
4619:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25264              		.loc 1 4619 30 is_stmt 0 view .LVU6588
 25265 0070 019B     		ldr	r3, [sp, #4]
 25266 0072 03BB     		cbnz	r3, .L1831
 25267              	.L1819:
4620:src/xeq.c     **** 
 25268              		.loc 1 4620 4 is_stmt 1 view .LVU6589
 25269 0074 4346     		mov	r3, r8
 25270 0076 3A46     		mov	r2, r7
 25271 0078 0CA8     		add	r0, sp, #48
 25272 007a FFF7FEFF 		bl	ullint_to_dn
 25273              	.LVL1956:
4620:src/xeq.c     **** 
 25274              		.loc 1 4620 27 view .LVU6590
4620:src/xeq.c     **** 
 25275              		.loc 1 4620 30 is_stmt 0 view .LVU6591
 25276 007e 029B     		ldr	r3, [sp, #8]
 25277 0080 A3B9     		cbnz	r3, .L1832
 25278              	.L1820:
4622:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25279              		.loc 1 4622 4 is_stmt 1 view .LVU6592
4622:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25280              		.loc 1 4622 16 is_stmt 0 view .LVU6593
 25281 0082 03AA     		add	r2, sp, #12
 25282 0084 0CA9     		add	r1, sp, #48
 25283 0086 15A8     		add	r0, sp, #84
 25284 0088 A047     		blx	r4
 25285              	.LVL1957:
4622:src/xeq.c     **** 				report_err(ERR_DOMAIN);
ARM GAS  /tmp/cccVhVyH.s 			page 653


 25286              		.loc 1 4622 7 view .LVU6594
 25287 008a 48B9     		cbnz	r0, .L1821
4623:src/xeq.c     **** 			else
 25288              		.loc 1 4623 5 is_stmt 1 view .LVU6595
 25289              	.LVL1958:
 25290              	.LBB3464:
 25291              	.LBI3464:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25292              		.loc 1 546 5 view .LVU6596
 25293              	.LBB3465:
 547:src/xeq.c     **** 		Error = e;
 25294              		.loc 1 547 2 view .LVU6597
 547:src/xeq.c     **** 		Error = e;
 25295              		.loc 1 547 12 is_stmt 0 view .LVU6598
 25296 008c 104B     		ldr	r3, .L1833+16
 547:src/xeq.c     **** 		Error = e;
 25297              		.loc 1 547 5 view .LVU6599
 25298 008e 1A68     		ldr	r2, [r3]
 25299 0090 002A     		cmp	r2, #0
 25300 0092 E0D1     		bne	.L1830
 25301              	.LVL1959:
 25302              	.LBB3466:
 25303              	.LBI3466:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25304              		.loc 1 546 5 is_stmt 1 view .LVU6600
 25305              	.LBB3467:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25306              		.loc 1 548 3 view .LVU6601
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25307              		.loc 1 548 9 is_stmt 0 view .LVU6602
 25308 0094 0122     		movs	r2, #1
 25309              	.LBE3467:
 25310              	.LBE3466:
 25311              	.LBE3465:
 25312              	.LBE3464:
 25313              	.LBE3483:
4628:src/xeq.c     **** }
 25314              		.loc 1 4628 9 view .LVU6603
 25315 0096 0146     		mov	r1, r0
 25316              	.LBB3484:
 25317              	.LBB3471:
 25318              	.LBB3470:
 25319              	.LBB3469:
 25320              	.LBB3468:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25321              		.loc 1 548 9 view .LVU6604
 25322 0098 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25323              		.loc 1 549 3 is_stmt 1 view .LVU6605
 25324              	.LBE3468:
 25325              	.LBE3469:
 25326              	.LBE3470:
 25327              	.LBE3471:
 25328              	.LBE3484:
4629:src/xeq.c     **** 
 25329              		.loc 1 4629 1 is_stmt 0 view .LVU6606
 25330 009a 1EB0     		add	sp, sp, #120
ARM GAS  /tmp/cccVhVyH.s 			page 654


 25331              		.cfi_remember_state
 25332              		.cfi_def_cfa_offset 24
 25333              		@ sp needed
 25334 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25335              	.LVL1960:
 25336              	.L1821:
 25337              		.cfi_restore_state
 25338              	.LBB3485:
4625:src/xeq.c     **** 		}
 25339              		.loc 1 4625 5 is_stmt 1 view .LVU6607
4625:src/xeq.c     **** 		}
 25340              		.loc 1 4625 12 is_stmt 0 view .LVU6608
 25341 00a0 15A8     		add	r0, sp, #84
 25342 00a2 FFF7FEFF 		bl	intResult
 25343              	.LVL1961:
 25344              	.LBE3485:
4629:src/xeq.c     **** 
 25345              		.loc 1 4629 1 view .LVU6609
 25346 00a6 1EB0     		add	sp, sp, #120
 25347              		.cfi_remember_state
 25348              		.cfi_def_cfa_offset 24
 25349              		@ sp needed
 25350 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25351              	.LVL1962:
 25352              	.L1832:
 25353              		.cfi_restore_state
 25354              	.LBB3486:
4620:src/xeq.c     **** 
 25355              		.loc 1 4620 35 is_stmt 1 discriminator 1 view .LVU6610
 25356 00ac 0CA9     		add	r1, sp, #48
 25357 00ae 0846     		mov	r0, r1
 25358 00b0 FFF7FEFF 		bl	dn_minus
 25359              	.LVL1963:
 25360 00b4 E5E7     		b	.L1820
 25361              	.L1831:
4619:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25362              		.loc 1 4619 35 discriminator 1 view .LVU6611
 25363 00b6 03A9     		add	r1, sp, #12
 25364 00b8 0846     		mov	r0, r1
 25365 00ba FFF7FEFF 		bl	dn_minus
 25366              	.LVL1964:
 25367 00be D9E7     		b	.L1819
 25368              	.L1834:
 25369              		.align	2
 25370              	.L1833:
 25371 00c0 00000000 		.word	XeqOpCode
 25372 00c4 00000000 		.word	dyfuncs
 25373 00c8 00000000 		.word	xrom
 25374 00cc 00000000 		.word	xrom_size
 25375 00d0 00000000 		.word	Error
 25376              	.LBE3486:
 25377              		.cfi_endproc
 25378              	.LFE241:
 25380              		.section	.text.xeq_init_contexts,"ax",%progbits
 25381              		.align	1
 25382              		.p2align 2,,3
 25383              		.global	xeq_init_contexts
ARM GAS  /tmp/cccVhVyH.s 			page 655


 25384              		.syntax unified
 25385              		.thumb
 25386              		.thumb_func
 25387              		.fpu fpv4-sp-d16
 25389              	xeq_init_contexts:
 25390              	.LFB258:
5635:src/xeq.c     **** 	/*
 25391              		.loc 1 5635 30 view -0
 25392              		.cfi_startproc
 25393              		@ args = 0, pretend = 0, frame = 0
 25394              		@ frame_needed = 0, uses_anonymous_args = 0
5639:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
 25395              		.loc 1 5639 2 view .LVU6613
5640:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25396              		.loc 1 5640 2 view .LVU6614
5635:src/xeq.c     **** 	/*
 25397              		.loc 1 5635 30 is_stmt 0 view .LVU6615
 25398 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 25399              		.cfi_def_cfa_offset 24
 25400              		.cfi_offset 3, -24
 25401              		.cfi_offset 4, -20
 25402              		.cfi_offset 5, -16
 25403              		.cfi_offset 6, -12
 25404              		.cfi_offset 7, -8
 25405              		.cfi_offset 14, -4
5640:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25406              		.loc 1 5640 17 view .LVU6616
 25407 0002 1D4B     		ldr	r3, .L1840
5643:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25408              		.loc 1 5643 13 view .LVU6617
 25409 0004 1D4F     		ldr	r7, .L1840+4
5640:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25410              		.loc 1 5640 17 view .LVU6618
 25411 0006 1A68     		ldr	r2, [r3]
5640:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25412              		.loc 1 5640 34 view .LVU6619
 25413 0008 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
5641:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25414              		.loc 1 5641 21 view .LVU6620
 25415 000c 92F8CF17 		ldrb	r1, [r2, #1999]	@ zero_extendqisi2
5643:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25416              		.loc 1 5643 36 view .LVU6621
 25417 0010 5088     		ldrh	r0, [r2, #2]
5645:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25418              		.loc 1 5645 34 view .LVU6622
 25419 0012 B2F9E247 		ldrsh	r4, [r2, #2018]
5640:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25420              		.loc 1 5640 59 view .LVU6623
 25421 0016 13F02003 		ands	r3, r3, #32
 25422 001a 18BF     		it	ne
 25423 001c 4623     		movne	r3, #70
5641:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25424              		.loc 1 5641 19 view .LVU6624
 25425 001e C1F16401 		rsb	r1, r1, #100
5640:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25426              		.loc 1 5640 59 view .LVU6625
 25427 0022 1E46     		mov	r6, r3
ARM GAS  /tmp/cccVhVyH.s 			page 656


5641:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25428              		.loc 1 5641 36 view .LVU6626
 25429 0024 C3EB8103 		rsb	r3, r3, r1, lsl #2
5644:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25430              		.loc 1 5644 31 view .LVU6627
 25431 0028 03F50471 		add	r1, r3, #528
 25432 002c 89B2     		uxth	r1, r1
5645:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25433              		.loc 1 5645 21 view .LVU6628
 25434 002e 0D1A     		subs	r5, r1, r0
5642:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25435              		.loc 1 5642 22 view .LVU6629
 25436 0030 03F21623 		addw	r3, r3, #534
5643:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25437              		.loc 1 5643 34 view .LVU6630
 25438 0034 181A     		subs	r0, r3, r0
5645:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25439              		.loc 1 5645 32 view .LVU6631
 25440 0036 2544     		add	r5, r5, r4
5642:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25441              		.loc 1 5642 11 view .LVU6632
 25442 0038 141D     		adds	r4, r2, #4
5643:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25443              		.loc 1 5643 13 view .LVU6633
 25444 003a 3860     		str	r0, [r7]
5642:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25445              		.loc 1 5642 22 view .LVU6634
 25446 003c 04EB4303 		add	r3, r4, r3, lsl #1
5640:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25447              		.loc 1 5640 15 view .LVU6635
 25448 0040 0F48     		ldr	r0, .L1840+8
5642:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25449              		.loc 1 5642 9 view .LVU6636
 25450 0042 104C     		ldr	r4, .L1840+12
5645:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25451              		.loc 1 5645 11 view .LVU6637
 25452 0044 104F     		ldr	r7, .L1840+16
5642:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25453              		.loc 1 5642 9 view .LVU6638
 25454 0046 2360     		str	r3, [r4]
5640:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25455              		.loc 1 5640 15 view .LVU6639
 25456 0048 0660     		str	r6, [r0]
5641:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25457              		.loc 1 5641 2 is_stmt 1 view .LVU6640
 25458              	.LVL1965:
5642:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25459              		.loc 1 5642 2 view .LVU6641
5643:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25460              		.loc 1 5643 2 view .LVU6642
5644:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25461              		.loc 1 5644 2 view .LVU6643
5644:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25462              		.loc 1 5644 10 is_stmt 0 view .LVU6644
 25463 004a 1180     		strh	r1, [r2]	@ movhi
5645:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25464              		.loc 1 5645 2 is_stmt 1 view .LVU6645
ARM GAS  /tmp/cccVhVyH.s 			page 657


5646:src/xeq.c     **** 
 25465              		.loc 1 5646 14 is_stmt 0 view .LVU6646
 25466 004c 6420     		movs	r0, #100
5645:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25467              		.loc 1 5645 11 view .LVU6647
 25468 004e 3D60     		str	r5, [r7]
5646:src/xeq.c     **** 
 25469              		.loc 1 5646 2 is_stmt 1 view .LVU6648
5646:src/xeq.c     **** 
 25470              		.loc 1 5646 14 is_stmt 0 view .LVU6649
 25471 0050 FFF7FEFF 		bl	get_reg_n
 25472              	.LVL1966:
5652:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25473              		.loc 1 5652 2 view .LVU6650
 25474 0054 0D4C     		ldr	r4, .L1840+20
5646:src/xeq.c     **** 
 25475              		.loc 1 5646 12 view .LVU6651
 25476 0056 0E4B     		ldr	r3, .L1840+24
5646:src/xeq.c     **** 
 25477              		.loc 1 5646 14 view .LVU6652
 25478 0058 0246     		mov	r2, r0
5652:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25479              		.loc 1 5652 2 view .LVU6653
 25480 005a 0021     		movs	r1, #0
 25481 005c 2046     		mov	r0, r4
5646:src/xeq.c     **** 
 25482              		.loc 1 5646 12 view .LVU6654
 25483 005e 1A60     		str	r2, [r3]
5652:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25484              		.loc 1 5652 2 is_stmt 1 view .LVU6655
 25485 0060 FFF7FEFF 		bl	decContextDefault
 25486              	.LVL1967:
5653:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25487              		.loc 1 5653 2 view .LVU6656
5653:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25488              		.loc 1 5653 13 is_stmt 0 view .LVU6657
 25489 0064 2723     		movs	r3, #39
5654:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 25490              		.loc 1 5654 10 view .LVU6658
 25491 0066 0B49     		ldr	r1, .L1840+28
5655:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 25492              		.loc 1 5655 10 view .LVU6659
 25493 0068 0B4A     		ldr	r2, .L1840+32
5653:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25494              		.loc 1 5653 13 view .LVU6660
 25495 006a 2360     		str	r3, [r4]
5654:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 25496              		.loc 1 5654 2 is_stmt 1 view .LVU6661
5656:src/xeq.c     **** }
 25497              		.loc 1 5656 12 is_stmt 0 view .LVU6662
 25498 006c 0323     		movs	r3, #3
 25499 006e 2373     		strb	r3, [r4, #12]
5655:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 25500              		.loc 1 5655 10 view .LVU6663
 25501 0070 C4E90112 		strd	r1, r2, [r4, #4]
5656:src/xeq.c     **** }
 25502              		.loc 1 5656 2 is_stmt 1 view .LVU6664
ARM GAS  /tmp/cccVhVyH.s 			page 658


5657:src/xeq.c     **** 
 25503              		.loc 1 5657 1 is_stmt 0 view .LVU6665
 25504 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 25505              	.L1841:
 25506 0076 00BF     		.align	2
 25507              	.L1840:
 25508 0078 00000000 		.word	main_ram
 25509 007c 00000000 		.word	RetStkSize
 25510 0080 00000000 		.word	SizeStatRegs
 25511 0084 00000000 		.word	RetStk
 25512 0088 00000000 		.word	ProgFree
 25513 008c 00000000 		.word	Ctx
 25514 0090 00000000 		.word	StackBase
 25515 0094 3F420F00 		.word	999999
 25516 0098 C1BDF0FF 		.word	-999999
 25517              		.cfi_endproc
 25518              	.LFE258:
 25520              		.section	.text.plot_check_range,"ax",%progbits
 25521              		.align	1
 25522              		.p2align 2,,3
 25523              		.global	plot_check_range
 25524              		.syntax unified
 25525              		.thumb
 25526              		.thumb_func
 25527              		.fpu fpv4-sp-d16
 25529              	plot_check_range:
 25530              	.LVL1968:
 25531              	.LFB259:
5673:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
 25532              		.loc 1 5673 1 is_stmt 1 view -0
 25533              		.cfi_startproc
 25534              		@ args = 0, pretend = 0, frame = 0
 25535              		@ frame_needed = 0, uses_anonymous_args = 0
5674:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
 25536              		.loc 1 5674 2 view .LVU6667
5673:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
 25537              		.loc 1 5673 1 is_stmt 0 view .LVU6668
 25538 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 25539              		.cfi_def_cfa_offset 24
 25540              		.cfi_offset 3, -24
 25541              		.cfi_offset 4, -20
 25542              		.cfi_offset 5, -16
 25543              		.cfi_offset 6, -12
 25544              		.cfi_offset 7, -8
 25545              		.cfi_offset 14, -4
5673:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
 25546              		.loc 1 5673 1 view .LVU6669
 25547 0002 0D46     		mov	r5, r1
 25548 0004 1446     		mov	r4, r2
 25549 0006 0646     		mov	r6, r0
5674:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
 25550              		.loc 1 5674 39 view .LVU6670
 25551 0008 FFF7FEFF 		bl	get_reg_n
 25552              	.LVL1969:
 25553              	.LBB3502:
 25554              	.LBB3503:
1122:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 659


 25555              		.loc 1 1122 12 view .LVU6671
 25556 000c 244B     		ldr	r3, .L1861
 25557 000e 1968     		ldr	r1, [r3]
1122:src/xeq.c     **** }
 25558              		.loc 1 1122 24 view .LVU6672
 25559 0010 B1F8E827 		ldrh	r2, [r1, #2024]
 25560 0014 44F20103 		movw	r3, #16385
 25561              	.LBE3503:
 25562              	.LBE3502:
5675:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 25563              		.loc 1 5675 28 view .LVU6673
 25564 0018 1340     		ands	r3, r3, r2
 25565              	.LVL1970:
5675:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 25566              		.loc 1 5675 2 is_stmt 1 view .LVU6674
 25567              	.LBB3505:
 25568              	.LBI3502:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 25569              		.loc 1 1121 5 view .LVU6675
 25570              	.LBB3504:
1122:src/xeq.c     **** }
 25571              		.loc 1 1122 2 view .LVU6676
 25572              	.LBE3504:
 25573              	.LBE3505:
5675:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 25574              		.loc 1 5675 28 is_stmt 0 view .LVU6677
 25575 001a B3F5804F 		cmp	r3, #16384
 25576 001e 26D0     		beq	.L1858
 25577              	.LVL1971:
5676:src/xeq.c     **** 	int bytes;
 25578              		.loc 1 5676 2 is_stmt 1 view .LVU6678
5676:src/xeq.c     **** 	int bytes;
 25579              		.loc 1 5676 45 is_stmt 0 view .LVU6679
 25580 0020 632E     		cmp	r6, #99
 25581 0022 1ADD     		ble	.L1851
 25582 0024 4FF0020C 		mov	ip, #2
5675:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 25583              		.loc 1 5675 28 view .LVU6680
 25584 0028 0827     		movs	r7, #8
 25585              	.LVL1972:
 25586              	.L1852:
 25587              	.LBB3506:
 25588              	.LBB3507:
 25589              	.LBB3508:
 227:src/xeq.c     **** }
 25590              		.loc 1 227 2 is_stmt 1 view .LVU6681
 25591              	.LBB3509:
 25592              	.LBI3509:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 25593              		.loc 1 217 5 view .LVU6682
 25594              	.LBB3510:
 218:src/xeq.c     **** }
 25595              		.loc 1 218 2 view .LVU6683
 218:src/xeq.c     **** }
 25596              		.loc 1 218 9 is_stmt 0 view .LVU6684
 25597 002a B1F8DE37 		ldrh	r3, [r1, #2014]
 25598 002e 43F34A13 		sbfx	r3, r3, #5, #11
ARM GAS  /tmp/cccVhVyH.s 			page 660


 218:src/xeq.c     **** }
 25599              		.loc 1 218 57 view .LVU6685
 25600 0032 002B     		cmp	r3, #0
 25601 0034 23DB     		blt	.L1859
 25602 0036 7022     		movs	r2, #112
 25603              	.L1846:
 25604              	.LVL1973:
 218:src/xeq.c     **** }
 25605              		.loc 1 218 57 view .LVU6686
 25606              	.LBE3510:
 25607              	.LBE3509:
 25608              	.LBE3508:
 25609              	.LBE3507:
 25610              	.LBE3506:
5677:src/xeq.c     **** 
 25611              		.loc 1 5677 2 is_stmt 1 discriminator 4 view .LVU6687
5679:src/xeq.c     **** 		width = (int) *p;
 25612              		.loc 1 5679 2 discriminator 4 view .LVU6688
5679:src/xeq.c     **** 		width = (int) *p;
 25613              		.loc 1 5679 5 is_stmt 0 discriminator 4 view .LVU6689
 25614 0038 0DB9     		cbnz	r5, .L1848
5680:src/xeq.c     **** 		height = (int) p[ 1 ];
 25615              		.loc 1 5680 3 is_stmt 1 view .LVU6690
5680:src/xeq.c     **** 		height = (int) p[ 1 ];
 25616              		.loc 1 5680 9 is_stmt 0 view .LVU6691
 25617 003a 0578     		ldrb	r5, [r0]	@ zero_extendqisi2
 25618              	.LVL1974:
5681:src/xeq.c     **** 	}
 25619              		.loc 1 5681 3 is_stmt 1 view .LVU6692
5681:src/xeq.c     **** 	}
 25620              		.loc 1 5681 10 is_stmt 0 view .LVU6693
 25621 003c 4478     		ldrb	r4, [r0, #1]	@ zero_extendqisi2
 25622              	.LVL1975:
 25623              	.L1848:
5687:src/xeq.c     **** 
 25624              		.loc 1 5687 2 is_stmt 1 view .LVU6694
5687:src/xeq.c     **** 
 25625              		.loc 1 5687 20 is_stmt 0 view .LVU6695
 25626 003e 04FB05F4 		mul	r4, r4, r5
 25627              	.LVL1976:
5692:src/xeq.c     **** 		report_err( ERR_RANGE );
 25628              		.loc 1 5692 5 view .LVU6696
 25629 0042 A62D     		cmp	r5, #166
5687:src/xeq.c     **** 
 25630              		.loc 1 5687 8 view .LVU6697
 25631 0044 04F10204 		add	r4, r4, #2
 25632              	.LVL1977:
5692:src/xeq.c     **** 		report_err( ERR_RANGE );
 25633              		.loc 1 5692 2 is_stmt 1 view .LVU6698
5692:src/xeq.c     **** 		report_err( ERR_RANGE );
 25634              		.loc 1 5692 5 is_stmt 0 view .LVU6699
 25635 0048 0BDC     		bgt	.L1849
5692:src/xeq.c     **** 		report_err( ERR_RANGE );
 25636              		.loc 1 5692 44 discriminator 1 view .LVU6700
 25637 004a E319     		adds	r3, r4, r7
5692:src/xeq.c     **** 		report_err( ERR_RANGE );
 25638              		.loc 1 5692 48 discriminator 1 view .LVU6701
ARM GAS  /tmp/cccVhVyH.s 			page 661


 25639 004c 013B     		subs	r3, r3, #1
5692:src/xeq.c     **** 		report_err( ERR_RANGE );
 25640              		.loc 1 5692 54 discriminator 1 view .LVU6702
 25641 004e 93FBF7F3 		sdiv	r3, r3, r7
5692:src/xeq.c     **** 		report_err( ERR_RANGE );
 25642              		.loc 1 5692 34 discriminator 1 view .LVU6703
 25643 0052 9C19     		adds	r4, r3, r6
 25644              	.LVL1978:
5692:src/xeq.c     **** 		report_err( ERR_RANGE );
 25645              		.loc 1 5692 27 discriminator 1 view .LVU6704
 25646 0054 9442     		cmp	r4, r2
 25647 0056 04DC     		bgt	.L1849
5697:src/xeq.c     **** 
 25648              		.loc 1 5697 1 view .LVU6705
 25649 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 25650              	.LVL1979:
 25651              	.L1851:
 25652              	.LBB3515:
 25653              	.LBB3516:
 25654              	.LBB3517:
 247:src/xeq.c     **** }
 25655              		.loc 1 247 3 is_stmt 1 view .LVU6706
 25656 005a 91F8CF27 		ldrb	r2, [r1, #1999]	@ zero_extendqisi2
 247:src/xeq.c     **** }
 25657              		.loc 1 247 10 is_stmt 0 view .LVU6707
 25658 005e 0827     		movs	r7, #8
 25659              	.LVL1980:
 247:src/xeq.c     **** }
 25660              		.loc 1 247 10 view .LVU6708
 25661 0060 EAE7     		b	.L1846
 25662              	.LVL1981:
 25663              	.L1849:
 247:src/xeq.c     **** }
 25664              		.loc 1 247 10 view .LVU6709
 25665              	.LBE3517:
 25666              	.LBE3516:
 25667              	.LBE3515:
5693:src/xeq.c     **** 		return (unsigned char *) NULL;
 25668              		.loc 1 5693 3 is_stmt 1 view .LVU6710
 25669              	.LBB3526:
 25670              	.LBI3526:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25671              		.loc 1 546 5 view .LVU6711
 25672              	.LBB3527:
 547:src/xeq.c     **** 		Error = e;
 25673              		.loc 1 547 2 view .LVU6712
 547:src/xeq.c     **** 		Error = e;
 25674              		.loc 1 547 12 is_stmt 0 view .LVU6713
 25675 0062 104B     		ldr	r3, .L1861+4
 547:src/xeq.c     **** 		Error = e;
 25676              		.loc 1 547 5 view .LVU6714
 25677 0064 1868     		ldr	r0, [r3]
 25678              	.LVL1982:
 547:src/xeq.c     **** 		Error = e;
 25679              		.loc 1 547 5 view .LVU6715
 25680 0066 C0B9     		cbnz	r0, .L1855
 25681              	.LVL1983:
ARM GAS  /tmp/cccVhVyH.s 			page 662


 25682              	.LBB3528:
 25683              	.LBI3528:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25684              		.loc 1 546 5 is_stmt 1 view .LVU6716
 25685              	.LBB3529:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25686              		.loc 1 548 3 view .LVU6717
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25687              		.loc 1 548 9 is_stmt 0 view .LVU6718
 25688 0068 0822     		movs	r2, #8
 25689              	.LVL1984:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25690              		.loc 1 548 9 view .LVU6719
 25691 006a 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25692              		.loc 1 549 3 is_stmt 1 view .LVU6720
 25693              	.LBE3529:
 25694              	.LBE3528:
 25695              	.LBE3527:
 25696              	.LBE3526:
5697:src/xeq.c     **** 
 25697              		.loc 1 5697 1 is_stmt 0 view .LVU6721
 25698 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 25699              	.LVL1985:
 25700              	.L1858:
5676:src/xeq.c     **** 	int bytes;
 25701              		.loc 1 5676 2 is_stmt 1 view .LVU6722
5676:src/xeq.c     **** 	int bytes;
 25702              		.loc 1 5676 45 is_stmt 0 view .LVU6723
 25703 006e 632E     		cmp	r6, #99
 25704 0070 0FDC     		bgt	.L1860
 25705              	.LBB3530:
 25706              	.LBI3515:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 25707              		.loc 1 253 14 is_stmt 1 view .LVU6724
 25708              	.LBE3530:
 254:src/xeq.c     **** }
 25709              		.loc 1 254 2 view .LVU6725
 25710              	.LVL1986:
 25711              	.LBB3531:
 25712              	.LBB3523:
 25713              	.LBI3516:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 25714              		.loc 1 241 14 view .LVU6726
 25715              	.LBB3520:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 25716              		.loc 1 242 2 view .LVU6727
 25717              	.LBE3520:
 25718              	.LBE3523:
 25719              	.LBE3531:
1122:src/xeq.c     **** }
 25720              		.loc 1 1122 2 view .LVU6728
 25721              	.LBB3532:
 25722              	.LBB3524:
 25723              	.LBB3521:
 25724              	.LBB3518:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
ARM GAS  /tmp/cccVhVyH.s 			page 663


 25725              		.loc 1 243 3 view .LVU6729
 244:src/xeq.c     **** 	}
 25726              		.loc 1 244 3 view .LVU6730
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 25727              		.loc 1 243 24 is_stmt 0 view .LVU6731
 25728 0072 91F8CF27 		ldrb	r2, [r1, #1999]	@ zero_extendqisi2
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 25729              		.loc 1 243 13 view .LVU6732
 25730 0076 0C3A     		subs	r2, r2, #12
 25731              	.LVL1987:
 244:src/xeq.c     **** 	}
 25732              		.loc 1 244 67 view .LVU6733
 25733 0078 5210     		asrs	r2, r2, #1
 25734              	.LVL1988:
 244:src/xeq.c     **** 	}
 25735              		.loc 1 244 67 view .LVU6734
 25736              	.LBE3518:
 25737              	.LBE3521:
 25738              	.LBE3524:
 25739              	.LBE3532:
5675:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 25740              		.loc 1 5675 28 view .LVU6735
 25741 007a 1027     		movs	r7, #16
 25742              	.LBB3533:
 25743              	.LBB3525:
 25744              	.LBB3522:
 25745              	.LBB3519:
 244:src/xeq.c     **** 	}
 25746              		.loc 1 244 56 view .LVU6736
 25747 007c DCE7     		b	.L1846
 25748              	.LVL1989:
 25749              	.L1859:
 244:src/xeq.c     **** 	}
 25750              		.loc 1 244 56 view .LVU6737
 25751              	.LBE3519:
 25752              	.LBE3522:
 25753              	.LBE3525:
 25754              	.LBE3533:
 25755              	.LBB3534:
 25756              	.LBB3514:
 25757              	.LBB3513:
 25758              	.LBB3512:
 25759              	.LBB3511:
 218:src/xeq.c     **** }
 25760              		.loc 1 218 25 view .LVU6738
 25761 007e 0A4A     		ldr	r2, .L1861+8
 25762 0080 1268     		ldr	r2, [r2]
 218:src/xeq.c     **** }
 25763              		.loc 1 218 57 view .LVU6739
 25764 0082 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 25765 0086 C2F30B02 		ubfx	r2, r2, #0, #12
 25766 008a 42FA0CF2 		asr	r2, r2, ip
 25767 008e 7032     		adds	r2, r2, #112
 25768 0090 D2E7     		b	.L1846
 25769              	.LVL1990:
 25770              	.L1860:
 218:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 664


 25771              		.loc 1 218 57 view .LVU6740
 25772              	.LBE3511:
 25773              	.LBE3512:
 25774              	.LBE3513:
 25775              	.LBE3514:
 25776              	.LBE3534:
5676:src/xeq.c     **** 	int bytes;
 25777              		.loc 1 5676 45 view .LVU6741
 25778 0092 4FF0030C 		mov	ip, #3
5675:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 25779              		.loc 1 5675 28 view .LVU6742
 25780 0096 1027     		movs	r7, #16
 25781 0098 C7E7     		b	.L1852
 25782              	.LVL1991:
 25783              	.L1855:
5694:src/xeq.c     **** 	}
 25784              		.loc 1 5694 10 view .LVU6743
 25785 009a 0020     		movs	r0, #0
 25786              	.LVL1992:
5697:src/xeq.c     **** 
 25787              		.loc 1 5697 1 view .LVU6744
 25788 009c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 25789              	.LVL1993:
 25790              	.L1862:
5697:src/xeq.c     **** 
 25791              		.loc 1 5697 1 view .LVU6745
 25792 009e 00BF     		.align	2
 25793              	.L1861:
 25794 00a0 00000000 		.word	main_ram
 25795 00a4 00000000 		.word	Error
 25796 00a8 00000000 		.word	RetStk
 25797              		.cfi_endproc
 25798              	.LFE259:
 25800              		.section	.text.cmdplotdisplay,"ax",%progbits
 25801              		.align	1
 25802              		.p2align 2,,3
 25803              		.global	cmdplotdisplay
 25804              		.syntax unified
 25805              		.thumb
 25806              		.thumb_func
 25807              		.fpu fpv4-sp-d16
 25809              	cmdplotdisplay:
 25810              	.LVL1994:
 25811              	.LFB260:
5703:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
 25812              		.loc 1 5703 1 is_stmt 1 view -0
 25813              		.cfi_startproc
 25814              		@ args = 0, pretend = 0, frame = 0
 25815              		@ frame_needed = 0, uses_anonymous_args = 0
5704:src/xeq.c     **** 		DispPlot = arg + 1;
 25816              		.loc 1 5704 2 view .LVU6747
5704:src/xeq.c     **** 		DispPlot = arg + 1;
 25817              		.loc 1 5704 6 is_stmt 0 view .LVU6748
 25818 0000 0022     		movs	r2, #0
5703:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
 25819              		.loc 1 5703 1 view .LVU6749
 25820 0002 10B5     		push	{r4, lr}
ARM GAS  /tmp/cccVhVyH.s 			page 665


 25821              		.cfi_def_cfa_offset 8
 25822              		.cfi_offset 4, -8
 25823              		.cfi_offset 14, -4
5704:src/xeq.c     **** 		DispPlot = arg + 1;
 25824              		.loc 1 5704 6 view .LVU6750
 25825 0004 1146     		mov	r1, r2
 25826              	.LVL1995:
5703:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
 25827              		.loc 1 5703 1 view .LVU6751
 25828 0006 0446     		mov	r4, r0
5704:src/xeq.c     **** 		DispPlot = arg + 1;
 25829              		.loc 1 5704 6 view .LVU6752
 25830 0008 FFF7FEFF 		bl	plot_check_range
 25831              	.LVL1996:
5704:src/xeq.c     **** 		DispPlot = arg + 1;
 25832              		.loc 1 5704 5 view .LVU6753
 25833 000c 30B1     		cbz	r0, .L1863
5705:src/xeq.c     **** 		frozen_display();
 25834              		.loc 1 5705 3 is_stmt 1 view .LVU6754
5705:src/xeq.c     **** 		frozen_display();
 25835              		.loc 1 5705 12 is_stmt 0 view .LVU6755
 25836 000e 044B     		ldr	r3, .L1866
5705:src/xeq.c     **** 		frozen_display();
 25837              		.loc 1 5705 18 view .LVU6756
 25838 0010 601C     		adds	r0, r4, #1
5708:src/xeq.c     **** 
 25839              		.loc 1 5708 1 view .LVU6757
 25840 0012 BDE81040 		pop	{r4, lr}
 25841              		.cfi_remember_state
 25842              		.cfi_restore 14
 25843              		.cfi_restore 4
 25844              		.cfi_def_cfa_offset 0
 25845              	.LVL1997:
5705:src/xeq.c     **** 		frozen_display();
 25846              		.loc 1 5705 12 view .LVU6758
 25847 0016 1880     		strh	r0, [r3]	@ movhi
5706:src/xeq.c     **** 	}
 25848              		.loc 1 5706 3 is_stmt 1 view .LVU6759
 25849 0018 FFF7FEBF 		b	frozen_display
 25850              	.LVL1998:
 25851              	.L1863:
 25852              		.cfi_restore_state
5708:src/xeq.c     **** 
 25853              		.loc 1 5708 1 is_stmt 0 view .LVU6760
 25854 001c 10BD     		pop	{r4, pc}
 25855              	.LVL1999:
 25856              	.L1867:
5708:src/xeq.c     **** 
 25857              		.loc 1 5708 1 view .LVU6761
 25858 001e 00BF     		.align	2
 25859              	.L1866:
 25860 0020 00000000 		.word	DispPlot
 25861              		.cfi_endproc
 25862              	.LFE260:
 25864              		.section	.text.cmdplotinit,"ax",%progbits
 25865              		.align	1
 25866              		.p2align 2,,3
ARM GAS  /tmp/cccVhVyH.s 			page 666


 25867              		.global	cmdplotinit
 25868              		.syntax unified
 25869              		.thumb
 25870              		.thumb_func
 25871              		.fpu fpv4-sp-d16
 25873              	cmdplotinit:
 25874              	.LVL2000:
 25875              	.LFB261:
5715:src/xeq.c     **** 	int sgnx, sgny;
 25876              		.loc 1 5715 1 is_stmt 1 view -0
 25877              		.cfi_startproc
 25878              		@ args = 0, pretend = 0, frame = 8
 25879              		@ frame_needed = 0, uses_anonymous_args = 0
5716:src/xeq.c     **** 	int width = (int) getX_int_sgn( &sgnx );
 25880              		.loc 1 5716 2 view .LVU6763
5717:src/xeq.c     **** 	int height = (int) get_reg_n_int_sgn( regY_idx, &sgny ); 
 25881              		.loc 1 5717 2 view .LVU6764
5715:src/xeq.c     **** 	int sgnx, sgny;
 25882              		.loc 1 5715 1 is_stmt 0 view .LVU6765
 25883 0000 70B5     		push	{r4, r5, r6, lr}
 25884              		.cfi_def_cfa_offset 16
 25885              		.cfi_offset 4, -16
 25886              		.cfi_offset 5, -12
 25887              		.cfi_offset 6, -8
 25888              		.cfi_offset 14, -4
 25889 0002 82B0     		sub	sp, sp, #8
 25890              		.cfi_def_cfa_offset 24
 25891              	.LVL2001:
 25892              	.LBB3535:
 25893              	.LBI3535:
1449:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 25894              		.loc 1 1449 24 is_stmt 1 view .LVU6766
 25895              	.LBB3536:
1450:src/xeq.c     **** }
 25896              		.loc 1 1450 2 view .LVU6767
 25897              	.LBE3536:
 25898              	.LBE3535:
5715:src/xeq.c     **** 	int sgnx, sgny;
 25899              		.loc 1 5715 1 is_stmt 0 view .LVU6768
 25900 0004 0646     		mov	r6, r0
 25901              	.LBB3539:
 25902              	.LBB3537:
1450:src/xeq.c     **** }
 25903              		.loc 1 1450 9 view .LVU6769
 25904 0006 6946     		mov	r1, sp
 25905              	.LVL2002:
1450:src/xeq.c     **** }
 25906              		.loc 1 1450 9 view .LVU6770
 25907 0008 6420     		movs	r0, #100
 25908              	.LVL2003:
1450:src/xeq.c     **** }
 25909              		.loc 1 1450 9 view .LVU6771
 25910 000a FFF7FEFF 		bl	get_reg_n_int_sgn
 25911              	.LVL2004:
 25912              	.LBE3537:
 25913              	.LBE3539:
5718:src/xeq.c     **** 	unsigned char *p;
ARM GAS  /tmp/cccVhVyH.s 			page 667


 25914              		.loc 1 5718 21 view .LVU6772
 25915 000e 01A9     		add	r1, sp, #4
 25916              	.LBB3540:
 25917              	.LBB3538:
1450:src/xeq.c     **** }
 25918              		.loc 1 1450 9 view .LVU6773
 25919 0010 0546     		mov	r5, r0
 25920              	.LBE3538:
 25921              	.LBE3540:
5718:src/xeq.c     **** 	unsigned char *p;
 25922              		.loc 1 5718 21 view .LVU6774
 25923 0012 6520     		movs	r0, #101
 25924              	.LVL2005:
5718:src/xeq.c     **** 	unsigned char *p;
 25925              		.loc 1 5718 2 is_stmt 1 view .LVU6775
5718:src/xeq.c     **** 	unsigned char *p;
 25926              		.loc 1 5718 21 is_stmt 0 view .LVU6776
 25927 0014 FFF7FEFF 		bl	get_reg_n_int_sgn
 25928              	.LVL2006:
5721:src/xeq.c     **** 		width = PAPER_WIDTH;
 25929              		.loc 1 5721 5 view .LVU6777
 25930 0018 009B     		ldr	r3, [sp]
 25931              	.LVL2007:
5719:src/xeq.c     **** 	
 25932              		.loc 1 5719 2 is_stmt 1 view .LVU6778
5721:src/xeq.c     **** 		width = PAPER_WIDTH;
 25933              		.loc 1 5721 2 view .LVU6779
5721:src/xeq.c     **** 		width = PAPER_WIDTH;
 25934              		.loc 1 5721 5 is_stmt 0 view .LVU6780
 25935 001a B3B9     		cbnz	r3, .L1872
5722:src/xeq.c     **** 	}
 25936              		.loc 1 5722 9 discriminator 1 view .LVU6781
 25937 001c 002D     		cmp	r5, #0
 25938 001e 08BF     		it	eq
 25939 0020 A625     		moveq	r5, #166
 25940              	.LVL2008:
 25941              	.L1869:
5724:src/xeq.c     **** 		height = 1;
 25942              		.loc 1 5724 2 is_stmt 1 view .LVU6782
5724:src/xeq.c     **** 		height = 1;
 25943              		.loc 1 5724 5 is_stmt 0 view .LVU6783
 25944 0022 019B     		ldr	r3, [sp, #4]
 25945 0024 03B9     		cbnz	r3, .L1874
5724:src/xeq.c     **** 		height = 1;
 25946              		.loc 1 5724 12 discriminator 1 view .LVU6784
 25947 0026 90B9     		cbnz	r0, .L1879
 25948              	.L1874:
5725:src/xeq.c     **** 	}
 25949              		.loc 1 5725 10 view .LVU6785
 25950 0028 0124     		movs	r4, #1
 25951              	.LVL2009:
 25952              	.L1870:
5734:src/xeq.c     **** 	if ( p != NULL ) {
 25953              		.loc 1 5734 2 is_stmt 1 view .LVU6786
5734:src/xeq.c     **** 	if ( p != NULL ) {
 25954              		.loc 1 5734 6 is_stmt 0 view .LVU6787
 25955 002a 3046     		mov	r0, r6
ARM GAS  /tmp/cccVhVyH.s 			page 668


 25956 002c 2246     		mov	r2, r4
 25957 002e 2946     		mov	r1, r5
 25958 0030 FFF7FEFF 		bl	plot_check_range
 25959              	.LVL2010:
5735:src/xeq.c     **** 		*p++ = (unsigned char) width;
 25960              		.loc 1 5735 2 is_stmt 1 view .LVU6788
5735:src/xeq.c     **** 		*p++ = (unsigned char) width;
 25961              		.loc 1 5735 5 is_stmt 0 view .LVU6789
 25962 0034 38B1     		cbz	r0, .L1868
5736:src/xeq.c     **** 		*p++ = (unsigned char) height;
 25963              		.loc 1 5736 3 is_stmt 1 view .LVU6790
 25964              	.LVL2011:
5736:src/xeq.c     **** 		*p++ = (unsigned char) height;
 25965              		.loc 1 5736 10 is_stmt 0 view .LVU6791
 25966 0036 0570     		strb	r5, [r0]
5737:src/xeq.c     **** 		xset( p, 0, width * height );
 25967              		.loc 1 5737 3 is_stmt 1 view .LVU6792
 25968              	.LVL2012:
5737:src/xeq.c     **** 		xset( p, 0, width * height );
 25969              		.loc 1 5737 10 is_stmt 0 view .LVU6793
 25970 0038 4470     		strb	r4, [r0, #1]
5738:src/xeq.c     **** 	}
 25971              		.loc 1 5738 3 is_stmt 1 view .LVU6794
 25972 003a 04FB05F2 		mul	r2, r4, r5
 25973 003e 0230     		adds	r0, r0, #2
 25974              	.LVL2013:
5738:src/xeq.c     **** 	}
 25975              		.loc 1 5738 3 is_stmt 0 view .LVU6795
 25976 0040 0021     		movs	r1, #0
 25977 0042 FFF7FEFF 		bl	xset
 25978              	.LVL2014:
 25979              	.L1868:
5740:src/xeq.c     **** 
 25980              		.loc 1 5740 1 view .LVU6796
 25981 0046 02B0     		add	sp, sp, #8
 25982              		.cfi_remember_state
 25983              		.cfi_def_cfa_offset 16
 25984              		@ sp needed
 25985 0048 70BD     		pop	{r4, r5, r6, pc}
 25986              	.LVL2015:
 25987              	.L1872:
 25988              		.cfi_restore_state
5722:src/xeq.c     **** 	}
 25989              		.loc 1 5722 9 view .LVU6797
 25990 004a A625     		movs	r5, #166
 25991              	.LVL2016:
5722:src/xeq.c     **** 	}
 25992              		.loc 1 5722 9 view .LVU6798
 25993 004c E9E7     		b	.L1869
 25994              	.LVL2017:
 25995              	.L1879:
5731:src/xeq.c     **** 	}
 25996              		.loc 1 5731 3 is_stmt 1 view .LVU6799
5731:src/xeq.c     **** 	}
 25997              		.loc 1 5731 21 is_stmt 0 view .LVU6800
 25998 004e C41D     		adds	r4, r0, #7
5731:src/xeq.c     **** 	}
ARM GAS  /tmp/cccVhVyH.s 			page 669


 25999              		.loc 1 5731 10 view .LVU6801
 26000 0050 E410     		asrs	r4, r4, #3
 26001              	.LVL2018:
5731:src/xeq.c     **** 	}
 26002              		.loc 1 5731 10 view .LVU6802
 26003 0052 EAE7     		b	.L1870
 26004              		.cfi_endproc
 26005              	.LFE261:
 26007              		.section	.text.cmdplotdim,"ax",%progbits
 26008              		.align	1
 26009              		.p2align 2,,3
 26010              		.global	cmdplotdim
 26011              		.syntax unified
 26012              		.thumb
 26013              		.thumb_func
 26014              		.fpu fpv4-sp-d16
 26016              	cmdplotdim:
 26017              	.LVL2019:
 26018              	.LFB262:
5746:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 26019              		.loc 1 5746 1 is_stmt 1 view -0
 26020              		.cfi_startproc
 26021              		@ args = 0, pretend = 0, frame = 0
 26022              		@ frame_needed = 0, uses_anonymous_args = 0
5747:src/xeq.c     **** 	if ( p != NULL ) {
 26023              		.loc 1 5747 2 view .LVU6804
5746:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 26024              		.loc 1 5746 1 is_stmt 0 view .LVU6805
 26025 0000 30B5     		push	{r4, r5, lr}
 26026              		.cfi_def_cfa_offset 12
 26027              		.cfi_offset 4, -12
 26028              		.cfi_offset 5, -8
 26029              		.cfi_offset 14, -4
5747:src/xeq.c     **** 	if ( p != NULL ) {
 26030              		.loc 1 5747 21 view .LVU6806
 26031 0002 0022     		movs	r2, #0
5746:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 26032              		.loc 1 5746 1 view .LVU6807
 26033 0004 83B0     		sub	sp, sp, #12
 26034              		.cfi_def_cfa_offset 24
5747:src/xeq.c     **** 	if ( p != NULL ) {
 26035              		.loc 1 5747 21 view .LVU6808
 26036 0006 1146     		mov	r1, r2
 26037              	.LVL2020:
5747:src/xeq.c     **** 	if ( p != NULL ) {
 26038              		.loc 1 5747 21 view .LVU6809
 26039 0008 FFF7FEFF 		bl	plot_check_range
 26040              	.LVL2021:
5748:src/xeq.c     **** 		lift2_if_enabled();
 26041              		.loc 1 5748 2 is_stmt 1 view .LVU6810
5748:src/xeq.c     **** 		lift2_if_enabled();
 26042              		.loc 1 5748 5 is_stmt 0 view .LVU6811
 26043 000c 80B1     		cbz	r0, .L1880
5749:src/xeq.c     **** 		setX_int_sgn( p[ 0 ], 0 ); // width
 26044              		.loc 1 5749 3 is_stmt 1 view .LVU6812
 26045 000e 0446     		mov	r4, r0
 26046              	.LBB3541:
ARM GAS  /tmp/cccVhVyH.s 			page 670


 26047              	.LBB3542:
1513:src/xeq.c     **** }
 26048              		.loc 1 1513 2 is_stmt 0 view .LVU6813
 26049 0010 0025     		movs	r5, #0
 26050              	.LBE3542:
 26051              	.LBE3541:
5749:src/xeq.c     **** 		setX_int_sgn( p[ 0 ], 0 ); // width
 26052              		.loc 1 5749 3 view .LVU6814
 26053 0012 FFF7FEFF 		bl	lift2_if_enabled
 26054              	.LVL2022:
5750:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
 26055              		.loc 1 5750 3 is_stmt 1 view .LVU6815
 26056              	.LBB3546:
 26057              	.LBI3541:
1512:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 26058              		.loc 1 1512 6 view .LVU6816
 26059              	.LBB3543:
1513:src/xeq.c     **** }
 26060              		.loc 1 1513 2 view .LVU6817
 26061              	.LBE3543:
 26062              	.LBE3546:
5750:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
 26063              		.loc 1 5750 3 is_stmt 0 view .LVU6818
 26064 0016 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 26065              	.LBB3547:
 26066              	.LBB3544:
1513:src/xeq.c     **** }
 26067              		.loc 1 1513 2 view .LVU6819
 26068 0018 0095     		str	r5, [sp]
 26069              	.LVL2023:
1513:src/xeq.c     **** }
 26070              		.loc 1 1513 2 view .LVU6820
 26071              	.LBE3544:
 26072              	.LBE3547:
5750:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
 26073              		.loc 1 5750 3 view .LVU6821
 26074 001a 0023     		movs	r3, #0
 26075              	.LBB3548:
 26076              	.LBB3545:
1513:src/xeq.c     **** }
 26077              		.loc 1 1513 2 view .LVU6822
 26078 001c 6420     		movs	r0, #100
 26079 001e FFF7FEFF 		bl	set_reg_n_int_sgn
 26080              	.LVL2024:
1513:src/xeq.c     **** }
 26081              		.loc 1 1513 2 view .LVU6823
 26082              	.LBE3545:
 26083              	.LBE3548:
5751:src/xeq.c     **** 	}
 26084              		.loc 1 5751 3 is_stmt 1 view .LVU6824
5751:src/xeq.c     **** 	}
 26085              		.loc 1 5751 33 is_stmt 0 view .LVU6825
 26086 0022 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
5751:src/xeq.c     **** 	}
 26087              		.loc 1 5751 3 view .LVU6826
 26088 0024 0095     		str	r5, [sp]
5751:src/xeq.c     **** 	}
ARM GAS  /tmp/cccVhVyH.s 			page 671


 26089              		.loc 1 5751 39 view .LVU6827
 26090 0026 D200     		lsls	r2, r2, #3
5751:src/xeq.c     **** 	}
 26091              		.loc 1 5751 3 view .LVU6828
 26092 0028 D317     		asrs	r3, r2, #31
 26093 002a 6520     		movs	r0, #101
 26094 002c FFF7FEFF 		bl	set_reg_n_int_sgn
 26095              	.LVL2025:
 26096              	.L1880:
5753:src/xeq.c     **** 
 26097              		.loc 1 5753 1 view .LVU6829
 26098 0030 03B0     		add	sp, sp, #12
 26099              		.cfi_def_cfa_offset 12
 26100              		@ sp needed
 26101 0032 30BD     		pop	{r4, r5, pc}
 26102              		.cfi_endproc
 26103              	.LFE262:
 26105              		.section	.text.cmdplotpixel,"ax",%progbits
 26106              		.align	1
 26107              		.p2align 2,,3
 26108              		.global	cmdplotpixel
 26109              		.syntax unified
 26110              		.thumb
 26111              		.thumb_func
 26112              		.fpu fpv4-sp-d16
 26114              	cmdplotpixel:
 26115              	.LVL2026:
 26116              	.LFB263:
5761:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 26117              		.loc 1 5761 1 is_stmt 1 view -0
 26118              		.cfi_startproc
 26119              		@ args = 0, pretend = 0, frame = 8
 26120              		@ frame_needed = 0, uses_anonymous_args = 0
5762:src/xeq.c     **** 	if ( p != NULL ) {
 26121              		.loc 1 5762 2 view .LVU6831
5761:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 26122              		.loc 1 5761 1 is_stmt 0 view .LVU6832
 26123 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 26124              		.cfi_def_cfa_offset 28
 26125              		.cfi_offset 4, -28
 26126              		.cfi_offset 5, -24
 26127              		.cfi_offset 6, -20
 26128              		.cfi_offset 7, -16
 26129              		.cfi_offset 8, -12
 26130              		.cfi_offset 9, -8
 26131              		.cfi_offset 14, -4
5762:src/xeq.c     **** 	if ( p != NULL ) {
 26132              		.loc 1 5762 21 view .LVU6833
 26133 0004 0022     		movs	r2, #0
5761:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 26134              		.loc 1 5761 1 view .LVU6834
 26135 0006 83B0     		sub	sp, sp, #12
 26136              		.cfi_def_cfa_offset 40
5761:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 26137              		.loc 1 5761 1 view .LVU6835
 26138 0008 0E46     		mov	r6, r1
5762:src/xeq.c     **** 	if ( p != NULL ) {
ARM GAS  /tmp/cccVhVyH.s 			page 672


 26139              		.loc 1 5762 21 view .LVU6836
 26140 000a 1146     		mov	r1, r2
 26141              	.LVL2027:
5762:src/xeq.c     **** 	if ( p != NULL ) {
 26142              		.loc 1 5762 21 view .LVU6837
 26143 000c FFF7FEFF 		bl	plot_check_range
 26144              	.LVL2028:
5763:src/xeq.c     **** 		/*
 26145              		.loc 1 5763 2 is_stmt 1 view .LVU6838
5763:src/xeq.c     **** 		/*
 26146              		.loc 1 5763 5 is_stmt 0 view .LVU6839
 26147 0010 50B1     		cbz	r0, .L1886
 26148              	.LBB3549:
5767:src/xeq.c     **** 		unsigned int row = (unsigned int) get_reg_n_int_sgn( regY_idx, &sgn );
 26149              		.loc 1 5767 3 is_stmt 1 view .LVU6840
5768:src/xeq.c     **** 		int pix = 0;
 26150              		.loc 1 5768 3 view .LVU6841
 26151 0012 0446     		mov	r4, r0
5768:src/xeq.c     **** 		int pix = 0;
 26152              		.loc 1 5768 37 is_stmt 0 view .LVU6842
 26153 0014 01A9     		add	r1, sp, #4
 26154 0016 6520     		movs	r0, #101
 26155              	.LVL2029:
5768:src/xeq.c     **** 		int pix = 0;
 26156              		.loc 1 5768 37 view .LVU6843
 26157 0018 FFF7FEFF 		bl	get_reg_n_int_sgn
 26158              	.LVL2030:
5770:src/xeq.c     **** 			/*
 26159              		.loc 1 5770 12 view .LVU6844
 26160 001c 019F     		ldr	r7, [sp, #4]
5768:src/xeq.c     **** 		int pix = 0;
 26161              		.loc 1 5768 37 view .LVU6845
 26162 001e 0546     		mov	r5, r0
 26163              	.LVL2031:
5769:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
 26164              		.loc 1 5769 3 is_stmt 1 view .LVU6846
5770:src/xeq.c     **** 			/*
 26165              		.loc 1 5770 3 view .LVU6847
5770:src/xeq.c     **** 			/*
 26166              		.loc 1 5770 6 is_stmt 0 view .LVU6848
 26167 0020 2FB1     		cbz	r7, .L1899
5769:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
 26168              		.loc 1 5769 7 view .LVU6849
 26169 0022 0027     		movs	r7, #0
 26170              	.LVL2032:
 26171              	.L1888:
5794:src/xeq.c     **** 			fin_tst( *p & pix );
 26172              		.loc 1 5794 3 is_stmt 1 view .LVU6850
5794:src/xeq.c     **** 			fin_tst( *p & pix );
 26173              		.loc 1 5794 6 is_stmt 0 view .LVU6851
 26174 0024 972E     		cmp	r6, #151
 26175 0026 27D0     		beq	.L1900
 26176              	.L1886:
5794:src/xeq.c     **** 			fin_tst( *p & pix );
 26177              		.loc 1 5794 6 view .LVU6852
 26178              	.LBE3549:
5798:src/xeq.c     **** #endif
ARM GAS  /tmp/cccVhVyH.s 			page 673


 26179              		.loc 1 5798 1 view .LVU6853
 26180 0028 03B0     		add	sp, sp, #12
 26181              		.cfi_remember_state
 26182              		.cfi_def_cfa_offset 28
 26183              		@ sp needed
 26184 002a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 26185              	.LVL2033:
 26186              	.L1899:
 26187              		.cfi_restore_state
 26188              	.LBB3557:
5770:src/xeq.c     **** 			/*
 26189              		.loc 1 5770 35 discriminator 1 view .LVU6854
 26190 002e 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
5770:src/xeq.c     **** 			/*
 26191              		.loc 1 5770 17 discriminator 1 view .LVU6855
 26192 0030 B3EBD00F 		cmp	r3, r0, lsr #3
5770:src/xeq.c     **** 			/*
 26193              		.loc 1 5770 26 discriminator 1 view .LVU6856
 26194 0034 4FEAD008 		lsr	r8, r0, #3
5770:src/xeq.c     **** 			/*
 26195              		.loc 1 5770 17 discriminator 1 view .LVU6857
 26196 0038 F4D9     		bls	.L1888
 26197              	.LBB3550:
5774:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
 26198              		.loc 1 5774 4 is_stmt 1 view .LVU6858
 26199              	.LBB3551:
 26200              	.LBB3552:
1450:src/xeq.c     **** }
 26201              		.loc 1 1450 9 is_stmt 0 view .LVU6859
 26202 003a 01A9     		add	r1, sp, #4
 26203 003c 6420     		movs	r0, #100
 26204              	.LVL2034:
1450:src/xeq.c     **** }
 26205              		.loc 1 1450 9 view .LVU6860
 26206              	.LBE3552:
 26207              	.LBE3551:
5774:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
 26208              		.loc 1 5774 40 view .LVU6861
 26209 003e 94F80090 		ldrb	r9, [r4]	@ zero_extendqisi2
 26210              	.LVL2035:
5775:src/xeq.c     **** 			if ( sgn == 0 && column < width ) {
 26211              		.loc 1 5775 4 is_stmt 1 view .LVU6862
 26212              	.LBB3554:
 26213              	.LBI3551:
1449:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 26214              		.loc 1 1449 24 view .LVU6863
 26215              	.LBB3553:
1450:src/xeq.c     **** }
 26216              		.loc 1 1450 2 view .LVU6864
1450:src/xeq.c     **** }
 26217              		.loc 1 1450 9 is_stmt 0 view .LVU6865
 26218 0042 FFF7FEFF 		bl	get_reg_n_int_sgn
 26219              	.LVL2036:
1450:src/xeq.c     **** }
 26220              		.loc 1 1450 9 view .LVU6866
 26221              	.LBE3553:
 26222              	.LBE3554:
ARM GAS  /tmp/cccVhVyH.s 			page 674


5776:src/xeq.c     **** 				/*
 26223              		.loc 1 5776 13 view .LVU6867
 26224 0046 019B     		ldr	r3, [sp, #4]
 26225              	.LVL2037:
5776:src/xeq.c     **** 				/*
 26226              		.loc 1 5776 4 is_stmt 1 view .LVU6868
5776:src/xeq.c     **** 				/*
 26227              		.loc 1 5776 7 is_stmt 0 view .LVU6869
 26228 0048 002B     		cmp	r3, #0
 26229 004a EBD1     		bne	.L1888
5776:src/xeq.c     **** 				/*
 26230              		.loc 1 5776 18 discriminator 1 view .LVU6870
 26231 004c 8145     		cmp	r9, r0
 26232 004e E9D9     		bls	.L1888
5780:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
 26233              		.loc 1 5780 5 is_stmt 1 view .LVU6871
5781:src/xeq.c     **** 
 26234              		.loc 1 5781 35 is_stmt 0 view .LVU6872
 26235 0050 09FB0808 		mla	r8, r9, r8, r0
 26236 0054 08F10208 		add	r8, r8, #2
5780:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
 26237              		.loc 1 5780 22 view .LVU6873
 26238 0058 05F00705 		and	r5, r5, #7
 26239              	.LVL2038:
5780:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
 26240              		.loc 1 5780 9 view .LVU6874
 26241 005c 0127     		movs	r7, #1
5783:src/xeq.c     **** 					*p |= pix;
 26242              		.loc 1 5783 8 view .LVU6875
 26243 005e 942E     		cmp	r6, #148
5781:src/xeq.c     **** 
 26244              		.loc 1 5781 7 view .LVU6876
 26245 0060 4444     		add	r4, r4, r8
 26246              	.LVL2039:
5780:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
 26247              		.loc 1 5780 9 view .LVU6877
 26248 0062 07FA05F7 		lsl	r7, r7, r5
 26249              	.LVL2040:
5781:src/xeq.c     **** 
 26250              		.loc 1 5781 5 is_stmt 1 view .LVU6878
5783:src/xeq.c     **** 					*p |= pix;
 26251              		.loc 1 5783 5 view .LVU6879
5783:src/xeq.c     **** 					*p |= pix;
 26252              		.loc 1 5783 8 is_stmt 0 view .LVU6880
 26253 0066 0ED0     		beq	.L1901
5786:src/xeq.c     **** 					*p &= ~pix;
 26254              		.loc 1 5786 10 is_stmt 1 view .LVU6881
5786:src/xeq.c     **** 					*p &= ~pix;
 26255              		.loc 1 5786 13 is_stmt 0 view .LVU6882
 26256 0068 952E     		cmp	r6, #149
 26257 006a 10D0     		beq	.L1902
5789:src/xeq.c     **** 					*p ^= pix;
 26258              		.loc 1 5789 10 is_stmt 1 view .LVU6883
5789:src/xeq.c     **** 					*p ^= pix;
 26259              		.loc 1 5789 13 is_stmt 0 view .LVU6884
 26260 006c 962E     		cmp	r6, #150
 26261 006e D9D1     		bne	.L1888
ARM GAS  /tmp/cccVhVyH.s 			page 675


5790:src/xeq.c     **** 				}
 26262              		.loc 1 5790 6 is_stmt 1 view .LVU6885
5790:src/xeq.c     **** 				}
 26263              		.loc 1 5790 9 is_stmt 0 view .LVU6886
 26264 0070 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 26265 0072 5F40     		eors	r7, r7, r3
 26266              	.LVL2041:
5790:src/xeq.c     **** 				}
 26267              		.loc 1 5790 9 view .LVU6887
 26268 0074 2770     		strb	r7, [r4]
 26269 0076 D7E7     		b	.L1886
 26270              	.LVL2042:
 26271              	.L1900:
5790:src/xeq.c     **** 				}
 26272              		.loc 1 5790 9 view .LVU6888
 26273              	.LBE3550:
5795:src/xeq.c     **** 		}
 26274              		.loc 1 5795 4 is_stmt 1 view .LVU6889
5795:src/xeq.c     **** 		}
 26275              		.loc 1 5795 13 is_stmt 0 view .LVU6890
 26276 0078 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
5795:src/xeq.c     **** 		}
 26277              		.loc 1 5795 4 view .LVU6891
 26278 007a 3840     		ands	r0, r0, r7
 26279 007c FFF7FEFF 		bl	fin_tst
 26280              	.LVL2043:
 26281              	.LBE3557:
5798:src/xeq.c     **** #endif
 26282              		.loc 1 5798 1 view .LVU6892
 26283 0080 03B0     		add	sp, sp, #12
 26284              		.cfi_remember_state
 26285              		.cfi_def_cfa_offset 28
 26286              		@ sp needed
 26287 0082 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 26288              	.LVL2044:
 26289              	.L1901:
 26290              		.cfi_restore_state
 26291              	.LBB3558:
 26292              	.LBB3555:
5784:src/xeq.c     **** 				}
 26293              		.loc 1 5784 6 is_stmt 1 view .LVU6893
5784:src/xeq.c     **** 				}
 26294              		.loc 1 5784 9 is_stmt 0 view .LVU6894
 26295 0086 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 26296 0088 1F43     		orrs	r7, r7, r3
 26297              	.LVL2045:
5784:src/xeq.c     **** 				}
 26298              		.loc 1 5784 9 view .LVU6895
 26299 008a 2770     		strb	r7, [r4]
5784:src/xeq.c     **** 				}
 26300              		.loc 1 5784 9 view .LVU6896
 26301              	.LBE3555:
5794:src/xeq.c     **** 			fin_tst( *p & pix );
 26302              		.loc 1 5794 3 is_stmt 1 view .LVU6897
 26303 008c CCE7     		b	.L1886
 26304              	.LVL2046:
 26305              	.L1902:
ARM GAS  /tmp/cccVhVyH.s 			page 676


 26306              	.LBB3556:
5787:src/xeq.c     **** 				}
 26307              		.loc 1 5787 6 view .LVU6898
5787:src/xeq.c     **** 				}
 26308              		.loc 1 5787 9 is_stmt 0 view .LVU6899
 26309 008e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 26310 0090 23EA0707 		bic	r7, r3, r7
 26311              	.LVL2047:
5787:src/xeq.c     **** 				}
 26312              		.loc 1 5787 9 view .LVU6900
 26313 0094 2770     		strb	r7, [r4]
 26314 0096 C7E7     		b	.L1886
 26315              	.LBE3556:
 26316              	.LBE3558:
 26317              		.cfi_endproc
 26318              	.LFE263:
 26320              		.section	.text.not_running,"ax",%progbits
 26321              		.align	1
 26322              		.p2align 2,,3
 26323              		.global	not_running
 26324              		.syntax unified
 26325              		.thumb
 26326              		.thumb_func
 26327              		.fpu fpv4-sp-d16
 26329              	not_running:
 26330              	.LFB264:
5805:src/xeq.c     **** 	if ( Running ) {
 26331              		.loc 1 5805 23 is_stmt 1 view -0
 26332              		.cfi_startproc
 26333              		@ args = 0, pretend = 0, frame = 0
 26334              		@ frame_needed = 0, uses_anonymous_args = 0
 26335              		@ link register save eliminated.
5806:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 26336              		.loc 1 5806 2 view .LVU6902
5806:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 26337              		.loc 1 5806 7 is_stmt 0 view .LVU6903
 26338 0000 064B     		ldr	r3, .L1908
5806:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 26339              		.loc 1 5806 5 view .LVU6904
 26340 0002 1B68     		ldr	r3, [r3]
 26341 0004 0BB9     		cbnz	r3, .L1907
5810:src/xeq.c     **** }
 26342              		.loc 1 5810 9 view .LVU6905
 26343 0006 0120     		movs	r0, #1
 26344 0008 7047     		bx	lr
 26345              	.L1907:
5807:src/xeq.c     **** 		return 0;
 26346              		.loc 1 5807 3 is_stmt 1 view .LVU6906
 26347              	.LVL2048:
 26348              	.LBB3563:
 26349              	.LBI3563:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26350              		.loc 1 546 5 view .LVU6907
 26351              	.LBB3564:
 547:src/xeq.c     **** 		Error = e;
 26352              		.loc 1 547 2 view .LVU6908
 547:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/cccVhVyH.s 			page 677


 26353              		.loc 1 547 12 is_stmt 0 view .LVU6909
 26354 000a 054B     		ldr	r3, .L1908+4
 26355 000c 1868     		ldr	r0, [r3]
 547:src/xeq.c     **** 		Error = e;
 26356              		.loc 1 547 5 view .LVU6910
 26357 000e 10B9     		cbnz	r0, .L1906
 26358              	.LVL2049:
 26359              	.LBB3565:
 26360              	.LBI3565:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26361              		.loc 1 546 5 is_stmt 1 view .LVU6911
 26362              	.LBB3566:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26363              		.loc 1 548 3 view .LVU6912
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26364              		.loc 1 548 9 is_stmt 0 view .LVU6913
 26365 0010 0722     		movs	r2, #7
 26366 0012 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26367              		.loc 1 549 3 is_stmt 1 view .LVU6914
 26368 0014 7047     		bx	lr
 26369              	.LVL2050:
 26370              	.L1906:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26371              		.loc 1 549 3 is_stmt 0 view .LVU6915
 26372              	.LBE3566:
 26373              	.LBE3565:
 26374              	.LBE3564:
 26375              	.LBE3563:
5808:src/xeq.c     **** 	}
 26376              		.loc 1 5808 10 view .LVU6916
 26377 0016 0020     		movs	r0, #0
 26378              	.LVL2051:
5811:src/xeq.c     **** 
 26379              		.loc 1 5811 1 view .LVU6917
 26380 0018 7047     		bx	lr
 26381              	.L1909:
 26382 001a 00BF     		.align	2
 26383              	.L1908:
 26384 001c 00000000 		.word	Running
 26385 0020 00000000 		.word	Error
 26386              		.cfi_endproc
 26387              	.LFE264:
 26389              		.section	.text.set_running_off_sst,"ax",%progbits
 26390              		.align	1
 26391              		.p2align 2,,3
 26392              		.global	set_running_off_sst
 26393              		.syntax unified
 26394              		.thumb
 26395              		.thumb_func
 26396              		.fpu fpv4-sp-d16
 26398              	set_running_off_sst:
 26399              	.LFB265:
5816:src/xeq.c     **** 	Running = 0;
 26400              		.loc 1 5816 28 is_stmt 1 view -0
 26401              		.cfi_startproc
 26402              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cccVhVyH.s 			page 678


 26403              		@ frame_needed = 0, uses_anonymous_args = 0
 26404              		@ link register save eliminated.
5817:src/xeq.c     **** }
 26405              		.loc 1 5817 2 view .LVU6919
5817:src/xeq.c     **** }
 26406              		.loc 1 5817 10 is_stmt 0 view .LVU6920
 26407 0000 014B     		ldr	r3, .L1911
 26408 0002 0022     		movs	r2, #0
 26409 0004 1A60     		str	r2, [r3]
5818:src/xeq.c     **** 
 26410              		.loc 1 5818 1 view .LVU6921
 26411 0006 7047     		bx	lr
 26412              	.L1912:
 26413              		.align	2
 26414              	.L1911:
 26415 0008 00000000 		.word	Running
 26416              		.cfi_endproc
 26417              	.LFE265:
 26419              		.section	.text.set_running_on_sst,"ax",%progbits
 26420              		.align	1
 26421              		.p2align 2,,3
 26422              		.global	set_running_on_sst
 26423              		.syntax unified
 26424              		.thumb
 26425              		.thumb_func
 26426              		.fpu fpv4-sp-d16
 26428              	set_running_on_sst:
 26429              	.LFB266:
5820:src/xeq.c     **** 	Running = 1;
 26430              		.loc 1 5820 27 is_stmt 1 view -0
 26431              		.cfi_startproc
 26432              		@ args = 0, pretend = 0, frame = 0
 26433              		@ frame_needed = 0, uses_anonymous_args = 0
 26434              		@ link register save eliminated.
5821:src/xeq.c     **** }
 26435              		.loc 1 5821 2 view .LVU6923
5821:src/xeq.c     **** }
 26436              		.loc 1 5821 10 is_stmt 0 view .LVU6924
 26437 0000 014B     		ldr	r3, .L1914
 26438 0002 0122     		movs	r2, #1
 26439 0004 1A60     		str	r2, [r3]
5822:src/xeq.c     **** 
 26440              		.loc 1 5822 1 view .LVU6925
 26441 0006 7047     		bx	lr
 26442              	.L1915:
 26443              		.align	2
 26444              	.L1914:
 26445 0008 00000000 		.word	Running
 26446              		.cfi_endproc
 26447              	.LFE266:
 26449              		.section	.text.set_running_off,"ax",%progbits
 26450              		.align	1
 26451              		.p2align 2,,3
 26452              		.global	set_running_off
 26453              		.syntax unified
 26454              		.thumb
 26455              		.thumb_func
ARM GAS  /tmp/cccVhVyH.s 			page 679


 26456              		.fpu fpv4-sp-d16
 26458              	set_running_off:
 26459              	.LFB267:
5824:src/xeq.c     **** 	set_running_off_sst();
 26460              		.loc 1 5824 24 is_stmt 1 view -0
 26461              		.cfi_startproc
 26462              		@ args = 0, pretend = 0, frame = 0
 26463              		@ frame_needed = 0, uses_anonymous_args = 0
 26464              		@ link register save eliminated.
5825:src/xeq.c     **** 	State.entryp = 0;
 26465              		.loc 1 5825 2 view .LVU6927
 26466              	.LBB3567:
 26467              	.LBI3567:
5816:src/xeq.c     **** 	Running = 0;
 26468              		.loc 1 5816 6 view .LVU6928
 26469              	.LBB3568:
5817:src/xeq.c     **** }
 26470              		.loc 1 5817 2 view .LVU6929
 26471              	.LBE3568:
 26472              	.LBE3567:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 26473              		.loc 1 5826 15 is_stmt 0 view .LVU6930
 26474 0000 064B     		ldr	r3, .L1917
 26475              	.LBB3571:
 26476              	.LBB3569:
5817:src/xeq.c     **** }
 26477              		.loc 1 5817 10 view .LVU6931
 26478 0002 074A     		ldr	r2, .L1917+4
 26479              	.LBE3569:
 26480              	.LBE3571:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 26481              		.loc 1 5826 15 view .LVU6932
 26482 0004 1B68     		ldr	r3, [r3]
 26483              	.LBB3572:
 26484              	.LBB3570:
5817:src/xeq.c     **** }
 26485              		.loc 1 5817 10 view .LVU6933
 26486 0006 0021     		movs	r1, #0
 26487 0008 1160     		str	r1, [r2]
 26488              	.LBE3570:
 26489              	.LBE3572:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 26490              		.loc 1 5826 2 is_stmt 1 view .LVU6934
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 26491              		.loc 1 5826 15 is_stmt 0 view .LVU6935
 26492 000a 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 26493 000e 61F30412 		bfi	r2, r1, #4, #1
 26494 0012 83F8DD27 		strb	r2, [r3, #2013]
 26495              		.loc 1 5827 2 is_stmt 1 view .LVU6936
 26496 0016 8A20     		movs	r0, #138
 26497 0018 FFF7FEBF 		b	dot
 26498              	.LVL2052:
 26499              	.L1918:
 26500              		.align	2
 26501              	.L1917:
 26502 001c 00000000 		.word	main_ram
 26503 0020 00000000 		.word	Running
ARM GAS  /tmp/cccVhVyH.s 			page 680


 26504              		.cfi_endproc
 26505              	.LFE267:
 26507              		.section	.text.set_running_on,"ax",%progbits
 26508              		.align	1
 26509              		.p2align 2,,3
 26510              		.global	set_running_on
 26511              		.syntax unified
 26512              		.thumb
 26513              		.thumb_func
 26514              		.fpu fpv4-sp-d16
 26516              	set_running_on:
 26517              	.LFB268:
5828:src/xeq.c     **** }
5829:src/xeq.c     **** 
5830:src/xeq.c     **** void set_running_on() {
 26518              		.loc 1 5830 23 view -0
 26519              		.cfi_startproc
 26520              		@ args = 0, pretend = 0, frame = 0
 26521              		@ frame_needed = 0, uses_anonymous_args = 0
5831:src/xeq.c     **** 	update_speed(0);
 26522              		.loc 1 5831 17 view .LVU6938
5832:src/xeq.c     **** 	GoFast = 1;
 26523              		.loc 1 5832 2 view .LVU6939
 26524              	.LBB3573:
 26525              	.LBB3574:
 186:src/xeq.c     **** }
 26526              		.loc 1 186 9 is_stmt 0 view .LVU6940
 26527 0000 0C4B     		ldr	r3, .L1925
 26528              	.LBE3574:
 26529              	.LBE3573:
5833:src/xeq.c     **** 	set_running_on_sst();
5834:src/xeq.c     **** 	LastKey = 0;
 26530              		.loc 1 5834 10 view .LVU6941
 26531 0002 0D49     		ldr	r1, .L1925+4
 26532              	.LBB3577:
 26533              	.LBB3575:
 186:src/xeq.c     **** }
 26534              		.loc 1 186 9 view .LVU6942
 26535 0004 1B68     		ldr	r3, [r3]
 26536 0006 B3F8E037 		ldrh	r3, [r3, #2016]
 26537              	.LBE3575:
 26538              	.LBE3577:
5830:src/xeq.c     **** 	update_speed(0);
 26539              		.loc 1 5830 23 view .LVU6943
 26540 000a 70B5     		push	{r4, r5, r6, lr}
 26541              		.cfi_def_cfa_offset 16
 26542              		.cfi_offset 4, -16
 26543              		.cfi_offset 5, -12
 26544              		.cfi_offset 6, -8
 26545              		.cfi_offset 14, -4
5835:src/xeq.c     **** 	if (!is_xrom())
 26546              		.loc 1 5835 5 view .LVU6944
 26547 000c 9B0B     		lsrs	r3, r3, #14
5832:src/xeq.c     **** 	set_running_on_sst();
 26548              		.loc 1 5832 9 view .LVU6945
 26549 000e 0B4D     		ldr	r5, .L1925+8
 26550              	.LBB3578:
ARM GAS  /tmp/cccVhVyH.s 			page 681


 26551              	.LBB3579:
5821:src/xeq.c     **** }
 26552              		.loc 1 5821 10 view .LVU6946
 26553 0010 0B4C     		ldr	r4, .L1925+12
 26554              	.LBE3579:
 26555              	.LBE3578:
5832:src/xeq.c     **** 	set_running_on_sst();
 26556              		.loc 1 5832 9 view .LVU6947
 26557 0012 0122     		movs	r2, #1
5834:src/xeq.c     **** 	if (!is_xrom())
 26558              		.loc 1 5834 10 view .LVU6948
 26559 0014 0020     		movs	r0, #0
 26560              		.loc 1 5835 5 view .LVU6949
 26561 0016 032B     		cmp	r3, #3
5832:src/xeq.c     **** 	set_running_on_sst();
 26562              		.loc 1 5832 9 view .LVU6950
 26563 0018 2A60     		str	r2, [r5]
5833:src/xeq.c     **** 	LastKey = 0;
 26564              		.loc 1 5833 2 is_stmt 1 view .LVU6951
 26565              	.LBB3581:
 26566              	.LBI3578:
5820:src/xeq.c     **** 	Running = 1;
 26567              		.loc 1 5820 6 view .LVU6952
 26568              	.LBB3580:
5821:src/xeq.c     **** }
 26569              		.loc 1 5821 2 view .LVU6953
5821:src/xeq.c     **** }
 26570              		.loc 1 5821 10 is_stmt 0 view .LVU6954
 26571 001a 2260     		str	r2, [r4]
 26572              	.LBE3580:
 26573              	.LBE3581:
5834:src/xeq.c     **** 	if (!is_xrom())
 26574              		.loc 1 5834 2 is_stmt 1 view .LVU6955
5834:src/xeq.c     **** 	if (!is_xrom())
 26575              		.loc 1 5834 10 is_stmt 0 view .LVU6956
 26576 001c C874     		strb	r0, [r1, #19]
 26577              		.loc 1 5835 2 is_stmt 1 view .LVU6957
 26578              	.LBB3582:
 26579              	.LBI3573:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 26580              		.loc 1 185 5 view .LVU6958
 26581              	.LBB3576:
 186:src/xeq.c     **** }
 26582              		.loc 1 186 2 view .LVU6959
 26583              	.LBE3576:
 26584              	.LBE3582:
 26585              		.loc 1 5835 5 is_stmt 0 view .LVU6960
 26586 001e 01D0     		beq	.L1920
5836:src/xeq.c     **** 		error_message(ERR_NONE);
 26587              		.loc 1 5836 3 is_stmt 1 view .LVU6961
 26588 0020 FFF7FEFF 		bl	error_message
 26589              	.LVL2053:
 26590              	.L1920:
5837:src/xeq.c     **** 	dot(BEG, 0);
 26591              		.loc 1 5837 2 view .LVU6962
 26592 0024 0021     		movs	r1, #0
 26593 0026 8820     		movs	r0, #136
ARM GAS  /tmp/cccVhVyH.s 			page 682


 26594 0028 FFF7FEFF 		bl	dot
 26595              	.LVL2054:
5838:src/xeq.c     **** 	//	finish_display(); // BEG
5839:src/xeq.c     **** 	lcd_refresh();
 26596              		.loc 1 5839 2 view .LVU6963
5840:src/xeq.c     **** }
 26597              		.loc 1 5840 1 is_stmt 0 view .LVU6964
 26598 002c BDE87040 		pop	{r4, r5, r6, lr}
 26599              		.cfi_restore 14
 26600              		.cfi_restore 6
 26601              		.cfi_restore 5
 26602              		.cfi_restore 4
 26603              		.cfi_def_cfa_offset 0
5839:src/xeq.c     **** }
 26604              		.loc 1 5839 2 view .LVU6965
 26605 0030 044B     		ldr	r3, .L1925+16
 26606 0032 1847     		bx	r3	@ indirect register sibling call
 26607              	.LVL2055:
 26608              	.L1926:
 26609              		.align	2
 26610              	.L1925:
 26611 0034 00000000 		.word	main_ram
 26612 0038 00000000 		.word	StateWhileOn
 26613 003c 00000000 		.word	GoFast
 26614 0040 00000000 		.word	Running
 26615 0044 31020008 		.word	134218289
 26616              		.cfi_endproc
 26617              	.LFE268:
 26619              		.section	.text.gsbgto,"ax",%progbits
 26620              		.align	1
 26621              		.p2align 2,,3
 26622              		.syntax unified
 26623              		.thumb
 26624              		.thumb_func
 26625              		.fpu fpv4-sp-d16
 26627              	gsbgto:
 26628              	.LVL2056:
 26629              	.LFB153:
2225:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 26630              		.loc 1 2225 66 is_stmt 1 view -0
 26631              		.cfi_startproc
 26632              		@ args = 0, pretend = 0, frame = 0
 26633              		@ frame_needed = 0, uses_anonymous_args = 0
2226:src/xeq.c     **** 	raw_set_pc(pc);
 26634              		.loc 1 2226 2 view .LVU6967
2225:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 26635              		.loc 1 2225 66 is_stmt 0 view .LVU6968
 26636 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 26637              		.cfi_def_cfa_offset 24
 26638              		.cfi_offset 4, -24
 26639              		.cfi_offset 5, -20
 26640              		.cfi_offset 6, -16
 26641              		.cfi_offset 7, -12
 26642              		.cfi_offset 8, -8
 26643              		.cfi_offset 14, -4
2226:src/xeq.c     **** 	raw_set_pc(pc);
 26644              		.loc 1 2226 39 view .LVU6969
ARM GAS  /tmp/cccVhVyH.s 			page 683


 26645 0004 234F     		ldr	r7, .L1938
 26646 0006 3B68     		ldr	r3, [r7]
2225:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 26647              		.loc 1 2225 66 view .LVU6970
 26648 0008 0446     		mov	r4, r0
 26649 000a 0D46     		mov	r5, r1
 26650              	.LBB3591:
 26651              	.LBB3592:
 283:src/xeq.c     **** 	update_program_bounds(0);
 26652              		.loc 1 283 11 view .LVU6971
 26653 000c A3F8E007 		strh	r0, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 26654              		.loc 1 284 2 view .LVU6972
 26655 0010 0020     		movs	r0, #0
 26656              	.LVL2057:
 284:src/xeq.c     **** }
 26657              		.loc 1 284 2 view .LVU6973
 26658              	.LBE3592:
 26659              	.LBE3591:
2226:src/xeq.c     **** 	raw_set_pc(pc);
 26660              		.loc 1 2226 27 view .LVU6974
 26661 0012 B3F8EC87 		ldrh	r8, [r3, #2028]
 26662              	.LVL2058:
2227:src/xeq.c     **** 	if (gsb) {
 26663              		.loc 1 2227 2 is_stmt 1 view .LVU6975
 26664              	.LBB3595:
 26665              	.LBI3591:
 282:src/xeq.c     **** 	State.pc = pc;
 26666              		.loc 1 282 13 view .LVU6976
 26667              	.LBB3593:
 283:src/xeq.c     **** 	update_program_bounds(0);
 26668              		.loc 1 283 2 view .LVU6977
 284:src/xeq.c     **** }
 26669              		.loc 1 284 2 view .LVU6978
 26670              	.LBE3593:
 26671              	.LBE3595:
2225:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 26672              		.loc 1 2225 66 is_stmt 0 view .LVU6979
 26673 0016 1646     		mov	r6, r2
 26674              	.LBB3596:
 26675              	.LBB3594:
 284:src/xeq.c     **** }
 26676              		.loc 1 284 2 view .LVU6980
 26677 0018 FFF7FEFF 		bl	update_program_bounds
 26678              	.LVL2059:
 284:src/xeq.c     **** }
 26679              		.loc 1 284 2 view .LVU6981
 26680              	.LBE3594:
 26681              	.LBE3596:
2228:src/xeq.c     **** 		if (!Running && !XromRunning) {
 26682              		.loc 1 2228 2 is_stmt 1 view .LVU6982
2228:src/xeq.c     **** 		if (!Running && !XromRunning) {
 26683              		.loc 1 2228 5 is_stmt 0 view .LVU6983
 26684 001c D5B1     		cbz	r5, .L1927
2229:src/xeq.c     **** 			// XEQ or hot key from keyboard
 26685              		.loc 1 2229 3 is_stmt 1 view .LVU6984
2229:src/xeq.c     **** 			// XEQ or hot key from keyboard
ARM GAS  /tmp/cccVhVyH.s 			page 684


 26686              		.loc 1 2229 7 is_stmt 0 view .LVU6985
 26687 001e 1E4B     		ldr	r3, .L1938+4
2229:src/xeq.c     **** 			// XEQ or hot key from keyboard
 26688              		.loc 1 2229 19 view .LVU6986
 26689 0020 1E4A     		ldr	r2, .L1938+8
2229:src/xeq.c     **** 			// XEQ or hot key from keyboard
 26690              		.loc 1 2229 16 view .LVU6987
 26691 0022 1B68     		ldr	r3, [r3]
 26692 0024 1268     		ldr	r2, [r2]
 26693 0026 1343     		orrs	r3, r3, r2
 26694              	.LBB3597:
 26695              	.LBB3598:
1610:src/xeq.c     **** }
 26696              		.loc 1 1610 14 view .LVU6988
 26697 0028 3A68     		ldr	r2, [r7]
 26698              	.LBE3598:
 26699              	.LBE3597:
2229:src/xeq.c     **** 			// XEQ or hot key from keyboard
 26700              		.loc 1 2229 16 view .LVU6989
 26701 002a 1FD0     		beq	.L1930
 26702              	.LVL2060:
 26703              	.L1931:
2237:src/xeq.c     **** 			// Stack is full
 26704              		.loc 1 2237 3 is_stmt 1 view .LVU6990
2237:src/xeq.c     **** 			// Stack is full
 26705              		.loc 1 2237 36 is_stmt 0 view .LVU6991
 26706 002c 1C49     		ldr	r1, .L1938+12
2237:src/xeq.c     **** 			// Stack is full
 26707              		.loc 1 2237 8 view .LVU6992
 26708 002e B2F9E237 		ldrsh	r3, [r2, #2018]
2237:src/xeq.c     **** 			// Stack is full
 26709              		.loc 1 2237 58 view .LVU6993
 26710 0032 91F90110 		ldrsb	r1, [r1, #1]
 26711 0036 0029     		cmp	r1, #0
 26712 0038 A4BF     		itt	ge
 26713 003a 1A49     		ldrge	r1, .L1938+16
 26714 003c 0968     		ldrge	r1, [r1]
2237:src/xeq.c     **** 			// Stack is full
 26715              		.loc 1 2237 7 view .LVU6994
 26716 003e C3F10000 		rsb	r0, r3, #0
2237:src/xeq.c     **** 			// Stack is full
 26717              		.loc 1 2237 58 view .LVU6995
 26718 0042 B8BF     		it	lt
 26719 0044 8821     		movlt	r1, #136
2237:src/xeq.c     **** 			// Stack is full
 26720              		.loc 1 2237 6 view .LVU6996
 26721 0046 8842     		cmp	r0, r1
 26722 0048 06DB     		blt	.L1934
2239:src/xeq.c     **** 			// clrretstk();
 26723              		.loc 1 2239 4 is_stmt 1 view .LVU6997
 26724              	.LVL2061:
 26725              	.LBB3601:
 26726              	.LBI3601:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26727              		.loc 1 546 5 view .LVU6998
 26728              	.LBB3602:
 547:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/cccVhVyH.s 			page 685


 26729              		.loc 1 547 2 view .LVU6999
 547:src/xeq.c     **** 		Error = e;
 26730              		.loc 1 547 12 is_stmt 0 view .LVU7000
 26731 004a 174B     		ldr	r3, .L1938+20
 547:src/xeq.c     **** 		Error = e;
 26732              		.loc 1 547 5 view .LVU7001
 26733 004c 1A68     		ldr	r2, [r3]
 26734 004e 0AB9     		cbnz	r2, .L1927
 26735              	.LVL2062:
 26736              	.LBB3603:
 26737              	.LBI3603:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26738              		.loc 1 546 5 is_stmt 1 view .LVU7002
 26739              	.LBB3604:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26740              		.loc 1 548 3 view .LVU7003
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26741              		.loc 1 548 9 is_stmt 0 view .LVU7004
 26742 0050 0B22     		movs	r2, #11
 26743 0052 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26744              		.loc 1 549 3 is_stmt 1 view .LVU7005
 26745              	.LVL2063:
 26746              	.L1927:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26747              		.loc 1 549 3 is_stmt 0 view .LVU7006
 26748              	.LBE3604:
 26749              	.LBE3603:
 26750              	.LBE3602:
 26751              	.LBE3601:
2247:src/xeq.c     **** 
 26752              		.loc 1 2247 1 view .LVU7007
 26753 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 26754              	.LVL2064:
 26755              	.L1934:
2244:src/xeq.c     **** 		}
 26756              		.loc 1 2244 4 is_stmt 1 view .LVU7008
2244:src/xeq.c     **** 		}
 26757              		.loc 1 2244 10 is_stmt 0 view .LVU7009
 26758 0058 1449     		ldr	r1, .L1938+24
2244:src/xeq.c     **** 		}
 26759              		.loc 1 2244 11 view .LVU7010
 26760 005a 013B     		subs	r3, r3, #1
 26761 005c 1BB2     		sxth	r3, r3
2244:src/xeq.c     **** 		}
 26762              		.loc 1 2244 10 view .LVU7011
 26763 005e 0968     		ldr	r1, [r1]
2244:src/xeq.c     **** 		}
 26764              		.loc 1 2244 24 view .LVU7012
 26765 0060 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 26766 0064 21F81360 		strh	r6, [r1, r3, lsl #1]	@ movhi
2247:src/xeq.c     **** 
 26767              		.loc 1 2247 1 view .LVU7013
 26768 0068 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 26769              	.LVL2065:
 26770              	.L1930:
2231:src/xeq.c     **** 			set_running_on();
ARM GAS  /tmp/cccVhVyH.s 			page 686


 26771              		.loc 1 2231 4 is_stmt 1 view .LVU7014
 26772              	.LBB3605:
 26773              	.LBI3597:
1609:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 26774              		.loc 1 1609 6 view .LVU7015
 26775              	.LBB3599:
1610:src/xeq.c     **** }
 26776              		.loc 1 1610 2 view .LVU7016
1610:src/xeq.c     **** }
 26777              		.loc 1 1610 24 is_stmt 0 view .LVU7017
 26778 006c B2F8DE17 		ldrh	r1, [r2, #2014]
1610:src/xeq.c     **** }
 26779              		.loc 1 1610 12 view .LVU7018
 26780 0070 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 26781              	.LBE3599:
 26782              	.LBE3605:
2232:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
 26783              		.loc 1 2232 4 is_stmt 1 view .LVU7019
 26784              	.LBB3606:
 26785              	.LBB3600:
1610:src/xeq.c     **** }
 26786              		.loc 1 1610 24 is_stmt 0 view .LVU7020
 26787 0074 63F34F11 		bfi	r1, r3, #5, #11
 26788 0078 A2F8DE17 		strh	r1, [r2, #2014]	@ movhi
 26789              	.LBE3600:
 26790              	.LBE3606:
2232:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
 26791              		.loc 1 2232 4 view .LVU7021
 26792 007c FFF7FEFF 		bl	set_running_on
 26793              	.LVL2066:
2233:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 26794              		.loc 1 2233 4 is_stmt 1 view .LVU7022
2233:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 26795              		.loc 1 2233 10 is_stmt 0 view .LVU7023
 26796 0080 A30B     		lsrs	r3, r4, #14
2233:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 26797              		.loc 1 2233 7 view .LVU7024
 26798 0082 032B     		cmp	r3, #3
2233:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 26799              		.loc 1 2233 24 view .LVU7025
 26800 0084 3A68     		ldr	r2, [r7]
2233:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 26801              		.loc 1 2233 7 view .LVU7026
 26802 0086 D1D0     		beq	.L1931
2233:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 26803              		.loc 1 2233 21 discriminator 1 view .LVU7027
 26804 0088 B2F8EC37 		ldrh	r3, [r2, #2028]
 26805 008c 4345     		cmp	r3, r8
 26806 008e 18BF     		it	ne
 26807 0090 2646     		movne	r6, r4
 26808              	.LVL2067:
2233:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 26809              		.loc 1 2233 21 discriminator 1 view .LVU7028
 26810 0092 CBE7     		b	.L1931
 26811              	.L1939:
 26812              		.align	2
 26813              	.L1938:
ARM GAS  /tmp/cccVhVyH.s 			page 687


 26814 0094 00000000 		.word	main_ram
 26815 0098 00000000 		.word	Running
 26816 009c 00000000 		.word	XromRunning
 26817 00a0 00000000 		.word	XromParams
 26818 00a4 00000000 		.word	RetStkSize
 26819 00a8 00000000 		.word	Error
 26820 00ac 00000000 		.word	RetStk
 26821              		.cfi_endproc
 26822              	.LFE153:
 26824              		.section	.text.cmdgtocommon,"ax",%progbits
 26825              		.align	1
 26826              		.p2align 2,,3
 26827              		.global	cmdgtocommon
 26828              		.syntax unified
 26829              		.thumb
 26830              		.thumb_func
 26831              		.fpu fpv4-sp-d16
 26833              	cmdgtocommon:
 26834              	.LVL2068:
 26835              	.LFB156:
2287:src/xeq.c     **** 	if (pc == 0)
 26836              		.loc 1 2287 45 is_stmt 1 view -0
 26837              		.cfi_startproc
 26838              		@ args = 0, pretend = 0, frame = 0
 26839              		@ frame_needed = 0, uses_anonymous_args = 0
 26840              		@ link register save eliminated.
2288:src/xeq.c     **** 		set_running_off();
 26841              		.loc 1 2288 2 view .LVU7030
 26842              	.LBB3613:
 26843              	.LBB3614:
 26844              	.LBB3615:
 26845              	.LBB3616:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 26846              		.loc 1 5826 15 is_stmt 0 view .LVU7031
 26847 0000 0A4A     		ldr	r2, .L1942
 26848              	.LBE3616:
 26849              	.LBE3615:
 26850              	.LBE3614:
 26851              	.LBE3613:
2288:src/xeq.c     **** 		set_running_off();
 26852              		.loc 1 2288 5 view .LVU7032
 26853 0002 0B46     		mov	r3, r1
 26854 0004 59B9     		cbnz	r1, .L1941
 26855              	.LBB3624:
 26856              	.LBI3613:
2287:src/xeq.c     **** 	if (pc == 0)
 26857              		.loc 1 2287 6 is_stmt 1 view .LVU7033
 26858              	.LVL2069:
 26859              	.LBB3623:
2289:src/xeq.c     **** 	else
 26860              		.loc 1 2289 3 view .LVU7034
 26861              	.LBB3622:
 26862              	.LBI3615:
5824:src/xeq.c     **** 	set_running_off_sst();
 26863              		.loc 1 5824 6 view .LVU7035
 26864              	.LBB3621:
5825:src/xeq.c     **** 	State.entryp = 0;
ARM GAS  /tmp/cccVhVyH.s 			page 688


 26865              		.loc 1 5825 2 view .LVU7036
 26866              	.LBB3617:
 26867              	.LBI3617:
5816:src/xeq.c     **** 	Running = 0;
 26868              		.loc 1 5816 6 view .LVU7037
 26869              	.LBB3618:
5817:src/xeq.c     **** }
 26870              		.loc 1 5817 2 view .LVU7038
5817:src/xeq.c     **** }
 26871              		.loc 1 5817 10 is_stmt 0 view .LVU7039
 26872 0006 0A48     		ldr	r0, .L1942+4
 26873              	.LVL2070:
5817:src/xeq.c     **** }
 26874              		.loc 1 5817 10 view .LVU7040
 26875              	.LBE3618:
 26876              	.LBE3617:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 26877              		.loc 1 5826 15 view .LVU7041
 26878 0008 1268     		ldr	r2, [r2]
 26879              	.LBB3620:
 26880              	.LBB3619:
5817:src/xeq.c     **** }
 26881              		.loc 1 5817 10 view .LVU7042
 26882 000a 0160     		str	r1, [r0]
 26883              	.LBE3619:
 26884              	.LBE3620:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 26885              		.loc 1 5826 2 is_stmt 1 view .LVU7043
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 26886              		.loc 1 5826 15 is_stmt 0 view .LVU7044
 26887 000c 92F8DD07 		ldrb	r0, [r2, #2013]	@ zero_extendqisi2
 26888 0010 61F30410 		bfi	r0, r1, #4, #1
 26889              	.LVL2071:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 26890              		.loc 1 5826 15 view .LVU7045
 26891 0014 82F8DD07 		strb	r0, [r2, #2013]
5827:src/xeq.c     **** }
 26892              		.loc 1 5827 2 is_stmt 1 view .LVU7046
 26893 0018 8A20     		movs	r0, #138
 26894 001a FFF7FEBF 		b	dot
 26895              	.LVL2072:
 26896              	.L1941:
5827:src/xeq.c     **** }
 26897              		.loc 1 5827 2 is_stmt 0 view .LVU7047
 26898              	.LBE3621:
 26899              	.LBE3622:
 26900              	.LBE3623:
 26901              	.LBE3624:
2291:src/xeq.c     **** }
 26902              		.loc 1 2291 3 is_stmt 1 view .LVU7048
2291:src/xeq.c     **** }
 26903              		.loc 1 2291 19 is_stmt 0 view .LVU7049
 26904 001e 1268     		ldr	r2, [r2]
2291:src/xeq.c     **** }
 26905              		.loc 1 2291 3 view .LVU7050
 26906 0020 0146     		mov	r1, r0
 26907              	.LVL2073:
ARM GAS  /tmp/cccVhVyH.s 			page 689


2291:src/xeq.c     **** }
 26908              		.loc 1 2291 3 view .LVU7051
 26909 0022 B2F8E027 		ldrh	r2, [r2, #2016]
 26910 0026 1846     		mov	r0, r3
 26911              	.LVL2074:
2291:src/xeq.c     **** }
 26912              		.loc 1 2291 3 view .LVU7052
 26913 0028 FFF7FEBF 		b	gsbgto
 26914              	.LVL2075:
 26915              	.L1943:
2291:src/xeq.c     **** }
 26916              		.loc 1 2291 3 view .LVU7053
 26917              		.align	2
 26918              	.L1942:
 26919 002c 00000000 		.word	main_ram
 26920 0030 00000000 		.word	Running
 26921              		.cfi_endproc
 26922              	.LFE156:
 26924              		.section	.text.cmdgto,"ax",%progbits
 26925              		.align	1
 26926              		.p2align 2,,3
 26927              		.global	cmdgto
 26928              		.syntax unified
 26929              		.thumb
 26930              		.thumb_func
 26931              		.fpu fpv4-sp-d16
 26933              	cmdgto:
 26934              	.LVL2076:
 26935              	.LFB162:
2347:src/xeq.c     **** 	unsigned int lbl;
 26936              		.loc 1 2347 45 is_stmt 1 view -0
 26937              		.cfi_startproc
 26938              		@ args = 0, pretend = 0, frame = 0
 26939              		@ frame_needed = 0, uses_anonymous_args = 0
2348:src/xeq.c     **** 	if (is_xrom())
 26940              		.loc 1 2348 2 view .LVU7055
2349:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26941              		.loc 1 2349 2 view .LVU7056
 26942              	.LBB3625:
 26943              	.LBI3625:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 26944              		.loc 1 185 5 view .LVU7057
 26945              	.LBB3626:
 186:src/xeq.c     **** }
 26946              		.loc 1 186 2 view .LVU7058
 186:src/xeq.c     **** }
 26947              		.loc 1 186 9 is_stmt 0 view .LVU7059
 26948 0000 0E4B     		ldr	r3, .L1948
 26949 0002 1B68     		ldr	r3, [r3]
 26950 0004 B3F8E037 		ldrh	r3, [r3, #2016]
 26951              	.LBE3626:
 26952              	.LBE3625:
2349:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26953              		.loc 1 2349 5 view .LVU7060
 26954 0008 9A0B     		lsrs	r2, r3, #14
 26955 000a 032A     		cmp	r2, #3
2347:src/xeq.c     **** 	unsigned int lbl;
ARM GAS  /tmp/cccVhVyH.s 			page 690


 26956              		.loc 1 2347 45 view .LVU7061
 26957 000c 10B5     		push	{r4, lr}
 26958              		.cfi_def_cfa_offset 8
 26959              		.cfi_offset 4, -8
 26960              		.cfi_offset 14, -4
2347:src/xeq.c     **** 	unsigned int lbl;
 26961              		.loc 1 2347 45 view .LVU7062
 26962 000e 0C46     		mov	r4, r1
2349:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26963              		.loc 1 2349 5 view .LVU7063
 26964 0010 0CD1     		bne	.L1945
2350:src/xeq.c     **** 	else
 26965              		.loc 1 2350 3 is_stmt 1 view .LVU7064
2350:src/xeq.c     **** 	else
 26966              		.loc 1 2350 9 is_stmt 0 view .LVU7065
 26967 0012 0B4B     		ldr	r3, .L1948+4
2350:src/xeq.c     **** 	else
 26968              		.loc 1 2350 37 view .LVU7066
 26969 0014 33F81010 		ldrh	r1, [r3, r0, lsl #1]
 26970              	.LVL2077:
2350:src/xeq.c     **** 	else
 26971              		.loc 1 2350 7 view .LVU7067
 26972 0018 41F44041 		orr	r1, r1, #49152
 26973              	.LVL2078:
 26974              	.L1946:
2353:src/xeq.c     **** }
 26975              		.loc 1 2353 2 is_stmt 1 view .LVU7068
 26976 001c B4F14500 		subs	r0, r4, #69
 26977 0020 18BF     		it	ne
 26978 0022 0120     		movne	r0, #1
2354:src/xeq.c     **** 
 26979              		.loc 1 2354 1 is_stmt 0 view .LVU7069
 26980 0024 BDE81040 		pop	{r4, lr}
 26981              		.cfi_remember_state
 26982              		.cfi_restore 14
 26983              		.cfi_restore 4
 26984              		.cfi_def_cfa_offset 0
2353:src/xeq.c     **** }
 26985              		.loc 1 2353 2 view .LVU7070
 26986 0028 FFF7FEBF 		b	cmdgtocommon
 26987              	.LVL2079:
 26988              	.L1945:
 26989              		.cfi_restore_state
2352:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
 26990              		.loc 1 2352 3 is_stmt 1 view .LVU7071
 26991              	.LBB3627:
 26992              	.LBI3627:
2217:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 26993              		.loc 1 2217 14 view .LVU7072
 26994              	.LBB3628:
2218:src/xeq.c     **** }
 26995              		.loc 1 2218 2 view .LVU7073
2218:src/xeq.c     **** }
 26996              		.loc 1 2218 9 is_stmt 0 view .LVU7074
 26997 002c 40F4C441 		orr	r1, r0, #25088
 26998              	.LVL2080:
2218:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 691


 26999              		.loc 1 2218 9 view .LVU7075
 27000 0030 0322     		movs	r2, #3
 27001 0032 1846     		mov	r0, r3
 27002              	.LVL2081:
2218:src/xeq.c     **** }
 27003              		.loc 1 2218 9 view .LVU7076
 27004 0034 FFF7FEFF 		bl	find_opcode_from
 27005              	.LVL2082:
2218:src/xeq.c     **** }
 27006              		.loc 1 2218 9 view .LVU7077
 27007 0038 0146     		mov	r1, r0
 27008              	.LVL2083:
2218:src/xeq.c     **** }
 27009              		.loc 1 2218 9 view .LVU7078
 27010 003a EFE7     		b	.L1946
 27011              	.L1949:
 27012              		.align	2
 27013              	.L1948:
 27014 003c 00000000 		.word	main_ram
 27015 0040 00000000 		.word	.LANCHOR6
 27016              	.LBE3628:
 27017              	.LBE3627:
 27018              		.cfi_endproc
 27019              	.LFE162:
 27021              		.section	.text.branchtoalpha,"ax",%progbits
 27022              		.align	1
 27023              		.p2align 2,,3
 27024              		.syntax unified
 27025              		.thumb
 27026              		.thumb_func
 27027              		.fpu fpv4-sp-d16
 27029              	branchtoalpha:
 27030              	.LVL2084:
 27031              	.LFB167:
2396:src/xeq.c     **** 	unsigned int op;
 27032              		.loc 1 2396 51 is_stmt 1 view -0
 27033              		.cfi_startproc
 27034              		@ args = 0, pretend = 0, frame = 0
 27035              		@ frame_needed = 0, uses_anonymous_args = 0
2397:src/xeq.c     **** 
 27036              		.loc 1 2397 2 view .LVU7080
2399:src/xeq.c     **** 	op |= buf[0] & 0xff;
 27037              		.loc 1 2399 2 view .LVU7081
2400:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 27038              		.loc 1 2400 2 view .LVU7082
2401:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 27039              		.loc 1 2401 2 view .LVU7083
2402:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 27040              		.loc 1 2402 2 view .LVU7084
2403:src/xeq.c     **** }
 27041              		.loc 1 2403 2 view .LVU7085
2396:src/xeq.c     **** 	unsigned int op;
 27042              		.loc 1 2396 51 is_stmt 0 view .LVU7086
 27043 0000 10B5     		push	{r4, lr}
 27044              		.cfi_def_cfa_offset 8
 27045              		.cfi_offset 4, -8
 27046              		.cfi_offset 14, -4
ARM GAS  /tmp/cccVhVyH.s 			page 692


2402:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 27047              		.loc 1 2402 16 view .LVU7087
 27048 0002 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
2401:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 27049              		.loc 1 2401 16 view .LVU7088
 27050 0004 4C78     		ldrb	r4, [r1, #1]	@ zero_extendqisi2
2400:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 27051              		.loc 1 2400 15 view .LVU7089
 27052 0006 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
2402:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 27053              		.loc 1 2402 24 view .LVU7090
 27054 0008 1B06     		lsls	r3, r3, #24
2402:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 27055              		.loc 1 2402 5 view .LVU7091
 27056 000a 43EA0443 		orr	r3, r3, r4, lsl #16
 27057 000e 1343     		orrs	r3, r3, r2
2396:src/xeq.c     **** 	unsigned int op;
 27058              		.loc 1 2396 51 view .LVU7092
 27059 0010 0446     		mov	r4, r0
2403:src/xeq.c     **** }
 27060              		.loc 1 2403 2 view .LVU7093
 27061 0012 0121     		movs	r1, #1
 27062              	.LVL2085:
2403:src/xeq.c     **** }
 27063              		.loc 1 2403 2 view .LVU7094
 27064 0014 43F47040 		orr	r0, r3, #61440
 27065              	.LVL2086:
2403:src/xeq.c     **** }
 27066              		.loc 1 2403 2 view .LVU7095
 27067 0018 FFF7FEFF 		bl	findmultilbl
 27068              	.LVL2087:
2403:src/xeq.c     **** }
 27069              		.loc 1 2403 2 view .LVU7096
 27070 001c 0146     		mov	r1, r0
 27071 001e 2046     		mov	r0, r4
2404:src/xeq.c     **** 
 27072              		.loc 1 2404 1 view .LVU7097
 27073 0020 BDE81040 		pop	{r4, lr}
 27074              		.cfi_restore 14
 27075              		.cfi_restore 4
 27076              		.cfi_def_cfa_offset 0
 27077              	.LVL2088:
2403:src/xeq.c     **** }
 27078              		.loc 1 2403 2 view .LVU7098
 27079 0024 FFF7FEBF 		b	cmdgtocommon
 27080              	.LVL2089:
2403:src/xeq.c     **** }
 27081              		.loc 1 2403 2 view .LVU7099
 27082              		.cfi_endproc
 27083              	.LFE167:
 27085              		.section	.text.cmdalphagto,"ax",%progbits
 27086              		.align	1
 27087              		.p2align 2,,3
 27088              		.global	cmdalphagto
 27089              		.syntax unified
 27090              		.thumb
 27091              		.thumb_func
ARM GAS  /tmp/cccVhVyH.s 			page 693


 27092              		.fpu fpv4-sp-d16
 27094              	cmdalphagto:
 27095              	.LVL2090:
 27096              	.LFB168:
2406:src/xeq.c     **** 	char buf[14];
 27097              		.loc 1 2406 50 is_stmt 1 view -0
 27098              		.cfi_startproc
 27099              		@ args = 0, pretend = 0, frame = 16
 27100              		@ frame_needed = 0, uses_anonymous_args = 0
2407:src/xeq.c     **** 
 27101              		.loc 1 2407 2 view .LVU7101
2409:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 27102              		.loc 1 2409 2 view .LVU7102
2406:src/xeq.c     **** 	char buf[14];
 27103              		.loc 1 2406 50 is_stmt 0 view .LVU7103
 27104 0000 30B5     		push	{r4, r5, lr}
 27105              		.cfi_def_cfa_offset 12
 27106              		.cfi_offset 4, -12
 27107              		.cfi_offset 5, -8
 27108              		.cfi_offset 14, -4
 27109 0002 85B0     		sub	sp, sp, #20
 27110              		.cfi_def_cfa_offset 32
2409:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 27111              		.loc 1 2409 2 view .LVU7104
 27112 0004 0E22     		movs	r2, #14
2406:src/xeq.c     **** 	char buf[14];
 27113              		.loc 1 2406 50 view .LVU7105
 27114 0006 0546     		mov	r5, r0
 27115 0008 0C46     		mov	r4, r1
2409:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 27116              		.loc 1 2409 2 view .LVU7106
 27117 000a 6846     		mov	r0, sp
 27118              	.LVL2091:
2409:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 27119              		.loc 1 2409 2 view .LVU7107
 27120 000c 0021     		movs	r1, #0
 27121              	.LVL2092:
2409:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 27122              		.loc 1 2409 2 view .LVU7108
 27123 000e FFF7FEFF 		bl	xset
 27124              	.LVL2093:
2410:src/xeq.c     **** }
 27125              		.loc 1 2410 2 is_stmt 1 view .LVU7109
 27126 0012 6946     		mov	r1, sp
 27127 0014 2846     		mov	r0, r5
 27128 0016 FFF7FEFF 		bl	alpha_rcl_s
 27129              	.LVL2094:
 27130 001a 0146     		mov	r1, r0
 27131 001c B4F17000 		subs	r0, r4, #112
 27132 0020 18BF     		it	ne
 27133 0022 0120     		movne	r0, #1
 27134 0024 FFF7FEFF 		bl	branchtoalpha
 27135              	.LVL2095:
2411:src/xeq.c     **** 
 27136              		.loc 1 2411 1 is_stmt 0 view .LVU7110
 27137 0028 05B0     		add	sp, sp, #20
 27138              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/cccVhVyH.s 			page 694


 27139              		@ sp needed
 27140 002a 30BD     		pop	{r4, r5, pc}
2411:src/xeq.c     **** 
 27141              		.loc 1 2411 1 view .LVU7111
 27142              		.cfi_endproc
 27143              	.LFE168:
 27145              		.section	.text.op_gtoalpha,"ax",%progbits
 27146              		.align	1
 27147              		.p2align 2,,3
 27148              		.global	op_gtoalpha
 27149              		.syntax unified
 27150              		.thumb
 27151              		.thumb_func
 27152              		.fpu fpv4-sp-d16
 27154              	op_gtoalpha:
 27155              	.LVL2096:
 27156              	.LFB170:
2421:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 27157              		.loc 1 2421 33 is_stmt 1 view -0
 27158              		.cfi_startproc
 27159              		@ args = 0, pretend = 0, frame = 8
 27160              		@ frame_needed = 0, uses_anonymous_args = 0
2422:src/xeq.c     **** }
 27161              		.loc 1 2422 2 view .LVU7113
2421:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 27162              		.loc 1 2421 33 is_stmt 0 view .LVU7114
 27163 0000 10B5     		push	{r4, lr}
 27164              		.cfi_def_cfa_offset 8
 27165              		.cfi_offset 4, -8
 27166              		.cfi_offset 14, -4
 27167              	.LBB3631:
 27168              	.LBB3632:
2416:src/xeq.c     **** 	buf[3] = '\0';
 27169              		.loc 1 2416 13 view .LVU7115
 27170 0002 0B4B     		ldr	r3, .L1956
 27171 0004 1968     		ldr	r1, [r3]
 27172              	.LBE3632:
 27173              	.LBE3631:
2421:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 27174              		.loc 1 2421 33 view .LVU7116
 27175 0006 82B0     		sub	sp, sp, #8
 27176              		.cfi_def_cfa_offset 16
2421:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 27177              		.loc 1 2421 33 view .LVU7117
 27178 0008 0446     		mov	r4, r0
 27179              	.LVL2097:
 27180              	.LBB3634:
 27181              	.LBI3631:
2413:src/xeq.c     **** 	char buf[4];
 27182              		.loc 1 2413 13 is_stmt 1 view .LVU7118
 27183              	.LBB3633:
2414:src/xeq.c     **** 
 27184              		.loc 1 2414 2 view .LVU7119
2416:src/xeq.c     **** 	buf[3] = '\0';
 27185              		.loc 1 2416 2 view .LVU7120
 27186 000a 0322     		movs	r2, #3
 27187 000c 01F5F661 		add	r1, r1, #1968
ARM GAS  /tmp/cccVhVyH.s 			page 695


 27188 0010 01A8     		add	r0, sp, #4
 27189              	.LVL2098:
2416:src/xeq.c     **** 	buf[3] = '\0';
 27190              		.loc 1 2416 2 is_stmt 0 view .LVU7121
 27191 0012 FFF7FEFF 		bl	xcopy
 27192              	.LVL2099:
2417:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 27193              		.loc 1 2417 2 is_stmt 1 view .LVU7122
2418:src/xeq.c     **** }
 27194              		.loc 1 2418 2 is_stmt 0 view .LVU7123
 27195 0016 B4F19800 		subs	r0, r4, #152
2417:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 27196              		.loc 1 2417 9 view .LVU7124
 27197 001a 4FF00003 		mov	r3, #0
2418:src/xeq.c     **** }
 27198              		.loc 1 2418 2 view .LVU7125
 27199 001e 18BF     		it	ne
 27200 0020 0120     		movne	r0, #1
 27201 0022 01A9     		add	r1, sp, #4
2417:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 27202              		.loc 1 2417 9 view .LVU7126
 27203 0024 8DF80730 		strb	r3, [sp, #7]
2418:src/xeq.c     **** }
 27204              		.loc 1 2418 2 is_stmt 1 view .LVU7127
 27205 0028 FFF7FEFF 		bl	branchtoalpha
 27206              	.LVL2100:
2418:src/xeq.c     **** }
 27207              		.loc 1 2418 2 is_stmt 0 view .LVU7128
 27208              	.LBE3633:
 27209              	.LBE3634:
2423:src/xeq.c     **** 
 27210              		.loc 1 2423 1 view .LVU7129
 27211 002c 02B0     		add	sp, sp, #8
 27212              		.cfi_def_cfa_offset 8
 27213              		@ sp needed
 27214 002e 10BD     		pop	{r4, pc}
 27215              	.L1957:
 27216              		.align	2
 27217              	.L1956:
 27218 0030 00000000 		.word	main_ram
 27219              		.cfi_endproc
 27220              	.LFE170:
 27222              		.section	.text.cmdskip,"ax",%progbits
 27223              		.align	1
 27224              		.p2align 2,,3
 27225              		.global	cmdskip
 27226              		.syntax unified
 27227              		.thumb
 27228              		.thumb_func
 27229              		.fpu fpv4-sp-d16
 27231              	cmdskip:
 27232              	.LVL2101:
 27233              	.LFB183:
2597:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 27234              		.loc 1 2597 46 is_stmt 1 view -0
 27235              		.cfi_startproc
 27236              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/cccVhVyH.s 			page 696


 27237              		@ frame_needed = 0, uses_anonymous_args = 0
2598:src/xeq.c     **** 	unsigned int pc;
 27238              		.loc 1 2598 2 view .LVU7131
2597:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 27239              		.loc 1 2597 46 is_stmt 0 view .LVU7132
 27240 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 27241              		.cfi_def_cfa_offset 20
 27242              		.cfi_offset 4, -20
 27243              		.cfi_offset 5, -16
 27244              		.cfi_offset 6, -12
 27245              		.cfi_offset 7, -8
 27246              		.cfi_offset 14, -4
2598:src/xeq.c     **** 	unsigned int pc;
 27247              		.loc 1 2598 30 view .LVU7133
 27248 0002 1D4F     		ldr	r7, .L1982
 27249 0004 3B68     		ldr	r3, [r7]
2601:src/xeq.c     **** 		int sgn;
 27250              		.loc 1 2601 5 view .LVU7134
 27251 0006 9A29     		cmp	r1, #154
2598:src/xeq.c     **** 	unsigned int pc;
 27252              		.loc 1 2598 21 view .LVU7135
 27253 0008 B3F8E067 		ldrh	r6, [r3, #2016]
 27254              	.LVL2102:
2599:src/xeq.c     **** 
 27255              		.loc 1 2599 2 is_stmt 1 view .LVU7136
2601:src/xeq.c     **** 		int sgn;
 27256              		.loc 1 2601 2 view .LVU7137
2597:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 27257              		.loc 1 2597 46 is_stmt 0 view .LVU7138
 27258 000c 83B0     		sub	sp, sp, #12
 27259              		.cfi_def_cfa_offset 32
2597:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 27260              		.loc 1 2597 46 view .LVU7139
 27261 000e 0D46     		mov	r5, r1
2601:src/xeq.c     **** 		int sgn;
 27262              		.loc 1 2601 5 view .LVU7140
 27263 0010 22D0     		beq	.L1979
 27264 0012 0446     		mov	r4, r0
 27265              	.LVL2103:
 27266              	.L1959:
2610:src/xeq.c     **** 		pc = origpc + arg;
 27267              		.loc 1 2610 2 is_stmt 1 view .LVU7141
2610:src/xeq.c     **** 		pc = origpc + arg;
 27268              		.loc 1 2610 6 is_stmt 0 view .LVU7142
 27269 0014 B30B     		lsrs	r3, r6, #14
2610:src/xeq.c     **** 		pc = origpc + arg;
 27270              		.loc 1 2610 5 view .LVU7143
 27271 0016 032B     		cmp	r3, #3
 27272 0018 15D0     		beq	.L1980
 27273              	.LVL2104:
 27274              	.L1964:
2613:src/xeq.c     **** 		if (PcWrapped) {
 27275              		.loc 1 2613 28 is_stmt 1 discriminator 2 view .LVU7144
2613:src/xeq.c     **** 		if (PcWrapped) {
 27276              		.loc 1 2613 9 discriminator 2 view .LVU7145
2613:src/xeq.c     **** 		if (PcWrapped) {
 27277              		.loc 1 2613 9 is_stmt 0 discriminator 2 view .LVU7146
ARM GAS  /tmp/cccVhVyH.s 			page 697


 27278 001a 24B1     		cbz	r4, .L1966
2613:src/xeq.c     **** 		if (PcWrapped) {
 27279              		.loc 1 2613 20 discriminator 1 view .LVU7147
 27280 001c FFF7FEFF 		bl	incpc
 27281              	.LVL2105:
 27282 0020 013C     		subs	r4, r4, #1
 27283              	.LVL2106:
2613:src/xeq.c     **** 		if (PcWrapped) {
 27284              		.loc 1 2613 16 discriminator 1 view .LVU7148
 27285 0022 0028     		cmp	r0, #0
 27286 0024 F9D0     		beq	.L1964
 27287              	.LVL2107:
 27288              	.L1966:
2614:src/xeq.c     **** 			report_err(ERR_RANGE);
 27289              		.loc 1 2614 3 is_stmt 1 view .LVU7149
2614:src/xeq.c     **** 			report_err(ERR_RANGE);
 27290              		.loc 1 2614 7 is_stmt 0 view .LVU7150
 27291 0026 154B     		ldr	r3, .L1982+4
2614:src/xeq.c     **** 			report_err(ERR_RANGE);
 27292              		.loc 1 2614 6 view .LVU7151
 27293 0028 1B68     		ldr	r3, [r3]
 27294 002a 73B9     		cbnz	r3, .L1981
 27295              	.L1967:
2617:src/xeq.c     **** 	}
 27296              		.loc 1 2617 3 is_stmt 1 view .LVU7152
2617:src/xeq.c     **** 	}
 27297              		.loc 1 2617 8 is_stmt 0 view .LVU7153
 27298 002c 3B68     		ldr	r3, [r7]
2617:src/xeq.c     **** 	}
 27299              		.loc 1 2617 6 view .LVU7154
 27300 002e B3F8E007 		ldrh	r0, [r3, #2016]
 27301              	.LVL2108:
 27302              	.L1965:
2619:src/xeq.c     **** }
 27303              		.loc 1 2619 2 is_stmt 1 view .LVU7155
 27304 0032 A5F13801 		sub	r1, r5, #56
 27305 0036 B1FA81F1 		clz	r1, r1
 27306 003a 3246     		mov	r2, r6
 27307 003c 4909     		lsrs	r1, r1, #5
 27308 003e FFF7FEFF 		bl	gsbgto
 27309              	.LVL2109:
 27310              	.L1958:
2620:src/xeq.c     **** 
 27311              		.loc 1 2620 1 is_stmt 0 view .LVU7156
 27312 0042 03B0     		add	sp, sp, #12
 27313              		.cfi_remember_state
 27314              		.cfi_def_cfa_offset 20
 27315              		@ sp needed
 27316 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 27317              	.LVL2110:
 27318              	.L1980:
 27319              		.cfi_restore_state
2611:src/xeq.c     **** 	else {
 27320              		.loc 1 2611 3 is_stmt 1 view .LVU7157
2611:src/xeq.c     **** 	else {
 27321              		.loc 1 2611 6 is_stmt 0 view .LVU7158
 27322 0046 A019     		adds	r0, r4, r6
ARM GAS  /tmp/cccVhVyH.s 			page 698


 27323              	.LVL2111:
2611:src/xeq.c     **** 	else {
 27324              		.loc 1 2611 6 view .LVU7159
 27325 0048 F3E7     		b	.L1965
 27326              	.LVL2112:
 27327              	.L1981:
2615:src/xeq.c     **** 		}
 27328              		.loc 1 2615 4 is_stmt 1 view .LVU7160
 27329              	.LBB3644:
 27330              	.LBI3644:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27331              		.loc 1 546 5 view .LVU7161
 27332              	.LBB3645:
 547:src/xeq.c     **** 		Error = e;
 27333              		.loc 1 547 2 view .LVU7162
 547:src/xeq.c     **** 		Error = e;
 27334              		.loc 1 547 12 is_stmt 0 view .LVU7163
 27335 004a 0D4B     		ldr	r3, .L1982+8
 547:src/xeq.c     **** 		Error = e;
 27336              		.loc 1 547 5 view .LVU7164
 27337 004c 1A68     		ldr	r2, [r3]
 27338 004e 002A     		cmp	r2, #0
 27339 0050 ECD1     		bne	.L1967
 27340              	.LVL2113:
 27341              	.LBB3646:
 27342              	.LBI3646:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27343              		.loc 1 546 5 is_stmt 1 view .LVU7165
 27344              	.LBB3647:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27345              		.loc 1 548 3 view .LVU7166
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27346              		.loc 1 548 9 is_stmt 0 view .LVU7167
 27347 0052 0822     		movs	r2, #8
 27348 0054 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 27349              		.loc 1 549 3 is_stmt 1 view .LVU7168
 27350 0056 E9E7     		b	.L1967
 27351              	.LVL2114:
 27352              	.L1979:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 27353              		.loc 1 549 3 is_stmt 0 view .LVU7169
 27354              	.LBE3647:
 27355              	.LBE3646:
 27356              	.LBE3645:
 27357              	.LBE3644:
 27358              	.LBB3648:
2602:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
 27359              		.loc 1 2602 3 is_stmt 1 view .LVU7170
2603:src/xeq.c     **** 		if (sgn || arg >= 100) {
 27360              		.loc 1 2603 3 view .LVU7171
2603:src/xeq.c     **** 		if (sgn || arg >= 100) {
 27361              		.loc 1 2603 15 is_stmt 0 view .LVU7172
 27362 0058 01A9     		add	r1, sp, #4
 27363              	.LVL2115:
2603:src/xeq.c     **** 		if (sgn || arg >= 100) {
 27364              		.loc 1 2603 15 view .LVU7173
ARM GAS  /tmp/cccVhVyH.s 			page 699


 27365 005a FFF7FEFF 		bl	get_reg_n_int_sgn
 27366              	.LVL2116:
2604:src/xeq.c     **** 			report_err(ERR_RANGE);
 27367              		.loc 1 2604 6 view .LVU7174
 27368 005e 019B     		ldr	r3, [sp, #4]
 27369              	.LVL2117:
2604:src/xeq.c     **** 			report_err(ERR_RANGE);
 27370              		.loc 1 2604 3 is_stmt 1 view .LVU7175
2604:src/xeq.c     **** 			report_err(ERR_RANGE);
 27371              		.loc 1 2604 6 is_stmt 0 view .LVU7176
 27372 0060 13B9     		cbnz	r3, .L1960
2604:src/xeq.c     **** 			report_err(ERR_RANGE);
 27373              		.loc 1 2604 11 discriminator 1 view .LVU7177
 27374 0062 6328     		cmp	r0, #99
2603:src/xeq.c     **** 		if (sgn || arg >= 100) {
 27375              		.loc 1 2603 7 discriminator 1 view .LVU7178
 27376 0064 0446     		mov	r4, r0
2604:src/xeq.c     **** 			report_err(ERR_RANGE);
 27377              		.loc 1 2604 11 discriminator 1 view .LVU7179
 27378 0066 D5D9     		bls	.L1959
 27379              	.L1960:
2605:src/xeq.c     **** 			return;
 27380              		.loc 1 2605 4 is_stmt 1 view .LVU7180
 27381              	.LVL2118:
 27382              	.LBB3649:
 27383              	.LBI3649:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27384              		.loc 1 546 5 view .LVU7181
 27385              	.LBB3650:
 547:src/xeq.c     **** 		Error = e;
 27386              		.loc 1 547 2 view .LVU7182
 547:src/xeq.c     **** 		Error = e;
 27387              		.loc 1 547 12 is_stmt 0 view .LVU7183
 27388 0068 054B     		ldr	r3, .L1982+8
 547:src/xeq.c     **** 		Error = e;
 27389              		.loc 1 547 5 view .LVU7184
 27390 006a 1A68     		ldr	r2, [r3]
 27391 006c 002A     		cmp	r2, #0
 27392 006e E8D1     		bne	.L1958
 27393              	.LVL2119:
 27394              	.LBB3651:
 27395              	.LBI3651:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27396              		.loc 1 546 5 is_stmt 1 view .LVU7185
 27397              	.LBB3652:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27398              		.loc 1 548 3 view .LVU7186
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27399              		.loc 1 548 9 is_stmt 0 view .LVU7187
 27400 0070 0822     		movs	r2, #8
 27401 0072 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 27402              		.loc 1 549 3 is_stmt 1 view .LVU7188
 27403              	.LVL2120:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 27404              		.loc 1 549 3 is_stmt 0 view .LVU7189
 27405              	.LBE3652:
ARM GAS  /tmp/cccVhVyH.s 			page 700


 27406              	.LBE3651:
 27407              	.LBE3650:
 27408              	.LBE3649:
2606:src/xeq.c     **** 		}
 27409              		.loc 1 2606 4 is_stmt 1 view .LVU7190
 27410 0074 E5E7     		b	.L1958
 27411              	.L1983:
 27412 0076 00BF     		.align	2
 27413              	.L1982:
 27414 0078 00000000 		.word	main_ram
 27415 007c 00000000 		.word	PcWrapped
 27416 0080 00000000 		.word	Error
 27417              	.LBE3648:
 27418              		.cfi_endproc
 27419              	.LFE183:
 27421              		.section	.text.cmdback,"ax",%progbits
 27422              		.align	1
 27423              		.p2align 2,,3
 27424              		.global	cmdback
 27425              		.syntax unified
 27426              		.thumb
 27427              		.thumb_func
 27428              		.fpu fpv4-sp-d16
 27430              	cmdback:
 27431              	.LVL2121:
 27432              	.LFB184:
2623:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 27433              		.loc 1 2623 46 view -0
 27434              		.cfi_startproc
 27435              		@ args = 0, pretend = 0, frame = 0
 27436              		@ frame_needed = 0, uses_anonymous_args = 0
2624:src/xeq.c     **** 	unsigned int pc = origpc;
 27437              		.loc 1 2624 2 view .LVU7192
2623:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 27438              		.loc 1 2623 46 is_stmt 0 view .LVU7193
 27439 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 27440              		.cfi_def_cfa_offset 24
 27441              		.cfi_offset 3, -24
 27442              		.cfi_offset 4, -20
 27443              		.cfi_offset 5, -16
 27444              		.cfi_offset 6, -12
 27445              		.cfi_offset 7, -8
 27446              		.cfi_offset 14, -4
2624:src/xeq.c     **** 	unsigned int pc = origpc;
 27447              		.loc 1 2624 30 view .LVU7194
 27448 0002 184B     		ldr	r3, .L2003
 27449 0004 1B68     		ldr	r3, [r3]
2624:src/xeq.c     **** 	unsigned int pc = origpc;
 27450              		.loc 1 2624 21 view .LVU7195
 27451 0006 B3F8E067 		ldrh	r6, [r3, #2016]
 27452              	.LVL2122:
2625:src/xeq.c     **** 
 27453              		.loc 1 2625 2 is_stmt 1 view .LVU7196
2627:src/xeq.c     **** 		pc -= arg + 1;
 27454              		.loc 1 2627 2 view .LVU7197
2627:src/xeq.c     **** 		pc -= arg + 1;
 27455              		.loc 1 2627 6 is_stmt 0 view .LVU7198
ARM GAS  /tmp/cccVhVyH.s 			page 701


 27456 000a B30B     		lsrs	r3, r6, #14
2627:src/xeq.c     **** 		pc -= arg + 1;
 27457              		.loc 1 2627 5 view .LVU7199
 27458 000c 032B     		cmp	r3, #3
2623:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 27459              		.loc 1 2623 46 view .LVU7200
 27460 000e 0446     		mov	r4, r0
 27461 0010 0D46     		mov	r5, r1
2627:src/xeq.c     **** 		pc -= arg + 1;
 27462              		.loc 1 2627 5 view .LVU7201
 27463 0012 1FD0     		beq	.L2000
2629:src/xeq.c     **** 		if ( Running ) {
 27464              		.loc 1 2629 14 is_stmt 1 view .LVU7202
2629:src/xeq.c     **** 		if ( Running ) {
 27465              		.loc 1 2629 17 is_stmt 0 view .LVU7203
 27466 0014 98B1     		cbz	r0, .L1992
2630:src/xeq.c     **** 			// Handles the case properly that we are on last step
 27467              		.loc 1 2630 3 is_stmt 1 view .LVU7204
2630:src/xeq.c     **** 			// Handles the case properly that we are on last step
 27468              		.loc 1 2630 8 is_stmt 0 view .LVU7205
 27469 0016 144B     		ldr	r3, .L2003+4
2630:src/xeq.c     **** 			// Handles the case properly that we are on last step
 27470              		.loc 1 2630 6 view .LVU7206
 27471 0018 1B68     		ldr	r3, [r3]
 27472 001a F3B9     		cbnz	r3, .L2001
 27473 001c 3046     		mov	r0, r6
 27474              	.LVL2123:
 27475              	.L1987:
2630:src/xeq.c     **** 			// Handles the case properly that we are on last step
 27476              		.loc 1 2630 6 view .LVU7207
 27477 001e 134F     		ldr	r7, .L2003+8
 27478 0020 00E0     		b	.L1989
 27479              	.L2002:
2636:src/xeq.c     **** 		if (PcWrapped) {
 27480              		.loc 1 2636 18 discriminator 1 view .LVU7208
 27481 0022 33B9     		cbnz	r3, .L1990
 27482              	.L1989:
2634:src/xeq.c     **** 			pc = do_dec(pc, 1);
 27483              		.loc 1 2634 3 is_stmt 1 discriminator 2 view .LVU7209
2635:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 27484              		.loc 1 2635 4 discriminator 2 view .LVU7210
2635:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 27485              		.loc 1 2635 9 is_stmt 0 discriminator 2 view .LVU7211
 27486 0024 0121     		movs	r1, #1
 27487 0026 FFF7FEFF 		bl	do_dec
 27488              	.LVL2124:
2636:src/xeq.c     **** 		if (PcWrapped) {
 27489              		.loc 1 2636 11 is_stmt 1 discriminator 2 view .LVU7212
2636:src/xeq.c     **** 		if (PcWrapped) {
 27490              		.loc 1 2636 3 is_stmt 0 discriminator 2 view .LVU7213
 27491 002a 013C     		subs	r4, r4, #1
 27492              	.LVL2125:
2636:src/xeq.c     **** 		if (PcWrapped) {
 27493              		.loc 1 2636 18 discriminator 2 view .LVU7214
 27494 002c 3B68     		ldr	r3, [r7]
2636:src/xeq.c     **** 		if (PcWrapped) {
 27495              		.loc 1 2636 3 discriminator 2 view .LVU7215
ARM GAS  /tmp/cccVhVyH.s 			page 702


 27496 002e F8D1     		bne	.L2002
2637:src/xeq.c     **** 			report_err(ERR_RANGE);
 27497              		.loc 1 2637 3 is_stmt 1 view .LVU7216
2637:src/xeq.c     **** 			report_err(ERR_RANGE);
 27498              		.loc 1 2637 6 is_stmt 0 view .LVU7217
 27499 0030 33B1     		cbz	r3, .L1986
 27500              	.L1990:
2638:src/xeq.c     **** 			return;
 27501              		.loc 1 2638 4 is_stmt 1 view .LVU7218
 27502              	.LVL2126:
 27503              	.LBB3657:
 27504              	.LBI3657:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27505              		.loc 1 546 5 view .LVU7219
 27506              	.LBB3658:
 547:src/xeq.c     **** 		Error = e;
 27507              		.loc 1 547 2 view .LVU7220
 547:src/xeq.c     **** 		Error = e;
 27508              		.loc 1 547 12 is_stmt 0 view .LVU7221
 27509 0032 0F4B     		ldr	r3, .L2003+12
 547:src/xeq.c     **** 		Error = e;
 27510              		.loc 1 547 5 view .LVU7222
 27511 0034 1A68     		ldr	r2, [r3]
 27512 0036 0AB9     		cbnz	r2, .L1984
 27513              	.LVL2127:
 27514              	.LBB3659:
 27515              	.LBI3659:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27516              		.loc 1 546 5 is_stmt 1 view .LVU7223
 27517              	.LBB3660:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27518              		.loc 1 548 3 view .LVU7224
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27519              		.loc 1 548 9 is_stmt 0 view .LVU7225
 27520 0038 0822     		movs	r2, #8
 27521 003a 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 27522              		.loc 1 549 3 is_stmt 1 view .LVU7226
 27523              	.LVL2128:
 27524              	.L1984:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 27525              		.loc 1 549 3 is_stmt 0 view .LVU7227
 27526              	.LBE3660:
 27527              	.LBE3659:
 27528              	.LBE3658:
 27529              	.LBE3657:
2643:src/xeq.c     **** 
 27530              		.loc 1 2643 1 view .LVU7228
 27531 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 27532              	.LVL2129:
 27533              	.L1992:
2643:src/xeq.c     **** 
 27534              		.loc 1 2643 1 view .LVU7229
 27535 003e 3046     		mov	r0, r6
 27536              	.LVL2130:
 27537              	.L1986:
2642:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 703


 27538              		.loc 1 2642 2 is_stmt 1 view .LVU7230
 27539 0040 A5F13901 		sub	r1, r5, #57
 27540 0044 B1FA81F1 		clz	r1, r1
 27541 0048 3246     		mov	r2, r6
 27542 004a 4909     		lsrs	r1, r1, #5
2643:src/xeq.c     **** 
 27543              		.loc 1 2643 1 is_stmt 0 view .LVU7231
 27544 004c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 27545              		.cfi_remember_state
 27546              		.cfi_restore 14
 27547              		.cfi_restore 7
 27548              		.cfi_restore 6
 27549              		.cfi_restore 5
 27550              		.cfi_restore 4
 27551              		.cfi_restore 3
 27552              		.cfi_def_cfa_offset 0
 27553              	.LVL2131:
2642:src/xeq.c     **** }
 27554              		.loc 1 2642 2 view .LVU7232
 27555 0050 FFF7FEBF 		b	gsbgto
 27556              	.LVL2132:
 27557              	.L2000:
 27558              		.cfi_restore_state
2628:src/xeq.c     ****         else if (arg) {
 27559              		.loc 1 2628 3 is_stmt 1 view .LVU7233
2628:src/xeq.c     ****         else if (arg) {
 27560              		.loc 1 2628 6 is_stmt 0 view .LVU7234
 27561 0054 731E     		subs	r3, r6, #1
 27562 0056 181A     		subs	r0, r3, r0
 27563              	.LVL2133:
2628:src/xeq.c     ****         else if (arg) {
 27564              		.loc 1 2628 6 view .LVU7235
 27565 0058 F2E7     		b	.L1986
 27566              	.LVL2134:
 27567              	.L2001:
2632:src/xeq.c     **** 		}
 27568              		.loc 1 2632 4 is_stmt 1 view .LVU7236
2632:src/xeq.c     **** 		}
 27569              		.loc 1 2632 9 is_stmt 0 view .LVU7237
 27570 005a 0121     		movs	r1, #1
 27571              	.LVL2135:
2632:src/xeq.c     **** 		}
 27572              		.loc 1 2632 9 view .LVU7238
 27573 005c 3046     		mov	r0, r6
 27574              	.LVL2136:
2632:src/xeq.c     **** 		}
 27575              		.loc 1 2632 9 view .LVU7239
 27576 005e FFF7FEFF 		bl	do_dec
 27577              	.LVL2137:
2632:src/xeq.c     **** 		}
 27578              		.loc 1 2632 9 view .LVU7240
 27579 0062 DCE7     		b	.L1987
 27580              	.L2004:
 27581              		.align	2
 27582              	.L2003:
 27583 0064 00000000 		.word	main_ram
 27584 0068 00000000 		.word	Running
ARM GAS  /tmp/cccVhVyH.s 			page 704


 27585 006c 00000000 		.word	PcWrapped
 27586 0070 00000000 		.word	Error
 27587              		.cfi_endproc
 27588              	.LFE184:
 27590              		.section	.text.usergsb_common,"ax",%progbits
 27591              		.align	1
 27592              		.p2align 2,,3
 27593              		.syntax unified
 27594              		.thumb
 27595              		.thumb_func
 27596              		.fpu fpv4-sp-d16
 27598              	usergsb_common:
 27599              	.LVL2138:
 27600              	.LFB157:
2297:src/xeq.c     **** 	const unsigned int pc = state_pc();
 27601              		.loc 1 2297 55 is_stmt 1 view -0
 27602              		.cfi_startproc
 27603              		@ args = 0, pretend = 0, frame = 0
 27604              		@ frame_needed = 0, uses_anonymous_args = 0
2298:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 27605              		.loc 1 2298 2 view .LVU7242
2297:src/xeq.c     **** 	const unsigned int pc = state_pc();
 27606              		.loc 1 2297 55 is_stmt 0 view .LVU7243
 27607 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 27608              		.cfi_def_cfa_offset 24
 27609              		.cfi_offset 4, -24
 27610              		.cfi_offset 5, -20
 27611              		.cfi_offset 6, -16
 27612              		.cfi_offset 7, -12
 27613              		.cfi_offset 8, -8
 27614              		.cfi_offset 14, -4
2298:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 27615              		.loc 1 2298 26 view .LVU7244
 27616 0004 204D     		ldr	r5, .L2009
2299:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 27617              		.loc 1 2299 2 view .LVU7245
 27618 0006 214F     		ldr	r7, .L2009+4
2298:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 27619              		.loc 1 2298 26 view .LVU7246
 27620 0008 2B68     		ldr	r3, [r5]
2299:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 27621              		.loc 1 2299 2 view .LVU7247
 27622 000a 3A68     		ldr	r2, [r7]
2298:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 27623              		.loc 1 2298 21 view .LVU7248
 27624 000c B3F8E047 		ldrh	r4, [r3, #2016]
 27625              	.LVL2139:
2299:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 27626              		.loc 1 2299 2 is_stmt 1 view .LVU7249
2301:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 27627              		.loc 1 2301 2 is_stmt 0 view .LVU7250
 27628 0010 DFF88480 		ldr	r8, .L2009+16
2297:src/xeq.c     **** 	const unsigned int pc = state_pc();
 27629              		.loc 1 2297 55 view .LVU7251
 27630 0014 0646     		mov	r6, r0
2299:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 27631              		.loc 1 2299 2 view .LVU7252
ARM GAS  /tmp/cccVhVyH.s 			page 705


 27632 0016 0121     		movs	r1, #1
 27633 0018 2046     		mov	r0, r4
 27634              	.LVL2140:
2299:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 27635              		.loc 1 2299 2 view .LVU7253
 27636 001a FFF7FEFF 		bl	gsbgto
 27637              	.LVL2141:
2300:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 27638              		.loc 1 2300 2 is_stmt 1 view .LVU7254
2300:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 27639              		.loc 1 2300 16 is_stmt 0 view .LVU7255
 27640 001e 2B68     		ldr	r3, [r5]
 27641 0020 B3F8DE27 		ldrh	r2, [r3, #2014]
2300:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 27642              		.loc 1 2300 2 view .LVU7256
 27643 0024 2046     		mov	r0, r4
 27644 0026 42F34A12 		sbfx	r2, r2, #5, #11
 27645 002a 0121     		movs	r1, #1
 27646 002c FFF7FEFF 		bl	gsbgto
 27647              	.LVL2142:
2301:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 27648              		.loc 1 2301 2 is_stmt 1 view .LVU7257
 27649 0030 2046     		mov	r0, r4
 27650 0032 D8F80020 		ldr	r2, [r8]
 27651 0036 0121     		movs	r1, #1
 27652 0038 FFF7FEFF 		bl	gsbgto
 27653              	.LVL2143:
2302:src/xeq.c     **** 
 27654              		.loc 1 2302 2 view .LVU7258
 27655 003c 2246     		mov	r2, r4
 27656 003e 3046     		mov	r0, r6
 27657 0040 0121     		movs	r1, #1
 27658 0042 FFF7FEFF 		bl	gsbgto
 27659              	.LVL2144:
2304:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 27660              		.loc 1 2304 2 view .LVU7259
2305:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 27661              		.loc 1 2305 9 is_stmt 0 view .LVU7260
 27662 0046 2A68     		ldr	r2, [r5]
2305:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 27663              		.loc 1 2305 20 view .LVU7261
 27664 0048 1149     		ldr	r1, .L2009+8
2305:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 27665              		.loc 1 2305 9 view .LVU7262
 27666 004a B2F8DE37 		ldrh	r3, [r2, #2014]
2305:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 27667              		.loc 1 2305 20 view .LVU7263
 27668 004e 0868     		ldr	r0, [r1]
2306:src/xeq.c     **** 	if (! Running)
 27669              		.loc 1 2306 12 view .LVU7264
 27670 0050 D8F80050 		ldr	r5, [r8]
2307:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 27671              		.loc 1 2307 6 view .LVU7265
 27672 0054 0F4C     		ldr	r4, .L2009+12
 27673              	.LVL2145:
2305:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 27674              		.loc 1 2305 20 view .LVU7266
ARM GAS  /tmp/cccVhVyH.s 			page 706


 27675 0056 43F34A13 		sbfx	r3, r3, #5, #11
2304:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 27676              		.loc 1 2304 13 view .LVU7267
 27677 005a 0026     		movs	r6, #0
2305:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 27678              		.loc 1 2305 20 view .LVU7268
 27679 005c 30F81310 		ldrh	r1, [r0, r3, lsl #1]
2304:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 27680              		.loc 1 2304 13 view .LVU7269
 27681 0060 3E60     		str	r6, [r7]
2305:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 27682              		.loc 1 2305 2 is_stmt 1 view .LVU7270
2305:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 27683              		.loc 1 2305 20 is_stmt 0 view .LVU7271
 27684 0062 41F40051 		orr	r1, r1, #8192
 27685 0066 20F81310 		strh	r1, [r0, r3, lsl #1]	@ movhi
2306:src/xeq.c     **** 	if (! Running)
 27686              		.loc 1 2306 2 is_stmt 1 view .LVU7272
2306:src/xeq.c     **** 	if (! Running)
 27687              		.loc 1 2306 12 is_stmt 0 view .LVU7273
 27688 006a B2F8DE37 		ldrh	r3, [r2, #2014]
 27689 006e 65F34F13 		bfi	r3, r5, #5, #11
 27690 0072 A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
2307:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 27691              		.loc 1 2307 2 is_stmt 1 view .LVU7274
2307:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 27692              		.loc 1 2307 5 is_stmt 0 view .LVU7275
 27693 0076 2368     		ldr	r3, [r4]
 27694 0078 0BB1     		cbz	r3, .L2008
2310:src/xeq.c     **** 
 27695              		.loc 1 2310 1 view .LVU7276
 27696 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 27697              	.L2008:
2308:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 27698              		.loc 1 2308 3 is_stmt 1 view .LVU7277
2310:src/xeq.c     **** 
 27699              		.loc 1 2310 1 is_stmt 0 view .LVU7278
 27700 007e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 27701              		.cfi_restore 14
 27702              		.cfi_restore 8
 27703              		.cfi_restore 7
 27704              		.cfi_restore 6
 27705              		.cfi_restore 5
 27706              		.cfi_restore 4
 27707              		.cfi_def_cfa_offset 0
2308:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 27708              		.loc 1 2308 3 view .LVU7279
 27709 0082 FFF7FEBF 		b	set_running_on
 27710              	.LVL2146:
 27711              	.L2010:
 27712 0086 00BF     		.align	2
 27713              	.L2009:
 27714 0088 00000000 		.word	main_ram
 27715 008c 00000000 		.word	XromUserPc
 27716 0090 00000000 		.word	RetStk
 27717 0094 00000000 		.word	Running
 27718 0098 00000000 		.word	UserLocalRegs
ARM GAS  /tmp/cccVhVyH.s 			page 707


 27719              		.cfi_endproc
 27720              	.LFE157:
 27722              		.section	.text.do_usergsb,"ax",%progbits
 27723              		.align	1
 27724              		.p2align 2,,3
 27725              		.global	do_usergsb
 27726              		.syntax unified
 27727              		.thumb
 27728              		.thumb_func
 27729              		.fpu fpv4-sp-d16
 27731              	do_usergsb:
 27732              	.LVL2147:
 27733              	.LFB158:
2316:src/xeq.c     **** 	usergsb_common(XromUserPc);
 27734              		.loc 1 2316 32 is_stmt 1 view -0
 27735              		.cfi_startproc
 27736              		@ args = 0, pretend = 0, frame = 0
 27737              		@ frame_needed = 0, uses_anonymous_args = 0
2317:src/xeq.c     ****         fill(OP_FILL);
 27738              		.loc 1 2317 2 view .LVU7281
2316:src/xeq.c     **** 	usergsb_common(XromUserPc);
 27739              		.loc 1 2316 32 is_stmt 0 view .LVU7282
 27740 0000 08B5     		push	{r3, lr}
 27741              		.cfi_def_cfa_offset 8
 27742              		.cfi_offset 3, -8
 27743              		.cfi_offset 14, -4
2317:src/xeq.c     ****         fill(OP_FILL);
 27744              		.loc 1 2317 2 view .LVU7283
 27745 0002 044B     		ldr	r3, .L2013
 27746 0004 1888     		ldrh	r0, [r3]
 27747              	.LVL2148:
2317:src/xeq.c     ****         fill(OP_FILL);
 27748              		.loc 1 2317 2 view .LVU7284
 27749 0006 FFF7FEFF 		bl	usergsb_common
 27750              	.LVL2149:
2318:src/xeq.c     **** }
 27751              		.loc 1 2318 9 is_stmt 1 view .LVU7285
2319:src/xeq.c     **** 
 27752              		.loc 1 2319 1 is_stmt 0 view .LVU7286
 27753 000a BDE80840 		pop	{r3, lr}
 27754              		.cfi_restore 14
 27755              		.cfi_restore 3
 27756              		.cfi_def_cfa_offset 0
2318:src/xeq.c     **** }
 27757              		.loc 1 2318 9 view .LVU7287
 27758 000e 0C20     		movs	r0, #12
 27759 0010 FFF7FEBF 		b	fill
 27760              	.LVL2150:
 27761              	.L2014:
 27762              		.align	2
 27763              	.L2013:
 27764 0014 00000000 		.word	XromUserPc
 27765              		.cfi_endproc
 27766              	.LFE158:
 27768              		.section	.text.cmdmultigto,"ax",%progbits
 27769              		.align	1
 27770              		.p2align 2,,3
ARM GAS  /tmp/cccVhVyH.s 			page 708


 27771              		.global	cmdmultigto
 27772              		.syntax unified
 27773              		.thumb
 27774              		.thumb_func
 27775              		.fpu fpv4-sp-d16
 27777              	cmdmultigto:
 27778              	.LVL2151:
 27779              	.LFB165:
2375:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 27780              		.loc 1 2375 54 is_stmt 1 view -0
 27781              		.cfi_startproc
 27782              		@ args = 0, pretend = 0, frame = 0
 27783              		@ frame_needed = 0, uses_anonymous_args = 0
2376:src/xeq.c     **** 		// In XROM the command behaves differently!
 27784              		.loc 1 2376 2 view .LVU7289
2376:src/xeq.c     **** 		// In XROM the command behaves differently!
 27785              		.loc 1 2376 5 is_stmt 0 view .LVU7290
 27786 0000 0229     		cmp	r1, #2
2375:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 27787              		.loc 1 2375 54 view .LVU7291
 27788 0002 10B5     		push	{r4, lr}
 27789              		.cfi_def_cfa_offset 8
 27790              		.cfi_offset 4, -8
 27791              		.cfi_offset 14, -4
2375:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 27792              		.loc 1 2375 54 view .LVU7292
 27793 0004 0346     		mov	r3, r0
 27794 0006 0C46     		mov	r4, r1
2376:src/xeq.c     **** 		// In XROM the command behaves differently!
 27795              		.loc 1 2376 5 view .LVU7293
 27796 0008 06D1     		bne	.L2016
 27797              	.LBB3661:
 27798              	.LBI3661:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 27799              		.loc 1 185 5 is_stmt 1 view .LVU7294
 27800              	.LBB3662:
 186:src/xeq.c     **** }
 27801              		.loc 1 186 2 view .LVU7295
 186:src/xeq.c     **** }
 27802              		.loc 1 186 9 is_stmt 0 view .LVU7296
 27803 000a 104A     		ldr	r2, .L2020
 27804 000c 1268     		ldr	r2, [r2]
 27805 000e B2F8E027 		ldrh	r2, [r2, #2016]
 27806              	.LBE3662:
 27807              	.LBE3661:
2376:src/xeq.c     **** 		// In XROM the command behaves differently!
 27808              		.loc 1 2376 22 view .LVU7297
 27809 0012 920B     		lsrs	r2, r2, #14
 27810 0014 032A     		cmp	r2, #3
 27811 0016 0BD0     		beq	.L2019
 27812              	.L2016:
2385:src/xeq.c     **** 	}
 27813              		.loc 1 2385 3 is_stmt 1 view .LVU7298
 27814 0018 0121     		movs	r1, #1
 27815              	.LVL2152:
2385:src/xeq.c     **** 	}
 27816              		.loc 1 2385 3 is_stmt 0 view .LVU7299
ARM GAS  /tmp/cccVhVyH.s 			page 709


 27817 001a 1846     		mov	r0, r3
 27818              	.LVL2153:
2385:src/xeq.c     **** 	}
 27819              		.loc 1 2385 3 view .LVU7300
 27820 001c FFF7FEFF 		bl	findmultilbl
 27821              	.LVL2154:
2385:src/xeq.c     **** 	}
 27822              		.loc 1 2385 3 view .LVU7301
 27823 0020 0146     		mov	r1, r0
 27824 0022 E01E     		subs	r0, r4, #3
 27825 0024 18BF     		it	ne
 27826 0026 0120     		movne	r0, #1
2387:src/xeq.c     **** 
 27827              		.loc 1 2387 1 view .LVU7302
 27828 0028 BDE81040 		pop	{r4, lr}
 27829              		.cfi_remember_state
 27830              		.cfi_restore 14
 27831              		.cfi_restore 4
 27832              		.cfi_def_cfa_offset 0
2385:src/xeq.c     **** 	}
 27833              		.loc 1 2385 3 view .LVU7303
 27834 002c FFF7FEBF 		b	cmdgtocommon
 27835              	.LVL2155:
 27836              	.L2019:
 27837              		.cfi_restore_state
 27838              	.LBB3663:
2378:src/xeq.c     **** 		if (target != 0)
 27839              		.loc 1 2378 3 is_stmt 1 view .LVU7304
2378:src/xeq.c     **** 		if (target != 0)
 27840              		.loc 1 2378 31 is_stmt 0 view .LVU7305
 27841 0030 0021     		movs	r1, #0
 27842              	.LVL2156:
2378:src/xeq.c     **** 		if (target != 0)
 27843              		.loc 1 2378 31 view .LVU7306
 27844 0032 FFF7FEFF 		bl	findmultilbl
 27845              	.LVL2157:
2378:src/xeq.c     **** 		if (target != 0)
 27846              		.loc 1 2378 22 view .LVU7307
 27847 0036 80B2     		uxth	r0, r0
 27848              	.LVL2158:
2379:src/xeq.c     **** 			usergsb_common(target); 
 27849              		.loc 1 2379 3 is_stmt 1 view .LVU7308
2379:src/xeq.c     **** 			usergsb_common(target); 
 27850              		.loc 1 2379 6 is_stmt 0 view .LVU7309
 27851 0038 18B1     		cbz	r0, .L2017
2380:src/xeq.c     **** 		else
 27852              		.loc 1 2380 4 is_stmt 1 view .LVU7310
 27853              	.LBE3663:
2387:src/xeq.c     **** 
 27854              		.loc 1 2387 1 is_stmt 0 view .LVU7311
 27855 003a BDE81040 		pop	{r4, lr}
 27856              		.cfi_remember_state
 27857              		.cfi_restore 14
 27858              		.cfi_restore 4
 27859              		.cfi_def_cfa_offset 0
 27860              	.LBB3664:
2380:src/xeq.c     **** 		else
ARM GAS  /tmp/cccVhVyH.s 			page 710


 27861              		.loc 1 2380 4 view .LVU7312
 27862 003e FFF7FEBF 		b	usergsb_common
 27863              	.LVL2159:
 27864              	.L2017:
 27865              		.cfi_restore_state
2382:src/xeq.c     **** 	}
 27866              		.loc 1 2382 4 is_stmt 1 view .LVU7313
 27867              	.LBE3664:
2387:src/xeq.c     **** 
 27868              		.loc 1 2387 1 is_stmt 0 view .LVU7314
 27869 0042 BDE81040 		pop	{r4, lr}
 27870              		.cfi_restore 14
 27871              		.cfi_restore 4
 27872              		.cfi_def_cfa_offset 0
 27873              	.LBB3665:
2382:src/xeq.c     **** 	}
 27874              		.loc 1 2382 4 view .LVU7315
 27875 0046 FFF7FEBF 		b	incpc
 27876              	.LVL2160:
 27877              	.L2021:
2382:src/xeq.c     **** 	}
 27878              		.loc 1 2382 4 view .LVU7316
 27879 004a 00BF     		.align	2
 27880              	.L2020:
 27881 004c 00000000 		.word	main_ram
 27882              	.LBE3665:
 27883              		.cfi_endproc
 27884              	.LFE165:
 27886              		.section	.text.store_a_to_d,"ax",%progbits
 27887              		.align	1
 27888              		.p2align 2,,3
 27889              		.global	store_a_to_d
 27890              		.syntax unified
 27891              		.thumb
 27892              		.thumb_func
 27893              		.fpu fpv4-sp-d16
 27895              	store_a_to_d:
 27896              	.LVL2161:
 27897              	.LFB269:
5841:src/xeq.c     **** 
5842:src/xeq.c     **** /* Command to stash registers A through D into volatile RAM and to restore them
5843:src/xeq.c     ****  * again.
5844:src/xeq.c     ****  */
5845:src/xeq.c     **** void store_a_to_d(enum nilop op) {
 27898              		.loc 1 5845 34 is_stmt 1 view -0
 27899              		.cfi_startproc
 27900              		@ args = 0, pretend = 0, frame = 0
 27901              		@ frame_needed = 0, uses_anonymous_args = 0
5846:src/xeq.c     **** 	const void *src = XromA2D;
 27902              		.loc 1 5846 2 view .LVU7318
5847:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 27903              		.loc 1 5847 2 view .LVU7319
5845:src/xeq.c     **** 	const void *src = XromA2D;
 27904              		.loc 1 5845 34 is_stmt 0 view .LVU7320
 27905 0000 10B5     		push	{r4, lr}
 27906              		.cfi_def_cfa_offset 8
 27907              		.cfi_offset 4, -8
ARM GAS  /tmp/cccVhVyH.s 			page 711


 27908              		.cfi_offset 14, -4
5845:src/xeq.c     **** 	const void *src = XromA2D;
 27909              		.loc 1 5845 34 view .LVU7321
 27910 0002 0446     		mov	r4, r0
 27911              		.loc 1 5847 15 view .LVU7322
 27912 0004 6820     		movs	r0, #104
 27913              	.LVL2162:
 27914              		.loc 1 5847 15 view .LVU7323
 27915 0006 FFF7FEFF 		bl	get_reg_n
 27916              	.LVL2163:
5848:src/xeq.c     **** 
5849:src/xeq.c     **** 	if (op == OP_SAVEA2D) {
 27917              		.loc 1 5849 2 is_stmt 1 view .LVU7324
 27918              		.loc 1 5849 5 is_stmt 0 view .LVU7325
 27919 000a 802C     		cmp	r4, #128
5850:src/xeq.c     **** 		src = dest;
 27920              		.loc 1 5850 7 view .LVU7326
 27921 000c 08BF     		it	eq
 27922 000e 0146     		moveq	r1, r0
5851:src/xeq.c     **** 		dest = XromA2D;
5852:src/xeq.c     **** 	}
5853:src/xeq.c     **** 	xcopy(dest, src, sizeof(REGISTER) * 4);
5854:src/xeq.c     **** }
 27923              		.loc 1 5854 1 view .LVU7327
 27924 0010 BDE81040 		pop	{r4, lr}
 27925              		.cfi_restore 14
 27926              		.cfi_restore 4
 27927              		.cfi_def_cfa_offset 0
5851:src/xeq.c     **** 		dest = XromA2D;
 27928              		.loc 1 5851 8 view .LVU7328
 27929 0014 0CBF     		ite	eq
 27930 0016 0248     		ldreq	r0, .L2026
 27931              	.LVL2164:
5846:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 27932              		.loc 1 5846 14 view .LVU7329
 27933 0018 0149     		ldrne	r1, .L2026
 27934              	.LVL2165:
5853:src/xeq.c     **** }
 27935              		.loc 1 5853 2 is_stmt 1 view .LVU7330
 27936 001a 4022     		movs	r2, #64
 27937 001c FFF7FEBF 		b	xcopy
 27938              	.LVL2166:
 27939              	.L2027:
5853:src/xeq.c     **** }
 27940              		.loc 1 5853 2 is_stmt 0 view .LVU7331
 27941              		.align	2
 27942              	.L2026:
 27943 0020 00000000 		.word	XromA2D
 27944              		.cfi_endproc
 27945              	.LFE269:
 27947              		.section	.text.cmdlocr,"ax",%progbits
 27948              		.align	1
 27949              		.p2align 2,,3
 27950              		.global	cmdlocr
 27951              		.syntax unified
 27952              		.thumb
 27953              		.thumb_func
ARM GAS  /tmp/cccVhVyH.s 			page 712


 27954              		.fpu fpv4-sp-d16
 27956              	cmdlocr:
 27957              	.LVL2167:
 27958              	.LFB270:
5855:src/xeq.c     **** 
5856:src/xeq.c     **** /*
5857:src/xeq.c     ****  *  Command to support local variables.
5858:src/xeq.c     ****  *  A stack frame is constructed:
5859:src/xeq.c     ****  *	marker including size of frame,
5860:src/xeq.c     ****  *	register + flag area.
5861:src/xeq.c     ****  *  Registers must reside on even stack positions
5862:src/xeq.c     ****  *  so the flag word is either at the top or at the bottom of the frame.
5863:src/xeq.c     ****  */
5864:src/xeq.c     **** void cmdlocr(unsigned int arg, enum rarg op) {
 27959              		.loc 1 5864 46 is_stmt 1 view -0
 27960              		.cfi_startproc
 27961              		@ args = 0, pretend = 0, frame = 8
 27962              		@ frame_needed = 0, uses_anonymous_args = 0
5865:src/xeq.c     **** 	short int sp = RetStkPtr;
 27963              		.loc 1 5865 2 view .LVU7333
5864:src/xeq.c     **** 	short int sp = RetStkPtr;
 27964              		.loc 1 5864 46 is_stmt 0 view .LVU7334
 27965 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 27966              		.cfi_def_cfa_offset 36
 27967              		.cfi_offset 4, -36
 27968              		.cfi_offset 5, -32
 27969              		.cfi_offset 6, -28
 27970              		.cfi_offset 7, -24
 27971              		.cfi_offset 8, -20
 27972              		.cfi_offset 9, -16
 27973              		.cfi_offset 10, -12
 27974              		.cfi_offset 11, -8
 27975              		.cfi_offset 14, -4
 27976              		.loc 1 5865 17 view .LVU7335
 27977 0004 DFF88081 		ldr	r8, .L2048+8
 27978 0008 D8F80010 		ldr	r1, [r8]
 27979              	.LVL2168:
 27980              	.LBB3675:
 27981              	.LBB3676:
1122:src/xeq.c     **** }
 27982              		.loc 1 1122 24 view .LVU7336
 27983 000c B1F8E847 		ldrh	r4, [r1, #2024]
 27984              	.LBE3676:
 27985              	.LBE3675:
 27986              		.loc 1 5865 12 view .LVU7337
 27987 0010 B1F9E277 		ldrsh	r7, [r1, #2018]
 27988              	.LVL2169:
5866:src/xeq.c     **** 	int size = (arg << (is_dblmode() ? 3 : 2)) + 2;
 27989              		.loc 1 5866 2 is_stmt 1 view .LVU7338
 27990              	.LBB3678:
 27991              	.LBI3675:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27992              		.loc 1 1121 5 view .LVU7339
 27993              	.LBB3677:
1122:src/xeq.c     **** }
 27994              		.loc 1 1122 2 view .LVU7340
1122:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 713


 27995              		.loc 1 1122 24 is_stmt 0 view .LVU7341
 27996 0014 44F20102 		movw	r2, #16385
 27997              	.LBE3677:
 27998              	.LBE3678:
 27999              		.loc 1 5866 39 view .LVU7342
 28000 0018 2240     		ands	r2, r2, r4
 28001 001a B2F5804F 		cmp	r2, #16384
 28002 001e 0CBF     		ite	eq
 28003 0020 0325     		moveq	r5, #3
 28004 0022 0225     		movne	r5, #2
 28005              		.loc 1 5866 18 view .LVU7343
 28006 0024 A840     		lsls	r0, r0, r5
 28007              	.LVL2170:
 28008              		.loc 1 5866 45 view .LVU7344
 28009 0026 851C     		adds	r5, r0, #2
 28010              	.LVL2171:
5867:src/xeq.c     **** 	const unsigned short marker = LOCAL_MARKER | size;
 28011              		.loc 1 5867 2 is_stmt 1 view .LVU7345
5864:src/xeq.c     **** 	short int sp = RetStkPtr;
 28012              		.loc 1 5864 46 is_stmt 0 view .LVU7346
 28013 0028 83B0     		sub	sp, sp, #12
 28014              		.cfi_def_cfa_offset 48
 28015              		.loc 1 5867 45 view .LVU7347
 28016 002a 1FFA85F9 		uxth	r9, r5
 28017              	.LVL2172:
5868:src/xeq.c     **** 	int old_size = 0;
 28018              		.loc 1 5868 2 is_stmt 1 view .LVU7348
5869:src/xeq.c     **** 	short unsigned int old_flags = 0;
 28019              		.loc 1 5869 2 view .LVU7349
5870:src/xeq.c     **** 
5871:src/xeq.c     **** 	if (sp != 0 && sp == LocalRegs) {
 28020              		.loc 1 5871 2 view .LVU7350
 28021              		.loc 1 5871 5 is_stmt 0 view .LVU7351
 28022 002e 7FB9     		cbnz	r7, .L2030
 28023              	.LVL2173:
5872:src/xeq.c     **** 		// resize required
5873:src/xeq.c     **** 		old_size = local_levels();
5874:src/xeq.c     **** 		sp += old_size;
5875:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
5876:src/xeq.c     **** 	}
5877:src/xeq.c     **** 	// compute space needed
5878:src/xeq.c     **** 	sp -= size;
 28024              		.loc 1 5878 2 is_stmt 1 view .LVU7352
5879:src/xeq.c     **** 	if (-sp > RetStkSize) {
 28025              		.loc 1 5879 10 is_stmt 0 view .LVU7353
 28026 0030 534A     		ldr	r2, .L2048
5878:src/xeq.c     **** 	if (-sp > RetStkSize) {
 28027              		.loc 1 5878 5 view .LVU7354
 28028 0032 C9F10004 		rsb	r4, r9, #0
 28029 0036 26B2     		sxth	r6, r4
 28030              	.LVL2174:
 28031              		.loc 1 5879 2 is_stmt 1 view .LVU7355
 28032              		.loc 1 5879 5 is_stmt 0 view .LVU7356
 28033 0038 1268     		ldr	r2, [r2]
 28034              		.loc 1 5879 6 view .LVU7357
 28035 003a 7142     		rsbs	r1, r6, #0
 28036              		.loc 1 5879 5 view .LVU7358
ARM GAS  /tmp/cccVhVyH.s 			page 714


 28037 003c 9142     		cmp	r1, r2
5878:src/xeq.c     **** 	if (-sp > RetStkSize) {
 28038              		.loc 1 5878 5 view .LVU7359
 28039 003e A4B2     		uxth	r4, r4
 28040              		.loc 1 5879 5 view .LVU7360
 28041 0040 4CDC     		bgt	.L2036
 28042 0042 7600     		lsls	r6, r6, #1
 28043              	.LVL2175:
 28044              		.loc 1 5879 5 view .LVU7361
 28045 0044 DFF844B1 		ldr	fp, .L2048+12
 28046 0048 4FEA450A 		lsl	r10, r5, #1
 28047 004c 3346     		mov	r3, r6
 28048 004e 15E0     		b	.L2034
 28049              	.LVL2176:
 28050              	.L2030:
5871:src/xeq.c     **** 		// resize required
 28051              		.loc 1 5871 23 discriminator 1 view .LVU7362
 28052 0050 B1F8DE47 		ldrh	r4, [r1, #2014]
 28053 0054 44F34A14 		sbfx	r4, r4, #5, #11
5871:src/xeq.c     **** 		// resize required
 28054              		.loc 1 5871 14 discriminator 1 view .LVU7363
 28055 0058 BC42     		cmp	r4, r7
 28056 005a 30D0     		beq	.L2035
5878:src/xeq.c     **** 	if (-sp > RetStkSize) {
 28057              		.loc 1 5878 2 is_stmt 1 view .LVU7364
 28058              		.loc 1 5879 10 is_stmt 0 view .LVU7365
 28059 005c 484A     		ldr	r2, .L2048
5878:src/xeq.c     **** 	if (-sp > RetStkSize) {
 28060              		.loc 1 5878 5 view .LVU7366
 28061 005e A7EB0904 		sub	r4, r7, r9
 28062              		.loc 1 5879 5 view .LVU7367
 28063 0062 1368     		ldr	r3, [r2]
5878:src/xeq.c     **** 	if (-sp > RetStkSize) {
 28064              		.loc 1 5878 5 view .LVU7368
 28065 0064 26B2     		sxth	r6, r4
 28066              	.LVL2177:
 28067              		.loc 1 5879 2 is_stmt 1 view .LVU7369
 28068              		.loc 1 5879 6 is_stmt 0 view .LVU7370
 28069 0066 7242     		rsbs	r2, r6, #0
 28070              		.loc 1 5879 5 view .LVU7371
 28071 0068 9A42     		cmp	r2, r3
5878:src/xeq.c     **** 	if (-sp > RetStkSize) {
 28072              		.loc 1 5878 5 view .LVU7372
 28073 006a A4B2     		uxth	r4, r4
 28074              		.loc 1 5879 5 view .LVU7373
 28075 006c 36DC     		bgt	.L2036
 28076 006e 7600     		lsls	r6, r6, #1
 28077              	.LVL2178:
 28078              		.loc 1 5879 5 view .LVU7374
 28079 0070 DFF818B1 		ldr	fp, .L2048+12
 28080 0074 4FEA450A 		lsl	r10, r5, #1
 28081 0078 3346     		mov	r3, r6
5869:src/xeq.c     **** 
 28082              		.loc 1 5869 21 view .LVU7375
 28083 007a 0027     		movs	r7, #0
 28084              	.LVL2179:
 28085              	.L2034:
ARM GAS  /tmp/cccVhVyH.s 			page 715


5880:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
5881:src/xeq.c     **** 		return;
5882:src/xeq.c     **** 	}
5883:src/xeq.c     **** 	if ( old_size > 0 ) {
5884:src/xeq.c     **** 		// move previous contents to new destination
5885:src/xeq.c     **** 		int n;
5886:src/xeq.c     **** 		if (size > old_size) {
5887:src/xeq.c     **** 			n = old_size;
5888:src/xeq.c     **** 			size -= old_size;
5889:src/xeq.c     **** 		}
5890:src/xeq.c     **** 		else {
5891:src/xeq.c     **** 			n = size;
5892:src/xeq.c     **** 			size = 0;
5893:src/xeq.c     **** 		}
5894:src/xeq.c     **** 		xcopy(RetStk + sp, RetStk + LocalRegs, n + n);
5895:src/xeq.c     **** 	}
5896:src/xeq.c     **** 	// fill the rest with 0
5897:src/xeq.c     **** 	xset(RetStk + sp + old_size, 0, size + size);
 28086              		.loc 1 5897 2 is_stmt 1 view .LVU7376
 28087              		.loc 1 5897 19 is_stmt 0 view .LVU7377
 28088 007c DBF80000 		ldr	r0, [fp]
 28089              		.loc 1 5897 2 view .LVU7378
 28090 0080 5246     		mov	r2, r10
 28091 0082 1844     		add	r0, r0, r3
 28092 0084 0021     		movs	r1, #0
 28093 0086 FFF7FEFF 		bl	xset
 28094              	.LVL2180:
5898:src/xeq.c     **** 
5899:src/xeq.c     **** 	// set marker, pointers and flags
5900:src/xeq.c     **** 	RetStk[sp] = marker;
 28095              		.loc 1 5900 2 is_stmt 1 view .LVU7379
 28096              		.loc 1 5900 13 is_stmt 0 view .LVU7380
 28097 008a DBF80020 		ldr	r2, [fp]
5901:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 28098              		.loc 1 5901 14 view .LVU7381
 28099 008e D8F80030 		ldr	r3, [r8]
5867:src/xeq.c     **** 	int old_size = 0;
 28100              		.loc 1 5867 23 view .LVU7382
 28101 0092 49F48059 		orr	r9, r9, #4096
 28102              	.LVL2181:
5900:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 28103              		.loc 1 5900 13 view .LVU7383
 28104 0096 22F80690 		strh	r9, [r2, r6]	@ movhi
 28105              		.loc 1 5901 2 is_stmt 1 view .LVU7384
 28106              		.loc 1 5901 24 is_stmt 0 view .LVU7385
 28107 009a B3F8DE27 		ldrh	r2, [r3, #2014]
 28108 009e 44F30A04 		sbfx	r4, r4, #0, #11
 28109 00a2 64F34F12 		bfi	r2, r4, #5, #11
 28110              		.loc 1 5901 12 view .LVU7386
 28111 00a6 A3F8E247 		strh	r4, [r3, #2018]	@ movhi
5902:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 28112              		.loc 1 5902 2 is_stmt 1 view .LVU7387
5901:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 28113              		.loc 1 5901 24 is_stmt 0 view .LVU7388
 28114 00aa A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
 28115              		.loc 1 5902 3 view .LVU7389
 28116 00ae 0021     		movs	r1, #0
ARM GAS  /tmp/cccVhVyH.s 			page 716


 28117 00b0 7020     		movs	r0, #112
 28118 00b2 FFF7FEFF 		bl	flag_word
 28119              	.LVL2182:
 28120              		.loc 1 5902 36 view .LVU7390
 28121 00b6 0780     		strh	r7, [r0]	@ movhi
 28122              	.L2028:
5903:src/xeq.c     **** }
 28123              		.loc 1 5903 1 view .LVU7391
 28124 00b8 03B0     		add	sp, sp, #12
 28125              		.cfi_remember_state
 28126              		.cfi_def_cfa_offset 36
 28127              		@ sp needed
 28128 00ba BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 28129              	.LVL2183:
 28130              	.L2035:
 28131              		.cfi_restore_state
5873:src/xeq.c     **** 		sp += old_size;
 28132              		.loc 1 5873 3 is_stmt 1 view .LVU7392
 28133              	.LBB3679:
 28134              	.LBI3679:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 28135              		.loc 1 217 5 view .LVU7393
 28136              	.LBB3680:
 218:src/xeq.c     **** }
 28137              		.loc 1 218 2 view .LVU7394
 218:src/xeq.c     **** }
 28138              		.loc 1 218 57 is_stmt 0 view .LVU7395
 28139 00be 002C     		cmp	r4, #0
 28140 00c0 15DB     		blt	.L2045
 218:src/xeq.c     **** }
 28141              		.loc 1 218 57 view .LVU7396
 28142              	.LBE3680:
 28143              	.LBE3679:
5874:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 28144              		.loc 1 5874 3 is_stmt 1 view .LVU7397
 28145              	.LVL2184:
5875:src/xeq.c     **** 	}
 28146              		.loc 1 5875 3 view .LVU7398
5875:src/xeq.c     **** 	}
 28147              		.loc 1 5875 16 is_stmt 0 view .LVU7399
 28148 00c2 0021     		movs	r1, #0
 28149 00c4 7020     		movs	r0, #112
 28150 00c6 FFF7FEFF 		bl	flag_word
 28151              	.LVL2185:
5879:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 28152              		.loc 1 5879 10 view .LVU7400
 28153 00ca 2D4B     		ldr	r3, .L2048
5878:src/xeq.c     **** 	if (-sp > RetStkSize) {
 28154              		.loc 1 5878 5 view .LVU7401
 28155 00cc A4EB0904 		sub	r4, r4, r9
 28156              	.LVL2186:
5878:src/xeq.c     **** 	if (-sp > RetStkSize) {
 28157              		.loc 1 5878 5 view .LVU7402
 28158 00d0 26B2     		sxth	r6, r4
5879:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 28159              		.loc 1 5879 5 view .LVU7403
 28160 00d2 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cccVhVyH.s 			page 717


5879:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 28161              		.loc 1 5879 6 view .LVU7404
 28162 00d4 7242     		rsbs	r2, r6, #0
 28163              	.LVL2187:
5878:src/xeq.c     **** 	if (-sp > RetStkSize) {
 28164              		.loc 1 5878 2 is_stmt 1 view .LVU7405
5879:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 28165              		.loc 1 5879 2 view .LVU7406
5879:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 28166              		.loc 1 5879 5 is_stmt 0 view .LVU7407
 28167 00d6 9A42     		cmp	r2, r3
5878:src/xeq.c     **** 	if (-sp > RetStkSize) {
 28168              		.loc 1 5878 5 view .LVU7408
 28169 00d8 A4B2     		uxth	r4, r4
5879:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 28170              		.loc 1 5879 5 view .LVU7409
 28171 00da 43DD     		ble	.L2046
 28172              	.LVL2188:
 28173              	.L2036:
5880:src/xeq.c     **** 		return;
 28174              		.loc 1 5880 3 is_stmt 1 view .LVU7410
 28175              	.LBB3682:
 28176              	.LBI3682:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28177              		.loc 1 546 5 view .LVU7411
 28178              	.LBB3683:
 547:src/xeq.c     **** 		Error = e;
 28179              		.loc 1 547 2 view .LVU7412
 547:src/xeq.c     **** 		Error = e;
 28180              		.loc 1 547 12 is_stmt 0 view .LVU7413
 28181 00dc 294B     		ldr	r3, .L2048+4
 547:src/xeq.c     **** 		Error = e;
 28182              		.loc 1 547 5 view .LVU7414
 28183 00de 1A68     		ldr	r2, [r3]
 28184 00e0 002A     		cmp	r2, #0
 28185 00e2 E9D1     		bne	.L2028
 28186              	.LVL2189:
 28187              	.LBB3684:
 28188              	.LBI3684:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28189              		.loc 1 546 5 is_stmt 1 view .LVU7415
 28190              	.LBB3685:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 28191              		.loc 1 548 3 view .LVU7416
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 28192              		.loc 1 548 9 is_stmt 0 view .LVU7417
 28193 00e4 0B22     		movs	r2, #11
 28194 00e6 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 28195              		.loc 1 549 3 is_stmt 1 view .LVU7418
 28196              	.LBE3685:
 28197              	.LBE3684:
 28198              	.LBE3683:
 28199              	.LBE3682:
 28200              		.loc 1 5903 1 is_stmt 0 view .LVU7419
 28201 00e8 03B0     		add	sp, sp, #12
 28202              		.cfi_remember_state
ARM GAS  /tmp/cccVhVyH.s 			page 718


 28203              		.cfi_def_cfa_offset 36
 28204              		@ sp needed
 28205 00ea BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 28206              	.LVL2190:
 28207              	.L2045:
 28208              		.cfi_restore_state
 28209              	.LBB3686:
 28210              	.LBB3681:
 218:src/xeq.c     **** }
 28211              		.loc 1 218 25 view .LVU7420
 28212 00ee DFF89CB0 		ldr	fp, .L2048+12
 28213 00f2 DBF80030 		ldr	r3, [fp]
 28214 00f6 33F81430 		ldrh	r3, [r3, r4, lsl #1]
 28215 00fa C3F30B03 		ubfx	r3, r3, #0, #12
 28216              	.LVL2191:
 218:src/xeq.c     **** }
 28217              		.loc 1 218 25 view .LVU7421
 28218              	.LBE3681:
 28219              	.LBE3686:
5874:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 28220              		.loc 1 5874 3 is_stmt 1 view .LVU7422
5874:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 28221              		.loc 1 5874 6 is_stmt 0 view .LVU7423
 28222 00fe 1C44     		add	r4, r4, r3
5875:src/xeq.c     **** 	}
 28223              		.loc 1 5875 16 view .LVU7424
 28224 0100 0021     		movs	r1, #0
 28225 0102 7020     		movs	r0, #112
5874:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 28226              		.loc 1 5874 6 view .LVU7425
 28227 0104 0193     		str	r3, [sp, #4]
 28228 0106 A4B2     		uxth	r4, r4
 28229              	.LVL2192:
5875:src/xeq.c     **** 	}
 28230              		.loc 1 5875 3 is_stmt 1 view .LVU7426
5875:src/xeq.c     **** 	}
 28231              		.loc 1 5875 16 is_stmt 0 view .LVU7427
 28232 0108 FFF7FEFF 		bl	flag_word
 28233              	.LVL2193:
5879:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 28234              		.loc 1 5879 10 view .LVU7428
 28235 010c 1C4A     		ldr	r2, .L2048
5875:src/xeq.c     **** 	}
 28236              		.loc 1 5875 13 view .LVU7429
 28237 010e 0788     		ldrh	r7, [r0]
 28238              	.LVL2194:
5878:src/xeq.c     **** 	if (-sp > RetStkSize) {
 28239              		.loc 1 5878 2 is_stmt 1 view .LVU7430
5879:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 28240              		.loc 1 5879 5 is_stmt 0 view .LVU7431
 28241 0110 1268     		ldr	r2, [r2]
 28242 0112 019B     		ldr	r3, [sp, #4]
5878:src/xeq.c     **** 	if (-sp > RetStkSize) {
 28243              		.loc 1 5878 5 view .LVU7432
 28244 0114 A4EB0904 		sub	r4, r4, r9
 28245              	.LVL2195:
5878:src/xeq.c     **** 	if (-sp > RetStkSize) {
ARM GAS  /tmp/cccVhVyH.s 			page 719


 28246              		.loc 1 5878 5 view .LVU7433
 28247 0118 26B2     		sxth	r6, r4
 28248              	.LVL2196:
5879:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 28249              		.loc 1 5879 2 is_stmt 1 view .LVU7434
5879:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 28250              		.loc 1 5879 6 is_stmt 0 view .LVU7435
 28251 011a 7142     		rsbs	r1, r6, #0
5879:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 28252              		.loc 1 5879 5 view .LVU7436
 28253 011c 9142     		cmp	r1, r2
5878:src/xeq.c     **** 	if (-sp > RetStkSize) {
 28254              		.loc 1 5878 5 view .LVU7437
 28255 011e A4B2     		uxth	r4, r4
5879:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 28256              		.loc 1 5879 5 view .LVU7438
 28257 0120 DCDC     		bgt	.L2036
5883:src/xeq.c     **** 		// move previous contents to new destination
 28258              		.loc 1 5883 2 is_stmt 1 view .LVU7439
5883:src/xeq.c     **** 		// move previous contents to new destination
 28259              		.loc 1 5883 5 is_stmt 0 view .LVU7440
 28260 0122 3BB3     		cbz	r3, .L2047
 28261              	.LBB3687:
5885:src/xeq.c     **** 		if (size > old_size) {
 28262              		.loc 1 5885 3 is_stmt 1 view .LVU7441
5886:src/xeq.c     **** 			n = old_size;
 28263              		.loc 1 5886 3 view .LVU7442
5894:src/xeq.c     **** 	}
 28264              		.loc 1 5894 31 is_stmt 0 view .LVU7443
 28265 0124 D8F80020 		ldr	r2, [r8]
5894:src/xeq.c     **** 	}
 28266              		.loc 1 5894 3 view .LVU7444
 28267 0128 DBF80000 		ldr	r0, [fp]
5894:src/xeq.c     **** 	}
 28268              		.loc 1 5894 31 view .LVU7445
 28269 012c B2F8DE17 		ldrh	r1, [r2, #2014]
 28270 0130 0193     		str	r3, [sp, #4]
 28271              	.LVL2197:
5886:src/xeq.c     **** 			n = old_size;
 28272              		.loc 1 5886 6 view .LVU7446
 28273 0132 9D42     		cmp	r5, r3
5887:src/xeq.c     **** 			size -= old_size;
 28274              		.loc 1 5887 4 is_stmt 1 view .LVU7447
 28275              	.LVL2198:
5888:src/xeq.c     **** 		}
 28276              		.loc 1 5888 4 view .LVU7448
5888:src/xeq.c     **** 		}
 28277              		.loc 1 5888 9 is_stmt 0 view .LVU7449
 28278 0134 C4BF     		itt	gt
 28279 0136 ED1A     		subgt	r5, r5, r3
 28280              	.LVL2199:
5888:src/xeq.c     **** 		}
 28281              		.loc 1 5888 9 view .LVU7450
 28282 0138 4FEA450A 		lslgt	r10, r5, #1
5894:src/xeq.c     **** 	}
 28283              		.loc 1 5894 29 view .LVU7451
 28284 013c 41F34A11 		sbfx	r1, r1, #5, #11
ARM GAS  /tmp/cccVhVyH.s 			page 720


 28285 0140 C8BF     		it	gt
 28286 0142 1D46     		movgt	r5, r3
 28287              	.LVL2200:
5894:src/xeq.c     **** 	}
 28288              		.loc 1 5894 3 is_stmt 1 view .LVU7452
 28289 0144 00EB4101 		add	r1, r0, r1, lsl #1
 28290 0148 4FEA4502 		lsl	r2, r5, #1
 28291 014c 00EB4600 		add	r0, r0, r6, lsl #1
 28292 0150 D8BF     		it	le
 28293 0152 4FF0000A 		movle	r10, #0
 28294 0156 FFF7FEFF 		bl	xcopy
 28295              	.LVL2201:
5894:src/xeq.c     **** 	}
 28296              		.loc 1 5894 3 is_stmt 0 view .LVU7453
 28297 015a 019B     		ldr	r3, [sp, #4]
 28298 015c 3344     		add	r3, r3, r6
 28299 015e 5B00     		lsls	r3, r3, #1
5894:src/xeq.c     **** 	}
 28300              		.loc 1 5894 16 view .LVU7454
 28301 0160 7600     		lsls	r6, r6, #1
 28302              	.LVL2202:
5894:src/xeq.c     **** 	}
 28303              		.loc 1 5894 16 view .LVU7455
 28304 0162 8BE7     		b	.L2034
 28305              	.LVL2203:
 28306              	.L2046:
5894:src/xeq.c     **** 	}
 28307              		.loc 1 5894 16 view .LVU7456
 28308 0164 7600     		lsls	r6, r6, #1
 28309              	.LVL2204:
5894:src/xeq.c     **** 	}
 28310              		.loc 1 5894 16 view .LVU7457
 28311              	.LBE3687:
5875:src/xeq.c     **** 	}
 28312              		.loc 1 5875 13 view .LVU7458
 28313 0166 0788     		ldrh	r7, [r0]
 28314 0168 DFF820B0 		ldr	fp, .L2048+12
 28315 016c 4FEA450A 		lsl	r10, r5, #1
 28316 0170 3346     		mov	r3, r6
 28317 0172 83E7     		b	.L2034
 28318              	.LVL2205:
 28319              	.L2047:
5875:src/xeq.c     **** 	}
 28320              		.loc 1 5875 13 view .LVU7459
 28321 0174 7600     		lsls	r6, r6, #1
 28322              	.LVL2206:
5875:src/xeq.c     **** 	}
 28323              		.loc 1 5875 13 view .LVU7460
 28324 0176 4FEA450A 		lsl	r10, r5, #1
5883:src/xeq.c     **** 		// move previous contents to new destination
 28325              		.loc 1 5883 5 view .LVU7461
 28326 017a 3346     		mov	r3, r6
 28327              	.LVL2207:
5883:src/xeq.c     **** 		// move previous contents to new destination
 28328              		.loc 1 5883 5 view .LVU7462
 28329 017c 7EE7     		b	.L2034
 28330              	.L2049:
ARM GAS  /tmp/cccVhVyH.s 			page 721


 28331 017e 00BF     		.align	2
 28332              	.L2048:
 28333 0180 00000000 		.word	RetStkSize
 28334 0184 00000000 		.word	Error
 28335 0188 00000000 		.word	main_ram
 28336 018c 00000000 		.word	RetStk
 28337              		.cfi_endproc
 28338              	.LFE270:
 28340              		.section	.text.cmdxout,"ax",%progbits
 28341              		.align	1
 28342              		.p2align 2,,3
 28343              		.global	cmdxout
 28344              		.syntax unified
 28345              		.thumb
 28346              		.thumb_func
 28347              		.fpu fpv4-sp-d16
 28349              	cmdxout:
 28350              	.LVL2208:
 28351              	.LFB272:
5904:src/xeq.c     **** 
5905:src/xeq.c     **** 
5906:src/xeq.c     **** /*
5907:src/xeq.c     ****  *  xIN: Setup an environment for XROM based math routines:
5908:src/xeq.c     ****  *
5909:src/xeq.c     ****  *  - 12 Private double precision stack & special registers X to K
5910:src/xeq.c     ****  *  - private return stack for local flags & registers
5911:src/xeq.c     ****  *  - 6 system flags
5912:src/xeq.c     ****  *
5913:src/xeq.c     ****  *  Argument:
5914:src/xeq.c     ****  *      noLocals - bit 7
5915:src/xeq.c     ****  *      out      - bits 4..5
5916:src/xeq.c     ****  *      in       - bits 2..4		
5917:src/xeq.c     ****  *      setLastX - bit 1
5918:src/xeq.c     ****  *      complex  - bit 0
5919:src/xeq.c     ****  *
5920:src/xeq.c     ****  *  Local flags:
5921:src/xeq.c     ****  *      .00 to .09 are free for general use.
5922:src/xeq.c     ****  *	.10 - stack_depth as previously set by user, don't touch it!
5923:src/xeq.c     ****  *	.11 - mode_double as previously set by user, don't touch it!
5924:src/xeq.c     ****  *      .12 - complex, from argument, can be modified.
5925:src/xeq.c     ****  *	.13 - setLastX, from argumment, can be modified.
5926:src/xeq.c     ****  *	.14 - state_lift as desired on exit, set to 1 by default, can be modified.
5927:src/xeq.c     ****  *      .15 - reserved, indicates that xIN is active, set to 1, don't touch it!
5928:src/xeq.c     ****  *
5929:src/xeq.c     ****  *  If the call is repeated only the argument values are reevaluated.
5930:src/xeq.c     ****  */
5931:src/xeq.c     **** void cmdxin(unsigned int arg, enum rarg op) {
5932:src/xeq.c     **** 
5933:src/xeq.c     **** 	int i;
5934:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5935:src/xeq.c     **** 	REGISTER *previousLocals = NULL;
5936:src/xeq.c     **** 	unsigned short previousFlags = 0;
5937:src/xeq.c     **** 	int num_locals = 0;
5938:src/xeq.c     **** #endif
5939:src/xeq.c     **** #ifndef REALBUILD
5940:src/xeq.c     **** 	/* This should never happen in a real build but it causes havoc writing
5941:src/xeq.c     **** 	 * xrom code, so trap it here.
ARM GAS  /tmp/cccVhVyH.s 			page 722


5942:src/xeq.c     **** 	 */
5943:src/xeq.c     **** 	if (XromFlags.xIN) {
5944:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5945:src/xeq.c     **** 		return;
5946:src/xeq.c     **** 	}
5947:src/xeq.c     **** #endif
5948:src/xeq.c     **** 
5949:src/xeq.c     **** 	// Setup the XromLocal and XromParams structures in volatile RAM
5950:src/xeq.c     **** 	// fill with 0
5951:src/xeq.c     **** 	xset(&XromLocal, 0, sizeof(XromLocal));
5952:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
5953:src/xeq.c     **** 
5954:src/xeq.c     **** 	// Flags
5955:src/xeq.c     **** 	XromFlags.state_lift_in = get_lift();
5956:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
5957:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
5958:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
5959:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
5960:src/xeq.c     **** 	XromFlags.state_lift = 1;
5961:src/xeq.c     **** 	XromFlags.xIN = 1;
5962:src/xeq.c     **** 
5963:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5964:src/xeq.c     **** 	// Save pointers to original local data
5965:src/xeq.c     **** 	if ((arg & 0x80) != 0 && LocalRegs < 0) {
5966:src/xeq.c     **** 		XromFlags.copyLocals = 1;
5967:src/xeq.c     **** 		previousFlags = *flag_word(LOCAL_FLAG_BASE, NULL);
5968:src/xeq.c     **** 		previousLocals = get_reg_n(LOCAL_REG_BASE);
5969:src/xeq.c     **** 		num_locals = local_regs();
5970:src/xeq.c     **** 	}
5971:src/xeq.c     **** #endif
5972:src/xeq.c     **** 	// Establish local return stack
5973:src/xeq.c     **** 	XromUserRetStk = RetStk;
5974:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
5975:src/xeq.c     **** 
5976:src/xeq.c     **** 	RetStk = XromRetStk;
5977:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5978:src/xeq.c     **** 	RetStkPtr = 0;			// Locals will be allocated later
5979:src/xeq.c     **** #else
5980:src/xeq.c     **** 	LocalRegs = RetStkPtr = -2;	// Allocate just the local flags
5981:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
5982:src/xeq.c     **** #endif
5983:src/xeq.c     **** 
5984:src/xeq.c     **** 	// Parse the argument into fields
5985:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5986:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x20) != 0;
5987:src/xeq.c     **** 	XromFlags.complex = (arg & 0x40) != 0;
5988:src/xeq.c     **** 	XromIn = (arg & 0x1f) % 5;
5989:src/xeq.c     **** 	XromOut = (arg & 0x1f) / 5;
5990:src/xeq.c     **** #else
5991:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x40) != 0;
5992:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
5993:src/xeq.c     **** 	XromIn = (arg & 0x7);
5994:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
5995:src/xeq.c     **** #endif
5996:src/xeq.c     **** 	if (XromFlags.complex) {
5997:src/xeq.c     **** 		// Complex arguments are always in pairs
5998:src/xeq.c     **** 		XromIn <<= 1;
ARM GAS  /tmp/cccVhVyH.s 			page 723


5999:src/xeq.c     **** 		XromOut <<= 1;
6000:src/xeq.c     **** 	}
6001:src/xeq.c     **** 
6002:src/xeq.c     ****         UState.rounding_mode = 0;
6003:src/xeq.c     **** 
6004:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6005:src/xeq.c     **** 	// Allocate the local frame
6006:src/xeq.c     **** 	LocalRegs = 0;
6007:src/xeq.c     **** 	UState.mode_double = 1;		// Needed to allocate enough registers
6008:src/xeq.c     **** 	cmdlocr(num_locals, RARG_LOCR);
6009:src/xeq.c     **** 	if (XromFlags.copyLocals)
6010:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = previousFlags;
6011:src/xeq.c     **** #endif
6012:src/xeq.c     **** 	// Switch to double precision mode
6013:src/xeq.c     **** 	if (XromFlags.mode_int) {
6014:src/xeq.c     **** 		// Convert integers to decimal128
6015:src/xeq.c     **** #ifndef ENABLE_COPYLOCALS
6016:src/xeq.c     **** 		UState.mode_double = 1;
6017:src/xeq.c     **** #endif
6018:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
6019:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
6020:src/xeq.c     **** 	}
6021:src/xeq.c     **** 	else if (XromFlags.mode_double) {
6022:src/xeq.c     **** 		// No conversion necessary
6023:src/xeq.c     **** 		xcopy(XromStack, StackBase, sizeof(XromStack));
6024:src/xeq.c     **** 		StackBase = XromStack;
6025:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6026:src/xeq.c     **** 		if (XromFlags.copyLocals)
6027:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), previousLocals, num_locals);
6028:src/xeq.c     **** #endif
6029:src/xeq.c     **** 	}
6030:src/xeq.c     **** 	else {
6031:src/xeq.c     **** 		// Convert decimal64 to decinal128
6032:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6033:src/xeq.c     **** 		UState.mode_double = 0;		// This was the original state before xIN
6034:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
6035:src/xeq.c     **** 		if (XromFlags.copyLocals) {
6036:src/xeq.c     **** 			decimal64  *src  = &(previousLocals->s);
6037:src/xeq.c     **** 			decimal128 *dest = &(get_reg_n(LOCAL_REG_BASE)->d);
6038:src/xeq.c     **** 			while (num_locals--)
6039:src/xeq.c     **** 				packed128_from_packed(dest++, src++);
6040:src/xeq.c     **** 		}
6041:src/xeq.c     **** #else
6042:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
6043:src/xeq.c     **** #endif
6044:src/xeq.c     **** 	}
6045:src/xeq.c     **** 
6046:src/xeq.c     **** 	// Set stack size to 8 and turn on stack_lift
6047:src/xeq.c     **** 	set_lift();
6048:src/xeq.c     **** 	UState.stack_depth = 1;
6049:src/xeq.c     **** 
6050:src/xeq.c     **** 	// check for any NaNs in input
6051:src/xeq.c     **** 	for (i = 0; i < XromIn; ++i) {
6052:src/xeq.c     **** 		decNumber x;
6053:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
6054:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
6055:src/xeq.c     **** 			// domain error
ARM GAS  /tmp/cccVhVyH.s 			page 724


6056:src/xeq.c     **** 			if (get_user_flag(NAN_FLAG)) {
6057:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
6058:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
6059:src/xeq.c     **** 				// Early exit of routine
6060:src/xeq.c     **** 				cmdxout(0, RARG_XROM_OUT);
6061:src/xeq.c     **** 			} 
6062:src/xeq.c     **** 			else
6063:src/xeq.c     **** 				report_err(ERR_DOMAIN);	// this will do all the cleanup
6064:src/xeq.c     **** 			return;
6065:src/xeq.c     **** 		}
6066:src/xeq.c     **** 	}
6067:src/xeq.c     **** }
6068:src/xeq.c     **** 
6069:src/xeq.c     **** /*
6070:src/xeq.c     ****  *  xOUT: Return from an XROM routine that has previously called xIN
6071:src/xeq.c     ****  *  Argument:
6072:src/xeq.c     ****  *     bit 0 set - do a RTN+1
6073:src/xeq.c     ****  *     bit 1 set - leave I alone even with a complex result
6074:src/xeq.c     ****  */
6075:src/xeq.c     **** void cmdxout(unsigned int arg, enum rarg op) {
 28352              		.loc 1 6075 46 is_stmt 1 view -0
 28353              		.cfi_startproc
 28354              		@ args = 0, pretend = 0, frame = 56
 28355              		@ frame_needed = 0, uses_anonymous_args = 0
6076:src/xeq.c     **** 	int i, dbl, intm;
 28356              		.loc 1 6076 2 view .LVU7464
6077:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6078:src/xeq.c     **** 	unsigned short flags = *flag_word(LOCAL_FLAG_BASE, NULL);
6079:src/xeq.c     **** 	REGISTER *locals = get_reg_n(LOCAL_REG_BASE);
6080:src/xeq.c     **** 	int num_locals = local_regs();
6081:src/xeq.c     **** #endif
6082:src/xeq.c     **** #ifndef REALBUILD
6083:src/xeq.c     **** 	// shouldn't happen in final build
6084:src/xeq.c     **** 	if (! XromFlags.xIN) {
 28357              		.loc 1 6084 2 view .LVU7465
6075:src/xeq.c     **** 	int i, dbl, intm;
 28358              		.loc 1 6075 46 is_stmt 0 view .LVU7466
 28359 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 28360              		.cfi_def_cfa_offset 36
 28361              		.cfi_offset 4, -36
 28362              		.cfi_offset 5, -32
 28363              		.cfi_offset 6, -28
 28364              		.cfi_offset 7, -24
 28365              		.cfi_offset 8, -20
 28366              		.cfi_offset 9, -16
 28367              		.cfi_offset 10, -12
 28368              		.cfi_offset 11, -8
 28369              		.cfi_offset 14, -4
 28370              		.loc 1 6084 6 view .LVU7467
 28371 0004 794C     		ldr	r4, .L2096
 28372              		.loc 1 6084 5 view .LVU7468
 28373 0006 94F90130 		ldrsb	r3, [r4, #1]
 28374 000a 002B     		cmp	r3, #0
6075:src/xeq.c     **** 	int i, dbl, intm;
 28375              		.loc 1 6075 46 view .LVU7469
 28376 000c 8FB0     		sub	sp, sp, #60
 28377              		.cfi_def_cfa_offset 96
ARM GAS  /tmp/cccVhVyH.s 			page 725


 28378              		.loc 1 6084 5 view .LVU7470
 28379 000e 07DB     		blt	.L2051
6085:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28380              		.loc 1 6085 3 is_stmt 1 view .LVU7471
 28381              	.LVL2209:
 28382              	.LBB3711:
 28383              	.LBI3711:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28384              		.loc 1 546 5 view .LVU7472
 28385              	.LBB3712:
 547:src/xeq.c     **** 		Error = e;
 28386              		.loc 1 547 2 view .LVU7473
 547:src/xeq.c     **** 		Error = e;
 28387              		.loc 1 547 12 is_stmt 0 view .LVU7474
 28388 0010 774B     		ldr	r3, .L2096+4
 547:src/xeq.c     **** 		Error = e;
 28389              		.loc 1 547 5 view .LVU7475
 28390 0012 1A68     		ldr	r2, [r3]
 28391 0014 0AB9     		cbnz	r2, .L2050
 28392              	.LVL2210:
 28393              	.LBB3713:
 28394              	.LBI3713:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28395              		.loc 1 546 5 is_stmt 1 view .LVU7476
 28396              	.LBB3714:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 28397              		.loc 1 548 3 view .LVU7477
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 28398              		.loc 1 548 9 is_stmt 0 view .LVU7478
 28399 0016 0722     		movs	r2, #7
 28400 0018 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 28401              		.loc 1 549 3 is_stmt 1 view .LVU7479
 28402              	.LVL2211:
 28403              	.L2050:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 28404              		.loc 1 549 3 is_stmt 0 view .LVU7480
 28405              	.LBE3714:
 28406              	.LBE3713:
 28407              	.LBE3712:
 28408              	.LBE3711:
6086:src/xeq.c     **** 		return;
6087:src/xeq.c     **** 	}
6088:src/xeq.c     **** #endif
6089:src/xeq.c     **** 	// End special handling
6090:src/xeq.c     **** 	XromFlags.xIN = 0;
6091:src/xeq.c     **** 
6092:src/xeq.c     **** 	// Restore the global return stack
6093:src/xeq.c     **** 	RetStk = XromUserRetStk;
6094:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
6095:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
6096:src/xeq.c     **** 
6097:src/xeq.c     **** 	// RTN or RTN+1 depending on bit 0 of argument
6098:src/xeq.c     **** 	do_rtn(arg & 1);
6099:src/xeq.c     **** 
6100:src/xeq.c     **** 	// Switch back to user stack settings
6101:src/xeq.c     **** 	dbl = UState.mode_double = XromFlags.mode_double;
ARM GAS  /tmp/cccVhVyH.s 			page 726


6102:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
6103:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
6104:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
6105:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
6106:src/xeq.c     **** 
6107:src/xeq.c     **** 	// Last X handling and complex flag
6108:src/xeq.c     **** 	if (XromFlags.setLastX) {
6109:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
6110:src/xeq.c     **** 			setlastXY();
6111:src/xeq.c     **** 		else
6112:src/xeq.c     **** 			setlastX();
6113:src/xeq.c     **** 	}
6114:src/xeq.c     **** 
6115:src/xeq.c     **** 	// Move the stack according to the in/out fields
6116:src/xeq.c     **** 	i = (int) XromOut - (int) XromIn;
6117:src/xeq.c     **** 	if (XromFlags.complex) {
6118:src/xeq.c     **** 		set_was_complex();
6119:src/xeq.c     **** 		while (i < 0) {
6120:src/xeq.c     **** 			// different stack handling in complex mode
6121:src/xeq.c     **** 			// more to consume then to push back
6122:src/xeq.c     **** 			lower2();
6123:src/xeq.c     **** 			i += 2;
6124:src/xeq.c     **** 		}
6125:src/xeq.c     **** 	}
6126:src/xeq.c     **** 	else {
6127:src/xeq.c     **** 		while (i < 0) {
6128:src/xeq.c     **** 			// more to consume then to push back
6129:src/xeq.c     **** 			lower();	
6130:src/xeq.c     **** 			++i;
6131:src/xeq.c     **** 		}
6132:src/xeq.c     **** 	}
6133:src/xeq.c     **** 	if (i > 0) {
6134:src/xeq.c     **** 		// more to push back then to consume
6135:src/xeq.c     **** 		if (! XromFlags.state_lift_in)
6136:src/xeq.c     **** 			--i;
6137:src/xeq.c     **** 		while (i > 0) {
6138:src/xeq.c     **** 			lift();
6139:src/xeq.c     **** 			--i;
6140:src/xeq.c     **** 		}
6141:src/xeq.c     **** 	}
6142:src/xeq.c     **** 	State2.state_lift = XromFlags.state_lift;
6143:src/xeq.c     **** 
6144:src/xeq.c     **** 	// Copy results
6145:src/xeq.c     **** 	i = XromOut;
6146:src/xeq.c     **** 	if (intm) {
6147:src/xeq.c     **** 		while (i--) {
6148:src/xeq.c     **** 			decNumber r;
6149:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
6150:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
6151:src/xeq.c     **** 		}
6152:src/xeq.c     **** 	}
6153:src/xeq.c     **** 	else if (dbl) {
6154:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
6155:src/xeq.c     **** 	}
6156:src/xeq.c     **** 	else {
6157:src/xeq.c     **** 		while (i--)
6158:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
ARM GAS  /tmp/cccVhVyH.s 			page 727


6159:src/xeq.c     **** 	}
6160:src/xeq.c     **** 
6161:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6162:src/xeq.c     **** 	// Copy back local data
6163:src/xeq.c     **** 	if (XromFlags.copyLocals) {
6164:src/xeq.c     **** 		i = local_regs();
6165:src/xeq.c     **** 		num_locals = i < num_locals ? i : num_locals; 
6166:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = flags;
6167:src/xeq.c     **** 		if (intm) {
6168:src/xeq.c     **** 			// not used
6169:src/xeq.c     **** 		}
6170:src/xeq.c     **** 		else if (dbl) {
6171:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), locals, num_locals);
6172:src/xeq.c     **** 		}
6173:src/xeq.c     **** 		else {
6174:src/xeq.c     **** 			decimal64  *dest = &(get_reg_n(LOCAL_REG_BASE)->s);
6175:src/xeq.c     **** 			decimal128 *src  = &(locals->d);
6176:src/xeq.c     **** 			while (num_locals--)
6177:src/xeq.c     **** 				packed_from_packed128(dest++, src++);
6178:src/xeq.c     **** 		}
6179:src/xeq.c     **** 	}
6180:src/xeq.c     **** #endif
6181:src/xeq.c     **** }
 28409              		.loc 1 6181 1 view .LVU7481
 28410 001a 0FB0     		add	sp, sp, #60
 28411              		.cfi_remember_state
 28412              		.cfi_def_cfa_offset 36
 28413              		@ sp needed
 28414 001c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 28415              	.LVL2212:
 28416              	.L2051:
 28417              		.cfi_restore_state
 28418              	.LBB3715:
 28419              	.LBB3716:
6090:src/xeq.c     **** 
 28420              		.loc 1 6090 16 view .LVU7482
 28421 0020 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6094:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 28422              		.loc 1 6094 2 view .LVU7483
 28423 0022 744F     		ldr	r7, .L2096+8
6093:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 28424              		.loc 1 6093 9 view .LVU7484
 28425 0024 A668     		ldr	r6, [r4, #8]
6094:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 28426              		.loc 1 6094 2 view .LVU7485
 28427 0026 3B68     		ldr	r3, [r7]
6095:src/xeq.c     **** 
 28428              		.loc 1 6095 12 view .LVU7486
 28429 0028 7349     		ldr	r1, .L2096+12
 28430              	.LVL2213:
6105:src/xeq.c     **** 
 28431              		.loc 1 6105 12 view .LVU7487
 28432 002a DFF8E0A1 		ldr	r10, .L2096+32
6095:src/xeq.c     **** 
 28433              		.loc 1 6095 12 view .LVU7488
 28434 002e 0968     		ldr	r1, [r1]
 28435 0030 0546     		mov	r5, r0
ARM GAS  /tmp/cccVhVyH.s 			page 728


 28436              	.LVL2214:
6095:src/xeq.c     **** 
 28437              		.loc 1 6095 12 view .LVU7489
 28438              	.LBE3716:
 28439              	.LBI3715:
6075:src/xeq.c     **** 	int i, dbl, intm;
 28440              		.loc 1 6075 6 is_stmt 1 view .LVU7490
 28441              	.LBB3745:
6090:src/xeq.c     **** 
 28442              		.loc 1 6090 2 view .LVU7491
6093:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 28443              		.loc 1 6093 9 is_stmt 0 view .LVU7492
 28444 0032 7248     		ldr	r0, .L2096+16
 28445              	.LVL2215:
6090:src/xeq.c     **** 
 28446              		.loc 1 6090 16 view .LVU7493
 28447 0034 6FF3C712 		bfc	r2, #7, #1
6093:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 28448              		.loc 1 6093 9 view .LVU7494
 28449 0038 0660     		str	r6, [r0]
6090:src/xeq.c     **** 
 28450              		.loc 1 6090 16 view .LVU7495
 28451 003a 6270     		strb	r2, [r4, #1]
6093:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 28452              		.loc 1 6093 2 is_stmt 1 view .LVU7496
6094:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 28453              		.loc 1 6094 2 view .LVU7497
6095:src/xeq.c     **** 
 28454              		.loc 1 6095 12 is_stmt 0 view .LVU7498
 28455 003c B3F8DE27 		ldrh	r2, [r3, #2014]
6094:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 28456              		.loc 1 6094 12 view .LVU7499
 28457 0040 A089     		ldrh	r0, [r4, #12]
 28458 0042 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
6095:src/xeq.c     **** 
 28459              		.loc 1 6095 2 is_stmt 1 view .LVU7500
6095:src/xeq.c     **** 
 28460              		.loc 1 6095 12 is_stmt 0 view .LVU7501
 28461 0046 61F34F12 		bfi	r2, r1, #5, #11
 28462 004a A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
6098:src/xeq.c     **** 
 28463              		.loc 1 6098 2 is_stmt 1 view .LVU7502
 28464 004e 05F00100 		and	r0, r5, #1
 28465 0052 FFF7FEFF 		bl	do_rtn
 28466              	.LVL2216:
6101:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 28467              		.loc 1 6101 2 view .LVU7503
6101:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 28468              		.loc 1 6101 38 is_stmt 0 view .LVU7504
 28469 0056 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6101:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 28470              		.loc 1 6101 8 view .LVU7505
 28471 0058 3868     		ldr	r0, [r7]
6103:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 28472              		.loc 1 6103 41 view .LVU7506
 28473 005a A678     		ldrb	r6, [r4, #2]	@ zero_extendqisi2
6102:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
ARM GAS  /tmp/cccVhVyH.s 			page 729


 28474              		.loc 1 6102 21 view .LVU7507
 28475 005c D0F8E827 		ldr	r2, [r0, #2024]
6101:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 28476              		.loc 1 6101 38 view .LVU7508
 28477 0060 C3F3C009 		ubfx	r9, r3, #3, #1
 28478              	.LVL2217:
6102:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 28479              		.loc 1 6102 2 is_stmt 1 view .LVU7509
6102:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 28480              		.loc 1 6102 32 is_stmt 0 view .LVU7510
 28481 0064 03F00108 		and	r8, r3, #1
 28482              	.LVL2218:
6103:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 28483              		.loc 1 6103 9 is_stmt 1 view .LVU7511
6104:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 28484              		.loc 1 6104 2 view .LVU7512
6102:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 28485              		.loc 1 6102 21 is_stmt 0 view .LVU7513
 28486 0068 C3F38001 		ubfx	r1, r3, #2, #1
 28487 006c 48EA8933 		orr	r3, r8, r9, lsl #14
 28488              	.LVL2219:
6102:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 28489              		.loc 1 6102 21 view .LVU7514
 28490 0070 43EAC143 		orr	r3, r3, r1, lsl #19
 28491 0074 6249     		ldr	r1, .L2096+20
 28492 0076 06F00706 		and	r6, r6, #7
 28493 007a 1140     		ands	r1, r1, r2
 28494 007c 43EA0673 		orr	r3, r3, r6, lsl #28
 28495 0080 0B43     		orrs	r3, r3, r1
 28496 0082 C0F8E837 		str	r3, [r0, #2024]
6105:src/xeq.c     **** 
 28497              		.loc 1 6105 2 is_stmt 1 view .LVU7515
6105:src/xeq.c     **** 
 28498              		.loc 1 6105 14 is_stmt 0 view .LVU7516
 28499 0086 6420     		movs	r0, #100
 28500 0088 FFF7FEFF 		bl	get_reg_n
 28501              	.LVL2220:
6108:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 28502              		.loc 1 6108 6 view .LVU7517
 28503 008c 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6105:src/xeq.c     **** 
 28504              		.loc 1 6105 12 view .LVU7518
 28505 008e CAF80000 		str	r0, [r10]
6108:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 28506              		.loc 1 6108 2 is_stmt 1 view .LVU7519
6108:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 28507              		.loc 1 6108 5 is_stmt 0 view .LVU7520
 28508 0092 9606     		lsls	r6, r2, #26
 28509 0094 09D5     		bpl	.L2054
6109:src/xeq.c     **** 			setlastXY();
 28510              		.loc 1 6109 3 is_stmt 1 view .LVU7521
6109:src/xeq.c     **** 			setlastXY();
 28511              		.loc 1 6109 6 is_stmt 0 view .LVU7522
 28512 0096 D006     		lsls	r0, r2, #27
 28513 0098 02D5     		bpl	.L2055
6109:src/xeq.c     **** 			setlastXY();
 28514              		.loc 1 6109 25 view .LVU7523
ARM GAS  /tmp/cccVhVyH.s 			page 730


 28515 009a A907     		lsls	r1, r5, #30
 28516 009c 40F19F80 		bpl	.L2092
 28517              	.L2055:
6112:src/xeq.c     **** 	}
 28518              		.loc 1 6112 4 is_stmt 1 view .LVU7524
 28519              	.LBB3717:
 28520              	.LBI3717:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 28521              		.loc 1 792 6 view .LVU7525
 28522              	.LBB3718:
 793:src/xeq.c     **** }
 28523              		.loc 1 793 2 view .LVU7526
 28524 00a0 6421     		movs	r1, #100
 28525 00a2 6C20     		movs	r0, #108
 28526 00a4 FFF7FEFF 		bl	copyreg_n
 28527              	.LVL2221:
 28528 00a8 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 28529              	.L2054:
 28530              	.LBE3718:
 28531              	.LBE3717:
6116:src/xeq.c     **** 	if (XromFlags.complex) {
 28532              		.loc 1 6116 2 view .LVU7527
6116:src/xeq.c     **** 	if (XromFlags.complex) {
 28533              		.loc 1 6116 6 is_stmt 0 view .LVU7528
 28534 00aa 94F805B0 		ldrb	fp, [r4, #5]	@ zero_extendqisi2
6116:src/xeq.c     **** 	if (XromFlags.complex) {
 28535              		.loc 1 6116 22 view .LVU7529
 28536 00ae 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
6117:src/xeq.c     **** 		set_was_complex();
 28537              		.loc 1 6117 5 view .LVU7530
 28538 00b0 D206     		lsls	r2, r2, #27
6116:src/xeq.c     **** 	if (XromFlags.complex) {
 28539              		.loc 1 6116 4 view .LVU7531
 28540 00b2 ABEB030B 		sub	fp, fp, r3
 28541              	.LVL2222:
6117:src/xeq.c     **** 		set_was_complex();
 28542              		.loc 1 6117 2 is_stmt 1 view .LVU7532
6117:src/xeq.c     **** 		set_was_complex();
 28543              		.loc 1 6117 5 is_stmt 0 view .LVU7533
 28544 00b6 2BD5     		bpl	.L2093
6118:src/xeq.c     **** 		while (i < 0) {
 28545              		.loc 1 6118 3 is_stmt 1 view .LVU7534
 28546              	.LBB3719:
 28547              	.LBI3719:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 28548              		.loc 1 539 13 view .LVU7535
 28549              	.LBB3720:
 540:src/xeq.c     **** }
 28550              		.loc 1 540 2 view .LVU7536
 540:src/xeq.c     **** }
 28551              		.loc 1 540 20 is_stmt 0 view .LVU7537
 28552 00b8 524E     		ldr	r6, .L2096+24
 28553 00ba 327D     		ldrb	r2, [r6, #20]	@ zero_extendqisi2
 28554 00bc 0121     		movs	r1, #1
 28555 00be 61F38712 		bfi	r2, r1, #6, #2
 28556              	.LBE3720:
 28557              	.LBE3719:
ARM GAS  /tmp/cccVhVyH.s 			page 731


6119:src/xeq.c     **** 			// different stack handling in complex mode
 28558              		.loc 1 6119 9 view .LVU7538
 28559 00c2 BBF1000F 		cmp	fp, #0
 28560              	.LBB3722:
 28561              	.LBB3721:
 540:src/xeq.c     **** }
 28562              		.loc 1 540 20 view .LVU7539
 28563 00c6 3275     		strb	r2, [r6, #20]
 540:src/xeq.c     **** }
 28564              		.loc 1 540 20 view .LVU7540
 28565              	.LBE3721:
 28566              	.LBE3722:
6119:src/xeq.c     **** 			// different stack handling in complex mode
 28567              		.loc 1 6119 9 is_stmt 1 view .LVU7541
 28568 00c8 13DA     		bge	.L2058
 28569 00ca 6FEA0B03 		mvn	r3, fp
 28570 00ce 23F00105 		bic	r5, r3, #1
 28571              	.LVL2223:
6119:src/xeq.c     **** 			// different stack handling in complex mode
 28572              		.loc 1 6119 9 is_stmt 0 view .LVU7542
 28573 00d2 0093     		str	r3, [sp]
 28574 00d4 0BF10203 		add	r3, fp, #2
 28575 00d8 0193     		str	r3, [sp, #4]
 28576 00da 1D44     		add	r5, r5, r3
 28577              	.L2059:
6122:src/xeq.c     **** 			i += 2;
 28578              		.loc 1 6122 4 is_stmt 1 view .LVU7543
6123:src/xeq.c     **** 		}
 28579              		.loc 1 6123 6 is_stmt 0 view .LVU7544
 28580 00dc 0BF1020B 		add	fp, fp, #2
 28581              	.LVL2224:
6122:src/xeq.c     **** 			i += 2;
 28582              		.loc 1 6122 4 view .LVU7545
 28583 00e0 FFF7FEFF 		bl	lower2
 28584              	.LVL2225:
6123:src/xeq.c     **** 		}
 28585              		.loc 1 6123 4 is_stmt 1 view .LVU7546
6119:src/xeq.c     **** 			// different stack handling in complex mode
 28586              		.loc 1 6119 9 view .LVU7547
 28587 00e4 AB45     		cmp	fp, r5
 28588 00e6 F9D1     		bne	.L2059
 28589 00e8 009B     		ldr	r3, [sp]
 28590 00ea 23F0010B 		bic	fp, r3, #1
 28591              	.LVL2226:
6119:src/xeq.c     **** 			// different stack handling in complex mode
 28592              		.loc 1 6119 9 is_stmt 0 view .LVU7548
 28593 00ee 019B     		ldr	r3, [sp, #4]
 28594 00f0 9B44     		add	fp, fp, r3
 28595              	.L2058:
 28596              	.LVL2227:
6133:src/xeq.c     **** 		// more to push back then to consume
 28597              		.loc 1 6133 2 is_stmt 1 view .LVU7549
6133:src/xeq.c     **** 		// more to push back then to consume
 28598              		.loc 1 6133 5 is_stmt 0 view .LVU7550
 28599 00f2 BBF1000F 		cmp	fp, #0
 28600 00f6 14D0     		beq	.L2060
6135:src/xeq.c     **** 			--i;
ARM GAS  /tmp/cccVhVyH.s 			page 732


 28601              		.loc 1 6135 3 is_stmt 1 view .LVU7551
6135:src/xeq.c     **** 			--i;
 28602              		.loc 1 6135 7 is_stmt 0 view .LVU7552
 28603 00f8 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6135:src/xeq.c     **** 			--i;
 28604              		.loc 1 6135 6 view .LVU7553
 28605 00fa 9307     		lsls	r3, r2, #30
 28606 00fc 02D4     		bmi	.L2065
6136:src/xeq.c     **** 		while (i > 0) {
 28607              		.loc 1 6136 4 is_stmt 1 view .LVU7554
 28608              	.LVL2228:
6137:src/xeq.c     **** 			lift();
 28609              		.loc 1 6137 9 view .LVU7555
 28610 00fe BBF1010B 		subs	fp, fp, #1
 28611              	.LVL2229:
6137:src/xeq.c     **** 			lift();
 28612              		.loc 1 6137 9 is_stmt 0 view .LVU7556
 28613 0102 0ED0     		beq	.L2060
 28614              	.L2065:
6138:src/xeq.c     **** 			--i;
 28615              		.loc 1 6138 4 is_stmt 1 view .LVU7557
 28616 0104 FFF7FEFF 		bl	lift
 28617              	.LVL2230:
6139:src/xeq.c     **** 		}
 28618              		.loc 1 6139 4 view .LVU7558
6137:src/xeq.c     **** 			lift();
 28619              		.loc 1 6137 9 view .LVU7559
 28620 0108 BBF1010B 		subs	fp, fp, #1
 28621              	.LVL2231:
6137:src/xeq.c     **** 			lift();
 28622              		.loc 1 6137 9 is_stmt 0 view .LVU7560
 28623 010c FAD1     		bne	.L2065
 28624 010e 08E0     		b	.L2060
 28625              	.LVL2232:
 28626              	.L2093:
6127:src/xeq.c     **** 			// more to consume then to push back
 28627              		.loc 1 6127 9 is_stmt 1 view .LVU7561
 28628 0110 BBF1000F 		cmp	fp, #0
 28629 0114 67DA     		bge	.L2094
 28630              	.L2057:
6129:src/xeq.c     **** 			++i;
 28631              		.loc 1 6129 4 view .LVU7562
 28632 0116 FFF7FEFF 		bl	lower
 28633              	.LVL2233:
6130:src/xeq.c     **** 		}
 28634              		.loc 1 6130 4 view .LVU7563
6127:src/xeq.c     **** 			// more to consume then to push back
 28635              		.loc 1 6127 9 view .LVU7564
 28636 011a 1BF1010B 		adds	fp, fp, #1
 28637              	.LVL2234:
6127:src/xeq.c     **** 			// more to consume then to push back
 28638              		.loc 1 6127 9 is_stmt 0 view .LVU7565
 28639 011e FAD1     		bne	.L2057
 28640 0120 384E     		ldr	r6, .L2096+24
 28641              	.LVL2235:
 28642              	.L2060:
6142:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 733


 28643              		.loc 1 6142 2 is_stmt 1 view .LVU7566
6142:src/xeq.c     **** 
 28644              		.loc 1 6142 31 is_stmt 0 view .LVU7567
 28645 0122 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6142:src/xeq.c     **** 
 28646              		.loc 1 6142 20 view .LVU7568
 28647 0124 F27D     		ldrb	r2, [r6, #23]	@ zero_extendqisi2
6145:src/xeq.c     **** 	if (intm) {
 28648              		.loc 1 6145 4 view .LVU7569
 28649 0126 6479     		ldrb	r4, [r4, #5]	@ zero_extendqisi2
6142:src/xeq.c     **** 
 28650              		.loc 1 6142 31 view .LVU7570
 28651 0128 C3F38013 		ubfx	r3, r3, #6, #1
6142:src/xeq.c     **** 
 28652              		.loc 1 6142 20 view .LVU7571
 28653 012c 63F38612 		bfi	r2, r3, #6, #1
 28654 0130 F275     		strb	r2, [r6, #23]
6145:src/xeq.c     **** 	if (intm) {
 28655              		.loc 1 6145 2 is_stmt 1 view .LVU7572
 28656              	.LVL2236:
6146:src/xeq.c     **** 		while (i--) {
 28657              		.loc 1 6146 2 view .LVU7573
6146:src/xeq.c     **** 		while (i--) {
 28658              		.loc 1 6146 5 is_stmt 0 view .LVU7574
 28659 0132 B8F1000F 		cmp	r8, #0
 28660 0136 23D0     		beq	.L2095
6147:src/xeq.c     **** 			decNumber r;
 28661              		.loc 1 6147 9 is_stmt 1 view .LVU7575
6147:src/xeq.c     **** 			decNumber r;
 28662              		.loc 1 6147 11 is_stmt 0 view .LVU7576
 28663 0138 631E     		subs	r3, r4, #1
 28664              	.LVL2237:
6147:src/xeq.c     **** 			decNumber r;
 28665              		.loc 1 6147 9 view .LVU7577
 28666 013a 002C     		cmp	r4, #0
 28667 013c 3FF46DAF 		beq	.L2050
 28668 0140 314D     		ldr	r5, .L2096+28
 28669 0142 6334     		adds	r4, r4, #99
 28670 0144 05EB0315 		add	r5, r5, r3, lsl #4
 28671 0148 05AE     		add	r6, sp, #20
 28672              	.LVL2238:
 28673              	.L2067:
 28674              	.LBB3723:
6148:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
 28675              		.loc 1 6148 4 is_stmt 1 view .LVU7578
6149:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
 28676              		.loc 1 6149 4 view .LVU7579
 28677 014a 3146     		mov	r1, r6
 28678 014c 2846     		mov	r0, r5
 28679 014e FFF7FEFF 		bl	decimal128ToNumber
 28680              	.LVL2239:
6150:src/xeq.c     **** 		}
 28681              		.loc 1 6150 4 view .LVU7580
 28682 0152 3046     		mov	r0, r6
 28683 0154 FFF7FEFF 		bl	intResult
 28684              	.LVL2240:
6150:src/xeq.c     **** 		}
ARM GAS  /tmp/cccVhVyH.s 			page 734


 28685              		.loc 1 6150 4 is_stmt 0 view .LVU7581
 28686 0158 0246     		mov	r2, r0
 28687 015a 0B46     		mov	r3, r1
 28688              	.LBB3724:
 28689              	.LBB3725:
1426:src/xeq.c     **** }
 28690              		.loc 1 1426 8 view .LVU7582
 28691 015c 2046     		mov	r0, r4
 28692 015e CDE90223 		strd	r2, [sp, #8]
 28693              	.LVL2241:
1426:src/xeq.c     **** }
 28694              		.loc 1 1426 8 view .LVU7583
 28695              	.LBE3725:
 28696              	.LBI3724:
1425:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 28697              		.loc 1 1425 6 is_stmt 1 view .LVU7584
 28698              	.LBB3726:
1426:src/xeq.c     **** }
 28699              		.loc 1 1426 2 view .LVU7585
1426:src/xeq.c     **** }
 28700              		.loc 1 1426 8 is_stmt 0 view .LVU7586
 28701 0162 FFF7FEFF 		bl	get_reg_n
 28702              	.LVL2242:
1426:src/xeq.c     **** }
 28703              		.loc 1 1426 2 view .LVU7587
 28704 0166 0822     		movs	r2, #8
 28705 0168 013C     		subs	r4, r4, #1
 28706              	.LVL2243:
1426:src/xeq.c     **** }
 28707              		.loc 1 1426 2 view .LVU7588
 28708 016a 0DEB0201 		add	r1, sp, r2
 28709 016e FFF7FEFF 		bl	xcopy
 28710              	.LVL2244:
1426:src/xeq.c     **** }
 28711              		.loc 1 1426 2 view .LVU7589
 28712              	.LBE3726:
 28713              	.LBE3724:
 28714              	.LBE3723:
6147:src/xeq.c     **** 			decNumber r;
 28715              		.loc 1 6147 9 is_stmt 1 view .LVU7590
 28716 0172 632C     		cmp	r4, #99
 28717 0174 A5F11005 		sub	r5, r5, #16
 28718 0178 E7D1     		bne	.L2067
 28719              	.LBE3745:
 28720              	.LBE3715:
 28721              		.loc 1 6181 1 is_stmt 0 view .LVU7591
 28722 017a 0FB0     		add	sp, sp, #60
 28723              		.cfi_remember_state
 28724              		.cfi_def_cfa_offset 36
 28725              		@ sp needed
 28726 017c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 28727              	.LVL2245:
 28728              	.L2095:
 28729              		.cfi_restore_state
 28730              	.LBB3747:
 28731              	.LBB3746:
6153:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
ARM GAS  /tmp/cccVhVyH.s 			page 735


 28732              		.loc 1 6153 7 is_stmt 1 view .LVU7592
6153:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 28733              		.loc 1 6153 10 is_stmt 0 view .LVU7593
 28734 0180 B9F1000F 		cmp	r9, #0
 28735 0184 1AD1     		bne	.L2068
6157:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 28736              		.loc 1 6157 9 is_stmt 1 view .LVU7594
6157:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 28737              		.loc 1 6157 11 is_stmt 0 view .LVU7595
 28738 0186 631E     		subs	r3, r4, #1
 28739              	.LVL2246:
6157:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 28740              		.loc 1 6157 9 view .LVU7596
 28741 0188 002C     		cmp	r4, #0
 28742 018a 3FF446AF 		beq	.L2050
 28743 018e 1E4F     		ldr	r7, .L2096+28
 28744 0190 6334     		adds	r4, r4, #99
 28745 0192 07EB0317 		add	r7, r7, r3, lsl #4
 28746 0196 05AE     		add	r6, sp, #20
 28747              	.LVL2247:
 28748              	.L2071:
6158:src/xeq.c     **** 	}
 28749              		.loc 1 6158 4 is_stmt 1 view .LVU7597
 28750              	.LBB3727:
 28751              	.LBI3727:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28752              		.loc 1 718 11 view .LVU7598
 28753              	.LBB3728:
 719:src/xeq.c     **** }
 28754              		.loc 1 719 2 view .LVU7599
 719:src/xeq.c     **** }
 28755              		.loc 1 719 9 is_stmt 0 view .LVU7600
 28756 0198 2046     		mov	r0, r4
 28757 019a FFF7FEFF 		bl	get_reg_n
 28758              	.LVL2248:
 28759              	.LBE3728:
 28760              	.LBE3727:
 28761              	.LBB3730:
 28762              	.LBB3731:
 650:src/xeq.c     **** }
 28763              		.loc 1 650 24 view .LVU7601
 28764 019e 3146     		mov	r1, r6
 28765              	.LBE3731:
 28766              	.LBE3730:
 28767              	.LBB3733:
 28768              	.LBB3729:
 719:src/xeq.c     **** }
 28769              		.loc 1 719 9 view .LVU7602
 28770 01a0 0546     		mov	r5, r0
 28771              	.LVL2249:
 719:src/xeq.c     **** }
 28772              		.loc 1 719 9 view .LVU7603
 28773              	.LBE3729:
 28774              	.LBE3733:
 28775              	.LBB3734:
 28776              	.LBI3730:
 648:src/xeq.c     **** 	decNumber temp;
ARM GAS  /tmp/cccVhVyH.s 			page 736


 28777              		.loc 1 648 6 is_stmt 1 view .LVU7604
 28778              	.LBB3732:
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 28779              		.loc 1 649 2 view .LVU7605
 650:src/xeq.c     **** }
 28780              		.loc 1 650 2 view .LVU7606
 650:src/xeq.c     **** }
 28781              		.loc 1 650 24 is_stmt 0 view .LVU7607
 28782 01a2 3846     		mov	r0, r7
 28783              	.LVL2250:
 650:src/xeq.c     **** }
 28784              		.loc 1 650 24 view .LVU7608
 28785 01a4 FFF7FEFF 		bl	decimal128ToNumber
 28786              	.LVL2251:
 28787 01a8 013C     		subs	r4, r4, #1
 28788              	.LVL2252:
 650:src/xeq.c     **** }
 28789              		.loc 1 650 24 view .LVU7609
 28790 01aa 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 28791              		.loc 1 650 2 view .LVU7610
 28792 01ac 2846     		mov	r0, r5
 28793 01ae FFF7FEFF 		bl	packed_from_number
 28794              	.LVL2253:
 650:src/xeq.c     **** }
 28795              		.loc 1 650 2 view .LVU7611
 28796              	.LBE3732:
 28797              	.LBE3734:
6157:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 28798              		.loc 1 6157 9 is_stmt 1 view .LVU7612
6157:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 28799              		.loc 1 6157 9 is_stmt 0 view .LVU7613
 28800 01b2 632C     		cmp	r4, #99
 28801 01b4 A7F11007 		sub	r7, r7, #16
 28802 01b8 EED1     		bne	.L2071
 28803 01ba 2EE7     		b	.L2050
 28804              	.LVL2254:
 28805              	.L2068:
6154:src/xeq.c     **** 	}
 28806              		.loc 1 6154 3 is_stmt 1 view .LVU7614
 28807              	.LBB3735:
 28808              	.LBB3736:
 28809              	.LBB3737:
 28810              	.LBB3738:
1122:src/xeq.c     **** }
 28811              		.loc 1 1122 24 is_stmt 0 view .LVU7615
 28812 01bc 3B68     		ldr	r3, [r7]
 28813              	.LBE3738:
 28814              	.LBE3737:
 28815              	.LBE3736:
 28816              	.LBE3735:
6154:src/xeq.c     **** 	}
 28817              		.loc 1 6154 3 view .LVU7616
 28818 01be DAF80000 		ldr	r0, [r10]
 28819              	.LVL2255:
 28820              	.LBB3744:
 28821              	.LBI3735:
ARM GAS  /tmp/cccVhVyH.s 			page 737


1540:src/xeq.c     **** 	if (is_dblmode())
 28822              		.loc 1 1540 6 is_stmt 1 view .LVU7617
 28823              	.LBB3743:
1541:src/xeq.c     **** 		n <<= 1;
 28824              		.loc 1 1541 2 view .LVU7618
 28825              	.LBB3741:
 28826              	.LBI3737:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28827              		.loc 1 1121 5 view .LVU7619
 28828              	.LBB3739:
1122:src/xeq.c     **** }
 28829              		.loc 1 1122 2 view .LVU7620
1122:src/xeq.c     **** }
 28830              		.loc 1 1122 24 is_stmt 0 view .LVU7621
 28831 01c2 B3F8E827 		ldrh	r2, [r3, #2024]
 28832              	.LBE3739:
 28833              	.LBE3741:
1543:src/xeq.c     **** }
 28834              		.loc 1 1543 2 view .LVU7622
 28835 01c6 1049     		ldr	r1, .L2096+28
 28836              	.LBB3742:
 28837              	.LBB3740:
1122:src/xeq.c     **** }
 28838              		.loc 1 1122 24 view .LVU7623
 28839 01c8 44F20103 		movw	r3, #16385
 28840              	.LBE3740:
 28841              	.LBE3742:
1541:src/xeq.c     **** 		n <<= 1;
 28842              		.loc 1 1541 5 view .LVU7624
 28843 01cc 1340     		ands	r3, r3, r2
 28844 01ce B3F5804F 		cmp	r3, #16384
1542:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 28845              		.loc 1 1542 3 is_stmt 1 view .LVU7625
1542:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 28846              		.loc 1 1542 5 is_stmt 0 view .LVU7626
 28847 01d2 08BF     		it	eq
 28848 01d4 6400     		lsleq	r4, r4, #1
 28849              	.LVL2256:
1543:src/xeq.c     **** }
 28850              		.loc 1 1543 2 is_stmt 1 view .LVU7627
 28851 01d6 E200     		lsls	r2, r4, #3
 28852 01d8 FFF7FEFF 		bl	xcopy
 28853              	.LVL2257:
1544:src/xeq.c     **** 
 28854              		.loc 1 1544 1 is_stmt 0 view .LVU7628
 28855 01dc 1DE7     		b	.L2050
 28856              	.LVL2258:
 28857              	.L2092:
1544:src/xeq.c     **** 
 28858              		.loc 1 1544 1 view .LVU7629
 28859              	.LBE3743:
 28860              	.LBE3744:
6110:src/xeq.c     **** 		else
 28861              		.loc 1 6110 4 is_stmt 1 view .LVU7630
 28862 01de FFF7FEFF 		bl	setlastXY
 28863              	.LVL2259:
 28864 01e2 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
ARM GAS  /tmp/cccVhVyH.s 			page 738


 28865 01e4 61E7     		b	.L2054
 28866              	.LVL2260:
 28867              	.L2094:
6110:src/xeq.c     **** 		else
 28868              		.loc 1 6110 4 is_stmt 0 view .LVU7631
 28869 01e6 074E     		ldr	r6, .L2096+24
 28870 01e8 83E7     		b	.L2058
 28871              	.L2097:
 28872 01ea 00BF     		.align	2
 28873              	.L2096:
 28874 01ec 00000000 		.word	XromParams
 28875 01f0 00000000 		.word	Error
 28876 01f4 00000000 		.word	main_ram
 28877 01f8 00000000 		.word	UserLocalRegs
 28878 01fc 00000000 		.word	RetStk
 28879 0200 FEBFF78F 		.word	-1879588866
 28880 0204 00000000 		.word	StateWhileOn
 28881 0208 00000000 		.word	XromLocal
 28882 020c 00000000 		.word	StackBase
 28883              	.LBE3746:
 28884              	.LBE3747:
 28885              		.cfi_endproc
 28886              	.LFE272:
 28888              		.section	.text.cmdconverged,"ax",%progbits
 28889              		.align	1
 28890              		.p2align 2,,3
 28891              		.global	cmdconverged
 28892              		.syntax unified
 28893              		.thumb
 28894              		.thumb_func
 28895              		.fpu fpv4-sp-d16
 28897              	cmdconverged:
 28898              	.LVL2261:
 28899              	.LFB273:
6182:src/xeq.c     **** 
6183:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
6184:src/xeq.c     **** /*
6185:src/xeq.c     ****  *  Allow access to command argument from XROM
6186:src/xeq.c     ****  */
6187:src/xeq.c     **** void cmdxarg(unsigned int arg, enum rarg op) {
6188:src/xeq.c     **** 	set_reg_n_int_sgn(arg, XromArg, 0);
6189:src/xeq.c     **** }
6190:src/xeq.c     **** #endif
6191:src/xeq.c     **** 
6192:src/xeq.c     **** 
6193:src/xeq.c     **** /* A slightly obtuse command to check for convergence.
6194:src/xeq.c     ****  * Arguments are organised bitwise in this form:
6195:src/xeq.c     ****  *
6196:src/xeq.c     ****  *	SMMTT
6197:src/xeq.c     ****  *
6198:src/xeq.c     ****  * where:
6199:src/xeq.c     ****  *	TT is the tolerance parameter:
6200:src/xeq.c     ****  *
6201:src/xeq.c     ****  *	  	0	1e-14 tolerance
6202:src/xeq.c     ****  *	  	1	1e-24 tolerance
6203:src/xeq.c     ****  *	  	2	1e-32 tolerance
6204:src/xeq.c     ****  *	  	3	choose the best tolerance for the current modes
ARM GAS  /tmp/cccVhVyH.s 			page 739


6205:src/xeq.c     ****  *			for user mode this means 0 for single precision and 2 for double precision
6206:src/xeq.c     ****  *
6207:src/xeq.c     ****  *	MM is the mode parameter:
6208:src/xeq.c     ****  *	  	0	compare real X & Y relatively
6209:src/xeq.c     ****  *	  	1	compare real X & Y absolutely
6210:src/xeq.c     ****  *	  	2	compare complex X/Y & Z/T for absolute difference
6211:src/xeq.c     ****  *	  	3	compare real X & Y relatively
6212:src/xeq.c     ****  *
6213:src/xeq.c     ****  *	S is the special number validation:
6214:src/xeq.c     ****  *		0	Nan & infinities are considered converged
6215:src/xeq.c     ****  *		1	NaN & infinities are not considered converged
6216:src/xeq.c     ****  *
6217:src/xeq.c     ****  * In integer mode, the arguemnt is completely ignored and an equality
6218:src/xeq.c     ****  * comparision is undertaken instead.
6219:src/xeq.c     ****  */
6220:src/xeq.c     **** static const decNumber * const convergence_tolerances[3] = {
6221:src/xeq.c     **** 	&const_1e_14, &const_1e_24, &const_1e_32
6222:src/xeq.c     **** };
6223:src/xeq.c     **** 
6224:src/xeq.c     **** void cmdconverged(unsigned int arg, enum rarg cmd) {
 28900              		.loc 1 6224 52 is_stmt 1 view -0
 28901              		.cfi_startproc
 28902              		@ args = 0, pretend = 0, frame = 216
 28903              		@ frame_needed = 0, uses_anonymous_args = 0
6225:src/xeq.c     **** 	const decNumber *tolerance;
 28904              		.loc 1 6225 2 view .LVU7633
6226:src/xeq.c     **** 	unsigned int tol = arg & 3;
 28905              		.loc 1 6226 2 view .LVU7634
6227:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
6228:src/xeq.c     **** 	const int specials = arg & 0x10;
6229:src/xeq.c     **** 	const int complex = mode == 2;
6230:src/xeq.c     **** 	const int absolute = mode == 1;
6231:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
6232:src/xeq.c     **** 	int res;
6233:src/xeq.c     **** 
6234:src/xeq.c     **** 	if (is_intmode()) {
 28906              		.loc 1 6234 6 is_stmt 0 view .LVU7635
 28907 0000 374B     		ldr	r3, .L2113
6224:src/xeq.c     **** 	const decNumber *tolerance;
 28908              		.loc 1 6224 52 view .LVU7636
 28909 0002 70B5     		push	{r4, r5, r6, lr}
 28910              		.cfi_def_cfa_offset 16
 28911              		.cfi_offset 4, -16
 28912              		.cfi_offset 5, -12
 28913              		.cfi_offset 6, -8
 28914              		.cfi_offset 14, -4
 28915              		.loc 1 6234 6 view .LVU7637
 28916 0004 1A68     		ldr	r2, [r3]
 28917 0006 92F8E817 		ldrb	r1, [r2, #2024]	@ zero_extendqisi2
 28918              	.LVL2262:
6227:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
 28919              		.loc 1 6227 2 is_stmt 1 view .LVU7638
6228:src/xeq.c     **** 	const int complex = mode == 2;
 28920              		.loc 1 6228 2 view .LVU7639
6229:src/xeq.c     **** 	const int absolute = mode == 1;
 28921              		.loc 1 6229 2 view .LVU7640
6230:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
ARM GAS  /tmp/cccVhVyH.s 			page 740


 28922              		.loc 1 6230 2 view .LVU7641
6231:src/xeq.c     **** 	int res;
 28923              		.loc 1 6231 2 view .LVU7642
6232:src/xeq.c     **** 
 28924              		.loc 1 6232 2 view .LVU7643
 28925              		.loc 1 6234 2 view .LVU7644
 28926              		.loc 1 6234 5 is_stmt 0 view .LVU7645
 28927 000a CB07     		lsls	r3, r1, #31
6224:src/xeq.c     **** 	const decNumber *tolerance;
 28928              		.loc 1 6224 52 view .LVU7646
 28929 000c B8B0     		sub	sp, sp, #224
 28930              		.cfi_def_cfa_offset 240
 28931              		.loc 1 6234 5 view .LVU7647
 28932 000e 35D4     		bmi	.L2109
 28933 0010 00F00303 		and	r3, r0, #3
 28934              	.LVL2263:
6235:src/xeq.c     **** 		do_tst(regY_idx, TST_EQ);
6236:src/xeq.c     **** 		return;
6237:src/xeq.c     **** 	}
6238:src/xeq.c     **** 
6239:src/xeq.c     **** 	if (tol == 3) {
 28935              		.loc 1 6239 5 view .LVU7648
 28936 0014 032B     		cmp	r3, #3
 28937 0016 0446     		mov	r4, r0
 28938 0018 00F01005 		and	r5, r0, #16
 28939              	.LVL2264:
 28940              		.loc 1 6239 2 is_stmt 1 view .LVU7649
 28941              		.loc 1 6239 5 is_stmt 0 view .LVU7650
 28942 001c 24D0     		beq	.L2101
 28943 001e 314A     		ldr	r2, .L2113+4
 28944 0020 52F82360 		ldr	r6, [r2, r3, lsl #2]
 28945              	.LVL2265:
 28946              	.L2102:
6240:src/xeq.c     **** 		if (is_dblmode())
6241:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
6242:src/xeq.c     **** 		else
6243:src/xeq.c     **** 			tol = 0;
6244:src/xeq.c     **** 	}
6245:src/xeq.c     **** 	tolerance = convergence_tolerances[tol];
 28947              		.loc 1 6245 2 is_stmt 1 view .LVU7651
6246:src/xeq.c     **** 
6247:src/xeq.c     **** 	getXYZT(&x, &y, &z, &t);
 28948              		.loc 1 6247 2 view .LVU7652
 28949              	.LBB3748:
 28950              	.LBI3748:
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 28951              		.loc 1 879 6 view .LVU7653
 28952              	.LBB3749:
 880:src/xeq.c     **** 	getT(t);
 28953              		.loc 1 880 2 view .LVU7654
 28954 0024 1DAA     		add	r2, sp, #116
 28955              	.LVL2266:
 880:src/xeq.c     **** 	getT(t);
 28956              		.loc 1 880 2 is_stmt 0 view .LVU7655
 28957 0026 14A9     		add	r1, sp, #80
 28958              	.LVL2267:
 880:src/xeq.c     **** 	getT(t);
ARM GAS  /tmp/cccVhVyH.s 			page 741


 28959              		.loc 1 880 2 view .LVU7656
 28960 0028 0BA8     		add	r0, sp, #44
 28961              	.LVL2268:
 880:src/xeq.c     **** 	getT(t);
 28962              		.loc 1 880 2 view .LVU7657
 28963 002a FFF7FEFF 		bl	getXYZ
 28964              	.LVL2269:
 881:src/xeq.c     **** }
 28965              		.loc 1 881 2 is_stmt 1 view .LVU7658
 28966              	.LBB3750:
 28967              	.LBI3750:
 850:src/xeq.c     **** 	getRegister(t, regT_idx);
 28968              		.loc 1 850 13 view .LVU7659
 28969              	.LBB3751:
 851:src/xeq.c     **** }
 28970              		.loc 1 851 2 view .LVU7660
 28971 002e 02A8     		add	r0, sp, #8
 28972              	.LVL2270:
 851:src/xeq.c     **** }
 28973              		.loc 1 851 2 is_stmt 0 view .LVU7661
 28974 0030 6721     		movs	r1, #103
 28975 0032 FFF7FEFF 		bl	getRegister
 28976              	.LVL2271:
 851:src/xeq.c     **** }
 28977              		.loc 1 851 2 view .LVU7662
 28978              	.LBE3751:
 28979              	.LBE3750:
 28980              	.LBE3749:
 28981              	.LBE3748:
6248:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || decNumberIsSpecial(&y))
 28982              		.loc 1 6248 2 is_stmt 1 view .LVU7663
 28983              		.loc 1 6248 29 is_stmt 0 view .LVU7664
 28984 0036 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 28985 003a 9DF85820 		ldrb	r2, [sp, #88]	@ zero_extendqisi2
 28986 003e 1343     		orrs	r3, r3, r2
 28987 0040 13F0700F 		tst	r3, #112
 28988 0044 0BD1     		bne	.L2103
6227:src/xeq.c     **** 	const int specials = arg & 0x10;
 28989              		.loc 1 6227 21 view .LVU7665
 28990 0046 C4F38104 		ubfx	r4, r4, #2, #2
 28991              	.LVL2272:
6249:src/xeq.c     **** 		res = specials;
6250:src/xeq.c     **** 	else if (complex) {
 28992              		.loc 1 6250 7 is_stmt 1 view .LVU7666
 28993              		.loc 1 6250 10 is_stmt 0 view .LVU7667
 28994 004a 022C     		cmp	r4, #2
 28995 004c 26D0     		beq	.L2110
6251:src/xeq.c     **** 		if (decNumberIsSpecial(&z) || decNumberIsSpecial(&t))
6252:src/xeq.c     **** 			res = specials;
6253:src/xeq.c     **** 		else {
6254:src/xeq.c     **** 			cmplxSubtract(&a, &b, &x, &y, &z, &t);
6255:src/xeq.c     **** 			cmplxR(&x, &a, &b);
6256:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
6257:src/xeq.c     **** 		}
6258:src/xeq.c     **** 	} else {
6259:src/xeq.c     **** 		if (absolute)
 28996              		.loc 1 6259 3 is_stmt 1 view .LVU7668
ARM GAS  /tmp/cccVhVyH.s 			page 742


 28997              		.loc 1 6259 6 is_stmt 0 view .LVU7669
 28998 004e 012C     		cmp	r4, #1
6260:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 28999              		.loc 1 6260 10 view .LVU7670
 29000 0050 3246     		mov	r2, r6
 29001 0052 14A9     		add	r1, sp, #80
 29002 0054 0BA8     		add	r0, sp, #44
6259:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 29003              		.loc 1 6259 6 view .LVU7671
 29004 0056 3ED0     		beq	.L2111
6261:src/xeq.c     **** 		else
6262:src/xeq.c     **** 			res = relative_error(&x, &y, tolerance);
 29005              		.loc 1 6262 4 is_stmt 1 view .LVU7672
 29006              		.loc 1 6262 10 is_stmt 0 view .LVU7673
 29007 0058 FFF7FEFF 		bl	relative_error
 29008              	.LVL2273:
 29009 005c 0546     		mov	r5, r0
 29010              	.LVL2274:
 29011              	.L2103:
6263:src/xeq.c     **** 	}
6264:src/xeq.c     **** 	fin_tst(res);
 29012              		.loc 1 6264 2 is_stmt 1 discriminator 1 view .LVU7674
 29013 005e 2846     		mov	r0, r5
 29014 0060 FFF7FEFF 		bl	fin_tst
 29015              	.LVL2275:
6265:src/xeq.c     **** }
 29016              		.loc 1 6265 1 is_stmt 0 discriminator 1 view .LVU7675
 29017 0064 38B0     		add	sp, sp, #224
 29018              		.cfi_remember_state
 29019              		.cfi_def_cfa_offset 16
 29020              		@ sp needed
 29021 0066 70BD     		pop	{r4, r5, r6, pc}
 29022              	.LVL2276:
 29023              	.L2101:
 29024              		.cfi_restore_state
6240:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 29025              		.loc 1 6240 3 is_stmt 1 view .LVU7676
 29026              	.LBB3752:
 29027              	.LBI3752:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 29028              		.loc 1 1121 5 view .LVU7677
 29029              	.LBB3753:
1122:src/xeq.c     **** }
 29030              		.loc 1 1122 2 view .LVU7678
1122:src/xeq.c     **** }
 29031              		.loc 1 1122 24 is_stmt 0 view .LVU7679
 29032 0068 B2F8E827 		ldrh	r2, [r2, #2024]
 29033 006c 44F20103 		movw	r3, #16385
 29034              	.LVL2277:
1122:src/xeq.c     **** }
 29035              		.loc 1 1122 24 view .LVU7680
 29036              	.LBE3753:
 29037              	.LBE3752:
6240:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 29038              		.loc 1 6240 6 view .LVU7681
 29039 0070 1340     		ands	r3, r3, r2
 29040 0072 B3F5804F 		cmp	r3, #16384
ARM GAS  /tmp/cccVhVyH.s 			page 743


 29041 0076 07D0     		beq	.L2112
 29042 0078 1B4E     		ldr	r6, .L2113+8
 29043 007a D3E7     		b	.L2102
 29044              	.LVL2278:
 29045              	.L2109:
6235:src/xeq.c     **** 		return;
 29046              		.loc 1 6235 3 is_stmt 1 view .LVU7682
 29047 007c 0021     		movs	r1, #0
 29048 007e 6520     		movs	r0, #101
 29049              	.LVL2279:
6235:src/xeq.c     **** 		return;
 29050              		.loc 1 6235 3 is_stmt 0 view .LVU7683
 29051 0080 FFF7FEFF 		bl	do_tst
 29052              	.LVL2280:
6236:src/xeq.c     **** 	}
 29053              		.loc 1 6236 3 is_stmt 1 view .LVU7684
 29054              		.loc 1 6265 1 is_stmt 0 view .LVU7685
 29055 0084 38B0     		add	sp, sp, #224
 29056              		.cfi_remember_state
 29057              		.cfi_def_cfa_offset 16
 29058              		@ sp needed
 29059 0086 70BD     		pop	{r4, r5, r6, pc}
 29060              	.LVL2281:
 29061              	.L2112:
 29062              		.cfi_restore_state
6241:src/xeq.c     **** 		else
 29063              		.loc 1 6241 4 is_stmt 1 view .LVU7686
6241:src/xeq.c     **** 		else
 29064              		.loc 1 6241 27 is_stmt 0 view .LVU7687
 29065 0088 184B     		ldr	r3, .L2113+12
6241:src/xeq.c     **** 		else
 29066              		.loc 1 6241 57 view .LVU7688
 29067 008a 194E     		ldr	r6, .L2113+16
6241:src/xeq.c     **** 		else
 29068              		.loc 1 6241 27 view .LVU7689
 29069 008c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
6241:src/xeq.c     **** 		else
 29070              		.loc 1 6241 57 view .LVU7690
 29071 008e 194A     		ldr	r2, .L2113+20
 29072 0090 03F08803 		and	r3, r3, #136
 29073 0094 802B     		cmp	r3, #128
 29074 0096 08BF     		it	eq
 29075 0098 1646     		moveq	r6, r2
 29076 009a C3E7     		b	.L2102
 29077              	.LVL2282:
 29078              	.L2110:
6251:src/xeq.c     **** 			res = specials;
 29079              		.loc 1 6251 3 is_stmt 1 view .LVU7691
6251:src/xeq.c     **** 			res = specials;
 29080              		.loc 1 6251 30 is_stmt 0 view .LVU7692
 29081 009c 9DF87C30 		ldrb	r3, [sp, #124]	@ zero_extendqisi2
 29082 00a0 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 29083 00a4 1343     		orrs	r3, r3, r2
 29084 00a6 13F0700F 		tst	r3, #112
 29085 00aa D8D1     		bne	.L2103
6254:src/xeq.c     **** 			cmplxR(&x, &a, &b);
 29086              		.loc 1 6254 4 is_stmt 1 view .LVU7693
ARM GAS  /tmp/cccVhVyH.s 			page 744


 29087 00ac 02AB     		add	r3, sp, #8
 29088 00ae 0193     		str	r3, [sp, #4]
 29089 00b0 1DAB     		add	r3, sp, #116
 29090 00b2 0093     		str	r3, [sp]
 29091 00b4 2FA9     		add	r1, sp, #188
 29092 00b6 14AB     		add	r3, sp, #80
 29093 00b8 26A8     		add	r0, sp, #152
 29094 00ba 0BAA     		add	r2, sp, #44
 29095 00bc FFF7FEFF 		bl	cmplxSubtract
 29096              	.LVL2283:
6255:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
 29097              		.loc 1 6255 4 view .LVU7694
 29098 00c0 2FAA     		add	r2, sp, #188
 29099 00c2 26A9     		add	r1, sp, #152
 29100 00c4 0BA8     		add	r0, sp, #44
 29101 00c6 FFF7FEFF 		bl	cmplxR
 29102              	.LVL2284:
6256:src/xeq.c     **** 		}
 29103              		.loc 1 6256 4 view .LVU7695
6256:src/xeq.c     **** 		}
 29104              		.loc 1 6256 10 is_stmt 0 view .LVU7696
 29105 00ca 3146     		mov	r1, r6
 29106 00cc 0BA8     		add	r0, sp, #44
 29107 00ce FFF7FEFF 		bl	dn_lt
 29108              	.LVL2285:
 29109 00d2 0546     		mov	r5, r0
 29110              	.LVL2286:
6256:src/xeq.c     **** 		}
 29111              		.loc 1 6256 10 view .LVU7697
 29112 00d4 C3E7     		b	.L2103
 29113              	.LVL2287:
 29114              	.L2111:
6260:src/xeq.c     **** 		else
 29115              		.loc 1 6260 4 is_stmt 1 view .LVU7698
6260:src/xeq.c     **** 		else
 29116              		.loc 1 6260 10 is_stmt 0 view .LVU7699
 29117 00d6 FFF7FEFF 		bl	absolute_error
 29118              	.LVL2288:
 29119 00da 0546     		mov	r5, r0
 29120              	.LVL2289:
6260:src/xeq.c     **** 		else
 29121              		.loc 1 6260 10 view .LVU7700
 29122 00dc BFE7     		b	.L2103
 29123              	.L2114:
 29124 00de 00BF     		.align	2
 29125              	.L2113:
 29126 00e0 00000000 		.word	main_ram
 29127 00e4 00000000 		.word	.LANCHOR7
 29128 00e8 00000000 		.word	const_1e_14
 29129 00ec 00000000 		.word	XromParams
 29130 00f0 00000000 		.word	const_1e_32
 29131 00f4 00000000 		.word	const_1e_24
 29132              		.cfi_endproc
 29133              	.LFE273:
 29135              		.section	.text.cmdshuffle,"ax",%progbits
 29136              		.align	1
 29137              		.p2align 2,,3
ARM GAS  /tmp/cccVhVyH.s 			page 745


 29138              		.global	cmdshuffle
 29139              		.syntax unified
 29140              		.thumb
 29141              		.thumb_func
 29142              		.fpu fpv4-sp-d16
 29144              	cmdshuffle:
 29145              	.LVL2290:
 29146              	.LFB274:
6266:src/xeq.c     **** 
6267:src/xeq.c     **** void cmdshuffle(unsigned int arg, enum rarg cmd) {
 29147              		.loc 1 6267 50 is_stmt 1 view -0
 29148              		.cfi_startproc
 29149              		@ args = 0, pretend = 0, frame = 64
 29150              		@ frame_needed = 0, uses_anonymous_args = 0
6268:src/xeq.c     **** 	REGISTER xyzt[4];
 29151              		.loc 1 6268 2 view .LVU7702
6269:src/xeq.c     **** 	int i;
 29152              		.loc 1 6269 2 view .LVU7703
6270:src/xeq.c     **** 
6271:src/xeq.c     **** 	set_lift();
 29153              		.loc 1 6271 2 view .LVU7704
 29154              	.LBB3754:
 29155              	.LBI3754:
 767:src/xeq.c     ****     State2.state_lift = 1;
 29156              		.loc 1 767 6 view .LVU7705
 29157              	.LBB3755:
 768:src/xeq.c     **** }
 29158              		.loc 1 768 5 view .LVU7706
 29159              	.LBE3755:
 29160              	.LBE3754:
6267:src/xeq.c     **** 	REGISTER xyzt[4];
 29161              		.loc 1 6267 50 is_stmt 0 view .LVU7707
 29162 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 29163              		.cfi_def_cfa_offset 24
 29164              		.cfi_offset 4, -24
 29165              		.cfi_offset 5, -20
 29166              		.cfi_offset 6, -16
 29167              		.cfi_offset 7, -12
 29168              		.cfi_offset 8, -8
 29169              		.cfi_offset 14, -4
 29170              	.LBB3760:
 29171              	.LBB3756:
 768:src/xeq.c     **** }
 29172              		.loc 1 768 23 view .LVU7708
 29173 0004 1F4A     		ldr	r2, .L2125
 29174 0006 204E     		ldr	r6, .L2125+4
 29175 0008 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 29176              	.LBE3756:
 29177              	.LBE3760:
6267:src/xeq.c     **** 	REGISTER xyzt[4];
 29178              		.loc 1 6267 50 view .LVU7709
 29179 000a 90B0     		sub	sp, sp, #64
 29180              		.cfi_def_cfa_offset 88
 29181              	.LBB3761:
 29182              	.LBB3757:
 768:src/xeq.c     **** }
 29183              		.loc 1 768 23 view .LVU7710
ARM GAS  /tmp/cccVhVyH.s 			page 746


 29184 000c 43F04003 		orr	r3, r3, #64
 29185              	.LBE3757:
 29186              	.LBE3761:
6267:src/xeq.c     **** 	REGISTER xyzt[4];
 29187              		.loc 1 6267 50 view .LVU7711
 29188 0010 0546     		mov	r5, r0
 29189              	.LBB3762:
 29190              	.LBB3758:
 768:src/xeq.c     **** }
 29191              		.loc 1 768 23 view .LVU7712
 29192 0012 D375     		strb	r3, [r2, #23]
 29193              	.LBE3758:
 29194              	.LBE3762:
6272:src/xeq.c     **** 	for (i=0; i<4; i++)
 29195              		.loc 1 6272 2 is_stmt 1 view .LVU7713
 29196              	.LVL2291:
 29197              		.loc 1 6272 12 view .LVU7714
 29198 0014 6F46     		mov	r7, sp
 29199              	.LBB3763:
 29200              	.LBB3759:
 768:src/xeq.c     **** }
 29201              		.loc 1 768 23 is_stmt 0 view .LVU7715
 29202 0016 6424     		movs	r4, #100
 29203              	.LBE3759:
 29204              	.LBE3763:
 29205              	.LBB3764:
 29206              	.LBB3765:
 29207              	.LBB3766:
 29208              	.LBB3767:
1122:src/xeq.c     **** }
 29209              		.loc 1 1122 24 view .LVU7716
 29210 0018 44F20108 		movw	r8, #16385
 29211              	.LVL2292:
 29212              	.L2117:
1122:src/xeq.c     **** }
 29213              		.loc 1 1122 24 view .LVU7717
 29214              	.LBE3767:
 29215              	.LBE3766:
 29216              	.LBE3765:
 29217              	.LBE3764:
6273:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 29218              		.loc 1 6273 3 is_stmt 1 discriminator 3 view .LVU7718
 29219              	.LBB3774:
 29220              	.LBI3774:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 29221              		.loc 1 718 11 discriminator 3 view .LVU7719
 29222              	.LBB3775:
 719:src/xeq.c     **** }
 29223              		.loc 1 719 2 discriminator 3 view .LVU7720
 719:src/xeq.c     **** }
 29224              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU7721
 29225 001c 2046     		mov	r0, r4
 29226 001e FFF7FEFF 		bl	get_reg_n
 29227              	.LVL2293:
 719:src/xeq.c     **** }
 29228              		.loc 1 719 9 discriminator 3 view .LVU7722
 29229              	.LBE3775:
ARM GAS  /tmp/cccVhVyH.s 			page 747


 29230              	.LBE3774:
 29231              	.LBB3777:
 29232              	.LBB3772:
 29233              	.LBB3770:
 29234              	.LBB3768:
1122:src/xeq.c     **** }
 29235              		.loc 1 1122 24 discriminator 3 view .LVU7723
 29236 0022 3368     		ldr	r3, [r6]
 29237 0024 B3F8E837 		ldrh	r3, [r3, #2024]
 29238              	.LBE3768:
 29239              	.LBE3770:
 727:src/xeq.c     **** }
 29240              		.loc 1 727 2 discriminator 3 view .LVU7724
 29241 0028 08EA0303 		and	r3, r8, r3
 29242 002c B3F5804F 		cmp	r3, #16384
 29243              	.LBE3772:
 29244              	.LBE3777:
 29245              	.LBB3778:
 29246              	.LBB3776:
 719:src/xeq.c     **** }
 29247              		.loc 1 719 9 discriminator 3 view .LVU7725
 29248 0030 0146     		mov	r1, r0
 29249              	.LVL2294:
 719:src/xeq.c     **** }
 29250              		.loc 1 719 9 discriminator 3 view .LVU7726
 29251              	.LBE3776:
 29252              	.LBE3778:
 29253              	.LBB3779:
 29254              	.LBI3764:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 29255              		.loc 1 726 6 is_stmt 1 discriminator 3 view .LVU7727
 29256              	.LBB3773:
 727:src/xeq.c     **** }
 29257              		.loc 1 727 2 discriminator 3 view .LVU7728
 29258              	.LBB3771:
 29259              	.LBI3766:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 29260              		.loc 1 1121 5 discriminator 3 view .LVU7729
 29261              	.LBB3769:
1122:src/xeq.c     **** }
 29262              		.loc 1 1122 2 discriminator 3 view .LVU7730
 29263              	.LBE3769:
 29264              	.LBE3771:
 727:src/xeq.c     **** }
 29265              		.loc 1 727 2 is_stmt 0 discriminator 3 view .LVU7731
 29266 0032 0CBF     		ite	eq
 29267 0034 1022     		moveq	r2, #16
 29268 0036 0822     		movne	r2, #8
 29269 0038 3846     		mov	r0, r7
 29270              	.LVL2295:
 727:src/xeq.c     **** }
 29271              		.loc 1 727 2 discriminator 3 view .LVU7732
 29272 003a 0134     		adds	r4, r4, #1
 29273              	.LVL2296:
 727:src/xeq.c     **** }
 29274              		.loc 1 727 2 discriminator 3 view .LVU7733
 29275 003c FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/cccVhVyH.s 			page 748


 29276              	.LVL2297:
 727:src/xeq.c     **** }
 29277              		.loc 1 727 2 discriminator 3 view .LVU7734
 29278              	.LBE3773:
 29279              	.LBE3779:
6272:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 29280              		.loc 1 6272 17 is_stmt 1 discriminator 3 view .LVU7735
6272:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 29281              		.loc 1 6272 12 discriminator 3 view .LVU7736
6272:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 29282              		.loc 1 6272 2 is_stmt 0 discriminator 3 view .LVU7737
 29283 0040 682C     		cmp	r4, #104
 29284 0042 07F11007 		add	r7, r7, #16
 29285 0046 E9D1     		bne	.L2117
 29286 0048 6424     		movs	r4, #100
 29287              	.LBB3780:
 29288              	.LBB3781:
 29289              	.LBB3782:
 29290              	.LBB3783:
1122:src/xeq.c     **** }
 29291              		.loc 1 1122 24 view .LVU7738
 29292 004a 44F20107 		movw	r7, #16385
 29293              	.L2119:
 29294              	.LVL2298:
1122:src/xeq.c     **** }
 29295              		.loc 1 1122 24 view .LVU7739
 29296              	.LBE3783:
 29297              	.LBE3782:
 29298              	.LBE3781:
 29299              	.LBE3780:
6274:src/xeq.c     **** 
6275:src/xeq.c     **** 	for (i=0; i<4; i++) {
6276:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 29300              		.loc 1 6276 3 is_stmt 1 view .LVU7740
 29301              	.LBB3790:
 29302              	.LBI3790:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 29303              		.loc 1 718 11 view .LVU7741
 29304              	.LBB3791:
 719:src/xeq.c     **** }
 29305              		.loc 1 719 2 view .LVU7742
 719:src/xeq.c     **** }
 29306              		.loc 1 719 9 is_stmt 0 view .LVU7743
 29307 004e 2046     		mov	r0, r4
 29308 0050 FFF7FEFF 		bl	get_reg_n
 29309              	.LVL2299:
 719:src/xeq.c     **** }
 29310              		.loc 1 719 9 view .LVU7744
 29311              	.LBE3791:
 29312              	.LBE3790:
 29313              	.LBB3792:
 29314              	.LBB3788:
 29315              	.LBB3786:
 29316              	.LBB3784:
1122:src/xeq.c     **** }
 29317              		.loc 1 1122 24 view .LVU7745
 29318 0054 3368     		ldr	r3, [r6]
ARM GAS  /tmp/cccVhVyH.s 			page 749


 29319 0056 B3F8E837 		ldrh	r3, [r3, #2024]
 29320              	.LBE3784:
 29321              	.LBE3786:
 727:src/xeq.c     **** }
 29322              		.loc 1 727 2 view .LVU7746
 29323 005a 3B40     		ands	r3, r3, r7
 29324 005c B3F5804F 		cmp	r3, #16384
 29325              	.LBE3788:
 29326              	.LBE3792:
 29327              		.loc 1 6276 36 view .LVU7747
 29328 0060 05F00301 		and	r1, r5, #3
 29329              	.LVL2300:
 29330              	.LBB3793:
 29331              	.LBI3780:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 29332              		.loc 1 726 6 is_stmt 1 view .LVU7748
 29333              	.LBB3789:
 727:src/xeq.c     **** }
 29334              		.loc 1 727 2 view .LVU7749
 29335              	.LBB3787:
 29336              	.LBI3782:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 29337              		.loc 1 1121 5 view .LVU7750
 29338              	.LBB3785:
1122:src/xeq.c     **** }
 29339              		.loc 1 1122 2 view .LVU7751
 29340              	.LBE3785:
 29341              	.LBE3787:
 727:src/xeq.c     **** }
 29342              		.loc 1 727 2 is_stmt 0 view .LVU7752
 29343 0064 0CBF     		ite	eq
 29344 0066 1022     		moveq	r2, #16
 29345 0068 0822     		movne	r2, #8
 29346 006a 0134     		adds	r4, r4, #1
 29347              	.LVL2301:
 727:src/xeq.c     **** }
 29348              		.loc 1 727 2 view .LVU7753
 29349 006c 0DEB0111 		add	r1, sp, r1, lsl #4
 29350              	.LVL2302:
 727:src/xeq.c     **** }
 29351              		.loc 1 727 2 view .LVU7754
 29352 0070 FFF7FEFF 		bl	xcopy
 29353              	.LVL2303:
 727:src/xeq.c     **** }
 29354              		.loc 1 727 2 view .LVU7755
 29355              	.LBE3789:
 29356              	.LBE3793:
6277:src/xeq.c     **** 		arg >>= 2;
 29357              		.loc 1 6277 3 is_stmt 1 view .LVU7756
6275:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 29358              		.loc 1 6275 2 is_stmt 0 view .LVU7757
 29359 0074 682C     		cmp	r4, #104
 29360              		.loc 1 6277 7 view .LVU7758
 29361 0076 4FEA9505 		lsr	r5, r5, #2
 29362              	.LVL2304:
6275:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 29363              		.loc 1 6275 17 is_stmt 1 view .LVU7759
ARM GAS  /tmp/cccVhVyH.s 			page 750


6275:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 29364              		.loc 1 6275 12 view .LVU7760
6275:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 29365              		.loc 1 6275 2 is_stmt 0 view .LVU7761
 29366 007a E8D1     		bne	.L2119
6278:src/xeq.c     **** 	}
6279:src/xeq.c     **** }
 29367              		.loc 1 6279 1 view .LVU7762
 29368 007c 10B0     		add	sp, sp, #64
 29369              		.cfi_def_cfa_offset 24
 29370              		@ sp needed
 29371 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29372              	.LVL2305:
 29373              	.L2126:
 29374              		.loc 1 6279 1 view .LVU7763
 29375 0082 00BF     		.align	2
 29376              	.L2125:
 29377 0084 00000000 		.word	StateWhileOn
 29378 0088 00000000 		.word	main_ram
 29379              		.cfi_endproc
 29380              	.LFE274:
 29382              		.section	.text.cmdmode,"ax",%progbits
 29383              		.align	1
 29384              		.p2align 2,,3
 29385              		.global	cmdmode
 29386              		.syntax unified
 29387              		.thumb
 29388              		.thumb_func
 29389              		.fpu fpv4-sp-d16
 29391              	cmdmode:
 29392              	.LVL2306:
 29393              	.LFB275:
6280:src/xeq.c     **** 
6281:src/xeq.c     **** /*
6282:src/xeq.c     ****  *  Toggle UState mode bits from XROM
6283:src/xeq.c     ****  */
6284:src/xeq.c     **** void cmdmode(unsigned int arg, enum rarg cmd) {
 29394              		.loc 1 6284 47 is_stmt 1 view -0
 29395              		.cfi_startproc
 29396              		@ args = 0, pretend = 0, frame = 0
 29397              		@ frame_needed = 0, uses_anonymous_args = 0
 29398              		@ link register save eliminated.
6285:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 29399              		.loc 1 6285 2 view .LVU7765
6284:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 29400              		.loc 1 6284 47 is_stmt 0 view .LVU7766
 29401 0000 30B4     		push	{r4, r5}
 29402              		.cfi_def_cfa_offset 8
 29403              		.cfi_offset 4, -8
 29404              		.cfi_offset 5, -4
6286:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 29405              		.loc 1 6286 62 view .LVU7767
 29406 0002 134D     		ldr	r5, .L2132
6285:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 29407              		.loc 1 6285 35 view .LVU7768
 29408 0004 0122     		movs	r2, #1
 29409 0006 A0F12003 		sub	r3, r0, #32
ARM GAS  /tmp/cccVhVyH.s 			page 751


 29410 000a C0F12004 		rsb	r4, r0, #32
 29411 000e 02FA03F3 		lsl	r3, r2, r3
 29412 0012 22FA04F4 		lsr	r4, r2, r4
 29413 0016 8240     		lsls	r2, r2, r0
 29414              		.loc 1 6286 62 view .LVU7769
 29415 0018 2868     		ldr	r0, [r5]
 29416              	.LVL2307:
6287:src/xeq.c     **** 
6288:src/xeq.c     **** 	if (cmd == RARG_MODE_SET)
 29417              		.loc 1 6288 5 view .LVU7770
 29418 001a 8129     		cmp	r1, #129
6289:src/xeq.c     **** 		*mode |= bit;
 29419              		.loc 1 6289 9 view .LVU7771
 29420 001c D0F8E457 		ldr	r5, [r0, #2020]
6285:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 29421              		.loc 1 6285 35 view .LVU7772
 29422 0020 43EA0403 		orr	r3, r3, r4
 29423              	.LVL2308:
6286:src/xeq.c     **** 
 29424              		.loc 1 6286 2 is_stmt 1 view .LVU7773
6288:src/xeq.c     **** 		*mode |= bit;
 29425              		.loc 1 6288 2 view .LVU7774
 29426              		.loc 1 6289 9 is_stmt 0 view .LVU7775
 29427 0024 00F2E471 		addw	r1, r0, #2020
 29428              	.LVL2309:
6288:src/xeq.c     **** 		*mode |= bit;
 29429              		.loc 1 6288 5 view .LVU7776
 29430 0028 0AD0     		beq	.L2131
6290:src/xeq.c     **** 	else
6291:src/xeq.c     **** 		*mode &= ~bit;
 29431              		.loc 1 6291 3 is_stmt 1 view .LVU7777
 29432              		.loc 1 6291 9 is_stmt 0 view .LVU7778
 29433 002a D0F8E847 		ldr	r4, [r0, #2024]
 29434 002e 25EA0202 		bic	r2, r5, r2
 29435              	.LVL2310:
 29436              		.loc 1 6291 9 view .LVU7779
 29437 0032 24EA0303 		bic	r3, r4, r3
 29438              	.LVL2311:
 29439              		.loc 1 6291 9 view .LVU7780
 29440 0036 C0F8E427 		str	r2, [r0, #2020]
6292:src/xeq.c     **** }
 29441              		.loc 1 6292 1 view .LVU7781
 29442 003a 30BC     		pop	{r4, r5}
 29443              		.cfi_remember_state
 29444              		.cfi_restore 5
 29445              		.cfi_restore 4
 29446              		.cfi_def_cfa_offset 0
 29447 003c 4B60     		str	r3, [r1, #4]
 29448 003e 7047     		bx	lr
 29449              	.LVL2312:
 29450              	.L2131:
 29451              		.cfi_restore_state
6289:src/xeq.c     **** 	else
 29452              		.loc 1 6289 3 is_stmt 1 view .LVU7782
6289:src/xeq.c     **** 	else
 29453              		.loc 1 6289 9 is_stmt 0 view .LVU7783
 29454 0040 4C68     		ldr	r4, [r1, #4]
ARM GAS  /tmp/cccVhVyH.s 			page 752


 29455 0042 2A43     		orrs	r2, r2, r5
 29456              	.LVL2313:
6289:src/xeq.c     **** 	else
 29457              		.loc 1 6289 9 view .LVU7784
 29458 0044 2343     		orrs	r3, r3, r4
 29459              	.LVL2314:
6289:src/xeq.c     **** 	else
 29460              		.loc 1 6289 9 view .LVU7785
 29461 0046 C0F8E427 		str	r2, [r0, #2020]
 29462              		.loc 1 6292 1 view .LVU7786
 29463 004a 30BC     		pop	{r4, r5}
 29464              		.cfi_restore 5
 29465              		.cfi_restore 4
 29466              		.cfi_def_cfa_offset 0
 29467 004c 4B60     		str	r3, [r1, #4]
 29468 004e 7047     		bx	lr
 29469              	.L2133:
 29470              		.align	2
 29471              	.L2132:
 29472 0050 00000000 		.word	main_ram
 29473              		.cfi_endproc
 29474              	.LFE275:
 29476              		.section	.text.cmdlpop,"ax",%progbits
 29477              		.align	1
 29478              		.p2align 2,,3
 29479              		.global	cmdlpop
 29480              		.syntax unified
 29481              		.thumb
 29482              		.thumb_func
 29483              		.fpu fpv4-sp-d16
 29485              	cmdlpop:
 29486              	.LVL2315:
 29487              	.LFB276:
6293:src/xeq.c     **** 
6294:src/xeq.c     **** /*
6295:src/xeq.c     ****  *  Undo the effect of LOCL by popping the current local frame.
6296:src/xeq.c     ****  *  Needs to be executed from the same level that has established the frame.
6297:src/xeq.c     ****  */
6298:src/xeq.c     **** void cmdlpop(enum nilop op) {
 29488              		.loc 1 6298 29 is_stmt 1 view -0
 29489              		.cfi_startproc
 29490              		@ args = 0, pretend = 0, frame = 0
 29491              		@ frame_needed = 0, uses_anonymous_args = 0
6299:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 29492              		.loc 1 6299 2 view .LVU7788
6298:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 29493              		.loc 1 6298 29 is_stmt 0 view .LVU7789
 29494 0000 10B5     		push	{r4, lr}
 29495              		.cfi_def_cfa_offset 8
 29496              		.cfi_offset 4, -8
 29497              		.cfi_offset 14, -4
 29498              		.loc 1 6299 6 view .LVU7790
 29499 0002 0C4C     		ldr	r4, .L2138
 29500 0004 2268     		ldr	r2, [r4]
 29501 0006 B2F8DE37 		ldrh	r3, [r2, #2014]
 29502              		.loc 1 6299 5 view .LVU7791
 29503 000a B2F9E227 		ldrsh	r2, [r2, #2018]
ARM GAS  /tmp/cccVhVyH.s 			page 753


 29504 000e 43F34A13 		sbfx	r3, r3, #5, #11
 29505 0012 9342     		cmp	r3, r2
 29506 0014 05D0     		beq	.L2135
6300:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29507              		.loc 1 6300 3 is_stmt 1 view .LVU7792
 29508              	.LVL2316:
 29509              	.LBB3798:
 29510              	.LBI3798:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29511              		.loc 1 546 5 view .LVU7793
 29512              	.LBB3799:
 547:src/xeq.c     **** 		Error = e;
 29513              		.loc 1 547 2 view .LVU7794
 547:src/xeq.c     **** 		Error = e;
 29514              		.loc 1 547 12 is_stmt 0 view .LVU7795
 29515 0016 084B     		ldr	r3, .L2138+4
 547:src/xeq.c     **** 		Error = e;
 29516              		.loc 1 547 5 view .LVU7796
 29517 0018 1A68     		ldr	r2, [r3]
 29518 001a 0AB9     		cbnz	r2, .L2134
 29519              	.LVL2317:
 29520              	.LBB3800:
 29521              	.LBI3800:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29522              		.loc 1 546 5 is_stmt 1 view .LVU7797
 29523              	.LBB3801:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 29524              		.loc 1 548 3 view .LVU7798
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 29525              		.loc 1 548 9 is_stmt 0 view .LVU7799
 29526 001c 0722     		movs	r2, #7
 29527 001e 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 29528              		.loc 1 549 3 is_stmt 1 view .LVU7800
 29529              	.LVL2318:
 29530              	.L2134:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 29531              		.loc 1 549 3 is_stmt 0 view .LVU7801
 29532              	.LBE3801:
 29533              	.LBE3800:
 29534              	.LBE3799:
 29535              	.LBE3798:
6301:src/xeq.c     **** 		return;
6302:src/xeq.c     **** 	}
6303:src/xeq.c     **** 	RetStkPtr = LocalRegs;
6304:src/xeq.c     **** 	retstk_up();
6305:src/xeq.c     **** 	--RetStkPtr;
6306:src/xeq.c     **** }
 29536              		.loc 1 6306 1 view .LVU7802
 29537 0020 10BD     		pop	{r4, pc}
 29538              	.LVL2319:
 29539              	.L2135:
6303:src/xeq.c     **** 	retstk_up();
 29540              		.loc 1 6303 2 is_stmt 1 view .LVU7803
6304:src/xeq.c     **** 	--RetStkPtr;
 29541              		.loc 1 6304 2 view .LVU7804
 29542 0022 FFF7FEFF 		bl	retstk_up
ARM GAS  /tmp/cccVhVyH.s 			page 754


 29543              	.LVL2320:
6305:src/xeq.c     **** }
 29544              		.loc 1 6305 2 view .LVU7805
6305:src/xeq.c     **** }
 29545              		.loc 1 6305 4 is_stmt 0 view .LVU7806
 29546 0026 2268     		ldr	r2, [r4]
6305:src/xeq.c     **** }
 29547              		.loc 1 6305 2 view .LVU7807
 29548 0028 B2F8E237 		ldrh	r3, [r2, #2018]
 29549 002c 013B     		subs	r3, r3, #1
 29550 002e A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 29551              		.loc 1 6306 1 view .LVU7808
 29552 0032 10BD     		pop	{r4, pc}
 29553              	.L2139:
 29554              		.align	2
 29555              	.L2138:
 29556 0034 00000000 		.word	main_ram
 29557 0038 00000000 		.word	Error
 29558              		.cfi_endproc
 29559              	.LFE276:
 29561              		.section	.text.cmdregs,"ax",%progbits
 29562              		.align	1
 29563              		.p2align 2,,3
 29564              		.global	cmdregs
 29565              		.syntax unified
 29566              		.thumb
 29567              		.thumb_func
 29568              		.fpu fpv4-sp-d16
 29570              	cmdregs:
 29571              	.LVL2321:
 29572              	.LFB277:
6307:src/xeq.c     **** 
6308:src/xeq.c     **** /*
6309:src/xeq.c     ****  *  Reduce the number of global registers in favour of local data on the return stack
6310:src/xeq.c     ****  */
6311:src/xeq.c     **** void cmdregs(unsigned int arg, enum rarg op) {
 29573              		.loc 1 6311 46 is_stmt 1 view -0
 29574              		.cfi_startproc
 29575              		@ args = 0, pretend = 0, frame = 0
 29576              		@ frame_needed = 0, uses_anonymous_args = 0
6312:src/xeq.c     **** 	int distance;
 29577              		.loc 1 6312 2 view .LVU7810
6313:src/xeq.c     **** 	int length;
 29578              		.loc 1 6313 2 view .LVU7811
6314:src/xeq.c     **** 
6315:src/xeq.c     **** 	if (is_dblmode()) {
 29579              		.loc 1 6315 2 view .LVU7812
 29580              	.LBB3808:
 29581              	.LBI3808:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 29582              		.loc 1 1121 5 view .LVU7813
 29583              	.LBB3809:
1122:src/xeq.c     **** }
 29584              		.loc 1 1122 2 view .LVU7814
 29585              	.LBE3809:
 29586              	.LBE3808:
6311:src/xeq.c     **** 	int distance;
ARM GAS  /tmp/cccVhVyH.s 			page 755


 29587              		.loc 1 6311 46 is_stmt 0 view .LVU7815
 29588 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 29589              		.cfi_def_cfa_offset 24
 29590              		.cfi_offset 4, -24
 29591              		.cfi_offset 5, -20
 29592              		.cfi_offset 6, -16
 29593              		.cfi_offset 7, -12
 29594              		.cfi_offset 8, -8
 29595              		.cfi_offset 14, -4
 29596              	.LBB3811:
 29597              	.LBB3810:
1122:src/xeq.c     **** }
 29598              		.loc 1 1122 12 view .LVU7816
 29599 0004 294F     		ldr	r7, .L2156
 29600 0006 3A68     		ldr	r2, [r7]
1122:src/xeq.c     **** }
 29601              		.loc 1 1122 24 view .LVU7817
 29602 0008 B2F8E817 		ldrh	r1, [r2, #2024]
 29603              	.LVL2322:
1122:src/xeq.c     **** }
 29604              		.loc 1 1122 24 view .LVU7818
 29605 000c 44F20103 		movw	r3, #16385
 29606              	.LBE3810:
 29607              	.LBE3811:
 29608              		.loc 1 6315 5 view .LVU7819
 29609 0010 0B40     		ands	r3, r3, r1
 29610 0012 B3F5804F 		cmp	r3, #16384
6311:src/xeq.c     **** 	int distance;
 29611              		.loc 1 6311 46 view .LVU7820
 29612 0016 0446     		mov	r4, r0
 29613              		.loc 1 6315 5 view .LVU7821
 29614 0018 36D0     		beq	.L2152
6316:src/xeq.c     **** 		// DP register length 16 bytes
6317:src/xeq.c     **** 		length = (arg << 4); 
6318:src/xeq.c     **** 		// We need additional room for lettered registers
6319:src/xeq.c     **** 		arg = (arg << 1) + STACK_SIZE + EXTRA_REG;
6320:src/xeq.c     **** 	}
6321:src/xeq.c     **** 	else {
6322:src/xeq.c     **** 		if (UState.mode_double && arg < STACK_SIZE + EXTRA_REG) {
 29615              		.loc 1 6322 3 is_stmt 1 view .LVU7822
 29616              		.loc 1 6322 7 is_stmt 0 view .LVU7823
 29617 001a 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 29618              		.loc 1 6322 6 view .LVU7824
 29619 001e 5B06     		lsls	r3, r3, #25
 29620 0020 29D4     		bmi	.L2153
 29621              	.L2143:
6323:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
6324:src/xeq.c     **** 			// We must not release the space needed for the DP lettered registers
6325:src/xeq.c     **** 			report_err(ERR_RANGE);
6326:src/xeq.c     **** 			return;
6327:src/xeq.c     **** 		}
6328:src/xeq.c     **** 		// register length 8 bytes
6329:src/xeq.c     **** 		length = (arg << 3);
 29622              		.loc 1 6329 3 is_stmt 1 view .LVU7825
 29623              		.loc 1 6329 17 is_stmt 0 view .LVU7826
 29624 0022 4FEAC408 		lsl	r8, r4, #3
 29625              	.LVL2323:
ARM GAS  /tmp/cccVhVyH.s 			page 756


 29626              	.L2142:
6330:src/xeq.c     **** 	}
6331:src/xeq.c     **** 	distance = NumRegs - arg;
 29627              		.loc 1 6331 2 is_stmt 1 view .LVU7827
 29628              		.loc 1 6331 13 is_stmt 0 view .LVU7828
 29629 0026 92F8CF57 		ldrb	r5, [r2, #1999]	@ zero_extendqisi2
 29630              		.loc 1 6331 21 view .LVU7829
 29631 002a 2D1B     		subs	r5, r5, r4
 29632              	.LVL2324:
6332:src/xeq.c     **** 	
6333:src/xeq.c     **** 	// Move return stack, check for room
6334:src/xeq.c     **** 	if (move_retstk(distance << 2))
 29633              		.loc 1 6334 2 is_stmt 1 view .LVU7830
 29634              		.loc 1 6334 6 is_stmt 0 view .LVU7831
 29635 002c A800     		lsls	r0, r5, #2
 29636 002e FFF7FEFF 		bl	move_retstk
 29637              	.LVL2325:
 29638              		.loc 1 6334 5 view .LVU7832
 29639 0032 0646     		mov	r6, r0
 29640 0034 08B1     		cbz	r0, .L2154
 29641              	.LVL2326:
 29642              	.L2140:
6335:src/xeq.c     **** 		return;
6336:src/xeq.c     **** 	
6337:src/xeq.c     **** 	// Move register contents, including the statistics registers
6338:src/xeq.c     **** 	xcopy((unsigned short *)(Regs + TOPREALREG - arg)     - SizeStatRegs,
6339:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
6340:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
6341:src/xeq.c     **** 
6342:src/xeq.c     **** 	// Clear the left space
6343:src/xeq.c     **** 	if (distance < 0)
6344:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
6345:src/xeq.c     **** 	NumRegs = arg;
6346:src/xeq.c     **** }
 29643              		.loc 1 6346 1 view .LVU7833
 29644 0036 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29645              	.LVL2327:
 29646              	.L2154:
6338:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 29647              		.loc 1 6338 2 is_stmt 1 view .LVU7834
6338:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 29648              		.loc 1 6338 27 is_stmt 0 view .LVU7835
 29649 003a 3B68     		ldr	r3, [r7]
6338:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 29650              		.loc 1 6338 56 view .LVU7836
 29651 003c 1C4A     		ldr	r2, .L2156+4
6339:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 29652              		.loc 1 6339 45 view .LVU7837
 29653 003e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
6338:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 29654              		.loc 1 6338 56 view .LVU7838
 29655 0042 1268     		ldr	r2, [r2]
6339:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 29656              		.loc 1 6339 45 view .LVU7839
 29657 0044 C1F16401 		rsb	r1, r1, #100
6338:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 29658              		.loc 1 6338 45 view .LVU7840
ARM GAS  /tmp/cccVhVyH.s 			page 757


 29659 0048 C4F16400 		rsb	r0, r4, #100
6338:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 29660              		.loc 1 6338 27 view .LVU7841
 29661 004c 03F58663 		add	r3, r3, #1072
6339:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 29662              		.loc 1 6339 56 view .LVU7842
 29663 0050 C2EB8101 		rsb	r1, r2, r1, lsl #2
6338:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 29664              		.loc 1 6338 56 view .LVU7843
 29665 0054 C2EB8000 		rsb	r0, r2, r0, lsl #2
6338:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 29666              		.loc 1 6338 2 view .LVU7844
 29667 0058 03EB4101 		add	r1, r3, r1, lsl #1
 29668 005c 08EB4202 		add	r2, r8, r2, lsl #1
 29669 0060 03EB4000 		add	r0, r3, r0, lsl #1
 29670 0064 FFF7FEFF 		bl	xcopy
 29671              	.LVL2328:
6343:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 29672              		.loc 1 6343 2 is_stmt 1 view .LVU7845
6343:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 29673              		.loc 1 6343 5 is_stmt 0 view .LVU7846
 29674 0068 002D     		cmp	r5, #0
 29675 006a 13DB     		blt	.L2155
 29676              	.L2147:
6345:src/xeq.c     **** }
 29677              		.loc 1 6345 2 is_stmt 1 view .LVU7847
6345:src/xeq.c     **** }
 29678              		.loc 1 6345 10 is_stmt 0 view .LVU7848
 29679 006c 3B68     		ldr	r3, [r7]
 29680 006e 83F8CF47 		strb	r4, [r3, #1999]
 29681              		.loc 1 6346 1 view .LVU7849
 29682 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29683              	.LVL2329:
 29684              	.L2153:
6322:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
 29685              		.loc 1 6322 26 discriminator 1 view .LVU7850
 29686 0076 0B28     		cmp	r0, #11
 29687 0078 D3D8     		bhi	.L2143
6325:src/xeq.c     **** 			return;
 29688              		.loc 1 6325 4 is_stmt 1 view .LVU7851
 29689              	.LVL2330:
 29690              	.LBB3812:
 29691              	.LBI3812:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29692              		.loc 1 546 5 view .LVU7852
 29693              	.LBB3813:
 547:src/xeq.c     **** 		Error = e;
 29694              		.loc 1 547 2 view .LVU7853
 547:src/xeq.c     **** 		Error = e;
 29695              		.loc 1 547 12 is_stmt 0 view .LVU7854
 29696 007a 0E4B     		ldr	r3, .L2156+8
 547:src/xeq.c     **** 		Error = e;
 29697              		.loc 1 547 5 view .LVU7855
 29698 007c 1A68     		ldr	r2, [r3]
 29699 007e 002A     		cmp	r2, #0
 29700 0080 D9D1     		bne	.L2140
 29701              	.LVL2331:
ARM GAS  /tmp/cccVhVyH.s 			page 758


 29702              	.LBB3814:
 29703              	.LBI3814:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29704              		.loc 1 546 5 is_stmt 1 view .LVU7856
 29705              	.LBB3815:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 29706              		.loc 1 548 3 view .LVU7857
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 29707              		.loc 1 548 9 is_stmt 0 view .LVU7858
 29708 0082 0822     		movs	r2, #8
 29709 0084 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 29710              		.loc 1 549 3 is_stmt 1 view .LVU7859
 29711 0086 D6E7     		b	.L2140
 29712              	.LVL2332:
 29713              	.L2152:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 29714              		.loc 1 549 3 is_stmt 0 view .LVU7860
 29715              	.LBE3815:
 29716              	.LBE3814:
 29717              	.LBE3813:
 29718              	.LBE3812:
6317:src/xeq.c     **** 		// We need additional room for lettered registers
 29719              		.loc 1 6317 3 is_stmt 1 view .LVU7861
6319:src/xeq.c     **** 	}
 29720              		.loc 1 6319 14 is_stmt 0 view .LVU7862
 29721 0088 4300     		lsls	r3, r0, #1
6317:src/xeq.c     **** 		// We need additional room for lettered registers
 29722              		.loc 1 6317 17 view .LVU7863
 29723 008a 4FEA0018 		lsl	r8, r0, #4
 29724              	.LVL2333:
6319:src/xeq.c     **** 	}
 29725              		.loc 1 6319 3 is_stmt 1 view .LVU7864
6319:src/xeq.c     **** 	}
 29726              		.loc 1 6319 7 is_stmt 0 view .LVU7865
 29727 008e 03F10C04 		add	r4, r3, #12
 29728              	.LVL2334:
6319:src/xeq.c     **** 	}
 29729              		.loc 1 6319 7 view .LVU7866
 29730 0092 C8E7     		b	.L2142
 29731              	.LVL2335:
 29732              	.L2155:
6344:src/xeq.c     **** 	NumRegs = arg;
 29733              		.loc 1 6344 3 is_stmt 1 view .LVU7867
6344:src/xeq.c     **** 	NumRegs = arg;
 29734              		.loc 1 6344 8 is_stmt 0 view .LVU7868
 29735 0094 3868     		ldr	r0, [r7]
6344:src/xeq.c     **** 	NumRegs = arg;
 29736              		.loc 1 6344 41 view .LVU7869
 29737 0096 6A42     		rsbs	r2, r5, #0
6344:src/xeq.c     **** 	NumRegs = arg;
 29738              		.loc 1 6344 26 view .LVU7870
 29739 0098 00EBC500 		add	r0, r0, r5, lsl #3
6344:src/xeq.c     **** 	NumRegs = arg;
 29740              		.loc 1 6344 3 view .LVU7871
 29741 009c 3146     		mov	r1, r6
 29742 009e D200     		lsls	r2, r2, #3
ARM GAS  /tmp/cccVhVyH.s 			page 759


 29743 00a0 00F5EA60 		add	r0, r0, #1872
 29744 00a4 FFF7FEFF 		bl	xset
 29745              	.LVL2336:
 29746 00a8 E0E7     		b	.L2147
 29747              	.L2157:
 29748 00aa 00BF     		.align	2
 29749              	.L2156:
 29750 00ac 00000000 		.word	main_ram
 29751 00b0 00000000 		.word	SizeStatRegs
 29752 00b4 00000000 		.word	Error
 29753              		.cfi_endproc
 29754              	.LFE277:
 29756              		.section	.text.op_double,"ax",%progbits
 29757              		.align	1
 29758              		.p2align 2,,3
 29759              		.global	op_double
 29760              		.syntax unified
 29761              		.thumb
 29762              		.thumb_func
 29763              		.fpu fpv4-sp-d16
 29765              	op_double:
 29766              	.LVL2337:
 29767              	.LFB218:
4110:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 29768              		.loc 1 4110 31 is_stmt 1 view -0
 29769              		.cfi_startproc
 29770              		@ args = 0, pretend = 0, frame = 40
 29771              		@ frame_needed = 0, uses_anonymous_args = 0
4111:src/xeq.c     **** 	const int intm = is_intmode();
 29772              		.loc 1 4111 2 view .LVU7873
4110:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 29773              		.loc 1 4110 31 is_stmt 0 view .LVU7874
 29774 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 29775              		.cfi_def_cfa_offset 24
 29776              		.cfi_offset 4, -24
 29777              		.cfi_offset 5, -20
 29778              		.cfi_offset 6, -16
 29779              		.cfi_offset 7, -12
 29780              		.cfi_offset 8, -8
 29781              		.cfi_offset 14, -4
4112:src/xeq.c     **** 	int i;
 29782              		.loc 1 4112 19 view .LVU7875
 29783 0004 454E     		ldr	r6, .L2186
 29784 0006 3368     		ldr	r3, [r6]
4115:src/xeq.c     **** 		// Mode switch
 29785              		.loc 1 4115 5 view .LVU7876
 29786 0008 A0F1B504 		sub	r4, r0, #181
4115:src/xeq.c     **** 		// Mode switch
 29787              		.loc 1 4115 19 view .LVU7877
 29788 000c 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
4112:src/xeq.c     **** 	int i;
 29789              		.loc 1 4112 19 view .LVU7878
 29790 0010 93F8E887 		ldrb	r8, [r3, #2024]	@ zero_extendqisi2
 29791              	.LVL2338:
4112:src/xeq.c     **** 	int i;
 29792              		.loc 1 4112 2 is_stmt 1 view .LVU7879
4115:src/xeq.c     **** 		// Mode switch
ARM GAS  /tmp/cccVhVyH.s 			page 760


 29793              		.loc 1 4115 5 is_stmt 0 view .LVU7880
 29794 0014 B4FA84F4 		clz	r4, r4
 29795 0018 C2F38011 		ubfx	r1, r2, #6, #1
 29796 001c 6409     		lsrs	r4, r4, #5
 29797 001e 8C42     		cmp	r4, r1
4110:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 29798              		.loc 1 4110 31 view .LVU7881
 29799 0020 8AB0     		sub	sp, sp, #40
 29800              		.cfi_def_cfa_offset 64
4112:src/xeq.c     **** 	int i;
 29801              		.loc 1 4112 12 view .LVU7882
 29802 0022 08F00108 		and	r8, r8, #1
 29803              	.LVL2339:
4113:src/xeq.c     **** 
 29804              		.loc 1 4113 2 is_stmt 1 view .LVU7883
4115:src/xeq.c     **** 		// Mode switch
 29805              		.loc 1 4115 2 view .LVU7884
4115:src/xeq.c     **** 		// Mode switch
 29806              		.loc 1 4115 5 is_stmt 0 view .LVU7885
 29807 0026 41D0     		beq	.L2159
4117:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 29808              		.loc 1 4117 3 is_stmt 1 view .LVU7886
4117:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 29809              		.loc 1 4117 6 is_stmt 0 view .LVU7887
 29810 0028 B528     		cmp	r0, #181
 29811 002a 4AD0     		beq	.L2184
4135:src/xeq.c     **** 				// Convert X to K to single precision
 29812              		.loc 1 4135 4 is_stmt 1 view .LVU7888
4135:src/xeq.c     **** 				// Convert X to K to single precision
 29813              		.loc 1 4135 7 is_stmt 0 view .LVU7889
 29814 002c B8F1000F 		cmp	r8, #0
 29815 0030 25D1     		bne	.L2167
 29816 0032 6F24     		movs	r4, #111
 29817 0034 01AF     		add	r7, sp, #4
 29818              	.LVL2340:
 29819              	.L2169:
4139:src/xeq.c     **** 			}
 29820              		.loc 1 4139 6 is_stmt 1 discriminator 3 view .LVU7890
4139:src/xeq.c     **** 			}
 29821              		.loc 1 4139 28 is_stmt 0 discriminator 3 view .LVU7891
 29822 0036 03F58663 		add	r3, r3, #1072
 29823              	.LBB3816:
 29824              	.LBB3817:
 719:src/xeq.c     **** }
 29825              		.loc 1 719 9 discriminator 3 view .LVU7892
 29826 003a 2046     		mov	r0, r4
 29827              	.LBE3817:
 29828              	.LBE3816:
4139:src/xeq.c     **** 			}
 29829              		.loc 1 4139 6 discriminator 3 view .LVU7893
 29830 003c 03EBC405 		add	r5, r3, r4, lsl #3
 29831              	.LVL2341:
 29832              	.LBB3819:
 29833              	.LBI3816:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 29834              		.loc 1 718 11 is_stmt 1 discriminator 3 view .LVU7894
 29835              	.LBB3818:
ARM GAS  /tmp/cccVhVyH.s 			page 761


 719:src/xeq.c     **** }
 29836              		.loc 1 719 2 discriminator 3 view .LVU7895
 719:src/xeq.c     **** }
 29837              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU7896
 29838 0040 FFF7FEFF 		bl	get_reg_n
 29839              	.LVL2342:
 719:src/xeq.c     **** }
 29840              		.loc 1 719 9 discriminator 3 view .LVU7897
 29841              	.LBE3818:
 29842              	.LBE3819:
 29843              	.LBB3820:
 29844              	.LBI3820:
 648:src/xeq.c     **** 	decNumber temp;
 29845              		.loc 1 648 6 is_stmt 1 discriminator 3 view .LVU7898
 29846              	.LBB3821:
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 29847              		.loc 1 649 2 discriminator 3 view .LVU7899
 650:src/xeq.c     **** }
 29848              		.loc 1 650 2 discriminator 3 view .LVU7900
 650:src/xeq.c     **** }
 29849              		.loc 1 650 24 is_stmt 0 discriminator 3 view .LVU7901
 29850 0044 3946     		mov	r1, r7
 29851 0046 FFF7FEFF 		bl	decimal128ToNumber
 29852              	.LVL2343:
 650:src/xeq.c     **** }
 29853              		.loc 1 650 24 discriminator 3 view .LVU7902
 29854 004a 013C     		subs	r4, r4, #1
 29855              	.LVL2344:
 650:src/xeq.c     **** }
 29856              		.loc 1 650 24 discriminator 3 view .LVU7903
 29857 004c 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 29858              		.loc 1 650 2 discriminator 3 view .LVU7904
 29859 004e 2846     		mov	r0, r5
 29860 0050 FFF7FEFF 		bl	packed_from_number
 29861              	.LVL2345:
 650:src/xeq.c     **** }
 29862              		.loc 1 650 2 discriminator 3 view .LVU7905
 29863              	.LBE3821:
 29864              	.LBE3820:
4138:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 29865              		.loc 1 4138 50 is_stmt 1 discriminator 3 view .LVU7906
4138:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 29866              		.loc 1 4138 42 discriminator 3 view .LVU7907
4138:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 29867              		.loc 1 4138 5 is_stmt 0 discriminator 3 view .LVU7908
 29868 0054 632C     		cmp	r4, #99
 29869 0056 3368     		ldr	r3, [r6]
 29870 0058 EDD1     		bne	.L2169
4141:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29871              		.loc 1 4141 4 is_stmt 1 view .LVU7909
4141:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29872              		.loc 1 4141 23 is_stmt 0 view .LVU7910
 29873 005a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
4142:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29874              		.loc 1 4142 7 view .LVU7911
 29875 005e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
ARM GAS  /tmp/cccVhVyH.s 			page 762


4141:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29876              		.loc 1 4141 23 view .LVU7912
 29877 0062 6FF38612 		bfc	r2, #6, #1
4142:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29878              		.loc 1 4142 7 view .LVU7913
 29879 0066 6429     		cmp	r1, #100
4141:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29880              		.loc 1 4141 23 view .LVU7914
 29881 0068 83F8E927 		strb	r2, [r3, #2025]
4142:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29882              		.loc 1 4142 4 is_stmt 1 view .LVU7915
4142:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29883              		.loc 1 4142 7 is_stmt 0 view .LVU7916
 29884 006c 1AD8     		bhi	.L2172
 29885              	.LVL2346:
 29886              	.L2181:
4146:src/xeq.c     **** 	if (intm) {
 29887              		.loc 1 4146 2 is_stmt 1 view .LVU7917
4146:src/xeq.c     **** 	if (intm) {
 29888              		.loc 1 4146 14 is_stmt 0 view .LVU7918
 29889 006e 6420     		movs	r0, #100
 29890 0070 FFF7FEFF 		bl	get_reg_n
 29891              	.LVL2347:
4146:src/xeq.c     **** 	if (intm) {
 29892              		.loc 1 4146 12 view .LVU7919
 29893 0074 2A4B     		ldr	r3, .L2186+4
 29894 0076 1860     		str	r0, [r3]
4147:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29895              		.loc 1 4147 2 is_stmt 1 view .LVU7920
 29896              	.L2158:
4151:src/xeq.c     **** 
 29897              		.loc 1 4151 1 is_stmt 0 view .LVU7921
 29898 0078 0AB0     		add	sp, sp, #40
 29899              		.cfi_remember_state
 29900              		.cfi_def_cfa_offset 24
 29901              		@ sp needed
 29902 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29903              	.LVL2348:
 29904              	.L2167:
 29905              		.cfi_restore_state
4141:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29906              		.loc 1 4141 4 is_stmt 1 view .LVU7922
4142:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29907              		.loc 1 4142 7 is_stmt 0 view .LVU7923
 29908 007e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
4141:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29909              		.loc 1 4141 23 view .LVU7924
 29910 0082 6FF38612 		bfc	r2, #6, #1
4142:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29911              		.loc 1 4142 7 view .LVU7925
 29912 0086 6429     		cmp	r1, #100
4141:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29913              		.loc 1 4141 23 view .LVU7926
 29914 0088 83F8E927 		strb	r2, [r3, #2025]
4142:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29915              		.loc 1 4142 4 is_stmt 1 view .LVU7927
4142:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
ARM GAS  /tmp/cccVhVyH.s 			page 763


 29916              		.loc 1 4142 7 is_stmt 0 view .LVU7928
 29917 008c 0AD8     		bhi	.L2172
 29918              	.LVL2349:
 29919              	.L2180:
4146:src/xeq.c     **** 	if (intm) {
 29920              		.loc 1 4146 2 is_stmt 1 view .LVU7929
4146:src/xeq.c     **** 	if (intm) {
 29921              		.loc 1 4146 14 is_stmt 0 view .LVU7930
 29922 008e 6420     		movs	r0, #100
 29923 0090 FFF7FEFF 		bl	get_reg_n
 29924              	.LVL2350:
4146:src/xeq.c     **** 	if (intm) {
 29925              		.loc 1 4146 12 view .LVU7931
 29926 0094 224B     		ldr	r3, .L2186+4
 29927 0096 1860     		str	r0, [r3]
4147:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29928              		.loc 1 4147 2 is_stmt 1 view .LVU7932
 29929              	.L2171:
4149:src/xeq.c     **** 	}
 29930              		.loc 1 4149 3 view .LVU7933
 29931 0098 DC20     		movs	r0, #220
 29932 009a FFF7FEFF 		bl	op_float
 29933              	.LVL2351:
4151:src/xeq.c     **** 
 29934              		.loc 1 4151 1 is_stmt 0 view .LVU7934
 29935 009e 0AB0     		add	sp, sp, #40
 29936              		.cfi_remember_state
 29937              		.cfi_def_cfa_offset 24
 29938              		@ sp needed
 29939 00a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29940              	.LVL2352:
 29941              	.L2172:
 29942              		.cfi_restore_state
4143:src/xeq.c     **** 		}
 29943              		.loc 1 4143 5 is_stmt 1 view .LVU7935
 29944 00a4 7D21     		movs	r1, #125
 29945 00a6 6420     		movs	r0, #100
 29946 00a8 FFF7FEFF 		bl	cmdregs
 29947              	.LVL2353:
 29948              	.L2159:
4146:src/xeq.c     **** 	if (intm) {
 29949              		.loc 1 4146 2 view .LVU7936
4146:src/xeq.c     **** 	if (intm) {
 29950              		.loc 1 4146 14 is_stmt 0 view .LVU7937
 29951 00ac 6420     		movs	r0, #100
 29952 00ae FFF7FEFF 		bl	get_reg_n
 29953              	.LVL2354:
4146:src/xeq.c     **** 	if (intm) {
 29954              		.loc 1 4146 12 view .LVU7938
 29955 00b2 1B4B     		ldr	r3, .L2186+4
 29956 00b4 1860     		str	r0, [r3]
4147:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29957              		.loc 1 4147 2 is_stmt 1 view .LVU7939
4147:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29958              		.loc 1 4147 5 is_stmt 0 view .LVU7940
 29959 00b6 B8F1000F 		cmp	r8, #0
 29960 00ba EDD1     		bne	.L2171
ARM GAS  /tmp/cccVhVyH.s 			page 764


4151:src/xeq.c     **** 
 29961              		.loc 1 4151 1 view .LVU7941
 29962 00bc 0AB0     		add	sp, sp, #40
 29963              		.cfi_remember_state
 29964              		.cfi_def_cfa_offset 24
 29965              		@ sp needed
 29966 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29967              	.LVL2355:
 29968              	.L2184:
 29969              		.cfi_restore_state
4118:src/xeq.c     **** 				// Need space for double precision stack
 29970              		.loc 1 4118 4 is_stmt 1 view .LVU7942
4118:src/xeq.c     **** 				// Need space for double precision stack
 29971              		.loc 1 4118 7 is_stmt 0 view .LVU7943
 29972 00c2 93F8CF27 		ldrb	r2, [r3, #1999]	@ zero_extendqisi2
 29973 00c6 0B2A     		cmp	r2, #11
 29974 00c8 1ED9     		bls	.L2185
 29975              	.LVL2356:
 29976              	.L2161:
4126:src/xeq.c     **** 			if (! intm) {
 29977              		.loc 1 4126 4 is_stmt 1 view .LVU7944
4126:src/xeq.c     **** 			if (! intm) {
 29978              		.loc 1 4126 23 is_stmt 0 view .LVU7945
 29979 00ca 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 29980 00ce 42F04002 		orr	r2, r2, #64
 29981 00d2 83F8E927 		strb	r2, [r3, #2025]
4127:src/xeq.c     **** 				// Convert X to K to double precision
 29982              		.loc 1 4127 4 is_stmt 1 view .LVU7946
4127:src/xeq.c     **** 				// Convert X to K to double precision
 29983              		.loc 1 4127 7 is_stmt 0 view .LVU7947
 29984 00d6 B8F1000F 		cmp	r8, #0
 29985 00da D8D1     		bne	.L2180
 29986 00dc 6424     		movs	r4, #100
 29987 00de 01AF     		add	r7, sp, #4
 29988              	.L2165:
 29989              	.LVL2357:
4131:src/xeq.c     **** 			}
 29990              		.loc 1 4131 6 is_stmt 1 view .LVU7948
 29991              	.LBB3822:
 29992              	.LBI3822:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 29993              		.loc 1 718 11 view .LVU7949
 29994              	.LBB3823:
 719:src/xeq.c     **** }
 29995              		.loc 1 719 2 view .LVU7950
 719:src/xeq.c     **** }
 29996              		.loc 1 719 9 is_stmt 0 view .LVU7951
 29997 00e0 2046     		mov	r0, r4
 29998 00e2 FFF7FEFF 		bl	get_reg_n
 29999              	.LVL2358:
 30000              	.LBE3823:
 30001              	.LBE3822:
4131:src/xeq.c     **** 			}
 30002              		.loc 1 4131 48 view .LVU7952
 30003 00e6 3368     		ldr	r3, [r6]
 30004 00e8 03F58663 		add	r3, r3, #1072
 30005              	.LBB3825:
ARM GAS  /tmp/cccVhVyH.s 			page 765


 30006              	.LBB3824:
 719:src/xeq.c     **** }
 30007              		.loc 1 719 9 view .LVU7953
 30008 00ec 0546     		mov	r5, r0
 30009              	.LVL2359:
 719:src/xeq.c     **** }
 30010              		.loc 1 719 9 view .LVU7954
 30011              	.LBE3824:
 30012              	.LBE3825:
 30013              	.LBB3826:
 30014              	.LBI3826:
 654:src/xeq.c     **** 	decNumber temp;
 30015              		.loc 1 654 6 is_stmt 1 view .LVU7955
 30016              	.LBB3827:
 655:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 30017              		.loc 1 655 2 view .LVU7956
 656:src/xeq.c     **** }
 30018              		.loc 1 656 2 view .LVU7957
 656:src/xeq.c     **** }
 30019              		.loc 1 656 27 is_stmt 0 view .LVU7958
 30020 00ee 3946     		mov	r1, r7
 30021 00f0 03EBC400 		add	r0, r3, r4, lsl #3
 30022              	.LVL2360:
 656:src/xeq.c     **** }
 30023              		.loc 1 656 27 view .LVU7959
 30024 00f4 FFF7FEFF 		bl	decimal64ToNumber
 30025              	.LVL2361:
 656:src/xeq.c     **** }
 30026              		.loc 1 656 27 view .LVU7960
 30027 00f8 0134     		adds	r4, r4, #1
 30028              	.LVL2362:
 656:src/xeq.c     **** }
 30029              		.loc 1 656 27 view .LVU7961
 30030 00fa 0146     		mov	r1, r0
 656:src/xeq.c     **** }
 30031              		.loc 1 656 2 view .LVU7962
 30032 00fc 2846     		mov	r0, r5
 30033 00fe FFF7FEFF 		bl	packed128_from_number
 30034              	.LVL2363:
 656:src/xeq.c     **** }
 30035              		.loc 1 656 2 view .LVU7963
 30036              	.LBE3827:
 30037              	.LBE3826:
4130:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 30038              		.loc 1 4130 45 is_stmt 1 view .LVU7964
4130:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 30039              		.loc 1 4130 17 view .LVU7965
4130:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 30040              		.loc 1 4130 5 is_stmt 0 view .LVU7966
 30041 0102 702C     		cmp	r4, #112
 30042 0104 ECD1     		bne	.L2165
 30043 0106 B2E7     		b	.L2181
 30044              	.LVL2364:
 30045              	.L2185:
4120:src/xeq.c     **** 				if (Error) {
 30046              		.loc 1 4120 5 is_stmt 1 view .LVU7967
 30047 0108 7D21     		movs	r1, #125
ARM GAS  /tmp/cccVhVyH.s 			page 766


 30048 010a 0C20     		movs	r0, #12
 30049              	.LVL2365:
4120:src/xeq.c     **** 				if (Error) {
 30050              		.loc 1 4120 5 is_stmt 0 view .LVU7968
 30051 010c FFF7FEFF 		bl	cmdregs
 30052              	.LVL2366:
4121:src/xeq.c     **** 					return;
 30053              		.loc 1 4121 5 is_stmt 1 view .LVU7969
4121:src/xeq.c     **** 					return;
 30054              		.loc 1 4121 9 is_stmt 0 view .LVU7970
 30055 0110 044B     		ldr	r3, .L2186+8
4121:src/xeq.c     **** 					return;
 30056              		.loc 1 4121 8 view .LVU7971
 30057 0112 1B68     		ldr	r3, [r3]
 30058 0114 002B     		cmp	r3, #0
 30059 0116 AFD1     		bne	.L2158
 30060 0118 3368     		ldr	r3, [r6]
 30061 011a D6E7     		b	.L2161
 30062              	.L2187:
 30063              		.align	2
 30064              	.L2186:
 30065 011c 00000000 		.word	main_ram
 30066 0120 00000000 		.word	StackBase
 30067 0124 00000000 		.word	Error
 30068              		.cfi_endproc
 30069              	.LFE218:
 30071              		.section	.text.cmdrestm,"ax",%progbits
 30072              		.align	1
 30073              		.p2align 2,,3
 30074              		.global	cmdrestm
 30075              		.syntax unified
 30076              		.thumb
 30077              		.thumb_func
 30078              		.fpu fpv4-sp-d16
 30080              	cmdrestm:
 30081              	.LVL2367:
 30082              	.LFB213:
3792:src/xeq.c     **** 	const int dbl = is_dblmode();
 30083              		.loc 1 3792 47 is_stmt 1 view -0
 30084              		.cfi_startproc
 30085              		@ args = 0, pretend = 0, frame = 0
 30086              		@ frame_needed = 0, uses_anonymous_args = 0
3793:src/xeq.c     **** 	const int intm = is_intmode();
 30087              		.loc 1 3793 2 view .LVU7973
 30088              	.LBB3828:
 30089              	.LBI3828:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 30090              		.loc 1 1121 5 view .LVU7974
 30091              	.LBB3829:
1122:src/xeq.c     **** }
 30092              		.loc 1 1122 2 view .LVU7975
 30093              	.LBE3829:
 30094              	.LBE3828:
3792:src/xeq.c     **** 	const int dbl = is_dblmode();
 30095              		.loc 1 3792 47 is_stmt 0 view .LVU7976
 30096 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 30097              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cccVhVyH.s 			page 767


 30098              		.cfi_offset 3, -24
 30099              		.cfi_offset 4, -20
 30100              		.cfi_offset 5, -16
 30101              		.cfi_offset 6, -12
 30102              		.cfi_offset 7, -8
 30103              		.cfi_offset 14, -4
 30104              	.LBB3837:
 30105              	.LBB3830:
1122:src/xeq.c     **** }
 30106              		.loc 1 1122 12 view .LVU7977
 30107 0002 254E     		ldr	r6, .L2195
 30108 0004 3568     		ldr	r5, [r6]
 30109              	.LBE3830:
 30110              	.LBE3837:
3794:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 30111              		.loc 1 3794 19 view .LVU7978
 30112 0006 95F8E847 		ldrb	r4, [r5, #2024]	@ zero_extendqisi2
 30113              	.LBB3838:
 30114              	.LBB3831:
1122:src/xeq.c     **** }
 30115              		.loc 1 1122 24 view .LVU7979
 30116 000a B5F8E877 		ldrh	r7, [r5, #2024]
 30117              	.LVL2368:
1122:src/xeq.c     **** }
 30118              		.loc 1 1122 24 view .LVU7980
 30119              	.LBE3831:
 30120              	.LBE3838:
3794:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 30121              		.loc 1 3794 2 is_stmt 1 view .LVU7981
3795:src/xeq.c     **** 
 30122              		.loc 1 3795 18 is_stmt 0 view .LVU7982
 30123 000e FFF7FEFF 		bl	get_reg_n
 30124              	.LVL2369:
3795:src/xeq.c     **** 
 30125              		.loc 1 3795 2 view .LVU7983
 30126 0012 0822     		movs	r2, #8
3795:src/xeq.c     **** 
 30127              		.loc 1 3795 18 view .LVU7984
 30128 0014 0146     		mov	r1, r0
3795:src/xeq.c     **** 
 30129              		.loc 1 3795 2 view .LVU7985
 30130 0016 05F2E470 		addw	r0, r5, #2020
 30131 001a FFF7FEFF 		bl	xcopy
 30132              	.LVL2370:
3802:src/xeq.c     **** 		// Switch back to decimal or integer mode
 30133              		.loc 1 3802 14 view .LVU7986
 30134 001e 3368     		ldr	r3, [r6]
 30135 0020 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3794:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 30136              		.loc 1 3794 19 view .LVU7987
 30137 0024 04F00104 		and	r4, r4, #1
 30138              	.LVL2371:
3795:src/xeq.c     **** 
 30139              		.loc 1 3795 2 is_stmt 1 view .LVU7988
3802:src/xeq.c     **** 		// Switch back to decimal or integer mode
 30140              		.loc 1 3802 2 view .LVU7989
3802:src/xeq.c     **** 		// Switch back to decimal or integer mode
ARM GAS  /tmp/cccVhVyH.s 			page 768


 30141              		.loc 1 3802 5 is_stmt 0 view .LVU7990
 30142 0028 02F00101 		and	r1, r2, #1
 30143 002c A142     		cmp	r1, r4
 30144 002e 08D0     		beq	.L2189
3804:src/xeq.c     **** 		if (intm)
 30145              		.loc 1 3804 3 is_stmt 1 view .LVU7991
3804:src/xeq.c     **** 		if (intm)
 30146              		.loc 1 3804 15 is_stmt 0 view .LVU7992
 30147 0030 64F30002 		bfi	r2, r4, #0, #1
 30148 0034 83F8E827 		strb	r2, [r3, #2024]
3805:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 30149              		.loc 1 3805 3 is_stmt 1 view .LVU7993
3805:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 30150              		.loc 1 3805 6 is_stmt 0 view .LVU7994
 30151 0038 4CB3     		cbz	r4, .L2190
3806:src/xeq.c     **** 		else
 30152              		.loc 1 3806 4 is_stmt 1 view .LVU7995
 30153 003a DD20     		movs	r0, #221
 30154 003c FFF7FEFF 		bl	op_float
 30155              	.LVL2372:
 30156 0040 3368     		ldr	r3, [r6]
 30157              	.L2189:
3810:src/xeq.c     **** 		// Switch back to double/single precision
 30158              		.loc 1 3810 2 view .LVU7996
3810:src/xeq.c     **** 		// Switch back to double/single precision
 30159              		.loc 1 3810 6 is_stmt 0 view .LVU7997
 30160 0042 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3810:src/xeq.c     **** 		// Switch back to double/single precision
 30161              		.loc 1 3810 5 view .LVU7998
 30162 0046 D207     		lsls	r2, r2, #31
 30163 0048 20D4     		bmi	.L2188
 30164              	.LBB3839:
 30165              	.LBB3840:
1122:src/xeq.c     **** }
 30166              		.loc 1 1122 24 view .LVU7999
 30167 004a B3F8E827 		ldrh	r2, [r3, #2024]
 30168              	.LBE3840:
 30169              	.LBE3839:
 30170              	.LBB3843:
 30171              	.LBB3832:
 30172 004e 44F20101 		movw	r1, #16385
 30173              	.LBE3832:
 30174              	.LBE3843:
 30175              	.LBB3844:
 30176              	.LBB3841:
 30177 0052 0A40     		ands	r2, r2, r1
 30178              	.LBE3841:
 30179              	.LBE3844:
 30180              	.LBB3845:
 30181              	.LBB3833:
 30182 0054 0F40     		ands	r7, r7, r1
 30183              	.LVL2373:
1122:src/xeq.c     **** }
 30184              		.loc 1 1122 24 view .LVU8000
 30185              	.LBE3833:
 30186              	.LBE3845:
3810:src/xeq.c     **** 		// Switch back to double/single precision
ARM GAS  /tmp/cccVhVyH.s 			page 769


 30187              		.loc 1 3810 21 view .LVU8001
 30188 0056 A2F58042 		sub	r2, r2, #16384
 30189              	.LBB3846:
 30190              	.LBB3834:
1122:src/xeq.c     **** }
 30191              		.loc 1 1122 24 view .LVU8002
 30192 005a A7F58041 		sub	r1, r7, #16384
 30193              	.LBE3834:
 30194              	.LBE3846:
3810:src/xeq.c     **** 		// Switch back to double/single precision
 30195              		.loc 1 3810 21 view .LVU8003
 30196 005e B2FA82F2 		clz	r2, r2
 30197              	.LBB3847:
 30198              	.LBB3835:
1122:src/xeq.c     **** }
 30199              		.loc 1 1122 24 view .LVU8004
 30200 0062 B1FA81F1 		clz	r1, r1
 30201              	.LBE3835:
 30202              	.LBE3847:
3810:src/xeq.c     **** 		// Switch back to double/single precision
 30203              		.loc 1 3810 21 view .LVU8005
 30204 0066 5209     		lsrs	r2, r2, #5
 30205              	.LBB3848:
 30206              	.LBB3836:
1122:src/xeq.c     **** }
 30207              		.loc 1 1122 24 view .LVU8006
 30208 0068 4909     		lsrs	r1, r1, #5
 30209              	.LBE3836:
 30210              	.LBE3848:
 30211              	.LBB3849:
 30212              	.LBI3839:
1121:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 30213              		.loc 1 1121 5 is_stmt 1 view .LVU8007
 30214              	.LBB3842:
1122:src/xeq.c     **** }
 30215              		.loc 1 1122 2 view .LVU8008
 30216              	.LBE3842:
 30217              	.LBE3849:
3810:src/xeq.c     **** 		// Switch back to double/single precision
 30218              		.loc 1 3810 21 is_stmt 0 view .LVU8009
 30219 006a 8A42     		cmp	r2, r1
 30220 006c 0ED0     		beq	.L2188
3812:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 30221              		.loc 1 3812 3 is_stmt 1 view .LVU8010
3812:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 30222              		.loc 1 3812 22 is_stmt 0 view .LVU8011
 30223 006e 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 30224 0072 61F38612 		bfi	r2, r1, #6, #1
3813:src/xeq.c     **** 	}
 30225              		.loc 1 3813 3 view .LVU8012
 30226 0076 B7F5804F 		cmp	r7, #16384
3812:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 30227              		.loc 1 3812 22 view .LVU8013
 30228 007a 83F8E927 		strb	r2, [r3, #2025]
3813:src/xeq.c     **** 	}
 30229              		.loc 1 3813 3 is_stmt 1 view .LVU8014
3815:src/xeq.c     **** #endif
ARM GAS  /tmp/cccVhVyH.s 			page 770


 30230              		.loc 1 3815 1 is_stmt 0 view .LVU8015
 30231 007e BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 30232              		.cfi_remember_state
 30233              		.cfi_restore 14
 30234              		.cfi_restore 7
 30235              		.cfi_restore 6
 30236              		.cfi_restore 5
 30237              		.cfi_restore 4
 30238              		.cfi_restore 3
 30239              		.cfi_def_cfa_offset 0
3813:src/xeq.c     **** 	}
 30240              		.loc 1 3813 3 view .LVU8016
 30241 0082 0CBF     		ite	eq
 30242 0084 B620     		moveq	r0, #182
 30243 0086 B520     		movne	r0, #181
 30244 0088 FFF7FEBF 		b	op_double
 30245              	.LVL2374:
 30246              	.L2188:
 30247              		.cfi_restore_state
3815:src/xeq.c     **** #endif
 30248              		.loc 1 3815 1 view .LVU8017
 30249 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 30250              	.LVL2375:
 30251              	.L2190:
3808:src/xeq.c     **** 	}
 30252              		.loc 1 3808 4 is_stmt 1 view .LVU8018
 30253 008e FFF7FEFF 		bl	switch_to_int
 30254              	.LVL2376:
 30255 0092 3368     		ldr	r3, [r6]
 30256 0094 D5E7     		b	.L2189
 30257              	.L2196:
 30258 0096 00BF     		.align	2
 30259              	.L2195:
 30260 0098 00000000 		.word	main_ram
 30261              		.cfi_endproc
 30262              	.LFE213:
 30264              		.section	.text.cmdxin,"ax",%progbits
 30265              		.align	1
 30266              		.p2align 2,,3
 30267              		.global	cmdxin
 30268              		.syntax unified
 30269              		.thumb
 30270              		.thumb_func
 30271              		.fpu fpv4-sp-d16
 30273              	cmdxin:
 30274              	.LVL2377:
 30275              	.LFB271:
5931:src/xeq.c     **** 
 30276              		.loc 1 5931 45 view -0
 30277              		.cfi_startproc
 30278              		@ args = 0, pretend = 0, frame = 40
 30279              		@ frame_needed = 0, uses_anonymous_args = 0
5933:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 30280              		.loc 1 5933 2 view .LVU8020
5943:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 30281              		.loc 1 5943 2 view .LVU8021
5931:src/xeq.c     **** 
ARM GAS  /tmp/cccVhVyH.s 			page 771


 30282              		.loc 1 5931 45 is_stmt 0 view .LVU8022
 30283 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 30284              		.cfi_def_cfa_offset 24
 30285              		.cfi_offset 4, -24
 30286              		.cfi_offset 5, -20
 30287              		.cfi_offset 6, -16
 30288              		.cfi_offset 7, -12
 30289              		.cfi_offset 8, -8
 30290              		.cfi_offset 14, -4
5943:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 30291              		.loc 1 5943 6 view .LVU8023
 30292 0004 6B4D     		ldr	r5, .L2226
5943:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 30293              		.loc 1 5943 5 view .LVU8024
 30294 0006 95F90130 		ldrsb	r3, [r5, #1]
 30295 000a 002B     		cmp	r3, #0
5931:src/xeq.c     **** 
 30296              		.loc 1 5931 45 view .LVU8025
 30297 000c 8AB0     		sub	sp, sp, #40
 30298              		.cfi_def_cfa_offset 64
5943:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 30299              		.loc 1 5943 5 view .LVU8026
 30300 000e C0F2AF80 		blt	.L2223
5951:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 30301              		.loc 1 5951 2 is_stmt 1 view .LVU8027
 30302 0012 694E     		ldr	r6, .L2226+4
5956:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 30303              		.loc 1 5956 26 is_stmt 0 view .LVU8028
 30304 0014 694F     		ldr	r7, .L2226+8
 30305              	.LBB3865:
 30306              	.LBB3866:
 744:src/xeq.c     **** }
 30307              		.loc 1 744 15 view .LVU8029
 30308 0016 DFF8B881 		ldr	r8, .L2226+28
 30309 001a 0446     		mov	r4, r0
 30310              	.LBE3866:
 30311              	.LBE3865:
5951:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 30312              		.loc 1 5951 2 view .LVU8030
 30313 001c 4FF4E872 		mov	r2, #464
 30314 0020 0021     		movs	r1, #0
 30315              	.LVL2378:
5951:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 30316              		.loc 1 5951 2 view .LVU8031
 30317 0022 3046     		mov	r0, r6
 30318              	.LVL2379:
5951:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 30319              		.loc 1 5951 2 view .LVU8032
 30320 0024 FFF7FEFF 		bl	xset
 30321              	.LVL2380:
5952:src/xeq.c     **** 
 30322              		.loc 1 5952 2 is_stmt 1 view .LVU8033
 30323 0028 1022     		movs	r2, #16
 30324 002a 0021     		movs	r1, #0
 30325 002c 2846     		mov	r0, r5
 30326 002e FFF7FEFF 		bl	xset
 30327              	.LVL2381:
ARM GAS  /tmp/cccVhVyH.s 			page 772


5955:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
 30328              		.loc 1 5955 2 view .LVU8034
 30329              	.LBB3870:
 30330              	.LBI3865:
 743:src/xeq.c     **** 	return State2.state_lift;
 30331              		.loc 1 743 12 view .LVU8035
 30332              	.LBB3867:
 744:src/xeq.c     **** }
 30333              		.loc 1 744 2 view .LVU8036
 30334              	.LBE3867:
 30335              	.LBE3870:
5956:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 30336              		.loc 1 5956 26 is_stmt 0 view .LVU8037
 30337 0032 3A68     		ldr	r2, [r7]
5973:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 30338              		.loc 1 5973 17 view .LVU8038
 30339 0034 6249     		ldr	r1, .L2226+12
5974:src/xeq.c     **** 
 30340              		.loc 1 5974 20 view .LVU8039
 30341 0036 B2F8E2C7 		ldrh	ip, [r2, #2018]
5973:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 30342              		.loc 1 5973 17 view .LVU8040
 30343 003a 0868     		ldr	r0, [r1]
5974:src/xeq.c     **** 
 30344              		.loc 1 5974 20 view .LVU8041
 30345 003c A5F80CC0 		strh	ip, [r5, #12]	@ movhi
5976:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 30346              		.loc 1 5976 9 view .LVU8042
 30347 0040 06F5E87C 		add	ip, r6, #464
 30348 0044 C1F800C0 		str	ip, [r1]
5973:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 30349              		.loc 1 5973 17 view .LVU8043
 30350 0048 A860     		str	r0, [r5, #8]
5958:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 30351              		.loc 1 5958 29 view .LVU8044
 30352 004a 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
5980:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 30353              		.loc 1 5980 12 view .LVU8045
 30354 004e B2F8DEE7 		ldrh	lr, [r2, #2014]
 30355              	.LBB3871:
 30356              	.LBB3868:
 744:src/xeq.c     **** }
 30357              		.loc 1 744 15 view .LVU8046
 30358 0052 98F81700 		ldrb	r0, [r8, #23]	@ zero_extendqisi2
 30359              	.LBE3868:
 30360              	.LBE3871:
5956:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 30361              		.loc 1 5956 32 view .LVU8047
 30362 0056 92F8EA17 		ldrb	r1, [r2, #2026]	@ zero_extendqisi2
5980:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 30363              		.loc 1 5980 12 view .LVU8048
 30364 005a 6FF0010C 		mvn	ip, #1
5958:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 30365              		.loc 1 5958 29 view .LVU8049
 30366 005e 03F00103 		and	r3, r3, #1
5980:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 30367              		.loc 1 5980 12 view .LVU8050
ARM GAS  /tmp/cccVhVyH.s 			page 773


 30368 0062 6CF34F1E 		bfi	lr, ip, #5, #11
 30369              	.LBB3872:
 30370              	.LBB3869:
 744:src/xeq.c     **** }
 30371              		.loc 1 744 15 view .LVU8051
 30372 0066 C0F38010 		ubfx	r0, r0, #6, #1
 30373              	.LBE3869:
 30374              	.LBE3872:
5956:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 30375              		.loc 1 5956 2 is_stmt 1 view .LVU8052
5957:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 30376              		.loc 1 5957 32 is_stmt 0 view .LVU8053
 30377 006a 92F8E9C7 		ldrb	ip, [r2, #2025]	@ zero_extendqisi2
5980:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 30378              		.loc 1 5980 12 view .LVU8054
 30379 006e A2F8DEE7 		strh	lr, [r2, #2014]	@ movhi
5958:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 30380              		.loc 1 5958 21 view .LVU8055
 30381 0072 63F03F03 		orn	r3, r3, #63
 30382 0076 43EA4003 		orr	r3, r3, r0, lsl #1
5956:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 30383              		.loc 1 5956 32 view .LVU8056
 30384 007a C1F3C001 		ubfx	r1, r1, #3, #1
5957:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 30385              		.loc 1 5957 2 is_stmt 1 view .LVU8057
5958:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 30386              		.loc 1 5958 21 is_stmt 0 view .LVU8058
 30387 007e 43EA8103 		orr	r3, r3, r1, lsl #2
5957:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 30388              		.loc 1 5957 32 view .LVU8059
 30389 0082 CCF3801C 		ubfx	ip, ip, #6, #1
5958:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 30390              		.loc 1 5958 2 is_stmt 1 view .LVU8060
5959:src/xeq.c     **** 	XromFlags.state_lift = 1;
 30391              		.loc 1 5959 9 view .LVU8061
5958:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 30392              		.loc 1 5958 21 is_stmt 0 view .LVU8062
 30393 0086 43EACC03 		orr	r3, r3, ip, lsl #3
5959:src/xeq.c     **** 	XromFlags.state_lift = 1;
 30394              		.loc 1 5959 41 view .LVU8063
 30395 008a 92F8EB17 		ldrb	r1, [r2, #2027]	@ zero_extendqisi2
5959:src/xeq.c     **** 	XromFlags.state_lift = 1;
 30396              		.loc 1 5959 33 view .LVU8064
 30397 008e A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
5992:src/xeq.c     **** 	XromIn = (arg & 0x7);
 30398              		.loc 1 5992 35 view .LVU8065
 30399 0090 C4F3C01C 		ubfx	ip, r4, #7, #1
5958:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 30400              		.loc 1 5958 21 view .LVU8066
 30401 0094 43EA0C13 		orr	r3, r3, ip, lsl #4
5991:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 30402              		.loc 1 5991 36 view .LVU8067
 30403 0098 C4F3801C 		ubfx	ip, r4, #6, #1
5958:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 30404              		.loc 1 5958 21 view .LVU8068
 30405 009c 43EA4C13 		orr	r3, r3, ip, lsl #5
5959:src/xeq.c     **** 	XromFlags.state_lift = 1;
ARM GAS  /tmp/cccVhVyH.s 			page 774


 30406              		.loc 1 5959 41 view .LVU8069
 30407 00a0 C1F30211 		ubfx	r1, r1, #4, #3
5960:src/xeq.c     **** 	XromFlags.xIN = 1;
 30408              		.loc 1 5960 2 is_stmt 1 view .LVU8070
5961:src/xeq.c     **** 
 30409              		.loc 1 5961 2 view .LVU8071
5973:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 30410              		.loc 1 5973 2 view .LVU8072
5974:src/xeq.c     **** 
 30411              		.loc 1 5974 2 view .LVU8073
5976:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 30412              		.loc 1 5976 2 view .LVU8074
5980:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 30413              		.loc 1 5980 2 view .LVU8075
5981:src/xeq.c     **** #endif
 30414              		.loc 1 5981 2 view .LVU8076
5980:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 30415              		.loc 1 5980 24 is_stmt 0 view .LVU8077
 30416 00a4 4FF6FE7C 		movw	ip, #65534
5959:src/xeq.c     **** 	XromFlags.state_lift = 1;
 30417              		.loc 1 5959 33 view .LVU8078
 30418 00a8 61F30200 		bfi	r0, r1, #0, #3
5981:src/xeq.c     **** #endif
 30419              		.loc 1 5981 17 view .LVU8079
 30420 00ac 41F2020E 		movw	lr, #4098
5993:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 30421              		.loc 1 5993 16 view .LVU8080
 30422 00b0 04F00701 		and	r1, r4, #7
5958:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 30423              		.loc 1 5958 21 view .LVU8081
 30424 00b4 6B70     		strb	r3, [r5, #1]
5994:src/xeq.c     **** #endif
 30425              		.loc 1 5994 24 view .LVU8082
 30426 00b6 C4F3C204 		ubfx	r4, r4, #3, #3
 30427              	.LVL2382:
5980:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 30428              		.loc 1 5980 24 view .LVU8083
 30429 00ba A2F8E2C7 		strh	ip, [r2, #2018]	@ movhi
5996:src/xeq.c     **** 		// Complex arguments are always in pairs
 30430              		.loc 1 5996 6 view .LVU8084
 30431 00be 5FFA83FC 		uxtb	ip, r3
5996:src/xeq.c     **** 		// Complex arguments are always in pairs
 30432              		.loc 1 5996 5 view .LVU8085
 30433 00c2 DB06     		lsls	r3, r3, #27
5981:src/xeq.c     **** #endif
 30434              		.loc 1 5981 17 view .LVU8086
 30435 00c4 A6F8CCE1 		strh	lr, [r6, #460]	@ movhi
5991:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 30436              		.loc 1 5991 2 is_stmt 1 view .LVU8087
5992:src/xeq.c     **** 	XromIn = (arg & 0x7);
 30437              		.loc 1 5992 2 view .LVU8088
5959:src/xeq.c     **** 	XromFlags.state_lift = 1;
 30438              		.loc 1 5959 33 is_stmt 0 view .LVU8089
 30439 00c8 A870     		strb	r0, [r5, #2]
5993:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 30440              		.loc 1 5993 2 is_stmt 1 view .LVU8090
5993:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
ARM GAS  /tmp/cccVhVyH.s 			page 775


 30441              		.loc 1 5993 9 is_stmt 0 view .LVU8091
 30442 00ca 2971     		strb	r1, [r5, #4]
5994:src/xeq.c     **** #endif
 30443              		.loc 1 5994 2 is_stmt 1 view .LVU8092
5994:src/xeq.c     **** #endif
 30444              		.loc 1 5994 10 is_stmt 0 view .LVU8093
 30445 00cc 6C71     		strb	r4, [r5, #5]
5996:src/xeq.c     **** 		// Complex arguments are always in pairs
 30446              		.loc 1 5996 2 is_stmt 1 view .LVU8094
5996:src/xeq.c     **** 		// Complex arguments are always in pairs
 30447              		.loc 1 5996 5 is_stmt 0 view .LVU8095
 30448 00ce 03D5     		bpl	.L2201
5998:src/xeq.c     **** 		XromOut <<= 1;
 30449              		.loc 1 5998 3 is_stmt 1 view .LVU8096
5998:src/xeq.c     **** 		XromOut <<= 1;
 30450              		.loc 1 5998 10 is_stmt 0 view .LVU8097
 30451 00d0 4900     		lsls	r1, r1, #1
5999:src/xeq.c     **** 	}
 30452              		.loc 1 5999 11 view .LVU8098
 30453 00d2 6400     		lsls	r4, r4, #1
5998:src/xeq.c     **** 		XromOut <<= 1;
 30454              		.loc 1 5998 10 view .LVU8099
 30455 00d4 2971     		strb	r1, [r5, #4]
5999:src/xeq.c     **** 	}
 30456              		.loc 1 5999 3 is_stmt 1 view .LVU8100
5999:src/xeq.c     **** 	}
 30457              		.loc 1 5999 11 is_stmt 0 view .LVU8101
 30458 00d6 6C71     		strb	r4, [r5, #5]
 30459              	.L2201:
6002:src/xeq.c     **** 
 30460              		.loc 1 6002 9 is_stmt 1 view .LVU8102
6002:src/xeq.c     **** 
 30461              		.loc 1 6002 30 is_stmt 0 view .LVU8103
 30462 00d8 92F8EB37 		ldrb	r3, [r2, #2027]	@ zero_extendqisi2
6013:src/xeq.c     **** 		// Convert integers to decimal128
 30463              		.loc 1 6013 5 view .LVU8104
 30464 00dc 1CF0010F 		tst	ip, #1
6002:src/xeq.c     **** 
 30465              		.loc 1 6002 30 view .LVU8105
 30466 00e0 6FF30613 		bfc	r3, #4, #3
 30467 00e4 82F8EB37 		strb	r3, [r2, #2027]
6013:src/xeq.c     **** 		// Convert integers to decimal128
 30468              		.loc 1 6013 2 is_stmt 1 view .LVU8106
6013:src/xeq.c     **** 		// Convert integers to decimal128
 30469              		.loc 1 6013 5 is_stmt 0 view .LVU8107
 30470 00e8 52D1     		bne	.L2224
6021:src/xeq.c     **** 		// No conversion necessary
 30471              		.loc 1 6021 7 is_stmt 1 view .LVU8108
6021:src/xeq.c     **** 		// No conversion necessary
 30472              		.loc 1 6021 10 is_stmt 0 view .LVU8109
 30473 00ea 1CF0080F 		tst	ip, #8
 30474 00ee 47D1     		bne	.L2225
6042:src/xeq.c     **** #endif
 30475              		.loc 1 6042 3 is_stmt 1 view .LVU8110
 30476 00f0 B520     		movs	r0, #181
 30477 00f2 FFF7FEFF 		bl	op_double
 30478              	.LVL2383:
ARM GAS  /tmp/cccVhVyH.s 			page 776


 30479              	.L2203:
6047:src/xeq.c     **** 	UState.stack_depth = 1;
 30480              		.loc 1 6047 2 view .LVU8111
 30481              	.LBB3873:
 30482              	.LBI3873:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30483              		.loc 1 767 6 view .LVU8112
 30484              	.LBB3874:
 768:src/xeq.c     **** }
 30485              		.loc 1 768 5 view .LVU8113
 768:src/xeq.c     **** }
 30486              		.loc 1 768 23 is_stmt 0 view .LVU8114
 30487 00f6 98F81730 		ldrb	r3, [r8, #23]	@ zero_extendqisi2
 30488              	.LBE3874:
 30489              	.LBE3873:
6048:src/xeq.c     **** 
 30490              		.loc 1 6048 21 view .LVU8115
 30491 00fa 3A68     		ldr	r2, [r7]
 30492              	.LBB3876:
 30493              	.LBB3875:
 768:src/xeq.c     **** }
 30494              		.loc 1 768 23 view .LVU8116
 30495 00fc 43F04003 		orr	r3, r3, #64
 30496 0100 88F81730 		strb	r3, [r8, #23]
 30497              	.LBE3875:
 30498              	.LBE3876:
6048:src/xeq.c     **** 
 30499              		.loc 1 6048 2 is_stmt 1 view .LVU8117
6048:src/xeq.c     **** 
 30500              		.loc 1 6048 21 is_stmt 0 view .LVU8118
 30501 0104 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 30502 0108 43F00803 		orr	r3, r3, #8
 30503 010c 82F8EA37 		strb	r3, [r2, #2026]
6051:src/xeq.c     **** 		decNumber x;
 30504              		.loc 1 6051 2 is_stmt 1 view .LVU8119
 30505              	.LVL2384:
6051:src/xeq.c     **** 		decNumber x;
 30506              		.loc 1 6051 14 view .LVU8120
6051:src/xeq.c     **** 		decNumber x;
 30507              		.loc 1 6051 2 is_stmt 0 view .LVU8121
 30508 0110 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 30509 0112 93B3     		cbz	r3, .L2197
6051:src/xeq.c     **** 		decNumber x;
 30510              		.loc 1 6051 9 view .LVU8122
 30511 0114 0024     		movs	r4, #0
 30512 0116 02E0     		b	.L2210
 30513              	.LVL2385:
 30514              	.L2205:
6051:src/xeq.c     **** 		decNumber x;
 30515              		.loc 1 6051 18 view .LVU8123
 30516 0118 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
6051:src/xeq.c     **** 		decNumber x;
 30517              		.loc 1 6051 2 view .LVU8124
 30518 011a A342     		cmp	r3, r4
 30519 011c 2DDD     		ble	.L2197
 30520              	.LVL2386:
 30521              	.L2210:
ARM GAS  /tmp/cccVhVyH.s 			page 777


 30522              	.LBB3877:
6052:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
 30523              		.loc 1 6052 3 is_stmt 1 view .LVU8125
6053:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 30524              		.loc 1 6053 3 view .LVU8126
6053:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 30525              		.loc 1 6053 7 is_stmt 0 view .LVU8127
 30526 011e 04F16401 		add	r1, r4, #100
 30527 0122 01A8     		add	r0, sp, #4
 30528 0124 FFF7FEFF 		bl	getRegister
 30529              	.LVL2387:
 30530              	.LBE3877:
6051:src/xeq.c     **** 		decNumber x;
 30531              		.loc 1 6051 26 is_stmt 1 view .LVU8128
 30532              	.LBB3884:
6053:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 30533              		.loc 1 6053 6 is_stmt 0 view .LVU8129
 30534 0128 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 30535 012a 13F0300F 		tst	r3, #48
 30536              	.LBE3884:
6051:src/xeq.c     **** 		decNumber x;
 30537              		.loc 1 6051 26 view .LVU8130
 30538 012e 04F10104 		add	r4, r4, #1
 30539              	.LVL2388:
6051:src/xeq.c     **** 		decNumber x;
 30540              		.loc 1 6051 14 is_stmt 1 view .LVU8131
 30541              	.LBB3885:
6053:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 30542              		.loc 1 6053 6 is_stmt 0 view .LVU8132
 30543 0132 F1D0     		beq	.L2205
6056:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 30544              		.loc 1 6056 4 is_stmt 1 view .LVU8133
 30545              	.LVL2389:
 30546              	.LBB3878:
 30547              	.LBI3878:
3559:src/xeq.c     **** 	unsigned short mask;
 30548              		.loc 1 3559 5 view .LVU8134
 30549              	.LBB3879:
3560:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 30550              		.loc 1 3560 2 view .LVU8135
3561:src/xeq.c     **** 
 30551              		.loc 1 3561 2 view .LVU8136
3561:src/xeq.c     **** 
 30552              		.loc 1 3561 34 is_stmt 0 view .LVU8137
 30553 0134 0DF10201 		add	r1, sp, #2
 30554 0138 6B20     		movs	r0, #107
 30555 013a FFF7FEFF 		bl	flag_word
 30556              	.LVL2390:
3563:src/xeq.c     **** }
 30557              		.loc 1 3563 2 is_stmt 1 view .LVU8138
3563:src/xeq.c     **** }
 30558              		.loc 1 3563 24 is_stmt 0 view .LVU8139
 30559 013e BDF80230 		ldrh	r3, [sp, #2]
 30560 0142 0288     		ldrh	r2, [r0]
 30561              	.LBE3879:
 30562              	.LBE3878:
6056:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
ARM GAS  /tmp/cccVhVyH.s 			page 778


 30563              		.loc 1 6056 7 view .LVU8140
 30564 0144 1A42     		tst	r2, r3
 30565 0146 2DD0     		beq	.L2206
 30566              	.LVL2391:
6057:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 30567              		.loc 1 6057 17 is_stmt 1 view .LVU8141
6057:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 30568              		.loc 1 6057 5 is_stmt 0 view .LVU8142
 30569 0148 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 30570 014a 53B1     		cbz	r3, .L2207
6058:src/xeq.c     **** 				// Early exit of routine
 30571              		.loc 1 6058 6 view .LVU8143
 30572 014c 1D4E     		ldr	r6, .L2226+16
6057:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 30573              		.loc 1 6057 12 view .LVU8144
 30574 014e 0024     		movs	r4, #0
 30575              	.LVL2392:
 30576              	.L2208:
6058:src/xeq.c     **** 				// Early exit of routine
 30577              		.loc 1 6058 6 is_stmt 1 discriminator 3 view .LVU8145
 30578 0150 04F16400 		add	r0, r4, #100
 30579 0154 3146     		mov	r1, r6
 30580 0156 FFF7FEFF 		bl	setRegister
 30581              	.LVL2393:
6057:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 30582              		.loc 1 6057 30 discriminator 3 view .LVU8146
6057:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 30583              		.loc 1 6057 21 is_stmt 0 discriminator 3 view .LVU8147
 30584 015a 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
6057:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 30585              		.loc 1 6057 30 discriminator 3 view .LVU8148
 30586 015c 0134     		adds	r4, r4, #1
 30587              	.LVL2394:
6057:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 30588              		.loc 1 6057 17 is_stmt 1 discriminator 3 view .LVU8149
6057:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 30589              		.loc 1 6057 5 is_stmt 0 discriminator 3 view .LVU8150
 30590 015e A342     		cmp	r3, r4
 30591 0160 F6DC     		bgt	.L2208
 30592              	.LVL2395:
 30593              	.L2207:
6060:src/xeq.c     **** 			} 
 30594              		.loc 1 6060 5 is_stmt 1 view .LVU8151
 30595 0162 8421     		movs	r1, #132
 30596 0164 0020     		movs	r0, #0
 30597 0166 FFF7FEFF 		bl	cmdxout
 30598              	.LVL2396:
 30599              	.LBE3885:
6067:src/xeq.c     **** 
 30600              		.loc 1 6067 1 is_stmt 0 view .LVU8152
 30601 016a 0AB0     		add	sp, sp, #40
 30602              		.cfi_remember_state
 30603              		.cfi_def_cfa_offset 24
 30604              		@ sp needed
 30605 016c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 30606              	.LVL2397:
 30607              	.L2223:
ARM GAS  /tmp/cccVhVyH.s 			page 779


 30608              		.cfi_restore_state
5944:src/xeq.c     **** 		return;
 30609              		.loc 1 5944 3 is_stmt 1 view .LVU8153
 30610              	.LBB3886:
 30611              	.LBI3886:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30612              		.loc 1 546 5 view .LVU8154
 30613              	.LBB3887:
 547:src/xeq.c     **** 		Error = e;
 30614              		.loc 1 547 2 view .LVU8155
 547:src/xeq.c     **** 		Error = e;
 30615              		.loc 1 547 12 is_stmt 0 view .LVU8156
 30616 0170 154B     		ldr	r3, .L2226+20
 547:src/xeq.c     **** 		Error = e;
 30617              		.loc 1 547 5 view .LVU8157
 30618 0172 1A68     		ldr	r2, [r3]
 30619 0174 0AB9     		cbnz	r2, .L2197
 30620              	.LVL2398:
 30621              	.LBB3888:
 30622              	.LBI3888:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30623              		.loc 1 546 5 is_stmt 1 view .LVU8158
 30624              	.LBB3889:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 30625              		.loc 1 548 3 view .LVU8159
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 30626              		.loc 1 548 9 is_stmt 0 view .LVU8160
 30627 0176 0722     		movs	r2, #7
 30628 0178 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 30629              		.loc 1 549 3 is_stmt 1 view .LVU8161
 30630              	.LVL2399:
 30631              	.L2197:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 30632              		.loc 1 549 3 is_stmt 0 view .LVU8162
 30633              	.LBE3889:
 30634              	.LBE3888:
 30635              	.LBE3887:
 30636              	.LBE3886:
6067:src/xeq.c     **** 
 30637              		.loc 1 6067 1 view .LVU8163
 30638 017a 0AB0     		add	sp, sp, #40
 30639              		.cfi_remember_state
 30640              		.cfi_def_cfa_offset 24
 30641              		@ sp needed
 30642 017c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 30643              	.L2225:
 30644              		.cfi_restore_state
6023:src/xeq.c     **** 		StackBase = XromStack;
 30645              		.loc 1 6023 3 is_stmt 1 view .LVU8164
 30646 0180 124C     		ldr	r4, .L2226+24
 30647 0182 0D48     		ldr	r0, .L2226+4
 30648 0184 2168     		ldr	r1, [r4]
 30649 0186 C022     		movs	r2, #192
 30650 0188 FFF7FEFF 		bl	xcopy
 30651              	.LVL2400:
6024:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
ARM GAS  /tmp/cccVhVyH.s 			page 780


 30652              		.loc 1 6024 3 view .LVU8165
6024:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 30653              		.loc 1 6024 13 is_stmt 0 view .LVU8166
 30654 018c 2660     		str	r6, [r4]
 30655 018e B2E7     		b	.L2203
 30656              	.L2224:
6016:src/xeq.c     **** #endif
 30657              		.loc 1 6016 3 is_stmt 1 view .LVU8167
6016:src/xeq.c     **** #endif
 30658              		.loc 1 6016 22 is_stmt 0 view .LVU8168
 30659 0190 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 30660 0194 43F04003 		orr	r3, r3, #64
 30661 0198 82F8E937 		strb	r3, [r2, #2025]
6018:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
 30662              		.loc 1 6018 3 is_stmt 1 view .LVU8169
 30663 019c DC20     		movs	r0, #220
 30664 019e FFF7FEFF 		bl	op_float
 30665              	.LVL2401:
 30666 01a2 A8E7     		b	.L2203
 30667              	.LVL2402:
 30668              	.L2206:
 30669              	.LBB3890:
6063:src/xeq.c     **** 			return;
 30670              		.loc 1 6063 5 view .LVU8170
 30671              	.LBB3880:
 30672              	.LBI3880:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30673              		.loc 1 546 5 view .LVU8171
 30674              	.LBB3881:
 547:src/xeq.c     **** 		Error = e;
 30675              		.loc 1 547 2 view .LVU8172
 547:src/xeq.c     **** 		Error = e;
 30676              		.loc 1 547 12 is_stmt 0 view .LVU8173
 30677 01a4 084B     		ldr	r3, .L2226+20
 547:src/xeq.c     **** 		Error = e;
 30678              		.loc 1 547 5 view .LVU8174
 30679 01a6 1A68     		ldr	r2, [r3]
 30680 01a8 002A     		cmp	r2, #0
 30681 01aa E6D1     		bne	.L2197
 30682              	.LVL2403:
 30683              	.LBB3882:
 30684              	.LBI3882:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30685              		.loc 1 546 5 is_stmt 1 view .LVU8175
 30686              	.LBB3883:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 30687              		.loc 1 548 3 view .LVU8176
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 30688              		.loc 1 548 9 is_stmt 0 view .LVU8177
 30689 01ac 0122     		movs	r2, #1
 30690 01ae 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 30691              		.loc 1 549 3 is_stmt 1 view .LVU8178
 30692              	.LVL2404:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 30693              		.loc 1 549 3 is_stmt 0 view .LVU8179
 30694              	.LBE3883:
ARM GAS  /tmp/cccVhVyH.s 			page 781


 30695              	.LBE3882:
 30696              	.LBE3881:
 30697              	.LBE3880:
6064:src/xeq.c     **** 		}
 30698              		.loc 1 6064 4 is_stmt 1 view .LVU8180
 30699 01b0 E3E7     		b	.L2197
 30700              	.L2227:
 30701 01b2 00BF     		.align	2
 30702              	.L2226:
 30703 01b4 00000000 		.word	XromParams
 30704 01b8 00000000 		.word	XromLocal
 30705 01bc 00000000 		.word	main_ram
 30706 01c0 00000000 		.word	RetStk
 30707 01c4 00000000 		.word	const_NaN
 30708 01c8 00000000 		.word	Error
 30709 01cc 00000000 		.word	StackBase
 30710 01d0 00000000 		.word	StateWhileOn
 30711              	.LBE3890:
 30712              		.cfi_endproc
 30713              	.LFE271:
 30715              		.section	.rodata.xeq.str1.4,"aMS",%progbits,1
 30716              		.align	2
 30717              	.LC8:
 30718 0000 25303458 		.ascii	"%04X:%s\000"
 30718      3A257300 
 30719              		.section	.text.xeq,"ax",%progbits
 30720              		.align	1
 30721              		.p2align 2,,3
 30722              		.global	xeq
 30723              		.syntax unified
 30724              		.thumb
 30725              		.thumb_func
 30726              		.fpu fpv4-sp-d16
 30728              	xeq:
 30729              	.LVL2405:
 30730              	.LFB251:
5326:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 30731              		.loc 1 5326 1 view -0
 30732              		.cfi_startproc
 30733              		@ args = 0, pretend = 0, frame = 424
 30734              		@ frame_needed = 0, uses_anonymous_args = 0
5327:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
 30735              		.loc 1 5327 2 view .LVU8182
5328:src/xeq.c     **** 	const struct _ustate old = UState;
 30736              		.loc 1 5328 2 view .LVU8183
5326:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 30737              		.loc 1 5326 1 is_stmt 0 view .LVU8184
 30738 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 30739              		.cfi_def_cfa_offset 36
 30740              		.cfi_offset 4, -36
 30741              		.cfi_offset 5, -32
 30742              		.cfi_offset 6, -28
 30743              		.cfi_offset 7, -24
 30744              		.cfi_offset 8, -20
 30745              		.cfi_offset 9, -16
 30746              		.cfi_offset 10, -12
 30747              		.cfi_offset 11, -8
ARM GAS  /tmp/cccVhVyH.s 			page 782


 30748              		.cfi_offset 14, -4
5328:src/xeq.c     **** 	const struct _ustate old = UState;
 30749              		.loc 1 5328 31 view .LVU8185
 30750 0004 834F     		ldr	r7, .L2586
 30751              	.LBB4196:
 30752              	.LBB4197:
 744:src/xeq.c     **** }
 30753              		.loc 1 744 15 view .LVU8186
 30754 0006 844C     		ldr	r4, .L2586+4
 30755              	.LBE4197:
 30756              	.LBE4196:
5328:src/xeq.c     **** 	const struct _ustate old = UState;
 30757              		.loc 1 5328 31 view .LVU8187
 30758 0008 3B68     		ldr	r3, [r7]
 30759              	.LBB4202:
 30760              	.LBB4198:
 744:src/xeq.c     **** }
 30761              		.loc 1 744 15 view .LVU8188
 30762 000a E67D     		ldrb	r6, [r4, #23]	@ zero_extendqisi2
 30763              	.LBE4198:
 30764              	.LBE4202:
5329:src/xeq.c     **** 	const unsigned char lift = get_lift();
 30765              		.loc 1 5329 23 view .LVU8189
 30766 000c D3F8E817 		ldr	r1, [r3, #2024]
5328:src/xeq.c     **** 	const struct _ustate old = UState;
 30767              		.loc 1 5328 23 view .LVU8190
 30768 0010 B3F8FC27 		ldrh	r2, [r3, #2044]
5326:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 30769              		.loc 1 5326 1 view .LVU8191
 30770 0014 EDB0     		sub	sp, sp, #436
 30771              		.cfi_def_cfa_offset 472
5326:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 30772              		.loc 1 5326 1 view .LVU8192
 30773 0016 0546     		mov	r5, r0
5329:src/xeq.c     **** 	const unsigned char lift = get_lift();
 30774              		.loc 1 5329 23 view .LVU8193
 30775 0018 D3F8E407 		ldr	r0, [r3, #2020]
 30776              	.LVL2406:
5328:src/xeq.c     **** 	const struct _ustate old = UState;
 30777              		.loc 1 5328 23 view .LVU8194
 30778 001c 0292     		str	r2, [sp, #8]
 30779              	.LVL2407:
5329:src/xeq.c     **** 	const unsigned char lift = get_lift();
 30780              		.loc 1 5329 2 is_stmt 1 view .LVU8195
5331:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 30781              		.loc 1 5331 23 is_stmt 0 view .LVU8196
 30782 001e B3F8E027 		ldrh	r2, [r3, #2016]
 30783 0022 0392     		str	r2, [sp, #12]
5329:src/xeq.c     **** 	const unsigned char lift = get_lift();
 30784              		.loc 1 5329 23 view .LVU8197
 30785 0024 0CAB     		add	r3, sp, #48
 30786 0026 83E80300 		stm	r3, {r0, r1}
5330:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
 30787              		.loc 1 5330 2 is_stmt 1 view .LVU8198
 30788              	.LBB4203:
 30789              	.LBI4196:
 743:src/xeq.c     **** 	return State2.state_lift;
ARM GAS  /tmp/cccVhVyH.s 			page 783


 30790              		.loc 1 743 12 view .LVU8199
 30791              	.LBB4199:
 744:src/xeq.c     **** }
 30792              		.loc 1 744 2 view .LVU8200
 30793              	.LBE4199:
 30794              	.LBE4203:
5347:src/xeq.c     **** #if defined(CONSOLE)
 30795              		.loc 1 5347 2 is_stmt 0 view .LVU8201
 30796 002a 7C4B     		ldr	r3, .L2586+8
5332:src/xeq.c     **** #ifdef INFRARED
 30797              		.loc 1 5332 12 view .LVU8202
 30798 002c E269     		ldr	r2, [r4, #28]
5347:src/xeq.c     **** #if defined(CONSOLE)
 30799              		.loc 1 5347 2 view .LVU8203
 30800 002e 1968     		ldr	r1, [r3]
5332:src/xeq.c     **** #ifdef INFRARED
 30801              		.loc 1 5332 12 view .LVU8204
 30802 0030 0492     		str	r2, [sp, #16]
 30803              	.LBB4204:
 30804              	.LBB4200:
 744:src/xeq.c     **** }
 30805              		.loc 1 744 15 view .LVU8205
 30806 0032 C6F38013 		ubfx	r3, r6, #6, #1
 30807              	.LBE4200:
 30808              	.LBE4204:
5347:src/xeq.c     **** #if defined(CONSOLE)
 30809              		.loc 1 5347 2 view .LVU8206
 30810 0036 A022     		movs	r2, #160
 30811 0038 44A8     		add	r0, sp, #272
 30812              	.LBB4205:
 30813              	.LBB4201:
 744:src/xeq.c     **** }
 30814              		.loc 1 744 15 view .LVU8207
 30815 003a 0593     		str	r3, [sp, #20]
 30816              	.LVL2408:
 744:src/xeq.c     **** }
 30817              		.loc 1 744 15 view .LVU8208
 30818              	.LBE4201:
 30819              	.LBE4205:
5331:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 30820              		.loc 1 5331 2 is_stmt 1 view .LVU8209
5332:src/xeq.c     **** #ifdef INFRARED
 30821              		.loc 1 5332 2 view .LVU8210
5334:src/xeq.c     **** #endif
 30822              		.loc 1 5334 2 view .LVU8211
5347:src/xeq.c     **** #if defined(CONSOLE)
 30823              		.loc 1 5347 2 view .LVU8212
 30824 003c FFF7FEFF 		bl	xcopy
 30825              	.LVL2409:
5352:src/xeq.c     **** 		char buf[16];
 30826              		.loc 1 5352 2 view .LVU8213
5352:src/xeq.c     **** 		char buf[16];
 30827              		.loc 1 5352 5 is_stmt 0 view .LVU8214
 30828 0040 94F91730 		ldrsb	r3, [r4, #23]
 30829 0044 002B     		cmp	r3, #0
 30830 0046 39DB     		blt	.L2513
 30831              	.L2527:
ARM GAS  /tmp/cccVhVyH.s 			page 784


 30832 0048 0DF1EC0A 		add	r10, sp, #236
 30833              	.L2229:
5365:src/xeq.c     **** #endif
 30834              		.loc 1 5365 2 is_stmt 1 view .LVU8215
 30835              	.LVL2410:
 30836              	.LBB4206:
 30837              	.LBI4206:
3559:src/xeq.c     **** 	unsigned short mask;
 30838              		.loc 1 3559 5 view .LVU8216
 30839              	.LBB4207:
3560:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 30840              		.loc 1 3560 2 view .LVU8217
3561:src/xeq.c     **** 
 30841              		.loc 1 3561 2 view .LVU8218
3561:src/xeq.c     **** 
 30842              		.loc 1 3561 34 is_stmt 0 view .LVU8219
 30843 004c 5146     		mov	r1, r10
 30844 004e 6720     		movs	r0, #103
 30845 0050 FFF7FEFF 		bl	flag_word
 30846              	.LVL2411:
3563:src/xeq.c     **** }
 30847              		.loc 1 3563 2 is_stmt 1 view .LVU8220
3563:src/xeq.c     **** }
 30848              		.loc 1 3563 24 is_stmt 0 view .LVU8221
 30849 0054 BDF8EC30 		ldrh	r3, [sp, #236]
 30850 0058 0688     		ldrh	r6, [r0]
 30851              	.LVL2412:
3563:src/xeq.c     **** }
 30852              		.loc 1 3563 24 view .LVU8222
 30853              	.LBE4207:
 30854              	.LBE4206:
5365:src/xeq.c     **** #endif
 30855              		.loc 1 5365 67 view .LVU8223
 30856 005a 1E40     		ands	r6, r6, r3
 30857 005c 09D0     		beq	.L2232
 30858              	.LBB4208:
 30859              	.LBI4208:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 30860              		.loc 1 185 5 is_stmt 1 view .LVU8224
 30861              	.LBB4209:
 186:src/xeq.c     **** }
 30862              		.loc 1 186 2 view .LVU8225
 186:src/xeq.c     **** }
 30863              		.loc 1 186 9 is_stmt 0 view .LVU8226
 30864 005e 3B68     		ldr	r3, [r7]
 30865 0060 B3F8E037 		ldrh	r3, [r3, #2016]
 30866              	.LBE4209:
 30867              	.LBE4208:
5365:src/xeq.c     **** #endif
 30868              		.loc 1 5365 34 view .LVU8227
 30869 0064 9B0B     		lsrs	r3, r3, #14
 30870 0066 032B     		cmp	r3, #3
 30871 0068 00F0C680 		beq	.L2553
 30872              	.L2233:
5365:src/xeq.c     **** #endif
 30873              		.loc 1 5365 67 discriminator 5 view .LVU8228
 30874 006c A67D     		ldrb	r6, [r4, #22]	@ zero_extendqisi2
ARM GAS  /tmp/cccVhVyH.s 			page 785


 30875 006e C6F38016 		ubfx	r6, r6, #6, #1
 30876              	.L2232:
 30877              	.LVL2413:
5367:src/xeq.c     **** 	print_trace( op, 0 );
 30878              		.loc 1 5367 2 is_stmt 1 discriminator 10 view .LVU8229
5367:src/xeq.c     **** 	print_trace( op, 0 );
 30879              		.loc 1 5367 10 is_stmt 0 discriminator 10 view .LVU8230
 30880 0072 DFF8CC81 		ldr	r8, .L2586+44
5368:src/xeq.c     **** #endif
 30881              		.loc 1 5368 2 discriminator 10 view .LVU8231
 30882 0076 0021     		movs	r1, #0
 30883 0078 2846     		mov	r0, r5
5367:src/xeq.c     **** 	print_trace( op, 0 );
 30884              		.loc 1 5367 10 discriminator 10 view .LVU8232
 30885 007a C8F80060 		str	r6, [r8]
5368:src/xeq.c     **** #endif
 30886              		.loc 1 5368 2 is_stmt 1 discriminator 10 view .LVU8233
 30887 007e FFF7FEFF 		bl	print_trace
 30888              	.LVL2414:
5370:src/xeq.c     **** 	State2.wascomplex = 0;
 30889              		.loc 1 5370 2 discriminator 10 view .LVU8234
5371:src/xeq.c     **** 	if (isDBL(op))
 30890              		.loc 1 5371 20 is_stmt 0 discriminator 10 view .LVU8235
 30891 0082 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
5370:src/xeq.c     **** 	State2.wascomplex = 0;
 30892              		.loc 1 5370 7 discriminator 10 view .LVU8236
 30893 0084 6649     		ldr	r1, .L2586+12
 30894 0086 0023     		movs	r3, #0
5371:src/xeq.c     **** 	if (isDBL(op))
 30895              		.loc 1 5371 20 discriminator 10 view .LVU8237
 30896 0088 63F38712 		bfi	r2, r3, #6, #2
 30897 008c 2275     		strb	r2, [r4, #20]
5372:src/xeq.c     **** 		multi(op);
 30898              		.loc 1 5372 6 discriminator 10 view .LVU8238
 30899 008e 05F47042 		and	r2, r5, #61440
5372:src/xeq.c     **** 		multi(op);
 30900              		.loc 1 5372 5 discriminator 10 view .LVU8239
 30901 0092 B2F5704F 		cmp	r2, #61440
5370:src/xeq.c     **** 	State2.wascomplex = 0;
 30902              		.loc 1 5370 7 discriminator 10 view .LVU8240
 30903 0096 0B60     		str	r3, [r1]
5371:src/xeq.c     **** 	if (isDBL(op))
 30904              		.loc 1 5371 2 is_stmt 1 discriminator 10 view .LVU8241
5372:src/xeq.c     **** 		multi(op);
 30905              		.loc 1 5372 2 discriminator 10 view .LVU8242
5372:src/xeq.c     **** 		multi(op);
 30906              		.loc 1 5372 5 is_stmt 0 discriminator 10 view .LVU8243
 30907 0098 6CD0     		beq	.L2554
5374:src/xeq.c     **** 		rargs(op);
 30908              		.loc 1 5374 7 is_stmt 1 view .LVU8244
5374:src/xeq.c     **** 		rargs(op);
 30909              		.loc 1 5374 10 is_stmt 0 view .LVU8245
 30910 009a 4ABB     		cbnz	r2, .L2555
5377:src/xeq.c     **** 		switch (opKIND(op)) {
 30911              		.loc 1 5377 3 is_stmt 1 view .LVU8246
5377:src/xeq.c     **** 		switch (opKIND(op)) {
 30912              		.loc 1 5377 13 is_stmt 0 view .LVU8247
ARM GAS  /tmp/cccVhVyH.s 			page 786


 30913 009c 614A     		ldr	r2, .L2586+16
 30914 009e C5F30723 		ubfx	r3, r5, #8, #8
5377:src/xeq.c     **** 		switch (opKIND(op)) {
 30915              		.loc 1 5377 15 view .LVU8248
 30916 00a2 1580     		strh	r5, [r2]	@ movhi
5378:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
 30917              		.loc 1 5378 3 is_stmt 1 view .LVU8249
 30918 00a4 062B     		cmp	r3, #6
 30919 00a6 00F2DF80 		bhi	.L2268
 30920 00aa DFE813F0 		tbh	[pc, r3, lsl #1]
 30921              	.L2270:
 30922 00ae C401     		.2byte	(.L2276-.L2270)/2
 30923 00b0 C102     		.2byte	(.L2275-.L2270)/2
 30924 00b2 8B02     		.2byte	(.L2274-.L2270)/2
 30925 00b4 D100     		.2byte	(.L2273-.L2270)/2
 30926 00b6 F701     		.2byte	(.L2272-.L2270)/2
 30927 00b8 5102     		.2byte	(.L2271-.L2270)/2
 30928 00ba 8E01     		.2byte	(.L2269-.L2270)/2
 30929              	.LVL2415:
 30930              		.p2align 1
 30931              	.L2513:
5352:src/xeq.c     **** 		char buf[16];
 30932              		.loc 1 5352 22 is_stmt 0 discriminator 1 view .LVU8250
 30933 00bc 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
5352:src/xeq.c     **** 		char buf[16];
 30934              		.loc 1 5352 19 discriminator 1 view .LVU8251
 30935 00be 9B07     		lsls	r3, r3, #30
 30936 00c0 C2D4     		bmi	.L2527
 30937              	.LBB4210:
5353:src/xeq.c     **** 		if (Running)
 30938              		.loc 1 5353 3 is_stmt 1 view .LVU8252
5354:src/xeq.c     **** 			print_step(op);
 30939              		.loc 1 5354 3 view .LVU8253
5354:src/xeq.c     **** 			print_step(op);
 30940              		.loc 1 5354 7 is_stmt 0 view .LVU8254
 30941 00c2 DFF88091 		ldr	r9, .L2586+48
5354:src/xeq.c     **** 			print_step(op);
 30942              		.loc 1 5354 6 view .LVU8255
 30943 00c6 D9F80030 		ldr	r3, [r9]
 30944 00ca 002B     		cmp	r3, #0
 30945 00cc 40F09B80 		bne	.L2556
5357:src/xeq.c     **** 		DispMsg = TraceBuffer;
 30946              		.loc 1 5357 4 is_stmt 1 view .LVU8256
 30947 00d0 0DF1EC0A 		add	r10, sp, #236
 30948 00d4 5146     		mov	r1, r10
 30949 00d6 2846     		mov	r0, r5
 30950 00d8 FFF7FEFF 		bl	prt
 30951              	.LVL2416:
 30952 00dc 5249     		ldr	r1, .L2586+20
 30953 00de 0346     		mov	r3, r0
 30954 00e0 2A46     		mov	r2, r5
 30955 00e2 5248     		ldr	r0, .L2586+24
 30956 00e4 FFF7FEFF 		bl	sprintf
 30957              	.LVL2417:
 30958              	.L2231:
5358:src/xeq.c     **** 	}
 30959              		.loc 1 5358 3 view .LVU8257
ARM GAS  /tmp/cccVhVyH.s 			page 787


5358:src/xeq.c     **** 	}
 30960              		.loc 1 5358 11 is_stmt 0 view .LVU8258
 30961 00e8 514B     		ldr	r3, .L2586+28
 30962 00ea 504A     		ldr	r2, .L2586+24
 30963 00ec 1A60     		str	r2, [r3]
 30964 00ee ADE7     		b	.L2229
 30965              	.LVL2418:
 30966              	.L2555:
5358:src/xeq.c     **** 	}
 30967              		.loc 1 5358 11 view .LVU8259
 30968              	.LBE4210:
5375:src/xeq.c     **** 	else {
 30969              		.loc 1 5375 3 is_stmt 1 view .LVU8260
 30970              	.LBB4211:
 30971              	.LBI4211:
5194:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
 30972              		.loc 1 5194 13 view .LVU8261
 30973              	.LBB4212:
5195:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 30974              		.loc 1 5195 2 view .LVU8262
5196:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 30975              		.loc 1 5196 2 view .LVU8263
5196:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 30976              		.loc 1 5196 27 is_stmt 0 view .LVU8264
 30977 00f0 4FEA1529 		lsr	r9, r5, #8
5198:src/xeq.c     **** 
 30978              		.loc 1 5198 33 view .LVU8265
 30979 00f4 DFF850B1 		ldr	fp, .L2586+52
5200:src/xeq.c     **** 
 30980              		.loc 1 5200 12 view .LVU8266
 30981 00f8 4A49     		ldr	r1, .L2586+16
 30982              	.LBB4213:
 30983              	.LBB4214:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30984              		.loc 1 1232 5 view .LVU8267
 30985 00fa 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 30986              	.LBE4214:
 30987              	.LBE4213:
5196:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 30988              		.loc 1 5196 27 view .LVU8268
 30989 00fc A9F12009 		sub	r9, r9, #32
 30990 0100 5FFA89F9 		uxtb	r9, r9
 30991              	.LVL2419:
5197:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
 30992              		.loc 1 5197 2 is_stmt 1 view .LVU8269
5198:src/xeq.c     **** 
 30993              		.loc 1 5198 2 view .LVU8270
5198:src/xeq.c     **** 
 30994              		.loc 1 5198 33 is_stmt 0 view .LVU8271
 30995 0104 0BEB0913 		add	r3, fp, r9, lsl #4
5200:src/xeq.c     **** 
 30996              		.loc 1 5200 14 view .LVU8272
 30997 0108 A1F80090 		strh	r9, [r1]	@ movhi
5198:src/xeq.c     **** 
 30998              		.loc 1 5198 33 view .LVU8273
 30999 010c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 31000 010e 0693     		str	r3, [sp, #24]
ARM GAS  /tmp/cccVhVyH.s 			page 788


 31001              	.LVL2420:
5200:src/xeq.c     **** 
 31002              		.loc 1 5200 2 is_stmt 1 view .LVU8274
5202:src/xeq.c     **** 
 31003              		.loc 1 5202 2 view .LVU8275
 31004              	.LBB4218:
 31005              	.LBI4213:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 31006              		.loc 1 1229 6 view .LVU8276
 31007              	.LBB4215:
1230:src/xeq.c     **** 
 31008              		.loc 1 1230 2 view .LVU8277
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31009              		.loc 1 1232 2 view .LVU8278
 31010              	.LBE4215:
 31011              	.LBE4218:
5198:src/xeq.c     **** 
 31012              		.loc 1 5198 33 is_stmt 0 view .LVU8279
 31013 0110 4FEA0913 		lsl	r3, r9, #4
 31014              	.LBB4219:
 31015              	.LBB4216:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31016              		.loc 1 1232 5 view .LVU8280
 31017 0114 002A     		cmp	r2, #0
 31018 0116 40F05381 		bne	.L2557
 31019              	.L2245:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31020              		.loc 1 1232 5 view .LVU8281
 31021              	.LBE4216:
 31022              	.LBE4219:
5204:src/xeq.c     **** 		illegal(op);
 31023              		.loc 1 5204 2 is_stmt 1 view .LVU8282
5204:src/xeq.c     **** 		illegal(op);
 31024              		.loc 1 5204 5 is_stmt 0 view .LVU8283
 31025 011a B9F19E0F 		cmp	r9, #158
 31026 011e 00F2A380 		bhi	.L2268
5208:src/xeq.c     **** 		set_lift();
 31027              		.loc 1 5208 2 is_stmt 1 view .LVU8284
5208:src/xeq.c     **** 		set_lift();
 31028              		.loc 1 5208 6 is_stmt 0 view .LVU8285
 31029 0122 5BF80320 		ldr	r2, [fp, r3]
 31030 0126 0792     		str	r2, [sp, #28]
 31031 0128 0BEB0301 		add	r1, fp, r3
5208:src/xeq.c     **** 		set_lift();
 31032              		.loc 1 5208 5 view .LVU8286
 31033 012c 002A     		cmp	r2, #0
 31034 012e 4AD0     		beq	.L2530
5213:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 31035              		.loc 1 5213 5 view .LVU8287
 31036 0130 15F0800F 		tst	r5, #128
5195:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 31037              		.loc 1 5195 15 view .LVU8288
 31038 0134 05F07F02 		and	r2, r5, #127
5213:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 31039              		.loc 1 5213 2 is_stmt 1 view .LVU8289
5213:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 31040              		.loc 1 5213 5 is_stmt 0 view .LVU8290
ARM GAS  /tmp/cccVhVyH.s 			page 789


 31041 0138 00F0E582 		beq	.L2249
5214:src/xeq.c     **** 			// Get the argument by reading a register
 31042              		.loc 1 5214 3 is_stmt 1 view .LVU8291
5214:src/xeq.c     **** 			// Get the argument by reading a register
 31043              		.loc 1 5214 19 is_stmt 0 view .LVU8292
 31044 013c 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 31045 013e 0A91     		str	r1, [sp, #40]
5214:src/xeq.c     **** 			// Get the argument by reading a register
 31046              		.loc 1 5214 6 view .LVU8293
 31047 0140 C907     		lsls	r1, r1, #31
 31048 0142 40F19383 		bpl	.L2250
 31049              	.LBB4220:
5216:src/xeq.c     **** 			unsigned long long int regval;
 31050              		.loc 1 5216 4 is_stmt 1 view .LVU8294
5217:src/xeq.c     **** 
 31051              		.loc 1 5217 4 view .LVU8295
5219:src/xeq.c     **** 				// Invalid register specified for indirect access
 31052              		.loc 1 5219 4 view .LVU8296
5219:src/xeq.c     **** 				// Invalid register specified for indirect access
 31053              		.loc 1 5219 14 is_stmt 0 view .LVU8297
 31054 0146 1146     		mov	r1, r2
 31055 0148 0A20     		movs	r0, #10
 31056 014a 0B93     		str	r3, [sp, #44]
 31057 014c 0892     		str	r2, [sp, #32]
 31058 014e FFF7FEFF 		bl	get_reg_limit
 31059              	.LVL2421:
5219:src/xeq.c     **** 				// Invalid register specified for indirect access
 31060              		.loc 1 5219 7 view .LVU8298
 31061 0152 089A     		ldr	r2, [sp, #32]
 31062 0154 0B9B     		ldr	r3, [sp, #44]
 31063 0156 8242     		cmp	r2, r0
 31064 0158 40F2C082 		bls	.L2251
5221:src/xeq.c     **** 				return;
 31065              		.loc 1 5221 5 is_stmt 1 view .LVU8299
 31066              	.LVL2422:
 31067              	.LBB4221:
 31068              	.LBI4221:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31069              		.loc 1 546 5 view .LVU8300
 31070              	.LBB4222:
 547:src/xeq.c     **** 		Error = e;
 31071              		.loc 1 547 2 view .LVU8301
 547:src/xeq.c     **** 		Error = e;
 31072              		.loc 1 547 12 is_stmt 0 view .LVU8302
 31073 015c DFF8ECB0 		ldr	fp, .L2586+56
 31074 0160 DBF80030 		ldr	r3, [fp]
 547:src/xeq.c     **** 		Error = e;
 31075              		.loc 1 547 5 view .LVU8303
 31076 0164 13B9     		cbnz	r3, .L2253
 31077              	.LVL2423:
 31078              	.LBB4223:
 31079              	.LBI4223:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31080              		.loc 1 546 5 is_stmt 1 view .LVU8304
 31081              	.LBB4224:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 31082              		.loc 1 548 3 view .LVU8305
ARM GAS  /tmp/cccVhVyH.s 			page 790


 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 31083              		.loc 1 548 9 is_stmt 0 view .LVU8306
 31084 0166 0823     		movs	r3, #8
 31085 0168 CBF80030 		str	r3, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 31086              		.loc 1 549 3 is_stmt 1 view .LVU8307
 31087              	.LVL2424:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 31088              		.loc 1 549 3 is_stmt 0 view .LVU8308
 31089              	.LBE4224:
 31090              	.LBE4223:
 31091              	.LBE4222:
 31092              	.LBE4221:
5222:src/xeq.c     **** 			}
 31093              		.loc 1 5222 5 is_stmt 1 view .LVU8309
5222:src/xeq.c     **** 			}
 31094              		.loc 1 5222 5 is_stmt 0 view .LVU8310
 31095              	.LBE4220:
 31096              	.LBE4212:
 31097              	.LBE4211:
5386:src/xeq.c     **** 		}
 31098              		.loc 1 5386 12 is_stmt 1 view .LVU8311
5396:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31099              		.loc 1 5396 2 view .LVU8312
 31100              	.L2253:
5396:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31101              		.loc 1 5396 2 is_stmt 0 view .LVU8313
 31102 016c DFF8D490 		ldr	r9, .L2586+48
 31103 0170 1846     		mov	r0, r3
 31104 0172 85E0     		b	.L2378
 31105              	.LVL2425:
 31106              	.L2554:
5373:src/xeq.c     **** 	else if (isRARG(op))
 31107              		.loc 1 5373 3 is_stmt 1 view .LVU8314
 31108              	.LBB4252:
 31109              	.LBI4252:
5290:src/xeq.c     **** 	const int cmd = opDBL(op);
 31110              		.loc 1 5290 13 view .LVU8315
 31111              	.LBB4253:
5291:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 31112              		.loc 1 5291 2 view .LVU8316
5292:src/xeq.c     **** 
 31113              		.loc 1 5292 12 is_stmt 0 view .LVU8317
 31114 0174 2B4A     		ldr	r2, .L2586+16
 31115              	.LBB4254:
 31116              	.LBB4255:
 31117              	.LBB4256:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31118              		.loc 1 1232 5 view .LVU8318
 31119 0176 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31120              	.LBE4256:
 31121              	.LBE4255:
 31122              	.LBE4254:
5291:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 31123              		.loc 1 5291 12 view .LVU8319
 31124 0178 C5F30329 		ubfx	r9, r5, #8, #4
 31125              	.LVL2426:
ARM GAS  /tmp/cccVhVyH.s 			page 791


5292:src/xeq.c     **** 
 31126              		.loc 1 5292 2 is_stmt 1 view .LVU8320
5292:src/xeq.c     **** 
 31127              		.loc 1 5292 14 is_stmt 0 view .LVU8321
 31128 017c A2F80090 		strh	r9, [r2]	@ movhi
5294:src/xeq.c     **** 
 31129              		.loc 1 5294 2 is_stmt 1 view .LVU8322
 31130              	.LBB4265:
 31131              	.LBI4254:
1335:src/xeq.c     **** 	process_cmdline();
 31132              		.loc 1 1335 6 view .LVU8323
 31133              	.LBE4265:
 31134              	.LBE4253:
 31135              	.LBE4252:
1336:src/xeq.c     **** 	set_lift();
 31136              		.loc 1 1336 2 view .LVU8324
 31137              	.LBB4289:
 31138              	.LBB4284:
 31139              	.LBB4266:
 31140              	.LBB4259:
 31141              	.LBI4255:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 31142              		.loc 1 1229 6 view .LVU8325
 31143              	.LBB4257:
1230:src/xeq.c     **** 
 31144              		.loc 1 1230 2 view .LVU8326
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31145              		.loc 1 1232 2 view .LVU8327
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31146              		.loc 1 1232 5 is_stmt 0 view .LVU8328
 31147 0180 002B     		cmp	r3, #0
 31148 0182 40F09D82 		bne	.L2558
 31149              	.L2235:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31150              		.loc 1 1232 5 view .LVU8329
 31151              	.LBE4257:
 31152              	.LBE4259:
 31153              	.LBE4266:
 31154              	.LBE4284:
 31155              	.LBE4289:
1337:src/xeq.c     **** }
 31156              		.loc 1 1337 2 is_stmt 1 view .LVU8330
 31157              	.LBB4290:
 31158              	.LBB4285:
 31159              	.LBB4267:
 31160              	.LBB4260:
 31161              	.LBI4260:
 767:src/xeq.c     ****     State2.state_lift = 1;
 31162              		.loc 1 767 6 view .LVU8331
 31163              	.LBB4261:
 768:src/xeq.c     **** }
 31164              		.loc 1 768 5 view .LVU8332
 768:src/xeq.c     **** }
 31165              		.loc 1 768 23 is_stmt 0 view .LVU8333
 31166 0186 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31167              	.LBE4261:
 31168              	.LBE4260:
ARM GAS  /tmp/cccVhVyH.s 			page 792


 31169              	.LBE4267:
5296:src/xeq.c     **** 		illegal(op);
 31170              		.loc 1 5296 5 view .LVU8334
 31171 0188 B9F10B0F 		cmp	r9, #11
 31172              	.LBB4268:
 31173              	.LBB4263:
 31174              	.LBB4262:
 768:src/xeq.c     **** }
 31175              		.loc 1 768 23 view .LVU8335
 31176 018c 43F04003 		orr	r3, r3, #64
 31177 0190 E375     		strb	r3, [r4, #23]
 31178              	.LBE4262:
 31179              	.LBE4263:
 31180              	.LBE4268:
5296:src/xeq.c     **** 		illegal(op);
 31181              		.loc 1 5296 2 is_stmt 1 view .LVU8336
5296:src/xeq.c     **** 		illegal(op);
 31182              		.loc 1 5296 5 is_stmt 0 view .LVU8337
 31183 0192 00F38B82 		bgt	.L2559
5300:src/xeq.c     **** 		return;
 31184              		.loc 1 5300 2 is_stmt 1 view .LVU8338
5300:src/xeq.c     **** 		return;
 31185              		.loc 1 5300 6 is_stmt 0 view .LVU8339
 31186 0196 274A     		ldr	r2, .L2586+32
 31187 0198 4FEA0913 		lsl	r3, r9, #4
 31188 019c D358     		ldr	r3, [r2, r3]
5300:src/xeq.c     **** 		return;
 31189              		.loc 1 5300 5 view .LVU8340
 31190 019e 002B     		cmp	r3, #0
 31191 01a0 00F0DC82 		beq	.L2239
 31192              	.LBB4269:
5303:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 31193              		.loc 1 5303 3 is_stmt 1 view .LVU8341
 31194              	.LVL2427:
5304:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 31195              		.loc 1 5304 3 view .LVU8342
 31196              	.LBB4270:
 31197              	.LBI4270:
4508:src/xeq.c     **** {
 31198              		.loc 1 4508 24 view .LVU8343
 31199              	.LBB4271:
4510:src/xeq.c     **** 	if (xp < xrom)
 31200              		.loc 1 4510 2 view .LVU8344
4511:src/xeq.c     **** 		return NULL;
 31201              		.loc 1 4511 5 is_stmt 0 view .LVU8345
 31202 01a4 244A     		ldr	r2, .L2586+36
4510:src/xeq.c     **** 	if (xp < xrom)
 31203              		.loc 1 4510 59 view .LVU8346
 31204 01a6 23F00101 		bic	r1, r3, #1
 31205              	.LVL2428:
4511:src/xeq.c     **** 		return NULL;
 31206              		.loc 1 4511 2 is_stmt 1 view .LVU8347
4511:src/xeq.c     **** 		return NULL;
 31207              		.loc 1 4511 5 is_stmt 0 view .LVU8348
 31208 01aa 9142     		cmp	r1, r2
 31209 01ac 08D3     		bcc	.L2240
4515:src/xeq.c     **** 		return NULL;
ARM GAS  /tmp/cccVhVyH.s 			page 793


 31210              		.loc 1 4515 2 is_stmt 1 view .LVU8349
4515:src/xeq.c     **** 		return NULL;
 31211              		.loc 1 4515 17 is_stmt 0 view .LVU8350
 31212 01ae 2348     		ldr	r0, .L2586+40
 31213 01b0 0088     		ldrh	r0, [r0]
 31214 01b2 02EB4002 		add	r2, r2, r0, lsl #1
4515:src/xeq.c     **** 		return NULL;
 31215              		.loc 1 4515 5 view .LVU8351
 31216 01b6 9142     		cmp	r1, r2
 31217 01b8 02D2     		bcs	.L2240
 31218              	.LVL2429:
4515:src/xeq.c     **** 		return NULL;
 31219              		.loc 1 4515 5 view .LVU8352
 31220              	.LBE4271:
 31221              	.LBE4270:
5304:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 31222              		.loc 1 5304 6 view .LVU8353
 31223 01ba 0029     		cmp	r1, #0
 31224 01bc 40F0C183 		bne	.L2560
 31225              	.L2240:
5314:src/xeq.c     **** 			set_lift();
 31226              		.loc 1 5314 4 is_stmt 1 view .LVU8354
 31227 01c0 4946     		mov	r1, r9
 31228 01c2 2846     		mov	r0, r5
 31229 01c4 9847     		blx	r3
 31230              	.LVL2430:
5315:src/xeq.c     **** 		}
 31231              		.loc 1 5315 4 view .LVU8355
 31232              	.LBB4272:
 31233              	.LBI4272:
 767:src/xeq.c     ****     State2.state_lift = 1;
 31234              		.loc 1 767 6 view .LVU8356
 31235              	.LBB4273:
 768:src/xeq.c     **** }
 31236              		.loc 1 768 5 view .LVU8357
 31237              	.L2530:
 768:src/xeq.c     **** }
 31238              		.loc 1 768 5 is_stmt 0 view .LVU8358
 31239              	.LBE4273:
 31240              	.LBE4272:
 31241              	.LBE4269:
 31242              	.LBE4285:
 31243              	.LBE4290:
 31244              	.LBB4291:
 31245              	.LBB4292:
4010:src/xeq.c     **** 		} else {
 31246              		.loc 1 4010 4 is_stmt 1 view .LVU8359
 31247              	.LBB4293:
 31248              	.LBI4293:
 767:src/xeq.c     ****     State2.state_lift = 1;
 31249              		.loc 1 767 6 view .LVU8360
 31250              	.LBB4294:
 768:src/xeq.c     **** }
 31251              		.loc 1 768 5 view .LVU8361
 768:src/xeq.c     **** }
 31252              		.loc 1 768 23 is_stmt 0 view .LVU8362
 31253 01c6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
ARM GAS  /tmp/cccVhVyH.s 			page 794


 31254 01c8 DFF880B0 		ldr	fp, .L2586+56
 31255 01cc 43F04003 		orr	r3, r3, #64
 31256 01d0 E375     		strb	r3, [r4, #23]
 31257 01d2 DBF80030 		ldr	r3, [fp]
 31258              	.LVL2431:
 31259              	.L2242:
 768:src/xeq.c     **** }
 31260              		.loc 1 768 23 view .LVU8363
 31261              	.LBE4294:
 31262              	.LBE4293:
 31263              	.LBE4292:
 31264              	.LBE4291:
5386:src/xeq.c     **** 		}
 31265              		.loc 1 5386 12 is_stmt 1 discriminator 1 view .LVU8364
5396:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31266              		.loc 1 5396 2 discriminator 1 view .LVU8365
5396:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31267              		.loc 1 5396 5 is_stmt 0 discriminator 1 view .LVU8366
 31268 01d6 002B     		cmp	r3, #0
 31269 01d8 C8D1     		bne	.L2253
 31270              	.L2364:
5465:src/xeq.c     **** #ifdef INFRARED
 31271              		.loc 1 5465 2 is_stmt 1 view .LVU8367
 31272              	.LBB4366:
 31273              	.LBI4366:
4462:src/xeq.c     **** 	// extern int IntMaxWindow;
 31274              		.loc 1 4462 6 view .LVU8368
 31275              	.LBB4367:
4465:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 31276              		.loc 1 4465 2 view .LVU8369
4465:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 31277              		.loc 1 4465 16 is_stmt 0 view .LVU8370
 31278 01da 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 31279              	.LBE4367:
 31280              	.LBE4366:
5467:src/xeq.c     **** 	print_trace( op, 1 );
 31281              		.loc 1 5467 10 view .LVU8371
 31282 01dc C8F80060 		str	r6, [r8]
 31283              	.LBB4370:
 31284              	.LBB4368:
4465:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 31285              		.loc 1 4465 16 view .LVU8372
 31286 01e0 6FF3C503 		bfc	r3, #3, #3
4466:src/xeq.c     **** }
 31287              		.loc 1 4466 15 view .LVU8373
 31288 01e4 0022     		movs	r2, #0
 31289              	.LBE4368:
 31290              	.LBE4370:
5468:src/xeq.c     **** #endif
 31291              		.loc 1 5468 2 view .LVU8374
 31292 01e6 2846     		mov	r0, r5
 31293 01e8 0121     		movs	r1, #1
 31294              	.LBB4371:
 31295              	.LBB4369:
4465:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 31296              		.loc 1 4465 16 view .LVU8375
 31297 01ea 2375     		strb	r3, [r4, #20]
ARM GAS  /tmp/cccVhVyH.s 			page 795


4466:src/xeq.c     **** }
 31298              		.loc 1 4466 2 is_stmt 1 view .LVU8376
4466:src/xeq.c     **** }
 31299              		.loc 1 4466 15 is_stmt 0 view .LVU8377
 31300 01ec 6274     		strb	r2, [r4, #17]
 31301              	.LBE4369:
 31302              	.LBE4371:
5467:src/xeq.c     **** 	print_trace( op, 1 );
 31303              		.loc 1 5467 2 is_stmt 1 view .LVU8378
5468:src/xeq.c     **** #endif
 31304              		.loc 1 5468 2 view .LVU8379
 31305 01ee FFF7FEFF 		bl	print_trace
 31306              	.LVL2432:
5470:src/xeq.c     **** 
 31307              		.loc 1 5470 1 is_stmt 0 view .LVU8380
 31308 01f2 6DB0     		add	sp, sp, #436
 31309              		.cfi_remember_state
 31310              		.cfi_def_cfa_offset 36
 31311              		@ sp needed
 31312 01f4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 31313              	.LVL2433:
 31314              	.L2553:
 31315              		.cfi_restore_state
5365:src/xeq.c     **** #endif
 31316              		.loc 1 5365 50 discriminator 4 view .LVU8381
 31317 01f8 94F91730 		ldrsb	r3, [r4, #23]
 31318 01fc 002B     		cmp	r3, #0
 31319 01fe FFF635AF 		blt	.L2233
5365:src/xeq.c     **** #endif
 31320              		.loc 1 5365 67 view .LVU8382
 31321 0202 0026     		movs	r6, #0
 31322 0204 35E7     		b	.L2232
 31323              	.LVL2434:
 31324              	.L2556:
 31325              	.LBB4372:
5355:src/xeq.c     **** 		else
 31326              		.loc 1 5355 4 is_stmt 1 view .LVU8383
 31327 0206 2846     		mov	r0, r5
 31328 0208 FFF7FEFF 		bl	print_step
 31329              	.LVL2435:
 31330 020c 0DF1EC0A 		add	r10, sp, #236
 31331 0210 6AE7     		b	.L2231
 31332              	.L2587:
 31333 0212 00BF     		.align	2
 31334              	.L2586:
 31335 0214 00000000 		.word	main_ram
 31336 0218 00000000 		.word	StateWhileOn
 31337 021c 00000000 		.word	StackBase
 31338 0220 00000000 		.word	Busy
 31339 0224 00000000 		.word	XeqOpCode
 31340 0228 00000000 		.word	.LC8
 31341 022c 00000000 		.word	TraceBuffer
 31342 0230 00000000 		.word	DispMsg
 31343 0234 00000000 		.word	multicmds
 31344 0238 00000000 		.word	xrom
 31345 023c 00000000 		.word	xrom_size
 31346 0240 00000000 		.word	Tracing
ARM GAS  /tmp/cccVhVyH.s 			page 796


 31347 0244 00000000 		.word	Running
 31348 0248 00000000 		.word	argcmds
 31349 024c 00000000 		.word	Error
 31350              	.LVL2436:
 31351              	.L2273:
5355:src/xeq.c     **** 		else
 31352              		.loc 1 5355 4 is_stmt 0 view .LVU8384
 31353              	.LBE4372:
5382:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
 31354              		.loc 1 5382 18 is_stmt 1 view .LVU8385
 31355              	.LBB4373:
 31356              	.LBI4373:
4749:src/xeq.c     **** 
 31357              		.loc 1 4749 13 view .LVU8386
 31358              	.LBB4374:
4751:src/xeq.c     **** 	process_cmdline_set_lift();
 31359              		.loc 1 4751 2 view .LVU8387
4752:src/xeq.c     **** 
 31360              		.loc 1 4752 2 view .LVU8388
 31361              	.LBB4375:
 31362              	.LBI4375:
1335:src/xeq.c     **** 	process_cmdline();
 31363              		.loc 1 1335 6 view .LVU8389
 31364              	.LBE4375:
 31365              	.LBE4374:
 31366              	.LBE4373:
1336:src/xeq.c     **** 	set_lift();
 31367              		.loc 1 1336 2 view .LVU8390
 31368              	.LBB4420:
 31369              	.LBB4413:
 31370              	.LBB4384:
 31371              	.LBB4376:
 31372              	.LBI4376:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 31373              		.loc 1 1229 6 view .LVU8391
 31374              	.LBB4377:
1230:src/xeq.c     **** 
 31375              		.loc 1 1230 2 view .LVU8392
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31376              		.loc 1 1232 2 view .LVU8393
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31377              		.loc 1 1232 5 is_stmt 0 view .LVU8394
 31378 0250 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31379 0252 0BB1     		cbz	r3, .L2338
 31380 0254 FFF7FEFF 		bl	process_cmdline.part.0
 31381              	.LVL2437:
 31382              	.L2338:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31383              		.loc 1 1232 5 view .LVU8395
 31384              	.LBE4377:
 31385              	.LBE4376:
 31386              	.LBE4384:
 31387              	.LBE4413:
 31388              	.LBE4420:
1337:src/xeq.c     **** }
 31389              		.loc 1 1337 2 is_stmt 1 view .LVU8396
 31390              	.LBB4421:
ARM GAS  /tmp/cccVhVyH.s 			page 797


 31391              	.LBB4414:
 31392              	.LBB4385:
 31393              	.LBB4378:
 31394              	.LBI4378:
 767:src/xeq.c     ****     State2.state_lift = 1;
 31395              		.loc 1 767 6 view .LVU8397
 31396              	.LBB4379:
 768:src/xeq.c     **** }
 31397              		.loc 1 768 5 view .LVU8398
 768:src/xeq.c     **** }
 31398              		.loc 1 768 23 is_stmt 0 view .LVU8399
 31399 0258 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31400              	.LBE4379:
 31401              	.LBE4378:
 31402              	.LBE4385:
4754:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 31403              		.loc 1 4754 4 view .LVU8400
 31404 025a EAB2     		uxtb	r2, r5
 31405              	.LBB4386:
 31406              	.LBB4382:
 31407              	.LBB4380:
 768:src/xeq.c     **** }
 31408              		.loc 1 768 23 view .LVU8401
 31409 025c 43F04003 		orr	r3, r3, #64
 31410              	.LBE4380:
 31411              	.LBE4382:
 31412              	.LBE4386:
4755:src/xeq.c     **** 		if (is_intmode()) {
 31413              		.loc 1 4755 5 view .LVU8402
 31414 0260 302A     		cmp	r2, #48
 31415              	.LBB4387:
 31416              	.LBB4383:
 31417              	.LBB4381:
 768:src/xeq.c     **** }
 31418              		.loc 1 768 23 view .LVU8403
 31419 0262 E375     		strb	r3, [r4, #23]
 31420              	.LBE4381:
 31421              	.LBE4383:
 31422              	.LBE4387:
4754:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 31423              		.loc 1 4754 2 is_stmt 1 view .LVU8404
 31424              	.LVL2438:
4755:src/xeq.c     **** 		if (is_intmode()) {
 31425              		.loc 1 4755 2 view .LVU8405
4755:src/xeq.c     **** 		if (is_intmode()) {
 31426              		.loc 1 4755 5 is_stmt 0 view .LVU8406
 31427 0264 40F23A83 		bls	.L2561
 31428              	.LVL2439:
 31429              	.L2268:
4755:src/xeq.c     **** 		if (is_intmode()) {
 31430              		.loc 1 4755 5 view .LVU8407
 31431              	.LBE4414:
 31432              	.LBE4421:
5386:src/xeq.c     **** 		}
 31433              		.loc 1 5386 12 is_stmt 1 view .LVU8408
5386:src/xeq.c     **** 		}
 31434              		.loc 1 5386 12 view .LVU8409
ARM GAS  /tmp/cccVhVyH.s 			page 798


 31435              	.LBB4422:
 31436              	.LBI4422:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31437              		.loc 1 546 5 view .LVU8410
 31438              	.LBB4423:
 547:src/xeq.c     **** 		Error = e;
 31439              		.loc 1 547 2 view .LVU8411
 547:src/xeq.c     **** 		Error = e;
 31440              		.loc 1 547 12 is_stmt 0 view .LVU8412
 31441 0268 DFF8D0B2 		ldr	fp, .L2588+16
 31442 026c DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 31443              		.loc 1 547 5 view .LVU8413
 31444 0270 0028     		cmp	r0, #0
 31445 0272 40F06082 		bne	.L2524
 31446 0276 DFF8C892 		ldr	r9, .L2588+20
 31447              	.LVL2440:
 31448              	.L2247:
 547:src/xeq.c     **** 		Error = e;
 31449              		.loc 1 547 5 view .LVU8414
 31450              	.LBE4423:
 31451              	.LBE4422:
 31452              	.LBB4424:
 31453              	.LBB4286:
 31454              	.LBB4276:
 31455              	.LBB4277:
 31456              	.LBB4278:
 31457              	.LBI4278:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31458              		.loc 1 546 5 is_stmt 1 view .LVU8415
 31459              	.LBB4279:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 31460              		.loc 1 548 3 view .LVU8416
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 31461              		.loc 1 548 9 is_stmt 0 view .LVU8417
 31462 027a 0320     		movs	r0, #3
 31463 027c CBF80000 		str	r0, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 31464              		.loc 1 549 3 is_stmt 1 view .LVU8418
 31465              	.LVL2441:
 31466              	.L2378:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 31467              		.loc 1 549 3 is_stmt 0 view .LVU8419
 31468              	.LBE4279:
 31469              	.LBE4278:
 31470              	.LBE4277:
 31471              	.LBE4276:
 31472              	.LBE4286:
 31473              	.LBE4424:
5398:src/xeq.c     **** 		// Repair stack and state
 31474              		.loc 1 5398 3 is_stmt 1 view .LVU8420
 31475 0280 FFF7FEFF 		bl	error_message
 31476              	.LVL2442:
5401:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
 31477              		.loc 1 5401 3 view .LVU8421
 31478 0284 A94B     		ldr	r3, .L2588
 31479 0286 44A9     		add	r1, sp, #272
ARM GAS  /tmp/cccVhVyH.s 			page 799


 31480 0288 1868     		ldr	r0, [r3]
 31481 028a A022     		movs	r2, #160
 31482 028c FFF7FEFF 		bl	xcopy
 31483              	.LVL2443:
5402:src/xeq.c     **** 		UState = old;
 31484              		.loc 1 5402 3 view .LVU8422
5403:src/xeq.c     **** 		State2.state_lift = lift;
 31485              		.loc 1 5403 10 is_stmt 0 view .LVU8423
 31486 0290 0CAA     		add	r2, sp, #48
 31487 0292 92E80300 		ldm	r2, {r0, r1}
5402:src/xeq.c     **** 		UState = old;
 31488              		.loc 1 5402 3 view .LVU8424
 31489 0296 3B68     		ldr	r3, [r7]
5402:src/xeq.c     **** 		UState = old;
 31490              		.loc 1 5402 28 view .LVU8425
 31491 0298 029A     		ldr	r2, [sp, #8]
 31492 029a A3F8FC27 		strh	r2, [r3, #2044]	@ movhi
5403:src/xeq.c     **** 		State2.state_lift = lift;
 31493              		.loc 1 5403 3 is_stmt 1 view .LVU8426
5403:src/xeq.c     **** 		State2.state_lift = lift;
 31494              		.loc 1 5403 10 is_stmt 0 view .LVU8427
 31495 029e 03F2E47C 		addw	ip, r3, #2020
 31496 02a2 8CE80300 		stm	ip, {r0, r1}
5404:src/xeq.c     **** 		raw_set_pc(old_pc);
 31497              		.loc 1 5404 3 is_stmt 1 view .LVU8428
5404:src/xeq.c     **** 		raw_set_pc(old_pc);
 31498              		.loc 1 5404 21 is_stmt 0 view .LVU8429
 31499 02a6 0599     		ldr	r1, [sp, #20]
 31500 02a8 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 31501 02aa 61F38612 		bfi	r2, r1, #6, #1
 31502 02ae E275     		strb	r2, [r4, #23]
5405:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
 31503              		.loc 1 5405 3 is_stmt 1 view .LVU8430
 31504              	.LVL2444:
 31505              	.LBB4425:
 31506              	.LBI4425:
 282:src/xeq.c     **** 	State.pc = pc;
 31507              		.loc 1 282 13 view .LVU8431
 31508              	.LBB4426:
 283:src/xeq.c     **** 	update_program_bounds(0);
 31509              		.loc 1 283 2 view .LVU8432
 283:src/xeq.c     **** 	update_program_bounds(0);
 31510              		.loc 1 283 11 is_stmt 0 view .LVU8433
 31511 02b0 039A     		ldr	r2, [sp, #12]
 31512 02b2 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 31513              		.loc 1 284 2 is_stmt 1 view .LVU8434
 31514 02b6 0020     		movs	r0, #0
 31515 02b8 FFF7FEFF 		bl	update_program_bounds
 31516              	.LVL2445:
 284:src/xeq.c     **** }
 31517              		.loc 1 284 2 is_stmt 0 view .LVU8435
 31518              	.LBE4426:
 31519              	.LBE4425:
5406:src/xeq.c     **** 		process_cmdline_set_lift();
 31520              		.loc 1 5406 3 is_stmt 1 view .LVU8436
5406:src/xeq.c     **** 		process_cmdline_set_lift();
ARM GAS  /tmp/cccVhVyH.s 			page 800


 31521              		.loc 1 5406 26 is_stmt 0 view .LVU8437
 31522 02bc 049B     		ldr	r3, [sp, #16]
 31523 02be E361     		str	r3, [r4, #28]
5407:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
 31524              		.loc 1 5407 3 is_stmt 1 view .LVU8438
 31525              	.LBB4427:
 31526              	.LBI4427:
1335:src/xeq.c     **** 	process_cmdline();
 31527              		.loc 1 1335 6 view .LVU8439
 31528              	.LBE4427:
1336:src/xeq.c     **** 	set_lift();
 31529              		.loc 1 1336 2 view .LVU8440
 31530              	.LBB4438:
 31531              	.LBB4428:
 31532              	.LBI4428:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 31533              		.loc 1 1229 6 view .LVU8441
 31534              	.LBB4429:
1230:src/xeq.c     **** 
 31535              		.loc 1 1230 2 view .LVU8442
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31536              		.loc 1 1232 2 view .LVU8443
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31537              		.loc 1 1232 5 is_stmt 0 view .LVU8444
 31538 02c0 13F0FF0F 		tst	r3, #255
 31539 02c4 40F04F82 		bne	.L2562
 31540              	.L2365:
 31541              	.LBE4429:
 31542              	.LBE4428:
 31543              	.LBE4438:
1337:src/xeq.c     **** }
 31544              		.loc 1 1337 2 is_stmt 1 view .LVU8445
 31545              	.LBB4439:
 31546              	.LBB4431:
 31547              	.LBI4431:
 767:src/xeq.c     ****     State2.state_lift = 1;
 31548              		.loc 1 767 6 view .LVU8446
 31549              	.LBB4432:
 768:src/xeq.c     **** }
 31550              		.loc 1 768 5 view .LVU8447
 31551              	.LBE4432:
 31552              	.LBE4431:
 31553              	.LBE4439:
5411:src/xeq.c     **** #ifndef REALBUILD
 31554              		.loc 1 5411 15 is_stmt 0 view .LVU8448
 31555 02c8 994A     		ldr	r2, .L2588+4
 31556              	.LBB4440:
 31557              	.LBB4435:
 31558              	.LBB4433:
 768:src/xeq.c     **** }
 31559              		.loc 1 768 23 view .LVU8449
 31560 02ca E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31561              	.LBE4433:
 31562              	.LBE4435:
 31563              	.LBE4440:
5411:src/xeq.c     **** #ifndef REALBUILD
 31564              		.loc 1 5411 15 view .LVU8450
ARM GAS  /tmp/cccVhVyH.s 			page 801


 31565 02cc 1168     		ldr	r1, [r2]
 31566 02ce D9F80020 		ldr	r2, [r9]
 31567              	.LBB4441:
 31568              	.LBB4436:
 31569              	.LBB4434:
 768:src/xeq.c     **** }
 31570              		.loc 1 768 23 view .LVU8451
 31571 02d2 43F04003 		orr	r3, r3, #64
 31572 02d6 E375     		strb	r3, [r4, #23]
 31573              	.LBE4434:
 31574              	.LBE4436:
 31575              	.LBE4441:
5410:src/xeq.c     **** 		if (Running || XromRunning) {
 31576              		.loc 1 5410 3 is_stmt 1 view .LVU8452
5410:src/xeq.c     **** 		if (Running || XromRunning) {
 31577              		.loc 1 5410 9 is_stmt 0 view .LVU8453
 31578 02d8 0020     		movs	r0, #0
5411:src/xeq.c     **** #ifndef REALBUILD
 31579              		.loc 1 5411 15 view .LVU8454
 31580 02da 52EA0103 		orrs	r3, r2, r1
5410:src/xeq.c     **** 		if (Running || XromRunning) {
 31581              		.loc 1 5410 9 view .LVU8455
 31582 02de CBF80000 		str	r0, [fp]
5411:src/xeq.c     **** #ifndef REALBUILD
 31583              		.loc 1 5411 3 is_stmt 1 view .LVU8456
5411:src/xeq.c     **** #ifndef REALBUILD
 31584              		.loc 1 5411 15 is_stmt 0 view .LVU8457
 31585 02e2 3FF47AAF 		beq	.L2364
5413:src/xeq.c     **** 				// Special handling for debug environment
 31586              		.loc 1 5413 4 is_stmt 1 view .LVU8458
5413:src/xeq.c     **** 				// Special handling for debug environment
 31587              		.loc 1 5413 7 is_stmt 0 view .LVU8459
 31588 02e6 94F91730 		ldrsb	r3, [r4, #23]
 31589 02ea 8342     		cmp	r3, r0
 31590 02ec C0F23E82 		blt	.L2563
 31591              	.LBB4442:
5435:src/xeq.c     **** 				if (XromFlags.xIN) {
 31592              		.loc 1 5435 5 is_stmt 1 view .LVU8460
5436:src/xeq.c     **** 					// Restore state to before xIN
 31593              		.loc 1 5436 9 is_stmt 0 view .LVU8461
 31594 02f0 DFF850C2 		ldr	ip, .L2588+24
5435:src/xeq.c     **** 				if (XromFlags.xIN) {
 31595              		.loc 1 5435 29 view .LVU8462
 31596 02f4 3968     		ldr	r1, [r7]
5436:src/xeq.c     **** 					// Restore state to before xIN
 31597              		.loc 1 5436 8 view .LVU8463
 31598 02f6 9CF90120 		ldrsb	r2, [ip, #1]
5435:src/xeq.c     **** 				if (XromFlags.xIN) {
 31599              		.loc 1 5435 24 view .LVU8464
 31600 02fa B1F8E037 		ldrh	r3, [r1, #2016]
 31601              	.LVL2446:
5436:src/xeq.c     **** 					// Restore state to before xIN
 31602              		.loc 1 5436 5 is_stmt 1 view .LVU8465
5436:src/xeq.c     **** 					// Restore state to before xIN
 31603              		.loc 1 5436 8 is_stmt 0 view .LVU8466
 31604 02fe 002A     		cmp	r2, #0
 31605 0300 26DA     		bge	.L2373
ARM GAS  /tmp/cccVhVyH.s 			page 802


5438:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 31606              		.loc 1 5438 6 is_stmt 1 view .LVU8467
5438:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 31607              		.loc 1 5438 20 is_stmt 0 view .LVU8468
 31608 0302 9CF801E0 		ldrb	lr, [ip, #1]	@ zero_extendqisi2
5440:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 31609              		.loc 1 5440 18 view .LVU8469
 31610 0306 DFF840A2 		ldr	r10, .L2588+28
5438:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 31611              		.loc 1 5438 20 view .LVU8470
 31612 030a 60F3C71E 		bfi	lr, r0, #7, #1
5440:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 31613              		.loc 1 5440 18 view .LVU8471
 31614 030e CEF3C000 		ubfx	r0, lr, #3, #1
 31615 0312 0EF00102 		and	r2, lr, #1
 31616 0316 42EA8032 		orr	r2, r2, r0, lsl #14
 31617 031a CEF38000 		ubfx	r0, lr, #2, #1
 31618 031e 42EAC042 		orr	r2, r2, r0, lsl #19
 31619 0322 D1F8E807 		ldr	r0, [r1, #2024]
5438:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 31620              		.loc 1 5438 20 view .LVU8472
 31621 0326 8CF801E0 		strb	lr, [ip, #1]
5439:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
 31622              		.loc 1 5439 6 is_stmt 1 view .LVU8473
5440:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 31623              		.loc 1 5440 6 view .LVU8474
5441:src/xeq.c     **** 					// Restore the global return stack
 31624              		.loc 1 5441 6 view .LVU8475
5440:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 31625              		.loc 1 5440 18 is_stmt 0 view .LVU8476
 31626 032a 20F40420 		bic	r0, r0, #540672
 31627 032e 02EA0A02 		and	r2, r2, r10
5443:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31628              		.loc 1 5443 13 view .LVU8477
 31629 0332 DFF818E2 		ldr	lr, .L2588+32
 31630 0336 DCF808A0 		ldr	r10, [ip, #8]
5444:src/xeq.c     **** 				}
 31631              		.loc 1 5444 16 view .LVU8478
 31632 033a BCF80CC0 		ldrh	ip, [ip, #12]
5443:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31633              		.loc 1 5443 13 view .LVU8479
 31634 033e CEF800A0 		str	r10, [lr]
5440:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 31635              		.loc 1 5440 18 view .LVU8480
 31636 0342 20F00100 		bic	r0, r0, #1
 31637 0346 0243     		orrs	r2, r2, r0
 31638 0348 C1F8E827 		str	r2, [r1, #2024]
5443:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31639              		.loc 1 5443 6 is_stmt 1 view .LVU8481
5444:src/xeq.c     **** 				}
 31640              		.loc 1 5444 6 view .LVU8482
5444:src/xeq.c     **** 				}
 31641              		.loc 1 5444 16 is_stmt 0 view .LVU8483
 31642 034c A1F8E2C7 		strh	ip, [r1, #2018]	@ movhi
 31643              	.L2373:
5446:src/xeq.c     **** 					// Leave XROM
 31644              		.loc 1 5446 11 is_stmt 1 view .LVU8484
ARM GAS  /tmp/cccVhVyH.s 			page 803


 31645 0350 9A0B     		lsrs	r2, r3, #14
 31646 0352 032A     		cmp	r2, #3
 31647 0354 1DD1     		bne	.L2377
5450:src/xeq.c     **** 					}
 31648              		.loc 1 5450 10 is_stmt 0 view .LVU8485
 31649 0356 DFF8F4B1 		ldr	fp, .L2588+32
5450:src/xeq.c     **** 					}
 31650              		.loc 1 5450 18 view .LVU8486
 31651 035a 6FF0004A 		mvn	r10, #-2147483648
 31652 035e 04E0     		b	.L2376
 31653              	.L2374:
5453:src/xeq.c     **** 				}
 31654              		.loc 1 5453 7 is_stmt 1 view .LVU8487
 31655 0360 0133     		adds	r3, r3, #1
 31656              	.LVL2447:
5453:src/xeq.c     **** 				}
 31657              		.loc 1 5453 7 is_stmt 0 view .LVU8488
 31658 0362 9BB2     		uxth	r3, r3
 31659              	.LVL2448:
5446:src/xeq.c     **** 					// Leave XROM
 31660              		.loc 1 5446 11 is_stmt 1 view .LVU8489
 31661 0364 9A0B     		lsrs	r2, r3, #14
 31662 0366 032A     		cmp	r2, #3
 31663 0368 13D1     		bne	.L2377
 31664              	.L2376:
5448:src/xeq.c     **** 						retstk_up();
 31665              		.loc 1 5448 6 view .LVU8490
5448:src/xeq.c     **** 						retstk_up();
 31666              		.loc 1 5448 9 is_stmt 0 view .LVU8491
 31667 036a B1F9E227 		ldrsh	r2, [r1, #2018]
 31668 036e 002A     		cmp	r2, #0
 31669 0370 F6D0     		beq	.L2374
5449:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
 31670              		.loc 1 5449 7 is_stmt 1 view .LVU8492
 31671 0372 FFF7FEFF 		bl	retstk_up
 31672              	.LVL2449:
5450:src/xeq.c     **** 					}
 31673              		.loc 1 5450 7 view .LVU8493
5450:src/xeq.c     **** 					}
 31674              		.loc 1 5450 19 is_stmt 0 view .LVU8494
 31675 0376 3968     		ldr	r1, [r7]
5450:src/xeq.c     **** 					}
 31676              		.loc 1 5450 10 view .LVU8495
 31677 0378 DBF80030 		ldr	r3, [fp]
5450:src/xeq.c     **** 					}
 31678              		.loc 1 5450 19 view .LVU8496
 31679 037c B1F9E227 		ldrsh	r2, [r1, #2018]
5450:src/xeq.c     **** 					}
 31680              		.loc 1 5450 18 view .LVU8497
 31681 0380 02EB0A00 		add	r0, r2, r10
5450:src/xeq.c     **** 					}
 31682              		.loc 1 5450 10 view .LVU8498
 31683 0384 33F81030 		ldrh	r3, [r3, r0, lsl #1]
 31684              	.LVL2450:
5452:src/xeq.c     **** 						++pc; // compensate for decpc below
 31685              		.loc 1 5452 6 is_stmt 1 view .LVU8499
5452:src/xeq.c     **** 						++pc; // compensate for decpc below
ARM GAS  /tmp/cccVhVyH.s 			page 804


 31686              		.loc 1 5452 9 is_stmt 0 view .LVU8500
 31687 0388 002A     		cmp	r2, #0
 31688 038a E9D0     		beq	.L2374
5446:src/xeq.c     **** 					// Leave XROM
 31689              		.loc 1 5446 11 is_stmt 1 view .LVU8501
 31690 038c 9A0B     		lsrs	r2, r3, #14
 31691 038e 032A     		cmp	r2, #3
 31692 0390 EBD0     		beq	.L2376
 31693              	.L2377:
5455:src/xeq.c     **** #ifndef REALBUILD
 31694              		.loc 1 5455 5 view .LVU8502
 31695              	.LVL2451:
 31696              	.LBB4443:
 31697              	.LBI4443:
 282:src/xeq.c     **** 	State.pc = pc;
 31698              		.loc 1 282 13 view .LVU8503
 31699              	.LBB4444:
 283:src/xeq.c     **** 	update_program_bounds(0);
 31700              		.loc 1 283 2 view .LVU8504
 283:src/xeq.c     **** 	update_program_bounds(0);
 31701              		.loc 1 283 11 is_stmt 0 view .LVU8505
 31702 0392 A1F8E037 		strh	r3, [r1, #2016]	@ movhi
 284:src/xeq.c     **** }
 31703              		.loc 1 284 2 is_stmt 1 view .LVU8506
 31704 0396 0020     		movs	r0, #0
 31705 0398 FFF7FEFF 		bl	update_program_bounds
 31706              	.LVL2452:
 31707              	.L2368:
 284:src/xeq.c     **** }
 31708              		.loc 1 284 2 is_stmt 0 view .LVU8507
 31709              	.LBE4444:
 31710              	.LBE4443:
 31711              	.LBE4442:
5459:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
 31712              		.loc 1 5459 4 is_stmt 1 view .LVU8508
 31713 039c FFF7FEFF 		bl	decpc
 31714              	.LVL2453:
5460:src/xeq.c     **** 
 31715              		.loc 1 5460 4 view .LVU8509
 31716 03a0 FFF7FEFF 		bl	xeq_init_contexts
 31717              	.LVL2454:
5462:src/xeq.c     **** 		}
 31718              		.loc 1 5462 4 view .LVU8510
 31719              	.LBB4445:
 31720              	.LBI4445:
5824:src/xeq.c     **** 	set_running_off_sst();
 31721              		.loc 1 5824 6 view .LVU8511
 31722              	.LBB4446:
5825:src/xeq.c     **** 	State.entryp = 0;
 31723              		.loc 1 5825 2 view .LVU8512
 31724              	.LBB4447:
 31725              	.LBI4447:
5816:src/xeq.c     **** 	Running = 0;
 31726              		.loc 1 5816 6 view .LVU8513
 31727              	.LBB4448:
5817:src/xeq.c     **** }
 31728              		.loc 1 5817 2 view .LVU8514
ARM GAS  /tmp/cccVhVyH.s 			page 805


 31729              	.LBE4448:
 31730              	.LBE4447:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 31731              		.loc 1 5826 15 is_stmt 0 view .LVU8515
 31732 03a4 3B68     		ldr	r3, [r7]
 31733              	.LBB4450:
 31734              	.LBB4449:
5817:src/xeq.c     **** }
 31735              		.loc 1 5817 10 view .LVU8516
 31736 03a6 0021     		movs	r1, #0
 31737 03a8 C9F80010 		str	r1, [r9]
 31738              	.LBE4449:
 31739              	.LBE4450:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 31740              		.loc 1 5826 2 is_stmt 1 view .LVU8517
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 31741              		.loc 1 5826 15 is_stmt 0 view .LVU8518
 31742 03ac 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 31743 03b0 61F30412 		bfi	r2, r1, #4, #1
 31744 03b4 83F8DD27 		strb	r2, [r3, #2013]
5827:src/xeq.c     **** }
 31745              		.loc 1 5827 2 is_stmt 1 view .LVU8519
 31746 03b8 8A20     		movs	r0, #138
 31747 03ba FFF7FEFF 		bl	dot
 31748              	.LVL2455:
5828:src/xeq.c     **** 
 31749              		.loc 1 5828 1 is_stmt 0 view .LVU8520
 31750 03be 0CE7     		b	.L2364
 31751              	.LVL2456:
 31752              	.L2557:
5828:src/xeq.c     **** 
 31753              		.loc 1 5828 1 view .LVU8521
 31754 03c0 0793     		str	r3, [sp, #28]
 31755              	.LBE4446:
 31756              	.LBE4445:
 31757              	.LBB4451:
 31758              	.LBB4247:
 31759              	.LBB4225:
 31760              	.LBB4217:
 31761 03c2 FFF7FEFF 		bl	process_cmdline.part.0
 31762              	.LVL2457:
 31763 03c6 079B     		ldr	r3, [sp, #28]
 31764 03c8 A7E6     		b	.L2245
 31765              	.LVL2458:
 31766              	.L2269:
5828:src/xeq.c     **** 
 31767              		.loc 1 5828 1 view .LVU8522
 31768              	.LBE4217:
 31769              	.LBE4225:
 31770              	.LBE4247:
 31771              	.LBE4451:
5385:src/xeq.c     **** 		default:	illegal(op);
 31772              		.loc 1 5385 19 is_stmt 1 view .LVU8523
 31773              	.LBB4452:
 31774              	.LBI4452:
4792:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
 31775              		.loc 1 4792 13 view .LVU8524
ARM GAS  /tmp/cccVhVyH.s 			page 806


 31776              	.LBB4453:
4793:src/xeq.c     **** 	unsigned int f;
 31777              		.loc 1 4793 2 view .LVU8525
4794:src/xeq.c     **** 
 31778              		.loc 1 4794 2 view .LVU8526
4796:src/xeq.c     **** 
 31779              		.loc 1 4796 2 view .LVU8527
 31780              	.LBB4454:
 31781              	.LBI4454:
1335:src/xeq.c     **** 	process_cmdline();
 31782              		.loc 1 1335 6 view .LVU8528
 31783              	.LBE4454:
 31784              	.LBE4453:
 31785              	.LBE4452:
1336:src/xeq.c     **** 	set_lift();
 31786              		.loc 1 1336 2 view .LVU8529
 31787              	.LBB4495:
 31788              	.LBB4488:
 31789              	.LBB4465:
 31790              	.LBB4455:
 31791              	.LBI4455:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 31792              		.loc 1 1229 6 view .LVU8530
 31793              	.LBB4456:
1230:src/xeq.c     **** 
 31794              		.loc 1 1230 2 view .LVU8531
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31795              		.loc 1 1232 2 view .LVU8532
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31796              		.loc 1 1232 5 is_stmt 0 view .LVU8533
 31797 03ca 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31798 03cc 002B     		cmp	r3, #0
 31799 03ce 40F0E282 		bne	.L2564
 31800              	.L2359:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31801              		.loc 1 1232 5 view .LVU8534
 31802              	.LBE4456:
 31803              	.LBE4455:
 31804              	.LBE4465:
 31805              	.LBE4488:
 31806              	.LBE4495:
1337:src/xeq.c     **** }
 31807              		.loc 1 1337 2 is_stmt 1 view .LVU8535
 31808              	.LBB4496:
 31809              	.LBB4489:
 31810              	.LBB4466:
 31811              	.LBB4458:
 31812              	.LBI4458:
 767:src/xeq.c     ****     State2.state_lift = 1;
 31813              		.loc 1 767 6 view .LVU8536
 31814              	.LBB4459:
 768:src/xeq.c     **** }
 31815              		.loc 1 768 5 view .LVU8537
 768:src/xeq.c     **** }
 31816              		.loc 1 768 23 is_stmt 0 view .LVU8538
 31817 03d2 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 31818              	.LBE4459:
ARM GAS  /tmp/cccVhVyH.s 			page 807


 31819              	.LBE4458:
 31820              	.LBE4466:
4798:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 31821              		.loc 1 4798 4 view .LVU8539
 31822 03d4 EBB2     		uxtb	r3, r5
 31823              	.LBB4467:
 31824              	.LBB4462:
 31825              	.LBB4460:
 768:src/xeq.c     **** }
 31826              		.loc 1 768 23 view .LVU8540
 31827 03d6 42F04002 		orr	r2, r2, #64
 31828              	.LBE4460:
 31829              	.LBE4462:
 31830              	.LBE4467:
4799:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31831              		.loc 1 4799 5 view .LVU8541
 31832 03da 302B     		cmp	r3, #48
 31833              	.LBB4468:
 31834              	.LBB4463:
 31835              	.LBB4461:
 768:src/xeq.c     **** }
 31836              		.loc 1 768 23 view .LVU8542
 31837 03dc E275     		strb	r2, [r4, #23]
 31838              	.LBE4461:
 31839              	.LBE4463:
 31840              	.LBE4468:
4798:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 31841              		.loc 1 4798 2 is_stmt 1 view .LVU8543
 31842              	.LVL2459:
4799:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31843              		.loc 1 4799 2 view .LVU8544
4799:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31844              		.loc 1 4799 5 is_stmt 0 view .LVU8545
 31845 03de 00F27281 		bhi	.L2360
4800:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31846              		.loc 1 4800 3 is_stmt 1 view .LVU8546
4800:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31847              		.loc 1 4800 9 is_stmt 0 view .LVU8547
 31848 03e2 544A     		ldr	r2, .L2588+8
 31849 03e4 03EB4303 		add	r3, r3, r3, lsl #1
 31850              	.LVL2460:
4800:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31851              		.loc 1 4800 9 view .LVU8548
 31852 03e8 02EBC303 		add	r3, r2, r3, lsl #3
 31853 03ec D3F80490 		ldr	r9, [r3, #4]
4800:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31854              		.loc 1 4800 6 view .LVU8549
 31855 03f0 B9F1000F 		cmp	r9, #0
 31856 03f4 00F0E983 		beq	.L2361
 31857              	.LBB4469:
4801:src/xeq.c     **** 			if (dispatch_xrom(fp))
 31858              		.loc 1 4801 4 is_stmt 1 view .LVU8550
 31859              	.LVL2461:
4802:src/xeq.c     **** 				return;
 31860              		.loc 1 4802 4 view .LVU8551
4802:src/xeq.c     **** 				return;
 31861              		.loc 1 4802 8 is_stmt 0 view .LVU8552
ARM GAS  /tmp/cccVhVyH.s 			page 808


 31862 03f8 4846     		mov	r0, r9
 31863 03fa FFF7FEFF 		bl	dispatch_xrom
 31864              	.LVL2462:
4802:src/xeq.c     **** 				return;
 31865              		.loc 1 4802 7 view .LVU8553
 31866 03fe 0028     		cmp	r0, #0
 31867 0400 40F0AC81 		bne	.L2239
4805:src/xeq.c     **** 
 31868              		.loc 1 4805 5 is_stmt 1 view .LVU8554
 31869              	.LVL2463:
 31870              	.LBB4470:
 31871              	.LBI4470:
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 31872              		.loc 1 879 6 view .LVU8555
 31873              	.LBB4471:
 880:src/xeq.c     **** 	getT(t);
 31874              		.loc 1 880 2 view .LVU8556
 31875 0404 17AB     		add	r3, sp, #92
 31876              	.LVL2464:
 880:src/xeq.c     **** 	getT(t);
 31877              		.loc 1 880 2 is_stmt 0 view .LVU8557
 31878 0406 0DF1380B 		add	fp, sp, #56
 31879              	.LVL2465:
 880:src/xeq.c     **** 	getT(t);
 31880              		.loc 1 880 2 view .LVU8558
 31881 040a 20AA     		add	r2, sp, #128
 31882              	.LVL2466:
 880:src/xeq.c     **** 	getT(t);
 31883              		.loc 1 880 2 view .LVU8559
 31884 040c 1946     		mov	r1, r3
 31885 040e 5846     		mov	r0, fp
 31886 0410 FFF7FEFF 		bl	getXYZ
 31887              	.LVL2467:
 881:src/xeq.c     **** }
 31888              		.loc 1 881 2 is_stmt 1 view .LVU8560
 31889              	.LBB4472:
 31890              	.LBI4472:
 850:src/xeq.c     **** 	getRegister(t, regT_idx);
 31891              		.loc 1 850 13 view .LVU8561
 31892              	.LBB4473:
 851:src/xeq.c     **** }
 31893              		.loc 1 851 2 view .LVU8562
 31894 0414 29A8     		add	r0, sp, #164
 31895              	.LVL2468:
 851:src/xeq.c     **** }
 31896              		.loc 1 851 2 is_stmt 0 view .LVU8563
 31897 0416 6721     		movs	r1, #103
 31898 0418 FFF7FEFF 		bl	getRegister
 31899              	.LVL2469:
 851:src/xeq.c     **** }
 31900              		.loc 1 851 2 view .LVU8564
 31901              	.LBE4473:
 31902              	.LBE4472:
 31903              	.LBE4471:
 31904              	.LBE4470:
4807:src/xeq.c     **** 
 31905              		.loc 1 4807 5 is_stmt 1 view .LVU8565
ARM GAS  /tmp/cccVhVyH.s 			page 809


 31906 041c 17AB     		add	r3, sp, #92
 31907 041e 20AA     		add	r2, sp, #128
 31908 0420 32A8     		add	r0, sp, #200
 31909 0422 5146     		mov	r1, r10
 31910 0424 CDE900B3 		strd	fp, r3, [sp]
 31911 0428 29AB     		add	r3, sp, #164
 31912 042a C847     		blx	r9
 31913              	.LVL2470:
4809:src/xeq.c     **** 				lower2();
 31914              		.loc 1 4809 5 view .LVU8566
 31915 042c FFF7FEFF 		bl	setlastXY
 31916              	.LVL2471:
4810:src/xeq.c     **** 				setXY(&xr, &yr);
 31917              		.loc 1 4810 5 view .LVU8567
 31918 0430 FFF7FEFF 		bl	lower2
 31919              	.LVL2472:
 31920 0434 B8E0     		b	.L2532
 31921              	.LVL2473:
 31922              	.L2276:
4810:src/xeq.c     **** 				setXY(&xr, &yr);
 31923              		.loc 1 4810 5 is_stmt 0 view .LVU8568
 31924              	.LBE4469:
 31925              	.LBE4489:
 31926              	.LBE4496:
5379:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
 31927              		.loc 1 5379 19 is_stmt 1 view .LVU8569
 31928              	.LBB4497:
 31929              	.LBI4291:
3924:src/xeq.c     **** 	int opm = argKIND(op);
 31930              		.loc 1 3924 13 view .LVU8570
 31931              	.LBB4357:
3925:src/xeq.c     **** 
 31932              		.loc 1 3925 2 view .LVU8571
3925:src/xeq.c     **** 
 31933              		.loc 1 3925 6 is_stmt 0 view .LVU8572
 31934 0436 5FFA85F9 		uxtb	r9, r5
 31935              	.LVL2474:
3927:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 31936              		.loc 1 3927 2 is_stmt 1 view .LVU8573
 31937 043a B9F12A0F 		cmp	r9, #42
 31938 043e 3FF613AF 		bhi	.L2268
 31939 0442 DFE819F0 		tbh	[pc, r9, lsl #1]
 31940              	.L2279:
 31941 0446 3103     		.2byte	(.L2290-.L2279)/2
 31942 0448 2103     		.2byte	(.L2289-.L2279)/2
 31943 044a 8D03     		.2byte	(.L2288-.L2279)/2
 31944 044c 7A03     		.2byte	(.L2287-.L2279)/2
 31945 044e 4703     		.2byte	(.L2286-.L2279)/2
 31946 0450 9F02     		.2byte	(.L2285-.L2279)/2
 31947 0452 9F02     		.2byte	(.L2285-.L2279)/2
 31948 0454 9F02     		.2byte	(.L2285-.L2279)/2
 31949 0456 9F02     		.2byte	(.L2285-.L2279)/2
 31950 0458 9F02     		.2byte	(.L2285-.L2279)/2
 31951 045a 9F02     		.2byte	(.L2285-.L2279)/2
 31952 045c 9F02     		.2byte	(.L2285-.L2279)/2
 31953 045e 9F02     		.2byte	(.L2285-.L2279)/2
 31954 0460 9F02     		.2byte	(.L2285-.L2279)/2
ARM GAS  /tmp/cccVhVyH.s 			page 810


 31955 0462 9F02     		.2byte	(.L2285-.L2279)/2
 31956 0464 9F02     		.2byte	(.L2285-.L2279)/2
 31957 0466 9F02     		.2byte	(.L2285-.L2279)/2
 31958 0468 9F02     		.2byte	(.L2285-.L2279)/2
 31959 046a 9F02     		.2byte	(.L2285-.L2279)/2
 31960 046c 9F02     		.2byte	(.L2285-.L2279)/2
 31961 046e 9F02     		.2byte	(.L2285-.L2279)/2
 31962 0470 E602     		.2byte	(.L2284-.L2279)/2
 31963 0472 E602     		.2byte	(.L2284-.L2279)/2
 31964 0474 C302     		.2byte	(.L2283-.L2279)/2
 31965 0476 C302     		.2byte	(.L2283-.L2279)/2
 31966 0478 C302     		.2byte	(.L2283-.L2279)/2
 31967 047a C302     		.2byte	(.L2283-.L2279)/2
 31968 047c C302     		.2byte	(.L2283-.L2279)/2
 31969 047e C302     		.2byte	(.L2283-.L2279)/2
 31970 0480 C302     		.2byte	(.L2283-.L2279)/2
 31971 0482 B702     		.2byte	(.L2282-.L2279)/2
 31972 0484 B702     		.2byte	(.L2282-.L2279)/2
 31973 0486 B702     		.2byte	(.L2282-.L2279)/2
 31974 0488 B702     		.2byte	(.L2282-.L2279)/2
 31975 048a B702     		.2byte	(.L2282-.L2279)/2
 31976 048c B702     		.2byte	(.L2282-.L2279)/2
 31977 048e B702     		.2byte	(.L2282-.L2279)/2
 31978 0490 D902     		.2byte	(.L2281-.L2279)/2
 31979 0492 D902     		.2byte	(.L2281-.L2279)/2
 31980 0494 1403     		.2byte	(.L2280-.L2279)/2
 31981 0496 1403     		.2byte	(.L2280-.L2279)/2
 31982 0498 0703     		.2byte	(.L2278-.L2279)/2
 31983 049a 0703     		.2byte	(.L2278-.L2279)/2
 31984              	.LVL2475:
 31985              		.p2align 1
 31986              	.L2272:
3927:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 31987              		.loc 1 3927 2 is_stmt 0 view .LVU8574
 31988              	.LBE4357:
 31989              	.LBE4497:
5383:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
 31990              		.loc 1 5383 18 is_stmt 1 view .LVU8575
 31991              	.LBB4498:
 31992              	.LBI4498:
4824:src/xeq.c     **** 	unsigned int f;
 31993              		.loc 1 4824 13 view .LVU8576
 31994              	.LBB4499:
4825:src/xeq.c     **** 	process_cmdline_set_lift();
 31995              		.loc 1 4825 2 view .LVU8577
4826:src/xeq.c     **** 
 31996              		.loc 1 4826 2 view .LVU8578
 31997              	.LBB4500:
 31998              	.LBI4500:
1335:src/xeq.c     **** 	process_cmdline();
 31999              		.loc 1 1335 6 view .LVU8579
 32000              	.LBE4500:
 32001              	.LBE4499:
 32002              	.LBE4498:
1336:src/xeq.c     **** 	set_lift();
 32003              		.loc 1 1336 2 view .LVU8580
 32004              	.LBB4545:
ARM GAS  /tmp/cccVhVyH.s 			page 811


 32005              	.LBB4538:
 32006              	.LBB4511:
 32007              	.LBB4501:
 32008              	.LBI4501:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 32009              		.loc 1 1229 6 view .LVU8581
 32010              	.LBB4502:
1230:src/xeq.c     **** 
 32011              		.loc 1 1230 2 view .LVU8582
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32012              		.loc 1 1232 2 view .LVU8583
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32013              		.loc 1 1232 5 is_stmt 0 view .LVU8584
 32014 049c 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32015 049e 002B     		cmp	r3, #0
 32016 04a0 40F08582 		bne	.L2565
 32017              	.L2346:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32018              		.loc 1 1232 5 view .LVU8585
 32019              	.LBE4502:
 32020              	.LBE4501:
 32021              	.LBE4511:
 32022              	.LBE4538:
 32023              	.LBE4545:
1337:src/xeq.c     **** }
 32024              		.loc 1 1337 2 is_stmt 1 view .LVU8586
 32025              	.LBB4546:
 32026              	.LBB4539:
 32027              	.LBB4512:
 32028              	.LBB4504:
 32029              	.LBI4504:
 767:src/xeq.c     ****     State2.state_lift = 1;
 32030              		.loc 1 767 6 view .LVU8587
 32031              	.LBB4505:
 768:src/xeq.c     **** }
 32032              		.loc 1 768 5 view .LVU8588
 768:src/xeq.c     **** }
 32033              		.loc 1 768 23 is_stmt 0 view .LVU8589
 32034 04a4 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32035              	.LBE4505:
 32036              	.LBE4504:
 32037              	.LBE4512:
4828:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 32038              		.loc 1 4828 4 view .LVU8590
 32039 04a6 EAB2     		uxtb	r2, r5
 32040              	.LBB4513:
 32041              	.LBB4508:
 32042              	.LBB4506:
 768:src/xeq.c     **** }
 32043              		.loc 1 768 23 view .LVU8591
 32044 04a8 43F04003 		orr	r3, r3, #64
 32045              	.LBE4506:
 32046              	.LBE4508:
 32047              	.LBE4513:
4829:src/xeq.c     **** 		if (is_intmode()) {
 32048              		.loc 1 4829 5 view .LVU8592
 32049 04ac 0B2A     		cmp	r2, #11
ARM GAS  /tmp/cccVhVyH.s 			page 812


 32050              	.LBB4514:
 32051              	.LBB4509:
 32052              	.LBB4507:
 768:src/xeq.c     **** }
 32053              		.loc 1 768 23 view .LVU8593
 32054 04ae E375     		strb	r3, [r4, #23]
 32055              	.LBE4507:
 32056              	.LBE4509:
 32057              	.LBE4514:
4828:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 32058              		.loc 1 4828 2 is_stmt 1 view .LVU8594
 32059              	.LVL2476:
4829:src/xeq.c     **** 		if (is_intmode()) {
 32060              		.loc 1 4829 2 view .LVU8595
4829:src/xeq.c     **** 		if (is_intmode()) {
 32061              		.loc 1 4829 5 is_stmt 0 view .LVU8596
 32062 04b0 3FF6DAAE 		bhi	.L2268
4830:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 32063              		.loc 1 4830 3 is_stmt 1 view .LVU8597
4830:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 32064              		.loc 1 4830 7 is_stmt 0 view .LVU8598
 32065 04b4 3B68     		ldr	r3, [r7]
 32066 04b6 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4830:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 32067              		.loc 1 4830 6 view .LVU8599
 32068 04ba DB07     		lsls	r3, r3, #31
 32069 04bc 40F1D583 		bpl	.L2348
4831:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 32070              		.loc 1 4831 4 is_stmt 1 view .LVU8600
4831:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 32071              		.loc 1 4831 10 is_stmt 0 view .LVU8601
 32072 04c0 1D4B     		ldr	r3, .L2588+12
 32073 04c2 02EB8202 		add	r2, r2, r2, lsl #2
 32074              	.LVL2477:
4831:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 32075              		.loc 1 4831 10 view .LVU8602
 32076 04c6 03EB8202 		add	r2, r3, r2, lsl #2
 32077 04ca D2F80490 		ldr	r9, [r2, #4]
4831:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 32078              		.loc 1 4831 7 view .LVU8603
 32079 04ce B9F1000F 		cmp	r9, #0
 32080 04d2 00F06C83 		beq	.L2351
 32081              	.LBB4515:
4832:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32082              		.loc 1 4832 5 is_stmt 1 view .LVU8604
 32083              	.LVL2478:
4833:src/xeq.c     **** 					return;
 32084              		.loc 1 4833 5 view .LVU8605
4833:src/xeq.c     **** 					return;
 32085              		.loc 1 4833 9 is_stmt 0 view .LVU8606
 32086 04d6 4846     		mov	r0, r9
 32087 04d8 FFF7FEFF 		bl	dispatch_xrom
 32088              	.LVL2479:
4833:src/xeq.c     **** 					return;
 32089              		.loc 1 4833 8 view .LVU8607
 32090 04dc 0028     		cmp	r0, #0
 32091 04de 40F03D81 		bne	.L2239
ARM GAS  /tmp/cccVhVyH.s 			page 813


 32092              	.LBB4516:
4836:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 32093              		.loc 1 4836 6 is_stmt 1 view .LVU8608
 32094              	.LBB4517:
 32095              	.LBI4517:
1445:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 32096              		.loc 1 1445 15 view .LVU8609
 32097              	.LBB4518:
1446:src/xeq.c     **** }
 32098              		.loc 1 1446 2 view .LVU8610
1446:src/xeq.c     **** }
 32099              		.loc 1 1446 9 is_stmt 0 view .LVU8611
 32100 04e2 6420     		movs	r0, #100
 32101 04e4 FFF7FEFF 		bl	get_reg_n_int
 32102              	.LVL2480:
 32103 04e8 8246     		mov	r10, r0
 32104              	.LBE4518:
 32105              	.LBE4517:
4837:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 32106              		.loc 1 4837 24 view .LVU8612
 32107 04ea 6520     		movs	r0, #101
 32108              	.LBB4520:
 32109              	.LBB4519:
1446:src/xeq.c     **** }
 32110              		.loc 1 1446 9 view .LVU8613
 32111 04ec 8B46     		mov	fp, r1
 32112              	.LVL2481:
1446:src/xeq.c     **** }
 32113              		.loc 1 1446 9 view .LVU8614
 32114              	.LBE4519:
 32115              	.LBE4520:
4837:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 32116              		.loc 1 4837 6 is_stmt 1 view .LVU8615
4837:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 32117              		.loc 1 4837 24 is_stmt 0 view .LVU8616
 32118 04ee FFF7FEFF 		bl	get_reg_n_int
 32119              	.LVL2482:
4837:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 32120              		.loc 1 4837 24 view .LVU8617
 32121 04f2 0790     		str	r0, [sp, #28]
4838:src/xeq.c     **** 					x = fp(z, y, x);
 32122              		.loc 1 4838 24 view .LVU8618
 32123 04f4 6620     		movs	r0, #102
4837:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 32124              		.loc 1 4837 24 view .LVU8619
 32125 04f6 0691     		str	r1, [sp, #24]
 32126              	.LVL2483:
4838:src/xeq.c     **** 					x = fp(z, y, x);
 32127              		.loc 1 4838 6 is_stmt 1 view .LVU8620
4838:src/xeq.c     **** 					x = fp(z, y, x);
 32128              		.loc 1 4838 24 is_stmt 0 view .LVU8621
 32129 04f8 FFF7FEFF 		bl	get_reg_n_int
 32130              	.LVL2484:
4839:src/xeq.c     **** 					setlastX();
 32131              		.loc 1 4839 6 is_stmt 1 view .LVU8622
4839:src/xeq.c     **** 					setlastX();
 32132              		.loc 1 4839 10 is_stmt 0 view .LVU8623
ARM GAS  /tmp/cccVhVyH.s 			page 814


 32133 04fc CDE900AB 		strd	r10, fp, [sp]
 32134 0500 DDE90632 		ldrd	r3, r2, [sp, #24]
 32135 0504 C847     		blx	r9
 32136              	.LVL2485:
4839:src/xeq.c     **** 					setlastX();
 32137              		.loc 1 4839 10 view .LVU8624
 32138 0506 8146     		mov	r9, r0
 32139              	.LVL2486:
4839:src/xeq.c     **** 					setlastX();
 32140              		.loc 1 4839 10 view .LVU8625
 32141 0508 8A46     		mov	r10, r1
 32142              	.LVL2487:
4840:src/xeq.c     **** 					lower();
 32143              		.loc 1 4840 6 is_stmt 1 view .LVU8626
 32144              	.LBB4521:
 32145              	.LBI4521:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32146              		.loc 1 792 6 view .LVU8627
 32147              	.LBB4522:
 793:src/xeq.c     **** }
 32148              		.loc 1 793 2 view .LVU8628
 32149 050a 6C20     		movs	r0, #108
 32150              	.LVL2488:
 793:src/xeq.c     **** }
 32151              		.loc 1 793 2 is_stmt 0 view .LVU8629
 32152 050c 6421     		movs	r1, #100
 32153              	.LVL2489:
 793:src/xeq.c     **** }
 32154              		.loc 1 793 2 view .LVU8630
 32155 050e DFF82CB0 		ldr	fp, .L2588+16
 32156 0512 FFF7FEFF 		bl	copyreg_n
 32157              	.LVL2490:
 32158              	.LBE4522:
 32159              	.LBE4521:
4841:src/xeq.c     **** 					lower();
 32160              		.loc 1 4841 6 is_stmt 1 view .LVU8631
 32161 0516 FFF7FEFF 		bl	lower
 32162              	.LVL2491:
 32163              	.L2534:
4842:src/xeq.c     **** 					setX_int(x);
 32164              		.loc 1 4842 6 view .LVU8632
 32165 051a FFF7FEFF 		bl	lower
 32166              	.LVL2492:
4843:src/xeq.c     **** 				}
 32167              		.loc 1 4843 6 view .LVU8633
 32168 051e 4846     		mov	r0, r9
 32169 0520 5146     		mov	r1, r10
 32170 0522 FFF7FEFF 		bl	setX_int
 32171              	.LVL2493:
 32172 0526 DBF80030 		ldr	r3, [fp]
 32173              	.LBE4516:
 32174              	.LBE4515:
 32175 052a 54E6     		b	.L2242
 32176              	.L2589:
 32177              		.align	2
 32178              	.L2588:
 32179 052c 00000000 		.word	StackBase
ARM GAS  /tmp/cccVhVyH.s 			page 815


 32180 0530 00000000 		.word	XromRunning
 32181 0534 00000000 		.word	dyfuncs
 32182 0538 00000000 		.word	trifuncs
 32183 053c 00000000 		.word	Error
 32184 0540 00000000 		.word	Running
 32185 0544 00000000 		.word	XromParams
 32186 0548 01400800 		.word	540673
 32187 054c 00000000 		.word	RetStk
 32188              	.L2271:
 32189              	.LBE4539:
 32190              	.LBE4546:
5384:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
 32191              		.loc 1 5384 19 view .LVU8634
 32192              	.LVL2494:
 32193              	.LBB4547:
 32194              	.LBI4547:
4715:src/xeq.c     **** 	decNumber x, y, rx, ry;
 32195              		.loc 1 4715 13 view .LVU8635
 32196              	.LBB4548:
4716:src/xeq.c     **** 	unsigned int f;
 32197              		.loc 1 4716 2 view .LVU8636
4717:src/xeq.c     **** 
 32198              		.loc 1 4717 2 view .LVU8637
4719:src/xeq.c     **** 
 32199              		.loc 1 4719 2 view .LVU8638
 32200              	.LBB4549:
 32201              	.LBI4549:
1335:src/xeq.c     **** 	process_cmdline();
 32202              		.loc 1 1335 6 view .LVU8639
 32203              	.LBE4549:
 32204              	.LBE4548:
 32205              	.LBE4547:
1336:src/xeq.c     **** 	set_lift();
 32206              		.loc 1 1336 2 view .LVU8640
 32207              	.LBB4580:
 32208              	.LBB4575:
 32209              	.LBB4560:
 32210              	.LBB4550:
 32211              	.LBI4550:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 32212              		.loc 1 1229 6 view .LVU8641
 32213              	.LBB4551:
1230:src/xeq.c     **** 
 32214              		.loc 1 1230 2 view .LVU8642
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32215              		.loc 1 1232 2 view .LVU8643
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32216              		.loc 1 1232 5 is_stmt 0 view .LVU8644
 32217 0550 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32218 0552 002B     		cmp	r3, #0
 32219 0554 40F02882 		bne	.L2566
 32220              	.L2354:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32221              		.loc 1 1232 5 view .LVU8645
 32222              	.LBE4551:
 32223              	.LBE4550:
 32224              	.LBE4560:
ARM GAS  /tmp/cccVhVyH.s 			page 816


 32225              	.LBE4575:
 32226              	.LBE4580:
1337:src/xeq.c     **** }
 32227              		.loc 1 1337 2 is_stmt 1 view .LVU8646
 32228              	.LBB4581:
 32229              	.LBB4576:
 32230              	.LBB4561:
 32231              	.LBB4553:
 32232              	.LBI4553:
 767:src/xeq.c     ****     State2.state_lift = 1;
 32233              		.loc 1 767 6 view .LVU8647
 32234              	.LBB4554:
 768:src/xeq.c     **** }
 32235              		.loc 1 768 5 view .LVU8648
 768:src/xeq.c     **** }
 32236              		.loc 1 768 23 is_stmt 0 view .LVU8649
 32237 0558 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 32238              	.LBE4554:
 32239              	.LBE4553:
 32240              	.LBE4561:
4721:src/xeq.c     **** 
 32241              		.loc 1 4721 4 view .LVU8650
 32242 055a EBB2     		uxtb	r3, r5
 32243              	.LBB4562:
 32244              	.LBB4557:
 32245              	.LBB4555:
 768:src/xeq.c     **** }
 32246              		.loc 1 768 23 view .LVU8651
 32247 055c 42F04002 		orr	r2, r2, #64
 32248              	.LBE4555:
 32249              	.LBE4557:
 32250              	.LBE4562:
4723:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 32251              		.loc 1 4723 5 view .LVU8652
 32252 0560 9B2B     		cmp	r3, #155
 32253              	.LBB4563:
 32254              	.LBB4558:
 32255              	.LBB4556:
 768:src/xeq.c     **** }
 32256              		.loc 1 768 23 view .LVU8653
 32257 0562 E275     		strb	r2, [r4, #23]
 32258              	.LBE4556:
 32259              	.LBE4558:
 32260              	.LBE4563:
4721:src/xeq.c     **** 
 32261              		.loc 1 4721 2 is_stmt 1 view .LVU8654
 32262              	.LVL2495:
4723:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 32263              		.loc 1 4723 2 view .LVU8655
4723:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 32264              		.loc 1 4723 5 is_stmt 0 view .LVU8656
 32265 0564 00F2AF80 		bhi	.L2360
4724:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 32266              		.loc 1 4724 3 is_stmt 1 view .LVU8657
4724:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 32267              		.loc 1 4724 9 is_stmt 0 view .LVU8658
 32268 0568 C24A     		ldr	r2, .L2590
ARM GAS  /tmp/cccVhVyH.s 			page 817


 32269 056a 03EB4303 		add	r3, r3, r3, lsl #1
 32270              	.LVL2496:
4724:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 32271              		.loc 1 4724 9 view .LVU8659
 32272 056e 02EBC303 		add	r3, r2, r3, lsl #3
 32273 0572 D3F80490 		ldr	r9, [r3, #4]
4724:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 32274              		.loc 1 4724 6 view .LVU8660
 32275 0576 B9F1000F 		cmp	r9, #0
 32276 057a 00F02683 		beq	.L2361
 32277              	.LBB4564:
4725:src/xeq.c     **** 			if (dispatch_xrom(fp))
 32278              		.loc 1 4725 4 is_stmt 1 view .LVU8661
 32279              	.LVL2497:
4726:src/xeq.c     **** 				return;
 32280              		.loc 1 4726 4 view .LVU8662
4726:src/xeq.c     **** 				return;
 32281              		.loc 1 4726 8 is_stmt 0 view .LVU8663
 32282 057e 4846     		mov	r0, r9
 32283 0580 FFF7FEFF 		bl	dispatch_xrom
 32284              	.LVL2498:
4726:src/xeq.c     **** 				return;
 32285              		.loc 1 4726 7 view .LVU8664
 32286 0584 0028     		cmp	r0, #0
 32287 0586 40F0E980 		bne	.L2239
4729:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
 32288              		.loc 1 4729 5 is_stmt 1 view .LVU8665
 32289              	.LVL2499:
 32290              	.LBB4565:
 32291              	.LBI4565:
 854:src/xeq.c     **** 	getX(x);
 32292              		.loc 1 854 6 view .LVU8666
 32293              	.LBE4565:
 32294              	.LBE4564:
 32295              	.LBE4576:
 32296              	.LBE4581:
 855:src/xeq.c     **** 	getY(y);
 32297              		.loc 1 855 2 view .LVU8667
 32298              	.LBB4582:
 32299              	.LBB4577:
 32300              	.LBB4572:
 32301              	.LBB4570:
 32302              	.LBB4566:
 32303              	.LBI4566:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 32304              		.loc 1 824 12 view .LVU8668
 32305              	.LBB4567:
 825:src/xeq.c     **** }
 32306              		.loc 1 825 2 view .LVU8669
 825:src/xeq.c     **** }
 32307              		.loc 1 825 9 is_stmt 0 view .LVU8670
 32308 058a 6421     		movs	r1, #100
 32309 058c 20A8     		add	r0, sp, #128
 32310              	.LVL2500:
 825:src/xeq.c     **** }
 32311              		.loc 1 825 9 view .LVU8671
 32312 058e FFF7FEFF 		bl	getRegister
ARM GAS  /tmp/cccVhVyH.s 			page 818


 32313              	.LVL2501:
 825:src/xeq.c     **** }
 32314              		.loc 1 825 9 view .LVU8672
 32315              	.LBE4567:
 32316              	.LBE4566:
 32317              	.LBE4570:
 32318              	.LBE4572:
 32319              	.LBE4577:
 32320              	.LBE4582:
 856:src/xeq.c     **** }
 32321              		.loc 1 856 2 is_stmt 1 view .LVU8673
 32322              	.LBB4583:
 32323              	.LBB4578:
 32324              	.LBB4573:
 32325              	.LBB4571:
 32326              	.LBB4568:
 32327              	.LBI4568:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 32328              		.loc 1 832 6 view .LVU8674
 32329              	.LBB4569:
 833:src/xeq.c     **** }
 32330              		.loc 1 833 2 view .LVU8675
 32331 0592 6521     		movs	r1, #101
 32332 0594 29A8     		add	r0, sp, #164
 32333              	.LVL2502:
 833:src/xeq.c     **** }
 32334              		.loc 1 833 2 is_stmt 0 view .LVU8676
 32335 0596 FFF7FEFF 		bl	getRegister
 32336              	.LVL2503:
 833:src/xeq.c     **** }
 32337              		.loc 1 833 2 view .LVU8677
 32338              	.LBE4569:
 32339              	.LBE4568:
 32340              	.LBE4571:
4730:src/xeq.c     **** 				setlastXY();
 32341              		.loc 1 4730 5 is_stmt 1 view .LVU8678
 32342 059a 29AB     		add	r3, sp, #164
 32343 059c 20AA     		add	r2, sp, #128
 32344 059e 32A8     		add	r0, sp, #200
 32345 05a0 5146     		mov	r1, r10
 32346 05a2 C847     		blx	r9
 32347              	.LVL2504:
4731:src/xeq.c     **** 				setXY(&rx, &ry);
 32348              		.loc 1 4731 5 view .LVU8679
 32349 05a4 FFF7FEFF 		bl	setlastXY
 32350              	.LVL2505:
4732:src/xeq.c     **** 				set_was_complex();
 32351              		.loc 1 4732 5 view .LVU8680
 32352              	.L2532:
4732:src/xeq.c     **** 				set_was_complex();
 32353              		.loc 1 4732 5 is_stmt 0 view .LVU8681
 32354              	.LBE4573:
 32355              	.LBE4578:
 32356              	.LBE4583:
 32357              	.LBB4584:
 32358              	.LBB4490:
 32359              	.LBB4476:
ARM GAS  /tmp/cccVhVyH.s 			page 819


4811:src/xeq.c     **** 				set_was_complex();
 32360              		.loc 1 4811 5 is_stmt 1 view .LVU8682
 32361 05a8 5146     		mov	r1, r10
 32362 05aa 32A8     		add	r0, sp, #200
 32363 05ac FFF7FEFF 		bl	setXY
 32364              	.LVL2506:
4812:src/xeq.c     **** 			}
 32365              		.loc 1 4812 5 view .LVU8683
 32366              	.LBB4474:
 32367              	.LBI4474:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 32368              		.loc 1 539 13 view .LVU8684
 32369              	.LBB4475:
 540:src/xeq.c     **** }
 32370              		.loc 1 540 2 view .LVU8685
 540:src/xeq.c     **** }
 32371              		.loc 1 540 20 is_stmt 0 view .LVU8686
 32372 05b0 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 32373 05b2 DFF8DCB2 		ldr	fp, .L2590+28
 32374 05b6 0122     		movs	r2, #1
 32375 05b8 62F38713 		bfi	r3, r2, #6, #2
 32376 05bc 2375     		strb	r3, [r4, #20]
 32377 05be DBF80030 		ldr	r3, [fp]
 541:src/xeq.c     **** 
 32378              		.loc 1 541 1 view .LVU8687
 32379 05c2 08E6     		b	.L2242
 32380              	.L2274:
 32381              	.LBE4475:
 32382              	.LBE4474:
 32383              	.LBE4476:
 32384              	.LBE4490:
 32385              	.LBE4584:
5381:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
 32386              		.loc 1 5381 18 is_stmt 1 view .LVU8688
 32387              	.LVL2507:
 32388              	.LBB4585:
 32389              	.LBI4585:
4675:src/xeq.c     **** {
 32390              		.loc 1 4675 13 view .LVU8689
 32391              	.LBB4586:
4677:src/xeq.c     **** 	process_cmdline_set_lift();
 32392              		.loc 1 4677 2 view .LVU8690
4678:src/xeq.c     **** 
 32393              		.loc 1 4678 2 view .LVU8691
 32394              	.LBB4587:
 32395              	.LBI4587:
1335:src/xeq.c     **** 	process_cmdline();
 32396              		.loc 1 1335 6 view .LVU8692
 32397              	.LBE4587:
 32398              	.LBE4586:
 32399              	.LBE4585:
1336:src/xeq.c     **** 	set_lift();
 32400              		.loc 1 1336 2 view .LVU8693
 32401              	.LBB4624:
 32402              	.LBB4619:
 32403              	.LBB4598:
 32404              	.LBB4588:
ARM GAS  /tmp/cccVhVyH.s 			page 820


 32405              	.LBI4588:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 32406              		.loc 1 1229 6 view .LVU8694
 32407              	.LBB4589:
1230:src/xeq.c     **** 
 32408              		.loc 1 1230 2 view .LVU8695
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32409              		.loc 1 1232 2 view .LVU8696
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32410              		.loc 1 1232 5 is_stmt 0 view .LVU8697
 32411 05c4 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32412 05c6 002B     		cmp	r3, #0
 32413 05c8 40F0EB81 		bne	.L2567
 32414              	.L2330:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32415              		.loc 1 1232 5 view .LVU8698
 32416              	.LBE4589:
 32417              	.LBE4588:
 32418              	.LBE4598:
 32419              	.LBE4619:
 32420              	.LBE4624:
1337:src/xeq.c     **** }
 32421              		.loc 1 1337 2 is_stmt 1 view .LVU8699
 32422              	.LBB4625:
 32423              	.LBB4620:
 32424              	.LBB4599:
 32425              	.LBB4591:
 32426              	.LBI4591:
 767:src/xeq.c     ****     State2.state_lift = 1;
 32427              		.loc 1 767 6 view .LVU8700
 32428              	.LBB4592:
 768:src/xeq.c     **** }
 32429              		.loc 1 768 5 view .LVU8701
 768:src/xeq.c     **** }
 32430              		.loc 1 768 23 is_stmt 0 view .LVU8702
 32431 05cc E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32432              	.LBE4592:
 32433              	.LBE4591:
 32434              	.LBE4599:
4680:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 32435              		.loc 1 4680 4 view .LVU8703
 32436 05ce EAB2     		uxtb	r2, r5
 32437              	.LBB4600:
 32438              	.LBB4595:
 32439              	.LBB4593:
 768:src/xeq.c     **** }
 32440              		.loc 1 768 23 view .LVU8704
 32441 05d0 43F04003 		orr	r3, r3, #64
 32442              	.LBE4593:
 32443              	.LBE4595:
 32444              	.LBE4600:
4681:src/xeq.c     **** 		if (is_intmode()) {
 32445              		.loc 1 4681 5 view .LVU8705
 32446 05d4 9B2A     		cmp	r2, #155
 32447              	.LBB4601:
 32448              	.LBB4596:
 32449              	.LBB4594:
ARM GAS  /tmp/cccVhVyH.s 			page 821


 768:src/xeq.c     **** }
 32450              		.loc 1 768 23 view .LVU8706
 32451 05d6 E375     		strb	r3, [r4, #23]
 32452              	.LBE4594:
 32453              	.LBE4596:
 32454              	.LBE4601:
4680:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 32455              		.loc 1 4680 2 is_stmt 1 view .LVU8707
 32456              	.LVL2508:
4681:src/xeq.c     **** 		if (is_intmode()) {
 32457              		.loc 1 4681 2 view .LVU8708
4681:src/xeq.c     **** 		if (is_intmode()) {
 32458              		.loc 1 4681 5 is_stmt 0 view .LVU8709
 32459 05d8 3FF646AE 		bhi	.L2268
4682:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 32460              		.loc 1 4682 3 is_stmt 1 view .LVU8710
4682:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 32461              		.loc 1 4682 7 is_stmt 0 view .LVU8711
 32462 05dc 3B68     		ldr	r3, [r7]
 32463 05de 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4682:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 32464              		.loc 1 4682 6 view .LVU8712
 32465 05e2 D807     		lsls	r0, r3, #31
 32466 05e4 40F17983 		bpl	.L2332
4683:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 32467              		.loc 1 4683 4 is_stmt 1 view .LVU8713
4683:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 32468              		.loc 1 4683 10 is_stmt 0 view .LVU8714
 32469 05e8 A24B     		ldr	r3, .L2590
 32470 05ea 02EB4202 		add	r2, r2, r2, lsl #1
 32471              	.LVL2509:
4683:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 32472              		.loc 1 4683 10 view .LVU8715
 32473 05ee 03EBC202 		add	r2, r3, r2, lsl #3
 32474 05f2 D2F80890 		ldr	r9, [r2, #8]
4683:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 32475              		.loc 1 4683 7 view .LVU8716
 32476 05f6 B9F1000F 		cmp	r9, #0
 32477 05fa 00F0D882 		beq	.L2351
 32478              	.LBB4602:
4684:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32479              		.loc 1 4684 5 is_stmt 1 view .LVU8717
 32480              	.LVL2510:
4685:src/xeq.c     **** 					return;
 32481              		.loc 1 4685 5 view .LVU8718
4685:src/xeq.c     **** 					return;
 32482              		.loc 1 4685 9 is_stmt 0 view .LVU8719
 32483 05fe 4846     		mov	r0, r9
 32484 0600 FFF7FEFF 		bl	dispatch_xrom
 32485              	.LVL2511:
4685:src/xeq.c     **** 					return;
 32486              		.loc 1 4685 8 view .LVU8720
 32487 0604 0028     		cmp	r0, #0
 32488 0606 40F0A980 		bne	.L2239
 32489              	.LBB4603:
4688:src/xeq.c     **** 					x = fp(x);
 32490              		.loc 1 4688 6 is_stmt 1 view .LVU8721
ARM GAS  /tmp/cccVhVyH.s 			page 822


 32491              	.LBB4604:
 32492              	.LBI4604:
1445:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 32493              		.loc 1 1445 15 view .LVU8722
 32494              	.LBB4605:
1446:src/xeq.c     **** }
 32495              		.loc 1 1446 2 view .LVU8723
1446:src/xeq.c     **** }
 32496              		.loc 1 1446 9 is_stmt 0 view .LVU8724
 32497 060a 6420     		movs	r0, #100
 32498 060c FFF7FEFF 		bl	get_reg_n_int
 32499              	.LVL2512:
1446:src/xeq.c     **** }
 32500              		.loc 1 1446 9 view .LVU8725
 32501              	.LBE4605:
 32502              	.LBE4604:
4689:src/xeq.c     **** 					setlastX();
 32503              		.loc 1 4689 6 is_stmt 1 view .LVU8726
4689:src/xeq.c     **** 					setlastX();
 32504              		.loc 1 4689 10 is_stmt 0 view .LVU8727
 32505 0610 C847     		blx	r9
 32506              	.LVL2513:
4689:src/xeq.c     **** 					setlastX();
 32507              		.loc 1 4689 10 view .LVU8728
 32508 0612 DFF87CB2 		ldr	fp, .L2590+28
 32509 0616 8246     		mov	r10, r0
 32510 0618 8946     		mov	r9, r1
 32511              	.LVL2514:
4690:src/xeq.c     **** 					setX_int(x);
 32512              		.loc 1 4690 6 is_stmt 1 view .LVU8729
 32513              	.LBB4606:
 32514              	.LBI4606:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32515              		.loc 1 792 6 view .LVU8730
 32516              	.LBB4607:
 793:src/xeq.c     **** }
 32517              		.loc 1 793 2 view .LVU8731
 32518 061a 6C20     		movs	r0, #108
 32519              	.LVL2515:
 793:src/xeq.c     **** }
 32520              		.loc 1 793 2 is_stmt 0 view .LVU8732
 32521 061c 6421     		movs	r1, #100
 32522              	.LVL2516:
 793:src/xeq.c     **** }
 32523              		.loc 1 793 2 view .LVU8733
 32524 061e FFF7FEFF 		bl	copyreg_n
 32525              	.LVL2517:
 32526              	.LBE4607:
 32527              	.LBE4606:
4691:src/xeq.c     **** 				}
 32528              		.loc 1 4691 6 is_stmt 1 view .LVU8734
 32529 0622 5046     		mov	r0, r10
 32530 0624 4946     		mov	r1, r9
 32531 0626 FFF7FEFF 		bl	setX_int
 32532              	.LVL2518:
 32533 062a DBF80030 		ldr	r3, [fp]
 32534              	.LBE4603:
ARM GAS  /tmp/cccVhVyH.s 			page 823


 32535              	.LBE4602:
 32536 062e D2E5     		b	.L2242
 32537              	.LVL2519:
 32538              	.L2275:
4691:src/xeq.c     **** 				}
 32539              		.loc 1 4691 6 is_stmt 0 view .LVU8735
 32540              	.LBE4620:
 32541              	.LBE4625:
5380:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
 32542              		.loc 1 5380 18 is_stmt 1 view .LVU8736
 32543              	.LBB4626:
 32544              	.LBI4626:
4634:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
 32545              		.loc 1 4634 13 view .LVU8737
 32546              	.LBB4627:
4635:src/xeq.c     **** 
 32547              		.loc 1 4635 2 view .LVU8738
 32548              	.LBB4628:
 32549              	.LBB4629:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32550              		.loc 1 1232 5 is_stmt 0 view .LVU8739
 32551 0630 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32552              	.LBE4629:
 32553              	.LBE4628:
4635:src/xeq.c     **** 
 32554              		.loc 1 4635 21 view .LVU8740
 32555 0632 5FFA85F9 		uxtb	r9, r5
 32556              	.LVL2520:
4637:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
 32557              		.loc 1 4637 2 is_stmt 1 view .LVU8741
 32558              	.LBB4632:
 32559              	.LBI4628:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 32560              		.loc 1 1229 6 view .LVU8742
 32561              	.LBB4630:
1230:src/xeq.c     **** 
 32562              		.loc 1 1230 2 view .LVU8743
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32563              		.loc 1 1232 2 view .LVU8744
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32564              		.loc 1 1232 5 is_stmt 0 view .LVU8745
 32565 0636 002B     		cmp	r3, #0
 32566 0638 40F0B081 		bne	.L2568
 32567              	.L2316:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32568              		.loc 1 1232 5 view .LVU8746
 32569              	.LBE4630:
 32570              	.LBE4632:
4638:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 32571              		.loc 1 4638 2 is_stmt 1 view .LVU8747
4638:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 32572              		.loc 1 4638 5 is_stmt 0 view .LVU8748
 32573 063c B9F1DA0F 		cmp	r9, #218
 32574 0640 00F22E81 		bhi	.L2317
4639:src/xeq.c     **** 			bad_mode_error();
 32575              		.loc 1 4639 3 is_stmt 1 view .LVU8749
4639:src/xeq.c     **** 			bad_mode_error();
ARM GAS  /tmp/cccVhVyH.s 			page 824


 32576              		.loc 1 4639 7 is_stmt 0 view .LVU8750
 32577 0644 3B68     		ldr	r3, [r7]
 32578 0646 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
4639:src/xeq.c     **** 			bad_mode_error();
 32579              		.loc 1 4639 6 view .LVU8751
 32580 064a 12F0010F 		tst	r2, #1
4639:src/xeq.c     **** 			bad_mode_error();
 32581              		.loc 1 4639 23 view .LVU8752
 32582 064e 8A4A     		ldr	r2, .L2590+4
4639:src/xeq.c     **** 			bad_mode_error();
 32583              		.loc 1 4639 6 view .LVU8753
 32584 0650 40F02F83 		bne	.L2519
 32585 0654 4FEA091A 		lsl	r10, r9, #4
 32586              	.L2318:
4641:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 32587              		.loc 1 4641 8 is_stmt 1 view .LVU8754
4641:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 32588              		.loc 1 4641 14 is_stmt 0 view .LVU8755
 32589 0658 52F80AB0 		ldr	fp, [r2, r10]
 32590 065c 9244     		add	r10, r10, r2
4641:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 32591              		.loc 1 4641 11 view .LVU8756
 32592 065e BBF1000F 		cmp	fp, #0
 32593 0662 00F06183 		beq	.L2569
 32594              	.LBB4633:
4642:src/xeq.c     **** 			if (dispatch_xrom(fp))
 32595              		.loc 1 4642 4 is_stmt 1 view .LVU8757
 32596              	.LVL2521:
4643:src/xeq.c     **** 				return;
 32597              		.loc 1 4643 4 view .LVU8758
4643:src/xeq.c     **** 				return;
 32598              		.loc 1 4643 8 is_stmt 0 view .LVU8759
 32599 0666 5846     		mov	r0, fp
 32600 0668 FFF7FEFF 		bl	dispatch_xrom
 32601              	.LVL2522:
4643:src/xeq.c     **** 				return;
 32602              		.loc 1 4643 7 view .LVU8760
 32603 066c 0028     		cmp	r0, #0
 32604 066e 75D1     		bne	.L2239
4646:src/xeq.c     **** 				case 2:	lift_if_enabled();
 32605              		.loc 1 4646 5 is_stmt 1 view .LVU8761
 32606 0670 9AF80430 		ldrb	r3, [r10, #4]	@ zero_extendqisi2
 32607 0674 03F00303 		and	r3, r3, #3
 32608 0678 012B     		cmp	r3, #1
 32609 067a 00F07183 		beq	.L2321
 32610 067e 022B     		cmp	r3, #2
 32611 0680 03D1     		bne	.L2322
4647:src/xeq.c     **** 				case 1:	lift_if_enabled();
 32612              		.loc 1 4647 13 view .LVU8762
 32613              	.LBB4634:
 32614              	.LBI4634:
 747:src/xeq.c     **** 	if (get_lift())
 32615              		.loc 1 747 6 view .LVU8763
 32616              	.LBB4635:
 748:src/xeq.c     **** 		lift();
 32617              		.loc 1 748 2 view .LVU8764
 32618              	.LBB4636:
ARM GAS  /tmp/cccVhVyH.s 			page 825


 32619              	.LBI4636:
 743:src/xeq.c     **** 	return State2.state_lift;
 32620              		.loc 1 743 12 view .LVU8765
 32621              	.LBB4637:
 744:src/xeq.c     **** }
 32622              		.loc 1 744 2 view .LVU8766
 744:src/xeq.c     **** }
 32623              		.loc 1 744 15 is_stmt 0 view .LVU8767
 32624 0682 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32625              	.LBE4637:
 32626              	.LBE4636:
 748:src/xeq.c     **** 		lift();
 32627              		.loc 1 748 5 view .LVU8768
 32628 0684 5806     		lsls	r0, r3, #25
 32629 0686 00F16983 		bmi	.L2570
 32630              	.L2322:
 32631              	.LBE4635:
 32632              	.LBE4634:
4650:src/xeq.c     **** 					break;
 32633              		.loc 1 4650 6 is_stmt 1 view .LVU8769
 32634 068a 4846     		mov	r0, r9
 32635 068c D847     		blx	fp
 32636              	.LVL2523:
4651:src/xeq.c     **** 				}
 32637              		.loc 1 4651 6 view .LVU8770
 32638 068e DFF800B2 		ldr	fp, .L2590+28
 32639              	.LVL2524:
4651:src/xeq.c     **** 				}
 32640              		.loc 1 4651 6 is_stmt 0 view .LVU8771
 32641 0692 3B68     		ldr	r3, [r7]
 32642              	.LVL2525:
 32643              	.L2319:
4651:src/xeq.c     **** 				}
 32644              		.loc 1 4651 6 view .LVU8772
 32645              	.LBE4633:
4656:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32646              		.loc 1 4656 3 is_stmt 1 view .LVU8773
4658:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 32647              		.loc 1 4658 2 view .LVU8774
4658:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 32648              		.loc 1 4658 5 is_stmt 0 view .LVU8775
 32649 0694 93F9DD27 		ldrsb	r2, [r3, #2013]
 32650 0698 002A     		cmp	r2, #0
 32651 069a C0F24883 		blt	.L2571
4661:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 32652              		.loc 1 4661 7 is_stmt 1 view .LVU8776
4661:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 32653              		.loc 1 4661 10 is_stmt 0 view .LVU8777
 32654 069e B9F13F0F 		cmp	r9, #63
 32655 06a2 5DD0     		beq	.L2531
4661:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 32656              		.loc 1 4661 29 view .LVU8778
 32657 06a4 B9F10B0F 		cmp	r9, #11
 32658 06a8 5AD0     		beq	.L2531
 32659 06aa 06E1     		b	.L2379
 32660              	.LVL2526:
 32661              	.L2559:
ARM GAS  /tmp/cccVhVyH.s 			page 826


4661:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 32662              		.loc 1 4661 29 view .LVU8779
 32663              	.LBE4627:
 32664              	.LBE4626:
 32665              	.LBB4664:
 32666              	.LBB4287:
5297:src/xeq.c     **** 		return;
 32667              		.loc 1 5297 3 is_stmt 1 view .LVU8780
5297:src/xeq.c     **** 		return;
 32668              		.loc 1 5297 3 view .LVU8781
 32669              	.LBB4281:
 32670              	.LBI4276:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32671              		.loc 1 546 5 view .LVU8782
 32672              	.LBB4280:
 547:src/xeq.c     **** 		Error = e;
 32673              		.loc 1 547 2 view .LVU8783
 547:src/xeq.c     **** 		Error = e;
 32674              		.loc 1 547 12 is_stmt 0 view .LVU8784
 32675 06ac DFF8E0B1 		ldr	fp, .L2590+28
 32676 06b0 DFF8E091 		ldr	r9, .L2590+32
 32677              	.LVL2527:
 547:src/xeq.c     **** 		Error = e;
 32678              		.loc 1 547 12 view .LVU8785
 32679 06b4 DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 32680              		.loc 1 547 5 view .LVU8786
 32681 06b8 0028     		cmp	r0, #0
 32682 06ba 7FF4E1AD 		bne	.L2378
 32683 06be DCE5     		b	.L2247
 32684              	.LVL2528:
 32685              	.L2558:
 547:src/xeq.c     **** 		Error = e;
 32686              		.loc 1 547 5 view .LVU8787
 32687              	.LBE4280:
 32688              	.LBE4281:
 32689              	.LBB4282:
 32690              	.LBB4264:
 32691              	.LBB4258:
 32692 06c0 FFF7FEFF 		bl	process_cmdline.part.0
 32693              	.LVL2529:
 32694 06c4 5FE5     		b	.L2235
 32695              	.LVL2530:
 32696              	.L2360:
 547:src/xeq.c     **** 		Error = e;
 32697              		.loc 1 547 5 view .LVU8788
 32698              	.LBE4258:
 32699              	.LBE4264:
 32700              	.LBE4282:
 32701              	.LBE4287:
 32702              	.LBE4664:
 32703              	.LBB4665:
 32704              	.LBB4491:
4817:src/xeq.c     **** }
 32705              		.loc 1 4817 3 is_stmt 1 view .LVU8789
4817:src/xeq.c     **** }
 32706              		.loc 1 4817 3 view .LVU8790
ARM GAS  /tmp/cccVhVyH.s 			page 827


 32707              	.LBB4477:
 32708              	.LBI4477:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32709              		.loc 1 546 5 view .LVU8791
 32710              	.LBB4478:
 547:src/xeq.c     **** 		Error = e;
 32711              		.loc 1 547 2 view .LVU8792
 547:src/xeq.c     **** 		Error = e;
 32712              		.loc 1 547 12 is_stmt 0 view .LVU8793
 32713 06c6 DFF8C8B1 		ldr	fp, .L2590+28
 32714 06ca DBF80030 		ldr	r3, [fp]
 547:src/xeq.c     **** 		Error = e;
 32715              		.loc 1 547 5 view .LVU8794
 32716 06ce 002B     		cmp	r3, #0
 32717 06d0 7FF44CAD 		bne	.L2253
 32718              	.LVL2531:
 32719              	.LBB4479:
 32720              	.LBI4479:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32721              		.loc 1 546 5 is_stmt 1 view .LVU8795
 32722              	.LBB4480:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32723              		.loc 1 548 3 view .LVU8796
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32724              		.loc 1 548 9 is_stmt 0 view .LVU8797
 32725 06d4 0323     		movs	r3, #3
 32726 06d6 CBF80030 		str	r3, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32727              		.loc 1 549 3 is_stmt 1 view .LVU8798
 32728              	.LVL2532:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32729              		.loc 1 549 3 is_stmt 0 view .LVU8799
 32730              	.LBE4480:
 32731              	.LBE4479:
 32732              	.LBE4478:
 32733              	.LBE4477:
4817:src/xeq.c     **** }
 32734              		.loc 1 4817 3 is_stmt 1 view .LVU8800
 32735              	.LBE4491:
 32736              	.LBE4665:
5386:src/xeq.c     **** 		}
 32737              		.loc 1 5386 12 view .LVU8801
5396:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 32738              		.loc 1 5396 2 view .LVU8802
 32739 06da 47E5     		b	.L2253
 32740              	.LVL2533:
 32741              	.L2251:
 32742              	.LBB4666:
 32743              	.LBB4248:
 32744              	.LBB4226:
5224:src/xeq.c     **** 			if ((regval >> 32) != 0)
 32745              		.loc 1 5224 4 view .LVU8803
5224:src/xeq.c     **** 			if ((regval >> 32) != 0)
 32746              		.loc 1 5224 13 is_stmt 0 view .LVU8804
 32747 06dc 1046     		mov	r0, r2
 32748 06de 5146     		mov	r1, r10
 32749 06e0 0B93     		str	r3, [sp, #44]
ARM GAS  /tmp/cccVhVyH.s 			page 828


 32750 06e2 FFF7FEFF 		bl	get_reg_n_int_sgn
 32751              	.LVL2534:
5225:src/xeq.c     **** 				goto range;
 32752              		.loc 1 5225 16 view .LVU8805
 32753 06e6 0023     		movs	r3, #0
 32754 06e8 0891     		str	r1, [sp, #32]
 32755 06ea 0993     		str	r3, [sp, #36]
 32756              	.LVL2535:
5225:src/xeq.c     **** 				goto range;
 32757              		.loc 1 5225 4 is_stmt 1 view .LVU8806
5225:src/xeq.c     **** 				goto range;
 32758              		.loc 1 5225 7 is_stmt 0 view .LVU8807
 32759 06ec DDE90823 		ldrd	r2, [sp, #32]
 32760 06f0 1343     		orrs	r3, r2, r3
 32761 06f2 19D1     		bne	.L2255
5227:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 32762              		.loc 1 5227 4 is_stmt 1 view .LVU8808
5228:src/xeq.c     **** 				// negative arguments address local registers or flags
 32763              		.loc 1 5228 7 is_stmt 0 view .LVU8809
 32764 06f4 0A9B     		ldr	r3, [sp, #40]
 32765 06f6 13F0080F 		tst	r3, #8
5227:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 32766              		.loc 1 5227 8 view .LVU8810
 32767 06fa 0246     		mov	r2, r0
 32768              	.LVL2536:
5228:src/xeq.c     **** 				// negative arguments address local registers or flags
 32769              		.loc 1 5228 4 is_stmt 1 view .LVU8811
5228:src/xeq.c     **** 				// negative arguments address local registers or flags
 32770              		.loc 1 5228 7 is_stmt 0 view .LVU8812
 32771 06fc 0B9B     		ldr	r3, [sp, #44]
 32772 06fe 02D0     		beq	.L2249
5228:src/xeq.c     **** 				// negative arguments address local registers or flags
 32773              		.loc 1 5228 27 view .LVU8813
 32774 0700 3B99     		ldr	r1, [sp, #236]
 32775              	.LVL2537:
5228:src/xeq.c     **** 				// negative arguments address local registers or flags
 32776              		.loc 1 5228 27 view .LVU8814
 32777 0702 01B1     		cbz	r1, .L2249
5230:src/xeq.c     **** 			}
 32778              		.loc 1 5230 5 is_stmt 1 view .LVU8815
5230:src/xeq.c     **** 			}
 32779              		.loc 1 5230 9 is_stmt 0 view .LVU8816
 32780 0704 7032     		adds	r2, r2, #112
 32781              	.LVL2538:
 32782              	.L2249:
5230:src/xeq.c     **** 			}
 32783              		.loc 1 5230 9 view .LVU8817
 32784              	.LBE4226:
5238:src/xeq.c     **** 		// Range checking for registers against variable boundary
 32785              		.loc 1 5238 2 is_stmt 1 view .LVU8818
5238:src/xeq.c     **** 		// Range checking for registers against variable boundary
 32786              		.loc 1 5238 18 is_stmt 0 view .LVU8819
 32787 0706 0BEB0301 		add	r1, fp, r3
 32788 070a 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
5238:src/xeq.c     **** 		// Range checking for registers against variable boundary
 32789              		.loc 1 5238 5 view .LVU8820
 32790 070c 11F0020F 		tst	r1, #2
ARM GAS  /tmp/cccVhVyH.s 			page 829


 32791 0710 00F09F80 		beq	.L2257
5240:src/xeq.c     **** 	}
 32792              		.loc 1 5240 9 view .LVU8821
 32793 0714 1146     		mov	r1, r2
 32794 0716 4846     		mov	r0, r9
 32795 0718 0A93     		str	r3, [sp, #40]
5240:src/xeq.c     **** 	}
 32796              		.loc 1 5240 3 is_stmt 1 view .LVU8822
5240:src/xeq.c     **** 	}
 32797              		.loc 1 5240 9 is_stmt 0 view .LVU8823
 32798 071a 0692     		str	r2, [sp, #24]
 32799              	.LVL2539:
5240:src/xeq.c     **** 	}
 32800              		.loc 1 5240 9 view .LVU8824
 32801 071c FFF7FEFF 		bl	get_reg_limit
 32802              	.LVL2540:
5240:src/xeq.c     **** 	}
 32803              		.loc 1 5240 9 view .LVU8825
 32804 0720 069A     		ldr	r2, [sp, #24]
 32805 0722 0A9B     		ldr	r3, [sp, #40]
 32806              	.LVL2541:
 32807              	.L2258:
5248:src/xeq.c     **** 		// Argument is too large
 32808              		.loc 1 5248 2 is_stmt 1 view .LVU8826
5248:src/xeq.c     **** 		// Argument is too large
 32809              		.loc 1 5248 5 is_stmt 0 view .LVU8827
 32810 0724 8242     		cmp	r2, r0
 32811 0726 4AD9     		bls	.L2260
 32812              	.LVL2542:
 32813              	.L2255:
5250:src/xeq.c     **** 	}
 32814              		.loc 1 5250 9 is_stmt 1 view .LVU8828
 32815              	.LBB4227:
 32816              	.LBI4227:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32817              		.loc 1 546 5 view .LVU8829
 32818              	.LBB4228:
 547:src/xeq.c     **** 		Error = e;
 32819              		.loc 1 547 2 view .LVU8830
 547:src/xeq.c     **** 		Error = e;
 32820              		.loc 1 547 12 is_stmt 0 view .LVU8831
 32821 0728 DFF864B1 		ldr	fp, .L2590+28
 32822 072c DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 32823              		.loc 1 547 5 view .LVU8832
 32824 0730 0028     		cmp	r0, #0
 32825 0732 00F0FE80 		beq	.L2261
 32826              	.LVL2543:
 32827              	.L2524:
 547:src/xeq.c     **** 		Error = e;
 32828              		.loc 1 547 5 view .LVU8833
 32829 0736 DFF85C91 		ldr	r9, .L2590+32
 32830 073a A1E5     		b	.L2378
 32831              	.LVL2544:
 32832              	.L2575:
 547:src/xeq.c     **** 		Error = e;
 32833              		.loc 1 547 5 view .LVU8834
ARM GAS  /tmp/cccVhVyH.s 			page 830


 32834              	.LBE4228:
 32835              	.LBE4227:
 32836              	.LBE4248:
 32837              	.LBE4666:
 32838              	.LBB4667:
 32839              	.LBB4358:
4042:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32840              		.loc 1 4042 7 is_stmt 1 view .LVU8835
4042:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32841              		.loc 1 4042 10 is_stmt 0 view .LVU8836
 32842 073c 002B     		cmp	r3, #0
 32843 073e 40F05183 		bne	.L2517
 32844 0742 DFF85091 		ldr	r9, .L2590+32
 32845              	.LVL2545:
4042:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32846              		.loc 1 4042 10 view .LVU8837
 32847 0746 DFF850A1 		ldr	r10, .L2590+36
 32848              	.L2307:
4047:src/xeq.c     **** 		      if ( (XromRunning || Running) ) {//JMTEST Explicitly including standard functionality if co
 32849              		.loc 1 4047 9 is_stmt 1 view .LVU8838
 32850 074a FFF7FEFF 		bl	lift
 32851              	.LVL2546:
4048:src/xeq.c     **** 			clr_lift();
 32852              		.loc 1 4048 9 view .LVU8839
4048:src/xeq.c     **** 			clr_lift();
 32853              		.loc 1 4048 27 is_stmt 0 view .LVU8840
 32854 074e DAF80020 		ldr	r2, [r10]
 32855 0752 D9F80030 		ldr	r3, [r9]
 32856 0756 1343     		orrs	r3, r2, r3
 32857 0758 40F0B281 		bne	.L2533
 32858              	.LVL2547:
 32859              	.L2239:
4048:src/xeq.c     **** 			clr_lift();
 32860              		.loc 1 4048 27 view .LVU8841
 32861 075c DFF830B1 		ldr	fp, .L2590+28
 32862              	.L2531:
 32863 0760 DBF80030 		ldr	r3, [fp]
 32864 0764 37E5     		b	.L2242
 32865              	.LVL2548:
 32866              	.L2562:
4048:src/xeq.c     **** 			clr_lift();
 32867              		.loc 1 4048 27 view .LVU8842
 32868              	.LBE4358:
 32869              	.LBE4667:
 32870              	.LBB4668:
 32871              	.LBB4437:
 32872              	.LBB4430:
 32873 0766 FFF7FEFF 		bl	process_cmdline.part.0
 32874              	.LVL2549:
 32875 076a ADE5     		b	.L2365
 32876              	.L2563:
 32877              	.LBE4430:
 32878              	.LBE4437:
 32879              	.LBE4668:
5415:src/xeq.c     **** 					// Restore the global return stack
 32880              		.loc 1 5415 5 is_stmt 1 view .LVU8843
5415:src/xeq.c     **** 					// Restore the global return stack
ARM GAS  /tmp/cccVhVyH.s 			page 831


 32881              		.loc 1 5415 9 is_stmt 0 view .LVU8844
 32882 076c 434B     		ldr	r3, .L2590+8
5415:src/xeq.c     **** 					// Restore the global return stack
 32883              		.loc 1 5415 8 view .LVU8845
 32884 076e 93F90120 		ldrsb	r2, [r3, #1]
5415:src/xeq.c     **** 					// Restore the global return stack
 32885              		.loc 1 5415 9 view .LVU8846
 32886 0772 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
5415:src/xeq.c     **** 					// Restore the global return stack
 32887              		.loc 1 5415 8 view .LVU8847
 32888 0774 8242     		cmp	r2, r0
 32889 0776 BFF611AE 		bge	.L2368
5417:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 32890              		.loc 1 5417 6 is_stmt 1 view .LVU8848
5418:src/xeq.c     **** 					// Restore private stack to normal stack
 32891              		.loc 1 5418 6 is_stmt 0 view .LVU8849
 32892 077a 3A68     		ldr	r2, [r7]
5417:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 32893              		.loc 1 5417 13 view .LVU8850
 32894 077c DFF81CE1 		ldr	lr, .L2590+40
5418:src/xeq.c     **** 					// Restore private stack to normal stack
 32895              		.loc 1 5418 6 view .LVU8851
 32896 0780 0292     		str	r2, [sp, #8]
5417:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 32897              		.loc 1 5417 13 view .LVU8852
 32898 0782 9A68     		ldr	r2, [r3, #8]
 32899 0784 CEF80020 		str	r2, [lr]
5418:src/xeq.c     **** 					// Restore private stack to normal stack
 32900              		.loc 1 5418 6 is_stmt 1 view .LVU8853
5418:src/xeq.c     **** 					// Restore private stack to normal stack
 32901              		.loc 1 5418 16 is_stmt 0 view .LVU8854
 32902 0788 029A     		ldr	r2, [sp, #8]
 32903 078a B3F80CC0 		ldrh	ip, [r3, #12]
 32904 078e A2F8E2C7 		strh	ip, [r2, #2018]	@ movhi
5420:src/xeq.c     **** 						// Need space for double precision stack
 32905              		.loc 1 5420 6 is_stmt 1 view .LVU8855
5420:src/xeq.c     **** 						// Need space for double precision stack
 32906              		.loc 1 5420 9 is_stmt 0 view .LVU8856
 32907 0792 11F0080A 		ands	r10, r1, #8
 32908 0796 00F02482 		beq	.L2369
5424:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32909              		.loc 1 5424 6 is_stmt 1 view .LVU8857
5424:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32910              		.loc 1 5424 20 is_stmt 0 view .LVU8858
 32911 079a 60F3C711 		bfi	r1, r0, #7, #1
 32912 079e 5970     		strb	r1, [r3, #1]
5425:src/xeq.c     **** 						UState.mode_double = 1;
 32913              		.loc 1 5425 6 is_stmt 1 view .LVU8859
 32914              	.L2370:
5426:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 32915              		.loc 1 5426 7 view .LVU8860
5426:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 32916              		.loc 1 5426 26 is_stmt 0 view .LVU8861
 32917 07a0 3A68     		ldr	r2, [r7]
 32918 07a2 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 32919 07a6 43F04003 		orr	r3, r3, #64
 32920 07aa 82F8E937 		strb	r3, [r2, #2025]
ARM GAS  /tmp/cccVhVyH.s 			page 832


5427:src/xeq.c     **** 					}
 32921              		.loc 1 5427 7 is_stmt 1 view .LVU8862
5427:src/xeq.c     **** 					}
 32922              		.loc 1 5427 13 is_stmt 0 view .LVU8863
 32923 07ae 6420     		movs	r0, #100
 32924 07b0 FFF7FEFF 		bl	get_reg_n
 32925              	.LVL2550:
5427:src/xeq.c     **** 					}
 32926              		.loc 1 5427 7 view .LVU8864
 32927 07b4 3249     		ldr	r1, .L2590+12
 32928 07b6 C022     		movs	r2, #192
 32929 07b8 FFF7FEFF 		bl	xcopy
 32930              	.LVL2551:
 32931 07bc EEE5     		b	.L2368
 32932              	.LVL2552:
 32933              	.L2260:
 32934              	.LBB4669:
 32935              	.LBB4249:
5252:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32936              		.loc 1 5252 7 is_stmt 1 view .LVU8865
5252:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32937              		.loc 1 5252 23 is_stmt 0 view .LVU8866
 32938 07be 9B44     		add	fp, fp, r3
 32939 07c0 9BF80530 		ldrb	r3, [fp, #5]	@ zero_extendqisi2
5252:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32940              		.loc 1 5252 10 view .LVU8867
 32941 07c4 DB06     		lsls	r3, r3, #27
 32942 07c6 11D5     		bpl	.L2262
5252:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32943              		.loc 1 5252 30 view .LVU8868
 32944 07c8 A2F16303 		sub	r3, r2, #99
 32945 07cc 0C2B     		cmp	r3, #12
 32946 07ce 0DD8     		bhi	.L2262
5252:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32947              		.loc 1 5252 69 view .LVU8869
 32948 07d0 D007     		lsls	r0, r2, #31
 32949              	.LVL2553:
5252:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32950              		.loc 1 5252 69 view .LVU8870
 32951 07d2 0BD5     		bpl	.L2262
5254:src/xeq.c     **** 	}
 32952              		.loc 1 5254 3 is_stmt 1 view .LVU8871
 32953              	.LVL2554:
 32954              	.LBB4232:
 32955              	.LBI4232:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32956              		.loc 1 546 5 view .LVU8872
 32957              	.LBB4233:
 547:src/xeq.c     **** 		Error = e;
 32958              		.loc 1 547 2 view .LVU8873
 547:src/xeq.c     **** 		Error = e;
 32959              		.loc 1 547 12 is_stmt 0 view .LVU8874
 32960 07d4 DFF8B8B0 		ldr	fp, .L2590+28
 32961 07d8 DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 32962              		.loc 1 547 5 view .LVU8875
 32963 07dc 0028     		cmp	r0, #0
ARM GAS  /tmp/cccVhVyH.s 			page 833


 32964 07de AAD1     		bne	.L2524
 32965              	.LVL2555:
 32966              	.LBB4234:
 32967              	.LBI4234:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32968              		.loc 1 546 5 is_stmt 1 view .LVU8876
 32969              	.LBB4235:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32970              		.loc 1 548 3 view .LVU8877
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32971              		.loc 1 548 9 is_stmt 0 view .LVU8878
 32972 07e0 0720     		movs	r0, #7
 32973 07e2 DFF8B090 		ldr	r9, .L2590+32
 32974              	.LVL2556:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32975              		.loc 1 548 9 view .LVU8879
 32976 07e6 CBF80000 		str	r0, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32977              		.loc 1 549 3 is_stmt 1 view .LVU8880
 32978 07ea 49E5     		b	.L2378
 32979              	.LVL2557:
 32980              	.L2262:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32981              		.loc 1 549 3 is_stmt 0 view .LVU8881
 32982              	.LBE4235:
 32983              	.LBE4234:
 32984              	.LBE4233:
 32985              	.LBE4232:
 32986              	.LBB4236:
5258:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 32987              		.loc 1 5258 3 is_stmt 1 view .LVU8882
5259:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 32988              		.loc 1 5259 3 view .LVU8883
 32989              	.LBB4237:
 32990              	.LBI4237:
4508:src/xeq.c     **** {
 32991              		.loc 1 4508 24 view .LVU8884
 32992              	.LBB4238:
4510:src/xeq.c     **** 	if (xp < xrom)
 32993              		.loc 1 4510 2 view .LVU8885
4510:src/xeq.c     **** 	if (xp < xrom)
 32994              		.loc 1 4510 59 is_stmt 0 view .LVU8886
 32995 07ec 0799     		ldr	r1, [sp, #28]
4511:src/xeq.c     **** 		return NULL;
 32996              		.loc 1 4511 5 view .LVU8887
 32997 07ee 254B     		ldr	r3, .L2590+16
4510:src/xeq.c     **** 	if (xp < xrom)
 32998              		.loc 1 4510 59 view .LVU8888
 32999 07f0 21F00101 		bic	r1, r1, #1
 33000              	.LVL2558:
4511:src/xeq.c     **** 		return NULL;
 33001              		.loc 1 4511 2 is_stmt 1 view .LVU8889
4511:src/xeq.c     **** 		return NULL;
 33002              		.loc 1 4511 5 is_stmt 0 view .LVU8890
 33003 07f4 9942     		cmp	r1, r3
 33004 07f6 C0F0F680 		bcc	.L2264
4515:src/xeq.c     **** 		return NULL;
ARM GAS  /tmp/cccVhVyH.s 			page 834


 33005              		.loc 1 4515 2 is_stmt 1 view .LVU8891
4515:src/xeq.c     **** 		return NULL;
 33006              		.loc 1 4515 17 is_stmt 0 view .LVU8892
 33007 07fa 2348     		ldr	r0, .L2590+20
 33008 07fc 0088     		ldrh	r0, [r0]
 33009 07fe 03EB4003 		add	r3, r3, r0, lsl #1
4515:src/xeq.c     **** 		return NULL;
 33010              		.loc 1 4515 5 view .LVU8893
 33011 0802 9942     		cmp	r1, r3
 33012 0804 80F0EF80 		bcs	.L2264
 33013              	.LVL2559:
4515:src/xeq.c     **** 		return NULL;
 33014              		.loc 1 4515 5 view .LVU8894
 33015              	.LBE4238:
 33016              	.LBE4237:
5259:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 33017              		.loc 1 5259 6 view .LVU8895
 33018 0808 0029     		cmp	r1, #0
 33019 080a 00F0EC80 		beq	.L2264
5271:src/xeq.c     **** 			if (XromUserPc == 0)
 33020              		.loc 1 5271 4 is_stmt 1 view .LVU8896
 33021              	.LVL2560:
 33022              	.LBB4239:
 33023              	.LBI4239:
2217:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 33024              		.loc 1 2217 14 view .LVU8897
 33025              	.LBB4240:
2218:src/xeq.c     **** }
 33026              		.loc 1 2218 2 view .LVU8898
 33027              	.LBE4240:
 33028              	.LBE4239:
5271:src/xeq.c     **** 			if (XromUserPc == 0)
 33029              		.loc 1 5271 33 is_stmt 0 view .LVU8899
 33030 080e 3B68     		ldr	r3, [r7]
 33031              	.LBB4242:
 33032              	.LBB4241:
2218:src/xeq.c     **** }
 33033              		.loc 1 2218 9 view .LVU8900
 33034 0810 42F4C441 		orr	r1, r2, #25088
 33035 0814 B3F8E007 		ldrh	r0, [r3, #2016]
 33036 0818 0322     		movs	r2, #3
 33037              	.LVL2561:
2218:src/xeq.c     **** }
 33038              		.loc 1 2218 9 view .LVU8901
 33039 081a FFF7FEFF 		bl	find_opcode_from
 33040              	.LVL2562:
2218:src/xeq.c     **** }
 33041              		.loc 1 2218 9 view .LVU8902
 33042              	.LBE4241:
 33043              	.LBE4242:
5271:src/xeq.c     **** 			if (XromUserPc == 0)
 33044              		.loc 1 5271 15 view .LVU8903
 33045 081e 1B4B     		ldr	r3, .L2590+24
 33046              	.LVL2563:
5271:src/xeq.c     **** 			if (XromUserPc == 0)
 33047              		.loc 1 5271 15 view .LVU8904
 33048 0820 1860     		str	r0, [r3]
ARM GAS  /tmp/cccVhVyH.s 			page 835


5272:src/xeq.c     **** 				return;
 33049              		.loc 1 5272 4 is_stmt 1 view .LVU8905
5272:src/xeq.c     **** 				return;
 33050              		.loc 1 5272 7 is_stmt 0 view .LVU8906
 33051 0822 0028     		cmp	r0, #0
 33052 0824 9AD0     		beq	.L2239
5274:src/xeq.c     **** 				clrretstk();
 33053              		.loc 1 5274 4 is_stmt 1 view .LVU8907
5274:src/xeq.c     **** 				clrretstk();
 33054              		.loc 1 5274 8 is_stmt 0 view .LVU8908
 33055 0826 DFF86C90 		ldr	r9, .L2590+32
 33056              	.LVL2564:
5274:src/xeq.c     **** 				clrretstk();
 33057              		.loc 1 5274 7 view .LVU8909
 33058 082a D9F80030 		ldr	r3, [r9]
 33059 082e 43B9     		cbnz	r3, .L2266
5275:src/xeq.c     **** #endif
 33060              		.loc 1 5275 5 is_stmt 1 view .LVU8910
 33061              	.LBB4243:
 33062              	.LBI4243:
1609:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 33063              		.loc 1 1609 6 view .LVU8911
 33064              	.LBB4244:
1610:src/xeq.c     **** }
 33065              		.loc 1 1610 2 view .LVU8912
1610:src/xeq.c     **** }
 33066              		.loc 1 1610 14 is_stmt 0 view .LVU8913
 33067 0830 3A68     		ldr	r2, [r7]
1610:src/xeq.c     **** }
 33068              		.loc 1 1610 24 view .LVU8914
 33069 0832 B2F8DE17 		ldrh	r1, [r2, #2014]
1610:src/xeq.c     **** }
 33070              		.loc 1 1610 12 view .LVU8915
 33071 0836 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
1610:src/xeq.c     **** }
 33072              		.loc 1 1610 24 view .LVU8916
 33073 083a 63F34F11 		bfi	r1, r3, #5, #11
 33074 083e A2F8DE17 		strh	r1, [r2, #2014]	@ movhi
 33075              	.LVL2565:
 33076              	.L2266:
1610:src/xeq.c     **** }
 33077              		.loc 1 1610 24 view .LVU8917
 33078              	.LBE4244:
 33079              	.LBE4243:
5277:src/xeq.c     **** 			return;
 33080              		.loc 1 5277 4 is_stmt 1 view .LVU8918
 33081 0842 DFF84CB0 		ldr	fp, .L2590+28
 33082 0846 0798     		ldr	r0, [sp, #28]
 33083 0848 FFF7FEFF 		bl	dispatch_xrom
 33084              	.LVL2566:
5278:src/xeq.c     **** 		}
 33085              		.loc 1 5278 4 view .LVU8919
 33086 084c DBF80030 		ldr	r3, [fp]
 33087 0850 C1E4     		b	.L2242
 33088              	.LVL2567:
 33089              	.L2257:
5278:src/xeq.c     **** 		}
ARM GAS  /tmp/cccVhVyH.s 			page 836


 33090              		.loc 1 5278 4 is_stmt 0 view .LVU8920
 33091              	.LBE4236:
5242:src/xeq.c     **** 		if (LocalRegs == 0)
 33092              		.loc 1 5242 7 is_stmt 1 view .LVU8921
5242:src/xeq.c     **** 		if (LocalRegs == 0)
 33093              		.loc 1 5242 10 is_stmt 0 view .LVU8922
 33094 0852 4906     		lsls	r1, r1, #25
 33095 0854 73D5     		bpl	.L2572
5243:src/xeq.c     **** 			lim = NUMFLG - 1;
 33096              		.loc 1 5243 3 is_stmt 1 view .LVU8923
5243:src/xeq.c     **** 			lim = NUMFLG - 1;
 33097              		.loc 1 5243 17 is_stmt 0 view .LVU8924
 33098 0856 3968     		ldr	r1, [r7]
 33099 0858 B1F8DE17 		ldrh	r1, [r1, #2014]
 33100 085c 21F01F01 		bic	r1, r1, #31
5243:src/xeq.c     **** 			lim = NUMFLG - 1;
 33101              		.loc 1 5243 6 view .LVU8925
 33102 0860 89B2     		uxth	r1, r1
5246:src/xeq.c     **** 	}
 33103              		.loc 1 5246 8 view .LVU8926
 33104 0862 0029     		cmp	r1, #0
 33105 0864 0CBF     		ite	eq
 33106 0866 6F20     		moveq	r0, #111
 33107 0868 7F20     		movne	r0, #127
 33108 086a 5BE7     		b	.L2258
 33109              	.LVL2568:
 33110              	.L2250:
5235:src/xeq.c     **** 		}
 33111              		.loc 1 5235 4 is_stmt 1 view .LVU8927
5235:src/xeq.c     **** 		}
 33112              		.loc 1 5235 8 is_stmt 0 view .LVU8928
 33113 086c 42F08002 		orr	r2, r2, #128
 33114              	.LVL2569:
5235:src/xeq.c     **** 		}
 33115              		.loc 1 5235 8 view .LVU8929
 33116 0870 49E7     		b	.L2249
 33117              	.L2591:
 33118 0872 00BF     		.align	2
 33119              	.L2590:
 33120 0874 00000000 		.word	monfuncs
 33121 0878 00000000 		.word	niladics
 33122 087c 00000000 		.word	XromParams
 33123 0880 00000000 		.word	XromLocal
 33124 0884 00000000 		.word	xrom
 33125 0888 00000000 		.word	xrom_size
 33126 088c 00000000 		.word	XromUserPc
 33127 0890 00000000 		.word	Error
 33128 0894 00000000 		.word	Running
 33129 0898 00000000 		.word	XromRunning
 33130 089c 00000000 		.word	RetStk
 33131              	.LVL2570:
 33132              	.L2317:
5235:src/xeq.c     **** 		}
 33133              		.loc 1 5235 8 view .LVU8930
 33134              	.LBE4249:
 33135              	.LBE4669:
 33136              	.LBB4670:
ARM GAS  /tmp/cccVhVyH.s 			page 837


 33137              	.LBB4658:
4656:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 33138              		.loc 1 4656 3 is_stmt 1 view .LVU8931
4656:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 33139              		.loc 1 4656 3 view .LVU8932
 33140              	.LBB4644:
 33141              	.LBI4644:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33142              		.loc 1 546 5 view .LVU8933
 33143              	.LBB4645:
 547:src/xeq.c     **** 		Error = e;
 33144              		.loc 1 547 2 view .LVU8934
 547:src/xeq.c     **** 		Error = e;
 33145              		.loc 1 547 12 is_stmt 0 view .LVU8935
 33146 08a0 DFF864B3 		ldr	fp, .L2592+16
 547:src/xeq.c     **** 		Error = e;
 33147              		.loc 1 547 5 view .LVU8936
 33148 08a4 DBF80030 		ldr	r3, [fp]
 33149 08a8 13B9     		cbnz	r3, .L2325
 33150              	.LVL2571:
 33151              	.LBB4646:
 33152              	.LBI4646:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33153              		.loc 1 546 5 is_stmt 1 view .LVU8937
 33154              	.LBB4647:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33155              		.loc 1 548 3 view .LVU8938
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33156              		.loc 1 548 9 is_stmt 0 view .LVU8939
 33157 08aa 0323     		movs	r3, #3
 33158 08ac CBF80030 		str	r3, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33159              		.loc 1 549 3 is_stmt 1 view .LVU8940
 33160              	.LVL2572:
 33161              	.L2325:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33162              		.loc 1 549 3 is_stmt 0 view .LVU8941
 33163              	.LBE4647:
 33164              	.LBE4646:
 33165              	.LBE4645:
 33166              	.LBE4644:
4656:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 33167              		.loc 1 4656 3 is_stmt 1 view .LVU8942
4658:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 33168              		.loc 1 4658 2 view .LVU8943
4658:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 33169              		.loc 1 4658 6 is_stmt 0 view .LVU8944
 33170 08b0 3B68     		ldr	r3, [r7]
4658:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 33171              		.loc 1 4658 5 view .LVU8945
 33172 08b2 93F9DD27 		ldrsb	r2, [r3, #2013]
 33173 08b6 002A     		cmp	r2, #0
 33174 08b8 09DB     		blt	.L2535
 33175              	.L2379:
4661:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33176              		.loc 1 4661 60 view .LVU8946
 33177 08ba 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
ARM GAS  /tmp/cccVhVyH.s 			page 838


4661:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33178              		.loc 1 4661 56 view .LVU8947
 33179 08be 5207     		lsls	r2, r2, #29
 33180 08c0 7FF54EAF 		bpl	.L2531
4661:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33181              		.loc 1 4661 60 view .LVU8948
 33182 08c4 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 33183 08c8 5B07     		lsls	r3, r3, #29
 33184 08ca 7FF549AF 		bpl	.L2531
 33185              	.L2535:
4662:src/xeq.c     **** 	}
 33186              		.loc 1 4662 4 is_stmt 1 view .LVU8949
 33187              	.LBB4648:
 33188              	.LBI4648:
 767:src/xeq.c     ****     State2.state_lift = 1;
 33189              		.loc 1 767 6 view .LVU8950
 33190              	.LBB4649:
 768:src/xeq.c     **** }
 33191              		.loc 1 768 5 view .LVU8951
 768:src/xeq.c     **** }
 33192              		.loc 1 768 23 is_stmt 0 view .LVU8952
 33193 08ce E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 33194 08d0 DBF80030 		ldr	r3, [fp]
 33195 08d4 42F04002 		orr	r2, r2, #64
 33196 08d8 E275     		strb	r2, [r4, #23]
 769:src/xeq.c     **** 
 33197              		.loc 1 769 1 view .LVU8953
 33198 08da 7CE4     		b	.L2242
 33199              	.LVL2573:
 33200              	.L2561:
 769:src/xeq.c     **** 
 33201              		.loc 1 769 1 view .LVU8954
 33202              	.LBE4649:
 33203              	.LBE4648:
 33204              	.LBE4658:
 33205              	.LBE4670:
 33206              	.LBB4671:
 33207              	.LBB4415:
4756:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 33208              		.loc 1 4756 3 is_stmt 1 view .LVU8955
4756:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 33209              		.loc 1 4756 7 is_stmt 0 view .LVU8956
 33210 08dc 3B68     		ldr	r3, [r7]
 33211 08de 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4756:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 33212              		.loc 1 4756 6 view .LVU8957
 33213 08e2 D907     		lsls	r1, r3, #31
 33214 08e4 40F19481 		bpl	.L2340
4757:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 33215              		.loc 1 4757 4 is_stmt 1 view .LVU8958
4757:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 33216              		.loc 1 4757 10 is_stmt 0 view .LVU8959
 33217 08e8 C34B     		ldr	r3, .L2592
 33218 08ea 02EB4202 		add	r2, r2, r2, lsl #1
 33219              	.LVL2574:
4757:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 33220              		.loc 1 4757 10 view .LVU8960
ARM GAS  /tmp/cccVhVyH.s 			page 839


 33221 08ee 03EBC202 		add	r2, r3, r2, lsl #3
 33222 08f2 D2F80890 		ldr	r9, [r2, #8]
4757:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 33223              		.loc 1 4757 7 view .LVU8961
 33224 08f6 B9F1000F 		cmp	r9, #0
 33225 08fa 00F05881 		beq	.L2351
 33226              	.LBB4388:
4758:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33227              		.loc 1 4758 5 is_stmt 1 view .LVU8962
 33228              	.LVL2575:
4759:src/xeq.c     **** 					return;
 33229              		.loc 1 4759 5 view .LVU8963
4759:src/xeq.c     **** 					return;
 33230              		.loc 1 4759 9 is_stmt 0 view .LVU8964
 33231 08fe 4846     		mov	r0, r9
 33232 0900 FFF7FEFF 		bl	dispatch_xrom
 33233              	.LVL2576:
4759:src/xeq.c     **** 					return;
 33234              		.loc 1 4759 8 view .LVU8965
 33235 0904 0028     		cmp	r0, #0
 33236 0906 7FF429AF 		bne	.L2239
 33237              	.LBB4389:
4762:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 33238              		.loc 1 4762 6 is_stmt 1 view .LVU8966
 33239              	.LBB4390:
 33240              	.LBI4390:
1445:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 33241              		.loc 1 1445 15 view .LVU8967
 33242              	.LBB4391:
1446:src/xeq.c     **** }
 33243              		.loc 1 1446 2 view .LVU8968
1446:src/xeq.c     **** }
 33244              		.loc 1 1446 9 is_stmt 0 view .LVU8969
 33245 090a 6420     		movs	r0, #100
 33246 090c FFF7FEFF 		bl	get_reg_n_int
 33247              	.LVL2577:
 33248 0910 0790     		str	r0, [sp, #28]
 33249              	.LBE4391:
 33250              	.LBE4390:
4763:src/xeq.c     **** 					x = fp(y, x);
 33251              		.loc 1 4763 24 view .LVU8970
 33252 0912 6520     		movs	r0, #101
 33253              	.LBB4393:
 33254              	.LBB4392:
1446:src/xeq.c     **** }
 33255              		.loc 1 1446 9 view .LVU8971
 33256 0914 0691     		str	r1, [sp, #24]
 33257              	.LVL2578:
1446:src/xeq.c     **** }
 33258              		.loc 1 1446 9 view .LVU8972
 33259              	.LBE4392:
 33260              	.LBE4393:
4763:src/xeq.c     **** 					x = fp(y, x);
 33261              		.loc 1 4763 6 is_stmt 1 view .LVU8973
4763:src/xeq.c     **** 					x = fp(y, x);
 33262              		.loc 1 4763 24 is_stmt 0 view .LVU8974
 33263 0916 FFF7FEFF 		bl	get_reg_n_int
ARM GAS  /tmp/cccVhVyH.s 			page 840


 33264              	.LVL2579:
4764:src/xeq.c     **** 					setlastX();
 33265              		.loc 1 4764 6 is_stmt 1 view .LVU8975
4764:src/xeq.c     **** 					setlastX();
 33266              		.loc 1 4764 10 is_stmt 0 view .LVU8976
 33267 091a DDE90632 		ldrd	r3, r2, [sp, #24]
 33268 091e C847     		blx	r9
 33269              	.LVL2580:
4764:src/xeq.c     **** 					setlastX();
 33270              		.loc 1 4764 10 view .LVU8977
 33271 0920 8146     		mov	r9, r0
 33272              	.LVL2581:
4764:src/xeq.c     **** 					setlastX();
 33273              		.loc 1 4764 10 view .LVU8978
 33274 0922 8A46     		mov	r10, r1
 33275              	.LVL2582:
4765:src/xeq.c     **** 					lower();
 33276              		.loc 1 4765 6 is_stmt 1 view .LVU8979
 33277              	.LBB4394:
 33278              	.LBI4394:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33279              		.loc 1 792 6 view .LVU8980
 33280              	.LBB4395:
 793:src/xeq.c     **** }
 33281              		.loc 1 793 2 view .LVU8981
 33282 0924 6C20     		movs	r0, #108
 33283              	.LVL2583:
 793:src/xeq.c     **** }
 33284              		.loc 1 793 2 is_stmt 0 view .LVU8982
 33285 0926 6421     		movs	r1, #100
 33286              	.LVL2584:
 793:src/xeq.c     **** }
 33287              		.loc 1 793 2 view .LVU8983
 33288 0928 DFF8DCB2 		ldr	fp, .L2592+16
 33289 092c FFF7FEFF 		bl	copyreg_n
 33290              	.LVL2585:
 33291              	.LBE4395:
 33292              	.LBE4394:
4766:src/xeq.c     **** 					setX_int(x);
 33293              		.loc 1 4766 6 is_stmt 1 view .LVU8984
 33294 0930 F3E5     		b	.L2534
 33295              	.LVL2586:
 33296              	.L2261:
4766:src/xeq.c     **** 					setX_int(x);
 33297              		.loc 1 4766 6 is_stmt 0 view .LVU8985
 33298              	.LBE4389:
 33299              	.LBE4388:
 33300              	.LBE4415:
 33301              	.LBE4671:
 33302              	.LBB4672:
 33303              	.LBB4250:
 33304              	.LBB4245:
 33305              	.LBB4231:
 33306              	.LBB4229:
 33307              	.LBI4229:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33308              		.loc 1 546 5 is_stmt 1 view .LVU8986
ARM GAS  /tmp/cccVhVyH.s 			page 841


 33309              	.LBB4230:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33310              		.loc 1 548 3 view .LVU8987
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33311              		.loc 1 548 9 is_stmt 0 view .LVU8988
 33312 0932 0820     		movs	r0, #8
 33313 0934 DFF8D492 		ldr	r9, .L2592+20
 33314              	.LVL2587:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33315              		.loc 1 548 9 view .LVU8989
 33316 0938 CBF80000 		str	r0, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33317              		.loc 1 549 3 is_stmt 1 view .LVU8990
 33318 093c A0E4     		b	.L2378
 33319              	.LVL2588:
 33320              	.L2572:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33321              		.loc 1 549 3 is_stmt 0 view .LVU8991
 33322              	.LBE4230:
 33323              	.LBE4229:
 33324              	.LBE4231:
 33325              	.LBE4245:
5198:src/xeq.c     **** 
 33326              		.loc 1 5198 15 view .LVU8992
 33327 093e 0698     		ldr	r0, [sp, #24]
 33328 0940 F0E6     		b	.L2258
 33329              	.LVL2589:
 33330              	.L2560:
5198:src/xeq.c     **** 
 33331              		.loc 1 5198 15 view .LVU8993
 33332              	.LBE4250:
 33333              	.LBE4672:
 33334              	.LBB4673:
 33335              	.LBB4288:
 33336              	.LBB4283:
5305:src/xeq.c     **** 			if (XromUserPc != 0) {
 33337              		.loc 1 5305 4 is_stmt 1 view .LVU8994
5305:src/xeq.c     **** 			if (XromUserPc != 0) {
 33338              		.loc 1 5305 17 is_stmt 0 view .LVU8995
 33339 0942 0121     		movs	r1, #1
 33340 0944 2846     		mov	r0, r5
 33341 0946 0693     		str	r3, [sp, #24]
 33342 0948 FFF7FEFF 		bl	findmultilbl
 33343              	.LVL2590:
5305:src/xeq.c     **** 			if (XromUserPc != 0) {
 33344              		.loc 1 5305 15 view .LVU8996
 33345 094c AB4A     		ldr	r2, .L2592+4
5306:src/xeq.c     **** 				if (! Running)
 33346              		.loc 1 5306 7 view .LVU8997
 33347 094e 069B     		ldr	r3, [sp, #24]
5305:src/xeq.c     **** 			if (XromUserPc != 0) {
 33348              		.loc 1 5305 15 view .LVU8998
 33349 0950 1060     		str	r0, [r2]
5306:src/xeq.c     **** 				if (! Running)
 33350              		.loc 1 5306 4 is_stmt 1 view .LVU8999
5306:src/xeq.c     **** 				if (! Running)
 33351              		.loc 1 5306 7 is_stmt 0 view .LVU9000
ARM GAS  /tmp/cccVhVyH.s 			page 842


 33352 0952 0028     		cmp	r0, #0
 33353 0954 3FF402AF 		beq	.L2239
 33354              	.LVL2591:
5307:src/xeq.c     **** 					clrretstk();
 33355              		.loc 1 5307 5 is_stmt 1 view .LVU9001
5307:src/xeq.c     **** 					clrretstk();
 33356              		.loc 1 5307 9 is_stmt 0 view .LVU9002
 33357 0958 DFF8B092 		ldr	r9, .L2592+20
 33358              	.LVL2592:
5307:src/xeq.c     **** 					clrretstk();
 33359              		.loc 1 5307 8 view .LVU9003
 33360 095c D9F80020 		ldr	r2, [r9]
 33361 0960 42B9     		cbnz	r2, .L2243
5308:src/xeq.c     **** 				dispatch_xrom(fp);
 33362              		.loc 1 5308 6 is_stmt 1 view .LVU9004
 33363              	.LBB4274:
 33364              	.LBI4274:
1609:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 33365              		.loc 1 1609 6 view .LVU9005
 33366              	.LBB4275:
1610:src/xeq.c     **** }
 33367              		.loc 1 1610 2 view .LVU9006
1610:src/xeq.c     **** }
 33368              		.loc 1 1610 14 is_stmt 0 view .LVU9007
 33369 0962 3968     		ldr	r1, [r7]
1610:src/xeq.c     **** }
 33370              		.loc 1 1610 24 view .LVU9008
 33371 0964 B1F8DE07 		ldrh	r0, [r1, #2014]
1610:src/xeq.c     **** }
 33372              		.loc 1 1610 12 view .LVU9009
 33373 0968 A1F8E227 		strh	r2, [r1, #2018]	@ movhi
1610:src/xeq.c     **** }
 33374              		.loc 1 1610 24 view .LVU9010
 33375 096c 62F34F10 		bfi	r0, r2, #5, #11
 33376 0970 A1F8DE07 		strh	r0, [r1, #2014]	@ movhi
 33377              	.LVL2593:
 33378              	.L2243:
1610:src/xeq.c     **** }
 33379              		.loc 1 1610 24 view .LVU9011
 33380              	.LBE4275:
 33381              	.LBE4274:
5309:src/xeq.c     **** 			}
 33382              		.loc 1 5309 5 is_stmt 1 view .LVU9012
 33383 0974 DFF890B2 		ldr	fp, .L2592+16
 33384 0978 1846     		mov	r0, r3
 33385 097a FFF7FEFF 		bl	dispatch_xrom
 33386              	.LVL2594:
 33387 097e DBF80030 		ldr	r3, [fp]
 33388 0982 28E4     		b	.L2242
 33389              	.LVL2595:
 33390              	.L2285:
5309:src/xeq.c     **** 			}
 33391              		.loc 1 5309 5 is_stmt 0 view .LVU9013
 33392              	.LBE4283:
 33393              	.LBE4288:
 33394              	.LBE4673:
 33395              	.LBB4674:
ARM GAS  /tmp/cccVhVyH.s 			page 843


 33396              	.LBB4359:
3934:src/xeq.c     **** 		break;
 33397              		.loc 1 3934 3 is_stmt 1 view .LVU9014
 33398 0984 DFF880B2 		ldr	fp, .L2592+16
 33399 0988 A9F10500 		sub	r0, r9, #5
 33400 098c FFF7FEFF 		bl	digit
 33401              	.LVL2596:
3935:src/xeq.c     **** 
 33402              		.loc 1 3935 3 view .LVU9015
 33403 0990 DBF80030 		ldr	r3, [fp]
 33404 0994 1FE4     		b	.L2242
 33405              	.LVL2597:
 33406              	.L2564:
3935:src/xeq.c     **** 
 33407              		.loc 1 3935 3 is_stmt 0 view .LVU9016
 33408              	.LBE4359:
 33409              	.LBE4674:
 33410              	.LBB4675:
 33411              	.LBB4492:
 33412              	.LBB4481:
 33413              	.LBB4464:
 33414              	.LBB4457:
 33415 0996 FFF7FEFF 		bl	process_cmdline.part.0
 33416              	.LVL2598:
 33417 099a 1AE5     		b	.L2359
 33418              	.LVL2599:
 33419              	.L2568:
3935:src/xeq.c     **** 
 33420              		.loc 1 3935 3 view .LVU9017
 33421              	.LBE4457:
 33422              	.LBE4464:
 33423              	.LBE4481:
 33424              	.LBE4492:
 33425              	.LBE4675:
 33426              	.LBB4676:
 33427              	.LBB4659:
 33428              	.LBB4650:
 33429              	.LBB4631:
 33430 099c FFF7FEFF 		bl	process_cmdline.part.0
 33431              	.LVL2600:
 33432 09a0 4CE6     		b	.L2316
 33433              	.LVL2601:
 33434              	.L2567:
3935:src/xeq.c     **** 
 33435              		.loc 1 3935 3 view .LVU9018
 33436              	.LBE4631:
 33437              	.LBE4650:
 33438              	.LBE4659:
 33439              	.LBE4676:
 33440              	.LBB4677:
 33441              	.LBB4621:
 33442              	.LBB4608:
 33443              	.LBB4597:
 33444              	.LBB4590:
 33445 09a2 FFF7FEFF 		bl	process_cmdline.part.0
 33446              	.LVL2602:
 33447 09a6 11E6     		b	.L2330
ARM GAS  /tmp/cccVhVyH.s 			page 844


 33448              	.LVL2603:
 33449              	.L2566:
3935:src/xeq.c     **** 
 33450              		.loc 1 3935 3 view .LVU9019
 33451              	.LBE4590:
 33452              	.LBE4597:
 33453              	.LBE4608:
 33454              	.LBE4621:
 33455              	.LBE4677:
 33456              	.LBB4678:
 33457              	.LBB4579:
 33458              	.LBB4574:
 33459              	.LBB4559:
 33460              	.LBB4552:
 33461 09a8 FFF7FEFF 		bl	process_cmdline.part.0
 33462              	.LVL2604:
 33463 09ac D4E5     		b	.L2354
 33464              	.LVL2605:
 33465              	.L2565:
3935:src/xeq.c     **** 
 33466              		.loc 1 3935 3 view .LVU9020
 33467              	.LBE4552:
 33468              	.LBE4559:
 33469              	.LBE4574:
 33470              	.LBE4579:
 33471              	.LBE4678:
 33472              	.LBB4679:
 33473              	.LBB4540:
 33474              	.LBB4523:
 33475              	.LBB4510:
 33476              	.LBB4503:
 33477 09ae FFF7FEFF 		bl	process_cmdline.part.0
 33478              	.LVL2606:
 33479 09b2 77E5     		b	.L2346
 33480              	.LVL2607:
 33481              	.L2282:
3935:src/xeq.c     **** 
 33482              		.loc 1 3935 3 view .LVU9021
 33483              	.LBE4503:
 33484              	.LBE4510:
 33485              	.LBE4523:
 33486              	.LBE4540:
 33487              	.LBE4679:
 33488              	.LBB4680:
 33489              	.LBB4360:
4089:src/xeq.c     **** 		break;
 33490              		.loc 1 4089 3 is_stmt 1 view .LVU9022
 33491 09b4 DFF850B2 		ldr	fp, .L2592+16
4089:src/xeq.c     **** 		break;
 33492              		.loc 1 4089 53 is_stmt 0 view .LVU9023
 33493 09b8 A5F11E01 		sub	r1, r5, #30
4089:src/xeq.c     **** 		break;
 33494              		.loc 1 4089 3 view .LVU9024
 33495 09bc C9B2     		uxtb	r1, r1
 33496 09be 40F61C00 		movw	r0, #2076
 33497 09c2 FFF7FEFF 		bl	do_tst
 33498              	.LVL2608:
ARM GAS  /tmp/cccVhVyH.s 			page 845


4090:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
 33499              		.loc 1 4090 3 is_stmt 1 view .LVU9025
 33500 09c6 DBF80030 		ldr	r3, [fp]
 33501 09ca 04E4     		b	.L2242
 33502              	.L2283:
4080:src/xeq.c     **** 		break;
 33503              		.loc 1 4080 3 view .LVU9026
 33504 09cc DFF838B2 		ldr	fp, .L2592+16
4080:src/xeq.c     **** 		break;
 33505              		.loc 1 4080 54 is_stmt 0 view .LVU9027
 33506 09d0 A5F11701 		sub	r1, r5, #23
4080:src/xeq.c     **** 		break;
 33507              		.loc 1 4080 3 view .LVU9028
 33508 09d4 C9B2     		uxtb	r1, r1
 33509 09d6 40F61B00 		movw	r0, #2075
 33510 09da FFF7FEFF 		bl	do_tst
 33511              	.LVL2609:
4081:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
 33512              		.loc 1 4081 3 is_stmt 1 view .LVU9029
 33513 09de DBF80030 		ldr	r3, [fp]
 33514 09e2 FFF7F8BB 		b	.L2242
 33515              	.LVL2610:
 33516              	.L2264:
4081:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
 33517              		.loc 1 4081 3 is_stmt 0 view .LVU9030
 33518              	.LBE4360:
 33519              	.LBE4680:
 33520              	.LBB4681:
 33521              	.LBB4251:
 33522              	.LBB4246:
5281:src/xeq.c     **** 		}
 33523              		.loc 1 5281 4 is_stmt 1 view .LVU9031
 33524 09e6 079B     		ldr	r3, [sp, #28]
 33525 09e8 1046     		mov	r0, r2
 33526 09ea 4946     		mov	r1, r9
 33527 09ec 9847     		blx	r3
 33528              	.LVL2611:
5283:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 33529              		.loc 1 5283 3 view .LVU9032
5283:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 33530              		.loc 1 5283 6 is_stmt 0 view .LVU9033
 33531 09ee B9F1840F 		cmp	r9, #132
 33532 09f2 7FF4E8AB 		bne	.L2530
 33533 09f6 B1E6     		b	.L2239
 33534              	.LVL2612:
 33535              	.L2281:
5283:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 33536              		.loc 1 5283 6 view .LVU9034
 33537              	.LBE4246:
 33538              	.LBE4251:
 33539              	.LBE4681:
 33540              	.LBB4682:
 33541              	.LBB4361:
4083:src/xeq.c     **** 		break;
 33542              		.loc 1 4083 3 is_stmt 1 view .LVU9035
 33543 09f8 8149     		ldr	r1, .L2592+8
 33544 09fa DFF80CB2 		ldr	fp, .L2592+16
ARM GAS  /tmp/cccVhVyH.s 			page 846


4083:src/xeq.c     **** 		break;
 33545              		.loc 1 4083 49 is_stmt 0 view .LVU9036
 33546 09fe A5F12502 		sub	r2, r5, #37
4083:src/xeq.c     **** 		break;
 33547              		.loc 1 4083 3 view .LVU9037
 33548 0a02 0846     		mov	r0, r1
 33549 0a04 D2B2     		uxtb	r2, r2
 33550 0a06 FFF7FEFF 		bl	do_ztst
 33551              	.LVL2613:
4084:src/xeq.c     **** 
 33552              		.loc 1 4084 3 is_stmt 1 view .LVU9038
 33553 0a0a DBF80030 		ldr	r3, [fp]
 33554 0a0e FFF7E2BB 		b	.L2242
 33555              	.L2284:
4062:src/xeq.c     **** 			bad_mode_error();
 33556              		.loc 1 4062 3 view .LVU9039
4062:src/xeq.c     **** 			bad_mode_error();
 33557              		.loc 1 4062 7 is_stmt 0 view .LVU9040
 33558 0a12 3B68     		ldr	r3, [r7]
 33559 0a14 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4062:src/xeq.c     **** 			bad_mode_error();
 33560              		.loc 1 4062 6 view .LVU9041
 33561 0a18 DB07     		lsls	r3, r3, #31
 33562 0a1a 00F1C880 		bmi	.L2351
4066:src/xeq.c     **** 		clr_lift();
 33563              		.loc 1 4066 3 is_stmt 1 view .LVU9042
 33564              	.LBB4295:
 33565              	.LBI4295:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 33566              		.loc 1 1229 6 view .LVU9043
 33567              	.LBB4296:
1230:src/xeq.c     **** 
 33568              		.loc 1 1230 2 view .LVU9044
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33569              		.loc 1 1232 2 view .LVU9045
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33570              		.loc 1 1232 5 is_stmt 0 view .LVU9046
 33571 0a1e 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 33572 0a20 002B     		cmp	r3, #0
 33573 0a22 40F0F281 		bne	.L2573
 33574              	.L2313:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33575              		.loc 1 1232 5 view .LVU9047
 33576              	.LBE4296:
 33577              	.LBE4295:
4067:src/xeq.c     **** 		setlastX();
 33578              		.loc 1 4067 3 is_stmt 1 view .LVU9048
 33579              	.LBB4298:
 33580              	.LBI4298:
 771:src/xeq.c     ****     State2.state_lift = 0;
 33581              		.loc 1 771 13 view .LVU9049
 33582              	.LBB4299:
 772:src/xeq.c     **** }
 33583              		.loc 1 772 5 view .LVU9050
 772:src/xeq.c     **** }
 33584              		.loc 1 772 23 is_stmt 0 view .LVU9051
 33585 0a26 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
ARM GAS  /tmp/cccVhVyH.s 			page 847


 33586              	.LBE4299:
 33587              	.LBE4298:
 33588              	.LBB4302:
 33589              	.LBB4303:
 793:src/xeq.c     **** }
 33590              		.loc 1 793 2 view .LVU9052
 33591 0a28 6421     		movs	r1, #100
 33592              	.LBE4303:
 33593              	.LBE4302:
 33594              	.LBB4306:
 33595              	.LBB4300:
 772:src/xeq.c     **** }
 33596              		.loc 1 772 23 view .LVU9053
 33597 0a2a 6FF38613 		bfc	r3, #6, #1
 33598              	.LBE4300:
 33599              	.LBE4306:
 33600              	.LBB4307:
 33601              	.LBB4304:
 793:src/xeq.c     **** }
 33602              		.loc 1 793 2 view .LVU9054
 33603 0a2e 6C20     		movs	r0, #108
 33604              	.LBE4304:
 33605              	.LBE4307:
 33606              	.LBB4308:
 33607              	.LBB4301:
 772:src/xeq.c     **** }
 33608              		.loc 1 772 23 view .LVU9055
 33609 0a30 E375     		strb	r3, [r4, #23]
 33610              	.LBE4301:
 33611              	.LBE4308:
4068:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
 33612              		.loc 1 4068 3 is_stmt 1 view .LVU9056
 33613              	.LBB4309:
 33614              	.LBI4302:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33615              		.loc 1 792 6 view .LVU9057
 33616              	.LBB4305:
 793:src/xeq.c     **** }
 33617              		.loc 1 793 2 view .LVU9058
 33618 0a32 FFF7FEFF 		bl	copyreg_n
 33619              	.LVL2614:
 33620              	.LBE4305:
 33621              	.LBE4309:
4069:src/xeq.c     **** 			sigma_plus();
 33622              		.loc 1 4069 3 view .LVU9059
4069:src/xeq.c     **** 			sigma_plus();
 33623              		.loc 1 4069 6 is_stmt 0 view .LVU9060
 33624 0a36 B9F1150F 		cmp	r9, #21
 33625 0a3a 00F0E381 		beq	.L2574
4072:src/xeq.c     **** 		sigma_val(OP_sigmaN);
 33626              		.loc 1 4072 4 is_stmt 1 view .LVU9061
 33627 0a3e FFF7FEFF 		bl	sigma_minus
 33628              	.LVL2615:
 33629              	.L2315:
4073:src/xeq.c     **** 		break;
 33630              		.loc 1 4073 3 view .LVU9062
 33631 0a42 DFF8C4B1 		ldr	fp, .L2592+16
ARM GAS  /tmp/cccVhVyH.s 			page 848


 33632 0a46 1D20     		movs	r0, #29
 33633 0a48 FFF7FEFF 		bl	sigma_val
 33634              	.LVL2616:
4074:src/xeq.c     **** 
 33635              		.loc 1 4074 3 view .LVU9063
 33636 0a4c DBF80030 		ldr	r3, [fp]
 33637 0a50 FFF7C1BB 		b	.L2242
 33638              	.L2278:
4095:src/xeq.c     **** 		break;
 33639              		.loc 1 4095 3 view .LVU9064
 33640 0a54 DFF8B0B1 		ldr	fp, .L2592+16
 33641 0a58 6A49     		ldr	r1, .L2592+12
 33642 0a5a 6948     		ldr	r0, .L2592+8
4095:src/xeq.c     **** 		break;
 33643              		.loc 1 4095 49 is_stmt 0 view .LVU9065
 33644 0a5c A5F12902 		sub	r2, r5, #41
4095:src/xeq.c     **** 		break;
 33645              		.loc 1 4095 3 view .LVU9066
 33646 0a60 D2B2     		uxtb	r2, r2
 33647 0a62 FFF7FEFF 		bl	do_ztst
 33648              	.LVL2617:
4096:src/xeq.c     **** 
 33649              		.loc 1 4096 3 is_stmt 1 view .LVU9067
 33650 0a66 DBF80030 		ldr	r3, [fp]
 33651 0a6a FFF7B4BB 		b	.L2242
 33652              	.L2280:
4092:src/xeq.c     **** 		break;
 33653              		.loc 1 4092 3 view .LVU9068
 33654 0a6e DFF898B1 		ldr	fp, .L2592+16
 33655 0a72 6349     		ldr	r1, .L2592+8
 33656 0a74 6348     		ldr	r0, .L2592+12
4092:src/xeq.c     **** 		break;
 33657              		.loc 1 4092 49 is_stmt 0 view .LVU9069
 33658 0a76 A5F12702 		sub	r2, r5, #39
4092:src/xeq.c     **** 		break;
 33659              		.loc 1 4092 3 view .LVU9070
 33660 0a7a D2B2     		uxtb	r2, r2
 33661 0a7c FFF7FEFF 		bl	do_ztst
 33662              	.LVL2618:
4093:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
 33663              		.loc 1 4093 3 is_stmt 1 view .LVU9071
 33664 0a80 DBF80030 		ldr	r3, [fp]
 33665 0a84 FFF7A7BB 		b	.L2242
 33666              	.L2289:
4022:src/xeq.c     **** 			illegal(op);
 33667              		.loc 1 4022 3 view .LVU9072
4022:src/xeq.c     **** 			illegal(op);
 33668              		.loc 1 4022 7 is_stmt 0 view .LVU9073
 33669 0a88 DFF88091 		ldr	r9, .L2592+20
 33670              	.LVL2619:
4022:src/xeq.c     **** 			illegal(op);
 33671              		.loc 1 4022 6 view .LVU9074
 33672 0a8c D9F80030 		ldr	r3, [r9]
 33673 0a90 002B     		cmp	r3, #0
 33674 0a92 00F06C81 		beq	.L2301
4023:src/xeq.c     **** 		else if (CmdLineLength) {
 33675              		.loc 1 4023 4 is_stmt 1 view .LVU9075
ARM GAS  /tmp/cccVhVyH.s 			page 849


4023:src/xeq.c     **** 		else if (CmdLineLength) {
 33676              		.loc 1 4023 4 view .LVU9076
 33677              	.LVL2620:
 33678              	.LBB4310:
 33679              	.LBI4310:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33680              		.loc 1 546 5 view .LVU9077
 33681              	.LBB4311:
 547:src/xeq.c     **** 		Error = e;
 33682              		.loc 1 547 2 view .LVU9078
 547:src/xeq.c     **** 		Error = e;
 33683              		.loc 1 547 12 is_stmt 0 view .LVU9079
 33684 0a96 DFF870B1 		ldr	fp, .L2592+16
 33685 0a9a DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 33686              		.loc 1 547 5 view .LVU9080
 33687 0a9e 0028     		cmp	r0, #0
 33688 0aa0 3FF4EBAB 		beq	.L2247
 33689 0aa4 FFF7ECBB 		b	.L2378
 33690              	.LVL2621:
 33691              	.L2290:
 547:src/xeq.c     **** 		Error = e;
 33692              		.loc 1 547 5 view .LVU9081
 33693              	.LBE4311:
 33694              	.LBE4310:
4041:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 33695              		.loc 1 4041 5 is_stmt 1 view .LVU9082
4041:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 33696              		.loc 1 4041 9 is_stmt 0 view .LVU9083
 33697 0aa8 3B68     		ldr	r3, [r7]
4041:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 33698              		.loc 1 4041 8 view .LVU9084
 33699 0aaa 93F9DD37 		ldrsb	r3, [r3, #2013]
 33700 0aae 002B     		cmp	r3, #0
4042:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 33701              		.loc 1 4042 10 view .LVU9085
 33702 0ab0 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
4041:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 33703              		.loc 1 4041 8 view .LVU9086
 33704 0ab2 FFF643AE 		blt	.L2575
4054:src/xeq.c     **** 		    lift();
 33705              		.loc 1 4054 7 is_stmt 1 view .LVU9087
 33706              	.LBB4312:
 33707              	.LBI4312:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 33708              		.loc 1 1229 6 view .LVU9088
 33709              	.LBB4313:
1230:src/xeq.c     **** 
 33710              		.loc 1 1230 2 view .LVU9089
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33711              		.loc 1 1232 2 view .LVU9090
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33712              		.loc 1 1232 5 is_stmt 0 view .LVU9091
 33713 0ab6 002B     		cmp	r3, #0
 33714 0ab8 40F0A181 		bne	.L2576
 33715              	.L2310:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
ARM GAS  /tmp/cccVhVyH.s 			page 850


 33716              		.loc 1 1232 5 view .LVU9092
 33717              	.LBE4313:
 33718              	.LBE4312:
4055:src/xeq.c     **** 		    clr_lift();
 33719              		.loc 1 4055 7 is_stmt 1 view .LVU9093
 33720 0abc FFF7FEFF 		bl	lift
 33721              	.LVL2622:
 33722              	.L2533:
4056:src/xeq.c     **** 		  }
 33723              		.loc 1 4056 7 view .LVU9094
 33724              	.LBB4315:
 33725              	.LBI4315:
 771:src/xeq.c     ****     State2.state_lift = 0;
 33726              		.loc 1 771 13 view .LVU9095
 33727              	.LBB4316:
 772:src/xeq.c     **** }
 33728              		.loc 1 772 5 view .LVU9096
 772:src/xeq.c     **** }
 33729              		.loc 1 772 23 is_stmt 0 view .LVU9097
 33730 0ac0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 33731 0ac2 DFF844B1 		ldr	fp, .L2592+16
 33732 0ac6 6FF38613 		bfc	r3, #6, #1
 33733 0aca E375     		strb	r3, [r4, #23]
 33734 0acc DBF80030 		ldr	r3, [fp]
 773:src/xeq.c     **** 
 33735              		.loc 1 773 1 view .LVU9098
 33736 0ad0 FFF781BB 		b	.L2242
 33737              	.LVL2623:
 33738              	.L2286:
 773:src/xeq.c     **** 
 33739              		.loc 1 773 1 view .LVU9099
 33740              	.LBE4316:
 33741              	.LBE4315:
3938:src/xeq.c     **** 			break;
 33742              		.loc 1 3938 3 is_stmt 1 view .LVU9100
3938:src/xeq.c     **** 			break;
 33743              		.loc 1 3938 7 is_stmt 0 view .LVU9101
 33744 0ad4 3B68     		ldr	r3, [r7]
 33745 0ad6 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3938:src/xeq.c     **** 			break;
 33746              		.loc 1 3938 6 view .LVU9102
 33747 0ada D907     		lsls	r1, r3, #31
 33748 0adc 3FF53EAE 		bmi	.L2239
3941:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 33749              		.loc 1 3941 3 is_stmt 1 view .LVU9103
3941:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 33750              		.loc 1 3941 7 is_stmt 0 view .LVU9104
 33751 0ae0 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
3941:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 33752              		.loc 1 3941 6 view .LVU9105
 33753 0ae2 012B     		cmp	r3, #1
 33754 0ae4 3FF63AAE 		bhi	.L2239
3941:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 33755              		.loc 1 3941 22 view .LVU9106
 33756 0ae8 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 33757 0aea 002A     		cmp	r2, #0
 33758 0aec 7FF436AE 		bne	.L2239
ARM GAS  /tmp/cccVhVyH.s 			page 851


3941:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 33759              		.loc 1 3941 54 view .LVU9107
 33760 0af0 002B     		cmp	r3, #0
3941:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 33761              		.loc 1 3941 40 view .LVU9108
 33762 0af2 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3941:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 33763              		.loc 1 3941 54 view .LVU9109
 33764 0af4 0CBF     		ite	eq
 33765 0af6 0C22     		moveq	r2, #12
 33766 0af8 0D22     		movne	r2, #13
3941:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 33767              		.loc 1 3941 37 view .LVU9110
 33768 0afa 9A42     		cmp	r2, r3
 33769 0afc FFF62EAE 		blt	.L2239
3942:src/xeq.c     **** #else
 33770              		.loc 1 3942 4 is_stmt 1 view .LVU9111
3942:src/xeq.c     **** #else
 33771              		.loc 1 3942 7 is_stmt 0 view .LVU9112
 33772 0b00 002B     		cmp	r3, #0
 33773 0b02 00F0D181 		beq	.L2293
3942:src/xeq.c     **** #else
 33774              		.loc 1 3942 37 view .LVU9113
 33775 0b06 2344     		add	r3, r3, r4
3942:src/xeq.c     **** #else
 33776              		.loc 1 3942 27 view .LVU9114
 33777 0b08 DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 33778 0b0a 2D2B     		cmp	r3, #45
 33779 0b0c 00F0CC81 		beq	.L2293
 33780              	.L2294:
3953:src/xeq.c     **** 			append_cmdline('.');
 33781              		.loc 1 3953 4 is_stmt 1 view .LVU9115
 33782              	.LBB4317:
 33783              	.LBB4318:
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33784              		.loc 1 2649 10 is_stmt 0 view .LVU9116
 33785 0b10 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 33786              	.LBE4318:
 33787              	.LBE4317:
3953:src/xeq.c     **** 			append_cmdline('.');
 33788              		.loc 1 3953 14 view .LVU9117
 33789 0b12 A17F     		ldrb	r1, [r4, #30]	@ zero_extendqisi2
 33790 0b14 DFF8F0B0 		ldr	fp, .L2592+16
 33791              	.LBB4322:
 33792              	.LBB4319:
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33793              		.loc 1 2649 23 view .LVU9118
 33794 0b18 5A1C     		adds	r2, r3, #1
 33795 0b1a D2B2     		uxtb	r2, r2
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33796              		.loc 1 2649 27 view .LVU9119
 33797 0b1c 2344     		add	r3, r3, r4
2650:src/xeq.c     **** }
 33798              		.loc 1 2650 25 view .LVU9120
 33799 0b1e A018     		adds	r0, r4, r2
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33800              		.loc 1 2649 23 view .LVU9121
ARM GAS  /tmp/cccVhVyH.s 			page 852


 33801 0b20 2277     		strb	r2, [r4, #28]
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33802              		.loc 1 2649 27 view .LVU9122
 33803 0b22 2E22     		movs	r2, #46
 33804 0b24 83F82020 		strb	r2, [r3, #32]
 33805              	.LBE4319:
 33806              	.LBE4322:
3953:src/xeq.c     **** 			append_cmdline('.');
 33807              		.loc 1 3953 14 view .LVU9123
 33808 0b28 0131     		adds	r1, r1, #1
 33809              	.LBB4323:
 33810              	.LBB4320:
2650:src/xeq.c     **** }
 33811              		.loc 1 2650 25 view .LVU9124
 33812 0b2a 0023     		movs	r3, #0
 33813 0b2c 80F82030 		strb	r3, [r0, #32]
 33814              	.LBE4320:
 33815              	.LBE4323:
3953:src/xeq.c     **** 			append_cmdline('.');
 33816              		.loc 1 3953 14 view .LVU9125
 33817 0b30 A177     		strb	r1, [r4, #30]
3954:src/xeq.c     **** 		}
 33818              		.loc 1 3954 4 is_stmt 1 view .LVU9126
 33819              	.LVL2624:
 33820              	.LBB4324:
 33821              	.LBI4317:
2648:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 33822              		.loc 1 2648 13 view .LVU9127
 33823              	.LBB4321:
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33824              		.loc 1 2649 2 view .LVU9128
2650:src/xeq.c     **** }
 33825              		.loc 1 2650 2 view .LVU9129
 33826 0b32 DBF80030 		ldr	r3, [fp]
2651:src/xeq.c     **** 
 33827              		.loc 1 2651 1 is_stmt 0 view .LVU9130
 33828 0b36 FFF74EBB 		b	.L2242
 33829              	.LVL2625:
 33830              	.L2287:
2651:src/xeq.c     **** 
 33831              		.loc 1 2651 1 view .LVU9131
 33832              	.LBE4321:
 33833              	.LBE4324:
4006:src/xeq.c     **** 			cmdlinechs();
 33834              		.loc 1 4006 3 is_stmt 1 view .LVU9132
4006:src/xeq.c     **** 			cmdlinechs();
 33835              		.loc 1 4006 7 is_stmt 0 view .LVU9133
 33836 0b3a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
4006:src/xeq.c     **** 			cmdlinechs();
 33837              		.loc 1 4006 6 view .LVU9134
 33838 0b3c 002A     		cmp	r2, #0
 33839 0b3e 40F04281 		bne	.L2577
4008:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 33840              		.loc 1 4008 8 is_stmt 1 view .LVU9135
4008:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 33841              		.loc 1 4008 12 is_stmt 0 view .LVU9136
 33842 0b42 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/cccVhVyH.s 			page 853


 33843 0b44 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4008:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 33844              		.loc 1 4008 11 view .LVU9137
 33845 0b48 DA07     		lsls	r2, r3, #31
 33846 0b4a 40F12E81 		bpl	.L2300
4009:src/xeq.c     **** 			set_lift();
 33847              		.loc 1 4009 4 is_stmt 1 view .LVU9138
 33848              	.LBB4325:
 33849              	.LBI4325:
1445:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 33850              		.loc 1 1445 15 view .LVU9139
 33851              	.LBB4326:
1446:src/xeq.c     **** }
 33852              		.loc 1 1446 2 view .LVU9140
1446:src/xeq.c     **** }
 33853              		.loc 1 1446 9 is_stmt 0 view .LVU9141
 33854 0b4e 6420     		movs	r0, #100
 33855 0b50 FFF7FEFF 		bl	get_reg_n_int
 33856              	.LVL2626:
 33857              	.LBE4326:
 33858              	.LBE4325:
4009:src/xeq.c     **** 			set_lift();
 33859              		.loc 1 4009 4 view .LVU9142
 33860 0b54 FFF7FEFF 		bl	intChs
 33861              	.LVL2627:
 33862 0b58 FFF7FEFF 		bl	setX_int
 33863              	.LVL2628:
 33864 0b5c FFF733BB 		b	.L2530
 33865              	.L2288:
3959:src/xeq.c     **** 			break;
 33866              		.loc 1 3959 3 is_stmt 1 view .LVU9143
 33867              	.LBB4327:
3967:src/xeq.c     **** #endif
 33868              		.loc 1 3967 4 view .LVU9144
 33869              	.LVL2629:
3970:src/xeq.c     **** 				if (eex_pi) {
 33870              		.loc 1 3970 4 view .LVU9145
3970:src/xeq.c     **** 				if (eex_pi) {
 33871              		.loc 1 3970 7 is_stmt 0 view .LVU9146
 33872 0b60 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 33873 0b62 022B     		cmp	r3, #2
 33874 0b64 3FF4FAAD 		beq	.L2239
3985:src/xeq.c     **** 				break;
 33875              		.loc 1 3985 4 is_stmt 1 view .LVU9147
 33876              	.LBE4327:
3959:src/xeq.c     **** 			break;
 33877              		.loc 1 3959 7 is_stmt 0 view .LVU9148
 33878 0b68 3B68     		ldr	r3, [r7]
 33879              	.LBB4330:
3985:src/xeq.c     **** 				break;
 33880              		.loc 1 3985 7 view .LVU9149
 33881 0b6a 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 33882              	.LBE4330:
3959:src/xeq.c     **** 			break;
 33883              		.loc 1 3959 7 view .LVU9150
 33884 0b6c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 33885 0b70 03F00103 		and	r3, r3, #1
ARM GAS  /tmp/cccVhVyH.s 			page 854


 33886              	.LBB4331:
3985:src/xeq.c     **** 				break;
 33887              		.loc 1 3985 7 view .LVU9151
 33888 0b74 1343     		orrs	r3, r3, r2
 33889 0b76 7FF4F1AD 		bne	.L2239
3985:src/xeq.c     **** 				break;
 33890              		.loc 1 3985 22 view .LVU9152
 33891 0b7a 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3985:src/xeq.c     **** 				break;
 33892              		.loc 1 3985 19 view .LVU9153
 33893 0b7c 122B     		cmp	r3, #18
 33894 0b7e 3FF6EDAD 		bhi	.L2239
3987:src/xeq.c     **** 				// empty command line: enter pi
 33895              		.loc 1 3987 4 is_stmt 1 view .LVU9154
3998:src/xeq.c     **** 				digit(1);
 33896              		.loc 1 3998 4 view .LVU9155
3998:src/xeq.c     **** 				digit(1);
 33897              		.loc 1 3998 7 is_stmt 0 view .LVU9156
 33898 0b82 002B     		cmp	r3, #0
 33899 0b84 00F09C81 		beq	.L2578
 33900              	.L2295:
4000:src/xeq.c     **** 			append_cmdline('E');
 33901              		.loc 1 4000 4 is_stmt 1 view .LVU9157
4000:src/xeq.c     **** 			append_cmdline('E');
 33902              		.loc 1 4000 17 is_stmt 0 view .LVU9158
 33903 0b88 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
4000:src/xeq.c     **** 			append_cmdline('E');
 33904              		.loc 1 4000 15 view .LVU9159
 33905 0b8a 6377     		strb	r3, [r4, #29]
4001:src/xeq.c     **** 		}
 33906              		.loc 1 4001 4 is_stmt 1 view .LVU9160
 33907              	.LVL2630:
 33908              	.LBB4328:
 33909              	.LBI4328:
2648:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 33910              		.loc 1 2648 13 view .LVU9161
 33911              	.LBB4329:
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33912              		.loc 1 2649 2 view .LVU9162
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33913              		.loc 1 2649 23 is_stmt 0 view .LVU9163
 33914 0b8c 5A1C     		adds	r2, r3, #1
 33915 0b8e D2B2     		uxtb	r2, r2
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33916              		.loc 1 2649 27 view .LVU9164
 33917 0b90 2344     		add	r3, r3, r4
2650:src/xeq.c     **** }
 33918              		.loc 1 2650 25 view .LVU9165
 33919 0b92 A118     		adds	r1, r4, r2
 33920 0b94 DFF870B0 		ldr	fp, .L2592+16
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33921              		.loc 1 2649 23 view .LVU9166
 33922 0b98 2277     		strb	r2, [r4, #28]
2649:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33923              		.loc 1 2649 27 view .LVU9167
 33924 0b9a 4522     		movs	r2, #69
 33925 0b9c 83F82020 		strb	r2, [r3, #32]
ARM GAS  /tmp/cccVhVyH.s 			page 855


2650:src/xeq.c     **** }
 33926              		.loc 1 2650 2 is_stmt 1 view .LVU9168
2650:src/xeq.c     **** }
 33927              		.loc 1 2650 25 is_stmt 0 view .LVU9169
 33928 0ba0 0023     		movs	r3, #0
 33929 0ba2 81F82030 		strb	r3, [r1, #32]
 33930 0ba6 DBF80030 		ldr	r3, [fp]
2651:src/xeq.c     **** 
 33931              		.loc 1 2651 1 view .LVU9170
 33932 0baa FFF714BB 		b	.L2242
 33933              	.LVL2631:
 33934              	.L2351:
2651:src/xeq.c     **** 
 33935              		.loc 1 2651 1 view .LVU9171
 33936              	.LBE4329:
 33937              	.LBE4328:
 33938              	.LBE4331:
 33939              	.LBE4361:
 33940              	.LBE4682:
 33941              	.LBB4683:
 33942              	.LBB4541:
4863:src/xeq.c     **** 		}
 33943              		.loc 1 4863 5 is_stmt 1 view .LVU9172
 33944              	.LBB4524:
 33945              	.LBI4524:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 33946              		.loc 1 575 6 view .LVU9173
 33947              	.LBE4524:
 33948              	.LBE4541:
 33949              	.LBE4683:
 576:src/xeq.c     **** }
 33950              		.loc 1 576 2 view .LVU9174
 33951              	.LBB4684:
 33952              	.LBB4542:
 33953              	.LBB4527:
 33954              	.LBB4525:
 33955              	.LBI4525:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33956              		.loc 1 546 5 view .LVU9175
 33957              	.LBB4526:
 547:src/xeq.c     **** 		Error = e;
 33958              		.loc 1 547 2 view .LVU9176
 547:src/xeq.c     **** 		Error = e;
 33959              		.loc 1 547 12 is_stmt 0 view .LVU9177
 33960 0bae DFF858B0 		ldr	fp, .L2592+16
 33961 0bb2 DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 33962              		.loc 1 547 5 view .LVU9178
 33963 0bb6 0028     		cmp	r0, #0
 33964 0bb8 7FF4BDAD 		bne	.L2524
 33965              	.LVL2632:
 547:src/xeq.c     **** 		Error = e;
 33966              		.loc 1 547 5 view .LVU9179
 33967              	.LBE4526:
 33968              	.LBE4525:
 33969              	.LBE4527:
 33970              	.LBE4542:
ARM GAS  /tmp/cccVhVyH.s 			page 856


 33971              	.LBE4684:
 33972              	.LBB4685:
 33973              	.LBB4362:
 33974              	.LBB4332:
 33975              	.LBB4333:
 33976              	.LBB4334:
 33977              	.LBB4335:
 33978              	.LBI4335:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33979              		.loc 1 546 5 is_stmt 1 view .LVU9180
 33980              	.LBB4336:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33981              		.loc 1 548 3 view .LVU9181
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33982              		.loc 1 548 9 is_stmt 0 view .LVU9182
 33983 0bbc 0D20     		movs	r0, #13
 33984 0bbe DFF84C90 		ldr	r9, .L2592+20
 33985 0bc2 CBF80000 		str	r0, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33986              		.loc 1 549 3 is_stmt 1 view .LVU9183
 33987 0bc6 FFF75BBB 		b	.L2378
 33988              	.LVL2633:
 33989              	.L2361:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33990              		.loc 1 549 3 is_stmt 0 view .LVU9184
 33991              	.LBE4336:
 33992              	.LBE4335:
 33993              	.LBE4334:
 33994              	.LBE4333:
 33995              	.LBE4332:
 33996              	.LBE4362:
 33997              	.LBE4685:
 33998              	.LBB4686:
 33999              	.LBB4493:
4815:src/xeq.c     **** 	} else
 34000              		.loc 1 4815 4 is_stmt 1 view .LVU9185
 34001              	.LBB4482:
 34002              	.LBI4482:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 34003              		.loc 1 575 6 view .LVU9186
 34004              	.LBE4482:
 34005              	.LBE4493:
 34006              	.LBE4686:
 576:src/xeq.c     **** }
 34007              		.loc 1 576 2 view .LVU9187
 34008              	.LBB4687:
 34009              	.LBB4494:
 34010              	.LBB4487:
 34011              	.LBB4483:
 34012              	.LBI4483:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 34013              		.loc 1 546 5 view .LVU9188
 34014              	.LBB4484:
 547:src/xeq.c     **** 		Error = e;
 34015              		.loc 1 547 2 view .LVU9189
 547:src/xeq.c     **** 		Error = e;
 34016              		.loc 1 547 12 is_stmt 0 view .LVU9190
ARM GAS  /tmp/cccVhVyH.s 			page 857


 34017 0bca DFF83CB0 		ldr	fp, .L2592+16
 34018 0bce DBF80030 		ldr	r3, [fp]
 547:src/xeq.c     **** 		Error = e;
 34019              		.loc 1 547 5 view .LVU9191
 34020 0bd2 002B     		cmp	r3, #0
 34021 0bd4 7FF4CAAA 		bne	.L2253
 34022              	.LVL2634:
 34023              	.LBB4485:
 34024              	.LBI4485:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 34025              		.loc 1 546 5 is_stmt 1 view .LVU9192
 34026              	.LBB4486:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 34027              		.loc 1 548 3 view .LVU9193
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 34028              		.loc 1 548 9 is_stmt 0 view .LVU9194
 34029 0bd8 0D23     		movs	r3, #13
 34030 0bda CBF80030 		str	r3, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 34031              		.loc 1 549 3 is_stmt 1 view .LVU9195
 34032              	.LVL2635:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 34033              		.loc 1 549 3 is_stmt 0 view .LVU9196
 34034              	.LBE4486:
 34035              	.LBE4485:
 34036              	.LBE4484:
 34037              	.LBE4483:
 34038              	.LBE4487:
4817:src/xeq.c     **** }
 34039              		.loc 1 4817 3 is_stmt 1 view .LVU9197
 34040              	.LBE4494:
 34041              	.LBE4687:
5386:src/xeq.c     **** 		}
 34042              		.loc 1 5386 12 view .LVU9198
5396:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 34043              		.loc 1 5396 2 view .LVU9199
 34044 0bde FFF7C5BA 		b	.L2253
 34045              	.LVL2636:
 34046              	.L2369:
5420:src/xeq.c     **** 						// Need space for double precision stack
 34047              		.loc 1 5420 34 is_stmt 0 discriminator 1 view .LVU9200
 34048 0be2 029A     		ldr	r2, [sp, #8]
 34049 0be4 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 34050 0be8 0B2A     		cmp	r2, #11
 34051 0bea 40F2A580 		bls	.L2371
5424:src/xeq.c     **** 					if (Error == ERR_NONE) {
 34052              		.loc 1 5424 6 is_stmt 1 view .LVU9201
5424:src/xeq.c     **** 					if (Error == ERR_NONE) {
 34053              		.loc 1 5424 20 is_stmt 0 view .LVU9202
 34054 0bee 6AF3C711 		bfi	r1, r10, #7, #1
 34055 0bf2 5970     		strb	r1, [r3, #1]
5425:src/xeq.c     **** 						UState.mode_double = 1;
 34056              		.loc 1 5425 6 is_stmt 1 view .LVU9203
 34057 0bf4 D4E5     		b	.L2370
 34058              	.L2593:
 34059 0bf6 00BF     		.align	2
 34060              	.L2592:
ARM GAS  /tmp/cccVhVyH.s 			page 858


 34061 0bf8 00000000 		.word	dyfuncs
 34062 0bfc 00000000 		.word	XromUserPc
 34063 0c00 00000000 		.word	const_0
 34064 0c04 00000000 		.word	const_1
 34065 0c08 00000000 		.word	Error
 34066 0c0c 00000000 		.word	Running
 34067              	.LVL2637:
 34068              	.L2340:
 34069              	.LBB4688:
 34070              	.LBB4416:
4772:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 34071              		.loc 1 4772 4 view .LVU9204
4772:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 34072              		.loc 1 4772 10 is_stmt 0 view .LVU9205
 34073 0c10 AD4B     		ldr	r3, .L2594
 34074 0c12 02EB4202 		add	r2, r2, r2, lsl #1
 34075              	.LVL2638:
4772:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 34076              		.loc 1 4772 10 view .LVU9206
 34077 0c16 53F83290 		ldr	r9, [r3, r2, lsl #3]
4772:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 34078              		.loc 1 4772 7 view .LVU9207
 34079 0c1a B9F1000F 		cmp	r9, #0
 34080 0c1e C6D0     		beq	.L2351
 34081              	.LBB4396:
4773:src/xeq.c     **** 				if (dispatch_xrom(fp))
 34082              		.loc 1 4773 5 is_stmt 1 view .LVU9208
 34083              	.LVL2639:
4774:src/xeq.c     **** 					return;
 34084              		.loc 1 4774 5 view .LVU9209
4774:src/xeq.c     **** 					return;
 34085              		.loc 1 4774 9 is_stmt 0 view .LVU9210
 34086 0c20 4846     		mov	r0, r9
 34087 0c22 FFF7FEFF 		bl	dispatch_xrom
 34088              	.LVL2640:
4774:src/xeq.c     **** 					return;
 34089              		.loc 1 4774 8 view .LVU9211
 34090 0c26 0028     		cmp	r0, #0
 34091 0c28 7FF498AD 		bne	.L2239
 34092              	.LBB4397:
4777:src/xeq.c     **** 					getXY(&x, &y);
 34093              		.loc 1 4777 6 is_stmt 1 view .LVU9212
4778:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
 34094              		.loc 1 4778 6 view .LVU9213
 34095              	.LVL2641:
 34096              	.LBB4398:
 34097              	.LBI4398:
 854:src/xeq.c     **** 	getX(x);
 34098              		.loc 1 854 6 view .LVU9214
 34099              	.LBE4398:
 34100              	.LBE4397:
 34101              	.LBE4396:
 34102              	.LBE4416:
 34103              	.LBE4688:
 855:src/xeq.c     **** 	getY(y);
 34104              		.loc 1 855 2 view .LVU9215
 34105              	.LBB4689:
ARM GAS  /tmp/cccVhVyH.s 			page 859


 34106              	.LBB4417:
 34107              	.LBB4410:
 34108              	.LBB4407:
 34109              	.LBB4403:
 34110              	.LBB4399:
 34111              	.LBI4399:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 34112              		.loc 1 824 12 view .LVU9216
 34113              	.LBB4400:
 825:src/xeq.c     **** }
 34114              		.loc 1 825 2 view .LVU9217
 825:src/xeq.c     **** }
 34115              		.loc 1 825 9 is_stmt 0 view .LVU9218
 34116 0c2c 6421     		movs	r1, #100
 34117 0c2e 29A8     		add	r0, sp, #164
 34118              	.LVL2642:
 825:src/xeq.c     **** }
 34119              		.loc 1 825 9 view .LVU9219
 34120 0c30 FFF7FEFF 		bl	getRegister
 34121              	.LVL2643:
 825:src/xeq.c     **** }
 34122              		.loc 1 825 9 view .LVU9220
 34123              	.LBE4400:
 34124              	.LBE4399:
 34125              	.LBE4403:
 34126              	.LBE4407:
 34127              	.LBE4410:
 34128              	.LBE4417:
 34129              	.LBE4689:
 856:src/xeq.c     **** }
 34130              		.loc 1 856 2 is_stmt 1 view .LVU9221
 34131              	.LBB4690:
 34132              	.LBB4418:
 34133              	.LBB4411:
 34134              	.LBB4408:
 34135              	.LBB4404:
 34136              	.LBB4401:
 34137              	.LBI4401:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 34138              		.loc 1 832 6 view .LVU9222
 34139              	.LBB4402:
 833:src/xeq.c     **** }
 34140              		.loc 1 833 2 view .LVU9223
 34141 0c34 6521     		movs	r1, #101
 34142 0c36 32A8     		add	r0, sp, #200
 34143              	.LVL2644:
 833:src/xeq.c     **** }
 34144              		.loc 1 833 2 is_stmt 0 view .LVU9224
 34145 0c38 FFF7FEFF 		bl	getRegister
 34146              	.LVL2645:
 833:src/xeq.c     **** }
 34147              		.loc 1 833 2 view .LVU9225
 34148              	.LBE4402:
 34149              	.LBE4401:
 34150              	.LBE4404:
4779:src/xeq.c     **** 						set_NaN(&r);
 34151              		.loc 1 4779 6 is_stmt 1 view .LVU9226
ARM GAS  /tmp/cccVhVyH.s 			page 860


4779:src/xeq.c     **** 						set_NaN(&r);
 34152              		.loc 1 4779 18 is_stmt 0 view .LVU9227
 34153 0c3c 29AA     		add	r2, sp, #164
 34154 0c3e 32A9     		add	r1, sp, #200
 34155 0c40 5046     		mov	r0, r10
 34156 0c42 C847     		blx	r9
 34157              	.LVL2646:
4779:src/xeq.c     **** 						set_NaN(&r);
 34158              		.loc 1 4779 9 view .LVU9228
 34159 0c44 0028     		cmp	r0, #0
 34160 0c46 00F0FA80 		beq	.L2579
 34161              	.L2345:
4781:src/xeq.c     **** 					lower();
 34162              		.loc 1 4781 6 is_stmt 1 view .LVU9229
 34163              	.LBB4405:
 34164              	.LBI4405:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 34165              		.loc 1 792 6 view .LVU9230
 34166              	.LBB4406:
 793:src/xeq.c     **** }
 34167              		.loc 1 793 2 view .LVU9231
 34168 0c4a 6421     		movs	r1, #100
 34169 0c4c 6C20     		movs	r0, #108
 34170 0c4e DFF890B2 		ldr	fp, .L2594+24
 34171 0c52 FFF7FEFF 		bl	copyreg_n
 34172              	.LVL2647:
 34173              	.LBE4406:
 34174              	.LBE4405:
4782:src/xeq.c     **** 					setX(&r);
 34175              		.loc 1 4782 6 view .LVU9232
 34176              	.L2536:
4782:src/xeq.c     **** 					setX(&r);
 34177              		.loc 1 4782 6 is_stmt 0 view .LVU9233
 34178              	.LBE4408:
 34179              	.LBE4411:
 34180              	.LBE4418:
 34181              	.LBE4690:
 34182              	.LBB4691:
 34183              	.LBB4543:
 34184              	.LBB4528:
 34185              	.LBB4529:
4859:src/xeq.c     **** 					setX(&r);
 34186              		.loc 1 4859 6 is_stmt 1 view .LVU9234
 34187 0c56 FFF7FEFF 		bl	lower
 34188              	.LVL2648:
4860:src/xeq.c     **** 				}
 34189              		.loc 1 4860 6 view .LVU9235
 34190              	.LBB4530:
 34191              	.LBI4530:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 34192              		.loc 1 828 6 view .LVU9236
 34193              	.LBB4531:
 829:src/xeq.c     **** }
 34194              		.loc 1 829 2 view .LVU9237
 34195 0c5a 5146     		mov	r1, r10
 34196 0c5c 6420     		movs	r0, #100
 34197 0c5e FFF7FEFF 		bl	setRegister
ARM GAS  /tmp/cccVhVyH.s 			page 861


 34198              	.LVL2649:
 829:src/xeq.c     **** }
 34199              		.loc 1 829 2 is_stmt 0 view .LVU9238
 34200 0c62 DBF80030 		ldr	r3, [fp]
 34201              	.LBE4531:
 34202              	.LBE4530:
 34203              	.LBE4529:
 34204              	.LBE4528:
 34205 0c66 FFF7B6BA 		b	.L2242
 34206              	.LVL2650:
 34207              	.L2348:
4848:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 34208              		.loc 1 4848 4 is_stmt 1 view .LVU9239
4848:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 34209              		.loc 1 4848 10 is_stmt 0 view .LVU9240
 34210 0c6a 984B     		ldr	r3, .L2594+4
 34211 0c6c 02EB8202 		add	r2, r2, r2, lsl #2
 34212              	.LVL2651:
4848:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 34213              		.loc 1 4848 10 view .LVU9241
 34214 0c70 53F82290 		ldr	r9, [r3, r2, lsl #2]
4848:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 34215              		.loc 1 4848 7 view .LVU9242
 34216 0c74 B9F1000F 		cmp	r9, #0
 34217 0c78 99D0     		beq	.L2351
 34218              	.LBB4536:
4849:src/xeq.c     **** 				if (dispatch_xrom(fp))
 34219              		.loc 1 4849 5 is_stmt 1 view .LVU9243
 34220              	.LVL2652:
4850:src/xeq.c     **** 					return;
 34221              		.loc 1 4850 5 view .LVU9244
4850:src/xeq.c     **** 					return;
 34222              		.loc 1 4850 9 is_stmt 0 view .LVU9245
 34223 0c7a 4846     		mov	r0, r9
 34224 0c7c FFF7FEFF 		bl	dispatch_xrom
 34225              	.LVL2653:
4850:src/xeq.c     **** 					return;
 34226              		.loc 1 4850 8 view .LVU9246
 34227 0c80 0028     		cmp	r0, #0
 34228 0c82 7FF46BAD 		bne	.L2239
 34229              	.LBB4534:
4853:src/xeq.c     **** 					getXYZ(&x, &y, &z);
 34230              		.loc 1 4853 6 is_stmt 1 view .LVU9247
4854:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 34231              		.loc 1 4854 6 view .LVU9248
 34232 0c86 32AA     		add	r2, sp, #200
 34233 0c88 29A9     		add	r1, sp, #164
 34234 0c8a 20A8     		add	r0, sp, #128
 34235 0c8c FFF7FEFF 		bl	getXYZ
 34236              	.LVL2654:
4855:src/xeq.c     **** 						set_NaN(&r);
 34237              		.loc 1 4855 6 view .LVU9249
4855:src/xeq.c     **** 						set_NaN(&r);
 34238              		.loc 1 4855 18 is_stmt 0 view .LVU9250
 34239 0c90 20AB     		add	r3, sp, #128
 34240 0c92 29AA     		add	r2, sp, #164
 34241 0c94 32A9     		add	r1, sp, #200
ARM GAS  /tmp/cccVhVyH.s 			page 862


 34242 0c96 5046     		mov	r0, r10
 34243 0c98 C847     		blx	r9
 34244              	.LVL2655:
4855:src/xeq.c     **** 						set_NaN(&r);
 34245              		.loc 1 4855 9 view .LVU9251
 34246 0c9a 0028     		cmp	r0, #0
 34247 0c9c 00F0DC80 		beq	.L2580
 34248              	.L2353:
4857:src/xeq.c     **** 					lower();
 34249              		.loc 1 4857 6 is_stmt 1 view .LVU9252
 34250              	.LBB4532:
 34251              	.LBI4532:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 34252              		.loc 1 792 6 view .LVU9253
 34253              	.LBB4533:
 793:src/xeq.c     **** }
 34254              		.loc 1 793 2 view .LVU9254
 34255 0ca0 6421     		movs	r1, #100
 34256 0ca2 6C20     		movs	r0, #108
 34257 0ca4 DFF838B2 		ldr	fp, .L2594+24
 34258 0ca8 FFF7FEFF 		bl	copyreg_n
 34259              	.LVL2656:
 34260              	.LBE4533:
 34261              	.LBE4532:
4858:src/xeq.c     **** 					lower();
 34262              		.loc 1 4858 6 view .LVU9255
 34263 0cac FFF7FEFF 		bl	lower
 34264              	.LVL2657:
 34265 0cb0 D1E7     		b	.L2536
 34266              	.LVL2658:
 34267              	.L2519:
4858:src/xeq.c     **** 					lower();
 34268              		.loc 1 4858 6 is_stmt 0 view .LVU9256
 34269              	.LBE4534:
 34270              	.LBE4536:
 34271              	.LBE4543:
 34272              	.LBE4691:
 34273              	.LBB4692:
 34274              	.LBB4660:
4639:src/xeq.c     **** 			bad_mode_error();
 34275              		.loc 1 4639 23 view .LVU9257
 34276 0cb2 02EB0911 		add	r1, r2, r9, lsl #4
 34277 0cb6 4FEA091A 		lsl	r10, r9, #4
4639:src/xeq.c     **** 			bad_mode_error();
 34278              		.loc 1 4639 20 view .LVU9258
 34279 0cba 91F90410 		ldrsb	r1, [r1, #4]
 34280 0cbe 0029     		cmp	r1, #0
 34281 0cc0 BFF6CAAC 		bge	.L2318
4640:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
 34282              		.loc 1 4640 4 is_stmt 1 view .LVU9259
 34283              	.LBB4651:
 34284              	.LBI4651:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 34285              		.loc 1 575 6 view .LVU9260
 34286              	.LBE4651:
 34287              	.LBE4660:
 34288              	.LBE4692:
ARM GAS  /tmp/cccVhVyH.s 			page 863


 576:src/xeq.c     **** }
 34289              		.loc 1 576 2 view .LVU9261
 34290              	.LVL2659:
 34291              	.LBB4693:
 34292              	.LBB4661:
 34293              	.LBB4656:
 34294              	.LBB4652:
 34295              	.LBI4652:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 34296              		.loc 1 546 5 view .LVU9262
 34297              	.LBB4653:
 547:src/xeq.c     **** 		Error = e;
 34298              		.loc 1 547 2 view .LVU9263
 547:src/xeq.c     **** 		Error = e;
 34299              		.loc 1 547 12 is_stmt 0 view .LVU9264
 34300 0cc4 DFF818B2 		ldr	fp, .L2594+24
 547:src/xeq.c     **** 		Error = e;
 34301              		.loc 1 547 5 view .LVU9265
 34302 0cc8 DBF80020 		ldr	r2, [fp]
 34303 0ccc 002A     		cmp	r2, #0
 34304 0cce 7FF4E1AC 		bne	.L2319
 34305              	.LVL2660:
 34306              	.LBB4654:
 34307              	.LBI4654:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 34308              		.loc 1 546 5 is_stmt 1 view .LVU9266
 34309              	.LBB4655:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 34310              		.loc 1 548 3 view .LVU9267
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 34311              		.loc 1 548 9 is_stmt 0 view .LVU9268
 34312 0cd2 0D22     		movs	r2, #13
 34313 0cd4 CBF80020 		str	r2, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 34314              		.loc 1 549 3 is_stmt 1 view .LVU9269
 34315 0cd8 DCE4     		b	.L2319
 34316              	.LVL2661:
 34317              	.L2332:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 34318              		.loc 1 549 3 is_stmt 0 view .LVU9270
 34319              	.LBE4655:
 34320              	.LBE4654:
 34321              	.LBE4653:
 34322              	.LBE4652:
 34323              	.LBE4656:
 34324              	.LBE4661:
 34325              	.LBE4693:
 34326              	.LBB4694:
 34327              	.LBB4622:
4696:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 34328              		.loc 1 4696 4 is_stmt 1 view .LVU9271
4696:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 34329              		.loc 1 4696 10 is_stmt 0 view .LVU9272
 34330 0cda 7D4B     		ldr	r3, .L2594+8
 34331 0cdc 02EB4202 		add	r2, r2, r2, lsl #1
 34332              	.LVL2662:
4696:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
ARM GAS  /tmp/cccVhVyH.s 			page 864


 34333              		.loc 1 4696 10 view .LVU9273
 34334 0ce0 53F83290 		ldr	r9, [r3, r2, lsl #3]
4696:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 34335              		.loc 1 4696 7 view .LVU9274
 34336 0ce4 B9F1000F 		cmp	r9, #0
 34337 0ce8 3FF461AF 		beq	.L2351
 34338              	.LBB4609:
4697:src/xeq.c     **** 				if (dispatch_xrom(fp))
 34339              		.loc 1 4697 5 is_stmt 1 view .LVU9275
 34340              	.LVL2663:
4698:src/xeq.c     **** 					return;
 34341              		.loc 1 4698 5 view .LVU9276
4698:src/xeq.c     **** 					return;
 34342              		.loc 1 4698 9 is_stmt 0 view .LVU9277
 34343 0cec 4846     		mov	r0, r9
 34344 0cee FFF7FEFF 		bl	dispatch_xrom
 34345              	.LVL2664:
4698:src/xeq.c     **** 					return;
 34346              		.loc 1 4698 8 view .LVU9278
 34347 0cf2 0028     		cmp	r0, #0
 34348 0cf4 7FF432AD 		bne	.L2239
 34349              	.LBB4610:
4701:src/xeq.c     **** 					getX(&x);
 34350              		.loc 1 4701 6 is_stmt 1 view .LVU9279
4702:src/xeq.c     **** 					if (NULL == fp(&r, &x))
 34351              		.loc 1 4702 6 view .LVU9280
 34352              	.LVL2665:
 34353              	.LBB4611:
 34354              	.LBI4611:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 34355              		.loc 1 824 12 view .LVU9281
 34356              	.LBB4612:
 825:src/xeq.c     **** }
 34357              		.loc 1 825 2 view .LVU9282
 825:src/xeq.c     **** }
 34358              		.loc 1 825 9 is_stmt 0 view .LVU9283
 34359 0cf8 6421     		movs	r1, #100
 34360 0cfa 32A8     		add	r0, sp, #200
 34361              	.LVL2666:
 825:src/xeq.c     **** }
 34362              		.loc 1 825 9 view .LVU9284
 34363 0cfc FFF7FEFF 		bl	getRegister
 34364              	.LVL2667:
 825:src/xeq.c     **** }
 34365              		.loc 1 825 9 view .LVU9285
 34366              	.LBE4612:
 34367              	.LBE4611:
4703:src/xeq.c     **** 						set_NaN(&r);
 34368              		.loc 1 4703 6 is_stmt 1 view .LVU9286
4703:src/xeq.c     **** 						set_NaN(&r);
 34369              		.loc 1 4703 18 is_stmt 0 view .LVU9287
 34370 0d00 32A9     		add	r1, sp, #200
 34371 0d02 5046     		mov	r0, r10
 34372 0d04 C847     		blx	r9
 34373              	.LVL2668:
4703:src/xeq.c     **** 						set_NaN(&r);
 34374              		.loc 1 4703 9 view .LVU9288
ARM GAS  /tmp/cccVhVyH.s 			page 865


 34375 0d06 0028     		cmp	r0, #0
 34376 0d08 00F0AA80 		beq	.L2581
 34377              	.L2337:
4705:src/xeq.c     **** 					setX(&r);
 34378              		.loc 1 4705 6 is_stmt 1 view .LVU9289
 34379              	.LBB4613:
 34380              	.LBI4613:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 34381              		.loc 1 792 6 view .LVU9290
 34382              	.LBB4614:
 793:src/xeq.c     **** }
 34383              		.loc 1 793 2 view .LVU9291
 34384 0d0c 6421     		movs	r1, #100
 34385 0d0e 6C20     		movs	r0, #108
 34386 0d10 DFF8CCB1 		ldr	fp, .L2594+24
 34387 0d14 FFF7FEFF 		bl	copyreg_n
 34388              	.LVL2669:
 34389              	.LBE4614:
 34390              	.LBE4613:
4706:src/xeq.c     **** 				}
 34391              		.loc 1 4706 6 view .LVU9292
 34392              	.LBB4615:
 34393              	.LBI4615:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 34394              		.loc 1 828 6 view .LVU9293
 34395              	.LBB4616:
 829:src/xeq.c     **** }
 34396              		.loc 1 829 2 view .LVU9294
 34397 0d18 5146     		mov	r1, r10
 34398 0d1a 6420     		movs	r0, #100
 34399 0d1c FFF7FEFF 		bl	setRegister
 34400              	.LVL2670:
 829:src/xeq.c     **** }
 34401              		.loc 1 829 2 is_stmt 0 view .LVU9295
 34402 0d20 DBF80030 		ldr	r3, [fp]
 34403              	.LBE4616:
 34404              	.LBE4615:
 34405              	.LBE4610:
 34406              	.LBE4609:
 34407 0d24 FFF757BA 		b	.L2242
 34408              	.LVL2671:
 34409              	.L2569:
 829:src/xeq.c     **** }
 34410              		.loc 1 829 2 view .LVU9296
 34411 0d28 DFF8B4B1 		ldr	fp, .L2594+24
 34412 0d2c B2E4     		b	.L2319
 34413              	.L2571:
 34414              	.LBE4622:
 34415              	.LBE4694:
 34416              	.LBB4695:
 34417              	.LBB4662:
4658:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 34418              		.loc 1 4658 24 view .LVU9297
 34419 0d2e B9F13F0F 		cmp	r9, #63
 34420 0d32 3FF415AD 		beq	.L2531
 34421 0d36 CAE5     		b	.L2535
 34422              	.LVL2672:
ARM GAS  /tmp/cccVhVyH.s 			page 866


 34423              	.L2371:
4658:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 34424              		.loc 1 4658 24 view .LVU9298
 34425              	.LBE4662:
 34426              	.LBE4695:
5422:src/xeq.c     **** 					}
 34427              		.loc 1 5422 7 is_stmt 1 view .LVU9299
 34428 0d38 7D21     		movs	r1, #125
 34429 0d3a 0C20     		movs	r0, #12
 34430 0d3c FFF7FEFF 		bl	cmdregs
 34431              	.LVL2673:
5424:src/xeq.c     **** 					if (Error == ERR_NONE) {
 34432              		.loc 1 5424 20 is_stmt 0 view .LVU9300
 34433 0d40 644B     		ldr	r3, .L2594+12
 34434 0d42 DBF80010 		ldr	r1, [fp]
5424:src/xeq.c     **** 					if (Error == ERR_NONE) {
 34435              		.loc 1 5424 6 is_stmt 1 view .LVU9301
5424:src/xeq.c     **** 					if (Error == ERR_NONE) {
 34436              		.loc 1 5424 20 is_stmt 0 view .LVU9302
 34437 0d46 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 34438 0d48 6AF3C712 		bfi	r2, r10, #7, #1
 34439 0d4c 5A70     		strb	r2, [r3, #1]
5425:src/xeq.c     **** 						UState.mode_double = 1;
 34440              		.loc 1 5425 6 is_stmt 1 view .LVU9303
5425:src/xeq.c     **** 						UState.mode_double = 1;
 34441              		.loc 1 5425 9 is_stmt 0 view .LVU9304
 34442 0d4e 0029     		cmp	r1, #0
 34443 0d50 3FF426AD 		beq	.L2370
5430:src/xeq.c     **** 				}
 34444              		.loc 1 5430 7 is_stmt 1 view .LVU9305
5430:src/xeq.c     **** 				}
 34445              		.loc 1 5430 13 is_stmt 0 view .LVU9306
 34446 0d54 CBF800A0 		str	r10, [fp]
 34447 0d58 FFF720BB 		b	.L2368
 34448              	.LVL2674:
 34449              	.L2570:
 34450              	.LBB4696:
 34451              	.LBB4663:
 34452              	.LBB4657:
 34453              	.LBB4639:
 34454              	.LBB4638:
 749:src/xeq.c     **** }
 34455              		.loc 1 749 3 is_stmt 1 view .LVU9307
 34456 0d5c FFF7FEFF 		bl	lift
 34457              	.LVL2675:
 34458              	.L2321:
 34459              	.LBE4638:
 34460              	.LBE4639:
4648:src/xeq.c     **** 				default:
 34461              		.loc 1 4648 13 view .LVU9308
 34462              	.LBB4640:
 34463              	.LBI4640:
 747:src/xeq.c     **** 	if (get_lift())
 34464              		.loc 1 747 6 view .LVU9309
 34465              	.LBB4641:
 748:src/xeq.c     **** 		lift();
 34466              		.loc 1 748 2 view .LVU9310
ARM GAS  /tmp/cccVhVyH.s 			page 867


 34467              	.LBB4642:
 34468              	.LBI4642:
 743:src/xeq.c     **** 	return State2.state_lift;
 34469              		.loc 1 743 12 view .LVU9311
 34470              	.LBB4643:
 744:src/xeq.c     **** }
 34471              		.loc 1 744 2 view .LVU9312
 744:src/xeq.c     **** }
 34472              		.loc 1 744 15 is_stmt 0 view .LVU9313
 34473 0d60 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 34474              	.LBE4643:
 34475              	.LBE4642:
 748:src/xeq.c     **** 		lift();
 34476              		.loc 1 748 5 view .LVU9314
 34477 0d62 5906     		lsls	r1, r3, #25
 34478 0d64 7FF591AC 		bpl	.L2322
 749:src/xeq.c     **** }
 34479              		.loc 1 749 3 is_stmt 1 view .LVU9315
 34480 0d68 FFF7FEFF 		bl	lift
 34481              	.LVL2676:
 34482 0d6c 8DE4     		b	.L2322
 34483              	.LVL2677:
 34484              	.L2301:
 749:src/xeq.c     **** }
 34485              		.loc 1 749 3 is_stmt 0 view .LVU9316
 34486              	.LBE4641:
 34487              	.LBE4640:
 34488              	.LBE4657:
 34489              	.LBE4663:
 34490              	.LBE4696:
 34491              	.LBB4697:
 34492              	.LBB4363:
4024:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 34493              		.loc 1 4024 8 is_stmt 1 view .LVU9317
4024:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 34494              		.loc 1 4024 12 is_stmt 0 view .LVU9318
 34495 0d6e 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
4024:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 34496              		.loc 1 4024 11 view .LVU9319
 34497 0d70 002B     		cmp	r3, #0
 34498 0d72 68D0     		beq	.L2302
4026:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 34499              		.loc 1 4026 4 is_stmt 1 view .LVU9320
4026:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 34500              		.loc 1 4026 7 is_stmt 0 view .LVU9321
 34501 0d74 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
4026:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 34502              		.loc 1 4026 48 view .LVU9322
 34503 0d76 013B     		subs	r3, r3, #1
4026:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 34504              		.loc 1 4026 7 view .LVU9323
 34505 0d78 22B1     		cbz	r2, .L2303
4026:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 34506              		.loc 1 4026 34 view .LVU9324
 34507 0d7a E218     		adds	r2, r4, r3
4026:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 34508              		.loc 1 4026 24 view .LVU9325
ARM GAS  /tmp/cccVhVyH.s 			page 868


 34509 0d7c 92F82010 		ldrb	r1, [r2, #32]	@ zero_extendqisi2
 34510 0d80 4429     		cmp	r1, #68
 34511 0d82 79D0     		beq	.L2582
 34512              	.L2303:
4031:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 34513              		.loc 1 4031 4 is_stmt 1 view .LVU9326
4031:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 34514              		.loc 1 4031 17 is_stmt 0 view .LVU9327
 34515 0d84 DBB2     		uxtb	r3, r3
4032:src/xeq.c     **** 				CmdLineEex = 0;
 34516              		.loc 1 4032 15 view .LVU9328
 34517 0d86 E218     		adds	r2, r4, r3
4031:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 34518              		.loc 1 4031 17 view .LVU9329
 34519 0d88 2377     		strb	r3, [r4, #28]
4032:src/xeq.c     **** 				CmdLineEex = 0;
 34520              		.loc 1 4032 4 is_stmt 1 view .LVU9330
4032:src/xeq.c     **** 				CmdLineEex = 0;
 34521              		.loc 1 4032 15 is_stmt 0 view .LVU9331
 34522 0d8a 92F82030 		ldrb	r3, [r2, #32]	@ zero_extendqisi2
4032:src/xeq.c     **** 				CmdLineEex = 0;
 34523              		.loc 1 4032 7 view .LVU9332
 34524 0d8e 452B     		cmp	r3, #69
 34525 0d90 6AD0     		beq	.L2583
4034:src/xeq.c     **** 				CmdLineDot--;
 34526              		.loc 1 4034 9 is_stmt 1 view .LVU9333
4034:src/xeq.c     **** 				CmdLineDot--;
 34527              		.loc 1 4034 12 is_stmt 0 view .LVU9334
 34528 0d92 2E2B     		cmp	r3, #46
 34529 0d94 7FF4E2AC 		bne	.L2239
4035:src/xeq.c     **** 		} else
 34530              		.loc 1 4035 5 is_stmt 1 view .LVU9335
4035:src/xeq.c     **** 		} else
 34531              		.loc 1 4035 15 is_stmt 0 view .LVU9336
 34532 0d98 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 34533 0d9a DFF844B1 		ldr	fp, .L2594+24
 34534 0d9e 013B     		subs	r3, r3, #1
 34535 0da0 A377     		strb	r3, [r4, #30]
 34536 0da2 DBF80030 		ldr	r3, [fp]
 34537 0da6 FFF716BA 		b	.L2242
 34538              	.LVL2678:
 34539              	.L2300:
 34540              	.LBB4337:
4012:src/xeq.c     **** 
 34541              		.loc 1 4012 4 is_stmt 1 view .LVU9337
4014:src/xeq.c     **** 			dn_minus(&r, &x);
 34542              		.loc 1 4014 4 view .LVU9338
 34543              	.LBB4338:
 34544              	.LBI4338:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 34545              		.loc 1 824 12 view .LVU9339
 34546              	.LBB4339:
 825:src/xeq.c     **** }
 34547              		.loc 1 825 2 view .LVU9340
 825:src/xeq.c     **** }
 34548              		.loc 1 825 9 is_stmt 0 view .LVU9341
 34549 0daa 32A8     		add	r0, sp, #200
ARM GAS  /tmp/cccVhVyH.s 			page 869


 34550              	.LVL2679:
 825:src/xeq.c     **** }
 34551              		.loc 1 825 9 view .LVU9342
 34552 0dac 6421     		movs	r1, #100
 34553 0dae FFF7FEFF 		bl	getRegister
 34554              	.LVL2680:
 825:src/xeq.c     **** }
 34555              		.loc 1 825 9 view .LVU9343
 34556              	.LBE4339:
 34557              	.LBE4338:
4015:src/xeq.c     **** 			setX(&r);
 34558              		.loc 1 4015 4 is_stmt 1 view .LVU9344
 34559 0db2 32A9     		add	r1, sp, #200
 34560 0db4 5046     		mov	r0, r10
 34561 0db6 FFF7FEFF 		bl	dn_minus
 34562              	.LVL2681:
4016:src/xeq.c     **** 			set_lift();
 34563              		.loc 1 4016 4 view .LVU9345
 34564              	.LBB4340:
 34565              	.LBI4340:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 34566              		.loc 1 828 6 view .LVU9346
 34567              	.LBB4341:
 829:src/xeq.c     **** }
 34568              		.loc 1 829 2 view .LVU9347
 34569 0dba 5146     		mov	r1, r10
 34570 0dbc 6420     		movs	r0, #100
 34571 0dbe FFF7FEFF 		bl	setRegister
 34572              	.LVL2682:
 829:src/xeq.c     **** }
 34573              		.loc 1 829 2 is_stmt 0 view .LVU9348
 34574              	.LBE4341:
 34575              	.LBE4340:
4017:src/xeq.c     **** 		}
 34576              		.loc 1 4017 4 is_stmt 1 view .LVU9349
 34577              	.LBB4342:
 34578              	.LBI4342:
 767:src/xeq.c     ****     State2.state_lift = 1;
 34579              		.loc 1 767 6 view .LVU9350
 34580              	.LBB4343:
 768:src/xeq.c     **** }
 34581              		.loc 1 768 5 view .LVU9351
 34582 0dc2 FFF700BA 		b	.L2530
 34583              	.L2577:
 34584              	.LBE4343:
 34585              	.LBE4342:
 34586              	.LBE4337:
4007:src/xeq.c     **** 		else if (is_intmode()) {
 34587              		.loc 1 4007 4 view .LVU9352
 34588              	.LBB4344:
 34589              	.LBI4344:
3248:src/xeq.c     **** 	if (CmdLineEex) {
 34590              		.loc 1 3248 13 view .LVU9353
 34591              	.LBB4345:
3249:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 34592              		.loc 1 3249 2 view .LVU9354
3249:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/cccVhVyH.s 			page 870


 34593              		.loc 1 3249 6 is_stmt 0 view .LVU9355
 34594 0dc6 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3249:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 34595              		.loc 1 3249 5 view .LVU9356
 34596 0dc8 13B3     		cbz	r3, .L2297
3253:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
 34597              		.loc 1 3253 3 is_stmt 1 view .LVU9357
3254:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 34598              		.loc 1 3254 4 view .LVU9358
3254:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 34599              		.loc 1 3254 24 is_stmt 0 view .LVU9359
 34600 0dca 2344     		add	r3, r3, r4
 34601 0dcc DFF810B1 		ldr	fp, .L2594+24
 34602 0dd0 93F82020 		ldrb	r2, [r3, #32]	@ zero_extendqisi2
 34603 0dd4 82F00102 		eor	r2, r2, #1
 34604 0dd8 83F82020 		strb	r2, [r3, #32]
 34605 0ddc DBF80030 		ldr	r3, [fp]
 34606 0de0 FFF7F9B9 		b	.L2242
 34607              	.L2517:
 34608              	.LBE4345:
 34609              	.LBE4344:
4042:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 34610              		.loc 1 4042 31 view .LVU9360
 34611 0de4 DFF8FCA0 		ldr	r10, .L2594+28
4042:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 34612              		.loc 1 4042 43 view .LVU9361
 34613 0de8 DFF8FC90 		ldr	r9, .L2594+32
 34614              	.LVL2683:
4042:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 34615              		.loc 1 4042 29 view .LVU9362
 34616 0dec DAF80020 		ldr	r2, [r10]
 34617 0df0 D9F80030 		ldr	r3, [r9]
 34618 0df4 1343     		orrs	r3, r2, r3
 34619 0df6 5BD0     		beq	.L2584
4046:src/xeq.c     **** 		      lift();
 34620              		.loc 1 4046 9 is_stmt 1 view .LVU9363
 34621              	.LBB4348:
 34622              	.LBI4348:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 34623              		.loc 1 1229 6 view .LVU9364
 34624              	.LBB4349:
1230:src/xeq.c     **** 
 34625              		.loc 1 1230 2 view .LVU9365
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34626              		.loc 1 1232 2 view .LVU9366
 34627 0df8 FFF7FEFF 		bl	process_cmdline.part.0
 34628              	.LVL2684:
 34629 0dfc A5E4     		b	.L2307
 34630              	.LVL2685:
 34631              	.L2576:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34632              		.loc 1 1232 2 is_stmt 0 view .LVU9367
 34633              	.LBE4349:
 34634              	.LBE4348:
 34635              	.LBB4350:
 34636              	.LBB4314:
 34637 0dfe FFF7FEFF 		bl	process_cmdline.part.0
ARM GAS  /tmp/cccVhVyH.s 			page 871


 34638              	.LVL2686:
 34639 0e02 5BE6     		b	.L2310
 34640              	.L2574:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34641              		.loc 1 1232 2 view .LVU9368
 34642              	.LBE4314:
 34643              	.LBE4350:
4070:src/xeq.c     **** 		else
 34644              		.loc 1 4070 4 is_stmt 1 view .LVU9369
 34645 0e04 FFF7FEFF 		bl	sigma_plus
 34646              	.LVL2687:
 34647 0e08 1BE6     		b	.L2315
 34648              	.L2573:
 34649              	.LBB4351:
 34650              	.LBB4297:
4070:src/xeq.c     **** 		else
 34651              		.loc 1 4070 4 is_stmt 0 view .LVU9370
 34652 0e0a FFF7FEFF 		bl	process_cmdline.part.0
 34653              	.LVL2688:
 34654 0e0e 0AE6     		b	.L2313
 34655              	.L2297:
 34656              	.LBE4297:
 34657              	.LBE4351:
 34658              	.LBB4352:
 34659              	.LBB4346:
3280:src/xeq.c     **** 			if (CmdLineLength > 1)
 34660              		.loc 1 3280 3 is_stmt 1 view .LVU9371
3280:src/xeq.c     **** 			if (CmdLineLength > 1)
 34661              		.loc 1 3280 6 is_stmt 0 view .LVU9372
 34662 0e10 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 34663 0e14 2D2B     		cmp	r3, #45
 34664 0e16 38D0     		beq	.L2585
3284:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 34665              		.loc 1 3284 10 is_stmt 1 view .LVU9373
3284:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 34666              		.loc 1 3284 13 is_stmt 0 view .LVU9374
 34667 0e18 122A     		cmp	r2, #18
 34668 0e1a 3FF69FAC 		bhi	.L2239
3285:src/xeq.c     **** 			Cmdline[0] = '-';
 34669              		.loc 1 3285 4 is_stmt 1 view .LVU9375
 34670 0e1e 2E49     		ldr	r1, .L2594+16
 34671 0e20 DFF8BCB0 		ldr	fp, .L2594+24
 34672 0e24 481C     		adds	r0, r1, #1
 34673 0e26 FFF7FEFF 		bl	xcopy
 34674              	.LVL2689:
3286:src/xeq.c     **** 			CmdLineLength++;
 34675              		.loc 1 3286 4 view .LVU9376
3287:src/xeq.c     **** 		}
 34676              		.loc 1 3287 17 is_stmt 0 view .LVU9377
 34677 0e2a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 34678 0e2c DBF80030 		ldr	r3, [fp]
 34679 0e30 0132     		adds	r2, r2, #1
3286:src/xeq.c     **** 			CmdLineLength++;
 34680              		.loc 1 3286 15 view .LVU9378
 34681 0e32 2D21     		movs	r1, #45
3287:src/xeq.c     **** 		}
 34682              		.loc 1 3287 17 view .LVU9379
ARM GAS  /tmp/cccVhVyH.s 			page 872


 34683 0e34 2277     		strb	r2, [r4, #28]
3286:src/xeq.c     **** 			CmdLineLength++;
 34684              		.loc 1 3286 15 view .LVU9380
 34685 0e36 84F82010 		strb	r1, [r4, #32]
3287:src/xeq.c     **** 		}
 34686              		.loc 1 3287 4 is_stmt 1 view .LVU9381
 34687 0e3a FFF7CCB9 		b	.L2242
 34688              	.LVL2690:
 34689              	.L2579:
3287:src/xeq.c     **** 		}
 34690              		.loc 1 3287 4 is_stmt 0 view .LVU9382
 34691              	.LBE4346:
 34692              	.LBE4352:
 34693              	.LBE4363:
 34694              	.LBE4697:
 34695              	.LBB4698:
 34696              	.LBB4419:
 34697              	.LBB4412:
 34698              	.LBB4409:
4780:src/xeq.c     **** 					setlastX();
 34699              		.loc 1 4780 7 is_stmt 1 view .LVU9383
 34700 0e3e 5046     		mov	r0, r10
 34701 0e40 FFF7FEFF 		bl	set_NaN
 34702              	.LVL2691:
 34703 0e44 01E7     		b	.L2345
 34704              	.LVL2692:
 34705              	.L2302:
4780:src/xeq.c     **** 					setlastX();
 34706              		.loc 1 4780 7 is_stmt 0 view .LVU9384
 34707              	.LBE4409:
 34708              	.LBE4412:
 34709              	.LBE4419:
 34710              	.LBE4698:
 34711              	.LBB4699:
 34712              	.LBB4364:
4037:src/xeq.c     **** 		break;
 34713              		.loc 1 4037 4 is_stmt 1 view .LVU9385
 34714 0e46 DFF898B0 		ldr	fp, .L2594+24
 34715 0e4a 3F20     		movs	r0, #63
 34716 0e4c FFF7FEFF 		bl	clrx
 34717              	.LVL2693:
 34718 0e50 DBF80030 		ldr	r3, [fp]
 34719 0e54 FFF7BFB9 		b	.L2242
 34720              	.LVL2694:
 34721              	.L2580:
4037:src/xeq.c     **** 		break;
 34722              		.loc 1 4037 4 is_stmt 0 view .LVU9386
 34723              	.LBE4364:
 34724              	.LBE4699:
 34725              	.LBB4700:
 34726              	.LBB4544:
 34727              	.LBB4537:
 34728              	.LBB4535:
4856:src/xeq.c     **** 					setlastX();
 34729              		.loc 1 4856 7 is_stmt 1 view .LVU9387
 34730 0e58 5046     		mov	r0, r10
 34731 0e5a FFF7FEFF 		bl	set_NaN
ARM GAS  /tmp/cccVhVyH.s 			page 873


 34732              	.LVL2695:
 34733 0e5e 1FE7     		b	.L2353
 34734              	.LVL2696:
 34735              	.L2581:
4856:src/xeq.c     **** 					setlastX();
 34736              		.loc 1 4856 7 is_stmt 0 view .LVU9388
 34737              	.LBE4535:
 34738              	.LBE4537:
 34739              	.LBE4544:
 34740              	.LBE4700:
 34741              	.LBB4701:
 34742              	.LBB4623:
 34743              	.LBB4618:
 34744              	.LBB4617:
4704:src/xeq.c     **** 					setlastX();
 34745              		.loc 1 4704 7 is_stmt 1 view .LVU9389
 34746 0e60 5046     		mov	r0, r10
 34747 0e62 FFF7FEFF 		bl	set_NaN
 34748              	.LVL2697:
 34749 0e66 51E7     		b	.L2337
 34750              	.LVL2698:
 34751              	.L2583:
4704:src/xeq.c     **** 					setlastX();
 34752              		.loc 1 4704 7 is_stmt 0 view .LVU9390
 34753              	.LBE4617:
 34754              	.LBE4618:
 34755              	.LBE4623:
 34756              	.LBE4701:
 34757              	.LBB4702:
 34758              	.LBB4365:
4033:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 34759              		.loc 1 4033 5 is_stmt 1 view .LVU9391
 34760 0e68 DFF874B0 		ldr	fp, .L2594+24
4033:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 34761              		.loc 1 4033 16 is_stmt 0 view .LVU9392
 34762 0e6c 0022     		movs	r2, #0
 34763 0e6e DBF80030 		ldr	r3, [fp]
 34764 0e72 6277     		strb	r2, [r4, #29]
 34765 0e74 FFF7AFB9 		b	.L2242
 34766              	.L2582:
4027:src/xeq.c     **** 				break;
 34767              		.loc 1 4027 5 is_stmt 1 view .LVU9393
 34768 0e78 DFF864B0 		ldr	fp, .L2594+24
4027:src/xeq.c     **** 				break;
 34769              		.loc 1 4027 30 is_stmt 0 view .LVU9394
 34770 0e7c 4521     		movs	r1, #69
 34771 0e7e DBF80030 		ldr	r3, [fp]
 34772 0e82 82F82010 		strb	r1, [r2, #32]
4028:src/xeq.c     **** 			}
 34773              		.loc 1 4028 5 is_stmt 1 view .LVU9395
 34774 0e86 FFF7A6B9 		b	.L2242
 34775              	.LVL2699:
 34776              	.L2585:
 34777              	.LBB4353:
 34778              	.LBB4347:
3281:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 34779              		.loc 1 3281 4 view .LVU9396
ARM GAS  /tmp/cccVhVyH.s 			page 874


3281:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 34780              		.loc 1 3281 7 is_stmt 0 view .LVU9397
 34781 0e8a 012A     		cmp	r2, #1
 34782 0e8c 03D9     		bls	.L2299
3282:src/xeq.c     **** 			CmdLineLength--;
 34783              		.loc 1 3282 5 is_stmt 1 view .LVU9398
 34784 0e8e 1349     		ldr	r1, .L2594+20
 34785 0e90 481E     		subs	r0, r1, #1
 34786 0e92 FFF7FEFF 		bl	xcopy
 34787              	.LVL2700:
 34788              	.L2299:
3283:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 34789              		.loc 1 3283 4 view .LVU9399
3283:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 34790              		.loc 1 3283 17 is_stmt 0 view .LVU9400
 34791 0e96 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 34792 0e98 DFF844B0 		ldr	fp, .L2594+24
 34793 0e9c 013B     		subs	r3, r3, #1
 34794 0e9e 2377     		strb	r3, [r4, #28]
 34795 0ea0 DBF80030 		ldr	r3, [fp]
 34796 0ea4 FFF797B9 		b	.L2242
 34797              	.L2293:
 34798              	.LBE4347:
 34799              	.LBE4353:
3952:src/xeq.c     **** 			CmdLineDot++;
 34800              		.loc 1 3952 5 is_stmt 1 view .LVU9401
 34801 0ea8 0020     		movs	r0, #0
 34802 0eaa FFF7FEFF 		bl	digit
 34803              	.LVL2701:
 34804 0eae 2FE6     		b	.L2294
 34805              	.LVL2702:
 34806              	.L2584:
4044:src/xeq.c     **** 		    } else {                       //JM
 34807              		.loc 1 4044 9 view .LVU9402
 34808              	.LBB4354:
 34809              	.LBI4354:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 34810              		.loc 1 1229 6 view .LVU9403
 34811              	.LBB4355:
1230:src/xeq.c     **** 
 34812              		.loc 1 1230 2 view .LVU9404
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34813              		.loc 1 1232 2 view .LVU9405
 34814 0eb0 DFF82CB0 		ldr	fp, .L2594+24
 34815 0eb4 FFF7FEFF 		bl	process_cmdline.part.0
 34816              	.LVL2703:
 34817 0eb8 DBF80030 		ldr	r3, [fp]
 34818 0ebc FFF78BB9 		b	.L2242
 34819              	.LVL2704:
 34820              	.L2578:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34821              		.loc 1 1232 2 is_stmt 0 view .LVU9406
 34822              	.LBE4355:
 34823              	.LBE4354:
 34824              	.LBB4356:
3999:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 34825              		.loc 1 3999 5 is_stmt 1 view .LVU9407
ARM GAS  /tmp/cccVhVyH.s 			page 875


 34826 0ec0 0120     		movs	r0, #1
 34827 0ec2 FFF7FEFF 		bl	digit
 34828              	.LVL2705:
 34829 0ec6 5FE6     		b	.L2295
 34830              	.L2595:
 34831              		.align	2
 34832              	.L2594:
 34833 0ec8 00000000 		.word	dyfuncs
 34834 0ecc 00000000 		.word	trifuncs
 34835 0ed0 00000000 		.word	monfuncs
 34836 0ed4 00000000 		.word	XromParams
 34837 0ed8 20000000 		.word	StateWhileOn+32
 34838 0edc 21000000 		.word	StateWhileOn+33
 34839 0ee0 00000000 		.word	Error
 34840 0ee4 00000000 		.word	XromRunning
 34841 0ee8 00000000 		.word	Running
 34842              	.LBE4356:
 34843              	.LBE4365:
 34844              	.LBE4702:
 34845              		.cfi_endproc
 34846              	.LFE251:
 34848              		.section	.text.xeq_single,"ax",%progbits
 34849              		.align	1
 34850              		.p2align 2,,3
 34851              		.syntax unified
 34852              		.thumb
 34853              		.thumb_func
 34854              		.fpu fpv4-sp-d16
 34856              	xeq_single:
 34857              	.LFB252:
5474:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 34858              		.loc 1 5474 30 view -0
 34859              		.cfi_startproc
 34860              		@ args = 0, pretend = 0, frame = 0
 34861              		@ frame_needed = 0, uses_anonymous_args = 0
5475:src/xeq.c     **** 
 34862              		.loc 1 5475 2 view .LVU9409
5475:src/xeq.c     **** 
 34863              		.loc 1 5475 28 is_stmt 0 view .LVU9410
 34864 0000 074B     		ldr	r3, .L2598
 34865 0002 1B68     		ldr	r3, [r3]
5474:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 34866              		.loc 1 5474 30 view .LVU9411
 34867 0004 10B5     		push	{r4, lr}
 34868              		.cfi_def_cfa_offset 8
 34869              		.cfi_offset 4, -8
 34870              		.cfi_offset 14, -4
5475:src/xeq.c     **** 
 34871              		.loc 1 5475 20 view .LVU9412
 34872 0006 B3F8E007 		ldrh	r0, [r3, #2016]
 34873 000a FFF7FEFF 		bl	getprog
 34874              	.LVL2706:
 34875 000e 0446     		mov	r4, r0
 34876              	.LVL2707:
5477:src/xeq.c     **** 	xeq(op);
 34877              		.loc 1 5477 2 is_stmt 1 view .LVU9413
 34878 0010 FFF7FEFF 		bl	incpc
ARM GAS  /tmp/cccVhVyH.s 			page 876


 34879              	.LVL2708:
5478:src/xeq.c     **** }
 34880              		.loc 1 5478 2 view .LVU9414
 34881 0014 2046     		mov	r0, r4
5479:src/xeq.c     **** 
 34882              		.loc 1 5479 1 is_stmt 0 view .LVU9415
 34883 0016 BDE81040 		pop	{r4, lr}
 34884              		.cfi_restore 14
 34885              		.cfi_restore 4
 34886              		.cfi_def_cfa_offset 0
 34887              	.LVL2709:
5478:src/xeq.c     **** }
 34888              		.loc 1 5478 2 view .LVU9416
 34889 001a FFF7FEBF 		b	xeq
 34890              	.LVL2710:
 34891              	.L2599:
5478:src/xeq.c     **** }
 34892              		.loc 1 5478 2 view .LVU9417
 34893 001e 00BF     		.align	2
 34894              	.L2598:
 34895 0020 00000000 		.word	main_ram
 34896              		.cfi_endproc
 34897              	.LFE252:
 34899              		.section	.text.xeq_xrom2,"ax",%progbits
 34900              		.align	1
 34901              		.p2align 2,,3
 34902              		.syntax unified
 34903              		.thumb
 34904              		.thumb_func
 34905              		.fpu fpv4-sp-d16
 34907              	xeq_xrom2:
 34908              	.LFB253:
5486:src/xeq.c     **** #endif
 34909              		.loc 1 5486 29 is_stmt 1 view -0
 34910              		.cfi_startproc
 34911              		@ args = 0, pretend = 0, frame = 0
 34912              		@ frame_needed = 0, uses_anonymous_args = 0
5488:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
 34913              		.loc 1 5488 2 view .LVU9419
 34914              	.LVL2711:
5492:src/xeq.c     **** 		XromRunning = 1;
 34915              		.loc 1 5492 4 view .LVU9420
5492:src/xeq.c     **** 		XromRunning = 1;
 34916              		.loc 1 5492 10 view .LVU9421
5486:src/xeq.c     **** #endif
 34917              		.loc 1 5486 29 is_stmt 0 view .LVU9422
 34918 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 34919              		.cfi_def_cfa_offset 32
 34920              		.cfi_offset 4, -32
 34921              		.cfi_offset 5, -28
 34922              		.cfi_offset 6, -24
 34923              		.cfi_offset 7, -20
 34924              		.cfi_offset 8, -16
 34925              		.cfi_offset 9, -12
 34926              		.cfi_offset 10, -8
 34927              		.cfi_offset 14, -4
5492:src/xeq.c     **** 		XromRunning = 1;
ARM GAS  /tmp/cccVhVyH.s 			page 877


 34928              		.loc 1 5492 11 view .LVU9423
 34929 0004 1A4D     		ldr	r5, .L2612
 34930 0006 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5492:src/xeq.c     **** 		XromRunning = 1;
 34931              		.loc 1 5492 10 view .LVU9424
 34932 0008 53BB     		cbnz	r3, .L2600
 34933 000a DFF87080 		ldr	r8, .L2612+12
5493:src/xeq.c     **** 		xeq_single();
 34934              		.loc 1 5493 15 view .LVU9425
 34935 000e 194F     		ldr	r7, .L2612+4
 34936              	.LBB4709:
 34937              	.LBB4710:
4488:src/xeq.c     **** 		Busy = 1;
 34938              		.loc 1 4488 6 view .LVU9426
 34939 0010 DFF86CA0 		ldr	r10, .L2612+16
4488:src/xeq.c     **** 		Busy = 1;
 34940              		.loc 1 4488 15 view .LVU9427
 34941 0014 DFF86C90 		ldr	r9, .L2612+20
 34942 0018 03F0FF04 		and	r4, r3, #255
 34943              	.LVL2712:
 34944              	.L2601:
4488:src/xeq.c     **** 		Busy = 1;
 34945              		.loc 1 4488 15 view .LVU9428
 34946              	.LBE4710:
 34947              	.LBE4709:
5493:src/xeq.c     **** 		xeq_single();
 34948              		.loc 1 5493 3 is_stmt 1 view .LVU9429
 34949              	.LBB4717:
 34950              	.LBI4717:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 34951              		.loc 1 185 5 view .LVU9430
 34952              	.LBB4718:
 186:src/xeq.c     **** }
 34953              		.loc 1 186 2 view .LVU9431
 186:src/xeq.c     **** }
 34954              		.loc 1 186 9 is_stmt 0 view .LVU9432
 34955 001c D8F80020 		ldr	r2, [r8]
 34956 0020 B2F8E037 		ldrh	r3, [r2, #2016]
 34957              	.LBE4718:
 34958              	.LBE4717:
5492:src/xeq.c     **** 		XromRunning = 1;
 34959              		.loc 1 5492 18 view .LVU9433
 34960 0024 9B0B     		lsrs	r3, r3, #14
5493:src/xeq.c     **** 		xeq_single();
 34961              		.loc 1 5493 15 view .LVU9434
 34962 0026 0126     		movs	r6, #1
5492:src/xeq.c     **** 		XromRunning = 1;
 34963              		.loc 1 5492 18 view .LVU9435
 34964 0028 032B     		cmp	r3, #3
5496:src/xeq.c     **** 			busy();
 34965              		.loc 1 5496 6 view .LVU9436
 34966 002a 3444     		add	r4, r4, r6
 34967              	.LVL2713:
5492:src/xeq.c     **** 		XromRunning = 1;
 34968              		.loc 1 5492 18 view .LVU9437
 34969 002c 18D1     		bne	.L2600
5492:src/xeq.c     **** 		XromRunning = 1;
ARM GAS  /tmp/cccVhVyH.s 			page 878


 34970              		.loc 1 5492 31 discriminator 2 view .LVU9438
 34971 002e B2F9E237 		ldrsh	r3, [r2, #2018]
 34972 0032 ABB1     		cbz	r3, .L2600
5493:src/xeq.c     **** 		xeq_single();
 34973              		.loc 1 5493 15 view .LVU9439
 34974 0034 3E60     		str	r6, [r7]
5494:src/xeq.c     **** 		XromRunning = 0;
 34975              		.loc 1 5494 3 is_stmt 1 view .LVU9440
 34976 0036 FFF7FEFF 		bl	xeq_single
 34977              	.LVL2714:
5495:src/xeq.c     **** 		if ((++count & 31) == 0)
 34978              		.loc 1 5495 3 view .LVU9441
 34979              	.LBB4719:
 34980              	.LBB4713:
4488:src/xeq.c     **** 		Busy = 1;
 34981              		.loc 1 4488 12 is_stmt 0 view .LVU9442
 34982 003a D9F80030 		ldr	r3, [r9]
 34983 003e DAF80010 		ldr	r1, [r10]
 34984 0042 1943     		orrs	r1, r1, r3
 34985              	.LBE4713:
 34986              	.LBE4719:
5496:src/xeq.c     **** 			busy();
 34987              		.loc 1 5496 16 view .LVU9443
 34988 0044 04F01F03 		and	r3, r4, #31
5495:src/xeq.c     **** 		if ((++count & 31) == 0)
 34989              		.loc 1 5495 15 view .LVU9444
 34990 0048 0022     		movs	r2, #0
 34991              	.LBB4720:
 34992              	.LBB4714:
4488:src/xeq.c     **** 		Busy = 1;
 34993              		.loc 1 4488 12 view .LVU9445
 34994 004a 1943     		orrs	r1, r1, r3
 34995              	.LBE4714:
 34996              	.LBE4720:
5495:src/xeq.c     **** 		if ((++count & 31) == 0)
 34997              		.loc 1 5495 15 view .LVU9446
 34998 004c 3A60     		str	r2, [r7]
5496:src/xeq.c     **** 			busy();
 34999              		.loc 1 5496 3 is_stmt 1 view .LVU9447
 35000              	.LVL2715:
5497:src/xeq.c     **** 		  if (Pause)
 35001              		.loc 1 5497 4 view .LVU9448
 35002              	.LBB4721:
 35003              	.LBI4709:
4473:src/xeq.c     **** {
 35004              		.loc 1 4473 6 view .LVU9449
 35005              	.LBB4715:
4478:src/xeq.c     **** 
 35006              		.loc 1 4478 12 view .LVU9450
4483:src/xeq.c     **** 
 35007              		.loc 1 4483 17 view .LVU9451
4488:src/xeq.c     **** 		Busy = 1;
 35008              		.loc 1 4488 2 view .LVU9452
4488:src/xeq.c     **** 		Busy = 1;
 35009              		.loc 1 4488 12 is_stmt 0 view .LVU9453
 35010 004e 09D0     		beq	.L2611
 35011              	.L2602:
ARM GAS  /tmp/cccVhVyH.s 			page 879


 35012              	.LBE4715:
 35013              	.LBE4721:
5498:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 35014              		.loc 1 5498 5 is_stmt 1 view .LVU9454
5501:src/xeq.c     **** 		
 35015              		.loc 1 5501 4 view .LVU9455
5492:src/xeq.c     **** 		XromRunning = 1;
 35016              		.loc 1 5492 10 view .LVU9456
5498:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 35017              		.loc 1 5498 9 is_stmt 0 view .LVU9457
 35018 0050 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
5492:src/xeq.c     **** 		XromRunning = 1;
 35019              		.loc 1 5492 11 view .LVU9458
 35020 0052 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5498:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 35021              		.loc 1 5498 8 view .LVU9459
 35022 0054 12B1     		cbz	r2, .L2603
5501:src/xeq.c     **** 		
 35023              		.loc 1 5501 12 view .LVU9460
 35024 0056 0122     		movs	r2, #1
 35025 0058 C9F80020 		str	r2, [r9]
 35026              	.L2603:
5492:src/xeq.c     **** 		XromRunning = 1;
 35027              		.loc 1 5492 10 view .LVU9461
 35028 005c 002B     		cmp	r3, #0
 35029 005e DDD0     		beq	.L2601
 35030              	.LVL2716:
 35031              	.L2600:
5504:src/xeq.c     **** 
 35032              		.loc 1 5504 1 view .LVU9462
 35033 0060 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 35034              	.LVL2717:
 35035              	.L2611:
 35036              	.LBB4722:
 35037              	.LBB4716:
 35038              	.LBB4711:
 35039              	.LBI4711:
4473:src/xeq.c     **** {
 35040              		.loc 1 4473 6 is_stmt 1 view .LVU9463
 35041              	.LBB4712:
4489:src/xeq.c     **** 		message("Wait...", NULL);
 35042              		.loc 1 4489 3 view .LVU9464
4490:src/xeq.c     **** 	}
 35043              		.loc 1 4490 3 is_stmt 0 view .LVU9465
 35044 0064 0448     		ldr	r0, .L2612+8
4489:src/xeq.c     **** 		message("Wait...", NULL);
 35045              		.loc 1 4489 8 view .LVU9466
 35046 0066 CAF80060 		str	r6, [r10]
4490:src/xeq.c     **** 	}
 35047              		.loc 1 4490 3 is_stmt 1 view .LVU9467
 35048 006a FFF7FEFF 		bl	message
 35049              	.LVL2718:
4492:src/xeq.c     **** 
 35050              		.loc 1 4492 1 is_stmt 0 view .LVU9468
 35051 006e EFE7     		b	.L2602
 35052              	.L2613:
 35053              		.align	2
ARM GAS  /tmp/cccVhVyH.s 			page 880


 35054              	.L2612:
 35055 0070 00000000 		.word	Pause
 35056 0074 00000000 		.word	XromRunning
 35057 0078 00000000 		.word	.LC7
 35058 007c 00000000 		.word	main_ram
 35059 0080 00000000 		.word	Busy
 35060 0084 00000000 		.word	Running
 35061              	.LBE4712:
 35062              	.LBE4711:
 35063              	.LBE4716:
 35064              	.LBE4722:
 35065              		.cfi_endproc
 35066              	.LFE253:
 35068              		.section	.text.xeq_xrom,"ax",%progbits
 35069              		.align	1
 35070              		.p2align 2,,3
 35071              		.global	xeq_xrom
 35072              		.syntax unified
 35073              		.thumb
 35074              		.thumb_func
 35075              		.fpu fpv4-sp-d16
 35077              	xeq_xrom:
 35078              	.LFB254:
5507:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 35079              		.loc 1 5507 21 is_stmt 1 view -0
 35080              		.cfi_startproc
 35081              		@ args = 0, pretend = 0, frame = 0
 35082              		@ frame_needed = 0, uses_anonymous_args = 0
 35083              		@ link register save eliminated.
5509:src/xeq.c     **** 		xeq_xrom2();
 35084              		.loc 1 5509 2 view .LVU9470
5509:src/xeq.c     **** 		xeq_xrom2();
 35085              		.loc 1 5509 6 is_stmt 0 view .LVU9471
 35086 0000 034B     		ldr	r3, .L2617
5509:src/xeq.c     **** 		xeq_xrom2();
 35087              		.loc 1 5509 5 view .LVU9472
 35088 0002 93F91730 		ldrsb	r3, [r3, #23]
 35089 0006 002B     		cmp	r3, #0
 35090 0008 00DA     		bge	.L2616
5511:src/xeq.c     **** #endif
 35091              		.loc 1 5511 1 view .LVU9473
 35092 000a 7047     		bx	lr
 35093              	.L2616:
5510:src/xeq.c     **** }
 35094              		.loc 1 5510 3 is_stmt 1 view .LVU9474
 35095 000c FFF7FEBF 		b	xeq_xrom2
 35096              	.LVL2719:
 35097              	.L2618:
 35098              		.align	2
 35099              	.L2617:
 35100 0010 00000000 		.word	StateWhileOn
 35101              		.cfi_endproc
 35102              	.LFE254:
 35104              		.section	.text.dispatch_xrom,"ax",%progbits
 35105              		.align	1
 35106              		.p2align 2,,3
 35107              		.syntax unified
ARM GAS  /tmp/cccVhVyH.s 			page 881


 35108              		.thumb
 35109              		.thumb_func
 35110              		.fpu fpv4-sp-d16
 35112              	dispatch_xrom:
 35113              	.LVL2720:
 35114              	.LFB238:
4525:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 35115              		.loc 1 4525 1 view -0
 35116              		.cfi_startproc
 35117              		@ args = 0, pretend = 0, frame = 0
 35118              		@ frame_needed = 0, uses_anonymous_args = 0
4526:src/xeq.c     **** 	if (xp == NULL)
 35119              		.loc 1 4526 2 view .LVU9476
 35120              	.LBB4723:
 35121              	.LBI4723:
4508:src/xeq.c     **** {
 35122              		.loc 1 4508 24 view .LVU9477
 35123              	.LBB4724:
4510:src/xeq.c     **** 	if (xp < xrom)
 35124              		.loc 1 4510 2 view .LVU9478
4511:src/xeq.c     **** 		return NULL;
 35125              		.loc 1 4511 5 is_stmt 0 view .LVU9479
 35126 0000 1749     		ldr	r1, .L2630
4510:src/xeq.c     **** 	if (xp < xrom)
 35127              		.loc 1 4510 59 view .LVU9480
 35128 0002 20F00100 		bic	r0, r0, #1
 35129              	.LVL2721:
4511:src/xeq.c     **** 		return NULL;
 35130              		.loc 1 4511 2 is_stmt 1 view .LVU9481
4511:src/xeq.c     **** 		return NULL;
 35131              		.loc 1 4511 5 is_stmt 0 view .LVU9482
 35132 0006 8842     		cmp	r0, r1
 35133 0008 24D3     		bcc	.L2622
4515:src/xeq.c     **** 		return NULL;
 35134              		.loc 1 4515 2 is_stmt 1 view .LVU9483
4515:src/xeq.c     **** 		return NULL;
 35135              		.loc 1 4515 17 is_stmt 0 view .LVU9484
 35136 000a 164B     		ldr	r3, .L2630+4
 35137 000c 1B88     		ldrh	r3, [r3]
 35138 000e 01EB4303 		add	r3, r1, r3, lsl #1
4515:src/xeq.c     **** 		return NULL;
 35139              		.loc 1 4515 5 view .LVU9485
 35140 0012 9842     		cmp	r0, r3
 35141 0014 1ED2     		bcs	.L2622
 35142              	.LVL2722:
4515:src/xeq.c     **** 		return NULL;
 35143              		.loc 1 4515 5 view .LVU9486
 35144              	.LBE4724:
 35145              	.LBE4723:
4527:src/xeq.c     **** 		return 0;
 35146              		.loc 1 4527 2 is_stmt 1 view .LVU9487
4527:src/xeq.c     **** 		return 0;
 35147              		.loc 1 4527 5 is_stmt 0 view .LVU9488
 35148 0016 E0B1     		cbz	r0, .L2626
4530:src/xeq.c     **** 	XromRunning = 1;
 35149              		.loc 1 4530 2 is_stmt 1 view .LVU9489
4530:src/xeq.c     **** 	XromRunning = 1;
ARM GAS  /tmp/cccVhVyH.s 			page 882


 35150              		.loc 1 4530 18 is_stmt 0 view .LVU9490
 35151 0018 134B     		ldr	r3, .L2630+8
 35152 001a 1A68     		ldr	r2, [r3]
4532:src/xeq.c     **** 	xeq_xrom();
 35153              		.loc 1 4532 9 view .LVU9491
 35154 001c 401A     		subs	r0, r0, r1
 35155              	.LVL2723:
4530:src/xeq.c     **** 	XromRunning = 1;
 35156              		.loc 1 4530 18 view .LVU9492
 35157 001e B2F8DE37 		ldrh	r3, [r2, #2014]
4532:src/xeq.c     **** 	xeq_xrom();
 35158              		.loc 1 4532 2 view .LVU9493
 35159 0022 B2F8E027 		ldrh	r2, [r2, #2016]
4532:src/xeq.c     **** 	xeq_xrom();
 35160              		.loc 1 4532 9 view .LVU9494
 35161 0026 4010     		asrs	r0, r0, #1
 35162              	.LVL2724:
4525:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 35163              		.loc 1 4525 1 view .LVU9495
 35164 0028 70B5     		push	{r4, r5, r6, lr}
 35165              		.cfi_def_cfa_offset 16
 35166              		.cfi_offset 4, -16
 35167              		.cfi_offset 5, -12
 35168              		.cfi_offset 6, -8
 35169              		.cfi_offset 14, -4
4532:src/xeq.c     **** 	xeq_xrom();
 35170              		.loc 1 4532 9 view .LVU9496
 35171 002a 0130     		adds	r0, r0, #1
4531:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 35172              		.loc 1 4531 14 view .LVU9497
 35173 002c 0124     		movs	r4, #1
4530:src/xeq.c     **** 	XromRunning = 1;
 35174              		.loc 1 4530 16 view .LVU9498
 35175 002e 0F4E     		ldr	r6, .L2630+12
4531:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 35176              		.loc 1 4531 14 view .LVU9499
 35177 0030 0F4D     		ldr	r5, .L2630+16
4530:src/xeq.c     **** 	XromRunning = 1;
 35178              		.loc 1 4530 18 view .LVU9500
 35179 0032 43F34A13 		sbfx	r3, r3, #5, #11
4532:src/xeq.c     **** 	xeq_xrom();
 35180              		.loc 1 4532 2 view .LVU9501
 35181 0036 40F44040 		orr	r0, r0, #49152
 35182 003a 2146     		mov	r1, r4
4530:src/xeq.c     **** 	XromRunning = 1;
 35183              		.loc 1 4530 18 view .LVU9502
 35184 003c 3360     		str	r3, [r6]
4531:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 35185              		.loc 1 4531 2 is_stmt 1 view .LVU9503
4531:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 35186              		.loc 1 4531 14 is_stmt 0 view .LVU9504
 35187 003e 2C60     		str	r4, [r5]
4532:src/xeq.c     **** 	xeq_xrom();
 35188              		.loc 1 4532 2 is_stmt 1 view .LVU9505
 35189 0040 FFF7FEFF 		bl	gsbgto
 35190              	.LVL2725:
4533:src/xeq.c     **** 	return 1;
ARM GAS  /tmp/cccVhVyH.s 			page 883


 35191              		.loc 1 4533 2 view .LVU9506
 35192              	.LBB4725:
 35193              	.LBI4725:
5507:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 35194              		.loc 1 5507 6 view .LVU9507
 35195              	.LBB4726:
5509:src/xeq.c     **** 		xeq_xrom2();
 35196              		.loc 1 5509 2 view .LVU9508
5509:src/xeq.c     **** 		xeq_xrom2();
 35197              		.loc 1 5509 6 is_stmt 0 view .LVU9509
 35198 0044 0B4B     		ldr	r3, .L2630+20
5509:src/xeq.c     **** 		xeq_xrom2();
 35199              		.loc 1 5509 5 view .LVU9510
 35200 0046 93F91730 		ldrsb	r3, [r3, #23]
 35201 004a 002B     		cmp	r3, #0
 35202 004c 04DA     		bge	.L2629
 35203              	.LBE4726:
 35204              	.LBE4725:
4534:src/xeq.c     **** }
 35205              		.loc 1 4534 9 view .LVU9511
 35206 004e 2046     		mov	r0, r4
 35207              	.LVL2726:
4535:src/xeq.c     **** 
 35208              		.loc 1 4535 1 view .LVU9512
 35209 0050 70BD     		pop	{r4, r5, r6, pc}
 35210              	.LVL2727:
 35211              	.L2626:
 35212              		.cfi_def_cfa_offset 0
 35213              		.cfi_restore 4
 35214              		.cfi_restore 5
 35215              		.cfi_restore 6
 35216              		.cfi_restore 14
4535:src/xeq.c     **** 
 35217              		.loc 1 4535 1 view .LVU9513
 35218 0052 7047     		bx	lr
 35219              	.LVL2728:
 35220              	.L2622:
4528:src/xeq.c     **** 	// set_lift();
 35221              		.loc 1 4528 10 view .LVU9514
 35222 0054 0020     		movs	r0, #0
 35223              	.LVL2729:
4528:src/xeq.c     **** 	// set_lift();
 35224              		.loc 1 4528 10 view .LVU9515
 35225 0056 7047     		bx	lr
 35226              	.LVL2730:
 35227              	.L2629:
 35228              		.cfi_def_cfa_offset 16
 35229              		.cfi_offset 4, -16
 35230              		.cfi_offset 5, -12
 35231              		.cfi_offset 6, -8
 35232              		.cfi_offset 14, -4
 35233              	.LBB4728:
 35234              	.LBB4727:
5510:src/xeq.c     **** }
 35235              		.loc 1 5510 3 is_stmt 1 view .LVU9516
 35236 0058 FFF7FEFF 		bl	xeq_xrom2
 35237              	.LVL2731:
ARM GAS  /tmp/cccVhVyH.s 			page 884


 35238              	.LBE4727:
 35239              	.LBE4728:
4534:src/xeq.c     **** }
 35240              		.loc 1 4534 9 is_stmt 0 view .LVU9517
 35241 005c 2046     		mov	r0, r4
4535:src/xeq.c     **** 
 35242              		.loc 1 4535 1 view .LVU9518
 35243 005e 70BD     		pop	{r4, r5, r6, pc}
 35244              	.L2631:
 35245              		.align	2
 35246              	.L2630:
 35247 0060 00000000 		.word	xrom
 35248 0064 00000000 		.word	xrom_size
 35249 0068 00000000 		.word	main_ram
 35250 006c 00000000 		.word	UserLocalRegs
 35251 0070 00000000 		.word	XromRunning
 35252 0074 00000000 		.word	StateWhileOn
 35253              		.cfi_endproc
 35254              	.LFE238:
 35256              		.section	.text.op_rs,"ax",%progbits
 35257              		.align	1
 35258              		.p2align 2,,3
 35259              		.global	op_rs
 35260              		.syntax unified
 35261              		.thumb
 35262              		.thumb_func
 35263              		.fpu fpv4-sp-d16
 35265              	op_rs:
 35266              	.LVL2732:
 35267              	.LFB257:
5607:src/xeq.c     **** #ifndef REALBUILD
 35268              		.loc 1 5607 27 is_stmt 1 view -0
 35269              		.cfi_startproc
 35270              		@ args = 0, pretend = 0, frame = 0
 35271              		@ frame_needed = 0, uses_anonymous_args = 0
5611:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 35272              		.loc 1 5611 2 view .LVU9520
 35273              	.LBB4729:
 35274              	.LBI4729:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 35275              		.loc 1 185 5 view .LVU9521
 35276              	.LBB4730:
 186:src/xeq.c     **** }
 35277              		.loc 1 186 2 view .LVU9522
 35278              	.LBE4730:
 35279              	.LBE4729:
5607:src/xeq.c     **** #ifndef REALBUILD
 35280              		.loc 1 5607 27 is_stmt 0 view .LVU9523
 35281 0000 10B5     		push	{r4, lr}
 35282              		.cfi_def_cfa_offset 8
 35283              		.cfi_offset 4, -8
 35284              		.cfi_offset 14, -4
 35285              	.LBB4732:
 35286              	.LBB4731:
 186:src/xeq.c     **** }
 35287              		.loc 1 186 9 view .LVU9524
 35288 0002 1D4C     		ldr	r4, .L2642
ARM GAS  /tmp/cccVhVyH.s 			page 885


 35289 0004 2268     		ldr	r2, [r4]
 35290 0006 B2F8E037 		ldrh	r3, [r2, #2016]
 35291              	.LBE4731:
 35292              	.LBE4732:
5611:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 35293              		.loc 1 5611 5 view .LVU9525
 35294 000a 9B0B     		lsrs	r3, r3, #14
 35295 000c 032B     		cmp	r3, #3
 35296 000e 20D0     		beq	.L2641
5621:src/xeq.c     **** 		set_running_off();
 35297              		.loc 1 5621 2 is_stmt 1 view .LVU9526
5621:src/xeq.c     **** 		set_running_off();
 35298              		.loc 1 5621 6 is_stmt 0 view .LVU9527
 35299 0010 1A4B     		ldr	r3, .L2642+4
5621:src/xeq.c     **** 		set_running_off();
 35300              		.loc 1 5621 5 view .LVU9528
 35301 0012 1968     		ldr	r1, [r3]
 35302 0014 61B1     		cbz	r1, .L2636
5622:src/xeq.c     **** 	else {
 35303              		.loc 1 5622 3 is_stmt 1 view .LVU9529
 35304              	.LBB4733:
 35305              	.LBI4733:
5824:src/xeq.c     **** 	set_running_off_sst();
 35306              		.loc 1 5824 6 view .LVU9530
 35307              	.LBB4734:
5825:src/xeq.c     **** 	State.entryp = 0;
 35308              		.loc 1 5825 2 view .LVU9531
 35309              	.LBB4735:
 35310              	.LBI4735:
5816:src/xeq.c     **** 	Running = 0;
 35311              		.loc 1 5816 6 view .LVU9532
 35312              	.LBB4736:
5817:src/xeq.c     **** }
 35313              		.loc 1 5817 2 view .LVU9533
5817:src/xeq.c     **** }
 35314              		.loc 1 5817 10 is_stmt 0 view .LVU9534
 35315 0016 0021     		movs	r1, #0
 35316 0018 1960     		str	r1, [r3]
 35317              	.LBE4736:
 35318              	.LBE4735:
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 35319              		.loc 1 5826 2 is_stmt 1 view .LVU9535
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 35320              		.loc 1 5826 15 is_stmt 0 view .LVU9536
 35321 001a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 35322 001e 61F30413 		bfi	r3, r1, #4, #1
 35323 0022 82F8DD37 		strb	r3, [r2, #2013]
5827:src/xeq.c     **** }
 35324              		.loc 1 5827 2 is_stmt 1 view .LVU9537
 35325              	.LBE4734:
 35326              	.LBE4733:
5628:src/xeq.c     **** 
 35327              		.loc 1 5628 1 is_stmt 0 view .LVU9538
 35328 0026 BDE81040 		pop	{r4, lr}
 35329              		.cfi_remember_state
 35330              		.cfi_restore 14
 35331              		.cfi_restore 4
ARM GAS  /tmp/cccVhVyH.s 			page 886


 35332              		.cfi_def_cfa_offset 0
 35333              	.LBB4738:
 35334              	.LBB4737:
5827:src/xeq.c     **** }
 35335              		.loc 1 5827 2 view .LVU9539
 35336 002a 8A20     		movs	r0, #138
 35337              	.LVL2733:
5827:src/xeq.c     **** }
 35338              		.loc 1 5827 2 view .LVU9540
 35339 002c FFF7FEBF 		b	dot
 35340              	.LVL2734:
 35341              	.L2636:
 35342              		.cfi_restore_state
5827:src/xeq.c     **** }
 35343              		.loc 1 5827 2 view .LVU9541
 35344              	.LBE4737:
 35345              	.LBE4738:
5624:src/xeq.c     **** 		if (RetStkPtr == 0)
 35346              		.loc 1 5624 3 is_stmt 1 view .LVU9542
 35347 0030 FFF7FEFF 		bl	set_running_on
 35348              	.LVL2735:
5625:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 35349              		.loc 1 5625 3 view .LVU9543
5625:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 35350              		.loc 1 5625 7 is_stmt 0 view .LVU9544
 35351 0034 2368     		ldr	r3, [r4]
5625:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 35352              		.loc 1 5625 6 view .LVU9545
 35353 0036 B3F9E227 		ldrsh	r2, [r3, #2018]
 35354 003a 4AB9     		cbnz	r2, .L2632
5626:src/xeq.c     **** 	}
 35355              		.loc 1 5626 4 is_stmt 1 view .LVU9546
5626:src/xeq.c     **** 	}
 35356              		.loc 1 5626 10 is_stmt 0 view .LVU9547
 35357 003c 104A     		ldr	r2, .L2642+8
5626:src/xeq.c     **** 	}
 35358              		.loc 1 5626 26 view .LVU9548
 35359 003e B3F8E017 		ldrh	r1, [r3, #2016]
5626:src/xeq.c     **** 	}
 35360              		.loc 1 5626 10 view .LVU9549
 35361 0042 1268     		ldr	r2, [r2]
5626:src/xeq.c     **** 	}
 35362              		.loc 1 5626 24 view .LVU9550
 35363 0044 4FF6FF70 		movw	r0, #65535
 35364 0048 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 35365 004c 22F8021C 		strh	r1, [r2, #-2]	@ movhi
 35366              	.L2632:
5628:src/xeq.c     **** 
 35367              		.loc 1 5628 1 view .LVU9551
 35368 0050 10BD     		pop	{r4, pc}
 35369              	.LVL2736:
 35370              	.L2641:
5612:src/xeq.c     **** 			Running = XromRunning = 0;
 35371              		.loc 1 5612 3 is_stmt 1 view .LVU9552
5612:src/xeq.c     **** 			Running = XromRunning = 0;
 35372              		.loc 1 5612 7 is_stmt 0 view .LVU9553
 35373 0052 0C4B     		ldr	r3, .L2642+12
ARM GAS  /tmp/cccVhVyH.s 			page 887


5612:src/xeq.c     **** 			Running = XromRunning = 0;
 35374              		.loc 1 5612 6 view .LVU9554
 35375 0054 93F91730 		ldrsb	r3, [r3, #23]
 35376 0058 002B     		cmp	r3, #0
 35377 005a 09DA     		bge	.L2634
5612:src/xeq.c     **** 			Running = XromRunning = 0;
 35378              		.loc 1 5612 24 discriminator 1 view .LVU9555
 35379 005c 074B     		ldr	r3, .L2642+4
5612:src/xeq.c     **** 			Running = XromRunning = 0;
 35380              		.loc 1 5612 32 discriminator 1 view .LVU9556
 35381 005e 0A4A     		ldr	r2, .L2642+16
 35382 0060 1868     		ldr	r0, [r3]
 35383              	.LVL2737:
5612:src/xeq.c     **** 			Running = XromRunning = 0;
 35384              		.loc 1 5612 32 discriminator 1 view .LVU9557
 35385 0062 1168     		ldr	r1, [r2]
 35386 0064 0143     		orrs	r1, r0, r1
 35387 0066 03D0     		beq	.L2634
5613:src/xeq.c     **** 		}
 35388              		.loc 1 5613 4 is_stmt 1 view .LVU9558
5613:src/xeq.c     **** 		}
 35389              		.loc 1 5613 26 is_stmt 0 view .LVU9559
 35390 0068 0021     		movs	r1, #0
 35391 006a 1160     		str	r1, [r2]
5613:src/xeq.c     **** 		}
 35392              		.loc 1 5613 12 view .LVU9560
 35393 006c 1960     		str	r1, [r3]
5628:src/xeq.c     **** 
 35394              		.loc 1 5628 1 view .LVU9561
 35395 006e 10BD     		pop	{r4, pc}
 35396              	.L2634:
5616:src/xeq.c     **** 		}
 35397              		.loc 1 5616 4 is_stmt 1 view .LVU9562
5628:src/xeq.c     **** 
 35398              		.loc 1 5628 1 is_stmt 0 view .LVU9563
 35399 0070 BDE81040 		pop	{r4, lr}
 35400              		.cfi_restore 14
 35401              		.cfi_restore 4
 35402              		.cfi_def_cfa_offset 0
5616:src/xeq.c     **** 		}
 35403              		.loc 1 5616 4 view .LVU9564
 35404 0074 FFF7FEBF 		b	xeq_xrom2
 35405              	.LVL2738:
 35406              	.L2643:
 35407              		.align	2
 35408              	.L2642:
 35409 0078 00000000 		.word	main_ram
 35410 007c 00000000 		.word	Running
 35411 0080 00000000 		.word	RetStk
 35412 0084 00000000 		.word	StateWhileOn
 35413 0088 00000000 		.word	XromRunning
 35414              		.cfi_endproc
 35415              	.LFE257:
 35417              		.section	.text.xeqprog,"ax",%progbits
 35418              		.align	1
 35419              		.p2align 2,,3
 35420              		.global	xeqprog
ARM GAS  /tmp/cccVhVyH.s 			page 888


 35421              		.syntax unified
 35422              		.thumb
 35423              		.thumb_func
 35424              		.fpu fpv4-sp-d16
 35426              	xeqprog:
 35427              	.LFB255:
5523:src/xeq.c     ****    int state = 0;
 35428              		.loc 1 5523 2 is_stmt 1 view -0
 35429              		.cfi_startproc
 35430              		@ args = 0, pretend = 0, frame = 0
 35431              		@ frame_needed = 0, uses_anonymous_args = 0
5524:src/xeq.c     ****    if (Running || Pause) {
 35432              		.loc 1 5524 4 view .LVU9566
 35433              	.LVL2739:
5525:src/xeq.c     **** 
 35434              		.loc 1 5525 4 view .LVU9567
5523:src/xeq.c     ****    int state = 0;
 35435              		.loc 1 5523 2 is_stmt 0 view .LVU9568
 35436 0000 38B5     		push	{r3, r4, r5, lr}
 35437              		.cfi_def_cfa_offset 16
 35438              		.cfi_offset 3, -16
 35439              		.cfi_offset 4, -12
 35440              		.cfi_offset 5, -8
 35441              		.cfi_offset 14, -4
5525:src/xeq.c     **** 
 35442              		.loc 1 5525 8 view .LVU9569
 35443 0002 194C     		ldr	r4, .L2669
 35444 0004 194D     		ldr	r5, .L2669+4
5525:src/xeq.c     **** 
 35445              		.loc 1 5525 7 view .LVU9570
 35446 0006 2368     		ldr	r3, [r4]
 35447 0008 0BB9     		cbnz	r3, .L2645
5525:src/xeq.c     **** 
 35448              		.loc 1 5525 16 discriminator 1 view .LVU9571
 35449 000a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 35450 000c 9BB1     		cbz	r3, .L2650
 35451              	.L2645:
5531:src/xeq.c     **** #endif
 35452              		.loc 1 5531 6 is_stmt 1 view .LVU9572
 35453              	.LVL2740:
5534:src/xeq.c     ****      lcd_refresh();
 35454              		.loc 1 5534 6 view .LVU9573
 35455 000e 0121     		movs	r1, #1
 35456 0010 8A20     		movs	r0, #138
 35457 0012 FFF7FEFF 		bl	dot
 35458              	.LVL2741:
5535:src/xeq.c     ****      
 35459              		.loc 1 5535 6 view .LVU9574
 35460 0016 164B     		ldr	r3, .L2669+8
 35461 0018 9847     		blx	r3
 35462              	.LVL2742:
5537:src/xeq.c     ****        xeq_single();
 35463              		.loc 1 5537 6 view .LVU9575
5537:src/xeq.c     ****        xeq_single();
 35464              		.loc 1 5537 12 is_stmt 0 view .LVU9576
 35465 001a 06E0     		b	.L2647
 35466              	.L2667:
ARM GAS  /tmp/cccVhVyH.s 			page 889


5537:src/xeq.c     ****        xeq_single();
 35467              		.loc 1 5537 21 discriminator 1 view .LVU9577
 35468 001c 2368     		ldr	r3, [r4]
 35469 001e 53B1     		cbz	r3, .L2650
5538:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 35470              		.loc 1 5538 8 view .LVU9578
 35471 0020 FFF7FEFF 		bl	xeq_single
 35472              	.LVL2743:
5540:src/xeq.c     **** 	 {
 35473              		.loc 1 5540 8 is_stmt 1 view .LVU9579
5540:src/xeq.c     **** 	 {
 35474              		.loc 1 5540 12 is_stmt 0 view .LVU9580
 35475 0024 FFF7FEFF 		bl	is_key_pressed
 35476              	.LVL2744:
5540:src/xeq.c     **** 	 {
 35477              		.loc 1 5540 11 view .LVU9581
 35478 0028 10B9     		cbnz	r0, .L2648
 35479              	.L2647:
5538:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 35480              		.loc 1 5538 8 is_stmt 1 view .LVU9582
5537:src/xeq.c     ****        xeq_single();
 35481              		.loc 1 5537 12 view .LVU9583
5537:src/xeq.c     ****        xeq_single();
 35482              		.loc 1 5537 13 is_stmt 0 view .LVU9584
 35483 002a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5537:src/xeq.c     ****        xeq_single();
 35484              		.loc 1 5537 12 view .LVU9585
 35485 002c 002B     		cmp	r3, #0
 35486 002e F5D0     		beq	.L2667
 35487              	.L2648:
5549:src/xeq.c     ****      // Program has terminated
 35488              		.loc 1 5549 4 is_stmt 1 view .LVU9586
5549:src/xeq.c     ****      // Program has terminated
 35489              		.loc 1 5549 7 is_stmt 0 view .LVU9587
 35490 0030 2368     		ldr	r3, [r4]
 35491 0032 03B1     		cbz	r3, .L2650
 35492              	.LVL2745:
 35493              	.L2644:
5565:src/xeq.c     **** 
 35494              		.loc 1 5565 2 view .LVU9588
 35495 0034 38BD     		pop	{r3, r4, r5, pc}
 35496              	.L2650:
5549:src/xeq.c     ****      // Program has terminated
 35497              		.loc 1 5549 4 is_stmt 1 view .LVU9589
5549:src/xeq.c     ****      // Program has terminated
 35498              		.loc 1 5549 21 is_stmt 0 view .LVU9590
 35499 0036 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5549:src/xeq.c     ****      // Program has terminated
 35500              		.loc 1 5549 18 view .LVU9591
 35501 0038 002B     		cmp	r3, #0
 35502 003a FBD1     		bne	.L2644
5551:src/xeq.c     ****      ShowRPN = 1; // display() may turn it off again
 35503              		.loc 1 5551 6 is_stmt 1 view .LVU9592
 35504 003c 8A20     		movs	r0, #138
5552:src/xeq.c     ****      lcd_refresh(); // put here to turn off the RCL annunciator
 35505              		.loc 1 5552 14 is_stmt 0 view .LVU9593
 35506 003e 0D4C     		ldr	r4, .L2669+12
ARM GAS  /tmp/cccVhVyH.s 			page 890


5553:src/xeq.c     ****      display(); // turns off RPN if it was freeeeze and returns doing little
 35507              		.loc 1 5553 6 view .LVU9594
 35508 0040 0B4D     		ldr	r5, .L2669+8
5551:src/xeq.c     ****      ShowRPN = 1; // display() may turn it off again
 35509              		.loc 1 5551 6 view .LVU9595
 35510 0042 FFF7FEFF 		bl	clr_dot
 35511              	.LVL2746:
5552:src/xeq.c     ****      lcd_refresh(); // put here to turn off the RCL annunciator
 35512              		.loc 1 5552 6 is_stmt 1 view .LVU9596
5552:src/xeq.c     ****      lcd_refresh(); // put here to turn off the RCL annunciator
 35513              		.loc 1 5552 14 is_stmt 0 view .LVU9597
 35514 0046 0123     		movs	r3, #1
 35515 0048 2360     		str	r3, [r4]
5553:src/xeq.c     ****      display(); // turns off RPN if it was freeeeze and returns doing little
 35516              		.loc 1 5553 6 is_stmt 1 view .LVU9598
 35517 004a A847     		blx	r5
 35518              	.LVL2747:
5554:src/xeq.c     ****      
 35519              		.loc 1 5554 6 view .LVU9599
 35520 004c FFF7FEFF 		bl	display
 35521              	.LVL2748:
5556:src/xeq.c     ****        set_dot(RPN);
 35522              		.loc 1 5556 6 view .LVU9600
5556:src/xeq.c     ****        set_dot(RPN);
 35523              		.loc 1 5556 9 is_stmt 0 view .LVU9601
 35524 0050 2368     		ldr	r3, [r4]
 35525 0052 1BB9     		cbnz	r3, .L2668
 35526              	.L2652:
5562:src/xeq.c     **** #endif
 35527              		.loc 1 5562 6 is_stmt 1 view .LVU9602
5562:src/xeq.c     **** #endif
 35528              		.loc 1 5562 18 is_stmt 0 view .LVU9603
 35529 0054 084B     		ldr	r3, .L2669+16
 35530 0056 0122     		movs	r2, #1
 35531 0058 1A60     		str	r2, [r3]
5565:src/xeq.c     **** 
 35532              		.loc 1 5565 2 view .LVU9604
 35533 005a 38BD     		pop	{r3, r4, r5, pc}
 35534              	.L2668:
5557:src/xeq.c     ****        lcd_refresh(); // RPN
 35535              		.loc 1 5557 8 is_stmt 1 view .LVU9605
 35536 005c 8D20     		movs	r0, #141
 35537 005e FFF7FEFF 		bl	set_dot
 35538              	.LVL2749:
5558:src/xeq.c     ****      }
 35539              		.loc 1 5558 8 view .LVU9606
 35540 0062 A847     		blx	r5
 35541              	.LVL2750:
 35542 0064 F6E7     		b	.L2652
 35543              	.L2670:
 35544 0066 00BF     		.align	2
 35545              	.L2669:
 35546 0068 00000000 		.word	Running
 35547 006c 00000000 		.word	Pause
 35548 0070 31020008 		.word	134218289
 35549 0074 00000000 		.word	ShowRPN
 35550 0078 00000000 		.word	JustStopped
ARM GAS  /tmp/cccVhVyH.s 			page 891


 35551              		.cfi_endproc
 35552              	.LFE255:
 35554              		.section	.text.xeq_sst_bst,"ax",%progbits
 35555              		.align	1
 35556              		.p2align 2,,3
 35557              		.global	xeq_sst_bst
 35558              		.syntax unified
 35559              		.thumb
 35560              		.thumb_func
 35561              		.fpu fpv4-sp-d16
 35563              	xeq_sst_bst:
 35564              	.LVL2751:
 35565              	.LFB256:
5570:src/xeq.c     **** 	opcode op;
 35566              		.loc 1 5570 1 view -0
 35567              		.cfi_startproc
 35568              		@ args = 0, pretend = 0, frame = 0
 35569              		@ frame_needed = 0, uses_anonymous_args = 0
5571:src/xeq.c     **** 
 35570              		.loc 1 5571 2 view .LVU9608
5573:src/xeq.c     **** 	if (kind == -1)
 35571              		.loc 1 5573 2 view .LVU9609
 35572              	.LBB4739:
 35573              	.LBI4739:
4462:src/xeq.c     **** 	// extern int IntMaxWindow;
 35574              		.loc 1 4462 6 view .LVU9610
 35575              	.LBB4740:
4465:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 35576              		.loc 1 4465 2 view .LVU9611
 35577              	.LBE4740:
 35578              	.LBE4739:
5570:src/xeq.c     **** 	opcode op;
 35579              		.loc 1 5570 1 is_stmt 0 view .LVU9612
 35580 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 35581              		.cfi_def_cfa_offset 24
 35582              		.cfi_offset 4, -24
 35583              		.cfi_offset 5, -20
 35584              		.cfi_offset 6, -16
 35585              		.cfi_offset 7, -12
 35586              		.cfi_offset 8, -8
 35587              		.cfi_offset 14, -4
 35588              	.LBB4743:
 35589              	.LBB4741:
4465:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 35590              		.loc 1 4465 16 view .LVU9613
 35591 0004 254C     		ldr	r4, .L2684
 35592 0006 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4466:src/xeq.c     **** }
 35593              		.loc 1 4466 15 view .LVU9614
 35594 0008 0026     		movs	r6, #0
4465:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 35595              		.loc 1 4465 16 view .LVU9615
 35596 000a 6FF3C503 		bfc	r3, #3, #3
 35597              	.LBE4741:
 35598              	.LBE4743:
5574:src/xeq.c     **** 		decpc();
 35599              		.loc 1 5574 5 view .LVU9616
ARM GAS  /tmp/cccVhVyH.s 			page 892


 35600 000e 411C     		adds	r1, r0, #1
 35601              	.LBB4744:
 35602              	.LBB4742:
4465:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 35603              		.loc 1 4465 16 view .LVU9617
 35604 0010 2375     		strb	r3, [r4, #20]
4466:src/xeq.c     **** }
 35605              		.loc 1 4466 2 is_stmt 1 view .LVU9618
4466:src/xeq.c     **** }
 35606              		.loc 1 4466 15 is_stmt 0 view .LVU9619
 35607 0012 6674     		strb	r6, [r4, #17]
 35608              	.LBE4742:
 35609              	.LBE4744:
5574:src/xeq.c     **** 		decpc();
 35610              		.loc 1 5574 2 is_stmt 1 view .LVU9620
5574:src/xeq.c     **** 		decpc();
 35611              		.loc 1 5574 5 is_stmt 0 view .LVU9621
 35612 0014 30D0     		beq	.L2680
5577:src/xeq.c     **** 		// Display the step
 35613              		.loc 1 5577 2 is_stmt 1 view .LVU9622
5577:src/xeq.c     **** 		// Display the step
 35614              		.loc 1 5577 6 is_stmt 0 view .LVU9623
 35615 0016 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5577:src/xeq.c     **** 		// Display the step
 35616              		.loc 1 5577 5 view .LVU9624
 35617 0018 5B06     		lsls	r3, r3, #25
 35618 001a 0546     		mov	r5, r0
 35619 001c 08D4     		bmi	.L2681
5596:src/xeq.c     **** 		// Key down in program mode
 35620              		.loc 1 5596 7 is_stmt 1 view .LVU9625
5596:src/xeq.c     **** 		// Key down in program mode
 35621              		.loc 1 5596 10 is_stmt 0 view .LVU9626
 35622 001e 08B1     		cbz	r0, .L2682
 35623              	.LVL2752:
 35624              	.L2671:
5601:src/xeq.c     **** 
 35625              		.loc 1 5601 1 view .LVU9627
 35626 0020 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 35627              	.LVL2753:
 35628              	.L2682:
5598:src/xeq.c     **** 		OpCode = 0;
 35629              		.loc 1 5598 3 is_stmt 1 view .LVU9628
 35630 0024 FFF7FEFF 		bl	incpc
 35631              	.LVL2754:
5599:src/xeq.c     **** 	}
 35632              		.loc 1 5599 3 view .LVU9629
5599:src/xeq.c     **** 	}
 35633              		.loc 1 5599 10 is_stmt 0 view .LVU9630
 35634 0028 1D4B     		ldr	r3, .L2684+4
 35635 002a 1D60     		str	r5, [r3]
5601:src/xeq.c     **** 
 35636              		.loc 1 5601 1 view .LVU9631
 35637 002c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 35638              	.LVL2755:
 35639              	.L2681:
5579:src/xeq.c     **** 		print_step(op);
 35640              		.loc 1 5579 3 is_stmt 1 view .LVU9632
ARM GAS  /tmp/cccVhVyH.s 			page 893


5579:src/xeq.c     **** 		print_step(op);
 35641              		.loc 1 5579 16 is_stmt 0 view .LVU9633
 35642 0030 1C4B     		ldr	r3, .L2684+8
 35643 0032 1B68     		ldr	r3, [r3]
5579:src/xeq.c     **** 		print_step(op);
 35644              		.loc 1 5579 8 view .LVU9634
 35645 0034 B3F8E007 		ldrh	r0, [r3, #2016]
 35646              	.LVL2756:
5579:src/xeq.c     **** 		print_step(op);
 35647              		.loc 1 5579 8 view .LVU9635
 35648 0038 FFF7FEFF 		bl	getprog
 35649              	.LVL2757:
 35650 003c 0746     		mov	r7, r0
 35651              	.LVL2758:
5580:src/xeq.c     **** 		if (kind == 1) {
 35652              		.loc 1 5580 3 is_stmt 1 view .LVU9636
 35653 003e FFF7FEFF 		bl	print_step
 35654              	.LVL2759:
5581:src/xeq.c     **** 			// Execute the step on key up
 35655              		.loc 1 5581 3 view .LVU9637
5581:src/xeq.c     **** 			// Execute the step on key up
 35656              		.loc 1 5581 6 is_stmt 0 view .LVU9638
 35657 0042 012D     		cmp	r5, #1
 35658 0044 ECD1     		bne	.L2671
5584:src/xeq.c     **** #endif
 35659              		.loc 1 5584 4 is_stmt 1 view .LVU9639
5584:src/xeq.c     **** #endif
 35660              		.loc 1 5584 15 is_stmt 0 view .LVU9640
 35661 0046 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 35662              	.LBB4745:
 35663              	.LBB4746:
5821:src/xeq.c     **** }
 35664              		.loc 1 5821 10 view .LVU9641
 35665 0048 DFF85C80 		ldr	r8, .L2684+12
 35666              	.LBE4746:
 35667              	.LBE4745:
5584:src/xeq.c     **** #endif
 35668              		.loc 1 5584 15 view .LVU9642
 35669 004c 43F00203 		orr	r3, r3, #2
 35670 0050 2376     		strb	r3, [r4, #24]
5586:src/xeq.c     **** 			incpc();
 35671              		.loc 1 5586 4 is_stmt 1 view .LVU9643
 35672              	.LBB4748:
 35673              	.LBI4745:
5820:src/xeq.c     **** 	Running = 1;
 35674              		.loc 1 5820 6 view .LVU9644
 35675              	.LBB4747:
5821:src/xeq.c     **** }
 35676              		.loc 1 5821 2 view .LVU9645
5821:src/xeq.c     **** }
 35677              		.loc 1 5821 10 is_stmt 0 view .LVU9646
 35678 0052 C8F80050 		str	r5, [r8]
 35679              	.LBE4747:
 35680              	.LBE4748:
5587:src/xeq.c     **** 			xeq(op);
 35681              		.loc 1 5587 4 is_stmt 1 view .LVU9647
 35682 0056 FFF7FEFF 		bl	incpc
ARM GAS  /tmp/cccVhVyH.s 			page 894


 35683              	.LVL2760:
5588:src/xeq.c     **** #ifndef REALBUILD
 35684              		.loc 1 5588 4 view .LVU9648
 35685 005a 3846     		mov	r0, r7
 35686 005c FFF7FEFF 		bl	xeq
 35687              	.LVL2761:
5590:src/xeq.c     **** #endif
 35688              		.loc 1 5590 4 view .LVU9649
5590:src/xeq.c     **** #endif
 35689              		.loc 1 5590 15 is_stmt 0 view .LVU9650
 35690 0060 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 35691              	.LBB4749:
 35692              	.LBB4750:
5509:src/xeq.c     **** 		xeq_xrom2();
 35693              		.loc 1 5509 5 view .LVU9651
 35694 0062 94F91720 		ldrsb	r2, [r4, #23]
 35695              	.LBE4750:
 35696              	.LBE4749:
5590:src/xeq.c     **** #endif
 35697              		.loc 1 5590 15 view .LVU9652
 35698 0066 66F34103 		bfi	r3, r6, #1, #1
 35699              	.LBB4754:
 35700              	.LBB4751:
5509:src/xeq.c     **** 		xeq_xrom2();
 35701              		.loc 1 5509 5 view .LVU9653
 35702 006a 002A     		cmp	r2, #0
 35703              	.LBE4751:
 35704              	.LBE4754:
5590:src/xeq.c     **** #endif
 35705              		.loc 1 5590 15 view .LVU9654
 35706 006c 2376     		strb	r3, [r4, #24]
5592:src/xeq.c     **** 			set_running_off_sst();
 35707              		.loc 1 5592 4 is_stmt 1 view .LVU9655
 35708              	.LBB4755:
 35709              	.LBI4749:
5507:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 35710              		.loc 1 5507 6 view .LVU9656
 35711              	.LBB4752:
5509:src/xeq.c     **** 		xeq_xrom2();
 35712              		.loc 1 5509 2 view .LVU9657
5509:src/xeq.c     **** 		xeq_xrom2();
 35713              		.loc 1 5509 5 is_stmt 0 view .LVU9658
 35714 006e 12DA     		bge	.L2683
 35715              	.L2678:
 35716              	.LBE4752:
 35717              	.LBE4755:
5593:src/xeq.c     **** 		}
 35718              		.loc 1 5593 4 is_stmt 1 view .LVU9659
 35719              	.LBB4756:
 35720              	.LBI4756:
5816:src/xeq.c     **** 	Running = 0;
 35721              		.loc 1 5816 6 view .LVU9660
 35722              	.LBB4757:
5817:src/xeq.c     **** }
 35723              		.loc 1 5817 2 view .LVU9661
5817:src/xeq.c     **** }
 35724              		.loc 1 5817 10 is_stmt 0 view .LVU9662
ARM GAS  /tmp/cccVhVyH.s 			page 895


 35725 0070 0023     		movs	r3, #0
 35726 0072 C8F80030 		str	r3, [r8]
5818:src/xeq.c     **** 
 35727              		.loc 1 5818 1 view .LVU9663
 35728 0076 D3E7     		b	.L2671
 35729              	.LVL2762:
 35730              	.L2680:
5818:src/xeq.c     **** 
 35731              		.loc 1 5818 1 view .LVU9664
 35732              	.LBE4757:
 35733              	.LBE4756:
5575:src/xeq.c     **** 
 35734              		.loc 1 5575 3 is_stmt 1 view .LVU9665
 35735 0078 FFF7FEFF 		bl	decpc
 35736              	.LVL2763:
5577:src/xeq.c     **** 		// Display the step
 35737              		.loc 1 5577 2 view .LVU9666
5577:src/xeq.c     **** 		// Display the step
 35738              		.loc 1 5577 6 is_stmt 0 view .LVU9667
 35739 007c A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5577:src/xeq.c     **** 		// Display the step
 35740              		.loc 1 5577 5 view .LVU9668
 35741 007e 5A06     		lsls	r2, r3, #25
 35742 0080 CED5     		bpl	.L2671
5579:src/xeq.c     **** 		print_step(op);
 35743              		.loc 1 5579 3 is_stmt 1 view .LVU9669
5579:src/xeq.c     **** 		print_step(op);
 35744              		.loc 1 5579 16 is_stmt 0 view .LVU9670
 35745 0082 084B     		ldr	r3, .L2684+8
 35746 0084 1B68     		ldr	r3, [r3]
5579:src/xeq.c     **** 		print_step(op);
 35747              		.loc 1 5579 8 view .LVU9671
 35748 0086 B3F8E007 		ldrh	r0, [r3, #2016]
 35749 008a FFF7FEFF 		bl	getprog
 35750              	.LVL2764:
5580:src/xeq.c     **** 		if (kind == 1) {
 35751              		.loc 1 5580 3 is_stmt 1 view .LVU9672
5601:src/xeq.c     **** 
 35752              		.loc 1 5601 1 is_stmt 0 view .LVU9673
 35753 008e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 35754              		.cfi_remember_state
 35755              		.cfi_restore 14
 35756              		.cfi_restore 8
 35757              		.cfi_restore 7
 35758              		.cfi_restore 6
 35759              		.cfi_restore 5
 35760              		.cfi_restore 4
 35761              		.cfi_def_cfa_offset 0
5580:src/xeq.c     **** 		if (kind == 1) {
 35762              		.loc 1 5580 3 view .LVU9674
 35763 0092 FFF7FEBF 		b	print_step
 35764              	.LVL2765:
 35765              	.L2683:
 35766              		.cfi_restore_state
 35767              	.LBB4758:
 35768              	.LBB4753:
5510:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 896


 35769              		.loc 1 5510 3 is_stmt 1 view .LVU9675
 35770 0096 FFF7FEFF 		bl	xeq_xrom2
 35771              	.LVL2766:
 35772 009a E9E7     		b	.L2678
 35773              	.L2685:
 35774              		.align	2
 35775              	.L2684:
 35776 009c 00000000 		.word	StateWhileOn
 35777 00a0 00000000 		.word	OpCode
 35778 00a4 00000000 		.word	main_ram
 35779 00a8 00000000 		.word	Running
 35780              	.LBE4753:
 35781              	.LBE4758:
 35782              		.cfi_endproc
 35783              	.LFE256:
 35785              		.section	.text.init_34s,"ax",%progbits
 35786              		.align	1
 35787              		.p2align 2,,3
 35788              		.global	init_34s
 35789              		.syntax unified
 35790              		.thumb
 35791              		.thumb_func
 35792              		.fpu fpv4-sp-d16
 35794              	init_34s:
 35795              	.LFB278:
6347:src/xeq.c     **** 
6348:src/xeq.c     **** 
6349:src/xeq.c     **** /*
6350:src/xeq.c     ****  *  Debugging output for the console version
6351:src/xeq.c     ****  */
6352:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE) && !defined(WP34STEST)
6353:src/xeq.c     **** extern unsigned char remap_chars(unsigned char ch);
6354:src/xeq.c     **** 
6355:src/xeq.c     **** static int compare(s_opcode a1, s_opcode a2, int cata) {
6356:src/xeq.c     **** 	char b1[16], b2[16];
6357:src/xeq.c     **** 	const unsigned char *s1, *s2;
6358:src/xeq.c     **** 	int i;
6359:src/xeq.c     **** 
6360:src/xeq.c     **** 	xset(b1, 0, sizeof(b1));
6361:src/xeq.c     **** 	xset(b2, 0, sizeof(b2));
6362:src/xeq.c     **** 	s1 = (unsigned char *)catcmd(a1, b1);
6363:src/xeq.c     **** 	s2 = (unsigned char *)catcmd(a2, b2);
6364:src/xeq.c     **** 	if (*s1 == COMPLEX_PREFIX) s1++;
6365:src/xeq.c     **** 	if (*s2 == COMPLEX_PREFIX) s2++;
6366:src/xeq.c     **** 
6367:src/xeq.c     **** 	for (i=0;;i++) {
6368:src/xeq.c     **** 		unsigned char c1 = *s1++;
6369:src/xeq.c     **** 		unsigned char c2 = *s2++;
6370:src/xeq.c     **** 		c1 = remap_chars(c1);
6371:src/xeq.c     **** 		c2 = remap_chars(c2);
6372:src/xeq.c     **** 
6373:src/xeq.c     **** 		if (c1 != c2) {
6374:src/xeq.c     **** 			if (c1 > c2) {
6375:src/xeq.c     **** 				return 1;
6376:src/xeq.c     **** 			}
6377:src/xeq.c     **** 			return 0;
6378:src/xeq.c     **** 		} else if (c1 == '\0')
ARM GAS  /tmp/cccVhVyH.s 			page 897


6379:src/xeq.c     **** 			break;
6380:src/xeq.c     **** 	}
6381:src/xeq.c     **** 	return 0;
6382:src/xeq.c     **** }
6383:src/xeq.c     **** 
6384:src/xeq.c     **** static void check_cat(const enum catalogues cata, const char *name) {
6385:src/xeq.c     **** 	int i;
6386:src/xeq.c     **** 	char b1[16], b2[16];
6387:src/xeq.c     **** 	const int oldcata = State2.catalogue;
6388:src/xeq.c     **** 	int n;
6389:src/xeq.c     **** 
6390:src/xeq.c     **** 	State2.catalogue = cata;
6391:src/xeq.c     **** 	n = current_catalogue_max();
6392:src/xeq.c     **** 	for (i=1; i<n; i++) {
6393:src/xeq.c     **** 		opcode cold = current_catalogue(i-1);
6394:src/xeq.c     **** 		opcode c = current_catalogue(i);
6395:src/xeq.c     **** 		if (compare(cold, c, cata))
6396:src/xeq.c     **** 			error("catalogue %s row %04x / %04x  %d / %d: %04o / %04o (%s / %s)", name, cold, c, i-1, i,
6397:src/xeq.c     **** 					0xff & cold, 0xff & c,
6398:src/xeq.c     **** 					catcmd(cold, b1), catcmd(c, b2));
6399:src/xeq.c     **** 	}
6400:src/xeq.c     **** 	State2.catalogue = oldcata;
6401:src/xeq.c     **** }
6402:src/xeq.c     **** 
6403:src/xeq.c     **** static void check_const_cat(void) {
6404:src/xeq.c     **** 	int i;
6405:src/xeq.c     **** 	char b1[16], b2[16];
6406:src/xeq.c     **** 	char p1[64], p2[64];
6407:src/xeq.c     **** 
6408:src/xeq.c     **** 	for (i=1; i<NUM_CONSTS_CAT; i++) {
6409:src/xeq.c     **** 		if (compare(CONST(i-1), CONST(i), 0)) {
6410:src/xeq.c     **** 			prettify(catcmd(CONST(i-1), b1), p1, 0);
6411:src/xeq.c     **** 			prettify(catcmd(CONST(i), b2), p2, 0);
6412:src/xeq.c     **** 			error("constants row %d / %d: %s / %s", i, i+1, p1, p2);
6413:src/xeq.c     **** 		}
6414:src/xeq.c     **** 	}
6415:src/xeq.c     **** }
6416:src/xeq.c     **** 
6417:src/xeq.c     **** static void bad_table(const char *t, int row, const char *n, int nlen) {
6418:src/xeq.c     **** 	char buf[64], name[20];
6419:src/xeq.c     **** 	int i;
6420:src/xeq.c     **** 
6421:src/xeq.c     **** 	for (i=0; i<nlen; i++)
6422:src/xeq.c     **** 		name[i] = n[i];
6423:src/xeq.c     **** 	name[nlen] = '\0';
6424:src/xeq.c     **** 	prettify(name, buf, 0);
6425:src/xeq.c     **** 	error("%s table row %d: %6s", t, row, buf);
6426:src/xeq.c     **** }
6427:src/xeq.c     **** 
6428:src/xeq.c     **** #endif
6429:src/xeq.c     **** 
6430:src/xeq.c     **** /* Main initialisation routine that sets things up for us.
6431:src/xeq.c     ****  * Returns a nonzero result if it has cleared ram.
6432:src/xeq.c     ****  */
6433:src/xeq.c     **** int init_34s(void)
6434:src/xeq.c     **** {
 35796              		.loc 1 6434 1 view -0
ARM GAS  /tmp/cccVhVyH.s 			page 898


 35797              		.cfi_startproc
 35798              		@ args = 0, pretend = 0, frame = 0
 35799              		@ frame_needed = 0, uses_anonymous_args = 0
6435:src/xeq.c     **** 	const int cleared = checksum_all();
 35800              		.loc 1 6435 2 view .LVU9677
6434:src/xeq.c     **** 	const int cleared = checksum_all();
 35801              		.loc 1 6434 1 is_stmt 0 view .LVU9678
 35802 0000 10B5     		push	{r4, lr}
 35803              		.cfi_def_cfa_offset 8
 35804              		.cfi_offset 4, -8
 35805              		.cfi_offset 14, -4
 35806              		.loc 1 6435 22 view .LVU9679
 35807 0002 FFF7FEFF 		bl	checksum_ram
 35808              	.LVL2767:
6436:src/xeq.c     **** 	if (cleared) {
 35809              		.loc 1 6436 2 is_stmt 1 view .LVU9680
 35810              		.loc 1 6436 5 is_stmt 0 view .LVU9681
 35811 0006 0446     		mov	r4, r0
 35812 0008 80B9     		cbnz	r0, .L2692
 35813              	.LVL2768:
 35814              	.L2687:
6437:src/xeq.c     **** 		reset();
6438:src/xeq.c     **** 	}
6439:src/xeq.c     **** 	init_state();
 35815              		.loc 1 6439 2 is_stmt 1 view .LVU9682
 35816 000a FFF7FEFF 		bl	init_state
 35817              	.LVL2769:
6440:src/xeq.c     **** 	xeq_init_contexts();
 35818              		.loc 1 6440 2 view .LVU9683
 35819 000e FFF7FEFF 		bl	xeq_init_contexts
 35820              	.LVL2770:
6441:src/xeq.c     **** 	ShowRPN = 1;
 35821              		.loc 1 6441 2 view .LVU9684
 35822              		.loc 1 6441 10 is_stmt 0 view .LVU9685
 35823 0012 084B     		ldr	r3, .L2693
 35824 0014 0122     		movs	r2, #1
6442:src/xeq.c     **** 	set_dot(RPN);
 35825              		.loc 1 6442 2 view .LVU9686
 35826 0016 8D20     		movs	r0, #141
6441:src/xeq.c     **** 	ShowRPN = 1;
 35827              		.loc 1 6441 10 view .LVU9687
 35828 0018 1A60     		str	r2, [r3]
 35829              		.loc 1 6442 2 is_stmt 1 view .LVU9688
 35830 001a FFF7FEFF 		bl	set_dot
 35831              	.LVL2771:
6443:src/xeq.c     **** 
6444:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
6445:src/xeq.c     **** 	StopWatchRunning = 0;
 35832              		.loc 1 6445 2 view .LVU9689
 35833              		.loc 1 6445 19 is_stmt 0 view .LVU9690
 35834 001e 064B     		ldr	r3, .L2693+4
 35835 0020 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 35836 0022 6FF30002 		bfc	r2, #0, #1
6446:src/xeq.c     **** #endif
6447:src/xeq.c     **** #if defined(CONSOLE) && !defined(WP34STEST) && defined(DEBUG)
6448:src/xeq.c     **** 	{
6449:src/xeq.c     **** 		int i;
ARM GAS  /tmp/cccVhVyH.s 			page 899


6450:src/xeq.c     **** 	/* Sanity check the function table indices.
6451:src/xeq.c     **** 	 * These indicies must correspond exactly with the enum definition.
6452:src/xeq.c     **** 	 * This code validates that this is true and prints error messages
6453:src/xeq.c     **** 	 * if it isn't.
6454:src/xeq.c     **** 	 */
6455:src/xeq.c     **** 	for (i=0; i<NUM_MONADIC; i++)
6456:src/xeq.c     **** 		if (monfuncs[i].n != i)
6457:src/xeq.c     **** 			bad_table("monadic function", i, monfuncs[i].fname, NAME_LEN);
6458:src/xeq.c     **** 	for (i=0; i<NUM_DYADIC; i++)
6459:src/xeq.c     **** 		if (dyfuncs[i].n != i)
6460:src/xeq.c     **** 			bad_table("dyadic function", i, dyfuncs[i].fname, NAME_LEN);
6461:src/xeq.c     **** 	for (i=0; i<NUM_TRIADIC; i++)
6462:src/xeq.c     **** 		if (trifuncs[i].n != i)
6463:src/xeq.c     **** 			bad_table("triadic function", i, trifuncs[i].fname, NAME_LEN);
6464:src/xeq.c     **** 	for (i=0; i<NUM_NILADIC; i++)
6465:src/xeq.c     **** 		if (niladics[i].n != i)
6466:src/xeq.c     **** 			bad_table("niladic function", i, niladics[i].nname, NAME_LEN);
6467:src/xeq.c     **** 	for (i=0; i<NUM_RARG; i++)
6468:src/xeq.c     **** 		if (argcmds[i].n != i)
6469:src/xeq.c     **** 			bad_table("argument command", i, argcmds[i].cmd, NAME_LEN);
6470:src/xeq.c     **** 	for (i=0; i<NUM_MULTI; i++)
6471:src/xeq.c     **** 		if (multicmds[i].n != i)
6472:src/xeq.c     **** 			bad_table("multi command", i, multicmds[i].cmd, NAME_LEN);
6473:src/xeq.c     **** 	check_const_cat();
6474:src/xeq.c     **** 	check_cat(CATALOGUE_COMPLEX, "complex");
6475:src/xeq.c     **** 	check_cat(CATALOGUE_STATS, "statistics");
6476:src/xeq.c     **** 	check_cat(CATALOGUE_SUMS, "summations");
6477:src/xeq.c     **** 	check_cat(CATALOGUE_PROB, "probability");
6478:src/xeq.c     **** 	check_cat(CATALOGUE_PROG, "programme");
6479:src/xeq.c     **** 	check_cat(CATALOGUE_MODE, "mode");
6480:src/xeq.c     **** 	check_cat(CATALOGUE_TEST, "tests");
6481:src/xeq.c     **** 	check_cat(CATALOGUE_INT, "int");
6482:src/xeq.c     **** 	check_cat(CATALOGUE_MATRIX, "matrix");
6483:src/xeq.c     **** 	/*
6484:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA, "alpha");
6485:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_LETTERS, "alpha special upper case letters");
6486:src/xeq.c     **** 	// check_cat(CATALOGUE_ALPHA_LETTERS_LOWER, "alpha special lower letters");
6487:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SUBSCRIPTS, "alpha subscripts");
6488:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SYMBOLS, "alpha symbols");
6489:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_COMPARES, "alpha compares");
6490:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_ARROWS, "alpha arrows");
6491:src/xeq.c     **** 	*/
6492:src/xeq.c     **** 	check_cat(CATALOGUE_CONV, "conversion");
6493:src/xeq.c     **** 	check_cat(CATALOGUE_NORMAL, "float");
6494:src/xeq.c     **** #ifdef INCLUDE_INTERNAL_CATALOGUE
6495:src/xeq.c     **** 	check_cat(CATALOGUE_INTERNAL, "internal");
6496:src/xeq.c     **** #endif
6497:src/xeq.c     ****         if (sizeof(unsigned long long int) != sizeof(UState))
6498:src/xeq.c     ****             error("sizeof register (%u) != sizeof user state (%u)\n", sizeof(unsigned long long int
6499:src/xeq.c     **** 	}
6500:src/xeq.c     **** #endif
6501:src/xeq.c     **** 	return cleared;
6502:src/xeq.c     **** }
 35837              		.loc 1 6502 1 view .LVU9691
 35838 0026 2046     		mov	r0, r4
6445:src/xeq.c     **** #endif
 35839              		.loc 1 6445 19 view .LVU9692
ARM GAS  /tmp/cccVhVyH.s 			page 900


 35840 0028 1A70     		strb	r2, [r3]
6501:src/xeq.c     **** }
 35841              		.loc 1 6501 2 is_stmt 1 view .LVU9693
 35842              		.loc 1 6502 1 is_stmt 0 view .LVU9694
 35843 002a 10BD     		pop	{r4, pc}
 35844              	.LVL2772:
 35845              	.L2692:
6437:src/xeq.c     **** 	}
 35846              		.loc 1 6437 3 is_stmt 1 view .LVU9695
 35847 002c FFF7FEFF 		bl	reset
 35848              	.LVL2773:
6437:src/xeq.c     **** 	}
 35849              		.loc 1 6437 3 is_stmt 0 view .LVU9696
 35850 0030 EBE7     		b	.L2687
 35851              	.L2694:
 35852 0032 00BF     		.align	2
 35853              	.L2693:
 35854 0034 00000000 		.word	ShowRPN
 35855 0038 00000000 		.word	StopWatchStatus
 35856              		.cfi_endproc
 35857              	.LFE278:
 35859              		.section	.rodata.paste_raw_x.str1.4,"aMS",%progbits,1
 35860              		.align	2
 35861              	.LC9:
 35862 0000 0D0A0920 		.ascii	"\015\012\011 :;\000"
 35862      3A3B00
 35863              		.section	.text.paste_raw_x,"ax",%progbits
 35864              		.align	1
 35865              		.p2align 2,,3
 35866              		.global	paste_raw_x
 35867              		.syntax unified
 35868              		.thumb
 35869              		.thumb_func
 35870              		.fpu fpv4-sp-d16
 35872              	paste_raw_x:
 35873              	.LVL2774:
 35874              	.LFB279:
6503:src/xeq.c     **** 
6504:src/xeq.c     **** #ifndef REALBUILD
6505:src/xeq.c     **** 
6506:src/xeq.c     **** #include "string.h"
6507:src/xeq.c     **** 
6508:src/xeq.c     **** void paste_raw_x(const char *in)
6509:src/xeq.c     **** {
 35875              		.loc 1 6509 1 is_stmt 1 view -0
 35876              		.cfi_startproc
 35877              		@ args = 0, pretend = 0, frame = 40
 35878              		@ frame_needed = 0, uses_anonymous_args = 0
6510:src/xeq.c     **** 	char *buffer = strdup( in );
 35879              		.loc 1 6510 2 view .LVU9698
6509:src/xeq.c     **** 	char *buffer = strdup( in );
 35880              		.loc 1 6509 1 is_stmt 0 view .LVU9699
 35881 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 35882              		.cfi_def_cfa_offset 32
 35883              		.cfi_offset 4, -32
 35884              		.cfi_offset 5, -28
 35885              		.cfi_offset 6, -24
ARM GAS  /tmp/cccVhVyH.s 			page 901


 35886              		.cfi_offset 7, -20
 35887              		.cfi_offset 8, -16
 35888              		.cfi_offset 9, -12
 35889              		.cfi_offset 10, -8
 35890              		.cfi_offset 14, -4
 35891 0004 8AB0     		sub	sp, sp, #40
 35892              		.cfi_def_cfa_offset 72
 35893              		.loc 1 6510 17 view .LVU9700
 35894 0006 FFF7FEFF 		bl	strdup
 35895              	.LVL2775:
6511:src/xeq.c     **** 
6512:src/xeq.c     **** 	if ( buffer ) {
 35896              		.loc 1 6512 2 is_stmt 1 view .LVU9701
 35897              		.loc 1 6512 5 is_stmt 0 view .LVU9702
 35898 000a 0028     		cmp	r0, #0
 35899 000c 5CD0     		beq	.L2696
 35900              	.LBB4759:
6513:src/xeq.c     **** 		static const char *delim = "\r\n\t :;";
 35901              		.loc 1 6513 3 is_stmt 1 view .LVU9703
6514:src/xeq.c     **** 		char *p = strtok( buffer, delim );
 35902              		.loc 1 6514 3 view .LVU9704
 35903              	.LBB4760:
 35904              	.LBB4761:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35905              		.loc 1 1232 6 is_stmt 0 view .LVU9705
 35906 000e 394D     		ldr	r5, .L2731
 35907              	.LBE4761:
 35908              	.LBE4760:
 35909              		.loc 1 6514 13 view .LVU9706
 35910 0010 3949     		ldr	r1, .L2731+4
 35911 0012 8146     		mov	r9, r0
 35912 0014 FFF7FEFF 		bl	strtok
 35913              	.LVL2776:
 35914              	.LBB4765:
 35915              	.LBB4762:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35916              		.loc 1 1232 5 view .LVU9707
 35917 0018 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 35918              	.LBE4762:
 35919              	.LBE4765:
 35920              		.loc 1 6514 13 view .LVU9708
 35921 001a 0446     		mov	r4, r0
 35922              	.LVL2777:
6515:src/xeq.c     **** 		process_cmdline();
 35923              		.loc 1 6515 3 is_stmt 1 view .LVU9709
 35924              	.LBB4766:
 35925              	.LBI4760:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 35926              		.loc 1 1229 6 view .LVU9710
 35927              	.LBB4763:
1230:src/xeq.c     **** 
 35928              		.loc 1 1230 2 view .LVU9711
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35929              		.loc 1 1232 2 view .LVU9712
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35930              		.loc 1 1232 5 is_stmt 0 view .LVU9713
 35931 001c 002B     		cmp	r3, #0
ARM GAS  /tmp/cccVhVyH.s 			page 902


 35932 001e 5ED1     		bne	.L2727
 35933              	.LVL2778:
 35934              	.L2697:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35935              		.loc 1 1232 5 view .LVU9714
 35936              	.LBE4763:
 35937              	.LBE4766:
6516:src/xeq.c     **** 		while ( p ) {
 35938              		.loc 1 6516 9 is_stmt 1 view .LVU9715
 35939 0020 002C     		cmp	r4, #0
 35940 0022 4ED0     		beq	.L2705
 35941 0024 354E     		ldr	r6, .L2731+8
 35942              	.LBB4767:
 35943              	.LBB4768:
6517:src/xeq.c     **** 			char *pp = strchr( p, ',' );
6518:src/xeq.c     **** 			if ( pp ) {
6519:src/xeq.c     **** 				*pp = '.';
6520:src/xeq.c     **** 			}
6521:src/xeq.c     **** 			if (is_intmode()) {
6522:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
6523:src/xeq.c     **** 				lift_if_enabled();
6524:src/xeq.c     **** 				set_lift();
6525:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
6526:src/xeq.c     **** 			} else {
6527:src/xeq.c     **** 				decNumber x;
6528:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 35944              		.loc 1 6528 5 is_stmt 0 view .LVU9716
 35945 0026 DFF8DC80 		ldr	r8, .L2731+16
 35946              	.LBE4768:
6529:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
6530:src/xeq.c     **** 					lift_if_enabled();
6531:src/xeq.c     **** 					set_lift();
6532:src/xeq.c     **** 					setX(&x);
6533:src/xeq.c     **** 				}
6534:src/xeq.c     **** 				else {
6535:src/xeq.c     **** 					error_message(Error);
6536:src/xeq.c     **** 					Error = 0;
6537:src/xeq.c     **** 					break;
6538:src/xeq.c     **** 				}
6539:src/xeq.c     **** 			}
6540:src/xeq.c     **** 			p = strtok( NULL, delim );
 35947              		.loc 1 6540 8 view .LVU9717
 35948 002a 334F     		ldr	r7, .L2731+4
 35949 002c 21E0     		b	.L2706
 35950              	.LVL2779:
 35951              	.L2729:
 35952              	.LBB4787:
6522:src/xeq.c     **** 				lift_if_enabled();
 35953              		.loc 1 6522 5 is_stmt 1 view .LVU9718
6522:src/xeq.c     **** 				lift_if_enabled();
 35954              		.loc 1 6522 31 is_stmt 0 view .LVU9719
 35955 002e 94F800A0 		ldrb	r10, [r4]	@ zero_extendqisi2
 35956              	.LBB4788:
 35957              	.LBB4789:
 35958              	.LBB4790:
 35959              	.LBB4791:
 744:src/xeq.c     **** }
ARM GAS  /tmp/cccVhVyH.s 			page 903


 35960              		.loc 1 744 15 view .LVU9720
 35961 0032 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35962              	.LBE4791:
 35963              	.LBE4790:
 35964              	.LBE4789:
 35965              	.LBE4788:
6522:src/xeq.c     **** 				lift_if_enabled();
 35966              		.loc 1 6522 31 view .LVU9721
 35967 0034 AAF12D0A 		sub	r10, r10, #45
 35968 0038 BAFA8AFA 		clz	r10, r10
 35969              	.LBB4797:
 35970              	.LBB4794:
 748:src/xeq.c     **** 		lift();
 35971              		.loc 1 748 5 view .LVU9722
 35972 003c 5A06     		lsls	r2, r3, #25
 35973              	.LBE4794:
 35974              	.LBE4797:
6522:src/xeq.c     **** 				lift_if_enabled();
 35975              		.loc 1 6522 31 view .LVU9723
 35976 003e 4FEA5A1A 		lsr	r10, r10, #5
 35977              	.LVL2780:
6523:src/xeq.c     **** 				set_lift();
 35978              		.loc 1 6523 5 is_stmt 1 view .LVU9724
 35979              	.LBB4798:
 35980              	.LBI4788:
 747:src/xeq.c     **** 	if (get_lift())
 35981              		.loc 1 747 6 view .LVU9725
 35982              	.LBB4795:
 748:src/xeq.c     **** 		lift();
 35983              		.loc 1 748 2 view .LVU9726
 35984              	.LBB4793:
 35985              	.LBI4790:
 743:src/xeq.c     **** 	return State2.state_lift;
 35986              		.loc 1 743 12 view .LVU9727
 35987              	.LBB4792:
 744:src/xeq.c     **** }
 35988              		.loc 1 744 2 view .LVU9728
 35989              	.LBE4792:
 35990              	.LBE4793:
 748:src/xeq.c     **** 		lift();
 35991              		.loc 1 748 5 is_stmt 0 view .LVU9729
 35992 0042 46D4     		bmi	.L2728
 35993              	.LVL2781:
 35994              	.L2701:
 748:src/xeq.c     **** 		lift();
 35995              		.loc 1 748 5 view .LVU9730
 35996              	.LBE4795:
 35997              	.LBE4798:
6524:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
 35998              		.loc 1 6524 5 is_stmt 1 view .LVU9731
 35999              	.LBB4799:
 36000              	.LBI4799:
 767:src/xeq.c     ****     State2.state_lift = 1;
 36001              		.loc 1 767 6 view .LVU9732
 36002              	.LBB4800:
 768:src/xeq.c     **** }
 36003              		.loc 1 768 5 view .LVU9733
ARM GAS  /tmp/cccVhVyH.s 			page 904


 768:src/xeq.c     **** }
 36004              		.loc 1 768 23 is_stmt 0 view .LVU9734
 36005 0044 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 36006 0046 43F04003 		orr	r3, r3, #64
 36007 004a EB75     		strb	r3, [r5, #23]
 36008              	.LBE4800:
 36009              	.LBE4799:
6525:src/xeq.c     **** 			} else {
 36010              		.loc 1 6525 5 is_stmt 1 view .LVU9735
6525:src/xeq.c     **** 			} else {
 36011              		.loc 1 6525 50 is_stmt 0 view .LVU9736
 36012 004c FFF7FEFF 		bl	int_base
 36013              	.LVL2782:
6525:src/xeq.c     **** 			} else {
 36014              		.loc 1 6525 37 view .LVU9737
 36015 0050 5444     		add	r4, r4, r10
 36016              	.LVL2783:
6525:src/xeq.c     **** 			} else {
 36017              		.loc 1 6525 50 view .LVU9738
 36018 0052 0246     		mov	r2, r0
6525:src/xeq.c     **** 			} else {
 36019              		.loc 1 6525 5 view .LVU9739
 36020 0054 0021     		movs	r1, #0
 36021 0056 2046     		mov	r0, r4
 36022 0058 FFF7FEFF 		bl	strtoull
 36023              	.LVL2784:
 36024 005c 5246     		mov	r2, r10
 36025 005e FFF7FEFF 		bl	build_value
 36026              	.LVL2785:
 36027 0062 FFF7FEFF 		bl	setX_int
 36028              	.LVL2786:
 36029              	.LBE4787:
 36030              		.loc 1 6540 4 is_stmt 1 view .LVU9740
 36031              		.loc 1 6540 8 is_stmt 0 view .LVU9741
 36032 0066 3946     		mov	r1, r7
 36033 0068 0020     		movs	r0, #0
 36034 006a FFF7FEFF 		bl	strtok
 36035              	.LVL2787:
 36036              		.loc 1 6540 8 view .LVU9742
 36037              	.LBE4767:
6516:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 36038              		.loc 1 6516 9 is_stmt 1 view .LVU9743
 36039 006e 0446     		mov	r4, r0
 36040 0070 38B3     		cbz	r0, .L2705
 36041              	.LVL2788:
 36042              	.L2706:
 36043              	.LBB4806:
6517:src/xeq.c     **** 			if ( pp ) {
 36044              		.loc 1 6517 4 view .LVU9744
6517:src/xeq.c     **** 			if ( pp ) {
 36045              		.loc 1 6517 15 is_stmt 0 view .LVU9745
 36046 0072 2C21     		movs	r1, #44
 36047 0074 2046     		mov	r0, r4
 36048 0076 FFF7FEFF 		bl	strchr
 36049              	.LVL2789:
6518:src/xeq.c     **** 				*pp = '.';
 36050              		.loc 1 6518 4 is_stmt 1 view .LVU9746
ARM GAS  /tmp/cccVhVyH.s 			page 905


6518:src/xeq.c     **** 				*pp = '.';
 36051              		.loc 1 6518 7 is_stmt 0 view .LVU9747
 36052 007a 08B1     		cbz	r0, .L2699
6519:src/xeq.c     **** 			}
 36053              		.loc 1 6519 5 is_stmt 1 view .LVU9748
6519:src/xeq.c     **** 			}
 36054              		.loc 1 6519 9 is_stmt 0 view .LVU9749
 36055 007c 2E23     		movs	r3, #46
 36056 007e 0370     		strb	r3, [r0]
 36057              	.L2699:
6521:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 36058              		.loc 1 6521 4 is_stmt 1 view .LVU9750
6521:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 36059              		.loc 1 6521 8 is_stmt 0 view .LVU9751
 36060 0080 3368     		ldr	r3, [r6]
 36061 0082 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
6521:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 36062              		.loc 1 6521 7 view .LVU9752
 36063 0086 13F0010A 		ands	r10, r3, #1
 36064 008a D0D1     		bne	.L2729
 36065              	.LBB4802:
6527:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 36066              		.loc 1 6527 5 is_stmt 1 view .LVU9753
6528:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 36067              		.loc 1 6528 5 view .LVU9754
 36068 008c 2146     		mov	r1, r4
 36069 008e 01A8     		add	r0, sp, #4
 36070              	.LVL2790:
6528:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 36071              		.loc 1 6528 5 is_stmt 0 view .LVU9755
 36072 0090 4246     		mov	r2, r8
 36073 0092 FFF7FEFF 		bl	decNumberFromString
 36074              	.LVL2791:
6529:src/xeq.c     **** 					lift_if_enabled();
 36075              		.loc 1 6529 5 is_stmt 1 view .LVU9756
6529:src/xeq.c     **** 					lift_if_enabled();
 36076              		.loc 1 6529 11 is_stmt 0 view .LVU9757
 36077 0096 01A8     		add	r0, sp, #4
 36078 0098 FFF7FEFF 		bl	check_special
 36079              	.LVL2792:
6529:src/xeq.c     **** 					lift_if_enabled();
 36080              		.loc 1 6529 8 view .LVU9758
 36081 009c 10BB     		cbnz	r0, .L2703
6530:src/xeq.c     **** 					set_lift();
 36082              		.loc 1 6530 6 is_stmt 1 view .LVU9759
 36083              	.LBB4769:
 36084              	.LBI4769:
 747:src/xeq.c     **** 	if (get_lift())
 36085              		.loc 1 747 6 view .LVU9760
 36086              	.LBB4770:
 748:src/xeq.c     **** 		lift();
 36087              		.loc 1 748 2 view .LVU9761
 36088              	.LBB4771:
 36089              	.LBI4771:
 743:src/xeq.c     **** 	return State2.state_lift;
 36090              		.loc 1 743 12 view .LVU9762
 36091              	.LBB4772:
ARM GAS  /tmp/cccVhVyH.s 			page 906


 744:src/xeq.c     **** }
 36092              		.loc 1 744 2 view .LVU9763
 744:src/xeq.c     **** }
 36093              		.loc 1 744 15 is_stmt 0 view .LVU9764
 36094 009e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 36095              	.LBE4772:
 36096              	.LBE4771:
 748:src/xeq.c     **** 		lift();
 36097              		.loc 1 748 5 view .LVU9765
 36098 00a0 5B06     		lsls	r3, r3, #25
 36099 00a2 19D4     		bmi	.L2730
 36100              	.L2704:
 36101              	.LBE4770:
 36102              	.LBE4769:
6531:src/xeq.c     **** 					setX(&x);
 36103              		.loc 1 6531 6 is_stmt 1 view .LVU9766
 36104              	.LBB4774:
 36105              	.LBI4774:
 767:src/xeq.c     ****     State2.state_lift = 1;
 36106              		.loc 1 767 6 view .LVU9767
 36107              	.LBB4775:
 768:src/xeq.c     **** }
 36108              		.loc 1 768 5 view .LVU9768
 768:src/xeq.c     **** }
 36109              		.loc 1 768 23 is_stmt 0 view .LVU9769
 36110 00a4 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 36111              	.LBE4775:
 36112              	.LBE4774:
 36113              	.LBB4778:
 36114              	.LBB4779:
 829:src/xeq.c     **** }
 36115              		.loc 1 829 2 view .LVU9770
 36116 00a6 01A9     		add	r1, sp, #4
 36117              	.LBE4779:
 36118              	.LBE4778:
 36119              	.LBB4782:
 36120              	.LBB4776:
 768:src/xeq.c     **** }
 36121              		.loc 1 768 23 view .LVU9771
 36122 00a8 43F04003 		orr	r3, r3, #64
 36123              	.LBE4776:
 36124              	.LBE4782:
 36125              	.LBB4783:
 36126              	.LBB4780:
 829:src/xeq.c     **** }
 36127              		.loc 1 829 2 view .LVU9772
 36128 00ac 6420     		movs	r0, #100
 36129              	.LBE4780:
 36130              	.LBE4783:
 36131              	.LBB4784:
 36132              	.LBB4777:
 768:src/xeq.c     **** }
 36133              		.loc 1 768 23 view .LVU9773
 36134 00ae EB75     		strb	r3, [r5, #23]
 36135              	.LBE4777:
 36136              	.LBE4784:
6532:src/xeq.c     **** 				}
ARM GAS  /tmp/cccVhVyH.s 			page 907


 36137              		.loc 1 6532 6 is_stmt 1 view .LVU9774
 36138              	.LVL2793:
 36139              	.LBB4785:
 36140              	.LBI4778:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 36141              		.loc 1 828 6 view .LVU9775
 36142              	.LBB4781:
 829:src/xeq.c     **** }
 36143              		.loc 1 829 2 view .LVU9776
 36144 00b0 FFF7FEFF 		bl	setRegister
 36145              	.LVL2794:
 829:src/xeq.c     **** }
 36146              		.loc 1 829 2 is_stmt 0 view .LVU9777
 36147              	.LBE4781:
 36148              	.LBE4785:
 36149              	.LBE4802:
 36150              		.loc 1 6540 4 is_stmt 1 view .LVU9778
 36151              		.loc 1 6540 8 is_stmt 0 view .LVU9779
 36152 00b4 3946     		mov	r1, r7
 36153 00b6 0020     		movs	r0, #0
 36154 00b8 FFF7FEFF 		bl	strtok
 36155              	.LVL2795:
 36156              		.loc 1 6540 8 view .LVU9780
 36157              	.LBE4806:
6516:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 36158              		.loc 1 6516 9 is_stmt 1 view .LVU9781
 36159 00bc 0446     		mov	r4, r0
 36160 00be 0028     		cmp	r0, #0
 36161 00c0 D7D1     		bne	.L2706
 36162              	.LVL2796:
 36163              	.L2705:
6541:src/xeq.c     **** 		}
6542:src/xeq.c     **** 		free( buffer );
 36164              		.loc 1 6542 3 view .LVU9782
 36165 00c2 4846     		mov	r0, r9
 36166 00c4 FFF7FEFF 		bl	free
 36167              	.LVL2797:
 36168              	.L2696:
 36169              		.loc 1 6542 3 is_stmt 0 view .LVU9783
 36170              	.LBE4759:
6543:src/xeq.c     **** 	}
6544:src/xeq.c     **** 	display();
 36171              		.loc 1 6544 2 is_stmt 1 view .LVU9784
 36172 00c8 FFF7FEFF 		bl	display
 36173              	.LVL2798:
6545:src/xeq.c     **** }
 36174              		.loc 1 6545 1 is_stmt 0 view .LVU9785
 36175 00cc 0AB0     		add	sp, sp, #40
 36176              		.cfi_remember_state
 36177              		.cfi_def_cfa_offset 32
 36178              		@ sp needed
 36179 00ce BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 36180              	.LVL2799:
 36181              	.L2728:
 36182              		.cfi_restore_state
 36183              	.LBB4810:
 36184              	.LBB4807:
ARM GAS  /tmp/cccVhVyH.s 			page 908


 36185              	.LBB4803:
 36186              	.LBB4801:
 36187              	.LBB4796:
 749:src/xeq.c     **** }
 36188              		.loc 1 749 3 is_stmt 1 view .LVU9786
 36189 00d2 FFF7FEFF 		bl	lift
 36190              	.LVL2800:
 749:src/xeq.c     **** }
 36191              		.loc 1 749 3 is_stmt 0 view .LVU9787
 36192 00d6 B5E7     		b	.L2701
 36193              	.LVL2801:
 36194              	.L2730:
 749:src/xeq.c     **** }
 36195              		.loc 1 749 3 view .LVU9788
 36196              	.LBE4796:
 36197              	.LBE4801:
 36198              	.LBE4803:
 36199              	.LBB4804:
 36200              	.LBB4786:
 36201              	.LBB4773:
 749:src/xeq.c     **** }
 36202              		.loc 1 749 3 is_stmt 1 view .LVU9789
 36203 00d8 FFF7FEFF 		bl	lift
 36204              	.LVL2802:
 36205 00dc E2E7     		b	.L2704
 36206              	.LVL2803:
 36207              	.L2727:
 749:src/xeq.c     **** }
 36208              		.loc 1 749 3 is_stmt 0 view .LVU9790
 36209              	.LBE4773:
 36210              	.LBE4786:
 36211              	.LBE4804:
 36212              	.LBE4807:
 36213              	.LBB4808:
 36214              	.LBB4764:
 36215 00de FFF7FEFF 		bl	process_cmdline.part.0
 36216              	.LVL2804:
 749:src/xeq.c     **** }
 36217              		.loc 1 749 3 view .LVU9791
 36218 00e2 9DE7     		b	.L2697
 36219              	.L2703:
 749:src/xeq.c     **** }
 36220              		.loc 1 749 3 view .LVU9792
 36221              	.LBE4764:
 36222              	.LBE4808:
 36223              	.LBB4809:
 36224              	.LBB4805:
6535:src/xeq.c     **** 					Error = 0;
 36225              		.loc 1 6535 6 is_stmt 1 view .LVU9793
 36226 00e4 064C     		ldr	r4, .L2731+12
 36227              	.LVL2805:
6535:src/xeq.c     **** 					Error = 0;
 36228              		.loc 1 6535 6 is_stmt 0 view .LVU9794
 36229 00e6 2068     		ldr	r0, [r4]
 36230 00e8 FFF7FEFF 		bl	error_message
 36231              	.LVL2806:
6536:src/xeq.c     **** 					break;
ARM GAS  /tmp/cccVhVyH.s 			page 909


 36232              		.loc 1 6536 6 is_stmt 1 view .LVU9795
6536:src/xeq.c     **** 					break;
 36233              		.loc 1 6536 12 is_stmt 0 view .LVU9796
 36234 00ec C4F800A0 		str	r10, [r4]
6537:src/xeq.c     **** 				}
 36235              		.loc 1 6537 6 is_stmt 1 view .LVU9797
 36236 00f0 E7E7     		b	.L2705
 36237              	.L2732:
 36238 00f2 00BF     		.align	2
 36239              	.L2731:
 36240 00f4 00000000 		.word	StateWhileOn
 36241 00f8 00000000 		.word	.LC9
 36242 00fc 00000000 		.word	main_ram
 36243 0100 00000000 		.word	Error
 36244 0104 00000000 		.word	Ctx
 36245              	.LBE4805:
 36246              	.LBE4809:
 36247              	.LBE4810:
 36248              		.cfi_endproc
 36249              	.LFE279:
 36251              		.global	__aeabi_uldivmod
 36252              		.section	.rodata.fill_buffer_from_raw_x.str1.4,"aMS",%progbits,1
 36253              		.align	2
 36254              	.LC10:
 36255 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 36255      34353637 
 36255      38394142 
 36255      43444546 
 36255      00
 36256              		.section	.text.fill_buffer_from_raw_x,"ax",%progbits
 36257              		.align	1
 36258              		.p2align 2,,3
 36259              		.global	fill_buffer_from_raw_x
 36260              		.syntax unified
 36261              		.thumb
 36262              		.thumb_func
 36263              		.fpu fpv4-sp-d16
 36265              	fill_buffer_from_raw_x:
 36266              	.LVL2807:
 36267              	.LFB280:
6546:src/xeq.c     **** 
6547:src/xeq.c     **** char* fill_buffer_from_raw_x(char *buffer)
6548:src/xeq.c     **** {
 36268              		.loc 1 6548 1 view -0
 36269              		.cfi_startproc
 36270              		@ args = 0, pretend = 0, frame = 40
 36271              		@ frame_needed = 0, uses_anonymous_args = 0
6549:src/xeq.c     **** 	process_cmdline();
 36272              		.loc 1 6549 2 view .LVU9799
 36273              	.LBB4811:
 36274              	.LBI4811:
1229:src/xeq.c     **** 	decNumber a, b, x, t;
 36275              		.loc 1 1229 6 view .LVU9800
 36276              	.LBB4812:
1230:src/xeq.c     **** 
 36277              		.loc 1 1230 2 view .LVU9801
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
ARM GAS  /tmp/cccVhVyH.s 			page 910


 36278              		.loc 1 1232 2 view .LVU9802
 36279              	.LBE4812:
 36280              	.LBE4811:
6548:src/xeq.c     **** 	process_cmdline();
 36281              		.loc 1 6548 1 is_stmt 0 view .LVU9803
 36282 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 36283              		.cfi_def_cfa_offset 36
 36284              		.cfi_offset 4, -36
 36285              		.cfi_offset 5, -32
 36286              		.cfi_offset 6, -28
 36287              		.cfi_offset 7, -24
 36288              		.cfi_offset 8, -20
 36289              		.cfi_offset 9, -16
 36290              		.cfi_offset 10, -12
 36291              		.cfi_offset 11, -8
 36292              		.cfi_offset 14, -4
 36293              	.LBB4816:
 36294              	.LBB4813:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 36295              		.loc 1 1232 6 view .LVU9804
 36296 0004 2F4B     		ldr	r3, .L2757
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 36297              		.loc 1 1232 5 view .LVU9805
 36298 0006 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 36299              	.LBE4813:
 36300              	.LBE4816:
6548:src/xeq.c     **** 	process_cmdline();
 36301              		.loc 1 6548 1 view .LVU9806
 36302 0008 8BB0     		sub	sp, sp, #44
 36303              		.cfi_def_cfa_offset 80
6548:src/xeq.c     **** 	process_cmdline();
 36304              		.loc 1 6548 1 view .LVU9807
 36305 000a 0446     		mov	r4, r0
 36306              	.LBB4817:
 36307              	.LBB4814:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 36308              		.loc 1 1232 5 view .LVU9808
 36309 000c 002B     		cmp	r3, #0
 36310 000e 55D1     		bne	.L2754
 36311              	.LVL2808:
 36312              	.L2734:
1232:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 36313              		.loc 1 1232 5 view .LVU9809
 36314              	.LBE4814:
 36315              	.LBE4817:
6550:src/xeq.c     **** 	if (is_intmode()) {
 36316              		.loc 1 6550 2 is_stmt 1 view .LVU9810
 36317              		.loc 1 6550 6 is_stmt 0 view .LVU9811
 36318 0010 2D4D     		ldr	r5, .L2757+4
 36319 0012 2B68     		ldr	r3, [r5]
 36320 0014 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 36321              		.loc 1 6550 5 view .LVU9812
 36322 0018 DA07     		lsls	r2, r3, #31
 36323 001a 2CD5     		bpl	.L2735
 36324              	.LBB4818:
6551:src/xeq.c     **** 		int sgn;
 36325              		.loc 1 6551 3 is_stmt 1 view .LVU9813
ARM GAS  /tmp/cccVhVyH.s 			page 911


6552:src/xeq.c     **** 		unsigned long long int x = extract_value(get_reg_n_int(regX_idx), &sgn);
 36326              		.loc 1 6552 3 view .LVU9814
 36327              		.loc 1 6552 30 is_stmt 0 view .LVU9815
 36328 001c 6420     		movs	r0, #100
 36329 001e FFF7FEFF 		bl	get_reg_n_int
 36330              	.LVL2809:
 36331 0022 01AA     		add	r2, sp, #4
 36332 0024 FFF7FEFF 		bl	extract_value
 36333              	.LVL2810:
 36334 0028 0646     		mov	r6, r0
 36335 002a 0F46     		mov	r7, r1
 36336              	.LVL2811:
6553:src/xeq.c     **** 		const int base = int_base();
 36337              		.loc 1 6553 3 is_stmt 1 view .LVU9816
 36338              		.loc 1 6553 20 is_stmt 0 view .LVU9817
 36339 002c FFF7FEFF 		bl	int_base
 36340              	.LVL2812:
6554:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
6555:src/xeq.c     **** 
6556:src/xeq.c     **** 		*p-- = '\0';
 36341              		.loc 1 6556 8 view .LVU9818
 36342 0030 0023     		movs	r3, #0
 36343              	.LVL2813:
6554:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
 36344              		.loc 1 6554 3 is_stmt 1 view .LVU9819
 36345              		.loc 1 6556 3 view .LVU9820
 36346              		.loc 1 6556 8 is_stmt 0 view .LVU9821
 36347 0032 E370     		strb	r3, [r4, #3]
6557:src/xeq.c     **** 		if (x == 0)
 36348              		.loc 1 6557 3 is_stmt 1 view .LVU9822
 36349              		.loc 1 6557 6 is_stmt 0 view .LVU9823
 36350 0034 56EA0703 		orrs	r3, r6, r7
 36351 0038 35D0     		beq	.L2755
 36352 003a 244D     		ldr	r5, .L2757+8
6556:src/xeq.c     **** 		if (x == 0)
 36353              		.loc 1 6556 5 view .LVU9824
 36354 003c 0234     		adds	r4, r4, #2
 36355              	.LVL2814:
6556:src/xeq.c     **** 		if (x == 0)
 36356              		.loc 1 6556 5 view .LVU9825
 36357 003e 8046     		mov	r8, r0
 36358 0040 4FEAE079 		asr	r9, r0, #31
 36359              	.LVL2815:
 36360              	.L2738:
 36361              	.LBB4819:
6558:src/xeq.c     **** 			*p-- = '0'; 
6559:src/xeq.c     **** 		else {
6560:src/xeq.c     **** 			while (x != 0) {
6561:src/xeq.c     **** 				const int n = x % base;
 36362              		.loc 1 6561 5 is_stmt 1 view .LVU9826
 36363 0044 3046     		mov	r0, r6
 36364 0046 3946     		mov	r1, r7
 36365 0048 4246     		mov	r2, r8
 36366 004a 4B46     		mov	r3, r9
 36367 004c FFF7FEFF 		bl	__aeabi_uldivmod
 36368              	.LVL2816:
6562:src/xeq.c     **** 				x /= base;
ARM GAS  /tmp/cccVhVyH.s 			page 912


 36369              		.loc 1 6562 5 view .LVU9827
 36370 0050 BB46     		mov	fp, r7
 36371 0052 B246     		mov	r10, r6
 36372              	.LBE4819:
6560:src/xeq.c     **** 				const int n = x % base;
 36373              		.loc 1 6560 10 is_stmt 0 view .LVU9828
 36374 0054 CB45     		cmp	fp, r9
 36375              	.LBB4820:
6563:src/xeq.c     **** 				*p-- = n["0123456789ABCDEF"];
 36376              		.loc 1 6563 10 view .LVU9829
 36377 0056 AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 36378 0058 04F80139 		strb	r3, [r4], #-1
 36379              	.LVL2817:
 36380              		.loc 1 6563 10 view .LVU9830
 36381              	.LBE4820:
6560:src/xeq.c     **** 				const int n = x % base;
 36382              		.loc 1 6560 10 view .LVU9831
 36383 005c 08BF     		it	eq
 36384 005e C245     		cmpeq	r10, r8
 36385              	.LBB4821:
6562:src/xeq.c     **** 				x /= base;
 36386              		.loc 1 6562 7 view .LVU9832
 36387 0060 0646     		mov	r6, r0
 36388              	.LVL2818:
6562:src/xeq.c     **** 				x /= base;
 36389              		.loc 1 6562 7 view .LVU9833
 36390 0062 0F46     		mov	r7, r1
 36391              	.LVL2819:
 36392              		.loc 1 6563 5 is_stmt 1 view .LVU9834
 36393              		.loc 1 6563 5 is_stmt 0 view .LVU9835
 36394              	.LBE4821:
6560:src/xeq.c     **** 				const int n = x % base;
 36395              		.loc 1 6560 10 is_stmt 1 view .LVU9836
 36396 0064 EED2     		bcs	.L2738
6564:src/xeq.c     **** 			}
6565:src/xeq.c     **** 		}
6566:src/xeq.c     **** 		if (sgn)
 36397              		.loc 1 6566 3 view .LVU9837
 36398              		.loc 1 6566 6 is_stmt 0 view .LVU9838
 36399 0066 019B     		ldr	r3, [sp, #4]
 36400 0068 1BB3     		cbz	r3, .L2739
 36401              	.LVL2820:
 36402              	.L2756:
6567:src/xeq.c     **** 			*p = '-';
 36403              		.loc 1 6567 4 is_stmt 1 view .LVU9839
 36404              		.loc 1 6567 7 is_stmt 0 view .LVU9840
 36405 006a 2D23     		movs	r3, #45
 36406 006c 2370     		strb	r3, [r4]
 36407              	.LVL2821:
 36408              	.L2733:
 36409              		.loc 1 6567 7 view .LVU9841
 36410              	.LBE4818:
6568:src/xeq.c     **** 		else
6569:src/xeq.c     **** 			p++;
6570:src/xeq.c     **** 		return p;
6571:src/xeq.c     **** 	} else {
6572:src/xeq.c     **** 		decNumber x;
ARM GAS  /tmp/cccVhVyH.s 			page 913


6573:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
6574:src/xeq.c     **** 		if (UState.fraccomma) {
6575:src/xeq.c     **** 			char *p = strchr(buffer, '.');
6576:src/xeq.c     **** 			if (p != NULL)
6577:src/xeq.c     **** 				*p = ',';
6578:src/xeq.c     **** 		}
6579:src/xeq.c     **** 
6580:src/xeq.c     **** 		return buffer;
6581:src/xeq.c     **** 	}
6582:src/xeq.c     **** }
 36411              		.loc 1 6582 1 view .LVU9842
 36412 006e 2046     		mov	r0, r4
 36413 0070 0BB0     		add	sp, sp, #44
 36414              		.cfi_remember_state
 36415              		.cfi_def_cfa_offset 36
 36416              		@ sp needed
 36417 0072 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 36418              	.LVL2822:
 36419              	.L2735:
 36420              		.cfi_restore_state
 36421              	.LBB4822:
6572:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
 36422              		.loc 1 6572 3 is_stmt 1 view .LVU9843
6573:src/xeq.c     **** 		if (UState.fraccomma) {
 36423              		.loc 1 6573 3 view .LVU9844
 36424              	.LBB4823:
 36425              	.LBI4823:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 36426              		.loc 1 824 12 view .LVU9845
 36427              	.LBB4824:
 825:src/xeq.c     **** }
 36428              		.loc 1 825 2 view .LVU9846
 825:src/xeq.c     **** }
 36429              		.loc 1 825 9 is_stmt 0 view .LVU9847
 36430 0076 6421     		movs	r1, #100
 36431 0078 01A8     		add	r0, sp, #4
 36432              	.LVL2823:
 825:src/xeq.c     **** }
 36433              		.loc 1 825 9 view .LVU9848
 36434 007a FFF7FEFF 		bl	getRegister
 36435              	.LVL2824:
 825:src/xeq.c     **** }
 36436              		.loc 1 825 9 view .LVU9849
 36437              	.LBE4824:
 36438              	.LBE4823:
6573:src/xeq.c     **** 		if (UState.fraccomma) {
 36439              		.loc 1 6573 3 view .LVU9850
 36440 007e 2146     		mov	r1, r4
 36441 0080 FFF7FEFF 		bl	decNumberToString
 36442              	.LVL2825:
6574:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 36443              		.loc 1 6574 3 is_stmt 1 view .LVU9851
6574:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 36444              		.loc 1 6574 7 is_stmt 0 view .LVU9852
 36445 0084 2B68     		ldr	r3, [r5]
 36446 0086 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
6574:src/xeq.c     **** 			char *p = strchr(buffer, '.');
ARM GAS  /tmp/cccVhVyH.s 			page 914


 36447              		.loc 1 6574 6 view .LVU9853
 36448 008a 9B06     		lsls	r3, r3, #26
 36449 008c EFD5     		bpl	.L2733
 36450              	.LBB4825:
6575:src/xeq.c     **** 			if (p != NULL)
 36451              		.loc 1 6575 4 is_stmt 1 view .LVU9854
6575:src/xeq.c     **** 			if (p != NULL)
 36452              		.loc 1 6575 14 is_stmt 0 view .LVU9855
 36453 008e 2E21     		movs	r1, #46
 36454 0090 2046     		mov	r0, r4
 36455 0092 FFF7FEFF 		bl	strchr
 36456              	.LVL2826:
6576:src/xeq.c     **** 				*p = ',';
 36457              		.loc 1 6576 4 is_stmt 1 view .LVU9856
6576:src/xeq.c     **** 				*p = ',';
 36458              		.loc 1 6576 7 is_stmt 0 view .LVU9857
 36459 0096 0028     		cmp	r0, #0
 36460 0098 E9D0     		beq	.L2733
6577:src/xeq.c     **** 		}
 36461              		.loc 1 6577 5 is_stmt 1 view .LVU9858
6577:src/xeq.c     **** 		}
 36462              		.loc 1 6577 8 is_stmt 0 view .LVU9859
 36463 009a 2C23     		movs	r3, #44
 36464 009c 0370     		strb	r3, [r0]
 36465              	.LBE4825:
6580:src/xeq.c     **** 	}
 36466              		.loc 1 6580 3 is_stmt 1 view .LVU9860
 36467              	.LBE4822:
 36468              		.loc 1 6582 1 is_stmt 0 view .LVU9861
 36469 009e 2046     		mov	r0, r4
 36470              	.LVL2827:
 36471              		.loc 1 6582 1 view .LVU9862
 36472 00a0 0BB0     		add	sp, sp, #44
 36473              		.cfi_remember_state
 36474              		.cfi_def_cfa_offset 36
 36475              		@ sp needed
 36476 00a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 36477              	.LVL2828:
 36478              	.L2755:
 36479              		.cfi_restore_state
 36480              	.LBB4826:
6558:src/xeq.c     **** 		else {
 36481              		.loc 1 6558 4 is_stmt 1 view .LVU9863
6558:src/xeq.c     **** 		else {
 36482              		.loc 1 6558 9 is_stmt 0 view .LVU9864
 36483 00a6 3023     		movs	r3, #48
 36484 00a8 A370     		strb	r3, [r4, #2]
6566:src/xeq.c     **** 			*p = '-';
 36485              		.loc 1 6566 6 view .LVU9865
 36486 00aa 019B     		ldr	r3, [sp, #4]
6558:src/xeq.c     **** 		else {
 36487              		.loc 1 6558 6 view .LVU9866
 36488 00ac 0134     		adds	r4, r4, #1
 36489              	.LVL2829:
6566:src/xeq.c     **** 			*p = '-';
 36490              		.loc 1 6566 3 is_stmt 1 view .LVU9867
6566:src/xeq.c     **** 			*p = '-';
ARM GAS  /tmp/cccVhVyH.s 			page 915


 36491              		.loc 1 6566 6 is_stmt 0 view .LVU9868
 36492 00ae 002B     		cmp	r3, #0
 36493 00b0 DBD1     		bne	.L2756
 36494              	.LVL2830:
 36495              	.L2739:
6569:src/xeq.c     **** 		return p;
 36496              		.loc 1 6569 4 is_stmt 1 view .LVU9869
6569:src/xeq.c     **** 		return p;
 36497              		.loc 1 6569 5 is_stmt 0 view .LVU9870
 36498 00b2 0134     		adds	r4, r4, #1
 36499              	.LVL2831:
6570:src/xeq.c     **** 	} else {
 36500              		.loc 1 6570 3 is_stmt 1 view .LVU9871
 36501              	.LBE4826:
 36502              		.loc 1 6582 1 is_stmt 0 view .LVU9872
 36503 00b4 2046     		mov	r0, r4
 36504 00b6 0BB0     		add	sp, sp, #44
 36505              		.cfi_remember_state
 36506              		.cfi_def_cfa_offset 36
 36507              		@ sp needed
 36508 00b8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 36509              	.LVL2832:
 36510              	.L2754:
 36511              		.cfi_restore_state
 36512              	.LBB4827:
 36513              	.LBB4815:
 36514              		.loc 1 6582 1 view .LVU9873
 36515 00bc FFF7FEFF 		bl	process_cmdline.part.0
 36516              	.LVL2833:
 36517              		.loc 1 6582 1 view .LVU9874
 36518 00c0 A6E7     		b	.L2734
 36519              	.L2758:
 36520 00c2 00BF     		.align	2
 36521              	.L2757:
 36522 00c4 00000000 		.word	StateWhileOn
 36523 00c8 00000000 		.word	main_ram
 36524 00cc 00000000 		.word	.LC10
 36525              	.LBE4815:
 36526              	.LBE4827:
 36527              		.cfi_endproc
 36528              	.LFE280:
 36530              		.comm	RectPolConv,4,4
 36531              		.comm	Tracing,4,4
 36532              		.comm	StackBase,4,4
 36533              		.comm	RetStk,4,4
 36534              		.comm	ProgFree,4,4
 36535              		.comm	RetStkSize,4,4
 36536              		.comm	TraceBuffer,25,4
 36537              		.comm	Ctx,24,4
 36538              		.comm	UserLocalRegs,4,4
 36539              		.comm	XromUserPc,4,4
 36540              		.comm	ShowRegister,4,4
 36541              		.comm	XeqOpCode,2,2
 36542              		.comm	PcWrapped,4,4
 36543              		.comm	Error,4,4
 36544              		.comm	Busy,4,4
 36545              		.comm	Pause,1,1
ARM GAS  /tmp/cccVhVyH.s 			page 916


 36546              		.comm	JustStopped,4,4
 36547              		.comm	XromRunning,4,4
 36548              		.comm	Running,4,4
 36549              		.global	xrom_targets
 36550              		.section	.rodata
 36551              		.align	2
 36552              		.set	.LANCHOR5,. + 0
 36553              	.LC1:
 36554 0000 0C0C0C0C 		.ascii	"\014\014\014\014\014\014\014\014\014\013\013\013\014"
 36554      0C0C0C0C 
 36554      0C0B0B0B 
 36554      0C
 36555 000d 0C0A0A0C 		.ascii	"\014\012\012\014\014\014\007\010\011\014\014\014\004"
 36555      0C0C0708 
 36555      090C0C0C 
 36555      04
 36556 001a 05060C0C 		.ascii	"\005\006\014\014\014\001\002\003\014\014\014\000\012"
 36556      0C010203 
 36556      0C0C0C00 
 36556      0A
 36557 0027 0C0C     		.ascii	"\014\014"
 36558              		.section	.bss.result.11721,"aw",%nobits
 36559              		.align	2
 36560              		.set	.LANCHOR2,. + 0
 36563              	result.11721:
 36564 0000 00000000 		.space	16
 36564      00000000 
 36564      00000000 
 36564      00000000 
 36565              		.section	.data.RegionTab,"aw"
 36566              		.align	2
 36567              		.set	.LANCHOR0,. + 0
 36570              	RegionTab:
 36571 0000 00000000 		.word	0
 36572 0004 00000000 		.word	0
 36573 0008 00000000 		.word	0
 36574 000c 00000000 		.word	xrom
 36575              		.section	.rodata.StackRegMask,"a"
 36576              		.align	2
 36577              		.set	.LANCHOR3,. + 0
 36580              	StackRegMask:
 36581 0000 0F01     		.short	271
 36582 0002 FF01     		.short	511
 36583              		.section	.rodata.convergence_tolerances,"a"
 36584              		.align	2
 36585              		.set	.LANCHOR7,. + 0
 36588              	convergence_tolerances:
 36589 0000 00000000 		.word	const_1e_14
 36590 0004 00000000 		.word	const_1e_24
 36591 0008 00000000 		.word	const_1e_32
 36592              		.section	.rodata.modes.11414,"a"
 36593              		.align	2
 36594              		.set	.LANCHOR1,. + 0
 36597              	modes.11414:
 36598 0000 03020401 		.ascii	"\003\002\004\001\005\000\006"
 36598      050006
 36599              		.section	.rodata.modes.11931,"a"
ARM GAS  /tmp/cccVhVyH.s 			page 917


 36600              		.align	2
 36601              		.set	.LANCHOR4,. + 0
 36604              	modes.11931:
 36605 0000 02010081 		.ascii	"\002\001\000\201"
 36606              		.section	.rodata.xrom_targets,"a"
 36607              		.align	2
 36608              		.set	.LANCHOR6,. + 0
 36611              	xrom_targets:
 36612 0000 9107     		.short	1937
 36613 0002 B70B     		.short	2999
 36614 0004 4602     		.short	582
 36615 0006 4402     		.short	580
 36616 0008 420A     		.short	2626
 36617 000a 340A     		.short	2612
 36618 000c 100C     		.short	3088
 36619 000e 9C05     		.short	1436
 36620 0010 3B0A     		.short	2619
 36621 0012 5A06     		.short	1626
 36622 0014 6F06     		.short	1647
 36623 0016 6B06     		.short	1643
 36624 0018 6406     		.short	1636
 36625 001a 390A     		.short	2617
 36626 001c 7206     		.short	1650
 36627 001e 7506     		.short	1653
 36628 0020 7706     		.short	1655
 36629 0022 5D06     		.short	1629
 36630 0024 5707     		.short	1879
 36631 0026 4F08     		.short	2127
 36632 0028 EB05     		.short	1515
 36633 002a 0405     		.short	1284
 36634 002c 2907     		.short	1833
 36635 002e 8205     		.short	1410
 36636 0030 9A05     		.short	1434
 36637 0032 EC05     		.short	1516
 36638              		.text
 36639              	.Letext0:
 36640              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 36641              		.file 3 "dmcp/dmcp.h"
 36642              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 36643              		.file 5 "/usr/include/newlib/sys/_types.h"
 36644              		.file 6 "/usr/include/newlib/sys/reent.h"
 36645              		.file 7 "/usr/include/newlib/sys/lock.h"
 36646              		.file 8 "/usr/include/newlib/stdlib.h"
 36647              		.file 9 "src/decNumber/decContext.h"
 36648              		.file 10 "src/decNumber/decNumber.h"
 36649              		.file 11 "src/decNumber/decimal64.h"
 36650              		.file 12 "src/decNumber/decimal128.h"
 36651              		.file 13 "src/xeq.h"
 36652              		.file 14 "src/data.h"
 36653              		.file 15 "src/keys.h"
 36654              		.file 16 "src/menu.h"
 36655              		.file 17 "src/storage.h"
 36656              		.file 18 "src/stats.h"
 36657              		.file 19 "src/display.h"
 36658              		.file 20 "src/consts.h"
 36659              		.file 21 "src/xrom.h"
 36660              		.file 22 "src/stopwatch.h"
ARM GAS  /tmp/cccVhVyH.s 			page 918


 36661              		.file 23 "src/printer.h"
 36662              		.file 24 "src/pretty.h"
 36663              		.file 25 "src/xrom_targets.c"
 36664              		.file 26 "src/int.h"
 36665              		.file 27 "/usr/include/newlib/string.h"
 36666              		.file 28 "src/lcd.h"
 36667              		.file 29 "src/decn.h"
 36668              		.file 30 "src/complex.h"
 36669              		.file 31 "/usr/include/newlib/stdio.h"
 36670              		.file 32 "src/alpha.h"
ARM GAS  /tmp/cccVhVyH.s 			page 919


DEFINED SYMBOLS
                            *ABS*:0000000000000000 xeq.c
     /tmp/cccVhVyH.s:18     .text.find_section_bounds:0000000000000000 $t
     /tmp/cccVhVyH.s:26     .text.find_section_bounds:0000000000000000 find_section_bounds
     /tmp/cccVhVyH.s:164    .text.find_section_bounds:0000000000000068 $d
     /tmp/cccVhVyH.s:172    .text.reg_address:0000000000000000 $t
     /tmp/cccVhVyH.s:179    .text.reg_address:0000000000000000 reg_address
     /tmp/cccVhVyH.s:293    .text.reg_address:0000000000000058 $d
     /tmp/cccVhVyH.s:300    .text.retstk_up:0000000000000000 $t
     /tmp/cccVhVyH.s:307    .text.retstk_up:0000000000000000 retstk_up
     /tmp/cccVhVyH.s:450    .text.retstk_up:0000000000000078 $d
                            *COM*:0000000000000004 RetStk
     /tmp/cccVhVyH.s:457    .text.flag_word:0000000000000000 $t
     /tmp/cccVhVyH.s:464    .text.flag_word:0000000000000000 flag_word
     /tmp/cccVhVyH.s:584    .text.flag_word:0000000000000074 $d
     /tmp/cccVhVyH.s:591    .text.set_zero:0000000000000000 $t
     /tmp/cccVhVyH.s:598    .text.set_zero:0000000000000000 set_zero
     /tmp/cccVhVyH.s:637    .text.set_zero:0000000000000020 $d
     /tmp/cccVhVyH.s:644    .text.intResult:0000000000000000 $t
     /tmp/cccVhVyH.s:651    .text.intResult:0000000000000000 intResult
     /tmp/cccVhVyH.s:851    .text.intResult:00000000000000a4 $d
                            *COM*:0000000000000004 Error
     /tmp/cccVhVyH.s:857    .text.check_stack_overlap:0000000000000000 $t
     /tmp/cccVhVyH.s:864    .text.check_stack_overlap:0000000000000000 check_stack_overlap
     /tmp/cccVhVyH.s:1078   .text.check_stack_overlap:0000000000000068 $d
     /tmp/cccVhVyH.s:1085   .text.is_xrom:0000000000000000 $t
     /tmp/cccVhVyH.s:1093   .text.is_xrom:0000000000000000 is_xrom
     /tmp/cccVhVyH.s:1114   .text.is_xrom:0000000000000018 $d
     /tmp/cccVhVyH.s:1119   .text.move_retstk:0000000000000000 $t
     /tmp/cccVhVyH.s:1127   .text.move_retstk:0000000000000000 move_retstk
     /tmp/cccVhVyH.s:1310   .text.move_retstk:000000000000006c $d
                            *COM*:0000000000000004 RetStkSize
     /tmp/cccVhVyH.s:1319   .text.local_levels:0000000000000000 $t
     /tmp/cccVhVyH.s:1327   .text.local_levels:0000000000000000 local_levels
     /tmp/cccVhVyH.s:1357   .text.local_levels:0000000000000024 $d
     /tmp/cccVhVyH.s:1363   .text.local_regs_rarg:0000000000000000 $t
     /tmp/cccVhVyH.s:1371   .text.local_regs_rarg:0000000000000000 local_regs_rarg
     /tmp/cccVhVyH.s:1473   .text.local_regs_rarg:0000000000000060 $d
     /tmp/cccVhVyH.s:1479   .text.get_reg_limit:0000000000000000 $t
     /tmp/cccVhVyH.s:1486   .text.get_reg_limit:0000000000000000 get_reg_limit
     /tmp/cccVhVyH.s:1724   .text.get_reg_limit:00000000000000b0 $d
     /tmp/cccVhVyH.s:1733   .text.local_regs:0000000000000000 $t
     /tmp/cccVhVyH.s:1741   .text.local_regs:0000000000000000 local_regs
     /tmp/cccVhVyH.s:1840   .text.local_regs:000000000000003c $d
     /tmp/cccVhVyH.s:1850   .text.global_regs_rarg:0000000000000000 $t
     /tmp/cccVhVyH.s:1858   .text.global_regs_rarg:0000000000000000 global_regs_rarg
     /tmp/cccVhVyH.s:1931   .text.global_regs_rarg:000000000000003c $d
     /tmp/cccVhVyH.s:1936   .text.global_regs:0000000000000000 $t
     /tmp/cccVhVyH.s:1944   .text.global_regs:0000000000000000 global_regs
     /tmp/cccVhVyH.s:2002   .text.global_regs:0000000000000020 $d
     /tmp/cccVhVyH.s:2007   .text.version:0000000000000000 $t
     /tmp/cccVhVyH.s:2015   .text.version:0000000000000000 version
     /tmp/cccVhVyH.s:2046   .text.version:0000000000000018 $d
     /tmp/cccVhVyH.s:2051   .text.cmd_off:0000000000000000 $t
     /tmp/cccVhVyH.s:2059   .text.cmd_off:0000000000000000 cmd_off
     /tmp/cccVhVyH.s:2075   .text.init_RegionTab:0000000000000000 $t
     /tmp/cccVhVyH.s:2083   .text.init_RegionTab:0000000000000000 init_RegionTab
ARM GAS  /tmp/cccVhVyH.s 			page 920


     /tmp/cccVhVyH.s:2121   .text.init_RegionTab:000000000000001c $d
     /tmp/cccVhVyH.s:2129   .text.sizeLIB:0000000000000000 $t
     /tmp/cccVhVyH.s:2137   .text.sizeLIB:0000000000000000 sizeLIB
     /tmp/cccVhVyH.s:2171   .text.sizeLIB:0000000000000018 $d
     /tmp/cccVhVyH.s:2177   .text.getprog:0000000000000000 $t
     /tmp/cccVhVyH.s:2185   .text.getprog:0000000000000000 getprog
     /tmp/cccVhVyH.s:2289   .text.getprog:0000000000000048 $d
     /tmp/cccVhVyH.s:2297   .text.get_current_prog:0000000000000000 $t
     /tmp/cccVhVyH.s:2305   .text.get_current_prog:0000000000000000 get_current_prog
     /tmp/cccVhVyH.s:2337   .text.get_current_prog:0000000000000020 $d
     /tmp/cccVhVyH.s:2343   .text.do_inc:0000000000000000 $t
     /tmp/cccVhVyH.s:2351   .text.do_inc:0000000000000000 do_inc
     /tmp/cccVhVyH.s:2431   .text.do_inc:0000000000000044 $d
                            *COM*:0000000000000004 PcWrapped
     /tmp/cccVhVyH.s:2436   .text.user_pc.part.0:0000000000000000 $t
     /tmp/cccVhVyH.s:2443   .text.user_pc.part.0:0000000000000000 user_pc.part.0
     /tmp/cccVhVyH.s:2513   .text.user_pc.part.0:0000000000000034 $d
     /tmp/cccVhVyH.s:2518   .rodata.print_step.str1.4:0000000000000000 $d
     /tmp/cccVhVyH.s:2522   .text.print_step:0000000000000000 $t
     /tmp/cccVhVyH.s:2529   .text.print_step:0000000000000000 print_step
     /tmp/cccVhVyH.s:2698   .text.print_step:0000000000000098 $d
                            *COM*:0000000000000019 TraceBuffer
     /tmp/cccVhVyH.s:2709   .text.do_dec:0000000000000000 $t
     /tmp/cccVhVyH.s:2717   .text.do_dec:0000000000000000 do_dec
     /tmp/cccVhVyH.s:2799   .text.do_dec:0000000000000048 $d
     /tmp/cccVhVyH.s:2804   .text.update_program_bounds:0000000000000000 $t
     /tmp/cccVhVyH.s:2812   .text.update_program_bounds:0000000000000000 update_program_bounds
     /tmp/cccVhVyH.s:2965   .text.update_program_bounds:000000000000008c $d
     /tmp/cccVhVyH.s:2972   .text.set_pc:0000000000000000 $t
     /tmp/cccVhVyH.s:2980   .text.set_pc:0000000000000000 set_pc
     /tmp/cccVhVyH.s:3214   .text.set_pc:00000000000000a4 $d
     /tmp/cccVhVyH.s:3223   .text.incpc:0000000000000000 $t
     /tmp/cccVhVyH.s:3231   .text.incpc:0000000000000000 incpc
     /tmp/cccVhVyH.s:3285   .text.incpc:0000000000000024 $d
     /tmp/cccVhVyH.s:3291   .text.decpc:0000000000000000 $t
     /tmp/cccVhVyH.s:3299   .text.decpc:0000000000000000 decpc
     /tmp/cccVhVyH.s:3354   .text.decpc:0000000000000024 $d
     /tmp/cccVhVyH.s:3361   .text.do_rtn:0000000000000000 $t
     /tmp/cccVhVyH.s:3368   .text.do_rtn:0000000000000000 do_rtn
     /tmp/cccVhVyH.s:3548   .text.do_rtn:0000000000000094 $d
                            *COM*:0000000000000004 Running
     /tmp/cccVhVyH.s:3557   .text.user_pc:0000000000000000 $t
     /tmp/cccVhVyH.s:3565   .text.user_pc:0000000000000000 user_pc
     /tmp/cccVhVyH.s:3597   .text.find_user_pc:0000000000000000 $t
     /tmp/cccVhVyH.s:3605   .text.find_user_pc:0000000000000000 find_user_pc
     /tmp/cccVhVyH.s:3713   .text.find_user_pc:000000000000004c $d
     /tmp/cccVhVyH.s:3719   .text.report_err:0000000000000000 $t
     /tmp/cccVhVyH.s:3727   .text.report_err:0000000000000000 report_err
     /tmp/cccVhVyH.s:3786   .text.report_err:000000000000001c $d
     /tmp/cccVhVyH.s:3791   .text.report_warn:0000000000000000 $t
     /tmp/cccVhVyH.s:3799   .text.report_warn:0000000000000000 report_warn
     /tmp/cccVhVyH.s:3919   .text.report_warn:0000000000000048 $d
     /tmp/cccVhVyH.s:3928   .text.bad_mode_error:0000000000000000 $t
     /tmp/cccVhVyH.s:3936   .text.bad_mode_error:0000000000000000 bad_mode_error
     /tmp/cccVhVyH.s:3977   .text.bad_mode_error:000000000000000c $d
     /tmp/cccVhVyH.s:3982   .text.cmderr:0000000000000000 $t
     /tmp/cccVhVyH.s:3990   .text.cmderr:0000000000000000 cmderr
ARM GAS  /tmp/cccVhVyH.s 			page 921


     /tmp/cccVhVyH.s:4047   .text.cmderr:0000000000000010 $d
     /tmp/cccVhVyH.s:4056   .text.cmdmsg:0000000000000000 $t
     /tmp/cccVhVyH.s:4064   .text.cmdmsg:0000000000000000 cmdmsg
     /tmp/cccVhVyH.s:4080   .text.rarg_roundingmode:0000000000000000 $t
     /tmp/cccVhVyH.s:4088   .text.rarg_roundingmode:0000000000000000 rarg_roundingmode
     /tmp/cccVhVyH.s:4110   .text.rarg_roundingmode:0000000000000014 $d
     /tmp/cccVhVyH.s:4115   .text.packed_from_number:0000000000000000 $t
     /tmp/cccVhVyH.s:4123   .text.packed_from_number:0000000000000000 packed_from_number
     /tmp/cccVhVyH.s:4190   .text.packed_from_number:0000000000000034 $d
     /tmp/cccVhVyH.s:4196   .text.packed128_from_number:0000000000000000 $t
     /tmp/cccVhVyH.s:4204   .text.packed128_from_number:0000000000000000 packed128_from_number
     /tmp/cccVhVyH.s:4271   .text.packed128_from_number:0000000000000034 $d
     /tmp/cccVhVyH.s:4277   .text.check_special:0000000000000000 $t
     /tmp/cccVhVyH.s:4284   .text.check_special:0000000000000000 check_special
     /tmp/cccVhVyH.s:4511   .text.check_special:00000000000000a0 $d
     /tmp/cccVhVyH.s:4517   .text.packed_from_packed128:0000000000000000 $t
     /tmp/cccVhVyH.s:4525   .text.packed_from_packed128:0000000000000000 packed_from_packed128
     /tmp/cccVhVyH.s:4568   .text.packed128_from_packed:0000000000000000 $t
     /tmp/cccVhVyH.s:4576   .text.packed128_from_packed:0000000000000000 packed128_from_packed
     /tmp/cccVhVyH.s:4619   .text.stack_size:0000000000000000 $t
     /tmp/cccVhVyH.s:4627   .text.stack_size:0000000000000000 stack_size
     /tmp/cccVhVyH.s:4678   .text.stack_size:0000000000000030 $d
     /tmp/cccVhVyH.s:4684   .text.copyreg:0000000000000000 $t
     /tmp/cccVhVyH.s:4692   .text.copyreg:0000000000000000 copyreg
     /tmp/cccVhVyH.s:4725   .text.copyreg:000000000000001c $d
     /tmp/cccVhVyH.s:4730   .text.set_lift:0000000000000000 $t
     /tmp/cccVhVyH.s:4738   .text.set_lift:0000000000000000 set_lift
     /tmp/cccVhVyH.s:4756   .text.set_lift:000000000000000c $d
     /tmp/cccVhVyH.s:4761   .text.entry_rpn_on_off:0000000000000000 $t
     /tmp/cccVhVyH.s:4769   .text.entry_rpn_on_off:0000000000000000 entry_rpn_on_off
     /tmp/cccVhVyH.s:4806   .text.entry_rpn_on_off:0000000000000030 $d
     /tmp/cccVhVyH.s:4811   .text.is_dblmode:0000000000000000 $t
     /tmp/cccVhVyH.s:4819   .text.is_dblmode:0000000000000000 is_dblmode
     /tmp/cccVhVyH.s:4841   .text.is_dblmode:000000000000001c $d
     /tmp/cccVhVyH.s:4846   .text.is_usrdblmode:0000000000000000 $t
     /tmp/cccVhVyH.s:4854   .text.is_usrdblmode:0000000000000000 is_usrdblmode
     /tmp/cccVhVyH.s:4896   .text.is_usrdblmode:000000000000002c $d
     /tmp/cccVhVyH.s:4902   .text.s_to_i:0000000000000000 $t
     /tmp/cccVhVyH.s:4910   .text.s_to_i:0000000000000000 s_to_i
     /tmp/cccVhVyH.s:5058   .text.digit:0000000000000000 $t
     /tmp/cccVhVyH.s:5065   .text.digit:0000000000000000 digit
     /tmp/cccVhVyH.s:5610   .text.digit:0000000000000184 $d
     /tmp/cccVhVyH.s:5617   .text.s_to_ull:0000000000000000 $t
     /tmp/cccVhVyH.s:5625   .text.s_to_ull:0000000000000000 s_to_ull
     /tmp/cccVhVyH.s:5719   .text.get_cmdline:0000000000000000 $t
     /tmp/cccVhVyH.s:5727   .text.get_cmdline:0000000000000000 get_cmdline
     /tmp/cccVhVyH.s:5755   .text.get_cmdline:0000000000000014 $d
     /tmp/cccVhVyH.s:5760   .text.is_bad_cmdline:0000000000000000 $t
     /tmp/cccVhVyH.s:5768   .text.is_bad_cmdline:0000000000000000 is_bad_cmdline
     /tmp/cccVhVyH.s:5783   .text.get_flash_reg_n:0000000000000000 $t
     /tmp/cccVhVyH.s:5791   .text.get_flash_reg_n:0000000000000000 get_flash_reg_n
     /tmp/cccVhVyH.s:5818   .text.get_flash_reg_n:000000000000001c $d
     /tmp/cccVhVyH.s:5823   .text.get_const:0000000000000000 $t
     /tmp/cccVhVyH.s:5831   .text.get_const:0000000000000000 get_const
     /tmp/cccVhVyH.s:5979   .text.get_const:0000000000000074 $d
     /tmp/cccVhVyH.s:5987   .text.get_reg_n:0000000000000000 $t
     /tmp/cccVhVyH.s:5995   .text.get_reg_n:0000000000000000 get_reg_n
ARM GAS  /tmp/cccVhVyH.s 			page 922


     /tmp/cccVhVyH.s:6219   .text.get_reg_n:00000000000000b0 $d
     /tmp/cccVhVyH.s:6226   .text.get_stack:0000000000000000 $t
     /tmp/cccVhVyH.s:6234   .text.get_stack:0000000000000000 get_stack
     /tmp/cccVhVyH.s:6254   .text.lift:0000000000000000 $t
     /tmp/cccVhVyH.s:6262   .text.lift:0000000000000000 lift
     /tmp/cccVhVyH.s:6441   .text.lift:0000000000000064 $d
     /tmp/cccVhVyH.s:6449   .text.lift_if_enabled:0000000000000000 $t
     /tmp/cccVhVyH.s:6457   .text.lift_if_enabled:0000000000000000 lift_if_enabled
     /tmp/cccVhVyH.s:6487   .text.lift_if_enabled:0000000000000010 $d
     /tmp/cccVhVyH.s:6492   .text.lift2_if_enabled:0000000000000000 $t
     /tmp/cccVhVyH.s:6499   .text.lift2_if_enabled:0000000000000000 lift2_if_enabled
     /tmp/cccVhVyH.s:6614   .text.lift2_if_enabled:0000000000000034 $d
     /tmp/cccVhVyH.s:6622   .text.lower:0000000000000000 $t
     /tmp/cccVhVyH.s:6629   .text.lower:0000000000000000 lower
     /tmp/cccVhVyH.s:6811   .text.lower:000000000000006c $d
     /tmp/cccVhVyH.s:6819   .text.get_stack_top:0000000000000000 $t
     /tmp/cccVhVyH.s:6826   .text.get_stack_top:0000000000000000 get_stack_top
     /tmp/cccVhVyH.s:6911   .text.get_stack_top:0000000000000034 $d
     /tmp/cccVhVyH.s:6919   .text.roll_down:0000000000000000 $t
     /tmp/cccVhVyH.s:6927   .text.roll_down:0000000000000000 roll_down
     /tmp/cccVhVyH.s:7045   .text.roll_down:000000000000004c $d
                            *COM*:0000000000000004 StackBase
     /tmp/cccVhVyH.s:7051   .text.cpx_roll_down:0000000000000000 $t
     /tmp/cccVhVyH.s:7059   .text.cpx_roll_down:0000000000000000 cpx_roll_down
     /tmp/cccVhVyH.s:7119   .text.cpx_roll_down:000000000000002c $d
     /tmp/cccVhVyH.s:7125   .text.roll_up:0000000000000000 $t
     /tmp/cccVhVyH.s:7133   .text.roll_up:0000000000000000 roll_up
     /tmp/cccVhVyH.s:7260   .text.roll_up:000000000000004c $d
     /tmp/cccVhVyH.s:7266   .text.cpx_roll_up:0000000000000000 $t
     /tmp/cccVhVyH.s:7274   .text.cpx_roll_up:0000000000000000 cpx_roll_up
     /tmp/cccVhVyH.s:7334   .text.cpx_roll_up:000000000000002c $d
     /tmp/cccVhVyH.s:7340   .text.fill:0000000000000000 $t
     /tmp/cccVhVyH.s:7348   .text.fill:0000000000000000 fill
     /tmp/cccVhVyH.s:7503   .text.fill:0000000000000064 $d
     /tmp/cccVhVyH.s:7512   .text.lower2:0000000000000000 $t
     /tmp/cccVhVyH.s:7519   .text.lower2:0000000000000000 lower2
     /tmp/cccVhVyH.s:7701   .text.lower2:000000000000006c $d
     /tmp/cccVhVyH.s:7709   .text.drop:0000000000000000 $t
     /tmp/cccVhVyH.s:7717   .text.drop:0000000000000000 drop
     /tmp/cccVhVyH.s:7760   .text.drop:000000000000001c $d
     /tmp/cccVhVyH.s:7765   .text.copyreg_n:0000000000000000 $t
     /tmp/cccVhVyH.s:7773   .text.copyreg_n:0000000000000000 copyreg_n
     /tmp/cccVhVyH.s:7857   .text.copyreg_n:0000000000000038 $d
     /tmp/cccVhVyH.s:7864   .text.setlastX:0000000000000000 $t
     /tmp/cccVhVyH.s:7872   .text.setlastX:0000000000000000 setlastX
     /tmp/cccVhVyH.s:7888   .text.setlastXY:0000000000000000 $t
     /tmp/cccVhVyH.s:7895   .text.setlastXY:0000000000000000 setlastXY
     /tmp/cccVhVyH.s:7938   .text.getRegister:0000000000000000 $t
     /tmp/cccVhVyH.s:7946   .text.getRegister:0000000000000000 getRegister
     /tmp/cccVhVyH.s:8008   .text.getRegister:0000000000000030 $d
     /tmp/cccVhVyH.s:8013   .text.getX:0000000000000000 $t
     /tmp/cccVhVyH.s:8021   .text.getX:0000000000000000 getX
     /tmp/cccVhVyH.s:8039   .text.getY:0000000000000000 $t
     /tmp/cccVhVyH.s:8047   .text.getY:0000000000000000 getY
     /tmp/cccVhVyH.s:8064   .text.getXY:0000000000000000 $t
     /tmp/cccVhVyH.s:8072   .text.getXY:0000000000000000 getXY
     /tmp/cccVhVyH.s:8133   .text.getXYZ:0000000000000000 $t
ARM GAS  /tmp/cccVhVyH.s 			page 923


     /tmp/cccVhVyH.s:8141   .text.getXYZ:0000000000000000 getXYZ
     /tmp/cccVhVyH.s:8234   .text.getYZ:0000000000000000 $t
     /tmp/cccVhVyH.s:8242   .text.getYZ:0000000000000000 getYZ
     /tmp/cccVhVyH.s:8303   .text.getXYZT:0000000000000000 $t
     /tmp/cccVhVyH.s:8311   .text.getXYZT:0000000000000000 getXYZT
     /tmp/cccVhVyH.s:8357   .text.storcl_op:0000000000000000 $t
     /tmp/cccVhVyH.s:8364   .text.storcl_op:0000000000000000 storcl_op
     /tmp/cccVhVyH.s:8438   .text.storcl_op:000000000000002c $d
     /tmp/cccVhVyH.s:8445   .text.storcl_op:0000000000000032 $t
     /tmp/cccVhVyH.s:8557   .text.storcl_cop:0000000000000000 $t
     /tmp/cccVhVyH.s:8564   .text.storcl_cop:0000000000000000 storcl_cop
     /tmp/cccVhVyH.s:8674   .text.storcl_cop:0000000000000040 $d
     /tmp/cccVhVyH.s:8679   .text.storcl_cop:0000000000000044 $t
     /tmp/cccVhVyH.s:8792   .text.cpx_enter:0000000000000000 $t
     /tmp/cccVhVyH.s:8800   .text.cpx_enter:0000000000000000 cpx_enter
     /tmp/cccVhVyH.s:8896   .text.cpx_enter:0000000000000048 $d
     /tmp/cccVhVyH.s:8902   .text.cpx_fill:0000000000000000 $t
     /tmp/cccVhVyH.s:8910   .text.cpx_fill:0000000000000000 cpx_fill
     /tmp/cccVhVyH.s:9111   .text.cpx_fill:0000000000000084 $d
     /tmp/cccVhVyH.s:9121   .text.setRegister:0000000000000000 $t
     /tmp/cccVhVyH.s:9129   .text.setRegister:0000000000000000 setRegister
     /tmp/cccVhVyH.s:9224   .text.setRegister:000000000000004c $d
                            *COM*:0000000000000018 Ctx
     /tmp/cccVhVyH.s:9230   .text.setX:0000000000000000 $t
     /tmp/cccVhVyH.s:9238   .text.setX:0000000000000000 setX
     /tmp/cccVhVyH.s:9260   .text.rarg_round:0000000000000000 $t
     /tmp/cccVhVyH.s:9268   .text.rarg_round:0000000000000000 rarg_round
     /tmp/cccVhVyH.s:9449   .text.rarg_round:0000000000000064 $d
     /tmp/cccVhVyH.s:9456   .text.setY:0000000000000000 $t
     /tmp/cccVhVyH.s:9464   .text.setY:0000000000000000 setY
     /tmp/cccVhVyH.s:9486   .text.setXY:0000000000000000 $t
     /tmp/cccVhVyH.s:9494   .text.setXY:0000000000000000 setXY
     /tmp/cccVhVyH.s:9556   .text.setXY:0000000000000028 $d
     /tmp/cccVhVyH.s:9561   .text.convert_regK:0000000000000000 $t
     /tmp/cccVhVyH.s:9569   .text.convert_regK:0000000000000000 convert_regK
     /tmp/cccVhVyH.s:9745   .text.convert_regK:00000000000000ac $d
     /tmp/cccVhVyH.s:9755   .text.cpx_nop:0000000000000000 $t
     /tmp/cccVhVyH.s:9763   .text.cpx_nop:0000000000000000 cpx_nop
     /tmp/cccVhVyH.s:9789   .text.cpx_nop:0000000000000016 $d
     /tmp/cccVhVyH.s:9801   .text.cpx_nop:0000000000000022 $t
     /tmp/cccVhVyH.s:10121  .text.cpx_nop:00000000000001a4 $d
     /tmp/cccVhVyH.s:10128  .text.get_reg_n_int:0000000000000000 $t
     /tmp/cccVhVyH.s:10136  .text.get_reg_n_int:0000000000000000 get_reg_n_int
     /tmp/cccVhVyH.s:10173  .text.storcl_intop:0000000000000000 $t
     /tmp/cccVhVyH.s:10180  .text.storcl_intop:0000000000000000 storcl_intop
     /tmp/cccVhVyH.s:10272  .text.storcl_intop:0000000000000038 $d
     /tmp/cccVhVyH.s:10278  .text.storcl_intop:000000000000003e $t
     /tmp/cccVhVyH.s:10380  .text.incdec:0000000000000000 $t
     /tmp/cccVhVyH.s:10387  .text.incdec:0000000000000000 incdec
     /tmp/cccVhVyH.s:10568  .text.incdec:0000000000000094 $d
     /tmp/cccVhVyH.s:10575  .text.set_reg_n_int:0000000000000000 $t
     /tmp/cccVhVyH.s:10583  .text.set_reg_n_int:0000000000000000 set_reg_n_int
     /tmp/cccVhVyH.s:10616  .text.get_reg_n_int_sgn:0000000000000000 $t
     /tmp/cccVhVyH.s:10624  .text.get_reg_n_int_sgn:0000000000000000 get_reg_n_int_sgn
     /tmp/cccVhVyH.s:10704  .text.get_reg_n_int_sgn:0000000000000034 $d
     /tmp/cccVhVyH.s:10709  .text.get_keycode_from_reg:0000000000000000 $t
     /tmp/cccVhVyH.s:10716  .text.get_keycode_from_reg:0000000000000000 get_keycode_from_reg
ARM GAS  /tmp/cccVhVyH.s 			page 924


     /tmp/cccVhVyH.s:10796  .text.get_keycode_from_reg:000000000000002c $d
     /tmp/cccVhVyH.s:10801  .text.getX_int:0000000000000000 $t
     /tmp/cccVhVyH.s:10809  .text.getX_int:0000000000000000 getX_int
     /tmp/cccVhVyH.s:10825  .text.getX_int_sgn:0000000000000000 $t
     /tmp/cccVhVyH.s:10833  .text.getX_int_sgn:0000000000000000 getX_int_sgn
     /tmp/cccVhVyH.s:10855  .text.set_reg_n_int_sgn:0000000000000000 $t
     /tmp/cccVhVyH.s:10863  .text.set_reg_n_int_sgn:0000000000000000 set_reg_n_int_sgn
     /tmp/cccVhVyH.s:10989  .text.set_reg_n_int_sgn:0000000000000060 $d
     /tmp/cccVhVyH.s:10995  .text.op_roundingmode:0000000000000000 $t
     /tmp/cccVhVyH.s:11003  .text.op_roundingmode:0000000000000000 op_roundingmode
     /tmp/cccVhVyH.s:11067  .text.op_roundingmode:0000000000000024 $d
     /tmp/cccVhVyH.s:11072  .text.register_from_int:0000000000000000 $t
     /tmp/cccVhVyH.s:11079  .text.register_from_int:0000000000000000 register_from_int
     /tmp/cccVhVyH.s:11176  .text.register_from_int:000000000000005c $d
     /tmp/cccVhVyH.s:11182  .text.int_from_register:0000000000000000 $t
     /tmp/cccVhVyH.s:11189  .text.int_from_register:0000000000000000 int_from_register
     /tmp/cccVhVyH.s:11260  .text.int_from_register:0000000000000044 $d
     /tmp/cccVhVyH.s:11265  .text.switch_to_int:0000000000000000 $t
     /tmp/cccVhVyH.s:11272  .text.switch_to_int:0000000000000000 switch_to_int
     /tmp/cccVhVyH.s:11423  .text.switch_to_int:0000000000000078 $d
     /tmp/cccVhVyH.s:11431  .text.process_cmdline.part.0:0000000000000000 $t
     /tmp/cccVhVyH.s:11438  .text.process_cmdline.part.0:0000000000000000 process_cmdline.part.0
     /tmp/cccVhVyH.s:12025  .text.process_cmdline.part.0:000000000000023c $d
                            *COM*:0000000000000004 XromRunning
     /tmp/cccVhVyH.s:12036  .text.process_cmdline:0000000000000000 $t
     /tmp/cccVhVyH.s:12044  .text.process_cmdline:0000000000000000 process_cmdline
     /tmp/cccVhVyH.s:12066  .text.process_cmdline:000000000000000c $d
     /tmp/cccVhVyH.s:12071  .text.cpx_pi:0000000000000000 $t
     /tmp/cccVhVyH.s:12079  .text.cpx_pi:0000000000000000 cpx_pi
     /tmp/cccVhVyH.s:12315  .text.cpx_pi:00000000000000c0 $d
     /tmp/cccVhVyH.s:12325  .text.process_cmdline_set_lift:0000000000000000 $t
     /tmp/cccVhVyH.s:12333  .text.process_cmdline_set_lift:0000000000000000 process_cmdline_set_lift
     /tmp/cccVhVyH.s:12399  .text.process_cmdline_set_lift:0000000000000020 $d
     /tmp/cccVhVyH.s:12404  .text.setX_int:0000000000000000 $t
     /tmp/cccVhVyH.s:12412  .text.setX_int:0000000000000000 setX_int
     /tmp/cccVhVyH.s:12463  .text.do_rcl:0000000000000000 $t
     /tmp/cccVhVyH.s:12470  .text.do_rcl:0000000000000000 do_rcl
     /tmp/cccVhVyH.s:12808  .text.do_rcl:00000000000000cc $d
     /tmp/cccVhVyH.s:12819  .text.setX_int_sgn:0000000000000000 $t
     /tmp/cccVhVyH.s:12827  .text.setX_int_sgn:0000000000000000 setX_int_sgn
     /tmp/cccVhVyH.s:12861  .text.zero_regs:0000000000000000 $t
     /tmp/cccVhVyH.s:12869  .text.zero_regs:0000000000000000 zero_regs
     /tmp/cccVhVyH.s:12907  .text.zero_regs:0000000000000024 $d
     /tmp/cccVhVyH.s:12912  .text.move_regs:0000000000000000 $t
     /tmp/cccVhVyH.s:12920  .text.move_regs:0000000000000000 move_regs
     /tmp/cccVhVyH.s:12973  .text.move_regs:0000000000000024 $d
     /tmp/cccVhVyH.s:12978  .text.zero_X:0000000000000000 $t
     /tmp/cccVhVyH.s:12986  .text.zero_X:0000000000000000 zero_X
     /tmp/cccVhVyH.s:13001  .text.zero_X:0000000000000008 $d
     /tmp/cccVhVyH.s:13006  .text.zero_Y:0000000000000000 $t
     /tmp/cccVhVyH.s:13014  .text.zero_Y:0000000000000000 zero_Y
     /tmp/cccVhVyH.s:13042  .text.clrx:0000000000000000 $t
     /tmp/cccVhVyH.s:13050  .text.clrx:0000000000000000 clrx
     /tmp/cccVhVyH.s:13176  .text.clrx:000000000000007c $d
     /tmp/cccVhVyH.s:13183  .text.clrstk:0000000000000000 $t
     /tmp/cccVhVyH.s:13191  .text.clrstk:0000000000000000 clrstk
     /tmp/cccVhVyH.s:13316  .text.clrstk:000000000000005c $d
ARM GAS  /tmp/cccVhVyH.s 			page 925


     /tmp/cccVhVyH.s:13326  .text.clrreg:0000000000000000 $t
     /tmp/cccVhVyH.s:13334  .text.clrreg:0000000000000000 clrreg
     /tmp/cccVhVyH.s:13839  .text.clrreg:0000000000000120 $d
     /tmp/cccVhVyH.s:13849  .text.clrretstk:0000000000000000 $t
     /tmp/cccVhVyH.s:13857  .text.clrretstk:0000000000000000 clrretstk
     /tmp/cccVhVyH.s:13882  .text.clrretstk:0000000000000018 $d
     /tmp/cccVhVyH.s:13887  .text.clrretstk_pc:0000000000000000 $t
     /tmp/cccVhVyH.s:13895  .text.clrretstk_pc:0000000000000000 clrretstk_pc
     /tmp/cccVhVyH.s:13982  .text.clrretstk_pc:0000000000000028 $d
     /tmp/cccVhVyH.s:13987  .text.cmdconst:0000000000000000 $t
     /tmp/cccVhVyH.s:13995  .text.cmdconst:0000000000000000 cmdconst
     /tmp/cccVhVyH.s:14290  .text.cmdconst:00000000000000c4 $d
     /tmp/cccVhVyH.s:14300  .text.cmdsto:0000000000000000 $t
     /tmp/cccVhVyH.s:14308  .text.cmdsto:0000000000000000 cmdsto
     /tmp/cccVhVyH.s:14498  .text.cmdsto:0000000000000078 $d
     /tmp/cccVhVyH.s:14504  .text.cmdrcl:0000000000000000 $t
     /tmp/cccVhVyH.s:14512  .text.cmdrcl:0000000000000000 cmdrcl
     /tmp/cccVhVyH.s:14528  .text.cmdcsto:0000000000000000 $t
     /tmp/cccVhVyH.s:14536  .text.cmdcsto:0000000000000000 cmdcsto
     /tmp/cccVhVyH.s:14813  .text.cmdcsto:00000000000000c0 $d
     /tmp/cccVhVyH.s:14821  .text.cmdcrcl:0000000000000000 $t
     /tmp/cccVhVyH.s:14829  .text.cmdcrcl:0000000000000000 cmdcrcl
     /tmp/cccVhVyH.s:15201  .text.cmdcrcl:00000000000000f8 $d
     /tmp/cccVhVyH.s:15211  .text.cmdircl:0000000000000000 $t
     /tmp/cccVhVyH.s:15219  .text.cmdircl:0000000000000000 cmdircl
     /tmp/cccVhVyH.s:15263  .text.cmdircl:000000000000001c $d
     /tmp/cccVhVyH.s:15268  .text.cmdrrcl:0000000000000000 $t
     /tmp/cccVhVyH.s:15276  .text.cmdrrcl:0000000000000000 cmdrrcl
     /tmp/cccVhVyH.s:15434  .text.cmdrrcl:0000000000000080 $d
     /tmp/cccVhVyH.s:15444  .text.swap_reg:0000000000000000 $t
     /tmp/cccVhVyH.s:15452  .text.swap_reg:0000000000000000 swap_reg
     /tmp/cccVhVyH.s:15593  .text.swap_reg:0000000000000060 $d
     /tmp/cccVhVyH.s:15598  .text.cmdswap:0000000000000000 $t
     /tmp/cccVhVyH.s:15606  .text.cmdswap:0000000000000000 cmdswap
     /tmp/cccVhVyH.s:15753  .text.cmdswap:0000000000000098 $d
     /tmp/cccVhVyH.s:15759  .text.cmdview:0000000000000000 $t
     /tmp/cccVhVyH.s:15767  .text.cmdview:0000000000000000 cmdview
     /tmp/cccVhVyH.s:15851  .text.cmdview:0000000000000050 $d
                            *COM*:0000000000000004 ShowRegister
     /tmp/cccVhVyH.s:15858  .text.get_stack_size:0000000000000000 $t
     /tmp/cccVhVyH.s:15866  .text.get_stack_size:0000000000000000 get_stack_size
     /tmp/cccVhVyH.s:15964  .text.get_stack_size:0000000000000040 $d
     /tmp/cccVhVyH.s:15972  .text.get_word_size:0000000000000000 $t
     /tmp/cccVhVyH.s:15980  .text.get_word_size:0000000000000000 get_word_size
     /tmp/cccVhVyH.s:16023  .text.get_sign_mode:0000000000000000 $t
     /tmp/cccVhVyH.s:16031  .text.get_sign_mode:0000000000000000 get_sign_mode
     /tmp/cccVhVyH.s:16087  .text.get_sign_mode:0000000000000024 $d
     /tmp/cccVhVyH.s:16092  .text.get_base:0000000000000000 $t
     /tmp/cccVhVyH.s:16100  .text.get_base:0000000000000000 get_base
     /tmp/cccVhVyH.s:16143  .text.DM42_Ticker:0000000000000000 $t
     /tmp/cccVhVyH.s:16151  .text.DM42_Ticker:0000000000000000 DM42_Ticker
     /tmp/cccVhVyH.s:16181  .text.DM42_Ticker:0000000000000014 $d
     /tmp/cccVhVyH.s:16186  .text.op_ticks:0000000000000000 $t
     /tmp/cccVhVyH.s:16194  .text.op_ticks:0000000000000000 op_ticks
     /tmp/cccVhVyH.s:16271  .text.op_ticks:0000000000000024 $d
     /tmp/cccVhVyH.s:16276  .text.op_voltage:0000000000000000 $t
     /tmp/cccVhVyH.s:16284  .text.op_voltage:0000000000000000 op_voltage
ARM GAS  /tmp/cccVhVyH.s 			page 926


     /tmp/cccVhVyH.s:16387  .text.op_voltage:0000000000000058 $d
     /tmp/cccVhVyH.s:16394  .text.free_mem:0000000000000000 $t
     /tmp/cccVhVyH.s:16402  .text.free_mem:0000000000000000 free_mem
     /tmp/cccVhVyH.s:16426  .text.free_mem:0000000000000010 $d
     /tmp/cccVhVyH.s:16432  .text.free_flash:0000000000000000 $t
     /tmp/cccVhVyH.s:16440  .text.free_flash:0000000000000000 free_flash
     /tmp/cccVhVyH.s:16459  .text.free_flash:0000000000000010 $d
     /tmp/cccVhVyH.s:16464  .text.get_mem:0000000000000000 $t
     /tmp/cccVhVyH.s:16472  .text.get_mem:0000000000000000 get_mem
     /tmp/cccVhVyH.s:16726  .text.get_mem:00000000000000a0 $d
     /tmp/cccVhVyH.s:16734  .text.cmdputkey:0000000000000000 $t
     /tmp/cccVhVyH.s:16742  .text.cmdputkey:0000000000000000 cmdputkey
     /tmp/cccVhVyH.s:16824  .text.cmdputkey:0000000000000034 $d
     /tmp/cccVhVyH.s:16830  .text.cmdkeytype:0000000000000000 $t
     /tmp/cccVhVyH.s:16838  .text.cmdkeytype:0000000000000000 cmdkeytype
     /tmp/cccVhVyH.s:16972  .text.cmdkeytype:0000000000000048 $d
     /tmp/cccVhVyH.s:16981  .text.cmdstostk:0000000000000000 $t
     /tmp/cccVhVyH.s:16989  .text.cmdstostk:0000000000000000 cmdstostk
     /tmp/cccVhVyH.s:17039  .text.cmdrclstk:0000000000000000 $t
     /tmp/cccVhVyH.s:17047  .text.cmdrclstk:0000000000000000 cmdrclstk
     /tmp/cccVhVyH.s:17100  .text.find_opcode_from:0000000000000000 $t
     /tmp/cccVhVyH.s:17108  .text.find_opcode_from:0000000000000000 find_opcode_from
     /tmp/cccVhVyH.s:17280  .text.find_opcode_from:000000000000006c $d
     /tmp/cccVhVyH.s:17285  .text.find_label_from:0000000000000000 $t
     /tmp/cccVhVyH.s:17293  .text.find_label_from:0000000000000000 find_label_from
     /tmp/cccVhVyH.s:17313  .text.op_rtn:0000000000000000 $t
     /tmp/cccVhVyH.s:17321  .text.op_rtn:0000000000000000 op_rtn
     /tmp/cccVhVyH.s:17355  .text.op_rtn:0000000000000020 $d
     /tmp/cccVhVyH.s:17361  .text.op_popusr:0000000000000000 $t
     /tmp/cccVhVyH.s:17369  .text.op_popusr:0000000000000000 op_popusr
     /tmp/cccVhVyH.s:17455  .text.op_popusr:000000000000005c $d
                            *COM*:0000000000000004 UserLocalRegs
                            *COM*:0000000000000004 XromUserPc
     /tmp/cccVhVyH.s:17463  .text.findmultilbl:0000000000000000 $t
     /tmp/cccVhVyH.s:17471  .text.findmultilbl:0000000000000000 findmultilbl
     /tmp/cccVhVyH.s:17584  .text.findmultilbl:0000000000000048 $d
     /tmp/cccVhVyH.s:17589  .text.multiumenu:0000000000000000 $t
     /tmp/cccVhVyH.s:17597  .text.multiumenu:0000000000000000 multiumenu
     /tmp/cccVhVyH.s:17634  .text.get_dispmode_digs:0000000000000000 $t
     /tmp/cccVhVyH.s:17642  .text.get_dispmode_digs:0000000000000000 get_dispmode_digs
     /tmp/cccVhVyH.s:17704  .text.get_dispmode_digs:000000000000002c $d
     /tmp/cccVhVyH.s:17709  .text.set_dispmode_digs:0000000000000000 $t
     /tmp/cccVhVyH.s:17717  .text.set_dispmode_digs:0000000000000000 set_dispmode_digs
     /tmp/cccVhVyH.s:17775  .text.set_dispmode_digs:0000000000000038 $d
     /tmp/cccVhVyH.s:17780  .text.convC2F:0000000000000000 $t
     /tmp/cccVhVyH.s:17788  .text.convC2F:0000000000000000 convC2F
     /tmp/cccVhVyH.s:17830  .text.convC2F:000000000000001c $d
     /tmp/cccVhVyH.s:17836  .text.convF2C:0000000000000000 $t
     /tmp/cccVhVyH.s:17844  .text.convF2C:0000000000000000 convF2C
     /tmp/cccVhVyH.s:17886  .text.convF2C:000000000000001c $d
     /tmp/cccVhVyH.s:17892  .text.convDB2AR:0000000000000000 $t
     /tmp/cccVhVyH.s:17900  .text.convDB2AR:0000000000000000 convDB2AR
     /tmp/cccVhVyH.s:17942  .text.convDB2AR:000000000000001c $d
     /tmp/cccVhVyH.s:17947  .text.convAR2DB:0000000000000000 $t
     /tmp/cccVhVyH.s:17955  .text.convAR2DB:0000000000000000 convAR2DB
     /tmp/cccVhVyH.s:17996  .text.convAR2DB:000000000000001c $d
     /tmp/cccVhVyH.s:18001  .text.convDB2PR:0000000000000000 $t
ARM GAS  /tmp/cccVhVyH.s 			page 927


     /tmp/cccVhVyH.s:18009  .text.convDB2PR:0000000000000000 convDB2PR
     /tmp/cccVhVyH.s:18050  .text.convPR2DB:0000000000000000 $t
     /tmp/cccVhVyH.s:18058  .text.convPR2DB:0000000000000000 convPR2DB
     /tmp/cccVhVyH.s:18099  .text.do_conv:0000000000000000 $t
     /tmp/cccVhVyH.s:18107  .text.do_conv:0000000000000000 do_conv
     /tmp/cccVhVyH.s:18199  .text.do_conv:0000000000000040 $d
     /tmp/cccVhVyH.s:18204  .text.cmdconv:0000000000000000 $t
     /tmp/cccVhVyH.s:18212  .text.cmdconv:0000000000000000 cmdconv
     /tmp/cccVhVyH.s:18300  .text.cmdconv:000000000000003c $d
     /tmp/cccVhVyH.s:18305  .rodata.fin_tst.str1.4:0000000000000000 $d
     /tmp/cccVhVyH.s:18312  .text.fin_tst:0000000000000000 $t
     /tmp/cccVhVyH.s:18320  .text.fin_tst:0000000000000000 fin_tst
     /tmp/cccVhVyH.s:18417  .text.fin_tst:0000000000000050 $d
                            *COM*:0000000000000004 Tracing
     /tmp/cccVhVyH.s:18427  .text.check_mode:0000000000000000 $t
     /tmp/cccVhVyH.s:18435  .text.check_mode:0000000000000000 check_mode
     /tmp/cccVhVyH.s:18470  .text.check_mode:0000000000000024 $d
     /tmp/cccVhVyH.s:18475  .text.check_dblmode:0000000000000000 $t
     /tmp/cccVhVyH.s:18483  .text.check_dblmode:0000000000000000 check_dblmode
     /tmp/cccVhVyH.s:18516  .text.check_dblmode:000000000000001c $d
     /tmp/cccVhVyH.s:18521  .text.op_query_xtal:0000000000000000 $t
     /tmp/cccVhVyH.s:18529  .text.op_query_xtal:0000000000000000 op_query_xtal
     /tmp/cccVhVyH.s:18547  .text.isTop:0000000000000000 $t
     /tmp/cccVhVyH.s:18555  .text.isTop:0000000000000000 isTop
     /tmp/cccVhVyH.s:18621  .text.isTop:000000000000003c $d
     /tmp/cccVhVyH.s:18630  .text.cmdlblp:0000000000000000 $t
     /tmp/cccVhVyH.s:18638  .text.cmdlblp:0000000000000000 cmdlblp
     /tmp/cccVhVyH.s:18690  .text.cmdlblp:0000000000000024 $d
     /tmp/cccVhVyH.s:18695  .text.cmdmultilblp:0000000000000000 $t
     /tmp/cccVhVyH.s:18703  .text.cmdmultilblp:0000000000000000 cmdmultilblp
     /tmp/cccVhVyH.s:18738  .text.cmdkeyp:0000000000000000 $t
     /tmp/cccVhVyH.s:18746  .text.cmdkeyp:0000000000000000 cmdkeyp
     /tmp/cccVhVyH.s:18841  .text.cmdkeyp:0000000000000044 $d
     /tmp/cccVhVyH.s:18846  .text.do_tst:0000000000000000 $t
     /tmp/cccVhVyH.s:18853  .text.do_tst:0000000000000000 do_tst
     /tmp/cccVhVyH.s:19019  .text.do_tst:0000000000000064 $d
     /tmp/cccVhVyH.s:19307  .text.do_tst:0000000000000168 $d
     /tmp/cccVhVyH.s:19314  .text.do_ztst:0000000000000000 $t
     /tmp/cccVhVyH.s:19321  .text.do_ztst:0000000000000000 do_ztst
     /tmp/cccVhVyH.s:19576  .text.do_ztst:00000000000000a0 $d
     /tmp/cccVhVyH.s:19583  .text.op_query_print:0000000000000000 $t
     /tmp/cccVhVyH.s:19591  .text.op_query_print:0000000000000000 op_query_print
     /tmp/cccVhVyH.s:19603  .text.check_zero:0000000000000000 $t
     /tmp/cccVhVyH.s:19611  .text.check_zero:0000000000000000 check_zero
     /tmp/cccVhVyH.s:19755  .text.check_zero:000000000000006c $d
     /tmp/cccVhVyH.s:19760  .text.cmdtest:0000000000000000 $t
     /tmp/cccVhVyH.s:19768  .text.cmdtest:0000000000000000 cmdtest
     /tmp/cccVhVyH.s:19789  .text.cmdztest:0000000000000000 $t
     /tmp/cccVhVyH.s:19797  .text.cmdztest:0000000000000000 cmdztest
     /tmp/cccVhVyH.s:19850  .text.cmdlincdec:0000000000000000 $t
     /tmp/cccVhVyH.s:19858  .text.cmdlincdec:0000000000000000 cmdlincdec
     /tmp/cccVhVyH.s:19879  .text.cmdloopz:0000000000000000 $t
     /tmp/cccVhVyH.s:19887  .text.cmdloopz:0000000000000000 cmdloopz
     /tmp/cccVhVyH.s:19920  .text.cmdloop:0000000000000000 $t
     /tmp/cccVhVyH.s:19928  .text.cmdloop:0000000000000000 cmdloop
     /tmp/cccVhVyH.s:20417  .text.cmdloop:00000000000001f4 $d
     /tmp/cccVhVyH.s:20423  .text.op_shift_digit:0000000000000000 $t
ARM GAS  /tmp/cccVhVyH.s 			page 928


     /tmp/cccVhVyH.s:20431  .text.op_shift_digit:0000000000000000 op_shift_digit
     /tmp/cccVhVyH.s:20595  .text.op_shift_digit:0000000000000060 $d
     /tmp/cccVhVyH.s:20601  .text.get_user_flag:0000000000000000 $t
     /tmp/cccVhVyH.s:20609  .text.get_user_flag:0000000000000000 get_user_flag
     /tmp/cccVhVyH.s:20647  .text.cmdflag:0000000000000000 $t
     /tmp/cccVhVyH.s:20655  .text.cmdflag:0000000000000000 cmdflag
     /tmp/cccVhVyH.s:20700  .text.cmdflag:0000000000000028 $d
     /tmp/cccVhVyH.s:20857  .text.cmdflag:00000000000000c0 $d
     /tmp/cccVhVyH.s:20862  .text.put_user_flag:0000000000000000 $t
     /tmp/cccVhVyH.s:20870  .text.put_user_flag:0000000000000000 put_user_flag
     /tmp/cccVhVyH.s:20899  .text.clrflags:0000000000000000 $t
     /tmp/cccVhVyH.s:20907  .text.clrflags:0000000000000000 clrflags
     /tmp/cccVhVyH.s:20954  .text.clrflags:000000000000002c $d
     /tmp/cccVhVyH.s:20959  .text.intws:0000000000000000 $t
     /tmp/cccVhVyH.s:20967  .text.intws:0000000000000000 intws
     /tmp/cccVhVyH.s:21190  .text.intws:00000000000000e4 $d
     /tmp/cccVhVyH.s:21199  .text.get_maxdenom:0000000000000000 $t
     /tmp/cccVhVyH.s:21207  .text.get_maxdenom:0000000000000000 get_maxdenom
     /tmp/cccVhVyH.s:21235  .text.get_maxdenom:000000000000001c $d
     /tmp/cccVhVyH.s:21240  .rodata.op_2frac.str1.4:0000000000000000 $d
     /tmp/cccVhVyH.s:21250  .text.op_2frac:0000000000000000 $t
     /tmp/cccVhVyH.s:21258  .text.op_2frac:0000000000000000 op_2frac
     /tmp/cccVhVyH.s:21396  .text.op_2frac:0000000000000088 $d
     /tmp/cccVhVyH.s:21406  .text.op_fracdenom:0000000000000000 $t
     /tmp/cccVhVyH.s:21414  .text.op_fracdenom:0000000000000000 op_fracdenom
     /tmp/cccVhVyH.s:21569  .text.op_fracdenom:0000000000000080 $d
     /tmp/cccVhVyH.s:21574  .text.op_float:0000000000000000 $t
     /tmp/cccVhVyH.s:21582  .text.op_float:0000000000000000 op_float
     /tmp/cccVhVyH.s:21777  .text.op_float:00000000000000c4 $d
     /tmp/cccVhVyH.s:21788  .text.cmddisp:0000000000000000 $t
     /tmp/cccVhVyH.s:21796  .text.cmddisp:0000000000000000 cmddisp
     /tmp/cccVhVyH.s:21873  .text.cmddisp:0000000000000036 $d
     /tmp/cccVhVyH.s:22061  .text.cmddisp:00000000000000bc $d
     /tmp/cccVhVyH.s:22067  .text.set_int_base:0000000000000000 $t
     /tmp/cccVhVyH.s:22075  .text.set_int_base:0000000000000000 set_int_base
     /tmp/cccVhVyH.s:22182  .text.set_int_base:000000000000004c $d
     /tmp/cccVhVyH.s:22189  .text.op_fract:0000000000000000 $t
     /tmp/cccVhVyH.s:22197  .text.op_fract:0000000000000000 op_fract
     /tmp/cccVhVyH.s:22256  .text.op_fract:0000000000000040 $d
     /tmp/cccVhVyH.s:22261  .text.cmdsavem:0000000000000000 $t
     /tmp/cccVhVyH.s:22269  .text.cmdsavem:0000000000000000 cmdsavem
     /tmp/cccVhVyH.s:22303  .text.cmdsavem:0000000000000018 $d
     /tmp/cccVhVyH.s:22308  .text.set_entry:0000000000000000 $t
     /tmp/cccVhVyH.s:22316  .text.set_entry:0000000000000000 set_entry
     /tmp/cccVhVyH.s:22354  .text.set_entry:0000000000000020 $d
     /tmp/cccVhVyH.s:22361  .text.get_trig_mode:0000000000000000 $t
     /tmp/cccVhVyH.s:22369  .text.get_trig_mode:0000000000000000 get_trig_mode
     /tmp/cccVhVyH.s:22404  .text.get_trig_mode:0000000000000024 $d
     /tmp/cccVhVyH.s:22411  .text.cmdpause:0000000000000000 $t
     /tmp/cccVhVyH.s:22419  .text.cmdpause:0000000000000000 cmdpause
     /tmp/cccVhVyH.s:22459  .text.cmdpause:000000000000001c $d
                            *COM*:0000000000000001 Pause
     /tmp/cccVhVyH.s:22465  .text.op_setspeed:0000000000000000 $t
     /tmp/cccVhVyH.s:22473  .text.op_setspeed:0000000000000000 op_setspeed
     /tmp/cccVhVyH.s:22487  .text.op_prompt:0000000000000000 $t
     /tmp/cccVhVyH.s:22495  .text.op_prompt:0000000000000000 op_prompt
     /tmp/cccVhVyH.s:22567  .text.op_prompt:0000000000000028 $d
ARM GAS  /tmp/cccVhVyH.s 			page 929


     /tmp/cccVhVyH.s:22573  .text.XisInt:0000000000000000 $t
     /tmp/cccVhVyH.s:22581  .text.XisInt:0000000000000000 XisInt
     /tmp/cccVhVyH.s:22693  .text.XisInt:000000000000005c $d
     /tmp/cccVhVyH.s:22698  .text.XisEvenOrOdd:0000000000000000 $t
     /tmp/cccVhVyH.s:22706  .text.XisEvenOrOdd:0000000000000000 XisEvenOrOdd
     /tmp/cccVhVyH.s:22820  .text.XisEvenOrOdd:0000000000000060 $d
     /tmp/cccVhVyH.s:22825  .text.XisPrime:0000000000000000 $t
     /tmp/cccVhVyH.s:22833  .text.XisPrime:0000000000000000 XisPrime
     /tmp/cccVhVyH.s:22993  .text.XisPrime:000000000000007c $d
     /tmp/cccVhVyH.s:22999  .text.isInfinite:0000000000000000 $t
     /tmp/cccVhVyH.s:23007  .text.isInfinite:0000000000000000 isInfinite
     /tmp/cccVhVyH.s:23059  .text.isInfinite:000000000000002c $d
     /tmp/cccVhVyH.s:23064  .text.isNan:0000000000000000 $t
     /tmp/cccVhVyH.s:23072  .text.isNan:0000000000000000 isNan
     /tmp/cccVhVyH.s:23139  .text.isNan:000000000000003c $d
     /tmp/cccVhVyH.s:23144  .text.isSpecial:0000000000000000 $t
     /tmp/cccVhVyH.s:23152  .text.isSpecial:0000000000000000 isSpecial
     /tmp/cccVhVyH.s:23219  .text.isSpecial:000000000000003c $d
     /tmp/cccVhVyH.s:23224  .text.op_entryp:0000000000000000 $t
     /tmp/cccVhVyH.s:23232  .text.op_entryp:0000000000000000 op_entryp
     /tmp/cccVhVyH.s:23253  .text.op_entryp:0000000000000010 $d
     /tmp/cccVhVyH.s:23258  .text.reg_decode:0000000000000000 $t
     /tmp/cccVhVyH.s:23266  .text.reg_decode:0000000000000000 reg_decode
     /tmp/cccVhVyH.s:24072  .text.reg_decode:0000000000000220 $d
     /tmp/cccVhVyH.s:24086  .text.op_regcopy:0000000000000000 $t
     /tmp/cccVhVyH.s:24094  .text.op_regcopy:0000000000000000 op_regcopy
     /tmp/cccVhVyH.s:24197  .text.op_regcopy:0000000000000048 $d
     /tmp/cccVhVyH.s:24202  .text.op_regswap:0000000000000000 $t
     /tmp/cccVhVyH.s:24210  .text.op_regswap:0000000000000000 op_regswap
     /tmp/cccVhVyH.s:24344  .text.op_regswap:000000000000006c $d
     /tmp/cccVhVyH.s:24349  .text.op_regclr:0000000000000000 $t
     /tmp/cccVhVyH.s:24357  .text.op_regclr:0000000000000000 op_regclr
     /tmp/cccVhVyH.s:24438  .text.op_regclr:0000000000000044 $d
     /tmp/cccVhVyH.s:24443  .text.op_regsort:0000000000000000 $t
     /tmp/cccVhVyH.s:24451  .text.op_regsort:0000000000000000 op_regsort
     /tmp/cccVhVyH.s:24735  .text.reset_volatile_state:0000000000000000 $t
     /tmp/cccVhVyH.s:24743  .text.reset_volatile_state:0000000000000000 reset_volatile_state
     /tmp/cccVhVyH.s:24767  .text.reset_volatile_state:0000000000000010 $d
     /tmp/cccVhVyH.s:24772  .rodata.busy.str1.4:0000000000000000 $d
     /tmp/cccVhVyH.s:24776  .text.busy:0000000000000000 $t
     /tmp/cccVhVyH.s:24784  .text.busy:0000000000000000 busy
     /tmp/cccVhVyH.s:24823  .text.busy:0000000000000018 $d
                            *COM*:0000000000000004 Busy
     /tmp/cccVhVyH.s:24832  .text.intMonadic:0000000000000000 $t
     /tmp/cccVhVyH.s:24840  .text.intMonadic:0000000000000000 intMonadic
     /tmp/cccVhVyH.s:25069  .text.intMonadic:0000000000000084 $d
                            *COM*:0000000000000002 XeqOpCode
     /tmp/cccVhVyH.s:25079  .text.intDyadic:0000000000000000 $t
     /tmp/cccVhVyH.s:25087  .text.intDyadic:0000000000000000 intDyadic
     /tmp/cccVhVyH.s:25371  .text.intDyadic:00000000000000c0 $d
     /tmp/cccVhVyH.s:25381  .text.xeq_init_contexts:0000000000000000 $t
     /tmp/cccVhVyH.s:25389  .text.xeq_init_contexts:0000000000000000 xeq_init_contexts
     /tmp/cccVhVyH.s:25508  .text.xeq_init_contexts:0000000000000078 $d
                            *COM*:0000000000000004 ProgFree
     /tmp/cccVhVyH.s:25521  .text.plot_check_range:0000000000000000 $t
     /tmp/cccVhVyH.s:25529  .text.plot_check_range:0000000000000000 plot_check_range
     /tmp/cccVhVyH.s:25794  .text.plot_check_range:00000000000000a0 $d
ARM GAS  /tmp/cccVhVyH.s 			page 930


     /tmp/cccVhVyH.s:25801  .text.cmdplotdisplay:0000000000000000 $t
     /tmp/cccVhVyH.s:25809  .text.cmdplotdisplay:0000000000000000 cmdplotdisplay
     /tmp/cccVhVyH.s:25860  .text.cmdplotdisplay:0000000000000020 $d
     /tmp/cccVhVyH.s:25865  .text.cmdplotinit:0000000000000000 $t
     /tmp/cccVhVyH.s:25873  .text.cmdplotinit:0000000000000000 cmdplotinit
     /tmp/cccVhVyH.s:26008  .text.cmdplotdim:0000000000000000 $t
     /tmp/cccVhVyH.s:26016  .text.cmdplotdim:0000000000000000 cmdplotdim
     /tmp/cccVhVyH.s:26106  .text.cmdplotpixel:0000000000000000 $t
     /tmp/cccVhVyH.s:26114  .text.cmdplotpixel:0000000000000000 cmdplotpixel
     /tmp/cccVhVyH.s:26321  .text.not_running:0000000000000000 $t
     /tmp/cccVhVyH.s:26329  .text.not_running:0000000000000000 not_running
     /tmp/cccVhVyH.s:26384  .text.not_running:000000000000001c $d
     /tmp/cccVhVyH.s:26390  .text.set_running_off_sst:0000000000000000 $t
     /tmp/cccVhVyH.s:26398  .text.set_running_off_sst:0000000000000000 set_running_off_sst
     /tmp/cccVhVyH.s:26415  .text.set_running_off_sst:0000000000000008 $d
     /tmp/cccVhVyH.s:26420  .text.set_running_on_sst:0000000000000000 $t
     /tmp/cccVhVyH.s:26428  .text.set_running_on_sst:0000000000000000 set_running_on_sst
     /tmp/cccVhVyH.s:26445  .text.set_running_on_sst:0000000000000008 $d
     /tmp/cccVhVyH.s:26450  .text.set_running_off:0000000000000000 $t
     /tmp/cccVhVyH.s:26458  .text.set_running_off:0000000000000000 set_running_off
     /tmp/cccVhVyH.s:26502  .text.set_running_off:000000000000001c $d
     /tmp/cccVhVyH.s:26508  .text.set_running_on:0000000000000000 $t
     /tmp/cccVhVyH.s:26516  .text.set_running_on:0000000000000000 set_running_on
     /tmp/cccVhVyH.s:26611  .text.set_running_on:0000000000000034 $d
     /tmp/cccVhVyH.s:26620  .text.gsbgto:0000000000000000 $t
     /tmp/cccVhVyH.s:26627  .text.gsbgto:0000000000000000 gsbgto
     /tmp/cccVhVyH.s:26814  .text.gsbgto:0000000000000094 $d
     /tmp/cccVhVyH.s:26825  .text.cmdgtocommon:0000000000000000 $t
     /tmp/cccVhVyH.s:26833  .text.cmdgtocommon:0000000000000000 cmdgtocommon
     /tmp/cccVhVyH.s:26919  .text.cmdgtocommon:000000000000002c $d
     /tmp/cccVhVyH.s:26925  .text.cmdgto:0000000000000000 $t
     /tmp/cccVhVyH.s:26933  .text.cmdgto:0000000000000000 cmdgto
     /tmp/cccVhVyH.s:27014  .text.cmdgto:000000000000003c $d
     /tmp/cccVhVyH.s:27022  .text.branchtoalpha:0000000000000000 $t
     /tmp/cccVhVyH.s:27029  .text.branchtoalpha:0000000000000000 branchtoalpha
     /tmp/cccVhVyH.s:27086  .text.cmdalphagto:0000000000000000 $t
     /tmp/cccVhVyH.s:27094  .text.cmdalphagto:0000000000000000 cmdalphagto
     /tmp/cccVhVyH.s:27146  .text.op_gtoalpha:0000000000000000 $t
     /tmp/cccVhVyH.s:27154  .text.op_gtoalpha:0000000000000000 op_gtoalpha
     /tmp/cccVhVyH.s:27218  .text.op_gtoalpha:0000000000000030 $d
     /tmp/cccVhVyH.s:27223  .text.cmdskip:0000000000000000 $t
     /tmp/cccVhVyH.s:27231  .text.cmdskip:0000000000000000 cmdskip
     /tmp/cccVhVyH.s:27414  .text.cmdskip:0000000000000078 $d
     /tmp/cccVhVyH.s:27422  .text.cmdback:0000000000000000 $t
     /tmp/cccVhVyH.s:27430  .text.cmdback:0000000000000000 cmdback
     /tmp/cccVhVyH.s:27583  .text.cmdback:0000000000000064 $d
     /tmp/cccVhVyH.s:27591  .text.usergsb_common:0000000000000000 $t
     /tmp/cccVhVyH.s:27598  .text.usergsb_common:0000000000000000 usergsb_common
     /tmp/cccVhVyH.s:27714  .text.usergsb_common:0000000000000088 $d
     /tmp/cccVhVyH.s:27723  .text.do_usergsb:0000000000000000 $t
     /tmp/cccVhVyH.s:27731  .text.do_usergsb:0000000000000000 do_usergsb
     /tmp/cccVhVyH.s:27764  .text.do_usergsb:0000000000000014 $d
     /tmp/cccVhVyH.s:27769  .text.cmdmultigto:0000000000000000 $t
     /tmp/cccVhVyH.s:27777  .text.cmdmultigto:0000000000000000 cmdmultigto
     /tmp/cccVhVyH.s:27881  .text.cmdmultigto:000000000000004c $d
     /tmp/cccVhVyH.s:27887  .text.store_a_to_d:0000000000000000 $t
     /tmp/cccVhVyH.s:27895  .text.store_a_to_d:0000000000000000 store_a_to_d
ARM GAS  /tmp/cccVhVyH.s 			page 931


     /tmp/cccVhVyH.s:27943  .text.store_a_to_d:0000000000000020 $d
     /tmp/cccVhVyH.s:27948  .text.cmdlocr:0000000000000000 $t
     /tmp/cccVhVyH.s:27956  .text.cmdlocr:0000000000000000 cmdlocr
     /tmp/cccVhVyH.s:28333  .text.cmdlocr:0000000000000180 $d
     /tmp/cccVhVyH.s:28341  .text.cmdxout:0000000000000000 $t
     /tmp/cccVhVyH.s:28349  .text.cmdxout:0000000000000000 cmdxout
     /tmp/cccVhVyH.s:28874  .text.cmdxout:00000000000001ec $d
     /tmp/cccVhVyH.s:28889  .text.cmdconverged:0000000000000000 $t
     /tmp/cccVhVyH.s:28897  .text.cmdconverged:0000000000000000 cmdconverged
     /tmp/cccVhVyH.s:29126  .text.cmdconverged:00000000000000e0 $d
     /tmp/cccVhVyH.s:29136  .text.cmdshuffle:0000000000000000 $t
     /tmp/cccVhVyH.s:29144  .text.cmdshuffle:0000000000000000 cmdshuffle
     /tmp/cccVhVyH.s:29377  .text.cmdshuffle:0000000000000084 $d
     /tmp/cccVhVyH.s:29383  .text.cmdmode:0000000000000000 $t
     /tmp/cccVhVyH.s:29391  .text.cmdmode:0000000000000000 cmdmode
     /tmp/cccVhVyH.s:29472  .text.cmdmode:0000000000000050 $d
     /tmp/cccVhVyH.s:29477  .text.cmdlpop:0000000000000000 $t
     /tmp/cccVhVyH.s:29485  .text.cmdlpop:0000000000000000 cmdlpop
     /tmp/cccVhVyH.s:29556  .text.cmdlpop:0000000000000034 $d
     /tmp/cccVhVyH.s:29562  .text.cmdregs:0000000000000000 $t
     /tmp/cccVhVyH.s:29570  .text.cmdregs:0000000000000000 cmdregs
     /tmp/cccVhVyH.s:29750  .text.cmdregs:00000000000000ac $d
     /tmp/cccVhVyH.s:29757  .text.op_double:0000000000000000 $t
     /tmp/cccVhVyH.s:29765  .text.op_double:0000000000000000 op_double
     /tmp/cccVhVyH.s:30065  .text.op_double:000000000000011c $d
     /tmp/cccVhVyH.s:30072  .text.cmdrestm:0000000000000000 $t
     /tmp/cccVhVyH.s:30080  .text.cmdrestm:0000000000000000 cmdrestm
     /tmp/cccVhVyH.s:30260  .text.cmdrestm:0000000000000098 $d
     /tmp/cccVhVyH.s:30265  .text.cmdxin:0000000000000000 $t
     /tmp/cccVhVyH.s:30273  .text.cmdxin:0000000000000000 cmdxin
     /tmp/cccVhVyH.s:30703  .text.cmdxin:00000000000001b4 $d
     /tmp/cccVhVyH.s:30716  .rodata.xeq.str1.4:0000000000000000 $d
     /tmp/cccVhVyH.s:30720  .text.xeq:0000000000000000 $t
     /tmp/cccVhVyH.s:30728  .text.xeq:0000000000000000 xeq
     /tmp/cccVhVyH.s:30922  .text.xeq:00000000000000ae $d
     /tmp/cccVhVyH.s:30930  .text.xeq:00000000000000bc $t
     /tmp/cccVhVyH.s:31335  .text.xeq:0000000000000214 $d
     /tmp/cccVhVyH.s:31378  .text.xeq:0000000000000250 $t
     /tmp/cccVhVyH.s:35112  .text.dispatch_xrom:0000000000000000 dispatch_xrom
     /tmp/cccVhVyH.s:31941  .text.xeq:0000000000000446 $d
     /tmp/cccVhVyH.s:31985  .text.xeq:000000000000049c $t
     /tmp/cccVhVyH.s:32179  .text.xeq:000000000000052c $d
     /tmp/cccVhVyH.s:32217  .text.xeq:0000000000000550 $t
     /tmp/cccVhVyH.s:33120  .text.xeq:0000000000000874 $d
     /tmp/cccVhVyH.s:33146  .text.xeq:00000000000008a0 $t
     /tmp/cccVhVyH.s:34061  .text.xeq:0000000000000bf8 $d
     /tmp/cccVhVyH.s:34073  .text.xeq:0000000000000c10 $t
     /tmp/cccVhVyH.s:34833  .text.xeq:0000000000000ec8 $d
     /tmp/cccVhVyH.s:34849  .text.xeq_single:0000000000000000 $t
     /tmp/cccVhVyH.s:34856  .text.xeq_single:0000000000000000 xeq_single
     /tmp/cccVhVyH.s:34895  .text.xeq_single:0000000000000020 $d
     /tmp/cccVhVyH.s:34900  .text.xeq_xrom2:0000000000000000 $t
     /tmp/cccVhVyH.s:34907  .text.xeq_xrom2:0000000000000000 xeq_xrom2
     /tmp/cccVhVyH.s:35055  .text.xeq_xrom2:0000000000000070 $d
     /tmp/cccVhVyH.s:35069  .text.xeq_xrom:0000000000000000 $t
     /tmp/cccVhVyH.s:35077  .text.xeq_xrom:0000000000000000 xeq_xrom
     /tmp/cccVhVyH.s:35100  .text.xeq_xrom:0000000000000010 $d
ARM GAS  /tmp/cccVhVyH.s 			page 932


     /tmp/cccVhVyH.s:35105  .text.dispatch_xrom:0000000000000000 $t
     /tmp/cccVhVyH.s:35247  .text.dispatch_xrom:0000000000000060 $d
     /tmp/cccVhVyH.s:35257  .text.op_rs:0000000000000000 $t
     /tmp/cccVhVyH.s:35265  .text.op_rs:0000000000000000 op_rs
     /tmp/cccVhVyH.s:35409  .text.op_rs:0000000000000078 $d
     /tmp/cccVhVyH.s:35418  .text.xeqprog:0000000000000000 $t
     /tmp/cccVhVyH.s:35426  .text.xeqprog:0000000000000000 xeqprog
     /tmp/cccVhVyH.s:35546  .text.xeqprog:0000000000000068 $d
                            *COM*:0000000000000004 JustStopped
     /tmp/cccVhVyH.s:35555  .text.xeq_sst_bst:0000000000000000 $t
     /tmp/cccVhVyH.s:35563  .text.xeq_sst_bst:0000000000000000 xeq_sst_bst
     /tmp/cccVhVyH.s:35776  .text.xeq_sst_bst:000000000000009c $d
     /tmp/cccVhVyH.s:35786  .text.init_34s:0000000000000000 $t
     /tmp/cccVhVyH.s:35794  .text.init_34s:0000000000000000 init_34s
     /tmp/cccVhVyH.s:35854  .text.init_34s:0000000000000034 $d
     /tmp/cccVhVyH.s:35860  .rodata.paste_raw_x.str1.4:0000000000000000 $d
     /tmp/cccVhVyH.s:35864  .text.paste_raw_x:0000000000000000 $t
     /tmp/cccVhVyH.s:35872  .text.paste_raw_x:0000000000000000 paste_raw_x
     /tmp/cccVhVyH.s:36240  .text.paste_raw_x:00000000000000f4 $d
     /tmp/cccVhVyH.s:36253  .rodata.fill_buffer_from_raw_x.str1.4:0000000000000000 $d
     /tmp/cccVhVyH.s:36257  .text.fill_buffer_from_raw_x:0000000000000000 $t
     /tmp/cccVhVyH.s:36265  .text.fill_buffer_from_raw_x:0000000000000000 fill_buffer_from_raw_x
     /tmp/cccVhVyH.s:36522  .text.fill_buffer_from_raw_x:00000000000000c4 $d
                            *COM*:0000000000000004 RectPolConv
     /tmp/cccVhVyH.s:36611  .rodata.xrom_targets:0000000000000000 xrom_targets
     /tmp/cccVhVyH.s:36551  .rodata:0000000000000000 $d
     /tmp/cccVhVyH.s:36559  .bss.result.11721:0000000000000000 $d
     /tmp/cccVhVyH.s:36563  .bss.result.11721:0000000000000000 result.11721
     /tmp/cccVhVyH.s:36566  .data.RegionTab:0000000000000000 $d
     /tmp/cccVhVyH.s:36570  .data.RegionTab:0000000000000000 RegionTab
     /tmp/cccVhVyH.s:36576  .rodata.StackRegMask:0000000000000000 $d
     /tmp/cccVhVyH.s:36580  .rodata.StackRegMask:0000000000000000 StackRegMask
     /tmp/cccVhVyH.s:36584  .rodata.convergence_tolerances:0000000000000000 $d
     /tmp/cccVhVyH.s:36588  .rodata.convergence_tolerances:0000000000000000 convergence_tolerances
     /tmp/cccVhVyH.s:36593  .rodata.modes.11414:0000000000000000 $d
     /tmp/cccVhVyH.s:36597  .rodata.modes.11414:0000000000000000 modes.11414
     /tmp/cccVhVyH.s:36600  .rodata.modes.11931:0000000000000000 $d
     /tmp/cccVhVyH.s:36604  .rodata.modes.11931:0000000000000000 modes.11931
     /tmp/cccVhVyH.s:36607  .rodata.xrom_targets:0000000000000000 $d
     /tmp/cccVhVyH.s:19026  .text.do_tst:000000000000006b $d
     /tmp/cccVhVyH.s:19026  .text.do_tst:000000000000006c $t
     /tmp/cccVhVyH.s:20711  .text.cmdflag:0000000000000033 $d
     /tmp/cccVhVyH.s:20711  .text.cmdflag:0000000000000034 $t
     /tmp/cccVhVyH.s:21876  .text.cmddisp:0000000000000039 $d
     /tmp/cccVhVyH.s:21876  .text.cmddisp:000000000000003a $t

UNDEFINED SYMBOLS
StateWhileOn
main_ram
xrom_size
XromParams
XromLocal
xset
decNumberRoundDigits
decNumberTrunc
dn_eq
set_carry
ARM GAS  /tmp/cccVhVyH.s 			page 933


dn_to_ull
dn_abs
check_overflow
set_overflow
build_value
dn_lt
const_2pow64
xcopy
argcmds
display
shutdown
library_ram
backup_ram
scopy
num_arg_0
prt
scopy_char
DispMsg
dot
error_message
JustDisplayed
ShowRPN
decContextDefault
decimal64FromNumber
decimal128FromNumber
decimal64ToNumber
decimal128ToNumber
int_base
cnsts
cnsts_d128
cnsts_d64
dn_max
dn_add
dn_subtract
dn_multiply
dn_divide
dn_min
cmplxDivide
cmplxAdd
cmplxSubtract
cmplxMultiply
decNumberNormalize
decNumberRoundDecimals
const_360
const_2PI
const_400
reset_shift
dn_minus
set_menu
display_current_menu
finish_cpx_entry
set_default_menu
intMax
intAdd
intSubtract
intMultiply
intDivide
ARM GAS  /tmp/cccVhVyH.s 			page 934


intMin
extract_value
dn_dec
dn_eq0
dn_inc
row_column_to_keycode
ullint_to_dn
find_char
decNumberFromString
decNumberCopy
decNumberZero
stack_begin
const_PI
word_size
int_mode
dn_mulpow10
put_key
build_user_menu_from_program
const_9on5
const_32
decNumberPow10
const_0_05
dn_log10
const_20
cnsts_conv
print_justified
keycode_to_row_column
dn_compare
decNumberRnd
dn_mul100
dn_le0
dn_lt0
dn_1
mask_value
int_to_dn
decNumber2Fraction
GoFast
alpha_view_common
is_int
is_even
isPrime
dn_to_int
message
monfuncs
xrom
dyfuncs
SizeStatRegs
frozen_display
DispPlot
alpha_rcl_s
XromA2D
relative_error
cmplxR
absolute_error
const_1e_14
const_1e_32
const_1e_24
ARM GAS  /tmp/cccVhVyH.s 			page 935


const_NaN
print_trace
sprintf
multicmds
trifuncs
niladics
sigma_minus
sigma_val
intChs
const_0
const_1
sigma_plus
set_NaN
is_key_pressed
clr_dot
set_dot
OpCode
checksum_ram
init_state
reset
StopWatchStatus
strdup
strtok
strtoull
strchr
free
__aeabi_uldivmod
decNumberToString

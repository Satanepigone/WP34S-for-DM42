ARM GAS  /tmp/ccjeMhND.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"xeq.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.find_section_bounds,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	find_section_bounds:
  27              	.LVL0:
  28              	.LFB19:
  29              		.file 1 "src/xeq.c"
   1:src/xeq.c     **** /* This file is part of 34S.
   2:src/xeq.c     ****  * 
   3:src/xeq.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/xeq.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/xeq.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/xeq.c     ****  * (at your option) any later version.
   7:src/xeq.c     ****  * 
   8:src/xeq.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/xeq.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/xeq.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/xeq.c     ****  * GNU General Public License for more details.
  12:src/xeq.c     ****  * 
  13:src/xeq.c     ****  * You should have received a copy of the GNU General Public License
  14:src/xeq.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/xeq.c     ****  */
  16:src/xeq.c     **** 
  17:src/xeq.c     **** #ifndef REALBUILD
  18:src/xeq.c     **** 
  19:src/xeq.c     **** #if defined(WIN32) && !defined(QTGUI) && !defined(IOS) && !defined(__GNUC__) && !defined(DM42)
  20:src/xeq.c     **** 
  21:src/xeq.c     **** #include <stdlib.h>  // sleep
  22:src/xeq.c     **** #include "win32.h"
  23:src/xeq.c     **** #define sleep _sleep
  24:src/xeq.c     **** #define strtoull _strtoui64
  25:src/xeq.c     **** 
  26:src/xeq.c     **** #else
  27:src/xeq.c     **** 
  28:src/xeq.c     **** #ifdef DM42
  29:src/xeq.c     **** #include "dmcp.h"
ARM GAS  /tmp/ccjeMhND.s 			page 2


  30:src/xeq.c     **** #else
  31:src/xeq.c     **** #include <unistd.h>
  32:src/xeq.c     **** #include <sys/time.h>
  33:src/xeq.c     **** extern unsigned long long strtoull(const char *, char **, int);
  34:src/xeq.c     **** #endif
  35:src/xeq.c     **** 
  36:src/xeq.c     **** #endif
  37:src/xeq.c     **** 
  38:src/xeq.c     **** #include <stdio.h>   // (s)printf
  39:src/xeq.c     **** #include <string.h>
  40:src/xeq.c     **** #include <stdlib.h>
  41:src/xeq.c     **** 
  42:src/xeq.c     **** #endif // not REALBUILD
  43:src/xeq.c     **** 
  44:src/xeq.c     **** #ifdef IOS
  45:src/xeq.c     **** #include <stdarg.h>
  46:src/xeq.c     **** #endif
  47:src/xeq.c     **** 
  48:src/xeq.c     **** #if __GNUC__ >= 4 && __GNUC_MINOR__ >= 6
  49:src/xeq.c     **** #define GNUC_POP_ERROR
  50:src/xeq.c     **** #pragma GCC diagnostic push
  51:src/xeq.c     **** #pragma GCC diagnostic ignored "-Warray-bounds"
  52:src/xeq.c     **** #endif
  53:src/xeq.c     **** 
  54:src/xeq.c     **** #define XEQ_INTERNAL 1
  55:src/xeq.c     **** #define DM42SAFE
  56:src/xeq.c     **** #include "xeq.h"
  57:src/xeq.c     **** #include "storage.h"
  58:src/xeq.c     **** #include "decn.h"
  59:src/xeq.c     **** #include "complex.h"
  60:src/xeq.c     **** #include "stats.h"
  61:src/xeq.c     **** #include "display.h"
  62:src/xeq.c     **** #include "consts.h"
  63:src/xeq.c     **** #include "int.h"
  64:src/xeq.c     **** #include "date.h"
  65:src/xeq.c     **** #include "lcd.h"
  66:src/xeq.c     **** #include "xrom.h"
  67:src/xeq.c     **** #include "alpha.h"
  68:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
  69:src/xeq.c     **** #include "stopwatch.h"
  70:src/xeq.c     **** #endif
  71:src/xeq.c     **** #ifndef DM42
  72:src/xeq.c     **** #include "printer.h"
  73:src/xeq.c     **** #endif
  74:src/xeq.c     **** #undef DM42SAFE
  75:src/xeq.c     **** 
  76:src/xeq.c     **** #include "pretty.h"
  77:src/xeq.c     **** 
  78:src/xeq.c     **** 
  79:src/xeq.c     **** #include "xrom_targets.c"	// Generated by PP
  80:src/xeq.c     **** 
  81:src/xeq.c     **** /* Define the number of program Ticks that must elapse between flashing the
  82:src/xeq.c     ****  * RCL annunciator.
  83:src/xeq.c     ****  */
  84:src/xeq.c     **** #define TICKS_PER_FLASH	(5)
  85:src/xeq.c     **** 
  86:src/xeq.c     **** /*
ARM GAS  /tmp/ccjeMhND.s 			page 3


  87:src/xeq.c     ****  *  A program is running
  88:src/xeq.c     ****  */
  89:src/xeq.c     **** FLAG Running;
  90:src/xeq.c     **** FLAG XromRunning;
  91:src/xeq.c     **** 
  92:src/xeq.c     **** #ifndef CONSOLE
  93:src/xeq.c     **** /*
  94:src/xeq.c     ****  *  A program has just stopped
  95:src/xeq.c     ****  */
  96:src/xeq.c     **** FLAG JustStopped;
  97:src/xeq.c     **** #endif
  98:src/xeq.c     **** 
  99:src/xeq.c     **** /*
 100:src/xeq.c     ****  *  Count down counter for a programmed pause
 101:src/xeq.c     ****  */
 102:src/xeq.c     **** volatile unsigned char Pause;
 103:src/xeq.c     **** 
 104:src/xeq.c     **** /*
 105:src/xeq.c     ****  *  Some long running function has called busy();
 106:src/xeq.c     ****  */
 107:src/xeq.c     **** FLAG Busy;
 108:src/xeq.c     **** 
 109:src/xeq.c     **** /*
 110:src/xeq.c     ****  *  Error code
 111:src/xeq.c     ****  */
 112:src/xeq.c     **** SMALL_INT Error;
 113:src/xeq.c     **** 
 114:src/xeq.c     **** /*
 115:src/xeq.c     ****  *  Indication of PC wrap around
 116:src/xeq.c     ****  */
 117:src/xeq.c     **** FLAG PcWrapped;
 118:src/xeq.c     **** 
 119:src/xeq.c     **** /*
 120:src/xeq.c     ****  *  Currently executed function
 121:src/xeq.c     ****  */
 122:src/xeq.c     **** s_opcode XeqOpCode;
 123:src/xeq.c     **** 
 124:src/xeq.c     **** /*
 125:src/xeq.c     ****  *  Temporary display (not X)
 126:src/xeq.c     ****  */
 127:src/xeq.c     **** SMALL_INT ShowRegister;
 128:src/xeq.c     **** 
 129:src/xeq.c     **** /*
 130:src/xeq.c     ****  *  User code being called from XROM
 131:src/xeq.c     ****  */
 132:src/xeq.c     **** SMALL_INT XromUserPc;
 133:src/xeq.c     **** SMALL_INT UserLocalRegs;
 134:src/xeq.c     **** 
 135:src/xeq.c     **** /* We need various different math contexts.
 136:src/xeq.c     ****  * More efficient to define these globally and reuse them as needed.
 137:src/xeq.c     ****  */
 138:src/xeq.c     **** decContext Ctx;
 139:src/xeq.c     **** 
 140:src/xeq.c     **** /*
 141:src/xeq.c     ****  * A buffer for instruction display
 142:src/xeq.c     ****  */
 143:src/xeq.c     **** char TraceBuffer[25];
ARM GAS  /tmp/ccjeMhND.s 			page 4


 144:src/xeq.c     **** 
 145:src/xeq.c     **** /*
 146:src/xeq.c     ****  *  Total Size of the return stack
 147:src/xeq.c     ****  */
 148:src/xeq.c     **** SMALL_INT RetStkSize;
 149:src/xeq.c     **** 
 150:src/xeq.c     **** /*
 151:src/xeq.c     ****  *  Number of remaining program steps
 152:src/xeq.c     ****  */
 153:src/xeq.c     **** SMALL_INT ProgFree;
 154:src/xeq.c     **** 
 155:src/xeq.c     **** /*
 156:src/xeq.c     ****  * The actual top of the return stack
 157:src/xeq.c     ****  */
 158:src/xeq.c     **** unsigned short *RetStk;
 159:src/xeq.c     **** 
 160:src/xeq.c     **** /*
 161:src/xeq.c     ****  *  The location of the RPN stack
 162:src/xeq.c     ****  */
 163:src/xeq.c     **** REGISTER *StackBase;
 164:src/xeq.c     **** 
 165:src/xeq.c     **** #ifdef INFRARED
 166:src/xeq.c     **** /*
 167:src/xeq.c     ****  *  Is tracing active?
 168:src/xeq.c     ****  */
 169:src/xeq.c     **** FLAG Tracing;
 170:src/xeq.c     **** #endif
 171:src/xeq.c     **** 
 172:src/xeq.c     **** /*
 173:src/xeq.c     **** *	Indicates that a coordinate converstion has just happened
 174:src/xeq.c     **** */
 175:src/xeq.c     **** #ifdef RP_PREFIX
 176:src/xeq.c     **** SMALL_INT RectPolConv; // 1 - R->P just done; 2 - P->R just done
 177:src/xeq.c     **** #endif
 178:src/xeq.c     **** 
 179:src/xeq.c     **** /*
 180:src/xeq.c     ****  *  Check if the current PC is in XROM
 181:src/xeq.c     ****  */
 182:src/xeq.c     **** int is_xrom(void) {
 183:src/xeq.c     **** 	return isXROM(state_pc());
 184:src/xeq.c     **** }
 185:src/xeq.c     **** 
 186:src/xeq.c     **** /*
 187:src/xeq.c     ****  *  Shift the return stack.
 188:src/xeq.c     ****  *  The distance is in levels.
 189:src/xeq.c     ****  *  If argument is negative, return stack will shrink.
 190:src/xeq.c     ****  *  Returns 1 if unsuccessful (error is set)
 191:src/xeq.c     ****  */
 192:src/xeq.c     **** int move_retstk(int distance)
 193:src/xeq.c     **** {
 194:src/xeq.c     **** #ifndef REALBUILD
 195:src/xeq.c     **** 	// Sanity check
 196:src/xeq.c     **** 	if (XromFlags.xIN) {
 197:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 198:src/xeq.c     **** 		return 1;
 199:src/xeq.c     **** 	}
 200:src/xeq.c     **** #endif
ARM GAS  /tmp/ccjeMhND.s 			page 5


 201:src/xeq.c     **** 	if (RetStkSize + RetStkPtr + distance < 0) {
 202:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 203:src/xeq.c     **** 		return 1;
 204:src/xeq.c     **** 	}
 205:src/xeq.c     **** 	xcopy(RetStk + RetStkPtr + distance, RetStk + RetStkPtr, (-RetStkPtr) << 1);
 206:src/xeq.c     **** 	RetStk += distance;
 207:src/xeq.c     **** 	RetStkSize += distance;
 208:src/xeq.c     **** 	return 0;
 209:src/xeq.c     **** }
 210:src/xeq.c     **** 
 211:src/xeq.c     **** /*
 212:src/xeq.c     ****  *  How many stack levels with local data have we?
 213:src/xeq.c     ****  */
 214:src/xeq.c     **** int local_levels(void) {
 215:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 216:src/xeq.c     **** }
 217:src/xeq.c     **** 
 218:src/xeq.c     **** /*
 219:src/xeq.c     ****  *  How many local registers have we?
 220:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 221:src/xeq.c     ****  */
 222:src/xeq.c     **** int local_regs_rarg(enum rarg op) {
 223:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 224:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 225:src/xeq.c     **** }
 226:src/xeq.c     **** 
 227:src/xeq.c     **** /*
 228:src/xeq.c     ****  *  How many local registers have we?
 229:src/xeq.c     ****  */
 230:src/xeq.c     **** int local_regs(void) {
 231:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 232:src/xeq.c     **** }
 233:src/xeq.c     **** 
 234:src/xeq.c     **** /*
 235:src/xeq.c     ****  *  How many global registers have we?
 236:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 237:src/xeq.c     ****  */
 238:src/xeq.c     **** unsigned int global_regs_rarg(enum rarg op) {
 239:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 240:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 241:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 242:src/xeq.c     **** 	}
 243:src/xeq.c     **** 	else
 244:src/xeq.c     **** 		return NumRegs;
 245:src/xeq.c     **** }
 246:src/xeq.c     **** 
 247:src/xeq.c     **** /*
 248:src/xeq.c     ****  *  How many global registers have we?
 249:src/xeq.c     ****  */
 250:src/xeq.c     **** unsigned int global_regs(void) {
 251:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 252:src/xeq.c     **** }
 253:src/xeq.c     **** 
 254:src/xeq.c     **** 
 255:src/xeq.c     **** #if defined(CONSOLE)
 256:src/xeq.c     **** // Console screen only
 257:src/xeq.c     **** unsigned int get_local_flags(void) {
ARM GAS  /tmp/ccjeMhND.s 			page 6


 258:src/xeq.c     **** 	if (LocalRegs == 0)
 259:src/xeq.c     **** 		return 0;
 260:src/xeq.c     **** 	return RetStk[LocalRegs + 1];
 261:src/xeq.c     **** }
 262:src/xeq.c     **** #endif
 263:src/xeq.c     **** 
 264:src/xeq.c     **** void version(enum nilop op) {
 265:src/xeq.c     **** 	State2.version = 1;
 266:src/xeq.c     **** 	if (!State2.runmode)
 267:src/xeq.c     **** 		display();
 268:src/xeq.c     **** }
 269:src/xeq.c     **** 
 270:src/xeq.c     **** void cmd_off(enum nilop op) {
 271:src/xeq.c     **** 	shutdown();
 272:src/xeq.c     **** }
 273:src/xeq.c     **** 
 274:src/xeq.c     **** #ifndef state_pc
 275:src/xeq.c     **** unsigned int state_pc(void) {
 276:src/xeq.c     **** 	return State.pc;	
 277:src/xeq.c     **** }
 278:src/xeq.c     **** #endif
 279:src/xeq.c     **** static void raw_set_pc(unsigned int pc) {
 280:src/xeq.c     **** 	State.pc = pc;
 281:src/xeq.c     **** 	update_program_bounds(0);
 282:src/xeq.c     **** }
 283:src/xeq.c     **** 
 284:src/xeq.c     **** /*
 285:src/xeq.c     ****  *  Where do the program regions start?
 286:src/xeq.c     ****  */
 287:src/xeq.c     **** #ifdef DM42
 288:src/xeq.c     **** static s_opcode * RegionTab[] = {
 289:src/xeq.c     **** 	NULL,
 290:src/xeq.c     **** 	NULL,
 291:src/xeq.c     **** 	NULL,
 292:src/xeq.c     **** 	xrom
 293:src/xeq.c     **** };
 294:src/xeq.c     **** void init_RegionTab (void) {
 295:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 296:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 297:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 298:src/xeq.c     **** }
 299:src/xeq.c     **** #else
 300:src/xeq.c     **** static const s_opcode *const RegionTab[] = {
 301:src/xeq.c     **** 	Prog,
 302:src/xeq.c     **** 	UserFlash.prog,
 303:src/xeq.c     **** 	BackupFlash._prog,
 304:src/xeq.c     **** 	xrom
 305:src/xeq.c     **** };
 306:src/xeq.c     **** #endif
 307:src/xeq.c     **** /*
 308:src/xeq.c     ****  *  Size of a program segment
 309:src/xeq.c     ****  */
 310:src/xeq.c     **** int sizeLIB(int region) {
 311:src/xeq.c     **** 	if (region == REGION_XROM)
 312:src/xeq.c     **** 		return xrom_size;
 313:src/xeq.c     **** 	else
 314:src/xeq.c     **** 		return (int)RegionTab[region][-1];
ARM GAS  /tmp/ccjeMhND.s 			page 7


 315:src/xeq.c     **** }
 316:src/xeq.c     **** 
 317:src/xeq.c     **** 
 318:src/xeq.c     **** /*
 319:src/xeq.c     ****  *  Get an opcode, check for double length codes
 320:src/xeq.c     ****  */
 321:src/xeq.c     **** static opcode get_opcode( const s_opcode *loc )
 322:src/xeq.c     **** {
 323:src/xeq.c     **** 	opcode r = *loc;
 324:src/xeq.c     **** 	if ( isDBL(r) ) {
 325:src/xeq.c     **** 		r |= loc[1] << 16;
 326:src/xeq.c     **** 	}
 327:src/xeq.c     **** 	return r;
 328:src/xeq.c     **** }
 329:src/xeq.c     **** 
 330:src/xeq.c     **** 
 331:src/xeq.c     **** /* 
 332:src/xeq.c     ****  * Return the program memory location specified.
 333:src/xeq.c     ****  */
 334:src/xeq.c     **** opcode getprog(unsigned int pc) {
 335:src/xeq.c     **** 
 336:src/xeq.c     **** 	const int region = nLIB(pc);
 337:src/xeq.c     **** 	int offset = offsetLIB(pc);
 338:src/xeq.c     **** 
 339:src/xeq.c     **** 	if (offset < 0 || offset >= sizeLIB(region))
 340:src/xeq.c     **** 		return OP_NIL | OP_END;
 341:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 342:src/xeq.c     **** }
 343:src/xeq.c     **** 
 344:src/xeq.c     **** 
 345:src/xeq.c     **** /* 
 346:src/xeq.c     ****  * Return the physical start-address of the current program
 347:src/xeq.c     ****  */
 348:src/xeq.c     **** const s_opcode *get_current_prog(void) {
 349:src/xeq.c     **** 
 350:src/xeq.c     **** 	const int region = nLIB(ProgBegin);
 351:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 352:src/xeq.c     **** }
 353:src/xeq.c     **** 
 354:src/xeq.c     **** 
 355:src/xeq.c     **** /*
 356:src/xeq.c     ****  *  Set PC with sanity check
 357:src/xeq.c     ****  */
 358:src/xeq.c     **** void set_pc(unsigned int pc) {
 359:src/xeq.c     **** 	if (isRAM(pc)) {
 360:src/xeq.c     **** 		if (pc > ProgSize)
 361:src/xeq.c     **** 			pc = ProgSize;
 362:src/xeq.c     **** 		if (pc > 1 && isDBL(Prog_1[pc - 1]))
 363:src/xeq.c     **** 			pc--;
 364:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 365:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 366:src/xeq.c     **** 		if (pc > n - 1)
 367:src/xeq.c     **** 			pc = n - 1;
 368:src/xeq.c     **** 		if (pc > startLIB(pc) && isDBL(getprog(pc - 1)))
 369:src/xeq.c     **** 			--pc;
 370:src/xeq.c     **** 	}
 371:src/xeq.c     **** 	raw_set_pc(pc);
ARM GAS  /tmp/ccjeMhND.s 			page 8


 372:src/xeq.c     **** }
 373:src/xeq.c     **** 
 374:src/xeq.c     **** 
 375:src/xeq.c     **** 
 376:src/xeq.c     **** /* Locate the beginning and end of a section from a PC that points anywhere within
 377:src/xeq.c     ****  */
 378:src/xeq.c     **** static unsigned short int find_section_bounds(const unsigned int pc, const int endp, unsigned short
  30              		.loc 1 378 119 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 379:src/xeq.c     **** 	unsigned short int top, bottom;
  35              		.loc 1 379 2 view .LVU1
 380:src/xeq.c     **** 
 381:src/xeq.c     **** 	if (endp && State2.runmode) { 
  36              		.loc 1 381 2 view .LVU2
  37              		.loc 1 381 5 is_stmt 0 view .LVU3
  38 0000 71B1     		cbz	r1, .L2
  39              		.loc 1 381 11 discriminator 1 view .LVU4
  40 0002 194B     		ldr	r3, .L14
  41 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
  42 0006 5B06     		lsls	r3, r3, #25
  43 0008 0AD5     		bpl	.L2
 382:src/xeq.c     **** 		// Use the current program as bounds
 383:src/xeq.c     **** 		top = ProgBegin;
  44              		.loc 1 383 3 is_stmt 1 view .LVU5
  45              		.loc 1 383 9 is_stmt 0 view .LVU6
  46 000a 184B     		ldr	r3, .L14+4
  47 000c 1968     		ldr	r1, [r3]
  48              	.LVL1:
 384:src/xeq.c     **** 		bottom = ProgEnd;
  49              		.loc 1 384 3 is_stmt 1 view .LVU7
  50 000e B1F8EC37 		ldrh	r3, [r1, #2028]
  51              		.loc 1 384 10 is_stmt 0 view .LVU8
  52 0012 B1F8EE07 		ldrh	r0, [r1, #2030]
  53              	.LVL2:
 385:src/xeq.c     **** 		if (top == 0)
  54              		.loc 1 385 3 is_stmt 1 view .LVU9
  55 0016 012B     		cmp	r3, #1
  56 0018 38BF     		it	cc
  57 001a 0123     		movcc	r3, #1
  58              	.LVL3:
 386:src/xeq.c     **** 			top = 1;
 387:src/xeq.c     **** 	}
 388:src/xeq.c     **** 	else if (isXROM(pc)) {
 389:src/xeq.c     **** 		top = addrXROM(1);
 390:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 391:src/xeq.c     **** 	} 
 392:src/xeq.c     **** 	else if (isLIB(pc)) {
 393:src/xeq.c     **** 		top = startLIB(pc);
 394:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
 395:src/xeq.c     **** 	}
 396:src/xeq.c     **** 	else {
 397:src/xeq.c     **** 		top = State2.runmode;  // step 001 if not entering a program
 398:src/xeq.c     **** 		bottom = ProgSize;
 399:src/xeq.c     **** 	}
ARM GAS  /tmp/ccjeMhND.s 			page 9


 400:src/xeq.c     **** 	*p_top = top;
  59              		.loc 1 400 2 view .LVU10
  60              		.loc 1 400 9 is_stmt 0 view .LVU11
  61 001c 1380     		strh	r3, [r2]	@ movhi
 401:src/xeq.c     **** 	return bottom;
  62              		.loc 1 401 2 is_stmt 1 view .LVU12
 402:src/xeq.c     **** }
  63              		.loc 1 402 1 is_stmt 0 view .LVU13
  64 001e 7047     		bx	lr
  65              	.LVL4:
  66              	.L2:
 388:src/xeq.c     **** 		top = addrXROM(1);
  67              		.loc 1 388 7 is_stmt 1 view .LVU14
 388:src/xeq.c     **** 		top = addrXROM(1);
  68              		.loc 1 388 11 is_stmt 0 view .LVU15
  69 0020 830B     		lsrs	r3, r0, #14
 388:src/xeq.c     **** 		top = addrXROM(1);
  70              		.loc 1 388 10 view .LVU16
  71 0022 032B     		cmp	r3, #3
  72 0024 0FD0     		beq	.L13
 392:src/xeq.c     **** 		top = startLIB(pc);
  73              		.loc 1 392 7 is_stmt 1 view .LVU17
 392:src/xeq.c     **** 		top = startLIB(pc);
  74              		.loc 1 392 10 is_stmt 0 view .LVU18
  75 0026 10F4404F 		tst	r0, #49152
  76 002a 14D0     		beq	.L5
 393:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  77              		.loc 1 393 3 is_stmt 1 view .LVU19
  78              	.LBB1252:
  79              	.LBB1253:
 314:src/xeq.c     **** }
  80              		.loc 1 314 24 is_stmt 0 view .LVU20
  81 002c 1049     		ldr	r1, .L14+8
  82              	.LVL5:
 314:src/xeq.c     **** }
  83              		.loc 1 314 32 view .LVU21
  84 002e 51F82330 		ldr	r3, [r1, r3, lsl #2]
  85              	.LBE1253:
  86              	.LBE1252:
 394:src/xeq.c     **** 	}
  87              		.loc 1 394 10 view .LVU22
  88 0032 33F8021C 		ldrh	r1, [r3, #-2]
 393:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  89              		.loc 1 393 9 view .LVU23
  90 0036 00F44043 		and	r3, r0, #49152
 394:src/xeq.c     **** 	}
  91              		.loc 1 394 10 view .LVU24
  92 003a 5818     		adds	r0, r3, r1
  93              	.LVL6:
 393:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  94              		.loc 1 393 7 view .LVU25
  95 003c 0133     		adds	r3, r3, #1
  96 003e 9BB2     		uxth	r3, r3
  97              	.LVL7:
 394:src/xeq.c     **** 	}
  98              		.loc 1 394 3 is_stmt 1 view .LVU26
  99              	.LBB1255:
ARM GAS  /tmp/ccjeMhND.s 			page 10


 100              	.LBI1252:
 310:src/xeq.c     **** 	if (region == REGION_XROM)
 101              		.loc 1 310 5 view .LVU27
 102              	.LBB1254:
 311:src/xeq.c     **** 		return xrom_size;
 103              		.loc 1 311 2 view .LVU28
 314:src/xeq.c     **** }
 104              		.loc 1 314 3 view .LVU29
 314:src/xeq.c     **** }
 105              		.loc 1 314 3 is_stmt 0 view .LVU30
 106              	.LBE1254:
 107              	.LBE1255:
 394:src/xeq.c     **** 	}
 108              		.loc 1 394 10 view .LVU31
 109 0040 80B2     		uxth	r0, r0
 110              	.LVL8:
 400:src/xeq.c     **** 	return bottom;
 111              		.loc 1 400 2 is_stmt 1 view .LVU32
 400:src/xeq.c     **** 	return bottom;
 112              		.loc 1 400 9 is_stmt 0 view .LVU33
 113 0042 1380     		strh	r3, [r2]	@ movhi
 401:src/xeq.c     **** }
 114              		.loc 1 401 2 is_stmt 1 view .LVU34
 115              		.loc 1 402 1 is_stmt 0 view .LVU35
 116 0044 7047     		bx	lr
 117              	.LVL9:
 118              	.L13:
 389:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 119              		.loc 1 389 3 is_stmt 1 view .LVU36
 390:src/xeq.c     **** 	} 
 120              		.loc 1 390 3 view .LVU37
 390:src/xeq.c     **** 	} 
 121              		.loc 1 390 10 is_stmt 0 view .LVU38
 122 0046 0B4B     		ldr	r3, .L14+12
 123 0048 1888     		ldrh	r0, [r3]
 124              	.LVL10:
 389:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 125              		.loc 1 389 7 view .LVU39
 126 004a 4CF20103 		movw	r3, #49153
 390:src/xeq.c     **** 	} 
 127              		.loc 1 390 10 view .LVU40
 128 004e 40F44040 		orr	r0, r0, #49152
 129              	.LVL11:
 400:src/xeq.c     **** 	return bottom;
 130              		.loc 1 400 2 is_stmt 1 view .LVU41
 400:src/xeq.c     **** 	return bottom;
 131              		.loc 1 400 9 is_stmt 0 view .LVU42
 132 0052 1380     		strh	r3, [r2]	@ movhi
 401:src/xeq.c     **** }
 133              		.loc 1 401 2 is_stmt 1 view .LVU43
 134              		.loc 1 402 1 is_stmt 0 view .LVU44
 135 0054 7047     		bx	lr
 136              	.LVL12:
 137              	.L5:
 397:src/xeq.c     **** 		bottom = ProgSize;
 138              		.loc 1 397 3 is_stmt 1 view .LVU45
 397:src/xeq.c     **** 		bottom = ProgSize;
ARM GAS  /tmp/ccjeMhND.s 			page 11


 139              		.loc 1 397 15 is_stmt 0 view .LVU46
 140 0056 044B     		ldr	r3, .L14
 398:src/xeq.c     **** 	}
 141              		.loc 1 398 10 view .LVU47
 142 0058 0449     		ldr	r1, .L14+4
 143              	.LVL13:
 397:src/xeq.c     **** 		bottom = ProgSize;
 144              		.loc 1 397 15 view .LVU48
 145 005a 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 398:src/xeq.c     **** 	}
 146              		.loc 1 398 10 view .LVU49
 147 005c 0968     		ldr	r1, [r1]
 397:src/xeq.c     **** 		bottom = ProgSize;
 148              		.loc 1 397 7 view .LVU50
 149 005e C3F38013 		ubfx	r3, r3, #6, #1
 150              	.LVL14:
 398:src/xeq.c     **** 	}
 151              		.loc 1 398 3 is_stmt 1 view .LVU51
 398:src/xeq.c     **** 	}
 152              		.loc 1 398 10 is_stmt 0 view .LVU52
 153 0062 4888     		ldrh	r0, [r1, #2]
 154              	.LVL15:
 400:src/xeq.c     **** 	return bottom;
 155              		.loc 1 400 2 is_stmt 1 view .LVU53
 400:src/xeq.c     **** 	return bottom;
 156              		.loc 1 400 9 is_stmt 0 view .LVU54
 157 0064 1380     		strh	r3, [r2]	@ movhi
 401:src/xeq.c     **** }
 158              		.loc 1 401 2 is_stmt 1 view .LVU55
 159              		.loc 1 402 1 is_stmt 0 view .LVU56
 160 0066 7047     		bx	lr
 161              	.L15:
 162              		.align	2
 163              	.L14:
 164 0068 00000000 		.word	StateWhileOn
 165 006c 00000000 		.word	main_ram
 166 0070 00000000 		.word	.LANCHOR0
 167 0074 00000000 		.word	xrom_size
 168              		.cfi_endproc
 169              	.LFE19:
 171              		.section	.text.reg_address,"ax",%progbits
 172              		.align	1
 173              		.p2align 2,,3
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu fpv4-sp-d16
 179              	reg_address:
 180              	.LVL16:
 181              	.LFB86:
 403:src/xeq.c     **** 
 404:src/xeq.c     **** 
 405:src/xeq.c     **** /* Increment the passed PC.  Account for wrap around but nothing else.
 406:src/xeq.c     ****  * Return the updated PC.
 407:src/xeq.c     ****  * Set PcWrapped on wrap around
 408:src/xeq.c     ****  */
 409:src/xeq.c     **** unsigned int do_inc(const unsigned int pc, int endp) {
ARM GAS  /tmp/ccjeMhND.s 			page 12


 410:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 411:src/xeq.c     **** 	unsigned short int top = 0;
 412:src/xeq.c     **** 	unsigned short int bottom = 0;
 413:src/xeq.c     **** 
 414:src/xeq.c     **** 	PcWrapped = 0;
 415:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 416:src/xeq.c     **** 
 417:src/xeq.c     **** 	if (npc > bottom) {
 418:src/xeq.c     **** 		PcWrapped = 1;
 419:src/xeq.c     **** 		return top;
 420:src/xeq.c     **** 	}
 421:src/xeq.c     **** 	return npc;
 422:src/xeq.c     **** }
 423:src/xeq.c     **** 
 424:src/xeq.c     **** /* Decrement the passed PC.  Account for wrap around but nothing else.
 425:src/xeq.c     ****  * Return the updated PC.
 426:src/xeq.c     ****  * Set PcWrapped on wrap around
 427:src/xeq.c     ****  */
 428:src/xeq.c     **** unsigned int do_dec(unsigned int pc, int endp) {
 429:src/xeq.c     **** 	unsigned short int top = 0;
 430:src/xeq.c     **** 	unsigned short int bottom = 0;
 431:src/xeq.c     **** 
 432:src/xeq.c     **** 	PcWrapped = 0;
 433:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 434:src/xeq.c     **** 
 435:src/xeq.c     **** 	if (pc <= top) {
 436:src/xeq.c     **** 		PcWrapped = 1;
 437:src/xeq.c     **** 		pc = bottom;
 438:src/xeq.c     **** 	}
 439:src/xeq.c     **** 	else
 440:src/xeq.c     **** 		--pc;
 441:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 442:src/xeq.c     **** 		--pc;
 443:src/xeq.c     **** 	return pc;
 444:src/xeq.c     **** }
 445:src/xeq.c     **** 
 446:src/xeq.c     **** /* Increment the PC keeping account of wrapping around and stopping
 447:src/xeq.c     ****  * programs on such.  Return non-zero if we wrapped.
 448:src/xeq.c     ****  */
 449:src/xeq.c     **** int incpc(void) {
 450:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 451:src/xeq.c     **** 	return PcWrapped;
 452:src/xeq.c     **** }
 453:src/xeq.c     **** 
 454:src/xeq.c     **** void decpc(void) {
 455:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 456:src/xeq.c     **** }
 457:src/xeq.c     **** 
 458:src/xeq.c     **** /*
 459:src/xeq.c     ****  * Update the pointers to the current program delimited by END statements
 460:src/xeq.c     ****  */
 461:src/xeq.c     **** void update_program_bounds(const int force) {
 462:src/xeq.c     **** 	unsigned int pc = state_pc();
 463:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 464:src/xeq.c     **** 		State.pc = pc = 1;
 465:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 466:src/xeq.c     **** 		return;
ARM GAS  /tmp/ccjeMhND.s 			page 13


 467:src/xeq.c     **** 	for (PcWrapped = 0; !PcWrapped; pc = do_inc(pc, 0)) {
 468:src/xeq.c     **** 		ProgEnd = pc;
 469:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 470:src/xeq.c     **** 			break;
 471:src/xeq.c     **** 		}
 472:src/xeq.c     **** 	}
 473:src/xeq.c     **** 	for (pc = state_pc();;) {
 474:src/xeq.c     **** 		const unsigned int opc = pc;
 475:src/xeq.c     **** 		pc = do_dec(opc, 0);
 476:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 477:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 478:src/xeq.c     **** 			break;
 479:src/xeq.c     **** 		}
 480:src/xeq.c     **** 	}
 481:src/xeq.c     **** }
 482:src/xeq.c     **** 
 483:src/xeq.c     **** /* Determine where in program space the PC really is
 484:src/xeq.c     ****  */
 485:src/xeq.c     **** unsigned int user_pc(unsigned int pc) {
 486:src/xeq.c     **** 	unsigned int n = 1;
 487:src/xeq.c     **** 	unsigned int base;
 488:src/xeq.c     **** 
 489:src/xeq.c     **** #ifndef REALBUILD
 490:src/xeq.c     **** 	if (pc == 0 || isXROM(pc))
 491:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 492:src/xeq.c     **** #else
 493:src/xeq.c     **** 	if (pc == 0)
 494:src/xeq.c     **** 		return 0;
 495:src/xeq.c     **** #endif
 496:src/xeq.c     **** 	base = startLIB(pc);
 497:src/xeq.c     **** 	while (base < pc) {
 498:src/xeq.c     **** 		base = do_inc(base, 0);
 499:src/xeq.c     **** 		if (PcWrapped)
 500:src/xeq.c     **** 			return n;
 501:src/xeq.c     **** 		++n;
 502:src/xeq.c     **** 	}
 503:src/xeq.c     **** 	return n;
 504:src/xeq.c     **** }
 505:src/xeq.c     **** 
 506:src/xeq.c     **** /* Given a target user PC, figure out the real matching PC
 507:src/xeq.c     ****  */
 508:src/xeq.c     **** unsigned int find_user_pc(unsigned int target) {
 509:src/xeq.c     **** 	unsigned int upc = state_pc();
 510:src/xeq.c     **** 	const int libp = isLIB(upc);
 511:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 512:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 513:src/xeq.c     **** #ifndef REALBUILD
 514:src/xeq.c     **** 	if (isXROM(upc))
 515:src/xeq.c     **** 		return addrXROM(target);
 516:src/xeq.c     **** #endif
 517:src/xeq.c     **** 	while (n++ < target) {
 518:src/xeq.c     **** 		const unsigned int oldbase = base;
 519:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 520:src/xeq.c     **** 		if (PcWrapped)
 521:src/xeq.c     **** 			return oldbase;
 522:src/xeq.c     **** 	}
 523:src/xeq.c     **** 	return base;
ARM GAS  /tmp/ccjeMhND.s 			page 14


 524:src/xeq.c     **** }
 525:src/xeq.c     **** 
 526:src/xeq.c     **** 
 527:src/xeq.c     **** /* Set a flag to indicate that a complex operation has taken place
 528:src/xeq.c     ****  * The flag disappears with the next command executed.
 529:src/xeq.c     ****  */
 530:src/xeq.c     **** static void set_was_complex(void) {
 531:src/xeq.c     **** 	State2.wascomplex = 1;
 532:src/xeq.c     **** }
 533:src/xeq.c     **** 
 534:src/xeq.c     **** 
 535:src/xeq.c     **** /* Produce an error and stop
 536:src/xeq.c     ****  */
 537:src/xeq.c     **** int report_err(const unsigned int e) {
 538:src/xeq.c     **** 	if (Error == ERR_NONE) {
 539:src/xeq.c     **** 		Error = e;
 540:src/xeq.c     **** 		if (e == ERR_NONE) {
 541:src/xeq.c     **** 			error_message(e); // "Running Program"
 542:src/xeq.c     **** 			return 0;
 543:src/xeq.c     **** 		}
 544:src/xeq.c     **** 	}
 545:src/xeq.c     **** 	return 1;
 546:src/xeq.c     **** }
 547:src/xeq.c     **** 
 548:src/xeq.c     **** 
 549:src/xeq.c     **** /* Display a warning
 550:src/xeq.c     ****  */
 551:src/xeq.c     **** int report_warn(const unsigned int e) {
 552:src/xeq.c     **** 	if (Running) {
 553:src/xeq.c     **** 		return report_err(e);
 554:src/xeq.c     **** 	}
 555:src/xeq.c     **** 	error_message(e);
 556:src/xeq.c     **** #ifndef CONSOLE
 557:src/xeq.c     **** 	State2.disp_freeze = 0;
 558:src/xeq.c     **** 	JustDisplayed = 1;
 559:src/xeq.c     **** 	ShowRPN = 1;
 560:src/xeq.c     **** #endif
 561:src/xeq.c     **** 	return e != ERR_NONE;
 562:src/xeq.c     **** }
 563:src/xeq.c     **** 
 564:src/xeq.c     **** 
 565:src/xeq.c     **** /* Doing something in the wrong mode */
 566:src/xeq.c     **** void bad_mode_error(void) {
 567:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 568:src/xeq.c     **** }
 569:src/xeq.c     **** 
 570:src/xeq.c     **** 
 571:src/xeq.c     **** /* User command to produce an error */
 572:src/xeq.c     **** void cmderr(unsigned int arg, enum rarg op) {
 573:src/xeq.c     **** 	report_err(arg);
 574:src/xeq.c     **** }
 575:src/xeq.c     **** 
 576:src/xeq.c     **** 
 577:src/xeq.c     **** /* User command to display a warning */
 578:src/xeq.c     **** void cmdmsg(unsigned int arg, enum rarg op) {
 579:src/xeq.c     **** 	error_message(arg);
 580:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 15


 581:src/xeq.c     **** 
 582:src/xeq.c     **** 
 583:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE)
 584:src/xeq.c     **** #include <stdlib.h>
 585:src/xeq.c     **** static void error(const char *fmt, ...) {
 586:src/xeq.c     **** 	va_list ap;
 587:src/xeq.c     **** 	va_start(ap, fmt);
 588:src/xeq.c     **** 	vprintf(fmt, ap);
 589:src/xeq.c     **** 	va_end(ap);
 590:src/xeq.c     **** 	putchar('\n');
 591:src/xeq.c     **** 	exit(1);
 592:src/xeq.c     **** }
 593:src/xeq.c     **** 
 594:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); printf("illegal opcode 0x%08x\n", op); } while (
 595:src/xeq.c     **** #else
 596:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); } while (0)
 597:src/xeq.c     **** #endif
 598:src/xeq.c     **** 
 599:src/xeq.c     **** /* Real rounding mode access routine
 600:src/xeq.c     ****  */
 601:src/xeq.c     **** static enum rounding get_rounding_mode() {
 602:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 603:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 604:src/xeq.c     **** 		DEC_ROUND_UP, DEC_ROUND_DOWN,
 605:src/xeq.c     **** 		DEC_ROUND_CEILING, DEC_ROUND_FLOOR
 606:src/xeq.c     **** 	};
 607:src/xeq.c     **** 	return (enum rounding) modes[UState.rounding_mode];
 608:src/xeq.c     **** }
 609:src/xeq.c     **** 
 610:src/xeq.c     **** void op_roundingmode(enum nilop op) {
 611:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 612:src/xeq.c     **** }
 613:src/xeq.c     **** 
 614:src/xeq.c     **** void rarg_roundingmode(unsigned int arg, enum rarg op) {
 615:src/xeq.c     **** 	UState.rounding_mode = arg;
 616:src/xeq.c     **** }
 617:src/xeq.c     **** 
 618:src/xeq.c     **** 
 619:src/xeq.c     **** /* Pack a number into our DPD register format
 620:src/xeq.c     ****  */
 621:src/xeq.c     **** 
 622:src/xeq.c     **** void packed_from_number(decimal64 *r, const decNumber *x) {
 623:src/xeq.c     **** 	decContext ctx64;
 624:src/xeq.c     **** 
 625:src/xeq.c     **** 	decContextDefault(&ctx64, DEC_INIT_DECIMAL64);
 626:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 627:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 628:src/xeq.c     **** }
 629:src/xeq.c     **** 
 630:src/xeq.c     **** void packed128_from_number(decimal128 *r, const decNumber *x) {
 631:src/xeq.c     **** 	decContext ctx128;
 632:src/xeq.c     **** 
 633:src/xeq.c     **** 	decContextDefault(&ctx128, DEC_INIT_DECIMAL128);
 634:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 635:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 636:src/xeq.c     **** }
 637:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 16


 638:src/xeq.c     **** // Repack a decimal128 to decimal64
 639:src/xeq.c     **** void packed_from_packed128(decimal64 *r, const decimal128 *s) {
 640:src/xeq.c     **** 	decNumber temp;
 641:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 642:src/xeq.c     **** }
 643:src/xeq.c     **** 
 644:src/xeq.c     **** // Repack a decimal64 to decimal128
 645:src/xeq.c     **** void packed128_from_packed(decimal128 *r, const decimal64 *s) {
 646:src/xeq.c     **** 	decNumber temp;
 647:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 648:src/xeq.c     **** }
 649:src/xeq.c     **** 
 650:src/xeq.c     **** /*
 651:src/xeq.c     ****  *  User command to round to a specific number of digits
 652:src/xeq.c     ****  */
 653:src/xeq.c     **** void rarg_round(unsigned int arg, enum rarg op) {
 654:src/xeq.c     **** 	decNumber res, x;
 655:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 656:src/xeq.c     **** 
 657:src/xeq.c     **** 	if (is_intmode()) {
 658:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 659:src/xeq.c     **** 		return;
 660:src/xeq.c     **** 	}
 661:src/xeq.c     **** 
 662:src/xeq.c     **** 	setlastX();
 663:src/xeq.c     **** 	getX(&x);
 664:src/xeq.c     **** 	if (op == RARG_ROUND)
 665:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 666:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 667:src/xeq.c     **** 		decNumberRoundDecimals(&res, &x, arg, rm);
 668:src/xeq.c     **** 	setX(&res);
 669:src/xeq.c     **** }
 670:src/xeq.c     **** 
 671:src/xeq.c     **** /* Check if a value is bogus and error out if so.
 672:src/xeq.c     ****  * A value is bogus if it is infinite, NaN *and* flag D is not set.
 673:src/xeq.c     ****  * If flag D is set, these values are allowed through just fine.
 674:src/xeq.c     ****  */
 675:src/xeq.c     **** static int check_special(const decNumber *x) {
 676:src/xeq.c     **** 	decNumber y;
 677:src/xeq.c     **** 	decimal64 z;
 678:src/xeq.c     **** 	decimal128 d;
 679:src/xeq.c     **** 	if (is_dblmode()) {
 680:src/xeq.c     **** 		packed128_from_number(&d, x);
 681:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 682:src/xeq.c     **** 	}
 683:src/xeq.c     **** 	else 
 684:src/xeq.c     **** 	{
 685:src/xeq.c     **** 		packed_from_number(&z, x);
 686:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 687:src/xeq.c     **** 	}
 688:src/xeq.c     **** 	if (decNumberIsSpecial(&y)) {
 689:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 690:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 691:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 692:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 693:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 694:src/xeq.c     **** 			else
ARM GAS  /tmp/ccjeMhND.s 			page 17


 695:src/xeq.c     **** 				report_err(ERR_INFINITY);
 696:src/xeq.c     **** 			return 1;
 697:src/xeq.c     **** 		}
 698:src/xeq.c     **** 	}
 699:src/xeq.c     **** 	return 0;
 700:src/xeq.c     **** }
 701:src/xeq.c     **** 
 702:src/xeq.c     **** 
 703:src/xeq.c     **** int stack_size(void) {
 704:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 705:src/xeq.c     **** 		return 4;
 706:src/xeq.c     **** 	return 8;
 707:src/xeq.c     **** }
 708:src/xeq.c     **** 
 709:src/xeq.c     **** REGISTER *get_stack(int pos) {
 710:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 711:src/xeq.c     **** }
 712:src/xeq.c     **** 
 713:src/xeq.c     **** static REGISTER *get_stack_top(void) {
 714:src/xeq.c     **** 	return get_stack(stack_size()-1);
 715:src/xeq.c     **** }
 716:src/xeq.c     **** 
 717:src/xeq.c     **** void copyreg(REGISTER *d, const REGISTER *s) {
 718:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 719:src/xeq.c     **** }
 720:src/xeq.c     **** 
 721:src/xeq.c     **** void copyreg_n(int d, int s) {
 722:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 723:src/xeq.c     **** }
 724:src/xeq.c     **** 
 725:src/xeq.c     **** /* Lift the stack one level.
 726:src/xeq.c     ****  */
 727:src/xeq.c     **** void lift(void) {
 728:src/xeq.c     **** 	const int n = stack_size();
 729:src/xeq.c     **** 	int i;
 730:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 731:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 732:src/xeq.c     **** }
 733:src/xeq.c     **** 
 734:src/xeq.c     **** static int get_lift(void) {
 735:src/xeq.c     **** 	return State2.state_lift;
 736:src/xeq.c     **** }
 737:src/xeq.c     **** 
 738:src/xeq.c     **** void lift_if_enabled(void) {
 739:src/xeq.c     **** 	if (get_lift())
 740:src/xeq.c     **** 		lift();
 741:src/xeq.c     **** }
 742:src/xeq.c     **** 
 743:src/xeq.c     **** static void lift2_if_enabled(void) {
 744:src/xeq.c     **** 	lift_if_enabled();
 745:src/xeq.c     **** 	lift();
 746:src/xeq.c     **** }
 747:src/xeq.c     **** 
 748:src/xeq.c     **** void set_lift(void) {
 749:src/xeq.c     ****     State2.state_lift = 1;
 750:src/xeq.c     **** }
 751:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 18


 752:src/xeq.c     **** static void clr_lift(void) {
 753:src/xeq.c     ****     State2.state_lift = 0;
 754:src/xeq.c     **** }
 755:src/xeq.c     **** 
 756:src/xeq.c     **** static void lower(void) {
 757:src/xeq.c     **** 	const int n = stack_size();
 758:src/xeq.c     **** 	int i;
 759:src/xeq.c     **** 
 760:src/xeq.c     **** 	for (i=1; i<n; i++)
 761:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 762:src/xeq.c     **** }
 763:src/xeq.c     **** 
 764:src/xeq.c     **** static void lower2(void) {
 765:src/xeq.c     **** 	const int n = stack_size();
 766:src/xeq.c     **** 	int i;
 767:src/xeq.c     **** 
 768:src/xeq.c     **** 	for (i=2; i<n; i++)
 769:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 770:src/xeq.c     **** }
 771:src/xeq.c     **** 
 772:src/xeq.c     **** 
 773:src/xeq.c     **** void setlastX(void) {
 774:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 775:src/xeq.c     **** }
 776:src/xeq.c     **** 
 777:src/xeq.c     **** static void setlastXY(void) {
 778:src/xeq.c     **** 	setlastX();
 779:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 780:src/xeq.c     **** }
 781:src/xeq.c     **** 
 782:src/xeq.c     **** 
 783:src/xeq.c     **** decNumber *getRegister(decNumber *r, int index) {
 784:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 785:src/xeq.c     **** 	if (is_dblmode())
 786:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 787:src/xeq.c     **** 	else
 788:src/xeq.c     **** 		decimal64ToNumber(&(reg->s), r);
 789:src/xeq.c     **** 	return r;
 790:src/xeq.c     **** }
 791:src/xeq.c     **** 
 792:src/xeq.c     **** void setRegister(int index, const decNumber *x) {
 793:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 794:src/xeq.c     **** 	decNumber dn;
 795:src/xeq.c     **** 
 796:src/xeq.c     **** 	if (! check_special(x)) {	/* This correctly deals with infinities and NaN based on flag D */
 797:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 798:src/xeq.c     **** 		if (is_dblmode())
 799:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 800:src/xeq.c     **** 		else
 801:src/xeq.c     **** 			packed_from_number(&(reg->s), &dn);
 802:src/xeq.c     **** 	}
 803:src/xeq.c     **** }
 804:src/xeq.c     **** 
 805:src/xeq.c     **** decNumber *getX(decNumber *x) {
 806:src/xeq.c     **** 	return getRegister(x, regX_idx);
 807:src/xeq.c     **** }
 808:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 19


 809:src/xeq.c     **** void setX(const decNumber *x) {
 810:src/xeq.c     **** 	setRegister(regX_idx, x);
 811:src/xeq.c     **** }
 812:src/xeq.c     **** 
 813:src/xeq.c     **** void getY(decNumber *y) {
 814:src/xeq.c     **** 	getRegister(y, regY_idx);
 815:src/xeq.c     **** }
 816:src/xeq.c     **** 
 817:src/xeq.c     **** void setY(const decNumber *y) {
 818:src/xeq.c     **** 	setRegister(regY_idx, y);
 819:src/xeq.c     **** }
 820:src/xeq.c     **** 
 821:src/xeq.c     **** static void getZ(decNumber *z) {
 822:src/xeq.c     **** 	getRegister(z, regZ_idx);
 823:src/xeq.c     **** }
 824:src/xeq.c     **** 
 825:src/xeq.c     **** #if 0
 826:src/xeq.c     **** static void setZ(const decNumber *z) {
 827:src/xeq.c     **** 	setRegister(regZ_idx, z);
 828:src/xeq.c     **** }
 829:src/xeq.c     **** #endif
 830:src/xeq.c     **** 
 831:src/xeq.c     **** static void getT(decNumber *t) {
 832:src/xeq.c     **** 	getRegister(t, regT_idx);
 833:src/xeq.c     **** }
 834:src/xeq.c     **** 
 835:src/xeq.c     **** void getXY(decNumber *x, decNumber *y) {
 836:src/xeq.c     **** 	getX(x);
 837:src/xeq.c     **** 	getY(y);
 838:src/xeq.c     **** }
 839:src/xeq.c     **** 
 840:src/xeq.c     **** void setXY(const decNumber *x, const decNumber *y) {
 841:src/xeq.c     **** 	setX(x);
 842:src/xeq.c     **** 	setY(y);
 843:src/xeq.c     **** }
 844:src/xeq.c     **** 
 845:src/xeq.c     **** void getXYZ(decNumber *x, decNumber *y, decNumber *z) {
 846:src/xeq.c     **** 	getXY(x, y);
 847:src/xeq.c     **** 	getZ(z);
 848:src/xeq.c     **** }
 849:src/xeq.c     **** 
 850:src/xeq.c     **** #if 0
 851:src/xeq.c     **** void setXYZ(const decNumber *x, const decNumber *y, const decNumber *z) {
 852:src/xeq.c     **** 	setXY(x, y);
 853:src/xeq.c     **** 	setZ(z);
 854:src/xeq.c     **** }
 855:src/xeq.c     **** #endif
 856:src/xeq.c     **** 
 857:src/xeq.c     **** void getXYZT(decNumber *x, decNumber *y, decNumber *z, decNumber *t) {
 858:src/xeq.c     **** 	getXYZ(x, y, z);
 859:src/xeq.c     **** 	getT(t);
 860:src/xeq.c     **** }
 861:src/xeq.c     **** 
 862:src/xeq.c     **** void getYZ(decNumber *y, decNumber *z) {
 863:src/xeq.c     **** 	getY(y);
 864:src/xeq.c     **** 	getZ(z);
 865:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 20


 866:src/xeq.c     **** 
 867:src/xeq.c     **** void roll_down(enum nilop op) {
 868:src/xeq.c     **** 	REGISTER r;
 869:src/xeq.c     **** 	copyreg(&r, StackBase);
 870:src/xeq.c     **** 	lower();
 871:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 872:src/xeq.c     **** }
 873:src/xeq.c     **** 
 874:src/xeq.c     **** void roll_up(enum nilop op) {
 875:src/xeq.c     **** 	REGISTER r;
 876:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 877:src/xeq.c     **** 	lift();
 878:src/xeq.c     **** 	copyreg(StackBase, &r);
 879:src/xeq.c     **** }
 880:src/xeq.c     **** 
 881:src/xeq.c     **** void cpx_roll_down(enum nilop op) {
 882:src/xeq.c     **** 	roll_down(OP_RDOWN);
 883:src/xeq.c     **** 	roll_down(OP_RDOWN);
 884:src/xeq.c     **** 	set_was_complex();
 885:src/xeq.c     **** }
 886:src/xeq.c     **** 
 887:src/xeq.c     **** void cpx_roll_up(enum nilop op) {
 888:src/xeq.c     **** 	roll_up(OP_RUP);
 889:src/xeq.c     **** 	roll_up(OP_RUP);
 890:src/xeq.c     **** 	set_was_complex();
 891:src/xeq.c     **** }
 892:src/xeq.c     **** 
 893:src/xeq.c     **** void cpx_enter(enum nilop op) {
 894:src/xeq.c     **** 	lift();
 895:src/xeq.c     **** 	lift();
 896:src/xeq.c     **** 	copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 897:src/xeq.c     **** 	set_was_complex();
 898:src/xeq.c     **** }
 899:src/xeq.c     **** 
 900:src/xeq.c     **** void cpx_fill(enum nilop op) {
 901:src/xeq.c     **** 	const int n = stack_size();
 902:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
 903:src/xeq.c     **** 	int i;
 904:src/xeq.c     **** 
 905:src/xeq.c     **** 	for (i=2; i<n; i++)
 906:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 907:src/xeq.c     **** 	set_was_complex();
 908:src/xeq.c     **** }
 909:src/xeq.c     **** 
 910:src/xeq.c     **** void fill(enum nilop op) {
 911:src/xeq.c     **** 	const int n = stack_size();
 912:src/xeq.c     **** 	int i;
 913:src/xeq.c     **** 
 914:src/xeq.c     **** 	for (i=1; i<n; i++)
 915:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 916:src/xeq.c     **** }
 917:src/xeq.c     **** 
 918:src/xeq.c     **** void drop(enum nilop op) {
 919:src/xeq.c     **** 	if (op == OP_DROPXY) {
 920:src/xeq.c     **** 		lower2();
 921:src/xeq.c     **** 		set_was_complex();
 922:src/xeq.c     **** 	} else
ARM GAS  /tmp/ccjeMhND.s 			page 21


 923:src/xeq.c     **** 		lower();
 924:src/xeq.c     **** }
 925:src/xeq.c     **** 
 926:src/xeq.c     **** #ifndef is_intmode
 927:src/xeq.c     **** int is_intmode(void) {
 928:src/xeq.c     **** 	return UState.intm;
 929:src/xeq.c     **** }
 930:src/xeq.c     **** #endif
 931:src/xeq.c     **** 
 932:src/xeq.c     **** int is_dblmode(void) {
 933:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 934:src/xeq.c     **** }
 935:src/xeq.c     **** 
 936:src/xeq.c     **** int is_usrdblmode(void) {
 937:src/xeq.c     **** 	if (XromFlags.xIN)
 938:src/xeq.c     **** 		return XromFlags.mode_double;
 939:src/xeq.c     **** 	return is_dblmode();
 940:src/xeq.c     **** }
 941:src/xeq.c     **** 
 942:src/xeq.c     **** /* Convert a possibly signed string to an integer
 943:src/xeq.c     ****  */
 944:src/xeq.c     **** int s_to_i(const char *s) {
 945:src/xeq.c     **** 	int x = 0;
 946:src/xeq.c     **** 	int neg;
 947:src/xeq.c     **** 
 948:src/xeq.c     **** 	if (*s == '-') {
 949:src/xeq.c     **** 		s++;
 950:src/xeq.c     **** 		neg = 1;
 951:src/xeq.c     **** 	} else {
 952:src/xeq.c     **** 		if (*s == '+')
 953:src/xeq.c     **** 			s++;
 954:src/xeq.c     **** 		neg = 0;
 955:src/xeq.c     **** 	}
 956:src/xeq.c     **** 
 957:src/xeq.c     **** 	for (;;) {
 958:src/xeq.c     **** 		const char c = *s++;
 959:src/xeq.c     **** 
 960:src/xeq.c     **** 		if (c < '0' || c > '9')
 961:src/xeq.c     **** 			break;
 962:src/xeq.c     **** 		x = 10 * x + (c - '0');
 963:src/xeq.c     **** 	}
 964:src/xeq.c     **** 	if (neg)
 965:src/xeq.c     **** 		return -x;
 966:src/xeq.c     **** 	return x;
 967:src/xeq.c     **** }
 968:src/xeq.c     **** 
 969:src/xeq.c     **** /* Convert a string in the given base to an unsigned integer
 970:src/xeq.c     ****  */
 971:src/xeq.c     **** unsigned long long int s_to_ull(const char *s, unsigned int base) {
 972:src/xeq.c     **** 	unsigned long long int x = 0;
 973:src/xeq.c     **** 
 974:src/xeq.c     **** 	for (;;) {
 975:src/xeq.c     **** 		unsigned int n;
 976:src/xeq.c     **** 		const char c = *s++;
 977:src/xeq.c     **** 
 978:src/xeq.c     **** 		if (c >= '0' && c <= '9')
 979:src/xeq.c     **** 			n = c - '0';
ARM GAS  /tmp/ccjeMhND.s 			page 22


 980:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 981:src/xeq.c     **** 			n = c - 'A' + 10;
 982:src/xeq.c     **** 		else
 983:src/xeq.c     **** 			break;
 984:src/xeq.c     **** 		if (n >= base)
 985:src/xeq.c     **** 			break;
 986:src/xeq.c     **** 		x = x * base + n;
 987:src/xeq.c     **** 	}
 988:src/xeq.c     **** 	return x;
 989:src/xeq.c     **** }
 990:src/xeq.c     **** 
 991:src/xeq.c     **** const char *get_cmdline(void) {
 992:src/xeq.c     **** 	if (CmdLineLength) {
 993:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 994:src/xeq.c     **** 		return Cmdline;
 995:src/xeq.c     **** 	}
 996:src/xeq.c     **** 	return NULL;
 997:src/xeq.c     **** }
 998:src/xeq.c     **** 
 999:src/xeq.c     **** #if 0
1000:src/xeq.c     **** static int fract_convert_number(decNumber *x, const char *s) {
1001:src/xeq.c     **** 	if (*s == '\0') {
1002:src/xeq.c     **** 		report_err(ERR_DOMAIN);
1003:src/xeq.c     **** 		return 1;
1004:src/xeq.c     **** 	}
1005:src/xeq.c     **** 	decNumberFromString(x, s, &Ctx);
1006:src/xeq.c     **** 	return check_special(x);
1007:src/xeq.c     **** }
1008:src/xeq.c     **** #endif
1009:src/xeq.c     **** 
1010:src/xeq.c     **** /* Return 1 if the command line contains an error and also set an appropriate
1011:src/xeq.c     ****  * error message.
1012:src/xeq.c     ****  */
1013:src/xeq.c     **** int is_bad_cmdline(void)
1014:src/xeq.c     **** {
1015:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
1016:src/xeq.c     **** 	if (CmdLineDot == 2) {
1017:src/xeq.c     **** 		char *p;
1018:src/xeq.c     **** 
1019:src/xeq.c     **** 		// Check if there's a non-zero digit after the last decimal mark
1020:src/xeq.c     **** 		p = Cmdline + CmdLineLength;
1021:src/xeq.c     **** 		for (;;) {
1022:src/xeq.c     **** 			p--;
1023:src/xeq.c     **** 			if (*p >= '1' && *p <= '9')
1024:src/xeq.c     **** 				return 0;
1025:src/xeq.c     **** 			if (*p == '.')
1026:src/xeq.c     **** 				break;
1027:src/xeq.c     **** 		}
1028:src/xeq.c     **** 
1029:src/xeq.c     **** 		reset_shift();
1030:src/xeq.c     **** 		error_message(ERR_DOMAIN);
1031:src/xeq.c     **** 		State2.invalid_disp = 1;
1032:src/xeq.c     **** 		return 1;
1033:src/xeq.c     **** 	}
1034:src/xeq.c     **** #endif
1035:src/xeq.c     **** 	return 0;
1036:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 23


1037:src/xeq.c     **** 
1038:src/xeq.c     **** /* Process the command line if any
1039:src/xeq.c     ****  */
1040:src/xeq.c     **** void process_cmdline(void) {
1041:src/xeq.c     **** 	decNumber a, b, x, t;
1042:src/xeq.c     **** 
1043:src/xeq.c     **** 	if (CmdLineLength) {
1044:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
1045:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
1046:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1047:src/xeq.c     **** 		char cmdline[CMDLINELEN + 2];
1048:src/xeq.c     **** #else
1049:src/xeq.c     **** 		char cmdline[CMDLINELEN + 1];
1050:src/xeq.c     **** #endif
1051:src/xeq.c     **** 
1052:src/xeq.c     **** 		xcopy(cmdline, Cmdline, CMDLINELEN + 1);
1053:src/xeq.c     **** 
1054:src/xeq.c     **** 		cmdline[CmdLineLength] = '\0';
1055:src/xeq.c     **** 		if (!is_intmode()) {
1056:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1057:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E' || cmdline[CmdLineLength-1] == 'D')
1058:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1059:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
1060:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
1061:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
1062:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
1063:src/xeq.c     **** 			}
1064:src/xeq.c     **** #else
1065:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E')
1066:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1067:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
1068:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
1069:src/xeq.c     **** #endif
1070:src/xeq.c     **** 			if (0
1071:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
1072:src/xeq.c     **** 			    || CmdLineEex
1073:src/xeq.c     **** #endif
1074:src/xeq.c     **** #if FRACTION_MODE_INPUT & 4
1075:src/xeq.c     **** 			    || cmdlinedot == 1
1076:src/xeq.c     **** #endif
1077:src/xeq.c     **** 			   )
1078:src/xeq.c     **** 				UState.fract = 0;
1079:src/xeq.c     **** 		}
1080:src/xeq.c     **** 		CmdLineLength = 0;
1081:src/xeq.c     **** 		lift_if_enabled();
1082:src/xeq.c     **** 		set_lift();
1083:src/xeq.c     **** 		CmdLineDot = 0;
1084:src/xeq.c     **** 		CmdLineEex = 0;
1085:src/xeq.c     **** 		if (is_intmode()) {
1086:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
1087:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
1088:src/xeq.c     **** 			setX_int_sgn(x, sgn);
1089:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
1090:src/xeq.c     **** 			char *d0, *d1, *d2;
1091:src/xeq.c     **** 			int neg;
1092:src/xeq.c     **** 
1093:src/xeq.c     **** 			if (bad_cmdline)
ARM GAS  /tmp/ccjeMhND.s 			page 24


1094:src/xeq.c     **** 				return;
1095:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 8)
1096:src/xeq.c     **** 			UState.fract = 1;
1097:src/xeq.c     **** #endif
1098:src/xeq.c     **** 			if (cmdline[0] == '-') {
1099:src/xeq.c     **** 				neg = 1;
1100:src/xeq.c     **** 				d0 = cmdline+1;
1101:src/xeq.c     **** 			} else {
1102:src/xeq.c     **** 				neg = 0;
1103:src/xeq.c     **** 				d0 = cmdline;
1104:src/xeq.c     **** 			}
1105:src/xeq.c     **** 			d1 = find_char(d0, '.');
1106:src/xeq.c     **** 			*d1++ = '\0';
1107:src/xeq.c     **** 			d2 = find_char(d1, '.');
1108:src/xeq.c     **** 			*d2++ = '\0';
1109:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
1110:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
1111:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1112:src/xeq.c     **** 			if (d2 == d1+1) { // ND change starts here; if dots are adjacent...
1113:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
1114:src/xeq.c     **** 				decNumberZero(&x); // and zero x
1115:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
1116:src/xeq.c     **** 				UState.improperfrac = 1;
1117:src/xeq.c     **** #endif
1118:src/xeq.c     **** 			}
1119:src/xeq.c     **** 			else
1120:src/xeq.c     **** #endif
1121:src/xeq.c     **** 			{
1122:src/xeq.c     **** 				decNumberFromString(&a, d1, &Ctx);
1123:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1124:src/xeq.c     **** 				UState.improperfrac = 0;
1125:src/xeq.c     **** #endif
1126:src/xeq.c     **** 			}
1127:src/xeq.c     **** 			dn_divide(&t, &a, &b);
1128:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
1129:src/xeq.c     **** 			if (!decNumberIsSpecial(&t))
1130:src/xeq.c     **** #endif
1131:src/xeq.c     **** 				dn_add(&x, &x, &t);
1132:src/xeq.c     **** 			if (neg)
1133:src/xeq.c     **** 				dn_minus(&x, &x);
1134:src/xeq.c     **** 			setX(&x);
1135:src/xeq.c     **** 		} else {
1136:src/xeq.c     **** 			decNumberFromString(&x, cmdline, &Ctx);
1137:src/xeq.c     **** 			setX(&x);
1138:src/xeq.c     **** 		}
1139:src/xeq.c     **** 		set_entry();
1140:src/xeq.c     **** #ifndef DM42
1141:src/xeq.c     **** 		print_trace( TRACE_DATA_ENTRY, 1 );
1142:src/xeq.c     **** #endif
1143:src/xeq.c     **** 	}
1144:src/xeq.c     **** }
1145:src/xeq.c     **** 
1146:src/xeq.c     **** void process_cmdline_set_lift(void) {
1147:src/xeq.c     **** 	process_cmdline();
1148:src/xeq.c     **** 	set_lift();
1149:src/xeq.c     **** }
1150:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 25


1151:src/xeq.c     **** 
1152:src/xeq.c     **** /*
1153:src/xeq.c     ****  *  Return a pointer to a numbered register.
1154:src/xeq.c     ****  *  If locals are enabled and a non existent local register
1155:src/xeq.c     ****  *  is accessed, the respective global register is returned.
1156:src/xeq.c     ****  *  Error checking must be done outside this routine.
1157:src/xeq.c     ****  *  We force the beginning of the local registers on an even stack position.
1158:src/xeq.c     ****  *  This ensures 32 bit alignment of the decima64 object.
1159:src/xeq.c     ****  */
1160:src/xeq.c     **** /*
1161:src/xeq.c     ****  *  If working in double precision, register numbers must be remapped
1162:src/xeq.c     ****  */
1163:src/xeq.c     **** static decimal64 *reg_address(int n, decimal64 *const regs, decimal64 *const named_regs) {
 182              		.loc 1 1163 90 is_stmt 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
1164:src/xeq.c     **** 	const int dbl = is_dblmode();
 187              		.loc 1 1164 2 view .LVU58
 188              	.LBB1256:
 189              	.LBI1256:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 190              		.loc 1 932 5 view .LVU59
 191              	.LBB1257:
 933:src/xeq.c     **** }
 192              		.loc 1 933 2 view .LVU60
 933:src/xeq.c     **** }
 193              		.loc 1 933 24 is_stmt 0 view .LVU61
 194 0000 154B     		ldr	r3, .L25
 195 0002 1B68     		ldr	r3, [r3]
 196              	.LBE1257:
 197              	.LBE1256:
1163:src/xeq.c     **** 	const int dbl = is_dblmode();
 198              		.loc 1 1163 90 view .LVU62
 199 0004 10B4     		push	{r4}
 200              		.cfi_def_cfa_offset 4
 201              		.cfi_offset 4, -4
 202              	.LBB1260:
 203              	.LBB1258:
 933:src/xeq.c     **** }
 204              		.loc 1 933 24 view .LVU63
 205 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 206              	.LBE1258:
 207              	.LBE1260:
1165:src/xeq.c     **** 
1166:src/xeq.c     **** 	if (n < regX_idx)
 208              		.loc 1 1166 5 view .LVU64
 209 000a 6328     		cmp	r0, #99
 210              	.LBB1261:
 211              	.LBB1259:
 933:src/xeq.c     **** }
 212              		.loc 1 933 24 view .LVU65
 213 000c 44F20103 		movw	r3, #16385
 214 0010 03EA0403 		and	r3, r3, r4
 215              	.LVL17:
 933:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 26


 216              		.loc 1 933 24 view .LVU66
 217              	.LBE1259:
 218              	.LBE1261:
 219              		.loc 1 1166 2 is_stmt 1 view .LVU67
 220              		.loc 1 1166 5 is_stmt 0 view .LVU68
 221 0014 10DD     		ble	.L23
1167:src/xeq.c     **** 		return regs + n + (dbl ? n : 0);
1168:src/xeq.c     **** 
1169:src/xeq.c     **** 	n -= regX_idx;
 222              		.loc 1 1169 2 is_stmt 1 view .LVU69
1170:src/xeq.c     **** 	// Lettered register
1171:src/xeq.c     **** 	if (XromFlags.xIN)
 223              		.loc 1 1171 6 is_stmt 0 view .LVU70
 224 0016 1149     		ldr	r1, .L25+4
 225              	.LVL18:
 226              		.loc 1 1171 5 view .LVU71
 227 0018 91F90140 		ldrsb	r4, [r1, #1]
 228 001c 002C     		cmp	r4, #0
1169:src/xeq.c     **** 	// Lettered register
 229              		.loc 1 1169 4 view .LVU72
 230 001e A0F16401 		sub	r1, r0, #100
 231              	.LVL19:
 232              		.loc 1 1171 2 is_stmt 1 view .LVU73
 233              		.loc 1 1171 5 is_stmt 0 view .LVU74
 234 0022 13DB     		blt	.L24
1172:src/xeq.c     **** 		return (decimal64 *) (XromStack + n);
1173:src/xeq.c     **** 	if (dbl)
 235              		.loc 1 1173 2 is_stmt 1 view .LVU75
 236              		.loc 1 1173 5 is_stmt 0 view .LVU76
 237 0024 B3F5804F 		cmp	r3, #16384
1174:src/xeq.c     **** 		n = (n << 1) - STACK_SIZE - EXTRA_REG;
 238              		.loc 1 1174 3 is_stmt 1 view .LVU77
 239              		.loc 1 1174 10 is_stmt 0 view .LVU78
 240 0028 04BF     		itt	eq
 241 002a 4900     		lsleq	r1, r1, #1
 242              	.LVL20:
 243              		.loc 1 1174 5 view .LVU79
 244 002c 0C39     		subeq	r1, r1, #12
 245              	.LVL21:
1175:src/xeq.c     **** 	return named_regs + n;
 246              		.loc 1 1175 2 is_stmt 1 view .LVU80
 247              		.loc 1 1175 20 is_stmt 0 view .LVU81
 248 002e 02EBC100 		add	r0, r2, r1, lsl #3
1176:src/xeq.c     **** }
 249              		.loc 1 1176 1 view .LVU82
 250 0032 5DF8044B 		ldr	r4, [sp], #4
 251              		.cfi_remember_state
 252              		.cfi_restore 4
 253              		.cfi_def_cfa_offset 0
 254 0036 7047     		bx	lr
 255              	.LVL22:
 256              	.L23:
 257              		.cfi_restore_state
1167:src/xeq.c     **** 
 258              		.loc 1 1167 3 is_stmt 1 view .LVU83
1167:src/xeq.c     **** 
 259              		.loc 1 1167 19 is_stmt 0 view .LVU84
ARM GAS  /tmp/ccjeMhND.s 			page 27


 260 0038 B3F5804F 		cmp	r3, #16384
1167:src/xeq.c     **** 
 261              		.loc 1 1167 15 view .LVU85
 262 003c 4FEAC002 		lsl	r2, r0, #3
 263              	.LVL23:
1167:src/xeq.c     **** 
 264              		.loc 1 1167 15 view .LVU86
 265 0040 08BF     		it	eq
 266 0042 0201     		lsleq	r2, r0, #4
1167:src/xeq.c     **** 
 267              		.loc 1 1167 19 view .LVU87
 268 0044 8818     		adds	r0, r1, r2
 269              	.LVL24:
 270              		.loc 1 1176 1 view .LVU88
 271 0046 5DF8044B 		ldr	r4, [sp], #4
 272              		.cfi_remember_state
 273              		.cfi_restore 4
 274              		.cfi_def_cfa_offset 0
 275 004a 7047     		bx	lr
 276              	.LVL25:
 277              	.L24:
 278              		.cfi_restore_state
1172:src/xeq.c     **** 	if (dbl)
 279              		.loc 1 1172 3 is_stmt 1 view .LVU89
1172:src/xeq.c     **** 	if (dbl)
 280              		.loc 1 1172 10 is_stmt 0 view .LVU90
 281 004c 0448     		ldr	r0, .L25+8
 282              		.loc 1 1176 1 view .LVU91
 283 004e 5DF8044B 		ldr	r4, [sp], #4
 284              		.cfi_restore 4
 285              		.cfi_def_cfa_offset 0
1172:src/xeq.c     **** 	if (dbl)
 286              		.loc 1 1172 10 view .LVU92
 287 0052 00EB0110 		add	r0, r0, r1, lsl #4
 288              		.loc 1 1176 1 view .LVU93
 289 0056 7047     		bx	lr
 290              	.L26:
 291              		.align	2
 292              	.L25:
 293 0058 00000000 		.word	main_ram
 294 005c 00000000 		.word	XromParams
 295 0060 00000000 		.word	XromLocal
 296              		.cfi_endproc
 297              	.LFE86:
 299              		.section	.text.retstk_up,"ax",%progbits
 300              		.align	1
 301              		.p2align 2,,3
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	retstk_up:
 308              	.LFB146:
1177:src/xeq.c     **** 
1178:src/xeq.c     **** REGISTER *get_reg_n(int n) {
1179:src/xeq.c     **** 	const int dbl = is_dblmode();
1180:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 28


1181:src/xeq.c     **** 	if (n >= CONST_REG_BASE) {
1182:src/xeq.c     **** 		n -= CONST_REG_BASE;
1183:src/xeq.c     **** 		return get_const(n, dbl);
1184:src/xeq.c     **** 	}
1185:src/xeq.c     **** 	if (n >= FLASH_REG_BASE)
1186:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
1187:src/xeq.c     **** 
1188:src/xeq.c     **** 	if (n >= LOCAL_REG_BASE && local_regs() > 0) {
1189:src/xeq.c     **** 		// local register on the return stack
1190:src/xeq.c     **** 		n -= LOCAL_REG_BASE;
1191:src/xeq.c     **** 		if (dbl)
1192:src/xeq.c     **** 			n <<= 1;
1193:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
1194:src/xeq.c     **** 	}
1195:src/xeq.c     **** 	return (REGISTER *) reg_address(n, Regs + TOPREALREG - NumRegs, Regs + regX_idx);
1196:src/xeq.c     **** }
1197:src/xeq.c     **** 
1198:src/xeq.c     **** 
1199:src/xeq.c     **** REGISTER *get_flash_reg_n(int n) {
1200:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
1201:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
1202:src/xeq.c     **** }
1203:src/xeq.c     **** 
1204:src/xeq.c     **** 
1205:src/xeq.c     **** /*
1206:src/xeq.c     ****  *  Get a constatnt by index and mode
1207:src/xeq.c     ****  *  In case of a conversion, a private copy is returned
1208:src/xeq.c     ****  */
1209:src/xeq.c     **** REGISTER *get_const(int index, int dbl)
1210:src/xeq.c     **** {
1211:src/xeq.c     **** 	static REGISTER result;
1212:src/xeq.c     **** 	const int i = cnsts[index].index;
1213:src/xeq.c     **** 	if (dbl) {
1214:src/xeq.c     **** 		if (i <= 1 || i >= 128)
1215:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
1216:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
1217:src/xeq.c     **** 	}
1218:src/xeq.c     **** 	else {
1219:src/xeq.c     **** 		if (i < 128)
1220:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
1221:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
1222:src/xeq.c     **** 	}
1223:src/xeq.c     **** 	return &result;
1224:src/xeq.c     **** }
1225:src/xeq.c     **** 
1226:src/xeq.c     **** 
1227:src/xeq.c     **** /*  Some conversion routines to take decimals and produce integers
1228:src/xeq.c     ****  *  This is for opaque storage, no conversion takes place.
1229:src/xeq.c     ****  */
1230:src/xeq.c     **** long long int get_reg_n_int(int index) {
1231:src/xeq.c     **** 	long long int ll;
1232:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
1233:src/xeq.c     **** 	return ll;
1234:src/xeq.c     **** }
1235:src/xeq.c     **** 
1236:src/xeq.c     **** void set_reg_n_int(int index, long long int ll) {
1237:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
ARM GAS  /tmp/ccjeMhND.s 			page 29


1238:src/xeq.c     **** }
1239:src/xeq.c     **** 
1240:src/xeq.c     **** /* Get an integer from a register
1241:src/xeq.c     ****  */
1242:src/xeq.c     **** unsigned long long int get_reg_n_int_sgn(int index, int *sgn) {
1243:src/xeq.c     **** 	if (is_intmode()) {
1244:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
1245:src/xeq.c     **** 	} else {
1246:src/xeq.c     **** 		decNumber n;
1247:src/xeq.c     **** 
1248:src/xeq.c     **** 		getRegister(&n, index);
1249:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
1250:src/xeq.c     **** 	}
1251:src/xeq.c     **** }
1252:src/xeq.c     **** 
1253:src/xeq.c     **** 
1254:src/xeq.c     **** /* Get an integer from X
1255:src/xeq.c     ****  */
1256:src/xeq.c     **** long long int getX_int(void) {
1257:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
1258:src/xeq.c     **** }
1259:src/xeq.c     **** 
1260:src/xeq.c     **** unsigned long long int getX_int_sgn(int *sgn) {
1261:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
1262:src/xeq.c     **** }
1263:src/xeq.c     **** 
1264:src/xeq.c     **** /*
1265:src/xeq.c     ****  *  Forced conversion from real to intger
1266:src/xeq.c     ****  *  Leaves integer mode active on return!
1267:src/xeq.c     ****  */
1268:src/xeq.c     **** static void int_from_register(int out, int in) {
1269:src/xeq.c     **** 	int sgn;
1270:src/xeq.c     **** 	unsigned long long int val;
1271:src/xeq.c     **** 	
1272:src/xeq.c     **** 	UState.intm = 0;	// Force real mode access
1273:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1274:src/xeq.c     **** 
1275:src/xeq.c     **** 	UState.intm = 1;	// Force integer access
1276:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1277:src/xeq.c     **** }
1278:src/xeq.c     **** 
1279:src/xeq.c     **** /* Put an integer into a register
1280:src/xeq.c     ****  */
1281:src/xeq.c     **** void set_reg_n_int_sgn(int index, unsigned long long int val, int sgn) {
1282:src/xeq.c     **** 	if (is_intmode()) {
1283:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
1284:src/xeq.c     **** 	} else {
1285:src/xeq.c     **** 		decNumber t;
1286:src/xeq.c     **** 
1287:src/xeq.c     **** 		ullint_to_dn(&t, val);
1288:src/xeq.c     **** 		if (sgn)
1289:src/xeq.c     **** 			dn_minus(&t, &t);
1290:src/xeq.c     **** 		setRegister(index, &t);
1291:src/xeq.c     **** 	}
1292:src/xeq.c     **** }
1293:src/xeq.c     **** 
1294:src/xeq.c     **** /* 
ARM GAS  /tmp/ccjeMhND.s 			page 30


1295:src/xeq.c     ****  *  Forced conversion from integer to register format.
1296:src/xeq.c     ****  *  Leaves integer mode off after conversion.
1297:src/xeq.c     ****  *  Destination may be in XROM register space
1298:src/xeq.c     ****  */
1299:src/xeq.c     **** static void register_from_int(int out, int in, int called_from_xin) {
1300:src/xeq.c     **** 	int sgn;
1301:src/xeq.c     **** 	unsigned long long int val;
1302:src/xeq.c     **** 	const int xin = XromFlags.xIN;
1303:src/xeq.c     **** 	
1304:src/xeq.c     **** 	if (called_from_xin)
1305:src/xeq.c     **** 		XromFlags.xIN = 0;
1306:src/xeq.c     **** 	UState.intm = 1;
1307:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1308:src/xeq.c     **** 
1309:src/xeq.c     **** 	XromFlags.xIN = xin;
1310:src/xeq.c     **** 	UState.intm = 0;
1311:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1312:src/xeq.c     **** }
1313:src/xeq.c     **** 
1314:src/xeq.c     **** 
1315:src/xeq.c     **** /* Put an integer into X
1316:src/xeq.c     ****  * Integer registers are always single precision!
1317:src/xeq.c     ****  */
1318:src/xeq.c     **** void setX_int(long long int val) {
1319:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
1320:src/xeq.c     **** }
1321:src/xeq.c     **** 
1322:src/xeq.c     **** 
1323:src/xeq.c     **** void setX_int_sgn(unsigned long long int val, int sgn) {
1324:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
1325:src/xeq.c     **** }
1326:src/xeq.c     **** 
1327:src/xeq.c     **** 
1328:src/xeq.c     **** 
1329:src/xeq.c     **** /*
1330:src/xeq.c     ****  *  Set the register value explicitely
1331:src/xeq.c     ****  */
1332:src/xeq.c     **** void zero_regs(REGISTER *dest, int n) {
1333:src/xeq.c     **** #if 0
1334:src/xeq.c     **** 	if (is_intmode())
1335:src/xeq.c     **** 		xset(dest, 0, n << 3);
1336:src/xeq.c     **** 	else {
1337:src/xeq.c     **** 		REGISTER *const zero = get_reg_n(CONST_REG_BASE + OP_ZERO);
1338:src/xeq.c     **** 		const int reg_size = is_dblmode() ? sizeof(decimal128) : sizeof(decimal64);
1339:src/xeq.c     **** 		char *d = (char *) dest;
1340:src/xeq.c     **** 		int i;
1341:src/xeq.c     **** 		for (i = 0; i < n; ++i, d += reg_size)
1342:src/xeq.c     **** 			copyreg((REGISTER *) d, zero);
1343:src/xeq.c     **** 	}
1344:src/xeq.c     **** #else
1345:src/xeq.c     **** 	// This works for all modes
1346:src/xeq.c     **** 	// no it doesn't -- it leaves varying values of zero around
1347:src/xeq.c     **** 	xset(dest, 0, n << (3 + is_dblmode()));
1348:src/xeq.c     **** #endif
1349:src/xeq.c     **** }
1350:src/xeq.c     **** 
1351:src/xeq.c     **** void move_regs(REGISTER *dest, REGISTER *src, int n) {
ARM GAS  /tmp/ccjeMhND.s 			page 31


1352:src/xeq.c     **** 	if (is_dblmode())
1353:src/xeq.c     **** 		n <<= 1;
1354:src/xeq.c     **** 	xcopy(dest, src, n << 3);
1355:src/xeq.c     **** }
1356:src/xeq.c     **** 
1357:src/xeq.c     **** 
1358:src/xeq.c     **** /* Zero a register
1359:src/xeq.c     ****  */
1360:src/xeq.c     **** static void set_zero(REGISTER *x) {
1361:src/xeq.c     **** 	zero_regs(x, 1);
1362:src/xeq.c     **** }
1363:src/xeq.c     **** 
1364:src/xeq.c     **** void zero_X(void) {
1365:src/xeq.c     **** 	set_zero(StackBase);
1366:src/xeq.c     **** }
1367:src/xeq.c     **** 
1368:src/xeq.c     **** void zero_Y(void) {
1369:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
1370:src/xeq.c     **** }
1371:src/xeq.c     **** 
1372:src/xeq.c     **** void clrx(enum nilop op) {
1373:src/xeq.c     **** 	zero_X();
1374:src/xeq.c     **** 	clr_lift();
1375:src/xeq.c     **** }
1376:src/xeq.c     **** 
1377:src/xeq.c     **** /* Zero out the stack
1378:src/xeq.c     ****  */
1379:src/xeq.c     **** void clrstk(enum nilop op) {
1380:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
1381:src/xeq.c     **** 	set_lift();
1382:src/xeq.c     **** }
1383:src/xeq.c     **** 
1384:src/xeq.c     **** 
1385:src/xeq.c     **** /* Zero out all registers excluding the stack and lastx
1386:src/xeq.c     ****  */	
1387:src/xeq.c     **** void clrreg(enum nilop op) {
1388:src/xeq.c     **** 	const int local = local_regs();
1389:src/xeq.c     **** 	process_cmdline_set_lift();
1390:src/xeq.c     **** 
1391:src/xeq.c     **** 	// erase register memory
1392:src/xeq.c     **** 	zero_regs(get_reg_n(0), global_regs());
1393:src/xeq.c     **** 
1394:src/xeq.c     **** 	// Clear A, B, C & D if they aren't part of the stack
1395:src/xeq.c     **** 	if (stack_size() != 8)
1396:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
1397:src/xeq.c     **** 
1398:src/xeq.c     **** 	// Clear J & K but not I and L since they are last X.
1399:src/xeq.c     **** 	zero_regs(get_reg_n(regJ_idx), 2);
1400:src/xeq.c     **** 
1401:src/xeq.c     **** 	// erase local registers but keep them allocated
1402:src/xeq.c     **** 	if (local)
1403:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
1404:src/xeq.c     **** }
1405:src/xeq.c     **** 
1406:src/xeq.c     **** 
1407:src/xeq.c     **** /* Clear the subroutine return stack
1408:src/xeq.c     ****  */
ARM GAS  /tmp/ccjeMhND.s 			page 32


1409:src/xeq.c     **** void clrretstk(void) {
1410:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
1411:src/xeq.c     **** }
1412:src/xeq.c     **** 
1413:src/xeq.c     **** void clrretstk_pc(void) {
1414:src/xeq.c     **** 	clrretstk();
1415:src/xeq.c     **** 	raw_set_pc(0);
1416:src/xeq.c     **** 	update_program_bounds(1);
1417:src/xeq.c     **** }
1418:src/xeq.c     **** 
1419:src/xeq.c     **** 
1420:src/xeq.c     **** /*
1421:src/xeq.c     ****  *  Command to allow access to constants and small integers
1422:src/xeq.c     ****  */
1423:src/xeq.c     **** void cmdconst(unsigned int arg, enum rarg op) {
1424:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
1425:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX || op == RARG_IND_CONST_CMPLX) {
1426:src/xeq.c     **** #else
1427:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX) {
1428:src/xeq.c     **** #endif
1429:src/xeq.c     **** 		lift2_if_enabled();
1430:src/xeq.c     **** 		zero_Y();
1431:src/xeq.c     **** 		set_was_complex();
1432:src/xeq.c     **** 	} else
1433:src/xeq.c     **** 		lift_if_enabled();
1434:src/xeq.c     **** 
1435:src/xeq.c     **** 	if (op == RARG_INTNUM || op == RARG_INTNUM_CMPLX)
1436:src/xeq.c     **** 		setX_int_sgn(arg, 0);
1437:src/xeq.c     **** 	else if (is_intmode())
1438:src/xeq.c     **** 		bad_mode_error();
1439:src/xeq.c     **** 	else 
1440:src/xeq.c     **** 		copyreg(StackBase, get_const(arg, is_dblmode()));
1441:src/xeq.c     **** }
1442:src/xeq.c     **** 
1443:src/xeq.c     **** 
1444:src/xeq.c     **** /* Store/recall code here.
1445:src/xeq.c     ****  * These two are pretty much the same so we define some utility routines first.
1446:src/xeq.c     ****  */
1447:src/xeq.c     **** 
1448:src/xeq.c     **** /* Do a basic STO/RCL arithmetic operation.
1449:src/xeq.c     ****  */
1450:src/xeq.c     **** static int storcl_op(unsigned short opr, int index, decNumber *r, int rev) {
1451:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
1452:src/xeq.c     **** 
1453:src/xeq.c     **** 	getX(x);
1454:src/xeq.c     **** 	getRegister(y, index);
1455:src/xeq.c     **** 	if (rev) {
1456:src/xeq.c     **** 		x = y;
1457:src/xeq.c     **** 		y = &a;
1458:src/xeq.c     **** 	}
1459:src/xeq.c     **** 
1460:src/xeq.c     **** 	switch (opr) {
1461:src/xeq.c     **** 	case 1:
1462:src/xeq.c     **** 		dn_add(r, y, x);
1463:src/xeq.c     **** 		break;
1464:src/xeq.c     **** 	case 2:
1465:src/xeq.c     **** 		dn_subtract(r, y, x);
ARM GAS  /tmp/ccjeMhND.s 			page 33


1466:src/xeq.c     **** 		break;
1467:src/xeq.c     **** 	case 3:
1468:src/xeq.c     **** 		dn_multiply(r, y, x);
1469:src/xeq.c     **** 		break;
1470:src/xeq.c     **** 	case 4:
1471:src/xeq.c     **** 		dn_divide(r, y, x);
1472:src/xeq.c     **** 		break;
1473:src/xeq.c     **** 	case 5:
1474:src/xeq.c     **** 		dn_min(r, y, x);
1475:src/xeq.c     **** 		break;
1476:src/xeq.c     **** 	case 6:
1477:src/xeq.c     **** 		dn_max(r, y, x);
1478:src/xeq.c     **** 		break;
1479:src/xeq.c     **** 	default:
1480:src/xeq.c     **** 		return 1;
1481:src/xeq.c     **** 	}
1482:src/xeq.c     **** 	return 0;
1483:src/xeq.c     **** }
1484:src/xeq.c     **** 
1485:src/xeq.c     **** static int storcl_intop(unsigned short opr, int index, long long int *r, int rev) {
1486:src/xeq.c     **** 	long long int x, y;
1487:src/xeq.c     **** 
1488:src/xeq.c     **** 	x = getX_int();
1489:src/xeq.c     **** 	y = get_reg_n_int(index);
1490:src/xeq.c     **** 
1491:src/xeq.c     **** 	if (rev) {
1492:src/xeq.c     **** 		const long long int t = x;
1493:src/xeq.c     **** 		x = y;
1494:src/xeq.c     **** 		y = t;
1495:src/xeq.c     **** 	}
1496:src/xeq.c     **** 
1497:src/xeq.c     **** 	switch (opr) {
1498:src/xeq.c     **** 	case 1:
1499:src/xeq.c     **** 		*r = intAdd(y, x);
1500:src/xeq.c     **** 		break;
1501:src/xeq.c     **** 	case 2:
1502:src/xeq.c     **** 		*r = intSubtract(y, x);
1503:src/xeq.c     **** 		break;
1504:src/xeq.c     **** 	case 3:
1505:src/xeq.c     **** 		*r = intMultiply(y, x);
1506:src/xeq.c     **** 		break;
1507:src/xeq.c     **** 	case 4:
1508:src/xeq.c     **** 		*r = intDivide(y, x);
1509:src/xeq.c     **** 		break;
1510:src/xeq.c     **** 	case 5:
1511:src/xeq.c     **** 		*r = intMin(y, x);
1512:src/xeq.c     **** 		break;
1513:src/xeq.c     **** 	case 6:
1514:src/xeq.c     **** 		*r = intMax(y, x);
1515:src/xeq.c     **** 		break;
1516:src/xeq.c     **** 	default:
1517:src/xeq.c     **** 		return 1;
1518:src/xeq.c     **** 	}
1519:src/xeq.c     **** 	return 0;
1520:src/xeq.c     **** }
1521:src/xeq.c     **** 
1522:src/xeq.c     **** /* We've got a STO operation to do.
ARM GAS  /tmp/ccjeMhND.s 			page 34


1523:src/xeq.c     ****  */
1524:src/xeq.c     **** void cmdsto(unsigned int arg, enum rarg op) {
1525:src/xeq.c     **** 	if (op == RARG_STO) {
1526:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
1527:src/xeq.c     **** 	} else {
1528:src/xeq.c     **** 		if (is_intmode()) {
1529:src/xeq.c     **** 			long long int r;
1530:src/xeq.c     **** 
1531:src/xeq.c     **** 			if (storcl_intop(op - RARG_STO, arg, &r, 0))
1532:src/xeq.c     **** 				illegal(op);
1533:src/xeq.c     **** 			set_reg_n_int(arg, r);
1534:src/xeq.c     **** 		} else {
1535:src/xeq.c     **** 			decNumber r;
1536:src/xeq.c     **** 
1537:src/xeq.c     **** 			if (storcl_op(op - RARG_STO, arg, &r, 0))
1538:src/xeq.c     **** 				illegal(op);
1539:src/xeq.c     **** 			setRegister(arg, &r);
1540:src/xeq.c     **** 		}
1541:src/xeq.c     **** 	}
1542:src/xeq.c     **** }
1543:src/xeq.c     **** 
1544:src/xeq.c     **** /* We've got a RCL operation to do.
1545:src/xeq.c     ****  */
1546:src/xeq.c     **** static void do_rcl(int index, enum rarg op) {
1547:src/xeq.c     **** 	if (op == RARG_RCL) {
1548:src/xeq.c     **** 		REGISTER temp;
1549:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
1550:src/xeq.c     **** 		lift_if_enabled();
1551:src/xeq.c     **** 		copyreg(StackBase, &temp);
1552:src/xeq.c     **** 	} else {
1553:src/xeq.c     **** 		if (is_intmode()) {
1554:src/xeq.c     **** 			long long int r;
1555:src/xeq.c     **** 
1556:src/xeq.c     **** 			if (storcl_intop(op - RARG_RCL, index, &r, 1))
1557:src/xeq.c     **** 				illegal(op);
1558:src/xeq.c     **** 			setlastX();
1559:src/xeq.c     **** 			setX_int(r);
1560:src/xeq.c     **** 		} else {
1561:src/xeq.c     **** 			decNumber r;
1562:src/xeq.c     **** 
1563:src/xeq.c     **** 			if (storcl_op(op - RARG_RCL, index, &r, 1))
1564:src/xeq.c     **** 				illegal(op);
1565:src/xeq.c     **** 			setlastX();
1566:src/xeq.c     **** 			setX(&r);
1567:src/xeq.c     **** 		}
1568:src/xeq.c     **** 	}
1569:src/xeq.c     **** }
1570:src/xeq.c     **** 
1571:src/xeq.c     **** void cmdrcl(unsigned int arg, enum rarg op) {
1572:src/xeq.c     **** 	do_rcl(arg, op);
1573:src/xeq.c     **** }
1574:src/xeq.c     **** 
1575:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1576:src/xeq.c     **** void cmdflashrcl(unsigned int arg, enum rarg op) {
1577:src/xeq.c     **** 	do_rcl(FLASH_REG_BASE + arg, op - RARG_FLRCL + RARG_RCL);
1578:src/xeq.c     **** }
1579:src/xeq.c     **** #endif
ARM GAS  /tmp/ccjeMhND.s 			page 35


1580:src/xeq.c     **** 
1581:src/xeq.c     **** /* And the complex equivalents for the above.
1582:src/xeq.c     ****  * We pair registers arg & arg+1 to provide a complex number
1583:src/xeq.c     ****  */
1584:src/xeq.c     **** static int storcl_cop(unsigned short opr, int index, decNumber *r1, decNumber *r2, int rev) {
1585:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
1586:src/xeq.c     **** 
1587:src/xeq.c     **** 	getXY(x + 0, x + 1);
1588:src/xeq.c     **** 	getRegister(y + 0, index);
1589:src/xeq.c     **** 	getRegister(y + 1, index + 1);
1590:src/xeq.c     **** 
1591:src/xeq.c     **** 	if (rev) {
1592:src/xeq.c     **** 		x = y;
1593:src/xeq.c     **** 		y = a;
1594:src/xeq.c     **** 	}
1595:src/xeq.c     **** 
1596:src/xeq.c     **** 	switch (opr) {
1597:src/xeq.c     **** 	case 1:
1598:src/xeq.c     **** 		cmplxAdd(r1, r2, y + 0, y + 1, x + 0, x + 1);
1599:src/xeq.c     **** 		break;
1600:src/xeq.c     **** 	case 2:
1601:src/xeq.c     **** 		cmplxSubtract(r1, r2, y + 0, y + 1, x + 0, x + 1);
1602:src/xeq.c     **** 		break;
1603:src/xeq.c     **** 	case 3:
1604:src/xeq.c     **** 		cmplxMultiply(r1, r2, y + 0, y + 1, x + 0, x + 1);
1605:src/xeq.c     **** 		break;
1606:src/xeq.c     **** 	case 4:
1607:src/xeq.c     **** 		cmplxDivide(r1, r2, y + 0, y + 1, x + 0, x + 1);
1608:src/xeq.c     **** 		break;
1609:src/xeq.c     **** 	default:
1610:src/xeq.c     **** 		return 1;
1611:src/xeq.c     **** 	}
1612:src/xeq.c     **** 	return 0;
1613:src/xeq.c     **** }
1614:src/xeq.c     **** 
1615:src/xeq.c     **** 
1616:src/xeq.c     **** void cmdcsto(unsigned int arg, enum rarg op) {
1617:src/xeq.c     **** 	decNumber r1, r2;
1618:src/xeq.c     **** 	REGISTER *t1, *t2;
1619:src/xeq.c     **** 
1620:src/xeq.c     **** 	t1 = get_reg_n(arg);
1621:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
1622:src/xeq.c     **** 
1623:src/xeq.c     **** 	if (op == RARG_CSTO) {
1624:src/xeq.c     **** 		copyreg(t1, StackBase);
1625:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
1626:src/xeq.c     **** 	} else {
1627:src/xeq.c     **** 		if (is_intmode())
1628:src/xeq.c     **** 			bad_mode_error();
1629:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
1630:src/xeq.c     **** 			illegal(op);
1631:src/xeq.c     **** 		else {
1632:src/xeq.c     **** 			setRegister(arg, &r1);
1633:src/xeq.c     **** 			setRegister(arg + 1, &r2);
1634:src/xeq.c     **** 		}
1635:src/xeq.c     **** 	}
1636:src/xeq.c     **** 	set_was_complex();
ARM GAS  /tmp/ccjeMhND.s 			page 36


1637:src/xeq.c     **** }
1638:src/xeq.c     **** 
1639:src/xeq.c     **** static void do_crcl(int index, enum rarg op) {
1640:src/xeq.c     **** 	decNumber r1, r2;
1641:src/xeq.c     **** 
1642:src/xeq.c     **** 	if (op == RARG_CRCL) {
1643:src/xeq.c     **** 		REGISTER x, y;
1644:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
1645:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
1646:src/xeq.c     **** 		lift2_if_enabled();
1647:src/xeq.c     **** 		copyreg(StackBase, &x);
1648:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
1649:src/xeq.c     **** 	} else {
1650:src/xeq.c     **** 		if (is_intmode())
1651:src/xeq.c     **** 			bad_mode_error();
1652:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
1653:src/xeq.c     **** 			illegal(op);
1654:src/xeq.c     **** 		else {
1655:src/xeq.c     **** 			setlastXY();
1656:src/xeq.c     **** 			setXY(&r1, &r2);
1657:src/xeq.c     **** 		}
1658:src/xeq.c     **** 	}
1659:src/xeq.c     **** 	set_was_complex();
1660:src/xeq.c     **** }
1661:src/xeq.c     **** 
1662:src/xeq.c     **** void cmdcrcl(unsigned int arg, enum rarg op) {
1663:src/xeq.c     **** 	do_crcl(arg, op);
1664:src/xeq.c     **** }
1665:src/xeq.c     **** 
1666:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1667:src/xeq.c     **** void cmdflashcrcl(unsigned int arg, enum rarg op) {
1668:src/xeq.c     **** 	do_crcl(FLASH_REG_BASE + arg, op - RARG_FLCRCL + RARG_CRCL);
1669:src/xeq.c     **** }
1670:src/xeq.c     **** #endif
1671:src/xeq.c     **** 
1672:src/xeq.c     **** /*
1673:src/xeq.c     ****  *  "Alien" RCL commands to convert registers originally stored in a different format
1674:src/xeq.c     ****  */
1675:src/xeq.c     **** // RCL of an integer value
1676:src/xeq.c     **** void cmdircl(unsigned int arg, enum rarg op) {
1677:src/xeq.c     **** 	if (is_intmode())
1678:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
1679:src/xeq.c     **** 	else
1680:src/xeq.c     **** 		register_from_int(regX_idx, arg, 0);
1681:src/xeq.c     **** }
1682:src/xeq.c     **** 
1683:src/xeq.c     **** // RCL of a single or double precision real value
1684:src/xeq.c     **** void cmdrrcl(unsigned int arg, enum rarg op) {
1685:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
1686:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
1687:src/xeq.c     **** 
1688:src/xeq.c     **** 	if (rcl_dbl && arg >= regX_idx && arg <= regK_idx) {
1689:src/xeq.c     **** 		// dRCL is not valid for lettered registers
1690:src/xeq.c     **** 		report_err(ERR_RANGE);
1691:src/xeq.c     **** 		return;
1692:src/xeq.c     **** 	}
1693:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 37


1694:src/xeq.c     **** 	UState.mode_double = rcl_dbl; // Force reading in requested format
1695:src/xeq.c     **** 	if (is_intmode()) {
1696:src/xeq.c     **** 		int_from_register(regX_idx, arg);
1697:src/xeq.c     **** 		UState.mode_double = was_dbl;
1698:src/xeq.c     **** 	}
1699:src/xeq.c     **** 	else {
1700:src/xeq.c     **** 		decNumber x;
1701:src/xeq.c     **** 		getRegister(&x, arg);
1702:src/xeq.c     **** 
1703:src/xeq.c     **** 		UState.mode_double = was_dbl; // Force access in original mode
1704:src/xeq.c     **** 		setX(&x);
1705:src/xeq.c     **** 	}
1706:src/xeq.c     **** }
1707:src/xeq.c     **** 
1708:src/xeq.c     **** 
1709:src/xeq.c     **** /* SWAP x with the specified register
1710:src/xeq.c     ****  */
1711:src/xeq.c     **** void swap_reg(REGISTER *a, REGISTER *b) {
1712:src/xeq.c     **** 	REGISTER t;
1713:src/xeq.c     **** 
1714:src/xeq.c     **** 	copyreg(&t, a);
1715:src/xeq.c     **** 	copyreg(a, b);
1716:src/xeq.c     **** 	copyreg(b, &t);
1717:src/xeq.c     **** }
1718:src/xeq.c     **** 
1719:src/xeq.c     **** void cmdswap(unsigned int arg, enum rarg op) {
1720:src/xeq.c     **** 	int idx;
1721:src/xeq.c     **** 
1722:src/xeq.c     **** 	if (op == RARG_CSWAPX)
1723:src/xeq.c     **** 		idx = regX_idx;
1724:src/xeq.c     **** 	else if (op == RARG_CSWAPZ)
1725:src/xeq.c     **** 		idx = regZ_idx;
1726:src/xeq.c     **** 	else
1727:src/xeq.c     **** 		idx = regX_idx + (int)(op - RARG_SWAPX);
1728:src/xeq.c     **** 
1729:src/xeq.c     **** 	swap_reg(get_reg_n(idx), get_reg_n(arg));
1730:src/xeq.c     **** 
1731:src/xeq.c     **** 	if (op >= RARG_CSWAPX) {
1732:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
1733:src/xeq.c     **** 		set_was_complex();
1734:src/xeq.c     **** 	}
1735:src/xeq.c     **** }
1736:src/xeq.c     **** 
1737:src/xeq.c     **** 
1738:src/xeq.c     **** /* View a specified register
1739:src/xeq.c     ****  */
1740:src/xeq.c     **** void cmdview(unsigned int arg, enum rarg op) {
1741:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
1742:src/xeq.c     **** 
1743:src/xeq.c     **** 	State2.wascomplex = cmplx;
1744:src/xeq.c     **** 	ShowRegister = arg;
1745:src/xeq.c     **** 	State2.disp_freeze = 0;
1746:src/xeq.c     **** 	display();
1747:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
1748:src/xeq.c     **** }
1749:src/xeq.c     **** 
1750:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 38


1751:src/xeq.c     **** /* Get the stack size */
1752:src/xeq.c     **** void get_stack_size(enum nilop op) {
1753:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
1754:src/xeq.c     **** }
1755:src/xeq.c     **** 
1756:src/xeq.c     **** void get_word_size(enum nilop op) {
1757:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
1758:src/xeq.c     **** }
1759:src/xeq.c     **** 
1760:src/xeq.c     **** void get_sign_mode(enum nilop op) {
1761:src/xeq.c     **** 	static const unsigned char modes[4] = {
1762:src/xeq.c     **** 		0x02,		// 2's complement
1763:src/xeq.c     **** 		0x01,		// 1's complement
1764:src/xeq.c     **** 		0x00,		// unsigned
1765:src/xeq.c     **** 		0x81		// sign and mantissa
1766:src/xeq.c     **** 	};
1767:src/xeq.c     **** 	const unsigned char v = modes[(int)int_mode()];
1768:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
1769:src/xeq.c     **** }
1770:src/xeq.c     **** 
1771:src/xeq.c     **** void get_base(enum nilop op) {
1772:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
1773:src/xeq.c     **** }
1774:src/xeq.c     **** 
1775:src/xeq.c     **** #ifdef DM42
1776:src/xeq.c     ****  long int DM42_Ticker () {
1777:src/xeq.c     ****     long int f, t;
1778:src/xeq.c     ****     t = get_rtc_ticks();
1779:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
1780:src/xeq.c     ****     return f;
1781:src/xeq.c     ****  }
1782:src/xeq.c     **** #endif
1783:src/xeq.c     **** /* Get the current ticker value */
1784:src/xeq.c     **** void op_ticks(enum nilop op) {
1785:src/xeq.c     **** #if !defined(CONSOLE)
1786:src/xeq.c     ****     setX_int_sgn(Ticker, 0);
1787:src/xeq.c     **** #else 
1788:src/xeq.c     ****     struct timeval tv;
1789:src/xeq.c     ****     long long int t;
1790:src/xeq.c     ****     gettimeofday(&tv, NULL);
1791:src/xeq.c     ****     t = tv.tv_sec * 10 + tv.tv_usec / 100000;
1792:src/xeq.c     ****     setX_int_sgn(t, 0);
1793:src/xeq.c     **** #endif
1794:src/xeq.c     **** }
1795:src/xeq.c     **** 
1796:src/xeq.c     **** /* Display the battery voltage */
1797:src/xeq.c     **** void op_voltage(enum nilop op) {
1798:src/xeq.c     **** 	decNumber t, u;
1799:src/xeq.c     **** #ifdef REALBUILD
1800:src/xeq.c     **** 	unsigned long long int v = 19 + Voltage;
1801:src/xeq.c     **** #elif defined(DM42)
1802:src/xeq.c     **** 	int v = get_vbat();
1803:src/xeq.c     **** 	v = v / 100;
1804:src/xeq.c     **** #else
1805:src/xeq.c     **** 	unsigned long long int v = 32;
1806:src/xeq.c     **** #endif
1807:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 39


1808:src/xeq.c     **** 	if (is_intmode()) {
1809:src/xeq.c     **** 		setX_int_sgn(v, 0);
1810:src/xeq.c     **** 	} else {
1811:src/xeq.c     **** 		ullint_to_dn(&t, v);
1812:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
1813:src/xeq.c     **** 		setX(&u);
1814:src/xeq.c     **** 	}
1815:src/xeq.c     **** }
1816:src/xeq.c     **** 
1817:src/xeq.c     **** /*
1818:src/xeq.c     ****  *  Commands to determine free memory
1819:src/xeq.c     ****  */
1820:src/xeq.c     **** int free_mem(void) {
1821:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
1822:src/xeq.c     **** }
1823:src/xeq.c     **** 
1824:src/xeq.c     **** int free_flash(void) {
1825:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
1826:src/xeq.c     **** }
1827:src/xeq.c     **** 
1828:src/xeq.c     **** void get_mem(enum nilop op) {
1829:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
1830:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
1831:src/xeq.c     **** 		 op == OP_FLASHQ ? free_flash() :
1832:src/xeq.c     **** 		 global_regs(),
1833:src/xeq.c     **** 		 0);
1834:src/xeq.c     **** }
1835:src/xeq.c     **** 
1836:src/xeq.c     **** 
1837:src/xeq.c     **** /* Check if a keystroke is pending in the buffer, if so return it to the specified
1838:src/xeq.c     ****  * register, if not skip the next step.
1839:src/xeq.c     ****  */
1840:src/xeq.c     **** void cmdkeyp(unsigned int arg, enum rarg op) {
1841:src/xeq.c     **** 	int cond = LastKey == 0;
1842:src/xeq.c     **** 	if (!cond) {
1843:src/xeq.c     **** 		int k = LastKey - 1;
1844:src/xeq.c     **** 		LastKey = 0;
1845:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
1846:src/xeq.c     **** 	}
1847:src/xeq.c     **** 	fin_tst(cond);
1848:src/xeq.c     **** }
1849:src/xeq.c     **** 
1850:src/xeq.c     **** /*
1851:src/xeq.c     ****  *  Get a key code from a register and translate it from row/colum to internal
1852:src/xeq.c     ****  *  Check for valid arguments
1853:src/xeq.c     ****  */
1854:src/xeq.c     **** static int get_keycode_from_reg(unsigned int n)
1855:src/xeq.c     **** {
1856:src/xeq.c     **** 	int sgn;
1857:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
1858:src/xeq.c     **** 	if ( c < 0 )
1859:src/xeq.c     **** 		report_err(ERR_RANGE);
1860:src/xeq.c     **** 	return c;
1861:src/xeq.c     **** }
1862:src/xeq.c     **** 
1863:src/xeq.c     **** /*
1864:src/xeq.c     ****  *  Take a row/column key code and feed it to the keyboard buffer
ARM GAS  /tmp/ccjeMhND.s 			page 40


1865:src/xeq.c     ****  *  This stops program execution first to make sure, the key is not
1866:src/xeq.c     ****  *  read in by KEY? again.
1867:src/xeq.c     ****  */
1868:src/xeq.c     **** void cmdputkey(unsigned int arg, enum rarg op)
1869:src/xeq.c     **** {
1870:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
1871:src/xeq.c     **** 
1872:src/xeq.c     **** 	if (c >= 0) {
1873:src/xeq.c     **** 		set_running_off();
1874:src/xeq.c     **** 		put_key(c);
1875:src/xeq.c     **** 	}
1876:src/xeq.c     **** }
1877:src/xeq.c     **** 
1878:src/xeq.c     **** /*
1879:src/xeq.c     ****  *  Return the type of the keycode in register n
1880:src/xeq.c     ****  *  returns 0-9 for digits, 10 for ., +/-, EEX, 11 for f,g,h, 12 for all other keys.
1881:src/xeq.c     ****  *  Invalid codes produce an error.
1882:src/xeq.c     ****  */
1883:src/xeq.c     **** void cmdkeytype(unsigned int arg, enum rarg op)
1884:src/xeq.c     **** {
1885:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
1886:src/xeq.c     **** 	if ( c >= 0 ) {
1887:src/xeq.c     **** 		const char types[] = {
1888:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
1889:src/xeq.c     **** 			12, 12, 12, 11, 11, 11,
1890:src/xeq.c     **** 			12, 12, 10, 10, 12, 12,
1891:src/xeq.c     **** 			12,  7,  8,  9, 12, 12,
1892:src/xeq.c     **** 			12,  4,  5,  6, 12, 12,
1893:src/xeq.c     **** 			12,  1,  2,  3, 12, 12,
1894:src/xeq.c     **** 			12,  0, 10, 12, 12 };
1895:src/xeq.c     **** 		lift_if_enabled();
1896:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
1897:src/xeq.c     **** 	}
1898:src/xeq.c     **** }
1899:src/xeq.c     **** 
1900:src/xeq.c     **** 
1901:src/xeq.c     **** /* Check which operating mode we're in -- integer or real -- they both
1902:src/xeq.c     ****  * vector through this routine.
1903:src/xeq.c     ****  */
1904:src/xeq.c     **** void check_mode(enum nilop op) {
1905:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
1906:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
1907:src/xeq.c     **** 
1908:src/xeq.c     **** 	fin_tst(intmode == desired);
1909:src/xeq.c     **** }
1910:src/xeq.c     **** 
1911:src/xeq.c     **** 
1912:src/xeq.c     **** /* Check if DBLON is active
1913:src/xeq.c     ****  */
1914:src/xeq.c     **** void check_dblmode(enum nilop op) {
1915:src/xeq.c     **** 	fin_tst(is_dblmode());
1916:src/xeq.c     **** }
1917:src/xeq.c     **** 
1918:src/xeq.c     **** void op_query_xtal(enum nilop op) {
1919:src/xeq.c     **** 	fin_tst(Xtal);
1920:src/xeq.c     **** }
1921:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 41


1922:src/xeq.c     **** void op_query_print(enum nilop op) {
1923:src/xeq.c     **** #ifdef INFRARED
1924:src/xeq.c     **** 	fin_tst(1);
1925:src/xeq.c     **** #else
1926:src/xeq.c     **** 	fin_tst(0);
1927:src/xeq.c     **** #endif
1928:src/xeq.c     **** }
1929:src/xeq.c     **** 
1930:src/xeq.c     **** /* Save and restore the entire stack to sequential registers */
1931:src/xeq.c     **** static int check_stack_overlap(unsigned int arg) {
1932:src/xeq.c     **** 	const int n = stack_size();
1933:src/xeq.c     **** 
1934:src/xeq.c     **** 	if (arg + n <= global_regs() || arg >= NUMREG) {
1935:src/xeq.c     **** 		return n;
1936:src/xeq.c     **** 	}
1937:src/xeq.c     **** 	report_err(ERR_STK_CLASH);
1938:src/xeq.c     **** 	return 0;
1939:src/xeq.c     **** }
1940:src/xeq.c     **** 
1941:src/xeq.c     **** void cmdstostk(unsigned int arg, enum rarg op) {
1942:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
1943:src/xeq.c     **** 
1944:src/xeq.c     **** 	for (i=0; i<n; i++)
1945:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
1946:src/xeq.c     **** }
1947:src/xeq.c     **** 
1948:src/xeq.c     **** void cmdrclstk(unsigned int arg, enum rarg op) {
1949:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
1950:src/xeq.c     **** 
1951:src/xeq.c     **** 	for (i=0; i<n; i++)
1952:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
1953:src/xeq.c     **** }
1954:src/xeq.c     **** 
1955:src/xeq.c     **** 
1956:src/xeq.c     **** /*
1957:src/xeq.c     ****  *  Move up the return stack, skipping any local variables
1958:src/xeq.c     ****  */
1959:src/xeq.c     **** static void retstk_up(void)
1960:src/xeq.c     **** {
 309              		.loc 1 1960 1 is_stmt 1 view -0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
1961:src/xeq.c     **** 	if (RetStkPtr < 0) {
 314              		.loc 1 1961 2 view .LVU95
 315              		.loc 1 1961 6 is_stmt 0 view .LVU96
 316 0000 1A4B     		ldr	r3, .L39
1960:src/xeq.c     **** 	if (RetStkPtr < 0) {
 317              		.loc 1 1960 1 view .LVU97
 318 0002 70B4     		push	{r4, r5, r6}
 319              		.cfi_def_cfa_offset 12
 320              		.cfi_offset 4, -12
 321              		.cfi_offset 5, -8
 322              		.cfi_offset 6, -4
 323              		.loc 1 1961 6 view .LVU98
 324 0004 1C68     		ldr	r4, [r3]
ARM GAS  /tmp/ccjeMhND.s 			page 42


 325 0006 B4F9E227 		ldrsh	r2, [r4, #2018]
 326              		.loc 1 1961 5 view .LVU99
 327 000a 002A     		cmp	r2, #0
 328 000c 01DB     		blt	.L37
 329              	.L27:
1962:src/xeq.c     **** 		int sp = RetStkPtr++;
1963:src/xeq.c     **** 		unsigned int s = RetStk[sp++];
1964:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
1965:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
1966:src/xeq.c     **** 			RetStkPtr = sp;
1967:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
1968:src/xeq.c     **** 			LocalRegs = 0;
1969:src/xeq.c     **** 			while (sp < 0) {
1970:src/xeq.c     **** 				s = RetStk[sp];
1971:src/xeq.c     **** 				if (isLOCAL(s)) {
1972:src/xeq.c     **** 					LocalRegs = sp;
1973:src/xeq.c     **** 					break;
1974:src/xeq.c     **** 				}
1975:src/xeq.c     **** 				++sp;
1976:src/xeq.c     **** 				if (isHIDDEN(s))
1977:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
1978:src/xeq.c     **** 			}
1979:src/xeq.c     **** 		}
1980:src/xeq.c     **** 	}
1981:src/xeq.c     **** }
 330              		.loc 1 1981 1 view .LVU100
 331 000e 70BC     		pop	{r4, r5, r6}
 332              		.cfi_remember_state
 333              		.cfi_restore 6
 334              		.cfi_restore 5
 335              		.cfi_restore 4
 336              		.cfi_def_cfa_offset 0
 337 0010 7047     		bx	lr
 338              	.L37:
 339              		.cfi_restore_state
 340              	.LBB1262:
1962:src/xeq.c     **** 		int sp = RetStkPtr++;
 341              		.loc 1 1962 3 is_stmt 1 view .LVU101
1963:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 342              		.loc 1 1963 26 is_stmt 0 view .LVU102
 343 0012 174B     		ldr	r3, .L39+4
1962:src/xeq.c     **** 		int sp = RetStkPtr++;
 344              		.loc 1 1962 21 view .LVU103
 345 0014 511C     		adds	r1, r2, #1
1963:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 346              		.loc 1 1963 26 view .LVU104
 347 0016 1D68     		ldr	r5, [r3]
1962:src/xeq.c     **** 		int sp = RetStkPtr++;
 348              		.loc 1 1962 21 view .LVU105
 349 0018 A4F8E217 		strh	r1, [r4, #2018]	@ movhi
 350              	.LVL26:
1963:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 351              		.loc 1 1963 3 is_stmt 1 view .LVU106
1963:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 352              		.loc 1 1963 26 is_stmt 0 view .LVU107
 353 001c 35F81230 		ldrh	r3, [r5, r2, lsl #1]
 354              	.LVL27:
ARM GAS  /tmp/ccjeMhND.s 			page 43


1964:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 355              		.loc 1 1964 3 is_stmt 1 view .LVU108
1964:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 356              		.loc 1 1964 7 is_stmt 0 view .LVU109
 357 0020 1A0B     		lsrs	r2, r3, #12
 358              	.LVL28:
1964:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 359              		.loc 1 1964 6 view .LVU110
 360 0022 22F00202 		bic	r2, r2, #2
 361 0026 012A     		cmp	r2, #1
 362 0028 F1D1     		bne	.L27
1965:src/xeq.c     **** 			RetStkPtr = sp;
 363              		.loc 1 1965 4 is_stmt 1 view .LVU111
1965:src/xeq.c     **** 			RetStkPtr = sp;
 364              		.loc 1 1965 10 is_stmt 0 view .LVU112
 365 002a C3F30B03 		ubfx	r3, r3, #0, #12
 366              	.LVL29:
1965:src/xeq.c     **** 			RetStkPtr = sp;
 367              		.loc 1 1965 7 view .LVU113
 368 002e 0B44     		add	r3, r3, r1
 369              	.LVL30:
1966:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 370              		.loc 1 1966 4 is_stmt 1 view .LVU114
1968:src/xeq.c     **** 			while (sp < 0) {
 371              		.loc 1 1968 14 is_stmt 0 view .LVU115
 372 0030 0022     		movs	r2, #0
1966:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 373              		.loc 1 1966 14 view .LVU116
 374 0032 A4F8E237 		strh	r3, [r4, #2018]	@ movhi
 375              	.LVL31:
1968:src/xeq.c     **** 			while (sp < 0) {
 376              		.loc 1 1968 4 is_stmt 1 view .LVU117
1968:src/xeq.c     **** 			while (sp < 0) {
 377              		.loc 1 1968 14 is_stmt 0 view .LVU118
 378 0036 A4F8DE27 		strh	r2, [r4, #2014]	@ movhi
1969:src/xeq.c     **** 				s = RetStk[sp];
 379              		.loc 1 1969 4 is_stmt 1 view .LVU119
 380 003a 6FF00046 		mvn	r6, #-2147483648
 381              	.L31:
1969:src/xeq.c     **** 				s = RetStk[sp];
 382              		.loc 1 1969 4 is_stmt 0 view .LVU120
 383 003e 9919     		adds	r1, r3, r6
 384 0040 05EB4101 		add	r1, r5, r1, lsl #1
 385 0044 03E0     		b	.L33
 386              	.LVL32:
 387              	.L32:
1976:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 388              		.loc 1 1976 8 view .LVU121
 389 0046 032A     		cmp	r2, #3
1975:src/xeq.c     **** 				if (isHIDDEN(s))
 390              		.loc 1 1975 5 view .LVU122
 391 0048 03F10103 		add	r3, r3, #1
 392              	.LVL33:
1976:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 393              		.loc 1 1976 5 is_stmt 1 view .LVU123
1976:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 394              		.loc 1 1976 8 is_stmt 0 view .LVU124
ARM GAS  /tmp/ccjeMhND.s 			page 44


 395 004c 0AD0     		beq	.L38
 396              	.LVL34:
 397              	.L33:
1970:src/xeq.c     **** 				if (isLOCAL(s)) {
 398              		.loc 1 1970 5 is_stmt 1 view .LVU125
1975:src/xeq.c     **** 				if (isHIDDEN(s))
 399              		.loc 1 1975 5 view .LVU126
1969:src/xeq.c     **** 				s = RetStk[sp];
 400              		.loc 1 1969 10 view .LVU127
 401 004e 002B     		cmp	r3, #0
 402 0050 DDDA     		bge	.L27
1970:src/xeq.c     **** 				if (isLOCAL(s)) {
 403              		.loc 1 1970 15 is_stmt 0 view .LVU128
 404 0052 31F8020F 		ldrh	r0, [r1, #2]!
 405              	.LVL35:
1971:src/xeq.c     **** 					LocalRegs = sp;
 406              		.loc 1 1971 5 is_stmt 1 view .LVU129
1971:src/xeq.c     **** 					LocalRegs = sp;
 407              		.loc 1 1971 9 is_stmt 0 view .LVU130
 408 0056 020B     		lsrs	r2, r0, #12
1971:src/xeq.c     **** 					LocalRegs = sp;
 409              		.loc 1 1971 8 view .LVU131
 410 0058 012A     		cmp	r2, #1
 411 005a F4D1     		bne	.L32
1972:src/xeq.c     **** 					break;
 412              		.loc 1 1972 6 is_stmt 1 view .LVU132
1972:src/xeq.c     **** 					break;
 413              		.loc 1 1972 16 is_stmt 0 view .LVU133
 414 005c A4F8DE37 		strh	r3, [r4, #2014]	@ movhi
1973:src/xeq.c     **** 				}
 415              		.loc 1 1973 6 is_stmt 1 view .LVU134
 416              	.LBE1262:
 417              		.loc 1 1981 1 is_stmt 0 view .LVU135
 418 0060 70BC     		pop	{r4, r5, r6}
 419              		.cfi_remember_state
 420              		.cfi_restore 6
 421              		.cfi_restore 5
 422              		.cfi_restore 4
 423              		.cfi_def_cfa_offset 0
 424 0062 7047     		bx	lr
 425              	.L38:
 426              		.cfi_restore_state
 427              	.LBB1263:
1977:src/xeq.c     **** 			}
 428              		.loc 1 1977 6 is_stmt 1 view .LVU136
1977:src/xeq.c     **** 			}
 429              		.loc 1 1977 12 is_stmt 0 view .LVU137
 430 0064 C0F30B00 		ubfx	r0, r0, #0, #12
 431              	.LVL36:
1977:src/xeq.c     **** 			}
 432              		.loc 1 1977 9 view .LVU138
 433 0068 0344     		add	r3, r3, r0
 434              	.LVL37:
1977:src/xeq.c     **** 			}
 435              		.loc 1 1977 9 view .LVU139
 436 006a E8E7     		b	.L31
 437              	.L40:
ARM GAS  /tmp/ccjeMhND.s 			page 45


 438              		.align	2
 439              	.L39:
 440 006c 00000000 		.word	main_ram
 441 0070 00000000 		.word	RetStk
 442              	.LBE1263:
 443              		.cfi_endproc
 444              	.LFE146:
 446              		.section	.text.flag_word,"ax",%progbits
 447              		.align	1
 448              		.p2align 2,,3
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 452              		.fpu fpv4-sp-d16
 454              	flag_word:
 455              	.LVL38:
 456              	.LFB193:
1982:src/xeq.c     **** 
1983:src/xeq.c     **** 
1984:src/xeq.c     **** /* Search from the given position for the specified numeric label.
1985:src/xeq.c     ****  */
1986:src/xeq.c     **** unsigned int find_opcode_from(unsigned int pc, const opcode l, const int flags) {
1987:src/xeq.c     **** 	unsigned short int top;
1988:src/xeq.c     **** 	int count;
1989:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
1990:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
1991:src/xeq.c     **** 
1992:src/xeq.c     **** 	count = 1 + find_section_bounds(pc, endp, &top);
1993:src/xeq.c     **** 	count -= top;
1994:src/xeq.c     **** 	while (count--) {
1995:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
1996:src/xeq.c     **** 		// If we don't find the label, we may search a little too far if many double word
1997:src/xeq.c     **** 		// instructions are in the code, but this doesn't do any harm.
1998:src/xeq.c     **** 		if (getprog(pc) == l)
1999:src/xeq.c     **** 			return pc;
2000:src/xeq.c     **** 		pc = do_inc(pc, endp);
2001:src/xeq.c     **** 	}
2002:src/xeq.c     **** 	if (errp)
2003:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2004:src/xeq.c     **** 	return 0;
2005:src/xeq.c     **** }
2006:src/xeq.c     **** 
2007:src/xeq.c     **** 
2008:src/xeq.c     **** unsigned int find_label_from(unsigned int pc, unsigned int arg, int flags) {
2009:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
2010:src/xeq.c     **** }
2011:src/xeq.c     **** 
2012:src/xeq.c     **** 
2013:src/xeq.c     **** 
2014:src/xeq.c     **** /* Handle a GTO/GSB instruction
2015:src/xeq.c     ****  */
2016:src/xeq.c     **** static void gsbgto(unsigned int pc, int gsb, unsigned int oldpc) {
2017:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
2018:src/xeq.c     **** 	raw_set_pc(pc);
2019:src/xeq.c     **** 	if (gsb) {
2020:src/xeq.c     **** 		if (!Running && !XromRunning) {
2021:src/xeq.c     **** 			// XEQ or hot key from keyboard
ARM GAS  /tmp/ccjeMhND.s 			page 46


2022:src/xeq.c     **** 			clrretstk();
2023:src/xeq.c     **** 			set_running_on();
2024:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
2025:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
2026:src/xeq.c     **** 				oldpc = pc;
2027:src/xeq.c     **** 		}
2028:src/xeq.c     **** 		if (-RetStkPtr >= (XromFlags.xIN ? XROM_RET_STACK_SIZE : RetStkSize)) {
2029:src/xeq.c     **** 			// Stack is full
2030:src/xeq.c     **** 			report_err(ERR_RAM_FULL);
2031:src/xeq.c     **** 			// clrretstk();
2032:src/xeq.c     **** 		}
2033:src/xeq.c     **** 		else {
2034:src/xeq.c     **** 			// Push PC on return stack
2035:src/xeq.c     **** 			RetStk[--RetStkPtr] = oldpc;
2036:src/xeq.c     **** 		}
2037:src/xeq.c     **** 	}
2038:src/xeq.c     **** }
2039:src/xeq.c     **** 
2040:src/xeq.c     **** // Handle a RTN
2041:src/xeq.c     **** static void do_rtn(int plus1) {
2042:src/xeq.c     **** 	unsigned short pc;
2043:src/xeq.c     **** 
2044:src/xeq.c     **** 	if (RetStkPtr >= 0) {
2045:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
2046:src/xeq.c     **** 		clrretstk();
2047:src/xeq.c     **** 		raw_set_pc(ProgBegin);
2048:src/xeq.c     **** 	}
2049:src/xeq.c     **** 	else {
2050:src/xeq.c     **** 		// Normal RTN within program
2051:src/xeq.c     **** 		// Pop any LOCALS off the stack, increment sp
2052:src/xeq.c     **** 		retstk_up();
2053:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
2054:src/xeq.c     **** 		raw_set_pc(pc);
2055:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
2056:src/xeq.c     **** 		if (plus1 && getprog(pc) != (OP_NIL | OP_POPUSR))
2057:src/xeq.c     **** 			if (incpc())
2058:src/xeq.c     **** 				decpc();
2059:src/xeq.c     **** 	}
2060:src/xeq.c     **** 	if (RetStkPtr == 0) {
2061:src/xeq.c     **** 		// RTN with empty stack stops
2062:src/xeq.c     **** 		set_running_off();
2063:src/xeq.c     **** 	}
2064:src/xeq.c     **** }
2065:src/xeq.c     **** 
2066:src/xeq.c     **** // RTN and RTN+1
2067:src/xeq.c     **** void op_rtn(enum nilop op) {
2068:src/xeq.c     **** 	if (! Running && ! XromRunning) {
2069:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
2070:src/xeq.c     **** 		clrretstk_pc();
2071:src/xeq.c     **** 	}
2072:src/xeq.c     **** 	else
2073:src/xeq.c     **** 		do_rtn(op == OP_RTNp1 ? 1 : 0);
2074:src/xeq.c     **** }
2075:src/xeq.c     **** 
2076:src/xeq.c     **** 
2077:src/xeq.c     **** // Called by XEQ, GTO and CAT browser
2078:src/xeq.c     **** void cmdgtocommon(int gsb, unsigned int pc) {
ARM GAS  /tmp/ccjeMhND.s 			page 47


2079:src/xeq.c     **** 	if (pc == 0)
2080:src/xeq.c     **** 		set_running_off();
2081:src/xeq.c     **** 	else
2082:src/xeq.c     **** 		gsbgto(pc, gsb, state_pc());
2083:src/xeq.c     **** }
2084:src/xeq.c     **** 
2085:src/xeq.c     **** 
2086:src/xeq.c     **** // Common part of XEQUSR and XEQ'...' from XROM
2087:src/xeq.c     **** // Command pushes 4 values on stack, needs to be followed by POPUSR
2088:src/xeq.c     **** static void usergsb_common(unsigned short int target) {
2089:src/xeq.c     **** 	const unsigned int pc = state_pc();
2090:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
2091:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
2092:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
2093:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
2094:src/xeq.c     **** 
2095:src/xeq.c     **** 	XromUserPc = 0;			     // Hide information irrelevant to user code
2096:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
2097:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
2098:src/xeq.c     **** 	if (! Running)
2099:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
2100:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
2101:src/xeq.c     **** }
2102:src/xeq.c     **** 
2103:src/xeq.c     **** 
2104:src/xeq.c     **** // XEQUSR
2105:src/xeq.c     **** // Command fills the stack and calls the user's code.
2106:src/xeq.c     **** // Needs to be followed by POPUSR
2107:src/xeq.c     **** void do_usergsb(enum nilop op) {
2108:src/xeq.c     **** 	usergsb_common(XromUserPc);
2109:src/xeq.c     ****         fill(OP_FILL);
2110:src/xeq.c     **** }
2111:src/xeq.c     **** 
2112:src/xeq.c     **** 
2113:src/xeq.c     **** // POPUSR
2114:src/xeq.c     **** void op_popusr(enum nilop op) {
2115:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
2116:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
2117:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
2118:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
2119:src/xeq.c     **** }
2120:src/xeq.c     **** 
2121:src/xeq.c     **** /* Tests if the user program is at the top level */
2122:src/xeq.c     **** void isTop(enum nilop op) {
2123:src/xeq.c     **** 	int top = 0;
2124:src/xeq.c     **** 
2125:src/xeq.c     **** 	if (Running) {
2126:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
2127:src/xeq.c     **** 	}
2128:src/xeq.c     **** 	fin_tst(top);
2129:src/xeq.c     **** }
2130:src/xeq.c     **** 
2131:src/xeq.c     **** 
2132:src/xeq.c     **** // LBL?
2133:src/xeq.c     **** void cmdlblp(unsigned int arg, enum rarg op) {
2134:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
2135:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 48


2136:src/xeq.c     **** 
2137:src/xeq.c     **** 
2138:src/xeq.c     **** void cmdgto(unsigned int arg, enum rarg op) {
2139:src/xeq.c     **** 	unsigned int lbl;
2140:src/xeq.c     **** 	if (is_xrom())
2141:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
2142:src/xeq.c     **** 	else
2143:src/xeq.c     **** 		lbl = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
2144:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
2145:src/xeq.c     **** }
2146:src/xeq.c     **** 
2147:src/xeq.c     **** unsigned int findmultilbl(const opcode o, int flags) {
2148:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
2149:src/xeq.c     **** 	unsigned int lbl;
2150:src/xeq.c     **** 
2151:src/xeq.c     **** 	lbl = find_opcode_from(0, dest, 0);					// RAM
2152:src/xeq.c     **** 	if (lbl == 0)
2153:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
2154:src/xeq.c     **** 	if (lbl == 0)
2155:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
2156:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
2157:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2158:src/xeq.c     **** 	return lbl;
2159:src/xeq.c     **** }
2160:src/xeq.c     **** 
2161:src/xeq.c     **** // LBL?'...'
2162:src/xeq.c     **** void cmdmultilblp(const opcode o, enum multiops mopr) {
2163:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
2164:src/xeq.c     **** }
2165:src/xeq.c     **** 
2166:src/xeq.c     **** void cmdmultigto(const opcode o, enum multiops mopr) {
2167:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
2168:src/xeq.c     **** 		// In XROM the command behaves differently!
2169:src/xeq.c     **** 		unsigned short int target = findmultilbl(o, 0);
2170:src/xeq.c     **** 		if (target != 0)
2171:src/xeq.c     **** 			usergsb_common(target); 
2172:src/xeq.c     **** 		else
2173:src/xeq.c     **** 			incpc();
2174:src/xeq.c     **** 	}
2175:src/xeq.c     **** 	else {
2176:src/xeq.c     **** 		cmdgtocommon(mopr != DBL_GTO, findmultilbl(o, FIND_OP_ERROR));
2177:src/xeq.c     **** 	}
2178:src/xeq.c     **** }
2179:src/xeq.c     **** 
2180:src/xeq.c     **** static void branchtoalpha(int is_gsb, char buf[]) {
2181:src/xeq.c     **** 	unsigned int op;
2182:src/xeq.c     **** 
2183:src/xeq.c     **** 	op = OP_DBL + (DBL_LBL << DBL_SHIFT);
2184:src/xeq.c     **** 	op |= buf[0] & 0xff;
2185:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
2186:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
2187:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
2188:src/xeq.c     **** }
2189:src/xeq.c     **** 
2190:src/xeq.c     **** void cmdalphagto(unsigned int arg, enum rarg op) {
2191:src/xeq.c     **** 	char buf[14];
2192:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 49


2193:src/xeq.c     **** 	xset(buf, '\0', sizeof(buf));
2194:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
2195:src/xeq.c     **** }
2196:src/xeq.c     **** 
2197:src/xeq.c     **** static void do_branchalpha(int is_gsb) {
2198:src/xeq.c     **** 	char buf[4];
2199:src/xeq.c     **** 
2200:src/xeq.c     **** 	xcopy(buf, Alpha, 3);
2201:src/xeq.c     **** 	buf[3] = '\0';
2202:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
2203:src/xeq.c     **** }
2204:src/xeq.c     **** 
2205:src/xeq.c     **** void op_gtoalpha(enum nilop op) {
2206:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
2207:src/xeq.c     **** }
2208:src/xeq.c     **** 
2209:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2210:src/xeq.c     **** int get_dispmode_digs(int *pdigs)
2211:src/xeq.c     **** {
2212:src/xeq.c     **** 	int dispmode = UState.dispmode;
2213:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
2214:src/xeq.c     **** 
2215:src/xeq.c     **** 	if (dispdigs >= 12) {
2216:src/xeq.c     **** 		dispdigs -= 12;
2217:src/xeq.c     **** 		dispmode += 4;
2218:src/xeq.c     **** 		if (dispmode >= 6) {
2219:src/xeq.c     **** 			dispmode -= 2;
2220:src/xeq.c     **** 			dispdigs += 4;
2221:src/xeq.c     **** 		}
2222:src/xeq.c     **** 	}
2223:src/xeq.c     **** 	*pdigs = dispdigs;
2224:src/xeq.c     **** 	return dispmode;
2225:src/xeq.c     **** }
2226:src/xeq.c     **** 
2227:src/xeq.c     **** void set_dispmode_digs(int dispmode, int dispdigs)
2228:src/xeq.c     **** {
2229:src/xeq.c     **** 	if (dispmode >= 4) {
2230:src/xeq.c     **** 		dispmode -= 4;
2231:src/xeq.c     **** 		dispdigs += 12;
2232:src/xeq.c     **** 		if (dispdigs >= 16) {
2233:src/xeq.c     **** 			dispdigs -= 4;
2234:src/xeq.c     **** 			dispmode += 2;
2235:src/xeq.c     **** 		}
2236:src/xeq.c     **** 	}
2237:src/xeq.c     **** 	UState.dispmode = dispmode;
2238:src/xeq.c     **** 	UState.dispdigs = dispdigs;
2239:src/xeq.c     **** }
2240:src/xeq.c     **** #endif
2241:src/xeq.c     **** 
2242:src/xeq.c     **** void cmddisp(unsigned int arg, enum rarg op) {
2243:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2244:src/xeq.c     **** 	int dispdigs;
2245:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
2246:src/xeq.c     **** #ifdef DM42
2247:src/xeq.c     **** 	switch (op) {
2248:src/xeq.c     **** 	case RARG_STD:
2249:src/xeq.c     **** 	  dispmode = MODE_STD;
ARM GAS  /tmp/ccjeMhND.s 			page 50


2250:src/xeq.c     **** 	  break;
2251:src/xeq.c     **** 	case RARG_FIX:
2252:src/xeq.c     **** 	  dispmode = MODE_FIX;
2253:src/xeq.c     **** 	  break;
2254:src/xeq.c     **** 	case RARG_SCI:
2255:src/xeq.c     **** 	  dispmode = MODE_SCI;
2256:src/xeq.c     **** 	  break;
2257:src/xeq.c     **** 	case RARG_ENG:
2258:src/xeq.c     **** 	  dispmode = MODE_ENG;
2259:src/xeq.c     **** 	  break;
2260:src/xeq.c     **** 	case RARG_SIG:
2261:src/xeq.c     **** 	  dispmode = MODE_SIG;
2262:src/xeq.c     **** 	  break;
2263:src/xeq.c     **** 	case RARG_SIG0:
2264:src/xeq.c     **** 	  dispmode = MODE_SIG0;
2265:src/xeq.c     **** 	  break;
2266:src/xeq.c     **** 	default:;
2267:src/xeq.c     **** 	}
2268:src/xeq.c     **** 	if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2269:src/xeq.c     **** 	  report_err(ERR_RANGE);
2270:src/xeq.c     **** 	  return;
2271:src/xeq.c     **** 	}
2272:src/xeq.c     **** #else	
2273:src/xeq.c     **** 	if (op != RARG_DISP)
2274:src/xeq.c     **** 		dispmode = (op - RARG_STD) + MODE_STD;
2275:src/xeq.c     **** 	else if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2276:src/xeq.c     **** 		report_err(ERR_RANGE);
2277:src/xeq.c     **** 		return;
2278:src/xeq.c     **** 	}
2279:src/xeq.c     **** #endif
2280:src/xeq.c     **** 	set_dispmode_digs(dispmode, arg);
2281:src/xeq.c     **** #else
2282:src/xeq.c     **** 	UState.dispdigs = arg;
2283:src/xeq.c     **** 	if (op != RARG_DISP)
2284:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
2285:src/xeq.c     **** #endif
2286:src/xeq.c     **** 	op_float(OP_FLOAT);
2287:src/xeq.c     **** }
2288:src/xeq.c     **** 
2289:src/xeq.c     **** 
2290:src/xeq.c     **** /* Metric / Imperial conversion code */
2291:src/xeq.c     **** decNumber *convC2F(decNumber *r, const decNumber *x) {
2292:src/xeq.c     **** 	decNumber s;
2293:src/xeq.c     **** 
2294:src/xeq.c     **** 	dn_multiply(&s, x, &const_9on5);
2295:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
2296:src/xeq.c     **** }
2297:src/xeq.c     **** 
2298:src/xeq.c     **** decNumber *convF2C(decNumber *r, const decNumber *x) {
2299:src/xeq.c     **** 	decNumber s;
2300:src/xeq.c     **** 
2301:src/xeq.c     **** 	dn_subtract(&s, x, &const_32);
2302:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
2303:src/xeq.c     **** }
2304:src/xeq.c     **** 
2305:src/xeq.c     **** decNumber *convDB2AR(decNumber *r, const decNumber *x) {
2306:src/xeq.c     **** 	decNumber t;
ARM GAS  /tmp/ccjeMhND.s 			page 51


2307:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
2308:src/xeq.c     **** 	return decNumberPow10(r, &t);
2309:src/xeq.c     **** }
2310:src/xeq.c     **** 
2311:src/xeq.c     **** decNumber *convAR2DB(decNumber *r, const decNumber *x) {
2312:src/xeq.c     **** 	decNumber t;
2313:src/xeq.c     **** 	dn_log10(&t, x);
2314:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
2315:src/xeq.c     **** }
2316:src/xeq.c     **** 
2317:src/xeq.c     **** decNumber *convDB2PR(decNumber *r, const decNumber *x) {
2318:src/xeq.c     **** 	decNumber t;
2319:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
2320:src/xeq.c     **** 	return decNumberPow10(r, &t);
2321:src/xeq.c     **** }
2322:src/xeq.c     **** 
2323:src/xeq.c     **** decNumber *convPR2DB(decNumber *r, const decNumber *x) {
2324:src/xeq.c     **** 	decNumber t;
2325:src/xeq.c     **** 	dn_log10(&t, x);
2326:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
2327:src/xeq.c     **** }
2328:src/xeq.c     **** 
2329:src/xeq.c     **** /* Scale conversions */
2330:src/xeq.c     **** void do_conv(decNumber *r, unsigned int arg, const decNumber *x) {
2331:src/xeq.c     **** 	decNumber m;
2332:src/xeq.c     **** 	const unsigned int conv = arg / 2;
2333:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
2334:src/xeq.c     **** 
2335:src/xeq.c     **** 	if (conv > NUM_CONSTS_CONV) {
2336:src/xeq.c     **** 		decNumberCopy(r, x);
2337:src/xeq.c     **** 		return;
2338:src/xeq.c     **** 	}
2339:src/xeq.c     **** 
2340:src/xeq.c     **** 	decimal64ToNumber(&CONSTANT_CONV(conv), &m);
2341:src/xeq.c     **** 
2342:src/xeq.c     **** 	if (dirn == 0)		// metric to imperial
2343:src/xeq.c     **** 		dn_divide(r, x, &m);
2344:src/xeq.c     **** 	else			// imperial to metric
2345:src/xeq.c     **** 		dn_multiply(r, x, &m);
2346:src/xeq.c     **** }
2347:src/xeq.c     **** 
2348:src/xeq.c     **** void cmdconv(unsigned int arg, enum rarg op) {
2349:src/xeq.c     **** 	decNumber x, r;
2350:src/xeq.c     **** 
2351:src/xeq.c     **** 	if (is_intmode())
2352:src/xeq.c     **** 		return;
2353:src/xeq.c     **** 
2354:src/xeq.c     **** 	getX(&x);
2355:src/xeq.c     **** 	do_conv(&r, arg, &x);
2356:src/xeq.c     **** 	setlastX();
2357:src/xeq.c     **** 	setX(&r);
2358:src/xeq.c     **** }
2359:src/xeq.c     **** 
2360:src/xeq.c     **** /*  Finish up a test -- if the value is non-zero, the test passes.
2361:src/xeq.c     ****  *  If it is zero, the test fails.
2362:src/xeq.c     ****  */
2363:src/xeq.c     **** void fin_tst(const int a) {
ARM GAS  /tmp/ccjeMhND.s 			page 52


2364:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
2365:src/xeq.c     **** 	if (Running || XromRunning) {
2366:src/xeq.c     **** 		if (! a && incpc())
2367:src/xeq.c     **** 			decpc();
2368:src/xeq.c     **** 	}
2369:src/xeq.c     **** 	else
2370:src/xeq.c     **** 		DispMsg = msg;
2371:src/xeq.c     **** #ifdef INFRARED
2372:src/xeq.c     **** 	if (Tracing) {
2373:src/xeq.c     **** 		print_justified( msg );
2374:src/xeq.c     **** 		Tracing = 0;
2375:src/xeq.c     **** 	}
2376:src/xeq.c     **** #endif
2377:src/xeq.c     **** }
2378:src/xeq.c     **** 
2379:src/xeq.c     **** 
2380:src/xeq.c     **** /* Skip a number of instructions forwards */
2381:src/xeq.c     **** void cmdskip(unsigned int arg, enum rarg op) {
2382:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2383:src/xeq.c     **** 	unsigned int pc;
2384:src/xeq.c     **** 
2385:src/xeq.c     **** 	if (op == RARG_CASE) {
2386:src/xeq.c     **** 		int sgn;
2387:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
2388:src/xeq.c     **** 		if (sgn || arg >= 100) {
2389:src/xeq.c     **** 			report_err(ERR_RANGE);
2390:src/xeq.c     **** 			return;
2391:src/xeq.c     **** 		}
2392:src/xeq.c     **** 	}
2393:src/xeq.c     **** 
2394:src/xeq.c     **** 	if (isXROM(origpc))
2395:src/xeq.c     **** 		pc = origpc + arg;
2396:src/xeq.c     **** 	else {
2397:src/xeq.c     **** 		while (arg-- && !incpc());
2398:src/xeq.c     **** 		if (PcWrapped) {
2399:src/xeq.c     **** 			report_err(ERR_RANGE);
2400:src/xeq.c     **** 		}
2401:src/xeq.c     **** 		pc = state_pc();
2402:src/xeq.c     **** 	}
2403:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSF, origpc);
2404:src/xeq.c     **** }
2405:src/xeq.c     **** 
2406:src/xeq.c     **** /* Skip backwards */
2407:src/xeq.c     **** void cmdback(unsigned int arg, enum rarg op) {
2408:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2409:src/xeq.c     **** 	unsigned int pc = origpc;
2410:src/xeq.c     **** 
2411:src/xeq.c     **** 	if (isXROM(origpc))
2412:src/xeq.c     **** 		pc -= arg + 1;
2413:src/xeq.c     ****         else if (arg) {
2414:src/xeq.c     **** 		if ( Running ) {
2415:src/xeq.c     **** 			// Handles the case properly that we are on last step
2416:src/xeq.c     **** 			pc = do_dec(pc, 1);
2417:src/xeq.c     **** 		}
2418:src/xeq.c     **** 		do {
2419:src/xeq.c     **** 			pc = do_dec(pc, 1);
2420:src/xeq.c     **** 		} while (--arg && !PcWrapped);
ARM GAS  /tmp/ccjeMhND.s 			page 53


2421:src/xeq.c     **** 		if (PcWrapped) {
2422:src/xeq.c     **** 			report_err(ERR_RANGE);
2423:src/xeq.c     **** 			return;
2424:src/xeq.c     **** 		}
2425:src/xeq.c     **** 	}
2426:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSB, origpc);
2427:src/xeq.c     **** }
2428:src/xeq.c     **** 
2429:src/xeq.c     **** 
2430:src/xeq.c     **** /* Append a character to the command line
2431:src/xeq.c     ****  */
2432:src/xeq.c     **** static void append_cmdline(char c) {
2433:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
2434:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
2435:src/xeq.c     **** }
2436:src/xeq.c     **** 
2437:src/xeq.c     **** /* Make sure exponent stays within allowed limits.
2438:src/xeq.c     ****  * was_digit_entered: 0: sign was changed
2439:src/xeq.c     ****  *                    1: new digit was entered
2440:src/xeq.c     ****  */
2441:src/xeq.c     **** static void exponent_adjusted(int was_digit_entered)
2442:src/xeq.c     **** {
2443:src/xeq.c     **** 	const int dbl = is_dblmode();
2444:src/xeq.c     **** 	int i;
2445:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
2446:src/xeq.c     **** 	const int neg_type_dc = get_reg_n_int_sgn(0, &i);
2447:src/xeq.c     **** #else
2448:src/xeq.c     **** 	const int neg_type_dc = SP_NEG_EXP_ENTRY_TYPE_DC;
2449:src/xeq.c     **** #endif
2450:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DC == -1
2451:src/xeq.c     **** 	const int neg_lim_dc = get_reg_n_int_sgn(1, &i);
2452:src/xeq.c     **** #else
2453:src/xeq.c     **** 	const int neg_lim_dc = SP_NEG_EXP_ENTRY_LIMIT_DC;
2454:src/xeq.c     **** #endif
2455:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DS == -1
2456:src/xeq.c     **** 	const int neg_type_ds = get_reg_n_int_sgn(2, &i);
2457:src/xeq.c     **** #else
2458:src/xeq.c     **** 	const int neg_type_ds = SP_NEG_EXP_ENTRY_TYPE_DS;
2459:src/xeq.c     **** #endif
2460:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DS == -1
2461:src/xeq.c     **** 	const int neg_lim_ds = get_reg_n_int_sgn(3, &i);
2462:src/xeq.c     **** #else
2463:src/xeq.c     **** 	const int neg_lim_ds = SP_NEG_EXP_ENTRY_LIMIT_DS;
2464:src/xeq.c     **** #endif
2465:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DC == -1
2466:src/xeq.c     **** 	const int pos_type_dc = get_reg_n_int_sgn(4, &i);
2467:src/xeq.c     **** #else
2468:src/xeq.c     **** 	const int pos_type_dc = SP_POS_EXP_ENTRY_TYPE_DC;
2469:src/xeq.c     **** #endif
2470:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DC == -1
2471:src/xeq.c     **** 	const int pos_lim_dc = get_reg_n_int_sgn(5, &i);
2472:src/xeq.c     **** #else
2473:src/xeq.c     **** 	const int pos_lim_dc = SP_POS_EXP_ENTRY_LIMIT_DC;
2474:src/xeq.c     **** #endif
2475:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DS == -1
2476:src/xeq.c     **** 	const int pos_type_ds = get_reg_n_int_sgn(6, &i);
2477:src/xeq.c     **** #else
ARM GAS  /tmp/ccjeMhND.s 			page 54


2478:src/xeq.c     **** 	const int pos_type_ds = SP_POS_EXP_ENTRY_TYPE_DS;
2479:src/xeq.c     **** #endif
2480:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DS == -1
2481:src/xeq.c     **** 	const int pos_lim_ds = get_reg_n_int_sgn(7, &i);
2482:src/xeq.c     **** #else
2483:src/xeq.c     **** 	const int pos_lim_ds = SP_POS_EXP_ENTRY_LIMIT_DS;
2484:src/xeq.c     **** #endif
2485:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1
2486:src/xeq.c     **** 	const int exp_chs_dc = get_reg_n_int_sgn(8, &i);
2487:src/xeq.c     **** #else
2488:src/xeq.c     **** 	const int exp_chs_dc = SP_EXP_ENTRY_CHS_DC;
2489:src/xeq.c     **** #endif
2490:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DS == -1
2491:src/xeq.c     **** 	const int exp_chs_ds = get_reg_n_int_sgn(9, &i);
2492:src/xeq.c     **** #else
2493:src/xeq.c     **** 	const int exp_chs_ds = SP_EXP_ENTRY_CHS_DS;
2494:src/xeq.c     **** #endif
2495:src/xeq.c     **** 	const int dp_neg_type_dc = DP_NEG_EXP_ENTRY_TYPE_DC;
2496:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
2497:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
2498:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
2499:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
2500:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
2501:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
2502:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
2503:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
2504:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
2505:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2506:src/xeq.c     **** 	const int large_exp_entry = 1;
2507:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
2508:src/xeq.c     **** #else
2509:src/xeq.c     **** 	const int large_exp_entry = 0;
2510:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex + 1];
2511:src/xeq.c     **** #endif
2512:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1 || SP_NEG_EXP_ENTRY_TYPE_DC != SP_NEG_EXP_ENTRY_TYPE_DS \
2513:src/xeq.c     ****     || SP_NEG_EXP_ENTRY_LIMIT_DC == -1 || SP_NEG_EXP_ENTRY_LIMIT_DC != SP_NEG_EXP_ENTRY_LIMIT_DS \
2514:src/xeq.c     ****     || SP_POS_EXP_ENTRY_TYPE_DC == -1 || SP_POS_EXP_ENTRY_TYPE_DC != SP_POS_EXP_ENTRY_TYPE_DS \
2515:src/xeq.c     ****     || SP_POS_EXP_ENTRY_LIMIT_DC == -1 || SP_POS_EXP_ENTRY_LIMIT_DC != SP_POS_EXP_ENTRY_LIMIT_DS \
2516:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC != SP_EXP_ENTRY_CHS_DS \
2517:src/xeq.c     ****     || SP_EXP_ENTRY_ZERO_DC == -1 || SP_EXP_ENTRY_ZERO_DC != SP_EXP_ENTRY_ZERO_DS \
2518:src/xeq.c     ****     || ((DP_NEG_EXP_ENTRY_TYPE_DC != DP_NEG_EXP_ENTRY_TYPE_DS \
2519:src/xeq.c     ****          || DP_NEG_EXP_ENTRY_LIMIT_DC != DP_NEG_EXP_ENTRY_LIMIT_DS \
2520:src/xeq.c     ****          || DP_POS_EXP_ENTRY_TYPE_DC != DP_POS_EXP_ENTRY_TYPE_DS \
2521:src/xeq.c     ****          || DP_POS_EXP_ENTRY_LIMIT_DC != DP_POS_EXP_ENTRY_LIMIT_DS \
2522:src/xeq.c     ****          || DP_EXP_ENTRY_CHS_DC != DP_EXP_ENTRY_CHS_DS \
2523:src/xeq.c     ****          || DP_EXP_ENTRY_ZERO_DC != DP_EXP_ENTRY_ZERO_DS) && defined(LARGE_EXPONENT_ENTRY))
2524:src/xeq.c     **** 	const int flag_D = get_user_flag(NAN_FLAG);
2525:src/xeq.c     **** #else
2526:src/xeq.c     **** 	const int flag_D = 0;
2527:src/xeq.c     **** #endif
2528:src/xeq.c     **** #ifndef SHIFT_EXPONENT
2529:src/xeq.c     **** 	int negative;
2530:src/xeq.c     **** #endif
2531:src/xeq.c     **** 	int emax;
2532:src/xeq.c     **** 
2533:src/xeq.c     **** 	/* Figure out the range limit for the exponent */
2534:src/xeq.c     **** 	if (!large_exp_entry && dbl) {
ARM GAS  /tmp/ccjeMhND.s 			page 55


2535:src/xeq.c     **** 		emax = 999;
2536:src/xeq.c     **** 	}
2537:src/xeq.c     **** 	else {
2538:src/xeq.c     **** 		int emax_plus, emax_minus;
2539:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
2540:src/xeq.c     **** 
2541:src/xeq.c     **** 		if ((neg_type_dc >= 1 && neg_type_dc <= 9)
2542:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
2543:src/xeq.c     **** 		    || (pos_type_dc >= 1 && pos_type_dc <= 3)
2544:src/xeq.c     **** 		    || (pos_type_ds >= 1 && pos_type_ds <= 3)
2545:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2546:src/xeq.c     **** 		    || (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9)
2547:src/xeq.c     **** 		    || (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9)
2548:src/xeq.c     **** 		    || (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2549:src/xeq.c     **** 		    || (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2550:src/xeq.c     **** #endif
2551:src/xeq.c     **** 		   ) {
2552:src/xeq.c     **** 			// Exponent limits have to be calculated at run-time
2553:src/xeq.c     **** 
2554:src/xeq.c     **** 			for (i = 0; i < CmdLineLength; ++i) {
2555:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2556:src/xeq.c     **** 				if (Cmdline[i] == 'E' || Cmdline[i] == 'D')
2557:src/xeq.c     **** #else
2558:src/xeq.c     **** 				if (Cmdline[i] == 'E')
2559:src/xeq.c     **** #endif
2560:src/xeq.c     **** 					break;
2561:src/xeq.c     **** 				else if (Cmdline[i] == '.')
2562:src/xeq.c     **** 					dot = i;
2563:src/xeq.c     **** 				else if (Cmdline[i] != '0') {
2564:src/xeq.c     **** 					last_nonzero = i - (dot != 0);
2565:src/xeq.c     **** 					if (first_nonzero < 0)
2566:src/xeq.c     **** 						first_nonzero = i - (dot != 0);
2567:src/xeq.c     **** 				}
2568:src/xeq.c     **** 			}
2569:src/xeq.c     **** 			if (first_nonzero < 0) { // Mantissa is zero.
2570:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DC == -1
2571:src/xeq.c     **** 				const int zero_dc = (get_user_flag(1) << 1) | get_user_flag(0);
2572:src/xeq.c     **** #else
2573:src/xeq.c     **** 				const int zero_dc = SP_EXP_ENTRY_ZERO_DC;
2574:src/xeq.c     **** #endif
2575:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DS == -1
2576:src/xeq.c     **** 				const int zero_ds = (get_user_flag(3) << 1) | get_user_flag(2);
2577:src/xeq.c     **** #else
2578:src/xeq.c     **** 				const int zero_ds = SP_EXP_ENTRY_ZERO_DS;
2579:src/xeq.c     **** #endif
2580:src/xeq.c     **** 				const int dp_zero_dc = DP_EXP_ENTRY_ZERO_DC;
2581:src/xeq.c     **** 				const int dp_zero_ds = DP_EXP_ENTRY_ZERO_DS;
2582:src/xeq.c     **** 
2583:src/xeq.c     **** 				if (large_exp_entry && dbl) {
2584:src/xeq.c     **** 					if ((dp_zero_dc == 1 && dp_zero_ds == 1)
2585:src/xeq.c     **** 					    || (dp_zero_dc == 1 && !flag_D)
2586:src/xeq.c     **** 					    || (dp_zero_ds == 1 && flag_D)) {
2587:src/xeq.c     **** 						// Double precision: Allow any exponent
2588:src/xeq.c     **** 						// within configured limits if any.
2589:src/xeq.c     **** 						emax_plus = emax_minus = 9999;
2590:src/xeq.c     **** 						goto check_limits;
2591:src/xeq.c     **** 					}
ARM GAS  /tmp/ccjeMhND.s 			page 56


2592:src/xeq.c     **** 					else if ((dp_zero_dc == 2 && dp_zero_ds == 2)
2593:src/xeq.c     **** 					         || (dp_zero_dc == 2 && !flag_D)
2594:src/xeq.c     **** 					         || (dp_zero_ds == 2 && flag_D)) {
2595:src/xeq.c     **** 						// Double precision: Allow any exponent
2596:src/xeq.c     **** 						// even outside of configured limits.
2597:src/xeq.c     **** 						emax = 9999;
2598:src/xeq.c     **** 						goto do_not_check_limits;
2599:src/xeq.c     **** 					}
2600:src/xeq.c     **** 					goto zero_has_one_significant_digit;
2601:src/xeq.c     **** 				}
2602:src/xeq.c     **** 				if ((zero_dc == 1 && zero_ds == 1)
2603:src/xeq.c     **** 				    || (zero_dc == 1 && !flag_D)
2604:src/xeq.c     **** 				    || (zero_ds == 1 && flag_D)) {
2605:src/xeq.c     **** 					// Allow any exponent within configured limits if any.
2606:src/xeq.c     **** 					emax_plus = emax_minus = 999;
2607:src/xeq.c     **** 					goto check_limits;
2608:src/xeq.c     **** 				}
2609:src/xeq.c     **** 				else if ((zero_dc == 2 && zero_ds == 2)
2610:src/xeq.c     **** 				         || (zero_dc == 2 && !flag_D)
2611:src/xeq.c     **** 				         || (zero_ds == 2 && flag_D)) {
2612:src/xeq.c     **** 					// Allow any exponent even outside of configured limits.
2613:src/xeq.c     **** 					emax = 999;
2614:src/xeq.c     **** 					goto do_not_check_limits;
2615:src/xeq.c     **** 				}
2616:src/xeq.c     **** 				else {
2617:src/xeq.c     **** zero_has_one_significant_digit:
2618:src/xeq.c     **** 					// Treat zero as if it had one significant digit.
2619:src/xeq.c     **** 					first_nonzero = 0;
2620:src/xeq.c     **** 					dot = 1;
2621:src/xeq.c     **** 				}
2622:src/xeq.c     **** 			}
2623:src/xeq.c     **** 			else if (dot == 0)
2624:src/xeq.c     **** 				dot = i;
2625:src/xeq.c     **** 		}
2626:src/xeq.c     **** 
2627:src/xeq.c     **** 		if (large_exp_entry && dbl) {
2628:src/xeq.c     **** 			// Double precision mode
2629:src/xeq.c     **** 			if (flag_D && dp_neg_type_dc != dp_neg_type_ds) {
2630:src/xeq.c     **** 				if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 3) {
2631:src/xeq.c     **** 					// Don't allow denormal numbers
2632:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2633:src/xeq.c     **** 				}
2634:src/xeq.c     **** 				else if (dp_neg_type_ds >= 4 && dp_neg_type_ds <= 6) {
2635:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2636:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2637:src/xeq.c     **** 				}
2638:src/xeq.c     **** 				else if (dp_neg_type_ds >= 7 && dp_neg_type_ds <= 9) {
2639:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2640:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2641:src/xeq.c     **** 				}
2642:src/xeq.c     **** 				else {
2643:src/xeq.c     **** 					// Fixed limit
2644:src/xeq.c     **** 					emax_minus = dp_neg_lim_ds;
2645:src/xeq.c     **** 				}
2646:src/xeq.c     **** 			}
2647:src/xeq.c     **** 			else {
2648:src/xeq.c     **** 				if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 3) {
ARM GAS  /tmp/ccjeMhND.s 			page 57


2649:src/xeq.c     **** 					// Don't allow denormal numbers
2650:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2651:src/xeq.c     **** 				}
2652:src/xeq.c     **** 				else if (dp_neg_type_dc >= 4 && dp_neg_type_dc <= 6) {
2653:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2654:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2655:src/xeq.c     **** 				}
2656:src/xeq.c     **** 				else if (dp_neg_type_dc >= 7 && dp_neg_type_dc <= 9) {
2657:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2658:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2659:src/xeq.c     **** 				}
2660:src/xeq.c     **** 				else {
2661:src/xeq.c     **** 					// Fixed limit
2662:src/xeq.c     **** 					emax_minus = dp_neg_lim_dc;
2663:src/xeq.c     **** 				}
2664:src/xeq.c     **** 			}
2665:src/xeq.c     **** 
2666:src/xeq.c     **** 			if (flag_D && dp_pos_type_dc != dp_pos_type_ds) {
2667:src/xeq.c     **** 				if (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2668:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2669:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2670:src/xeq.c     **** 				else
2671:src/xeq.c     **** 					// Fixed limit
2672:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2673:src/xeq.c     **** 			}
2674:src/xeq.c     **** 			else {
2675:src/xeq.c     **** 				if (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2676:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2677:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2678:src/xeq.c     **** 				else
2679:src/xeq.c     **** 					// Fixed limit
2680:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2681:src/xeq.c     **** 			}
2682:src/xeq.c     **** 
2683:src/xeq.c     **** 			goto check_limits;
2684:src/xeq.c     **** 		}
2685:src/xeq.c     **** 
2686:src/xeq.c     **** 		if (flag_D && neg_type_dc != neg_type_ds) {
2687:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 3) {
2688:src/xeq.c     **** 				// Don't allow denormal numbers
2689:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2690:src/xeq.c     **** 			}
2691:src/xeq.c     **** 			else if (neg_type_ds >= 4 && neg_type_ds <= 6) {
2692:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2693:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2694:src/xeq.c     **** 			}
2695:src/xeq.c     **** 			else if (neg_type_ds >= 7 && neg_type_ds <= 9) {
2696:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2697:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2698:src/xeq.c     **** 			}
2699:src/xeq.c     **** 			else {
2700:src/xeq.c     **** 				// Fixed limit
2701:src/xeq.c     **** 				emax_minus = neg_lim_ds;
2702:src/xeq.c     **** 			}
2703:src/xeq.c     **** 		}
2704:src/xeq.c     **** 		else {
2705:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 3) {
ARM GAS  /tmp/ccjeMhND.s 			page 58


2706:src/xeq.c     **** 				// Don't allow denormal numbers
2707:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2708:src/xeq.c     **** 			}
2709:src/xeq.c     **** 			else if (neg_type_dc >= 4 && neg_type_dc <= 6) {
2710:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2711:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2712:src/xeq.c     **** 			}
2713:src/xeq.c     **** 			else if (neg_type_dc >= 7 && neg_type_dc <= 9) {
2714:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2715:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2716:src/xeq.c     **** 			}
2717:src/xeq.c     **** 			else {
2718:src/xeq.c     **** 				// Fixed limit
2719:src/xeq.c     **** 				emax_minus = neg_lim_dc;
2720:src/xeq.c     **** 			}
2721:src/xeq.c     **** 		}
2722:src/xeq.c     **** 
2723:src/xeq.c     **** 		if (flag_D && pos_type_dc != pos_type_ds) {
2724:src/xeq.c     **** 			if (pos_type_ds >= 1 && pos_type_ds <= 3)
2725:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2726:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2727:src/xeq.c     **** 			else
2728:src/xeq.c     **** 				// Fixed limit
2729:src/xeq.c     **** 				emax_plus = pos_lim_ds;
2730:src/xeq.c     **** 		}
2731:src/xeq.c     **** 		else {
2732:src/xeq.c     **** 			if (pos_type_dc >= 1 && pos_type_dc <= 3)
2733:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2734:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2735:src/xeq.c     **** 			else
2736:src/xeq.c     **** 				// Fixed limit
2737:src/xeq.c     **** 				emax_plus = pos_lim_dc;
2738:src/xeq.c     **** 		}
2739:src/xeq.c     **** 
2740:src/xeq.c     **** check_limits:
2741:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2742:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
2743:src/xeq.c     **** 		    && (dp_neg_type_ds != neg_type_ds || dp_neg_lim_ds != neg_lim_ds)) {
2744:src/xeq.c     **** 			if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9) {
2745:src/xeq.c     **** 				if (dp_neg_type_ds % 3 == 2) { // low limit
2746:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_ds)
2747:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2748:src/xeq.c     **** 				}
2749:src/xeq.c     **** 				else if (dp_neg_type_ds % 3 == 0) { // high limit
2750:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_ds)
2751:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2752:src/xeq.c     **** 				}
2753:src/xeq.c     **** 			}
2754:src/xeq.c     **** 			if (dp_neg_lim_ds < 0 && emax_minus < 0)
2755:src/xeq.c     **** 				emax_minus = 0;
2756:src/xeq.c     **** 		}
2757:src/xeq.c     **** 		else if (large_exp_entry && dbl
2758:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
2759:src/xeq.c     **** 		                         && dp_neg_lim_dc == dp_neg_lim_ds))
2760:src/xeq.c     **** 		         && (dp_neg_type_dc != neg_type_dc || dp_neg_lim_dc != neg_lim_dc)) {
2761:src/xeq.c     **** 			if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9) {
2762:src/xeq.c     **** 				if (dp_neg_type_dc % 3 == 2) { // low limit
ARM GAS  /tmp/ccjeMhND.s 			page 59


2763:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_dc)
2764:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2765:src/xeq.c     **** 				}
2766:src/xeq.c     **** 				else if (dp_neg_type_dc % 3 == 0) { // high limit
2767:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_dc)
2768:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2769:src/xeq.c     **** 				}
2770:src/xeq.c     **** 			}
2771:src/xeq.c     **** 			if (dp_neg_lim_dc < 0 && emax_minus < 0)
2772:src/xeq.c     **** 				emax_minus = 0;
2773:src/xeq.c     **** 		}
2774:src/xeq.c     **** 		else if (flag_D && (neg_type_dc != neg_type_ds || neg_lim_dc != neg_lim_ds)) {
2775:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 9) {
2776:src/xeq.c     **** 				if (neg_type_ds % 3 == 2) { // low limit
2777:src/xeq.c     **** 					if (emax_minus > neg_lim_ds)
2778:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2779:src/xeq.c     **** 				}
2780:src/xeq.c     **** 				else if (neg_type_ds % 3 == 0) { // high limit
2781:src/xeq.c     **** 					if (emax_minus < neg_lim_ds)
2782:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2783:src/xeq.c     **** 				}
2784:src/xeq.c     **** 			}
2785:src/xeq.c     **** 			if (neg_lim_ds < 0 && emax_minus < 0)
2786:src/xeq.c     **** 				emax_minus = 0;
2787:src/xeq.c     **** 		}
2788:src/xeq.c     **** 		else {
2789:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 9) {
2790:src/xeq.c     **** 				if (neg_type_dc % 3 == 2) { // low limit
2791:src/xeq.c     **** 					if (emax_minus > neg_lim_dc)
2792:src/xeq.c     **** 						emax_minus = neg_lim_dc;
2793:src/xeq.c     **** 				}
2794:src/xeq.c     **** 				else if (neg_type_dc % 3 == 0) { // high limit
2795:src/xeq.c     **** 					if (emax_minus < neg_lim_dc)
2796:src/xeq.c     **** 						emax_minus = neg_lim_dc;
2797:src/xeq.c     **** 				}
2798:src/xeq.c     **** 			}
2799:src/xeq.c     **** 			if (neg_lim_dc < 0 && emax_minus < 0)
2800:src/xeq.c     **** 				emax_minus = 0;
2801:src/xeq.c     **** 		}
2802:src/xeq.c     **** 
2803:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2804:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
2805:src/xeq.c     **** 		    && (dp_pos_type_ds != pos_type_ds || dp_pos_lim_ds != pos_lim_ds)) {
2806:src/xeq.c     **** 			if (dp_pos_type_ds == 2) { // low limit
2807:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_ds)
2808:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2809:src/xeq.c     **** 			}
2810:src/xeq.c     **** 			else if (dp_pos_type_ds == 3) { // high limit
2811:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_ds)
2812:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2813:src/xeq.c     **** 			}
2814:src/xeq.c     **** 			if (dp_pos_lim_ds < 0 && emax_plus < 0)
2815:src/xeq.c     **** 				emax_plus = 0;
2816:src/xeq.c     **** 		}
2817:src/xeq.c     **** 		else if (large_exp_entry && dbl
2818:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
2819:src/xeq.c     **** 		                         && dp_pos_lim_dc == dp_pos_lim_ds))
ARM GAS  /tmp/ccjeMhND.s 			page 60


2820:src/xeq.c     **** 		         && (dp_pos_type_dc != pos_type_dc || dp_pos_lim_dc != pos_lim_dc)) {
2821:src/xeq.c     **** 			if (dp_pos_type_dc == 2) { // low limit
2822:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_dc)
2823:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2824:src/xeq.c     **** 			}
2825:src/xeq.c     **** 			else if (dp_pos_type_dc == 3) { // high limit
2826:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_dc)
2827:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2828:src/xeq.c     **** 			}
2829:src/xeq.c     **** 			if (dp_pos_lim_dc < 0 && emax_plus < 0)
2830:src/xeq.c     **** 				emax_plus = 0;
2831:src/xeq.c     **** 		}
2832:src/xeq.c     **** 		else if (flag_D && (pos_type_dc != pos_type_ds || pos_lim_dc != pos_lim_ds)) {
2833:src/xeq.c     **** 			if (pos_type_ds == 2) { // low limit
2834:src/xeq.c     **** 				if (emax_plus < pos_lim_ds)
2835:src/xeq.c     **** 					emax_plus = pos_lim_ds;
2836:src/xeq.c     **** 			}
2837:src/xeq.c     **** 			else if (pos_type_ds == 3) { // high limit
2838:src/xeq.c     **** 				if (emax_plus > pos_lim_ds)
2839:src/xeq.c     **** 					emax_plus = pos_lim_ds;
2840:src/xeq.c     **** 			}
2841:src/xeq.c     **** 			if (pos_lim_ds < 0 && emax_plus < 0)
2842:src/xeq.c     **** 				emax_plus = 0;
2843:src/xeq.c     **** 		}
2844:src/xeq.c     **** 		else {
2845:src/xeq.c     **** 			if (pos_type_dc == 2) { // low limit
2846:src/xeq.c     **** 				if (emax_plus < pos_lim_dc)
2847:src/xeq.c     **** 					emax_plus = pos_lim_dc;
2848:src/xeq.c     **** 			}
2849:src/xeq.c     **** 			else if (pos_type_dc == 3) { // high limit
2850:src/xeq.c     **** 				if (emax_plus > pos_lim_dc)
2851:src/xeq.c     **** 					emax_plus = pos_lim_dc;
2852:src/xeq.c     **** 			}
2853:src/xeq.c     **** 			if (pos_lim_dc < 0 && emax_plus < 0)
2854:src/xeq.c     **** 				emax_plus = 0;
2855:src/xeq.c     **** 		}
2856:src/xeq.c     **** 
2857:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2858:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
2859:src/xeq.c     **** 		    && (dp_exp_chs_ds != exp_chs_ds)) {
2860:src/xeq.c     **** 			if (dp_exp_chs_ds == 0) {
2861:src/xeq.c     **** 				// Limit exponents so sign change is always legal
2862:src/xeq.c     **** 				if (emax_minus < emax_plus)
2863:src/xeq.c     **** 					emax = emax_minus;
2864:src/xeq.c     **** 				else
2865:src/xeq.c     **** 					emax = emax_plus;
2866:src/xeq.c     **** 			}
2867:src/xeq.c     **** 			else if (dp_exp_chs_ds == 3) {
2868:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
2869:src/xeq.c     **** 				if (emax_minus > emax_plus)
2870:src/xeq.c     **** 					emax = emax_minus;
2871:src/xeq.c     **** 				else
2872:src/xeq.c     **** 					emax = emax_plus;
2873:src/xeq.c     **** 			}
2874:src/xeq.c     **** 			else {
2875:src/xeq.c     **** 				if (dp_exp_chs_ds == 2 && !was_digit_entered)
2876:src/xeq.c     **** 					return;
ARM GAS  /tmp/ccjeMhND.s 			page 61


2877:src/xeq.c     **** 				if (*p == 'D')
2878:src/xeq.c     **** 					emax = emax_minus;
2879:src/xeq.c     **** 				else
2880:src/xeq.c     **** 					emax = emax_plus;
2881:src/xeq.c     **** 			}
2882:src/xeq.c     **** 		}
2883:src/xeq.c     **** 		else if (large_exp_entry && dbl
2884:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
2885:src/xeq.c     **** 		         && (dp_exp_chs_dc != exp_chs_dc)) {
2886:src/xeq.c     **** 			if (dp_exp_chs_dc == 0) {
2887:src/xeq.c     **** 				// Limit exponents so sign change is always legal
2888:src/xeq.c     **** 				if (emax_minus < emax_plus)
2889:src/xeq.c     **** 					emax = emax_minus;
2890:src/xeq.c     **** 				else
2891:src/xeq.c     **** 					emax = emax_plus;
2892:src/xeq.c     **** 			}
2893:src/xeq.c     **** 			else if (dp_exp_chs_dc == 3) {
2894:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
2895:src/xeq.c     **** 				if (emax_minus > emax_plus)
2896:src/xeq.c     **** 					emax = emax_minus;
2897:src/xeq.c     **** 				else
2898:src/xeq.c     **** 					emax = emax_plus;
2899:src/xeq.c     **** 			}
2900:src/xeq.c     **** 			else {
2901:src/xeq.c     **** 				if (dp_exp_chs_dc == 2 && !was_digit_entered)
2902:src/xeq.c     **** 					return;
2903:src/xeq.c     **** 				if (*p == 'D')
2904:src/xeq.c     **** 					emax = emax_minus;
2905:src/xeq.c     **** 				else
2906:src/xeq.c     **** 					emax = emax_plus;
2907:src/xeq.c     **** 			}
2908:src/xeq.c     **** 		}
2909:src/xeq.c     **** 		else if (flag_D && exp_chs_dc != exp_chs_ds) {
2910:src/xeq.c     **** 			if (exp_chs_ds == 0) {
2911:src/xeq.c     **** 				// Limit exponents so sign change is always legal
2912:src/xeq.c     **** 				if (emax_minus < emax_plus)
2913:src/xeq.c     **** 					emax = emax_minus;
2914:src/xeq.c     **** 				else
2915:src/xeq.c     **** 					emax = emax_plus;
2916:src/xeq.c     **** 			}
2917:src/xeq.c     **** 			else if (exp_chs_ds == 3) {
2918:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
2919:src/xeq.c     **** 				if (emax_minus > emax_plus)
2920:src/xeq.c     **** 					emax = emax_minus;
2921:src/xeq.c     **** 				else
2922:src/xeq.c     **** 					emax = emax_plus;
2923:src/xeq.c     **** 			}
2924:src/xeq.c     **** 			else {
2925:src/xeq.c     **** 				if (exp_chs_ds == 2 && !was_digit_entered)
2926:src/xeq.c     **** 					return;
2927:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2928:src/xeq.c     **** 				if (*p == 'D')
2929:src/xeq.c     **** #else
2930:src/xeq.c     **** 				if (*p == '-')
2931:src/xeq.c     **** #endif
2932:src/xeq.c     **** 					emax = emax_minus;
2933:src/xeq.c     **** 				else
ARM GAS  /tmp/ccjeMhND.s 			page 62


2934:src/xeq.c     **** 					emax = emax_plus;
2935:src/xeq.c     **** 			}
2936:src/xeq.c     **** 		}
2937:src/xeq.c     **** 		else {
2938:src/xeq.c     **** 			if (exp_chs_dc == 0) {
2939:src/xeq.c     **** 				// Limit exponents so sign change is always legal
2940:src/xeq.c     **** 				if (emax_minus < emax_plus)
2941:src/xeq.c     **** 					emax = emax_minus;
2942:src/xeq.c     **** 				else
2943:src/xeq.c     **** 					emax = emax_plus;
2944:src/xeq.c     **** 			}
2945:src/xeq.c     **** 			else if (exp_chs_dc == 3) {
2946:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
2947:src/xeq.c     **** 				if (emax_minus > emax_plus)
2948:src/xeq.c     **** 					emax = emax_minus;
2949:src/xeq.c     **** 				else
2950:src/xeq.c     **** 					emax = emax_plus;
2951:src/xeq.c     **** 			}
2952:src/xeq.c     **** 			else {
2953:src/xeq.c     **** 				if (exp_chs_dc == 2 && !was_digit_entered)
2954:src/xeq.c     **** 					return;
2955:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2956:src/xeq.c     **** 				if (*p == 'D')
2957:src/xeq.c     **** #else
2958:src/xeq.c     **** 				if (*p == '-')
2959:src/xeq.c     **** #endif
2960:src/xeq.c     **** 					emax = emax_minus;
2961:src/xeq.c     **** 				else
2962:src/xeq.c     **** 					emax = emax_plus;
2963:src/xeq.c     **** 			}
2964:src/xeq.c     **** 		}
2965:src/xeq.c     **** 	}
2966:src/xeq.c     **** 
2967:src/xeq.c     **** do_not_check_limits:
2968:src/xeq.c     **** #ifdef SHIFT_EXPONENT
2969:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
2970:src/xeq.c     **** 	p++;
2971:src/xeq.c     **** #  else
2972:src/xeq.c     **** 	if (*p == '-')
2973:src/xeq.c     **** 		p++;
2974:src/xeq.c     **** #  endif
2975:src/xeq.c     **** 	/* Check if the current exponent exceeds the range.
2976:src/xeq.c     **** 	 * If so, shift it back until it doesn't.
2977:src/xeq.c     **** 	 * Also remove leading zeros.
2978:src/xeq.c     **** 	 */
2979:src/xeq.c     **** 	while (s_to_i(p) > emax || *p == '0') {
2980:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
2981:src/xeq.c     **** 			p[i] = p[i + 1];
2982:src/xeq.c     **** 		CmdLineLength--;
2983:src/xeq.c     **** 	}
2984:src/xeq.c     **** #else
2985:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
2986:src/xeq.c     **** 	negative = (*p == 'D');
2987:src/xeq.c     **** 	p++;
2988:src/xeq.c     **** #  else
2989:src/xeq.c     **** 	if (*p == '-') {
2990:src/xeq.c     **** 		p++;
ARM GAS  /tmp/ccjeMhND.s 			page 63


2991:src/xeq.c     **** 		negative = 1;
2992:src/xeq.c     **** 	}
2993:src/xeq.c     **** 	else negative = 0;
2994:src/xeq.c     **** #  endif
2995:src/xeq.c     **** 	// Display a warning if the exponent is out of range.
2996:src/xeq.c     **** 	if ((i = s_to_i(p)) > emax) {
2997:src/xeq.c     **** 		if (was_digit_entered) {
2998:src/xeq.c     **** 			CmdLineLength--;
2999:src/xeq.c     **** 			if (large_exp_entry && dbl ? i > 9999 : i > 999) {
3000:src/xeq.c     **** 				report_warn(ERR_TOO_LONG);
3001:src/xeq.c     **** 				return;
3002:src/xeq.c     **** 			}
3003:src/xeq.c     **** 		}
3004:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3005:src/xeq.c     **** 		else if (('D' | 1) == 'E')
3006:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3007:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3008:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3009:src/xeq.c     **** 		else
3010:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3011:src/xeq.c     **** #  else
3012:src/xeq.c     **** 		else if (negative) {
3013:src/xeq.c     **** 			scopy(p - 1, p);
3014:src/xeq.c     **** 			CmdLineLength--;
3015:src/xeq.c     **** 		}
3016:src/xeq.c     **** 		else {
3017:src/xeq.c     **** 			xcopy(p + 1, p, CMDLINELEN - 1 - CmdLineEex);
3018:src/xeq.c     **** 			*p = '-';
3019:src/xeq.c     **** 			CmdLineLength++;
3020:src/xeq.c     **** 		}
3021:src/xeq.c     **** #  endif
3022:src/xeq.c     **** 		if (negative)
3023:src/xeq.c     **** 			report_warn(ERR_TOO_SMALL);
3024:src/xeq.c     **** 		else
3025:src/xeq.c     **** 			report_warn(ERR_TOO_BIG);
3026:src/xeq.c     **** 	}
3027:src/xeq.c     **** #endif
3028:src/xeq.c     **** }
3029:src/xeq.c     **** 
3030:src/xeq.c     **** /* We've encountered a CHS while entering the command line.
3031:src/xeq.c     ****  */
3032:src/xeq.c     **** static void cmdlinechs(void) {
3033:src/xeq.c     **** 	if (CmdLineEex) {
3034:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3035:src/xeq.c     **** 		// 'D' instead of 'E' indicates a negative exponent.
3036:src/xeq.c     **** 		// Four-digit exponents wouldn't fit into Cmdline if we used 'E-'.
3037:src/xeq.c     **** 		if (('D' | 1) == 'E')
3038:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3039:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3040:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3041:src/xeq.c     **** 		else
3042:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3043:src/xeq.c     **** #else
3044:src/xeq.c     **** 		const unsigned int pos = CmdLineEex + 1;
3045:src/xeq.c     **** 		if (CmdLineLength <= pos) {
3046:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
3047:src/xeq.c     **** 				append_cmdline('-');
ARM GAS  /tmp/ccjeMhND.s 			page 64


3048:src/xeq.c     **** 		} else if (Cmdline[pos] == '-') {
3049:src/xeq.c     **** 			if (CmdLineLength != pos)
3050:src/xeq.c     **** 				xcopy(Cmdline + pos, Cmdline + pos + 1, CmdLineLength-pos);
3051:src/xeq.c     **** 			CmdLineLength--;
3052:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3053:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
3054:src/xeq.c     **** 			Cmdline[pos] = '-';
3055:src/xeq.c     **** 			CmdLineLength++;
3056:src/xeq.c     **** 		}
3057:src/xeq.c     **** #endif
3058:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC == 1 \
3059:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DS == -1 || SP_EXP_ENTRY_CHS_DS == 1 \
3060:src/xeq.c     ****     || ((DP_EXP_ENTRY_CHS_DC == 1 || DP_EXP_ENTRY_CHS_DS == 1) && defined(LARGE_EXPONENT_ENTRY))
3061:src/xeq.c     **** 		exponent_adjusted(0);
3062:src/xeq.c     **** #endif
3063:src/xeq.c     **** 	} else {
3064:src/xeq.c     **** 		if (Cmdline[0] == '-') {
3065:src/xeq.c     **** 			if (CmdLineLength > 1)
3066:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
3067:src/xeq.c     **** 			CmdLineLength--;
3068:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3069:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
3070:src/xeq.c     **** 			Cmdline[0] = '-';
3071:src/xeq.c     **** 			CmdLineLength++;
3072:src/xeq.c     **** 		}
3073:src/xeq.c     **** 	}
3074:src/xeq.c     **** }
3075:src/xeq.c     **** 
3076:src/xeq.c     **** /* Execute a tests command
3077:src/xeq.c     ****  */
3078:src/xeq.c     **** static void do_tst(int cmp, const enum tst_op op) {
3079:src/xeq.c     **** 	int a = 0;
3080:src/xeq.c     **** 	int iszero, isneg;
3081:src/xeq.c     **** 
3082:src/xeq.c     **** 	process_cmdline_set_lift();
3083:src/xeq.c     **** 
3084:src/xeq.c     **** 	if (is_intmode()) {
3085:src/xeq.c     **** 		unsigned long long int xv, yv;
3086:src/xeq.c     **** 		int xs, ys;
3087:src/xeq.c     **** 
3088:src/xeq.c     **** 		xv = extract_value(getX_int(), &xs);
3089:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
3090:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
3091:src/xeq.c     **** 			ys = 0;
3092:src/xeq.c     **** 		} else
3093:src/xeq.c     **** 			yv = extract_value(get_reg_n_int(cmp), &ys);
3094:src/xeq.c     **** 
3095:src/xeq.c     **** 		if (xv == 0 && yv == 0)
3096:src/xeq.c     **** 			iszero = 1;
3097:src/xeq.c     **** 		else
3098:src/xeq.c     **** 			iszero = (xv == yv) && (xs == ys);
3099:src/xeq.c     **** 
3100:src/xeq.c     **** 		if (xs == ys) {		// same sign
3101:src/xeq.c     **** 			if (xs)		// both negative
3102:src/xeq.c     **** 				isneg = xv > yv;
3103:src/xeq.c     **** 			else		// both positive
3104:src/xeq.c     **** 				isneg = xv < yv;
ARM GAS  /tmp/ccjeMhND.s 			page 65


3105:src/xeq.c     **** 		} else
3106:src/xeq.c     **** 			isneg = xs;	// opposite signs
3107:src/xeq.c     **** 	} else {
3108:src/xeq.c     **** 		decNumber t, x, r;
3109:src/xeq.c     **** 
3110:src/xeq.c     **** 		getX(&x);
3111:src/xeq.c     **** 		if (decNumberIsNaN(&x))
3112:src/xeq.c     **** 			goto flse;
3113:src/xeq.c     **** 
3114:src/xeq.c     **** 		getRegister(&t, cmp);
3115:src/xeq.c     **** 		if (decNumberIsNaN(&t))
3116:src/xeq.c     **** 			goto flse;
3117:src/xeq.c     **** 
3118:src/xeq.c     **** 		if (op == TST_APX) {
3119:src/xeq.c     **** 			decNumberRnd(&x, &x);
3120:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
3121:src/xeq.c     **** 				decNumberRnd(&t, &t);
3122:src/xeq.c     **** 		}
3123:src/xeq.c     **** 		dn_compare(&r, &x, &t);
3124:src/xeq.c     **** 		iszero = dn_eq0(&r);
3125:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
3126:src/xeq.c     **** 	}
3127:src/xeq.c     **** 
3128:src/xeq.c     **** 	switch (op) {
3129:src/xeq.c     **** 	case TST_APX:
3130:src/xeq.c     **** 	case TST_EQ:	a = iszero;		break;
3131:src/xeq.c     **** 	case TST_NE:	a = !iszero;		break;
3132:src/xeq.c     **** 	case TST_LT:	a = isneg && !iszero;	break;
3133:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
3134:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
3135:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
3136:src/xeq.c     **** 	default:	a = 0;			break;
3137:src/xeq.c     **** 	}
3138:src/xeq.c     **** 
3139:src/xeq.c     **** flse:	fin_tst(a);
3140:src/xeq.c     **** }
3141:src/xeq.c     **** 
3142:src/xeq.c     **** void check_zero(enum nilop op) {
3143:src/xeq.c     **** 	int neg;
3144:src/xeq.c     **** 	int zero;
3145:src/xeq.c     **** 
3146:src/xeq.c     **** 	if (is_intmode()) {
3147:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
3148:src/xeq.c     **** 		zero = (xv == 0);
3149:src/xeq.c     **** 	} else {
3150:src/xeq.c     **** 		decNumber x;
3151:src/xeq.c     **** 		getX(&x);
3152:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
3153:src/xeq.c     **** 		zero = dn_eq0(&x);
3154:src/xeq.c     **** 	}
3155:src/xeq.c     **** 	if (op == OP_Xeq_pos0)
3156:src/xeq.c     **** 		fin_tst(zero && !neg);
3157:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
3158:src/xeq.c     **** 		fin_tst(zero && neg);
3159:src/xeq.c     **** }
3160:src/xeq.c     **** 
3161:src/xeq.c     **** void cmdtest(unsigned int arg, enum rarg op) {
ARM GAS  /tmp/ccjeMhND.s 			page 66


3162:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
3163:src/xeq.c     **** }
3164:src/xeq.c     **** 
3165:src/xeq.c     **** static void do_ztst(const decNumber *re, const decNumber *im, enum tst_op op) {
3166:src/xeq.c     **** 	decNumber x, y;
3167:src/xeq.c     **** 
3168:src/xeq.c     **** 	process_cmdline_set_lift();
3169:src/xeq.c     **** 	if (is_intmode()) {
3170:src/xeq.c     **** 		bad_mode_error();
3171:src/xeq.c     **** 		return;
3172:src/xeq.c     **** 	}
3173:src/xeq.c     **** 	getXY(&x, &y);
3174:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
3175:src/xeq.c     **** 		fin_tst(0);
3176:src/xeq.c     **** 		return;
3177:src/xeq.c     **** 	}
3178:src/xeq.c     **** 	fin_tst((op == TST_EQ) == (dn_eq(&x, re) && dn_eq(&y, im)));
3179:src/xeq.c     **** }
3180:src/xeq.c     **** 
3181:src/xeq.c     **** void cmdztest(unsigned int arg, enum rarg op) {
3182:src/xeq.c     **** 	decNumber re, im;
3183:src/xeq.c     **** 	getRegister(&re, arg);
3184:src/xeq.c     **** 	getRegister(&im, arg + 1);
3185:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
3186:src/xeq.c     **** }
3187:src/xeq.c     **** 
3188:src/xeq.c     **** static int incdec(unsigned int arg, int inc) {
3189:src/xeq.c     **** 	if (is_intmode()) {
3190:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3191:src/xeq.c     **** 		int xs;
3192:src/xeq.c     **** 		unsigned long long int xv;
3193:src/xeq.c     **** 
3194:src/xeq.c     **** 		if (inc)
3195:src/xeq.c     **** 			x = intAdd(x, 1LL);
3196:src/xeq.c     **** 		else
3197:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3198:src/xeq.c     **** 		set_reg_n_int(arg, x);
3199:src/xeq.c     **** 
3200:src/xeq.c     **** 		xv = extract_value(x, &xs);
3201:src/xeq.c     **** 		return xv != 0;
3202:src/xeq.c     **** 	} else {
3203:src/xeq.c     **** 		decNumber x, y;
3204:src/xeq.c     **** 
3205:src/xeq.c     **** 		getRegister(&x, arg);
3206:src/xeq.c     **** 		if (inc)
3207:src/xeq.c     **** 			dn_inc(&x);
3208:src/xeq.c     **** 		else
3209:src/xeq.c     **** 			dn_dec(&x);
3210:src/xeq.c     **** 		setRegister(arg, &x);
3211:src/xeq.c     **** 		decNumberTrunc(&y, &x);
3212:src/xeq.c     **** 		return ! dn_eq0(&y);
3213:src/xeq.c     **** 	}
3214:src/xeq.c     **** }
3215:src/xeq.c     **** 
3216:src/xeq.c     **** void cmdlincdec(unsigned int arg, enum rarg op) {
3217:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
3218:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 67


3219:src/xeq.c     **** 
3220:src/xeq.c     **** void cmdloopz(unsigned int arg, enum rarg op) {
3221:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
3222:src/xeq.c     **** }
3223:src/xeq.c     **** 
3224:src/xeq.c     **** void cmdloop(unsigned int arg, enum rarg op) {
3225:src/xeq.c     **** 	if (is_intmode()) {
3226:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3227:src/xeq.c     **** 		int xs;
3228:src/xeq.c     **** 		unsigned long long int xv;
3229:src/xeq.c     **** 
3230:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE)
3231:src/xeq.c     **** 			x = intAdd(x, 1LL);
3232:src/xeq.c     **** 		else
3233:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3234:src/xeq.c     **** 		set_reg_n_int(arg, x);
3235:src/xeq.c     **** 
3236:src/xeq.c     **** 		xv = extract_value(x, &xs);
3237:src/xeq.c     **** 		if (op == RARG_ISG)
3238:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
3239:src/xeq.c     **** 		else if (op == RARG_DSE)
3240:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
3241:src/xeq.c     **** 		else if (op == RARG_ISE)
3242:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
3243:src/xeq.c     **** 		else // if (op == RARG_DSL)
3244:src/xeq.c     **** 			fin_tst(! (xs != 0 && xv > 0));		// < 0
3245:src/xeq.c     **** 		return;
3246:src/xeq.c     **** 	} else {
3247:src/xeq.c     **** 		decNumber x, i, f, n, u;
3248:src/xeq.c     **** 
3249:src/xeq.c     **** 		getRegister(&x, arg);
3250:src/xeq.c     **** 
3251:src/xeq.c     **** 		// Break the number into the important bits
3252:src/xeq.c     **** 		// nnnnn.fffii
3253:src/xeq.c     **** 		dn_abs(&f, &x);
3254:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
3255:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
3256:src/xeq.c     **** 		if (decNumberIsNegative(&x))
3257:src/xeq.c     **** 			dn_minus(&n, &n);
3258:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
3259:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
3260:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
3261:src/xeq.c     **** 		dn_mul100(&x, &i);
3262:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
3263:src/xeq.c     **** 		if (dn_eq0(&i))
3264:src/xeq.c     **** 			dn_1(&i);
3265:src/xeq.c     **** 
3266:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE) {
3267:src/xeq.c     **** 			dn_add(&n, &n, &i);
3268:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3269:src/xeq.c     **** 			if (op == RARG_ISE)
3270:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
3271:src/xeq.c     **** 			else
3272:src/xeq.c     **** 				fin_tst(dn_ge0(&x));
3273:src/xeq.c     **** 		} else {
3274:src/xeq.c     **** 			dn_subtract(&n, &n, &i);
3275:src/xeq.c     **** 			dn_compare(&x, &f, &n);
ARM GAS  /tmp/ccjeMhND.s 			page 68


3276:src/xeq.c     **** 			if (op == RARG_DSL)
3277:src/xeq.c     **** 				fin_tst(dn_le0(&x));
3278:src/xeq.c     **** 			else
3279:src/xeq.c     **** 				fin_tst(dn_lt0(&x));
3280:src/xeq.c     **** 		}
3281:src/xeq.c     **** 
3282:src/xeq.c     **** 		// Finally rebuild the result
3283:src/xeq.c     **** 		if (decNumberIsNegative(&n)) {
3284:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
3285:src/xeq.c     **** 		} else
3286:src/xeq.c     **** 			dn_add(&x, &n, &u);
3287:src/xeq.c     **** 		setRegister(arg, &x);
3288:src/xeq.c     **** 	}
3289:src/xeq.c     **** }
3290:src/xeq.c     **** 
3291:src/xeq.c     **** 
3292:src/xeq.c     **** /* Shift a real number by 10 to the specified power
3293:src/xeq.c     ****  */
3294:src/xeq.c     **** void op_shift_digit(unsigned int n, enum rarg op) {
3295:src/xeq.c     **** 	decNumber x;
3296:src/xeq.c     **** 	int adjust = n;
3297:src/xeq.c     **** 
3298:src/xeq.c     **** 	if (is_intmode()) {
3299:src/xeq.c     **** 		bad_mode_error();
3300:src/xeq.c     **** 		return;
3301:src/xeq.c     **** 	}
3302:src/xeq.c     **** 	getX(&x);
3303:src/xeq.c     **** 	setlastX();
3304:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
3305:src/xeq.c     **** 		return;
3306:src/xeq.c     **** 	if (op == RARG_SRD)
3307:src/xeq.c     **** 		adjust = -adjust;
3308:src/xeq.c     **** 	x.exponent += adjust;
3309:src/xeq.c     **** 	setX(&x);
3310:src/xeq.c     **** }
3311:src/xeq.c     **** 
3312:src/xeq.c     **** 
3313:src/xeq.c     **** /* Return a pointer to the byte with the indicated flag in it.
3314:src/xeq.c     ****  * also return a byte with the relevant bit mask set up.
3315:src/xeq.c     ****  * Also, handle local flags.
3316:src/xeq.c     ****  */
3317:src/xeq.c     **** static unsigned short int *flag_word(int n, unsigned short int *mask) {
 457              		.loc 1 3317 71 is_stmt 1 view -0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              		@ link register save eliminated.
3318:src/xeq.c     **** 	unsigned short int *p;
 462              		.loc 1 3318 2 view .LVU141
3319:src/xeq.c     **** 
3320:src/xeq.c     **** 	if (n >= LOCAL_FLAG_BASE) {
 463              		.loc 1 3320 2 view .LVU142
 464              		.loc 1 3320 5 is_stmt 0 view .LVU143
 465 0000 6F28     		cmp	r0, #111
3317:src/xeq.c     **** 	unsigned short int *p;
 466              		.loc 1 3317 71 view .LVU144
 467 0002 10B4     		push	{r4}
ARM GAS  /tmp/ccjeMhND.s 			page 69


 468              		.cfi_def_cfa_offset 4
 469              		.cfi_offset 4, -4
 470              		.loc 1 3320 5 view .LVU145
 471 0004 29DD     		ble	.L42
3321:src/xeq.c     **** 		n -= LOCAL_FLAG_BASE;
 472              		.loc 1 3321 3 is_stmt 1 view .LVU146
 473              		.loc 1 3321 5 is_stmt 0 view .LVU147
 474 0006 7038     		subs	r0, r0, #112
 475              	.LVL39:
3322:src/xeq.c     **** 		if (n > XROM_SYSTEM_FLAG_BASE && XromFlags.xIN) {
 476              		.loc 1 3322 3 is_stmt 1 view .LVU148
 477              		.loc 1 3322 6 is_stmt 0 view .LVU149
 478 0008 0828     		cmp	r0, #8
 479 000a 04DD     		ble	.L43
 480              		.loc 1 3322 33 discriminator 1 view .LVU150
 481 000c 174B     		ldr	r3, .L54
 482 000e 93F90120 		ldrsb	r2, [r3, #1]
 483 0012 002A     		cmp	r2, #0
 484 0014 15DB     		blt	.L44
 485              	.L43:
3323:src/xeq.c     **** 			// XROM special
3324:src/xeq.c     **** 			p = &XromFlagWord;
3325:src/xeq.c     **** 		}
3326:src/xeq.c     **** 		else if (LocalRegs & 1) {
 486              		.loc 1 3326 8 is_stmt 1 view .LVU151
 487              		.loc 1 3326 12 is_stmt 0 view .LVU152
 488 0016 164B     		ldr	r3, .L54+4
 489 0018 1B68     		ldr	r3, [r3]
 490 001a B3F9DE27 		ldrsh	r2, [r3, #2014]
3327:src/xeq.c     **** 			// Odd frame: flags are at end of frame
3328:src/xeq.c     **** 			p = RetStk + LocalRegs + local_levels() - 1;
 491              		.loc 1 3328 44 view .LVU153
 492 001e 154B     		ldr	r3, .L54+8
3326:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 493              		.loc 1 3326 11 view .LVU154
 494 0020 D407     		lsls	r4, r2, #31
 495              		.loc 1 3328 44 view .LVU155
 496 0022 1B68     		ldr	r3, [r3]
3326:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 497              		.loc 1 3326 11 view .LVU156
 498 0024 1ED5     		bpl	.L45
 499              		.loc 1 3328 4 is_stmt 1 view .LVU157
 500              	.LBB1264:
 501              	.LBI1264:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 502              		.loc 1 214 5 view .LVU158
 503              	.LBB1265:
 215:src/xeq.c     **** }
 504              		.loc 1 215 2 view .LVU159
 215:src/xeq.c     **** }
 505              		.loc 1 215 57 is_stmt 0 view .LVU160
 506 0026 002A     		cmp	r2, #0
 507 0028 B8BF     		it	lt
 508 002a 33F81240 		ldrhlt	r4, [r3, r2, lsl #1]
 509              	.LBE1265:
 510              	.LBE1264:
 511              		.loc 1 3328 44 view .LVU161
ARM GAS  /tmp/ccjeMhND.s 			page 70


 512 002e 02F10042 		add	r2, r2, #-2147483648
 513 0032 B4BF     		ite	lt
 514 0034 C4F30B04 		ubfxlt	r4, r4, #0, #12
 515              	.LBB1267:
 516              	.LBB1266:
 517 0038 0024     		movge	r4, #0
 518              	.LBE1266:
 519              	.LBE1267:
 520 003a 013A     		subs	r2, r2, #1
 521 003c 2244     		add	r2, r2, r4
 522              		.loc 1 3328 6 view .LVU162
 523 003e 03EB4203 		add	r3, r3, r2, lsl #1
 524              	.LVL40:
 525              	.L44:
3329:src/xeq.c     **** 		}
3330:src/xeq.c     **** 		else {
3331:src/xeq.c     **** 			// Even frame: Flags are at beginning of frame
3332:src/xeq.c     **** 			p = RetStk + LocalRegs + 1;
3333:src/xeq.c     **** 		}
3334:src/xeq.c     **** 	}
3335:src/xeq.c     **** 	else
3336:src/xeq.c     **** 		p = UserFlags;
3337:src/xeq.c     **** 
3338:src/xeq.c     **** 	if (mask != NULL)
 526              		.loc 1 3338 2 is_stmt 1 view .LVU163
 527              		.loc 1 3338 5 is_stmt 0 view .LVU164
 528 0042 21B1     		cbz	r1, .L47
3339:src/xeq.c     **** 		*mask = 1 << (n & 15);
 529              		.loc 1 3339 3 is_stmt 1 view .LVU165
 530              		.loc 1 3339 19 is_stmt 0 view .LVU166
 531 0044 00F00F04 		and	r4, r0, #15
 532              		.loc 1 3339 13 view .LVU167
 533 0048 0122     		movs	r2, #1
 534 004a A240     		lsls	r2, r2, r4
 535              		.loc 1 3339 9 view .LVU168
 536 004c 0A80     		strh	r2, [r1]	@ movhi
 537              	.L47:
3340:src/xeq.c     **** 	return p + (n >> 4);
 538              		.loc 1 3340 2 is_stmt 1 view .LVU169
 539              		.loc 1 3340 16 is_stmt 0 view .LVU170
 540 004e 0011     		asrs	r0, r0, #4
 541              	.LVL41:
3341:src/xeq.c     **** }
 542              		.loc 1 3341 1 view .LVU171
 543 0050 03EB4000 		add	r0, r3, r0, lsl #1
 544 0054 5DF8044B 		ldr	r4, [sp], #4
 545              		.cfi_remember_state
 546              		.cfi_restore 4
 547              		.cfi_def_cfa_offset 0
 548 0058 7047     		bx	lr
 549              	.LVL42:
 550              	.L42:
 551              		.cfi_restore_state
3336:src/xeq.c     **** 
 552              		.loc 1 3336 3 is_stmt 1 view .LVU172
3336:src/xeq.c     **** 
 553              		.loc 1 3336 7 is_stmt 0 view .LVU173
ARM GAS  /tmp/ccjeMhND.s 			page 71


 554 005a 054B     		ldr	r3, .L54+4
3336:src/xeq.c     **** 
 555              		.loc 1 3336 5 view .LVU174
 556 005c 1B68     		ldr	r3, [r3]
 557 005e 03F5FE63 		add	r3, r3, #2032
 558              	.LVL43:
3336:src/xeq.c     **** 
 559              		.loc 1 3336 5 view .LVU175
 560 0062 EEE7     		b	.L44
 561              	.LVL44:
 562              	.L45:
3332:src/xeq.c     **** 		}
 563              		.loc 1 3332 4 is_stmt 1 view .LVU176
3332:src/xeq.c     **** 		}
 564              		.loc 1 3332 27 is_stmt 0 view .LVU177
 565 0064 0132     		adds	r2, r2, #1
3332:src/xeq.c     **** 		}
 566              		.loc 1 3332 6 view .LVU178
 567 0066 03EB4203 		add	r3, r3, r2, lsl #1
 568              	.LVL45:
3332:src/xeq.c     **** 		}
 569              		.loc 1 3332 6 view .LVU179
 570 006a EAE7     		b	.L44
 571              	.L55:
 572              		.align	2
 573              	.L54:
 574 006c 00000000 		.word	XromParams
 575 0070 00000000 		.word	main_ram
 576 0074 00000000 		.word	RetStk
 577              		.cfi_endproc
 578              	.LFE193:
 580              		.section	.text.set_zero,"ax",%progbits
 581              		.align	1
 582              		.p2align 2,,3
 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 586              		.fpu fpv4-sp-d16
 588              	set_zero:
 589              	.LVL46:
 590              	.LFB102:
1360:src/xeq.c     **** 	zero_regs(x, 1);
 591              		.loc 1 1360 35 is_stmt 1 view -0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 0
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595              		@ link register save eliminated.
1361:src/xeq.c     **** }
 596              		.loc 1 1361 2 view .LVU181
 597              	.LBB1268:
 598              	.LBI1268:
1332:src/xeq.c     **** #if 0
 599              		.loc 1 1332 6 view .LVU182
 600              	.LBB1269:
1347:src/xeq.c     **** #endif
 601              		.loc 1 1347 2 view .LVU183
 602              	.LBB1270:
ARM GAS  /tmp/ccjeMhND.s 			page 72


 603              	.LBI1270:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 604              		.loc 1 932 5 view .LVU184
 605              	.LBB1271:
 933:src/xeq.c     **** }
 606              		.loc 1 933 2 view .LVU185
 933:src/xeq.c     **** }
 607              		.loc 1 933 24 is_stmt 0 view .LVU186
 608 0000 074B     		ldr	r3, .L57
 609 0002 1B68     		ldr	r3, [r3]
 610 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 611 0008 44F20102 		movw	r2, #16385
 612 000c 1A40     		ands	r2, r2, r3
 613              	.LBE1271:
 614              	.LBE1270:
1347:src/xeq.c     **** #endif
 615              		.loc 1 1347 2 view .LVU187
 616 000e B2F5804F 		cmp	r2, #16384
 617 0012 0CBF     		ite	eq
 618 0014 1022     		moveq	r2, #16
 619 0016 0822     		movne	r2, #8
 620 0018 0021     		movs	r1, #0
 621 001a FFF7FEBF 		b	xset
 622              	.LVL47:
 623              	.L58:
1347:src/xeq.c     **** #endif
 624              		.loc 1 1347 2 view .LVU188
 625 001e 00BF     		.align	2
 626              	.L57:
 627 0020 00000000 		.word	main_ram
 628              	.LBE1269:
 629              	.LBE1268:
 630              		.cfi_endproc
 631              	.LFE102:
 633              		.section	.text.intResult,"ax",%progbits
 634              		.align	1
 635              		.p2align 2,,3
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
 639              		.fpu fpv4-sp-d16
 641              	intResult:
 642              	.LVL48:
 643              	.LFB234:
3342:src/xeq.c     **** 
3343:src/xeq.c     **** int get_user_flag(int n) {
3344:src/xeq.c     **** 	unsigned short mask;
3345:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
3346:src/xeq.c     **** 
3347:src/xeq.c     **** 	return (*f & mask)? 1 : 0;
3348:src/xeq.c     **** }
3349:src/xeq.c     **** 
3350:src/xeq.c     **** void put_user_flag(int n, int f) {
3351:src/xeq.c     **** 	if (f)	set_user_flag(n);
3352:src/xeq.c     **** 	else	clr_user_flag(n);
3353:src/xeq.c     **** }
3354:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 73


3355:src/xeq.c     **** #ifndef set_user_flag
3356:src/xeq.c     **** void set_user_flag(int n) {
3357:src/xeq.c     **** 	unsigned short mask;
3358:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3359:src/xeq.c     **** 
3360:src/xeq.c     **** 	*f |= mask;
3361:src/xeq.c     **** }
3362:src/xeq.c     **** 
3363:src/xeq.c     **** void clr_user_flag(int n) {
3364:src/xeq.c     **** 	unsigned short mask;
3365:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3366:src/xeq.c     **** 
3367:src/xeq.c     **** 	*f &= ~mask;
3368:src/xeq.c     **** }
3369:src/xeq.c     **** #endif
3370:src/xeq.c     **** 
3371:src/xeq.c     **** void cmdflag(unsigned int arg, enum rarg op) {
3372:src/xeq.c     **** 	unsigned short mask;
3373:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
3374:src/xeq.c     **** 	int flg = *f & mask;
3375:src/xeq.c     **** 
3376:src/xeq.c     **** 	switch (op) {
3377:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
3378:src/xeq.c     **** 	case RARG_CF:	flg = 0;			   break;
3379:src/xeq.c     **** 	case RARG_FF:	flg = flg? 0 : 1;		   break;
3380:src/xeq.c     **** 
3381:src/xeq.c     **** 	case RARG_FS:	fin_tst(flg);			   return;
3382:src/xeq.c     **** 	case RARG_FC:	fin_tst(! flg);			   return;
3383:src/xeq.c     **** 
3384:src/xeq.c     **** 	case RARG_FSC:	fin_tst(flg); flg = 0;		   break;
3385:src/xeq.c     **** 	case RARG_FSS:	fin_tst(flg); flg = 1;		   break;
3386:src/xeq.c     **** 	case RARG_FSF:	fin_tst(flg); flg = flg ? 0 : 1;   break;
3387:src/xeq.c     **** 
3388:src/xeq.c     **** 	case RARG_FCC:	fin_tst(! flg);	flg = 0;	   break;
3389:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
3390:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
3391:src/xeq.c     **** 
3392:src/xeq.c     **** 	default:
3393:src/xeq.c     **** 		return;
3394:src/xeq.c     **** 	}
3395:src/xeq.c     **** 
3396:src/xeq.c     **** 	// And write the value back
3397:src/xeq.c     **** 	if (flg)
3398:src/xeq.c     **** 		*f |= mask;
3399:src/xeq.c     **** 	else
3400:src/xeq.c     **** 		*f &= ~mask;
3401:src/xeq.c     **** 
3402:src/xeq.c     **** 	if ( arg == A_FLAG ) {
3403:src/xeq.c     **** 		dot( BIG_EQ, flg );
3404:src/xeq.c     **** 		finish_display(); // BIG_EQ
3405:src/xeq.c     **** 	}
3406:src/xeq.c     **** }
3407:src/xeq.c     **** 
3408:src/xeq.c     **** /* Reset all flags to off/false
3409:src/xeq.c     ****  */
3410:src/xeq.c     **** void clrflags(enum nilop op) {
3411:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
ARM GAS  /tmp/ccjeMhND.s 			page 74


3412:src/xeq.c     **** 	if (LocalRegs < 0) {
3413:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
3414:src/xeq.c     **** 	}
3415:src/xeq.c     **** }
3416:src/xeq.c     **** 
3417:src/xeq.c     **** 
3418:src/xeq.c     **** /* Integer word size
3419:src/xeq.c     ****  */
3420:src/xeq.c     **** void intws(unsigned int arg, enum rarg op) {
3421:src/xeq.c     **** 	if (is_intmode()) {
3422:src/xeq.c     **** 		int i, ss = stack_size();
3423:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
3424:src/xeq.c     **** 		long long int v;
3425:src/xeq.c     **** 
3426:src/xeq.c     **** 		for (i=0; i<ss; i++) {
3427:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
3428:src/xeq.c     **** 			UState.int_len = arg;
3429:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
3430:src/xeq.c     **** 			UState.int_len = oldlen;
3431:src/xeq.c     **** 		}
3432:src/xeq.c     **** 		v = mask_value(get_reg_n_int(regL_idx));
3433:src/xeq.c     **** 		UState.int_len = arg;
3434:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
3435:src/xeq.c     **** 	} else
3436:src/xeq.c     **** 	    UState.int_len = arg;
3437:src/xeq.c     **** }
3438:src/xeq.c     **** 
3439:src/xeq.c     **** 
3440:src/xeq.c     **** /* Convert from a real to a fraction
3441:src/xeq.c     ****  */
3442:src/xeq.c     **** 
3443:src/xeq.c     **** void get_maxdenom(decNumber *d) {
3444:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
3445:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
3446:src/xeq.c     **** }
3447:src/xeq.c     **** 
3448:src/xeq.c     **** void op_2frac(enum nilop op) {
3449:src/xeq.c     **** 	decNumber z, n, d, t;
3450:src/xeq.c     **** 
3451:src/xeq.c     **** 	if (UState.intm) {
3452:src/xeq.c     **** 		setX_int(1);
3453:src/xeq.c     **** 		return;
3454:src/xeq.c     **** 	}
3455:src/xeq.c     **** 
3456:src/xeq.c     **** 	getY(&z);			// Stack has been lifted already
3457:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
3458:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
3459:src/xeq.c     **** 	if (State2.runmode) {
3460:src/xeq.c     **** 		dn_divide(&t, &n, &d);
3461:src/xeq.c     **** 		dn_compare(&n, &t, &z);
3462:src/xeq.c     **** 		if (dn_eq0(&n))
3463:src/xeq.c     **** 			DispMsg = "y/x =";
3464:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
3465:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
3466:src/xeq.c     **** 			DispMsg = "y/x \007\344<";
3467:src/xeq.c     **** 		else
3468:src/xeq.c     **** 			DispMsg = "y/x \007\344>";
ARM GAS  /tmp/ccjeMhND.s 			page 75


3469:src/xeq.c     **** #else
3470:src/xeq.c     **** 			DispMsg = "y/x <";
3471:src/xeq.c     **** 		else
3472:src/xeq.c     **** 			DispMsg = "y/x >";
3473:src/xeq.c     **** #endif
3474:src/xeq.c     **** 	}
3475:src/xeq.c     **** }
3476:src/xeq.c     **** 
3477:src/xeq.c     **** void op_fracdenom(enum nilop op) {
3478:src/xeq.c     **** 	int s;
3479:src/xeq.c     **** 	unsigned long long int i;
3480:src/xeq.c     **** 
3481:src/xeq.c     **** 	i = getX_int_sgn(&s);
3482:src/xeq.c     **** 	if (i > 9999)
3483:src/xeq.c     **** 		UState.denom_max = 0;
3484:src/xeq.c     **** 	else if (i != 1)
3485:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
3486:src/xeq.c     **** 	else {
3487:src/xeq.c     **** 		setlastX();
3488:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
3489:src/xeq.c     **** 	}
3490:src/xeq.c     **** }
3491:src/xeq.c     **** 
3492:src/xeq.c     **** 
3493:src/xeq.c     **** /*  Switching from an integer mode to real mode
3494:src/xeq.c     ****  *  We convert the stack and LastX 
3495:src/xeq.c     ****  */
3496:src/xeq.c     **** static const unsigned short int StackRegMask[] = { 0x10f, 0x1ff };
3497:src/xeq.c     **** 
3498:src/xeq.c     **** void op_float(enum nilop op) {
3499:src/xeq.c     **** 
3500:src/xeq.c     **** 	if (is_intmode()) {
3501:src/xeq.c     **** 		int i;
3502:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
3503:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
3504:src/xeq.c     **** 			if (mask & 1) {
3505:src/xeq.c     **** 				// register belongs to stack
3506:src/xeq.c     **** 				register_from_int(i, i, op == OP_FLOAT_XIN);
3507:src/xeq.c     **** 			}
3508:src/xeq.c     **** 			else if (is_dblmode()) {
3509:src/xeq.c     **** 				// expand the other registers which have been left
3510:src/xeq.c     **** 				// in decimal64 format by the integer mode switch
3511:src/xeq.c     **** 				packed128_from_packed(&(get_reg_n(i)->d), Regs + i);
3512:src/xeq.c     **** 			}
3513:src/xeq.c     **** 		}
3514:src/xeq.c     **** 	}
3515:src/xeq.c     **** 	if (op != OP_FLOAT_XIN && op != OP_FLOAT_RCLM) {
3516:src/xeq.c     **** 		UState.fract = 0;
3517:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
3518:src/xeq.c     **** 	}
3519:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
3520:src/xeq.c     **** }
3521:src/xeq.c     **** 
3522:src/xeq.c     **** /*  Switch to integer mode.
3523:src/xeq.c     ****  *  We convert the stack and LastX
3524:src/xeq.c     ****  */
3525:src/xeq.c     **** static void switch_to_int(void) {
ARM GAS  /tmp/ccjeMhND.s 			page 76


3526:src/xeq.c     **** 	int i;
3527:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
3528:src/xeq.c     **** 	const int dbl = is_dblmode();
3529:src/xeq.c     **** 
3530:src/xeq.c     **** 	for (i = regK_idx; i >= regX_idx; --i, mask <<= 1) {
3531:src/xeq.c     **** 		if (mask & 0x800) {
3532:src/xeq.c     **** 			// register belongs to stack
3533:src/xeq.c     **** 			int_from_register(i, i);
3534:src/xeq.c     **** 		}
3535:src/xeq.c     **** 		else if (dbl) {
3536:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
3537:src/xeq.c     **** 			packed_from_packed128(Regs + i, &(get_reg_n(i)->d));
3538:src/xeq.c     **** 		}
3539:src/xeq.c     **** 	}
3540:src/xeq.c     **** }
3541:src/xeq.c     **** 
3542:src/xeq.c     **** static void set_base(unsigned int b) {
3543:src/xeq.c     **** 	UState.int_base = b - 1;
3544:src/xeq.c     **** 	if (!is_intmode())
3545:src/xeq.c     **** 		switch_to_int();
3546:src/xeq.c     **** }
3547:src/xeq.c     **** 
3548:src/xeq.c     **** void set_int_base(unsigned int arg, enum rarg op) {
3549:src/xeq.c     **** 	if (arg < 2) {
3550:src/xeq.c     **** 		if (arg == 0)
3551:src/xeq.c     **** 			op_float(OP_FLOAT);
3552:src/xeq.c     **** 		else
3553:src/xeq.c     **** 			op_fract(OP_FRACT);
3554:src/xeq.c     **** 	} else
3555:src/xeq.c     **** 		set_base(arg);
3556:src/xeq.c     **** }
3557:src/xeq.c     **** 
3558:src/xeq.c     **** 
3559:src/xeq.c     **** void op_fract(enum nilop op) {
3560:src/xeq.c     **** 	op_float(OP_FLOAT);
3561:src/xeq.c     **** 	UState.fract = 1;
3562:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
3563:src/xeq.c     **** 		UState.improperfrac = 1;
3564:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
3565:src/xeq.c     **** 		UState.improperfrac = 0;
3566:src/xeq.c     **** }
3567:src/xeq.c     **** 
3568:src/xeq.c     **** #ifdef INCLUDE_USER_MODE
3569:src/xeq.c     **** /* Save and restore user state.
3570:src/xeq.c     ****  */
3571:src/xeq.c     **** void cmdsavem(unsigned int arg, enum rarg op) {
3572:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
3573:src/xeq.c     **** }
3574:src/xeq.c     **** 
3575:src/xeq.c     **** void cmdrestm(unsigned int arg, enum rarg op) {
3576:src/xeq.c     **** 	const int dbl = is_dblmode();
3577:src/xeq.c     **** 	const int intm = is_intmode();
3578:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
3579:src/xeq.c     **** 
3580:src/xeq.c     **** 	// Fix things
3581:src/xeq.c     **** 	if ( UState.contrast == 0 )
3582:src/xeq.c     **** 		UState.contrast = 6;
ARM GAS  /tmp/ccjeMhND.s 			page 77


3583:src/xeq.c     **** 
3584:src/xeq.c     **** 	if (intm != is_intmode()) {
3585:src/xeq.c     **** 		// Switch back to decimal or integer mode
3586:src/xeq.c     **** 		UState.intm = intm;
3587:src/xeq.c     **** 		if (intm)
3588:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
3589:src/xeq.c     **** 		else
3590:src/xeq.c     **** 			switch_to_int();
3591:src/xeq.c     **** 	}
3592:src/xeq.c     **** 	if (! is_intmode() && dbl != is_dblmode()) {
3593:src/xeq.c     **** 		// Switch back to double/single precision
3594:src/xeq.c     **** 		UState.mode_double = dbl;
3595:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
3596:src/xeq.c     **** 	}
3597:src/xeq.c     **** }
3598:src/xeq.c     **** #endif
3599:src/xeq.c     **** 
3600:src/xeq.c     **** /* Process a single digit.
3601:src/xeq.c     ****  */
3602:src/xeq.c     **** #if 0 // unused
3603:src/xeq.c     **** static int is_digit(const char c) {
3604:src/xeq.c     **** 	if (c >= '0' && c <= '9')
3605:src/xeq.c     **** 		return 1;
3606:src/xeq.c     **** 	return 0;
3607:src/xeq.c     **** }
3608:src/xeq.c     **** 
3609:src/xeq.c     **** static int is_xdigit(const char c) {
3610:src/xeq.c     **** 	if (is_digit(c) || (c >= 'A' && c <= 'F'))
3611:src/xeq.c     **** 		return 1;
3612:src/xeq.c     **** 	return 0;
3613:src/xeq.c     **** }
3614:src/xeq.c     **** #endif
3615:src/xeq.c     **** 
3616:src/xeq.c     **** static void digit(unsigned int c) {
3617:src/xeq.c     **** 	const int intm = is_intmode();
3618:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
3619:src/xeq.c     **** 
3620:src/xeq.c     **** 	if (Cmdline[0] == '-')
3621:src/xeq.c     **** 		lim++;
3622:src/xeq.c     **** 	if (intm) {
3623:src/xeq.c     **** 		if (c >= int_base()) {
3624:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3625:src/xeq.c     **** 			return;
3626:src/xeq.c     **** 		}
3627:src/xeq.c     **** 	} else {
3628:src/xeq.c     **** 		if (c >= 10) {
3629:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3630:src/xeq.c     **** 			return;
3631:src/xeq.c     **** 		}
3632:src/xeq.c     **** 
3633:src/xeq.c     **** 		if (CmdLineEex) {
3634:src/xeq.c     **** 			lim = CMDLINELEN;
3635:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3636:src/xeq.c     **** 			if (CmdLineLength >= lim) {
3637:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
3638:src/xeq.c     **** 
3639:src/xeq.c     **** 				if (*p == '-')
ARM GAS  /tmp/ccjeMhND.s 			page 78


3640:src/xeq.c     **** 					p++;
3641:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
3642:src/xeq.c     **** 					p[0] = p[1];
3643:src/xeq.c     **** 					p++;
3644:src/xeq.c     **** 				}
3645:src/xeq.c     **** 				CmdLineLength--;
3646:src/xeq.c     **** 			}
3647:src/xeq.c     **** #endif
3648:src/xeq.c     **** 		}
3649:src/xeq.c     **** 		else {
3650:src/xeq.c     **** 			lim += CmdLineDot;
3651:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
3652:src/xeq.c     **** 			if (CmdLineDot >= 2) {
3653:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
3654:src/xeq.c     **** 				// Make space for the minus sign
3655:src/xeq.c     **** 				lim = CMDLINELEN - (Cmdline[0] != '-');
3656:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3657:src/xeq.c     **** 				lim += 1 + (find_char(Cmdline, '.')[1] == '.');
3658:src/xeq.c     **** #  else
3659:src/xeq.c     **** 				lim++;
3660:src/xeq.c     **** #  endif
3661:src/xeq.c     **** 			}
3662:src/xeq.c     **** #endif
3663:src/xeq.c     **** 		}
3664:src/xeq.c     **** 	}
3665:src/xeq.c     **** 	if (CmdLineLength >= lim
3666:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
3667:src/xeq.c     **** 		report_warn(ERR_TOO_LONG);
3668:src/xeq.c     **** 		return;
3669:src/xeq.c     **** 	}
3670:src/xeq.c     **** 
3671:src/xeq.c     **** 	if (c >= 10)
3672:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
3673:src/xeq.c     **** 	else {
3674:src/xeq.c     **** 		// Leading zeros in the exponent aren't visible to the user,
3675:src/xeq.c     **** 		// and they're removed automatically if digits are shifted,
3676:src/xeq.c     **** 		// so it's more consistent if they can't be entered, either.
3677:src/xeq.c     **** 		if (c == 0 && CmdLineEex) {
3678:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
3679:src/xeq.c     **** 				return;
3680:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3681:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'D')
3682:src/xeq.c     **** 				return;
3683:src/xeq.c     **** #else
3684:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == '-')
3685:src/xeq.c     **** 				return;
3686:src/xeq.c     **** #endif
3687:src/xeq.c     **** 		}
3688:src/xeq.c     **** 
3689:src/xeq.c     **** 		append_cmdline(c + '0');
3690:src/xeq.c     **** 
3691:src/xeq.c     **** 		if (CmdLineEex)
3692:src/xeq.c     **** 			exponent_adjusted(1);
3693:src/xeq.c     **** 	}
3694:src/xeq.c     **** }
3695:src/xeq.c     **** 
3696:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 79


3697:src/xeq.c     **** void set_entry() {
3698:src/xeq.c     **** 	if (!Running && !XromRunning)
3699:src/xeq.c     **** 		State.entryp = 1;
3700:src/xeq.c     **** }
3701:src/xeq.c     **** 
3702:src/xeq.c     **** 
3703:src/xeq.c     **** /* Decode and process the specials.  These are niladic functions and
3704:src/xeq.c     ****  * commands with non-standard stack operation.
3705:src/xeq.c     ****  */
3706:src/xeq.c     **** static void specials(const opcode op) {
3707:src/xeq.c     **** 	int opm = argKIND(op);
3708:src/xeq.c     **** 
3709:src/xeq.c     **** 	switch (opm) {
3710:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
3711:src/xeq.c     **** 	case OP_3:	case OP_4:	case OP_5:
3712:src/xeq.c     **** 	case OP_6:	case OP_7:	case OP_8:
3713:src/xeq.c     **** 	case OP_9:	case OP_A:	case OP_B:
3714:src/xeq.c     **** 	case OP_C:	case OP_D:	case OP_E:
3715:src/xeq.c     **** 	case OP_F:
3716:src/xeq.c     **** 		digit(opm - OP_0);
3717:src/xeq.c     **** 		break;
3718:src/xeq.c     **** 
3719:src/xeq.c     **** 	case OP_DOT:
3720:src/xeq.c     **** 		if (is_intmode())
3721:src/xeq.c     **** 			break;
3722:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3723:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 13 + CmdLineDot) {
3724:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
3725:src/xeq.c     **** #else
3726:src/xeq.c     **** #  if defined(PRETTY_FRACTION_ENTRY)
3727:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + 2*CmdLineDot) {
3728:src/xeq.c     **** #  else
3729:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + CmdLineDot) {
3730:src/xeq.c     **** #  endif
3731:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '.'
3732:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
3733:src/xeq.c     **** #endif
3734:src/xeq.c     **** 				digit(0);
3735:src/xeq.c     **** 			CmdLineDot++;
3736:src/xeq.c     **** 			append_cmdline('.');
3737:src/xeq.c     **** 		}
3738:src/xeq.c     **** 		break;
3739:src/xeq.c     **** 
3740:src/xeq.c     **** 	case OP_EEX:
3741:src/xeq.c     **** 		if (is_intmode())
3742:src/xeq.c     **** 			break;
3743:src/xeq.c     **** 		else {
3744:src/xeq.c     **** #if INCLUDE_EEX_PI == 2
3745:src/xeq.c     **** 			const int eex_pi = 1;
3746:src/xeq.c     **** #elif INCLUDE_EEX_PI == 1
3747:src/xeq.c     **** 			const int eex_pi = get_user_flag(regL_idx);
3748:src/xeq.c     **** #else
3749:src/xeq.c     **** 			const int eex_pi = 0;
3750:src/xeq.c     **** #endif
3751:src/xeq.c     **** 
3752:src/xeq.c     **** 			if (CmdLineDot == 2) {
3753:src/xeq.c     **** 				if (eex_pi) {
ARM GAS  /tmp/ccjeMhND.s 			page 80


3754:src/xeq.c     **** 					// fraction entered (two dots); execute ENTER and enter pi
3755:src/xeq.c     **** 					if (is_bad_cmdline()) {
3756:src/xeq.c     **** 						if (Running || XromRunning)
3757:src/xeq.c     **** 							report_err(ERR_DOMAIN);
3758:src/xeq.c     **** 						break;
3759:src/xeq.c     **** 					}
3760:src/xeq.c     **** 					process_cmdline();
3761:src/xeq.c     **** 					lift();
3762:src/xeq.c     **** 					copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3763:src/xeq.c     **** 					set_lift();
3764:src/xeq.c     **** 				}
3765:src/xeq.c     **** 				break;
3766:src/xeq.c     **** 			}
3767:src/xeq.c     **** 			if (CmdLineEex || CmdLineLength >= CMDLINELEN)
3768:src/xeq.c     **** 				break;
3769:src/xeq.c     **** 			if (eex_pi && CmdLineLength == 0) {
3770:src/xeq.c     **** 				// empty command line: enter pi
3771:src/xeq.c     **** 				lift_if_enabled();
3772:src/xeq.c     **** 				copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3773:src/xeq.c     **** 				set_lift();
3774:src/xeq.c     **** 				break;
3775:src/xeq.c     **** 			}
3776:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 1)
3777:src/xeq.c     **** 			if (UState.fract)
3778:src/xeq.c     **** 				break;
3779:src/xeq.c     **** #endif
3780:src/xeq.c     **** 			if (CmdLineLength == 0)
3781:src/xeq.c     **** 				digit(1);
3782:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
3783:src/xeq.c     **** 			append_cmdline('E');
3784:src/xeq.c     **** 		}
3785:src/xeq.c     **** 		break;
3786:src/xeq.c     **** 
3787:src/xeq.c     **** 	case OP_CHS:
3788:src/xeq.c     **** 		if (CmdLineLength)
3789:src/xeq.c     **** 			cmdlinechs();
3790:src/xeq.c     **** 		else if (is_intmode()) {
3791:src/xeq.c     **** 			setX_int(intChs(getX_int()));
3792:src/xeq.c     **** 			set_lift();
3793:src/xeq.c     **** 		} else {
3794:src/xeq.c     **** 			decNumber x, r;
3795:src/xeq.c     **** 
3796:src/xeq.c     **** 			getX(&x);
3797:src/xeq.c     **** 			dn_minus(&r, &x);
3798:src/xeq.c     **** 			setX(&r);
3799:src/xeq.c     **** 			set_lift();
3800:src/xeq.c     **** 		}
3801:src/xeq.c     **** 		break;
3802:src/xeq.c     **** 
3803:src/xeq.c     **** 	case OP_CLX:
3804:src/xeq.c     **** 		if (Running)
3805:src/xeq.c     **** 			illegal(op);
3806:src/xeq.c     **** 		else if (CmdLineLength) {
3807:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3808:src/xeq.c     **** 			if (CmdLineEex != 0 && Cmdline[CmdLineLength-1] == 'D') {
3809:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
3810:src/xeq.c     **** 				break;
ARM GAS  /tmp/ccjeMhND.s 			page 81


3811:src/xeq.c     **** 			}
3812:src/xeq.c     **** #endif
3813:src/xeq.c     **** 			CmdLineLength--;
3814:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
3815:src/xeq.c     **** 				CmdLineEex = 0;
3816:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
3817:src/xeq.c     **** 				CmdLineDot--;
3818:src/xeq.c     **** 		} else
3819:src/xeq.c     **** 			clrx(OP_rCLX);
3820:src/xeq.c     **** 		break;
3821:src/xeq.c     **** 
3822:src/xeq.c     **** 	case OP_ENTER:
3823:src/xeq.c     **** 		process_cmdline();
3824:src/xeq.c     **** 		lift();
3825:src/xeq.c     **** 		clr_lift();
3826:src/xeq.c     **** 		break;
3827:src/xeq.c     **** 
3828:src/xeq.c     **** 	case OP_SIGMAPLUS:
3829:src/xeq.c     **** 	case OP_SIGMAMINUS:
3830:src/xeq.c     **** 		if (is_intmode()) {
3831:src/xeq.c     **** 			bad_mode_error();
3832:src/xeq.c     **** 			break;
3833:src/xeq.c     **** 		}
3834:src/xeq.c     **** 		process_cmdline();
3835:src/xeq.c     **** 		clr_lift();
3836:src/xeq.c     **** 		setlastX();
3837:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
3838:src/xeq.c     **** 			sigma_plus();
3839:src/xeq.c     **** 		else
3840:src/xeq.c     **** 			sigma_minus();
3841:src/xeq.c     **** 		sigma_val(OP_sigmaN);
3842:src/xeq.c     **** 		break;
3843:src/xeq.c     **** 
3844:src/xeq.c     **** 	// Conditional tests vs registers....
3845:src/xeq.c     **** 	case OP_Xeq0:	case OP_Xlt0:	case OP_Xgt0:
3846:src/xeq.c     **** 	case OP_Xne0:	case OP_Xle0:	case OP_Xge0:
3847:src/xeq.c     **** 	case OP_Xapx0:
3848:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ZERO, (enum tst_op)(opm - OP_Xeq0));
3849:src/xeq.c     **** 		break;
3850:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
3851:src/xeq.c     **** 		do_ztst(&const_0, &const_0, (enum tst_op)(opm - OP_Zeq0));
3852:src/xeq.c     **** 		break;
3853:src/xeq.c     **** 
3854:src/xeq.c     **** 	case OP_Xeq1:	case OP_Xlt1:	case OP_Xgt1:
3855:src/xeq.c     **** 	case OP_Xne1:	case OP_Xle1:	case OP_Xge1:
3856:src/xeq.c     **** 	case OP_Xapx1:
3857:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ONE, (enum tst_op)(opm - OP_Xeq1));
3858:src/xeq.c     **** 		break;
3859:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
3860:src/xeq.c     **** 		do_ztst(&const_1, &const_0, (enum tst_op)(opm - OP_Zeq1));
3861:src/xeq.c     **** 		break;
3862:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
3863:src/xeq.c     **** 		do_ztst(&const_0, &const_1, (enum tst_op)(opm - OP_Zeqi));
3864:src/xeq.c     **** 		break;
3865:src/xeq.c     **** 
3866:src/xeq.c     **** 	default:
3867:src/xeq.c     **** 		illegal(op);
ARM GAS  /tmp/ccjeMhND.s 			page 82


3868:src/xeq.c     **** 	}
3869:src/xeq.c     **** }
3870:src/xeq.c     **** 
3871:src/xeq.c     **** enum trig_modes get_trig_mode(void) {
3872:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
3873:src/xeq.c     **** 		return TRIG_RAD;
3874:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
3875:src/xeq.c     **** 	return (enum trig_modes) UState.trigmode;
3876:src/xeq.c     **** }
3877:src/xeq.c     **** 
3878:src/xeq.c     **** void op_double(enum nilop op) {
3879:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
3880:src/xeq.c     **** 	const int intm = is_intmode();
3881:src/xeq.c     **** 	int i;
3882:src/xeq.c     **** 
3883:src/xeq.c     **** 	if (dbl != UState.mode_double) {
3884:src/xeq.c     **** 		// Mode switch
3885:src/xeq.c     **** 		if (dbl) {
3886:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
3887:src/xeq.c     **** 				// Need space for double precision stack
3888:src/xeq.c     **** 				cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
3889:src/xeq.c     **** 				if (Error) {
3890:src/xeq.c     **** 					return;
3891:src/xeq.c     **** 				}
3892:src/xeq.c     **** 			}
3893:src/xeq.c     **** 
3894:src/xeq.c     **** 			UState.mode_double = 1;
3895:src/xeq.c     **** 			if (! intm) {
3896:src/xeq.c     **** 				// Convert X to K to double precision
3897:src/xeq.c     **** 				// Avoid this in integer mode
3898:src/xeq.c     **** 				for (i = 0; i < STACK_SIZE + EXTRA_REG; ++i)
3899:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
3900:src/xeq.c     **** 			}
3901:src/xeq.c     **** 		}
3902:src/xeq.c     **** 		else {
3903:src/xeq.c     **** 			if (! intm) {
3904:src/xeq.c     **** 				// Convert X to K to single precision
3905:src/xeq.c     **** 				// Avoid this in integer mode
3906:src/xeq.c     **** 				for (i = STACK_SIZE + EXTRA_REG - 1; i >= 0; --i)
3907:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
3908:src/xeq.c     **** 			}
3909:src/xeq.c     **** 			UState.mode_double = 0;
3910:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
3911:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
3912:src/xeq.c     **** 		}
3913:src/xeq.c     **** 	}
3914:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
3915:src/xeq.c     **** 	if (intm) {
3916:src/xeq.c     **** 		// Do the necessary conversions from integer mode
3917:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
3918:src/xeq.c     **** 	}
3919:src/xeq.c     **** }
3920:src/xeq.c     **** 
3921:src/xeq.c     **** void cmdpause(unsigned int arg, enum rarg op) {
3922:src/xeq.c     **** 	display();
3923:src/xeq.c     **** #ifndef CONSOLE
3924:src/xeq.c     **** 	// decremented in the low level heartbeat
ARM GAS  /tmp/ccjeMhND.s 			page 83


3925:src/xeq.c     **** 	Pause = arg;
3926:src/xeq.c     **** 	GoFast = (arg == 0);
3927:src/xeq.c     **** #elif 0
3928:src/xeq.c     **** 	start_pause(arg);
3929:src/xeq.c     **** #else	
3930:src/xeq.c     **** #if defined(WIN32) && !defined(__GNUC__)
3931:src/xeq.c     **** #pragma warning(disable:4996)
3932:src/xeq.c     **** 	sleep(arg/10);
3933:src/xeq.c     **** #else
3934:src/xeq.c     **** 	usleep(arg * 100000);
3935:src/xeq.c     **** #endif
3936:src/xeq.c     **** #endif
3937:src/xeq.c     **** }
3938:src/xeq.c     **** 
3939:src/xeq.c     **** 
3940:src/xeq.c     **** 
3941:src/xeq.c     **** void op_setspeed(enum nilop op) {
3942:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
3943:src/xeq.c     **** 	update_speed(1);
3944:src/xeq.c     **** }
3945:src/xeq.c     **** 
3946:src/xeq.c     **** 
3947:src/xeq.c     **** void op_prompt(enum nilop op) {
3948:src/xeq.c     **** 	set_running_off();
3949:src/xeq.c     **** 	alpha_view_common(regX_idx);
3950:src/xeq.c     **** }
3951:src/xeq.c     **** 
3952:src/xeq.c     **** /* Test if a number is an integer or fractional */
3953:src/xeq.c     **** /* Special numbers are neither */
3954:src/xeq.c     **** void XisInt(enum nilop op) {
3955:src/xeq.c     **** 	decNumber x;
3956:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
3957:src/xeq.c     **** 	if ( is_intmode() )
3958:src/xeq.c     **** 		result = op_int;
3959:src/xeq.c     **** 	else if (decNumberIsSpecial(getX(&x)))
3960:src/xeq.c     **** 		result = 0;
3961:src/xeq.c     **** 	else
3962:src/xeq.c     **** 	        result = (is_int(&x) == op_int);
3963:src/xeq.c     **** 	fin_tst(result);
3964:src/xeq.c     **** }
3965:src/xeq.c     **** 
3966:src/xeq.c     **** /* Test if a number is an even or odd integer */
3967:src/xeq.c     **** /* fractional or special values are neither even nor odd */
3968:src/xeq.c     **** void XisEvenOrOdd(enum nilop op) {
3969:src/xeq.c     **** 	decNumber x;
3970:src/xeq.c     **** 	int odd = (op == OP_XisODD);
3971:src/xeq.c     **** 
3972:src/xeq.c     **** 	if (is_intmode()) {
3973:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
3974:src/xeq.c     **** 	} else {
3975:src/xeq.c     **** 		fin_tst(is_even(getX(&x)) == !odd);
3976:src/xeq.c     **** 	}
3977:src/xeq.c     **** }
3978:src/xeq.c     **** 
3979:src/xeq.c     **** 
3980:src/xeq.c     **** /* Test if a number is prime */
3981:src/xeq.c     **** void XisPrime(enum nilop op) {
ARM GAS  /tmp/ccjeMhND.s 			page 84


3982:src/xeq.c     **** 	unsigned long long int i;
3983:src/xeq.c     **** 	int sgn;
3984:src/xeq.c     **** 
3985:src/xeq.c     **** 	i = getX_int_sgn(&sgn);
3986:src/xeq.c     **** 	if (!is_intmode()) {
3987:src/xeq.c     **** 		decNumber x;
3988:src/xeq.c     **** 
3989:src/xeq.c     **** 		getX(&x);
3990:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
3991:src/xeq.c     **** 			sgn = 1; // not prime
3992:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
3993:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
3994:src/xeq.c     **** 			i = 0xFFFFFFFFFFFFFFFFull;
3995:src/xeq.c     **** 	}
3996:src/xeq.c     **** 	fin_tst(sgn == 0 && isPrime(i));
3997:src/xeq.c     **** }
3998:src/xeq.c     **** 
3999:src/xeq.c     **** /* Test is a number is infinite.
4000:src/xeq.c     ****  */
4001:src/xeq.c     **** void isInfinite(enum nilop op) {
4002:src/xeq.c     **** 	decNumber x;
4003:src/xeq.c     **** 
4004:src/xeq.c     **** 	getX(&x);
4005:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
4006:src/xeq.c     **** }
4007:src/xeq.c     **** 
4008:src/xeq.c     **** /* Test for NaN.
4009:src/xeq.c     ****  * this could be done by testing x != x, but having a special command
4010:src/xeq.c     ****  * for it reads easier.
4011:src/xeq.c     ****  */
4012:src/xeq.c     **** void isNan(enum nilop op) {
4013:src/xeq.c     **** 	decNumber x;
4014:src/xeq.c     **** 
4015:src/xeq.c     **** 	getX(&x);
4016:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
4017:src/xeq.c     **** }
4018:src/xeq.c     **** 
4019:src/xeq.c     **** void isSpecial(enum nilop op) {
4020:src/xeq.c     **** 	decNumber x;
4021:src/xeq.c     **** 
4022:src/xeq.c     **** 	getX(&x);
4023:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
4024:src/xeq.c     **** }
4025:src/xeq.c     **** 
4026:src/xeq.c     **** void op_entryp(enum nilop op) {
4027:src/xeq.c     **** 	fin_tst(State.entryp);
4028:src/xeq.c     **** }
4029:src/xeq.c     **** 
4030:src/xeq.c     **** /* Bulk register operations */
4031:src/xeq.c     **** int reg_decode(int *s, int *n, int *d, int flash) {
4032:src/xeq.c     **** 	decNumber x, y;
4033:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
4034:src/xeq.c     **** 
4035:src/xeq.c     **** 	if (is_intmode()) {
4036:src/xeq.c     **** 		bad_mode_error();
4037:src/xeq.c     **** 		return 1;
4038:src/xeq.c     **** 	}
ARM GAS  /tmp/ccjeMhND.s 			page 85


4039:src/xeq.c     **** 	getX(&x);			// sss.nnddd~
4040:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
4041:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
4042:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
4043:src/xeq.c     **** 
4044:src/xeq.c     **** 	if (rsrc < 0) {
4045:src/xeq.c     **** 		if (!flash)
4046:src/xeq.c     **** 			goto range_error;
4047:src/xeq.c     **** 		rsrc = -rsrc;
4048:src/xeq.c     **** 	}
4049:src/xeq.c     **** 	else
4050:src/xeq.c     **** 		flash = 0;
4051:src/xeq.c     **** 
4052:src/xeq.c     **** 	rdest = rsrc % 1000;		// ddd
4053:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
4054:src/xeq.c     **** 	num = rsrc % 100;		// nn
4055:src/xeq.c     **** 	rsrc /= 100;			// sss
4056:src/xeq.c     **** 
4057:src/xeq.c     **** 	mx_src = flash ? BackupFlash._numregs
4058:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
4059:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
4060:src/xeq.c     **** 	       : global_regs();
4061:src/xeq.c     **** 	if (rsrc >= mx_src)
4062:src/xeq.c     **** 		goto range_error;
4063:src/xeq.c     **** 
4064:src/xeq.c     **** 	if (d != NULL) {
4065:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
4066:src/xeq.c     **** 
4067:src/xeq.c     **** 		if (num == 0) {
4068:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
4069:src/xeq.c     **** 			if (flash || (rsrc >= LOCAL_REG_BASE) != (rdest >= LOCAL_REG_BASE))
4070:src/xeq.c     **** 				// source & destination in different memory areas
4071:src/xeq.c     **** 				num = mx_dest < mx_src ? mx_dest : mx_src;
4072:src/xeq.c     **** 			else {
4073:src/xeq.c     **** 				if (rsrc > rdest) {
4074:src/xeq.c     **** 					num = mx_src - rsrc;
4075:src/xeq.c     **** 					q = rsrc - rdest;
4076:src/xeq.c     **** 				}
4077:src/xeq.c     **** 				else {
4078:src/xeq.c     **** 					num = mx_dest - rdest;
4079:src/xeq.c     **** 					q = rdest - rsrc;
4080:src/xeq.c     **** 				}
4081:src/xeq.c     **** 				if (num > q)
4082:src/xeq.c     **** 					num = q;
4083:src/xeq.c     **** 			}
4084:src/xeq.c     **** 		}
4085:src/xeq.c     **** 		if (rdest >= LOCAL_REG_BASE)
4086:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
4087:src/xeq.c     **** 		if (rdest + num > mx_dest)
4088:src/xeq.c     **** 			goto range_error;
4089:src/xeq.c     **** 		// Set pointer
4090:src/xeq.c     **** 		*d = rdest;
4091:src/xeq.c     **** 	}
4092:src/xeq.c     **** 	else {
4093:src/xeq.c     **** 		if (num == 0) {
4094:src/xeq.c     **** 			num = mx_src - rsrc;
4095:src/xeq.c     **** 		}
ARM GAS  /tmp/ccjeMhND.s 			page 86


4096:src/xeq.c     **** 	}
4097:src/xeq.c     **** 	if (rsrc + num > mx_src)
4098:src/xeq.c     **** 		goto range_error;
4099:src/xeq.c     **** 
4100:src/xeq.c     **** 	// Now point to the correct source register
4101:src/xeq.c     **** 	*s = flash ? FLASH_REG_BASE + rsrc : rsrc;
4102:src/xeq.c     **** 	*n = num;
4103:src/xeq.c     **** 
4104:src/xeq.c     **** 	return 0;
4105:src/xeq.c     **** 
4106:src/xeq.c     **** range_error:
4107:src/xeq.c     **** 	report_err(ERR_RANGE);
4108:src/xeq.c     **** 	return 1;
4109:src/xeq.c     **** }
4110:src/xeq.c     **** 
4111:src/xeq.c     **** void op_regcopy(enum nilop op) {
4112:src/xeq.c     **** 	int s, n, d;
4113:src/xeq.c     **** 
4114:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 1))
4115:src/xeq.c     **** 		return;
4116:src/xeq.c     **** 	move_regs(get_reg_n(d), get_reg_n(s), n);
4117:src/xeq.c     **** }
4118:src/xeq.c     **** 
4119:src/xeq.c     **** void op_regswap(enum nilop op) {
4120:src/xeq.c     **** 	int s, n, d, i;
4121:src/xeq.c     **** 
4122:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 0) || s == d)
4123:src/xeq.c     **** 		return;
4124:src/xeq.c     **** 	else {
4125:src/xeq.c     **** 		if ((s > d && d + n > s) || (d > s && s + n > d))
4126:src/xeq.c     **** 			report_err(ERR_RANGE);
4127:src/xeq.c     **** 		else {
4128:src/xeq.c     **** 			for (i = 0; i < n; i++)
4129:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
4130:src/xeq.c     **** 		}
4131:src/xeq.c     **** 	}
4132:src/xeq.c     **** }
4133:src/xeq.c     **** 
4134:src/xeq.c     **** void op_regclr(enum nilop op) {
4135:src/xeq.c     **** 	int s, n;
4136:src/xeq.c     **** 
4137:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0))
4138:src/xeq.c     **** 		return;
4139:src/xeq.c     **** 	zero_regs(get_reg_n(s), n);
4140:src/xeq.c     **** }
4141:src/xeq.c     **** 
4142:src/xeq.c     **** void op_regsort(enum nilop op) {
4143:src/xeq.c     **** 	int s, n;
4144:src/xeq.c     **** 	decNumber pivot, a;
4145:src/xeq.c     **** 	int beg[10], end[10], i;
4146:src/xeq.c     **** 
4147:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0) || n == 1)
4148:src/xeq.c     **** 		return;
4149:src/xeq.c     **** 
4150:src/xeq.c     **** 	/* Non-recursive quicksort */
4151:src/xeq.c     **** 	beg[0] = 0;
4152:src/xeq.c     **** 	end[0] = n;
ARM GAS  /tmp/ccjeMhND.s 			page 87


4153:src/xeq.c     **** 	i = 0;
4154:src/xeq.c     **** 	while (i>=0) {
4155:src/xeq.c     **** 		int L = beg[i];
4156:src/xeq.c     **** 		int R = end[i] - 1;
4157:src/xeq.c     **** 		if (L<R) {
4158:src/xeq.c     **** 			const int pvt = s + L;
4159:src/xeq.c     **** 			getRegister(&pivot, pvt);
4160:src/xeq.c     **** 			while (L<R) {
4161:src/xeq.c     **** 				while (L<R) {
4162:src/xeq.c     **** 					getRegister(&a, s + R);
4163:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
4164:src/xeq.c     **** 						break;
4165:src/xeq.c     **** 					R--;
4166:src/xeq.c     **** 				}
4167:src/xeq.c     **** 				if (L<R)
4168:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
4169:src/xeq.c     **** 				while (L<R) {
4170:src/xeq.c     **** 					getRegister(&a, s + L);
4171:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
4172:src/xeq.c     **** 						break;
4173:src/xeq.c     **** 					L++;
4174:src/xeq.c     **** 				}
4175:src/xeq.c     **** 				if (L<R)
4176:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
4177:src/xeq.c     **** 			}
4178:src/xeq.c     **** 			setRegister(s + L, &pivot);
4179:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
4180:src/xeq.c     **** 				beg[i+1] = beg[i];
4181:src/xeq.c     **** 				end[i+1] = L;
4182:src/xeq.c     **** 				beg[i] = L+1;
4183:src/xeq.c     **** 			} else {
4184:src/xeq.c     **** 				beg[i+1] = L+1;
4185:src/xeq.c     **** 				end[i+1] = end[i];
4186:src/xeq.c     **** 				end[i] = L;
4187:src/xeq.c     **** 			}
4188:src/xeq.c     **** 			i++;
4189:src/xeq.c     **** 		} else
4190:src/xeq.c     **** 			i--;
4191:src/xeq.c     **** 	}
4192:src/xeq.c     **** }
4193:src/xeq.c     **** 
4194:src/xeq.c     **** 
4195:src/xeq.c     **** 
4196:src/xeq.c     **** /* Print a single program step nicely.
4197:src/xeq.c     ****  */
4198:src/xeq.c     **** static void print_step(const opcode op) {
4199:src/xeq.c     **** 	char buf[16];
4200:src/xeq.c     **** 	const unsigned int pc = state_pc();
4201:src/xeq.c     **** 	char *p = TraceBuffer;
4202:src/xeq.c     **** 
4203:src/xeq.c     **** 	if (isXROM(pc)) {
4204:src/xeq.c     **** 		*p++ = 'x';
4205:src/xeq.c     **** 	} else if (isLIB(pc)) {
4206:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
4207:src/xeq.c     **** 		*p++ = ' ';
4208:src/xeq.c     **** 	}
4209:src/xeq.c     **** 	if (pc == 0)
ARM GAS  /tmp/ccjeMhND.s 			page 88


4210:src/xeq.c     **** 		scopy(p, "000:");
4211:src/xeq.c     **** 	else {
4212:src/xeq.c     **** 		p = num_arg_0(p, user_pc(pc), 3);
4213:src/xeq.c     **** 		*p++ = ':';
4214:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
4215:src/xeq.c     **** 		if (*p == '?')
4216:src/xeq.c     **** 			*p = '\0';
4217:src/xeq.c     **** 	}
4218:src/xeq.c     **** 	State2.disp_small = 1;
4219:src/xeq.c     **** 	DispMsg = TraceBuffer;
4220:src/xeq.c     **** }
4221:src/xeq.c     **** 
4222:src/xeq.c     **** 
4223:src/xeq.c     **** /* When stuff gets done, there are some bits of state that need
4224:src/xeq.c     ****  * to be reset -- SHOW, ->base change the display mode until something
4225:src/xeq.c     ****  * happens.  This should be called on that something.
4226:src/xeq.c     ****  */
4227:src/xeq.c     **** void reset_volatile_state(void) {
4228:src/xeq.c     **** 	// extern int IntMaxWindow;
4229:src/xeq.c     **** 	// IntMaxWindow = 0;
4230:src/xeq.c     **** 	State2.window = 0;
4231:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
4232:src/xeq.c     **** }
4233:src/xeq.c     **** 
4234:src/xeq.c     **** 
4235:src/xeq.c     **** /*
4236:src/xeq.c     ****  *  Called by any long running function
4237:src/xeq.c     ****  */
4238:src/xeq.c     **** void busy(void)
4239:src/xeq.c     **** {
4240:src/xeq.c     **** 	/*
4241:src/xeq.c     **** 	 *  Serve the hardware watch dog
4242:src/xeq.c     **** 	 */
4243:src/xeq.c     **** 	watchdog();
4244:src/xeq.c     **** 
4245:src/xeq.c     **** 	/*
4246:src/xeq.c     **** 	 *  Increase the speed
4247:src/xeq.c     **** 	 */
4248:src/xeq.c     **** 	update_speed(1);
4249:src/xeq.c     **** 
4250:src/xeq.c     **** 	/*
4251:src/xeq.c     **** 	 *  Indicate busy state to the user
4252:src/xeq.c     **** 	 */
4253:src/xeq.c     **** 	if (!Busy && !Running) {
4254:src/xeq.c     **** 		Busy = 1;
4255:src/xeq.c     **** 		message("Wait...", NULL);
4256:src/xeq.c     **** 	}
4257:src/xeq.c     **** }
4258:src/xeq.c     **** 
4259:src/xeq.c     **** /***************************************************************************
4260:src/xeq.c     ****  * Function dispatchers.
4261:src/xeq.c     ****  */
4262:src/xeq.c     **** 
4263:src/xeq.c     **** /*
4264:src/xeq.c     ****  *  Check for a call into XROM space.
4265:src/xeq.c     ****  *  Fix the pointer alignment on the go.
4266:src/xeq.c     ****  */
ARM GAS  /tmp/ccjeMhND.s 			page 89


4267:src/xeq.c     **** #ifdef REALBUILD
4268:src/xeq.c     **** typedef unsigned long uintptr_t;
4269:src/xeq.c     **** #else
4270:src/xeq.c     **** #include <stdint.h>
4271:src/xeq.c     **** #endif
4272:src/xeq.c     **** 
4273:src/xeq.c     **** static const s_opcode *check_for_xrom_address(void *fp)
4274:src/xeq.c     **** {
4275:src/xeq.c     **** 	const s_opcode *xp = (const s_opcode *) ((uintptr_t ) fp & ~1);
4276:src/xeq.c     **** 	if (xp < xrom)
4277:src/xeq.c     **** 		return NULL;
4278:src/xeq.c     **** #ifndef REALBUILD
4279:src/xeq.c     **** 	// On the device, XROM is at the end so this is not needed
4280:src/xeq.c     **** 	if (xp >= xrom + xrom_size)
4281:src/xeq.c     **** 		return NULL;
4282:src/xeq.c     **** #endif
4283:src/xeq.c     **** 	return xp;
4284:src/xeq.c     **** }
4285:src/xeq.c     **** 
4286:src/xeq.c     **** /*
4287:src/xeq.c     ****  *  Check for a call into XROM space and dispatch it.
4288:src/xeq.c     ****  */
4289:src/xeq.c     **** static int dispatch_xrom(void *fp)
4290:src/xeq.c     **** {
4291:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
4292:src/xeq.c     **** 	if (xp == NULL)
4293:src/xeq.c     **** 		return 0;
4294:src/xeq.c     **** 	// set_lift();
4295:src/xeq.c     **** 	UserLocalRegs = LocalRegs;
4296:src/xeq.c     **** 	XromRunning = 1;
4297:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
4298:src/xeq.c     **** 	xeq_xrom();
4299:src/xeq.c     **** 	return 1;
4300:src/xeq.c     **** }
4301:src/xeq.c     **** 
4302:src/xeq.c     **** /*
4303:src/xeq.c     ****  *  Return an integer result from a decimal value, setting flags properly
4304:src/xeq.c     ****  */
4305:src/xeq.c     **** static long long int intResult(decNumber *r) {
 644              		.loc 1 4305 46 is_stmt 1 view -0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 80
 647              		@ frame_needed = 0, uses_anonymous_args = 0
4306:src/xeq.c     **** 	unsigned long long int i;
 648              		.loc 1 4306 2 view .LVU190
4307:src/xeq.c     **** 	int s;
 649              		.loc 1 4307 2 view .LVU191
4308:src/xeq.c     **** 	decNumber ri, t;
 650              		.loc 1 4308 2 view .LVU192
4309:src/xeq.c     **** 
4310:src/xeq.c     **** 	decNumberRoundDigits(&t, r, 25, DEC_ROUND_HALF_EVEN);
 651              		.loc 1 4310 2 view .LVU193
4305:src/xeq.c     **** 	unsigned long long int i;
 652              		.loc 1 4305 46 is_stmt 0 view .LVU194
 653 0000 30B5     		push	{r4, r5, lr}
 654              		.cfi_def_cfa_offset 12
 655              		.cfi_offset 4, -12
ARM GAS  /tmp/ccjeMhND.s 			page 90


 656              		.cfi_offset 5, -8
 657              		.cfi_offset 14, -4
 658 0002 95B0     		sub	sp, sp, #84
 659              		.cfi_def_cfa_offset 96
 660              		.loc 1 4310 2 view .LVU195
 661 0004 0323     		movs	r3, #3
 662 0006 1922     		movs	r2, #25
4305:src/xeq.c     **** 	unsigned long long int i;
 663              		.loc 1 4305 46 view .LVU196
 664 0008 0146     		mov	r1, r0
 665              		.loc 1 4310 2 view .LVU197
 666 000a 0BA8     		add	r0, sp, #44
 667              	.LVL49:
 668              		.loc 1 4310 2 view .LVU198
 669 000c FFF7FEFF 		bl	decNumberRoundDigits
 670              	.LVL50:
4311:src/xeq.c     **** 	decNumberTrunc(&ri, &t);
 671              		.loc 1 4311 2 is_stmt 1 view .LVU199
 672 0010 0BA9     		add	r1, sp, #44
 673 0012 02A8     		add	r0, sp, #8
 674 0014 FFF7FEFF 		bl	decNumberTrunc
 675              	.LVL51:
4312:src/xeq.c     **** 	set_carry(dn_eq(&ri, &t) ? 0 : 1);
 676              		.loc 1 4312 2 view .LVU200
 677              		.loc 1 4312 12 is_stmt 0 view .LVU201
 678 0018 0BA9     		add	r1, sp, #44
 679 001a 02A8     		add	r0, sp, #8
 680 001c FFF7FEFF 		bl	dn_eq
 681              	.LVL52:
 682              		.loc 1 4312 2 view .LVU202
 683 0020 B0FA80F0 		clz	r0, r0
 684 0024 4009     		lsrs	r0, r0, #5
 685 0026 FFF7FEFF 		bl	set_carry
 686              	.LVL53:
4313:src/xeq.c     **** 
4314:src/xeq.c     **** 	if (decNumberIsNaN(&t)) {
 687              		.loc 1 4314 2 is_stmt 1 view .LVU203
 688              		.loc 1 4314 6 is_stmt 0 view .LVU204
 689 002a 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 690              		.loc 1 4314 5 view .LVU205
 691 002e 13F0300F 		tst	r3, #48
 692 0032 22D1     		bne	.L67
4315:src/xeq.c     **** 		report_err(ERR_DOMAIN);
4316:src/xeq.c     **** 		return 0;
4317:src/xeq.c     **** 	}
4318:src/xeq.c     **** 	if (decNumberIsSpecial(&t)) {
 693              		.loc 1 4318 2 is_stmt 1 view .LVU206
 694              		.loc 1 4318 5 is_stmt 0 view .LVU207
 695 0034 13F0700F 		tst	r3, #112
 696 0038 18D1     		bne	.L68
4319:src/xeq.c     **** 		set_overflow(1);
4320:src/xeq.c     **** 		return 0;
4321:src/xeq.c     **** 	}
4322:src/xeq.c     **** 	i = dn_to_ull(&ri, &s);
 697              		.loc 1 4322 2 is_stmt 1 view .LVU208
 698              		.loc 1 4322 6 is_stmt 0 view .LVU209
 699 003a 02A8     		add	r0, sp, #8
ARM GAS  /tmp/ccjeMhND.s 			page 91


 700 003c 01A9     		add	r1, sp, #4
 701 003e FFF7FEFF 		bl	dn_to_ull
 702              	.LVL54:
 703 0042 0C46     		mov	r4, r1
4323:src/xeq.c     **** 	dn_abs(&t, &t);
 704              		.loc 1 4323 2 view .LVU210
 705 0044 0BA9     		add	r1, sp, #44
4322:src/xeq.c     **** 	dn_abs(&t, &t);
 706              		.loc 1 4322 6 view .LVU211
 707 0046 0546     		mov	r5, r0
 708              	.LVL55:
 709              		.loc 1 4323 2 is_stmt 1 view .LVU212
 710 0048 0846     		mov	r0, r1
 711              	.LVL56:
 712              		.loc 1 4323 2 is_stmt 0 view .LVU213
 713 004a FFF7FEFF 		bl	dn_abs
 714              	.LVL57:
4324:src/xeq.c     **** 	set_overflow(check_overflow(i) || dn_ge(&t, &const_2pow64));
 715              		.loc 1 4324 2 is_stmt 1 view .LVU214
 716              		.loc 1 4324 15 is_stmt 0 view .LVU215
 717 004e 2846     		mov	r0, r5
 718 0050 2146     		mov	r1, r4
 719 0052 FFF7FEFF 		bl	check_overflow
 720              	.LVL58:
 721              		.loc 1 4324 2 view .LVU216
 722 0056 E8B1     		cbz	r0, .L69
 723 0058 0120     		movs	r0, #1
 724              	.L63:
 725              		.loc 1 4324 2 discriminator 6 view .LVU217
 726 005a FFF7FEFF 		bl	set_overflow
 727              	.LVL59:
4325:src/xeq.c     **** 	return build_value(i, s);
 728              		.loc 1 4325 2 is_stmt 1 discriminator 6 view .LVU218
 729              		.loc 1 4325 9 is_stmt 0 discriminator 6 view .LVU219
 730 005e 019A     		ldr	r2, [sp, #4]
 731 0060 2846     		mov	r0, r5
 732 0062 2146     		mov	r1, r4
 733 0064 FFF7FEFF 		bl	build_value
 734              	.LVL60:
4326:src/xeq.c     **** }
 735              		.loc 1 4326 1 discriminator 6 view .LVU220
 736 0068 15B0     		add	sp, sp, #84
 737              		.cfi_remember_state
 738              		.cfi_def_cfa_offset 12
 739              		@ sp needed
 740 006a 30BD     		pop	{r4, r5, pc}
 741              	.LVL61:
 742              	.L68:
 743              		.cfi_restore_state
4319:src/xeq.c     **** 		return 0;
 744              		.loc 1 4319 3 is_stmt 1 view .LVU221
 745 006c 0120     		movs	r0, #1
 746 006e FFF7FEFF 		bl	set_overflow
 747              	.LVL62:
4320:src/xeq.c     **** 	}
 748              		.loc 1 4320 3 view .LVU222
4320:src/xeq.c     **** 	}
ARM GAS  /tmp/ccjeMhND.s 			page 92


 749              		.loc 1 4320 10 is_stmt 0 view .LVU223
 750 0072 0020     		movs	r0, #0
 751 0074 0146     		mov	r1, r0
 752              		.loc 1 4326 1 view .LVU224
 753 0076 15B0     		add	sp, sp, #84
 754              		.cfi_remember_state
 755              		.cfi_def_cfa_offset 12
 756              		@ sp needed
 757 0078 30BD     		pop	{r4, r5, pc}
 758              	.L67:
 759              		.cfi_restore_state
4315:src/xeq.c     **** 		return 0;
 760              		.loc 1 4315 3 is_stmt 1 view .LVU225
 761              	.LVL63:
 762              	.LBB1276:
 763              	.LBI1276:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 764              		.loc 1 537 5 view .LVU226
 765              	.LBB1277:
 538:src/xeq.c     **** 		Error = e;
 766              		.loc 1 538 2 view .LVU227
 538:src/xeq.c     **** 		Error = e;
 767              		.loc 1 538 12 is_stmt 0 view .LVU228
 768 007a 0A4B     		ldr	r3, .L70
 538:src/xeq.c     **** 		Error = e;
 769              		.loc 1 538 5 view .LVU229
 770 007c 1A68     		ldr	r2, [r3]
 771 007e 2AB9     		cbnz	r2, .L64
 772              	.LVL64:
 773              	.LBB1278:
 774              	.LBI1278:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 775              		.loc 1 537 5 is_stmt 1 view .LVU230
 776              	.LBB1279:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 777              		.loc 1 539 3 view .LVU231
 778              	.LBE1279:
 779              	.LBE1278:
 780              	.LBE1277:
 781              	.LBE1276:
4316:src/xeq.c     **** 	}
 782              		.loc 1 4316 10 is_stmt 0 view .LVU232
 783 0080 0020     		movs	r0, #0
 784              	.LBB1286:
 785              	.LBB1284:
 786              	.LBB1282:
 787              	.LBB1280:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 788              		.loc 1 539 9 view .LVU233
 789 0082 0122     		movs	r2, #1
 790              	.LBE1280:
 791              	.LBE1282:
 792              	.LBE1284:
 793              	.LBE1286:
4316:src/xeq.c     **** 	}
 794              		.loc 1 4316 10 view .LVU234
 795 0084 0146     		mov	r1, r0
ARM GAS  /tmp/ccjeMhND.s 			page 93


 796              	.LBB1287:
 797              	.LBB1285:
 798              	.LBB1283:
 799              	.LBB1281:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 800              		.loc 1 539 9 view .LVU235
 801 0086 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 802              		.loc 1 540 3 is_stmt 1 view .LVU236
 803              	.LBE1281:
 804              	.LBE1283:
 805              	.LBE1285:
 806              	.LBE1287:
 807              		.loc 1 4326 1 is_stmt 0 view .LVU237
 808 0088 15B0     		add	sp, sp, #84
 809              		.cfi_remember_state
 810              		.cfi_def_cfa_offset 12
 811              		@ sp needed
 812 008a 30BD     		pop	{r4, r5, pc}
 813              	.LVL65:
 814              	.L64:
 815              		.cfi_restore_state
4316:src/xeq.c     **** 	}
 816              		.loc 1 4316 10 view .LVU238
 817 008c 0020     		movs	r0, #0
 818 008e 0146     		mov	r1, r0
 819              	.LVL66:
 820              		.loc 1 4326 1 view .LVU239
 821 0090 15B0     		add	sp, sp, #84
 822              		.cfi_remember_state
 823              		.cfi_def_cfa_offset 12
 824              		@ sp needed
 825 0092 30BD     		pop	{r4, r5, pc}
 826              	.LVL67:
 827              	.L69:
 828              		.cfi_restore_state
4324:src/xeq.c     **** 	return build_value(i, s);
 829              		.loc 1 4324 36 discriminator 2 view .LVU240
 830 0094 0449     		ldr	r1, .L70+4
 831 0096 0BA8     		add	r0, sp, #44
 832 0098 FFF7FEFF 		bl	dn_lt
 833              	.LVL68:
4324:src/xeq.c     **** 	return build_value(i, s);
 834              		.loc 1 4324 2 discriminator 2 view .LVU241
 835 009c B0FA80F0 		clz	r0, r0
 836 00a0 4009     		lsrs	r0, r0, #5
 837 00a2 DAE7     		b	.L63
 838              	.L71:
 839              		.align	2
 840              	.L70:
 841 00a4 00000000 		.word	Error
 842 00a8 00000000 		.word	const_2pow64
 843              		.cfi_endproc
 844              	.LFE234:
 846              		.section	.text.check_stack_overlap,"ax",%progbits
 847              		.align	1
 848              		.p2align 2,,3
ARM GAS  /tmp/ccjeMhND.s 			page 94


 849              		.syntax unified
 850              		.thumb
 851              		.thumb_func
 852              		.fpu fpv4-sp-d16
 854              	check_stack_overlap:
 855              	.LVL69:
 856              	.LFB143:
1931:src/xeq.c     **** 	const int n = stack_size();
 857              		.loc 1 1931 50 is_stmt 1 view -0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 0, uses_anonymous_args = 0
 861              		@ link register save eliminated.
1932:src/xeq.c     **** 
 862              		.loc 1 1932 2 view .LVU243
 863              	.LBB1314:
 864              	.LBI1314:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 865              		.loc 1 703 5 view .LVU244
 866              	.LBB1315:
 704:src/xeq.c     **** 		return 4;
 867              		.loc 1 704 2 view .LVU245
 704:src/xeq.c     **** 		return 4;
 868              		.loc 1 704 8 is_stmt 0 view .LVU246
 869 0000 194B     		ldr	r3, .L83
 870 0002 1A68     		ldr	r2, [r3]
 704:src/xeq.c     **** 		return 4;
 871              		.loc 1 704 6 view .LVU247
 872 0004 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 873              		.loc 1 704 5 view .LVU248
 874 0008 1B07     		lsls	r3, r3, #28
 875              	.LBE1315:
 876              	.LBE1314:
1931:src/xeq.c     **** 	const int n = stack_size();
 877              		.loc 1 1931 50 view .LVU249
 878 000a 30B4     		push	{r4, r5}
 879              		.cfi_def_cfa_offset 8
 880              		.cfi_offset 4, -8
 881              		.cfi_offset 5, -4
 882              	.LBB1320:
 883              	.LBB1318:
 704:src/xeq.c     **** 		return 4;
 884              		.loc 1 704 5 view .LVU250
 885 000c 25D5     		bpl	.L77
 886              	.LBB1316:
 887              	.LBI1316:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 888              		.loc 1 182 5 is_stmt 1 view .LVU251
 889              	.LBB1317:
 183:src/xeq.c     **** }
 890              		.loc 1 183 2 view .LVU252
 183:src/xeq.c     **** }
 891              		.loc 1 183 9 is_stmt 0 view .LVU253
 892 000e B2F8E037 		ldrh	r3, [r2, #2016]
 893              	.LBE1317:
 894              	.LBE1316:
ARM GAS  /tmp/ccjeMhND.s 			page 95


 704:src/xeq.c     **** 		return 4;
 895              		.loc 1 704 27 view .LVU254
 896 0012 9B0B     		lsrs	r3, r3, #14
 897 0014 032B     		cmp	r3, #3
 898 0016 1BD0     		beq	.L82
 899              	.L79:
 900 0018 0823     		movs	r3, #8
 706:src/xeq.c     **** }
 901              		.loc 1 706 9 view .LVU255
 902 001a 1C46     		mov	r4, r3
 903              	.L73:
 904              	.LVL70:
 706:src/xeq.c     **** }
 905              		.loc 1 706 9 view .LVU256
 906              	.LBE1318:
 907              	.LBE1320:
1934:src/xeq.c     **** 		return n;
 908              		.loc 1 1934 2 is_stmt 1 view .LVU257
 909              	.LBB1321:
 910              	.LBB1322:
 911              	.LBB1323:
 912              	.LBB1324:
 913              	.LBB1325:
 933:src/xeq.c     **** }
 914              		.loc 1 933 24 is_stmt 0 view .LVU258
 915 001c B2F8E857 		ldrh	r5, [r2, #2024]
 916              	.LBE1325:
 917              	.LBE1324:
 918              	.LBB1328:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 919              		.loc 1 240 24 view .LVU259
 920 0020 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 921              	.LBE1328:
 922              	.LBB1329:
 923              	.LBB1326:
 933:src/xeq.c     **** }
 924              		.loc 1 933 24 view .LVU260
 925 0024 44F20101 		movw	r1, #16385
 926              	.LBE1326:
 927              	.LBE1329:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 928              		.loc 1 239 5 view .LVU261
 929 0028 2940     		ands	r1, r1, r5
 930 002a B1F5804F 		cmp	r1, #16384
 931              	.LBB1330:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 932              		.loc 1 240 13 view .LVU262
 933 002e 08BF     		it	eq
 934 0030 0C3A     		subeq	r2, r2, #12
 935              	.LBE1330:
 936              	.LBE1323:
 937              	.LBE1322:
 938              	.LBE1321:
1934:src/xeq.c     **** 		return n;
 939              		.loc 1 1934 10 view .LVU263
 940 0032 0344     		add	r3, r3, r0
 941              	.LBB1335:
ARM GAS  /tmp/ccjeMhND.s 			page 96


 942              	.LBI1321:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 943              		.loc 1 250 14 is_stmt 1 view .LVU264
 944              	.LBE1335:
 251:src/xeq.c     **** }
 945              		.loc 1 251 2 view .LVU265
 946              	.LVL71:
 947              	.LBB1336:
 948              	.LBB1334:
 949              	.LBI1322:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 950              		.loc 1 238 14 view .LVU266
 951              	.LBB1333:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 952              		.loc 1 239 2 view .LVU267
 953              	.LBB1331:
 954              	.LBI1324:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 955              		.loc 1 932 5 view .LVU268
 956              	.LBB1327:
 933:src/xeq.c     **** }
 957              		.loc 1 933 2 view .LVU269
 958              	.LBE1327:
 959              	.LBE1331:
 960              	.LBB1332:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 961              		.loc 1 240 3 view .LVU270
 241:src/xeq.c     **** 	}
 962              		.loc 1 241 3 view .LVU271
 241:src/xeq.c     **** 	}
 963              		.loc 1 241 67 is_stmt 0 view .LVU272
 964 0034 08BF     		it	eq
 965 0036 5210     		asreq	r2, r2, #1
 966              	.LVL72:
 241:src/xeq.c     **** 	}
 967              		.loc 1 241 67 view .LVU273
 968              	.LBE1332:
 969              	.LBE1333:
 970              	.LBE1334:
 971              	.LBE1336:
1934:src/xeq.c     **** 		return n;
 972              		.loc 1 1934 5 view .LVU274
 973 0038 9342     		cmp	r3, r2
 974 003a 06D9     		bls	.L72
1934:src/xeq.c     **** 		return n;
 975              		.loc 1 1934 31 discriminator 1 view .LVU275
 976 003c 6F28     		cmp	r0, #111
 977 003e 04D8     		bhi	.L72
 978              	.LBB1337:
 979              	.LBI1337:
1931:src/xeq.c     **** 	const int n = stack_size();
 980              		.loc 1 1931 12 is_stmt 1 view .LVU276
 981              	.LVL73:
 982              	.LBB1338:
1937:src/xeq.c     **** 	return 0;
 983              		.loc 1 1937 2 view .LVU277
 984              	.LBB1339:
ARM GAS  /tmp/ccjeMhND.s 			page 97


 985              	.LBI1339:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 986              		.loc 1 537 5 view .LVU278
 987              	.LBB1340:
 538:src/xeq.c     **** 		Error = e;
 988              		.loc 1 538 2 view .LVU279
 538:src/xeq.c     **** 		Error = e;
 989              		.loc 1 538 12 is_stmt 0 view .LVU280
 990 0040 0A4B     		ldr	r3, .L83+4
 991 0042 1C68     		ldr	r4, [r3]
 992              	.LVL74:
 538:src/xeq.c     **** 		Error = e;
 993              		.loc 1 538 5 view .LVU281
 994 0044 64B9     		cbnz	r4, .L80
 995              	.LVL75:
 996              	.LBB1341:
 997              	.LBI1341:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 998              		.loc 1 537 5 is_stmt 1 view .LVU282
 999              	.LBB1342:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1000              		.loc 1 539 3 view .LVU283
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1001              		.loc 1 539 9 is_stmt 0 view .LVU284
 1002 0046 0C22     		movs	r2, #12
 1003 0048 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 1004              		.loc 1 540 3 is_stmt 1 view .LVU285
 1005              	.LVL76:
 1006              	.L72:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 1007              		.loc 1 540 3 is_stmt 0 view .LVU286
 1008              	.LBE1342:
 1009              	.LBE1341:
 1010              	.LBE1340:
 1011              	.LBE1339:
 1012              	.LBE1338:
 1013              	.LBE1337:
1939:src/xeq.c     **** 
 1014              		.loc 1 1939 1 view .LVU287
 1015 004a 2046     		mov	r0, r4
 1016              	.LVL77:
1939:src/xeq.c     **** 
 1017              		.loc 1 1939 1 view .LVU288
 1018 004c 30BC     		pop	{r4, r5}
 1019              		.cfi_remember_state
 1020              		.cfi_restore 5
 1021              		.cfi_restore 4
 1022              		.cfi_def_cfa_offset 0
 1023 004e 7047     		bx	lr
 1024              	.LVL78:
 1025              	.L82:
 1026              		.cfi_restore_state
 1027              	.LBB1346:
 1028              	.LBB1319:
 704:src/xeq.c     **** 		return 4;
 1029              		.loc 1 704 44 view .LVU289
ARM GAS  /tmp/ccjeMhND.s 			page 98


 1030 0050 074B     		ldr	r3, .L83+8
 704:src/xeq.c     **** 		return 4;
 1031              		.loc 1 704 41 view .LVU290
 1032 0052 93F90130 		ldrsb	r3, [r3, #1]
 1033 0056 002B     		cmp	r3, #0
 1034 0058 DEDB     		blt	.L79
 1035              	.L77:
 1036 005a 0423     		movs	r3, #4
 705:src/xeq.c     **** 	return 8;
 1037              		.loc 1 705 10 view .LVU291
 1038 005c 1C46     		mov	r4, r3
 1039 005e DDE7     		b	.L73
 1040              	.LVL79:
 1041              	.L80:
 705:src/xeq.c     **** 	return 8;
 1042              		.loc 1 705 10 view .LVU292
 1043              	.LBE1319:
 1044              	.LBE1346:
 1045              	.LBB1347:
 1046              	.LBB1345:
 1047              	.LBB1344:
 1048              	.LBB1343:
 1049 0060 0024     		movs	r4, #0
 1050              	.LVL80:
 705:src/xeq.c     **** 	return 8;
 1051              		.loc 1 705 10 view .LVU293
 1052              	.LBE1343:
 1053              	.LBE1344:
 1054              	.LBE1345:
 1055              	.LBE1347:
1939:src/xeq.c     **** 
 1056              		.loc 1 1939 1 view .LVU294
 1057 0062 2046     		mov	r0, r4
 1058              	.LVL81:
1939:src/xeq.c     **** 
 1059              		.loc 1 1939 1 view .LVU295
 1060 0064 30BC     		pop	{r4, r5}
 1061              		.cfi_restore 5
 1062              		.cfi_restore 4
 1063              		.cfi_def_cfa_offset 0
 1064 0066 7047     		bx	lr
 1065              	.L84:
 1066              		.align	2
 1067              	.L83:
 1068 0068 00000000 		.word	main_ram
 1069 006c 00000000 		.word	Error
 1070 0070 00000000 		.word	XromParams
 1071              		.cfi_endproc
 1072              	.LFE143:
 1074              		.section	.text.is_xrom,"ax",%progbits
 1075              		.align	1
 1076              		.p2align 2,,3
 1077              		.global	is_xrom
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1081              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccjeMhND.s 			page 99


 1083              	is_xrom:
 1084              	.LFB3:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 1085              		.loc 1 182 19 is_stmt 1 view -0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 0
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 1089              		@ link register save eliminated.
 183:src/xeq.c     **** }
 1090              		.loc 1 183 2 view .LVU297
 183:src/xeq.c     **** }
 1091              		.loc 1 183 9 is_stmt 0 view .LVU298
 1092 0000 054B     		ldr	r3, .L86
 1093 0002 1B68     		ldr	r3, [r3]
 1094 0004 B3F8E007 		ldrh	r0, [r3, #2016]
 1095 0008 800B     		lsrs	r0, r0, #14
 184:src/xeq.c     **** 
 1096              		.loc 1 184 1 view .LVU299
 1097 000a A0F10300 		sub	r0, #3
 1098 000e B0FA80F0 		clz	r0, r0
 1099 0012 4009     		lsrs	r0, r0, #5
 1100 0014 7047     		bx	lr
 1101              	.L87:
 1102 0016 00BF     		.align	2
 1103              	.L86:
 1104 0018 00000000 		.word	main_ram
 1105              		.cfi_endproc
 1106              	.LFE3:
 1108              		.section	.text.move_retstk,"ax",%progbits
 1109              		.align	1
 1110              		.p2align 2,,3
 1111              		.global	move_retstk
 1112              		.syntax unified
 1113              		.thumb
 1114              		.thumb_func
 1115              		.fpu fpv4-sp-d16
 1117              	move_retstk:
 1118              	.LVL82:
 1119              	.LFB4:
 193:src/xeq.c     **** #ifndef REALBUILD
 1120              		.loc 1 193 1 is_stmt 1 view -0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 196:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1124              		.loc 1 196 2 view .LVU301
 196:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1125              		.loc 1 196 6 is_stmt 0 view .LVU302
 1126 0000 1A4B     		ldr	r3, .L99
 196:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1127              		.loc 1 196 5 view .LVU303
 1128 0002 93F90130 		ldrsb	r3, [r3, #1]
 1129 0006 002B     		cmp	r3, #0
 1130 0008 25DB     		blt	.L97
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1131              		.loc 1 201 2 is_stmt 1 view .LVU304
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
ARM GAS  /tmp/ccjeMhND.s 			page 100


 1132              		.loc 1 201 19 is_stmt 0 view .LVU305
 1133 000a 194B     		ldr	r3, .L99+4
 193:src/xeq.c     **** #ifndef REALBUILD
 1134              		.loc 1 193 1 view .LVU306
 1135 000c 70B5     		push	{r4, r5, r6, lr}
 1136              		.cfi_def_cfa_offset 16
 1137              		.cfi_offset 4, -16
 1138              		.cfi_offset 5, -12
 1139              		.cfi_offset 6, -8
 1140              		.cfi_offset 14, -4
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1141              		.loc 1 201 19 view .LVU307
 1142 000e 1A68     		ldr	r2, [r3]
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1143              		.loc 1 201 17 view .LVU308
 1144 0010 184D     		ldr	r5, .L99+8
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1145              		.loc 1 201 19 view .LVU309
 1146 0012 B2F9E217 		ldrsh	r1, [r2, #2018]
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1147              		.loc 1 201 17 view .LVU310
 1148 0016 2B68     		ldr	r3, [r5]
 1149 0018 0B44     		add	r3, r3, r1
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1150              		.loc 1 201 5 view .LVU311
 1151 001a C342     		cmn	r3, r0
 1152 001c 0446     		mov	r4, r0
 1153 001e 13D4     		bmi	.L98
 205:src/xeq.c     **** 	RetStk += distance;
 1154              		.loc 1 205 2 is_stmt 1 view .LVU312
 1155 0020 154E     		ldr	r6, .L99+12
 1156 0022 3368     		ldr	r3, [r6]
 205:src/xeq.c     **** 	RetStk += distance;
 1157              		.loc 1 205 27 is_stmt 0 view .LVU313
 1158 0024 0818     		adds	r0, r1, r0
 1159              	.LVL83:
 205:src/xeq.c     **** 	RetStk += distance;
 1160              		.loc 1 205 60 view .LVU314
 1161 0026 4A42     		rsbs	r2, r1, #0
 205:src/xeq.c     **** 	RetStk += distance;
 1162              		.loc 1 205 2 view .LVU315
 1163 0028 03EB4000 		add	r0, r3, r0, lsl #1
 1164 002c 03EB4101 		add	r1, r3, r1, lsl #1
 1165 0030 5200     		lsls	r2, r2, #1
 1166 0032 FFF7FEFF 		bl	xcopy
 1167              	.LVL84:
 206:src/xeq.c     **** 	RetStkSize += distance;
 1168              		.loc 1 206 2 is_stmt 1 view .LVU316
 206:src/xeq.c     **** 	RetStkSize += distance;
 1169              		.loc 1 206 9 is_stmt 0 view .LVU317
 1170 0036 3368     		ldr	r3, [r6]
 207:src/xeq.c     **** 	return 0;
 1171              		.loc 1 207 13 view .LVU318
 1172 0038 2868     		ldr	r0, [r5]
 206:src/xeq.c     **** 	RetStkSize += distance;
 1173              		.loc 1 206 9 view .LVU319
 1174 003a 03EB4403 		add	r3, r3, r4, lsl #1
ARM GAS  /tmp/ccjeMhND.s 			page 101


 207:src/xeq.c     **** 	return 0;
 1175              		.loc 1 207 13 view .LVU320
 1176 003e 2044     		add	r0, r0, r4
 1177 0040 2860     		str	r0, [r5]
 206:src/xeq.c     **** 	RetStkSize += distance;
 1178              		.loc 1 206 9 view .LVU321
 1179 0042 3360     		str	r3, [r6]
 207:src/xeq.c     **** 	return 0;
 1180              		.loc 1 207 2 is_stmt 1 view .LVU322
 208:src/xeq.c     **** }
 1181              		.loc 1 208 2 view .LVU323
 208:src/xeq.c     **** }
 1182              		.loc 1 208 9 is_stmt 0 view .LVU324
 1183 0044 0020     		movs	r0, #0
 209:src/xeq.c     **** 
 1184              		.loc 1 209 1 view .LVU325
 1185 0046 70BD     		pop	{r4, r5, r6, pc}
 1186              	.LVL85:
 1187              	.L98:
 202:src/xeq.c     **** 		return 1;
 1188              		.loc 1 202 3 is_stmt 1 view .LVU326
 1189              	.LBB1360:
 1190              	.LBI1360:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1191              		.loc 1 537 5 view .LVU327
 1192              	.LBB1361:
 538:src/xeq.c     **** 		Error = e;
 1193              		.loc 1 538 2 view .LVU328
 538:src/xeq.c     **** 		Error = e;
 1194              		.loc 1 538 12 is_stmt 0 view .LVU329
 1195 0048 0C4B     		ldr	r3, .L99+16
 538:src/xeq.c     **** 		Error = e;
 1196              		.loc 1 538 5 view .LVU330
 1197 004a 1A68     		ldr	r2, [r3]
 1198 004c 52B9     		cbnz	r2, .L93
 1199              	.LVL86:
 1200              	.LBB1362:
 1201              	.LBI1362:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1202              		.loc 1 537 5 is_stmt 1 view .LVU331
 1203              	.LBB1363:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1204              		.loc 1 539 3 view .LVU332
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1205              		.loc 1 539 9 is_stmt 0 view .LVU333
 1206 004e 0B22     		movs	r2, #11
 1207 0050 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 1208              		.loc 1 540 3 is_stmt 1 view .LVU334
 1209              	.LBE1363:
 1210              	.LBE1362:
 1211              	.LBE1361:
 1212              	.LBE1360:
 203:src/xeq.c     **** 	}
 1213              		.loc 1 203 10 is_stmt 0 view .LVU335
 1214 0052 0120     		movs	r0, #1
 1215              	.LVL87:
ARM GAS  /tmp/ccjeMhND.s 			page 102


 209:src/xeq.c     **** 
 1216              		.loc 1 209 1 view .LVU336
 1217 0054 70BD     		pop	{r4, r5, r6, pc}
 1218              	.LVL88:
 1219              	.L97:
 1220              		.cfi_def_cfa_offset 0
 1221              		.cfi_restore 4
 1222              		.cfi_restore 5
 1223              		.cfi_restore 6
 1224              		.cfi_restore 14
 1225              	.LBB1365:
 1226              	.LBI1365:
 192:src/xeq.c     **** {
 1227              		.loc 1 192 5 is_stmt 1 view .LVU337
 192:src/xeq.c     **** {
 1228              		.loc 1 192 5 is_stmt 0 view .LVU338
 1229              	.LBE1365:
 197:src/xeq.c     **** 		return 1;
 1230              		.loc 1 197 3 is_stmt 1 view .LVU339
 1231              	.LBB1372:
 1232              	.LBB1366:
 1233              	.LBI1366:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1234              		.loc 1 537 5 view .LVU340
 1235              	.LBB1367:
 538:src/xeq.c     **** 		Error = e;
 1236              		.loc 1 538 2 view .LVU341
 538:src/xeq.c     **** 		Error = e;
 1237              		.loc 1 538 12 is_stmt 0 view .LVU342
 1238 0056 094B     		ldr	r3, .L99+16
 538:src/xeq.c     **** 		Error = e;
 1239              		.loc 1 538 5 view .LVU343
 1240 0058 1A68     		ldr	r2, [r3]
 1241 005a 2AB9     		cbnz	r2, .L92
 1242              	.LVL89:
 1243              	.LBB1368:
 1244              	.LBI1368:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1245              		.loc 1 537 5 is_stmt 1 view .LVU344
 1246              	.LBB1369:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1247              		.loc 1 539 3 view .LVU345
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1248              		.loc 1 539 9 is_stmt 0 view .LVU346
 1249 005c 0722     		movs	r2, #7
 1250 005e 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 1251              		.loc 1 540 3 is_stmt 1 view .LVU347
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1252              		.loc 1 539 9 is_stmt 0 view .LVU348
 1253 0060 0120     		movs	r0, #1
 1254              	.LVL90:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1255              		.loc 1 539 9 view .LVU349
 1256 0062 7047     		bx	lr
 1257              	.LVL91:
 1258              	.L93:
ARM GAS  /tmp/ccjeMhND.s 			page 103


 1259              		.cfi_def_cfa_offset 16
 1260              		.cfi_offset 4, -16
 1261              		.cfi_offset 5, -12
 1262              		.cfi_offset 6, -8
 1263              		.cfi_offset 14, -4
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1264              		.loc 1 539 9 view .LVU350
 1265              	.LBE1369:
 1266              	.LBE1368:
 1267              	.LBE1367:
 1268              	.LBE1366:
 1269              	.LBE1372:
 1270              	.LBB1373:
 1271              	.LBB1364:
 1272 0064 0120     		movs	r0, #1
 1273              	.LVL92:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1274              		.loc 1 539 9 view .LVU351
 1275              	.LBE1364:
 1276              	.LBE1373:
 209:src/xeq.c     **** 
 1277              		.loc 1 209 1 view .LVU352
 1278 0066 70BD     		pop	{r4, r5, r6, pc}
 1279              	.LVL93:
 1280              	.L92:
 1281              		.cfi_def_cfa_offset 0
 1282              		.cfi_restore 4
 1283              		.cfi_restore 5
 1284              		.cfi_restore 6
 1285              		.cfi_restore 14
 1286              	.LBB1374:
 1287              	.LBB1371:
 1288              	.LBB1370:
 209:src/xeq.c     **** 
 1289              		.loc 1 209 1 view .LVU353
 1290 0068 0120     		movs	r0, #1
 1291              	.LVL94:
 209:src/xeq.c     **** 
 1292              		.loc 1 209 1 view .LVU354
 1293              	.LBE1370:
 1294              	.LBE1371:
 1295              	.LBE1374:
 1296 006a 7047     		bx	lr
 1297              	.L100:
 1298              		.align	2
 1299              	.L99:
 1300 006c 00000000 		.word	XromParams
 1301 0070 00000000 		.word	main_ram
 1302 0074 00000000 		.word	RetStkSize
 1303 0078 00000000 		.word	RetStk
 1304 007c 00000000 		.word	Error
 1305              		.cfi_endproc
 1306              	.LFE4:
 1308              		.section	.text.local_levels,"ax",%progbits
 1309              		.align	1
 1310              		.p2align 2,,3
 1311              		.global	local_levels
ARM GAS  /tmp/ccjeMhND.s 			page 104


 1312              		.syntax unified
 1313              		.thumb
 1314              		.thumb_func
 1315              		.fpu fpv4-sp-d16
 1317              	local_levels:
 1318              	.LFB5:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1319              		.loc 1 214 24 is_stmt 1 view -0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 0
 1322              		@ frame_needed = 0, uses_anonymous_args = 0
 1323              		@ link register save eliminated.
 215:src/xeq.c     **** }
 1324              		.loc 1 215 2 view .LVU356
 215:src/xeq.c     **** }
 1325              		.loc 1 215 9 is_stmt 0 view .LVU357
 1326 0000 074B     		ldr	r3, .L105
 1327 0002 1B68     		ldr	r3, [r3]
 1328 0004 B3F9DE37 		ldrsh	r3, [r3, #2014]
 215:src/xeq.c     **** }
 1329              		.loc 1 215 57 view .LVU358
 1330 0008 002B     		cmp	r3, #0
 1331 000a 01DB     		blt	.L104
 1332 000c 0020     		movs	r0, #0
 216:src/xeq.c     **** 
 1333              		.loc 1 216 1 view .LVU359
 1334 000e 7047     		bx	lr
 1335              	.L104:
 215:src/xeq.c     **** }
 1336              		.loc 1 215 25 discriminator 1 view .LVU360
 1337 0010 044A     		ldr	r2, .L105+4
 1338 0012 1268     		ldr	r2, [r2]
 215:src/xeq.c     **** }
 1339              		.loc 1 215 57 discriminator 1 view .LVU361
 1340 0014 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 1341 0018 C0F30B00 		ubfx	r0, r0, #0, #12
 1342 001c 7047     		bx	lr
 1343              	.L106:
 1344 001e 00BF     		.align	2
 1345              	.L105:
 1346 0020 00000000 		.word	main_ram
 1347 0024 00000000 		.word	RetStk
 1348              		.cfi_endproc
 1349              	.LFE5:
 1351              		.section	.text.local_regs_rarg,"ax",%progbits
 1352              		.align	1
 1353              		.p2align 2,,3
 1354              		.global	local_regs_rarg
 1355              		.syntax unified
 1356              		.thumb
 1357              		.thumb_func
 1358              		.fpu fpv4-sp-d16
 1360              	local_regs_rarg:
 1361              	.LVL95:
 1362              	.LFB6:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1363              		.loc 1 222 35 is_stmt 1 view -0
ARM GAS  /tmp/ccjeMhND.s 			page 105


 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
 1367              		@ link register save eliminated.
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1368              		.loc 1 223 2 view .LVU363
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1369              		.loc 1 223 53 is_stmt 0 view .LVU364
 1370 0000 A0F17E03 		sub	r3, r0, #126
 1371 0004 012B     		cmp	r3, #1
 1372 0006 144B     		ldr	r3, .L116
 1373 0008 23D9     		bls	.L113
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1374              		.loc 1 223 53 discriminator 1 view .LVU365
 1375 000a 8028     		cmp	r0, #128
 1376 000c 11D0     		beq	.L114
 1377              	.LBB1375:
 1378              	.LBI1375:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1379              		.loc 1 932 5 is_stmt 1 view .LVU366
 1380              	.LBB1376:
 933:src/xeq.c     **** }
 1381              		.loc 1 933 2 view .LVU367
 933:src/xeq.c     **** }
 1382              		.loc 1 933 12 is_stmt 0 view .LVU368
 1383 000e 1B68     		ldr	r3, [r3]
 933:src/xeq.c     **** }
 1384              		.loc 1 933 24 view .LVU369
 1385 0010 B3F8E827 		ldrh	r2, [r3, #2024]
 1386 0014 44F20100 		movw	r0, #16385
 1387              	.LVL96:
 933:src/xeq.c     **** }
 1388              		.loc 1 933 24 view .LVU370
 1389              	.LBE1376:
 1390              	.LBE1375:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1391              		.loc 1 223 73 view .LVU371
 1392 0018 1040     		ands	r0, r0, r2
 1393 001a A0F58040 		sub	r0, r0, #16384
 1394 001e B0FA80F0 		clz	r0, r0
 1395 0022 4009     		lsrs	r0, r0, #5
 1396 0024 0230     		adds	r0, r0, #2
 1397              	.L109:
 224:src/xeq.c     **** }
 1398              		.loc 1 224 2 is_stmt 1 discriminator 8 view .LVU372
 1399              	.LBB1377:
 1400              	.LBI1377:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1401              		.loc 1 214 5 discriminator 8 view .LVU373
 1402              	.LBB1378:
 215:src/xeq.c     **** }
 1403              		.loc 1 215 2 discriminator 8 view .LVU374
 215:src/xeq.c     **** }
 1404              		.loc 1 215 9 is_stmt 0 discriminator 8 view .LVU375
 1405 0026 B3F9DE37 		ldrsh	r3, [r3, #2014]
 215:src/xeq.c     **** }
 1406              		.loc 1 215 57 discriminator 8 view .LVU376
ARM GAS  /tmp/ccjeMhND.s 			page 106


 1407 002a 002B     		cmp	r3, #0
 1408 002c 08DB     		blt	.L115
 1409              	.L112:
 1410 002e 0020     		movs	r0, #0
 1411              	.LBE1378:
 1412              	.LBE1377:
 225:src/xeq.c     **** 
 1413              		.loc 1 225 1 view .LVU377
 1414 0030 7047     		bx	lr
 1415              	.LVL97:
 1416              	.L114:
 225:src/xeq.c     **** 
 1417              		.loc 1 225 1 view .LVU378
 1418 0032 1B68     		ldr	r3, [r3]
 224:src/xeq.c     **** }
 1419              		.loc 1 224 2 is_stmt 1 view .LVU379
 1420              	.LBB1381:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1421              		.loc 1 214 5 view .LVU380
 1422              	.LBB1379:
 215:src/xeq.c     **** }
 1423              		.loc 1 215 2 view .LVU381
 215:src/xeq.c     **** }
 1424              		.loc 1 215 9 is_stmt 0 view .LVU382
 1425 0034 B3F9DE37 		ldrsh	r3, [r3, #2014]
 215:src/xeq.c     **** }
 1426              		.loc 1 215 57 view .LVU383
 1427 0038 002B     		cmp	r3, #0
 1428              	.LBE1379:
 1429              	.LBE1381:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1430              		.loc 1 223 53 view .LVU384
 1431 003a 4FF00300 		mov	r0, #3
 1432              	.LVL98:
 1433              	.LBB1382:
 1434              	.LBB1380:
 215:src/xeq.c     **** }
 1435              		.loc 1 215 57 view .LVU385
 1436 003e F6DA     		bge	.L112
 1437              	.L115:
 215:src/xeq.c     **** }
 1438              		.loc 1 215 25 view .LVU386
 1439 0040 064A     		ldr	r2, .L116+4
 1440 0042 1268     		ldr	r2, [r2]
 215:src/xeq.c     **** }
 1441              		.loc 1 215 57 view .LVU387
 1442 0044 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1443 0048 C3F30B03 		ubfx	r3, r3, #0, #12
 1444 004c 43FA00F0 		asr	r0, r3, r0
 1445 0050 7047     		bx	lr
 1446              	.LVL99:
 1447              	.L113:
 215:src/xeq.c     **** }
 1448              		.loc 1 215 57 view .LVU388
 1449 0052 1B68     		ldr	r3, [r3]
 1450              	.LBE1380:
 1451              	.LBE1382:
ARM GAS  /tmp/ccjeMhND.s 			page 107


 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1452              		.loc 1 223 53 view .LVU389
 1453 0054 0220     		movs	r0, #2
 1454              	.LVL100:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1455              		.loc 1 223 53 view .LVU390
 1456 0056 E6E7     		b	.L109
 1457              	.L117:
 1458              		.align	2
 1459              	.L116:
 1460 0058 00000000 		.word	main_ram
 1461 005c 00000000 		.word	RetStk
 1462              		.cfi_endproc
 1463              	.LFE6:
 1465              		.section	.text.get_reg_limit,"ax",%progbits
 1466              		.align	1
 1467              		.p2align 2,,3
 1468              		.syntax unified
 1469              		.thumb
 1470              		.thumb_func
 1471              		.fpu fpv4-sp-d16
 1473              	get_reg_limit:
 1474              	.LVL101:
 1475              	.LFB243:
4327:src/xeq.c     **** 
4328:src/xeq.c     **** 
4329:src/xeq.c     **** #ifndef UNIVERSAL_DISPATCH
4330:src/xeq.c     **** 
4331:src/xeq.c     **** 
4332:src/xeq.c     **** /*
4333:src/xeq.c     ****  *  Call a monadic function by reusing the decimal code for integer mode
4334:src/xeq.c     ****  */
4335:src/xeq.c     **** long long int intMonadic(long long int x) {
4336:src/xeq.c     **** 	int s;
4337:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
4338:src/xeq.c     **** 	decNumber rx, r;
4339:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4340:src/xeq.c     **** 
4341:src/xeq.c     **** 	if (isNULL(monfuncs[f].mondreal))
4342:src/xeq.c     **** 		bad_mode_error();
4343:src/xeq.c     **** 	else {
4344:src/xeq.c     **** 		FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4345:src/xeq.c     **** #ifndef REALBUILD
4346:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4347:src/xeq.c     **** 			bad_mode_error();
4348:src/xeq.c     **** 		else 
4349:src/xeq.c     **** #endif
4350:src/xeq.c     **** 		{
4351:src/xeq.c     **** 			ullint_to_dn(&rx, vx);
4352:src/xeq.c     **** 			if (s)
4353:src/xeq.c     **** 				dn_minus(&rx, &rx);
4354:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
4355:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4356:src/xeq.c     **** 			else
4357:src/xeq.c     **** 				return intResult(&r);
4358:src/xeq.c     **** 		}
4359:src/xeq.c     **** 	}
ARM GAS  /tmp/ccjeMhND.s 			page 108


4360:src/xeq.c     **** 	return 0;
4361:src/xeq.c     **** }
4362:src/xeq.c     **** 
4363:src/xeq.c     **** /*
4364:src/xeq.c     ****  *  Call a dyadic function by reusing the decimal code for integer mode
4365:src/xeq.c     ****  */
4366:src/xeq.c     **** long long int intDyadic(long long int y, long long int x) {
4367:src/xeq.c     **** 	int sx, sy;
4368:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4369:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
4370:src/xeq.c     **** 	decNumber rx, ry, r;
4371:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4372:src/xeq.c     **** 
4373:src/xeq.c     **** 	if (isNULL(dyfuncs[f].dydreal))
4374:src/xeq.c     **** 		bad_mode_error();
4375:src/xeq.c     **** 	else {
4376:src/xeq.c     **** 		FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4377:src/xeq.c     **** 
4378:src/xeq.c     **** #ifndef REALBUILD
4379:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4380:src/xeq.c     **** 			bad_mode_error();
4381:src/xeq.c     **** 		else 
4382:src/xeq.c     **** #endif
4383:src/xeq.c     **** 		{
4384:src/xeq.c     **** 			ullint_to_dn(&rx, vx);	if (sx) dn_minus(&rx, &rx);
4385:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
4386:src/xeq.c     **** 
4387:src/xeq.c     **** 			if (NULL == fp(&r, &ry, &rx))
4388:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4389:src/xeq.c     **** 			else
4390:src/xeq.c     **** 				return intResult(&r);
4391:src/xeq.c     **** 		}
4392:src/xeq.c     **** 	}
4393:src/xeq.c     **** 	return 0;
4394:src/xeq.c     **** }
4395:src/xeq.c     **** 
4396:src/xeq.c     **** 
4397:src/xeq.c     **** /* Dispatch routine for niladic functions.
4398:src/xeq.c     ****  */
4399:src/xeq.c     **** static void niladic(const opcode op) {
4400:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
4401:src/xeq.c     **** 
4402:src/xeq.c     **** 	process_cmdline();
4403:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
4404:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
4405:src/xeq.c     **** 			bad_mode_error();
4406:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
4407:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
4408:src/xeq.c     **** 			if (dispatch_xrom(fp))
4409:src/xeq.c     **** 				return;
4410:src/xeq.c     **** 			else {
4411:src/xeq.c     **** 				switch (NILADIC_NUMRESULTS(niladics[idx])) {
4412:src/xeq.c     **** 				case 2:	lift_if_enabled();
4413:src/xeq.c     **** 				case 1:	lift_if_enabled();
4414:src/xeq.c     **** 				default:
4415:src/xeq.c     **** 					fp((enum nilop)idx);
4416:src/xeq.c     **** 					break;
ARM GAS  /tmp/ccjeMhND.s 			page 109


4417:src/xeq.c     **** 				}
4418:src/xeq.c     **** 			}
4419:src/xeq.c     **** 		}
4420:src/xeq.c     **** 	} else
4421:src/xeq.c     **** 		illegal(op);
4422:src/xeq.c     **** 	if (idx != OP_rCLX)
4423:src/xeq.c     **** 		set_lift();
4424:src/xeq.c     **** }
4425:src/xeq.c     **** 
4426:src/xeq.c     **** 
4427:src/xeq.c     **** /* Dispatch routine for monadic operations.
4428:src/xeq.c     ****  * Since these functions take an argument from the X register, save it in
4429:src/xeq.c     ****  * lastx and then replace it with their result, we can factor out the common
4430:src/xeq.c     ****  * stack manipulatin code.
4431:src/xeq.c     ****  */
4432:src/xeq.c     **** static void monadic(const opcode op)
4433:src/xeq.c     **** {
4434:src/xeq.c     **** 	unsigned int f;
4435:src/xeq.c     **** 	process_cmdline_set_lift();
4436:src/xeq.c     **** 
4437:src/xeq.c     **** 	f = argKIND(op);
4438:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4439:src/xeq.c     **** 		if (is_intmode()) {
4440:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
4441:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
4442:src/xeq.c     **** 				if (dispatch_xrom(fp))
4443:src/xeq.c     **** 					return;
4444:src/xeq.c     **** 				else {
4445:src/xeq.c     **** 					long long int x = getX_int();
4446:src/xeq.c     **** 					x = fp(x);
4447:src/xeq.c     **** 					setlastX();
4448:src/xeq.c     **** 					setX_int(x);
4449:src/xeq.c     **** 				}
4450:src/xeq.c     **** 			} else
4451:src/xeq.c     **** 				bad_mode_error();
4452:src/xeq.c     **** 		} else {
4453:src/xeq.c     **** 			if (! isNULL(monfuncs[f].mondreal)) {
4454:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4455:src/xeq.c     **** 				if (dispatch_xrom(fp))
4456:src/xeq.c     **** 					return;
4457:src/xeq.c     **** 				else {
4458:src/xeq.c     **** 					decNumber x, r;
4459:src/xeq.c     **** 					getX(&x);
4460:src/xeq.c     **** 					if (NULL == fp(&r, &x))
4461:src/xeq.c     **** 						set_NaN(&r);
4462:src/xeq.c     **** 					setlastX();
4463:src/xeq.c     **** 					setX(&r);
4464:src/xeq.c     **** 				}
4465:src/xeq.c     **** 			} else
4466:src/xeq.c     **** 				bad_mode_error();
4467:src/xeq.c     **** 		}
4468:src/xeq.c     **** 	} else
4469:src/xeq.c     **** 		illegal(op);
4470:src/xeq.c     **** }
4471:src/xeq.c     **** 
4472:src/xeq.c     **** static void monadic_cmplex(const opcode op) {
4473:src/xeq.c     **** 	decNumber x, y, rx, ry;
ARM GAS  /tmp/ccjeMhND.s 			page 110


4474:src/xeq.c     **** 	unsigned int f;
4475:src/xeq.c     **** 
4476:src/xeq.c     **** 	process_cmdline_set_lift();
4477:src/xeq.c     **** 
4478:src/xeq.c     **** 	f = argKIND(op);
4479:src/xeq.c     **** 
4480:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4481:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
4482:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
4483:src/xeq.c     **** 			if (dispatch_xrom(fp))
4484:src/xeq.c     **** 				return;
4485:src/xeq.c     **** 			else {
4486:src/xeq.c     **** 				getXY(&x, &y);
4487:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
4488:src/xeq.c     **** 				setlastXY();
4489:src/xeq.c     **** 				setXY(&rx, &ry);
4490:src/xeq.c     **** 				set_was_complex();
4491:src/xeq.c     **** 			}
4492:src/xeq.c     **** 		} else
4493:src/xeq.c     **** 			bad_mode_error();
4494:src/xeq.c     **** 	} else
4495:src/xeq.c     **** 		illegal(op);
4496:src/xeq.c     **** }
4497:src/xeq.c     **** 
4498:src/xeq.c     **** /***************************************************************************
4499:src/xeq.c     ****  * Dyadic function handling.
4500:src/xeq.c     ****  */
4501:src/xeq.c     **** 
4502:src/xeq.c     **** /* Dispatch routine for dyadic operations.
4503:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4504:src/xeq.c     ****  * common stack manipulation.
4505:src/xeq.c     ****  */
4506:src/xeq.c     **** static void dyadic(const opcode op) {
4507:src/xeq.c     **** 
4508:src/xeq.c     **** 	unsigned int f;
4509:src/xeq.c     **** 	process_cmdline_set_lift();
4510:src/xeq.c     **** 
4511:src/xeq.c     **** 	f = argKIND(op);
4512:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4513:src/xeq.c     **** 		if (is_intmode()) {
4514:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
4515:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
4516:src/xeq.c     **** 				if (dispatch_xrom(fp))
4517:src/xeq.c     **** 					return;
4518:src/xeq.c     **** 				else {
4519:src/xeq.c     **** 					long long int x = getX_int();
4520:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4521:src/xeq.c     **** 					x = fp(y, x);
4522:src/xeq.c     **** 					setlastX();
4523:src/xeq.c     **** 					lower();
4524:src/xeq.c     **** 					setX_int(x);
4525:src/xeq.c     **** 				}
4526:src/xeq.c     **** 			} else
4527:src/xeq.c     **** 				bad_mode_error();
4528:src/xeq.c     **** 		} else {
4529:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydreal)) {
4530:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
ARM GAS  /tmp/ccjeMhND.s 			page 111


4531:src/xeq.c     **** 				if (dispatch_xrom(fp))
4532:src/xeq.c     **** 					return;
4533:src/xeq.c     **** 				else {
4534:src/xeq.c     **** 					decNumber x, y, r;
4535:src/xeq.c     **** 					getXY(&x, &y);
4536:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
4537:src/xeq.c     **** 						set_NaN(&r);
4538:src/xeq.c     **** 					setlastX();
4539:src/xeq.c     **** 					lower();
4540:src/xeq.c     **** 					setX(&r);
4541:src/xeq.c     **** 				}
4542:src/xeq.c     **** 			} else
4543:src/xeq.c     **** 				bad_mode_error();
4544:src/xeq.c     **** 		}
4545:src/xeq.c     **** 	} else
4546:src/xeq.c     **** 		illegal(op);
4547:src/xeq.c     **** }
4548:src/xeq.c     **** 
4549:src/xeq.c     **** static void dyadic_cmplex(const opcode op) {
4550:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
4551:src/xeq.c     **** 	unsigned int f;
4552:src/xeq.c     **** 
4553:src/xeq.c     **** 	process_cmdline_set_lift();
4554:src/xeq.c     **** 
4555:src/xeq.c     **** 	f = argKIND(op);
4556:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4557:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
4558:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
4559:src/xeq.c     **** 			if (dispatch_xrom(fp))
4560:src/xeq.c     **** 				return;
4561:src/xeq.c     **** 			else {
4562:src/xeq.c     **** 				getXYZT(&x1, &y1, &x2, &y2);
4563:src/xeq.c     **** 
4564:src/xeq.c     **** 				fp(&xr, &yr, &x2, &y2, &x1, &y1);
4565:src/xeq.c     **** 
4566:src/xeq.c     **** 				setlastXY();
4567:src/xeq.c     **** 				lower2();
4568:src/xeq.c     **** 				setXY(&xr, &yr);
4569:src/xeq.c     **** 				set_was_complex();
4570:src/xeq.c     **** 			}
4571:src/xeq.c     **** 		} else
4572:src/xeq.c     **** 			bad_mode_error();
4573:src/xeq.c     **** 	} else
4574:src/xeq.c     **** 		illegal(op);
4575:src/xeq.c     **** }
4576:src/xeq.c     **** 
4577:src/xeq.c     **** /* Dispatch routine for triadic operations.
4578:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4579:src/xeq.c     ****  * common stack manipulation.
4580:src/xeq.c     ****  */
4581:src/xeq.c     **** static void triadic(const opcode op) {
4582:src/xeq.c     **** 	unsigned int f;
4583:src/xeq.c     **** 	process_cmdline_set_lift();
4584:src/xeq.c     **** 
4585:src/xeq.c     **** 	f = argKIND(op);
4586:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
4587:src/xeq.c     **** 		if (is_intmode()) {
ARM GAS  /tmp/ccjeMhND.s 			page 112


4588:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
4589:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
4590:src/xeq.c     **** 				if (dispatch_xrom(fp))
4591:src/xeq.c     **** 					return;
4592:src/xeq.c     **** 				else {
4593:src/xeq.c     **** 					long long int x = getX_int();
4594:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4595:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
4596:src/xeq.c     **** 					x = fp(z, y, x);
4597:src/xeq.c     **** 					setlastX();
4598:src/xeq.c     **** 					lower();
4599:src/xeq.c     **** 					lower();
4600:src/xeq.c     **** 					setX_int(x);
4601:src/xeq.c     **** 				}
4602:src/xeq.c     **** 			} else
4603:src/xeq.c     **** 				bad_mode_error();
4604:src/xeq.c     **** 		} else {
4605:src/xeq.c     **** 			if (! isNULL(trifuncs[f].trireal)) {
4606:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
4607:src/xeq.c     **** 				if (dispatch_xrom(fp))
4608:src/xeq.c     **** 					return;
4609:src/xeq.c     **** 				else {
4610:src/xeq.c     **** 					decNumber x, y, z, r;
4611:src/xeq.c     **** 					getXYZ(&x, &y, &z);
4612:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
4613:src/xeq.c     **** 						set_NaN(&r);
4614:src/xeq.c     **** 					setlastX();
4615:src/xeq.c     **** 					lower();
4616:src/xeq.c     **** 					lower();
4617:src/xeq.c     **** 					setX(&r);
4618:src/xeq.c     **** 				}
4619:src/xeq.c     **** 			} else
4620:src/xeq.c     **** 				bad_mode_error();
4621:src/xeq.c     **** 		}
4622:src/xeq.c     **** 	} else
4623:src/xeq.c     **** 		illegal(op);
4624:src/xeq.c     **** }
4625:src/xeq.c     **** 
4626:src/xeq.c     **** 
4627:src/xeq.c     **** #else // UNIVERSAL_DISPATCH
4628:src/xeq.c     **** 
4629:src/xeq.c     **** 
4630:src/xeq.c     **** /*
4631:src/xeq.c     ****  *  Call functions by reusing the decimal code for integer mode
4632:src/xeq.c     ****  */
4633:src/xeq.c     **** static long long int universal_dispatch_int(long long int y, long long int x, unsigned int dyadic)
4634:src/xeq.c     **** {
4635:src/xeq.c     **** 	int sx, sy;
4636:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4637:src/xeq.c     **** 	unsigned long long int vy;
4638:src/xeq.c     **** 	decNumber rx, ry, r;
4639:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4640:src/xeq.c     **** 	void (*function_pointer)(void);
4641:src/xeq.c     **** 
4642:src/xeq.c     **** #ifdef SHORT_POINTERS
4643:src/xeq.c     **** 	unsigned short compact_pointer;
4644:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
ARM GAS  /tmp/ccjeMhND.s 			page 113


4645:src/xeq.c     **** #else
4646:src/xeq.c     **** 	void (*compact_pointer)(void);
4647:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4648:src/xeq.c     **** #endif
4649:src/xeq.c     **** 
4650:src/xeq.c     **** 	if (dyadic) {
4651:src/xeq.c     **** 		vy = extract_value(y, &sy);
4652:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4653:src/xeq.c     **** 	}
4654:src/xeq.c     **** 	else {
4655:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4656:src/xeq.c     **** 	}
4657:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4658:src/xeq.c     **** 		bad_mode_error();
4659:src/xeq.c     **** 	}
4660:src/xeq.c     **** 	else {
4661:src/xeq.c     **** 		function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4662:src/xeq.c     **** #ifndef REALBUILD
4663:src/xeq.c     **** 		if (check_for_xrom_address(function_pointer) != NULL) {
4664:src/xeq.c     **** 			bad_mode_error();
4665:src/xeq.c     **** 		}
4666:src/xeq.c     **** 		else
4667:src/xeq.c     **** #endif
4668:src/xeq.c     **** 		{
4669:src/xeq.c     **** 			void *result;
4670:src/xeq.c     **** 
4671:src/xeq.c     **** 			ullint_to_dn(&rx, vx);		if (sx) dn_minus(&rx, &rx);
4672:src/xeq.c     **** 			if (dyadic) {
4673:src/xeq.c     **** 				ullint_to_dn(&ry, vy);		if (sy) dn_minus(&ry, &ry);
4674:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r, &ry, &rx);
4675:src/xeq.c     **** 			}
4676:src/xeq.c     **** 			else {
4677:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r, &rx);
4678:src/xeq.c     **** 			}
4679:src/xeq.c     **** 			if (NULL == result) {
4680:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4681:src/xeq.c     **** 			}
4682:src/xeq.c     **** 			else {
4683:src/xeq.c     **** 				return intResult(&r);
4684:src/xeq.c     **** 			}
4685:src/xeq.c     **** 		}
4686:src/xeq.c     **** 	}
4687:src/xeq.c     **** 	return 0;
4688:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
4689:src/xeq.c     **** }
4690:src/xeq.c     **** 
4691:src/xeq.c     **** 
4692:src/xeq.c     **** long long int intMonadic(long long int x)
4693:src/xeq.c     **** {
4694:src/xeq.c     **** 	return universal_dispatch_int(0, x, 0);
4695:src/xeq.c     **** }
4696:src/xeq.c     **** 
4697:src/xeq.c     **** long long int intDyadic(long long int y, long long int x)
4698:src/xeq.c     **** {
4699:src/xeq.c     **** 	return universal_dispatch_int(y, x, 1);
4700:src/xeq.c     **** }
4701:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 114


4702:src/xeq.c     **** 
4703:src/xeq.c     **** /*
4704:src/xeq.c     ****  *  Universal dispatch function for niladic, monadic, dyadic and triadic functions, both real and c
4705:src/xeq.c     ****  */
4706:src/xeq.c     **** static void universal_dispatch(const opcode op, const unsigned int operands, const unsigned int com
4707:src/xeq.c     **** {
4708:src/xeq.c     **** 	const int intmode = is_intmode();
4709:src/xeq.c     **** 	volatile long long int ix; // declared volatile to avoid bogus warning about variable possibly bei
4710:src/xeq.c     **** 	const unsigned int f = argKIND(op);
4711:src/xeq.c     **** 	void (*function_pointer)(void);
4712:src/xeq.c     **** 
4713:src/xeq.c     **** #ifdef SHORT_POINTERS
4714:src/xeq.c     **** 	unsigned short compact_pointer;
4715:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4716:src/xeq.c     **** #else
4717:src/xeq.c     **** 	void (*compact_pointer)(void);
4718:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4719:src/xeq.c     **** #endif
4720:src/xeq.c     **** 
4721:src/xeq.c     **** 	process_cmdline();
4722:src/xeq.c     **** 	if (operands != 0) {
4723:src/xeq.c     **** 		set_lift();
4724:src/xeq.c     **** 	}
4725:src/xeq.c     **** 	switch (operands) {
4726:src/xeq.c     **** 	default:
4727:src/xeq.c     **** 	case 0:
4728:src/xeq.c     **** 		if (f >= NUM_NILADIC) {
4729:src/xeq.c     **** illegal:
4730:src/xeq.c     **** 			illegal(op);
4731:src/xeq.c     **** 			goto finish_niladic;
4732:src/xeq.c     **** 		}
4733:src/xeq.c     **** 		if (intmode && NILADIC_NOTINT(niladics[f])) {
4734:src/xeq.c     **** 			goto bad_mode;
4735:src/xeq.c     **** 		}
4736:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)niladics[f].niladicf;
4737:src/xeq.c     **** 		break;
4738:src/xeq.c     **** 
4739:src/xeq.c     **** 	case 1:
4740:src/xeq.c     **** 		if (f >= NUM_MONADIC)
4741:src/xeq.c     **** 			goto illegal;
4742:src/xeq.c     **** 		if (intmode)
4743:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].monint;
4744:src/xeq.c     **** 		else if (complex)
4745:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondcmplx;
4746:src/xeq.c     **** 		else
4747:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4748:src/xeq.c     **** 		break;
4749:src/xeq.c     **** 
4750:src/xeq.c     **** 	case 2:
4751:src/xeq.c     **** 		if (f >= NUM_DYADIC)
4752:src/xeq.c     **** 			goto illegal;
4753:src/xeq.c     **** 		if (intmode)
4754:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydint;
4755:src/xeq.c     **** 		else if (complex)
4756:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydcmplx;
4757:src/xeq.c     **** 		else
4758:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
ARM GAS  /tmp/ccjeMhND.s 			page 115


4759:src/xeq.c     **** 		break;
4760:src/xeq.c     **** 
4761:src/xeq.c     **** 	case 3:
4762:src/xeq.c     **** 		if (f >= NUM_TRIADIC)
4763:src/xeq.c     **** 			goto illegal;
4764:src/xeq.c     **** 		if (intmode)
4765:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].triint;
4766:src/xeq.c     **** 		else
4767:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].trireal;
4768:src/xeq.c     **** 		break;
4769:src/xeq.c     **** 	}
4770:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4771:src/xeq.c     **** 		if (operands != 0) {
4772:src/xeq.c     **** 			// The original niladic() function doesn't invoke
4773:src/xeq.c     **** 			// bad_mode_error() if the function pointer is null.
4774:src/xeq.c     **** 			// TODO:  Verify that this behavior is really needed.
4775:src/xeq.c     **** bad_mode:
4776:src/xeq.c     **** 			bad_mode_error();
4777:src/xeq.c     **** 		}
4778:src/xeq.c     **** 		goto finish_niladic;
4779:src/xeq.c     **** 	}
4780:src/xeq.c     **** 	function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4781:src/xeq.c     **** 	if (dispatch_xrom(function_pointer)) {
4782:src/xeq.c     **** 		return;
4783:src/xeq.c     **** 	}
4784:src/xeq.c     **** 	if (operands == 0) {
4785:src/xeq.c     **** 		switch (NILADIC_NUMRESULTS(niladics[f])) {
4786:src/xeq.c     **** 		case 2:		lift_if_enabled(); // fall through
4787:src/xeq.c     **** 		case 1:		lift_if_enabled(); break;
4788:src/xeq.c     **** 		}
4789:src/xeq.c     **** 		((FP_NILADIC)function_pointer)((enum nilop)f);
4790:src/xeq.c     **** finish_niladic:
4791:src/xeq.c     **** 		// If an error occurred, we end up here even if a non-niladic function was called.
4792:src/xeq.c     **** 		// set_lift() is always called for non-niladic functions so calling it again does no harm.
4793:src/xeq.c     **** 		if (f != OP_rCLX) {
4794:src/xeq.c     **** 			set_lift();
4795:src/xeq.c     **** 		}
4796:src/xeq.c     **** 	}
4797:src/xeq.c     **** 	else if (intmode) {
4798:src/xeq.c     **** 		long long int iy;
4799:src/xeq.c     **** 		long long int iz;
4800:src/xeq.c     **** 
4801:src/xeq.c     **** 		ix = getX_int();
4802:src/xeq.c     **** 		iy = get_reg_n_int(regY_idx);
4803:src/xeq.c     **** 		switch (operands) {
4804:src/xeq.c     **** 		default:
4805:src/xeq.c     **** 		case 1:
4806:src/xeq.c     **** 			ix = ((FP_MONADIC_INT)function_pointer)(ix);
4807:src/xeq.c     **** 			break;
4808:src/xeq.c     **** 
4809:src/xeq.c     **** 		case 2:
4810:src/xeq.c     **** 			ix = ((FP_DYADIC_INT)function_pointer)(iy, ix);
4811:src/xeq.c     **** 			break;
4812:src/xeq.c     **** 
4813:src/xeq.c     **** 		case 3:
4814:src/xeq.c     **** 			iz = get_reg_n_int(regZ_idx);
4815:src/xeq.c     **** 			ix = ((FP_TRIADIC_INT)function_pointer)(iz, iy, ix);
ARM GAS  /tmp/ccjeMhND.s 			page 116


4816:src/xeq.c     **** 			break;
4817:src/xeq.c     **** 		}
4818:src/xeq.c     **** 		goto finish_x;
4819:src/xeq.c     **** 	}
4820:src/xeq.c     **** 	else {
4821:src/xeq.c     **** 		decNumber x, y, z, t, r1;
4822:src/xeq.c     **** 
4823:src/xeq.c     **** 		if (operands + complex <= 2) {
4824:src/xeq.c     **** 			getXY(&x, &y);
4825:src/xeq.c     **** 		}
4826:src/xeq.c     **** 		else {
4827:src/xeq.c     **** 			getXYZT(&x, &y, &z, &t);
4828:src/xeq.c     **** 		}
4829:src/xeq.c     **** 
4830:src/xeq.c     **** 		if (complex) {
4831:src/xeq.c     **** 			decNumber r2;
4832:src/xeq.c     **** 
4833:src/xeq.c     **** 			if (operands == 1) {
4834:src/xeq.c     **** 				((FP_MONADIC_CMPLX)function_pointer)(&r1, &r2, &x, &y);
4835:src/xeq.c     **** 			}
4836:src/xeq.c     **** 			else {
4837:src/xeq.c     **** 				((FP_DYADIC_CMPLX)function_pointer)(&r1, &r2, &z, &t, &x, &y);
4838:src/xeq.c     **** 			}
4839:src/xeq.c     **** 			setlastXY();
4840:src/xeq.c     **** 			if (operands != 1) {
4841:src/xeq.c     **** 				lower2();
4842:src/xeq.c     **** 			}
4843:src/xeq.c     **** 			setXY(&r1, &r2);
4844:src/xeq.c     **** 			set_was_complex();
4845:src/xeq.c     **** 		}
4846:src/xeq.c     **** 		else { // real
4847:src/xeq.c     **** 			void *result;
4848:src/xeq.c     **** 
4849:src/xeq.c     **** 			switch (operands) {
4850:src/xeq.c     **** 			default:
4851:src/xeq.c     **** 			case 1:
4852:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r1, &x);
4853:src/xeq.c     **** 				break;
4854:src/xeq.c     **** 
4855:src/xeq.c     **** 			case 2:
4856:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r1, &y, &x);
4857:src/xeq.c     **** 				break;
4858:src/xeq.c     **** 
4859:src/xeq.c     **** 			case 3:
4860:src/xeq.c     **** 				result = ((FP_TRIADIC_REAL)function_pointer)(&r1, &z, &y, &x);
4861:src/xeq.c     **** 				break;
4862:src/xeq.c     **** 			}
4863:src/xeq.c     **** 			if (NULL == result) {
4864:src/xeq.c     **** 				set_NaN(&r1);
4865:src/xeq.c     **** 			}
4866:src/xeq.c     **** finish_x:
4867:src/xeq.c     **** 			setlastX();
4868:src/xeq.c     **** 			switch (operands) {
4869:src/xeq.c     **** 			case 3:		lower(); // fall through
4870:src/xeq.c     **** 			case 2:		lower(); break;
4871:src/xeq.c     **** 			}
4872:src/xeq.c     **** 			if (!intmode) {
ARM GAS  /tmp/ccjeMhND.s 			page 117


4873:src/xeq.c     **** 				setX(&r1);
4874:src/xeq.c     **** 			}
4875:src/xeq.c     **** 			else {
4876:src/xeq.c     **** 				setX_int(ix);
4877:src/xeq.c     **** 			}
4878:src/xeq.c     **** 		}
4879:src/xeq.c     **** 	}
4880:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
4881:src/xeq.c     **** }
4882:src/xeq.c     **** 
4883:src/xeq.c     **** 
4884:src/xeq.c     **** static void niladic(const opcode op)
4885:src/xeq.c     **** {
4886:src/xeq.c     **** 	universal_dispatch(op, 0, 0);
4887:src/xeq.c     **** }
4888:src/xeq.c     **** 
4889:src/xeq.c     **** static void monadic(const opcode op)
4890:src/xeq.c     **** {
4891:src/xeq.c     **** 	universal_dispatch(op, 1, 0);
4892:src/xeq.c     **** }
4893:src/xeq.c     **** 
4894:src/xeq.c     **** static void monadic_cmplex(const opcode op)
4895:src/xeq.c     **** {
4896:src/xeq.c     **** 	universal_dispatch(op, 1, 1);
4897:src/xeq.c     **** }
4898:src/xeq.c     **** 
4899:src/xeq.c     **** static void dyadic(const opcode op)
4900:src/xeq.c     **** {
4901:src/xeq.c     **** 	universal_dispatch(op, 2, 0);
4902:src/xeq.c     **** }
4903:src/xeq.c     **** 
4904:src/xeq.c     **** static void dyadic_cmplex(const opcode op)
4905:src/xeq.c     **** {
4906:src/xeq.c     **** 	universal_dispatch(op, 2, 1);
4907:src/xeq.c     **** }
4908:src/xeq.c     **** 
4909:src/xeq.c     **** static void triadic(const opcode op)
4910:src/xeq.c     **** {
4911:src/xeq.c     **** 	universal_dispatch(op, 3, 0);
4912:src/xeq.c     **** }
4913:src/xeq.c     **** 
4914:src/xeq.c     **** 
4915:src/xeq.c     **** #endif // UNIVERSAL_DISPATCH
4916:src/xeq.c     **** 
4917:src/xeq.c     **** 
4918:src/xeq.c     **** /*
4919:src/xeq.c     ****  *  Helper to check the maximum allowed register number, 
4920:src/xeq.c     ****  *  depending on command flags and current allocation.
4921:src/xeq.c     ****  *  This needs to be seperate because its called twice for indirect arguments
4922:src/xeq.c     ****  */
4923:src/xeq.c     **** static unsigned int get_reg_limit(unsigned int cmd, unsigned int arg)
4924:src/xeq.c     **** {
 1476              		.loc 1 4924 1 is_stmt 1 view -0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 0
 1479              		@ frame_needed = 0, uses_anonymous_args = 0
4925:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
ARM GAS  /tmp/ccjeMhND.s 			page 118


 1480              		.loc 1 4925 2 view .LVU392
4926:src/xeq.c     **** 
4927:src/xeq.c     **** 	if (arg < TOPREALREG) {
 1481              		.loc 1 4927 2 view .LVU393
 1482              		.loc 1 4927 5 is_stmt 0 view .LVU394
 1483 0000 6329     		cmp	r1, #99
4924:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1484              		.loc 1 4924 1 view .LVU395
 1485 0002 38B5     		push	{r3, r4, r5, lr}
 1486              		.cfi_def_cfa_offset 16
 1487              		.cfi_offset 3, -16
 1488              		.cfi_offset 4, -12
 1489              		.cfi_offset 5, -8
 1490              		.cfi_offset 14, -4
4924:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1491              		.loc 1 4924 1 view .LVU396
 1492 0004 0446     		mov	r4, r0
 1493              		.loc 1 4927 5 view .LVU397
 1494 0006 16D8     		bhi	.L119
4928:src/xeq.c     **** 		// Range checking for registers against variable boundary
4929:src/xeq.c     **** 		lim = global_regs_rarg((enum rarg) cmd) - 1;
 1495              		.loc 1 4929 3 is_stmt 1 view .LVU398
 1496              	.LVL102:
 1497              	.LBB1383:
 1498              	.LBI1383:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1499              		.loc 1 238 14 view .LVU399
 1500              	.LBB1384:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1501              		.loc 1 239 2 view .LVU400
 1502              	.LBB1385:
 1503              	.LBI1385:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1504              		.loc 1 932 5 view .LVU401
 1505              	.LBB1386:
 933:src/xeq.c     **** }
 1506              		.loc 1 933 2 view .LVU402
 933:src/xeq.c     **** }
 1507              		.loc 1 933 12 is_stmt 0 view .LVU403
 1508 0008 294B     		ldr	r3, .L139
 1509 000a 1A68     		ldr	r2, [r3]
 933:src/xeq.c     **** }
 1510              		.loc 1 933 24 view .LVU404
 1511 000c B2F8E817 		ldrh	r1, [r2, #2024]
 1512              	.LVL103:
 933:src/xeq.c     **** }
 1513              		.loc 1 933 24 view .LVU405
 1514 0010 44F20103 		movw	r3, #16385
 1515              	.LBE1386:
 1516              	.LBE1385:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1517              		.loc 1 239 5 view .LVU406
 1518 0014 0B40     		ands	r3, r3, r1
 1519 0016 B3F5804F 		cmp	r3, #16384
 1520 001a 2ED0     		beq	.L120
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1521              		.loc 1 239 19 view .LVU407
ARM GAS  /tmp/ccjeMhND.s 			page 119


 1522 001c 8028     		cmp	r0, #128
 1523 001e 39D0     		beq	.L136
 244:src/xeq.c     **** }
 1524              		.loc 1 244 3 is_stmt 1 view .LVU408
 244:src/xeq.c     **** }
 1525              		.loc 1 244 10 is_stmt 0 view .LVU409
 1526 0020 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1527              	.LVL104:
 1528              	.L124:
 244:src/xeq.c     **** }
 1529              		.loc 1 244 10 view .LVU410
 1530 0024 2349     		ldr	r1, .L139+4
 1531              	.LBE1384:
 1532              	.LBE1383:
 1533              		.loc 1 4929 7 view .LVU411
 1534 0026 0138     		subs	r0, r0, #1
 1535              	.LVL105:
 1536              		.loc 1 4929 7 view .LVU412
 1537 0028 2501     		lsls	r5, r4, #4
 1538              	.LVL106:
 1539              	.L125:
4930:src/xeq.c     **** 	}
4931:src/xeq.c     **** 	else if (argcmds[cmd].local) {
4932:src/xeq.c     **** 		// Range checking for local registers
4933:src/xeq.c     **** 		lim = NUMREG - 1 + local_regs_rarg((enum rarg) cmd);
4934:src/xeq.c     **** 	}
4935:src/xeq.c     **** 	if (argcmds[cmd].cmplx) {
 1540              		.loc 1 4935 2 is_stmt 1 view .LVU413
 1541              		.loc 1 4935 18 is_stmt 0 view .LVU414
 1542 002a 2944     		add	r1, r1, r5
 1543 002c 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 1544              		.loc 1 4935 5 view .LVU415
 1545 002e D906     		lsls	r1, r3, #27
 1546 0030 10D5     		bpl	.L126
 1547              	.L137:
4936:src/xeq.c     **** 		// one short of the last avialable register for complex access
4937:src/xeq.c     **** 		--lim;
 1548              		.loc 1 4937 3 is_stmt 1 view .LVU416
 1549 0032 0138     		subs	r0, r0, #1
 1550              	.LVL107:
 1551              	.L118:
4938:src/xeq.c     **** 	}
4939:src/xeq.c     **** 	else if (cmd == RARG_STOSTK || cmd == RARG_RCLSTK) {
4940:src/xeq.c     **** 		// avoid stack clash error in these commands
4941:src/xeq.c     **** 		lim -= stack_size() - 1;
4942:src/xeq.c     **** 	}
4943:src/xeq.c     **** 	return lim;
4944:src/xeq.c     **** }
 1552              		.loc 1 4944 1 is_stmt 0 view .LVU417
 1553 0034 38BD     		pop	{r3, r4, r5, pc}
 1554              	.LVL108:
 1555              	.L119:
4931:src/xeq.c     **** 		// Range checking for local registers
 1556              		.loc 1 4931 7 is_stmt 1 view .LVU418
4931:src/xeq.c     **** 		// Range checking for local registers
 1557              		.loc 1 4931 23 is_stmt 0 view .LVU419
 1558 0036 1F49     		ldr	r1, .L139+4
ARM GAS  /tmp/ccjeMhND.s 			page 120


 1559              	.LVL109:
4931:src/xeq.c     **** 		// Range checking for local registers
 1560              		.loc 1 4931 23 view .LVU420
 1561 0038 01EB0013 		add	r3, r1, r0, lsl #4
 1562 003c 0501     		lsls	r5, r0, #4
 1563 003e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
4931:src/xeq.c     **** 		// Range checking for local registers
 1564              		.loc 1 4931 10 view .LVU421
 1565 0040 1807     		lsls	r0, r3, #28
 1566              	.LVL110:
4931:src/xeq.c     **** 		// Range checking for local registers
 1567              		.loc 1 4931 10 view .LVU422
 1568 0042 18D5     		bpl	.L130
4933:src/xeq.c     **** 	}
 1569              		.loc 1 4933 3 is_stmt 1 view .LVU423
4933:src/xeq.c     **** 	}
 1570              		.loc 1 4933 22 is_stmt 0 view .LVU424
 1571 0044 E0B2     		uxtb	r0, r4
 1572 0046 FFF7FEFF 		bl	local_regs_rarg
 1573              	.LVL111:
4935:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1574              		.loc 1 4935 18 view .LVU425
 1575 004a 2944     		add	r1, r1, r5
4933:src/xeq.c     **** 	}
 1576              		.loc 1 4933 20 view .LVU426
 1577 004c 6F30     		adds	r0, r0, #111
 1578              	.LVL112:
4935:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1579              		.loc 1 4935 2 is_stmt 1 view .LVU427
4935:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1580              		.loc 1 4935 18 is_stmt 0 view .LVU428
 1581 004e 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
4935:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1582              		.loc 1 4935 5 view .LVU429
 1583 0050 D906     		lsls	r1, r3, #27
 1584 0052 EED4     		bmi	.L137
 1585              	.L126:
4939:src/xeq.c     **** 		// avoid stack clash error in these commands
 1586              		.loc 1 4939 7 is_stmt 1 view .LVU430
4939:src/xeq.c     **** 		// avoid stack clash error in these commands
 1587              		.loc 1 4939 30 is_stmt 0 view .LVU431
 1588 0054 223C     		subs	r4, r4, #34
 1589              	.LVL113:
4939:src/xeq.c     **** 		// avoid stack clash error in these commands
 1590              		.loc 1 4939 10 view .LVU432
 1591 0056 012C     		cmp	r4, #1
 1592 0058 ECD8     		bhi	.L118
4941:src/xeq.c     **** 	}
 1593              		.loc 1 4941 3 is_stmt 1 view .LVU433
 1594              	.LBB1391:
 1595              	.LBI1391:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 1596              		.loc 1 703 5 view .LVU434
 1597              	.LBB1392:
 704:src/xeq.c     **** 		return 4;
 1598              		.loc 1 704 2 view .LVU435
 704:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/ccjeMhND.s 			page 121


 1599              		.loc 1 704 8 is_stmt 0 view .LVU436
 1600 005a 154B     		ldr	r3, .L139
 1601 005c 1B68     		ldr	r3, [r3]
 704:src/xeq.c     **** 		return 4;
 1602              		.loc 1 704 6 view .LVU437
 1603 005e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 1604              		.loc 1 704 5 view .LVU438
 1605 0062 1207     		lsls	r2, r2, #28
 1606 0064 14D5     		bpl	.L131
 1607              	.LBB1393:
 1608              	.LBI1393:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 1609              		.loc 1 182 5 is_stmt 1 view .LVU439
 1610              	.LBB1394:
 183:src/xeq.c     **** }
 1611              		.loc 1 183 2 view .LVU440
 183:src/xeq.c     **** }
 1612              		.loc 1 183 9 is_stmt 0 view .LVU441
 1613 0066 B3F8E037 		ldrh	r3, [r3, #2016]
 1614              	.LBE1394:
 1615              	.LBE1393:
 704:src/xeq.c     **** 		return 4;
 1616              		.loc 1 704 27 view .LVU442
 1617 006a 9B0B     		lsrs	r3, r3, #14
 1618 006c 032B     		cmp	r3, #3
 1619 006e 16D0     		beq	.L138
 1620 0070 0723     		movs	r3, #7
 1621              	.L128:
 1622              	.LBE1392:
 1623              	.LBE1391:
4941:src/xeq.c     **** 	}
 1624              		.loc 1 4941 7 view .LVU443
 1625 0072 C01A     		subs	r0, r0, r3
 1626              	.LVL114:
4943:src/xeq.c     **** }
 1627              		.loc 1 4943 2 is_stmt 1 view .LVU444
 1628              		.loc 1 4944 1 is_stmt 0 view .LVU445
 1629 0074 38BD     		pop	{r3, r4, r5, pc}
 1630              	.LVL115:
 1631              	.L130:
4925:src/xeq.c     **** 
 1632              		.loc 1 4925 15 view .LVU446
 1633 0076 7020     		movs	r0, #112
 1634 0078 D7E7     		b	.L125
 1635              	.LVL116:
 1636              	.L120:
 1637              	.LBB1397:
 1638              	.LBB1389:
 1639              	.LBB1387:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1640              		.loc 1 240 3 is_stmt 1 view .LVU447
 241:src/xeq.c     **** 	}
 1641              		.loc 1 241 26 is_stmt 0 view .LVU448
 1642 007a A4F17E03 		sub	r3, r4, #126
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1643              		.loc 1 240 24 view .LVU449
ARM GAS  /tmp/ccjeMhND.s 			page 122


 1644 007e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1645              	.LVL117:
 241:src/xeq.c     **** 	}
 1646              		.loc 1 241 56 view .LVU450
 1647 0082 DBB2     		uxtb	r3, r3
 1648 0084 012B     		cmp	r3, #1
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1649              		.loc 1 240 13 view .LVU451
 1650 0086 A0F10C00 		sub	r0, r0, #12
 1651              	.LVL118:
 241:src/xeq.c     **** 	}
 1652              		.loc 1 241 3 is_stmt 1 view .LVU452
 241:src/xeq.c     **** 	}
 1653              		.loc 1 241 56 is_stmt 0 view .LVU453
 1654 008a CBD9     		bls	.L124
 241:src/xeq.c     **** 	}
 1655              		.loc 1 241 67 view .LVU454
 1656 008c 4010     		asrs	r0, r0, #1
 1657              	.LVL119:
 241:src/xeq.c     **** 	}
 1658              		.loc 1 241 67 view .LVU455
 1659 008e C9E7     		b	.L124
 1660              	.LVL120:
 1661              	.L131:
 241:src/xeq.c     **** 	}
 1662              		.loc 1 241 67 view .LVU456
 1663              	.LBE1387:
 1664              	.LBE1389:
 1665              	.LBE1397:
 1666              	.LBB1398:
 1667              	.LBB1395:
 1668 0090 0323     		movs	r3, #3
 1669 0092 EEE7     		b	.L128
 1670              	.LVL121:
 1671              	.L136:
 241:src/xeq.c     **** 	}
 1672              		.loc 1 241 67 view .LVU457
 1673              	.LBE1395:
 1674              	.LBE1398:
 1675              	.LBB1399:
 1676              	.LBB1390:
 1677              	.LBB1388:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1678              		.loc 1 240 3 is_stmt 1 view .LVU458
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1679              		.loc 1 240 24 is_stmt 0 view .LVU459
 1680 0094 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1681              	.LVL122:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1682              		.loc 1 240 13 view .LVU460
 1683 0098 0C38     		subs	r0, r0, #12
 1684              	.LVL123:
 241:src/xeq.c     **** 	}
 1685              		.loc 1 241 3 is_stmt 1 view .LVU461
 241:src/xeq.c     **** 	}
 1686              		.loc 1 241 67 is_stmt 0 view .LVU462
 1687 009a 4010     		asrs	r0, r0, #1
ARM GAS  /tmp/ccjeMhND.s 			page 123


 1688              	.LVL124:
 241:src/xeq.c     **** 	}
 1689              		.loc 1 241 67 view .LVU463
 1690 009c C2E7     		b	.L124
 1691              	.LVL125:
 1692              	.L138:
 241:src/xeq.c     **** 	}
 1693              		.loc 1 241 67 view .LVU464
 1694              	.LBE1388:
 1695              	.LBE1390:
 1696              	.LBE1399:
 1697              	.LBB1400:
 1698              	.LBB1396:
 704:src/xeq.c     **** 		return 4;
 1699              		.loc 1 704 44 view .LVU465
 1700 009e 064B     		ldr	r3, .L139+8
 704:src/xeq.c     **** 		return 4;
 1701              		.loc 1 704 41 view .LVU466
 1702 00a0 93F90130 		ldrsb	r3, [r3, #1]
 1703 00a4 002B     		cmp	r3, #0
 1704 00a6 B4BF     		ite	lt
 1705 00a8 0723     		movlt	r3, #7
 1706 00aa 0323     		movge	r3, #3
 1707 00ac E1E7     		b	.L128
 1708              	.L140:
 1709 00ae 00BF     		.align	2
 1710              	.L139:
 1711 00b0 00000000 		.word	main_ram
 1712 00b4 00000000 		.word	argcmds
 1713 00b8 00000000 		.word	XromParams
 1714              	.LBE1396:
 1715              	.LBE1400:
 1716              		.cfi_endproc
 1717              	.LFE243:
 1719              		.section	.text.local_regs,"ax",%progbits
 1720              		.align	1
 1721              		.p2align 2,,3
 1722              		.global	local_regs
 1723              		.syntax unified
 1724              		.thumb
 1725              		.thumb_func
 1726              		.fpu fpv4-sp-d16
 1728              	local_regs:
 1729              	.LFB7:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 1730              		.loc 1 230 22 is_stmt 1 view -0
 1731              		.cfi_startproc
 1732              		@ args = 0, pretend = 0, frame = 0
 1733              		@ frame_needed = 0, uses_anonymous_args = 0
 1734              		@ link register save eliminated.
 231:src/xeq.c     **** }
 1735              		.loc 1 231 2 view .LVU468
 1736              	.LVL126:
 1737              	.LBB1401:
 1738              	.LBI1401:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1739              		.loc 1 222 5 view .LVU469
ARM GAS  /tmp/ccjeMhND.s 			page 124


 1740              	.LBB1402:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1741              		.loc 1 223 2 view .LVU470
 1742              	.LBB1403:
 1743              	.LBI1403:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1744              		.loc 1 932 5 view .LVU471
 1745              	.LBB1404:
 933:src/xeq.c     **** }
 1746              		.loc 1 933 2 view .LVU472
 933:src/xeq.c     **** }
 1747              		.loc 1 933 12 is_stmt 0 view .LVU473
 1748 0000 0D4B     		ldr	r3, .L145
 1749 0002 1B68     		ldr	r3, [r3]
 1750              	.LVL127:
 933:src/xeq.c     **** }
 1751              		.loc 1 933 12 view .LVU474
 1752              	.LBE1404:
 1753              	.LBE1403:
 224:src/xeq.c     **** }
 1754              		.loc 1 224 2 is_stmt 1 view .LVU475
 1755              	.LBB1407:
 1756              	.LBI1407:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1757              		.loc 1 214 5 view .LVU476
 1758              	.LBB1408:
 215:src/xeq.c     **** }
 1759              		.loc 1 215 2 view .LVU477
 215:src/xeq.c     **** }
 1760              		.loc 1 215 9 is_stmt 0 view .LVU478
 1761 0004 B3F9DE27 		ldrsh	r2, [r3, #2014]
 215:src/xeq.c     **** }
 1762              		.loc 1 215 57 view .LVU479
 1763 0008 002A     		cmp	r2, #0
 1764 000a 01DB     		blt	.L144
 1765 000c 0020     		movs	r0, #0
 1766              	.LVL128:
 215:src/xeq.c     **** }
 1767              		.loc 1 215 57 view .LVU480
 1768              	.LBE1408:
 1769              	.LBE1407:
 1770              	.LBE1402:
 1771              	.LBE1401:
 232:src/xeq.c     **** 
 1772              		.loc 1 232 1 view .LVU481
 1773 000e 7047     		bx	lr
 1774              	.LVL129:
 1775              	.L144:
 1776              	.LBB1420:
 1777              	.LBB1419:
 1778              	.LBB1413:
 1779              	.LBB1405:
 933:src/xeq.c     **** }
 1780              		.loc 1 933 24 view .LVU482
 1781 0010 B3F8E807 		ldrh	r0, [r3, #2024]
 1782              	.LBE1405:
 1783              	.LBE1413:
ARM GAS  /tmp/ccjeMhND.s 			page 125


 1784              	.LBB1414:
 1785              	.LBB1409:
 215:src/xeq.c     **** }
 1786              		.loc 1 215 25 view .LVU483
 1787 0014 0949     		ldr	r1, .L145+4
 1788              	.LBE1409:
 1789              	.LBE1414:
 1790              	.LBB1415:
 1791              	.LBB1406:
 933:src/xeq.c     **** }
 1792              		.loc 1 933 24 view .LVU484
 1793 0016 44F20103 		movw	r3, #16385
 1794              	.LVL130:
 933:src/xeq.c     **** }
 1795              		.loc 1 933 24 view .LVU485
 1796              	.LBE1406:
 1797              	.LBE1415:
 1798              	.LBB1416:
 1799              	.LBB1410:
 215:src/xeq.c     **** }
 1800              		.loc 1 215 25 view .LVU486
 1801 001a 0968     		ldr	r1, [r1]
 1802              	.LBE1410:
 1803              	.LBE1416:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1804              		.loc 1 223 73 view .LVU487
 1805 001c 0340     		ands	r3, r3, r0
 1806 001e A3F58043 		sub	r3, r3, #16384
 1807              	.LBB1417:
 1808              	.LBB1411:
 215:src/xeq.c     **** }
 1809              		.loc 1 215 57 view .LVU488
 1810 0022 31F81200 		ldrh	r0, [r1, r2, lsl #1]
 1811              	.LBE1411:
 1812              	.LBE1417:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1813              		.loc 1 223 73 view .LVU489
 1814 0026 B3FA83F3 		clz	r3, r3
 1815 002a 5B09     		lsrs	r3, r3, #5
 1816 002c 0233     		adds	r3, r3, #2
 1817              	.LBB1418:
 1818              	.LBB1412:
 215:src/xeq.c     **** }
 1819              		.loc 1 215 57 view .LVU490
 1820 002e C0F30B00 		ubfx	r0, r0, #0, #12
 1821 0032 1841     		asrs	r0, r0, r3
 1822 0034 7047     		bx	lr
 1823              	.L146:
 1824 0036 00BF     		.align	2
 1825              	.L145:
 1826 0038 00000000 		.word	main_ram
 1827 003c 00000000 		.word	RetStk
 1828              	.LBE1412:
 1829              	.LBE1418:
 1830              	.LBE1419:
 1831              	.LBE1420:
 1832              		.cfi_endproc
ARM GAS  /tmp/ccjeMhND.s 			page 126


 1833              	.LFE7:
 1835              		.section	.text.global_regs_rarg,"ax",%progbits
 1836              		.align	1
 1837              		.p2align 2,,3
 1838              		.global	global_regs_rarg
 1839              		.syntax unified
 1840              		.thumb
 1841              		.thumb_func
 1842              		.fpu fpv4-sp-d16
 1844              	global_regs_rarg:
 1845              	.LVL131:
 1846              	.LFB8:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1847              		.loc 1 238 45 is_stmt 1 view -0
 1848              		.cfi_startproc
 1849              		@ args = 0, pretend = 0, frame = 0
 1850              		@ frame_needed = 0, uses_anonymous_args = 0
 1851              		@ link register save eliminated.
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1852              		.loc 1 239 2 view .LVU492
 1853              	.LBB1421:
 1854              	.LBI1421:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1855              		.loc 1 932 5 view .LVU493
 1856              	.LBB1422:
 933:src/xeq.c     **** }
 1857              		.loc 1 933 2 view .LVU494
 933:src/xeq.c     **** }
 1858              		.loc 1 933 12 is_stmt 0 view .LVU495
 1859 0000 0E4B     		ldr	r3, .L156
 1860 0002 1A68     		ldr	r2, [r3]
 933:src/xeq.c     **** }
 1861              		.loc 1 933 24 view .LVU496
 1862 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1863 0008 44F20103 		movw	r3, #16385
 1864              	.LBE1422:
 1865              	.LBE1421:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1866              		.loc 1 239 5 view .LVU497
 1867 000c 0B40     		ands	r3, r3, r1
 1868 000e B3F5804F 		cmp	r3, #16384
 1869 0012 09D0     		beq	.L148
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1870              		.loc 1 239 19 discriminator 1 view .LVU498
 1871 0014 8028     		cmp	r0, #128
 1872 0016 02D0     		beq	.L155
 244:src/xeq.c     **** }
 1873              		.loc 1 244 3 is_stmt 1 view .LVU499
 244:src/xeq.c     **** }
 1874              		.loc 1 244 10 is_stmt 0 view .LVU500
 1875 0018 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1876              	.LVL132:
 244:src/xeq.c     **** }
 1877              		.loc 1 244 10 view .LVU501
 1878 001c 7047     		bx	lr
 1879              	.LVL133:
 1880              	.L155:
ARM GAS  /tmp/ccjeMhND.s 			page 127


 1881              	.LBB1423:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1882              		.loc 1 240 3 is_stmt 1 view .LVU502
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1883              		.loc 1 240 24 is_stmt 0 view .LVU503
 1884 001e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1885              	.LVL134:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1886              		.loc 1 240 13 view .LVU504
 1887 0022 0C38     		subs	r0, r0, #12
 1888              	.LVL135:
 241:src/xeq.c     **** 	}
 1889              		.loc 1 241 3 is_stmt 1 view .LVU505
 1890              	.L153:
 241:src/xeq.c     **** 	}
 1891              		.loc 1 241 67 is_stmt 0 discriminator 1 view .LVU506
 1892 0024 4010     		asrs	r0, r0, #1
 1893              	.LVL136:
 241:src/xeq.c     **** 	}
 1894              		.loc 1 241 67 discriminator 1 view .LVU507
 1895 0026 7047     		bx	lr
 1896              	.LVL137:
 1897              	.L148:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1898              		.loc 1 240 3 is_stmt 1 view .LVU508
 241:src/xeq.c     **** 	}
 1899              		.loc 1 241 56 is_stmt 0 view .LVU509
 1900 0028 A0F17E03 		sub	r3, r0, #126
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1901              		.loc 1 240 24 view .LVU510
 1902 002c 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 241:src/xeq.c     **** 	}
 1903              		.loc 1 241 56 view .LVU511
 1904 0030 012B     		cmp	r3, #1
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1905              		.loc 1 240 13 view .LVU512
 1906 0032 A2F10C00 		sub	r0, r2, #12
 1907              	.LVL138:
 241:src/xeq.c     **** 	}
 1908              		.loc 1 241 3 is_stmt 1 view .LVU513
 241:src/xeq.c     **** 	}
 1909              		.loc 1 241 56 is_stmt 0 view .LVU514
 1910 0036 F5D8     		bhi	.L153
 1911              	.LBE1423:
 245:src/xeq.c     **** 
 1912              		.loc 1 245 1 view .LVU515
 1913 0038 7047     		bx	lr
 1914              	.L157:
 1915 003a 00BF     		.align	2
 1916              	.L156:
 1917 003c 00000000 		.word	main_ram
 1918              		.cfi_endproc
 1919              	.LFE8:
 1921              		.section	.text.global_regs,"ax",%progbits
 1922              		.align	1
 1923              		.p2align 2,,3
 1924              		.global	global_regs
ARM GAS  /tmp/ccjeMhND.s 			page 128


 1925              		.syntax unified
 1926              		.thumb
 1927              		.thumb_func
 1928              		.fpu fpv4-sp-d16
 1930              	global_regs:
 1931              	.LFB9:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 1932              		.loc 1 250 32 is_stmt 1 view -0
 1933              		.cfi_startproc
 1934              		@ args = 0, pretend = 0, frame = 0
 1935              		@ frame_needed = 0, uses_anonymous_args = 0
 1936              		@ link register save eliminated.
 251:src/xeq.c     **** }
 1937              		.loc 1 251 2 view .LVU517
 1938              	.LVL139:
 1939              	.LBB1424:
 1940              	.LBI1424:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1941              		.loc 1 238 14 view .LVU518
 1942              	.LBB1425:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1943              		.loc 1 239 2 view .LVU519
 1944              	.LBB1426:
 1945              	.LBI1426:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1946              		.loc 1 932 5 view .LVU520
 1947              	.LBB1427:
 933:src/xeq.c     **** }
 1948              		.loc 1 933 2 view .LVU521
 933:src/xeq.c     **** }
 1949              		.loc 1 933 12 is_stmt 0 view .LVU522
 1950 0000 074B     		ldr	r3, .L161
 1951 0002 1A68     		ldr	r2, [r3]
 933:src/xeq.c     **** }
 1952              		.loc 1 933 24 view .LVU523
 1953 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1954              	.LBE1427:
 1955              	.LBE1426:
 1956              	.LBB1429:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1957              		.loc 1 240 24 view .LVU524
 1958 0008 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1959              	.LBE1429:
 1960              	.LBB1430:
 1961              	.LBB1428:
 933:src/xeq.c     **** }
 1962              		.loc 1 933 24 view .LVU525
 1963 000c 44F20103 		movw	r3, #16385
 1964              	.LBE1428:
 1965              	.LBE1430:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1966              		.loc 1 239 5 view .LVU526
 1967 0010 0B40     		ands	r3, r3, r1
 1968 0012 B3F5804F 		cmp	r3, #16384
 1969              	.LBB1431:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1970              		.loc 1 240 3 is_stmt 1 view .LVU527
ARM GAS  /tmp/ccjeMhND.s 			page 129


 241:src/xeq.c     **** 	}
 1971              		.loc 1 241 3 view .LVU528
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1972              		.loc 1 240 13 is_stmt 0 view .LVU529
 1973 0016 04BF     		itt	eq
 1974 0018 0C38     		subeq	r0, r0, #12
 241:src/xeq.c     **** 	}
 1975              		.loc 1 241 67 view .LVU530
 1976 001a 4010     		asreq	r0, r0, #1
 1977              	.LBE1431:
 244:src/xeq.c     **** }
 1978              		.loc 1 244 3 is_stmt 1 view .LVU531
 1979              	.LVL140:
 244:src/xeq.c     **** }
 1980              		.loc 1 244 3 is_stmt 0 view .LVU532
 1981              	.LBE1425:
 1982              	.LBE1424:
 252:src/xeq.c     **** 
 1983              		.loc 1 252 1 view .LVU533
 1984 001c 7047     		bx	lr
 1985              	.L162:
 1986 001e 00BF     		.align	2
 1987              	.L161:
 1988 0020 00000000 		.word	main_ram
 1989              		.cfi_endproc
 1990              	.LFE9:
 1992              		.section	.text.version,"ax",%progbits
 1993              		.align	1
 1994              		.p2align 2,,3
 1995              		.global	version
 1996              		.syntax unified
 1997              		.thumb
 1998              		.thumb_func
 1999              		.fpu fpv4-sp-d16
 2001              	version:
 2002              	.LVL141:
 2003              	.LFB10:
 264:src/xeq.c     **** 	State2.version = 1;
 2004              		.loc 1 264 29 is_stmt 1 view -0
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 0
 2007              		@ frame_needed = 0, uses_anonymous_args = 0
 2008              		@ link register save eliminated.
 265:src/xeq.c     **** 	if (!State2.runmode)
 2009              		.loc 1 265 2 view .LVU535
 265:src/xeq.c     **** 	if (!State2.runmode)
 2010              		.loc 1 265 17 is_stmt 0 view .LVU536
 2011 0000 054B     		ldr	r3, .L166
 2012 0002 5A7D     		ldrb	r2, [r3, #21]	@ zero_extendqisi2
 266:src/xeq.c     **** 		display();
 2013              		.loc 1 266 6 view .LVU537
 2014 0004 997D     		ldrb	r1, [r3, #22]	@ zero_extendqisi2
 265:src/xeq.c     **** 	if (!State2.runmode)
 2015              		.loc 1 265 17 view .LVU538
 2016 0006 42F01002 		orr	r2, r2, #16
 2017 000a 5A75     		strb	r2, [r3, #21]
 266:src/xeq.c     **** 		display();
ARM GAS  /tmp/ccjeMhND.s 			page 130


 2018              		.loc 1 266 2 is_stmt 1 view .LVU539
 266:src/xeq.c     **** 		display();
 2019              		.loc 1 266 5 is_stmt 0 view .LVU540
 2020 000c 4B06     		lsls	r3, r1, #25
 2021 000e 00D5     		bpl	.L165
 268:src/xeq.c     **** 
 2022              		.loc 1 268 1 view .LVU541
 2023 0010 7047     		bx	lr
 2024              	.L165:
 267:src/xeq.c     **** }
 2025              		.loc 1 267 3 is_stmt 1 view .LVU542
 2026 0012 FFF7FEBF 		b	display
 2027              	.LVL142:
 2028              	.L167:
 267:src/xeq.c     **** }
 2029              		.loc 1 267 3 is_stmt 0 view .LVU543
 2030 0016 00BF     		.align	2
 2031              	.L166:
 2032 0018 00000000 		.word	StateWhileOn
 2033              		.cfi_endproc
 2034              	.LFE10:
 2036              		.section	.text.cmd_off,"ax",%progbits
 2037              		.align	1
 2038              		.p2align 2,,3
 2039              		.global	cmd_off
 2040              		.syntax unified
 2041              		.thumb
 2042              		.thumb_func
 2043              		.fpu fpv4-sp-d16
 2045              	cmd_off:
 2046              	.LVL143:
 2047              	.LFB11:
 270:src/xeq.c     **** 	shutdown();
 2048              		.loc 1 270 29 is_stmt 1 view -0
 2049              		.cfi_startproc
 2050              		@ args = 0, pretend = 0, frame = 0
 2051              		@ frame_needed = 0, uses_anonymous_args = 0
 2052              		@ link register save eliminated.
 271:src/xeq.c     **** }
 2053              		.loc 1 271 2 view .LVU545
 2054 0000 FFF7FEBF 		b	shutdown
 2055              	.LVL144:
 271:src/xeq.c     **** }
 2056              		.loc 1 271 2 is_stmt 0 view .LVU546
 2057              		.cfi_endproc
 2058              	.LFE11:
 2060              		.section	.text.init_RegionTab,"ax",%progbits
 2061              		.align	1
 2062              		.p2align 2,,3
 2063              		.global	init_RegionTab
 2064              		.syntax unified
 2065              		.thumb
 2066              		.thumb_func
 2067              		.fpu fpv4-sp-d16
 2069              	init_RegionTab:
 2070              	.LFB13:
 294:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
ARM GAS  /tmp/ccjeMhND.s 			page 131


 2071              		.loc 1 294 28 is_stmt 1 view -0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 0
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 2075              		@ link register save eliminated.
 295:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2076              		.loc 1 295 3 view .LVU548
 295:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2077              		.loc 1 295 30 is_stmt 0 view .LVU549
 2078 0000 0649     		ldr	r1, .L170
 296:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2079              		.loc 1 296 30 view .LVU550
 2080 0002 074A     		ldr	r2, .L170+4
 297:src/xeq.c     **** }
 2081              		.loc 1 297 30 view .LVU551
 2082 0004 074B     		ldr	r3, .L170+8
 295:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2083              		.loc 1 295 30 view .LVU552
 2084 0006 0868     		ldr	r0, [r1]
 296:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2085              		.loc 1 296 30 view .LVU553
 2086 0008 1168     		ldr	r1, [r2]
 297:src/xeq.c     **** }
 2087              		.loc 1 297 30 view .LVU554
 2088 000a 1A68     		ldr	r2, [r3]
 295:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2089              		.loc 1 295 16 view .LVU555
 2090 000c 064B     		ldr	r3, .L170+12
 295:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2091              		.loc 1 295 30 view .LVU556
 2092 000e 0430     		adds	r0, r0, #4
 296:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2093              		.loc 1 296 30 view .LVU557
 2094 0010 0431     		adds	r1, r1, #4
 297:src/xeq.c     **** }
 2095              		.loc 1 297 30 view .LVU558
 2096 0012 0432     		adds	r2, r2, #4
 296:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2097              		.loc 1 296 16 view .LVU559
 2098 0014 C3E90001 		strd	r0, r1, [r3]
 297:src/xeq.c     **** }
 2099              		.loc 1 297 3 is_stmt 1 view .LVU560
 297:src/xeq.c     **** }
 2100              		.loc 1 297 16 is_stmt 0 view .LVU561
 2101 0018 9A60     		str	r2, [r3, #8]
 298:src/xeq.c     **** #else
 2102              		.loc 1 298 1 view .LVU562
 2103 001a 7047     		bx	lr
 2104              	.L171:
 2105              		.align	2
 2106              	.L170:
 2107 001c 00000000 		.word	main_ram
 2108 0020 00000000 		.word	library_ram
 2109 0024 00000000 		.word	backup_ram
 2110 0028 00000000 		.word	.LANCHOR0
 2111              		.cfi_endproc
 2112              	.LFE13:
ARM GAS  /tmp/ccjeMhND.s 			page 132


 2114              		.section	.text.sizeLIB,"ax",%progbits
 2115              		.align	1
 2116              		.p2align 2,,3
 2117              		.global	sizeLIB
 2118              		.syntax unified
 2119              		.thumb
 2120              		.thumb_func
 2121              		.fpu fpv4-sp-d16
 2123              	sizeLIB:
 2124              	.LVL145:
 2125              	.LFB14:
 310:src/xeq.c     **** 	if (region == REGION_XROM)
 2126              		.loc 1 310 25 is_stmt 1 view -0
 2127              		.cfi_startproc
 2128              		@ args = 0, pretend = 0, frame = 0
 2129              		@ frame_needed = 0, uses_anonymous_args = 0
 2130              		@ link register save eliminated.
 311:src/xeq.c     **** 		return xrom_size;
 2131              		.loc 1 311 2 view .LVU564
 311:src/xeq.c     **** 		return xrom_size;
 2132              		.loc 1 311 5 is_stmt 0 view .LVU565
 2133 0000 0328     		cmp	r0, #3
 2134 0002 05D0     		beq	.L175
 314:src/xeq.c     **** }
 2135              		.loc 1 314 3 is_stmt 1 view .LVU566
 314:src/xeq.c     **** }
 2136              		.loc 1 314 24 is_stmt 0 view .LVU567
 2137 0004 044B     		ldr	r3, .L176
 314:src/xeq.c     **** }
 2138              		.loc 1 314 32 view .LVU568
 2139 0006 53F82030 		ldr	r3, [r3, r0, lsl #2]
 314:src/xeq.c     **** }
 2140              		.loc 1 314 10 view .LVU569
 2141 000a 33F8020C 		ldrh	r0, [r3, #-2]
 2142              	.LVL146:
 315:src/xeq.c     **** 
 2143              		.loc 1 315 1 view .LVU570
 2144 000e 7047     		bx	lr
 2145              	.LVL147:
 2146              	.L175:
 312:src/xeq.c     **** 	else
 2147              		.loc 1 312 3 is_stmt 1 view .LVU571
 312:src/xeq.c     **** 	else
 2148              		.loc 1 312 10 is_stmt 0 view .LVU572
 2149 0010 024B     		ldr	r3, .L176+4
 2150 0012 1888     		ldrh	r0, [r3]
 2151              	.LVL148:
 312:src/xeq.c     **** 	else
 2152              		.loc 1 312 10 view .LVU573
 2153 0014 7047     		bx	lr
 2154              	.L177:
 2155 0016 00BF     		.align	2
 2156              	.L176:
 2157 0018 00000000 		.word	.LANCHOR0
 2158 001c 00000000 		.word	xrom_size
 2159              		.cfi_endproc
 2160              	.LFE14:
ARM GAS  /tmp/ccjeMhND.s 			page 133


 2162              		.section	.text.getprog,"ax",%progbits
 2163              		.align	1
 2164              		.p2align 2,,3
 2165              		.global	getprog
 2166              		.syntax unified
 2167              		.thumb
 2168              		.thumb_func
 2169              		.fpu fpv4-sp-d16
 2171              	getprog:
 2172              	.LVL149:
 2173              	.LFB16:
 334:src/xeq.c     **** 
 2174              		.loc 1 334 33 is_stmt 1 view -0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 0
 2177              		@ frame_needed = 0, uses_anonymous_args = 0
 2178              		@ link register save eliminated.
 336:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2179              		.loc 1 336 2 view .LVU575
 337:src/xeq.c     **** 
 2180              		.loc 1 337 15 is_stmt 0 view .LVU576
 2181 0000 C0F30D02 		ubfx	r2, r0, #0, #14
 2182 0004 531E     		subs	r3, r2, #1
 336:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2183              		.loc 1 336 21 view .LVU577
 2184 0006 800B     		lsrs	r0, r0, #14
 2185              	.LVL150:
 337:src/xeq.c     **** 
 2186              		.loc 1 337 2 is_stmt 1 view .LVU578
 339:src/xeq.c     **** 		return OP_NIL | OP_END;
 2187              		.loc 1 339 2 view .LVU579
 339:src/xeq.c     **** 		return OP_NIL | OP_END;
 2188              		.loc 1 339 5 is_stmt 0 view .LVU580
 2189 0008 BAB1     		cbz	r2, .L184
 2190              	.LVL151:
 2191              	.LBB1432:
 2192              	.LBI1432:
 310:src/xeq.c     **** 	if (region == REGION_XROM)
 2193              		.loc 1 310 5 is_stmt 1 view .LVU581
 2194              	.LBB1433:
 311:src/xeq.c     **** 		return xrom_size;
 2195              		.loc 1 311 2 view .LVU582
 311:src/xeq.c     **** 		return xrom_size;
 2196              		.loc 1 311 5 is_stmt 0 view .LVU583
 2197 000a 0328     		cmp	r0, #3
 2198 000c 18D0     		beq	.L185
 314:src/xeq.c     **** }
 2199              		.loc 1 314 3 is_stmt 1 view .LVU584
 314:src/xeq.c     **** }
 2200              		.loc 1 314 24 is_stmt 0 view .LVU585
 2201 000e 0E4A     		ldr	r2, .L187
 314:src/xeq.c     **** }
 2202              		.loc 1 314 32 view .LVU586
 2203 0010 52F82020 		ldr	r2, [r2, r0, lsl #2]
 314:src/xeq.c     **** }
 2204              		.loc 1 314 10 view .LVU587
 2205 0014 32F8022C 		ldrh	r2, [r2, #-2]
ARM GAS  /tmp/ccjeMhND.s 			page 134


 2206              	.L181:
 2207              	.LVL152:
 314:src/xeq.c     **** }
 2208              		.loc 1 314 10 view .LVU588
 2209              	.LBE1433:
 2210              	.LBE1432:
 339:src/xeq.c     **** 		return OP_NIL | OP_END;
 2211              		.loc 1 339 17 view .LVU589
 2212 0018 9342     		cmp	r3, r2
 2213 001a 0EDA     		bge	.L184
 341:src/xeq.c     **** }
 2214              		.loc 1 341 2 is_stmt 1 view .LVU590
 341:src/xeq.c     **** }
 2215              		.loc 1 341 29 is_stmt 0 view .LVU591
 2216 001c 0A4A     		ldr	r2, .L187
 341:src/xeq.c     **** }
 2217              		.loc 1 341 38 view .LVU592
 2218 001e 52F82020 		ldr	r2, [r2, r0, lsl #2]
 2219              	.LBB1435:
 2220              	.LBB1436:
 323:src/xeq.c     **** 	if ( isDBL(r) ) {
 2221              		.loc 1 323 13 view .LVU593
 2222 0022 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 2223              	.LVL153:
 324:src/xeq.c     **** 		r |= loc[1] << 16;
 2224              		.loc 1 324 5 view .LVU594
 2225 0026 00F47041 		and	r1, r0, #61440
 2226 002a B1F5704F 		cmp	r1, #61440
 2227              	.LBE1436:
 2228              	.LBE1435:
 341:src/xeq.c     **** }
 2229              		.loc 1 341 38 view .LVU595
 2230 002e 02EB4303 		add	r3, r2, r3, lsl #1
 2231              	.LVL154:
 2232              	.LBB1439:
 2233              	.LBI1435:
 321:src/xeq.c     **** {
 2234              		.loc 1 321 15 is_stmt 1 view .LVU596
 2235              	.LBB1437:
 323:src/xeq.c     **** 	if ( isDBL(r) ) {
 2236              		.loc 1 323 2 view .LVU597
 324:src/xeq.c     **** 		r |= loc[1] << 16;
 2237              		.loc 1 324 2 view .LVU598
 324:src/xeq.c     **** 		r |= loc[1] << 16;
 2238              		.loc 1 324 5 is_stmt 0 view .LVU599
 2239 0032 00D0     		beq	.L186
 2240              	.LBE1437:
 2241              	.LBE1439:
 342:src/xeq.c     **** 
 2242              		.loc 1 342 1 view .LVU600
 2243 0034 7047     		bx	lr
 2244              	.L186:
 2245              	.LBB1440:
 2246              	.LBB1438:
 325:src/xeq.c     **** 	}
 2247              		.loc 1 325 3 is_stmt 1 view .LVU601
 325:src/xeq.c     **** 	}
ARM GAS  /tmp/ccjeMhND.s 			page 135


 2248              		.loc 1 325 5 is_stmt 0 view .LVU602
 2249 0036 1868     		ldr	r0, [r3]	@ unaligned
 2250              	.LVL155:
 325:src/xeq.c     **** 	}
 2251              		.loc 1 325 5 view .LVU603
 2252 0038 7047     		bx	lr
 2253              	.LVL156:
 2254              	.L184:
 325:src/xeq.c     **** 	}
 2255              		.loc 1 325 5 view .LVU604
 2256              	.LBE1438:
 2257              	.LBE1440:
 340:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 2258              		.loc 1 340 10 view .LVU605
 2259 003a 4FF49D70 		mov	r0, #314
 2260              	.LVL157:
 342:src/xeq.c     **** 
 2261              		.loc 1 342 1 view .LVU606
 2262 003e 7047     		bx	lr
 2263              	.LVL158:
 2264              	.L185:
 2265              	.LBB1441:
 2266              	.LBB1434:
 312:src/xeq.c     **** 	else
 2267              		.loc 1 312 3 is_stmt 1 view .LVU607
 312:src/xeq.c     **** 	else
 2268              		.loc 1 312 10 is_stmt 0 view .LVU608
 2269 0040 024A     		ldr	r2, .L187+4
 2270 0042 1288     		ldrh	r2, [r2]
 2271 0044 E8E7     		b	.L181
 2272              	.L188:
 2273 0046 00BF     		.align	2
 2274              	.L187:
 2275 0048 00000000 		.word	.LANCHOR0
 2276 004c 00000000 		.word	xrom_size
 2277              	.LBE1434:
 2278              	.LBE1441:
 2279              		.cfi_endproc
 2280              	.LFE16:
 2282              		.section	.text.get_current_prog,"ax",%progbits
 2283              		.align	1
 2284              		.p2align 2,,3
 2285              		.global	get_current_prog
 2286              		.syntax unified
 2287              		.thumb
 2288              		.thumb_func
 2289              		.fpu fpv4-sp-d16
 2291              	get_current_prog:
 2292              	.LFB17:
 348:src/xeq.c     **** 
 2293              		.loc 1 348 40 is_stmt 1 view -0
 2294              		.cfi_startproc
 2295              		@ args = 0, pretend = 0, frame = 0
 2296              		@ frame_needed = 0, uses_anonymous_args = 0
 2297              		@ link register save eliminated.
 350:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2298              		.loc 1 350 2 view .LVU610
ARM GAS  /tmp/ccjeMhND.s 			page 136


 350:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2299              		.loc 1 350 21 is_stmt 0 view .LVU611
 2300 0000 074B     		ldr	r3, .L190
 351:src/xeq.c     **** }
 2301              		.loc 1 351 18 view .LVU612
 2302 0002 084A     		ldr	r2, .L190+4
 350:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2303              		.loc 1 350 21 view .LVU613
 2304 0004 1B68     		ldr	r3, [r3]
 2305 0006 B3F8EC37 		ldrh	r3, [r3, #2028]
 2306              	.LVL159:
 351:src/xeq.c     **** }
 2307              		.loc 1 351 2 is_stmt 1 view .LVU614
 350:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2308              		.loc 1 350 12 is_stmt 0 view .LVU615
 2309 000a 990B     		lsrs	r1, r3, #14
 351:src/xeq.c     **** }
 2310              		.loc 1 351 27 view .LVU616
 2311 000c C3F30D03 		ubfx	r3, r3, #0, #14
 2312              	.LVL160:
 351:src/xeq.c     **** }
 2313              		.loc 1 351 27 view .LVU617
 2314 0010 52F82100 		ldr	r0, [r2, r1, lsl #2]
 2315 0014 03F10043 		add	r3, r3, #-2147483648
 2316 0018 013B     		subs	r3, r3, #1
 352:src/xeq.c     **** 
 2317              		.loc 1 352 1 view .LVU618
 2318 001a 00EB4300 		add	r0, r0, r3, lsl #1
 2319 001e 7047     		bx	lr
 2320              	.L191:
 2321              		.align	2
 2322              	.L190:
 2323 0020 00000000 		.word	main_ram
 2324 0024 00000000 		.word	.LANCHOR0
 2325              		.cfi_endproc
 2326              	.LFE17:
 2328              		.section	.text.do_inc,"ax",%progbits
 2329              		.align	1
 2330              		.p2align 2,,3
 2331              		.global	do_inc
 2332              		.syntax unified
 2333              		.thumb
 2334              		.thumb_func
 2335              		.fpu fpv4-sp-d16
 2337              	do_inc:
 2338              	.LVL161:
 2339              	.LFB20:
 409:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2340              		.loc 1 409 54 is_stmt 1 view -0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 16
 2343              		@ frame_needed = 0, uses_anonymous_args = 0
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2344              		.loc 1 410 2 view .LVU620
 409:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2345              		.loc 1 409 54 is_stmt 0 view .LVU621
 2346 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/ccjeMhND.s 			page 137


 2347              		.cfi_def_cfa_offset 16
 2348              		.cfi_offset 4, -16
 2349              		.cfi_offset 5, -12
 2350              		.cfi_offset 6, -8
 2351              		.cfi_offset 14, -4
 2352 0002 84B0     		sub	sp, sp, #16
 2353              		.cfi_def_cfa_offset 32
 409:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2354              		.loc 1 409 54 view .LVU622
 2355 0004 0546     		mov	r5, r0
 2356 0006 0191     		str	r1, [sp, #4]
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2357              		.loc 1 410 42 view .LVU623
 2358 0008 FFF7FEFF 		bl	getprog
 2359              	.LVL162:
 414:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2360              		.loc 1 414 12 view .LVU624
 2361 000c 0D4E     		ldr	r6, .L196
 415:src/xeq.c     **** 
 2362              		.loc 1 415 11 view .LVU625
 2363 000e 0199     		ldr	r1, [sp, #4]
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2364              		.loc 1 410 42 view .LVU626
 2365 0010 00F47040 		and	r0, r0, #61440
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2366              		.loc 1 410 27 view .LVU627
 2367 0014 6C1C     		adds	r4, r5, #1
 411:src/xeq.c     **** 	unsigned short int bottom = 0;
 2368              		.loc 1 411 21 view .LVU628
 2369 0016 0023     		movs	r3, #0
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2370              		.loc 1 410 27 view .LVU629
 2371 0018 B0F5704F 		cmp	r0, #61440
 2372 001c 08BF     		it	eq
 2373 001e 0134     		addeq	r4, r4, #1
 415:src/xeq.c     **** 
 2374              		.loc 1 415 11 view .LVU630
 2375 0020 0DF10E02 		add	r2, sp, #14
 2376 0024 2846     		mov	r0, r5
 414:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2377              		.loc 1 414 12 view .LVU631
 2378 0026 3360     		str	r3, [r6]
 411:src/xeq.c     **** 	unsigned short int bottom = 0;
 2379              		.loc 1 411 21 view .LVU632
 2380 0028 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 415:src/xeq.c     **** 
 2381              		.loc 1 415 11 view .LVU633
 2382 002c FFF7FEFF 		bl	find_section_bounds
 2383              	.LVL163:
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2384              		.loc 1 410 27 view .LVU634
 2385 0030 A4B2     		uxth	r4, r4
 2386              	.LVL164:
 411:src/xeq.c     **** 	unsigned short int bottom = 0;
 2387              		.loc 1 411 2 is_stmt 1 view .LVU635
 412:src/xeq.c     **** 
 2388              		.loc 1 412 2 view .LVU636
ARM GAS  /tmp/ccjeMhND.s 			page 138


 414:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2389              		.loc 1 414 2 view .LVU637
 415:src/xeq.c     **** 
 2390              		.loc 1 415 2 view .LVU638
 417:src/xeq.c     **** 		PcWrapped = 1;
 2391              		.loc 1 417 2 view .LVU639
 417:src/xeq.c     **** 		PcWrapped = 1;
 2392              		.loc 1 417 5 is_stmt 0 view .LVU640
 2393 0032 8442     		cmp	r4, r0
 418:src/xeq.c     **** 		return top;
 2394              		.loc 1 418 3 is_stmt 1 view .LVU641
 419:src/xeq.c     **** 	}
 2395              		.loc 1 419 10 is_stmt 0 view .LVU642
 2396 0034 85BF     		ittet	hi
 2397 0036 BDF80E00 		ldrhhi	r0, [sp, #14]
 2398              	.LVL165:
 418:src/xeq.c     **** 		return top;
 2399              		.loc 1 418 13 view .LVU643
 2400 003a 0123     		movhi	r3, #1
 421:src/xeq.c     **** }
 2401              		.loc 1 421 9 view .LVU644
 2402 003c 2046     		movls	r0, r4
 418:src/xeq.c     **** 		return top;
 2403              		.loc 1 418 13 view .LVU645
 2404 003e 3360     		strhi	r3, [r6]
 419:src/xeq.c     **** 	}
 2405              		.loc 1 419 3 is_stmt 1 view .LVU646
 421:src/xeq.c     **** }
 2406              		.loc 1 421 2 view .LVU647
 422:src/xeq.c     **** 
 2407              		.loc 1 422 1 is_stmt 0 view .LVU648
 2408 0040 04B0     		add	sp, sp, #16
 2409              		.cfi_def_cfa_offset 16
 2410              		@ sp needed
 2411 0042 70BD     		pop	{r4, r5, r6, pc}
 2412              	.LVL166:
 2413              	.L197:
 422:src/xeq.c     **** 
 2414              		.loc 1 422 1 view .LVU649
 2415              		.align	2
 2416              	.L196:
 2417 0044 00000000 		.word	PcWrapped
 2418              		.cfi_endproc
 2419              	.LFE20:
 2421              		.section	.text.user_pc.part.0,"ax",%progbits
 2422              		.align	1
 2423              		.p2align 2,,3
 2424              		.syntax unified
 2425              		.thumb
 2426              		.thumb_func
 2427              		.fpu fpv4-sp-d16
 2429              	user_pc.part.0:
 2430              	.LVL167:
 2431              	.LFB271:
 485:src/xeq.c     **** 	unsigned int n = 1;
 2432              		.loc 1 485 14 is_stmt 1 view -0
 2433              		.cfi_startproc
ARM GAS  /tmp/ccjeMhND.s 			page 139


 2434              		@ args = 0, pretend = 0, frame = 0
 2435              		@ frame_needed = 0, uses_anonymous_args = 0
 496:src/xeq.c     **** 	while (base < pc) {
 2436              		.loc 1 496 2 view .LVU651
 496:src/xeq.c     **** 	while (base < pc) {
 2437              		.loc 1 496 9 is_stmt 0 view .LVU652
 2438 0000 20F47F53 		bic	r3, r0, #16320
 2439 0004 23F03F03 		bic	r3, r3, #63
 485:src/xeq.c     **** 	unsigned int n = 1;
 2440              		.loc 1 485 14 view .LVU653
 2441 0008 70B5     		push	{r4, r5, r6, lr}
 2442              		.cfi_def_cfa_offset 16
 2443              		.cfi_offset 4, -16
 2444              		.cfi_offset 5, -12
 2445              		.cfi_offset 6, -8
 2446              		.cfi_offset 14, -4
 485:src/xeq.c     **** 	unsigned int n = 1;
 2447              		.loc 1 485 14 view .LVU654
 2448 000a 0546     		mov	r5, r0
 496:src/xeq.c     **** 	while (base < pc) {
 2449              		.loc 1 496 7 view .LVU655
 2450 000c 581C     		adds	r0, r3, #1
 2451              	.LVL168:
 497:src/xeq.c     **** 		base = do_inc(base, 0);
 2452              		.loc 1 497 2 is_stmt 1 view .LVU656
 497:src/xeq.c     **** 		base = do_inc(base, 0);
 2453              		.loc 1 497 8 view .LVU657
 2454 000e 8542     		cmp	r5, r0
 2455 0010 0ED9     		bls	.L201
 2456 0012 084E     		ldr	r6, .L205
 486:src/xeq.c     **** 	unsigned int base;
 2457              		.loc 1 486 15 is_stmt 0 view .LVU658
 2458 0014 0124     		movs	r4, #1
 2459 0016 03E0     		b	.L200
 2460              	.LVL169:
 2461              	.L204:
 497:src/xeq.c     **** 		base = do_inc(base, 0);
 2462              		.loc 1 497 8 view .LVU659
 2463 0018 8542     		cmp	r5, r0
 501:src/xeq.c     **** 	}
 2464              		.loc 1 501 3 view .LVU660
 2465 001a 04F10104 		add	r4, r4, #1
 2466              	.LVL170:
 497:src/xeq.c     **** 		base = do_inc(base, 0);
 2467              		.loc 1 497 8 is_stmt 1 view .LVU661
 2468 001e 05D9     		bls	.L198
 2469              	.LVL171:
 2470              	.L200:
 498:src/xeq.c     **** 		if (PcWrapped)
 2471              		.loc 1 498 3 view .LVU662
 498:src/xeq.c     **** 		if (PcWrapped)
 2472              		.loc 1 498 10 is_stmt 0 view .LVU663
 2473 0020 0021     		movs	r1, #0
 2474 0022 FFF7FEFF 		bl	do_inc
 2475              	.LVL172:
 501:src/xeq.c     **** 	}
 2476              		.loc 1 501 3 is_stmt 1 view .LVU664
ARM GAS  /tmp/ccjeMhND.s 			page 140


 499:src/xeq.c     **** 			return n;
 2477              		.loc 1 499 6 is_stmt 0 view .LVU665
 2478 0026 3368     		ldr	r3, [r6]
 2479              	.LVL173:
 499:src/xeq.c     **** 			return n;
 2480              		.loc 1 499 3 is_stmt 1 view .LVU666
 499:src/xeq.c     **** 			return n;
 2481              		.loc 1 499 6 is_stmt 0 view .LVU667
 2482 0028 002B     		cmp	r3, #0
 2483 002a F5D0     		beq	.L204
 2484              	.LVL174:
 2485              	.L198:
 504:src/xeq.c     **** 
 2486              		.loc 1 504 1 view .LVU668
 2487 002c 2046     		mov	r0, r4
 2488              	.LVL175:
 504:src/xeq.c     **** 
 2489              		.loc 1 504 1 view .LVU669
 2490 002e 70BD     		pop	{r4, r5, r6, pc}
 2491              	.LVL176:
 2492              	.L201:
 486:src/xeq.c     **** 	unsigned int base;
 2493              		.loc 1 486 15 view .LVU670
 2494 0030 0124     		movs	r4, #1
 2495 0032 FBE7     		b	.L198
 2496              	.L206:
 2497              		.align	2
 2498              	.L205:
 2499 0034 00000000 		.word	PcWrapped
 2500              		.cfi_endproc
 2501              	.LFE271:
 2503              		.section	.rodata.print_step.str1.4,"aMS",%progbits,1
 2504              		.align	2
 2505              	.LC0:
 2506 0000 3030303A 		.ascii	"000:\000"
 2506      00
 2507              		.section	.text.print_step,"ax",%progbits
 2508              		.align	1
 2509              		.p2align 2,,3
 2510              		.syntax unified
 2511              		.thumb
 2512              		.thumb_func
 2513              		.fpu fpv4-sp-d16
 2515              	print_step:
 2516              	.LVL177:
 2517              	.LFB229:
4198:src/xeq.c     **** 	char buf[16];
 2518              		.loc 1 4198 41 is_stmt 1 view -0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 16
 2521              		@ frame_needed = 0, uses_anonymous_args = 0
4199:src/xeq.c     **** 	const unsigned int pc = state_pc();
 2522              		.loc 1 4199 2 view .LVU672
4200:src/xeq.c     **** 	char *p = TraceBuffer;
 2523              		.loc 1 4200 2 view .LVU673
4200:src/xeq.c     **** 	char *p = TraceBuffer;
 2524              		.loc 1 4200 26 is_stmt 0 view .LVU674
ARM GAS  /tmp/ccjeMhND.s 			page 141


 2525 0000 254B     		ldr	r3, .L221
 2526 0002 1B68     		ldr	r3, [r3]
4198:src/xeq.c     **** 	char buf[16];
 2527              		.loc 1 4198 41 view .LVU675
 2528 0004 F0B5     		push	{r4, r5, r6, r7, lr}
 2529              		.cfi_def_cfa_offset 20
 2530              		.cfi_offset 4, -20
 2531              		.cfi_offset 5, -16
 2532              		.cfi_offset 6, -12
 2533              		.cfi_offset 7, -8
 2534              		.cfi_offset 14, -4
4200:src/xeq.c     **** 	char *p = TraceBuffer;
 2535              		.loc 1 4200 26 view .LVU676
 2536 0006 B3F8E047 		ldrh	r4, [r3, #2016]
 2537              	.LVL178:
4201:src/xeq.c     **** 
 2538              		.loc 1 4201 2 is_stmt 1 view .LVU677
4203:src/xeq.c     **** 		*p++ = 'x';
 2539              		.loc 1 4203 2 view .LVU678
4203:src/xeq.c     **** 		*p++ = 'x';
 2540              		.loc 1 4203 6 is_stmt 0 view .LVU679
 2541 000a A10B     		lsrs	r1, r4, #14
4203:src/xeq.c     **** 		*p++ = 'x';
 2542              		.loc 1 4203 5 view .LVU680
 2543 000c 0329     		cmp	r1, #3
4198:src/xeq.c     **** 	char buf[16];
 2544              		.loc 1 4198 41 view .LVU681
 2545 000e 85B0     		sub	sp, sp, #20
 2546              		.cfi_def_cfa_offset 40
4198:src/xeq.c     **** 	char buf[16];
 2547              		.loc 1 4198 41 view .LVU682
 2548 0010 0546     		mov	r5, r0
4203:src/xeq.c     **** 		*p++ = 'x';
 2549              		.loc 1 4203 5 view .LVU683
 2550 0012 39D0     		beq	.L218
4205:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2551              		.loc 1 4205 9 is_stmt 1 view .LVU684
4205:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2552              		.loc 1 4205 12 is_stmt 0 view .LVU685
 2553 0014 14F4404F 		tst	r4, #49152
 2554 0018 0FD1     		bne	.L219
4201:src/xeq.c     **** 
 2555              		.loc 1 4201 8 view .LVU686
 2556 001a 204E     		ldr	r6, .L221+4
 2557 001c 3746     		mov	r7, r6
 2558              	.LVL179:
4209:src/xeq.c     **** 		scopy(p, "000:");
 2559              		.loc 1 4209 2 is_stmt 1 view .LVU687
4209:src/xeq.c     **** 		scopy(p, "000:");
 2560              		.loc 1 4209 5 is_stmt 0 view .LVU688
 2561 001e BCB9     		cbnz	r4, .L220
 2562              	.LVL180:
 2563              	.L212:
4210:src/xeq.c     **** 	else {
 2564              		.loc 1 4210 3 is_stmt 1 view .LVU689
 2565 0020 1F49     		ldr	r1, .L221+8
 2566 0022 3846     		mov	r0, r7
ARM GAS  /tmp/ccjeMhND.s 			page 142


 2567 0024 FFF7FEFF 		bl	scopy
 2568              	.LVL181:
 2569              	.L211:
4218:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2570              		.loc 1 4218 2 view .LVU690
4218:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2571              		.loc 1 4218 20 is_stmt 0 view .LVU691
 2572 0028 1E4A     		ldr	r2, .L221+12
4219:src/xeq.c     **** }
 2573              		.loc 1 4219 10 view .LVU692
 2574 002a 1F49     		ldr	r1, .L221+16
4218:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2575              		.loc 1 4218 20 view .LVU693
 2576 002c 937D     		ldrb	r3, [r2, #22]	@ zero_extendqisi2
4219:src/xeq.c     **** }
 2577              		.loc 1 4219 10 view .LVU694
 2578 002e 0E60     		str	r6, [r1]
4218:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2579              		.loc 1 4218 20 view .LVU695
 2580 0030 43F08003 		orr	r3, r3, #128
 2581 0034 9375     		strb	r3, [r2, #22]
4219:src/xeq.c     **** }
 2582              		.loc 1 4219 2 is_stmt 1 view .LVU696
4220:src/xeq.c     **** 
 2583              		.loc 1 4220 1 is_stmt 0 view .LVU697
 2584 0036 05B0     		add	sp, sp, #20
 2585              		.cfi_remember_state
 2586              		.cfi_def_cfa_offset 20
 2587              		@ sp needed
 2588 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
 2589              	.LVL182:
 2590              	.L219:
 2591              		.cfi_restore_state
4206:src/xeq.c     **** 		*p++ = ' ';
 2592              		.loc 1 4206 3 is_stmt 1 view .LVU698
4206:src/xeq.c     **** 		*p++ = ' ';
 2593              		.loc 1 4206 7 is_stmt 0 view .LVU699
 2594 003a 1848     		ldr	r0, .L221+4
 2595              	.LVL183:
4206:src/xeq.c     **** 		*p++ = ' ';
 2596              		.loc 1 4206 7 view .LVU700
 2597 003c 0122     		movs	r2, #1
 2598 003e 0646     		mov	r6, r0
 2599 0040 FFF7FEFF 		bl	num_arg_0
 2600              	.LVL184:
4207:src/xeq.c     **** 	}
 2601              		.loc 1 4207 3 is_stmt 1 view .LVU701
4207:src/xeq.c     **** 	}
 2602              		.loc 1 4207 5 is_stmt 0 view .LVU702
 2603 0044 0746     		mov	r7, r0
 2604              	.LVL185:
4207:src/xeq.c     **** 	}
 2605              		.loc 1 4207 8 view .LVU703
 2606 0046 2023     		movs	r3, #32
 2607 0048 07F8013B 		strb	r3, [r7], #1
 2608              	.LVL186:
4209:src/xeq.c     **** 		scopy(p, "000:");
ARM GAS  /tmp/ccjeMhND.s 			page 143


 2609              		.loc 1 4209 2 is_stmt 1 view .LVU704
4209:src/xeq.c     **** 		scopy(p, "000:");
 2610              		.loc 1 4209 5 is_stmt 0 view .LVU705
 2611 004c 002C     		cmp	r4, #0
 2612 004e E7D0     		beq	.L212
 2613              	.L220:
 2614              	.LVL187:
 2615              	.LBB1442:
 2616              	.LBB1443:
4209:src/xeq.c     **** 		scopy(p, "000:");
 2617              		.loc 1 4209 5 view .LVU706
 2618 0050 2046     		mov	r0, r4
 2619 0052 FFF7FEFF 		bl	user_pc.part.0
 2620              	.LVL188:
 2621 0056 0146     		mov	r1, r0
 2622              	.L209:
4209:src/xeq.c     **** 		scopy(p, "000:");
 2623              		.loc 1 4209 5 view .LVU707
 2624              	.LBE1443:
 2625              	.LBE1442:
4212:src/xeq.c     **** 		*p++ = ':';
 2626              		.loc 1 4212 7 view .LVU708
 2627 0058 0322     		movs	r2, #3
 2628 005a 3846     		mov	r0, r7
 2629 005c FFF7FEFF 		bl	num_arg_0
 2630              	.LVL189:
4213:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2631              		.loc 1 4213 8 view .LVU709
 2632 0060 0746     		mov	r7, r0
 2633 0062 3A23     		movs	r3, #58
 2634 0064 07F8013B 		strb	r3, [r7], #1
4212:src/xeq.c     **** 		*p++ = ':';
 2635              		.loc 1 4212 7 view .LVU710
 2636 0068 0446     		mov	r4, r0
 2637              	.LVL190:
4213:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2638              		.loc 1 4213 3 is_stmt 1 view .LVU711
4214:src/xeq.c     **** 		if (*p == '?')
 2639              		.loc 1 4214 3 view .LVU712
 2640 006a 6946     		mov	r1, sp
 2641 006c 2846     		mov	r0, r5
 2642 006e FFF7FEFF 		bl	prt
 2643              	.LVL191:
 2644 0072 0022     		movs	r2, #0
 2645 0074 0146     		mov	r1, r0
 2646 0076 3846     		mov	r0, r7
 2647 0078 FFF7FEFF 		bl	scopy_char
 2648              	.LVL192:
4215:src/xeq.c     **** 			*p = '\0';
 2649              		.loc 1 4215 3 view .LVU713
4215:src/xeq.c     **** 			*p = '\0';
 2650              		.loc 1 4215 6 is_stmt 0 view .LVU714
 2651 007c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2652 007e 3F2B     		cmp	r3, #63
4216:src/xeq.c     **** 	}
 2653              		.loc 1 4216 4 is_stmt 1 view .LVU715
4216:src/xeq.c     **** 	}
ARM GAS  /tmp/ccjeMhND.s 			page 144


 2654              		.loc 1 4216 7 is_stmt 0 view .LVU716
 2655 0080 04BF     		itt	eq
 2656 0082 0023     		moveq	r3, #0
 2657 0084 6370     		strbeq	r3, [r4, #1]
 2658 0086 CFE7     		b	.L211
 2659              	.LVL193:
 2660              	.L218:
4204:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2661              		.loc 1 4204 3 is_stmt 1 view .LVU717
4204:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2662              		.loc 1 4204 8 is_stmt 0 view .LVU718
 2663 0088 044E     		ldr	r6, .L221+4
 2664 008a 3746     		mov	r7, r6
 2665 008c 7823     		movs	r3, #120
 2666 008e 07F8013B 		strb	r3, [r7], #1
4209:src/xeq.c     **** 		scopy(p, "000:");
 2667              		.loc 1 4209 2 is_stmt 1 view .LVU719
4212:src/xeq.c     **** 		*p++ = ':';
 2668              		.loc 1 4212 3 view .LVU720
 2669              	.LBB1445:
 2670              	.LBI1442:
 485:src/xeq.c     **** 	unsigned int n = 1;
 2671              		.loc 1 485 14 view .LVU721
 2672              	.LBB1444:
 486:src/xeq.c     **** 	unsigned int base;
 2673              		.loc 1 486 2 view .LVU722
 2674              	.LVL194:
 487:src/xeq.c     **** 
 2675              		.loc 1 487 2 view .LVU723
 490:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 2676              		.loc 1 490 2 view .LVU724
 491:src/xeq.c     **** #else
 2677              		.loc 1 491 3 view .LVU725
 491:src/xeq.c     **** #else
 2678              		.loc 1 491 24 is_stmt 0 view .LVU726
 2679 0092 C4F30D01 		ubfx	r1, r4, #0, #14
 2680 0096 DFE7     		b	.L209
 2681              	.L222:
 2682              		.align	2
 2683              	.L221:
 2684 0098 00000000 		.word	main_ram
 2685 009c 00000000 		.word	TraceBuffer
 2686 00a0 00000000 		.word	.LC0
 2687 00a4 00000000 		.word	StateWhileOn
 2688 00a8 00000000 		.word	DispMsg
 2689              	.LBE1444:
 2690              	.LBE1445:
 2691              		.cfi_endproc
 2692              	.LFE229:
 2694              		.section	.text.do_dec,"ax",%progbits
 2695              		.align	1
 2696              		.p2align 2,,3
 2697              		.global	do_dec
 2698              		.syntax unified
 2699              		.thumb
 2700              		.thumb_func
 2701              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccjeMhND.s 			page 145


 2703              	do_dec:
 2704              	.LVL195:
 2705              	.LFB21:
 428:src/xeq.c     **** 	unsigned short int top = 0;
 2706              		.loc 1 428 48 is_stmt 1 view -0
 2707              		.cfi_startproc
 2708              		@ args = 0, pretend = 0, frame = 8
 2709              		@ frame_needed = 0, uses_anonymous_args = 0
 429:src/xeq.c     **** 	unsigned short int bottom = 0;
 2710              		.loc 1 429 2 view .LVU728
 428:src/xeq.c     **** 	unsigned short int top = 0;
 2711              		.loc 1 428 48 is_stmt 0 view .LVU729
 2712 0000 70B5     		push	{r4, r5, r6, lr}
 2713              		.cfi_def_cfa_offset 16
 2714              		.cfi_offset 4, -16
 2715              		.cfi_offset 5, -12
 2716              		.cfi_offset 6, -8
 2717              		.cfi_offset 14, -4
 432:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2718              		.loc 1 432 12 view .LVU730
 2719 0002 114E     		ldr	r6, .L228
 428:src/xeq.c     **** 	unsigned short int top = 0;
 2720              		.loc 1 428 48 view .LVU731
 2721 0004 82B0     		sub	sp, sp, #8
 2722              		.cfi_def_cfa_offset 24
 429:src/xeq.c     **** 	unsigned short int bottom = 0;
 2723              		.loc 1 429 21 view .LVU732
 2724 0006 0023     		movs	r3, #0
 433:src/xeq.c     **** 
 2725              		.loc 1 433 11 view .LVU733
 2726 0008 0DF10602 		add	r2, sp, #6
 428:src/xeq.c     **** 	unsigned short int top = 0;
 2727              		.loc 1 428 48 view .LVU734
 2728 000c 0546     		mov	r5, r0
 432:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2729              		.loc 1 432 12 view .LVU735
 2730 000e 3360     		str	r3, [r6]
 429:src/xeq.c     **** 	unsigned short int bottom = 0;
 2731              		.loc 1 429 21 view .LVU736
 2732 0010 ADF80630 		strh	r3, [sp, #6]	@ movhi
 430:src/xeq.c     **** 
 2733              		.loc 1 430 2 is_stmt 1 view .LVU737
 2734              	.LVL196:
 432:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2735              		.loc 1 432 2 view .LVU738
 433:src/xeq.c     **** 
 2736              		.loc 1 433 2 view .LVU739
 433:src/xeq.c     **** 
 2737              		.loc 1 433 11 is_stmt 0 view .LVU740
 2738 0014 FFF7FEFF 		bl	find_section_bounds
 2739              	.LVL197:
 435:src/xeq.c     **** 		PcWrapped = 1;
 2740              		.loc 1 435 9 view .LVU741
 2741 0018 BDF80630 		ldrh	r3, [sp, #6]
 2742              	.LVL198:
 435:src/xeq.c     **** 		PcWrapped = 1;
 2743              		.loc 1 435 2 is_stmt 1 view .LVU742
ARM GAS  /tmp/ccjeMhND.s 			page 146


 435:src/xeq.c     **** 		PcWrapped = 1;
 2744              		.loc 1 435 5 is_stmt 0 view .LVU743
 2745 001c AB42     		cmp	r3, r5
 436:src/xeq.c     **** 		pc = bottom;
 2746              		.loc 1 436 13 view .LVU744
 2747 001e 25BF     		ittet	cs
 2748 0020 0122     		movcs	r2, #1
 2749 0022 0446     		movcs	r4, r0
 436:src/xeq.c     **** 		pc = bottom;
 2750              		.loc 1 436 3 is_stmt 1 view .LVU745
 440:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2751              		.loc 1 440 3 is_stmt 0 view .LVU746
 2752 0024 05F1FF34 		addcc	r4, r5, #-1
 436:src/xeq.c     **** 		pc = bottom;
 2753              		.loc 1 436 13 view .LVU747
 2754 0028 3260     		strcs	r2, [r6]
 437:src/xeq.c     **** 	}
 2755              		.loc 1 437 3 is_stmt 1 view .LVU748
 2756              	.LVL199:
 440:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2757              		.loc 1 440 3 view .LVU749
 441:src/xeq.c     **** 		--pc;
 2758              		.loc 1 441 2 view .LVU750
 441:src/xeq.c     **** 		--pc;
 2759              		.loc 1 441 5 is_stmt 0 view .LVU751
 2760 002a A342     		cmp	r3, r4
 2761 002c 09D2     		bcs	.L223
 441:src/xeq.c     **** 		--pc;
 2762              		.loc 1 441 18 discriminator 1 view .LVU752
 2763 002e 651E     		subs	r5, r4, #1
 2764 0030 2846     		mov	r0, r5
 2765              	.LVL200:
 441:src/xeq.c     **** 		--pc;
 2766              		.loc 1 441 18 discriminator 1 view .LVU753
 2767 0032 FFF7FEFF 		bl	getprog
 2768              	.LVL201:
 2769 0036 00F47040 		and	r0, r0, #61440
 442:src/xeq.c     **** 	return pc;
 2770              		.loc 1 442 3 discriminator 1 view .LVU754
 2771 003a B0F5704F 		cmp	r0, #61440
 2772 003e 08BF     		it	eq
 2773 0040 2C46     		moveq	r4, r5
 2774              	.LVL202:
 2775              	.L223:
 444:src/xeq.c     **** 
 2776              		.loc 1 444 1 view .LVU755
 2777 0042 2046     		mov	r0, r4
 2778 0044 02B0     		add	sp, sp, #8
 2779              		.cfi_def_cfa_offset 16
 2780              		@ sp needed
 2781 0046 70BD     		pop	{r4, r5, r6, pc}
 2782              	.L229:
 2783              		.align	2
 2784              	.L228:
 2785 0048 00000000 		.word	PcWrapped
 2786              		.cfi_endproc
 2787              	.LFE21:
ARM GAS  /tmp/ccjeMhND.s 			page 147


 2789              		.section	.text.update_program_bounds,"ax",%progbits
 2790              		.align	1
 2791              		.p2align 2,,3
 2792              		.global	update_program_bounds
 2793              		.syntax unified
 2794              		.thumb
 2795              		.thumb_func
 2796              		.fpu fpv4-sp-d16
 2798              	update_program_bounds:
 2799              	.LVL203:
 2800              	.LFB24:
 461:src/xeq.c     **** 	unsigned int pc = state_pc();
 2801              		.loc 1 461 45 is_stmt 1 view -0
 2802              		.cfi_startproc
 2803              		@ args = 0, pretend = 0, frame = 0
 2804              		@ frame_needed = 0, uses_anonymous_args = 0
 462:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2805              		.loc 1 462 2 view .LVU757
 461:src/xeq.c     **** 	unsigned int pc = state_pc();
 2806              		.loc 1 461 45 is_stmt 0 view .LVU758
 2807 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2808              		.cfi_def_cfa_offset 24
 2809              		.cfi_offset 3, -24
 2810              		.cfi_offset 4, -20
 2811              		.cfi_offset 5, -16
 2812              		.cfi_offset 6, -12
 2813              		.cfi_offset 7, -8
 2814              		.cfi_offset 14, -4
 462:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2815              		.loc 1 462 20 view .LVU759
 2816 0002 224F     		ldr	r7, .L251
 2817 0004 3D68     		ldr	r5, [r7]
 462:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2818              		.loc 1 462 15 view .LVU760
 2819 0006 B5F8E047 		ldrh	r4, [r5, #2016]
 2820              	.LVL204:
 463:src/xeq.c     **** 		State.pc = pc = 1;
 2821              		.loc 1 463 2 is_stmt 1 view .LVU761
 463:src/xeq.c     **** 		State.pc = pc = 1;
 2822              		.loc 1 463 5 is_stmt 0 view .LVU762
 2823 000a 34B9     		cbnz	r4, .L231
 463:src/xeq.c     **** 		State.pc = pc = 1;
 2824              		.loc 1 463 14 discriminator 1 view .LVU763
 2825 000c 204B     		ldr	r3, .L251+4
 2826 000e 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2827 0010 5B06     		lsls	r3, r3, #25
 464:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2828              		.loc 1 464 3 is_stmt 1 discriminator 1 view .LVU764
 2829              	.LVL205:
 464:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2830              		.loc 1 464 12 is_stmt 0 discriminator 1 view .LVU765
 2831 0012 44BF     		itt	mi
 2832 0014 0124     		movmi	r4, #1
 2833 0016 A5F8E047 		strhmi	r4, [r5, #2016]	@ movhi
 2834              	.LVL206:
 2835              	.L231:
 465:src/xeq.c     **** 		return;
ARM GAS  /tmp/ccjeMhND.s 			page 148


 2836              		.loc 1 465 2 is_stmt 1 view .LVU766
 465:src/xeq.c     **** 		return;
 2837              		.loc 1 465 5 is_stmt 0 view .LVU767
 2838 001a 18B9     		cbnz	r0, .L232
 465:src/xeq.c     **** 		return;
 2839              		.loc 1 465 23 discriminator 1 view .LVU768
 2840 001c B5F8EC37 		ldrh	r3, [r5, #2028]
 465:src/xeq.c     **** 		return;
 2841              		.loc 1 465 14 discriminator 1 view .LVU769
 2842 0020 A342     		cmp	r3, r4
 2843 0022 2DD9     		bls	.L248
 2844              	.L232:
 467:src/xeq.c     **** 		ProgEnd = pc;
 2845              		.loc 1 467 2 is_stmt 1 view .LVU770
 467:src/xeq.c     **** 		ProgEnd = pc;
 2846              		.loc 1 467 17 is_stmt 0 view .LVU771
 2847 0024 1B4E     		ldr	r6, .L251+8
 2848 0026 0023     		movs	r3, #0
 2849 0028 3360     		str	r3, [r6]
 467:src/xeq.c     **** 		ProgEnd = pc;
 2850              		.loc 1 467 22 is_stmt 1 view .LVU772
 2851 002a 05E0     		b	.L236
 2852              	.LVL207:
 2853              	.L249:
 467:src/xeq.c     **** 		ProgEnd = pc;
 2854              		.loc 1 467 39 is_stmt 0 discriminator 2 view .LVU773
 2855 002c FFF7FEFF 		bl	do_inc
 2856              	.LVL208:
 467:src/xeq.c     **** 		ProgEnd = pc;
 2857              		.loc 1 467 2 discriminator 2 view .LVU774
 2858 0030 3368     		ldr	r3, [r6]
 2859 0032 3D68     		ldr	r5, [r7]
 467:src/xeq.c     **** 		ProgEnd = pc;
 2860              		.loc 1 467 39 discriminator 2 view .LVU775
 2861 0034 0446     		mov	r4, r0
 2862              	.LVL209:
 467:src/xeq.c     **** 		ProgEnd = pc;
 2863              		.loc 1 467 22 is_stmt 1 discriminator 2 view .LVU776
 467:src/xeq.c     **** 		ProgEnd = pc;
 2864              		.loc 1 467 2 is_stmt 0 discriminator 2 view .LVU777
 2865 0036 5BB9     		cbnz	r3, .L234
 2866              	.LVL210:
 2867              	.L236:
 468:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2868              		.loc 1 468 3 is_stmt 1 view .LVU778
 468:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2869              		.loc 1 468 11 is_stmt 0 view .LVU779
 2870 0038 A5F8EE47 		strh	r4, [r5, #2030]	@ movhi
 469:src/xeq.c     **** 			break;
 2871              		.loc 1 469 3 is_stmt 1 view .LVU780
 469:src/xeq.c     **** 			break;
 2872              		.loc 1 469 7 is_stmt 0 view .LVU781
 2873 003c 2046     		mov	r0, r4
 2874 003e FFF7FEFF 		bl	getprog
 2875              	.LVL211:
 467:src/xeq.c     **** 		ProgEnd = pc;
 2876              		.loc 1 467 34 is_stmt 1 view .LVU782
ARM GAS  /tmp/ccjeMhND.s 			page 149


 469:src/xeq.c     **** 			break;
 2877              		.loc 1 469 7 is_stmt 0 view .LVU783
 2878 0042 0346     		mov	r3, r0
 469:src/xeq.c     **** 			break;
 2879              		.loc 1 469 6 view .LVU784
 2880 0044 B3F59D7F 		cmp	r3, #314
 467:src/xeq.c     **** 		ProgEnd = pc;
 2881              		.loc 1 467 39 view .LVU785
 2882 0048 4FF00001 		mov	r1, #0
 2883 004c 2046     		mov	r0, r4
 469:src/xeq.c     **** 			break;
 2884              		.loc 1 469 6 view .LVU786
 2885 004e EDD1     		bne	.L249
 2886              	.LVL212:
 2887              	.L234:
 473:src/xeq.c     **** 		const unsigned int opc = pc;
 2888              		.loc 1 473 2 is_stmt 1 view .LVU787
 473:src/xeq.c     **** 		const unsigned int opc = pc;
 2889              		.loc 1 473 10 is_stmt 0 view .LVU788
 2890 0050 B5F8E047 		ldrh	r4, [r5, #2016]
 2891              	.LVL213:
 473:src/xeq.c     **** 		const unsigned int opc = pc;
 2892              		.loc 1 473 10 view .LVU789
 2893 0054 04E0     		b	.L238
 2894              	.LVL214:
 2895              	.L250:
 2896              	.LBB1446:
 476:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2897              		.loc 1 476 20 discriminator 1 view .LVU790
 2898 0056 FFF7FEFF 		bl	getprog
 2899              	.LVL215:
 476:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2900              		.loc 1 476 17 discriminator 1 view .LVU791
 2901 005a B0F59D7F 		cmp	r0, #314
 2902 005e 08D0     		beq	.L237
 2903              	.LVL216:
 2904              	.L238:
 474:src/xeq.c     **** 		pc = do_dec(opc, 0);
 2905              		.loc 1 474 3 is_stmt 1 view .LVU792
 475:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2906              		.loc 1 475 3 view .LVU793
 475:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2907              		.loc 1 475 8 is_stmt 0 view .LVU794
 2908 0060 2046     		mov	r0, r4
 2909 0062 0021     		movs	r1, #0
 2910 0064 FFF7FEFF 		bl	do_dec
 2911              	.LVL217:
 476:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2912              		.loc 1 476 6 view .LVU795
 2913 0068 3368     		ldr	r3, [r6]
 2914 006a 2546     		mov	r5, r4
 475:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2915              		.loc 1 475 8 view .LVU796
 2916 006c 0446     		mov	r4, r0
 2917              	.LVL218:
 476:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2918              		.loc 1 476 3 is_stmt 1 view .LVU797
ARM GAS  /tmp/ccjeMhND.s 			page 150


 476:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2919              		.loc 1 476 6 is_stmt 0 view .LVU798
 2920 006e 002B     		cmp	r3, #0
 2921 0070 F1D0     		beq	.L250
 2922              	.LVL219:
 2923              	.L237:
 477:src/xeq.c     **** 			break;
 2924              		.loc 1 477 4 is_stmt 1 view .LVU799
 477:src/xeq.c     **** 			break;
 2925              		.loc 1 477 14 is_stmt 0 view .LVU800
 2926 0072 3B68     		ldr	r3, [r7]
 2927 0074 012D     		cmp	r5, #1
 2928 0076 38BF     		it	cc
 2929 0078 0125     		movcc	r5, #1
 2930              	.LVL220:
 477:src/xeq.c     **** 			break;
 2931              		.loc 1 477 14 view .LVU801
 2932 007a A3F8EC57 		strh	r5, [r3, #2028]	@ movhi
 478:src/xeq.c     **** 		}
 2933              		.loc 1 478 4 is_stmt 1 view .LVU802
 2934              	.LBE1446:
 481:src/xeq.c     **** 
 2935              		.loc 1 481 1 is_stmt 0 view .LVU803
 2936 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2937              	.LVL221:
 2938              	.L248:
 465:src/xeq.c     **** 		return;
 2939              		.loc 1 465 42 discriminator 2 view .LVU804
 2940 0080 B5F8EE37 		ldrh	r3, [r5, #2030]
 465:src/xeq.c     **** 		return;
 2941              		.loc 1 465 33 discriminator 2 view .LVU805
 2942 0084 A342     		cmp	r3, r4
 2943 0086 CDD3     		bcc	.L232
 481:src/xeq.c     **** 
 2944              		.loc 1 481 1 view .LVU806
 2945 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2946              	.LVL222:
 2947              	.L252:
 481:src/xeq.c     **** 
 2948              		.loc 1 481 1 view .LVU807
 2949 008a 00BF     		.align	2
 2950              	.L251:
 2951 008c 00000000 		.word	main_ram
 2952 0090 00000000 		.word	StateWhileOn
 2953 0094 00000000 		.word	PcWrapped
 2954              		.cfi_endproc
 2955              	.LFE24:
 2957              		.section	.text.set_pc,"ax",%progbits
 2958              		.align	1
 2959              		.p2align 2,,3
 2960              		.global	set_pc
 2961              		.syntax unified
 2962              		.thumb
 2963              		.thumb_func
 2964              		.fpu fpv4-sp-d16
 2966              	set_pc:
 2967              	.LVL223:
ARM GAS  /tmp/ccjeMhND.s 			page 151


 2968              	.LFB18:
 358:src/xeq.c     **** 	if (isRAM(pc)) {
 2969              		.loc 1 358 30 is_stmt 1 view -0
 2970              		.cfi_startproc
 2971              		@ args = 0, pretend = 0, frame = 0
 2972              		@ frame_needed = 0, uses_anonymous_args = 0
 359:src/xeq.c     **** 		if (pc > ProgSize)
 2973              		.loc 1 359 2 view .LVU809
 359:src/xeq.c     **** 		if (pc > ProgSize)
 2974              		.loc 1 359 5 is_stmt 0 view .LVU810
 2975 0000 10F4704F 		tst	r0, #61440
 358:src/xeq.c     **** 	if (isRAM(pc)) {
 2976              		.loc 1 358 30 view .LVU811
 2977 0004 38B5     		push	{r3, r4, r5, lr}
 2978              		.cfi_def_cfa_offset 16
 2979              		.cfi_offset 3, -16
 2980              		.cfi_offset 4, -12
 2981              		.cfi_offset 5, -8
 2982              		.cfi_offset 14, -4
 358:src/xeq.c     **** 	if (isRAM(pc)) {
 2983              		.loc 1 358 30 view .LVU812
 2984 0006 0446     		mov	r4, r0
 359:src/xeq.c     **** 		if (pc > ProgSize)
 2985              		.loc 1 359 5 view .LVU813
 2986 0008 15D1     		bne	.L254
 360:src/xeq.c     **** 			pc = ProgSize;
 2987              		.loc 1 360 3 is_stmt 1 view .LVU814
 360:src/xeq.c     **** 			pc = ProgSize;
 2988              		.loc 1 360 12 is_stmt 0 view .LVU815
 2989 000a 264B     		ldr	r3, .L262
 2990 000c 1B68     		ldr	r3, [r3]
 2991 000e 5A88     		ldrh	r2, [r3, #2]
 2992 0010 9042     		cmp	r0, r2
 2993 0012 28BF     		it	cs
 2994 0014 1446     		movcs	r4, r2
 2995              	.LVL224:
 362:src/xeq.c     **** 			pc--;
 2996              		.loc 1 362 3 is_stmt 1 view .LVU816
 362:src/xeq.c     **** 			pc--;
 2997              		.loc 1 362 6 is_stmt 0 view .LVU817
 2998 0016 012C     		cmp	r4, #1
 2999 0018 06D9     		bls	.L255
 362:src/xeq.c     **** 			pc--;
 3000              		.loc 1 362 14 discriminator 1 view .LVU818
 3001 001a 33F81420 		ldrh	r2, [r3, r4, lsl #1]
 3002 001e 02F47042 		and	r2, r2, #61440
 3003 0022 B2F5704F 		cmp	r2, #61440
 3004 0026 35D0     		beq	.L261
 3005              	.L255:
 371:src/xeq.c     **** }
 3006              		.loc 1 371 2 is_stmt 1 view .LVU819
 3007              	.LVL225:
 3008              	.LBB1447:
 3009              	.LBI1447:
 279:src/xeq.c     **** 	State.pc = pc;
 3010              		.loc 1 279 13 view .LVU820
 3011              	.LBB1448:
ARM GAS  /tmp/ccjeMhND.s 			page 152


 280:src/xeq.c     **** 	update_program_bounds(0);
 3012              		.loc 1 280 2 view .LVU821
 280:src/xeq.c     **** 	update_program_bounds(0);
 3013              		.loc 1 280 11 is_stmt 0 view .LVU822
 3014 0028 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3015              		.loc 1 281 2 is_stmt 1 view .LVU823
 3016 002c 0020     		movs	r0, #0
 3017              	.LBE1448:
 3018              	.LBE1447:
 372:src/xeq.c     **** 
 3019              		.loc 1 372 1 is_stmt 0 view .LVU824
 3020 002e BDE83840 		pop	{r3, r4, r5, lr}
 3021              		.cfi_remember_state
 3022              		.cfi_restore 14
 3023              		.cfi_restore 5
 3024              		.cfi_restore 4
 3025              		.cfi_restore 3
 3026              		.cfi_def_cfa_offset 0
 3027              	.LVL226:
 3028              	.LBB1456:
 3029              	.LBB1449:
 281:src/xeq.c     **** }
 3030              		.loc 1 281 2 view .LVU825
 3031 0032 FFF7FEBF 		b	update_program_bounds
 3032              	.LVL227:
 3033              	.L254:
 3034              		.cfi_restore_state
 281:src/xeq.c     **** }
 3035              		.loc 1 281 2 view .LVU826
 3036              	.LBE1449:
 3037              	.LBE1456:
 364:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3038              		.loc 1 364 9 is_stmt 1 view .LVU827
 364:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3039              		.loc 1 364 14 is_stmt 0 view .LVU828
 3040 0036 820B     		lsrs	r2, r0, #14
 364:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3041              		.loc 1 364 12 view .LVU829
 3042 0038 032A     		cmp	r2, #3
 3043 003a 22D0     		beq	.L260
 3044              	.LBB1457:
 365:src/xeq.c     **** 		if (pc > n - 1)
 3045              		.loc 1 365 3 is_stmt 1 view .LVU830
 3046              	.LVL228:
 3047              	.LBB1458:
 3048              	.LBI1458:
 310:src/xeq.c     **** 	if (region == REGION_XROM)
 3049              		.loc 1 310 5 view .LVU831
 3050              	.LBB1459:
 311:src/xeq.c     **** 		return xrom_size;
 3051              		.loc 1 311 2 view .LVU832
 314:src/xeq.c     **** }
 3052              		.loc 1 314 3 view .LVU833
 314:src/xeq.c     **** }
 3053              		.loc 1 314 24 is_stmt 0 view .LVU834
 3054 003c 1A49     		ldr	r1, .L262+4
ARM GAS  /tmp/ccjeMhND.s 			page 153


 3055              	.LBE1459:
 3056              	.LBE1458:
 365:src/xeq.c     **** 		if (pc > n - 1)
 3057              		.loc 1 365 26 view .LVU835
 3058 003e 1B4B     		ldr	r3, .L262+8
 3059              	.LBB1461:
 3060              	.LBB1460:
 314:src/xeq.c     **** }
 3061              		.loc 1 314 32 view .LVU836
 3062 0040 51F82220 		ldr	r2, [r1, r2, lsl #2]
 3063              	.LBE1460:
 3064              	.LBE1461:
 365:src/xeq.c     **** 		if (pc > n - 1)
 3065              		.loc 1 365 39 view .LVU837
 3066 0044 32F8022C 		ldrh	r2, [r2, #-2]
 365:src/xeq.c     **** 		if (pc > n - 1)
 3067              		.loc 1 365 26 view .LVU838
 3068 0048 00EA0301 		and	r1, r0, r3
 365:src/xeq.c     **** 		if (pc > n - 1)
 3069              		.loc 1 365 39 view .LVU839
 3070 004c 0A44     		add	r2, r2, r1
 3071              	.LVL229:
 366:src/xeq.c     **** 			pc = n - 1;
 3072              		.loc 1 366 3 is_stmt 1 view .LVU840
 3073 004e 9042     		cmp	r0, r2
 3074 0050 28BF     		it	cs
 3075 0052 1446     		movcs	r4, r2
 3076              	.LVL230:
 368:src/xeq.c     **** 			--pc;
 3077              		.loc 1 368 3 view .LVU841
 368:src/xeq.c     **** 			--pc;
 3078              		.loc 1 368 12 is_stmt 0 view .LVU842
 3079 0054 2340     		ands	r3, r3, r4
 3080 0056 0133     		adds	r3, r3, #1
 368:src/xeq.c     **** 			--pc;
 3081              		.loc 1 368 6 view .LVU843
 3082 0058 A342     		cmp	r3, r4
 3083 005a 12D2     		bcs	.L260
 368:src/xeq.c     **** 			--pc;
 3084              		.loc 1 368 28 discriminator 1 view .LVU844
 3085 005c 651E     		subs	r5, r4, #1
 3086 005e 2846     		mov	r0, r5
 3087 0060 FFF7FEFF 		bl	getprog
 3088              	.LVL231:
 368:src/xeq.c     **** 			--pc;
 3089              		.loc 1 368 28 discriminator 1 view .LVU845
 3090 0064 0F4B     		ldr	r3, .L262
 3091 0066 00F47040 		and	r0, r0, #61440
 3092 006a 1B68     		ldr	r3, [r3]
 368:src/xeq.c     **** 			--pc;
 3093              		.loc 1 368 25 discriminator 1 view .LVU846
 3094 006c B0F5704F 		cmp	r0, #61440
 369:src/xeq.c     **** 	}
 3095              		.loc 1 369 4 is_stmt 1 discriminator 1 view .LVU847
 3096              	.LVL232:
 369:src/xeq.c     **** 	}
 3097              		.loc 1 369 4 is_stmt 0 discriminator 1 view .LVU848
ARM GAS  /tmp/ccjeMhND.s 			page 154


 3098 0070 08BF     		it	eq
 3099 0072 2C46     		moveq	r4, r5
 3100              	.LVL233:
 369:src/xeq.c     **** 	}
 3101              		.loc 1 369 4 discriminator 1 view .LVU849
 3102              	.LBE1457:
 371:src/xeq.c     **** }
 3103              		.loc 1 371 2 is_stmt 1 discriminator 1 view .LVU850
 3104              	.LBB1462:
 279:src/xeq.c     **** 	State.pc = pc;
 3105              		.loc 1 279 13 discriminator 1 view .LVU851
 3106              	.LBB1450:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3107              		.loc 1 280 2 discriminator 1 view .LVU852
 280:src/xeq.c     **** 	update_program_bounds(0);
 3108              		.loc 1 280 11 is_stmt 0 discriminator 1 view .LVU853
 3109 0074 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3110              		.loc 1 281 2 is_stmt 1 discriminator 1 view .LVU854
 3111 0078 0020     		movs	r0, #0
 3112              	.LBE1450:
 3113              	.LBE1462:
 372:src/xeq.c     **** 
 3114              		.loc 1 372 1 is_stmt 0 discriminator 1 view .LVU855
 3115 007a BDE83840 		pop	{r3, r4, r5, lr}
 3116              		.cfi_remember_state
 3117              		.cfi_restore 14
 3118              		.cfi_restore 5
 3119              		.cfi_restore 4
 3120              		.cfi_restore 3
 3121              		.cfi_def_cfa_offset 0
 3122              	.LVL234:
 3123              	.LBB1463:
 3124              	.LBB1451:
 281:src/xeq.c     **** }
 3125              		.loc 1 281 2 discriminator 1 view .LVU856
 3126 007e FFF7FEBF 		b	update_program_bounds
 3127              	.LVL235:
 3128              	.L260:
 3129              		.cfi_restore_state
 281:src/xeq.c     **** }
 3130              		.loc 1 281 2 discriminator 1 view .LVU857
 3131 0082 084B     		ldr	r3, .L262
 3132 0084 1B68     		ldr	r3, [r3]
 281:src/xeq.c     **** }
 3133              		.loc 1 281 2 discriminator 1 view .LVU858
 3134              	.LBE1451:
 3135              	.LBE1463:
 371:src/xeq.c     **** }
 3136              		.loc 1 371 2 is_stmt 1 view .LVU859
 3137              	.LVL236:
 3138              	.LBB1464:
 279:src/xeq.c     **** 	State.pc = pc;
 3139              		.loc 1 279 13 view .LVU860
 3140              	.LBB1452:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3141              		.loc 1 280 2 view .LVU861
ARM GAS  /tmp/ccjeMhND.s 			page 155


 281:src/xeq.c     **** }
 3142              		.loc 1 281 2 is_stmt 0 view .LVU862
 3143 0086 0020     		movs	r0, #0
 280:src/xeq.c     **** 	update_program_bounds(0);
 3144              		.loc 1 280 11 view .LVU863
 3145 0088 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3146              		.loc 1 281 2 is_stmt 1 view .LVU864
 3147              	.LBE1452:
 3148              	.LBE1464:
 372:src/xeq.c     **** 
 3149              		.loc 1 372 1 is_stmt 0 view .LVU865
 3150 008c BDE83840 		pop	{r3, r4, r5, lr}
 3151              		.cfi_remember_state
 3152              		.cfi_restore 14
 3153              		.cfi_restore 5
 3154              		.cfi_restore 4
 3155              		.cfi_restore 3
 3156              		.cfi_def_cfa_offset 0
 3157              	.LVL237:
 3158              	.LBB1465:
 3159              	.LBB1453:
 281:src/xeq.c     **** }
 3160              		.loc 1 281 2 view .LVU866
 3161 0090 FFF7FEBF 		b	update_program_bounds
 3162              	.LVL238:
 3163              	.L261:
 3164              		.cfi_restore_state
 281:src/xeq.c     **** }
 3165              		.loc 1 281 2 view .LVU867
 3166              	.LBE1453:
 3167              	.LBE1465:
 363:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3168              		.loc 1 363 4 is_stmt 1 view .LVU868
 363:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3169              		.loc 1 363 6 is_stmt 0 view .LVU869
 3170 0094 013C     		subs	r4, r4, #1
 3171              	.LVL239:
 371:src/xeq.c     **** }
 3172              		.loc 1 371 2 is_stmt 1 view .LVU870
 3173              	.LBB1466:
 279:src/xeq.c     **** 	State.pc = pc;
 3174              		.loc 1 279 13 view .LVU871
 3175              	.LBB1454:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3176              		.loc 1 280 2 view .LVU872
 280:src/xeq.c     **** 	update_program_bounds(0);
 3177              		.loc 1 280 11 is_stmt 0 view .LVU873
 3178 0096 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3179              		.loc 1 281 2 is_stmt 1 view .LVU874
 3180 009a 0020     		movs	r0, #0
 3181              	.LBE1454:
 3182              	.LBE1466:
 372:src/xeq.c     **** 
 3183              		.loc 1 372 1 is_stmt 0 view .LVU875
 3184 009c BDE83840 		pop	{r3, r4, r5, lr}
ARM GAS  /tmp/ccjeMhND.s 			page 156


 3185              		.cfi_restore 14
 3186              		.cfi_restore 5
 3187              		.cfi_restore 4
 3188              		.cfi_restore 3
 3189              		.cfi_def_cfa_offset 0
 3190              	.LVL240:
 3191              	.LBB1467:
 3192              	.LBB1455:
 281:src/xeq.c     **** }
 3193              		.loc 1 281 2 view .LVU876
 3194 00a0 FFF7FEBF 		b	update_program_bounds
 3195              	.LVL241:
 3196              	.L263:
 281:src/xeq.c     **** }
 3197              		.loc 1 281 2 view .LVU877
 3198              		.align	2
 3199              	.L262:
 3200 00a4 00000000 		.word	main_ram
 3201 00a8 00000000 		.word	.LANCHOR0
 3202 00ac 00C0FFFF 		.word	-16384
 3203              	.LBE1455:
 3204              	.LBE1467:
 3205              		.cfi_endproc
 3206              	.LFE18:
 3208              		.section	.text.incpc,"ax",%progbits
 3209              		.align	1
 3210              		.p2align 2,,3
 3211              		.global	incpc
 3212              		.syntax unified
 3213              		.thumb
 3214              		.thumb_func
 3215              		.fpu fpv4-sp-d16
 3217              	incpc:
 3218              	.LFB22:
 449:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3219              		.loc 1 449 17 is_stmt 1 view -0
 3220              		.cfi_startproc
 3221              		@ args = 0, pretend = 0, frame = 0
 3222              		@ frame_needed = 0, uses_anonymous_args = 0
 450:src/xeq.c     **** 	return PcWrapped;
 3223              		.loc 1 450 2 view .LVU879
 449:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3224              		.loc 1 449 17 is_stmt 0 view .LVU880
 3225 0000 10B5     		push	{r4, lr}
 3226              		.cfi_def_cfa_offset 8
 3227              		.cfi_offset 4, -8
 3228              		.cfi_offset 14, -4
 450:src/xeq.c     **** 	return PcWrapped;
 3229              		.loc 1 450 20 view .LVU881
 3230 0002 084C     		ldr	r4, .L266
 3231 0004 2368     		ldr	r3, [r4]
 450:src/xeq.c     **** 	return PcWrapped;
 3232              		.loc 1 450 2 view .LVU882
 3233 0006 0121     		movs	r1, #1
 3234 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3235 000c FFF7FEFF 		bl	do_inc
 3236              	.LVL242:
ARM GAS  /tmp/ccjeMhND.s 			page 157


 3237              	.LBB1468:
 3238              	.LBB1469:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3239              		.loc 1 280 11 view .LVU883
 3240 0010 2368     		ldr	r3, [r4]
 3241              	.LBE1469:
 3242              	.LBE1468:
 450:src/xeq.c     **** 	return PcWrapped;
 3243              		.loc 1 450 2 view .LVU884
 3244 0012 0246     		mov	r2, r0
 3245              	.LVL243:
 3246              	.LBB1471:
 3247              	.LBI1468:
 279:src/xeq.c     **** 	State.pc = pc;
 3248              		.loc 1 279 13 is_stmt 1 view .LVU885
 3249              	.LBB1470:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3250              		.loc 1 280 2 view .LVU886
 280:src/xeq.c     **** 	update_program_bounds(0);
 3251              		.loc 1 280 11 is_stmt 0 view .LVU887
 3252 0014 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3253              		.loc 1 281 2 is_stmt 1 view .LVU888
 3254 0018 0020     		movs	r0, #0
 3255              	.LVL244:
 281:src/xeq.c     **** }
 3256              		.loc 1 281 2 is_stmt 0 view .LVU889
 3257 001a FFF7FEFF 		bl	update_program_bounds
 3258              	.LVL245:
 281:src/xeq.c     **** }
 3259              		.loc 1 281 2 view .LVU890
 3260              	.LBE1470:
 3261              	.LBE1471:
 451:src/xeq.c     **** }
 3262              		.loc 1 451 2 is_stmt 1 view .LVU891
 451:src/xeq.c     **** }
 3263              		.loc 1 451 9 is_stmt 0 view .LVU892
 3264 001e 024B     		ldr	r3, .L266+4
 452:src/xeq.c     **** 
 3265              		.loc 1 452 1 view .LVU893
 3266 0020 1868     		ldr	r0, [r3]
 3267 0022 10BD     		pop	{r4, pc}
 3268              	.L267:
 3269              		.align	2
 3270              	.L266:
 3271 0024 00000000 		.word	main_ram
 3272 0028 00000000 		.word	PcWrapped
 3273              		.cfi_endproc
 3274              	.LFE22:
 3276              		.section	.text.decpc,"ax",%progbits
 3277              		.align	1
 3278              		.p2align 2,,3
 3279              		.global	decpc
 3280              		.syntax unified
 3281              		.thumb
 3282              		.thumb_func
 3283              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccjeMhND.s 			page 158


 3285              	decpc:
 3286              	.LFB23:
 454:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3287              		.loc 1 454 18 is_stmt 1 view -0
 3288              		.cfi_startproc
 3289              		@ args = 0, pretend = 0, frame = 0
 3290              		@ frame_needed = 0, uses_anonymous_args = 0
 455:src/xeq.c     **** }
 3291              		.loc 1 455 2 view .LVU895
 454:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3292              		.loc 1 454 18 is_stmt 0 view .LVU896
 3293 0000 10B5     		push	{r4, lr}
 3294              		.cfi_def_cfa_offset 8
 3295              		.cfi_offset 4, -8
 3296              		.cfi_offset 14, -4
 455:src/xeq.c     **** }
 3297              		.loc 1 455 20 view .LVU897
 3298 0002 084C     		ldr	r4, .L270
 3299 0004 2368     		ldr	r3, [r4]
 455:src/xeq.c     **** }
 3300              		.loc 1 455 2 view .LVU898
 3301 0006 0121     		movs	r1, #1
 3302 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3303 000c FFF7FEFF 		bl	do_dec
 3304              	.LVL246:
 3305              	.LBB1472:
 3306              	.LBB1473:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3307              		.loc 1 280 11 view .LVU899
 3308 0010 2368     		ldr	r3, [r4]
 3309              	.LBE1473:
 3310              	.LBE1472:
 455:src/xeq.c     **** }
 3311              		.loc 1 455 2 view .LVU900
 3312 0012 0246     		mov	r2, r0
 3313              	.LVL247:
 3314              	.LBB1476:
 3315              	.LBI1472:
 279:src/xeq.c     **** 	State.pc = pc;
 3316              		.loc 1 279 13 is_stmt 1 view .LVU901
 3317              	.LBB1474:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3318              		.loc 1 280 2 view .LVU902
 3319              	.LBE1474:
 3320              	.LBE1476:
 456:src/xeq.c     **** 
 3321              		.loc 1 456 1 is_stmt 0 view .LVU903
 3322 0014 BDE81040 		pop	{r4, lr}
 3323              		.cfi_restore 14
 3324              		.cfi_restore 4
 3325              		.cfi_def_cfa_offset 0
 3326              	.LBB1477:
 3327              	.LBB1475:
 281:src/xeq.c     **** }
 3328              		.loc 1 281 2 view .LVU904
 3329 0018 0020     		movs	r0, #0
 3330              	.LVL248:
ARM GAS  /tmp/ccjeMhND.s 			page 159


 280:src/xeq.c     **** 	update_program_bounds(0);
 3331              		.loc 1 280 11 view .LVU905
 3332 001a A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3333              		.loc 1 281 2 is_stmt 1 view .LVU906
 3334 001e FFF7FEBF 		b	update_program_bounds
 3335              	.LVL249:
 3336              	.L271:
 281:src/xeq.c     **** }
 3337              		.loc 1 281 2 is_stmt 0 view .LVU907
 3338 0022 00BF     		.align	2
 3339              	.L270:
 3340 0024 00000000 		.word	main_ram
 3341              	.LBE1475:
 3342              	.LBE1477:
 3343              		.cfi_endproc
 3344              	.LFE23:
 3346              		.section	.text.fin_tst.part.0,"ax",%progbits
 3347              		.align	1
 3348              		.p2align 2,,3
 3349              		.syntax unified
 3350              		.thumb
 3351              		.thumb_func
 3352              		.fpu fpv4-sp-d16
 3354              	fin_tst.part.0:
 3355              	.LFB281:
2363:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 3356              		.loc 1 2363 6 is_stmt 1 view -0
 3357              		.cfi_startproc
 3358              		@ args = 0, pretend = 0, frame = 0
 3359              		@ frame_needed = 0, uses_anonymous_args = 0
 3360              	.LVL250:
2363:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 3361              		.loc 1 2363 6 is_stmt 0 view .LVU909
 3362 0000 08B5     		push	{r3, lr}
 3363              		.cfi_def_cfa_offset 8
 3364              		.cfi_offset 3, -8
 3365              		.cfi_offset 14, -4
2366:src/xeq.c     **** 			decpc();
 3366              		.loc 1 2366 14 view .LVU910
 3367 0002 FFF7FEFF 		bl	incpc
 3368              	.LVL251:
2366:src/xeq.c     **** 			decpc();
 3369              		.loc 1 2366 11 view .LVU911
 3370 0006 00B9     		cbnz	r0, .L275
2377:src/xeq.c     **** 
 3371              		.loc 1 2377 1 view .LVU912
 3372 0008 08BD     		pop	{r3, pc}
 3373              	.L275:
2367:src/xeq.c     **** 	}
 3374              		.loc 1 2367 4 is_stmt 1 view .LVU913
2377:src/xeq.c     **** 
 3375              		.loc 1 2377 1 is_stmt 0 view .LVU914
 3376 000a BDE80840 		pop	{r3, lr}
 3377              		.cfi_restore 14
 3378              		.cfi_restore 3
 3379              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccjeMhND.s 			page 160


2367:src/xeq.c     **** 	}
 3380              		.loc 1 2367 4 view .LVU915
 3381 000e FFF7FEBF 		b	decpc
 3382              	.LVL252:
 3383              		.cfi_endproc
 3384              	.LFE281:
 3386 0012 00BF     		.section	.text.do_rtn,"ax",%progbits
 3387              		.align	1
 3388              		.p2align 2,,3
 3389              		.syntax unified
 3390              		.thumb
 3391              		.thumb_func
 3392              		.fpu fpv4-sp-d16
 3394              	do_rtn:
 3395              	.LVL253:
 3396              	.LFB150:
2041:src/xeq.c     **** 	unsigned short pc;
 3397              		.loc 1 2041 31 is_stmt 1 view -0
 3398              		.cfi_startproc
 3399              		@ args = 0, pretend = 0, frame = 0
 3400              		@ frame_needed = 0, uses_anonymous_args = 0
2042:src/xeq.c     **** 
 3401              		.loc 1 2042 2 view .LVU917
2044:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3402              		.loc 1 2044 2 view .LVU918
2041:src/xeq.c     **** 	unsigned short pc;
 3403              		.loc 1 2041 31 is_stmt 0 view .LVU919
 3404 0000 70B5     		push	{r4, r5, r6, lr}
 3405              		.cfi_def_cfa_offset 16
 3406              		.cfi_offset 4, -16
 3407              		.cfi_offset 5, -12
 3408              		.cfi_offset 6, -8
 3409              		.cfi_offset 14, -4
2044:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3410              		.loc 1 2044 6 view .LVU920
 3411 0002 224C     		ldr	r4, .L290
 3412 0004 2368     		ldr	r3, [r4]
2044:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3413              		.loc 1 2044 5 view .LVU921
 3414 0006 B3F9E227 		ldrsh	r2, [r3, #2018]
 3415 000a 002A     		cmp	r2, #0
 3416 000c 0FDB     		blt	.L277
2046:src/xeq.c     **** 		raw_set_pc(ProgBegin);
 3417              		.loc 1 2046 3 is_stmt 1 view .LVU922
 3418              	.LBB1478:
 3419              	.LBI1478:
1409:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 3420              		.loc 1 1409 6 view .LVU923
 3421              	.LBB1479:
1410:src/xeq.c     **** }
 3422              		.loc 1 1410 2 view .LVU924
1410:src/xeq.c     **** }
 3423              		.loc 1 1410 24 is_stmt 0 view .LVU925
 3424 000e 0020     		movs	r0, #0
 3425              	.LVL254:
1410:src/xeq.c     **** }
 3426              		.loc 1 1410 24 view .LVU926
ARM GAS  /tmp/ccjeMhND.s 			page 161


 3427              	.LBE1479:
 3428              	.LBE1478:
 3429              	.LBB1481:
 3430              	.LBB1482:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3431              		.loc 1 280 11 view .LVU927
 3432 0010 B3F8EC27 		ldrh	r2, [r3, #2028]
 3433              	.LBE1482:
 3434              	.LBE1481:
 3435              	.LBB1484:
 3436              	.LBB1480:
1410:src/xeq.c     **** }
 3437              		.loc 1 1410 24 view .LVU928
 3438 0014 A3F8DE07 		strh	r0, [r3, #2014]	@ movhi
1410:src/xeq.c     **** }
 3439              		.loc 1 1410 12 view .LVU929
 3440 0018 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 3441              	.LBE1480:
 3442              	.LBE1484:
2047:src/xeq.c     **** 	}
 3443              		.loc 1 2047 3 is_stmt 1 view .LVU930
 3444              	.LVL255:
 3445              	.LBB1485:
 3446              	.LBI1481:
 279:src/xeq.c     **** 	State.pc = pc;
 3447              		.loc 1 279 13 view .LVU931
 3448              	.LBB1483:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3449              		.loc 1 280 2 view .LVU932
 280:src/xeq.c     **** 	update_program_bounds(0);
 3450              		.loc 1 280 11 is_stmt 0 view .LVU933
 3451 001c A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3452              		.loc 1 281 2 is_stmt 1 view .LVU934
 3453 0020 FFF7FEFF 		bl	update_program_bounds
 3454              	.LVL256:
 3455              	.L278:
 281:src/xeq.c     **** }
 3456              		.loc 1 281 2 is_stmt 0 view .LVU935
 3457              	.LBE1483:
 3458              	.LBE1485:
2060:src/xeq.c     **** 		// RTN with empty stack stops
 3459              		.loc 1 2060 2 is_stmt 1 view .LVU936
2060:src/xeq.c     **** 		// RTN with empty stack stops
 3460              		.loc 1 2060 6 is_stmt 0 view .LVU937
 3461 0024 2368     		ldr	r3, [r4]
2060:src/xeq.c     **** 		// RTN with empty stack stops
 3462              		.loc 1 2060 5 view .LVU938
 3463 0026 B3F9E217 		ldrsh	r1, [r3, #2018]
 3464 002a 09B3     		cbz	r1, .L289
2064:src/xeq.c     **** 
 3465              		.loc 1 2064 1 view .LVU939
 3466 002c 70BD     		pop	{r4, r5, r6, pc}
 3467              	.LVL257:
 3468              	.L277:
2052:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
 3469              		.loc 1 2052 3 is_stmt 1 view .LVU940
ARM GAS  /tmp/ccjeMhND.s 			page 162


 3470 002e 0546     		mov	r5, r0
 3471 0030 FFF7FEFF 		bl	retstk_up
 3472              	.LVL258:
2053:src/xeq.c     **** 		raw_set_pc(pc);
 3473              		.loc 1 2053 3 view .LVU941
2053:src/xeq.c     **** 		raw_set_pc(pc);
 3474              		.loc 1 2053 15 is_stmt 0 view .LVU942
 3475 0034 2268     		ldr	r2, [r4]
2053:src/xeq.c     **** 		raw_set_pc(pc);
 3476              		.loc 1 2053 6 view .LVU943
 3477 0036 1649     		ldr	r1, .L290+4
2053:src/xeq.c     **** 		raw_set_pc(pc);
 3478              		.loc 1 2053 14 view .LVU944
 3479 0038 B2F9E237 		ldrsh	r3, [r2, #2018]
2053:src/xeq.c     **** 		raw_set_pc(pc);
 3480              		.loc 1 2053 6 view .LVU945
 3481 003c 0968     		ldr	r1, [r1]
2053:src/xeq.c     **** 		raw_set_pc(pc);
 3482              		.loc 1 2053 14 view .LVU946
 3483 003e 03F10043 		add	r3, r3, #-2147483648
 3484 0042 013B     		subs	r3, r3, #1
 3485              	.LBB1486:
 3486              	.LBB1487:
 281:src/xeq.c     **** }
 3487              		.loc 1 281 2 view .LVU947
 3488 0044 0020     		movs	r0, #0
 3489              	.LBE1487:
 3490              	.LBE1486:
2053:src/xeq.c     **** 		raw_set_pc(pc);
 3491              		.loc 1 2053 6 view .LVU948
 3492 0046 31F81360 		ldrh	r6, [r1, r3, lsl #1]
 3493              	.LVL259:
2054:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
 3494              		.loc 1 2054 3 is_stmt 1 view .LVU949
 3495              	.LBB1489:
 3496              	.LBI1486:
 279:src/xeq.c     **** 	State.pc = pc;
 3497              		.loc 1 279 13 view .LVU950
 3498              	.LBB1488:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3499              		.loc 1 280 2 view .LVU951
 280:src/xeq.c     **** 	update_program_bounds(0);
 3500              		.loc 1 280 11 is_stmt 0 view .LVU952
 3501 004a A2F8E067 		strh	r6, [r2, #2016]	@ movhi
 281:src/xeq.c     **** }
 3502              		.loc 1 281 2 is_stmt 1 view .LVU953
 3503 004e FFF7FEFF 		bl	update_program_bounds
 3504              	.LVL260:
 281:src/xeq.c     **** }
 3505              		.loc 1 281 2 is_stmt 0 view .LVU954
 3506              	.LBE1488:
 3507              	.LBE1489:
2056:src/xeq.c     **** 			if (incpc())
 3508              		.loc 1 2056 3 is_stmt 1 view .LVU955
2056:src/xeq.c     **** 			if (incpc())
 3509              		.loc 1 2056 6 is_stmt 0 view .LVU956
 3510 0052 002D     		cmp	r5, #0
ARM GAS  /tmp/ccjeMhND.s 			page 163


 3511 0054 E6D0     		beq	.L278
2056:src/xeq.c     **** 			if (incpc())
 3512              		.loc 1 2056 16 discriminator 1 view .LVU957
 3513 0056 3046     		mov	r0, r6
 3514 0058 FFF7FEFF 		bl	getprog
 3515              	.LVL261:
2056:src/xeq.c     **** 			if (incpc())
 3516              		.loc 1 2056 13 discriminator 1 view .LVU958
 3517 005c B0F5C17F 		cmp	r0, #386
 3518 0060 E0D0     		beq	.L278
2057:src/xeq.c     **** 				decpc();
 3519              		.loc 1 2057 4 is_stmt 1 view .LVU959
2057:src/xeq.c     **** 				decpc();
 3520              		.loc 1 2057 8 is_stmt 0 view .LVU960
 3521 0062 FFF7FEFF 		bl	incpc
 3522              	.LVL262:
2057:src/xeq.c     **** 				decpc();
 3523              		.loc 1 2057 7 view .LVU961
 3524 0066 0028     		cmp	r0, #0
 3525 0068 DCD0     		beq	.L278
2058:src/xeq.c     **** 	}
 3526              		.loc 1 2058 5 is_stmt 1 view .LVU962
 3527 006a FFF7FEFF 		bl	decpc
 3528              	.LVL263:
 3529 006e D9E7     		b	.L278
 3530              	.LVL264:
 3531              	.L289:
2062:src/xeq.c     **** 	}
 3532              		.loc 1 2062 3 view .LVU963
 3533              	.LBB1490:
 3534              	.LBI1490:
4945:src/xeq.c     **** 
4946:src/xeq.c     **** 
4947:src/xeq.c     **** /* Handle a command that takes an argument.  The argument is encoded
4948:src/xeq.c     ****  * in the low order bits of the opcode.  We also have to take
4949:src/xeq.c     ****  * account of the indirection flag and various limits.
4950:src/xeq.c     ****  */
4951:src/xeq.c     **** static void rargs(const opcode op) {
4952:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
4953:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
4954:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
4955:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
4956:src/xeq.c     **** 
4957:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
4958:src/xeq.c     **** 
4959:src/xeq.c     **** 	process_cmdline();
4960:src/xeq.c     **** 
4961:src/xeq.c     **** 	if (cmd >= NUM_RARG) {
4962:src/xeq.c     **** 		illegal(op);
4963:src/xeq.c     **** 		return;
4964:src/xeq.c     **** 	}
4965:src/xeq.c     **** 	if (isNULL(argcmds[cmd].f)) {
4966:src/xeq.c     **** 		set_lift();
4967:src/xeq.c     **** 		return;
4968:src/xeq.c     **** 	}
4969:src/xeq.c     **** 
4970:src/xeq.c     **** 	if (ind) {
ARM GAS  /tmp/ccjeMhND.s 			page 164


4971:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
4972:src/xeq.c     **** 			// Get the argument by reading a register
4973:src/xeq.c     **** 			int sgn;
4974:src/xeq.c     **** 			unsigned long long int regval;
4975:src/xeq.c     **** 
4976:src/xeq.c     **** 			if (arg > get_reg_limit(RARG_RCL, arg)) {
4977:src/xeq.c     **** 				// Invalid register specified for indirect access
4978:src/xeq.c     **** 				report_err(ERR_RANGE);
4979:src/xeq.c     **** 				return;
4980:src/xeq.c     **** 			}
4981:src/xeq.c     **** 			regval = get_reg_n_int_sgn(arg, &sgn);
4982:src/xeq.c     **** 			if ((regval >> 32) != 0)
4983:src/xeq.c     **** 				goto range;
4984:src/xeq.c     **** 			arg = (unsigned int) regval;
4985:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
4986:src/xeq.c     **** 				// negative arguments address local registers or flags
4987:src/xeq.c     **** 				arg = LOCAL_REG_BASE + arg;
4988:src/xeq.c     **** 			}
4989:src/xeq.c     **** 		} 
4990:src/xeq.c     **** 		else {
4991:src/xeq.c     **** 			// put the top bit back in
4992:src/xeq.c     **** 			arg |= RARG_IND;
4993:src/xeq.c     **** 		}
4994:src/xeq.c     **** 	}
4995:src/xeq.c     **** 	if (argcmds[cmd].reg) {
4996:src/xeq.c     **** 		// Range checking for registers against variable boundary
4997:src/xeq.c     **** 		lim = get_reg_limit(cmd, arg);
4998:src/xeq.c     **** 	}
4999:src/xeq.c     **** 	else if (argcmds[cmd].flag) {
5000:src/xeq.c     **** 		if (LocalRegs == 0)
5001:src/xeq.c     **** 			lim = NUMFLG - 1;
5002:src/xeq.c     **** 		else 
5003:src/xeq.c     **** 			lim = LOCAL_FLAG_BASE + MAX_LOCAL_DIRECT - 1;
5004:src/xeq.c     **** 	}
5005:src/xeq.c     **** 	if (arg > lim) {
5006:src/xeq.c     **** 		// Argument is too large
5007:src/xeq.c     **** range:		report_err(ERR_RANGE);
5008:src/xeq.c     **** 	}
5009:src/xeq.c     **** 	else if (argcmds[cmd].cmplx && arg >= TOPREALREG-1 && arg < NUMREG && (arg & 1)) {
5010:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
5011:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5012:src/xeq.c     **** 	}
5013:src/xeq.c     **** 	else {
5014:src/xeq.c     **** 		// Dispatch the command
5015:src/xeq.c     **** 		FP_RARG fp = (FP_RARG) EXPAND_ADDRESS(argcmds[cmd].f);
5016:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5017:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
5018:src/xeq.c     **** 			if (argcmds[cmd].label) {
5019:src/xeq.c     **** 				XromUserPc = find_label_from(state_pc(), arg, 0);
5020:src/xeq.c     **** 				if (XromUserPc == 0)
5021:src/xeq.c     **** 					return;
5022:src/xeq.c     **** 				if (! Running)
5023:src/xeq.c     **** 					clrretstk();
5024:src/xeq.c     **** 			}
5025:src/xeq.c     **** 			else
5026:src/xeq.c     **** 				XromArg = (unsigned char) arg;
5027:src/xeq.c     **** #else
ARM GAS  /tmp/ccjeMhND.s 			page 165


5028:src/xeq.c     **** 			XromUserPc = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
5029:src/xeq.c     **** 			if (XromUserPc == 0)
5030:src/xeq.c     **** 				return;
5031:src/xeq.c     **** 			if (! Running)
5032:src/xeq.c     **** 				clrretstk();
5033:src/xeq.c     **** #endif
5034:src/xeq.c     **** 			dispatch_xrom(fp);
5035:src/xeq.c     **** 			return;
5036:src/xeq.c     **** 		}
5037:src/xeq.c     **** 		else {
5038:src/xeq.c     **** 			fp(arg, (enum rarg)cmd);
5039:src/xeq.c     **** 		}
5040:src/xeq.c     **** 		if (cmd != RARG_XROM_OUT) {
5041:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
5042:src/xeq.c     **** 			set_lift();
5043:src/xeq.c     **** 		}
5044:src/xeq.c     **** 	}
5045:src/xeq.c     **** }
5046:src/xeq.c     **** 
5047:src/xeq.c     **** static void multi(const opcode op) {
5048:src/xeq.c     **** 	const int cmd = opDBL(op);
5049:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5050:src/xeq.c     **** 
5051:src/xeq.c     **** 	process_cmdline_set_lift();
5052:src/xeq.c     **** 
5053:src/xeq.c     **** 	if (cmd >= NUM_MULTI) {
5054:src/xeq.c     **** 		illegal(op);
5055:src/xeq.c     **** 		return;
5056:src/xeq.c     **** 	}
5057:src/xeq.c     **** 	if (isNULL(multicmds[cmd].f))	// LBL does nothing
5058:src/xeq.c     **** 		return;
5059:src/xeq.c     **** 	else {
5060:src/xeq.c     **** 		FP_MULTI fp = (FP_MULTI) EXPAND_ADDRESS(multicmds[cmd].f);
5061:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5062:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
5063:src/xeq.c     **** 			if (XromUserPc != 0) {
5064:src/xeq.c     **** 				if (! Running)
5065:src/xeq.c     **** 					clrretstk();
5066:src/xeq.c     **** 				dispatch_xrom(fp);
5067:src/xeq.c     **** 			}
5068:src/xeq.c     **** 			return;
5069:src/xeq.c     **** 		}
5070:src/xeq.c     **** 		else {
5071:src/xeq.c     **** 			fp(op, (enum multiops)cmd);
5072:src/xeq.c     **** 			set_lift();
5073:src/xeq.c     **** 		}
5074:src/xeq.c     **** 	}
5075:src/xeq.c     **** }
5076:src/xeq.c     **** 
5077:src/xeq.c     **** 
5078:src/xeq.c     **** 
5079:src/xeq.c     **** /* Main dispatch routine that decodes the top level of the opcode and
5080:src/xeq.c     ****  * goes to the appropriate lower level dispatch routine.
5081:src/xeq.c     ****  */
5082:src/xeq.c     **** void xeq(opcode op) 
5083:src/xeq.c     **** {
5084:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
ARM GAS  /tmp/ccjeMhND.s 			page 166


5085:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
5086:src/xeq.c     **** 	const struct _ustate old = UState;
5087:src/xeq.c     **** 	const unsigned char lift = get_lift();
5088:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
5089:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
5090:src/xeq.c     **** #ifdef INFRARED
5091:src/xeq.c     **** 	int tracing;
5092:src/xeq.c     **** #endif
5093:src/xeq.c     **** 
5094:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
5095:src/xeq.c     **** 	if (op == (OP_NIL | OP_rCLX) || op == (OP_NIL | OP_CLSTK)) {
5096:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
5097:src/xeq.c     **** 		// valid input so no error message will be generated.
5098:src/xeq.c     **** 		CmdLineDot = 0;
5099:src/xeq.c     **** 		Cmdline[0] = '0';
5100:src/xeq.c     **** 		Cmdline[1] = '\0';
5101:src/xeq.c     **** 	}
5102:src/xeq.c     **** #endif
5103:src/xeq.c     **** 
5104:src/xeq.c     **** 	xcopy(save, StackBase, sizeof(save));
5105:src/xeq.c     **** #if defined(CONSOLE)
5106:src/xeq.c     **** 	instruction_count++;
5107:src/xeq.c     **** #endif
5108:src/xeq.c     **** #ifndef REALBUILD
5109:src/xeq.c     **** 	if (State2.trace && ! State2.sst) {
5110:src/xeq.c     **** 		char buf[16];
5111:src/xeq.c     **** 		if (Running)
5112:src/xeq.c     **** 			print_step(op);
5113:src/xeq.c     **** 		else
5114:src/xeq.c     **** 			sprintf(TraceBuffer, "%04X:%s", op, prt(op, buf));
5115:src/xeq.c     **** 		DispMsg = TraceBuffer;
5116:src/xeq.c     **** 	}
5117:src/xeq.c     **** #endif
5118:src/xeq.c     **** #ifdef INFRARED
5119:src/xeq.c     **** #ifdef REALBUILD
5120:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && ! is_xrom() && State2.runmode;
5121:src/xeq.c     **** #else
5122:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && (! is_xrom() || State2.trace) && State2.runmode;
5123:src/xeq.c     **** #endif
5124:src/xeq.c     **** 	Tracing = tracing;
5125:src/xeq.c     **** 	print_trace( op, 0 );
5126:src/xeq.c     **** #endif
5127:src/xeq.c     **** 	Busy = 0;
5128:src/xeq.c     **** 	State2.wascomplex = 0;
5129:src/xeq.c     **** 	if (isDBL(op))
5130:src/xeq.c     **** 		multi(op);
5131:src/xeq.c     **** 	else if (isRARG(op))
5132:src/xeq.c     **** 		rargs(op);
5133:src/xeq.c     **** 	else {
5134:src/xeq.c     **** 		XeqOpCode = (s_opcode) op;
5135:src/xeq.c     **** 		switch (opKIND(op)) {
5136:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
5137:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
5138:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
5139:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
5140:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
5141:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
ARM GAS  /tmp/ccjeMhND.s 			page 167


5142:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
5143:src/xeq.c     **** 		default:	illegal(op);
5144:src/xeq.c     **** 		}
5145:src/xeq.c     **** 	}
5146:src/xeq.c     **** #if INTERRUPT_XROM_TICKS > 0
5147:src/xeq.c     **** 	if (OnKeyTicks >= INTERRUPT_XROM_TICKS) {
5148:src/xeq.c     **** 		report_err(ERR_INTERRUPTED);
5149:src/xeq.c     **** 		while (get_key() >= 0) { } // Empty keyboard buffer
5150:src/xeq.c     **** 	}
5151:src/xeq.c     **** #endif
5152:src/xeq.c     **** 
5153:src/xeq.c     **** 	if (Error != ERR_NONE) {
5154:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
5155:src/xeq.c     **** 		error_message( Error );
5156:src/xeq.c     **** 		// Repair stack and state
5157:src/xeq.c     **** 		// Clear return stack
5158:src/xeq.c     **** 		xcopy(StackBase, save, sizeof(save));
5159:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
5160:src/xeq.c     **** 		UState = old;
5161:src/xeq.c     **** 		State2.state_lift = lift;
5162:src/xeq.c     **** 		raw_set_pc(old_pc);
5163:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
5164:src/xeq.c     **** 		process_cmdline_set_lift();
5165:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
5166:src/xeq.c     **** 		// wrong with the command line, e.g. it had a partially entered fraction
5167:src/xeq.c     **** 		Error = ERR_NONE;
5168:src/xeq.c     **** 		if (Running || XromRunning) {
5169:src/xeq.c     **** #ifndef REALBUILD
5170:src/xeq.c     **** 			if (State2.trace ) {
5171:src/xeq.c     **** 				// Special handling for debug environment
5172:src/xeq.c     **** 				if (XromFlags.xIN) {
5173:src/xeq.c     **** 					// Restore the global return stack
5174:src/xeq.c     **** 					RetStk = XromUserRetStk;
5175:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5176:src/xeq.c     **** 					// Restore private stack to normal stack
5177:src/xeq.c     **** 					if (! XromFlags.mode_double && NumRegs < STACK_SIZE + EXTRA_REG) {
5178:src/xeq.c     **** 						// Need space for double precision stack
5179:src/xeq.c     **** 						cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
5180:src/xeq.c     **** 					}
5181:src/xeq.c     **** 					XromFlags.xIN = 0;		// Clear flag before get_reg_n!
5182:src/xeq.c     **** 					if (Error == ERR_NONE) {
5183:src/xeq.c     **** 						UState.mode_double = 1;
5184:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
5185:src/xeq.c     **** 					}
5186:src/xeq.c     **** 					else
5187:src/xeq.c     **** 						Error = ERR_NONE;	// Not enough RAM, can't restore
5188:src/xeq.c     **** 				}
5189:src/xeq.c     **** 			}
5190:src/xeq.c     **** 			else {
5191:src/xeq.c     **** #endif
5192:src/xeq.c     **** 				unsigned short int pc = state_pc();
5193:src/xeq.c     **** 				if (XromFlags.xIN) {
5194:src/xeq.c     **** 					// Restore state to before xIN
5195:src/xeq.c     **** 					XromFlags.xIN = 0;
5196:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
5197:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
5198:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
ARM GAS  /tmp/ccjeMhND.s 			page 168


5199:src/xeq.c     **** 					// Restore the global return stack
5200:src/xeq.c     **** 					RetStk = XromUserRetStk;
5201:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5202:src/xeq.c     **** 				}
5203:src/xeq.c     **** 				while (isXROM(pc)) {
5204:src/xeq.c     **** 					// Leave XROM
5205:src/xeq.c     **** 					if (RetStkPtr != 0) {
5206:src/xeq.c     **** 						retstk_up();
5207:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
5208:src/xeq.c     **** 					}
5209:src/xeq.c     **** 					if (RetStkPtr == 0)
5210:src/xeq.c     **** 						++pc; // compensate for decpc below
5211:src/xeq.c     **** 				}
5212:src/xeq.c     **** 				raw_set_pc(pc);
5213:src/xeq.c     **** #ifndef REALBUILD
5214:src/xeq.c     **** 			}
5215:src/xeq.c     **** #endif
5216:src/xeq.c     **** 			decpc();		// Back to error instruction
5217:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
5218:src/xeq.c     **** 
5219:src/xeq.c     **** 			set_running_off();
5220:src/xeq.c     **** 		}
5221:src/xeq.c     **** 	} 
5222:src/xeq.c     **** 	reset_volatile_state();
5223:src/xeq.c     **** #ifdef INFRARED
5224:src/xeq.c     **** 	Tracing = tracing;
5225:src/xeq.c     **** 	print_trace( op, 1 );
5226:src/xeq.c     **** #endif
5227:src/xeq.c     **** }
5228:src/xeq.c     **** 
5229:src/xeq.c     **** /* Execute a single step and return.
5230:src/xeq.c     ****  */
5231:src/xeq.c     **** static void xeq_single(void) {
5232:src/xeq.c     **** 	const opcode op = getprog(state_pc());
5233:src/xeq.c     **** 
5234:src/xeq.c     **** 	incpc();
5235:src/xeq.c     **** 	xeq(op);
5236:src/xeq.c     **** }
5237:src/xeq.c     **** 
5238:src/xeq.c     **** /* Continue execution trough xrom code
5239:src/xeq.c     ****  */
5240:src/xeq.c     **** #ifdef REALBUILD
5241:src/xeq.c     **** void xeq_xrom(void) {
5242:src/xeq.c     **** #else
5243:src/xeq.c     **** static void xeq_xrom2(void) {
5244:src/xeq.c     **** #endif
5245:src/xeq.c     **** 	int count = 0;
5246:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
5247:src/xeq.c     **** 	 * we break free.
5248:src/xeq.c     **** 	 */
5249:src/xeq.c     **** 	  while (!Pause && is_xrom() && RetStkPtr != 0) {
5250:src/xeq.c     **** 		XromRunning = 1;
5251:src/xeq.c     **** 		xeq_single();
5252:src/xeq.c     **** 		XromRunning = 0;
5253:src/xeq.c     **** 		if ((++count & 31) == 0)
5254:src/xeq.c     **** 			busy();
5255:src/xeq.c     **** 		  if (Pause)
ARM GAS  /tmp/ccjeMhND.s 			page 169


5256:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
5257:src/xeq.c     **** 			// Switch to Running mode to force continued execution.
5258:src/xeq.c     **** 			Running = 1;
5259:src/xeq.c     **** 		
5260:src/xeq.c     **** 	}
5261:src/xeq.c     **** }
5262:src/xeq.c     **** 
5263:src/xeq.c     **** #ifndef REALBUILD
5264:src/xeq.c     **** void xeq_xrom(void) {
5265:src/xeq.c     **** 	// We split the routine in two parts for debugging only
5266:src/xeq.c     **** 	if (! State2.trace)
5267:src/xeq.c     **** 		xeq_xrom2();
5268:src/xeq.c     **** }
5269:src/xeq.c     **** #endif
5270:src/xeq.c     **** 
5271:src/xeq.c     **** /* Check to see if we're running a program and if so execute it
5272:src/xeq.c     ****  * for a while.
5273:src/xeq.c     ****  *
5274:src/xeq.c     ****  */
5275:src/xeq.c     **** 
5276:src/xeq.c     **** /*
5277:src/xeq.c     **** 'Pause' is true if Pause is non-zero, i.e., if the pause is still running.
5278:src/xeq.c     **** */
5279:src/xeq.c     ****  void xeqprog(void) 
5280:src/xeq.c     ****  {
5281:src/xeq.c     ****    int state = 0;
5282:src/xeq.c     ****    if (Running || Pause) {
5283:src/xeq.c     **** 
5284:src/xeq.c     **** #if !(defined(CONSOLE)) && !(defined(DM42))
5285:src/xeq.c     ****      long long last_ticker = Ticker;
5286:src/xeq.c     ****      state = ((int) last_ticker % (2*TICKS_PER_FLASH) < TICKS_PER_FLASH);
5287:src/xeq.c     **** #else
5288:src/xeq.c     ****      state = 1;
5289:src/xeq.c     **** #endif
5290:src/xeq.c     ****      
5291:src/xeq.c     ****      //     print_debug(100,state);
5292:src/xeq.c     ****      dot(RCL_annun, state);
5293:src/xeq.c     ****      finish_RPN(); // RPN
5294:src/xeq.c     **** 
5295:src/xeq.c     ****      while (! Pause && Running) {
5296:src/xeq.c     ****        xeq_single();
5297:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
5298:src/xeq.c     ****        if (is_key_pressed())
5299:src/xeq.c     **** 	 {
5300:src/xeq.c     **** 	 // Key press or heart beat
5301:src/xeq.c     **** 	 // Note: DM42 doesn't have real heart beat so no flash
5302:src/xeq.c     **** 	 // xeq_xrom(); // Already done by dispatch_xrom()
5303:src/xeq.c     **** 	 break;
5304:src/xeq.c     ****        }
5305:src/xeq.c     ****      }
5306:src/xeq.c     ****    }
5307:src/xeq.c     ****    if (! Running && ! Pause) {	  
5308:src/xeq.c     ****      // Program has terminated
5309:src/xeq.c     ****      clr_dot(RCL_annun);
5310:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
5311:src/xeq.c     ****      display();
5312:src/xeq.c     ****      if (ShowRPN) {
ARM GAS  /tmp/ccjeMhND.s 			page 170


5313:src/xeq.c     ****        set_dot(RPN);
5314:src/xeq.c     ****        finish_RPN(); // RPN
5315:src/xeq.c     ****      }
5316:src/xeq.c     **** #ifndef CONSOLE
5317:src/xeq.c     ****      // Avoid accidental restart with R/S or APD after program ends
5318:src/xeq.c     ****      JustStopped = 1;
5319:src/xeq.c     **** #endif
5320:src/xeq.c     ****    }
5321:src/xeq.c     ****  }
5322:src/xeq.c     **** 
5323:src/xeq.c     **** /* Single step and back step routine
5324:src/xeq.c     ****  */
5325:src/xeq.c     **** void xeq_sst_bst(int kind) 
5326:src/xeq.c     **** {
5327:src/xeq.c     **** 	opcode op;
5328:src/xeq.c     **** 
5329:src/xeq.c     **** 	reset_volatile_state();
5330:src/xeq.c     **** 	if (kind == -1)
5331:src/xeq.c     **** 		decpc();
5332:src/xeq.c     **** 
5333:src/xeq.c     **** 	if (State2.runmode) {
5334:src/xeq.c     **** 		// Display the step
5335:src/xeq.c     **** 		op = getprog(state_pc());
5336:src/xeq.c     **** 		print_step(op);
5337:src/xeq.c     **** 		if (kind == 1) {
5338:src/xeq.c     **** 			// Execute the step on key up
5339:src/xeq.c     **** #ifndef REALBUILD
5340:src/xeq.c     **** 			State2.sst = 1;
5341:src/xeq.c     **** #endif
5342:src/xeq.c     **** 			set_running_on_sst();
5343:src/xeq.c     **** 			incpc();
5344:src/xeq.c     **** 			xeq(op);
5345:src/xeq.c     **** #ifndef REALBUILD
5346:src/xeq.c     **** 			State2.sst = 0;
5347:src/xeq.c     **** #endif
5348:src/xeq.c     **** 			xeq_xrom();  // necessary for code called from XROM
5349:src/xeq.c     **** 			set_running_off_sst();
5350:src/xeq.c     **** 		}
5351:src/xeq.c     **** 	}
5352:src/xeq.c     **** 	else if (kind == 0) {
5353:src/xeq.c     **** 		// Key down in program mode
5354:src/xeq.c     **** 		incpc();
5355:src/xeq.c     **** 		OpCode = 0;
5356:src/xeq.c     **** 	}
5357:src/xeq.c     **** }
5358:src/xeq.c     **** 
5359:src/xeq.c     **** 
5360:src/xeq.c     **** /*
5361:src/xeq.c     ****  *  User command to start or stop execution
5362:src/xeq.c     ****  */
5363:src/xeq.c     **** void op_rs(enum nilop op) {
5364:src/xeq.c     **** #ifndef REALBUILD
5365:src/xeq.c     **** 	// This is for debugging purposes only
5366:src/xeq.c     **** 	// STOP does not appear in XROM normally
5367:src/xeq.c     **** 	if (is_xrom()) {
5368:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
5369:src/xeq.c     **** 			Running = XromRunning = 0;
ARM GAS  /tmp/ccjeMhND.s 			page 171


5370:src/xeq.c     **** 		}
5371:src/xeq.c     **** 		else {
5372:src/xeq.c     **** 			xeq_xrom2();
5373:src/xeq.c     **** 		}
5374:src/xeq.c     **** 		return;
5375:src/xeq.c     **** 	}
5376:src/xeq.c     **** #endif
5377:src/xeq.c     **** 	if (Running)
5378:src/xeq.c     **** 		set_running_off();
5379:src/xeq.c     **** 	else {
5380:src/xeq.c     **** 		set_running_on();
5381:src/xeq.c     **** 		if (RetStkPtr == 0)
5382:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
5383:src/xeq.c     **** 	}
5384:src/xeq.c     **** }
5385:src/xeq.c     **** 
5386:src/xeq.c     **** 
5387:src/xeq.c     **** /* 
5388:src/xeq.c     ****  *  The following needs to be done each time before any user input is processed.
5389:src/xeq.c     ****  *  On the hardware, RAM is volatile and these pointers and structures need valid values!
5390:src/xeq.c     ****  */
5391:src/xeq.c     **** void xeq_init_contexts(void) {
5392:src/xeq.c     **** 	/*
5393:src/xeq.c     **** 	 *  Compute the sizes of the various memory portions
5394:src/xeq.c     **** 	 */
5395:src/xeq.c     **** 	short int s;
5396:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
5397:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
5398:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
5399:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
5400:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
5401:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
5402:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
5403:src/xeq.c     **** 
5404:src/xeq.c     **** 	/*
5405:src/xeq.c     **** 	 *  Initialise our standard contexts.
5406:src/xeq.c     **** 	 *  We bump the digits for internal calculations.
5407:src/xeq.c     **** 	 */
5408:src/xeq.c     **** 	decContextDefault(&Ctx, DEC_INIT_BASE);
5409:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
5410:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
5411:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
5412:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
5413:src/xeq.c     **** }
5414:src/xeq.c     **** 
5415:src/xeq.c     **** 
5416:src/xeq.c     **** 
5417:src/xeq.c     **** #ifdef INCLUDE_PLOTTING
5418:src/xeq.c     **** /*
5419:src/xeq.c     ****  *  Plotting commands
5420:src/xeq.c     ****  *
5421:src/xeq.c     ****  *  The plot buffer is a range of registers that is treated as pixel data
5422:src/xeq.c     ****  *  The first byte contains the length of the buffer in columns (bytes)
5423:src/xeq.c     ****  */
5424:src/xeq.c     **** 
5425:src/xeq.c     **** /*
5426:src/xeq.c     ****  *  Check register range and return a pointer to the plot data.
ARM GAS  /tmp/ccjeMhND.s 			page 172


5427:src/xeq.c     ****  */
5428:src/xeq.c     **** unsigned char *plot_check_range( int arg, int width, int height )
5429:src/xeq.c     **** {
5430:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
5431:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
5432:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
5433:src/xeq.c     **** 	int bytes;
5434:src/xeq.c     **** 
5435:src/xeq.c     **** 	if ( width == 0 ) {
5436:src/xeq.c     **** 		width = (int) *p;
5437:src/xeq.c     **** 		height = (int) p[ 1 ];
5438:src/xeq.c     **** 	}
5439:src/xeq.c     **** 
5440:src/xeq.c     **** 	/*
5441:src/xeq.c     **** 	 *  Compute total number of bytes
5442:src/xeq.c     **** 	 */
5443:src/xeq.c     **** 	bytes = 2 + width * height;
5444:src/xeq.c     **** 
5445:src/xeq.c     **** 	/*
5446:src/xeq.c     **** 	 *  Check if we have enough room
5447:src/xeq.c     **** 	 */
5448:src/xeq.c     **** 	if ( width > PAPER_WIDTH || arg + ( bytes + n - 1 ) / n > lim ) {
5449:src/xeq.c     **** 		report_err( ERR_RANGE );
5450:src/xeq.c     **** 		return (unsigned char *) NULL;
5451:src/xeq.c     **** 	}
5452:src/xeq.c     **** 	return p;
5453:src/xeq.c     **** }
5454:src/xeq.c     **** 
5455:src/xeq.c     **** /*
5456:src/xeq.c     ****  * Set up for graphical object display.
5457:src/xeq.c     ****  */
5458:src/xeq.c     **** void cmdplotdisplay( unsigned int arg, enum rarg op )
5459:src/xeq.c     **** {
5460:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
5461:src/xeq.c     **** 		DispPlot = arg + 1;
5462:src/xeq.c     **** 		frozen_display();
5463:src/xeq.c     **** 	}
5464:src/xeq.c     **** }
5465:src/xeq.c     **** 
5466:src/xeq.c     **** /*
5467:src/xeq.c     ****  *  Initialize a block of registers to act as a buffer for plotting
5468:src/xeq.c     ****  *  X contains the maximum width (<= 0 is default: 166)
5469:src/xeq.c     ****  */
5470:src/xeq.c     **** void cmdplotinit( unsigned int arg, enum rarg op )
5471:src/xeq.c     **** {
5472:src/xeq.c     **** 	int sgnx, sgny;
5473:src/xeq.c     **** 	int width = (int) getX_int_sgn( &sgnx );
5474:src/xeq.c     **** 	int height = (int) get_reg_n_int_sgn( regY_idx, &sgny ); 
5475:src/xeq.c     **** 	unsigned char *p;
5476:src/xeq.c     **** 	
5477:src/xeq.c     **** 	if ( sgnx || width == 0 ) {
5478:src/xeq.c     **** 		width = PAPER_WIDTH;
5479:src/xeq.c     **** 	}
5480:src/xeq.c     **** 	if ( sgny || height == 0 ) {
5481:src/xeq.c     **** 		height = 1;
5482:src/xeq.c     **** 	}
5483:src/xeq.c     **** 	else {
ARM GAS  /tmp/ccjeMhND.s 			page 173


5484:src/xeq.c     **** 		/*
5485:src/xeq.c     **** 		 *  Make height count the byte rows
5486:src/xeq.c     **** 		 */
5487:src/xeq.c     **** 		height = ( height + 7 ) >> 3;
5488:src/xeq.c     **** 	}
5489:src/xeq.c     **** 
5490:src/xeq.c     **** 	p = plot_check_range( arg, width, height );
5491:src/xeq.c     **** 	if ( p != NULL ) {
5492:src/xeq.c     **** 		*p++ = (unsigned char) width;
5493:src/xeq.c     **** 		*p++ = (unsigned char) height;
5494:src/xeq.c     **** 		xset( p, 0, width * height );
5495:src/xeq.c     **** 	}
5496:src/xeq.c     **** }
5497:src/xeq.c     **** 
5498:src/xeq.c     **** /*
5499:src/xeq.c     ****  *  Return the width and height of the plotting block
5500:src/xeq.c     ****  */
5501:src/xeq.c     **** void cmdplotdim( unsigned int arg, enum rarg op )
5502:src/xeq.c     **** {
5503:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5504:src/xeq.c     **** 	if ( p != NULL ) {
5505:src/xeq.c     **** 		lift2_if_enabled();
5506:src/xeq.c     **** 		setX_int_sgn( p[ 0 ], 0 ); // width
5507:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
5508:src/xeq.c     **** 	}
5509:src/xeq.c     **** }
5510:src/xeq.c     **** 
5511:src/xeq.c     **** /*
5512:src/xeq.c     ****  *  All pixel related commands
5513:src/xeq.c     ****  *  X is the horizontal position 0..width
5514:src/xeq.c     ****  *  Y is the vertical position 0..7
5515:src/xeq.c     ****  */
5516:src/xeq.c     **** void cmdplotpixel( unsigned int arg, enum rarg op )
5517:src/xeq.c     **** {
5518:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5519:src/xeq.c     **** 	if ( p != NULL ) {
5520:src/xeq.c     **** 		/*
5521:src/xeq.c     **** 		 *  Get row from Y
5522:src/xeq.c     **** 		 */
5523:src/xeq.c     **** 		int sgn;
5524:src/xeq.c     **** 		unsigned int row = (unsigned int) get_reg_n_int_sgn( regY_idx, &sgn );
5525:src/xeq.c     **** 		int pix = 0;
5526:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
5527:src/xeq.c     **** 			/*
5528:src/xeq.c     **** 			 *  Row is OK, get column from X
5529:src/xeq.c     **** 			 */
5530:src/xeq.c     **** 			unsigned int width = (unsigned int) *p;
5531:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
5532:src/xeq.c     **** 			if ( sgn == 0 && column < width ) {
5533:src/xeq.c     **** 				/*
5534:src/xeq.c     **** 				 *  Modify the bit in the correct byte
5535:src/xeq.c     **** 				 */
5536:src/xeq.c     **** 				pix = 1 << ( row & 7 );
5537:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
5538:src/xeq.c     **** 
5539:src/xeq.c     **** 				if ( op == RARG_PLOT_SETPIX ) {
5540:src/xeq.c     **** 					*p |= pix;
ARM GAS  /tmp/ccjeMhND.s 			page 174


5541:src/xeq.c     **** 				}
5542:src/xeq.c     **** 				else if ( op == RARG_PLOT_CLRPIX ) {
5543:src/xeq.c     **** 					*p &= ~pix;
5544:src/xeq.c     **** 				}
5545:src/xeq.c     **** 				else if ( op == RARG_PLOT_FLIPPIX ) {
5546:src/xeq.c     **** 					*p ^= pix;
5547:src/xeq.c     **** 				}
5548:src/xeq.c     **** 			}
5549:src/xeq.c     **** 		}
5550:src/xeq.c     **** 		if ( op == RARG_PLOT_ISSET ) {
5551:src/xeq.c     **** 			fin_tst( *p & pix );
5552:src/xeq.c     **** 		}
5553:src/xeq.c     **** 	}
5554:src/xeq.c     **** }
5555:src/xeq.c     **** #endif
5556:src/xeq.c     **** 
5557:src/xeq.c     **** 
5558:src/xeq.c     **** /*
5559:src/xeq.c     ****  *  We don't allow some commands from a running program
5560:src/xeq.c     ****  */
5561:src/xeq.c     **** int not_running(void) {
5562:src/xeq.c     **** 	if ( Running ) {
5563:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5564:src/xeq.c     **** 		return 0;
5565:src/xeq.c     **** 	}
5566:src/xeq.c     **** 	return 1;
5567:src/xeq.c     **** }
5568:src/xeq.c     **** 
5569:src/xeq.c     **** /*
5570:src/xeq.c     ****  *  Handle the Running Flag
5571:src/xeq.c     ****  */
5572:src/xeq.c     **** void set_running_off_sst() {
5573:src/xeq.c     **** 	Running = 0;
5574:src/xeq.c     **** }
5575:src/xeq.c     **** 
5576:src/xeq.c     **** void set_running_on_sst() {
5577:src/xeq.c     **** 	Running = 1;
5578:src/xeq.c     **** }
5579:src/xeq.c     **** 
5580:src/xeq.c     **** void set_running_off() {
 3535              		.loc 1 5580 6 view .LVU964
 3536              	.LBB1491:
5581:src/xeq.c     **** 	set_running_off_sst();
 3537              		.loc 1 5581 2 view .LVU965
 3538              	.LBB1492:
 3539              	.LBI1492:
5572:src/xeq.c     **** 	Running = 0;
 3540              		.loc 1 5572 6 view .LVU966
 3541              	.LBB1493:
5573:src/xeq.c     **** }
 3542              		.loc 1 5573 2 view .LVU967
5573:src/xeq.c     **** }
 3543              		.loc 1 5573 10 is_stmt 0 view .LVU968
 3544 0070 084A     		ldr	r2, .L290+8
 3545 0072 1160     		str	r1, [r2]
 3546              	.LBE1493:
 3547              	.LBE1492:
ARM GAS  /tmp/ccjeMhND.s 			page 175


5582:src/xeq.c     **** 	State.entryp = 0;
 3548              		.loc 1 5582 2 is_stmt 1 view .LVU969
 3549              		.loc 1 5582 15 is_stmt 0 view .LVU970
 3550 0074 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 3551 0078 61F30412 		bfi	r2, r1, #4, #1
 3552 007c 83F8DD27 		strb	r2, [r3, #2013]
5583:src/xeq.c     **** 	dot( RCL_annun, 0);
 3553              		.loc 1 5583 2 is_stmt 1 view .LVU971
 3554              	.LBE1491:
 3555              	.LBE1490:
2064:src/xeq.c     **** 
 3556              		.loc 1 2064 1 is_stmt 0 view .LVU972
 3557 0080 BDE87040 		pop	{r4, r5, r6, lr}
 3558              		.cfi_restore 14
 3559              		.cfi_restore 6
 3560              		.cfi_restore 5
 3561              		.cfi_restore 4
 3562              		.cfi_def_cfa_offset 0
 3563              	.LBB1495:
 3564              	.LBB1494:
 3565              		.loc 1 5583 2 view .LVU973
 3566 0084 8A20     		movs	r0, #138
 3567 0086 FFF7FEBF 		b	dot
 3568              	.LVL265:
 3569              	.L291:
 3570 008a 00BF     		.align	2
 3571              	.L290:
 3572 008c 00000000 		.word	main_ram
 3573 0090 00000000 		.word	RetStk
 3574 0094 00000000 		.word	Running
 3575              	.LBE1494:
 3576              	.LBE1495:
 3577              		.cfi_endproc
 3578              	.LFE150:
 3580              		.section	.text.user_pc,"ax",%progbits
 3581              		.align	1
 3582              		.p2align 2,,3
 3583              		.global	user_pc
 3584              		.syntax unified
 3585              		.thumb
 3586              		.thumb_func
 3587              		.fpu fpv4-sp-d16
 3589              	user_pc:
 3590              	.LVL266:
 3591              	.LFB25:
 485:src/xeq.c     **** 	unsigned int n = 1;
 3592              		.loc 1 485 39 is_stmt 1 view -0
 3593              		.cfi_startproc
 3594              		@ args = 0, pretend = 0, frame = 0
 3595              		@ frame_needed = 0, uses_anonymous_args = 0
 3596              		@ link register save eliminated.
 486:src/xeq.c     **** 	unsigned int base;
 3597              		.loc 1 486 2 view .LVU975
 487:src/xeq.c     **** 
 3598              		.loc 1 487 2 view .LVU976
 490:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3599              		.loc 1 490 2 view .LVU977
ARM GAS  /tmp/ccjeMhND.s 			page 176


 490:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3600              		.loc 1 490 5 is_stmt 0 view .LVU978
 3601 0000 0346     		mov	r3, r0
 3602 0002 20B1     		cbz	r0, .L293
 490:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3603              		.loc 1 490 17 discriminator 1 view .LVU979
 3604 0004 820B     		lsrs	r2, r0, #14
 490:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3605              		.loc 1 490 14 discriminator 1 view .LVU980
 3606 0006 032A     		cmp	r2, #3
 3607 0008 01D0     		beq	.L293
 3608 000a FFF7FEBF 		b	user_pc.part.0
 3609              	.LVL267:
 3610              	.L293:
 491:src/xeq.c     **** #else
 3611              		.loc 1 491 3 is_stmt 1 view .LVU981
 491:src/xeq.c     **** #else
 3612              		.loc 1 491 24 is_stmt 0 view .LVU982
 3613 000e C3F30D00 		ubfx	r0, r3, #0, #14
 3614              	.LVL268:
 504:src/xeq.c     **** 
 3615              		.loc 1 504 1 view .LVU983
 3616 0012 7047     		bx	lr
 3617              		.cfi_endproc
 3618              	.LFE25:
 3620              		.section	.text.find_user_pc,"ax",%progbits
 3621              		.align	1
 3622              		.p2align 2,,3
 3623              		.global	find_user_pc
 3624              		.syntax unified
 3625              		.thumb
 3626              		.thumb_func
 3627              		.fpu fpv4-sp-d16
 3629              	find_user_pc:
 3630              	.LVL269:
 3631              	.LFB26:
 508:src/xeq.c     **** 	unsigned int upc = state_pc();
 3632              		.loc 1 508 48 is_stmt 1 view -0
 3633              		.cfi_startproc
 3634              		@ args = 0, pretend = 0, frame = 0
 3635              		@ frame_needed = 0, uses_anonymous_args = 0
 509:src/xeq.c     **** 	const int libp = isLIB(upc);
 3636              		.loc 1 509 2 view .LVU985
 508:src/xeq.c     **** 	unsigned int upc = state_pc();
 3637              		.loc 1 508 48 is_stmt 0 view .LVU986
 3638 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3639              		.cfi_def_cfa_offset 24
 3640              		.cfi_offset 3, -24
 3641              		.cfi_offset 4, -20
 3642              		.cfi_offset 5, -16
 3643              		.cfi_offset 6, -12
 3644              		.cfi_offset 7, -8
 3645              		.cfi_offset 14, -4
 509:src/xeq.c     **** 	const int libp = isLIB(upc);
 3646              		.loc 1 509 21 view .LVU987
 3647 0002 124B     		ldr	r3, .L309
 3648 0004 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccjeMhND.s 			page 177


 3649 0006 B3F8E037 		ldrh	r3, [r3, #2016]
 3650              	.LVL270:
 510:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 3651              		.loc 1 510 2 is_stmt 1 view .LVU988
 511:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3652              		.loc 1 511 2 view .LVU989
 511:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3653              		.loc 1 511 43 is_stmt 0 view .LVU990
 3654 000a 13F44044 		ands	r4, r3, #49152
 3655              	.LVL271:
 511:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3656              		.loc 1 511 43 view .LVU991
 3657 000e 1ABF     		itte	ne
 3658 0010 03F44045 		andne	r5, r3, #49152
 3659 0014 0135     		addne	r5, r5, #1
 3660 0016 2546     		moveq	r5, r4
 3661              	.LVL272:
 512:src/xeq.c     **** #ifndef REALBUILD
 3662              		.loc 1 512 2 is_stmt 1 view .LVU992
 514:src/xeq.c     **** 		return addrXROM(target);
 3663              		.loc 1 514 6 is_stmt 0 view .LVU993
 3664 0018 9B0B     		lsrs	r3, r3, #14
 3665              	.LVL273:
 512:src/xeq.c     **** #ifndef REALBUILD
 3666              		.loc 1 512 28 view .LVU994
 3667 001a 003C     		subs	r4, r4, #0
 512:src/xeq.c     **** #ifndef REALBUILD
 3668              		.loc 1 512 28 view .LVU995
 3669 001c 18BF     		it	ne
 3670 001e 0124     		movne	r4, #1
 3671              	.LVL274:
 514:src/xeq.c     **** 		return addrXROM(target);
 3672              		.loc 1 514 2 is_stmt 1 view .LVU996
 514:src/xeq.c     **** 		return addrXROM(target);
 3673              		.loc 1 514 5 is_stmt 0 view .LVU997
 3674 0020 032B     		cmp	r3, #3
 508:src/xeq.c     **** 	unsigned int upc = state_pc();
 3675              		.loc 1 508 48 view .LVU998
 3676 0022 0646     		mov	r6, r0
 514:src/xeq.c     **** 		return addrXROM(target);
 3677              		.loc 1 514 5 view .LVU999
 3678 0024 0ED0     		beq	.L307
 3679              	.LBB1496:
 520:src/xeq.c     **** 			return oldbase;
 3680              		.loc 1 520 7 view .LVU1000
 3681 0026 0A4F     		ldr	r7, .L309+4
 3682 0028 05E0     		b	.L302
 3683              	.LVL275:
 3684              	.L304:
 519:src/xeq.c     **** 		if (PcWrapped)
 3685              		.loc 1 519 10 view .LVU1001
 3686 002a FFF7FEFF 		bl	do_inc
 3687              	.LVL276:
 520:src/xeq.c     **** 			return oldbase;
 3688              		.loc 1 520 6 view .LVU1002
 3689 002e 3B68     		ldr	r3, [r7]
 3690              	.LVL277:
ARM GAS  /tmp/ccjeMhND.s 			page 178


 520:src/xeq.c     **** 			return oldbase;
 3691              		.loc 1 520 3 is_stmt 1 view .LVU1003
 3692 0030 0134     		adds	r4, r4, #1
 3693              	.LVL278:
 520:src/xeq.c     **** 			return oldbase;
 3694              		.loc 1 520 6 is_stmt 0 view .LVU1004
 3695 0032 2BB9     		cbnz	r3, .L300
 519:src/xeq.c     **** 		if (PcWrapped)
 3696              		.loc 1 519 10 view .LVU1005
 3697 0034 0546     		mov	r5, r0
 3698              	.LVL279:
 3699              	.L302:
 518:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 3700              		.loc 1 518 3 is_stmt 1 view .LVU1006
 519:src/xeq.c     **** 		if (PcWrapped)
 3701              		.loc 1 519 3 view .LVU1007
 519:src/xeq.c     **** 		if (PcWrapped)
 3702              		.loc 1 519 3 is_stmt 0 view .LVU1008
 3703              	.LBE1496:
 517:src/xeq.c     **** 		const unsigned int oldbase = base;
 3704              		.loc 1 517 8 is_stmt 1 view .LVU1009
 517:src/xeq.c     **** 		const unsigned int oldbase = base;
 3705              		.loc 1 517 8 is_stmt 0 view .LVU1010
 3706 0036 A642     		cmp	r6, r4
 3707              	.LBB1497:
 519:src/xeq.c     **** 		if (PcWrapped)
 3708              		.loc 1 519 10 view .LVU1011
 3709 0038 2846     		mov	r0, r5
 3710 003a 4FF00001 		mov	r1, #0
 3711              	.LBE1497:
 517:src/xeq.c     **** 		const unsigned int oldbase = base;
 3712              		.loc 1 517 8 view .LVU1012
 3713 003e F4D8     		bhi	.L304
 3714              	.LVL280:
 3715              	.L300:
 524:src/xeq.c     **** 
 3716              		.loc 1 524 1 view .LVU1013
 3717 0040 2846     		mov	r0, r5
 3718              	.LVL281:
 524:src/xeq.c     **** 
 3719              		.loc 1 524 1 view .LVU1014
 3720 0042 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3721              	.LVL282:
 3722              	.L307:
 515:src/xeq.c     **** #endif
 3723              		.loc 1 515 3 is_stmt 1 view .LVU1015
 515:src/xeq.c     **** #endif
 3724              		.loc 1 515 10 is_stmt 0 view .LVU1016
 3725 0044 40F44045 		orr	r5, r0, #49152
 3726              	.LVL283:
 524:src/xeq.c     **** 
 3727              		.loc 1 524 1 view .LVU1017
 3728 0048 2846     		mov	r0, r5
 3729              	.LVL284:
 524:src/xeq.c     **** 
 3730              		.loc 1 524 1 view .LVU1018
 3731 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccjeMhND.s 			page 179


 3732              	.LVL285:
 3733              	.L310:
 524:src/xeq.c     **** 
 3734              		.loc 1 524 1 view .LVU1019
 3735              		.align	2
 3736              	.L309:
 3737 004c 00000000 		.word	main_ram
 3738 0050 00000000 		.word	PcWrapped
 3739              		.cfi_endproc
 3740              	.LFE26:
 3742              		.section	.text.report_err,"ax",%progbits
 3743              		.align	1
 3744              		.p2align 2,,3
 3745              		.global	report_err
 3746              		.syntax unified
 3747              		.thumb
 3748              		.thumb_func
 3749              		.fpu fpv4-sp-d16
 3751              	report_err:
 3752              	.LVL286:
 3753              	.LFB28:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3754              		.loc 1 537 38 is_stmt 1 view -0
 3755              		.cfi_startproc
 3756              		@ args = 0, pretend = 0, frame = 0
 3757              		@ frame_needed = 0, uses_anonymous_args = 0
 538:src/xeq.c     **** 		Error = e;
 3758              		.loc 1 538 2 view .LVU1021
 538:src/xeq.c     **** 		Error = e;
 3759              		.loc 1 538 12 is_stmt 0 view .LVU1022
 3760 0000 064A     		ldr	r2, .L317
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3761              		.loc 1 537 38 view .LVU1023
 3762 0002 10B5     		push	{r4, lr}
 3763              		.cfi_def_cfa_offset 8
 3764              		.cfi_offset 4, -8
 3765              		.cfi_offset 14, -4
 538:src/xeq.c     **** 		Error = e;
 3766              		.loc 1 538 12 view .LVU1024
 3767 0004 1468     		ldr	r4, [r2]
 538:src/xeq.c     **** 		Error = e;
 3768              		.loc 1 538 5 view .LVU1025
 3769 0006 0CB9     		cbnz	r4, .L314
 3770              	.LVL287:
 3771              	.LBB1500:
 3772              	.LBI1500:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3773              		.loc 1 537 5 is_stmt 1 view .LVU1026
 3774              	.LBB1501:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3775              		.loc 1 539 3 view .LVU1027
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3776              		.loc 1 539 9 is_stmt 0 view .LVU1028
 3777 0008 1060     		str	r0, [r2]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3778              		.loc 1 540 3 is_stmt 1 view .LVU1029
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/ccjeMhND.s 			page 180


 3779              		.loc 1 540 6 is_stmt 0 view .LVU1030
 3780 000a 10B1     		cbz	r0, .L316
 3781              	.LVL288:
 3782              	.L314:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3783              		.loc 1 540 6 view .LVU1031
 3784              	.LBE1501:
 3785              	.LBE1500:
 545:src/xeq.c     **** }
 3786              		.loc 1 545 9 view .LVU1032
 3787 000c 0124     		movs	r4, #1
 546:src/xeq.c     **** 
 3788              		.loc 1 546 1 view .LVU1033
 3789 000e 2046     		mov	r0, r4
 3790              	.LVL289:
 546:src/xeq.c     **** 
 3791              		.loc 1 546 1 view .LVU1034
 3792 0010 10BD     		pop	{r4, pc}
 3793              	.LVL290:
 3794              	.L316:
 3795              	.LBB1503:
 3796              	.LBB1502:
 541:src/xeq.c     **** 			return 0;
 3797              		.loc 1 541 4 is_stmt 1 view .LVU1035
 3798 0012 FFF7FEFF 		bl	error_message
 3799              	.LVL291:
 542:src/xeq.c     **** 		}
 3800              		.loc 1 542 4 view .LVU1036
 542:src/xeq.c     **** 		}
 3801              		.loc 1 542 4 is_stmt 0 view .LVU1037
 3802              	.LBE1502:
 3803              	.LBE1503:
 546:src/xeq.c     **** 
 3804              		.loc 1 546 1 view .LVU1038
 3805 0016 2046     		mov	r0, r4
 3806 0018 10BD     		pop	{r4, pc}
 3807              	.L318:
 3808 001a 00BF     		.align	2
 3809              	.L317:
 3810 001c 00000000 		.word	Error
 3811              		.cfi_endproc
 3812              	.LFE28:
 3814              		.section	.text.report_warn,"ax",%progbits
 3815              		.align	1
 3816              		.p2align 2,,3
 3817              		.global	report_warn
 3818              		.syntax unified
 3819              		.thumb
 3820              		.thumb_func
 3821              		.fpu fpv4-sp-d16
 3823              	report_warn:
 3824              	.LVL292:
 3825              	.LFB29:
 551:src/xeq.c     **** 	if (Running) {
 3826              		.loc 1 551 39 is_stmt 1 view -0
 3827              		.cfi_startproc
 3828              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccjeMhND.s 			page 181


 3829              		@ frame_needed = 0, uses_anonymous_args = 0
 552:src/xeq.c     **** 		return report_err(e);
 3830              		.loc 1 552 2 view .LVU1040
 552:src/xeq.c     **** 		return report_err(e);
 3831              		.loc 1 552 6 is_stmt 0 view .LVU1041
 3832 0000 114B     		ldr	r3, .L325
 551:src/xeq.c     **** 	if (Running) {
 3833              		.loc 1 551 39 view .LVU1042
 3834 0002 70B5     		push	{r4, r5, r6, lr}
 3835              		.cfi_def_cfa_offset 16
 3836              		.cfi_offset 4, -16
 3837              		.cfi_offset 5, -12
 3838              		.cfi_offset 6, -8
 3839              		.cfi_offset 14, -4
 552:src/xeq.c     **** 		return report_err(e);
 3840              		.loc 1 552 5 view .LVU1043
 3841 0004 1D68     		ldr	r5, [r3]
 551:src/xeq.c     **** 	if (Running) {
 3842              		.loc 1 551 39 view .LVU1044
 3843 0006 0446     		mov	r4, r0
 552:src/xeq.c     **** 		return report_err(e);
 3844              		.loc 1 552 5 view .LVU1045
 3845 0008 5DB1     		cbz	r5, .L320
 553:src/xeq.c     **** 	}
 3846              		.loc 1 553 3 is_stmt 1 view .LVU1046
 3847              	.LVL293:
 3848              	.LBB1512:
 3849              	.LBI1512:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3850              		.loc 1 537 5 view .LVU1047
 3851              	.LBB1513:
 538:src/xeq.c     **** 		Error = e;
 3852              		.loc 1 538 2 view .LVU1048
 538:src/xeq.c     **** 		Error = e;
 3853              		.loc 1 538 12 is_stmt 0 view .LVU1049
 3854 000a 104B     		ldr	r3, .L325+4
 3855 000c 1D68     		ldr	r5, [r3]
 538:src/xeq.c     **** 		Error = e;
 3856              		.loc 1 538 5 view .LVU1050
 3857 000e 15B1     		cbz	r5, .L321
 3858              	.L323:
 545:src/xeq.c     **** }
 3859              		.loc 1 545 9 view .LVU1051
 3860 0010 0125     		movs	r5, #1
 3861              	.LVL294:
 3862              	.L319:
 545:src/xeq.c     **** }
 3863              		.loc 1 545 9 view .LVU1052
 3864              	.LBE1513:
 3865              	.LBE1512:
 562:src/xeq.c     **** 
 3866              		.loc 1 562 1 view .LVU1053
 3867 0012 2846     		mov	r0, r5
 3868 0014 70BD     		pop	{r4, r5, r6, pc}
 3869              	.LVL295:
 3870              	.L321:
 3871              	.LBB1517:
ARM GAS  /tmp/ccjeMhND.s 			page 182


 3872              	.LBB1516:
 3873              	.LBB1514:
 3874              	.LBI1514:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3875              		.loc 1 537 5 is_stmt 1 view .LVU1054
 3876              	.LBB1515:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3877              		.loc 1 539 3 view .LVU1055
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3878              		.loc 1 539 9 is_stmt 0 view .LVU1056
 3879 0016 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3880              		.loc 1 540 3 is_stmt 1 view .LVU1057
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3881              		.loc 1 540 6 is_stmt 0 view .LVU1058
 3882 0018 0028     		cmp	r0, #0
 3883 001a F9D1     		bne	.L323
 541:src/xeq.c     **** 			return 0;
 3884              		.loc 1 541 4 is_stmt 1 view .LVU1059
 3885 001c FFF7FEFF 		bl	error_message
 3886              	.LVL296:
 542:src/xeq.c     **** 		}
 3887              		.loc 1 542 4 view .LVU1060
 542:src/xeq.c     **** 		}
 3888              		.loc 1 542 11 is_stmt 0 view .LVU1061
 3889 0020 F7E7     		b	.L319
 3890              	.LVL297:
 3891              	.L320:
 542:src/xeq.c     **** 		}
 3892              		.loc 1 542 11 view .LVU1062
 3893              	.LBE1515:
 3894              	.LBE1514:
 3895              	.LBE1516:
 3896              	.LBE1517:
 3897              	.LBB1518:
 3898              	.LBI1518:
 551:src/xeq.c     **** 	if (Running) {
 3899              		.loc 1 551 5 is_stmt 1 view .LVU1063
 3900              	.LBB1519:
 555:src/xeq.c     **** #ifndef CONSOLE
 3901              		.loc 1 555 2 view .LVU1064
 3902 0022 FFF7FEFF 		bl	error_message
 3903              	.LVL298:
 557:src/xeq.c     **** 	JustDisplayed = 1;
 3904              		.loc 1 557 2 view .LVU1065
 557:src/xeq.c     **** 	JustDisplayed = 1;
 3905              		.loc 1 557 21 is_stmt 0 view .LVU1066
 3906 0026 0A4A     		ldr	r2, .L325+8
 558:src/xeq.c     **** 	ShowRPN = 1;
 3907              		.loc 1 558 16 view .LVU1067
 3908 0028 0A4E     		ldr	r6, .L325+12
 557:src/xeq.c     **** 	JustDisplayed = 1;
 3909              		.loc 1 557 21 view .LVU1068
 3910 002a D17D     		ldrb	r1, [r2, #23]	@ zero_extendqisi2
 559:src/xeq.c     **** #endif
 3911              		.loc 1 559 10 view .LVU1069
 3912 002c 0A48     		ldr	r0, .L325+16
ARM GAS  /tmp/ccjeMhND.s 			page 183


 557:src/xeq.c     **** 	JustDisplayed = 1;
 3913              		.loc 1 557 21 view .LVU1070
 3914 002e 65F30411 		bfi	r1, r5, #4, #1
 561:src/xeq.c     **** }
 3915              		.loc 1 561 11 view .LVU1071
 3916 0032 251E     		subs	r5, r4, #0
 558:src/xeq.c     **** 	ShowRPN = 1;
 3917              		.loc 1 558 16 view .LVU1072
 3918 0034 4FF00103 		mov	r3, #1
 557:src/xeq.c     **** 	JustDisplayed = 1;
 3919              		.loc 1 557 21 view .LVU1073
 3920 0038 D175     		strb	r1, [r2, #23]
 558:src/xeq.c     **** 	ShowRPN = 1;
 3921              		.loc 1 558 2 is_stmt 1 view .LVU1074
 561:src/xeq.c     **** }
 3922              		.loc 1 561 11 is_stmt 0 view .LVU1075
 3923 003a 18BF     		it	ne
 3924 003c 0125     		movne	r5, #1
 559:src/xeq.c     **** #endif
 3925              		.loc 1 559 10 view .LVU1076
 3926 003e 0360     		str	r3, [r0]
 558:src/xeq.c     **** 	ShowRPN = 1;
 3927              		.loc 1 558 16 view .LVU1077
 3928 0040 3360     		str	r3, [r6]
 559:src/xeq.c     **** #endif
 3929              		.loc 1 559 2 is_stmt 1 view .LVU1078
 561:src/xeq.c     **** }
 3930              		.loc 1 561 2 view .LVU1079
 3931              	.LVL299:
 561:src/xeq.c     **** }
 3932              		.loc 1 561 2 is_stmt 0 view .LVU1080
 3933              	.LBE1519:
 3934              	.LBE1518:
 562:src/xeq.c     **** 
 3935              		.loc 1 562 1 view .LVU1081
 3936 0042 2846     		mov	r0, r5
 3937 0044 70BD     		pop	{r4, r5, r6, pc}
 3938              	.LVL300:
 3939              	.L326:
 562:src/xeq.c     **** 
 3940              		.loc 1 562 1 view .LVU1082
 3941 0046 00BF     		.align	2
 3942              	.L325:
 3943 0048 00000000 		.word	Running
 3944 004c 00000000 		.word	Error
 3945 0050 00000000 		.word	StateWhileOn
 3946 0054 00000000 		.word	JustDisplayed
 3947 0058 00000000 		.word	ShowRPN
 3948              		.cfi_endproc
 3949              	.LFE29:
 3951              		.section	.text.bad_mode_error,"ax",%progbits
 3952              		.align	1
 3953              		.p2align 2,,3
 3954              		.global	bad_mode_error
 3955              		.syntax unified
 3956              		.thumb
 3957              		.thumb_func
ARM GAS  /tmp/ccjeMhND.s 			page 184


 3958              		.fpu fpv4-sp-d16
 3960              	bad_mode_error:
 3961              	.LFB30:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 3962              		.loc 1 566 27 is_stmt 1 view -0
 3963              		.cfi_startproc
 3964              		@ args = 0, pretend = 0, frame = 0
 3965              		@ frame_needed = 0, uses_anonymous_args = 0
 3966              		@ link register save eliminated.
 567:src/xeq.c     **** }
 3967              		.loc 1 567 2 view .LVU1084
 3968              	.LVL301:
 3969              	.LBB1524:
 3970              	.LBI1524:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3971              		.loc 1 537 5 view .LVU1085
 3972              	.LBB1525:
 538:src/xeq.c     **** 		Error = e;
 3973              		.loc 1 538 2 view .LVU1086
 538:src/xeq.c     **** 		Error = e;
 3974              		.loc 1 538 12 is_stmt 0 view .LVU1087
 3975 0000 024B     		ldr	r3, .L329
 538:src/xeq.c     **** 		Error = e;
 3976              		.loc 1 538 5 view .LVU1088
 3977 0002 1A68     		ldr	r2, [r3]
 3978 0004 0AB9     		cbnz	r2, .L327
 3979              	.LVL302:
 3980              	.LBB1526:
 3981              	.LBI1526:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3982              		.loc 1 537 5 is_stmt 1 view .LVU1089
 3983              	.LBB1527:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3984              		.loc 1 539 3 view .LVU1090
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3985              		.loc 1 539 9 is_stmt 0 view .LVU1091
 3986 0006 0D22     		movs	r2, #13
 3987 0008 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3988              		.loc 1 540 3 is_stmt 1 view .LVU1092
 3989              	.LVL303:
 3990              	.L327:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3991              		.loc 1 540 3 is_stmt 0 view .LVU1093
 3992              	.LBE1527:
 3993              	.LBE1526:
 3994              	.LBE1525:
 3995              	.LBE1524:
 568:src/xeq.c     **** 
 3996              		.loc 1 568 1 view .LVU1094
 3997 000a 7047     		bx	lr
 3998              	.L330:
 3999              		.align	2
 4000              	.L329:
 4001 000c 00000000 		.word	Error
 4002              		.cfi_endproc
 4003              	.LFE30:
ARM GAS  /tmp/ccjeMhND.s 			page 185


 4005              		.section	.text.cmderr,"ax",%progbits
 4006              		.align	1
 4007              		.p2align 2,,3
 4008              		.global	cmderr
 4009              		.syntax unified
 4010              		.thumb
 4011              		.thumb_func
 4012              		.fpu fpv4-sp-d16
 4014              	cmderr:
 4015              	.LVL304:
 4016              	.LFB31:
 572:src/xeq.c     **** 	report_err(arg);
 4017              		.loc 1 572 45 is_stmt 1 view -0
 4018              		.cfi_startproc
 4019              		@ args = 0, pretend = 0, frame = 0
 4020              		@ frame_needed = 0, uses_anonymous_args = 0
 4021              		@ link register save eliminated.
 573:src/xeq.c     **** }
 4022              		.loc 1 573 2 view .LVU1096
 4023              	.LBB1532:
 4024              	.LBB1533:
 538:src/xeq.c     **** 		Error = e;
 4025              		.loc 1 538 12 is_stmt 0 view .LVU1097
 4026 0000 034A     		ldr	r2, .L336
 538:src/xeq.c     **** 		Error = e;
 4027              		.loc 1 538 5 view .LVU1098
 4028 0002 1168     		ldr	r1, [r2]
 4029              	.LVL305:
 538:src/xeq.c     **** 		Error = e;
 4030              		.loc 1 538 5 view .LVU1099
 4031              	.LBE1533:
 4032              	.LBI1532:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4033              		.loc 1 537 5 is_stmt 1 view .LVU1100
 4034              	.LBB1538:
 538:src/xeq.c     **** 		Error = e;
 4035              		.loc 1 538 2 view .LVU1101
 538:src/xeq.c     **** 		Error = e;
 4036              		.loc 1 538 5 is_stmt 0 view .LVU1102
 4037 0004 09B9     		cbnz	r1, .L331
 4038              	.LVL306:
 4039              	.LBB1534:
 4040              	.LBI1534:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4041              		.loc 1 537 5 is_stmt 1 view .LVU1103
 4042              	.LBB1535:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4043              		.loc 1 539 3 view .LVU1104
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4044              		.loc 1 539 9 is_stmt 0 view .LVU1105
 4045 0006 1060     		str	r0, [r2]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4046              		.loc 1 540 3 is_stmt 1 view .LVU1106
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4047              		.loc 1 540 6 is_stmt 0 view .LVU1107
 4048 0008 00B1     		cbz	r0, .L335
 4049              	.LVL307:
ARM GAS  /tmp/ccjeMhND.s 			page 186


 4050              	.L331:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4051              		.loc 1 540 6 view .LVU1108
 4052              	.LBE1535:
 4053              	.LBE1534:
 4054              	.LBE1538:
 4055              	.LBE1532:
 574:src/xeq.c     **** 
 4056              		.loc 1 574 1 view .LVU1109
 4057 000a 7047     		bx	lr
 4058              	.LVL308:
 4059              	.L335:
 4060              	.LBB1540:
 4061              	.LBB1539:
 4062              	.LBB1537:
 4063              	.LBB1536:
 541:src/xeq.c     **** 			return 0;
 4064              		.loc 1 541 4 is_stmt 1 view .LVU1110
 4065 000c FFF7FEBF 		b	error_message
 4066              	.LVL309:
 4067              	.L337:
 541:src/xeq.c     **** 			return 0;
 4068              		.loc 1 541 4 is_stmt 0 view .LVU1111
 4069              		.align	2
 4070              	.L336:
 4071 0010 00000000 		.word	Error
 4072              	.LBE1536:
 4073              	.LBE1537:
 4074              	.LBE1539:
 4075              	.LBE1540:
 4076              		.cfi_endproc
 4077              	.LFE31:
 4079              		.section	.text.cmdmsg,"ax",%progbits
 4080              		.align	1
 4081              		.p2align 2,,3
 4082              		.global	cmdmsg
 4083              		.syntax unified
 4084              		.thumb
 4085              		.thumb_func
 4086              		.fpu fpv4-sp-d16
 4088              	cmdmsg:
 4089              	.LVL310:
 4090              	.LFB32:
 578:src/xeq.c     **** 	error_message(arg);
 4091              		.loc 1 578 45 is_stmt 1 view -0
 4092              		.cfi_startproc
 4093              		@ args = 0, pretend = 0, frame = 0
 4094              		@ frame_needed = 0, uses_anonymous_args = 0
 4095              		@ link register save eliminated.
 579:src/xeq.c     **** }
 4096              		.loc 1 579 2 view .LVU1113
 4097 0000 FFF7FEBF 		b	error_message
 4098              	.LVL311:
 579:src/xeq.c     **** }
 4099              		.loc 1 579 2 is_stmt 0 view .LVU1114
 4100              		.cfi_endproc
 4101              	.LFE32:
ARM GAS  /tmp/ccjeMhND.s 			page 187


 4103              		.section	.text.rarg_roundingmode,"ax",%progbits
 4104              		.align	1
 4105              		.p2align 2,,3
 4106              		.global	rarg_roundingmode
 4107              		.syntax unified
 4108              		.thumb
 4109              		.thumb_func
 4110              		.fpu fpv4-sp-d16
 4112              	rarg_roundingmode:
 4113              	.LVL312:
 4114              	.LFB35:
 614:src/xeq.c     **** 	UState.rounding_mode = arg;
 4115              		.loc 1 614 56 is_stmt 1 view -0
 4116              		.cfi_startproc
 4117              		@ args = 0, pretend = 0, frame = 0
 4118              		@ frame_needed = 0, uses_anonymous_args = 0
 4119              		@ link register save eliminated.
 615:src/xeq.c     **** }
 4120              		.loc 1 615 2 view .LVU1116
 615:src/xeq.c     **** }
 4121              		.loc 1 615 23 is_stmt 0 view .LVU1117
 4122 0000 044B     		ldr	r3, .L340
 4123 0002 1B68     		ldr	r3, [r3]
 4124 0004 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 4125 0008 60F30612 		bfi	r2, r0, #4, #3
 4126              	.LVL313:
 615:src/xeq.c     **** }
 4127              		.loc 1 615 23 view .LVU1118
 4128 000c 83F8EB27 		strb	r2, [r3, #2027]
 616:src/xeq.c     **** 
 4129              		.loc 1 616 1 view .LVU1119
 4130 0010 7047     		bx	lr
 4131              	.L341:
 4132 0012 00BF     		.align	2
 4133              	.L340:
 4134 0014 00000000 		.word	main_ram
 4135              		.cfi_endproc
 4136              	.LFE35:
 4138              		.section	.text.packed_from_number,"ax",%progbits
 4139              		.align	1
 4140              		.p2align 2,,3
 4141              		.global	packed_from_number
 4142              		.syntax unified
 4143              		.thumb
 4144              		.thumb_func
 4145              		.fpu fpv4-sp-d16
 4147              	packed_from_number:
 4148              	.LVL314:
 4149              	.LFB36:
 622:src/xeq.c     **** 	decContext ctx64;
 4150              		.loc 1 622 59 is_stmt 1 view -0
 4151              		.cfi_startproc
 4152              		@ args = 0, pretend = 0, frame = 24
 4153              		@ frame_needed = 0, uses_anonymous_args = 0
 623:src/xeq.c     **** 
 4154              		.loc 1 623 2 view .LVU1121
 625:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
ARM GAS  /tmp/ccjeMhND.s 			page 188


 4155              		.loc 1 625 2 view .LVU1122
 622:src/xeq.c     **** 	decContext ctx64;
 4156              		.loc 1 622 59 is_stmt 0 view .LVU1123
 4157 0000 70B5     		push	{r4, r5, r6, lr}
 4158              		.cfi_def_cfa_offset 16
 4159              		.cfi_offset 4, -16
 4160              		.cfi_offset 5, -12
 4161              		.cfi_offset 6, -8
 4162              		.cfi_offset 14, -4
 4163 0002 86B0     		sub	sp, sp, #24
 4164              		.cfi_def_cfa_offset 40
 622:src/xeq.c     **** 	decContext ctx64;
 4165              		.loc 1 622 59 view .LVU1124
 4166 0004 0446     		mov	r4, r0
 4167 0006 0D46     		mov	r5, r1
 625:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4168              		.loc 1 625 2 view .LVU1125
 4169 0008 6846     		mov	r0, sp
 4170              	.LVL315:
 625:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4171              		.loc 1 625 2 view .LVU1126
 4172 000a 4021     		movs	r1, #64
 4173              	.LVL316:
 625:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4174              		.loc 1 625 2 view .LVU1127
 4175 000c FFF7FEFF 		bl	decContextDefault
 4176              	.LVL317:
 626:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4177              		.loc 1 626 2 is_stmt 1 view .LVU1128
 4178              	.LBB1541:
 4179              	.LBI1541:
 601:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4180              		.loc 1 601 22 view .LVU1129
 4181              	.LBB1542:
 602:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4182              		.loc 1 602 2 view .LVU1130
 607:src/xeq.c     **** }
 4183              		.loc 1 607 2 view .LVU1131
 607:src/xeq.c     **** }
 4184              		.loc 1 607 37 is_stmt 0 view .LVU1132
 4185 0010 084B     		ldr	r3, .L344
 607:src/xeq.c     **** }
 4186              		.loc 1 607 9 view .LVU1133
 4187 0012 094E     		ldr	r6, .L344+4
 607:src/xeq.c     **** }
 4188              		.loc 1 607 37 view .LVU1134
 4189 0014 1B68     		ldr	r3, [r3]
 4190 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4191 001a C3F30213 		ubfx	r3, r3, #4, #3
 4192              	.LBE1542:
 4193              	.LBE1541:
 627:src/xeq.c     **** }
 4194              		.loc 1 627 2 view .LVU1135
 4195 001e 2946     		mov	r1, r5
 626:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4196              		.loc 1 626 14 view .LVU1136
 4197 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccjeMhND.s 			page 189


 4198 0022 8DF80C30 		strb	r3, [sp, #12]
 627:src/xeq.c     **** }
 4199              		.loc 1 627 2 is_stmt 1 view .LVU1137
 4200 0026 2046     		mov	r0, r4
 4201 0028 6A46     		mov	r2, sp
 4202 002a FFF7FEFF 		bl	decimal64FromNumber
 4203              	.LVL318:
 628:src/xeq.c     **** 
 4204              		.loc 1 628 1 is_stmt 0 view .LVU1138
 4205 002e 06B0     		add	sp, sp, #24
 4206              		.cfi_def_cfa_offset 16
 4207              		@ sp needed
 4208 0030 70BD     		pop	{r4, r5, r6, pc}
 4209              	.LVL319:
 4210              	.L345:
 628:src/xeq.c     **** 
 4211              		.loc 1 628 1 view .LVU1139
 4212 0032 00BF     		.align	2
 4213              	.L344:
 4214 0034 00000000 		.word	main_ram
 4215 0038 00000000 		.word	.LANCHOR1
 4216              		.cfi_endproc
 4217              	.LFE36:
 4219              		.section	.text.packed128_from_number,"ax",%progbits
 4220              		.align	1
 4221              		.p2align 2,,3
 4222              		.global	packed128_from_number
 4223              		.syntax unified
 4224              		.thumb
 4225              		.thumb_func
 4226              		.fpu fpv4-sp-d16
 4228              	packed128_from_number:
 4229              	.LVL320:
 4230              	.LFB37:
 630:src/xeq.c     **** 	decContext ctx128;
 4231              		.loc 1 630 63 is_stmt 1 view -0
 4232              		.cfi_startproc
 4233              		@ args = 0, pretend = 0, frame = 24
 4234              		@ frame_needed = 0, uses_anonymous_args = 0
 631:src/xeq.c     **** 
 4235              		.loc 1 631 2 view .LVU1141
 633:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4236              		.loc 1 633 2 view .LVU1142
 630:src/xeq.c     **** 	decContext ctx128;
 4237              		.loc 1 630 63 is_stmt 0 view .LVU1143
 4238 0000 70B5     		push	{r4, r5, r6, lr}
 4239              		.cfi_def_cfa_offset 16
 4240              		.cfi_offset 4, -16
 4241              		.cfi_offset 5, -12
 4242              		.cfi_offset 6, -8
 4243              		.cfi_offset 14, -4
 4244 0002 86B0     		sub	sp, sp, #24
 4245              		.cfi_def_cfa_offset 40
 630:src/xeq.c     **** 	decContext ctx128;
 4246              		.loc 1 630 63 view .LVU1144
 4247 0004 0446     		mov	r4, r0
 4248 0006 0D46     		mov	r5, r1
ARM GAS  /tmp/ccjeMhND.s 			page 190


 633:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4249              		.loc 1 633 2 view .LVU1145
 4250 0008 6846     		mov	r0, sp
 4251              	.LVL321:
 633:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4252              		.loc 1 633 2 view .LVU1146
 4253 000a 8021     		movs	r1, #128
 4254              	.LVL322:
 633:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4255              		.loc 1 633 2 view .LVU1147
 4256 000c FFF7FEFF 		bl	decContextDefault
 4257              	.LVL323:
 634:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4258              		.loc 1 634 2 is_stmt 1 view .LVU1148
 4259              	.LBB1543:
 4260              	.LBI1543:
 601:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4261              		.loc 1 601 22 view .LVU1149
 4262              	.LBB1544:
 602:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4263              		.loc 1 602 2 view .LVU1150
 607:src/xeq.c     **** }
 4264              		.loc 1 607 2 view .LVU1151
 607:src/xeq.c     **** }
 4265              		.loc 1 607 37 is_stmt 0 view .LVU1152
 4266 0010 084B     		ldr	r3, .L348
 607:src/xeq.c     **** }
 4267              		.loc 1 607 9 view .LVU1153
 4268 0012 094E     		ldr	r6, .L348+4
 607:src/xeq.c     **** }
 4269              		.loc 1 607 37 view .LVU1154
 4270 0014 1B68     		ldr	r3, [r3]
 4271 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4272 001a C3F30213 		ubfx	r3, r3, #4, #3
 4273              	.LBE1544:
 4274              	.LBE1543:
 635:src/xeq.c     **** }
 4275              		.loc 1 635 2 view .LVU1155
 4276 001e 2946     		mov	r1, r5
 634:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4277              		.loc 1 634 15 view .LVU1156
 4278 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4279 0022 8DF80C30 		strb	r3, [sp, #12]
 635:src/xeq.c     **** }
 4280              		.loc 1 635 2 is_stmt 1 view .LVU1157
 4281 0026 2046     		mov	r0, r4
 4282 0028 6A46     		mov	r2, sp
 4283 002a FFF7FEFF 		bl	decimal128FromNumber
 4284              	.LVL324:
 636:src/xeq.c     **** 
 4285              		.loc 1 636 1 is_stmt 0 view .LVU1158
 4286 002e 06B0     		add	sp, sp, #24
 4287              		.cfi_def_cfa_offset 16
 4288              		@ sp needed
 4289 0030 70BD     		pop	{r4, r5, r6, pc}
 4290              	.LVL325:
 4291              	.L349:
ARM GAS  /tmp/ccjeMhND.s 			page 191


 636:src/xeq.c     **** 
 4292              		.loc 1 636 1 view .LVU1159
 4293 0032 00BF     		.align	2
 4294              	.L348:
 4295 0034 00000000 		.word	main_ram
 4296 0038 00000000 		.word	.LANCHOR1
 4297              		.cfi_endproc
 4298              	.LFE37:
 4300              		.section	.text.check_special,"ax",%progbits
 4301              		.align	1
 4302              		.p2align 2,,3
 4303              		.syntax unified
 4304              		.thumb
 4305              		.thumb_func
 4306              		.fpu fpv4-sp-d16
 4308              	check_special:
 4309              	.LVL326:
 4310              	.LFB41:
 675:src/xeq.c     **** 	decNumber y;
 4311              		.loc 1 675 46 is_stmt 1 view -0
 4312              		.cfi_startproc
 4313              		@ args = 0, pretend = 0, frame = 64
 4314              		@ frame_needed = 0, uses_anonymous_args = 0
 676:src/xeq.c     **** 	decimal64 z;
 4315              		.loc 1 676 2 view .LVU1161
 677:src/xeq.c     **** 	decimal128 d;
 4316              		.loc 1 677 2 view .LVU1162
 678:src/xeq.c     **** 	if (is_dblmode()) {
 4317              		.loc 1 678 2 view .LVU1163
 679:src/xeq.c     **** 		packed128_from_number(&d, x);
 4318              		.loc 1 679 2 view .LVU1164
 4319              	.LBB1561:
 4320              	.LBI1561:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4321              		.loc 1 932 5 view .LVU1165
 4322              	.LBB1562:
 933:src/xeq.c     **** }
 4323              		.loc 1 933 2 view .LVU1166
 933:src/xeq.c     **** }
 4324              		.loc 1 933 24 is_stmt 0 view .LVU1167
 4325 0000 274B     		ldr	r3, .L364
 4326 0002 1B68     		ldr	r3, [r3]
 4327              	.LBE1562:
 4328              	.LBE1561:
 675:src/xeq.c     **** 	decNumber y;
 4329              		.loc 1 675 46 view .LVU1168
 4330 0004 00B5     		push	{lr}
 4331              		.cfi_def_cfa_offset 4
 4332              		.cfi_offset 14, -4
 4333              	.LBB1564:
 4334              	.LBB1563:
 933:src/xeq.c     **** }
 4335              		.loc 1 933 24 view .LVU1169
 4336 0006 B3F8E827 		ldrh	r2, [r3, #2024]
 4337 000a 44F20103 		movw	r3, #16385
 4338              	.LBE1563:
 4339              	.LBE1564:
ARM GAS  /tmp/ccjeMhND.s 			page 192


 679:src/xeq.c     **** 		packed128_from_number(&d, x);
 4340              		.loc 1 679 5 view .LVU1170
 4341 000e 1340     		ands	r3, r3, r2
 4342 0010 B3F5804F 		cmp	r3, #16384
 675:src/xeq.c     **** 	decNumber y;
 4343              		.loc 1 675 46 view .LVU1171
 4344 0014 91B0     		sub	sp, sp, #68
 4345              		.cfi_def_cfa_offset 72
 675:src/xeq.c     **** 	decNumber y;
 4346              		.loc 1 675 46 view .LVU1172
 4347 0016 0146     		mov	r1, r0
 679:src/xeq.c     **** 		packed128_from_number(&d, x);
 4348              		.loc 1 679 5 view .LVU1173
 4349 0018 0FD0     		beq	.L362
 685:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4350              		.loc 1 685 3 is_stmt 1 view .LVU1174
 4351 001a 01A8     		add	r0, sp, #4
 4352              	.LVL327:
 685:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4353              		.loc 1 685 3 is_stmt 0 view .LVU1175
 4354 001c FFF7FEFF 		bl	packed_from_number
 4355              	.LVL328:
 686:src/xeq.c     **** 	}
 4356              		.loc 1 686 3 is_stmt 1 view .LVU1176
 4357 0020 01A8     		add	r0, sp, #4
 4358 0022 07A9     		add	r1, sp, #28
 4359 0024 FFF7FEFF 		bl	decimal64ToNumber
 4360              	.LVL329:
 688:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4361              		.loc 1 688 2 view .LVU1177
 688:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4362              		.loc 1 688 5 is_stmt 0 view .LVU1178
 4363 0028 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4364 002c 13F0700F 		tst	r3, #112
 4365 0030 0FD1     		bne	.L353
 4366              	.L355:
 699:src/xeq.c     **** }
 4367              		.loc 1 699 9 view .LVU1179
 4368 0032 0020     		movs	r0, #0
 4369              	.L350:
 700:src/xeq.c     **** 
 4370              		.loc 1 700 1 view .LVU1180
 4371 0034 11B0     		add	sp, sp, #68
 4372              		.cfi_remember_state
 4373              		.cfi_def_cfa_offset 4
 4374              		@ sp needed
 4375 0036 5DF804FB 		ldr	pc, [sp], #4
 4376              	.LVL330:
 4377              	.L362:
 4378              		.cfi_restore_state
 680:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4379              		.loc 1 680 3 is_stmt 1 view .LVU1181
 4380 003a 03A8     		add	r0, sp, #12
 4381              	.LVL331:
 680:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4382              		.loc 1 680 3 is_stmt 0 view .LVU1182
 4383 003c FFF7FEFF 		bl	packed128_from_number
ARM GAS  /tmp/ccjeMhND.s 			page 193


 4384              	.LVL332:
 681:src/xeq.c     **** 	}
 4385              		.loc 1 681 3 is_stmt 1 view .LVU1183
 4386 0040 03A8     		add	r0, sp, #12
 4387 0042 07A9     		add	r1, sp, #28
 4388 0044 FFF7FEFF 		bl	decimal128ToNumber
 4389              	.LVL333:
 688:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4390              		.loc 1 688 2 view .LVU1184
 688:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4391              		.loc 1 688 5 is_stmt 0 view .LVU1185
 4392 0048 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4393 004c 13F0700F 		tst	r3, #112
 4394 0050 EFD0     		beq	.L355
 4395              	.L353:
 689:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4396              		.loc 1 689 3 is_stmt 1 view .LVU1186
 4397              	.LVL334:
 4398              	.LBB1565:
 4399              	.LBI1565:
3343:src/xeq.c     **** 	unsigned short mask;
 4400              		.loc 1 3343 5 view .LVU1187
 4401              	.LBB1566:
3344:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 4402              		.loc 1 3344 2 view .LVU1188
3345:src/xeq.c     **** 
 4403              		.loc 1 3345 2 view .LVU1189
3345:src/xeq.c     **** 
 4404              		.loc 1 3345 34 is_stmt 0 view .LVU1190
 4405 0052 0DF10201 		add	r1, sp, #2
 4406 0056 6B20     		movs	r0, #107
 4407 0058 FFF7FEFF 		bl	flag_word
 4408              	.LVL335:
3347:src/xeq.c     **** }
 4409              		.loc 1 3347 2 is_stmt 1 view .LVU1191
3347:src/xeq.c     **** }
 4410              		.loc 1 3347 24 is_stmt 0 view .LVU1192
 4411 005c BDF80230 		ldrh	r3, [sp, #2]
 4412 0060 0288     		ldrh	r2, [r0]
 4413              	.LBE1566:
 4414              	.LBE1565:
 689:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4415              		.loc 1 689 6 view .LVU1193
 4416 0062 1A42     		tst	r2, r3
 4417 0064 E5D1     		bne	.L355
 690:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4418              		.loc 1 690 4 is_stmt 1 view .LVU1194
 690:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4419              		.loc 1 690 8 is_stmt 0 view .LVU1195
 4420 0066 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 690:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4421              		.loc 1 690 7 view .LVU1196
 4422 006a 13F0300F 		tst	r3, #48
 4423 006e 06D0     		beq	.L356
 691:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 4424              		.loc 1 691 5 is_stmt 1 view .LVU1197
 4425              	.LVL336:
ARM GAS  /tmp/ccjeMhND.s 			page 194


 4426              	.LBB1567:
 4427              	.LBI1567:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4428              		.loc 1 537 5 view .LVU1198
 4429              	.LBB1568:
 538:src/xeq.c     **** 		Error = e;
 4430              		.loc 1 538 2 view .LVU1199
 538:src/xeq.c     **** 		Error = e;
 4431              		.loc 1 538 12 is_stmt 0 view .LVU1200
 4432 0070 0C4B     		ldr	r3, .L364+4
 538:src/xeq.c     **** 		Error = e;
 4433              		.loc 1 538 5 view .LVU1201
 4434 0072 1A68     		ldr	r2, [r3]
 4435              	.LBB1569:
 4436              	.LBB1570:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4437              		.loc 1 539 9 view .LVU1202
 4438 0074 0120     		movs	r0, #1
 4439              	.LBE1570:
 4440              	.LBE1569:
 538:src/xeq.c     **** 		Error = e;
 4441              		.loc 1 538 5 view .LVU1203
 4442 0076 002A     		cmp	r2, #0
 4443 0078 DCD1     		bne	.L350
 4444              	.LVL337:
 4445              	.LBB1572:
 4446              	.LBI1569:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4447              		.loc 1 537 5 is_stmt 1 view .LVU1204
 4448              	.LBB1571:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4449              		.loc 1 539 3 view .LVU1205
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4450              		.loc 1 539 9 is_stmt 0 view .LVU1206
 4451 007a 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4452              		.loc 1 540 3 is_stmt 1 view .LVU1207
 4453 007c DAE7     		b	.L350
 4454              	.LVL338:
 4455              	.L356:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4456              		.loc 1 540 3 is_stmt 0 view .LVU1208
 4457              	.LBE1571:
 4458              	.LBE1572:
 4459              	.LBE1568:
 4460              	.LBE1567:
 692:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4461              		.loc 1 692 9 is_stmt 1 view .LVU1209
 692:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4462              		.loc 1 692 12 is_stmt 0 view .LVU1210
 4463 007e 13F0800F 		tst	r3, #128
 4464              	.LBB1573:
 4465              	.LBB1574:
 538:src/xeq.c     **** 		Error = e;
 4466              		.loc 1 538 12 view .LVU1211
 4467 0082 084B     		ldr	r3, .L364+4
 538:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccjeMhND.s 			page 195


 4468              		.loc 1 538 5 view .LVU1212
 4469 0084 1A68     		ldr	r2, [r3]
 4470              	.LBE1574:
 4471              	.LBE1573:
 692:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4472              		.loc 1 692 12 view .LVU1213
 4473 0086 04D1     		bne	.L363
 695:src/xeq.c     **** 			return 1;
 4474              		.loc 1 695 5 is_stmt 1 view .LVU1214
 4475              	.LVL339:
 4476              	.LBB1578:
 4477              	.LBI1578:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4478              		.loc 1 537 5 view .LVU1215
 4479              	.LBB1579:
 538:src/xeq.c     **** 		Error = e;
 4480              		.loc 1 538 2 view .LVU1216
 538:src/xeq.c     **** 		Error = e;
 4481              		.loc 1 538 5 is_stmt 0 view .LVU1217
 4482 0088 42B9     		cbnz	r2, .L360
 4483              	.LVL340:
 4484              	.LBB1580:
 4485              	.LBI1580:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4486              		.loc 1 537 5 is_stmt 1 view .LVU1218
 4487              	.LBB1581:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4488              		.loc 1 539 3 view .LVU1219
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4489              		.loc 1 539 9 is_stmt 0 view .LVU1220
 4490 008a 0422     		movs	r2, #4
 4491 008c 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4492              		.loc 1 540 3 is_stmt 1 view .LVU1221
 4493              	.LBE1581:
 4494              	.LBE1580:
 4495              	.LBE1579:
 4496              	.LBE1578:
 696:src/xeq.c     **** 		}
 4497              		.loc 1 696 11 is_stmt 0 view .LVU1222
 4498 008e 0120     		movs	r0, #1
 4499 0090 D0E7     		b	.L350
 4500              	.LVL341:
 4501              	.L363:
 693:src/xeq.c     **** 			else
 4502              		.loc 1 693 5 is_stmt 1 view .LVU1223
 4503              	.LBB1582:
 4504              	.LBI1573:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4505              		.loc 1 537 5 view .LVU1224
 4506              	.LBB1577:
 538:src/xeq.c     **** 		Error = e;
 4507              		.loc 1 538 2 view .LVU1225
 538:src/xeq.c     **** 		Error = e;
 4508              		.loc 1 538 5 is_stmt 0 view .LVU1226
 4509 0092 1AB9     		cbnz	r2, .L360
 4510              	.LVL342:
ARM GAS  /tmp/ccjeMhND.s 			page 196


 4511              	.LBB1575:
 4512              	.LBI1575:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4513              		.loc 1 537 5 is_stmt 1 view .LVU1227
 4514              	.LBB1576:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4515              		.loc 1 539 3 view .LVU1228
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4516              		.loc 1 539 9 is_stmt 0 view .LVU1229
 4517 0094 0522     		movs	r2, #5
 4518 0096 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4519              		.loc 1 540 3 is_stmt 1 view .LVU1230
 4520              	.LBE1576:
 4521              	.LBE1575:
 4522              	.LBE1577:
 4523              	.LBE1582:
 696:src/xeq.c     **** 		}
 4524              		.loc 1 696 11 is_stmt 0 view .LVU1231
 4525 0098 0120     		movs	r0, #1
 4526 009a CBE7     		b	.L350
 4527              	.LVL343:
 4528              	.L360:
 696:src/xeq.c     **** 		}
 4529              		.loc 1 696 11 view .LVU1232
 4530 009c 0120     		movs	r0, #1
 4531 009e C9E7     		b	.L350
 4532              	.L365:
 4533              		.align	2
 4534              	.L364:
 4535 00a0 00000000 		.word	main_ram
 4536 00a4 00000000 		.word	Error
 4537              		.cfi_endproc
 4538              	.LFE41:
 4540              		.section	.text.packed_from_packed128,"ax",%progbits
 4541              		.align	1
 4542              		.p2align 2,,3
 4543              		.global	packed_from_packed128
 4544              		.syntax unified
 4545              		.thumb
 4546              		.thumb_func
 4547              		.fpu fpv4-sp-d16
 4549              	packed_from_packed128:
 4550              	.LVL344:
 4551              	.LFB38:
 639:src/xeq.c     **** 	decNumber temp;
 4552              		.loc 1 639 63 is_stmt 1 view -0
 4553              		.cfi_startproc
 4554              		@ args = 0, pretend = 0, frame = 40
 4555              		@ frame_needed = 0, uses_anonymous_args = 0
 640:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 4556              		.loc 1 640 2 view .LVU1234
 641:src/xeq.c     **** }
 4557              		.loc 1 641 2 view .LVU1235
 639:src/xeq.c     **** 	decNumber temp;
 4558              		.loc 1 639 63 is_stmt 0 view .LVU1236
 4559 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccjeMhND.s 			page 197


 4560              		.cfi_def_cfa_offset 8
 4561              		.cfi_offset 4, -8
 4562              		.cfi_offset 14, -4
 4563 0002 8AB0     		sub	sp, sp, #40
 4564              		.cfi_def_cfa_offset 48
 639:src/xeq.c     **** 	decNumber temp;
 4565              		.loc 1 639 63 view .LVU1237
 4566 0004 0446     		mov	r4, r0
 641:src/xeq.c     **** }
 4567              		.loc 1 641 24 view .LVU1238
 4568 0006 0846     		mov	r0, r1
 4569              	.LVL345:
 641:src/xeq.c     **** }
 4570              		.loc 1 641 24 view .LVU1239
 4571 0008 01A9     		add	r1, sp, #4
 4572              	.LVL346:
 641:src/xeq.c     **** }
 4573              		.loc 1 641 24 view .LVU1240
 4574 000a FFF7FEFF 		bl	decimal128ToNumber
 4575              	.LVL347:
 641:src/xeq.c     **** }
 4576              		.loc 1 641 24 view .LVU1241
 4577 000e 0146     		mov	r1, r0
 641:src/xeq.c     **** }
 4578              		.loc 1 641 2 view .LVU1242
 4579 0010 2046     		mov	r0, r4
 4580 0012 FFF7FEFF 		bl	packed_from_number
 4581              	.LVL348:
 642:src/xeq.c     **** 
 4582              		.loc 1 642 1 view .LVU1243
 4583 0016 0AB0     		add	sp, sp, #40
 4584              		.cfi_def_cfa_offset 8
 4585              		@ sp needed
 4586 0018 10BD     		pop	{r4, pc}
 642:src/xeq.c     **** 
 4587              		.loc 1 642 1 view .LVU1244
 4588              		.cfi_endproc
 4589              	.LFE38:
 4591 001a 00BF     		.section	.text.packed128_from_packed,"ax",%progbits
 4592              		.align	1
 4593              		.p2align 2,,3
 4594              		.global	packed128_from_packed
 4595              		.syntax unified
 4596              		.thumb
 4597              		.thumb_func
 4598              		.fpu fpv4-sp-d16
 4600              	packed128_from_packed:
 4601              	.LVL349:
 4602              	.LFB39:
 645:src/xeq.c     **** 	decNumber temp;
 4603              		.loc 1 645 63 is_stmt 1 view -0
 4604              		.cfi_startproc
 4605              		@ args = 0, pretend = 0, frame = 40
 4606              		@ frame_needed = 0, uses_anonymous_args = 0
 646:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 4607              		.loc 1 646 2 view .LVU1246
 647:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 198


 4608              		.loc 1 647 2 view .LVU1247
 645:src/xeq.c     **** 	decNumber temp;
 4609              		.loc 1 645 63 is_stmt 0 view .LVU1248
 4610 0000 10B5     		push	{r4, lr}
 4611              		.cfi_def_cfa_offset 8
 4612              		.cfi_offset 4, -8
 4613              		.cfi_offset 14, -4
 4614 0002 8AB0     		sub	sp, sp, #40
 4615              		.cfi_def_cfa_offset 48
 645:src/xeq.c     **** 	decNumber temp;
 4616              		.loc 1 645 63 view .LVU1249
 4617 0004 0446     		mov	r4, r0
 647:src/xeq.c     **** }
 4618              		.loc 1 647 27 view .LVU1250
 4619 0006 0846     		mov	r0, r1
 4620              	.LVL350:
 647:src/xeq.c     **** }
 4621              		.loc 1 647 27 view .LVU1251
 4622 0008 01A9     		add	r1, sp, #4
 4623              	.LVL351:
 647:src/xeq.c     **** }
 4624              		.loc 1 647 27 view .LVU1252
 4625 000a FFF7FEFF 		bl	decimal64ToNumber
 4626              	.LVL352:
 647:src/xeq.c     **** }
 4627              		.loc 1 647 27 view .LVU1253
 4628 000e 0146     		mov	r1, r0
 647:src/xeq.c     **** }
 4629              		.loc 1 647 2 view .LVU1254
 4630 0010 2046     		mov	r0, r4
 4631 0012 FFF7FEFF 		bl	packed128_from_number
 4632              	.LVL353:
 648:src/xeq.c     **** 
 4633              		.loc 1 648 1 view .LVU1255
 4634 0016 0AB0     		add	sp, sp, #40
 4635              		.cfi_def_cfa_offset 8
 4636              		@ sp needed
 4637 0018 10BD     		pop	{r4, pc}
 648:src/xeq.c     **** 
 4638              		.loc 1 648 1 view .LVU1256
 4639              		.cfi_endproc
 4640              	.LFE39:
 4642 001a 00BF     		.section	.text.stack_size,"ax",%progbits
 4643              		.align	1
 4644              		.p2align 2,,3
 4645              		.global	stack_size
 4646              		.syntax unified
 4647              		.thumb
 4648              		.thumb_func
 4649              		.fpu fpv4-sp-d16
 4651              	stack_size:
 4652              	.LFB42:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 4653              		.loc 1 703 22 is_stmt 1 view -0
 4654              		.cfi_startproc
 4655              		@ args = 0, pretend = 0, frame = 0
 4656              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccjeMhND.s 			page 199


 4657              		@ link register save eliminated.
 704:src/xeq.c     **** 		return 4;
 4658              		.loc 1 704 2 view .LVU1258
 704:src/xeq.c     **** 		return 4;
 4659              		.loc 1 704 8 is_stmt 0 view .LVU1259
 4660 0000 0B4B     		ldr	r3, .L376
 4661 0002 1B68     		ldr	r3, [r3]
 704:src/xeq.c     **** 		return 4;
 4662              		.loc 1 704 6 view .LVU1260
 4663 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 4664              		.loc 1 704 5 view .LVU1261
 4665 0008 1207     		lsls	r2, r2, #28
 4666 000a 0ED5     		bpl	.L372
 4667              	.LBB1583:
 4668              	.LBI1583:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 4669              		.loc 1 182 5 is_stmt 1 view .LVU1262
 4670              	.LBB1584:
 183:src/xeq.c     **** }
 4671              		.loc 1 183 2 view .LVU1263
 183:src/xeq.c     **** }
 4672              		.loc 1 183 9 is_stmt 0 view .LVU1264
 4673 000c B3F8E037 		ldrh	r3, [r3, #2016]
 4674              	.LBE1584:
 4675              	.LBE1583:
 704:src/xeq.c     **** 		return 4;
 4676              		.loc 1 704 27 view .LVU1265
 4677 0010 9B0B     		lsrs	r3, r3, #14
 4678 0012 032B     		cmp	r3, #3
 4679 0014 01D0     		beq	.L375
 706:src/xeq.c     **** }
 4680              		.loc 1 706 9 view .LVU1266
 4681 0016 0820     		movs	r0, #8
 707:src/xeq.c     **** 
 4682              		.loc 1 707 1 view .LVU1267
 4683 0018 7047     		bx	lr
 4684              	.L375:
 704:src/xeq.c     **** 		return 4;
 4685              		.loc 1 704 44 discriminator 2 view .LVU1268
 4686 001a 064B     		ldr	r3, .L376+4
 704:src/xeq.c     **** 		return 4;
 4687              		.loc 1 704 41 discriminator 2 view .LVU1269
 4688 001c 93F90130 		ldrsb	r3, [r3, #1]
 4689 0020 002B     		cmp	r3, #0
 705:src/xeq.c     **** 	return 8;
 4690              		.loc 1 705 10 discriminator 2 view .LVU1270
 4691 0022 B4BF     		ite	lt
 4692 0024 0820     		movlt	r0, #8
 4693 0026 0420     		movge	r0, #4
 4694 0028 7047     		bx	lr
 4695              	.L372:
 705:src/xeq.c     **** 	return 8;
 4696              		.loc 1 705 10 view .LVU1271
 4697 002a 0420     		movs	r0, #4
 4698 002c 7047     		bx	lr
 4699              	.L377:
ARM GAS  /tmp/ccjeMhND.s 			page 200


 4700 002e 00BF     		.align	2
 4701              	.L376:
 4702 0030 00000000 		.word	main_ram
 4703 0034 00000000 		.word	XromParams
 4704              		.cfi_endproc
 4705              	.LFE42:
 4707              		.section	.text.copyreg,"ax",%progbits
 4708              		.align	1
 4709              		.p2align 2,,3
 4710              		.global	copyreg
 4711              		.syntax unified
 4712              		.thumb
 4713              		.thumb_func
 4714              		.fpu fpv4-sp-d16
 4716              	copyreg:
 4717              	.LVL354:
 4718              	.LFB45:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 4719              		.loc 1 717 46 is_stmt 1 view -0
 4720              		.cfi_startproc
 4721              		@ args = 0, pretend = 0, frame = 0
 4722              		@ frame_needed = 0, uses_anonymous_args = 0
 4723              		@ link register save eliminated.
 718:src/xeq.c     **** }
 4724              		.loc 1 718 2 view .LVU1273
 4725              	.LBB1585:
 4726              	.LBI1585:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4727              		.loc 1 932 5 view .LVU1274
 4728              	.LBB1586:
 933:src/xeq.c     **** }
 4729              		.loc 1 933 2 view .LVU1275
 933:src/xeq.c     **** }
 4730              		.loc 1 933 24 is_stmt 0 view .LVU1276
 4731 0000 064B     		ldr	r3, .L381
 4732 0002 1B68     		ldr	r3, [r3]
 4733 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 4734 0008 44F20103 		movw	r3, #16385
 4735              	.LBE1586:
 4736              	.LBE1585:
 718:src/xeq.c     **** }
 4737              		.loc 1 718 2 view .LVU1277
 4738 000c 1340     		ands	r3, r3, r2
 4739 000e B3F5804F 		cmp	r3, #16384
 4740 0012 0CBF     		ite	eq
 4741 0014 1022     		moveq	r2, #16
 4742 0016 0822     		movne	r2, #8
 4743 0018 FFF7FEBF 		b	xcopy
 4744              	.LVL355:
 4745              	.L382:
 718:src/xeq.c     **** }
 4746              		.loc 1 718 2 view .LVU1278
 4747              		.align	2
 4748              	.L381:
 4749 001c 00000000 		.word	main_ram
 4750              		.cfi_endproc
 4751              	.LFE45:
ARM GAS  /tmp/ccjeMhND.s 			page 201


 4753              		.section	.text.set_lift,"ax",%progbits
 4754              		.align	1
 4755              		.p2align 2,,3
 4756              		.global	set_lift
 4757              		.syntax unified
 4758              		.thumb
 4759              		.thumb_func
 4760              		.fpu fpv4-sp-d16
 4762              	set_lift:
 4763              	.LFB51:
 748:src/xeq.c     ****     State2.state_lift = 1;
 4764              		.loc 1 748 21 is_stmt 1 view -0
 4765              		.cfi_startproc
 4766              		@ args = 0, pretend = 0, frame = 0
 4767              		@ frame_needed = 0, uses_anonymous_args = 0
 4768              		@ link register save eliminated.
 749:src/xeq.c     **** }
 4769              		.loc 1 749 5 view .LVU1280
 749:src/xeq.c     **** }
 4770              		.loc 1 749 23 is_stmt 0 view .LVU1281
 4771 0000 024A     		ldr	r2, .L384
 4772 0002 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 4773 0004 43F04003 		orr	r3, r3, #64
 4774 0008 D375     		strb	r3, [r2, #23]
 750:src/xeq.c     **** 
 4775              		.loc 1 750 1 view .LVU1282
 4776 000a 7047     		bx	lr
 4777              	.L385:
 4778              		.align	2
 4779              	.L384:
 4780 000c 00000000 		.word	StateWhileOn
 4781              		.cfi_endproc
 4782              	.LFE51:
 4784              		.section	.text.is_dblmode,"ax",%progbits
 4785              		.align	1
 4786              		.p2align 2,,3
 4787              		.global	is_dblmode
 4788              		.syntax unified
 4789              		.thumb
 4790              		.thumb_func
 4791              		.fpu fpv4-sp-d16
 4793              	is_dblmode:
 4794              	.LFB78:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4795              		.loc 1 932 22 is_stmt 1 view -0
 4796              		.cfi_startproc
 4797              		@ args = 0, pretend = 0, frame = 0
 4798              		@ frame_needed = 0, uses_anonymous_args = 0
 4799              		@ link register save eliminated.
 933:src/xeq.c     **** }
 4800              		.loc 1 933 2 view .LVU1284
 933:src/xeq.c     **** }
 4801              		.loc 1 933 24 is_stmt 0 view .LVU1285
 4802 0000 064B     		ldr	r3, .L387
 4803 0002 1B68     		ldr	r3, [r3]
 4804 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 4805 0008 44F20100 		movw	r0, #16385
ARM GAS  /tmp/ccjeMhND.s 			page 202


 4806 000c 1840     		ands	r0, r0, r3
 934:src/xeq.c     **** 
 4807              		.loc 1 934 1 view .LVU1286
 4808 000e A0F58040 		sub	r0, r0, #16384
 4809 0012 B0FA80F0 		clz	r0, r0
 4810 0016 4009     		lsrs	r0, r0, #5
 4811 0018 7047     		bx	lr
 4812              	.L388:
 4813 001a 00BF     		.align	2
 4814              	.L387:
 4815 001c 00000000 		.word	main_ram
 4816              		.cfi_endproc
 4817              	.LFE78:
 4819              		.section	.text.is_usrdblmode,"ax",%progbits
 4820              		.align	1
 4821              		.p2align 2,,3
 4822              		.global	is_usrdblmode
 4823              		.syntax unified
 4824              		.thumb
 4825              		.thumb_func
 4826              		.fpu fpv4-sp-d16
 4828              	is_usrdblmode:
 4829              	.LFB79:
 936:src/xeq.c     **** 	if (XromFlags.xIN)
 4830              		.loc 1 936 25 is_stmt 1 view -0
 4831              		.cfi_startproc
 4832              		@ args = 0, pretend = 0, frame = 0
 4833              		@ frame_needed = 0, uses_anonymous_args = 0
 4834              		@ link register save eliminated.
 937:src/xeq.c     **** 		return XromFlags.mode_double;
 4835              		.loc 1 937 2 view .LVU1288
 937:src/xeq.c     **** 		return XromFlags.mode_double;
 4836              		.loc 1 937 6 is_stmt 0 view .LVU1289
 4837 0000 0A4B     		ldr	r3, .L393
 937:src/xeq.c     **** 		return XromFlags.mode_double;
 4838              		.loc 1 937 5 view .LVU1290
 4839 0002 93F90120 		ldrsb	r2, [r3, #1]
 4840 0006 002A     		cmp	r2, #0
 4841 0008 0CDB     		blt	.L392
 939:src/xeq.c     **** }
 4842              		.loc 1 939 2 is_stmt 1 view .LVU1291
 4843              	.LBB1587:
 4844              	.LBI1587:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4845              		.loc 1 932 5 view .LVU1292
 4846              	.LBB1588:
 933:src/xeq.c     **** }
 4847              		.loc 1 933 2 view .LVU1293
 933:src/xeq.c     **** }
 4848              		.loc 1 933 24 is_stmt 0 view .LVU1294
 4849 000a 094B     		ldr	r3, .L393+4
 4850 000c 1B68     		ldr	r3, [r3]
 4851 000e B3F8E837 		ldrh	r3, [r3, #2024]
 4852 0012 44F20100 		movw	r0, #16385
 4853 0016 1840     		ands	r0, r0, r3
 4854 0018 A0F58040 		sub	r0, r0, #16384
 4855 001c B0FA80F0 		clz	r0, r0
ARM GAS  /tmp/ccjeMhND.s 			page 203


 4856 0020 4009     		lsrs	r0, r0, #5
 4857              	.LBE1588:
 4858              	.LBE1587:
 940:src/xeq.c     **** 
 4859              		.loc 1 940 1 view .LVU1295
 4860 0022 7047     		bx	lr
 4861              	.L392:
 938:src/xeq.c     **** 	return is_dblmode();
 4862              		.loc 1 938 3 is_stmt 1 view .LVU1296
 938:src/xeq.c     **** 	return is_dblmode();
 4863              		.loc 1 938 19 is_stmt 0 view .LVU1297
 4864 0024 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4865 0026 C0F3C000 		ubfx	r0, r0, #3, #1
 4866 002a 7047     		bx	lr
 4867              	.L394:
 4868              		.align	2
 4869              	.L393:
 4870 002c 00000000 		.word	XromParams
 4871 0030 00000000 		.word	main_ram
 4872              		.cfi_endproc
 4873              	.LFE79:
 4875              		.section	.text.s_to_i,"ax",%progbits
 4876              		.align	1
 4877              		.p2align 2,,3
 4878              		.global	s_to_i
 4879              		.syntax unified
 4880              		.thumb
 4881              		.thumb_func
 4882              		.fpu fpv4-sp-d16
 4884              	s_to_i:
 4885              	.LVL356:
 4886              	.LFB80:
 944:src/xeq.c     **** 	int x = 0;
 4887              		.loc 1 944 27 is_stmt 1 view -0
 4888              		.cfi_startproc
 4889              		@ args = 0, pretend = 0, frame = 0
 4890              		@ frame_needed = 0, uses_anonymous_args = 0
 4891              		@ link register save eliminated.
 945:src/xeq.c     **** 	int neg;
 4892              		.loc 1 945 2 view .LVU1299
 946:src/xeq.c     **** 
 4893              		.loc 1 946 2 view .LVU1300
 948:src/xeq.c     **** 		s++;
 4894              		.loc 1 948 2 view .LVU1301
 944:src/xeq.c     **** 	int x = 0;
 4895              		.loc 1 944 27 is_stmt 0 view .LVU1302
 4896 0000 10B4     		push	{r4}
 4897              		.cfi_def_cfa_offset 4
 4898              		.cfi_offset 4, -4
 948:src/xeq.c     **** 		s++;
 4899              		.loc 1 948 6 view .LVU1303
 4900 0002 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 948:src/xeq.c     **** 		s++;
 4901              		.loc 1 948 5 view .LVU1304
 4902 0004 2D29     		cmp	r1, #45
 4903 0006 26D0     		beq	.L411
 952:src/xeq.c     **** 			s++;
ARM GAS  /tmp/ccjeMhND.s 			page 204


 4904              		.loc 1 952 3 is_stmt 1 view .LVU1305
 952:src/xeq.c     **** 			s++;
 4905              		.loc 1 952 6 is_stmt 0 view .LVU1306
 4906 0008 2B29     		cmp	r1, #43
 4907 000a 18D0     		beq	.L399
 4908              	.LVL357:
 957:src/xeq.c     **** 		const char c = *s++;
 4909              		.loc 1 957 2 is_stmt 1 view .LVU1307
 4910              	.LBB1589:
 958:src/xeq.c     **** 
 4911              		.loc 1 958 3 view .LVU1308
 960:src/xeq.c     **** 			break;
 4912              		.loc 1 960 15 is_stmt 0 view .LVU1309
 4913 000c A1F13003 		sub	r3, r1, #48
 960:src/xeq.c     **** 			break;
 4914              		.loc 1 960 6 view .LVU1310
 4915 0010 D9B2     		uxtb	r1, r3
 4916 0012 0929     		cmp	r1, #9
 958:src/xeq.c     **** 
 4917              		.loc 1 958 20 view .LVU1311
 4918 0014 00F10102 		add	r2, r0, #1
 4919              	.LVL358:
 960:src/xeq.c     **** 			break;
 4920              		.loc 1 960 3 is_stmt 1 view .LVU1312
 960:src/xeq.c     **** 			break;
 4921              		.loc 1 960 6 is_stmt 0 view .LVU1313
 4922 0018 19D8     		bhi	.L404
 4923              	.LVL359:
 4924              	.L410:
 960:src/xeq.c     **** 			break;
 4925              		.loc 1 960 6 view .LVU1314
 4926              	.LBE1589:
 954:src/xeq.c     **** 	}
 4927              		.loc 1 954 7 view .LVU1315
 4928 001a 0024     		movs	r4, #0
 4929              	.LVL360:
 4930              	.L398:
 954:src/xeq.c     **** 	}
 4931              		.loc 1 954 7 view .LVU1316
 4932 001c 0020     		movs	r0, #0
 4933              	.LVL361:
 4934              	.L401:
 4935              	.LBB1590:
 962:src/xeq.c     **** 	}
 4936              		.loc 1 962 3 is_stmt 1 view .LVU1317
 958:src/xeq.c     **** 
 4937              		.loc 1 958 14 is_stmt 0 view .LVU1318
 4938 001e 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 4939              	.LVL362:
 962:src/xeq.c     **** 	}
 4940              		.loc 1 962 10 view .LVU1319
 4941 0022 00EB8000 		add	r0, r0, r0, lsl #2
 4942              	.LVL363:
 962:src/xeq.c     **** 	}
 4943              		.loc 1 962 5 view .LVU1320
 4944 0026 03EB4000 		add	r0, r3, r0, lsl #1
 4945              	.LVL364:
ARM GAS  /tmp/ccjeMhND.s 			page 205


 962:src/xeq.c     **** 	}
 4946              		.loc 1 962 5 view .LVU1321
 4947              	.LBE1590:
 957:src/xeq.c     **** 		const char c = *s++;
 4948              		.loc 1 957 8 is_stmt 1 view .LVU1322
 957:src/xeq.c     **** 		const char c = *s++;
 4949              		.loc 1 957 2 view .LVU1323
 4950              	.LBB1591:
 958:src/xeq.c     **** 
 4951              		.loc 1 958 3 view .LVU1324
 960:src/xeq.c     **** 			break;
 4952              		.loc 1 960 3 view .LVU1325
 960:src/xeq.c     **** 			break;
 4953              		.loc 1 960 15 is_stmt 0 view .LVU1326
 4954 002a A1F13003 		sub	r3, r1, #48
 960:src/xeq.c     **** 			break;
 4955              		.loc 1 960 6 view .LVU1327
 4956 002e D9B2     		uxtb	r1, r3
 4957 0030 0929     		cmp	r1, #9
 4958 0032 F4D9     		bls	.L401
 4959              	.LBE1591:
 964:src/xeq.c     **** 		return -x;
 4960              		.loc 1 964 2 is_stmt 1 view .LVU1328
 964:src/xeq.c     **** 		return -x;
 4961              		.loc 1 964 5 is_stmt 0 view .LVU1329
 4962 0034 04B1     		cbz	r4, .L395
 4963 0036 4042     		rsbs	r0, r0, #0
 4964              	.LVL365:
 4965              	.L395:
 967:src/xeq.c     **** 
 4966              		.loc 1 967 1 view .LVU1330
 4967 0038 5DF8044B 		ldr	r4, [sp], #4
 4968              		.cfi_remember_state
 4969              		.cfi_restore 4
 4970              		.cfi_def_cfa_offset 0
 4971 003c 7047     		bx	lr
 4972              	.LVL366:
 4973              	.L399:
 4974              		.cfi_restore_state
 953:src/xeq.c     **** 		neg = 0;
 4975              		.loc 1 953 4 is_stmt 1 view .LVU1331
 957:src/xeq.c     **** 		const char c = *s++;
 4976              		.loc 1 957 2 view .LVU1332
 4977              	.LBB1592:
 958:src/xeq.c     **** 
 4978              		.loc 1 958 3 view .LVU1333
 958:src/xeq.c     **** 
 4979              		.loc 1 958 14 is_stmt 0 view .LVU1334
 4980 003e 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
 960:src/xeq.c     **** 			break;
 4981              		.loc 1 960 15 view .LVU1335
 4982 0040 A1F13003 		sub	r3, r1, #48
 960:src/xeq.c     **** 			break;
 4983              		.loc 1 960 6 view .LVU1336
 4984 0044 D9B2     		uxtb	r1, r3
 4985 0046 0929     		cmp	r1, #9
 958:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 206


 4986              		.loc 1 958 20 view .LVU1337
 4987 0048 00F10202 		add	r2, r0, #2
 4988              	.LVL367:
 960:src/xeq.c     **** 			break;
 4989              		.loc 1 960 3 is_stmt 1 view .LVU1338
 960:src/xeq.c     **** 			break;
 4990              		.loc 1 960 6 is_stmt 0 view .LVU1339
 4991 004c E5D9     		bls	.L410
 4992              	.LVL368:
 4993              	.L404:
 960:src/xeq.c     **** 			break;
 4994              		.loc 1 960 6 view .LVU1340
 4995 004e 0020     		movs	r0, #0
 4996              	.LBE1592:
 967:src/xeq.c     **** 
 4997              		.loc 1 967 1 view .LVU1341
 4998 0050 5DF8044B 		ldr	r4, [sp], #4
 4999              		.cfi_remember_state
 5000              		.cfi_restore 4
 5001              		.cfi_def_cfa_offset 0
 5002 0054 7047     		bx	lr
 5003              	.LVL369:
 5004              	.L411:
 5005              		.cfi_restore_state
 949:src/xeq.c     **** 		neg = 1;
 5006              		.loc 1 949 3 is_stmt 1 view .LVU1342
 950:src/xeq.c     **** 	} else {
 5007              		.loc 1 950 3 view .LVU1343
 957:src/xeq.c     **** 		const char c = *s++;
 5008              		.loc 1 957 2 view .LVU1344
 5009              	.LBB1593:
 958:src/xeq.c     **** 
 5010              		.loc 1 958 3 view .LVU1345
 958:src/xeq.c     **** 
 5011              		.loc 1 958 14 is_stmt 0 view .LVU1346
 5012 0056 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
 960:src/xeq.c     **** 			break;
 5013              		.loc 1 960 15 view .LVU1347
 5014 0058 A1F13003 		sub	r3, r1, #48
 960:src/xeq.c     **** 			break;
 5015              		.loc 1 960 6 view .LVU1348
 5016 005c D9B2     		uxtb	r1, r3
 5017 005e 0929     		cmp	r1, #9
 958:src/xeq.c     **** 
 5018              		.loc 1 958 20 view .LVU1349
 5019 0060 00F10202 		add	r2, r0, #2
 5020              	.LVL370:
 960:src/xeq.c     **** 			break;
 5021              		.loc 1 960 3 is_stmt 1 view .LVU1350
 960:src/xeq.c     **** 			break;
 5022              		.loc 1 960 6 is_stmt 0 view .LVU1351
 5023 0064 F3D8     		bhi	.L404
 5024              	.LBE1593:
 950:src/xeq.c     **** 	} else {
 5025              		.loc 1 950 7 view .LVU1352
 5026 0066 0124     		movs	r4, #1
 5027 0068 D8E7     		b	.L398
ARM GAS  /tmp/ccjeMhND.s 			page 207


 5028              		.cfi_endproc
 5029              	.LFE80:
 5031 006a 00BF     		.section	.text.digit,"ax",%progbits
 5032              		.align	1
 5033              		.p2align 2,,3
 5034              		.syntax unified
 5035              		.thumb
 5036              		.thumb_func
 5037              		.fpu fpv4-sp-d16
 5039              	digit:
 5040              	.LVL371:
 5041              	.LFB209:
3616:src/xeq.c     **** 	const int intm = is_intmode();
 5042              		.loc 1 3616 35 is_stmt 1 view -0
 5043              		.cfi_startproc
 5044              		@ args = 0, pretend = 0, frame = 0
 5045              		@ frame_needed = 0, uses_anonymous_args = 0
3617:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5046              		.loc 1 3617 2 view .LVU1354
3616:src/xeq.c     **** 	const int intm = is_intmode();
 5047              		.loc 1 3616 35 is_stmt 0 view .LVU1355
 5048 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5049              		.cfi_def_cfa_offset 24
 5050              		.cfi_offset 3, -24
 5051              		.cfi_offset 4, -20
 5052              		.cfi_offset 5, -16
 5053              		.cfi_offset 6, -12
 5054              		.cfi_offset 7, -8
 5055              		.cfi_offset 14, -4
3617:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5056              		.loc 1 3617 19 view .LVU1356
 5057 0002 624E     		ldr	r6, .L465
3620:src/xeq.c     **** 		lim++;
 5058              		.loc 1 3620 13 view .LVU1357
 5059 0004 624C     		ldr	r4, .L465+4
3617:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5060              		.loc 1 3617 19 view .LVU1358
 5061 0006 3368     		ldr	r3, [r6]
3620:src/xeq.c     **** 		lim++;
 5062              		.loc 1 3620 13 view .LVU1359
 5063 0008 94F82020 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
3617:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5064              		.loc 1 3617 19 view .LVU1360
 5065 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 5066              	.LVL372:
3618:src/xeq.c     **** 
 5067              		.loc 1 3618 2 is_stmt 1 view .LVU1361
3620:src/xeq.c     **** 		lim++;
 5068              		.loc 1 3620 2 view .LVU1362
3621:src/xeq.c     **** 	if (intm) {
 5069              		.loc 1 3621 6 is_stmt 0 view .LVU1363
 5070 0010 2D2A     		cmp	r2, #45
 5071 0012 14BF     		ite	ne
 5072 0014 0C27     		movne	r7, #12
 5073 0016 0D27     		moveq	r7, #13
 5074              	.LVL373:
3622:src/xeq.c     **** 		if (c >= int_base()) {
ARM GAS  /tmp/ccjeMhND.s 			page 208


 5075              		.loc 1 3622 2 is_stmt 1 view .LVU1364
3622:src/xeq.c     **** 		if (c >= int_base()) {
 5076              		.loc 1 3622 5 is_stmt 0 view .LVU1365
 5077 0018 DB07     		lsls	r3, r3, #31
 5078              	.LVL374:
3616:src/xeq.c     **** 	const int intm = is_intmode();
 5079              		.loc 1 3616 35 view .LVU1366
 5080 001a 0546     		mov	r5, r0
3622:src/xeq.c     **** 		if (c >= int_base()) {
 5081              		.loc 1 3622 5 view .LVU1367
 5082 001c 73D4     		bmi	.L461
3628:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5083              		.loc 1 3628 3 is_stmt 1 view .LVU1368
3628:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5084              		.loc 1 3628 6 is_stmt 0 view .LVU1369
 5085 001e 0928     		cmp	r0, #9
 5086 0020 00F28680 		bhi	.L416
3633:src/xeq.c     **** 			lim = CMDLINELEN;
 5087              		.loc 1 3633 3 is_stmt 1 view .LVU1370
3633:src/xeq.c     **** 			lim = CMDLINELEN;
 5088              		.loc 1 3633 7 is_stmt 0 view .LVU1371
 5089 0024 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3633:src/xeq.c     **** 			lim = CMDLINELEN;
 5090              		.loc 1 3633 6 view .LVU1372
 5091 0026 002B     		cmp	r3, #0
 5092 0028 5FD0     		beq	.L417
3634:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5093              		.loc 1 3634 4 is_stmt 1 view .LVU1373
 5094              	.LVL375:
3636:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5095              		.loc 1 3636 4 view .LVU1374
3636:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5096              		.loc 1 3636 8 is_stmt 0 view .LVU1375
 5097 002a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3636:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5098              		.loc 1 3636 7 view .LVU1376
 5099 002c 122A     		cmp	r2, #18
 5100 002e 40F29380 		bls	.L442
 5101              	.LBB1604:
3637:src/xeq.c     **** 
 5102              		.loc 1 3637 5 is_stmt 1 view .LVU1377
3639:src/xeq.c     **** 					p++;
 5103              		.loc 1 3639 9 is_stmt 0 view .LVU1378
 5104 0032 E118     		adds	r1, r4, r3
3637:src/xeq.c     **** 
 5105              		.loc 1 3637 11 view .LVU1379
 5106 0034 2133     		adds	r3, r3, #33
3639:src/xeq.c     **** 					p++;
 5107              		.loc 1 3639 8 view .LVU1380
 5108 0036 91F82110 		ldrb	r1, [r1, #33]	@ zero_extendqisi2
3637:src/xeq.c     **** 
 5109              		.loc 1 3637 11 view .LVU1381
 5110 003a 2344     		add	r3, r3, r4
 5111              	.LVL376:
3639:src/xeq.c     **** 					p++;
 5112              		.loc 1 3639 5 is_stmt 1 view .LVU1382
3639:src/xeq.c     **** 					p++;
ARM GAS  /tmp/ccjeMhND.s 			page 209


 5113              		.loc 1 3639 8 is_stmt 0 view .LVU1383
 5114 003c 2D29     		cmp	r1, #45
3640:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5115              		.loc 1 3640 6 is_stmt 1 view .LVU1384
3641:src/xeq.c     **** 					p[0] = p[1];
 5116              		.loc 1 3641 11 is_stmt 0 view .LVU1385
 5117 003e 5549     		ldr	r1, .L465+8
3640:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5118              		.loc 1 3640 7 view .LVU1386
 5119 0040 08BF     		it	eq
 5120 0042 0133     		addeq	r3, r3, #1
 5121              	.LVL377:
3641:src/xeq.c     **** 					p[0] = p[1];
 5122              		.loc 1 3641 11 is_stmt 1 view .LVU1387
 5123 0044 8B42     		cmp	r3, r1
 5124 0046 05D2     		bcs	.L420
 5125              	.LVL378:
 5126              	.L421:
3642:src/xeq.c     **** 					p++;
 5127              		.loc 1 3642 6 view .LVU1388
3642:src/xeq.c     **** 					p++;
 5128              		.loc 1 3642 11 is_stmt 0 view .LVU1389
 5129 0048 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5130 004a 03F8012B 		strb	r2, [r3], #1
 5131              	.LVL379:
3643:src/xeq.c     **** 				}
 5132              		.loc 1 3643 6 is_stmt 1 view .LVU1390
3641:src/xeq.c     **** 					p[0] = p[1];
 5133              		.loc 1 3641 11 view .LVU1391
 5134 004e 8B42     		cmp	r3, r1
 5135 0050 FAD1     		bne	.L421
 5136 0052 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5137              	.L420:
3645:src/xeq.c     **** 			}
 5138              		.loc 1 3645 5 view .LVU1392
3645:src/xeq.c     **** 			}
 5139              		.loc 1 3645 18 is_stmt 0 view .LVU1393
 5140 0054 013A     		subs	r2, r2, #1
 5141 0056 D2B2     		uxtb	r2, r2
 5142              	.LBE1604:
3634:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5143              		.loc 1 3634 8 view .LVU1394
 5144 0058 1323     		movs	r3, #19
 5145              	.LVL380:
3665:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5146              		.loc 1 3665 2 is_stmt 1 view .LVU1395
3665:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5147              		.loc 1 3665 5 is_stmt 0 view .LVU1396
 5148 005a 9342     		cmp	r3, r2
 5149              	.LBB1605:
3645:src/xeq.c     **** 			}
 5150              		.loc 1 3645 18 view .LVU1397
 5151 005c 2277     		strb	r2, [r4, #28]
 5152              	.LBE1605:
3665:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5153              		.loc 1 3665 5 view .LVU1398
 5154 005e 4DDD     		ble	.L439
ARM GAS  /tmp/ccjeMhND.s 			page 210


 5155              	.LVL381:
 5156              	.L425:
3677:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5157              		.loc 1 3677 3 is_stmt 1 view .LVU1399
3677:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5158              		.loc 1 3677 6 is_stmt 0 view .LVU1400
 5159 0060 002D     		cmp	r5, #0
 5160 0062 6AD1     		bne	.L427
3677:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5161              		.loc 1 3677 17 discriminator 1 view .LVU1401
 5162 0064 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3677:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5163              		.loc 1 3677 14 discriminator 1 view .LVU1402
 5164 0066 002B     		cmp	r3, #0
 5165 0068 7BD0     		beq	.L428
3678:src/xeq.c     **** 				return;
 5166              		.loc 1 3678 4 is_stmt 1 view .LVU1403
3678:src/xeq.c     **** 				return;
 5167              		.loc 1 3678 15 is_stmt 0 view .LVU1404
 5168 006a A018     		adds	r0, r4, r2
 5169 006c C17F     		ldrb	r1, [r0, #31]	@ zero_extendqisi2
3678:src/xeq.c     **** 				return;
 5170              		.loc 1 3678 7 view .LVU1405
 5171 006e 4529     		cmp	r1, #69
 5172 0070 5DD0     		beq	.L412
3684:src/xeq.c     **** 				return;
 5173              		.loc 1 3684 4 is_stmt 1 view .LVU1406
3684:src/xeq.c     **** 				return;
 5174              		.loc 1 3684 7 is_stmt 0 view .LVU1407
 5175 0072 2D29     		cmp	r1, #45
 5176 0074 5BD0     		beq	.L412
3689:src/xeq.c     **** 
 5177              		.loc 1 3689 3 is_stmt 1 view .LVU1408
 5178              	.LVL382:
 5179              	.LBB1606:
 5180              	.LBI1606:
2432:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5181              		.loc 1 2432 13 view .LVU1409
 5182              	.LBB1607:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5183              		.loc 1 2433 2 view .LVU1410
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5184              		.loc 1 2433 23 is_stmt 0 view .LVU1411
 5185 0076 0132     		adds	r2, r2, #1
 5186 0078 D2B2     		uxtb	r2, r2
2434:src/xeq.c     **** }
 5187              		.loc 1 2434 25 view .LVU1412
 5188 007a A118     		adds	r1, r4, r2
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5189              		.loc 1 2433 27 view .LVU1413
 5190 007c 3027     		movs	r7, #48
 5191 007e 80F82070 		strb	r7, [r0, #32]
2434:src/xeq.c     **** }
 5192              		.loc 1 2434 2 is_stmt 1 view .LVU1414
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5193              		.loc 1 2433 23 is_stmt 0 view .LVU1415
 5194 0082 2277     		strb	r2, [r4, #28]
ARM GAS  /tmp/ccjeMhND.s 			page 211


2434:src/xeq.c     **** }
 5195              		.loc 1 2434 25 view .LVU1416
 5196 0084 81F82050 		strb	r5, [r1, #32]
 5197              	.LVL383:
2434:src/xeq.c     **** }
 5198              		.loc 1 2434 25 view .LVU1417
 5199              	.LBE1607:
 5200              	.LBE1606:
3691:src/xeq.c     **** 			exponent_adjusted(1);
 5201              		.loc 1 3691 3 is_stmt 1 view .LVU1418
 5202              	.L440:
3692:src/xeq.c     **** 	}
 5203              		.loc 1 3692 4 view .LVU1419
 5204              	.LBB1612:
 5205              	.LBI1612:
2441:src/xeq.c     **** {
 5206              		.loc 1 2441 13 view .LVU1420
 5207              	.LBB1613:
2443:src/xeq.c     **** 	int i;
 5208              		.loc 1 2443 2 view .LVU1421
 5209              	.LBB1614:
 5210              	.LBI1614:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 5211              		.loc 1 932 5 view .LVU1422
 5212              	.LBB1615:
 933:src/xeq.c     **** }
 5213              		.loc 1 933 2 view .LVU1423
 933:src/xeq.c     **** }
 5214              		.loc 1 933 2 is_stmt 0 view .LVU1424
 5215              	.LBE1615:
 5216              	.LBE1614:
2444:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
 5217              		.loc 1 2444 2 is_stmt 1 view .LVU1425
2448:src/xeq.c     **** #endif
 5218              		.loc 1 2448 2 view .LVU1426
2453:src/xeq.c     **** #endif
 5219              		.loc 1 2453 2 view .LVU1427
2458:src/xeq.c     **** #endif
 5220              		.loc 1 2458 2 view .LVU1428
2463:src/xeq.c     **** #endif
 5221              		.loc 1 2463 2 view .LVU1429
2468:src/xeq.c     **** #endif
 5222              		.loc 1 2468 2 view .LVU1430
2473:src/xeq.c     **** #endif
 5223              		.loc 1 2473 2 view .LVU1431
2478:src/xeq.c     **** #endif
 5224              		.loc 1 2478 2 view .LVU1432
2483:src/xeq.c     **** #endif
 5225              		.loc 1 2483 2 view .LVU1433
2488:src/xeq.c     **** #endif
 5226              		.loc 1 2488 2 view .LVU1434
2493:src/xeq.c     **** #endif
 5227              		.loc 1 2493 2 view .LVU1435
2495:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
 5228              		.loc 1 2495 2 view .LVU1436
2496:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
 5229              		.loc 1 2496 2 view .LVU1437
ARM GAS  /tmp/ccjeMhND.s 			page 212


2497:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
 5230              		.loc 1 2497 2 view .LVU1438
2498:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
 5231              		.loc 1 2498 2 view .LVU1439
2499:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
 5232              		.loc 1 2499 2 view .LVU1440
2500:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
 5233              		.loc 1 2500 2 view .LVU1441
2501:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
 5234              		.loc 1 2501 2 view .LVU1442
2502:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
 5235              		.loc 1 2502 2 view .LVU1443
2503:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
 5236              		.loc 1 2503 2 view .LVU1444
2504:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 5237              		.loc 1 2504 2 view .LVU1445
2509:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex + 1];
 5238              		.loc 1 2509 2 view .LVU1446
2510:src/xeq.c     **** #endif
 5239              		.loc 1 2510 2 view .LVU1447
 5240              	.LBB1618:
 5241              	.LBB1616:
 933:src/xeq.c     **** }
 5242              		.loc 1 933 24 is_stmt 0 view .LVU1448
 5243 0088 3268     		ldr	r2, [r6]
 5244 008a B2F8E817 		ldrh	r1, [r2, #2024]
 5245              	.LBE1616:
 5246              	.LBE1618:
2510:src/xeq.c     **** #endif
 5247              		.loc 1 2510 8 view .LVU1449
 5248 008e 03F12105 		add	r5, r3, #33
 5249              	.LBB1619:
 5250              	.LBB1617:
 933:src/xeq.c     **** }
 5251              		.loc 1 933 24 view .LVU1450
 5252 0092 44F20102 		movw	r2, #16385
 5253              	.LBE1617:
 5254              	.LBE1619:
2510:src/xeq.c     **** #endif
 5255              		.loc 1 2510 32 view .LVU1451
 5256 0096 0133     		adds	r3, r3, #1
2534:src/xeq.c     **** 		emax = 999;
 5257              		.loc 1 2534 5 view .LVU1452
 5258 0098 0A40     		ands	r2, r2, r1
2972:src/xeq.c     **** 		p++;
 5259              		.loc 1 2972 6 view .LVU1453
 5260 009a 2344     		add	r3, r3, r4
2534:src/xeq.c     **** 		emax = 999;
 5261              		.loc 1 2534 5 view .LVU1454
 5262 009c B2F5804F 		cmp	r2, #16384
2972:src/xeq.c     **** 		p++;
 5263              		.loc 1 2972 5 view .LVU1455
 5264 00a0 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
2510:src/xeq.c     **** #endif
 5265              		.loc 1 2510 8 view .LVU1456
 5266 00a4 2544     		add	r5, r5, r4
 5267              	.LVL384:
ARM GAS  /tmp/ccjeMhND.s 			page 213


2526:src/xeq.c     **** #endif
 5268              		.loc 1 2526 2 is_stmt 1 view .LVU1457
2531:src/xeq.c     **** 
 5269              		.loc 1 2531 2 view .LVU1458
2534:src/xeq.c     **** 		emax = 999;
 5270              		.loc 1 2534 2 view .LVU1459
2534:src/xeq.c     **** 		emax = 999;
 5271              		.loc 1 2534 5 is_stmt 0 view .LVU1460
 5272 00a6 6BD0     		beq	.L431
 5273              	.LBB1620:
2538:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
 5274              		.loc 1 2538 3 is_stmt 1 view .LVU1461
2539:src/xeq.c     **** 
 5275              		.loc 1 2539 3 view .LVU1462
 5276              	.LVL385:
2541:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
 5277              		.loc 1 2541 3 view .LVU1463
2627:src/xeq.c     **** 			// Double precision mode
 5278              		.loc 1 2627 3 view .LVU1464
2686:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 3) {
 5279              		.loc 1 2686 3 view .LVU1465
2705:src/xeq.c     **** 				// Don't allow denormal numbers
 5280              		.loc 1 2705 4 view .LVU1466
2709:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
 5281              		.loc 1 2709 9 view .LVU1467
2713:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
 5282              		.loc 1 2713 9 view .LVU1468
2719:src/xeq.c     **** 			}
 5283              		.loc 1 2719 5 view .LVU1469
2723:src/xeq.c     **** 			if (pos_type_ds >= 1 && pos_type_ds <= 3)
 5284              		.loc 1 2723 3 view .LVU1470
2732:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
 5285              		.loc 1 2732 4 view .LVU1471
2737:src/xeq.c     **** 		}
 5286              		.loc 1 2737 5 view .LVU1472
 5287              	.LDL1:
2741:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
 5288              		.loc 1 2741 3 view .LVU1473
2757:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
 5289              		.loc 1 2757 8 view .LVU1474
2774:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 9) {
 5290              		.loc 1 2774 8 view .LVU1475
2789:src/xeq.c     **** 				if (neg_type_dc % 3 == 2) { // low limit
 5291              		.loc 1 2789 4 view .LVU1476
2799:src/xeq.c     **** 				emax_minus = 0;
 5292              		.loc 1 2799 4 view .LVU1477
2803:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
 5293              		.loc 1 2803 3 view .LVU1478
2817:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
 5294              		.loc 1 2817 8 view .LVU1479
2832:src/xeq.c     **** 			if (pos_type_ds == 2) { // low limit
 5295              		.loc 1 2832 8 view .LVU1480
2845:src/xeq.c     **** 				if (emax_plus < pos_lim_dc)
 5296              		.loc 1 2845 4 view .LVU1481
2849:src/xeq.c     **** 				if (emax_plus > pos_lim_dc)
 5297              		.loc 1 2849 9 view .LVU1482
2853:src/xeq.c     **** 				emax_plus = 0;
ARM GAS  /tmp/ccjeMhND.s 			page 214


 5298              		.loc 1 2853 4 view .LVU1483
2857:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
 5299              		.loc 1 2857 3 view .LVU1484
2883:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
 5300              		.loc 1 2883 8 view .LVU1485
2909:src/xeq.c     **** 			if (exp_chs_ds == 0) {
 5301              		.loc 1 2909 8 view .LVU1486
2938:src/xeq.c     **** 				// Limit exponents so sign change is always legal
 5302              		.loc 1 2938 4 view .LVU1487
2945:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
 5303              		.loc 1 2945 9 view .LVU1488
2953:src/xeq.c     **** 					return;
 5304              		.loc 1 2953 5 view .LVU1489
2958:src/xeq.c     **** #endif
 5305              		.loc 1 2958 5 view .LVU1490
2958:src/xeq.c     **** #endif
 5306              		.loc 1 2958 8 is_stmt 0 view .LVU1491
 5307 00a8 2D2B     		cmp	r3, #45
 5308 00aa 65D0     		beq	.L443
2962:src/xeq.c     **** 			}
 5309              		.loc 1 2962 11 view .LVU1492
 5310 00ac 4FF4C076 		mov	r6, #384
 5311              	.LVL386:
 5312              	.L435:
2962:src/xeq.c     **** 			}
 5313              		.loc 1 2962 11 view .LVU1493
 5314              	.LBE1620:
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5315              		.loc 1 2979 8 is_stmt 1 view .LVU1494
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5316              		.loc 1 2979 9 is_stmt 0 view .LVU1495
 5317 00b0 2846     		mov	r0, r5
 5318 00b2 FFF7FEFF 		bl	s_to_i
 5319              	.LVL387:
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5320              		.loc 1 2979 8 view .LVU1496
 5321 00b6 B042     		cmp	r0, r6
2980:src/xeq.c     **** 			p[i] = p[i + 1];
 5322              		.loc 1 2980 3 view .LVU1497
 5323 00b8 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5324              		.loc 1 2979 8 view .LVU1498
 5325 00ba 10DC     		bgt	.L436
 5326              	.L462:
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5327              		.loc 1 2979 26 view .LVU1499
 5328 00bc 302B     		cmp	r3, #48
 5329 00be 36D1     		bne	.L412
 5330              	.L446:
2980:src/xeq.c     **** 			p[i] = p[i + 1];
 5331              		.loc 1 2980 3 view .LVU1500
 5332 00c0 2B46     		mov	r3, r5
 5333              	.L434:
2981:src/xeq.c     **** 		CmdLineLength--;
 5334              		.loc 1 2981 4 is_stmt 1 view .LVU1501
2981:src/xeq.c     **** 		CmdLineLength--;
 5335              		.loc 1 2981 9 is_stmt 0 view .LVU1502
ARM GAS  /tmp/ccjeMhND.s 			page 215


 5336 00c2 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5337 00c4 1A70     		strb	r2, [r3]
2980:src/xeq.c     **** 			p[i] = p[i + 1];
 5338              		.loc 1 2980 29 is_stmt 1 view .LVU1503
2980:src/xeq.c     **** 			p[i] = p[i + 1];
 5339              		.loc 1 2980 15 view .LVU1504
2980:src/xeq.c     **** 			p[i] = p[i + 1];
 5340              		.loc 1 2980 3 is_stmt 0 view .LVU1505
 5341 00c6 0133     		adds	r3, r3, #1
 5342 00c8 002A     		cmp	r2, #0
 5343 00ca FAD1     		bne	.L434
2982:src/xeq.c     **** 	}
 5344              		.loc 1 2982 3 is_stmt 1 view .LVU1506
2982:src/xeq.c     **** 	}
 5345              		.loc 1 2982 16 is_stmt 0 view .LVU1507
 5346 00cc 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 5347 00ce 013B     		subs	r3, r3, #1
 5348 00d0 2377     		strb	r3, [r4, #28]
 5349              	.L463:
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5350              		.loc 1 2979 8 is_stmt 1 view .LVU1508
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5351              		.loc 1 2979 9 is_stmt 0 view .LVU1509
 5352 00d2 2846     		mov	r0, r5
 5353 00d4 FFF7FEFF 		bl	s_to_i
 5354              	.LVL388:
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5355              		.loc 1 2979 8 view .LVU1510
 5356 00d8 B042     		cmp	r0, r6
2980:src/xeq.c     **** 			p[i] = p[i + 1];
 5357              		.loc 1 2980 3 view .LVU1511
 5358 00da 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5359              		.loc 1 2979 8 view .LVU1512
 5360 00dc EEDD     		ble	.L462
 5361              	.L436:
 5362              	.LVL389:
2980:src/xeq.c     **** 			p[i] = p[i + 1];
 5363              		.loc 1 2980 15 is_stmt 1 view .LVU1513
2980:src/xeq.c     **** 			p[i] = p[i + 1];
 5364              		.loc 1 2980 3 is_stmt 0 view .LVU1514
 5365 00de 002B     		cmp	r3, #0
 5366 00e0 EED1     		bne	.L446
2982:src/xeq.c     **** 	}
 5367              		.loc 1 2982 3 is_stmt 1 view .LVU1515
2982:src/xeq.c     **** 	}
 5368              		.loc 1 2982 16 is_stmt 0 view .LVU1516
 5369 00e2 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 5370 00e4 013B     		subs	r3, r3, #1
 5371 00e6 2377     		strb	r3, [r4, #28]
 5372 00e8 F3E7     		b	.L463
 5373              	.LVL390:
 5374              	.L417:
2982:src/xeq.c     **** 	}
 5375              		.loc 1 2982 16 view .LVU1517
 5376              	.LBE1613:
 5377              	.LBE1612:
ARM GAS  /tmp/ccjeMhND.s 			page 216


3650:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5378              		.loc 1 3650 4 is_stmt 1 view .LVU1518
3650:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5379              		.loc 1 3650 11 is_stmt 0 view .LVU1519
 5380 00ea A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 5381              	.LVL391:
3652:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5382              		.loc 1 3652 4 is_stmt 1 view .LVU1520
3652:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5383              		.loc 1 3652 7 is_stmt 0 view .LVU1521
 5384 00ec 012B     		cmp	r3, #1
 5385 00ee 35D9     		bls	.L464
3655:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5386              		.loc 1 3655 5 is_stmt 1 view .LVU1522
3655:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5387              		.loc 1 3655 22 is_stmt 0 view .LVU1523
 5388 00f0 2D2A     		cmp	r2, #45
 5389 00f2 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5390 00f4 30D0     		beq	.L442
 5391 00f6 1223     		movs	r3, #18
 5392              	.LVL392:
 5393              	.L418:
3665:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5394              		.loc 1 3665 2 is_stmt 1 view .LVU1524
3665:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5395              		.loc 1 3665 5 is_stmt 0 view .LVU1525
 5396 00f8 9342     		cmp	r3, r2
 5397 00fa B1DC     		bgt	.L425
 5398              	.LVL393:
 5399              	.L439:
3667:src/xeq.c     **** 		return;
 5400              		.loc 1 3667 3 is_stmt 1 view .LVU1526
3694:src/xeq.c     **** 
 5401              		.loc 1 3694 1 is_stmt 0 view .LVU1527
 5402 00fc BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5403              		.cfi_remember_state
 5404              		.cfi_restore 14
 5405              		.cfi_restore 7
 5406              		.cfi_restore 6
 5407              		.cfi_restore 5
 5408              		.cfi_restore 4
 5409              		.cfi_restore 3
 5410              		.cfi_def_cfa_offset 0
 5411              	.LVL394:
3667:src/xeq.c     **** 		return;
 5412              		.loc 1 3667 3 view .LVU1528
 5413 0100 0A20     		movs	r0, #10
 5414 0102 FFF7FEBF 		b	report_warn
 5415              	.LVL395:
 5416              	.L461:
 5417              		.cfi_restore_state
3623:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5418              		.loc 1 3623 3 is_stmt 1 view .LVU1529
3623:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5419              		.loc 1 3623 12 is_stmt 0 view .LVU1530
 5420 0106 FFF7FEFF 		bl	int_base
 5421              	.LVL396:
ARM GAS  /tmp/ccjeMhND.s 			page 217


3623:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5422              		.loc 1 3623 6 view .LVU1531
 5423 010a A842     		cmp	r0, r5
 5424 010c 10D9     		bls	.L416
3665:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5425              		.loc 1 3665 2 is_stmt 1 view .LVU1532
3665:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5426              		.loc 1 3665 6 is_stmt 0 view .LVU1533
 5427 010e 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3665:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5428              		.loc 1 3665 5 view .LVU1534
 5429 0110 BA42     		cmp	r2, r7
 5430 0112 F3DA     		bge	.L439
3671:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5431              		.loc 1 3671 2 is_stmt 1 view .LVU1535
3671:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5432              		.loc 1 3671 5 is_stmt 0 view .LVU1536
 5433 0114 092D     		cmp	r5, #9
 5434 0116 A3D9     		bls	.L425
3672:src/xeq.c     **** 	else {
 5435              		.loc 1 3672 3 is_stmt 1 view .LVU1537
 5436              	.LVL397:
 5437              	.LBB1623:
 5438              	.LBI1623:
2432:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5439              		.loc 1 2432 13 view .LVU1538
 5440              	.LBB1624:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5441              		.loc 1 2433 2 view .LVU1539
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5442              		.loc 1 2433 23 is_stmt 0 view .LVU1540
 5443 0118 531C     		adds	r3, r2, #1
 5444 011a DBB2     		uxtb	r3, r3
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5445              		.loc 1 2433 27 view .LVU1541
 5446 011c 2244     		add	r2, r2, r4
2434:src/xeq.c     **** }
 5447              		.loc 1 2434 25 view .LVU1542
 5448 011e E118     		adds	r1, r4, r3
 5449              	.LBE1624:
 5450              	.LBE1623:
3672:src/xeq.c     **** 	else {
 5451              		.loc 1 3672 3 view .LVU1543
 5452 0120 3735     		adds	r5, r5, #55
 5453              	.LVL398:
 5454              	.LBB1626:
 5455              	.LBB1625:
2434:src/xeq.c     **** }
 5456              		.loc 1 2434 25 view .LVU1544
 5457 0122 0026     		movs	r6, #0
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5458              		.loc 1 2433 27 view .LVU1545
 5459 0124 82F82050 		strb	r5, [r2, #32]
2434:src/xeq.c     **** }
 5460              		.loc 1 2434 2 is_stmt 1 view .LVU1546
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5461              		.loc 1 2433 23 is_stmt 0 view .LVU1547
ARM GAS  /tmp/ccjeMhND.s 			page 218


 5462 0128 2377     		strb	r3, [r4, #28]
2434:src/xeq.c     **** }
 5463              		.loc 1 2434 25 view .LVU1548
 5464 012a 81F82060 		strb	r6, [r1, #32]
 5465              	.LVL399:
 5466              	.L412:
2434:src/xeq.c     **** }
 5467              		.loc 1 2434 25 view .LVU1549
 5468              	.LBE1625:
 5469              	.LBE1626:
3694:src/xeq.c     **** 
 5470              		.loc 1 3694 1 view .LVU1550
 5471 012e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5472              	.LVL400:
 5473              	.L416:
3624:src/xeq.c     **** 			return;
 5474              		.loc 1 3624 4 is_stmt 1 view .LVU1551
3694:src/xeq.c     **** 
 5475              		.loc 1 3694 1 is_stmt 0 view .LVU1552
 5476 0130 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5477              		.cfi_remember_state
 5478              		.cfi_restore 14
 5479              		.cfi_restore 7
 5480              		.cfi_restore 6
 5481              		.cfi_restore 5
 5482              		.cfi_restore 4
 5483              		.cfi_restore 3
 5484              		.cfi_def_cfa_offset 0
 5485              	.LVL401:
3624:src/xeq.c     **** 			return;
 5486              		.loc 1 3624 4 view .LVU1553
 5487 0134 0920     		movs	r0, #9
 5488 0136 FFF7FEBF 		b	report_warn
 5489              	.LVL402:
 5490              	.L427:
 5491              		.cfi_restore_state
3689:src/xeq.c     **** 
 5492              		.loc 1 3689 3 is_stmt 1 view .LVU1554
 5493              	.LBB1627:
2432:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5494              		.loc 1 2432 13 view .LVU1555
 5495              	.LBB1608:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5496              		.loc 1 2433 2 view .LVU1556
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5497              		.loc 1 2433 23 is_stmt 0 view .LVU1557
 5498 013a 511C     		adds	r1, r2, #1
 5499 013c C9B2     		uxtb	r1, r1
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5500              		.loc 1 2433 27 view .LVU1558
 5501 013e 2244     		add	r2, r2, r4
2434:src/xeq.c     **** }
 5502              		.loc 1 2434 25 view .LVU1559
 5503 0140 6718     		adds	r7, r4, r1
 5504              	.LBE1608:
 5505              	.LBE1627:
3689:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 219


 5506              		.loc 1 3689 3 view .LVU1560
 5507 0142 3035     		adds	r5, r5, #48
 5508              	.LVL403:
3691:src/xeq.c     **** 			exponent_adjusted(1);
 5509              		.loc 1 3691 7 view .LVU1561
 5510 0144 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 5511              	.LBB1628:
 5512              	.LBB1609:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5513              		.loc 1 2433 27 view .LVU1562
 5514 0146 82F82050 		strb	r5, [r2, #32]
2434:src/xeq.c     **** }
 5515              		.loc 1 2434 2 is_stmt 1 view .LVU1563
2434:src/xeq.c     **** }
 5516              		.loc 1 2434 25 is_stmt 0 view .LVU1564
 5517 014a 0022     		movs	r2, #0
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5518              		.loc 1 2433 23 view .LVU1565
 5519 014c 2177     		strb	r1, [r4, #28]
2434:src/xeq.c     **** }
 5520              		.loc 1 2434 25 view .LVU1566
 5521 014e 87F82020 		strb	r2, [r7, #32]
2434:src/xeq.c     **** }
 5522              		.loc 1 2434 25 view .LVU1567
 5523              	.LBE1609:
 5524              	.LBE1628:
3691:src/xeq.c     **** 			exponent_adjusted(1);
 5525              		.loc 1 3691 3 is_stmt 1 view .LVU1568
3691:src/xeq.c     **** 			exponent_adjusted(1);
 5526              		.loc 1 3691 6 is_stmt 0 view .LVU1569
 5527 0152 002B     		cmp	r3, #0
 5528 0154 98D1     		bne	.L440
3694:src/xeq.c     **** 
 5529              		.loc 1 3694 1 view .LVU1570
 5530 0156 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5531              	.LVL404:
 5532              	.L442:
3634:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5533              		.loc 1 3634 8 view .LVU1571
 5534 0158 1323     		movs	r3, #19
 5535 015a CDE7     		b	.L418
 5536              	.LVL405:
 5537              	.L464:
3634:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5538              		.loc 1 3634 8 view .LVU1572
 5539 015c 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3650:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5540              		.loc 1 3650 8 view .LVU1573
 5541 015e 3B44     		add	r3, r3, r7
 5542              	.LVL406:
3650:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5543              		.loc 1 3650 8 view .LVU1574
 5544 0160 CAE7     		b	.L418
 5545              	.LVL407:
 5546              	.L428:
3689:src/xeq.c     **** 
 5547              		.loc 1 3689 3 is_stmt 1 view .LVU1575
ARM GAS  /tmp/ccjeMhND.s 			page 220


 5548              	.LBB1629:
2432:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5549              		.loc 1 2432 13 view .LVU1576
 5550              	.LBB1610:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5551              		.loc 1 2433 2 view .LVU1577
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5552              		.loc 1 2433 23 is_stmt 0 view .LVU1578
 5553 0162 531C     		adds	r3, r2, #1
 5554 0164 DBB2     		uxtb	r3, r3
2434:src/xeq.c     **** }
 5555              		.loc 1 2434 25 view .LVU1579
 5556 0166 E118     		adds	r1, r4, r3
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5557              		.loc 1 2433 27 view .LVU1580
 5558 0168 2244     		add	r2, r2, r4
 5559 016a 3020     		movs	r0, #48
 5560 016c 82F82000 		strb	r0, [r2, #32]
2434:src/xeq.c     **** }
 5561              		.loc 1 2434 2 is_stmt 1 view .LVU1581
2434:src/xeq.c     **** }
 5562              		.loc 1 2434 25 is_stmt 0 view .LVU1582
 5563 0170 81F82050 		strb	r5, [r1, #32]
 5564              	.LVL408:
2434:src/xeq.c     **** }
 5565              		.loc 1 2434 25 view .LVU1583
 5566              	.LBE1610:
 5567              	.LBE1629:
3691:src/xeq.c     **** 			exponent_adjusted(1);
 5568              		.loc 1 3691 3 is_stmt 1 view .LVU1584
 5569              	.LBB1630:
 5570              	.LBB1611:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5571              		.loc 1 2433 23 is_stmt 0 view .LVU1585
 5572 0174 2377     		strb	r3, [r4, #28]
 5573              	.LBE1611:
 5574              	.LBE1630:
3694:src/xeq.c     **** 
 5575              		.loc 1 3694 1 view .LVU1586
 5576 0176 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5577              	.LVL409:
 5578              	.L443:
 5579              	.LBB1631:
 5580              	.LBB1622:
 5581              	.LBB1621:
2960:src/xeq.c     **** 				else
 5582              		.loc 1 2960 11 view .LVU1587
 5583 0178 40F27F16 		movw	r6, #383
 5584              	.LVL410:
 5585              	.L432:
2960:src/xeq.c     **** 				else
 5586              		.loc 1 2960 11 view .LVU1588
 5587              	.LBE1621:
2973:src/xeq.c     **** #  endif
 5588              		.loc 1 2973 3 is_stmt 1 view .LVU1589
2973:src/xeq.c     **** #  endif
 5589              		.loc 1 2973 4 is_stmt 0 view .LVU1590
ARM GAS  /tmp/ccjeMhND.s 			page 221


 5590 017c 0135     		adds	r5, r5, #1
 5591              	.LVL411:
2973:src/xeq.c     **** #  endif
 5592              		.loc 1 2973 4 view .LVU1591
 5593 017e 97E7     		b	.L435
 5594              	.LVL412:
 5595              	.L431:
2972:src/xeq.c     **** 		p++;
 5596              		.loc 1 2972 2 is_stmt 1 view .LVU1592
2972:src/xeq.c     **** 		p++;
 5597              		.loc 1 2972 5 is_stmt 0 view .LVU1593
 5598 0180 2D2B     		cmp	r3, #45
2535:src/xeq.c     **** 	}
 5599              		.loc 1 2535 8 view .LVU1594
 5600 0182 40F2E736 		movw	r6, #999
 5601              	.LVL413:
2972:src/xeq.c     **** 		p++;
 5602              		.loc 1 2972 5 view .LVU1595
 5603 0186 93D1     		bne	.L435
 5604 0188 F8E7     		b	.L432
 5605              	.L466:
 5606 018a 00BF     		.align	2
 5607              	.L465:
 5608 018c 00000000 		.word	main_ram
 5609 0190 00000000 		.word	StateWhileOn
 5610 0194 33000000 		.word	StateWhileOn+51
 5611              	.LBE1622:
 5612              	.LBE1631:
 5613              		.cfi_endproc
 5614              	.LFE209:
 5616              		.section	.text.s_to_ull,"ax",%progbits
 5617              		.align	1
 5618              		.p2align 2,,3
 5619              		.global	s_to_ull
 5620              		.syntax unified
 5621              		.thumb
 5622              		.thumb_func
 5623              		.fpu fpv4-sp-d16
 5625              	s_to_ull:
 5626              	.LVL414:
 5627              	.LFB81:
 971:src/xeq.c     **** 	unsigned long long int x = 0;
 5628              		.loc 1 971 67 is_stmt 1 view -0
 5629              		.cfi_startproc
 5630              		@ args = 0, pretend = 0, frame = 0
 5631              		@ frame_needed = 0, uses_anonymous_args = 0
 5632              		@ link register save eliminated.
 972:src/xeq.c     **** 
 5633              		.loc 1 972 2 view .LVU1597
 971:src/xeq.c     **** 	unsigned long long int x = 0;
 5634              		.loc 1 971 67 is_stmt 0 view .LVU1598
 5635 0000 F0B4     		push	{r4, r5, r6, r7}
 5636              		.cfi_def_cfa_offset 16
 5637              		.cfi_offset 4, -16
 5638              		.cfi_offset 5, -12
 5639              		.cfi_offset 6, -8
 5640              		.cfi_offset 7, -4
ARM GAS  /tmp/ccjeMhND.s 			page 222


 972:src/xeq.c     **** 
 5641              		.loc 1 972 25 view .LVU1599
 5642 0002 0026     		movs	r6, #0
 5643 0004 0027     		movs	r7, #0
 5644 0006 02E0     		b	.L471
 5645              	.LVL415:
 5646              	.L473:
 5647              	.LBB1632:
 986:src/xeq.c     **** 	}
 5648              		.loc 1 986 5 view .LVU1600
 5649 0008 E618     		adds	r6, r4, r3
 5650              	.LVL416:
 986:src/xeq.c     **** 	}
 5651              		.loc 1 986 5 view .LVU1601
 5652 000a 45F10007 		adc	r7, r5, #0
 5653              	.LVL417:
 986:src/xeq.c     **** 	}
 5654              		.loc 1 986 5 view .LVU1602
 5655              	.LBE1632:
 974:src/xeq.c     **** 		unsigned int n;
 5656              		.loc 1 974 8 is_stmt 1 view .LVU1603
 5657              	.L471:
 974:src/xeq.c     **** 		unsigned int n;
 5658              		.loc 1 974 2 view .LVU1604
 5659              	.LBB1633:
 975:src/xeq.c     **** 		const char c = *s++;
 5660              		.loc 1 975 3 view .LVU1605
 976:src/xeq.c     **** 
 5661              		.loc 1 976 3 view .LVU1606
 979:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 5662              		.loc 1 979 4 view .LVU1607
 980:src/xeq.c     **** 			n = c - 'A' + 10;
 5663              		.loc 1 980 8 view .LVU1608
 981:src/xeq.c     **** 		else
 5664              		.loc 1 981 4 view .LVU1609
 976:src/xeq.c     **** 
 5665              		.loc 1 976 14 is_stmt 0 view .LVU1610
 5666 000e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5667              	.LVL418:
 978:src/xeq.c     **** 			n = c - '0';
 5668              		.loc 1 978 3 is_stmt 1 view .LVU1611
 978:src/xeq.c     **** 			n = c - '0';
 5669              		.loc 1 978 16 is_stmt 0 view .LVU1612
 5670 0012 A2F13003 		sub	r3, r2, #48
 978:src/xeq.c     **** 			n = c - '0';
 5671              		.loc 1 978 6 view .LVU1613
 5672 0016 DCB2     		uxtb	r4, r3
 5673 0018 092C     		cmp	r4, #9
 980:src/xeq.c     **** 			n = c - 'A' + 10;
 5674              		.loc 1 980 11 view .LVU1614
 5675 001a A2F14105 		sub	r5, r2, #65
 978:src/xeq.c     **** 			n = c - '0';
 5676              		.loc 1 978 6 view .LVU1615
 5677 001e 03D9     		bls	.L469
 980:src/xeq.c     **** 			n = c - 'A' + 10;
 5678              		.loc 1 980 11 view .LVU1616
 5679 0020 052D     		cmp	r5, #5
ARM GAS  /tmp/ccjeMhND.s 			page 223


 5680 0022 07D8     		bhi	.L467
 981:src/xeq.c     **** 		else
 5681              		.loc 1 981 16 view .LVU1617
 5682 0024 A2F13703 		sub	r3, r2, #55
 5683              	.LVL419:
 5684              	.L469:
 984:src/xeq.c     **** 			break;
 5685              		.loc 1 984 3 is_stmt 1 view .LVU1618
 986:src/xeq.c     **** 	}
 5686              		.loc 1 986 3 view .LVU1619
 986:src/xeq.c     **** 	}
 5687              		.loc 1 986 9 is_stmt 0 view .LVU1620
 5688 0028 A1FB0645 		umull	r4, r5, r1, r6
 984:src/xeq.c     **** 			break;
 5689              		.loc 1 984 6 view .LVU1621
 5690 002c 8B42     		cmp	r3, r1
 986:src/xeq.c     **** 	}
 5691              		.loc 1 986 9 view .LVU1622
 5692 002e 01FB0755 		mla	r5, r1, r7, r5
 984:src/xeq.c     **** 			break;
 5693              		.loc 1 984 6 view .LVU1623
 5694 0032 E9D3     		bcc	.L473
 5695              	.LVL420:
 5696              	.L467:
 984:src/xeq.c     **** 			break;
 5697              		.loc 1 984 6 view .LVU1624
 5698              	.LBE1633:
 989:src/xeq.c     **** 
 5699              		.loc 1 989 1 view .LVU1625
 5700 0034 3046     		mov	r0, r6
 5701              	.LVL421:
 989:src/xeq.c     **** 
 5702              		.loc 1 989 1 view .LVU1626
 5703 0036 3946     		mov	r1, r7
 5704              	.LVL422:
 989:src/xeq.c     **** 
 5705              		.loc 1 989 1 view .LVU1627
 5706 0038 F0BC     		pop	{r4, r5, r6, r7}
 5707              		.cfi_restore 7
 5708              		.cfi_restore 6
 5709              		.cfi_restore 5
 5710              		.cfi_restore 4
 5711              		.cfi_def_cfa_offset 0
 5712              	.LVL423:
 989:src/xeq.c     **** 
 5713              		.loc 1 989 1 view .LVU1628
 5714 003a 7047     		bx	lr
 5715              		.cfi_endproc
 5716              	.LFE81:
 5718              		.section	.text.get_cmdline,"ax",%progbits
 5719              		.align	1
 5720              		.p2align 2,,3
 5721              		.global	get_cmdline
 5722              		.syntax unified
 5723              		.thumb
 5724              		.thumb_func
 5725              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccjeMhND.s 			page 224


 5727              	get_cmdline:
 5728              	.LFB82:
 991:src/xeq.c     **** 	if (CmdLineLength) {
 5729              		.loc 1 991 31 is_stmt 1 view -0
 5730              		.cfi_startproc
 5731              		@ args = 0, pretend = 0, frame = 0
 5732              		@ frame_needed = 0, uses_anonymous_args = 0
 5733              		@ link register save eliminated.
 992:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5734              		.loc 1 992 2 view .LVU1630
 992:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5735              		.loc 1 992 6 is_stmt 0 view .LVU1631
 5736 0000 044B     		ldr	r3, .L477
 5737 0002 187F     		ldrb	r0, [r3, #28]	@ zero_extendqisi2
 992:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5738              		.loc 1 992 5 view .LVU1632
 5739 0004 28B1     		cbz	r0, .L474
 993:src/xeq.c     **** 		return Cmdline;
 5740              		.loc 1 993 3 is_stmt 1 view .LVU1633
 993:src/xeq.c     **** 		return Cmdline;
 5741              		.loc 1 993 26 is_stmt 0 view .LVU1634
 5742 0006 1A18     		adds	r2, r3, r0
 5743 0008 0021     		movs	r1, #0
 994:src/xeq.c     **** 	}
 5744              		.loc 1 994 10 view .LVU1635
 5745 000a 03F12000 		add	r0, r3, #32
 993:src/xeq.c     **** 		return Cmdline;
 5746              		.loc 1 993 26 view .LVU1636
 5747 000e 82F82010 		strb	r1, [r2, #32]
 994:src/xeq.c     **** 	}
 5748              		.loc 1 994 3 is_stmt 1 view .LVU1637
 5749              	.L474:
 997:src/xeq.c     **** 
 5750              		.loc 1 997 1 is_stmt 0 view .LVU1638
 5751 0012 7047     		bx	lr
 5752              	.L478:
 5753              		.align	2
 5754              	.L477:
 5755 0014 00000000 		.word	StateWhileOn
 5756              		.cfi_endproc
 5757              	.LFE82:
 5759              		.section	.text.is_bad_cmdline,"ax",%progbits
 5760              		.align	1
 5761              		.p2align 2,,3
 5762              		.global	is_bad_cmdline
 5763              		.syntax unified
 5764              		.thumb
 5765              		.thumb_func
 5766              		.fpu fpv4-sp-d16
 5768              	is_bad_cmdline:
 5769              	.LFB83:
1014:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
 5770              		.loc 1 1014 1 is_stmt 1 view -0
 5771              		.cfi_startproc
 5772              		@ args = 0, pretend = 0, frame = 0
 5773              		@ frame_needed = 0, uses_anonymous_args = 0
1016:src/xeq.c     **** 		char *p;
ARM GAS  /tmp/ccjeMhND.s 			page 225


 5774              		.loc 1 1016 2 view .LVU1640
1014:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
 5775              		.loc 1 1014 1 is_stmt 0 view .LVU1641
 5776 0000 10B5     		push	{r4, lr}
 5777              		.cfi_def_cfa_offset 8
 5778              		.cfi_offset 4, -8
 5779              		.cfi_offset 14, -4
1016:src/xeq.c     **** 		char *p;
 5780              		.loc 1 1016 6 view .LVU1642
 5781 0002 0E4C     		ldr	r4, .L487
1016:src/xeq.c     **** 		char *p;
 5782              		.loc 1 1016 5 view .LVU1643
 5783 0004 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 5784 0006 022B     		cmp	r3, #2
 5785 0008 01D0     		beq	.L486
 5786              	.L483:
1035:src/xeq.c     **** }
 5787              		.loc 1 1035 9 view .LVU1644
 5788 000a 0020     		movs	r0, #0
1036:src/xeq.c     **** 
 5789              		.loc 1 1036 1 view .LVU1645
 5790 000c 10BD     		pop	{r4, pc}
 5791              	.L486:
 5792              	.LBB1638:
1017:src/xeq.c     **** 
 5793              		.loc 1 1017 3 is_stmt 1 view .LVU1646
1020:src/xeq.c     **** 		for (;;) {
 5794              		.loc 1 1020 3 view .LVU1647
1020:src/xeq.c     **** 		for (;;) {
 5795              		.loc 1 1020 17 is_stmt 0 view .LVU1648
 5796 000e 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
1020:src/xeq.c     **** 		for (;;) {
 5797              		.loc 1 1020 5 view .LVU1649
 5798 0010 04F12003 		add	r3, r4, #32
 5799 0014 1A44     		add	r2, r2, r3
 5800              	.LVL424:
 5801              	.L481:
1021:src/xeq.c     **** 			p--;
 5802              		.loc 1 1021 3 is_stmt 1 view .LVU1650
1022:src/xeq.c     **** 			if (*p >= '1' && *p <= '9')
 5803              		.loc 1 1022 4 view .LVU1651
1023:src/xeq.c     **** 				return 0;
 5804              		.loc 1 1023 4 view .LVU1652
1025:src/xeq.c     **** 				break;
 5805              		.loc 1 1025 4 view .LVU1653
1023:src/xeq.c     **** 				return 0;
 5806              		.loc 1 1023 8 is_stmt 0 view .LVU1654
 5807 0016 12F8013D 		ldrb	r3, [r2, #-1]!	@ zero_extendqisi2
 5808              	.LVL425:
1023:src/xeq.c     **** 				return 0;
 5809              		.loc 1 1023 7 view .LVU1655
 5810 001a A3F13101 		sub	r1, r3, #49
 5811 001e 0829     		cmp	r1, #8
 5812 0020 F3D9     		bls	.L483
1025:src/xeq.c     **** 				break;
 5813              		.loc 1 1025 7 view .LVU1656
 5814 0022 2E2B     		cmp	r3, #46
ARM GAS  /tmp/ccjeMhND.s 			page 226


 5815 0024 F7D1     		bne	.L481
 5816              	.LBE1638:
 5817              	.LBB1639:
 5818              	.LBI1639:
1013:src/xeq.c     **** {
 5819              		.loc 1 1013 5 is_stmt 1 view .LVU1657
 5820              	.LBB1640:
1029:src/xeq.c     **** 		error_message(ERR_DOMAIN);
 5821              		.loc 1 1029 3 view .LVU1658
 5822 0026 FFF7FEFF 		bl	reset_shift
 5823              	.LVL426:
1030:src/xeq.c     **** 		State2.invalid_disp = 1;
 5824              		.loc 1 1030 3 view .LVU1659
 5825 002a 0120     		movs	r0, #1
 5826 002c FFF7FEFF 		bl	error_message
 5827              	.LVL427:
1031:src/xeq.c     **** 		return 1;
 5828              		.loc 1 1031 3 view .LVU1660
1031:src/xeq.c     **** 		return 1;
 5829              		.loc 1 1031 23 is_stmt 0 view .LVU1661
 5830 0030 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 5831 0032 43F00203 		orr	r3, r3, #2
 5832 0036 E375     		strb	r3, [r4, #23]
1032:src/xeq.c     **** 	}
 5833              		.loc 1 1032 3 is_stmt 1 view .LVU1662
1031:src/xeq.c     **** 		return 1;
 5834              		.loc 1 1031 23 is_stmt 0 view .LVU1663
 5835 0038 0120     		movs	r0, #1
 5836              	.LBE1640:
 5837              	.LBE1639:
1036:src/xeq.c     **** 
 5838              		.loc 1 1036 1 view .LVU1664
 5839 003a 10BD     		pop	{r4, pc}
 5840              	.L488:
 5841              		.align	2
 5842              	.L487:
 5843 003c 00000000 		.word	StateWhileOn
 5844              		.cfi_endproc
 5845              	.LFE83:
 5847              		.section	.text.get_flash_reg_n,"ax",%progbits
 5848              		.align	1
 5849              		.p2align 2,,3
 5850              		.global	get_flash_reg_n
 5851              		.syntax unified
 5852              		.thumb
 5853              		.thumb_func
 5854              		.fpu fpv4-sp-d16
 5856              	get_flash_reg_n:
 5857              	.LVL428:
 5858              	.LFB88:
1199:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 5859              		.loc 1 1199 34 is_stmt 1 view -0
 5860              		.cfi_startproc
 5861              		@ args = 0, pretend = 0, frame = 0
 5862              		@ frame_needed = 0, uses_anonymous_args = 0
 5863              		@ link register save eliminated.
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
ARM GAS  /tmp/ccjeMhND.s 			page 227


 5864              		.loc 1 1200 2 view .LVU1666
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5865              		.loc 1 1200 37 is_stmt 0 view .LVU1667
 5866 0000 064B     		ldr	r3, .L490
 5867 0002 1A68     		ldr	r2, [r3]
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5868              		.loc 1 1200 68 view .LVU1668
 5869 0004 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5870              		.loc 1 1200 37 view .LVU1669
 5871 0008 02F58661 		add	r1, r2, #1072
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5872              		.loc 1 1200 68 view .LVU1670
 5873 000c C3F16403 		rsb	r3, r3, #100
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5874              		.loc 1 1200 22 view .LVU1671
 5875 0010 01EBC301 		add	r1, r1, r3, lsl #3
 5876 0014 02F5EA62 		add	r2, r2, #1872
 5877 0018 FFF7FEBF 		b	reg_address
 5878              	.LVL429:
 5879              	.L491:
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5880              		.loc 1 1200 22 view .LVU1672
 5881              		.align	2
 5882              	.L490:
 5883 001c 00000000 		.word	backup_ram
 5884              		.cfi_endproc
 5885              	.LFE88:
 5887              		.section	.text.get_const,"ax",%progbits
 5888              		.align	1
 5889              		.p2align 2,,3
 5890              		.global	get_const
 5891              		.syntax unified
 5892              		.thumb
 5893              		.thumb_func
 5894              		.fpu fpv4-sp-d16
 5896              	get_const:
 5897              	.LVL430:
 5898              	.LFB89:
1210:src/xeq.c     **** 	static REGISTER result;
 5899              		.loc 1 1210 1 is_stmt 1 view -0
 5900              		.cfi_startproc
 5901              		@ args = 0, pretend = 0, frame = 40
 5902              		@ frame_needed = 0, uses_anonymous_args = 0
1211:src/xeq.c     **** 	const int i = cnsts[index].index;
 5903              		.loc 1 1211 2 view .LVU1674
1212:src/xeq.c     **** 	if (dbl) {
 5904              		.loc 1 1212 2 view .LVU1675
1210:src/xeq.c     **** 	static REGISTER result;
 5905              		.loc 1 1210 1 is_stmt 0 view .LVU1676
 5906 0000 00B5     		push	{lr}
 5907              		.cfi_def_cfa_offset 4
 5908              		.cfi_offset 14, -4
1212:src/xeq.c     **** 	if (dbl) {
 5909              		.loc 1 1212 28 view .LVU1677
 5910 0002 1C4B     		ldr	r3, .L498
 5911 0004 00EB4000 		add	r0, r0, r0, lsl #1
ARM GAS  /tmp/ccjeMhND.s 			page 228


 5912              	.LVL431:
1210:src/xeq.c     **** 	static REGISTER result;
 5913              		.loc 1 1210 1 view .LVU1678
 5914 0008 8BB0     		sub	sp, sp, #44
 5915              		.cfi_def_cfa_offset 48
1212:src/xeq.c     **** 	if (dbl) {
 5916              		.loc 1 1212 28 view .LVU1679
 5917 000a 13F82030 		ldrb	r3, [r3, r0, lsl #2]	@ zero_extendqisi2
 5918              	.LVL432:
1213:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5919              		.loc 1 1213 2 is_stmt 1 view .LVU1680
1213:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5920              		.loc 1 1213 5 is_stmt 0 view .LVU1681
 5921 000e 51B1     		cbz	r1, .L493
1214:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5922              		.loc 1 1214 3 is_stmt 1 view .LVU1682
1214:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5923              		.loc 1 1214 14 is_stmt 0 view .LVU1683
 5924 0010 9A1E     		subs	r2, r3, #2
1214:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5925              		.loc 1 1214 6 view .LVU1684
 5926 0012 7D2A     		cmp	r2, #125
 5927 0014 0FD9     		bls	.L494
1215:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5928              		.loc 1 1215 4 is_stmt 1 view .LVU1685
1215:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5929              		.loc 1 1215 11 is_stmt 0 view .LVU1686
 5930 0016 184A     		ldr	r2, .L498+4
1215:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5931              		.loc 1 1215 36 view .LVU1687
 5932 0018 03F07F00 		and	r0, r3, #127
1215:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5933              		.loc 1 1215 11 view .LVU1688
 5934 001c 02EB0010 		add	r0, r2, r0, lsl #4
1224:src/xeq.c     **** 
 5935              		.loc 1 1224 1 view .LVU1689
 5936 0020 0BB0     		add	sp, sp, #44
 5937              		.cfi_remember_state
 5938              		.cfi_def_cfa_offset 4
 5939              		@ sp needed
 5940 0022 5DF804FB 		ldr	pc, [sp], #4
 5941              	.L493:
 5942              		.cfi_restore_state
1219:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5943              		.loc 1 1219 3 is_stmt 1 view .LVU1690
1219:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5944              		.loc 1 1219 6 is_stmt 0 view .LVU1691
 5945 0026 1A06     		lsls	r2, r3, #24
 5946 0028 13D4     		bmi	.L496
1220:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5947              		.loc 1 1220 4 is_stmt 1 view .LVU1692
1220:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5948              		.loc 1 1220 11 is_stmt 0 view .LVU1693
 5949 002a 1448     		ldr	r0, .L498+8
 5950 002c 00EBC300 		add	r0, r0, r3, lsl #3
1224:src/xeq.c     **** 
 5951              		.loc 1 1224 1 view .LVU1694
ARM GAS  /tmp/ccjeMhND.s 			page 229


 5952 0030 0BB0     		add	sp, sp, #44
 5953              		.cfi_remember_state
 5954              		.cfi_def_cfa_offset 4
 5955              		@ sp needed
 5956 0032 5DF804FB 		ldr	pc, [sp], #4
 5957              	.L494:
 5958              		.cfi_restore_state
1216:src/xeq.c     **** 	}
 5959              		.loc 1 1216 3 is_stmt 1 view .LVU1695
 5960              	.LVL433:
 5961              	.LBB1641:
 5962              	.LBI1641:
 645:src/xeq.c     **** 	decNumber temp;
 5963              		.loc 1 645 6 view .LVU1696
 5964              	.LBB1642:
 646:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 5965              		.loc 1 646 2 view .LVU1697
 647:src/xeq.c     **** }
 5966              		.loc 1 647 2 view .LVU1698
 5967              	.LBE1642:
 5968              	.LBE1641:
1216:src/xeq.c     **** 	}
 5969              		.loc 1 1216 3 is_stmt 0 view .LVU1699
 5970 0036 1148     		ldr	r0, .L498+8
 5971              	.LBB1644:
 5972              	.LBB1643:
 647:src/xeq.c     **** }
 5973              		.loc 1 647 27 view .LVU1700
 5974 0038 01A9     		add	r1, sp, #4
 5975              	.LVL434:
 647:src/xeq.c     **** }
 5976              		.loc 1 647 27 view .LVU1701
 5977 003a 00EBC300 		add	r0, r0, r3, lsl #3
 5978 003e FFF7FEFF 		bl	decimal64ToNumber
 5979              	.LVL435:
 647:src/xeq.c     **** }
 5980              		.loc 1 647 27 view .LVU1702
 5981 0042 0146     		mov	r1, r0
 647:src/xeq.c     **** }
 5982              		.loc 1 647 2 view .LVU1703
 5983 0044 0E48     		ldr	r0, .L498+12
 5984 0046 FFF7FEFF 		bl	packed128_from_number
 5985              	.LVL436:
 5986              	.LBE1643:
 5987              	.LBE1644:
1223:src/xeq.c     **** }
 5988              		.loc 1 1223 9 view .LVU1704
 5989 004a 0D48     		ldr	r0, .L498+12
1224:src/xeq.c     **** 
 5990              		.loc 1 1224 1 view .LVU1705
 5991 004c 0BB0     		add	sp, sp, #44
 5992              		.cfi_remember_state
 5993              		.cfi_def_cfa_offset 4
 5994              		@ sp needed
 5995 004e 5DF804FB 		ldr	pc, [sp], #4
 5996              	.LVL437:
 5997              	.L496:
ARM GAS  /tmp/ccjeMhND.s 			page 230


 5998              		.cfi_restore_state
1221:src/xeq.c     **** 	}
 5999              		.loc 1 1221 3 is_stmt 1 view .LVU1706
 6000              	.LBB1645:
 6001              	.LBI1645:
 639:src/xeq.c     **** 	decNumber temp;
 6002              		.loc 1 639 6 view .LVU1707
 6003              	.LBB1646:
 640:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 6004              		.loc 1 640 2 view .LVU1708
 641:src/xeq.c     **** }
 6005              		.loc 1 641 2 view .LVU1709
 6006              	.LBE1646:
 6007              	.LBE1645:
1221:src/xeq.c     **** 	}
 6008              		.loc 1 1221 3 is_stmt 0 view .LVU1710
 6009 0052 0948     		ldr	r0, .L498+4
1221:src/xeq.c     **** 	}
 6010              		.loc 1 1221 55 view .LVU1711
 6011 0054 03F18053 		add	r3, r3, #268435456
 6012              	.LVL438:
1221:src/xeq.c     **** 	}
 6013              		.loc 1 1221 55 view .LVU1712
 6014 0058 803B     		subs	r3, r3, #128
 6015              	.LVL439:
 6016              	.LBB1648:
 6017              	.LBB1647:
 641:src/xeq.c     **** }
 6018              		.loc 1 641 24 view .LVU1713
 6019 005a 00EB0310 		add	r0, r0, r3, lsl #4
 6020 005e 01A9     		add	r1, sp, #4
 6021              	.LVL440:
 641:src/xeq.c     **** }
 6022              		.loc 1 641 24 view .LVU1714
 6023 0060 FFF7FEFF 		bl	decimal128ToNumber
 6024              	.LVL441:
 641:src/xeq.c     **** }
 6025              		.loc 1 641 24 view .LVU1715
 6026 0064 0146     		mov	r1, r0
 641:src/xeq.c     **** }
 6027              		.loc 1 641 2 view .LVU1716
 6028 0066 0648     		ldr	r0, .L498+12
 6029 0068 FFF7FEFF 		bl	packed_from_number
 6030              	.LVL442:
 6031              	.LBE1647:
 6032              	.LBE1648:
1223:src/xeq.c     **** }
 6033              		.loc 1 1223 9 view .LVU1717
 6034 006c 0448     		ldr	r0, .L498+12
 6035              	.LVL443:
1224:src/xeq.c     **** 
 6036              		.loc 1 1224 1 view .LVU1718
 6037 006e 0BB0     		add	sp, sp, #44
 6038              		.cfi_def_cfa_offset 4
 6039              		@ sp needed
 6040 0070 5DF804FB 		ldr	pc, [sp], #4
 6041              	.L499:
ARM GAS  /tmp/ccjeMhND.s 			page 231


 6042              		.align	2
 6043              	.L498:
 6044 0074 00000000 		.word	cnsts
 6045 0078 00000000 		.word	cnsts_d128
 6046 007c 00000000 		.word	cnsts_d64
 6047 0080 00000000 		.word	.LANCHOR2
 6048              		.cfi_endproc
 6049              	.LFE89:
 6051              		.section	.text.get_reg_n,"ax",%progbits
 6052              		.align	1
 6053              		.p2align 2,,3
 6054              		.global	get_reg_n
 6055              		.syntax unified
 6056              		.thumb
 6057              		.thumb_func
 6058              		.fpu fpv4-sp-d16
 6060              	get_reg_n:
 6061              	.LVL444:
 6062              	.LFB87:
1178:src/xeq.c     **** 	const int dbl = is_dblmode();
 6063              		.loc 1 1178 28 is_stmt 1 view -0
 6064              		.cfi_startproc
 6065              		@ args = 0, pretend = 0, frame = 0
 6066              		@ frame_needed = 0, uses_anonymous_args = 0
 6067              		@ link register save eliminated.
1179:src/xeq.c     **** 
 6068              		.loc 1 1179 2 view .LVU1720
 6069              	.LBB1649:
 6070              	.LBI1649:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6071              		.loc 1 932 5 view .LVU1721
 6072              	.LBB1650:
 933:src/xeq.c     **** }
 6073              		.loc 1 933 2 view .LVU1722
 933:src/xeq.c     **** }
 6074              		.loc 1 933 12 is_stmt 0 view .LVU1723
 6075 0000 294B     		ldr	r3, .L515
 6076 0002 1A68     		ldr	r2, [r3]
 933:src/xeq.c     **** }
 6077              		.loc 1 933 24 view .LVU1724
 6078 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 6079 0008 44F20103 		movw	r3, #16385
 6080 000c 0B40     		ands	r3, r3, r1
 6081 000e A3F58041 		sub	r1, r3, #16384
 6082 0012 B1FA81F1 		clz	r1, r1
 6083              	.LBE1650:
 6084              	.LBE1649:
1181:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6085              		.loc 1 1181 5 view .LVU1725
 6086 0016 B0F5FA6F 		cmp	r0, #2000
 6087              	.LBB1652:
 6088              	.LBB1651:
 933:src/xeq.c     **** }
 6089              		.loc 1 933 24 view .LVU1726
 6090 001a 4FEA5111 		lsr	r1, r1, #5
 6091              	.LVL445:
 933:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 232


 6092              		.loc 1 933 24 view .LVU1727
 6093              	.LBE1651:
 6094              	.LBE1652:
1181:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6095              		.loc 1 1181 2 is_stmt 1 view .LVU1728
1181:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6096              		.loc 1 1181 5 is_stmt 0 view .LVU1729
 6097 001e 26DA     		bge	.L512
1185:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6098              		.loc 1 1185 2 is_stmt 1 view .LVU1730
1185:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6099              		.loc 1 1185 5 is_stmt 0 view .LVU1731
 6100 0020 B0F57A7F 		cmp	r0, #1000
 6101 0024 13DA     		bge	.L513
1188:src/xeq.c     **** 		// local register on the return stack
 6102              		.loc 1 1188 2 is_stmt 1 view .LVU1732
1188:src/xeq.c     **** 		// local register on the return stack
 6103              		.loc 1 1188 5 is_stmt 0 view .LVU1733
 6104 0026 6F28     		cmp	r0, #111
1178:src/xeq.c     **** 	const int dbl = is_dblmode();
 6105              		.loc 1 1178 28 view .LVU1734
 6106 0028 70B4     		push	{r4, r5, r6}
 6107              		.cfi_def_cfa_offset 12
 6108              		.cfi_offset 4, -12
 6109              		.cfi_offset 5, -8
 6110              		.cfi_offset 6, -4
1188:src/xeq.c     **** 		// local register on the return stack
 6111              		.loc 1 1188 5 view .LVU1735
 6112 002a 03DD     		ble	.L503
 6113              	.LBB1653:
 6114              	.LBI1653:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 6115              		.loc 1 230 5 is_stmt 1 view .LVU1736
 6116              	.LBE1653:
 231:src/xeq.c     **** }
 6117              		.loc 1 231 2 view .LVU1737
 6118              	.LVL446:
 6119              	.LBB1666:
 6120              	.LBB1654:
 6121              	.LBI1654:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 6122              		.loc 1 222 5 view .LVU1738
 6123              	.LBB1655:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 6124              		.loc 1 223 2 view .LVU1739
 6125              	.LBE1655:
 6126              	.LBE1654:
 6127              	.LBE1666:
 933:src/xeq.c     **** }
 6128              		.loc 1 933 2 view .LVU1740
 6129              	.LBB1667:
 6130              	.LBB1664:
 6131              	.LBB1662:
 224:src/xeq.c     **** }
 6132              		.loc 1 224 2 view .LVU1741
 6133              	.LBB1656:
 6134              	.LBI1656:
ARM GAS  /tmp/ccjeMhND.s 			page 233


 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 6135              		.loc 1 214 5 view .LVU1742
 6136              	.LBB1657:
 215:src/xeq.c     **** }
 6137              		.loc 1 215 2 view .LVU1743
 215:src/xeq.c     **** }
 6138              		.loc 1 215 9 is_stmt 0 view .LVU1744
 6139 002c B2F9DE47 		ldrsh	r4, [r2, #2014]
 215:src/xeq.c     **** }
 6140              		.loc 1 215 57 view .LVU1745
 6141 0030 002C     		cmp	r4, #0
 6142 0032 20DB     		blt	.L514
 6143              	.LVL447:
 6144              	.L503:
 215:src/xeq.c     **** }
 6145              		.loc 1 215 57 view .LVU1746
 6146              	.LBE1657:
 6147              	.LBE1656:
 6148              	.LBE1662:
 6149              	.LBE1664:
 6150              	.LBE1667:
1195:src/xeq.c     **** }
 6151              		.loc 1 1195 2 is_stmt 1 view .LVU1747
1195:src/xeq.c     **** }
 6152              		.loc 1 1195 55 is_stmt 0 view .LVU1748
 6153 0034 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
 6154              	.LVL448:
1195:src/xeq.c     **** }
 6155              		.loc 1 1195 37 view .LVU1749
 6156 0038 02F58661 		add	r1, r2, #1072
1195:src/xeq.c     **** }
 6157              		.loc 1 1195 55 view .LVU1750
 6158 003c C3F16403 		rsb	r3, r3, #100
1196:src/xeq.c     **** 
 6159              		.loc 1 1196 1 view .LVU1751
 6160 0040 70BC     		pop	{r4, r5, r6}
 6161              		.cfi_restore 6
 6162              		.cfi_restore 5
 6163              		.cfi_restore 4
 6164              		.cfi_def_cfa_offset 0
1195:src/xeq.c     **** }
 6165              		.loc 1 1195 22 view .LVU1752
 6166 0042 01EBC301 		add	r1, r1, r3, lsl #3
 6167 0046 02F5EA62 		add	r2, r2, #1872
 6168              	.LVL449:
1195:src/xeq.c     **** }
 6169              		.loc 1 1195 22 view .LVU1753
 6170 004a FFF7FEBF 		b	reg_address
 6171              	.LVL450:
 6172              	.L513:
1186:src/xeq.c     **** 
 6173              		.loc 1 1186 3 is_stmt 1 view .LVU1754
 6174              	.LBB1668:
 6175              	.LBI1668:
1199:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 6176              		.loc 1 1199 11 view .LVU1755
 6177              	.LBB1669:
ARM GAS  /tmp/ccjeMhND.s 			page 234


1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6178              		.loc 1 1200 2 view .LVU1756
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6179              		.loc 1 1200 37 is_stmt 0 view .LVU1757
 6180 004e 174B     		ldr	r3, .L515+4
 6181 0050 1A68     		ldr	r2, [r3]
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6182              		.loc 1 1200 68 view .LVU1758
 6183 0052 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6184              		.loc 1 1200 37 view .LVU1759
 6185 0056 02F58661 		add	r1, r2, #1072
 6186              	.LVL451:
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6187              		.loc 1 1200 68 view .LVU1760
 6188 005a C3F16403 		rsb	r3, r3, #100
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6189              		.loc 1 1200 22 view .LVU1761
 6190 005e A0F57A70 		sub	r0, r0, #1000
 6191              	.LVL452:
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6192              		.loc 1 1200 22 view .LVU1762
 6193 0062 01EBC301 		add	r1, r1, r3, lsl #3
 6194 0066 02F5EA62 		add	r2, r2, #1872
 6195 006a FFF7FEBF 		b	reg_address
 6196              	.LVL453:
 6197              	.L512:
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6198              		.loc 1 1200 22 view .LVU1763
 6199              	.LBE1669:
 6200              	.LBE1668:
1182:src/xeq.c     **** 		return get_const(n, dbl);
 6201              		.loc 1 1182 3 is_stmt 1 view .LVU1764
1183:src/xeq.c     **** 	}
 6202              		.loc 1 1183 3 view .LVU1765
1183:src/xeq.c     **** 	}
 6203              		.loc 1 1183 10 is_stmt 0 view .LVU1766
 6204 006e A0F5FA60 		sub	r0, r0, #2000
 6205              	.LVL454:
1183:src/xeq.c     **** 	}
 6206              		.loc 1 1183 10 view .LVU1767
 6207 0072 FFF7FEBF 		b	get_const
 6208              	.LVL455:
 6209              	.L514:
 6210              		.cfi_def_cfa_offset 12
 6211              		.cfi_offset 4, -12
 6212              		.cfi_offset 5, -8
 6213              		.cfi_offset 6, -4
 6214              	.LBB1670:
 6215              	.LBB1665:
 6216              	.LBB1663:
 6217              	.LBB1660:
 6218              	.LBB1658:
 215:src/xeq.c     **** }
 6219              		.loc 1 215 25 view .LVU1768
 6220 0076 0E4D     		ldr	r5, .L515+8
 6221 0078 2D68     		ldr	r5, [r5]
ARM GAS  /tmp/ccjeMhND.s 			page 235


 6222              	.LVL456:
 215:src/xeq.c     **** }
 6223              		.loc 1 215 57 view .LVU1769
 6224 007a 35F81460 		ldrh	r6, [r5, r4, lsl #1]
 6225              	.LBE1658:
 6226              	.LBE1660:
 224:src/xeq.c     **** }
 6227              		.loc 1 224 30 view .LVU1770
 6228 007e 0231     		adds	r1, r1, #2
 6229              	.LVL457:
 6230              	.LBB1661:
 6231              	.LBB1659:
 215:src/xeq.c     **** }
 6232              		.loc 1 215 57 view .LVU1771
 6233 0080 C6F30B06 		ubfx	r6, r6, #0, #12
 6234              	.LBE1659:
 6235              	.LBE1661:
 6236              	.LBE1663:
 6237              	.LBE1665:
 6238              	.LBE1670:
1188:src/xeq.c     **** 		// local register on the return stack
 6239              		.loc 1 1188 26 view .LVU1772
 6240 0084 56FA01F1 		asrs	r1, r6, r1
 6241              	.LVL458:
1188:src/xeq.c     **** 		// local register on the return stack
 6242              		.loc 1 1188 26 view .LVU1773
 6243 0088 D4D0     		beq	.L503
1190:src/xeq.c     **** 		if (dbl)
 6244              		.loc 1 1190 3 is_stmt 1 view .LVU1774
1190:src/xeq.c     **** 		if (dbl)
 6245              		.loc 1 1190 5 is_stmt 0 view .LVU1775
 6246 008a 7038     		subs	r0, r0, #112
 6247              	.LVL459:
1191:src/xeq.c     **** 			n <<= 1;
 6248              		.loc 1 1191 3 is_stmt 1 view .LVU1776
1191:src/xeq.c     **** 			n <<= 1;
 6249              		.loc 1 1191 6 is_stmt 0 view .LVU1777
 6250 008c B3F5804F 		cmp	r3, #16384
1192:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6251              		.loc 1 1192 4 is_stmt 1 view .LVU1778
1192:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6252              		.loc 1 1192 6 is_stmt 0 view .LVU1779
 6253 0090 08BF     		it	eq
 6254 0092 4000     		lsleq	r0, r0, #1
 6255              	.LVL460:
1193:src/xeq.c     **** 	}
 6256              		.loc 1 1193 3 is_stmt 1 view .LVU1780
1193:src/xeq.c     **** 	}
 6257              		.loc 1 1193 67 is_stmt 0 view .LVU1781
 6258 0094 0234     		adds	r4, r4, #2
1193:src/xeq.c     **** 	}
 6259              		.loc 1 1193 48 view .LVU1782
 6260 0096 24F00104 		bic	r4, r4, #1
1193:src/xeq.c     **** 	}
 6261              		.loc 1 1193 83 view .LVU1783
 6262 009a C000     		lsls	r0, r0, #3
 6263              	.LVL461:
ARM GAS  /tmp/ccjeMhND.s 			page 236


1193:src/xeq.c     **** 	}
 6264              		.loc 1 1193 10 view .LVU1784
 6265 009c 0223     		movs	r3, #2
 6266              	.LVL462:
1193:src/xeq.c     **** 	}
 6267              		.loc 1 1193 10 view .LVU1785
 6268 009e 14FB0300 		smlabb	r0, r4, r3, r0
 6269 00a2 2844     		add	r0, r0, r5
1196:src/xeq.c     **** 
 6270              		.loc 1 1196 1 view .LVU1786
 6271 00a4 70BC     		pop	{r4, r5, r6}
 6272              		.cfi_restore 6
 6273              		.cfi_restore 5
 6274              		.cfi_restore 4
 6275              		.cfi_def_cfa_offset 0
 6276 00a6 7047     		bx	lr
 6277              	.L516:
 6278              		.align	2
 6279              	.L515:
 6280 00a8 00000000 		.word	main_ram
 6281 00ac 00000000 		.word	backup_ram
 6282 00b0 00000000 		.word	RetStk
 6283              		.cfi_endproc
 6284              	.LFE87:
 6286              		.section	.text.get_stack,"ax",%progbits
 6287              		.align	1
 6288              		.p2align 2,,3
 6289              		.global	get_stack
 6290              		.syntax unified
 6291              		.thumb
 6292              		.thumb_func
 6293              		.fpu fpv4-sp-d16
 6295              	get_stack:
 6296              	.LVL463:
 6297              	.LFB43:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6298              		.loc 1 709 30 is_stmt 1 view -0
 6299              		.cfi_startproc
 6300              		@ args = 0, pretend = 0, frame = 0
 6301              		@ frame_needed = 0, uses_anonymous_args = 0
 6302              		@ link register save eliminated.
 710:src/xeq.c     **** }
 6303              		.loc 1 710 2 view .LVU1788
 710:src/xeq.c     **** }
 6304              		.loc 1 710 9 is_stmt 0 view .LVU1789
 6305 0000 6430     		adds	r0, r0, #100
 6306              	.LVL464:
 710:src/xeq.c     **** }
 6307              		.loc 1 710 9 view .LVU1790
 6308 0002 FFF7FEBF 		b	get_reg_n
 6309              	.LVL465:
 710:src/xeq.c     **** }
 6310              		.loc 1 710 9 view .LVU1791
 6311              		.cfi_endproc
 6312              	.LFE43:
 6314 0006 00BF     		.section	.text.lift,"ax",%progbits
 6315              		.align	1
ARM GAS  /tmp/ccjeMhND.s 			page 237


 6316              		.p2align 2,,3
 6317              		.global	lift
 6318              		.syntax unified
 6319              		.thumb
 6320              		.thumb_func
 6321              		.fpu fpv4-sp-d16
 6323              	lift:
 6324              	.LFB47:
 727:src/xeq.c     **** 	const int n = stack_size();
 6325              		.loc 1 727 17 is_stmt 1 view -0
 6326              		.cfi_startproc
 6327              		@ args = 0, pretend = 0, frame = 0
 6328              		@ frame_needed = 0, uses_anonymous_args = 0
 728:src/xeq.c     **** 	int i;
 6329              		.loc 1 728 2 view .LVU1793
 6330              	.LBB1671:
 6331              	.LBI1671:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6332              		.loc 1 703 5 view .LVU1794
 6333              	.LBB1672:
 704:src/xeq.c     **** 		return 4;
 6334              		.loc 1 704 2 view .LVU1795
 6335              	.LBE1672:
 6336              	.LBE1671:
 727:src/xeq.c     **** 	const int n = stack_size();
 6337              		.loc 1 727 17 is_stmt 0 view .LVU1796
 6338 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6339              		.cfi_def_cfa_offset 24
 6340              		.cfi_offset 3, -24
 6341              		.cfi_offset 4, -20
 6342              		.cfi_offset 5, -16
 6343              		.cfi_offset 6, -12
 6344              		.cfi_offset 7, -8
 6345              		.cfi_offset 14, -4
 6346              	.LBB1677:
 6347              	.LBB1675:
 704:src/xeq.c     **** 		return 4;
 6348              		.loc 1 704 8 view .LVU1797
 6349 0002 184E     		ldr	r6, .L529
 6350 0004 3368     		ldr	r3, [r6]
 704:src/xeq.c     **** 		return 4;
 6351              		.loc 1 704 6 view .LVU1798
 6352 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 6353              		.loc 1 704 5 view .LVU1799
 6354 000a 1207     		lsls	r2, r2, #28
 6355 000c 28D5     		bpl	.L522
 6356              	.LBB1673:
 6357              	.LBI1673:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 6358              		.loc 1 182 5 is_stmt 1 view .LVU1800
 6359              	.LBB1674:
 183:src/xeq.c     **** }
 6360              		.loc 1 183 2 view .LVU1801
 183:src/xeq.c     **** }
 6361              		.loc 1 183 9 is_stmt 0 view .LVU1802
 6362 000e B3F8E037 		ldrh	r3, [r3, #2016]
ARM GAS  /tmp/ccjeMhND.s 			page 238


 6363              	.LBE1674:
 6364              	.LBE1673:
 704:src/xeq.c     **** 		return 4;
 6365              		.loc 1 704 27 view .LVU1803
 6366 0012 9B0B     		lsrs	r3, r3, #14
 6367 0014 032B     		cmp	r3, #3
 6368 0016 1BD0     		beq	.L528
 6369 0018 0724     		movs	r4, #7
 6370              	.L519:
 6371              	.LBE1675:
 6372              	.LBE1677:
 729:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 6373              		.loc 1 729 2 is_stmt 1 view .LVU1804
 730:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6374              		.loc 1 730 2 view .LVU1805
 730:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6375              		.loc 1 730 14 view .LVU1806
 6376 001a 6434     		adds	r4, r4, #100
 6377              	.LBB1678:
 6378              	.LBB1679:
 6379              	.LBB1680:
 6380              	.LBB1681:
 933:src/xeq.c     **** }
 6381              		.loc 1 933 24 is_stmt 0 view .LVU1807
 6382 001c 44F20107 		movw	r7, #16385
 6383              	.L521:
 6384              	.LVL466:
 933:src/xeq.c     **** }
 6385              		.loc 1 933 24 view .LVU1808
 6386              	.LBE1681:
 6387              	.LBE1680:
 6388              	.LBE1679:
 6389              	.LBE1678:
 731:src/xeq.c     **** }
 6390              		.loc 1 731 3 is_stmt 1 view .LVU1809
 6391              	.LBB1688:
 6392              	.LBI1688:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6393              		.loc 1 709 11 view .LVU1810
 6394              	.LBB1689:
 710:src/xeq.c     **** }
 6395              		.loc 1 710 2 view .LVU1811
 710:src/xeq.c     **** }
 6396              		.loc 1 710 9 is_stmt 0 view .LVU1812
 6397 0020 2046     		mov	r0, r4
 6398 0022 FFF7FEFF 		bl	get_reg_n
 6399              	.LVL467:
 6400              	.LBE1689:
 6401              	.LBE1688:
 6402              	.LBB1691:
 6403              	.LBB1692:
 6404 0026 013C     		subs	r4, r4, #1
 6405              	.LVL468:
 710:src/xeq.c     **** }
 6406              		.loc 1 710 9 view .LVU1813
 6407              	.LBE1692:
 6408              	.LBE1691:
ARM GAS  /tmp/ccjeMhND.s 			page 239


 6409              	.LBB1696:
 6410              	.LBB1690:
 6411 0028 0546     		mov	r5, r0
 6412              	.LBE1690:
 6413              	.LBE1696:
 6414              	.LBB1697:
 6415              	.LBB1693:
 6416 002a 2046     		mov	r0, r4
 6417              	.LVL469:
 710:src/xeq.c     **** }
 6418              		.loc 1 710 9 view .LVU1814
 6419              	.LBE1693:
 6420              	.LBI1691:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6421              		.loc 1 709 11 is_stmt 1 view .LVU1815
 6422              	.LBB1694:
 710:src/xeq.c     **** }
 6423              		.loc 1 710 2 view .LVU1816
 710:src/xeq.c     **** }
 6424              		.loc 1 710 9 is_stmt 0 view .LVU1817
 6425 002c FFF7FEFF 		bl	get_reg_n
 6426              	.LVL470:
 710:src/xeq.c     **** }
 6427              		.loc 1 710 9 view .LVU1818
 6428              	.LBE1694:
 6429              	.LBE1697:
 6430              	.LBB1698:
 6431              	.LBB1686:
 6432              	.LBB1684:
 6433              	.LBB1682:
 933:src/xeq.c     **** }
 6434              		.loc 1 933 24 view .LVU1819
 6435 0030 3368     		ldr	r3, [r6]
 6436 0032 B3F8E837 		ldrh	r3, [r3, #2024]
 6437              	.LBE1682:
 6438              	.LBE1684:
 718:src/xeq.c     **** }
 6439              		.loc 1 718 2 view .LVU1820
 6440 0036 3B40     		ands	r3, r3, r7
 6441 0038 B3F5804F 		cmp	r3, #16384
 6442              	.LBE1686:
 6443              	.LBE1698:
 6444              	.LBB1699:
 6445              	.LBB1695:
 710:src/xeq.c     **** }
 6446              		.loc 1 710 9 view .LVU1821
 6447 003c 0146     		mov	r1, r0
 6448              	.LVL471:
 710:src/xeq.c     **** }
 6449              		.loc 1 710 9 view .LVU1822
 6450              	.LBE1695:
 6451              	.LBE1699:
 6452              	.LBB1700:
 6453              	.LBI1678:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6454              		.loc 1 717 6 is_stmt 1 view .LVU1823
 6455              	.LBB1687:
ARM GAS  /tmp/ccjeMhND.s 			page 240


 718:src/xeq.c     **** }
 6456              		.loc 1 718 2 view .LVU1824
 6457              	.LBB1685:
 6458              	.LBI1680:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6459              		.loc 1 932 5 view .LVU1825
 6460              	.LBB1683:
 933:src/xeq.c     **** }
 6461              		.loc 1 933 2 view .LVU1826
 6462              	.LBE1683:
 6463              	.LBE1685:
 718:src/xeq.c     **** }
 6464              		.loc 1 718 2 is_stmt 0 view .LVU1827
 6465 003e 0CBF     		ite	eq
 6466 0040 1022     		moveq	r2, #16
 6467 0042 0822     		movne	r2, #8
 6468 0044 2846     		mov	r0, r5
 6469              	.LVL472:
 718:src/xeq.c     **** }
 6470              		.loc 1 718 2 view .LVU1828
 6471 0046 FFF7FEFF 		bl	xcopy
 6472              	.LVL473:
 718:src/xeq.c     **** }
 6473              		.loc 1 718 2 view .LVU1829
 6474              	.LBE1687:
 6475              	.LBE1700:
 730:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6476              		.loc 1 730 19 is_stmt 1 view .LVU1830
 730:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6477              		.loc 1 730 14 view .LVU1831
 730:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6478              		.loc 1 730 2 is_stmt 0 view .LVU1832
 6479 004a 642C     		cmp	r4, #100
 6480 004c E8D1     		bne	.L521
 732:src/xeq.c     **** 
 6481              		.loc 1 732 1 view .LVU1833
 6482 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6483              	.LVL474:
 6484              	.L528:
 6485              	.LBB1701:
 6486              	.LBB1676:
 704:src/xeq.c     **** 		return 4;
 6487              		.loc 1 704 44 view .LVU1834
 6488 0050 054B     		ldr	r3, .L529+4
 704:src/xeq.c     **** 		return 4;
 6489              		.loc 1 704 41 view .LVU1835
 6490 0052 93F90130 		ldrsb	r3, [r3, #1]
 6491 0056 002B     		cmp	r3, #0
 6492 0058 B4BF     		ite	lt
 6493 005a 0724     		movlt	r4, #7
 6494 005c 0324     		movge	r4, #3
 6495 005e DCE7     		b	.L519
 6496              	.L522:
 6497 0060 0324     		movs	r4, #3
 6498 0062 DAE7     		b	.L519
 6499              	.L530:
 6500              		.align	2
ARM GAS  /tmp/ccjeMhND.s 			page 241


 6501              	.L529:
 6502 0064 00000000 		.word	main_ram
 6503 0068 00000000 		.word	XromParams
 6504              	.LBE1676:
 6505              	.LBE1701:
 6506              		.cfi_endproc
 6507              	.LFE47:
 6509              		.section	.text.lift_if_enabled,"ax",%progbits
 6510              		.align	1
 6511              		.p2align 2,,3
 6512              		.global	lift_if_enabled
 6513              		.syntax unified
 6514              		.thumb
 6515              		.thumb_func
 6516              		.fpu fpv4-sp-d16
 6518              	lift_if_enabled:
 6519              	.LFB49:
 738:src/xeq.c     **** 	if (get_lift())
 6520              		.loc 1 738 28 is_stmt 1 view -0
 6521              		.cfi_startproc
 6522              		@ args = 0, pretend = 0, frame = 0
 6523              		@ frame_needed = 0, uses_anonymous_args = 0
 6524              		@ link register save eliminated.
 739:src/xeq.c     **** 		lift();
 6525              		.loc 1 739 2 view .LVU1837
 6526              	.LBB1702:
 6527              	.LBI1702:
 734:src/xeq.c     **** 	return State2.state_lift;
 6528              		.loc 1 734 12 view .LVU1838
 6529              	.LBB1703:
 735:src/xeq.c     **** }
 6530              		.loc 1 735 2 view .LVU1839
 735:src/xeq.c     **** }
 6531              		.loc 1 735 15 is_stmt 0 view .LVU1840
 6532 0000 034B     		ldr	r3, .L534
 6533 0002 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 6534              	.LBE1703:
 6535              	.LBE1702:
 739:src/xeq.c     **** 		lift();
 6536              		.loc 1 739 5 view .LVU1841
 6537 0004 5B06     		lsls	r3, r3, #25
 6538 0006 00D4     		bmi	.L533
 741:src/xeq.c     **** 
 6539              		.loc 1 741 1 view .LVU1842
 6540 0008 7047     		bx	lr
 6541              	.L533:
 740:src/xeq.c     **** }
 6542              		.loc 1 740 3 is_stmt 1 view .LVU1843
 6543 000a FFF7FEBF 		b	lift
 6544              	.LVL475:
 6545              	.L535:
 6546 000e 00BF     		.align	2
 6547              	.L534:
 6548 0010 00000000 		.word	StateWhileOn
 6549              		.cfi_endproc
 6550              	.LFE49:
 6552              		.section	.text.lower,"ax",%progbits
ARM GAS  /tmp/ccjeMhND.s 			page 242


 6553              		.align	1
 6554              		.p2align 2,,3
 6555              		.syntax unified
 6556              		.thumb
 6557              		.thumb_func
 6558              		.fpu fpv4-sp-d16
 6560              	lower:
 6561              	.LFB53:
 756:src/xeq.c     **** 	const int n = stack_size();
 6562              		.loc 1 756 25 view -0
 6563              		.cfi_startproc
 6564              		@ args = 0, pretend = 0, frame = 0
 6565              		@ frame_needed = 0, uses_anonymous_args = 0
 757:src/xeq.c     **** 	int i;
 6566              		.loc 1 757 2 view .LVU1845
 6567              	.LBB1704:
 6568              	.LBI1704:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6569              		.loc 1 703 5 view .LVU1846
 6570              	.LBB1705:
 704:src/xeq.c     **** 		return 4;
 6571              		.loc 1 704 2 view .LVU1847
 6572              	.LBE1705:
 6573              	.LBE1704:
 756:src/xeq.c     **** 	const int n = stack_size();
 6574              		.loc 1 756 25 is_stmt 0 view .LVU1848
 6575 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6576              		.cfi_def_cfa_offset 24
 6577              		.cfi_offset 4, -24
 6578              		.cfi_offset 5, -20
 6579              		.cfi_offset 6, -16
 6580              		.cfi_offset 7, -12
 6581              		.cfi_offset 8, -8
 6582              		.cfi_offset 14, -4
 6583              	.LBB1711:
 6584              	.LBB1708:
 704:src/xeq.c     **** 		return 4;
 6585              		.loc 1 704 8 view .LVU1849
 6586 0004 194F     		ldr	r7, .L547
 6587 0006 3B68     		ldr	r3, [r7]
 704:src/xeq.c     **** 		return 4;
 6588              		.loc 1 704 6 view .LVU1850
 6589 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 6590              		.loc 1 704 5 view .LVU1851
 6591 000c 1207     		lsls	r2, r2, #28
 6592 000e 2BD5     		bpl	.L540
 6593              	.LBB1706:
 6594              	.LBI1706:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 6595              		.loc 1 182 5 is_stmt 1 view .LVU1852
 6596              	.LBB1707:
 183:src/xeq.c     **** }
 6597              		.loc 1 183 2 view .LVU1853
 183:src/xeq.c     **** }
 6598              		.loc 1 183 9 is_stmt 0 view .LVU1854
 6599 0010 B3F8E037 		ldrh	r3, [r3, #2016]
ARM GAS  /tmp/ccjeMhND.s 			page 243


 6600              	.LBE1707:
 6601              	.LBE1706:
 704:src/xeq.c     **** 		return 4;
 6602              		.loc 1 704 27 view .LVU1855
 6603 0014 9B0B     		lsrs	r3, r3, #14
 6604 0016 032B     		cmp	r3, #3
 6605 0018 1ED0     		beq	.L546
 706:src/xeq.c     **** }
 6606              		.loc 1 706 9 view .LVU1856
 6607 001a 0826     		movs	r6, #8
 6608              	.L537:
 6609              	.LVL476:
 706:src/xeq.c     **** }
 6610              		.loc 1 706 9 view .LVU1857
 6611              	.LBE1708:
 6612              	.LBE1711:
 758:src/xeq.c     **** 
 6613              		.loc 1 758 2 is_stmt 1 view .LVU1858
 760:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6614              		.loc 1 760 2 view .LVU1859
 760:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6615              		.loc 1 760 12 view .LVU1860
 6616 001c 6336     		adds	r6, r6, #99
 6617              	.LVL477:
 6618              	.LBB1712:
 6619              	.LBB1709:
 705:src/xeq.c     **** 	return 8;
 6620              		.loc 1 705 10 is_stmt 0 view .LVU1861
 6621 001e 6424     		movs	r4, #100
 6622              	.LBE1709:
 6623              	.LBE1712:
 6624              	.LBB1713:
 6625              	.LBB1714:
 6626              	.LBB1715:
 6627              	.LBB1716:
 933:src/xeq.c     **** }
 6628              		.loc 1 933 24 view .LVU1862
 6629 0020 44F20108 		movw	r8, #16385
 6630              	.LVL478:
 6631              	.L539:
 933:src/xeq.c     **** }
 6632              		.loc 1 933 24 view .LVU1863
 6633              	.LBE1716:
 6634              	.LBE1715:
 6635              	.LBE1714:
 6636              	.LBE1713:
 761:src/xeq.c     **** }
 6637              		.loc 1 761 3 is_stmt 1 discriminator 3 view .LVU1864
 6638              	.LBB1723:
 6639              	.LBI1723:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6640              		.loc 1 709 11 discriminator 3 view .LVU1865
 6641              	.LBB1724:
 710:src/xeq.c     **** }
 6642              		.loc 1 710 2 discriminator 3 view .LVU1866
 710:src/xeq.c     **** }
 6643              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU1867
ARM GAS  /tmp/ccjeMhND.s 			page 244


 6644 0024 2046     		mov	r0, r4
 6645 0026 FFF7FEFF 		bl	get_reg_n
 6646              	.LVL479:
 6647 002a 0134     		adds	r4, r4, #1
 6648              	.LVL480:
 710:src/xeq.c     **** }
 6649              		.loc 1 710 9 discriminator 3 view .LVU1868
 6650 002c 0546     		mov	r5, r0
 6651              	.LBE1724:
 6652              	.LBE1723:
 6653              	.LBB1725:
 6654              	.LBB1726:
 6655 002e 2046     		mov	r0, r4
 6656              	.LVL481:
 710:src/xeq.c     **** }
 6657              		.loc 1 710 9 discriminator 3 view .LVU1869
 6658              	.LBE1726:
 6659              	.LBI1725:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6660              		.loc 1 709 11 is_stmt 1 discriminator 3 view .LVU1870
 6661              	.LBB1727:
 710:src/xeq.c     **** }
 6662              		.loc 1 710 2 discriminator 3 view .LVU1871
 710:src/xeq.c     **** }
 6663              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU1872
 6664 0030 FFF7FEFF 		bl	get_reg_n
 6665              	.LVL482:
 710:src/xeq.c     **** }
 6666              		.loc 1 710 9 discriminator 3 view .LVU1873
 6667              	.LBE1727:
 6668              	.LBE1725:
 6669              	.LBB1729:
 6670              	.LBB1721:
 6671              	.LBB1719:
 6672              	.LBB1717:
 933:src/xeq.c     **** }
 6673              		.loc 1 933 24 discriminator 3 view .LVU1874
 6674 0034 3B68     		ldr	r3, [r7]
 6675 0036 B3F8E837 		ldrh	r3, [r3, #2024]
 6676              	.LBE1717:
 6677              	.LBE1719:
 718:src/xeq.c     **** }
 6678              		.loc 1 718 2 discriminator 3 view .LVU1875
 6679 003a 08EA0303 		and	r3, r8, r3
 6680 003e B3F5804F 		cmp	r3, #16384
 6681              	.LBE1721:
 6682              	.LBE1729:
 6683              	.LBB1730:
 6684              	.LBB1728:
 710:src/xeq.c     **** }
 6685              		.loc 1 710 9 discriminator 3 view .LVU1876
 6686 0042 0146     		mov	r1, r0
 6687              	.LVL483:
 710:src/xeq.c     **** }
 6688              		.loc 1 710 9 discriminator 3 view .LVU1877
 6689              	.LBE1728:
 6690              	.LBE1730:
ARM GAS  /tmp/ccjeMhND.s 			page 245


 6691              	.LBB1731:
 6692              	.LBI1713:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6693              		.loc 1 717 6 is_stmt 1 discriminator 3 view .LVU1878
 6694              	.LBB1722:
 718:src/xeq.c     **** }
 6695              		.loc 1 718 2 discriminator 3 view .LVU1879
 6696              	.LBB1720:
 6697              	.LBI1715:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6698              		.loc 1 932 5 discriminator 3 view .LVU1880
 6699              	.LBB1718:
 933:src/xeq.c     **** }
 6700              		.loc 1 933 2 discriminator 3 view .LVU1881
 6701              	.LBE1718:
 6702              	.LBE1720:
 718:src/xeq.c     **** }
 6703              		.loc 1 718 2 is_stmt 0 discriminator 3 view .LVU1882
 6704 0044 0CBF     		ite	eq
 6705 0046 1022     		moveq	r2, #16
 6706 0048 0822     		movne	r2, #8
 6707 004a 2846     		mov	r0, r5
 6708              	.LVL484:
 718:src/xeq.c     **** }
 6709              		.loc 1 718 2 discriminator 3 view .LVU1883
 6710 004c FFF7FEFF 		bl	xcopy
 6711              	.LVL485:
 718:src/xeq.c     **** }
 6712              		.loc 1 718 2 discriminator 3 view .LVU1884
 6713              	.LBE1722:
 6714              	.LBE1731:
 760:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6715              		.loc 1 760 17 is_stmt 1 discriminator 3 view .LVU1885
 760:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6716              		.loc 1 760 12 discriminator 3 view .LVU1886
 760:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6717              		.loc 1 760 2 is_stmt 0 discriminator 3 view .LVU1887
 6718 0050 B442     		cmp	r4, r6
 6719 0052 E7D1     		bne	.L539
 762:src/xeq.c     **** 
 6720              		.loc 1 762 1 view .LVU1888
 6721 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6722              	.LVL486:
 6723              	.L546:
 6724              	.LBB1732:
 6725              	.LBB1710:
 704:src/xeq.c     **** 		return 4;
 6726              		.loc 1 704 44 view .LVU1889
 6727 0058 054B     		ldr	r3, .L547+4
 704:src/xeq.c     **** 		return 4;
 6728              		.loc 1 704 41 view .LVU1890
 6729 005a 93F90130 		ldrsb	r3, [r3, #1]
 705:src/xeq.c     **** 	return 8;
 6730              		.loc 1 705 10 view .LVU1891
 6731 005e 002B     		cmp	r3, #0
 6732 0060 B4BF     		ite	lt
 6733 0062 0826     		movlt	r6, #8
ARM GAS  /tmp/ccjeMhND.s 			page 246


 6734 0064 0426     		movge	r6, #4
 6735 0066 D9E7     		b	.L537
 6736              	.L540:
 6737 0068 0426     		movs	r6, #4
 6738 006a D7E7     		b	.L537
 6739              	.L548:
 6740              		.align	2
 6741              	.L547:
 6742 006c 00000000 		.word	main_ram
 6743 0070 00000000 		.word	XromParams
 6744              	.LBE1710:
 6745              	.LBE1732:
 6746              		.cfi_endproc
 6747              	.LFE53:
 6749              		.section	.text.get_stack_top,"ax",%progbits
 6750              		.align	1
 6751              		.p2align 2,,3
 6752              		.syntax unified
 6753              		.thumb
 6754              		.thumb_func
 6755              		.fpu fpv4-sp-d16
 6757              	get_stack_top:
 6758              	.LFB44:
 713:src/xeq.c     **** 	return get_stack(stack_size()-1);
 6759              		.loc 1 713 38 is_stmt 1 view -0
 6760              		.cfi_startproc
 6761              		@ args = 0, pretend = 0, frame = 0
 6762              		@ frame_needed = 0, uses_anonymous_args = 0
 6763              		@ link register save eliminated.
 714:src/xeq.c     **** }
 6764              		.loc 1 714 2 view .LVU1893
 6765              	.LBB1733:
 6766              	.LBI1733:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6767              		.loc 1 703 5 view .LVU1894
 6768              	.LBB1734:
 704:src/xeq.c     **** 		return 4;
 6769              		.loc 1 704 2 view .LVU1895
 704:src/xeq.c     **** 		return 4;
 6770              		.loc 1 704 8 is_stmt 0 view .LVU1896
 6771 0000 0C4B     		ldr	r3, .L555
 6772 0002 1B68     		ldr	r3, [r3]
 704:src/xeq.c     **** 		return 4;
 6773              		.loc 1 704 6 view .LVU1897
 6774 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 6775              		.loc 1 704 5 view .LVU1898
 6776 0008 1207     		lsls	r2, r2, #28
 6777 000a 10D5     		bpl	.L551
 6778              	.LBB1735:
 6779              	.LBI1735:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 6780              		.loc 1 182 5 is_stmt 1 view .LVU1899
 6781              	.LBB1736:
 183:src/xeq.c     **** }
 6782              		.loc 1 183 2 view .LVU1900
 183:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 247


 6783              		.loc 1 183 9 is_stmt 0 view .LVU1901
 6784 000c B3F8E037 		ldrh	r3, [r3, #2016]
 6785              	.LBE1736:
 6786              	.LBE1735:
 704:src/xeq.c     **** 		return 4;
 6787              		.loc 1 704 27 view .LVU1902
 6788 0010 9B0B     		lsrs	r3, r3, #14
 6789 0012 032B     		cmp	r3, #3
 6790 0014 02D0     		beq	.L554
 6791 0016 6B20     		movs	r0, #107
 6792              	.LBE1734:
 6793              	.LBE1733:
 6794              	.LBB1739:
 6795              	.LBI1739:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6796              		.loc 1 709 11 is_stmt 1 view .LVU1903
 6797              	.LBB1740:
 710:src/xeq.c     **** }
 6798              		.loc 1 710 2 view .LVU1904
 710:src/xeq.c     **** }
 6799              		.loc 1 710 9 is_stmt 0 view .LVU1905
 6800 0018 FFF7FEBF 		b	get_reg_n
 6801              	.LVL487:
 6802              	.L554:
 6803              	.LBE1740:
 6804              	.LBE1739:
 6805              	.LBB1743:
 6806              	.LBB1737:
 704:src/xeq.c     **** 		return 4;
 6807              		.loc 1 704 44 view .LVU1906
 6808 001c 064B     		ldr	r3, .L555+4
 704:src/xeq.c     **** 		return 4;
 6809              		.loc 1 704 41 view .LVU1907
 6810 001e 93F90130 		ldrsb	r3, [r3, #1]
 6811 0022 002B     		cmp	r3, #0
 6812 0024 B4BF     		ite	lt
 6813 0026 6B20     		movlt	r0, #107
 6814 0028 6720     		movge	r0, #103
 6815              	.LBE1737:
 6816              	.LBE1743:
 6817              	.LBB1744:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6818              		.loc 1 709 11 is_stmt 1 view .LVU1908
 6819              	.LBB1741:
 710:src/xeq.c     **** }
 6820              		.loc 1 710 2 view .LVU1909
 710:src/xeq.c     **** }
 6821              		.loc 1 710 9 is_stmt 0 view .LVU1910
 6822 002a FFF7FEBF 		b	get_reg_n
 6823              	.LVL488:
 6824              	.L551:
 6825              	.LBE1741:
 6826              	.LBE1744:
 6827              	.LBB1745:
 6828              	.LBB1738:
 6829 002e 6720     		movs	r0, #103
 6830              	.LBE1738:
ARM GAS  /tmp/ccjeMhND.s 			page 248


 6831              	.LBE1745:
 6832              	.LBB1746:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6833              		.loc 1 709 11 is_stmt 1 view .LVU1911
 6834              	.LBB1742:
 710:src/xeq.c     **** }
 6835              		.loc 1 710 2 view .LVU1912
 710:src/xeq.c     **** }
 6836              		.loc 1 710 9 is_stmt 0 view .LVU1913
 6837 0030 FFF7FEBF 		b	get_reg_n
 6838              	.LVL489:
 6839              	.L556:
 6840              		.align	2
 6841              	.L555:
 6842 0034 00000000 		.word	main_ram
 6843 0038 00000000 		.word	XromParams
 6844              	.LBE1742:
 6845              	.LBE1746:
 6846              		.cfi_endproc
 6847              	.LFE44:
 6849              		.section	.text.roll_down,"ax",%progbits
 6850              		.align	1
 6851              		.p2align 2,,3
 6852              		.global	roll_down
 6853              		.syntax unified
 6854              		.thumb
 6855              		.thumb_func
 6856              		.fpu fpv4-sp-d16
 6858              	roll_down:
 6859              	.LVL490:
 6860              	.LFB70:
 867:src/xeq.c     **** 	REGISTER r;
 6861              		.loc 1 867 31 is_stmt 1 view -0
 6862              		.cfi_startproc
 6863              		@ args = 0, pretend = 0, frame = 16
 6864              		@ frame_needed = 0, uses_anonymous_args = 0
 868:src/xeq.c     **** 	copyreg(&r, StackBase);
 6865              		.loc 1 868 2 view .LVU1915
 869:src/xeq.c     **** 	lower();
 6866              		.loc 1 869 2 view .LVU1916
 867:src/xeq.c     **** 	REGISTER r;
 6867              		.loc 1 867 31 is_stmt 0 view .LVU1917
 6868 0000 30B5     		push	{r4, r5, lr}
 6869              		.cfi_def_cfa_offset 12
 6870              		.cfi_offset 4, -12
 6871              		.cfi_offset 5, -8
 6872              		.cfi_offset 14, -4
 6873              	.LBB1747:
 6874              	.LBB1748:
 6875              	.LBB1749:
 6876              	.LBB1750:
 933:src/xeq.c     **** }
 6877              		.loc 1 933 24 view .LVU1918
 6878 0002 124D     		ldr	r5, .L563
 6879              	.LBE1750:
 6880              	.LBE1749:
 6881              	.LBE1748:
ARM GAS  /tmp/ccjeMhND.s 			page 249


 6882              	.LBE1747:
 869:src/xeq.c     **** 	lower();
 6883              		.loc 1 869 2 view .LVU1919
 6884 0004 124A     		ldr	r2, .L563+4
 6885              	.LBB1759:
 6886              	.LBB1757:
 6887              	.LBB1754:
 6888              	.LBB1751:
 933:src/xeq.c     **** }
 6889              		.loc 1 933 24 view .LVU1920
 6890 0006 2B68     		ldr	r3, [r5]
 6891              	.LBE1751:
 6892              	.LBE1754:
 718:src/xeq.c     **** }
 6893              		.loc 1 718 2 view .LVU1921
 6894 0008 1168     		ldr	r1, [r2]
 6895              	.LBB1755:
 6896              	.LBB1752:
 933:src/xeq.c     **** }
 6897              		.loc 1 933 24 view .LVU1922
 6898 000a B3F8E837 		ldrh	r3, [r3, #2024]
 6899 000e 44F20104 		movw	r4, #16385
 6900              	.LBE1752:
 6901              	.LBE1755:
 718:src/xeq.c     **** }
 6902              		.loc 1 718 2 view .LVU1923
 6903 0012 2340     		ands	r3, r3, r4
 6904              	.LBE1757:
 6905              	.LBE1759:
 867:src/xeq.c     **** 	REGISTER r;
 6906              		.loc 1 867 31 view .LVU1924
 6907 0014 85B0     		sub	sp, sp, #20
 6908              		.cfi_def_cfa_offset 32
 6909              	.LVL491:
 6910              	.LBB1760:
 6911              	.LBI1747:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6912              		.loc 1 717 6 is_stmt 1 view .LVU1925
 6913              	.LBB1758:
 718:src/xeq.c     **** }
 6914              		.loc 1 718 2 view .LVU1926
 6915              	.LBB1756:
 6916              	.LBI1749:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6917              		.loc 1 932 5 view .LVU1927
 6918              	.LBB1753:
 933:src/xeq.c     **** }
 6919              		.loc 1 933 2 view .LVU1928
 6920              	.LBE1753:
 6921              	.LBE1756:
 718:src/xeq.c     **** }
 6922              		.loc 1 718 2 is_stmt 0 view .LVU1929
 6923 0016 B3F5804F 		cmp	r3, #16384
 6924 001a 0CBF     		ite	eq
 6925 001c 1022     		moveq	r2, #16
 6926 001e 0822     		movne	r2, #8
 6927 0020 6846     		mov	r0, sp
ARM GAS  /tmp/ccjeMhND.s 			page 250


 6928              	.LVL492:
 718:src/xeq.c     **** }
 6929              		.loc 1 718 2 view .LVU1930
 6930 0022 FFF7FEFF 		bl	xcopy
 6931              	.LVL493:
 718:src/xeq.c     **** }
 6932              		.loc 1 718 2 view .LVU1931
 6933              	.LBE1758:
 6934              	.LBE1760:
 870:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 6935              		.loc 1 870 2 is_stmt 1 view .LVU1932
 6936 0026 FFF7FEFF 		bl	lower
 6937              	.LVL494:
 871:src/xeq.c     **** }
 6938              		.loc 1 871 2 view .LVU1933
 6939 002a FFF7FEFF 		bl	get_stack_top
 6940              	.LVL495:
 6941              	.LBB1761:
 6942              	.LBI1761:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6943              		.loc 1 717 6 view .LVU1934
 6944              	.LBB1762:
 718:src/xeq.c     **** }
 6945              		.loc 1 718 2 view .LVU1935
 6946              	.LBB1763:
 6947              	.LBI1763:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6948              		.loc 1 932 5 view .LVU1936
 6949              	.LBB1764:
 933:src/xeq.c     **** }
 6950              		.loc 1 933 2 view .LVU1937
 933:src/xeq.c     **** }
 6951              		.loc 1 933 24 is_stmt 0 view .LVU1938
 6952 002e 2B68     		ldr	r3, [r5]
 6953 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 6954              	.LBE1764:
 6955              	.LBE1763:
 718:src/xeq.c     **** }
 6956              		.loc 1 718 2 view .LVU1939
 6957 0034 1C40     		ands	r4, r4, r3
 6958 0036 B4F5804F 		cmp	r4, #16384
 6959 003a 6946     		mov	r1, sp
 6960 003c 0CBF     		ite	eq
 6961 003e 1022     		moveq	r2, #16
 6962 0040 0822     		movne	r2, #8
 6963 0042 FFF7FEFF 		bl	xcopy
 6964              	.LVL496:
 718:src/xeq.c     **** }
 6965              		.loc 1 718 2 view .LVU1940
 6966              	.LBE1762:
 6967              	.LBE1761:
 872:src/xeq.c     **** 
 6968              		.loc 1 872 1 view .LVU1941
 6969 0046 05B0     		add	sp, sp, #20
 6970              		.cfi_def_cfa_offset 12
 6971              		@ sp needed
 6972 0048 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccjeMhND.s 			page 251


 6973              	.L564:
 6974 004a 00BF     		.align	2
 6975              	.L563:
 6976 004c 00000000 		.word	main_ram
 6977 0050 00000000 		.word	StackBase
 6978              		.cfi_endproc
 6979              	.LFE70:
 6981              		.section	.text.cpx_roll_down,"ax",%progbits
 6982              		.align	1
 6983              		.p2align 2,,3
 6984              		.global	cpx_roll_down
 6985              		.syntax unified
 6986              		.thumb
 6987              		.thumb_func
 6988              		.fpu fpv4-sp-d16
 6990              	cpx_roll_down:
 6991              	.LVL497:
 6992              	.LFB72:
 881:src/xeq.c     **** 	roll_down(OP_RDOWN);
 6993              		.loc 1 881 35 is_stmt 1 view -0
 6994              		.cfi_startproc
 6995              		@ args = 0, pretend = 0, frame = 0
 6996              		@ frame_needed = 0, uses_anonymous_args = 0
 882:src/xeq.c     **** 	roll_down(OP_RDOWN);
 6997              		.loc 1 882 2 view .LVU1943
 881:src/xeq.c     **** 	roll_down(OP_RDOWN);
 6998              		.loc 1 881 35 is_stmt 0 view .LVU1944
 6999 0000 08B5     		push	{r3, lr}
 7000              		.cfi_def_cfa_offset 8
 7001              		.cfi_offset 3, -8
 7002              		.cfi_offset 14, -4
 882:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7003              		.loc 1 882 2 view .LVU1945
 7004 0002 0720     		movs	r0, #7
 7005              	.LVL498:
 882:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7006              		.loc 1 882 2 view .LVU1946
 7007 0004 FFF7FEFF 		bl	roll_down
 7008              	.LVL499:
 883:src/xeq.c     **** 	set_was_complex();
 7009              		.loc 1 883 2 is_stmt 1 view .LVU1947
 7010 0008 0720     		movs	r0, #7
 7011 000a FFF7FEFF 		bl	roll_down
 7012              	.LVL500:
 884:src/xeq.c     **** }
 7013              		.loc 1 884 2 view .LVU1948
 7014              	.LBB1765:
 7015              	.LBI1765:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 7016              		.loc 1 530 13 view .LVU1949
 7017              	.LBB1766:
 531:src/xeq.c     **** }
 7018              		.loc 1 531 2 view .LVU1950
 531:src/xeq.c     **** }
 7019              		.loc 1 531 20 is_stmt 0 view .LVU1951
 7020 000e 034B     		ldr	r3, .L567
 7021 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
ARM GAS  /tmp/ccjeMhND.s 			page 252


 7022 0012 0121     		movs	r1, #1
 7023 0014 61F38712 		bfi	r2, r1, #6, #2
 7024 0018 1A75     		strb	r2, [r3, #20]
 7025              	.LBE1766:
 7026              	.LBE1765:
 885:src/xeq.c     **** 
 7027              		.loc 1 885 1 view .LVU1952
 7028 001a 08BD     		pop	{r3, pc}
 7029              	.L568:
 7030              		.align	2
 7031              	.L567:
 7032 001c 00000000 		.word	StateWhileOn
 7033              		.cfi_endproc
 7034              	.LFE72:
 7036              		.section	.text.roll_up,"ax",%progbits
 7037              		.align	1
 7038              		.p2align 2,,3
 7039              		.global	roll_up
 7040              		.syntax unified
 7041              		.thumb
 7042              		.thumb_func
 7043              		.fpu fpv4-sp-d16
 7045              	roll_up:
 7046              	.LVL501:
 7047              	.LFB71:
 874:src/xeq.c     **** 	REGISTER r;
 7048              		.loc 1 874 29 is_stmt 1 view -0
 7049              		.cfi_startproc
 7050              		@ args = 0, pretend = 0, frame = 16
 7051              		@ frame_needed = 0, uses_anonymous_args = 0
 875:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 7052              		.loc 1 875 2 view .LVU1954
 876:src/xeq.c     **** 	lift();
 7053              		.loc 1 876 2 view .LVU1955
 874:src/xeq.c     **** 	REGISTER r;
 7054              		.loc 1 874 29 is_stmt 0 view .LVU1956
 7055 0000 30B5     		push	{r4, r5, lr}
 7056              		.cfi_def_cfa_offset 12
 7057              		.cfi_offset 4, -12
 7058              		.cfi_offset 5, -8
 7059              		.cfi_offset 14, -4
 7060              	.LBB1767:
 7061              	.LBB1768:
 7062              	.LBB1769:
 7063              	.LBB1770:
 933:src/xeq.c     **** }
 7064              		.loc 1 933 24 view .LVU1957
 7065 0002 124D     		ldr	r5, .L575
 7066              	.LBE1770:
 7067              	.LBE1769:
 7068              	.LBE1768:
 7069              	.LBE1767:
 874:src/xeq.c     **** 	REGISTER r;
 7070              		.loc 1 874 29 view .LVU1958
 7071 0004 85B0     		sub	sp, sp, #20
 7072              		.cfi_def_cfa_offset 32
 876:src/xeq.c     **** 	lift();
ARM GAS  /tmp/ccjeMhND.s 			page 253


 7073              		.loc 1 876 14 view .LVU1959
 7074 0006 FFF7FEFF 		bl	get_stack_top
 7075              	.LVL502:
 7076              	.LBB1777:
 7077              	.LBB1775:
 7078              	.LBB1773:
 7079              	.LBB1771:
 933:src/xeq.c     **** }
 7080              		.loc 1 933 24 view .LVU1960
 7081 000a 2B68     		ldr	r3, [r5]
 7082 000c B3F8E837 		ldrh	r3, [r3, #2024]
 7083 0010 44F20104 		movw	r4, #16385
 7084              	.LBE1771:
 7085              	.LBE1773:
 718:src/xeq.c     **** }
 7086              		.loc 1 718 2 view .LVU1961
 7087 0014 2340     		ands	r3, r3, r4
 7088 0016 B3F5804F 		cmp	r3, #16384
 7089              	.LBE1775:
 7090              	.LBE1777:
 876:src/xeq.c     **** 	lift();
 7091              		.loc 1 876 14 view .LVU1962
 7092 001a 0146     		mov	r1, r0
 7093              	.LVL503:
 7094              	.LBB1778:
 7095              	.LBI1767:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7096              		.loc 1 717 6 is_stmt 1 view .LVU1963
 7097              	.LBB1776:
 718:src/xeq.c     **** }
 7098              		.loc 1 718 2 view .LVU1964
 7099              	.LBB1774:
 7100              	.LBI1769:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7101              		.loc 1 932 5 view .LVU1965
 7102              	.LBB1772:
 933:src/xeq.c     **** }
 7103              		.loc 1 933 2 view .LVU1966
 7104              	.LBE1772:
 7105              	.LBE1774:
 718:src/xeq.c     **** }
 7106              		.loc 1 718 2 is_stmt 0 view .LVU1967
 7107 001c 0CBF     		ite	eq
 7108 001e 1022     		moveq	r2, #16
 7109 0020 0822     		movne	r2, #8
 7110 0022 6846     		mov	r0, sp
 7111              	.LVL504:
 718:src/xeq.c     **** }
 7112              		.loc 1 718 2 view .LVU1968
 7113 0024 FFF7FEFF 		bl	xcopy
 7114              	.LVL505:
 718:src/xeq.c     **** }
 7115              		.loc 1 718 2 view .LVU1969
 7116              	.LBE1776:
 7117              	.LBE1778:
 877:src/xeq.c     **** 	copyreg(StackBase, &r);
 7118              		.loc 1 877 2 is_stmt 1 view .LVU1970
ARM GAS  /tmp/ccjeMhND.s 			page 254


 7119 0028 FFF7FEFF 		bl	lift
 7120              	.LVL506:
 878:src/xeq.c     **** }
 7121              		.loc 1 878 2 view .LVU1971
 7122              	.LBB1779:
 7123              	.LBB1780:
 7124              	.LBB1781:
 7125              	.LBB1782:
 933:src/xeq.c     **** }
 7126              		.loc 1 933 24 is_stmt 0 view .LVU1972
 7127 002c 2B68     		ldr	r3, [r5]
 7128              	.LBE1782:
 7129              	.LBE1781:
 7130              	.LBE1780:
 7131              	.LBE1779:
 878:src/xeq.c     **** }
 7132              		.loc 1 878 2 view .LVU1973
 7133 002e 084A     		ldr	r2, .L575+4
 7134              	.LVL507:
 7135              	.LBB1786:
 7136              	.LBI1779:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7137              		.loc 1 717 6 is_stmt 1 view .LVU1974
 7138              	.LBB1785:
 718:src/xeq.c     **** }
 7139              		.loc 1 718 2 view .LVU1975
 7140              	.LBB1784:
 7141              	.LBI1781:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7142              		.loc 1 932 5 view .LVU1976
 7143              	.LBB1783:
 933:src/xeq.c     **** }
 7144              		.loc 1 933 2 view .LVU1977
 933:src/xeq.c     **** }
 7145              		.loc 1 933 24 is_stmt 0 view .LVU1978
 7146 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7147              	.LBE1783:
 7148              	.LBE1784:
 718:src/xeq.c     **** }
 7149              		.loc 1 718 2 view .LVU1979
 7150 0034 1068     		ldr	r0, [r2]
 7151 0036 1C40     		ands	r4, r4, r3
 7152 0038 B4F5804F 		cmp	r4, #16384
 7153 003c 6946     		mov	r1, sp
 7154 003e 0CBF     		ite	eq
 7155 0040 1022     		moveq	r2, #16
 7156              	.LVL508:
 718:src/xeq.c     **** }
 7157              		.loc 1 718 2 view .LVU1980
 7158 0042 0822     		movne	r2, #8
 7159 0044 FFF7FEFF 		bl	xcopy
 7160              	.LVL509:
 718:src/xeq.c     **** }
 7161              		.loc 1 718 2 view .LVU1981
 7162              	.LBE1785:
 7163              	.LBE1786:
 879:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 255


 7164              		.loc 1 879 1 view .LVU1982
 7165 0048 05B0     		add	sp, sp, #20
 7166              		.cfi_def_cfa_offset 12
 7167              		@ sp needed
 7168 004a 30BD     		pop	{r4, r5, pc}
 7169              	.L576:
 7170              		.align	2
 7171              	.L575:
 7172 004c 00000000 		.word	main_ram
 7173 0050 00000000 		.word	StackBase
 7174              		.cfi_endproc
 7175              	.LFE71:
 7177              		.section	.text.cpx_roll_up,"ax",%progbits
 7178              		.align	1
 7179              		.p2align 2,,3
 7180              		.global	cpx_roll_up
 7181              		.syntax unified
 7182              		.thumb
 7183              		.thumb_func
 7184              		.fpu fpv4-sp-d16
 7186              	cpx_roll_up:
 7187              	.LVL510:
 7188              	.LFB73:
 887:src/xeq.c     **** 	roll_up(OP_RUP);
 7189              		.loc 1 887 33 is_stmt 1 view -0
 7190              		.cfi_startproc
 7191              		@ args = 0, pretend = 0, frame = 0
 7192              		@ frame_needed = 0, uses_anonymous_args = 0
 888:src/xeq.c     **** 	roll_up(OP_RUP);
 7193              		.loc 1 888 2 view .LVU1984
 887:src/xeq.c     **** 	roll_up(OP_RUP);
 7194              		.loc 1 887 33 is_stmt 0 view .LVU1985
 7195 0000 08B5     		push	{r3, lr}
 7196              		.cfi_def_cfa_offset 8
 7197              		.cfi_offset 3, -8
 7198              		.cfi_offset 14, -4
 888:src/xeq.c     **** 	roll_up(OP_RUP);
 7199              		.loc 1 888 2 view .LVU1986
 7200 0002 0820     		movs	r0, #8
 7201              	.LVL511:
 888:src/xeq.c     **** 	roll_up(OP_RUP);
 7202              		.loc 1 888 2 view .LVU1987
 7203 0004 FFF7FEFF 		bl	roll_up
 7204              	.LVL512:
 889:src/xeq.c     **** 	set_was_complex();
 7205              		.loc 1 889 2 is_stmt 1 view .LVU1988
 7206 0008 0820     		movs	r0, #8
 7207 000a FFF7FEFF 		bl	roll_up
 7208              	.LVL513:
 890:src/xeq.c     **** }
 7209              		.loc 1 890 2 view .LVU1989
 7210              	.LBB1787:
 7211              	.LBI1787:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 7212              		.loc 1 530 13 view .LVU1990
 7213              	.LBB1788:
 531:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 256


 7214              		.loc 1 531 2 view .LVU1991
 531:src/xeq.c     **** }
 7215              		.loc 1 531 20 is_stmt 0 view .LVU1992
 7216 000e 034B     		ldr	r3, .L579
 7217 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 7218 0012 0121     		movs	r1, #1
 7219 0014 61F38712 		bfi	r2, r1, #6, #2
 7220 0018 1A75     		strb	r2, [r3, #20]
 7221              	.LBE1788:
 7222              	.LBE1787:
 891:src/xeq.c     **** 
 7223              		.loc 1 891 1 view .LVU1993
 7224 001a 08BD     		pop	{r3, pc}
 7225              	.L580:
 7226              		.align	2
 7227              	.L579:
 7228 001c 00000000 		.word	StateWhileOn
 7229              		.cfi_endproc
 7230              	.LFE73:
 7232              		.section	.text.fill,"ax",%progbits
 7233              		.align	1
 7234              		.p2align 2,,3
 7235              		.global	fill
 7236              		.syntax unified
 7237              		.thumb
 7238              		.thumb_func
 7239              		.fpu fpv4-sp-d16
 7241              	fill:
 7242              	.LVL514:
 7243              	.LFB76:
 910:src/xeq.c     **** 	const int n = stack_size();
 7244              		.loc 1 910 26 is_stmt 1 view -0
 7245              		.cfi_startproc
 7246              		@ args = 0, pretend = 0, frame = 0
 7247              		@ frame_needed = 0, uses_anonymous_args = 0
 911:src/xeq.c     **** 	int i;
 7248              		.loc 1 911 2 view .LVU1995
 7249              	.LBB1789:
 7250              	.LBI1789:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7251              		.loc 1 703 5 view .LVU1996
 7252              	.LBB1790:
 704:src/xeq.c     **** 		return 4;
 7253              		.loc 1 704 2 view .LVU1997
 7254              	.LBE1790:
 7255              	.LBE1789:
 910:src/xeq.c     **** 	const int n = stack_size();
 7256              		.loc 1 910 26 is_stmt 0 view .LVU1998
 7257 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7258              		.cfi_def_cfa_offset 24
 7259              		.cfi_offset 4, -24
 7260              		.cfi_offset 5, -20
 7261              		.cfi_offset 6, -16
 7262              		.cfi_offset 7, -12
 7263              		.cfi_offset 8, -8
 7264              		.cfi_offset 14, -4
 7265              	.LBB1796:
ARM GAS  /tmp/ccjeMhND.s 			page 257


 7266              	.LBB1793:
 704:src/xeq.c     **** 		return 4;
 7267              		.loc 1 704 8 view .LVU1999
 7268 0004 174E     		ldr	r6, .L592
 7269 0006 3368     		ldr	r3, [r6]
 704:src/xeq.c     **** 		return 4;
 7270              		.loc 1 704 6 view .LVU2000
 7271 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 7272              		.loc 1 704 5 view .LVU2001
 7273 000c 1207     		lsls	r2, r2, #28
 7274 000e 27D5     		bpl	.L585
 7275              	.LBB1791:
 7276              	.LBI1791:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 7277              		.loc 1 182 5 is_stmt 1 view .LVU2002
 7278              	.LBB1792:
 183:src/xeq.c     **** }
 7279              		.loc 1 183 2 view .LVU2003
 183:src/xeq.c     **** }
 7280              		.loc 1 183 9 is_stmt 0 view .LVU2004
 7281 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7282              	.LBE1792:
 7283              	.LBE1791:
 704:src/xeq.c     **** 		return 4;
 7284              		.loc 1 704 27 view .LVU2005
 7285 0014 9B0B     		lsrs	r3, r3, #14
 7286 0016 032B     		cmp	r3, #3
 7287 0018 1AD0     		beq	.L591
 706:src/xeq.c     **** }
 7288              		.loc 1 706 9 view .LVU2006
 7289 001a 0825     		movs	r5, #8
 7290              	.L582:
 7291              	.LVL515:
 706:src/xeq.c     **** }
 7292              		.loc 1 706 9 view .LVU2007
 7293              	.LBE1793:
 7294              	.LBE1796:
 912:src/xeq.c     **** 
 7295              		.loc 1 912 2 is_stmt 1 view .LVU2008
 914:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7296              		.loc 1 914 2 view .LVU2009
 914:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7297              		.loc 1 914 12 view .LVU2010
 7298 001c 124F     		ldr	r7, .L592+4
 7299 001e 6435     		adds	r5, r5, #100
 7300              	.LVL516:
 7301              	.LBB1797:
 7302              	.LBB1794:
 705:src/xeq.c     **** 	return 8;
 7303              		.loc 1 705 10 is_stmt 0 view .LVU2011
 7304 0020 6524     		movs	r4, #101
 7305              	.LBE1794:
 7306              	.LBE1797:
 7307              	.LBB1798:
 7308              	.LBB1799:
 7309              	.LBB1800:
ARM GAS  /tmp/ccjeMhND.s 			page 258


 7310              	.LBB1801:
 933:src/xeq.c     **** }
 7311              		.loc 1 933 24 view .LVU2012
 7312 0022 44F20108 		movw	r8, #16385
 7313              	.LVL517:
 7314              	.L584:
 933:src/xeq.c     **** }
 7315              		.loc 1 933 24 view .LVU2013
 7316              	.LBE1801:
 7317              	.LBE1800:
 7318              	.LBE1799:
 7319              	.LBE1798:
 915:src/xeq.c     **** }
 7320              		.loc 1 915 3 is_stmt 1 view .LVU2014
 7321              	.LBB1807:
 7322              	.LBI1807:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7323              		.loc 1 709 11 view .LVU2015
 7324              	.LBB1808:
 710:src/xeq.c     **** }
 7325              		.loc 1 710 2 view .LVU2016
 710:src/xeq.c     **** }
 7326              		.loc 1 710 9 is_stmt 0 view .LVU2017
 7327 0026 2046     		mov	r0, r4
 7328 0028 FFF7FEFF 		bl	get_reg_n
 7329              	.LVL518:
 710:src/xeq.c     **** }
 7330              		.loc 1 710 9 view .LVU2018
 7331              	.LBE1808:
 7332              	.LBE1807:
 7333              	.LBB1809:
 7334              	.LBI1798:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7335              		.loc 1 717 6 is_stmt 1 view .LVU2019
 7336              	.LBB1806:
 718:src/xeq.c     **** }
 7337              		.loc 1 718 2 view .LVU2020
 7338              	.LBB1804:
 7339              	.LBI1800:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7340              		.loc 1 932 5 view .LVU2021
 7341              	.LBB1802:
 933:src/xeq.c     **** }
 7342              		.loc 1 933 2 view .LVU2022
 933:src/xeq.c     **** }
 7343              		.loc 1 933 24 is_stmt 0 view .LVU2023
 7344 002c 3368     		ldr	r3, [r6]
 7345              	.LBE1802:
 7346              	.LBE1804:
 718:src/xeq.c     **** }
 7347              		.loc 1 718 2 view .LVU2024
 7348 002e 3968     		ldr	r1, [r7]
 7349              	.LBB1805:
 7350              	.LBB1803:
 933:src/xeq.c     **** }
 7351              		.loc 1 933 24 view .LVU2025
 7352 0030 B3F8E837 		ldrh	r3, [r3, #2024]
ARM GAS  /tmp/ccjeMhND.s 			page 259


 7353              	.LBE1803:
 7354              	.LBE1805:
 718:src/xeq.c     **** }
 7355              		.loc 1 718 2 view .LVU2026
 7356 0034 08EA0303 		and	r3, r8, r3
 7357 0038 B3F5804F 		cmp	r3, #16384
 7358 003c 0CBF     		ite	eq
 7359 003e 1022     		moveq	r2, #16
 7360 0040 0822     		movne	r2, #8
 7361 0042 0134     		adds	r4, r4, #1
 7362              	.LVL519:
 718:src/xeq.c     **** }
 7363              		.loc 1 718 2 view .LVU2027
 7364 0044 FFF7FEFF 		bl	xcopy
 7365              	.LVL520:
 718:src/xeq.c     **** }
 7366              		.loc 1 718 2 view .LVU2028
 7367              	.LBE1806:
 7368              	.LBE1809:
 914:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7369              		.loc 1 914 17 is_stmt 1 view .LVU2029
 914:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7370              		.loc 1 914 12 view .LVU2030
 914:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7371              		.loc 1 914 2 is_stmt 0 view .LVU2031
 7372 0048 AC42     		cmp	r4, r5
 7373 004a ECD1     		bne	.L584
 916:src/xeq.c     **** 
 7374              		.loc 1 916 1 view .LVU2032
 7375 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7376              	.LVL521:
 7377              	.L591:
 7378              	.LBB1810:
 7379              	.LBB1795:
 704:src/xeq.c     **** 		return 4;
 7380              		.loc 1 704 44 view .LVU2033
 7381 0050 064B     		ldr	r3, .L592+8
 704:src/xeq.c     **** 		return 4;
 7382              		.loc 1 704 41 view .LVU2034
 7383 0052 93F90130 		ldrsb	r3, [r3, #1]
 705:src/xeq.c     **** 	return 8;
 7384              		.loc 1 705 10 view .LVU2035
 7385 0056 002B     		cmp	r3, #0
 7386 0058 B4BF     		ite	lt
 7387 005a 0825     		movlt	r5, #8
 7388 005c 0425     		movge	r5, #4
 7389 005e DDE7     		b	.L582
 7390              	.L585:
 7391 0060 0425     		movs	r5, #4
 7392 0062 DBE7     		b	.L582
 7393              	.L593:
 7394              		.align	2
 7395              	.L592:
 7396 0064 00000000 		.word	main_ram
 7397 0068 00000000 		.word	StackBase
 7398 006c 00000000 		.word	XromParams
 7399              	.LBE1795:
ARM GAS  /tmp/ccjeMhND.s 			page 260


 7400              	.LBE1810:
 7401              		.cfi_endproc
 7402              	.LFE76:
 7404              		.section	.text.lower2,"ax",%progbits
 7405              		.align	1
 7406              		.p2align 2,,3
 7407              		.syntax unified
 7408              		.thumb
 7409              		.thumb_func
 7410              		.fpu fpv4-sp-d16
 7412              	lower2:
 7413              	.LFB54:
 764:src/xeq.c     **** 	const int n = stack_size();
 7414              		.loc 1 764 26 is_stmt 1 view -0
 7415              		.cfi_startproc
 7416              		@ args = 0, pretend = 0, frame = 0
 7417              		@ frame_needed = 0, uses_anonymous_args = 0
 765:src/xeq.c     **** 	int i;
 7418              		.loc 1 765 2 view .LVU2037
 7419              	.LBB1811:
 7420              	.LBI1811:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7421              		.loc 1 703 5 view .LVU2038
 7422              	.LBB1812:
 704:src/xeq.c     **** 		return 4;
 7423              		.loc 1 704 2 view .LVU2039
 7424              	.LBE1812:
 7425              	.LBE1811:
 764:src/xeq.c     **** 	const int n = stack_size();
 7426              		.loc 1 764 26 is_stmt 0 view .LVU2040
 7427 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7428              		.cfi_def_cfa_offset 24
 7429              		.cfi_offset 4, -24
 7430              		.cfi_offset 5, -20
 7431              		.cfi_offset 6, -16
 7432              		.cfi_offset 7, -12
 7433              		.cfi_offset 8, -8
 7434              		.cfi_offset 14, -4
 7435              	.LBB1818:
 7436              	.LBB1815:
 704:src/xeq.c     **** 		return 4;
 7437              		.loc 1 704 8 view .LVU2041
 7438 0004 194F     		ldr	r7, .L605
 7439 0006 3B68     		ldr	r3, [r7]
 704:src/xeq.c     **** 		return 4;
 7440              		.loc 1 704 6 view .LVU2042
 7441 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 7442              		.loc 1 704 5 view .LVU2043
 7443 000c 1207     		lsls	r2, r2, #28
 7444 000e 2BD5     		bpl	.L598
 7445              	.LBB1813:
 7446              	.LBI1813:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 7447              		.loc 1 182 5 is_stmt 1 view .LVU2044
 7448              	.LBB1814:
 183:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 261


 7449              		.loc 1 183 2 view .LVU2045
 183:src/xeq.c     **** }
 7450              		.loc 1 183 9 is_stmt 0 view .LVU2046
 7451 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7452              	.LBE1814:
 7453              	.LBE1813:
 704:src/xeq.c     **** 		return 4;
 7454              		.loc 1 704 27 view .LVU2047
 7455 0014 9B0B     		lsrs	r3, r3, #14
 7456 0016 032B     		cmp	r3, #3
 7457 0018 1ED0     		beq	.L604
 706:src/xeq.c     **** }
 7458              		.loc 1 706 9 view .LVU2048
 7459 001a 0826     		movs	r6, #8
 7460              	.L595:
 7461              	.LVL522:
 706:src/xeq.c     **** }
 7462              		.loc 1 706 9 view .LVU2049
 7463              	.LBE1815:
 7464              	.LBE1818:
 766:src/xeq.c     **** 
 7465              		.loc 1 766 2 is_stmt 1 view .LVU2050
 768:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7466              		.loc 1 768 2 view .LVU2051
 768:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7467              		.loc 1 768 12 view .LVU2052
 7468 001c 6236     		adds	r6, r6, #98
 7469              	.LVL523:
 7470              	.LBB1819:
 7471              	.LBB1816:
 705:src/xeq.c     **** 	return 8;
 7472              		.loc 1 705 10 is_stmt 0 view .LVU2053
 7473 001e 6424     		movs	r4, #100
 7474              	.LBE1816:
 7475              	.LBE1819:
 7476              	.LBB1820:
 7477              	.LBB1821:
 7478              	.LBB1822:
 7479              	.LBB1823:
 933:src/xeq.c     **** }
 7480              		.loc 1 933 24 view .LVU2054
 7481 0020 44F20108 		movw	r8, #16385
 7482              	.LVL524:
 7483              	.L597:
 933:src/xeq.c     **** }
 7484              		.loc 1 933 24 view .LVU2055
 7485              	.LBE1823:
 7486              	.LBE1822:
 7487              	.LBE1821:
 7488              	.LBE1820:
 769:src/xeq.c     **** }
 7489              		.loc 1 769 3 is_stmt 1 discriminator 3 view .LVU2056
 7490              	.LBB1830:
 7491              	.LBI1830:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7492              		.loc 1 709 11 discriminator 3 view .LVU2057
 7493              	.LBB1831:
ARM GAS  /tmp/ccjeMhND.s 			page 262


 710:src/xeq.c     **** }
 7494              		.loc 1 710 2 discriminator 3 view .LVU2058
 710:src/xeq.c     **** }
 7495              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU2059
 7496 0024 2046     		mov	r0, r4
 7497 0026 FFF7FEFF 		bl	get_reg_n
 7498              	.LVL525:
 7499 002a 0546     		mov	r5, r0
 7500              	.LBE1831:
 7501              	.LBE1830:
 7502              	.LBB1832:
 7503              	.LBB1833:
 7504 002c A01C     		adds	r0, r4, #2
 7505              	.LVL526:
 710:src/xeq.c     **** }
 7506              		.loc 1 710 9 discriminator 3 view .LVU2060
 7507              	.LBE1833:
 7508              	.LBI1832:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7509              		.loc 1 709 11 is_stmt 1 discriminator 3 view .LVU2061
 7510              	.LBB1834:
 710:src/xeq.c     **** }
 7511              		.loc 1 710 2 discriminator 3 view .LVU2062
 710:src/xeq.c     **** }
 7512              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU2063
 7513 002e FFF7FEFF 		bl	get_reg_n
 7514              	.LVL527:
 710:src/xeq.c     **** }
 7515              		.loc 1 710 9 discriminator 3 view .LVU2064
 7516              	.LBE1834:
 7517              	.LBE1832:
 7518              	.LBB1836:
 7519              	.LBB1828:
 7520              	.LBB1826:
 7521              	.LBB1824:
 933:src/xeq.c     **** }
 7522              		.loc 1 933 24 discriminator 3 view .LVU2065
 7523 0032 3B68     		ldr	r3, [r7]
 7524 0034 B3F8E837 		ldrh	r3, [r3, #2024]
 7525              	.LBE1824:
 7526              	.LBE1826:
 718:src/xeq.c     **** }
 7527              		.loc 1 718 2 discriminator 3 view .LVU2066
 7528 0038 08EA0303 		and	r3, r8, r3
 7529 003c B3F5804F 		cmp	r3, #16384
 7530              	.LBE1828:
 7531              	.LBE1836:
 7532              	.LBB1837:
 7533              	.LBB1835:
 710:src/xeq.c     **** }
 7534              		.loc 1 710 9 discriminator 3 view .LVU2067
 7535 0040 0146     		mov	r1, r0
 7536              	.LVL528:
 710:src/xeq.c     **** }
 7537              		.loc 1 710 9 discriminator 3 view .LVU2068
 7538              	.LBE1835:
 7539              	.LBE1837:
ARM GAS  /tmp/ccjeMhND.s 			page 263


 7540              	.LBB1838:
 7541              	.LBI1820:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7542              		.loc 1 717 6 is_stmt 1 discriminator 3 view .LVU2069
 7543              	.LBB1829:
 718:src/xeq.c     **** }
 7544              		.loc 1 718 2 discriminator 3 view .LVU2070
 7545              	.LBB1827:
 7546              	.LBI1822:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7547              		.loc 1 932 5 discriminator 3 view .LVU2071
 7548              	.LBB1825:
 933:src/xeq.c     **** }
 7549              		.loc 1 933 2 discriminator 3 view .LVU2072
 7550              	.LBE1825:
 7551              	.LBE1827:
 718:src/xeq.c     **** }
 7552              		.loc 1 718 2 is_stmt 0 discriminator 3 view .LVU2073
 7553 0042 0CBF     		ite	eq
 7554 0044 1022     		moveq	r2, #16
 7555 0046 0822     		movne	r2, #8
 7556 0048 2846     		mov	r0, r5
 7557              	.LVL529:
 718:src/xeq.c     **** }
 7558              		.loc 1 718 2 discriminator 3 view .LVU2074
 7559 004a 0134     		adds	r4, r4, #1
 7560              	.LVL530:
 718:src/xeq.c     **** }
 7561              		.loc 1 718 2 discriminator 3 view .LVU2075
 7562 004c FFF7FEFF 		bl	xcopy
 7563              	.LVL531:
 718:src/xeq.c     **** }
 7564              		.loc 1 718 2 discriminator 3 view .LVU2076
 7565              	.LBE1829:
 7566              	.LBE1838:
 768:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7567              		.loc 1 768 17 is_stmt 1 discriminator 3 view .LVU2077
 768:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7568              		.loc 1 768 12 discriminator 3 view .LVU2078
 768:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7569              		.loc 1 768 2 is_stmt 0 discriminator 3 view .LVU2079
 7570 0050 B442     		cmp	r4, r6
 7571 0052 E7D1     		bne	.L597
 770:src/xeq.c     **** 
 7572              		.loc 1 770 1 view .LVU2080
 7573 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7574              	.LVL532:
 7575              	.L604:
 7576              	.LBB1839:
 7577              	.LBB1817:
 704:src/xeq.c     **** 		return 4;
 7578              		.loc 1 704 44 view .LVU2081
 7579 0058 054B     		ldr	r3, .L605+4
 704:src/xeq.c     **** 		return 4;
 7580              		.loc 1 704 41 view .LVU2082
 7581 005a 93F90130 		ldrsb	r3, [r3, #1]
 705:src/xeq.c     **** 	return 8;
ARM GAS  /tmp/ccjeMhND.s 			page 264


 7582              		.loc 1 705 10 view .LVU2083
 7583 005e 002B     		cmp	r3, #0
 7584 0060 B4BF     		ite	lt
 7585 0062 0826     		movlt	r6, #8
 7586 0064 0426     		movge	r6, #4
 7587 0066 D9E7     		b	.L595
 7588              	.L598:
 7589 0068 0426     		movs	r6, #4
 7590 006a D7E7     		b	.L595
 7591              	.L606:
 7592              		.align	2
 7593              	.L605:
 7594 006c 00000000 		.word	main_ram
 7595 0070 00000000 		.word	XromParams
 7596              	.LBE1817:
 7597              	.LBE1839:
 7598              		.cfi_endproc
 7599              	.LFE54:
 7601              		.section	.text.drop,"ax",%progbits
 7602              		.align	1
 7603              		.p2align 2,,3
 7604              		.global	drop
 7605              		.syntax unified
 7606              		.thumb
 7607              		.thumb_func
 7608              		.fpu fpv4-sp-d16
 7610              	drop:
 7611              	.LVL533:
 7612              	.LFB77:
 918:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7613              		.loc 1 918 26 is_stmt 1 view -0
 7614              		.cfi_startproc
 7615              		@ args = 0, pretend = 0, frame = 0
 7616              		@ frame_needed = 0, uses_anonymous_args = 0
 919:src/xeq.c     **** 		lower2();
 7617              		.loc 1 919 2 view .LVU2085
 919:src/xeq.c     **** 		lower2();
 7618              		.loc 1 919 5 is_stmt 0 view .LVU2086
 7619 0000 0F28     		cmp	r0, #15
 7620 0002 01D0     		beq	.L614
 923:src/xeq.c     **** }
 7621              		.loc 1 923 3 is_stmt 1 view .LVU2087
 7622 0004 FFF7FEBF 		b	lower
 7623              	.LVL534:
 7624              	.L614:
 920:src/xeq.c     **** 		set_was_complex();
 7625              		.loc 1 920 3 view .LVU2088
 918:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7626              		.loc 1 918 26 is_stmt 0 view .LVU2089
 7627 0008 08B5     		push	{r3, lr}
 7628              		.cfi_def_cfa_offset 8
 7629              		.cfi_offset 3, -8
 7630              		.cfi_offset 14, -4
 920:src/xeq.c     **** 		set_was_complex();
 7631              		.loc 1 920 3 view .LVU2090
 7632 000a FFF7FEFF 		bl	lower2
 7633              	.LVL535:
ARM GAS  /tmp/ccjeMhND.s 			page 265


 921:src/xeq.c     **** 	} else
 7634              		.loc 1 921 3 is_stmt 1 view .LVU2091
 7635              	.LBB1840:
 7636              	.LBI1840:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 7637              		.loc 1 530 13 view .LVU2092
 7638              	.LBB1841:
 531:src/xeq.c     **** }
 7639              		.loc 1 531 2 view .LVU2093
 531:src/xeq.c     **** }
 7640              		.loc 1 531 20 is_stmt 0 view .LVU2094
 7641 000e 034B     		ldr	r3, .L615
 7642 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 7643 0012 0121     		movs	r1, #1
 7644 0014 61F38712 		bfi	r2, r1, #6, #2
 7645 0018 1A75     		strb	r2, [r3, #20]
 7646              	.LBE1841:
 7647              	.LBE1840:
 924:src/xeq.c     **** 
 7648              		.loc 1 924 1 view .LVU2095
 7649 001a 08BD     		pop	{r3, pc}
 7650              	.L616:
 7651              		.align	2
 7652              	.L615:
 7653 001c 00000000 		.word	StateWhileOn
 7654              		.cfi_endproc
 7655              	.LFE77:
 7657              		.section	.text.copyreg_n,"ax",%progbits
 7658              		.align	1
 7659              		.p2align 2,,3
 7660              		.global	copyreg_n
 7661              		.syntax unified
 7662              		.thumb
 7663              		.thumb_func
 7664              		.fpu fpv4-sp-d16
 7666              	copyreg_n:
 7667              	.LVL536:
 7668              	.LFB46:
 721:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7669              		.loc 1 721 30 is_stmt 1 view -0
 7670              		.cfi_startproc
 7671              		@ args = 0, pretend = 0, frame = 0
 7672              		@ frame_needed = 0, uses_anonymous_args = 0
 722:src/xeq.c     **** }
 7673              		.loc 1 722 2 view .LVU2097
 721:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7674              		.loc 1 721 30 is_stmt 0 view .LVU2098
 7675 0000 38B5     		push	{r3, r4, r5, lr}
 7676              		.cfi_def_cfa_offset 16
 7677              		.cfi_offset 3, -16
 7678              		.cfi_offset 4, -12
 7679              		.cfi_offset 5, -8
 7680              		.cfi_offset 14, -4
 721:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7681              		.loc 1 721 30 view .LVU2099
 7682 0002 0D46     		mov	r5, r1
 722:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 266


 7683              		.loc 1 722 2 view .LVU2100
 7684 0004 FFF7FEFF 		bl	get_reg_n
 7685              	.LVL537:
 722:src/xeq.c     **** }
 7686              		.loc 1 722 2 view .LVU2101
 7687 0008 0446     		mov	r4, r0
 722:src/xeq.c     **** }
 7688              		.loc 1 722 24 view .LVU2102
 7689 000a 2846     		mov	r0, r5
 7690 000c FFF7FEFF 		bl	get_reg_n
 7691              	.LVL538:
 7692              	.LBB1842:
 7693              	.LBB1843:
 7694              	.LBB1844:
 7695              	.LBB1845:
 933:src/xeq.c     **** }
 7696              		.loc 1 933 24 view .LVU2103
 7697 0010 094B     		ldr	r3, .L621
 7698 0012 1B68     		ldr	r3, [r3]
 7699 0014 B3F8E827 		ldrh	r2, [r3, #2024]
 7700 0018 44F20103 		movw	r3, #16385
 7701              	.LBE1845:
 7702              	.LBE1844:
 718:src/xeq.c     **** }
 7703              		.loc 1 718 2 view .LVU2104
 7704 001c 1340     		ands	r3, r3, r2
 7705 001e B3F5804F 		cmp	r3, #16384
 7706              	.LBE1843:
 7707              	.LBE1842:
 722:src/xeq.c     **** }
 7708              		.loc 1 722 24 view .LVU2105
 7709 0022 0146     		mov	r1, r0
 7710              	.LVL539:
 7711              	.LBB1850:
 7712              	.LBI1842:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7713              		.loc 1 717 6 is_stmt 1 view .LVU2106
 7714              	.LBB1848:
 718:src/xeq.c     **** }
 7715              		.loc 1 718 2 view .LVU2107
 7716              	.LBB1847:
 7717              	.LBI1844:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7718              		.loc 1 932 5 view .LVU2108
 7719              	.LBB1846:
 933:src/xeq.c     **** }
 7720              		.loc 1 933 2 view .LVU2109
 7721              	.LBE1846:
 7722              	.LBE1847:
 718:src/xeq.c     **** }
 7723              		.loc 1 718 2 is_stmt 0 view .LVU2110
 7724 0024 08BF     		it	eq
 7725 0026 1022     		moveq	r2, #16
 7726 0028 2046     		mov	r0, r4
 7727              	.LVL540:
 718:src/xeq.c     **** }
 7728              		.loc 1 718 2 view .LVU2111
ARM GAS  /tmp/ccjeMhND.s 			page 267


 7729 002a 18BF     		it	ne
 7730 002c 0822     		movne	r2, #8
 7731              	.LBE1848:
 7732              	.LBE1850:
 723:src/xeq.c     **** 
 7733              		.loc 1 723 1 view .LVU2112
 7734 002e BDE83840 		pop	{r3, r4, r5, lr}
 7735              		.cfi_restore 14
 7736              		.cfi_restore 5
 7737              		.cfi_restore 4
 7738              		.cfi_restore 3
 7739              		.cfi_def_cfa_offset 0
 7740              	.LVL541:
 7741              	.LBB1851:
 7742              	.LBB1849:
 718:src/xeq.c     **** }
 7743              		.loc 1 718 2 view .LVU2113
 7744 0032 FFF7FEBF 		b	xcopy
 7745              	.LVL542:
 7746              	.L622:
 718:src/xeq.c     **** }
 7747              		.loc 1 718 2 view .LVU2114
 7748 0036 00BF     		.align	2
 7749              	.L621:
 7750 0038 00000000 		.word	main_ram
 7751              	.LBE1849:
 7752              	.LBE1851:
 7753              		.cfi_endproc
 7754              	.LFE46:
 7756              		.section	.text.setlastX,"ax",%progbits
 7757              		.align	1
 7758              		.p2align 2,,3
 7759              		.global	setlastX
 7760              		.syntax unified
 7761              		.thumb
 7762              		.thumb_func
 7763              		.fpu fpv4-sp-d16
 7765              	setlastX:
 7766              	.LFB55:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7767              		.loc 1 773 21 is_stmt 1 view -0
 7768              		.cfi_startproc
 7769              		@ args = 0, pretend = 0, frame = 0
 7770              		@ frame_needed = 0, uses_anonymous_args = 0
 7771              		@ link register save eliminated.
 774:src/xeq.c     **** }
 7772              		.loc 1 774 2 view .LVU2116
 7773 0000 6421     		movs	r1, #100
 7774 0002 6C20     		movs	r0, #108
 7775 0004 FFF7FEBF 		b	copyreg_n
 7776              	.LVL543:
 7777              		.cfi_endproc
 7778              	.LFE55:
 7780              		.section	.text.setlastXY,"ax",%progbits
 7781              		.align	1
 7782              		.p2align 2,,3
 7783              		.syntax unified
ARM GAS  /tmp/ccjeMhND.s 			page 268


 7784              		.thumb
 7785              		.thumb_func
 7786              		.fpu fpv4-sp-d16
 7788              	setlastXY:
 7789              	.LFB56:
 777:src/xeq.c     **** 	setlastX();
 7790              		.loc 1 777 29 view -0
 7791              		.cfi_startproc
 7792              		@ args = 0, pretend = 0, frame = 0
 7793              		@ frame_needed = 0, uses_anonymous_args = 0
 778:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 7794              		.loc 1 778 2 view .LVU2118
 7795              	.LBB1852:
 7796              	.LBI1852:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7797              		.loc 1 773 6 view .LVU2119
 7798              	.LBB1853:
 774:src/xeq.c     **** }
 7799              		.loc 1 774 2 view .LVU2120
 7800              	.LBE1853:
 7801              	.LBE1852:
 777:src/xeq.c     **** 	setlastX();
 7802              		.loc 1 777 29 is_stmt 0 view .LVU2121
 7803 0000 08B5     		push	{r3, lr}
 7804              		.cfi_def_cfa_offset 8
 7805              		.cfi_offset 3, -8
 7806              		.cfi_offset 14, -4
 7807              	.LBB1855:
 7808              	.LBB1854:
 774:src/xeq.c     **** }
 7809              		.loc 1 774 2 view .LVU2122
 7810 0002 6421     		movs	r1, #100
 7811 0004 6C20     		movs	r0, #108
 7812 0006 FFF7FEFF 		bl	copyreg_n
 7813              	.LVL544:
 7814              	.LBE1854:
 7815              	.LBE1855:
 779:src/xeq.c     **** }
 7816              		.loc 1 779 2 is_stmt 1 view .LVU2123
 780:src/xeq.c     **** 
 7817              		.loc 1 780 1 is_stmt 0 view .LVU2124
 7818 000a BDE80840 		pop	{r3, lr}
 7819              		.cfi_restore 14
 7820              		.cfi_restore 3
 7821              		.cfi_def_cfa_offset 0
 779:src/xeq.c     **** }
 7822              		.loc 1 779 2 view .LVU2125
 7823 000e 6521     		movs	r1, #101
 7824 0010 6D20     		movs	r0, #109
 7825 0012 FFF7FEBF 		b	copyreg_n
 7826              	.LVL545:
 7827              		.cfi_endproc
 7828              	.LFE56:
 7830 0016 00BF     		.section	.text.getRegister,"ax",%progbits
 7831              		.align	1
 7832              		.p2align 2,,3
 7833              		.global	getRegister
ARM GAS  /tmp/ccjeMhND.s 			page 269


 7834              		.syntax unified
 7835              		.thumb
 7836              		.thumb_func
 7837              		.fpu fpv4-sp-d16
 7839              	getRegister:
 7840              	.LVL546:
 7841              	.LFB57:
 783:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7842              		.loc 1 783 49 is_stmt 1 view -0
 7843              		.cfi_startproc
 7844              		@ args = 0, pretend = 0, frame = 0
 7845              		@ frame_needed = 0, uses_anonymous_args = 0
 784:src/xeq.c     **** 	if (is_dblmode())
 7846              		.loc 1 784 2 view .LVU2127
 783:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7847              		.loc 1 783 49 is_stmt 0 view .LVU2128
 7848 0000 10B5     		push	{r4, lr}
 7849              		.cfi_def_cfa_offset 8
 7850              		.cfi_offset 4, -8
 7851              		.cfi_offset 14, -4
 783:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7852              		.loc 1 783 49 view .LVU2129
 7853 0002 0446     		mov	r4, r0
 784:src/xeq.c     **** 	if (is_dblmode())
 7854              		.loc 1 784 30 view .LVU2130
 7855 0004 0846     		mov	r0, r1
 7856              	.LVL547:
 784:src/xeq.c     **** 	if (is_dblmode())
 7857              		.loc 1 784 30 view .LVU2131
 7858 0006 FFF7FEFF 		bl	get_reg_n
 7859              	.LVL548:
 785:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7860              		.loc 1 785 2 is_stmt 1 view .LVU2132
 7861              	.LBB1856:
 7862              	.LBI1856:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7863              		.loc 1 932 5 view .LVU2133
 7864              	.LBB1857:
 933:src/xeq.c     **** }
 7865              		.loc 1 933 2 view .LVU2134
 933:src/xeq.c     **** }
 7866              		.loc 1 933 24 is_stmt 0 view .LVU2135
 7867 000a 094B     		ldr	r3, .L631
 7868 000c 1B68     		ldr	r3, [r3]
 7869 000e B3F8E827 		ldrh	r2, [r3, #2024]
 7870 0012 44F20103 		movw	r3, #16385
 7871              	.LBE1857:
 7872              	.LBE1856:
 785:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7873              		.loc 1 785 5 view .LVU2136
 7874 0016 1340     		ands	r3, r3, r2
 7875 0018 B3F5804F 		cmp	r3, #16384
 786:src/xeq.c     **** 	else
 7876              		.loc 1 786 3 view .LVU2137
 7877 001c 2146     		mov	r1, r4
 785:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7878              		.loc 1 785 5 view .LVU2138
ARM GAS  /tmp/ccjeMhND.s 			page 270


 7879 001e 03D0     		beq	.L630
 788:src/xeq.c     **** 	return r;
 7880              		.loc 1 788 3 is_stmt 1 view .LVU2139
 7881 0020 FFF7FEFF 		bl	decimal64ToNumber
 7882              	.LVL549:
 789:src/xeq.c     **** }
 7883              		.loc 1 789 2 view .LVU2140
 790:src/xeq.c     **** 
 7884              		.loc 1 790 1 is_stmt 0 view .LVU2141
 7885 0024 2046     		mov	r0, r4
 7886 0026 10BD     		pop	{r4, pc}
 7887              	.LVL550:
 7888              	.L630:
 786:src/xeq.c     **** 	else
 7889              		.loc 1 786 3 is_stmt 1 view .LVU2142
 7890 0028 FFF7FEFF 		bl	decimal128ToNumber
 7891              	.LVL551:
 789:src/xeq.c     **** }
 7892              		.loc 1 789 2 view .LVU2143
 790:src/xeq.c     **** 
 7893              		.loc 1 790 1 is_stmt 0 view .LVU2144
 7894 002c 2046     		mov	r0, r4
 7895 002e 10BD     		pop	{r4, pc}
 7896              	.LVL552:
 7897              	.L632:
 790:src/xeq.c     **** 
 7898              		.loc 1 790 1 view .LVU2145
 7899              		.align	2
 7900              	.L631:
 7901 0030 00000000 		.word	main_ram
 7902              		.cfi_endproc
 7903              	.LFE57:
 7905              		.section	.text.getX,"ax",%progbits
 7906              		.align	1
 7907              		.p2align 2,,3
 7908              		.global	getX
 7909              		.syntax unified
 7910              		.thumb
 7911              		.thumb_func
 7912              		.fpu fpv4-sp-d16
 7914              	getX:
 7915              	.LVL553:
 7916              	.LFB59:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 7917              		.loc 1 805 31 is_stmt 1 view -0
 7918              		.cfi_startproc
 7919              		@ args = 0, pretend = 0, frame = 0
 7920              		@ frame_needed = 0, uses_anonymous_args = 0
 7921              		@ link register save eliminated.
 806:src/xeq.c     **** }
 7922              		.loc 1 806 2 view .LVU2147
 806:src/xeq.c     **** }
 7923              		.loc 1 806 9 is_stmt 0 view .LVU2148
 7924 0000 6421     		movs	r1, #100
 7925 0002 FFF7FEBF 		b	getRegister
 7926              	.LVL554:
 806:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 271


 7927              		.loc 1 806 9 view .LVU2149
 7928              		.cfi_endproc
 7929              	.LFE59:
 7931 0006 00BF     		.section	.text.getY,"ax",%progbits
 7932              		.align	1
 7933              		.p2align 2,,3
 7934              		.global	getY
 7935              		.syntax unified
 7936              		.thumb
 7937              		.thumb_func
 7938              		.fpu fpv4-sp-d16
 7940              	getY:
 7941              	.LVL555:
 7942              	.LFB61:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 7943              		.loc 1 813 25 is_stmt 1 view -0
 7944              		.cfi_startproc
 7945              		@ args = 0, pretend = 0, frame = 0
 7946              		@ frame_needed = 0, uses_anonymous_args = 0
 7947              		@ link register save eliminated.
 814:src/xeq.c     **** }
 7948              		.loc 1 814 2 view .LVU2151
 7949 0000 6521     		movs	r1, #101
 7950 0002 FFF7FEBF 		b	getRegister
 7951              	.LVL556:
 814:src/xeq.c     **** }
 7952              		.loc 1 814 2 is_stmt 0 view .LVU2152
 7953              		.cfi_endproc
 7954              	.LFE61:
 7956 0006 00BF     		.section	.text.getXY,"ax",%progbits
 7957              		.align	1
 7958              		.p2align 2,,3
 7959              		.global	getXY
 7960              		.syntax unified
 7961              		.thumb
 7962              		.thumb_func
 7963              		.fpu fpv4-sp-d16
 7965              	getXY:
 7966              	.LVL557:
 7967              	.LFB65:
 835:src/xeq.c     **** 	getX(x);
 7968              		.loc 1 835 40 is_stmt 1 view -0
 7969              		.cfi_startproc
 7970              		@ args = 0, pretend = 0, frame = 0
 7971              		@ frame_needed = 0, uses_anonymous_args = 0
 836:src/xeq.c     **** 	getY(y);
 7972              		.loc 1 836 2 view .LVU2154
 7973              	.LBB1858:
 7974              	.LBI1858:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 7975              		.loc 1 805 12 view .LVU2155
 7976              	.LBB1859:
 806:src/xeq.c     **** }
 7977              		.loc 1 806 2 view .LVU2156
 7978              	.LBE1859:
 7979              	.LBE1858:
 835:src/xeq.c     **** 	getX(x);
ARM GAS  /tmp/ccjeMhND.s 			page 272


 7980              		.loc 1 835 40 is_stmt 0 view .LVU2157
 7981 0000 10B5     		push	{r4, lr}
 7982              		.cfi_def_cfa_offset 8
 7983              		.cfi_offset 4, -8
 7984              		.cfi_offset 14, -4
 835:src/xeq.c     **** 	getX(x);
 7985              		.loc 1 835 40 view .LVU2158
 7986 0002 0C46     		mov	r4, r1
 7987              	.LBB1861:
 7988              	.LBB1860:
 806:src/xeq.c     **** }
 7989              		.loc 1 806 9 view .LVU2159
 7990 0004 6421     		movs	r1, #100
 7991              	.LVL558:
 806:src/xeq.c     **** }
 7992              		.loc 1 806 9 view .LVU2160
 7993 0006 FFF7FEFF 		bl	getRegister
 7994              	.LVL559:
 806:src/xeq.c     **** }
 7995              		.loc 1 806 9 view .LVU2161
 7996              	.LBE1860:
 7997              	.LBE1861:
 837:src/xeq.c     **** }
 7998              		.loc 1 837 2 is_stmt 1 view .LVU2162
 7999              	.LBB1862:
 8000              	.LBI1862:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 8001              		.loc 1 813 6 view .LVU2163
 8002              	.LBB1863:
 814:src/xeq.c     **** }
 8003              		.loc 1 814 2 view .LVU2164
 8004 000a 2046     		mov	r0, r4
 8005 000c 6521     		movs	r1, #101
 8006              	.LBE1863:
 8007              	.LBE1862:
 838:src/xeq.c     **** 
 8008              		.loc 1 838 1 is_stmt 0 view .LVU2165
 8009 000e BDE81040 		pop	{r4, lr}
 8010              		.cfi_restore 14
 8011              		.cfi_restore 4
 8012              		.cfi_def_cfa_offset 0
 8013              	.LVL560:
 8014              	.LBB1865:
 8015              	.LBB1864:
 814:src/xeq.c     **** }
 8016              		.loc 1 814 2 view .LVU2166
 8017 0012 FFF7FEBF 		b	getRegister
 8018              	.LVL561:
 814:src/xeq.c     **** }
 8019              		.loc 1 814 2 view .LVU2167
 8020              	.LBE1864:
 8021              	.LBE1865:
 8022              		.cfi_endproc
 8023              	.LFE65:
 8025 0016 00BF     		.section	.text.getXYZ,"ax",%progbits
 8026              		.align	1
 8027              		.p2align 2,,3
ARM GAS  /tmp/ccjeMhND.s 			page 273


 8028              		.global	getXYZ
 8029              		.syntax unified
 8030              		.thumb
 8031              		.thumb_func
 8032              		.fpu fpv4-sp-d16
 8034              	getXYZ:
 8035              	.LVL562:
 8036              	.LFB67:
 845:src/xeq.c     **** 	getXY(x, y);
 8037              		.loc 1 845 55 is_stmt 1 view -0
 8038              		.cfi_startproc
 8039              		@ args = 0, pretend = 0, frame = 0
 8040              		@ frame_needed = 0, uses_anonymous_args = 0
 846:src/xeq.c     **** 	getZ(z);
 8041              		.loc 1 846 2 view .LVU2169
 845:src/xeq.c     **** 	getXY(x, y);
 8042              		.loc 1 845 55 is_stmt 0 view .LVU2170
 8043 0000 38B5     		push	{r3, r4, r5, lr}
 8044              		.cfi_def_cfa_offset 16
 8045              		.cfi_offset 3, -16
 8046              		.cfi_offset 4, -12
 8047              		.cfi_offset 5, -8
 8048              		.cfi_offset 14, -4
 845:src/xeq.c     **** 	getXY(x, y);
 8049              		.loc 1 845 55 view .LVU2171
 8050 0002 0D46     		mov	r5, r1
 8051              	.LVL563:
 8052              	.LBB1866:
 8053              	.LBI1866:
 835:src/xeq.c     **** 	getX(x);
 8054              		.loc 1 835 6 is_stmt 1 view .LVU2172
 8055              	.LBE1866:
 836:src/xeq.c     **** 	getY(y);
 8056              		.loc 1 836 2 view .LVU2173
 8057              	.LBB1873:
 8058              	.LBB1867:
 8059              	.LBI1867:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8060              		.loc 1 805 12 view .LVU2174
 8061              	.LBB1868:
 806:src/xeq.c     **** }
 8062              		.loc 1 806 2 view .LVU2175
 806:src/xeq.c     **** }
 8063              		.loc 1 806 9 is_stmt 0 view .LVU2176
 8064 0004 6421     		movs	r1, #100
 8065              	.LVL564:
 806:src/xeq.c     **** }
 8066              		.loc 1 806 9 view .LVU2177
 8067              	.LBE1868:
 8068              	.LBE1867:
 8069              	.LBE1873:
 845:src/xeq.c     **** 	getXY(x, y);
 8070              		.loc 1 845 55 view .LVU2178
 8071 0006 1446     		mov	r4, r2
 8072              	.LBB1874:
 8073              	.LBB1870:
 8074              	.LBB1869:
ARM GAS  /tmp/ccjeMhND.s 			page 274


 806:src/xeq.c     **** }
 8075              		.loc 1 806 9 view .LVU2179
 8076 0008 FFF7FEFF 		bl	getRegister
 8077              	.LVL565:
 806:src/xeq.c     **** }
 8078              		.loc 1 806 9 view .LVU2180
 8079              	.LBE1869:
 8080              	.LBE1870:
 8081              	.LBE1874:
 837:src/xeq.c     **** }
 8082              		.loc 1 837 2 is_stmt 1 view .LVU2181
 8083              	.LBB1875:
 8084              	.LBB1871:
 8085              	.LBI1871:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 8086              		.loc 1 813 6 view .LVU2182
 8087              	.LBB1872:
 814:src/xeq.c     **** }
 8088              		.loc 1 814 2 view .LVU2183
 8089 000c 2846     		mov	r0, r5
 8090 000e 6521     		movs	r1, #101
 8091 0010 FFF7FEFF 		bl	getRegister
 8092              	.LVL566:
 814:src/xeq.c     **** }
 8093              		.loc 1 814 2 is_stmt 0 view .LVU2184
 8094              	.LBE1872:
 8095              	.LBE1871:
 8096              	.LBE1875:
 847:src/xeq.c     **** }
 8097              		.loc 1 847 2 is_stmt 1 view .LVU2185
 8098              	.LBB1876:
 8099              	.LBI1876:
 821:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8100              		.loc 1 821 13 view .LVU2186
 8101              	.LBB1877:
 822:src/xeq.c     **** }
 8102              		.loc 1 822 2 view .LVU2187
 8103 0014 2046     		mov	r0, r4
 8104 0016 6621     		movs	r1, #102
 8105              	.LBE1877:
 8106              	.LBE1876:
 848:src/xeq.c     **** 
 8107              		.loc 1 848 1 is_stmt 0 view .LVU2188
 8108 0018 BDE83840 		pop	{r3, r4, r5, lr}
 8109              		.cfi_restore 14
 8110              		.cfi_restore 5
 8111              		.cfi_restore 4
 8112              		.cfi_restore 3
 8113              		.cfi_def_cfa_offset 0
 8114              	.LVL567:
 8115              	.LBB1879:
 8116              	.LBB1878:
 822:src/xeq.c     **** }
 8117              		.loc 1 822 2 view .LVU2189
 8118 001c FFF7FEBF 		b	getRegister
 8119              	.LVL568:
 822:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 275


 8120              		.loc 1 822 2 view .LVU2190
 8121              	.LBE1878:
 8122              	.LBE1879:
 8123              		.cfi_endproc
 8124              	.LFE67:
 8126              		.section	.text.getYZ,"ax",%progbits
 8127              		.align	1
 8128              		.p2align 2,,3
 8129              		.global	getYZ
 8130              		.syntax unified
 8131              		.thumb
 8132              		.thumb_func
 8133              		.fpu fpv4-sp-d16
 8135              	getYZ:
 8136              	.LVL569:
 8137              	.LFB69:
 862:src/xeq.c     **** 	getY(y);
 8138              		.loc 1 862 40 is_stmt 1 view -0
 8139              		.cfi_startproc
 8140              		@ args = 0, pretend = 0, frame = 0
 8141              		@ frame_needed = 0, uses_anonymous_args = 0
 863:src/xeq.c     **** 	getZ(z);
 8142              		.loc 1 863 2 view .LVU2192
 8143              	.LBB1880:
 8144              	.LBI1880:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 8145              		.loc 1 813 6 view .LVU2193
 8146              	.LBB1881:
 814:src/xeq.c     **** }
 8147              		.loc 1 814 2 view .LVU2194
 8148              	.LBE1881:
 8149              	.LBE1880:
 862:src/xeq.c     **** 	getY(y);
 8150              		.loc 1 862 40 is_stmt 0 view .LVU2195
 8151 0000 10B5     		push	{r4, lr}
 8152              		.cfi_def_cfa_offset 8
 8153              		.cfi_offset 4, -8
 8154              		.cfi_offset 14, -4
 862:src/xeq.c     **** 	getY(y);
 8155              		.loc 1 862 40 view .LVU2196
 8156 0002 0C46     		mov	r4, r1
 8157              	.LBB1883:
 8158              	.LBB1882:
 814:src/xeq.c     **** }
 8159              		.loc 1 814 2 view .LVU2197
 8160 0004 6521     		movs	r1, #101
 8161              	.LVL570:
 814:src/xeq.c     **** }
 8162              		.loc 1 814 2 view .LVU2198
 8163 0006 FFF7FEFF 		bl	getRegister
 8164              	.LVL571:
 814:src/xeq.c     **** }
 8165              		.loc 1 814 2 view .LVU2199
 8166              	.LBE1882:
 8167              	.LBE1883:
 864:src/xeq.c     **** }
 8168              		.loc 1 864 2 is_stmt 1 view .LVU2200
ARM GAS  /tmp/ccjeMhND.s 			page 276


 8169              	.LBB1884:
 8170              	.LBI1884:
 821:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8171              		.loc 1 821 13 view .LVU2201
 8172              	.LBB1885:
 822:src/xeq.c     **** }
 8173              		.loc 1 822 2 view .LVU2202
 8174 000a 2046     		mov	r0, r4
 8175 000c 6621     		movs	r1, #102
 8176              	.LBE1885:
 8177              	.LBE1884:
 865:src/xeq.c     **** 
 8178              		.loc 1 865 1 is_stmt 0 view .LVU2203
 8179 000e BDE81040 		pop	{r4, lr}
 8180              		.cfi_restore 14
 8181              		.cfi_restore 4
 8182              		.cfi_def_cfa_offset 0
 8183              	.LVL572:
 8184              	.LBB1887:
 8185              	.LBB1886:
 822:src/xeq.c     **** }
 8186              		.loc 1 822 2 view .LVU2204
 8187 0012 FFF7FEBF 		b	getRegister
 8188              	.LVL573:
 822:src/xeq.c     **** }
 8189              		.loc 1 822 2 view .LVU2205
 8190              	.LBE1886:
 8191              	.LBE1887:
 8192              		.cfi_endproc
 8193              	.LFE69:
 8195 0016 00BF     		.section	.text.getXYZT,"ax",%progbits
 8196              		.align	1
 8197              		.p2align 2,,3
 8198              		.global	getXYZT
 8199              		.syntax unified
 8200              		.thumb
 8201              		.thumb_func
 8202              		.fpu fpv4-sp-d16
 8204              	getXYZT:
 8205              	.LVL574:
 8206              	.LFB68:
 857:src/xeq.c     **** 	getXYZ(x, y, z);
 8207              		.loc 1 857 70 is_stmt 1 view -0
 8208              		.cfi_startproc
 8209              		@ args = 0, pretend = 0, frame = 0
 8210              		@ frame_needed = 0, uses_anonymous_args = 0
 858:src/xeq.c     **** 	getT(t);
 8211              		.loc 1 858 2 view .LVU2207
 857:src/xeq.c     **** 	getXYZ(x, y, z);
 8212              		.loc 1 857 70 is_stmt 0 view .LVU2208
 8213 0000 10B5     		push	{r4, lr}
 8214              		.cfi_def_cfa_offset 8
 8215              		.cfi_offset 4, -8
 8216              		.cfi_offset 14, -4
 857:src/xeq.c     **** 	getXYZ(x, y, z);
 8217              		.loc 1 857 70 view .LVU2209
 8218 0002 1C46     		mov	r4, r3
ARM GAS  /tmp/ccjeMhND.s 			page 277


 858:src/xeq.c     **** 	getT(t);
 8219              		.loc 1 858 2 view .LVU2210
 8220 0004 FFF7FEFF 		bl	getXYZ
 8221              	.LVL575:
 859:src/xeq.c     **** }
 8222              		.loc 1 859 2 is_stmt 1 view .LVU2211
 8223              	.LBB1888:
 8224              	.LBI1888:
 831:src/xeq.c     **** 	getRegister(t, regT_idx);
 8225              		.loc 1 831 13 view .LVU2212
 8226              	.LBB1889:
 832:src/xeq.c     **** }
 8227              		.loc 1 832 2 view .LVU2213
 8228 0008 2046     		mov	r0, r4
 8229 000a 6721     		movs	r1, #103
 8230              	.LBE1889:
 8231              	.LBE1888:
 860:src/xeq.c     **** 
 8232              		.loc 1 860 1 is_stmt 0 view .LVU2214
 8233 000c BDE81040 		pop	{r4, lr}
 8234              		.cfi_restore 14
 8235              		.cfi_restore 4
 8236              		.cfi_def_cfa_offset 0
 8237              	.LVL576:
 8238              	.LBB1891:
 8239              	.LBB1890:
 832:src/xeq.c     **** }
 8240              		.loc 1 832 2 view .LVU2215
 8241 0010 FFF7FEBF 		b	getRegister
 8242              	.LVL577:
 832:src/xeq.c     **** }
 8243              		.loc 1 832 2 view .LVU2216
 8244              	.LBE1890:
 8245              	.LBE1891:
 8246              		.cfi_endproc
 8247              	.LFE68:
 8249              		.section	.text.storcl_op,"ax",%progbits
 8250              		.align	1
 8251              		.p2align 2,,3
 8252              		.syntax unified
 8253              		.thumb
 8254              		.thumb_func
 8255              		.fpu fpv4-sp-d16
 8257              	storcl_op:
 8258              	.LVL578:
 8259              	.LFB111:
1450:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8260              		.loc 1 1450 76 is_stmt 1 view -0
 8261              		.cfi_startproc
 8262              		@ args = 0, pretend = 0, frame = 72
 8263              		@ frame_needed = 0, uses_anonymous_args = 0
1451:src/xeq.c     **** 
 8264              		.loc 1 1451 2 view .LVU2218
1450:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8265              		.loc 1 1450 76 is_stmt 0 view .LVU2219
 8266 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 8267              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccjeMhND.s 			page 278


 8268              		.cfi_offset 4, -20
 8269              		.cfi_offset 5, -16
 8270              		.cfi_offset 6, -12
 8271              		.cfi_offset 7, -8
 8272              		.cfi_offset 14, -4
 8273 0002 93B0     		sub	sp, sp, #76
 8274              		.cfi_def_cfa_offset 96
 8275              	.LVL579:
1453:src/xeq.c     **** 	getRegister(y, index);
 8276              		.loc 1 1453 2 is_stmt 1 view .LVU2220
 8277              	.LBB1892:
 8278              	.LBI1892:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8279              		.loc 1 805 12 view .LVU2221
 8280              	.LBB1893:
 806:src/xeq.c     **** }
 8281              		.loc 1 806 2 view .LVU2222
 8282              	.LBE1893:
 8283              	.LBE1892:
1450:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8284              		.loc 1 1450 76 is_stmt 0 view .LVU2223
 8285 0004 0E46     		mov	r6, r1
 8286 0006 0446     		mov	r4, r0
 8287              	.LBB1896:
 8288              	.LBB1894:
 806:src/xeq.c     **** }
 8289              		.loc 1 806 9 view .LVU2224
 8290 0008 6421     		movs	r1, #100
 8291              	.LVL580:
 806:src/xeq.c     **** }
 8292              		.loc 1 806 9 view .LVU2225
 8293 000a 6846     		mov	r0, sp
 8294              	.LVL581:
 806:src/xeq.c     **** }
 8295              		.loc 1 806 9 view .LVU2226
 8296              	.LBE1894:
 8297              	.LBE1896:
1450:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8298              		.loc 1 1450 76 view .LVU2227
 8299 000c 1D46     		mov	r5, r3
 8300 000e 1746     		mov	r7, r2
 8301              	.LBB1897:
 8302              	.LBB1895:
 806:src/xeq.c     **** }
 8303              		.loc 1 806 9 view .LVU2228
 8304 0010 FFF7FEFF 		bl	getRegister
 8305              	.LVL582:
 806:src/xeq.c     **** }
 8306              		.loc 1 806 9 view .LVU2229
 8307              	.LBE1895:
 8308              	.LBE1897:
1454:src/xeq.c     **** 	if (rev) {
 8309              		.loc 1 1454 2 is_stmt 1 view .LVU2230
 8310 0014 3146     		mov	r1, r6
 8311 0016 09A8     		add	r0, sp, #36
 8312              	.LVL583:
1454:src/xeq.c     **** 	if (rev) {
ARM GAS  /tmp/ccjeMhND.s 			page 279


 8313              		.loc 1 1454 2 is_stmt 0 view .LVU2231
 8314 0018 FFF7FEFF 		bl	getRegister
 8315              	.LVL584:
1455:src/xeq.c     **** 		x = y;
 8316              		.loc 1 1455 2 is_stmt 1 view .LVU2232
1455:src/xeq.c     **** 		x = y;
 8317              		.loc 1 1455 5 is_stmt 0 view .LVU2233
 8318 001c 4DB1     		cbz	r5, .L653
1457:src/xeq.c     **** 	}
 8319              		.loc 1 1457 5 view .LVU2234
 8320 001e 6946     		mov	r1, sp
1456:src/xeq.c     **** 		y = &a;
 8321              		.loc 1 1456 5 view .LVU2235
 8322 0020 09AA     		add	r2, sp, #36
 8323              	.LVL585:
 8324              	.L644:
1460:src/xeq.c     **** 	case 1:
 8325              		.loc 1 1460 2 is_stmt 1 view .LVU2236
 8326 0022 601E     		subs	r0, r4, #1
 8327 0024 0528     		cmp	r0, #5
 8328 0026 2BD8     		bhi	.L654
 8329 0028 DFE800F0 		tbb	[pc, r0]
 8330              	.L647:
 8331 002c 0C       		.byte	(.L652-.L647)/2
 8332 002d 12       		.byte	(.L651-.L647)/2
 8333 002e 18       		.byte	(.L650-.L647)/2
 8334 002f 1E       		.byte	(.L649-.L647)/2
 8335 0030 24       		.byte	(.L648-.L647)/2
 8336 0031 06       		.byte	(.L646-.L647)/2
 8337              	.LVL586:
 8338              		.p2align 1
 8339              	.L653:
1451:src/xeq.c     **** 
 8340              		.loc 1 1451 28 is_stmt 0 view .LVU2237
 8341 0032 09A9     		add	r1, sp, #36
 8342              	.LVL587:
1451:src/xeq.c     **** 
 8343              		.loc 1 1451 19 view .LVU2238
 8344 0034 6A46     		mov	r2, sp
 8345 0036 F4E7     		b	.L644
 8346              	.LVL588:
 8347              	.L646:
1477:src/xeq.c     **** 		break;
 8348              		.loc 1 1477 3 is_stmt 1 view .LVU2239
 8349 0038 3846     		mov	r0, r7
 8350 003a FFF7FEFF 		bl	dn_max
 8351              	.LVL589:
1478:src/xeq.c     **** 	default:
 8352              		.loc 1 1478 3 view .LVU2240
1482:src/xeq.c     **** }
 8353              		.loc 1 1482 9 is_stmt 0 view .LVU2241
 8354 003e 0020     		movs	r0, #0
 8355              	.L643:
1483:src/xeq.c     **** 
 8356              		.loc 1 1483 1 view .LVU2242
 8357 0040 13B0     		add	sp, sp, #76
 8358              		.cfi_remember_state
ARM GAS  /tmp/ccjeMhND.s 			page 280


 8359              		.cfi_def_cfa_offset 20
 8360              		@ sp needed
 8361 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 8362              	.LVL590:
 8363              	.L652:
 8364              		.cfi_restore_state
1462:src/xeq.c     **** 		break;
 8365              		.loc 1 1462 3 is_stmt 1 view .LVU2243
 8366 0044 3846     		mov	r0, r7
 8367 0046 FFF7FEFF 		bl	dn_add
 8368              	.LVL591:
1463:src/xeq.c     **** 	case 2:
 8369              		.loc 1 1463 3 view .LVU2244
1482:src/xeq.c     **** }
 8370              		.loc 1 1482 9 is_stmt 0 view .LVU2245
 8371 004a 0020     		movs	r0, #0
1483:src/xeq.c     **** 
 8372              		.loc 1 1483 1 view .LVU2246
 8373 004c 13B0     		add	sp, sp, #76
 8374              		.cfi_remember_state
 8375              		.cfi_def_cfa_offset 20
 8376              		@ sp needed
 8377 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 8378              	.LVL592:
 8379              	.L651:
 8380              		.cfi_restore_state
1465:src/xeq.c     **** 		break;
 8381              		.loc 1 1465 3 is_stmt 1 view .LVU2247
 8382 0050 3846     		mov	r0, r7
 8383 0052 FFF7FEFF 		bl	dn_subtract
 8384              	.LVL593:
1466:src/xeq.c     **** 	case 3:
 8385              		.loc 1 1466 3 view .LVU2248
1482:src/xeq.c     **** }
 8386              		.loc 1 1482 9 is_stmt 0 view .LVU2249
 8387 0056 0020     		movs	r0, #0
1483:src/xeq.c     **** 
 8388              		.loc 1 1483 1 view .LVU2250
 8389 0058 13B0     		add	sp, sp, #76
 8390              		.cfi_remember_state
 8391              		.cfi_def_cfa_offset 20
 8392              		@ sp needed
 8393 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 8394              	.LVL594:
 8395              	.L650:
 8396              		.cfi_restore_state
1468:src/xeq.c     **** 		break;
 8397              		.loc 1 1468 3 is_stmt 1 view .LVU2251
 8398 005c 3846     		mov	r0, r7
 8399 005e FFF7FEFF 		bl	dn_multiply
 8400              	.LVL595:
1469:src/xeq.c     **** 	case 4:
 8401              		.loc 1 1469 3 view .LVU2252
1482:src/xeq.c     **** }
 8402              		.loc 1 1482 9 is_stmt 0 view .LVU2253
 8403 0062 0020     		movs	r0, #0
1483:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 281


 8404              		.loc 1 1483 1 view .LVU2254
 8405 0064 13B0     		add	sp, sp, #76
 8406              		.cfi_remember_state
 8407              		.cfi_def_cfa_offset 20
 8408              		@ sp needed
 8409 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 8410              	.LVL596:
 8411              	.L649:
 8412              		.cfi_restore_state
1471:src/xeq.c     **** 		break;
 8413              		.loc 1 1471 3 is_stmt 1 view .LVU2255
 8414 0068 3846     		mov	r0, r7
 8415 006a FFF7FEFF 		bl	dn_divide
 8416              	.LVL597:
1472:src/xeq.c     **** 	case 5:
 8417              		.loc 1 1472 3 view .LVU2256
1482:src/xeq.c     **** }
 8418              		.loc 1 1482 9 is_stmt 0 view .LVU2257
 8419 006e 0020     		movs	r0, #0
1483:src/xeq.c     **** 
 8420              		.loc 1 1483 1 view .LVU2258
 8421 0070 13B0     		add	sp, sp, #76
 8422              		.cfi_remember_state
 8423              		.cfi_def_cfa_offset 20
 8424              		@ sp needed
 8425 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 8426              	.LVL598:
 8427              	.L648:
 8428              		.cfi_restore_state
1474:src/xeq.c     **** 		break;
 8429              		.loc 1 1474 3 is_stmt 1 view .LVU2259
 8430 0074 3846     		mov	r0, r7
 8431 0076 FFF7FEFF 		bl	dn_min
 8432              	.LVL599:
1475:src/xeq.c     **** 	case 6:
 8433              		.loc 1 1475 3 view .LVU2260
1482:src/xeq.c     **** }
 8434              		.loc 1 1482 9 is_stmt 0 view .LVU2261
 8435 007a 0020     		movs	r0, #0
1483:src/xeq.c     **** 
 8436              		.loc 1 1483 1 view .LVU2262
 8437 007c 13B0     		add	sp, sp, #76
 8438              		.cfi_def_cfa_offset 20
 8439              		@ sp needed
 8440 007e F0BD     		pop	{r4, r5, r6, r7, pc}
 8441              	.LVL600:
 8442              	.L654:
1482:src/xeq.c     **** }
 8443              		.loc 1 1482 9 view .LVU2263
 8444 0080 0120     		movs	r0, #1
 8445 0082 DDE7     		b	.L643
 8446              		.cfi_endproc
 8447              	.LFE111:
 8449              		.section	.text.storcl_cop,"ax",%progbits
 8450              		.align	1
 8451              		.p2align 2,,3
 8452              		.syntax unified
ARM GAS  /tmp/ccjeMhND.s 			page 282


 8453              		.thumb
 8454              		.thumb_func
 8455              		.fpu fpv4-sp-d16
 8457              	storcl_cop:
 8458              	.LVL601:
 8459              	.LFB116:
1584:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8460              		.loc 1 1584 93 is_stmt 1 view -0
 8461              		.cfi_startproc
 8462              		@ args = 4, pretend = 0, frame = 144
 8463              		@ frame_needed = 0, uses_anonymous_args = 0
1585:src/xeq.c     **** 
 8464              		.loc 1 1585 2 view .LVU2265
1584:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8465              		.loc 1 1584 93 is_stmt 0 view .LVU2266
 8466 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8467              		.cfi_def_cfa_offset 24
 8468              		.cfi_offset 4, -24
 8469              		.cfi_offset 5, -20
 8470              		.cfi_offset 6, -16
 8471              		.cfi_offset 7, -12
 8472              		.cfi_offset 8, -8
 8473              		.cfi_offset 14, -4
 8474 0004 A6B0     		sub	sp, sp, #152
 8475              		.cfi_def_cfa_offset 176
 8476              	.LVL602:
1587:src/xeq.c     **** 	getRegister(y + 0, index);
 8477              		.loc 1 1587 2 is_stmt 1 view .LVU2267
 8478              	.LBB1898:
 8479              	.LBI1898:
 835:src/xeq.c     **** 	getX(x);
 8480              		.loc 1 835 6 view .LVU2268
 8481              	.LBE1898:
 836:src/xeq.c     **** 	getY(y);
 8482              		.loc 1 836 2 view .LVU2269
 8483              	.LBB1907:
 8484              	.LBB1899:
 8485              	.LBI1899:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8486              		.loc 1 805 12 view .LVU2270
 8487              	.LBB1900:
 806:src/xeq.c     **** }
 8488              		.loc 1 806 2 view .LVU2271
 8489              	.LBE1900:
 8490              	.LBE1899:
 8491              	.LBE1907:
1584:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8492              		.loc 1 1584 93 is_stmt 0 view .LVU2272
 8493 0006 0D46     		mov	r5, r1
 8494 0008 0446     		mov	r4, r0
 8495              	.LBB1908:
 8496              	.LBB1903:
 8497              	.LBB1901:
 806:src/xeq.c     **** }
 8498              		.loc 1 806 9 view .LVU2273
 8499 000a 6421     		movs	r1, #100
 8500              	.LVL603:
ARM GAS  /tmp/ccjeMhND.s 			page 283


 806:src/xeq.c     **** }
 8501              		.loc 1 806 9 view .LVU2274
 8502 000c 02A8     		add	r0, sp, #8
 8503              	.LVL604:
 806:src/xeq.c     **** }
 8504              		.loc 1 806 9 view .LVU2275
 8505              	.LBE1901:
 8506              	.LBE1903:
 8507              	.LBE1908:
1584:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8508              		.loc 1 1584 93 view .LVU2276
 8509 000e 9046     		mov	r8, r2
 8510 0010 1E46     		mov	r6, r3
 8511 0012 2C9F     		ldr	r7, [sp, #176]
 8512              	.LBB1909:
 8513              	.LBB1904:
 8514              	.LBB1902:
 806:src/xeq.c     **** }
 8515              		.loc 1 806 9 view .LVU2277
 8516 0014 FFF7FEFF 		bl	getRegister
 8517              	.LVL605:
 806:src/xeq.c     **** }
 8518              		.loc 1 806 9 view .LVU2278
 8519              	.LBE1902:
 8520              	.LBE1904:
 8521              	.LBE1909:
 837:src/xeq.c     **** }
 8522              		.loc 1 837 2 is_stmt 1 view .LVU2279
 8523              	.LBB1910:
 8524              	.LBB1905:
 8525              	.LBI1905:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 8526              		.loc 1 813 6 view .LVU2280
 8527              	.LBB1906:
 814:src/xeq.c     **** }
 8528              		.loc 1 814 2 view .LVU2281
 8529 0018 6521     		movs	r1, #101
 8530 001a 0BA8     		add	r0, sp, #44
 8531              	.LVL606:
 814:src/xeq.c     **** }
 8532              		.loc 1 814 2 is_stmt 0 view .LVU2282
 8533 001c FFF7FEFF 		bl	getRegister
 8534              	.LVL607:
 814:src/xeq.c     **** }
 8535              		.loc 1 814 2 view .LVU2283
 8536              	.LBE1906:
 8537              	.LBE1905:
 8538              	.LBE1910:
1588:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8539              		.loc 1 1588 2 is_stmt 1 view .LVU2284
 8540 0020 2946     		mov	r1, r5
 8541 0022 14A8     		add	r0, sp, #80
 8542              	.LVL608:
1588:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8543              		.loc 1 1588 2 is_stmt 0 view .LVU2285
 8544 0024 FFF7FEFF 		bl	getRegister
 8545              	.LVL609:
ARM GAS  /tmp/ccjeMhND.s 			page 284


1589:src/xeq.c     **** 
 8546              		.loc 1 1589 2 is_stmt 1 view .LVU2286
 8547 0028 691C     		adds	r1, r5, #1
 8548 002a 1DA8     		add	r0, sp, #116
 8549 002c FFF7FEFF 		bl	getRegister
 8550              	.LVL610:
1591:src/xeq.c     **** 		x = y;
 8551              		.loc 1 1591 2 view .LVU2287
1591:src/xeq.c     **** 		x = y;
 8552              		.loc 1 1591 5 is_stmt 0 view .LVU2288
 8553 0030 47B1     		cbz	r7, .L664
1593:src/xeq.c     **** 	}
 8554              		.loc 1 1593 5 view .LVU2289
 8555 0032 02AA     		add	r2, sp, #8
 8556              	.LVL611:
1592:src/xeq.c     **** 		y = a;
 8557              		.loc 1 1592 5 view .LVU2290
 8558 0034 14A9     		add	r1, sp, #80
 8559              	.LVL612:
 8560              	.L657:
1596:src/xeq.c     **** 	case 1:
 8561              		.loc 1 1596 2 is_stmt 1 view .LVU2291
 8562 0036 601E     		subs	r0, r4, #1
 8563 0038 0328     		cmp	r0, #3
 8564 003a 3ED8     		bhi	.L665
 8565 003c DFE800F0 		tbb	[pc, r0]
 8566              	.L660:
 8567 0040 13       		.byte	(.L663-.L660)/2
 8568 0041 21       		.byte	(.L662-.L660)/2
 8569 0042 2F       		.byte	(.L661-.L660)/2
 8570 0043 05       		.byte	(.L659-.L660)/2
 8571              	.LVL613:
 8572              		.p2align 1
 8573              	.L664:
1585:src/xeq.c     **** 
 8574              		.loc 1 1585 33 is_stmt 0 view .LVU2292
 8575 0044 14AA     		add	r2, sp, #80
 8576              	.LVL614:
1585:src/xeq.c     **** 
 8577              		.loc 1 1585 25 view .LVU2293
 8578 0046 02A9     		add	r1, sp, #8
 8579              	.LVL615:
1585:src/xeq.c     **** 
 8580              		.loc 1 1585 25 view .LVU2294
 8581 0048 F5E7     		b	.L657
 8582              	.L659:
1607:src/xeq.c     **** 		break;
 8583              		.loc 1 1607 3 is_stmt 1 view .LVU2295
1607:src/xeq.c     **** 		break;
 8584              		.loc 1 1607 46 is_stmt 0 view .LVU2296
 8585 004a 01F12403 		add	r3, r1, #36
1607:src/xeq.c     **** 		break;
 8586              		.loc 1 1607 3 view .LVU2297
 8587 004e CDE90013 		strd	r1, r3, [sp]
 8588 0052 4046     		mov	r0, r8
 8589 0054 3146     		mov	r1, r6
 8590              	.LVL616:
ARM GAS  /tmp/ccjeMhND.s 			page 285


1607:src/xeq.c     **** 		break;
 8591              		.loc 1 1607 3 view .LVU2298
 8592 0056 02F12403 		add	r3, r2, #36
 8593 005a FFF7FEFF 		bl	cmplxDivide
 8594              	.LVL617:
1608:src/xeq.c     **** 	default:
 8595              		.loc 1 1608 3 is_stmt 1 view .LVU2299
1612:src/xeq.c     **** }
 8596              		.loc 1 1612 9 is_stmt 0 view .LVU2300
 8597 005e 0020     		movs	r0, #0
 8598              	.L656:
1613:src/xeq.c     **** 
 8599              		.loc 1 1613 1 view .LVU2301
 8600 0060 26B0     		add	sp, sp, #152
 8601              		.cfi_remember_state
 8602              		.cfi_def_cfa_offset 24
 8603              		@ sp needed
 8604 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8605              	.LVL618:
 8606              	.L663:
 8607              		.cfi_restore_state
1598:src/xeq.c     **** 		break;
 8608              		.loc 1 1598 3 is_stmt 1 view .LVU2302
1598:src/xeq.c     **** 		break;
 8609              		.loc 1 1598 43 is_stmt 0 view .LVU2303
 8610 0066 01F12403 		add	r3, r1, #36
1598:src/xeq.c     **** 		break;
 8611              		.loc 1 1598 3 view .LVU2304
 8612 006a CDE90013 		strd	r1, r3, [sp]
 8613 006e 4046     		mov	r0, r8
 8614 0070 3146     		mov	r1, r6
 8615              	.LVL619:
1598:src/xeq.c     **** 		break;
 8616              		.loc 1 1598 3 view .LVU2305
 8617 0072 02F12403 		add	r3, r2, #36
 8618 0076 FFF7FEFF 		bl	cmplxAdd
 8619              	.LVL620:
1599:src/xeq.c     **** 	case 2:
 8620              		.loc 1 1599 3 is_stmt 1 view .LVU2306
1612:src/xeq.c     **** }
 8621              		.loc 1 1612 9 is_stmt 0 view .LVU2307
 8622 007a 0020     		movs	r0, #0
1613:src/xeq.c     **** 
 8623              		.loc 1 1613 1 view .LVU2308
 8624 007c 26B0     		add	sp, sp, #152
 8625              		.cfi_remember_state
 8626              		.cfi_def_cfa_offset 24
 8627              		@ sp needed
 8628 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8629              	.LVL621:
 8630              	.L662:
 8631              		.cfi_restore_state
1601:src/xeq.c     **** 		break;
 8632              		.loc 1 1601 3 is_stmt 1 view .LVU2309
1601:src/xeq.c     **** 		break;
 8633              		.loc 1 1601 48 is_stmt 0 view .LVU2310
 8634 0082 01F12403 		add	r3, r1, #36
ARM GAS  /tmp/ccjeMhND.s 			page 286


1601:src/xeq.c     **** 		break;
 8635              		.loc 1 1601 3 view .LVU2311
 8636 0086 CDE90013 		strd	r1, r3, [sp]
 8637 008a 4046     		mov	r0, r8
 8638 008c 3146     		mov	r1, r6
 8639              	.LVL622:
1601:src/xeq.c     **** 		break;
 8640              		.loc 1 1601 3 view .LVU2312
 8641 008e 02F12403 		add	r3, r2, #36
 8642 0092 FFF7FEFF 		bl	cmplxSubtract
 8643              	.LVL623:
1602:src/xeq.c     **** 	case 3:
 8644              		.loc 1 1602 3 is_stmt 1 view .LVU2313
1612:src/xeq.c     **** }
 8645              		.loc 1 1612 9 is_stmt 0 view .LVU2314
 8646 0096 0020     		movs	r0, #0
1613:src/xeq.c     **** 
 8647              		.loc 1 1613 1 view .LVU2315
 8648 0098 26B0     		add	sp, sp, #152
 8649              		.cfi_remember_state
 8650              		.cfi_def_cfa_offset 24
 8651              		@ sp needed
 8652 009a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8653              	.LVL624:
 8654              	.L661:
 8655              		.cfi_restore_state
1604:src/xeq.c     **** 		break;
 8656              		.loc 1 1604 3 is_stmt 1 view .LVU2316
1604:src/xeq.c     **** 		break;
 8657              		.loc 1 1604 48 is_stmt 0 view .LVU2317
 8658 009e 01F12403 		add	r3, r1, #36
1604:src/xeq.c     **** 		break;
 8659              		.loc 1 1604 3 view .LVU2318
 8660 00a2 CDE90013 		strd	r1, r3, [sp]
 8661 00a6 4046     		mov	r0, r8
 8662 00a8 3146     		mov	r1, r6
 8663              	.LVL625:
1604:src/xeq.c     **** 		break;
 8664              		.loc 1 1604 3 view .LVU2319
 8665 00aa 02F12403 		add	r3, r2, #36
 8666 00ae FFF7FEFF 		bl	cmplxMultiply
 8667              	.LVL626:
1605:src/xeq.c     **** 	case 4:
 8668              		.loc 1 1605 3 is_stmt 1 view .LVU2320
1612:src/xeq.c     **** }
 8669              		.loc 1 1612 9 is_stmt 0 view .LVU2321
 8670 00b2 0020     		movs	r0, #0
1613:src/xeq.c     **** 
 8671              		.loc 1 1613 1 view .LVU2322
 8672 00b4 26B0     		add	sp, sp, #152
 8673              		.cfi_def_cfa_offset 24
 8674              		@ sp needed
 8675 00b6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8676              	.LVL627:
 8677              	.L665:
1612:src/xeq.c     **** }
 8678              		.loc 1 1612 9 view .LVU2323
ARM GAS  /tmp/ccjeMhND.s 			page 287


 8679 00ba 0120     		movs	r0, #1
 8680 00bc D0E7     		b	.L656
 8681              		.cfi_endproc
 8682              	.LFE116:
 8684 00be 00BF     		.section	.text.cpx_enter,"ax",%progbits
 8685              		.align	1
 8686              		.p2align 2,,3
 8687              		.global	cpx_enter
 8688              		.syntax unified
 8689              		.thumb
 8690              		.thumb_func
 8691              		.fpu fpv4-sp-d16
 8693              	cpx_enter:
 8694              	.LVL628:
 8695              	.LFB74:
 893:src/xeq.c     **** 	lift();
 8696              		.loc 1 893 31 is_stmt 1 view -0
 8697              		.cfi_startproc
 8698              		@ args = 0, pretend = 0, frame = 0
 8699              		@ frame_needed = 0, uses_anonymous_args = 0
 894:src/xeq.c     **** 	lift();
 8700              		.loc 1 894 2 view .LVU2325
 893:src/xeq.c     **** 	lift();
 8701              		.loc 1 893 31 is_stmt 0 view .LVU2326
 8702 0000 10B5     		push	{r4, lr}
 8703              		.cfi_def_cfa_offset 8
 8704              		.cfi_offset 4, -8
 8705              		.cfi_offset 14, -4
 894:src/xeq.c     **** 	lift();
 8706              		.loc 1 894 2 view .LVU2327
 8707 0002 FFF7FEFF 		bl	lift
 8708              	.LVL629:
 895:src/xeq.c     **** 	copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 8709              		.loc 1 895 2 is_stmt 1 view .LVU2328
 8710 0006 FFF7FEFF 		bl	lift
 8711              	.LVL630:
 896:src/xeq.c     **** 	set_was_complex();
 8712              		.loc 1 896 2 view .LVU2329
 8713 000a 6520     		movs	r0, #101
 8714 000c FFF7FEFF 		bl	get_reg_n
 8715              	.LVL631:
 8716 0010 0446     		mov	r4, r0
 896:src/xeq.c     **** 	set_was_complex();
 8717              		.loc 1 896 31 is_stmt 0 view .LVU2330
 8718 0012 6720     		movs	r0, #103
 8719 0014 FFF7FEFF 		bl	get_reg_n
 8720              	.LVL632:
 8721              	.LBB1911:
 8722              	.LBB1912:
 8723              	.LBB1913:
 8724              	.LBB1914:
 933:src/xeq.c     **** }
 8725              		.loc 1 933 24 view .LVU2331
 8726 0018 0B4B     		ldr	r3, .L671
 8727 001a 1B68     		ldr	r3, [r3]
 8728 001c B3F8E827 		ldrh	r2, [r3, #2024]
 8729 0020 44F20103 		movw	r3, #16385
ARM GAS  /tmp/ccjeMhND.s 			page 288


 8730              	.LBE1914:
 8731              	.LBE1913:
 718:src/xeq.c     **** }
 8732              		.loc 1 718 2 view .LVU2332
 8733 0024 1340     		ands	r3, r3, r2
 8734 0026 B3F5804F 		cmp	r3, #16384
 8735              	.LBE1912:
 8736              	.LBE1911:
 896:src/xeq.c     **** 	set_was_complex();
 8737              		.loc 1 896 31 view .LVU2333
 8738 002a 0146     		mov	r1, r0
 8739              	.LVL633:
 8740              	.LBB1918:
 8741              	.LBI1911:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 8742              		.loc 1 717 6 is_stmt 1 view .LVU2334
 8743              	.LBB1917:
 718:src/xeq.c     **** }
 8744              		.loc 1 718 2 view .LVU2335
 8745              	.LBB1916:
 8746              	.LBI1913:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 8747              		.loc 1 932 5 view .LVU2336
 8748              	.LBB1915:
 933:src/xeq.c     **** }
 8749              		.loc 1 933 2 view .LVU2337
 8750              	.LBE1915:
 8751              	.LBE1916:
 718:src/xeq.c     **** }
 8752              		.loc 1 718 2 is_stmt 0 view .LVU2338
 8753 002c 0CBF     		ite	eq
 8754 002e 1022     		moveq	r2, #16
 8755 0030 0822     		movne	r2, #8
 8756 0032 2046     		mov	r0, r4
 8757              	.LVL634:
 718:src/xeq.c     **** }
 8758              		.loc 1 718 2 view .LVU2339
 8759 0034 FFF7FEFF 		bl	xcopy
 8760              	.LVL635:
 718:src/xeq.c     **** }
 8761              		.loc 1 718 2 view .LVU2340
 8762              	.LBE1917:
 8763              	.LBE1918:
 897:src/xeq.c     **** }
 8764              		.loc 1 897 2 is_stmt 1 view .LVU2341
 8765              	.LBB1919:
 8766              	.LBI1919:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 8767              		.loc 1 530 13 view .LVU2342
 8768              	.LBB1920:
 531:src/xeq.c     **** }
 8769              		.loc 1 531 2 view .LVU2343
 531:src/xeq.c     **** }
 8770              		.loc 1 531 20 is_stmt 0 view .LVU2344
 8771 0038 044B     		ldr	r3, .L671+4
 8772 003a 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 8773 003c 0121     		movs	r1, #1
ARM GAS  /tmp/ccjeMhND.s 			page 289


 8774 003e 61F38712 		bfi	r2, r1, #6, #2
 8775 0042 1A75     		strb	r2, [r3, #20]
 8776              	.LBE1920:
 8777              	.LBE1919:
 898:src/xeq.c     **** 
 8778              		.loc 1 898 1 view .LVU2345
 8779 0044 10BD     		pop	{r4, pc}
 8780              	.L672:
 8781 0046 00BF     		.align	2
 8782              	.L671:
 8783 0048 00000000 		.word	main_ram
 8784 004c 00000000 		.word	StateWhileOn
 8785              		.cfi_endproc
 8786              	.LFE74:
 8788              		.section	.text.cpx_fill,"ax",%progbits
 8789              		.align	1
 8790              		.p2align 2,,3
 8791              		.global	cpx_fill
 8792              		.syntax unified
 8793              		.thumb
 8794              		.thumb_func
 8795              		.fpu fpv4-sp-d16
 8797              	cpx_fill:
 8798              	.LVL636:
 8799              	.LFB75:
 900:src/xeq.c     **** 	const int n = stack_size();
 8800              		.loc 1 900 30 is_stmt 1 view -0
 8801              		.cfi_startproc
 8802              		@ args = 0, pretend = 0, frame = 0
 8803              		@ frame_needed = 0, uses_anonymous_args = 0
 901:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
 8804              		.loc 1 901 2 view .LVU2347
 8805              	.LBB1921:
 8806              	.LBI1921:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 8807              		.loc 1 703 5 view .LVU2348
 8808              	.LBB1922:
 704:src/xeq.c     **** 		return 4;
 8809              		.loc 1 704 2 view .LVU2349
 8810              	.LBE1922:
 8811              	.LBE1921:
 900:src/xeq.c     **** 	const int n = stack_size();
 8812              		.loc 1 900 30 is_stmt 0 view .LVU2350
 8813 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 8814              		.cfi_def_cfa_offset 32
 8815              		.cfi_offset 3, -32
 8816              		.cfi_offset 4, -28
 8817              		.cfi_offset 5, -24
 8818              		.cfi_offset 6, -20
 8819              		.cfi_offset 7, -16
 8820              		.cfi_offset 8, -12
 8821              		.cfi_offset 9, -8
 8822              		.cfi_offset 14, -4
 8823              	.LBB1927:
 8824              	.LBB1925:
 704:src/xeq.c     **** 		return 4;
 8825              		.loc 1 704 8 view .LVU2351
ARM GAS  /tmp/ccjeMhND.s 			page 290


 8826 0004 1F4D     		ldr	r5, .L686
 8827 0006 2B68     		ldr	r3, [r5]
 704:src/xeq.c     **** 		return 4;
 8828              		.loc 1 704 6 view .LVU2352
 8829 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 8830              		.loc 1 704 5 view .LVU2353
 8831 000c 1207     		lsls	r2, r2, #28
 8832 000e 37D5     		bpl	.L678
 8833              	.LBB1923:
 8834              	.LBI1923:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 8835              		.loc 1 182 5 is_stmt 1 view .LVU2354
 8836              	.LBB1924:
 183:src/xeq.c     **** }
 8837              		.loc 1 183 2 view .LVU2355
 183:src/xeq.c     **** }
 8838              		.loc 1 183 9 is_stmt 0 view .LVU2356
 8839 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 8840              	.LBE1924:
 8841              	.LBE1923:
 704:src/xeq.c     **** 		return 4;
 8842              		.loc 1 704 27 view .LVU2357
 8843 0014 9B0B     		lsrs	r3, r3, #14
 8844 0016 032B     		cmp	r3, #3
 8845 0018 2AD0     		beq	.L685
 706:src/xeq.c     **** }
 8846              		.loc 1 706 9 view .LVU2358
 8847 001a 0827     		movs	r7, #8
 8848              	.L674:
 8849              	.LVL637:
 706:src/xeq.c     **** }
 8850              		.loc 1 706 9 view .LVU2359
 8851              	.LBE1925:
 8852              	.LBE1927:
 902:src/xeq.c     **** 	int i;
 8853              		.loc 1 902 2 is_stmt 1 view .LVU2360
 902:src/xeq.c     **** 	int i;
 8854              		.loc 1 902 22 is_stmt 0 view .LVU2361
 8855 001c 6520     		movs	r0, #101
 8856              	.LVL638:
 902:src/xeq.c     **** 	int i;
 8857              		.loc 1 902 22 view .LVU2362
 8858 001e FFF7FEFF 		bl	get_reg_n
 8859              	.LVL639:
 906:src/xeq.c     **** 	set_was_complex();
 8860              		.loc 1 906 3 view .LVU2363
 8861 0022 DFF86C90 		ldr	r9, .L686+12
 902:src/xeq.c     **** 	int i;
 8862              		.loc 1 902 22 view .LVU2364
 8863 0026 8046     		mov	r8, r0
 8864              	.LVL640:
 903:src/xeq.c     **** 
 8865              		.loc 1 903 2 is_stmt 1 view .LVU2365
 905:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8866              		.loc 1 905 2 view .LVU2366
 905:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
ARM GAS  /tmp/ccjeMhND.s 			page 291


 8867              		.loc 1 905 12 view .LVU2367
 905:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8868              		.loc 1 905 8 is_stmt 0 view .LVU2368
 8869 0028 0224     		movs	r4, #2
 8870              	.LBB1928:
 8871              	.LBB1929:
 8872              	.LBB1930:
 8873              	.LBB1931:
 933:src/xeq.c     **** }
 8874              		.loc 1 933 24 view .LVU2369
 8875 002a 44F20106 		movw	r6, #16385
 8876              	.LVL641:
 8877              	.L677:
 933:src/xeq.c     **** }
 8878              		.loc 1 933 24 view .LVU2370
 8879              	.LBE1931:
 8880              	.LBE1930:
 8881              	.LBE1929:
 8882              	.LBE1928:
 906:src/xeq.c     **** 	set_was_complex();
 8883              		.loc 1 906 3 is_stmt 1 view .LVU2371
 8884              	.LBB1942:
 8885              	.LBI1942:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 8886              		.loc 1 709 11 view .LVU2372
 8887              	.LBB1943:
 710:src/xeq.c     **** }
 8888              		.loc 1 710 2 view .LVU2373
 710:src/xeq.c     **** }
 8889              		.loc 1 710 9 is_stmt 0 view .LVU2374
 8890 002e 04F16400 		add	r0, r4, #100
 8891 0032 FFF7FEFF 		bl	get_reg_n
 8892              	.LVL642:
 710:src/xeq.c     **** }
 8893              		.loc 1 710 9 view .LVU2375
 8894              	.LBE1943:
 8895              	.LBE1942:
 906:src/xeq.c     **** 	set_was_complex();
 8896              		.loc 1 906 3 view .LVU2376
 8897 0036 E307     		lsls	r3, r4, #31
 8898              	.LBB1944:
 8899              	.LBB1938:
 8900              	.LBB1935:
 8901              	.LBB1932:
 933:src/xeq.c     **** }
 8902              		.loc 1 933 24 view .LVU2377
 8903 0038 2B68     		ldr	r3, [r5]
 8904              	.LBE1932:
 8905              	.LBE1935:
 8906              	.LBE1938:
 8907              	.LBE1944:
 906:src/xeq.c     **** 	set_was_complex();
 8908              		.loc 1 906 3 view .LVU2378
 8909 003a 58BF     		it	pl
 8910 003c D9F80010 		ldrpl	r1, [r9]
 8911              	.LBB1945:
 8912              	.LBB1939:
ARM GAS  /tmp/ccjeMhND.s 			page 292


 8913              	.LBB1936:
 8914              	.LBB1933:
 933:src/xeq.c     **** }
 8915              		.loc 1 933 24 view .LVU2379
 8916 0040 B3F8E837 		ldrh	r3, [r3, #2024]
 8917              	.LBE1933:
 8918              	.LBE1936:
 718:src/xeq.c     **** }
 8919              		.loc 1 718 2 view .LVU2380
 8920 0044 03EA0603 		and	r3, r3, r6
 8921              	.LBE1939:
 8922              	.LBE1945:
 906:src/xeq.c     **** 	set_was_complex();
 8923              		.loc 1 906 3 view .LVU2381
 8924 0048 48BF     		it	mi
 8925 004a 4146     		movmi	r1, r8
 8926              	.LVL643:
 8927              	.LBB1946:
 8928              	.LBI1928:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 8929              		.loc 1 717 6 is_stmt 1 view .LVU2382
 8930              	.LBB1940:
 718:src/xeq.c     **** }
 8931              		.loc 1 718 2 view .LVU2383
 8932              	.LBB1937:
 8933              	.LBI1930:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 8934              		.loc 1 932 5 view .LVU2384
 8935              	.LBB1934:
 933:src/xeq.c     **** }
 8936              		.loc 1 933 2 view .LVU2385
 8937              	.LBE1934:
 8938              	.LBE1937:
 718:src/xeq.c     **** }
 8939              		.loc 1 718 2 is_stmt 0 view .LVU2386
 8940 004c B3F5804F 		cmp	r3, #16384
 8941 0050 0CBF     		ite	eq
 8942 0052 1022     		moveq	r2, #16
 8943 0054 0822     		movne	r2, #8
 8944              	.LBE1940:
 8945              	.LBE1946:
 905:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8946              		.loc 1 905 18 view .LVU2387
 8947 0056 0134     		adds	r4, r4, #1
 8948              	.LVL644:
 8949              	.LBB1947:
 8950              	.LBB1941:
 718:src/xeq.c     **** }
 8951              		.loc 1 718 2 view .LVU2388
 8952 0058 FFF7FEFF 		bl	xcopy
 8953              	.LVL645:
 718:src/xeq.c     **** }
 8954              		.loc 1 718 2 view .LVU2389
 8955              	.LBE1941:
 8956              	.LBE1947:
 905:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8957              		.loc 1 905 17 is_stmt 1 view .LVU2390
ARM GAS  /tmp/ccjeMhND.s 			page 293


 905:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8958              		.loc 1 905 12 view .LVU2391
 905:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8959              		.loc 1 905 2 is_stmt 0 view .LVU2392
 8960 005c BC42     		cmp	r4, r7
 8961 005e E6D1     		bne	.L677
 907:src/xeq.c     **** }
 8962              		.loc 1 907 2 is_stmt 1 view .LVU2393
 8963              	.LBB1948:
 8964              	.LBI1948:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 8965              		.loc 1 530 13 view .LVU2394
 8966              	.LBB1949:
 531:src/xeq.c     **** }
 8967              		.loc 1 531 2 view .LVU2395
 531:src/xeq.c     **** }
 8968              		.loc 1 531 20 is_stmt 0 view .LVU2396
 8969 0060 094B     		ldr	r3, .L686+4
 8970 0062 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 8971 0064 0121     		movs	r1, #1
 8972 0066 61F38712 		bfi	r2, r1, #6, #2
 8973 006a 1A75     		strb	r2, [r3, #20]
 8974              	.LBE1949:
 8975              	.LBE1948:
 908:src/xeq.c     **** 
 8976              		.loc 1 908 1 view .LVU2397
 8977 006c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 8978              	.LVL646:
 8979              	.L685:
 8980              	.LBB1950:
 8981              	.LBB1926:
 704:src/xeq.c     **** 		return 4;
 8982              		.loc 1 704 44 view .LVU2398
 8983 0070 064B     		ldr	r3, .L686+8
 704:src/xeq.c     **** 		return 4;
 8984              		.loc 1 704 41 view .LVU2399
 8985 0072 93F90130 		ldrsb	r3, [r3, #1]
 705:src/xeq.c     **** 	return 8;
 8986              		.loc 1 705 10 view .LVU2400
 8987 0076 002B     		cmp	r3, #0
 8988 0078 B4BF     		ite	lt
 8989 007a 0827     		movlt	r7, #8
 8990 007c 0427     		movge	r7, #4
 8991 007e CDE7     		b	.L674
 8992              	.L678:
 8993 0080 0427     		movs	r7, #4
 8994 0082 CBE7     		b	.L674
 8995              	.L687:
 8996              		.align	2
 8997              	.L686:
 8998 0084 00000000 		.word	main_ram
 8999 0088 00000000 		.word	StateWhileOn
 9000 008c 00000000 		.word	XromParams
 9001 0090 00000000 		.word	StackBase
 9002              	.LBE1926:
 9003              	.LBE1950:
 9004              		.cfi_endproc
ARM GAS  /tmp/ccjeMhND.s 			page 294


 9005              	.LFE75:
 9007              		.section	.text.setRegister,"ax",%progbits
 9008              		.align	1
 9009              		.p2align 2,,3
 9010              		.global	setRegister
 9011              		.syntax unified
 9012              		.thumb
 9013              		.thumb_func
 9014              		.fpu fpv4-sp-d16
 9016              	setRegister:
 9017              	.LVL647:
 9018              	.LFB58:
 792:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9019              		.loc 1 792 49 is_stmt 1 view -0
 9020              		.cfi_startproc
 9021              		@ args = 0, pretend = 0, frame = 40
 9022              		@ frame_needed = 0, uses_anonymous_args = 0
 793:src/xeq.c     **** 	decNumber dn;
 9023              		.loc 1 793 2 view .LVU2402
 792:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9024              		.loc 1 792 49 is_stmt 0 view .LVU2403
 9025 0000 30B5     		push	{r4, r5, lr}
 9026              		.cfi_def_cfa_offset 12
 9027              		.cfi_offset 4, -12
 9028              		.cfi_offset 5, -8
 9029              		.cfi_offset 14, -4
 9030 0002 8BB0     		sub	sp, sp, #44
 9031              		.cfi_def_cfa_offset 56
 792:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9032              		.loc 1 792 49 view .LVU2404
 9033 0004 0C46     		mov	r4, r1
 793:src/xeq.c     **** 	decNumber dn;
 9034              		.loc 1 793 24 view .LVU2405
 9035 0006 FFF7FEFF 		bl	get_reg_n
 9036              	.LVL648:
 793:src/xeq.c     **** 	decNumber dn;
 9037              		.loc 1 793 24 view .LVU2406
 9038 000a 0546     		mov	r5, r0
 796:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9039              		.loc 1 796 8 view .LVU2407
 9040 000c 2046     		mov	r0, r4
 9041              	.LVL649:
 794:src/xeq.c     **** 
 9042              		.loc 1 794 2 is_stmt 1 view .LVU2408
 796:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9043              		.loc 1 796 2 view .LVU2409
 796:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9044              		.loc 1 796 8 is_stmt 0 view .LVU2410
 9045 000e FFF7FEFF 		bl	check_special
 9046              	.LVL650:
 796:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9047              		.loc 1 796 5 view .LVU2411
 9048 0012 08B1     		cbz	r0, .L692
 803:src/xeq.c     **** 
 9049              		.loc 1 803 1 view .LVU2412
 9050 0014 0BB0     		add	sp, sp, #44
 9051              		.cfi_remember_state
ARM GAS  /tmp/ccjeMhND.s 			page 295


 9052              		.cfi_def_cfa_offset 12
 9053              		@ sp needed
 9054 0016 30BD     		pop	{r4, r5, pc}
 9055              	.LVL651:
 9056              	.L692:
 9057              		.cfi_restore_state
 797:src/xeq.c     **** 		if (is_dblmode())
 9058              		.loc 1 797 3 is_stmt 1 view .LVU2413
 9059 0018 0C4A     		ldr	r2, .L694
 9060 001a 2146     		mov	r1, r4
 9061 001c 01A8     		add	r0, sp, #4
 9062 001e FFF7FEFF 		bl	decNumberNormalize
 9063              	.LVL652:
 798:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9064              		.loc 1 798 3 view .LVU2414
 9065              	.LBB1951:
 9066              	.LBI1951:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 9067              		.loc 1 932 5 view .LVU2415
 9068              	.LBB1952:
 933:src/xeq.c     **** }
 9069              		.loc 1 933 2 view .LVU2416
 933:src/xeq.c     **** }
 9070              		.loc 1 933 24 is_stmt 0 view .LVU2417
 9071 0022 0B4B     		ldr	r3, .L694+4
 9072 0024 1B68     		ldr	r3, [r3]
 9073 0026 B3F8E827 		ldrh	r2, [r3, #2024]
 9074 002a 44F20103 		movw	r3, #16385
 9075              	.LBE1952:
 9076              	.LBE1951:
 798:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9077              		.loc 1 798 6 view .LVU2418
 9078 002e 1340     		ands	r3, r3, r2
 9079 0030 B3F5804F 		cmp	r3, #16384
 799:src/xeq.c     **** 		else
 9080              		.loc 1 799 4 view .LVU2419
 9081 0034 01A9     		add	r1, sp, #4
 9082 0036 2846     		mov	r0, r5
 798:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9083              		.loc 1 798 6 view .LVU2420
 9084 0038 03D0     		beq	.L693
 9085              	.LVL653:
 801:src/xeq.c     **** 	}
 9086              		.loc 1 801 4 is_stmt 1 view .LVU2421
 9087 003a FFF7FEFF 		bl	packed_from_number
 9088              	.LVL654:
 803:src/xeq.c     **** 
 9089              		.loc 1 803 1 is_stmt 0 view .LVU2422
 9090 003e 0BB0     		add	sp, sp, #44
 9091              		.cfi_remember_state
 9092              		.cfi_def_cfa_offset 12
 9093              		@ sp needed
 9094 0040 30BD     		pop	{r4, r5, pc}
 9095              	.LVL655:
 9096              	.L693:
 9097              		.cfi_restore_state
 799:src/xeq.c     **** 		else
ARM GAS  /tmp/ccjeMhND.s 			page 296


 9098              		.loc 1 799 4 is_stmt 1 view .LVU2423
 9099 0042 FFF7FEFF 		bl	packed128_from_number
 9100              	.LVL656:
 803:src/xeq.c     **** 
 9101              		.loc 1 803 1 is_stmt 0 view .LVU2424
 9102 0046 0BB0     		add	sp, sp, #44
 9103              		.cfi_def_cfa_offset 12
 9104              		@ sp needed
 9105 0048 30BD     		pop	{r4, r5, pc}
 9106              	.LVL657:
 9107              	.L695:
 803:src/xeq.c     **** 
 9108              		.loc 1 803 1 view .LVU2425
 9109 004a 00BF     		.align	2
 9110              	.L694:
 9111 004c 00000000 		.word	Ctx
 9112 0050 00000000 		.word	main_ram
 9113              		.cfi_endproc
 9114              	.LFE58:
 9116              		.section	.text.setX,"ax",%progbits
 9117              		.align	1
 9118              		.p2align 2,,3
 9119              		.global	setX
 9120              		.syntax unified
 9121              		.thumb
 9122              		.thumb_func
 9123              		.fpu fpv4-sp-d16
 9125              	setX:
 9126              	.LVL658:
 9127              	.LFB60:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 9128              		.loc 1 809 31 is_stmt 1 view -0
 9129              		.cfi_startproc
 9130              		@ args = 0, pretend = 0, frame = 0
 9131              		@ frame_needed = 0, uses_anonymous_args = 0
 9132              		@ link register save eliminated.
 810:src/xeq.c     **** }
 9133              		.loc 1 810 2 view .LVU2427
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 9134              		.loc 1 809 31 is_stmt 0 view .LVU2428
 9135 0000 0146     		mov	r1, r0
 810:src/xeq.c     **** }
 9136              		.loc 1 810 2 view .LVU2429
 9137 0002 6420     		movs	r0, #100
 9138              	.LVL659:
 810:src/xeq.c     **** }
 9139              		.loc 1 810 2 view .LVU2430
 9140 0004 FFF7FEBF 		b	setRegister
 9141              	.LVL660:
 810:src/xeq.c     **** }
 9142              		.loc 1 810 2 view .LVU2431
 9143              		.cfi_endproc
 9144              	.LFE60:
 9146              		.section	.text.rarg_round,"ax",%progbits
 9147              		.align	1
 9148              		.p2align 2,,3
 9149              		.global	rarg_round
ARM GAS  /tmp/ccjeMhND.s 			page 297


 9150              		.syntax unified
 9151              		.thumb
 9152              		.thumb_func
 9153              		.fpu fpv4-sp-d16
 9155              	rarg_round:
 9156              	.LVL661:
 9157              	.LFB40:
 653:src/xeq.c     **** 	decNumber res, x;
 9158              		.loc 1 653 49 is_stmt 1 view -0
 9159              		.cfi_startproc
 9160              		@ args = 0, pretend = 0, frame = 80
 9161              		@ frame_needed = 0, uses_anonymous_args = 0
 654:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 9162              		.loc 1 654 2 view .LVU2433
 655:src/xeq.c     **** 
 9163              		.loc 1 655 2 view .LVU2434
 9164              	.LBB1965:
 9165              	.LBI1965:
 601:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 9166              		.loc 1 601 22 view .LVU2435
 9167              	.LBB1966:
 602:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 9168              		.loc 1 602 2 view .LVU2436
 607:src/xeq.c     **** }
 9169              		.loc 1 607 2 view .LVU2437
 607:src/xeq.c     **** }
 9170              		.loc 1 607 31 is_stmt 0 view .LVU2438
 9171 0000 184B     		ldr	r3, .L705
 9172              	.LBE1966:
 9173              	.LBE1965:
 653:src/xeq.c     **** 	decNumber res, x;
 9174              		.loc 1 653 49 view .LVU2439
 9175 0002 70B5     		push	{r4, r5, r6, lr}
 9176              		.cfi_def_cfa_offset 16
 9177              		.cfi_offset 4, -16
 9178              		.cfi_offset 5, -12
 9179              		.cfi_offset 6, -8
 9180              		.cfi_offset 14, -4
 9181              	.LBB1969:
 9182              	.LBB1967:
 607:src/xeq.c     **** }
 9183              		.loc 1 607 31 view .LVU2440
 9184 0004 1B68     		ldr	r3, [r3]
 9185              	.LVL662:
 607:src/xeq.c     **** }
 9186              		.loc 1 607 31 view .LVU2441
 9187              	.LBE1967:
 9188              	.LBE1969:
 657:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9189              		.loc 1 657 2 is_stmt 1 view .LVU2442
 657:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9190              		.loc 1 657 6 is_stmt 0 view .LVU2443
 9191 0006 93F8E857 		ldrb	r5, [r3, #2024]	@ zero_extendqisi2
 657:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9192              		.loc 1 657 5 view .LVU2444
 9193 000a EA07     		lsls	r2, r5, #31
 653:src/xeq.c     **** 	decNumber res, x;
ARM GAS  /tmp/ccjeMhND.s 			page 298


 9194              		.loc 1 653 49 view .LVU2445
 9195 000c 94B0     		sub	sp, sp, #80
 9196              		.cfi_def_cfa_offset 96
 657:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9197              		.loc 1 657 5 view .LVU2446
 9198 000e 06D5     		bpl	.L698
 658:src/xeq.c     **** 		return;
 9199              		.loc 1 658 3 is_stmt 1 view .LVU2447
 9200              	.LVL663:
 9201              	.LBB1970:
 9202              	.LBI1970:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9203              		.loc 1 537 5 view .LVU2448
 9204              	.LBB1971:
 538:src/xeq.c     **** 		Error = e;
 9205              		.loc 1 538 2 view .LVU2449
 538:src/xeq.c     **** 		Error = e;
 9206              		.loc 1 538 12 is_stmt 0 view .LVU2450
 9207 0010 154B     		ldr	r3, .L705+4
 9208              	.LVL664:
 538:src/xeq.c     **** 		Error = e;
 9209              		.loc 1 538 5 view .LVU2451
 9210 0012 1A68     		ldr	r2, [r3]
 9211 0014 0AB9     		cbnz	r2, .L697
 9212              	.LVL665:
 9213              	.LBB1972:
 9214              	.LBI1972:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9215              		.loc 1 537 5 is_stmt 1 view .LVU2452
 9216              	.LBB1973:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 9217              		.loc 1 539 3 view .LVU2453
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 9218              		.loc 1 539 9 is_stmt 0 view .LVU2454
 9219 0016 0D22     		movs	r2, #13
 9220 0018 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 9221              		.loc 1 540 3 is_stmt 1 view .LVU2455
 9222              	.LVL666:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 9223              		.loc 1 540 3 is_stmt 0 view .LVU2456
 9224              	.LBE1973:
 9225              	.LBE1972:
 9226              	.LBE1971:
 9227              	.LBE1970:
 659:src/xeq.c     **** 	}
 9228              		.loc 1 659 3 is_stmt 1 view .LVU2457
 9229              	.L697:
 669:src/xeq.c     **** 
 9230              		.loc 1 669 1 is_stmt 0 view .LVU2458
 9231 001a 14B0     		add	sp, sp, #80
 9232              		.cfi_remember_state
 9233              		.cfi_def_cfa_offset 16
 9234              		@ sp needed
 9235 001c 70BD     		pop	{r4, r5, r6, pc}
 9236              	.LVL667:
 9237              	.L698:
ARM GAS  /tmp/ccjeMhND.s 			page 299


 9238              		.cfi_restore_state
 9239              	.LBB1974:
 9240              	.LBB1968:
 607:src/xeq.c     **** }
 9241              		.loc 1 607 37 view .LVU2459
 9242 001e 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 9243              	.LVL668:
 607:src/xeq.c     **** }
 9244              		.loc 1 607 9 view .LVU2460
 9245 0022 124A     		ldr	r2, .L705+8
 607:src/xeq.c     **** }
 9246              		.loc 1 607 37 view .LVU2461
 9247 0024 C3F30213 		ubfx	r3, r3, #4, #3
 9248 0028 0C46     		mov	r4, r1
 607:src/xeq.c     **** }
 9249              		.loc 1 607 9 view .LVU2462
 9250 002a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9251 002c 0193     		str	r3, [sp, #4]
 9252              	.LBE1968:
 9253              	.LBE1974:
 662:src/xeq.c     **** 	getX(&x);
 9254              		.loc 1 662 2 is_stmt 1 view .LVU2463
 9255              	.LBB1975:
 9256              	.LBI1975:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 9257              		.loc 1 773 6 view .LVU2464
 9258              	.LBB1976:
 774:src/xeq.c     **** }
 9259              		.loc 1 774 2 view .LVU2465
 9260 002e 0646     		mov	r6, r0
 9261 0030 6421     		movs	r1, #100
 9262              	.LVL669:
 774:src/xeq.c     **** }
 9263              		.loc 1 774 2 is_stmt 0 view .LVU2466
 9264 0032 6C20     		movs	r0, #108
 9265              	.LVL670:
 774:src/xeq.c     **** }
 9266              		.loc 1 774 2 view .LVU2467
 9267 0034 FFF7FEFF 		bl	copyreg_n
 9268              	.LVL671:
 774:src/xeq.c     **** }
 9269              		.loc 1 774 2 view .LVU2468
 9270              	.LBE1976:
 9271              	.LBE1975:
 663:src/xeq.c     **** 	if (op == RARG_ROUND)
 9272              		.loc 1 663 2 is_stmt 1 view .LVU2469
 9273              	.LBB1977:
 9274              	.LBI1977:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 9275              		.loc 1 805 12 view .LVU2470
 9276              	.LBB1978:
 806:src/xeq.c     **** }
 9277              		.loc 1 806 2 view .LVU2471
 806:src/xeq.c     **** }
 9278              		.loc 1 806 9 is_stmt 0 view .LVU2472
 9279 0038 6421     		movs	r1, #100
 9280 003a 0BA8     		add	r0, sp, #44
ARM GAS  /tmp/ccjeMhND.s 			page 300


 9281              	.LVL672:
 806:src/xeq.c     **** }
 9282              		.loc 1 806 9 view .LVU2473
 9283 003c FFF7FEFF 		bl	getRegister
 9284              	.LVL673:
 806:src/xeq.c     **** }
 9285              		.loc 1 806 9 view .LVU2474
 9286              	.LBE1978:
 9287              	.LBE1977:
 664:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9288              		.loc 1 664 2 is_stmt 1 view .LVU2475
 664:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9289              		.loc 1 664 5 is_stmt 0 view .LVU2476
 9290 0040 752C     		cmp	r4, #117
 665:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9291              		.loc 1 665 3 view .LVU2477
 9292 0042 02AC     		add	r4, sp, #8
 664:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9293              		.loc 1 664 5 view .LVU2478
 9294 0044 019B     		ldr	r3, [sp, #4]
 665:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9295              		.loc 1 665 3 view .LVU2479
 9296 0046 3246     		mov	r2, r6
 9297 0048 0BA9     		add	r1, sp, #44
 9298 004a 2046     		mov	r0, r4
 664:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9299              		.loc 1 664 5 view .LVU2480
 9300 004c 07D0     		beq	.L704
 9301              	.LVL674:
 667:src/xeq.c     **** 	setX(&res);
 9302              		.loc 1 667 3 is_stmt 1 view .LVU2481
 9303 004e FFF7FEFF 		bl	decNumberRoundDecimals
 9304              	.LVL675:
 9305              	.L702:
 668:src/xeq.c     **** }
 9306              		.loc 1 668 2 view .LVU2482
 9307              	.LBB1979:
 9308              	.LBI1979:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 9309              		.loc 1 809 6 view .LVU2483
 9310              	.LBB1980:
 810:src/xeq.c     **** }
 9311              		.loc 1 810 2 view .LVU2484
 9312 0052 2146     		mov	r1, r4
 9313 0054 6420     		movs	r0, #100
 9314 0056 FFF7FEFF 		bl	setRegister
 9315              	.LVL676:
 810:src/xeq.c     **** }
 9316              		.loc 1 810 2 is_stmt 0 view .LVU2485
 9317              	.LBE1980:
 9318              	.LBE1979:
 669:src/xeq.c     **** 
 9319              		.loc 1 669 1 view .LVU2486
 9320 005a 14B0     		add	sp, sp, #80
 9321              		.cfi_remember_state
 9322              		.cfi_def_cfa_offset 16
 9323              		@ sp needed
ARM GAS  /tmp/ccjeMhND.s 			page 301


 9324 005c 70BD     		pop	{r4, r5, r6, pc}
 9325              	.LVL677:
 9326              	.L704:
 9327              		.cfi_restore_state
 665:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9328              		.loc 1 665 3 is_stmt 1 view .LVU2487
 9329 005e FFF7FEFF 		bl	decNumberRoundDigits
 9330              	.LVL678:
 665:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9331              		.loc 1 665 3 is_stmt 0 view .LVU2488
 9332 0062 F6E7     		b	.L702
 9333              	.L706:
 9334              		.align	2
 9335              	.L705:
 9336 0064 00000000 		.word	main_ram
 9337 0068 00000000 		.word	Error
 9338 006c 00000000 		.word	.LANCHOR1
 9339              		.cfi_endproc
 9340              	.LFE40:
 9342              		.section	.text.setY,"ax",%progbits
 9343              		.align	1
 9344              		.p2align 2,,3
 9345              		.global	setY
 9346              		.syntax unified
 9347              		.thumb
 9348              		.thumb_func
 9349              		.fpu fpv4-sp-d16
 9351              	setY:
 9352              	.LVL679:
 9353              	.LFB62:
 817:src/xeq.c     **** 	setRegister(regY_idx, y);
 9354              		.loc 1 817 31 is_stmt 1 view -0
 9355              		.cfi_startproc
 9356              		@ args = 0, pretend = 0, frame = 0
 9357              		@ frame_needed = 0, uses_anonymous_args = 0
 9358              		@ link register save eliminated.
 818:src/xeq.c     **** }
 9359              		.loc 1 818 2 view .LVU2490
 817:src/xeq.c     **** 	setRegister(regY_idx, y);
 9360              		.loc 1 817 31 is_stmt 0 view .LVU2491
 9361 0000 0146     		mov	r1, r0
 818:src/xeq.c     **** }
 9362              		.loc 1 818 2 view .LVU2492
 9363 0002 6520     		movs	r0, #101
 9364              	.LVL680:
 818:src/xeq.c     **** }
 9365              		.loc 1 818 2 view .LVU2493
 9366 0004 FFF7FEBF 		b	setRegister
 9367              	.LVL681:
 818:src/xeq.c     **** }
 9368              		.loc 1 818 2 view .LVU2494
 9369              		.cfi_endproc
 9370              	.LFE62:
 9372              		.section	.text.setXY,"ax",%progbits
 9373              		.align	1
 9374              		.p2align 2,,3
 9375              		.global	setXY
ARM GAS  /tmp/ccjeMhND.s 			page 302


 9376              		.syntax unified
 9377              		.thumb
 9378              		.thumb_func
 9379              		.fpu fpv4-sp-d16
 9381              	setXY:
 9382              	.LVL682:
 9383              	.LFB66:
 840:src/xeq.c     **** 	setX(x);
 9384              		.loc 1 840 52 is_stmt 1 view -0
 9385              		.cfi_startproc
 9386              		@ args = 0, pretend = 0, frame = 0
 9387              		@ frame_needed = 0, uses_anonymous_args = 0
 841:src/xeq.c     **** 	setY(y);
 9388              		.loc 1 841 2 view .LVU2496
 9389              	.LBB1981:
 9390              	.LBI1981:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 9391              		.loc 1 809 6 view .LVU2497
 9392              	.LBB1982:
 810:src/xeq.c     **** }
 9393              		.loc 1 810 2 view .LVU2498
 9394              	.LBE1982:
 9395              	.LBE1981:
 840:src/xeq.c     **** 	setX(x);
 9396              		.loc 1 840 52 is_stmt 0 view .LVU2499
 9397 0000 10B5     		push	{r4, lr}
 9398              		.cfi_def_cfa_offset 8
 9399              		.cfi_offset 4, -8
 9400              		.cfi_offset 14, -4
 840:src/xeq.c     **** 	setX(x);
 9401              		.loc 1 840 52 view .LVU2500
 9402 0002 0C46     		mov	r4, r1
 9403              	.LBB1984:
 9404              	.LBB1983:
 810:src/xeq.c     **** }
 9405              		.loc 1 810 2 view .LVU2501
 9406 0004 0146     		mov	r1, r0
 9407              	.LVL683:
 810:src/xeq.c     **** }
 9408              		.loc 1 810 2 view .LVU2502
 9409 0006 6420     		movs	r0, #100
 9410              	.LVL684:
 810:src/xeq.c     **** }
 9411              		.loc 1 810 2 view .LVU2503
 9412 0008 FFF7FEFF 		bl	setRegister
 9413              	.LVL685:
 810:src/xeq.c     **** }
 9414              		.loc 1 810 2 view .LVU2504
 9415              	.LBE1983:
 9416              	.LBE1984:
 842:src/xeq.c     **** }
 9417              		.loc 1 842 2 is_stmt 1 view .LVU2505
 9418              	.LBB1985:
 9419              	.LBI1985:
 817:src/xeq.c     **** 	setRegister(regY_idx, y);
 9420              		.loc 1 817 6 view .LVU2506
 9421              	.LBB1986:
ARM GAS  /tmp/ccjeMhND.s 			page 303


 818:src/xeq.c     **** }
 9422              		.loc 1 818 2 view .LVU2507
 9423 000c 2146     		mov	r1, r4
 9424 000e 6520     		movs	r0, #101
 9425              	.LBE1986:
 9426              	.LBE1985:
 843:src/xeq.c     **** 
 9427              		.loc 1 843 1 is_stmt 0 view .LVU2508
 9428 0010 BDE81040 		pop	{r4, lr}
 9429              		.cfi_restore 14
 9430              		.cfi_restore 4
 9431              		.cfi_def_cfa_offset 0
 9432              	.LVL686:
 9433              	.LBB1988:
 9434              	.LBB1987:
 818:src/xeq.c     **** }
 9435              		.loc 1 818 2 view .LVU2509
 9436 0014 FFF7FEBF 		b	setRegister
 9437              	.LVL687:
 818:src/xeq.c     **** }
 9438              		.loc 1 818 2 view .LVU2510
 9439              	.LBE1987:
 9440              	.LBE1988:
 9441              		.cfi_endproc
 9442              	.LFE66:
 9444              		.section	.text.get_reg_n_int,"ax",%progbits
 9445              		.align	1
 9446              		.p2align 2,,3
 9447              		.global	get_reg_n_int
 9448              		.syntax unified
 9449              		.thumb
 9450              		.thumb_func
 9451              		.fpu fpv4-sp-d16
 9453              	get_reg_n_int:
 9454              	.LVL688:
 9455              	.LFB90:
1230:src/xeq.c     **** 	long long int ll;
 9456              		.loc 1 1230 40 is_stmt 1 view -0
 9457              		.cfi_startproc
 9458              		@ args = 0, pretend = 0, frame = 8
 9459              		@ frame_needed = 0, uses_anonymous_args = 0
1231:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
 9460              		.loc 1 1231 2 view .LVU2512
1232:src/xeq.c     **** 	return ll;
 9461              		.loc 1 1232 2 view .LVU2513
1230:src/xeq.c     **** 	long long int ll;
 9462              		.loc 1 1230 40 is_stmt 0 view .LVU2514
 9463 0000 00B5     		push	{lr}
 9464              		.cfi_def_cfa_offset 4
 9465              		.cfi_offset 14, -4
 9466 0002 83B0     		sub	sp, sp, #12
 9467              		.cfi_def_cfa_offset 16
1232:src/xeq.c     **** 	return ll;
 9468              		.loc 1 1232 13 view .LVU2515
 9469 0004 FFF7FEFF 		bl	get_reg_n
 9470              	.LVL689:
1232:src/xeq.c     **** 	return ll;
ARM GAS  /tmp/ccjeMhND.s 			page 304


 9471              		.loc 1 1232 2 view .LVU2516
 9472 0008 0822     		movs	r2, #8
1232:src/xeq.c     **** 	return ll;
 9473              		.loc 1 1232 13 view .LVU2517
 9474 000a 0146     		mov	r1, r0
1232:src/xeq.c     **** 	return ll;
 9475              		.loc 1 1232 2 view .LVU2518
 9476 000c 6846     		mov	r0, sp
 9477 000e FFF7FEFF 		bl	xcopy
 9478              	.LVL690:
1233:src/xeq.c     **** }
 9479              		.loc 1 1233 2 is_stmt 1 view .LVU2519
1234:src/xeq.c     **** 
 9480              		.loc 1 1234 1 is_stmt 0 view .LVU2520
 9481 0012 DDE90001 		ldrd	r0, [sp]
 9482 0016 03B0     		add	sp, sp, #12
 9483              		.cfi_def_cfa_offset 4
 9484              		@ sp needed
 9485 0018 5DF804FB 		ldr	pc, [sp], #4
 9486              		.cfi_endproc
 9487              	.LFE90:
 9489              		.section	.text.storcl_intop,"ax",%progbits
 9490              		.align	1
 9491              		.p2align 2,,3
 9492              		.syntax unified
 9493              		.thumb
 9494              		.thumb_func
 9495              		.fpu fpv4-sp-d16
 9497              	storcl_intop:
 9498              	.LVL691:
 9499              	.LFB112:
1485:src/xeq.c     **** 	long long int x, y;
 9500              		.loc 1 1485 83 is_stmt 1 view -0
 9501              		.cfi_startproc
 9502              		@ args = 0, pretend = 0, frame = 0
 9503              		@ frame_needed = 0, uses_anonymous_args = 0
1486:src/xeq.c     **** 
 9504              		.loc 1 1486 2 view .LVU2522
1488:src/xeq.c     **** 	y = get_reg_n_int(index);
 9505              		.loc 1 1488 2 view .LVU2523
 9506              	.LBB1989:
 9507              	.LBI1989:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 9508              		.loc 1 1256 15 view .LVU2524
 9509              	.LBB1990:
1257:src/xeq.c     **** }
 9510              		.loc 1 1257 2 view .LVU2525
 9511              	.LBE1990:
 9512              	.LBE1989:
1485:src/xeq.c     **** 	long long int x, y;
 9513              		.loc 1 1485 83 is_stmt 0 view .LVU2526
 9514 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 9515              		.cfi_def_cfa_offset 32
 9516              		.cfi_offset 3, -32
 9517              		.cfi_offset 4, -28
 9518              		.cfi_offset 5, -24
 9519              		.cfi_offset 6, -20
ARM GAS  /tmp/ccjeMhND.s 			page 305


 9520              		.cfi_offset 7, -16
 9521              		.cfi_offset 8, -12
 9522              		.cfi_offset 9, -8
 9523              		.cfi_offset 14, -4
1485:src/xeq.c     **** 	long long int x, y;
 9524              		.loc 1 1485 83 view .LVU2527
 9525 0004 0446     		mov	r4, r0
 9526              	.LBB1994:
 9527              	.LBB1991:
1257:src/xeq.c     **** }
 9528              		.loc 1 1257 9 view .LVU2528
 9529 0006 6420     		movs	r0, #100
 9530              	.LVL692:
1257:src/xeq.c     **** }
 9531              		.loc 1 1257 9 view .LVU2529
 9532              	.LBE1991:
 9533              	.LBE1994:
1485:src/xeq.c     **** 	long long int x, y;
 9534              		.loc 1 1485 83 view .LVU2530
 9535 0008 8946     		mov	r9, r1
 9536 000a 9846     		mov	r8, r3
 9537 000c 1646     		mov	r6, r2
 9538              	.LBB1995:
 9539              	.LBB1992:
1257:src/xeq.c     **** }
 9540              		.loc 1 1257 9 view .LVU2531
 9541 000e FFF7FEFF 		bl	get_reg_n_int
 9542              	.LVL693:
1257:src/xeq.c     **** }
 9543              		.loc 1 1257 9 view .LVU2532
 9544 0012 0746     		mov	r7, r0
 9545              	.LBE1992:
 9546              	.LBE1995:
1489:src/xeq.c     **** 
 9547              		.loc 1 1489 6 view .LVU2533
 9548 0014 4846     		mov	r0, r9
 9549              	.LBB1996:
 9550              	.LBB1993:
1257:src/xeq.c     **** }
 9551              		.loc 1 1257 9 view .LVU2534
 9552 0016 0D46     		mov	r5, r1
 9553              	.LVL694:
1257:src/xeq.c     **** }
 9554              		.loc 1 1257 9 view .LVU2535
 9555              	.LBE1993:
 9556              	.LBE1996:
1489:src/xeq.c     **** 
 9557              		.loc 1 1489 2 is_stmt 1 view .LVU2536
1489:src/xeq.c     **** 
 9558              		.loc 1 1489 6 is_stmt 0 view .LVU2537
 9559 0018 FFF7FEFF 		bl	get_reg_n_int
 9560              	.LVL695:
1491:src/xeq.c     **** 		const long long int t = x;
 9561              		.loc 1 1491 2 is_stmt 1 view .LVU2538
1491:src/xeq.c     **** 		const long long int t = x;
 9562              		.loc 1 1491 5 is_stmt 0 view .LVU2539
 9563 001c B8F1000F 		cmp	r8, #0
ARM GAS  /tmp/ccjeMhND.s 			page 306


 9564 0020 05D0     		beq	.L713
 9565 0022 3A46     		mov	r2, r7
 9566 0024 2B46     		mov	r3, r5
 9567              	.LBB1997:
1493:src/xeq.c     **** 		y = t;
 9568              		.loc 1 1493 5 view .LVU2540
 9569 0026 0746     		mov	r7, r0
 9570              	.LVL696:
1493:src/xeq.c     **** 		y = t;
 9571              		.loc 1 1493 5 view .LVU2541
 9572 0028 0D46     		mov	r5, r1
 9573              	.LVL697:
1494:src/xeq.c     **** 	}
 9574              		.loc 1 1494 5 view .LVU2542
 9575 002a 1046     		mov	r0, r2
 9576              	.LVL698:
1494:src/xeq.c     **** 	}
 9577              		.loc 1 1494 5 view .LVU2543
 9578 002c 1946     		mov	r1, r3
 9579              	.LVL699:
 9580              	.L713:
1494:src/xeq.c     **** 	}
 9581              		.loc 1 1494 5 view .LVU2544
 9582              	.LBE1997:
1497:src/xeq.c     **** 	case 1:
 9583              		.loc 1 1497 2 is_stmt 1 view .LVU2545
 9584 002e 013C     		subs	r4, r4, #1
 9585 0030 052C     		cmp	r4, #5
 9586 0032 3AD8     		bhi	.L722
 9587 0034 DFE804F0 		tbb	[pc, r4]
 9588              	.L716:
 9589 0038 0C       		.byte	(.L721-.L716)/2
 9590 0039 15       		.byte	(.L720-.L716)/2
 9591 003a 1E       		.byte	(.L719-.L716)/2
 9592 003b 27       		.byte	(.L718-.L716)/2
 9593 003c 30       		.byte	(.L717-.L716)/2
 9594 003d 03       		.byte	(.L715-.L716)/2
 9595              		.p2align 1
 9596              	.L715:
1514:src/xeq.c     **** 		break;
 9597              		.loc 1 1514 3 view .LVU2546
1514:src/xeq.c     **** 		break;
 9598              		.loc 1 1514 8 is_stmt 0 view .LVU2547
 9599 003e 3A46     		mov	r2, r7
 9600 0040 2B46     		mov	r3, r5
 9601 0042 FFF7FEFF 		bl	intMax
 9602              	.LVL700:
1514:src/xeq.c     **** 		break;
 9603              		.loc 1 1514 6 view .LVU2548
 9604 0046 C6E90001 		strd	r0, [r6]
1515:src/xeq.c     **** 	default:
 9605              		.loc 1 1515 3 is_stmt 1 view .LVU2549
1519:src/xeq.c     **** }
 9606              		.loc 1 1519 9 is_stmt 0 view .LVU2550
 9607 004a 0020     		movs	r0, #0
 9608              	.L712:
1520:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 307


 9609              		.loc 1 1520 1 view .LVU2551
 9610 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9611              	.LVL701:
 9612              	.L721:
1499:src/xeq.c     **** 		break;
 9613              		.loc 1 1499 3 is_stmt 1 view .LVU2552
1499:src/xeq.c     **** 		break;
 9614              		.loc 1 1499 8 is_stmt 0 view .LVU2553
 9615 0050 3A46     		mov	r2, r7
 9616 0052 2B46     		mov	r3, r5
 9617 0054 FFF7FEFF 		bl	intAdd
 9618              	.LVL702:
1499:src/xeq.c     **** 		break;
 9619              		.loc 1 1499 6 view .LVU2554
 9620 0058 C6E90001 		strd	r0, [r6]
1500:src/xeq.c     **** 	case 2:
 9621              		.loc 1 1500 3 is_stmt 1 view .LVU2555
1519:src/xeq.c     **** }
 9622              		.loc 1 1519 9 is_stmt 0 view .LVU2556
 9623 005c 0020     		movs	r0, #0
1520:src/xeq.c     **** 
 9624              		.loc 1 1520 1 view .LVU2557
 9625 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9626              	.LVL703:
 9627              	.L720:
1502:src/xeq.c     **** 		break;
 9628              		.loc 1 1502 3 is_stmt 1 view .LVU2558
1502:src/xeq.c     **** 		break;
 9629              		.loc 1 1502 8 is_stmt 0 view .LVU2559
 9630 0062 3A46     		mov	r2, r7
 9631 0064 2B46     		mov	r3, r5
 9632 0066 FFF7FEFF 		bl	intSubtract
 9633              	.LVL704:
1502:src/xeq.c     **** 		break;
 9634              		.loc 1 1502 6 view .LVU2560
 9635 006a C6E90001 		strd	r0, [r6]
1503:src/xeq.c     **** 	case 3:
 9636              		.loc 1 1503 3 is_stmt 1 view .LVU2561
1519:src/xeq.c     **** }
 9637              		.loc 1 1519 9 is_stmt 0 view .LVU2562
 9638 006e 0020     		movs	r0, #0
1520:src/xeq.c     **** 
 9639              		.loc 1 1520 1 view .LVU2563
 9640 0070 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9641              	.LVL705:
 9642              	.L719:
1505:src/xeq.c     **** 		break;
 9643              		.loc 1 1505 3 is_stmt 1 view .LVU2564
1505:src/xeq.c     **** 		break;
 9644              		.loc 1 1505 8 is_stmt 0 view .LVU2565
 9645 0074 3A46     		mov	r2, r7
 9646 0076 2B46     		mov	r3, r5
 9647 0078 FFF7FEFF 		bl	intMultiply
 9648              	.LVL706:
1505:src/xeq.c     **** 		break;
 9649              		.loc 1 1505 6 view .LVU2566
 9650 007c C6E90001 		strd	r0, [r6]
ARM GAS  /tmp/ccjeMhND.s 			page 308


1506:src/xeq.c     **** 	case 4:
 9651              		.loc 1 1506 3 is_stmt 1 view .LVU2567
1519:src/xeq.c     **** }
 9652              		.loc 1 1519 9 is_stmt 0 view .LVU2568
 9653 0080 0020     		movs	r0, #0
1520:src/xeq.c     **** 
 9654              		.loc 1 1520 1 view .LVU2569
 9655 0082 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9656              	.LVL707:
 9657              	.L718:
1508:src/xeq.c     **** 		break;
 9658              		.loc 1 1508 3 is_stmt 1 view .LVU2570
1508:src/xeq.c     **** 		break;
 9659              		.loc 1 1508 8 is_stmt 0 view .LVU2571
 9660 0086 3A46     		mov	r2, r7
 9661 0088 2B46     		mov	r3, r5
 9662 008a FFF7FEFF 		bl	intDivide
 9663              	.LVL708:
1508:src/xeq.c     **** 		break;
 9664              		.loc 1 1508 6 view .LVU2572
 9665 008e C6E90001 		strd	r0, [r6]
1509:src/xeq.c     **** 	case 5:
 9666              		.loc 1 1509 3 is_stmt 1 view .LVU2573
1519:src/xeq.c     **** }
 9667              		.loc 1 1519 9 is_stmt 0 view .LVU2574
 9668 0092 0020     		movs	r0, #0
1520:src/xeq.c     **** 
 9669              		.loc 1 1520 1 view .LVU2575
 9670 0094 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9671              	.LVL709:
 9672              	.L717:
1511:src/xeq.c     **** 		break;
 9673              		.loc 1 1511 3 is_stmt 1 view .LVU2576
1511:src/xeq.c     **** 		break;
 9674              		.loc 1 1511 8 is_stmt 0 view .LVU2577
 9675 0098 3A46     		mov	r2, r7
 9676 009a 2B46     		mov	r3, r5
 9677 009c FFF7FEFF 		bl	intMin
 9678              	.LVL710:
1511:src/xeq.c     **** 		break;
 9679              		.loc 1 1511 6 view .LVU2578
 9680 00a0 C6E90001 		strd	r0, [r6]
1512:src/xeq.c     **** 	case 6:
 9681              		.loc 1 1512 3 is_stmt 1 view .LVU2579
1519:src/xeq.c     **** }
 9682              		.loc 1 1519 9 is_stmt 0 view .LVU2580
 9683 00a4 0020     		movs	r0, #0
1520:src/xeq.c     **** 
 9684              		.loc 1 1520 1 view .LVU2581
 9685 00a6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9686              	.LVL711:
 9687              	.L722:
1519:src/xeq.c     **** }
 9688              		.loc 1 1519 9 view .LVU2582
 9689 00aa 0120     		movs	r0, #1
 9690              	.LVL712:
1519:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 309


 9691              		.loc 1 1519 9 view .LVU2583
 9692 00ac CEE7     		b	.L712
 9693              		.cfi_endproc
 9694              	.LFE112:
 9696 00ae 00BF     		.section	.text.incdec,"ax",%progbits
 9697              		.align	1
 9698              		.p2align 2,,3
 9699              		.syntax unified
 9700              		.thumb
 9701              		.thumb_func
 9702              		.fpu fpv4-sp-d16
 9704              	incdec:
 9705              	.LVL713:
 9706              	.LFB188:
3188:src/xeq.c     **** 	if (is_intmode()) {
 9707              		.loc 1 3188 46 is_stmt 1 view -0
 9708              		.cfi_startproc
 9709              		@ args = 0, pretend = 0, frame = 80
 9710              		@ frame_needed = 0, uses_anonymous_args = 0
3189:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9711              		.loc 1 3189 2 view .LVU2585
3189:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9712              		.loc 1 3189 6 is_stmt 0 view .LVU2586
 9713 0000 244B     		ldr	r3, .L737
3188:src/xeq.c     **** 	if (is_intmode()) {
 9714              		.loc 1 3188 46 view .LVU2587
 9715 0002 70B5     		push	{r4, r5, r6, lr}
 9716              		.cfi_def_cfa_offset 16
 9717              		.cfi_offset 4, -16
 9718              		.cfi_offset 5, -12
 9719              		.cfi_offset 6, -8
 9720              		.cfi_offset 14, -4
3189:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9721              		.loc 1 3189 6 view .LVU2588
 9722 0004 1B68     		ldr	r3, [r3]
 9723 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3189:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9724              		.loc 1 3189 5 view .LVU2589
 9725 000a DB07     		lsls	r3, r3, #31
3188:src/xeq.c     **** 	if (is_intmode()) {
 9726              		.loc 1 3188 46 view .LVU2590
 9727 000c 94B0     		sub	sp, sp, #80
 9728              		.cfi_def_cfa_offset 96
3188:src/xeq.c     **** 	if (is_intmode()) {
 9729              		.loc 1 3188 46 view .LVU2591
 9730 000e 0D46     		mov	r5, r1
 9731 0010 0446     		mov	r4, r0
3189:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9732              		.loc 1 3189 5 view .LVU2592
 9733 0012 1ED5     		bpl	.L728
 9734              	.LVL714:
 9735              	.LBB2005:
 9736              	.LBI2005:
3188:src/xeq.c     **** 	if (is_intmode()) {
 9737              		.loc 1 3188 12 is_stmt 1 view .LVU2593
 9738              	.LBB2006:
3190:src/xeq.c     **** 		int xs;
ARM GAS  /tmp/ccjeMhND.s 			page 310


 9739              		.loc 1 3190 3 view .LVU2594
3190:src/xeq.c     **** 		int xs;
 9740              		.loc 1 3190 21 is_stmt 0 view .LVU2595
 9741 0014 FFF7FEFF 		bl	get_reg_n_int
 9742              	.LVL715:
3191:src/xeq.c     **** 		unsigned long long int xv;
 9743              		.loc 1 3191 3 is_stmt 1 view .LVU2596
3192:src/xeq.c     **** 
 9744              		.loc 1 3192 3 view .LVU2597
3194:src/xeq.c     **** 			x = intAdd(x, 1LL);
 9745              		.loc 1 3194 3 view .LVU2598
3195:src/xeq.c     **** 		else
 9746              		.loc 1 3195 8 is_stmt 0 view .LVU2599
 9747 0018 0122     		movs	r2, #1
 9748 001a 0023     		movs	r3, #0
3194:src/xeq.c     **** 			x = intAdd(x, 1LL);
 9749              		.loc 1 3194 6 view .LVU2600
 9750 001c 002D     		cmp	r5, #0
 9751 001e 33D1     		bne	.L735
3197:src/xeq.c     **** 		set_reg_n_int(arg, x);
 9752              		.loc 1 3197 4 is_stmt 1 view .LVU2601
3197:src/xeq.c     **** 		set_reg_n_int(arg, x);
 9753              		.loc 1 3197 8 is_stmt 0 view .LVU2602
 9754 0020 FFF7FEFF 		bl	intSubtract
 9755              	.LVL716:
3197:src/xeq.c     **** 		set_reg_n_int(arg, x);
 9756              		.loc 1 3197 8 view .LVU2603
 9757 0024 0646     		mov	r6, r0
 9758 0026 0D46     		mov	r5, r1
 9759              	.LVL717:
 9760              	.L730:
3198:src/xeq.c     **** 
 9761              		.loc 1 3198 3 is_stmt 1 view .LVU2604
 9762              	.LBB2007:
 9763              	.LBB2008:
1237:src/xeq.c     **** }
 9764              		.loc 1 1237 8 is_stmt 0 view .LVU2605
 9765 0028 2046     		mov	r0, r4
 9766 002a CDE90A65 		strd	r6, r5, [sp, #40]
 9767              	.LVL718:
1237:src/xeq.c     **** }
 9768              		.loc 1 1237 8 view .LVU2606
 9769              	.LBE2008:
 9770              	.LBI2007:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 9771              		.loc 1 1236 6 is_stmt 1 view .LVU2607
 9772              	.LBB2009:
1237:src/xeq.c     **** }
 9773              		.loc 1 1237 2 view .LVU2608
1237:src/xeq.c     **** }
 9774              		.loc 1 1237 8 is_stmt 0 view .LVU2609
 9775 002e FFF7FEFF 		bl	get_reg_n
 9776              	.LVL719:
1237:src/xeq.c     **** }
 9777              		.loc 1 1237 2 view .LVU2610
 9778 0032 0AA9     		add	r1, sp, #40
 9779 0034 0822     		movs	r2, #8
ARM GAS  /tmp/ccjeMhND.s 			page 311


 9780 0036 FFF7FEFF 		bl	xcopy
 9781              	.LVL720:
1237:src/xeq.c     **** }
 9782              		.loc 1 1237 2 view .LVU2611
 9783              	.LBE2009:
 9784              	.LBE2007:
3200:src/xeq.c     **** 		return xv != 0;
 9785              		.loc 1 3200 3 is_stmt 1 view .LVU2612
3200:src/xeq.c     **** 		return xv != 0;
 9786              		.loc 1 3200 8 is_stmt 0 view .LVU2613
 9787 003a 0AAA     		add	r2, sp, #40
 9788 003c 3046     		mov	r0, r6
 9789 003e 2946     		mov	r1, r5
 9790 0040 FFF7FEFF 		bl	extract_value
 9791              	.LVL721:
3201:src/xeq.c     **** 	} else {
 9792              		.loc 1 3201 3 is_stmt 1 view .LVU2614
3201:src/xeq.c     **** 	} else {
 9793              		.loc 1 3201 13 is_stmt 0 view .LVU2615
 9794 0044 50EA0103 		orrs	r3, r0, r1
 9795 0048 14BF     		ite	ne
 9796 004a 0120     		movne	r0, #1
 9797              	.LVL722:
3201:src/xeq.c     **** 	} else {
 9798              		.loc 1 3201 13 view .LVU2616
 9799 004c 0020     		moveq	r0, #0
 9800              	.LVL723:
3201:src/xeq.c     **** 	} else {
 9801              		.loc 1 3201 13 view .LVU2617
 9802              	.LBE2006:
 9803              	.LBE2005:
3214:src/xeq.c     **** 
 9804              		.loc 1 3214 1 view .LVU2618
 9805 004e 14B0     		add	sp, sp, #80
 9806              		.cfi_remember_state
 9807              		.cfi_def_cfa_offset 16
 9808              		@ sp needed
 9809 0050 70BD     		pop	{r4, r5, r6, pc}
 9810              	.LVL724:
 9811              	.L728:
 9812              		.cfi_restore_state
 9813              	.LBB2011:
3203:src/xeq.c     **** 
 9814              		.loc 1 3203 3 is_stmt 1 view .LVU2619
3205:src/xeq.c     **** 		if (inc)
 9815              		.loc 1 3205 3 view .LVU2620
 9816 0052 01A8     		add	r0, sp, #4
 9817              	.LVL725:
3205:src/xeq.c     **** 		if (inc)
 9818              		.loc 1 3205 3 is_stmt 0 view .LVU2621
 9819 0054 2146     		mov	r1, r4
 9820              	.LVL726:
3205:src/xeq.c     **** 		if (inc)
 9821              		.loc 1 3205 3 view .LVU2622
 9822 0056 FFF7FEFF 		bl	getRegister
 9823              	.LVL727:
3206:src/xeq.c     **** 			dn_inc(&x);
ARM GAS  /tmp/ccjeMhND.s 			page 312


 9824              		.loc 1 3206 3 is_stmt 1 view .LVU2623
3207:src/xeq.c     **** 		else
 9825              		.loc 1 3207 4 is_stmt 0 view .LVU2624
 9826 005a 01A8     		add	r0, sp, #4
3206:src/xeq.c     **** 			dn_inc(&x);
 9827              		.loc 1 3206 6 view .LVU2625
 9828 005c 8DB9     		cbnz	r5, .L736
3209:src/xeq.c     **** 		setRegister(arg, &x);
 9829              		.loc 1 3209 4 is_stmt 1 view .LVU2626
 9830 005e FFF7FEFF 		bl	dn_dec
 9831              	.LVL728:
 9832              	.L733:
3210:src/xeq.c     **** 		decNumberTrunc(&y, &x);
 9833              		.loc 1 3210 3 view .LVU2627
 9834 0062 2046     		mov	r0, r4
 9835 0064 01A9     		add	r1, sp, #4
 9836 0066 FFF7FEFF 		bl	setRegister
 9837              	.LVL729:
3211:src/xeq.c     **** 		return ! dn_eq0(&y);
 9838              		.loc 1 3211 3 view .LVU2628
 9839 006a 01A9     		add	r1, sp, #4
 9840 006c 0AA8     		add	r0, sp, #40
 9841 006e FFF7FEFF 		bl	decNumberTrunc
 9842              	.LVL730:
3212:src/xeq.c     **** 	}
 9843              		.loc 1 3212 3 view .LVU2629
3212:src/xeq.c     **** 	}
 9844              		.loc 1 3212 12 is_stmt 0 view .LVU2630
 9845 0072 0AA8     		add	r0, sp, #40
 9846 0074 FFF7FEFF 		bl	dn_eq0
 9847              	.LVL731:
3212:src/xeq.c     **** 	}
 9848              		.loc 1 3212 10 view .LVU2631
 9849 0078 B0FA80F0 		clz	r0, r0
 9850 007c 4009     		lsrs	r0, r0, #5
 9851              	.LBE2011:
3214:src/xeq.c     **** 
 9852              		.loc 1 3214 1 view .LVU2632
 9853 007e 14B0     		add	sp, sp, #80
 9854              		.cfi_remember_state
 9855              		.cfi_def_cfa_offset 16
 9856              		@ sp needed
 9857 0080 70BD     		pop	{r4, r5, r6, pc}
 9858              	.LVL732:
 9859              	.L736:
 9860              		.cfi_restore_state
 9861              	.LBB2012:
3207:src/xeq.c     **** 		else
 9862              		.loc 1 3207 4 is_stmt 1 view .LVU2633
 9863 0082 FFF7FEFF 		bl	dn_inc
 9864              	.LVL733:
 9865 0086 ECE7     		b	.L733
 9866              	.LVL734:
 9867              	.L735:
3207:src/xeq.c     **** 		else
 9868              		.loc 1 3207 4 is_stmt 0 view .LVU2634
 9869              	.LBE2012:
ARM GAS  /tmp/ccjeMhND.s 			page 313


 9870              	.LBB2013:
 9871              	.LBB2010:
3195:src/xeq.c     **** 		else
 9872              		.loc 1 3195 4 is_stmt 1 view .LVU2635
3195:src/xeq.c     **** 		else
 9873              		.loc 1 3195 8 is_stmt 0 view .LVU2636
 9874 0088 FFF7FEFF 		bl	intAdd
 9875              	.LVL735:
3195:src/xeq.c     **** 		else
 9876              		.loc 1 3195 8 view .LVU2637
 9877 008c 0646     		mov	r6, r0
 9878 008e 0D46     		mov	r5, r1
 9879              	.LVL736:
3195:src/xeq.c     **** 		else
 9880              		.loc 1 3195 8 view .LVU2638
 9881 0090 CAE7     		b	.L730
 9882              	.L738:
 9883 0092 00BF     		.align	2
 9884              	.L737:
 9885 0094 00000000 		.word	main_ram
 9886              	.LBE2010:
 9887              	.LBE2013:
 9888              		.cfi_endproc
 9889              	.LFE188:
 9891              		.section	.text.set_reg_n_int,"ax",%progbits
 9892              		.align	1
 9893              		.p2align 2,,3
 9894              		.global	set_reg_n_int
 9895              		.syntax unified
 9896              		.thumb
 9897              		.thumb_func
 9898              		.fpu fpv4-sp-d16
 9900              	set_reg_n_int:
 9901              	.LVL737:
 9902              	.LFB91:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 9903              		.loc 1 1236 49 is_stmt 1 view -0
 9904              		.cfi_startproc
 9905              		@ args = 0, pretend = 0, frame = 8
 9906              		@ frame_needed = 0, uses_anonymous_args = 0
1237:src/xeq.c     **** }
 9907              		.loc 1 1237 2 view .LVU2640
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 9908              		.loc 1 1236 49 is_stmt 0 view .LVU2641
 9909 0000 00B5     		push	{lr}
 9910              		.cfi_def_cfa_offset 4
 9911              		.cfi_offset 14, -4
 9912 0002 83B0     		sub	sp, sp, #12
 9913              		.cfi_def_cfa_offset 16
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 9914              		.loc 1 1236 49 view .LVU2642
 9915 0004 CDE90023 		strd	r2, [sp]
1237:src/xeq.c     **** }
 9916              		.loc 1 1237 8 view .LVU2643
 9917 0008 FFF7FEFF 		bl	get_reg_n
 9918              	.LVL738:
1237:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 314


 9919              		.loc 1 1237 2 view .LVU2644
 9920 000c 0822     		movs	r2, #8
 9921 000e 6946     		mov	r1, sp
 9922 0010 FFF7FEFF 		bl	xcopy
 9923              	.LVL739:
1238:src/xeq.c     **** 
 9924              		.loc 1 1238 1 view .LVU2645
 9925 0014 03B0     		add	sp, sp, #12
 9926              		.cfi_def_cfa_offset 4
 9927              		@ sp needed
 9928 0016 5DF804FB 		ldr	pc, [sp], #4
 9929              		.cfi_endproc
 9930              	.LFE91:
 9932 001a 00BF     		.section	.text.get_reg_n_int_sgn,"ax",%progbits
 9933              		.align	1
 9934              		.p2align 2,,3
 9935              		.global	get_reg_n_int_sgn
 9936              		.syntax unified
 9937              		.thumb
 9938              		.thumb_func
 9939              		.fpu fpv4-sp-d16
 9941              	get_reg_n_int_sgn:
 9942              	.LVL740:
 9943              	.LFB92:
1242:src/xeq.c     **** 	if (is_intmode()) {
 9944              		.loc 1 1242 63 is_stmt 1 view -0
 9945              		.cfi_startproc
 9946              		@ args = 0, pretend = 0, frame = 40
 9947              		@ frame_needed = 0, uses_anonymous_args = 0
1243:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9948              		.loc 1 1243 2 view .LVU2647
1243:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9949              		.loc 1 1243 6 is_stmt 0 view .LVU2648
 9950 0000 0C4B     		ldr	r3, .L745
1242:src/xeq.c     **** 	if (is_intmode()) {
 9951              		.loc 1 1242 63 view .LVU2649
 9952 0002 10B5     		push	{r4, lr}
 9953              		.cfi_def_cfa_offset 8
 9954              		.cfi_offset 4, -8
 9955              		.cfi_offset 14, -4
1243:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9956              		.loc 1 1243 6 view .LVU2650
 9957 0004 1B68     		ldr	r3, [r3]
 9958 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1243:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9959              		.loc 1 1243 5 view .LVU2651
 9960 000a DB07     		lsls	r3, r3, #31
1242:src/xeq.c     **** 	if (is_intmode()) {
 9961              		.loc 1 1242 63 view .LVU2652
 9962 000c 8AB0     		sub	sp, sp, #40
 9963              		.cfi_def_cfa_offset 48
1242:src/xeq.c     **** 	if (is_intmode()) {
 9964              		.loc 1 1242 63 view .LVU2653
 9965 000e 0C46     		mov	r4, r1
1243:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9966              		.loc 1 1243 5 view .LVU2654
 9967 0010 06D5     		bpl	.L742
ARM GAS  /tmp/ccjeMhND.s 			page 315


 9968              	.LVL741:
 9969              	.LBB2018:
 9970              	.LBI2018:
1242:src/xeq.c     **** 	if (is_intmode()) {
 9971              		.loc 1 1242 24 is_stmt 1 view .LVU2655
 9972              	.LBB2019:
1244:src/xeq.c     **** 	} else {
 9973              		.loc 1 1244 3 view .LVU2656
1244:src/xeq.c     **** 	} else {
 9974              		.loc 1 1244 10 is_stmt 0 view .LVU2657
 9975 0012 FFF7FEFF 		bl	get_reg_n_int
 9976              	.LVL742:
1244:src/xeq.c     **** 	} else {
 9977              		.loc 1 1244 10 view .LVU2658
 9978 0016 2246     		mov	r2, r4
 9979 0018 FFF7FEFF 		bl	extract_value
 9980              	.LVL743:
1244:src/xeq.c     **** 	} else {
 9981              		.loc 1 1244 10 view .LVU2659
 9982              	.LBE2019:
 9983              	.LBE2018:
1251:src/xeq.c     **** 
 9984              		.loc 1 1251 1 view .LVU2660
 9985 001c 0AB0     		add	sp, sp, #40
 9986              		.cfi_remember_state
 9987              		.cfi_def_cfa_offset 8
 9988              		@ sp needed
 9989 001e 10BD     		pop	{r4, pc}
 9990              	.LVL744:
 9991              	.L742:
 9992              		.cfi_restore_state
1251:src/xeq.c     **** 
 9993              		.loc 1 1251 1 view .LVU2661
 9994 0020 0146     		mov	r1, r0
 9995              	.LVL745:
 9996              	.LBB2020:
1246:src/xeq.c     **** 
 9997              		.loc 1 1246 3 is_stmt 1 view .LVU2662
1248:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 9998              		.loc 1 1248 3 view .LVU2663
 9999 0022 01A8     		add	r0, sp, #4
 10000              	.LVL746:
1248:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 10001              		.loc 1 1248 3 is_stmt 0 view .LVU2664
 10002 0024 FFF7FEFF 		bl	getRegister
 10003              	.LVL747:
1249:src/xeq.c     **** 	}
 10004              		.loc 1 1249 3 is_stmt 1 view .LVU2665
1249:src/xeq.c     **** 	}
 10005              		.loc 1 1249 10 is_stmt 0 view .LVU2666
 10006 0028 2146     		mov	r1, r4
 10007 002a 01A8     		add	r0, sp, #4
 10008 002c FFF7FEFF 		bl	dn_to_ull
 10009              	.LVL748:
 10010              	.LBE2020:
1251:src/xeq.c     **** 
 10011              		.loc 1 1251 1 view .LVU2667
ARM GAS  /tmp/ccjeMhND.s 			page 316


 10012 0030 0AB0     		add	sp, sp, #40
 10013              		.cfi_def_cfa_offset 8
 10014              		@ sp needed
 10015 0032 10BD     		pop	{r4, pc}
 10016              	.LVL749:
 10017              	.L746:
1251:src/xeq.c     **** 
 10018              		.loc 1 1251 1 view .LVU2668
 10019              		.align	2
 10020              	.L745:
 10021 0034 00000000 		.word	main_ram
 10022              		.cfi_endproc
 10023              	.LFE92:
 10025              		.section	.text.get_keycode_from_reg,"ax",%progbits
 10026              		.align	1
 10027              		.p2align 2,,3
 10028              		.syntax unified
 10029              		.thumb
 10030              		.thumb_func
 10031              		.fpu fpv4-sp-d16
 10033              	get_keycode_from_reg:
 10034              	.LVL750:
 10035              	.LFB136:
1855:src/xeq.c     **** 	int sgn;
 10036              		.loc 1 1855 1 is_stmt 1 view -0
 10037              		.cfi_startproc
 10038              		@ args = 0, pretend = 0, frame = 8
 10039              		@ frame_needed = 0, uses_anonymous_args = 0
1856:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
 10040              		.loc 1 1856 2 view .LVU2670
1857:src/xeq.c     **** 	if ( c < 0 )
 10041              		.loc 1 1857 2 view .LVU2671
1855:src/xeq.c     **** 	int sgn;
 10042              		.loc 1 1855 1 is_stmt 0 view .LVU2672
 10043 0000 00B5     		push	{lr}
 10044              		.cfi_def_cfa_offset 4
 10045              		.cfi_offset 14, -4
 10046 0002 83B0     		sub	sp, sp, #12
 10047              		.cfi_def_cfa_offset 16
1857:src/xeq.c     **** 	if ( c < 0 )
 10048              		.loc 1 1857 44 view .LVU2673
 10049 0004 01A9     		add	r1, sp, #4
 10050 0006 FFF7FEFF 		bl	get_reg_n_int_sgn
 10051              	.LVL751:
1857:src/xeq.c     **** 	if ( c < 0 )
 10052              		.loc 1 1857 16 view .LVU2674
 10053 000a FFF7FEFF 		bl	row_column_to_keycode
 10054              	.LVL752:
1858:src/xeq.c     **** 		report_err(ERR_RANGE);
 10055              		.loc 1 1858 2 is_stmt 1 view .LVU2675
1858:src/xeq.c     **** 		report_err(ERR_RANGE);
 10056              		.loc 1 1858 5 is_stmt 0 view .LVU2676
 10057 000e 0028     		cmp	r0, #0
1858:src/xeq.c     **** 		report_err(ERR_RANGE);
 10058              		.loc 1 1858 5 view .LVU2677
 10059 0010 02DB     		blt	.L750
 10060              	.L747:
ARM GAS  /tmp/ccjeMhND.s 			page 317


1861:src/xeq.c     **** 
 10061              		.loc 1 1861 1 view .LVU2678
 10062 0012 03B0     		add	sp, sp, #12
 10063              		.cfi_remember_state
 10064              		.cfi_def_cfa_offset 4
 10065              		@ sp needed
 10066 0014 5DF804FB 		ldr	pc, [sp], #4
 10067              	.L750:
 10068              		.cfi_restore_state
 10069              	.LBB2027:
 10070              	.LBI2027:
1854:src/xeq.c     **** {
 10071              		.loc 1 1854 12 is_stmt 1 view .LVU2679
 10072              	.LVL753:
 10073              	.LBB2028:
1859:src/xeq.c     **** 	return c;
 10074              		.loc 1 1859 3 view .LVU2680
 10075              	.LBB2029:
 10076              	.LBI2029:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10077              		.loc 1 537 5 view .LVU2681
 10078              	.LBB2030:
 538:src/xeq.c     **** 		Error = e;
 10079              		.loc 1 538 2 view .LVU2682
 538:src/xeq.c     **** 		Error = e;
 10080              		.loc 1 538 12 is_stmt 0 view .LVU2683
 10081 0018 044B     		ldr	r3, .L751
 538:src/xeq.c     **** 		Error = e;
 10082              		.loc 1 538 5 view .LVU2684
 10083 001a 1A68     		ldr	r2, [r3]
 10084 001c 002A     		cmp	r2, #0
 10085 001e F8D1     		bne	.L747
 10086              	.LVL754:
 10087              	.LBB2031:
 10088              	.LBI2031:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10089              		.loc 1 537 5 is_stmt 1 view .LVU2685
 10090              	.LBB2032:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 10091              		.loc 1 539 3 view .LVU2686
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 10092              		.loc 1 539 9 is_stmt 0 view .LVU2687
 10093 0020 0822     		movs	r2, #8
 10094 0022 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 10095              		.loc 1 540 3 is_stmt 1 view .LVU2688
 10096              	.LVL755:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 10097              		.loc 1 540 3 is_stmt 0 view .LVU2689
 10098              	.LBE2032:
 10099              	.LBE2031:
 10100              	.LBE2030:
 10101              	.LBE2029:
 10102              	.LBE2028:
 10103              	.LBE2027:
1860:src/xeq.c     **** }
 10104              		.loc 1 1860 2 is_stmt 1 view .LVU2690
ARM GAS  /tmp/ccjeMhND.s 			page 318


1861:src/xeq.c     **** 
 10105              		.loc 1 1861 1 is_stmt 0 view .LVU2691
 10106 0024 03B0     		add	sp, sp, #12
 10107              		.cfi_def_cfa_offset 4
 10108              		@ sp needed
 10109 0026 5DF804FB 		ldr	pc, [sp], #4
 10110              	.L752:
 10111 002a 00BF     		.align	2
 10112              	.L751:
 10113 002c 00000000 		.word	Error
 10114              		.cfi_endproc
 10115              	.LFE136:
 10117              		.section	.text.getX_int,"ax",%progbits
 10118              		.align	1
 10119              		.p2align 2,,3
 10120              		.global	getX_int
 10121              		.syntax unified
 10122              		.thumb
 10123              		.thumb_func
 10124              		.fpu fpv4-sp-d16
 10126              	getX_int:
 10127              	.LFB93:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10128              		.loc 1 1256 30 is_stmt 1 view -0
 10129              		.cfi_startproc
 10130              		@ args = 0, pretend = 0, frame = 0
 10131              		@ frame_needed = 0, uses_anonymous_args = 0
 10132              		@ link register save eliminated.
1257:src/xeq.c     **** }
 10133              		.loc 1 1257 2 view .LVU2693
1257:src/xeq.c     **** }
 10134              		.loc 1 1257 9 is_stmt 0 view .LVU2694
 10135 0000 6420     		movs	r0, #100
 10136 0002 FFF7FEBF 		b	get_reg_n_int
 10137              	.LVL756:
 10138              		.cfi_endproc
 10139              	.LFE93:
 10141 0006 00BF     		.section	.text.getX_int_sgn,"ax",%progbits
 10142              		.align	1
 10143              		.p2align 2,,3
 10144              		.global	getX_int_sgn
 10145              		.syntax unified
 10146              		.thumb
 10147              		.thumb_func
 10148              		.fpu fpv4-sp-d16
 10150              	getX_int_sgn:
 10151              	.LVL757:
 10152              	.LFB94:
1260:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10153              		.loc 1 1260 47 is_stmt 1 view -0
 10154              		.cfi_startproc
 10155              		@ args = 0, pretend = 0, frame = 0
 10156              		@ frame_needed = 0, uses_anonymous_args = 0
 10157              		@ link register save eliminated.
1261:src/xeq.c     **** }
 10158              		.loc 1 1261 2 view .LVU2696
1260:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
ARM GAS  /tmp/ccjeMhND.s 			page 319


 10159              		.loc 1 1260 47 is_stmt 0 view .LVU2697
 10160 0000 0146     		mov	r1, r0
1261:src/xeq.c     **** }
 10161              		.loc 1 1261 9 view .LVU2698
 10162 0002 6420     		movs	r0, #100
 10163              	.LVL758:
1261:src/xeq.c     **** }
 10164              		.loc 1 1261 9 view .LVU2699
 10165 0004 FFF7FEBF 		b	get_reg_n_int_sgn
 10166              	.LVL759:
1261:src/xeq.c     **** }
 10167              		.loc 1 1261 9 view .LVU2700
 10168              		.cfi_endproc
 10169              	.LFE94:
 10171              		.section	.text.set_reg_n_int_sgn,"ax",%progbits
 10172              		.align	1
 10173              		.p2align 2,,3
 10174              		.global	set_reg_n_int_sgn
 10175              		.syntax unified
 10176              		.thumb
 10177              		.thumb_func
 10178              		.fpu fpv4-sp-d16
 10180              	set_reg_n_int_sgn:
 10181              	.LVL760:
 10182              	.LFB96:
1281:src/xeq.c     **** 	if (is_intmode()) {
 10183              		.loc 1 1281 72 is_stmt 1 view -0
 10184              		.cfi_startproc
 10185              		@ args = 4, pretend = 0, frame = 40
 10186              		@ frame_needed = 0, uses_anonymous_args = 0
1282:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10187              		.loc 1 1282 2 view .LVU2702
1282:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10188              		.loc 1 1282 6 is_stmt 0 view .LVU2703
 10189 0000 1749     		ldr	r1, .L765
1281:src/xeq.c     **** 	if (is_intmode()) {
 10190              		.loc 1 1281 72 view .LVU2704
 10191 0002 30B5     		push	{r4, r5, lr}
 10192              		.cfi_def_cfa_offset 12
 10193              		.cfi_offset 4, -12
 10194              		.cfi_offset 5, -8
 10195              		.cfi_offset 14, -4
1282:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10196              		.loc 1 1282 6 view .LVU2705
 10197 0004 0968     		ldr	r1, [r1]
 10198 0006 91F8E857 		ldrb	r5, [r1, #2024]	@ zero_extendqisi2
1282:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10199              		.loc 1 1282 5 view .LVU2706
 10200 000a E907     		lsls	r1, r5, #31
1281:src/xeq.c     **** 	if (is_intmode()) {
 10201              		.loc 1 1281 72 view .LVU2707
 10202 000c 8BB0     		sub	sp, sp, #44
 10203              		.cfi_def_cfa_offset 56
1281:src/xeq.c     **** 	if (is_intmode()) {
 10204              		.loc 1 1281 72 view .LVU2708
 10205 000e 0446     		mov	r4, r0
1282:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
ARM GAS  /tmp/ccjeMhND.s 			page 320


 10206              		.loc 1 1282 5 view .LVU2709
 10207 0010 11D5     		bpl	.L756
 10208              	.LVL761:
1282:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10209              		.loc 1 1282 5 view .LVU2710
 10210 0012 1046     		mov	r0, r2
 10211              	.LVL762:
1282:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10212              		.loc 1 1282 5 view .LVU2711
 10213 0014 1946     		mov	r1, r3
 10214              	.LVL763:
 10215              	.LBB2039:
 10216              	.LBI2039:
1281:src/xeq.c     **** 	if (is_intmode()) {
 10217              		.loc 1 1281 6 is_stmt 1 view .LVU2712
 10218              	.LBB2040:
1283:src/xeq.c     **** 	} else {
 10219              		.loc 1 1283 3 view .LVU2713
 10220 0016 0E9A     		ldr	r2, [sp, #56]
 10221              	.LVL764:
1283:src/xeq.c     **** 	} else {
 10222              		.loc 1 1283 3 is_stmt 0 view .LVU2714
 10223 0018 FFF7FEFF 		bl	build_value
 10224              	.LVL765:
1283:src/xeq.c     **** 	} else {
 10225              		.loc 1 1283 3 view .LVU2715
 10226 001c 0B46     		mov	r3, r1
 10227 001e 0246     		mov	r2, r0
 10228              	.LBB2041:
 10229              	.LBB2042:
1237:src/xeq.c     **** }
 10230              		.loc 1 1237 8 view .LVU2716
 10231 0020 2046     		mov	r0, r4
 10232 0022 CDE90023 		strd	r2, [sp]
 10233              	.LVL766:
1237:src/xeq.c     **** }
 10234              		.loc 1 1237 8 view .LVU2717
 10235              	.LBE2042:
 10236              	.LBI2041:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10237              		.loc 1 1236 6 is_stmt 1 view .LVU2718
 10238              	.LBB2043:
1237:src/xeq.c     **** }
 10239              		.loc 1 1237 2 view .LVU2719
1237:src/xeq.c     **** }
 10240              		.loc 1 1237 8 is_stmt 0 view .LVU2720
 10241 0026 FFF7FEFF 		bl	get_reg_n
 10242              	.LVL767:
1237:src/xeq.c     **** }
 10243              		.loc 1 1237 2 view .LVU2721
 10244 002a 0822     		movs	r2, #8
 10245 002c 6946     		mov	r1, sp
 10246 002e FFF7FEFF 		bl	xcopy
 10247              	.LVL768:
1237:src/xeq.c     **** }
 10248              		.loc 1 1237 2 view .LVU2722
 10249              	.LBE2043:
ARM GAS  /tmp/ccjeMhND.s 			page 321


 10250              	.LBE2041:
 10251              	.LBE2040:
 10252              	.LBE2039:
1292:src/xeq.c     **** 
 10253              		.loc 1 1292 1 view .LVU2723
 10254 0032 0BB0     		add	sp, sp, #44
 10255              		.cfi_remember_state
 10256              		.cfi_def_cfa_offset 12
 10257              		@ sp needed
 10258 0034 30BD     		pop	{r4, r5, pc}
 10259              	.LVL769:
 10260              	.L756:
 10261              		.cfi_restore_state
 10262              	.LBB2044:
1285:src/xeq.c     **** 
 10263              		.loc 1 1285 3 is_stmt 1 view .LVU2724
1287:src/xeq.c     **** 		if (sgn)
 10264              		.loc 1 1287 3 view .LVU2725
 10265 0036 6846     		mov	r0, sp
 10266              	.LVL770:
1287:src/xeq.c     **** 		if (sgn)
 10267              		.loc 1 1287 3 is_stmt 0 view .LVU2726
 10268 0038 FFF7FEFF 		bl	ullint_to_dn
 10269              	.LVL771:
1288:src/xeq.c     **** 			dn_minus(&t, &t);
 10270              		.loc 1 1288 3 is_stmt 1 view .LVU2727
1288:src/xeq.c     **** 			dn_minus(&t, &t);
 10271              		.loc 1 1288 6 is_stmt 0 view .LVU2728
 10272 003c 0E9B     		ldr	r3, [sp, #56]
 10273 003e 2BB9     		cbnz	r3, .L763
1290:src/xeq.c     **** 	}
 10274              		.loc 1 1290 3 is_stmt 1 view .LVU2729
 10275 0040 6946     		mov	r1, sp
 10276 0042 2046     		mov	r0, r4
 10277 0044 FFF7FEFF 		bl	setRegister
 10278              	.LVL772:
 10279              	.L764:
1290:src/xeq.c     **** 	}
 10280              		.loc 1 1290 3 is_stmt 0 view .LVU2730
 10281              	.LBE2044:
1292:src/xeq.c     **** 
 10282              		.loc 1 1292 1 view .LVU2731
 10283 0048 0BB0     		add	sp, sp, #44
 10284              		.cfi_remember_state
 10285              		.cfi_def_cfa_offset 12
 10286              		@ sp needed
 10287 004a 30BD     		pop	{r4, r5, pc}
 10288              	.LVL773:
 10289              	.L763:
 10290              		.cfi_restore_state
 10291              	.LBB2045:
1289:src/xeq.c     **** 		setRegister(index, &t);
 10292              		.loc 1 1289 4 is_stmt 1 view .LVU2732
 10293 004c 6946     		mov	r1, sp
 10294 004e 6846     		mov	r0, sp
 10295 0050 FFF7FEFF 		bl	dn_minus
 10296              	.LVL774:
ARM GAS  /tmp/ccjeMhND.s 			page 322


1290:src/xeq.c     **** 	}
 10297              		.loc 1 1290 3 view .LVU2733
 10298 0054 6946     		mov	r1, sp
 10299 0056 2046     		mov	r0, r4
 10300 0058 FFF7FEFF 		bl	setRegister
 10301              	.LVL775:
 10302 005c F4E7     		b	.L764
 10303              	.L766:
 10304 005e 00BF     		.align	2
 10305              	.L765:
 10306 0060 00000000 		.word	main_ram
 10307              	.LBE2045:
 10308              		.cfi_endproc
 10309              	.LFE96:
 10311              		.section	.text.op_roundingmode,"ax",%progbits
 10312              		.align	1
 10313              		.p2align 2,,3
 10314              		.global	op_roundingmode
 10315              		.syntax unified
 10316              		.thumb
 10317              		.thumb_func
 10318              		.fpu fpv4-sp-d16
 10320              	op_roundingmode:
 10321              	.LVL776:
 10322              	.LFB34:
 610:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10323              		.loc 1 610 37 view -0
 10324              		.cfi_startproc
 10325              		@ args = 0, pretend = 0, frame = 0
 10326              		@ frame_needed = 0, uses_anonymous_args = 0
 611:src/xeq.c     **** }
 10327              		.loc 1 611 2 view .LVU2735
 10328              	.LBB2046:
 10329              	.LBI2046:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 10330              		.loc 1 1323 6 view .LVU2736
 10331              	.LBB2047:
1324:src/xeq.c     **** }
 10332              		.loc 1 1324 2 view .LVU2737
 10333              	.LBE2047:
 10334              	.LBE2046:
 610:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10335              		.loc 1 610 37 is_stmt 0 view .LVU2738
 10336 0000 00B5     		push	{lr}
 10337              		.cfi_def_cfa_offset 4
 10338              		.cfi_offset 14, -4
 611:src/xeq.c     **** }
 10339              		.loc 1 611 21 view .LVU2739
 10340 0002 084B     		ldr	r3, .L769
 10341              	.LVL777:
 611:src/xeq.c     **** }
 10342              		.loc 1 611 21 view .LVU2740
 10343 0004 1B68     		ldr	r3, [r3]
 10344              	.LVL778:
 611:src/xeq.c     **** }
 10345              		.loc 1 611 21 view .LVU2741
 10346 0006 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
ARM GAS  /tmp/ccjeMhND.s 			page 323


 610:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10347              		.loc 1 610 37 view .LVU2742
 10348 000a 83B0     		sub	sp, sp, #12
 10349              		.cfi_def_cfa_offset 16
 10350              	.LBB2050:
 10351              	.LBB2048:
1324:src/xeq.c     **** }
 10352              		.loc 1 1324 2 view .LVU2743
 10353 000c 0021     		movs	r1, #0
 10354              	.LBE2048:
 10355              	.LBE2050:
 611:src/xeq.c     **** }
 10356              		.loc 1 611 21 view .LVU2744
 10357 000e C2F30212 		ubfx	r2, r2, #4, #3
 10358              	.LBB2051:
 10359              	.LBB2049:
1324:src/xeq.c     **** }
 10360              		.loc 1 1324 2 view .LVU2745
 10361 0012 D2B2     		uxtb	r2, r2
 10362 0014 0023     		movs	r3, #0
 10363              	.LVL779:
1324:src/xeq.c     **** }
 10364              		.loc 1 1324 2 view .LVU2746
 10365 0016 0091     		str	r1, [sp]
 10366              	.LVL780:
1324:src/xeq.c     **** }
 10367              		.loc 1 1324 2 view .LVU2747
 10368 0018 6420     		movs	r0, #100
 10369              	.LVL781:
1324:src/xeq.c     **** }
 10370              		.loc 1 1324 2 view .LVU2748
 10371 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 10372              	.LVL782:
1324:src/xeq.c     **** }
 10373              		.loc 1 1324 2 view .LVU2749
 10374              	.LBE2049:
 10375              	.LBE2051:
 612:src/xeq.c     **** 
 10376              		.loc 1 612 1 view .LVU2750
 10377 001e 03B0     		add	sp, sp, #12
 10378              		.cfi_def_cfa_offset 4
 10379              		@ sp needed
 10380 0020 5DF804FB 		ldr	pc, [sp], #4
 10381              	.L770:
 10382              		.align	2
 10383              	.L769:
 10384 0024 00000000 		.word	main_ram
 10385              		.cfi_endproc
 10386              	.LFE34:
 10388              		.section	.text.register_from_int,"ax",%progbits
 10389              		.align	1
 10390              		.p2align 2,,3
 10391              		.syntax unified
 10392              		.thumb
 10393              		.thumb_func
 10394              		.fpu fpv4-sp-d16
 10396              	register_from_int:
ARM GAS  /tmp/ccjeMhND.s 			page 324


 10397              	.LVL783:
 10398              	.LFB97:
1299:src/xeq.c     **** 	int sgn;
 10399              		.loc 1 1299 69 is_stmt 1 view -0
 10400              		.cfi_startproc
 10401              		@ args = 0, pretend = 0, frame = 8
 10402              		@ frame_needed = 0, uses_anonymous_args = 0
1300:src/xeq.c     **** 	unsigned long long int val;
 10403              		.loc 1 1300 2 view .LVU2752
1301:src/xeq.c     **** 	const int xin = XromFlags.xIN;
 10404              		.loc 1 1301 2 view .LVU2753
1302:src/xeq.c     **** 	
 10405              		.loc 1 1302 2 view .LVU2754
1299:src/xeq.c     **** 	int sgn;
 10406              		.loc 1 1299 69 is_stmt 0 view .LVU2755
 10407 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 10408              		.cfi_def_cfa_offset 28
 10409              		.cfi_offset 4, -28
 10410              		.cfi_offset 5, -24
 10411              		.cfi_offset 6, -20
 10412              		.cfi_offset 7, -16
 10413              		.cfi_offset 8, -12
 10414              		.cfi_offset 9, -8
 10415              		.cfi_offset 14, -4
1302:src/xeq.c     **** 	
 10416              		.loc 1 1302 27 view .LVU2756
 10417 0004 154C     		ldr	r4, .L777
 10418 0006 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
1299:src/xeq.c     **** 	int sgn;
 10419              		.loc 1 1299 69 view .LVU2757
 10420 0008 0546     		mov	r5, r0
 10421 000a 85B0     		sub	sp, sp, #20
 10422              		.cfi_def_cfa_offset 48
1299:src/xeq.c     **** 	int sgn;
 10423              		.loc 1 1299 69 view .LVU2758
 10424 000c 0846     		mov	r0, r1
 10425              	.LVL784:
1302:src/xeq.c     **** 	
 10426              		.loc 1 1302 27 view .LVU2759
 10427 000e DE09     		lsrs	r6, r3, #7
 10428              	.LVL785:
1304:src/xeq.c     **** 		XromFlags.xIN = 0;
 10429              		.loc 1 1304 2 is_stmt 1 view .LVU2760
1304:src/xeq.c     **** 		XromFlags.xIN = 0;
 10430              		.loc 1 1304 5 is_stmt 0 view .LVU2761
 10431 0010 12B1     		cbz	r2, .L772
1305:src/xeq.c     **** 	UState.intm = 1;
 10432              		.loc 1 1305 3 is_stmt 1 view .LVU2762
1305:src/xeq.c     **** 	UState.intm = 1;
 10433              		.loc 1 1305 17 is_stmt 0 view .LVU2763
 10434 0012 6FF3C713 		bfc	r3, #7, #1
 10435              	.LVL786:
1305:src/xeq.c     **** 	UState.intm = 1;
 10436              		.loc 1 1305 17 view .LVU2764
 10437 0016 6370     		strb	r3, [r4, #1]
 10438              	.LVL787:
 10439              	.L772:
ARM GAS  /tmp/ccjeMhND.s 			page 325


1306:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10440              		.loc 1 1306 2 is_stmt 1 view .LVU2765
1306:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10441              		.loc 1 1306 14 is_stmt 0 view .LVU2766
 10442 0018 114F     		ldr	r7, .L777+4
 10443 001a 3A68     		ldr	r2, [r7]
 10444              	.LVL788:
1306:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10445              		.loc 1 1306 14 view .LVU2767
 10446 001c 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
 10447 0020 43F00103 		orr	r3, r3, #1
 10448 0024 82F8E837 		strb	r3, [r2, #2024]
1307:src/xeq.c     **** 
 10449              		.loc 1 1307 2 is_stmt 1 view .LVU2768
1307:src/xeq.c     **** 
 10450              		.loc 1 1307 8 is_stmt 0 view .LVU2769
 10451 0028 03A9     		add	r1, sp, #12
 10452              	.LVL789:
1307:src/xeq.c     **** 
 10453              		.loc 1 1307 8 view .LVU2770
 10454 002a FFF7FEFF 		bl	get_reg_n_int_sgn
 10455              	.LVL790:
1309:src/xeq.c     **** 	UState.intm = 0;
 10456              		.loc 1 1309 16 view .LVU2771
 10457 002e 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
1310:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10458              		.loc 1 1310 14 view .LVU2772
 10459 0030 3B68     		ldr	r3, [r7]
1309:src/xeq.c     **** 	UState.intm = 0;
 10460              		.loc 1 1309 16 view .LVU2773
 10461 0032 66F3C712 		bfi	r2, r6, #7, #1
 10462 0036 6270     		strb	r2, [r4, #1]
1307:src/xeq.c     **** 
 10463              		.loc 1 1307 8 view .LVU2774
 10464 0038 8946     		mov	r9, r1
1310:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10465              		.loc 1 1310 14 view .LVU2775
 10466 003a 93F8E817 		ldrb	r1, [r3, #2024]	@ zero_extendqisi2
 10467 003e 6FF30001 		bfc	r1, #0, #1
 10468 0042 83F8E817 		strb	r1, [r3, #2024]
1311:src/xeq.c     **** }
 10469              		.loc 1 1311 2 view .LVU2776
 10470 0046 039B     		ldr	r3, [sp, #12]
 10471 0048 0093     		str	r3, [sp]
1307:src/xeq.c     **** 
 10472              		.loc 1 1307 8 view .LVU2777
 10473 004a 8046     		mov	r8, r0
 10474              	.LVL791:
1309:src/xeq.c     **** 	UState.intm = 0;
 10475              		.loc 1 1309 2 is_stmt 1 view .LVU2778
1310:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10476              		.loc 1 1310 2 view .LVU2779
1311:src/xeq.c     **** }
 10477              		.loc 1 1311 2 view .LVU2780
 10478 004c 4246     		mov	r2, r8
 10479 004e 4B46     		mov	r3, r9
 10480 0050 2846     		mov	r0, r5
ARM GAS  /tmp/ccjeMhND.s 			page 326


 10481 0052 FFF7FEFF 		bl	set_reg_n_int_sgn
 10482              	.LVL792:
1312:src/xeq.c     **** 
 10483              		.loc 1 1312 1 is_stmt 0 view .LVU2781
 10484 0056 05B0     		add	sp, sp, #20
 10485              		.cfi_def_cfa_offset 28
 10486              		@ sp needed
 10487 0058 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 10488              	.LVL793:
 10489              	.L778:
1312:src/xeq.c     **** 
 10490              		.loc 1 1312 1 view .LVU2782
 10491              		.align	2
 10492              	.L777:
 10493 005c 00000000 		.word	XromParams
 10494 0060 00000000 		.word	main_ram
 10495              		.cfi_endproc
 10496              	.LFE97:
 10498              		.section	.text.int_from_register,"ax",%progbits
 10499              		.align	1
 10500              		.p2align 2,,3
 10501              		.syntax unified
 10502              		.thumb
 10503              		.thumb_func
 10504              		.fpu fpv4-sp-d16
 10506              	int_from_register:
 10507              	.LVL794:
 10508              	.LFB95:
1268:src/xeq.c     **** 	int sgn;
 10509              		.loc 1 1268 48 is_stmt 1 view -0
 10510              		.cfi_startproc
 10511              		@ args = 0, pretend = 0, frame = 8
 10512              		@ frame_needed = 0, uses_anonymous_args = 0
1269:src/xeq.c     **** 	unsigned long long int val;
 10513              		.loc 1 1269 2 view .LVU2784
1270:src/xeq.c     **** 	
 10514              		.loc 1 1270 2 view .LVU2785
1272:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10515              		.loc 1 1272 2 view .LVU2786
1268:src/xeq.c     **** 	int sgn;
 10516              		.loc 1 1268 48 is_stmt 0 view .LVU2787
 10517 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 10518              		.cfi_def_cfa_offset 20
 10519              		.cfi_offset 4, -20
 10520              		.cfi_offset 5, -16
 10521              		.cfi_offset 6, -12
 10522              		.cfi_offset 7, -8
 10523              		.cfi_offset 14, -4
1272:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10524              		.loc 1 1272 14 view .LVU2788
 10525 0002 104D     		ldr	r5, .L781
 10526 0004 2B68     		ldr	r3, [r5]
 10527 0006 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1268:src/xeq.c     **** 	int sgn;
 10528              		.loc 1 1268 48 view .LVU2789
 10529 000a 85B0     		sub	sp, sp, #20
 10530              		.cfi_def_cfa_offset 40
ARM GAS  /tmp/ccjeMhND.s 			page 327


1272:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10531              		.loc 1 1272 14 view .LVU2790
 10532 000c 6FF30002 		bfc	r2, #0, #1
1268:src/xeq.c     **** 	int sgn;
 10533              		.loc 1 1268 48 view .LVU2791
 10534 0010 0446     		mov	r4, r0
1272:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10535              		.loc 1 1272 14 view .LVU2792
 10536 0012 83F8E827 		strb	r2, [r3, #2024]
1273:src/xeq.c     **** 
 10537              		.loc 1 1273 2 is_stmt 1 view .LVU2793
1273:src/xeq.c     **** 
 10538              		.loc 1 1273 8 is_stmt 0 view .LVU2794
 10539 0016 0846     		mov	r0, r1
 10540              	.LVL795:
1273:src/xeq.c     **** 
 10541              		.loc 1 1273 8 view .LVU2795
 10542 0018 03A9     		add	r1, sp, #12
 10543              	.LVL796:
1273:src/xeq.c     **** 
 10544              		.loc 1 1273 8 view .LVU2796
 10545 001a FFF7FEFF 		bl	get_reg_n_int_sgn
 10546              	.LVL797:
1273:src/xeq.c     **** 
 10547              		.loc 1 1273 8 view .LVU2797
 10548 001e 0F46     		mov	r7, r1
1275:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10549              		.loc 1 1275 14 view .LVU2798
 10550 0020 2968     		ldr	r1, [r5]
 10551 0022 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
 10552 0026 43F00103 		orr	r3, r3, #1
 10553 002a 81F8E837 		strb	r3, [r1, #2024]
1276:src/xeq.c     **** }
 10554              		.loc 1 1276 2 view .LVU2799
 10555 002e 039B     		ldr	r3, [sp, #12]
 10556 0030 0093     		str	r3, [sp]
1273:src/xeq.c     **** 
 10557              		.loc 1 1273 8 view .LVU2800
 10558 0032 0646     		mov	r6, r0
 10559              	.LVL798:
1275:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10560              		.loc 1 1275 2 is_stmt 1 view .LVU2801
1276:src/xeq.c     **** }
 10561              		.loc 1 1276 2 view .LVU2802
 10562 0034 3246     		mov	r2, r6
 10563 0036 2046     		mov	r0, r4
 10564 0038 3B46     		mov	r3, r7
 10565 003a FFF7FEFF 		bl	set_reg_n_int_sgn
 10566              	.LVL799:
1277:src/xeq.c     **** 
 10567              		.loc 1 1277 1 is_stmt 0 view .LVU2803
 10568 003e 05B0     		add	sp, sp, #20
 10569              		.cfi_def_cfa_offset 20
 10570              		@ sp needed
 10571 0040 F0BD     		pop	{r4, r5, r6, r7, pc}
 10572              	.LVL800:
 10573              	.L782:
ARM GAS  /tmp/ccjeMhND.s 			page 328


1277:src/xeq.c     **** 
 10574              		.loc 1 1277 1 view .LVU2804
 10575 0042 00BF     		.align	2
 10576              	.L781:
 10577 0044 00000000 		.word	main_ram
 10578              		.cfi_endproc
 10579              	.LFE95:
 10581              		.section	.text.switch_to_int,"ax",%progbits
 10582              		.align	1
 10583              		.p2align 2,,3
 10584              		.syntax unified
 10585              		.thumb
 10586              		.thumb_func
 10587              		.fpu fpv4-sp-d16
 10589              	switch_to_int:
 10590              	.LFB203:
3525:src/xeq.c     **** 	int i;
 10591              		.loc 1 3525 33 is_stmt 1 view -0
 10592              		.cfi_startproc
 10593              		@ args = 0, pretend = 0, frame = 40
 10594              		@ frame_needed = 0, uses_anonymous_args = 0
3526:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
 10595              		.loc 1 3526 2 view .LVU2806
3527:src/xeq.c     **** 	const int dbl = is_dblmode();
 10596              		.loc 1 3527 2 view .LVU2807
3525:src/xeq.c     **** 	int i;
 10597              		.loc 1 3525 33 is_stmt 0 view .LVU2808
 10598 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 10599              		.cfi_def_cfa_offset 24
 10600              		.cfi_offset 4, -24
 10601              		.cfi_offset 5, -20
 10602              		.cfi_offset 6, -16
 10603              		.cfi_offset 7, -12
 10604              		.cfi_offset 8, -8
 10605              		.cfi_offset 14, -4
3527:src/xeq.c     **** 	const int dbl = is_dblmode();
 10606              		.loc 1 3527 26 view .LVU2809
 10607 0004 DFF87480 		ldr	r8, .L791+4
3527:src/xeq.c     **** 	const int dbl = is_dblmode();
 10608              		.loc 1 3527 25 view .LVU2810
 10609 0008 1B49     		ldr	r1, .L791
3527:src/xeq.c     **** 	const int dbl = is_dblmode();
 10610              		.loc 1 3527 26 view .LVU2811
 10611 000a D8F80020 		ldr	r2, [r8]
3527:src/xeq.c     **** 	const int dbl = is_dblmode();
 10612              		.loc 1 3527 32 view .LVU2812
 10613 000e 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 10614              	.LBB2052:
 10615              	.LBB2053:
 933:src/xeq.c     **** }
 10616              		.loc 1 933 24 view .LVU2813
 10617 0012 B2F8E827 		ldrh	r2, [r2, #2024]
 10618              	.LBE2053:
 10619              	.LBE2052:
3527:src/xeq.c     **** 	const int dbl = is_dblmode();
 10620              		.loc 1 3527 32 view .LVU2814
 10621 0016 C3F3C003 		ubfx	r3, r3, #3, #1
ARM GAS  /tmp/ccjeMhND.s 			page 329


 10622              	.LBB2057:
 10623              	.LBB2054:
 933:src/xeq.c     **** }
 10624              		.loc 1 933 24 view .LVU2815
 10625 001a 44F20106 		movw	r6, #16385
 10626              	.LBE2054:
 10627              	.LBE2057:
3527:src/xeq.c     **** 	const int dbl = is_dblmode();
 10628              		.loc 1 3527 6 view .LVU2816
 10629 001e 31F81350 		ldrh	r5, [r1, r3, lsl #1]
 10630              	.LVL801:
3528:src/xeq.c     **** 
 10631              		.loc 1 3528 2 is_stmt 1 view .LVU2817
 10632              	.LBB2058:
 10633              	.LBI2052:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 10634              		.loc 1 932 5 view .LVU2818
 10635              	.LBB2055:
 933:src/xeq.c     **** }
 10636              		.loc 1 933 2 view .LVU2819
 10637              	.LBE2055:
 10638              	.LBE2058:
3525:src/xeq.c     **** 	int i;
 10639              		.loc 1 3525 33 is_stmt 0 view .LVU2820
 10640 0022 8AB0     		sub	sp, sp, #40
 10641              		.cfi_def_cfa_offset 64
 10642              	.LBB2059:
 10643              	.LBB2056:
 933:src/xeq.c     **** }
 10644              		.loc 1 933 24 view .LVU2821
 10645 0024 1640     		ands	r6, r6, r2
 10646              	.LVL802:
 933:src/xeq.c     **** }
 10647              		.loc 1 933 24 view .LVU2822
 10648              	.LBE2056:
 10649              	.LBE2059:
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10650              		.loc 1 3530 2 is_stmt 1 view .LVU2823
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10651              		.loc 1 3530 21 view .LVU2824
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10652              		.loc 1 3530 9 is_stmt 0 view .LVU2825
 10653 0026 6F24     		movs	r4, #111
 10654 0028 07E0     		b	.L786
 10655              	.LVL803:
 10656              	.L784:
3535:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 10657              		.loc 1 3535 11 view .LVU2826
 10658 002a B6F5804F 		cmp	r6, #16384
 10659 002e 12D0     		beq	.L789
 10660              	.L785:
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10661              		.loc 1 3530 36 is_stmt 1 discriminator 2 view .LVU2827
 10662 0030 013C     		subs	r4, r4, #1
 10663              	.LVL804:
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10664              		.loc 1 3530 2 is_stmt 0 discriminator 2 view .LVU2828
ARM GAS  /tmp/ccjeMhND.s 			page 330


 10665 0032 632C     		cmp	r4, #99
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10666              		.loc 1 3530 46 discriminator 2 view .LVU2829
 10667 0034 4FEA4505 		lsl	r5, r5, #1
 10668              	.LVL805:
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10669              		.loc 1 3530 21 is_stmt 1 discriminator 2 view .LVU2830
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10670              		.loc 1 3530 2 is_stmt 0 discriminator 2 view .LVU2831
 10671 0038 0AD0     		beq	.L790
 10672              	.LVL806:
 10673              	.L786:
3531:src/xeq.c     **** 			// register belongs to stack
 10674              		.loc 1 3531 3 is_stmt 1 view .LVU2832
3535:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 10675              		.loc 1 3535 8 view .LVU2833
3531:src/xeq.c     **** 			// register belongs to stack
 10676              		.loc 1 3531 6 is_stmt 0 view .LVU2834
 10677 003a 2B05     		lsls	r3, r5, #20
 10678 003c F5D5     		bpl	.L784
3533:src/xeq.c     **** 		}
 10679              		.loc 1 3533 4 is_stmt 1 view .LVU2835
 10680 003e 2146     		mov	r1, r4
 10681 0040 2046     		mov	r0, r4
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10682              		.loc 1 3530 36 is_stmt 0 view .LVU2836
 10683 0042 013C     		subs	r4, r4, #1
 10684              	.LVL807:
3533:src/xeq.c     **** 		}
 10685              		.loc 1 3533 4 view .LVU2837
 10686 0044 FFF7FEFF 		bl	int_from_register
 10687              	.LVL808:
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10688              		.loc 1 3530 36 is_stmt 1 view .LVU2838
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10689              		.loc 1 3530 2 is_stmt 0 view .LVU2839
 10690 0048 632C     		cmp	r4, #99
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10691              		.loc 1 3530 46 view .LVU2840
 10692 004a 4FEA4505 		lsl	r5, r5, #1
 10693              	.LVL809:
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10694              		.loc 1 3530 21 is_stmt 1 view .LVU2841
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10695              		.loc 1 3530 2 is_stmt 0 view .LVU2842
 10696 004e F4D1     		bne	.L786
 10697              	.L790:
3540:src/xeq.c     **** 
 10698              		.loc 1 3540 1 view .LVU2843
 10699 0050 0AB0     		add	sp, sp, #40
 10700              		.cfi_remember_state
 10701              		.cfi_def_cfa_offset 24
 10702              		@ sp needed
 10703 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 10704              	.LVL810:
 10705              	.L789:
 10706              		.cfi_restore_state
ARM GAS  /tmp/ccjeMhND.s 			page 331


3537:src/xeq.c     **** 		}
 10707              		.loc 1 3537 4 is_stmt 1 view .LVU2844
3537:src/xeq.c     **** 		}
 10708              		.loc 1 3537 26 is_stmt 0 view .LVU2845
 10709 0056 D8F80030 		ldr	r3, [r8]
3537:src/xeq.c     **** 		}
 10710              		.loc 1 3537 38 view .LVU2846
 10711 005a 2046     		mov	r0, r4
3537:src/xeq.c     **** 		}
 10712              		.loc 1 3537 26 view .LVU2847
 10713 005c 03F58663 		add	r3, r3, #1072
3537:src/xeq.c     **** 		}
 10714              		.loc 1 3537 4 view .LVU2848
 10715 0060 03EBC407 		add	r7, r3, r4, lsl #3
3537:src/xeq.c     **** 		}
 10716              		.loc 1 3537 38 view .LVU2849
 10717 0064 FFF7FEFF 		bl	get_reg_n
 10718              	.LVL811:
 10719              	.LBB2060:
 10720              	.LBI2060:
 639:src/xeq.c     **** 	decNumber temp;
 10721              		.loc 1 639 6 is_stmt 1 view .LVU2850
 10722              	.LBB2061:
 640:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 10723              		.loc 1 640 2 view .LVU2851
 641:src/xeq.c     **** }
 10724              		.loc 1 641 2 view .LVU2852
 641:src/xeq.c     **** }
 10725              		.loc 1 641 24 is_stmt 0 view .LVU2853
 10726 0068 01A9     		add	r1, sp, #4
 10727 006a FFF7FEFF 		bl	decimal128ToNumber
 10728              	.LVL812:
 641:src/xeq.c     **** }
 10729              		.loc 1 641 24 view .LVU2854
 10730 006e 0146     		mov	r1, r0
 641:src/xeq.c     **** }
 10731              		.loc 1 641 2 view .LVU2855
 10732 0070 3846     		mov	r0, r7
 10733 0072 FFF7FEFF 		bl	packed_from_number
 10734              	.LVL813:
 642:src/xeq.c     **** 
 10735              		.loc 1 642 1 view .LVU2856
 10736 0076 DBE7     		b	.L785
 10737              	.L792:
 10738              		.align	2
 10739              	.L791:
 10740 0078 00000000 		.word	.LANCHOR3
 10741 007c 00000000 		.word	main_ram
 10742              	.LBE2061:
 10743              	.LBE2060:
 10744              		.cfi_endproc
 10745              	.LFE203:
 10747              		.section	.text.process_cmdline,"ax",%progbits
 10748              		.align	1
 10749              		.p2align 2,,3
 10750              		.global	process_cmdline
 10751              		.syntax unified
ARM GAS  /tmp/ccjeMhND.s 			page 332


 10752              		.thumb
 10753              		.thumb_func
 10754              		.fpu fpv4-sp-d16
 10756              	process_cmdline:
 10757              	.LFB84:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 10758              		.loc 1 1040 28 is_stmt 1 view -0
 10759              		.cfi_startproc
 10760              		@ args = 0, pretend = 0, frame = 168
 10761              		@ frame_needed = 0, uses_anonymous_args = 0
1041:src/xeq.c     **** 
 10762              		.loc 1 1041 2 view .LVU2858
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 10763              		.loc 1 1043 2 view .LVU2859
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 10764              		.loc 1 1040 28 is_stmt 0 view .LVU2860
 10765 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 10766              		.cfi_def_cfa_offset 32
 10767              		.cfi_offset 4, -32
 10768              		.cfi_offset 5, -28
 10769              		.cfi_offset 6, -24
 10770              		.cfi_offset 7, -20
 10771              		.cfi_offset 8, -16
 10772              		.cfi_offset 9, -12
 10773              		.cfi_offset 10, -8
 10774              		.cfi_offset 14, -4
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 10775              		.loc 1 1043 6 view .LVU2861
 10776 0004 7E4C     		ldr	r4, .L839
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 10777              		.loc 1 1043 5 view .LVU2862
 10778 0006 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 10779              		.loc 1 1040 28 view .LVU2863
 10780 0008 ACB0     		sub	sp, sp, #176
 10781              		.cfi_def_cfa_offset 208
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 10782              		.loc 1 1043 5 view .LVU2864
 10783 000a 13B9     		cbnz	r3, .L831
 10784              	.L793:
1144:src/xeq.c     **** 
 10785              		.loc 1 1144 1 view .LVU2865
 10786 000c 2CB0     		add	sp, sp, #176
 10787              		.cfi_remember_state
 10788              		.cfi_def_cfa_offset 32
 10789              		@ sp needed
 10790 000e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 10791              	.L831:
 10792              		.cfi_restore_state
 10793              	.LBB2084:
1044:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
 10794              		.loc 1 1044 3 is_stmt 1 view .LVU2866
1044:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
 10795              		.loc 1 1044 27 is_stmt 0 view .LVU2867
 10796 0012 FFF7FEFF 		bl	is_bad_cmdline
 10797              	.LVL814:
1055:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/ccjeMhND.s 			page 333


 10798              		.loc 1 1055 8 view .LVU2868
 10799 0016 7B4E     		ldr	r6, .L839+4
1045:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10800              		.loc 1 1045 35 view .LVU2869
 10801 0018 A77F     		ldrb	r7, [r4, #30]	@ zero_extendqisi2
1052:src/xeq.c     **** 
 10802              		.loc 1 1052 3 view .LVU2870
 10803 001a 1422     		movs	r2, #20
 10804 001c 04F12001 		add	r1, r4, #32
1044:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
 10805              		.loc 1 1044 27 view .LVU2871
 10806 0020 0546     		mov	r5, r0
 10807              	.LVL815:
1045:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10808              		.loc 1 1045 3 is_stmt 1 view .LVU2872
1049:src/xeq.c     **** #endif
 10809              		.loc 1 1049 3 view .LVU2873
1052:src/xeq.c     **** 
 10810              		.loc 1 1052 3 view .LVU2874
 10811 0022 03A8     		add	r0, sp, #12
 10812              	.LVL816:
1052:src/xeq.c     **** 
 10813              		.loc 1 1052 3 is_stmt 0 view .LVU2875
 10814 0024 FFF7FEFF 		bl	xcopy
 10815              	.LVL817:
1054:src/xeq.c     **** 		if (!is_intmode()) {
 10816              		.loc 1 1054 3 is_stmt 1 view .LVU2876
1055:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10817              		.loc 1 1055 8 is_stmt 0 view .LVU2877
 10818 0028 3168     		ldr	r1, [r6]
1054:src/xeq.c     **** 		if (!is_intmode()) {
 10819              		.loc 1 1054 11 view .LVU2878
 10820 002a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
1055:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10821              		.loc 1 1055 7 view .LVU2879
 10822 002c 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
1054:src/xeq.c     **** 		if (!is_intmode()) {
 10823              		.loc 1 1054 26 view .LVU2880
 10824 0030 2CA8     		add	r0, sp, #176
 10825 0032 00EB020C 		add	ip, r0, r2
1055:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10826              		.loc 1 1055 6 view .LVU2881
 10827 0036 13F00103 		ands	r3, r3, #1
1054:src/xeq.c     **** 		if (!is_intmode()) {
 10828              		.loc 1 1054 26 view .LVU2882
 10829 003a 4FF00000 		mov	r0, #0
 10830 003e 0CF8A40C 		strb	r0, [ip, #-164]
1055:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10831              		.loc 1 1055 3 is_stmt 1 view .LVU2883
1055:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10832              		.loc 1 1055 6 is_stmt 0 view .LVU2884
 10833 0042 46D0     		beq	.L832
1080:src/xeq.c     **** 		lift_if_enabled();
 10834              		.loc 1 1080 3 is_stmt 1 view .LVU2885
 10835              	.LBB2085:
 10836              	.LBB2086:
 10837              	.LBB2087:
ARM GAS  /tmp/ccjeMhND.s 			page 334


 10838              	.LBB2088:
 735:src/xeq.c     **** }
 10839              		.loc 1 735 15 is_stmt 0 view .LVU2886
 10840 0044 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 10841              	.LBE2088:
 10842              	.LBE2087:
 10843              	.LBE2086:
 10844              	.LBE2085:
1080:src/xeq.c     **** 		lift_if_enabled();
 10845              		.loc 1 1080 17 view .LVU2887
 10846 0046 2077     		strb	r0, [r4, #28]
1081:src/xeq.c     **** 		set_lift();
 10847              		.loc 1 1081 3 is_stmt 1 view .LVU2888
 10848              	.LBB2103:
 10849              	.LBI2085:
 738:src/xeq.c     **** 	if (get_lift())
 10850              		.loc 1 738 6 view .LVU2889
 10851              	.LBB2099:
 739:src/xeq.c     **** 		lift();
 10852              		.loc 1 739 2 view .LVU2890
 10853              	.LBB2094:
 10854              	.LBI2087:
 734:src/xeq.c     **** 	return State2.state_lift;
 10855              		.loc 1 734 12 view .LVU2891
 10856              	.LBB2089:
 735:src/xeq.c     **** }
 10857              		.loc 1 735 2 view .LVU2892
 10858              	.LBE2089:
 10859              	.LBE2094:
 739:src/xeq.c     **** 		lift();
 10860              		.loc 1 739 5 is_stmt 0 view .LVU2893
 10861 0048 5906     		lsls	r1, r3, #25
 10862              	.LBB2095:
 10863              	.LBB2090:
 735:src/xeq.c     **** }
 10864              		.loc 1 735 15 view .LVU2894
 10865 004a C3F38012 		ubfx	r2, r3, #6, #1
 10866              	.LBE2090:
 10867              	.LBE2095:
 739:src/xeq.c     **** 		lift();
 10868              		.loc 1 739 5 view .LVU2895
 10869 004e 00F1A680 		bmi	.L812
 10870              	.LBE2099:
 10871              	.LBE2103:
1082:src/xeq.c     **** 		CmdLineDot = 0;
 10872              		.loc 1 1082 3 is_stmt 1 view .LVU2896
 10873              	.LBB2104:
 10874              	.LBI2104:
 748:src/xeq.c     ****     State2.state_lift = 1;
 10875              		.loc 1 748 6 view .LVU2897
 10876              	.LBB2105:
 749:src/xeq.c     **** }
 10877              		.loc 1 749 5 view .LVU2898
 749:src/xeq.c     **** }
 10878              		.loc 1 749 23 is_stmt 0 view .LVU2899
 10879 0052 43F04003 		orr	r3, r3, #64
 10880 0056 E375     		strb	r3, [r4, #23]
ARM GAS  /tmp/ccjeMhND.s 			page 335


 10881              	.LBE2105:
 10882              	.LBE2104:
1083:src/xeq.c     **** 		CmdLineEex = 0;
 10883              		.loc 1 1083 3 is_stmt 1 view .LVU2900
1083:src/xeq.c     **** 		CmdLineEex = 0;
 10884              		.loc 1 1083 14 is_stmt 0 view .LVU2901
 10885 0058 A277     		strb	r2, [r4, #30]
1084:src/xeq.c     **** 		if (is_intmode()) {
 10886              		.loc 1 1084 3 is_stmt 1 view .LVU2902
1084:src/xeq.c     **** 		if (is_intmode()) {
 10887              		.loc 1 1084 14 is_stmt 0 view .LVU2903
 10888 005a 6277     		strb	r2, [r4, #29]
1085:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 10889              		.loc 1 1085 3 is_stmt 1 view .LVU2904
 10890              	.L814:
 10891              	.LBB2110:
1086:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 10892              		.loc 1 1086 4 view .LVU2905
1086:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 10893              		.loc 1 1086 41 is_stmt 0 view .LVU2906
 10894 005c 9DF80C70 		ldrb	r7, [sp, #12]	@ zero_extendqisi2
 10895              	.LVL818:
1086:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 10896              		.loc 1 1086 41 view .LVU2907
 10897 0060 A7F12D07 		sub	r7, #45
 10898 0064 B7FA87F7 		clz	r7, r7
1087:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 10899              		.loc 1 1087 31 view .LVU2908
 10900 0068 FFF7FEFF 		bl	int_base
 10901              	.LVL819:
1086:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 10902              		.loc 1 1086 41 view .LVU2909
 10903 006c 7F09     		lsrs	r7, r7, #5
 10904              	.LVL820:
1087:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 10905              		.loc 1 1087 4 is_stmt 1 view .LVU2910
1087:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 10906              		.loc 1 1087 31 is_stmt 0 view .LVU2911
 10907 006e 03AB     		add	r3, sp, #12
 10908 0070 DA19     		adds	r2, r3, r7
 10909              	.LVL821:
 10910              	.LBB2111:
 10911              	.LBI2111:
 971:src/xeq.c     **** 	unsigned long long int x = 0;
 10912              		.loc 1 971 24 is_stmt 1 view .LVU2912
 10913              	.LBB2112:
 972:src/xeq.c     **** 
 10914              		.loc 1 972 2 view .LVU2913
 972:src/xeq.c     **** 
 10915              		.loc 1 972 25 is_stmt 0 view .LVU2914
 10916 0072 4FF00008 		mov	r8, #0
 10917 0076 4FF00009 		mov	r9, #0
 10918 007a 03E0     		b	.L802
 10919              	.LVL822:
 10920              	.L833:
 10921              	.LBB2113:
 986:src/xeq.c     **** 	}
ARM GAS  /tmp/ccjeMhND.s 			page 336


 10922              		.loc 1 986 5 view .LVU2915
 10923 007c 14EB0308 		adds	r8, r4, r3
 10924              	.LVL823:
 986:src/xeq.c     **** 	}
 10925              		.loc 1 986 5 view .LVU2916
 10926 0080 45F10009 		adc	r9, r5, #0
 10927              	.LVL824:
 986:src/xeq.c     **** 	}
 10928              		.loc 1 986 5 view .LVU2917
 10929              	.LBE2113:
 974:src/xeq.c     **** 		unsigned int n;
 10930              		.loc 1 974 8 is_stmt 1 view .LVU2918
 10931              	.L802:
 974:src/xeq.c     **** 		unsigned int n;
 10932              		.loc 1 974 2 view .LVU2919
 10933              	.LBB2114:
 975:src/xeq.c     **** 		const char c = *s++;
 10934              		.loc 1 975 3 view .LVU2920
 976:src/xeq.c     **** 
 10935              		.loc 1 976 3 view .LVU2921
 979:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 10936              		.loc 1 979 4 view .LVU2922
 980:src/xeq.c     **** 			n = c - 'A' + 10;
 10937              		.loc 1 980 8 view .LVU2923
 981:src/xeq.c     **** 		else
 10938              		.loc 1 981 4 view .LVU2924
 976:src/xeq.c     **** 
 10939              		.loc 1 976 14 is_stmt 0 view .LVU2925
 10940 0084 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 10941              	.LVL825:
 978:src/xeq.c     **** 			n = c - '0';
 10942              		.loc 1 978 3 is_stmt 1 view .LVU2926
 978:src/xeq.c     **** 			n = c - '0';
 10943              		.loc 1 978 16 is_stmt 0 view .LVU2927
 10944 0088 A1F13003 		sub	r3, r1, #48
 978:src/xeq.c     **** 			n = c - '0';
 10945              		.loc 1 978 6 view .LVU2928
 10946 008c DCB2     		uxtb	r4, r3
 10947 008e 092C     		cmp	r4, #9
 980:src/xeq.c     **** 			n = c - 'A' + 10;
 10948              		.loc 1 980 11 view .LVU2929
 10949 0090 A1F14105 		sub	r5, r1, #65
 978:src/xeq.c     **** 			n = c - '0';
 10950              		.loc 1 978 6 view .LVU2930
 10951 0094 03D9     		bls	.L800
 980:src/xeq.c     **** 			n = c - 'A' + 10;
 10952              		.loc 1 980 11 view .LVU2931
 10953 0096 052D     		cmp	r5, #5
 10954 0098 07D8     		bhi	.L801
 981:src/xeq.c     **** 		else
 10955              		.loc 1 981 16 view .LVU2932
 10956 009a A1F13703 		sub	r3, r1, #55
 10957              	.LVL826:
 10958              	.L800:
 984:src/xeq.c     **** 			break;
 10959              		.loc 1 984 3 is_stmt 1 view .LVU2933
 986:src/xeq.c     **** 	}
ARM GAS  /tmp/ccjeMhND.s 			page 337


 10960              		.loc 1 986 3 view .LVU2934
 986:src/xeq.c     **** 	}
 10961              		.loc 1 986 9 is_stmt 0 view .LVU2935
 10962 009e A0FB0845 		umull	r4, r5, r0, r8
 984:src/xeq.c     **** 			break;
 10963              		.loc 1 984 6 view .LVU2936
 10964 00a2 9842     		cmp	r0, r3
 986:src/xeq.c     **** 	}
 10965              		.loc 1 986 9 view .LVU2937
 10966 00a4 00FB0955 		mla	r5, r0, r9, r5
 984:src/xeq.c     **** 			break;
 10967              		.loc 1 984 6 view .LVU2938
 10968 00a8 E8D8     		bhi	.L833
 10969              	.LVL827:
 10970              	.L801:
 984:src/xeq.c     **** 			break;
 10971              		.loc 1 984 6 view .LVU2939
 10972              	.LBE2114:
 988:src/xeq.c     **** }
 10973              		.loc 1 988 2 is_stmt 1 view .LVU2940
 988:src/xeq.c     **** }
 10974              		.loc 1 988 2 is_stmt 0 view .LVU2941
 10975              	.LBE2112:
 10976              	.LBE2111:
1088:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
 10977              		.loc 1 1088 4 is_stmt 1 view .LVU2942
 10978              	.LBB2115:
 10979              	.LBI2115:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 10980              		.loc 1 1323 6 view .LVU2943
 10981              	.LBB2116:
1324:src/xeq.c     **** }
 10982              		.loc 1 1324 2 view .LVU2944
 10983 00aa 0097     		str	r7, [sp]
 10984 00ac 4246     		mov	r2, r8
 10985 00ae 4B46     		mov	r3, r9
 10986 00b0 6420     		movs	r0, #100
 10987 00b2 FFF7FEFF 		bl	set_reg_n_int_sgn
 10988              	.LVL828:
 10989              	.L803:
1324:src/xeq.c     **** }
 10990              		.loc 1 1324 2 is_stmt 0 view .LVU2945
 10991              	.LBE2116:
 10992              	.LBE2115:
 10993              	.LBE2110:
1139:src/xeq.c     **** #ifndef DM42
 10994              		.loc 1 1139 3 is_stmt 1 view .LVU2946
 10995              	.LBB2117:
 10996              	.LBI2117:
3697:src/xeq.c     **** 	if (!Running && !XromRunning)
 10997              		.loc 1 3697 6 view .LVU2947
 10998              	.LBB2118:
3698:src/xeq.c     **** 		State.entryp = 1;
 10999              		.loc 1 3698 2 view .LVU2948
 11000              	.LBB2119:
 11001              	.LBI2119:
3697:src/xeq.c     **** 	if (!Running && !XromRunning)
ARM GAS  /tmp/ccjeMhND.s 			page 338


 11002              		.loc 1 3697 6 view .LVU2949
 11003              	.LBE2119:
3698:src/xeq.c     **** 		State.entryp = 1;
 11004              		.loc 1 3698 6 is_stmt 0 view .LVU2950
 11005 00b6 544A     		ldr	r2, .L839+8
 11006              	.LBB2121:
 11007              	.LBB2120:
3698:src/xeq.c     **** 		State.entryp = 1;
 11008              		.loc 1 3698 18 view .LVU2951
 11009 00b8 544B     		ldr	r3, .L839+12
3698:src/xeq.c     **** 		State.entryp = 1;
 11010              		.loc 1 3698 15 view .LVU2952
 11011 00ba 1268     		ldr	r2, [r2]
 11012 00bc 1B68     		ldr	r3, [r3]
 11013 00be 1343     		orrs	r3, r2, r3
 11014 00c0 A4D1     		bne	.L793
3699:src/xeq.c     **** }
 11015              		.loc 1 3699 3 is_stmt 1 view .LVU2953
3699:src/xeq.c     **** }
 11016              		.loc 1 3699 16 is_stmt 0 view .LVU2954
 11017 00c2 3268     		ldr	r2, [r6]
 11018 00c4 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 11019 00c8 43F01003 		orr	r3, r3, #16
 11020 00cc 82F8DD37 		strb	r3, [r2, #2013]
 11021 00d0 9CE7     		b	.L793
 11022              	.LVL829:
 11023              	.L832:
3699:src/xeq.c     **** }
 11024              		.loc 1 3699 16 view .LVU2955
 11025              	.LBE2120:
 11026              	.LBE2121:
 11027              	.LBE2118:
 11028              	.LBE2117:
1065:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11029              		.loc 1 1065 4 is_stmt 1 view .LVU2956
1065:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11030              		.loc 1 1065 15 is_stmt 0 view .LVU2957
 11031 00d2 0DF1B00C 		add	ip, sp, #176
1065:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11032              		.loc 1 1065 29 view .LVU2958
 11033 00d6 501E     		subs	r0, r2, #1
1065:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11034              		.loc 1 1065 15 view .LVU2959
 11035 00d8 6044     		add	r0, r0, ip
 11036 00da 10F8A4CC 		ldrb	ip, [r0, #-164]	@ zero_extendqisi2
1065:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11037              		.loc 1 1065 7 view .LVU2960
 11038 00de BCF1450F 		cmp	ip, #69
 11039 00e2 77D0     		beq	.L834
1067:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 11040              		.loc 1 1067 9 is_stmt 1 view .LVU2961
1067:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 11041              		.loc 1 1067 12 is_stmt 0 view .LVU2962
 11042 00e4 012A     		cmp	r2, #1
 11043 00e6 06D9     		bls	.L797
1067:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 11044              		.loc 1 1067 41 discriminator 1 view .LVU2963
ARM GAS  /tmp/ccjeMhND.s 			page 339


 11045 00e8 2CA8     		add	r0, sp, #176
1067:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 11046              		.loc 1 1067 55 discriminator 1 view .LVU2964
 11047 00ea 023A     		subs	r2, r2, #2
1067:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 11048              		.loc 1 1067 41 discriminator 1 view .LVU2965
 11049 00ec 0244     		add	r2, r2, r0
1067:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 11050              		.loc 1 1067 31 discriminator 1 view .LVU2966
 11051 00ee 12F8A40C 		ldrb	r0, [r2, #-164]	@ zero_extendqisi2
 11052 00f2 4528     		cmp	r0, #69
 11053 00f4 76D0     		beq	.L835
 11054              	.L797:
1080:src/xeq.c     **** 		lift_if_enabled();
 11055              		.loc 1 1080 3 is_stmt 1 view .LVU2967
 11056              	.LBB2122:
 11057              	.LBB2100:
 11058              	.LBB2096:
 11059              	.LBB2091:
 735:src/xeq.c     **** }
 11060              		.loc 1 735 15 is_stmt 0 view .LVU2968
 11061 00f6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11062              	.LBE2091:
 11063              	.LBE2096:
 11064              	.LBE2100:
 11065              	.LBE2122:
1080:src/xeq.c     **** 		lift_if_enabled();
 11066              		.loc 1 1080 17 view .LVU2969
 11067 00f8 0020     		movs	r0, #0
 11068 00fa 2077     		strb	r0, [r4, #28]
1081:src/xeq.c     **** 		set_lift();
 11069              		.loc 1 1081 3 is_stmt 1 view .LVU2970
 11070              	.LBB2123:
 738:src/xeq.c     **** 	if (get_lift())
 11071              		.loc 1 738 6 view .LVU2971
 11072              	.LBB2101:
 739:src/xeq.c     **** 		lift();
 11073              		.loc 1 739 2 view .LVU2972
 11074              	.LBB2097:
 734:src/xeq.c     **** 	return State2.state_lift;
 11075              		.loc 1 734 12 view .LVU2973
 11076              	.LBB2092:
 735:src/xeq.c     **** }
 11077              		.loc 1 735 2 view .LVU2974
 11078              	.LBE2092:
 11079              	.LBE2097:
 739:src/xeq.c     **** 		lift();
 11080              		.loc 1 739 5 is_stmt 0 view .LVU2975
 11081 00fc 5806     		lsls	r0, r3, #25
 11082              	.LBB2098:
 11083              	.LBB2093:
 735:src/xeq.c     **** }
 11084              		.loc 1 735 15 view .LVU2976
 11085 00fe C3F38012 		ubfx	r2, r3, #6, #1
 11086              	.LBE2093:
 11087              	.LBE2098:
 739:src/xeq.c     **** 		lift();
ARM GAS  /tmp/ccjeMhND.s 			page 340


 11088              		.loc 1 739 5 view .LVU2977
 11089 0102 4CD4     		bmi	.L812
 11090              	.LBE2101:
 11091              	.LBE2123:
1082:src/xeq.c     **** 		CmdLineDot = 0;
 11092              		.loc 1 1082 3 is_stmt 1 view .LVU2978
 11093              	.LBB2124:
 748:src/xeq.c     ****     State2.state_lift = 1;
 11094              		.loc 1 748 6 view .LVU2979
 11095              	.LBB2106:
 749:src/xeq.c     **** }
 11096              		.loc 1 749 5 view .LVU2980
 749:src/xeq.c     **** }
 11097              		.loc 1 749 23 is_stmt 0 view .LVU2981
 11098 0104 43F04003 		orr	r3, r3, #64
 11099              	.LBE2106:
 11100              	.LBE2124:
1089:src/xeq.c     **** 			char *d0, *d1, *d2;
 11101              		.loc 1 1089 13 view .LVU2982
 11102 0108 022F     		cmp	r7, #2
 11103              	.LBB2125:
 11104              	.LBB2107:
 749:src/xeq.c     **** }
 11105              		.loc 1 749 23 view .LVU2983
 11106 010a E375     		strb	r3, [r4, #23]
 11107              	.LBE2107:
 11108              	.LBE2125:
1083:src/xeq.c     **** 		CmdLineEex = 0;
 11109              		.loc 1 1083 3 is_stmt 1 view .LVU2984
1083:src/xeq.c     **** 		CmdLineEex = 0;
 11110              		.loc 1 1083 14 is_stmt 0 view .LVU2985
 11111 010c A277     		strb	r2, [r4, #30]
1084:src/xeq.c     **** 		if (is_intmode()) {
 11112              		.loc 1 1084 3 is_stmt 1 view .LVU2986
1084:src/xeq.c     **** 		if (is_intmode()) {
 11113              		.loc 1 1084 14 is_stmt 0 view .LVU2987
 11114 010e 6277     		strb	r2, [r4, #29]
1085:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11115              		.loc 1 1085 3 is_stmt 1 view .LVU2988
1089:src/xeq.c     **** 			char *d0, *d1, *d2;
 11116              		.loc 1 1089 10 view .LVU2989
1089:src/xeq.c     **** 			char *d0, *d1, *d2;
 11117              		.loc 1 1089 13 is_stmt 0 view .LVU2990
 11118 0110 56D1     		bne	.L804
 11119              	.L838:
 11120              	.LBB2126:
1090:src/xeq.c     **** 			int neg;
 11121              		.loc 1 1090 4 is_stmt 1 view .LVU2991
1091:src/xeq.c     **** 
 11122              		.loc 1 1091 4 view .LVU2992
1093:src/xeq.c     **** 				return;
 11123              		.loc 1 1093 4 view .LVU2993
1093:src/xeq.c     **** 				return;
 11124              		.loc 1 1093 7 is_stmt 0 view .LVU2994
 11125 0112 002D     		cmp	r5, #0
 11126 0114 7FF47AAF 		bne	.L793
1096:src/xeq.c     **** #endif
ARM GAS  /tmp/ccjeMhND.s 			page 341


 11127              		.loc 1 1096 4 is_stmt 1 view .LVU2995
1096:src/xeq.c     **** #endif
 11128              		.loc 1 1096 17 is_stmt 0 view .LVU2996
 11129 0118 91F8E637 		ldrb	r3, [r1, #2022]	@ zero_extendqisi2
 11130 011c 43F02003 		orr	r3, r3, #32
 11131 0120 81F8E637 		strb	r3, [r1, #2022]
1098:src/xeq.c     **** 				neg = 1;
 11132              		.loc 1 1098 4 is_stmt 1 view .LVU2997
1098:src/xeq.c     **** 				neg = 1;
 11133              		.loc 1 1098 7 is_stmt 0 view .LVU2998
 11134 0124 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 11135 0128 2D2B     		cmp	r3, #45
1103:src/xeq.c     **** 			}
 11136              		.loc 1 1103 8 view .LVU2999
 11137 012a 14BF     		ite	ne
 11138 012c 03AC     		addne	r4, sp, #12
1100:src/xeq.c     **** 			} else {
 11139              		.loc 1 1100 8 view .LVU3000
 11140 012e 0DF10D04 		addeq	r4, sp, #13
1105:src/xeq.c     **** 			*d1++ = '\0';
 11141              		.loc 1 1105 9 view .LVU3001
 11142 0132 4FF02E01 		mov	r1, #46
 11143 0136 2046     		mov	r0, r4
1099:src/xeq.c     **** 				d0 = cmdline+1;
 11144              		.loc 1 1099 9 view .LVU3002
 11145 0138 08BF     		it	eq
 11146 013a 0125     		moveq	r5, #1
 11147              	.LVL830:
1105:src/xeq.c     **** 			*d1++ = '\0';
 11148              		.loc 1 1105 4 is_stmt 1 view .LVU3003
1105:src/xeq.c     **** 			*d1++ = '\0';
 11149              		.loc 1 1105 9 is_stmt 0 view .LVU3004
 11150 013c FFF7FEFF 		bl	find_char
 11151              	.LVL831:
1106:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11152              		.loc 1 1106 4 is_stmt 1 view .LVU3005
1106:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11153              		.loc 1 1106 10 is_stmt 0 view .LVU3006
 11154 0140 8146     		mov	r9, r0
 11155 0142 4FF0000A 		mov	r10, #0
1106:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11156              		.loc 1 1106 7 view .LVU3007
 11157 0146 471C     		adds	r7, r0, #1
 11158              	.LVL832:
1106:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11159              		.loc 1 1106 10 view .LVU3008
 11160 0148 09F802AB 		strb	r10, [r9], #2
1107:src/xeq.c     **** 			*d2++ = '\0';
 11161              		.loc 1 1107 4 is_stmt 1 view .LVU3009
1107:src/xeq.c     **** 			*d2++ = '\0';
 11162              		.loc 1 1107 9 is_stmt 0 view .LVU3010
 11163 014c 2E21     		movs	r1, #46
 11164 014e 3846     		mov	r0, r7
 11165 0150 FFF7FEFF 		bl	find_char
 11166              	.LVL833:
1108:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11167              		.loc 1 1108 4 is_stmt 1 view .LVU3011
ARM GAS  /tmp/ccjeMhND.s 			page 342


1108:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11168              		.loc 1 1108 7 is_stmt 0 view .LVU3012
 11169 0154 8046     		mov	r8, r0
 11170              	.LVL834:
1109:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11171              		.loc 1 1109 4 view .LVU3013
 11172 0156 2E4A     		ldr	r2, .L839+16
1108:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11173              		.loc 1 1108 10 view .LVU3014
 11174 0158 08F801AB 		strb	r10, [r8], #1
 11175              	.LVL835:
1109:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11176              		.loc 1 1109 4 is_stmt 1 view .LVU3015
 11177 015c 11A8     		add	r0, sp, #68
 11178 015e 4146     		mov	r1, r8
 11179 0160 FFF7FEFF 		bl	decNumberFromString
 11180              	.LVL836:
1110:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11181              		.loc 1 1110 4 view .LVU3016
 11182 0164 2146     		mov	r1, r4
 11183 0166 2A4A     		ldr	r2, .L839+16
 11184 0168 1AA8     		add	r0, sp, #104
 11185 016a FFF7FEFF 		bl	decNumberFromString
 11186              	.LVL837:
1112:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11187              		.loc 1 1112 4 view .LVU3017
1112:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11188              		.loc 1 1112 7 is_stmt 0 view .LVU3018
 11189 016e C845     		cmp	r8, r9
1113:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 11190              		.loc 1 1113 5 view .LVU3019
 11191 0170 08AC     		add	r4, sp, #32
 11192              	.LVL838:
1112:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11193              		.loc 1 1112 7 view .LVU3020
 11194 0172 3DD0     		beq	.L836
1122:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11195              		.loc 1 1122 5 is_stmt 1 view .LVU3021
 11196 0174 264A     		ldr	r2, .L839+16
 11197 0176 3946     		mov	r1, r7
 11198 0178 2046     		mov	r0, r4
 11199 017a FFF7FEFF 		bl	decNumberFromString
 11200              	.LVL839:
 11201              	.L809:
1127:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
 11202              		.loc 1 1127 4 view .LVU3022
 11203 017e 11AA     		add	r2, sp, #68
 11204 0180 2146     		mov	r1, r4
 11205 0182 23A8     		add	r0, sp, #140
 11206 0184 FFF7FEFF 		bl	dn_divide
 11207              	.LVL840:
1131:src/xeq.c     **** 			if (neg)
 11208              		.loc 1 1131 5 view .LVU3023
 11209 0188 1AA9     		add	r1, sp, #104
 11210 018a 23AA     		add	r2, sp, #140
 11211 018c 0846     		mov	r0, r1
 11212 018e FFF7FEFF 		bl	dn_add
ARM GAS  /tmp/ccjeMhND.s 			page 343


 11213              	.LVL841:
1132:src/xeq.c     **** 				dn_minus(&x, &x);
 11214              		.loc 1 1132 4 view .LVU3024
1132:src/xeq.c     **** 				dn_minus(&x, &x);
 11215              		.loc 1 1132 7 is_stmt 0 view .LVU3025
 11216 0192 15BB     		cbnz	r5, .L837
 11217              	.L829:
 11218              	.LBE2126:
1137:src/xeq.c     **** 		}
 11219              		.loc 1 1137 4 is_stmt 1 view .LVU3026
 11220              	.LVL842:
 11221              	.LBB2129:
 11222              	.LBI2129:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 11223              		.loc 1 809 6 view .LVU3027
 11224              	.LBB2130:
 810:src/xeq.c     **** }
 11225              		.loc 1 810 2 view .LVU3028
 11226 0194 1AA9     		add	r1, sp, #104
 11227              	.LVL843:
 810:src/xeq.c     **** }
 11228              		.loc 1 810 2 is_stmt 0 view .LVU3029
 11229 0196 6420     		movs	r0, #100
 11230 0198 FFF7FEFF 		bl	setRegister
 11231              	.LVL844:
 811:src/xeq.c     **** 
 11232              		.loc 1 811 1 view .LVU3030
 11233 019c 8BE7     		b	.L803
 11234              	.LVL845:
 11235              	.L812:
 811:src/xeq.c     **** 
 11236              		.loc 1 811 1 view .LVU3031
 11237              	.LBE2130:
 11238              	.LBE2129:
 11239              	.LBB2132:
 11240              	.LBB2102:
 740:src/xeq.c     **** }
 11241              		.loc 1 740 3 is_stmt 1 view .LVU3032
 11242 019e FFF7FEFF 		bl	lift
 11243              	.LVL846:
 11244              	.LBE2102:
 11245              	.LBE2132:
1082:src/xeq.c     **** 		CmdLineDot = 0;
 11246              		.loc 1 1082 3 view .LVU3033
 11247              	.LBB2133:
 748:src/xeq.c     ****     State2.state_lift = 1;
 11248              		.loc 1 748 6 view .LVU3034
 11249              	.LBB2108:
 749:src/xeq.c     **** }
 11250              		.loc 1 749 5 view .LVU3035
 11251 01a2 3168     		ldr	r1, [r6]
 749:src/xeq.c     **** }
 11252              		.loc 1 749 23 is_stmt 0 view .LVU3036
 11253 01a4 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11254 01a6 91F8E807 		ldrb	r0, [r1, #2024]	@ zero_extendqisi2
 11255              	.LBE2108:
 11256              	.LBE2133:
ARM GAS  /tmp/ccjeMhND.s 			page 344


1083:src/xeq.c     **** 		CmdLineEex = 0;
 11257              		.loc 1 1083 14 view .LVU3037
 11258 01aa 0022     		movs	r2, #0
 11259              	.LBB2134:
 11260              	.LBB2109:
 749:src/xeq.c     **** }
 11261              		.loc 1 749 23 view .LVU3038
 11262 01ac 43F04003 		orr	r3, r3, #64
 11263 01b0 E375     		strb	r3, [r4, #23]
 11264              	.LBE2109:
 11265              	.LBE2134:
1083:src/xeq.c     **** 		CmdLineEex = 0;
 11266              		.loc 1 1083 3 is_stmt 1 view .LVU3039
1083:src/xeq.c     **** 		CmdLineEex = 0;
 11267              		.loc 1 1083 14 is_stmt 0 view .LVU3040
 11268 01b2 A277     		strb	r2, [r4, #30]
1084:src/xeq.c     **** 		if (is_intmode()) {
 11269              		.loc 1 1084 3 is_stmt 1 view .LVU3041
1084:src/xeq.c     **** 		if (is_intmode()) {
 11270              		.loc 1 1084 14 is_stmt 0 view .LVU3042
 11271 01b4 6277     		strb	r2, [r4, #29]
1085:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11272              		.loc 1 1085 3 is_stmt 1 view .LVU3043
1085:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11273              		.loc 1 1085 6 is_stmt 0 view .LVU3044
 11274 01b6 C407     		lsls	r4, r0, #31
 11275 01b8 3FF550AF 		bmi	.L814
1089:src/xeq.c     **** 			char *d0, *d1, *d2;
 11276              		.loc 1 1089 10 is_stmt 1 view .LVU3045
1089:src/xeq.c     **** 			char *d0, *d1, *d2;
 11277              		.loc 1 1089 13 is_stmt 0 view .LVU3046
 11278 01bc 022F     		cmp	r7, #2
 11279 01be A8D0     		beq	.L838
 11280              	.L804:
1136:src/xeq.c     **** 			setX(&x);
 11281              		.loc 1 1136 4 is_stmt 1 view .LVU3047
 11282 01c0 03A9     		add	r1, sp, #12
 11283 01c2 134A     		ldr	r2, .L839+16
 11284 01c4 1AA8     		add	r0, sp, #104
 11285 01c6 FFF7FEFF 		bl	decNumberFromString
 11286              	.LVL847:
1137:src/xeq.c     **** 		}
 11287              		.loc 1 1137 4 view .LVU3048
 11288              	.LBB2135:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 11289              		.loc 1 809 6 view .LVU3049
 11290              	.LBB2131:
 810:src/xeq.c     **** }
 11291              		.loc 1 810 2 view .LVU3050
 11292 01ca 1AA9     		add	r1, sp, #104
 11293              	.LVL848:
 810:src/xeq.c     **** }
 11294              		.loc 1 810 2 is_stmt 0 view .LVU3051
 11295 01cc 6420     		movs	r0, #100
 11296 01ce FFF7FEFF 		bl	setRegister
 11297              	.LVL849:
 810:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 345


 11298              		.loc 1 810 2 view .LVU3052
 11299 01d2 70E7     		b	.L803
 11300              	.LVL850:
 11301              	.L834:
 810:src/xeq.c     **** }
 11302              		.loc 1 810 2 view .LVU3053
 11303              	.LBE2131:
 11304              	.LBE2135:
1066:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
 11305              		.loc 1 1066 5 is_stmt 1 view .LVU3054
1066:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
 11306              		.loc 1 1066 30 is_stmt 0 view .LVU3055
 11307 01d4 00F8A43C 		strb	r3, [r0, #-164]
 11308 01d8 8DE7     		b	.L797
 11309              	.LVL851:
 11310              	.L837:
 11311              	.LBB2136:
1133:src/xeq.c     **** 			setX(&x);
 11312              		.loc 1 1133 5 is_stmt 1 view .LVU3056
 11313 01da 1AA9     		add	r1, sp, #104
 11314 01dc 0846     		mov	r0, r1
 11315 01de FFF7FEFF 		bl	dn_minus
 11316              	.LVL852:
1134:src/xeq.c     **** 		} else {
 11317              		.loc 1 1134 4 view .LVU3057
 11318              	.LBB2127:
 11319              	.LBI2127:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 11320              		.loc 1 809 6 view .LVU3058
 11321              	.LBB2128:
 810:src/xeq.c     **** }
 11322              		.loc 1 810 2 view .LVU3059
 11323 01e2 D7E7     		b	.L829
 11324              	.LVL853:
 11325              	.L835:
 810:src/xeq.c     **** }
 11326              		.loc 1 810 2 is_stmt 0 view .LVU3060
 11327              	.LBE2128:
 11328              	.LBE2127:
 11329              	.LBE2136:
1067:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 11330              		.loc 1 1067 66 discriminator 2 view .LVU3061
 11331 01e4 BCF12D0F 		cmp	ip, #45
 11332 01e8 85D1     		bne	.L797
1068:src/xeq.c     **** #endif
 11333              		.loc 1 1068 5 is_stmt 1 view .LVU3062
1068:src/xeq.c     **** #endif
 11334              		.loc 1 1068 30 is_stmt 0 view .LVU3063
 11335 01ea 02F8A43C 		strb	r3, [r2, #-164]
 11336 01ee 82E7     		b	.L797
 11337              	.LVL854:
 11338              	.L836:
 11339              	.LBB2137:
1113:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 11340              		.loc 1 1113 5 is_stmt 1 view .LVU3064
 11341 01f0 2046     		mov	r0, r4
 11342 01f2 1AA9     		add	r1, sp, #104
ARM GAS  /tmp/ccjeMhND.s 			page 346


 11343 01f4 FFF7FEFF 		bl	decNumberCopy
 11344              	.LVL855:
1114:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
 11345              		.loc 1 1114 5 view .LVU3065
 11346 01f8 1AA8     		add	r0, sp, #104
 11347 01fa FFF7FEFF 		bl	decNumberZero
 11348              	.LVL856:
 11349 01fe BEE7     		b	.L809
 11350              	.L840:
 11351              		.align	2
 11352              	.L839:
 11353 0200 00000000 		.word	StateWhileOn
 11354 0204 00000000 		.word	main_ram
 11355 0208 00000000 		.word	Running
 11356 020c 00000000 		.word	XromRunning
 11357 0210 00000000 		.word	Ctx
 11358              	.LBE2137:
 11359              	.LBE2084:
 11360              		.cfi_endproc
 11361              	.LFE84:
 11363              		.section	.text.process_cmdline_set_lift,"ax",%progbits
 11364              		.align	1
 11365              		.p2align 2,,3
 11366              		.global	process_cmdline_set_lift
 11367              		.syntax unified
 11368              		.thumb
 11369              		.thumb_func
 11370              		.fpu fpv4-sp-d16
 11372              	process_cmdline_set_lift:
 11373              	.LFB85:
1146:src/xeq.c     **** 	process_cmdline();
 11374              		.loc 1 1146 37 view -0
 11375              		.cfi_startproc
 11376              		@ args = 0, pretend = 0, frame = 0
 11377              		@ frame_needed = 0, uses_anonymous_args = 0
1147:src/xeq.c     **** 	set_lift();
 11378              		.loc 1 1147 2 view .LVU3067
1146:src/xeq.c     **** 	process_cmdline();
 11379              		.loc 1 1146 37 is_stmt 0 view .LVU3068
 11380 0000 08B5     		push	{r3, lr}
 11381              		.cfi_def_cfa_offset 8
 11382              		.cfi_offset 3, -8
 11383              		.cfi_offset 14, -4
1147:src/xeq.c     **** 	set_lift();
 11384              		.loc 1 1147 2 view .LVU3069
 11385 0002 FFF7FEFF 		bl	process_cmdline
 11386              	.LVL857:
1148:src/xeq.c     **** }
 11387              		.loc 1 1148 2 is_stmt 1 view .LVU3070
 11388              	.LBB2138:
 11389              	.LBI2138:
 748:src/xeq.c     ****     State2.state_lift = 1;
 11390              		.loc 1 748 6 view .LVU3071
 11391              	.LBB2139:
 749:src/xeq.c     **** }
 11392              		.loc 1 749 5 view .LVU3072
 749:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 347


 11393              		.loc 1 749 23 is_stmt 0 view .LVU3073
 11394 0006 034A     		ldr	r2, .L843
 11395 0008 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 11396 000a 43F04003 		orr	r3, r3, #64
 11397 000e D375     		strb	r3, [r2, #23]
 11398              	.LBE2139:
 11399              	.LBE2138:
1149:src/xeq.c     **** 
 11400              		.loc 1 1149 1 view .LVU3074
 11401 0010 08BD     		pop	{r3, pc}
 11402              	.L844:
 11403 0012 00BF     		.align	2
 11404              	.L843:
 11405 0014 00000000 		.word	StateWhileOn
 11406              		.cfi_endproc
 11407              	.LFE85:
 11409              		.section	.text.setX_int,"ax",%progbits
 11410              		.align	1
 11411              		.p2align 2,,3
 11412              		.global	setX_int
 11413              		.syntax unified
 11414              		.thumb
 11415              		.thumb_func
 11416              		.fpu fpv4-sp-d16
 11418              	setX_int:
 11419              	.LVL858:
 11420              	.LFB98:
1318:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 11421              		.loc 1 1318 34 is_stmt 1 view -0
 11422              		.cfi_startproc
 11423              		@ args = 0, pretend = 0, frame = 8
 11424              		@ frame_needed = 0, uses_anonymous_args = 0
1319:src/xeq.c     **** }
 11425              		.loc 1 1319 2 view .LVU3076
1318:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 11426              		.loc 1 1318 34 is_stmt 0 view .LVU3077
 11427 0000 00B5     		push	{lr}
 11428              		.cfi_def_cfa_offset 4
 11429              		.cfi_offset 14, -4
 11430 0002 0B46     		mov	r3, r1
 11431 0004 83B0     		sub	sp, sp, #12
 11432              		.cfi_def_cfa_offset 16
1318:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 11433              		.loc 1 1318 34 view .LVU3078
 11434 0006 0246     		mov	r2, r0
 11435              	.LBB2140:
 11436              	.LBB2141:
1237:src/xeq.c     **** }
 11437              		.loc 1 1237 8 view .LVU3079
 11438 0008 6420     		movs	r0, #100
 11439              	.LVL859:
1237:src/xeq.c     **** }
 11440              		.loc 1 1237 8 view .LVU3080
 11441 000a CDE90023 		strd	r2, [sp]
 11442              	.LVL860:
1237:src/xeq.c     **** }
 11443              		.loc 1 1237 8 view .LVU3081
ARM GAS  /tmp/ccjeMhND.s 			page 348


 11444              	.LBE2141:
 11445              	.LBI2140:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 11446              		.loc 1 1236 6 is_stmt 1 view .LVU3082
 11447              	.LBB2142:
1237:src/xeq.c     **** }
 11448              		.loc 1 1237 2 view .LVU3083
1237:src/xeq.c     **** }
 11449              		.loc 1 1237 8 is_stmt 0 view .LVU3084
 11450 000e FFF7FEFF 		bl	get_reg_n
 11451              	.LVL861:
1237:src/xeq.c     **** }
 11452              		.loc 1 1237 2 view .LVU3085
 11453 0012 0822     		movs	r2, #8
 11454 0014 6946     		mov	r1, sp
 11455 0016 FFF7FEFF 		bl	xcopy
 11456              	.LVL862:
1237:src/xeq.c     **** }
 11457              		.loc 1 1237 2 view .LVU3086
 11458              	.LBE2142:
 11459              	.LBE2140:
1320:src/xeq.c     **** 
 11460              		.loc 1 1320 1 view .LVU3087
 11461 001a 03B0     		add	sp, sp, #12
 11462              		.cfi_def_cfa_offset 4
 11463              		@ sp needed
 11464 001c 5DF804FB 		ldr	pc, [sp], #4
 11465              		.cfi_endproc
 11466              	.LFE98:
 11468              		.section	.text.do_rcl,"ax",%progbits
 11469              		.align	1
 11470              		.p2align 2,,3
 11471              		.syntax unified
 11472              		.thumb
 11473              		.thumb_func
 11474              		.fpu fpv4-sp-d16
 11476              	do_rcl:
 11477              	.LVL863:
 11478              	.LFB114:
1546:src/xeq.c     **** 	if (op == RARG_RCL) {
 11479              		.loc 1 1546 45 is_stmt 1 view -0
 11480              		.cfi_startproc
 11481              		@ args = 0, pretend = 0, frame = 40
 11482              		@ frame_needed = 0, uses_anonymous_args = 0
1547:src/xeq.c     **** 		REGISTER temp;
 11483              		.loc 1 1547 2 view .LVU3089
1546:src/xeq.c     **** 	if (op == RARG_RCL) {
 11484              		.loc 1 1546 45 is_stmt 0 view .LVU3090
 11485 0000 30B5     		push	{r4, r5, lr}
 11486              		.cfi_def_cfa_offset 12
 11487              		.cfi_offset 4, -12
 11488              		.cfi_offset 5, -8
 11489              		.cfi_offset 14, -4
1547:src/xeq.c     **** 		REGISTER temp;
 11490              		.loc 1 1547 5 view .LVU3091
 11491 0002 0A29     		cmp	r1, #10
1546:src/xeq.c     **** 	if (op == RARG_RCL) {
ARM GAS  /tmp/ccjeMhND.s 			page 349


 11492              		.loc 1 1546 45 view .LVU3092
 11493 0004 8BB0     		sub	sp, sp, #44
 11494              		.cfi_def_cfa_offset 56
1546:src/xeq.c     **** 	if (op == RARG_RCL) {
 11495              		.loc 1 1546 45 view .LVU3093
 11496 0006 0B46     		mov	r3, r1
1547:src/xeq.c     **** 		REGISTER temp;
 11497              		.loc 1 1547 5 view .LVU3094
 11498 0008 33D0     		beq	.L868
1553:src/xeq.c     **** 			long long int r;
 11499              		.loc 1 1553 3 is_stmt 1 view .LVU3095
1553:src/xeq.c     **** 			long long int r;
 11500              		.loc 1 1553 7 is_stmt 0 view .LVU3096
 11501 000a 304A     		ldr	r2, .L870
 11502 000c 1268     		ldr	r2, [r2]
 11503 000e 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1553:src/xeq.c     **** 			long long int r;
 11504              		.loc 1 1553 6 view .LVU3097
 11505 0012 D207     		lsls	r2, r2, #31
 11506 0014 0146     		mov	r1, r0
 11507              	.LVL864:
 11508              	.LBB2172:
1556:src/xeq.c     **** 				illegal(op);
 11509              		.loc 1 1556 8 view .LVU3098
 11510 0016 A3F10A03 		sub	r3, r3, #10
 11511              	.LBE2172:
1553:src/xeq.c     **** 			long long int r;
 11512              		.loc 1 1553 6 view .LVU3099
 11513 001a 14D5     		bpl	.L853
 11514              	.LBB2179:
1554:src/xeq.c     **** 
 11515              		.loc 1 1554 4 is_stmt 1 view .LVU3100
1556:src/xeq.c     **** 				illegal(op);
 11516              		.loc 1 1556 4 view .LVU3101
1556:src/xeq.c     **** 				illegal(op);
 11517              		.loc 1 1556 8 is_stmt 0 view .LVU3102
 11518 001c 98B2     		uxth	r0, r3
 11519              	.LVL865:
1556:src/xeq.c     **** 				illegal(op);
 11520              		.loc 1 1556 8 view .LVU3103
 11521 001e 6A46     		mov	r2, sp
 11522 0020 0123     		movs	r3, #1
 11523 0022 FFF7FEFF 		bl	storcl_intop
 11524              	.LVL866:
1556:src/xeq.c     **** 				illegal(op);
 11525              		.loc 1 1556 7 view .LVU3104
 11526 0026 20B1     		cbz	r0, .L854
1557:src/xeq.c     **** 			setlastX();
 11527              		.loc 1 1557 5 is_stmt 1 view .LVU3105
1557:src/xeq.c     **** 			setlastX();
 11528              		.loc 1 1557 5 view .LVU3106
 11529              	.LVL867:
 11530              	.LBB2173:
 11531              	.LBI2173:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 11532              		.loc 1 537 5 view .LVU3107
 11533              	.LBB2174:
ARM GAS  /tmp/ccjeMhND.s 			page 350


 538:src/xeq.c     **** 		Error = e;
 11534              		.loc 1 538 2 view .LVU3108
 538:src/xeq.c     **** 		Error = e;
 11535              		.loc 1 538 12 is_stmt 0 view .LVU3109
 11536 0028 294B     		ldr	r3, .L870+4
 538:src/xeq.c     **** 		Error = e;
 11537              		.loc 1 538 5 view .LVU3110
 11538 002a 1A68     		ldr	r2, [r3]
 11539 002c 0AB9     		cbnz	r2, .L854
 11540              	.LVL868:
 11541              	.LBB2175:
 11542              	.LBI2175:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 11543              		.loc 1 537 5 is_stmt 1 view .LVU3111
 11544              	.LBB2176:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 11545              		.loc 1 539 3 view .LVU3112
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 11546              		.loc 1 539 9 is_stmt 0 view .LVU3113
 11547 002e 0322     		movs	r2, #3
 11548 0030 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 11549              		.loc 1 540 3 is_stmt 1 view .LVU3114
 11550              	.LVL869:
 11551              	.L854:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 11552              		.loc 1 540 3 is_stmt 0 view .LVU3115
 11553              	.LBE2176:
 11554              	.LBE2175:
 11555              	.LBE2174:
 11556              	.LBE2173:
1557:src/xeq.c     **** 			setlastX();
 11557              		.loc 1 1557 5 is_stmt 1 discriminator 1 view .LVU3116
1558:src/xeq.c     **** 			setX_int(r);
 11558              		.loc 1 1558 4 discriminator 1 view .LVU3117
 11559              	.LBB2177:
 11560              	.LBI2177:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 11561              		.loc 1 773 6 discriminator 1 view .LVU3118
 11562              	.LBB2178:
 774:src/xeq.c     **** }
 11563              		.loc 1 774 2 discriminator 1 view .LVU3119
 11564 0032 6421     		movs	r1, #100
 11565 0034 6C20     		movs	r0, #108
 11566 0036 FFF7FEFF 		bl	copyreg_n
 11567              	.LVL870:
 11568              	.LBE2178:
 11569              	.LBE2177:
1559:src/xeq.c     **** 		} else {
 11570              		.loc 1 1559 4 discriminator 1 view .LVU3120
 11571 003a DDE90001 		ldrd	r0, [sp]
 11572 003e FFF7FEFF 		bl	setX_int
 11573              	.LVL871:
 11574              	.LBE2179:
1569:src/xeq.c     **** 
 11575              		.loc 1 1569 1 is_stmt 0 discriminator 1 view .LVU3121
 11576 0042 0BB0     		add	sp, sp, #44
ARM GAS  /tmp/ccjeMhND.s 			page 351


 11577              		.cfi_remember_state
 11578              		.cfi_def_cfa_offset 12
 11579              		@ sp needed
 11580 0044 30BD     		pop	{r4, r5, pc}
 11581              	.LVL872:
 11582              	.L853:
 11583              		.cfi_restore_state
 11584              	.LBB2180:
1561:src/xeq.c     **** 
 11585              		.loc 1 1561 4 is_stmt 1 view .LVU3122
1563:src/xeq.c     **** 				illegal(op);
 11586              		.loc 1 1563 4 view .LVU3123
1563:src/xeq.c     **** 				illegal(op);
 11587              		.loc 1 1563 8 is_stmt 0 view .LVU3124
 11588 0046 6C46     		mov	r4, sp
 11589 0048 98B2     		uxth	r0, r3
 11590              	.LVL873:
1563:src/xeq.c     **** 				illegal(op);
 11591              		.loc 1 1563 8 view .LVU3125
 11592 004a 2246     		mov	r2, r4
 11593 004c 0123     		movs	r3, #1
 11594 004e FFF7FEFF 		bl	storcl_op
 11595              	.LVL874:
1563:src/xeq.c     **** 				illegal(op);
 11596              		.loc 1 1563 7 view .LVU3126
 11597 0052 20B1     		cbz	r0, .L855
1564:src/xeq.c     **** 			setlastX();
 11598              		.loc 1 1564 5 is_stmt 1 view .LVU3127
1564:src/xeq.c     **** 			setlastX();
 11599              		.loc 1 1564 5 view .LVU3128
 11600              	.LVL875:
 11601              	.LBB2181:
 11602              	.LBI2181:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 11603              		.loc 1 537 5 view .LVU3129
 11604              	.LBB2182:
 538:src/xeq.c     **** 		Error = e;
 11605              		.loc 1 538 2 view .LVU3130
 538:src/xeq.c     **** 		Error = e;
 11606              		.loc 1 538 12 is_stmt 0 view .LVU3131
 11607 0054 1E4B     		ldr	r3, .L870+4
 538:src/xeq.c     **** 		Error = e;
 11608              		.loc 1 538 5 view .LVU3132
 11609 0056 1A68     		ldr	r2, [r3]
 11610 0058 0AB9     		cbnz	r2, .L855
 11611              	.LVL876:
 11612              	.LBB2183:
 11613              	.LBI2183:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 11614              		.loc 1 537 5 is_stmt 1 view .LVU3133
 11615              	.LBB2184:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 11616              		.loc 1 539 3 view .LVU3134
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 11617              		.loc 1 539 9 is_stmt 0 view .LVU3135
 11618 005a 0322     		movs	r2, #3
 11619 005c 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccjeMhND.s 			page 352


 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 11620              		.loc 1 540 3 is_stmt 1 view .LVU3136
 11621              	.LVL877:
 11622              	.L855:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 11623              		.loc 1 540 3 is_stmt 0 view .LVU3137
 11624              	.LBE2184:
 11625              	.LBE2183:
 11626              	.LBE2182:
 11627              	.LBE2181:
1564:src/xeq.c     **** 			setlastX();
 11628              		.loc 1 1564 5 is_stmt 1 discriminator 1 view .LVU3138
1565:src/xeq.c     **** 			setX(&r);
 11629              		.loc 1 1565 4 discriminator 1 view .LVU3139
 11630              	.LBB2185:
 11631              	.LBI2185:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 11632              		.loc 1 773 6 discriminator 1 view .LVU3140
 11633              	.LBB2186:
 774:src/xeq.c     **** }
 11634              		.loc 1 774 2 discriminator 1 view .LVU3141
 11635 005e 6421     		movs	r1, #100
 11636 0060 6C20     		movs	r0, #108
 11637 0062 FFF7FEFF 		bl	copyreg_n
 11638              	.LVL878:
 11639              	.LBE2186:
 11640              	.LBE2185:
1566:src/xeq.c     **** 		}
 11641              		.loc 1 1566 4 discriminator 1 view .LVU3142
 11642              	.LBB2187:
 11643              	.LBI2187:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 11644              		.loc 1 809 6 discriminator 1 view .LVU3143
 11645              	.LBB2188:
 810:src/xeq.c     **** }
 11646              		.loc 1 810 2 discriminator 1 view .LVU3144
 11647 0066 2146     		mov	r1, r4
 11648 0068 6420     		movs	r0, #100
 11649 006a FFF7FEFF 		bl	setRegister
 11650              	.LVL879:
 810:src/xeq.c     **** }
 11651              		.loc 1 810 2 is_stmt 0 discriminator 1 view .LVU3145
 11652              	.LBE2188:
 11653              	.LBE2187:
 11654              	.LBE2180:
1569:src/xeq.c     **** 
 11655              		.loc 1 1569 1 discriminator 1 view .LVU3146
 11656 006e 0BB0     		add	sp, sp, #44
 11657              		.cfi_remember_state
 11658              		.cfi_def_cfa_offset 12
 11659              		@ sp needed
 11660 0070 30BD     		pop	{r4, r5, pc}
 11661              	.LVL880:
 11662              	.L868:
 11663              		.cfi_restore_state
 11664              	.LBB2189:
1548:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
ARM GAS  /tmp/ccjeMhND.s 			page 353


 11665              		.loc 1 1548 3 is_stmt 1 view .LVU3147
1549:src/xeq.c     **** 		lift_if_enabled();
 11666              		.loc 1 1549 3 view .LVU3148
 11667              	.LBB2190:
 11668              	.LBB2191:
 11669              	.LBB2192:
 11670              	.LBB2193:
 933:src/xeq.c     **** }
 11671              		.loc 1 933 24 is_stmt 0 view .LVU3149
 11672 0072 164D     		ldr	r5, .L870
 11673              	.LBE2193:
 11674              	.LBE2192:
 11675              	.LBE2191:
 11676              	.LBE2190:
1549:src/xeq.c     **** 		lift_if_enabled();
 11677              		.loc 1 1549 18 view .LVU3150
 11678 0074 FFF7FEFF 		bl	get_reg_n
 11679              	.LVL881:
 11680              	.LBB2200:
 11681              	.LBB2198:
 11682              	.LBB2196:
 11683              	.LBB2194:
 933:src/xeq.c     **** }
 11684              		.loc 1 933 24 view .LVU3151
 11685 0078 2B68     		ldr	r3, [r5]
 11686 007a B3F8E827 		ldrh	r2, [r3, #2024]
 11687 007e 44F20103 		movw	r3, #16385
 11688              	.LBE2194:
 11689              	.LBE2196:
 718:src/xeq.c     **** }
 11690              		.loc 1 718 2 view .LVU3152
 11691 0082 1340     		ands	r3, r3, r2
 11692 0084 B3F5804F 		cmp	r3, #16384
 11693 0088 6C46     		mov	r4, sp
 11694              	.LBE2198:
 11695              	.LBE2200:
1549:src/xeq.c     **** 		lift_if_enabled();
 11696              		.loc 1 1549 18 view .LVU3153
 11697 008a 0146     		mov	r1, r0
 11698              	.LVL882:
 11699              	.LBB2201:
 11700              	.LBI2190:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 11701              		.loc 1 717 6 is_stmt 1 view .LVU3154
 11702              	.LBB2199:
 718:src/xeq.c     **** }
 11703              		.loc 1 718 2 view .LVU3155
 11704              	.LBB2197:
 11705              	.LBI2192:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11706              		.loc 1 932 5 view .LVU3156
 11707              	.LBB2195:
 933:src/xeq.c     **** }
 11708              		.loc 1 933 2 view .LVU3157
 11709              	.LBE2195:
 11710              	.LBE2197:
 718:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 354


 11711              		.loc 1 718 2 is_stmt 0 view .LVU3158
 11712 008c 0CBF     		ite	eq
 11713 008e 1022     		moveq	r2, #16
 11714 0090 0822     		movne	r2, #8
 11715 0092 2046     		mov	r0, r4
 11716              	.LVL883:
 718:src/xeq.c     **** }
 11717              		.loc 1 718 2 view .LVU3159
 11718 0094 FFF7FEFF 		bl	xcopy
 11719              	.LVL884:
 718:src/xeq.c     **** }
 11720              		.loc 1 718 2 view .LVU3160
 11721              	.LBE2199:
 11722              	.LBE2201:
1550:src/xeq.c     **** 		copyreg(StackBase, &temp);
 11723              		.loc 1 1550 3 is_stmt 1 view .LVU3161
 11724              	.LBB2202:
 11725              	.LBI2202:
 738:src/xeq.c     **** 	if (get_lift())
 11726              		.loc 1 738 6 view .LVU3162
 11727              	.LBB2203:
 739:src/xeq.c     **** 		lift();
 11728              		.loc 1 739 2 view .LVU3163
 11729              	.LBB2204:
 11730              	.LBI2204:
 734:src/xeq.c     **** 	return State2.state_lift;
 11731              		.loc 1 734 12 view .LVU3164
 11732              	.LBB2205:
 735:src/xeq.c     **** }
 11733              		.loc 1 735 2 view .LVU3165
 735:src/xeq.c     **** }
 11734              		.loc 1 735 15 is_stmt 0 view .LVU3166
 11735 0098 0E4B     		ldr	r3, .L870+8
 11736 009a DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 11737              	.LBE2205:
 11738              	.LBE2204:
 739:src/xeq.c     **** 		lift();
 11739              		.loc 1 739 5 view .LVU3167
 11740 009c 5906     		lsls	r1, r3, #25
 11741 009e 11D4     		bmi	.L869
 11742              	.L850:
 11743              	.LBE2203:
 11744              	.LBE2202:
1551:src/xeq.c     **** 	} else {
 11745              		.loc 1 1551 3 is_stmt 1 view .LVU3168
 11746              	.LBB2207:
 11747              	.LBB2208:
 11748              	.LBB2209:
 11749              	.LBB2210:
 933:src/xeq.c     **** }
 11750              		.loc 1 933 24 is_stmt 0 view .LVU3169
 11751 00a0 2A68     		ldr	r2, [r5]
 11752              	.LBE2210:
 11753              	.LBE2209:
 11754              	.LBE2208:
 11755              	.LBE2207:
1551:src/xeq.c     **** 	} else {
ARM GAS  /tmp/ccjeMhND.s 			page 355


 11756              		.loc 1 1551 3 view .LVU3170
 11757 00a2 0D4B     		ldr	r3, .L870+12
 11758              	.LVL885:
 11759              	.LBB2216:
 11760              	.LBI2207:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 11761              		.loc 1 717 6 is_stmt 1 view .LVU3171
 11762              	.LBB2215:
 718:src/xeq.c     **** }
 11763              		.loc 1 718 2 view .LVU3172
 11764              	.LBB2213:
 11765              	.LBI2209:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11766              		.loc 1 932 5 view .LVU3173
 11767              	.LBB2211:
 933:src/xeq.c     **** }
 11768              		.loc 1 933 2 view .LVU3174
 933:src/xeq.c     **** }
 11769              		.loc 1 933 24 is_stmt 0 view .LVU3175
 11770 00a4 B2F8E827 		ldrh	r2, [r2, #2024]
 11771              	.LBE2211:
 11772              	.LBE2213:
 718:src/xeq.c     **** }
 11773              		.loc 1 718 2 view .LVU3176
 11774 00a8 1868     		ldr	r0, [r3]
 11775              	.LBB2214:
 11776              	.LBB2212:
 933:src/xeq.c     **** }
 11777              		.loc 1 933 24 view .LVU3177
 11778 00aa 44F20103 		movw	r3, #16385
 11779              	.LVL886:
 933:src/xeq.c     **** }
 11780              		.loc 1 933 24 view .LVU3178
 11781              	.LBE2212:
 11782              	.LBE2214:
 718:src/xeq.c     **** }
 11783              		.loc 1 718 2 view .LVU3179
 11784 00ae 1340     		ands	r3, r3, r2
 11785 00b0 B3F5804F 		cmp	r3, #16384
 11786 00b4 2146     		mov	r1, r4
 11787 00b6 0CBF     		ite	eq
 11788 00b8 1022     		moveq	r2, #16
 11789 00ba 0822     		movne	r2, #8
 11790 00bc FFF7FEFF 		bl	xcopy
 11791              	.LVL887:
 718:src/xeq.c     **** }
 11792              		.loc 1 718 2 view .LVU3180
 11793              	.LBE2215:
 11794              	.LBE2216:
 11795              	.LBE2189:
1569:src/xeq.c     **** 
 11796              		.loc 1 1569 1 view .LVU3181
 11797 00c0 0BB0     		add	sp, sp, #44
 11798              		.cfi_remember_state
 11799              		.cfi_def_cfa_offset 12
 11800              		@ sp needed
 11801 00c2 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccjeMhND.s 			page 356


 11802              	.L869:
 11803              		.cfi_restore_state
 11804              	.LBB2218:
 11805              	.LBB2217:
 11806              	.LBB2206:
 740:src/xeq.c     **** }
 11807              		.loc 1 740 3 is_stmt 1 view .LVU3182
 11808 00c4 FFF7FEFF 		bl	lift
 11809              	.LVL888:
 11810 00c8 EAE7     		b	.L850
 11811              	.L871:
 11812 00ca 00BF     		.align	2
 11813              	.L870:
 11814 00cc 00000000 		.word	main_ram
 11815 00d0 00000000 		.word	Error
 11816 00d4 00000000 		.word	StateWhileOn
 11817 00d8 00000000 		.word	StackBase
 11818              	.LBE2206:
 11819              	.LBE2217:
 11820              	.LBE2218:
 11821              		.cfi_endproc
 11822              	.LFE114:
 11824              		.section	.text.setX_int_sgn,"ax",%progbits
 11825              		.align	1
 11826              		.p2align 2,,3
 11827              		.global	setX_int_sgn
 11828              		.syntax unified
 11829              		.thumb
 11830              		.thumb_func
 11831              		.fpu fpv4-sp-d16
 11833              	setX_int_sgn:
 11834              	.LVL889:
 11835              	.LFB99:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11836              		.loc 1 1323 56 view -0
 11837              		.cfi_startproc
 11838              		@ args = 0, pretend = 0, frame = 0
 11839              		@ frame_needed = 0, uses_anonymous_args = 0
1324:src/xeq.c     **** }
 11840              		.loc 1 1324 2 view .LVU3184
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11841              		.loc 1 1323 56 is_stmt 0 view .LVU3185
 11842 0000 00B5     		push	{lr}
 11843              		.cfi_def_cfa_offset 4
 11844              		.cfi_offset 14, -4
 11845 0002 83B0     		sub	sp, sp, #12
 11846              		.cfi_def_cfa_offset 16
1324:src/xeq.c     **** }
 11847              		.loc 1 1324 2 view .LVU3186
 11848 0004 0B46     		mov	r3, r1
 11849 0006 0092     		str	r2, [sp]
 11850 0008 0246     		mov	r2, r0
 11851              	.LVL890:
1324:src/xeq.c     **** }
 11852              		.loc 1 1324 2 view .LVU3187
 11853 000a 6420     		movs	r0, #100
 11854              	.LVL891:
ARM GAS  /tmp/ccjeMhND.s 			page 357


1324:src/xeq.c     **** }
 11855              		.loc 1 1324 2 view .LVU3188
 11856 000c FFF7FEFF 		bl	set_reg_n_int_sgn
 11857              	.LVL892:
1325:src/xeq.c     **** 
 11858              		.loc 1 1325 1 view .LVU3189
 11859 0010 03B0     		add	sp, sp, #12
 11860              		.cfi_def_cfa_offset 4
 11861              		@ sp needed
 11862 0012 5DF804FB 		ldr	pc, [sp], #4
 11863              		.cfi_endproc
 11864              	.LFE99:
 11866 0016 00BF     		.section	.text.zero_regs,"ax",%progbits
 11867              		.align	1
 11868              		.p2align 2,,3
 11869              		.global	zero_regs
 11870              		.syntax unified
 11871              		.thumb
 11872              		.thumb_func
 11873              		.fpu fpv4-sp-d16
 11875              	zero_regs:
 11876              	.LVL893:
 11877              	.LFB100:
1332:src/xeq.c     **** #if 0
 11878              		.loc 1 1332 39 is_stmt 1 view -0
 11879              		.cfi_startproc
 11880              		@ args = 0, pretend = 0, frame = 0
 11881              		@ frame_needed = 0, uses_anonymous_args = 0
 11882              		@ link register save eliminated.
1347:src/xeq.c     **** #endif
 11883              		.loc 1 1347 2 view .LVU3191
 11884              	.LBB2219:
 11885              	.LBI2219:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11886              		.loc 1 932 5 view .LVU3192
 11887              	.LBB2220:
 933:src/xeq.c     **** }
 11888              		.loc 1 933 2 view .LVU3193
 933:src/xeq.c     **** }
 11889              		.loc 1 933 24 is_stmt 0 view .LVU3194
 11890 0000 084B     		ldr	r3, .L875
 11891 0002 1B68     		ldr	r3, [r3]
 11892 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 11893 0008 44F20103 		movw	r3, #16385
 11894 000c 1340     		ands	r3, r3, r2
 11895 000e A3F58043 		sub	r3, r3, #16384
 11896 0012 B3FA83F3 		clz	r3, r3
 11897 0016 5B09     		lsrs	r3, r3, #5
 11898              	.LBE2220:
 11899              	.LBE2219:
1347:src/xeq.c     **** #endif
 11900              		.loc 1 1347 24 view .LVU3195
 11901 0018 0333     		adds	r3, r3, #3
1347:src/xeq.c     **** #endif
 11902              		.loc 1 1347 2 view .LVU3196
 11903 001a 01FA03F2 		lsl	r2, r1, r3
 11904 001e 0021     		movs	r1, #0
ARM GAS  /tmp/ccjeMhND.s 			page 358


 11905              	.LVL894:
1347:src/xeq.c     **** #endif
 11906              		.loc 1 1347 2 view .LVU3197
 11907 0020 FFF7FEBF 		b	xset
 11908              	.LVL895:
 11909              	.L876:
1347:src/xeq.c     **** #endif
 11910              		.loc 1 1347 2 view .LVU3198
 11911              		.align	2
 11912              	.L875:
 11913 0024 00000000 		.word	main_ram
 11914              		.cfi_endproc
 11915              	.LFE100:
 11917              		.section	.text.move_regs,"ax",%progbits
 11918              		.align	1
 11919              		.p2align 2,,3
 11920              		.global	move_regs
 11921              		.syntax unified
 11922              		.thumb
 11923              		.thumb_func
 11924              		.fpu fpv4-sp-d16
 11926              	move_regs:
 11927              	.LVL896:
 11928              	.LFB101:
1351:src/xeq.c     **** 	if (is_dblmode())
 11929              		.loc 1 1351 54 is_stmt 1 view -0
 11930              		.cfi_startproc
 11931              		@ args = 0, pretend = 0, frame = 0
 11932              		@ frame_needed = 0, uses_anonymous_args = 0
 11933              		@ link register save eliminated.
1352:src/xeq.c     **** 		n <<= 1;
 11934              		.loc 1 1352 2 view .LVU3200
 11935              	.LBB2221:
 11936              	.LBI2221:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11937              		.loc 1 932 5 view .LVU3201
 11938              	.LBB2222:
 933:src/xeq.c     **** }
 11939              		.loc 1 933 2 view .LVU3202
 933:src/xeq.c     **** }
 11940              		.loc 1 933 24 is_stmt 0 view .LVU3203
 11941 0000 084B     		ldr	r3, .L880
 11942 0002 1B68     		ldr	r3, [r3]
 11943              	.LBE2222:
 11944              	.LBE2221:
1351:src/xeq.c     **** 	if (is_dblmode())
 11945              		.loc 1 1351 54 view .LVU3204
 11946 0004 10B4     		push	{r4}
 11947              		.cfi_def_cfa_offset 4
 11948              		.cfi_offset 4, -4
 11949              	.LBB2224:
 11950              	.LBB2223:
 933:src/xeq.c     **** }
 11951              		.loc 1 933 24 view .LVU3205
 11952 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 11953 000a 44F20103 		movw	r3, #16385
 11954              	.LBE2223:
ARM GAS  /tmp/ccjeMhND.s 			page 359


 11955              	.LBE2224:
1352:src/xeq.c     **** 		n <<= 1;
 11956              		.loc 1 1352 5 view .LVU3206
 11957 000e 2340     		ands	r3, r3, r4
 11958 0010 B3F5804F 		cmp	r3, #16384
1353:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 11959              		.loc 1 1353 3 is_stmt 1 view .LVU3207
1353:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 11960              		.loc 1 1353 5 is_stmt 0 view .LVU3208
 11961 0014 08BF     		it	eq
 11962 0016 5200     		lsleq	r2, r2, #1
 11963              	.LVL897:
1354:src/xeq.c     **** }
 11964              		.loc 1 1354 2 is_stmt 1 view .LVU3209
1355:src/xeq.c     **** 
 11965              		.loc 1 1355 1 is_stmt 0 view .LVU3210
 11966 0018 5DF8044B 		ldr	r4, [sp], #4
 11967              		.cfi_restore 4
 11968              		.cfi_def_cfa_offset 0
1354:src/xeq.c     **** }
 11969              		.loc 1 1354 2 view .LVU3211
 11970 001c D200     		lsls	r2, r2, #3
 11971              	.LVL898:
1354:src/xeq.c     **** }
 11972              		.loc 1 1354 2 view .LVU3212
 11973 001e FFF7FEBF 		b	xcopy
 11974              	.LVL899:
 11975              	.L881:
1354:src/xeq.c     **** }
 11976              		.loc 1 1354 2 view .LVU3213
 11977 0022 00BF     		.align	2
 11978              	.L880:
 11979 0024 00000000 		.word	main_ram
 11980              		.cfi_endproc
 11981              	.LFE101:
 11983              		.section	.text.zero_X,"ax",%progbits
 11984              		.align	1
 11985              		.p2align 2,,3
 11986              		.global	zero_X
 11987              		.syntax unified
 11988              		.thumb
 11989              		.thumb_func
 11990              		.fpu fpv4-sp-d16
 11992              	zero_X:
 11993              	.LFB103:
1364:src/xeq.c     **** 	set_zero(StackBase);
 11994              		.loc 1 1364 19 is_stmt 1 view -0
 11995              		.cfi_startproc
 11996              		@ args = 0, pretend = 0, frame = 0
 11997              		@ frame_needed = 0, uses_anonymous_args = 0
 11998              		@ link register save eliminated.
1365:src/xeq.c     **** }
 11999              		.loc 1 1365 2 view .LVU3215
 12000 0000 014B     		ldr	r3, .L883
 12001 0002 1868     		ldr	r0, [r3]
 12002 0004 FFF7FEBF 		b	set_zero
 12003              	.LVL900:
ARM GAS  /tmp/ccjeMhND.s 			page 360


 12004              	.L884:
 12005              		.align	2
 12006              	.L883:
 12007 0008 00000000 		.word	StackBase
 12008              		.cfi_endproc
 12009              	.LFE103:
 12011              		.section	.text.zero_Y,"ax",%progbits
 12012              		.align	1
 12013              		.p2align 2,,3
 12014              		.global	zero_Y
 12015              		.syntax unified
 12016              		.thumb
 12017              		.thumb_func
 12018              		.fpu fpv4-sp-d16
 12020              	zero_Y:
 12021              	.LFB104:
1368:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 12022              		.loc 1 1368 19 view -0
 12023              		.cfi_startproc
 12024              		@ args = 0, pretend = 0, frame = 0
 12025              		@ frame_needed = 0, uses_anonymous_args = 0
1369:src/xeq.c     **** }
 12026              		.loc 1 1369 2 view .LVU3217
1368:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 12027              		.loc 1 1368 19 is_stmt 0 view .LVU3218
 12028 0000 08B5     		push	{r3, lr}
 12029              		.cfi_def_cfa_offset 8
 12030              		.cfi_offset 3, -8
 12031              		.cfi_offset 14, -4
1369:src/xeq.c     **** }
 12032              		.loc 1 1369 2 view .LVU3219
 12033 0002 6520     		movs	r0, #101
 12034 0004 FFF7FEFF 		bl	get_reg_n
 12035              	.LVL901:
1370:src/xeq.c     **** 
 12036              		.loc 1 1370 1 view .LVU3220
 12037 0008 BDE80840 		pop	{r3, lr}
 12038              		.cfi_restore 14
 12039              		.cfi_restore 3
 12040              		.cfi_def_cfa_offset 0
1369:src/xeq.c     **** }
 12041              		.loc 1 1369 2 view .LVU3221
 12042 000c FFF7FEBF 		b	set_zero
 12043              	.LVL902:
 12044              		.cfi_endproc
 12045              	.LFE104:
 12047              		.section	.text.clrx,"ax",%progbits
 12048              		.align	1
 12049              		.p2align 2,,3
 12050              		.global	clrx
 12051              		.syntax unified
 12052              		.thumb
 12053              		.thumb_func
 12054              		.fpu fpv4-sp-d16
 12056              	clrx:
 12057              	.LVL903:
 12058              	.LFB105:
ARM GAS  /tmp/ccjeMhND.s 			page 361


1372:src/xeq.c     **** 	zero_X();
 12059              		.loc 1 1372 26 is_stmt 1 view -0
 12060              		.cfi_startproc
 12061              		@ args = 0, pretend = 0, frame = 0
 12062              		@ frame_needed = 0, uses_anonymous_args = 0
1373:src/xeq.c     **** 	clr_lift();
 12063              		.loc 1 1373 2 view .LVU3223
 12064              	.LBB2225:
 12065              	.LBI2225:
1364:src/xeq.c     **** 	set_zero(StackBase);
 12066              		.loc 1 1364 6 view .LVU3224
 12067              	.LBB2226:
1365:src/xeq.c     **** }
 12068              		.loc 1 1365 2 view .LVU3225
 12069              	.LBE2226:
 12070              	.LBE2225:
1372:src/xeq.c     **** 	zero_X();
 12071              		.loc 1 1372 26 is_stmt 0 view .LVU3226
 12072 0000 08B5     		push	{r3, lr}
 12073              		.cfi_def_cfa_offset 8
 12074              		.cfi_offset 3, -8
 12075              		.cfi_offset 14, -4
 12076              	.LBB2228:
 12077              	.LBB2227:
1365:src/xeq.c     **** }
 12078              		.loc 1 1365 2 view .LVU3227
 12079 0002 054B     		ldr	r3, .L889
 12080 0004 1868     		ldr	r0, [r3]
 12081              	.LVL904:
1365:src/xeq.c     **** }
 12082              		.loc 1 1365 2 view .LVU3228
 12083 0006 FFF7FEFF 		bl	set_zero
 12084              	.LVL905:
 12085              	.LBE2227:
 12086              	.LBE2228:
1374:src/xeq.c     **** }
 12087              		.loc 1 1374 2 is_stmt 1 view .LVU3229
 12088              	.LBB2229:
 12089              	.LBI2229:
 752:src/xeq.c     ****     State2.state_lift = 0;
 12090              		.loc 1 752 13 view .LVU3230
 12091              	.LBB2230:
 753:src/xeq.c     **** }
 12092              		.loc 1 753 5 view .LVU3231
 753:src/xeq.c     **** }
 12093              		.loc 1 753 23 is_stmt 0 view .LVU3232
 12094 000a 044B     		ldr	r3, .L889+4
 12095 000c DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 12096 000e 6FF38612 		bfc	r2, #6, #1
 12097 0012 DA75     		strb	r2, [r3, #23]
 12098              	.LBE2230:
 12099              	.LBE2229:
1375:src/xeq.c     **** 
 12100              		.loc 1 1375 1 view .LVU3233
 12101 0014 08BD     		pop	{r3, pc}
 12102              	.L890:
 12103 0016 00BF     		.align	2
ARM GAS  /tmp/ccjeMhND.s 			page 362


 12104              	.L889:
 12105 0018 00000000 		.word	StackBase
 12106 001c 00000000 		.word	StateWhileOn
 12107              		.cfi_endproc
 12108              	.LFE105:
 12110              		.section	.text.clrstk,"ax",%progbits
 12111              		.align	1
 12112              		.p2align 2,,3
 12113              		.global	clrstk
 12114              		.syntax unified
 12115              		.thumb
 12116              		.thumb_func
 12117              		.fpu fpv4-sp-d16
 12119              	clrstk:
 12120              	.LVL906:
 12121              	.LFB106:
1379:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 12122              		.loc 1 1379 28 is_stmt 1 view -0
 12123              		.cfi_startproc
 12124              		@ args = 0, pretend = 0, frame = 0
 12125              		@ frame_needed = 0, uses_anonymous_args = 0
1380:src/xeq.c     **** 	set_lift();
 12126              		.loc 1 1380 2 view .LVU3235
1379:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 12127              		.loc 1 1379 28 is_stmt 0 view .LVU3236
 12128 0000 08B5     		push	{r3, lr}
 12129              		.cfi_def_cfa_offset 8
 12130              		.cfi_offset 3, -8
 12131              		.cfi_offset 14, -4
 12132              	.LBB2231:
 12133              	.LBB2232:
 704:src/xeq.c     **** 		return 4;
 12134              		.loc 1 704 8 view .LVU3237
 12135 0002 164B     		ldr	r3, .L898
 12136              	.LBE2232:
 12137              	.LBE2231:
1380:src/xeq.c     **** 	set_lift();
 12138              		.loc 1 1380 2 view .LVU3238
 12139 0004 164A     		ldr	r2, .L898+4
 12140              	.LBB2238:
 12141              	.LBB2235:
 704:src/xeq.c     **** 		return 4;
 12142              		.loc 1 704 8 view .LVU3239
 12143 0006 1B68     		ldr	r3, [r3]
 12144              	.LBE2235:
 12145              	.LBE2238:
1380:src/xeq.c     **** 	set_lift();
 12146              		.loc 1 1380 2 view .LVU3240
 12147 0008 1068     		ldr	r0, [r2]
 12148              	.LVL907:
 12149              	.LBB2239:
 12150              	.LBI2231:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 12151              		.loc 1 703 5 is_stmt 1 view .LVU3241
 12152              	.LBB2236:
 704:src/xeq.c     **** 		return 4;
 12153              		.loc 1 704 2 view .LVU3242
ARM GAS  /tmp/ccjeMhND.s 			page 363


 704:src/xeq.c     **** 		return 4;
 12154              		.loc 1 704 6 is_stmt 0 view .LVU3243
 12155 000a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 12156              		.loc 1 704 5 view .LVU3244
 12157 000e 1207     		lsls	r2, r2, #28
 12158 0010 22D5     		bpl	.L893
 12159              	.LBB2233:
 12160              	.LBI2233:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 12161              		.loc 1 182 5 is_stmt 1 view .LVU3245
 12162              	.LBB2234:
 183:src/xeq.c     **** }
 12163              		.loc 1 183 2 view .LVU3246
 183:src/xeq.c     **** }
 12164              		.loc 1 183 9 is_stmt 0 view .LVU3247
 12165 0012 B3F8E027 		ldrh	r2, [r3, #2016]
 12166              	.LBE2234:
 12167              	.LBE2233:
 704:src/xeq.c     **** 		return 4;
 12168              		.loc 1 704 27 view .LVU3248
 12169 0016 920B     		lsrs	r2, r2, #14
 12170 0018 032A     		cmp	r2, #3
 12171 001a 15D0     		beq	.L897
 706:src/xeq.c     **** }
 12172              		.loc 1 706 9 view .LVU3249
 12173 001c 0822     		movs	r2, #8
 12174              	.L892:
 12175              	.LVL908:
 706:src/xeq.c     **** }
 12176              		.loc 1 706 9 view .LVU3250
 12177              	.LBE2236:
 12178              	.LBE2239:
 12179              	.LBB2240:
 12180              	.LBI2240:
1332:src/xeq.c     **** #if 0
 12181              		.loc 1 1332 6 is_stmt 1 view .LVU3251
 12182              	.LBB2241:
1347:src/xeq.c     **** #endif
 12183              		.loc 1 1347 2 view .LVU3252
 12184              	.LBB2242:
 12185              	.LBI2242:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12186              		.loc 1 932 5 view .LVU3253
 12187              	.LBB2243:
 933:src/xeq.c     **** }
 12188              		.loc 1 933 2 view .LVU3254
 933:src/xeq.c     **** }
 12189              		.loc 1 933 24 is_stmt 0 view .LVU3255
 12190 001e B3F8E817 		ldrh	r1, [r3, #2024]
 12191 0022 44F20103 		movw	r3, #16385
 12192 0026 0B40     		ands	r3, r3, r1
 12193 0028 A3F58043 		sub	r3, r3, #16384
 12194 002c B3FA83F3 		clz	r3, r3
 12195 0030 5B09     		lsrs	r3, r3, #5
 12196              	.LBE2243:
 12197              	.LBE2242:
ARM GAS  /tmp/ccjeMhND.s 			page 364


1347:src/xeq.c     **** #endif
 12198              		.loc 1 1347 24 view .LVU3256
 12199 0032 0333     		adds	r3, r3, #3
1347:src/xeq.c     **** #endif
 12200              		.loc 1 1347 2 view .LVU3257
 12201 0034 9A40     		lsls	r2, r2, r3
 12202              	.LVL909:
1347:src/xeq.c     **** #endif
 12203              		.loc 1 1347 2 view .LVU3258
 12204 0036 0021     		movs	r1, #0
 12205 0038 FFF7FEFF 		bl	xset
 12206              	.LVL910:
1347:src/xeq.c     **** #endif
 12207              		.loc 1 1347 2 view .LVU3259
 12208              	.LBE2241:
 12209              	.LBE2240:
1381:src/xeq.c     **** }
 12210              		.loc 1 1381 2 is_stmt 1 view .LVU3260
 12211              	.LBB2244:
 12212              	.LBI2244:
 748:src/xeq.c     ****     State2.state_lift = 1;
 12213              		.loc 1 748 6 view .LVU3261
 12214              	.LBB2245:
 749:src/xeq.c     **** }
 12215              		.loc 1 749 5 view .LVU3262
 749:src/xeq.c     **** }
 12216              		.loc 1 749 23 is_stmt 0 view .LVU3263
 12217 003c 094A     		ldr	r2, .L898+8
 12218 003e D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 12219 0040 43F04003 		orr	r3, r3, #64
 12220 0044 D375     		strb	r3, [r2, #23]
 12221              	.LBE2245:
 12222              	.LBE2244:
1382:src/xeq.c     **** 
 12223              		.loc 1 1382 1 view .LVU3264
 12224 0046 08BD     		pop	{r3, pc}
 12225              	.L897:
 12226              	.LBB2246:
 12227              	.LBB2237:
 704:src/xeq.c     **** 		return 4;
 12228              		.loc 1 704 44 view .LVU3265
 12229 0048 074A     		ldr	r2, .L898+12
 704:src/xeq.c     **** 		return 4;
 12230              		.loc 1 704 41 view .LVU3266
 12231 004a 92F90120 		ldrsb	r2, [r2, #1]
 12232 004e 002A     		cmp	r2, #0
 705:src/xeq.c     **** 	return 8;
 12233              		.loc 1 705 10 view .LVU3267
 12234 0050 B4BF     		ite	lt
 12235 0052 0822     		movlt	r2, #8
 12236 0054 0422     		movge	r2, #4
 12237 0056 E2E7     		b	.L892
 12238              	.L893:
 12239 0058 0422     		movs	r2, #4
 12240 005a E0E7     		b	.L892
 12241              	.L899:
 12242              		.align	2
ARM GAS  /tmp/ccjeMhND.s 			page 365


 12243              	.L898:
 12244 005c 00000000 		.word	main_ram
 12245 0060 00000000 		.word	StackBase
 12246 0064 00000000 		.word	StateWhileOn
 12247 0068 00000000 		.word	XromParams
 12248              	.LBE2237:
 12249              	.LBE2246:
 12250              		.cfi_endproc
 12251              	.LFE106:
 12253              		.section	.text.clrreg,"ax",%progbits
 12254              		.align	1
 12255              		.p2align 2,,3
 12256              		.global	clrreg
 12257              		.syntax unified
 12258              		.thumb
 12259              		.thumb_func
 12260              		.fpu fpv4-sp-d16
 12262              	clrreg:
 12263              	.LVL911:
 12264              	.LFB107:
1387:src/xeq.c     **** 	const int local = local_regs();
 12265              		.loc 1 1387 28 is_stmt 1 view -0
 12266              		.cfi_startproc
 12267              		@ args = 0, pretend = 0, frame = 0
 12268              		@ frame_needed = 0, uses_anonymous_args = 0
1388:src/xeq.c     **** 	process_cmdline_set_lift();
 12269              		.loc 1 1388 2 view .LVU3269
 12270              	.LBB2247:
 12271              	.LBI2247:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 12272              		.loc 1 230 5 view .LVU3270
 12273              	.LBE2247:
 231:src/xeq.c     **** }
 12274              		.loc 1 231 2 view .LVU3271
 12275              	.LBB2272:
 12276              	.LBB2248:
 12277              	.LBI2248:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 12278              		.loc 1 222 5 view .LVU3272
 12279              	.LBB2249:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 12280              		.loc 1 223 2 view .LVU3273
 12281              	.LBB2250:
 12282              	.LBI2250:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12283              		.loc 1 932 5 view .LVU3274
 12284              	.LBB2251:
 933:src/xeq.c     **** }
 12285              		.loc 1 933 2 view .LVU3275
 12286              	.LBE2251:
 12287              	.LBE2250:
 12288              	.LBE2249:
 12289              	.LBE2248:
 12290              	.LBE2272:
1387:src/xeq.c     **** 	const int local = local_regs();
 12291              		.loc 1 1387 28 is_stmt 0 view .LVU3276
 12292 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/ccjeMhND.s 			page 366


 12293              		.cfi_def_cfa_offset 16
 12294              		.cfi_offset 4, -16
 12295              		.cfi_offset 5, -12
 12296              		.cfi_offset 6, -8
 12297              		.cfi_offset 14, -4
 12298              	.LBB2273:
 12299              	.LBB2270:
 12300              	.LBB2268:
 12301              	.LBB2255:
 12302              	.LBB2252:
 933:src/xeq.c     **** }
 12303              		.loc 1 933 12 view .LVU3277
 12304 0002 424C     		ldr	r4, .L915
 12305 0004 2368     		ldr	r3, [r4]
 12306              	.LVL912:
 933:src/xeq.c     **** }
 12307              		.loc 1 933 12 view .LVU3278
 12308              	.LBE2252:
 12309              	.LBE2255:
 224:src/xeq.c     **** }
 12310              		.loc 1 224 2 is_stmt 1 view .LVU3279
 12311              	.LBB2256:
 12312              	.LBI2256:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 12313              		.loc 1 214 5 view .LVU3280
 12314              	.LBB2257:
 215:src/xeq.c     **** }
 12315              		.loc 1 215 2 view .LVU3281
 215:src/xeq.c     **** }
 12316              		.loc 1 215 9 is_stmt 0 view .LVU3282
 12317 0006 B3F9DE27 		ldrsh	r2, [r3, #2014]
 215:src/xeq.c     **** }
 12318              		.loc 1 215 57 view .LVU3283
 12319 000a 002A     		cmp	r2, #0
 12320 000c 57DB     		blt	.L912
 12321 000e 0026     		movs	r6, #0
 12322              	.LVL913:
 12323              	.L901:
 215:src/xeq.c     **** }
 12324              		.loc 1 215 57 view .LVU3284
 12325              	.LBE2257:
 12326              	.LBE2256:
 12327              	.LBE2268:
 12328              	.LBE2270:
 12329              	.LBE2273:
1389:src/xeq.c     **** 
 12330              		.loc 1 1389 2 is_stmt 1 view .LVU3285
 12331              	.LBB2274:
 12332              	.LBI2274:
1146:src/xeq.c     **** 	process_cmdline();
 12333              		.loc 1 1146 6 view .LVU3286
 12334              	.LBB2275:
1147:src/xeq.c     **** 	set_lift();
 12335              		.loc 1 1147 2 view .LVU3287
 12336 0010 FFF7FEFF 		bl	process_cmdline
 12337              	.LVL914:
1148:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 367


 12338              		.loc 1 1148 2 view .LVU3288
 12339              	.LBB2276:
 12340              	.LBI2276:
 748:src/xeq.c     ****     State2.state_lift = 1;
 12341              		.loc 1 748 6 view .LVU3289
 12342              	.LBB2277:
 749:src/xeq.c     **** }
 12343              		.loc 1 749 5 view .LVU3290
 749:src/xeq.c     **** }
 12344              		.loc 1 749 23 is_stmt 0 view .LVU3291
 12345 0014 3E4A     		ldr	r2, .L915+4
 12346 0016 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 12347 0018 43F04003 		orr	r3, r3, #64
 12348 001c D375     		strb	r3, [r2, #23]
 12349              	.LBE2277:
 12350              	.LBE2276:
 12351              	.LBE2275:
 12352              	.LBE2274:
1392:src/xeq.c     **** 
 12353              		.loc 1 1392 2 is_stmt 1 view .LVU3292
 12354 001e 0020     		movs	r0, #0
 12355 0020 FFF7FEFF 		bl	get_reg_n
 12356              	.LVL915:
 12357              	.LBB2278:
 12358              	.LBB2279:
 12359              	.LBB2280:
 12360              	.LBB2281:
 12361              	.LBB2282:
 933:src/xeq.c     **** }
 12362              		.loc 1 933 12 is_stmt 0 view .LVU3293
 12363 0024 2168     		ldr	r1, [r4]
 933:src/xeq.c     **** }
 12364              		.loc 1 933 24 view .LVU3294
 12365 0026 B1F8E827 		ldrh	r2, [r1, #2024]
 12366 002a 44F20103 		movw	r3, #16385
 12367 002e 1340     		ands	r3, r3, r2
 12368              	.LBE2282:
 12369              	.LBE2281:
 12370              	.LBE2280:
 12371              	.LBE2279:
 12372              	.LBI2278:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 12373              		.loc 1 250 14 is_stmt 1 view .LVU3295
 12374              	.LBE2278:
 251:src/xeq.c     **** }
 12375              		.loc 1 251 2 view .LVU3296
 12376              	.LVL916:
 12377              	.LBB2297:
 12378              	.LBB2293:
 12379              	.LBI2279:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 12380              		.loc 1 238 14 view .LVU3297
 12381              	.LBB2289:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 12382              		.loc 1 239 2 view .LVU3298
 12383              	.LBB2284:
 12384              	.LBI2281:
ARM GAS  /tmp/ccjeMhND.s 			page 368


 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12385              		.loc 1 932 5 view .LVU3299
 12386              	.LBB2283:
 933:src/xeq.c     **** }
 12387              		.loc 1 933 2 view .LVU3300
 12388              	.LBE2283:
 12389              	.LBE2284:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 12390              		.loc 1 239 5 is_stmt 0 view .LVU3301
 12391 0030 B3F5804F 		cmp	r3, #16384
 12392              	.LBB2285:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 12393              		.loc 1 240 3 is_stmt 1 view .LVU3302
 241:src/xeq.c     **** 	}
 12394              		.loc 1 241 3 view .LVU3303
 12395              	.LVL917:
 241:src/xeq.c     **** 	}
 12396              		.loc 1 241 3 is_stmt 0 view .LVU3304
 12397              	.LBE2285:
 12398              	.LBE2289:
 12399              	.LBE2293:
 12400              	.LBE2297:
 12401              	.LBB2298:
 12402              	.LBI2298:
1332:src/xeq.c     **** #if 0
 12403              		.loc 1 1332 6 is_stmt 1 view .LVU3305
 12404              	.LBB2299:
1347:src/xeq.c     **** #endif
 12405              		.loc 1 1347 2 view .LVU3306
 12406              	.LBB2300:
 12407              	.LBI2300:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12408              		.loc 1 932 5 view .LVU3307
 12409              	.LBB2301:
 933:src/xeq.c     **** }
 12410              		.loc 1 933 2 view .LVU3308
 12411              	.LBE2301:
 12412              	.LBE2300:
 12413              	.LBE2299:
 12414              	.LBE2298:
 12415              	.LBB2309:
 12416              	.LBB2294:
 12417              	.LBB2290:
 12418              	.LBB2286:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 12419              		.loc 1 240 24 is_stmt 0 view .LVU3309
 12420 0034 91F8CF27 		ldrb	r2, [r1, #1999]	@ zero_extendqisi2
 12421              	.LBE2286:
 12422              	.LBE2290:
 12423              	.LBE2294:
 12424              	.LBE2309:
 12425              	.LBB2310:
 12426              	.LBB2306:
 12427              	.LBB2304:
 12428              	.LBB2302:
 933:src/xeq.c     **** }
 12429              		.loc 1 933 24 view .LVU3310
ARM GAS  /tmp/ccjeMhND.s 			page 369


 12430 0038 A3F58043 		sub	r3, r3, #16384
 12431 003c B3FA83F3 		clz	r3, r3
 12432              	.LBE2302:
 12433              	.LBE2304:
 12434              	.LBE2306:
 12435              	.LBE2310:
 12436              	.LBB2311:
 12437              	.LBB2295:
 12438              	.LBB2291:
 12439              	.LBB2287:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 12440              		.loc 1 240 13 view .LVU3311
 12441 0040 08BF     		it	eq
 12442 0042 0C3A     		subeq	r2, r2, #12
 12443              	.LBE2287:
 12444              	.LBE2291:
 12445              	.LBE2295:
 12446              	.LBE2311:
 12447              	.LBB2312:
 12448              	.LBB2307:
 12449              	.LBB2305:
 12450              	.LBB2303:
 933:src/xeq.c     **** }
 12451              		.loc 1 933 24 view .LVU3312
 12452 0044 4FEA5313 		lsr	r3, r3, #5
 12453              	.LBE2303:
 12454              	.LBE2305:
 12455              	.LBE2307:
 12456              	.LBE2312:
 12457              	.LBB2313:
 12458              	.LBB2296:
 12459              	.LBB2292:
 12460              	.LBB2288:
 241:src/xeq.c     **** 	}
 12461              		.loc 1 241 67 view .LVU3313
 12462 0048 08BF     		it	eq
 12463 004a 5210     		asreq	r2, r2, #1
 12464              	.LBE2288:
 12465              	.LBE2292:
 12466              	.LBE2296:
 12467              	.LBE2313:
 12468              	.LBB2314:
 12469              	.LBB2308:
1347:src/xeq.c     **** #endif
 12470              		.loc 1 1347 24 view .LVU3314
 12471 004c 0333     		adds	r3, r3, #3
1347:src/xeq.c     **** #endif
 12472              		.loc 1 1347 2 view .LVU3315
 12473 004e 9A40     		lsls	r2, r2, r3
 12474 0050 0021     		movs	r1, #0
 12475 0052 FFF7FEFF 		bl	xset
 12476              	.LVL918:
1347:src/xeq.c     **** #endif
 12477              		.loc 1 1347 2 view .LVU3316
 12478              	.LBE2308:
 12479              	.LBE2314:
1395:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
ARM GAS  /tmp/ccjeMhND.s 			page 370


 12480              		.loc 1 1395 2 is_stmt 1 view .LVU3317
 12481              	.LBB2315:
 12482              	.LBI2315:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 12483              		.loc 1 703 5 view .LVU3318
 12484              	.LBB2316:
 704:src/xeq.c     **** 		return 4;
 12485              		.loc 1 704 2 view .LVU3319
 704:src/xeq.c     **** 		return 4;
 12486              		.loc 1 704 8 is_stmt 0 view .LVU3320
 12487 0056 2368     		ldr	r3, [r4]
 704:src/xeq.c     **** 		return 4;
 12488              		.loc 1 704 6 view .LVU3321
 12489 0058 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 12490              		.loc 1 704 5 view .LVU3322
 12491 005c 1207     		lsls	r2, r2, #28
 12492 005e 1CD5     		bpl	.L904
 12493              	.LBB2317:
 12494              	.LBI2317:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 12495              		.loc 1 182 5 is_stmt 1 view .LVU3323
 12496              	.LBB2318:
 183:src/xeq.c     **** }
 12497              		.loc 1 183 2 view .LVU3324
 183:src/xeq.c     **** }
 12498              		.loc 1 183 9 is_stmt 0 view .LVU3325
 12499 0060 B3F8E037 		ldrh	r3, [r3, #2016]
 12500              	.LBE2318:
 12501              	.LBE2317:
 704:src/xeq.c     **** 		return 4;
 12502              		.loc 1 704 27 view .LVU3326
 12503 0064 9B0B     		lsrs	r3, r3, #14
 12504 0066 032B     		cmp	r3, #3
 12505 0068 12D0     		beq	.L913
 12506              	.L905:
 12507              	.LBE2316:
 12508              	.LBE2315:
1399:src/xeq.c     **** 
 12509              		.loc 1 1399 2 is_stmt 1 view .LVU3327
 12510 006a 6E20     		movs	r0, #110
 12511 006c FFF7FEFF 		bl	get_reg_n
 12512              	.LVL919:
 12513              	.LBB2320:
 12514              	.LBI2320:
1332:src/xeq.c     **** #if 0
 12515              		.loc 1 1332 6 view .LVU3328
 12516              	.LBB2321:
1347:src/xeq.c     **** #endif
 12517              		.loc 1 1347 2 view .LVU3329
 12518              	.LBB2322:
 12519              	.LBI2322:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12520              		.loc 1 932 5 view .LVU3330
 12521              	.LBB2323:
 933:src/xeq.c     **** }
 12522              		.loc 1 933 2 view .LVU3331
ARM GAS  /tmp/ccjeMhND.s 			page 371


 933:src/xeq.c     **** }
 12523              		.loc 1 933 24 is_stmt 0 view .LVU3332
 12524 0070 2368     		ldr	r3, [r4]
 12525 0072 B3F8E827 		ldrh	r2, [r3, #2024]
 12526 0076 44F20105 		movw	r5, #16385
 12527 007a 2A40     		ands	r2, r2, r5
 12528              	.LBE2323:
 12529              	.LBE2322:
1347:src/xeq.c     **** #endif
 12530              		.loc 1 1347 2 view .LVU3333
 12531 007c B2F5804F 		cmp	r2, #16384
 12532 0080 0CBF     		ite	eq
 12533 0082 2022     		moveq	r2, #32
 12534 0084 1022     		movne	r2, #16
 12535 0086 0021     		movs	r1, #0
 12536 0088 FFF7FEFF 		bl	xset
 12537              	.LVL920:
1347:src/xeq.c     **** #endif
 12538              		.loc 1 1347 2 view .LVU3334
 12539              	.LBE2321:
 12540              	.LBE2320:
1402:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 12541              		.loc 1 1402 2 is_stmt 1 view .LVU3335
1402:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 12542              		.loc 1 1402 5 is_stmt 0 view .LVU3336
 12543 008c 56BB     		cbnz	r6, .L914
1404:src/xeq.c     **** 
 12544              		.loc 1 1404 1 view .LVU3337
 12545 008e 70BD     		pop	{r4, r5, r6, pc}
 12546              	.L913:
 12547              	.LBB2324:
 12548              	.LBB2319:
 704:src/xeq.c     **** 		return 4;
 12549              		.loc 1 704 44 view .LVU3338
 12550 0090 204B     		ldr	r3, .L915+8
 704:src/xeq.c     **** 		return 4;
 12551              		.loc 1 704 41 view .LVU3339
 12552 0092 93F90130 		ldrsb	r3, [r3, #1]
 12553 0096 002B     		cmp	r3, #0
 12554 0098 E7DB     		blt	.L905
 12555              	.L904:
 705:src/xeq.c     **** 	return 8;
 12556              		.loc 1 705 3 is_stmt 1 view .LVU3340
 12557              	.LBE2319:
 12558              	.LBE2324:
1396:src/xeq.c     **** 
 12559              		.loc 1 1396 3 view .LVU3341
 12560 009a 6820     		movs	r0, #104
 12561 009c FFF7FEFF 		bl	get_reg_n
 12562              	.LVL921:
 12563              	.LBB2325:
 12564              	.LBI2325:
1332:src/xeq.c     **** #if 0
 12565              		.loc 1 1332 6 view .LVU3342
 12566              	.LBB2326:
1347:src/xeq.c     **** #endif
 12567              		.loc 1 1347 2 view .LVU3343
ARM GAS  /tmp/ccjeMhND.s 			page 372


 12568              	.LBB2327:
 12569              	.LBI2327:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12570              		.loc 1 932 5 view .LVU3344
 12571              	.LBB2328:
 933:src/xeq.c     **** }
 12572              		.loc 1 933 2 view .LVU3345
 933:src/xeq.c     **** }
 12573              		.loc 1 933 24 is_stmt 0 view .LVU3346
 12574 00a0 2368     		ldr	r3, [r4]
 12575 00a2 B3F8E837 		ldrh	r3, [r3, #2024]
 12576 00a6 44F20102 		movw	r2, #16385
 12577 00aa 1A40     		ands	r2, r2, r3
 12578              	.LBE2328:
 12579              	.LBE2327:
1347:src/xeq.c     **** #endif
 12580              		.loc 1 1347 2 view .LVU3347
 12581 00ac B2F5804F 		cmp	r2, #16384
 12582 00b0 0CBF     		ite	eq
 12583 00b2 4022     		moveq	r2, #64
 12584 00b4 2022     		movne	r2, #32
 12585 00b6 0021     		movs	r1, #0
 12586 00b8 FFF7FEFF 		bl	xset
 12587              	.LVL922:
1349:src/xeq.c     **** 
 12588              		.loc 1 1349 1 view .LVU3348
 12589 00bc D5E7     		b	.L905
 12590              	.LVL923:
 12591              	.L912:
1349:src/xeq.c     **** 
 12592              		.loc 1 1349 1 view .LVU3349
 12593              	.LBE2326:
 12594              	.LBE2325:
 12595              	.LBB2329:
 12596              	.LBB2271:
 12597              	.LBB2269:
 12598              	.LBB2262:
 12599              	.LBB2253:
 933:src/xeq.c     **** }
 12600              		.loc 1 933 24 view .LVU3350
 12601 00be B3F8E867 		ldrh	r6, [r3, #2024]
 12602              	.LBE2253:
 12603              	.LBE2262:
 12604              	.LBB2263:
 12605              	.LBB2258:
 215:src/xeq.c     **** }
 12606              		.loc 1 215 25 view .LVU3351
 12607 00c2 1549     		ldr	r1, .L915+12
 12608              	.LBE2258:
 12609              	.LBE2263:
 12610              	.LBB2264:
 12611              	.LBB2254:
 933:src/xeq.c     **** }
 12612              		.loc 1 933 24 view .LVU3352
 12613 00c4 44F20103 		movw	r3, #16385
 12614              	.LVL924:
 933:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 373


 12615              		.loc 1 933 24 view .LVU3353
 12616              	.LBE2254:
 12617              	.LBE2264:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 12618              		.loc 1 223 73 view .LVU3354
 12619 00c8 3340     		ands	r3, r3, r6
 12620              	.LBB2265:
 12621              	.LBB2259:
 215:src/xeq.c     **** }
 12622              		.loc 1 215 25 view .LVU3355
 12623 00ca 0968     		ldr	r1, [r1]
 12624              	.LBE2259:
 12625              	.LBE2265:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 12626              		.loc 1 223 73 view .LVU3356
 12627 00cc A3F58043 		sub	r3, r3, #16384
 12628              	.LBB2266:
 12629              	.LBB2260:
 215:src/xeq.c     **** }
 12630              		.loc 1 215 57 view .LVU3357
 12631 00d0 31F81260 		ldrh	r6, [r1, r2, lsl #1]
 12632              	.LBE2260:
 12633              	.LBE2266:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 12634              		.loc 1 223 73 view .LVU3358
 12635 00d4 B3FA83F3 		clz	r3, r3
 12636 00d8 5B09     		lsrs	r3, r3, #5
 12637 00da 0233     		adds	r3, r3, #2
 12638              	.LBB2267:
 12639              	.LBB2261:
 215:src/xeq.c     **** }
 12640              		.loc 1 215 57 view .LVU3359
 12641 00dc C6F30B06 		ubfx	r6, r6, #0, #12
 12642 00e0 1E41     		asrs	r6, r6, r3
 12643 00e2 95E7     		b	.L901
 12644              	.LVL925:
 12645              	.L914:
 215:src/xeq.c     **** }
 12646              		.loc 1 215 57 view .LVU3360
 12647              	.LBE2261:
 12648              	.LBE2267:
 12649              	.LBE2269:
 12650              	.LBE2271:
 12651              	.LBE2329:
1403:src/xeq.c     **** }
 12652              		.loc 1 1403 3 is_stmt 1 view .LVU3361
 12653 00e4 7020     		movs	r0, #112
 12654 00e6 FFF7FEFF 		bl	get_reg_n
 12655              	.LVL926:
 12656              	.LBB2330:
 12657              	.LBI2330:
1332:src/xeq.c     **** #if 0
 12658              		.loc 1 1332 6 view .LVU3362
 12659              	.LBB2331:
1347:src/xeq.c     **** #endif
 12660              		.loc 1 1347 2 view .LVU3363
 12661              	.LBB2332:
ARM GAS  /tmp/ccjeMhND.s 			page 374


 12662              	.LBI2332:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12663              		.loc 1 932 5 view .LVU3364
 12664              	.LBB2333:
 933:src/xeq.c     **** }
 12665              		.loc 1 933 2 view .LVU3365
 933:src/xeq.c     **** }
 12666              		.loc 1 933 24 is_stmt 0 view .LVU3366
 12667 00ea 2368     		ldr	r3, [r4]
 12668 00ec B3F8E827 		ldrh	r2, [r3, #2024]
 12669 00f0 2A40     		ands	r2, r2, r5
 12670 00f2 A2F58042 		sub	r2, r2, #16384
 12671 00f6 B2FA82F2 		clz	r2, r2
 12672 00fa 5209     		lsrs	r2, r2, #5
 12673              	.LBE2333:
 12674              	.LBE2332:
1347:src/xeq.c     **** #endif
 12675              		.loc 1 1347 24 view .LVU3367
 12676 00fc 0332     		adds	r2, r2, #3
1347:src/xeq.c     **** #endif
 12677              		.loc 1 1347 2 view .LVU3368
 12678 00fe 06FA02F2 		lsl	r2, r6, r2
 12679 0102 0021     		movs	r1, #0
 12680              	.LBE2331:
 12681              	.LBE2330:
1404:src/xeq.c     **** 
 12682              		.loc 1 1404 1 view .LVU3369
 12683 0104 BDE87040 		pop	{r4, r5, r6, lr}
 12684              		.cfi_restore 14
 12685              		.cfi_restore 6
 12686              		.cfi_restore 5
 12687              		.cfi_restore 4
 12688              		.cfi_def_cfa_offset 0
 12689              	.LBB2335:
 12690              	.LBB2334:
1347:src/xeq.c     **** #endif
 12691              		.loc 1 1347 2 view .LVU3370
 12692 0108 FFF7FEBF 		b	xset
 12693              	.LVL927:
 12694              	.L916:
1347:src/xeq.c     **** #endif
 12695              		.loc 1 1347 2 view .LVU3371
 12696              		.align	2
 12697              	.L915:
 12698 010c 00000000 		.word	main_ram
 12699 0110 00000000 		.word	StateWhileOn
 12700 0114 00000000 		.word	XromParams
 12701 0118 00000000 		.word	RetStk
 12702              	.LBE2334:
 12703              	.LBE2335:
 12704              		.cfi_endproc
 12705              	.LFE107:
 12707              		.section	.text.clrretstk,"ax",%progbits
 12708              		.align	1
 12709              		.p2align 2,,3
 12710              		.global	clrretstk
 12711              		.syntax unified
ARM GAS  /tmp/ccjeMhND.s 			page 375


 12712              		.thumb
 12713              		.thumb_func
 12714              		.fpu fpv4-sp-d16
 12716              	clrretstk:
 12717              	.LFB108:
1409:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 12718              		.loc 1 1409 22 is_stmt 1 view -0
 12719              		.cfi_startproc
 12720              		@ args = 0, pretend = 0, frame = 0
 12721              		@ frame_needed = 0, uses_anonymous_args = 0
 12722              		@ link register save eliminated.
1410:src/xeq.c     **** }
 12723              		.loc 1 1410 2 view .LVU3373
1410:src/xeq.c     **** }
 12724              		.loc 1 1410 14 is_stmt 0 view .LVU3374
 12725 0000 034B     		ldr	r3, .L918
 12726 0002 1B68     		ldr	r3, [r3]
1410:src/xeq.c     **** }
 12727              		.loc 1 1410 24 view .LVU3375
 12728 0004 0022     		movs	r2, #0
 12729 0006 A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
1410:src/xeq.c     **** }
 12730              		.loc 1 1410 12 view .LVU3376
 12731 000a A3F8E227 		strh	r2, [r3, #2018]	@ movhi
1411:src/xeq.c     **** 
 12732              		.loc 1 1411 1 view .LVU3377
 12733 000e 7047     		bx	lr
 12734              	.L919:
 12735              		.align	2
 12736              	.L918:
 12737 0010 00000000 		.word	main_ram
 12738              		.cfi_endproc
 12739              	.LFE108:
 12741              		.section	.text.clrretstk_pc,"ax",%progbits
 12742              		.align	1
 12743              		.p2align 2,,3
 12744              		.global	clrretstk_pc
 12745              		.syntax unified
 12746              		.thumb
 12747              		.thumb_func
 12748              		.fpu fpv4-sp-d16
 12750              	clrretstk_pc:
 12751              	.LFB109:
1413:src/xeq.c     **** 	clrretstk();
 12752              		.loc 1 1413 25 is_stmt 1 view -0
 12753              		.cfi_startproc
 12754              		@ args = 0, pretend = 0, frame = 0
 12755              		@ frame_needed = 0, uses_anonymous_args = 0
1414:src/xeq.c     **** 	raw_set_pc(0);
 12756              		.loc 1 1414 2 view .LVU3379
 12757              	.LBB2336:
 12758              	.LBI2336:
1409:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 12759              		.loc 1 1409 6 view .LVU3380
 12760              	.LBB2337:
1410:src/xeq.c     **** }
 12761              		.loc 1 1410 2 view .LVU3381
ARM GAS  /tmp/ccjeMhND.s 			page 376


 12762              	.LBE2337:
 12763              	.LBE2336:
1413:src/xeq.c     **** 	clrretstk();
 12764              		.loc 1 1413 25 is_stmt 0 view .LVU3382
 12765 0000 08B5     		push	{r3, lr}
 12766              		.cfi_def_cfa_offset 8
 12767              		.cfi_offset 3, -8
 12768              		.cfi_offset 14, -4
 12769              	.LBB2340:
 12770              	.LBB2338:
1410:src/xeq.c     **** }
 12771              		.loc 1 1410 14 view .LVU3383
 12772 0002 074B     		ldr	r3, .L922
 12773 0004 1B68     		ldr	r3, [r3]
 12774              	.LBE2338:
 12775              	.LBE2340:
1415:src/xeq.c     **** 	update_program_bounds(1);
 12776              		.loc 1 1415 2 is_stmt 1 view .LVU3384
 12777              	.LVL928:
 12778              	.LBB2341:
 12779              	.LBI2341:
 279:src/xeq.c     **** 	State.pc = pc;
 12780              		.loc 1 279 13 view .LVU3385
 12781              	.LBB2342:
 280:src/xeq.c     **** 	update_program_bounds(0);
 12782              		.loc 1 280 2 view .LVU3386
 12783              	.LBE2342:
 12784              	.LBE2341:
 12785              	.LBB2344:
 12786              	.LBB2339:
1410:src/xeq.c     **** }
 12787              		.loc 1 1410 24 is_stmt 0 view .LVU3387
 12788 0006 0020     		movs	r0, #0
 12789 0008 A3F8DE07 		strh	r0, [r3, #2014]	@ movhi
 12790              	.LBE2339:
 12791              	.LBE2344:
 12792              	.LBB2345:
 12793              	.LBB2343:
 280:src/xeq.c     **** 	update_program_bounds(0);
 12794              		.loc 1 280 11 view .LVU3388
 12795 000c C3F8E007 		str	r0, [r3, #2016]
 281:src/xeq.c     **** }
 12796              		.loc 1 281 2 is_stmt 1 view .LVU3389
 12797 0010 FFF7FEFF 		bl	update_program_bounds
 12798              	.LVL929:
 281:src/xeq.c     **** }
 12799              		.loc 1 281 2 is_stmt 0 view .LVU3390
 12800              	.LBE2343:
 12801              	.LBE2345:
1416:src/xeq.c     **** }
 12802              		.loc 1 1416 2 is_stmt 1 view .LVU3391
1417:src/xeq.c     **** 
 12803              		.loc 1 1417 1 is_stmt 0 view .LVU3392
 12804 0014 BDE80840 		pop	{r3, lr}
 12805              		.cfi_restore 14
 12806              		.cfi_restore 3
 12807              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccjeMhND.s 			page 377


1416:src/xeq.c     **** }
 12808              		.loc 1 1416 2 view .LVU3393
 12809 0018 0120     		movs	r0, #1
 12810 001a FFF7FEBF 		b	update_program_bounds
 12811              	.LVL930:
 12812              	.L923:
 12813 001e 00BF     		.align	2
 12814              	.L922:
 12815 0020 00000000 		.word	main_ram
 12816              		.cfi_endproc
 12817              	.LFE109:
 12819              		.section	.text.cmdconst,"ax",%progbits
 12820              		.align	1
 12821              		.p2align 2,,3
 12822              		.global	cmdconst
 12823              		.syntax unified
 12824              		.thumb
 12825              		.thumb_func
 12826              		.fpu fpv4-sp-d16
 12828              	cmdconst:
 12829              	.LVL931:
 12830              	.LFB110:
1423:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 12831              		.loc 1 1423 47 is_stmt 1 view -0
 12832              		.cfi_startproc
 12833              		@ args = 0, pretend = 0, frame = 0
 12834              		@ frame_needed = 0, uses_anonymous_args = 0
1425:src/xeq.c     **** #else
 12835              		.loc 1 1425 2 view .LVU3395
1423:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 12836              		.loc 1 1423 47 is_stmt 0 view .LVU3396
 12837 0000 70B5     		push	{r4, r5, r6, lr}
 12838              		.cfi_def_cfa_offset 16
 12839              		.cfi_offset 4, -16
 12840              		.cfi_offset 5, -12
 12841              		.cfi_offset 6, -8
 12842              		.cfi_offset 14, -4
1425:src/xeq.c     **** #else
 12843              		.loc 1 1425 5 view .LVU3397
 12844 0002 01F0FD03 		and	r3, r1, #253
 12845 0006 882B     		cmp	r3, #136
1423:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 12846              		.loc 1 1423 47 view .LVU3398
 12847 0008 82B0     		sub	sp, sp, #8
 12848              		.cfi_def_cfa_offset 24
1423:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 12849              		.loc 1 1423 47 view .LVU3399
 12850 000a 0C46     		mov	r4, r1
 12851 000c 0646     		mov	r6, r0
1425:src/xeq.c     **** #else
 12852              		.loc 1 1425 5 view .LVU3400
 12853 000e 08D0     		beq	.L925
1425:src/xeq.c     **** #else
 12854              		.loc 1 1425 30 discriminator 1 view .LVU3401
 12855 0010 0129     		cmp	r1, #1
 12856 0012 06D0     		beq	.L925
1433:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 378


 12857              		.loc 1 1433 3 is_stmt 1 view .LVU3402
 12858              	.LBB2373:
 12859              	.LBI2373:
 738:src/xeq.c     **** 	if (get_lift())
 12860              		.loc 1 738 6 view .LVU3403
 12861              	.LBB2374:
 739:src/xeq.c     **** 		lift();
 12862              		.loc 1 739 2 view .LVU3404
 12863              	.LBB2375:
 12864              	.LBI2375:
 734:src/xeq.c     **** 	return State2.state_lift;
 12865              		.loc 1 734 12 view .LVU3405
 12866              	.LBB2376:
 735:src/xeq.c     **** }
 12867              		.loc 1 735 2 view .LVU3406
 735:src/xeq.c     **** }
 12868              		.loc 1 735 15 is_stmt 0 view .LVU3407
 12869 0014 294B     		ldr	r3, .L946
 12870 0016 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 12871              	.LBE2376:
 12872              	.LBE2375:
 739:src/xeq.c     **** 		lift();
 12873              		.loc 1 739 5 view .LVU3408
 12874 0018 5906     		lsls	r1, r3, #25
 12875              	.LVL932:
 739:src/xeq.c     **** 		lift();
 12876              		.loc 1 739 5 view .LVU3409
 12877 001a 12D5     		bpl	.L928
 740:src/xeq.c     **** }
 12878              		.loc 1 740 3 is_stmt 1 view .LVU3410
 12879 001c FFF7FEFF 		bl	lift
 12880              	.LVL933:
 740:src/xeq.c     **** }
 12881              		.loc 1 740 3 is_stmt 0 view .LVU3411
 12882 0020 0FE0     		b	.L928
 12883              	.LVL934:
 12884              	.L925:
 740:src/xeq.c     **** }
 12885              		.loc 1 740 3 view .LVU3412
 12886              	.LBE2374:
 12887              	.LBE2373:
1429:src/xeq.c     **** 		zero_Y();
 12888              		.loc 1 1429 3 is_stmt 1 view .LVU3413
 12889              	.LBB2377:
 12890              	.LBI2377:
 743:src/xeq.c     **** 	lift_if_enabled();
 12891              		.loc 1 743 13 view .LVU3414
 12892              	.LBB2378:
 744:src/xeq.c     **** 	lift();
 12893              		.loc 1 744 2 view .LVU3415
 12894              	.LBB2379:
 12895              	.LBI2379:
 738:src/xeq.c     **** 	if (get_lift())
 12896              		.loc 1 738 6 view .LVU3416
 12897              	.LBB2380:
 739:src/xeq.c     **** 		lift();
 12898              		.loc 1 739 2 view .LVU3417
ARM GAS  /tmp/ccjeMhND.s 			page 379


 12899              	.LBB2381:
 12900              	.LBI2381:
 734:src/xeq.c     **** 	return State2.state_lift;
 12901              		.loc 1 734 12 view .LVU3418
 12902              	.LBB2382:
 735:src/xeq.c     **** }
 12903              		.loc 1 735 2 view .LVU3419
 735:src/xeq.c     **** }
 12904              		.loc 1 735 15 is_stmt 0 view .LVU3420
 12905 0022 264D     		ldr	r5, .L946
 12906 0024 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12907              	.LBE2382:
 12908              	.LBE2381:
 739:src/xeq.c     **** 		lift();
 12909              		.loc 1 739 5 view .LVU3421
 12910 0026 5806     		lsls	r0, r3, #25
 12911              	.LVL935:
 739:src/xeq.c     **** 		lift();
 12912              		.loc 1 739 5 view .LVU3422
 12913 0028 3CD4     		bmi	.L944
 12914              	.LVL936:
 12915              	.L927:
 739:src/xeq.c     **** 		lift();
 12916              		.loc 1 739 5 view .LVU3423
 12917              	.LBE2380:
 12918              	.LBE2379:
 745:src/xeq.c     **** }
 12919              		.loc 1 745 2 is_stmt 1 view .LVU3424
 12920 002a FFF7FEFF 		bl	lift
 12921              	.LVL937:
 12922              	.LBE2378:
 12923              	.LBE2377:
1430:src/xeq.c     **** 		set_was_complex();
 12924              		.loc 1 1430 3 view .LVU3425
 12925              	.LBB2386:
 12926              	.LBI2386:
1368:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 12927              		.loc 1 1368 6 view .LVU3426
 12928              	.LBB2387:
1369:src/xeq.c     **** }
 12929              		.loc 1 1369 2 view .LVU3427
 12930 002e 6520     		movs	r0, #101
 12931 0030 FFF7FEFF 		bl	get_reg_n
 12932              	.LVL938:
 12933 0034 FFF7FEFF 		bl	set_zero
 12934              	.LVL939:
 12935              	.LBE2387:
 12936              	.LBE2386:
1431:src/xeq.c     **** 	} else
 12937              		.loc 1 1431 3 view .LVU3428
 12938              	.LBB2388:
 12939              	.LBI2388:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 12940              		.loc 1 530 13 view .LVU3429
 12941              	.LBB2389:
 531:src/xeq.c     **** }
 12942              		.loc 1 531 2 view .LVU3430
ARM GAS  /tmp/ccjeMhND.s 			page 380


 531:src/xeq.c     **** }
 12943              		.loc 1 531 20 is_stmt 0 view .LVU3431
 12944 0038 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 12945 003a 0122     		movs	r2, #1
 12946 003c 62F38713 		bfi	r3, r2, #6, #2
 12947 0040 2B75     		strb	r3, [r5, #20]
 12948              	.L928:
 12949              	.LBE2389:
 12950              	.LBE2388:
1435:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 12951              		.loc 1 1435 2 is_stmt 1 view .LVU3432
1435:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 12952              		.loc 1 1435 24 is_stmt 0 view .LVU3433
 12953 0042 7934     		adds	r4, r4, #121
1435:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 12954              		.loc 1 1435 5 view .LVU3434
 12955 0044 E4B2     		uxtb	r4, r4
 12956 0046 012C     		cmp	r4, #1
 12957 0048 2FD9     		bls	.L945
1437:src/xeq.c     **** 		bad_mode_error();
 12958              		.loc 1 1437 7 is_stmt 1 view .LVU3435
1437:src/xeq.c     **** 		bad_mode_error();
 12959              		.loc 1 1437 11 is_stmt 0 view .LVU3436
 12960 004a 1D4C     		ldr	r4, .L946+4
 12961 004c 2368     		ldr	r3, [r4]
 12962 004e 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1437:src/xeq.c     **** 		bad_mode_error();
 12963              		.loc 1 1437 10 view .LVU3437
 12964 0052 D207     		lsls	r2, r2, #31
 12965 0054 06D5     		bpl	.L931
1438:src/xeq.c     **** 	else 
 12966              		.loc 1 1438 3 is_stmt 1 view .LVU3438
 12967              	.LBB2390:
 12968              	.LBI2390:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 12969              		.loc 1 566 6 view .LVU3439
 12970              	.LBE2390:
 567:src/xeq.c     **** }
 12971              		.loc 1 567 2 view .LVU3440
 12972              	.LVL940:
 12973              	.LBB2395:
 12974              	.LBB2391:
 12975              	.LBI2391:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12976              		.loc 1 537 5 view .LVU3441
 12977              	.LBB2392:
 538:src/xeq.c     **** 		Error = e;
 12978              		.loc 1 538 2 view .LVU3442
 538:src/xeq.c     **** 		Error = e;
 12979              		.loc 1 538 12 is_stmt 0 view .LVU3443
 12980 0056 1B4B     		ldr	r3, .L946+8
 538:src/xeq.c     **** 		Error = e;
 12981              		.loc 1 538 5 view .LVU3444
 12982 0058 1A68     		ldr	r2, [r3]
 12983 005a 0AB9     		cbnz	r2, .L924
 12984              	.LVL941:
 12985              	.LBB2393:
ARM GAS  /tmp/ccjeMhND.s 			page 381


 12986              	.LBI2393:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12987              		.loc 1 537 5 is_stmt 1 view .LVU3445
 12988              	.LBB2394:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 12989              		.loc 1 539 3 view .LVU3446
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 12990              		.loc 1 539 9 is_stmt 0 view .LVU3447
 12991 005c 0D22     		movs	r2, #13
 12992 005e 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 12993              		.loc 1 540 3 is_stmt 1 view .LVU3448
 12994              	.LVL942:
 12995              	.L924:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 12996              		.loc 1 540 3 is_stmt 0 view .LVU3449
 12997              	.LBE2394:
 12998              	.LBE2393:
 12999              	.LBE2392:
 13000              	.LBE2391:
 13001              	.LBE2395:
1441:src/xeq.c     **** 
 13002              		.loc 1 1441 1 view .LVU3450
 13003 0060 02B0     		add	sp, sp, #8
 13004              		.cfi_remember_state
 13005              		.cfi_def_cfa_offset 16
 13006              		@ sp needed
 13007 0062 70BD     		pop	{r4, r5, r6, pc}
 13008              	.LVL943:
 13009              	.L931:
 13010              		.cfi_restore_state
1440:src/xeq.c     **** }
 13011              		.loc 1 1440 3 is_stmt 1 view .LVU3451
 13012              	.LBB2396:
 13013              	.LBB2397:
 933:src/xeq.c     **** }
 13014              		.loc 1 933 24 is_stmt 0 view .LVU3452
 13015 0064 B3F8E817 		ldrh	r1, [r3, #2024]
 13016              	.LBE2397:
 13017              	.LBE2396:
1440:src/xeq.c     **** }
 13018              		.loc 1 1440 3 view .LVU3453
 13019 0068 174B     		ldr	r3, .L946+12
 13020              	.LBB2400:
 13021              	.LBB2398:
 933:src/xeq.c     **** }
 13022              		.loc 1 933 24 view .LVU3454
 13023 006a 44F20105 		movw	r5, #16385
 13024 006e 2940     		ands	r1, r1, r5
 13025              	.LBE2398:
 13026              	.LBE2400:
1440:src/xeq.c     **** }
 13027              		.loc 1 1440 22 view .LVU3455
 13028 0070 A1F58041 		sub	r1, r1, #16384
 13029 0074 B1FA81F1 		clz	r1, r1
 13030 0078 3046     		mov	r0, r6
 13031 007a 4909     		lsrs	r1, r1, #5
ARM GAS  /tmp/ccjeMhND.s 			page 382


1440:src/xeq.c     **** }
 13032              		.loc 1 1440 3 view .LVU3456
 13033 007c 1E68     		ldr	r6, [r3]
 13034              	.LVL944:
 13035              	.LBB2401:
 13036              	.LBI2396:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13037              		.loc 1 932 5 is_stmt 1 view .LVU3457
 13038              	.LBB2399:
 933:src/xeq.c     **** }
 13039              		.loc 1 933 2 view .LVU3458
 13040              	.LBE2399:
 13041              	.LBE2401:
1440:src/xeq.c     **** }
 13042              		.loc 1 1440 22 is_stmt 0 view .LVU3459
 13043 007e FFF7FEFF 		bl	get_const
 13044              	.LVL945:
 13045              	.LBB2402:
 13046              	.LBB2403:
 13047              	.LBB2404:
 13048              	.LBB2405:
 933:src/xeq.c     **** }
 13049              		.loc 1 933 24 view .LVU3460
 13050 0082 2368     		ldr	r3, [r4]
 13051 0084 B3F8E837 		ldrh	r3, [r3, #2024]
 13052              	.LBE2405:
 13053              	.LBE2404:
 718:src/xeq.c     **** }
 13054              		.loc 1 718 2 view .LVU3461
 13055 0088 1D40     		ands	r5, r5, r3
 13056 008a B5F5804F 		cmp	r5, #16384
 13057              	.LBE2403:
 13058              	.LBE2402:
1440:src/xeq.c     **** }
 13059              		.loc 1 1440 22 view .LVU3462
 13060 008e 0146     		mov	r1, r0
 13061              	.LVL946:
 13062              	.LBB2410:
 13063              	.LBI2402:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13064              		.loc 1 717 6 is_stmt 1 view .LVU3463
 13065              	.LBB2408:
 718:src/xeq.c     **** }
 13066              		.loc 1 718 2 view .LVU3464
 13067              	.LBB2407:
 13068              	.LBI2404:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13069              		.loc 1 932 5 view .LVU3465
 13070              	.LBB2406:
 933:src/xeq.c     **** }
 13071              		.loc 1 933 2 view .LVU3466
 13072              	.LBE2406:
 13073              	.LBE2407:
 718:src/xeq.c     **** }
 13074              		.loc 1 718 2 is_stmt 0 view .LVU3467
 13075 0090 08BF     		it	eq
 13076 0092 1022     		moveq	r2, #16
ARM GAS  /tmp/ccjeMhND.s 			page 383


 13077 0094 3046     		mov	r0, r6
 13078              	.LVL947:
 718:src/xeq.c     **** }
 13079              		.loc 1 718 2 view .LVU3468
 13080 0096 18BF     		it	ne
 13081 0098 0822     		movne	r2, #8
 13082              	.LBE2408:
 13083              	.LBE2410:
1441:src/xeq.c     **** 
 13084              		.loc 1 1441 1 view .LVU3469
 13085 009a 02B0     		add	sp, sp, #8
 13086              		.cfi_remember_state
 13087              		.cfi_def_cfa_offset 16
 13088              		@ sp needed
 13089 009c BDE87040 		pop	{r4, r5, r6, lr}
 13090              		.cfi_restore 14
 13091              		.cfi_restore 6
 13092              		.cfi_restore 5
 13093              		.cfi_restore 4
 13094              		.cfi_def_cfa_offset 0
 13095              	.LVL948:
 13096              	.LBB2411:
 13097              	.LBB2409:
 718:src/xeq.c     **** }
 13098              		.loc 1 718 2 view .LVU3470
 13099 00a0 FFF7FEBF 		b	xcopy
 13100              	.LVL949:
 13101              	.L944:
 13102              		.cfi_restore_state
 718:src/xeq.c     **** }
 13103              		.loc 1 718 2 view .LVU3471
 13104              	.LBE2409:
 13105              	.LBE2411:
 13106              	.LBB2412:
 13107              	.LBB2385:
 13108              	.LBB2384:
 13109              	.LBB2383:
 740:src/xeq.c     **** }
 13110              		.loc 1 740 3 is_stmt 1 view .LVU3472
 13111 00a4 FFF7FEFF 		bl	lift
 13112              	.LVL950:
 740:src/xeq.c     **** }
 13113              		.loc 1 740 3 is_stmt 0 view .LVU3473
 13114 00a8 BFE7     		b	.L927
 13115              	.L945:
 13116              	.LBE2383:
 13117              	.LBE2384:
 13118              	.LBE2385:
 13119              	.LBE2412:
1436:src/xeq.c     **** 	else if (is_intmode())
 13120              		.loc 1 1436 3 is_stmt 1 view .LVU3474
 13121              	.LVL951:
 13122              	.LBB2413:
 13123              	.LBI2413:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 13124              		.loc 1 1323 6 view .LVU3475
 13125              	.LBB2414:
ARM GAS  /tmp/ccjeMhND.s 			page 384


1324:src/xeq.c     **** }
 13126              		.loc 1 1324 2 view .LVU3476
 13127              	.LBE2414:
 13128              	.LBE2413:
1436:src/xeq.c     **** 	else if (is_intmode())
 13129              		.loc 1 1436 3 is_stmt 0 view .LVU3477
 13130 00aa 0023     		movs	r3, #0
 13131              	.LBB2416:
 13132              	.LBB2415:
1324:src/xeq.c     **** }
 13133              		.loc 1 1324 2 view .LVU3478
 13134 00ac 3246     		mov	r2, r6
 13135 00ae 0093     		str	r3, [sp]
 13136 00b0 6420     		movs	r0, #100
 13137 00b2 FFF7FEFF 		bl	set_reg_n_int_sgn
 13138              	.LVL952:
 13139              	.LBE2415:
 13140              	.LBE2416:
1441:src/xeq.c     **** 
 13141              		.loc 1 1441 1 view .LVU3479
 13142 00b6 02B0     		add	sp, sp, #8
 13143              		.cfi_def_cfa_offset 16
 13144              		@ sp needed
 13145 00b8 70BD     		pop	{r4, r5, r6, pc}
 13146              	.LVL953:
 13147              	.L947:
1441:src/xeq.c     **** 
 13148              		.loc 1 1441 1 view .LVU3480
 13149 00ba 00BF     		.align	2
 13150              	.L946:
 13151 00bc 00000000 		.word	StateWhileOn
 13152 00c0 00000000 		.word	main_ram
 13153 00c4 00000000 		.word	Error
 13154 00c8 00000000 		.word	StackBase
 13155              		.cfi_endproc
 13156              	.LFE110:
 13158              		.section	.text.cmdsto,"ax",%progbits
 13159              		.align	1
 13160              		.p2align 2,,3
 13161              		.global	cmdsto
 13162              		.syntax unified
 13163              		.thumb
 13164              		.thumb_func
 13165              		.fpu fpv4-sp-d16
 13167              	cmdsto:
 13168              	.LVL954:
 13169              	.LFB113:
1524:src/xeq.c     **** 	if (op == RARG_STO) {
 13170              		.loc 1 1524 45 is_stmt 1 view -0
 13171              		.cfi_startproc
 13172              		@ args = 0, pretend = 0, frame = 48
 13173              		@ frame_needed = 0, uses_anonymous_args = 0
1525:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 13174              		.loc 1 1525 2 view .LVU3482
1524:src/xeq.c     **** 	if (op == RARG_STO) {
 13175              		.loc 1 1524 45 is_stmt 0 view .LVU3483
 13176 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccjeMhND.s 			page 385


 13177              		.cfi_def_cfa_offset 8
 13178              		.cfi_offset 4, -8
 13179              		.cfi_offset 14, -4
1525:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 13180              		.loc 1 1525 5 view .LVU3484
 13181 0002 0329     		cmp	r1, #3
1524:src/xeq.c     **** 	if (op == RARG_STO) {
 13182              		.loc 1 1524 45 view .LVU3485
 13183 0004 8CB0     		sub	sp, sp, #48
 13184              		.cfi_def_cfa_offset 56
1525:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 13185              		.loc 1 1525 5 view .LVU3486
 13186 0006 32D0     		beq	.L961
1528:src/xeq.c     **** 			long long int r;
 13187              		.loc 1 1528 3 is_stmt 1 view .LVU3487
1528:src/xeq.c     **** 			long long int r;
 13188              		.loc 1 1528 7 is_stmt 0 view .LVU3488
 13189 0008 1B4B     		ldr	r3, .L962
 13190 000a 1B68     		ldr	r3, [r3]
 13191 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 13192              	.LBB2429:
1531:src/xeq.c     **** 				illegal(op);
 13193              		.loc 1 1531 8 view .LVU3489
 13194 0010 0339     		subs	r1, r1, #3
 13195              	.LVL955:
1531:src/xeq.c     **** 				illegal(op);
 13196              		.loc 1 1531 8 view .LVU3490
 13197              	.LBE2429:
1528:src/xeq.c     **** 			long long int r;
 13198              		.loc 1 1528 6 view .LVU3491
 13199 0012 13F00103 		ands	r3, r3, #1
 13200 0016 0446     		mov	r4, r0
 13201              	.LBB2437:
1531:src/xeq.c     **** 				illegal(op);
 13202              		.loc 1 1531 8 view .LVU3492
 13203 0018 88B2     		uxth	r0, r1
 13204              	.LVL956:
1531:src/xeq.c     **** 				illegal(op);
 13205              		.loc 1 1531 8 view .LVU3493
 13206              	.LBE2437:
1528:src/xeq.c     **** 			long long int r;
 13207              		.loc 1 1528 6 view .LVU3494
 13208 001a 18D0     		beq	.L951
 13209              	.LBB2438:
1529:src/xeq.c     **** 
 13210              		.loc 1 1529 4 is_stmt 1 view .LVU3495
1531:src/xeq.c     **** 				illegal(op);
 13211              		.loc 1 1531 4 view .LVU3496
1531:src/xeq.c     **** 				illegal(op);
 13212              		.loc 1 1531 8 is_stmt 0 view .LVU3497
 13213 001c 0023     		movs	r3, #0
 13214 001e 6A46     		mov	r2, sp
 13215 0020 2146     		mov	r1, r4
 13216 0022 FFF7FEFF 		bl	storcl_intop
 13217              	.LVL957:
1531:src/xeq.c     **** 				illegal(op);
 13218              		.loc 1 1531 7 view .LVU3498
ARM GAS  /tmp/ccjeMhND.s 			page 386


 13219 0026 20B1     		cbz	r0, .L952
1532:src/xeq.c     **** 			set_reg_n_int(arg, r);
 13220              		.loc 1 1532 5 is_stmt 1 view .LVU3499
1532:src/xeq.c     **** 			set_reg_n_int(arg, r);
 13221              		.loc 1 1532 5 view .LVU3500
 13222              	.LVL958:
 13223              	.LBB2430:
 13224              	.LBI2430:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13225              		.loc 1 537 5 view .LVU3501
 13226              	.LBB2431:
 538:src/xeq.c     **** 		Error = e;
 13227              		.loc 1 538 2 view .LVU3502
 538:src/xeq.c     **** 		Error = e;
 13228              		.loc 1 538 12 is_stmt 0 view .LVU3503
 13229 0028 144B     		ldr	r3, .L962+4
 538:src/xeq.c     **** 		Error = e;
 13230              		.loc 1 538 5 view .LVU3504
 13231 002a 1A68     		ldr	r2, [r3]
 13232 002c 0AB9     		cbnz	r2, .L952
 13233              	.LVL959:
 13234              	.LBB2432:
 13235              	.LBI2432:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13236              		.loc 1 537 5 is_stmt 1 view .LVU3505
 13237              	.LBB2433:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13238              		.loc 1 539 3 view .LVU3506
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13239              		.loc 1 539 9 is_stmt 0 view .LVU3507
 13240 002e 0322     		movs	r2, #3
 13241 0030 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13242              		.loc 1 540 3 is_stmt 1 view .LVU3508
 13243              	.LVL960:
 13244              	.L952:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13245              		.loc 1 540 3 is_stmt 0 view .LVU3509
 13246              	.LBE2433:
 13247              	.LBE2432:
 13248              	.LBE2431:
 13249              	.LBE2430:
1532:src/xeq.c     **** 			set_reg_n_int(arg, r);
 13250              		.loc 1 1532 5 is_stmt 1 discriminator 1 view .LVU3510
1533:src/xeq.c     **** 		} else {
 13251              		.loc 1 1533 4 discriminator 1 view .LVU3511
1533:src/xeq.c     **** 		} else {
 13252              		.loc 1 1533 4 is_stmt 0 discriminator 1 view .LVU3512
 13253 0032 DDE90023 		ldrd	r2, [sp]
 13254              	.LBB2434:
 13255              	.LBB2435:
1237:src/xeq.c     **** }
 13256              		.loc 1 1237 8 discriminator 1 view .LVU3513
 13257 0036 2046     		mov	r0, r4
 13258 0038 CDE90223 		strd	r2, [sp, #8]
 13259              	.LVL961:
1237:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 387


 13260              		.loc 1 1237 8 discriminator 1 view .LVU3514
 13261              	.LBE2435:
 13262              	.LBI2434:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 13263              		.loc 1 1236 6 is_stmt 1 discriminator 1 view .LVU3515
 13264              	.LBB2436:
1237:src/xeq.c     **** }
 13265              		.loc 1 1237 2 discriminator 1 view .LVU3516
1237:src/xeq.c     **** }
 13266              		.loc 1 1237 8 is_stmt 0 discriminator 1 view .LVU3517
 13267 003c FFF7FEFF 		bl	get_reg_n
 13268              	.LVL962:
1237:src/xeq.c     **** }
 13269              		.loc 1 1237 2 discriminator 1 view .LVU3518
 13270 0040 0822     		movs	r2, #8
 13271 0042 0DEB0201 		add	r1, sp, r2
 13272 0046 FFF7FEFF 		bl	xcopy
 13273              	.LVL963:
1237:src/xeq.c     **** }
 13274              		.loc 1 1237 2 discriminator 1 view .LVU3519
 13275              	.LBE2436:
 13276              	.LBE2434:
 13277              	.LBE2438:
1542:src/xeq.c     **** 
 13278              		.loc 1 1542 1 discriminator 1 view .LVU3520
 13279 004a 0CB0     		add	sp, sp, #48
 13280              		.cfi_remember_state
 13281              		.cfi_def_cfa_offset 8
 13282              		@ sp needed
 13283 004c 10BD     		pop	{r4, pc}
 13284              	.LVL964:
 13285              	.L951:
 13286              		.cfi_restore_state
 13287              	.LBB2439:
1535:src/xeq.c     **** 
 13288              		.loc 1 1535 4 is_stmt 1 view .LVU3521
1537:src/xeq.c     **** 				illegal(op);
 13289              		.loc 1 1537 4 view .LVU3522
1537:src/xeq.c     **** 				illegal(op);
 13290              		.loc 1 1537 8 is_stmt 0 view .LVU3523
 13291 004e 02AA     		add	r2, sp, #8
 13292 0050 2146     		mov	r1, r4
 13293 0052 FFF7FEFF 		bl	storcl_op
 13294              	.LVL965:
1537:src/xeq.c     **** 				illegal(op);
 13295              		.loc 1 1537 7 view .LVU3524
 13296 0056 20B1     		cbz	r0, .L953
1538:src/xeq.c     **** 			setRegister(arg, &r);
 13297              		.loc 1 1538 5 is_stmt 1 view .LVU3525
1538:src/xeq.c     **** 			setRegister(arg, &r);
 13298              		.loc 1 1538 5 view .LVU3526
 13299              	.LVL966:
 13300              	.LBB2440:
 13301              	.LBI2440:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13302              		.loc 1 537 5 view .LVU3527
 13303              	.LBB2441:
ARM GAS  /tmp/ccjeMhND.s 			page 388


 538:src/xeq.c     **** 		Error = e;
 13304              		.loc 1 538 2 view .LVU3528
 538:src/xeq.c     **** 		Error = e;
 13305              		.loc 1 538 12 is_stmt 0 view .LVU3529
 13306 0058 084B     		ldr	r3, .L962+4
 538:src/xeq.c     **** 		Error = e;
 13307              		.loc 1 538 5 view .LVU3530
 13308 005a 1A68     		ldr	r2, [r3]
 13309 005c 0AB9     		cbnz	r2, .L953
 13310              	.LVL967:
 13311              	.LBB2442:
 13312              	.LBI2442:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13313              		.loc 1 537 5 is_stmt 1 view .LVU3531
 13314              	.LBB2443:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13315              		.loc 1 539 3 view .LVU3532
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13316              		.loc 1 539 9 is_stmt 0 view .LVU3533
 13317 005e 0322     		movs	r2, #3
 13318 0060 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13319              		.loc 1 540 3 is_stmt 1 view .LVU3534
 13320              	.LVL968:
 13321              	.L953:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13322              		.loc 1 540 3 is_stmt 0 view .LVU3535
 13323              	.LBE2443:
 13324              	.LBE2442:
 13325              	.LBE2441:
 13326              	.LBE2440:
1538:src/xeq.c     **** 			setRegister(arg, &r);
 13327              		.loc 1 1538 5 is_stmt 1 discriminator 1 view .LVU3536
1539:src/xeq.c     **** 		}
 13328              		.loc 1 1539 4 discriminator 1 view .LVU3537
 13329 0062 02A9     		add	r1, sp, #8
 13330 0064 2046     		mov	r0, r4
 13331 0066 FFF7FEFF 		bl	setRegister
 13332              	.LVL969:
 13333              	.LBE2439:
1542:src/xeq.c     **** 
 13334              		.loc 1 1542 1 is_stmt 0 discriminator 1 view .LVU3538
 13335 006a 0CB0     		add	sp, sp, #48
 13336              		.cfi_remember_state
 13337              		.cfi_def_cfa_offset 8
 13338              		@ sp needed
 13339 006c 10BD     		pop	{r4, pc}
 13340              	.LVL970:
 13341              	.L961:
 13342              		.cfi_restore_state
1526:src/xeq.c     **** 	} else {
 13343              		.loc 1 1526 3 is_stmt 1 view .LVU3539
 13344 006e 6421     		movs	r1, #100
 13345              	.LVL971:
1526:src/xeq.c     **** 	} else {
 13346              		.loc 1 1526 3 is_stmt 0 view .LVU3540
 13347 0070 FFF7FEFF 		bl	copyreg_n
ARM GAS  /tmp/ccjeMhND.s 			page 389


 13348              	.LVL972:
1542:src/xeq.c     **** 
 13349              		.loc 1 1542 1 view .LVU3541
 13350 0074 0CB0     		add	sp, sp, #48
 13351              		.cfi_def_cfa_offset 8
 13352              		@ sp needed
 13353 0076 10BD     		pop	{r4, pc}
 13354              	.L963:
 13355              		.align	2
 13356              	.L962:
 13357 0078 00000000 		.word	main_ram
 13358 007c 00000000 		.word	Error
 13359              		.cfi_endproc
 13360              	.LFE113:
 13362              		.section	.text.cmdrcl,"ax",%progbits
 13363              		.align	1
 13364              		.p2align 2,,3
 13365              		.global	cmdrcl
 13366              		.syntax unified
 13367              		.thumb
 13368              		.thumb_func
 13369              		.fpu fpv4-sp-d16
 13371              	cmdrcl:
 13372              	.LVL973:
 13373              	.LFB115:
1571:src/xeq.c     **** 	do_rcl(arg, op);
 13374              		.loc 1 1571 45 is_stmt 1 view -0
 13375              		.cfi_startproc
 13376              		@ args = 0, pretend = 0, frame = 0
 13377              		@ frame_needed = 0, uses_anonymous_args = 0
 13378              		@ link register save eliminated.
1572:src/xeq.c     **** }
 13379              		.loc 1 1572 2 view .LVU3543
 13380 0000 FFF7FEBF 		b	do_rcl
 13381              	.LVL974:
1572:src/xeq.c     **** }
 13382              		.loc 1 1572 2 is_stmt 0 view .LVU3544
 13383              		.cfi_endproc
 13384              	.LFE115:
 13386              		.section	.text.cmdcsto,"ax",%progbits
 13387              		.align	1
 13388              		.p2align 2,,3
 13389              		.global	cmdcsto
 13390              		.syntax unified
 13391              		.thumb
 13392              		.thumb_func
 13393              		.fpu fpv4-sp-d16
 13395              	cmdcsto:
 13396              	.LVL975:
 13397              	.LFB117:
1616:src/xeq.c     **** 	decNumber r1, r2;
 13398              		.loc 1 1616 46 is_stmt 1 view -0
 13399              		.cfi_startproc
 13400              		@ args = 0, pretend = 0, frame = 72
 13401              		@ frame_needed = 0, uses_anonymous_args = 0
1617:src/xeq.c     **** 	REGISTER *t1, *t2;
 13402              		.loc 1 1617 2 view .LVU3546
ARM GAS  /tmp/ccjeMhND.s 			page 390


1618:src/xeq.c     **** 
 13403              		.loc 1 1618 2 view .LVU3547
1620:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 13404              		.loc 1 1620 2 view .LVU3548
1616:src/xeq.c     **** 	decNumber r1, r2;
 13405              		.loc 1 1616 46 is_stmt 0 view .LVU3549
 13406 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 13407              		.cfi_def_cfa_offset 24
 13408              		.cfi_offset 4, -24
 13409              		.cfi_offset 5, -20
 13410              		.cfi_offset 6, -16
 13411              		.cfi_offset 7, -12
 13412              		.cfi_offset 8, -8
 13413              		.cfi_offset 14, -4
 13414 0004 94B0     		sub	sp, sp, #80
 13415              		.cfi_def_cfa_offset 104
1616:src/xeq.c     **** 	decNumber r1, r2;
 13416              		.loc 1 1616 46 view .LVU3550
 13417 0006 0C46     		mov	r4, r1
1621:src/xeq.c     **** 
 13418              		.loc 1 1621 21 view .LVU3551
 13419 0008 461C     		adds	r6, r0, #1
1616:src/xeq.c     **** 	decNumber r1, r2;
 13420              		.loc 1 1616 46 view .LVU3552
 13421 000a 0546     		mov	r5, r0
1620:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 13422              		.loc 1 1620 7 view .LVU3553
 13423 000c FFF7FEFF 		bl	get_reg_n
 13424              	.LVL976:
1620:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 13425              		.loc 1 1620 7 view .LVU3554
 13426 0010 8046     		mov	r8, r0
1621:src/xeq.c     **** 
 13427              		.loc 1 1621 7 view .LVU3555
 13428 0012 3046     		mov	r0, r6
 13429              	.LVL977:
1621:src/xeq.c     **** 
 13430              		.loc 1 1621 2 is_stmt 1 view .LVU3556
1621:src/xeq.c     **** 
 13431              		.loc 1 1621 7 is_stmt 0 view .LVU3557
 13432 0014 FFF7FEFF 		bl	get_reg_n
 13433              	.LVL978:
1623:src/xeq.c     **** 		copyreg(t1, StackBase);
 13434              		.loc 1 1623 2 is_stmt 1 view .LVU3558
1623:src/xeq.c     **** 		copyreg(t1, StackBase);
 13435              		.loc 1 1623 5 is_stmt 0 view .LVU3559
 13436 0018 152C     		cmp	r4, #21
 13437 001a 24D0     		beq	.L977
1627:src/xeq.c     **** 			bad_mode_error();
 13438              		.loc 1 1627 3 is_stmt 1 view .LVU3560
1627:src/xeq.c     **** 			bad_mode_error();
 13439              		.loc 1 1627 7 is_stmt 0 view .LVU3561
 13440 001c 284B     		ldr	r3, .L978
 13441 001e 1B68     		ldr	r3, [r3]
 13442 0020 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1627:src/xeq.c     **** 			bad_mode_error();
 13443              		.loc 1 1627 6 view .LVU3562
ARM GAS  /tmp/ccjeMhND.s 			page 391


 13444 0024 13F00103 		ands	r3, r3, #1
 13445 0028 0DD0     		beq	.L970
1628:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
 13446              		.loc 1 1628 4 is_stmt 1 view .LVU3563
 13447              	.LBB2463:
 13448              	.LBI2463:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 13449              		.loc 1 566 6 view .LVU3564
 13450              	.LBE2463:
 567:src/xeq.c     **** }
 13451              		.loc 1 567 2 view .LVU3565
 13452              	.LVL979:
 13453              	.LBB2468:
 13454              	.LBB2464:
 13455              	.LBI2464:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13456              		.loc 1 537 5 view .LVU3566
 13457              	.LBB2465:
 538:src/xeq.c     **** 		Error = e;
 13458              		.loc 1 538 2 view .LVU3567
 538:src/xeq.c     **** 		Error = e;
 13459              		.loc 1 538 12 is_stmt 0 view .LVU3568
 13460 002a 264B     		ldr	r3, .L978+4
 538:src/xeq.c     **** 		Error = e;
 13461              		.loc 1 538 5 view .LVU3569
 13462 002c 1A68     		ldr	r2, [r3]
 13463 002e 0AB9     		cbnz	r2, .L969
 13464              	.LVL980:
 13465              	.LBB2466:
 13466              	.LBI2466:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13467              		.loc 1 537 5 is_stmt 1 view .LVU3570
 13468              	.LBB2467:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13469              		.loc 1 539 3 view .LVU3571
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13470              		.loc 1 539 9 is_stmt 0 view .LVU3572
 13471 0030 0D22     		movs	r2, #13
 13472 0032 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13473              		.loc 1 540 3 is_stmt 1 view .LVU3573
 13474              	.LVL981:
 13475              	.L969:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13476              		.loc 1 540 3 is_stmt 0 view .LVU3574
 13477              	.LBE2467:
 13478              	.LBE2466:
 13479              	.LBE2465:
 13480              	.LBE2464:
 13481              	.LBE2468:
1636:src/xeq.c     **** }
 13482              		.loc 1 1636 2 is_stmt 1 view .LVU3575
 13483              	.LBB2469:
 13484              	.LBI2469:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 13485              		.loc 1 530 13 view .LVU3576
 13486              	.LBB2470:
ARM GAS  /tmp/ccjeMhND.s 			page 392


 531:src/xeq.c     **** }
 13487              		.loc 1 531 2 view .LVU3577
 531:src/xeq.c     **** }
 13488              		.loc 1 531 20 is_stmt 0 view .LVU3578
 13489 0034 244B     		ldr	r3, .L978+8
 13490 0036 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 13491 0038 0121     		movs	r1, #1
 13492 003a 61F38712 		bfi	r2, r1, #6, #2
 13493 003e 1A75     		strb	r2, [r3, #20]
 13494              	.LBE2470:
 13495              	.LBE2469:
1637:src/xeq.c     **** 
 13496              		.loc 1 1637 1 view .LVU3579
 13497 0040 14B0     		add	sp, sp, #80
 13498              		.cfi_remember_state
 13499              		.cfi_def_cfa_offset 24
 13500              		@ sp needed
 13501 0042 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 13502              	.LVL982:
 13503              	.L970:
 13504              		.cfi_restore_state
1629:src/xeq.c     **** 			illegal(op);
 13505              		.loc 1 1629 8 is_stmt 1 view .LVU3580
1629:src/xeq.c     **** 			illegal(op);
 13506              		.loc 1 1629 12 is_stmt 0 view .LVU3581
 13507 0046 153C     		subs	r4, r4, #21
 13508 0048 0093     		str	r3, [sp]
 13509 004a A0B2     		uxth	r0, r4
 13510              	.LVL983:
1629:src/xeq.c     **** 			illegal(op);
 13511              		.loc 1 1629 12 view .LVU3582
 13512 004c 0BAB     		add	r3, sp, #44
 13513 004e 02AA     		add	r2, sp, #8
 13514 0050 2946     		mov	r1, r5
 13515 0052 FFF7FEFF 		bl	storcl_cop
 13516              	.LVL984:
1629:src/xeq.c     **** 			illegal(op);
 13517              		.loc 1 1629 11 view .LVU3583
 13518 0056 50B3     		cbz	r0, .L972
1630:src/xeq.c     **** 		else {
 13519              		.loc 1 1630 4 is_stmt 1 view .LVU3584
1630:src/xeq.c     **** 		else {
 13520              		.loc 1 1630 4 view .LVU3585
 13521              	.LVL985:
 13522              	.LBB2471:
 13523              	.LBI2471:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13524              		.loc 1 537 5 view .LVU3586
 13525              	.LBB2472:
 538:src/xeq.c     **** 		Error = e;
 13526              		.loc 1 538 2 view .LVU3587
 538:src/xeq.c     **** 		Error = e;
 13527              		.loc 1 538 12 is_stmt 0 view .LVU3588
 13528 0058 1A4B     		ldr	r3, .L978+4
 538:src/xeq.c     **** 		Error = e;
 13529              		.loc 1 538 5 view .LVU3589
 13530 005a 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccjeMhND.s 			page 393


 13531 005c 002A     		cmp	r2, #0
 13532 005e E9D1     		bne	.L969
 13533              	.LVL986:
 13534              	.LBB2473:
 13535              	.LBI2473:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13536              		.loc 1 537 5 is_stmt 1 view .LVU3590
 13537              	.LBB2474:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13538              		.loc 1 539 3 view .LVU3591
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13539              		.loc 1 539 9 is_stmt 0 view .LVU3592
 13540 0060 0322     		movs	r2, #3
 13541 0062 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13542              		.loc 1 540 3 is_stmt 1 view .LVU3593
 13543 0064 E6E7     		b	.L969
 13544              	.LVL987:
 13545              	.L977:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13546              		.loc 1 540 3 is_stmt 0 view .LVU3594
 13547              	.LBE2474:
 13548              	.LBE2473:
 13549              	.LBE2472:
 13550              	.LBE2471:
1624:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 13551              		.loc 1 1624 3 is_stmt 1 view .LVU3595
 13552              	.LBB2475:
 13553              	.LBB2476:
 13554              	.LBB2477:
 13555              	.LBB2478:
 933:src/xeq.c     **** }
 13556              		.loc 1 933 24 is_stmt 0 view .LVU3596
 13557 0066 164D     		ldr	r5, .L978
 13558              	.LVL988:
 933:src/xeq.c     **** }
 13559              		.loc 1 933 24 view .LVU3597
 13560              	.LBE2478:
 13561              	.LBE2477:
 13562              	.LBE2476:
 13563              	.LBE2475:
1624:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 13564              		.loc 1 1624 3 view .LVU3598
 13565 0068 184A     		ldr	r2, .L978+12
 13566              	.LVL989:
 13567              	.LBB2484:
 13568              	.LBI2475:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13569              		.loc 1 717 6 is_stmt 1 view .LVU3599
 13570              	.LBB2483:
 718:src/xeq.c     **** }
 13571              		.loc 1 718 2 view .LVU3600
 13572              	.LBB2481:
 13573              	.LBI2477:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13574              		.loc 1 932 5 view .LVU3601
 13575              	.LBB2479:
ARM GAS  /tmp/ccjeMhND.s 			page 394


 933:src/xeq.c     **** }
 13576              		.loc 1 933 2 view .LVU3602
 933:src/xeq.c     **** }
 13577              		.loc 1 933 24 is_stmt 0 view .LVU3603
 13578 006a 2B68     		ldr	r3, [r5]
 13579              	.LBE2479:
 13580              	.LBE2481:
 718:src/xeq.c     **** }
 13581              		.loc 1 718 2 view .LVU3604
 13582 006c 1168     		ldr	r1, [r2]
 13583              	.LBB2482:
 13584              	.LBB2480:
 933:src/xeq.c     **** }
 13585              		.loc 1 933 24 view .LVU3605
 13586 006e B3F8E837 		ldrh	r3, [r3, #2024]
 13587 0072 44F20104 		movw	r4, #16385
 13588              	.LBE2480:
 13589              	.LBE2482:
 718:src/xeq.c     **** }
 13590              		.loc 1 718 2 view .LVU3606
 13591 0076 2340     		ands	r3, r3, r4
 13592 0078 B3F5804F 		cmp	r3, #16384
 13593 007c 0CBF     		ite	eq
 13594 007e 1022     		moveq	r2, #16
 13595              	.LVL990:
 718:src/xeq.c     **** }
 13596              		.loc 1 718 2 view .LVU3607
 13597 0080 0822     		movne	r2, #8
 13598 0082 0746     		mov	r7, r0
 13599 0084 4046     		mov	r0, r8
 13600              	.LVL991:
 718:src/xeq.c     **** }
 13601              		.loc 1 718 2 view .LVU3608
 13602 0086 FFF7FEFF 		bl	xcopy
 13603              	.LVL992:
 718:src/xeq.c     **** }
 13604              		.loc 1 718 2 view .LVU3609
 13605              	.LBE2483:
 13606              	.LBE2484:
1625:src/xeq.c     **** 	} else {
 13607              		.loc 1 1625 3 is_stmt 1 view .LVU3610
1625:src/xeq.c     **** 	} else {
 13608              		.loc 1 1625 15 is_stmt 0 view .LVU3611
 13609 008a 6520     		movs	r0, #101
 13610 008c FFF7FEFF 		bl	get_reg_n
 13611              	.LVL993:
 13612              	.LBB2485:
 13613              	.LBB2486:
 13614              	.LBB2487:
 13615              	.LBB2488:
 933:src/xeq.c     **** }
 13616              		.loc 1 933 24 view .LVU3612
 13617 0090 2B68     		ldr	r3, [r5]
 13618 0092 B3F8E837 		ldrh	r3, [r3, #2024]
 13619              	.LBE2488:
 13620              	.LBE2487:
 718:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 395


 13621              		.loc 1 718 2 view .LVU3613
 13622 0096 1C40     		ands	r4, r4, r3
 13623 0098 B4F5804F 		cmp	r4, #16384
 13624              	.LBE2486:
 13625              	.LBE2485:
1625:src/xeq.c     **** 	} else {
 13626              		.loc 1 1625 15 view .LVU3614
 13627 009c 0146     		mov	r1, r0
 13628              	.LVL994:
 13629              	.LBB2492:
 13630              	.LBI2485:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13631              		.loc 1 717 6 is_stmt 1 view .LVU3615
 13632              	.LBB2491:
 718:src/xeq.c     **** }
 13633              		.loc 1 718 2 view .LVU3616
 13634              	.LBB2490:
 13635              	.LBI2487:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13636              		.loc 1 932 5 view .LVU3617
 13637              	.LBB2489:
 933:src/xeq.c     **** }
 13638              		.loc 1 933 2 view .LVU3618
 13639              	.LBE2489:
 13640              	.LBE2490:
 718:src/xeq.c     **** }
 13641              		.loc 1 718 2 is_stmt 0 view .LVU3619
 13642 009e 08BF     		it	eq
 13643 00a0 1022     		moveq	r2, #16
 13644 00a2 3846     		mov	r0, r7
 13645              	.LVL995:
 718:src/xeq.c     **** }
 13646              		.loc 1 718 2 view .LVU3620
 13647 00a4 18BF     		it	ne
 13648 00a6 0822     		movne	r2, #8
 13649 00a8 FFF7FEFF 		bl	xcopy
 13650              	.LVL996:
 719:src/xeq.c     **** 
 13651              		.loc 1 719 1 view .LVU3621
 13652 00ac C2E7     		b	.L969
 13653              	.LVL997:
 13654              	.L972:
 719:src/xeq.c     **** 
 13655              		.loc 1 719 1 view .LVU3622
 13656              	.LBE2491:
 13657              	.LBE2492:
1632:src/xeq.c     **** 			setRegister(arg + 1, &r2);
 13658              		.loc 1 1632 4 is_stmt 1 view .LVU3623
 13659 00ae 02A9     		add	r1, sp, #8
 13660 00b0 2846     		mov	r0, r5
 13661 00b2 FFF7FEFF 		bl	setRegister
 13662              	.LVL998:
1633:src/xeq.c     **** 		}
 13663              		.loc 1 1633 4 view .LVU3624
 13664 00b6 0BA9     		add	r1, sp, #44
 13665 00b8 3046     		mov	r0, r6
 13666 00ba FFF7FEFF 		bl	setRegister
ARM GAS  /tmp/ccjeMhND.s 			page 396


 13667              	.LVL999:
 13668 00be B9E7     		b	.L969
 13669              	.L979:
 13670              		.align	2
 13671              	.L978:
 13672 00c0 00000000 		.word	main_ram
 13673 00c4 00000000 		.word	Error
 13674 00c8 00000000 		.word	StateWhileOn
 13675 00cc 00000000 		.word	StackBase
 13676              		.cfi_endproc
 13677              	.LFE117:
 13679              		.section	.text.cmdcrcl,"ax",%progbits
 13680              		.align	1
 13681              		.p2align 2,,3
 13682              		.global	cmdcrcl
 13683              		.syntax unified
 13684              		.thumb
 13685              		.thumb_func
 13686              		.fpu fpv4-sp-d16
 13688              	cmdcrcl:
 13689              	.LVL1000:
 13690              	.LFB119:
1662:src/xeq.c     **** 	do_crcl(arg, op);
 13691              		.loc 1 1662 46 view -0
 13692              		.cfi_startproc
 13693              		@ args = 0, pretend = 0, frame = 72
 13694              		@ frame_needed = 0, uses_anonymous_args = 0
1663:src/xeq.c     **** }
 13695              		.loc 1 1663 2 view .LVU3626
1662:src/xeq.c     **** 	do_crcl(arg, op);
 13696              		.loc 1 1662 46 is_stmt 0 view .LVU3627
 13697 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 13698              		.cfi_def_cfa_offset 20
 13699              		.cfi_offset 4, -20
 13700              		.cfi_offset 5, -16
 13701              		.cfi_offset 6, -12
 13702              		.cfi_offset 7, -8
 13703              		.cfi_offset 14, -4
 13704              	.LBB2535:
 13705              	.LBB2536:
1642:src/xeq.c     **** 		REGISTER x, y;
 13706              		.loc 1 1642 5 view .LVU3628
 13707 0002 1A29     		cmp	r1, #26
 13708              	.LBE2536:
 13709              	.LBE2535:
1662:src/xeq.c     **** 	do_crcl(arg, op);
 13710              		.loc 1 1662 46 view .LVU3629
 13711 0004 95B0     		sub	sp, sp, #84
 13712              		.cfi_def_cfa_offset 104
1662:src/xeq.c     **** 	do_crcl(arg, op);
 13713              		.loc 1 1662 46 view .LVU3630
 13714 0006 0446     		mov	r4, r0
 13715              	.LVL1001:
 13716              	.LBB2613:
 13717              	.LBI2535:
1639:src/xeq.c     **** 	decNumber r1, r2;
 13718              		.loc 1 1639 13 is_stmt 1 view .LVU3631
ARM GAS  /tmp/ccjeMhND.s 			page 397


 13719              	.LBB2610:
1640:src/xeq.c     **** 
 13720              		.loc 1 1640 2 view .LVU3632
1642:src/xeq.c     **** 		REGISTER x, y;
 13721              		.loc 1 1642 2 view .LVU3633
1642:src/xeq.c     **** 		REGISTER x, y;
 13722              		.loc 1 1642 5 is_stmt 0 view .LVU3634
 13723 0008 27D0     		beq	.L1003
1650:src/xeq.c     **** 			bad_mode_error();
 13724              		.loc 1 1650 3 is_stmt 1 view .LVU3635
1650:src/xeq.c     **** 			bad_mode_error();
 13725              		.loc 1 1650 7 is_stmt 0 view .LVU3636
 13726 000a 3F4B     		ldr	r3, .L1005
 13727 000c 1B68     		ldr	r3, [r3]
 13728 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1650:src/xeq.c     **** 			bad_mode_error();
 13729              		.loc 1 1650 6 view .LVU3637
 13730 0012 DB07     		lsls	r3, r3, #31
 13731 0014 0ED5     		bpl	.L988
1651:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
 13732              		.loc 1 1651 4 is_stmt 1 view .LVU3638
 13733              	.LBB2537:
 13734              	.LBI2537:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 13735              		.loc 1 566 6 view .LVU3639
 13736              	.LBE2537:
 13737              	.LBE2610:
 13738              	.LBE2613:
 567:src/xeq.c     **** }
 13739              		.loc 1 567 2 view .LVU3640
 13740              	.LVL1002:
 13741              	.LBB2614:
 13742              	.LBB2611:
 13743              	.LBB2544:
 13744              	.LBB2538:
 13745              	.LBI2538:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13746              		.loc 1 537 5 view .LVU3641
 13747              	.LBB2539:
 538:src/xeq.c     **** 		Error = e;
 13748              		.loc 1 538 2 view .LVU3642
 538:src/xeq.c     **** 		Error = e;
 13749              		.loc 1 538 12 is_stmt 0 view .LVU3643
 13750 0016 3D4B     		ldr	r3, .L1005+4
 538:src/xeq.c     **** 		Error = e;
 13751              		.loc 1 538 5 view .LVU3644
 13752 0018 1A68     		ldr	r2, [r3]
 13753 001a 3AB1     		cbz	r2, .L989
 13754              	.LVL1003:
 13755              	.L1002:
 538:src/xeq.c     **** 		Error = e;
 13756              		.loc 1 538 5 view .LVU3645
 13757 001c 3C4D     		ldr	r5, .L1005+8
 13758              	.LVL1004:
 13759              	.L987:
 538:src/xeq.c     **** 		Error = e;
 13760              		.loc 1 538 5 view .LVU3646
ARM GAS  /tmp/ccjeMhND.s 			page 398


 13761              	.LBE2539:
 13762              	.LBE2538:
 13763              	.LBE2544:
1659:src/xeq.c     **** }
 13764              		.loc 1 1659 2 is_stmt 1 view .LVU3647
 13765              	.LBB2545:
 13766              	.LBI2545:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 13767              		.loc 1 530 13 view .LVU3648
 13768              	.LBB2546:
 531:src/xeq.c     **** }
 13769              		.loc 1 531 2 view .LVU3649
 531:src/xeq.c     **** }
 13770              		.loc 1 531 20 is_stmt 0 view .LVU3650
 13771 001e 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 13772 0020 0122     		movs	r2, #1
 13773 0022 62F38713 		bfi	r3, r2, #6, #2
 13774 0026 2B75     		strb	r3, [r5, #20]
 13775              	.LVL1005:
 531:src/xeq.c     **** }
 13776              		.loc 1 531 20 view .LVU3651
 13777              	.LBE2546:
 13778              	.LBE2545:
 13779              	.LBE2611:
 13780              	.LBE2614:
1664:src/xeq.c     **** 
 13781              		.loc 1 1664 1 view .LVU3652
 13782 0028 15B0     		add	sp, sp, #84
 13783              		.cfi_remember_state
 13784              		.cfi_def_cfa_offset 20
 13785              		@ sp needed
 13786 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 13787              	.LVL1006:
 13788              	.L989:
 13789              		.cfi_restore_state
 13790              	.LBB2615:
 13791              	.LBB2612:
 13792              	.LBB2547:
 13793              	.LBB2543:
 13794              	.LBB2542:
 13795              	.LBB2540:
 13796              	.LBI2540:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13797              		.loc 1 537 5 is_stmt 1 view .LVU3653
 13798              	.LBB2541:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13799              		.loc 1 539 3 view .LVU3654
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13800              		.loc 1 539 9 is_stmt 0 view .LVU3655
 13801 002c 0D22     		movs	r2, #13
 13802 002e 384D     		ldr	r5, .L1005+8
 13803 0030 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13804              		.loc 1 540 3 is_stmt 1 view .LVU3656
 13805 0032 F4E7     		b	.L987
 13806              	.LVL1007:
 13807              	.L988:
ARM GAS  /tmp/ccjeMhND.s 			page 399


 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13808              		.loc 1 540 3 is_stmt 0 view .LVU3657
 13809              	.LBE2541:
 13810              	.LBE2540:
 13811              	.LBE2542:
 13812              	.LBE2543:
 13813              	.LBE2547:
1652:src/xeq.c     **** 			illegal(op);
 13814              		.loc 1 1652 8 is_stmt 1 view .LVU3658
1652:src/xeq.c     **** 			illegal(op);
 13815              		.loc 1 1652 12 is_stmt 0 view .LVU3659
 13816 0034 1A39     		subs	r1, r1, #26
 13817              	.LVL1008:
1652:src/xeq.c     **** 			illegal(op);
 13818              		.loc 1 1652 12 view .LVU3660
 13819 0036 0125     		movs	r5, #1
 13820 0038 88B2     		uxth	r0, r1
 13821              	.LVL1009:
1652:src/xeq.c     **** 			illegal(op);
 13822              		.loc 1 1652 12 view .LVU3661
 13823 003a 0BAB     		add	r3, sp, #44
 13824 003c 2146     		mov	r1, r4
 13825 003e 02AA     		add	r2, sp, #8
 13826 0040 0095     		str	r5, [sp]
 13827 0042 FFF7FEFF 		bl	storcl_cop
 13828              	.LVL1010:
1652:src/xeq.c     **** 			illegal(op);
 13829              		.loc 1 1652 11 view .LVU3662
 13830 0046 0028     		cmp	r0, #0
 13831 0048 4FD0     		beq	.L990
1653:src/xeq.c     **** 		else {
 13832              		.loc 1 1653 4 is_stmt 1 view .LVU3663
1653:src/xeq.c     **** 		else {
 13833              		.loc 1 1653 4 view .LVU3664
 13834              	.LVL1011:
 13835              	.LBB2548:
 13836              	.LBI2548:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13837              		.loc 1 537 5 view .LVU3665
 13838              	.LBB2549:
 538:src/xeq.c     **** 		Error = e;
 13839              		.loc 1 538 2 view .LVU3666
 538:src/xeq.c     **** 		Error = e;
 13840              		.loc 1 538 12 is_stmt 0 view .LVU3667
 13841 004a 304B     		ldr	r3, .L1005+4
 538:src/xeq.c     **** 		Error = e;
 13842              		.loc 1 538 5 view .LVU3668
 13843 004c 1A68     		ldr	r2, [r3]
 13844 004e 002A     		cmp	r2, #0
 13845 0050 E4D1     		bne	.L1002
 13846              	.LVL1012:
 13847              	.LBB2550:
 13848              	.LBI2550:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13849              		.loc 1 537 5 is_stmt 1 view .LVU3669
 13850              	.LBB2551:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/ccjeMhND.s 			page 400


 13851              		.loc 1 539 3 view .LVU3670
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13852              		.loc 1 539 9 is_stmt 0 view .LVU3671
 13853 0052 0322     		movs	r2, #3
 13854 0054 2E4D     		ldr	r5, .L1005+8
 13855 0056 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13856              		.loc 1 540 3 is_stmt 1 view .LVU3672
 13857 0058 E1E7     		b	.L987
 13858              	.LVL1013:
 13859              	.L1003:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13860              		.loc 1 540 3 is_stmt 0 view .LVU3673
 13861              	.LBE2551:
 13862              	.LBE2550:
 13863              	.LBE2549:
 13864              	.LBE2548:
 13865              	.LBB2552:
1643:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
 13866              		.loc 1 1643 3 is_stmt 1 view .LVU3674
1644:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 13867              		.loc 1 1644 3 view .LVU3675
 13868              	.LBB2553:
 13869              	.LBB2554:
 13870              	.LBB2555:
 13871              	.LBB2556:
 933:src/xeq.c     **** }
 13872              		.loc 1 933 24 is_stmt 0 view .LVU3676
 13873 005a 2B4E     		ldr	r6, .L1005
 13874              	.LBE2556:
 13875              	.LBE2555:
 13876              	.LBE2554:
 13877              	.LBE2553:
 13878              	.LBB2563:
 13879              	.LBB2564:
 13880              	.LBB2565:
 13881              	.LBB2566:
 13882              	.LBB2567:
 13883              	.LBB2568:
 735:src/xeq.c     **** }
 13884              		.loc 1 735 15 view .LVU3677
 13885 005c 2C4D     		ldr	r5, .L1005+8
 13886              	.LBE2568:
 13887              	.LBE2567:
 13888              	.LBE2566:
 13889              	.LBE2565:
 13890              	.LBE2564:
 13891              	.LBE2563:
1644:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 13892              		.loc 1 1644 15 view .LVU3678
 13893 005e FFF7FEFF 		bl	get_reg_n
 13894              	.LVL1014:
 13895              	.LBB2577:
 13896              	.LBB2561:
 13897              	.LBB2559:
 13898              	.LBB2557:
 933:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 401


 13899              		.loc 1 933 24 view .LVU3679
 13900 0062 3368     		ldr	r3, [r6]
 13901 0064 B3F8E837 		ldrh	r3, [r3, #2024]
 13902 0068 44F20107 		movw	r7, #16385
 13903              	.LBE2557:
 13904              	.LBE2559:
 718:src/xeq.c     **** }
 13905              		.loc 1 718 2 view .LVU3680
 13906 006c 3B40     		ands	r3, r3, r7
 13907 006e B3F5804F 		cmp	r3, #16384
 13908 0072 0CBF     		ite	eq
 13909 0074 1022     		moveq	r2, #16
 13910 0076 0822     		movne	r2, #8
 13911              	.LBE2561:
 13912              	.LBE2577:
1644:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 13913              		.loc 1 1644 15 view .LVU3681
 13914 0078 0146     		mov	r1, r0
 13915              	.LVL1015:
 13916              	.LBB2578:
 13917              	.LBI2553:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13918              		.loc 1 717 6 is_stmt 1 view .LVU3682
 13919              	.LBB2562:
 718:src/xeq.c     **** }
 13920              		.loc 1 718 2 view .LVU3683
 13921              	.LBB2560:
 13922              	.LBI2555:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13923              		.loc 1 932 5 view .LVU3684
 13924              	.LBB2558:
 933:src/xeq.c     **** }
 13925              		.loc 1 933 2 view .LVU3685
 13926              	.LBE2558:
 13927              	.LBE2560:
 718:src/xeq.c     **** }
 13928              		.loc 1 718 2 is_stmt 0 view .LVU3686
 13929 007a 02A8     		add	r0, sp, #8
 13930              	.LVL1016:
 718:src/xeq.c     **** }
 13931              		.loc 1 718 2 view .LVU3687
 13932 007c FFF7FEFF 		bl	xcopy
 13933              	.LVL1017:
 718:src/xeq.c     **** }
 13934              		.loc 1 718 2 view .LVU3688
 13935              	.LBE2562:
 13936              	.LBE2578:
1645:src/xeq.c     **** 		lift2_if_enabled();
 13937              		.loc 1 1645 3 is_stmt 1 view .LVU3689
1645:src/xeq.c     **** 		lift2_if_enabled();
 13938              		.loc 1 1645 15 is_stmt 0 view .LVU3690
 13939 0080 601C     		adds	r0, r4, #1
 13940 0082 FFF7FEFF 		bl	get_reg_n
 13941              	.LVL1018:
 13942              	.LBB2579:
 13943              	.LBB2580:
 13944              	.LBB2581:
ARM GAS  /tmp/ccjeMhND.s 			page 402


 13945              	.LBB2582:
 933:src/xeq.c     **** }
 13946              		.loc 1 933 24 view .LVU3691
 13947 0086 3368     		ldr	r3, [r6]
 13948 0088 B3F8E837 		ldrh	r3, [r3, #2024]
 13949              	.LBE2582:
 13950              	.LBE2581:
 718:src/xeq.c     **** }
 13951              		.loc 1 718 2 view .LVU3692
 13952 008c 1F40     		ands	r7, r7, r3
 13953 008e B7F5804F 		cmp	r7, #16384
 13954              	.LBE2580:
 13955              	.LBE2579:
1645:src/xeq.c     **** 		lift2_if_enabled();
 13956              		.loc 1 1645 15 view .LVU3693
 13957 0092 0146     		mov	r1, r0
 13958              	.LVL1019:
 13959              	.LBB2586:
 13960              	.LBI2579:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13961              		.loc 1 717 6 is_stmt 1 view .LVU3694
 13962              	.LBB2585:
 718:src/xeq.c     **** }
 13963              		.loc 1 718 2 view .LVU3695
 13964              	.LBB2584:
 13965              	.LBI2581:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13966              		.loc 1 932 5 view .LVU3696
 13967              	.LBB2583:
 933:src/xeq.c     **** }
 13968              		.loc 1 933 2 view .LVU3697
 13969              	.LBE2583:
 13970              	.LBE2584:
 718:src/xeq.c     **** }
 13971              		.loc 1 718 2 is_stmt 0 view .LVU3698
 13972 0094 0CBF     		ite	eq
 13973 0096 1022     		moveq	r2, #16
 13974 0098 0822     		movne	r2, #8
 13975 009a 0BA8     		add	r0, sp, #44
 13976              	.LVL1020:
 718:src/xeq.c     **** }
 13977              		.loc 1 718 2 view .LVU3699
 13978 009c FFF7FEFF 		bl	xcopy
 13979              	.LVL1021:
 718:src/xeq.c     **** }
 13980              		.loc 1 718 2 view .LVU3700
 13981              	.LBE2585:
 13982              	.LBE2586:
1646:src/xeq.c     **** 		copyreg(StackBase, &x);
 13983              		.loc 1 1646 3 is_stmt 1 view .LVU3701
 13984              	.LBB2587:
 13985              	.LBI2563:
 743:src/xeq.c     **** 	lift_if_enabled();
 13986              		.loc 1 743 13 view .LVU3702
 13987              	.LBB2575:
 744:src/xeq.c     **** 	lift();
 13988              		.loc 1 744 2 view .LVU3703
ARM GAS  /tmp/ccjeMhND.s 			page 403


 13989              	.LBB2573:
 13990              	.LBI2565:
 738:src/xeq.c     **** 	if (get_lift())
 13991              		.loc 1 738 6 view .LVU3704
 13992              	.LBB2571:
 739:src/xeq.c     **** 		lift();
 13993              		.loc 1 739 2 view .LVU3705
 13994              	.LBB2570:
 13995              	.LBI2567:
 734:src/xeq.c     **** 	return State2.state_lift;
 13996              		.loc 1 734 12 view .LVU3706
 13997              	.LBB2569:
 735:src/xeq.c     **** }
 13998              		.loc 1 735 2 view .LVU3707
 735:src/xeq.c     **** }
 13999              		.loc 1 735 15 is_stmt 0 view .LVU3708
 14000 00a0 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 14001              	.LBE2569:
 14002              	.LBE2570:
 739:src/xeq.c     **** 		lift();
 14003              		.loc 1 739 5 view .LVU3709
 14004 00a2 5A06     		lsls	r2, r3, #25
 14005 00a4 2CD4     		bmi	.L1004
 14006              	.L984:
 14007              	.LBE2571:
 14008              	.LBE2573:
 745:src/xeq.c     **** }
 14009              		.loc 1 745 2 is_stmt 1 view .LVU3710
 14010 00a6 FFF7FEFF 		bl	lift
 14011              	.LVL1022:
 14012              	.LBE2575:
 14013              	.LBE2587:
1647:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 14014              		.loc 1 1647 3 view .LVU3711
 14015              	.LBB2588:
 14016              	.LBB2589:
 14017              	.LBB2590:
 14018              	.LBB2591:
 933:src/xeq.c     **** }
 14019              		.loc 1 933 24 is_stmt 0 view .LVU3712
 14020 00aa 3368     		ldr	r3, [r6]
 14021              	.LBE2591:
 14022              	.LBE2590:
 14023              	.LBE2589:
 14024              	.LBE2588:
1647:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 14025              		.loc 1 1647 3 view .LVU3713
 14026 00ac 194A     		ldr	r2, .L1005+12
 14027              	.LVL1023:
 14028              	.LBB2597:
 14029              	.LBI2588:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14030              		.loc 1 717 6 is_stmt 1 view .LVU3714
 14031              	.LBB2596:
 718:src/xeq.c     **** }
 14032              		.loc 1 718 2 view .LVU3715
 14033              	.LBB2594:
ARM GAS  /tmp/ccjeMhND.s 			page 404


 14034              	.LBI2590:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14035              		.loc 1 932 5 view .LVU3716
 14036              	.LBB2592:
 933:src/xeq.c     **** }
 14037              		.loc 1 933 2 view .LVU3717
 933:src/xeq.c     **** }
 14038              		.loc 1 933 24 is_stmt 0 view .LVU3718
 14039 00ae B3F8E837 		ldrh	r3, [r3, #2024]
 14040              	.LBE2592:
 14041              	.LBE2594:
 718:src/xeq.c     **** }
 14042              		.loc 1 718 2 view .LVU3719
 14043 00b2 1068     		ldr	r0, [r2]
 14044              	.LBB2595:
 14045              	.LBB2593:
 933:src/xeq.c     **** }
 14046              		.loc 1 933 24 view .LVU3720
 14047 00b4 44F20104 		movw	r4, #16385
 14048              	.LVL1024:
 933:src/xeq.c     **** }
 14049              		.loc 1 933 24 view .LVU3721
 14050              	.LBE2593:
 14051              	.LBE2595:
 718:src/xeq.c     **** }
 14052              		.loc 1 718 2 view .LVU3722
 14053 00b8 2340     		ands	r3, r3, r4
 14054 00ba B3F5804F 		cmp	r3, #16384
 14055 00be 0CBF     		ite	eq
 14056 00c0 1022     		moveq	r2, #16
 14057              	.LVL1025:
 718:src/xeq.c     **** }
 14058              		.loc 1 718 2 view .LVU3723
 14059 00c2 0822     		movne	r2, #8
 14060 00c4 02A9     		add	r1, sp, #8
 14061              	.LVL1026:
 718:src/xeq.c     **** }
 14062              		.loc 1 718 2 view .LVU3724
 14063 00c6 FFF7FEFF 		bl	xcopy
 14064              	.LVL1027:
 718:src/xeq.c     **** }
 14065              		.loc 1 718 2 view .LVU3725
 14066              	.LBE2596:
 14067              	.LBE2597:
1648:src/xeq.c     **** 	} else {
 14068              		.loc 1 1648 3 is_stmt 1 view .LVU3726
 14069 00ca 6520     		movs	r0, #101
 14070 00cc FFF7FEFF 		bl	get_reg_n
 14071              	.LVL1028:
 14072              	.LBB2598:
 14073              	.LBI2598:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14074              		.loc 1 717 6 view .LVU3727
 14075              	.LBB2599:
 718:src/xeq.c     **** }
 14076              		.loc 1 718 2 view .LVU3728
 14077              	.LBB2600:
ARM GAS  /tmp/ccjeMhND.s 			page 405


 14078              	.LBI2600:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14079              		.loc 1 932 5 view .LVU3729
 14080              	.LBB2601:
 933:src/xeq.c     **** }
 14081              		.loc 1 933 2 view .LVU3730
 933:src/xeq.c     **** }
 14082              		.loc 1 933 24 is_stmt 0 view .LVU3731
 14083 00d0 3368     		ldr	r3, [r6]
 14084 00d2 B3F8E837 		ldrh	r3, [r3, #2024]
 14085              	.LBE2601:
 14086              	.LBE2600:
 718:src/xeq.c     **** }
 14087              		.loc 1 718 2 view .LVU3732
 14088 00d6 1C40     		ands	r4, r4, r3
 14089 00d8 B4F5804F 		cmp	r4, #16384
 14090 00dc 0BA9     		add	r1, sp, #44
 14091              	.LVL1029:
 718:src/xeq.c     **** }
 14092              		.loc 1 718 2 view .LVU3733
 14093 00de 0CBF     		ite	eq
 14094 00e0 1022     		moveq	r2, #16
 14095 00e2 0822     		movne	r2, #8
 14096 00e4 FFF7FEFF 		bl	xcopy
 14097              	.LVL1030:
 718:src/xeq.c     **** }
 14098              		.loc 1 718 2 view .LVU3734
 14099              	.LBE2599:
 14100              	.LBE2598:
 14101              	.LBE2552:
 14102 00e8 99E7     		b	.L987
 14103              	.LVL1031:
 14104              	.L990:
1655:src/xeq.c     **** 			setXY(&r1, &r2);
 14105              		.loc 1 1655 4 is_stmt 1 view .LVU3735
 14106 00ea FFF7FEFF 		bl	setlastXY
 14107              	.LVL1032:
1656:src/xeq.c     **** 		}
 14108              		.loc 1 1656 4 view .LVU3736
 14109              	.LBB2603:
 14110              	.LBI2603:
 840:src/xeq.c     **** 	setX(x);
 14111              		.loc 1 840 6 view .LVU3737
 14112              	.LBB2604:
 841:src/xeq.c     **** 	setY(y);
 14113              		.loc 1 841 2 view .LVU3738
 14114              	.LBB2605:
 14115              	.LBI2605:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 14116              		.loc 1 809 6 view .LVU3739
 14117              	.LBB2606:
 810:src/xeq.c     **** }
 14118              		.loc 1 810 2 view .LVU3740
 14119 00ee 02A9     		add	r1, sp, #8
 14120              	.LVL1033:
 810:src/xeq.c     **** }
 14121              		.loc 1 810 2 is_stmt 0 view .LVU3741
ARM GAS  /tmp/ccjeMhND.s 			page 406


 14122 00f0 6420     		movs	r0, #100
 14123 00f2 FFF7FEFF 		bl	setRegister
 14124              	.LVL1034:
 810:src/xeq.c     **** }
 14125              		.loc 1 810 2 view .LVU3742
 14126              	.LBE2606:
 14127              	.LBE2605:
 842:src/xeq.c     **** }
 14128              		.loc 1 842 2 is_stmt 1 view .LVU3743
 14129              	.LBB2607:
 14130              	.LBI2607:
 817:src/xeq.c     **** 	setRegister(regY_idx, y);
 14131              		.loc 1 817 6 view .LVU3744
 14132              	.LBB2608:
 818:src/xeq.c     **** }
 14133              		.loc 1 818 2 view .LVU3745
 14134 00f6 0BA9     		add	r1, sp, #44
 14135              	.LVL1035:
 818:src/xeq.c     **** }
 14136              		.loc 1 818 2 is_stmt 0 view .LVU3746
 14137 00f8 6520     		movs	r0, #101
 14138 00fa FFF7FEFF 		bl	setRegister
 14139              	.LVL1036:
 818:src/xeq.c     **** }
 14140              		.loc 1 818 2 view .LVU3747
 14141 00fe 8DE7     		b	.L1002
 14142              	.LVL1037:
 14143              	.L1004:
 818:src/xeq.c     **** }
 14144              		.loc 1 818 2 view .LVU3748
 14145              	.LBE2608:
 14146              	.LBE2607:
 14147              	.LBE2604:
 14148              	.LBE2603:
 14149              	.LBB2609:
 14150              	.LBB2602:
 14151              	.LBB2576:
 14152              	.LBB2574:
 14153              	.LBB2572:
 740:src/xeq.c     **** }
 14154              		.loc 1 740 3 is_stmt 1 view .LVU3749
 14155 0100 FFF7FEFF 		bl	lift
 14156              	.LVL1038:
 14157 0104 CFE7     		b	.L984
 14158              	.L1006:
 14159 0106 00BF     		.align	2
 14160              	.L1005:
 14161 0108 00000000 		.word	main_ram
 14162 010c 00000000 		.word	Error
 14163 0110 00000000 		.word	StateWhileOn
 14164 0114 00000000 		.word	StackBase
 14165              	.LBE2572:
 14166              	.LBE2574:
 14167              	.LBE2576:
 14168              	.LBE2602:
 14169              	.LBE2609:
 14170              	.LBE2612:
ARM GAS  /tmp/ccjeMhND.s 			page 407


 14171              	.LBE2615:
 14172              		.cfi_endproc
 14173              	.LFE119:
 14175              		.section	.text.cmdircl,"ax",%progbits
 14176              		.align	1
 14177              		.p2align 2,,3
 14178              		.global	cmdircl
 14179              		.syntax unified
 14180              		.thumb
 14181              		.thumb_func
 14182              		.fpu fpv4-sp-d16
 14184              	cmdircl:
 14185              	.LVL1039:
 14186              	.LFB120:
1676:src/xeq.c     **** 	if (is_intmode())
 14187              		.loc 1 1676 46 view -0
 14188              		.cfi_startproc
 14189              		@ args = 0, pretend = 0, frame = 0
 14190              		@ frame_needed = 0, uses_anonymous_args = 0
 14191              		@ link register save eliminated.
1677:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 14192              		.loc 1 1677 2 view .LVU3751
1677:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 14193              		.loc 1 1677 6 is_stmt 0 view .LVU3752
 14194 0000 064B     		ldr	r3, .L1009
 14195 0002 1B68     		ldr	r3, [r3]
 14196 0004 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1677:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 14197              		.loc 1 1677 5 view .LVU3753
 14198 0008 12F00102 		ands	r2, r2, #1
1676:src/xeq.c     **** 	if (is_intmode())
 14199              		.loc 1 1676 46 view .LVU3754
 14200 000c 0146     		mov	r1, r0
 14201              	.LVL1040:
1677:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 14202              		.loc 1 1677 5 view .LVU3755
 14203 000e 02D0     		beq	.L1008
1678:src/xeq.c     **** 	else
 14204              		.loc 1 1678 3 is_stmt 1 view .LVU3756
 14205              	.LVL1041:
 14206              	.LBB2616:
 14207              	.LBI2616:
1571:src/xeq.c     **** 	do_rcl(arg, op);
 14208              		.loc 1 1571 6 view .LVU3757
 14209              	.LBB2617:
1572:src/xeq.c     **** }
 14210              		.loc 1 1572 2 view .LVU3758
 14211 0010 0A21     		movs	r1, #10
 14212 0012 FFF7FEBF 		b	do_rcl
 14213              	.LVL1042:
 14214              	.L1008:
1572:src/xeq.c     **** }
 14215              		.loc 1 1572 2 is_stmt 0 view .LVU3759
 14216              	.LBE2617:
 14217              	.LBE2616:
1680:src/xeq.c     **** }
 14218              		.loc 1 1680 3 is_stmt 1 view .LVU3760
ARM GAS  /tmp/ccjeMhND.s 			page 408


 14219 0016 6420     		movs	r0, #100
 14220              	.LVL1043:
1680:src/xeq.c     **** }
 14221              		.loc 1 1680 3 is_stmt 0 view .LVU3761
 14222 0018 FFF7FEBF 		b	register_from_int
 14223              	.LVL1044:
 14224              	.L1010:
1680:src/xeq.c     **** }
 14225              		.loc 1 1680 3 view .LVU3762
 14226              		.align	2
 14227              	.L1009:
 14228 001c 00000000 		.word	main_ram
 14229              		.cfi_endproc
 14230              	.LFE120:
 14232              		.section	.text.cmdrrcl,"ax",%progbits
 14233              		.align	1
 14234              		.p2align 2,,3
 14235              		.global	cmdrrcl
 14236              		.syntax unified
 14237              		.thumb
 14238              		.thumb_func
 14239              		.fpu fpv4-sp-d16
 14241              	cmdrrcl:
 14242              	.LVL1045:
 14243              	.LFB121:
1684:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 14244              		.loc 1 1684 46 is_stmt 1 view -0
 14245              		.cfi_startproc
 14246              		@ args = 0, pretend = 0, frame = 40
 14247              		@ frame_needed = 0, uses_anonymous_args = 0
1685:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 14248              		.loc 1 1685 2 view .LVU3764
1684:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 14249              		.loc 1 1684 46 is_stmt 0 view .LVU3765
 14250 0000 70B5     		push	{r4, r5, r6, lr}
 14251              		.cfi_def_cfa_offset 16
 14252              		.cfi_offset 4, -16
 14253              		.cfi_offset 5, -12
 14254              		.cfi_offset 6, -8
 14255              		.cfi_offset 14, -4
1685:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 14256              		.loc 1 1685 22 view .LVU3766
 14257 0002 1F4C     		ldr	r4, .L1018
 14258 0004 2368     		ldr	r3, [r4]
1685:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 14259              		.loc 1 1685 28 view .LVU3767
 14260 0006 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1686:src/xeq.c     **** 
 14261              		.loc 1 1686 26 view .LVU3768
 14262 000a 8029     		cmp	r1, #128
1684:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 14263              		.loc 1 1684 46 view .LVU3769
 14264 000c 8AB0     		sub	sp, sp, #40
 14265              		.cfi_def_cfa_offset 56
1685:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 14266              		.loc 1 1685 28 view .LVU3770
 14267 000e C2F38015 		ubfx	r5, r2, #6, #1
ARM GAS  /tmp/ccjeMhND.s 			page 409


 14268              	.LVL1046:
1686:src/xeq.c     **** 
 14269              		.loc 1 1686 2 is_stmt 1 view .LVU3771
1686:src/xeq.c     **** 
 14270              		.loc 1 1686 26 is_stmt 0 view .LVU3772
 14271 0012 0CBF     		ite	eq
 14272 0014 0121     		moveq	r1, #1
 14273              	.LVL1047:
1686:src/xeq.c     **** 
 14274              		.loc 1 1686 26 view .LVU3773
 14275 0016 0021     		movne	r1, #0
 14276              	.LVL1048:
1688:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 14277              		.loc 1 1688 2 is_stmt 1 view .LVU3774
1688:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 14278              		.loc 1 1688 5 is_stmt 0 view .LVU3775
 14279 0018 26D0     		beq	.L1016
 14280              	.LVL1049:
 14281              	.L1012:
1694:src/xeq.c     **** 	if (is_intmode()) {
 14282              		.loc 1 1694 2 is_stmt 1 view .LVU3776
1694:src/xeq.c     **** 	if (is_intmode()) {
 14283              		.loc 1 1694 21 is_stmt 0 view .LVU3777
 14284 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1695:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 14285              		.loc 1 1695 6 view .LVU3778
 14286 001e 93F8E867 		ldrb	r6, [r3, #2024]	@ zero_extendqisi2
1694:src/xeq.c     **** 	if (is_intmode()) {
 14287              		.loc 1 1694 21 view .LVU3779
 14288 0022 61F38612 		bfi	r2, r1, #6, #1
 14289 0026 83F8E927 		strb	r2, [r3, #2025]
 14290              	.LVL1050:
1695:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 14291              		.loc 1 1695 2 is_stmt 1 view .LVU3780
1695:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 14292              		.loc 1 1695 5 is_stmt 0 view .LVU3781
 14293 002a F307     		lsls	r3, r6, #31
1696:src/xeq.c     **** 		UState.mode_double = was_dbl;
 14294              		.loc 1 1696 3 view .LVU3782
 14295 002c 0146     		mov	r1, r0
 14296              	.LVL1051:
1695:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 14297              		.loc 1 1695 5 view .LVU3783
 14298 002e 0FD4     		bmi	.L1017
 14299              	.LBB2625:
1700:src/xeq.c     **** 		getRegister(&x, arg);
 14300              		.loc 1 1700 3 is_stmt 1 view .LVU3784
1701:src/xeq.c     **** 
 14301              		.loc 1 1701 3 view .LVU3785
 14302 0030 01A8     		add	r0, sp, #4
 14303              	.LVL1052:
1701:src/xeq.c     **** 
 14304              		.loc 1 1701 3 is_stmt 0 view .LVU3786
 14305 0032 FFF7FEFF 		bl	getRegister
 14306              	.LVL1053:
1703:src/xeq.c     **** 		setX(&x);
 14307              		.loc 1 1703 3 is_stmt 1 view .LVU3787
ARM GAS  /tmp/ccjeMhND.s 			page 410


1703:src/xeq.c     **** 		setX(&x);
 14308              		.loc 1 1703 22 is_stmt 0 view .LVU3788
 14309 0036 2368     		ldr	r3, [r4]
 14310 0038 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 14311 003c 65F38612 		bfi	r2, r5, #6, #1
 14312              	.LBB2626:
 14313              	.LBB2627:
 810:src/xeq.c     **** }
 14314              		.loc 1 810 2 view .LVU3789
 14315 0040 01A9     		add	r1, sp, #4
 14316              	.LBE2627:
 14317              	.LBE2626:
1703:src/xeq.c     **** 		setX(&x);
 14318              		.loc 1 1703 22 view .LVU3790
 14319 0042 83F8E927 		strb	r2, [r3, #2025]
1704:src/xeq.c     **** 	}
 14320              		.loc 1 1704 3 is_stmt 1 view .LVU3791
 14321              	.LVL1054:
 14322              	.LBB2629:
 14323              	.LBI2626:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 14324              		.loc 1 809 6 view .LVU3792
 14325              	.LBB2628:
 810:src/xeq.c     **** }
 14326              		.loc 1 810 2 view .LVU3793
 14327 0046 6420     		movs	r0, #100
 14328 0048 FFF7FEFF 		bl	setRegister
 14329              	.LVL1055:
 14330              	.L1011:
 810:src/xeq.c     **** }
 14331              		.loc 1 810 2 is_stmt 0 view .LVU3794
 14332              	.LBE2628:
 14333              	.LBE2629:
 14334              	.LBE2625:
1706:src/xeq.c     **** 
 14335              		.loc 1 1706 1 view .LVU3795
 14336 004c 0AB0     		add	sp, sp, #40
 14337              		.cfi_remember_state
 14338              		.cfi_def_cfa_offset 16
 14339              		@ sp needed
 14340 004e 70BD     		pop	{r4, r5, r6, pc}
 14341              	.LVL1056:
 14342              	.L1017:
 14343              		.cfi_restore_state
1696:src/xeq.c     **** 		UState.mode_double = was_dbl;
 14344              		.loc 1 1696 3 is_stmt 1 view .LVU3796
 14345 0050 6420     		movs	r0, #100
 14346              	.LVL1057:
1696:src/xeq.c     **** 		UState.mode_double = was_dbl;
 14347              		.loc 1 1696 3 is_stmt 0 view .LVU3797
 14348 0052 FFF7FEFF 		bl	int_from_register
 14349              	.LVL1058:
1697:src/xeq.c     **** 	}
 14350              		.loc 1 1697 3 is_stmt 1 view .LVU3798
1697:src/xeq.c     **** 	}
 14351              		.loc 1 1697 22 is_stmt 0 view .LVU3799
 14352 0056 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccjeMhND.s 			page 411


 14353 0058 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 14354 005c 65F38612 		bfi	r2, r5, #6, #1
 14355 0060 83F8E927 		strb	r2, [r3, #2025]
1706:src/xeq.c     **** 
 14356              		.loc 1 1706 1 view .LVU3800
 14357 0064 0AB0     		add	sp, sp, #40
 14358              		.cfi_remember_state
 14359              		.cfi_def_cfa_offset 16
 14360              		@ sp needed
 14361 0066 70BD     		pop	{r4, r5, r6, pc}
 14362              	.LVL1059:
 14363              	.L1016:
 14364              		.cfi_restore_state
1688:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 14365              		.loc 1 1688 14 discriminator 1 view .LVU3801
 14366 0068 A0F16402 		sub	r2, r0, #100
 14367              	.LVL1060:
1688:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 14368              		.loc 1 1688 14 discriminator 1 view .LVU3802
 14369 006c 0B2A     		cmp	r2, #11
 14370 006e D4D8     		bhi	.L1012
1690:src/xeq.c     **** 		return;
 14371              		.loc 1 1690 3 is_stmt 1 view .LVU3803
 14372              	.LVL1061:
 14373              	.LBB2630:
 14374              	.LBI2630:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14375              		.loc 1 537 5 view .LVU3804
 14376              	.LBB2631:
 538:src/xeq.c     **** 		Error = e;
 14377              		.loc 1 538 2 view .LVU3805
 538:src/xeq.c     **** 		Error = e;
 14378              		.loc 1 538 12 is_stmt 0 view .LVU3806
 14379 0070 044B     		ldr	r3, .L1018+4
 14380              	.LVL1062:
 538:src/xeq.c     **** 		Error = e;
 14381              		.loc 1 538 5 view .LVU3807
 14382 0072 1A68     		ldr	r2, [r3]
 14383 0074 002A     		cmp	r2, #0
 14384 0076 E9D1     		bne	.L1011
 14385              	.LVL1063:
 14386              	.LBB2632:
 14387              	.LBI2632:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14388              		.loc 1 537 5 is_stmt 1 view .LVU3808
 14389              	.LBB2633:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 14390              		.loc 1 539 3 view .LVU3809
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 14391              		.loc 1 539 9 is_stmt 0 view .LVU3810
 14392 0078 0822     		movs	r2, #8
 14393 007a 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 14394              		.loc 1 540 3 is_stmt 1 view .LVU3811
 14395 007c E6E7     		b	.L1011
 14396              	.L1019:
 14397 007e 00BF     		.align	2
ARM GAS  /tmp/ccjeMhND.s 			page 412


 14398              	.L1018:
 14399 0080 00000000 		.word	main_ram
 14400 0084 00000000 		.word	Error
 14401              	.LBE2633:
 14402              	.LBE2632:
 14403              	.LBE2631:
 14404              	.LBE2630:
 14405              		.cfi_endproc
 14406              	.LFE121:
 14408              		.section	.text.swap_reg,"ax",%progbits
 14409              		.align	1
 14410              		.p2align 2,,3
 14411              		.global	swap_reg
 14412              		.syntax unified
 14413              		.thumb
 14414              		.thumb_func
 14415              		.fpu fpv4-sp-d16
 14417              	swap_reg:
 14418              	.LVL1064:
 14419              	.LFB122:
1711:src/xeq.c     **** 	REGISTER t;
 14420              		.loc 1 1711 41 view -0
 14421              		.cfi_startproc
 14422              		@ args = 0, pretend = 0, frame = 16
 14423              		@ frame_needed = 0, uses_anonymous_args = 0
1712:src/xeq.c     **** 
 14424              		.loc 1 1712 2 view .LVU3813
1714:src/xeq.c     **** 	copyreg(a, b);
 14425              		.loc 1 1714 2 view .LVU3814
1711:src/xeq.c     **** 	REGISTER t;
 14426              		.loc 1 1711 41 is_stmt 0 view .LVU3815
 14427 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 14428              		.cfi_def_cfa_offset 20
 14429              		.cfi_offset 4, -20
 14430              		.cfi_offset 5, -16
 14431              		.cfi_offset 6, -12
 14432              		.cfi_offset 7, -8
 14433              		.cfi_offset 14, -4
 14434              	.LBB2634:
 14435              	.LBB2635:
 14436              	.LBB2636:
 14437              	.LBB2637:
 933:src/xeq.c     **** }
 14438              		.loc 1 933 24 view .LVU3816
 14439 0002 174F     		ldr	r7, .L1028
 14440 0004 3B68     		ldr	r3, [r7]
 14441 0006 B3F8E837 		ldrh	r3, [r3, #2024]
 14442 000a 44F20104 		movw	r4, #16385
 14443              	.LBE2637:
 14444              	.LBE2636:
 718:src/xeq.c     **** }
 14445              		.loc 1 718 2 view .LVU3817
 14446 000e 2340     		ands	r3, r3, r4
 14447              	.LBE2635:
 14448              	.LBE2634:
1711:src/xeq.c     **** 	REGISTER t;
 14449              		.loc 1 1711 41 view .LVU3818
ARM GAS  /tmp/ccjeMhND.s 			page 413


 14450 0010 85B0     		sub	sp, sp, #20
 14451              		.cfi_def_cfa_offset 40
 14452              	.LVL1065:
 14453              	.LBB2642:
 14454              	.LBB2640:
 718:src/xeq.c     **** }
 14455              		.loc 1 718 2 view .LVU3819
 14456 0012 B3F5804F 		cmp	r3, #16384
 14457 0016 0CBF     		ite	eq
 14458 0018 1022     		moveq	r2, #16
 14459 001a 0822     		movne	r2, #8
 14460              	.LBE2640:
 14461              	.LBE2642:
1711:src/xeq.c     **** 	REGISTER t;
 14462              		.loc 1 1711 41 view .LVU3820
 14463 001c 0D46     		mov	r5, r1
 14464 001e 0646     		mov	r6, r0
 14465              	.LVL1066:
 14466              	.LBB2643:
 14467              	.LBI2634:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14468              		.loc 1 717 6 is_stmt 1 view .LVU3821
 14469              	.LBB2641:
 718:src/xeq.c     **** }
 14470              		.loc 1 718 2 view .LVU3822
 14471              	.LBB2639:
 14472              	.LBI2636:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14473              		.loc 1 932 5 view .LVU3823
 14474              	.LBB2638:
 933:src/xeq.c     **** }
 14475              		.loc 1 933 2 view .LVU3824
 14476              	.LBE2638:
 14477              	.LBE2639:
 718:src/xeq.c     **** }
 14478              		.loc 1 718 2 is_stmt 0 view .LVU3825
 14479 0020 0146     		mov	r1, r0
 14480              	.LVL1067:
 718:src/xeq.c     **** }
 14481              		.loc 1 718 2 view .LVU3826
 14482 0022 6846     		mov	r0, sp
 14483              	.LVL1068:
 718:src/xeq.c     **** }
 14484              		.loc 1 718 2 view .LVU3827
 14485 0024 FFF7FEFF 		bl	xcopy
 14486              	.LVL1069:
 718:src/xeq.c     **** }
 14487              		.loc 1 718 2 view .LVU3828
 14488              	.LBE2641:
 14489              	.LBE2643:
1715:src/xeq.c     **** 	copyreg(b, &t);
 14490              		.loc 1 1715 2 is_stmt 1 view .LVU3829
 14491              	.LBB2644:
 14492              	.LBI2644:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14493              		.loc 1 717 6 view .LVU3830
 14494              	.LBB2645:
ARM GAS  /tmp/ccjeMhND.s 			page 414


 718:src/xeq.c     **** }
 14495              		.loc 1 718 2 view .LVU3831
 14496              	.LBB2646:
 14497              	.LBI2646:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14498              		.loc 1 932 5 view .LVU3832
 14499              	.LBB2647:
 933:src/xeq.c     **** }
 14500              		.loc 1 933 2 view .LVU3833
 933:src/xeq.c     **** }
 14501              		.loc 1 933 24 is_stmt 0 view .LVU3834
 14502 0028 3B68     		ldr	r3, [r7]
 14503 002a B3F8E837 		ldrh	r3, [r3, #2024]
 14504              	.LBE2647:
 14505              	.LBE2646:
 718:src/xeq.c     **** }
 14506              		.loc 1 718 2 view .LVU3835
 14507 002e 2340     		ands	r3, r3, r4
 14508 0030 B3F5804F 		cmp	r3, #16384
 14509 0034 0CBF     		ite	eq
 14510 0036 1022     		moveq	r2, #16
 14511 0038 0822     		movne	r2, #8
 14512 003a 2946     		mov	r1, r5
 14513 003c 3046     		mov	r0, r6
 14514 003e FFF7FEFF 		bl	xcopy
 14515              	.LVL1070:
 718:src/xeq.c     **** }
 14516              		.loc 1 718 2 view .LVU3836
 14517              	.LBE2645:
 14518              	.LBE2644:
1716:src/xeq.c     **** }
 14519              		.loc 1 1716 2 is_stmt 1 view .LVU3837
 14520              	.LBB2648:
 14521              	.LBI2648:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14522              		.loc 1 717 6 view .LVU3838
 14523              	.LBB2649:
 718:src/xeq.c     **** }
 14524              		.loc 1 718 2 view .LVU3839
 14525              	.LBB2650:
 14526              	.LBI2650:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14527              		.loc 1 932 5 view .LVU3840
 14528              	.LBB2651:
 933:src/xeq.c     **** }
 14529              		.loc 1 933 2 view .LVU3841
 933:src/xeq.c     **** }
 14530              		.loc 1 933 24 is_stmt 0 view .LVU3842
 14531 0042 3B68     		ldr	r3, [r7]
 14532 0044 B3F8E837 		ldrh	r3, [r3, #2024]
 14533              	.LBE2651:
 14534              	.LBE2650:
 718:src/xeq.c     **** }
 14535              		.loc 1 718 2 view .LVU3843
 14536 0048 1C40     		ands	r4, r4, r3
 14537 004a B4F5804F 		cmp	r4, #16384
 14538 004e 2846     		mov	r0, r5
ARM GAS  /tmp/ccjeMhND.s 			page 415


 14539 0050 6946     		mov	r1, sp
 14540 0052 0CBF     		ite	eq
 14541 0054 1022     		moveq	r2, #16
 14542 0056 0822     		movne	r2, #8
 14543 0058 FFF7FEFF 		bl	xcopy
 14544              	.LVL1071:
 718:src/xeq.c     **** }
 14545              		.loc 1 718 2 view .LVU3844
 14546              	.LBE2649:
 14547              	.LBE2648:
1717:src/xeq.c     **** 
 14548              		.loc 1 1717 1 view .LVU3845
 14549 005c 05B0     		add	sp, sp, #20
 14550              		.cfi_def_cfa_offset 20
 14551              		@ sp needed
 14552 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 14553              	.LVL1072:
 14554              	.L1029:
1717:src/xeq.c     **** 
 14555              		.loc 1 1717 1 view .LVU3846
 14556              		.align	2
 14557              	.L1028:
 14558 0060 00000000 		.word	main_ram
 14559              		.cfi_endproc
 14560              	.LFE122:
 14562              		.section	.text.cmdswap,"ax",%progbits
 14563              		.align	1
 14564              		.p2align 2,,3
 14565              		.global	cmdswap
 14566              		.syntax unified
 14567              		.thumb
 14568              		.thumb_func
 14569              		.fpu fpv4-sp-d16
 14571              	cmdswap:
 14572              	.LVL1073:
 14573              	.LFB123:
1719:src/xeq.c     **** 	int idx;
 14574              		.loc 1 1719 46 is_stmt 1 view -0
 14575              		.cfi_startproc
 14576              		@ args = 0, pretend = 0, frame = 0
 14577              		@ frame_needed = 0, uses_anonymous_args = 0
1720:src/xeq.c     **** 
 14578              		.loc 1 1720 2 view .LVU3848
1722:src/xeq.c     **** 		idx = regX_idx;
 14579              		.loc 1 1722 2 view .LVU3849
1722:src/xeq.c     **** 		idx = regX_idx;
 14580              		.loc 1 1722 5 is_stmt 0 view .LVU3850
 14581 0000 1F29     		cmp	r1, #31
1719:src/xeq.c     **** 	int idx;
 14582              		.loc 1 1719 46 view .LVU3851
 14583 0002 70B5     		push	{r4, r5, r6, lr}
 14584              		.cfi_def_cfa_offset 16
 14585              		.cfi_offset 4, -16
 14586              		.cfi_offset 5, -12
 14587              		.cfi_offset 6, -8
 14588              		.cfi_offset 14, -4
1719:src/xeq.c     **** 	int idx;
ARM GAS  /tmp/ccjeMhND.s 			page 416


 14589              		.loc 1 1719 46 view .LVU3852
 14590 0004 0546     		mov	r5, r0
1722:src/xeq.c     **** 		idx = regX_idx;
 14591              		.loc 1 1722 5 view .LVU3853
 14592 0006 11D0     		beq	.L1031
1724:src/xeq.c     **** 		idx = regZ_idx;
 14593              		.loc 1 1724 10 view .LVU3854
 14594 0008 2029     		cmp	r1, #32
 14595 000a 0C46     		mov	r4, r1
1724:src/xeq.c     **** 		idx = regZ_idx;
 14596              		.loc 1 1724 7 is_stmt 1 view .LVU3855
1724:src/xeq.c     **** 		idx = regZ_idx;
 14597              		.loc 1 1724 10 is_stmt 0 view .LVU3856
 14598 000c 2BD0     		beq	.L1032
1727:src/xeq.c     **** 
 14599              		.loc 1 1727 3 is_stmt 1 view .LVU3857
 14600              	.LVL1074:
1729:src/xeq.c     **** 
 14601              		.loc 1 1729 2 view .LVU3858
 14602 000e 01F15300 		add	r0, r1, #83
 14603              	.LVL1075:
1729:src/xeq.c     **** 
 14604              		.loc 1 1729 2 is_stmt 0 view .LVU3859
 14605 0012 FFF7FEFF 		bl	get_reg_n
 14606              	.LVL1076:
1729:src/xeq.c     **** 
 14607              		.loc 1 1729 2 view .LVU3860
 14608 0016 0646     		mov	r6, r0
 14609 0018 2846     		mov	r0, r5
 14610 001a FFF7FEFF 		bl	get_reg_n
 14611              	.LVL1077:
 14612 001e 0146     		mov	r1, r0
 14613 0020 3046     		mov	r0, r6
 14614 0022 FFF7FEFF 		bl	swap_reg
 14615              	.LVL1078:
1731:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 14616              		.loc 1 1731 2 is_stmt 1 view .LVU3861
1731:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 14617              		.loc 1 1731 5 is_stmt 0 view .LVU3862
 14618 0026 1E2C     		cmp	r4, #30
 14619 0028 2AD8     		bhi	.L1036
1735:src/xeq.c     **** 
 14620              		.loc 1 1735 1 view .LVU3863
 14621 002a 70BD     		pop	{r4, r5, r6, pc}
 14622              	.LVL1079:
 14623              	.L1031:
1729:src/xeq.c     **** 
 14624              		.loc 1 1729 2 is_stmt 1 view .LVU3864
 14625 002c 6420     		movs	r0, #100
 14626              	.LVL1080:
1729:src/xeq.c     **** 
 14627              		.loc 1 1729 2 is_stmt 0 view .LVU3865
 14628 002e FFF7FEFF 		bl	get_reg_n
 14629              	.LVL1081:
1729:src/xeq.c     **** 
 14630              		.loc 1 1729 2 view .LVU3866
 14631 0032 0446     		mov	r4, r0
ARM GAS  /tmp/ccjeMhND.s 			page 417


 14632 0034 2846     		mov	r0, r5
 14633 0036 FFF7FEFF 		bl	get_reg_n
 14634              	.LVL1082:
 14635 003a 0146     		mov	r1, r0
 14636 003c 2046     		mov	r0, r4
 14637 003e FFF7FEFF 		bl	swap_reg
 14638              	.LVL1083:
1731:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 14639              		.loc 1 1731 2 is_stmt 1 view .LVU3867
1729:src/xeq.c     **** 
 14640              		.loc 1 1729 2 is_stmt 0 view .LVU3868
 14641 0042 6520     		movs	r0, #101
 14642              	.LVL1084:
 14643              	.L1034:
1732:src/xeq.c     **** 		set_was_complex();
 14644              		.loc 1 1732 3 is_stmt 1 view .LVU3869
 14645 0044 FFF7FEFF 		bl	get_reg_n
 14646              	.LVL1085:
 14647 0048 0446     		mov	r4, r0
 14648 004a 681C     		adds	r0, r5, #1
 14649 004c FFF7FEFF 		bl	get_reg_n
 14650              	.LVL1086:
 14651 0050 0146     		mov	r1, r0
 14652 0052 2046     		mov	r0, r4
 14653 0054 FFF7FEFF 		bl	swap_reg
 14654              	.LVL1087:
1733:src/xeq.c     **** 	}
 14655              		.loc 1 1733 3 view .LVU3870
 14656              	.LBB2652:
 14657              	.LBI2652:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 14658              		.loc 1 530 13 view .LVU3871
 14659              	.LBB2653:
 531:src/xeq.c     **** }
 14660              		.loc 1 531 2 view .LVU3872
 531:src/xeq.c     **** }
 14661              		.loc 1 531 20 is_stmt 0 view .LVU3873
 14662 0058 0B4B     		ldr	r3, .L1037
 14663 005a 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14664 005c 0121     		movs	r1, #1
 14665 005e 61F38712 		bfi	r2, r1, #6, #2
 14666 0062 1A75     		strb	r2, [r3, #20]
 14667              	.LBE2653:
 14668              	.LBE2652:
1735:src/xeq.c     **** 
 14669              		.loc 1 1735 1 view .LVU3874
 14670 0064 70BD     		pop	{r4, r5, r6, pc}
 14671              	.LVL1088:
 14672              	.L1032:
1729:src/xeq.c     **** 
 14673              		.loc 1 1729 2 is_stmt 1 view .LVU3875
 14674 0066 6620     		movs	r0, #102
 14675              	.LVL1089:
1729:src/xeq.c     **** 
 14676              		.loc 1 1729 2 is_stmt 0 view .LVU3876
 14677 0068 FFF7FEFF 		bl	get_reg_n
 14678              	.LVL1090:
ARM GAS  /tmp/ccjeMhND.s 			page 418


1729:src/xeq.c     **** 
 14679              		.loc 1 1729 2 view .LVU3877
 14680 006c 0446     		mov	r4, r0
 14681 006e 2846     		mov	r0, r5
 14682 0070 FFF7FEFF 		bl	get_reg_n
 14683              	.LVL1091:
 14684 0074 0146     		mov	r1, r0
 14685 0076 2046     		mov	r0, r4
 14686 0078 FFF7FEFF 		bl	swap_reg
 14687              	.LVL1092:
1731:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 14688              		.loc 1 1731 2 is_stmt 1 view .LVU3878
1729:src/xeq.c     **** 
 14689              		.loc 1 1729 2 is_stmt 0 view .LVU3879
 14690 007c 6720     		movs	r0, #103
 14691 007e E1E7     		b	.L1034
 14692              	.LVL1093:
 14693              	.L1036:
1729:src/xeq.c     **** 
 14694              		.loc 1 1729 2 view .LVU3880
 14695 0080 04F15400 		add	r0, r4, #84
 14696 0084 DEE7     		b	.L1034
 14697              	.L1038:
 14698 0086 00BF     		.align	2
 14699              	.L1037:
 14700 0088 00000000 		.word	StateWhileOn
 14701              		.cfi_endproc
 14702              	.LFE123:
 14704              		.section	.text.cmdview,"ax",%progbits
 14705              		.align	1
 14706              		.p2align 2,,3
 14707              		.global	cmdview
 14708              		.syntax unified
 14709              		.thumb
 14710              		.thumb_func
 14711              		.fpu fpv4-sp-d16
 14713              	cmdview:
 14714              	.LVL1094:
 14715              	.LFB124:
1740:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 14716              		.loc 1 1740 46 is_stmt 1 view -0
 14717              		.cfi_startproc
 14718              		@ args = 0, pretend = 0, frame = 0
 14719              		@ frame_needed = 0, uses_anonymous_args = 0
1741:src/xeq.c     **** 
 14720              		.loc 1 1741 2 view .LVU3882
1740:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 14721              		.loc 1 1740 46 is_stmt 0 view .LVU3883
 14722 0000 70B5     		push	{r4, r5, r6, lr}
 14723              		.cfi_def_cfa_offset 16
 14724              		.cfi_offset 4, -16
 14725              		.cfi_offset 5, -12
 14726              		.cfi_offset 6, -8
 14727              		.cfi_offset 14, -4
1743:src/xeq.c     **** 	ShowRegister = arg;
 14728              		.loc 1 1743 20 view .LVU3884
 14729 0002 134D     		ldr	r5, .L1045
ARM GAS  /tmp/ccjeMhND.s 			page 419


1744:src/xeq.c     **** 	State2.disp_freeze = 0;
 14730              		.loc 1 1744 15 view .LVU3885
 14731 0004 134A     		ldr	r2, .L1045+4
1743:src/xeq.c     **** 	ShowRegister = arg;
 14732              		.loc 1 1743 20 view .LVU3886
 14733 0006 6B69     		ldr	r3, [r5, #20]
1744:src/xeq.c     **** 	State2.disp_freeze = 0;
 14734              		.loc 1 1744 15 view .LVU3887
 14735 0008 1060     		str	r0, [r2]
1740:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 14736              		.loc 1 1740 46 view .LVU3888
 14737 000a 0E46     		mov	r6, r1
 14738              	.LVL1095:
1743:src/xeq.c     **** 	ShowRegister = arg;
 14739              		.loc 1 1743 2 is_stmt 1 view .LVU3889
1744:src/xeq.c     **** 	State2.disp_freeze = 0;
 14740              		.loc 1 1744 2 view .LVU3890
1745:src/xeq.c     **** 	display();
 14741              		.loc 1 1745 2 view .LVU3891
1741:src/xeq.c     **** 
 14742              		.loc 1 1741 41 is_stmt 0 view .LVU3892
 14743 000c A1F18C01 		sub	r1, #140
 14744              	.LVL1096:
1743:src/xeq.c     **** 	ShowRegister = arg;
 14745              		.loc 1 1743 20 view .LVU3893
 14746 0010 23F08053 		bic	r3, r3, #268435456
1741:src/xeq.c     **** 
 14747              		.loc 1 1741 41 view .LVU3894
 14748 0014 B1FA81F1 		clz	r1, r1
 14749 0018 4909     		lsrs	r1, r1, #5
1743:src/xeq.c     **** 	ShowRegister = arg;
 14750              		.loc 1 1743 20 view .LVU3895
 14751 001a 23F0C003 		bic	r3, r3, #192
 14752 001e 43EA8113 		orr	r3, r3, r1, lsl #6
1740:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 14753              		.loc 1 1740 46 view .LVU3896
 14754 0022 0446     		mov	r4, r0
1743:src/xeq.c     **** 	ShowRegister = arg;
 14755              		.loc 1 1743 20 view .LVU3897
 14756 0024 6B61     		str	r3, [r5, #20]
1746:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
 14757              		.loc 1 1746 2 is_stmt 1 view .LVU3898
 14758 0026 FFF7FEFF 		bl	display
 14759              	.LVL1097:
1747:src/xeq.c     **** }
 14760              		.loc 1 1747 2 view .LVU3899
1747:src/xeq.c     **** }
 14761              		.loc 1 1747 40 is_stmt 0 view .LVU3900
 14762 002a 8C2E     		cmp	r6, #140
 14763 002c 02D0     		beq	.L1042
1747:src/xeq.c     **** }
 14764              		.loc 1 1747 29 discriminator 2 view .LVU3901
 14765 002e 0A4B     		ldr	r3, .L1045+8
 14766 0030 1B68     		ldr	r3, [r3]
 14767 0032 2BB1     		cbz	r3, .L1044
 14768              	.L1042:
1747:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 420


 14769              		.loc 1 1747 21 view .LVU3902
 14770 0034 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 14771 0036 0124     		movs	r4, #1
 14772              	.LVL1098:
1747:src/xeq.c     **** }
 14773              		.loc 1 1747 21 view .LVU3903
 14774 0038 64F30413 		bfi	r3, r4, #4, #1
 14775 003c EB75     		strb	r3, [r5, #23]
1748:src/xeq.c     **** 
 14776              		.loc 1 1748 1 view .LVU3904
 14777 003e 70BD     		pop	{r4, r5, r6, pc}
 14778              	.LVL1099:
 14779              	.L1044:
1747:src/xeq.c     **** }
 14780              		.loc 1 1747 21 discriminator 4 view .LVU3905
 14781 0040 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
1747:src/xeq.c     **** }
 14782              		.loc 1 1747 40 discriminator 4 view .LVU3906
 14783 0042 643C     		subs	r4, r4, #100
 14784              	.LVL1100:
1747:src/xeq.c     **** }
 14785              		.loc 1 1747 40 discriminator 4 view .LVU3907
 14786 0044 18BF     		it	ne
 14787 0046 0124     		movne	r4, #1
 14788              	.LVL1101:
1747:src/xeq.c     **** }
 14789              		.loc 1 1747 21 discriminator 4 view .LVU3908
 14790 0048 64F30413 		bfi	r3, r4, #4, #1
 14791 004c EB75     		strb	r3, [r5, #23]
1748:src/xeq.c     **** 
 14792              		.loc 1 1748 1 discriminator 4 view .LVU3909
 14793 004e 70BD     		pop	{r4, r5, r6, pc}
 14794              	.L1046:
 14795              		.align	2
 14796              	.L1045:
 14797 0050 00000000 		.word	StateWhileOn
 14798 0054 00000000 		.word	ShowRegister
 14799 0058 00000000 		.word	Running
 14800              		.cfi_endproc
 14801              	.LFE124:
 14803              		.section	.text.get_stack_size,"ax",%progbits
 14804              		.align	1
 14805              		.p2align 2,,3
 14806              		.global	get_stack_size
 14807              		.syntax unified
 14808              		.thumb
 14809              		.thumb_func
 14810              		.fpu fpv4-sp-d16
 14812              	get_stack_size:
 14813              	.LVL1102:
 14814              	.LFB125:
1752:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 14815              		.loc 1 1752 36 is_stmt 1 view -0
 14816              		.cfi_startproc
 14817              		@ args = 0, pretend = 0, frame = 0
 14818              		@ frame_needed = 0, uses_anonymous_args = 0
1753:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 421


 14819              		.loc 1 1753 2 view .LVU3911
 14820              	.LBB2654:
 14821              	.LBI2654:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 14822              		.loc 1 703 5 view .LVU3912
 14823              	.LBB2655:
 704:src/xeq.c     **** 		return 4;
 14824              		.loc 1 704 2 view .LVU3913
 704:src/xeq.c     **** 		return 4;
 14825              		.loc 1 704 8 is_stmt 0 view .LVU3914
 14826 0000 0F4B     		ldr	r3, .L1054
 14827              	.LBE2655:
 14828              	.LBE2654:
1752:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 14829              		.loc 1 1752 36 view .LVU3915
 14830 0002 00B5     		push	{lr}
 14831              		.cfi_def_cfa_offset 4
 14832              		.cfi_offset 14, -4
 14833              	.LBB2661:
 14834              	.LBB2658:
 704:src/xeq.c     **** 		return 4;
 14835              		.loc 1 704 8 view .LVU3916
 14836 0004 1B68     		ldr	r3, [r3]
 704:src/xeq.c     **** 		return 4;
 14837              		.loc 1 704 6 view .LVU3917
 14838 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 14839              		.loc 1 704 5 view .LVU3918
 14840 000a 1207     		lsls	r2, r2, #28
 14841              	.LBE2658:
 14842              	.LBE2661:
1752:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 14843              		.loc 1 1752 36 view .LVU3919
 14844 000c 83B0     		sub	sp, sp, #12
 14845              		.cfi_def_cfa_offset 16
 14846              	.LBB2662:
 14847              	.LBB2659:
 704:src/xeq.c     **** 		return 4;
 14848              		.loc 1 704 5 view .LVU3920
 14849 000e 13D5     		bpl	.L1049
 14850              	.LBB2656:
 14851              	.LBI2656:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 14852              		.loc 1 182 5 is_stmt 1 view .LVU3921
 14853              	.LBB2657:
 183:src/xeq.c     **** }
 14854              		.loc 1 183 2 view .LVU3922
 183:src/xeq.c     **** }
 14855              		.loc 1 183 9 is_stmt 0 view .LVU3923
 14856 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 14857              	.LBE2657:
 14858              	.LBE2656:
 704:src/xeq.c     **** 		return 4;
 14859              		.loc 1 704 27 view .LVU3924
 14860 0014 9B0B     		lsrs	r3, r3, #14
 14861 0016 032B     		cmp	r3, #3
 14862 0018 09D0     		beq	.L1053
ARM GAS  /tmp/ccjeMhND.s 			page 422


 14863              	.L1051:
 14864 001a 0822     		movs	r2, #8
 14865 001c 0023     		movs	r3, #0
 14866              	.L1048:
 14867              	.LVL1103:
 704:src/xeq.c     **** 		return 4;
 14868              		.loc 1 704 27 view .LVU3925
 14869              	.LBE2659:
 14870              	.LBE2662:
 14871              	.LBB2663:
 14872              	.LBI2663:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14873              		.loc 1 1323 6 is_stmt 1 view .LVU3926
 14874              	.LBB2664:
1324:src/xeq.c     **** }
 14875              		.loc 1 1324 2 view .LVU3927
 14876 001e 0021     		movs	r1, #0
 14877 0020 0091     		str	r1, [sp]
 14878 0022 6420     		movs	r0, #100
 14879              	.LVL1104:
1324:src/xeq.c     **** }
 14880              		.loc 1 1324 2 is_stmt 0 view .LVU3928
 14881 0024 FFF7FEFF 		bl	set_reg_n_int_sgn
 14882              	.LVL1105:
1324:src/xeq.c     **** }
 14883              		.loc 1 1324 2 view .LVU3929
 14884              	.LBE2664:
 14885              	.LBE2663:
1754:src/xeq.c     **** 
 14886              		.loc 1 1754 1 view .LVU3930
 14887 0028 03B0     		add	sp, sp, #12
 14888              		.cfi_remember_state
 14889              		.cfi_def_cfa_offset 4
 14890              		@ sp needed
 14891 002a 5DF804FB 		ldr	pc, [sp], #4
 14892              	.LVL1106:
 14893              	.L1053:
 14894              		.cfi_restore_state
 14895              	.LBB2665:
 14896              	.LBB2660:
 704:src/xeq.c     **** 		return 4;
 14897              		.loc 1 704 44 view .LVU3931
 14898 002e 054B     		ldr	r3, .L1054+4
 704:src/xeq.c     **** 		return 4;
 14899              		.loc 1 704 41 view .LVU3932
 14900 0030 93F90130 		ldrsb	r3, [r3, #1]
 14901 0034 002B     		cmp	r3, #0
 14902 0036 F0DB     		blt	.L1051
 14903              	.L1049:
 14904 0038 0422     		movs	r2, #4
 14905 003a 0023     		movs	r3, #0
 14906 003c EFE7     		b	.L1048
 14907              	.L1055:
 14908 003e 00BF     		.align	2
 14909              	.L1054:
 14910 0040 00000000 		.word	main_ram
 14911 0044 00000000 		.word	XromParams
ARM GAS  /tmp/ccjeMhND.s 			page 423


 14912              	.LBE2660:
 14913              	.LBE2665:
 14914              		.cfi_endproc
 14915              	.LFE125:
 14917              		.section	.text.get_word_size,"ax",%progbits
 14918              		.align	1
 14919              		.p2align 2,,3
 14920              		.global	get_word_size
 14921              		.syntax unified
 14922              		.thumb
 14923              		.thumb_func
 14924              		.fpu fpv4-sp-d16
 14926              	get_word_size:
 14927              	.LVL1107:
 14928              	.LFB126:
1756:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 14929              		.loc 1 1756 35 is_stmt 1 view -0
 14930              		.cfi_startproc
 14931              		@ args = 0, pretend = 0, frame = 0
 14932              		@ frame_needed = 0, uses_anonymous_args = 0
1757:src/xeq.c     **** }
 14933              		.loc 1 1757 2 view .LVU3934
1756:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 14934              		.loc 1 1756 35 is_stmt 0 view .LVU3935
 14935 0000 00B5     		push	{lr}
 14936              		.cfi_def_cfa_offset 4
 14937              		.cfi_offset 14, -4
 14938 0002 83B0     		sub	sp, sp, #12
 14939              		.cfi_def_cfa_offset 16
1757:src/xeq.c     **** }
 14940              		.loc 1 1757 20 view .LVU3936
 14941 0004 FFF7FEFF 		bl	word_size
 14942              	.LVL1108:
 14943              	.LBB2666:
 14944              	.LBI2666:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14945              		.loc 1 1323 6 is_stmt 1 view .LVU3937
 14946              	.LBB2667:
1324:src/xeq.c     **** }
 14947              		.loc 1 1324 2 view .LVU3938
 14948 0008 0021     		movs	r1, #0
 14949 000a 0246     		mov	r2, r0
 14950 000c C317     		asrs	r3, r0, #31
 14951 000e 0091     		str	r1, [sp]
 14952 0010 6420     		movs	r0, #100
 14953              	.LVL1109:
1324:src/xeq.c     **** }
 14954              		.loc 1 1324 2 is_stmt 0 view .LVU3939
 14955 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 14956              	.LVL1110:
1324:src/xeq.c     **** }
 14957              		.loc 1 1324 2 view .LVU3940
 14958              	.LBE2667:
 14959              	.LBE2666:
1758:src/xeq.c     **** 
 14960              		.loc 1 1758 1 view .LVU3941
 14961 0016 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccjeMhND.s 			page 424


 14962              		.cfi_def_cfa_offset 4
 14963              		@ sp needed
 14964 0018 5DF804FB 		ldr	pc, [sp], #4
 14965              		.cfi_endproc
 14966              	.LFE126:
 14968              		.section	.text.get_sign_mode,"ax",%progbits
 14969              		.align	1
 14970              		.p2align 2,,3
 14971              		.global	get_sign_mode
 14972              		.syntax unified
 14973              		.thumb
 14974              		.thumb_func
 14975              		.fpu fpv4-sp-d16
 14977              	get_sign_mode:
 14978              	.LVL1111:
 14979              	.LFB127:
1760:src/xeq.c     **** 	static const unsigned char modes[4] = {
 14980              		.loc 1 1760 35 is_stmt 1 view -0
 14981              		.cfi_startproc
 14982              		@ args = 0, pretend = 0, frame = 0
 14983              		@ frame_needed = 0, uses_anonymous_args = 0
1761:src/xeq.c     **** 		0x02,		// 2's complement
 14984              		.loc 1 1761 2 view .LVU3943
1767:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 14985              		.loc 1 1767 2 view .LVU3944
1760:src/xeq.c     **** 	static const unsigned char modes[4] = {
 14986              		.loc 1 1760 35 is_stmt 0 view .LVU3945
 14987 0000 00B5     		push	{lr}
 14988              		.cfi_def_cfa_offset 4
 14989              		.cfi_offset 14, -4
 14990 0002 83B0     		sub	sp, sp, #12
 14991              		.cfi_def_cfa_offset 16
1767:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 14992              		.loc 1 1767 37 view .LVU3946
 14993 0004 FFF7FEFF 		bl	int_mode
 14994              	.LVL1112:
1767:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 14995              		.loc 1 1767 22 view .LVU3947
 14996 0008 064B     		ldr	r3, .L1060
 14997 000a 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
 14998              	.LVL1113:
1768:src/xeq.c     **** }
 14999              		.loc 1 1768 2 is_stmt 1 view .LVU3948
 15000              	.LBB2668:
 15001              	.LBI2668:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15002              		.loc 1 1323 6 view .LVU3949
 15003              	.LBB2669:
1324:src/xeq.c     **** }
 15004              		.loc 1 1324 2 view .LVU3950
 15005              	.LBE2669:
 15006              	.LBE2668:
1768:src/xeq.c     **** }
 15007              		.loc 1 1768 2 is_stmt 0 view .LVU3951
 15008 000c 03F00302 		and	r2, r3, #3
 15009 0010 03F08003 		and	r3, r3, #128
 15010              	.LVL1114:
ARM GAS  /tmp/ccjeMhND.s 			page 425


1768:src/xeq.c     **** }
 15011              		.loc 1 1768 2 view .LVU3952
 15012 0014 0093     		str	r3, [sp]
 15013              	.LBB2671:
 15014              	.LBB2670:
1324:src/xeq.c     **** }
 15015              		.loc 1 1324 2 view .LVU3953
 15016 0016 6420     		movs	r0, #100
 15017              	.LVL1115:
1324:src/xeq.c     **** }
 15018              		.loc 1 1324 2 view .LVU3954
 15019 0018 0023     		movs	r3, #0
 15020 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 15021              	.LVL1116:
1324:src/xeq.c     **** }
 15022              		.loc 1 1324 2 view .LVU3955
 15023              	.LBE2670:
 15024              	.LBE2671:
1769:src/xeq.c     **** 
 15025              		.loc 1 1769 1 view .LVU3956
 15026 001e 03B0     		add	sp, sp, #12
 15027              		.cfi_def_cfa_offset 4
 15028              		@ sp needed
 15029 0020 5DF804FB 		ldr	pc, [sp], #4
 15030              	.L1061:
 15031              		.align	2
 15032              	.L1060:
 15033 0024 00000000 		.word	.LANCHOR4
 15034              		.cfi_endproc
 15035              	.LFE127:
 15037              		.section	.text.get_base,"ax",%progbits
 15038              		.align	1
 15039              		.p2align 2,,3
 15040              		.global	get_base
 15041              		.syntax unified
 15042              		.thumb
 15043              		.thumb_func
 15044              		.fpu fpv4-sp-d16
 15046              	get_base:
 15047              	.LVL1117:
 15048              	.LFB128:
1771:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 15049              		.loc 1 1771 30 is_stmt 1 view -0
 15050              		.cfi_startproc
 15051              		@ args = 0, pretend = 0, frame = 0
 15052              		@ frame_needed = 0, uses_anonymous_args = 0
1772:src/xeq.c     **** }
 15053              		.loc 1 1772 2 view .LVU3958
1771:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 15054              		.loc 1 1771 30 is_stmt 0 view .LVU3959
 15055 0000 00B5     		push	{lr}
 15056              		.cfi_def_cfa_offset 4
 15057              		.cfi_offset 14, -4
 15058 0002 83B0     		sub	sp, sp, #12
 15059              		.cfi_def_cfa_offset 16
1772:src/xeq.c     **** }
 15060              		.loc 1 1772 20 view .LVU3960
ARM GAS  /tmp/ccjeMhND.s 			page 426


 15061 0004 FFF7FEFF 		bl	int_base
 15062              	.LVL1118:
 15063              	.LBB2672:
 15064              	.LBI2672:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15065              		.loc 1 1323 6 is_stmt 1 view .LVU3961
 15066              	.LBB2673:
1324:src/xeq.c     **** }
 15067              		.loc 1 1324 2 view .LVU3962
 15068 0008 0021     		movs	r1, #0
 15069 000a 0246     		mov	r2, r0
 15070 000c C317     		asrs	r3, r0, #31
 15071 000e 0091     		str	r1, [sp]
 15072 0010 6420     		movs	r0, #100
 15073              	.LVL1119:
1324:src/xeq.c     **** }
 15074              		.loc 1 1324 2 is_stmt 0 view .LVU3963
 15075 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 15076              	.LVL1120:
1324:src/xeq.c     **** }
 15077              		.loc 1 1324 2 view .LVU3964
 15078              	.LBE2673:
 15079              	.LBE2672:
1773:src/xeq.c     **** 
 15080              		.loc 1 1773 1 view .LVU3965
 15081 0016 03B0     		add	sp, sp, #12
 15082              		.cfi_def_cfa_offset 4
 15083              		@ sp needed
 15084 0018 5DF804FB 		ldr	pc, [sp], #4
 15085              		.cfi_endproc
 15086              	.LFE128:
 15088              		.section	.text.DM42_Ticker,"ax",%progbits
 15089              		.align	1
 15090              		.p2align 2,,3
 15091              		.global	DM42_Ticker
 15092              		.syntax unified
 15093              		.thumb
 15094              		.thumb_func
 15095              		.fpu fpv4-sp-d16
 15097              	DM42_Ticker:
 15098              	.LFB129:
1776:src/xeq.c     ****     long int f, t;
 15099              		.loc 1 1776 26 is_stmt 1 view -0
 15100              		.cfi_startproc
 15101              		@ args = 0, pretend = 0, frame = 0
 15102              		@ frame_needed = 0, uses_anonymous_args = 0
1777:src/xeq.c     ****     t = get_rtc_ticks();
 15103              		.loc 1 1777 5 view .LVU3967
1778:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 15104              		.loc 1 1778 5 view .LVU3968
1776:src/xeq.c     ****     long int f, t;
 15105              		.loc 1 1776 26 is_stmt 0 view .LVU3969
 15106 0000 08B5     		push	{r3, lr}
 15107              		.cfi_def_cfa_offset 8
 15108              		.cfi_offset 3, -8
 15109              		.cfi_offset 14, -4
1778:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
ARM GAS  /tmp/ccjeMhND.s 			page 427


 15110              		.loc 1 1778 9 view .LVU3970
 15111 0002 044B     		ldr	r3, .L1066
 15112 0004 9847     		blx	r3
 15113              	.LVL1121:
1779:src/xeq.c     ****     return f;
 15114              		.loc 1 1779 5 is_stmt 1 view .LVU3971
1780:src/xeq.c     ****  }
 15115              		.loc 1 1780 5 view .LVU3972
1779:src/xeq.c     ****     return f;
 15116              		.loc 1 1779 13 is_stmt 0 view .LVU3973
 15117 0006 C0F31300 		ubfx	r0, r0, #0, #20
 15118              	.LVL1122:
1779:src/xeq.c     ****     return f;
 15119              		.loc 1 1779 23 view .LVU3974
 15120 000a 00EB8000 		add	r0, r0, r0, lsl #2
1781:src/xeq.c     **** #endif
 15121              		.loc 1 1781 2 view .LVU3975
 15122 000e C009     		lsrs	r0, r0, #7
 15123 0010 08BD     		pop	{r3, pc}
 15124              	.L1067:
 15125 0012 00BF     		.align	2
 15126              	.L1066:
 15127 0014 B9040008 		.word	134218937
 15128              		.cfi_endproc
 15129              	.LFE129:
 15131              		.section	.text.op_ticks,"ax",%progbits
 15132              		.align	1
 15133              		.p2align 2,,3
 15134              		.global	op_ticks
 15135              		.syntax unified
 15136              		.thumb
 15137              		.thumb_func
 15138              		.fpu fpv4-sp-d16
 15140              	op_ticks:
 15141              	.LVL1123:
 15142              	.LFB130:
1784:src/xeq.c     **** #if !defined(CONSOLE)
 15143              		.loc 1 1784 30 is_stmt 1 view -0
 15144              		.cfi_startproc
 15145              		@ args = 0, pretend = 0, frame = 0
 15146              		@ frame_needed = 0, uses_anonymous_args = 0
1786:src/xeq.c     **** #else 
 15147              		.loc 1 1786 5 view .LVU3977
 15148              	.LBB2674:
 15149              	.LBI2674:
1776:src/xeq.c     ****     long int f, t;
 15150              		.loc 1 1776 11 view .LVU3978
 15151              	.LBB2675:
1777:src/xeq.c     ****     t = get_rtc_ticks();
 15152              		.loc 1 1777 5 view .LVU3979
1778:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 15153              		.loc 1 1778 5 view .LVU3980
 15154              	.LBE2675:
 15155              	.LBE2674:
1784:src/xeq.c     **** #if !defined(CONSOLE)
 15156              		.loc 1 1784 30 is_stmt 0 view .LVU3981
 15157 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccjeMhND.s 			page 428


 15158              		.cfi_def_cfa_offset 4
 15159              		.cfi_offset 14, -4
 15160              	.LBB2679:
 15161              	.LBB2676:
1778:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 15162              		.loc 1 1778 9 view .LVU3982
 15163 0002 084B     		ldr	r3, .L1070
 15164              	.LBE2676:
 15165              	.LBE2679:
1784:src/xeq.c     **** #if !defined(CONSOLE)
 15166              		.loc 1 1784 30 view .LVU3983
 15167 0004 83B0     		sub	sp, sp, #12
 15168              		.cfi_def_cfa_offset 16
 15169              	.LBB2680:
 15170              	.LBB2677:
1778:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 15171              		.loc 1 1778 9 view .LVU3984
 15172 0006 9847     		blx	r3
 15173              	.LVL1124:
1779:src/xeq.c     ****     return f;
 15174              		.loc 1 1779 5 is_stmt 1 view .LVU3985
1780:src/xeq.c     ****  }
 15175              		.loc 1 1780 5 view .LVU3986
1780:src/xeq.c     ****  }
 15176              		.loc 1 1780 5 is_stmt 0 view .LVU3987
 15177              	.LBE2677:
 15178              	.LBE2680:
 15179              	.LBB2681:
 15180              	.LBI2681:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15181              		.loc 1 1323 6 is_stmt 1 view .LVU3988
 15182              	.LBB2682:
1324:src/xeq.c     **** }
 15183              		.loc 1 1324 2 view .LVU3989
 15184              	.LBE2682:
 15185              	.LBE2681:
 15186              	.LBB2684:
 15187              	.LBB2678:
1779:src/xeq.c     ****     return f;
 15188              		.loc 1 1779 13 is_stmt 0 view .LVU3990
 15189 0008 C0F31300 		ubfx	r0, r0, #0, #20
 15190              	.LVL1125:
1779:src/xeq.c     ****     return f;
 15191              		.loc 1 1779 23 view .LVU3991
 15192 000c 00EB8000 		add	r0, r0, r0, lsl #2
1779:src/xeq.c     ****     return f;
 15193              		.loc 1 1779 7 view .LVU3992
 15194 0010 C209     		lsrs	r2, r0, #7
 15195              	.LBE2678:
 15196              	.LBE2684:
 15197              	.LBB2685:
 15198              	.LBB2683:
1324:src/xeq.c     **** }
 15199              		.loc 1 1324 2 view .LVU3993
 15200 0012 0021     		movs	r1, #0
 15201 0014 D317     		asrs	r3, r2, #31
 15202 0016 0091     		str	r1, [sp]
ARM GAS  /tmp/ccjeMhND.s 			page 429


 15203 0018 6420     		movs	r0, #100
 15204 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 15205              	.LVL1126:
1324:src/xeq.c     **** }
 15206              		.loc 1 1324 2 view .LVU3994
 15207              	.LBE2683:
 15208              	.LBE2685:
1794:src/xeq.c     **** 
 15209              		.loc 1 1794 1 view .LVU3995
 15210 001e 03B0     		add	sp, sp, #12
 15211              		.cfi_def_cfa_offset 4
 15212              		@ sp needed
 15213 0020 5DF804FB 		ldr	pc, [sp], #4
 15214              	.L1071:
 15215              		.align	2
 15216              	.L1070:
 15217 0024 B9040008 		.word	134218937
 15218              		.cfi_endproc
 15219              	.LFE130:
 15221              		.section	.text.op_voltage,"ax",%progbits
 15222              		.align	1
 15223              		.p2align 2,,3
 15224              		.global	op_voltage
 15225              		.syntax unified
 15226              		.thumb
 15227              		.thumb_func
 15228              		.fpu fpv4-sp-d16
 15230              	op_voltage:
 15231              	.LVL1127:
 15232              	.LFB131:
1797:src/xeq.c     **** 	decNumber t, u;
 15233              		.loc 1 1797 32 is_stmt 1 view -0
 15234              		.cfi_startproc
 15235              		@ args = 0, pretend = 0, frame = 72
 15236              		@ frame_needed = 0, uses_anonymous_args = 0
1798:src/xeq.c     **** #ifdef REALBUILD
 15237              		.loc 1 1798 2 view .LVU3997
1802:src/xeq.c     **** 	v = v / 100;
 15238              		.loc 1 1802 2 view .LVU3998
1797:src/xeq.c     **** 	decNumber t, u;
 15239              		.loc 1 1797 32 is_stmt 0 view .LVU3999
 15240 0000 00B5     		push	{lr}
 15241              		.cfi_def_cfa_offset 4
 15242              		.cfi_offset 14, -4
1802:src/xeq.c     **** 	v = v / 100;
 15243              		.loc 1 1802 10 view .LVU4000
 15244 0002 154B     		ldr	r3, .L1076
1797:src/xeq.c     **** 	decNumber t, u;
 15245              		.loc 1 1797 32 view .LVU4001
 15246 0004 95B0     		sub	sp, sp, #84
 15247              		.cfi_def_cfa_offset 88
1802:src/xeq.c     **** 	v = v / 100;
 15248              		.loc 1 1802 10 view .LVU4002
 15249 0006 9847     		blx	r3
 15250              	.LVL1128:
1808:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15251              		.loc 1 1808 6 view .LVU4003
ARM GAS  /tmp/ccjeMhND.s 			page 430


 15252 0008 144B     		ldr	r3, .L1076+4
1803:src/xeq.c     **** #else
 15253              		.loc 1 1803 4 view .LVU4004
 15254 000a 154A     		ldr	r2, .L1076+8
1808:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15255              		.loc 1 1808 6 view .LVU4005
 15256 000c 1B68     		ldr	r3, [r3]
 15257              	.LVL1129:
1803:src/xeq.c     **** #else
 15258              		.loc 1 1803 2 is_stmt 1 view .LVU4006
1808:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15259              		.loc 1 1808 6 is_stmt 0 view .LVU4007
 15260 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1803:src/xeq.c     **** #else
 15261              		.loc 1 1803 4 view .LVU4008
 15262 0012 82FB0012 		smull	r1, r2, r2, r0
1808:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15263              		.loc 1 1808 5 view .LVU4009
 15264 0016 DB07     		lsls	r3, r3, #31
1803:src/xeq.c     **** #else
 15265              		.loc 1 1803 4 view .LVU4010
 15266 0018 4FEAE070 		asr	r0, r0, #31
 15267              	.LVL1130:
1803:src/xeq.c     **** #else
 15268              		.loc 1 1803 4 view .LVU4011
 15269 001c C0EB6212 		rsb	r2, r0, r2, asr #5
 15270              	.LVL1131:
1808:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15271              		.loc 1 1808 2 is_stmt 1 view .LVU4012
1808:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15272              		.loc 1 1808 5 is_stmt 0 view .LVU4013
 15273 0020 08D5     		bpl	.L1073
1809:src/xeq.c     **** 	} else {
 15274              		.loc 1 1809 3 is_stmt 1 view .LVU4014
 15275              	.LVL1132:
 15276              	.LBB2686:
 15277              	.LBI2686:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15278              		.loc 1 1323 6 view .LVU4015
 15279              	.LBB2687:
1324:src/xeq.c     **** }
 15280              		.loc 1 1324 2 view .LVU4016
 15281 0022 0023     		movs	r3, #0
 15282 0024 0093     		str	r3, [sp]
 15283 0026 6420     		movs	r0, #100
 15284 0028 D317     		asrs	r3, r2, #31
 15285 002a FFF7FEFF 		bl	set_reg_n_int_sgn
 15286              	.LVL1133:
1324:src/xeq.c     **** }
 15287              		.loc 1 1324 2 is_stmt 0 view .LVU4017
 15288              	.LBE2687:
 15289              	.LBE2686:
1815:src/xeq.c     **** 
 15290              		.loc 1 1815 1 view .LVU4018
 15291 002e 15B0     		add	sp, sp, #84
 15292              		.cfi_remember_state
 15293              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccjeMhND.s 			page 431


 15294              		@ sp needed
 15295 0030 5DF804FB 		ldr	pc, [sp], #4
 15296              	.LVL1134:
 15297              	.L1073:
 15298              		.cfi_restore_state
1811:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
 15299              		.loc 1 1811 3 is_stmt 1 view .LVU4019
 15300 0034 D317     		asrs	r3, r2, #31
 15301 0036 02A8     		add	r0, sp, #8
 15302 0038 FFF7FEFF 		bl	ullint_to_dn
 15303              	.LVL1135:
1812:src/xeq.c     **** 		setX(&u);
 15304              		.loc 1 1812 3 view .LVU4020
 15305 003c 02A9     		add	r1, sp, #8
 15306 003e 4FF0FF32 		mov	r2, #-1
 15307 0042 0BA8     		add	r0, sp, #44
 15308 0044 FFF7FEFF 		bl	dn_mulpow10
 15309              	.LVL1136:
1813:src/xeq.c     **** 	}
 15310              		.loc 1 1813 3 view .LVU4021
 15311              	.LBB2688:
 15312              	.LBI2688:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 15313              		.loc 1 809 6 view .LVU4022
 15314              	.LBB2689:
 810:src/xeq.c     **** }
 15315              		.loc 1 810 2 view .LVU4023
 15316 0048 0BA9     		add	r1, sp, #44
 15317              	.LVL1137:
 810:src/xeq.c     **** }
 15318              		.loc 1 810 2 is_stmt 0 view .LVU4024
 15319 004a 6420     		movs	r0, #100
 15320 004c FFF7FEFF 		bl	setRegister
 15321              	.LVL1138:
 810:src/xeq.c     **** }
 15322              		.loc 1 810 2 view .LVU4025
 15323              	.LBE2689:
 15324              	.LBE2688:
1815:src/xeq.c     **** 
 15325              		.loc 1 1815 1 view .LVU4026
 15326 0050 15B0     		add	sp, sp, #84
 15327              		.cfi_def_cfa_offset 4
 15328              		@ sp needed
 15329 0052 5DF804FB 		ldr	pc, [sp], #4
 15330              	.L1077:
 15331 0056 00BF     		.align	2
 15332              	.L1076:
 15333 0058 F1020008 		.word	134218481
 15334 005c 00000000 		.word	main_ram
 15335 0060 1F85EB51 		.word	1374389535
 15336              		.cfi_endproc
 15337              	.LFE131:
 15339              		.section	.text.free_mem,"ax",%progbits
 15340              		.align	1
 15341              		.p2align 2,,3
 15342              		.global	free_mem
 15343              		.syntax unified
ARM GAS  /tmp/ccjeMhND.s 			page 432


 15344              		.thumb
 15345              		.thumb_func
 15346              		.fpu fpv4-sp-d16
 15348              	free_mem:
 15349              	.LFB132:
1820:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 15350              		.loc 1 1820 20 is_stmt 1 view -0
 15351              		.cfi_startproc
 15352              		@ args = 0, pretend = 0, frame = 0
 15353              		@ frame_needed = 0, uses_anonymous_args = 0
 15354              		@ link register save eliminated.
1821:src/xeq.c     **** }
 15355              		.loc 1 1821 2 view .LVU4028
1821:src/xeq.c     **** }
 15356              		.loc 1 1821 22 is_stmt 0 view .LVU4029
 15357 0000 034A     		ldr	r2, .L1079
1821:src/xeq.c     **** }
 15358              		.loc 1 1821 20 view .LVU4030
 15359 0002 044B     		ldr	r3, .L1079+4
1821:src/xeq.c     **** }
 15360              		.loc 1 1821 22 view .LVU4031
 15361 0004 1268     		ldr	r2, [r2]
1821:src/xeq.c     **** }
 15362              		.loc 1 1821 20 view .LVU4032
 15363 0006 1B68     		ldr	r3, [r3]
1821:src/xeq.c     **** }
 15364              		.loc 1 1821 22 view .LVU4033
 15365 0008 B2F9E207 		ldrsh	r0, [r2, #2018]
1822:src/xeq.c     **** 
 15366              		.loc 1 1822 1 view .LVU4034
 15367 000c 1844     		add	r0, r0, r3
 15368 000e 7047     		bx	lr
 15369              	.L1080:
 15370              		.align	2
 15371              	.L1079:
 15372 0010 00000000 		.word	main_ram
 15373 0014 00000000 		.word	RetStkSize
 15374              		.cfi_endproc
 15375              	.LFE132:
 15377              		.section	.text.free_flash,"ax",%progbits
 15378              		.align	1
 15379              		.p2align 2,,3
 15380              		.global	free_flash
 15381              		.syntax unified
 15382              		.thumb
 15383              		.thumb_func
 15384              		.fpu fpv4-sp-d16
 15386              	free_flash:
 15387              	.LFB133:
1824:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 15388              		.loc 1 1824 22 is_stmt 1 view -0
 15389              		.cfi_startproc
 15390              		@ args = 0, pretend = 0, frame = 0
 15391              		@ frame_needed = 0, uses_anonymous_args = 0
 15392              		@ link register save eliminated.
1825:src/xeq.c     **** }
 15393              		.loc 1 1825 2 view .LVU4036
ARM GAS  /tmp/ccjeMhND.s 			page 433


1825:src/xeq.c     **** }
 15394              		.loc 1 1825 38 is_stmt 0 view .LVU4037
 15395 0000 034B     		ldr	r3, .L1082
 15396 0002 1B68     		ldr	r3, [r3]
 15397 0004 5888     		ldrh	r0, [r3, #2]
1826:src/xeq.c     **** 
 15398              		.loc 1 1826 1 view .LVU4038
 15399 0006 C0F5FF50 		rsb	r0, r0, #8160
 15400 000a 1E30     		adds	r0, r0, #30
 15401 000c 7047     		bx	lr
 15402              	.L1083:
 15403 000e 00BF     		.align	2
 15404              	.L1082:
 15405 0010 00000000 		.word	library_ram
 15406              		.cfi_endproc
 15407              	.LFE133:
 15409              		.section	.text.get_mem,"ax",%progbits
 15410              		.align	1
 15411              		.p2align 2,,3
 15412              		.global	get_mem
 15413              		.syntax unified
 15414              		.thumb
 15415              		.thumb_func
 15416              		.fpu fpv4-sp-d16
 15418              	get_mem:
 15419              	.LVL1139:
 15420              	.LFB134:
1828:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 15421              		.loc 1 1828 29 is_stmt 1 view -0
 15422              		.cfi_startproc
 15423              		@ args = 0, pretend = 0, frame = 0
 15424              		@ frame_needed = 0, uses_anonymous_args = 0
1829:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15425              		.loc 1 1829 2 view .LVU4040
1828:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 15426              		.loc 1 1828 29 is_stmt 0 view .LVU4041
 15427 0000 00B5     		push	{lr}
 15428              		.cfi_def_cfa_offset 4
 15429              		.cfi_offset 14, -4
1829:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15430              		.loc 1 1829 2 view .LVU4042
 15431 0002 A928     		cmp	r0, #169
1828:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 15432              		.loc 1 1828 29 view .LVU4043
 15433 0004 83B0     		sub	sp, sp, #12
 15434              		.cfi_def_cfa_offset 16
1829:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15435              		.loc 1 1829 2 view .LVU4044
 15436 0006 23D0     		beq	.L1093
1829:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15437              		.loc 1 1829 2 discriminator 2 view .LVU4045
 15438 0008 AA28     		cmp	r0, #170
 15439 000a 18D0     		beq	.L1094
1829:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15440              		.loc 1 1829 2 discriminator 5 view .LVU4046
 15441 000c AC28     		cmp	r0, #172
 15442 000e 3CD0     		beq	.L1095
ARM GAS  /tmp/ccjeMhND.s 			page 434


 15443              	.LBB2690:
 15444              	.LBI2690:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 15445              		.loc 1 250 14 is_stmt 1 view .LVU4047
 15446              	.LBE2690:
 251:src/xeq.c     **** }
 15447              		.loc 1 251 2 view .LVU4048
 15448              	.LVL1140:
 15449              	.LBB2699:
 15450              	.LBB2691:
 15451              	.LBI2691:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 15452              		.loc 1 238 14 view .LVU4049
 15453              	.LBB2692:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 15454              		.loc 1 239 2 view .LVU4050
 15455              	.LBB2693:
 15456              	.LBI2693:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15457              		.loc 1 932 5 view .LVU4051
 15458              	.LBB2694:
 933:src/xeq.c     **** }
 15459              		.loc 1 933 2 view .LVU4052
 933:src/xeq.c     **** }
 15460              		.loc 1 933 12 is_stmt 0 view .LVU4053
 15461 0010 224B     		ldr	r3, .L1097
 15462 0012 1A68     		ldr	r2, [r3]
 933:src/xeq.c     **** }
 15463              		.loc 1 933 24 view .LVU4054
 15464 0014 B2F8E817 		ldrh	r1, [r2, #2024]
 15465              	.LBE2694:
 15466              	.LBE2693:
 15467              	.LBB2696:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 15468              		.loc 1 240 24 view .LVU4055
 15469 0018 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 15470              	.LBE2696:
 15471              	.LBB2697:
 15472              	.LBB2695:
 933:src/xeq.c     **** }
 15473              		.loc 1 933 24 view .LVU4056
 15474 001c 44F20103 		movw	r3, #16385
 15475              	.LBE2695:
 15476              	.LBE2697:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 15477              		.loc 1 239 5 view .LVU4057
 15478 0020 0B40     		ands	r3, r3, r1
 15479 0022 B3F5804F 		cmp	r3, #16384
 15480              	.LBB2698:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 15481              		.loc 1 240 3 is_stmt 1 view .LVU4058
 15482              	.LVL1141:
 241:src/xeq.c     **** 	}
 15483              		.loc 1 241 3 view .LVU4059
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 15484              		.loc 1 240 13 is_stmt 0 view .LVU4060
 15485 0026 04BF     		itt	eq
ARM GAS  /tmp/ccjeMhND.s 			page 435


 15486 0028 0C3A     		subeq	r2, r2, #12
 15487              	.LVL1142:
 241:src/xeq.c     **** 	}
 15488              		.loc 1 241 67 view .LVU4061
 15489 002a 5210     		asreq	r2, r2, #1
 15490              	.LBE2698:
 244:src/xeq.c     **** }
 15491              		.loc 1 244 3 is_stmt 1 view .LVU4062
 15492 002c 0023     		movs	r3, #0
 15493              	.LVL1143:
 15494              	.L1086:
 244:src/xeq.c     **** }
 15495              		.loc 1 244 3 is_stmt 0 view .LVU4063
 15496              	.LBE2692:
 15497              	.LBE2691:
 15498              	.LBE2699:
 15499              	.LBB2700:
 15500              	.LBI2700:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15501              		.loc 1 1323 6 is_stmt 1 discriminator 10 view .LVU4064
 15502              	.LBB2701:
1324:src/xeq.c     **** }
 15503              		.loc 1 1324 2 discriminator 10 view .LVU4065
 15504 002e 0021     		movs	r1, #0
 15505 0030 0091     		str	r1, [sp]
 15506 0032 6420     		movs	r0, #100
 15507 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 15508              	.LVL1144:
1324:src/xeq.c     **** }
 15509              		.loc 1 1324 2 is_stmt 0 discriminator 10 view .LVU4066
 15510              	.LBE2701:
 15511              	.LBE2700:
1834:src/xeq.c     **** 
 15512              		.loc 1 1834 1 discriminator 10 view .LVU4067
 15513 0038 03B0     		add	sp, sp, #12
 15514              		.cfi_remember_state
 15515              		.cfi_def_cfa_offset 4
 15516              		@ sp needed
 15517 003a 5DF804FB 		ldr	pc, [sp], #4
 15518              	.LVL1145:
 15519              	.L1094:
 15520              		.cfi_restore_state
 15521              	.LBB2702:
 15522              	.LBI2702:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 15523              		.loc 1 230 5 is_stmt 1 view .LVU4068
 15524              	.LBE2702:
 231:src/xeq.c     **** }
 15525              		.loc 1 231 2 view .LVU4069
 15526              	.LBB2723:
 15527              	.LBB2703:
 15528              	.LBI2703:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 15529              		.loc 1 222 5 view .LVU4070
 15530              	.LBB2704:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 15531              		.loc 1 223 2 view .LVU4071
ARM GAS  /tmp/ccjeMhND.s 			page 436


 15532              	.LBB2705:
 15533              	.LBI2705:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15534              		.loc 1 932 5 view .LVU4072
 15535              	.LBB2706:
 933:src/xeq.c     **** }
 15536              		.loc 1 933 2 view .LVU4073
 933:src/xeq.c     **** }
 15537              		.loc 1 933 12 is_stmt 0 view .LVU4074
 15538 003e 174B     		ldr	r3, .L1097
 15539 0040 1B68     		ldr	r3, [r3]
 15540              	.LVL1146:
 933:src/xeq.c     **** }
 15541              		.loc 1 933 12 view .LVU4075
 15542              	.LBE2706:
 15543              	.LBE2705:
 224:src/xeq.c     **** }
 15544              		.loc 1 224 2 is_stmt 1 view .LVU4076
 15545              	.LBB2709:
 15546              	.LBI2709:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 15547              		.loc 1 214 5 view .LVU4077
 15548              	.LBB2710:
 215:src/xeq.c     **** }
 15549              		.loc 1 215 2 view .LVU4078
 215:src/xeq.c     **** }
 15550              		.loc 1 215 9 is_stmt 0 view .LVU4079
 15551 0042 B3F9DE27 		ldrsh	r2, [r3, #2014]
 215:src/xeq.c     **** }
 15552              		.loc 1 215 57 view .LVU4080
 15553 0046 002A     		cmp	r2, #0
 15554 0048 0BDB     		blt	.L1096
 15555 004a 0022     		movs	r2, #0
 15556 004c 0023     		movs	r3, #0
 15557              	.LVL1147:
 215:src/xeq.c     **** }
 15558              		.loc 1 215 57 view .LVU4081
 15559 004e EEE7     		b	.L1086
 15560              	.LVL1148:
 15561              	.L1093:
 215:src/xeq.c     **** }
 15562              		.loc 1 215 57 view .LVU4082
 15563              	.LBE2710:
 15564              	.LBE2709:
 15565              	.LBE2704:
 15566              	.LBE2703:
 15567              	.LBE2723:
 15568              	.LBB2724:
 15569              	.LBI2724:
1820:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 15570              		.loc 1 1820 5 is_stmt 1 view .LVU4083
 15571              	.LBB2725:
1821:src/xeq.c     **** }
 15572              		.loc 1 1821 2 view .LVU4084
1821:src/xeq.c     **** }
 15573              		.loc 1 1821 22 is_stmt 0 view .LVU4085
 15574 0050 124A     		ldr	r2, .L1097
ARM GAS  /tmp/ccjeMhND.s 			page 437


1821:src/xeq.c     **** }
 15575              		.loc 1 1821 20 view .LVU4086
 15576 0052 134B     		ldr	r3, .L1097+4
1821:src/xeq.c     **** }
 15577              		.loc 1 1821 22 view .LVU4087
 15578 0054 1268     		ldr	r2, [r2]
1821:src/xeq.c     **** }
 15579              		.loc 1 1821 20 view .LVU4088
 15580 0056 1B68     		ldr	r3, [r3]
1821:src/xeq.c     **** }
 15581              		.loc 1 1821 22 view .LVU4089
 15582 0058 B2F9E227 		ldrsh	r2, [r2, #2018]
1821:src/xeq.c     **** }
 15583              		.loc 1 1821 20 view .LVU4090
 15584 005c 1A44     		add	r2, r2, r3
 15585 005e 0023     		movs	r3, #0
 15586              	.LBE2725:
 15587              	.LBE2724:
 15588 0060 E5E7     		b	.L1086
 15589              	.LVL1149:
 15590              	.L1096:
 15591              	.LBB2726:
 15592              	.LBB2722:
 15593              	.LBB2721:
 15594              	.LBB2715:
 15595              	.LBB2707:
 933:src/xeq.c     **** }
 15596              		.loc 1 933 24 view .LVU4091
 15597 0062 B3F8E807 		ldrh	r0, [r3, #2024]
 15598              	.LVL1150:
 933:src/xeq.c     **** }
 15599              		.loc 1 933 24 view .LVU4092
 15600              	.LBE2707:
 15601              	.LBE2715:
 15602              	.LBB2716:
 15603              	.LBB2711:
 215:src/xeq.c     **** }
 15604              		.loc 1 215 25 view .LVU4093
 15605 0066 0F49     		ldr	r1, .L1097+8
 15606              	.LBE2711:
 15607              	.LBE2716:
 15608              	.LBB2717:
 15609              	.LBB2708:
 933:src/xeq.c     **** }
 15610              		.loc 1 933 24 view .LVU4094
 15611 0068 44F20103 		movw	r3, #16385
 15612              	.LVL1151:
 933:src/xeq.c     **** }
 15613              		.loc 1 933 24 view .LVU4095
 15614              	.LBE2708:
 15615              	.LBE2717:
 15616              	.LBB2718:
 15617              	.LBB2712:
 215:src/xeq.c     **** }
 15618              		.loc 1 215 25 view .LVU4096
 15619 006c 0968     		ldr	r1, [r1]
 15620              	.LBE2712:
ARM GAS  /tmp/ccjeMhND.s 			page 438


 15621              	.LBE2718:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 15622              		.loc 1 223 73 view .LVU4097
 15623 006e 0340     		ands	r3, r3, r0
 15624 0070 A3F58043 		sub	r3, r3, #16384
 15625              	.LBB2719:
 15626              	.LBB2713:
 215:src/xeq.c     **** }
 15627              		.loc 1 215 57 view .LVU4098
 15628 0074 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 15629              	.LBE2713:
 15630              	.LBE2719:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 15631              		.loc 1 223 73 view .LVU4099
 15632 0078 B3FA83F3 		clz	r3, r3
 15633 007c 5B09     		lsrs	r3, r3, #5
 15634 007e 0233     		adds	r3, r3, #2
 15635              	.LBB2720:
 15636              	.LBB2714:
 215:src/xeq.c     **** }
 15637              		.loc 1 215 57 view .LVU4100
 15638 0080 C2F30B02 		ubfx	r2, r2, #0, #12
 15639 0084 1A41     		asrs	r2, r2, r3
 15640 0086 D317     		asrs	r3, r2, #31
 15641 0088 D1E7     		b	.L1086
 15642              	.LVL1152:
 15643              	.L1095:
 215:src/xeq.c     **** }
 15644              		.loc 1 215 57 view .LVU4101
 15645              	.LBE2714:
 15646              	.LBE2720:
 15647              	.LBE2721:
 15648              	.LBE2722:
 15649              	.LBE2726:
 15650              	.LBB2727:
 15651              	.LBI2727:
1824:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 15652              		.loc 1 1824 5 is_stmt 1 view .LVU4102
 15653              	.LBB2728:
1825:src/xeq.c     **** }
 15654              		.loc 1 1825 2 view .LVU4103
1825:src/xeq.c     **** }
 15655              		.loc 1 1825 38 is_stmt 0 view .LVU4104
 15656 008a 074B     		ldr	r3, .L1097+12
 15657 008c 1B68     		ldr	r3, [r3]
 15658 008e 5A88     		ldrh	r2, [r3, #2]
1825:src/xeq.c     **** }
 15659              		.loc 1 1825 27 view .LVU4105
 15660 0090 C2F5FF52 		rsb	r2, r2, #8160
 15661 0094 1E32     		adds	r2, r2, #30
 15662 0096 0023     		movs	r3, #0
 15663              	.LBE2728:
 15664              	.LBE2727:
 15665 0098 C9E7     		b	.L1086
 15666              	.L1098:
 15667 009a 00BF     		.align	2
 15668              	.L1097:
ARM GAS  /tmp/ccjeMhND.s 			page 439


 15669 009c 00000000 		.word	main_ram
 15670 00a0 00000000 		.word	RetStkSize
 15671 00a4 00000000 		.word	RetStk
 15672 00a8 00000000 		.word	library_ram
 15673              		.cfi_endproc
 15674              	.LFE134:
 15676              		.section	.text.cmdputkey,"ax",%progbits
 15677              		.align	1
 15678              		.p2align 2,,3
 15679              		.global	cmdputkey
 15680              		.syntax unified
 15681              		.thumb
 15682              		.thumb_func
 15683              		.fpu fpv4-sp-d16
 15685              	cmdputkey:
 15686              	.LVL1153:
 15687              	.LFB137:
1869:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 15688              		.loc 1 1869 1 is_stmt 1 view -0
 15689              		.cfi_startproc
 15690              		@ args = 0, pretend = 0, frame = 0
 15691              		@ frame_needed = 0, uses_anonymous_args = 0
1870:src/xeq.c     **** 
 15692              		.loc 1 1870 2 view .LVU4107
1869:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 15693              		.loc 1 1869 1 is_stmt 0 view .LVU4108
 15694 0000 10B5     		push	{r4, lr}
 15695              		.cfi_def_cfa_offset 8
 15696              		.cfi_offset 4, -8
 15697              		.cfi_offset 14, -4
1870:src/xeq.c     **** 
 15698              		.loc 1 1870 16 view .LVU4109
 15699 0002 FFF7FEFF 		bl	get_keycode_from_reg
 15700              	.LVL1154:
1872:src/xeq.c     **** 		set_running_off();
 15701              		.loc 1 1872 2 is_stmt 1 view .LVU4110
1872:src/xeq.c     **** 		set_running_off();
 15702              		.loc 1 1872 5 is_stmt 0 view .LVU4111
 15703 0006 041E     		subs	r4, r0, #0
 15704 0008 00DA     		bge	.L1102
1876:src/xeq.c     **** 
 15705              		.loc 1 1876 1 view .LVU4112
 15706 000a 10BD     		pop	{r4, pc}
 15707              	.L1102:
1873:src/xeq.c     **** 		put_key(c);
 15708              		.loc 1 1873 3 is_stmt 1 view .LVU4113
 15709              	.LBB2729:
 15710              	.LBI2729:
5580:src/xeq.c     **** 	set_running_off_sst();
 15711              		.loc 1 5580 6 view .LVU4114
 15712              	.LBB2730:
5581:src/xeq.c     **** 	State.entryp = 0;
 15713              		.loc 1 5581 2 view .LVU4115
 15714              	.LBB2731:
 15715              	.LBI2731:
5572:src/xeq.c     **** 	Running = 0;
 15716              		.loc 1 5572 6 view .LVU4116
ARM GAS  /tmp/ccjeMhND.s 			page 440


 15717              	.LBB2732:
5573:src/xeq.c     **** }
 15718              		.loc 1 5573 2 view .LVU4117
 15719              	.LBE2732:
 15720              	.LBE2731:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 15721              		.loc 1 5582 15 is_stmt 0 view .LVU4118
 15722 000c 094B     		ldr	r3, .L1103
 15723              	.LBB2735:
 15724              	.LBB2733:
5573:src/xeq.c     **** }
 15725              		.loc 1 5573 10 view .LVU4119
 15726 000e 0A4A     		ldr	r2, .L1103+4
 15727              	.LBE2733:
 15728              	.LBE2735:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 15729              		.loc 1 5582 15 view .LVU4120
 15730 0010 1B68     		ldr	r3, [r3]
 15731              	.LBB2736:
 15732              	.LBB2734:
5573:src/xeq.c     **** }
 15733              		.loc 1 5573 10 view .LVU4121
 15734 0012 0021     		movs	r1, #0
 15735 0014 1160     		str	r1, [r2]
 15736              	.LBE2734:
 15737              	.LBE2736:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 15738              		.loc 1 5582 2 is_stmt 1 view .LVU4122
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 15739              		.loc 1 5582 15 is_stmt 0 view .LVU4123
 15740 0016 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 15741 001a 61F30412 		bfi	r2, r1, #4, #1
 15742              		.loc 1 5583 2 view .LVU4124
 15743 001e 8A20     		movs	r0, #138
 15744              	.LVL1155:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 15745              		.loc 1 5582 15 view .LVU4125
 15746 0020 83F8DD27 		strb	r2, [r3, #2013]
 15747              		.loc 1 5583 2 is_stmt 1 view .LVU4126
 15748 0024 FFF7FEFF 		bl	dot
 15749              	.LVL1156:
 15750              	.LBE2730:
 15751              	.LBE2729:
1874:src/xeq.c     **** 	}
 15752              		.loc 1 1874 3 view .LVU4127
 15753 0028 2046     		mov	r0, r4
1876:src/xeq.c     **** 
 15754              		.loc 1 1876 1 is_stmt 0 view .LVU4128
 15755 002a BDE81040 		pop	{r4, lr}
 15756              		.cfi_restore 14
 15757              		.cfi_restore 4
 15758              		.cfi_def_cfa_offset 0
 15759              	.LVL1157:
1874:src/xeq.c     **** 	}
 15760              		.loc 1 1874 3 view .LVU4129
 15761 002e FFF7FEBF 		b	put_key
 15762              	.LVL1158:
ARM GAS  /tmp/ccjeMhND.s 			page 441


 15763              	.L1104:
1874:src/xeq.c     **** 	}
 15764              		.loc 1 1874 3 view .LVU4130
 15765 0032 00BF     		.align	2
 15766              	.L1103:
 15767 0034 00000000 		.word	main_ram
 15768 0038 00000000 		.word	Running
 15769              		.cfi_endproc
 15770              	.LFE137:
 15772              		.section	.text.cmdkeytype,"ax",%progbits
 15773              		.align	1
 15774              		.p2align 2,,3
 15775              		.global	cmdkeytype
 15776              		.syntax unified
 15777              		.thumb
 15778              		.thumb_func
 15779              		.fpu fpv4-sp-d16
 15781              	cmdkeytype:
 15782              	.LVL1159:
 15783              	.LFB138:
1884:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 15784              		.loc 1 1884 1 is_stmt 1 view -0
 15785              		.cfi_startproc
 15786              		@ args = 0, pretend = 0, frame = 48
 15787              		@ frame_needed = 0, uses_anonymous_args = 0
1885:src/xeq.c     **** 	if ( c >= 0 ) {
 15788              		.loc 1 1885 2 view .LVU4132
1884:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 15789              		.loc 1 1884 1 is_stmt 0 view .LVU4133
 15790 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 15791              		.cfi_def_cfa_offset 20
 15792              		.cfi_offset 4, -20
 15793              		.cfi_offset 5, -16
 15794              		.cfi_offset 6, -12
 15795              		.cfi_offset 7, -8
 15796              		.cfi_offset 14, -4
 15797 0002 8FB0     		sub	sp, sp, #60
 15798              		.cfi_def_cfa_offset 80
1885:src/xeq.c     **** 	if ( c >= 0 ) {
 15799              		.loc 1 1885 16 view .LVU4134
 15800 0004 FFF7FEFF 		bl	get_keycode_from_reg
 15801              	.LVL1160:
1886:src/xeq.c     **** 		const char types[] = {
 15802              		.loc 1 1886 2 is_stmt 1 view .LVU4135
1886:src/xeq.c     **** 		const char types[] = {
 15803              		.loc 1 1886 5 is_stmt 0 view .LVU4136
 15804 0008 061E     		subs	r6, r0, #0
 15805 000a 17DB     		blt	.L1105
 15806              	.LBB2737:
1887:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15807              		.loc 1 1887 3 is_stmt 1 view .LVU4137
1887:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15808              		.loc 1 1887 14 is_stmt 0 view .LVU4138
 15809 000c 0E4D     		ldr	r5, .L1113
 15810              	.LBB2738:
 15811              	.LBB2739:
 15812              	.LBB2740:
ARM GAS  /tmp/ccjeMhND.s 			page 442


 15813              	.LBB2741:
 735:src/xeq.c     **** }
 15814              		.loc 1 735 15 view .LVU4139
 15815 000e 0F4F     		ldr	r7, .L1113+4
 15816              	.LBE2741:
 15817              	.LBE2740:
 15818              	.LBE2739:
 15819              	.LBE2738:
1887:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15820              		.loc 1 1887 14 view .LVU4140
 15821 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 15822              	.LVL1161:
1887:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15823              		.loc 1 1887 14 view .LVU4141
 15824 0012 03AC     		add	r4, sp, #12
 15825 0014 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 15826 0016 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 15827 0018 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 15828 001a 95E80700 		ldm	r5, {r0, r1, r2}
 15829              	.LBB2750:
 15830              	.LBB2746:
 15831              	.LBB2744:
 15832              	.LBB2742:
 735:src/xeq.c     **** }
 15833              		.loc 1 735 15 view .LVU4142
 15834 001e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 15835              	.LBE2742:
 15836              	.LBE2744:
 15837              	.LBE2746:
 15838              	.LBE2750:
1887:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15839              		.loc 1 1887 14 view .LVU4143
 15840 0020 03C4     		stmia	r4!, {r0, r1}
 15841              	.LBB2751:
 15842              	.LBB2747:
 739:src/xeq.c     **** 		lift();
 15843              		.loc 1 739 5 view .LVU4144
 15844 0022 5B06     		lsls	r3, r3, #25
 15845              	.LBE2747:
 15846              	.LBE2751:
1887:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15847              		.loc 1 1887 14 view .LVU4145
 15848 0024 2270     		strb	r2, [r4]
1895:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
 15849              		.loc 1 1895 3 is_stmt 1 view .LVU4146
 15850              	.LBB2752:
 15851              	.LBI2738:
 738:src/xeq.c     **** 	if (get_lift())
 15852              		.loc 1 738 6 view .LVU4147
 15853              	.LBB2748:
 739:src/xeq.c     **** 		lift();
 15854              		.loc 1 739 2 view .LVU4148
 15855              	.LBB2745:
 15856              	.LBI2740:
 734:src/xeq.c     **** 	return State2.state_lift;
 15857              		.loc 1 734 12 view .LVU4149
 15858              	.LBB2743:
ARM GAS  /tmp/ccjeMhND.s 			page 443


 735:src/xeq.c     **** }
 15859              		.loc 1 735 2 view .LVU4150
 15860              	.LBE2743:
 15861              	.LBE2745:
 739:src/xeq.c     **** 		lift();
 15862              		.loc 1 739 5 is_stmt 0 view .LVU4151
 15863 0026 0BD4     		bmi	.L1112
 15864              	.L1107:
 15865              	.LBE2748:
 15866              	.LBE2752:
1896:src/xeq.c     **** 	}
 15867              		.loc 1 1896 3 is_stmt 1 view .LVU4152
 15868              	.LVL1162:
 15869              	.LBB2753:
 15870              	.LBI2753:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15871              		.loc 1 1323 6 view .LVU4153
 15872              	.LBB2754:
1324:src/xeq.c     **** }
 15873              		.loc 1 1324 2 view .LVU4154
 15874              	.LBE2754:
 15875              	.LBE2753:
1896:src/xeq.c     **** 	}
 15876              		.loc 1 1896 21 is_stmt 0 view .LVU4155
 15877 0028 0EAB     		add	r3, sp, #56
 15878 002a 9819     		adds	r0, r3, r6
 15879              	.LBB2756:
 15880              	.LBB2755:
1324:src/xeq.c     **** }
 15881              		.loc 1 1324 2 view .LVU4156
 15882 002c 0021     		movs	r1, #0
 15883 002e 10F82C2C 		ldrb	r2, [r0, #-44]	@ zero_extendqisi2
 15884 0032 0091     		str	r1, [sp]
 15885              	.LVL1163:
1324:src/xeq.c     **** }
 15886              		.loc 1 1324 2 view .LVU4157
 15887 0034 0023     		movs	r3, #0
 15888 0036 6420     		movs	r0, #100
 15889 0038 FFF7FEFF 		bl	set_reg_n_int_sgn
 15890              	.LVL1164:
 15891              	.L1105:
1324:src/xeq.c     **** }
 15892              		.loc 1 1324 2 view .LVU4158
 15893              	.LBE2755:
 15894              	.LBE2756:
 15895              	.LBE2737:
1898:src/xeq.c     **** 
 15896              		.loc 1 1898 1 view .LVU4159
 15897 003c 0FB0     		add	sp, sp, #60
 15898              		.cfi_remember_state
 15899              		.cfi_def_cfa_offset 20
 15900              		@ sp needed
 15901 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 15902              	.LVL1165:
 15903              	.L1112:
 15904              		.cfi_restore_state
 15905              	.LBB2758:
ARM GAS  /tmp/ccjeMhND.s 			page 444


 15906              	.LBB2757:
 15907              	.LBB2749:
 740:src/xeq.c     **** }
 15908              		.loc 1 740 3 is_stmt 1 view .LVU4160
 15909 0040 FFF7FEFF 		bl	lift
 15910              	.LVL1166:
 15911 0044 F0E7     		b	.L1107
 15912              	.L1114:
 15913 0046 00BF     		.align	2
 15914              	.L1113:
 15915 0048 00000000 		.word	.LANCHOR5
 15916 004c 00000000 		.word	StateWhileOn
 15917              	.LBE2749:
 15918              	.LBE2757:
 15919              	.LBE2758:
 15920              		.cfi_endproc
 15921              	.LFE138:
 15923              		.section	.rodata.op_query_xtal.str1.4,"aMS",%progbits,1
 15924              		.align	2
 15925              	.LC2:
 15926 0000 74727565 		.ascii	"true\000"
 15926      00
 15927              		.section	.text.op_query_xtal,"ax",%progbits
 15928              		.align	1
 15929              		.p2align 2,,3
 15930              		.global	op_query_xtal
 15931              		.syntax unified
 15932              		.thumb
 15933              		.thumb_func
 15934              		.fpu fpv4-sp-d16
 15936              	op_query_xtal:
 15937              	.LVL1167:
 15938              	.LFB141:
1918:src/xeq.c     **** 	fin_tst(Xtal);
 15939              		.loc 1 1918 35 view -0
 15940              		.cfi_startproc
 15941              		@ args = 0, pretend = 0, frame = 0
 15942              		@ frame_needed = 0, uses_anonymous_args = 0
 15943              		@ link register save eliminated.
1919:src/xeq.c     **** }
 15944              		.loc 1 1919 2 view .LVU4162
 15945              	.LBB2759:
 15946              	.LBI2759:
2363:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 15947              		.loc 1 2363 6 view .LVU4163
 15948              	.LBB2760:
2364:src/xeq.c     **** 	if (Running || XromRunning) {
 15949              		.loc 1 2364 2 view .LVU4164
2365:src/xeq.c     **** 		if (! a && incpc())
 15950              		.loc 1 2365 2 view .LVU4165
2365:src/xeq.c     **** 		if (! a && incpc())
 15951              		.loc 1 2365 6 is_stmt 0 view .LVU4166
 15952 0000 044A     		ldr	r2, .L1117
2365:src/xeq.c     **** 		if (! a && incpc())
 15953              		.loc 1 2365 14 view .LVU4167
 15954 0002 054B     		ldr	r3, .L1117+4
 15955 0004 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccjeMhND.s 			page 445


 15956 0006 1B68     		ldr	r3, [r3]
 15957 0008 1343     		orrs	r3, r2, r3
 15958 000a 02D1     		bne	.L1115
2370:src/xeq.c     **** #ifdef INFRARED
 15959              		.loc 1 2370 3 is_stmt 1 view .LVU4168
2370:src/xeq.c     **** #ifdef INFRARED
 15960              		.loc 1 2370 11 is_stmt 0 view .LVU4169
 15961 000c 034B     		ldr	r3, .L1117+8
 15962 000e 044A     		ldr	r2, .L1117+12
 15963 0010 1A60     		str	r2, [r3]
 15964              	.LVL1168:
 15965              	.L1115:
2370:src/xeq.c     **** #ifdef INFRARED
 15966              		.loc 1 2370 11 view .LVU4170
 15967              	.LBE2760:
 15968              	.LBE2759:
1920:src/xeq.c     **** 
 15969              		.loc 1 1920 1 view .LVU4171
 15970 0012 7047     		bx	lr
 15971              	.L1118:
 15972              		.align	2
 15973              	.L1117:
 15974 0014 00000000 		.word	Running
 15975 0018 00000000 		.word	XromRunning
 15976 001c 00000000 		.word	DispMsg
 15977 0020 00000000 		.word	.LC2
 15978              		.cfi_endproc
 15979              	.LFE141:
 15981              		.section	.rodata.op_query_print.str1.4,"aMS",%progbits,1
 15982              		.align	2
 15983              	.LC3:
 15984 0000 66616C73 		.ascii	"false\000"
 15984      6500
 15985              		.section	.text.op_query_print,"ax",%progbits
 15986              		.align	1
 15987              		.p2align 2,,3
 15988              		.global	op_query_print
 15989              		.syntax unified
 15990              		.thumb
 15991              		.thumb_func
 15992              		.fpu fpv4-sp-d16
 15994              	op_query_print:
 15995              	.LVL1169:
 15996              	.LFB142:
1922:src/xeq.c     **** #ifdef INFRARED
 15997              		.loc 1 1922 36 is_stmt 1 view -0
 15998              		.cfi_startproc
 15999              		@ args = 0, pretend = 0, frame = 0
 16000              		@ frame_needed = 0, uses_anonymous_args = 0
 16001              		@ link register save eliminated.
1926:src/xeq.c     **** #endif
 16002              		.loc 1 1926 2 view .LVU4173
 16003              	.LBB2761:
 16004              	.LBI2761:
2363:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 16005              		.loc 1 2363 6 view .LVU4174
 16006              	.LBB2762:
ARM GAS  /tmp/ccjeMhND.s 			page 446


2364:src/xeq.c     **** 	if (Running || XromRunning) {
 16007              		.loc 1 2364 2 view .LVU4175
2365:src/xeq.c     **** 		if (! a && incpc())
 16008              		.loc 1 2365 2 view .LVU4176
2365:src/xeq.c     **** 		if (! a && incpc())
 16009              		.loc 1 2365 6 is_stmt 0 view .LVU4177
 16010 0000 054A     		ldr	r2, .L1122
2365:src/xeq.c     **** 		if (! a && incpc())
 16011              		.loc 1 2365 14 view .LVU4178
 16012 0002 064B     		ldr	r3, .L1122+4
 16013 0004 1268     		ldr	r2, [r2]
 16014 0006 1B68     		ldr	r3, [r3]
 16015 0008 1343     		orrs	r3, r2, r3
 16016 000a 03D1     		bne	.L1121
2370:src/xeq.c     **** #ifdef INFRARED
 16017              		.loc 1 2370 3 is_stmt 1 view .LVU4179
2370:src/xeq.c     **** #ifdef INFRARED
 16018              		.loc 1 2370 11 is_stmt 0 view .LVU4180
 16019 000c 044B     		ldr	r3, .L1122+8
 16020 000e 054A     		ldr	r2, .L1122+12
 16021 0010 1A60     		str	r2, [r3]
 16022              	.LVL1170:
2370:src/xeq.c     **** #ifdef INFRARED
 16023              		.loc 1 2370 11 view .LVU4181
 16024              	.LBE2762:
 16025              	.LBE2761:
1928:src/xeq.c     **** 
 16026              		.loc 1 1928 1 view .LVU4182
 16027 0012 7047     		bx	lr
 16028              	.LVL1171:
 16029              	.L1121:
 16030              	.LBB2764:
 16031              	.LBB2763:
2366:src/xeq.c     **** 			decpc();
 16032              		.loc 1 2366 3 is_stmt 1 view .LVU4183
 16033 0014 FFF7FEBF 		b	fin_tst.part.0
 16034              	.LVL1172:
 16035              	.L1123:
2366:src/xeq.c     **** 			decpc();
 16036              		.loc 1 2366 3 is_stmt 0 view .LVU4184
 16037              		.align	2
 16038              	.L1122:
 16039 0018 00000000 		.word	Running
 16040 001c 00000000 		.word	XromRunning
 16041 0020 00000000 		.word	DispMsg
 16042 0024 00000000 		.word	.LC3
 16043              	.LBE2763:
 16044              	.LBE2764:
 16045              		.cfi_endproc
 16046              	.LFE142:
 16048              		.section	.text.cmdstostk,"ax",%progbits
 16049              		.align	1
 16050              		.p2align 2,,3
 16051              		.global	cmdstostk
 16052              		.syntax unified
 16053              		.thumb
 16054              		.thumb_func
ARM GAS  /tmp/ccjeMhND.s 			page 447


 16055              		.fpu fpv4-sp-d16
 16057              	cmdstostk:
 16058              	.LVL1173:
 16059              	.LFB144:
1941:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16060              		.loc 1 1941 48 is_stmt 1 view -0
 16061              		.cfi_startproc
 16062              		@ args = 0, pretend = 0, frame = 0
 16063              		@ frame_needed = 0, uses_anonymous_args = 0
1942:src/xeq.c     **** 
 16064              		.loc 1 1942 2 view .LVU4186
1941:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16065              		.loc 1 1941 48 is_stmt 0 view .LVU4187
 16066 0000 70B5     		push	{r4, r5, r6, lr}
 16067              		.cfi_def_cfa_offset 16
 16068              		.cfi_offset 4, -16
 16069              		.cfi_offset 5, -12
 16070              		.cfi_offset 6, -8
 16071              		.cfi_offset 14, -4
1941:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16072              		.loc 1 1941 48 view .LVU4188
 16073 0002 0546     		mov	r5, r0
1942:src/xeq.c     **** 
 16074              		.loc 1 1942 13 view .LVU4189
 16075 0004 FFF7FEFF 		bl	check_stack_overlap
 16076              	.LVL1174:
1944:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16077              		.loc 1 1944 2 is_stmt 1 view .LVU4190
1944:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16078              		.loc 1 1944 12 view .LVU4191
1944:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16079              		.loc 1 1944 2 is_stmt 0 view .LVU4192
 16080 0008 031E     		subs	r3, r0, #0
 16081 000a 0ADD     		ble	.L1124
 16082 000c 2C46     		mov	r4, r5
 16083 000e C4F16406 		rsb	r6, r4, #100
 16084 0012 1D44     		add	r5, r5, r3
 16085              	.LVL1175:
 16086              	.L1126:
1945:src/xeq.c     **** }
 16087              		.loc 1 1945 3 is_stmt 1 discriminator 3 view .LVU4193
 16088 0014 3119     		adds	r1, r6, r4
 16089 0016 2046     		mov	r0, r4
 16090 0018 0134     		adds	r4, r4, #1
 16091              	.LVL1176:
1945:src/xeq.c     **** }
 16092              		.loc 1 1945 3 is_stmt 0 discriminator 3 view .LVU4194
 16093 001a FFF7FEFF 		bl	copyreg_n
 16094              	.LVL1177:
1944:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16095              		.loc 1 1944 17 is_stmt 1 discriminator 3 view .LVU4195
1944:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16096              		.loc 1 1944 12 discriminator 3 view .LVU4196
1944:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16097              		.loc 1 1944 2 is_stmt 0 discriminator 3 view .LVU4197
 16098 001e AC42     		cmp	r4, r5
 16099 0020 F8D1     		bne	.L1126
ARM GAS  /tmp/ccjeMhND.s 			page 448


 16100              	.L1124:
1946:src/xeq.c     **** 
 16101              		.loc 1 1946 1 view .LVU4198
 16102 0022 70BD     		pop	{r4, r5, r6, pc}
 16103              		.cfi_endproc
 16104              	.LFE144:
 16106              		.section	.text.cmdrclstk,"ax",%progbits
 16107              		.align	1
 16108              		.p2align 2,,3
 16109              		.global	cmdrclstk
 16110              		.syntax unified
 16111              		.thumb
 16112              		.thumb_func
 16113              		.fpu fpv4-sp-d16
 16115              	cmdrclstk:
 16116              	.LVL1178:
 16117              	.LFB145:
1948:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16118              		.loc 1 1948 48 is_stmt 1 view -0
 16119              		.cfi_startproc
 16120              		@ args = 0, pretend = 0, frame = 0
 16121              		@ frame_needed = 0, uses_anonymous_args = 0
1949:src/xeq.c     **** 
 16122              		.loc 1 1949 2 view .LVU4200
1948:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16123              		.loc 1 1948 48 is_stmt 0 view .LVU4201
 16124 0000 70B5     		push	{r4, r5, r6, lr}
 16125              		.cfi_def_cfa_offset 16
 16126              		.cfi_offset 4, -16
 16127              		.cfi_offset 5, -12
 16128              		.cfi_offset 6, -8
 16129              		.cfi_offset 14, -4
1948:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16130              		.loc 1 1948 48 view .LVU4202
 16131 0002 0646     		mov	r6, r0
1949:src/xeq.c     **** 
 16132              		.loc 1 1949 13 view .LVU4203
 16133 0004 FFF7FEFF 		bl	check_stack_overlap
 16134              	.LVL1179:
1951:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16135              		.loc 1 1951 2 is_stmt 1 view .LVU4204
1951:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16136              		.loc 1 1951 12 view .LVU4205
1951:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16137              		.loc 1 1951 2 is_stmt 0 view .LVU4206
 16138 0008 051E     		subs	r5, r0, #0
 16139 000a 09DD     		ble	.L1129
 16140 000c 6435     		adds	r5, r5, #100
 16141 000e 643E     		subs	r6, r6, #100
 16142              	.LVL1180:
1951:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16143              		.loc 1 1951 2 view .LVU4207
 16144 0010 6424     		movs	r4, #100
 16145              	.LVL1181:
 16146              	.L1131:
1952:src/xeq.c     **** }
 16147              		.loc 1 1952 3 is_stmt 1 discriminator 3 view .LVU4208
ARM GAS  /tmp/ccjeMhND.s 			page 449


 16148 0012 3119     		adds	r1, r6, r4
 16149 0014 2046     		mov	r0, r4
 16150 0016 0134     		adds	r4, r4, #1
 16151              	.LVL1182:
1952:src/xeq.c     **** }
 16152              		.loc 1 1952 3 is_stmt 0 discriminator 3 view .LVU4209
 16153 0018 FFF7FEFF 		bl	copyreg_n
 16154              	.LVL1183:
1951:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16155              		.loc 1 1951 17 is_stmt 1 discriminator 3 view .LVU4210
1951:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16156              		.loc 1 1951 12 discriminator 3 view .LVU4211
1951:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16157              		.loc 1 1951 2 is_stmt 0 discriminator 3 view .LVU4212
 16158 001c AC42     		cmp	r4, r5
 16159 001e F8D1     		bne	.L1131
 16160              	.LVL1184:
 16161              	.L1129:
1953:src/xeq.c     **** 
 16162              		.loc 1 1953 1 view .LVU4213
 16163 0020 70BD     		pop	{r4, r5, r6, pc}
 16164              		.cfi_endproc
 16165              	.LFE145:
 16167 0022 00BF     		.section	.text.find_opcode_from,"ax",%progbits
 16168              		.align	1
 16169              		.p2align 2,,3
 16170              		.global	find_opcode_from
 16171              		.syntax unified
 16172              		.thumb
 16173              		.thumb_func
 16174              		.fpu fpv4-sp-d16
 16176              	find_opcode_from:
 16177              	.LVL1185:
 16178              	.LFB147:
1986:src/xeq.c     **** 	unsigned short int top;
 16179              		.loc 1 1986 81 is_stmt 1 view -0
 16180              		.cfi_startproc
 16181              		@ args = 0, pretend = 0, frame = 8
 16182              		@ frame_needed = 0, uses_anonymous_args = 0
1986:src/xeq.c     **** 	unsigned short int top;
 16183              		.loc 1 1986 81 is_stmt 0 view .LVU4215
 16184 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 16185              		.cfi_def_cfa_offset 24
 16186              		.cfi_offset 4, -24
 16187              		.cfi_offset 5, -20
 16188              		.cfi_offset 6, -16
 16189              		.cfi_offset 7, -12
 16190              		.cfi_offset 8, -8
 16191              		.cfi_offset 14, -4
1989:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 16192              		.loc 1 1989 12 view .LVU4216
 16193 0004 02F00207 		and	r7, r2, #2
1986:src/xeq.c     **** 	unsigned short int top;
 16194              		.loc 1 1986 81 view .LVU4217
 16195 0008 82B0     		sub	sp, sp, #8
 16196              		.cfi_def_cfa_offset 32
1986:src/xeq.c     **** 	unsigned short int top;
ARM GAS  /tmp/ccjeMhND.s 			page 450


 16197              		.loc 1 1986 81 view .LVU4218
 16198 000a 9046     		mov	r8, r2
 16199 000c 0E46     		mov	r6, r1
1992:src/xeq.c     **** 	count -= top;
 16200              		.loc 1 1992 14 view .LVU4219
 16201 000e 0DF10602 		add	r2, sp, #6
 16202              	.LVL1186:
1992:src/xeq.c     **** 	count -= top;
 16203              		.loc 1 1992 14 view .LVU4220
 16204 0012 3946     		mov	r1, r7
 16205              	.LVL1187:
1986:src/xeq.c     **** 	unsigned short int top;
 16206              		.loc 1 1986 81 view .LVU4221
 16207 0014 0446     		mov	r4, r0
1987:src/xeq.c     **** 	int count;
 16208              		.loc 1 1987 2 is_stmt 1 view .LVU4222
1988:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
 16209              		.loc 1 1988 2 view .LVU4223
1989:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 16210              		.loc 1 1989 2 view .LVU4224
 16211              	.LVL1188:
1990:src/xeq.c     **** 
 16212              		.loc 1 1990 2 view .LVU4225
1992:src/xeq.c     **** 	count -= top;
 16213              		.loc 1 1992 2 view .LVU4226
1992:src/xeq.c     **** 	count -= top;
 16214              		.loc 1 1992 14 is_stmt 0 view .LVU4227
 16215 0016 FFF7FEFF 		bl	find_section_bounds
 16216              	.LVL1189:
1993:src/xeq.c     **** 	while (count--) {
 16217              		.loc 1 1993 8 view .LVU4228
 16218 001a BDF80650 		ldrh	r5, [sp, #6]
1992:src/xeq.c     **** 	count -= top;
 16219              		.loc 1 1992 8 view .LVU4229
 16220 001e 0130     		adds	r0, r0, #1
 16221              	.LVL1190:
1993:src/xeq.c     **** 	while (count--) {
 16222              		.loc 1 1993 2 is_stmt 1 view .LVU4230
1994:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16223              		.loc 1 1994 2 view .LVU4231
1994:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16224              		.loc 1 1994 8 view .LVU4232
1994:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16225              		.loc 1 1994 8 is_stmt 0 view .LVU4233
 16226 0020 451B     		subs	r5, r0, r5
 16227              	.LVL1191:
1994:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16228              		.loc 1 1994 8 view .LVU4234
 16229 0022 05D1     		bne	.L1137
 16230 0024 10E0     		b	.L1135
 16231              	.LVL1192:
 16232              	.L1145:
2000:src/xeq.c     **** 	}
 16233              		.loc 1 2000 8 view .LVU4235
 16234 0026 FFF7FEFF 		bl	do_inc
 16235              	.LVL1193:
1994:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
ARM GAS  /tmp/ccjeMhND.s 			page 451


 16236              		.loc 1 1994 8 view .LVU4236
 16237 002a 013D     		subs	r5, r5, #1
 16238              	.LVL1194:
2000:src/xeq.c     **** 	}
 16239              		.loc 1 2000 8 view .LVU4237
 16240 002c 0446     		mov	r4, r0
 16241              	.LVL1195:
1994:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16242              		.loc 1 1994 8 is_stmt 1 view .LVU4238
1994:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16243              		.loc 1 1994 8 is_stmt 0 view .LVU4239
 16244 002e 0BD0     		beq	.L1135
 16245              	.LVL1196:
 16246              	.L1137:
1998:src/xeq.c     **** 			return pc;
 16247              		.loc 1 1998 3 is_stmt 1 view .LVU4240
1998:src/xeq.c     **** 			return pc;
 16248              		.loc 1 1998 7 is_stmt 0 view .LVU4241
 16249 0030 2046     		mov	r0, r4
 16250 0032 FFF7FEFF 		bl	getprog
 16251              	.LVL1197:
2000:src/xeq.c     **** 	}
 16252              		.loc 1 2000 3 is_stmt 1 view .LVU4242
1998:src/xeq.c     **** 			return pc;
 16253              		.loc 1 1998 7 is_stmt 0 view .LVU4243
 16254 0036 0346     		mov	r3, r0
1998:src/xeq.c     **** 			return pc;
 16255              		.loc 1 1998 6 view .LVU4244
 16256 0038 B342     		cmp	r3, r6
2000:src/xeq.c     **** 	}
 16257              		.loc 1 2000 8 view .LVU4245
 16258 003a 3946     		mov	r1, r7
 16259 003c 2046     		mov	r0, r4
1998:src/xeq.c     **** 			return pc;
 16260              		.loc 1 1998 6 view .LVU4246
 16261 003e F2D1     		bne	.L1145
 16262              	.LVL1198:
 16263              	.L1134:
2005:src/xeq.c     **** 
 16264              		.loc 1 2005 1 view .LVU4247
 16265 0040 2046     		mov	r0, r4
 16266 0042 02B0     		add	sp, sp, #8
 16267              		.cfi_remember_state
 16268              		.cfi_def_cfa_offset 24
 16269              		@ sp needed
 16270 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 16271              	.LVL1199:
 16272              	.L1135:
 16273              		.cfi_restore_state
2002:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16274              		.loc 1 2002 2 is_stmt 1 view .LVU4248
2002:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16275              		.loc 1 2002 5 is_stmt 0 view .LVU4249
 16276 0048 18F00104 		ands	r4, r8, #1
 16277 004c F8D0     		beq	.L1134
 16278              	.LBB2771:
 16279              	.LBI2771:
ARM GAS  /tmp/ccjeMhND.s 			page 452


1986:src/xeq.c     **** 	unsigned short int top;
 16280              		.loc 1 1986 14 is_stmt 1 view .LVU4250
 16281              	.LVL1200:
 16282              	.LBB2772:
2003:src/xeq.c     **** 	return 0;
 16283              		.loc 1 2003 3 view .LVU4251
 16284              	.LBB2773:
 16285              	.LBI2773:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 16286              		.loc 1 537 5 view .LVU4252
 16287              	.LBB2774:
 538:src/xeq.c     **** 		Error = e;
 16288              		.loc 1 538 2 view .LVU4253
 538:src/xeq.c     **** 		Error = e;
 16289              		.loc 1 538 12 is_stmt 0 view .LVU4254
 16290 004e 074B     		ldr	r3, .L1146
 538:src/xeq.c     **** 		Error = e;
 16291              		.loc 1 538 5 view .LVU4255
 16292 0050 1C68     		ldr	r4, [r3]
 16293 0052 2CB9     		cbnz	r4, .L1139
 16294              	.LVL1201:
 16295              	.LBB2775:
 16296              	.LBI2775:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 16297              		.loc 1 537 5 is_stmt 1 view .LVU4256
 16298              	.LBB2776:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 16299              		.loc 1 539 3 view .LVU4257
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 16300              		.loc 1 539 9 is_stmt 0 view .LVU4258
 16301 0054 0622     		movs	r2, #6
 16302              	.LBE2776:
 16303              	.LBE2775:
 16304              	.LBE2774:
 16305              	.LBE2773:
 16306              	.LBE2772:
 16307              	.LBE2771:
2005:src/xeq.c     **** 
 16308              		.loc 1 2005 1 view .LVU4259
 16309 0056 2046     		mov	r0, r4
 16310              	.LBB2782:
 16311              	.LBB2781:
 16312              	.LBB2780:
 16313              	.LBB2779:
 16314              	.LBB2778:
 16315              	.LBB2777:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 16316              		.loc 1 539 9 view .LVU4260
 16317 0058 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 16318              		.loc 1 540 3 is_stmt 1 view .LVU4261
 16319              	.LBE2777:
 16320              	.LBE2778:
 16321              	.LBE2779:
 16322              	.LBE2780:
 16323              	.LBE2781:
 16324              	.LBE2782:
ARM GAS  /tmp/ccjeMhND.s 			page 453


2005:src/xeq.c     **** 
 16325              		.loc 1 2005 1 is_stmt 0 view .LVU4262
 16326 005a 02B0     		add	sp, sp, #8
 16327              		.cfi_remember_state
 16328              		.cfi_def_cfa_offset 24
 16329              		@ sp needed
 16330 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 16331              	.LVL1202:
 16332              	.L1139:
 16333              		.cfi_restore_state
2004:src/xeq.c     **** }
 16334              		.loc 1 2004 9 view .LVU4263
 16335 0060 0024     		movs	r4, #0
 16336              	.LVL1203:
2005:src/xeq.c     **** 
 16337              		.loc 1 2005 1 view .LVU4264
 16338 0062 2046     		mov	r0, r4
 16339 0064 02B0     		add	sp, sp, #8
 16340              		.cfi_def_cfa_offset 24
 16341              		@ sp needed
 16342 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 16343              	.LVL1204:
 16344              	.L1147:
2005:src/xeq.c     **** 
 16345              		.loc 1 2005 1 view .LVU4265
 16346 006a 00BF     		.align	2
 16347              	.L1146:
 16348 006c 00000000 		.word	Error
 16349              		.cfi_endproc
 16350              	.LFE147:
 16352              		.section	.text.find_label_from,"ax",%progbits
 16353              		.align	1
 16354              		.p2align 2,,3
 16355              		.global	find_label_from
 16356              		.syntax unified
 16357              		.thumb
 16358              		.thumb_func
 16359              		.fpu fpv4-sp-d16
 16361              	find_label_from:
 16362              	.LVL1205:
 16363              	.LFB148:
2008:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 16364              		.loc 1 2008 76 is_stmt 1 view -0
 16365              		.cfi_startproc
 16366              		@ args = 0, pretend = 0, frame = 0
 16367              		@ frame_needed = 0, uses_anonymous_args = 0
 16368              		@ link register save eliminated.
2009:src/xeq.c     **** }
 16369              		.loc 1 2009 2 view .LVU4267
2009:src/xeq.c     **** }
 16370              		.loc 1 2009 9 is_stmt 0 view .LVU4268
 16371 0000 41F4C441 		orr	r1, r1, #25088
 16372              	.LVL1206:
2009:src/xeq.c     **** }
 16373              		.loc 1 2009 9 view .LVU4269
 16374 0004 FFF7FEBF 		b	find_opcode_from
 16375              	.LVL1207:
ARM GAS  /tmp/ccjeMhND.s 			page 454


2009:src/xeq.c     **** }
 16376              		.loc 1 2009 9 view .LVU4270
 16377              		.cfi_endproc
 16378              	.LFE148:
 16380              		.section	.text.op_rtn,"ax",%progbits
 16381              		.align	1
 16382              		.p2align 2,,3
 16383              		.global	op_rtn
 16384              		.syntax unified
 16385              		.thumb
 16386              		.thumb_func
 16387              		.fpu fpv4-sp-d16
 16389              	op_rtn:
 16390              	.LVL1208:
 16391              	.LFB151:
2067:src/xeq.c     **** 	if (! Running && ! XromRunning) {
 16392              		.loc 1 2067 28 is_stmt 1 view -0
 16393              		.cfi_startproc
 16394              		@ args = 0, pretend = 0, frame = 0
 16395              		@ frame_needed = 0, uses_anonymous_args = 0
 16396              		@ link register save eliminated.
2068:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 16397              		.loc 1 2068 2 view .LVU4272
2068:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 16398              		.loc 1 2068 6 is_stmt 0 view .LVU4273
 16399 0000 074A     		ldr	r2, .L1152
2068:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 16400              		.loc 1 2068 19 view .LVU4274
 16401 0002 084B     		ldr	r3, .L1152+4
2068:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 16402              		.loc 1 2068 16 view .LVU4275
 16403 0004 1268     		ldr	r2, [r2]
 16404 0006 1B68     		ldr	r3, [r3]
 16405 0008 1343     		orrs	r3, r2, r3
 16406 000a 06D0     		beq	.L1151
2073:src/xeq.c     **** }
 16407              		.loc 1 2073 3 is_stmt 1 view .LVU4276
 16408 000c A0F13900 		sub	r0, #57
 16409              	.LVL1209:
2073:src/xeq.c     **** }
 16410              		.loc 1 2073 3 is_stmt 0 view .LVU4277
 16411 0010 B0FA80F0 		clz	r0, r0
 16412 0014 4009     		lsrs	r0, r0, #5
 16413 0016 FFF7FEBF 		b	do_rtn
 16414              	.LVL1210:
 16415              	.L1151:
2070:src/xeq.c     **** 	}
 16416              		.loc 1 2070 3 is_stmt 1 view .LVU4278
 16417 001a FFF7FEBF 		b	clrretstk_pc
 16418              	.LVL1211:
 16419              	.L1153:
2070:src/xeq.c     **** 	}
 16420              		.loc 1 2070 3 is_stmt 0 view .LVU4279
 16421 001e 00BF     		.align	2
 16422              	.L1152:
 16423 0020 00000000 		.word	Running
 16424 0024 00000000 		.word	XromRunning
ARM GAS  /tmp/ccjeMhND.s 			page 455


 16425              		.cfi_endproc
 16426              	.LFE151:
 16428              		.section	.text.op_popusr,"ax",%progbits
 16429              		.align	1
 16430              		.p2align 2,,3
 16431              		.global	op_popusr
 16432              		.syntax unified
 16433              		.thumb
 16434              		.thumb_func
 16435              		.fpu fpv4-sp-d16
 16437              	op_popusr:
 16438              	.LVL1212:
 16439              	.LFB155:
2114:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 16440              		.loc 1 2114 31 is_stmt 1 view -0
 16441              		.cfi_startproc
 16442              		@ args = 0, pretend = 0, frame = 0
 16443              		@ frame_needed = 0, uses_anonymous_args = 0
 16444              		@ link register save eliminated.
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16445              		.loc 1 2115 2 view .LVU4281
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16446              		.loc 1 2115 25 is_stmt 0 view .LVU4282
 16447 0000 134A     		ldr	r2, .L1156
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16448              		.loc 1 2115 24 view .LVU4283
 16449 0002 144B     		ldr	r3, .L1156+4
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16450              		.loc 1 2115 25 view .LVU4284
 16451 0004 1268     		ldr	r2, [r2]
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16452              		.loc 1 2115 24 view .LVU4285
 16453 0006 1B68     		ldr	r3, [r3]
2114:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 16454              		.loc 1 2114 31 view .LVU4286
 16455 0008 70B4     		push	{r4, r5, r6}
 16456              		.cfi_def_cfa_offset 12
 16457              		.cfi_offset 4, -12
 16458              		.cfi_offset 5, -8
 16459              		.cfi_offset 6, -4
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16460              		.loc 1 2115 25 view .LVU4287
 16461 000a B2F9E257 		ldrsh	r5, [r2, #2018]
2117:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 16462              		.loc 1 2117 13 view .LVU4288
 16463 000e 124E     		ldr	r6, .L1156+8
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16464              		.loc 1 2115 34 view .LVU4289
 16465 0010 A9B2     		uxth	r1, r5
 16466 0012 4C1C     		adds	r4, r1, #1
 16467 0014 24B2     		sxth	r4, r4
2116:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16468              		.loc 1 2116 34 view .LVU4290
 16469 0016 881C     		adds	r0, r1, #2
 16470              	.LVL1213:
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16471              		.loc 1 2115 34 view .LVU4291
ARM GAS  /tmp/ccjeMhND.s 			page 456


 16472 0018 A2F8E247 		strh	r4, [r2, #2018]	@ movhi
2116:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16473              		.loc 1 2116 34 view .LVU4292
 16474 001c 00B2     		sxth	r0, r0
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16475              		.loc 1 2115 24 view .LVU4293
 16476 001e 33F81550 		ldrh	r5, [r3, r5, lsl #1]
2116:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16477              		.loc 1 2116 34 view .LVU4294
 16478 0022 A2F8E207 		strh	r0, [r2, #2018]	@ movhi
2116:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16479              		.loc 1 2116 24 view .LVU4295
 16480 0026 33F91440 		ldrsh	r4, [r3, r4, lsl #1]
2116:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16481              		.loc 1 2116 12 view .LVU4296
 16482 002a A2F8DE47 		strh	r4, [r2, #2014]	@ movhi
2117:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 16483              		.loc 1 2117 34 view .LVU4297
 16484 002e 0331     		adds	r1, r1, #3
 16485 0030 A2F8E217 		strh	r1, [r2, #2018]	@ movhi
2118:src/xeq.c     **** }
 16486              		.loc 1 2118 20 view .LVU4298
 16487 0034 33F81420 		ldrh	r2, [r3, r4, lsl #1]
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16488              		.loc 1 2115 16 view .LVU4299
 16489 0038 0849     		ldr	r1, .L1156+12
2117:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 16490              		.loc 1 2117 24 view .LVU4300
 16491 003a 33F81000 		ldrh	r0, [r3, r0, lsl #1]
 16492 003e 3060     		str	r0, [r6]
2118:src/xeq.c     **** }
 16493              		.loc 1 2118 20 view .LVU4301
 16494 0040 22F40052 		bic	r2, r2, #8192
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16495              		.loc 1 2115 24 view .LVU4302
 16496 0044 0D60     		str	r5, [r1]
2116:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16497              		.loc 1 2116 2 is_stmt 1 view .LVU4303
2117:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 16498              		.loc 1 2117 2 view .LVU4304
2118:src/xeq.c     **** }
 16499              		.loc 1 2118 2 view .LVU4305
2118:src/xeq.c     **** }
 16500              		.loc 1 2118 20 is_stmt 0 view .LVU4306
 16501 0046 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
2119:src/xeq.c     **** 
 16502              		.loc 1 2119 1 view .LVU4307
 16503 004a 70BC     		pop	{r4, r5, r6}
 16504              		.cfi_restore 6
 16505              		.cfi_restore 5
 16506              		.cfi_restore 4
 16507              		.cfi_def_cfa_offset 0
 16508 004c 7047     		bx	lr
 16509              	.L1157:
 16510 004e 00BF     		.align	2
 16511              	.L1156:
 16512 0050 00000000 		.word	main_ram
ARM GAS  /tmp/ccjeMhND.s 			page 457


 16513 0054 00000000 		.word	RetStk
 16514 0058 00000000 		.word	XromUserPc
 16515 005c 00000000 		.word	UserLocalRegs
 16516              		.cfi_endproc
 16517              	.LFE155:
 16519              		.section	.text.findmultilbl,"ax",%progbits
 16520              		.align	1
 16521              		.p2align 2,,3
 16522              		.global	findmultilbl
 16523              		.syntax unified
 16524              		.thumb
 16525              		.thumb_func
 16526              		.fpu fpv4-sp-d16
 16528              	findmultilbl:
 16529              	.LVL1214:
 16530              	.LFB159:
2147:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 16531              		.loc 1 2147 54 is_stmt 1 view -0
 16532              		.cfi_startproc
 16533              		@ args = 0, pretend = 0, frame = 0
 16534              		@ frame_needed = 0, uses_anonymous_args = 0
2148:src/xeq.c     **** 	unsigned int lbl;
 16535              		.loc 1 2148 2 view .LVU4309
2147:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 16536              		.loc 1 2147 54 is_stmt 0 view .LVU4310
 16537 0000 38B5     		push	{r3, r4, r5, lr}
 16538              		.cfi_def_cfa_offset 16
 16539              		.cfi_offset 3, -16
 16540              		.cfi_offset 4, -12
 16541              		.cfi_offset 5, -8
 16542              		.cfi_offset 14, -4
2151:src/xeq.c     **** 	if (lbl == 0)
 16543              		.loc 1 2151 8 view .LVU4311
 16544 0002 0022     		movs	r2, #0
2148:src/xeq.c     **** 	unsigned int lbl;
 16545              		.loc 1 2148 15 view .LVU4312
 16546 0004 20F47064 		bic	r4, r0, #3840
 16547              	.LVL1215:
2149:src/xeq.c     **** 
 16548              		.loc 1 2149 2 is_stmt 1 view .LVU4313
2151:src/xeq.c     **** 	if (lbl == 0)
 16549              		.loc 1 2151 2 view .LVU4314
2147:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 16550              		.loc 1 2147 54 is_stmt 0 view .LVU4315
 16551 0008 0D46     		mov	r5, r1
2151:src/xeq.c     **** 	if (lbl == 0)
 16552              		.loc 1 2151 8 view .LVU4316
 16553 000a 1046     		mov	r0, r2
 16554              	.LVL1216:
2151:src/xeq.c     **** 	if (lbl == 0)
 16555              		.loc 1 2151 8 view .LVU4317
 16556 000c 2146     		mov	r1, r4
 16557              	.LVL1217:
2151:src/xeq.c     **** 	if (lbl == 0)
 16558              		.loc 1 2151 8 view .LVU4318
 16559 000e FFF7FEFF 		bl	find_opcode_from
 16560              	.LVL1218:
ARM GAS  /tmp/ccjeMhND.s 			page 458


2152:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 16561              		.loc 1 2152 2 is_stmt 1 view .LVU4319
2152:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 16562              		.loc 1 2152 5 is_stmt 0 view .LVU4320
 16563 0012 00B1     		cbz	r0, .L1164
 16564              	.L1158:
2159:src/xeq.c     **** 
 16565              		.loc 1 2159 1 view .LVU4321
 16566 0014 38BD     		pop	{r3, r4, r5, pc}
 16567              	.LVL1219:
 16568              	.L1164:
2153:src/xeq.c     **** 	if (lbl == 0)
 16569              		.loc 1 2153 3 is_stmt 1 view .LVU4322
2153:src/xeq.c     **** 	if (lbl == 0)
 16570              		.loc 1 2153 9 is_stmt 0 view .LVU4323
 16571 0016 0246     		mov	r2, r0
 16572 0018 2146     		mov	r1, r4
 16573 001a 4FF48040 		mov	r0, #16384
 16574              	.LVL1220:
2153:src/xeq.c     **** 	if (lbl == 0)
 16575              		.loc 1 2153 9 view .LVU4324
 16576 001e FFF7FEFF 		bl	find_opcode_from
 16577              	.LVL1221:
2154:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 16578              		.loc 1 2154 2 is_stmt 1 view .LVU4325
2154:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 16579              		.loc 1 2154 5 is_stmt 0 view .LVU4326
 16580 0022 0028     		cmp	r0, #0
 16581 0024 F6D1     		bne	.L1158
2155:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 16582              		.loc 1 2155 3 is_stmt 1 view .LVU4327
2155:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 16583              		.loc 1 2155 9 is_stmt 0 view .LVU4328
 16584 0026 0246     		mov	r2, r0
 16585 0028 2146     		mov	r1, r4
 16586 002a 4FF40040 		mov	r0, #32768
 16587              	.LVL1222:
2155:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 16588              		.loc 1 2155 9 view .LVU4329
 16589 002e FFF7FEFF 		bl	find_opcode_from
 16590              	.LVL1223:
2156:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16591              		.loc 1 2156 2 is_stmt 1 view .LVU4330
2156:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16592              		.loc 1 2156 5 is_stmt 0 view .LVU4331
 16593 0032 0028     		cmp	r0, #0
 16594 0034 EED1     		bne	.L1158
2156:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16595              		.loc 1 2156 15 discriminator 1 view .LVU4332
 16596 0036 EB07     		lsls	r3, r5, #31
 16597 0038 ECD5     		bpl	.L1158
 16598              	.LBB2789:
 16599              	.LBI2789:
2147:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 16600              		.loc 1 2147 14 is_stmt 1 view .LVU4333
 16601              	.LVL1224:
 16602              	.LBB2790:
ARM GAS  /tmp/ccjeMhND.s 			page 459


2157:src/xeq.c     **** 	return lbl;
 16603              		.loc 1 2157 3 view .LVU4334
 16604              	.LBB2791:
 16605              	.LBI2791:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 16606              		.loc 1 537 5 view .LVU4335
 16607              	.LBB2792:
 538:src/xeq.c     **** 		Error = e;
 16608              		.loc 1 538 2 view .LVU4336
 538:src/xeq.c     **** 		Error = e;
 16609              		.loc 1 538 12 is_stmt 0 view .LVU4337
 16610 003a 034B     		ldr	r3, .L1165
 538:src/xeq.c     **** 		Error = e;
 16611              		.loc 1 538 5 view .LVU4338
 16612 003c 1A68     		ldr	r2, [r3]
 16613 003e 002A     		cmp	r2, #0
 16614 0040 E8D1     		bne	.L1158
 16615              	.LVL1225:
 16616              	.LBB2793:
 16617              	.LBI2793:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 16618              		.loc 1 537 5 is_stmt 1 view .LVU4339
 16619              	.LBB2794:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 16620              		.loc 1 539 3 view .LVU4340
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 16621              		.loc 1 539 9 is_stmt 0 view .LVU4341
 16622 0042 0622     		movs	r2, #6
 16623 0044 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 16624              		.loc 1 540 3 is_stmt 1 view .LVU4342
 16625              	.LVL1226:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 16626              		.loc 1 540 3 is_stmt 0 view .LVU4343
 16627              	.LBE2794:
 16628              	.LBE2793:
 16629              	.LBE2792:
 16630              	.LBE2791:
 16631              	.LBE2790:
 16632              	.LBE2789:
2158:src/xeq.c     **** }
 16633              		.loc 1 2158 2 is_stmt 1 view .LVU4344
2159:src/xeq.c     **** 
 16634              		.loc 1 2159 1 is_stmt 0 view .LVU4345
 16635 0046 38BD     		pop	{r3, r4, r5, pc}
 16636              	.LVL1227:
 16637              	.L1166:
2159:src/xeq.c     **** 
 16638              		.loc 1 2159 1 view .LVU4346
 16639              		.align	2
 16640              	.L1165:
 16641 0048 00000000 		.word	Error
 16642              		.cfi_endproc
 16643              	.LFE159:
 16645              		.section	.text.get_dispmode_digs,"ax",%progbits
 16646              		.align	1
 16647              		.p2align 2,,3
ARM GAS  /tmp/ccjeMhND.s 			page 460


 16648              		.global	get_dispmode_digs
 16649              		.syntax unified
 16650              		.thumb
 16651              		.thumb_func
 16652              		.fpu fpv4-sp-d16
 16654              	get_dispmode_digs:
 16655              	.LVL1228:
 16656              	.LFB166:
2211:src/xeq.c     **** 	int dispmode = UState.dispmode;
 16657              		.loc 1 2211 1 is_stmt 1 view -0
 16658              		.cfi_startproc
 16659              		@ args = 0, pretend = 0, frame = 0
 16660              		@ frame_needed = 0, uses_anonymous_args = 0
 16661              		@ link register save eliminated.
2212:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 16662              		.loc 1 2212 2 view .LVU4348
2212:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 16663              		.loc 1 2212 17 is_stmt 0 view .LVU4349
 16664 0000 0A4B     		ldr	r3, .L1170
 16665 0002 1A68     		ldr	r2, [r3]
2213:src/xeq.c     **** 
 16666              		.loc 1 2213 23 view .LVU4350
 16667 0004 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
2212:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 16668              		.loc 1 2212 23 view .LVU4351
 16669 0008 92F8E627 		ldrb	r2, [r2, #2022]	@ zero_extendqisi2
2213:src/xeq.c     **** 
 16670              		.loc 1 2213 6 view .LVU4352
 16671 000c 03F00F03 		and	r3, r3, #15
2215:src/xeq.c     **** 		dispdigs -= 12;
 16672              		.loc 1 2215 5 view .LVU4353
 16673 0010 0B2B     		cmp	r3, #11
2211:src/xeq.c     **** 	int dispmode = UState.dispmode;
 16674              		.loc 1 2211 1 view .LVU4354
 16675 0012 0146     		mov	r1, r0
2212:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 16676              		.loc 1 2212 6 view .LVU4355
 16677 0014 4FEA9210 		lsr	r0, r2, #6
 16678              	.LVL1229:
2213:src/xeq.c     **** 
 16679              		.loc 1 2213 2 is_stmt 1 view .LVU4356
2215:src/xeq.c     **** 		dispdigs -= 12;
 16680              		.loc 1 2215 2 view .LVU4357
2215:src/xeq.c     **** 		dispdigs -= 12;
 16681              		.loc 1 2215 5 is_stmt 0 view .LVU4358
 16682 0018 06DD     		ble	.L1168
2216:src/xeq.c     **** 		dispmode += 4;
 16683              		.loc 1 2216 3 is_stmt 1 view .LVU4359
 16684              	.LVL1230:
2217:src/xeq.c     **** 		if (dispmode >= 6) {
 16685              		.loc 1 2217 3 view .LVU4360
2217:src/xeq.c     **** 		if (dispmode >= 6) {
 16686              		.loc 1 2217 12 is_stmt 0 view .LVU4361
 16687 001a 021D     		adds	r2, r0, #4
 16688              	.LVL1231:
2218:src/xeq.c     **** 			dispmode -= 2;
 16689              		.loc 1 2218 3 is_stmt 1 view .LVU4362
ARM GAS  /tmp/ccjeMhND.s 			page 461


2218:src/xeq.c     **** 			dispmode -= 2;
 16690              		.loc 1 2218 6 is_stmt 0 view .LVU4363
 16691 001c 052A     		cmp	r2, #5
2216:src/xeq.c     **** 		dispmode += 4;
 16692              		.loc 1 2216 12 view .LVU4364
 16693 001e D9BF     		ittee	le
 16694 0020 0C3B     		suble	r3, r3, #12
 16695              	.LVL1232:
2216:src/xeq.c     **** 		dispmode += 4;
 16696              		.loc 1 2216 12 view .LVU4365
 16697 0022 1046     		movle	r0, r2
2219:src/xeq.c     **** 			dispdigs += 4;
 16698              		.loc 1 2219 4 is_stmt 1 view .LVU4366
2219:src/xeq.c     **** 			dispdigs += 4;
 16699              		.loc 1 2219 13 is_stmt 0 view .LVU4367
 16700 0024 0230     		addgt	r0, r0, #2
 16701              	.LVL1233:
2220:src/xeq.c     **** 		}
 16702              		.loc 1 2220 4 is_stmt 1 view .LVU4368
2220:src/xeq.c     **** 		}
 16703              		.loc 1 2220 13 is_stmt 0 view .LVU4369
 16704 0026 083B     		subgt	r3, r3, #8
 16705              	.LVL1234:
 16706              	.L1168:
2223:src/xeq.c     **** 	return dispmode;
 16707              		.loc 1 2223 2 is_stmt 1 view .LVU4370
2223:src/xeq.c     **** 	return dispmode;
 16708              		.loc 1 2223 9 is_stmt 0 view .LVU4371
 16709 0028 0B60     		str	r3, [r1]
2224:src/xeq.c     **** }
 16710              		.loc 1 2224 2 is_stmt 1 view .LVU4372
2225:src/xeq.c     **** 
 16711              		.loc 1 2225 1 is_stmt 0 view .LVU4373
 16712 002a 7047     		bx	lr
 16713              	.L1171:
 16714              		.align	2
 16715              	.L1170:
 16716 002c 00000000 		.word	main_ram
 16717              		.cfi_endproc
 16718              	.LFE166:
 16720              		.section	.text.set_dispmode_digs,"ax",%progbits
 16721              		.align	1
 16722              		.p2align 2,,3
 16723              		.global	set_dispmode_digs
 16724              		.syntax unified
 16725              		.thumb
 16726              		.thumb_func
 16727              		.fpu fpv4-sp-d16
 16729              	set_dispmode_digs:
 16730              	.LVL1235:
 16731              	.LFB167:
2228:src/xeq.c     **** 	if (dispmode >= 4) {
 16732              		.loc 1 2228 1 is_stmt 1 view -0
 16733              		.cfi_startproc
 16734              		@ args = 0, pretend = 0, frame = 0
 16735              		@ frame_needed = 0, uses_anonymous_args = 0
 16736              		@ link register save eliminated.
ARM GAS  /tmp/ccjeMhND.s 			page 462


2229:src/xeq.c     **** 		dispmode -= 4;
 16737              		.loc 1 2229 2 view .LVU4375
2229:src/xeq.c     **** 		dispmode -= 4;
 16738              		.loc 1 2229 5 is_stmt 0 view .LVU4376
 16739 0000 0328     		cmp	r0, #3
 16740 0002 07DD     		ble	.L1173
2230:src/xeq.c     **** 		dispdigs += 12;
 16741              		.loc 1 2230 3 is_stmt 1 view .LVU4377
 16742              	.LVL1236:
2231:src/xeq.c     **** 		if (dispdigs >= 16) {
 16743              		.loc 1 2231 3 view .LVU4378
2231:src/xeq.c     **** 		if (dispdigs >= 16) {
 16744              		.loc 1 2231 12 is_stmt 0 view .LVU4379
 16745 0004 01F10C03 		add	r3, r1, #12
 16746              	.LVL1237:
2232:src/xeq.c     **** 			dispdigs -= 4;
 16747              		.loc 1 2232 3 is_stmt 1 view .LVU4380
2232:src/xeq.c     **** 			dispdigs -= 4;
 16748              		.loc 1 2232 6 is_stmt 0 view .LVU4381
 16749 0008 0F2B     		cmp	r3, #15
2230:src/xeq.c     **** 		dispdigs += 12;
 16750              		.loc 1 2230 12 view .LVU4382
 16751 000a D9BF     		ittee	le
 16752 000c 0438     		suble	r0, r0, #4
 16753              	.LVL1238:
2230:src/xeq.c     **** 		dispdigs += 12;
 16754              		.loc 1 2230 12 view .LVU4383
 16755 000e 1946     		movle	r1, r3
2233:src/xeq.c     **** 			dispmode += 2;
 16756              		.loc 1 2233 4 is_stmt 1 view .LVU4384
2233:src/xeq.c     **** 			dispmode += 2;
 16757              		.loc 1 2233 13 is_stmt 0 view .LVU4385
 16758 0010 0831     		addgt	r1, r1, #8
 16759              	.LVL1239:
2234:src/xeq.c     **** 		}
 16760              		.loc 1 2234 4 is_stmt 1 view .LVU4386
2234:src/xeq.c     **** 		}
 16761              		.loc 1 2234 13 is_stmt 0 view .LVU4387
 16762 0012 0238     		subgt	r0, r0, #2
 16763              	.LVL1240:
 16764              	.L1173:
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 16765              		.loc 1 2237 2 is_stmt 1 view .LVU4388
 16766 0014 084B     		ldr	r3, .L1175
 16767 0016 1A68     		ldr	r2, [r3]
2238:src/xeq.c     **** }
 16768              		.loc 1 2238 2 view .LVU4389
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 16769              		.loc 1 2237 18 is_stmt 0 view .LVU4390
 16770 0018 00F00300 		and	r0, r0, #3
 16771              	.LVL1241:
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 16772              		.loc 1 2237 18 view .LVU4391
 16773 001c B2F8E637 		ldrh	r3, [r2, #2022]
 16774 0020 8001     		lsls	r0, r0, #6
 16775 0022 01F00F01 		and	r1, r1, #15
 16776              	.LVL1242:
ARM GAS  /tmp/ccjeMhND.s 			page 463


2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 16777              		.loc 1 2237 18 view .LVU4392
 16778 0026 40EA0120 		orr	r0, r0, r1, lsl #8
 16779 002a 23F47C63 		bic	r3, r3, #4032
 16780 002e 1843     		orrs	r0, r0, r3
 16781 0030 A2F8E607 		strh	r0, [r2, #2022]	@ movhi
2239:src/xeq.c     **** #endif
 16782              		.loc 1 2239 1 view .LVU4393
 16783 0034 7047     		bx	lr
 16784              	.L1176:
 16785 0036 00BF     		.align	2
 16786              	.L1175:
 16787 0038 00000000 		.word	main_ram
 16788              		.cfi_endproc
 16789              	.LFE167:
 16791              		.section	.text.convC2F,"ax",%progbits
 16792              		.align	1
 16793              		.p2align 2,,3
 16794              		.global	convC2F
 16795              		.syntax unified
 16796              		.thumb
 16797              		.thumb_func
 16798              		.fpu fpv4-sp-d16
 16800              	convC2F:
 16801              	.LVL1243:
 16802              	.LFB169:
2291:src/xeq.c     **** 	decNumber s;
 16803              		.loc 1 2291 54 is_stmt 1 view -0
 16804              		.cfi_startproc
 16805              		@ args = 0, pretend = 0, frame = 40
 16806              		@ frame_needed = 0, uses_anonymous_args = 0
2292:src/xeq.c     **** 
 16807              		.loc 1 2292 2 view .LVU4395
2294:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 16808              		.loc 1 2294 2 view .LVU4396
2291:src/xeq.c     **** 	decNumber s;
 16809              		.loc 1 2291 54 is_stmt 0 view .LVU4397
 16810 0000 10B5     		push	{r4, lr}
 16811              		.cfi_def_cfa_offset 8
 16812              		.cfi_offset 4, -8
 16813              		.cfi_offset 14, -4
 16814 0002 8AB0     		sub	sp, sp, #40
 16815              		.cfi_def_cfa_offset 48
2291:src/xeq.c     **** 	decNumber s;
 16816              		.loc 1 2291 54 view .LVU4398
 16817 0004 0446     		mov	r4, r0
2294:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 16818              		.loc 1 2294 2 view .LVU4399
 16819 0006 054A     		ldr	r2, .L1179
 16820 0008 01A8     		add	r0, sp, #4
 16821              	.LVL1244:
2294:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 16822              		.loc 1 2294 2 view .LVU4400
 16823 000a FFF7FEFF 		bl	dn_multiply
 16824              	.LVL1245:
2295:src/xeq.c     **** }
 16825              		.loc 1 2295 2 is_stmt 1 view .LVU4401
ARM GAS  /tmp/ccjeMhND.s 			page 464


2295:src/xeq.c     **** }
 16826              		.loc 1 2295 9 is_stmt 0 view .LVU4402
 16827 000e 044A     		ldr	r2, .L1179+4
 16828 0010 2046     		mov	r0, r4
 16829 0012 01A9     		add	r1, sp, #4
 16830 0014 FFF7FEFF 		bl	dn_add
 16831              	.LVL1246:
2296:src/xeq.c     **** 
 16832              		.loc 1 2296 1 view .LVU4403
 16833 0018 0AB0     		add	sp, sp, #40
 16834              		.cfi_def_cfa_offset 8
 16835              		@ sp needed
 16836 001a 10BD     		pop	{r4, pc}
 16837              	.LVL1247:
 16838              	.L1180:
2296:src/xeq.c     **** 
 16839              		.loc 1 2296 1 view .LVU4404
 16840              		.align	2
 16841              	.L1179:
 16842 001c 00000000 		.word	const_9on5
 16843 0020 00000000 		.word	const_32
 16844              		.cfi_endproc
 16845              	.LFE169:
 16847              		.section	.text.convF2C,"ax",%progbits
 16848              		.align	1
 16849              		.p2align 2,,3
 16850              		.global	convF2C
 16851              		.syntax unified
 16852              		.thumb
 16853              		.thumb_func
 16854              		.fpu fpv4-sp-d16
 16856              	convF2C:
 16857              	.LVL1248:
 16858              	.LFB170:
2298:src/xeq.c     **** 	decNumber s;
 16859              		.loc 1 2298 54 is_stmt 1 view -0
 16860              		.cfi_startproc
 16861              		@ args = 0, pretend = 0, frame = 40
 16862              		@ frame_needed = 0, uses_anonymous_args = 0
2299:src/xeq.c     **** 
 16863              		.loc 1 2299 2 view .LVU4406
2301:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 16864              		.loc 1 2301 2 view .LVU4407
2298:src/xeq.c     **** 	decNumber s;
 16865              		.loc 1 2298 54 is_stmt 0 view .LVU4408
 16866 0000 10B5     		push	{r4, lr}
 16867              		.cfi_def_cfa_offset 8
 16868              		.cfi_offset 4, -8
 16869              		.cfi_offset 14, -4
 16870 0002 8AB0     		sub	sp, sp, #40
 16871              		.cfi_def_cfa_offset 48
2298:src/xeq.c     **** 	decNumber s;
 16872              		.loc 1 2298 54 view .LVU4409
 16873 0004 0446     		mov	r4, r0
2301:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 16874              		.loc 1 2301 2 view .LVU4410
 16875 0006 054A     		ldr	r2, .L1183
ARM GAS  /tmp/ccjeMhND.s 			page 465


 16876 0008 01A8     		add	r0, sp, #4
 16877              	.LVL1249:
2301:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 16878              		.loc 1 2301 2 view .LVU4411
 16879 000a FFF7FEFF 		bl	dn_subtract
 16880              	.LVL1250:
2302:src/xeq.c     **** }
 16881              		.loc 1 2302 2 is_stmt 1 view .LVU4412
2302:src/xeq.c     **** }
 16882              		.loc 1 2302 9 is_stmt 0 view .LVU4413
 16883 000e 044A     		ldr	r2, .L1183+4
 16884 0010 2046     		mov	r0, r4
 16885 0012 01A9     		add	r1, sp, #4
 16886 0014 FFF7FEFF 		bl	dn_divide
 16887              	.LVL1251:
2303:src/xeq.c     **** 
 16888              		.loc 1 2303 1 view .LVU4414
 16889 0018 0AB0     		add	sp, sp, #40
 16890              		.cfi_def_cfa_offset 8
 16891              		@ sp needed
 16892 001a 10BD     		pop	{r4, pc}
 16893              	.LVL1252:
 16894              	.L1184:
2303:src/xeq.c     **** 
 16895              		.loc 1 2303 1 view .LVU4415
 16896              		.align	2
 16897              	.L1183:
 16898 001c 00000000 		.word	const_32
 16899 0020 00000000 		.word	const_9on5
 16900              		.cfi_endproc
 16901              	.LFE170:
 16903              		.section	.text.convDB2AR,"ax",%progbits
 16904              		.align	1
 16905              		.p2align 2,,3
 16906              		.global	convDB2AR
 16907              		.syntax unified
 16908              		.thumb
 16909              		.thumb_func
 16910              		.fpu fpv4-sp-d16
 16912              	convDB2AR:
 16913              	.LVL1253:
 16914              	.LFB171:
2305:src/xeq.c     **** 	decNumber t;
 16915              		.loc 1 2305 56 is_stmt 1 view -0
 16916              		.cfi_startproc
 16917              		@ args = 0, pretend = 0, frame = 40
 16918              		@ frame_needed = 0, uses_anonymous_args = 0
2306:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
 16919              		.loc 1 2306 2 view .LVU4417
2307:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16920              		.loc 1 2307 2 view .LVU4418
2305:src/xeq.c     **** 	decNumber t;
 16921              		.loc 1 2305 56 is_stmt 0 view .LVU4419
 16922 0000 10B5     		push	{r4, lr}
 16923              		.cfi_def_cfa_offset 8
 16924              		.cfi_offset 4, -8
 16925              		.cfi_offset 14, -4
ARM GAS  /tmp/ccjeMhND.s 			page 466


 16926 0002 8AB0     		sub	sp, sp, #40
 16927              		.cfi_def_cfa_offset 48
2307:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16928              		.loc 1 2307 2 view .LVU4420
 16929 0004 054A     		ldr	r2, .L1187
2305:src/xeq.c     **** 	decNumber t;
 16930              		.loc 1 2305 56 view .LVU4421
 16931 0006 0446     		mov	r4, r0
2307:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16932              		.loc 1 2307 2 view .LVU4422
 16933 0008 01A8     		add	r0, sp, #4
 16934              	.LVL1254:
2307:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16935              		.loc 1 2307 2 view .LVU4423
 16936 000a FFF7FEFF 		bl	dn_multiply
 16937              	.LVL1255:
2308:src/xeq.c     **** }
 16938              		.loc 1 2308 2 is_stmt 1 view .LVU4424
2308:src/xeq.c     **** }
 16939              		.loc 1 2308 9 is_stmt 0 view .LVU4425
 16940 000e 01A9     		add	r1, sp, #4
 16941 0010 2046     		mov	r0, r4
 16942 0012 FFF7FEFF 		bl	decNumberPow10
 16943              	.LVL1256:
2309:src/xeq.c     **** 
 16944              		.loc 1 2309 1 view .LVU4426
 16945 0016 0AB0     		add	sp, sp, #40
 16946              		.cfi_def_cfa_offset 8
 16947              		@ sp needed
 16948 0018 10BD     		pop	{r4, pc}
 16949              	.LVL1257:
 16950              	.L1188:
2309:src/xeq.c     **** 
 16951              		.loc 1 2309 1 view .LVU4427
 16952 001a 00BF     		.align	2
 16953              	.L1187:
 16954 001c 00000000 		.word	const_0_05
 16955              		.cfi_endproc
 16956              	.LFE171:
 16958              		.section	.text.convAR2DB,"ax",%progbits
 16959              		.align	1
 16960              		.p2align 2,,3
 16961              		.global	convAR2DB
 16962              		.syntax unified
 16963              		.thumb
 16964              		.thumb_func
 16965              		.fpu fpv4-sp-d16
 16967              	convAR2DB:
 16968              	.LVL1258:
 16969              	.LFB172:
2311:src/xeq.c     **** 	decNumber t;
 16970              		.loc 1 2311 56 is_stmt 1 view -0
 16971              		.cfi_startproc
 16972              		@ args = 0, pretend = 0, frame = 40
 16973              		@ frame_needed = 0, uses_anonymous_args = 0
2312:src/xeq.c     **** 	dn_log10(&t, x);
 16974              		.loc 1 2312 2 view .LVU4429
ARM GAS  /tmp/ccjeMhND.s 			page 467


2313:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 16975              		.loc 1 2313 2 view .LVU4430
2311:src/xeq.c     **** 	decNumber t;
 16976              		.loc 1 2311 56 is_stmt 0 view .LVU4431
 16977 0000 10B5     		push	{r4, lr}
 16978              		.cfi_def_cfa_offset 8
 16979              		.cfi_offset 4, -8
 16980              		.cfi_offset 14, -4
 16981 0002 8AB0     		sub	sp, sp, #40
 16982              		.cfi_def_cfa_offset 48
2311:src/xeq.c     **** 	decNumber t;
 16983              		.loc 1 2311 56 view .LVU4432
 16984 0004 0446     		mov	r4, r0
2313:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 16985              		.loc 1 2313 2 view .LVU4433
 16986 0006 01A8     		add	r0, sp, #4
 16987              	.LVL1259:
2313:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 16988              		.loc 1 2313 2 view .LVU4434
 16989 0008 FFF7FEFF 		bl	dn_log10
 16990              	.LVL1260:
2314:src/xeq.c     **** }
 16991              		.loc 1 2314 2 is_stmt 1 view .LVU4435
2314:src/xeq.c     **** }
 16992              		.loc 1 2314 9 is_stmt 0 view .LVU4436
 16993 000c 034A     		ldr	r2, .L1191
 16994 000e 2046     		mov	r0, r4
 16995 0010 01A9     		add	r1, sp, #4
 16996 0012 FFF7FEFF 		bl	dn_multiply
 16997              	.LVL1261:
2315:src/xeq.c     **** 
 16998              		.loc 1 2315 1 view .LVU4437
 16999 0016 0AB0     		add	sp, sp, #40
 17000              		.cfi_def_cfa_offset 8
 17001              		@ sp needed
 17002 0018 10BD     		pop	{r4, pc}
 17003              	.LVL1262:
 17004              	.L1192:
2315:src/xeq.c     **** 
 17005              		.loc 1 2315 1 view .LVU4438
 17006 001a 00BF     		.align	2
 17007              	.L1191:
 17008 001c 00000000 		.word	const_20
 17009              		.cfi_endproc
 17010              	.LFE172:
 17012              		.section	.text.convDB2PR,"ax",%progbits
 17013              		.align	1
 17014              		.p2align 2,,3
 17015              		.global	convDB2PR
 17016              		.syntax unified
 17017              		.thumb
 17018              		.thumb_func
 17019              		.fpu fpv4-sp-d16
 17021              	convDB2PR:
 17022              	.LVL1263:
 17023              	.LFB173:
2317:src/xeq.c     **** 	decNumber t;
ARM GAS  /tmp/ccjeMhND.s 			page 468


 17024              		.loc 1 2317 56 is_stmt 1 view -0
 17025              		.cfi_startproc
 17026              		@ args = 0, pretend = 0, frame = 40
 17027              		@ frame_needed = 0, uses_anonymous_args = 0
2318:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
 17028              		.loc 1 2318 2 view .LVU4440
2319:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17029              		.loc 1 2319 2 view .LVU4441
2317:src/xeq.c     **** 	decNumber t;
 17030              		.loc 1 2317 56 is_stmt 0 view .LVU4442
 17031 0000 10B5     		push	{r4, lr}
 17032              		.cfi_def_cfa_offset 8
 17033              		.cfi_offset 4, -8
 17034              		.cfi_offset 14, -4
 17035 0002 8AB0     		sub	sp, sp, #40
 17036              		.cfi_def_cfa_offset 48
2317:src/xeq.c     **** 	decNumber t;
 17037              		.loc 1 2317 56 view .LVU4443
 17038 0004 0446     		mov	r4, r0
2319:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17039              		.loc 1 2319 2 view .LVU4444
 17040 0006 4FF0FF32 		mov	r2, #-1
 17041 000a 01A8     		add	r0, sp, #4
 17042              	.LVL1264:
2319:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17043              		.loc 1 2319 2 view .LVU4445
 17044 000c FFF7FEFF 		bl	dn_mulpow10
 17045              	.LVL1265:
2320:src/xeq.c     **** }
 17046              		.loc 1 2320 2 is_stmt 1 view .LVU4446
2320:src/xeq.c     **** }
 17047              		.loc 1 2320 9 is_stmt 0 view .LVU4447
 17048 0010 01A9     		add	r1, sp, #4
 17049 0012 2046     		mov	r0, r4
 17050 0014 FFF7FEFF 		bl	decNumberPow10
 17051              	.LVL1266:
2321:src/xeq.c     **** 
 17052              		.loc 1 2321 1 view .LVU4448
 17053 0018 0AB0     		add	sp, sp, #40
 17054              		.cfi_def_cfa_offset 8
 17055              		@ sp needed
 17056 001a 10BD     		pop	{r4, pc}
2321:src/xeq.c     **** 
 17057              		.loc 1 2321 1 view .LVU4449
 17058              		.cfi_endproc
 17059              	.LFE173:
 17061              		.section	.text.convPR2DB,"ax",%progbits
 17062              		.align	1
 17063              		.p2align 2,,3
 17064              		.global	convPR2DB
 17065              		.syntax unified
 17066              		.thumb
 17067              		.thumb_func
 17068              		.fpu fpv4-sp-d16
 17070              	convPR2DB:
 17071              	.LVL1267:
 17072              	.LFB174:
ARM GAS  /tmp/ccjeMhND.s 			page 469


2323:src/xeq.c     **** 	decNumber t;
 17073              		.loc 1 2323 56 is_stmt 1 view -0
 17074              		.cfi_startproc
 17075              		@ args = 0, pretend = 0, frame = 40
 17076              		@ frame_needed = 0, uses_anonymous_args = 0
2324:src/xeq.c     **** 	dn_log10(&t, x);
 17077              		.loc 1 2324 2 view .LVU4451
2325:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 17078              		.loc 1 2325 2 view .LVU4452
2323:src/xeq.c     **** 	decNumber t;
 17079              		.loc 1 2323 56 is_stmt 0 view .LVU4453
 17080 0000 10B5     		push	{r4, lr}
 17081              		.cfi_def_cfa_offset 8
 17082              		.cfi_offset 4, -8
 17083              		.cfi_offset 14, -4
 17084 0002 8AB0     		sub	sp, sp, #40
 17085              		.cfi_def_cfa_offset 48
2323:src/xeq.c     **** 	decNumber t;
 17086              		.loc 1 2323 56 view .LVU4454
 17087 0004 0446     		mov	r4, r0
2325:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 17088              		.loc 1 2325 2 view .LVU4455
 17089 0006 01A8     		add	r0, sp, #4
 17090              	.LVL1268:
2325:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 17091              		.loc 1 2325 2 view .LVU4456
 17092 0008 FFF7FEFF 		bl	dn_log10
 17093              	.LVL1269:
2326:src/xeq.c     **** }
 17094              		.loc 1 2326 2 is_stmt 1 view .LVU4457
2326:src/xeq.c     **** }
 17095              		.loc 1 2326 9 is_stmt 0 view .LVU4458
 17096 000c 2046     		mov	r0, r4
 17097 000e 01A9     		add	r1, sp, #4
 17098 0010 0122     		movs	r2, #1
 17099 0012 FFF7FEFF 		bl	dn_mulpow10
 17100              	.LVL1270:
2327:src/xeq.c     **** 
 17101              		.loc 1 2327 1 view .LVU4459
 17102 0016 0AB0     		add	sp, sp, #40
 17103              		.cfi_def_cfa_offset 8
 17104              		@ sp needed
 17105 0018 10BD     		pop	{r4, pc}
2327:src/xeq.c     **** 
 17106              		.loc 1 2327 1 view .LVU4460
 17107              		.cfi_endproc
 17108              	.LFE174:
 17110 001a 00BF     		.section	.text.do_conv,"ax",%progbits
 17111              		.align	1
 17112              		.p2align 2,,3
 17113              		.global	do_conv
 17114              		.syntax unified
 17115              		.thumb
 17116              		.thumb_func
 17117              		.fpu fpv4-sp-d16
 17119              	do_conv:
 17120              	.LVL1271:
ARM GAS  /tmp/ccjeMhND.s 			page 470


 17121              	.LFB175:
2330:src/xeq.c     **** 	decNumber m;
 17122              		.loc 1 2330 66 is_stmt 1 view -0
 17123              		.cfi_startproc
 17124              		@ args = 0, pretend = 0, frame = 40
 17125              		@ frame_needed = 0, uses_anonymous_args = 0
2331:src/xeq.c     **** 	const unsigned int conv = arg / 2;
 17126              		.loc 1 2331 2 view .LVU4462
2332:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 17127              		.loc 1 2332 2 view .LVU4463
2333:src/xeq.c     **** 
 17128              		.loc 1 2333 2 view .LVU4464
2335:src/xeq.c     **** 		decNumberCopy(r, x);
 17129              		.loc 1 2335 2 view .LVU4465
2330:src/xeq.c     **** 	decNumber m;
 17130              		.loc 1 2330 66 is_stmt 0 view .LVU4466
 17131 0000 70B5     		push	{r4, r5, r6, lr}
 17132              		.cfi_def_cfa_offset 16
 17133              		.cfi_offset 4, -16
 17134              		.cfi_offset 5, -12
 17135              		.cfi_offset 6, -8
 17136              		.cfi_offset 14, -4
2335:src/xeq.c     **** 		decNumberCopy(r, x);
 17137              		.loc 1 2335 5 view .LVU4467
 17138 0002 4D29     		cmp	r1, #77
2330:src/xeq.c     **** 	decNumber m;
 17139              		.loc 1 2330 66 view .LVU4468
 17140 0004 8AB0     		sub	sp, sp, #40
 17141              		.cfi_def_cfa_offset 56
2330:src/xeq.c     **** 	decNumber m;
 17142              		.loc 1 2330 66 view .LVU4469
 17143 0006 1546     		mov	r5, r2
2335:src/xeq.c     **** 		decNumberCopy(r, x);
 17144              		.loc 1 2335 5 view .LVU4470
 17145 0008 15D8     		bhi	.L1203
2340:src/xeq.c     **** 
 17146              		.loc 1 2340 2 is_stmt 1 view .LVU4471
 17147 000a 0D4B     		ldr	r3, .L1205
 17148 000c 0646     		mov	r6, r0
2332:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 17149              		.loc 1 2332 21 is_stmt 0 view .LVU4472
 17150 000e 4808     		lsrs	r0, r1, #1
 17151              	.LVL1272:
2332:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 17152              		.loc 1 2332 21 view .LVU4473
 17153 0010 0C46     		mov	r4, r1
2340:src/xeq.c     **** 
 17154              		.loc 1 2340 2 view .LVU4474
 17155 0012 03EB0010 		add	r0, r3, r0, lsl #4
 17156 0016 01A9     		add	r1, sp, #4
 17157              	.LVL1273:
2340:src/xeq.c     **** 
 17158              		.loc 1 2340 2 view .LVU4475
 17159 0018 FFF7FEFF 		bl	decimal64ToNumber
 17160              	.LVL1274:
2342:src/xeq.c     **** 		dn_divide(r, x, &m);
 17161              		.loc 1 2342 2 is_stmt 1 view .LVU4476
ARM GAS  /tmp/ccjeMhND.s 			page 471


2342:src/xeq.c     **** 		dn_divide(r, x, &m);
 17162              		.loc 1 2342 5 is_stmt 0 view .LVU4477
 17163 001c E307     		lsls	r3, r4, #31
2343:src/xeq.c     **** 	else			// imperial to metric
 17164              		.loc 1 2343 3 view .LVU4478
 17165 001e 01AA     		add	r2, sp, #4
 17166 0020 2946     		mov	r1, r5
 17167 0022 3046     		mov	r0, r6
2342:src/xeq.c     **** 		dn_divide(r, x, &m);
 17168              		.loc 1 2342 5 view .LVU4479
 17169 0024 03D5     		bpl	.L1204
2345:src/xeq.c     **** }
 17170              		.loc 1 2345 3 is_stmt 1 view .LVU4480
 17171 0026 FFF7FEFF 		bl	dn_multiply
 17172              	.LVL1275:
2346:src/xeq.c     **** 
 17173              		.loc 1 2346 1 is_stmt 0 view .LVU4481
 17174 002a 0AB0     		add	sp, sp, #40
 17175              		.cfi_remember_state
 17176              		.cfi_def_cfa_offset 16
 17177              		@ sp needed
 17178 002c 70BD     		pop	{r4, r5, r6, pc}
 17179              	.LVL1276:
 17180              	.L1204:
 17181              		.cfi_restore_state
2343:src/xeq.c     **** 	else			// imperial to metric
 17182              		.loc 1 2343 3 is_stmt 1 view .LVU4482
 17183 002e FFF7FEFF 		bl	dn_divide
 17184              	.LVL1277:
2346:src/xeq.c     **** 
 17185              		.loc 1 2346 1 is_stmt 0 view .LVU4483
 17186 0032 0AB0     		add	sp, sp, #40
 17187              		.cfi_remember_state
 17188              		.cfi_def_cfa_offset 16
 17189              		@ sp needed
 17190 0034 70BD     		pop	{r4, r5, r6, pc}
 17191              	.LVL1278:
 17192              	.L1203:
 17193              		.cfi_restore_state
2336:src/xeq.c     **** 		return;
 17194              		.loc 1 2336 3 is_stmt 1 view .LVU4484
 17195 0036 1146     		mov	r1, r2
 17196              	.LVL1279:
2336:src/xeq.c     **** 		return;
 17197              		.loc 1 2336 3 is_stmt 0 view .LVU4485
 17198 0038 FFF7FEFF 		bl	decNumberCopy
 17199              	.LVL1280:
2337:src/xeq.c     **** 	}
 17200              		.loc 1 2337 3 is_stmt 1 view .LVU4486
2346:src/xeq.c     **** 
 17201              		.loc 1 2346 1 is_stmt 0 view .LVU4487
 17202 003c 0AB0     		add	sp, sp, #40
 17203              		.cfi_def_cfa_offset 16
 17204              		@ sp needed
 17205 003e 70BD     		pop	{r4, r5, r6, pc}
 17206              	.LVL1281:
 17207              	.L1206:
ARM GAS  /tmp/ccjeMhND.s 			page 472


2346:src/xeq.c     **** 
 17208              		.loc 1 2346 1 view .LVU4488
 17209              		.align	2
 17210              	.L1205:
 17211 0040 00000000 		.word	cnsts_conv
 17212              		.cfi_endproc
 17213              	.LFE175:
 17215              		.section	.text.cmdconv,"ax",%progbits
 17216              		.align	1
 17217              		.p2align 2,,3
 17218              		.global	cmdconv
 17219              		.syntax unified
 17220              		.thumb
 17221              		.thumb_func
 17222              		.fpu fpv4-sp-d16
 17224              	cmdconv:
 17225              	.LVL1282:
 17226              	.LFB176:
2348:src/xeq.c     **** 	decNumber x, r;
 17227              		.loc 1 2348 46 is_stmt 1 view -0
 17228              		.cfi_startproc
 17229              		@ args = 0, pretend = 0, frame = 72
 17230              		@ frame_needed = 0, uses_anonymous_args = 0
2349:src/xeq.c     **** 
 17231              		.loc 1 2349 2 view .LVU4490
2351:src/xeq.c     **** 		return;
 17232              		.loc 1 2351 2 view .LVU4491
2351:src/xeq.c     **** 		return;
 17233              		.loc 1 2351 6 is_stmt 0 view .LVU4492
 17234 0000 0E4B     		ldr	r3, .L1215
 17235 0002 1B68     		ldr	r3, [r3]
 17236 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2351:src/xeq.c     **** 		return;
 17237              		.loc 1 2351 5 view .LVU4493
 17238 0008 DB07     		lsls	r3, r3, #31
 17239 000a 00D5     		bpl	.L1214
 17240 000c 7047     		bx	lr
 17241              	.L1214:
2348:src/xeq.c     **** 	decNumber x, r;
 17242              		.loc 1 2348 46 view .LVU4494
 17243 000e 10B5     		push	{r4, lr}
 17244              		.cfi_def_cfa_offset 8
 17245              		.cfi_offset 4, -8
 17246              		.cfi_offset 14, -4
 17247 0010 92B0     		sub	sp, sp, #72
 17248              		.cfi_def_cfa_offset 80
 17249 0012 0446     		mov	r4, r0
2354:src/xeq.c     **** 	do_conv(&r, arg, &x);
 17250              		.loc 1 2354 2 is_stmt 1 view .LVU4495
 17251              	.LVL1283:
 17252              	.LBB2795:
 17253              	.LBI2795:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 17254              		.loc 1 805 12 view .LVU4496
 17255              	.LBB2796:
 806:src/xeq.c     **** }
 17256              		.loc 1 806 2 view .LVU4497
ARM GAS  /tmp/ccjeMhND.s 			page 473


 806:src/xeq.c     **** }
 17257              		.loc 1 806 9 is_stmt 0 view .LVU4498
 17258 0014 6421     		movs	r1, #100
 17259              	.LVL1284:
 806:src/xeq.c     **** }
 17260              		.loc 1 806 9 view .LVU4499
 17261 0016 6846     		mov	r0, sp
 17262              	.LVL1285:
 806:src/xeq.c     **** }
 17263              		.loc 1 806 9 view .LVU4500
 17264 0018 FFF7FEFF 		bl	getRegister
 17265              	.LVL1286:
 806:src/xeq.c     **** }
 17266              		.loc 1 806 9 view .LVU4501
 17267              	.LBE2796:
 17268              	.LBE2795:
2355:src/xeq.c     **** 	setlastX();
 17269              		.loc 1 2355 2 is_stmt 1 view .LVU4502
 17270 001c 6A46     		mov	r2, sp
 17271 001e 2146     		mov	r1, r4
 17272 0020 09A8     		add	r0, sp, #36
 17273 0022 FFF7FEFF 		bl	do_conv
 17274              	.LVL1287:
2356:src/xeq.c     **** 	setX(&r);
 17275              		.loc 1 2356 2 view .LVU4503
 17276              	.LBB2797:
 17277              	.LBI2797:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 17278              		.loc 1 773 6 view .LVU4504
 17279              	.LBB2798:
 774:src/xeq.c     **** }
 17280              		.loc 1 774 2 view .LVU4505
 17281 0026 6421     		movs	r1, #100
 17282 0028 6C20     		movs	r0, #108
 17283 002a FFF7FEFF 		bl	copyreg_n
 17284              	.LVL1288:
 17285              	.LBE2798:
 17286              	.LBE2797:
2357:src/xeq.c     **** }
 17287              		.loc 1 2357 2 view .LVU4506
 17288              	.LBB2799:
 17289              	.LBI2799:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 17290              		.loc 1 809 6 view .LVU4507
 17291              	.LBB2800:
 810:src/xeq.c     **** }
 17292              		.loc 1 810 2 view .LVU4508
 17293 002e 09A9     		add	r1, sp, #36
 17294              	.LVL1289:
 810:src/xeq.c     **** }
 17295              		.loc 1 810 2 is_stmt 0 view .LVU4509
 17296 0030 6420     		movs	r0, #100
 17297 0032 FFF7FEFF 		bl	setRegister
 17298              	.LVL1290:
 810:src/xeq.c     **** }
 17299              		.loc 1 810 2 view .LVU4510
 17300              	.LBE2800:
ARM GAS  /tmp/ccjeMhND.s 			page 474


 17301              	.LBE2799:
2358:src/xeq.c     **** 
 17302              		.loc 1 2358 1 view .LVU4511
 17303 0036 12B0     		add	sp, sp, #72
 17304              		.cfi_def_cfa_offset 8
 17305              		@ sp needed
 17306 0038 10BD     		pop	{r4, pc}
 17307              	.LVL1291:
 17308              	.L1216:
2358:src/xeq.c     **** 
 17309              		.loc 1 2358 1 view .LVU4512
 17310 003a 00BF     		.align	2
 17311              	.L1215:
 17312 003c 00000000 		.word	main_ram
 17313              		.cfi_endproc
 17314              	.LFE176:
 17316              		.section	.text.fin_tst,"ax",%progbits
 17317              		.align	1
 17318              		.p2align 2,,3
 17319              		.global	fin_tst
 17320              		.syntax unified
 17321              		.thumb
 17322              		.thumb_func
 17323              		.fpu fpv4-sp-d16
 17325              	fin_tst:
 17326              	.LVL1292:
 17327              	.LFB177:
2363:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 17328              		.loc 1 2363 27 is_stmt 1 view -0
 17329              		.cfi_startproc
 17330              		@ args = 0, pretend = 0, frame = 0
 17331              		@ frame_needed = 0, uses_anonymous_args = 0
 17332              		@ link register save eliminated.
2364:src/xeq.c     **** 	if (Running || XromRunning) {
 17333              		.loc 1 2364 2 view .LVU4514
2364:src/xeq.c     **** 	if (Running || XromRunning) {
 17334              		.loc 1 2364 31 is_stmt 0 view .LVU4515
 17335 0000 30B1     		cbz	r0, .L1224
 17336              	.LVL1293:
2365:src/xeq.c     **** 		if (! a && incpc())
 17337              		.loc 1 2365 2 is_stmt 1 view .LVU4516
2365:src/xeq.c     **** 		if (! a && incpc())
 17338              		.loc 1 2365 14 is_stmt 0 view .LVU4517
 17339 0002 0A4A     		ldr	r2, .L1226
2365:src/xeq.c     **** 		if (! a && incpc())
 17340              		.loc 1 2365 6 view .LVU4518
 17341 0004 0A4B     		ldr	r3, .L1226+4
2365:src/xeq.c     **** 		if (! a && incpc())
 17342              		.loc 1 2365 14 view .LVU4519
 17343 0006 1268     		ldr	r2, [r2]
 17344 0008 1B68     		ldr	r3, [r3]
 17345 000a 1343     		orrs	r3, r2, r3
 17346 000c 0CD0     		beq	.L1225
2377:src/xeq.c     **** 
 17347              		.loc 1 2377 1 view .LVU4520
 17348 000e 7047     		bx	lr
 17349              	.LVL1294:
ARM GAS  /tmp/ccjeMhND.s 			page 475


 17350              	.L1224:
2365:src/xeq.c     **** 		if (! a && incpc())
 17351              		.loc 1 2365 2 is_stmt 1 view .LVU4521
2365:src/xeq.c     **** 		if (! a && incpc())
 17352              		.loc 1 2365 14 is_stmt 0 view .LVU4522
 17353 0010 064A     		ldr	r2, .L1226
2365:src/xeq.c     **** 		if (! a && incpc())
 17354              		.loc 1 2365 6 view .LVU4523
 17355 0012 074B     		ldr	r3, .L1226+4
2365:src/xeq.c     **** 		if (! a && incpc())
 17356              		.loc 1 2365 14 view .LVU4524
 17357 0014 1268     		ldr	r2, [r2]
 17358 0016 1B68     		ldr	r3, [r3]
 17359 0018 1343     		orrs	r3, r2, r3
 17360 001a 03D1     		bne	.L1220
2364:src/xeq.c     **** 	if (Running || XromRunning) {
 17361              		.loc 1 2364 31 view .LVU4525
 17362 001c 054B     		ldr	r3, .L1226+8
 17363              	.LVL1295:
 17364              	.L1221:
2370:src/xeq.c     **** #ifdef INFRARED
 17365              		.loc 1 2370 3 is_stmt 1 view .LVU4526
2370:src/xeq.c     **** #ifdef INFRARED
 17366              		.loc 1 2370 11 is_stmt 0 view .LVU4527
 17367 001e 064A     		ldr	r2, .L1226+12
 17368 0020 1360     		str	r3, [r2]
2377:src/xeq.c     **** 
 17369              		.loc 1 2377 1 view .LVU4528
 17370 0022 7047     		bx	lr
 17371              	.LVL1296:
 17372              	.L1220:
2377:src/xeq.c     **** 
 17373              		.loc 1 2377 1 view .LVU4529
 17374 0024 FFF7FEBF 		b	fin_tst.part.0
 17375              	.LVL1297:
 17376              	.L1225:
2364:src/xeq.c     **** 	if (Running || XromRunning) {
 17377              		.loc 1 2364 31 view .LVU4530
 17378 0028 044B     		ldr	r3, .L1226+16
 17379 002a F8E7     		b	.L1221
 17380              	.L1227:
 17381              		.align	2
 17382              	.L1226:
 17383 002c 00000000 		.word	XromRunning
 17384 0030 00000000 		.word	Running
 17385 0034 00000000 		.word	.LC3
 17386 0038 00000000 		.word	DispMsg
 17387 003c 00000000 		.word	.LC2
 17388              		.cfi_endproc
 17389              	.LFE177:
 17391              		.section	.text.check_mode,"ax",%progbits
 17392              		.align	1
 17393              		.p2align 2,,3
 17394              		.global	check_mode
 17395              		.syntax unified
 17396              		.thumb
 17397              		.thumb_func
ARM GAS  /tmp/ccjeMhND.s 			page 476


 17398              		.fpu fpv4-sp-d16
 17400              	check_mode:
 17401              	.LVL1298:
 17402              	.LFB139:
1904:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
 17403              		.loc 1 1904 32 is_stmt 1 view -0
 17404              		.cfi_startproc
 17405              		@ args = 0, pretend = 0, frame = 0
 17406              		@ frame_needed = 0, uses_anonymous_args = 0
 17407              		@ link register save eliminated.
1905:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 17408              		.loc 1 1905 2 view .LVU4532
1906:src/xeq.c     **** 
 17409              		.loc 1 1906 2 view .LVU4533
1905:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 17410              		.loc 1 1905 35 is_stmt 0 view .LVU4534
 17411 0000 084B     		ldr	r3, .L1229
 17412              	.LVL1299:
1905:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 17413              		.loc 1 1905 35 view .LVU4535
 17414 0002 1B68     		ldr	r3, [r3]
 17415              	.LVL1300:
1908:src/xeq.c     **** }
 17416              		.loc 1 1908 2 view .LVU4536
 17417 0004 A0F19F00 		sub	r0, #159
 17418              	.LVL1301:
1908:src/xeq.c     **** }
 17419              		.loc 1 1908 2 view .LVU4537
 17420 0008 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 17421              	.LVL1302:
1908:src/xeq.c     **** }
 17422              		.loc 1 1908 2 is_stmt 1 view .LVU4538
 17423 000c B0FA80F0 		clz	r0, r0
 17424 0010 4009     		lsrs	r0, r0, #5
 17425 0012 03F00103 		and	r3, r3, #1
 17426 0016 C01A     		subs	r0, r0, r3
 17427 0018 B0FA80F0 		clz	r0, r0
 17428 001c 4009     		lsrs	r0, r0, #5
 17429 001e FFF7FEBF 		b	fin_tst
 17430              	.LVL1303:
 17431              	.L1230:
1908:src/xeq.c     **** }
 17432              		.loc 1 1908 2 is_stmt 0 view .LVU4539
 17433 0022 00BF     		.align	2
 17434              	.L1229:
 17435 0024 00000000 		.word	main_ram
 17436              		.cfi_endproc
 17437              	.LFE139:
 17439              		.section	.text.check_dblmode,"ax",%progbits
 17440              		.align	1
 17441              		.p2align 2,,3
 17442              		.global	check_dblmode
 17443              		.syntax unified
 17444              		.thumb
 17445              		.thumb_func
 17446              		.fpu fpv4-sp-d16
 17448              	check_dblmode:
ARM GAS  /tmp/ccjeMhND.s 			page 477


 17449              	.LVL1304:
 17450              	.LFB140:
1914:src/xeq.c     **** 	fin_tst(is_dblmode());
 17451              		.loc 1 1914 35 is_stmt 1 view -0
 17452              		.cfi_startproc
 17453              		@ args = 0, pretend = 0, frame = 0
 17454              		@ frame_needed = 0, uses_anonymous_args = 0
 17455              		@ link register save eliminated.
1915:src/xeq.c     **** }
 17456              		.loc 1 1915 2 view .LVU4541
 17457              	.LBB2801:
 17458              	.LBI2801:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 17459              		.loc 1 932 5 view .LVU4542
 17460              	.LBB2802:
 933:src/xeq.c     **** }
 17461              		.loc 1 933 2 view .LVU4543
 933:src/xeq.c     **** }
 17462              		.loc 1 933 24 is_stmt 0 view .LVU4544
 17463 0000 064B     		ldr	r3, .L1232
 17464 0002 1B68     		ldr	r3, [r3]
 17465 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 17466 0008 44F20100 		movw	r0, #16385
 17467              	.LVL1305:
 933:src/xeq.c     **** }
 17468              		.loc 1 933 24 view .LVU4545
 17469 000c 1840     		ands	r0, r0, r3
 17470              	.LBE2802:
 17471              	.LBE2801:
1915:src/xeq.c     **** }
 17472              		.loc 1 1915 2 view .LVU4546
 17473 000e A0F58040 		sub	r0, r0, #16384
 17474 0012 B0FA80F0 		clz	r0, r0
 17475 0016 4009     		lsrs	r0, r0, #5
 17476 0018 FFF7FEBF 		b	fin_tst
 17477              	.LVL1306:
 17478              	.L1233:
 17479              		.align	2
 17480              	.L1232:
 17481 001c 00000000 		.word	main_ram
 17482              		.cfi_endproc
 17483              	.LFE140:
 17485              		.section	.text.isTop,"ax",%progbits
 17486              		.align	1
 17487              		.p2align 2,,3
 17488              		.global	isTop
 17489              		.syntax unified
 17490              		.thumb
 17491              		.thumb_func
 17492              		.fpu fpv4-sp-d16
 17494              	isTop:
 17495              	.LVL1307:
 17496              	.LFB156:
2122:src/xeq.c     **** 	int top = 0;
 17497              		.loc 1 2122 27 is_stmt 1 view -0
 17498              		.cfi_startproc
 17499              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccjeMhND.s 			page 478


 17500              		@ frame_needed = 0, uses_anonymous_args = 0
 17501              		@ link register save eliminated.
2123:src/xeq.c     **** 
 17502              		.loc 1 2123 2 view .LVU4548
2125:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 17503              		.loc 1 2125 2 view .LVU4549
2125:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 17504              		.loc 1 2125 6 is_stmt 0 view .LVU4550
 17505 0000 0D4B     		ldr	r3, .L1242
 17506 0002 1868     		ldr	r0, [r3]
 17507              	.LVL1308:
2125:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 17508              		.loc 1 2125 5 view .LVU4551
 17509 0004 68B1     		cbz	r0, .L1235
2126:src/xeq.c     **** 	}
 17510              		.loc 1 2126 3 is_stmt 1 view .LVU4552
2126:src/xeq.c     **** 	}
 17511              		.loc 1 2126 9 is_stmt 0 view .LVU4553
 17512 0006 0D4B     		ldr	r3, .L1242+4
 17513 0008 1B68     		ldr	r3, [r3]
 17514              	.LBB2803:
 17515              	.LBB2804:
 215:src/xeq.c     **** }
 17516              		.loc 1 215 9 view .LVU4554
 17517 000a B3F9DE27 		ldrsh	r2, [r3, #2014]
 17518              	.LBE2804:
 17519              	.LBE2803:
2126:src/xeq.c     **** 	}
 17520              		.loc 1 2126 9 view .LVU4555
 17521 000e B3F9E207 		ldrsh	r0, [r3, #2018]
 17522              	.LBB2807:
 17523              	.LBI2803:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 17524              		.loc 1 214 5 is_stmt 1 view .LVU4556
 17525              	.LBB2805:
 215:src/xeq.c     **** }
 17526              		.loc 1 215 2 view .LVU4557
 215:src/xeq.c     **** }
 17527              		.loc 1 215 57 is_stmt 0 view .LVU4558
 17528 0012 002A     		cmp	r2, #0
 17529 0014 07DB     		blt	.L1241
 17530 0016 4FF0FF33 		mov	r3, #-1
 17531              	.L1236:
 17532              	.LBE2805:
 17533              	.LBE2807:
2126:src/xeq.c     **** 	}
 17534              		.loc 1 2126 19 view .LVU4559
 17535 001a 9842     		cmp	r0, r3
 17536 001c B4BF     		ite	lt
 17537 001e 0020     		movlt	r0, #0
 17538 0020 0120     		movge	r0, #1
 17539              	.LVL1309:
 17540              	.L1235:
2128:src/xeq.c     **** }
 17541              		.loc 1 2128 2 is_stmt 1 view .LVU4560
 17542 0022 FFF7FEBF 		b	fin_tst
 17543              	.LVL1310:
ARM GAS  /tmp/ccjeMhND.s 			page 479


 17544              	.L1241:
 17545              	.LBB2808:
 17546              	.LBB2806:
 215:src/xeq.c     **** }
 17547              		.loc 1 215 25 is_stmt 0 view .LVU4561
 17548 0026 064B     		ldr	r3, .L1242+8
 17549 0028 1B68     		ldr	r3, [r3]
 215:src/xeq.c     **** }
 17550              		.loc 1 215 57 view .LVU4562
 17551 002a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 17552 002e C3F30B03 		ubfx	r3, r3, #0, #12
 17553 0032 DB43     		mvns	r3, r3
 17554 0034 F1E7     		b	.L1236
 17555              	.L1243:
 17556 0036 00BF     		.align	2
 17557              	.L1242:
 17558 0038 00000000 		.word	Running
 17559 003c 00000000 		.word	main_ram
 17560 0040 00000000 		.word	RetStk
 17561              	.LBE2806:
 17562              	.LBE2808:
 17563              		.cfi_endproc
 17564              	.LFE156:
 17566              		.section	.text.cmdlblp,"ax",%progbits
 17567              		.align	1
 17568              		.p2align 2,,3
 17569              		.global	cmdlblp
 17570              		.syntax unified
 17571              		.thumb
 17572              		.thumb_func
 17573              		.fpu fpv4-sp-d16
 17575              	cmdlblp:
 17576              	.LVL1311:
 17577              	.LFB157:
2133:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 17578              		.loc 1 2133 46 is_stmt 1 view -0
 17579              		.cfi_startproc
 17580              		@ args = 0, pretend = 0, frame = 0
 17581              		@ frame_needed = 0, uses_anonymous_args = 0
2134:src/xeq.c     **** }
 17582              		.loc 1 2134 2 view .LVU4564
2133:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 17583              		.loc 1 2133 46 is_stmt 0 view .LVU4565
 17584 0000 08B5     		push	{r3, lr}
 17585              		.cfi_def_cfa_offset 8
 17586              		.cfi_offset 3, -8
 17587              		.cfi_offset 14, -4
2134:src/xeq.c     **** }
 17588              		.loc 1 2134 26 view .LVU4566
 17589 0002 084B     		ldr	r3, .L1246
 17590              	.LVL1312:
2134:src/xeq.c     **** }
 17591              		.loc 1 2134 26 view .LVU4567
 17592 0004 1B68     		ldr	r3, [r3]
 17593              	.LVL1313:
 17594              	.LBB2809:
 17595              	.LBI2809:
ARM GAS  /tmp/ccjeMhND.s 			page 480


2008:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 17596              		.loc 1 2008 14 is_stmt 1 view .LVU4568
 17597              	.LBB2810:
2009:src/xeq.c     **** }
 17598              		.loc 1 2009 2 view .LVU4569
2009:src/xeq.c     **** }
 17599              		.loc 1 2009 9 is_stmt 0 view .LVU4570
 17600 0006 40F4C441 		orr	r1, r0, #25088
 17601              	.LVL1314:
2009:src/xeq.c     **** }
 17602              		.loc 1 2009 9 view .LVU4571
 17603 000a 0222     		movs	r2, #2
 17604 000c B3F8E007 		ldrh	r0, [r3, #2016]
 17605              	.LVL1315:
2009:src/xeq.c     **** }
 17606              		.loc 1 2009 9 view .LVU4572
 17607 0010 FFF7FEFF 		bl	find_opcode_from
 17608              	.LVL1316:
2009:src/xeq.c     **** }
 17609              		.loc 1 2009 9 view .LVU4573
 17610              	.LBE2810:
 17611              	.LBE2809:
2134:src/xeq.c     **** }
 17612              		.loc 1 2134 2 view .LVU4574
 17613 0014 0038     		subs	r0, r0, #0
2135:src/xeq.c     **** 
 17614              		.loc 1 2135 1 view .LVU4575
 17615 0016 BDE80840 		pop	{r3, lr}
 17616              		.cfi_restore 14
 17617              		.cfi_restore 3
 17618              		.cfi_def_cfa_offset 0
2134:src/xeq.c     **** }
 17619              		.loc 1 2134 2 view .LVU4576
 17620 001a 18BF     		it	ne
 17621 001c 0120     		movne	r0, #1
 17622 001e FFF7FEBF 		b	fin_tst
 17623              	.LVL1317:
 17624              	.L1247:
 17625 0022 00BF     		.align	2
 17626              	.L1246:
 17627 0024 00000000 		.word	main_ram
 17628              		.cfi_endproc
 17629              	.LFE157:
 17631              		.section	.text.cmdmultilblp,"ax",%progbits
 17632              		.align	1
 17633              		.p2align 2,,3
 17634              		.global	cmdmultilblp
 17635              		.syntax unified
 17636              		.thumb
 17637              		.thumb_func
 17638              		.fpu fpv4-sp-d16
 17640              	cmdmultilblp:
 17641              	.LVL1318:
 17642              	.LFB160:
2162:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 17643              		.loc 1 2162 55 is_stmt 1 view -0
 17644              		.cfi_startproc
ARM GAS  /tmp/ccjeMhND.s 			page 481


 17645              		@ args = 0, pretend = 0, frame = 0
 17646              		@ frame_needed = 0, uses_anonymous_args = 0
2163:src/xeq.c     **** }
 17647              		.loc 1 2163 2 view .LVU4578
2162:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 17648              		.loc 1 2162 55 is_stmt 0 view .LVU4579
 17649 0000 08B5     		push	{r3, lr}
 17650              		.cfi_def_cfa_offset 8
 17651              		.cfi_offset 3, -8
 17652              		.cfi_offset 14, -4
2163:src/xeq.c     **** }
 17653              		.loc 1 2163 10 view .LVU4580
 17654 0002 0021     		movs	r1, #0
 17655              	.LVL1319:
2163:src/xeq.c     **** }
 17656              		.loc 1 2163 10 view .LVU4581
 17657 0004 FFF7FEFF 		bl	findmultilbl
 17658              	.LVL1320:
2163:src/xeq.c     **** }
 17659              		.loc 1 2163 2 view .LVU4582
 17660 0008 0038     		subs	r0, r0, #0
2164:src/xeq.c     **** 
 17661              		.loc 1 2164 1 view .LVU4583
 17662 000a BDE80840 		pop	{r3, lr}
 17663              		.cfi_restore 14
 17664              		.cfi_restore 3
 17665              		.cfi_def_cfa_offset 0
2163:src/xeq.c     **** }
 17666              		.loc 1 2163 2 view .LVU4584
 17667 000e 18BF     		it	ne
 17668 0010 0120     		movne	r0, #1
 17669 0012 FFF7FEBF 		b	fin_tst
 17670              	.LVL1321:
 17671              		.cfi_endproc
 17672              	.LFE160:
 17674 0016 00BF     		.section	.text.cmdkeyp,"ax",%progbits
 17675              		.align	1
 17676              		.p2align 2,,3
 17677              		.global	cmdkeyp
 17678              		.syntax unified
 17679              		.thumb
 17680              		.thumb_func
 17681              		.fpu fpv4-sp-d16
 17683              	cmdkeyp:
 17684              	.LVL1322:
 17685              	.LFB135:
1840:src/xeq.c     **** 	int cond = LastKey == 0;
 17686              		.loc 1 1840 46 is_stmt 1 view -0
 17687              		.cfi_startproc
 17688              		@ args = 0, pretend = 0, frame = 0
 17689              		@ frame_needed = 0, uses_anonymous_args = 0
1841:src/xeq.c     **** 	if (!cond) {
 17690              		.loc 1 1841 2 view .LVU4586
1840:src/xeq.c     **** 	int cond = LastKey == 0;
 17691              		.loc 1 1840 46 is_stmt 0 view .LVU4587
 17692 0000 70B5     		push	{r4, r5, r6, lr}
 17693              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccjeMhND.s 			page 482


 17694              		.cfi_offset 4, -16
 17695              		.cfi_offset 5, -12
 17696              		.cfi_offset 6, -8
 17697              		.cfi_offset 14, -4
1841:src/xeq.c     **** 	if (!cond) {
 17698              		.loc 1 1841 13 view .LVU4588
 17699 0002 104B     		ldr	r3, .L1257
 17700 0004 93F91320 		ldrsb	r2, [r3, #19]
1841:src/xeq.c     **** 	if (!cond) {
 17701              		.loc 1 1841 21 view .LVU4589
 17702 0008 002A     		cmp	r2, #0
1840:src/xeq.c     **** 	int cond = LastKey == 0;
 17703              		.loc 1 1840 46 view .LVU4590
 17704 000a 82B0     		sub	sp, sp, #8
 17705              		.cfi_def_cfa_offset 24
1841:src/xeq.c     **** 	if (!cond) {
 17706              		.loc 1 1841 21 view .LVU4591
 17707 000c 0CBF     		ite	eq
 17708 000e 0125     		moveq	r5, #1
 17709 0010 0025     		movne	r5, #0
 17710              	.LVL1323:
1842:src/xeq.c     **** 		int k = LastKey - 1;
 17711              		.loc 1 1842 2 is_stmt 1 view .LVU4592
1842:src/xeq.c     **** 		int k = LastKey - 1;
 17712              		.loc 1 1842 5 is_stmt 0 view .LVU4593
 17713 0012 05D1     		bne	.L1256
1847:src/xeq.c     **** }
 17714              		.loc 1 1847 2 is_stmt 1 view .LVU4594
 17715 0014 2846     		mov	r0, r5
 17716              	.LVL1324:
1848:src/xeq.c     **** 
 17717              		.loc 1 1848 1 is_stmt 0 view .LVU4595
 17718 0016 02B0     		add	sp, sp, #8
 17719              		.cfi_remember_state
 17720              		.cfi_def_cfa_offset 16
 17721              		@ sp needed
 17722 0018 BDE87040 		pop	{r4, r5, r6, lr}
 17723              		.cfi_restore 14
 17724              		.cfi_restore 6
 17725              		.cfi_restore 5
 17726              		.cfi_restore 4
 17727              		.cfi_def_cfa_offset 0
 17728              	.LVL1325:
1847:src/xeq.c     **** }
 17729              		.loc 1 1847 2 view .LVU4596
 17730 001c FFF7FEBF 		b	fin_tst
 17731              	.LVL1326:
 17732              	.L1256:
 17733              		.cfi_restore_state
 17734              	.LBB2811:
1843:src/xeq.c     **** 		LastKey = 0;
 17735              		.loc 1 1843 3 is_stmt 1 view .LVU4597
1844:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 17736              		.loc 1 1844 3 view .LVU4598
 17737 0020 0446     		mov	r4, r0
1844:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 17738              		.loc 1 1844 11 is_stmt 0 view .LVU4599
ARM GAS  /tmp/ccjeMhND.s 			page 483


 17739 0022 0026     		movs	r6, #0
1845:src/xeq.c     **** 	}
 17740              		.loc 1 1845 26 view .LVU4600
 17741 0024 501E     		subs	r0, r2, #1
 17742              	.LVL1327:
1844:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 17743              		.loc 1 1844 11 view .LVU4601
 17744 0026 DE74     		strb	r6, [r3, #19]
1845:src/xeq.c     **** 	}
 17745              		.loc 1 1845 3 is_stmt 1 view .LVU4602
1845:src/xeq.c     **** 	}
 17746              		.loc 1 1845 26 is_stmt 0 view .LVU4603
 17747 0028 FFF7FEFF 		bl	keycode_to_row_column
 17748              	.LVL1328:
1845:src/xeq.c     **** 	}
 17749              		.loc 1 1845 26 view .LVU4604
 17750 002c 0246     		mov	r2, r0
1845:src/xeq.c     **** 	}
 17751              		.loc 1 1845 3 view .LVU4605
 17752 002e 0096     		str	r6, [sp]
 17753 0030 2046     		mov	r0, r4
 17754 0032 D317     		asrs	r3, r2, #31
 17755 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 17756              	.LVL1329:
 17757              	.LBE2811:
1847:src/xeq.c     **** }
 17758              		.loc 1 1847 2 is_stmt 1 view .LVU4606
 17759 0038 2846     		mov	r0, r5
1848:src/xeq.c     **** 
 17760              		.loc 1 1848 1 is_stmt 0 view .LVU4607
 17761 003a 02B0     		add	sp, sp, #8
 17762              		.cfi_def_cfa_offset 16
 17763              		@ sp needed
 17764 003c BDE87040 		pop	{r4, r5, r6, lr}
 17765              		.cfi_restore 14
 17766              		.cfi_restore 6
 17767              		.cfi_restore 5
 17768              		.cfi_restore 4
 17769              		.cfi_def_cfa_offset 0
 17770              	.LVL1330:
1847:src/xeq.c     **** }
 17771              		.loc 1 1847 2 view .LVU4608
 17772 0040 FFF7FEBF 		b	fin_tst
 17773              	.LVL1331:
 17774              	.L1258:
1847:src/xeq.c     **** }
 17775              		.loc 1 1847 2 view .LVU4609
 17776              		.align	2
 17777              	.L1257:
 17778 0044 00000000 		.word	StateWhileOn
 17779              		.cfi_endproc
 17780              	.LFE135:
 17782              		.section	.text.do_tst,"ax",%progbits
 17783              		.align	1
 17784              		.p2align 2,,3
 17785              		.syntax unified
 17786              		.thumb
ARM GAS  /tmp/ccjeMhND.s 			page 484


 17787              		.thumb_func
 17788              		.fpu fpv4-sp-d16
 17790              	do_tst:
 17791              	.LVL1332:
 17792              	.LFB183:
3078:src/xeq.c     **** 	int a = 0;
 17793              		.loc 1 3078 51 is_stmt 1 view -0
 17794              		.cfi_startproc
 17795              		@ args = 0, pretend = 0, frame = 112
 17796              		@ frame_needed = 0, uses_anonymous_args = 0
3079:src/xeq.c     **** 	int iszero, isneg;
 17797              		.loc 1 3079 2 view .LVU4611
3080:src/xeq.c     **** 
 17798              		.loc 1 3080 2 view .LVU4612
3082:src/xeq.c     **** 
 17799              		.loc 1 3082 2 view .LVU4613
 17800              	.LBB2812:
 17801              	.LBI2812:
1146:src/xeq.c     **** 	process_cmdline();
 17802              		.loc 1 1146 6 view .LVU4614
 17803              	.LBB2813:
1147:src/xeq.c     **** 	set_lift();
 17804              		.loc 1 1147 2 view .LVU4615
 17805              	.LBE2813:
 17806              	.LBE2812:
3078:src/xeq.c     **** 	int a = 0;
 17807              		.loc 1 3078 51 is_stmt 0 view .LVU4616
 17808 0000 2DE9D043 		push	{r4, r6, r7, r8, r9, lr}
 17809              		.cfi_def_cfa_offset 24
 17810              		.cfi_offset 4, -24
 17811              		.cfi_offset 6, -20
 17812              		.cfi_offset 7, -16
 17813              		.cfi_offset 8, -12
 17814              		.cfi_offset 9, -8
 17815              		.cfi_offset 14, -4
 17816 0004 9CB0     		sub	sp, sp, #112
 17817              		.cfi_def_cfa_offset 136
3078:src/xeq.c     **** 	int a = 0;
 17818              		.loc 1 3078 51 view .LVU4617
 17819 0006 0C46     		mov	r4, r1
 17820 0008 8046     		mov	r8, r0
 17821              	.LBB2823:
 17822              	.LBB2820:
1147:src/xeq.c     **** 	set_lift();
 17823              		.loc 1 1147 2 view .LVU4618
 17824 000a FFF7FEFF 		bl	process_cmdline
 17825              	.LVL1333:
1148:src/xeq.c     **** }
 17826              		.loc 1 1148 2 is_stmt 1 view .LVU4619
 17827              	.LBB2814:
 17828              	.LBI2814:
 748:src/xeq.c     ****     State2.state_lift = 1;
 17829              		.loc 1 748 6 view .LVU4620
 17830              	.LBB2815:
 749:src/xeq.c     **** }
 17831              		.loc 1 749 5 view .LVU4621
 749:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 485


 17832              		.loc 1 749 23 is_stmt 0 view .LVU4622
 17833 000e 544A     		ldr	r2, .L1289
 17834              	.LBE2815:
 17835              	.LBE2814:
 17836              	.LBE2820:
 17837              	.LBE2823:
3084:src/xeq.c     **** 		unsigned long long int xv, yv;
 17838              		.loc 1 3084 6 view .LVU4623
 17839 0010 5449     		ldr	r1, .L1289+4
 17840              	.LBB2824:
 17841              	.LBB2821:
 17842              	.LBB2818:
 17843              	.LBB2816:
 749:src/xeq.c     **** }
 17844              		.loc 1 749 23 view .LVU4624
 17845 0012 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 17846              	.LBE2816:
 17847              	.LBE2818:
 17848              	.LBE2821:
 17849              	.LBE2824:
3084:src/xeq.c     **** 		unsigned long long int xv, yv;
 17850              		.loc 1 3084 6 view .LVU4625
 17851 0014 0968     		ldr	r1, [r1]
 17852              	.LBB2825:
 17853              	.LBB2822:
 17854              	.LBB2819:
 17855              	.LBB2817:
 749:src/xeq.c     **** }
 17856              		.loc 1 749 23 view .LVU4626
 17857 0016 43F04003 		orr	r3, r3, #64
 17858 001a D375     		strb	r3, [r2, #23]
 17859              	.LBE2817:
 17860              	.LBE2819:
 17861              	.LBE2822:
 17862              	.LBE2825:
3084:src/xeq.c     **** 		unsigned long long int xv, yv;
 17863              		.loc 1 3084 2 is_stmt 1 view .LVU4627
3084:src/xeq.c     **** 		unsigned long long int xv, yv;
 17864              		.loc 1 3084 6 is_stmt 0 view .LVU4628
 17865 001c 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
3084:src/xeq.c     **** 		unsigned long long int xv, yv;
 17866              		.loc 1 3084 5 view .LVU4629
 17867 0020 DB07     		lsls	r3, r3, #31
 17868 0022 2CD5     		bpl	.L1260
 17869              	.LBB2826:
3085:src/xeq.c     **** 		int xs, ys;
 17870              		.loc 1 3085 3 is_stmt 1 view .LVU4630
3086:src/xeq.c     **** 
 17871              		.loc 1 3086 3 view .LVU4631
3088:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 17872              		.loc 1 3088 3 view .LVU4632
 17873              	.LBB2827:
 17874              	.LBI2827:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 17875              		.loc 1 1256 15 view .LVU4633
 17876              	.LBB2828:
1257:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 486


 17877              		.loc 1 1257 2 view .LVU4634
1257:src/xeq.c     **** }
 17878              		.loc 1 1257 9 is_stmt 0 view .LVU4635
 17879 0024 6420     		movs	r0, #100
 17880 0026 FFF7FEFF 		bl	get_reg_n_int
 17881              	.LVL1334:
 17882              	.LBE2828:
 17883              	.LBE2827:
3088:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 17884              		.loc 1 3088 8 view .LVU4636
 17885 002a 0AAA     		add	r2, sp, #40
 17886 002c FFF7FEFF 		bl	extract_value
 17887              	.LVL1335:
3089:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 17888              		.loc 1 3089 6 view .LVU4637
 17889 0030 B8F5FA6F 		cmp	r8, #2000
3088:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 17890              		.loc 1 3088 8 view .LVU4638
 17891 0034 0646     		mov	r6, r0
 17892 0036 0F46     		mov	r7, r1
 17893              	.LVL1336:
3089:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 17894              		.loc 1 3089 3 is_stmt 1 view .LVU4639
3089:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 17895              		.loc 1 3089 6 is_stmt 0 view .LVU4640
 17896 0038 51DB     		blt	.L1261
3090:src/xeq.c     **** 			ys = 0;
 17897              		.loc 1 3090 4 is_stmt 1 view .LVU4641
3090:src/xeq.c     **** 			ys = 0;
 17898              		.loc 1 3090 30 is_stmt 0 view .LVU4642
 17899 003a A8F61B08 		subw	r8, r8, #2075
 17900              	.LVL1337:
3090:src/xeq.c     **** 			ys = 0;
 17901              		.loc 1 3090 7 view .LVU4643
 17902 003e 4FEAE879 		asr	r9, r8, #31
 17903              	.LVL1338:
3091:src/xeq.c     **** 		} else
 17904              		.loc 1 3091 4 is_stmt 1 view .LVU4644
 17905 0042 0022     		movs	r2, #0
 17906              	.LVL1339:
 17907              	.L1262:
3095:src/xeq.c     **** 			iszero = 1;
 17908              		.loc 1 3095 3 view .LVU4645
3095:src/xeq.c     **** 			iszero = 1;
 17909              		.loc 1 3095 6 is_stmt 0 view .LVU4646
 17910 0044 56EA0703 		orrs	r3, r6, r7
 17911 0048 40D1     		bne	.L1263
3095:src/xeq.c     **** 			iszero = 1;
 17912              		.loc 1 3095 15 discriminator 1 view .LVU4647
 17913 004a 58EA0903 		orrs	r3, r8, r9
 17914 004e 50D0     		beq	.L1264
 17915              	.L1266:
 17916 0050 0A9B     		ldr	r3, [sp, #40]
3100:src/xeq.c     **** 			if (xs)		// both negative
 17917              		.loc 1 3100 6 view .LVU4648
 17918 0052 9A42     		cmp	r2, r3
3098:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 487


 17919              		.loc 1 3098 24 view .LVU4649
 17920 0054 4FF00000 		mov	r0, #0
 17921              	.LVL1340:
3100:src/xeq.c     **** 			if (xs)		// both negative
 17922              		.loc 1 3100 3 is_stmt 1 view .LVU4650
3100:src/xeq.c     **** 			if (xs)		// both negative
 17923              		.loc 1 3100 6 is_stmt 0 view .LVU4651
 17924 0058 50D0     		beq	.L1267
 17925              	.LVL1341:
 17926              	.L1270:
3100:src/xeq.c     **** 			if (xs)		// both negative
 17927              		.loc 1 3100 6 view .LVU4652
 17928              	.LBE2826:
3128:src/xeq.c     **** 	case TST_APX:
 17929              		.loc 1 3128 2 is_stmt 1 view .LVU4653
 17930 005a 062C     		cmp	r4, #6
 17931 005c 30D8     		bhi	.L1276
 17932 005e DFE804F0 		tbb	[pc, r4]
 17933              	.L1278:
 17934 0062 09       		.byte	(.L1275-.L1278)/2
 17935 0063 55       		.byte	(.L1287-.L1278)/2
 17936 0064 09       		.byte	(.L1275-.L1278)/2
 17937 0065 2E       		.byte	(.L1281-.L1278)/2
 17938 0066 64       		.byte	(.L1280-.L1278)/2
 17939 0067 69       		.byte	(.L1279-.L1278)/2
 17940 0068 04       		.byte	(.L1277-.L1278)/2
 17941 0069 00       		.p2align 1
 17942              	.L1277:
3135:src/xeq.c     **** 	default:	a = 0;			break;
 17943              		.loc 1 3135 15 view .LVU4654
3135:src/xeq.c     **** 	default:	a = 0;			break;
 17944              		.loc 1 3135 26 is_stmt 0 view .LVU4655
 17945 006a 002B     		cmp	r3, #0
 17946 006c 67D0     		beq	.L1285
3135:src/xeq.c     **** 	default:	a = 0;			break;
 17947              		.loc 1 3135 26 discriminator 2 view .LVU4656
 17948 006e 0038     		subs	r0, r0, #0
3135:src/xeq.c     **** 	default:	a = 0;			break;
 17949              		.loc 1 3135 26 discriminator 2 view .LVU4657
 17950 0070 18BF     		it	ne
 17951 0072 0120     		movne	r0, #1
 17952              	.LVL1342:
 17953              	.L1275:
3139:src/xeq.c     **** }
 17954              		.loc 1 3139 7 is_stmt 1 view .LVU4658
 17955 0074 FFF7FEFF 		bl	fin_tst
 17956              	.LVL1343:
3140:src/xeq.c     **** 
 17957              		.loc 1 3140 1 is_stmt 0 view .LVU4659
 17958 0078 1CB0     		add	sp, sp, #112
 17959              		.cfi_remember_state
 17960              		.cfi_def_cfa_offset 24
 17961              		@ sp needed
 17962 007a BDE8D083 		pop	{r4, r6, r7, r8, r9, pc}
 17963              	.LVL1344:
 17964              	.L1260:
 17965              		.cfi_restore_state
ARM GAS  /tmp/ccjeMhND.s 			page 488


 17966              	.LBB2829:
3108:src/xeq.c     **** 
 17967              		.loc 1 3108 3 is_stmt 1 view .LVU4660
3110:src/xeq.c     **** 		if (decNumberIsNaN(&x))
 17968              		.loc 1 3110 3 view .LVU4661
 17969              	.LBB2830:
 17970              	.LBI2830:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 17971              		.loc 1 805 12 view .LVU4662
 17972              	.LBB2831:
 806:src/xeq.c     **** }
 17973              		.loc 1 806 2 view .LVU4663
 806:src/xeq.c     **** }
 17974              		.loc 1 806 9 is_stmt 0 view .LVU4664
 17975 007e 0AA8     		add	r0, sp, #40
 17976              	.LVL1345:
 806:src/xeq.c     **** }
 17977              		.loc 1 806 9 view .LVU4665
 17978 0080 6421     		movs	r1, #100
 17979 0082 FFF7FEFF 		bl	getRegister
 17980              	.LVL1346:
 806:src/xeq.c     **** }
 17981              		.loc 1 806 9 view .LVU4666
 17982              	.LBE2831:
 17983              	.LBE2830:
3111:src/xeq.c     **** 			goto flse;
 17984              		.loc 1 3111 3 is_stmt 1 view .LVU4667
3111:src/xeq.c     **** 			goto flse;
 17985              		.loc 1 3111 6 is_stmt 0 view .LVU4668
 17986 0086 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
 17987 008a 13F0300F 		tst	r3, #48
 17988 008e 17D1     		bne	.L1276
3114:src/xeq.c     **** 		if (decNumberIsNaN(&t))
 17989              		.loc 1 3114 3 is_stmt 1 view .LVU4669
 17990 0090 01A8     		add	r0, sp, #4
 17991 0092 4146     		mov	r1, r8
 17992 0094 FFF7FEFF 		bl	getRegister
 17993              	.LVL1347:
3115:src/xeq.c     **** 			goto flse;
 17994              		.loc 1 3115 3 view .LVU4670
3115:src/xeq.c     **** 			goto flse;
 17995              		.loc 1 3115 6 is_stmt 0 view .LVU4671
 17996 0098 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 17997 009c 13F0300F 		tst	r3, #48
 17998 00a0 0ED1     		bne	.L1276
3118:src/xeq.c     **** 			decNumberRnd(&x, &x);
 17999              		.loc 1 3118 3 is_stmt 1 view .LVU4672
3118:src/xeq.c     **** 			decNumberRnd(&x, &x);
 18000              		.loc 1 3118 6 is_stmt 0 view .LVU4673
 18001 00a2 022C     		cmp	r4, #2
 18002 00a4 50D0     		beq	.L1288
 18003              	.L1273:
3123:src/xeq.c     **** 		iszero = dn_eq0(&r);
 18004              		.loc 1 3123 3 is_stmt 1 view .LVU4674
 18005 00a6 01AA     		add	r2, sp, #4
 18006 00a8 0AA9     		add	r1, sp, #40
 18007 00aa 13A8     		add	r0, sp, #76
ARM GAS  /tmp/ccjeMhND.s 			page 489


 18008 00ac FFF7FEFF 		bl	dn_compare
 18009              	.LVL1348:
3124:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 18010              		.loc 1 3124 3 view .LVU4675
3124:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 18011              		.loc 1 3124 12 is_stmt 0 view .LVU4676
 18012 00b0 13A8     		add	r0, sp, #76
 18013 00b2 FFF7FEFF 		bl	dn_eq0
 18014              	.LVL1349:
3125:src/xeq.c     **** 	}
 18015              		.loc 1 3125 11 view .LVU4677
 18016 00b6 9DF95430 		ldrsb	r3, [sp, #84]
 18017              	.LVL1350:
3125:src/xeq.c     **** 	}
 18018              		.loc 1 3125 3 is_stmt 1 view .LVU4678
3125:src/xeq.c     **** 	}
 18019              		.loc 1 3125 11 is_stmt 0 view .LVU4679
 18020 00ba DB0F     		lsrs	r3, r3, #31
 18021              	.LVL1351:
3125:src/xeq.c     **** 	}
 18022              		.loc 1 3125 11 view .LVU4680
 18023 00bc CDE7     		b	.L1270
 18024              	.LVL1352:
 18025              	.L1281:
3125:src/xeq.c     **** 	}
 18026              		.loc 1 3125 11 view .LVU4681
 18027              	.LBE2829:
3132:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 18028              		.loc 1 3132 15 is_stmt 1 view .LVU4682
3132:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 18029              		.loc 1 3132 25 is_stmt 0 view .LVU4683
 18030 00be 2BBB     		cbnz	r3, .L1287
 18031              	.LVL1353:
 18032              	.L1276:
3132:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 18033              		.loc 1 3132 25 view .LVU4684
 18034 00c0 0020     		movs	r0, #0
 18035              	.LVL1354:
3139:src/xeq.c     **** }
 18036              		.loc 1 3139 7 is_stmt 1 view .LVU4685
 18037 00c2 FFF7FEFF 		bl	fin_tst
 18038              	.LVL1355:
3140:src/xeq.c     **** 
 18039              		.loc 1 3140 1 is_stmt 0 view .LVU4686
 18040 00c6 1CB0     		add	sp, sp, #112
 18041              		.cfi_remember_state
 18042              		.cfi_def_cfa_offset 24
 18043              		@ sp needed
 18044 00c8 BDE8D083 		pop	{r4, r6, r7, r8, r9, pc}
 18045              	.LVL1356:
 18046              	.L1263:
 18047              		.cfi_restore_state
 18048              	.LBB2832:
3098:src/xeq.c     **** 
 18049              		.loc 1 3098 4 is_stmt 1 view .LVU4687
3098:src/xeq.c     **** 
 18050              		.loc 1 3098 24 is_stmt 0 view .LVU4688
ARM GAS  /tmp/ccjeMhND.s 			page 490


 18051 00cc B945     		cmp	r9, r7
 18052 00ce 08BF     		it	eq
 18053 00d0 B045     		cmpeq	r8, r6
 18054 00d2 BDD1     		bne	.L1266
3098:src/xeq.c     **** 
 18055              		.loc 1 3098 31 discriminator 1 view .LVU4689
 18056 00d4 0A9B     		ldr	r3, [sp, #40]
3098:src/xeq.c     **** 
 18057              		.loc 1 3098 24 discriminator 1 view .LVU4690
 18058 00d6 9342     		cmp	r3, r2
 18059 00d8 33D0     		beq	.L1283
3098:src/xeq.c     **** 
 18060              		.loc 1 3098 24 view .LVU4691
 18061 00da 0020     		movs	r0, #0
 18062 00dc BDE7     		b	.L1270
 18063              	.LVL1357:
 18064              	.L1261:
3093:src/xeq.c     **** 
 18065              		.loc 1 3093 4 is_stmt 1 view .LVU4692
3093:src/xeq.c     **** 
 18066              		.loc 1 3093 9 is_stmt 0 view .LVU4693
 18067 00de 4046     		mov	r0, r8
 18068 00e0 FFF7FEFF 		bl	get_reg_n_int
 18069              	.LVL1358:
 18070 00e4 13AA     		add	r2, sp, #76
 18071 00e6 FFF7FEFF 		bl	extract_value
 18072              	.LVL1359:
 18073 00ea 139A     		ldr	r2, [sp, #76]
 18074 00ec 8046     		mov	r8, r0
 18075              	.LVL1360:
3093:src/xeq.c     **** 
 18076              		.loc 1 3093 9 view .LVU4694
 18077 00ee 8946     		mov	r9, r1
 18078              	.LVL1361:
3093:src/xeq.c     **** 
 18079              		.loc 1 3093 9 view .LVU4695
 18080 00f0 A8E7     		b	.L1262
 18081              	.L1264:
3093:src/xeq.c     **** 
 18082              		.loc 1 3093 9 view .LVU4696
 18083 00f2 0A9B     		ldr	r3, [sp, #40]
3100:src/xeq.c     **** 			if (xs)		// both negative
 18084              		.loc 1 3100 6 view .LVU4697
 18085 00f4 9A42     		cmp	r2, r3
3096:src/xeq.c     **** 		else
 18086              		.loc 1 3096 11 view .LVU4698
 18087 00f6 4FF00100 		mov	r0, #1
 18088              	.LVL1362:
3100:src/xeq.c     **** 			if (xs)		// both negative
 18089              		.loc 1 3100 3 is_stmt 1 view .LVU4699
3100:src/xeq.c     **** 			if (xs)		// both negative
 18090              		.loc 1 3100 6 is_stmt 0 view .LVU4700
 18091 00fa AED1     		bne	.L1270
 18092              	.LVL1363:
 18093              	.L1267:
3101:src/xeq.c     **** 				isneg = xv > yv;
 18094              		.loc 1 3101 4 is_stmt 1 view .LVU4701
ARM GAS  /tmp/ccjeMhND.s 			page 491


3101:src/xeq.c     **** 				isneg = xv > yv;
 18095              		.loc 1 3101 7 is_stmt 0 view .LVU4702
 18096 00fc 73B1     		cbz	r3, .L1269
3102:src/xeq.c     **** 			else		// both positive
 18097              		.loc 1 3102 5 is_stmt 1 view .LVU4703
3102:src/xeq.c     **** 			else		// both positive
 18098              		.loc 1 3102 16 is_stmt 0 view .LVU4704
 18099 00fe B945     		cmp	r9, r7
 18100 0100 08BF     		it	eq
 18101 0102 B045     		cmpeq	r8, r6
 18102 0104 34BF     		ite	cc
 18103 0106 0123     		movcc	r3, #1
 18104 0108 0023     		movcs	r3, #0
 18105              	.LVL1364:
3102:src/xeq.c     **** 			else		// both positive
 18106              		.loc 1 3102 16 view .LVU4705
 18107 010a A6E7     		b	.L1270
 18108              	.LVL1365:
 18109              	.L1287:
3102:src/xeq.c     **** 			else		// both positive
 18110              		.loc 1 3102 16 view .LVU4706
 18111              	.LBE2832:
3132:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 18112              		.loc 1 3132 25 discriminator 1 view .LVU4707
 18113 010c B0FA80F0 		clz	r0, r0
 18114              	.LVL1366:
3132:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 18115              		.loc 1 3132 25 discriminator 1 view .LVU4708
 18116 0110 4009     		lsrs	r0, r0, #5
 18117              	.LVL1367:
3139:src/xeq.c     **** }
 18118              		.loc 1 3139 7 is_stmt 1 discriminator 1 view .LVU4709
 18119 0112 FFF7FEFF 		bl	fin_tst
 18120              	.LVL1368:
3140:src/xeq.c     **** 
 18121              		.loc 1 3140 1 is_stmt 0 discriminator 1 view .LVU4710
 18122 0116 1CB0     		add	sp, sp, #112
 18123              		.cfi_remember_state
 18124              		.cfi_def_cfa_offset 24
 18125              		@ sp needed
 18126 0118 BDE8D083 		pop	{r4, r6, r7, r8, r9, pc}
 18127              	.LVL1369:
 18128              	.L1269:
 18129              		.cfi_restore_state
 18130              	.LBB2833:
3104:src/xeq.c     **** 		} else
 18131              		.loc 1 3104 5 is_stmt 1 view .LVU4711
3104:src/xeq.c     **** 		} else
 18132              		.loc 1 3104 16 is_stmt 0 view .LVU4712
 18133 011c 4F45     		cmp	r7, r9
 18134 011e 08BF     		it	eq
 18135 0120 4645     		cmpeq	r6, r8
 18136 0122 34BF     		ite	cc
 18137 0124 0123     		movcc	r3, #1
 18138 0126 0023     		movcs	r3, #0
 18139              	.LVL1370:
3104:src/xeq.c     **** 		} else
ARM GAS  /tmp/ccjeMhND.s 			page 492


 18140              		.loc 1 3104 16 view .LVU4713
 18141 0128 97E7     		b	.L1270
 18142              	.LVL1371:
 18143              	.L1280:
3104:src/xeq.c     **** 		} else
 18144              		.loc 1 3104 16 view .LVU4714
 18145              	.LBE2833:
3133:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 18146              		.loc 1 3133 15 is_stmt 1 discriminator 2 view .LVU4715
3133:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 18147              		.loc 1 3133 25 is_stmt 0 discriminator 2 view .LVU4716
 18148 012a 0343     		orrs	r3, r0, r3
 18149              	.LVL1372:
3133:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 18150              		.loc 1 3133 25 discriminator 2 view .LVU4717
 18151 012c 14BF     		ite	ne
 18152 012e 0120     		movne	r0, #1
 18153              	.LVL1373:
3133:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 18154              		.loc 1 3133 25 discriminator 2 view .LVU4718
 18155 0130 0020     		moveq	r0, #0
 18156 0132 9FE7     		b	.L1275
 18157              	.LVL1374:
 18158              	.L1279:
3134:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 18159              		.loc 1 3134 15 is_stmt 1 discriminator 1 view .LVU4719
3134:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 18160              		.loc 1 3134 26 is_stmt 0 discriminator 1 view .LVU4720
 18161 0134 0343     		orrs	r3, r0, r3
 18162              	.LVL1375:
3134:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 18163              		.loc 1 3134 26 discriminator 1 view .LVU4721
 18164 0136 0CBF     		ite	eq
 18165 0138 0120     		moveq	r0, #1
 18166              	.LVL1376:
3134:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 18167              		.loc 1 3134 26 discriminator 1 view .LVU4722
 18168 013a 0020     		movne	r0, #0
 18169 013c 9AE7     		b	.L1275
 18170              	.LVL1377:
 18171              	.L1285:
3135:src/xeq.c     **** 	default:	a = 0;			break;
 18172              		.loc 1 3135 26 view .LVU4723
 18173 013e 0120     		movs	r0, #1
 18174              	.LVL1378:
3135:src/xeq.c     **** 	default:	a = 0;			break;
 18175              		.loc 1 3135 26 view .LVU4724
 18176 0140 98E7     		b	.L1275
 18177              	.LVL1379:
 18178              	.L1283:
 18179              	.LBB2834:
3135:src/xeq.c     **** 	default:	a = 0;			break;
 18180              		.loc 1 3135 26 view .LVU4725
 18181 0142 1346     		mov	r3, r2
3098:src/xeq.c     **** 
 18182              		.loc 1 3098 24 view .LVU4726
 18183 0144 0120     		movs	r0, #1
ARM GAS  /tmp/ccjeMhND.s 			page 493


 18184 0146 D9E7     		b	.L1267
 18185              	.LVL1380:
 18186              	.L1288:
3098:src/xeq.c     **** 
 18187              		.loc 1 3098 24 view .LVU4727
 18188              	.LBE2834:
 18189              	.LBB2835:
3119:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
 18190              		.loc 1 3119 4 is_stmt 1 view .LVU4728
 18191 0148 0AA9     		add	r1, sp, #40
 18192 014a 0846     		mov	r0, r1
 18193 014c FFF7FEFF 		bl	decNumberRnd
 18194              	.LVL1381:
3120:src/xeq.c     **** 				decNumberRnd(&t, &t);
 18195              		.loc 1 3120 4 view .LVU4729
3120:src/xeq.c     **** 				decNumberRnd(&t, &t);
 18196              		.loc 1 3120 7 is_stmt 0 view .LVU4730
 18197 0150 B8F5FA6F 		cmp	r8, #2000
 18198 0154 A7DA     		bge	.L1273
3121:src/xeq.c     **** 		}
 18199              		.loc 1 3121 5 is_stmt 1 view .LVU4731
 18200 0156 01A9     		add	r1, sp, #4
 18201 0158 0846     		mov	r0, r1
 18202 015a FFF7FEFF 		bl	decNumberRnd
 18203              	.LVL1382:
 18204 015e A2E7     		b	.L1273
 18205              	.L1290:
 18206              		.align	2
 18207              	.L1289:
 18208 0160 00000000 		.word	StateWhileOn
 18209 0164 00000000 		.word	main_ram
 18210              	.LBE2835:
 18211              		.cfi_endproc
 18212              	.LFE183:
 18214              		.section	.text.do_ztst,"ax",%progbits
 18215              		.align	1
 18216              		.p2align 2,,3
 18217              		.syntax unified
 18218              		.thumb
 18219              		.thumb_func
 18220              		.fpu fpv4-sp-d16
 18222              	do_ztst:
 18223              	.LVL1383:
 18224              	.LFB186:
3165:src/xeq.c     **** 	decNumber x, y;
 18225              		.loc 1 3165 79 view -0
 18226              		.cfi_startproc
 18227              		@ args = 0, pretend = 0, frame = 72
 18228              		@ frame_needed = 0, uses_anonymous_args = 0
3166:src/xeq.c     **** 
 18229              		.loc 1 3166 2 view .LVU4733
3168:src/xeq.c     **** 	if (is_intmode()) {
 18230              		.loc 1 3168 2 view .LVU4734
 18231              	.LBB2852:
 18232              	.LBI2852:
1146:src/xeq.c     **** 	process_cmdline();
 18233              		.loc 1 1146 6 view .LVU4735
ARM GAS  /tmp/ccjeMhND.s 			page 494


 18234              	.LBB2853:
1147:src/xeq.c     **** 	set_lift();
 18235              		.loc 1 1147 2 view .LVU4736
 18236              	.LBE2853:
 18237              	.LBE2852:
3165:src/xeq.c     **** 	decNumber x, y;
 18238              		.loc 1 3165 79 is_stmt 0 view .LVU4737
 18239 0000 70B5     		push	{r4, r5, r6, lr}
 18240              		.cfi_def_cfa_offset 16
 18241              		.cfi_offset 4, -16
 18242              		.cfi_offset 5, -12
 18243              		.cfi_offset 6, -8
 18244              		.cfi_offset 14, -4
 18245 0002 92B0     		sub	sp, sp, #72
 18246              		.cfi_def_cfa_offset 88
3165:src/xeq.c     **** 	decNumber x, y;
 18247              		.loc 1 3165 79 view .LVU4738
 18248 0004 0E46     		mov	r6, r1
 18249 0006 1546     		mov	r5, r2
 18250 0008 0446     		mov	r4, r0
 18251              	.LBB2863:
 18252              	.LBB2860:
1147:src/xeq.c     **** 	set_lift();
 18253              		.loc 1 1147 2 view .LVU4739
 18254 000a FFF7FEFF 		bl	process_cmdline
 18255              	.LVL1384:
1148:src/xeq.c     **** }
 18256              		.loc 1 1148 2 is_stmt 1 view .LVU4740
 18257              	.LBB2854:
 18258              	.LBI2854:
 748:src/xeq.c     ****     State2.state_lift = 1;
 18259              		.loc 1 748 6 view .LVU4741
 18260              	.LBB2855:
 749:src/xeq.c     **** }
 18261              		.loc 1 749 5 view .LVU4742
 749:src/xeq.c     **** }
 18262              		.loc 1 749 23 is_stmt 0 view .LVU4743
 18263 000e 274A     		ldr	r2, .L1305
 18264              	.LBE2855:
 18265              	.LBE2854:
 18266              	.LBE2860:
 18267              	.LBE2863:
3169:src/xeq.c     **** 		bad_mode_error();
 18268              		.loc 1 3169 6 view .LVU4744
 18269 0010 2749     		ldr	r1, .L1305+4
 18270              	.LBB2864:
 18271              	.LBB2861:
 18272              	.LBB2858:
 18273              	.LBB2856:
 749:src/xeq.c     **** }
 18274              		.loc 1 749 23 view .LVU4745
 18275 0012 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 18276              	.LBE2856:
 18277              	.LBE2858:
 18278              	.LBE2861:
 18279              	.LBE2864:
3169:src/xeq.c     **** 		bad_mode_error();
ARM GAS  /tmp/ccjeMhND.s 			page 495


 18280              		.loc 1 3169 6 view .LVU4746
 18281 0014 0968     		ldr	r1, [r1]
 18282              	.LBB2865:
 18283              	.LBB2862:
 18284              	.LBB2859:
 18285              	.LBB2857:
 749:src/xeq.c     **** }
 18286              		.loc 1 749 23 view .LVU4747
 18287 0016 43F04003 		orr	r3, r3, #64
 18288 001a D375     		strb	r3, [r2, #23]
 18289              	.LBE2857:
 18290              	.LBE2859:
 18291              	.LBE2862:
 18292              	.LBE2865:
3169:src/xeq.c     **** 		bad_mode_error();
 18293              		.loc 1 3169 2 is_stmt 1 view .LVU4748
3169:src/xeq.c     **** 		bad_mode_error();
 18294              		.loc 1 3169 6 is_stmt 0 view .LVU4749
 18295 001c 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
3169:src/xeq.c     **** 		bad_mode_error();
 18296              		.loc 1 3169 5 view .LVU4750
 18297 0020 DB07     		lsls	r3, r3, #31
 18298 0022 06D5     		bpl	.L1292
3170:src/xeq.c     **** 		return;
 18299              		.loc 1 3170 3 is_stmt 1 view .LVU4751
 18300              	.LBB2866:
 18301              	.LBI2866:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 18302              		.loc 1 566 6 view .LVU4752
 18303              	.LBE2866:
 567:src/xeq.c     **** }
 18304              		.loc 1 567 2 view .LVU4753
 18305              	.LVL1385:
 18306              	.LBB2871:
 18307              	.LBB2867:
 18308              	.LBI2867:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 18309              		.loc 1 537 5 view .LVU4754
 18310              	.LBB2868:
 538:src/xeq.c     **** 		Error = e;
 18311              		.loc 1 538 2 view .LVU4755
 538:src/xeq.c     **** 		Error = e;
 18312              		.loc 1 538 12 is_stmt 0 view .LVU4756
 18313 0024 234B     		ldr	r3, .L1305+8
 538:src/xeq.c     **** 		Error = e;
 18314              		.loc 1 538 5 view .LVU4757
 18315 0026 1A68     		ldr	r2, [r3]
 18316 0028 0AB9     		cbnz	r2, .L1291
 18317              	.LVL1386:
 18318              	.LBB2869:
 18319              	.LBI2869:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 18320              		.loc 1 537 5 is_stmt 1 view .LVU4758
 18321              	.LBB2870:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 18322              		.loc 1 539 3 view .LVU4759
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/ccjeMhND.s 			page 496


 18323              		.loc 1 539 9 is_stmt 0 view .LVU4760
 18324 002a 0D22     		movs	r2, #13
 18325 002c 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 18326              		.loc 1 540 3 is_stmt 1 view .LVU4761
 18327              	.LVL1387:
 18328              	.L1291:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 18329              		.loc 1 540 3 is_stmt 0 view .LVU4762
 18330              	.LBE2870:
 18331              	.LBE2869:
 18332              	.LBE2868:
 18333              	.LBE2867:
 18334              	.LBE2871:
3179:src/xeq.c     **** 
 18335              		.loc 1 3179 1 view .LVU4763
 18336 002e 12B0     		add	sp, sp, #72
 18337              		.cfi_remember_state
 18338              		.cfi_def_cfa_offset 16
 18339              		@ sp needed
 18340 0030 70BD     		pop	{r4, r5, r6, pc}
 18341              	.LVL1388:
 18342              	.L1292:
 18343              		.cfi_restore_state
3173:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
 18344              		.loc 1 3173 2 is_stmt 1 view .LVU4764
 18345              	.LBB2872:
 18346              	.LBI2872:
 835:src/xeq.c     **** 	getX(x);
 18347              		.loc 1 835 6 view .LVU4765
 18348              	.LBE2872:
 836:src/xeq.c     **** 	getY(y);
 18349              		.loc 1 836 2 view .LVU4766
 18350              	.LBB2877:
 18351              	.LBB2873:
 18352              	.LBI2873:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18353              		.loc 1 805 12 view .LVU4767
 18354              	.LBB2874:
 806:src/xeq.c     **** }
 18355              		.loc 1 806 2 view .LVU4768
 806:src/xeq.c     **** }
 18356              		.loc 1 806 9 is_stmt 0 view .LVU4769
 18357 0032 6421     		movs	r1, #100
 18358 0034 6846     		mov	r0, sp
 18359 0036 FFF7FEFF 		bl	getRegister
 18360              	.LVL1389:
 806:src/xeq.c     **** }
 18361              		.loc 1 806 9 view .LVU4770
 18362              	.LBE2874:
 18363              	.LBE2873:
 18364              	.LBE2877:
 837:src/xeq.c     **** }
 18365              		.loc 1 837 2 is_stmt 1 view .LVU4771
 18366              	.LBB2878:
 18367              	.LBB2875:
 18368              	.LBI2875:
ARM GAS  /tmp/ccjeMhND.s 			page 497


 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 18369              		.loc 1 813 6 view .LVU4772
 18370              	.LBB2876:
 814:src/xeq.c     **** }
 18371              		.loc 1 814 2 view .LVU4773
 18372 003a 09A8     		add	r0, sp, #36
 18373              	.LVL1390:
 814:src/xeq.c     **** }
 18374              		.loc 1 814 2 is_stmt 0 view .LVU4774
 18375 003c 6521     		movs	r1, #101
 18376 003e FFF7FEFF 		bl	getRegister
 18377              	.LVL1391:
 814:src/xeq.c     **** }
 18378              		.loc 1 814 2 view .LVU4775
 18379              	.LBE2876:
 18380              	.LBE2875:
 18381              	.LBE2878:
3174:src/xeq.c     **** 		fin_tst(0);
 18382              		.loc 1 3174 2 is_stmt 1 view .LVU4776
3174:src/xeq.c     **** 		fin_tst(0);
 18383              		.loc 1 3174 25 is_stmt 0 view .LVU4777
 18384 0042 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 18385 0046 9DF82C20 		ldrb	r2, [sp, #44]	@ zero_extendqisi2
 18386 004a 1343     		orrs	r3, r3, r2
 18387 004c 13F0300F 		tst	r3, #48
 18388 0050 13D1     		bne	.L1294
3174:src/xeq.c     **** 		fin_tst(0);
 18389              		.loc 1 3174 47 discriminator 2 view .LVU4778
 18390 0052 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 18391 0054 13F0300F 		tst	r3, #48
 18392 0058 0FD1     		bne	.L1294
3174:src/xeq.c     **** 		fin_tst(0);
 18393              		.loc 1 3174 69 discriminator 3 view .LVU4779
 18394 005a 337A     		ldrb	r3, [r6, #8]	@ zero_extendqisi2
 18395 005c 13F0300F 		tst	r3, #48
 18396 0060 0BD1     		bne	.L1294
3178:src/xeq.c     **** }
 18397              		.loc 1 3178 2 is_stmt 1 view .LVU4780
3178:src/xeq.c     **** }
 18398              		.loc 1 3178 29 is_stmt 0 view .LVU4781
 18399 0062 2146     		mov	r1, r4
 18400 0064 6846     		mov	r0, sp
 18401 0066 FFF7FEFF 		bl	dn_eq
 18402              	.LVL1392:
3178:src/xeq.c     **** }
 18403              		.loc 1 3178 25 view .LVU4782
 18404 006a 003D     		subs	r5, r5, #0
 18405 006c 18BF     		it	ne
 18406 006e 0125     		movne	r5, #1
3178:src/xeq.c     **** }
 18407              		.loc 1 3178 43 view .LVU4783
 18408 0070 90B9     		cbnz	r0, .L1303
 18409              	.L1297:
3178:src/xeq.c     **** }
 18410              		.loc 1 3178 2 discriminator 6 view .LVU4784
 18411 0072 2846     		mov	r0, r5
 18412 0074 FFF7FEFF 		bl	fin_tst
ARM GAS  /tmp/ccjeMhND.s 			page 498


 18413              	.LVL1393:
 18414 0078 D9E7     		b	.L1291
 18415              	.L1294:
3175:src/xeq.c     **** 		return;
 18416              		.loc 1 3175 3 is_stmt 1 view .LVU4785
 18417              	.LVL1394:
 18418              	.LBB2879:
 18419              	.LBI2879:
2363:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 18420              		.loc 1 2363 6 view .LVU4786
 18421              	.LBB2880:
2364:src/xeq.c     **** 	if (Running || XromRunning) {
 18422              		.loc 1 2364 2 view .LVU4787
2365:src/xeq.c     **** 		if (! a && incpc())
 18423              		.loc 1 2365 2 view .LVU4788
2365:src/xeq.c     **** 		if (! a && incpc())
 18424              		.loc 1 2365 6 is_stmt 0 view .LVU4789
 18425 007a 0F4A     		ldr	r2, .L1305+12
2365:src/xeq.c     **** 		if (! a && incpc())
 18426              		.loc 1 2365 14 view .LVU4790
 18427 007c 0F4B     		ldr	r3, .L1305+16
 18428 007e 1268     		ldr	r2, [r2]
 18429 0080 1B68     		ldr	r3, [r3]
 18430 0082 1343     		orrs	r3, r2, r3
 18431 0084 04D1     		bne	.L1304
2370:src/xeq.c     **** #ifdef INFRARED
 18432              		.loc 1 2370 3 is_stmt 1 view .LVU4791
2370:src/xeq.c     **** #ifdef INFRARED
 18433              		.loc 1 2370 11 is_stmt 0 view .LVU4792
 18434 0086 0E4B     		ldr	r3, .L1305+20
 18435 0088 0E4A     		ldr	r2, .L1305+24
 18436 008a 1A60     		str	r2, [r3]
 18437              	.LBE2880:
 18438              	.LBE2879:
3179:src/xeq.c     **** 
 18439              		.loc 1 3179 1 view .LVU4793
 18440 008c 12B0     		add	sp, sp, #72
 18441              		.cfi_remember_state
 18442              		.cfi_def_cfa_offset 16
 18443              		@ sp needed
 18444 008e 70BD     		pop	{r4, r5, r6, pc}
 18445              	.LVL1395:
 18446              	.L1304:
 18447              		.cfi_restore_state
 18448              	.LBB2882:
 18449              	.LBB2881:
2366:src/xeq.c     **** 			decpc();
 18450              		.loc 1 2366 3 is_stmt 1 view .LVU4794
 18451 0090 FFF7FEFF 		bl	fin_tst.part.0
 18452              	.LVL1396:
 18453              	.LBE2881:
 18454              	.LBE2882:
3179:src/xeq.c     **** 
 18455              		.loc 1 3179 1 is_stmt 0 view .LVU4795
 18456 0094 12B0     		add	sp, sp, #72
 18457              		.cfi_remember_state
 18458              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccjeMhND.s 			page 499


 18459              		@ sp needed
 18460 0096 70BD     		pop	{r4, r5, r6, pc}
 18461              	.LVL1397:
 18462              	.L1303:
 18463              		.cfi_restore_state
3178:src/xeq.c     **** }
 18464              		.loc 1 3178 46 discriminator 1 view .LVU4796
 18465 0098 3146     		mov	r1, r6
 18466 009a 09A8     		add	r0, sp, #36
 18467 009c FFF7FEFF 		bl	dn_eq
 18468              	.LVL1398:
 18469 00a0 0028     		cmp	r0, #0
 18470 00a2 18BF     		it	ne
 18471 00a4 85F00105 		eorne	r5, r5, #1
 18472 00a8 E3E7     		b	.L1297
 18473              	.L1306:
 18474 00aa 00BF     		.align	2
 18475              	.L1305:
 18476 00ac 00000000 		.word	StateWhileOn
 18477 00b0 00000000 		.word	main_ram
 18478 00b4 00000000 		.word	Error
 18479 00b8 00000000 		.word	Running
 18480 00bc 00000000 		.word	XromRunning
 18481 00c0 00000000 		.word	DispMsg
 18482 00c4 00000000 		.word	.LC3
 18483              		.cfi_endproc
 18484              	.LFE186:
 18486              		.section	.text.check_zero,"ax",%progbits
 18487              		.align	1
 18488              		.p2align 2,,3
 18489              		.global	check_zero
 18490              		.syntax unified
 18491              		.thumb
 18492              		.thumb_func
 18493              		.fpu fpv4-sp-d16
 18495              	check_zero:
 18496              	.LVL1399:
 18497              	.LFB184:
3142:src/xeq.c     **** 	int neg;
 18498              		.loc 1 3142 32 is_stmt 1 view -0
 18499              		.cfi_startproc
 18500              		@ args = 0, pretend = 0, frame = 40
 18501              		@ frame_needed = 0, uses_anonymous_args = 0
3143:src/xeq.c     **** 	int zero;
 18502              		.loc 1 3143 2 view .LVU4798
3144:src/xeq.c     **** 
 18503              		.loc 1 3144 2 view .LVU4799
3146:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18504              		.loc 1 3146 2 view .LVU4800
3146:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18505              		.loc 1 3146 6 is_stmt 0 view .LVU4801
 18506 0000 1A4B     		ldr	r3, .L1322
3142:src/xeq.c     **** 	int neg;
 18507              		.loc 1 3142 32 view .LVU4802
 18508 0002 10B5     		push	{r4, lr}
 18509              		.cfi_def_cfa_offset 8
 18510              		.cfi_offset 4, -8
ARM GAS  /tmp/ccjeMhND.s 			page 500


 18511              		.cfi_offset 14, -4
3146:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18512              		.loc 1 3146 6 view .LVU4803
 18513 0004 1B68     		ldr	r3, [r3]
 18514 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3146:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18515              		.loc 1 3146 5 view .LVU4804
 18516 000a DB07     		lsls	r3, r3, #31
3142:src/xeq.c     **** 	int neg;
 18517              		.loc 1 3142 32 view .LVU4805
 18518 000c 8AB0     		sub	sp, sp, #40
 18519              		.cfi_def_cfa_offset 48
3142:src/xeq.c     **** 	int neg;
 18520              		.loc 1 3142 32 view .LVU4806
 18521 000e 0446     		mov	r4, r0
3146:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18522              		.loc 1 3146 5 view .LVU4807
 18523 0010 15D5     		bpl	.L1308
 18524              	.LBB2883:
3147:src/xeq.c     **** 		zero = (xv == 0);
 18525              		.loc 1 3147 3 is_stmt 1 view .LVU4808
 18526              	.LBB2884:
 18527              	.LBI2884:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 18528              		.loc 1 1256 15 view .LVU4809
 18529              	.LBB2885:
1257:src/xeq.c     **** }
 18530              		.loc 1 1257 2 view .LVU4810
1257:src/xeq.c     **** }
 18531              		.loc 1 1257 9 is_stmt 0 view .LVU4811
 18532 0012 6420     		movs	r0, #100
 18533              	.LVL1400:
1257:src/xeq.c     **** }
 18534              		.loc 1 1257 9 view .LVU4812
 18535 0014 FFF7FEFF 		bl	get_reg_n_int
 18536              	.LVL1401:
 18537              	.LBE2885:
 18538              	.LBE2884:
3147:src/xeq.c     **** 		zero = (xv == 0);
 18539              		.loc 1 3147 37 view .LVU4813
 18540 0018 6A46     		mov	r2, sp
 18541 001a FFF7FEFF 		bl	extract_value
 18542              	.LVL1402:
3148:src/xeq.c     **** 	} else {
 18543              		.loc 1 3148 3 is_stmt 1 view .LVU4814
3148:src/xeq.c     **** 	} else {
 18544              		.loc 1 3148 14 is_stmt 0 view .LVU4815
 18545 001e 50EA0103 		orrs	r3, r0, r1
 18546 0022 0CBF     		ite	eq
 18547 0024 0120     		moveq	r0, #1
 18548              	.LVL1403:
3148:src/xeq.c     **** 	} else {
 18549              		.loc 1 3148 14 view .LVU4816
 18550 0026 0020     		movne	r0, #0
 18551              	.LVL1404:
3148:src/xeq.c     **** 	} else {
 18552              		.loc 1 3148 14 view .LVU4817
ARM GAS  /tmp/ccjeMhND.s 			page 501


 18553              	.LBE2883:
3155:src/xeq.c     **** 		fin_tst(zero && !neg);
 18554              		.loc 1 3155 2 is_stmt 1 view .LVU4818
3155:src/xeq.c     **** 		fin_tst(zero && !neg);
 18555              		.loc 1 3155 5 is_stmt 0 view .LVU4819
 18556 0028 A12C     		cmp	r4, #161
 18557 002a 15D0     		beq	.L1321
 18558              	.L1310:
3158:src/xeq.c     **** }
 18559              		.loc 1 3158 3 is_stmt 1 view .LVU4820
 18560 002c 18B1     		cbz	r0, .L1313
3158:src/xeq.c     **** }
 18561              		.loc 1 3158 3 is_stmt 0 discriminator 1 view .LVU4821
 18562 002e 0098     		ldr	r0, [sp]
 18563              	.LVL1405:
3158:src/xeq.c     **** }
 18564              		.loc 1 3158 3 discriminator 1 view .LVU4822
 18565 0030 0038     		subs	r0, r0, #0
 18566 0032 18BF     		it	ne
 18567 0034 0120     		movne	r0, #1
 18568              	.L1313:
3158:src/xeq.c     **** }
 18569              		.loc 1 3158 3 discriminator 6 view .LVU4823
 18570 0036 FFF7FEFF 		bl	fin_tst
 18571              	.LVL1406:
3159:src/xeq.c     **** 
 18572              		.loc 1 3159 1 discriminator 6 view .LVU4824
 18573 003a 0AB0     		add	sp, sp, #40
 18574              		.cfi_remember_state
 18575              		.cfi_def_cfa_offset 8
 18576              		@ sp needed
 18577 003c 10BD     		pop	{r4, pc}
 18578              	.LVL1407:
 18579              	.L1308:
 18580              		.cfi_restore_state
 18581              	.LBB2886:
3150:src/xeq.c     **** 		getX(&x);
 18582              		.loc 1 3150 3 is_stmt 1 view .LVU4825
3151:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
 18583              		.loc 1 3151 3 view .LVU4826
 18584              	.LBB2887:
 18585              	.LBI2887:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18586              		.loc 1 805 12 view .LVU4827
 18587              	.LBB2888:
 806:src/xeq.c     **** }
 18588              		.loc 1 806 2 view .LVU4828
 806:src/xeq.c     **** }
 18589              		.loc 1 806 9 is_stmt 0 view .LVU4829
 18590 003e 6421     		movs	r1, #100
 18591 0040 01A8     		add	r0, sp, #4
 18592              	.LVL1408:
 806:src/xeq.c     **** }
 18593              		.loc 1 806 9 view .LVU4830
 18594 0042 FFF7FEFF 		bl	getRegister
 18595              	.LVL1409:
 806:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 502


 18596              		.loc 1 806 9 view .LVU4831
 18597              	.LBE2888:
 18598              	.LBE2887:
3152:src/xeq.c     **** 		zero = dn_eq0(&x);
 18599              		.loc 1 3152 3 is_stmt 1 view .LVU4832
3152:src/xeq.c     **** 		zero = dn_eq0(&x);
 18600              		.loc 1 3152 9 is_stmt 0 view .LVU4833
 18601 0046 9DF90C30 		ldrsb	r3, [sp, #12]
3153:src/xeq.c     **** 	}
 18602              		.loc 1 3153 10 view .LVU4834
 18603 004a 01A8     		add	r0, sp, #4
3152:src/xeq.c     **** 		zero = dn_eq0(&x);
 18604              		.loc 1 3152 9 view .LVU4835
 18605 004c DB0F     		lsrs	r3, r3, #31
3152:src/xeq.c     **** 		zero = dn_eq0(&x);
 18606              		.loc 1 3152 7 view .LVU4836
 18607 004e 0093     		str	r3, [sp]
3153:src/xeq.c     **** 	}
 18608              		.loc 1 3153 3 is_stmt 1 view .LVU4837
3153:src/xeq.c     **** 	}
 18609              		.loc 1 3153 10 is_stmt 0 view .LVU4838
 18610 0050 FFF7FEFF 		bl	dn_eq0
 18611              	.LVL1410:
3153:src/xeq.c     **** 	}
 18612              		.loc 1 3153 10 view .LVU4839
 18613              	.LBE2886:
3155:src/xeq.c     **** 		fin_tst(zero && !neg);
 18614              		.loc 1 3155 2 is_stmt 1 view .LVU4840
3155:src/xeq.c     **** 		fin_tst(zero && !neg);
 18615              		.loc 1 3155 5 is_stmt 0 view .LVU4841
 18616 0054 A12C     		cmp	r4, #161
 18617 0056 E9D1     		bne	.L1310
 18618              	.L1321:
3156:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 18619              		.loc 1 3156 3 is_stmt 1 view .LVU4842
 18620 0058 0028     		cmp	r0, #0
 18621 005a ECD0     		beq	.L1313
3156:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 18622              		.loc 1 3156 3 is_stmt 0 discriminator 1 view .LVU4843
 18623 005c 0098     		ldr	r0, [sp]
 18624              	.LVL1411:
3156:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 18625              		.loc 1 3156 3 discriminator 1 view .LVU4844
 18626 005e B0FA80F0 		clz	r0, r0
 18627 0062 4009     		lsrs	r0, r0, #5
3158:src/xeq.c     **** }
 18628              		.loc 1 3158 3 discriminator 1 view .LVU4845
 18629 0064 FFF7FEFF 		bl	fin_tst
 18630              	.LVL1412:
3159:src/xeq.c     **** 
 18631              		.loc 1 3159 1 discriminator 1 view .LVU4846
 18632 0068 0AB0     		add	sp, sp, #40
 18633              		.cfi_def_cfa_offset 8
 18634              		@ sp needed
 18635 006a 10BD     		pop	{r4, pc}
 18636              	.L1323:
 18637              		.align	2
ARM GAS  /tmp/ccjeMhND.s 			page 503


 18638              	.L1322:
 18639 006c 00000000 		.word	main_ram
 18640              		.cfi_endproc
 18641              	.LFE184:
 18643              		.section	.text.cmdtest,"ax",%progbits
 18644              		.align	1
 18645              		.p2align 2,,3
 18646              		.global	cmdtest
 18647              		.syntax unified
 18648              		.thumb
 18649              		.thumb_func
 18650              		.fpu fpv4-sp-d16
 18652              	cmdtest:
 18653              	.LVL1413:
 18654              	.LFB185:
3161:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
 18655              		.loc 1 3161 46 is_stmt 1 view -0
 18656              		.cfi_startproc
 18657              		@ args = 0, pretend = 0, frame = 0
 18658              		@ frame_needed = 0, uses_anonymous_args = 0
 18659              		@ link register save eliminated.
3162:src/xeq.c     **** }
 18660              		.loc 1 3162 2 view .LVU4848
3162:src/xeq.c     **** }
 18661              		.loc 1 3162 31 is_stmt 0 view .LVU4849
 18662 0000 2D39     		subs	r1, r1, #45
 18663              	.LVL1414:
3162:src/xeq.c     **** }
 18664              		.loc 1 3162 2 view .LVU4850
 18665 0002 C9B2     		uxtb	r1, r1
 18666 0004 FFF7FEBF 		b	do_tst
 18667              	.LVL1415:
3162:src/xeq.c     **** }
 18668              		.loc 1 3162 2 view .LVU4851
 18669              		.cfi_endproc
 18670              	.LFE185:
 18672              		.section	.text.cmdztest,"ax",%progbits
 18673              		.align	1
 18674              		.p2align 2,,3
 18675              		.global	cmdztest
 18676              		.syntax unified
 18677              		.thumb
 18678              		.thumb_func
 18679              		.fpu fpv4-sp-d16
 18681              	cmdztest:
 18682              	.LVL1416:
 18683              	.LFB187:
3181:src/xeq.c     **** 	decNumber re, im;
 18684              		.loc 1 3181 47 is_stmt 1 view -0
 18685              		.cfi_startproc
 18686              		@ args = 0, pretend = 0, frame = 72
 18687              		@ frame_needed = 0, uses_anonymous_args = 0
3182:src/xeq.c     **** 	getRegister(&re, arg);
 18688              		.loc 1 3182 2 view .LVU4853
3183:src/xeq.c     **** 	getRegister(&im, arg + 1);
 18689              		.loc 1 3183 2 view .LVU4854
3181:src/xeq.c     **** 	decNumber re, im;
ARM GAS  /tmp/ccjeMhND.s 			page 504


 18690              		.loc 1 3181 47 is_stmt 0 view .LVU4855
 18691 0000 30B5     		push	{r4, r5, lr}
 18692              		.cfi_def_cfa_offset 12
 18693              		.cfi_offset 4, -12
 18694              		.cfi_offset 5, -8
 18695              		.cfi_offset 14, -4
 18696 0002 0546     		mov	r5, r0
 18697 0004 93B0     		sub	sp, sp, #76
 18698              		.cfi_def_cfa_offset 88
3181:src/xeq.c     **** 	decNumber re, im;
 18699              		.loc 1 3181 47 view .LVU4856
 18700 0006 0C46     		mov	r4, r1
3183:src/xeq.c     **** 	getRegister(&im, arg + 1);
 18701              		.loc 1 3183 2 view .LVU4857
 18702 0008 6846     		mov	r0, sp
 18703              	.LVL1417:
3183:src/xeq.c     **** 	getRegister(&im, arg + 1);
 18704              		.loc 1 3183 2 view .LVU4858
 18705 000a 2946     		mov	r1, r5
 18706              	.LVL1418:
3183:src/xeq.c     **** 	getRegister(&im, arg + 1);
 18707              		.loc 1 3183 2 view .LVU4859
 18708 000c FFF7FEFF 		bl	getRegister
 18709              	.LVL1419:
3184:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
 18710              		.loc 1 3184 2 is_stmt 1 view .LVU4860
 18711 0010 691C     		adds	r1, r5, #1
 18712 0012 09A8     		add	r0, sp, #36
 18713 0014 FFF7FEFF 		bl	getRegister
 18714              	.LVL1420:
3185:src/xeq.c     **** }
 18715              		.loc 1 3185 2 view .LVU4861
3185:src/xeq.c     **** }
 18716              		.loc 1 3185 37 is_stmt 0 view .LVU4862
 18717 0018 A4F13402 		sub	r2, r4, #52
3185:src/xeq.c     **** }
 18718              		.loc 1 3185 2 view .LVU4863
 18719 001c D2B2     		uxtb	r2, r2
 18720 001e 09A9     		add	r1, sp, #36
 18721 0020 6846     		mov	r0, sp
 18722 0022 FFF7FEFF 		bl	do_ztst
 18723              	.LVL1421:
3186:src/xeq.c     **** 
 18724              		.loc 1 3186 1 view .LVU4864
 18725 0026 13B0     		add	sp, sp, #76
 18726              		.cfi_def_cfa_offset 12
 18727              		@ sp needed
 18728 0028 30BD     		pop	{r4, r5, pc}
3186:src/xeq.c     **** 
 18729              		.loc 1 3186 1 view .LVU4865
 18730              		.cfi_endproc
 18731              	.LFE187:
 18733 002a 00BF     		.section	.text.cmdlincdec,"ax",%progbits
 18734              		.align	1
 18735              		.p2align 2,,3
 18736              		.global	cmdlincdec
 18737              		.syntax unified
ARM GAS  /tmp/ccjeMhND.s 			page 505


 18738              		.thumb
 18739              		.thumb_func
 18740              		.fpu fpv4-sp-d16
 18742              	cmdlincdec:
 18743              	.LVL1422:
 18744              	.LFB189:
3216:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
 18745              		.loc 1 3216 49 is_stmt 1 view -0
 18746              		.cfi_startproc
 18747              		@ args = 0, pretend = 0, frame = 0
 18748              		@ frame_needed = 0, uses_anonymous_args = 0
 18749              		@ link register save eliminated.
3217:src/xeq.c     **** }
 18750              		.loc 1 3217 2 view .LVU4867
 18751 0000 A1F14101 		sub	r1, #65
 18752              	.LVL1423:
3217:src/xeq.c     **** }
 18753              		.loc 1 3217 2 is_stmt 0 view .LVU4868
 18754 0004 B1FA81F1 		clz	r1, r1
 18755 0008 4909     		lsrs	r1, r1, #5
 18756 000a FFF7FEBF 		b	incdec
 18757              	.LVL1424:
3217:src/xeq.c     **** }
 18758              		.loc 1 3217 2 view .LVU4869
 18759              		.cfi_endproc
 18760              	.LFE189:
 18762 000e 00BF     		.section	.text.cmdloopz,"ax",%progbits
 18763              		.align	1
 18764              		.p2align 2,,3
 18765              		.global	cmdloopz
 18766              		.syntax unified
 18767              		.thumb
 18768              		.thumb_func
 18769              		.fpu fpv4-sp-d16
 18771              	cmdloopz:
 18772              	.LVL1425:
 18773              	.LFB190:
3220:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 18774              		.loc 1 3220 47 is_stmt 1 view -0
 18775              		.cfi_startproc
 18776              		@ args = 0, pretend = 0, frame = 0
 18777              		@ frame_needed = 0, uses_anonymous_args = 0
3221:src/xeq.c     **** }
 18778              		.loc 1 3221 2 view .LVU4871
3220:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 18779              		.loc 1 3220 47 is_stmt 0 view .LVU4872
 18780 0000 08B5     		push	{r3, lr}
 18781              		.cfi_def_cfa_offset 8
 18782              		.cfi_offset 3, -8
 18783              		.cfi_offset 14, -4
3221:src/xeq.c     **** }
 18784              		.loc 1 3221 2 view .LVU4873
 18785 0002 A1F13F01 		sub	r1, #63
 18786              	.LVL1426:
3221:src/xeq.c     **** }
 18787              		.loc 1 3221 2 view .LVU4874
 18788 0006 B1FA81F1 		clz	r1, r1
ARM GAS  /tmp/ccjeMhND.s 			page 506


 18789 000a 4909     		lsrs	r1, r1, #5
 18790 000c FFF7FEFF 		bl	incdec
 18791              	.LVL1427:
3222:src/xeq.c     **** 
 18792              		.loc 1 3222 1 view .LVU4875
 18793 0010 BDE80840 		pop	{r3, lr}
 18794              		.cfi_restore 14
 18795              		.cfi_restore 3
 18796              		.cfi_def_cfa_offset 0
3221:src/xeq.c     **** }
 18797              		.loc 1 3221 2 view .LVU4876
 18798 0014 FFF7FEBF 		b	fin_tst
 18799              	.LVL1428:
 18800              		.cfi_endproc
 18801              	.LFE190:
 18803              		.section	.text.cmdloop,"ax",%progbits
 18804              		.align	1
 18805              		.p2align 2,,3
 18806              		.global	cmdloop
 18807              		.syntax unified
 18808              		.thumb
 18809              		.thumb_func
 18810              		.fpu fpv4-sp-d16
 18812              	cmdloop:
 18813              	.LVL1429:
 18814              	.LFB191:
3224:src/xeq.c     **** 	if (is_intmode()) {
 18815              		.loc 1 3224 46 is_stmt 1 view -0
 18816              		.cfi_startproc
 18817              		@ args = 0, pretend = 0, frame = 184
 18818              		@ frame_needed = 0, uses_anonymous_args = 0
3225:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18819              		.loc 1 3225 2 view .LVU4878
3225:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18820              		.loc 1 3225 6 is_stmt 0 view .LVU4879
 18821 0000 7C4B     		ldr	r3, .L1370
3224:src/xeq.c     **** 	if (is_intmode()) {
 18822              		.loc 1 3224 46 view .LVU4880
 18823 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 18824              		.cfi_def_cfa_offset 20
 18825              		.cfi_offset 4, -20
 18826              		.cfi_offset 5, -16
 18827              		.cfi_offset 6, -12
 18828              		.cfi_offset 7, -8
 18829              		.cfi_offset 14, -4
3225:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18830              		.loc 1 3225 6 view .LVU4881
 18831 0004 1B68     		ldr	r3, [r3]
 18832 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3225:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18833              		.loc 1 3225 5 view .LVU4882
 18834 000a DB07     		lsls	r3, r3, #31
3224:src/xeq.c     **** 	if (is_intmode()) {
 18835              		.loc 1 3224 46 view .LVU4883
 18836 000c AFB0     		sub	sp, sp, #188
 18837              		.cfi_def_cfa_offset 208
3224:src/xeq.c     **** 	if (is_intmode()) {
ARM GAS  /tmp/ccjeMhND.s 			page 507


 18838              		.loc 1 3224 46 view .LVU4884
 18839 000e 0C46     		mov	r4, r1
 18840 0010 0546     		mov	r5, r0
3225:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18841              		.loc 1 3225 5 view .LVU4885
 18842 0012 7BD4     		bmi	.L1362
 18843              	.LBB2889:
3247:src/xeq.c     **** 
 18844              		.loc 1 3247 3 is_stmt 1 view .LVU4886
3249:src/xeq.c     **** 
 18845              		.loc 1 3249 3 view .LVU4887
 18846 0014 2946     		mov	r1, r5
 18847              	.LVL1430:
3249:src/xeq.c     **** 
 18848              		.loc 1 3249 3 is_stmt 0 view .LVU4888
 18849 0016 6846     		mov	r0, sp
 18850              	.LVL1431:
3249:src/xeq.c     **** 
 18851              		.loc 1 3249 3 view .LVU4889
 18852 0018 FFF7FEFF 		bl	getRegister
 18853              	.LVL1432:
3253:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
 18854              		.loc 1 3253 3 is_stmt 1 view .LVU4890
 18855 001c 6946     		mov	r1, sp
 18856 001e 12A8     		add	r0, sp, #72
 18857 0020 FFF7FEFF 		bl	dn_abs
 18858              	.LVL1433:
3254:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
 18859              		.loc 1 3254 3 view .LVU4891
 18860 0024 12A9     		add	r1, sp, #72
 18861 0026 1BA8     		add	r0, sp, #108
 18862 0028 FFF7FEFF 		bl	decNumberTrunc
 18863              	.LVL1434:
3255:src/xeq.c     **** 		if (decNumberIsNegative(&x))
 18864              		.loc 1 3255 3 view .LVU4892
 18865 002c 1BAA     		add	r2, sp, #108
 18866 002e 12A9     		add	r1, sp, #72
 18867 0030 24A8     		add	r0, sp, #144
 18868 0032 FFF7FEFF 		bl	dn_subtract
 18869              	.LVL1435:
3256:src/xeq.c     **** 			dn_minus(&n, &n);
 18870              		.loc 1 3256 3 view .LVU4893
3256:src/xeq.c     **** 			dn_minus(&n, &n);
 18871              		.loc 1 3256 6 is_stmt 0 view .LVU4894
 18872 0036 9DF90830 		ldrsb	r3, [sp, #8]
 18873 003a 002B     		cmp	r3, #0
 18874 003c C0F29080 		blt	.L1363
 18875              	.L1340:
3258:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
 18876              		.loc 1 3258 3 is_stmt 1 view .LVU4895
 18877 0040 0322     		movs	r2, #3
 18878 0042 24A9     		add	r1, sp, #144
 18879 0044 09A8     		add	r0, sp, #36
 18880 0046 FFF7FEFF 		bl	dn_mulpow10
 18881              	.LVL1436:
3259:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
 18882              		.loc 1 3259 3 view .LVU4896
ARM GAS  /tmp/ccjeMhND.s 			page 508


 18883 004a 09A9     		add	r1, sp, #36
 18884 004c 12A8     		add	r0, sp, #72
 18885 004e FFF7FEFF 		bl	decNumberTrunc
 18886              	.LVL1437:
3260:src/xeq.c     **** 		dn_mul100(&x, &i);
 18887              		.loc 1 3260 3 view .LVU4897
 18888 0052 09A9     		add	r1, sp, #36
 18889 0054 12AA     		add	r2, sp, #72
 18890 0056 0846     		mov	r0, r1
 18891 0058 FFF7FEFF 		bl	dn_subtract
 18892              	.LVL1438:
3261:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
 18893              		.loc 1 3261 3 view .LVU4898
 18894 005c 09A9     		add	r1, sp, #36
 18895 005e 6846     		mov	r0, sp
 18896 0060 FFF7FEFF 		bl	dn_mul100
 18897              	.LVL1439:
3262:src/xeq.c     **** 		if (dn_eq0(&i))
 18898              		.loc 1 3262 3 view .LVU4899
 18899 0064 6946     		mov	r1, sp
 18900 0066 09A8     		add	r0, sp, #36
 18901 0068 FFF7FEFF 		bl	decNumberTrunc
 18902              	.LVL1440:
3263:src/xeq.c     **** 			dn_1(&i);
 18903              		.loc 1 3263 3 view .LVU4900
3263:src/xeq.c     **** 			dn_1(&i);
 18904              		.loc 1 3263 7 is_stmt 0 view .LVU4901
 18905 006c 09A8     		add	r0, sp, #36
 18906 006e FFF7FEFF 		bl	dn_eq0
 18907              	.LVL1441:
3263:src/xeq.c     **** 			dn_1(&i);
 18908              		.loc 1 3263 6 view .LVU4902
 18909 0072 98BB     		cbnz	r0, .L1364
3266:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18910              		.loc 1 3266 3 is_stmt 1 view .LVU4903
3267:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18911              		.loc 1 3267 4 is_stmt 0 view .LVU4904
 18912 0074 1BA9     		add	r1, sp, #108
3266:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18913              		.loc 1 3266 6 view .LVU4905
 18914 0076 3B2C     		cmp	r4, #59
3267:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18915              		.loc 1 3267 4 view .LVU4906
 18916 0078 09AA     		add	r2, sp, #36
 18917 007a 0846     		mov	r0, r1
3266:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18918              		.loc 1 3266 6 view .LVU4907
 18919 007c 36D0     		beq	.L1342
 18920              	.L1367:
3266:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18921              		.loc 1 3266 22 discriminator 1 view .LVU4908
 18922 007e 3D2C     		cmp	r4, #61
 18923 0080 1DD1     		bne	.L1343
3267:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18924              		.loc 1 3267 4 is_stmt 1 view .LVU4909
 18925 0082 FFF7FEFF 		bl	dn_add
 18926              	.LVL1442:
ARM GAS  /tmp/ccjeMhND.s 			page 509


3268:src/xeq.c     **** 			if (op == RARG_ISE)
 18927              		.loc 1 3268 4 view .LVU4910
 18928 0086 1BAA     		add	r2, sp, #108
 18929 0088 12A9     		add	r1, sp, #72
 18930 008a 6846     		mov	r0, sp
 18931 008c FFF7FEFF 		bl	dn_compare
 18932              	.LVL1443:
3269:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 18933              		.loc 1 3269 4 view .LVU4911
3270:src/xeq.c     **** 			else
 18934              		.loc 1 3270 5 view .LVU4912
3270:src/xeq.c     **** 			else
 18935              		.loc 1 3270 13 is_stmt 0 view .LVU4913
 18936 0090 6846     		mov	r0, sp
 18937 0092 FFF7FEFF 		bl	dn_le0
 18938              	.LVL1444:
3270:src/xeq.c     **** 			else
 18939              		.loc 1 3270 5 view .LVU4914
 18940 0096 B0FA80F0 		clz	r0, r0
 18941 009a 4009     		lsrs	r0, r0, #5
 18942 009c FFF7FEFF 		bl	fin_tst
 18943              	.LVL1445:
 18944              	.L1344:
3283:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 18945              		.loc 1 3283 3 is_stmt 1 view .LVU4915
3283:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 18946              		.loc 1 3283 6 is_stmt 0 view .LVU4916
 18947 00a0 9DF97430 		ldrsb	r3, [sp, #116]
 18948 00a4 002B     		cmp	r3, #0
3284:src/xeq.c     **** 		} else
 18949              		.loc 1 3284 4 view .LVU4917
 18950 00a6 24AA     		add	r2, sp, #144
 18951 00a8 1BA9     		add	r1, sp, #108
 18952 00aa 6846     		mov	r0, sp
3283:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 18953              		.loc 1 3283 6 view .LVU4918
 18954 00ac 55DB     		blt	.L1365
3286:src/xeq.c     **** 		setRegister(arg, &x);
 18955              		.loc 1 3286 4 is_stmt 1 view .LVU4919
 18956 00ae FFF7FEFF 		bl	dn_add
 18957              	.LVL1446:
 18958              	.L1347:
3287:src/xeq.c     **** 	}
 18959              		.loc 1 3287 3 discriminator 2 view .LVU4920
 18960 00b2 6946     		mov	r1, sp
 18961 00b4 2846     		mov	r0, r5
 18962 00b6 FFF7FEFF 		bl	setRegister
 18963              	.LVL1447:
 18964              	.L1330:
3287:src/xeq.c     **** 	}
 18965              		.loc 1 3287 3 is_stmt 0 discriminator 2 view .LVU4921
 18966              	.LBE2889:
3289:src/xeq.c     **** 
 18967              		.loc 1 3289 1 view .LVU4922
 18968 00ba 2FB0     		add	sp, sp, #188
 18969              		.cfi_remember_state
 18970              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccjeMhND.s 			page 510


 18971              		@ sp needed
 18972 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 18973              	.LVL1448:
 18974              	.L1343:
 18975              		.cfi_restore_state
 18976              	.LBB2890:
3274:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18977              		.loc 1 3274 4 is_stmt 1 view .LVU4923
 18978 00be FFF7FEFF 		bl	dn_subtract
 18979              	.LVL1449:
3275:src/xeq.c     **** 			if (op == RARG_DSL)
 18980              		.loc 1 3275 4 view .LVU4924
 18981 00c2 1BAA     		add	r2, sp, #108
 18982 00c4 12A9     		add	r1, sp, #72
 18983 00c6 6846     		mov	r0, sp
 18984 00c8 FFF7FEFF 		bl	dn_compare
 18985              	.LVL1450:
3276:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 18986              		.loc 1 3276 4 view .LVU4925
3276:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 18987              		.loc 1 3276 7 is_stmt 0 view .LVU4926
 18988 00cc 3C2C     		cmp	r4, #60
3277:src/xeq.c     **** 			else
 18989              		.loc 1 3277 5 view .LVU4927
 18990 00ce 6846     		mov	r0, sp
3276:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 18991              		.loc 1 3276 7 view .LVU4928
 18992 00d0 6AD0     		beq	.L1366
3279:src/xeq.c     **** 		}
 18993              		.loc 1 3279 5 is_stmt 1 view .LVU4929
 18994 00d2 FFF7FEFF 		bl	dn_lt0
 18995              	.LVL1451:
 18996 00d6 FFF7FEFF 		bl	fin_tst
 18997              	.LVL1452:
 18998 00da E1E7     		b	.L1344
 18999              	.L1364:
3264:src/xeq.c     **** 
 19000              		.loc 1 3264 4 view .LVU4930
 19001 00dc 09A8     		add	r0, sp, #36
 19002 00de FFF7FEFF 		bl	dn_1
 19003              	.LVL1453:
3266:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19004              		.loc 1 3266 3 view .LVU4931
3267:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19005              		.loc 1 3267 4 is_stmt 0 view .LVU4932
 19006 00e2 1BA9     		add	r1, sp, #108
3266:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19007              		.loc 1 3266 6 view .LVU4933
 19008 00e4 3B2C     		cmp	r4, #59
3267:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19009              		.loc 1 3267 4 view .LVU4934
 19010 00e6 09AA     		add	r2, sp, #36
 19011 00e8 0846     		mov	r0, r1
3266:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19012              		.loc 1 3266 6 view .LVU4935
 19013 00ea C8D1     		bne	.L1367
 19014              	.L1342:
ARM GAS  /tmp/ccjeMhND.s 			page 511


3267:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19015              		.loc 1 3267 4 is_stmt 1 view .LVU4936
 19016 00ec FFF7FEFF 		bl	dn_add
 19017              	.LVL1454:
3268:src/xeq.c     **** 			if (op == RARG_ISE)
 19018              		.loc 1 3268 4 view .LVU4937
 19019 00f0 1BAA     		add	r2, sp, #108
 19020 00f2 12A9     		add	r1, sp, #72
 19021 00f4 6846     		mov	r0, sp
 19022 00f6 FFF7FEFF 		bl	dn_compare
 19023              	.LVL1455:
3269:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 19024              		.loc 1 3269 4 view .LVU4938
3272:src/xeq.c     **** 		} else {
 19025              		.loc 1 3272 5 view .LVU4939
3272:src/xeq.c     **** 		} else {
 19026              		.loc 1 3272 13 is_stmt 0 view .LVU4940
 19027 00fa 6846     		mov	r0, sp
 19028 00fc FFF7FEFF 		bl	dn_lt0
 19029              	.LVL1456:
3272:src/xeq.c     **** 		} else {
 19030              		.loc 1 3272 5 view .LVU4941
 19031 0100 B0FA80F0 		clz	r0, r0
 19032 0104 4009     		lsrs	r0, r0, #5
 19033 0106 FFF7FEFF 		bl	fin_tst
 19034              	.LVL1457:
 19035 010a C9E7     		b	.L1344
 19036              	.LVL1458:
 19037              	.L1362:
3272:src/xeq.c     **** 		} else {
 19038              		.loc 1 3272 5 view .LVU4942
 19039              	.LBE2890:
 19040              	.LBB2891:
3226:src/xeq.c     **** 		int xs;
 19041              		.loc 1 3226 3 is_stmt 1 view .LVU4943
3226:src/xeq.c     **** 		int xs;
 19042              		.loc 1 3226 21 is_stmt 0 view .LVU4944
 19043 010c FFF7FEFF 		bl	get_reg_n_int
 19044              	.LVL1459:
3227:src/xeq.c     **** 		unsigned long long int xv;
 19045              		.loc 1 3227 3 is_stmt 1 view .LVU4945
3228:src/xeq.c     **** 
 19046              		.loc 1 3228 3 view .LVU4946
3230:src/xeq.c     **** 			x = intAdd(x, 1LL);
 19047              		.loc 1 3230 3 view .LVU4947
3230:src/xeq.c     **** 			x = intAdd(x, 1LL);
 19048              		.loc 1 3230 6 is_stmt 0 view .LVU4948
 19049 0110 3B2C     		cmp	r4, #59
3231:src/xeq.c     **** 		else
 19050              		.loc 1 3231 8 view .LVU4949
 19051 0112 4FF00102 		mov	r2, #1
 19052 0116 4FF00003 		mov	r3, #0
3230:src/xeq.c     **** 			x = intAdd(x, 1LL);
 19053              		.loc 1 3230 6 view .LVU4950
 19054 011a 4AD0     		beq	.L1332
3230:src/xeq.c     **** 			x = intAdd(x, 1LL);
 19055              		.loc 1 3230 22 discriminator 1 view .LVU4951
ARM GAS  /tmp/ccjeMhND.s 			page 512


 19056 011c 3D2C     		cmp	r4, #61
 19057 011e 24D1     		bne	.L1368
3231:src/xeq.c     **** 		else
 19058              		.loc 1 3231 4 is_stmt 1 view .LVU4952
3231:src/xeq.c     **** 		else
 19059              		.loc 1 3231 8 is_stmt 0 view .LVU4953
 19060 0120 FFF7FEFF 		bl	intAdd
 19061              	.LVL1460:
3231:src/xeq.c     **** 		else
 19062              		.loc 1 3231 8 view .LVU4954
 19063 0124 0646     		mov	r6, r0
 19064              	.LBB2892:
 19065              	.LBB2893:
1237:src/xeq.c     **** }
 19066              		.loc 1 1237 8 view .LVU4955
 19067 0126 2846     		mov	r0, r5
 19068              	.LBE2893:
 19069              	.LBE2892:
3231:src/xeq.c     **** 		else
 19070              		.loc 1 3231 8 view .LVU4956
 19071 0128 0C46     		mov	r4, r1
 19072              	.LVL1461:
3234:src/xeq.c     **** 
 19073              		.loc 1 3234 3 is_stmt 1 view .LVU4957
3234:src/xeq.c     **** 
 19074              		.loc 1 3234 3 is_stmt 0 view .LVU4958
 19075 012a CDE92461 		strd	r6, r1, [sp, #144]
 19076              	.LVL1462:
 19077              	.LBB2899:
 19078              	.LBI2892:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 19079              		.loc 1 1236 6 is_stmt 1 view .LVU4959
 19080              	.LBB2894:
1237:src/xeq.c     **** }
 19081              		.loc 1 1237 2 view .LVU4960
1237:src/xeq.c     **** }
 19082              		.loc 1 1237 8 is_stmt 0 view .LVU4961
 19083 012e FFF7FEFF 		bl	get_reg_n
 19084              	.LVL1463:
1237:src/xeq.c     **** }
 19085              		.loc 1 1237 2 view .LVU4962
 19086 0132 24A9     		add	r1, sp, #144
 19087 0134 0822     		movs	r2, #8
 19088 0136 FFF7FEFF 		bl	xcopy
 19089              	.LVL1464:
1237:src/xeq.c     **** }
 19090              		.loc 1 1237 2 view .LVU4963
 19091              	.LBE2894:
 19092              	.LBE2899:
3236:src/xeq.c     **** 		if (op == RARG_ISG)
 19093              		.loc 1 3236 3 is_stmt 1 view .LVU4964
3236:src/xeq.c     **** 		if (op == RARG_ISG)
 19094              		.loc 1 3236 8 is_stmt 0 view .LVU4965
 19095 013a 24AA     		add	r2, sp, #144
 19096 013c 3046     		mov	r0, r6
 19097 013e 2146     		mov	r1, r4
 19098 0140 FFF7FEFF 		bl	extract_value
ARM GAS  /tmp/ccjeMhND.s 			page 513


 19099              	.LVL1465:
3242:src/xeq.c     **** 		else // if (op == RARG_DSL)
 19100              		.loc 1 3242 18 view .LVU4966
 19101 0144 249B     		ldr	r3, [sp, #144]
 19102              	.LVL1466:
3237:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 19103              		.loc 1 3237 3 is_stmt 1 view .LVU4967
3239:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 19104              		.loc 1 3239 8 view .LVU4968
3241:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
 19105              		.loc 1 3241 8 view .LVU4969
3242:src/xeq.c     **** 		else // if (op == RARG_DSL)
 19106              		.loc 1 3242 4 view .LVU4970
 19107 0146 23B1     		cbz	r3, .L1351
3242:src/xeq.c     **** 		else // if (op == RARG_DSL)
 19108              		.loc 1 3242 4 is_stmt 0 discriminator 1 view .LVU4971
 19109 0148 50EA0103 		orrs	r3, r0, r1
 19110 014c 14BF     		ite	ne
 19111 014e 0123     		movne	r3, #1
 19112 0150 0023     		moveq	r3, #0
 19113              	.L1351:
3242:src/xeq.c     **** 		else // if (op == RARG_DSL)
 19114              		.loc 1 3242 4 discriminator 6 view .LVU4972
 19115 0152 1846     		mov	r0, r3
 19116              	.LVL1467:
3242:src/xeq.c     **** 		else // if (op == RARG_DSL)
 19117              		.loc 1 3242 4 discriminator 6 view .LVU4973
 19118 0154 FFF7FEFF 		bl	fin_tst
 19119              	.LVL1468:
 19120 0158 AFE7     		b	.L1330
 19121              	.L1365:
3242:src/xeq.c     **** 		else // if (op == RARG_DSL)
 19122              		.loc 1 3242 4 discriminator 6 view .LVU4974
 19123              	.LBE2891:
 19124              	.LBB2904:
3284:src/xeq.c     **** 		} else
 19125              		.loc 1 3284 4 is_stmt 1 view .LVU4975
 19126 015a FFF7FEFF 		bl	dn_subtract
 19127              	.LVL1469:
 19128 015e A8E7     		b	.L1347
 19129              	.L1363:
3257:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 19130              		.loc 1 3257 4 view .LVU4976
 19131 0160 1BA9     		add	r1, sp, #108
 19132 0162 0846     		mov	r0, r1
 19133 0164 FFF7FEFF 		bl	dn_minus
 19134              	.LVL1470:
 19135 0168 6AE7     		b	.L1340
 19136              	.LVL1471:
 19137              	.L1368:
3257:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 19138              		.loc 1 3257 4 is_stmt 0 view .LVU4977
 19139              	.LBE2904:
 19140              	.LBB2905:
3233:src/xeq.c     **** 		set_reg_n_int(arg, x);
 19141              		.loc 1 3233 4 is_stmt 1 view .LVU4978
3233:src/xeq.c     **** 		set_reg_n_int(arg, x);
ARM GAS  /tmp/ccjeMhND.s 			page 514


 19142              		.loc 1 3233 8 is_stmt 0 view .LVU4979
 19143 016a FFF7FEFF 		bl	intSubtract
 19144              	.LVL1472:
3233:src/xeq.c     **** 		set_reg_n_int(arg, x);
 19145              		.loc 1 3233 8 view .LVU4980
 19146 016e 0746     		mov	r7, r0
 19147              	.LBB2900:
 19148              	.LBB2895:
1237:src/xeq.c     **** }
 19149              		.loc 1 1237 8 view .LVU4981
 19150 0170 2846     		mov	r0, r5
 19151              	.LBE2895:
 19152              	.LBE2900:
3233:src/xeq.c     **** 		set_reg_n_int(arg, x);
 19153              		.loc 1 3233 8 view .LVU4982
 19154 0172 0E46     		mov	r6, r1
 19155              	.LVL1473:
3234:src/xeq.c     **** 
 19156              		.loc 1 3234 3 is_stmt 1 view .LVU4983
3234:src/xeq.c     **** 
 19157              		.loc 1 3234 3 is_stmt 0 view .LVU4984
 19158 0174 CDE92471 		strd	r7, r1, [sp, #144]
 19159              	.LVL1474:
 19160              	.LBB2901:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 19161              		.loc 1 1236 6 is_stmt 1 view .LVU4985
 19162              	.LBB2896:
1237:src/xeq.c     **** }
 19163              		.loc 1 1237 2 view .LVU4986
1237:src/xeq.c     **** }
 19164              		.loc 1 1237 8 is_stmt 0 view .LVU4987
 19165 0178 FFF7FEFF 		bl	get_reg_n
 19166              	.LVL1475:
1237:src/xeq.c     **** }
 19167              		.loc 1 1237 2 view .LVU4988
 19168 017c 24A9     		add	r1, sp, #144
 19169 017e 0822     		movs	r2, #8
 19170 0180 FFF7FEFF 		bl	xcopy
 19171              	.LVL1476:
1237:src/xeq.c     **** }
 19172              		.loc 1 1237 2 view .LVU4989
 19173              	.LBE2896:
 19174              	.LBE2901:
3236:src/xeq.c     **** 		if (op == RARG_ISG)
 19175              		.loc 1 3236 3 is_stmt 1 view .LVU4990
3236:src/xeq.c     **** 		if (op == RARG_ISG)
 19176              		.loc 1 3236 8 is_stmt 0 view .LVU4991
 19177 0184 24AA     		add	r2, sp, #144
 19178 0186 3846     		mov	r0, r7
 19179 0188 3146     		mov	r1, r6
 19180 018a FFF7FEFF 		bl	extract_value
 19181              	.LVL1477:
3237:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 19182              		.loc 1 3237 3 is_stmt 1 view .LVU4992
3239:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 19183              		.loc 1 3239 8 view .LVU4993
3239:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
ARM GAS  /tmp/ccjeMhND.s 			page 515


 19184              		.loc 1 3239 11 is_stmt 0 view .LVU4994
 19185 018e 3A2C     		cmp	r4, #58
3240:src/xeq.c     **** 		else if (op == RARG_ISE)
 19186              		.loc 1 3240 4 view .LVU4995
 19187 0190 249B     		ldr	r3, [sp, #144]
3239:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 19188              		.loc 1 3239 11 view .LVU4996
 19189 0192 25D0     		beq	.L1369
3244:src/xeq.c     **** 		return;
 19190              		.loc 1 3244 4 is_stmt 1 view .LVU4997
 19191 0194 13B3     		cbz	r3, .L1353
 19192              	.LVL1478:
 19193              	.L1361:
3244:src/xeq.c     **** 		return;
 19194              		.loc 1 3244 4 is_stmt 0 discriminator 2 view .LVU4998
 19195 0196 50EA0103 		orrs	r3, r0, r1
 19196 019a 0CBF     		ite	eq
 19197 019c 0120     		moveq	r0, #1
 19198 019e 0020     		movne	r0, #0
 19199              	.L1338:
3244:src/xeq.c     **** 		return;
 19200              		.loc 1 3244 4 discriminator 6 view .LVU4999
 19201 01a0 FFF7FEFF 		bl	fin_tst
 19202              	.LVL1479:
3245:src/xeq.c     **** 	} else {
 19203              		.loc 1 3245 3 is_stmt 1 discriminator 6 view .LVU5000
 19204              	.LBE2905:
3289:src/xeq.c     **** 
 19205              		.loc 1 3289 1 is_stmt 0 discriminator 6 view .LVU5001
 19206 01a4 2FB0     		add	sp, sp, #188
 19207              		.cfi_remember_state
 19208              		.cfi_def_cfa_offset 20
 19209              		@ sp needed
 19210 01a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 19211              	.LVL1480:
 19212              	.L1366:
 19213              		.cfi_restore_state
 19214              	.LBB2906:
3277:src/xeq.c     **** 			else
 19215              		.loc 1 3277 5 is_stmt 1 view .LVU5002
 19216 01a8 FFF7FEFF 		bl	dn_le0
 19217              	.LVL1481:
 19218 01ac FFF7FEFF 		bl	fin_tst
 19219              	.LVL1482:
 19220 01b0 76E7     		b	.L1344
 19221              	.LVL1483:
 19222              	.L1332:
3277:src/xeq.c     **** 			else
 19223              		.loc 1 3277 5 is_stmt 0 view .LVU5003
 19224              	.LBE2906:
 19225              	.LBB2907:
3231:src/xeq.c     **** 		else
 19226              		.loc 1 3231 4 is_stmt 1 view .LVU5004
3231:src/xeq.c     **** 		else
 19227              		.loc 1 3231 8 is_stmt 0 view .LVU5005
 19228 01b2 FFF7FEFF 		bl	intAdd
 19229              	.LVL1484:
ARM GAS  /tmp/ccjeMhND.s 			page 516


3231:src/xeq.c     **** 		else
 19230              		.loc 1 3231 8 view .LVU5006
 19231 01b6 0646     		mov	r6, r0
 19232              	.LBB2902:
 19233              	.LBB2897:
1237:src/xeq.c     **** }
 19234              		.loc 1 1237 8 view .LVU5007
 19235 01b8 2846     		mov	r0, r5
 19236              	.LBE2897:
 19237              	.LBE2902:
3231:src/xeq.c     **** 		else
 19238              		.loc 1 3231 8 view .LVU5008
 19239 01ba 0C46     		mov	r4, r1
 19240              	.LVL1485:
3234:src/xeq.c     **** 
 19241              		.loc 1 3234 3 is_stmt 1 view .LVU5009
3234:src/xeq.c     **** 
 19242              		.loc 1 3234 3 is_stmt 0 view .LVU5010
 19243 01bc CDE92461 		strd	r6, r1, [sp, #144]
 19244              	.LVL1486:
 19245              	.LBB2903:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 19246              		.loc 1 1236 6 is_stmt 1 view .LVU5011
 19247              	.LBB2898:
1237:src/xeq.c     **** }
 19248              		.loc 1 1237 2 view .LVU5012
1237:src/xeq.c     **** }
 19249              		.loc 1 1237 8 is_stmt 0 view .LVU5013
 19250 01c0 FFF7FEFF 		bl	get_reg_n
 19251              	.LVL1487:
1237:src/xeq.c     **** }
 19252              		.loc 1 1237 2 view .LVU5014
 19253 01c4 24A9     		add	r1, sp, #144
 19254 01c6 0822     		movs	r2, #8
 19255 01c8 FFF7FEFF 		bl	xcopy
 19256              	.LVL1488:
1237:src/xeq.c     **** }
 19257              		.loc 1 1237 2 view .LVU5015
 19258              	.LBE2898:
 19259              	.LBE2903:
3236:src/xeq.c     **** 		if (op == RARG_ISG)
 19260              		.loc 1 3236 3 is_stmt 1 view .LVU5016
3236:src/xeq.c     **** 		if (op == RARG_ISG)
 19261              		.loc 1 3236 8 is_stmt 0 view .LVU5017
 19262 01cc 24AA     		add	r2, sp, #144
 19263 01ce 3046     		mov	r0, r6
 19264 01d0 2146     		mov	r1, r4
 19265 01d2 FFF7FEFF 		bl	extract_value
 19266              	.LVL1489:
3238:src/xeq.c     **** 		else if (op == RARG_DSE)
 19267              		.loc 1 3238 4 view .LVU5018
 19268 01d6 249B     		ldr	r3, [sp, #144]
 19269              	.LVL1490:
3237:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 19270              		.loc 1 3237 3 is_stmt 1 view .LVU5019
3238:src/xeq.c     **** 		else if (op == RARG_DSE)
 19271              		.loc 1 3238 4 view .LVU5020
ARM GAS  /tmp/ccjeMhND.s 			page 517


 19272 01d8 002B     		cmp	r3, #0
 19273 01da DCD0     		beq	.L1361
 19274              	.LVL1491:
 19275              	.L1353:
3244:src/xeq.c     **** 		return;
 19276              		.loc 1 3244 4 is_stmt 0 view .LVU5021
 19277 01dc 0120     		movs	r0, #1
 19278 01de DFE7     		b	.L1338
 19279              	.LVL1492:
 19280              	.L1369:
3240:src/xeq.c     **** 		else if (op == RARG_ISE)
 19281              		.loc 1 3240 4 is_stmt 1 view .LVU5022
 19282 01e0 2BB9     		cbnz	r3, .L1352
3240:src/xeq.c     **** 		else if (op == RARG_ISE)
 19283              		.loc 1 3240 4 is_stmt 0 discriminator 1 view .LVU5023
 19284 01e2 50EA0103 		orrs	r3, r0, r1
 19285 01e6 14BF     		ite	ne
 19286 01e8 0120     		movne	r0, #1
 19287              	.LVL1493:
3240:src/xeq.c     **** 		else if (op == RARG_ISE)
 19288              		.loc 1 3240 4 discriminator 1 view .LVU5024
 19289 01ea 0020     		moveq	r0, #0
 19290 01ec D8E7     		b	.L1338
 19291              	.LVL1494:
 19292              	.L1352:
3240:src/xeq.c     **** 		else if (op == RARG_ISE)
 19293              		.loc 1 3240 4 view .LVU5025
 19294 01ee 0020     		movs	r0, #0
 19295              	.LVL1495:
3240:src/xeq.c     **** 		else if (op == RARG_ISE)
 19296              		.loc 1 3240 4 view .LVU5026
 19297 01f0 D6E7     		b	.L1338
 19298              	.L1371:
 19299 01f2 00BF     		.align	2
 19300              	.L1370:
 19301 01f4 00000000 		.word	main_ram
 19302              	.LBE2907:
 19303              		.cfi_endproc
 19304              	.LFE191:
 19306              		.section	.text.op_shift_digit,"ax",%progbits
 19307              		.align	1
 19308              		.p2align 2,,3
 19309              		.global	op_shift_digit
 19310              		.syntax unified
 19311              		.thumb
 19312              		.thumb_func
 19313              		.fpu fpv4-sp-d16
 19315              	op_shift_digit:
 19316              	.LVL1496:
 19317              	.LFB192:
3294:src/xeq.c     **** 	decNumber x;
 19318              		.loc 1 3294 51 is_stmt 1 view -0
 19319              		.cfi_startproc
 19320              		@ args = 0, pretend = 0, frame = 40
 19321              		@ frame_needed = 0, uses_anonymous_args = 0
3295:src/xeq.c     **** 	int adjust = n;
 19322              		.loc 1 3295 2 view .LVU5028
ARM GAS  /tmp/ccjeMhND.s 			page 518


3296:src/xeq.c     **** 
 19323              		.loc 1 3296 2 view .LVU5029
3298:src/xeq.c     **** 		bad_mode_error();
 19324              		.loc 1 3298 6 is_stmt 0 view .LVU5030
 19325 0000 174B     		ldr	r3, .L1381
 19326 0002 1B68     		ldr	r3, [r3]
 19327 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 19328              	.LVL1497:
3298:src/xeq.c     **** 		bad_mode_error();
 19329              		.loc 1 3298 2 is_stmt 1 view .LVU5031
3298:src/xeq.c     **** 		bad_mode_error();
 19330              		.loc 1 3298 5 is_stmt 0 view .LVU5032
 19331 0008 DB07     		lsls	r3, r3, #31
 19332 000a 06D5     		bpl	.L1373
3299:src/xeq.c     **** 		return;
 19333              		.loc 1 3299 3 is_stmt 1 view .LVU5033
 19334              	.LBB2919:
 19335              	.LBI2919:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 19336              		.loc 1 566 6 view .LVU5034
 19337              	.LBE2919:
 567:src/xeq.c     **** }
 19338              		.loc 1 567 2 view .LVU5035
 19339              	.LVL1498:
 19340              	.LBB2924:
 19341              	.LBB2920:
 19342              	.LBI2920:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19343              		.loc 1 537 5 view .LVU5036
 19344              	.LBB2921:
 538:src/xeq.c     **** 		Error = e;
 19345              		.loc 1 538 2 view .LVU5037
 538:src/xeq.c     **** 		Error = e;
 19346              		.loc 1 538 12 is_stmt 0 view .LVU5038
 19347 000c 154B     		ldr	r3, .L1381+4
 538:src/xeq.c     **** 		Error = e;
 19348              		.loc 1 538 5 view .LVU5039
 19349 000e 1A68     		ldr	r2, [r3]
 19350 0010 12B9     		cbnz	r2, .L1379
 19351              	.LVL1499:
 19352              	.LBB2922:
 19353              	.LBI2922:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19354              		.loc 1 537 5 is_stmt 1 view .LVU5040
 19355              	.LBB2923:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 19356              		.loc 1 539 3 view .LVU5041
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 19357              		.loc 1 539 9 is_stmt 0 view .LVU5042
 19358 0012 0D22     		movs	r2, #13
 19359 0014 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 19360              		.loc 1 540 3 is_stmt 1 view .LVU5043
 19361 0016 7047     		bx	lr
 19362              	.LVL1500:
 19363              	.L1379:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/ccjeMhND.s 			page 519


 19364              		.loc 1 540 3 is_stmt 0 view .LVU5044
 19365 0018 7047     		bx	lr
 19366              	.LVL1501:
 19367              	.L1373:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 19368              		.loc 1 540 3 view .LVU5045
 19369              	.LBE2923:
 19370              	.LBE2922:
 19371              	.LBE2921:
 19372              	.LBE2920:
 19373              	.LBE2924:
3302:src/xeq.c     **** 	setlastX();
 19374              		.loc 1 3302 2 is_stmt 1 view .LVU5046
3294:src/xeq.c     **** 	decNumber x;
 19375              		.loc 1 3294 51 is_stmt 0 view .LVU5047
 19376 001a 30B5     		push	{r4, r5, lr}
 19377              		.cfi_def_cfa_offset 12
 19378              		.cfi_offset 4, -12
 19379              		.cfi_offset 5, -8
 19380              		.cfi_offset 14, -4
 19381 001c 8BB0     		sub	sp, sp, #44
 19382              		.cfi_def_cfa_offset 56
 19383              	.LVL1502:
 19384              	.LBB2925:
 19385              	.LBI2925:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19386              		.loc 1 805 12 is_stmt 1 view .LVU5048
 19387              	.LBB2926:
 806:src/xeq.c     **** }
 19388              		.loc 1 806 2 view .LVU5049
 19389 001e 0446     		mov	r4, r0
 19390 0020 0D46     		mov	r5, r1
 806:src/xeq.c     **** }
 19391              		.loc 1 806 9 is_stmt 0 view .LVU5050
 19392 0022 01A8     		add	r0, sp, #4
 19393              	.LVL1503:
 806:src/xeq.c     **** }
 19394              		.loc 1 806 9 view .LVU5051
 19395 0024 6421     		movs	r1, #100
 19396              	.LVL1504:
 806:src/xeq.c     **** }
 19397              		.loc 1 806 9 view .LVU5052
 19398 0026 FFF7FEFF 		bl	getRegister
 19399              	.LVL1505:
 806:src/xeq.c     **** }
 19400              		.loc 1 806 9 view .LVU5053
 19401              	.LBE2926:
 19402              	.LBE2925:
3303:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
 19403              		.loc 1 3303 2 is_stmt 1 view .LVU5054
 19404              	.LBB2927:
 19405              	.LBI2927:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 19406              		.loc 1 773 6 view .LVU5055
 19407              	.LBB2928:
 774:src/xeq.c     **** }
 19408              		.loc 1 774 2 view .LVU5056
ARM GAS  /tmp/ccjeMhND.s 			page 520


 19409 002a 6421     		movs	r1, #100
 19410 002c 6C20     		movs	r0, #108
 19411 002e FFF7FEFF 		bl	copyreg_n
 19412              	.LVL1506:
 19413              	.LBE2928:
 19414              	.LBE2927:
3304:src/xeq.c     **** 		return;
 19415              		.loc 1 3304 2 view .LVU5057
3304:src/xeq.c     **** 		return;
 19416              		.loc 1 3304 5 is_stmt 0 view .LVU5058
 19417 0032 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 19418 0036 13F0700F 		tst	r3, #112
 19419 003a 0ED1     		bne	.L1372
3304:src/xeq.c     **** 		return;
 19420              		.loc 1 3304 32 discriminator 1 view .LVU5059
 19421 003c 01A8     		add	r0, sp, #4
 19422 003e FFF7FEFF 		bl	dn_eq0
 19423              	.LVL1507:
3304:src/xeq.c     **** 		return;
 19424              		.loc 1 3304 29 discriminator 1 view .LVU5060
 19425 0042 50B9     		cbnz	r0, .L1372
3306:src/xeq.c     **** 		adjust = -adjust;
 19426              		.loc 1 3306 5 view .LVU5061
 19427 0044 722D     		cmp	r5, #114
3296:src/xeq.c     **** 
 19428              		.loc 1 3296 6 view .LVU5062
 19429 0046 2046     		mov	r0, r4
3306:src/xeq.c     **** 		adjust = -adjust;
 19430              		.loc 1 3306 2 is_stmt 1 view .LVU5063
3307:src/xeq.c     **** 	x.exponent += adjust;
 19431              		.loc 1 3307 3 view .LVU5064
3307:src/xeq.c     **** 	x.exponent += adjust;
 19432              		.loc 1 3307 10 is_stmt 0 view .LVU5065
 19433 0048 08BF     		it	eq
 19434 004a 6042     		rsbeq	r0, r4, #0
 19435              	.LVL1508:
3308:src/xeq.c     **** 	setX(&x);
 19436              		.loc 1 3308 2 is_stmt 1 view .LVU5066
3308:src/xeq.c     **** 	setX(&x);
 19437              		.loc 1 3308 13 is_stmt 0 view .LVU5067
 19438 004c 029C     		ldr	r4, [sp, #8]
 19439              	.LVL1509:
 19440              	.LBB2929:
 19441              	.LBB2930:
 810:src/xeq.c     **** }
 19442              		.loc 1 810 2 view .LVU5068
 19443 004e 01A9     		add	r1, sp, #4
 19444              	.LBE2930:
 19445              	.LBE2929:
3308:src/xeq.c     **** 	setX(&x);
 19446              		.loc 1 3308 13 view .LVU5069
 19447 0050 0444     		add	r4, r4, r0
 19448              	.LBB2933:
 19449              	.LBB2931:
 810:src/xeq.c     **** }
 19450              		.loc 1 810 2 view .LVU5070
 19451 0052 6420     		movs	r0, #100
ARM GAS  /tmp/ccjeMhND.s 			page 521


 19452              	.LVL1510:
 810:src/xeq.c     **** }
 19453              		.loc 1 810 2 view .LVU5071
 19454              	.LBE2931:
 19455              	.LBE2933:
3308:src/xeq.c     **** 	setX(&x);
 19456              		.loc 1 3308 13 view .LVU5072
 19457 0054 0294     		str	r4, [sp, #8]
3309:src/xeq.c     **** }
 19458              		.loc 1 3309 2 is_stmt 1 view .LVU5073
 19459              	.LVL1511:
 19460              	.LBB2934:
 19461              	.LBI2929:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 19462              		.loc 1 809 6 view .LVU5074
 19463              	.LBB2932:
 810:src/xeq.c     **** }
 19464              		.loc 1 810 2 view .LVU5075
 19465 0056 FFF7FEFF 		bl	setRegister
 19466              	.LVL1512:
 19467              	.L1372:
 810:src/xeq.c     **** }
 19468              		.loc 1 810 2 is_stmt 0 view .LVU5076
 19469              	.LBE2932:
 19470              	.LBE2934:
3310:src/xeq.c     **** 
 19471              		.loc 1 3310 1 view .LVU5077
 19472 005a 0BB0     		add	sp, sp, #44
 19473              		.cfi_def_cfa_offset 12
 19474              		@ sp needed
 19475 005c 30BD     		pop	{r4, r5, pc}
 19476              	.L1382:
 19477 005e 00BF     		.align	2
 19478              	.L1381:
 19479 0060 00000000 		.word	main_ram
 19480 0064 00000000 		.word	Error
 19481              		.cfi_endproc
 19482              	.LFE192:
 19484              		.section	.text.get_user_flag,"ax",%progbits
 19485              		.align	1
 19486              		.p2align 2,,3
 19487              		.global	get_user_flag
 19488              		.syntax unified
 19489              		.thumb
 19490              		.thumb_func
 19491              		.fpu fpv4-sp-d16
 19493              	get_user_flag:
 19494              	.LVL1513:
 19495              	.LFB194:
3343:src/xeq.c     **** 	unsigned short mask;
 19496              		.loc 1 3343 26 is_stmt 1 view -0
 19497              		.cfi_startproc
 19498              		@ args = 0, pretend = 0, frame = 8
 19499              		@ frame_needed = 0, uses_anonymous_args = 0
3344:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 19500              		.loc 1 3344 2 view .LVU5079
3345:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 522


 19501              		.loc 1 3345 2 view .LVU5080
3343:src/xeq.c     **** 	unsigned short mask;
 19502              		.loc 1 3343 26 is_stmt 0 view .LVU5081
 19503 0000 00B5     		push	{lr}
 19504              		.cfi_def_cfa_offset 4
 19505              		.cfi_offset 14, -4
 19506 0002 83B0     		sub	sp, sp, #12
 19507              		.cfi_def_cfa_offset 16
3345:src/xeq.c     **** 
 19508              		.loc 1 3345 34 view .LVU5082
 19509 0004 0DF10601 		add	r1, sp, #6
 19510 0008 FFF7FEFF 		bl	flag_word
 19511              	.LVL1514:
3347:src/xeq.c     **** }
 19512              		.loc 1 3347 2 is_stmt 1 view .LVU5083
3347:src/xeq.c     **** }
 19513              		.loc 1 3347 24 is_stmt 0 view .LVU5084
 19514 000c BDF80630 		ldrh	r3, [sp, #6]
 19515 0010 0288     		ldrh	r2, [r0]
 19516 0012 1A42     		tst	r2, r3
3348:src/xeq.c     **** 
 19517              		.loc 1 3348 1 view .LVU5085
 19518 0014 14BF     		ite	ne
 19519 0016 0120     		movne	r0, #1
 19520              	.LVL1515:
3348:src/xeq.c     **** 
 19521              		.loc 1 3348 1 view .LVU5086
 19522 0018 0020     		moveq	r0, #0
 19523 001a 03B0     		add	sp, sp, #12
 19524              		.cfi_def_cfa_offset 4
 19525              		@ sp needed
 19526 001c 5DF804FB 		ldr	pc, [sp], #4
 19527              		.cfi_endproc
 19528              	.LFE194:
 19530              		.section	.text.cmdflag,"ax",%progbits
 19531              		.align	1
 19532              		.p2align 2,,3
 19533              		.global	cmdflag
 19534              		.syntax unified
 19535              		.thumb
 19536              		.thumb_func
 19537              		.fpu fpv4-sp-d16
 19539              	cmdflag:
 19540              	.LVL1516:
 19541              	.LFB196:
3371:src/xeq.c     **** 	unsigned short mask;
 19542              		.loc 1 3371 46 is_stmt 1 view -0
 19543              		.cfi_startproc
 19544              		@ args = 0, pretend = 0, frame = 8
 19545              		@ frame_needed = 0, uses_anonymous_args = 0
3372:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
 19546              		.loc 1 3372 2 view .LVU5088
3373:src/xeq.c     **** 	int flg = *f & mask;
 19547              		.loc 1 3373 2 view .LVU5089
3371:src/xeq.c     **** 	unsigned short mask;
 19548              		.loc 1 3371 46 is_stmt 0 view .LVU5090
 19549 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/ccjeMhND.s 			page 523


 19550              		.cfi_def_cfa_offset 16
 19551              		.cfi_offset 4, -16
 19552              		.cfi_offset 5, -12
 19553              		.cfi_offset 6, -8
 19554              		.cfi_offset 14, -4
 19555 0002 82B0     		sub	sp, sp, #8
 19556              		.cfi_def_cfa_offset 24
3371:src/xeq.c     **** 	unsigned short mask;
 19557              		.loc 1 3371 46 view .LVU5091
 19558 0004 0C46     		mov	r4, r1
3373:src/xeq.c     **** 	int flg = *f & mask;
 19559              		.loc 1 3373 28 view .LVU5092
 19560 0006 0DF10601 		add	r1, sp, #6
 19561              	.LVL1517:
3371:src/xeq.c     **** 	unsigned short mask;
 19562              		.loc 1 3371 46 view .LVU5093
 19563 000a 0646     		mov	r6, r0
3373:src/xeq.c     **** 	int flg = *f & mask;
 19564              		.loc 1 3373 28 view .LVU5094
 19565 000c FFF7FEFF 		bl	flag_word
 19566              	.LVL1518:
3374:src/xeq.c     **** 
 19567              		.loc 1 3374 15 view .LVU5095
 19568 0010 BDF80620 		ldrh	r2, [sp, #6]
3374:src/xeq.c     **** 
 19569              		.loc 1 3374 12 view .LVU5096
 19570 0014 0388     		ldrh	r3, [r0]
 19571 0016 A4F15101 		sub	r1, r4, #81
3373:src/xeq.c     **** 	int flg = *f & mask;
 19572              		.loc 1 3373 28 view .LVU5097
 19573 001a 0546     		mov	r5, r0
 19574              	.LVL1519:
3374:src/xeq.c     **** 
 19575              		.loc 1 3374 2 is_stmt 1 view .LVU5098
3374:src/xeq.c     **** 
 19576              		.loc 1 3374 6 is_stmt 0 view .LVU5099
 19577 001c 03EA0200 		and	r0, r3, r2
 19578              	.LVL1520:
3376:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
 19579              		.loc 1 3376 2 is_stmt 1 view .LVU5100
 19580 0020 0A29     		cmp	r1, #10
 19581 0022 1AD8     		bhi	.L1385
 19582 0024 DFE801F0 		tbb	[pc, r1]
 19583              	.L1388:
 19584 0028 23       		.byte	(.L1398-.L1388)/2
 19585 0029 0E       		.byte	(.L1397-.L1388)/2
 19586 002a 46       		.byte	(.L1396-.L1388)/2
 19587 002b 29       		.byte	(.L1409-.L1388)/2
 19588 002c 26       		.byte	(.L1394-.L1388)/2
 19589 002d 09       		.byte	(.L1408-.L1388)/2
 19590 002e 1E       		.byte	(.L1407-.L1388)/2
 19591 002f 2D       		.byte	(.L1391-.L1388)/2
 19592 0030 06       		.byte	(.L1390-.L1388)/2
 19593 0031 1B       		.byte	(.L1389-.L1388)/2
 19594 0032 3A       		.byte	(.L1387-.L1388)/2
 19595 0033 00       		.p2align 1
 19596              	.L1390:
ARM GAS  /tmp/ccjeMhND.s 			page 524


3388:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19597              		.loc 1 3388 17 view .LVU5101
 19598 0034 B0FA80F0 		clz	r0, r0
 19599              	.LVL1521:
3388:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19600              		.loc 1 3388 17 is_stmt 0 view .LVU5102
 19601 0038 4009     		lsrs	r0, r0, #5
 19602              	.L1408:
3388:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19603              		.loc 1 3388 17 view .LVU5103
 19604 003a FFF7FEFF 		bl	fin_tst
 19605              	.LVL1522:
3388:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19606              		.loc 1 3388 33 is_stmt 1 view .LVU5104
3388:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19607              		.loc 1 3388 45 view .LVU5105
3397:src/xeq.c     **** 		*f |= mask;
 19608              		.loc 1 3397 2 view .LVU5106
 19609 003e 2B88     		ldrh	r3, [r5]
 19610 0040 BDF80620 		ldrh	r2, [sp, #6]
 19611              	.LVL1523:
 19612              	.L1397:
3400:src/xeq.c     **** 
 19613              		.loc 1 3400 3 view .LVU5107
3400:src/xeq.c     **** 
 19614              		.loc 1 3400 6 is_stmt 0 view .LVU5108
 19615 0044 23EA0203 		bic	r3, r3, r2
 19616 0048 0021     		movs	r1, #0
 19617              	.L1400:
3402:src/xeq.c     **** 		dot( BIG_EQ, flg );
 19618              		.loc 1 3402 5 view .LVU5109
 19619 004a 682E     		cmp	r6, #104
 19620 004c 2B80     		strh	r3, [r5]	@ movhi
3402:src/xeq.c     **** 		dot( BIG_EQ, flg );
 19621              		.loc 1 3402 2 is_stmt 1 view .LVU5110
3402:src/xeq.c     **** 		dot( BIG_EQ, flg );
 19622              		.loc 1 3402 5 is_stmt 0 view .LVU5111
 19623 004e 04D1     		bne	.L1385
3403:src/xeq.c     **** 		finish_display(); // BIG_EQ
 19624              		.loc 1 3403 3 is_stmt 1 view .LVU5112
 19625 0050 8320     		movs	r0, #131
 19626 0052 FFF7FEFF 		bl	dot
 19627              	.LVL1524:
3404:src/xeq.c     **** 	}
 19628              		.loc 1 3404 3 view .LVU5113
 19629 0056 FFF7FEFF 		bl	finish_display
 19630              	.LVL1525:
 19631              	.L1385:
3406:src/xeq.c     **** 
 19632              		.loc 1 3406 1 is_stmt 0 view .LVU5114
 19633 005a 02B0     		add	sp, sp, #8
 19634              		.cfi_remember_state
 19635              		.cfi_def_cfa_offset 16
 19636              		@ sp needed
 19637 005c 70BD     		pop	{r4, r5, r6, pc}
 19638              	.LVL1526:
 19639              	.L1389:
ARM GAS  /tmp/ccjeMhND.s 			page 525


 19640              		.cfi_restore_state
3389:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19641              		.loc 1 3389 17 is_stmt 1 view .LVU5115
 19642 005e B0FA80F0 		clz	r0, r0
 19643              	.LVL1527:
3389:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19644              		.loc 1 3389 17 is_stmt 0 view .LVU5116
 19645 0062 4009     		lsrs	r0, r0, #5
 19646              	.L1407:
3389:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19647              		.loc 1 3389 17 view .LVU5117
 19648 0064 FFF7FEFF 		bl	fin_tst
 19649              	.LVL1528:
3389:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19650              		.loc 1 3389 33 is_stmt 1 view .LVU5118
3389:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19651              		.loc 1 3389 45 view .LVU5119
3397:src/xeq.c     **** 		*f |= mask;
 19652              		.loc 1 3397 2 view .LVU5120
 19653 0068 2B88     		ldrh	r3, [r5]
 19654 006a BDF80620 		ldrh	r2, [sp, #6]
 19655              	.LVL1529:
 19656              	.L1398:
3398:src/xeq.c     **** 	else
 19657              		.loc 1 3398 3 view .LVU5121
3398:src/xeq.c     **** 	else
 19658              		.loc 1 3398 6 is_stmt 0 view .LVU5122
 19659 006e 1343     		orrs	r3, r3, r2
 19660 0070 0121     		movs	r1, #1
 19661 0072 EAE7     		b	.L1400
 19662              	.LVL1530:
 19663              	.L1394:
3382:src/xeq.c     **** 
 19664              		.loc 1 3382 16 is_stmt 1 view .LVU5123
 19665 0074 B0FA80F0 		clz	r0, r0
 19666              	.LVL1531:
3382:src/xeq.c     **** 
 19667              		.loc 1 3382 16 is_stmt 0 view .LVU5124
 19668 0078 4009     		lsrs	r0, r0, #5
 19669              	.L1409:
3382:src/xeq.c     **** 
 19670              		.loc 1 3382 16 view .LVU5125
 19671 007a FFF7FEFF 		bl	fin_tst
 19672              	.LVL1532:
3382:src/xeq.c     **** 
 19673              		.loc 1 3382 37 is_stmt 1 view .LVU5126
3406:src/xeq.c     **** 
 19674              		.loc 1 3406 1 is_stmt 0 view .LVU5127
 19675 007e 02B0     		add	sp, sp, #8
 19676              		.cfi_remember_state
 19677              		.cfi_def_cfa_offset 16
 19678              		@ sp needed
 19679 0080 70BD     		pop	{r4, r5, r6, pc}
 19680              	.LVL1533:
 19681              	.L1391:
 19682              		.cfi_restore_state
3386:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 526


 19683              		.loc 1 3386 17 is_stmt 1 view .LVU5128
3386:src/xeq.c     **** 
 19684              		.loc 1 3386 45 is_stmt 0 view .LVU5129
 19685 0082 B0FA80F4 		clz	r4, r0
 19686 0086 6409     		lsrs	r4, r4, #5
3386:src/xeq.c     **** 
 19687              		.loc 1 3386 17 view .LVU5130
 19688 0088 FFF7FEFF 		bl	fin_tst
 19689              	.LVL1534:
3386:src/xeq.c     **** 
 19690              		.loc 1 3386 31 is_stmt 1 view .LVU5131
3386:src/xeq.c     **** 
 19691              		.loc 1 3386 52 view .LVU5132
3397:src/xeq.c     **** 		*f |= mask;
 19692              		.loc 1 3397 2 view .LVU5133
 19693 008c 2B88     		ldrh	r3, [r5]
 19694 008e BDF80620 		ldrh	r2, [sp, #6]
3397:src/xeq.c     **** 		*f |= mask;
 19695              		.loc 1 3397 5 is_stmt 0 view .LVU5134
 19696 0092 002C     		cmp	r4, #0
 19697 0094 D6D0     		beq	.L1397
 19698              	.L1410:
 19699              	.LVL1535:
3398:src/xeq.c     **** 	else
 19700              		.loc 1 3398 3 is_stmt 1 view .LVU5135
3398:src/xeq.c     **** 	else
 19701              		.loc 1 3398 6 is_stmt 0 view .LVU5136
 19702 0096 1343     		orrs	r3, r3, r2
 19703 0098 0121     		movs	r1, #1
 19704 009a D6E7     		b	.L1400
 19705              	.LVL1536:
 19706              	.L1387:
3390:src/xeq.c     **** 
 19707              		.loc 1 3390 17 is_stmt 1 view .LVU5137
 19708 009c B0FA80F4 		clz	r4, r0
 19709 00a0 6409     		lsrs	r4, r4, #5
 19710 00a2 2046     		mov	r0, r4
 19711              	.LVL1537:
3390:src/xeq.c     **** 
 19712              		.loc 1 3390 17 is_stmt 0 view .LVU5138
 19713 00a4 FFF7FEFF 		bl	fin_tst
 19714              	.LVL1538:
3390:src/xeq.c     **** 
 19715              		.loc 1 3390 33 is_stmt 1 view .LVU5139
3390:src/xeq.c     **** 
 19716              		.loc 1 3390 52 view .LVU5140
 19717 00a8 2B88     		ldrh	r3, [r5]
 19718 00aa BDF80620 		ldrh	r2, [sp, #6]
3397:src/xeq.c     **** 		*f |= mask;
 19719              		.loc 1 3397 2 view .LVU5141
3397:src/xeq.c     **** 		*f |= mask;
 19720              		.loc 1 3397 5 is_stmt 0 view .LVU5142
 19721 00ae 002C     		cmp	r4, #0
 19722 00b0 C8D0     		beq	.L1397
 19723 00b2 F0E7     		b	.L1410
 19724              	.LVL1539:
 19725              	.L1396:
ARM GAS  /tmp/ccjeMhND.s 			page 527


3379:src/xeq.c     **** 
 19726              		.loc 1 3379 16 is_stmt 1 view .LVU5143
3379:src/xeq.c     **** 
 19727              		.loc 1 3379 29 is_stmt 0 view .LVU5144
 19728 00b4 B0FA80F4 		clz	r4, r0
 19729 00b8 6409     		lsrs	r4, r4, #5
 19730              	.LVL1540:
3379:src/xeq.c     **** 
 19731              		.loc 1 3379 38 is_stmt 1 view .LVU5145
3397:src/xeq.c     **** 		*f |= mask;
 19732              		.loc 1 3397 2 view .LVU5146
3397:src/xeq.c     **** 		*f |= mask;
 19733              		.loc 1 3397 5 is_stmt 0 view .LVU5147
 19734 00ba 002C     		cmp	r4, #0
 19735 00bc C2D0     		beq	.L1397
 19736 00be EAE7     		b	.L1410
 19737              		.cfi_endproc
 19738              	.LFE196:
 19740              		.section	.text.put_user_flag,"ax",%progbits
 19741              		.align	1
 19742              		.p2align 2,,3
 19743              		.global	put_user_flag
 19744              		.syntax unified
 19745              		.thumb
 19746              		.thumb_func
 19747              		.fpu fpv4-sp-d16
 19749              	put_user_flag:
 19750              	.LVL1541:
 19751              	.LFB195:
3350:src/xeq.c     **** 	if (f)	set_user_flag(n);
 19752              		.loc 1 3350 34 is_stmt 1 view -0
 19753              		.cfi_startproc
 19754              		@ args = 0, pretend = 0, frame = 0
 19755              		@ frame_needed = 0, uses_anonymous_args = 0
 19756              		@ link register save eliminated.
3351:src/xeq.c     **** 	else	clr_user_flag(n);
 19757              		.loc 1 3351 2 view .LVU5149
3351:src/xeq.c     **** 	else	clr_user_flag(n);
 19758              		.loc 1 3351 5 is_stmt 0 view .LVU5150
 19759 0000 11B1     		cbz	r1, .L1412
3351:src/xeq.c     **** 	else	clr_user_flag(n);
 19760              		.loc 1 3351 9 is_stmt 1 discriminator 1 view .LVU5151
 19761 0002 5121     		movs	r1, #81
 19762              	.LVL1542:
3351:src/xeq.c     **** 	else	clr_user_flag(n);
 19763              		.loc 1 3351 9 is_stmt 0 discriminator 1 view .LVU5152
 19764 0004 FFF7FEBF 		b	cmdflag
 19765              	.LVL1543:
 19766              	.L1412:
3352:src/xeq.c     **** }
 19767              		.loc 1 3352 7 is_stmt 1 view .LVU5153
 19768 0008 5221     		movs	r1, #82
 19769              	.LVL1544:
3352:src/xeq.c     **** }
 19770              		.loc 1 3352 7 is_stmt 0 view .LVU5154
 19771 000a FFF7FEBF 		b	cmdflag
 19772              	.LVL1545:
ARM GAS  /tmp/ccjeMhND.s 			page 528


3352:src/xeq.c     **** }
 19773              		.loc 1 3352 7 view .LVU5155
 19774              		.cfi_endproc
 19775              	.LFE195:
 19777 000e 00BF     		.section	.text.clrflags,"ax",%progbits
 19778              		.align	1
 19779              		.p2align 2,,3
 19780              		.global	clrflags
 19781              		.syntax unified
 19782              		.thumb
 19783              		.thumb_func
 19784              		.fpu fpv4-sp-d16
 19786              	clrflags:
 19787              	.LVL1546:
 19788              	.LFB197:
3410:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 19789              		.loc 1 3410 30 is_stmt 1 view -0
 19790              		.cfi_startproc
 19791              		@ args = 0, pretend = 0, frame = 0
 19792              		@ frame_needed = 0, uses_anonymous_args = 0
3411:src/xeq.c     **** 	if (LocalRegs < 0) {
 19793              		.loc 1 3411 2 view .LVU5157
3410:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 19794              		.loc 1 3410 30 is_stmt 0 view .LVU5158
 19795 0000 10B5     		push	{r4, lr}
 19796              		.cfi_def_cfa_offset 8
 19797              		.cfi_offset 4, -8
 19798              		.cfi_offset 14, -4
3411:src/xeq.c     **** 	if (LocalRegs < 0) {
 19799              		.loc 1 3411 7 view .LVU5159
 19800 0002 0A4C     		ldr	r4, .L1417
 19801 0004 2068     		ldr	r0, [r4]
 19802              	.LVL1547:
3411:src/xeq.c     **** 	if (LocalRegs < 0) {
 19803              		.loc 1 3411 2 view .LVU5160
 19804 0006 0E22     		movs	r2, #14
 19805 0008 00F5FE60 		add	r0, r0, #2032
 19806 000c 0021     		movs	r1, #0
 19807 000e FFF7FEFF 		bl	xset
 19808              	.LVL1548:
3412:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 19809              		.loc 1 3412 2 is_stmt 1 view .LVU5161
3412:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 19810              		.loc 1 3412 6 is_stmt 0 view .LVU5162
 19811 0012 2368     		ldr	r3, [r4]
3412:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 19812              		.loc 1 3412 5 view .LVU5163
 19813 0014 B3F9DE37 		ldrsh	r3, [r3, #2014]
 19814 0018 002B     		cmp	r3, #0
 19815 001a 00DB     		blt	.L1416
3415:src/xeq.c     **** 
 19816              		.loc 1 3415 1 view .LVU5164
 19817 001c 10BD     		pop	{r4, pc}
 19818              	.L1416:
3413:src/xeq.c     **** 	}
 19819              		.loc 1 3413 3 is_stmt 1 view .LVU5165
3413:src/xeq.c     **** 	}
ARM GAS  /tmp/ccjeMhND.s 			page 529


 19820              		.loc 1 3413 5 is_stmt 0 view .LVU5166
 19821 001e 0021     		movs	r1, #0
 19822 0020 7020     		movs	r0, #112
 19823 0022 FFF7FEFF 		bl	flag_word
 19824              	.LVL1549:
3413:src/xeq.c     **** 	}
 19825              		.loc 1 3413 37 view .LVU5167
 19826 0026 0023     		movs	r3, #0
 19827 0028 0380     		strh	r3, [r0]	@ movhi
3415:src/xeq.c     **** 
 19828              		.loc 1 3415 1 view .LVU5168
 19829 002a 10BD     		pop	{r4, pc}
 19830              	.L1418:
 19831              		.align	2
 19832              	.L1417:
 19833 002c 00000000 		.word	main_ram
 19834              		.cfi_endproc
 19835              	.LFE197:
 19837              		.section	.text.intws,"ax",%progbits
 19838              		.align	1
 19839              		.p2align 2,,3
 19840              		.global	intws
 19841              		.syntax unified
 19842              		.thumb
 19843              		.thumb_func
 19844              		.fpu fpv4-sp-d16
 19846              	intws:
 19847              	.LVL1550:
 19848              	.LFB198:
3420:src/xeq.c     **** 	if (is_intmode()) {
 19849              		.loc 1 3420 44 is_stmt 1 view -0
 19850              		.cfi_startproc
 19851              		@ args = 0, pretend = 0, frame = 8
 19852              		@ frame_needed = 0, uses_anonymous_args = 0
3421:src/xeq.c     **** 		int i, ss = stack_size();
 19853              		.loc 1 3421 2 view .LVU5170
3420:src/xeq.c     **** 	if (is_intmode()) {
 19854              		.loc 1 3420 44 is_stmt 0 view .LVU5171
 19855 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 19856              		.cfi_def_cfa_offset 24
 19857              		.cfi_offset 4, -24
 19858              		.cfi_offset 5, -20
 19859              		.cfi_offset 6, -16
 19860              		.cfi_offset 7, -12
 19861              		.cfi_offset 8, -8
 19862              		.cfi_offset 14, -4
3421:src/xeq.c     **** 		int i, ss = stack_size();
 19863              		.loc 1 3421 6 view .LVU5172
 19864 0004 DFF8E080 		ldr	r8, .L1430+4
 19865 0008 D8F80030 		ldr	r3, [r8]
 19866 000c 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3421:src/xeq.c     **** 		int i, ss = stack_size();
 19867              		.loc 1 3421 5 view .LVU5173
 19868 0010 D107     		lsls	r1, r2, #31
 19869              	.LVL1551:
3420:src/xeq.c     **** 	if (is_intmode()) {
 19870              		.loc 1 3420 44 view .LVU5174
ARM GAS  /tmp/ccjeMhND.s 			page 530


 19871 0012 82B0     		sub	sp, sp, #8
 19872              		.cfi_def_cfa_offset 32
3421:src/xeq.c     **** 		int i, ss = stack_size();
 19873              		.loc 1 3421 5 view .LVU5175
 19874 0014 53D5     		bpl	.L1420
 19875              	.LBB2935:
3422:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
 19876              		.loc 1 3422 3 is_stmt 1 view .LVU5176
 19877              	.LBB2936:
 19878              	.LBI2936:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 19879              		.loc 1 703 5 view .LVU5177
 19880              	.LBB2937:
 704:src/xeq.c     **** 		return 4;
 19881              		.loc 1 704 2 view .LVU5178
 704:src/xeq.c     **** 		return 4;
 19882              		.loc 1 704 6 is_stmt 0 view .LVU5179
 19883 0016 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 19884              		.loc 1 704 5 view .LVU5180
 19885 001a 1207     		lsls	r2, r2, #28
 19886 001c 58D5     		bpl	.L1424
 19887              	.LBB2938:
 19888              	.LBI2938:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 19889              		.loc 1 182 5 is_stmt 1 view .LVU5181
 19890              	.LBB2939:
 183:src/xeq.c     **** }
 19891              		.loc 1 183 2 view .LVU5182
 183:src/xeq.c     **** }
 19892              		.loc 1 183 9 is_stmt 0 view .LVU5183
 19893 001e B3F8E027 		ldrh	r2, [r3, #2016]
 19894              	.LBE2939:
 19895              	.LBE2938:
 704:src/xeq.c     **** 		return 4;
 19896              		.loc 1 704 27 view .LVU5184
 19897 0022 920B     		lsrs	r2, r2, #14
 19898 0024 032A     		cmp	r2, #3
 19899 0026 55D0     		beq	.L1429
 706:src/xeq.c     **** }
 19900              		.loc 1 706 9 view .LVU5185
 19901 0028 0827     		movs	r7, #8
 19902              	.L1421:
 19903              	.LVL1552:
 706:src/xeq.c     **** }
 19904              		.loc 1 706 9 view .LVU5186
 19905              	.LBE2937:
 19906              	.LBE2936:
3423:src/xeq.c     **** 		long long int v;
 19907              		.loc 1 3423 3 is_stmt 1 view .LVU5187
3423:src/xeq.c     **** 		long long int v;
 19908              		.loc 1 3423 31 is_stmt 0 view .LVU5188
 19909 002a 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
 19910 002e 00F03F05 		and	r5, r0, #63
 19911 0032 06F03F06 		and	r6, r6, #63
 19912              	.LVL1553:
3424:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 531


 19913              		.loc 1 3424 3 is_stmt 1 view .LVU5189
3426:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19914              		.loc 1 3426 3 view .LVU5190
3426:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19915              		.loc 1 3426 13 view .LVU5191
 19916 0036 6437     		adds	r7, r7, #100
 19917              	.LVL1554:
3423:src/xeq.c     **** 		long long int v;
 19918              		.loc 1 3423 31 is_stmt 0 view .LVU5192
 19919 0038 6424     		movs	r4, #100
 19920              	.LVL1555:
 19921              	.L1422:
3427:src/xeq.c     **** 			UState.int_len = arg;
 19922              		.loc 1 3427 4 is_stmt 1 discriminator 3 view .LVU5193
3427:src/xeq.c     **** 			UState.int_len = arg;
 19923              		.loc 1 3427 8 is_stmt 0 discriminator 3 view .LVU5194
 19924 003a 2046     		mov	r0, r4
 19925 003c FFF7FEFF 		bl	get_reg_n_int
 19926              	.LVL1556:
 19927 0040 FFF7FEFF 		bl	mask_value
 19928              	.LVL1557:
3428:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 19929              		.loc 1 3428 4 is_stmt 1 discriminator 3 view .LVU5195
3428:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 19930              		.loc 1 3428 19 is_stmt 0 discriminator 3 view .LVU5196
 19931 0044 D8F80030 		ldr	r3, [r8]
 19932 0048 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 19933 004c 65F30502 		bfi	r2, r5, #0, #6
 19934 0050 83F8E927 		strb	r2, [r3, #2025]
3429:src/xeq.c     **** 			UState.int_len = oldlen;
 19935              		.loc 1 3429 4 is_stmt 1 discriminator 3 view .LVU5197
 19936 0054 FFF7FEFF 		bl	mask_value
 19937              	.LVL1558:
3429:src/xeq.c     **** 			UState.int_len = oldlen;
 19938              		.loc 1 3429 4 is_stmt 0 discriminator 3 view .LVU5198
 19939 0058 0B46     		mov	r3, r1
 19940 005a 0246     		mov	r2, r0
 19941              	.LBB2941:
 19942              	.LBB2942:
1237:src/xeq.c     **** }
 19943              		.loc 1 1237 8 discriminator 3 view .LVU5199
 19944 005c 2046     		mov	r0, r4
 19945 005e CDE90023 		strd	r2, [sp]
 19946              	.LVL1559:
1237:src/xeq.c     **** }
 19947              		.loc 1 1237 8 discriminator 3 view .LVU5200
 19948              	.LBE2942:
 19949              	.LBI2941:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 19950              		.loc 1 1236 6 is_stmt 1 discriminator 3 view .LVU5201
 19951              	.LBB2943:
1237:src/xeq.c     **** }
 19952              		.loc 1 1237 2 discriminator 3 view .LVU5202
1237:src/xeq.c     **** }
 19953              		.loc 1 1237 8 is_stmt 0 discriminator 3 view .LVU5203
 19954 0062 FFF7FEFF 		bl	get_reg_n
 19955              	.LVL1560:
ARM GAS  /tmp/ccjeMhND.s 			page 532


1237:src/xeq.c     **** }
 19956              		.loc 1 1237 2 discriminator 3 view .LVU5204
 19957 0066 0822     		movs	r2, #8
 19958 0068 6946     		mov	r1, sp
 19959 006a FFF7FEFF 		bl	xcopy
 19960              	.LVL1561:
1237:src/xeq.c     **** }
 19961              		.loc 1 1237 2 discriminator 3 view .LVU5205
 19962              	.LBE2943:
 19963              	.LBE2941:
3430:src/xeq.c     **** 		}
 19964              		.loc 1 3430 4 is_stmt 1 discriminator 3 view .LVU5206
3430:src/xeq.c     **** 		}
 19965              		.loc 1 3430 19 is_stmt 0 discriminator 3 view .LVU5207
 19966 006e D8F80030 		ldr	r3, [r8]
 19967 0072 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 19968 0076 0134     		adds	r4, r4, #1
 19969              	.LVL1562:
3430:src/xeq.c     **** 		}
 19970              		.loc 1 3430 19 discriminator 3 view .LVU5208
 19971 0078 66F30502 		bfi	r2, r6, #0, #6
3426:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19972              		.loc 1 3426 3 discriminator 3 view .LVU5209
 19973 007c BC42     		cmp	r4, r7
3430:src/xeq.c     **** 		}
 19974              		.loc 1 3430 19 discriminator 3 view .LVU5210
 19975 007e 83F8E927 		strb	r2, [r3, #2025]
3426:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19976              		.loc 1 3426 19 is_stmt 1 discriminator 3 view .LVU5211
 19977              	.LVL1563:
3426:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19978              		.loc 1 3426 13 discriminator 3 view .LVU5212
3426:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19979              		.loc 1 3426 3 is_stmt 0 discriminator 3 view .LVU5213
 19980 0082 DAD1     		bne	.L1422
3432:src/xeq.c     **** 		UState.int_len = arg;
 19981              		.loc 1 3432 3 is_stmt 1 view .LVU5214
3432:src/xeq.c     **** 		UState.int_len = arg;
 19982              		.loc 1 3432 7 is_stmt 0 view .LVU5215
 19983 0084 6C20     		movs	r0, #108
 19984 0086 FFF7FEFF 		bl	get_reg_n_int
 19985              	.LVL1564:
 19986 008a FFF7FEFF 		bl	mask_value
 19987              	.LVL1565:
3433:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 19988              		.loc 1 3433 3 is_stmt 1 view .LVU5216
3433:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 19989              		.loc 1 3433 18 is_stmt 0 view .LVU5217
 19990 008e D8F80030 		ldr	r3, [r8]
 19991 0092 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 19992 0096 65F30502 		bfi	r2, r5, #0, #6
 19993 009a 83F8E927 		strb	r2, [r3, #2025]
3434:src/xeq.c     **** 	} else
 19994              		.loc 1 3434 3 is_stmt 1 view .LVU5218
 19995 009e FFF7FEFF 		bl	mask_value
 19996              	.LVL1566:
3434:src/xeq.c     **** 	} else
ARM GAS  /tmp/ccjeMhND.s 			page 533


 19997              		.loc 1 3434 3 is_stmt 0 view .LVU5219
 19998 00a2 0B46     		mov	r3, r1
 19999 00a4 0246     		mov	r2, r0
 20000              	.LBB2944:
 20001              	.LBB2945:
1237:src/xeq.c     **** }
 20002              		.loc 1 1237 8 view .LVU5220
 20003 00a6 6C20     		movs	r0, #108
 20004 00a8 CDE90023 		strd	r2, [sp]
 20005              	.LVL1567:
1237:src/xeq.c     **** }
 20006              		.loc 1 1237 8 view .LVU5221
 20007              	.LBE2945:
 20008              	.LBI2944:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20009              		.loc 1 1236 6 is_stmt 1 view .LVU5222
 20010              	.LBB2946:
1237:src/xeq.c     **** }
 20011              		.loc 1 1237 2 view .LVU5223
1237:src/xeq.c     **** }
 20012              		.loc 1 1237 8 is_stmt 0 view .LVU5224
 20013 00ac FFF7FEFF 		bl	get_reg_n
 20014              	.LVL1568:
1237:src/xeq.c     **** }
 20015              		.loc 1 1237 2 view .LVU5225
 20016 00b0 6946     		mov	r1, sp
 20017 00b2 0822     		movs	r2, #8
 20018 00b4 FFF7FEFF 		bl	xcopy
 20019              	.LVL1569:
1237:src/xeq.c     **** }
 20020              		.loc 1 1237 2 view .LVU5226
 20021              	.LBE2946:
 20022              	.LBE2944:
 20023              	.LBE2935:
3437:src/xeq.c     **** 
 20024              		.loc 1 3437 1 view .LVU5227
 20025 00b8 02B0     		add	sp, sp, #8
 20026              		.cfi_remember_state
 20027              		.cfi_def_cfa_offset 24
 20028              		@ sp needed
 20029 00ba BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20030              	.LVL1570:
 20031              	.L1420:
 20032              		.cfi_restore_state
3436:src/xeq.c     **** }
 20033              		.loc 1 3436 6 is_stmt 1 view .LVU5228
3436:src/xeq.c     **** }
 20034              		.loc 1 3436 21 is_stmt 0 view .LVU5229
 20035 00be 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 20036 00c2 60F30502 		bfi	r2, r0, #0, #6
 20037              	.LVL1571:
3436:src/xeq.c     **** }
 20038              		.loc 1 3436 21 view .LVU5230
 20039 00c6 83F8E927 		strb	r2, [r3, #2025]
3437:src/xeq.c     **** 
 20040              		.loc 1 3437 1 view .LVU5231
 20041 00ca 02B0     		add	sp, sp, #8
ARM GAS  /tmp/ccjeMhND.s 			page 534


 20042              		.cfi_remember_state
 20043              		.cfi_def_cfa_offset 24
 20044              		@ sp needed
 20045 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20046              	.LVL1572:
 20047              	.L1424:
 20048              		.cfi_restore_state
 20049              	.LBB2948:
 20050              	.LBB2947:
 20051              	.LBB2940:
 705:src/xeq.c     **** 	return 8;
 20052              		.loc 1 705 10 view .LVU5232
 20053 00d0 0427     		movs	r7, #4
 20054 00d2 AAE7     		b	.L1421
 20055              	.L1429:
 704:src/xeq.c     **** 		return 4;
 20056              		.loc 1 704 44 view .LVU5233
 20057 00d4 034A     		ldr	r2, .L1430
 704:src/xeq.c     **** 		return 4;
 20058              		.loc 1 704 41 view .LVU5234
 20059 00d6 92F90120 		ldrsb	r2, [r2, #1]
 705:src/xeq.c     **** 	return 8;
 20060              		.loc 1 705 10 view .LVU5235
 20061 00da 002A     		cmp	r2, #0
 20062 00dc B4BF     		ite	lt
 20063 00de 0827     		movlt	r7, #8
 20064 00e0 0427     		movge	r7, #4
 20065 00e2 A2E7     		b	.L1421
 20066              	.L1431:
 20067              		.align	2
 20068              	.L1430:
 20069 00e4 00000000 		.word	XromParams
 20070 00e8 00000000 		.word	main_ram
 20071              	.LBE2940:
 20072              	.LBE2947:
 20073              	.LBE2948:
 20074              		.cfi_endproc
 20075              	.LFE198:
 20077              		.section	.text.get_maxdenom,"ax",%progbits
 20078              		.align	1
 20079              		.p2align 2,,3
 20080              		.global	get_maxdenom
 20081              		.syntax unified
 20082              		.thumb
 20083              		.thumb_func
 20084              		.fpu fpv4-sp-d16
 20086              	get_maxdenom:
 20087              	.LVL1573:
 20088              	.LFB199:
3443:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
 20089              		.loc 1 3443 33 is_stmt 1 view -0
 20090              		.cfi_startproc
 20091              		@ args = 0, pretend = 0, frame = 0
 20092              		@ frame_needed = 0, uses_anonymous_args = 0
 20093              		@ link register save eliminated.
3444:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 20094              		.loc 1 3444 2 view .LVU5237
ARM GAS  /tmp/ccjeMhND.s 			page 535


3444:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 20095              		.loc 1 3444 32 is_stmt 0 view .LVU5238
 20096 0000 064B     		ldr	r3, .L1434
 20097 0002 1B68     		ldr	r3, [r3]
 20098 0004 D3F8E417 		ldr	r1, [r3, #2020]
3445:src/xeq.c     **** }
 20099              		.loc 1 3445 2 view .LVU5239
 20100 0008 42F20F73 		movw	r3, #9999
3444:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 20101              		.loc 1 3444 32 view .LVU5240
 20102 000c C1F38D11 		ubfx	r1, r1, #6, #14
 20103              	.LVL1574:
3445:src/xeq.c     **** }
 20104              		.loc 1 3445 2 is_stmt 1 view .LVU5241
 20105 0010 0029     		cmp	r1, #0
 20106 0012 08BF     		it	eq
 20107 0014 1946     		moveq	r1, r3
 20108 0016 FFF7FEBF 		b	int_to_dn
 20109              	.LVL1575:
 20110              	.L1435:
3445:src/xeq.c     **** }
 20111              		.loc 1 3445 2 is_stmt 0 view .LVU5242
 20112 001a 00BF     		.align	2
 20113              	.L1434:
 20114 001c 00000000 		.word	main_ram
 20115              		.cfi_endproc
 20116              	.LFE199:
 20118              		.section	.rodata.op_2frac.str1.4,"aMS",%progbits,1
 20119              		.align	2
 20120              	.LC4:
 20121 0000 792F7820 		.ascii	"y/x =\000"
 20121      3D00
 20122 0006 0000     		.align	2
 20123              	.LC5:
 20124 0008 792F7820 		.ascii	"y/x \007\344<\000"
 20124      07E43C00 
 20125              		.align	2
 20126              	.LC6:
 20127 0010 792F7820 		.ascii	"y/x \007\344>\000"
 20127      07E43E00 
 20128              		.section	.text.op_2frac,"ax",%progbits
 20129              		.align	1
 20130              		.p2align 2,,3
 20131              		.global	op_2frac
 20132              		.syntax unified
 20133              		.thumb
 20134              		.thumb_func
 20135              		.fpu fpv4-sp-d16
 20137              	op_2frac:
 20138              	.LVL1576:
 20139              	.LFB200:
3448:src/xeq.c     **** 	decNumber z, n, d, t;
 20140              		.loc 1 3448 30 is_stmt 1 view -0
 20141              		.cfi_startproc
 20142              		@ args = 0, pretend = 0, frame = 144
 20143              		@ frame_needed = 0, uses_anonymous_args = 0
3449:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 536


 20144              		.loc 1 3449 2 view .LVU5244
3451:src/xeq.c     **** 		setX_int(1);
 20145              		.loc 1 3451 2 view .LVU5245
3451:src/xeq.c     **** 		setX_int(1);
 20146              		.loc 1 3451 6 is_stmt 0 view .LVU5246
 20147 0000 234B     		ldr	r3, .L1448
3448:src/xeq.c     **** 	decNumber z, n, d, t;
 20148              		.loc 1 3448 30 view .LVU5247
 20149 0002 00B5     		push	{lr}
 20150              		.cfi_def_cfa_offset 4
 20151              		.cfi_offset 14, -4
3451:src/xeq.c     **** 		setX_int(1);
 20152              		.loc 1 3451 6 view .LVU5248
 20153 0004 1B68     		ldr	r3, [r3]
 20154 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3451:src/xeq.c     **** 		setX_int(1);
 20155              		.loc 1 3451 5 view .LVU5249
 20156 000a DA07     		lsls	r2, r3, #31
3448:src/xeq.c     **** 	decNumber z, n, d, t;
 20157              		.loc 1 3448 30 view .LVU5250
 20158 000c A5B0     		sub	sp, sp, #148
 20159              		.cfi_def_cfa_offset 152
3451:src/xeq.c     **** 		setX_int(1);
 20160              		.loc 1 3451 5 view .LVU5251
 20161 000e 2BD4     		bmi	.L1446
3456:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
 20162              		.loc 1 3456 2 is_stmt 1 view .LVU5252
 20163              	.LVL1577:
 20164              	.LBB2949:
 20165              	.LBI2949:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 20166              		.loc 1 813 6 view .LVU5253
 20167              	.LBB2950:
 814:src/xeq.c     **** }
 20168              		.loc 1 814 2 view .LVU5254
 20169 0010 6521     		movs	r1, #101
 20170 0012 6846     		mov	r0, sp
 20171              	.LVL1578:
 814:src/xeq.c     **** }
 20172              		.loc 1 814 2 is_stmt 0 view .LVU5255
 20173 0014 FFF7FEFF 		bl	getRegister
 20174              	.LVL1579:
 814:src/xeq.c     **** }
 20175              		.loc 1 814 2 view .LVU5256
 20176              	.LBE2950:
 20177              	.LBE2949:
3457:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
 20178              		.loc 1 3457 2 is_stmt 1 view .LVU5257
 20179 0018 6A46     		mov	r2, sp
 20180 001a 12A9     		add	r1, sp, #72
 20181 001c 09A8     		add	r0, sp, #36
 20182 001e FFF7FEFF 		bl	decNumber2Fraction
 20183              	.LVL1580:
3458:src/xeq.c     **** 	if (State2.runmode) {
 20184              		.loc 1 3458 2 view .LVU5258
 20185              	.LBB2951:
 20186              	.LBI2951:
ARM GAS  /tmp/ccjeMhND.s 			page 537


 840:src/xeq.c     **** 	setX(x);
 20187              		.loc 1 840 6 view .LVU5259
 20188              	.LBE2951:
 841:src/xeq.c     **** 	setY(y);
 20189              		.loc 1 841 2 view .LVU5260
 20190              	.LBB2956:
 20191              	.LBB2952:
 20192              	.LBI2952:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 20193              		.loc 1 809 6 view .LVU5261
 20194              	.LBB2953:
 810:src/xeq.c     **** }
 20195              		.loc 1 810 2 view .LVU5262
 20196 0022 12A9     		add	r1, sp, #72
 20197              	.LVL1581:
 810:src/xeq.c     **** }
 20198              		.loc 1 810 2 is_stmt 0 view .LVU5263
 20199 0024 6420     		movs	r0, #100
 20200 0026 FFF7FEFF 		bl	setRegister
 20201              	.LVL1582:
 810:src/xeq.c     **** }
 20202              		.loc 1 810 2 view .LVU5264
 20203              	.LBE2953:
 20204              	.LBE2952:
 20205              	.LBE2956:
 842:src/xeq.c     **** }
 20206              		.loc 1 842 2 is_stmt 1 view .LVU5265
 20207              	.LBB2957:
 20208              	.LBB2954:
 20209              	.LBI2954:
 817:src/xeq.c     **** 	setRegister(regY_idx, y);
 20210              		.loc 1 817 6 view .LVU5266
 20211              	.LBB2955:
 818:src/xeq.c     **** }
 20212              		.loc 1 818 2 view .LVU5267
 20213 002a 09A9     		add	r1, sp, #36
 20214              	.LVL1583:
 818:src/xeq.c     **** }
 20215              		.loc 1 818 2 is_stmt 0 view .LVU5268
 20216 002c 6520     		movs	r0, #101
 20217 002e FFF7FEFF 		bl	setRegister
 20218              	.LVL1584:
 818:src/xeq.c     **** }
 20219              		.loc 1 818 2 view .LVU5269
 20220              	.LBE2955:
 20221              	.LBE2954:
 20222              	.LBE2957:
3459:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 20223              		.loc 1 3459 2 is_stmt 1 view .LVU5270
3459:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 20224              		.loc 1 3459 6 is_stmt 0 view .LVU5271
 20225 0032 184B     		ldr	r3, .L1448+4
 20226 0034 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3459:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 20227              		.loc 1 3459 5 view .LVU5272
 20228 0036 5B06     		lsls	r3, r3, #25
 20229 0038 02D4     		bmi	.L1447
ARM GAS  /tmp/ccjeMhND.s 			page 538


3475:src/xeq.c     **** 
 20230              		.loc 1 3475 1 view .LVU5273
 20231 003a 25B0     		add	sp, sp, #148
 20232              		.cfi_remember_state
 20233              		.cfi_def_cfa_offset 4
 20234              		@ sp needed
 20235 003c 5DF804FB 		ldr	pc, [sp], #4
 20236              	.L1447:
 20237              		.cfi_restore_state
3460:src/xeq.c     **** 		dn_compare(&n, &t, &z);
 20238              		.loc 1 3460 3 is_stmt 1 view .LVU5274
 20239 0040 12AA     		add	r2, sp, #72
 20240 0042 09A9     		add	r1, sp, #36
 20241 0044 1BA8     		add	r0, sp, #108
 20242 0046 FFF7FEFF 		bl	dn_divide
 20243              	.LVL1585:
3461:src/xeq.c     **** 		if (dn_eq0(&n))
 20244              		.loc 1 3461 3 view .LVU5275
 20245 004a 6A46     		mov	r2, sp
 20246 004c 1BA9     		add	r1, sp, #108
 20247 004e 09A8     		add	r0, sp, #36
 20248 0050 FFF7FEFF 		bl	dn_compare
 20249              	.LVL1586:
3462:src/xeq.c     **** 			DispMsg = "y/x =";
 20250              		.loc 1 3462 3 view .LVU5276
3462:src/xeq.c     **** 			DispMsg = "y/x =";
 20251              		.loc 1 3462 7 is_stmt 0 view .LVU5277
 20252 0054 09A8     		add	r0, sp, #36
 20253 0056 FFF7FEFF 		bl	dn_eq0
 20254              	.LVL1587:
3462:src/xeq.c     **** 			DispMsg = "y/x =";
 20255              		.loc 1 3462 6 view .LVU5278
 20256 005a 60B1     		cbz	r0, .L1440
3463:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 20257              		.loc 1 3463 4 is_stmt 1 view .LVU5279
3463:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 20258              		.loc 1 3463 12 is_stmt 0 view .LVU5280
 20259 005c 0E4B     		ldr	r3, .L1448+8
 20260 005e 0F4A     		ldr	r2, .L1448+12
 20261 0060 1A60     		str	r2, [r3]
3475:src/xeq.c     **** 
 20262              		.loc 1 3475 1 view .LVU5281
 20263 0062 25B0     		add	sp, sp, #148
 20264              		.cfi_remember_state
 20265              		.cfi_def_cfa_offset 4
 20266              		@ sp needed
 20267 0064 5DF804FB 		ldr	pc, [sp], #4
 20268              	.LVL1588:
 20269              	.L1446:
 20270              		.cfi_restore_state
3452:src/xeq.c     **** 		return;
 20271              		.loc 1 3452 3 is_stmt 1 view .LVU5282
 20272 0068 0120     		movs	r0, #1
 20273              	.LVL1589:
3452:src/xeq.c     **** 		return;
 20274              		.loc 1 3452 3 is_stmt 0 view .LVU5283
 20275 006a 0021     		movs	r1, #0
ARM GAS  /tmp/ccjeMhND.s 			page 539


 20276 006c FFF7FEFF 		bl	setX_int
 20277              	.LVL1590:
3453:src/xeq.c     **** 	}
 20278              		.loc 1 3453 3 is_stmt 1 view .LVU5284
3475:src/xeq.c     **** 
 20279              		.loc 1 3475 1 is_stmt 0 view .LVU5285
 20280 0070 25B0     		add	sp, sp, #148
 20281              		.cfi_remember_state
 20282              		.cfi_def_cfa_offset 4
 20283              		@ sp needed
 20284 0072 5DF804FB 		ldr	pc, [sp], #4
 20285              	.L1440:
 20286              		.cfi_restore_state
3464:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 20287              		.loc 1 3464 8 is_stmt 1 view .LVU5286
3464:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 20288              		.loc 1 3464 11 is_stmt 0 view .LVU5287
 20289 0076 9DF92C30 		ldrsb	r3, [sp, #44]
 20290 007a 002B     		cmp	r3, #0
3466:src/xeq.c     **** 		else
 20291              		.loc 1 3466 12 view .LVU5288
 20292 007c B8BF     		it	lt
 20293 007e 084A     		ldrlt	r2, .L1448+16
 20294 0080 054B     		ldr	r3, .L1448+8
3466:src/xeq.c     **** 		else
 20295              		.loc 1 3466 4 is_stmt 1 view .LVU5289
3468:src/xeq.c     **** #else
 20296              		.loc 1 3468 4 view .LVU5290
3468:src/xeq.c     **** #else
 20297              		.loc 1 3468 12 is_stmt 0 view .LVU5291
 20298 0082 A8BF     		it	ge
 20299 0084 074A     		ldrge	r2, .L1448+20
 20300 0086 1A60     		str	r2, [r3]
3475:src/xeq.c     **** 
 20301              		.loc 1 3475 1 view .LVU5292
 20302 0088 25B0     		add	sp, sp, #148
 20303              		.cfi_def_cfa_offset 4
 20304              		@ sp needed
 20305 008a 5DF804FB 		ldr	pc, [sp], #4
 20306              	.L1449:
 20307 008e 00BF     		.align	2
 20308              	.L1448:
 20309 0090 00000000 		.word	main_ram
 20310 0094 00000000 		.word	StateWhileOn
 20311 0098 00000000 		.word	DispMsg
 20312 009c 00000000 		.word	.LC4
 20313 00a0 08000000 		.word	.LC5
 20314 00a4 10000000 		.word	.LC6
 20315              		.cfi_endproc
 20316              	.LFE200:
 20318              		.section	.text.op_fracdenom,"ax",%progbits
 20319              		.align	1
 20320              		.p2align 2,,3
 20321              		.global	op_fracdenom
 20322              		.syntax unified
 20323              		.thumb
 20324              		.thumb_func
ARM GAS  /tmp/ccjeMhND.s 			page 540


 20325              		.fpu fpv4-sp-d16
 20327              	op_fracdenom:
 20328              	.LVL1591:
 20329              	.LFB201:
3477:src/xeq.c     **** 	int s;
 20330              		.loc 1 3477 34 is_stmt 1 view -0
 20331              		.cfi_startproc
 20332              		@ args = 0, pretend = 0, frame = 8
 20333              		@ frame_needed = 0, uses_anonymous_args = 0
3478:src/xeq.c     **** 	unsigned long long int i;
 20334              		.loc 1 3478 2 view .LVU5294
3479:src/xeq.c     **** 
 20335              		.loc 1 3479 2 view .LVU5295
3481:src/xeq.c     **** 	if (i > 9999)
 20336              		.loc 1 3481 2 view .LVU5296
3477:src/xeq.c     **** 	int s;
 20337              		.loc 1 3477 34 is_stmt 0 view .LVU5297
 20338 0000 2DE90048 		push	{fp, lr}
 20339              		.cfi_def_cfa_offset 8
 20340              		.cfi_offset 11, -8
 20341              		.cfi_offset 14, -4
 20342 0004 84B0     		sub	sp, sp, #16
 20343              		.cfi_def_cfa_offset 24
 20344              	.LVL1592:
 20345              	.LBB2958:
 20346              	.LBI2958:
1260:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 20347              		.loc 1 1260 24 is_stmt 1 view .LVU5298
 20348              	.LBB2959:
1261:src/xeq.c     **** }
 20349              		.loc 1 1261 2 view .LVU5299
1261:src/xeq.c     **** }
 20350              		.loc 1 1261 9 is_stmt 0 view .LVU5300
 20351 0006 03A9     		add	r1, sp, #12
 20352              	.LVL1593:
1261:src/xeq.c     **** }
 20353              		.loc 1 1261 9 view .LVU5301
 20354 0008 6420     		movs	r0, #100
 20355              	.LVL1594:
1261:src/xeq.c     **** }
 20356              		.loc 1 1261 9 view .LVU5302
 20357 000a FFF7FEFF 		bl	get_reg_n_int_sgn
 20358              	.LVL1595:
1261:src/xeq.c     **** }
 20359              		.loc 1 1261 9 view .LVU5303
 20360 000e 8C46     		mov	ip, r1
 20361              	.LVL1596:
1261:src/xeq.c     **** }
 20362              		.loc 1 1261 9 view .LVU5304
 20363              	.LBE2959:
 20364              	.LBE2958:
3482:src/xeq.c     **** 		UState.denom_max = 0;
 20365              		.loc 1 3482 5 view .LVU5305
 20366 0010 0021     		movs	r1, #0
 20367              	.LBB2961:
 20368              	.LBB2960:
1261:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 541


 20369              		.loc 1 1261 9 view .LVU5306
 20370 0012 8346     		mov	fp, r0
 20371              	.LVL1597:
1261:src/xeq.c     **** }
 20372              		.loc 1 1261 9 view .LVU5307
 20373              	.LBE2960:
 20374              	.LBE2961:
3482:src/xeq.c     **** 		UState.denom_max = 0;
 20375              		.loc 1 3482 2 is_stmt 1 view .LVU5308
3482:src/xeq.c     **** 		UState.denom_max = 0;
 20376              		.loc 1 3482 5 is_stmt 0 view .LVU5309
 20377 0014 6145     		cmp	r1, ip
 20378 0016 42F20F70 		movw	r0, #9999
 20379 001a 08BF     		it	eq
 20380 001c 5845     		cmpeq	r0, fp
 20381 001e 0AD2     		bcs	.L1451
3483:src/xeq.c     **** 	else if (i != 1)
 20382              		.loc 1 3483 3 is_stmt 1 view .LVU5310
3483:src/xeq.c     **** 	else if (i != 1)
 20383              		.loc 1 3483 20 is_stmt 0 view .LVU5311
 20384 0020 174B     		ldr	r3, .L1455
 20385 0022 1B68     		ldr	r3, [r3]
 20386 0024 D3F8E427 		ldr	r2, [r3, #2020]
 20387 0028 6FF39312 		bfc	r2, #6, #14
 20388 002c C3F8E427 		str	r2, [r3, #2020]
3490:src/xeq.c     **** 
 20389              		.loc 1 3490 1 view .LVU5312
 20390 0030 04B0     		add	sp, sp, #16
 20391              		.cfi_remember_state
 20392              		.cfi_def_cfa_offset 8
 20393              		@ sp needed
 20394 0032 BDE80088 		pop	{fp, pc}
 20395              	.LVL1598:
 20396              	.L1451:
 20397              		.cfi_restore_state
3484:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 20398              		.loc 1 3484 7 is_stmt 1 view .LVU5313
3484:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 20399              		.loc 1 3484 10 is_stmt 0 view .LVU5314
 20400 0036 BCF1000F 		cmp	ip, #0
 20401 003a 08BF     		it	eq
 20402 003c BBF1010F 		cmpeq	fp, #1
 20403 0040 0AD0     		beq	.L1453
3485:src/xeq.c     **** 	else {
 20404              		.loc 1 3485 3 is_stmt 1 view .LVU5315
3485:src/xeq.c     **** 	else {
 20405              		.loc 1 3485 20 is_stmt 0 view .LVU5316
 20406 0042 0F4B     		ldr	r3, .L1455
 20407 0044 1B68     		ldr	r3, [r3]
 20408 0046 D3F8E417 		ldr	r1, [r3, #2020]
 20409 004a 6BF39311 		bfi	r1, fp, #6, #14
 20410 004e C3F8E417 		str	r1, [r3, #2020]
3490:src/xeq.c     **** 
 20411              		.loc 1 3490 1 view .LVU5317
 20412 0052 04B0     		add	sp, sp, #16
 20413              		.cfi_remember_state
 20414              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccjeMhND.s 			page 542


 20415              		@ sp needed
 20416 0054 BDE80088 		pop	{fp, pc}
 20417              	.LVL1599:
 20418              	.L1453:
 20419              		.cfi_restore_state
3487:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
 20420              		.loc 1 3487 3 is_stmt 1 view .LVU5318
 20421              	.LBB2962:
 20422              	.LBI2962:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 20423              		.loc 1 773 6 view .LVU5319
 20424              	.LBB2963:
 774:src/xeq.c     **** }
 20425              		.loc 1 774 2 view .LVU5320
 20426 0058 6421     		movs	r1, #100
 20427 005a 6C20     		movs	r0, #108
 20428 005c FFF7FEFF 		bl	copyreg_n
 20429              	.LVL1600:
 20430              	.LBE2963:
 20431              	.LBE2962:
3488:src/xeq.c     **** 	}
 20432              		.loc 1 3488 3 view .LVU5321
 20433              	.LBB2964:
 20434              	.LBI2964:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 20435              		.loc 1 1323 6 view .LVU5322
 20436              	.LBB2965:
1324:src/xeq.c     **** }
 20437              		.loc 1 1324 2 view .LVU5323
 20438              	.LBE2965:
 20439              	.LBE2964:
3488:src/xeq.c     **** 	}
 20440              		.loc 1 3488 22 is_stmt 0 view .LVU5324
 20441 0060 074B     		ldr	r3, .L1455
 20442              	.LVL1601:
3488:src/xeq.c     **** 	}
 20443              		.loc 1 3488 22 view .LVU5325
 20444 0062 1B68     		ldr	r3, [r3]
 20445              	.LVL1602:
3488:src/xeq.c     **** 	}
 20446              		.loc 1 3488 22 view .LVU5326
 20447 0064 D3F8E427 		ldr	r2, [r3, #2020]
 20448              	.LBB2968:
 20449              	.LBB2966:
1324:src/xeq.c     **** }
 20450              		.loc 1 1324 2 view .LVU5327
 20451 0068 0021     		movs	r1, #0
 20452              	.LBE2966:
 20453              	.LBE2968:
3488:src/xeq.c     **** 	}
 20454              		.loc 1 3488 22 view .LVU5328
 20455 006a C2F38D12 		ubfx	r2, r2, #6, #14
 20456              	.LBB2969:
 20457              	.LBB2967:
1324:src/xeq.c     **** }
 20458              		.loc 1 1324 2 view .LVU5329
 20459 006e 92B2     		uxth	r2, r2
ARM GAS  /tmp/ccjeMhND.s 			page 543


 20460 0070 0023     		movs	r3, #0
 20461              	.LVL1603:
1324:src/xeq.c     **** }
 20462              		.loc 1 1324 2 view .LVU5330
 20463 0072 0091     		str	r1, [sp]
 20464              	.LVL1604:
1324:src/xeq.c     **** }
 20465              		.loc 1 1324 2 view .LVU5331
 20466 0074 6420     		movs	r0, #100
 20467 0076 FFF7FEFF 		bl	set_reg_n_int_sgn
 20468              	.LVL1605:
1324:src/xeq.c     **** }
 20469              		.loc 1 1324 2 view .LVU5332
 20470              	.LBE2967:
 20471              	.LBE2969:
3490:src/xeq.c     **** 
 20472              		.loc 1 3490 1 view .LVU5333
 20473 007a 04B0     		add	sp, sp, #16
 20474              		.cfi_def_cfa_offset 8
 20475              		@ sp needed
 20476 007c BDE80088 		pop	{fp, pc}
 20477              	.LVL1606:
 20478              	.L1456:
3490:src/xeq.c     **** 
 20479              		.loc 1 3490 1 view .LVU5334
 20480              		.align	2
 20481              	.L1455:
 20482 0080 00000000 		.word	main_ram
 20483              		.cfi_endproc
 20484              	.LFE201:
 20486              		.section	.text.op_float,"ax",%progbits
 20487              		.align	1
 20488              		.p2align 2,,3
 20489              		.global	op_float
 20490              		.syntax unified
 20491              		.thumb
 20492              		.thumb_func
 20493              		.fpu fpv4-sp-d16
 20495              	op_float:
 20496              	.LVL1607:
 20497              	.LFB202:
3498:src/xeq.c     **** 
 20498              		.loc 1 3498 30 is_stmt 1 view -0
 20499              		.cfi_startproc
 20500              		@ args = 0, pretend = 0, frame = 40
 20501              		@ frame_needed = 0, uses_anonymous_args = 0
3500:src/xeq.c     **** 		int i;
 20502              		.loc 1 3500 2 view .LVU5336
3498:src/xeq.c     **** 
 20503              		.loc 1 3498 30 is_stmt 0 view .LVU5337
 20504 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 20505              		.cfi_def_cfa_offset 28
 20506              		.cfi_offset 4, -28
 20507              		.cfi_offset 5, -24
 20508              		.cfi_offset 6, -20
 20509              		.cfi_offset 7, -16
 20510              		.cfi_offset 8, -12
ARM GAS  /tmp/ccjeMhND.s 			page 544


 20511              		.cfi_offset 9, -8
 20512              		.cfi_offset 14, -4
3500:src/xeq.c     **** 		int i;
 20513              		.loc 1 3500 6 view .LVU5338
 20514 0004 2F4F     		ldr	r7, .L1469
 20515 0006 3B68     		ldr	r3, [r7]
 20516 0008 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3500:src/xeq.c     **** 		int i;
 20517              		.loc 1 3500 5 view .LVU5339
 20518 000c D207     		lsls	r2, r2, #31
3498:src/xeq.c     **** 
 20519              		.loc 1 3498 30 view .LVU5340
 20520 000e 8BB0     		sub	sp, sp, #44
 20521              		.cfi_def_cfa_offset 72
3498:src/xeq.c     **** 
 20522              		.loc 1 3498 30 view .LVU5341
 20523 0010 0646     		mov	r6, r0
3500:src/xeq.c     **** 		int i;
 20524              		.loc 1 3500 5 view .LVU5342
 20525 0012 27D5     		bpl	.L1458
 20526              	.LBB2970:
3501:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
 20527              		.loc 1 3501 3 is_stmt 1 view .LVU5343
3502:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20528              		.loc 1 3502 3 view .LVU5344
3502:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20529              		.loc 1 3502 33 is_stmt 0 view .LVU5345
 20530 0014 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
3502:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20531              		.loc 1 3502 26 view .LVU5346
 20532 0018 2B4A     		ldr	r2, .L1469+4
3502:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20533              		.loc 1 3502 33 view .LVU5347
 20534 001a C3F3C003 		ubfx	r3, r3, #3, #1
3503:src/xeq.c     **** 			if (mask & 1) {
 20535              		.loc 1 3503 10 view .LVU5348
 20536 001e 6424     		movs	r4, #100
3502:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20537              		.loc 1 3502 7 view .LVU5349
 20538 0020 32F81350 		ldrh	r5, [r2, r3, lsl #1]
 20539              	.LVL1608:
3503:src/xeq.c     **** 			if (mask & 1) {
 20540              		.loc 1 3503 3 is_stmt 1 view .LVU5350
3503:src/xeq.c     **** 			if (mask & 1) {
 20541              		.loc 1 3503 22 view .LVU5351
 20542              	.LBB2971:
 20543              	.LBB2972:
 933:src/xeq.c     **** }
 20544              		.loc 1 933 24 is_stmt 0 view .LVU5352
 20545 0024 44F20108 		movw	r8, #16385
 20546 0028 0CE0     		b	.L1461
 20547              	.LVL1609:
 20548              	.L1459:
 933:src/xeq.c     **** }
 20549              		.loc 1 933 24 view .LVU5353
 20550 002a 3B68     		ldr	r3, [r7]
 20551 002c B3F8E837 		ldrh	r3, [r3, #2024]
ARM GAS  /tmp/ccjeMhND.s 			page 545


 20552              	.LBE2972:
 20553              	.LBE2971:
3508:src/xeq.c     **** 				// expand the other registers which have been left
 20554              		.loc 1 3508 12 view .LVU5354
 20555 0030 08EA0303 		and	r3, r8, r3
 20556 0034 B3F5804F 		cmp	r3, #16384
 20557 0038 32D0     		beq	.L1468
 20558              	.L1460:
3503:src/xeq.c     **** 			if (mask & 1) {
 20559              		.loc 1 3503 37 is_stmt 1 discriminator 2 view .LVU5355
 20560 003a 0134     		adds	r4, r4, #1
 20561              	.LVL1610:
3503:src/xeq.c     **** 			if (mask & 1) {
 20562              		.loc 1 3503 3 is_stmt 0 discriminator 2 view .LVU5356
 20563 003c 702C     		cmp	r4, #112
3503:src/xeq.c     **** 			if (mask & 1) {
 20564              		.loc 1 3503 47 discriminator 2 view .LVU5357
 20565 003e 4FEA6505 		asr	r5, r5, #1
 20566              	.LVL1611:
3503:src/xeq.c     **** 			if (mask & 1) {
 20567              		.loc 1 3503 22 is_stmt 1 discriminator 2 view .LVU5358
3503:src/xeq.c     **** 			if (mask & 1) {
 20568              		.loc 1 3503 3 is_stmt 0 discriminator 2 view .LVU5359
 20569 0042 0FD0     		beq	.L1458
 20570              	.LVL1612:
 20571              	.L1461:
3504:src/xeq.c     **** 				// register belongs to stack
 20572              		.loc 1 3504 4 is_stmt 1 view .LVU5360
3508:src/xeq.c     **** 				// expand the other registers which have been left
 20573              		.loc 1 3508 9 view .LVU5361
 20574              	.LBB2974:
 20575              	.LBI2971:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 20576              		.loc 1 932 5 view .LVU5362
 20577              	.LBB2973:
 933:src/xeq.c     **** }
 20578              		.loc 1 933 2 view .LVU5363
 20579              	.LBE2973:
 20580              	.LBE2974:
3504:src/xeq.c     **** 				// register belongs to stack
 20581              		.loc 1 3504 7 is_stmt 0 view .LVU5364
 20582 0044 EB07     		lsls	r3, r5, #31
 20583 0046 F0D5     		bpl	.L1459
3506:src/xeq.c     **** 			}
 20584              		.loc 1 3506 5 is_stmt 1 view .LVU5365
 20585 0048 A6F1C102 		sub	r2, r6, #193
 20586 004c B2FA82F2 		clz	r2, r2
 20587 0050 2146     		mov	r1, r4
 20588 0052 2046     		mov	r0, r4
 20589 0054 5209     		lsrs	r2, r2, #5
3503:src/xeq.c     **** 			if (mask & 1) {
 20590              		.loc 1 3503 37 is_stmt 0 view .LVU5366
 20591 0056 0134     		adds	r4, r4, #1
 20592              	.LVL1613:
3506:src/xeq.c     **** 			}
 20593              		.loc 1 3506 5 view .LVU5367
 20594 0058 FFF7FEFF 		bl	register_from_int
ARM GAS  /tmp/ccjeMhND.s 			page 546


 20595              	.LVL1614:
3503:src/xeq.c     **** 			if (mask & 1) {
 20596              		.loc 1 3503 37 is_stmt 1 view .LVU5368
3503:src/xeq.c     **** 			if (mask & 1) {
 20597              		.loc 1 3503 3 is_stmt 0 view .LVU5369
 20598 005c 702C     		cmp	r4, #112
3503:src/xeq.c     **** 			if (mask & 1) {
 20599              		.loc 1 3503 47 view .LVU5370
 20600 005e 4FEA6505 		asr	r5, r5, #1
 20601              	.LVL1615:
3503:src/xeq.c     **** 			if (mask & 1) {
 20602              		.loc 1 3503 22 is_stmt 1 view .LVU5371
3503:src/xeq.c     **** 			if (mask & 1) {
 20603              		.loc 1 3503 3 is_stmt 0 view .LVU5372
 20604 0062 EFD1     		bne	.L1461
 20605              	.LVL1616:
 20606              	.L1458:
3503:src/xeq.c     **** 			if (mask & 1) {
 20607              		.loc 1 3503 3 view .LVU5373
 20608              	.LBE2970:
3515:src/xeq.c     **** 		UState.fract = 0;
 20609              		.loc 1 3515 2 is_stmt 1 view .LVU5374
3515:src/xeq.c     **** 		UState.fract = 0;
 20610              		.loc 1 3515 25 is_stmt 0 view .LVU5375
 20611 0064 06F13F03 		add	r3, r6, #63
3515:src/xeq.c     **** 		UState.fract = 0;
 20612              		.loc 1 3515 5 view .LVU5376
 20613 0068 DBB2     		uxtb	r3, r3
 20614 006a 012B     		cmp	r3, #1
 20615 006c 10D9     		bls	.L1462
3516:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 20616              		.loc 1 3516 3 is_stmt 1 view .LVU5377
3516:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 20617              		.loc 1 3516 16 is_stmt 0 view .LVU5378
 20618 006e 3A68     		ldr	r2, [r7]
3517:src/xeq.c     **** 	}
 20619              		.loc 1 3517 14 view .LVU5379
 20620 0070 164B     		ldr	r3, .L1469+8
3516:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 20621              		.loc 1 3516 16 view .LVU5380
 20622 0072 92F8E617 		ldrb	r1, [r2, #2022]	@ zero_extendqisi2
 20623 0076 6FF34511 		bfc	r1, #5, #1
 20624 007a 82F8E617 		strb	r1, [r2, #2022]
3517:src/xeq.c     **** 	}
 20625              		.loc 1 3517 3 is_stmt 1 view .LVU5381
3517:src/xeq.c     **** 	}
 20626              		.loc 1 3517 35 is_stmt 0 view .LVU5382
 20627 007e A6F15C06 		sub	r6, #92
3517:src/xeq.c     **** 	}
 20628              		.loc 1 3517 14 view .LVU5383
 20629 0082 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
3517:src/xeq.c     **** 	}
 20630              		.loc 1 3517 35 view .LVU5384
 20631 0084 B6FA86F6 		clz	r6, r6
 20632 0088 7609     		lsrs	r6, r6, #5
3517:src/xeq.c     **** 	}
 20633              		.loc 1 3517 14 view .LVU5385
ARM GAS  /tmp/ccjeMhND.s 			page 547


 20634 008a 66F30002 		bfi	r2, r6, #0, #1
 20635 008e DA75     		strb	r2, [r3, #23]
 20636              	.L1462:
3519:src/xeq.c     **** }
 20637              		.loc 1 3519 2 is_stmt 1 view .LVU5386
3519:src/xeq.c     **** }
 20638              		.loc 1 3519 14 is_stmt 0 view .LVU5387
 20639 0090 6420     		movs	r0, #100
 20640 0092 FFF7FEFF 		bl	get_reg_n
 20641              	.LVL1617:
3519:src/xeq.c     **** }
 20642              		.loc 1 3519 12 view .LVU5388
 20643 0096 0E4B     		ldr	r3, .L1469+12
 20644 0098 1860     		str	r0, [r3]
3520:src/xeq.c     **** 
 20645              		.loc 1 3520 1 view .LVU5389
 20646 009a 0BB0     		add	sp, sp, #44
 20647              		.cfi_remember_state
 20648              		.cfi_def_cfa_offset 28
 20649              		@ sp needed
 20650 009c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 20651              	.LVL1618:
 20652              	.L1468:
 20653              		.cfi_restore_state
 20654              	.LBB2977:
3511:src/xeq.c     **** 			}
 20655              		.loc 1 3511 5 is_stmt 1 view .LVU5390
3511:src/xeq.c     **** 			}
 20656              		.loc 1 3511 29 is_stmt 0 view .LVU5391
 20657 00a0 2046     		mov	r0, r4
 20658 00a2 FFF7FEFF 		bl	get_reg_n
 20659              	.LVL1619:
3511:src/xeq.c     **** 			}
 20660              		.loc 1 3511 47 view .LVU5392
 20661 00a6 3B68     		ldr	r3, [r7]
 20662 00a8 03F58663 		add	r3, r3, #1072
3511:src/xeq.c     **** 			}
 20663              		.loc 1 3511 29 view .LVU5393
 20664 00ac 8146     		mov	r9, r0
 20665              	.LVL1620:
 20666              	.LBB2975:
 20667              	.LBI2975:
 645:src/xeq.c     **** 	decNumber temp;
 20668              		.loc 1 645 6 is_stmt 1 view .LVU5394
 20669              	.LBB2976:
 646:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 20670              		.loc 1 646 2 view .LVU5395
 647:src/xeq.c     **** }
 20671              		.loc 1 647 2 view .LVU5396
 647:src/xeq.c     **** }
 20672              		.loc 1 647 27 is_stmt 0 view .LVU5397
 20673 00ae 01A9     		add	r1, sp, #4
 20674 00b0 03EBC400 		add	r0, r3, r4, lsl #3
 20675              	.LVL1621:
 647:src/xeq.c     **** }
 20676              		.loc 1 647 27 view .LVU5398
 20677 00b4 FFF7FEFF 		bl	decimal64ToNumber
ARM GAS  /tmp/ccjeMhND.s 			page 548


 20678              	.LVL1622:
 647:src/xeq.c     **** }
 20679              		.loc 1 647 27 view .LVU5399
 20680 00b8 0146     		mov	r1, r0
 647:src/xeq.c     **** }
 20681              		.loc 1 647 2 view .LVU5400
 20682 00ba 4846     		mov	r0, r9
 20683 00bc FFF7FEFF 		bl	packed128_from_number
 20684              	.LVL1623:
 648:src/xeq.c     **** 
 20685              		.loc 1 648 1 view .LVU5401
 20686 00c0 BBE7     		b	.L1460
 20687              	.L1470:
 20688 00c2 00BF     		.align	2
 20689              	.L1469:
 20690 00c4 00000000 		.word	main_ram
 20691 00c8 00000000 		.word	.LANCHOR3
 20692 00cc 00000000 		.word	StateWhileOn
 20693 00d0 00000000 		.word	StackBase
 20694              	.LBE2976:
 20695              	.LBE2975:
 20696              	.LBE2977:
 20697              		.cfi_endproc
 20698              	.LFE202:
 20700              		.section	.text.cmddisp,"ax",%progbits
 20701              		.align	1
 20702              		.p2align 2,,3
 20703              		.global	cmddisp
 20704              		.syntax unified
 20705              		.thumb
 20706              		.thumb_func
 20707              		.fpu fpv4-sp-d16
 20709              	cmddisp:
 20710              	.LVL1624:
 20711              	.LFB168:
2242:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 20712              		.loc 1 2242 46 is_stmt 1 view -0
 20713              		.cfi_startproc
 20714              		@ args = 0, pretend = 0, frame = 0
 20715              		@ frame_needed = 0, uses_anonymous_args = 0
 20716              		@ link register save eliminated.
2244:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
 20717              		.loc 1 2244 2 view .LVU5403
2245:src/xeq.c     **** #ifdef DM42
 20718              		.loc 1 2245 2 view .LVU5404
 20719              	.LBB2986:
 20720              	.LBI2986:
2210:src/xeq.c     **** {
 20721              		.loc 1 2210 5 view .LVU5405
 20722              	.LBB2987:
2212:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 20723              		.loc 1 2212 2 view .LVU5406
2212:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 20724              		.loc 1 2212 17 is_stmt 0 view .LVU5407
 20725 0000 2E4B     		ldr	r3, .L1491
 20726 0002 1A68     		ldr	r2, [r3]
 20727              	.LBE2987:
ARM GAS  /tmp/ccjeMhND.s 			page 549


 20728              	.LBE2986:
2242:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 20729              		.loc 1 2242 46 view .LVU5408
 20730 0004 10B4     		push	{r4}
 20731              		.cfi_def_cfa_offset 4
 20732              		.cfi_offset 4, -4
 20733              	.LBB2989:
 20734              	.LBB2988:
2213:src/xeq.c     **** 
 20735              		.loc 1 2213 23 view .LVU5409
 20736 0006 92F8E747 		ldrb	r4, [r2, #2023]	@ zero_extendqisi2
2212:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 20737              		.loc 1 2212 23 view .LVU5410
 20738 000a 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
2215:src/xeq.c     **** 		dispdigs -= 12;
 20739              		.loc 1 2215 5 view .LVU5411
 20740 000e 04F00F04 		and	r4, r4, #15
 20741 0012 0B2C     		cmp	r4, #11
2212:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 20742              		.loc 1 2212 6 view .LVU5412
 20743 0014 4FEA9313 		lsr	r3, r3, #6
 20744              	.LVL1625:
2213:src/xeq.c     **** 
 20745              		.loc 1 2213 2 is_stmt 1 view .LVU5413
2215:src/xeq.c     **** 		dispdigs -= 12;
 20746              		.loc 1 2215 2 view .LVU5414
2215:src/xeq.c     **** 		dispdigs -= 12;
 20747              		.loc 1 2215 5 is_stmt 0 view .LVU5415
 20748 0018 04D9     		bls	.L1472
2216:src/xeq.c     **** 		dispmode += 4;
 20749              		.loc 1 2216 3 is_stmt 1 view .LVU5416
 20750              	.LVL1626:
2217:src/xeq.c     **** 		if (dispmode >= 6) {
 20751              		.loc 1 2217 3 view .LVU5417
2217:src/xeq.c     **** 		if (dispmode >= 6) {
 20752              		.loc 1 2217 12 is_stmt 0 view .LVU5418
 20753 001a 1C1D     		adds	r4, r3, #4
 20754              	.LVL1627:
2218:src/xeq.c     **** 			dispmode -= 2;
 20755              		.loc 1 2218 3 is_stmt 1 view .LVU5419
2218:src/xeq.c     **** 			dispmode -= 2;
 20756              		.loc 1 2218 6 is_stmt 0 view .LVU5420
 20757 001c 052C     		cmp	r4, #5
2219:src/xeq.c     **** 			dispdigs += 4;
 20758              		.loc 1 2219 4 is_stmt 1 view .LVU5421
2219:src/xeq.c     **** 			dispdigs += 4;
 20759              		.loc 1 2219 13 is_stmt 0 view .LVU5422
 20760 001e CCBF     		ite	gt
 20761 0020 0233     		addgt	r3, r3, #2
 20762              	.LVL1628:
2220:src/xeq.c     **** 		}
 20763              		.loc 1 2220 4 is_stmt 1 view .LVU5423
2220:src/xeq.c     **** 		}
 20764              		.loc 1 2220 4 is_stmt 0 view .LVU5424
 20765 0022 2346     		movle	r3, r4
 20766              	.LVL1629:
 20767              	.L1472:
ARM GAS  /tmp/ccjeMhND.s 			page 550


2223:src/xeq.c     **** 	return dispmode;
 20768              		.loc 1 2223 2 is_stmt 1 view .LVU5425
2224:src/xeq.c     **** }
 20769              		.loc 1 2224 2 view .LVU5426
2224:src/xeq.c     **** }
 20770              		.loc 1 2224 2 is_stmt 0 view .LVU5427
 20771              	.LBE2988:
 20772              	.LBE2989:
2247:src/xeq.c     **** 	case RARG_STD:
 20773              		.loc 1 2247 2 is_stmt 1 view .LVU5428
 20774 0024 4F29     		cmp	r1, #79
 20775 0026 1DD8     		bhi	.L1473
 20776 0028 4B29     		cmp	r1, #75
 20777 002a 3ED9     		bls	.L1474
 20778 002c 4D39     		subs	r1, r1, #77
 20779              	.LVL1630:
2247:src/xeq.c     **** 	case RARG_STD:
 20780              		.loc 1 2247 2 is_stmt 0 view .LVU5429
 20781 002e 0229     		cmp	r1, #2
 20782 0030 41D8     		bhi	.L1475
 20783 0032 DFE801F0 		tbb	[pc, r1]
 20784              	.LVL1631:
 20785              	.L1477:
 20786 0036 15       		.byte	(.L1479-.L1477)/2
 20787 0037 02       		.byte	(.L1486-.L1477)/2
 20788 0038 38       		.byte	(.L1476-.L1477)/2
 20789 0039 00       		.p2align 1
 20790              	.L1486:
2247:src/xeq.c     **** 	case RARG_STD:
 20791              		.loc 1 2247 2 view .LVU5430
 20792 003a 0223     		movs	r3, #2
 20793              	.L1478:
2280:src/xeq.c     **** #else
 20794              		.loc 1 2280 2 is_stmt 1 view .LVU5431
 20795 003c 0146     		mov	r1, r0
 20796              	.LVL1632:
 20797              	.LBB2990:
 20798              	.LBI2990:
2227:src/xeq.c     **** {
 20799              		.loc 1 2227 6 view .LVU5432
 20800              	.LBB2991:
2229:src/xeq.c     **** 		dispmode -= 4;
 20801              		.loc 1 2229 2 view .LVU5433
 20802              	.L1483:
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 20803              		.loc 1 2237 2 view .LVU5434
2238:src/xeq.c     **** }
 20804              		.loc 1 2238 2 view .LVU5435
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 20805              		.loc 1 2237 18 is_stmt 0 view .LVU5436
 20806 003e B2F8E607 		ldrh	r0, [r2, #2022]
 20807              	.LVL1633:
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 20808              		.loc 1 2237 18 view .LVU5437
 20809              	.LBE2991:
 20810              	.LBE2990:
2287:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 551


 20811              		.loc 1 2287 1 view .LVU5438
 20812 0042 5DF8044B 		ldr	r4, [sp], #4
 20813              		.cfi_remember_state
 20814              		.cfi_restore 4
 20815              		.cfi_def_cfa_offset 0
 20816              	.LBB2995:
 20817              	.LBB2992:
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 20818              		.loc 1 2237 18 view .LVU5439
 20819 0046 01F00F01 		and	r1, r1, #15
 20820              	.LVL1634:
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 20821              		.loc 1 2237 18 view .LVU5440
 20822 004a 9B01     		lsls	r3, r3, #6
 20823 004c 43EA0123 		orr	r3, r3, r1, lsl #8
 20824 0050 20F47C61 		bic	r1, r0, #4032
 20825 0054 0B43     		orrs	r3, r3, r1
 20826 0056 A2F8E637 		strh	r3, [r2, #2022]	@ movhi
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 20827              		.loc 1 2237 18 view .LVU5441
 20828              	.LBE2992:
 20829              	.LBE2995:
2286:src/xeq.c     **** }
 20830              		.loc 1 2286 2 is_stmt 1 view .LVU5442
 20831 005a 5B20     		movs	r0, #91
 20832 005c FFF7FEBF 		b	op_float
 20833              	.LVL1635:
 20834              	.L1479:
 20835              		.cfi_restore_state
2247:src/xeq.c     **** 	case RARG_STD:
 20836              		.loc 1 2247 2 is_stmt 0 view .LVU5443
 20837 0060 0123     		movs	r3, #1
 20838 0062 EBE7     		b	.L1478
 20839              	.LVL1636:
 20840              	.L1473:
2247:src/xeq.c     **** 	case RARG_STD:
 20841              		.loc 1 2247 2 view .LVU5444
 20842 0064 8D29     		cmp	r1, #141
 20843 0066 0CD0     		beq	.L1487
 20844 0068 8E29     		cmp	r1, #142
 20845 006a 08BF     		it	eq
 20846 006c 0523     		moveq	r3, #5
 20847              	.LVL1637:
2247:src/xeq.c     **** 	case RARG_STD:
 20848              		.loc 1 2247 2 view .LVU5445
 20849 006e 1CD1     		bne	.L1474
 20850              	.LVL1638:
 20851              	.L1480:
2268:src/xeq.c     **** 	  report_err(ERR_RANGE);
 20852              		.loc 1 2268 54 discriminator 1 view .LVU5446
 20853 0070 0728     		cmp	r0, #7
 20854 0072 0AD8     		bhi	.L1490
 20855              	.L1481:
2280:src/xeq.c     **** #else
 20856              		.loc 1 2280 2 is_stmt 1 view .LVU5447
 20857              	.LVL1639:
 20858              	.LBB2996:
ARM GAS  /tmp/ccjeMhND.s 			page 552


2227:src/xeq.c     **** {
 20859              		.loc 1 2227 6 view .LVU5448
 20860              	.LBB2993:
2229:src/xeq.c     **** 		dispmode -= 4;
 20861              		.loc 1 2229 2 view .LVU5449
2230:src/xeq.c     **** 		dispdigs += 12;
 20862              		.loc 1 2230 3 view .LVU5450
2231:src/xeq.c     **** 		if (dispdigs >= 16) {
 20863              		.loc 1 2231 3 view .LVU5451
2231:src/xeq.c     **** 		if (dispdigs >= 16) {
 20864              		.loc 1 2231 12 is_stmt 0 view .LVU5452
 20865 0074 00F10C01 		add	r1, r0, #12
 20866              	.LVL1640:
2232:src/xeq.c     **** 			dispdigs -= 4;
 20867              		.loc 1 2232 3 is_stmt 1 view .LVU5453
2232:src/xeq.c     **** 			dispdigs -= 4;
 20868              		.loc 1 2232 6 is_stmt 0 view .LVU5454
 20869 0078 0F29     		cmp	r1, #15
 20870 007a 0EDC     		bgt	.L1484
2232:src/xeq.c     **** 			dispdigs -= 4;
 20871              		.loc 1 2232 6 view .LVU5455
 20872 007c 03F00303 		and	r3, r3, #3
 20873              	.LVL1641:
2232:src/xeq.c     **** 			dispdigs -= 4;
 20874              		.loc 1 2232 6 view .LVU5456
 20875 0080 DDE7     		b	.L1483
 20876              	.LVL1642:
 20877              	.L1487:
2232:src/xeq.c     **** 			dispdigs -= 4;
 20878              		.loc 1 2232 6 view .LVU5457
 20879              	.LBE2993:
 20880              	.LBE2996:
2268:src/xeq.c     **** 	  report_err(ERR_RANGE);
 20881              		.loc 1 2268 54 view .LVU5458
 20882 0082 0728     		cmp	r0, #7
2261:src/xeq.c     **** 	  break;
 20883              		.loc 1 2261 13 view .LVU5459
 20884 0084 4FF00403 		mov	r3, #4
 20885              	.LVL1643:
2268:src/xeq.c     **** 	  report_err(ERR_RANGE);
 20886              		.loc 1 2268 54 view .LVU5460
 20887 0088 F4D9     		bls	.L1481
 20888              	.LVL1644:
 20889              	.L1490:
2269:src/xeq.c     **** 	  return;
 20890              		.loc 1 2269 4 is_stmt 1 view .LVU5461
 20891              	.LBB2997:
 20892              	.LBI2997:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 20893              		.loc 1 537 5 view .LVU5462
 20894              	.LBB2998:
 538:src/xeq.c     **** 		Error = e;
 20895              		.loc 1 538 2 view .LVU5463
 538:src/xeq.c     **** 		Error = e;
 20896              		.loc 1 538 12 is_stmt 0 view .LVU5464
 20897 008a 0D4B     		ldr	r3, .L1491+4
 20898              	.LVL1645:
ARM GAS  /tmp/ccjeMhND.s 			page 553


 538:src/xeq.c     **** 		Error = e;
 20899              		.loc 1 538 5 view .LVU5465
 20900 008c 1A68     		ldr	r2, [r3]
 20901 008e 0AB9     		cbnz	r2, .L1471
 20902              	.LVL1646:
 20903              	.LBB2999:
 20904              	.LBI2999:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 20905              		.loc 1 537 5 is_stmt 1 view .LVU5466
 20906              	.LBB3000:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 20907              		.loc 1 539 3 view .LVU5467
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 20908              		.loc 1 539 9 is_stmt 0 view .LVU5468
 20909 0090 0822     		movs	r2, #8
 20910 0092 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 20911              		.loc 1 540 3 is_stmt 1 view .LVU5469
 20912              	.LVL1647:
 20913              	.L1471:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 20914              		.loc 1 540 3 is_stmt 0 view .LVU5470
 20915              	.LBE3000:
 20916              	.LBE2999:
 20917              	.LBE2998:
 20918              	.LBE2997:
2287:src/xeq.c     **** 
 20919              		.loc 1 2287 1 view .LVU5471
 20920 0094 5DF8044B 		ldr	r4, [sp], #4
 20921              		.cfi_remember_state
 20922              		.cfi_restore 4
 20923              		.cfi_def_cfa_offset 0
 20924 0098 7047     		bx	lr
 20925              	.LVL1648:
 20926              	.L1484:
 20927              		.cfi_restore_state
 20928              	.LBB3001:
 20929              	.LBB2994:
2233:src/xeq.c     **** 			dispmode += 2;
 20930              		.loc 1 2233 4 is_stmt 1 view .LVU5472
2234:src/xeq.c     **** 		}
 20931              		.loc 1 2234 13 is_stmt 0 view .LVU5473
 20932 009a 023B     		subs	r3, r3, #2
 20933              	.LVL1649:
2234:src/xeq.c     **** 		}
 20934              		.loc 1 2234 13 view .LVU5474
 20935 009c 03F00303 		and	r3, r3, #3
 20936              	.LVL1650:
2233:src/xeq.c     **** 			dispmode += 2;
 20937              		.loc 1 2233 13 view .LVU5475
 20938 00a0 00F10801 		add	r1, r0, #8
 20939              	.LVL1651:
2234:src/xeq.c     **** 		}
 20940              		.loc 1 2234 4 is_stmt 1 view .LVU5476
2234:src/xeq.c     **** 		}
 20941              		.loc 1 2234 4 is_stmt 0 view .LVU5477
 20942 00a4 CBE7     		b	.L1483
ARM GAS  /tmp/ccjeMhND.s 			page 554


 20943              	.LVL1652:
 20944              	.L1476:
2234:src/xeq.c     **** 		}
 20945              		.loc 1 2234 4 view .LVU5478
 20946              	.LBE2994:
 20947              	.LBE3001:
2258:src/xeq.c     **** 	  break;
 20948              		.loc 1 2258 4 is_stmt 1 view .LVU5479
2259:src/xeq.c     **** 	case RARG_SIG:
 20949              		.loc 1 2259 4 view .LVU5480
 20950 00a6 0323     		movs	r3, #3
 20951 00a8 C8E7     		b	.L1478
 20952              	.LVL1653:
 20953              	.L1474:
2266:src/xeq.c     **** 	}
 20954              		.loc 1 2266 10 view .LVU5481
2268:src/xeq.c     **** 	  report_err(ERR_RANGE);
 20955              		.loc 1 2268 2 view .LVU5482
2268:src/xeq.c     **** 	  report_err(ERR_RANGE);
 20956              		.loc 1 2268 28 is_stmt 0 view .LVU5483
 20957 00aa 191F     		subs	r1, r3, #4
 20958              	.LVL1654:
2268:src/xeq.c     **** 	  report_err(ERR_RANGE);
 20959              		.loc 1 2268 5 view .LVU5484
 20960 00ac 0129     		cmp	r1, #1
 20961 00ae DFD9     		bls	.L1480
 20962 00b0 03F00303 		and	r3, r3, #3
 20963              	.LVL1655:
2268:src/xeq.c     **** 	  report_err(ERR_RANGE);
 20964              		.loc 1 2268 5 view .LVU5485
 20965 00b4 C2E7     		b	.L1478
 20966              	.LVL1656:
 20967              	.L1475:
2247:src/xeq.c     **** 	case RARG_STD:
 20968              		.loc 1 2247 2 view .LVU5486
 20969 00b6 0023     		movs	r3, #0
 20970 00b8 C0E7     		b	.L1478
 20971              	.L1492:
 20972 00ba 00BF     		.align	2
 20973              	.L1491:
 20974 00bc 00000000 		.word	main_ram
 20975 00c0 00000000 		.word	Error
 20976              		.cfi_endproc
 20977              	.LFE168:
 20979              		.section	.text.set_int_base,"ax",%progbits
 20980              		.align	1
 20981              		.p2align 2,,3
 20982              		.global	set_int_base
 20983              		.syntax unified
 20984              		.thumb
 20985              		.thumb_func
 20986              		.fpu fpv4-sp-d16
 20988              	set_int_base:
 20989              	.LVL1657:
 20990              	.LFB205:
3548:src/xeq.c     **** 	if (arg < 2) {
 20991              		.loc 1 3548 51 is_stmt 1 view -0
ARM GAS  /tmp/ccjeMhND.s 			page 555


 20992              		.cfi_startproc
 20993              		@ args = 0, pretend = 0, frame = 0
 20994              		@ frame_needed = 0, uses_anonymous_args = 0
3549:src/xeq.c     **** 		if (arg == 0)
 20995              		.loc 1 3549 2 view .LVU5488
3549:src/xeq.c     **** 		if (arg == 0)
 20996              		.loc 1 3549 5 is_stmt 0 view .LVU5489
 20997 0000 0128     		cmp	r0, #1
3548:src/xeq.c     **** 	if (arg < 2) {
 20998              		.loc 1 3548 51 view .LVU5490
 20999 0002 08B5     		push	{r3, lr}
 21000              		.cfi_def_cfa_offset 8
 21001              		.cfi_offset 3, -8
 21002              		.cfi_offset 14, -4
3549:src/xeq.c     **** 		if (arg == 0)
 21003              		.loc 1 3549 5 view .LVU5491
 21004 0004 0BD9     		bls	.L1498
3555:src/xeq.c     **** }
 21005              		.loc 1 3555 3 is_stmt 1 view .LVU5492
 21006              	.LVL1658:
 21007              	.LBB3002:
 21008              	.LBI3002:
3542:src/xeq.c     **** 	UState.int_base = b - 1;
 21009              		.loc 1 3542 13 view .LVU5493
 21010              	.LBB3003:
3543:src/xeq.c     **** 	if (!is_intmode())
 21011              		.loc 1 3543 2 view .LVU5494
 21012 0006 114B     		ldr	r3, .L1500
 21013 0008 1A68     		ldr	r2, [r3]
3543:src/xeq.c     **** 	if (!is_intmode())
 21014              		.loc 1 3543 18 is_stmt 0 view .LVU5495
 21015 000a 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3543:src/xeq.c     **** 	if (!is_intmode())
 21016              		.loc 1 3543 22 view .LVU5496
 21017 000e 0138     		subs	r0, r0, #1
 21018              	.LVL1659:
3543:src/xeq.c     **** 	if (!is_intmode())
 21019              		.loc 1 3543 18 view .LVU5497
 21020 0010 60F30713 		bfi	r3, r0, #4, #4
 21021 0014 82F8E837 		strb	r3, [r2, #2024]
3544:src/xeq.c     **** 		switch_to_int();
 21022              		.loc 1 3544 2 is_stmt 1 view .LVU5498
3544:src/xeq.c     **** 		switch_to_int();
 21023              		.loc 1 3544 5 is_stmt 0 view .LVU5499
 21024 0018 DB07     		lsls	r3, r3, #31
 21025 001a 12D5     		bpl	.L1499
 21026              	.LBE3003:
 21027              	.LBE3002:
3556:src/xeq.c     **** 
 21028              		.loc 1 3556 1 view .LVU5500
 21029 001c 08BD     		pop	{r3, pc}
 21030              	.LVL1660:
 21031              	.L1498:
3550:src/xeq.c     **** 			op_float(OP_FLOAT);
 21032              		.loc 1 3550 3 is_stmt 1 view .LVU5501
3550:src/xeq.c     **** 			op_float(OP_FLOAT);
 21033              		.loc 1 3550 6 is_stmt 0 view .LVU5502
ARM GAS  /tmp/ccjeMhND.s 			page 556


 21034 001e 20B9     		cbnz	r0, .L1495
3551:src/xeq.c     **** 		else
 21035              		.loc 1 3551 4 is_stmt 1 view .LVU5503
3556:src/xeq.c     **** 
 21036              		.loc 1 3556 1 is_stmt 0 view .LVU5504
 21037 0020 BDE80840 		pop	{r3, lr}
 21038              		.cfi_remember_state
 21039              		.cfi_restore 14
 21040              		.cfi_restore 3
 21041              		.cfi_def_cfa_offset 0
3551:src/xeq.c     **** 		else
 21042              		.loc 1 3551 4 view .LVU5505
 21043 0024 5B20     		movs	r0, #91
 21044              	.LVL1661:
3551:src/xeq.c     **** 		else
 21045              		.loc 1 3551 4 view .LVU5506
 21046 0026 FFF7FEBF 		b	op_float
 21047              	.LVL1662:
 21048              	.L1495:
 21049              		.cfi_restore_state
3553:src/xeq.c     **** 	} else
 21050              		.loc 1 3553 4 is_stmt 1 view .LVU5507
 21051              	.LBB3006:
 21052              	.LBI3006:
3559:src/xeq.c     **** 	op_float(OP_FLOAT);
 21053              		.loc 1 3559 6 view .LVU5508
 21054              	.LBB3007:
3560:src/xeq.c     **** 	UState.fract = 1;
 21055              		.loc 1 3560 2 view .LVU5509
 21056 002a 5B20     		movs	r0, #91
 21057              	.LVL1663:
3560:src/xeq.c     **** 	UState.fract = 1;
 21058              		.loc 1 3560 2 is_stmt 0 view .LVU5510
 21059 002c FFF7FEFF 		bl	op_float
 21060              	.LVL1664:
3561:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 21061              		.loc 1 3561 2 is_stmt 1 view .LVU5511
3561:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 21062              		.loc 1 3561 15 is_stmt 0 view .LVU5512
 21063 0030 064B     		ldr	r3, .L1500
 21064 0032 1A68     		ldr	r2, [r3]
 21065 0034 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 21066 0038 43F02003 		orr	r3, r3, #32
 21067 003c 82F8E637 		strb	r3, [r2, #2022]
3562:src/xeq.c     **** 		UState.improperfrac = 1;
 21068              		.loc 1 3562 2 is_stmt 1 view .LVU5513
3564:src/xeq.c     **** 		UState.improperfrac = 0;
 21069              		.loc 1 3564 7 view .LVU5514
 21070              	.LBE3007:
 21071              	.LBE3006:
3556:src/xeq.c     **** 
 21072              		.loc 1 3556 1 is_stmt 0 view .LVU5515
 21073 0040 08BD     		pop	{r3, pc}
 21074              	.LVL1665:
 21075              	.L1499:
 21076              	.LBB3008:
 21077              	.LBB3004:
ARM GAS  /tmp/ccjeMhND.s 			page 557


3545:src/xeq.c     **** }
 21078              		.loc 1 3545 3 is_stmt 1 view .LVU5516
 21079              	.LBE3004:
 21080              	.LBE3008:
3556:src/xeq.c     **** 
 21081              		.loc 1 3556 1 is_stmt 0 view .LVU5517
 21082 0042 BDE80840 		pop	{r3, lr}
 21083              		.cfi_restore 14
 21084              		.cfi_restore 3
 21085              		.cfi_def_cfa_offset 0
 21086              	.LBB3009:
 21087              	.LBB3005:
3545:src/xeq.c     **** }
 21088              		.loc 1 3545 3 view .LVU5518
 21089 0046 FFF7FEBF 		b	switch_to_int
 21090              	.LVL1666:
 21091              	.L1501:
3545:src/xeq.c     **** }
 21092              		.loc 1 3545 3 view .LVU5519
 21093 004a 00BF     		.align	2
 21094              	.L1500:
 21095 004c 00000000 		.word	main_ram
 21096              	.LBE3005:
 21097              	.LBE3009:
 21098              		.cfi_endproc
 21099              	.LFE205:
 21101              		.section	.text.op_fract,"ax",%progbits
 21102              		.align	1
 21103              		.p2align 2,,3
 21104              		.global	op_fract
 21105              		.syntax unified
 21106              		.thumb
 21107              		.thumb_func
 21108              		.fpu fpv4-sp-d16
 21110              	op_fract:
 21111              	.LVL1667:
 21112              	.LFB206:
3559:src/xeq.c     **** 	op_float(OP_FLOAT);
 21113              		.loc 1 3559 30 is_stmt 1 view -0
 21114              		.cfi_startproc
 21115              		@ args = 0, pretend = 0, frame = 0
 21116              		@ frame_needed = 0, uses_anonymous_args = 0
3560:src/xeq.c     **** 	UState.fract = 1;
 21117              		.loc 1 3560 2 view .LVU5521
3559:src/xeq.c     **** 	op_float(OP_FLOAT);
 21118              		.loc 1 3559 30 is_stmt 0 view .LVU5522
 21119 0000 10B5     		push	{r4, lr}
 21120              		.cfi_def_cfa_offset 8
 21121              		.cfi_offset 4, -8
 21122              		.cfi_offset 14, -4
3559:src/xeq.c     **** 	op_float(OP_FLOAT);
 21123              		.loc 1 3559 30 view .LVU5523
 21124 0002 0446     		mov	r4, r0
3560:src/xeq.c     **** 	UState.fract = 1;
 21125              		.loc 1 3560 2 view .LVU5524
 21126 0004 5B20     		movs	r0, #91
 21127              	.LVL1668:
ARM GAS  /tmp/ccjeMhND.s 			page 558


3560:src/xeq.c     **** 	UState.fract = 1;
 21128              		.loc 1 3560 2 view .LVU5525
 21129 0006 FFF7FEFF 		bl	op_float
 21130              	.LVL1669:
3561:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 21131              		.loc 1 3561 2 is_stmt 1 view .LVU5526
 21132 000a 0D4B     		ldr	r3, .L1508
 21133 000c 1B68     		ldr	r3, [r3]
3561:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 21134              		.loc 1 3561 15 is_stmt 0 view .LVU5527
 21135 000e 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
3562:src/xeq.c     **** 		UState.improperfrac = 1;
 21136              		.loc 1 3562 5 view .LVU5528
 21137 0012 4D2C     		cmp	r4, #77
3561:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 21138              		.loc 1 3561 15 view .LVU5529
 21139 0014 42F02002 		orr	r2, r2, #32
 21140 0018 83F8E627 		strb	r2, [r3, #2022]
3562:src/xeq.c     **** 		UState.improperfrac = 1;
 21141              		.loc 1 3562 2 is_stmt 1 view .LVU5530
3562:src/xeq.c     **** 		UState.improperfrac = 1;
 21142              		.loc 1 3562 5 is_stmt 0 view .LVU5531
 21143 001c 09D0     		beq	.L1506
3564:src/xeq.c     **** 		UState.improperfrac = 0;
 21144              		.loc 1 3564 7 is_stmt 1 view .LVU5532
3564:src/xeq.c     **** 		UState.improperfrac = 0;
 21145              		.loc 1 3564 10 is_stmt 0 view .LVU5533
 21146 001e 4E2C     		cmp	r4, #78
 21147 0020 00D0     		beq	.L1507
3566:src/xeq.c     **** 
 21148              		.loc 1 3566 1 view .LVU5534
 21149 0022 10BD     		pop	{r4, pc}
 21150              	.L1507:
3565:src/xeq.c     **** }
 21151              		.loc 1 3565 3 is_stmt 1 view .LVU5535
3565:src/xeq.c     **** }
 21152              		.loc 1 3565 23 is_stmt 0 view .LVU5536
 21153 0024 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 21154 0028 6FF30412 		bfc	r2, #4, #1
 21155 002c 83F8E627 		strb	r2, [r3, #2022]
3566:src/xeq.c     **** 
 21156              		.loc 1 3566 1 view .LVU5537
 21157 0030 10BD     		pop	{r4, pc}
 21158              	.L1506:
3563:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 21159              		.loc 1 3563 3 is_stmt 1 view .LVU5538
3563:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 21160              		.loc 1 3563 23 is_stmt 0 view .LVU5539
 21161 0032 D2B2     		uxtb	r2, r2
 21162 0034 42F01002 		orr	r2, r2, #16
 21163 0038 83F8E627 		strb	r2, [r3, #2022]
3566:src/xeq.c     **** 
 21164              		.loc 1 3566 1 view .LVU5540
 21165 003c 10BD     		pop	{r4, pc}
 21166              	.L1509:
 21167 003e 00BF     		.align	2
 21168              	.L1508:
ARM GAS  /tmp/ccjeMhND.s 			page 559


 21169 0040 00000000 		.word	main_ram
 21170              		.cfi_endproc
 21171              	.LFE206:
 21173              		.section	.text.cmdsavem,"ax",%progbits
 21174              		.align	1
 21175              		.p2align 2,,3
 21176              		.global	cmdsavem
 21177              		.syntax unified
 21178              		.thumb
 21179              		.thumb_func
 21180              		.fpu fpv4-sp-d16
 21182              	cmdsavem:
 21183              	.LVL1670:
 21184              	.LFB207:
3571:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 21185              		.loc 1 3571 47 is_stmt 1 view -0
 21186              		.cfi_startproc
 21187              		@ args = 0, pretend = 0, frame = 0
 21188              		@ frame_needed = 0, uses_anonymous_args = 0
3572:src/xeq.c     **** }
 21189              		.loc 1 3572 2 view .LVU5542
3571:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 21190              		.loc 1 3571 47 is_stmt 0 view .LVU5543
 21191 0000 08B5     		push	{r3, lr}
 21192              		.cfi_def_cfa_offset 8
 21193              		.cfi_offset 3, -8
 21194              		.cfi_offset 14, -4
3572:src/xeq.c     **** }
 21195              		.loc 1 3572 9 view .LVU5544
 21196 0002 FFF7FEFF 		bl	get_reg_n
 21197              	.LVL1671:
3572:src/xeq.c     **** }
 21198              		.loc 1 3572 26 view .LVU5545
 21199 0006 044B     		ldr	r3, .L1512
3572:src/xeq.c     **** }
 21200              		.loc 1 3572 25 view .LVU5546
 21201 0008 1968     		ldr	r1, [r3]
3572:src/xeq.c     **** }
 21202              		.loc 1 3572 2 view .LVU5547
 21203 000a 0822     		movs	r2, #8
3573:src/xeq.c     **** 
 21204              		.loc 1 3573 1 view .LVU5548
 21205 000c BDE80840 		pop	{r3, lr}
 21206              		.cfi_restore 14
 21207              		.cfi_restore 3
 21208              		.cfi_def_cfa_offset 0
3572:src/xeq.c     **** }
 21209              		.loc 1 3572 2 view .LVU5549
 21210 0010 01F2E471 		addw	r1, r1, #2020
 21211 0014 FFF7FEBF 		b	xcopy
 21212              	.LVL1672:
 21213              	.L1513:
 21214              		.align	2
 21215              	.L1512:
 21216 0018 00000000 		.word	main_ram
 21217              		.cfi_endproc
 21218              	.LFE207:
ARM GAS  /tmp/ccjeMhND.s 			page 560


 21220              		.section	.text.set_entry,"ax",%progbits
 21221              		.align	1
 21222              		.p2align 2,,3
 21223              		.global	set_entry
 21224              		.syntax unified
 21225              		.thumb
 21226              		.thumb_func
 21227              		.fpu fpv4-sp-d16
 21229              	set_entry:
 21230              	.LFB210:
3697:src/xeq.c     **** 	if (!Running && !XromRunning)
 21231              		.loc 1 3697 18 is_stmt 1 view -0
 21232              		.cfi_startproc
 21233              		@ args = 0, pretend = 0, frame = 0
 21234              		@ frame_needed = 0, uses_anonymous_args = 0
 21235              		@ link register save eliminated.
3698:src/xeq.c     **** 		State.entryp = 1;
 21236              		.loc 1 3698 2 view .LVU5551
 21237              	.LBB3012:
 21238              	.LBI3012:
3697:src/xeq.c     **** 	if (!Running && !XromRunning)
 21239              		.loc 1 3697 6 view .LVU5552
 21240              	.LBE3012:
3698:src/xeq.c     **** 		State.entryp = 1;
 21241              		.loc 1 3698 6 is_stmt 0 view .LVU5553
 21242 0000 074A     		ldr	r2, .L1516
 21243              	.LBB3014:
 21244              	.LBB3013:
3698:src/xeq.c     **** 		State.entryp = 1;
 21245              		.loc 1 3698 18 view .LVU5554
 21246 0002 084B     		ldr	r3, .L1516+4
3698:src/xeq.c     **** 		State.entryp = 1;
 21247              		.loc 1 3698 15 view .LVU5555
 21248 0004 1268     		ldr	r2, [r2]
 21249 0006 1B68     		ldr	r3, [r3]
 21250 0008 1343     		orrs	r3, r2, r3
 21251 000a 07D1     		bne	.L1514
3699:src/xeq.c     **** }
 21252              		.loc 1 3699 3 is_stmt 1 view .LVU5556
3699:src/xeq.c     **** }
 21253              		.loc 1 3699 16 is_stmt 0 view .LVU5557
 21254 000c 064B     		ldr	r3, .L1516+8
 21255 000e 1A68     		ldr	r2, [r3]
 21256 0010 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 21257 0014 43F01003 		orr	r3, r3, #16
 21258 0018 82F8DD37 		strb	r3, [r2, #2013]
 21259              	.L1514:
 21260              	.LBE3013:
 21261              	.LBE3014:
3700:src/xeq.c     **** 
 21262              		.loc 1 3700 1 view .LVU5558
 21263 001c 7047     		bx	lr
 21264              	.L1517:
 21265 001e 00BF     		.align	2
 21266              	.L1516:
 21267 0020 00000000 		.word	Running
 21268 0024 00000000 		.word	XromRunning
ARM GAS  /tmp/ccjeMhND.s 			page 561


 21269 0028 00000000 		.word	main_ram
 21270              		.cfi_endproc
 21271              	.LFE210:
 21273              		.section	.text.get_trig_mode,"ax",%progbits
 21274              		.align	1
 21275              		.p2align 2,,3
 21276              		.global	get_trig_mode
 21277              		.syntax unified
 21278              		.thumb
 21279              		.thumb_func
 21280              		.fpu fpv4-sp-d16
 21282              	get_trig_mode:
 21283              	.LFB212:
3871:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 21284              		.loc 1 3871 37 is_stmt 1 view -0
 21285              		.cfi_startproc
 21286              		@ args = 0, pretend = 0, frame = 0
 21287              		@ frame_needed = 0, uses_anonymous_args = 0
 21288              		@ link register save eliminated.
3872:src/xeq.c     **** 		return TRIG_RAD;
 21289              		.loc 1 3872 2 view .LVU5560
3872:src/xeq.c     **** 		return TRIG_RAD;
 21290              		.loc 1 3872 6 is_stmt 0 view .LVU5561
 21291 0000 084B     		ldr	r3, .L1522
 21292 0002 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
3872:src/xeq.c     **** 		return TRIG_RAD;
 21293              		.loc 1 3872 5 view .LVU5562
 21294 0004 9B07     		lsls	r3, r3, #30
 21295 0006 0AD4     		bmi	.L1521
3872:src/xeq.c     **** 		return TRIG_RAD;
 21296              		.loc 1 3872 19 discriminator 1 view .LVU5563
 21297 0008 074B     		ldr	r3, .L1522+4
 21298 000a 93F90130 		ldrsb	r3, [r3, #1]
 21299 000e 002B     		cmp	r3, #0
 21300 0010 05DB     		blt	.L1521
3875:src/xeq.c     **** }
 21301              		.loc 1 3875 2 is_stmt 1 view .LVU5564
3875:src/xeq.c     **** }
 21302              		.loc 1 3875 33 is_stmt 0 view .LVU5565
 21303 0012 064B     		ldr	r3, .L1522+8
 21304 0014 1B68     		ldr	r3, [r3]
 21305 0016 93F8EA07 		ldrb	r0, [r3, #2026]	@ zero_extendqisi2
3875:src/xeq.c     **** }
 21306              		.loc 1 3875 9 view .LVU5566
 21307 001a 8009     		lsrs	r0, r0, #6
 21308 001c 7047     		bx	lr
 21309              	.L1521:
3873:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
 21310              		.loc 1 3873 10 view .LVU5567
 21311 001e 0120     		movs	r0, #1
3876:src/xeq.c     **** 
 21312              		.loc 1 3876 1 view .LVU5568
 21313 0020 7047     		bx	lr
 21314              	.L1523:
 21315 0022 00BF     		.align	2
 21316              	.L1522:
 21317 0024 00000000 		.word	StateWhileOn
ARM GAS  /tmp/ccjeMhND.s 			page 562


 21318 0028 00000000 		.word	XromParams
 21319 002c 00000000 		.word	main_ram
 21320              		.cfi_endproc
 21321              	.LFE212:
 21323              		.section	.text.cmdpause,"ax",%progbits
 21324              		.align	1
 21325              		.p2align 2,,3
 21326              		.global	cmdpause
 21327              		.syntax unified
 21328              		.thumb
 21329              		.thumb_func
 21330              		.fpu fpv4-sp-d16
 21332              	cmdpause:
 21333              	.LVL1673:
 21334              	.LFB214:
3921:src/xeq.c     **** 	display();
 21335              		.loc 1 3921 47 is_stmt 1 view -0
 21336              		.cfi_startproc
 21337              		@ args = 0, pretend = 0, frame = 0
 21338              		@ frame_needed = 0, uses_anonymous_args = 0
3922:src/xeq.c     **** #ifndef CONSOLE
 21339              		.loc 1 3922 2 view .LVU5570
3921:src/xeq.c     **** 	display();
 21340              		.loc 1 3921 47 is_stmt 0 view .LVU5571
 21341 0000 10B5     		push	{r4, lr}
 21342              		.cfi_def_cfa_offset 8
 21343              		.cfi_offset 4, -8
 21344              		.cfi_offset 14, -4
3921:src/xeq.c     **** 	display();
 21345              		.loc 1 3921 47 view .LVU5572
 21346 0002 0446     		mov	r4, r0
3922:src/xeq.c     **** #ifndef CONSOLE
 21347              		.loc 1 3922 2 view .LVU5573
 21348 0004 FFF7FEFF 		bl	display
 21349              	.LVL1674:
3925:src/xeq.c     **** 	GoFast = (arg == 0);
 21350              		.loc 1 3925 2 is_stmt 1 view .LVU5574
3925:src/xeq.c     **** 	GoFast = (arg == 0);
 21351              		.loc 1 3925 8 is_stmt 0 view .LVU5575
 21352 0008 044A     		ldr	r2, .L1526
3926:src/xeq.c     **** #elif 0
 21353              		.loc 1 3926 9 view .LVU5576
 21354 000a 0549     		ldr	r1, .L1526+4
3926:src/xeq.c     **** #elif 0
 21355              		.loc 1 3926 16 view .LVU5577
 21356 000c B4FA84F3 		clz	r3, r4
3925:src/xeq.c     **** 	GoFast = (arg == 0);
 21357              		.loc 1 3925 8 view .LVU5578
 21358 0010 E4B2     		uxtb	r4, r4
 21359              	.LVL1675:
3926:src/xeq.c     **** #elif 0
 21360              		.loc 1 3926 16 view .LVU5579
 21361 0012 5B09     		lsrs	r3, r3, #5
3925:src/xeq.c     **** 	GoFast = (arg == 0);
 21362              		.loc 1 3925 8 view .LVU5580
 21363 0014 1470     		strb	r4, [r2]
3926:src/xeq.c     **** #elif 0
ARM GAS  /tmp/ccjeMhND.s 			page 563


 21364              		.loc 1 3926 2 is_stmt 1 view .LVU5581
3926:src/xeq.c     **** #elif 0
 21365              		.loc 1 3926 9 is_stmt 0 view .LVU5582
 21366 0016 0B60     		str	r3, [r1]
3937:src/xeq.c     **** 
 21367              		.loc 1 3937 1 view .LVU5583
 21368 0018 10BD     		pop	{r4, pc}
 21369              	.L1527:
 21370 001a 00BF     		.align	2
 21371              	.L1526:
 21372 001c 00000000 		.word	Pause
 21373 0020 00000000 		.word	GoFast
 21374              		.cfi_endproc
 21375              	.LFE214:
 21377              		.section	.text.op_setspeed,"ax",%progbits
 21378              		.align	1
 21379              		.p2align 2,,3
 21380              		.global	op_setspeed
 21381              		.syntax unified
 21382              		.thumb
 21383              		.thumb_func
 21384              		.fpu fpv4-sp-d16
 21386              	op_setspeed:
 21387              	.LVL1676:
 21388              	.LFB215:
3941:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
 21389              		.loc 1 3941 33 is_stmt 1 view -0
 21390              		.cfi_startproc
 21391              		@ args = 0, pretend = 0, frame = 0
 21392              		@ frame_needed = 0, uses_anonymous_args = 0
 21393              		@ link register save eliminated.
3942:src/xeq.c     **** 	update_speed(1);
 21394              		.loc 1 3942 2 view .LVU5585
3942:src/xeq.c     **** 	update_speed(1);
 21395              		.loc 1 3942 20 is_stmt 0 view .LVU5586
 21396 0000 064B     		ldr	r3, .L1529
 21397 0002 1B68     		ldr	r3, [r3]
3942:src/xeq.c     **** 	update_speed(1);
 21398              		.loc 1 3942 42 view .LVU5587
 21399 0004 A0F19A00 		sub	r0, #154
 21400              	.LVL1677:
3942:src/xeq.c     **** 	update_speed(1);
 21401              		.loc 1 3942 20 view .LVU5588
 21402 0008 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
3942:src/xeq.c     **** 	update_speed(1);
 21403              		.loc 1 3942 42 view .LVU5589
 21404 000c B0FA80F0 		clz	r0, r0
 21405 0010 4009     		lsrs	r0, r0, #5
3942:src/xeq.c     **** 	update_speed(1);
 21406              		.loc 1 3942 20 view .LVU5590
 21407 0012 60F3C302 		bfi	r2, r0, #3, #1
 21408 0016 83F8EB27 		strb	r2, [r3, #2027]
3943:src/xeq.c     **** }
 21409              		.loc 1 3943 17 is_stmt 1 view .LVU5591
3944:src/xeq.c     **** 
 21410              		.loc 1 3944 1 is_stmt 0 view .LVU5592
 21411 001a 7047     		bx	lr
ARM GAS  /tmp/ccjeMhND.s 			page 564


 21412              	.L1530:
 21413              		.align	2
 21414              	.L1529:
 21415 001c 00000000 		.word	main_ram
 21416              		.cfi_endproc
 21417              	.LFE215:
 21419              		.section	.text.op_prompt,"ax",%progbits
 21420              		.align	1
 21421              		.p2align 2,,3
 21422              		.global	op_prompt
 21423              		.syntax unified
 21424              		.thumb
 21425              		.thumb_func
 21426              		.fpu fpv4-sp-d16
 21428              	op_prompt:
 21429              	.LVL1678:
 21430              	.LFB216:
3947:src/xeq.c     **** 	set_running_off();
 21431              		.loc 1 3947 31 is_stmt 1 view -0
 21432              		.cfi_startproc
 21433              		@ args = 0, pretend = 0, frame = 0
 21434              		@ frame_needed = 0, uses_anonymous_args = 0
3948:src/xeq.c     **** 	alpha_view_common(regX_idx);
 21435              		.loc 1 3948 2 view .LVU5594
 21436              	.LBB3015:
 21437              	.LBI3015:
5580:src/xeq.c     **** 	set_running_off_sst();
 21438              		.loc 1 5580 6 view .LVU5595
 21439              	.LBB3016:
5581:src/xeq.c     **** 	State.entryp = 0;
 21440              		.loc 1 5581 2 view .LVU5596
 21441              	.LBB3017:
 21442              	.LBI3017:
5572:src/xeq.c     **** 	Running = 0;
 21443              		.loc 1 5572 6 view .LVU5597
 21444              	.LBB3018:
5573:src/xeq.c     **** }
 21445              		.loc 1 5573 2 view .LVU5598
 21446              	.LBE3018:
 21447              	.LBE3017:
 21448              	.LBE3016:
 21449              	.LBE3015:
3947:src/xeq.c     **** 	set_running_off();
 21450              		.loc 1 3947 31 is_stmt 0 view .LVU5599
 21451 0000 08B5     		push	{r3, lr}
 21452              		.cfi_def_cfa_offset 8
 21453              		.cfi_offset 3, -8
 21454              		.cfi_offset 14, -4
 21455              	.LBB3024:
 21456              	.LBB3023:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 21457              		.loc 1 5582 15 view .LVU5600
 21458 0002 094B     		ldr	r3, .L1533
 21459              	.LBB3021:
 21460              	.LBB3019:
5573:src/xeq.c     **** }
 21461              		.loc 1 5573 10 view .LVU5601
ARM GAS  /tmp/ccjeMhND.s 			page 565


 21462 0004 094A     		ldr	r2, .L1533+4
 21463              	.LBE3019:
 21464              	.LBE3021:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 21465              		.loc 1 5582 15 view .LVU5602
 21466 0006 1B68     		ldr	r3, [r3]
 21467              	.LBB3022:
 21468              	.LBB3020:
5573:src/xeq.c     **** }
 21469              		.loc 1 5573 10 view .LVU5603
 21470 0008 0021     		movs	r1, #0
 21471 000a 1160     		str	r1, [r2]
 21472              	.LBE3020:
 21473              	.LBE3022:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 21474              		.loc 1 5582 2 is_stmt 1 view .LVU5604
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 21475              		.loc 1 5582 15 is_stmt 0 view .LVU5605
 21476 000c 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 21477 0010 61F30412 		bfi	r2, r1, #4, #1
 21478 0014 83F8DD27 		strb	r2, [r3, #2013]
 21479              		.loc 1 5583 2 is_stmt 1 view .LVU5606
 21480 0018 8A20     		movs	r0, #138
 21481              	.LVL1679:
 21482              		.loc 1 5583 2 is_stmt 0 view .LVU5607
 21483 001a FFF7FEFF 		bl	dot
 21484              	.LVL1680:
 21485              	.LBE3023:
 21486              	.LBE3024:
3949:src/xeq.c     **** }
 21487              		.loc 1 3949 2 is_stmt 1 view .LVU5608
3950:src/xeq.c     **** 
 21488              		.loc 1 3950 1 is_stmt 0 view .LVU5609
 21489 001e BDE80840 		pop	{r3, lr}
 21490              		.cfi_restore 14
 21491              		.cfi_restore 3
 21492              		.cfi_def_cfa_offset 0
3949:src/xeq.c     **** }
 21493              		.loc 1 3949 2 view .LVU5610
 21494 0022 6420     		movs	r0, #100
 21495 0024 FFF7FEBF 		b	alpha_view_common
 21496              	.LVL1681:
 21497              	.L1534:
 21498              		.align	2
 21499              	.L1533:
 21500 0028 00000000 		.word	main_ram
 21501 002c 00000000 		.word	Running
 21502              		.cfi_endproc
 21503              	.LFE216:
 21505              		.section	.text.XisInt,"ax",%progbits
 21506              		.align	1
 21507              		.p2align 2,,3
 21508              		.global	XisInt
 21509              		.syntax unified
 21510              		.thumb
 21511              		.thumb_func
 21512              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccjeMhND.s 			page 566


 21514              	XisInt:
 21515              	.LVL1682:
 21516              	.LFB217:
3954:src/xeq.c     **** 	decNumber x;
 21517              		.loc 1 3954 28 is_stmt 1 view -0
 21518              		.cfi_startproc
 21519              		@ args = 0, pretend = 0, frame = 40
 21520              		@ frame_needed = 0, uses_anonymous_args = 0
3955:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
 21521              		.loc 1 3955 2 view .LVU5612
3956:src/xeq.c     **** 	if ( is_intmode() )
 21522              		.loc 1 3956 2 view .LVU5613
3957:src/xeq.c     **** 		result = op_int;
 21523              		.loc 1 3957 7 is_stmt 0 view .LVU5614
 21524 0000 164B     		ldr	r3, .L1541
3954:src/xeq.c     **** 	decNumber x;
 21525              		.loc 1 3954 28 view .LVU5615
 21526 0002 30B5     		push	{r4, r5, lr}
 21527              		.cfi_def_cfa_offset 12
 21528              		.cfi_offset 4, -12
 21529              		.cfi_offset 5, -8
 21530              		.cfi_offset 14, -4
3957:src/xeq.c     **** 		result = op_int;
 21531              		.loc 1 3957 7 view .LVU5616
 21532 0004 1B68     		ldr	r3, [r3]
 21533 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3956:src/xeq.c     **** 	if ( is_intmode() )
 21534              		.loc 1 3956 27 view .LVU5617
 21535 000a A0F18704 		sub	r4, r0, #135
 21536 000e B4FA84F4 		clz	r4, r4
3957:src/xeq.c     **** 		result = op_int;
 21537              		.loc 1 3957 5 view .LVU5618
 21538 0012 13F00105 		ands	r5, r3, #1
3954:src/xeq.c     **** 	decNumber x;
 21539              		.loc 1 3954 28 view .LVU5619
 21540 0016 8BB0     		sub	sp, sp, #44
 21541              		.cfi_def_cfa_offset 56
3956:src/xeq.c     **** 	if ( is_intmode() )
 21542              		.loc 1 3956 27 view .LVU5620
 21543 0018 4FEA5414 		lsr	r4, r4, #5
 21544              	.LVL1683:
3957:src/xeq.c     **** 		result = op_int;
 21545              		.loc 1 3957 2 is_stmt 1 view .LVU5621
3957:src/xeq.c     **** 		result = op_int;
 21546              		.loc 1 3957 5 is_stmt 0 view .LVU5622
 21547 001c 04D0     		beq	.L1539
 21548              	.LVL1684:
3963:src/xeq.c     **** }
 21549              		.loc 1 3963 2 is_stmt 1 view .LVU5623
 21550 001e 2046     		mov	r0, r4
 21551              	.LVL1685:
3963:src/xeq.c     **** }
 21552              		.loc 1 3963 2 is_stmt 0 view .LVU5624
 21553 0020 FFF7FEFF 		bl	fin_tst
 21554              	.LVL1686:
3964:src/xeq.c     **** 
 21555              		.loc 1 3964 1 view .LVU5625
ARM GAS  /tmp/ccjeMhND.s 			page 567


 21556 0024 0BB0     		add	sp, sp, #44
 21557              		.cfi_remember_state
 21558              		.cfi_def_cfa_offset 12
 21559              		@ sp needed
 21560 0026 30BD     		pop	{r4, r5, pc}
 21561              	.LVL1687:
 21562              	.L1539:
 21563              		.cfi_restore_state
3959:src/xeq.c     **** 		result = 0;
 21564              		.loc 1 3959 7 is_stmt 1 view .LVU5626
 21565              	.LBB3025:
 21566              	.LBI3025:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21567              		.loc 1 805 12 view .LVU5627
 21568              	.LBB3026:
 806:src/xeq.c     **** }
 21569              		.loc 1 806 2 view .LVU5628
 806:src/xeq.c     **** }
 21570              		.loc 1 806 9 is_stmt 0 view .LVU5629
 21571 0028 01A8     		add	r0, sp, #4
 21572              	.LVL1688:
 806:src/xeq.c     **** }
 21573              		.loc 1 806 9 view .LVU5630
 21574 002a 6421     		movs	r1, #100
 21575 002c FFF7FEFF 		bl	getRegister
 21576              	.LVL1689:
 806:src/xeq.c     **** }
 21577              		.loc 1 806 9 view .LVU5631
 21578              	.LBE3026:
 21579              	.LBE3025:
3959:src/xeq.c     **** 		result = 0;
 21580              		.loc 1 3959 10 view .LVU5632
 21581 0030 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 21582 0032 13F0700F 		tst	r3, #112
 21583 0036 05D0     		beq	.L1540
3960:src/xeq.c     **** 	else
 21584              		.loc 1 3960 10 view .LVU5633
 21585 0038 2C46     		mov	r4, r5
 21586              	.LVL1690:
3963:src/xeq.c     **** }
 21587              		.loc 1 3963 2 is_stmt 1 view .LVU5634
 21588 003a 2046     		mov	r0, r4
 21589 003c FFF7FEFF 		bl	fin_tst
 21590              	.LVL1691:
3964:src/xeq.c     **** 
 21591              		.loc 1 3964 1 is_stmt 0 view .LVU5635
 21592 0040 0BB0     		add	sp, sp, #44
 21593              		.cfi_remember_state
 21594              		.cfi_def_cfa_offset 12
 21595              		@ sp needed
 21596 0042 30BD     		pop	{r4, r5, pc}
 21597              	.LVL1692:
 21598              	.L1540:
 21599              		.cfi_restore_state
3962:src/xeq.c     **** 	fin_tst(result);
 21600              		.loc 1 3962 10 is_stmt 1 view .LVU5636
3962:src/xeq.c     **** 	fin_tst(result);
ARM GAS  /tmp/ccjeMhND.s 			page 568


 21601              		.loc 1 3962 20 is_stmt 0 view .LVU5637
 21602 0044 01A8     		add	r0, sp, #4
 21603 0046 FFF7FEFF 		bl	is_int
 21604              	.LVL1693:
3962:src/xeq.c     **** 	fin_tst(result);
 21605              		.loc 1 3962 31 view .LVU5638
 21606 004a 041B     		subs	r4, r0, r4
 21607              	.LVL1694:
3962:src/xeq.c     **** 	fin_tst(result);
 21608              		.loc 1 3962 31 view .LVU5639
 21609 004c B4FA84F4 		clz	r4, r4
 21610 0050 6409     		lsrs	r4, r4, #5
 21611              	.LVL1695:
3963:src/xeq.c     **** }
 21612              		.loc 1 3963 2 is_stmt 1 view .LVU5640
 21613 0052 2046     		mov	r0, r4
 21614 0054 FFF7FEFF 		bl	fin_tst
 21615              	.LVL1696:
3964:src/xeq.c     **** 
 21616              		.loc 1 3964 1 is_stmt 0 view .LVU5641
 21617 0058 0BB0     		add	sp, sp, #44
 21618              		.cfi_def_cfa_offset 12
 21619              		@ sp needed
 21620 005a 30BD     		pop	{r4, r5, pc}
 21621              	.LVL1697:
 21622              	.L1542:
3964:src/xeq.c     **** 
 21623              		.loc 1 3964 1 view .LVU5642
 21624              		.align	2
 21625              	.L1541:
 21626 005c 00000000 		.word	main_ram
 21627              		.cfi_endproc
 21628              	.LFE217:
 21630              		.section	.text.XisEvenOrOdd,"ax",%progbits
 21631              		.align	1
 21632              		.p2align 2,,3
 21633              		.global	XisEvenOrOdd
 21634              		.syntax unified
 21635              		.thumb
 21636              		.thumb_func
 21637              		.fpu fpv4-sp-d16
 21639              	XisEvenOrOdd:
 21640              	.LVL1698:
 21641              	.LFB218:
3968:src/xeq.c     **** 	decNumber x;
 21642              		.loc 1 3968 34 is_stmt 1 view -0
 21643              		.cfi_startproc
 21644              		@ args = 0, pretend = 0, frame = 40
 21645              		@ frame_needed = 0, uses_anonymous_args = 0
3969:src/xeq.c     **** 	int odd = (op == OP_XisODD);
 21646              		.loc 1 3969 2 view .LVU5644
3970:src/xeq.c     **** 
 21647              		.loc 1 3970 2 view .LVU5645
3972:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21648              		.loc 1 3972 6 is_stmt 0 view .LVU5646
 21649 0000 174B     		ldr	r3, .L1547
3968:src/xeq.c     **** 	decNumber x;
ARM GAS  /tmp/ccjeMhND.s 			page 569


 21650              		.loc 1 3968 34 view .LVU5647
 21651 0002 30B5     		push	{r4, r5, lr}
 21652              		.cfi_def_cfa_offset 12
 21653              		.cfi_offset 4, -12
 21654              		.cfi_offset 5, -8
 21655              		.cfi_offset 14, -4
3972:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21656              		.loc 1 3972 6 view .LVU5648
 21657 0004 1B68     		ldr	r3, [r3]
 21658 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3972:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21659              		.loc 1 3972 5 view .LVU5649
 21660 000a DB07     		lsls	r3, r3, #31
3968:src/xeq.c     **** 	decNumber x;
 21661              		.loc 1 3968 34 view .LVU5650
 21662 000c 8BB0     		sub	sp, sp, #44
 21663              		.cfi_def_cfa_offset 56
3968:src/xeq.c     **** 	decNumber x;
 21664              		.loc 1 3968 34 view .LVU5651
 21665 000e 0446     		mov	r4, r0
 21666              	.LVL1699:
3972:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21667              		.loc 1 3972 2 is_stmt 1 view .LVU5652
3972:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21668              		.loc 1 3972 5 is_stmt 0 view .LVU5653
 21669 0010 15D5     		bpl	.L1544
3973:src/xeq.c     **** 	} else {
 21670              		.loc 1 3973 3 is_stmt 1 view .LVU5654
 21671              	.LBB3027:
 21672              	.LBI3027:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 21673              		.loc 1 1256 15 view .LVU5655
 21674              	.LBB3028:
1257:src/xeq.c     **** }
 21675              		.loc 1 1257 2 view .LVU5656
1257:src/xeq.c     **** }
 21676              		.loc 1 1257 9 is_stmt 0 view .LVU5657
 21677 0012 6420     		movs	r0, #100
 21678              	.LVL1700:
1257:src/xeq.c     **** }
 21679              		.loc 1 1257 9 view .LVU5658
 21680 0014 FFF7FEFF 		bl	get_reg_n_int
 21681              	.LVL1701:
 21682              	.LBE3028:
 21683              	.LBE3027:
3970:src/xeq.c     **** 
 21684              		.loc 1 3970 16 view .LVU5659
 21685 0018 A4F18A04 		sub	r4, #138
 21686              	.LVL1702:
3973:src/xeq.c     **** 	} else {
 21687              		.loc 1 3973 23 view .LVU5660
 21688 001c 0023     		movs	r3, #0
3970:src/xeq.c     **** 
 21689              		.loc 1 3970 16 view .LVU5661
 21690 001e 0025     		movs	r5, #0
 21691 0020 B4FA84F4 		clz	r4, r4
3973:src/xeq.c     **** 	} else {
ARM GAS  /tmp/ccjeMhND.s 			page 570


 21692              		.loc 1 3973 23 view .LVU5662
 21693 0024 00F00102 		and	r2, r0, #1
3973:src/xeq.c     **** 	} else {
 21694              		.loc 1 3973 3 view .LVU5663
 21695 0028 AB42     		cmp	r3, r5
3970:src/xeq.c     **** 
 21696              		.loc 1 3970 16 view .LVU5664
 21697 002a 4FEA5414 		lsr	r4, r4, #5
3973:src/xeq.c     **** 	} else {
 21698              		.loc 1 3973 3 view .LVU5665
 21699 002e 06BF     		itte	eq
 21700 0030 A242     		cmpeq	r2, r4
 21701 0032 0120     		moveq	r0, #1
 21702 0034 1846     		movne	r0, r3
 21703 0036 FFF7FEFF 		bl	fin_tst
 21704              	.LVL1703:
3977:src/xeq.c     **** 
 21705              		.loc 1 3977 1 view .LVU5666
 21706 003a 0BB0     		add	sp, sp, #44
 21707              		.cfi_remember_state
 21708              		.cfi_def_cfa_offset 12
 21709              		@ sp needed
 21710 003c 30BD     		pop	{r4, r5, pc}
 21711              	.LVL1704:
 21712              	.L1544:
 21713              		.cfi_restore_state
3975:src/xeq.c     **** 	}
 21714              		.loc 1 3975 3 is_stmt 1 view .LVU5667
 21715              	.LBB3029:
 21716              	.LBI3029:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21717              		.loc 1 805 12 view .LVU5668
 21718              	.LBB3030:
 806:src/xeq.c     **** }
 21719              		.loc 1 806 2 view .LVU5669
 806:src/xeq.c     **** }
 21720              		.loc 1 806 9 is_stmt 0 view .LVU5670
 21721 003e 6421     		movs	r1, #100
 21722 0040 01A8     		add	r0, sp, #4
 21723              	.LVL1705:
 806:src/xeq.c     **** }
 21724              		.loc 1 806 9 view .LVU5671
 21725 0042 FFF7FEFF 		bl	getRegister
 21726              	.LVL1706:
 806:src/xeq.c     **** }
 21727              		.loc 1 806 9 view .LVU5672
 21728              	.LBE3030:
 21729              	.LBE3029:
3975:src/xeq.c     **** 	}
 21730              		.loc 1 3975 11 view .LVU5673
 21731 0046 FFF7FEFF 		bl	is_even
 21732              	.LVL1707:
3975:src/xeq.c     **** 	}
 21733              		.loc 1 3975 32 view .LVU5674
 21734 004a 8A3C     		subs	r4, r4, #138
 21735              	.LVL1708:
3975:src/xeq.c     **** 	}
ARM GAS  /tmp/ccjeMhND.s 			page 571


 21736              		.loc 1 3975 32 view .LVU5675
 21737 004c 18BF     		it	ne
 21738 004e 0124     		movne	r4, #1
3975:src/xeq.c     **** 	}
 21739              		.loc 1 3975 3 view .LVU5676
 21740 0050 201A     		subs	r0, r4, r0
 21741 0052 B0FA80F0 		clz	r0, r0
 21742 0056 4009     		lsrs	r0, r0, #5
 21743 0058 FFF7FEFF 		bl	fin_tst
 21744              	.LVL1709:
3977:src/xeq.c     **** 
 21745              		.loc 1 3977 1 view .LVU5677
 21746 005c 0BB0     		add	sp, sp, #44
 21747              		.cfi_def_cfa_offset 12
 21748              		@ sp needed
 21749 005e 30BD     		pop	{r4, r5, pc}
 21750              	.L1548:
 21751              		.align	2
 21752              	.L1547:
 21753 0060 00000000 		.word	main_ram
 21754              		.cfi_endproc
 21755              	.LFE218:
 21757              		.section	.text.XisPrime,"ax",%progbits
 21758              		.align	1
 21759              		.p2align 2,,3
 21760              		.global	XisPrime
 21761              		.syntax unified
 21762              		.thumb
 21763              		.thumb_func
 21764              		.fpu fpv4-sp-d16
 21766              	XisPrime:
 21767              	.LVL1710:
 21768              	.LFB219:
3981:src/xeq.c     **** 	unsigned long long int i;
 21769              		.loc 1 3981 30 is_stmt 1 view -0
 21770              		.cfi_startproc
 21771              		@ args = 0, pretend = 0, frame = 40
 21772              		@ frame_needed = 0, uses_anonymous_args = 0
3982:src/xeq.c     **** 	int sgn;
 21773              		.loc 1 3982 2 view .LVU5679
3983:src/xeq.c     **** 
 21774              		.loc 1 3983 2 view .LVU5680
3985:src/xeq.c     **** 	if (!is_intmode()) {
 21775              		.loc 1 3985 2 view .LVU5681
3981:src/xeq.c     **** 	unsigned long long int i;
 21776              		.loc 1 3981 30 is_stmt 0 view .LVU5682
 21777 0000 70B5     		push	{r4, r5, r6, lr}
 21778              		.cfi_def_cfa_offset 16
 21779              		.cfi_offset 4, -16
 21780              		.cfi_offset 5, -12
 21781              		.cfi_offset 6, -8
 21782              		.cfi_offset 14, -4
 21783 0002 8AB0     		sub	sp, sp, #40
 21784              		.cfi_def_cfa_offset 56
 21785              	.LVL1711:
 21786              	.LBB3031:
 21787              	.LBI3031:
ARM GAS  /tmp/ccjeMhND.s 			page 572


1260:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 21788              		.loc 1 1260 24 is_stmt 1 view .LVU5683
 21789              	.LBB3032:
1261:src/xeq.c     **** }
 21790              		.loc 1 1261 2 view .LVU5684
1261:src/xeq.c     **** }
 21791              		.loc 1 1261 9 is_stmt 0 view .LVU5685
 21792 0004 6946     		mov	r1, sp
 21793 0006 6420     		movs	r0, #100
 21794              	.LVL1712:
1261:src/xeq.c     **** }
 21795              		.loc 1 1261 9 view .LVU5686
 21796 0008 FFF7FEFF 		bl	get_reg_n_int_sgn
 21797              	.LVL1713:
 21798              	.LBE3032:
 21799              	.LBE3031:
3986:src/xeq.c     **** 		decNumber x;
 21800              		.loc 1 3986 6 view .LVU5687
 21801 000c 1B4B     		ldr	r3, .L1559
 21802 000e 1B68     		ldr	r3, [r3]
 21803 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3986:src/xeq.c     **** 		decNumber x;
 21804              		.loc 1 3986 5 view .LVU5688
 21805 0014 13F00104 		ands	r4, r3, #1
 21806              	.LBB3034:
 21807              	.LBB3033:
1261:src/xeq.c     **** }
 21808              		.loc 1 1261 9 view .LVU5689
 21809 0018 0646     		mov	r6, r0
 21810 001a 0D46     		mov	r5, r1
 21811              	.LVL1714:
1261:src/xeq.c     **** }
 21812              		.loc 1 1261 9 view .LVU5690
 21813              	.LBE3033:
 21814              	.LBE3034:
3986:src/xeq.c     **** 		decNumber x;
 21815              		.loc 1 3986 2 is_stmt 1 view .LVU5691
3986:src/xeq.c     **** 		decNumber x;
 21816              		.loc 1 3986 5 is_stmt 0 view .LVU5692
 21817 001c 11D0     		beq	.L1550
 21818 001e 009B     		ldr	r3, [sp]
 21819              	.LVL1715:
 21820              	.L1551:
3996:src/xeq.c     **** }
 21821              		.loc 1 3996 2 is_stmt 1 view .LVU5693
 21822 0020 23B1     		cbz	r3, .L1558
 21823              	.L1556:
3996:src/xeq.c     **** }
 21824              		.loc 1 3996 2 is_stmt 0 view .LVU5694
 21825 0022 0020     		movs	r0, #0
 21826 0024 FFF7FEFF 		bl	fin_tst
 21827              	.LVL1716:
3997:src/xeq.c     **** 
 21828              		.loc 1 3997 1 view .LVU5695
 21829 0028 0AB0     		add	sp, sp, #40
 21830              		.cfi_remember_state
 21831              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccjeMhND.s 			page 573


 21832              		@ sp needed
 21833 002a 70BD     		pop	{r4, r5, r6, pc}
 21834              	.L1558:
 21835              		.cfi_restore_state
3996:src/xeq.c     **** }
 21836              		.loc 1 3996 22 discriminator 1 view .LVU5696
 21837 002c 2946     		mov	r1, r5
 21838 002e 3046     		mov	r0, r6
 21839 0030 FFF7FEFF 		bl	isPrime
 21840              	.LVL1717:
3996:src/xeq.c     **** }
 21841              		.loc 1 3996 2 discriminator 1 view .LVU5697
 21842 0034 0038     		subs	r0, r0, #0
 21843 0036 18BF     		it	ne
 21844 0038 0120     		movne	r0, #1
 21845 003a FFF7FEFF 		bl	fin_tst
 21846              	.LVL1718:
3997:src/xeq.c     **** 
 21847              		.loc 1 3997 1 discriminator 1 view .LVU5698
 21848 003e 0AB0     		add	sp, sp, #40
 21849              		.cfi_remember_state
 21850              		.cfi_def_cfa_offset 16
 21851              		@ sp needed
 21852 0040 70BD     		pop	{r4, r5, r6, pc}
 21853              	.LVL1719:
 21854              	.L1550:
 21855              		.cfi_restore_state
 21856              	.LBB3035:
3987:src/xeq.c     **** 
 21857              		.loc 1 3987 3 is_stmt 1 view .LVU5699
3989:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
 21858              		.loc 1 3989 3 view .LVU5700
 21859              	.LBB3036:
 21860              	.LBI3036:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21861              		.loc 1 805 12 view .LVU5701
 21862              	.LBB3037:
 806:src/xeq.c     **** }
 21863              		.loc 1 806 2 view .LVU5702
 806:src/xeq.c     **** }
 21864              		.loc 1 806 9 is_stmt 0 view .LVU5703
 21865 0042 01A8     		add	r0, sp, #4
 21866              	.LVL1720:
 806:src/xeq.c     **** }
 21867              		.loc 1 806 9 view .LVU5704
 21868 0044 6421     		movs	r1, #100
 21869 0046 FFF7FEFF 		bl	getRegister
 21870              	.LVL1721:
 806:src/xeq.c     **** }
 21871              		.loc 1 806 9 view .LVU5705
 21872              	.LBE3037:
 21873              	.LBE3036:
3990:src/xeq.c     **** 			sgn = 1; // not prime
 21874              		.loc 1 3990 3 is_stmt 1 view .LVU5706
3990:src/xeq.c     **** 			sgn = 1; // not prime
 21875              		.loc 1 3990 6 is_stmt 0 view .LVU5707
 21876 004a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
ARM GAS  /tmp/ccjeMhND.s 			page 574


 21877 004e 13F0700F 		tst	r3, #112
 21878 0052 06D0     		beq	.L1552
3991:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 21879              		.loc 1 3991 4 is_stmt 1 view .LVU5708
3991:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 21880              		.loc 1 3991 8 is_stmt 0 view .LVU5709
 21881 0054 0123     		movs	r3, #1
 21882              	.LBE3035:
3996:src/xeq.c     **** }
 21883              		.loc 1 3996 2 view .LVU5710
 21884 0056 2046     		mov	r0, r4
 21885              	.LBB3038:
3991:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 21886              		.loc 1 3991 8 view .LVU5711
 21887 0058 0093     		str	r3, [sp]
3991:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 21888              		.loc 1 3991 8 view .LVU5712
 21889              	.LBE3038:
3996:src/xeq.c     **** }
 21890              		.loc 1 3996 2 is_stmt 1 view .LVU5713
 21891 005a FFF7FEFF 		bl	fin_tst
 21892              	.LVL1722:
3997:src/xeq.c     **** 
 21893              		.loc 1 3997 1 is_stmt 0 view .LVU5714
 21894 005e 0AB0     		add	sp, sp, #40
 21895              		.cfi_remember_state
 21896              		.cfi_def_cfa_offset 16
 21897              		@ sp needed
 21898 0060 70BD     		pop	{r4, r5, r6, pc}
 21899              	.L1552:
 21900              		.cfi_restore_state
 21901              	.LBB3039:
3992:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 21902              		.loc 1 3992 8 is_stmt 1 view .LVU5715
3992:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 21903              		.loc 1 3992 12 is_stmt 0 view .LVU5716
 21904 0062 0749     		ldr	r1, .L1559+4
 21905 0064 01A8     		add	r0, sp, #4
 21906 0066 FFF7FEFF 		bl	dn_lt
 21907              	.LVL1723:
 21908 006a 009B     		ldr	r3, [sp]
3992:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 21909              		.loc 1 3992 11 view .LVU5717
 21910 006c 0028     		cmp	r0, #0
 21911 006e D7D1     		bne	.L1551
3994:src/xeq.c     **** 	}
 21912              		.loc 1 3994 4 is_stmt 1 view .LVU5718
 21913              	.LVL1724:
3994:src/xeq.c     **** 	}
 21914              		.loc 1 3994 6 is_stmt 0 view .LVU5719
 21915 0070 4FF0FF36 		mov	r6, #-1
 21916 0074 3546     		mov	r5, r6
3994:src/xeq.c     **** 	}
 21917              		.loc 1 3994 6 view .LVU5720
 21918              	.LBE3039:
3996:src/xeq.c     **** }
 21919              		.loc 1 3996 2 is_stmt 1 view .LVU5721
ARM GAS  /tmp/ccjeMhND.s 			page 575


 21920 0076 002B     		cmp	r3, #0
 21921 0078 D3D1     		bne	.L1556
 21922 007a D7E7     		b	.L1558
 21923              	.L1560:
 21924              		.align	2
 21925              	.L1559:
 21926 007c 00000000 		.word	main_ram
 21927 0080 00000000 		.word	const_2pow64
 21928              		.cfi_endproc
 21929              	.LFE219:
 21931              		.section	.text.isInfinite,"ax",%progbits
 21932              		.align	1
 21933              		.p2align 2,,3
 21934              		.global	isInfinite
 21935              		.syntax unified
 21936              		.thumb
 21937              		.thumb_func
 21938              		.fpu fpv4-sp-d16
 21940              	isInfinite:
 21941              	.LVL1725:
 21942              	.LFB220:
4001:src/xeq.c     **** 	decNumber x;
 21943              		.loc 1 4001 32 view -0
 21944              		.cfi_startproc
 21945              		@ args = 0, pretend = 0, frame = 40
 21946              		@ frame_needed = 0, uses_anonymous_args = 0
4002:src/xeq.c     **** 
 21947              		.loc 1 4002 2 view .LVU5723
4004:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
 21948              		.loc 1 4004 2 view .LVU5724
4001:src/xeq.c     **** 	decNumber x;
 21949              		.loc 1 4001 32 is_stmt 0 view .LVU5725
 21950 0000 00B5     		push	{lr}
 21951              		.cfi_def_cfa_offset 4
 21952              		.cfi_offset 14, -4
 21953 0002 8BB0     		sub	sp, sp, #44
 21954              		.cfi_def_cfa_offset 48
 21955              	.LVL1726:
 21956              	.LBB3040:
 21957              	.LBI3040:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21958              		.loc 1 805 12 is_stmt 1 view .LVU5726
 21959              	.LBB3041:
 806:src/xeq.c     **** }
 21960              		.loc 1 806 2 view .LVU5727
 806:src/xeq.c     **** }
 21961              		.loc 1 806 9 is_stmt 0 view .LVU5728
 21962 0004 6421     		movs	r1, #100
 21963 0006 01A8     		add	r0, sp, #4
 21964              	.LVL1727:
 806:src/xeq.c     **** }
 21965              		.loc 1 806 9 view .LVU5729
 21966 0008 FFF7FEFF 		bl	getRegister
 21967              	.LVL1728:
 806:src/xeq.c     **** }
 21968              		.loc 1 806 9 view .LVU5730
 21969              	.LBE3041:
ARM GAS  /tmp/ccjeMhND.s 			page 576


 21970              	.LBE3040:
4005:src/xeq.c     **** }
 21971              		.loc 1 4005 2 is_stmt 1 view .LVU5731
4005:src/xeq.c     **** }
 21972              		.loc 1 4005 10 is_stmt 0 view .LVU5732
 21973 000c 074B     		ldr	r3, .L1565
 21974 000e 1B68     		ldr	r3, [r3]
 21975 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4005:src/xeq.c     **** }
 21976              		.loc 1 4005 2 view .LVU5733
 21977 0014 DB07     		lsls	r3, r3, #31
 21978 0016 56BF     		itet	pl
 21979 0018 9DF80C00 		ldrbpl	r0, [sp, #12]	@ zero_extendqisi2
 21980 001c 0020     		movmi	r0, #0
 21981 001e C0F38010 		ubfxpl	r0, r0, #6, #1
 21982 0022 FFF7FEFF 		bl	fin_tst
 21983              	.LVL1729:
4006:src/xeq.c     **** 
 21984              		.loc 1 4006 1 view .LVU5734
 21985 0026 0BB0     		add	sp, sp, #44
 21986              		.cfi_def_cfa_offset 4
 21987              		@ sp needed
 21988 0028 5DF804FB 		ldr	pc, [sp], #4
 21989              	.L1566:
 21990              		.align	2
 21991              	.L1565:
 21992 002c 00000000 		.word	main_ram
 21993              		.cfi_endproc
 21994              	.LFE220:
 21996              		.section	.text.isNan,"ax",%progbits
 21997              		.align	1
 21998              		.p2align 2,,3
 21999              		.global	isNan
 22000              		.syntax unified
 22001              		.thumb
 22002              		.thumb_func
 22003              		.fpu fpv4-sp-d16
 22005              	isNan:
 22006              	.LVL1730:
 22007              	.LFB221:
4012:src/xeq.c     **** 	decNumber x;
 22008              		.loc 1 4012 27 is_stmt 1 view -0
 22009              		.cfi_startproc
 22010              		@ args = 0, pretend = 0, frame = 40
 22011              		@ frame_needed = 0, uses_anonymous_args = 0
4013:src/xeq.c     **** 
 22012              		.loc 1 4013 2 view .LVU5736
4015:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
 22013              		.loc 1 4015 2 view .LVU5737
4012:src/xeq.c     **** 	decNumber x;
 22014              		.loc 1 4012 27 is_stmt 0 view .LVU5738
 22015 0000 00B5     		push	{lr}
 22016              		.cfi_def_cfa_offset 4
 22017              		.cfi_offset 14, -4
 22018 0002 8BB0     		sub	sp, sp, #44
 22019              		.cfi_def_cfa_offset 48
 22020              	.LVL1731:
ARM GAS  /tmp/ccjeMhND.s 			page 577


 22021              	.LBB3042:
 22022              	.LBI3042:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22023              		.loc 1 805 12 is_stmt 1 view .LVU5739
 22024              	.LBB3043:
 806:src/xeq.c     **** }
 22025              		.loc 1 806 2 view .LVU5740
 806:src/xeq.c     **** }
 22026              		.loc 1 806 9 is_stmt 0 view .LVU5741
 22027 0004 6421     		movs	r1, #100
 22028 0006 01A8     		add	r0, sp, #4
 22029              	.LVL1732:
 806:src/xeq.c     **** }
 22030              		.loc 1 806 9 view .LVU5742
 22031 0008 FFF7FEFF 		bl	getRegister
 22032              	.LVL1733:
 806:src/xeq.c     **** }
 22033              		.loc 1 806 9 view .LVU5743
 22034              	.LBE3043:
 22035              	.LBE3042:
4016:src/xeq.c     **** }
 22036              		.loc 1 4016 2 is_stmt 1 view .LVU5744
4016:src/xeq.c     **** }
 22037              		.loc 1 4016 10 is_stmt 0 view .LVU5745
 22038 000c 0B4B     		ldr	r3, .L1571
 22039 000e 1B68     		ldr	r3, [r3]
 22040 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4016:src/xeq.c     **** }
 22041              		.loc 1 4016 2 view .LVU5746
 22042 0014 DB07     		lsls	r3, r3, #31
 22043 0016 0BD4     		bmi	.L1569
4016:src/xeq.c     **** }
 22044              		.loc 1 4016 2 discriminator 1 view .LVU5747
 22045 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 22046 001c 13F0300F 		tst	r3, #48
 22047 0020 14BF     		ite	ne
 22048 0022 0120     		movne	r0, #1
 22049 0024 0020     		moveq	r0, #0
 22050 0026 FFF7FEFF 		bl	fin_tst
 22051              	.LVL1734:
4017:src/xeq.c     **** 
 22052              		.loc 1 4017 1 discriminator 1 view .LVU5748
 22053 002a 0BB0     		add	sp, sp, #44
 22054              		.cfi_remember_state
 22055              		.cfi_def_cfa_offset 4
 22056              		@ sp needed
 22057 002c 5DF804FB 		ldr	pc, [sp], #4
 22058              	.L1569:
 22059              		.cfi_restore_state
4016:src/xeq.c     **** }
 22060              		.loc 1 4016 2 view .LVU5749
 22061 0030 0020     		movs	r0, #0
 22062 0032 FFF7FEFF 		bl	fin_tst
 22063              	.LVL1735:
4017:src/xeq.c     **** 
 22064              		.loc 1 4017 1 view .LVU5750
 22065 0036 0BB0     		add	sp, sp, #44
ARM GAS  /tmp/ccjeMhND.s 			page 578


 22066              		.cfi_def_cfa_offset 4
 22067              		@ sp needed
 22068 0038 5DF804FB 		ldr	pc, [sp], #4
 22069              	.L1572:
 22070              		.align	2
 22071              	.L1571:
 22072 003c 00000000 		.word	main_ram
 22073              		.cfi_endproc
 22074              	.LFE221:
 22076              		.section	.text.isSpecial,"ax",%progbits
 22077              		.align	1
 22078              		.p2align 2,,3
 22079              		.global	isSpecial
 22080              		.syntax unified
 22081              		.thumb
 22082              		.thumb_func
 22083              		.fpu fpv4-sp-d16
 22085              	isSpecial:
 22086              	.LVL1736:
 22087              	.LFB222:
4019:src/xeq.c     **** 	decNumber x;
 22088              		.loc 1 4019 31 is_stmt 1 view -0
 22089              		.cfi_startproc
 22090              		@ args = 0, pretend = 0, frame = 40
 22091              		@ frame_needed = 0, uses_anonymous_args = 0
4020:src/xeq.c     **** 
 22092              		.loc 1 4020 2 view .LVU5752
4022:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
 22093              		.loc 1 4022 2 view .LVU5753
4019:src/xeq.c     **** 	decNumber x;
 22094              		.loc 1 4019 31 is_stmt 0 view .LVU5754
 22095 0000 00B5     		push	{lr}
 22096              		.cfi_def_cfa_offset 4
 22097              		.cfi_offset 14, -4
 22098 0002 8BB0     		sub	sp, sp, #44
 22099              		.cfi_def_cfa_offset 48
 22100              	.LVL1737:
 22101              	.LBB3044:
 22102              	.LBI3044:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22103              		.loc 1 805 12 is_stmt 1 view .LVU5755
 22104              	.LBB3045:
 806:src/xeq.c     **** }
 22105              		.loc 1 806 2 view .LVU5756
 806:src/xeq.c     **** }
 22106              		.loc 1 806 9 is_stmt 0 view .LVU5757
 22107 0004 6421     		movs	r1, #100
 22108 0006 01A8     		add	r0, sp, #4
 22109              	.LVL1738:
 806:src/xeq.c     **** }
 22110              		.loc 1 806 9 view .LVU5758
 22111 0008 FFF7FEFF 		bl	getRegister
 22112              	.LVL1739:
 806:src/xeq.c     **** }
 22113              		.loc 1 806 9 view .LVU5759
 22114              	.LBE3045:
 22115              	.LBE3044:
ARM GAS  /tmp/ccjeMhND.s 			page 579


4023:src/xeq.c     **** }
 22116              		.loc 1 4023 2 is_stmt 1 view .LVU5760
4023:src/xeq.c     **** }
 22117              		.loc 1 4023 10 is_stmt 0 view .LVU5761
 22118 000c 0B4B     		ldr	r3, .L1577
 22119 000e 1B68     		ldr	r3, [r3]
 22120 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4023:src/xeq.c     **** }
 22121              		.loc 1 4023 2 view .LVU5762
 22122 0014 DB07     		lsls	r3, r3, #31
 22123 0016 0BD4     		bmi	.L1575
4023:src/xeq.c     **** }
 22124              		.loc 1 4023 2 discriminator 1 view .LVU5763
 22125 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 22126 001c 13F0700F 		tst	r3, #112
 22127 0020 14BF     		ite	ne
 22128 0022 0120     		movne	r0, #1
 22129 0024 0020     		moveq	r0, #0
 22130 0026 FFF7FEFF 		bl	fin_tst
 22131              	.LVL1740:
4024:src/xeq.c     **** 
 22132              		.loc 1 4024 1 discriminator 1 view .LVU5764
 22133 002a 0BB0     		add	sp, sp, #44
 22134              		.cfi_remember_state
 22135              		.cfi_def_cfa_offset 4
 22136              		@ sp needed
 22137 002c 5DF804FB 		ldr	pc, [sp], #4
 22138              	.L1575:
 22139              		.cfi_restore_state
4023:src/xeq.c     **** }
 22140              		.loc 1 4023 2 view .LVU5765
 22141 0030 0020     		movs	r0, #0
 22142 0032 FFF7FEFF 		bl	fin_tst
 22143              	.LVL1741:
4024:src/xeq.c     **** 
 22144              		.loc 1 4024 1 view .LVU5766
 22145 0036 0BB0     		add	sp, sp, #44
 22146              		.cfi_def_cfa_offset 4
 22147              		@ sp needed
 22148 0038 5DF804FB 		ldr	pc, [sp], #4
 22149              	.L1578:
 22150              		.align	2
 22151              	.L1577:
 22152 003c 00000000 		.word	main_ram
 22153              		.cfi_endproc
 22154              	.LFE222:
 22156              		.section	.text.op_entryp,"ax",%progbits
 22157              		.align	1
 22158              		.p2align 2,,3
 22159              		.global	op_entryp
 22160              		.syntax unified
 22161              		.thumb
 22162              		.thumb_func
 22163              		.fpu fpv4-sp-d16
 22165              	op_entryp:
 22166              	.LVL1742:
 22167              	.LFB223:
ARM GAS  /tmp/ccjeMhND.s 			page 580


4026:src/xeq.c     **** 	fin_tst(State.entryp);
 22168              		.loc 1 4026 31 is_stmt 1 view -0
 22169              		.cfi_startproc
 22170              		@ args = 0, pretend = 0, frame = 0
 22171              		@ frame_needed = 0, uses_anonymous_args = 0
 22172              		@ link register save eliminated.
4027:src/xeq.c     **** }
 22173              		.loc 1 4027 2 view .LVU5768
4027:src/xeq.c     **** }
 22174              		.loc 1 4027 15 is_stmt 0 view .LVU5769
 22175 0000 034B     		ldr	r3, .L1580
 22176 0002 1B68     		ldr	r3, [r3]
 22177 0004 93F8DD07 		ldrb	r0, [r3, #2013]	@ zero_extendqisi2
 22178              	.LVL1743:
4027:src/xeq.c     **** }
 22179              		.loc 1 4027 2 view .LVU5770
 22180 0008 C0F30010 		ubfx	r0, r0, #4, #1
 22181 000c FFF7FEBF 		b	fin_tst
 22182              	.LVL1744:
 22183              	.L1581:
 22184              		.align	2
 22185              	.L1580:
 22186 0010 00000000 		.word	main_ram
 22187              		.cfi_endproc
 22188              	.LFE223:
 22190              		.section	.text.reg_decode,"ax",%progbits
 22191              		.align	1
 22192              		.p2align 2,,3
 22193              		.global	reg_decode
 22194              		.syntax unified
 22195              		.thumb
 22196              		.thumb_func
 22197              		.fpu fpv4-sp-d16
 22199              	reg_decode:
 22200              	.LVL1745:
 22201              	.LFB224:
4031:src/xeq.c     **** 	decNumber x, y;
 22202              		.loc 1 4031 51 is_stmt 1 view -0
 22203              		.cfi_startproc
 22204              		@ args = 0, pretend = 0, frame = 80
 22205              		@ frame_needed = 0, uses_anonymous_args = 0
4032:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
 22206              		.loc 1 4032 2 view .LVU5772
4033:src/xeq.c     **** 
 22207              		.loc 1 4033 2 view .LVU5773
4035:src/xeq.c     **** 		bad_mode_error();
 22208              		.loc 1 4035 2 view .LVU5774
4031:src/xeq.c     **** 	decNumber x, y;
 22209              		.loc 1 4031 51 is_stmt 0 view .LVU5775
 22210 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 22211              		.cfi_def_cfa_offset 36
 22212              		.cfi_offset 4, -36
 22213              		.cfi_offset 5, -32
 22214              		.cfi_offset 6, -28
 22215              		.cfi_offset 7, -24
 22216              		.cfi_offset 8, -20
 22217              		.cfi_offset 9, -16
ARM GAS  /tmp/ccjeMhND.s 			page 581


 22218              		.cfi_offset 10, -12
 22219              		.cfi_offset 11, -8
 22220              		.cfi_offset 14, -4
4035:src/xeq.c     **** 		bad_mode_error();
 22221              		.loc 1 4035 6 view .LVU5776
 22222 0004 DFF82CA2 		ldr	r10, .L1634+28
 22223 0008 DAF80040 		ldr	r4, [r10]
 22224 000c 94F8E847 		ldrb	r4, [r4, #2024]	@ zero_extendqisi2
4031:src/xeq.c     **** 	decNumber x, y;
 22225              		.loc 1 4031 51 view .LVU5777
 22226 0010 1F46     		mov	r7, r3
4035:src/xeq.c     **** 		bad_mode_error();
 22227              		.loc 1 4035 5 view .LVU5778
 22228 0012 14F00103 		ands	r3, r4, #1
 22229              	.LVL1746:
4031:src/xeq.c     **** 	decNumber x, y;
 22230              		.loc 1 4031 51 view .LVU5779
 22231 0016 95B0     		sub	sp, sp, #84
 22232              		.cfi_def_cfa_offset 120
4035:src/xeq.c     **** 		bad_mode_error();
 22233              		.loc 1 4035 5 view .LVU5780
 22234 0018 0CD0     		beq	.L1583
4036:src/xeq.c     **** 		return 1;
 22235              		.loc 1 4036 3 is_stmt 1 view .LVU5781
 22236              	.LBB3088:
 22237              	.LBI3088:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 22238              		.loc 1 566 6 view .LVU5782
 22239              	.LBE3088:
 567:src/xeq.c     **** }
 22240              		.loc 1 567 2 view .LVU5783
 22241              	.LVL1747:
 22242              	.LBB3099:
 22243              	.LBB3089:
 22244              	.LBI3089:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 22245              		.loc 1 537 5 view .LVU5784
 22246              	.LBB3090:
 538:src/xeq.c     **** 		Error = e;
 22247              		.loc 1 538 2 view .LVU5785
 538:src/xeq.c     **** 		Error = e;
 22248              		.loc 1 538 12 is_stmt 0 view .LVU5786
 22249 001a 7F4B     		ldr	r3, .L1634
 538:src/xeq.c     **** 		Error = e;
 22250              		.loc 1 538 5 view .LVU5787
 22251 001c 1A68     		ldr	r2, [r3]
 22252              	.LVL1748:
 538:src/xeq.c     **** 		Error = e;
 22253              		.loc 1 538 5 view .LVU5788
 22254 001e 1AB1     		cbz	r2, .L1628
 22255              	.LVL1749:
 22256              	.L1611:
 538:src/xeq.c     **** 		Error = e;
 22257              		.loc 1 538 5 view .LVU5789
 22258              	.LBE3090:
 22259              	.LBE3089:
 22260              	.LBE3099:
ARM GAS  /tmp/ccjeMhND.s 			page 582


4037:src/xeq.c     **** 	}
 22261              		.loc 1 4037 10 view .LVU5790
 22262 0020 0120     		movs	r0, #1
4109:src/xeq.c     **** 
 22263              		.loc 1 4109 1 view .LVU5791
 22264 0022 15B0     		add	sp, sp, #84
 22265              		.cfi_remember_state
 22266              		.cfi_def_cfa_offset 36
 22267              		@ sp needed
 22268 0024 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 22269              	.LVL1750:
 22270              	.L1628:
 22271              		.cfi_restore_state
 22272              	.LBB3100:
 22273              	.LBB3097:
 22274              	.LBB3095:
 22275              	.LBB3091:
 22276              	.LBI3091:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 22277              		.loc 1 537 5 is_stmt 1 view .LVU5792
 22278              	.LBB3092:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 22279              		.loc 1 539 3 view .LVU5793
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 22280              		.loc 1 539 9 is_stmt 0 view .LVU5794
 22281 0028 0D22     		movs	r2, #13
 22282              	.LBE3092:
 22283              	.LBE3091:
 22284              	.LBE3095:
 22285              	.LBE3097:
 22286              	.LBE3100:
4037:src/xeq.c     **** 	}
 22287              		.loc 1 4037 10 view .LVU5795
 22288 002a 0120     		movs	r0, #1
 22289              	.LVL1751:
 22290              	.LBB3101:
 22291              	.LBB3098:
 22292              	.LBB3096:
 22293              	.LBB3094:
 22294              	.LBB3093:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 22295              		.loc 1 539 9 view .LVU5796
 22296 002c 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 22297              		.loc 1 540 3 is_stmt 1 view .LVU5797
 22298              	.LBE3093:
 22299              	.LBE3094:
 22300              	.LBE3096:
 22301              	.LBE3098:
 22302              	.LBE3101:
4109:src/xeq.c     **** 
 22303              		.loc 1 4109 1 is_stmt 0 view .LVU5798
 22304 002e 15B0     		add	sp, sp, #84
 22305              		.cfi_remember_state
 22306              		.cfi_def_cfa_offset 36
 22307              		@ sp needed
 22308 0030 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  /tmp/ccjeMhND.s 			page 583


 22309              	.LVL1752:
 22310              	.L1583:
 22311              		.cfi_restore_state
4109:src/xeq.c     **** 
 22312              		.loc 1 4109 1 view .LVU5799
 22313 0034 8346     		mov	fp, r0
 22314              	.LVL1753:
4109:src/xeq.c     **** 
 22315              		.loc 1 4109 1 view .LVU5800
 22316 0036 8946     		mov	r9, r1
 22317              	.LVL1754:
 22318              	.LBB3102:
 22319              	.LBB3103:
 22320              	.LBB3104:
 22321              	.LBB3105:
 806:src/xeq.c     **** }
 22322              		.loc 1 806 9 view .LVU5801
 22323 0038 02A8     		add	r0, sp, #8
 22324              	.LVL1755:
 806:src/xeq.c     **** }
 22325              		.loc 1 806 9 view .LVU5802
 22326 003a 6421     		movs	r1, #100
 22327              	.LVL1756:
 806:src/xeq.c     **** }
 22328              		.loc 1 806 9 view .LVU5803
 22329 003c 0193     		str	r3, [sp, #4]
 22330 003e 9046     		mov	r8, r2
 22331              	.LVL1757:
 806:src/xeq.c     **** }
 22332              		.loc 1 806 9 view .LVU5804
 22333              	.LBE3105:
 22334              	.LBE3104:
 22335              	.LBE3103:
 22336              	.LBI3102:
4031:src/xeq.c     **** 	decNumber x, y;
 22337              		.loc 1 4031 5 is_stmt 1 view .LVU5805
 22338              	.LBB3185:
4039:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
 22339              		.loc 1 4039 2 view .LVU5806
 22340              	.LBB3107:
 22341              	.LBI3104:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22342              		.loc 1 805 12 view .LVU5807
 22343              	.LBB3106:
 806:src/xeq.c     **** }
 22344              		.loc 1 806 2 view .LVU5808
 806:src/xeq.c     **** }
 22345              		.loc 1 806 9 is_stmt 0 view .LVU5809
 22346 0040 FFF7FEFF 		bl	getRegister
 22347              	.LVL1758:
 806:src/xeq.c     **** }
 22348              		.loc 1 806 9 view .LVU5810
 22349              	.LBE3106:
 22350              	.LBE3107:
4040:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
 22351              		.loc 1 4040 2 is_stmt 1 view .LVU5811
 22352 0044 0522     		movs	r2, #5
ARM GAS  /tmp/ccjeMhND.s 			page 584


 22353 0046 02A9     		add	r1, sp, #8
 22354 0048 0BA8     		add	r0, sp, #44
 22355 004a FFF7FEFF 		bl	dn_mulpow10
 22356              	.LVL1759:
4041:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
 22357              		.loc 1 4041 2 view .LVU5812
 22358 004e 0BA9     		add	r1, sp, #44
 22359 0050 02A8     		add	r0, sp, #8
 22360 0052 FFF7FEFF 		bl	decNumberTrunc
 22361              	.LVL1760:
4042:src/xeq.c     **** 
 22362              		.loc 1 4042 2 view .LVU5813
4042:src/xeq.c     **** 
 22363              		.loc 1 4042 9 is_stmt 0 view .LVU5814
 22364 0056 02A8     		add	r0, sp, #8
 22365 0058 FFF7FEFF 		bl	dn_to_int
 22366              	.LVL1761:
4044:src/xeq.c     **** 		if (!flash)
 22367              		.loc 1 4044 2 is_stmt 1 view .LVU5815
4044:src/xeq.c     **** 		if (!flash)
 22368              		.loc 1 4044 5 is_stmt 0 view .LVU5816
 22369 005c 041E     		subs	r4, r0, #0
 22370 005e 35DB     		blt	.L1585
 22371              	.LVL1762:
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22372              		.loc 1 4052 2 is_stmt 1 view .LVU5817
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22373              		.loc 1 4052 8 is_stmt 0 view .LVU5818
 22374 0060 6E4A     		ldr	r2, .L1634+4
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22375              		.loc 1 4054 6 view .LVU5819
 22376 0062 6F4E     		ldr	r6, .L1634+8
4058:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 22377              		.loc 1 4058 9 view .LVU5820
 22378 0064 6F48     		ldr	r0, .L1634+12
 22379              	.LVL1763:
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22380              		.loc 1 4052 8 view .LVU5821
 22381 0066 82FB0432 		smull	r3, r2, r2, r4
 22382 006a E517     		asrs	r5, r4, #31
4053:src/xeq.c     **** 	num = rsrc % 100;		// nn
 22383              		.loc 1 4053 7 view .LVU5822
 22384 006c C5EBA211 		rsb	r1, r5, r2, asr #6
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22385              		.loc 1 4054 6 view .LVU5823
 22386 0070 A6FB0136 		umull	r3, r6, r6, r1
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22387              		.loc 1 4052 8 view .LVU5824
 22388 0074 4FF47A77 		mov	r7, #1000
 22389              	.LVL1764:
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22390              		.loc 1 4054 6 view .LVU5825
 22391 0078 7209     		lsrs	r2, r6, #5
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22392              		.loc 1 4052 8 view .LVU5826
 22393 007a 07FB1145 		mls	r5, r7, r1, r4
 22394              	.LVL1765:
ARM GAS  /tmp/ccjeMhND.s 			page 585


4053:src/xeq.c     **** 	num = rsrc % 100;		// nn
 22395              		.loc 1 4053 2 is_stmt 1 view .LVU5827
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22396              		.loc 1 4054 2 view .LVU5828
4058:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 22397              		.loc 1 4058 9 is_stmt 0 view .LVU5829
 22398 007e 8442     		cmp	r4, r0
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22399              		.loc 1 4054 6 view .LVU5830
 22400 0080 4FF06407 		mov	r7, #100
4055:src/xeq.c     **** 
 22401              		.loc 1 4055 7 view .LVU5831
 22402 0084 1646     		mov	r6, r2
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22403              		.loc 1 4054 6 view .LVU5832
 22404 0086 07FB1212 		mls	r2, r7, r2, r1
 22405              	.LVL1766:
4055:src/xeq.c     **** 
 22406              		.loc 1 4055 2 is_stmt 1 view .LVU5833
4057:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 22407              		.loc 1 4057 2 view .LVU5834
4058:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 22408              		.loc 1 4058 9 is_stmt 0 view .LVU5835
 22409 008a 59DA     		bge	.L1586
 22410 008c 6649     		ldr	r1, .L1634+16
 22411 008e 019B     		ldr	r3, [sp, #4]
 22412 0090 8C42     		cmp	r4, r1
 22413 0092 7ADA     		bge	.L1613
 22414              	.LBB3108:
 22415              	.LBI3108:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 22416              		.loc 1 250 14 is_stmt 1 view .LVU5836
 22417              	.LBE3108:
 22418              	.LBE3185:
 22419              	.LBE3102:
 251:src/xeq.c     **** }
 22420              		.loc 1 251 2 view .LVU5837
 22421              	.LVL1767:
 22422              	.LBB3192:
 22423              	.LBB3186:
 22424              	.LBB3114:
 22425              	.LBB3109:
 22426              	.LBI3109:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 22427              		.loc 1 238 14 view .LVU5838
 22428              	.LBB3110:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 22429              		.loc 1 239 2 view .LVU5839
 22430              	.LBB3111:
 22431              	.LBI3111:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22432              		.loc 1 932 5 view .LVU5840
 22433              	.LBB3112:
 933:src/xeq.c     **** }
 22434              		.loc 1 933 2 view .LVU5841
 933:src/xeq.c     **** }
 22435              		.loc 1 933 12 is_stmt 0 view .LVU5842
ARM GAS  /tmp/ccjeMhND.s 			page 586


 22436 0094 DAF80010 		ldr	r1, [r10]
 933:src/xeq.c     **** }
 22437              		.loc 1 933 24 view .LVU5843
 22438 0098 B1F8E807 		ldrh	r0, [r1, #2024]
 22439 009c 44F20103 		movw	r3, #16385
 22440              	.LBE3112:
 22441              	.LBE3111:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 22442              		.loc 1 239 5 view .LVU5844
 22443 00a0 0340     		ands	r3, r3, r0
 22444 00a2 B3F5804F 		cmp	r3, #16384
 22445              	.LBB3113:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22446              		.loc 1 240 24 view .LVU5845
 22447 00a6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22448              		.loc 1 240 3 is_stmt 1 view .LVU5846
 241:src/xeq.c     **** 	}
 22449              		.loc 1 241 3 view .LVU5847
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22450              		.loc 1 240 13 is_stmt 0 view .LVU5848
 22451 00aa 04BF     		itt	eq
 22452 00ac 0C3B     		subeq	r3, r3, #12
 241:src/xeq.c     **** 	}
 22453              		.loc 1 241 67 view .LVU5849
 22454 00ae 5B10     		asreq	r3, r3, #1
 22455              	.LVL1768:
 22456              	.L1592:
 241:src/xeq.c     **** 	}
 22457              		.loc 1 241 67 view .LVU5850
 22458              	.LBE3113:
 22459              	.LBE3110:
 22460              	.LBE3109:
 22461              	.LBE3114:
4061:src/xeq.c     **** 		goto range_error;
 22462              		.loc 1 4061 5 view .LVU5851
 22463 00b0 B342     		cmp	r3, r6
 22464 00b2 4FF00007 		mov	r7, #0
 22465              	.LVL1769:
4061:src/xeq.c     **** 		goto range_error;
 22466              		.loc 1 4061 2 is_stmt 1 view .LVU5852
4061:src/xeq.c     **** 		goto range_error;
 22467              		.loc 1 4061 5 is_stmt 0 view .LVU5853
 22468 00b6 22DC     		bgt	.L1629
 22469              	.LVL1770:
 22470              	.L1588:
 22471              	.LDL2:
4107:src/xeq.c     **** 	return 1;
 22472              		.loc 1 4107 2 is_stmt 1 view .LVU5854
 22473              	.LBB3115:
 22474              	.LBI3115:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 22475              		.loc 1 537 5 view .LVU5855
 22476              	.LBB3116:
 538:src/xeq.c     **** 		Error = e;
 22477              		.loc 1 538 2 view .LVU5856
 538:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccjeMhND.s 			page 587


 22478              		.loc 1 538 12 is_stmt 0 view .LVU5857
 22479 00b8 574B     		ldr	r3, .L1634
 538:src/xeq.c     **** 		Error = e;
 22480              		.loc 1 538 5 view .LVU5858
 22481 00ba 1A68     		ldr	r2, [r3]
 22482 00bc 002A     		cmp	r2, #0
 22483 00be AFD1     		bne	.L1611
 22484              	.LVL1771:
 22485              	.LBB3117:
 22486              	.LBI3117:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 22487              		.loc 1 537 5 is_stmt 1 view .LVU5859
 22488              	.LBB3118:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 22489              		.loc 1 539 3 view .LVU5860
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 22490              		.loc 1 539 9 is_stmt 0 view .LVU5861
 22491 00c0 0822     		movs	r2, #8
 22492              	.LBE3118:
 22493              	.LBE3117:
 22494              	.LBE3116:
 22495              	.LBE3115:
4108:src/xeq.c     **** }
 22496              		.loc 1 4108 9 view .LVU5862
 22497 00c2 0120     		movs	r0, #1
 22498              	.LBB3122:
 22499              	.LBB3121:
 22500              	.LBB3120:
 22501              	.LBB3119:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 22502              		.loc 1 539 9 view .LVU5863
 22503 00c4 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 22504              		.loc 1 540 3 is_stmt 1 view .LVU5864
 22505              	.LBE3119:
 22506              	.LBE3120:
 22507              	.LBE3121:
 22508              	.LBE3122:
 22509              	.LBE3186:
 22510              	.LBE3192:
4109:src/xeq.c     **** 
 22511              		.loc 1 4109 1 is_stmt 0 view .LVU5865
 22512 00c6 15B0     		add	sp, sp, #84
 22513              		.cfi_remember_state
 22514              		.cfi_def_cfa_offset 36
 22515              		@ sp needed
 22516 00c8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 22517              	.LVL1772:
 22518              	.L1585:
 22519              		.cfi_restore_state
 22520              	.LBB3193:
 22521              	.LBB3187:
4045:src/xeq.c     **** 			goto range_error;
 22522              		.loc 1 4045 3 is_stmt 1 view .LVU5866
4045:src/xeq.c     **** 			goto range_error;
 22523              		.loc 1 4045 6 is_stmt 0 view .LVU5867
 22524 00cc 002F     		cmp	r7, #0
ARM GAS  /tmp/ccjeMhND.s 			page 588


 22525 00ce F3D0     		beq	.L1588
4047:src/xeq.c     **** 	}
 22526              		.loc 1 4047 3 is_stmt 1 view .LVU5868
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22527              		.loc 1 4052 8 is_stmt 0 view .LVU5869
 22528 00d0 524D     		ldr	r5, .L1634+4
4057:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 22529              		.loc 1 4057 30 view .LVU5870
 22530 00d2 564A     		ldr	r2, .L1634+20
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22531              		.loc 1 4054 6 view .LVU5871
 22532 00d4 524E     		ldr	r6, .L1634+8
4047:src/xeq.c     **** 	}
 22533              		.loc 1 4047 8 view .LVU5872
 22534 00d6 6442     		rsbs	r4, r4, #0
 22535              	.LVL1773:
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22536              		.loc 1 4052 2 is_stmt 1 view .LVU5873
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22537              		.loc 1 4052 8 is_stmt 0 view .LVU5874
 22538 00d8 A5FB0435 		umull	r3, r5, r5, r4
4053:src/xeq.c     **** 	num = rsrc % 100;		// nn
 22539              		.loc 1 4053 7 view .LVU5875
 22540 00dc AB09     		lsrs	r3, r5, #6
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22541              		.loc 1 4054 6 view .LVU5876
 22542 00de A6FB0316 		umull	r1, r6, r6, r3
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22543              		.loc 1 4052 8 view .LVU5877
 22544 00e2 4FF47A70 		mov	r0, #1000
4057:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 22545              		.loc 1 4057 30 view .LVU5878
 22546 00e6 1168     		ldr	r1, [r2]
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22547              		.loc 1 4052 8 view .LVU5879
 22548 00e8 00FB1345 		mls	r5, r0, r3, r4
 22549              	.LVL1774:
4053:src/xeq.c     **** 	num = rsrc % 100;		// nn
 22550              		.loc 1 4053 2 is_stmt 1 view .LVU5880
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22551              		.loc 1 4054 2 view .LVU5881
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22552              		.loc 1 4054 6 is_stmt 0 view .LVU5882
 22553 00ec 7209     		lsrs	r2, r6, #5
 22554 00ee 6420     		movs	r0, #100
4055:src/xeq.c     **** 
 22555              		.loc 1 4055 7 view .LVU5883
 22556 00f0 1646     		mov	r6, r2
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22557              		.loc 1 4054 6 view .LVU5884
 22558 00f2 00FB1232 		mls	r2, r0, r2, r3
 22559              	.LVL1775:
4055:src/xeq.c     **** 
 22560              		.loc 1 4055 2 is_stmt 1 view .LVU5885
4057:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 22561              		.loc 1 4057 2 view .LVU5886
4058:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
ARM GAS  /tmp/ccjeMhND.s 			page 589


 22562              		.loc 1 4058 9 is_stmt 0 view .LVU5887
 22563 00f6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 22564              	.LVL1776:
 22565              	.L1589:
4061:src/xeq.c     **** 		goto range_error;
 22566              		.loc 1 4061 2 is_stmt 1 view .LVU5888
4061:src/xeq.c     **** 		goto range_error;
 22567              		.loc 1 4061 5 is_stmt 0 view .LVU5889
 22568 00fa B342     		cmp	r3, r6
 22569 00fc DCDD     		ble	.L1588
 22570              	.L1629:
4064:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 22571              		.loc 1 4064 2 is_stmt 1 view .LVU5890
4064:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 22572              		.loc 1 4064 5 is_stmt 0 view .LVU5891
 22573 00fe B8F1000F 		cmp	r8, #0
 22574 0102 25D0     		beq	.L1593
4065:src/xeq.c     **** 
 22575              		.loc 1 4065 3 is_stmt 1 view .LVU5892
4065:src/xeq.c     **** 
 22576              		.loc 1 4065 52 is_stmt 0 view .LVU5893
 22577 0104 6F2D     		cmp	r5, #111
 22578 0106 27DD     		ble	.L1594
 22579              	.LBB3123:
 22580              	.LBI3123:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 22581              		.loc 1 230 5 is_stmt 1 view .LVU5894
 22582              	.LBE3123:
 22583              	.LBE3187:
 22584              	.LBE3193:
 231:src/xeq.c     **** }
 22585              		.loc 1 231 2 view .LVU5895
 22586              	.LVL1777:
 22587              	.LBB3194:
 22588              	.LBB3188:
 22589              	.LBB3148:
 22590              	.LBB3124:
 22591              	.LBI3124:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 22592              		.loc 1 222 5 view .LVU5896
 22593              	.LBB3125:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22594              		.loc 1 223 2 view .LVU5897
 22595              	.LBB3126:
 22596              	.LBI3126:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22597              		.loc 1 932 5 view .LVU5898
 22598              	.LBB3127:
 933:src/xeq.c     **** }
 22599              		.loc 1 933 2 view .LVU5899
 933:src/xeq.c     **** }
 22600              		.loc 1 933 12 is_stmt 0 view .LVU5900
 22601 0108 DAF80010 		ldr	r1, [r10]
 22602              	.LVL1778:
 933:src/xeq.c     **** }
 22603              		.loc 1 933 12 view .LVU5901
 22604              	.LBE3127:
ARM GAS  /tmp/ccjeMhND.s 			page 590


 22605              	.LBE3126:
 224:src/xeq.c     **** }
 22606              		.loc 1 224 2 is_stmt 1 view .LVU5902
 22607              	.LBB3130:
 22608              	.LBI3130:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 22609              		.loc 1 214 5 view .LVU5903
 22610              	.LBB3131:
 215:src/xeq.c     **** }
 22611              		.loc 1 215 2 view .LVU5904
 215:src/xeq.c     **** }
 22612              		.loc 1 215 9 is_stmt 0 view .LVU5905
 22613 010c B1F9DE07 		ldrsh	r0, [r1, #2014]
 215:src/xeq.c     **** }
 22614              		.loc 1 215 57 view .LVU5906
 22615 0110 0028     		cmp	r0, #0
 22616 0112 69DB     		blt	.L1630
 22617              	.LVL1779:
 215:src/xeq.c     **** }
 22618              		.loc 1 215 57 view .LVU5907
 22619              	.LBE3131:
 22620              	.LBE3130:
 22621              	.LBE3125:
 22622              	.LBE3124:
 22623              	.LBE3148:
4067:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22624              		.loc 1 4067 3 is_stmt 1 view .LVU5908
 22625              	.LBB3149:
 22626              	.LBB3146:
 22627              	.LBB3144:
 22628              	.LBB3137:
 22629              	.LBB3132:
 22630 0114 0021     		movs	r1, #0
 22631              	.LVL1780:
4067:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22632              		.loc 1 4067 3 is_stmt 0 view .LVU5909
 22633              	.LBE3132:
 22634              	.LBE3137:
 22635              	.LBE3144:
 22636              	.LBE3146:
 22637              	.LBE3149:
4067:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22638              		.loc 1 4067 6 view .LVU5910
 22639 0116 82B3     		cbz	r2, .L1596
 22640              	.LVL1781:
 22641              	.L1597:
4086:src/xeq.c     **** 		if (rdest + num > mx_dest)
 22642              		.loc 1 4086 4 is_stmt 1 view .LVU5911
4086:src/xeq.c     **** 		if (rdest + num > mx_dest)
 22643              		.loc 1 4086 12 is_stmt 0 view .LVU5912
 22644 0118 7031     		adds	r1, r1, #112
 22645              	.LVL1782:
 22646              	.L1600:
4087:src/xeq.c     **** 			goto range_error;
 22647              		.loc 1 4087 3 is_stmt 1 view .LVU5913
4087:src/xeq.c     **** 			goto range_error;
 22648              		.loc 1 4087 13 is_stmt 0 view .LVU5914
ARM GAS  /tmp/ccjeMhND.s 			page 591


 22649 011a A818     		adds	r0, r5, r2
4087:src/xeq.c     **** 			goto range_error;
 22650              		.loc 1 4087 6 view .LVU5915
 22651 011c 8842     		cmp	r0, r1
 22652 011e CBDC     		bgt	.L1588
4090:src/xeq.c     **** 	}
 22653              		.loc 1 4090 3 is_stmt 1 view .LVU5916
4090:src/xeq.c     **** 	}
 22654              		.loc 1 4090 6 is_stmt 0 view .LVU5917
 22655 0120 C8F80050 		str	r5, [r8]
 22656 0124 B118     		adds	r1, r6, r2
 22657              	.LVL1783:
 22658              	.L1606:
4097:src/xeq.c     **** 		goto range_error;
 22659              		.loc 1 4097 2 is_stmt 1 view .LVU5918
4097:src/xeq.c     **** 		goto range_error;
 22660              		.loc 1 4097 5 is_stmt 0 view .LVU5919
 22661 0126 8B42     		cmp	r3, r1
 22662 0128 C6DB     		blt	.L1588
 22663              	.L1608:
4101:src/xeq.c     **** 	*n = num;
 22664              		.loc 1 4101 2 is_stmt 1 view .LVU5920
4101:src/xeq.c     **** 	*n = num;
 22665              		.loc 1 4101 37 is_stmt 0 view .LVU5921
 22666 012a 0FB1     		cbz	r7, .L1609
4101:src/xeq.c     **** 	*n = num;
 22667              		.loc 1 4101 37 view .LVU5922
 22668 012c 06F57A76 		add	r6, r6, #1000
 22669              	.LVL1784:
 22670              	.L1609:
4104:src/xeq.c     **** 
 22671              		.loc 1 4104 9 view .LVU5923
 22672 0130 0020     		movs	r0, #0
4101:src/xeq.c     **** 	*n = num;
 22673              		.loc 1 4101 5 view .LVU5924
 22674 0132 CBF80060 		str	r6, [fp]
4102:src/xeq.c     **** 
 22675              		.loc 1 4102 2 is_stmt 1 view .LVU5925
4102:src/xeq.c     **** 
 22676              		.loc 1 4102 5 is_stmt 0 view .LVU5926
 22677 0136 C9F80020 		str	r2, [r9]
4104:src/xeq.c     **** 
 22678              		.loc 1 4104 2 is_stmt 1 view .LVU5927
 22679              	.LBE3188:
 22680              	.LBE3194:
4109:src/xeq.c     **** 
 22681              		.loc 1 4109 1 is_stmt 0 view .LVU5928
 22682 013a 15B0     		add	sp, sp, #84
 22683              		.cfi_remember_state
 22684              		.cfi_def_cfa_offset 36
 22685              		@ sp needed
 22686 013c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 22687              	.LVL1785:
 22688              	.L1586:
 22689              		.cfi_restore_state
 22690              	.LBB3195:
 22691              	.LBB3189:
ARM GAS  /tmp/ccjeMhND.s 			page 592


 22692              	.LBB3150:
 22693              	.LBI3150:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 22694              		.loc 1 230 5 is_stmt 1 view .LVU5929
 22695              	.LBE3150:
 22696              	.LBE3189:
 22697              	.LBE3195:
 231:src/xeq.c     **** }
 22698              		.loc 1 231 2 view .LVU5930
 22699              	.LBB3196:
 22700              	.LBB3190:
 22701              	.LBB3171:
 22702              	.LBB3151:
 22703              	.LBI3151:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 22704              		.loc 1 222 5 view .LVU5931
 22705              	.LBB3152:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22706              		.loc 1 223 2 view .LVU5932
 22707              	.LBB3153:
 22708              	.LBI3153:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22709              		.loc 1 932 5 view .LVU5933
 22710              	.LBB3154:
 933:src/xeq.c     **** }
 22711              		.loc 1 933 2 view .LVU5934
 933:src/xeq.c     **** }
 22712              		.loc 1 933 12 is_stmt 0 view .LVU5935
 22713 0140 DAF80030 		ldr	r3, [r10]
 22714              	.LVL1786:
 933:src/xeq.c     **** }
 22715              		.loc 1 933 12 view .LVU5936
 22716              	.LBE3154:
 22717              	.LBE3153:
 224:src/xeq.c     **** }
 22718              		.loc 1 224 2 is_stmt 1 view .LVU5937
 22719              	.LBB3157:
 22720              	.LBI3157:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 22721              		.loc 1 214 5 view .LVU5938
 22722              	.LBB3158:
 215:src/xeq.c     **** }
 22723              		.loc 1 215 2 view .LVU5939
 215:src/xeq.c     **** }
 22724              		.loc 1 215 9 is_stmt 0 view .LVU5940
 22725 0144 B3F9DE17 		ldrsh	r1, [r3, #2014]
 215:src/xeq.c     **** }
 22726              		.loc 1 215 57 view .LVU5941
 22727 0148 0029     		cmp	r1, #0
 22728 014a 38DB     		blt	.L1631
 22729 014c 7023     		movs	r3, #112
 22730              	.LVL1787:
 215:src/xeq.c     **** }
 22731              		.loc 1 215 57 view .LVU5942
 22732 014e AFE7     		b	.L1592
 22733              	.LVL1788:
 22734              	.L1593:
ARM GAS  /tmp/ccjeMhND.s 			page 593


 215:src/xeq.c     **** }
 22735              		.loc 1 215 57 view .LVU5943
 22736              	.LBE3158:
 22737              	.LBE3157:
 22738              	.LBE3152:
 22739              	.LBE3151:
 22740              	.LBE3171:
4093:src/xeq.c     **** 			num = mx_src - rsrc;
 22741              		.loc 1 4093 3 is_stmt 1 view .LVU5944
4093:src/xeq.c     **** 			num = mx_src - rsrc;
 22742              		.loc 1 4093 6 is_stmt 0 view .LVU5945
 22743 0150 002A     		cmp	r2, #0
 22744 0152 32D1     		bne	.L1632
4094:src/xeq.c     **** 		}
 22745              		.loc 1 4094 4 is_stmt 1 view .LVU5946
4094:src/xeq.c     **** 		}
 22746              		.loc 1 4094 8 is_stmt 0 view .LVU5947
 22747 0154 9A1B     		subs	r2, r3, r6
 22748              	.LVL1789:
4097:src/xeq.c     **** 		goto range_error;
 22749              		.loc 1 4097 2 is_stmt 1 view .LVU5948
 22750 0156 E8E7     		b	.L1608
 22751              	.L1594:
 22752              	.LBB3172:
 22753              	.LBI3172:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 22754              		.loc 1 250 14 view .LVU5949
 22755              	.LBE3172:
 22756              	.LBE3190:
 22757              	.LBE3196:
 251:src/xeq.c     **** }
 22758              		.loc 1 251 2 view .LVU5950
 22759              	.LVL1790:
 22760              	.LBB3197:
 22761              	.LBB3191:
 22762              	.LBB3181:
 22763              	.LBB3173:
 22764              	.LBI3173:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 22765              		.loc 1 238 14 view .LVU5951
 22766              	.LBB3174:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 22767              		.loc 1 239 2 view .LVU5952
 22768              	.LBB3175:
 22769              	.LBI3175:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22770              		.loc 1 932 5 view .LVU5953
 22771              	.LBB3176:
 933:src/xeq.c     **** }
 22772              		.loc 1 933 2 view .LVU5954
 933:src/xeq.c     **** }
 22773              		.loc 1 933 12 is_stmt 0 view .LVU5955
 22774 0158 DAF80000 		ldr	r0, [r10]
 933:src/xeq.c     **** }
 22775              		.loc 1 933 24 view .LVU5956
 22776 015c B0F8E8C7 		ldrh	ip, [r0, #2024]
 22777 0160 44F20101 		movw	r1, #16385
ARM GAS  /tmp/ccjeMhND.s 			page 594


 22778              	.LBE3176:
 22779              	.LBE3175:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 22780              		.loc 1 239 5 view .LVU5957
 22781 0164 01EA0C01 		and	r1, r1, ip
 22782 0168 B1F5804F 		cmp	r1, #16384
 22783              	.LBB3177:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22784              		.loc 1 240 24 view .LVU5958
 22785 016c 90F8CF17 		ldrb	r1, [r0, #1999]	@ zero_extendqisi2
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22786              		.loc 1 240 3 is_stmt 1 view .LVU5959
 241:src/xeq.c     **** 	}
 22787              		.loc 1 241 3 view .LVU5960
 22788              	.LVL1791:
 241:src/xeq.c     **** 	}
 22789              		.loc 1 241 3 is_stmt 0 view .LVU5961
 22790              	.LBE3177:
 22791              	.LBE3174:
 22792              	.LBE3173:
 22793              	.LBE3181:
4067:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22794              		.loc 1 4067 3 is_stmt 1 view .LVU5962
 22795              	.LBB3182:
 22796              	.LBB3180:
 22797              	.LBB3179:
 22798              	.LBB3178:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22799              		.loc 1 240 13 is_stmt 0 view .LVU5963
 22800 0170 04BF     		itt	eq
 22801 0172 0C39     		subeq	r1, r1, #12
 241:src/xeq.c     **** 	}
 22802              		.loc 1 241 67 view .LVU5964
 22803 0174 4910     		asreq	r1, r1, #1
 22804              	.LBE3178:
 22805              	.LBE3179:
 22806              	.LBE3180:
 22807              	.LBE3182:
4067:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22808              		.loc 1 4067 6 view .LVU5965
 22809 0176 002A     		cmp	r2, #0
 22810 0178 CFD1     		bne	.L1600
 22811              	.L1596:
4069:src/xeq.c     **** 				// source & destination in different memory areas
 22812              		.loc 1 4069 4 is_stmt 1 view .LVU5966
4069:src/xeq.c     **** 				// source & destination in different memory areas
 22813              		.loc 1 4069 7 is_stmt 0 view .LVU5967
 22814 017a 4FB1     		cbz	r7, .L1633
 22815              	.LVL1792:
 22816              	.L1601:
4071:src/xeq.c     **** 			else {
 22817              		.loc 1 4071 5 is_stmt 1 view .LVU5968
4071:src/xeq.c     **** 			else {
 22818              		.loc 1 4071 9 is_stmt 0 view .LVU5969
 22819 017c 8B42     		cmp	r3, r1
 22820 017e 1A46     		mov	r2, r3
 22821 0180 A8BF     		it	ge
ARM GAS  /tmp/ccjeMhND.s 			page 595


 22822 0182 0A46     		movge	r2, r1
 22823              	.LVL1793:
 22824              	.L1603:
4085:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 22825              		.loc 1 4085 3 is_stmt 1 view .LVU5970
4085:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 22826              		.loc 1 4085 6 is_stmt 0 view .LVU5971
 22827 0184 6F2D     		cmp	r5, #111
 22828 0186 C8DD     		ble	.L1600
 22829 0188 C6E7     		b	.L1597
 22830              	.LVL1794:
 22831              	.L1613:
4085:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 22832              		.loc 1 4085 6 view .LVU5972
 22833 018a 1F46     		mov	r7, r3
4058:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 22834              		.loc 1 4058 9 view .LVU5973
 22835 018c 7023     		movs	r3, #112
 22836 018e B4E7     		b	.L1589
 22837              	.LVL1795:
 22838              	.L1633:
4069:src/xeq.c     **** 				// source & destination in different memory areas
 22839              		.loc 1 4069 42 view .LVU5974
 22840 0190 244A     		ldr	r2, .L1634+12
 22841              	.LVL1796:
4069:src/xeq.c     **** 				// source & destination in different memory areas
 22842              		.loc 1 4069 14 view .LVU5975
 22843 0192 9442     		cmp	r4, r2
 22844 0194 B4BF     		ite	lt
 22845 0196 0024     		movlt	r4, #0
 22846 0198 0124     		movge	r4, #1
 22847 019a 6F2D     		cmp	r5, #111
 22848 019c D4BF     		ite	le
 22849 019e 0022     		movle	r2, #0
 22850 01a0 0122     		movgt	r2, #1
 22851 01a2 9442     		cmp	r4, r2
 22852 01a4 EAD1     		bne	.L1601
4073:src/xeq.c     **** 					num = mx_src - rsrc;
 22853              		.loc 1 4073 5 is_stmt 1 view .LVU5976
4073:src/xeq.c     **** 					num = mx_src - rsrc;
 22854              		.loc 1 4073 8 is_stmt 0 view .LVU5977
 22855 01a6 B542     		cmp	r5, r6
4074:src/xeq.c     **** 					q = rsrc - rdest;
 22856              		.loc 1 4074 6 is_stmt 1 view .LVU5978
4078:src/xeq.c     **** 					q = rdest - rsrc;
 22857              		.loc 1 4078 10 is_stmt 0 view .LVU5979
 22858 01a8 A7BF     		ittee	ge
 22859 01aa 4A1B     		subge	r2, r1, r5
4079:src/xeq.c     **** 				}
 22860              		.loc 1 4079 8 view .LVU5980
 22861 01ac A81B     		subge	r0, r5, r6
4074:src/xeq.c     **** 					q = rsrc - rdest;
 22862              		.loc 1 4074 10 view .LVU5981
 22863 01ae 9A1B     		sublt	r2, r3, r6
4075:src/xeq.c     **** 				}
 22864              		.loc 1 4075 6 is_stmt 1 view .LVU5982
4075:src/xeq.c     **** 				}
ARM GAS  /tmp/ccjeMhND.s 			page 596


 22865              		.loc 1 4075 8 is_stmt 0 view .LVU5983
 22866 01b0 701B     		sublt	r0, r6, r5
4078:src/xeq.c     **** 					q = rdest - rsrc;
 22867              		.loc 1 4078 6 is_stmt 1 view .LVU5984
 22868              	.LVL1797:
4079:src/xeq.c     **** 				}
 22869              		.loc 1 4079 6 view .LVU5985
4081:src/xeq.c     **** 					num = q;
 22870              		.loc 1 4081 5 view .LVU5986
 22871 01b2 8242     		cmp	r2, r0
 22872 01b4 A8BF     		it	ge
 22873 01b6 0246     		movge	r2, r0
 22874              	.LVL1798:
4081:src/xeq.c     **** 					num = q;
 22875              		.loc 1 4081 5 is_stmt 0 view .LVU5987
 22876 01b8 E4E7     		b	.L1603
 22877              	.LVL1799:
 22878              	.L1632:
4081:src/xeq.c     **** 					num = q;
 22879              		.loc 1 4081 5 view .LVU5988
 22880 01ba 9119     		adds	r1, r2, r6
 22881 01bc B3E7     		b	.L1606
 22882              	.LVL1800:
 22883              	.L1631:
 22884              	.LBB3183:
 22885              	.LBB3170:
 22886              	.LBB3169:
 22887              	.LBB3163:
 22888              	.LBB3155:
 933:src/xeq.c     **** }
 22889              		.loc 1 933 24 view .LVU5989
 22890 01be B3F8E877 		ldrh	r7, [r3, #2024]
 22891              	.LBE3155:
 22892              	.LBE3163:
 22893              	.LBB3164:
 22894              	.LBB3159:
 215:src/xeq.c     **** }
 22895              		.loc 1 215 25 view .LVU5990
 22896 01c2 1B48     		ldr	r0, .L1634+24
 22897              	.LBE3159:
 22898              	.LBE3164:
 22899              	.LBB3165:
 22900              	.LBB3156:
 933:src/xeq.c     **** }
 22901              		.loc 1 933 24 view .LVU5991
 22902 01c4 44F20103 		movw	r3, #16385
 22903              	.LVL1801:
 933:src/xeq.c     **** }
 22904              		.loc 1 933 24 view .LVU5992
 22905              	.LBE3156:
 22906              	.LBE3165:
 22907              	.LBB3166:
 22908              	.LBB3160:
 215:src/xeq.c     **** }
 22909              		.loc 1 215 25 view .LVU5993
 22910 01c8 0068     		ldr	r0, [r0]
 22911              	.LBE3160:
ARM GAS  /tmp/ccjeMhND.s 			page 597


 22912              	.LBE3166:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22913              		.loc 1 223 73 view .LVU5994
 22914 01ca 3B40     		ands	r3, r3, r7
 22915 01cc A3F58043 		sub	r3, r3, #16384
 22916              	.LBB3167:
 22917              	.LBB3161:
 215:src/xeq.c     **** }
 22918              		.loc 1 215 57 view .LVU5995
 22919 01d0 30F81110 		ldrh	r1, [r0, r1, lsl #1]
 22920              	.LBE3161:
 22921              	.LBE3167:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22922              		.loc 1 223 73 view .LVU5996
 22923 01d4 B3FA83F3 		clz	r3, r3
 22924 01d8 5B09     		lsrs	r3, r3, #5
 22925 01da 0233     		adds	r3, r3, #2
 22926              	.LBB3168:
 22927              	.LBB3162:
 215:src/xeq.c     **** }
 22928              		.loc 1 215 57 view .LVU5997
 22929 01dc C1F30B01 		ubfx	r1, r1, #0, #12
 22930 01e0 41FA03F3 		asr	r3, r1, r3
 22931 01e4 7033     		adds	r3, r3, #112
 22932 01e6 63E7     		b	.L1592
 22933              	.LVL1802:
 22934              	.L1630:
 215:src/xeq.c     **** }
 22935              		.loc 1 215 57 view .LVU5998
 22936              	.LBE3162:
 22937              	.LBE3168:
 22938              	.LBE3169:
 22939              	.LBE3170:
 22940              	.LBE3183:
 22941              	.LBB3184:
 22942              	.LBB3147:
 22943              	.LBB3145:
 22944              	.LBB3138:
 22945              	.LBB3128:
 933:src/xeq.c     **** }
 22946              		.loc 1 933 24 view .LVU5999
 22947 01e8 B1F8E8E7 		ldrh	lr, [r1, #2024]
 22948              	.LBE3128:
 22949              	.LBE3138:
 22950              	.LBB3139:
 22951              	.LBB3133:
 215:src/xeq.c     **** }
 22952              		.loc 1 215 25 view .LVU6000
 22953 01ec DFF840C0 		ldr	ip, .L1634+24
 22954              	.LBE3133:
 22955              	.LBE3139:
 22956              	.LBB3140:
 22957              	.LBB3129:
 933:src/xeq.c     **** }
 22958              		.loc 1 933 24 view .LVU6001
 22959 01f0 44F20101 		movw	r1, #16385
 22960              	.LVL1803:
ARM GAS  /tmp/ccjeMhND.s 			page 598


 933:src/xeq.c     **** }
 22961              		.loc 1 933 24 view .LVU6002
 22962              	.LBE3129:
 22963              	.LBE3140:
 22964              	.LBB3141:
 22965              	.LBB3134:
 215:src/xeq.c     **** }
 22966              		.loc 1 215 25 view .LVU6003
 22967 01f4 DCF800C0 		ldr	ip, [ip]
 22968              	.LBE3134:
 22969              	.LBE3141:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22970              		.loc 1 223 73 view .LVU6004
 22971 01f8 01EA0E01 		and	r1, r1, lr
 22972 01fc A1F58041 		sub	r1, r1, #16384
 22973              	.LBB3142:
 22974              	.LBB3135:
 215:src/xeq.c     **** }
 22975              		.loc 1 215 57 view .LVU6005
 22976 0200 3CF810C0 		ldrh	ip, [ip, r0, lsl #1]
 22977              	.LBE3135:
 22978              	.LBE3142:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22979              		.loc 1 223 73 view .LVU6006
 22980 0204 B1FA81F1 		clz	r1, r1
 22981 0208 4909     		lsrs	r1, r1, #5
 22982 020a 881C     		adds	r0, r1, #2
 22983              	.LBB3143:
 22984              	.LBB3136:
 215:src/xeq.c     **** }
 22985              		.loc 1 215 57 view .LVU6007
 22986 020c CCF30B01 		ubfx	r1, ip, #0, #12
 22987 0210 0141     		asrs	r1, r1, r0
 22988              	.LVL1804:
 215:src/xeq.c     **** }
 22989              		.loc 1 215 57 view .LVU6008
 22990              	.LBE3136:
 22991              	.LBE3143:
 22992              	.LBE3145:
 22993              	.LBE3147:
 22994              	.LBE3184:
4067:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22995              		.loc 1 4067 3 is_stmt 1 view .LVU6009
4067:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22996              		.loc 1 4067 6 is_stmt 0 view .LVU6010
 22997 0212 002A     		cmp	r2, #0
 22998 0214 B1D0     		beq	.L1596
 22999 0216 7FE7     		b	.L1597
 23000              	.L1635:
 23001              		.align	2
 23002              	.L1634:
 23003 0218 00000000 		.word	Error
 23004 021c D34D6210 		.word	274877907
 23005 0220 1F85EB51 		.word	1374389535
 23006 0224 00E6AA00 		.word	11200000
 23007 0228 80969800 		.word	10000000
 23008 022c 00000000 		.word	backup_ram
ARM GAS  /tmp/ccjeMhND.s 			page 599


 23009 0230 00000000 		.word	RetStk
 23010 0234 00000000 		.word	main_ram
 23011              	.LBE3191:
 23012              	.LBE3197:
 23013              		.cfi_endproc
 23014              	.LFE224:
 23016              		.section	.text.op_regcopy,"ax",%progbits
 23017              		.align	1
 23018              		.p2align 2,,3
 23019              		.global	op_regcopy
 23020              		.syntax unified
 23021              		.thumb
 23022              		.thumb_func
 23023              		.fpu fpv4-sp-d16
 23025              	op_regcopy:
 23026              	.LVL1805:
 23027              	.LFB225:
4111:src/xeq.c     **** 	int s, n, d;
 23028              		.loc 1 4111 32 is_stmt 1 view -0
 23029              		.cfi_startproc
 23030              		@ args = 0, pretend = 0, frame = 16
 23031              		@ frame_needed = 0, uses_anonymous_args = 0
4112:src/xeq.c     **** 
 23032              		.loc 1 4112 2 view .LVU6012
4114:src/xeq.c     **** 		return;
 23033              		.loc 1 4114 2 view .LVU6013
4111:src/xeq.c     **** 	int s, n, d;
 23034              		.loc 1 4111 32 is_stmt 0 view .LVU6014
 23035 0000 10B5     		push	{r4, lr}
 23036              		.cfi_def_cfa_offset 8
 23037              		.cfi_offset 4, -8
 23038              		.cfi_offset 14, -4
 23039 0002 84B0     		sub	sp, sp, #16
 23040              		.cfi_def_cfa_offset 24
4114:src/xeq.c     **** 		return;
 23041              		.loc 1 4114 6 view .LVU6015
 23042 0004 0123     		movs	r3, #1
 23043 0006 03AA     		add	r2, sp, #12
 23044 0008 02A9     		add	r1, sp, #8
 23045 000a 01A8     		add	r0, sp, #4
 23046              	.LVL1806:
4114:src/xeq.c     **** 		return;
 23047              		.loc 1 4114 6 view .LVU6016
 23048 000c FFF7FEFF 		bl	reg_decode
 23049              	.LVL1807:
4114:src/xeq.c     **** 		return;
 23050              		.loc 1 4114 5 view .LVU6017
 23051 0010 B8B9     		cbnz	r0, .L1636
4116:src/xeq.c     **** }
 23052              		.loc 1 4116 2 is_stmt 1 view .LVU6018
 23053 0012 0398     		ldr	r0, [sp, #12]
 23054 0014 FFF7FEFF 		bl	get_reg_n
 23055              	.LVL1808:
 23056 0018 0446     		mov	r4, r0
 23057 001a 0198     		ldr	r0, [sp, #4]
 23058 001c FFF7FEFF 		bl	get_reg_n
 23059              	.LVL1809:
ARM GAS  /tmp/ccjeMhND.s 			page 600


 23060              	.LBB3198:
 23061              	.LBB3199:
 23062              	.LBB3200:
 23063              	.LBB3201:
 933:src/xeq.c     **** }
 23064              		.loc 1 933 24 is_stmt 0 view .LVU6019
 23065 0020 094B     		ldr	r3, .L1641
 23066              	.LBE3201:
 23067              	.LBE3200:
 23068              	.LBE3199:
 23069              	.LBE3198:
4116:src/xeq.c     **** }
 23070              		.loc 1 4116 2 view .LVU6020
 23071 0022 029A     		ldr	r2, [sp, #8]
 23072              	.LVL1810:
 23073              	.LBB3208:
 23074              	.LBB3206:
 23075              	.LBB3204:
 23076              	.LBB3202:
 933:src/xeq.c     **** }
 23077              		.loc 1 933 24 view .LVU6021
 23078 0024 1B68     		ldr	r3, [r3]
 23079 0026 B3F8E817 		ldrh	r1, [r3, #2024]
 23080 002a 44F20103 		movw	r3, #16385
 23081              	.LBE3202:
 23082              	.LBE3204:
1352:src/xeq.c     **** 		n <<= 1;
 23083              		.loc 1 1352 5 view .LVU6022
 23084 002e 0B40     		ands	r3, r3, r1
 23085 0030 B3F5804F 		cmp	r3, #16384
1353:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 23086              		.loc 1 1353 5 view .LVU6023
 23087 0034 08BF     		it	eq
 23088 0036 5200     		lsleq	r2, r2, #1
 23089              	.LBE3206:
 23090              	.LBE3208:
4116:src/xeq.c     **** }
 23091              		.loc 1 4116 2 view .LVU6024
 23092 0038 0146     		mov	r1, r0
 23093              	.LVL1811:
 23094              	.LBB3209:
 23095              	.LBI3198:
1351:src/xeq.c     **** 	if (is_dblmode())
 23096              		.loc 1 1351 6 is_stmt 1 view .LVU6025
 23097              	.LBB3207:
1352:src/xeq.c     **** 		n <<= 1;
 23098              		.loc 1 1352 2 view .LVU6026
 23099              	.LBB3205:
 23100              	.LBI3200:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23101              		.loc 1 932 5 view .LVU6027
 23102              	.LBB3203:
 933:src/xeq.c     **** }
 23103              		.loc 1 933 2 view .LVU6028
 23104              	.LBE3203:
 23105              	.LBE3205:
1353:src/xeq.c     **** 	xcopy(dest, src, n << 3);
ARM GAS  /tmp/ccjeMhND.s 			page 601


 23106              		.loc 1 1353 3 view .LVU6029
1354:src/xeq.c     **** }
 23107              		.loc 1 1354 2 view .LVU6030
 23108 003a D200     		lsls	r2, r2, #3
 23109              	.LVL1812:
1354:src/xeq.c     **** }
 23110              		.loc 1 1354 2 is_stmt 0 view .LVU6031
 23111 003c 2046     		mov	r0, r4
 23112              	.LVL1813:
1354:src/xeq.c     **** }
 23113              		.loc 1 1354 2 view .LVU6032
 23114 003e FFF7FEFF 		bl	xcopy
 23115              	.LVL1814:
 23116              	.L1636:
1354:src/xeq.c     **** }
 23117              		.loc 1 1354 2 view .LVU6033
 23118              	.LBE3207:
 23119              	.LBE3209:
4117:src/xeq.c     **** 
 23120              		.loc 1 4117 1 view .LVU6034
 23121 0042 04B0     		add	sp, sp, #16
 23122              		.cfi_def_cfa_offset 8
 23123              		@ sp needed
 23124 0044 10BD     		pop	{r4, pc}
 23125              	.L1642:
 23126 0046 00BF     		.align	2
 23127              	.L1641:
 23128 0048 00000000 		.word	main_ram
 23129              		.cfi_endproc
 23130              	.LFE225:
 23132              		.section	.text.op_regswap,"ax",%progbits
 23133              		.align	1
 23134              		.p2align 2,,3
 23135              		.global	op_regswap
 23136              		.syntax unified
 23137              		.thumb
 23138              		.thumb_func
 23139              		.fpu fpv4-sp-d16
 23141              	op_regswap:
 23142              	.LVL1815:
 23143              	.LFB226:
4119:src/xeq.c     **** 	int s, n, d, i;
 23144              		.loc 1 4119 32 is_stmt 1 view -0
 23145              		.cfi_startproc
 23146              		@ args = 0, pretend = 0, frame = 16
 23147              		@ frame_needed = 0, uses_anonymous_args = 0
4120:src/xeq.c     **** 
 23148              		.loc 1 4120 2 view .LVU6036
4122:src/xeq.c     **** 		return;
 23149              		.loc 1 4122 2 view .LVU6037
4119:src/xeq.c     **** 	int s, n, d, i;
 23150              		.loc 1 4119 32 is_stmt 0 view .LVU6038
 23151 0000 30B5     		push	{r4, r5, lr}
 23152              		.cfi_def_cfa_offset 12
 23153              		.cfi_offset 4, -12
 23154              		.cfi_offset 5, -8
 23155              		.cfi_offset 14, -4
ARM GAS  /tmp/ccjeMhND.s 			page 602


 23156 0002 85B0     		sub	sp, sp, #20
 23157              		.cfi_def_cfa_offset 32
4122:src/xeq.c     **** 		return;
 23158              		.loc 1 4122 6 view .LVU6039
 23159 0004 0023     		movs	r3, #0
 23160 0006 03AA     		add	r2, sp, #12
 23161 0008 02A9     		add	r1, sp, #8
 23162 000a 01A8     		add	r0, sp, #4
 23163              	.LVL1816:
4122:src/xeq.c     **** 		return;
 23164              		.loc 1 4122 6 view .LVU6040
 23165 000c FFF7FEFF 		bl	reg_decode
 23166              	.LVL1817:
4122:src/xeq.c     **** 		return;
 23167              		.loc 1 4122 5 view .LVU6041
 23168 0010 E8B9     		cbnz	r0, .L1643
4122:src/xeq.c     **** 		return;
 23169              		.loc 1 4122 37 discriminator 1 view .LVU6042
 23170 0012 039B     		ldr	r3, [sp, #12]
 23171 0014 0446     		mov	r4, r0
 23172 0016 0198     		ldr	r0, [sp, #4]
4122:src/xeq.c     **** 		return;
 23173              		.loc 1 4122 32 discriminator 1 view .LVU6043
 23174 0018 9842     		cmp	r0, r3
 23175 001a 18D0     		beq	.L1643
4125:src/xeq.c     **** 			report_err(ERR_RANGE);
 23176              		.loc 1 4125 3 is_stmt 1 view .LVU6044
4125:src/xeq.c     **** 			report_err(ERR_RANGE);
 23177              		.loc 1 4125 19 is_stmt 0 view .LVU6045
 23178 001c 029A     		ldr	r2, [sp, #8]
4125:src/xeq.c     **** 			report_err(ERR_RANGE);
 23179              		.loc 1 4125 6 view .LVU6046
 23180 001e 18DD     		ble	.L1648
4125:src/xeq.c     **** 			report_err(ERR_RANGE);
 23181              		.loc 1 4125 19 discriminator 1 view .LVU6047
 23182 0020 1344     		add	r3, r3, r2
4125:src/xeq.c     **** 			report_err(ERR_RANGE);
 23183              		.loc 1 4125 14 discriminator 1 view .LVU6048
 23184 0022 9842     		cmp	r0, r3
 23185 0024 19DB     		blt	.L1649
 23186              	.L1650:
 23187              	.LVL1818:
4128:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 23188              		.loc 1 4128 16 is_stmt 1 discriminator 1 view .LVU6049
4128:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 23189              		.loc 1 4128 4 is_stmt 0 discriminator 1 view .LVU6050
 23190 0026 002A     		cmp	r2, #0
 23191 0028 01DC     		bgt	.L1652
 23192 002a 10E0     		b	.L1643
 23193              	.LVL1819:
 23194              	.L1655:
4128:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 23195              		.loc 1 4128 4 discriminator 1 view .LVU6051
 23196 002c 0198     		ldr	r0, [sp, #4]
 23197              	.LVL1820:
 23198              	.L1652:
4129:src/xeq.c     **** 		}
ARM GAS  /tmp/ccjeMhND.s 			page 603


 23199              		.loc 1 4129 5 is_stmt 1 discriminator 3 view .LVU6052
 23200 002e 2044     		add	r0, r0, r4
 23201 0030 FFF7FEFF 		bl	get_reg_n
 23202              	.LVL1821:
 23203 0034 039B     		ldr	r3, [sp, #12]
 23204 0036 0546     		mov	r5, r0
 23205 0038 E018     		adds	r0, r4, r3
 23206 003a FFF7FEFF 		bl	get_reg_n
 23207              	.LVL1822:
 23208 003e 0146     		mov	r1, r0
 23209 0040 2846     		mov	r0, r5
 23210 0042 FFF7FEFF 		bl	swap_reg
 23211              	.LVL1823:
4128:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 23212              		.loc 1 4128 23 discriminator 3 view .LVU6053
4128:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 23213              		.loc 1 4128 4 is_stmt 0 discriminator 3 view .LVU6054
 23214 0046 029B     		ldr	r3, [sp, #8]
4128:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 23215              		.loc 1 4128 24 discriminator 3 view .LVU6055
 23216 0048 0134     		adds	r4, r4, #1
 23217              	.LVL1824:
4128:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 23218              		.loc 1 4128 16 is_stmt 1 discriminator 3 view .LVU6056
4128:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 23219              		.loc 1 4128 4 is_stmt 0 discriminator 3 view .LVU6057
 23220 004a A342     		cmp	r3, r4
 23221 004c EEDC     		bgt	.L1655
 23222              	.LVL1825:
 23223              	.L1643:
4132:src/xeq.c     **** 
 23224              		.loc 1 4132 1 view .LVU6058
 23225 004e 05B0     		add	sp, sp, #20
 23226              		.cfi_remember_state
 23227              		.cfi_def_cfa_offset 12
 23228              		@ sp needed
 23229 0050 30BD     		pop	{r4, r5, pc}
 23230              	.L1648:
 23231              		.cfi_restore_state
4125:src/xeq.c     **** 			report_err(ERR_RANGE);
 23232              		.loc 1 4125 28 discriminator 3 view .LVU6059
 23233 0052 E8DA     		bge	.L1650
4125:src/xeq.c     **** 			report_err(ERR_RANGE);
 23234              		.loc 1 4125 43 discriminator 4 view .LVU6060
 23235 0054 8118     		adds	r1, r0, r2
4125:src/xeq.c     **** 			report_err(ERR_RANGE);
 23236              		.loc 1 4125 38 discriminator 4 view .LVU6061
 23237 0056 8B42     		cmp	r3, r1
 23238 0058 E5DA     		bge	.L1650
 23239              	.L1649:
4126:src/xeq.c     **** 		else {
 23240              		.loc 1 4126 4 is_stmt 1 view .LVU6062
 23241              	.LVL1826:
 23242              	.LBB3214:
 23243              	.LBI3214:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23244              		.loc 1 537 5 view .LVU6063
ARM GAS  /tmp/ccjeMhND.s 			page 604


 23245              	.LBB3215:
 538:src/xeq.c     **** 		Error = e;
 23246              		.loc 1 538 2 view .LVU6064
 538:src/xeq.c     **** 		Error = e;
 23247              		.loc 1 538 12 is_stmt 0 view .LVU6065
 23248 005a 044B     		ldr	r3, .L1656
 538:src/xeq.c     **** 		Error = e;
 23249              		.loc 1 538 5 view .LVU6066
 23250 005c 1A68     		ldr	r2, [r3]
 23251 005e 002A     		cmp	r2, #0
 23252 0060 F5D1     		bne	.L1643
 23253              	.LVL1827:
 23254              	.LBB3216:
 23255              	.LBI3216:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23256              		.loc 1 537 5 is_stmt 1 view .LVU6067
 23257              	.LBB3217:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23258              		.loc 1 539 3 view .LVU6068
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23259              		.loc 1 539 9 is_stmt 0 view .LVU6069
 23260 0062 0822     		movs	r2, #8
 23261 0064 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 23262              		.loc 1 540 3 is_stmt 1 view .LVU6070
 23263              	.LBE3217:
 23264              	.LBE3216:
 23265              	.LBE3215:
 23266              	.LBE3214:
4132:src/xeq.c     **** 
 23267              		.loc 1 4132 1 is_stmt 0 view .LVU6071
 23268 0066 05B0     		add	sp, sp, #20
 23269              		.cfi_def_cfa_offset 12
 23270              		@ sp needed
 23271 0068 30BD     		pop	{r4, r5, pc}
 23272              	.L1657:
 23273 006a 00BF     		.align	2
 23274              	.L1656:
 23275 006c 00000000 		.word	Error
 23276              		.cfi_endproc
 23277              	.LFE226:
 23279              		.section	.text.op_regclr,"ax",%progbits
 23280              		.align	1
 23281              		.p2align 2,,3
 23282              		.global	op_regclr
 23283              		.syntax unified
 23284              		.thumb
 23285              		.thumb_func
 23286              		.fpu fpv4-sp-d16
 23288              	op_regclr:
 23289              	.LVL1828:
 23290              	.LFB227:
4134:src/xeq.c     **** 	int s, n;
 23291              		.loc 1 4134 31 is_stmt 1 view -0
 23292              		.cfi_startproc
 23293              		@ args = 0, pretend = 0, frame = 8
 23294              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccjeMhND.s 			page 605


4135:src/xeq.c     **** 
 23295              		.loc 1 4135 2 view .LVU6073
4137:src/xeq.c     **** 		return;
 23296              		.loc 1 4137 2 view .LVU6074
4134:src/xeq.c     **** 	int s, n;
 23297              		.loc 1 4134 31 is_stmt 0 view .LVU6075
 23298 0000 10B5     		push	{r4, lr}
 23299              		.cfi_def_cfa_offset 8
 23300              		.cfi_offset 4, -8
 23301              		.cfi_offset 14, -4
4137:src/xeq.c     **** 		return;
 23302              		.loc 1 4137 6 view .LVU6076
 23303 0002 0023     		movs	r3, #0
4134:src/xeq.c     **** 	int s, n;
 23304              		.loc 1 4134 31 view .LVU6077
 23305 0004 82B0     		sub	sp, sp, #8
 23306              		.cfi_def_cfa_offset 16
4137:src/xeq.c     **** 		return;
 23307              		.loc 1 4137 6 view .LVU6078
 23308 0006 1A46     		mov	r2, r3
 23309 0008 01A9     		add	r1, sp, #4
 23310 000a 6846     		mov	r0, sp
 23311              	.LVL1829:
4137:src/xeq.c     **** 		return;
 23312              		.loc 1 4137 6 view .LVU6079
 23313 000c FFF7FEFF 		bl	reg_decode
 23314              	.LVL1830:
4137:src/xeq.c     **** 		return;
 23315              		.loc 1 4137 5 view .LVU6080
 23316 0010 A8B9     		cbnz	r0, .L1658
4139:src/xeq.c     **** }
 23317              		.loc 1 4139 2 is_stmt 1 view .LVU6081
 23318 0012 0446     		mov	r4, r0
 23319 0014 0098     		ldr	r0, [sp]
 23320 0016 FFF7FEFF 		bl	get_reg_n
 23321              	.LVL1831:
 23322              	.LBB3218:
 23323              	.LBI3218:
1332:src/xeq.c     **** #if 0
 23324              		.loc 1 1332 6 view .LVU6082
 23325              	.LBB3219:
1347:src/xeq.c     **** #endif
 23326              		.loc 1 1347 2 view .LVU6083
 23327              	.LBB3220:
 23328              	.LBI3220:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23329              		.loc 1 932 5 view .LVU6084
 23330              	.LBB3221:
 933:src/xeq.c     **** }
 23331              		.loc 1 933 2 view .LVU6085
 933:src/xeq.c     **** }
 23332              		.loc 1 933 24 is_stmt 0 view .LVU6086
 23333 001a 0A4B     		ldr	r3, .L1662
 23334              	.LBE3221:
 23335              	.LBE3220:
1347:src/xeq.c     **** #endif
 23336              		.loc 1 1347 2 view .LVU6087
ARM GAS  /tmp/ccjeMhND.s 			page 606


 23337 001c 019A     		ldr	r2, [sp, #4]
 23338              	.LBB3223:
 23339              	.LBB3222:
 933:src/xeq.c     **** }
 23340              		.loc 1 933 24 view .LVU6088
 23341 001e 1B68     		ldr	r3, [r3]
 23342 0020 B3F8E817 		ldrh	r1, [r3, #2024]
 23343 0024 44F20103 		movw	r3, #16385
 23344 0028 0B40     		ands	r3, r3, r1
 23345 002a A3F58043 		sub	r3, r3, #16384
 23346 002e B3FA83F3 		clz	r3, r3
 23347 0032 5B09     		lsrs	r3, r3, #5
 23348              	.LBE3222:
 23349              	.LBE3223:
1347:src/xeq.c     **** #endif
 23350              		.loc 1 1347 24 view .LVU6089
 23351 0034 0333     		adds	r3, r3, #3
1347:src/xeq.c     **** #endif
 23352              		.loc 1 1347 2 view .LVU6090
 23353 0036 2146     		mov	r1, r4
 23354 0038 9A40     		lsls	r2, r2, r3
 23355 003a FFF7FEFF 		bl	xset
 23356              	.LVL1832:
 23357              	.L1658:
1347:src/xeq.c     **** #endif
 23358              		.loc 1 1347 2 view .LVU6091
 23359              	.LBE3219:
 23360              	.LBE3218:
4140:src/xeq.c     **** 
 23361              		.loc 1 4140 1 view .LVU6092
 23362 003e 02B0     		add	sp, sp, #8
 23363              		.cfi_def_cfa_offset 8
 23364              		@ sp needed
 23365 0040 10BD     		pop	{r4, pc}
 23366              	.L1663:
 23367 0042 00BF     		.align	2
 23368              	.L1662:
 23369 0044 00000000 		.word	main_ram
 23370              		.cfi_endproc
 23371              	.LFE227:
 23373              		.section	.text.op_regsort,"ax",%progbits
 23374              		.align	1
 23375              		.p2align 2,,3
 23376              		.global	op_regsort
 23377              		.syntax unified
 23378              		.thumb
 23379              		.thumb_func
 23380              		.fpu fpv4-sp-d16
 23382              	op_regsort:
 23383              	.LVL1833:
 23384              	.LFB228:
4142:src/xeq.c     **** 	int s, n;
 23385              		.loc 1 4142 32 is_stmt 1 view -0
 23386              		.cfi_startproc
 23387              		@ args = 0, pretend = 0, frame = 160
 23388              		@ frame_needed = 0, uses_anonymous_args = 0
4143:src/xeq.c     **** 	decNumber pivot, a;
ARM GAS  /tmp/ccjeMhND.s 			page 607


 23389              		.loc 1 4143 2 view .LVU6094
4144:src/xeq.c     **** 	int beg[10], end[10], i;
 23390              		.loc 1 4144 2 view .LVU6095
4145:src/xeq.c     **** 
 23391              		.loc 1 4145 2 view .LVU6096
4147:src/xeq.c     **** 		return;
 23392              		.loc 1 4147 2 view .LVU6097
4142:src/xeq.c     **** 	int s, n;
 23393              		.loc 1 4142 32 is_stmt 0 view .LVU6098
 23394 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 23395              		.cfi_def_cfa_offset 28
 23396              		.cfi_offset 4, -28
 23397              		.cfi_offset 5, -24
 23398              		.cfi_offset 6, -20
 23399              		.cfi_offset 7, -16
 23400              		.cfi_offset 8, -12
 23401              		.cfi_offset 9, -8
 23402              		.cfi_offset 14, -4
4147:src/xeq.c     **** 		return;
 23403              		.loc 1 4147 6 view .LVU6099
 23404 0004 0023     		movs	r3, #0
4142:src/xeq.c     **** 	int s, n;
 23405              		.loc 1 4142 32 view .LVU6100
 23406 0006 A9B0     		sub	sp, sp, #164
 23407              		.cfi_def_cfa_offset 192
4147:src/xeq.c     **** 		return;
 23408              		.loc 1 4147 6 view .LVU6101
 23409 0008 1A46     		mov	r2, r3
 23410 000a 01A9     		add	r1, sp, #4
 23411 000c 6846     		mov	r0, sp
 23412              	.LVL1834:
4147:src/xeq.c     **** 		return;
 23413              		.loc 1 4147 6 view .LVU6102
 23414 000e FFF7FEFF 		bl	reg_decode
 23415              	.LVL1835:
4147:src/xeq.c     **** 		return;
 23416              		.loc 1 4147 5 view .LVU6103
 23417 0012 20B9     		cbnz	r0, .L1664
4147:src/xeq.c     **** 		return;
 23418              		.loc 1 4147 39 discriminator 1 view .LVU6104
 23419 0014 DDF80480 		ldr	r8, [sp, #4]
4147:src/xeq.c     **** 		return;
 23420              		.loc 1 4147 34 discriminator 1 view .LVU6105
 23421 0018 B8F1010F 		cmp	r8, #1
 23422 001c 02D1     		bne	.L1688
 23423              	.L1664:
4192:src/xeq.c     **** 
 23424              		.loc 1 4192 1 view .LVU6106
 23425 001e 29B0     		add	sp, sp, #164
 23426              		.cfi_remember_state
 23427              		.cfi_def_cfa_offset 28
 23428              		@ sp needed
 23429 0020 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 23430              	.L1688:
 23431              		.cfi_restore_state
 23432 0024 0646     		mov	r6, r0
4151:src/xeq.c     **** 	end[0] = n;
ARM GAS  /tmp/ccjeMhND.s 			page 608


 23433              		.loc 1 4151 2 is_stmt 1 view .LVU6107
4151:src/xeq.c     **** 	end[0] = n;
 23434              		.loc 1 4151 9 is_stmt 0 view .LVU6108
 23435 0026 1490     		str	r0, [sp, #80]
4152:src/xeq.c     **** 	i = 0;
 23436              		.loc 1 4152 2 is_stmt 1 view .LVU6109
4152:src/xeq.c     **** 	i = 0;
 23437              		.loc 1 4152 9 is_stmt 0 view .LVU6110
 23438 0028 CDF87880 		str	r8, [sp, #120]
4153:src/xeq.c     **** 	while (i>=0) {
 23439              		.loc 1 4153 2 is_stmt 1 view .LVU6111
 23440              	.LVL1836:
4154:src/xeq.c     **** 		int L = beg[i];
 23441              		.loc 1 4154 2 view .LVU6112
4154:src/xeq.c     **** 		int L = beg[i];
 23442              		.loc 1 4154 8 view .LVU6113
4153:src/xeq.c     **** 	while (i>=0) {
 23443              		.loc 1 4153 4 is_stmt 0 view .LVU6114
 23444 002c 0746     		mov	r7, r0
 23445              	.LVL1837:
 23446              	.L1678:
 23447              	.LBB3224:
4155:src/xeq.c     **** 		int R = end[i] - 1;
 23448              		.loc 1 4155 3 is_stmt 1 view .LVU6115
4156:src/xeq.c     **** 		if (L<R) {
 23449              		.loc 1 4156 3 view .LVU6116
4156:src/xeq.c     **** 		if (L<R) {
 23450              		.loc 1 4156 7 is_stmt 0 view .LVU6117
 23451 002e 08F1FF34 		add	r4, r8, #-1
 23452              	.LVL1838:
4157:src/xeq.c     **** 			const int pvt = s + L;
 23453              		.loc 1 4157 3 is_stmt 1 view .LVU6118
4157:src/xeq.c     **** 			const int pvt = s + L;
 23454              		.loc 1 4157 6 is_stmt 0 view .LVU6119
 23455 0032 B442     		cmp	r4, r6
 23456 0034 0CDC     		bgt	.L1689
 23457              	.LVL1839:
 23458              	.L1667:
4190:src/xeq.c     **** 	}
 23459              		.loc 1 4190 4 is_stmt 1 view .LVU6120
 23460              	.LBE3224:
4154:src/xeq.c     **** 		int L = beg[i];
 23461              		.loc 1 4154 8 is_stmt 0 view .LVU6121
 23462 0036 013F     		subs	r7, r7, #1
 23463              	.LVL1840:
4154:src/xeq.c     **** 		int L = beg[i];
 23464              		.loc 1 4154 8 view .LVU6122
 23465 0038 F1D3     		bcc	.L1664
 23466 003a 28AB     		add	r3, sp, #160
 23467 003c 03EB8703 		add	r3, r3, r7, lsl #2
 23468 0040 53F8288C 		ldr	r8, [r3, #-40]
 23469 0044 53F8506C 		ldr	r6, [r3, #-80]
 23470              	.LVL1841:
 23471              	.LBB3227:
4155:src/xeq.c     **** 		int R = end[i] - 1;
 23472              		.loc 1 4155 3 is_stmt 1 view .LVU6123
4156:src/xeq.c     **** 		if (L<R) {
ARM GAS  /tmp/ccjeMhND.s 			page 609


 23473              		.loc 1 4156 3 view .LVU6124
4156:src/xeq.c     **** 		if (L<R) {
 23474              		.loc 1 4156 7 is_stmt 0 view .LVU6125
 23475 0048 08F1FF34 		add	r4, r8, #-1
 23476              	.LVL1842:
4157:src/xeq.c     **** 			const int pvt = s + L;
 23477              		.loc 1 4157 3 is_stmt 1 view .LVU6126
4157:src/xeq.c     **** 			const int pvt = s + L;
 23478              		.loc 1 4157 6 is_stmt 0 view .LVU6127
 23479 004c B442     		cmp	r4, r6
 23480 004e F2DD     		ble	.L1667
 23481              	.LVL1843:
 23482              	.L1689:
 23483              	.LBB3225:
4158:src/xeq.c     **** 			getRegister(&pivot, pvt);
 23484              		.loc 1 4158 4 is_stmt 1 view .LVU6128
4159:src/xeq.c     **** 			while (L<R) {
 23485              		.loc 1 4159 4 view .LVU6129
4158:src/xeq.c     **** 			getRegister(&pivot, pvt);
 23486              		.loc 1 4158 14 is_stmt 0 view .LVU6130
 23487 0050 0099     		ldr	r1, [sp]
4159:src/xeq.c     **** 			while (L<R) {
 23488              		.loc 1 4159 4 view .LVU6131
 23489 0052 02A8     		add	r0, sp, #8
 23490 0054 3144     		add	r1, r1, r6
 23491              	.LVL1844:
4159:src/xeq.c     **** 			while (L<R) {
 23492              		.loc 1 4159 4 view .LVU6132
 23493 0056 FFF7FEFF 		bl	getRegister
 23494              	.LVL1845:
4160:src/xeq.c     **** 				while (L<R) {
 23495              		.loc 1 4160 4 is_stmt 1 view .LVU6133
4160:src/xeq.c     **** 				while (L<R) {
 23496              		.loc 1 4160 10 view .LVU6134
4159:src/xeq.c     **** 			while (L<R) {
 23497              		.loc 1 4159 4 is_stmt 0 view .LVU6135
 23498 005a B146     		mov	r9, r6
 23499              	.L1670:
4162:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
 23500              		.loc 1 4162 6 is_stmt 1 view .LVU6136
 23501 005c 0099     		ldr	r1, [sp]
 23502 005e 0BA8     		add	r0, sp, #44
 23503 0060 2144     		add	r1, r1, r4
 23504 0062 FFF7FEFF 		bl	getRegister
 23505              	.LVL1846:
4163:src/xeq.c     **** 						break;
 23506              		.loc 1 4163 6 view .LVU6137
4163:src/xeq.c     **** 						break;
 23507              		.loc 1 4163 10 is_stmt 0 view .LVU6138
 23508 0066 02A9     		add	r1, sp, #8
 23509 0068 0BA8     		add	r0, sp, #44
 23510 006a FFF7FEFF 		bl	dn_lt
 23511              	.LVL1847:
4165:src/xeq.c     **** 				}
 23512              		.loc 1 4165 6 is_stmt 1 view .LVU6139
4163:src/xeq.c     **** 						break;
 23513              		.loc 1 4163 9 is_stmt 0 view .LVU6140
ARM GAS  /tmp/ccjeMhND.s 			page 610


 23514 006e 00BB     		cbnz	r0, .L1669
4165:src/xeq.c     **** 				}
 23515              		.loc 1 4165 7 view .LVU6141
 23516 0070 013C     		subs	r4, r4, #1
 23517              	.LVL1848:
4161:src/xeq.c     **** 					getRegister(&a, s + R);
 23518              		.loc 1 4161 11 is_stmt 1 view .LVU6142
 23519 0072 4C45     		cmp	r4, r9
 23520 0074 F2DC     		bgt	.L1670
 23521              	.L1671:
 23522              	.LVL1849:
4169:src/xeq.c     **** 					getRegister(&a, s + L);
 23523              		.loc 1 4169 11 is_stmt 0 view .LVU6143
 23524 0076 4D46     		mov	r5, r9
 23525              	.LVL1850:
4160:src/xeq.c     **** 				while (L<R) {
 23526              		.loc 1 4160 10 is_stmt 1 view .LVU6144
 23527              	.L1679:
4178:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
 23528              		.loc 1 4178 4 view .LVU6145
 23529 0078 0098     		ldr	r0, [sp]
 23530 007a 02A9     		add	r1, sp, #8
 23531 007c 2844     		add	r0, r0, r5
 23532 007e FFF7FEFF 		bl	setRegister
 23533              	.LVL1851:
4179:src/xeq.c     **** 				beg[i+1] = beg[i];
 23534              		.loc 1 4179 4 view .LVU6146
4179:src/xeq.c     **** 				beg[i+1] = beg[i];
 23535              		.loc 1 4179 32 is_stmt 0 view .LVU6147
 23536 0082 6B1C     		adds	r3, r5, #1
4179:src/xeq.c     **** 				beg[i+1] = beg[i];
 23537              		.loc 1 4179 28 view .LVU6148
 23538 0084 A8EB0302 		sub	r2, r8, r3
4179:src/xeq.c     **** 				beg[i+1] = beg[i];
 23539              		.loc 1 4179 10 view .LVU6149
 23540 0088 A91B     		subs	r1, r5, r6
4179:src/xeq.c     **** 				beg[i+1] = beg[i];
 23541              		.loc 1 4179 7 view .LVU6150
 23542 008a 9142     		cmp	r1, r2
4180:src/xeq.c     **** 				end[i+1] = L;
 23543              		.loc 1 4180 10 view .LVU6151
 23544 008c 07F10101 		add	r1, r7, #1
4182:src/xeq.c     **** 			} else {
 23545              		.loc 1 4182 12 view .LVU6152
 23546 0090 28AA     		add	r2, sp, #160
 23547 0092 02EB8700 		add	r0, r2, r7, lsl #2
4180:src/xeq.c     **** 				end[i+1] = L;
 23548              		.loc 1 4180 14 view .LVU6153
 23549 0096 02EB8102 		add	r2, r2, r1, lsl #2
 23550 009a 0F46     		mov	r7, r1
 23551              	.LVL1852:
4179:src/xeq.c     **** 				beg[i+1] = beg[i];
 23552              		.loc 1 4179 7 view .LVU6154
 23553 009c 2DDA     		bge	.L1675
4180:src/xeq.c     **** 				end[i+1] = L;
 23554              		.loc 1 4180 5 is_stmt 1 view .LVU6155
4180:src/xeq.c     **** 				end[i+1] = L;
ARM GAS  /tmp/ccjeMhND.s 			page 611


 23555              		.loc 1 4180 14 is_stmt 0 view .LVU6156
 23556 009e 42F8506C 		str	r6, [r2, #-80]
4181:src/xeq.c     **** 				beg[i] = L+1;
 23557              		.loc 1 4181 5 is_stmt 1 view .LVU6157
4182:src/xeq.c     **** 			} else {
 23558              		.loc 1 4182 12 is_stmt 0 view .LVU6158
 23559 00a2 40F8503C 		str	r3, [r0, #-80]
 23560 00a6 52F8506C 		ldr	r6, [r2, #-80]
4181:src/xeq.c     **** 				beg[i] = L+1;
 23561              		.loc 1 4181 14 view .LVU6159
 23562 00aa 42F8285C 		str	r5, [r2, #-40]
4182:src/xeq.c     **** 			} else {
 23563              		.loc 1 4182 5 is_stmt 1 view .LVU6160
 23564 00ae A846     		mov	r8, r5
 23565 00b0 BDE7     		b	.L1678
 23566              	.LVL1853:
 23567              	.L1669:
4167:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 23568              		.loc 1 4167 5 view .LVU6161
4167:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 23569              		.loc 1 4167 8 is_stmt 0 view .LVU6162
 23570 00b2 A145     		cmp	r9, r4
 23571 00b4 DFDA     		bge	.L1671
4168:src/xeq.c     **** 				while (L<R) {
 23572              		.loc 1 4168 6 is_stmt 1 view .LVU6163
 23573 00b6 0098     		ldr	r0, [sp]
4168:src/xeq.c     **** 				while (L<R) {
 23574              		.loc 1 4168 21 is_stmt 0 view .LVU6164
 23575 00b8 09F10105 		add	r5, r9, #1
 23576              	.LVL1854:
4168:src/xeq.c     **** 				while (L<R) {
 23577              		.loc 1 4168 6 view .LVU6165
 23578 00bc 0119     		adds	r1, r0, r4
 23579 00be 4844     		add	r0, r0, r9
 23580 00c0 FFF7FEFF 		bl	copyreg_n
 23581              	.LVL1855:
4169:src/xeq.c     **** 					getRegister(&a, s + L);
 23582              		.loc 1 4169 11 is_stmt 1 view .LVU6166
 23583 00c4 A542     		cmp	r5, r4
 23584 00c6 03DB     		blt	.L1673
 23585 00c8 21E0     		b	.L1680
 23586              	.L1690:
4173:src/xeq.c     **** 				}
 23587              		.loc 1 4173 7 is_stmt 0 view .LVU6167
 23588 00ca 0135     		adds	r5, r5, #1
 23589              	.LVL1856:
4169:src/xeq.c     **** 					getRegister(&a, s + L);
 23590              		.loc 1 4169 11 is_stmt 1 view .LVU6168
 23591 00cc A542     		cmp	r5, r4
 23592 00ce D3D0     		beq	.L1679
 23593              	.L1673:
4170:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
 23594              		.loc 1 4170 6 view .LVU6169
 23595 00d0 0099     		ldr	r1, [sp]
 23596 00d2 0BA8     		add	r0, sp, #44
 23597 00d4 2944     		add	r1, r1, r5
 23598 00d6 FFF7FEFF 		bl	getRegister
ARM GAS  /tmp/ccjeMhND.s 			page 612


 23599              	.LVL1857:
4171:src/xeq.c     **** 						break;
 23600              		.loc 1 4171 6 view .LVU6170
4171:src/xeq.c     **** 						break;
 23601              		.loc 1 4171 10 is_stmt 0 view .LVU6171
 23602 00da 0BA9     		add	r1, sp, #44
 23603 00dc 02A8     		add	r0, sp, #8
 23604 00de FFF7FEFF 		bl	dn_lt
 23605              	.LVL1858:
4173:src/xeq.c     **** 				}
 23606              		.loc 1 4173 6 is_stmt 1 view .LVU6172
4171:src/xeq.c     **** 						break;
 23607              		.loc 1 4171 9 is_stmt 0 view .LVU6173
 23608 00e2 0028     		cmp	r0, #0
 23609 00e4 F1D0     		beq	.L1690
4175:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
 23610              		.loc 1 4175 5 is_stmt 1 view .LVU6174
4176:src/xeq.c     **** 			}
 23611              		.loc 1 4176 6 view .LVU6175
 23612 00e6 0098     		ldr	r0, [sp]
 23613 00e8 4119     		adds	r1, r0, r5
 23614 00ea 2044     		add	r0, r0, r4
4176:src/xeq.c     **** 			}
 23615              		.loc 1 4176 21 is_stmt 0 view .LVU6176
 23616 00ec 013C     		subs	r4, r4, #1
 23617              	.LVL1859:
4176:src/xeq.c     **** 			}
 23618              		.loc 1 4176 6 view .LVU6177
 23619 00ee FFF7FEFF 		bl	copyreg_n
 23620              	.LVL1860:
4160:src/xeq.c     **** 				while (L<R) {
 23621              		.loc 1 4160 10 is_stmt 1 view .LVU6178
 23622 00f2 A542     		cmp	r5, r4
 23623 00f4 C0DA     		bge	.L1679
 23624 00f6 A946     		mov	r9, r5
4161:src/xeq.c     **** 					getRegister(&a, s + R);
 23625              		.loc 1 4161 11 view .LVU6179
 23626 00f8 B0E7     		b	.L1670
 23627              	.LVL1861:
 23628              	.L1675:
4184:src/xeq.c     **** 				end[i+1] = end[i];
 23629              		.loc 1 4184 5 view .LVU6180
4185:src/xeq.c     **** 				end[i] = L;
 23630              		.loc 1 4185 14 is_stmt 0 view .LVU6181
 23631 00fa 42F8288C 		str	r8, [r2, #-40]
4186:src/xeq.c     **** 			}
 23632              		.loc 1 4186 12 view .LVU6182
 23633 00fe 40F8285C 		str	r5, [r0, #-40]
 23634 0102 52F8288C 		ldr	r8, [r2, #-40]
4184:src/xeq.c     **** 				end[i+1] = end[i];
 23635              		.loc 1 4184 14 view .LVU6183
 23636 0106 42F8503C 		str	r3, [r2, #-80]
4185:src/xeq.c     **** 				end[i] = L;
 23637              		.loc 1 4185 5 is_stmt 1 view .LVU6184
4186:src/xeq.c     **** 			}
 23638              		.loc 1 4186 5 view .LVU6185
4188:src/xeq.c     **** 		} else
ARM GAS  /tmp/ccjeMhND.s 			page 613


 23639              		.loc 1 4188 4 view .LVU6186
 23640              	.LVL1862:
4188:src/xeq.c     **** 		} else
 23641              		.loc 1 4188 4 is_stmt 0 view .LVU6187
 23642              	.LBE3225:
 23643              	.LBE3227:
4154:src/xeq.c     **** 		int L = beg[i];
 23644              		.loc 1 4154 8 is_stmt 1 view .LVU6188
 23645              	.LBB3228:
 23646              	.LBB3226:
4186:src/xeq.c     **** 			}
 23647              		.loc 1 4186 12 is_stmt 0 view .LVU6189
 23648 010a 1E46     		mov	r6, r3
 23649 010c 8FE7     		b	.L1678
 23650              	.LVL1863:
 23651              	.L1680:
4169:src/xeq.c     **** 					getRegister(&a, s + L);
 23652              		.loc 1 4169 11 view .LVU6190
 23653 010e A946     		mov	r9, r5
 23654              	.LVL1864:
4169:src/xeq.c     **** 					getRegister(&a, s + L);
 23655              		.loc 1 4169 11 view .LVU6191
 23656 0110 4D46     		mov	r5, r9
 23657              	.LVL1865:
4160:src/xeq.c     **** 				while (L<R) {
 23658              		.loc 1 4160 10 is_stmt 1 view .LVU6192
 23659 0112 B1E7     		b	.L1679
 23660              	.LBE3226:
 23661              	.LBE3228:
 23662              		.cfi_endproc
 23663              	.LFE228:
 23665              		.section	.text.reset_volatile_state,"ax",%progbits
 23666              		.align	1
 23667              		.p2align 2,,3
 23668              		.global	reset_volatile_state
 23669              		.syntax unified
 23670              		.thumb
 23671              		.thumb_func
 23672              		.fpu fpv4-sp-d16
 23674              	reset_volatile_state:
 23675              	.LFB230:
4227:src/xeq.c     **** 	// extern int IntMaxWindow;
 23676              		.loc 1 4227 33 view -0
 23677              		.cfi_startproc
 23678              		@ args = 0, pretend = 0, frame = 0
 23679              		@ frame_needed = 0, uses_anonymous_args = 0
 23680              		@ link register save eliminated.
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 23681              		.loc 1 4230 2 view .LVU6194
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 23682              		.loc 1 4230 16 is_stmt 0 view .LVU6195
 23683 0000 034B     		ldr	r3, .L1692
 23684 0002 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
4231:src/xeq.c     **** }
 23685              		.loc 1 4231 15 view .LVU6196
 23686 0004 0021     		movs	r1, #0
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
ARM GAS  /tmp/ccjeMhND.s 			page 614


 23687              		.loc 1 4230 16 view .LVU6197
 23688 0006 6FF3C502 		bfc	r2, #3, #3
 23689 000a 1A75     		strb	r2, [r3, #20]
4231:src/xeq.c     **** }
 23690              		.loc 1 4231 2 is_stmt 1 view .LVU6198
4231:src/xeq.c     **** }
 23691              		.loc 1 4231 15 is_stmt 0 view .LVU6199
 23692 000c 5974     		strb	r1, [r3, #17]
4232:src/xeq.c     **** 
 23693              		.loc 1 4232 1 view .LVU6200
 23694 000e 7047     		bx	lr
 23695              	.L1693:
 23696              		.align	2
 23697              	.L1692:
 23698 0010 00000000 		.word	StateWhileOn
 23699              		.cfi_endproc
 23700              	.LFE230:
 23702              		.section	.rodata.busy.str1.4,"aMS",%progbits,1
 23703              		.align	2
 23704              	.LC7:
 23705 0000 57616974 		.ascii	"Wait...\000"
 23705      2E2E2E00 
 23706              		.section	.text.busy,"ax",%progbits
 23707              		.align	1
 23708              		.p2align 2,,3
 23709              		.global	busy
 23710              		.syntax unified
 23711              		.thumb
 23712              		.thumb_func
 23713              		.fpu fpv4-sp-d16
 23715              	busy:
 23716              	.LFB231:
4239:src/xeq.c     **** 	/*
 23717              		.loc 1 4239 1 is_stmt 1 view -0
 23718              		.cfi_startproc
 23719              		@ args = 0, pretend = 0, frame = 0
 23720              		@ frame_needed = 0, uses_anonymous_args = 0
 23721              		@ link register save eliminated.
4243:src/xeq.c     **** 
 23722              		.loc 1 4243 12 view .LVU6202
4248:src/xeq.c     **** 
 23723              		.loc 1 4248 17 view .LVU6203
4253:src/xeq.c     **** 		Busy = 1;
 23724              		.loc 1 4253 2 view .LVU6204
4253:src/xeq.c     **** 		Busy = 1;
 23725              		.loc 1 4253 6 is_stmt 0 view .LVU6205
 23726 0000 054A     		ldr	r2, .L1697
4253:src/xeq.c     **** 		Busy = 1;
 23727              		.loc 1 4253 15 view .LVU6206
 23728 0002 064B     		ldr	r3, .L1697+4
4253:src/xeq.c     **** 		Busy = 1;
 23729              		.loc 1 4253 12 view .LVU6207
 23730 0004 1168     		ldr	r1, [r2]
 23731 0006 1B68     		ldr	r3, [r3]
 23732 0008 1943     		orrs	r1, r1, r3
 23733 000a 00D0     		beq	.L1696
4257:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 615


 23734              		.loc 1 4257 1 view .LVU6208
 23735 000c 7047     		bx	lr
 23736              	.L1696:
 23737              	.LBB3231:
 23738              	.LBI3231:
4238:src/xeq.c     **** {
 23739              		.loc 1 4238 6 is_stmt 1 view .LVU6209
 23740              	.LBB3232:
4254:src/xeq.c     **** 		message("Wait...", NULL);
 23741              		.loc 1 4254 3 view .LVU6210
4254:src/xeq.c     **** 		message("Wait...", NULL);
 23742              		.loc 1 4254 8 is_stmt 0 view .LVU6211
 23743 000e 0123     		movs	r3, #1
4255:src/xeq.c     **** 	}
 23744              		.loc 1 4255 3 view .LVU6212
 23745 0010 0348     		ldr	r0, .L1697+8
4254:src/xeq.c     **** 		message("Wait...", NULL);
 23746              		.loc 1 4254 8 view .LVU6213
 23747 0012 1360     		str	r3, [r2]
4255:src/xeq.c     **** 	}
 23748              		.loc 1 4255 3 is_stmt 1 view .LVU6214
 23749 0014 FFF7FEBF 		b	message
 23750              	.LVL1866:
 23751              	.L1698:
 23752              		.align	2
 23753              	.L1697:
 23754 0018 00000000 		.word	Busy
 23755 001c 00000000 		.word	Running
 23756 0020 00000000 		.word	.LC7
 23757              	.LBE3232:
 23758              	.LBE3231:
 23759              		.cfi_endproc
 23760              	.LFE231:
 23762              		.section	.text.intMonadic,"ax",%progbits
 23763              		.align	1
 23764              		.p2align 2,,3
 23765              		.global	intMonadic
 23766              		.syntax unified
 23767              		.thumb
 23768              		.thumb_func
 23769              		.fpu fpv4-sp-d16
 23771              	intMonadic:
 23772              	.LVL1867:
 23773              	.LFB235:
4335:src/xeq.c     **** 	int s;
 23774              		.loc 1 4335 43 view -0
 23775              		.cfi_startproc
 23776              		@ args = 0, pretend = 0, frame = 80
 23777              		@ frame_needed = 0, uses_anonymous_args = 0
4336:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
 23778              		.loc 1 4336 2 view .LVU6216
4337:src/xeq.c     **** 	decNumber rx, r;
 23779              		.loc 1 4337 2 view .LVU6217
4335:src/xeq.c     **** 	int s;
 23780              		.loc 1 4335 43 is_stmt 0 view .LVU6218
 23781 0000 30B5     		push	{r4, r5, lr}
 23782              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccjeMhND.s 			page 616


 23783              		.cfi_offset 4, -12
 23784              		.cfi_offset 5, -8
 23785              		.cfi_offset 14, -4
 23786 0002 95B0     		sub	sp, sp, #84
 23787              		.cfi_def_cfa_offset 96
4337:src/xeq.c     **** 	decNumber rx, r;
 23788              		.loc 1 4337 30 view .LVU6219
 23789 0004 01AA     		add	r2, sp, #4
 23790 0006 FFF7FEFF 		bl	extract_value
 23791              	.LVL1868:
4339:src/xeq.c     **** 
 23792              		.loc 1 4339 19 view .LVU6220
 23793 000a 1E4A     		ldr	r2, .L1714
4341:src/xeq.c     **** 		bad_mode_error();
 23794              		.loc 1 4341 6 view .LVU6221
 23795 000c 1E4B     		ldr	r3, .L1714+4
4339:src/xeq.c     **** 
 23796              		.loc 1 4339 15 view .LVU6222
 23797 000e 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4341:src/xeq.c     **** 		bad_mode_error();
 23798              		.loc 1 4341 6 view .LVU6223
 23799 0010 04EB4404 		add	r4, r4, r4, lsl #1
 23800 0014 53F83440 		ldr	r4, [r3, r4, lsl #3]
 23801              	.LVL1869:
4338:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 23802              		.loc 1 4338 2 is_stmt 1 view .LVU6224
4339:src/xeq.c     **** 
 23803              		.loc 1 4339 2 view .LVU6225
4341:src/xeq.c     **** 		bad_mode_error();
 23804              		.loc 1 4341 2 view .LVU6226
4341:src/xeq.c     **** 		bad_mode_error();
 23805              		.loc 1 4341 5 is_stmt 0 view .LVU6227
 23806 0018 5CB1     		cbz	r4, .L1704
 23807              	.LBB3250:
4344:src/xeq.c     **** #ifndef REALBUILD
 23808              		.loc 1 4344 3 is_stmt 1 view .LVU6228
 23809              	.LVL1870:
4346:src/xeq.c     **** 			bad_mode_error();
 23810              		.loc 1 4346 3 view .LVU6229
 23811              	.LBB3251:
 23812              	.LBI3251:
4273:src/xeq.c     **** {
 23813              		.loc 1 4273 24 view .LVU6230
 23814              	.LBB3252:
4275:src/xeq.c     **** 	if (xp < xrom)
 23815              		.loc 1 4275 2 view .LVU6231
4276:src/xeq.c     **** 		return NULL;
 23816              		.loc 1 4276 5 is_stmt 0 view .LVU6232
 23817 001a 1C4B     		ldr	r3, .L1714+8
4275:src/xeq.c     **** 	if (xp < xrom)
 23818              		.loc 1 4275 59 view .LVU6233
 23819 001c 24F00102 		bic	r2, r4, #1
 23820              	.LVL1871:
4276:src/xeq.c     **** 		return NULL;
 23821              		.loc 1 4276 2 is_stmt 1 view .LVU6234
4276:src/xeq.c     **** 		return NULL;
 23822              		.loc 1 4276 5 is_stmt 0 view .LVU6235
ARM GAS  /tmp/ccjeMhND.s 			page 617


 23823 0020 9A42     		cmp	r2, r3
 23824 0022 10D3     		bcc	.L1703
4280:src/xeq.c     **** 		return NULL;
 23825              		.loc 1 4280 2 is_stmt 1 view .LVU6236
4280:src/xeq.c     **** 		return NULL;
 23826              		.loc 1 4280 17 is_stmt 0 view .LVU6237
 23827 0024 1A4D     		ldr	r5, .L1714+12
 23828 0026 2D88     		ldrh	r5, [r5]
 23829 0028 03EB4503 		add	r3, r3, r5, lsl #1
4280:src/xeq.c     **** 		return NULL;
 23830              		.loc 1 4280 5 view .LVU6238
 23831 002c 9A42     		cmp	r2, r3
 23832 002e 0AD2     		bcs	.L1703
 23833              	.LVL1872:
4280:src/xeq.c     **** 		return NULL;
 23834              		.loc 1 4280 5 view .LVU6239
 23835              	.LBE3252:
 23836              	.LBE3251:
4346:src/xeq.c     **** 			bad_mode_error();
 23837              		.loc 1 4346 6 view .LVU6240
 23838 0030 4AB1     		cbz	r2, .L1703
 23839              	.LVL1873:
 23840              	.L1704:
4346:src/xeq.c     **** 			bad_mode_error();
 23841              		.loc 1 4346 6 view .LVU6241
 23842              	.LBE3250:
4342:src/xeq.c     **** 	else {
 23843              		.loc 1 4342 3 is_stmt 1 view .LVU6242
 23844              	.LBB3261:
 23845              	.LBI3261:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 23846              		.loc 1 566 6 view .LVU6243
 23847              	.LBE3261:
 567:src/xeq.c     **** }
 23848              		.loc 1 567 2 view .LVU6244
 23849              	.LBB3270:
 23850              	.LBB3262:
 23851              	.LBI3262:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23852              		.loc 1 537 5 view .LVU6245
 23853              	.LBB3263:
 538:src/xeq.c     **** 		Error = e;
 23854              		.loc 1 538 2 view .LVU6246
 538:src/xeq.c     **** 		Error = e;
 23855              		.loc 1 538 12 is_stmt 0 view .LVU6247
 23856 0032 184B     		ldr	r3, .L1714+16
 538:src/xeq.c     **** 		Error = e;
 23857              		.loc 1 538 5 view .LVU6248
 23858 0034 1A68     		ldr	r2, [r3]
 23859 0036 1AB1     		cbz	r2, .L1701
 23860              	.LVL1874:
 23861              	.L1712:
 23862              	.LBB3264:
 23863              	.LBB3265:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 23864              		.loc 1 540 3 is_stmt 1 view .LVU6249
 23865              	.LBE3265:
ARM GAS  /tmp/ccjeMhND.s 			page 618


 23866              	.LBE3264:
 23867              	.LBE3263:
 23868              	.LBE3262:
 23869              	.LBE3270:
4360:src/xeq.c     **** }
 23870              		.loc 1 4360 9 is_stmt 0 view .LVU6250
 23871 0038 0020     		movs	r0, #0
 23872 003a 0146     		mov	r1, r0
4361:src/xeq.c     **** 
 23873              		.loc 1 4361 1 view .LVU6251
 23874 003c 15B0     		add	sp, sp, #84
 23875              		.cfi_remember_state
 23876              		.cfi_def_cfa_offset 12
 23877              		@ sp needed
 23878 003e 30BD     		pop	{r4, r5, pc}
 23879              	.LVL1875:
 23880              	.L1701:
 23881              		.cfi_restore_state
 23882              	.LBB3271:
 23883              	.LBB3269:
 23884              	.LBB3268:
 23885              	.LBB3267:
 23886              	.LBI3264:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23887              		.loc 1 537 5 is_stmt 1 view .LVU6252
 23888              	.LBB3266:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23889              		.loc 1 539 3 view .LVU6253
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23890              		.loc 1 539 9 is_stmt 0 view .LVU6254
 23891 0040 0D22     		movs	r2, #13
 23892 0042 1A60     		str	r2, [r3]
 23893 0044 F8E7     		b	.L1712
 23894              	.LVL1876:
 23895              	.L1703:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23896              		.loc 1 539 9 view .LVU6255
 23897              	.LBE3266:
 23898              	.LBE3267:
 23899              	.LBE3268:
 23900              	.LBE3269:
 23901              	.LBE3271:
 23902              	.LBB3272:
4351:src/xeq.c     **** 			if (s)
 23903              		.loc 1 4351 4 is_stmt 1 view .LVU6256
 23904 0046 0246     		mov	r2, r0
 23905 0048 0B46     		mov	r3, r1
 23906 004a 02A8     		add	r0, sp, #8
 23907              	.LVL1877:
4351:src/xeq.c     **** 			if (s)
 23908              		.loc 1 4351 4 is_stmt 0 view .LVU6257
 23909 004c FFF7FEFF 		bl	ullint_to_dn
 23910              	.LVL1878:
4352:src/xeq.c     **** 				dn_minus(&rx, &rx);
 23911              		.loc 1 4352 4 is_stmt 1 view .LVU6258
4352:src/xeq.c     **** 				dn_minus(&rx, &rx);
 23912              		.loc 1 4352 7 is_stmt 0 view .LVU6259
ARM GAS  /tmp/ccjeMhND.s 			page 619


 23913 0050 019B     		ldr	r3, [sp, #4]
 23914 0052 8BB9     		cbnz	r3, .L1713
 23915              	.L1705:
4354:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 23916              		.loc 1 4354 4 is_stmt 1 view .LVU6260
4354:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 23917              		.loc 1 4354 16 is_stmt 0 view .LVU6261
 23918 0054 02A9     		add	r1, sp, #8
 23919 0056 0BA8     		add	r0, sp, #44
 23920 0058 A047     		blx	r4
 23921              	.LVL1879:
4354:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 23922              		.loc 1 4354 7 view .LVU6262
 23923 005a 40B9     		cbnz	r0, .L1706
4355:src/xeq.c     **** 			else
 23924              		.loc 1 4355 5 is_stmt 1 view .LVU6263
 23925              	.LVL1880:
 23926              	.LBB3253:
 23927              	.LBI3253:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23928              		.loc 1 537 5 view .LVU6264
 23929              	.LBB3254:
 538:src/xeq.c     **** 		Error = e;
 23930              		.loc 1 538 2 view .LVU6265
 538:src/xeq.c     **** 		Error = e;
 23931              		.loc 1 538 12 is_stmt 0 view .LVU6266
 23932 005c 0D4B     		ldr	r3, .L1714+16
 538:src/xeq.c     **** 		Error = e;
 23933              		.loc 1 538 5 view .LVU6267
 23934 005e 1A68     		ldr	r2, [r3]
 23935 0060 002A     		cmp	r2, #0
 23936 0062 E9D1     		bne	.L1712
 23937              	.LVL1881:
 23938              	.LBB3255:
 23939              	.LBI3255:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23940              		.loc 1 537 5 is_stmt 1 view .LVU6268
 23941              	.LBB3256:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23942              		.loc 1 539 3 view .LVU6269
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23943              		.loc 1 539 9 is_stmt 0 view .LVU6270
 23944 0064 0122     		movs	r2, #1
 23945              	.LBE3256:
 23946              	.LBE3255:
 23947              	.LBE3254:
 23948              	.LBE3253:
 23949              	.LBE3272:
4360:src/xeq.c     **** }
 23950              		.loc 1 4360 9 view .LVU6271
 23951 0066 0146     		mov	r1, r0
 23952              	.LBB3273:
 23953              	.LBB3260:
 23954              	.LBB3259:
 23955              	.LBB3258:
 23956              	.LBB3257:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/ccjeMhND.s 			page 620


 23957              		.loc 1 539 9 view .LVU6272
 23958 0068 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 23959              		.loc 1 540 3 is_stmt 1 view .LVU6273
 23960              	.LBE3257:
 23961              	.LBE3258:
 23962              	.LBE3259:
 23963              	.LBE3260:
 23964              	.LBE3273:
4361:src/xeq.c     **** 
 23965              		.loc 1 4361 1 is_stmt 0 view .LVU6274
 23966 006a 15B0     		add	sp, sp, #84
 23967              		.cfi_remember_state
 23968              		.cfi_def_cfa_offset 12
 23969              		@ sp needed
 23970 006c 30BD     		pop	{r4, r5, pc}
 23971              	.LVL1882:
 23972              	.L1706:
 23973              		.cfi_restore_state
 23974              	.LBB3274:
4357:src/xeq.c     **** 		}
 23975              		.loc 1 4357 5 is_stmt 1 view .LVU6275
4357:src/xeq.c     **** 		}
 23976              		.loc 1 4357 12 is_stmt 0 view .LVU6276
 23977 006e 0BA8     		add	r0, sp, #44
 23978 0070 FFF7FEFF 		bl	intResult
 23979              	.LVL1883:
 23980              	.LBE3274:
4361:src/xeq.c     **** 
 23981              		.loc 1 4361 1 view .LVU6277
 23982 0074 15B0     		add	sp, sp, #84
 23983              		.cfi_remember_state
 23984              		.cfi_def_cfa_offset 12
 23985              		@ sp needed
 23986 0076 30BD     		pop	{r4, r5, pc}
 23987              	.LVL1884:
 23988              	.L1713:
 23989              		.cfi_restore_state
 23990              	.LBB3275:
4353:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
 23991              		.loc 1 4353 5 is_stmt 1 view .LVU6278
 23992 0078 02A9     		add	r1, sp, #8
 23993 007a 0846     		mov	r0, r1
 23994 007c FFF7FEFF 		bl	dn_minus
 23995              	.LVL1885:
 23996 0080 E8E7     		b	.L1705
 23997              	.L1715:
 23998 0082 00BF     		.align	2
 23999              	.L1714:
 24000 0084 00000000 		.word	XeqOpCode
 24001 0088 00000000 		.word	monfuncs
 24002 008c 00000000 		.word	xrom
 24003 0090 00000000 		.word	xrom_size
 24004 0094 00000000 		.word	Error
 24005              	.LBE3275:
 24006              		.cfi_endproc
 24007              	.LFE235:
ARM GAS  /tmp/ccjeMhND.s 			page 621


 24009              		.section	.text.intDyadic,"ax",%progbits
 24010              		.align	1
 24011              		.p2align 2,,3
 24012              		.global	intDyadic
 24013              		.syntax unified
 24014              		.thumb
 24015              		.thumb_func
 24016              		.fpu fpv4-sp-d16
 24018              	intDyadic:
 24019              	.LVL1886:
 24020              	.LFB236:
4366:src/xeq.c     **** 	int sx, sy;
 24021              		.loc 1 4366 59 view -0
 24022              		.cfi_startproc
 24023              		@ args = 0, pretend = 0, frame = 120
 24024              		@ frame_needed = 0, uses_anonymous_args = 0
4367:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 24025              		.loc 1 4367 2 view .LVU6280
4368:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 24026              		.loc 1 4368 2 view .LVU6281
4366:src/xeq.c     **** 	int sx, sy;
 24027              		.loc 1 4366 59 is_stmt 0 view .LVU6282
 24028 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 24029              		.cfi_def_cfa_offset 24
 24030              		.cfi_offset 4, -24
 24031              		.cfi_offset 5, -20
 24032              		.cfi_offset 6, -16
 24033              		.cfi_offset 7, -12
 24034              		.cfi_offset 8, -8
 24035              		.cfi_offset 14, -4
 24036 0004 9EB0     		sub	sp, sp, #120
 24037              		.cfi_def_cfa_offset 144
4366:src/xeq.c     **** 	int sx, sy;
 24038              		.loc 1 4366 59 view .LVU6283
 24039 0006 0546     		mov	r5, r0
 24040 0008 0C46     		mov	r4, r1
4368:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 24041              		.loc 1 4368 30 view .LVU6284
 24042 000a 1046     		mov	r0, r2
 24043              	.LVL1887:
4368:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 24044              		.loc 1 4368 30 view .LVU6285
 24045 000c 1946     		mov	r1, r3
 24046 000e 01AA     		add	r2, sp, #4
 24047              	.LVL1888:
4368:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 24048              		.loc 1 4368 30 view .LVU6286
 24049 0010 FFF7FEFF 		bl	extract_value
 24050              	.LVL1889:
4369:src/xeq.c     **** 	decNumber rx, ry, r;
 24051              		.loc 1 4369 30 view .LVU6287
 24052 0014 02AA     		add	r2, sp, #8
4368:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 24053              		.loc 1 4368 30 view .LVU6288
 24054 0016 0B46     		mov	r3, r1
 24055 0018 0646     		mov	r6, r0
4369:src/xeq.c     **** 	decNumber rx, ry, r;
ARM GAS  /tmp/ccjeMhND.s 			page 622


 24056              		.loc 1 4369 30 view .LVU6289
 24057 001a 2146     		mov	r1, r4
 24058 001c 2846     		mov	r0, r5
4368:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 24059              		.loc 1 4368 30 view .LVU6290
 24060 001e 1D46     		mov	r5, r3
 24061              	.LVL1890:
4369:src/xeq.c     **** 	decNumber rx, ry, r;
 24062              		.loc 1 4369 2 is_stmt 1 view .LVU6291
4369:src/xeq.c     **** 	decNumber rx, ry, r;
 24063              		.loc 1 4369 30 is_stmt 0 view .LVU6292
 24064 0020 FFF7FEFF 		bl	extract_value
 24065              	.LVL1891:
4371:src/xeq.c     **** 
 24066              		.loc 1 4371 19 view .LVU6293
 24067 0024 264A     		ldr	r2, .L1736
4373:src/xeq.c     **** 		bad_mode_error();
 24068              		.loc 1 4373 6 view .LVU6294
 24069 0026 274B     		ldr	r3, .L1736+4
4371:src/xeq.c     **** 
 24070              		.loc 1 4371 15 view .LVU6295
 24071 0028 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4373:src/xeq.c     **** 		bad_mode_error();
 24072              		.loc 1 4373 6 view .LVU6296
 24073 002a 04EB4404 		add	r4, r4, r4, lsl #1
 24074 002e 53F83440 		ldr	r4, [r3, r4, lsl #3]
 24075              	.LVL1892:
4370:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 24076              		.loc 1 4370 2 is_stmt 1 view .LVU6297
4371:src/xeq.c     **** 
 24077              		.loc 1 4371 2 view .LVU6298
4373:src/xeq.c     **** 		bad_mode_error();
 24078              		.loc 1 4373 2 view .LVU6299
4373:src/xeq.c     **** 		bad_mode_error();
 24079              		.loc 1 4373 5 is_stmt 0 view .LVU6300
 24080 0032 6CB1     		cbz	r4, .L1721
 24081              	.LBB3293:
 24082              	.LBB3294:
 24083              	.LBB3295:
4276:src/xeq.c     **** 		return NULL;
 24084              		.loc 1 4276 5 view .LVU6301
 24085 0034 244B     		ldr	r3, .L1736+8
4275:src/xeq.c     **** 	if (xp < xrom)
 24086              		.loc 1 4275 59 view .LVU6302
 24087 0036 24F00102 		bic	r2, r4, #1
 24088              	.LVL1893:
4276:src/xeq.c     **** 		return NULL;
 24089              		.loc 1 4276 5 view .LVU6303
 24090 003a 9A42     		cmp	r2, r3
 24091 003c 0746     		mov	r7, r0
 24092 003e 8846     		mov	r8, r1
 24093              	.LBE3295:
 24094              	.LBE3294:
4376:src/xeq.c     **** 
 24095              		.loc 1 4376 3 is_stmt 1 view .LVU6304
 24096              	.LVL1894:
4379:src/xeq.c     **** 			bad_mode_error();
ARM GAS  /tmp/ccjeMhND.s 			page 623


 24097              		.loc 1 4379 3 view .LVU6305
 24098              	.LBB3297:
 24099              	.LBI3294:
4273:src/xeq.c     **** {
 24100              		.loc 1 4273 24 view .LVU6306
 24101              	.LBB3296:
4275:src/xeq.c     **** 	if (xp < xrom)
 24102              		.loc 1 4275 2 view .LVU6307
4276:src/xeq.c     **** 		return NULL;
 24103              		.loc 1 4276 2 view .LVU6308
4276:src/xeq.c     **** 		return NULL;
 24104              		.loc 1 4276 5 is_stmt 0 view .LVU6309
 24105 0040 11D3     		bcc	.L1720
4280:src/xeq.c     **** 		return NULL;
 24106              		.loc 1 4280 2 is_stmt 1 view .LVU6310
4280:src/xeq.c     **** 		return NULL;
 24107              		.loc 1 4280 17 is_stmt 0 view .LVU6311
 24108 0042 2249     		ldr	r1, .L1736+12
 24109              	.LVL1895:
4280:src/xeq.c     **** 		return NULL;
 24110              		.loc 1 4280 17 view .LVU6312
 24111 0044 0988     		ldrh	r1, [r1]
 24112 0046 03EB4103 		add	r3, r3, r1, lsl #1
4280:src/xeq.c     **** 		return NULL;
 24113              		.loc 1 4280 5 view .LVU6313
 24114 004a 9A42     		cmp	r2, r3
 24115 004c 0BD2     		bcs	.L1720
 24116              	.LVL1896:
4280:src/xeq.c     **** 		return NULL;
 24117              		.loc 1 4280 5 view .LVU6314
 24118              	.LBE3296:
 24119              	.LBE3297:
4379:src/xeq.c     **** 			bad_mode_error();
 24120              		.loc 1 4379 6 view .LVU6315
 24121 004e 52B1     		cbz	r2, .L1720
 24122              	.LVL1897:
 24123              	.L1721:
4379:src/xeq.c     **** 			bad_mode_error();
 24124              		.loc 1 4379 6 view .LVU6316
 24125              	.LBE3293:
4374:src/xeq.c     **** 	else {
 24126              		.loc 1 4374 3 is_stmt 1 view .LVU6317
 24127              	.LBB3306:
 24128              	.LBI3306:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 24129              		.loc 1 566 6 view .LVU6318
 24130              	.LBE3306:
 567:src/xeq.c     **** }
 24131              		.loc 1 567 2 view .LVU6319
 24132              	.LBB3315:
 24133              	.LBB3307:
 24134              	.LBI3307:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24135              		.loc 1 537 5 view .LVU6320
 24136              	.LBB3308:
 538:src/xeq.c     **** 		Error = e;
 24137              		.loc 1 538 2 view .LVU6321
ARM GAS  /tmp/ccjeMhND.s 			page 624


 538:src/xeq.c     **** 		Error = e;
 24138              		.loc 1 538 12 is_stmt 0 view .LVU6322
 24139 0050 1F4B     		ldr	r3, .L1736+16
 538:src/xeq.c     **** 		Error = e;
 24140              		.loc 1 538 5 view .LVU6323
 24141 0052 1A68     		ldr	r2, [r3]
 24142 0054 22B1     		cbz	r2, .L1718
 24143              	.LVL1898:
 24144              	.L1733:
 24145              	.LBB3309:
 24146              	.LBB3310:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 24147              		.loc 1 540 3 is_stmt 1 view .LVU6324
 24148              	.LBE3310:
 24149              	.LBE3309:
 24150              	.LBE3308:
 24151              	.LBE3307:
 24152              	.LBE3315:
4393:src/xeq.c     **** }
 24153              		.loc 1 4393 9 is_stmt 0 view .LVU6325
 24154 0056 0020     		movs	r0, #0
 24155 0058 0146     		mov	r1, r0
4394:src/xeq.c     **** 
 24156              		.loc 1 4394 1 view .LVU6326
 24157 005a 1EB0     		add	sp, sp, #120
 24158              		.cfi_remember_state
 24159              		.cfi_def_cfa_offset 24
 24160              		@ sp needed
 24161 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 24162              	.LVL1899:
 24163              	.L1718:
 24164              		.cfi_restore_state
 24165              	.LBB3316:
 24166              	.LBB3314:
 24167              	.LBB3313:
 24168              	.LBB3312:
 24169              	.LBI3309:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24170              		.loc 1 537 5 is_stmt 1 view .LVU6327
 24171              	.LBB3311:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24172              		.loc 1 539 3 view .LVU6328
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24173              		.loc 1 539 9 is_stmt 0 view .LVU6329
 24174 0060 0D22     		movs	r2, #13
 24175 0062 1A60     		str	r2, [r3]
 24176 0064 F7E7     		b	.L1733
 24177              	.LVL1900:
 24178              	.L1720:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24179              		.loc 1 539 9 view .LVU6330
 24180              	.LBE3311:
 24181              	.LBE3312:
 24182              	.LBE3313:
 24183              	.LBE3314:
 24184              	.LBE3316:
 24185              	.LBB3317:
ARM GAS  /tmp/ccjeMhND.s 			page 625


4384:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 24186              		.loc 1 4384 4 is_stmt 1 view .LVU6331
 24187 0066 2B46     		mov	r3, r5
 24188 0068 3246     		mov	r2, r6
 24189 006a 03A8     		add	r0, sp, #12
 24190              	.LVL1901:
4384:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 24191              		.loc 1 4384 4 is_stmt 0 view .LVU6332
 24192 006c FFF7FEFF 		bl	ullint_to_dn
 24193              	.LVL1902:
4384:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 24194              		.loc 1 4384 27 is_stmt 1 view .LVU6333
4384:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 24195              		.loc 1 4384 30 is_stmt 0 view .LVU6334
 24196 0070 019B     		ldr	r3, [sp, #4]
 24197 0072 03BB     		cbnz	r3, .L1734
 24198              	.L1722:
4385:src/xeq.c     **** 
 24199              		.loc 1 4385 4 is_stmt 1 view .LVU6335
 24200 0074 4346     		mov	r3, r8
 24201 0076 3A46     		mov	r2, r7
 24202 0078 0CA8     		add	r0, sp, #48
 24203 007a FFF7FEFF 		bl	ullint_to_dn
 24204              	.LVL1903:
4385:src/xeq.c     **** 
 24205              		.loc 1 4385 27 view .LVU6336
4385:src/xeq.c     **** 
 24206              		.loc 1 4385 30 is_stmt 0 view .LVU6337
 24207 007e 029B     		ldr	r3, [sp, #8]
 24208 0080 A3B9     		cbnz	r3, .L1735
 24209              	.L1723:
4387:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24210              		.loc 1 4387 4 is_stmt 1 view .LVU6338
4387:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24211              		.loc 1 4387 16 is_stmt 0 view .LVU6339
 24212 0082 03AA     		add	r2, sp, #12
 24213 0084 0CA9     		add	r1, sp, #48
 24214 0086 15A8     		add	r0, sp, #84
 24215 0088 A047     		blx	r4
 24216              	.LVL1904:
4387:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24217              		.loc 1 4387 7 view .LVU6340
 24218 008a 48B9     		cbnz	r0, .L1724
4388:src/xeq.c     **** 			else
 24219              		.loc 1 4388 5 is_stmt 1 view .LVU6341
 24220              	.LVL1905:
 24221              	.LBB3298:
 24222              	.LBI3298:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24223              		.loc 1 537 5 view .LVU6342
 24224              	.LBB3299:
 538:src/xeq.c     **** 		Error = e;
 24225              		.loc 1 538 2 view .LVU6343
 538:src/xeq.c     **** 		Error = e;
 24226              		.loc 1 538 12 is_stmt 0 view .LVU6344
 24227 008c 104B     		ldr	r3, .L1736+16
 538:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccjeMhND.s 			page 626


 24228              		.loc 1 538 5 view .LVU6345
 24229 008e 1A68     		ldr	r2, [r3]
 24230 0090 002A     		cmp	r2, #0
 24231 0092 E0D1     		bne	.L1733
 24232              	.LVL1906:
 24233              	.LBB3300:
 24234              	.LBI3300:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24235              		.loc 1 537 5 is_stmt 1 view .LVU6346
 24236              	.LBB3301:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24237              		.loc 1 539 3 view .LVU6347
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24238              		.loc 1 539 9 is_stmt 0 view .LVU6348
 24239 0094 0122     		movs	r2, #1
 24240              	.LBE3301:
 24241              	.LBE3300:
 24242              	.LBE3299:
 24243              	.LBE3298:
 24244              	.LBE3317:
4393:src/xeq.c     **** }
 24245              		.loc 1 4393 9 view .LVU6349
 24246 0096 0146     		mov	r1, r0
 24247              	.LBB3318:
 24248              	.LBB3305:
 24249              	.LBB3304:
 24250              	.LBB3303:
 24251              	.LBB3302:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24252              		.loc 1 539 9 view .LVU6350
 24253 0098 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 24254              		.loc 1 540 3 is_stmt 1 view .LVU6351
 24255              	.LBE3302:
 24256              	.LBE3303:
 24257              	.LBE3304:
 24258              	.LBE3305:
 24259              	.LBE3318:
4394:src/xeq.c     **** 
 24260              		.loc 1 4394 1 is_stmt 0 view .LVU6352
 24261 009a 1EB0     		add	sp, sp, #120
 24262              		.cfi_remember_state
 24263              		.cfi_def_cfa_offset 24
 24264              		@ sp needed
 24265 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 24266              	.LVL1907:
 24267              	.L1724:
 24268              		.cfi_restore_state
 24269              	.LBB3319:
4390:src/xeq.c     **** 		}
 24270              		.loc 1 4390 5 is_stmt 1 view .LVU6353
4390:src/xeq.c     **** 		}
 24271              		.loc 1 4390 12 is_stmt 0 view .LVU6354
 24272 00a0 15A8     		add	r0, sp, #84
 24273 00a2 FFF7FEFF 		bl	intResult
 24274              	.LVL1908:
 24275              	.LBE3319:
ARM GAS  /tmp/ccjeMhND.s 			page 627


4394:src/xeq.c     **** 
 24276              		.loc 1 4394 1 view .LVU6355
 24277 00a6 1EB0     		add	sp, sp, #120
 24278              		.cfi_remember_state
 24279              		.cfi_def_cfa_offset 24
 24280              		@ sp needed
 24281 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 24282              	.LVL1909:
 24283              	.L1735:
 24284              		.cfi_restore_state
 24285              	.LBB3320:
4385:src/xeq.c     **** 
 24286              		.loc 1 4385 35 is_stmt 1 discriminator 1 view .LVU6356
 24287 00ac 0CA9     		add	r1, sp, #48
 24288 00ae 0846     		mov	r0, r1
 24289 00b0 FFF7FEFF 		bl	dn_minus
 24290              	.LVL1910:
 24291 00b4 E5E7     		b	.L1723
 24292              	.L1734:
4384:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 24293              		.loc 1 4384 35 discriminator 1 view .LVU6357
 24294 00b6 03A9     		add	r1, sp, #12
 24295 00b8 0846     		mov	r0, r1
 24296 00ba FFF7FEFF 		bl	dn_minus
 24297              	.LVL1911:
 24298 00be D9E7     		b	.L1722
 24299              	.L1737:
 24300              		.align	2
 24301              	.L1736:
 24302 00c0 00000000 		.word	XeqOpCode
 24303 00c4 00000000 		.word	dyfuncs
 24304 00c8 00000000 		.word	xrom
 24305 00cc 00000000 		.word	xrom_size
 24306 00d0 00000000 		.word	Error
 24307              	.LBE3320:
 24308              		.cfi_endproc
 24309              	.LFE236:
 24311              		.section	.text.xeq_init_contexts,"ax",%progbits
 24312              		.align	1
 24313              		.p2align 2,,3
 24314              		.global	xeq_init_contexts
 24315              		.syntax unified
 24316              		.thumb
 24317              		.thumb_func
 24318              		.fpu fpv4-sp-d16
 24320              	xeq_init_contexts:
 24321              	.LFB253:
5391:src/xeq.c     **** 	/*
 24322              		.loc 1 5391 30 view -0
 24323              		.cfi_startproc
 24324              		@ args = 0, pretend = 0, frame = 0
 24325              		@ frame_needed = 0, uses_anonymous_args = 0
5395:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
 24326              		.loc 1 5395 2 view .LVU6359
5396:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24327              		.loc 1 5396 2 view .LVU6360
5391:src/xeq.c     **** 	/*
ARM GAS  /tmp/ccjeMhND.s 			page 628


 24328              		.loc 1 5391 30 is_stmt 0 view .LVU6361
 24329 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 24330              		.cfi_def_cfa_offset 24
 24331              		.cfi_offset 3, -24
 24332              		.cfi_offset 4, -20
 24333              		.cfi_offset 5, -16
 24334              		.cfi_offset 6, -12
 24335              		.cfi_offset 7, -8
 24336              		.cfi_offset 14, -4
5396:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24337              		.loc 1 5396 17 view .LVU6362
 24338 0002 1D4B     		ldr	r3, .L1743
5399:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 24339              		.loc 1 5399 13 view .LVU6363
 24340 0004 1D4F     		ldr	r7, .L1743+4
5396:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24341              		.loc 1 5396 17 view .LVU6364
 24342 0006 1A68     		ldr	r2, [r3]
5396:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24343              		.loc 1 5396 34 view .LVU6365
 24344 0008 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
5397:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 24345              		.loc 1 5397 21 view .LVU6366
 24346 000c 92F8CF17 		ldrb	r1, [r2, #1999]	@ zero_extendqisi2
5399:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 24347              		.loc 1 5399 36 view .LVU6367
 24348 0010 5088     		ldrh	r0, [r2, #2]
5401:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24349              		.loc 1 5401 34 view .LVU6368
 24350 0012 B2F9E247 		ldrsh	r4, [r2, #2018]
5396:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24351              		.loc 1 5396 59 view .LVU6369
 24352 0016 13F02003 		ands	r3, r3, #32
 24353 001a 18BF     		it	ne
 24354 001c 4623     		movne	r3, #70
5397:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 24355              		.loc 1 5397 19 view .LVU6370
 24356 001e C1F16401 		rsb	r1, r1, #100
5396:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24357              		.loc 1 5396 59 view .LVU6371
 24358 0022 1E46     		mov	r6, r3
5397:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 24359              		.loc 1 5397 36 view .LVU6372
 24360 0024 C3EB8103 		rsb	r3, r3, r1, lsl #2
5400:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 24361              		.loc 1 5400 31 view .LVU6373
 24362 0028 03F50471 		add	r1, r3, #528
 24363 002c 89B2     		uxth	r1, r1
5401:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24364              		.loc 1 5401 21 view .LVU6374
 24365 002e 0D1A     		subs	r5, r1, r0
5398:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24366              		.loc 1 5398 22 view .LVU6375
 24367 0030 03F21623 		addw	r3, r3, #534
5399:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 24368              		.loc 1 5399 34 view .LVU6376
 24369 0034 181A     		subs	r0, r3, r0
ARM GAS  /tmp/ccjeMhND.s 			page 629


5401:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24370              		.loc 1 5401 32 view .LVU6377
 24371 0036 2544     		add	r5, r5, r4
5398:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24372              		.loc 1 5398 11 view .LVU6378
 24373 0038 141D     		adds	r4, r2, #4
5399:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 24374              		.loc 1 5399 13 view .LVU6379
 24375 003a 3860     		str	r0, [r7]
5398:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24376              		.loc 1 5398 22 view .LVU6380
 24377 003c 04EB4303 		add	r3, r4, r3, lsl #1
5396:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24378              		.loc 1 5396 15 view .LVU6381
 24379 0040 0F48     		ldr	r0, .L1743+8
5398:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24380              		.loc 1 5398 9 view .LVU6382
 24381 0042 104C     		ldr	r4, .L1743+12
5401:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24382              		.loc 1 5401 11 view .LVU6383
 24383 0044 104F     		ldr	r7, .L1743+16
5398:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24384              		.loc 1 5398 9 view .LVU6384
 24385 0046 2360     		str	r3, [r4]
5396:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24386              		.loc 1 5396 15 view .LVU6385
 24387 0048 0660     		str	r6, [r0]
5397:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 24388              		.loc 1 5397 2 is_stmt 1 view .LVU6386
 24389              	.LVL1912:
5398:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24390              		.loc 1 5398 2 view .LVU6387
5399:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 24391              		.loc 1 5399 2 view .LVU6388
5400:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 24392              		.loc 1 5400 2 view .LVU6389
5400:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 24393              		.loc 1 5400 10 is_stmt 0 view .LVU6390
 24394 004a 1180     		strh	r1, [r2]	@ movhi
5401:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24395              		.loc 1 5401 2 is_stmt 1 view .LVU6391
5402:src/xeq.c     **** 
 24396              		.loc 1 5402 14 is_stmt 0 view .LVU6392
 24397 004c 6420     		movs	r0, #100
5401:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24398              		.loc 1 5401 11 view .LVU6393
 24399 004e 3D60     		str	r5, [r7]
5402:src/xeq.c     **** 
 24400              		.loc 1 5402 2 is_stmt 1 view .LVU6394
5402:src/xeq.c     **** 
 24401              		.loc 1 5402 14 is_stmt 0 view .LVU6395
 24402 0050 FFF7FEFF 		bl	get_reg_n
 24403              	.LVL1913:
5408:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 24404              		.loc 1 5408 2 view .LVU6396
 24405 0054 0D4C     		ldr	r4, .L1743+20
5402:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 630


 24406              		.loc 1 5402 12 view .LVU6397
 24407 0056 0E4B     		ldr	r3, .L1743+24
5402:src/xeq.c     **** 
 24408              		.loc 1 5402 14 view .LVU6398
 24409 0058 0246     		mov	r2, r0
5408:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 24410              		.loc 1 5408 2 view .LVU6399
 24411 005a 0021     		movs	r1, #0
 24412 005c 2046     		mov	r0, r4
5402:src/xeq.c     **** 
 24413              		.loc 1 5402 12 view .LVU6400
 24414 005e 1A60     		str	r2, [r3]
5408:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 24415              		.loc 1 5408 2 is_stmt 1 view .LVU6401
 24416 0060 FFF7FEFF 		bl	decContextDefault
 24417              	.LVL1914:
5409:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 24418              		.loc 1 5409 2 view .LVU6402
5409:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 24419              		.loc 1 5409 13 is_stmt 0 view .LVU6403
 24420 0064 2723     		movs	r3, #39
5410:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 24421              		.loc 1 5410 10 view .LVU6404
 24422 0066 0B49     		ldr	r1, .L1743+28
5411:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 24423              		.loc 1 5411 10 view .LVU6405
 24424 0068 0B4A     		ldr	r2, .L1743+32
5409:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 24425              		.loc 1 5409 13 view .LVU6406
 24426 006a 2360     		str	r3, [r4]
5410:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 24427              		.loc 1 5410 2 is_stmt 1 view .LVU6407
5412:src/xeq.c     **** }
 24428              		.loc 1 5412 12 is_stmt 0 view .LVU6408
 24429 006c 0323     		movs	r3, #3
 24430 006e 2373     		strb	r3, [r4, #12]
5411:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 24431              		.loc 1 5411 10 view .LVU6409
 24432 0070 C4E90112 		strd	r1, r2, [r4, #4]
5412:src/xeq.c     **** }
 24433              		.loc 1 5412 2 is_stmt 1 view .LVU6410
5413:src/xeq.c     **** 
 24434              		.loc 1 5413 1 is_stmt 0 view .LVU6411
 24435 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 24436              	.L1744:
 24437 0076 00BF     		.align	2
 24438              	.L1743:
 24439 0078 00000000 		.word	main_ram
 24440 007c 00000000 		.word	RetStkSize
 24441 0080 00000000 		.word	SizeStatRegs
 24442 0084 00000000 		.word	RetStk
 24443 0088 00000000 		.word	ProgFree
 24444 008c 00000000 		.word	Ctx
 24445 0090 00000000 		.word	StackBase
 24446 0094 3F420F00 		.word	999999
 24447 0098 C1BDF0FF 		.word	-999999
 24448              		.cfi_endproc
ARM GAS  /tmp/ccjeMhND.s 			page 631


 24449              	.LFE253:
 24451              		.section	.text.not_running,"ax",%progbits
 24452              		.align	1
 24453              		.p2align 2,,3
 24454              		.global	not_running
 24455              		.syntax unified
 24456              		.thumb
 24457              		.thumb_func
 24458              		.fpu fpv4-sp-d16
 24460              	not_running:
 24461              	.LFB254:
5561:src/xeq.c     **** 	if ( Running ) {
 24462              		.loc 1 5561 23 is_stmt 1 view -0
 24463              		.cfi_startproc
 24464              		@ args = 0, pretend = 0, frame = 0
 24465              		@ frame_needed = 0, uses_anonymous_args = 0
 24466              		@ link register save eliminated.
5562:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 24467              		.loc 1 5562 2 view .LVU6413
5562:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 24468              		.loc 1 5562 7 is_stmt 0 view .LVU6414
 24469 0000 064B     		ldr	r3, .L1750
5562:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 24470              		.loc 1 5562 5 view .LVU6415
 24471 0002 1B68     		ldr	r3, [r3]
 24472 0004 0BB9     		cbnz	r3, .L1749
5566:src/xeq.c     **** }
 24473              		.loc 1 5566 9 view .LVU6416
 24474 0006 0120     		movs	r0, #1
 24475 0008 7047     		bx	lr
 24476              	.L1749:
5563:src/xeq.c     **** 		return 0;
 24477              		.loc 1 5563 3 is_stmt 1 view .LVU6417
 24478              	.LVL1915:
 24479              	.LBB3325:
 24480              	.LBI3325:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24481              		.loc 1 537 5 view .LVU6418
 24482              	.LBB3326:
 538:src/xeq.c     **** 		Error = e;
 24483              		.loc 1 538 2 view .LVU6419
 538:src/xeq.c     **** 		Error = e;
 24484              		.loc 1 538 12 is_stmt 0 view .LVU6420
 24485 000a 054B     		ldr	r3, .L1750+4
 24486 000c 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 24487              		.loc 1 538 5 view .LVU6421
 24488 000e 10B9     		cbnz	r0, .L1748
 24489              	.LVL1916:
 24490              	.LBB3327:
 24491              	.LBI3327:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24492              		.loc 1 537 5 is_stmt 1 view .LVU6422
 24493              	.LBB3328:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24494              		.loc 1 539 3 view .LVU6423
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/ccjeMhND.s 			page 632


 24495              		.loc 1 539 9 is_stmt 0 view .LVU6424
 24496 0010 0722     		movs	r2, #7
 24497 0012 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 24498              		.loc 1 540 3 is_stmt 1 view .LVU6425
 24499 0014 7047     		bx	lr
 24500              	.LVL1917:
 24501              	.L1748:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 24502              		.loc 1 540 3 is_stmt 0 view .LVU6426
 24503              	.LBE3328:
 24504              	.LBE3327:
 24505              	.LBE3326:
 24506              	.LBE3325:
5564:src/xeq.c     **** 	}
 24507              		.loc 1 5564 10 view .LVU6427
 24508 0016 0020     		movs	r0, #0
 24509              	.LVL1918:
5567:src/xeq.c     **** 
 24510              		.loc 1 5567 1 view .LVU6428
 24511 0018 7047     		bx	lr
 24512              	.L1751:
 24513 001a 00BF     		.align	2
 24514              	.L1750:
 24515 001c 00000000 		.word	Running
 24516 0020 00000000 		.word	Error
 24517              		.cfi_endproc
 24518              	.LFE254:
 24520              		.section	.text.set_running_off_sst,"ax",%progbits
 24521              		.align	1
 24522              		.p2align 2,,3
 24523              		.global	set_running_off_sst
 24524              		.syntax unified
 24525              		.thumb
 24526              		.thumb_func
 24527              		.fpu fpv4-sp-d16
 24529              	set_running_off_sst:
 24530              	.LFB255:
5572:src/xeq.c     **** 	Running = 0;
 24531              		.loc 1 5572 28 is_stmt 1 view -0
 24532              		.cfi_startproc
 24533              		@ args = 0, pretend = 0, frame = 0
 24534              		@ frame_needed = 0, uses_anonymous_args = 0
 24535              		@ link register save eliminated.
5573:src/xeq.c     **** }
 24536              		.loc 1 5573 2 view .LVU6430
5573:src/xeq.c     **** }
 24537              		.loc 1 5573 10 is_stmt 0 view .LVU6431
 24538 0000 014B     		ldr	r3, .L1753
 24539 0002 0022     		movs	r2, #0
 24540 0004 1A60     		str	r2, [r3]
5574:src/xeq.c     **** 
 24541              		.loc 1 5574 1 view .LVU6432
 24542 0006 7047     		bx	lr
 24543              	.L1754:
 24544              		.align	2
 24545              	.L1753:
ARM GAS  /tmp/ccjeMhND.s 			page 633


 24546 0008 00000000 		.word	Running
 24547              		.cfi_endproc
 24548              	.LFE255:
 24550              		.section	.text.set_running_on_sst,"ax",%progbits
 24551              		.align	1
 24552              		.p2align 2,,3
 24553              		.global	set_running_on_sst
 24554              		.syntax unified
 24555              		.thumb
 24556              		.thumb_func
 24557              		.fpu fpv4-sp-d16
 24559              	set_running_on_sst:
 24560              	.LFB256:
5576:src/xeq.c     **** 	Running = 1;
 24561              		.loc 1 5576 27 is_stmt 1 view -0
 24562              		.cfi_startproc
 24563              		@ args = 0, pretend = 0, frame = 0
 24564              		@ frame_needed = 0, uses_anonymous_args = 0
 24565              		@ link register save eliminated.
5577:src/xeq.c     **** }
 24566              		.loc 1 5577 2 view .LVU6434
5577:src/xeq.c     **** }
 24567              		.loc 1 5577 10 is_stmt 0 view .LVU6435
 24568 0000 014B     		ldr	r3, .L1756
 24569 0002 0122     		movs	r2, #1
 24570 0004 1A60     		str	r2, [r3]
5578:src/xeq.c     **** 
 24571              		.loc 1 5578 1 view .LVU6436
 24572 0006 7047     		bx	lr
 24573              	.L1757:
 24574              		.align	2
 24575              	.L1756:
 24576 0008 00000000 		.word	Running
 24577              		.cfi_endproc
 24578              	.LFE256:
 24580              		.section	.text.set_running_off,"ax",%progbits
 24581              		.align	1
 24582              		.p2align 2,,3
 24583              		.global	set_running_off
 24584              		.syntax unified
 24585              		.thumb
 24586              		.thumb_func
 24587              		.fpu fpv4-sp-d16
 24589              	set_running_off:
 24590              	.LFB257:
5580:src/xeq.c     **** 	set_running_off_sst();
 24591              		.loc 1 5580 24 is_stmt 1 view -0
 24592              		.cfi_startproc
 24593              		@ args = 0, pretend = 0, frame = 0
 24594              		@ frame_needed = 0, uses_anonymous_args = 0
 24595              		@ link register save eliminated.
5581:src/xeq.c     **** 	State.entryp = 0;
 24596              		.loc 1 5581 2 view .LVU6438
 24597              	.LBB3329:
 24598              	.LBI3329:
5572:src/xeq.c     **** 	Running = 0;
 24599              		.loc 1 5572 6 view .LVU6439
ARM GAS  /tmp/ccjeMhND.s 			page 634


 24600              	.LBB3330:
5573:src/xeq.c     **** }
 24601              		.loc 1 5573 2 view .LVU6440
 24602              	.LBE3330:
 24603              	.LBE3329:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 24604              		.loc 1 5582 15 is_stmt 0 view .LVU6441
 24605 0000 064B     		ldr	r3, .L1759
 24606              	.LBB3333:
 24607              	.LBB3331:
5573:src/xeq.c     **** }
 24608              		.loc 1 5573 10 view .LVU6442
 24609 0002 074A     		ldr	r2, .L1759+4
 24610              	.LBE3331:
 24611              	.LBE3333:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 24612              		.loc 1 5582 15 view .LVU6443
 24613 0004 1B68     		ldr	r3, [r3]
 24614              	.LBB3334:
 24615              	.LBB3332:
5573:src/xeq.c     **** }
 24616              		.loc 1 5573 10 view .LVU6444
 24617 0006 0021     		movs	r1, #0
 24618 0008 1160     		str	r1, [r2]
 24619              	.LBE3332:
 24620              	.LBE3334:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 24621              		.loc 1 5582 2 is_stmt 1 view .LVU6445
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 24622              		.loc 1 5582 15 is_stmt 0 view .LVU6446
 24623 000a 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 24624 000e 61F30412 		bfi	r2, r1, #4, #1
 24625 0012 83F8DD27 		strb	r2, [r3, #2013]
 24626              		.loc 1 5583 2 is_stmt 1 view .LVU6447
 24627 0016 8A20     		movs	r0, #138
 24628 0018 FFF7FEBF 		b	dot
 24629              	.LVL1919:
 24630              	.L1760:
 24631              		.align	2
 24632              	.L1759:
 24633 001c 00000000 		.word	main_ram
 24634 0020 00000000 		.word	Running
 24635              		.cfi_endproc
 24636              	.LFE257:
 24638              		.section	.text.set_running_on,"ax",%progbits
 24639              		.align	1
 24640              		.p2align 2,,3
 24641              		.global	set_running_on
 24642              		.syntax unified
 24643              		.thumb
 24644              		.thumb_func
 24645              		.fpu fpv4-sp-d16
 24647              	set_running_on:
 24648              	.LFB258:
5584:src/xeq.c     **** }
5585:src/xeq.c     **** 
5586:src/xeq.c     **** void set_running_on() {
ARM GAS  /tmp/ccjeMhND.s 			page 635


 24649              		.loc 1 5586 23 view -0
 24650              		.cfi_startproc
 24651              		@ args = 0, pretend = 0, frame = 0
 24652              		@ frame_needed = 0, uses_anonymous_args = 0
5587:src/xeq.c     **** 	update_speed(0);
 24653              		.loc 1 5587 17 view .LVU6449
5588:src/xeq.c     **** 	GoFast = 1;
 24654              		.loc 1 5588 2 view .LVU6450
5586:src/xeq.c     **** 	update_speed(0);
 24655              		.loc 1 5586 23 is_stmt 0 view .LVU6451
 24656 0000 38B5     		push	{r3, r4, r5, lr}
 24657              		.cfi_def_cfa_offset 16
 24658              		.cfi_offset 3, -16
 24659              		.cfi_offset 4, -12
 24660              		.cfi_offset 5, -8
 24661              		.cfi_offset 14, -4
 24662              	.LBB3335:
 24663              	.LBB3336:
 183:src/xeq.c     **** }
 24664              		.loc 1 183 9 view .LVU6452
 24665 0002 0C4B     		ldr	r3, .L1767
 24666              	.LBE3336:
 24667              	.LBE3335:
 24668              		.loc 1 5588 9 view .LVU6453
 24669 0004 0C4D     		ldr	r5, .L1767+4
 24670              	.LBB3340:
 24671              	.LBB3337:
 183:src/xeq.c     **** }
 24672              		.loc 1 183 9 view .LVU6454
 24673 0006 1B68     		ldr	r3, [r3]
 24674              	.LBE3337:
 24675              	.LBE3340:
 24676              	.LBB3341:
 24677              	.LBB3342:
5577:src/xeq.c     **** }
 24678              		.loc 1 5577 10 view .LVU6455
 24679 0008 0C4C     		ldr	r4, .L1767+8
 24680              	.LBE3342:
 24681              	.LBE3341:
 24682              	.LBB3344:
 24683              	.LBB3338:
 183:src/xeq.c     **** }
 24684              		.loc 1 183 9 view .LVU6456
 24685 000a B3F8E037 		ldrh	r3, [r3, #2016]
 24686              	.LBE3338:
 24687              	.LBE3344:
5589:src/xeq.c     **** 	set_running_on_sst();
5590:src/xeq.c     **** 	LastKey = 0;
 24688              		.loc 1 5590 10 view .LVU6457
 24689 000e 0C49     		ldr	r1, .L1767+12
5591:src/xeq.c     **** 	if (!is_xrom())
 24690              		.loc 1 5591 5 view .LVU6458
 24691 0010 9B0B     		lsrs	r3, r3, #14
5588:src/xeq.c     **** 	set_running_on_sst();
 24692              		.loc 1 5588 9 view .LVU6459
 24693 0012 0122     		movs	r2, #1
5590:src/xeq.c     **** 	if (!is_xrom())
ARM GAS  /tmp/ccjeMhND.s 			page 636


 24694              		.loc 1 5590 10 view .LVU6460
 24695 0014 0020     		movs	r0, #0
 24696              		.loc 1 5591 5 view .LVU6461
 24697 0016 032B     		cmp	r3, #3
5588:src/xeq.c     **** 	set_running_on_sst();
 24698              		.loc 1 5588 9 view .LVU6462
 24699 0018 2A60     		str	r2, [r5]
5589:src/xeq.c     **** 	LastKey = 0;
 24700              		.loc 1 5589 2 is_stmt 1 view .LVU6463
 24701              	.LBB3345:
 24702              	.LBI3341:
5576:src/xeq.c     **** 	Running = 1;
 24703              		.loc 1 5576 6 view .LVU6464
 24704              	.LBB3343:
5577:src/xeq.c     **** }
 24705              		.loc 1 5577 2 view .LVU6465
5577:src/xeq.c     **** }
 24706              		.loc 1 5577 10 is_stmt 0 view .LVU6466
 24707 001a 2260     		str	r2, [r4]
 24708              	.LBE3343:
 24709              	.LBE3345:
5590:src/xeq.c     **** 	if (!is_xrom())
 24710              		.loc 1 5590 2 is_stmt 1 view .LVU6467
5590:src/xeq.c     **** 	if (!is_xrom())
 24711              		.loc 1 5590 10 is_stmt 0 view .LVU6468
 24712 001c C874     		strb	r0, [r1, #19]
 24713              		.loc 1 5591 2 is_stmt 1 view .LVU6469
 24714              	.LBB3346:
 24715              	.LBI3335:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 24716              		.loc 1 182 5 view .LVU6470
 24717              	.LBB3339:
 183:src/xeq.c     **** }
 24718              		.loc 1 183 2 view .LVU6471
 24719              	.LBE3339:
 24720              	.LBE3346:
 24721              		.loc 1 5591 5 is_stmt 0 view .LVU6472
 24722 001e 01D0     		beq	.L1762
5592:src/xeq.c     **** 		error_message(ERR_NONE);
 24723              		.loc 1 5592 3 is_stmt 1 view .LVU6473
 24724 0020 FFF7FEFF 		bl	error_message
 24725              	.LVL1920:
 24726              	.L1762:
5593:src/xeq.c     **** 	dot(BEG, 0);
 24727              		.loc 1 5593 2 view .LVU6474
 24728 0024 0021     		movs	r1, #0
 24729 0026 8820     		movs	r0, #136
 24730 0028 FFF7FEFF 		bl	dot
 24731              	.LVL1921:
5594:src/xeq.c     **** 	finish_display(); // BEG
 24732              		.loc 1 5594 2 view .LVU6475
5595:src/xeq.c     **** }
 24733              		.loc 1 5595 1 is_stmt 0 view .LVU6476
 24734 002c BDE83840 		pop	{r3, r4, r5, lr}
 24735              		.cfi_restore 14
 24736              		.cfi_restore 5
 24737              		.cfi_restore 4
ARM GAS  /tmp/ccjeMhND.s 			page 637


 24738              		.cfi_restore 3
 24739              		.cfi_def_cfa_offset 0
5594:src/xeq.c     **** 	finish_display(); // BEG
 24740              		.loc 1 5594 2 view .LVU6477
 24741 0030 FFF7FEBF 		b	finish_display
 24742              	.LVL1922:
 24743              	.L1768:
 24744              		.align	2
 24745              	.L1767:
 24746 0034 00000000 		.word	main_ram
 24747 0038 00000000 		.word	GoFast
 24748 003c 00000000 		.word	Running
 24749 0040 00000000 		.word	StateWhileOn
 24750              		.cfi_endproc
 24751              	.LFE258:
 24753              		.section	.text.gsbgto,"ax",%progbits
 24754              		.align	1
 24755              		.p2align 2,,3
 24756              		.syntax unified
 24757              		.thumb
 24758              		.thumb_func
 24759              		.fpu fpv4-sp-d16
 24761              	gsbgto:
 24762              	.LVL1923:
 24763              	.LFB149:
2016:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 24764              		.loc 1 2016 66 is_stmt 1 view -0
 24765              		.cfi_startproc
 24766              		@ args = 0, pretend = 0, frame = 0
 24767              		@ frame_needed = 0, uses_anonymous_args = 0
2017:src/xeq.c     **** 	raw_set_pc(pc);
 24768              		.loc 1 2017 2 view .LVU6479
2016:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 24769              		.loc 1 2016 66 is_stmt 0 view .LVU6480
 24770 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 24771              		.cfi_def_cfa_offset 24
 24772              		.cfi_offset 4, -24
 24773              		.cfi_offset 5, -20
 24774              		.cfi_offset 6, -16
 24775              		.cfi_offset 7, -12
 24776              		.cfi_offset 8, -8
 24777              		.cfi_offset 14, -4
2017:src/xeq.c     **** 	raw_set_pc(pc);
 24778              		.loc 1 2017 39 view .LVU6481
 24779 0004 214F     		ldr	r7, .L1780
 24780 0006 3B68     		ldr	r3, [r7]
2016:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 24781              		.loc 1 2016 66 view .LVU6482
 24782 0008 0446     		mov	r4, r0
 24783 000a 0D46     		mov	r5, r1
 24784              	.LBB3355:
 24785              	.LBB3356:
 280:src/xeq.c     **** 	update_program_bounds(0);
 24786              		.loc 1 280 11 view .LVU6483
 24787 000c A3F8E007 		strh	r0, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 24788              		.loc 1 281 2 view .LVU6484
ARM GAS  /tmp/ccjeMhND.s 			page 638


 24789 0010 0020     		movs	r0, #0
 24790              	.LVL1924:
 281:src/xeq.c     **** }
 24791              		.loc 1 281 2 view .LVU6485
 24792              	.LBE3356:
 24793              	.LBE3355:
2017:src/xeq.c     **** 	raw_set_pc(pc);
 24794              		.loc 1 2017 27 view .LVU6486
 24795 0012 B3F8EC87 		ldrh	r8, [r3, #2028]
 24796              	.LVL1925:
2018:src/xeq.c     **** 	if (gsb) {
 24797              		.loc 1 2018 2 is_stmt 1 view .LVU6487
 24798              	.LBB3359:
 24799              	.LBI3355:
 279:src/xeq.c     **** 	State.pc = pc;
 24800              		.loc 1 279 13 view .LVU6488
 24801              	.LBB3357:
 280:src/xeq.c     **** 	update_program_bounds(0);
 24802              		.loc 1 280 2 view .LVU6489
 281:src/xeq.c     **** }
 24803              		.loc 1 281 2 view .LVU6490
 24804              	.LBE3357:
 24805              	.LBE3359:
2016:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 24806              		.loc 1 2016 66 is_stmt 0 view .LVU6491
 24807 0016 1646     		mov	r6, r2
 24808              	.LBB3360:
 24809              	.LBB3358:
 281:src/xeq.c     **** }
 24810              		.loc 1 281 2 view .LVU6492
 24811 0018 FFF7FEFF 		bl	update_program_bounds
 24812              	.LVL1926:
 281:src/xeq.c     **** }
 24813              		.loc 1 281 2 view .LVU6493
 24814              	.LBE3358:
 24815              	.LBE3360:
2019:src/xeq.c     **** 		if (!Running && !XromRunning) {
 24816              		.loc 1 2019 2 is_stmt 1 view .LVU6494
2019:src/xeq.c     **** 		if (!Running && !XromRunning) {
 24817              		.loc 1 2019 5 is_stmt 0 view .LVU6495
 24818 001c D5B1     		cbz	r5, .L1769
2020:src/xeq.c     **** 			// XEQ or hot key from keyboard
 24819              		.loc 1 2020 3 is_stmt 1 view .LVU6496
2020:src/xeq.c     **** 			// XEQ or hot key from keyboard
 24820              		.loc 1 2020 7 is_stmt 0 view .LVU6497
 24821 001e 1C4B     		ldr	r3, .L1780+4
2020:src/xeq.c     **** 			// XEQ or hot key from keyboard
 24822              		.loc 1 2020 19 view .LVU6498
 24823 0020 1C4A     		ldr	r2, .L1780+8
2020:src/xeq.c     **** 			// XEQ or hot key from keyboard
 24824              		.loc 1 2020 16 view .LVU6499
 24825 0022 1B68     		ldr	r3, [r3]
 24826 0024 1268     		ldr	r2, [r2]
 24827 0026 1343     		orrs	r3, r3, r2
 24828              	.LBB3361:
 24829              	.LBB3362:
1410:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 639


 24830              		.loc 1 1410 14 view .LVU6500
 24831 0028 3A68     		ldr	r2, [r7]
 24832              	.LBE3362:
 24833              	.LBE3361:
2020:src/xeq.c     **** 			// XEQ or hot key from keyboard
 24834              		.loc 1 2020 16 view .LVU6501
 24835 002a 1FD0     		beq	.L1772
 24836              	.LVL1927:
 24837              	.L1773:
2028:src/xeq.c     **** 			// Stack is full
 24838              		.loc 1 2028 3 is_stmt 1 view .LVU6502
2028:src/xeq.c     **** 			// Stack is full
 24839              		.loc 1 2028 36 is_stmt 0 view .LVU6503
 24840 002c 1A49     		ldr	r1, .L1780+12
2028:src/xeq.c     **** 			// Stack is full
 24841              		.loc 1 2028 8 view .LVU6504
 24842 002e B2F9E237 		ldrsh	r3, [r2, #2018]
2028:src/xeq.c     **** 			// Stack is full
 24843              		.loc 1 2028 58 view .LVU6505
 24844 0032 91F90110 		ldrsb	r1, [r1, #1]
 24845 0036 0029     		cmp	r1, #0
 24846 0038 A4BF     		itt	ge
 24847 003a 1849     		ldrge	r1, .L1780+16
 24848 003c 0968     		ldrge	r1, [r1]
2028:src/xeq.c     **** 			// Stack is full
 24849              		.loc 1 2028 7 view .LVU6506
 24850 003e C3F10000 		rsb	r0, r3, #0
2028:src/xeq.c     **** 			// Stack is full
 24851              		.loc 1 2028 58 view .LVU6507
 24852 0042 B8BF     		it	lt
 24853 0044 8821     		movlt	r1, #136
2028:src/xeq.c     **** 			// Stack is full
 24854              		.loc 1 2028 6 view .LVU6508
 24855 0046 8842     		cmp	r0, r1
 24856 0048 06DB     		blt	.L1776
2030:src/xeq.c     **** 			// clrretstk();
 24857              		.loc 1 2030 4 is_stmt 1 view .LVU6509
 24858              	.LVL1928:
 24859              	.LBB3364:
 24860              	.LBI3364:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24861              		.loc 1 537 5 view .LVU6510
 24862              	.LBB3365:
 538:src/xeq.c     **** 		Error = e;
 24863              		.loc 1 538 2 view .LVU6511
 538:src/xeq.c     **** 		Error = e;
 24864              		.loc 1 538 12 is_stmt 0 view .LVU6512
 24865 004a 154B     		ldr	r3, .L1780+20
 538:src/xeq.c     **** 		Error = e;
 24866              		.loc 1 538 5 view .LVU6513
 24867 004c 1A68     		ldr	r2, [r3]
 24868 004e 0AB9     		cbnz	r2, .L1769
 24869              	.LVL1929:
 24870              	.LBB3366:
 24871              	.LBI3366:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24872              		.loc 1 537 5 is_stmt 1 view .LVU6514
ARM GAS  /tmp/ccjeMhND.s 			page 640


 24873              	.LBB3367:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24874              		.loc 1 539 3 view .LVU6515
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24875              		.loc 1 539 9 is_stmt 0 view .LVU6516
 24876 0050 0B22     		movs	r2, #11
 24877 0052 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 24878              		.loc 1 540 3 is_stmt 1 view .LVU6517
 24879              	.LVL1930:
 24880              	.L1769:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 24881              		.loc 1 540 3 is_stmt 0 view .LVU6518
 24882              	.LBE3367:
 24883              	.LBE3366:
 24884              	.LBE3365:
 24885              	.LBE3364:
2038:src/xeq.c     **** 
 24886              		.loc 1 2038 1 view .LVU6519
 24887 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 24888              	.LVL1931:
 24889              	.L1776:
2035:src/xeq.c     **** 		}
 24890              		.loc 1 2035 4 is_stmt 1 view .LVU6520
2035:src/xeq.c     **** 		}
 24891              		.loc 1 2035 10 is_stmt 0 view .LVU6521
 24892 0058 1249     		ldr	r1, .L1780+24
2035:src/xeq.c     **** 		}
 24893              		.loc 1 2035 11 view .LVU6522
 24894 005a 013B     		subs	r3, r3, #1
 24895 005c 1BB2     		sxth	r3, r3
2035:src/xeq.c     **** 		}
 24896              		.loc 1 2035 10 view .LVU6523
 24897 005e 0968     		ldr	r1, [r1]
2035:src/xeq.c     **** 		}
 24898              		.loc 1 2035 24 view .LVU6524
 24899 0060 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 24900 0064 21F81360 		strh	r6, [r1, r3, lsl #1]	@ movhi
2038:src/xeq.c     **** 
 24901              		.loc 1 2038 1 view .LVU6525
 24902 0068 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 24903              	.LVL1932:
 24904              	.L1772:
2022:src/xeq.c     **** 			set_running_on();
 24905              		.loc 1 2022 4 is_stmt 1 view .LVU6526
 24906              	.LBB3368:
 24907              	.LBI3361:
1409:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 24908              		.loc 1 1409 6 view .LVU6527
 24909              	.LBB3363:
1410:src/xeq.c     **** }
 24910              		.loc 1 1410 2 view .LVU6528
1410:src/xeq.c     **** }
 24911              		.loc 1 1410 24 is_stmt 0 view .LVU6529
 24912 006c A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
1410:src/xeq.c     **** }
 24913              		.loc 1 1410 12 view .LVU6530
ARM GAS  /tmp/ccjeMhND.s 			page 641


 24914 0070 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 24915              	.LBE3363:
 24916              	.LBE3368:
2023:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
 24917              		.loc 1 2023 4 is_stmt 1 view .LVU6531
 24918 0074 FFF7FEFF 		bl	set_running_on
 24919              	.LVL1933:
2024:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 24920              		.loc 1 2024 4 view .LVU6532
2024:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 24921              		.loc 1 2024 10 is_stmt 0 view .LVU6533
 24922 0078 A30B     		lsrs	r3, r4, #14
2024:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 24923              		.loc 1 2024 7 view .LVU6534
 24924 007a 032B     		cmp	r3, #3
2024:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 24925              		.loc 1 2024 24 view .LVU6535
 24926 007c 3A68     		ldr	r2, [r7]
2024:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 24927              		.loc 1 2024 7 view .LVU6536
 24928 007e D5D0     		beq	.L1773
2024:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 24929              		.loc 1 2024 21 discriminator 1 view .LVU6537
 24930 0080 B2F8EC37 		ldrh	r3, [r2, #2028]
 24931 0084 4345     		cmp	r3, r8
 24932 0086 18BF     		it	ne
 24933 0088 2646     		movne	r6, r4
 24934              	.LVL1934:
2024:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 24935              		.loc 1 2024 21 discriminator 1 view .LVU6538
 24936 008a CFE7     		b	.L1773
 24937              	.L1781:
 24938              		.align	2
 24939              	.L1780:
 24940 008c 00000000 		.word	main_ram
 24941 0090 00000000 		.word	Running
 24942 0094 00000000 		.word	XromRunning
 24943 0098 00000000 		.word	XromParams
 24944 009c 00000000 		.word	RetStkSize
 24945 00a0 00000000 		.word	Error
 24946 00a4 00000000 		.word	RetStk
 24947              		.cfi_endproc
 24948              	.LFE149:
 24950              		.section	.text.cmdgtocommon,"ax",%progbits
 24951              		.align	1
 24952              		.p2align 2,,3
 24953              		.global	cmdgtocommon
 24954              		.syntax unified
 24955              		.thumb
 24956              		.thumb_func
 24957              		.fpu fpv4-sp-d16
 24959              	cmdgtocommon:
 24960              	.LVL1935:
 24961              	.LFB152:
2078:src/xeq.c     **** 	if (pc == 0)
 24962              		.loc 1 2078 45 is_stmt 1 view -0
 24963              		.cfi_startproc
ARM GAS  /tmp/ccjeMhND.s 			page 642


 24964              		@ args = 0, pretend = 0, frame = 0
 24965              		@ frame_needed = 0, uses_anonymous_args = 0
 24966              		@ link register save eliminated.
2079:src/xeq.c     **** 		set_running_off();
 24967              		.loc 1 2079 2 view .LVU6540
 24968              	.LBB3375:
 24969              	.LBB3376:
 24970              	.LBB3377:
 24971              	.LBB3378:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 24972              		.loc 1 5582 15 is_stmt 0 view .LVU6541
 24973 0000 0A4A     		ldr	r2, .L1784
 24974              	.LBE3378:
 24975              	.LBE3377:
 24976              	.LBE3376:
 24977              	.LBE3375:
2079:src/xeq.c     **** 		set_running_off();
 24978              		.loc 1 2079 5 view .LVU6542
 24979 0002 0B46     		mov	r3, r1
 24980 0004 59B9     		cbnz	r1, .L1783
 24981              	.LBB3386:
 24982              	.LBI3375:
2078:src/xeq.c     **** 	if (pc == 0)
 24983              		.loc 1 2078 6 is_stmt 1 view .LVU6543
 24984              	.LVL1936:
 24985              	.LBB3385:
2080:src/xeq.c     **** 	else
 24986              		.loc 1 2080 3 view .LVU6544
 24987              	.LBB3384:
 24988              	.LBI3377:
5580:src/xeq.c     **** 	set_running_off_sst();
 24989              		.loc 1 5580 6 view .LVU6545
 24990              	.LBB3383:
5581:src/xeq.c     **** 	State.entryp = 0;
 24991              		.loc 1 5581 2 view .LVU6546
 24992              	.LBB3379:
 24993              	.LBI3379:
5572:src/xeq.c     **** 	Running = 0;
 24994              		.loc 1 5572 6 view .LVU6547
 24995              	.LBB3380:
5573:src/xeq.c     **** }
 24996              		.loc 1 5573 2 view .LVU6548
5573:src/xeq.c     **** }
 24997              		.loc 1 5573 10 is_stmt 0 view .LVU6549
 24998 0006 0A48     		ldr	r0, .L1784+4
 24999              	.LVL1937:
5573:src/xeq.c     **** }
 25000              		.loc 1 5573 10 view .LVU6550
 25001              	.LBE3380:
 25002              	.LBE3379:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 25003              		.loc 1 5582 15 view .LVU6551
 25004 0008 1268     		ldr	r2, [r2]
 25005              	.LBB3382:
 25006              	.LBB3381:
5573:src/xeq.c     **** }
 25007              		.loc 1 5573 10 view .LVU6552
ARM GAS  /tmp/ccjeMhND.s 			page 643


 25008 000a 0160     		str	r1, [r0]
 25009              	.LBE3381:
 25010              	.LBE3382:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 25011              		.loc 1 5582 2 is_stmt 1 view .LVU6553
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 25012              		.loc 1 5582 15 is_stmt 0 view .LVU6554
 25013 000c 92F8DD07 		ldrb	r0, [r2, #2013]	@ zero_extendqisi2
 25014 0010 61F30410 		bfi	r0, r1, #4, #1
 25015              	.LVL1938:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 25016              		.loc 1 5582 15 view .LVU6555
 25017 0014 82F8DD07 		strb	r0, [r2, #2013]
5583:src/xeq.c     **** }
 25018              		.loc 1 5583 2 is_stmt 1 view .LVU6556
 25019 0018 8A20     		movs	r0, #138
 25020 001a FFF7FEBF 		b	dot
 25021              	.LVL1939:
 25022              	.L1783:
5583:src/xeq.c     **** }
 25023              		.loc 1 5583 2 is_stmt 0 view .LVU6557
 25024              	.LBE3383:
 25025              	.LBE3384:
 25026              	.LBE3385:
 25027              	.LBE3386:
2082:src/xeq.c     **** }
 25028              		.loc 1 2082 3 is_stmt 1 view .LVU6558
2082:src/xeq.c     **** }
 25029              		.loc 1 2082 19 is_stmt 0 view .LVU6559
 25030 001e 1268     		ldr	r2, [r2]
2082:src/xeq.c     **** }
 25031              		.loc 1 2082 3 view .LVU6560
 25032 0020 0146     		mov	r1, r0
 25033              	.LVL1940:
2082:src/xeq.c     **** }
 25034              		.loc 1 2082 3 view .LVU6561
 25035 0022 B2F8E027 		ldrh	r2, [r2, #2016]
 25036 0026 1846     		mov	r0, r3
 25037              	.LVL1941:
2082:src/xeq.c     **** }
 25038              		.loc 1 2082 3 view .LVU6562
 25039 0028 FFF7FEBF 		b	gsbgto
 25040              	.LVL1942:
 25041              	.L1785:
2082:src/xeq.c     **** }
 25042              		.loc 1 2082 3 view .LVU6563
 25043              		.align	2
 25044              	.L1784:
 25045 002c 00000000 		.word	main_ram
 25046 0030 00000000 		.word	Running
 25047              		.cfi_endproc
 25048              	.LFE152:
 25050              		.section	.text.cmdgto,"ax",%progbits
 25051              		.align	1
 25052              		.p2align 2,,3
 25053              		.global	cmdgto
 25054              		.syntax unified
ARM GAS  /tmp/ccjeMhND.s 			page 644


 25055              		.thumb
 25056              		.thumb_func
 25057              		.fpu fpv4-sp-d16
 25059              	cmdgto:
 25060              	.LVL1943:
 25061              	.LFB158:
2138:src/xeq.c     **** 	unsigned int lbl;
 25062              		.loc 1 2138 45 is_stmt 1 view -0
 25063              		.cfi_startproc
 25064              		@ args = 0, pretend = 0, frame = 0
 25065              		@ frame_needed = 0, uses_anonymous_args = 0
2139:src/xeq.c     **** 	if (is_xrom())
 25066              		.loc 1 2139 2 view .LVU6565
2140:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 25067              		.loc 1 2140 2 view .LVU6566
 25068              	.LBB3387:
 25069              	.LBI3387:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 25070              		.loc 1 182 5 view .LVU6567
 25071              	.LBB3388:
 183:src/xeq.c     **** }
 25072              		.loc 1 183 2 view .LVU6568
 183:src/xeq.c     **** }
 25073              		.loc 1 183 9 is_stmt 0 view .LVU6569
 25074 0000 0E4B     		ldr	r3, .L1790
 25075 0002 1B68     		ldr	r3, [r3]
 25076 0004 B3F8E037 		ldrh	r3, [r3, #2016]
 25077              	.LBE3388:
 25078              	.LBE3387:
2140:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 25079              		.loc 1 2140 5 view .LVU6570
 25080 0008 9A0B     		lsrs	r2, r3, #14
 25081 000a 032A     		cmp	r2, #3
2138:src/xeq.c     **** 	unsigned int lbl;
 25082              		.loc 1 2138 45 view .LVU6571
 25083 000c 10B5     		push	{r4, lr}
 25084              		.cfi_def_cfa_offset 8
 25085              		.cfi_offset 4, -8
 25086              		.cfi_offset 14, -4
2138:src/xeq.c     **** 	unsigned int lbl;
 25087              		.loc 1 2138 45 view .LVU6572
 25088 000e 0C46     		mov	r4, r1
2140:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 25089              		.loc 1 2140 5 view .LVU6573
 25090 0010 0CD1     		bne	.L1787
2141:src/xeq.c     **** 	else
 25091              		.loc 1 2141 3 is_stmt 1 view .LVU6574
2141:src/xeq.c     **** 	else
 25092              		.loc 1 2141 9 is_stmt 0 view .LVU6575
 25093 0012 0B4B     		ldr	r3, .L1790+4
2141:src/xeq.c     **** 	else
 25094              		.loc 1 2141 37 view .LVU6576
 25095 0014 33F81010 		ldrh	r1, [r3, r0, lsl #1]
 25096              	.LVL1944:
2141:src/xeq.c     **** 	else
 25097              		.loc 1 2141 7 view .LVU6577
 25098 0018 41F44041 		orr	r1, r1, #49152
ARM GAS  /tmp/ccjeMhND.s 			page 645


 25099              	.LVL1945:
 25100              	.L1788:
2144:src/xeq.c     **** }
 25101              		.loc 1 2144 2 is_stmt 1 view .LVU6578
 25102 001c B4F14500 		subs	r0, r4, #69
 25103 0020 18BF     		it	ne
 25104 0022 0120     		movne	r0, #1
2145:src/xeq.c     **** 
 25105              		.loc 1 2145 1 is_stmt 0 view .LVU6579
 25106 0024 BDE81040 		pop	{r4, lr}
 25107              		.cfi_remember_state
 25108              		.cfi_restore 14
 25109              		.cfi_restore 4
 25110              		.cfi_def_cfa_offset 0
2144:src/xeq.c     **** }
 25111              		.loc 1 2144 2 view .LVU6580
 25112 0028 FFF7FEBF 		b	cmdgtocommon
 25113              	.LVL1946:
 25114              	.L1787:
 25115              		.cfi_restore_state
2143:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
 25116              		.loc 1 2143 3 is_stmt 1 view .LVU6581
 25117              	.LBB3389:
 25118              	.LBI3389:
2008:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 25119              		.loc 1 2008 14 view .LVU6582
 25120              	.LBB3390:
2009:src/xeq.c     **** }
 25121              		.loc 1 2009 2 view .LVU6583
2009:src/xeq.c     **** }
 25122              		.loc 1 2009 9 is_stmt 0 view .LVU6584
 25123 002c 40F4C441 		orr	r1, r0, #25088
 25124              	.LVL1947:
2009:src/xeq.c     **** }
 25125              		.loc 1 2009 9 view .LVU6585
 25126 0030 0322     		movs	r2, #3
 25127 0032 1846     		mov	r0, r3
 25128              	.LVL1948:
2009:src/xeq.c     **** }
 25129              		.loc 1 2009 9 view .LVU6586
 25130 0034 FFF7FEFF 		bl	find_opcode_from
 25131              	.LVL1949:
2009:src/xeq.c     **** }
 25132              		.loc 1 2009 9 view .LVU6587
 25133 0038 0146     		mov	r1, r0
 25134              	.LVL1950:
2009:src/xeq.c     **** }
 25135              		.loc 1 2009 9 view .LVU6588
 25136 003a EFE7     		b	.L1788
 25137              	.L1791:
 25138              		.align	2
 25139              	.L1790:
 25140 003c 00000000 		.word	main_ram
 25141 0040 00000000 		.word	.LANCHOR6
 25142              	.LBE3390:
 25143              	.LBE3389:
 25144              		.cfi_endproc
ARM GAS  /tmp/ccjeMhND.s 			page 646


 25145              	.LFE158:
 25147              		.section	.text.branchtoalpha,"ax",%progbits
 25148              		.align	1
 25149              		.p2align 2,,3
 25150              		.syntax unified
 25151              		.thumb
 25152              		.thumb_func
 25153              		.fpu fpv4-sp-d16
 25155              	branchtoalpha:
 25156              	.LVL1951:
 25157              	.LFB162:
2180:src/xeq.c     **** 	unsigned int op;
 25158              		.loc 1 2180 51 is_stmt 1 view -0
 25159              		.cfi_startproc
 25160              		@ args = 0, pretend = 0, frame = 0
 25161              		@ frame_needed = 0, uses_anonymous_args = 0
2181:src/xeq.c     **** 
 25162              		.loc 1 2181 2 view .LVU6590
2183:src/xeq.c     **** 	op |= buf[0] & 0xff;
 25163              		.loc 1 2183 2 view .LVU6591
2184:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 25164              		.loc 1 2184 2 view .LVU6592
2185:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 25165              		.loc 1 2185 2 view .LVU6593
2186:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 25166              		.loc 1 2186 2 view .LVU6594
2187:src/xeq.c     **** }
 25167              		.loc 1 2187 2 view .LVU6595
2180:src/xeq.c     **** 	unsigned int op;
 25168              		.loc 1 2180 51 is_stmt 0 view .LVU6596
 25169 0000 10B5     		push	{r4, lr}
 25170              		.cfi_def_cfa_offset 8
 25171              		.cfi_offset 4, -8
 25172              		.cfi_offset 14, -4
2186:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 25173              		.loc 1 2186 16 view .LVU6597
 25174 0002 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
2185:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 25175              		.loc 1 2185 16 view .LVU6598
 25176 0004 4C78     		ldrb	r4, [r1, #1]	@ zero_extendqisi2
2184:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 25177              		.loc 1 2184 15 view .LVU6599
 25178 0006 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
2186:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 25179              		.loc 1 2186 24 view .LVU6600
 25180 0008 1B06     		lsls	r3, r3, #24
2186:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 25181              		.loc 1 2186 5 view .LVU6601
 25182 000a 43EA0443 		orr	r3, r3, r4, lsl #16
 25183 000e 1343     		orrs	r3, r3, r2
2180:src/xeq.c     **** 	unsigned int op;
 25184              		.loc 1 2180 51 view .LVU6602
 25185 0010 0446     		mov	r4, r0
2187:src/xeq.c     **** }
 25186              		.loc 1 2187 2 view .LVU6603
 25187 0012 0121     		movs	r1, #1
 25188              	.LVL1952:
ARM GAS  /tmp/ccjeMhND.s 			page 647


2187:src/xeq.c     **** }
 25189              		.loc 1 2187 2 view .LVU6604
 25190 0014 43F47040 		orr	r0, r3, #61440
 25191              	.LVL1953:
2187:src/xeq.c     **** }
 25192              		.loc 1 2187 2 view .LVU6605
 25193 0018 FFF7FEFF 		bl	findmultilbl
 25194              	.LVL1954:
2187:src/xeq.c     **** }
 25195              		.loc 1 2187 2 view .LVU6606
 25196 001c 0146     		mov	r1, r0
 25197 001e 2046     		mov	r0, r4
2188:src/xeq.c     **** 
 25198              		.loc 1 2188 1 view .LVU6607
 25199 0020 BDE81040 		pop	{r4, lr}
 25200              		.cfi_restore 14
 25201              		.cfi_restore 4
 25202              		.cfi_def_cfa_offset 0
 25203              	.LVL1955:
2187:src/xeq.c     **** }
 25204              		.loc 1 2187 2 view .LVU6608
 25205 0024 FFF7FEBF 		b	cmdgtocommon
 25206              	.LVL1956:
2187:src/xeq.c     **** }
 25207              		.loc 1 2187 2 view .LVU6609
 25208              		.cfi_endproc
 25209              	.LFE162:
 25211              		.section	.text.cmdalphagto,"ax",%progbits
 25212              		.align	1
 25213              		.p2align 2,,3
 25214              		.global	cmdalphagto
 25215              		.syntax unified
 25216              		.thumb
 25217              		.thumb_func
 25218              		.fpu fpv4-sp-d16
 25220              	cmdalphagto:
 25221              	.LVL1957:
 25222              	.LFB163:
2190:src/xeq.c     **** 	char buf[14];
 25223              		.loc 1 2190 50 is_stmt 1 view -0
 25224              		.cfi_startproc
 25225              		@ args = 0, pretend = 0, frame = 16
 25226              		@ frame_needed = 0, uses_anonymous_args = 0
2191:src/xeq.c     **** 
 25227              		.loc 1 2191 2 view .LVU6611
2193:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25228              		.loc 1 2193 2 view .LVU6612
2190:src/xeq.c     **** 	char buf[14];
 25229              		.loc 1 2190 50 is_stmt 0 view .LVU6613
 25230 0000 30B5     		push	{r4, r5, lr}
 25231              		.cfi_def_cfa_offset 12
 25232              		.cfi_offset 4, -12
 25233              		.cfi_offset 5, -8
 25234              		.cfi_offset 14, -4
 25235 0002 85B0     		sub	sp, sp, #20
 25236              		.cfi_def_cfa_offset 32
2193:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
ARM GAS  /tmp/ccjeMhND.s 			page 648


 25237              		.loc 1 2193 2 view .LVU6614
 25238 0004 0E22     		movs	r2, #14
2190:src/xeq.c     **** 	char buf[14];
 25239              		.loc 1 2190 50 view .LVU6615
 25240 0006 0546     		mov	r5, r0
 25241 0008 0C46     		mov	r4, r1
2193:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25242              		.loc 1 2193 2 view .LVU6616
 25243 000a 6846     		mov	r0, sp
 25244              	.LVL1958:
2193:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25245              		.loc 1 2193 2 view .LVU6617
 25246 000c 0021     		movs	r1, #0
 25247              	.LVL1959:
2193:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25248              		.loc 1 2193 2 view .LVU6618
 25249 000e FFF7FEFF 		bl	xset
 25250              	.LVL1960:
2194:src/xeq.c     **** }
 25251              		.loc 1 2194 2 is_stmt 1 view .LVU6619
 25252 0012 6946     		mov	r1, sp
 25253 0014 2846     		mov	r0, r5
 25254 0016 FFF7FEFF 		bl	alpha_rcl_s
 25255              	.LVL1961:
 25256 001a 0146     		mov	r1, r0
 25257 001c B4F17000 		subs	r0, r4, #112
 25258 0020 18BF     		it	ne
 25259 0022 0120     		movne	r0, #1
 25260 0024 FFF7FEFF 		bl	branchtoalpha
 25261              	.LVL1962:
2195:src/xeq.c     **** 
 25262              		.loc 1 2195 1 is_stmt 0 view .LVU6620
 25263 0028 05B0     		add	sp, sp, #20
 25264              		.cfi_def_cfa_offset 12
 25265              		@ sp needed
 25266 002a 30BD     		pop	{r4, r5, pc}
2195:src/xeq.c     **** 
 25267              		.loc 1 2195 1 view .LVU6621
 25268              		.cfi_endproc
 25269              	.LFE163:
 25271              		.section	.text.op_gtoalpha,"ax",%progbits
 25272              		.align	1
 25273              		.p2align 2,,3
 25274              		.global	op_gtoalpha
 25275              		.syntax unified
 25276              		.thumb
 25277              		.thumb_func
 25278              		.fpu fpv4-sp-d16
 25280              	op_gtoalpha:
 25281              	.LVL1963:
 25282              	.LFB165:
2205:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 25283              		.loc 1 2205 33 is_stmt 1 view -0
 25284              		.cfi_startproc
 25285              		@ args = 0, pretend = 0, frame = 8
 25286              		@ frame_needed = 0, uses_anonymous_args = 0
2206:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 649


 25287              		.loc 1 2206 2 view .LVU6623
2205:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 25288              		.loc 1 2205 33 is_stmt 0 view .LVU6624
 25289 0000 10B5     		push	{r4, lr}
 25290              		.cfi_def_cfa_offset 8
 25291              		.cfi_offset 4, -8
 25292              		.cfi_offset 14, -4
 25293              	.LBB3393:
 25294              	.LBB3394:
2200:src/xeq.c     **** 	buf[3] = '\0';
 25295              		.loc 1 2200 13 view .LVU6625
 25296 0002 0B4B     		ldr	r3, .L1798
 25297 0004 1968     		ldr	r1, [r3]
 25298              	.LBE3394:
 25299              	.LBE3393:
2205:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 25300              		.loc 1 2205 33 view .LVU6626
 25301 0006 82B0     		sub	sp, sp, #8
 25302              		.cfi_def_cfa_offset 16
2205:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 25303              		.loc 1 2205 33 view .LVU6627
 25304 0008 0446     		mov	r4, r0
 25305              	.LVL1964:
 25306              	.LBB3396:
 25307              	.LBI3393:
2197:src/xeq.c     **** 	char buf[4];
 25308              		.loc 1 2197 13 is_stmt 1 view .LVU6628
 25309              	.LBB3395:
2198:src/xeq.c     **** 
 25310              		.loc 1 2198 2 view .LVU6629
2200:src/xeq.c     **** 	buf[3] = '\0';
 25311              		.loc 1 2200 2 view .LVU6630
 25312 000a 0322     		movs	r2, #3
 25313 000c 01F5F661 		add	r1, r1, #1968
 25314 0010 01A8     		add	r0, sp, #4
 25315              	.LVL1965:
2200:src/xeq.c     **** 	buf[3] = '\0';
 25316              		.loc 1 2200 2 is_stmt 0 view .LVU6631
 25317 0012 FFF7FEFF 		bl	xcopy
 25318              	.LVL1966:
2201:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 25319              		.loc 1 2201 2 is_stmt 1 view .LVU6632
2202:src/xeq.c     **** }
 25320              		.loc 1 2202 2 is_stmt 0 view .LVU6633
 25321 0016 B4F19800 		subs	r0, r4, #152
2201:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 25322              		.loc 1 2201 9 view .LVU6634
 25323 001a 4FF00003 		mov	r3, #0
2202:src/xeq.c     **** }
 25324              		.loc 1 2202 2 view .LVU6635
 25325 001e 18BF     		it	ne
 25326 0020 0120     		movne	r0, #1
 25327 0022 01A9     		add	r1, sp, #4
2201:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 25328              		.loc 1 2201 9 view .LVU6636
 25329 0024 8DF80730 		strb	r3, [sp, #7]
2202:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 650


 25330              		.loc 1 2202 2 is_stmt 1 view .LVU6637
 25331 0028 FFF7FEFF 		bl	branchtoalpha
 25332              	.LVL1967:
2202:src/xeq.c     **** }
 25333              		.loc 1 2202 2 is_stmt 0 view .LVU6638
 25334              	.LBE3395:
 25335              	.LBE3396:
2207:src/xeq.c     **** 
 25336              		.loc 1 2207 1 view .LVU6639
 25337 002c 02B0     		add	sp, sp, #8
 25338              		.cfi_def_cfa_offset 8
 25339              		@ sp needed
 25340 002e 10BD     		pop	{r4, pc}
 25341              	.L1799:
 25342              		.align	2
 25343              	.L1798:
 25344 0030 00000000 		.word	main_ram
 25345              		.cfi_endproc
 25346              	.LFE165:
 25348              		.section	.text.cmdskip,"ax",%progbits
 25349              		.align	1
 25350              		.p2align 2,,3
 25351              		.global	cmdskip
 25352              		.syntax unified
 25353              		.thumb
 25354              		.thumb_func
 25355              		.fpu fpv4-sp-d16
 25357              	cmdskip:
 25358              	.LVL1968:
 25359              	.LFB178:
2381:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25360              		.loc 1 2381 46 is_stmt 1 view -0
 25361              		.cfi_startproc
 25362              		@ args = 0, pretend = 0, frame = 8
 25363              		@ frame_needed = 0, uses_anonymous_args = 0
2382:src/xeq.c     **** 	unsigned int pc;
 25364              		.loc 1 2382 2 view .LVU6641
2381:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25365              		.loc 1 2381 46 is_stmt 0 view .LVU6642
 25366 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 25367              		.cfi_def_cfa_offset 20
 25368              		.cfi_offset 4, -20
 25369              		.cfi_offset 5, -16
 25370              		.cfi_offset 6, -12
 25371              		.cfi_offset 7, -8
 25372              		.cfi_offset 14, -4
2382:src/xeq.c     **** 	unsigned int pc;
 25373              		.loc 1 2382 30 view .LVU6643
 25374 0002 1D4F     		ldr	r7, .L1824
 25375 0004 3B68     		ldr	r3, [r7]
2385:src/xeq.c     **** 		int sgn;
 25376              		.loc 1 2385 5 view .LVU6644
 25377 0006 8B29     		cmp	r1, #139
2382:src/xeq.c     **** 	unsigned int pc;
 25378              		.loc 1 2382 21 view .LVU6645
 25379 0008 B3F8E067 		ldrh	r6, [r3, #2016]
 25380              	.LVL1969:
ARM GAS  /tmp/ccjeMhND.s 			page 651


2383:src/xeq.c     **** 
 25381              		.loc 1 2383 2 is_stmt 1 view .LVU6646
2385:src/xeq.c     **** 		int sgn;
 25382              		.loc 1 2385 2 view .LVU6647
2381:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25383              		.loc 1 2381 46 is_stmt 0 view .LVU6648
 25384 000c 83B0     		sub	sp, sp, #12
 25385              		.cfi_def_cfa_offset 32
2381:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25386              		.loc 1 2381 46 view .LVU6649
 25387 000e 0D46     		mov	r5, r1
2385:src/xeq.c     **** 		int sgn;
 25388              		.loc 1 2385 5 view .LVU6650
 25389 0010 22D0     		beq	.L1821
 25390 0012 0446     		mov	r4, r0
 25391              	.LVL1970:
 25392              	.L1801:
2394:src/xeq.c     **** 		pc = origpc + arg;
 25393              		.loc 1 2394 2 is_stmt 1 view .LVU6651
2394:src/xeq.c     **** 		pc = origpc + arg;
 25394              		.loc 1 2394 6 is_stmt 0 view .LVU6652
 25395 0014 B30B     		lsrs	r3, r6, #14
2394:src/xeq.c     **** 		pc = origpc + arg;
 25396              		.loc 1 2394 5 view .LVU6653
 25397 0016 032B     		cmp	r3, #3
 25398 0018 15D0     		beq	.L1822
 25399              	.LVL1971:
 25400              	.L1806:
2397:src/xeq.c     **** 		if (PcWrapped) {
 25401              		.loc 1 2397 28 is_stmt 1 discriminator 2 view .LVU6654
2397:src/xeq.c     **** 		if (PcWrapped) {
 25402              		.loc 1 2397 9 discriminator 2 view .LVU6655
2397:src/xeq.c     **** 		if (PcWrapped) {
 25403              		.loc 1 2397 9 is_stmt 0 discriminator 2 view .LVU6656
 25404 001a 24B1     		cbz	r4, .L1808
2397:src/xeq.c     **** 		if (PcWrapped) {
 25405              		.loc 1 2397 20 discriminator 1 view .LVU6657
 25406 001c FFF7FEFF 		bl	incpc
 25407              	.LVL1972:
 25408 0020 013C     		subs	r4, r4, #1
 25409              	.LVL1973:
2397:src/xeq.c     **** 		if (PcWrapped) {
 25410              		.loc 1 2397 16 discriminator 1 view .LVU6658
 25411 0022 0028     		cmp	r0, #0
 25412 0024 F9D0     		beq	.L1806
 25413              	.LVL1974:
 25414              	.L1808:
2398:src/xeq.c     **** 			report_err(ERR_RANGE);
 25415              		.loc 1 2398 3 is_stmt 1 view .LVU6659
2398:src/xeq.c     **** 			report_err(ERR_RANGE);
 25416              		.loc 1 2398 7 is_stmt 0 view .LVU6660
 25417 0026 154B     		ldr	r3, .L1824+4
2398:src/xeq.c     **** 			report_err(ERR_RANGE);
 25418              		.loc 1 2398 6 view .LVU6661
 25419 0028 1B68     		ldr	r3, [r3]
 25420 002a 73B9     		cbnz	r3, .L1823
 25421              	.L1809:
ARM GAS  /tmp/ccjeMhND.s 			page 652


2401:src/xeq.c     **** 	}
 25422              		.loc 1 2401 3 is_stmt 1 view .LVU6662
2401:src/xeq.c     **** 	}
 25423              		.loc 1 2401 8 is_stmt 0 view .LVU6663
 25424 002c 3B68     		ldr	r3, [r7]
2401:src/xeq.c     **** 	}
 25425              		.loc 1 2401 6 view .LVU6664
 25426 002e B3F8E007 		ldrh	r0, [r3, #2016]
 25427              	.LVL1975:
 25428              	.L1807:
2403:src/xeq.c     **** }
 25429              		.loc 1 2403 2 is_stmt 1 view .LVU6665
 25430 0032 A5F13801 		sub	r1, r5, #56
 25431 0036 B1FA81F1 		clz	r1, r1
 25432 003a 3246     		mov	r2, r6
 25433 003c 4909     		lsrs	r1, r1, #5
 25434 003e FFF7FEFF 		bl	gsbgto
 25435              	.LVL1976:
 25436              	.L1800:
2404:src/xeq.c     **** 
 25437              		.loc 1 2404 1 is_stmt 0 view .LVU6666
 25438 0042 03B0     		add	sp, sp, #12
 25439              		.cfi_remember_state
 25440              		.cfi_def_cfa_offset 20
 25441              		@ sp needed
 25442 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 25443              	.LVL1977:
 25444              	.L1822:
 25445              		.cfi_restore_state
2395:src/xeq.c     **** 	else {
 25446              		.loc 1 2395 3 is_stmt 1 view .LVU6667
2395:src/xeq.c     **** 	else {
 25447              		.loc 1 2395 6 is_stmt 0 view .LVU6668
 25448 0046 A019     		adds	r0, r4, r6
 25449              	.LVL1978:
2395:src/xeq.c     **** 	else {
 25450              		.loc 1 2395 6 view .LVU6669
 25451 0048 F3E7     		b	.L1807
 25452              	.LVL1979:
 25453              	.L1823:
2399:src/xeq.c     **** 		}
 25454              		.loc 1 2399 4 is_stmt 1 view .LVU6670
 25455              	.LBB3406:
 25456              	.LBI3406:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25457              		.loc 1 537 5 view .LVU6671
 25458              	.LBB3407:
 538:src/xeq.c     **** 		Error = e;
 25459              		.loc 1 538 2 view .LVU6672
 538:src/xeq.c     **** 		Error = e;
 25460              		.loc 1 538 12 is_stmt 0 view .LVU6673
 25461 004a 0D4B     		ldr	r3, .L1824+8
 538:src/xeq.c     **** 		Error = e;
 25462              		.loc 1 538 5 view .LVU6674
 25463 004c 1A68     		ldr	r2, [r3]
 25464 004e 002A     		cmp	r2, #0
 25465 0050 ECD1     		bne	.L1809
ARM GAS  /tmp/ccjeMhND.s 			page 653


 25466              	.LVL1980:
 25467              	.LBB3408:
 25468              	.LBI3408:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25469              		.loc 1 537 5 is_stmt 1 view .LVU6675
 25470              	.LBB3409:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25471              		.loc 1 539 3 view .LVU6676
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25472              		.loc 1 539 9 is_stmt 0 view .LVU6677
 25473 0052 0822     		movs	r2, #8
 25474 0054 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25475              		.loc 1 540 3 is_stmt 1 view .LVU6678
 25476 0056 E9E7     		b	.L1809
 25477              	.LVL1981:
 25478              	.L1821:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25479              		.loc 1 540 3 is_stmt 0 view .LVU6679
 25480              	.LBE3409:
 25481              	.LBE3408:
 25482              	.LBE3407:
 25483              	.LBE3406:
 25484              	.LBB3410:
2386:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
 25485              		.loc 1 2386 3 is_stmt 1 view .LVU6680
2387:src/xeq.c     **** 		if (sgn || arg >= 100) {
 25486              		.loc 1 2387 3 view .LVU6681
2387:src/xeq.c     **** 		if (sgn || arg >= 100) {
 25487              		.loc 1 2387 15 is_stmt 0 view .LVU6682
 25488 0058 01A9     		add	r1, sp, #4
 25489              	.LVL1982:
2387:src/xeq.c     **** 		if (sgn || arg >= 100) {
 25490              		.loc 1 2387 15 view .LVU6683
 25491 005a FFF7FEFF 		bl	get_reg_n_int_sgn
 25492              	.LVL1983:
2388:src/xeq.c     **** 			report_err(ERR_RANGE);
 25493              		.loc 1 2388 6 view .LVU6684
 25494 005e 019B     		ldr	r3, [sp, #4]
 25495              	.LVL1984:
2388:src/xeq.c     **** 			report_err(ERR_RANGE);
 25496              		.loc 1 2388 3 is_stmt 1 view .LVU6685
2388:src/xeq.c     **** 			report_err(ERR_RANGE);
 25497              		.loc 1 2388 6 is_stmt 0 view .LVU6686
 25498 0060 13B9     		cbnz	r3, .L1802
2388:src/xeq.c     **** 			report_err(ERR_RANGE);
 25499              		.loc 1 2388 11 discriminator 1 view .LVU6687
 25500 0062 6328     		cmp	r0, #99
2387:src/xeq.c     **** 		if (sgn || arg >= 100) {
 25501              		.loc 1 2387 7 discriminator 1 view .LVU6688
 25502 0064 0446     		mov	r4, r0
2388:src/xeq.c     **** 			report_err(ERR_RANGE);
 25503              		.loc 1 2388 11 discriminator 1 view .LVU6689
 25504 0066 D5D9     		bls	.L1801
 25505              	.L1802:
2389:src/xeq.c     **** 			return;
 25506              		.loc 1 2389 4 is_stmt 1 view .LVU6690
ARM GAS  /tmp/ccjeMhND.s 			page 654


 25507              	.LVL1985:
 25508              	.LBB3411:
 25509              	.LBI3411:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25510              		.loc 1 537 5 view .LVU6691
 25511              	.LBB3412:
 538:src/xeq.c     **** 		Error = e;
 25512              		.loc 1 538 2 view .LVU6692
 538:src/xeq.c     **** 		Error = e;
 25513              		.loc 1 538 12 is_stmt 0 view .LVU6693
 25514 0068 054B     		ldr	r3, .L1824+8
 538:src/xeq.c     **** 		Error = e;
 25515              		.loc 1 538 5 view .LVU6694
 25516 006a 1A68     		ldr	r2, [r3]
 25517 006c 002A     		cmp	r2, #0
 25518 006e E8D1     		bne	.L1800
 25519              	.LVL1986:
 25520              	.LBB3413:
 25521              	.LBI3413:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25522              		.loc 1 537 5 is_stmt 1 view .LVU6695
 25523              	.LBB3414:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25524              		.loc 1 539 3 view .LVU6696
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25525              		.loc 1 539 9 is_stmt 0 view .LVU6697
 25526 0070 0822     		movs	r2, #8
 25527 0072 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25528              		.loc 1 540 3 is_stmt 1 view .LVU6698
 25529              	.LVL1987:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25530              		.loc 1 540 3 is_stmt 0 view .LVU6699
 25531              	.LBE3414:
 25532              	.LBE3413:
 25533              	.LBE3412:
 25534              	.LBE3411:
2390:src/xeq.c     **** 		}
 25535              		.loc 1 2390 4 is_stmt 1 view .LVU6700
 25536 0074 E5E7     		b	.L1800
 25537              	.L1825:
 25538 0076 00BF     		.align	2
 25539              	.L1824:
 25540 0078 00000000 		.word	main_ram
 25541 007c 00000000 		.word	PcWrapped
 25542 0080 00000000 		.word	Error
 25543              	.LBE3410:
 25544              		.cfi_endproc
 25545              	.LFE178:
 25547              		.section	.text.cmdback,"ax",%progbits
 25548              		.align	1
 25549              		.p2align 2,,3
 25550              		.global	cmdback
 25551              		.syntax unified
 25552              		.thumb
 25553              		.thumb_func
 25554              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccjeMhND.s 			page 655


 25556              	cmdback:
 25557              	.LVL1988:
 25558              	.LFB179:
2407:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25559              		.loc 1 2407 46 view -0
 25560              		.cfi_startproc
 25561              		@ args = 0, pretend = 0, frame = 0
 25562              		@ frame_needed = 0, uses_anonymous_args = 0
2408:src/xeq.c     **** 	unsigned int pc = origpc;
 25563              		.loc 1 2408 2 view .LVU6702
2407:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25564              		.loc 1 2407 46 is_stmt 0 view .LVU6703
 25565 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 25566              		.cfi_def_cfa_offset 24
 25567              		.cfi_offset 3, -24
 25568              		.cfi_offset 4, -20
 25569              		.cfi_offset 5, -16
 25570              		.cfi_offset 6, -12
 25571              		.cfi_offset 7, -8
 25572              		.cfi_offset 14, -4
2408:src/xeq.c     **** 	unsigned int pc = origpc;
 25573              		.loc 1 2408 30 view .LVU6704
 25574 0002 184B     		ldr	r3, .L1845
 25575 0004 1B68     		ldr	r3, [r3]
2408:src/xeq.c     **** 	unsigned int pc = origpc;
 25576              		.loc 1 2408 21 view .LVU6705
 25577 0006 B3F8E067 		ldrh	r6, [r3, #2016]
 25578              	.LVL1989:
2409:src/xeq.c     **** 
 25579              		.loc 1 2409 2 is_stmt 1 view .LVU6706
2411:src/xeq.c     **** 		pc -= arg + 1;
 25580              		.loc 1 2411 2 view .LVU6707
2411:src/xeq.c     **** 		pc -= arg + 1;
 25581              		.loc 1 2411 6 is_stmt 0 view .LVU6708
 25582 000a B30B     		lsrs	r3, r6, #14
2411:src/xeq.c     **** 		pc -= arg + 1;
 25583              		.loc 1 2411 5 view .LVU6709
 25584 000c 032B     		cmp	r3, #3
2407:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25585              		.loc 1 2407 46 view .LVU6710
 25586 000e 0446     		mov	r4, r0
 25587 0010 0D46     		mov	r5, r1
2411:src/xeq.c     **** 		pc -= arg + 1;
 25588              		.loc 1 2411 5 view .LVU6711
 25589 0012 1FD0     		beq	.L1842
2413:src/xeq.c     **** 		if ( Running ) {
 25590              		.loc 1 2413 14 is_stmt 1 view .LVU6712
2413:src/xeq.c     **** 		if ( Running ) {
 25591              		.loc 1 2413 17 is_stmt 0 view .LVU6713
 25592 0014 98B1     		cbz	r0, .L1834
2414:src/xeq.c     **** 			// Handles the case properly that we are on last step
 25593              		.loc 1 2414 3 is_stmt 1 view .LVU6714
2414:src/xeq.c     **** 			// Handles the case properly that we are on last step
 25594              		.loc 1 2414 8 is_stmt 0 view .LVU6715
 25595 0016 144B     		ldr	r3, .L1845+4
2414:src/xeq.c     **** 			// Handles the case properly that we are on last step
 25596              		.loc 1 2414 6 view .LVU6716
ARM GAS  /tmp/ccjeMhND.s 			page 656


 25597 0018 1B68     		ldr	r3, [r3]
 25598 001a F3B9     		cbnz	r3, .L1843
 25599 001c 3046     		mov	r0, r6
 25600              	.LVL1990:
 25601              	.L1829:
2414:src/xeq.c     **** 			// Handles the case properly that we are on last step
 25602              		.loc 1 2414 6 view .LVU6717
 25603 001e 134F     		ldr	r7, .L1845+8
 25604 0020 00E0     		b	.L1831
 25605              	.L1844:
2420:src/xeq.c     **** 		if (PcWrapped) {
 25606              		.loc 1 2420 18 discriminator 1 view .LVU6718
 25607 0022 33B9     		cbnz	r3, .L1832
 25608              	.L1831:
2418:src/xeq.c     **** 			pc = do_dec(pc, 1);
 25609              		.loc 1 2418 3 is_stmt 1 discriminator 2 view .LVU6719
2419:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 25610              		.loc 1 2419 4 discriminator 2 view .LVU6720
2419:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 25611              		.loc 1 2419 9 is_stmt 0 discriminator 2 view .LVU6721
 25612 0024 0121     		movs	r1, #1
 25613 0026 FFF7FEFF 		bl	do_dec
 25614              	.LVL1991:
2420:src/xeq.c     **** 		if (PcWrapped) {
 25615              		.loc 1 2420 11 is_stmt 1 discriminator 2 view .LVU6722
2420:src/xeq.c     **** 		if (PcWrapped) {
 25616              		.loc 1 2420 3 is_stmt 0 discriminator 2 view .LVU6723
 25617 002a 013C     		subs	r4, r4, #1
 25618              	.LVL1992:
2420:src/xeq.c     **** 		if (PcWrapped) {
 25619              		.loc 1 2420 18 discriminator 2 view .LVU6724
 25620 002c 3B68     		ldr	r3, [r7]
2420:src/xeq.c     **** 		if (PcWrapped) {
 25621              		.loc 1 2420 3 discriminator 2 view .LVU6725
 25622 002e F8D1     		bne	.L1844
2421:src/xeq.c     **** 			report_err(ERR_RANGE);
 25623              		.loc 1 2421 3 is_stmt 1 view .LVU6726
2421:src/xeq.c     **** 			report_err(ERR_RANGE);
 25624              		.loc 1 2421 6 is_stmt 0 view .LVU6727
 25625 0030 33B1     		cbz	r3, .L1828
 25626              	.L1832:
2422:src/xeq.c     **** 			return;
 25627              		.loc 1 2422 4 is_stmt 1 view .LVU6728
 25628              	.LVL1993:
 25629              	.LBB3419:
 25630              	.LBI3419:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25631              		.loc 1 537 5 view .LVU6729
 25632              	.LBB3420:
 538:src/xeq.c     **** 		Error = e;
 25633              		.loc 1 538 2 view .LVU6730
 538:src/xeq.c     **** 		Error = e;
 25634              		.loc 1 538 12 is_stmt 0 view .LVU6731
 25635 0032 0F4B     		ldr	r3, .L1845+12
 538:src/xeq.c     **** 		Error = e;
 25636              		.loc 1 538 5 view .LVU6732
 25637 0034 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccjeMhND.s 			page 657


 25638 0036 0AB9     		cbnz	r2, .L1826
 25639              	.LVL1994:
 25640              	.LBB3421:
 25641              	.LBI3421:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25642              		.loc 1 537 5 is_stmt 1 view .LVU6733
 25643              	.LBB3422:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25644              		.loc 1 539 3 view .LVU6734
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25645              		.loc 1 539 9 is_stmt 0 view .LVU6735
 25646 0038 0822     		movs	r2, #8
 25647 003a 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25648              		.loc 1 540 3 is_stmt 1 view .LVU6736
 25649              	.LVL1995:
 25650              	.L1826:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25651              		.loc 1 540 3 is_stmt 0 view .LVU6737
 25652              	.LBE3422:
 25653              	.LBE3421:
 25654              	.LBE3420:
 25655              	.LBE3419:
2427:src/xeq.c     **** 
 25656              		.loc 1 2427 1 view .LVU6738
 25657 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 25658              	.LVL1996:
 25659              	.L1834:
2427:src/xeq.c     **** 
 25660              		.loc 1 2427 1 view .LVU6739
 25661 003e 3046     		mov	r0, r6
 25662              	.LVL1997:
 25663              	.L1828:
2426:src/xeq.c     **** }
 25664              		.loc 1 2426 2 is_stmt 1 view .LVU6740
 25665 0040 A5F13901 		sub	r1, r5, #57
 25666 0044 B1FA81F1 		clz	r1, r1
 25667 0048 3246     		mov	r2, r6
 25668 004a 4909     		lsrs	r1, r1, #5
2427:src/xeq.c     **** 
 25669              		.loc 1 2427 1 is_stmt 0 view .LVU6741
 25670 004c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 25671              		.cfi_remember_state
 25672              		.cfi_restore 14
 25673              		.cfi_restore 7
 25674              		.cfi_restore 6
 25675              		.cfi_restore 5
 25676              		.cfi_restore 4
 25677              		.cfi_restore 3
 25678              		.cfi_def_cfa_offset 0
 25679              	.LVL1998:
2426:src/xeq.c     **** }
 25680              		.loc 1 2426 2 view .LVU6742
 25681 0050 FFF7FEBF 		b	gsbgto
 25682              	.LVL1999:
 25683              	.L1842:
 25684              		.cfi_restore_state
ARM GAS  /tmp/ccjeMhND.s 			page 658


2412:src/xeq.c     ****         else if (arg) {
 25685              		.loc 1 2412 3 is_stmt 1 view .LVU6743
2412:src/xeq.c     ****         else if (arg) {
 25686              		.loc 1 2412 6 is_stmt 0 view .LVU6744
 25687 0054 731E     		subs	r3, r6, #1
 25688 0056 181A     		subs	r0, r3, r0
 25689              	.LVL2000:
2412:src/xeq.c     ****         else if (arg) {
 25690              		.loc 1 2412 6 view .LVU6745
 25691 0058 F2E7     		b	.L1828
 25692              	.LVL2001:
 25693              	.L1843:
2416:src/xeq.c     **** 		}
 25694              		.loc 1 2416 4 is_stmt 1 view .LVU6746
2416:src/xeq.c     **** 		}
 25695              		.loc 1 2416 9 is_stmt 0 view .LVU6747
 25696 005a 0121     		movs	r1, #1
 25697              	.LVL2002:
2416:src/xeq.c     **** 		}
 25698              		.loc 1 2416 9 view .LVU6748
 25699 005c 3046     		mov	r0, r6
 25700              	.LVL2003:
2416:src/xeq.c     **** 		}
 25701              		.loc 1 2416 9 view .LVU6749
 25702 005e FFF7FEFF 		bl	do_dec
 25703              	.LVL2004:
2416:src/xeq.c     **** 		}
 25704              		.loc 1 2416 9 view .LVU6750
 25705 0062 DCE7     		b	.L1829
 25706              	.L1846:
 25707              		.align	2
 25708              	.L1845:
 25709 0064 00000000 		.word	main_ram
 25710 0068 00000000 		.word	Running
 25711 006c 00000000 		.word	PcWrapped
 25712 0070 00000000 		.word	Error
 25713              		.cfi_endproc
 25714              	.LFE179:
 25716              		.section	.text.usergsb_common,"ax",%progbits
 25717              		.align	1
 25718              		.p2align 2,,3
 25719              		.syntax unified
 25720              		.thumb
 25721              		.thumb_func
 25722              		.fpu fpv4-sp-d16
 25724              	usergsb_common:
 25725              	.LVL2005:
 25726              	.LFB153:
2088:src/xeq.c     **** 	const unsigned int pc = state_pc();
 25727              		.loc 1 2088 55 is_stmt 1 view -0
 25728              		.cfi_startproc
 25729              		@ args = 0, pretend = 0, frame = 0
 25730              		@ frame_needed = 0, uses_anonymous_args = 0
2089:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 25731              		.loc 1 2089 2 view .LVU6752
2088:src/xeq.c     **** 	const unsigned int pc = state_pc();
 25732              		.loc 1 2088 55 is_stmt 0 view .LVU6753
ARM GAS  /tmp/ccjeMhND.s 			page 659


 25733 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25734              		.cfi_def_cfa_offset 24
 25735              		.cfi_offset 4, -24
 25736              		.cfi_offset 5, -20
 25737              		.cfi_offset 6, -16
 25738              		.cfi_offset 7, -12
 25739              		.cfi_offset 8, -8
 25740              		.cfi_offset 14, -4
2089:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 25741              		.loc 1 2089 26 view .LVU6754
 25742 0004 1C4D     		ldr	r5, .L1851
2090:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 25743              		.loc 1 2090 2 view .LVU6755
 25744 0006 1D4F     		ldr	r7, .L1851+4
2089:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 25745              		.loc 1 2089 26 view .LVU6756
 25746 0008 2B68     		ldr	r3, [r5]
2090:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 25747              		.loc 1 2090 2 view .LVU6757
 25748 000a 3A68     		ldr	r2, [r7]
2089:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 25749              		.loc 1 2089 21 view .LVU6758
 25750 000c B3F8E047 		ldrh	r4, [r3, #2016]
 25751              	.LVL2006:
2090:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 25752              		.loc 1 2090 2 is_stmt 1 view .LVU6759
2092:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 25753              		.loc 1 2092 2 is_stmt 0 view .LVU6760
 25754 0010 DFF87480 		ldr	r8, .L1851+16
2088:src/xeq.c     **** 	const unsigned int pc = state_pc();
 25755              		.loc 1 2088 55 view .LVU6761
 25756 0014 0646     		mov	r6, r0
2090:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 25757              		.loc 1 2090 2 view .LVU6762
 25758 0016 0121     		movs	r1, #1
 25759 0018 2046     		mov	r0, r4
 25760              	.LVL2007:
2090:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 25761              		.loc 1 2090 2 view .LVU6763
 25762 001a FFF7FEFF 		bl	gsbgto
 25763              	.LVL2008:
2091:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 25764              		.loc 1 2091 2 is_stmt 1 view .LVU6764
2091:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 25765              		.loc 1 2091 16 is_stmt 0 view .LVU6765
 25766 001e 2B68     		ldr	r3, [r5]
2091:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 25767              		.loc 1 2091 2 view .LVU6766
 25768 0020 2046     		mov	r0, r4
 25769 0022 B3F9DE27 		ldrsh	r2, [r3, #2014]
 25770 0026 0121     		movs	r1, #1
 25771 0028 FFF7FEFF 		bl	gsbgto
 25772              	.LVL2009:
2092:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 25773              		.loc 1 2092 2 is_stmt 1 view .LVU6767
 25774 002c 2046     		mov	r0, r4
 25775 002e D8F80020 		ldr	r2, [r8]
ARM GAS  /tmp/ccjeMhND.s 			page 660


 25776 0032 0121     		movs	r1, #1
 25777 0034 FFF7FEFF 		bl	gsbgto
 25778              	.LVL2010:
2093:src/xeq.c     **** 
 25779              		.loc 1 2093 2 view .LVU6768
 25780 0038 2246     		mov	r2, r4
 25781 003a 3046     		mov	r0, r6
 25782 003c 0121     		movs	r1, #1
 25783 003e FFF7FEFF 		bl	gsbgto
 25784              	.LVL2011:
2095:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 25785              		.loc 1 2095 2 view .LVU6769
2096:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 25786              		.loc 1 2096 9 is_stmt 0 view .LVU6770
 25787 0042 2A68     		ldr	r2, [r5]
2096:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 25788              		.loc 1 2096 20 view .LVU6771
 25789 0044 0E4B     		ldr	r3, .L1851+8
 25790 0046 B2F9DE07 		ldrsh	r0, [r2, #2014]
 25791 004a 1968     		ldr	r1, [r3]
2098:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 25792              		.loc 1 2098 6 view .LVU6772
 25793 004c 0D4C     		ldr	r4, .L1851+12
 25794              	.LVL2012:
2096:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 25795              		.loc 1 2096 20 view .LVU6773
 25796 004e 31F81030 		ldrh	r3, [r1, r0, lsl #1]
2098:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 25797              		.loc 1 2098 5 view .LVU6774
 25798 0052 2468     		ldr	r4, [r4]
2097:src/xeq.c     **** 	if (! Running)
 25799              		.loc 1 2097 12 view .LVU6775
 25800 0054 D8F80050 		ldr	r5, [r8]
2095:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 25801              		.loc 1 2095 13 view .LVU6776
 25802 0058 0026     		movs	r6, #0
2096:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 25803              		.loc 1 2096 20 view .LVU6777
 25804 005a 43F40053 		orr	r3, r3, #8192
2095:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 25805              		.loc 1 2095 13 view .LVU6778
 25806 005e 3E60     		str	r6, [r7]
2096:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 25807              		.loc 1 2096 2 is_stmt 1 view .LVU6779
2096:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 25808              		.loc 1 2096 20 is_stmt 0 view .LVU6780
 25809 0060 21F81030 		strh	r3, [r1, r0, lsl #1]	@ movhi
2097:src/xeq.c     **** 	if (! Running)
 25810              		.loc 1 2097 2 is_stmt 1 view .LVU6781
2097:src/xeq.c     **** 	if (! Running)
 25811              		.loc 1 2097 12 is_stmt 0 view .LVU6782
 25812 0064 A2F8DE57 		strh	r5, [r2, #2014]	@ movhi
2098:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 25813              		.loc 1 2098 2 is_stmt 1 view .LVU6783
2098:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 25814              		.loc 1 2098 5 is_stmt 0 view .LVU6784
 25815 0068 0CB1     		cbz	r4, .L1850
ARM GAS  /tmp/ccjeMhND.s 			page 661


2101:src/xeq.c     **** 
 25816              		.loc 1 2101 1 view .LVU6785
 25817 006a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25818              	.L1850:
2099:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 25819              		.loc 1 2099 3 is_stmt 1 view .LVU6786
2101:src/xeq.c     **** 
 25820              		.loc 1 2101 1 is_stmt 0 view .LVU6787
 25821 006e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 25822              		.cfi_restore 14
 25823              		.cfi_restore 8
 25824              		.cfi_restore 7
 25825              		.cfi_restore 6
 25826              		.cfi_restore 5
 25827              		.cfi_restore 4
 25828              		.cfi_def_cfa_offset 0
2099:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 25829              		.loc 1 2099 3 view .LVU6788
 25830 0072 FFF7FEBF 		b	set_running_on
 25831              	.LVL2013:
 25832              	.L1852:
 25833 0076 00BF     		.align	2
 25834              	.L1851:
 25835 0078 00000000 		.word	main_ram
 25836 007c 00000000 		.word	XromUserPc
 25837 0080 00000000 		.word	RetStk
 25838 0084 00000000 		.word	Running
 25839 0088 00000000 		.word	UserLocalRegs
 25840              		.cfi_endproc
 25841              	.LFE153:
 25843              		.section	.text.do_usergsb,"ax",%progbits
 25844              		.align	1
 25845              		.p2align 2,,3
 25846              		.global	do_usergsb
 25847              		.syntax unified
 25848              		.thumb
 25849              		.thumb_func
 25850              		.fpu fpv4-sp-d16
 25852              	do_usergsb:
 25853              	.LVL2014:
 25854              	.LFB154:
2107:src/xeq.c     **** 	usergsb_common(XromUserPc);
 25855              		.loc 1 2107 32 is_stmt 1 view -0
 25856              		.cfi_startproc
 25857              		@ args = 0, pretend = 0, frame = 0
 25858              		@ frame_needed = 0, uses_anonymous_args = 0
2108:src/xeq.c     ****         fill(OP_FILL);
 25859              		.loc 1 2108 2 view .LVU6790
2107:src/xeq.c     **** 	usergsb_common(XromUserPc);
 25860              		.loc 1 2107 32 is_stmt 0 view .LVU6791
 25861 0000 08B5     		push	{r3, lr}
 25862              		.cfi_def_cfa_offset 8
 25863              		.cfi_offset 3, -8
 25864              		.cfi_offset 14, -4
2108:src/xeq.c     ****         fill(OP_FILL);
 25865              		.loc 1 2108 2 view .LVU6792
 25866 0002 044B     		ldr	r3, .L1855
ARM GAS  /tmp/ccjeMhND.s 			page 662


 25867 0004 1888     		ldrh	r0, [r3]
 25868              	.LVL2015:
2108:src/xeq.c     ****         fill(OP_FILL);
 25869              		.loc 1 2108 2 view .LVU6793
 25870 0006 FFF7FEFF 		bl	usergsb_common
 25871              	.LVL2016:
2109:src/xeq.c     **** }
 25872              		.loc 1 2109 9 is_stmt 1 view .LVU6794
2110:src/xeq.c     **** 
 25873              		.loc 1 2110 1 is_stmt 0 view .LVU6795
 25874 000a BDE80840 		pop	{r3, lr}
 25875              		.cfi_restore 14
 25876              		.cfi_restore 3
 25877              		.cfi_def_cfa_offset 0
2109:src/xeq.c     **** }
 25878              		.loc 1 2109 9 view .LVU6796
 25879 000e 0C20     		movs	r0, #12
 25880 0010 FFF7FEBF 		b	fill
 25881              	.LVL2017:
 25882              	.L1856:
 25883              		.align	2
 25884              	.L1855:
 25885 0014 00000000 		.word	XromUserPc
 25886              		.cfi_endproc
 25887              	.LFE154:
 25889              		.section	.text.cmdmultigto,"ax",%progbits
 25890              		.align	1
 25891              		.p2align 2,,3
 25892              		.global	cmdmultigto
 25893              		.syntax unified
 25894              		.thumb
 25895              		.thumb_func
 25896              		.fpu fpv4-sp-d16
 25898              	cmdmultigto:
 25899              	.LVL2018:
 25900              	.LFB161:
2166:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 25901              		.loc 1 2166 54 is_stmt 1 view -0
 25902              		.cfi_startproc
 25903              		@ args = 0, pretend = 0, frame = 0
 25904              		@ frame_needed = 0, uses_anonymous_args = 0
2167:src/xeq.c     **** 		// In XROM the command behaves differently!
 25905              		.loc 1 2167 2 view .LVU6798
2167:src/xeq.c     **** 		// In XROM the command behaves differently!
 25906              		.loc 1 2167 5 is_stmt 0 view .LVU6799
 25907 0000 0229     		cmp	r1, #2
2166:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 25908              		.loc 1 2166 54 view .LVU6800
 25909 0002 10B5     		push	{r4, lr}
 25910              		.cfi_def_cfa_offset 8
 25911              		.cfi_offset 4, -8
 25912              		.cfi_offset 14, -4
2166:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 25913              		.loc 1 2166 54 view .LVU6801
 25914 0004 0346     		mov	r3, r0
 25915 0006 0C46     		mov	r4, r1
2167:src/xeq.c     **** 		// In XROM the command behaves differently!
ARM GAS  /tmp/ccjeMhND.s 			page 663


 25916              		.loc 1 2167 5 view .LVU6802
 25917 0008 06D1     		bne	.L1858
 25918              	.LBB3423:
 25919              	.LBI3423:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 25920              		.loc 1 182 5 is_stmt 1 view .LVU6803
 25921              	.LBB3424:
 183:src/xeq.c     **** }
 25922              		.loc 1 183 2 view .LVU6804
 183:src/xeq.c     **** }
 25923              		.loc 1 183 9 is_stmt 0 view .LVU6805
 25924 000a 104A     		ldr	r2, .L1862
 25925 000c 1268     		ldr	r2, [r2]
 25926 000e B2F8E027 		ldrh	r2, [r2, #2016]
 25927              	.LBE3424:
 25928              	.LBE3423:
2167:src/xeq.c     **** 		// In XROM the command behaves differently!
 25929              		.loc 1 2167 22 view .LVU6806
 25930 0012 920B     		lsrs	r2, r2, #14
 25931 0014 032A     		cmp	r2, #3
 25932 0016 0BD0     		beq	.L1861
 25933              	.L1858:
2176:src/xeq.c     **** 	}
 25934              		.loc 1 2176 3 is_stmt 1 view .LVU6807
 25935 0018 0121     		movs	r1, #1
 25936              	.LVL2019:
2176:src/xeq.c     **** 	}
 25937              		.loc 1 2176 3 is_stmt 0 view .LVU6808
 25938 001a 1846     		mov	r0, r3
 25939              	.LVL2020:
2176:src/xeq.c     **** 	}
 25940              		.loc 1 2176 3 view .LVU6809
 25941 001c FFF7FEFF 		bl	findmultilbl
 25942              	.LVL2021:
2176:src/xeq.c     **** 	}
 25943              		.loc 1 2176 3 view .LVU6810
 25944 0020 0146     		mov	r1, r0
 25945 0022 E01E     		subs	r0, r4, #3
 25946 0024 18BF     		it	ne
 25947 0026 0120     		movne	r0, #1
2178:src/xeq.c     **** 
 25948              		.loc 1 2178 1 view .LVU6811
 25949 0028 BDE81040 		pop	{r4, lr}
 25950              		.cfi_remember_state
 25951              		.cfi_restore 14
 25952              		.cfi_restore 4
 25953              		.cfi_def_cfa_offset 0
2176:src/xeq.c     **** 	}
 25954              		.loc 1 2176 3 view .LVU6812
 25955 002c FFF7FEBF 		b	cmdgtocommon
 25956              	.LVL2022:
 25957              	.L1861:
 25958              		.cfi_restore_state
 25959              	.LBB3425:
2169:src/xeq.c     **** 		if (target != 0)
 25960              		.loc 1 2169 3 is_stmt 1 view .LVU6813
2169:src/xeq.c     **** 		if (target != 0)
ARM GAS  /tmp/ccjeMhND.s 			page 664


 25961              		.loc 1 2169 31 is_stmt 0 view .LVU6814
 25962 0030 0021     		movs	r1, #0
 25963              	.LVL2023:
2169:src/xeq.c     **** 		if (target != 0)
 25964              		.loc 1 2169 31 view .LVU6815
 25965 0032 FFF7FEFF 		bl	findmultilbl
 25966              	.LVL2024:
2169:src/xeq.c     **** 		if (target != 0)
 25967              		.loc 1 2169 22 view .LVU6816
 25968 0036 80B2     		uxth	r0, r0
 25969              	.LVL2025:
2170:src/xeq.c     **** 			usergsb_common(target); 
 25970              		.loc 1 2170 3 is_stmt 1 view .LVU6817
2170:src/xeq.c     **** 			usergsb_common(target); 
 25971              		.loc 1 2170 6 is_stmt 0 view .LVU6818
 25972 0038 18B1     		cbz	r0, .L1859
2171:src/xeq.c     **** 		else
 25973              		.loc 1 2171 4 is_stmt 1 view .LVU6819
 25974              	.LBE3425:
2178:src/xeq.c     **** 
 25975              		.loc 1 2178 1 is_stmt 0 view .LVU6820
 25976 003a BDE81040 		pop	{r4, lr}
 25977              		.cfi_remember_state
 25978              		.cfi_restore 14
 25979              		.cfi_restore 4
 25980              		.cfi_def_cfa_offset 0
 25981              	.LBB3426:
2171:src/xeq.c     **** 		else
 25982              		.loc 1 2171 4 view .LVU6821
 25983 003e FFF7FEBF 		b	usergsb_common
 25984              	.LVL2026:
 25985              	.L1859:
 25986              		.cfi_restore_state
2173:src/xeq.c     **** 	}
 25987              		.loc 1 2173 4 is_stmt 1 view .LVU6822
 25988              	.LBE3426:
2178:src/xeq.c     **** 
 25989              		.loc 1 2178 1 is_stmt 0 view .LVU6823
 25990 0042 BDE81040 		pop	{r4, lr}
 25991              		.cfi_restore 14
 25992              		.cfi_restore 4
 25993              		.cfi_def_cfa_offset 0
 25994              	.LBB3427:
2173:src/xeq.c     **** 	}
 25995              		.loc 1 2173 4 view .LVU6824
 25996 0046 FFF7FEBF 		b	incpc
 25997              	.LVL2027:
 25998              	.L1863:
2173:src/xeq.c     **** 	}
 25999              		.loc 1 2173 4 view .LVU6825
 26000 004a 00BF     		.align	2
 26001              	.L1862:
 26002 004c 00000000 		.word	main_ram
 26003              	.LBE3427:
 26004              		.cfi_endproc
 26005              	.LFE161:
 26007              		.section	.text.store_a_to_d,"ax",%progbits
ARM GAS  /tmp/ccjeMhND.s 			page 665


 26008              		.align	1
 26009              		.p2align 2,,3
 26010              		.global	store_a_to_d
 26011              		.syntax unified
 26012              		.thumb
 26013              		.thumb_func
 26014              		.fpu fpv4-sp-d16
 26016              	store_a_to_d:
 26017              	.LVL2028:
 26018              	.LFB259:
5596:src/xeq.c     **** 
5597:src/xeq.c     **** /* Command to stash registers A through D into volatile RAM and to restore them
5598:src/xeq.c     ****  * again.
5599:src/xeq.c     ****  */
5600:src/xeq.c     **** void store_a_to_d(enum nilop op) {
 26019              		.loc 1 5600 34 is_stmt 1 view -0
 26020              		.cfi_startproc
 26021              		@ args = 0, pretend = 0, frame = 0
 26022              		@ frame_needed = 0, uses_anonymous_args = 0
5601:src/xeq.c     **** 	const void *src = XromA2D;
 26023              		.loc 1 5601 2 view .LVU6827
5602:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 26024              		.loc 1 5602 2 view .LVU6828
5600:src/xeq.c     **** 	const void *src = XromA2D;
 26025              		.loc 1 5600 34 is_stmt 0 view .LVU6829
 26026 0000 10B5     		push	{r4, lr}
 26027              		.cfi_def_cfa_offset 8
 26028              		.cfi_offset 4, -8
 26029              		.cfi_offset 14, -4
5600:src/xeq.c     **** 	const void *src = XromA2D;
 26030              		.loc 1 5600 34 view .LVU6830
 26031 0002 0446     		mov	r4, r0
 26032              		.loc 1 5602 15 view .LVU6831
 26033 0004 6820     		movs	r0, #104
 26034              	.LVL2029:
 26035              		.loc 1 5602 15 view .LVU6832
 26036 0006 FFF7FEFF 		bl	get_reg_n
 26037              	.LVL2030:
5603:src/xeq.c     **** 
5604:src/xeq.c     **** 	if (op == OP_SAVEA2D) {
 26038              		.loc 1 5604 2 is_stmt 1 view .LVU6833
 26039              		.loc 1 5604 5 is_stmt 0 view .LVU6834
 26040 000a 802C     		cmp	r4, #128
5605:src/xeq.c     **** 		src = dest;
 26041              		.loc 1 5605 7 view .LVU6835
 26042 000c 08BF     		it	eq
 26043 000e 0146     		moveq	r1, r0
5606:src/xeq.c     **** 		dest = XromA2D;
5607:src/xeq.c     **** 	}
5608:src/xeq.c     **** 	xcopy(dest, src, sizeof(REGISTER) * 4);
5609:src/xeq.c     **** }
 26044              		.loc 1 5609 1 view .LVU6836
 26045 0010 BDE81040 		pop	{r4, lr}
 26046              		.cfi_restore 14
 26047              		.cfi_restore 4
 26048              		.cfi_def_cfa_offset 0
5606:src/xeq.c     **** 		dest = XromA2D;
ARM GAS  /tmp/ccjeMhND.s 			page 666


 26049              		.loc 1 5606 8 view .LVU6837
 26050 0014 0CBF     		ite	eq
 26051 0016 0248     		ldreq	r0, .L1868
 26052              	.LVL2031:
5601:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 26053              		.loc 1 5601 14 view .LVU6838
 26054 0018 0149     		ldrne	r1, .L1868
 26055              	.LVL2032:
5608:src/xeq.c     **** }
 26056              		.loc 1 5608 2 is_stmt 1 view .LVU6839
 26057 001a 4022     		movs	r2, #64
 26058 001c FFF7FEBF 		b	xcopy
 26059              	.LVL2033:
 26060              	.L1869:
5608:src/xeq.c     **** }
 26061              		.loc 1 5608 2 is_stmt 0 view .LVU6840
 26062              		.align	2
 26063              	.L1868:
 26064 0020 00000000 		.word	XromA2D
 26065              		.cfi_endproc
 26066              	.LFE259:
 26068              		.section	.text.cmdlocr,"ax",%progbits
 26069              		.align	1
 26070              		.p2align 2,,3
 26071              		.global	cmdlocr
 26072              		.syntax unified
 26073              		.thumb
 26074              		.thumb_func
 26075              		.fpu fpv4-sp-d16
 26077              	cmdlocr:
 26078              	.LVL2034:
 26079              	.LFB260:
5610:src/xeq.c     **** 
5611:src/xeq.c     **** /*
5612:src/xeq.c     ****  *  Command to support local variables.
5613:src/xeq.c     ****  *  A stack frame is constructed:
5614:src/xeq.c     ****  *	marker including size of frame,
5615:src/xeq.c     ****  *	register + flag area.
5616:src/xeq.c     ****  *  Registers must reside on even stack positions
5617:src/xeq.c     ****  *  so the flag word is either at the top or at the bottom of the frame.
5618:src/xeq.c     ****  */
5619:src/xeq.c     **** void cmdlocr(unsigned int arg, enum rarg op) {
 26080              		.loc 1 5619 46 is_stmt 1 view -0
 26081              		.cfi_startproc
 26082              		@ args = 0, pretend = 0, frame = 0
 26083              		@ frame_needed = 0, uses_anonymous_args = 0
5620:src/xeq.c     **** 	short int sp = RetStkPtr;
 26084              		.loc 1 5620 2 view .LVU6842
5619:src/xeq.c     **** 	short int sp = RetStkPtr;
 26085              		.loc 1 5619 46 is_stmt 0 view .LVU6843
 26086 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 26087              		.cfi_def_cfa_offset 40
 26088              		.cfi_offset 3, -40
 26089              		.cfi_offset 4, -36
 26090              		.cfi_offset 5, -32
 26091              		.cfi_offset 6, -28
 26092              		.cfi_offset 7, -24
ARM GAS  /tmp/ccjeMhND.s 			page 667


 26093              		.cfi_offset 8, -20
 26094              		.cfi_offset 9, -16
 26095              		.cfi_offset 10, -12
 26096              		.cfi_offset 11, -8
 26097              		.cfi_offset 14, -4
 26098              		.loc 1 5620 17 view .LVU6844
 26099 0004 554F     		ldr	r7, .L1890
 26100 0006 3C68     		ldr	r4, [r7]
 26101              	.LBB3437:
 26102              	.LBB3438:
 933:src/xeq.c     **** }
 26103              		.loc 1 933 24 view .LVU6845
 26104 0008 B4F8E827 		ldrh	r2, [r4, #2024]
 26105              	.LBE3438:
 26106              	.LBE3437:
 26107              		.loc 1 5620 12 view .LVU6846
 26108 000c B4F9E267 		ldrsh	r6, [r4, #2018]
 26109              	.LVL2035:
5621:src/xeq.c     **** 	int size = (arg << (is_dblmode() ? 3 : 2)) + 2;
 26110              		.loc 1 5621 2 is_stmt 1 view .LVU6847
 26111              	.LBB3440:
 26112              	.LBI3437:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 26113              		.loc 1 932 5 view .LVU6848
 26114              	.LBB3439:
 933:src/xeq.c     **** }
 26115              		.loc 1 933 2 view .LVU6849
 933:src/xeq.c     **** }
 26116              		.loc 1 933 24 is_stmt 0 view .LVU6850
 26117 0010 44F20103 		movw	r3, #16385
 26118              	.LBE3439:
 26119              	.LBE3440:
 26120              		.loc 1 5621 39 view .LVU6851
 26121 0014 1340     		ands	r3, r3, r2
 26122 0016 B3F5804F 		cmp	r3, #16384
 26123 001a 0CBF     		ite	eq
 26124 001c 0325     		moveq	r5, #3
 26125 001e 0225     		movne	r5, #2
 26126              		.loc 1 5621 18 view .LVU6852
 26127 0020 A840     		lsls	r0, r0, r5
 26128              	.LVL2036:
 26129              		.loc 1 5621 45 view .LVU6853
 26130 0022 851C     		adds	r5, r0, #2
 26131              	.LVL2037:
5622:src/xeq.c     **** 	const unsigned short marker = LOCAL_MARKER | size;
 26132              		.loc 1 5622 2 is_stmt 1 view .LVU6854
 26133              		.loc 1 5622 45 is_stmt 0 view .LVU6855
 26134 0024 1FFA85F8 		uxth	r8, r5
 26135              	.LVL2038:
5623:src/xeq.c     **** 	int old_size = 0;
 26136              		.loc 1 5623 2 is_stmt 1 view .LVU6856
5624:src/xeq.c     **** 	short unsigned int old_flags = 0;
 26137              		.loc 1 5624 2 view .LVU6857
5625:src/xeq.c     **** 
5626:src/xeq.c     **** 	if (sp != 0 && sp == LocalRegs) {
 26138              		.loc 1 5626 2 view .LVU6858
 26139              		.loc 1 5626 5 is_stmt 0 view .LVU6859
ARM GAS  /tmp/ccjeMhND.s 			page 668


 26140 0028 7EB9     		cbnz	r6, .L1872
 26141              	.LVL2039:
5627:src/xeq.c     **** 		// resize required
5628:src/xeq.c     **** 		old_size = local_levels();
5629:src/xeq.c     **** 		sp += old_size;
5630:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
5631:src/xeq.c     **** 	}
5632:src/xeq.c     **** 	// compute space needed
5633:src/xeq.c     **** 	sp -= size;
 26142              		.loc 1 5633 2 is_stmt 1 view .LVU6860
5634:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26143              		.loc 1 5634 10 is_stmt 0 view .LVU6861
 26144 002a 4D4B     		ldr	r3, .L1890+4
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26145              		.loc 1 5633 5 view .LVU6862
 26146 002c C8F10004 		rsb	r4, r8, #0
 26147              		.loc 1 5634 5 view .LVU6863
 26148 0030 1B68     		ldr	r3, [r3]
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26149              		.loc 1 5633 5 view .LVU6864
 26150 0032 24B2     		sxth	r4, r4
 26151              	.LVL2040:
 26152              		.loc 1 5634 2 is_stmt 1 view .LVU6865
 26153              		.loc 1 5634 6 is_stmt 0 view .LVU6866
 26154 0034 6242     		rsbs	r2, r4, #0
 26155              		.loc 1 5634 5 view .LVU6867
 26156 0036 9A42     		cmp	r2, r3
 26157 0038 42DC     		bgt	.L1878
 26158 003a 4FEA4409 		lsl	r9, r4, #1
 26159 003e DFF828B1 		ldr	fp, .L1890+12
 26160 0042 4FEA450A 		lsl	r10, r5, #1
 26161 0046 4B46     		mov	r3, r9
 26162 0048 13E0     		b	.L1876
 26163              	.LVL2041:
 26164              	.L1872:
5626:src/xeq.c     **** 		// resize required
 26165              		.loc 1 5626 23 discriminator 1 view .LVU6868
 26166 004a B4F9DE47 		ldrsh	r4, [r4, #2014]
5626:src/xeq.c     **** 		// resize required
 26167              		.loc 1 5626 14 discriminator 1 view .LVU6869
 26168 004e B442     		cmp	r4, r6
 26169 0050 28D0     		beq	.L1877
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26170              		.loc 1 5633 2 is_stmt 1 view .LVU6870
 26171              		.loc 1 5634 10 is_stmt 0 view .LVU6871
 26172 0052 434B     		ldr	r3, .L1890+4
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26173              		.loc 1 5633 5 view .LVU6872
 26174 0054 A6EB0804 		sub	r4, r6, r8
 26175              		.loc 1 5634 5 view .LVU6873
 26176 0058 1B68     		ldr	r3, [r3]
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26177              		.loc 1 5633 5 view .LVU6874
 26178 005a 24B2     		sxth	r4, r4
 26179              	.LVL2042:
 26180              		.loc 1 5634 2 is_stmt 1 view .LVU6875
 26181              		.loc 1 5634 6 is_stmt 0 view .LVU6876
ARM GAS  /tmp/ccjeMhND.s 			page 669


 26182 005c 6242     		rsbs	r2, r4, #0
 26183              		.loc 1 5634 5 view .LVU6877
 26184 005e 9A42     		cmp	r2, r3
 26185 0060 2EDC     		bgt	.L1878
 26186 0062 4FEA4409 		lsl	r9, r4, #1
 26187 0066 DFF800B1 		ldr	fp, .L1890+12
 26188 006a 4FEA450A 		lsl	r10, r5, #1
 26189 006e 4B46     		mov	r3, r9
5624:src/xeq.c     **** 
 26190              		.loc 1 5624 21 view .LVU6878
 26191 0070 0026     		movs	r6, #0
 26192              	.LVL2043:
 26193              	.L1876:
5635:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
5636:src/xeq.c     **** 		return;
5637:src/xeq.c     **** 	}
5638:src/xeq.c     **** 	if ( old_size > 0 ) {
5639:src/xeq.c     **** 		// move previous contents to new destination
5640:src/xeq.c     **** 		int n;
5641:src/xeq.c     **** 		if (size > old_size) {
5642:src/xeq.c     **** 			n = old_size;
5643:src/xeq.c     **** 			size -= old_size;
5644:src/xeq.c     **** 		}
5645:src/xeq.c     **** 		else {
5646:src/xeq.c     **** 			n = size;
5647:src/xeq.c     **** 			size = 0;
5648:src/xeq.c     **** 		}
5649:src/xeq.c     **** 		xcopy(RetStk + sp, RetStk + LocalRegs, n + n);
5650:src/xeq.c     **** 	}
5651:src/xeq.c     **** 	// fill the rest with 0
5652:src/xeq.c     **** 	xset(RetStk + sp + old_size, 0, size + size);
 26194              		.loc 1 5652 2 is_stmt 1 view .LVU6879
 26195              		.loc 1 5652 19 is_stmt 0 view .LVU6880
 26196 0072 DBF80000 		ldr	r0, [fp]
 26197              		.loc 1 5652 2 view .LVU6881
 26198 0076 5246     		mov	r2, r10
 26199 0078 1844     		add	r0, r0, r3
 26200 007a 0021     		movs	r1, #0
 26201 007c FFF7FEFF 		bl	xset
 26202              	.LVL2044:
5653:src/xeq.c     **** 
5654:src/xeq.c     **** 	// set marker, pointers and flags
5655:src/xeq.c     **** 	RetStk[sp] = marker;
 26203              		.loc 1 5655 2 is_stmt 1 view .LVU6882
5656:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 26204              		.loc 1 5656 14 is_stmt 0 view .LVU6883
 26205 0080 3B68     		ldr	r3, [r7]
5655:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 26206              		.loc 1 5655 13 view .LVU6884
 26207 0082 DBF80020 		ldr	r2, [fp]
5622:src/xeq.c     **** 	int old_size = 0;
 26208              		.loc 1 5622 23 view .LVU6885
 26209 0086 48F48058 		orr	r8, r8, #4096
 26210              	.LVL2045:
5655:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 26211              		.loc 1 5655 13 view .LVU6886
 26212 008a 22F80980 		strh	r8, [r2, r9]	@ movhi
ARM GAS  /tmp/ccjeMhND.s 			page 670


 26213              		.loc 1 5656 2 is_stmt 1 view .LVU6887
5657:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 26214              		.loc 1 5657 3 is_stmt 0 view .LVU6888
 26215 008e 0021     		movs	r1, #0
5656:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 26216              		.loc 1 5656 24 view .LVU6889
 26217 0090 A3F8DE47 		strh	r4, [r3, #2014]	@ movhi
5656:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 26218              		.loc 1 5656 12 view .LVU6890
 26219 0094 A3F8E247 		strh	r4, [r3, #2018]	@ movhi
 26220              		.loc 1 5657 2 is_stmt 1 view .LVU6891
 26221              		.loc 1 5657 3 is_stmt 0 view .LVU6892
 26222 0098 7020     		movs	r0, #112
 26223 009a FFF7FEFF 		bl	flag_word
 26224              	.LVL2046:
 26225              		.loc 1 5657 36 view .LVU6893
 26226 009e 0680     		strh	r6, [r0]	@ movhi
 26227              	.L1870:
5658:src/xeq.c     **** }
 26228              		.loc 1 5658 1 view .LVU6894
 26229 00a0 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 26230              	.LVL2047:
 26231              	.L1877:
5628:src/xeq.c     **** 		sp += old_size;
 26232              		.loc 1 5628 3 is_stmt 1 view .LVU6895
 26233              	.LBB3441:
 26234              	.LBI3441:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 26235              		.loc 1 214 5 view .LVU6896
 26236              	.LBB3442:
 215:src/xeq.c     **** }
 26237              		.loc 1 215 2 view .LVU6897
 215:src/xeq.c     **** }
 26238              		.loc 1 215 57 is_stmt 0 view .LVU6898
 26239 00a4 002C     		cmp	r4, #0
 26240 00a6 13DB     		blt	.L1887
 215:src/xeq.c     **** }
 26241              		.loc 1 215 57 view .LVU6899
 26242              	.LBE3442:
 26243              	.LBE3441:
5629:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 26244              		.loc 1 5629 3 is_stmt 1 view .LVU6900
 26245              	.LVL2048:
5630:src/xeq.c     **** 	}
 26246              		.loc 1 5630 3 view .LVU6901
5630:src/xeq.c     **** 	}
 26247              		.loc 1 5630 16 is_stmt 0 view .LVU6902
 26248 00a8 0021     		movs	r1, #0
 26249              	.LVL2049:
5630:src/xeq.c     **** 	}
 26250              		.loc 1 5630 16 view .LVU6903
 26251 00aa 7020     		movs	r0, #112
 26252 00ac FFF7FEFF 		bl	flag_word
 26253              	.LVL2050:
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26254              		.loc 1 5634 10 view .LVU6904
 26255 00b0 2B4B     		ldr	r3, .L1890+4
ARM GAS  /tmp/ccjeMhND.s 			page 671


5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26256              		.loc 1 5633 5 view .LVU6905
 26257 00b2 A4EB0804 		sub	r4, r4, r8
 26258              	.LVL2051:
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26259              		.loc 1 5634 5 view .LVU6906
 26260 00b6 1B68     		ldr	r3, [r3]
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26261              		.loc 1 5633 5 view .LVU6907
 26262 00b8 24B2     		sxth	r4, r4
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26263              		.loc 1 5634 6 view .LVU6908
 26264 00ba 6242     		rsbs	r2, r4, #0
 26265              	.LVL2052:
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26266              		.loc 1 5633 2 is_stmt 1 view .LVU6909
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26267              		.loc 1 5634 2 view .LVU6910
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26268              		.loc 1 5634 5 is_stmt 0 view .LVU6911
 26269 00bc 9A42     		cmp	r2, r3
 26270 00be 3EDD     		ble	.L1888
 26271              	.LVL2053:
 26272              	.L1878:
5635:src/xeq.c     **** 		return;
 26273              		.loc 1 5635 3 is_stmt 1 view .LVU6912
 26274              	.LBB3444:
 26275              	.LBI3444:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26276              		.loc 1 537 5 view .LVU6913
 26277              	.LBB3445:
 538:src/xeq.c     **** 		Error = e;
 26278              		.loc 1 538 2 view .LVU6914
 538:src/xeq.c     **** 		Error = e;
 26279              		.loc 1 538 12 is_stmt 0 view .LVU6915
 26280 00c0 284B     		ldr	r3, .L1890+8
 538:src/xeq.c     **** 		Error = e;
 26281              		.loc 1 538 5 view .LVU6916
 26282 00c2 1A68     		ldr	r2, [r3]
 26283 00c4 002A     		cmp	r2, #0
 26284 00c6 EBD1     		bne	.L1870
 26285              	.LVL2054:
 26286              	.LBB3446:
 26287              	.LBI3446:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26288              		.loc 1 537 5 is_stmt 1 view .LVU6917
 26289              	.LBB3447:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 26290              		.loc 1 539 3 view .LVU6918
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 26291              		.loc 1 539 9 is_stmt 0 view .LVU6919
 26292 00c8 0B22     		movs	r2, #11
 26293 00ca 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 26294              		.loc 1 540 3 is_stmt 1 view .LVU6920
 26295              	.LBE3447:
 26296              	.LBE3446:
ARM GAS  /tmp/ccjeMhND.s 			page 672


 26297              	.LBE3445:
 26298              	.LBE3444:
 26299              		.loc 1 5658 1 is_stmt 0 view .LVU6921
 26300 00cc BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 26301              	.LVL2055:
 26302              	.L1887:
 26303              	.LBB3448:
 26304              	.LBB3443:
 215:src/xeq.c     **** }
 26305              		.loc 1 215 25 view .LVU6922
 26306 00d0 DFF894B0 		ldr	fp, .L1890+12
 26307 00d4 DBF80030 		ldr	r3, [fp]
 26308 00d8 33F81490 		ldrh	r9, [r3, r4, lsl #1]
 26309 00dc C9F30B09 		ubfx	r9, r9, #0, #12
 26310              	.LVL2056:
 215:src/xeq.c     **** }
 26311              		.loc 1 215 25 view .LVU6923
 26312              	.LBE3443:
 26313              	.LBE3448:
5629:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 26314              		.loc 1 5629 3 is_stmt 1 view .LVU6924
5629:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 26315              		.loc 1 5629 6 is_stmt 0 view .LVU6925
 26316 00e0 4C44     		add	r4, r4, r9
5630:src/xeq.c     **** 	}
 26317              		.loc 1 5630 16 view .LVU6926
 26318 00e2 0021     		movs	r1, #0
 26319              	.LVL2057:
5630:src/xeq.c     **** 	}
 26320              		.loc 1 5630 16 view .LVU6927
 26321 00e4 7020     		movs	r0, #112
 26322 00e6 FFF7FEFF 		bl	flag_word
 26323              	.LVL2058:
5629:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 26324              		.loc 1 5629 6 view .LVU6928
 26325 00ea A4B2     		uxth	r4, r4
 26326              	.LVL2059:
5630:src/xeq.c     **** 	}
 26327              		.loc 1 5630 3 is_stmt 1 view .LVU6929
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26328              		.loc 1 5634 10 is_stmt 0 view .LVU6930
 26329 00ec 1C4B     		ldr	r3, .L1890+4
5630:src/xeq.c     **** 	}
 26330              		.loc 1 5630 13 view .LVU6931
 26331 00ee 0688     		ldrh	r6, [r0]
 26332              	.LVL2060:
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26333              		.loc 1 5633 2 is_stmt 1 view .LVU6932
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26334              		.loc 1 5634 5 is_stmt 0 view .LVU6933
 26335 00f0 1B68     		ldr	r3, [r3]
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26336              		.loc 1 5633 5 view .LVU6934
 26337 00f2 A4EB0804 		sub	r4, r4, r8
 26338              	.LVL2061:
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26339              		.loc 1 5633 5 view .LVU6935
ARM GAS  /tmp/ccjeMhND.s 			page 673


 26340 00f6 24B2     		sxth	r4, r4
 26341              	.LVL2062:
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26342              		.loc 1 5634 2 is_stmt 1 view .LVU6936
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26343              		.loc 1 5634 6 is_stmt 0 view .LVU6937
 26344 00f8 6242     		rsbs	r2, r4, #0
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26345              		.loc 1 5634 5 view .LVU6938
 26346 00fa 9A42     		cmp	r2, r3
 26347 00fc E0DC     		bgt	.L1878
5638:src/xeq.c     **** 		// move previous contents to new destination
 26348              		.loc 1 5638 2 is_stmt 1 view .LVU6939
5638:src/xeq.c     **** 		// move previous contents to new destination
 26349              		.loc 1 5638 5 is_stmt 0 view .LVU6940
 26350 00fe B9F1000F 		cmp	r9, #0
 26351 0102 25D0     		beq	.L1889
 26352              	.LBB3449:
5640:src/xeq.c     **** 		if (size > old_size) {
 26353              		.loc 1 5640 3 is_stmt 1 view .LVU6941
5641:src/xeq.c     **** 			n = old_size;
 26354              		.loc 1 5641 3 view .LVU6942
5649:src/xeq.c     **** 	}
 26355              		.loc 1 5649 31 is_stmt 0 view .LVU6943
 26356 0104 3B68     		ldr	r3, [r7]
5649:src/xeq.c     **** 	}
 26357              		.loc 1 5649 3 view .LVU6944
 26358 0106 DBF80000 		ldr	r0, [fp]
5649:src/xeq.c     **** 	}
 26359              		.loc 1 5649 29 view .LVU6945
 26360 010a B3F9DE17 		ldrsh	r1, [r3, #2014]
5641:src/xeq.c     **** 			n = old_size;
 26361              		.loc 1 5641 6 view .LVU6946
 26362 010e 4D45     		cmp	r5, r9
5642:src/xeq.c     **** 			size -= old_size;
 26363              		.loc 1 5642 4 is_stmt 1 view .LVU6947
 26364              	.LVL2063:
5643:src/xeq.c     **** 		}
 26365              		.loc 1 5643 4 view .LVU6948
5643:src/xeq.c     **** 		}
 26366              		.loc 1 5643 9 is_stmt 0 view .LVU6949
 26367 0110 C2BF     		ittt	gt
 26368 0112 A5EB0905 		subgt	r5, r5, r9
 26369              	.LVL2064:
5643:src/xeq.c     **** 		}
 26370              		.loc 1 5643 9 view .LVU6950
 26371 0116 4FEA450A 		lslgt	r10, r5, #1
 26372 011a 4D46     		movgt	r5, r9
 26373              	.LVL2065:
5649:src/xeq.c     **** 	}
 26374              		.loc 1 5649 3 is_stmt 1 view .LVU6951
 26375 011c 00EB4101 		add	r1, r0, r1, lsl #1
 26376 0120 4FEA4502 		lsl	r2, r5, #1
 26377 0124 00EB4400 		add	r0, r0, r4, lsl #1
 26378 0128 D8BF     		it	le
 26379 012a 4FF0000A 		movle	r10, #0
 26380 012e FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/ccjeMhND.s 			page 674


 26381              	.LVL2066:
 26382 0132 04EB0903 		add	r3, r4, r9
 26383 0136 5B00     		lsls	r3, r3, #1
5649:src/xeq.c     **** 	}
 26384              		.loc 1 5649 16 is_stmt 0 view .LVU6952
 26385 0138 4FEA4409 		lsl	r9, r4, #1
 26386              	.LVL2067:
5649:src/xeq.c     **** 	}
 26387              		.loc 1 5649 16 view .LVU6953
 26388 013c 99E7     		b	.L1876
 26389              	.LVL2068:
 26390              	.L1888:
5649:src/xeq.c     **** 	}
 26391              		.loc 1 5649 16 view .LVU6954
 26392 013e 4FEA4409 		lsl	r9, r4, #1
 26393              	.LBE3449:
5630:src/xeq.c     **** 	}
 26394              		.loc 1 5630 13 view .LVU6955
 26395 0142 0688     		ldrh	r6, [r0]
 26396 0144 DFF820B0 		ldr	fp, .L1890+12
 26397 0148 4FEA450A 		lsl	r10, r5, #1
 26398 014c 4B46     		mov	r3, r9
 26399 014e 90E7     		b	.L1876
 26400              	.LVL2069:
 26401              	.L1889:
5630:src/xeq.c     **** 	}
 26402              		.loc 1 5630 13 view .LVU6956
 26403 0150 4FEA4409 		lsl	r9, r4, #1
 26404              	.LVL2070:
5630:src/xeq.c     **** 	}
 26405              		.loc 1 5630 13 view .LVU6957
 26406 0154 4FEA450A 		lsl	r10, r5, #1
5638:src/xeq.c     **** 		// move previous contents to new destination
 26407              		.loc 1 5638 5 view .LVU6958
 26408 0158 4B46     		mov	r3, r9
 26409 015a 8AE7     		b	.L1876
 26410              	.L1891:
 26411              		.align	2
 26412              	.L1890:
 26413 015c 00000000 		.word	main_ram
 26414 0160 00000000 		.word	RetStkSize
 26415 0164 00000000 		.word	Error
 26416 0168 00000000 		.word	RetStk
 26417              		.cfi_endproc
 26418              	.LFE260:
 26420              		.section	.text.cmdxout,"ax",%progbits
 26421              		.align	1
 26422              		.p2align 2,,3
 26423              		.global	cmdxout
 26424              		.syntax unified
 26425              		.thumb
 26426              		.thumb_func
 26427              		.fpu fpv4-sp-d16
 26429              	cmdxout:
 26430              	.LVL2071:
 26431              	.LFB262:
5659:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 675


5660:src/xeq.c     **** 
5661:src/xeq.c     **** /*
5662:src/xeq.c     ****  *  xIN: Setup an environment for XROM based math routines:
5663:src/xeq.c     ****  *
5664:src/xeq.c     ****  *  - 12 Private double precision stack & special registers X to K
5665:src/xeq.c     ****  *  - private return stack for local flags & registers
5666:src/xeq.c     ****  *  - 6 system flags
5667:src/xeq.c     ****  *
5668:src/xeq.c     ****  *  Argument:
5669:src/xeq.c     ****  *      noLocals - bit 7
5670:src/xeq.c     ****  *      out      - bits 4..5
5671:src/xeq.c     ****  *      in       - bits 2..4		
5672:src/xeq.c     ****  *      setLastX - bit 1
5673:src/xeq.c     ****  *      complex  - bit 0
5674:src/xeq.c     ****  *
5675:src/xeq.c     ****  *  Local flags:
5676:src/xeq.c     ****  *      .00 to .09 are free for general use.
5677:src/xeq.c     ****  *	.10 - stack_depth as previously set by user, don't touch it!
5678:src/xeq.c     ****  *	.11 - mode_double as previously set by user, don't touch it!
5679:src/xeq.c     ****  *      .12 - complex, from argument, can be modified.
5680:src/xeq.c     ****  *	.13 - setLastX, from argumment, can be modified.
5681:src/xeq.c     ****  *	.14 - state_lift as desired on exit, set to 1 by default, can be modified.
5682:src/xeq.c     ****  *      .15 - reserved, indicates that xIN is active, set to 1, don't touch it!
5683:src/xeq.c     ****  *
5684:src/xeq.c     ****  *  If the call is repeated only the argument values are reevaluated.
5685:src/xeq.c     ****  */
5686:src/xeq.c     **** void cmdxin(unsigned int arg, enum rarg op) {
5687:src/xeq.c     **** 
5688:src/xeq.c     **** 	int i;
5689:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5690:src/xeq.c     **** 	REGISTER *previousLocals = NULL;
5691:src/xeq.c     **** 	unsigned short previousFlags = 0;
5692:src/xeq.c     **** 	int num_locals = 0;
5693:src/xeq.c     **** #endif
5694:src/xeq.c     **** #ifndef REALBUILD
5695:src/xeq.c     **** 	/* This should never happen in a real build but it causes havoc writing
5696:src/xeq.c     **** 	 * xrom code, so trap it here.
5697:src/xeq.c     **** 	 */
5698:src/xeq.c     **** 	if (XromFlags.xIN) {
5699:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5700:src/xeq.c     **** 		return;
5701:src/xeq.c     **** 	}
5702:src/xeq.c     **** #endif
5703:src/xeq.c     **** 
5704:src/xeq.c     **** 	// Setup the XromLocal and XromParams structures in volatile RAM
5705:src/xeq.c     **** 	// fill with 0
5706:src/xeq.c     **** 	xset(&XromLocal, 0, sizeof(XromLocal));
5707:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
5708:src/xeq.c     **** 
5709:src/xeq.c     **** 	// Flags
5710:src/xeq.c     **** 	XromFlags.state_lift_in = get_lift();
5711:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
5712:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
5713:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
5714:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
5715:src/xeq.c     **** 	XromFlags.state_lift = 1;
5716:src/xeq.c     **** 	XromFlags.xIN = 1;
ARM GAS  /tmp/ccjeMhND.s 			page 676


5717:src/xeq.c     **** 
5718:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5719:src/xeq.c     **** 	// Save pointers to original local data
5720:src/xeq.c     **** 	if ((arg & 0x80) != 0 && LocalRegs < 0) {
5721:src/xeq.c     **** 		XromFlags.copyLocals = 1;
5722:src/xeq.c     **** 		previousFlags = *flag_word(LOCAL_FLAG_BASE, NULL);
5723:src/xeq.c     **** 		previousLocals = get_reg_n(LOCAL_REG_BASE);
5724:src/xeq.c     **** 		num_locals = local_regs();
5725:src/xeq.c     **** 	}
5726:src/xeq.c     **** #endif
5727:src/xeq.c     **** 	// Establish local return stack
5728:src/xeq.c     **** 	XromUserRetStk = RetStk;
5729:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
5730:src/xeq.c     **** 
5731:src/xeq.c     **** 	RetStk = XromRetStk;
5732:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5733:src/xeq.c     **** 	RetStkPtr = 0;			// Locals will be allocated later
5734:src/xeq.c     **** #else
5735:src/xeq.c     **** 	LocalRegs = RetStkPtr = -2;	// Allocate just the local flags
5736:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
5737:src/xeq.c     **** #endif
5738:src/xeq.c     **** 
5739:src/xeq.c     **** 	// Parse the argument into fields
5740:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5741:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x20) != 0;
5742:src/xeq.c     **** 	XromFlags.complex = (arg & 0x40) != 0;
5743:src/xeq.c     **** 	XromIn = (arg & 0x1f) % 5;
5744:src/xeq.c     **** 	XromOut = (arg & 0x1f) / 5;
5745:src/xeq.c     **** #else
5746:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x40) != 0;
5747:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
5748:src/xeq.c     **** 	XromIn = (arg & 0x7);
5749:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
5750:src/xeq.c     **** #endif
5751:src/xeq.c     **** 	if (XromFlags.complex) {
5752:src/xeq.c     **** 		// Complex arguments are always in pairs
5753:src/xeq.c     **** 		XromIn <<= 1;
5754:src/xeq.c     **** 		XromOut <<= 1;
5755:src/xeq.c     **** 	}
5756:src/xeq.c     **** 
5757:src/xeq.c     ****         UState.rounding_mode = 0;
5758:src/xeq.c     **** 
5759:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5760:src/xeq.c     **** 	// Allocate the local frame
5761:src/xeq.c     **** 	LocalRegs = 0;
5762:src/xeq.c     **** 	UState.mode_double = 1;		// Needed to allocate enough registers
5763:src/xeq.c     **** 	cmdlocr(num_locals, RARG_LOCR);
5764:src/xeq.c     **** 	if (XromFlags.copyLocals)
5765:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = previousFlags;
5766:src/xeq.c     **** #endif
5767:src/xeq.c     **** 	// Switch to double precision mode
5768:src/xeq.c     **** 	if (XromFlags.mode_int) {
5769:src/xeq.c     **** 		// Convert integers to decimal128
5770:src/xeq.c     **** #ifndef ENABLE_COPYLOCALS
5771:src/xeq.c     **** 		UState.mode_double = 1;
5772:src/xeq.c     **** #endif
5773:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
ARM GAS  /tmp/ccjeMhND.s 			page 677


5774:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
5775:src/xeq.c     **** 	}
5776:src/xeq.c     **** 	else if (XromFlags.mode_double) {
5777:src/xeq.c     **** 		// No conversion necessary
5778:src/xeq.c     **** 		xcopy(XromStack, StackBase, sizeof(XromStack));
5779:src/xeq.c     **** 		StackBase = XromStack;
5780:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5781:src/xeq.c     **** 		if (XromFlags.copyLocals)
5782:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), previousLocals, num_locals);
5783:src/xeq.c     **** #endif
5784:src/xeq.c     **** 	}
5785:src/xeq.c     **** 	else {
5786:src/xeq.c     **** 		// Convert decimal64 to decinal128
5787:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5788:src/xeq.c     **** 		UState.mode_double = 0;		// This was the original state before xIN
5789:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
5790:src/xeq.c     **** 		if (XromFlags.copyLocals) {
5791:src/xeq.c     **** 			decimal64  *src  = &(previousLocals->s);
5792:src/xeq.c     **** 			decimal128 *dest = &(get_reg_n(LOCAL_REG_BASE)->d);
5793:src/xeq.c     **** 			while (num_locals--)
5794:src/xeq.c     **** 				packed128_from_packed(dest++, src++);
5795:src/xeq.c     **** 		}
5796:src/xeq.c     **** #else
5797:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
5798:src/xeq.c     **** #endif
5799:src/xeq.c     **** 	}
5800:src/xeq.c     **** 
5801:src/xeq.c     **** 	// Set stack size to 8 and turn on stack_lift
5802:src/xeq.c     **** 	set_lift();
5803:src/xeq.c     **** 	UState.stack_depth = 1;
5804:src/xeq.c     **** 
5805:src/xeq.c     **** 	// check for any NaNs in input
5806:src/xeq.c     **** 	for (i = 0; i < XromIn; ++i) {
5807:src/xeq.c     **** 		decNumber x;
5808:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
5809:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
5810:src/xeq.c     **** 			// domain error
5811:src/xeq.c     **** 			if (get_user_flag(NAN_FLAG)) {
5812:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
5813:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
5814:src/xeq.c     **** 				// Early exit of routine
5815:src/xeq.c     **** 				cmdxout(0, RARG_XROM_OUT);
5816:src/xeq.c     **** 			} 
5817:src/xeq.c     **** 			else
5818:src/xeq.c     **** 				report_err(ERR_DOMAIN);	// this will do all the cleanup
5819:src/xeq.c     **** 			return;
5820:src/xeq.c     **** 		}
5821:src/xeq.c     **** 	}
5822:src/xeq.c     **** }
5823:src/xeq.c     **** 
5824:src/xeq.c     **** /*
5825:src/xeq.c     ****  *  xOUT: Return from an XROM routine that has previously called xIN
5826:src/xeq.c     ****  *  Argument:
5827:src/xeq.c     ****  *     bit 0 set - do a RTN+1
5828:src/xeq.c     ****  *     bit 1 set - leave I alone even with a complex result
5829:src/xeq.c     ****  */
5830:src/xeq.c     **** void cmdxout(unsigned int arg, enum rarg op) {
ARM GAS  /tmp/ccjeMhND.s 			page 678


 26432              		.loc 1 5830 46 is_stmt 1 view -0
 26433              		.cfi_startproc
 26434              		@ args = 0, pretend = 0, frame = 56
 26435              		@ frame_needed = 0, uses_anonymous_args = 0
5831:src/xeq.c     **** 	int i, dbl, intm;
 26436              		.loc 1 5831 2 view .LVU6960
5832:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5833:src/xeq.c     **** 	unsigned short flags = *flag_word(LOCAL_FLAG_BASE, NULL);
5834:src/xeq.c     **** 	REGISTER *locals = get_reg_n(LOCAL_REG_BASE);
5835:src/xeq.c     **** 	int num_locals = local_regs();
5836:src/xeq.c     **** #endif
5837:src/xeq.c     **** #ifndef REALBUILD
5838:src/xeq.c     **** 	// shouldn't happen in final build
5839:src/xeq.c     **** 	if (! XromFlags.xIN) {
 26437              		.loc 1 5839 2 view .LVU6961
5830:src/xeq.c     **** 	int i, dbl, intm;
 26438              		.loc 1 5830 46 is_stmt 0 view .LVU6962
 26439 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 26440              		.cfi_def_cfa_offset 36
 26441              		.cfi_offset 4, -36
 26442              		.cfi_offset 5, -32
 26443              		.cfi_offset 6, -28
 26444              		.cfi_offset 7, -24
 26445              		.cfi_offset 8, -20
 26446              		.cfi_offset 9, -16
 26447              		.cfi_offset 10, -12
 26448              		.cfi_offset 11, -8
 26449              		.cfi_offset 14, -4
 26450              		.loc 1 5839 6 view .LVU6963
 26451 0004 774C     		ldr	r4, .L1938
 26452              		.loc 1 5839 5 view .LVU6964
 26453 0006 94F90130 		ldrsb	r3, [r4, #1]
 26454 000a 002B     		cmp	r3, #0
5830:src/xeq.c     **** 	int i, dbl, intm;
 26455              		.loc 1 5830 46 view .LVU6965
 26456 000c 8FB0     		sub	sp, sp, #60
 26457              		.cfi_def_cfa_offset 96
 26458              		.loc 1 5839 5 view .LVU6966
 26459 000e 07DB     		blt	.L1893
5840:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 26460              		.loc 1 5840 3 is_stmt 1 view .LVU6967
 26461              	.LVL2072:
 26462              	.LBB3473:
 26463              	.LBI3473:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26464              		.loc 1 537 5 view .LVU6968
 26465              	.LBB3474:
 538:src/xeq.c     **** 		Error = e;
 26466              		.loc 1 538 2 view .LVU6969
 538:src/xeq.c     **** 		Error = e;
 26467              		.loc 1 538 12 is_stmt 0 view .LVU6970
 26468 0010 754B     		ldr	r3, .L1938+4
 538:src/xeq.c     **** 		Error = e;
 26469              		.loc 1 538 5 view .LVU6971
 26470 0012 1A68     		ldr	r2, [r3]
 26471 0014 0AB9     		cbnz	r2, .L1892
 26472              	.LVL2073:
ARM GAS  /tmp/ccjeMhND.s 			page 679


 26473              	.LBB3475:
 26474              	.LBI3475:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26475              		.loc 1 537 5 is_stmt 1 view .LVU6972
 26476              	.LBB3476:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 26477              		.loc 1 539 3 view .LVU6973
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 26478              		.loc 1 539 9 is_stmt 0 view .LVU6974
 26479 0016 0722     		movs	r2, #7
 26480 0018 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 26481              		.loc 1 540 3 is_stmt 1 view .LVU6975
 26482              	.LVL2074:
 26483              	.L1892:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 26484              		.loc 1 540 3 is_stmt 0 view .LVU6976
 26485              	.LBE3476:
 26486              	.LBE3475:
 26487              	.LBE3474:
 26488              	.LBE3473:
5841:src/xeq.c     **** 		return;
5842:src/xeq.c     **** 	}
5843:src/xeq.c     **** #endif
5844:src/xeq.c     **** 	// End special handling
5845:src/xeq.c     **** 	XromFlags.xIN = 0;
5846:src/xeq.c     **** 
5847:src/xeq.c     **** 	// Restore the global return stack
5848:src/xeq.c     **** 	RetStk = XromUserRetStk;
5849:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
5850:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
5851:src/xeq.c     **** 
5852:src/xeq.c     **** 	// RTN or RTN+1 depending on bit 0 of argument
5853:src/xeq.c     **** 	do_rtn(arg & 1);
5854:src/xeq.c     **** 
5855:src/xeq.c     **** 	// Switch back to user stack settings
5856:src/xeq.c     **** 	dbl = UState.mode_double = XromFlags.mode_double;
5857:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
5858:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
5859:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
5860:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
5861:src/xeq.c     **** 
5862:src/xeq.c     **** 	// Last X handling and complex flag
5863:src/xeq.c     **** 	if (XromFlags.setLastX) {
5864:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
5865:src/xeq.c     **** 			setlastXY();
5866:src/xeq.c     **** 		else
5867:src/xeq.c     **** 			setlastX();
5868:src/xeq.c     **** 	}
5869:src/xeq.c     **** 
5870:src/xeq.c     **** 	// Move the stack according to the in/out fields
5871:src/xeq.c     **** 	i = (int) XromOut - (int) XromIn;
5872:src/xeq.c     **** 	if (XromFlags.complex) {
5873:src/xeq.c     **** 		set_was_complex();
5874:src/xeq.c     **** 		while (i < 0) {
5875:src/xeq.c     **** 			// different stack handling in complex mode
5876:src/xeq.c     **** 			// more to consume then to push back
ARM GAS  /tmp/ccjeMhND.s 			page 680


5877:src/xeq.c     **** 			lower2();
5878:src/xeq.c     **** 			i += 2;
5879:src/xeq.c     **** 		}
5880:src/xeq.c     **** 	}
5881:src/xeq.c     **** 	else {
5882:src/xeq.c     **** 		while (i < 0) {
5883:src/xeq.c     **** 			// more to consume then to push back
5884:src/xeq.c     **** 			lower();	
5885:src/xeq.c     **** 			++i;
5886:src/xeq.c     **** 		}
5887:src/xeq.c     **** 	}
5888:src/xeq.c     **** 	if (i > 0) {
5889:src/xeq.c     **** 		// more to push back then to consume
5890:src/xeq.c     **** 		if (! XromFlags.state_lift_in)
5891:src/xeq.c     **** 			--i;
5892:src/xeq.c     **** 		while (i > 0) {
5893:src/xeq.c     **** 			lift();
5894:src/xeq.c     **** 			--i;
5895:src/xeq.c     **** 		}
5896:src/xeq.c     **** 	}
5897:src/xeq.c     **** 	State2.state_lift = XromFlags.state_lift;
5898:src/xeq.c     **** 
5899:src/xeq.c     **** 	// Copy results
5900:src/xeq.c     **** 	i = XromOut;
5901:src/xeq.c     **** 	if (intm) {
5902:src/xeq.c     **** 		while (i--) {
5903:src/xeq.c     **** 			decNumber r;
5904:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
5905:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
5906:src/xeq.c     **** 		}
5907:src/xeq.c     **** 	}
5908:src/xeq.c     **** 	else if (dbl) {
5909:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
5910:src/xeq.c     **** 	}
5911:src/xeq.c     **** 	else {
5912:src/xeq.c     **** 		while (i--)
5913:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
5914:src/xeq.c     **** 	}
5915:src/xeq.c     **** 
5916:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5917:src/xeq.c     **** 	// Copy back local data
5918:src/xeq.c     **** 	if (XromFlags.copyLocals) {
5919:src/xeq.c     **** 		i = local_regs();
5920:src/xeq.c     **** 		num_locals = i < num_locals ? i : num_locals; 
5921:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = flags;
5922:src/xeq.c     **** 		if (intm) {
5923:src/xeq.c     **** 			// not used
5924:src/xeq.c     **** 		}
5925:src/xeq.c     **** 		else if (dbl) {
5926:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), locals, num_locals);
5927:src/xeq.c     **** 		}
5928:src/xeq.c     **** 		else {
5929:src/xeq.c     **** 			decimal64  *dest = &(get_reg_n(LOCAL_REG_BASE)->s);
5930:src/xeq.c     **** 			decimal128 *src  = &(locals->d);
5931:src/xeq.c     **** 			while (num_locals--)
5932:src/xeq.c     **** 				packed_from_packed128(dest++, src++);
5933:src/xeq.c     **** 		}
ARM GAS  /tmp/ccjeMhND.s 			page 681


5934:src/xeq.c     **** 	}
5935:src/xeq.c     **** #endif
5936:src/xeq.c     **** }
 26489              		.loc 1 5936 1 view .LVU6977
 26490 001a 0FB0     		add	sp, sp, #60
 26491              		.cfi_remember_state
 26492              		.cfi_def_cfa_offset 36
 26493              		@ sp needed
 26494 001c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 26495              	.LVL2075:
 26496              	.L1893:
 26497              		.cfi_restore_state
 26498              	.LBB3477:
 26499              	.LBB3478:
5849:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 26500              		.loc 1 5849 2 view .LVU6978
 26501 0020 724F     		ldr	r7, .L1938+8
5850:src/xeq.c     **** 
 26502              		.loc 1 5850 12 view .LVU6979
 26503 0022 7349     		ldr	r1, .L1938+12
 26504              	.LVL2076:
5849:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 26505              		.loc 1 5849 2 view .LVU6980
 26506 0024 3A68     		ldr	r2, [r7]
5845:src/xeq.c     **** 
 26507              		.loc 1 5845 16 view .LVU6981
 26508 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
5849:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 26509              		.loc 1 5849 12 view .LVU6982
 26510 0028 A689     		ldrh	r6, [r4, #12]
 26511 002a A2F8E267 		strh	r6, [r2, #2018]	@ movhi
 26512 002e 0546     		mov	r5, r0
 26513              	.LVL2077:
5849:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 26514              		.loc 1 5849 12 view .LVU6983
 26515              	.LBE3478:
 26516              	.LBI3477:
5830:src/xeq.c     **** 	int i, dbl, intm;
 26517              		.loc 1 5830 6 is_stmt 1 view .LVU6984
 26518              	.LBB3507:
5845:src/xeq.c     **** 
 26519              		.loc 1 5845 2 view .LVU6985
5850:src/xeq.c     **** 
 26520              		.loc 1 5850 12 is_stmt 0 view .LVU6986
 26521 0030 0868     		ldr	r0, [r1]
 26522              	.LVL2078:
5848:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 26523              		.loc 1 5848 9 view .LVU6987
 26524 0032 7049     		ldr	r1, .L1938+16
5850:src/xeq.c     **** 
 26525              		.loc 1 5850 12 view .LVU6988
 26526 0034 A2F8DE07 		strh	r0, [r2, #2014]	@ movhi
5845:src/xeq.c     **** 
 26527              		.loc 1 5845 16 view .LVU6989
 26528 0038 6FF3C713 		bfc	r3, #7, #1
5848:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 26529              		.loc 1 5848 9 view .LVU6990
ARM GAS  /tmp/ccjeMhND.s 			page 682


 26530 003c A268     		ldr	r2, [r4, #8]
 26531 003e 0A60     		str	r2, [r1]
5853:src/xeq.c     **** 
 26532              		.loc 1 5853 2 view .LVU6991
 26533 0040 05F00100 		and	r0, r5, #1
5845:src/xeq.c     **** 
 26534              		.loc 1 5845 16 view .LVU6992
 26535 0044 6370     		strb	r3, [r4, #1]
5848:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 26536              		.loc 1 5848 2 is_stmt 1 view .LVU6993
5849:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 26537              		.loc 1 5849 2 view .LVU6994
5850:src/xeq.c     **** 
 26538              		.loc 1 5850 2 view .LVU6995
5853:src/xeq.c     **** 
 26539              		.loc 1 5853 2 view .LVU6996
 26540 0046 FFF7FEFF 		bl	do_rtn
 26541              	.LVL2079:
5856:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 26542              		.loc 1 5856 2 view .LVU6997
5856:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 26543              		.loc 1 5856 38 is_stmt 0 view .LVU6998
 26544 004a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
5856:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 26545              		.loc 1 5856 8 view .LVU6999
 26546 004c 3868     		ldr	r0, [r7]
5858:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 26547              		.loc 1 5858 41 view .LVU7000
 26548 004e A678     		ldrb	r6, [r4, #2]	@ zero_extendqisi2
5857:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 26549              		.loc 1 5857 21 view .LVU7001
 26550 0050 D0F8E827 		ldr	r2, [r0, #2024]
5860:src/xeq.c     **** 
 26551              		.loc 1 5860 12 view .LVU7002
 26552 0054 DFF8ACA1 		ldr	r10, .L1938+32
5856:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 26553              		.loc 1 5856 38 view .LVU7003
 26554 0058 C3F3C009 		ubfx	r9, r3, #3, #1
 26555              	.LVL2080:
5857:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 26556              		.loc 1 5857 2 is_stmt 1 view .LVU7004
5857:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 26557              		.loc 1 5857 32 is_stmt 0 view .LVU7005
 26558 005c 03F00108 		and	r8, r3, #1
 26559              	.LVL2081:
5858:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 26560              		.loc 1 5858 9 is_stmt 1 view .LVU7006
5859:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 26561              		.loc 1 5859 2 view .LVU7007
5857:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 26562              		.loc 1 5857 21 is_stmt 0 view .LVU7008
 26563 0060 C3F38001 		ubfx	r1, r3, #2, #1
 26564 0064 48EA8933 		orr	r3, r8, r9, lsl #14
 26565              	.LVL2082:
5857:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 26566              		.loc 1 5857 21 view .LVU7009
 26567 0068 43EAC143 		orr	r3, r3, r1, lsl #19
ARM GAS  /tmp/ccjeMhND.s 			page 683


 26568 006c 6249     		ldr	r1, .L1938+20
 26569 006e 06F00706 		and	r6, r6, #7
 26570 0072 1140     		ands	r1, r1, r2
 26571 0074 43EA0673 		orr	r3, r3, r6, lsl #28
 26572 0078 0B43     		orrs	r3, r3, r1
 26573 007a C0F8E837 		str	r3, [r0, #2024]
5860:src/xeq.c     **** 
 26574              		.loc 1 5860 2 is_stmt 1 view .LVU7010
5860:src/xeq.c     **** 
 26575              		.loc 1 5860 14 is_stmt 0 view .LVU7011
 26576 007e 6420     		movs	r0, #100
 26577 0080 FFF7FEFF 		bl	get_reg_n
 26578              	.LVL2083:
5863:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 26579              		.loc 1 5863 6 view .LVU7012
 26580 0084 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
5860:src/xeq.c     **** 
 26581              		.loc 1 5860 12 view .LVU7013
 26582 0086 CAF80000 		str	r0, [r10]
5863:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 26583              		.loc 1 5863 2 is_stmt 1 view .LVU7014
5863:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 26584              		.loc 1 5863 5 is_stmt 0 view .LVU7015
 26585 008a 9606     		lsls	r6, r2, #26
 26586 008c 09D5     		bpl	.L1896
5864:src/xeq.c     **** 			setlastXY();
 26587              		.loc 1 5864 3 is_stmt 1 view .LVU7016
5864:src/xeq.c     **** 			setlastXY();
 26588              		.loc 1 5864 6 is_stmt 0 view .LVU7017
 26589 008e D006     		lsls	r0, r2, #27
 26590 0090 02D5     		bpl	.L1897
5864:src/xeq.c     **** 			setlastXY();
 26591              		.loc 1 5864 25 view .LVU7018
 26592 0092 A907     		lsls	r1, r5, #30
 26593 0094 40F19F80 		bpl	.L1934
 26594              	.L1897:
5867:src/xeq.c     **** 	}
 26595              		.loc 1 5867 4 is_stmt 1 view .LVU7019
 26596              	.LBB3479:
 26597              	.LBI3479:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 26598              		.loc 1 773 6 view .LVU7020
 26599              	.LBB3480:
 774:src/xeq.c     **** }
 26600              		.loc 1 774 2 view .LVU7021
 26601 0098 6421     		movs	r1, #100
 26602 009a 6C20     		movs	r0, #108
 26603 009c FFF7FEFF 		bl	copyreg_n
 26604              	.LVL2084:
 26605 00a0 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 26606              	.L1896:
 26607              	.LBE3480:
 26608              	.LBE3479:
5871:src/xeq.c     **** 	if (XromFlags.complex) {
 26609              		.loc 1 5871 2 view .LVU7022
5871:src/xeq.c     **** 	if (XromFlags.complex) {
 26610              		.loc 1 5871 6 is_stmt 0 view .LVU7023
ARM GAS  /tmp/ccjeMhND.s 			page 684


 26611 00a2 94F805B0 		ldrb	fp, [r4, #5]	@ zero_extendqisi2
5871:src/xeq.c     **** 	if (XromFlags.complex) {
 26612              		.loc 1 5871 22 view .LVU7024
 26613 00a6 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
5872:src/xeq.c     **** 		set_was_complex();
 26614              		.loc 1 5872 5 view .LVU7025
 26615 00a8 D206     		lsls	r2, r2, #27
5871:src/xeq.c     **** 	if (XromFlags.complex) {
 26616              		.loc 1 5871 4 view .LVU7026
 26617 00aa ABEB030B 		sub	fp, fp, r3
 26618              	.LVL2085:
5872:src/xeq.c     **** 		set_was_complex();
 26619              		.loc 1 5872 2 is_stmt 1 view .LVU7027
5872:src/xeq.c     **** 		set_was_complex();
 26620              		.loc 1 5872 5 is_stmt 0 view .LVU7028
 26621 00ae 2BD5     		bpl	.L1935
5873:src/xeq.c     **** 		while (i < 0) {
 26622              		.loc 1 5873 3 is_stmt 1 view .LVU7029
 26623              	.LBB3481:
 26624              	.LBI3481:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 26625              		.loc 1 530 13 view .LVU7030
 26626              	.LBB3482:
 531:src/xeq.c     **** }
 26627              		.loc 1 531 2 view .LVU7031
 531:src/xeq.c     **** }
 26628              		.loc 1 531 20 is_stmt 0 view .LVU7032
 26629 00b0 524E     		ldr	r6, .L1938+24
 26630 00b2 327D     		ldrb	r2, [r6, #20]	@ zero_extendqisi2
 26631 00b4 0121     		movs	r1, #1
 26632 00b6 61F38712 		bfi	r2, r1, #6, #2
 26633              	.LBE3482:
 26634              	.LBE3481:
5874:src/xeq.c     **** 			// different stack handling in complex mode
 26635              		.loc 1 5874 9 view .LVU7033
 26636 00ba BBF1000F 		cmp	fp, #0
 26637              	.LBB3484:
 26638              	.LBB3483:
 531:src/xeq.c     **** }
 26639              		.loc 1 531 20 view .LVU7034
 26640 00be 3275     		strb	r2, [r6, #20]
 531:src/xeq.c     **** }
 26641              		.loc 1 531 20 view .LVU7035
 26642              	.LBE3483:
 26643              	.LBE3484:
5874:src/xeq.c     **** 			// different stack handling in complex mode
 26644              		.loc 1 5874 9 is_stmt 1 view .LVU7036
 26645 00c0 13DA     		bge	.L1900
 26646 00c2 6FEA0B03 		mvn	r3, fp
 26647 00c6 23F00105 		bic	r5, r3, #1
 26648              	.LVL2086:
5874:src/xeq.c     **** 			// different stack handling in complex mode
 26649              		.loc 1 5874 9 is_stmt 0 view .LVU7037
 26650 00ca 0093     		str	r3, [sp]
 26651 00cc 0BF10203 		add	r3, fp, #2
 26652 00d0 0193     		str	r3, [sp, #4]
 26653 00d2 1D44     		add	r5, r5, r3
ARM GAS  /tmp/ccjeMhND.s 			page 685


 26654              	.L1901:
5877:src/xeq.c     **** 			i += 2;
 26655              		.loc 1 5877 4 is_stmt 1 view .LVU7038
5878:src/xeq.c     **** 		}
 26656              		.loc 1 5878 6 is_stmt 0 view .LVU7039
 26657 00d4 0BF1020B 		add	fp, fp, #2
 26658              	.LVL2087:
5877:src/xeq.c     **** 			i += 2;
 26659              		.loc 1 5877 4 view .LVU7040
 26660 00d8 FFF7FEFF 		bl	lower2
 26661              	.LVL2088:
5878:src/xeq.c     **** 		}
 26662              		.loc 1 5878 4 is_stmt 1 view .LVU7041
5874:src/xeq.c     **** 			// different stack handling in complex mode
 26663              		.loc 1 5874 9 view .LVU7042
 26664 00dc AB45     		cmp	fp, r5
 26665 00de F9D1     		bne	.L1901
 26666 00e0 009B     		ldr	r3, [sp]
 26667 00e2 23F0010B 		bic	fp, r3, #1
 26668              	.LVL2089:
5874:src/xeq.c     **** 			// different stack handling in complex mode
 26669              		.loc 1 5874 9 is_stmt 0 view .LVU7043
 26670 00e6 019B     		ldr	r3, [sp, #4]
 26671 00e8 9B44     		add	fp, fp, r3
 26672              	.L1900:
 26673              	.LVL2090:
5888:src/xeq.c     **** 		// more to push back then to consume
 26674              		.loc 1 5888 2 is_stmt 1 view .LVU7044
5888:src/xeq.c     **** 		// more to push back then to consume
 26675              		.loc 1 5888 5 is_stmt 0 view .LVU7045
 26676 00ea BBF1000F 		cmp	fp, #0
 26677 00ee 14D0     		beq	.L1902
5890:src/xeq.c     **** 			--i;
 26678              		.loc 1 5890 3 is_stmt 1 view .LVU7046
5890:src/xeq.c     **** 			--i;
 26679              		.loc 1 5890 7 is_stmt 0 view .LVU7047
 26680 00f0 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
5890:src/xeq.c     **** 			--i;
 26681              		.loc 1 5890 6 view .LVU7048
 26682 00f2 9307     		lsls	r3, r2, #30
 26683 00f4 02D4     		bmi	.L1907
5891:src/xeq.c     **** 		while (i > 0) {
 26684              		.loc 1 5891 4 is_stmt 1 view .LVU7049
 26685              	.LVL2091:
5892:src/xeq.c     **** 			lift();
 26686              		.loc 1 5892 9 view .LVU7050
 26687 00f6 BBF1010B 		subs	fp, fp, #1
 26688              	.LVL2092:
5892:src/xeq.c     **** 			lift();
 26689              		.loc 1 5892 9 is_stmt 0 view .LVU7051
 26690 00fa 0ED0     		beq	.L1902
 26691              	.L1907:
5893:src/xeq.c     **** 			--i;
 26692              		.loc 1 5893 4 is_stmt 1 view .LVU7052
 26693 00fc FFF7FEFF 		bl	lift
 26694              	.LVL2093:
5894:src/xeq.c     **** 		}
ARM GAS  /tmp/ccjeMhND.s 			page 686


 26695              		.loc 1 5894 4 view .LVU7053
5892:src/xeq.c     **** 			lift();
 26696              		.loc 1 5892 9 view .LVU7054
 26697 0100 BBF1010B 		subs	fp, fp, #1
 26698              	.LVL2094:
5892:src/xeq.c     **** 			lift();
 26699              		.loc 1 5892 9 is_stmt 0 view .LVU7055
 26700 0104 FAD1     		bne	.L1907
 26701 0106 08E0     		b	.L1902
 26702              	.LVL2095:
 26703              	.L1935:
5882:src/xeq.c     **** 			// more to consume then to push back
 26704              		.loc 1 5882 9 is_stmt 1 view .LVU7056
 26705 0108 BBF1000F 		cmp	fp, #0
 26706 010c 67DA     		bge	.L1936
 26707              	.L1899:
5884:src/xeq.c     **** 			++i;
 26708              		.loc 1 5884 4 view .LVU7057
 26709 010e FFF7FEFF 		bl	lower
 26710              	.LVL2096:
5885:src/xeq.c     **** 		}
 26711              		.loc 1 5885 4 view .LVU7058
5882:src/xeq.c     **** 			// more to consume then to push back
 26712              		.loc 1 5882 9 view .LVU7059
 26713 0112 1BF1010B 		adds	fp, fp, #1
 26714              	.LVL2097:
5882:src/xeq.c     **** 			// more to consume then to push back
 26715              		.loc 1 5882 9 is_stmt 0 view .LVU7060
 26716 0116 FAD1     		bne	.L1899
 26717 0118 384E     		ldr	r6, .L1938+24
 26718              	.LVL2098:
 26719              	.L1902:
5897:src/xeq.c     **** 
 26720              		.loc 1 5897 2 is_stmt 1 view .LVU7061
5897:src/xeq.c     **** 
 26721              		.loc 1 5897 31 is_stmt 0 view .LVU7062
 26722 011a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
5897:src/xeq.c     **** 
 26723              		.loc 1 5897 20 view .LVU7063
 26724 011c F27D     		ldrb	r2, [r6, #23]	@ zero_extendqisi2
5900:src/xeq.c     **** 	if (intm) {
 26725              		.loc 1 5900 4 view .LVU7064
 26726 011e 6479     		ldrb	r4, [r4, #5]	@ zero_extendqisi2
5897:src/xeq.c     **** 
 26727              		.loc 1 5897 31 view .LVU7065
 26728 0120 C3F38013 		ubfx	r3, r3, #6, #1
5897:src/xeq.c     **** 
 26729              		.loc 1 5897 20 view .LVU7066
 26730 0124 63F38612 		bfi	r2, r3, #6, #1
 26731 0128 F275     		strb	r2, [r6, #23]
5900:src/xeq.c     **** 	if (intm) {
 26732              		.loc 1 5900 2 is_stmt 1 view .LVU7067
 26733              	.LVL2099:
5901:src/xeq.c     **** 		while (i--) {
 26734              		.loc 1 5901 2 view .LVU7068
5901:src/xeq.c     **** 		while (i--) {
 26735              		.loc 1 5901 5 is_stmt 0 view .LVU7069
ARM GAS  /tmp/ccjeMhND.s 			page 687


 26736 012a B8F1000F 		cmp	r8, #0
 26737 012e 23D0     		beq	.L1937
5902:src/xeq.c     **** 			decNumber r;
 26738              		.loc 1 5902 9 is_stmt 1 view .LVU7070
5902:src/xeq.c     **** 			decNumber r;
 26739              		.loc 1 5902 11 is_stmt 0 view .LVU7071
 26740 0130 631E     		subs	r3, r4, #1
 26741              	.LVL2100:
5902:src/xeq.c     **** 			decNumber r;
 26742              		.loc 1 5902 9 view .LVU7072
 26743 0132 002C     		cmp	r4, #0
 26744 0134 3FF471AF 		beq	.L1892
 26745 0138 314D     		ldr	r5, .L1938+28
 26746 013a 6334     		adds	r4, r4, #99
 26747 013c 05EB0315 		add	r5, r5, r3, lsl #4
 26748 0140 05AE     		add	r6, sp, #20
 26749              	.LVL2101:
 26750              	.L1909:
 26751              	.LBB3485:
5903:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
 26752              		.loc 1 5903 4 is_stmt 1 view .LVU7073
5904:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
 26753              		.loc 1 5904 4 view .LVU7074
 26754 0142 3146     		mov	r1, r6
 26755 0144 2846     		mov	r0, r5
 26756 0146 FFF7FEFF 		bl	decimal128ToNumber
 26757              	.LVL2102:
5905:src/xeq.c     **** 		}
 26758              		.loc 1 5905 4 view .LVU7075
 26759 014a 3046     		mov	r0, r6
 26760 014c FFF7FEFF 		bl	intResult
 26761              	.LVL2103:
5905:src/xeq.c     **** 		}
 26762              		.loc 1 5905 4 is_stmt 0 view .LVU7076
 26763 0150 0246     		mov	r2, r0
 26764 0152 0B46     		mov	r3, r1
 26765              	.LBB3486:
 26766              	.LBB3487:
1237:src/xeq.c     **** }
 26767              		.loc 1 1237 8 view .LVU7077
 26768 0154 2046     		mov	r0, r4
 26769 0156 CDE90223 		strd	r2, [sp, #8]
 26770              	.LVL2104:
1237:src/xeq.c     **** }
 26771              		.loc 1 1237 8 view .LVU7078
 26772              	.LBE3487:
 26773              	.LBI3486:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 26774              		.loc 1 1236 6 is_stmt 1 view .LVU7079
 26775              	.LBB3488:
1237:src/xeq.c     **** }
 26776              		.loc 1 1237 2 view .LVU7080
1237:src/xeq.c     **** }
 26777              		.loc 1 1237 8 is_stmt 0 view .LVU7081
 26778 015a FFF7FEFF 		bl	get_reg_n
 26779              	.LVL2105:
1237:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 688


 26780              		.loc 1 1237 2 view .LVU7082
 26781 015e 0822     		movs	r2, #8
 26782 0160 013C     		subs	r4, r4, #1
 26783              	.LVL2106:
1237:src/xeq.c     **** }
 26784              		.loc 1 1237 2 view .LVU7083
 26785 0162 0DEB0201 		add	r1, sp, r2
 26786 0166 FFF7FEFF 		bl	xcopy
 26787              	.LVL2107:
1237:src/xeq.c     **** }
 26788              		.loc 1 1237 2 view .LVU7084
 26789              	.LBE3488:
 26790              	.LBE3486:
 26791              	.LBE3485:
5902:src/xeq.c     **** 			decNumber r;
 26792              		.loc 1 5902 9 is_stmt 1 view .LVU7085
 26793 016a 632C     		cmp	r4, #99
 26794 016c A5F11005 		sub	r5, r5, #16
 26795 0170 E7D1     		bne	.L1909
 26796              	.LBE3507:
 26797              	.LBE3477:
 26798              		.loc 1 5936 1 is_stmt 0 view .LVU7086
 26799 0172 0FB0     		add	sp, sp, #60
 26800              		.cfi_remember_state
 26801              		.cfi_def_cfa_offset 36
 26802              		@ sp needed
 26803 0174 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 26804              	.LVL2108:
 26805              	.L1937:
 26806              		.cfi_restore_state
 26807              	.LBB3509:
 26808              	.LBB3508:
5908:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 26809              		.loc 1 5908 7 is_stmt 1 view .LVU7087
5908:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 26810              		.loc 1 5908 10 is_stmt 0 view .LVU7088
 26811 0178 B9F1000F 		cmp	r9, #0
 26812 017c 1AD1     		bne	.L1910
5912:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 26813              		.loc 1 5912 9 is_stmt 1 view .LVU7089
5912:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 26814              		.loc 1 5912 11 is_stmt 0 view .LVU7090
 26815 017e 631E     		subs	r3, r4, #1
 26816              	.LVL2109:
5912:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 26817              		.loc 1 5912 9 view .LVU7091
 26818 0180 002C     		cmp	r4, #0
 26819 0182 3FF44AAF 		beq	.L1892
 26820 0186 1E4F     		ldr	r7, .L1938+28
 26821 0188 6334     		adds	r4, r4, #99
 26822 018a 07EB0317 		add	r7, r7, r3, lsl #4
 26823 018e 05AE     		add	r6, sp, #20
 26824              	.LVL2110:
 26825              	.L1913:
5913:src/xeq.c     **** 	}
 26826              		.loc 1 5913 4 is_stmt 1 view .LVU7092
 26827              	.LBB3489:
ARM GAS  /tmp/ccjeMhND.s 			page 689


 26828              	.LBI3489:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 26829              		.loc 1 709 11 view .LVU7093
 26830              	.LBB3490:
 710:src/xeq.c     **** }
 26831              		.loc 1 710 2 view .LVU7094
 710:src/xeq.c     **** }
 26832              		.loc 1 710 9 is_stmt 0 view .LVU7095
 26833 0190 2046     		mov	r0, r4
 26834 0192 FFF7FEFF 		bl	get_reg_n
 26835              	.LVL2111:
 26836              	.LBE3490:
 26837              	.LBE3489:
 26838              	.LBB3492:
 26839              	.LBB3493:
 641:src/xeq.c     **** }
 26840              		.loc 1 641 24 view .LVU7096
 26841 0196 3146     		mov	r1, r6
 26842              	.LBE3493:
 26843              	.LBE3492:
 26844              	.LBB3495:
 26845              	.LBB3491:
 710:src/xeq.c     **** }
 26846              		.loc 1 710 9 view .LVU7097
 26847 0198 0546     		mov	r5, r0
 26848              	.LVL2112:
 710:src/xeq.c     **** }
 26849              		.loc 1 710 9 view .LVU7098
 26850              	.LBE3491:
 26851              	.LBE3495:
 26852              	.LBB3496:
 26853              	.LBI3492:
 639:src/xeq.c     **** 	decNumber temp;
 26854              		.loc 1 639 6 is_stmt 1 view .LVU7099
 26855              	.LBB3494:
 640:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 26856              		.loc 1 640 2 view .LVU7100
 641:src/xeq.c     **** }
 26857              		.loc 1 641 2 view .LVU7101
 641:src/xeq.c     **** }
 26858              		.loc 1 641 24 is_stmt 0 view .LVU7102
 26859 019a 3846     		mov	r0, r7
 26860              	.LVL2113:
 641:src/xeq.c     **** }
 26861              		.loc 1 641 24 view .LVU7103
 26862 019c FFF7FEFF 		bl	decimal128ToNumber
 26863              	.LVL2114:
 26864 01a0 013C     		subs	r4, r4, #1
 26865              	.LVL2115:
 641:src/xeq.c     **** }
 26866              		.loc 1 641 24 view .LVU7104
 26867 01a2 0146     		mov	r1, r0
 641:src/xeq.c     **** }
 26868              		.loc 1 641 2 view .LVU7105
 26869 01a4 2846     		mov	r0, r5
 26870 01a6 FFF7FEFF 		bl	packed_from_number
 26871              	.LVL2116:
ARM GAS  /tmp/ccjeMhND.s 			page 690


 641:src/xeq.c     **** }
 26872              		.loc 1 641 2 view .LVU7106
 26873              	.LBE3494:
 26874              	.LBE3496:
5912:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 26875              		.loc 1 5912 9 is_stmt 1 view .LVU7107
5912:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 26876              		.loc 1 5912 9 is_stmt 0 view .LVU7108
 26877 01aa 632C     		cmp	r4, #99
 26878 01ac A7F11007 		sub	r7, r7, #16
 26879 01b0 EED1     		bne	.L1913
 26880 01b2 32E7     		b	.L1892
 26881              	.LVL2117:
 26882              	.L1910:
5909:src/xeq.c     **** 	}
 26883              		.loc 1 5909 3 is_stmt 1 view .LVU7109
 26884              	.LBB3497:
 26885              	.LBB3498:
 26886              	.LBB3499:
 26887              	.LBB3500:
 933:src/xeq.c     **** }
 26888              		.loc 1 933 24 is_stmt 0 view .LVU7110
 26889 01b4 3B68     		ldr	r3, [r7]
 26890              	.LBE3500:
 26891              	.LBE3499:
 26892              	.LBE3498:
 26893              	.LBE3497:
5909:src/xeq.c     **** 	}
 26894              		.loc 1 5909 3 view .LVU7111
 26895 01b6 DAF80000 		ldr	r0, [r10]
 26896              	.LVL2118:
 26897              	.LBB3506:
 26898              	.LBI3497:
1351:src/xeq.c     **** 	if (is_dblmode())
 26899              		.loc 1 1351 6 is_stmt 1 view .LVU7112
 26900              	.LBB3505:
1352:src/xeq.c     **** 		n <<= 1;
 26901              		.loc 1 1352 2 view .LVU7113
 26902              	.LBB3503:
 26903              	.LBI3499:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 26904              		.loc 1 932 5 view .LVU7114
 26905              	.LBB3501:
 933:src/xeq.c     **** }
 26906              		.loc 1 933 2 view .LVU7115
 933:src/xeq.c     **** }
 26907              		.loc 1 933 24 is_stmt 0 view .LVU7116
 26908 01ba B3F8E827 		ldrh	r2, [r3, #2024]
 26909              	.LBE3501:
 26910              	.LBE3503:
1354:src/xeq.c     **** }
 26911              		.loc 1 1354 2 view .LVU7117
 26912 01be 1049     		ldr	r1, .L1938+28
 26913              	.LBB3504:
 26914              	.LBB3502:
 933:src/xeq.c     **** }
 26915              		.loc 1 933 24 view .LVU7118
ARM GAS  /tmp/ccjeMhND.s 			page 691


 26916 01c0 44F20103 		movw	r3, #16385
 26917              	.LBE3502:
 26918              	.LBE3504:
1352:src/xeq.c     **** 		n <<= 1;
 26919              		.loc 1 1352 5 view .LVU7119
 26920 01c4 1340     		ands	r3, r3, r2
 26921 01c6 B3F5804F 		cmp	r3, #16384
1353:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 26922              		.loc 1 1353 3 is_stmt 1 view .LVU7120
1353:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 26923              		.loc 1 1353 5 is_stmt 0 view .LVU7121
 26924 01ca 08BF     		it	eq
 26925 01cc 6400     		lsleq	r4, r4, #1
 26926              	.LVL2119:
1354:src/xeq.c     **** }
 26927              		.loc 1 1354 2 is_stmt 1 view .LVU7122
 26928 01ce E200     		lsls	r2, r4, #3
 26929 01d0 FFF7FEFF 		bl	xcopy
 26930              	.LVL2120:
1355:src/xeq.c     **** 
 26931              		.loc 1 1355 1 is_stmt 0 view .LVU7123
 26932 01d4 21E7     		b	.L1892
 26933              	.LVL2121:
 26934              	.L1934:
1355:src/xeq.c     **** 
 26935              		.loc 1 1355 1 view .LVU7124
 26936              	.LBE3505:
 26937              	.LBE3506:
5865:src/xeq.c     **** 		else
 26938              		.loc 1 5865 4 is_stmt 1 view .LVU7125
 26939 01d6 FFF7FEFF 		bl	setlastXY
 26940              	.LVL2122:
 26941 01da 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 26942 01dc 61E7     		b	.L1896
 26943              	.LVL2123:
 26944              	.L1936:
5865:src/xeq.c     **** 		else
 26945              		.loc 1 5865 4 is_stmt 0 view .LVU7126
 26946 01de 074E     		ldr	r6, .L1938+24
 26947 01e0 83E7     		b	.L1900
 26948              	.L1939:
 26949 01e2 00BF     		.align	2
 26950              	.L1938:
 26951 01e4 00000000 		.word	XromParams
 26952 01e8 00000000 		.word	Error
 26953 01ec 00000000 		.word	main_ram
 26954 01f0 00000000 		.word	UserLocalRegs
 26955 01f4 00000000 		.word	RetStk
 26956 01f8 FEBFF78F 		.word	-1879588866
 26957 01fc 00000000 		.word	StateWhileOn
 26958 0200 00000000 		.word	XromLocal
 26959 0204 00000000 		.word	StackBase
 26960              	.LBE3508:
 26961              	.LBE3509:
 26962              		.cfi_endproc
 26963              	.LFE262:
 26965              		.section	.text.cmdconverged,"ax",%progbits
ARM GAS  /tmp/ccjeMhND.s 			page 692


 26966              		.align	1
 26967              		.p2align 2,,3
 26968              		.global	cmdconverged
 26969              		.syntax unified
 26970              		.thumb
 26971              		.thumb_func
 26972              		.fpu fpv4-sp-d16
 26974              	cmdconverged:
 26975              	.LVL2124:
 26976              	.LFB263:
5937:src/xeq.c     **** 
5938:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
5939:src/xeq.c     **** /*
5940:src/xeq.c     ****  *  Allow access to command argument from XROM
5941:src/xeq.c     ****  */
5942:src/xeq.c     **** void cmdxarg(unsigned int arg, enum rarg op) {
5943:src/xeq.c     **** 	set_reg_n_int_sgn(arg, XromArg, 0);
5944:src/xeq.c     **** }
5945:src/xeq.c     **** #endif
5946:src/xeq.c     **** 
5947:src/xeq.c     **** 
5948:src/xeq.c     **** /* A slightly obtuse command to check for convergence.
5949:src/xeq.c     ****  * Arguments are organised bitwise in this form:
5950:src/xeq.c     ****  *
5951:src/xeq.c     ****  *	SMMTT
5952:src/xeq.c     ****  *
5953:src/xeq.c     ****  * where:
5954:src/xeq.c     ****  *	TT is the tolerance parameter:
5955:src/xeq.c     ****  *
5956:src/xeq.c     ****  *	  	0	1e-14 tolerance
5957:src/xeq.c     ****  *	  	1	1e-24 tolerance
5958:src/xeq.c     ****  *	  	2	1e-32 tolerance
5959:src/xeq.c     ****  *	  	3	choose the best tolerance for the current modes
5960:src/xeq.c     ****  *			for user mode this means 0 for single precision and 2 for double precision
5961:src/xeq.c     ****  *
5962:src/xeq.c     ****  *	MM is the mode parameter:
5963:src/xeq.c     ****  *	  	0	compare real X & Y relatively
5964:src/xeq.c     ****  *	  	1	compare real X & Y absolutely
5965:src/xeq.c     ****  *	  	2	compare complex X/Y & Z/T for absolute difference
5966:src/xeq.c     ****  *	  	3	compare real X & Y relatively
5967:src/xeq.c     ****  *
5968:src/xeq.c     ****  *	S is the special number validation:
5969:src/xeq.c     ****  *		0	Nan & infinities are considered converged
5970:src/xeq.c     ****  *		1	NaN & infinities are not considered converged
5971:src/xeq.c     ****  *
5972:src/xeq.c     ****  * In integer mode, the arguemnt is completely ignored and an equality
5973:src/xeq.c     ****  * comparision is undertaken instead.
5974:src/xeq.c     ****  */
5975:src/xeq.c     **** static const decNumber * const convergence_tolerances[3] = {
5976:src/xeq.c     **** 	&const_1e_14, &const_1e_24, &const_1e_32
5977:src/xeq.c     **** };
5978:src/xeq.c     **** 
5979:src/xeq.c     **** void cmdconverged(unsigned int arg, enum rarg cmd) {
 26977              		.loc 1 5979 52 is_stmt 1 view -0
 26978              		.cfi_startproc
 26979              		@ args = 0, pretend = 0, frame = 216
 26980              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccjeMhND.s 			page 693


5980:src/xeq.c     **** 	const decNumber *tolerance;
 26981              		.loc 1 5980 2 view .LVU7128
5981:src/xeq.c     **** 	unsigned int tol = arg & 3;
 26982              		.loc 1 5981 2 view .LVU7129
5982:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
5983:src/xeq.c     **** 	const int specials = arg & 0x10;
5984:src/xeq.c     **** 	const int complex = mode == 2;
5985:src/xeq.c     **** 	const int absolute = mode == 1;
5986:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
5987:src/xeq.c     **** 	int res;
5988:src/xeq.c     **** 
5989:src/xeq.c     **** 	if (is_intmode()) {
 26983              		.loc 1 5989 6 is_stmt 0 view .LVU7130
 26984 0000 374B     		ldr	r3, .L1955
5979:src/xeq.c     **** 	const decNumber *tolerance;
 26985              		.loc 1 5979 52 view .LVU7131
 26986 0002 70B5     		push	{r4, r5, r6, lr}
 26987              		.cfi_def_cfa_offset 16
 26988              		.cfi_offset 4, -16
 26989              		.cfi_offset 5, -12
 26990              		.cfi_offset 6, -8
 26991              		.cfi_offset 14, -4
 26992              		.loc 1 5989 6 view .LVU7132
 26993 0004 1A68     		ldr	r2, [r3]
 26994 0006 92F8E817 		ldrb	r1, [r2, #2024]	@ zero_extendqisi2
 26995              	.LVL2125:
5982:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
 26996              		.loc 1 5982 2 is_stmt 1 view .LVU7133
5983:src/xeq.c     **** 	const int complex = mode == 2;
 26997              		.loc 1 5983 2 view .LVU7134
5984:src/xeq.c     **** 	const int absolute = mode == 1;
 26998              		.loc 1 5984 2 view .LVU7135
5985:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
 26999              		.loc 1 5985 2 view .LVU7136
5986:src/xeq.c     **** 	int res;
 27000              		.loc 1 5986 2 view .LVU7137
5987:src/xeq.c     **** 
 27001              		.loc 1 5987 2 view .LVU7138
 27002              		.loc 1 5989 2 view .LVU7139
 27003              		.loc 1 5989 5 is_stmt 0 view .LVU7140
 27004 000a CB07     		lsls	r3, r1, #31
5979:src/xeq.c     **** 	const decNumber *tolerance;
 27005              		.loc 1 5979 52 view .LVU7141
 27006 000c B8B0     		sub	sp, sp, #224
 27007              		.cfi_def_cfa_offset 240
 27008              		.loc 1 5989 5 view .LVU7142
 27009 000e 35D4     		bmi	.L1951
 27010 0010 00F00303 		and	r3, r0, #3
 27011              	.LVL2126:
5990:src/xeq.c     **** 		do_tst(regY_idx, TST_EQ);
5991:src/xeq.c     **** 		return;
5992:src/xeq.c     **** 	}
5993:src/xeq.c     **** 
5994:src/xeq.c     **** 	if (tol == 3) {
 27012              		.loc 1 5994 5 view .LVU7143
 27013 0014 032B     		cmp	r3, #3
 27014 0016 0446     		mov	r4, r0
ARM GAS  /tmp/ccjeMhND.s 			page 694


 27015 0018 00F01005 		and	r5, r0, #16
 27016              	.LVL2127:
 27017              		.loc 1 5994 2 is_stmt 1 view .LVU7144
 27018              		.loc 1 5994 5 is_stmt 0 view .LVU7145
 27019 001c 24D0     		beq	.L1943
 27020 001e 314A     		ldr	r2, .L1955+4
 27021 0020 52F82360 		ldr	r6, [r2, r3, lsl #2]
 27022              	.LVL2128:
 27023              	.L1944:
5995:src/xeq.c     **** 		if (is_dblmode())
5996:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
5997:src/xeq.c     **** 		else
5998:src/xeq.c     **** 			tol = 0;
5999:src/xeq.c     **** 	}
6000:src/xeq.c     **** 	tolerance = convergence_tolerances[tol];
 27024              		.loc 1 6000 2 is_stmt 1 view .LVU7146
6001:src/xeq.c     **** 
6002:src/xeq.c     **** 	getXYZT(&x, &y, &z, &t);
 27025              		.loc 1 6002 2 view .LVU7147
 27026              	.LBB3510:
 27027              	.LBI3510:
 857:src/xeq.c     **** 	getXYZ(x, y, z);
 27028              		.loc 1 857 6 view .LVU7148
 27029              	.LBB3511:
 858:src/xeq.c     **** 	getT(t);
 27030              		.loc 1 858 2 view .LVU7149
 27031 0024 1DAA     		add	r2, sp, #116
 27032              	.LVL2129:
 858:src/xeq.c     **** 	getT(t);
 27033              		.loc 1 858 2 is_stmt 0 view .LVU7150
 27034 0026 14A9     		add	r1, sp, #80
 27035              	.LVL2130:
 858:src/xeq.c     **** 	getT(t);
 27036              		.loc 1 858 2 view .LVU7151
 27037 0028 0BA8     		add	r0, sp, #44
 27038              	.LVL2131:
 858:src/xeq.c     **** 	getT(t);
 27039              		.loc 1 858 2 view .LVU7152
 27040 002a FFF7FEFF 		bl	getXYZ
 27041              	.LVL2132:
 859:src/xeq.c     **** }
 27042              		.loc 1 859 2 is_stmt 1 view .LVU7153
 27043              	.LBB3512:
 27044              	.LBI3512:
 831:src/xeq.c     **** 	getRegister(t, regT_idx);
 27045              		.loc 1 831 13 view .LVU7154
 27046              	.LBB3513:
 832:src/xeq.c     **** }
 27047              		.loc 1 832 2 view .LVU7155
 27048 002e 02A8     		add	r0, sp, #8
 27049              	.LVL2133:
 832:src/xeq.c     **** }
 27050              		.loc 1 832 2 is_stmt 0 view .LVU7156
 27051 0030 6721     		movs	r1, #103
 27052 0032 FFF7FEFF 		bl	getRegister
 27053              	.LVL2134:
 832:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 695


 27054              		.loc 1 832 2 view .LVU7157
 27055              	.LBE3513:
 27056              	.LBE3512:
 27057              	.LBE3511:
 27058              	.LBE3510:
6003:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || decNumberIsSpecial(&y))
 27059              		.loc 1 6003 2 is_stmt 1 view .LVU7158
 27060              		.loc 1 6003 29 is_stmt 0 view .LVU7159
 27061 0036 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 27062 003a 9DF85820 		ldrb	r2, [sp, #88]	@ zero_extendqisi2
 27063 003e 1343     		orrs	r3, r3, r2
 27064 0040 13F0700F 		tst	r3, #112
 27065 0044 0BD1     		bne	.L1945
5982:src/xeq.c     **** 	const int specials = arg & 0x10;
 27066              		.loc 1 5982 21 view .LVU7160
 27067 0046 C4F38104 		ubfx	r4, r4, #2, #2
 27068              	.LVL2135:
6004:src/xeq.c     **** 		res = specials;
6005:src/xeq.c     **** 	else if (complex) {
 27069              		.loc 1 6005 7 is_stmt 1 view .LVU7161
 27070              		.loc 1 6005 10 is_stmt 0 view .LVU7162
 27071 004a 022C     		cmp	r4, #2
 27072 004c 26D0     		beq	.L1952
6006:src/xeq.c     **** 		if (decNumberIsSpecial(&z) || decNumberIsSpecial(&t))
6007:src/xeq.c     **** 			res = specials;
6008:src/xeq.c     **** 		else {
6009:src/xeq.c     **** 			cmplxSubtract(&a, &b, &x, &y, &z, &t);
6010:src/xeq.c     **** 			cmplxR(&x, &a, &b);
6011:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
6012:src/xeq.c     **** 		}
6013:src/xeq.c     **** 	} else {
6014:src/xeq.c     **** 		if (absolute)
 27073              		.loc 1 6014 3 is_stmt 1 view .LVU7163
 27074              		.loc 1 6014 6 is_stmt 0 view .LVU7164
 27075 004e 012C     		cmp	r4, #1
6015:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 27076              		.loc 1 6015 10 view .LVU7165
 27077 0050 3246     		mov	r2, r6
 27078 0052 14A9     		add	r1, sp, #80
 27079 0054 0BA8     		add	r0, sp, #44
6014:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 27080              		.loc 1 6014 6 view .LVU7166
 27081 0056 3ED0     		beq	.L1953
6016:src/xeq.c     **** 		else
6017:src/xeq.c     **** 			res = relative_error(&x, &y, tolerance);
 27082              		.loc 1 6017 4 is_stmt 1 view .LVU7167
 27083              		.loc 1 6017 10 is_stmt 0 view .LVU7168
 27084 0058 FFF7FEFF 		bl	relative_error
 27085              	.LVL2136:
 27086 005c 0546     		mov	r5, r0
 27087              	.LVL2137:
 27088              	.L1945:
6018:src/xeq.c     **** 	}
6019:src/xeq.c     **** 	fin_tst(res);
 27089              		.loc 1 6019 2 is_stmt 1 discriminator 1 view .LVU7169
 27090 005e 2846     		mov	r0, r5
 27091 0060 FFF7FEFF 		bl	fin_tst
ARM GAS  /tmp/ccjeMhND.s 			page 696


 27092              	.LVL2138:
6020:src/xeq.c     **** }
 27093              		.loc 1 6020 1 is_stmt 0 discriminator 1 view .LVU7170
 27094 0064 38B0     		add	sp, sp, #224
 27095              		.cfi_remember_state
 27096              		.cfi_def_cfa_offset 16
 27097              		@ sp needed
 27098 0066 70BD     		pop	{r4, r5, r6, pc}
 27099              	.LVL2139:
 27100              	.L1943:
 27101              		.cfi_restore_state
5995:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 27102              		.loc 1 5995 3 is_stmt 1 view .LVU7171
 27103              	.LBB3514:
 27104              	.LBI3514:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27105              		.loc 1 932 5 view .LVU7172
 27106              	.LBB3515:
 933:src/xeq.c     **** }
 27107              		.loc 1 933 2 view .LVU7173
 933:src/xeq.c     **** }
 27108              		.loc 1 933 24 is_stmt 0 view .LVU7174
 27109 0068 B2F8E827 		ldrh	r2, [r2, #2024]
 27110 006c 44F20103 		movw	r3, #16385
 27111              	.LVL2140:
 933:src/xeq.c     **** }
 27112              		.loc 1 933 24 view .LVU7175
 27113              	.LBE3515:
 27114              	.LBE3514:
5995:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 27115              		.loc 1 5995 6 view .LVU7176
 27116 0070 1340     		ands	r3, r3, r2
 27117 0072 B3F5804F 		cmp	r3, #16384
 27118 0076 07D0     		beq	.L1954
 27119 0078 1B4E     		ldr	r6, .L1955+8
 27120 007a D3E7     		b	.L1944
 27121              	.LVL2141:
 27122              	.L1951:
5990:src/xeq.c     **** 		return;
 27123              		.loc 1 5990 3 is_stmt 1 view .LVU7177
 27124 007c 0021     		movs	r1, #0
 27125 007e 6520     		movs	r0, #101
 27126              	.LVL2142:
5990:src/xeq.c     **** 		return;
 27127              		.loc 1 5990 3 is_stmt 0 view .LVU7178
 27128 0080 FFF7FEFF 		bl	do_tst
 27129              	.LVL2143:
5991:src/xeq.c     **** 	}
 27130              		.loc 1 5991 3 is_stmt 1 view .LVU7179
 27131              		.loc 1 6020 1 is_stmt 0 view .LVU7180
 27132 0084 38B0     		add	sp, sp, #224
 27133              		.cfi_remember_state
 27134              		.cfi_def_cfa_offset 16
 27135              		@ sp needed
 27136 0086 70BD     		pop	{r4, r5, r6, pc}
 27137              	.LVL2144:
 27138              	.L1954:
ARM GAS  /tmp/ccjeMhND.s 			page 697


 27139              		.cfi_restore_state
5996:src/xeq.c     **** 		else
 27140              		.loc 1 5996 4 is_stmt 1 view .LVU7181
5996:src/xeq.c     **** 		else
 27141              		.loc 1 5996 27 is_stmt 0 view .LVU7182
 27142 0088 184B     		ldr	r3, .L1955+12
5996:src/xeq.c     **** 		else
 27143              		.loc 1 5996 57 view .LVU7183
 27144 008a 194E     		ldr	r6, .L1955+16
5996:src/xeq.c     **** 		else
 27145              		.loc 1 5996 27 view .LVU7184
 27146 008c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
5996:src/xeq.c     **** 		else
 27147              		.loc 1 5996 57 view .LVU7185
 27148 008e 194A     		ldr	r2, .L1955+20
 27149 0090 03F08803 		and	r3, r3, #136
 27150 0094 802B     		cmp	r3, #128
 27151 0096 08BF     		it	eq
 27152 0098 1646     		moveq	r6, r2
 27153 009a C3E7     		b	.L1944
 27154              	.LVL2145:
 27155              	.L1952:
6006:src/xeq.c     **** 			res = specials;
 27156              		.loc 1 6006 3 is_stmt 1 view .LVU7186
6006:src/xeq.c     **** 			res = specials;
 27157              		.loc 1 6006 30 is_stmt 0 view .LVU7187
 27158 009c 9DF87C30 		ldrb	r3, [sp, #124]	@ zero_extendqisi2
 27159 00a0 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 27160 00a4 1343     		orrs	r3, r3, r2
 27161 00a6 13F0700F 		tst	r3, #112
 27162 00aa D8D1     		bne	.L1945
6009:src/xeq.c     **** 			cmplxR(&x, &a, &b);
 27163              		.loc 1 6009 4 is_stmt 1 view .LVU7188
 27164 00ac 02AB     		add	r3, sp, #8
 27165 00ae 0193     		str	r3, [sp, #4]
 27166 00b0 1DAB     		add	r3, sp, #116
 27167 00b2 0093     		str	r3, [sp]
 27168 00b4 2FA9     		add	r1, sp, #188
 27169 00b6 14AB     		add	r3, sp, #80
 27170 00b8 26A8     		add	r0, sp, #152
 27171 00ba 0BAA     		add	r2, sp, #44
 27172 00bc FFF7FEFF 		bl	cmplxSubtract
 27173              	.LVL2146:
6010:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
 27174              		.loc 1 6010 4 view .LVU7189
 27175 00c0 2FAA     		add	r2, sp, #188
 27176 00c2 26A9     		add	r1, sp, #152
 27177 00c4 0BA8     		add	r0, sp, #44
 27178 00c6 FFF7FEFF 		bl	cmplxR
 27179              	.LVL2147:
6011:src/xeq.c     **** 		}
 27180              		.loc 1 6011 4 view .LVU7190
6011:src/xeq.c     **** 		}
 27181              		.loc 1 6011 10 is_stmt 0 view .LVU7191
 27182 00ca 3146     		mov	r1, r6
 27183 00cc 0BA8     		add	r0, sp, #44
 27184 00ce FFF7FEFF 		bl	dn_lt
ARM GAS  /tmp/ccjeMhND.s 			page 698


 27185              	.LVL2148:
 27186 00d2 0546     		mov	r5, r0
 27187              	.LVL2149:
6011:src/xeq.c     **** 		}
 27188              		.loc 1 6011 10 view .LVU7192
 27189 00d4 C3E7     		b	.L1945
 27190              	.LVL2150:
 27191              	.L1953:
6015:src/xeq.c     **** 		else
 27192              		.loc 1 6015 4 is_stmt 1 view .LVU7193
6015:src/xeq.c     **** 		else
 27193              		.loc 1 6015 10 is_stmt 0 view .LVU7194
 27194 00d6 FFF7FEFF 		bl	absolute_error
 27195              	.LVL2151:
 27196 00da 0546     		mov	r5, r0
 27197              	.LVL2152:
6015:src/xeq.c     **** 		else
 27198              		.loc 1 6015 10 view .LVU7195
 27199 00dc BFE7     		b	.L1945
 27200              	.L1956:
 27201 00de 00BF     		.align	2
 27202              	.L1955:
 27203 00e0 00000000 		.word	main_ram
 27204 00e4 00000000 		.word	.LANCHOR7
 27205 00e8 00000000 		.word	const_1e_14
 27206 00ec 00000000 		.word	XromParams
 27207 00f0 00000000 		.word	const_1e_32
 27208 00f4 00000000 		.word	const_1e_24
 27209              		.cfi_endproc
 27210              	.LFE263:
 27212              		.section	.text.cmdshuffle,"ax",%progbits
 27213              		.align	1
 27214              		.p2align 2,,3
 27215              		.global	cmdshuffle
 27216              		.syntax unified
 27217              		.thumb
 27218              		.thumb_func
 27219              		.fpu fpv4-sp-d16
 27221              	cmdshuffle:
 27222              	.LVL2153:
 27223              	.LFB264:
6021:src/xeq.c     **** 
6022:src/xeq.c     **** void cmdshuffle(unsigned int arg, enum rarg cmd) {
 27224              		.loc 1 6022 50 is_stmt 1 view -0
 27225              		.cfi_startproc
 27226              		@ args = 0, pretend = 0, frame = 64
 27227              		@ frame_needed = 0, uses_anonymous_args = 0
6023:src/xeq.c     **** 	REGISTER xyzt[4];
 27228              		.loc 1 6023 2 view .LVU7197
6024:src/xeq.c     **** 	int i;
 27229              		.loc 1 6024 2 view .LVU7198
6025:src/xeq.c     **** 
6026:src/xeq.c     **** 	set_lift();
 27230              		.loc 1 6026 2 view .LVU7199
 27231              	.LBB3516:
 27232              	.LBI3516:
 748:src/xeq.c     ****     State2.state_lift = 1;
ARM GAS  /tmp/ccjeMhND.s 			page 699


 27233              		.loc 1 748 6 view .LVU7200
 27234              	.LBB3517:
 749:src/xeq.c     **** }
 27235              		.loc 1 749 5 view .LVU7201
 27236              	.LBE3517:
 27237              	.LBE3516:
6022:src/xeq.c     **** 	REGISTER xyzt[4];
 27238              		.loc 1 6022 50 is_stmt 0 view .LVU7202
 27239 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 27240              		.cfi_def_cfa_offset 24
 27241              		.cfi_offset 4, -24
 27242              		.cfi_offset 5, -20
 27243              		.cfi_offset 6, -16
 27244              		.cfi_offset 7, -12
 27245              		.cfi_offset 8, -8
 27246              		.cfi_offset 14, -4
 27247              	.LBB3522:
 27248              	.LBB3518:
 749:src/xeq.c     **** }
 27249              		.loc 1 749 23 view .LVU7203
 27250 0004 1F4A     		ldr	r2, .L1967
 27251 0006 204E     		ldr	r6, .L1967+4
 27252 0008 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 27253              	.LBE3518:
 27254              	.LBE3522:
6022:src/xeq.c     **** 	REGISTER xyzt[4];
 27255              		.loc 1 6022 50 view .LVU7204
 27256 000a 90B0     		sub	sp, sp, #64
 27257              		.cfi_def_cfa_offset 88
 27258              	.LBB3523:
 27259              	.LBB3519:
 749:src/xeq.c     **** }
 27260              		.loc 1 749 23 view .LVU7205
 27261 000c 43F04003 		orr	r3, r3, #64
 27262              	.LBE3519:
 27263              	.LBE3523:
6022:src/xeq.c     **** 	REGISTER xyzt[4];
 27264              		.loc 1 6022 50 view .LVU7206
 27265 0010 0546     		mov	r5, r0
 27266              	.LBB3524:
 27267              	.LBB3520:
 749:src/xeq.c     **** }
 27268              		.loc 1 749 23 view .LVU7207
 27269 0012 D375     		strb	r3, [r2, #23]
 27270              	.LBE3520:
 27271              	.LBE3524:
6027:src/xeq.c     **** 	for (i=0; i<4; i++)
 27272              		.loc 1 6027 2 is_stmt 1 view .LVU7208
 27273              	.LVL2154:
 27274              		.loc 1 6027 12 view .LVU7209
 27275 0014 6F46     		mov	r7, sp
 27276              	.LBB3525:
 27277              	.LBB3521:
 749:src/xeq.c     **** }
 27278              		.loc 1 749 23 is_stmt 0 view .LVU7210
 27279 0016 6424     		movs	r4, #100
 27280              	.LBE3521:
ARM GAS  /tmp/ccjeMhND.s 			page 700


 27281              	.LBE3525:
 27282              	.LBB3526:
 27283              	.LBB3527:
 27284              	.LBB3528:
 27285              	.LBB3529:
 933:src/xeq.c     **** }
 27286              		.loc 1 933 24 view .LVU7211
 27287 0018 44F20108 		movw	r8, #16385
 27288              	.LVL2155:
 27289              	.L1959:
 933:src/xeq.c     **** }
 27290              		.loc 1 933 24 view .LVU7212
 27291              	.LBE3529:
 27292              	.LBE3528:
 27293              	.LBE3527:
 27294              	.LBE3526:
6028:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 27295              		.loc 1 6028 3 is_stmt 1 discriminator 3 view .LVU7213
 27296              	.LBB3536:
 27297              	.LBI3536:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27298              		.loc 1 709 11 discriminator 3 view .LVU7214
 27299              	.LBB3537:
 710:src/xeq.c     **** }
 27300              		.loc 1 710 2 discriminator 3 view .LVU7215
 710:src/xeq.c     **** }
 27301              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU7216
 27302 001c 2046     		mov	r0, r4
 27303 001e FFF7FEFF 		bl	get_reg_n
 27304              	.LVL2156:
 710:src/xeq.c     **** }
 27305              		.loc 1 710 9 discriminator 3 view .LVU7217
 27306              	.LBE3537:
 27307              	.LBE3536:
 27308              	.LBB3539:
 27309              	.LBB3534:
 27310              	.LBB3532:
 27311              	.LBB3530:
 933:src/xeq.c     **** }
 27312              		.loc 1 933 24 discriminator 3 view .LVU7218
 27313 0022 3368     		ldr	r3, [r6]
 27314 0024 B3F8E837 		ldrh	r3, [r3, #2024]
 27315              	.LBE3530:
 27316              	.LBE3532:
 718:src/xeq.c     **** }
 27317              		.loc 1 718 2 discriminator 3 view .LVU7219
 27318 0028 08EA0303 		and	r3, r8, r3
 27319 002c B3F5804F 		cmp	r3, #16384
 27320              	.LBE3534:
 27321              	.LBE3539:
 27322              	.LBB3540:
 27323              	.LBB3538:
 710:src/xeq.c     **** }
 27324              		.loc 1 710 9 discriminator 3 view .LVU7220
 27325 0030 0146     		mov	r1, r0
 27326              	.LVL2157:
 710:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 701


 27327              		.loc 1 710 9 discriminator 3 view .LVU7221
 27328              	.LBE3538:
 27329              	.LBE3540:
 27330              	.LBB3541:
 27331              	.LBI3526:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 27332              		.loc 1 717 6 is_stmt 1 discriminator 3 view .LVU7222
 27333              	.LBB3535:
 718:src/xeq.c     **** }
 27334              		.loc 1 718 2 discriminator 3 view .LVU7223
 27335              	.LBB3533:
 27336              	.LBI3528:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27337              		.loc 1 932 5 discriminator 3 view .LVU7224
 27338              	.LBB3531:
 933:src/xeq.c     **** }
 27339              		.loc 1 933 2 discriminator 3 view .LVU7225
 27340              	.LBE3531:
 27341              	.LBE3533:
 718:src/xeq.c     **** }
 27342              		.loc 1 718 2 is_stmt 0 discriminator 3 view .LVU7226
 27343 0032 0CBF     		ite	eq
 27344 0034 1022     		moveq	r2, #16
 27345 0036 0822     		movne	r2, #8
 27346 0038 3846     		mov	r0, r7
 27347              	.LVL2158:
 718:src/xeq.c     **** }
 27348              		.loc 1 718 2 discriminator 3 view .LVU7227
 27349 003a 0134     		adds	r4, r4, #1
 27350              	.LVL2159:
 718:src/xeq.c     **** }
 27351              		.loc 1 718 2 discriminator 3 view .LVU7228
 27352 003c FFF7FEFF 		bl	xcopy
 27353              	.LVL2160:
 718:src/xeq.c     **** }
 27354              		.loc 1 718 2 discriminator 3 view .LVU7229
 27355              	.LBE3535:
 27356              	.LBE3541:
6027:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 27357              		.loc 1 6027 17 is_stmt 1 discriminator 3 view .LVU7230
6027:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 27358              		.loc 1 6027 12 discriminator 3 view .LVU7231
6027:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 27359              		.loc 1 6027 2 is_stmt 0 discriminator 3 view .LVU7232
 27360 0040 682C     		cmp	r4, #104
 27361 0042 07F11007 		add	r7, r7, #16
 27362 0046 E9D1     		bne	.L1959
 27363 0048 6424     		movs	r4, #100
 27364              	.LBB3542:
 27365              	.LBB3543:
 27366              	.LBB3544:
 27367              	.LBB3545:
 933:src/xeq.c     **** }
 27368              		.loc 1 933 24 view .LVU7233
 27369 004a 44F20107 		movw	r7, #16385
 27370              	.L1961:
 27371              	.LVL2161:
ARM GAS  /tmp/ccjeMhND.s 			page 702


 933:src/xeq.c     **** }
 27372              		.loc 1 933 24 view .LVU7234
 27373              	.LBE3545:
 27374              	.LBE3544:
 27375              	.LBE3543:
 27376              	.LBE3542:
6029:src/xeq.c     **** 
6030:src/xeq.c     **** 	for (i=0; i<4; i++) {
6031:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27377              		.loc 1 6031 3 is_stmt 1 view .LVU7235
 27378              	.LBB3552:
 27379              	.LBI3552:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27380              		.loc 1 709 11 view .LVU7236
 27381              	.LBB3553:
 710:src/xeq.c     **** }
 27382              		.loc 1 710 2 view .LVU7237
 710:src/xeq.c     **** }
 27383              		.loc 1 710 9 is_stmt 0 view .LVU7238
 27384 004e 2046     		mov	r0, r4
 27385 0050 FFF7FEFF 		bl	get_reg_n
 27386              	.LVL2162:
 710:src/xeq.c     **** }
 27387              		.loc 1 710 9 view .LVU7239
 27388              	.LBE3553:
 27389              	.LBE3552:
 27390              	.LBB3554:
 27391              	.LBB3550:
 27392              	.LBB3548:
 27393              	.LBB3546:
 933:src/xeq.c     **** }
 27394              		.loc 1 933 24 view .LVU7240
 27395 0054 3368     		ldr	r3, [r6]
 27396 0056 B3F8E837 		ldrh	r3, [r3, #2024]
 27397              	.LBE3546:
 27398              	.LBE3548:
 718:src/xeq.c     **** }
 27399              		.loc 1 718 2 view .LVU7241
 27400 005a 3B40     		ands	r3, r3, r7
 27401 005c B3F5804F 		cmp	r3, #16384
 27402              	.LBE3550:
 27403              	.LBE3554:
 27404              		.loc 1 6031 36 view .LVU7242
 27405 0060 05F00301 		and	r1, r5, #3
 27406              	.LVL2163:
 27407              	.LBB3555:
 27408              	.LBI3542:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 27409              		.loc 1 717 6 is_stmt 1 view .LVU7243
 27410              	.LBB3551:
 718:src/xeq.c     **** }
 27411              		.loc 1 718 2 view .LVU7244
 27412              	.LBB3549:
 27413              	.LBI3544:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27414              		.loc 1 932 5 view .LVU7245
 27415              	.LBB3547:
ARM GAS  /tmp/ccjeMhND.s 			page 703


 933:src/xeq.c     **** }
 27416              		.loc 1 933 2 view .LVU7246
 27417              	.LBE3547:
 27418              	.LBE3549:
 718:src/xeq.c     **** }
 27419              		.loc 1 718 2 is_stmt 0 view .LVU7247
 27420 0064 0CBF     		ite	eq
 27421 0066 1022     		moveq	r2, #16
 27422 0068 0822     		movne	r2, #8
 27423 006a 0134     		adds	r4, r4, #1
 27424              	.LVL2164:
 718:src/xeq.c     **** }
 27425              		.loc 1 718 2 view .LVU7248
 27426 006c 0DEB0111 		add	r1, sp, r1, lsl #4
 27427              	.LVL2165:
 718:src/xeq.c     **** }
 27428              		.loc 1 718 2 view .LVU7249
 27429 0070 FFF7FEFF 		bl	xcopy
 27430              	.LVL2166:
 718:src/xeq.c     **** }
 27431              		.loc 1 718 2 view .LVU7250
 27432              	.LBE3551:
 27433              	.LBE3555:
6032:src/xeq.c     **** 		arg >>= 2;
 27434              		.loc 1 6032 3 is_stmt 1 view .LVU7251
6030:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27435              		.loc 1 6030 2 is_stmt 0 view .LVU7252
 27436 0074 682C     		cmp	r4, #104
 27437              		.loc 1 6032 7 view .LVU7253
 27438 0076 4FEA9505 		lsr	r5, r5, #2
 27439              	.LVL2167:
6030:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27440              		.loc 1 6030 17 is_stmt 1 view .LVU7254
6030:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27441              		.loc 1 6030 12 view .LVU7255
6030:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27442              		.loc 1 6030 2 is_stmt 0 view .LVU7256
 27443 007a E8D1     		bne	.L1961
6033:src/xeq.c     **** 	}
6034:src/xeq.c     **** }
 27444              		.loc 1 6034 1 view .LVU7257
 27445 007c 10B0     		add	sp, sp, #64
 27446              		.cfi_def_cfa_offset 24
 27447              		@ sp needed
 27448 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 27449              	.LVL2168:
 27450              	.L1968:
 27451              		.loc 1 6034 1 view .LVU7258
 27452 0082 00BF     		.align	2
 27453              	.L1967:
 27454 0084 00000000 		.word	StateWhileOn
 27455 0088 00000000 		.word	main_ram
 27456              		.cfi_endproc
 27457              	.LFE264:
 27459              		.section	.text.cmdmode,"ax",%progbits
 27460              		.align	1
 27461              		.p2align 2,,3
ARM GAS  /tmp/ccjeMhND.s 			page 704


 27462              		.global	cmdmode
 27463              		.syntax unified
 27464              		.thumb
 27465              		.thumb_func
 27466              		.fpu fpv4-sp-d16
 27468              	cmdmode:
 27469              	.LVL2169:
 27470              	.LFB265:
6035:src/xeq.c     **** 
6036:src/xeq.c     **** /*
6037:src/xeq.c     ****  *  Toggle UState mode bits from XROM
6038:src/xeq.c     ****  */
6039:src/xeq.c     **** void cmdmode(unsigned int arg, enum rarg cmd) {
 27471              		.loc 1 6039 47 is_stmt 1 view -0
 27472              		.cfi_startproc
 27473              		@ args = 0, pretend = 0, frame = 0
 27474              		@ frame_needed = 0, uses_anonymous_args = 0
 27475              		@ link register save eliminated.
6040:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 27476              		.loc 1 6040 2 view .LVU7260
6039:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 27477              		.loc 1 6039 47 is_stmt 0 view .LVU7261
 27478 0000 30B4     		push	{r4, r5}
 27479              		.cfi_def_cfa_offset 8
 27480              		.cfi_offset 4, -8
 27481              		.cfi_offset 5, -4
6041:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 27482              		.loc 1 6041 62 view .LVU7262
 27483 0002 134D     		ldr	r5, .L1974
6040:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 27484              		.loc 1 6040 35 view .LVU7263
 27485 0004 0122     		movs	r2, #1
 27486 0006 A0F12003 		sub	r3, r0, #32
 27487 000a C0F12004 		rsb	r4, r0, #32
 27488 000e 02FA03F3 		lsl	r3, r2, r3
 27489 0012 22FA04F4 		lsr	r4, r2, r4
 27490 0016 8240     		lsls	r2, r2, r0
 27491              		.loc 1 6041 62 view .LVU7264
 27492 0018 2868     		ldr	r0, [r5]
 27493              	.LVL2170:
6042:src/xeq.c     **** 
6043:src/xeq.c     **** 	if (cmd == RARG_MODE_SET)
 27494              		.loc 1 6043 5 view .LVU7265
 27495 001a 8129     		cmp	r1, #129
6044:src/xeq.c     **** 		*mode |= bit;
 27496              		.loc 1 6044 9 view .LVU7266
 27497 001c D0F8E457 		ldr	r5, [r0, #2020]
6040:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 27498              		.loc 1 6040 35 view .LVU7267
 27499 0020 43EA0403 		orr	r3, r3, r4
 27500              	.LVL2171:
6041:src/xeq.c     **** 
 27501              		.loc 1 6041 2 is_stmt 1 view .LVU7268
6043:src/xeq.c     **** 		*mode |= bit;
 27502              		.loc 1 6043 2 view .LVU7269
 27503              		.loc 1 6044 9 is_stmt 0 view .LVU7270
 27504 0024 00F2E471 		addw	r1, r0, #2020
ARM GAS  /tmp/ccjeMhND.s 			page 705


 27505              	.LVL2172:
6043:src/xeq.c     **** 		*mode |= bit;
 27506              		.loc 1 6043 5 view .LVU7271
 27507 0028 0AD0     		beq	.L1973
6045:src/xeq.c     **** 	else
6046:src/xeq.c     **** 		*mode &= ~bit;
 27508              		.loc 1 6046 3 is_stmt 1 view .LVU7272
 27509              		.loc 1 6046 9 is_stmt 0 view .LVU7273
 27510 002a D0F8E847 		ldr	r4, [r0, #2024]
 27511 002e 25EA0202 		bic	r2, r5, r2
 27512              	.LVL2173:
 27513              		.loc 1 6046 9 view .LVU7274
 27514 0032 24EA0303 		bic	r3, r4, r3
 27515              	.LVL2174:
 27516              		.loc 1 6046 9 view .LVU7275
 27517 0036 C0F8E427 		str	r2, [r0, #2020]
6047:src/xeq.c     **** }
 27518              		.loc 1 6047 1 view .LVU7276
 27519 003a 30BC     		pop	{r4, r5}
 27520              		.cfi_remember_state
 27521              		.cfi_restore 5
 27522              		.cfi_restore 4
 27523              		.cfi_def_cfa_offset 0
 27524 003c 4B60     		str	r3, [r1, #4]
 27525 003e 7047     		bx	lr
 27526              	.LVL2175:
 27527              	.L1973:
 27528              		.cfi_restore_state
6044:src/xeq.c     **** 	else
 27529              		.loc 1 6044 3 is_stmt 1 view .LVU7277
6044:src/xeq.c     **** 	else
 27530              		.loc 1 6044 9 is_stmt 0 view .LVU7278
 27531 0040 4C68     		ldr	r4, [r1, #4]
 27532 0042 2A43     		orrs	r2, r2, r5
 27533              	.LVL2176:
6044:src/xeq.c     **** 	else
 27534              		.loc 1 6044 9 view .LVU7279
 27535 0044 2343     		orrs	r3, r3, r4
 27536              	.LVL2177:
6044:src/xeq.c     **** 	else
 27537              		.loc 1 6044 9 view .LVU7280
 27538 0046 C0F8E427 		str	r2, [r0, #2020]
 27539              		.loc 1 6047 1 view .LVU7281
 27540 004a 30BC     		pop	{r4, r5}
 27541              		.cfi_restore 5
 27542              		.cfi_restore 4
 27543              		.cfi_def_cfa_offset 0
 27544 004c 4B60     		str	r3, [r1, #4]
 27545 004e 7047     		bx	lr
 27546              	.L1975:
 27547              		.align	2
 27548              	.L1974:
 27549 0050 00000000 		.word	main_ram
 27550              		.cfi_endproc
 27551              	.LFE265:
 27553              		.section	.text.cmdlpop,"ax",%progbits
 27554              		.align	1
ARM GAS  /tmp/ccjeMhND.s 			page 706


 27555              		.p2align 2,,3
 27556              		.global	cmdlpop
 27557              		.syntax unified
 27558              		.thumb
 27559              		.thumb_func
 27560              		.fpu fpv4-sp-d16
 27562              	cmdlpop:
 27563              	.LVL2178:
 27564              	.LFB266:
6048:src/xeq.c     **** 
6049:src/xeq.c     **** /*
6050:src/xeq.c     ****  *  Undo the effect of LOCL by popping the current local frame.
6051:src/xeq.c     ****  *  Needs to be executed from the same level that has established the frame.
6052:src/xeq.c     ****  */
6053:src/xeq.c     **** void cmdlpop(enum nilop op) {
 27565              		.loc 1 6053 29 is_stmt 1 view -0
 27566              		.cfi_startproc
 27567              		@ args = 0, pretend = 0, frame = 0
 27568              		@ frame_needed = 0, uses_anonymous_args = 0
6054:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 27569              		.loc 1 6054 2 view .LVU7283
6053:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 27570              		.loc 1 6053 29 is_stmt 0 view .LVU7284
 27571 0000 10B5     		push	{r4, lr}
 27572              		.cfi_def_cfa_offset 8
 27573              		.cfi_offset 4, -8
 27574              		.cfi_offset 14, -4
 27575              		.loc 1 6054 6 view .LVU7285
 27576 0002 0C4C     		ldr	r4, .L1980
 27577 0004 2368     		ldr	r3, [r4]
 27578 0006 B3F9DE17 		ldrsh	r1, [r3, #2014]
 27579              		.loc 1 6054 5 view .LVU7286
 27580 000a B3F9E227 		ldrsh	r2, [r3, #2018]
 27581 000e 8A42     		cmp	r2, r1
 27582 0010 05D0     		beq	.L1977
6055:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 27583              		.loc 1 6055 3 is_stmt 1 view .LVU7287
 27584              	.LVL2179:
 27585              	.LBB3560:
 27586              	.LBI3560:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27587              		.loc 1 537 5 view .LVU7288
 27588              	.LBB3561:
 538:src/xeq.c     **** 		Error = e;
 27589              		.loc 1 538 2 view .LVU7289
 538:src/xeq.c     **** 		Error = e;
 27590              		.loc 1 538 12 is_stmt 0 view .LVU7290
 27591 0012 094B     		ldr	r3, .L1980+4
 538:src/xeq.c     **** 		Error = e;
 27592              		.loc 1 538 5 view .LVU7291
 27593 0014 1A68     		ldr	r2, [r3]
 27594 0016 0AB9     		cbnz	r2, .L1976
 27595              	.LVL2180:
 27596              	.LBB3562:
 27597              	.LBI3562:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27598              		.loc 1 537 5 is_stmt 1 view .LVU7292
ARM GAS  /tmp/ccjeMhND.s 			page 707


 27599              	.LBB3563:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 27600              		.loc 1 539 3 view .LVU7293
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 27601              		.loc 1 539 9 is_stmt 0 view .LVU7294
 27602 0018 0722     		movs	r2, #7
 27603 001a 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 27604              		.loc 1 540 3 is_stmt 1 view .LVU7295
 27605              	.LVL2181:
 27606              	.L1976:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 27607              		.loc 1 540 3 is_stmt 0 view .LVU7296
 27608              	.LBE3563:
 27609              	.LBE3562:
 27610              	.LBE3561:
 27611              	.LBE3560:
6056:src/xeq.c     **** 		return;
6057:src/xeq.c     **** 	}
6058:src/xeq.c     **** 	RetStkPtr = LocalRegs;
6059:src/xeq.c     **** 	retstk_up();
6060:src/xeq.c     **** 	--RetStkPtr;
6061:src/xeq.c     **** }
 27612              		.loc 1 6061 1 view .LVU7297
 27613 001c 10BD     		pop	{r4, pc}
 27614              	.LVL2182:
 27615              	.L1977:
6058:src/xeq.c     **** 	retstk_up();
 27616              		.loc 1 6058 2 is_stmt 1 view .LVU7298
6058:src/xeq.c     **** 	retstk_up();
 27617              		.loc 1 6058 12 is_stmt 0 view .LVU7299
 27618 001e A3F8E227 		strh	r2, [r3, #2018]	@ movhi
6059:src/xeq.c     **** 	--RetStkPtr;
 27619              		.loc 1 6059 2 is_stmt 1 view .LVU7300
 27620 0022 FFF7FEFF 		bl	retstk_up
 27621              	.LVL2183:
6060:src/xeq.c     **** }
 27622              		.loc 1 6060 2 view .LVU7301
6060:src/xeq.c     **** }
 27623              		.loc 1 6060 4 is_stmt 0 view .LVU7302
 27624 0026 2268     		ldr	r2, [r4]
6060:src/xeq.c     **** }
 27625              		.loc 1 6060 2 view .LVU7303
 27626 0028 B2F8E237 		ldrh	r3, [r2, #2018]
 27627 002c 013B     		subs	r3, r3, #1
 27628 002e A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 27629              		.loc 1 6061 1 view .LVU7304
 27630 0032 10BD     		pop	{r4, pc}
 27631              	.L1981:
 27632              		.align	2
 27633              	.L1980:
 27634 0034 00000000 		.word	main_ram
 27635 0038 00000000 		.word	Error
 27636              		.cfi_endproc
 27637              	.LFE266:
 27639              		.section	.text.cmdregs,"ax",%progbits
 27640              		.align	1
ARM GAS  /tmp/ccjeMhND.s 			page 708


 27641              		.p2align 2,,3
 27642              		.global	cmdregs
 27643              		.syntax unified
 27644              		.thumb
 27645              		.thumb_func
 27646              		.fpu fpv4-sp-d16
 27648              	cmdregs:
 27649              	.LVL2184:
 27650              	.LFB267:
6062:src/xeq.c     **** 
6063:src/xeq.c     **** /*
6064:src/xeq.c     ****  *  Reduce the number of global registers in favour of local data on the return stack
6065:src/xeq.c     ****  */
6066:src/xeq.c     **** void cmdregs(unsigned int arg, enum rarg op) {
 27651              		.loc 1 6066 46 is_stmt 1 view -0
 27652              		.cfi_startproc
 27653              		@ args = 0, pretend = 0, frame = 0
 27654              		@ frame_needed = 0, uses_anonymous_args = 0
6067:src/xeq.c     **** 	int distance;
 27655              		.loc 1 6067 2 view .LVU7306
6068:src/xeq.c     **** 	int length;
 27656              		.loc 1 6068 2 view .LVU7307
6069:src/xeq.c     **** 
6070:src/xeq.c     **** 	if (is_dblmode()) {
 27657              		.loc 1 6070 2 view .LVU7308
 27658              	.LBB3570:
 27659              	.LBI3570:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27660              		.loc 1 932 5 view .LVU7309
 27661              	.LBB3571:
 933:src/xeq.c     **** }
 27662              		.loc 1 933 2 view .LVU7310
 27663              	.LBE3571:
 27664              	.LBE3570:
6066:src/xeq.c     **** 	int distance;
 27665              		.loc 1 6066 46 is_stmt 0 view .LVU7311
 27666 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 27667              		.cfi_def_cfa_offset 24
 27668              		.cfi_offset 4, -24
 27669              		.cfi_offset 5, -20
 27670              		.cfi_offset 6, -16
 27671              		.cfi_offset 7, -12
 27672              		.cfi_offset 8, -8
 27673              		.cfi_offset 14, -4
 27674              	.LBB3573:
 27675              	.LBB3572:
 933:src/xeq.c     **** }
 27676              		.loc 1 933 12 view .LVU7312
 27677 0004 294F     		ldr	r7, .L1998
 27678 0006 3A68     		ldr	r2, [r7]
 933:src/xeq.c     **** }
 27679              		.loc 1 933 24 view .LVU7313
 27680 0008 B2F8E817 		ldrh	r1, [r2, #2024]
 27681              	.LVL2185:
 933:src/xeq.c     **** }
 27682              		.loc 1 933 24 view .LVU7314
 27683 000c 44F20103 		movw	r3, #16385
ARM GAS  /tmp/ccjeMhND.s 			page 709


 27684              	.LBE3572:
 27685              	.LBE3573:
 27686              		.loc 1 6070 5 view .LVU7315
 27687 0010 0B40     		ands	r3, r3, r1
 27688 0012 B3F5804F 		cmp	r3, #16384
6066:src/xeq.c     **** 	int distance;
 27689              		.loc 1 6066 46 view .LVU7316
 27690 0016 0446     		mov	r4, r0
 27691              		.loc 1 6070 5 view .LVU7317
 27692 0018 36D0     		beq	.L1994
6071:src/xeq.c     **** 		// DP register length 16 bytes
6072:src/xeq.c     **** 		length = (arg << 4); 
6073:src/xeq.c     **** 		// We need additional room for lettered registers
6074:src/xeq.c     **** 		arg = (arg << 1) + STACK_SIZE + EXTRA_REG;
6075:src/xeq.c     **** 	}
6076:src/xeq.c     **** 	else {
6077:src/xeq.c     **** 		if (UState.mode_double && arg < STACK_SIZE + EXTRA_REG) {
 27693              		.loc 1 6077 3 is_stmt 1 view .LVU7318
 27694              		.loc 1 6077 7 is_stmt 0 view .LVU7319
 27695 001a 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 27696              		.loc 1 6077 6 view .LVU7320
 27697 001e 5B06     		lsls	r3, r3, #25
 27698 0020 29D4     		bmi	.L1995
 27699              	.L1985:
6078:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
6079:src/xeq.c     **** 			// We must not release the space needed for the DP lettered registers
6080:src/xeq.c     **** 			report_err(ERR_RANGE);
6081:src/xeq.c     **** 			return;
6082:src/xeq.c     **** 		}
6083:src/xeq.c     **** 		// register length 8 bytes
6084:src/xeq.c     **** 		length = (arg << 3);
 27700              		.loc 1 6084 3 is_stmt 1 view .LVU7321
 27701              		.loc 1 6084 17 is_stmt 0 view .LVU7322
 27702 0022 4FEAC408 		lsl	r8, r4, #3
 27703              	.LVL2186:
 27704              	.L1984:
6085:src/xeq.c     **** 	}
6086:src/xeq.c     **** 	distance = NumRegs - arg;
 27705              		.loc 1 6086 2 is_stmt 1 view .LVU7323
 27706              		.loc 1 6086 13 is_stmt 0 view .LVU7324
 27707 0026 92F8CF57 		ldrb	r5, [r2, #1999]	@ zero_extendqisi2
 27708              		.loc 1 6086 21 view .LVU7325
 27709 002a 2D1B     		subs	r5, r5, r4
 27710              	.LVL2187:
6087:src/xeq.c     **** 	
6088:src/xeq.c     **** 	// Move return stack, check for room
6089:src/xeq.c     **** 	if (move_retstk(distance << 2))
 27711              		.loc 1 6089 2 is_stmt 1 view .LVU7326
 27712              		.loc 1 6089 6 is_stmt 0 view .LVU7327
 27713 002c A800     		lsls	r0, r5, #2
 27714 002e FFF7FEFF 		bl	move_retstk
 27715              	.LVL2188:
 27716              		.loc 1 6089 5 view .LVU7328
 27717 0032 0646     		mov	r6, r0
 27718 0034 08B1     		cbz	r0, .L1996
 27719              	.LVL2189:
 27720              	.L1982:
ARM GAS  /tmp/ccjeMhND.s 			page 710


6090:src/xeq.c     **** 		return;
6091:src/xeq.c     **** 	
6092:src/xeq.c     **** 	// Move register contents, including the statistics registers
6093:src/xeq.c     **** 	xcopy((unsigned short *)(Regs + TOPREALREG - arg)     - SizeStatRegs,
6094:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
6095:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
6096:src/xeq.c     **** 
6097:src/xeq.c     **** 	// Clear the left space
6098:src/xeq.c     **** 	if (distance < 0)
6099:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
6100:src/xeq.c     **** 	NumRegs = arg;
6101:src/xeq.c     **** }
 27721              		.loc 1 6101 1 view .LVU7329
 27722 0036 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 27723              	.LVL2190:
 27724              	.L1996:
6093:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27725              		.loc 1 6093 2 is_stmt 1 view .LVU7330
6093:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27726              		.loc 1 6093 27 is_stmt 0 view .LVU7331
 27727 003a 3B68     		ldr	r3, [r7]
6093:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27728              		.loc 1 6093 56 view .LVU7332
 27729 003c 1C4A     		ldr	r2, .L1998+4
6094:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 27730              		.loc 1 6094 45 view .LVU7333
 27731 003e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
6093:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27732              		.loc 1 6093 56 view .LVU7334
 27733 0042 1268     		ldr	r2, [r2]
6094:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 27734              		.loc 1 6094 45 view .LVU7335
 27735 0044 C1F16401 		rsb	r1, r1, #100
6093:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27736              		.loc 1 6093 45 view .LVU7336
 27737 0048 C4F16400 		rsb	r0, r4, #100
6093:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27738              		.loc 1 6093 27 view .LVU7337
 27739 004c 03F58663 		add	r3, r3, #1072
6094:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 27740              		.loc 1 6094 56 view .LVU7338
 27741 0050 C2EB8101 		rsb	r1, r2, r1, lsl #2
6093:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27742              		.loc 1 6093 56 view .LVU7339
 27743 0054 C2EB8000 		rsb	r0, r2, r0, lsl #2
6093:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27744              		.loc 1 6093 2 view .LVU7340
 27745 0058 03EB4101 		add	r1, r3, r1, lsl #1
 27746 005c 08EB4202 		add	r2, r8, r2, lsl #1
 27747 0060 03EB4000 		add	r0, r3, r0, lsl #1
 27748 0064 FFF7FEFF 		bl	xcopy
 27749              	.LVL2191:
6098:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 27750              		.loc 1 6098 2 is_stmt 1 view .LVU7341
6098:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 27751              		.loc 1 6098 5 is_stmt 0 view .LVU7342
 27752 0068 002D     		cmp	r5, #0
ARM GAS  /tmp/ccjeMhND.s 			page 711


 27753 006a 13DB     		blt	.L1997
 27754              	.L1989:
6100:src/xeq.c     **** }
 27755              		.loc 1 6100 2 is_stmt 1 view .LVU7343
6100:src/xeq.c     **** }
 27756              		.loc 1 6100 10 is_stmt 0 view .LVU7344
 27757 006c 3B68     		ldr	r3, [r7]
 27758 006e 83F8CF47 		strb	r4, [r3, #1999]
 27759              		.loc 1 6101 1 view .LVU7345
 27760 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 27761              	.LVL2192:
 27762              	.L1995:
6077:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
 27763              		.loc 1 6077 26 discriminator 1 view .LVU7346
 27764 0076 0B28     		cmp	r0, #11
 27765 0078 D3D8     		bhi	.L1985
6080:src/xeq.c     **** 			return;
 27766              		.loc 1 6080 4 is_stmt 1 view .LVU7347
 27767              	.LVL2193:
 27768              	.LBB3574:
 27769              	.LBI3574:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27770              		.loc 1 537 5 view .LVU7348
 27771              	.LBB3575:
 538:src/xeq.c     **** 		Error = e;
 27772              		.loc 1 538 2 view .LVU7349
 538:src/xeq.c     **** 		Error = e;
 27773              		.loc 1 538 12 is_stmt 0 view .LVU7350
 27774 007a 0E4B     		ldr	r3, .L1998+8
 538:src/xeq.c     **** 		Error = e;
 27775              		.loc 1 538 5 view .LVU7351
 27776 007c 1A68     		ldr	r2, [r3]
 27777 007e 002A     		cmp	r2, #0
 27778 0080 D9D1     		bne	.L1982
 27779              	.LVL2194:
 27780              	.LBB3576:
 27781              	.LBI3576:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27782              		.loc 1 537 5 is_stmt 1 view .LVU7352
 27783              	.LBB3577:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 27784              		.loc 1 539 3 view .LVU7353
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 27785              		.loc 1 539 9 is_stmt 0 view .LVU7354
 27786 0082 0822     		movs	r2, #8
 27787 0084 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 27788              		.loc 1 540 3 is_stmt 1 view .LVU7355
 27789 0086 D6E7     		b	.L1982
 27790              	.LVL2195:
 27791              	.L1994:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 27792              		.loc 1 540 3 is_stmt 0 view .LVU7356
 27793              	.LBE3577:
 27794              	.LBE3576:
 27795              	.LBE3575:
 27796              	.LBE3574:
ARM GAS  /tmp/ccjeMhND.s 			page 712


6072:src/xeq.c     **** 		// We need additional room for lettered registers
 27797              		.loc 1 6072 3 is_stmt 1 view .LVU7357
6074:src/xeq.c     **** 	}
 27798              		.loc 1 6074 14 is_stmt 0 view .LVU7358
 27799 0088 4300     		lsls	r3, r0, #1
6072:src/xeq.c     **** 		// We need additional room for lettered registers
 27800              		.loc 1 6072 17 view .LVU7359
 27801 008a 4FEA0018 		lsl	r8, r0, #4
 27802              	.LVL2196:
6074:src/xeq.c     **** 	}
 27803              		.loc 1 6074 3 is_stmt 1 view .LVU7360
6074:src/xeq.c     **** 	}
 27804              		.loc 1 6074 7 is_stmt 0 view .LVU7361
 27805 008e 03F10C04 		add	r4, r3, #12
 27806              	.LVL2197:
6074:src/xeq.c     **** 	}
 27807              		.loc 1 6074 7 view .LVU7362
 27808 0092 C8E7     		b	.L1984
 27809              	.LVL2198:
 27810              	.L1997:
6099:src/xeq.c     **** 	NumRegs = arg;
 27811              		.loc 1 6099 3 is_stmt 1 view .LVU7363
6099:src/xeq.c     **** 	NumRegs = arg;
 27812              		.loc 1 6099 8 is_stmt 0 view .LVU7364
 27813 0094 3868     		ldr	r0, [r7]
6099:src/xeq.c     **** 	NumRegs = arg;
 27814              		.loc 1 6099 41 view .LVU7365
 27815 0096 6A42     		rsbs	r2, r5, #0
6099:src/xeq.c     **** 	NumRegs = arg;
 27816              		.loc 1 6099 26 view .LVU7366
 27817 0098 00EBC500 		add	r0, r0, r5, lsl #3
6099:src/xeq.c     **** 	NumRegs = arg;
 27818              		.loc 1 6099 3 view .LVU7367
 27819 009c 3146     		mov	r1, r6
 27820 009e D200     		lsls	r2, r2, #3
 27821 00a0 00F5EA60 		add	r0, r0, #1872
 27822 00a4 FFF7FEFF 		bl	xset
 27823              	.LVL2199:
 27824 00a8 E0E7     		b	.L1989
 27825              	.L1999:
 27826 00aa 00BF     		.align	2
 27827              	.L1998:
 27828 00ac 00000000 		.word	main_ram
 27829 00b0 00000000 		.word	SizeStatRegs
 27830 00b4 00000000 		.word	Error
 27831              		.cfi_endproc
 27832              	.LFE267:
 27834              		.section	.text.op_double,"ax",%progbits
 27835              		.align	1
 27836              		.p2align 2,,3
 27837              		.global	op_double
 27838              		.syntax unified
 27839              		.thumb
 27840              		.thumb_func
 27841              		.fpu fpv4-sp-d16
 27843              	op_double:
 27844              	.LVL2200:
ARM GAS  /tmp/ccjeMhND.s 			page 713


 27845              	.LFB213:
3878:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 27846              		.loc 1 3878 31 is_stmt 1 view -0
 27847              		.cfi_startproc
 27848              		@ args = 0, pretend = 0, frame = 40
 27849              		@ frame_needed = 0, uses_anonymous_args = 0
3879:src/xeq.c     **** 	const int intm = is_intmode();
 27850              		.loc 1 3879 2 view .LVU7369
3878:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 27851              		.loc 1 3878 31 is_stmt 0 view .LVU7370
 27852 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 27853              		.cfi_def_cfa_offset 24
 27854              		.cfi_offset 4, -24
 27855              		.cfi_offset 5, -20
 27856              		.cfi_offset 6, -16
 27857              		.cfi_offset 7, -12
 27858              		.cfi_offset 8, -8
 27859              		.cfi_offset 14, -4
3880:src/xeq.c     **** 	int i;
 27860              		.loc 1 3880 19 view .LVU7371
 27861 0004 454E     		ldr	r6, .L2028
 27862 0006 3368     		ldr	r3, [r6]
3883:src/xeq.c     **** 		// Mode switch
 27863              		.loc 1 3883 5 view .LVU7372
 27864 0008 A0F1B504 		sub	r4, r0, #181
3883:src/xeq.c     **** 		// Mode switch
 27865              		.loc 1 3883 19 view .LVU7373
 27866 000c 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
3880:src/xeq.c     **** 	int i;
 27867              		.loc 1 3880 19 view .LVU7374
 27868 0010 93F8E887 		ldrb	r8, [r3, #2024]	@ zero_extendqisi2
 27869              	.LVL2201:
3880:src/xeq.c     **** 	int i;
 27870              		.loc 1 3880 2 is_stmt 1 view .LVU7375
3883:src/xeq.c     **** 		// Mode switch
 27871              		.loc 1 3883 5 is_stmt 0 view .LVU7376
 27872 0014 B4FA84F4 		clz	r4, r4
 27873 0018 C2F38011 		ubfx	r1, r2, #6, #1
 27874 001c 6409     		lsrs	r4, r4, #5
 27875 001e 8C42     		cmp	r4, r1
3878:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 27876              		.loc 1 3878 31 view .LVU7377
 27877 0020 8AB0     		sub	sp, sp, #40
 27878              		.cfi_def_cfa_offset 64
3880:src/xeq.c     **** 	int i;
 27879              		.loc 1 3880 12 view .LVU7378
 27880 0022 08F00108 		and	r8, r8, #1
 27881              	.LVL2202:
3881:src/xeq.c     **** 
 27882              		.loc 1 3881 2 is_stmt 1 view .LVU7379
3883:src/xeq.c     **** 		// Mode switch
 27883              		.loc 1 3883 2 view .LVU7380
3883:src/xeq.c     **** 		// Mode switch
 27884              		.loc 1 3883 5 is_stmt 0 view .LVU7381
 27885 0026 41D0     		beq	.L2001
3885:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 27886              		.loc 1 3885 3 is_stmt 1 view .LVU7382
ARM GAS  /tmp/ccjeMhND.s 			page 714


3885:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 27887              		.loc 1 3885 6 is_stmt 0 view .LVU7383
 27888 0028 B528     		cmp	r0, #181
 27889 002a 4AD0     		beq	.L2026
3903:src/xeq.c     **** 				// Convert X to K to single precision
 27890              		.loc 1 3903 4 is_stmt 1 view .LVU7384
3903:src/xeq.c     **** 				// Convert X to K to single precision
 27891              		.loc 1 3903 7 is_stmt 0 view .LVU7385
 27892 002c B8F1000F 		cmp	r8, #0
 27893 0030 25D1     		bne	.L2009
 27894 0032 6F24     		movs	r4, #111
 27895 0034 01AF     		add	r7, sp, #4
 27896              	.LVL2203:
 27897              	.L2011:
3907:src/xeq.c     **** 			}
 27898              		.loc 1 3907 6 is_stmt 1 discriminator 3 view .LVU7386
3907:src/xeq.c     **** 			}
 27899              		.loc 1 3907 28 is_stmt 0 discriminator 3 view .LVU7387
 27900 0036 03F58663 		add	r3, r3, #1072
 27901              	.LBB3578:
 27902              	.LBB3579:
 710:src/xeq.c     **** }
 27903              		.loc 1 710 9 discriminator 3 view .LVU7388
 27904 003a 2046     		mov	r0, r4
 27905              	.LBE3579:
 27906              	.LBE3578:
3907:src/xeq.c     **** 			}
 27907              		.loc 1 3907 6 discriminator 3 view .LVU7389
 27908 003c 03EBC405 		add	r5, r3, r4, lsl #3
 27909              	.LVL2204:
 27910              	.LBB3581:
 27911              	.LBI3578:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27912              		.loc 1 709 11 is_stmt 1 discriminator 3 view .LVU7390
 27913              	.LBB3580:
 710:src/xeq.c     **** }
 27914              		.loc 1 710 2 discriminator 3 view .LVU7391
 710:src/xeq.c     **** }
 27915              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU7392
 27916 0040 FFF7FEFF 		bl	get_reg_n
 27917              	.LVL2205:
 710:src/xeq.c     **** }
 27918              		.loc 1 710 9 discriminator 3 view .LVU7393
 27919              	.LBE3580:
 27920              	.LBE3581:
 27921              	.LBB3582:
 27922              	.LBI3582:
 639:src/xeq.c     **** 	decNumber temp;
 27923              		.loc 1 639 6 is_stmt 1 discriminator 3 view .LVU7394
 27924              	.LBB3583:
 640:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 27925              		.loc 1 640 2 discriminator 3 view .LVU7395
 641:src/xeq.c     **** }
 27926              		.loc 1 641 2 discriminator 3 view .LVU7396
 641:src/xeq.c     **** }
 27927              		.loc 1 641 24 is_stmt 0 discriminator 3 view .LVU7397
 27928 0044 3946     		mov	r1, r7
ARM GAS  /tmp/ccjeMhND.s 			page 715


 27929 0046 FFF7FEFF 		bl	decimal128ToNumber
 27930              	.LVL2206:
 641:src/xeq.c     **** }
 27931              		.loc 1 641 24 discriminator 3 view .LVU7398
 27932 004a 013C     		subs	r4, r4, #1
 27933              	.LVL2207:
 641:src/xeq.c     **** }
 27934              		.loc 1 641 24 discriminator 3 view .LVU7399
 27935 004c 0146     		mov	r1, r0
 641:src/xeq.c     **** }
 27936              		.loc 1 641 2 discriminator 3 view .LVU7400
 27937 004e 2846     		mov	r0, r5
 27938 0050 FFF7FEFF 		bl	packed_from_number
 27939              	.LVL2208:
 641:src/xeq.c     **** }
 27940              		.loc 1 641 2 discriminator 3 view .LVU7401
 27941              	.LBE3583:
 27942              	.LBE3582:
3906:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 27943              		.loc 1 3906 50 is_stmt 1 discriminator 3 view .LVU7402
3906:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 27944              		.loc 1 3906 42 discriminator 3 view .LVU7403
3906:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 27945              		.loc 1 3906 5 is_stmt 0 discriminator 3 view .LVU7404
 27946 0054 632C     		cmp	r4, #99
 27947 0056 3368     		ldr	r3, [r6]
 27948 0058 EDD1     		bne	.L2011
3909:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 27949              		.loc 1 3909 4 is_stmt 1 view .LVU7405
3909:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 27950              		.loc 1 3909 23 is_stmt 0 view .LVU7406
 27951 005a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
3910:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 27952              		.loc 1 3910 7 view .LVU7407
 27953 005e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
3909:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 27954              		.loc 1 3909 23 view .LVU7408
 27955 0062 6FF38612 		bfc	r2, #6, #1
3910:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 27956              		.loc 1 3910 7 view .LVU7409
 27957 0066 6429     		cmp	r1, #100
3909:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 27958              		.loc 1 3909 23 view .LVU7410
 27959 0068 83F8E927 		strb	r2, [r3, #2025]
3910:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 27960              		.loc 1 3910 4 is_stmt 1 view .LVU7411
3910:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 27961              		.loc 1 3910 7 is_stmt 0 view .LVU7412
 27962 006c 1AD8     		bhi	.L2014
 27963              	.LVL2209:
 27964              	.L2023:
3914:src/xeq.c     **** 	if (intm) {
 27965              		.loc 1 3914 2 is_stmt 1 view .LVU7413
3914:src/xeq.c     **** 	if (intm) {
 27966              		.loc 1 3914 14 is_stmt 0 view .LVU7414
 27967 006e 6420     		movs	r0, #100
 27968 0070 FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/ccjeMhND.s 			page 716


 27969              	.LVL2210:
3914:src/xeq.c     **** 	if (intm) {
 27970              		.loc 1 3914 12 view .LVU7415
 27971 0074 2A4B     		ldr	r3, .L2028+4
 27972 0076 1860     		str	r0, [r3]
3915:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 27973              		.loc 1 3915 2 is_stmt 1 view .LVU7416
 27974              	.L2000:
3919:src/xeq.c     **** 
 27975              		.loc 1 3919 1 is_stmt 0 view .LVU7417
 27976 0078 0AB0     		add	sp, sp, #40
 27977              		.cfi_remember_state
 27978              		.cfi_def_cfa_offset 24
 27979              		@ sp needed
 27980 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 27981              	.LVL2211:
 27982              	.L2009:
 27983              		.cfi_restore_state
3909:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 27984              		.loc 1 3909 4 is_stmt 1 view .LVU7418
3910:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 27985              		.loc 1 3910 7 is_stmt 0 view .LVU7419
 27986 007e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
3909:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 27987              		.loc 1 3909 23 view .LVU7420
 27988 0082 6FF38612 		bfc	r2, #6, #1
3910:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 27989              		.loc 1 3910 7 view .LVU7421
 27990 0086 6429     		cmp	r1, #100
3909:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 27991              		.loc 1 3909 23 view .LVU7422
 27992 0088 83F8E927 		strb	r2, [r3, #2025]
3910:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 27993              		.loc 1 3910 4 is_stmt 1 view .LVU7423
3910:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 27994              		.loc 1 3910 7 is_stmt 0 view .LVU7424
 27995 008c 0AD8     		bhi	.L2014
 27996              	.LVL2212:
 27997              	.L2022:
3914:src/xeq.c     **** 	if (intm) {
 27998              		.loc 1 3914 2 is_stmt 1 view .LVU7425
3914:src/xeq.c     **** 	if (intm) {
 27999              		.loc 1 3914 14 is_stmt 0 view .LVU7426
 28000 008e 6420     		movs	r0, #100
 28001 0090 FFF7FEFF 		bl	get_reg_n
 28002              	.LVL2213:
3914:src/xeq.c     **** 	if (intm) {
 28003              		.loc 1 3914 12 view .LVU7427
 28004 0094 224B     		ldr	r3, .L2028+4
 28005 0096 1860     		str	r0, [r3]
3915:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28006              		.loc 1 3915 2 is_stmt 1 view .LVU7428
 28007              	.L2013:
3917:src/xeq.c     **** 	}
 28008              		.loc 1 3917 3 view .LVU7429
 28009 0098 C120     		movs	r0, #193
 28010 009a FFF7FEFF 		bl	op_float
ARM GAS  /tmp/ccjeMhND.s 			page 717


 28011              	.LVL2214:
3919:src/xeq.c     **** 
 28012              		.loc 1 3919 1 is_stmt 0 view .LVU7430
 28013 009e 0AB0     		add	sp, sp, #40
 28014              		.cfi_remember_state
 28015              		.cfi_def_cfa_offset 24
 28016              		@ sp needed
 28017 00a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28018              	.LVL2215:
 28019              	.L2014:
 28020              		.cfi_restore_state
3911:src/xeq.c     **** 		}
 28021              		.loc 1 3911 5 is_stmt 1 view .LVU7431
 28022 00a4 7D21     		movs	r1, #125
 28023 00a6 6420     		movs	r0, #100
 28024 00a8 FFF7FEFF 		bl	cmdregs
 28025              	.LVL2216:
 28026              	.L2001:
3914:src/xeq.c     **** 	if (intm) {
 28027              		.loc 1 3914 2 view .LVU7432
3914:src/xeq.c     **** 	if (intm) {
 28028              		.loc 1 3914 14 is_stmt 0 view .LVU7433
 28029 00ac 6420     		movs	r0, #100
 28030 00ae FFF7FEFF 		bl	get_reg_n
 28031              	.LVL2217:
3914:src/xeq.c     **** 	if (intm) {
 28032              		.loc 1 3914 12 view .LVU7434
 28033 00b2 1B4B     		ldr	r3, .L2028+4
 28034 00b4 1860     		str	r0, [r3]
3915:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28035              		.loc 1 3915 2 is_stmt 1 view .LVU7435
3915:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28036              		.loc 1 3915 5 is_stmt 0 view .LVU7436
 28037 00b6 B8F1000F 		cmp	r8, #0
 28038 00ba EDD1     		bne	.L2013
3919:src/xeq.c     **** 
 28039              		.loc 1 3919 1 view .LVU7437
 28040 00bc 0AB0     		add	sp, sp, #40
 28041              		.cfi_remember_state
 28042              		.cfi_def_cfa_offset 24
 28043              		@ sp needed
 28044 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28045              	.LVL2218:
 28046              	.L2026:
 28047              		.cfi_restore_state
3886:src/xeq.c     **** 				// Need space for double precision stack
 28048              		.loc 1 3886 4 is_stmt 1 view .LVU7438
3886:src/xeq.c     **** 				// Need space for double precision stack
 28049              		.loc 1 3886 7 is_stmt 0 view .LVU7439
 28050 00c2 93F8CF27 		ldrb	r2, [r3, #1999]	@ zero_extendqisi2
 28051 00c6 0B2A     		cmp	r2, #11
 28052 00c8 1ED9     		bls	.L2027
 28053              	.LVL2219:
 28054              	.L2003:
3894:src/xeq.c     **** 			if (! intm) {
 28055              		.loc 1 3894 4 is_stmt 1 view .LVU7440
3894:src/xeq.c     **** 			if (! intm) {
ARM GAS  /tmp/ccjeMhND.s 			page 718


 28056              		.loc 1 3894 23 is_stmt 0 view .LVU7441
 28057 00ca 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 28058 00ce 42F04002 		orr	r2, r2, #64
 28059 00d2 83F8E927 		strb	r2, [r3, #2025]
3895:src/xeq.c     **** 				// Convert X to K to double precision
 28060              		.loc 1 3895 4 is_stmt 1 view .LVU7442
3895:src/xeq.c     **** 				// Convert X to K to double precision
 28061              		.loc 1 3895 7 is_stmt 0 view .LVU7443
 28062 00d6 B8F1000F 		cmp	r8, #0
 28063 00da D8D1     		bne	.L2022
 28064 00dc 6424     		movs	r4, #100
 28065 00de 01AF     		add	r7, sp, #4
 28066              	.L2007:
 28067              	.LVL2220:
3899:src/xeq.c     **** 			}
 28068              		.loc 1 3899 6 is_stmt 1 view .LVU7444
 28069              	.LBB3584:
 28070              	.LBI3584:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28071              		.loc 1 709 11 view .LVU7445
 28072              	.LBB3585:
 710:src/xeq.c     **** }
 28073              		.loc 1 710 2 view .LVU7446
 710:src/xeq.c     **** }
 28074              		.loc 1 710 9 is_stmt 0 view .LVU7447
 28075 00e0 2046     		mov	r0, r4
 28076 00e2 FFF7FEFF 		bl	get_reg_n
 28077              	.LVL2221:
 28078              	.LBE3585:
 28079              	.LBE3584:
3899:src/xeq.c     **** 			}
 28080              		.loc 1 3899 48 view .LVU7448
 28081 00e6 3368     		ldr	r3, [r6]
 28082 00e8 03F58663 		add	r3, r3, #1072
 28083              	.LBB3587:
 28084              	.LBB3586:
 710:src/xeq.c     **** }
 28085              		.loc 1 710 9 view .LVU7449
 28086 00ec 0546     		mov	r5, r0
 28087              	.LVL2222:
 710:src/xeq.c     **** }
 28088              		.loc 1 710 9 view .LVU7450
 28089              	.LBE3586:
 28090              	.LBE3587:
 28091              	.LBB3588:
 28092              	.LBI3588:
 645:src/xeq.c     **** 	decNumber temp;
 28093              		.loc 1 645 6 is_stmt 1 view .LVU7451
 28094              	.LBB3589:
 646:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 28095              		.loc 1 646 2 view .LVU7452
 647:src/xeq.c     **** }
 28096              		.loc 1 647 2 view .LVU7453
 647:src/xeq.c     **** }
 28097              		.loc 1 647 27 is_stmt 0 view .LVU7454
 28098 00ee 3946     		mov	r1, r7
 28099 00f0 03EBC400 		add	r0, r3, r4, lsl #3
ARM GAS  /tmp/ccjeMhND.s 			page 719


 28100              	.LVL2223:
 647:src/xeq.c     **** }
 28101              		.loc 1 647 27 view .LVU7455
 28102 00f4 FFF7FEFF 		bl	decimal64ToNumber
 28103              	.LVL2224:
 647:src/xeq.c     **** }
 28104              		.loc 1 647 27 view .LVU7456
 28105 00f8 0134     		adds	r4, r4, #1
 28106              	.LVL2225:
 647:src/xeq.c     **** }
 28107              		.loc 1 647 27 view .LVU7457
 28108 00fa 0146     		mov	r1, r0
 647:src/xeq.c     **** }
 28109              		.loc 1 647 2 view .LVU7458
 28110 00fc 2846     		mov	r0, r5
 28111 00fe FFF7FEFF 		bl	packed128_from_number
 28112              	.LVL2226:
 647:src/xeq.c     **** }
 28113              		.loc 1 647 2 view .LVU7459
 28114              	.LBE3589:
 28115              	.LBE3588:
3898:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 28116              		.loc 1 3898 45 is_stmt 1 view .LVU7460
3898:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 28117              		.loc 1 3898 17 view .LVU7461
3898:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 28118              		.loc 1 3898 5 is_stmt 0 view .LVU7462
 28119 0102 702C     		cmp	r4, #112
 28120 0104 ECD1     		bne	.L2007
 28121 0106 B2E7     		b	.L2023
 28122              	.LVL2227:
 28123              	.L2027:
3888:src/xeq.c     **** 				if (Error) {
 28124              		.loc 1 3888 5 is_stmt 1 view .LVU7463
 28125 0108 7D21     		movs	r1, #125
 28126 010a 0C20     		movs	r0, #12
 28127              	.LVL2228:
3888:src/xeq.c     **** 				if (Error) {
 28128              		.loc 1 3888 5 is_stmt 0 view .LVU7464
 28129 010c FFF7FEFF 		bl	cmdregs
 28130              	.LVL2229:
3889:src/xeq.c     **** 					return;
 28131              		.loc 1 3889 5 is_stmt 1 view .LVU7465
3889:src/xeq.c     **** 					return;
 28132              		.loc 1 3889 9 is_stmt 0 view .LVU7466
 28133 0110 044B     		ldr	r3, .L2028+8
3889:src/xeq.c     **** 					return;
 28134              		.loc 1 3889 8 view .LVU7467
 28135 0112 1B68     		ldr	r3, [r3]
 28136 0114 002B     		cmp	r3, #0
 28137 0116 AFD1     		bne	.L2000
 28138 0118 3368     		ldr	r3, [r6]
 28139 011a D6E7     		b	.L2003
 28140              	.L2029:
 28141              		.align	2
 28142              	.L2028:
 28143 011c 00000000 		.word	main_ram
ARM GAS  /tmp/ccjeMhND.s 			page 720


 28144 0120 00000000 		.word	StackBase
 28145 0124 00000000 		.word	Error
 28146              		.cfi_endproc
 28147              	.LFE213:
 28149              		.section	.text.cmdrestm,"ax",%progbits
 28150              		.align	1
 28151              		.p2align 2,,3
 28152              		.global	cmdrestm
 28153              		.syntax unified
 28154              		.thumb
 28155              		.thumb_func
 28156              		.fpu fpv4-sp-d16
 28158              	cmdrestm:
 28159              	.LVL2230:
 28160              	.LFB208:
3575:src/xeq.c     **** 	const int dbl = is_dblmode();
 28161              		.loc 1 3575 47 is_stmt 1 view -0
 28162              		.cfi_startproc
 28163              		@ args = 0, pretend = 0, frame = 0
 28164              		@ frame_needed = 0, uses_anonymous_args = 0
3576:src/xeq.c     **** 	const int intm = is_intmode();
 28165              		.loc 1 3576 2 view .LVU7469
 28166              	.LBB3590:
 28167              	.LBI3590:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28168              		.loc 1 932 5 view .LVU7470
 28169              	.LBB3591:
 933:src/xeq.c     **** }
 28170              		.loc 1 933 2 view .LVU7471
 28171              	.LBE3591:
 28172              	.LBE3590:
3575:src/xeq.c     **** 	const int dbl = is_dblmode();
 28173              		.loc 1 3575 47 is_stmt 0 view .LVU7472
 28174 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 28175              		.cfi_def_cfa_offset 24
 28176              		.cfi_offset 3, -24
 28177              		.cfi_offset 4, -20
 28178              		.cfi_offset 5, -16
 28179              		.cfi_offset 6, -12
 28180              		.cfi_offset 7, -8
 28181              		.cfi_offset 14, -4
 28182              	.LBB3599:
 28183              	.LBB3592:
 933:src/xeq.c     **** }
 28184              		.loc 1 933 12 view .LVU7473
 28185 0002 294F     		ldr	r7, .L2038
 28186 0004 3D68     		ldr	r5, [r7]
 28187              	.LBE3592:
 28188              	.LBE3599:
3577:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 28189              		.loc 1 3577 19 view .LVU7474
 28190 0006 95F8E847 		ldrb	r4, [r5, #2024]	@ zero_extendqisi2
 28191              	.LBB3600:
 28192              	.LBB3593:
 933:src/xeq.c     **** }
 28193              		.loc 1 933 24 view .LVU7475
 28194 000a B5F8E867 		ldrh	r6, [r5, #2024]
ARM GAS  /tmp/ccjeMhND.s 			page 721


 28195              	.LVL2231:
 933:src/xeq.c     **** }
 28196              		.loc 1 933 24 view .LVU7476
 28197              	.LBE3593:
 28198              	.LBE3600:
3577:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 28199              		.loc 1 3577 2 is_stmt 1 view .LVU7477
3578:src/xeq.c     **** 
 28200              		.loc 1 3578 18 is_stmt 0 view .LVU7478
 28201 000e FFF7FEFF 		bl	get_reg_n
 28202              	.LVL2232:
3578:src/xeq.c     **** 
 28203              		.loc 1 3578 2 view .LVU7479
 28204 0012 0822     		movs	r2, #8
3578:src/xeq.c     **** 
 28205              		.loc 1 3578 18 view .LVU7480
 28206 0014 0146     		mov	r1, r0
3578:src/xeq.c     **** 
 28207              		.loc 1 3578 2 view .LVU7481
 28208 0016 05F2E470 		addw	r0, r5, #2020
 28209 001a FFF7FEFF 		bl	xcopy
 28210              	.LVL2233:
3581:src/xeq.c     **** 		UState.contrast = 6;
 28211              		.loc 1 3581 7 view .LVU7482
 28212 001e 3B68     		ldr	r3, [r7]
3581:src/xeq.c     **** 		UState.contrast = 6;
 28213              		.loc 1 3581 23 view .LVU7483
 28214 0020 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
3581:src/xeq.c     **** 		UState.contrast = 6;
 28215              		.loc 1 3581 5 view .LVU7484
 28216 0024 1107     		lsls	r1, r2, #28
3577:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 28217              		.loc 1 3577 19 view .LVU7485
 28218 0026 04F00104 		and	r4, r4, #1
 28219              	.LVL2234:
3578:src/xeq.c     **** 
 28220              		.loc 1 3578 2 is_stmt 1 view .LVU7486
3581:src/xeq.c     **** 		UState.contrast = 6;
 28221              		.loc 1 3581 2 view .LVU7487
3581:src/xeq.c     **** 		UState.contrast = 6;
 28222              		.loc 1 3581 5 is_stmt 0 view .LVU7488
 28223 002a 04D1     		bne	.L2031
3582:src/xeq.c     **** 
 28224              		.loc 1 3582 3 is_stmt 1 view .LVU7489
3582:src/xeq.c     **** 
 28225              		.loc 1 3582 19 is_stmt 0 view .LVU7490
 28226 002c 0621     		movs	r1, #6
 28227 002e 61F30302 		bfi	r2, r1, #0, #4
 28228 0032 83F8E427 		strb	r2, [r3, #2020]
 28229              	.L2031:
3584:src/xeq.c     **** 		// Switch back to decimal or integer mode
 28230              		.loc 1 3584 2 is_stmt 1 view .LVU7491
3584:src/xeq.c     **** 		// Switch back to decimal or integer mode
 28231              		.loc 1 3584 14 is_stmt 0 view .LVU7492
 28232 0036 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3584:src/xeq.c     **** 		// Switch back to decimal or integer mode
 28233              		.loc 1 3584 5 view .LVU7493
ARM GAS  /tmp/ccjeMhND.s 			page 722


 28234 003a 02F00101 		and	r1, r2, #1
 28235 003e A142     		cmp	r1, r4
 28236 0040 08D0     		beq	.L2032
3586:src/xeq.c     **** 		if (intm)
 28237              		.loc 1 3586 3 is_stmt 1 view .LVU7494
3586:src/xeq.c     **** 		if (intm)
 28238              		.loc 1 3586 15 is_stmt 0 view .LVU7495
 28239 0042 64F30002 		bfi	r2, r4, #0, #1
 28240 0046 83F8E827 		strb	r2, [r3, #2024]
3587:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 28241              		.loc 1 3587 3 is_stmt 1 view .LVU7496
3587:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 28242              		.loc 1 3587 6 is_stmt 0 view .LVU7497
 28243 004a 4CB3     		cbz	r4, .L2033
3588:src/xeq.c     **** 		else
 28244              		.loc 1 3588 4 is_stmt 1 view .LVU7498
 28245 004c C220     		movs	r0, #194
 28246 004e FFF7FEFF 		bl	op_float
 28247              	.LVL2235:
 28248 0052 3B68     		ldr	r3, [r7]
 28249              	.L2032:
3592:src/xeq.c     **** 		// Switch back to double/single precision
 28250              		.loc 1 3592 2 view .LVU7499
3592:src/xeq.c     **** 		// Switch back to double/single precision
 28251              		.loc 1 3592 6 is_stmt 0 view .LVU7500
 28252 0054 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3592:src/xeq.c     **** 		// Switch back to double/single precision
 28253              		.loc 1 3592 5 view .LVU7501
 28254 0058 D207     		lsls	r2, r2, #31
 28255 005a 20D4     		bmi	.L2030
 28256              	.LBB3601:
 28257              	.LBB3602:
 933:src/xeq.c     **** }
 28258              		.loc 1 933 24 view .LVU7502
 28259 005c B3F8E827 		ldrh	r2, [r3, #2024]
 28260              	.LBE3602:
 28261              	.LBE3601:
 28262              	.LBB3605:
 28263              	.LBB3594:
 28264 0060 44F20101 		movw	r1, #16385
 28265              	.LBE3594:
 28266              	.LBE3605:
 28267              	.LBB3606:
 28268              	.LBB3603:
 28269 0064 0A40     		ands	r2, r2, r1
 28270              	.LBE3603:
 28271              	.LBE3606:
 28272              	.LBB3607:
 28273              	.LBB3595:
 28274 0066 0E40     		ands	r6, r6, r1
 28275              	.LVL2236:
 933:src/xeq.c     **** }
 28276              		.loc 1 933 24 view .LVU7503
 28277              	.LBE3595:
 28278              	.LBE3607:
3592:src/xeq.c     **** 		// Switch back to double/single precision
 28279              		.loc 1 3592 21 view .LVU7504
ARM GAS  /tmp/ccjeMhND.s 			page 723


 28280 0068 A2F58042 		sub	r2, r2, #16384
 28281              	.LBB3608:
 28282              	.LBB3596:
 933:src/xeq.c     **** }
 28283              		.loc 1 933 24 view .LVU7505
 28284 006c A6F58041 		sub	r1, r6, #16384
 28285              	.LBE3596:
 28286              	.LBE3608:
3592:src/xeq.c     **** 		// Switch back to double/single precision
 28287              		.loc 1 3592 21 view .LVU7506
 28288 0070 B2FA82F2 		clz	r2, r2
 28289              	.LBB3609:
 28290              	.LBB3597:
 933:src/xeq.c     **** }
 28291              		.loc 1 933 24 view .LVU7507
 28292 0074 B1FA81F1 		clz	r1, r1
 28293              	.LBE3597:
 28294              	.LBE3609:
3592:src/xeq.c     **** 		// Switch back to double/single precision
 28295              		.loc 1 3592 21 view .LVU7508
 28296 0078 5209     		lsrs	r2, r2, #5
 28297              	.LBB3610:
 28298              	.LBB3598:
 933:src/xeq.c     **** }
 28299              		.loc 1 933 24 view .LVU7509
 28300 007a 4909     		lsrs	r1, r1, #5
 28301              	.LBE3598:
 28302              	.LBE3610:
 28303              	.LBB3611:
 28304              	.LBI3601:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28305              		.loc 1 932 5 is_stmt 1 view .LVU7510
 28306              	.LBB3604:
 933:src/xeq.c     **** }
 28307              		.loc 1 933 2 view .LVU7511
 28308              	.LBE3604:
 28309              	.LBE3611:
3592:src/xeq.c     **** 		// Switch back to double/single precision
 28310              		.loc 1 3592 21 is_stmt 0 view .LVU7512
 28311 007c 8A42     		cmp	r2, r1
 28312 007e 0ED0     		beq	.L2030
3594:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 28313              		.loc 1 3594 3 is_stmt 1 view .LVU7513
3594:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 28314              		.loc 1 3594 22 is_stmt 0 view .LVU7514
 28315 0080 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 28316 0084 61F38612 		bfi	r2, r1, #6, #1
3595:src/xeq.c     **** 	}
 28317              		.loc 1 3595 3 view .LVU7515
 28318 0088 B6F5804F 		cmp	r6, #16384
3594:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 28319              		.loc 1 3594 22 view .LVU7516
 28320 008c 83F8E927 		strb	r2, [r3, #2025]
3595:src/xeq.c     **** 	}
 28321              		.loc 1 3595 3 is_stmt 1 view .LVU7517
3597:src/xeq.c     **** #endif
 28322              		.loc 1 3597 1 is_stmt 0 view .LVU7518
ARM GAS  /tmp/ccjeMhND.s 			page 724


 28323 0090 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 28324              		.cfi_remember_state
 28325              		.cfi_restore 14
 28326              		.cfi_restore 7
 28327              		.cfi_restore 6
 28328              		.cfi_restore 5
 28329              		.cfi_restore 4
 28330              		.cfi_restore 3
 28331              		.cfi_def_cfa_offset 0
3595:src/xeq.c     **** 	}
 28332              		.loc 1 3595 3 view .LVU7519
 28333 0094 0CBF     		ite	eq
 28334 0096 B620     		moveq	r0, #182
 28335 0098 B520     		movne	r0, #181
 28336 009a FFF7FEBF 		b	op_double
 28337              	.LVL2237:
 28338              	.L2030:
 28339              		.cfi_restore_state
3597:src/xeq.c     **** #endif
 28340              		.loc 1 3597 1 view .LVU7520
 28341 009e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 28342              	.LVL2238:
 28343              	.L2033:
3590:src/xeq.c     **** 	}
 28344              		.loc 1 3590 4 is_stmt 1 view .LVU7521
 28345 00a0 FFF7FEFF 		bl	switch_to_int
 28346              	.LVL2239:
 28347 00a4 3B68     		ldr	r3, [r7]
 28348 00a6 D5E7     		b	.L2032
 28349              	.L2039:
 28350              		.align	2
 28351              	.L2038:
 28352 00a8 00000000 		.word	main_ram
 28353              		.cfi_endproc
 28354              	.LFE208:
 28356              		.section	.text.cmdxin,"ax",%progbits
 28357              		.align	1
 28358              		.p2align 2,,3
 28359              		.global	cmdxin
 28360              		.syntax unified
 28361              		.thumb
 28362              		.thumb_func
 28363              		.fpu fpv4-sp-d16
 28365              	cmdxin:
 28366              	.LVL2240:
 28367              	.LFB261:
5686:src/xeq.c     **** 
 28368              		.loc 1 5686 45 view -0
 28369              		.cfi_startproc
 28370              		@ args = 0, pretend = 0, frame = 40
 28371              		@ frame_needed = 0, uses_anonymous_args = 0
5688:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28372              		.loc 1 5688 2 view .LVU7523
5698:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28373              		.loc 1 5698 2 view .LVU7524
5686:src/xeq.c     **** 
 28374              		.loc 1 5686 45 is_stmt 0 view .LVU7525
ARM GAS  /tmp/ccjeMhND.s 			page 725


 28375 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 28376              		.cfi_def_cfa_offset 32
 28377              		.cfi_offset 4, -32
 28378              		.cfi_offset 5, -28
 28379              		.cfi_offset 6, -24
 28380              		.cfi_offset 7, -20
 28381              		.cfi_offset 8, -16
 28382              		.cfi_offset 9, -12
 28383              		.cfi_offset 10, -8
 28384              		.cfi_offset 14, -4
5698:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28385              		.loc 1 5698 6 view .LVU7526
 28386 0004 6A4D     		ldr	r5, .L2069
5698:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28387              		.loc 1 5698 5 view .LVU7527
 28388 0006 95F90130 		ldrsb	r3, [r5, #1]
 28389 000a 002B     		cmp	r3, #0
5686:src/xeq.c     **** 
 28390              		.loc 1 5686 45 view .LVU7528
 28391 000c 8AB0     		sub	sp, sp, #40
 28392              		.cfi_def_cfa_offset 72
5698:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28393              		.loc 1 5698 5 view .LVU7529
 28394 000e C0F2AD80 		blt	.L2066
5706:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 28395              		.loc 1 5706 2 is_stmt 1 view .LVU7530
 28396 0012 684E     		ldr	r6, .L2069+4
5711:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28397              		.loc 1 5711 26 is_stmt 0 view .LVU7531
 28398 0014 684F     		ldr	r7, .L2069+8
 28399              	.LBB3627:
 28400              	.LBB3628:
 735:src/xeq.c     **** }
 28401              		.loc 1 735 15 view .LVU7532
 28402 0016 DFF8B481 		ldr	r8, .L2069+28
 28403 001a 0446     		mov	r4, r0
 28404              	.LBE3628:
 28405              	.LBE3627:
5706:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 28406              		.loc 1 5706 2 view .LVU7533
 28407 001c 4FF4E872 		mov	r2, #464
 28408 0020 0021     		movs	r1, #0
 28409              	.LVL2241:
5706:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 28410              		.loc 1 5706 2 view .LVU7534
 28411 0022 3046     		mov	r0, r6
 28412              	.LVL2242:
5706:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 28413              		.loc 1 5706 2 view .LVU7535
 28414 0024 FFF7FEFF 		bl	xset
 28415              	.LVL2243:
5707:src/xeq.c     **** 
 28416              		.loc 1 5707 2 is_stmt 1 view .LVU7536
 28417 0028 1022     		movs	r2, #16
 28418 002a 0021     		movs	r1, #0
 28419 002c 2846     		mov	r0, r5
 28420 002e FFF7FEFF 		bl	xset
ARM GAS  /tmp/ccjeMhND.s 			page 726


 28421              	.LVL2244:
5710:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
 28422              		.loc 1 5710 2 view .LVU7537
 28423              	.LBB3632:
 28424              	.LBI3627:
 734:src/xeq.c     **** 	return State2.state_lift;
 28425              		.loc 1 734 12 view .LVU7538
 28426              	.LBB3629:
 735:src/xeq.c     **** }
 28427              		.loc 1 735 2 view .LVU7539
 28428              	.LBE3629:
 28429              	.LBE3632:
5711:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28430              		.loc 1 5711 26 is_stmt 0 view .LVU7540
 28431 0032 3A68     		ldr	r2, [r7]
 28432              	.LBB3633:
 28433              	.LBB3630:
 735:src/xeq.c     **** }
 28434              		.loc 1 735 15 view .LVU7541
 28435 0034 98F817E0 		ldrb	lr, [r8, #23]	@ zero_extendqisi2
 28436              	.LBE3630:
 28437              	.LBE3633:
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28438              		.loc 1 5713 29 view .LVU7542
 28439 0038 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
5711:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28440              		.loc 1 5711 32 view .LVU7543
 28441 003c 92F8EAC7 		ldrb	ip, [r2, #2026]	@ zero_extendqisi2
5712:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 28442              		.loc 1 5712 32 view .LVU7544
 28443 0040 92F8E907 		ldrb	r0, [r2, #2025]	@ zero_extendqisi2
5714:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28444              		.loc 1 5714 41 view .LVU7545
 28445 0044 92F8EB17 		ldrb	r1, [r2, #2027]	@ zero_extendqisi2
5729:src/xeq.c     **** 
 28446              		.loc 1 5729 20 view .LVU7546
 28447 0048 B2F8E2A7 		ldrh	r10, [r2, #2018]
 28448 004c A5F80CA0 		strh	r10, [r5, #12]	@ movhi
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28449              		.loc 1 5713 29 view .LVU7547
 28450 0050 03F00103 		and	r3, r3, #1
 28451              	.LBB3634:
 28452              	.LBB3631:
 735:src/xeq.c     **** }
 28453              		.loc 1 735 15 view .LVU7548
 28454 0054 CEF3801E 		ubfx	lr, lr, #6, #1
 28455              	.LBE3631:
 28456              	.LBE3634:
5711:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28457              		.loc 1 5711 2 is_stmt 1 view .LVU7549
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28458              		.loc 1 5713 21 is_stmt 0 view .LVU7550
 28459 0058 63F03F03 		orn	r3, r3, #63
 28460 005c 43EA4E03 		orr	r3, r3, lr, lsl #1
5711:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28461              		.loc 1 5711 32 view .LVU7551
 28462 0060 CCF3C00C 		ubfx	ip, ip, #3, #1
ARM GAS  /tmp/ccjeMhND.s 			page 727


5712:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 28463              		.loc 1 5712 2 is_stmt 1 view .LVU7552
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28464              		.loc 1 5713 21 is_stmt 0 view .LVU7553
 28465 0064 43EA8C03 		orr	r3, r3, ip, lsl #2
5712:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 28466              		.loc 1 5712 32 view .LVU7554
 28467 0068 C0F38010 		ubfx	r0, r0, #6, #1
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28468              		.loc 1 5713 2 is_stmt 1 view .LVU7555
5714:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28469              		.loc 1 5714 9 view .LVU7556
5747:src/xeq.c     **** 	XromIn = (arg & 0x7);
 28470              		.loc 1 5747 35 is_stmt 0 view .LVU7557
 28471 006c C4F3C01C 		ubfx	ip, r4, #7, #1
5714:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28472              		.loc 1 5714 33 view .LVU7558
 28473 0070 95F802E0 		ldrb	lr, [r5, #2]	@ zero_extendqisi2
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28474              		.loc 1 5713 21 view .LVU7559
 28475 0074 43EAC003 		orr	r3, r3, r0, lsl #3
5746:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 28476              		.loc 1 5746 36 view .LVU7560
 28477 0078 C4F38019 		ubfx	r9, r4, #6, #1
5728:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 28478              		.loc 1 5728 17 view .LVU7561
 28479 007c 4F48     		ldr	r0, .L2069+12
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28480              		.loc 1 5713 21 view .LVU7562
 28481 007e 43EA0C13 		orr	r3, r3, ip, lsl #4
5714:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28482              		.loc 1 5714 41 view .LVU7563
 28483 0082 C1F30211 		ubfx	r1, r1, #4, #3
5715:src/xeq.c     **** 	XromFlags.xIN = 1;
 28484              		.loc 1 5715 2 is_stmt 1 view .LVU7564
5716:src/xeq.c     **** 
 28485              		.loc 1 5716 2 view .LVU7565
5728:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 28486              		.loc 1 5728 2 view .LVU7566
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28487              		.loc 1 5713 21 is_stmt 0 view .LVU7567
 28488 0086 43EA4913 		orr	r3, r3, r9, lsl #5
5714:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28489              		.loc 1 5714 33 view .LVU7568
 28490 008a 61F3020E 		bfi	lr, r1, #0, #3
5736:src/xeq.c     **** #endif
 28491              		.loc 1 5736 17 view .LVU7569
 28492 008e 41F2020C 		movw	ip, #4098
5735:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 28493              		.loc 1 5735 24 view .LVU7570
 28494 0092 4FF6FE71 		movw	r1, #65534
5728:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 28495              		.loc 1 5728 17 view .LVU7571
 28496 0096 D0F80090 		ldr	r9, [r0]
5736:src/xeq.c     **** #endif
 28497              		.loc 1 5736 17 view .LVU7572
 28498 009a A6F8CCC1 		strh	ip, [r6, #460]	@ movhi
ARM GAS  /tmp/ccjeMhND.s 			page 728


5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28499              		.loc 1 5713 21 view .LVU7573
 28500 009e 6B70     		strb	r3, [r5, #1]
5751:src/xeq.c     **** 		// Complex arguments are always in pairs
 28501              		.loc 1 5751 6 view .LVU7574
 28502 00a0 5FFA83FC 		uxtb	ip, r3
5714:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28503              		.loc 1 5714 33 view .LVU7575
 28504 00a4 85F802E0 		strb	lr, [r5, #2]
5735:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 28505              		.loc 1 5735 24 view .LVU7576
 28506 00a8 A2F8E217 		strh	r1, [r2, #2018]	@ movhi
5731:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28507              		.loc 1 5731 9 view .LVU7577
 28508 00ac 06F5E87E 		add	lr, r6, #464
5735:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 28509              		.loc 1 5735 12 view .LVU7578
 28510 00b0 A2F8DE17 		strh	r1, [r2, #2014]	@ movhi
5751:src/xeq.c     **** 		// Complex arguments are always in pairs
 28511              		.loc 1 5751 5 view .LVU7579
 28512 00b4 DB06     		lsls	r3, r3, #27
5748:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 28513              		.loc 1 5748 16 view .LVU7580
 28514 00b6 04F00701 		and	r1, r4, #7
5749:src/xeq.c     **** #endif
 28515              		.loc 1 5749 24 view .LVU7581
 28516 00ba C4F3C204 		ubfx	r4, r4, #3, #3
 28517              	.LVL2245:
5731:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28518              		.loc 1 5731 9 view .LVU7582
 28519 00be C0F800E0 		str	lr, [r0]
5728:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 28520              		.loc 1 5728 17 view .LVU7583
 28521 00c2 C5F80890 		str	r9, [r5, #8]
5729:src/xeq.c     **** 
 28522              		.loc 1 5729 2 is_stmt 1 view .LVU7584
5731:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28523              		.loc 1 5731 2 view .LVU7585
5735:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 28524              		.loc 1 5735 2 view .LVU7586
5736:src/xeq.c     **** #endif
 28525              		.loc 1 5736 2 view .LVU7587
5746:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 28526              		.loc 1 5746 2 view .LVU7588
5747:src/xeq.c     **** 	XromIn = (arg & 0x7);
 28527              		.loc 1 5747 2 view .LVU7589
5748:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 28528              		.loc 1 5748 2 view .LVU7590
5748:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 28529              		.loc 1 5748 9 is_stmt 0 view .LVU7591
 28530 00c6 2971     		strb	r1, [r5, #4]
5749:src/xeq.c     **** #endif
 28531              		.loc 1 5749 2 is_stmt 1 view .LVU7592
5749:src/xeq.c     **** #endif
 28532              		.loc 1 5749 10 is_stmt 0 view .LVU7593
 28533 00c8 6C71     		strb	r4, [r5, #5]
5751:src/xeq.c     **** 		// Complex arguments are always in pairs
ARM GAS  /tmp/ccjeMhND.s 			page 729


 28534              		.loc 1 5751 2 is_stmt 1 view .LVU7594
5751:src/xeq.c     **** 		// Complex arguments are always in pairs
 28535              		.loc 1 5751 5 is_stmt 0 view .LVU7595
 28536 00ca 03D5     		bpl	.L2044
5753:src/xeq.c     **** 		XromOut <<= 1;
 28537              		.loc 1 5753 3 is_stmt 1 view .LVU7596
5753:src/xeq.c     **** 		XromOut <<= 1;
 28538              		.loc 1 5753 10 is_stmt 0 view .LVU7597
 28539 00cc 4900     		lsls	r1, r1, #1
5754:src/xeq.c     **** 	}
 28540              		.loc 1 5754 11 view .LVU7598
 28541 00ce 6400     		lsls	r4, r4, #1
5753:src/xeq.c     **** 		XromOut <<= 1;
 28542              		.loc 1 5753 10 view .LVU7599
 28543 00d0 2971     		strb	r1, [r5, #4]
5754:src/xeq.c     **** 	}
 28544              		.loc 1 5754 3 is_stmt 1 view .LVU7600
5754:src/xeq.c     **** 	}
 28545              		.loc 1 5754 11 is_stmt 0 view .LVU7601
 28546 00d2 6C71     		strb	r4, [r5, #5]
 28547              	.L2044:
5757:src/xeq.c     **** 
 28548              		.loc 1 5757 9 is_stmt 1 view .LVU7602
5757:src/xeq.c     **** 
 28549              		.loc 1 5757 30 is_stmt 0 view .LVU7603
 28550 00d4 92F8EB37 		ldrb	r3, [r2, #2027]	@ zero_extendqisi2
5768:src/xeq.c     **** 		// Convert integers to decimal128
 28551              		.loc 1 5768 5 view .LVU7604
 28552 00d8 1CF0010F 		tst	ip, #1
5757:src/xeq.c     **** 
 28553              		.loc 1 5757 30 view .LVU7605
 28554 00dc 6FF30613 		bfc	r3, #4, #3
 28555 00e0 82F8EB37 		strb	r3, [r2, #2027]
5768:src/xeq.c     **** 		// Convert integers to decimal128
 28556              		.loc 1 5768 2 is_stmt 1 view .LVU7606
5768:src/xeq.c     **** 		// Convert integers to decimal128
 28557              		.loc 1 5768 5 is_stmt 0 view .LVU7607
 28558 00e4 52D1     		bne	.L2067
5776:src/xeq.c     **** 		// No conversion necessary
 28559              		.loc 1 5776 7 is_stmt 1 view .LVU7608
5776:src/xeq.c     **** 		// No conversion necessary
 28560              		.loc 1 5776 10 is_stmt 0 view .LVU7609
 28561 00e6 1CF0080F 		tst	ip, #8
 28562 00ea 47D1     		bne	.L2068
5797:src/xeq.c     **** #endif
 28563              		.loc 1 5797 3 is_stmt 1 view .LVU7610
 28564 00ec B520     		movs	r0, #181
 28565 00ee FFF7FEFF 		bl	op_double
 28566              	.LVL2246:
 28567              	.L2046:
5802:src/xeq.c     **** 	UState.stack_depth = 1;
 28568              		.loc 1 5802 2 view .LVU7611
 28569              	.LBB3635:
 28570              	.LBI3635:
 748:src/xeq.c     ****     State2.state_lift = 1;
 28571              		.loc 1 748 6 view .LVU7612
 28572              	.LBB3636:
ARM GAS  /tmp/ccjeMhND.s 			page 730


 749:src/xeq.c     **** }
 28573              		.loc 1 749 5 view .LVU7613
 749:src/xeq.c     **** }
 28574              		.loc 1 749 23 is_stmt 0 view .LVU7614
 28575 00f2 98F81730 		ldrb	r3, [r8, #23]	@ zero_extendqisi2
 28576              	.LBE3636:
 28577              	.LBE3635:
5803:src/xeq.c     **** 
 28578              		.loc 1 5803 21 view .LVU7615
 28579 00f6 3A68     		ldr	r2, [r7]
 28580              	.LBB3638:
 28581              	.LBB3637:
 749:src/xeq.c     **** }
 28582              		.loc 1 749 23 view .LVU7616
 28583 00f8 43F04003 		orr	r3, r3, #64
 28584 00fc 88F81730 		strb	r3, [r8, #23]
 28585              	.LBE3637:
 28586              	.LBE3638:
5803:src/xeq.c     **** 
 28587              		.loc 1 5803 2 is_stmt 1 view .LVU7617
5803:src/xeq.c     **** 
 28588              		.loc 1 5803 21 is_stmt 0 view .LVU7618
 28589 0100 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 28590 0104 43F00803 		orr	r3, r3, #8
 28591 0108 82F8EA37 		strb	r3, [r2, #2026]
5806:src/xeq.c     **** 		decNumber x;
 28592              		.loc 1 5806 2 is_stmt 1 view .LVU7619
 28593              	.LVL2247:
5806:src/xeq.c     **** 		decNumber x;
 28594              		.loc 1 5806 14 view .LVU7620
5806:src/xeq.c     **** 		decNumber x;
 28595              		.loc 1 5806 2 is_stmt 0 view .LVU7621
 28596 010c 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 28597 010e 93B3     		cbz	r3, .L2040
5806:src/xeq.c     **** 		decNumber x;
 28598              		.loc 1 5806 9 view .LVU7622
 28599 0110 0024     		movs	r4, #0
 28600 0112 02E0     		b	.L2053
 28601              	.LVL2248:
 28602              	.L2048:
5806:src/xeq.c     **** 		decNumber x;
 28603              		.loc 1 5806 18 view .LVU7623
 28604 0114 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
5806:src/xeq.c     **** 		decNumber x;
 28605              		.loc 1 5806 2 view .LVU7624
 28606 0116 A342     		cmp	r3, r4
 28607 0118 2DDD     		ble	.L2040
 28608              	.LVL2249:
 28609              	.L2053:
 28610              	.LBB3639:
5807:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
 28611              		.loc 1 5807 3 is_stmt 1 view .LVU7625
5808:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 28612              		.loc 1 5808 3 view .LVU7626
5808:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 28613              		.loc 1 5808 7 is_stmt 0 view .LVU7627
 28614 011a 04F16401 		add	r1, r4, #100
ARM GAS  /tmp/ccjeMhND.s 			page 731


 28615 011e 01A8     		add	r0, sp, #4
 28616 0120 FFF7FEFF 		bl	getRegister
 28617              	.LVL2250:
 28618              	.LBE3639:
5806:src/xeq.c     **** 		decNumber x;
 28619              		.loc 1 5806 26 is_stmt 1 view .LVU7628
 28620              	.LBB3646:
5808:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 28621              		.loc 1 5808 6 is_stmt 0 view .LVU7629
 28622 0124 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 28623 0126 13F0300F 		tst	r3, #48
 28624              	.LBE3646:
5806:src/xeq.c     **** 		decNumber x;
 28625              		.loc 1 5806 26 view .LVU7630
 28626 012a 04F10104 		add	r4, r4, #1
 28627              	.LVL2251:
5806:src/xeq.c     **** 		decNumber x;
 28628              		.loc 1 5806 14 is_stmt 1 view .LVU7631
 28629              	.LBB3647:
5808:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 28630              		.loc 1 5808 6 is_stmt 0 view .LVU7632
 28631 012e F1D0     		beq	.L2048
5811:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 28632              		.loc 1 5811 4 is_stmt 1 view .LVU7633
 28633              	.LVL2252:
 28634              	.LBB3640:
 28635              	.LBI3640:
3343:src/xeq.c     **** 	unsigned short mask;
 28636              		.loc 1 3343 5 view .LVU7634
 28637              	.LBB3641:
3344:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 28638              		.loc 1 3344 2 view .LVU7635
3345:src/xeq.c     **** 
 28639              		.loc 1 3345 2 view .LVU7636
3345:src/xeq.c     **** 
 28640              		.loc 1 3345 34 is_stmt 0 view .LVU7637
 28641 0130 0DF10201 		add	r1, sp, #2
 28642 0134 6B20     		movs	r0, #107
 28643 0136 FFF7FEFF 		bl	flag_word
 28644              	.LVL2253:
3347:src/xeq.c     **** }
 28645              		.loc 1 3347 2 is_stmt 1 view .LVU7638
3347:src/xeq.c     **** }
 28646              		.loc 1 3347 24 is_stmt 0 view .LVU7639
 28647 013a BDF80230 		ldrh	r3, [sp, #2]
 28648 013e 0288     		ldrh	r2, [r0]
 28649              	.LBE3641:
 28650              	.LBE3640:
5811:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 28651              		.loc 1 5811 7 view .LVU7640
 28652 0140 1A42     		tst	r2, r3
 28653 0142 2DD0     		beq	.L2049
 28654              	.LVL2254:
5812:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28655              		.loc 1 5812 17 is_stmt 1 view .LVU7641
5812:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28656              		.loc 1 5812 5 is_stmt 0 view .LVU7642
ARM GAS  /tmp/ccjeMhND.s 			page 732


 28657 0144 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 28658 0146 53B1     		cbz	r3, .L2050
5813:src/xeq.c     **** 				// Early exit of routine
 28659              		.loc 1 5813 6 view .LVU7643
 28660 0148 1D4E     		ldr	r6, .L2069+16
5812:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28661              		.loc 1 5812 12 view .LVU7644
 28662 014a 0024     		movs	r4, #0
 28663              	.LVL2255:
 28664              	.L2051:
5813:src/xeq.c     **** 				// Early exit of routine
 28665              		.loc 1 5813 6 is_stmt 1 discriminator 3 view .LVU7645
 28666 014c 04F16400 		add	r0, r4, #100
 28667 0150 3146     		mov	r1, r6
 28668 0152 FFF7FEFF 		bl	setRegister
 28669              	.LVL2256:
5812:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28670              		.loc 1 5812 30 discriminator 3 view .LVU7646
5812:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28671              		.loc 1 5812 21 is_stmt 0 discriminator 3 view .LVU7647
 28672 0156 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
5812:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28673              		.loc 1 5812 30 discriminator 3 view .LVU7648
 28674 0158 0134     		adds	r4, r4, #1
 28675              	.LVL2257:
5812:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28676              		.loc 1 5812 17 is_stmt 1 discriminator 3 view .LVU7649
5812:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28677              		.loc 1 5812 5 is_stmt 0 discriminator 3 view .LVU7650
 28678 015a A342     		cmp	r3, r4
 28679 015c F6DC     		bgt	.L2051
 28680              	.LVL2258:
 28681              	.L2050:
5815:src/xeq.c     **** 			} 
 28682              		.loc 1 5815 5 is_stmt 1 view .LVU7651
 28683 015e 8421     		movs	r1, #132
 28684 0160 0020     		movs	r0, #0
 28685 0162 FFF7FEFF 		bl	cmdxout
 28686              	.LVL2259:
 28687              	.LBE3647:
5822:src/xeq.c     **** 
 28688              		.loc 1 5822 1 is_stmt 0 view .LVU7652
 28689 0166 0AB0     		add	sp, sp, #40
 28690              		.cfi_remember_state
 28691              		.cfi_def_cfa_offset 32
 28692              		@ sp needed
 28693 0168 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 28694              	.LVL2260:
 28695              	.L2066:
 28696              		.cfi_restore_state
5699:src/xeq.c     **** 		return;
 28697              		.loc 1 5699 3 is_stmt 1 view .LVU7653
 28698              	.LBB3648:
 28699              	.LBI3648:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28700              		.loc 1 537 5 view .LVU7654
 28701              	.LBB3649:
ARM GAS  /tmp/ccjeMhND.s 			page 733


 538:src/xeq.c     **** 		Error = e;
 28702              		.loc 1 538 2 view .LVU7655
 538:src/xeq.c     **** 		Error = e;
 28703              		.loc 1 538 12 is_stmt 0 view .LVU7656
 28704 016c 154B     		ldr	r3, .L2069+20
 538:src/xeq.c     **** 		Error = e;
 28705              		.loc 1 538 5 view .LVU7657
 28706 016e 1A68     		ldr	r2, [r3]
 28707 0170 0AB9     		cbnz	r2, .L2040
 28708              	.LVL2261:
 28709              	.LBB3650:
 28710              	.LBI3650:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28711              		.loc 1 537 5 is_stmt 1 view .LVU7658
 28712              	.LBB3651:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 28713              		.loc 1 539 3 view .LVU7659
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 28714              		.loc 1 539 9 is_stmt 0 view .LVU7660
 28715 0172 0722     		movs	r2, #7
 28716 0174 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 28717              		.loc 1 540 3 is_stmt 1 view .LVU7661
 28718              	.LVL2262:
 28719              	.L2040:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 28720              		.loc 1 540 3 is_stmt 0 view .LVU7662
 28721              	.LBE3651:
 28722              	.LBE3650:
 28723              	.LBE3649:
 28724              	.LBE3648:
5822:src/xeq.c     **** 
 28725              		.loc 1 5822 1 view .LVU7663
 28726 0176 0AB0     		add	sp, sp, #40
 28727              		.cfi_remember_state
 28728              		.cfi_def_cfa_offset 32
 28729              		@ sp needed
 28730 0178 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 28731              	.L2068:
 28732              		.cfi_restore_state
5778:src/xeq.c     **** 		StackBase = XromStack;
 28733              		.loc 1 5778 3 is_stmt 1 view .LVU7664
 28734 017c 124C     		ldr	r4, .L2069+24
 28735 017e 0D48     		ldr	r0, .L2069+4
 28736 0180 2168     		ldr	r1, [r4]
 28737 0182 C022     		movs	r2, #192
 28738 0184 FFF7FEFF 		bl	xcopy
 28739              	.LVL2263:
5779:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28740              		.loc 1 5779 3 view .LVU7665
5779:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28741              		.loc 1 5779 13 is_stmt 0 view .LVU7666
 28742 0188 2660     		str	r6, [r4]
 28743 018a B2E7     		b	.L2046
 28744              	.L2067:
5771:src/xeq.c     **** #endif
 28745              		.loc 1 5771 3 is_stmt 1 view .LVU7667
ARM GAS  /tmp/ccjeMhND.s 			page 734


5771:src/xeq.c     **** #endif
 28746              		.loc 1 5771 22 is_stmt 0 view .LVU7668
 28747 018c 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 28748 0190 43F04003 		orr	r3, r3, #64
 28749 0194 82F8E937 		strb	r3, [r2, #2025]
5773:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
 28750              		.loc 1 5773 3 is_stmt 1 view .LVU7669
 28751 0198 C120     		movs	r0, #193
 28752 019a FFF7FEFF 		bl	op_float
 28753              	.LVL2264:
 28754 019e A8E7     		b	.L2046
 28755              	.LVL2265:
 28756              	.L2049:
 28757              	.LBB3652:
5818:src/xeq.c     **** 			return;
 28758              		.loc 1 5818 5 view .LVU7670
 28759              	.LBB3642:
 28760              	.LBI3642:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28761              		.loc 1 537 5 view .LVU7671
 28762              	.LBB3643:
 538:src/xeq.c     **** 		Error = e;
 28763              		.loc 1 538 2 view .LVU7672
 538:src/xeq.c     **** 		Error = e;
 28764              		.loc 1 538 12 is_stmt 0 view .LVU7673
 28765 01a0 084B     		ldr	r3, .L2069+20
 538:src/xeq.c     **** 		Error = e;
 28766              		.loc 1 538 5 view .LVU7674
 28767 01a2 1A68     		ldr	r2, [r3]
 28768 01a4 002A     		cmp	r2, #0
 28769 01a6 E6D1     		bne	.L2040
 28770              	.LVL2266:
 28771              	.LBB3644:
 28772              	.LBI3644:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28773              		.loc 1 537 5 is_stmt 1 view .LVU7675
 28774              	.LBB3645:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 28775              		.loc 1 539 3 view .LVU7676
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 28776              		.loc 1 539 9 is_stmt 0 view .LVU7677
 28777 01a8 0122     		movs	r2, #1
 28778 01aa 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 28779              		.loc 1 540 3 is_stmt 1 view .LVU7678
 28780              	.LVL2267:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 28781              		.loc 1 540 3 is_stmt 0 view .LVU7679
 28782              	.LBE3645:
 28783              	.LBE3644:
 28784              	.LBE3643:
 28785              	.LBE3642:
5819:src/xeq.c     **** 		}
 28786              		.loc 1 5819 4 is_stmt 1 view .LVU7680
 28787 01ac E3E7     		b	.L2040
 28788              	.L2070:
 28789 01ae 00BF     		.align	2
ARM GAS  /tmp/ccjeMhND.s 			page 735


 28790              	.L2069:
 28791 01b0 00000000 		.word	XromParams
 28792 01b4 00000000 		.word	XromLocal
 28793 01b8 00000000 		.word	main_ram
 28794 01bc 00000000 		.word	RetStk
 28795 01c0 00000000 		.word	const_NaN
 28796 01c4 00000000 		.word	Error
 28797 01c8 00000000 		.word	StackBase
 28798 01cc 00000000 		.word	StateWhileOn
 28799              	.LBE3652:
 28800              		.cfi_endproc
 28801              	.LFE261:
 28803              		.section	.rodata.xeq.str1.4,"aMS",%progbits,1
 28804              		.align	2
 28805              	.LC8:
 28806 0000 25303458 		.ascii	"%04X:%s\000"
 28806      3A257300 
 28807              		.section	.text.xeq,"ax",%progbits
 28808              		.align	1
 28809              		.p2align 2,,3
 28810              		.global	xeq
 28811              		.syntax unified
 28812              		.thumb
 28813              		.thumb_func
 28814              		.fpu fpv4-sp-d16
 28816              	xeq:
 28817              	.LVL2268:
 28818              	.LFB246:
5083:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 28819              		.loc 1 5083 1 view -0
 28820              		.cfi_startproc
 28821              		@ args = 0, pretend = 0, frame = 416
 28822              		@ frame_needed = 0, uses_anonymous_args = 0
5084:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
 28823              		.loc 1 5084 2 view .LVU7682
5085:src/xeq.c     **** 	const struct _ustate old = UState;
 28824              		.loc 1 5085 2 view .LVU7683
5083:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 28825              		.loc 1 5083 1 is_stmt 0 view .LVU7684
 28826 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 28827              		.cfi_def_cfa_offset 36
 28828              		.cfi_offset 4, -36
 28829              		.cfi_offset 5, -32
 28830              		.cfi_offset 6, -28
 28831              		.cfi_offset 7, -24
 28832              		.cfi_offset 8, -20
 28833              		.cfi_offset 9, -16
 28834              		.cfi_offset 10, -12
 28835              		.cfi_offset 11, -8
 28836              		.cfi_offset 14, -4
5085:src/xeq.c     **** 	const struct _ustate old = UState;
 28837              		.loc 1 5085 31 view .LVU7685
 28838 0004 8F4F     		ldr	r7, .L2349
 28839              	.LBB3950:
 28840              	.LBB3951:
 735:src/xeq.c     **** }
 28841              		.loc 1 735 15 view .LVU7686
ARM GAS  /tmp/ccjeMhND.s 			page 736


 28842 0006 904C     		ldr	r4, .L2349+4
 28843              	.LBE3951:
 28844              	.LBE3950:
5085:src/xeq.c     **** 	const struct _ustate old = UState;
 28845              		.loc 1 5085 31 view .LVU7687
 28846 0008 3B68     		ldr	r3, [r7]
 28847              	.LBB3956:
 28848              	.LBB3952:
 735:src/xeq.c     **** }
 28849              		.loc 1 735 15 view .LVU7688
 28850 000a E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 28851              	.LBE3952:
 28852              	.LBE3956:
5088:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 28853              		.loc 1 5088 23 view .LVU7689
 28854 000c B3F8E057 		ldrh	r5, [r3, #2016]
5086:src/xeq.c     **** 	const unsigned char lift = get_lift();
 28855              		.loc 1 5086 23 view .LVU7690
 28856 0010 D3F8E817 		ldr	r1, [r3, #2024]
5085:src/xeq.c     **** 	const struct _ustate old = UState;
 28857              		.loc 1 5085 23 view .LVU7691
 28858 0014 B3F8FCB7 		ldrh	fp, [r3, #2044]
 28859              	.LVL2269:
5086:src/xeq.c     **** 	const unsigned char lift = get_lift();
 28860              		.loc 1 5086 2 is_stmt 1 view .LVU7692
5104:src/xeq.c     **** #if defined(CONSOLE)
 28861              		.loc 1 5104 2 is_stmt 0 view .LVU7693
 28862 0018 DFF85C92 		ldr	r9, .L2349+52
5083:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 28863              		.loc 1 5083 1 view .LVU7694
 28864 001c EBB0     		sub	sp, sp, #428
 28865              		.cfi_def_cfa_offset 464
5086:src/xeq.c     **** 	const unsigned char lift = get_lift();
 28866              		.loc 1 5086 23 view .LVU7695
 28867 001e 0AAE     		add	r6, sp, #40
5088:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 28868              		.loc 1 5088 23 view .LVU7696
 28869 0020 0395     		str	r5, [sp, #12]
5089:src/xeq.c     **** #ifdef INFRARED
 28870              		.loc 1 5089 12 view .LVU7697
 28871 0022 E569     		ldr	r5, [r4, #28]
 28872 0024 0495     		str	r5, [sp, #16]
5083:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 28873              		.loc 1 5083 1 view .LVU7698
 28874 0026 0546     		mov	r5, r0
5086:src/xeq.c     **** 	const unsigned char lift = get_lift();
 28875              		.loc 1 5086 23 view .LVU7699
 28876 0028 D3F8E407 		ldr	r0, [r3, #2020]
 28877              	.LVL2270:
5086:src/xeq.c     **** 	const unsigned char lift = get_lift();
 28878              		.loc 1 5086 23 view .LVU7700
 28879 002c 86E80300 		stm	r6, {r0, r1}
5087:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
 28880              		.loc 1 5087 2 is_stmt 1 view .LVU7701
 28881              	.LBB3957:
 28882              	.LBI3950:
 734:src/xeq.c     **** 	return State2.state_lift;
ARM GAS  /tmp/ccjeMhND.s 			page 737


 28883              		.loc 1 734 12 view .LVU7702
 28884              	.LBB3953:
 735:src/xeq.c     **** }
 28885              		.loc 1 735 2 view .LVU7703
 28886              	.LBE3953:
 28887              	.LBE3957:
5095:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
 28888              		.loc 1 5095 31 is_stmt 0 view .LVU7704
 28889 0030 6FF49F71 		mvn	r1, #318
 28890 0034 6B18     		adds	r3, r5, r1
 28891              	.LBB3958:
 28892              	.LBB3954:
 735:src/xeq.c     **** }
 28893              		.loc 1 735 15 view .LVU7705
 28894 0036 C2F38012 		ubfx	r2, r2, #6, #1
 28895              	.LBE3954:
 28896              	.LBE3958:
5104:src/xeq.c     **** #if defined(CONSOLE)
 28897              		.loc 1 5104 2 view .LVU7706
 28898 003a 0DF5847A 		add	r10, sp, #264
5095:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
 28899              		.loc 1 5095 5 view .LVU7707
 28900 003e 012B     		cmp	r3, #1
5104:src/xeq.c     **** #if defined(CONSOLE)
 28901              		.loc 1 5104 2 view .LVU7708
 28902 0040 D9F80010 		ldr	r1, [r9]
 28903              	.LBB3959:
 28904              	.LBB3955:
 735:src/xeq.c     **** }
 28905              		.loc 1 735 15 view .LVU7709
 28906 0044 0292     		str	r2, [sp, #8]
 28907              	.LVL2271:
 735:src/xeq.c     **** }
 28908              		.loc 1 735 15 view .LVU7710
 28909              	.LBE3955:
 28910              	.LBE3959:
5088:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 28911              		.loc 1 5088 2 is_stmt 1 view .LVU7711
5089:src/xeq.c     **** #ifdef INFRARED
 28912              		.loc 1 5089 2 view .LVU7712
5095:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
 28913              		.loc 1 5095 2 view .LVU7713
5104:src/xeq.c     **** #if defined(CONSOLE)
 28914              		.loc 1 5104 2 is_stmt 0 view .LVU7714
 28915 0046 5046     		mov	r0, r10
5095:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
 28916              		.loc 1 5095 5 view .LVU7715
 28917 0048 76D9     		bls	.L2328
5104:src/xeq.c     **** #if defined(CONSOLE)
 28918              		.loc 1 5104 2 is_stmt 1 view .LVU7716
 28919 004a A022     		movs	r2, #160
 28920 004c FFF7FEFF 		bl	xcopy
 28921              	.LVL2272:
5109:src/xeq.c     **** 		char buf[16];
 28922              		.loc 1 5109 2 view .LVU7717
5109:src/xeq.c     **** 		char buf[16];
 28923              		.loc 1 5109 5 is_stmt 0 view .LVU7718
ARM GAS  /tmp/ccjeMhND.s 			page 738


 28924 0050 94F91730 		ldrsb	r3, [r4, #23]
 28925 0054 002B     		cmp	r3, #0
 28926 0056 57DB     		blt	.L2076
 28927              	.L2077:
5127:src/xeq.c     **** 	State2.wascomplex = 0;
 28928              		.loc 1 5127 2 is_stmt 1 view .LVU7719
5128:src/xeq.c     **** 	if (isDBL(op))
 28929              		.loc 1 5128 20 is_stmt 0 view .LVU7720
 28930 0058 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
5127:src/xeq.c     **** 	State2.wascomplex = 0;
 28931              		.loc 1 5127 7 view .LVU7721
 28932 005a 7C49     		ldr	r1, .L2349+8
 28933 005c 0023     		movs	r3, #0
5128:src/xeq.c     **** 	if (isDBL(op))
 28934              		.loc 1 5128 20 view .LVU7722
 28935 005e 63F38712 		bfi	r2, r3, #6, #2
 28936 0062 2275     		strb	r2, [r4, #20]
5129:src/xeq.c     **** 		multi(op);
 28937              		.loc 1 5129 6 view .LVU7723
 28938 0064 05F47042 		and	r2, r5, #61440
5129:src/xeq.c     **** 		multi(op);
 28939              		.loc 1 5129 5 view .LVU7724
 28940 0068 B2F5704F 		cmp	r2, #61440
5127:src/xeq.c     **** 	State2.wascomplex = 0;
 28941              		.loc 1 5127 7 view .LVU7725
 28942 006c 0B60     		str	r3, [r1]
5128:src/xeq.c     **** 	if (isDBL(op))
 28943              		.loc 1 5128 2 is_stmt 1 view .LVU7726
5129:src/xeq.c     **** 		multi(op);
 28944              		.loc 1 5129 2 view .LVU7727
5129:src/xeq.c     **** 		multi(op);
 28945              		.loc 1 5129 5 is_stmt 0 view .LVU7728
 28946 006e 00F0B780 		beq	.L2329
5131:src/xeq.c     **** 		rargs(op);
 28947              		.loc 1 5131 7 is_stmt 1 view .LVU7729
5131:src/xeq.c     **** 		rargs(op);
 28948              		.loc 1 5131 10 is_stmt 0 view .LVU7730
 28949 0072 7AB9     		cbnz	r2, .L2330
5134:src/xeq.c     **** 		switch (opKIND(op)) {
 28950              		.loc 1 5134 3 is_stmt 1 view .LVU7731
5134:src/xeq.c     **** 		switch (opKIND(op)) {
 28951              		.loc 1 5134 13 is_stmt 0 view .LVU7732
 28952 0074 764A     		ldr	r2, .L2349+12
 28953 0076 C5F30723 		ubfx	r3, r5, #8, #8
5134:src/xeq.c     **** 		switch (opKIND(op)) {
 28954              		.loc 1 5134 15 view .LVU7733
 28955 007a 1580     		strh	r5, [r2]	@ movhi
5135:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
 28956              		.loc 1 5135 3 is_stmt 1 view .LVU7734
 28957 007c 062B     		cmp	r3, #6
 28958 007e 00F20981 		bhi	.L2112
 28959 0082 DFE813F0 		tbh	[pc, r3, lsl #1]
 28960              	.L2114:
 28961 0086 A501     		.2byte	(.L2120-.L2114)/2
 28962 0088 6F00     		.2byte	(.L2119-.L2114)/2
 28963 008a 4202     		.2byte	(.L2118-.L2114)/2
 28964 008c FD00     		.2byte	(.L2117-.L2114)/2
ARM GAS  /tmp/ccjeMhND.s 			page 739


 28965 008e 7F02     		.2byte	(.L2116-.L2114)/2
 28966 0090 0A02     		.2byte	(.L2115-.L2114)/2
 28967 0092 D801     		.2byte	(.L2113-.L2114)/2
 28968              		.p2align 1
 28969              	.L2330:
5132:src/xeq.c     **** 	else {
 28970              		.loc 1 5132 3 view .LVU7735
 28971              	.LVL2273:
 28972              	.LBB3960:
 28973              	.LBI3960:
4951:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
 28974              		.loc 1 4951 13 view .LVU7736
 28975              	.LBB3961:
4952:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 28976              		.loc 1 4952 2 view .LVU7737
4953:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 28977              		.loc 1 4953 2 view .LVU7738
4953:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 28978              		.loc 1 4953 27 is_stmt 0 view .LVU7739
 28979 0094 4FEA1528 		lsr	r8, r5, #8
4955:src/xeq.c     **** 
 28980              		.loc 1 4955 33 view .LVU7740
 28981 0098 6E4A     		ldr	r2, .L2349+16
4957:src/xeq.c     **** 
 28982              		.loc 1 4957 12 view .LVU7741
 28983 009a 6D49     		ldr	r1, .L2349+12
4953:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 28984              		.loc 1 4953 27 view .LVU7742
 28985 009c A8F12008 		sub	r8, r8, #32
 28986 00a0 5FFA88F8 		uxtb	r8, r8
 28987              	.LVL2274:
4954:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
 28988              		.loc 1 4954 2 is_stmt 1 view .LVU7743
4955:src/xeq.c     **** 
 28989              		.loc 1 4955 2 view .LVU7744
4955:src/xeq.c     **** 
 28990              		.loc 1 4955 33 is_stmt 0 view .LVU7745
 28991 00a4 02EB0810 		add	r0, r2, r8, lsl #4
4957:src/xeq.c     **** 
 28992              		.loc 1 4957 14 view .LVU7746
 28993 00a8 A1F80080 		strh	r8, [r1]	@ movhi
4955:src/xeq.c     **** 
 28994              		.loc 1 4955 33 view .LVU7747
 28995 00ac 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 28996 00ae CDE90603 		strd	r0, r3, [sp, #24]
 28997              	.LVL2275:
4957:src/xeq.c     **** 
 28998              		.loc 1 4957 2 is_stmt 1 view .LVU7748
4959:src/xeq.c     **** 
 28999              		.loc 1 4959 2 view .LVU7749
4955:src/xeq.c     **** 
 29000              		.loc 1 4955 33 is_stmt 0 view .LVU7750
 29001 00b2 4FEA0813 		lsl	r3, r8, #4
 29002 00b6 0593     		str	r3, [sp, #20]
4959:src/xeq.c     **** 
 29003              		.loc 1 4959 2 view .LVU7751
 29004 00b8 FFF7FEFF 		bl	process_cmdline
ARM GAS  /tmp/ccjeMhND.s 			page 740


 29005              	.LVL2276:
4961:src/xeq.c     **** 		illegal(op);
 29006              		.loc 1 4961 2 is_stmt 1 view .LVU7752
4961:src/xeq.c     **** 		illegal(op);
 29007              		.loc 1 4961 5 is_stmt 0 view .LVU7753
 29008 00bc B8F18E0F 		cmp	r8, #142
 29009 00c0 0698     		ldr	r0, [sp, #24]
 29010 00c2 644A     		ldr	r2, .L2349+16
 29011 00c4 00F2E680 		bhi	.L2112
4965:src/xeq.c     **** 		set_lift();
 29012              		.loc 1 4965 2 is_stmt 1 view .LVU7754
4965:src/xeq.c     **** 		set_lift();
 29013              		.loc 1 4965 6 is_stmt 0 view .LVU7755
 29014 00c8 0599     		ldr	r1, [sp, #20]
 29015 00ca 5158     		ldr	r1, [r2, r1]
 29016 00cc 0691     		str	r1, [sp, #24]
4965:src/xeq.c     **** 		set_lift();
 29017              		.loc 1 4965 5 view .LVU7756
 29018 00ce 0029     		cmp	r1, #0
 29019 00d0 00F0AD80 		beq	.L2305
4952:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 29020              		.loc 1 4952 15 view .LVU7757
 29021 00d4 05F07F01 		and	r1, r5, #127
 29022              	.LVL2277:
4970:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 29023              		.loc 1 4970 2 is_stmt 1 view .LVU7758
4970:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 29024              		.loc 1 4970 5 is_stmt 0 view .LVU7759
 29025 00d8 2D06     		lsls	r5, r5, #24
 29026              	.LVL2278:
4970:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 29027              		.loc 1 4970 5 view .LVU7760
 29028 00da 40F1DA82 		bpl	.L2093
4971:src/xeq.c     **** 			// Get the argument by reading a register
 29029              		.loc 1 4971 3 is_stmt 1 view .LVU7761
4971:src/xeq.c     **** 			// Get the argument by reading a register
 29030              		.loc 1 4971 19 is_stmt 0 view .LVU7762
 29031 00de 4579     		ldrb	r5, [r0, #5]	@ zero_extendqisi2
4971:src/xeq.c     **** 			// Get the argument by reading a register
 29032              		.loc 1 4971 6 view .LVU7763
 29033 00e0 EB07     		lsls	r3, r5, #31
 29034 00e2 40F14183 		bpl	.L2094
 29035              	.LBB3962:
4973:src/xeq.c     **** 			unsigned long long int regval;
 29036              		.loc 1 4973 4 is_stmt 1 view .LVU7764
4974:src/xeq.c     **** 
 29037              		.loc 1 4974 4 view .LVU7765
4976:src/xeq.c     **** 				// Invalid register specified for indirect access
 29038              		.loc 1 4976 4 view .LVU7766
4976:src/xeq.c     **** 				// Invalid register specified for indirect access
 29039              		.loc 1 4976 14 is_stmt 0 view .LVU7767
 29040 00e6 0A20     		movs	r0, #10
 29041 00e8 0891     		str	r1, [sp, #32]
 29042 00ea FFF7FEFF 		bl	get_reg_limit
 29043              	.LVL2279:
4976:src/xeq.c     **** 				// Invalid register specified for indirect access
 29044              		.loc 1 4976 7 view .LVU7768
ARM GAS  /tmp/ccjeMhND.s 			page 741


 29045 00ee 0899     		ldr	r1, [sp, #32]
 29046 00f0 8142     		cmp	r1, r0
 29047 00f2 40F2BA82 		bls	.L2095
4978:src/xeq.c     **** 				return;
 29048              		.loc 1 4978 5 is_stmt 1 view .LVU7769
 29049              	.LVL2280:
 29050              	.LBB3963:
 29051              	.LBI3963:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29052              		.loc 1 537 5 view .LVU7770
 29053              	.LBB3964:
 538:src/xeq.c     **** 		Error = e;
 29054              		.loc 1 538 2 view .LVU7771
 538:src/xeq.c     **** 		Error = e;
 29055              		.loc 1 538 12 is_stmt 0 view .LVU7772
 29056 00f6 584B     		ldr	r3, .L2349+20
 29057 00f8 1A68     		ldr	r2, [r3]
 538:src/xeq.c     **** 		Error = e;
 29058              		.loc 1 538 5 view .LVU7773
 29059 00fa 0AB9     		cbnz	r2, .L2097
 29060              	.LVL2281:
 29061              	.LBB3965:
 29062              	.LBI3965:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29063              		.loc 1 537 5 is_stmt 1 view .LVU7774
 29064              	.LBB3966:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 29065              		.loc 1 539 3 view .LVU7775
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 29066              		.loc 1 539 9 is_stmt 0 view .LVU7776
 29067 00fc 0822     		movs	r2, #8
 29068 00fe 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 29069              		.loc 1 540 3 is_stmt 1 view .LVU7777
 29070              	.LVL2282:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 29071              		.loc 1 540 3 is_stmt 0 view .LVU7778
 29072              	.LBE3966:
 29073              	.LBE3965:
 29074              	.LBE3964:
 29075              	.LBE3963:
4979:src/xeq.c     **** 			}
 29076              		.loc 1 4979 5 is_stmt 1 view .LVU7779
4979:src/xeq.c     **** 			}
 29077              		.loc 1 4979 5 is_stmt 0 view .LVU7780
 29078              	.LBE3962:
 29079              	.LBE3961:
 29080              	.LBE3960:
5143:src/xeq.c     **** 		}
 29081              		.loc 1 5143 12 is_stmt 1 view .LVU7781
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 29082              		.loc 1 5153 2 view .LVU7782
 29083              	.L2097:
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 29084              		.loc 1 5153 2 is_stmt 0 view .LVU7783
 29085 0100 DFF87881 		ldr	r8, .L2349+56
 29086 0104 1046     		mov	r0, r2
ARM GAS  /tmp/ccjeMhND.s 			page 742


 29087 0106 CEE0     		b	.L2210
 29088              	.LVL2283:
 29089              	.L2076:
5109:src/xeq.c     **** 		char buf[16];
 29090              		.loc 1 5109 22 view .LVU7784
 29091 0108 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
5109:src/xeq.c     **** 		char buf[16];
 29092              		.loc 1 5109 19 view .LVU7785
 29093 010a 9B07     		lsls	r3, r3, #30
 29094 010c A4D4     		bmi	.L2077
 29095              	.LBB3991:
5110:src/xeq.c     **** 		if (Running)
 29096              		.loc 1 5110 3 is_stmt 1 view .LVU7786
5111:src/xeq.c     **** 			print_step(op);
 29097              		.loc 1 5111 3 view .LVU7787
5111:src/xeq.c     **** 			print_step(op);
 29098              		.loc 1 5111 7 is_stmt 0 view .LVU7788
 29099 010e DFF86C81 		ldr	r8, .L2349+56
5111:src/xeq.c     **** 			print_step(op);
 29100              		.loc 1 5111 6 view .LVU7789
 29101 0112 D8F80030 		ldr	r3, [r8]
 29102 0116 002B     		cmp	r3, #0
 29103 0118 40F09080 		bne	.L2331
5114:src/xeq.c     **** 		DispMsg = TraceBuffer;
 29104              		.loc 1 5114 4 is_stmt 1 view .LVU7790
 29105 011c 39A9     		add	r1, sp, #228
 29106 011e 2846     		mov	r0, r5
 29107 0120 FFF7FEFF 		bl	prt
 29108              	.LVL2284:
 29109 0124 4D49     		ldr	r1, .L2349+24
 29110 0126 0346     		mov	r3, r0
 29111 0128 2A46     		mov	r2, r5
 29112 012a 4D48     		ldr	r0, .L2349+28
 29113 012c FFF7FEFF 		bl	sprintf
 29114              	.LVL2285:
 29115              	.L2079:
5115:src/xeq.c     **** 	}
 29116              		.loc 1 5115 3 view .LVU7791
5115:src/xeq.c     **** 	}
 29117              		.loc 1 5115 11 is_stmt 0 view .LVU7792
 29118 0130 4C4B     		ldr	r3, .L2349+32
 29119 0132 4B4A     		ldr	r2, .L2349+28
 29120 0134 1A60     		str	r2, [r3]
 29121 0136 8FE7     		b	.L2077
 29122              	.LVL2286:
 29123              	.L2328:
5115:src/xeq.c     **** 	}
 29124              		.loc 1 5115 11 view .LVU7793
 29125              	.LBE3991:
5098:src/xeq.c     **** 		Cmdline[0] = '0';
 29126              		.loc 1 5098 3 is_stmt 1 view .LVU7794
5099:src/xeq.c     **** 		Cmdline[1] = '\0';
 29127              		.loc 1 5099 14 is_stmt 0 view .LVU7795
 29128 0138 3023     		movs	r3, #48
5098:src/xeq.c     **** 		Cmdline[0] = '0';
 29129              		.loc 1 5098 14 view .LVU7796
 29130 013a 4FF00008 		mov	r8, #0
ARM GAS  /tmp/ccjeMhND.s 			page 743


5104:src/xeq.c     **** #if defined(CONSOLE)
 29131              		.loc 1 5104 2 view .LVU7797
 29132 013e A022     		movs	r2, #160
5099:src/xeq.c     **** 		Cmdline[1] = '\0';
 29133              		.loc 1 5099 14 view .LVU7798
 29134 0140 2384     		strh	r3, [r4, #32]	@ movhi
5098:src/xeq.c     **** 		Cmdline[0] = '0';
 29135              		.loc 1 5098 14 view .LVU7799
 29136 0142 84F81E80 		strb	r8, [r4, #30]
 29137              	.LVL2287:
5099:src/xeq.c     **** 		Cmdline[1] = '\0';
 29138              		.loc 1 5099 3 is_stmt 1 view .LVU7800
5100:src/xeq.c     **** 	}
 29139              		.loc 1 5100 3 view .LVU7801
5104:src/xeq.c     **** #if defined(CONSOLE)
 29140              		.loc 1 5104 2 view .LVU7802
 29141 0146 FFF7FEFF 		bl	xcopy
 29142              	.LVL2288:
5109:src/xeq.c     **** 		char buf[16];
 29143              		.loc 1 5109 2 view .LVU7803
5109:src/xeq.c     **** 		char buf[16];
 29144              		.loc 1 5109 5 is_stmt 0 view .LVU7804
 29145 014a 94F91730 		ldrsb	r3, [r4, #23]
 29146 014e 4345     		cmp	r3, r8
 29147 0150 DADB     		blt	.L2076
5127:src/xeq.c     **** 	State2.wascomplex = 0;
 29148              		.loc 1 5127 2 is_stmt 1 view .LVU7805
5128:src/xeq.c     **** 	if (isDBL(op))
 29149              		.loc 1 5128 20 is_stmt 0 view .LVU7806
 29150 0152 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
5127:src/xeq.c     **** 	State2.wascomplex = 0;
 29151              		.loc 1 5127 7 view .LVU7807
 29152 0154 3D49     		ldr	r1, .L2349+8
5134:src/xeq.c     **** 		switch (opKIND(op)) {
 29153              		.loc 1 5134 13 view .LVU7808
 29154 0156 3E4A     		ldr	r2, .L2349+12
5127:src/xeq.c     **** 	State2.wascomplex = 0;
 29155              		.loc 1 5127 7 view .LVU7809
 29156 0158 C1F80080 		str	r8, [r1]
5128:src/xeq.c     **** 	if (isDBL(op))
 29157              		.loc 1 5128 2 is_stmt 1 view .LVU7810
5128:src/xeq.c     **** 	if (isDBL(op))
 29158              		.loc 1 5128 20 is_stmt 0 view .LVU7811
 29159 015c 68F38713 		bfi	r3, r8, #6, #2
 29160 0160 2375     		strb	r3, [r4, #20]
5129:src/xeq.c     **** 		multi(op);
 29161              		.loc 1 5129 2 is_stmt 1 view .LVU7812
5134:src/xeq.c     **** 		switch (opKIND(op)) {
 29162              		.loc 1 5134 3 view .LVU7813
5134:src/xeq.c     **** 		switch (opKIND(op)) {
 29163              		.loc 1 5134 15 is_stmt 0 view .LVU7814
 29164 0162 1580     		strh	r5, [r2]	@ movhi
5135:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
 29165              		.loc 1 5135 3 is_stmt 1 view .LVU7815
 29166              	.L2119:
5137:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
 29167              		.loc 1 5137 18 view .LVU7816
ARM GAS  /tmp/ccjeMhND.s 			page 744


 29168              	.LVL2289:
 29169              	.LBB3992:
 29170              	.LBI3992:
4399:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
 29171              		.loc 1 4399 13 view .LVU7817
 29172              	.LBB3993:
4400:src/xeq.c     **** 
 29173              		.loc 1 4400 2 view .LVU7818
4400:src/xeq.c     **** 
 29174              		.loc 1 4400 21 is_stmt 0 view .LVU7819
 29175 0164 EDB2     		uxtb	r5, r5
 29176              	.LVL2290:
4402:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
 29177              		.loc 1 4402 2 is_stmt 1 view .LVU7820
 29178 0166 FFF7FEFF 		bl	process_cmdline
 29179              	.LVL2291:
4403:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 29180              		.loc 1 4403 2 view .LVU7821
4403:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 29181              		.loc 1 4403 5 is_stmt 0 view .LVU7822
 29182 016a BF2D     		cmp	r5, #191
 29183 016c 00F22883 		bhi	.L2155
4404:src/xeq.c     **** 			bad_mode_error();
 29184              		.loc 1 4404 3 is_stmt 1 view .LVU7823
4404:src/xeq.c     **** 			bad_mode_error();
 29185              		.loc 1 4404 7 is_stmt 0 view .LVU7824
 29186 0170 3B68     		ldr	r3, [r7]
 29187 0172 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4404:src/xeq.c     **** 			bad_mode_error();
 29188              		.loc 1 4404 6 view .LVU7825
 29189 0176 13F0010F 		tst	r3, #1
4404:src/xeq.c     **** 			bad_mode_error();
 29190              		.loc 1 4404 23 view .LVU7826
 29191 017a 3B4B     		ldr	r3, .L2349+36
4404:src/xeq.c     **** 			bad_mode_error();
 29192              		.loc 1 4404 6 view .LVU7827
 29193 017c 40F0AF84 		bne	.L2296
 29194 0180 2A01     		lsls	r2, r5, #4
 29195              	.L2156:
4406:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 29196              		.loc 1 4406 8 is_stmt 1 view .LVU7828
4406:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 29197              		.loc 1 4406 14 is_stmt 0 view .LVU7829
 29198 0182 53F80280 		ldr	r8, [r3, r2]
 29199 0186 1344     		add	r3, r3, r2
 29200 0188 0593     		str	r3, [sp, #20]
4406:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 29201              		.loc 1 4406 11 view .LVU7830
 29202 018a B8F1000F 		cmp	r8, #0
 29203 018e 14D0     		beq	.L2160
 29204              	.LBB3994:
4407:src/xeq.c     **** 			if (dispatch_xrom(fp))
 29205              		.loc 1 4407 4 is_stmt 1 view .LVU7831
 29206              	.LVL2292:
4408:src/xeq.c     **** 				return;
 29207              		.loc 1 4408 4 view .LVU7832
4408:src/xeq.c     **** 				return;
ARM GAS  /tmp/ccjeMhND.s 			page 745


 29208              		.loc 1 4408 8 is_stmt 0 view .LVU7833
 29209 0190 4046     		mov	r0, r8
 29210 0192 FFF7FEFF 		bl	dispatch_xrom
 29211              	.LVL2293:
4408:src/xeq.c     **** 				return;
 29212              		.loc 1 4408 7 view .LVU7834
 29213 0196 059B     		ldr	r3, [sp, #20]
 29214 0198 0028     		cmp	r0, #0
 29215 019a 40F06382 		bne	.L2084
4411:src/xeq.c     **** 				case 2:	lift_if_enabled();
 29216              		.loc 1 4411 5 is_stmt 1 view .LVU7835
 29217 019e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 29218 01a0 03F00303 		and	r3, r3, #3
 29219 01a4 012B     		cmp	r3, #1
 29220 01a6 00F0F984 		beq	.L2162
 29221 01aa 022B     		cmp	r3, #2
 29222 01ac 03D1     		bne	.L2163
4412:src/xeq.c     **** 				case 1:	lift_if_enabled();
 29223              		.loc 1 4412 13 view .LVU7836
 29224              	.LBB3995:
 29225              	.LBI3995:
 738:src/xeq.c     **** 	if (get_lift())
 29226              		.loc 1 738 6 view .LVU7837
 29227              	.LBB3996:
 739:src/xeq.c     **** 		lift();
 29228              		.loc 1 739 2 view .LVU7838
 29229              	.LBB3997:
 29230              	.LBI3997:
 734:src/xeq.c     **** 	return State2.state_lift;
 29231              		.loc 1 734 12 view .LVU7839
 29232              	.LBB3998:
 735:src/xeq.c     **** }
 29233              		.loc 1 735 2 view .LVU7840
 735:src/xeq.c     **** }
 29234              		.loc 1 735 15 is_stmt 0 view .LVU7841
 29235 01ae E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 29236              	.LBE3998:
 29237              	.LBE3997:
 739:src/xeq.c     **** 		lift();
 29238              		.loc 1 739 5 view .LVU7842
 29239 01b0 5B06     		lsls	r3, r3, #25
 29240 01b2 00F1F184 		bmi	.L2332
 29241              	.L2163:
 29242              	.LBE3996:
 29243              	.LBE3995:
4415:src/xeq.c     **** 					break;
 29244              		.loc 1 4415 6 is_stmt 1 view .LVU7843
 29245 01b6 2846     		mov	r0, r5
 29246 01b8 C047     		blx	r8
 29247              	.LVL2294:
4416:src/xeq.c     **** 				}
 29248              		.loc 1 4416 6 view .LVU7844
 29249              	.L2160:
4416:src/xeq.c     **** 				}
 29250              		.loc 1 4416 6 is_stmt 0 view .LVU7845
 29251              	.LBE3994:
4421:src/xeq.c     **** 	if (idx != OP_rCLX)
ARM GAS  /tmp/ccjeMhND.s 			page 746


 29252              		.loc 1 4421 3 is_stmt 1 view .LVU7846
4422:src/xeq.c     **** 		set_lift();
 29253              		.loc 1 4422 2 view .LVU7847
 29254 01ba 274B     		ldr	r3, .L2349+20
4422:src/xeq.c     **** 		set_lift();
 29255              		.loc 1 4422 5 is_stmt 0 view .LVU7848
 29256 01bc 3F2D     		cmp	r5, #63
 29257 01be 1A68     		ldr	r2, [r3]
 29258 01c0 03D0     		beq	.L2087
 29259              	.L2166:
4423:src/xeq.c     **** }
 29260              		.loc 1 4423 3 is_stmt 1 view .LVU7849
 29261              	.LBB4005:
 29262              	.LBI4005:
 748:src/xeq.c     ****     State2.state_lift = 1;
 29263              		.loc 1 748 6 view .LVU7850
 29264              	.LBB4006:
 749:src/xeq.c     **** }
 29265              		.loc 1 749 5 view .LVU7851
 749:src/xeq.c     **** }
 29266              		.loc 1 749 23 is_stmt 0 view .LVU7852
 29267 01c2 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 29268 01c4 41F04001 		orr	r1, r1, #64
 29269 01c8 E175     		strb	r1, [r4, #23]
 29270              	.LVL2295:
 29271              	.L2087:
 749:src/xeq.c     **** }
 29272              		.loc 1 749 23 view .LVU7853
 29273              	.LBE4006:
 29274              	.LBE4005:
 29275              	.LBE3993:
 29276              	.LBE3992:
5143:src/xeq.c     **** 		}
 29277              		.loc 1 5143 12 is_stmt 1 discriminator 1 view .LVU7854
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 29278              		.loc 1 5153 2 discriminator 1 view .LVU7855
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 29279              		.loc 1 5153 5 is_stmt 0 discriminator 1 view .LVU7856
 29280 01ca 002A     		cmp	r2, #0
 29281 01cc 98D1     		bne	.L2097
 29282              	.LVL2296:
 29283              	.L2197:
5222:src/xeq.c     **** #ifdef INFRARED
 29284              		.loc 1 5222 2 is_stmt 1 view .LVU7857
 29285              	.LBB4044:
 29286              	.LBI4044:
4227:src/xeq.c     **** 	// extern int IntMaxWindow;
 29287              		.loc 1 4227 6 view .LVU7858
 29288              	.LBB4045:
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 29289              		.loc 1 4230 2 view .LVU7859
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 29290              		.loc 1 4230 16 is_stmt 0 view .LVU7860
 29291 01ce 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4231:src/xeq.c     **** }
 29292              		.loc 1 4231 15 view .LVU7861
 29293 01d0 0022     		movs	r2, #0
ARM GAS  /tmp/ccjeMhND.s 			page 747


4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 29294              		.loc 1 4230 16 view .LVU7862
 29295 01d2 6FF3C503 		bfc	r3, #3, #3
 29296 01d6 2375     		strb	r3, [r4, #20]
4231:src/xeq.c     **** }
 29297              		.loc 1 4231 2 is_stmt 1 view .LVU7863
4231:src/xeq.c     **** }
 29298              		.loc 1 4231 15 is_stmt 0 view .LVU7864
 29299 01d8 6274     		strb	r2, [r4, #17]
 29300              	.LBE4045:
 29301              	.LBE4044:
5227:src/xeq.c     **** 
 29302              		.loc 1 5227 1 view .LVU7865
 29303 01da 6BB0     		add	sp, sp, #428
 29304              		.cfi_remember_state
 29305              		.cfi_def_cfa_offset 36
 29306              		@ sp needed
 29307 01dc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 29308              	.LVL2297:
 29309              	.L2329:
 29310              		.cfi_restore_state
5130:src/xeq.c     **** 	else if (isRARG(op))
 29311              		.loc 1 5130 3 is_stmt 1 view .LVU7866
 29312              	.LBB4046:
 29313              	.LBI4046:
5047:src/xeq.c     **** 	const int cmd = opDBL(op);
 29314              		.loc 1 5047 13 view .LVU7867
 29315              	.LBB4047:
5048:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 29316              		.loc 1 5048 2 view .LVU7868
5049:src/xeq.c     **** 
 29317              		.loc 1 5049 12 is_stmt 0 view .LVU7869
 29318 01e0 1B4B     		ldr	r3, .L2349+12
5048:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 29319              		.loc 1 5048 12 view .LVU7870
 29320 01e2 C5F30328 		ubfx	r8, r5, #8, #4
 29321              	.LVL2298:
5049:src/xeq.c     **** 
 29322              		.loc 1 5049 2 is_stmt 1 view .LVU7871
5049:src/xeq.c     **** 
 29323              		.loc 1 5049 14 is_stmt 0 view .LVU7872
 29324 01e6 A3F80080 		strh	r8, [r3]	@ movhi
5051:src/xeq.c     **** 
 29325              		.loc 1 5051 2 is_stmt 1 view .LVU7873
 29326              	.LBB4048:
 29327              	.LBI4048:
1146:src/xeq.c     **** 	process_cmdline();
 29328              		.loc 1 1146 6 view .LVU7874
 29329              	.LBB4049:
1147:src/xeq.c     **** 	set_lift();
 29330              		.loc 1 1147 2 view .LVU7875
 29331 01ea FFF7FEFF 		bl	process_cmdline
 29332              	.LVL2299:
1148:src/xeq.c     **** }
 29333              		.loc 1 1148 2 view .LVU7876
 29334              	.LBB4050:
 29335              	.LBI4050:
ARM GAS  /tmp/ccjeMhND.s 			page 748


 748:src/xeq.c     ****     State2.state_lift = 1;
 29336              		.loc 1 748 6 view .LVU7877
 29337              	.LBB4051:
 749:src/xeq.c     **** }
 29338              		.loc 1 749 5 view .LVU7878
 749:src/xeq.c     **** }
 29339              		.loc 1 749 23 is_stmt 0 view .LVU7879
 29340 01ee E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 29341              	.LBE4051:
 29342              	.LBE4050:
 29343              	.LBE4049:
 29344              	.LBE4048:
5053:src/xeq.c     **** 		illegal(op);
 29345              		.loc 1 5053 5 view .LVU7880
 29346 01f0 B8F10A0F 		cmp	r8, #10
 29347              	.LBB4055:
 29348              	.LBB4054:
 29349              	.LBB4053:
 29350              	.LBB4052:
 749:src/xeq.c     **** }
 29351              		.loc 1 749 23 view .LVU7881
 29352 01f4 43F04003 		orr	r3, r3, #64
 29353 01f8 E375     		strb	r3, [r4, #23]
 29354              	.LBE4052:
 29355              	.LBE4053:
 29356              	.LBE4054:
 29357              	.LBE4055:
5053:src/xeq.c     **** 		illegal(op);
 29358              		.loc 1 5053 2 is_stmt 1 view .LVU7882
5053:src/xeq.c     **** 		illegal(op);
 29359              		.loc 1 5053 5 is_stmt 0 view .LVU7883
 29360 01fa 00F30882 		bgt	.L2333
5057:src/xeq.c     **** 		return;
 29361              		.loc 1 5057 2 is_stmt 1 view .LVU7884
5057:src/xeq.c     **** 		return;
 29362              		.loc 1 5057 6 is_stmt 0 view .LVU7885
 29363 01fe 1B4A     		ldr	r2, .L2349+40
 29364 0200 4FEA0813 		lsl	r3, r8, #4
 29365 0204 D258     		ldr	r2, [r2, r3]
5057:src/xeq.c     **** 		return;
 29366              		.loc 1 5057 5 view .LVU7886
 29367 0206 002A     		cmp	r2, #0
 29368 0208 00F02C82 		beq	.L2084
 29369              	.LBB4056:
5060:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 29370              		.loc 1 5060 3 is_stmt 1 view .LVU7887
 29371              	.LVL2300:
5061:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 29372              		.loc 1 5061 3 view .LVU7888
 29373              	.LBB4057:
 29374              	.LBI4057:
4273:src/xeq.c     **** {
 29375              		.loc 1 4273 24 view .LVU7889
 29376              	.LBB4058:
4275:src/xeq.c     **** 	if (xp < xrom)
 29377              		.loc 1 4275 2 view .LVU7890
4276:src/xeq.c     **** 		return NULL;
ARM GAS  /tmp/ccjeMhND.s 			page 749


 29378              		.loc 1 4276 5 is_stmt 0 view .LVU7891
 29379 020c 184B     		ldr	r3, .L2349+44
4275:src/xeq.c     **** 	if (xp < xrom)
 29380              		.loc 1 4275 59 view .LVU7892
 29381 020e 22F00101 		bic	r1, r2, #1
 29382              	.LVL2301:
4276:src/xeq.c     **** 		return NULL;
 29383              		.loc 1 4276 2 is_stmt 1 view .LVU7893
4276:src/xeq.c     **** 		return NULL;
 29384              		.loc 1 4276 5 is_stmt 0 view .LVU7894
 29385 0212 9942     		cmp	r1, r3
 29386 0214 08D3     		bcc	.L2085
4280:src/xeq.c     **** 		return NULL;
 29387              		.loc 1 4280 2 is_stmt 1 view .LVU7895
4280:src/xeq.c     **** 		return NULL;
 29388              		.loc 1 4280 17 is_stmt 0 view .LVU7896
 29389 0216 1748     		ldr	r0, .L2349+48
 29390 0218 0088     		ldrh	r0, [r0]
 29391 021a 03EB4003 		add	r3, r3, r0, lsl #1
4280:src/xeq.c     **** 		return NULL;
 29392              		.loc 1 4280 5 view .LVU7897
 29393 021e 9942     		cmp	r1, r3
 29394 0220 02D2     		bcs	.L2085
 29395              	.LVL2302:
4280:src/xeq.c     **** 		return NULL;
 29396              		.loc 1 4280 5 view .LVU7898
 29397              	.LBE4058:
 29398              	.LBE4057:
5061:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 29399              		.loc 1 5061 6 view .LVU7899
 29400 0222 0029     		cmp	r1, #0
 29401 0224 40F0EC82 		bne	.L2334
 29402              	.L2085:
5071:src/xeq.c     **** 			set_lift();
 29403              		.loc 1 5071 4 is_stmt 1 view .LVU7900
 29404 0228 4146     		mov	r1, r8
 29405 022a 2846     		mov	r0, r5
 29406 022c 9047     		blx	r2
 29407              	.LVL2303:
5072:src/xeq.c     **** 		}
 29408              		.loc 1 5072 4 view .LVU7901
 29409              	.LBB4059:
 29410              	.LBI4059:
 748:src/xeq.c     ****     State2.state_lift = 1;
 29411              		.loc 1 748 6 view .LVU7902
 29412              	.LBB4060:
 749:src/xeq.c     **** }
 29413              		.loc 1 749 5 view .LVU7903
 29414              	.L2305:
 749:src/xeq.c     **** }
 29415              		.loc 1 749 5 is_stmt 0 view .LVU7904
 29416              	.LBE4060:
 29417              	.LBE4059:
 29418              	.LBE4056:
 29419              	.LBE4047:
 29420              	.LBE4046:
 29421              	.LBB4073:
ARM GAS  /tmp/ccjeMhND.s 			page 750


 29422              	.LBB4074:
 29423              	.LBB4075:
3799:src/xeq.c     **** 		}
 29424              		.loc 1 3799 4 is_stmt 1 view .LVU7905
 29425              	.LBB4076:
 29426              	.LBI4076:
 748:src/xeq.c     ****     State2.state_lift = 1;
 29427              		.loc 1 748 6 view .LVU7906
 29428              	.LBB4077:
 749:src/xeq.c     **** }
 29429              		.loc 1 749 5 view .LVU7907
 749:src/xeq.c     **** }
 29430              		.loc 1 749 23 is_stmt 0 view .LVU7908
 29431 022e E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 29432 0230 094B     		ldr	r3, .L2349+20
 29433 0232 42F04002 		orr	r2, r2, #64
 29434 0236 E275     		strb	r2, [r4, #23]
 29435 0238 1A68     		ldr	r2, [r3]
 29436 023a C6E7     		b	.L2087
 29437              	.LVL2304:
 29438              	.L2331:
 749:src/xeq.c     **** }
 29439              		.loc 1 749 23 view .LVU7909
 29440              	.LBE4077:
 29441              	.LBE4076:
 29442              	.LBE4075:
 29443              	.LBE4074:
 29444              	.LBE4073:
 29445              	.LBB4146:
5112:src/xeq.c     **** 		else
 29446              		.loc 1 5112 4 is_stmt 1 view .LVU7910
 29447 023c 2846     		mov	r0, r5
 29448 023e FFF7FEFF 		bl	print_step
 29449              	.LVL2305:
 29450 0242 75E7     		b	.L2079
 29451              	.L2350:
 29452              		.align	2
 29453              	.L2349:
 29454 0244 00000000 		.word	main_ram
 29455 0248 00000000 		.word	StateWhileOn
 29456 024c 00000000 		.word	Busy
 29457 0250 00000000 		.word	XeqOpCode
 29458 0254 00000000 		.word	argcmds
 29459 0258 00000000 		.word	Error
 29460 025c 00000000 		.word	.LC8
 29461 0260 00000000 		.word	TraceBuffer
 29462 0264 00000000 		.word	DispMsg
 29463 0268 00000000 		.word	niladics
 29464 026c 00000000 		.word	multicmds
 29465 0270 00000000 		.word	xrom
 29466 0274 00000000 		.word	xrom_size
 29467 0278 00000000 		.word	StackBase
 29468 027c 00000000 		.word	Running
 29469              	.L2117:
5112:src/xeq.c     **** 		else
 29470              		.loc 1 5112 4 is_stmt 0 view .LVU7911
 29471              	.LBE4146:
ARM GAS  /tmp/ccjeMhND.s 			page 751


5139:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
 29472              		.loc 1 5139 18 is_stmt 1 view .LVU7912
 29473              	.LVL2306:
 29474              	.LBB4147:
 29475              	.LBI4147:
4506:src/xeq.c     **** 
 29476              		.loc 1 4506 13 view .LVU7913
 29477              	.LBB4148:
4508:src/xeq.c     **** 	process_cmdline_set_lift();
 29478              		.loc 1 4508 2 view .LVU7914
4509:src/xeq.c     **** 
 29479              		.loc 1 4509 2 view .LVU7915
 29480              	.LBB4149:
 29481              	.LBI4149:
1146:src/xeq.c     **** 	process_cmdline();
 29482              		.loc 1 1146 6 view .LVU7916
 29483              	.LBB4150:
1147:src/xeq.c     **** 	set_lift();
 29484              		.loc 1 1147 2 view .LVU7917
 29485 0280 FFF7FEFF 		bl	process_cmdline
 29486              	.LVL2307:
1148:src/xeq.c     **** }
 29487              		.loc 1 1148 2 view .LVU7918
 29488              	.LBB4151:
 29489              	.LBI4151:
 748:src/xeq.c     ****     State2.state_lift = 1;
 29490              		.loc 1 748 6 view .LVU7919
 29491              	.LBB4152:
 749:src/xeq.c     **** }
 29492              		.loc 1 749 5 view .LVU7920
 749:src/xeq.c     **** }
 29493              		.loc 1 749 23 is_stmt 0 view .LVU7921
 29494 0284 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 29495              	.LBE4152:
 29496              	.LBE4151:
 29497              	.LBE4150:
 29498              	.LBE4149:
4511:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 29499              		.loc 1 4511 4 view .LVU7922
 29500 0286 EDB2     		uxtb	r5, r5
 29501              	.LVL2308:
 29502              	.LBB4159:
 29503              	.LBB4157:
 29504              	.LBB4155:
 29505              	.LBB4153:
 749:src/xeq.c     **** }
 29506              		.loc 1 749 23 view .LVU7923
 29507 0288 43F04003 		orr	r3, r3, #64
 29508              	.LBE4153:
 29509              	.LBE4155:
 29510              	.LBE4157:
 29511              	.LBE4159:
4512:src/xeq.c     **** 		if (is_intmode()) {
 29512              		.loc 1 4512 5 view .LVU7924
 29513 028c 2E2D     		cmp	r5, #46
 29514              	.LBB4160:
 29515              	.LBB4158:
ARM GAS  /tmp/ccjeMhND.s 			page 752


 29516              	.LBB4156:
 29517              	.LBB4154:
 749:src/xeq.c     **** }
 29518              		.loc 1 749 23 view .LVU7925
 29519 028e E375     		strb	r3, [r4, #23]
 29520              	.LBE4154:
 29521              	.LBE4156:
 29522              	.LBE4158:
 29523              	.LBE4160:
4511:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 29524              		.loc 1 4511 2 is_stmt 1 view .LVU7926
 29525              	.LVL2309:
4512:src/xeq.c     **** 		if (is_intmode()) {
 29526              		.loc 1 4512 2 view .LVU7927
4512:src/xeq.c     **** 		if (is_intmode()) {
 29527              		.loc 1 4512 5 is_stmt 0 view .LVU7928
 29528 0290 40F26D82 		bls	.L2335
 29529              	.LVL2310:
 29530              	.L2112:
4512:src/xeq.c     **** 		if (is_intmode()) {
 29531              		.loc 1 4512 5 view .LVU7929
 29532              	.LBE4148:
 29533              	.LBE4147:
5143:src/xeq.c     **** 		}
 29534              		.loc 1 5143 12 is_stmt 1 view .LVU7930
5143:src/xeq.c     **** 		}
 29535              		.loc 1 5143 12 view .LVU7931
 29536              	.LBB4194:
 29537              	.LBI4194:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29538              		.loc 1 537 5 view .LVU7932
 29539              	.LBB4195:
 538:src/xeq.c     **** 		Error = e;
 29540              		.loc 1 538 2 view .LVU7933
 538:src/xeq.c     **** 		Error = e;
 29541              		.loc 1 538 12 is_stmt 0 view .LVU7934
 29542 0294 B34B     		ldr	r3, .L2351
 29543 0296 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 29544              		.loc 1 538 5 view .LVU7935
 29545 0298 0028     		cmp	r0, #0
 29546 029a 40F0CC81 		bne	.L2313
 29547 029e DFF8E082 		ldr	r8, .L2351+28
 29548              	.LVL2311:
 29549              	.L2091:
 538:src/xeq.c     **** 		Error = e;
 29550              		.loc 1 538 5 view .LVU7936
 29551              	.LBE4195:
 29552              	.LBE4194:
 29553              	.LBB4196:
 29554              	.LBB4070:
 29555              	.LBB4063:
 29556              	.LBB4064:
 29557              	.LBB4065:
 29558              	.LBI4065:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29559              		.loc 1 537 5 is_stmt 1 view .LVU7937
ARM GAS  /tmp/ccjeMhND.s 			page 753


 29560              	.LBB4066:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 29561              		.loc 1 539 3 view .LVU7938
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 29562              		.loc 1 539 9 is_stmt 0 view .LVU7939
 29563 02a2 0320     		movs	r0, #3
 29564 02a4 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 29565              		.loc 1 540 3 is_stmt 1 view .LVU7940
 29566              	.LVL2312:
 29567              	.L2210:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 29568              		.loc 1 540 3 is_stmt 0 view .LVU7941
 29569              	.LBE4066:
 29570              	.LBE4065:
 29571              	.LBE4064:
 29572              	.LBE4063:
 29573              	.LBE4070:
 29574              	.LBE4196:
5155:src/xeq.c     **** 		// Repair stack and state
 29575              		.loc 1 5155 3 is_stmt 1 view .LVU7942
 29576 02a6 0593     		str	r3, [sp, #20]
 29577 02a8 FFF7FEFF 		bl	error_message
 29578              	.LVL2313:
5158:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
 29579              		.loc 1 5158 3 view .LVU7943
 29580 02ac 5146     		mov	r1, r10
 29581 02ae A022     		movs	r2, #160
 29582 02b0 D9F80000 		ldr	r0, [r9]
 29583 02b4 FFF7FEFF 		bl	xcopy
 29584              	.LVL2314:
5159:src/xeq.c     **** 		UState = old;
 29585              		.loc 1 5159 3 view .LVU7944
 29586 02b8 3A68     		ldr	r2, [r7]
5161:src/xeq.c     **** 		raw_set_pc(old_pc);
 29587              		.loc 1 5161 21 is_stmt 0 view .LVU7945
 29588 02ba 029B     		ldr	r3, [sp, #8]
5159:src/xeq.c     **** 		UState = old;
 29589              		.loc 1 5159 28 view .LVU7946
 29590 02bc A2F8FCB7 		strh	fp, [r2, #2044]	@ movhi
5160:src/xeq.c     **** 		State2.state_lift = lift;
 29591              		.loc 1 5160 3 is_stmt 1 view .LVU7947
5160:src/xeq.c     **** 		State2.state_lift = lift;
 29592              		.loc 1 5160 10 is_stmt 0 view .LVU7948
 29593 02c0 96E80300 		ldm	r6, {r0, r1}
 29594 02c4 02F2E475 		addw	r5, r2, #2020
 29595 02c8 85E80300 		stm	r5, {r0, r1}
5161:src/xeq.c     **** 		raw_set_pc(old_pc);
 29596              		.loc 1 5161 3 is_stmt 1 view .LVU7949
5161:src/xeq.c     **** 		raw_set_pc(old_pc);
 29597              		.loc 1 5161 21 is_stmt 0 view .LVU7950
 29598 02cc E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 29599 02ce 63F38611 		bfi	r1, r3, #6, #1
 29600              	.LBB4197:
 29601              	.LBB4198:
 280:src/xeq.c     **** 	update_program_bounds(0);
 29602              		.loc 1 280 11 view .LVU7951
ARM GAS  /tmp/ccjeMhND.s 			page 754


 29603 02d2 039B     		ldr	r3, [sp, #12]
 29604              	.LBE4198:
 29605              	.LBE4197:
5161:src/xeq.c     **** 		raw_set_pc(old_pc);
 29606              		.loc 1 5161 21 view .LVU7952
 29607 02d4 E175     		strb	r1, [r4, #23]
5162:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
 29608              		.loc 1 5162 3 is_stmt 1 view .LVU7953
 29609              	.LVL2315:
 29610              	.LBB4200:
 29611              	.LBI4197:
 279:src/xeq.c     **** 	State.pc = pc;
 29612              		.loc 1 279 13 view .LVU7954
 29613              	.LBB4199:
 280:src/xeq.c     **** 	update_program_bounds(0);
 29614              		.loc 1 280 2 view .LVU7955
 281:src/xeq.c     **** }
 29615              		.loc 1 281 2 is_stmt 0 view .LVU7956
 29616 02d6 0020     		movs	r0, #0
 280:src/xeq.c     **** 	update_program_bounds(0);
 29617              		.loc 1 280 11 view .LVU7957
 29618 02d8 A2F8E037 		strh	r3, [r2, #2016]	@ movhi
 281:src/xeq.c     **** }
 29619              		.loc 1 281 2 is_stmt 1 view .LVU7958
 29620 02dc FFF7FEFF 		bl	update_program_bounds
 29621              	.LVL2316:
 281:src/xeq.c     **** }
 29622              		.loc 1 281 2 is_stmt 0 view .LVU7959
 29623              	.LBE4199:
 29624              	.LBE4200:
5163:src/xeq.c     **** 		process_cmdline_set_lift();
 29625              		.loc 1 5163 3 is_stmt 1 view .LVU7960
5163:src/xeq.c     **** 		process_cmdline_set_lift();
 29626              		.loc 1 5163 26 is_stmt 0 view .LVU7961
 29627 02e0 049B     		ldr	r3, [sp, #16]
 29628 02e2 E361     		str	r3, [r4, #28]
5164:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
 29629              		.loc 1 5164 3 is_stmt 1 view .LVU7962
 29630              	.LBB4201:
 29631              	.LBI4201:
1146:src/xeq.c     **** 	process_cmdline();
 29632              		.loc 1 1146 6 view .LVU7963
 29633              	.LBB4202:
1147:src/xeq.c     **** 	set_lift();
 29634              		.loc 1 1147 2 view .LVU7964
 29635 02e4 FFF7FEFF 		bl	process_cmdline
 29636              	.LVL2317:
1148:src/xeq.c     **** }
 29637              		.loc 1 1148 2 view .LVU7965
 29638              	.LBB4203:
 29639              	.LBI4203:
 748:src/xeq.c     ****     State2.state_lift = 1;
 29640              		.loc 1 748 6 view .LVU7966
 29641              	.LBB4204:
 749:src/xeq.c     **** }
 29642              		.loc 1 749 5 view .LVU7967
 29643              	.LBE4204:
ARM GAS  /tmp/ccjeMhND.s 			page 755


 29644              	.LBE4203:
 29645              	.LBE4202:
 29646              	.LBE4201:
5168:src/xeq.c     **** #ifndef REALBUILD
 29647              		.loc 1 5168 15 is_stmt 0 view .LVU7968
 29648 02e8 9F49     		ldr	r1, .L2351+4
 29649              	.LBB4211:
 29650              	.LBB4209:
 29651              	.LBB4207:
 29652              	.LBB4205:
 749:src/xeq.c     **** }
 29653              		.loc 1 749 23 view .LVU7969
 29654 02ea E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 29655              	.LBE4205:
 29656              	.LBE4207:
 29657              	.LBE4209:
 29658              	.LBE4211:
5168:src/xeq.c     **** #ifndef REALBUILD
 29659              		.loc 1 5168 15 view .LVU7970
 29660 02ec 0D68     		ldr	r5, [r1]
 29661 02ee D8F80010 		ldr	r1, [r8]
5167:src/xeq.c     **** 		if (Running || XromRunning) {
 29662              		.loc 1 5167 9 view .LVU7971
 29663 02f2 059B     		ldr	r3, [sp, #20]
 29664              	.LBB4212:
 29665              	.LBB4210:
 29666              	.LBB4208:
 29667              	.LBB4206:
 749:src/xeq.c     **** }
 29668              		.loc 1 749 23 view .LVU7972
 29669 02f4 42F04002 		orr	r2, r2, #64
 29670 02f8 E275     		strb	r2, [r4, #23]
 29671              	.LBE4206:
 29672              	.LBE4208:
 29673              	.LBE4210:
 29674              	.LBE4212:
5167:src/xeq.c     **** 		if (Running || XromRunning) {
 29675              		.loc 1 5167 3 is_stmt 1 view .LVU7973
5167:src/xeq.c     **** 		if (Running || XromRunning) {
 29676              		.loc 1 5167 9 is_stmt 0 view .LVU7974
 29677 02fa 0020     		movs	r0, #0
5168:src/xeq.c     **** #ifndef REALBUILD
 29678              		.loc 1 5168 15 view .LVU7975
 29679 02fc 51EA0502 		orrs	r2, r1, r5
5167:src/xeq.c     **** 		if (Running || XromRunning) {
 29680              		.loc 1 5167 9 view .LVU7976
 29681 0300 1860     		str	r0, [r3]
5168:src/xeq.c     **** #ifndef REALBUILD
 29682              		.loc 1 5168 3 is_stmt 1 view .LVU7977
5168:src/xeq.c     **** #ifndef REALBUILD
 29683              		.loc 1 5168 15 is_stmt 0 view .LVU7978
 29684 0302 3FF464AF 		beq	.L2197
5170:src/xeq.c     **** 				// Special handling for debug environment
 29685              		.loc 1 5170 4 is_stmt 1 view .LVU7979
5170:src/xeq.c     **** 				// Special handling for debug environment
 29686              		.loc 1 5170 7 is_stmt 0 view .LVU7980
 29687 0306 94F91720 		ldrsb	r2, [r4, #23]
ARM GAS  /tmp/ccjeMhND.s 			page 756


 29688 030a 8242     		cmp	r2, r0
 29689 030c C0F2D781 		blt	.L2336
 29690              	.LBB4213:
5192:src/xeq.c     **** 				if (XromFlags.xIN) {
 29691              		.loc 1 5192 5 is_stmt 1 view .LVU7981
5193:src/xeq.c     **** 					// Restore state to before xIN
 29692              		.loc 1 5193 9 is_stmt 0 view .LVU7982
 29693 0310 964E     		ldr	r6, .L2351+8
5192:src/xeq.c     **** 				if (XromFlags.xIN) {
 29694              		.loc 1 5192 29 view .LVU7983
 29695 0312 3968     		ldr	r1, [r7]
5193:src/xeq.c     **** 					// Restore state to before xIN
 29696              		.loc 1 5193 8 view .LVU7984
 29697 0314 96F90120 		ldrsb	r2, [r6, #1]
5192:src/xeq.c     **** 				if (XromFlags.xIN) {
 29698              		.loc 1 5192 24 view .LVU7985
 29699 0318 B1F8E037 		ldrh	r3, [r1, #2016]
 29700              	.LVL2318:
5193:src/xeq.c     **** 					// Restore state to before xIN
 29701              		.loc 1 5193 5 is_stmt 1 view .LVU7986
5193:src/xeq.c     **** 					// Restore state to before xIN
 29702              		.loc 1 5193 8 is_stmt 0 view .LVU7987
 29703 031c 002A     		cmp	r2, #0
 29704 031e 22DA     		bge	.L2205
5195:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 29705              		.loc 1 5195 6 is_stmt 1 view .LVU7988
5195:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 29706              		.loc 1 5195 20 is_stmt 0 view .LVU7989
 29707 0320 96F801C0 		ldrb	ip, [r6, #1]	@ zero_extendqisi2
5197:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 29708              		.loc 1 5197 18 view .LVU7990
 29709 0324 D1F8E857 		ldr	r5, [r1, #2024]
5200:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 29710              		.loc 1 5200 13 view .LVU7991
 29711 0328 D6F808E0 		ldr	lr, [r6, #8]
5195:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 29712              		.loc 1 5195 20 view .LVU7992
 29713 032c 60F3C71C 		bfi	ip, r0, #7, #1
5197:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 29714              		.loc 1 5197 18 view .LVU7993
 29715 0330 CCF3C000 		ubfx	r0, ip, #3, #1
 29716 0334 0CF00102 		and	r2, ip, #1
 29717 0338 42EA8032 		orr	r2, r2, r0, lsl #14
 29718 033c CCF38000 		ubfx	r0, ip, #2, #1
 29719 0340 42EAC042 		orr	r2, r2, r0, lsl #19
 29720 0344 8A48     		ldr	r0, .L2351+12
5195:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 29721              		.loc 1 5195 20 view .LVU7994
 29722 0346 86F801C0 		strb	ip, [r6, #1]
5196:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
 29723              		.loc 1 5196 6 is_stmt 1 view .LVU7995
5197:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 29724              		.loc 1 5197 6 view .LVU7996
5198:src/xeq.c     **** 					// Restore the global return stack
 29725              		.loc 1 5198 6 view .LVU7997
5197:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 29726              		.loc 1 5197 18 is_stmt 0 view .LVU7998
ARM GAS  /tmp/ccjeMhND.s 			page 757


 29727 034a 25F40425 		bic	r5, r5, #540672
 29728 034e 0240     		ands	r2, r2, r0
 29729 0350 25F00105 		bic	r5, r5, #1
5200:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 29730              		.loc 1 5200 13 view .LVU7999
 29731 0354 8748     		ldr	r0, .L2351+16
5201:src/xeq.c     **** 				}
 29732              		.loc 1 5201 16 view .LVU8000
 29733 0356 B689     		ldrh	r6, [r6, #12]
5200:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 29734              		.loc 1 5200 13 view .LVU8001
 29735 0358 C0F800E0 		str	lr, [r0]
5197:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 29736              		.loc 1 5197 18 view .LVU8002
 29737 035c 2A43     		orrs	r2, r2, r5
 29738 035e C1F8E827 		str	r2, [r1, #2024]
5200:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 29739              		.loc 1 5200 6 is_stmt 1 view .LVU8003
5201:src/xeq.c     **** 				}
 29740              		.loc 1 5201 6 view .LVU8004
5201:src/xeq.c     **** 				}
 29741              		.loc 1 5201 16 is_stmt 0 view .LVU8005
 29742 0362 A1F8E267 		strh	r6, [r1, #2018]	@ movhi
 29743              	.L2205:
5203:src/xeq.c     **** 					// Leave XROM
 29744              		.loc 1 5203 11 is_stmt 1 view .LVU8006
 29745 0366 9A0B     		lsrs	r2, r3, #14
 29746 0368 032A     		cmp	r2, #3
 29747 036a 1AD1     		bne	.L2206
5207:src/xeq.c     **** 					}
 29748              		.loc 1 5207 10 is_stmt 0 view .LVU8007
 29749 036c 814E     		ldr	r6, .L2351+16
5207:src/xeq.c     **** 					}
 29750              		.loc 1 5207 18 view .LVU8008
 29751 036e 6FF00045 		mvn	r5, #-2147483648
 29752 0372 04E0     		b	.L2209
 29753              	.L2207:
5210:src/xeq.c     **** 				}
 29754              		.loc 1 5210 7 is_stmt 1 view .LVU8009
 29755 0374 0133     		adds	r3, r3, #1
 29756              	.LVL2319:
5210:src/xeq.c     **** 				}
 29757              		.loc 1 5210 7 is_stmt 0 view .LVU8010
 29758 0376 9BB2     		uxth	r3, r3
 29759              	.LVL2320:
5203:src/xeq.c     **** 					// Leave XROM
 29760              		.loc 1 5203 11 is_stmt 1 view .LVU8011
 29761 0378 9A0B     		lsrs	r2, r3, #14
 29762 037a 032A     		cmp	r2, #3
 29763 037c 11D1     		bne	.L2206
 29764              	.L2209:
5205:src/xeq.c     **** 						retstk_up();
 29765              		.loc 1 5205 6 view .LVU8012
5205:src/xeq.c     **** 						retstk_up();
 29766              		.loc 1 5205 9 is_stmt 0 view .LVU8013
 29767 037e B1F9E227 		ldrsh	r2, [r1, #2018]
 29768 0382 002A     		cmp	r2, #0
ARM GAS  /tmp/ccjeMhND.s 			page 758


 29769 0384 F6D0     		beq	.L2207
5206:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
 29770              		.loc 1 5206 7 is_stmt 1 view .LVU8014
 29771 0386 FFF7FEFF 		bl	retstk_up
 29772              	.LVL2321:
5207:src/xeq.c     **** 					}
 29773              		.loc 1 5207 7 view .LVU8015
5207:src/xeq.c     **** 					}
 29774              		.loc 1 5207 19 is_stmt 0 view .LVU8016
 29775 038a 3968     		ldr	r1, [r7]
5207:src/xeq.c     **** 					}
 29776              		.loc 1 5207 10 view .LVU8017
 29777 038c 3368     		ldr	r3, [r6]
5207:src/xeq.c     **** 					}
 29778              		.loc 1 5207 19 view .LVU8018
 29779 038e B1F9E227 		ldrsh	r2, [r1, #2018]
5207:src/xeq.c     **** 					}
 29780              		.loc 1 5207 18 view .LVU8019
 29781 0392 5019     		adds	r0, r2, r5
5207:src/xeq.c     **** 					}
 29782              		.loc 1 5207 10 view .LVU8020
 29783 0394 33F81030 		ldrh	r3, [r3, r0, lsl #1]
 29784              	.LVL2322:
5209:src/xeq.c     **** 						++pc; // compensate for decpc below
 29785              		.loc 1 5209 6 is_stmt 1 view .LVU8021
5209:src/xeq.c     **** 						++pc; // compensate for decpc below
 29786              		.loc 1 5209 9 is_stmt 0 view .LVU8022
 29787 0398 002A     		cmp	r2, #0
 29788 039a EBD0     		beq	.L2207
5203:src/xeq.c     **** 					// Leave XROM
 29789              		.loc 1 5203 11 is_stmt 1 view .LVU8023
 29790 039c 9A0B     		lsrs	r2, r3, #14
 29791 039e 032A     		cmp	r2, #3
 29792 03a0 EDD0     		beq	.L2209
 29793              	.L2206:
5212:src/xeq.c     **** #ifndef REALBUILD
 29794              		.loc 1 5212 5 view .LVU8024
 29795              	.LVL2323:
 29796              	.LBB4214:
 29797              	.LBI4214:
 279:src/xeq.c     **** 	State.pc = pc;
 29798              		.loc 1 279 13 view .LVU8025
 29799              	.LBB4215:
 280:src/xeq.c     **** 	update_program_bounds(0);
 29800              		.loc 1 280 2 view .LVU8026
 280:src/xeq.c     **** 	update_program_bounds(0);
 29801              		.loc 1 280 11 is_stmt 0 view .LVU8027
 29802 03a2 A1F8E037 		strh	r3, [r1, #2016]	@ movhi
 281:src/xeq.c     **** }
 29803              		.loc 1 281 2 is_stmt 1 view .LVU8028
 29804 03a6 0020     		movs	r0, #0
 29805 03a8 FFF7FEFF 		bl	update_program_bounds
 29806              	.LVL2324:
 29807              	.L2200:
 281:src/xeq.c     **** }
 29808              		.loc 1 281 2 is_stmt 0 view .LVU8029
 29809              	.LBE4215:
ARM GAS  /tmp/ccjeMhND.s 			page 759


 29810              	.LBE4214:
 29811              	.LBE4213:
5216:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
 29812              		.loc 1 5216 4 is_stmt 1 view .LVU8030
 29813 03ac FFF7FEFF 		bl	decpc
 29814              	.LVL2325:
5217:src/xeq.c     **** 
 29815              		.loc 1 5217 4 view .LVU8031
 29816 03b0 FFF7FEFF 		bl	xeq_init_contexts
 29817              	.LVL2326:
5219:src/xeq.c     **** 		}
 29818              		.loc 1 5219 4 view .LVU8032
 29819              	.LBB4216:
 29820              	.LBI4216:
5580:src/xeq.c     **** 	set_running_off_sst();
 29821              		.loc 1 5580 6 view .LVU8033
 29822              	.LBB4217:
5581:src/xeq.c     **** 	State.entryp = 0;
 29823              		.loc 1 5581 2 view .LVU8034
 29824              	.LBB4218:
 29825              	.LBI4218:
5572:src/xeq.c     **** 	Running = 0;
 29826              		.loc 1 5572 6 view .LVU8035
 29827              	.LBB4219:
5573:src/xeq.c     **** }
 29828              		.loc 1 5573 2 view .LVU8036
 29829              	.LBE4219:
 29830              	.LBE4218:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 29831              		.loc 1 5582 15 is_stmt 0 view .LVU8037
 29832 03b4 3B68     		ldr	r3, [r7]
 29833              	.LBB4221:
 29834              	.LBB4220:
5573:src/xeq.c     **** }
 29835              		.loc 1 5573 10 view .LVU8038
 29836 03b6 0021     		movs	r1, #0
 29837 03b8 C8F80010 		str	r1, [r8]
 29838              	.LBE4220:
 29839              	.LBE4221:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 29840              		.loc 1 5582 2 is_stmt 1 view .LVU8039
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 29841              		.loc 1 5582 15 is_stmt 0 view .LVU8040
 29842 03bc 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 29843 03c0 61F30412 		bfi	r2, r1, #4, #1
 29844 03c4 83F8DD27 		strb	r2, [r3, #2013]
5583:src/xeq.c     **** }
 29845              		.loc 1 5583 2 is_stmt 1 view .LVU8041
 29846 03c8 8A20     		movs	r0, #138
 29847 03ca FFF7FEFF 		bl	dot
 29848              	.LVL2327:
5584:src/xeq.c     **** 
 29849              		.loc 1 5584 1 is_stmt 0 view .LVU8042
 29850 03ce FEE6     		b	.L2197
 29851              	.LVL2328:
 29852              	.L2120:
5584:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 760


 29853              		.loc 1 5584 1 view .LVU8043
 29854              	.LBE4217:
 29855              	.LBE4216:
5136:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
 29856              		.loc 1 5136 19 is_stmt 1 view .LVU8044
 29857              	.LBB4222:
 29858              	.LBI4073:
3706:src/xeq.c     **** 	int opm = argKIND(op);
 29859              		.loc 1 3706 13 view .LVU8045
 29860              	.LBB4141:
3707:src/xeq.c     **** 
 29861              		.loc 1 3707 2 view .LVU8046
3707:src/xeq.c     **** 
 29862              		.loc 1 3707 6 is_stmt 0 view .LVU8047
 29863 03d0 5FFA85F8 		uxtb	r8, r5
 29864              	.LVL2329:
3709:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 29865              		.loc 1 3709 2 is_stmt 1 view .LVU8048
 29866 03d4 B8F12A0F 		cmp	r8, #42
 29867 03d8 3FF65CAF 		bhi	.L2112
 29868 03dc DFE818F0 		tbh	[pc, r8, lsl #1]
 29869              	.L2123:
 29870 03e0 9902     		.2byte	(.L2134-.L2123)/2
 29871 03e2 1003     		.2byte	(.L2133-.L2123)/2
 29872 03e4 E602     		.2byte	(.L2132-.L2123)/2
 29873 03e6 D402     		.2byte	(.L2131-.L2123)/2
 29874 03e8 A402     		.2byte	(.L2130-.L2123)/2
 29875 03ea 2D02     		.2byte	(.L2129-.L2123)/2
 29876 03ec 2D02     		.2byte	(.L2129-.L2123)/2
 29877 03ee 2D02     		.2byte	(.L2129-.L2123)/2
 29878 03f0 2D02     		.2byte	(.L2129-.L2123)/2
 29879 03f2 2D02     		.2byte	(.L2129-.L2123)/2
 29880 03f4 2D02     		.2byte	(.L2129-.L2123)/2
 29881 03f6 2D02     		.2byte	(.L2129-.L2123)/2
 29882 03f8 2D02     		.2byte	(.L2129-.L2123)/2
 29883 03fa 2D02     		.2byte	(.L2129-.L2123)/2
 29884 03fc 2D02     		.2byte	(.L2129-.L2123)/2
 29885 03fe 2D02     		.2byte	(.L2129-.L2123)/2
 29886 0400 2D02     		.2byte	(.L2129-.L2123)/2
 29887 0402 2D02     		.2byte	(.L2129-.L2123)/2
 29888 0404 2D02     		.2byte	(.L2129-.L2123)/2
 29889 0406 2D02     		.2byte	(.L2129-.L2123)/2
 29890 0408 2D02     		.2byte	(.L2129-.L2123)/2
 29891 040a 8802     		.2byte	(.L2128-.L2123)/2
 29892 040c 8802     		.2byte	(.L2128-.L2123)/2
 29893 040e 5802     		.2byte	(.L2127-.L2123)/2
 29894 0410 5802     		.2byte	(.L2127-.L2123)/2
 29895 0412 5802     		.2byte	(.L2127-.L2123)/2
 29896 0414 5802     		.2byte	(.L2127-.L2123)/2
 29897 0416 5802     		.2byte	(.L2127-.L2123)/2
 29898 0418 5802     		.2byte	(.L2127-.L2123)/2
 29899 041a 5802     		.2byte	(.L2127-.L2123)/2
 29900 041c 3602     		.2byte	(.L2126-.L2123)/2
 29901 041e 3602     		.2byte	(.L2126-.L2123)/2
 29902 0420 3602     		.2byte	(.L2126-.L2123)/2
 29903 0422 3602     		.2byte	(.L2126-.L2123)/2
 29904 0424 3602     		.2byte	(.L2126-.L2123)/2
ARM GAS  /tmp/ccjeMhND.s 			page 761


 29905 0426 3602     		.2byte	(.L2126-.L2123)/2
 29906 0428 3602     		.2byte	(.L2126-.L2123)/2
 29907 042a 7C02     		.2byte	(.L2125-.L2123)/2
 29908 042c 7C02     		.2byte	(.L2125-.L2123)/2
 29909 042e 7002     		.2byte	(.L2124-.L2123)/2
 29910 0430 7002     		.2byte	(.L2124-.L2123)/2
 29911 0432 6402     		.2byte	(.L2122-.L2123)/2
 29912 0434 6402     		.2byte	(.L2122-.L2123)/2
 29913              	.LVL2330:
 29914              		.p2align 1
 29915              	.L2113:
3709:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 29916              		.loc 1 3709 2 is_stmt 0 view .LVU8049
 29917              	.LBE4141:
 29918              	.LBE4222:
5142:src/xeq.c     **** 		default:	illegal(op);
 29919              		.loc 1 5142 19 is_stmt 1 view .LVU8050
 29920              	.LBB4223:
 29921              	.LBI4223:
4549:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
 29922              		.loc 1 4549 13 view .LVU8051
 29923              	.LBB4224:
4550:src/xeq.c     **** 	unsigned int f;
 29924              		.loc 1 4550 2 view .LVU8052
4551:src/xeq.c     **** 
 29925              		.loc 1 4551 2 view .LVU8053
4553:src/xeq.c     **** 
 29926              		.loc 1 4553 2 view .LVU8054
 29927              	.LBB4225:
 29928              	.LBI4225:
1146:src/xeq.c     **** 	process_cmdline();
 29929              		.loc 1 1146 6 view .LVU8055
 29930              	.LBB4226:
1147:src/xeq.c     **** 	set_lift();
 29931              		.loc 1 1147 2 view .LVU8056
 29932 0436 FFF7FEFF 		bl	process_cmdline
 29933              	.LVL2331:
1148:src/xeq.c     **** }
 29934              		.loc 1 1148 2 view .LVU8057
 29935              	.LBB4227:
 29936              	.LBI4227:
 748:src/xeq.c     ****     State2.state_lift = 1;
 29937              		.loc 1 748 6 view .LVU8058
 29938              	.LBB4228:
 749:src/xeq.c     **** }
 29939              		.loc 1 749 5 view .LVU8059
 749:src/xeq.c     **** }
 29940              		.loc 1 749 23 is_stmt 0 view .LVU8060
 29941 043a E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 29942              	.LBE4228:
 29943              	.LBE4227:
 29944              	.LBE4226:
 29945              	.LBE4225:
4555:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 29946              		.loc 1 4555 4 view .LVU8061
 29947 043c EDB2     		uxtb	r5, r5
 29948              	.LVL2332:
ARM GAS  /tmp/ccjeMhND.s 			page 762


 29949              	.LBB4235:
 29950              	.LBB4233:
 29951              	.LBB4231:
 29952              	.LBB4229:
 749:src/xeq.c     **** }
 29953              		.loc 1 749 23 view .LVU8062
 29954 043e 43F04003 		orr	r3, r3, #64
 29955              	.LBE4229:
 29956              	.LBE4231:
 29957              	.LBE4233:
 29958              	.LBE4235:
4556:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 29959              		.loc 1 4556 5 view .LVU8063
 29960 0442 2E2D     		cmp	r5, #46
 29961              	.LBB4236:
 29962              	.LBB4234:
 29963              	.LBB4232:
 29964              	.LBB4230:
 749:src/xeq.c     **** }
 29965              		.loc 1 749 23 view .LVU8064
 29966 0444 E375     		strb	r3, [r4, #23]
 29967              	.LBE4230:
 29968              	.LBE4232:
 29969              	.LBE4234:
 29970              	.LBE4236:
4555:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 29971              		.loc 1 4555 2 is_stmt 1 view .LVU8065
 29972              	.LVL2333:
4556:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 29973              		.loc 1 4556 2 view .LVU8066
4556:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 29974              		.loc 1 4556 5 is_stmt 0 view .LVU8067
 29975 0446 00F2EA80 		bhi	.L2193
4557:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 29976              		.loc 1 4557 3 is_stmt 1 view .LVU8068
4557:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 29977              		.loc 1 4557 9 is_stmt 0 view .LVU8069
 29978 044a 4B4B     		ldr	r3, .L2351+20
 29979 044c 05EB4505 		add	r5, r5, r5, lsl #1
 29980              	.LVL2334:
4557:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 29981              		.loc 1 4557 9 view .LVU8070
 29982 0450 03EBC505 		add	r5, r3, r5, lsl #3
 29983 0454 6D68     		ldr	r5, [r5, #4]
4557:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 29984              		.loc 1 4557 6 view .LVU8071
 29985 0456 002D     		cmp	r5, #0
 29986 0458 00F0DF82 		beq	.L2194
 29987              	.LBB4237:
4558:src/xeq.c     **** 			if (dispatch_xrom(fp))
 29988              		.loc 1 4558 4 is_stmt 1 view .LVU8072
 29989              	.LVL2335:
4559:src/xeq.c     **** 				return;
 29990              		.loc 1 4559 4 view .LVU8073
4559:src/xeq.c     **** 				return;
 29991              		.loc 1 4559 8 is_stmt 0 view .LVU8074
 29992 045c 2846     		mov	r0, r5
ARM GAS  /tmp/ccjeMhND.s 			page 763


 29993 045e FFF7FEFF 		bl	dispatch_xrom
 29994              	.LVL2336:
4559:src/xeq.c     **** 				return;
 29995              		.loc 1 4559 7 view .LVU8075
 29996 0462 0028     		cmp	r0, #0
 29997 0464 40F0FE80 		bne	.L2084
4562:src/xeq.c     **** 
 29998              		.loc 1 4562 5 is_stmt 1 view .LVU8076
 29999              	.LVL2337:
 30000              	.LBB4238:
 30001              	.LBI4238:
 857:src/xeq.c     **** 	getXYZ(x, y, z);
 30002              		.loc 1 857 6 view .LVU8077
 30003              	.LBB4239:
 858:src/xeq.c     **** 	getT(t);
 30004              		.loc 1 858 2 view .LVU8078
 30005 0468 15AB     		add	r3, sp, #84
 30006              	.LVL2338:
 858:src/xeq.c     **** 	getT(t);
 30007              		.loc 1 858 2 is_stmt 0 view .LVU8079
 30008 046a 0DF13008 		add	r8, sp, #48
 30009              	.LVL2339:
 858:src/xeq.c     **** 	getT(t);
 30010              		.loc 1 858 2 view .LVU8080
 30011 046e 1EAA     		add	r2, sp, #120
 30012              	.LVL2340:
 858:src/xeq.c     **** 	getT(t);
 30013              		.loc 1 858 2 view .LVU8081
 30014 0470 1946     		mov	r1, r3
 30015 0472 4046     		mov	r0, r8
 30016 0474 FFF7FEFF 		bl	getXYZ
 30017              	.LVL2341:
 859:src/xeq.c     **** }
 30018              		.loc 1 859 2 is_stmt 1 view .LVU8082
 30019              	.LBB4240:
 30020              	.LBI4240:
 831:src/xeq.c     **** 	getRegister(t, regT_idx);
 30021              		.loc 1 831 13 view .LVU8083
 30022              	.LBB4241:
 832:src/xeq.c     **** }
 30023              		.loc 1 832 2 view .LVU8084
 30024 0478 27A8     		add	r0, sp, #156
 30025              	.LVL2342:
 832:src/xeq.c     **** }
 30026              		.loc 1 832 2 is_stmt 0 view .LVU8085
 30027 047a 6721     		movs	r1, #103
 30028 047c FFF7FEFF 		bl	getRegister
 30029              	.LVL2343:
 832:src/xeq.c     **** }
 30030              		.loc 1 832 2 view .LVU8086
 30031              	.LBE4241:
 30032              	.LBE4240:
 30033              	.LBE4239:
 30034              	.LBE4238:
4564:src/xeq.c     **** 
 30035              		.loc 1 4564 5 is_stmt 1 view .LVU8087
 30036 0480 15AB     		add	r3, sp, #84
ARM GAS  /tmp/ccjeMhND.s 			page 764


 30037 0482 1EAA     		add	r2, sp, #120
 30038 0484 39A9     		add	r1, sp, #228
 30039 0486 30A8     		add	r0, sp, #192
 30040 0488 CDE90083 		strd	r8, r3, [sp]
 30041 048c 27AB     		add	r3, sp, #156
 30042 048e A847     		blx	r5
 30043              	.LVL2344:
4566:src/xeq.c     **** 				lower2();
 30044              		.loc 1 4566 5 view .LVU8088
 30045 0490 FFF7FEFF 		bl	setlastXY
 30046              	.LVL2345:
4567:src/xeq.c     **** 				setXY(&xr, &yr);
 30047              		.loc 1 4567 5 view .LVU8089
 30048 0494 FFF7FEFF 		bl	lower2
 30049              	.LVL2346:
 30050 0498 27E0     		b	.L2306
 30051              	.LVL2347:
 30052              	.L2115:
4567:src/xeq.c     **** 				setXY(&xr, &yr);
 30053              		.loc 1 4567 5 is_stmt 0 view .LVU8090
 30054              	.LBE4237:
 30055              	.LBE4224:
 30056              	.LBE4223:
5141:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
 30057              		.loc 1 5141 19 is_stmt 1 view .LVU8091
 30058              	.LBB4270:
 30059              	.LBI4270:
4472:src/xeq.c     **** 	decNumber x, y, rx, ry;
 30060              		.loc 1 4472 13 view .LVU8092
 30061              	.LBB4271:
4473:src/xeq.c     **** 	unsigned int f;
 30062              		.loc 1 4473 2 view .LVU8093
4474:src/xeq.c     **** 
 30063              		.loc 1 4474 2 view .LVU8094
4476:src/xeq.c     **** 
 30064              		.loc 1 4476 2 view .LVU8095
 30065              	.LBB4272:
 30066              	.LBI4272:
1146:src/xeq.c     **** 	process_cmdline();
 30067              		.loc 1 1146 6 view .LVU8096
 30068              	.LBB4273:
1147:src/xeq.c     **** 	set_lift();
 30069              		.loc 1 1147 2 view .LVU8097
 30070 049a FFF7FEFF 		bl	process_cmdline
 30071              	.LVL2348:
1148:src/xeq.c     **** }
 30072              		.loc 1 1148 2 view .LVU8098
 30073              	.LBB4274:
 30074              	.LBI4274:
 748:src/xeq.c     ****     State2.state_lift = 1;
 30075              		.loc 1 748 6 view .LVU8099
 30076              	.LBB4275:
 749:src/xeq.c     **** }
 30077              		.loc 1 749 5 view .LVU8100
 749:src/xeq.c     **** }
 30078              		.loc 1 749 23 is_stmt 0 view .LVU8101
 30079 049e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
ARM GAS  /tmp/ccjeMhND.s 			page 765


 30080              	.LBE4275:
 30081              	.LBE4274:
 30082              	.LBE4273:
 30083              	.LBE4272:
4478:src/xeq.c     **** 
 30084              		.loc 1 4478 4 view .LVU8102
 30085 04a0 EDB2     		uxtb	r5, r5
 30086              	.LVL2349:
 30087              	.LBB4282:
 30088              	.LBB4280:
 30089              	.LBB4278:
 30090              	.LBB4276:
 749:src/xeq.c     **** }
 30091              		.loc 1 749 23 view .LVU8103
 30092 04a2 43F04003 		orr	r3, r3, #64
 30093              	.LBE4276:
 30094              	.LBE4278:
 30095              	.LBE4280:
 30096              	.LBE4282:
4480:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 30097              		.loc 1 4480 5 view .LVU8104
 30098 04a6 982D     		cmp	r5, #152
 30099              	.LBB4283:
 30100              	.LBB4281:
 30101              	.LBB4279:
 30102              	.LBB4277:
 749:src/xeq.c     **** }
 30103              		.loc 1 749 23 view .LVU8105
 30104 04a8 E375     		strb	r3, [r4, #23]
 30105              	.LBE4277:
 30106              	.LBE4279:
 30107              	.LBE4281:
 30108              	.LBE4283:
4478:src/xeq.c     **** 
 30109              		.loc 1 4478 2 is_stmt 1 view .LVU8106
 30110              	.LVL2350:
4480:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 30111              		.loc 1 4480 2 view .LVU8107
4480:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 30112              		.loc 1 4480 5 is_stmt 0 view .LVU8108
 30113 04aa 00F2B880 		bhi	.L2193
4481:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 30114              		.loc 1 4481 3 is_stmt 1 view .LVU8109
4481:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 30115              		.loc 1 4481 9 is_stmt 0 view .LVU8110
 30116 04ae 334B     		ldr	r3, .L2351+24
 30117 04b0 05EB4505 		add	r5, r5, r5, lsl #1
 30118              	.LVL2351:
4481:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 30119              		.loc 1 4481 9 view .LVU8111
 30120 04b4 03EBC505 		add	r5, r3, r5, lsl #3
 30121 04b8 6D68     		ldr	r5, [r5, #4]
4481:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 30122              		.loc 1 4481 6 view .LVU8112
 30123 04ba 002D     		cmp	r5, #0
 30124 04bc 00F0AD82 		beq	.L2194
 30125              	.LBB4284:
ARM GAS  /tmp/ccjeMhND.s 			page 766


4482:src/xeq.c     **** 			if (dispatch_xrom(fp))
 30126              		.loc 1 4482 4 is_stmt 1 view .LVU8113
 30127              	.LVL2352:
4483:src/xeq.c     **** 				return;
 30128              		.loc 1 4483 4 view .LVU8114
4483:src/xeq.c     **** 				return;
 30129              		.loc 1 4483 8 is_stmt 0 view .LVU8115
 30130 04c0 2846     		mov	r0, r5
 30131 04c2 FFF7FEFF 		bl	dispatch_xrom
 30132              	.LVL2353:
4483:src/xeq.c     **** 				return;
 30133              		.loc 1 4483 7 view .LVU8116
 30134 04c6 0028     		cmp	r0, #0
 30135 04c8 40F0CC80 		bne	.L2084
4486:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
 30136              		.loc 1 4486 5 is_stmt 1 view .LVU8117
 30137              	.LVL2354:
 30138              	.LBB4285:
 30139              	.LBI4285:
 835:src/xeq.c     **** 	getX(x);
 30140              		.loc 1 835 6 view .LVU8118
 30141              	.LBE4285:
 30142              	.LBE4284:
 30143              	.LBE4271:
 30144              	.LBE4270:
 836:src/xeq.c     **** 	getY(y);
 30145              		.loc 1 836 2 view .LVU8119
 30146              	.LBB4302:
 30147              	.LBB4299:
 30148              	.LBB4296:
 30149              	.LBB4290:
 30150              	.LBB4286:
 30151              	.LBI4286:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 30152              		.loc 1 805 12 view .LVU8120
 30153              	.LBB4287:
 806:src/xeq.c     **** }
 30154              		.loc 1 806 2 view .LVU8121
 806:src/xeq.c     **** }
 30155              		.loc 1 806 9 is_stmt 0 view .LVU8122
 30156 04cc 6421     		movs	r1, #100
 30157 04ce 1EA8     		add	r0, sp, #120
 30158              	.LVL2355:
 806:src/xeq.c     **** }
 30159              		.loc 1 806 9 view .LVU8123
 30160 04d0 FFF7FEFF 		bl	getRegister
 30161              	.LVL2356:
 806:src/xeq.c     **** }
 30162              		.loc 1 806 9 view .LVU8124
 30163              	.LBE4287:
 30164              	.LBE4286:
 30165              	.LBE4290:
 30166              	.LBE4296:
 30167              	.LBE4299:
 30168              	.LBE4302:
 837:src/xeq.c     **** }
 30169              		.loc 1 837 2 is_stmt 1 view .LVU8125
ARM GAS  /tmp/ccjeMhND.s 			page 767


 30170              	.LBB4303:
 30171              	.LBB4300:
 30172              	.LBB4297:
 30173              	.LBB4291:
 30174              	.LBB4288:
 30175              	.LBI4288:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 30176              		.loc 1 813 6 view .LVU8126
 30177              	.LBB4289:
 814:src/xeq.c     **** }
 30178              		.loc 1 814 2 view .LVU8127
 30179 04d4 6521     		movs	r1, #101
 30180 04d6 27A8     		add	r0, sp, #156
 30181              	.LVL2357:
 814:src/xeq.c     **** }
 30182              		.loc 1 814 2 is_stmt 0 view .LVU8128
 30183 04d8 FFF7FEFF 		bl	getRegister
 30184              	.LVL2358:
 814:src/xeq.c     **** }
 30185              		.loc 1 814 2 view .LVU8129
 30186              	.LBE4289:
 30187              	.LBE4288:
 30188              	.LBE4291:
4487:src/xeq.c     **** 				setlastXY();
 30189              		.loc 1 4487 5 is_stmt 1 view .LVU8130
 30190 04dc 27AB     		add	r3, sp, #156
 30191 04de 1EAA     		add	r2, sp, #120
 30192 04e0 39A9     		add	r1, sp, #228
 30193 04e2 30A8     		add	r0, sp, #192
 30194 04e4 A847     		blx	r5
 30195              	.LVL2359:
4488:src/xeq.c     **** 				setXY(&rx, &ry);
 30196              		.loc 1 4488 5 view .LVU8131
 30197 04e6 FFF7FEFF 		bl	setlastXY
 30198              	.LVL2360:
4489:src/xeq.c     **** 				set_was_complex();
 30199              		.loc 1 4489 5 view .LVU8132
 30200              	.LBB4292:
 30201              	.LBI4292:
 840:src/xeq.c     **** 	setX(x);
 30202              		.loc 1 840 6 view .LVU8133
 30203              	.LBE4292:
 30204              	.LBE4297:
 30205              	.LBE4300:
 30206              	.LBE4303:
 841:src/xeq.c     **** 	setY(y);
 30207              		.loc 1 841 2 view .LVU8134
 30208              	.LBB4304:
 30209              	.LBB4301:
 30210              	.LBB4298:
 30211              	.LBB4295:
 30212              	.LBB4293:
 30213              	.LBI4293:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 30214              		.loc 1 809 6 view .LVU8135
 30215              	.LBB4294:
 810:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 768


 30216              		.loc 1 810 2 view .LVU8136
 30217              	.L2306:
 810:src/xeq.c     **** }
 30218              		.loc 1 810 2 is_stmt 0 view .LVU8137
 30219              	.LBE4294:
 30220              	.LBE4293:
 30221              	.LBE4295:
 30222              	.LBE4298:
 30223              	.LBE4301:
 30224              	.LBE4304:
 30225              	.LBB4305:
 30226              	.LBB4264:
 30227              	.LBB4251:
4568:src/xeq.c     **** 				set_was_complex();
 30228              		.loc 1 4568 5 is_stmt 1 view .LVU8138
 30229              	.LBB4242:
 30230              	.LBI4242:
 840:src/xeq.c     **** 	setX(x);
 30231              		.loc 1 840 6 view .LVU8139
 30232              	.LBE4242:
 30233              	.LBE4251:
 30234              	.LBE4264:
 30235              	.LBE4305:
 841:src/xeq.c     **** 	setY(y);
 30236              		.loc 1 841 2 view .LVU8140
 30237              	.LBB4306:
 30238              	.LBB4265:
 30239              	.LBB4252:
 30240              	.LBB4247:
 30241              	.LBB4243:
 30242              	.LBI4243:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 30243              		.loc 1 809 6 view .LVU8141
 30244              	.LBB4244:
 810:src/xeq.c     **** }
 30245              		.loc 1 810 2 view .LVU8142
 30246 04ea 30A9     		add	r1, sp, #192
 30247              	.LVL2361:
 810:src/xeq.c     **** }
 30248              		.loc 1 810 2 is_stmt 0 view .LVU8143
 30249 04ec 6420     		movs	r0, #100
 30250 04ee FFF7FEFF 		bl	setRegister
 30251              	.LVL2362:
 810:src/xeq.c     **** }
 30252              		.loc 1 810 2 view .LVU8144
 30253              	.LBE4244:
 30254              	.LBE4243:
 30255              	.LBE4247:
 30256              	.LBE4252:
 30257              	.LBE4265:
 30258              	.LBE4306:
 842:src/xeq.c     **** }
 30259              		.loc 1 842 2 is_stmt 1 view .LVU8145
 30260              	.LBB4307:
 30261              	.LBB4266:
 30262              	.LBB4253:
 30263              	.LBB4248:
ARM GAS  /tmp/ccjeMhND.s 			page 769


 30264              	.LBB4245:
 30265              	.LBI4245:
 817:src/xeq.c     **** 	setRegister(regY_idx, y);
 30266              		.loc 1 817 6 view .LVU8146
 30267              	.LBB4246:
 818:src/xeq.c     **** }
 30268              		.loc 1 818 2 view .LVU8147
 30269 04f2 39A9     		add	r1, sp, #228
 30270              	.LVL2363:
 818:src/xeq.c     **** }
 30271              		.loc 1 818 2 is_stmt 0 view .LVU8148
 30272 04f4 6520     		movs	r0, #101
 30273 04f6 FFF7FEFF 		bl	setRegister
 30274              	.LVL2364:
 818:src/xeq.c     **** }
 30275              		.loc 1 818 2 view .LVU8149
 30276              	.LBE4246:
 30277              	.LBE4245:
 30278              	.LBE4248:
4569:src/xeq.c     **** 			}
 30279              		.loc 1 4569 5 is_stmt 1 view .LVU8150
 30280              	.LBB4249:
 30281              	.LBI4249:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 30282              		.loc 1 530 13 view .LVU8151
 30283              	.LBB4250:
 531:src/xeq.c     **** }
 30284              		.loc 1 531 2 view .LVU8152
 531:src/xeq.c     **** }
 30285              		.loc 1 531 20 is_stmt 0 view .LVU8153
 30286 04fa 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 30287 04fc 194B     		ldr	r3, .L2351
 30288 04fe 0121     		movs	r1, #1
 30289 0500 61F38712 		bfi	r2, r1, #6, #2
 30290 0504 2275     		strb	r2, [r4, #20]
 30291 0506 1A68     		ldr	r2, [r3]
 532:src/xeq.c     **** 
 30292              		.loc 1 532 1 view .LVU8154
 30293 0508 5FE6     		b	.L2087
 30294              	.LVL2365:
 30295              	.L2118:
 532:src/xeq.c     **** 
 30296              		.loc 1 532 1 view .LVU8155
 30297              	.LBE4250:
 30298              	.LBE4249:
 30299              	.LBE4253:
 30300              	.LBE4266:
 30301              	.LBE4307:
5138:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
 30302              		.loc 1 5138 18 is_stmt 1 view .LVU8156
 30303              	.LBB4308:
 30304              	.LBI4308:
4432:src/xeq.c     **** {
 30305              		.loc 1 4432 13 view .LVU8157
 30306              	.LBB4309:
4434:src/xeq.c     **** 	process_cmdline_set_lift();
 30307              		.loc 1 4434 2 view .LVU8158
ARM GAS  /tmp/ccjeMhND.s 			page 770


4435:src/xeq.c     **** 
 30308              		.loc 1 4435 2 view .LVU8159
 30309              	.LBB4310:
 30310              	.LBI4310:
1146:src/xeq.c     **** 	process_cmdline();
 30311              		.loc 1 1146 6 view .LVU8160
 30312              	.LBB4311:
1147:src/xeq.c     **** 	set_lift();
 30313              		.loc 1 1147 2 view .LVU8161
 30314 050a FFF7FEFF 		bl	process_cmdline
 30315              	.LVL2366:
1148:src/xeq.c     **** }
 30316              		.loc 1 1148 2 view .LVU8162
 30317              	.LBB4312:
 30318              	.LBI4312:
 748:src/xeq.c     ****     State2.state_lift = 1;
 30319              		.loc 1 748 6 view .LVU8163
 30320              	.LBB4313:
 749:src/xeq.c     **** }
 30321              		.loc 1 749 5 view .LVU8164
 749:src/xeq.c     **** }
 30322              		.loc 1 749 23 is_stmt 0 view .LVU8165
 30323 050e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30324              	.LBE4313:
 30325              	.LBE4312:
 30326              	.LBE4311:
 30327              	.LBE4310:
4437:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 30328              		.loc 1 4437 4 view .LVU8166
 30329 0510 EDB2     		uxtb	r5, r5
 30330              	.LVL2367:
 30331              	.LBB4320:
 30332              	.LBB4318:
 30333              	.LBB4316:
 30334              	.LBB4314:
 749:src/xeq.c     **** }
 30335              		.loc 1 749 23 view .LVU8167
 30336 0512 43F04003 		orr	r3, r3, #64
 30337              	.LBE4314:
 30338              	.LBE4316:
 30339              	.LBE4318:
 30340              	.LBE4320:
4438:src/xeq.c     **** 		if (is_intmode()) {
 30341              		.loc 1 4438 5 view .LVU8168
 30342 0516 982D     		cmp	r5, #152
 30343              	.LBB4321:
 30344              	.LBB4319:
 30345              	.LBB4317:
 30346              	.LBB4315:
 749:src/xeq.c     **** }
 30347              		.loc 1 749 23 view .LVU8169
 30348 0518 E375     		strb	r3, [r4, #23]
 30349              	.LBE4315:
 30350              	.LBE4317:
 30351              	.LBE4319:
 30352              	.LBE4321:
4437:src/xeq.c     **** 	if (f < NUM_MONADIC) {
ARM GAS  /tmp/ccjeMhND.s 			page 771


 30353              		.loc 1 4437 2 is_stmt 1 view .LVU8170
 30354              	.LVL2368:
4438:src/xeq.c     **** 		if (is_intmode()) {
 30355              		.loc 1 4438 2 view .LVU8171
4438:src/xeq.c     **** 		if (is_intmode()) {
 30356              		.loc 1 4438 5 is_stmt 0 view .LVU8172
 30357 051a 3FF6BBAE 		bhi	.L2112
4439:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30358              		.loc 1 4439 3 is_stmt 1 view .LVU8173
4439:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30359              		.loc 1 4439 7 is_stmt 0 view .LVU8174
 30360 051e 3B68     		ldr	r3, [r7]
 30361 0520 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4439:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30362              		.loc 1 4439 6 view .LVU8175
 30363 0524 D907     		lsls	r1, r3, #31
 30364 0526 40F1B982 		bpl	.L2169
4440:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30365              		.loc 1 4440 4 is_stmt 1 view .LVU8176
4440:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30366              		.loc 1 4440 10 is_stmt 0 view .LVU8177
 30367 052a 144B     		ldr	r3, .L2351+24
 30368 052c 05EB4505 		add	r5, r5, r5, lsl #1
 30369              	.LVL2369:
4440:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30370              		.loc 1 4440 10 view .LVU8178
 30371 0530 03EBC505 		add	r5, r3, r5, lsl #3
 30372 0534 AD68     		ldr	r5, [r5, #8]
4440:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30373              		.loc 1 4440 7 view .LVU8179
 30374 0536 002D     		cmp	r5, #0
 30375 0538 00F0E181 		beq	.L2186
 30376              	.LBB4322:
4441:src/xeq.c     **** 				if (dispatch_xrom(fp))
 30377              		.loc 1 4441 5 is_stmt 1 view .LVU8180
 30378              	.LVL2370:
4442:src/xeq.c     **** 					return;
 30379              		.loc 1 4442 5 view .LVU8181
4442:src/xeq.c     **** 					return;
 30380              		.loc 1 4442 9 is_stmt 0 view .LVU8182
 30381 053c 2846     		mov	r0, r5
 30382 053e FFF7FEFF 		bl	dispatch_xrom
 30383              	.LVL2371:
4442:src/xeq.c     **** 					return;
 30384              		.loc 1 4442 8 view .LVU8183
 30385 0542 0028     		cmp	r0, #0
 30386 0544 40F08E80 		bne	.L2084
 30387              	.LBB4323:
4445:src/xeq.c     **** 					x = fp(x);
 30388              		.loc 1 4445 6 is_stmt 1 view .LVU8184
 30389              	.LBB4324:
 30390              	.LBI4324:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 30391              		.loc 1 1256 15 view .LVU8185
 30392              	.LBB4325:
1257:src/xeq.c     **** }
 30393              		.loc 1 1257 2 view .LVU8186
ARM GAS  /tmp/ccjeMhND.s 			page 772


1257:src/xeq.c     **** }
 30394              		.loc 1 1257 9 is_stmt 0 view .LVU8187
 30395 0548 6420     		movs	r0, #100
 30396 054a FFF7FEFF 		bl	get_reg_n_int
 30397              	.LVL2372:
1257:src/xeq.c     **** }
 30398              		.loc 1 1257 9 view .LVU8188
 30399              	.LBE4325:
 30400              	.LBE4324:
4446:src/xeq.c     **** 					setlastX();
 30401              		.loc 1 4446 6 is_stmt 1 view .LVU8189
4446:src/xeq.c     **** 					setlastX();
 30402              		.loc 1 4446 10 is_stmt 0 view .LVU8190
 30403 054e A847     		blx	r5
 30404              	.LVL2373:
4446:src/xeq.c     **** 					setlastX();
 30405              		.loc 1 4446 10 view .LVU8191
 30406 0550 044B     		ldr	r3, .L2351
 30407 0552 0593     		str	r3, [sp, #20]
 30408 0554 8046     		mov	r8, r0
 30409 0556 0D46     		mov	r5, r1
 30410              	.LVL2374:
4447:src/xeq.c     **** 					setX_int(x);
 30411              		.loc 1 4447 6 is_stmt 1 view .LVU8192
 30412              	.LBB4326:
 30413              	.LBI4326:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 30414              		.loc 1 773 6 view .LVU8193
 30415              	.LBB4327:
 774:src/xeq.c     **** }
 30416              		.loc 1 774 2 view .LVU8194
 30417 0558 6C20     		movs	r0, #108
 30418              	.LVL2375:
 774:src/xeq.c     **** }
 30419              		.loc 1 774 2 is_stmt 0 view .LVU8195
 30420 055a 6421     		movs	r1, #100
 30421              	.LVL2376:
 774:src/xeq.c     **** }
 30422              		.loc 1 774 2 view .LVU8196
 30423 055c FFF7FEFF 		bl	copyreg_n
 30424              	.LVL2377:
 30425              	.LBE4327:
 30426              	.LBE4326:
4448:src/xeq.c     **** 				}
 30427              		.loc 1 4448 6 is_stmt 1 view .LVU8197
 30428 0560 4EE0     		b	.L2309
 30429              	.L2352:
 30430 0562 00BF     		.align	2
 30431              	.L2351:
 30432 0564 00000000 		.word	Error
 30433 0568 00000000 		.word	XromRunning
 30434 056c 00000000 		.word	XromParams
 30435 0570 01400800 		.word	540673
 30436 0574 00000000 		.word	RetStk
 30437 0578 00000000 		.word	dyfuncs
 30438 057c 00000000 		.word	monfuncs
 30439 0580 00000000 		.word	Running
ARM GAS  /tmp/ccjeMhND.s 			page 773


 30440              	.LVL2378:
 30441              	.L2116:
4448:src/xeq.c     **** 				}
 30442              		.loc 1 4448 6 is_stmt 0 view .LVU8198
 30443              	.LBE4323:
 30444              	.LBE4322:
 30445              	.LBE4309:
 30446              	.LBE4308:
5140:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
 30447              		.loc 1 5140 18 is_stmt 1 view .LVU8199
 30448              	.LBB4342:
 30449              	.LBI4342:
4581:src/xeq.c     **** 	unsigned int f;
 30450              		.loc 1 4581 13 view .LVU8200
 30451              	.LBB4343:
4582:src/xeq.c     **** 	process_cmdline_set_lift();
 30452              		.loc 1 4582 2 view .LVU8201
4583:src/xeq.c     **** 
 30453              		.loc 1 4583 2 view .LVU8202
 30454              	.LBB4344:
 30455              	.LBI4344:
1146:src/xeq.c     **** 	process_cmdline();
 30456              		.loc 1 1146 6 view .LVU8203
 30457              	.LBB4345:
1147:src/xeq.c     **** 	set_lift();
 30458              		.loc 1 1147 2 view .LVU8204
 30459 0584 FFF7FEFF 		bl	process_cmdline
 30460              	.LVL2379:
1148:src/xeq.c     **** }
 30461              		.loc 1 1148 2 view .LVU8205
 30462              	.LBB4346:
 30463              	.LBI4346:
 748:src/xeq.c     ****     State2.state_lift = 1;
 30464              		.loc 1 748 6 view .LVU8206
 30465              	.LBB4347:
 749:src/xeq.c     **** }
 30466              		.loc 1 749 5 view .LVU8207
 749:src/xeq.c     **** }
 30467              		.loc 1 749 23 is_stmt 0 view .LVU8208
 30468 0588 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30469              	.LBE4347:
 30470              	.LBE4346:
 30471              	.LBE4345:
 30472              	.LBE4344:
4585:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 30473              		.loc 1 4585 4 view .LVU8209
 30474 058a EDB2     		uxtb	r5, r5
 30475              	.LVL2380:
 30476              	.LBB4354:
 30477              	.LBB4352:
 30478              	.LBB4350:
 30479              	.LBB4348:
 749:src/xeq.c     **** }
 30480              		.loc 1 749 23 view .LVU8210
 30481 058c 43F04003 		orr	r3, r3, #64
 30482              	.LBE4348:
 30483              	.LBE4350:
ARM GAS  /tmp/ccjeMhND.s 			page 774


 30484              	.LBE4352:
 30485              	.LBE4354:
4586:src/xeq.c     **** 		if (is_intmode()) {
 30486              		.loc 1 4586 5 view .LVU8211
 30487 0590 0B2D     		cmp	r5, #11
 30488              	.LBB4355:
 30489              	.LBB4353:
 30490              	.LBB4351:
 30491              	.LBB4349:
 749:src/xeq.c     **** }
 30492              		.loc 1 749 23 view .LVU8212
 30493 0592 E375     		strb	r3, [r4, #23]
 30494              	.LBE4349:
 30495              	.LBE4351:
 30496              	.LBE4353:
 30497              	.LBE4355:
4585:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 30498              		.loc 1 4585 2 is_stmt 1 view .LVU8213
 30499              	.LVL2381:
4586:src/xeq.c     **** 		if (is_intmode()) {
 30500              		.loc 1 4586 2 view .LVU8214
4586:src/xeq.c     **** 		if (is_intmode()) {
 30501              		.loc 1 4586 5 is_stmt 0 view .LVU8215
 30502 0594 3FF67EAE 		bhi	.L2112
4587:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 30503              		.loc 1 4587 3 is_stmt 1 view .LVU8216
4587:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 30504              		.loc 1 4587 7 is_stmt 0 view .LVU8217
 30505 0598 3B68     		ldr	r3, [r7]
 30506 059a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4587:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 30507              		.loc 1 4587 6 view .LVU8218
 30508 059e DB07     		lsls	r3, r3, #31
 30509 05a0 40F1B582 		bpl	.L2183
4588:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 30510              		.loc 1 4588 4 is_stmt 1 view .LVU8219
4588:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 30511              		.loc 1 4588 10 is_stmt 0 view .LVU8220
 30512 05a4 AF4B     		ldr	r3, .L2353
 30513 05a6 05EB8505 		add	r5, r5, r5, lsl #2
 30514              	.LVL2382:
4588:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 30515              		.loc 1 4588 10 view .LVU8221
 30516 05aa 03EB8505 		add	r5, r3, r5, lsl #2
 30517 05ae 6D68     		ldr	r5, [r5, #4]
4588:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 30518              		.loc 1 4588 7 view .LVU8222
 30519 05b0 002D     		cmp	r5, #0
 30520 05b2 00F0A481 		beq	.L2186
 30521              	.LBB4356:
4589:src/xeq.c     **** 				if (dispatch_xrom(fp))
 30522              		.loc 1 4589 5 is_stmt 1 view .LVU8223
 30523              	.LVL2383:
4590:src/xeq.c     **** 					return;
 30524              		.loc 1 4590 5 view .LVU8224
4590:src/xeq.c     **** 					return;
 30525              		.loc 1 4590 9 is_stmt 0 view .LVU8225
ARM GAS  /tmp/ccjeMhND.s 			page 775


 30526 05b6 2846     		mov	r0, r5
 30527 05b8 FFF7FEFF 		bl	dispatch_xrom
 30528              	.LVL2384:
4590:src/xeq.c     **** 					return;
 30529              		.loc 1 4590 8 view .LVU8226
 30530 05bc 0028     		cmp	r0, #0
 30531 05be 51D1     		bne	.L2084
 30532              	.LBB4357:
4593:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 30533              		.loc 1 4593 6 is_stmt 1 view .LVU8227
 30534              	.LBB4358:
 30535              	.LBI4358:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 30536              		.loc 1 1256 15 view .LVU8228
 30537              	.LBB4359:
1257:src/xeq.c     **** }
 30538              		.loc 1 1257 2 view .LVU8229
1257:src/xeq.c     **** }
 30539              		.loc 1 1257 9 is_stmt 0 view .LVU8230
 30540 05c0 6420     		movs	r0, #100
 30541 05c2 FFF7FEFF 		bl	get_reg_n_int
 30542              	.LVL2385:
 30543 05c6 8046     		mov	r8, r0
 30544              	.LVL2386:
1257:src/xeq.c     **** }
 30545              		.loc 1 1257 9 view .LVU8231
 30546              	.LBE4359:
 30547              	.LBE4358:
4594:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 30548              		.loc 1 4594 6 is_stmt 1 view .LVU8232
4594:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 30549              		.loc 1 4594 24 is_stmt 0 view .LVU8233
 30550 05c8 6520     		movs	r0, #101
 30551              	.LVL2387:
 30552              	.LBB4361:
 30553              	.LBB4360:
1257:src/xeq.c     **** }
 30554              		.loc 1 1257 9 view .LVU8234
 30555 05ca 0591     		str	r1, [sp, #20]
 30556              	.LVL2388:
1257:src/xeq.c     **** }
 30557              		.loc 1 1257 9 view .LVU8235
 30558              	.LBE4360:
 30559              	.LBE4361:
4594:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 30560              		.loc 1 4594 24 view .LVU8236
 30561 05cc FFF7FEFF 		bl	get_reg_n_int
 30562              	.LVL2389:
 30563 05d0 0790     		str	r0, [sp, #28]
4595:src/xeq.c     **** 					x = fp(z, y, x);
 30564              		.loc 1 4595 24 view .LVU8237
 30565 05d2 6620     		movs	r0, #102
4594:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 30566              		.loc 1 4594 24 view .LVU8238
 30567 05d4 0691     		str	r1, [sp, #24]
 30568              	.LVL2390:
4595:src/xeq.c     **** 					x = fp(z, y, x);
ARM GAS  /tmp/ccjeMhND.s 			page 776


 30569              		.loc 1 4595 6 is_stmt 1 view .LVU8239
4595:src/xeq.c     **** 					x = fp(z, y, x);
 30570              		.loc 1 4595 24 is_stmt 0 view .LVU8240
 30571 05d6 FFF7FEFF 		bl	get_reg_n_int
 30572              	.LVL2391:
4596:src/xeq.c     **** 					setlastX();
 30573              		.loc 1 4596 6 is_stmt 1 view .LVU8241
4596:src/xeq.c     **** 					setlastX();
 30574              		.loc 1 4596 10 is_stmt 0 view .LVU8242
 30575 05da 059B     		ldr	r3, [sp, #20]
 30576 05dc CDF80080 		str	r8, [sp]
 30577 05e0 0193     		str	r3, [sp, #4]
 30578 05e2 DDE90632 		ldrd	r3, r2, [sp, #24]
 30579 05e6 A847     		blx	r5
 30580              	.LVL2392:
4596:src/xeq.c     **** 					setlastX();
 30581              		.loc 1 4596 10 view .LVU8243
 30582 05e8 9F4B     		ldr	r3, .L2353+4
 30583 05ea 0593     		str	r3, [sp, #20]
 30584 05ec 8046     		mov	r8, r0
4596:src/xeq.c     **** 					setlastX();
 30585              		.loc 1 4596 10 view .LVU8244
 30586 05ee 0D46     		mov	r5, r1
 30587              	.LVL2393:
4597:src/xeq.c     **** 					lower();
 30588              		.loc 1 4597 6 is_stmt 1 view .LVU8245
 30589              	.LBB4362:
 30590              	.LBI4362:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 30591              		.loc 1 773 6 view .LVU8246
 30592              	.LBB4363:
 774:src/xeq.c     **** }
 30593              		.loc 1 774 2 view .LVU8247
 30594 05f0 6C20     		movs	r0, #108
 30595              	.LVL2394:
 774:src/xeq.c     **** }
 30596              		.loc 1 774 2 is_stmt 0 view .LVU8248
 30597 05f2 6421     		movs	r1, #100
 30598              	.LVL2395:
 774:src/xeq.c     **** }
 30599              		.loc 1 774 2 view .LVU8249
 30600 05f4 FFF7FEFF 		bl	copyreg_n
 30601              	.LVL2396:
 30602              	.LBE4363:
 30603              	.LBE4362:
4598:src/xeq.c     **** 					lower();
 30604              		.loc 1 4598 6 is_stmt 1 view .LVU8250
 30605 05f8 FFF7FEFF 		bl	lower
 30606              	.LVL2397:
 30607              	.L2307:
4599:src/xeq.c     **** 					setX_int(x);
 30608              		.loc 1 4599 6 view .LVU8251
 30609 05fc FFF7FEFF 		bl	lower
 30610              	.LVL2398:
 30611              	.L2309:
4600:src/xeq.c     **** 				}
 30612              		.loc 1 4600 6 view .LVU8252
ARM GAS  /tmp/ccjeMhND.s 			page 777


 30613 0600 4046     		mov	r0, r8
 30614 0602 2946     		mov	r1, r5
 30615 0604 FFF7FEFF 		bl	setX_int
 30616              	.LVL2399:
 30617 0608 059B     		ldr	r3, [sp, #20]
 30618 060a 1A68     		ldr	r2, [r3]
 30619              	.LBE4357:
 30620              	.LBE4356:
 30621 060c DDE5     		b	.L2087
 30622              	.LVL2400:
 30623              	.L2333:
4600:src/xeq.c     **** 				}
 30624              		.loc 1 4600 6 is_stmt 0 view .LVU8253
 30625              	.LBE4343:
 30626              	.LBE4342:
 30627              	.LBB4383:
 30628              	.LBB4071:
5054:src/xeq.c     **** 		return;
 30629              		.loc 1 5054 3 is_stmt 1 view .LVU8254
5054:src/xeq.c     **** 		return;
 30630              		.loc 1 5054 3 view .LVU8255
 30631              	.LBB4068:
 30632              	.LBI4063:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30633              		.loc 1 537 5 view .LVU8256
 30634              	.LBB4067:
 538:src/xeq.c     **** 		Error = e;
 30635              		.loc 1 538 2 view .LVU8257
 538:src/xeq.c     **** 		Error = e;
 30636              		.loc 1 538 12 is_stmt 0 view .LVU8258
 30637 060e 964B     		ldr	r3, .L2353+4
 30638 0610 DFF87882 		ldr	r8, .L2353+40
 30639              	.LVL2401:
 538:src/xeq.c     **** 		Error = e;
 30640              		.loc 1 538 12 view .LVU8259
 30641 0614 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 30642              		.loc 1 538 5 view .LVU8260
 30643 0616 0028     		cmp	r0, #0
 30644 0618 7FF445AE 		bne	.L2210
 30645 061c 41E6     		b	.L2091
 30646              	.LVL2402:
 30647              	.L2193:
 538:src/xeq.c     **** 		Error = e;
 30648              		.loc 1 538 5 view .LVU8261
 30649              	.LBE4067:
 30650              	.LBE4068:
 30651              	.LBE4071:
 30652              	.LBE4383:
 30653              	.LBB4384:
 30654              	.LBB4267:
4574:src/xeq.c     **** }
 30655              		.loc 1 4574 3 is_stmt 1 view .LVU8262
4574:src/xeq.c     **** }
 30656              		.loc 1 4574 3 view .LVU8263
 30657              	.LBB4254:
 30658              	.LBI4254:
ARM GAS  /tmp/ccjeMhND.s 			page 778


 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30659              		.loc 1 537 5 view .LVU8264
 30660              	.LBB4255:
 538:src/xeq.c     **** 		Error = e;
 30661              		.loc 1 538 2 view .LVU8265
 538:src/xeq.c     **** 		Error = e;
 30662              		.loc 1 538 12 is_stmt 0 view .LVU8266
 30663 061e 924B     		ldr	r3, .L2353+4
 30664 0620 1A68     		ldr	r2, [r3]
 538:src/xeq.c     **** 		Error = e;
 30665              		.loc 1 538 5 view .LVU8267
 30666 0622 002A     		cmp	r2, #0
 30667 0624 7FF46CAD 		bne	.L2097
 30668              	.LVL2403:
 30669              	.LBB4256:
 30670              	.LBI4256:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30671              		.loc 1 537 5 is_stmt 1 view .LVU8268
 30672              	.LBB4257:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 30673              		.loc 1 539 3 view .LVU8269
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 30674              		.loc 1 539 9 is_stmt 0 view .LVU8270
 30675 0628 0322     		movs	r2, #3
 30676 062a 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 30677              		.loc 1 540 3 is_stmt 1 view .LVU8271
 30678              	.LVL2404:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 30679              		.loc 1 540 3 is_stmt 0 view .LVU8272
 30680              	.LBE4257:
 30681              	.LBE4256:
 30682              	.LBE4255:
 30683              	.LBE4254:
4574:src/xeq.c     **** }
 30684              		.loc 1 4574 3 is_stmt 1 view .LVU8273
 30685              	.LBE4267:
 30686              	.LBE4384:
5143:src/xeq.c     **** 		}
 30687              		.loc 1 5143 12 view .LVU8274
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30688              		.loc 1 5153 2 view .LVU8275
 30689 062c 68E5     		b	.L2097
 30690              	.LVL2405:
 30691              	.L2157:
 30692              	.LBB4385:
 30693              	.LBB4039:
4421:src/xeq.c     **** 	if (idx != OP_rCLX)
 30694              		.loc 1 4421 3 view .LVU8276
4422:src/xeq.c     **** 		set_lift();
 30695              		.loc 1 4422 2 view .LVU8277
4422:src/xeq.c     **** 		set_lift();
 30696              		.loc 1 4422 5 is_stmt 0 view .LVU8278
 30697 062e 3F2D     		cmp	r5, #63
 30698 0630 7FF4C7AD 		bne	.L2166
 30699              	.L2159:
 30700              	.LVL2406:
ARM GAS  /tmp/ccjeMhND.s 			page 779


4422:src/xeq.c     **** 		set_lift();
 30701              		.loc 1 4422 5 view .LVU8279
 30702              	.LBE4039:
 30703              	.LBE4385:
5143:src/xeq.c     **** 		}
 30704              		.loc 1 5143 12 is_stmt 1 view .LVU8280
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30705              		.loc 1 5153 2 view .LVU8281
 30706 0634 1046     		mov	r0, r2
 30707              	.L2313:
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30708              		.loc 1 5153 2 is_stmt 0 view .LVU8282
 30709 0636 DFF85482 		ldr	r8, .L2353+40
 30710 063a 34E6     		b	.L2210
 30711              	.LVL2407:
 30712              	.L2104:
 30713              	.LBB4386:
 30714              	.LBB3988:
5009:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 30715              		.loc 1 5009 7 is_stmt 1 view .LVU8283
5009:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 30716              		.loc 1 5009 23 is_stmt 0 view .LVU8284
 30717 063c 059B     		ldr	r3, [sp, #20]
 30718 063e 1A44     		add	r2, r2, r3
 30719 0640 5379     		ldrb	r3, [r2, #5]	@ zero_extendqisi2
5009:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 30720              		.loc 1 5009 10 view .LVU8285
 30721 0642 DB06     		lsls	r3, r3, #27
 30722 0644 00F1CA80 		bmi	.L2337
 30723              	.L2106:
 30724              	.LBB3967:
5015:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 30725              		.loc 1 5015 3 is_stmt 1 view .LVU8286
 30726              	.LVL2408:
5016:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 30727              		.loc 1 5016 3 view .LVU8287
 30728              	.LBB3968:
 30729              	.LBI3968:
4273:src/xeq.c     **** {
 30730              		.loc 1 4273 24 view .LVU8288
 30731              	.LBB3969:
4275:src/xeq.c     **** 	if (xp < xrom)
 30732              		.loc 1 4275 2 view .LVU8289
4275:src/xeq.c     **** 	if (xp < xrom)
 30733              		.loc 1 4275 59 is_stmt 0 view .LVU8290
 30734 0648 069A     		ldr	r2, [sp, #24]
4276:src/xeq.c     **** 		return NULL;
 30735              		.loc 1 4276 5 view .LVU8291
 30736 064a 884B     		ldr	r3, .L2353+8
4275:src/xeq.c     **** 	if (xp < xrom)
 30737              		.loc 1 4275 59 view .LVU8292
 30738 064c 22F00102 		bic	r2, r2, #1
 30739              	.LVL2409:
4276:src/xeq.c     **** 		return NULL;
 30740              		.loc 1 4276 2 is_stmt 1 view .LVU8293
4276:src/xeq.c     **** 		return NULL;
 30741              		.loc 1 4276 5 is_stmt 0 view .LVU8294
ARM GAS  /tmp/ccjeMhND.s 			page 780


 30742 0650 9A42     		cmp	r2, r3
 30743 0652 63D2     		bcs	.L2338
 30744              	.LVL2410:
 30745              	.L2108:
4276:src/xeq.c     **** 		return NULL;
 30746              		.loc 1 4276 5 view .LVU8295
 30747              	.LBE3969:
 30748              	.LBE3968:
5038:src/xeq.c     **** 		}
 30749              		.loc 1 5038 4 is_stmt 1 view .LVU8296
 30750 0654 0846     		mov	r0, r1
 30751 0656 069B     		ldr	r3, [sp, #24]
 30752 0658 4146     		mov	r1, r8
 30753              	.LVL2411:
5038:src/xeq.c     **** 		}
 30754              		.loc 1 5038 4 is_stmt 0 view .LVU8297
 30755 065a 9847     		blx	r3
 30756              	.LVL2412:
5040:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 30757              		.loc 1 5040 3 is_stmt 1 view .LVU8298
5040:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 30758              		.loc 1 5040 6 is_stmt 0 view .LVU8299
 30759 065c B8F1840F 		cmp	r8, #132
 30760 0660 7FF4E5AD 		bne	.L2305
 30761              	.LVL2413:
 30762              	.L2084:
5040:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 30763              		.loc 1 5040 6 view .LVU8300
 30764 0664 804B     		ldr	r3, .L2353+4
 30765 0666 1A68     		ldr	r2, [r3]
 30766 0668 AFE5     		b	.L2087
 30767              	.LVL2414:
 30768              	.L2095:
5040:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 30769              		.loc 1 5040 6 view .LVU8301
 30770              	.LBE3967:
 30771              	.LBB3978:
4981:src/xeq.c     **** 			if ((regval >> 32) != 0)
 30772              		.loc 1 4981 4 is_stmt 1 view .LVU8302
4981:src/xeq.c     **** 			if ((regval >> 32) != 0)
 30773              		.loc 1 4981 13 is_stmt 0 view .LVU8303
 30774 066a 0846     		mov	r0, r1
 30775 066c 39A9     		add	r1, sp, #228
 30776              	.LVL2415:
4981:src/xeq.c     **** 			if ((regval >> 32) != 0)
 30777              		.loc 1 4981 13 view .LVU8304
 30778 066e FFF7FEFF 		bl	get_reg_n_int_sgn
 30779              	.LVL2416:
4982:src/xeq.c     **** 				goto range;
 30780              		.loc 1 4982 16 view .LVU8305
 30781 0672 0023     		movs	r3, #0
 30782 0674 0891     		str	r1, [sp, #32]
 30783              	.LVL2417:
4982:src/xeq.c     **** 				goto range;
 30784              		.loc 1 4982 16 view .LVU8306
 30785 0676 0993     		str	r3, [sp, #36]
 30786              	.LVL2418:
ARM GAS  /tmp/ccjeMhND.s 			page 781


4982:src/xeq.c     **** 				goto range;
 30787              		.loc 1 4982 4 is_stmt 1 view .LVU8307
4982:src/xeq.c     **** 				goto range;
 30788              		.loc 1 4982 7 is_stmt 0 view .LVU8308
 30789 0678 DDE90823 		ldrd	r2, [sp, #32]
 30790 067c 1343     		orrs	r3, r2, r3
 30791 067e 15D1     		bne	.L2099
4984:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 30792              		.loc 1 4984 4 is_stmt 1 view .LVU8309
4985:src/xeq.c     **** 				// negative arguments address local registers or flags
 30793              		.loc 1 4985 7 is_stmt 0 view .LVU8310
 30794 0680 15F0080F 		tst	r5, #8
 30795 0684 7A4A     		ldr	r2, .L2353+12
4984:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 30796              		.loc 1 4984 8 view .LVU8311
 30797 0686 0146     		mov	r1, r0
 30798              	.LVL2419:
4985:src/xeq.c     **** 				// negative arguments address local registers or flags
 30799              		.loc 1 4985 4 is_stmt 1 view .LVU8312
4985:src/xeq.c     **** 				// negative arguments address local registers or flags
 30800              		.loc 1 4985 7 is_stmt 0 view .LVU8313
 30801 0688 03D0     		beq	.L2093
4985:src/xeq.c     **** 				// negative arguments address local registers or flags
 30802              		.loc 1 4985 27 view .LVU8314
 30803 068a 399B     		ldr	r3, [sp, #228]
 30804 068c 0BB1     		cbz	r3, .L2093
4987:src/xeq.c     **** 			}
 30805              		.loc 1 4987 5 is_stmt 1 view .LVU8315
4987:src/xeq.c     **** 			}
 30806              		.loc 1 4987 9 is_stmt 0 view .LVU8316
 30807 068e 00F17001 		add	r1, r0, #112
 30808              	.LVL2420:
 30809              	.L2093:
4987:src/xeq.c     **** 			}
 30810              		.loc 1 4987 9 view .LVU8317
 30811              	.LBE3978:
4995:src/xeq.c     **** 		// Range checking for registers against variable boundary
 30812              		.loc 1 4995 2 is_stmt 1 view .LVU8318
4995:src/xeq.c     **** 		// Range checking for registers against variable boundary
 30813              		.loc 1 4995 18 is_stmt 0 view .LVU8319
 30814 0692 059B     		ldr	r3, [sp, #20]
 30815 0694 D318     		adds	r3, r2, r3
 30816 0696 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
4995:src/xeq.c     **** 		// Range checking for registers against variable boundary
 30817              		.loc 1 4995 5 view .LVU8320
 30818 0698 9D07     		lsls	r5, r3, #30
 30819 069a 35D5     		bpl	.L2101
4997:src/xeq.c     **** 	}
 30820              		.loc 1 4997 3 is_stmt 1 view .LVU8321
4997:src/xeq.c     **** 	}
 30821              		.loc 1 4997 9 is_stmt 0 view .LVU8322
 30822 069c 4046     		mov	r0, r8
 30823 069e 0791     		str	r1, [sp, #28]
 30824              	.LVL2421:
4997:src/xeq.c     **** 	}
 30825              		.loc 1 4997 9 view .LVU8323
 30826 06a0 FFF7FEFF 		bl	get_reg_limit
ARM GAS  /tmp/ccjeMhND.s 			page 782


 30827              	.LVL2422:
4997:src/xeq.c     **** 	}
 30828              		.loc 1 4997 9 view .LVU8324
 30829 06a4 0799     		ldr	r1, [sp, #28]
 30830 06a6 724A     		ldr	r2, .L2353+12
 30831              	.LVL2423:
 30832              	.L2102:
5005:src/xeq.c     **** 		// Argument is too large
 30833              		.loc 1 5005 2 is_stmt 1 view .LVU8325
5005:src/xeq.c     **** 		// Argument is too large
 30834              		.loc 1 5005 5 is_stmt 0 view .LVU8326
 30835 06a8 8142     		cmp	r1, r0
 30836 06aa C7D9     		bls	.L2104
 30837              	.LVL2424:
 30838              	.L2099:
5007:src/xeq.c     **** 	}
 30839              		.loc 1 5007 9 is_stmt 1 view .LVU8327
 30840              	.LBB3979:
 30841              	.LBI3979:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30842              		.loc 1 537 5 view .LVU8328
 30843              	.LBB3980:
 538:src/xeq.c     **** 		Error = e;
 30844              		.loc 1 538 2 view .LVU8329
 538:src/xeq.c     **** 		Error = e;
 30845              		.loc 1 538 12 is_stmt 0 view .LVU8330
 30846 06ac 6E4B     		ldr	r3, .L2353+4
 30847 06ae 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 30848              		.loc 1 538 5 view .LVU8331
 30849 06b0 0028     		cmp	r0, #0
 30850 06b2 C0D1     		bne	.L2313
 30851              	.LVL2425:
 30852              	.LBB3981:
 30853              	.LBI3981:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30854              		.loc 1 537 5 is_stmt 1 view .LVU8332
 30855              	.LBB3982:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 30856              		.loc 1 539 3 view .LVU8333
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 30857              		.loc 1 539 9 is_stmt 0 view .LVU8334
 30858 06b4 0820     		movs	r0, #8
 30859 06b6 DFF8D481 		ldr	r8, .L2353+40
 30860              	.LVL2426:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 30861              		.loc 1 539 9 view .LVU8335
 30862 06ba 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 30863              		.loc 1 540 3 is_stmt 1 view .LVU8336
 30864 06bc F3E5     		b	.L2210
 30865              	.LVL2427:
 30866              	.L2336:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 30867              		.loc 1 540 3 is_stmt 0 view .LVU8337
 30868              	.LBE3982:
 30869              	.LBE3981:
ARM GAS  /tmp/ccjeMhND.s 			page 783


 30870              	.LBE3980:
 30871              	.LBE3979:
 30872              	.LBE3988:
 30873              	.LBE4386:
5172:src/xeq.c     **** 					// Restore the global return stack
 30874              		.loc 1 5172 5 is_stmt 1 view .LVU8338
5172:src/xeq.c     **** 					// Restore the global return stack
 30875              		.loc 1 5172 9 is_stmt 0 view .LVU8339
 30876 06be 6D4D     		ldr	r5, .L2353+16
5172:src/xeq.c     **** 					// Restore the global return stack
 30877              		.loc 1 5172 8 view .LVU8340
 30878 06c0 95F90110 		ldrsb	r1, [r5, #1]
5172:src/xeq.c     **** 					// Restore the global return stack
 30879              		.loc 1 5172 9 view .LVU8341
 30880 06c4 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
5172:src/xeq.c     **** 					// Restore the global return stack
 30881              		.loc 1 5172 8 view .LVU8342
 30882 06c6 8142     		cmp	r1, r0
 30883 06c8 BFF670AE 		bge	.L2200
5174:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30884              		.loc 1 5174 6 is_stmt 1 view .LVU8343
5174:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30885              		.loc 1 5174 13 is_stmt 0 view .LVU8344
 30886 06cc 6A49     		ldr	r1, .L2353+20
5175:src/xeq.c     **** 					// Restore private stack to normal stack
 30887              		.loc 1 5175 6 view .LVU8345
 30888 06ce D7F800C0 		ldr	ip, [r7]
5174:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30889              		.loc 1 5174 13 view .LVU8346
 30890 06d2 AE68     		ldr	r6, [r5, #8]
 30891 06d4 0E60     		str	r6, [r1]
5175:src/xeq.c     **** 					// Restore private stack to normal stack
 30892              		.loc 1 5175 6 is_stmt 1 view .LVU8347
5177:src/xeq.c     **** 						// Need space for double precision stack
 30893              		.loc 1 5177 9 is_stmt 0 view .LVU8348
 30894 06d6 12F00809 		ands	r9, r2, #8
5175:src/xeq.c     **** 					// Restore private stack to normal stack
 30895              		.loc 1 5175 16 view .LVU8349
 30896 06da A989     		ldrh	r1, [r5, #12]
 30897 06dc ACF8E217 		strh	r1, [ip, #2018]	@ movhi
5177:src/xeq.c     **** 						// Need space for double precision stack
 30898              		.loc 1 5177 6 is_stmt 1 view .LVU8350
5177:src/xeq.c     **** 						// Need space for double precision stack
 30899              		.loc 1 5177 9 is_stmt 0 view .LVU8351
 30900 06e0 00F0A481 		beq	.L2201
5181:src/xeq.c     **** 					if (Error == ERR_NONE) {
 30901              		.loc 1 5181 6 is_stmt 1 view .LVU8352
5181:src/xeq.c     **** 					if (Error == ERR_NONE) {
 30902              		.loc 1 5181 20 is_stmt 0 view .LVU8353
 30903 06e4 60F3C712 		bfi	r2, r0, #7, #1
 30904 06e8 6A70     		strb	r2, [r5, #1]
5182:src/xeq.c     **** 						UState.mode_double = 1;
 30905              		.loc 1 5182 6 is_stmt 1 view .LVU8354
 30906              	.L2202:
5183:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 30907              		.loc 1 5183 7 view .LVU8355
5183:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
ARM GAS  /tmp/ccjeMhND.s 			page 784


 30908              		.loc 1 5183 26 is_stmt 0 view .LVU8356
 30909 06ea 3A68     		ldr	r2, [r7]
 30910 06ec 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 30911 06f0 43F04003 		orr	r3, r3, #64
 30912 06f4 82F8E937 		strb	r3, [r2, #2025]
 30913              	.LVL2428:
5184:src/xeq.c     **** 					}
 30914              		.loc 1 5184 7 is_stmt 1 view .LVU8357
5184:src/xeq.c     **** 					}
 30915              		.loc 1 5184 13 is_stmt 0 view .LVU8358
 30916 06f8 6420     		movs	r0, #100
 30917 06fa FFF7FEFF 		bl	get_reg_n
 30918              	.LVL2429:
5184:src/xeq.c     **** 					}
 30919              		.loc 1 5184 7 view .LVU8359
 30920 06fe 5F49     		ldr	r1, .L2353+24
 30921 0700 C022     		movs	r2, #192
 30922 0702 FFF7FEFF 		bl	xcopy
 30923              	.LVL2430:
 30924 0706 51E6     		b	.L2200
 30925              	.LVL2431:
 30926              	.L2101:
 30927              	.LBB4387:
 30928              	.LBB3989:
4999:src/xeq.c     **** 		if (LocalRegs == 0)
 30929              		.loc 1 4999 7 is_stmt 1 view .LVU8360
4999:src/xeq.c     **** 		if (LocalRegs == 0)
 30930              		.loc 1 4999 10 is_stmt 0 view .LVU8361
 30931 0708 5D06     		lsls	r5, r3, #25
 30932 070a 65D5     		bpl	.L2339
5000:src/xeq.c     **** 			lim = NUMFLG - 1;
 30933              		.loc 1 5000 3 is_stmt 1 view .LVU8362
5000:src/xeq.c     **** 			lim = NUMFLG - 1;
 30934              		.loc 1 5000 7 is_stmt 0 view .LVU8363
 30935 070c 3B68     		ldr	r3, [r7]
5000:src/xeq.c     **** 			lim = NUMFLG - 1;
 30936              		.loc 1 5000 6 view .LVU8364
 30937 070e B3F9DE37 		ldrsh	r3, [r3, #2014]
5003:src/xeq.c     **** 	}
 30938              		.loc 1 5003 8 view .LVU8365
 30939 0712 002B     		cmp	r3, #0
 30940 0714 0CBF     		ite	eq
 30941 0716 6F20     		moveq	r0, #111
 30942 0718 7F20     		movne	r0, #127
 30943 071a C5E7     		b	.L2102
 30944              	.LVL2432:
 30945              	.L2338:
 30946              	.LBB3983:
 30947              	.LBB3971:
 30948              	.LBB3970:
4280:src/xeq.c     **** 		return NULL;
 30949              		.loc 1 4280 2 is_stmt 1 view .LVU8366
4280:src/xeq.c     **** 		return NULL;
 30950              		.loc 1 4280 17 is_stmt 0 view .LVU8367
 30951 071c 5848     		ldr	r0, .L2353+28
 30952              	.LVL2433:
4280:src/xeq.c     **** 		return NULL;
ARM GAS  /tmp/ccjeMhND.s 			page 785


 30953              		.loc 1 4280 17 view .LVU8368
 30954 071e 0088     		ldrh	r0, [r0]
 30955 0720 03EB4003 		add	r3, r3, r0, lsl #1
4280:src/xeq.c     **** 		return NULL;
 30956              		.loc 1 4280 5 view .LVU8369
 30957 0724 9A42     		cmp	r2, r3
 30958 0726 95D2     		bcs	.L2108
 30959              	.LVL2434:
4280:src/xeq.c     **** 		return NULL;
 30960              		.loc 1 4280 5 view .LVU8370
 30961              	.LBE3970:
 30962              	.LBE3971:
5016:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 30963              		.loc 1 5016 6 view .LVU8371
 30964 0728 002A     		cmp	r2, #0
 30965 072a 93D0     		beq	.L2108
5028:src/xeq.c     **** 			if (XromUserPc == 0)
 30966              		.loc 1 5028 4 is_stmt 1 view .LVU8372
 30967              	.LVL2435:
 30968              	.LBB3972:
 30969              	.LBI3972:
2008:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 30970              		.loc 1 2008 14 view .LVU8373
 30971              	.LBB3973:
2009:src/xeq.c     **** }
 30972              		.loc 1 2009 2 view .LVU8374
 30973              	.LBE3973:
 30974              	.LBE3972:
5028:src/xeq.c     **** 			if (XromUserPc == 0)
 30975              		.loc 1 5028 33 is_stmt 0 view .LVU8375
 30976 072c 3B68     		ldr	r3, [r7]
 30977              	.LBB3975:
 30978              	.LBB3974:
2009:src/xeq.c     **** }
 30979              		.loc 1 2009 9 view .LVU8376
 30980 072e 41F4C441 		orr	r1, r1, #25088
 30981              	.LVL2436:
2009:src/xeq.c     **** }
 30982              		.loc 1 2009 9 view .LVU8377
 30983 0732 B3F8E007 		ldrh	r0, [r3, #2016]
 30984 0736 0322     		movs	r2, #3
 30985 0738 FFF7FEFF 		bl	find_opcode_from
 30986              	.LVL2437:
2009:src/xeq.c     **** }
 30987              		.loc 1 2009 9 view .LVU8378
 30988              	.LBE3974:
 30989              	.LBE3975:
5028:src/xeq.c     **** 			if (XromUserPc == 0)
 30990              		.loc 1 5028 15 view .LVU8379
 30991 073c 514B     		ldr	r3, .L2353+32
 30992              	.LVL2438:
5028:src/xeq.c     **** 			if (XromUserPc == 0)
 30993              		.loc 1 5028 15 view .LVU8380
 30994 073e 1860     		str	r0, [r3]
5029:src/xeq.c     **** 				return;
 30995              		.loc 1 5029 4 is_stmt 1 view .LVU8381
5029:src/xeq.c     **** 				return;
ARM GAS  /tmp/ccjeMhND.s 			page 786


 30996              		.loc 1 5029 7 is_stmt 0 view .LVU8382
 30997 0740 0028     		cmp	r0, #0
 30998 0742 8FD0     		beq	.L2084
5031:src/xeq.c     **** 				clrretstk();
 30999              		.loc 1 5031 4 is_stmt 1 view .LVU8383
5031:src/xeq.c     **** 				clrretstk();
 31000              		.loc 1 5031 8 is_stmt 0 view .LVU8384
 31001 0744 DFF84481 		ldr	r8, .L2353+40
 31002              	.LVL2439:
5031:src/xeq.c     **** 				clrretstk();
 31003              		.loc 1 5031 7 view .LVU8385
 31004 0748 D8F80030 		ldr	r3, [r8]
 31005 074c 23B9     		cbnz	r3, .L2110
5032:src/xeq.c     **** #endif
 31006              		.loc 1 5032 5 is_stmt 1 view .LVU8386
 31007              	.LBB3976:
 31008              	.LBI3976:
1409:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 31009              		.loc 1 1409 6 view .LVU8387
 31010              	.LBB3977:
1410:src/xeq.c     **** }
 31011              		.loc 1 1410 2 view .LVU8388
1410:src/xeq.c     **** }
 31012              		.loc 1 1410 14 is_stmt 0 view .LVU8389
 31013 074e 3A68     		ldr	r2, [r7]
1410:src/xeq.c     **** }
 31014              		.loc 1 1410 24 view .LVU8390
 31015 0750 A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
1410:src/xeq.c     **** }
 31016              		.loc 1 1410 12 view .LVU8391
 31017 0754 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 31018              	.L2110:
 31019              	.LBE3977:
 31020              	.LBE3976:
5034:src/xeq.c     **** 			return;
 31021              		.loc 1 5034 4 is_stmt 1 view .LVU8392
 31022 0758 434B     		ldr	r3, .L2353+4
 31023 075a 0698     		ldr	r0, [sp, #24]
 31024 075c 0593     		str	r3, [sp, #20]
 31025 075e FFF7FEFF 		bl	dispatch_xrom
 31026              	.LVL2440:
5035:src/xeq.c     **** 		}
 31027              		.loc 1 5035 4 view .LVU8393
 31028 0762 059B     		ldr	r3, [sp, #20]
 31029 0764 1A68     		ldr	r2, [r3]
 31030 0766 30E5     		b	.L2087
 31031              	.LVL2441:
 31032              	.L2094:
5035:src/xeq.c     **** 		}
 31033              		.loc 1 5035 4 is_stmt 0 view .LVU8394
 31034              	.LBE3983:
4992:src/xeq.c     **** 		}
 31035              		.loc 1 4992 4 is_stmt 1 view .LVU8395
4992:src/xeq.c     **** 		}
 31036              		.loc 1 4992 8 is_stmt 0 view .LVU8396
 31037 0768 41F08001 		orr	r1, r1, #128
 31038              	.LVL2442:
ARM GAS  /tmp/ccjeMhND.s 			page 787


4992:src/xeq.c     **** 		}
 31039              		.loc 1 4992 8 view .LVU8397
 31040 076c 91E7     		b	.L2093
 31041              	.LVL2443:
 31042              	.L2335:
4992:src/xeq.c     **** 		}
 31043              		.loc 1 4992 8 view .LVU8398
 31044              	.LBE3989:
 31045              	.LBE4387:
 31046              	.LBB4388:
 31047              	.LBB4189:
4513:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 31048              		.loc 1 4513 3 is_stmt 1 view .LVU8399
4513:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 31049              		.loc 1 4513 7 is_stmt 0 view .LVU8400
 31050 076e 3B68     		ldr	r3, [r7]
 31051 0770 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4513:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 31052              		.loc 1 4513 6 view .LVU8401
 31053 0774 DA07     		lsls	r2, r3, #31
 31054 0776 40F16281 		bpl	.L2176
4514:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 31055              		.loc 1 4514 4 is_stmt 1 view .LVU8402
4514:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 31056              		.loc 1 4514 10 is_stmt 0 view .LVU8403
 31057 077a 434B     		ldr	r3, .L2353+36
 31058 077c 05EB4505 		add	r5, r5, r5, lsl #1
 31059              	.LVL2444:
4514:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 31060              		.loc 1 4514 10 view .LVU8404
 31061 0780 03EBC505 		add	r5, r3, r5, lsl #3
 31062 0784 AD68     		ldr	r5, [r5, #8]
4514:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 31063              		.loc 1 4514 7 view .LVU8405
 31064 0786 002D     		cmp	r5, #0
 31065 0788 00F0B980 		beq	.L2186
 31066              	.LBB4161:
4515:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31067              		.loc 1 4515 5 is_stmt 1 view .LVU8406
 31068              	.LVL2445:
4516:src/xeq.c     **** 					return;
 31069              		.loc 1 4516 5 view .LVU8407
4516:src/xeq.c     **** 					return;
 31070              		.loc 1 4516 9 is_stmt 0 view .LVU8408
 31071 078c 2846     		mov	r0, r5
 31072 078e FFF7FEFF 		bl	dispatch_xrom
 31073              	.LVL2446:
4516:src/xeq.c     **** 					return;
 31074              		.loc 1 4516 8 view .LVU8409
 31075 0792 0028     		cmp	r0, #0
 31076 0794 7FF466AF 		bne	.L2084
 31077              	.LBB4162:
4519:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 31078              		.loc 1 4519 6 is_stmt 1 view .LVU8410
 31079              	.LBB4163:
 31080              	.LBI4163:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
ARM GAS  /tmp/ccjeMhND.s 			page 788


 31081              		.loc 1 1256 15 view .LVU8411
 31082              	.LBB4164:
1257:src/xeq.c     **** }
 31083              		.loc 1 1257 2 view .LVU8412
1257:src/xeq.c     **** }
 31084              		.loc 1 1257 9 is_stmt 0 view .LVU8413
 31085 0798 6420     		movs	r0, #100
 31086 079a FFF7FEFF 		bl	get_reg_n_int
 31087              	.LVL2447:
 31088 079e 0690     		str	r0, [sp, #24]
 31089              	.LBE4164:
 31090              	.LBE4163:
4520:src/xeq.c     **** 					x = fp(y, x);
 31091              		.loc 1 4520 24 view .LVU8414
 31092 07a0 6520     		movs	r0, #101
 31093              	.LBB4166:
 31094              	.LBB4165:
1257:src/xeq.c     **** }
 31095              		.loc 1 1257 9 view .LVU8415
 31096 07a2 0591     		str	r1, [sp, #20]
 31097              	.LVL2448:
1257:src/xeq.c     **** }
 31098              		.loc 1 1257 9 view .LVU8416
 31099              	.LBE4165:
 31100              	.LBE4166:
4520:src/xeq.c     **** 					x = fp(y, x);
 31101              		.loc 1 4520 6 is_stmt 1 view .LVU8417
4520:src/xeq.c     **** 					x = fp(y, x);
 31102              		.loc 1 4520 24 is_stmt 0 view .LVU8418
 31103 07a4 FFF7FEFF 		bl	get_reg_n_int
 31104              	.LVL2449:
4521:src/xeq.c     **** 					setlastX();
 31105              		.loc 1 4521 6 is_stmt 1 view .LVU8419
4521:src/xeq.c     **** 					setlastX();
 31106              		.loc 1 4521 10 is_stmt 0 view .LVU8420
 31107 07a8 DDE90532 		ldrd	r3, r2, [sp, #20]
 31108 07ac A847     		blx	r5
 31109              	.LVL2450:
4521:src/xeq.c     **** 					setlastX();
 31110              		.loc 1 4521 10 view .LVU8421
 31111 07ae 2E4B     		ldr	r3, .L2353+4
 31112 07b0 0593     		str	r3, [sp, #20]
 31113              	.LVL2451:
4521:src/xeq.c     **** 					setlastX();
 31114              		.loc 1 4521 10 view .LVU8422
 31115 07b2 8046     		mov	r8, r0
 31116 07b4 0D46     		mov	r5, r1
 31117              	.LVL2452:
4522:src/xeq.c     **** 					lower();
 31118              		.loc 1 4522 6 is_stmt 1 view .LVU8423
 31119              	.LBB4167:
 31120              	.LBI4167:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31121              		.loc 1 773 6 view .LVU8424
 31122              	.LBB4168:
 774:src/xeq.c     **** }
 31123              		.loc 1 774 2 view .LVU8425
ARM GAS  /tmp/ccjeMhND.s 			page 789


 31124 07b6 6C20     		movs	r0, #108
 31125              	.LVL2453:
 774:src/xeq.c     **** }
 31126              		.loc 1 774 2 is_stmt 0 view .LVU8426
 31127 07b8 6421     		movs	r1, #100
 31128              	.LVL2454:
 774:src/xeq.c     **** }
 31129              		.loc 1 774 2 view .LVU8427
 31130 07ba FFF7FEFF 		bl	copyreg_n
 31131              	.LVL2455:
 31132              	.LBE4168:
 31133              	.LBE4167:
4523:src/xeq.c     **** 					setX_int(x);
 31134              		.loc 1 4523 6 is_stmt 1 view .LVU8428
 31135 07be 1DE7     		b	.L2307
 31136              	.LVL2456:
 31137              	.L2155:
4523:src/xeq.c     **** 					setX_int(x);
 31138              		.loc 1 4523 6 is_stmt 0 view .LVU8429
 31139              	.LBE4162:
 31140              	.LBE4161:
 31141              	.LBE4189:
 31142              	.LBE4388:
 31143              	.LBB4389:
 31144              	.LBB4040:
4421:src/xeq.c     **** 	if (idx != OP_rCLX)
 31145              		.loc 1 4421 3 is_stmt 1 view .LVU8430
4421:src/xeq.c     **** 	if (idx != OP_rCLX)
 31146              		.loc 1 4421 3 view .LVU8431
 31147              	.LBB4011:
 31148              	.LBI4011:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31149              		.loc 1 537 5 view .LVU8432
 31150              	.LBB4012:
 538:src/xeq.c     **** 		Error = e;
 31151              		.loc 1 538 2 view .LVU8433
 538:src/xeq.c     **** 		Error = e;
 31152              		.loc 1 538 12 is_stmt 0 view .LVU8434
 31153 07c0 294B     		ldr	r3, .L2353+4
 31154 07c2 1A68     		ldr	r2, [r3]
 538:src/xeq.c     **** 		Error = e;
 31155              		.loc 1 538 5 view .LVU8435
 31156 07c4 002A     		cmp	r2, #0
 31157 07c6 7FF4FCAC 		bne	.L2166
 31158              	.LVL2457:
 31159              	.LBB4013:
 31160              	.LBI4013:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31161              		.loc 1 537 5 is_stmt 1 view .LVU8436
 31162              	.LBB4014:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31163              		.loc 1 539 3 view .LVU8437
 31164              	.LBE4014:
 31165              	.LBE4013:
 31166              	.LBE4012:
 31167              	.LBE4011:
 31168              	.LBB4021:
ARM GAS  /tmp/ccjeMhND.s 			page 790


 31169              	.LBB4007:
 749:src/xeq.c     **** }
 31170              		.loc 1 749 23 is_stmt 0 view .LVU8438
 31171 07ca E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 31172              	.LBE4007:
 31173              	.LBE4021:
 31174              	.LBB4022:
 31175              	.LBB4019:
 31176              	.LBB4017:
 31177              	.LBB4015:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31178              		.loc 1 539 9 view .LVU8439
 31179 07cc 0322     		movs	r2, #3
 31180              	.LBE4015:
 31181              	.LBE4017:
 31182              	.LBE4019:
 31183              	.LBE4022:
 31184              	.LBB4023:
 31185              	.LBB4008:
 749:src/xeq.c     **** }
 31186              		.loc 1 749 23 view .LVU8440
 31187 07ce 41F04001 		orr	r1, r1, #64
 31188 07d2 E175     		strb	r1, [r4, #23]
 31189              	.LBE4008:
 31190              	.LBE4023:
 31191              	.LBB4024:
 31192              	.LBB4020:
 31193              	.LBB4018:
 31194              	.LBB4016:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31195              		.loc 1 539 9 view .LVU8441
 31196 07d4 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31197              		.loc 1 540 3 is_stmt 1 view .LVU8442
 31198              	.LVL2458:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31199              		.loc 1 540 3 is_stmt 0 view .LVU8443
 31200              	.LBE4016:
 31201              	.LBE4018:
 31202              	.LBE4020:
 31203              	.LBE4024:
4423:src/xeq.c     **** }
 31204              		.loc 1 4423 3 is_stmt 1 view .LVU8444
 31205              	.LBB4025:
 748:src/xeq.c     ****     State2.state_lift = 1;
 31206              		.loc 1 748 6 view .LVU8445
 31207              	.LBB4009:
 749:src/xeq.c     **** }
 31208              		.loc 1 749 5 view .LVU8446
 749:src/xeq.c     **** }
 31209              		.loc 1 749 5 is_stmt 0 view .LVU8447
 31210              	.LBE4009:
 31211              	.LBE4025:
 31212              	.LBE4040:
 31213              	.LBE4389:
5143:src/xeq.c     **** 		}
 31214              		.loc 1 5143 12 is_stmt 1 view .LVU8448
ARM GAS  /tmp/ccjeMhND.s 			page 791


5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31215              		.loc 1 5153 2 view .LVU8449
 31216 07d6 93E4     		b	.L2097
 31217              	.LVL2459:
 31218              	.L2339:
 31219              	.LBB4390:
 31220              	.LBB3990:
4955:src/xeq.c     **** 
 31221              		.loc 1 4955 15 is_stmt 0 view .LVU8450
 31222 07d8 0798     		ldr	r0, [sp, #28]
 31223 07da 65E7     		b	.L2102
 31224              	.LVL2460:
 31225              	.L2337:
5009:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31226              		.loc 1 5009 30 view .LVU8451
 31227 07dc A1F16303 		sub	r3, r1, #99
 31228 07e0 0C2B     		cmp	r3, #12
 31229 07e2 3FF631AF 		bhi	.L2106
5009:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31230              		.loc 1 5009 69 view .LVU8452
 31231 07e6 CD07     		lsls	r5, r1, #31
 31232 07e8 7FF52EAF 		bpl	.L2106
5011:src/xeq.c     **** 	}
 31233              		.loc 1 5011 3 is_stmt 1 view .LVU8453
 31234              	.LVL2461:
 31235              	.LBB3984:
 31236              	.LBI3984:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31237              		.loc 1 537 5 view .LVU8454
 31238              	.LBB3985:
 538:src/xeq.c     **** 		Error = e;
 31239              		.loc 1 538 2 view .LVU8455
 538:src/xeq.c     **** 		Error = e;
 31240              		.loc 1 538 12 is_stmt 0 view .LVU8456
 31241 07ec 1E4B     		ldr	r3, .L2353+4
 31242 07ee 1868     		ldr	r0, [r3]
 31243              	.LVL2462:
 538:src/xeq.c     **** 		Error = e;
 31244              		.loc 1 538 5 view .LVU8457
 31245 07f0 0028     		cmp	r0, #0
 31246 07f2 7FF420AF 		bne	.L2313
 31247              	.LVL2463:
 31248              	.LBB3986:
 31249              	.LBI3986:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31250              		.loc 1 537 5 is_stmt 1 view .LVU8458
 31251              	.LBB3987:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31252              		.loc 1 539 3 view .LVU8459
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31253              		.loc 1 539 9 is_stmt 0 view .LVU8460
 31254 07f6 0720     		movs	r0, #7
 31255 07f8 DFF89080 		ldr	r8, .L2353+40
 31256              	.LVL2464:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31257              		.loc 1 539 9 view .LVU8461
 31258 07fc 1860     		str	r0, [r3]
ARM GAS  /tmp/ccjeMhND.s 			page 792


 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31259              		.loc 1 540 3 is_stmt 1 view .LVU8462
 31260 07fe 52E5     		b	.L2210
 31261              	.LVL2465:
 31262              	.L2334:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31263              		.loc 1 540 3 is_stmt 0 view .LVU8463
 31264              	.LBE3987:
 31265              	.LBE3986:
 31266              	.LBE3985:
 31267              	.LBE3984:
 31268              	.LBE3990:
 31269              	.LBE4390:
 31270              	.LBB4391:
 31271              	.LBB4072:
 31272              	.LBB4069:
5062:src/xeq.c     **** 			if (XromUserPc != 0) {
 31273              		.loc 1 5062 4 is_stmt 1 view .LVU8464
5062:src/xeq.c     **** 			if (XromUserPc != 0) {
 31274              		.loc 1 5062 17 is_stmt 0 view .LVU8465
 31275 0800 2846     		mov	r0, r5
 31276 0802 0121     		movs	r1, #1
 31277 0804 0592     		str	r2, [sp, #20]
 31278 0806 FFF7FEFF 		bl	findmultilbl
 31279              	.LVL2466:
5062:src/xeq.c     **** 			if (XromUserPc != 0) {
 31280              		.loc 1 5062 15 view .LVU8466
 31281 080a 1E4B     		ldr	r3, .L2353+32
5063:src/xeq.c     **** 				if (! Running)
 31282              		.loc 1 5063 7 view .LVU8467
 31283 080c 059A     		ldr	r2, [sp, #20]
5062:src/xeq.c     **** 			if (XromUserPc != 0) {
 31284              		.loc 1 5062 15 view .LVU8468
 31285 080e 1860     		str	r0, [r3]
5063:src/xeq.c     **** 				if (! Running)
 31286              		.loc 1 5063 4 is_stmt 1 view .LVU8469
5063:src/xeq.c     **** 				if (! Running)
 31287              		.loc 1 5063 7 is_stmt 0 view .LVU8470
 31288 0810 0028     		cmp	r0, #0
 31289 0812 3FF427AF 		beq	.L2084
 31290              	.LVL2467:
5064:src/xeq.c     **** 					clrretstk();
 31291              		.loc 1 5064 5 is_stmt 1 view .LVU8471
5064:src/xeq.c     **** 					clrretstk();
 31292              		.loc 1 5064 9 is_stmt 0 view .LVU8472
 31293 0816 DFF87480 		ldr	r8, .L2353+40
 31294              	.LVL2468:
5064:src/xeq.c     **** 					clrretstk();
 31295              		.loc 1 5064 8 view .LVU8473
 31296 081a D8F80030 		ldr	r3, [r8]
 31297 081e 23B9     		cbnz	r3, .L2088
5065:src/xeq.c     **** 				dispatch_xrom(fp);
 31298              		.loc 1 5065 6 is_stmt 1 view .LVU8474
 31299              	.LBB4061:
 31300              	.LBI4061:
1409:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 31301              		.loc 1 1409 6 view .LVU8475
ARM GAS  /tmp/ccjeMhND.s 			page 793


 31302              	.LBB4062:
1410:src/xeq.c     **** }
 31303              		.loc 1 1410 2 view .LVU8476
1410:src/xeq.c     **** }
 31304              		.loc 1 1410 14 is_stmt 0 view .LVU8477
 31305 0820 3968     		ldr	r1, [r7]
1410:src/xeq.c     **** }
 31306              		.loc 1 1410 24 view .LVU8478
 31307 0822 A1F8DE37 		strh	r3, [r1, #2014]	@ movhi
1410:src/xeq.c     **** }
 31308              		.loc 1 1410 12 view .LVU8479
 31309 0826 A1F8E237 		strh	r3, [r1, #2018]	@ movhi
 31310              	.L2088:
1410:src/xeq.c     **** }
 31311              		.loc 1 1410 12 view .LVU8480
 31312              	.LBE4062:
 31313              	.LBE4061:
5066:src/xeq.c     **** 			}
 31314              		.loc 1 5066 5 is_stmt 1 view .LVU8481
 31315 082a 0F4B     		ldr	r3, .L2353+4
 31316 082c 0593     		str	r3, [sp, #20]
 31317              	.LVL2469:
5066:src/xeq.c     **** 			}
 31318              		.loc 1 5066 5 is_stmt 0 view .LVU8482
 31319 082e 1046     		mov	r0, r2
 31320 0830 FFF7FEFF 		bl	dispatch_xrom
 31321              	.LVL2470:
 31322 0834 059B     		ldr	r3, [sp, #20]
 31323 0836 1A68     		ldr	r2, [r3]
 31324 0838 C7E4     		b	.L2087
 31325              	.LVL2471:
 31326              	.L2129:
5066:src/xeq.c     **** 			}
 31327              		.loc 1 5066 5 view .LVU8483
 31328              	.LBE4069:
 31329              	.LBE4072:
 31330              	.LBE4391:
 31331              	.LBB4392:
 31332              	.LBB4142:
3716:src/xeq.c     **** 		break;
 31333              		.loc 1 3716 3 is_stmt 1 view .LVU8484
 31334 083a 0B4B     		ldr	r3, .L2353+4
 31335 083c 0593     		str	r3, [sp, #20]
 31336 083e A8F10500 		sub	r0, r8, #5
 31337 0842 FFF7FEFF 		bl	digit
 31338              	.LVL2472:
3717:src/xeq.c     **** 
 31339              		.loc 1 3717 3 view .LVU8485
 31340 0846 059B     		ldr	r3, [sp, #20]
 31341 0848 1A68     		ldr	r2, [r3]
 31342 084a BEE4     		b	.L2087
 31343              	.L2126:
3857:src/xeq.c     **** 		break;
 31344              		.loc 1 3857 3 view .LVU8486
3857:src/xeq.c     **** 		break;
 31345              		.loc 1 3857 53 is_stmt 0 view .LVU8487
 31346 084c A5F11E01 		sub	r1, r5, #30
ARM GAS  /tmp/ccjeMhND.s 			page 794


 31347 0850 054B     		ldr	r3, .L2353+4
 31348 0852 0593     		str	r3, [sp, #20]
3857:src/xeq.c     **** 		break;
 31349              		.loc 1 3857 3 view .LVU8488
 31350 0854 C9B2     		uxtb	r1, r1
 31351 0856 40F61C00 		movw	r0, #2076
 31352 085a FFF7FEFF 		bl	do_tst
 31353              	.LVL2473:
3858:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
 31354              		.loc 1 3858 3 is_stmt 1 view .LVU8489
 31355 085e 059B     		ldr	r3, [sp, #20]
 31356 0860 1A68     		ldr	r2, [r3]
 31357 0862 B2E4     		b	.L2087
 31358              	.L2354:
 31359              		.align	2
 31360              	.L2353:
 31361 0864 00000000 		.word	trifuncs
 31362 0868 00000000 		.word	Error
 31363 086c 00000000 		.word	xrom
 31364 0870 00000000 		.word	argcmds
 31365 0874 00000000 		.word	XromParams
 31366 0878 00000000 		.word	RetStk
 31367 087c 00000000 		.word	XromLocal
 31368 0880 00000000 		.word	xrom_size
 31369 0884 00000000 		.word	XromUserPc
 31370 0888 00000000 		.word	dyfuncs
 31371 088c 00000000 		.word	Running
 31372              	.L2127:
3848:src/xeq.c     **** 		break;
 31373              		.loc 1 3848 3 view .LVU8490
3848:src/xeq.c     **** 		break;
 31374              		.loc 1 3848 54 is_stmt 0 view .LVU8491
 31375 0890 A5F11701 		sub	r1, r5, #23
 31376 0894 B94B     		ldr	r3, .L2355
 31377 0896 0593     		str	r3, [sp, #20]
3848:src/xeq.c     **** 		break;
 31378              		.loc 1 3848 3 view .LVU8492
 31379 0898 C9B2     		uxtb	r1, r1
 31380 089a 40F61B00 		movw	r0, #2075
 31381 089e FFF7FEFF 		bl	do_tst
 31382              	.LVL2474:
3849:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
 31383              		.loc 1 3849 3 is_stmt 1 view .LVU8493
 31384 08a2 059B     		ldr	r3, [sp, #20]
 31385 08a4 1A68     		ldr	r2, [r3]
 31386 08a6 90E4     		b	.L2087
 31387              	.L2122:
3863:src/xeq.c     **** 		break;
 31388              		.loc 1 3863 3 view .LVU8494
3863:src/xeq.c     **** 		break;
 31389              		.loc 1 3863 49 is_stmt 0 view .LVU8495
 31390 08a8 A5F12902 		sub	r2, r5, #41
 31391 08ac B34B     		ldr	r3, .L2355
3863:src/xeq.c     **** 		break;
 31392              		.loc 1 3863 3 view .LVU8496
 31393 08ae B449     		ldr	r1, .L2355+4
 31394 08b0 B448     		ldr	r0, .L2355+8
ARM GAS  /tmp/ccjeMhND.s 			page 795


 31395 08b2 0593     		str	r3, [sp, #20]
 31396 08b4 D2B2     		uxtb	r2, r2
 31397 08b6 FFF7FEFF 		bl	do_ztst
 31398              	.LVL2475:
3864:src/xeq.c     **** 
 31399              		.loc 1 3864 3 is_stmt 1 view .LVU8497
 31400 08ba 059B     		ldr	r3, [sp, #20]
 31401 08bc 1A68     		ldr	r2, [r3]
 31402 08be 84E4     		b	.L2087
 31403              	.L2124:
3860:src/xeq.c     **** 		break;
 31404              		.loc 1 3860 3 view .LVU8498
3860:src/xeq.c     **** 		break;
 31405              		.loc 1 3860 49 is_stmt 0 view .LVU8499
 31406 08c0 A5F12702 		sub	r2, r5, #39
 31407 08c4 AD4B     		ldr	r3, .L2355
3860:src/xeq.c     **** 		break;
 31408              		.loc 1 3860 3 view .LVU8500
 31409 08c6 AF49     		ldr	r1, .L2355+8
 31410 08c8 AD48     		ldr	r0, .L2355+4
 31411 08ca 0593     		str	r3, [sp, #20]
 31412 08cc D2B2     		uxtb	r2, r2
 31413 08ce FFF7FEFF 		bl	do_ztst
 31414              	.LVL2476:
3861:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
 31415              		.loc 1 3861 3 is_stmt 1 view .LVU8501
 31416 08d2 059B     		ldr	r3, [sp, #20]
 31417 08d4 1A68     		ldr	r2, [r3]
 31418 08d6 78E4     		b	.L2087
 31419              	.L2125:
3851:src/xeq.c     **** 		break;
 31420              		.loc 1 3851 3 view .LVU8502
 31421 08d8 AA49     		ldr	r1, .L2355+8
 31422 08da A84B     		ldr	r3, .L2355
 31423 08dc 0593     		str	r3, [sp, #20]
3851:src/xeq.c     **** 		break;
 31424              		.loc 1 3851 49 is_stmt 0 view .LVU8503
 31425 08de A5F12502 		sub	r2, r5, #37
3851:src/xeq.c     **** 		break;
 31426              		.loc 1 3851 3 view .LVU8504
 31427 08e2 D2B2     		uxtb	r2, r2
 31428 08e4 0846     		mov	r0, r1
 31429 08e6 FFF7FEFF 		bl	do_ztst
 31430              	.LVL2477:
3852:src/xeq.c     **** 
 31431              		.loc 1 3852 3 is_stmt 1 view .LVU8505
 31432 08ea 059B     		ldr	r3, [sp, #20]
 31433 08ec 1A68     		ldr	r2, [r3]
 31434 08ee 6CE4     		b	.L2087
 31435              	.L2128:
3830:src/xeq.c     **** 			bad_mode_error();
 31436              		.loc 1 3830 3 view .LVU8506
3830:src/xeq.c     **** 			bad_mode_error();
 31437              		.loc 1 3830 7 is_stmt 0 view .LVU8507
 31438 08f0 3B68     		ldr	r3, [r7]
 31439 08f2 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3830:src/xeq.c     **** 			bad_mode_error();
ARM GAS  /tmp/ccjeMhND.s 			page 796


 31440              		.loc 1 3830 6 view .LVU8508
 31441 08f6 13F00105 		ands	r5, r3, #1
 31442              	.LVL2478:
3830:src/xeq.c     **** 			bad_mode_error();
 31443              		.loc 1 3830 6 view .LVU8509
 31444 08fa 00F09581 		beq	.L2151
 31445              	.LVL2479:
 31446              	.L2186:
3830:src/xeq.c     **** 			bad_mode_error();
 31447              		.loc 1 3830 6 view .LVU8510
 31448              	.LBE4142:
 31449              	.LBE4392:
 31450              	.LBB4393:
 31451              	.LBB4378:
4620:src/xeq.c     **** 		}
 31452              		.loc 1 4620 5 is_stmt 1 view .LVU8511
 31453              	.LBB4364:
 31454              	.LBI4364:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 31455              		.loc 1 566 6 view .LVU8512
 31456              	.LBE4364:
 31457              	.LBE4378:
 31458              	.LBE4393:
 567:src/xeq.c     **** }
 31459              		.loc 1 567 2 view .LVU8513
 31460              	.LBB4394:
 31461              	.LBB4379:
 31462              	.LBB4367:
 31463              	.LBB4365:
 31464              	.LBI4365:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31465              		.loc 1 537 5 view .LVU8514
 31466              	.LBB4366:
 538:src/xeq.c     **** 		Error = e;
 31467              		.loc 1 538 2 view .LVU8515
 538:src/xeq.c     **** 		Error = e;
 31468              		.loc 1 538 12 is_stmt 0 view .LVU8516
 31469 08fe 9F4B     		ldr	r3, .L2355
 31470 0900 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 31471              		.loc 1 538 5 view .LVU8517
 31472 0902 0028     		cmp	r0, #0
 31473 0904 7FF497AE 		bne	.L2313
 31474              	.LVL2480:
 538:src/xeq.c     **** 		Error = e;
 31475              		.loc 1 538 5 view .LVU8518
 31476              	.LBE4366:
 31477              	.LBE4365:
 31478              	.LBE4367:
 31479              	.LBE4379:
 31480              	.LBE4394:
 31481              	.LBB4395:
 31482              	.LBB4143:
 31483              	.LBB4082:
 31484              	.LBB4083:
 31485              	.LBB4084:
 31486              	.LBB4085:
ARM GAS  /tmp/ccjeMhND.s 			page 797


 31487              	.LBI4085:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31488              		.loc 1 537 5 is_stmt 1 view .LVU8519
 31489              	.LBB4086:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31490              		.loc 1 539 3 view .LVU8520
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31491              		.loc 1 539 9 is_stmt 0 view .LVU8521
 31492 0908 0D20     		movs	r0, #13
 31493 090a DFF88882 		ldr	r8, .L2355+24
 31494 090e 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31495              		.loc 1 540 3 is_stmt 1 view .LVU8522
 31496 0910 C9E4     		b	.L2210
 31497              	.LVL2481:
 31498              	.L2134:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31499              		.loc 1 540 3 is_stmt 0 view .LVU8523
 31500              	.LBE4086:
 31501              	.LBE4085:
 31502              	.LBE4084:
 31503              	.LBE4083:
 31504              	.LBE4082:
3823:src/xeq.c     **** 		lift();
 31505              		.loc 1 3823 3 is_stmt 1 view .LVU8524
 31506 0912 FFF7FEFF 		bl	process_cmdline
 31507              	.LVL2482:
3824:src/xeq.c     **** 		clr_lift();
 31508              		.loc 1 3824 3 view .LVU8525
 31509 0916 FFF7FEFF 		bl	lift
 31510              	.LVL2483:
3825:src/xeq.c     **** 		break;
 31511              		.loc 1 3825 3 view .LVU8526
 31512              	.LBB4087:
 31513              	.LBI4087:
 752:src/xeq.c     ****     State2.state_lift = 0;
 31514              		.loc 1 752 13 view .LVU8527
 31515              	.LBB4088:
 753:src/xeq.c     **** }
 31516              		.loc 1 753 5 view .LVU8528
 753:src/xeq.c     **** }
 31517              		.loc 1 753 23 is_stmt 0 view .LVU8529
 31518 091a E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 31519 091c 974B     		ldr	r3, .L2355
 31520 091e 6FF38612 		bfc	r2, #6, #1
 31521 0922 E275     		strb	r2, [r4, #23]
 31522 0924 1A68     		ldr	r2, [r3]
 754:src/xeq.c     **** 
 31523              		.loc 1 754 1 view .LVU8530
 31524 0926 50E4     		b	.L2087
 31525              	.L2130:
 31526              	.LBE4088:
 31527              	.LBE4087:
3720:src/xeq.c     **** 			break;
 31528              		.loc 1 3720 3 is_stmt 1 view .LVU8531
3720:src/xeq.c     **** 			break;
 31529              		.loc 1 3720 7 is_stmt 0 view .LVU8532
ARM GAS  /tmp/ccjeMhND.s 			page 798


 31530 0928 3B68     		ldr	r3, [r7]
 31531 092a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3720:src/xeq.c     **** 			break;
 31532              		.loc 1 3720 6 view .LVU8533
 31533 092e D807     		lsls	r0, r3, #31
 31534 0930 3FF598AE 		bmi	.L2084
3723:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 31535              		.loc 1 3723 3 is_stmt 1 view .LVU8534
3723:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 31536              		.loc 1 3723 7 is_stmt 0 view .LVU8535
 31537 0934 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
3723:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 31538              		.loc 1 3723 6 view .LVU8536
 31539 0936 012B     		cmp	r3, #1
 31540 0938 3FF694AE 		bhi	.L2084
3723:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 31541              		.loc 1 3723 22 view .LVU8537
 31542 093c 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 31543 093e 002A     		cmp	r2, #0
 31544 0940 7FF490AE 		bne	.L2084
3723:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 31545              		.loc 1 3723 54 view .LVU8538
 31546 0944 002B     		cmp	r3, #0
3723:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 31547              		.loc 1 3723 40 view .LVU8539
 31548 0946 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3723:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 31549              		.loc 1 3723 54 view .LVU8540
 31550 0948 0CBF     		ite	eq
 31551 094a 0C22     		moveq	r2, #12
 31552 094c 0D22     		movne	r2, #13
3723:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 31553              		.loc 1 3723 37 view .LVU8541
 31554 094e 9A42     		cmp	r2, r3
 31555 0950 FFF688AE 		blt	.L2084
3724:src/xeq.c     **** #else
 31556              		.loc 1 3724 4 is_stmt 1 view .LVU8542
3724:src/xeq.c     **** #else
 31557              		.loc 1 3724 7 is_stmt 0 view .LVU8543
 31558 0954 002B     		cmp	r3, #0
 31559 0956 00F0E381 		beq	.L2137
3724:src/xeq.c     **** #else
 31560              		.loc 1 3724 37 view .LVU8544
 31561 095a 2344     		add	r3, r3, r4
3724:src/xeq.c     **** #else
 31562              		.loc 1 3724 27 view .LVU8545
 31563 095c DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 31564 095e 2D2B     		cmp	r3, #45
 31565 0960 00F0DE81 		beq	.L2137
 31566              	.L2138:
3735:src/xeq.c     **** 			append_cmdline('.');
 31567              		.loc 1 3735 4 is_stmt 1 view .LVU8546
 31568              	.LBB4089:
 31569              	.LBB4090:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31570              		.loc 1 2433 10 is_stmt 0 view .LVU8547
 31571 0964 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
ARM GAS  /tmp/ccjeMhND.s 			page 799


 31572              	.LBE4090:
 31573              	.LBE4089:
3735:src/xeq.c     **** 			append_cmdline('.');
 31574              		.loc 1 3735 14 view .LVU8548
 31575 0966 A17F     		ldrb	r1, [r4, #30]	@ zero_extendqisi2
 31576              	.LBB4094:
 31577              	.LBB4091:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31578              		.loc 1 2433 23 view .LVU8549
 31579 0968 5A1C     		adds	r2, r3, #1
 31580 096a D2B2     		uxtb	r2, r2
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31581              		.loc 1 2433 27 view .LVU8550
 31582 096c 2344     		add	r3, r3, r4
2434:src/xeq.c     **** }
 31583              		.loc 1 2434 25 view .LVU8551
 31584 096e A018     		adds	r0, r4, r2
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31585              		.loc 1 2433 23 view .LVU8552
 31586 0970 2277     		strb	r2, [r4, #28]
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31587              		.loc 1 2433 27 view .LVU8553
 31588 0972 2E22     		movs	r2, #46
 31589 0974 83F82020 		strb	r2, [r3, #32]
 31590 0978 804B     		ldr	r3, .L2355
2434:src/xeq.c     **** }
 31591              		.loc 1 2434 25 view .LVU8554
 31592 097a 0022     		movs	r2, #0
 31593              	.LBE4091:
 31594              	.LBE4094:
3735:src/xeq.c     **** 			append_cmdline('.');
 31595              		.loc 1 3735 14 view .LVU8555
 31596 097c 0131     		adds	r1, r1, #1
 31597              	.LBB4095:
 31598              	.LBB4092:
2434:src/xeq.c     **** }
 31599              		.loc 1 2434 25 view .LVU8556
 31600 097e 80F82020 		strb	r2, [r0, #32]
 31601              	.LBE4092:
 31602              	.LBE4095:
3735:src/xeq.c     **** 			append_cmdline('.');
 31603              		.loc 1 3735 14 view .LVU8557
 31604 0982 A177     		strb	r1, [r4, #30]
3736:src/xeq.c     **** 		}
 31605              		.loc 1 3736 4 is_stmt 1 view .LVU8558
 31606              	.LVL2484:
 31607              	.LBB4096:
 31608              	.LBI4089:
2432:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 31609              		.loc 1 2432 13 view .LVU8559
 31610              	.LBB4093:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31611              		.loc 1 2433 2 view .LVU8560
2434:src/xeq.c     **** }
 31612              		.loc 1 2434 2 view .LVU8561
 31613 0984 1A68     		ldr	r2, [r3]
2435:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 800


 31614              		.loc 1 2435 1 is_stmt 0 view .LVU8562
 31615 0986 20E4     		b	.L2087
 31616              	.LVL2485:
 31617              	.L2131:
2435:src/xeq.c     **** 
 31618              		.loc 1 2435 1 view .LVU8563
 31619              	.LBE4093:
 31620              	.LBE4096:
3788:src/xeq.c     **** 			cmdlinechs();
 31621              		.loc 1 3788 3 is_stmt 1 view .LVU8564
3788:src/xeq.c     **** 			cmdlinechs();
 31622              		.loc 1 3788 7 is_stmt 0 view .LVU8565
 31623 0988 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3788:src/xeq.c     **** 			cmdlinechs();
 31624              		.loc 1 3788 6 view .LVU8566
 31625 098a 002A     		cmp	r2, #0
 31626 098c 40F03181 		bne	.L2340
3790:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 31627              		.loc 1 3790 8 is_stmt 1 view .LVU8567
3790:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 31628              		.loc 1 3790 12 is_stmt 0 view .LVU8568
 31629 0990 3B68     		ldr	r3, [r7]
 31630 0992 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3790:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 31631              		.loc 1 3790 11 view .LVU8569
 31632 0996 DA07     		lsls	r2, r3, #31
 31633 0998 40F11D81 		bpl	.L2146
3791:src/xeq.c     **** 			set_lift();
 31634              		.loc 1 3791 4 is_stmt 1 view .LVU8570
 31635              	.LBB4097:
 31636              	.LBI4097:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 31637              		.loc 1 1256 15 view .LVU8571
 31638              	.LBB4098:
1257:src/xeq.c     **** }
 31639              		.loc 1 1257 2 view .LVU8572
1257:src/xeq.c     **** }
 31640              		.loc 1 1257 9 is_stmt 0 view .LVU8573
 31641 099c 6420     		movs	r0, #100
 31642 099e FFF7FEFF 		bl	get_reg_n_int
 31643              	.LVL2486:
 31644              	.LBE4098:
 31645              	.LBE4097:
3791:src/xeq.c     **** 			set_lift();
 31646              		.loc 1 3791 4 view .LVU8574
 31647 09a2 FFF7FEFF 		bl	intChs
 31648              	.LVL2487:
 31649 09a6 FFF7FEFF 		bl	setX_int
 31650              	.LVL2488:
3792:src/xeq.c     **** 		} else {
 31651              		.loc 1 3792 4 is_stmt 1 view .LVU8575
 31652              	.LBB4099:
 31653              	.LBI4099:
 748:src/xeq.c     ****     State2.state_lift = 1;
 31654              		.loc 1 748 6 view .LVU8576
 31655              	.LBB4100:
 749:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 801


 31656              		.loc 1 749 5 view .LVU8577
 31657 09aa 40E4     		b	.L2305
 31658              	.L2132:
 31659              	.LBE4100:
 31660              	.LBE4099:
3741:src/xeq.c     **** 			break;
 31661              		.loc 1 3741 3 view .LVU8578
 31662              	.LBB4101:
3749:src/xeq.c     **** #endif
 31663              		.loc 1 3749 4 view .LVU8579
 31664              	.LVL2489:
3752:src/xeq.c     **** 				if (eex_pi) {
 31665              		.loc 1 3752 4 view .LVU8580
3752:src/xeq.c     **** 				if (eex_pi) {
 31666              		.loc 1 3752 7 is_stmt 0 view .LVU8581
 31667 09ac A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 31668 09ae 022B     		cmp	r3, #2
 31669 09b0 3FF458AE 		beq	.L2084
 31670              	.LBE4101:
3741:src/xeq.c     **** 			break;
 31671              		.loc 1 3741 7 view .LVU8582
 31672 09b4 3A68     		ldr	r2, [r7]
 31673              	.LBB4104:
3767:src/xeq.c     **** 				break;
 31674              		.loc 1 3767 4 is_stmt 1 view .LVU8583
3767:src/xeq.c     **** 				break;
 31675              		.loc 1 3767 7 is_stmt 0 view .LVU8584
 31676 09b6 617F     		ldrb	r1, [r4, #29]	@ zero_extendqisi2
 31677              	.LBE4104:
3741:src/xeq.c     **** 			break;
 31678              		.loc 1 3741 7 view .LVU8585
 31679 09b8 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
 31680 09bc 03F00103 		and	r3, r3, #1
 31681              	.LBB4105:
3767:src/xeq.c     **** 				break;
 31682              		.loc 1 3767 7 view .LVU8586
 31683 09c0 0B43     		orrs	r3, r3, r1
 31684 09c2 7FF44FAE 		bne	.L2084
3767:src/xeq.c     **** 				break;
 31685              		.loc 1 3767 22 view .LVU8587
 31686 09c6 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3767:src/xeq.c     **** 				break;
 31687              		.loc 1 3767 19 view .LVU8588
 31688 09c8 122B     		cmp	r3, #18
 31689 09ca 3FF64BAE 		bhi	.L2084
3769:src/xeq.c     **** 				// empty command line: enter pi
 31690              		.loc 1 3769 4 is_stmt 1 view .LVU8589
3777:src/xeq.c     **** 				break;
 31691              		.loc 1 3777 4 view .LVU8590
3777:src/xeq.c     **** 				break;
 31692              		.loc 1 3777 8 is_stmt 0 view .LVU8591
 31693 09ce 92F8E627 		ldrb	r2, [r2, #2022]	@ zero_extendqisi2
3777:src/xeq.c     **** 				break;
 31694              		.loc 1 3777 7 view .LVU8592
 31695 09d2 9106     		lsls	r1, r2, #26
 31696 09d4 3FF546AE 		bmi	.L2084
3780:src/xeq.c     **** 				digit(1);
ARM GAS  /tmp/ccjeMhND.s 			page 802


 31697              		.loc 1 3780 4 is_stmt 1 view .LVU8593
3780:src/xeq.c     **** 				digit(1);
 31698              		.loc 1 3780 7 is_stmt 0 view .LVU8594
 31699 09d8 002B     		cmp	r3, #0
 31700 09da 00F0A581 		beq	.L2341
 31701              	.L2139:
3782:src/xeq.c     **** 			append_cmdline('E');
 31702              		.loc 1 3782 4 is_stmt 1 view .LVU8595
3782:src/xeq.c     **** 			append_cmdline('E');
 31703              		.loc 1 3782 17 is_stmt 0 view .LVU8596
 31704 09de 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3782:src/xeq.c     **** 			append_cmdline('E');
 31705              		.loc 1 3782 15 view .LVU8597
 31706 09e0 6377     		strb	r3, [r4, #29]
3783:src/xeq.c     **** 		}
 31707              		.loc 1 3783 4 is_stmt 1 view .LVU8598
 31708              	.LVL2490:
 31709              	.LBB4102:
 31710              	.LBI4102:
2432:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 31711              		.loc 1 2432 13 view .LVU8599
 31712              	.LBB4103:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31713              		.loc 1 2433 2 view .LVU8600
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31714              		.loc 1 2433 23 is_stmt 0 view .LVU8601
 31715 09e2 591C     		adds	r1, r3, #1
 31716 09e4 C9B2     		uxtb	r1, r1
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31717              		.loc 1 2433 27 view .LVU8602
 31718 09e6 E218     		adds	r2, r4, r3
2434:src/xeq.c     **** }
 31719              		.loc 1 2434 25 view .LVU8603
 31720 09e8 6018     		adds	r0, r4, r1
 31721 09ea 644B     		ldr	r3, .L2355
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31722              		.loc 1 2433 23 view .LVU8604
 31723 09ec 2177     		strb	r1, [r4, #28]
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31724              		.loc 1 2433 27 view .LVU8605
 31725 09ee 4521     		movs	r1, #69
 31726 09f0 82F82010 		strb	r1, [r2, #32]
2434:src/xeq.c     **** }
 31727              		.loc 1 2434 2 is_stmt 1 view .LVU8606
2434:src/xeq.c     **** }
 31728              		.loc 1 2434 25 is_stmt 0 view .LVU8607
 31729 09f4 0022     		movs	r2, #0
 31730 09f6 80F82020 		strb	r2, [r0, #32]
 31731 09fa 1A68     		ldr	r2, [r3]
2435:src/xeq.c     **** 
 31732              		.loc 1 2435 1 view .LVU8608
 31733 09fc FFF7E5BB 		b	.L2087
 31734              	.LVL2491:
 31735              	.L2133:
2435:src/xeq.c     **** 
 31736              		.loc 1 2435 1 view .LVU8609
 31737              	.LBE4103:
ARM GAS  /tmp/ccjeMhND.s 			page 803


 31738              	.LBE4102:
 31739              	.LBE4105:
3804:src/xeq.c     **** 			illegal(op);
 31740              		.loc 1 3804 3 is_stmt 1 view .LVU8610
3804:src/xeq.c     **** 			illegal(op);
 31741              		.loc 1 3804 7 is_stmt 0 view .LVU8611
 31742 0a00 DFF89081 		ldr	r8, .L2355+24
 31743              	.LVL2492:
3804:src/xeq.c     **** 			illegal(op);
 31744              		.loc 1 3804 6 view .LVU8612
 31745 0a04 D8F80020 		ldr	r2, [r8]
 31746 0a08 002A     		cmp	r2, #0
 31747 0a0a 00F0CF80 		beq	.L2147
3805:src/xeq.c     **** 		else if (CmdLineLength) {
 31748              		.loc 1 3805 4 is_stmt 1 view .LVU8613
3805:src/xeq.c     **** 		else if (CmdLineLength) {
 31749              		.loc 1 3805 4 view .LVU8614
 31750              	.LVL2493:
 31751              	.LBB4106:
 31752              	.LBI4106:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31753              		.loc 1 537 5 view .LVU8615
 31754              	.LBB4107:
 538:src/xeq.c     **** 		Error = e;
 31755              		.loc 1 538 2 view .LVU8616
 538:src/xeq.c     **** 		Error = e;
 31756              		.loc 1 538 12 is_stmt 0 view .LVU8617
 31757 0a0e 5B4B     		ldr	r3, .L2355
 31758 0a10 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 31759              		.loc 1 538 5 view .LVU8618
 31760 0a12 0028     		cmp	r0, #0
 31761 0a14 3FF445AC 		beq	.L2091
 31762 0a18 45E4     		b	.L2210
 31763              	.LVL2494:
 31764              	.L2194:
 538:src/xeq.c     **** 		Error = e;
 31765              		.loc 1 538 5 view .LVU8619
 31766              	.LBE4107:
 31767              	.LBE4106:
 31768              	.LBE4143:
 31769              	.LBE4395:
 31770              	.LBB4396:
 31771              	.LBB4268:
4572:src/xeq.c     **** 	} else
 31772              		.loc 1 4572 4 is_stmt 1 view .LVU8620
 31773              	.LBB4258:
 31774              	.LBI4258:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 31775              		.loc 1 566 6 view .LVU8621
 31776              	.LBE4258:
 31777              	.LBE4268:
 31778              	.LBE4396:
 567:src/xeq.c     **** }
 31779              		.loc 1 567 2 view .LVU8622
 31780              	.LBB4397:
 31781              	.LBB4269:
ARM GAS  /tmp/ccjeMhND.s 			page 804


 31782              	.LBB4263:
 31783              	.LBB4259:
 31784              	.LBI4259:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31785              		.loc 1 537 5 view .LVU8623
 31786              	.LBB4260:
 538:src/xeq.c     **** 		Error = e;
 31787              		.loc 1 538 2 view .LVU8624
 538:src/xeq.c     **** 		Error = e;
 31788              		.loc 1 538 12 is_stmt 0 view .LVU8625
 31789 0a1a 584B     		ldr	r3, .L2355
 31790 0a1c 1A68     		ldr	r2, [r3]
 538:src/xeq.c     **** 		Error = e;
 31791              		.loc 1 538 5 view .LVU8626
 31792 0a1e 002A     		cmp	r2, #0
 31793 0a20 7FF46EAB 		bne	.L2097
 31794              	.LVL2495:
 31795              	.LBB4261:
 31796              	.LBI4261:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31797              		.loc 1 537 5 is_stmt 1 view .LVU8627
 31798              	.LBB4262:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31799              		.loc 1 539 3 view .LVU8628
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31800              		.loc 1 539 9 is_stmt 0 view .LVU8629
 31801 0a24 0D22     		movs	r2, #13
 31802 0a26 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31803              		.loc 1 540 3 is_stmt 1 view .LVU8630
 31804              	.LVL2496:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31805              		.loc 1 540 3 is_stmt 0 view .LVU8631
 31806              	.LBE4262:
 31807              	.LBE4261:
 31808              	.LBE4260:
 31809              	.LBE4259:
 31810              	.LBE4263:
4574:src/xeq.c     **** }
 31811              		.loc 1 4574 3 is_stmt 1 view .LVU8632
 31812              	.LBE4269:
 31813              	.LBE4397:
5143:src/xeq.c     **** 		}
 31814              		.loc 1 5143 12 view .LVU8633
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31815              		.loc 1 5153 2 view .LVU8634
 31816 0a28 FFF76ABB 		b	.L2097
 31817              	.L2201:
5177:src/xeq.c     **** 						// Need space for double precision stack
 31818              		.loc 1 5177 34 is_stmt 0 discriminator 1 view .LVU8635
 31819 0a2c 9CF8CF17 		ldrb	r1, [ip, #1999]	@ zero_extendqisi2
 31820 0a30 0B29     		cmp	r1, #11
 31821 0a32 40F29280 		bls	.L2203
5181:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31822              		.loc 1 5181 6 is_stmt 1 view .LVU8636
5181:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31823              		.loc 1 5181 20 is_stmt 0 view .LVU8637
ARM GAS  /tmp/ccjeMhND.s 			page 805


 31824 0a36 69F3C712 		bfi	r2, r9, #7, #1
 31825 0a3a 6A70     		strb	r2, [r5, #1]
5182:src/xeq.c     **** 						UState.mode_double = 1;
 31826              		.loc 1 5182 6 is_stmt 1 view .LVU8638
 31827 0a3c 55E6     		b	.L2202
 31828              	.LVL2497:
 31829              	.L2176:
 31830              	.LBB4398:
 31831              	.LBB4190:
4529:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 31832              		.loc 1 4529 4 view .LVU8639
4529:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 31833              		.loc 1 4529 10 is_stmt 0 view .LVU8640
 31834 0a3e 524B     		ldr	r3, .L2355+12
 31835 0a40 05EB4505 		add	r5, r5, r5, lsl #1
 31836              	.LVL2498:
4529:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 31837              		.loc 1 4529 10 view .LVU8641
 31838 0a44 53F83550 		ldr	r5, [r3, r5, lsl #3]
4529:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 31839              		.loc 1 4529 7 view .LVU8642
 31840 0a48 002D     		cmp	r5, #0
 31841 0a4a 3FF458AF 		beq	.L2186
 31842              	.LBB4169:
4530:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31843              		.loc 1 4530 5 is_stmt 1 view .LVU8643
 31844              	.LVL2499:
4531:src/xeq.c     **** 					return;
 31845              		.loc 1 4531 5 view .LVU8644
4531:src/xeq.c     **** 					return;
 31846              		.loc 1 4531 9 is_stmt 0 view .LVU8645
 31847 0a4e 2846     		mov	r0, r5
 31848 0a50 FFF7FEFF 		bl	dispatch_xrom
 31849              	.LVL2500:
4531:src/xeq.c     **** 					return;
 31850              		.loc 1 4531 8 view .LVU8646
 31851 0a54 0028     		cmp	r0, #0
 31852 0a56 7FF405AE 		bne	.L2084
 31853              	.LBB4170:
4534:src/xeq.c     **** 					getXY(&x, &y);
 31854              		.loc 1 4534 6 is_stmt 1 view .LVU8647
4535:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
 31855              		.loc 1 4535 6 view .LVU8648
 31856              	.LVL2501:
 31857              	.LBB4171:
 31858              	.LBI4171:
 835:src/xeq.c     **** 	getX(x);
 31859              		.loc 1 835 6 view .LVU8649
 31860              	.LBE4171:
 31861              	.LBE4170:
 31862              	.LBE4169:
 31863              	.LBE4190:
 31864              	.LBE4398:
 836:src/xeq.c     **** 	getY(y);
 31865              		.loc 1 836 2 view .LVU8650
 31866              	.LBB4399:
 31867              	.LBB4191:
ARM GAS  /tmp/ccjeMhND.s 			page 806


 31868              	.LBB4186:
 31869              	.LBB4183:
 31870              	.LBB4178:
 31871              	.LBB4172:
 31872              	.LBI4172:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 31873              		.loc 1 805 12 view .LVU8651
 31874              	.LBB4173:
 806:src/xeq.c     **** }
 31875              		.loc 1 806 2 view .LVU8652
 806:src/xeq.c     **** }
 31876              		.loc 1 806 9 is_stmt 0 view .LVU8653
 31877 0a5a 6421     		movs	r1, #100
 31878 0a5c 27A8     		add	r0, sp, #156
 31879              	.LVL2502:
 806:src/xeq.c     **** }
 31880              		.loc 1 806 9 view .LVU8654
 31881 0a5e FFF7FEFF 		bl	getRegister
 31882              	.LVL2503:
 806:src/xeq.c     **** }
 31883              		.loc 1 806 9 view .LVU8655
 31884              	.LBE4173:
 31885              	.LBE4172:
 31886              	.LBE4178:
 31887              	.LBE4183:
 31888              	.LBE4186:
 31889              	.LBE4191:
 31890              	.LBE4399:
 837:src/xeq.c     **** }
 31891              		.loc 1 837 2 is_stmt 1 view .LVU8656
 31892              	.LBB4400:
 31893              	.LBB4192:
 31894              	.LBB4187:
 31895              	.LBB4184:
 31896              	.LBB4179:
 31897              	.LBB4174:
 31898              	.LBI4174:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 31899              		.loc 1 813 6 view .LVU8657
 31900              	.LBB4175:
 814:src/xeq.c     **** }
 31901              		.loc 1 814 2 view .LVU8658
 31902              	.LBE4175:
 31903              	.LBE4174:
 31904              	.LBE4179:
4536:src/xeq.c     **** 						set_NaN(&r);
 31905              		.loc 1 4536 18 is_stmt 0 view .LVU8659
 31906 0a62 0DF1E408 		add	r8, sp, #228
 31907              	.LBB4180:
 31908              	.LBB4177:
 31909              	.LBB4176:
 814:src/xeq.c     **** }
 31910              		.loc 1 814 2 view .LVU8660
 31911 0a66 6521     		movs	r1, #101
 31912 0a68 30A8     		add	r0, sp, #192
 31913              	.LVL2504:
 814:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 807


 31914              		.loc 1 814 2 view .LVU8661
 31915 0a6a FFF7FEFF 		bl	getRegister
 31916              	.LVL2505:
 814:src/xeq.c     **** }
 31917              		.loc 1 814 2 view .LVU8662
 31918              	.LBE4176:
 31919              	.LBE4177:
 31920              	.LBE4180:
4536:src/xeq.c     **** 						set_NaN(&r);
 31921              		.loc 1 4536 6 is_stmt 1 view .LVU8663
4536:src/xeq.c     **** 						set_NaN(&r);
 31922              		.loc 1 4536 18 is_stmt 0 view .LVU8664
 31923 0a6e 27AA     		add	r2, sp, #156
 31924 0a70 30A9     		add	r1, sp, #192
 31925 0a72 4046     		mov	r0, r8
 31926 0a74 A847     		blx	r5
 31927              	.LVL2506:
4536:src/xeq.c     **** 						set_NaN(&r);
 31928              		.loc 1 4536 9 view .LVU8665
 31929 0a76 0028     		cmp	r0, #0
 31930 0a78 00F0F680 		beq	.L2342
 31931              	.L2181:
4538:src/xeq.c     **** 					lower();
 31932              		.loc 1 4538 6 is_stmt 1 view .LVU8666
 31933              	.LBB4181:
 31934              	.LBI4181:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31935              		.loc 1 773 6 view .LVU8667
 31936              	.LBB4182:
 774:src/xeq.c     **** }
 31937              		.loc 1 774 2 view .LVU8668
 31938 0a7c 3F4B     		ldr	r3, .L2355
 31939 0a7e 0593     		str	r3, [sp, #20]
 31940 0a80 6421     		movs	r1, #100
 31941 0a82 6C20     		movs	r0, #108
 31942 0a84 FFF7FEFF 		bl	copyreg_n
 31943              	.LVL2507:
 31944              	.LBE4182:
 31945              	.LBE4181:
4539:src/xeq.c     **** 					setX(&r);
 31946              		.loc 1 4539 6 view .LVU8669
 31947              	.L2308:
4539:src/xeq.c     **** 					setX(&r);
 31948              		.loc 1 4539 6 is_stmt 0 view .LVU8670
 31949              	.LBE4184:
 31950              	.LBE4187:
 31951              	.LBE4192:
 31952              	.LBE4400:
 31953              	.LBB4401:
 31954              	.LBB4380:
 31955              	.LBB4368:
 31956              	.LBB4369:
4616:src/xeq.c     **** 					setX(&r);
 31957              		.loc 1 4616 6 is_stmt 1 view .LVU8671
 31958 0a88 FFF7FEFF 		bl	lower
 31959              	.LVL2508:
 31960              	.L2310:
ARM GAS  /tmp/ccjeMhND.s 			page 808


4617:src/xeq.c     **** 				}
 31961              		.loc 1 4617 6 view .LVU8672
 31962              	.LBB4370:
 31963              	.LBI4370:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 31964              		.loc 1 809 6 view .LVU8673
 31965              	.LBB4371:
 810:src/xeq.c     **** }
 31966              		.loc 1 810 2 view .LVU8674
 31967 0a8c 4146     		mov	r1, r8
 31968 0a8e 6420     		movs	r0, #100
 31969 0a90 FFF7FEFF 		bl	setRegister
 31970              	.LVL2509:
 810:src/xeq.c     **** }
 31971              		.loc 1 810 2 is_stmt 0 view .LVU8675
 31972 0a94 059B     		ldr	r3, [sp, #20]
 31973 0a96 1A68     		ldr	r2, [r3]
 31974              	.LBE4371:
 31975              	.LBE4370:
 31976              	.LBE4369:
 31977              	.LBE4368:
 31978 0a98 FFF797BB 		b	.L2087
 31979              	.LVL2510:
 31980              	.L2169:
 810:src/xeq.c     **** }
 31981              		.loc 1 810 2 view .LVU8676
 31982              	.LBE4380:
 31983              	.LBE4401:
 31984              	.LBB4402:
 31985              	.LBB4340:
4453:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 31986              		.loc 1 4453 4 is_stmt 1 view .LVU8677
4453:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 31987              		.loc 1 4453 10 is_stmt 0 view .LVU8678
 31988 0a9c 3B4B     		ldr	r3, .L2355+16
 31989 0a9e 05EB4505 		add	r5, r5, r5, lsl #1
 31990              	.LVL2511:
4453:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 31991              		.loc 1 4453 10 view .LVU8679
 31992 0aa2 53F83550 		ldr	r5, [r3, r5, lsl #3]
4453:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 31993              		.loc 1 4453 7 view .LVU8680
 31994 0aa6 002D     		cmp	r5, #0
 31995 0aa8 3FF429AF 		beq	.L2186
 31996              	.LBB4328:
4454:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31997              		.loc 1 4454 5 is_stmt 1 view .LVU8681
 31998              	.LVL2512:
4455:src/xeq.c     **** 					return;
 31999              		.loc 1 4455 5 view .LVU8682
4455:src/xeq.c     **** 					return;
 32000              		.loc 1 4455 9 is_stmt 0 view .LVU8683
 32001 0aac 2846     		mov	r0, r5
 32002 0aae FFF7FEFF 		bl	dispatch_xrom
 32003              	.LVL2513:
4455:src/xeq.c     **** 					return;
 32004              		.loc 1 4455 8 view .LVU8684
ARM GAS  /tmp/ccjeMhND.s 			page 809


 32005 0ab2 0028     		cmp	r0, #0
 32006 0ab4 7FF4D6AD 		bne	.L2084
 32007              	.LBB4329:
4458:src/xeq.c     **** 					getX(&x);
 32008              		.loc 1 4458 6 is_stmt 1 view .LVU8685
4459:src/xeq.c     **** 					if (NULL == fp(&r, &x))
 32009              		.loc 1 4459 6 view .LVU8686
 32010              	.LVL2514:
 32011              	.LBB4330:
 32012              	.LBI4330:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 32013              		.loc 1 805 12 view .LVU8687
 32014              	.LBB4331:
 806:src/xeq.c     **** }
 32015              		.loc 1 806 2 view .LVU8688
 806:src/xeq.c     **** }
 32016              		.loc 1 806 9 is_stmt 0 view .LVU8689
 32017 0ab8 6421     		movs	r1, #100
 32018 0aba 30A8     		add	r0, sp, #192
 32019              	.LVL2515:
 806:src/xeq.c     **** }
 32020              		.loc 1 806 9 view .LVU8690
 32021              	.LBE4331:
 32022              	.LBE4330:
4460:src/xeq.c     **** 						set_NaN(&r);
 32023              		.loc 1 4460 18 view .LVU8691
 32024 0abc 0DF1E408 		add	r8, sp, #228
 32025              	.LBB4333:
 32026              	.LBB4332:
 806:src/xeq.c     **** }
 32027              		.loc 1 806 9 view .LVU8692
 32028 0ac0 FFF7FEFF 		bl	getRegister
 32029              	.LVL2516:
 806:src/xeq.c     **** }
 32030              		.loc 1 806 9 view .LVU8693
 32031              	.LBE4332:
 32032              	.LBE4333:
4460:src/xeq.c     **** 						set_NaN(&r);
 32033              		.loc 1 4460 6 is_stmt 1 view .LVU8694
4460:src/xeq.c     **** 						set_NaN(&r);
 32034              		.loc 1 4460 18 is_stmt 0 view .LVU8695
 32035 0ac4 30A9     		add	r1, sp, #192
 32036 0ac6 4046     		mov	r0, r8
 32037 0ac8 A847     		blx	r5
 32038              	.LVL2517:
4460:src/xeq.c     **** 						set_NaN(&r);
 32039              		.loc 1 4460 9 view .LVU8696
 32040 0aca 0028     		cmp	r0, #0
 32041 0acc 00F0C480 		beq	.L2343
 32042              	.L2174:
4462:src/xeq.c     **** 					setX(&r);
 32043              		.loc 1 4462 6 is_stmt 1 view .LVU8697
 32044              	.LBB4334:
 32045              	.LBI4334:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32046              		.loc 1 773 6 view .LVU8698
 32047              	.LBB4335:
ARM GAS  /tmp/ccjeMhND.s 			page 810


 774:src/xeq.c     **** }
 32048              		.loc 1 774 2 view .LVU8699
 32049 0ad0 2A4B     		ldr	r3, .L2355
 32050 0ad2 0593     		str	r3, [sp, #20]
 32051 0ad4 6421     		movs	r1, #100
 32052 0ad6 6C20     		movs	r0, #108
 32053 0ad8 FFF7FEFF 		bl	copyreg_n
 32054              	.LVL2518:
 32055              	.LBE4335:
 32056              	.LBE4334:
4463:src/xeq.c     **** 				}
 32057              		.loc 1 4463 6 view .LVU8700
 32058              	.LBB4336:
 32059              	.LBI4336:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 32060              		.loc 1 809 6 view .LVU8701
 32061              	.LBB4337:
 810:src/xeq.c     **** }
 32062              		.loc 1 810 2 view .LVU8702
 32063 0adc D6E7     		b	.L2310
 32064              	.LVL2519:
 32065              	.L2296:
 810:src/xeq.c     **** }
 32066              		.loc 1 810 2 is_stmt 0 view .LVU8703
 32067              	.LBE4337:
 32068              	.LBE4336:
 32069              	.LBE4329:
 32070              	.LBE4328:
 32071              	.LBE4340:
 32072              	.LBE4402:
 32073              	.LBB4403:
 32074              	.LBB4041:
4404:src/xeq.c     **** 			bad_mode_error();
 32075              		.loc 1 4404 23 view .LVU8704
 32076 0ade 03EB0511 		add	r1, r3, r5, lsl #4
 32077 0ae2 2A01     		lsls	r2, r5, #4
4404:src/xeq.c     **** 			bad_mode_error();
 32078              		.loc 1 4404 20 view .LVU8705
 32079 0ae4 91F90410 		ldrsb	r1, [r1, #4]
 32080 0ae8 0029     		cmp	r1, #0
 32081 0aea BFF64AAB 		bge	.L2156
4405:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
 32082              		.loc 1 4405 4 is_stmt 1 view .LVU8706
 32083              	.LBB4026:
 32084              	.LBI4026:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 32085              		.loc 1 566 6 view .LVU8707
 32086              	.LBE4026:
 32087              	.LBE4041:
 32088              	.LBE4403:
 567:src/xeq.c     **** }
 32089              		.loc 1 567 2 view .LVU8708
 32090              	.LVL2520:
 32091              	.LBB4404:
 32092              	.LBB4042:
 32093              	.LBB4035:
 32094              	.LBB4027:
ARM GAS  /tmp/ccjeMhND.s 			page 811


 32095              	.LBI4027:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32096              		.loc 1 537 5 view .LVU8709
 32097              	.LBB4028:
 538:src/xeq.c     **** 		Error = e;
 32098              		.loc 1 538 2 view .LVU8710
 538:src/xeq.c     **** 		Error = e;
 32099              		.loc 1 538 12 is_stmt 0 view .LVU8711
 32100 0aee 234B     		ldr	r3, .L2355
 32101 0af0 1A68     		ldr	r2, [r3]
 538:src/xeq.c     **** 		Error = e;
 32102              		.loc 1 538 5 view .LVU8712
 32103 0af2 002A     		cmp	r2, #0
 32104 0af4 7FF49BAD 		bne	.L2157
 32105              	.LVL2521:
 32106              	.LBB4029:
 32107              	.LBI4029:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32108              		.loc 1 537 5 is_stmt 1 view .LVU8713
 32109              	.LBB4030:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32110              		.loc 1 539 3 view .LVU8714
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32111              		.loc 1 539 9 is_stmt 0 view .LVU8715
 32112 0af8 0D22     		movs	r2, #13
 32113              	.LBE4030:
 32114              	.LBE4029:
 32115              	.LBE4028:
 32116              	.LBE4027:
 32117              	.LBE4035:
4422:src/xeq.c     **** 		set_lift();
 32118              		.loc 1 4422 5 view .LVU8716
 32119 0afa 3F2D     		cmp	r5, #63
 32120              	.LBB4036:
 32121              	.LBB4034:
 32122              	.LBB4033:
 32123              	.LBB4032:
 32124              	.LBB4031:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32125              		.loc 1 539 9 view .LVU8717
 32126 0afc 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 32127              		.loc 1 540 3 is_stmt 1 view .LVU8718
 32128              	.LVL2522:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 32129              		.loc 1 540 3 is_stmt 0 view .LVU8719
 32130              	.LBE4031:
 32131              	.LBE4032:
 32132              	.LBE4033:
 32133              	.LBE4034:
 32134              	.LBE4036:
4421:src/xeq.c     **** 	if (idx != OP_rCLX)
 32135              		.loc 1 4421 3 is_stmt 1 view .LVU8720
4422:src/xeq.c     **** 		set_lift();
 32136              		.loc 1 4422 2 view .LVU8721
4422:src/xeq.c     **** 		set_lift();
 32137              		.loc 1 4422 5 is_stmt 0 view .LVU8722
ARM GAS  /tmp/ccjeMhND.s 			page 812


 32138 0afe 3FF499AD 		beq	.L2159
4423:src/xeq.c     **** }
 32139              		.loc 1 4423 3 is_stmt 1 view .LVU8723
 32140              	.LBB4037:
 748:src/xeq.c     ****     State2.state_lift = 1;
 32141              		.loc 1 748 6 view .LVU8724
 32142              	.LBB4010:
 749:src/xeq.c     **** }
 32143              		.loc 1 749 5 view .LVU8725
 749:src/xeq.c     **** }
 32144              		.loc 1 749 23 is_stmt 0 view .LVU8726
 32145 0b02 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 32146 0b04 41F04001 		orr	r1, r1, #64
 32147 0b08 E175     		strb	r1, [r4, #23]
 32148              	.LVL2523:
 749:src/xeq.c     **** }
 32149              		.loc 1 749 23 view .LVU8727
 32150              	.LBE4010:
 32151              	.LBE4037:
 32152              	.LBE4042:
 32153              	.LBE4404:
5143:src/xeq.c     **** 		}
 32154              		.loc 1 5143 12 is_stmt 1 view .LVU8728
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 32155              		.loc 1 5153 2 view .LVU8729
 32156 0b0a FFF7F9BA 		b	.L2097
 32157              	.LVL2524:
 32158              	.L2183:
 32159              	.LBB4405:
 32160              	.LBB4381:
4605:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 32161              		.loc 1 4605 4 view .LVU8730
4605:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 32162              		.loc 1 4605 10 is_stmt 0 view .LVU8731
 32163 0b0e 204B     		ldr	r3, .L2355+20
 32164 0b10 05EB8505 		add	r5, r5, r5, lsl #2
 32165              	.LVL2525:
4605:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 32166              		.loc 1 4605 10 view .LVU8732
 32167 0b14 53F82550 		ldr	r5, [r3, r5, lsl #2]
4605:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 32168              		.loc 1 4605 7 view .LVU8733
 32169 0b18 002D     		cmp	r5, #0
 32170 0b1a 3FF4F0AE 		beq	.L2186
 32171              	.LBB4376:
4606:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32172              		.loc 1 4606 5 is_stmt 1 view .LVU8734
 32173              	.LVL2526:
4607:src/xeq.c     **** 					return;
 32174              		.loc 1 4607 5 view .LVU8735
4607:src/xeq.c     **** 					return;
 32175              		.loc 1 4607 9 is_stmt 0 view .LVU8736
 32176 0b1e 2846     		mov	r0, r5
 32177 0b20 FFF7FEFF 		bl	dispatch_xrom
 32178              	.LVL2527:
4607:src/xeq.c     **** 					return;
 32179              		.loc 1 4607 8 view .LVU8737
ARM GAS  /tmp/ccjeMhND.s 			page 813


 32180 0b24 0028     		cmp	r0, #0
 32181 0b26 7FF49DAD 		bne	.L2084
 32182              	.LBB4374:
4610:src/xeq.c     **** 					getXYZ(&x, &y, &z);
 32183              		.loc 1 4610 6 is_stmt 1 view .LVU8738
4611:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 32184              		.loc 1 4611 6 view .LVU8739
 32185 0b2a 30AA     		add	r2, sp, #192
 32186 0b2c 27A9     		add	r1, sp, #156
 32187 0b2e 1EA8     		add	r0, sp, #120
4612:src/xeq.c     **** 						set_NaN(&r);
 32188              		.loc 1 4612 18 is_stmt 0 view .LVU8740
 32189 0b30 0DF1E408 		add	r8, sp, #228
4611:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 32190              		.loc 1 4611 6 view .LVU8741
 32191 0b34 FFF7FEFF 		bl	getXYZ
 32192              	.LVL2528:
4612:src/xeq.c     **** 						set_NaN(&r);
 32193              		.loc 1 4612 6 is_stmt 1 view .LVU8742
4612:src/xeq.c     **** 						set_NaN(&r);
 32194              		.loc 1 4612 18 is_stmt 0 view .LVU8743
 32195 0b38 1EAB     		add	r3, sp, #120
 32196 0b3a 27AA     		add	r2, sp, #156
 32197 0b3c 30A9     		add	r1, sp, #192
 32198 0b3e 4046     		mov	r0, r8
 32199 0b40 A847     		blx	r5
 32200              	.LVL2529:
4612:src/xeq.c     **** 						set_NaN(&r);
 32201              		.loc 1 4612 9 view .LVU8744
 32202 0b42 0028     		cmp	r0, #0
 32203 0b44 00F08C80 		beq	.L2344
 32204              	.L2188:
4614:src/xeq.c     **** 					lower();
 32205              		.loc 1 4614 6 is_stmt 1 view .LVU8745
 32206              	.LBB4372:
 32207              	.LBI4372:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32208              		.loc 1 773 6 view .LVU8746
 32209              	.LBB4373:
 774:src/xeq.c     **** }
 32210              		.loc 1 774 2 view .LVU8747
 32211 0b48 0C4B     		ldr	r3, .L2355
 32212 0b4a 0593     		str	r3, [sp, #20]
 32213 0b4c 6421     		movs	r1, #100
 32214 0b4e 6C20     		movs	r0, #108
 32215 0b50 FFF7FEFF 		bl	copyreg_n
 32216              	.LVL2530:
 32217              	.LBE4373:
 32218              	.LBE4372:
4615:src/xeq.c     **** 					lower();
 32219              		.loc 1 4615 6 view .LVU8748
 32220 0b54 FFF7FEFF 		bl	lower
 32221              	.LVL2531:
 32222 0b58 96E7     		b	.L2308
 32223              	.LVL2532:
 32224              	.L2203:
4615:src/xeq.c     **** 					lower();
ARM GAS  /tmp/ccjeMhND.s 			page 814


 32225              		.loc 1 4615 6 is_stmt 0 view .LVU8749
 32226              	.LBE4374:
 32227              	.LBE4376:
 32228              	.LBE4381:
 32229              	.LBE4405:
5179:src/xeq.c     **** 					}
 32230              		.loc 1 5179 7 is_stmt 1 view .LVU8750
 32231 0b5a 7D21     		movs	r1, #125
 32232 0b5c 0C20     		movs	r0, #12
 32233 0b5e 0293     		str	r3, [sp, #8]
 32234 0b60 FFF7FEFF 		bl	cmdregs
 32235              	.LVL2533:
 32236 0b64 029B     		ldr	r3, [sp, #8]
5181:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32237              		.loc 1 5181 20 is_stmt 0 view .LVU8751
 32238 0b66 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 32239 0b68 1968     		ldr	r1, [r3]
5181:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32240              		.loc 1 5181 6 is_stmt 1 view .LVU8752
5181:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32241              		.loc 1 5181 20 is_stmt 0 view .LVU8753
 32242 0b6a 69F3C712 		bfi	r2, r9, #7, #1
 32243 0b6e 6A70     		strb	r2, [r5, #1]
5182:src/xeq.c     **** 						UState.mode_double = 1;
 32244              		.loc 1 5182 6 is_stmt 1 view .LVU8754
5182:src/xeq.c     **** 						UState.mode_double = 1;
 32245              		.loc 1 5182 9 is_stmt 0 view .LVU8755
 32246 0b70 0029     		cmp	r1, #0
 32247 0b72 3FF4BAAD 		beq	.L2202
5187:src/xeq.c     **** 				}
 32248              		.loc 1 5187 7 is_stmt 1 view .LVU8756
5187:src/xeq.c     **** 				}
 32249              		.loc 1 5187 13 is_stmt 0 view .LVU8757
 32250 0b76 C3F80090 		str	r9, [r3]
 32251 0b7a 17E4     		b	.L2200
 32252              	.L2356:
 32253              		.align	2
 32254              	.L2355:
 32255 0b7c 00000000 		.word	Error
 32256 0b80 00000000 		.word	const_1
 32257 0b84 00000000 		.word	const_0
 32258 0b88 00000000 		.word	dyfuncs
 32259 0b8c 00000000 		.word	monfuncs
 32260 0b90 00000000 		.word	trifuncs
 32261 0b94 00000000 		.word	Running
 32262              	.LVL2534:
 32263              	.L2332:
 32264              	.LBB4406:
 32265              	.LBB4043:
 32266              	.LBB4038:
 32267              	.LBB4000:
 32268              	.LBB3999:
 740:src/xeq.c     **** }
 32269              		.loc 1 740 3 is_stmt 1 view .LVU8758
 32270 0b98 FFF7FEFF 		bl	lift
 32271              	.LVL2535:
 32272              	.L2162:
ARM GAS  /tmp/ccjeMhND.s 			page 815


 32273              	.LBE3999:
 32274              	.LBE4000:
4413:src/xeq.c     **** 				default:
 32275              		.loc 1 4413 13 view .LVU8759
 32276              	.LBB4001:
 32277              	.LBI4001:
 738:src/xeq.c     **** 	if (get_lift())
 32278              		.loc 1 738 6 view .LVU8760
 32279              	.LBB4002:
 739:src/xeq.c     **** 		lift();
 32280              		.loc 1 739 2 view .LVU8761
 32281              	.LBB4003:
 32282              	.LBI4003:
 734:src/xeq.c     **** 	return State2.state_lift;
 32283              		.loc 1 734 12 view .LVU8762
 32284              	.LBB4004:
 735:src/xeq.c     **** }
 32285              		.loc 1 735 2 view .LVU8763
 735:src/xeq.c     **** }
 32286              		.loc 1 735 15 is_stmt 0 view .LVU8764
 32287 0b9c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32288              	.LBE4004:
 32289              	.LBE4003:
 739:src/xeq.c     **** 		lift();
 32290              		.loc 1 739 5 view .LVU8765
 32291 0b9e 5806     		lsls	r0, r3, #25
 32292 0ba0 7FF509AB 		bpl	.L2163
 740:src/xeq.c     **** }
 32293              		.loc 1 740 3 is_stmt 1 view .LVU8766
 32294 0ba4 FFF7FEFF 		bl	lift
 32295              	.LVL2536:
 32296 0ba8 FFF705BB 		b	.L2163
 32297              	.LVL2537:
 32298              	.L2147:
 740:src/xeq.c     **** }
 32299              		.loc 1 740 3 is_stmt 0 view .LVU8767
 32300              	.LBE4002:
 32301              	.LBE4001:
 32302              	.LBE4038:
 32303              	.LBE4043:
 32304              	.LBE4406:
 32305              	.LBB4407:
 32306              	.LBB4144:
3806:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32307              		.loc 1 3806 8 is_stmt 1 view .LVU8768
3806:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32308              		.loc 1 3806 12 is_stmt 0 view .LVU8769
 32309 0bac 257F     		ldrb	r5, [r4, #28]	@ zero_extendqisi2
 32310              	.LVL2538:
3806:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32311              		.loc 1 3806 11 view .LVU8770
 32312 0bae 002D     		cmp	r5, #0
 32313 0bb0 5ED0     		beq	.L2148
3813:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 32314              		.loc 1 3813 4 is_stmt 1 view .LVU8771
3813:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 32315              		.loc 1 3813 17 is_stmt 0 view .LVU8772
ARM GAS  /tmp/ccjeMhND.s 			page 816


 32316 0bb2 6B1E     		subs	r3, r5, #1
 32317 0bb4 DBB2     		uxtb	r3, r3
3814:src/xeq.c     **** 				CmdLineEex = 0;
 32318              		.loc 1 3814 15 view .LVU8773
 32319 0bb6 E118     		adds	r1, r4, r3
3813:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 32320              		.loc 1 3813 17 view .LVU8774
 32321 0bb8 2377     		strb	r3, [r4, #28]
3814:src/xeq.c     **** 				CmdLineEex = 0;
 32322              		.loc 1 3814 4 is_stmt 1 view .LVU8775
3814:src/xeq.c     **** 				CmdLineEex = 0;
 32323              		.loc 1 3814 15 is_stmt 0 view .LVU8776
 32324 0bba 91F82030 		ldrb	r3, [r1, #32]	@ zero_extendqisi2
3814:src/xeq.c     **** 				CmdLineEex = 0;
 32325              		.loc 1 3814 7 view .LVU8777
 32326 0bbe 452B     		cmp	r3, #69
 32327 0bc0 7ED0     		beq	.L2345
3816:src/xeq.c     **** 				CmdLineDot--;
 32328              		.loc 1 3816 9 is_stmt 1 view .LVU8778
3816:src/xeq.c     **** 				CmdLineDot--;
 32329              		.loc 1 3816 12 is_stmt 0 view .LVU8779
 32330 0bc2 2E2B     		cmp	r3, #46
 32331 0bc4 7FF44EAD 		bne	.L2084
3817:src/xeq.c     **** 		} else
 32332              		.loc 1 3817 5 is_stmt 1 view .LVU8780
3817:src/xeq.c     **** 		} else
 32333              		.loc 1 3817 15 is_stmt 0 view .LVU8781
 32334 0bc8 A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 32335 0bca 624B     		ldr	r3, .L2357
 32336 0bcc 013A     		subs	r2, r2, #1
 32337 0bce A277     		strb	r2, [r4, #30]
 32338 0bd0 1A68     		ldr	r2, [r3]
 32339 0bd2 FFF7FABA 		b	.L2087
 32340              	.LVL2539:
 32341              	.L2146:
 32342              	.LBB4108:
3794:src/xeq.c     **** 
 32343              		.loc 1 3794 4 is_stmt 1 view .LVU8782
3796:src/xeq.c     **** 			dn_minus(&r, &x);
 32344              		.loc 1 3796 4 view .LVU8783
 32345              	.LBB4078:
 32346              	.LBI4078:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 32347              		.loc 1 805 12 view .LVU8784
 32348              	.LBB4079:
 806:src/xeq.c     **** }
 32349              		.loc 1 806 2 view .LVU8785
 806:src/xeq.c     **** }
 32350              		.loc 1 806 9 is_stmt 0 view .LVU8786
 32351 0bd6 30A8     		add	r0, sp, #192
 32352              	.LVL2540:
 806:src/xeq.c     **** }
 32353              		.loc 1 806 9 view .LVU8787
 32354 0bd8 6421     		movs	r1, #100
 32355 0bda FFF7FEFF 		bl	getRegister
 32356              	.LVL2541:
 806:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 817


 32357              		.loc 1 806 9 view .LVU8788
 32358              	.LBE4079:
 32359              	.LBE4078:
3797:src/xeq.c     **** 			setX(&r);
 32360              		.loc 1 3797 4 is_stmt 1 view .LVU8789
 32361 0bde 30A9     		add	r1, sp, #192
 32362 0be0 39A8     		add	r0, sp, #228
 32363 0be2 FFF7FEFF 		bl	dn_minus
 32364              	.LVL2542:
3798:src/xeq.c     **** 			set_lift();
 32365              		.loc 1 3798 4 view .LVU8790
 32366              	.LBB4080:
 32367              	.LBI4080:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 32368              		.loc 1 809 6 view .LVU8791
 32369              	.LBB4081:
 810:src/xeq.c     **** }
 32370              		.loc 1 810 2 view .LVU8792
 32371 0be6 39A9     		add	r1, sp, #228
 32372              	.LVL2543:
 810:src/xeq.c     **** }
 32373              		.loc 1 810 2 is_stmt 0 view .LVU8793
 32374 0be8 6420     		movs	r0, #100
 32375 0bea FFF7FEFF 		bl	setRegister
 32376              	.LVL2544:
 810:src/xeq.c     **** }
 32377              		.loc 1 810 2 view .LVU8794
 32378 0bee FFF71EBB 		b	.L2305
 32379              	.LVL2545:
 32380              	.L2340:
 810:src/xeq.c     **** }
 32381              		.loc 1 810 2 view .LVU8795
 32382              	.LBE4081:
 32383              	.LBE4080:
 32384              	.LBE4108:
3789:src/xeq.c     **** 		else if (is_intmode()) {
 32385              		.loc 1 3789 4 is_stmt 1 view .LVU8796
 32386              	.LBB4109:
 32387              	.LBI4109:
3032:src/xeq.c     **** 	if (CmdLineEex) {
 32388              		.loc 1 3032 13 view .LVU8797
 32389              	.LBB4110:
3033:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32390              		.loc 1 3033 2 view .LVU8798
3033:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32391              		.loc 1 3033 6 is_stmt 0 view .LVU8799
 32392 0bf2 94F81DE0 		ldrb	lr, [r4, #29]	@ zero_extendqisi2
3033:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32393              		.loc 1 3033 5 view .LVU8800
 32394 0bf6 BEF1000F 		cmp	lr, #0
 32395 0bfa 47D0     		beq	.L2141
 32396              	.LBB4111:
3044:src/xeq.c     **** 		if (CmdLineLength <= pos) {
 32397              		.loc 1 3044 3 is_stmt 1 view .LVU8801
3044:src/xeq.c     **** 		if (CmdLineLength <= pos) {
 32398              		.loc 1 3044 39 is_stmt 0 view .LVU8802
 32399 0bfc 0EF1010C 		add	ip, lr, #1
ARM GAS  /tmp/ccjeMhND.s 			page 818


 32400              	.LVL2546:
3045:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
 32401              		.loc 1 3045 3 is_stmt 1 view .LVU8803
3045:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
 32402              		.loc 1 3045 6 is_stmt 0 view .LVU8804
 32403 0c00 9445     		cmp	ip, r2
 32404 0c02 62D3     		bcc	.L2142
3046:src/xeq.c     **** 				append_cmdline('-');
 32405              		.loc 1 3046 4 is_stmt 1 view .LVU8805
3046:src/xeq.c     **** 				append_cmdline('-');
 32406              		.loc 1 3046 7 is_stmt 0 view .LVU8806
 32407 0c04 122A     		cmp	r2, #18
 32408 0c06 3FF62DAD 		bhi	.L2084
3047:src/xeq.c     **** 		} else if (Cmdline[pos] == '-') {
 32409              		.loc 1 3047 5 is_stmt 1 view .LVU8807
 32410              	.LVL2547:
 32411              	.LBB4112:
 32412              	.LBI4112:
2432:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 32413              		.loc 1 2432 13 view .LVU8808
 32414              	.LBB4113:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32415              		.loc 1 2433 2 view .LVU8809
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32416              		.loc 1 2433 23 is_stmt 0 view .LVU8810
 32417 0c0a 511C     		adds	r1, r2, #1
 32418 0c0c C9B2     		uxtb	r1, r1
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32419              		.loc 1 2433 27 view .LVU8811
 32420 0c0e 2244     		add	r2, r2, r4
2434:src/xeq.c     **** }
 32421              		.loc 1 2434 25 view .LVU8812
 32422 0c10 6018     		adds	r0, r4, r1
 32423 0c12 504B     		ldr	r3, .L2357
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32424              		.loc 1 2433 23 view .LVU8813
 32425 0c14 2177     		strb	r1, [r4, #28]
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32426              		.loc 1 2433 27 view .LVU8814
 32427 0c16 2D21     		movs	r1, #45
 32428 0c18 82F82010 		strb	r1, [r2, #32]
2434:src/xeq.c     **** }
 32429              		.loc 1 2434 2 is_stmt 1 view .LVU8815
2434:src/xeq.c     **** }
 32430              		.loc 1 2434 25 is_stmt 0 view .LVU8816
 32431 0c1c 0022     		movs	r2, #0
 32432 0c1e 80F82020 		strb	r2, [r0, #32]
 32433 0c22 1A68     		ldr	r2, [r3]
2435:src/xeq.c     **** 
 32434              		.loc 1 2435 1 view .LVU8817
 32435 0c24 FFF7D1BA 		b	.L2087
 32436              	.LVL2548:
 32437              	.L2151:
2435:src/xeq.c     **** 
 32438              		.loc 1 2435 1 view .LVU8818
 32439              	.LBE4113:
 32440              	.LBE4112:
ARM GAS  /tmp/ccjeMhND.s 			page 819


 32441              	.LBE4111:
 32442              	.LBE4110:
 32443              	.LBE4109:
3834:src/xeq.c     **** 		clr_lift();
 32444              		.loc 1 3834 3 is_stmt 1 view .LVU8819
 32445 0c28 FFF7FEFF 		bl	process_cmdline
 32446              	.LVL2549:
3835:src/xeq.c     **** 		setlastX();
 32447              		.loc 1 3835 3 view .LVU8820
 32448              	.LBB4119:
 32449              	.LBI4119:
 752:src/xeq.c     ****     State2.state_lift = 0;
 32450              		.loc 1 752 13 view .LVU8821
 32451              	.LBB4120:
 753:src/xeq.c     **** }
 32452              		.loc 1 753 5 view .LVU8822
 753:src/xeq.c     **** }
 32453              		.loc 1 753 23 is_stmt 0 view .LVU8823
 32454 0c2c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32455              	.LBE4120:
 32456              	.LBE4119:
 32457              	.LBB4123:
 32458              	.LBB4124:
 774:src/xeq.c     **** }
 32459              		.loc 1 774 2 view .LVU8824
 32460 0c2e 6421     		movs	r1, #100
 32461              	.LBE4124:
 32462              	.LBE4123:
 32463              	.LBB4127:
 32464              	.LBB4121:
 753:src/xeq.c     **** }
 32465              		.loc 1 753 23 view .LVU8825
 32466 0c30 65F38613 		bfi	r3, r5, #6, #1
 32467              	.LBE4121:
 32468              	.LBE4127:
 32469              	.LBB4128:
 32470              	.LBB4125:
 774:src/xeq.c     **** }
 32471              		.loc 1 774 2 view .LVU8826
 32472 0c34 6C20     		movs	r0, #108
 32473              	.LBE4125:
 32474              	.LBE4128:
 32475              	.LBB4129:
 32476              	.LBB4122:
 753:src/xeq.c     **** }
 32477              		.loc 1 753 23 view .LVU8827
 32478 0c36 E375     		strb	r3, [r4, #23]
 32479              	.LBE4122:
 32480              	.LBE4129:
3836:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
 32481              		.loc 1 3836 3 is_stmt 1 view .LVU8828
 32482              	.LBB4130:
 32483              	.LBI4123:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32484              		.loc 1 773 6 view .LVU8829
 32485              	.LBB4126:
 774:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 820


 32486              		.loc 1 774 2 view .LVU8830
 32487 0c38 FFF7FEFF 		bl	copyreg_n
 32488              	.LVL2550:
 32489              	.LBE4126:
 32490              	.LBE4130:
3837:src/xeq.c     **** 			sigma_plus();
 32491              		.loc 1 3837 3 view .LVU8831
3837:src/xeq.c     **** 			sigma_plus();
 32492              		.loc 1 3837 6 is_stmt 0 view .LVU8832
 32493 0c3c B8F1150F 		cmp	r8, #21
 32494 0c40 3BD0     		beq	.L2346
3840:src/xeq.c     **** 		sigma_val(OP_sigmaN);
 32495              		.loc 1 3840 4 is_stmt 1 view .LVU8833
 32496 0c42 FFF7FEFF 		bl	sigma_minus
 32497              	.LVL2551:
 32498              	.L2154:
3841:src/xeq.c     **** 		break;
 32499              		.loc 1 3841 3 view .LVU8834
 32500 0c46 434B     		ldr	r3, .L2357
 32501 0c48 0593     		str	r3, [sp, #20]
 32502 0c4a 1D20     		movs	r0, #29
 32503 0c4c FFF7FEFF 		bl	sigma_val
 32504              	.LVL2552:
3842:src/xeq.c     **** 
 32505              		.loc 1 3842 3 view .LVU8835
 32506 0c50 059B     		ldr	r3, [sp, #20]
 32507 0c52 1A68     		ldr	r2, [r3]
 32508 0c54 FFF7B9BA 		b	.L2087
 32509              	.LVL2553:
 32510              	.L2343:
3842:src/xeq.c     **** 
 32511              		.loc 1 3842 3 is_stmt 0 view .LVU8836
 32512              	.LBE4144:
 32513              	.LBE4407:
 32514              	.LBB4408:
 32515              	.LBB4341:
 32516              	.LBB4339:
 32517              	.LBB4338:
4461:src/xeq.c     **** 					setlastX();
 32518              		.loc 1 4461 7 is_stmt 1 view .LVU8837
 32519 0c58 4046     		mov	r0, r8
 32520 0c5a FFF7FEFF 		bl	set_NaN
 32521              	.LVL2554:
 32522 0c5e 37E7     		b	.L2174
 32523              	.LVL2555:
 32524              	.L2344:
4461:src/xeq.c     **** 					setlastX();
 32525              		.loc 1 4461 7 is_stmt 0 view .LVU8838
 32526              	.LBE4338:
 32527              	.LBE4339:
 32528              	.LBE4341:
 32529              	.LBE4408:
 32530              	.LBB4409:
 32531              	.LBB4382:
 32532              	.LBB4377:
 32533              	.LBB4375:
4613:src/xeq.c     **** 					setlastX();
ARM GAS  /tmp/ccjeMhND.s 			page 821


 32534              		.loc 1 4613 7 is_stmt 1 view .LVU8839
 32535 0c60 4046     		mov	r0, r8
 32536 0c62 FFF7FEFF 		bl	set_NaN
 32537              	.LVL2556:
 32538 0c66 6FE7     		b	.L2188
 32539              	.LVL2557:
 32540              	.L2342:
4613:src/xeq.c     **** 					setlastX();
 32541              		.loc 1 4613 7 is_stmt 0 view .LVU8840
 32542              	.LBE4375:
 32543              	.LBE4377:
 32544              	.LBE4382:
 32545              	.LBE4409:
 32546              	.LBB4410:
 32547              	.LBB4193:
 32548              	.LBB4188:
 32549              	.LBB4185:
4537:src/xeq.c     **** 					setlastX();
 32550              		.loc 1 4537 7 is_stmt 1 view .LVU8841
 32551 0c68 4046     		mov	r0, r8
 32552 0c6a FFF7FEFF 		bl	set_NaN
 32553              	.LVL2558:
 32554 0c6e 05E7     		b	.L2181
 32555              	.LVL2559:
 32556              	.L2148:
4537:src/xeq.c     **** 					setlastX();
 32557              		.loc 1 4537 7 is_stmt 0 view .LVU8842
 32558              	.LBE4185:
 32559              	.LBE4188:
 32560              	.LBE4193:
 32561              	.LBE4410:
 32562              	.LBB4411:
 32563              	.LBB4145:
3819:src/xeq.c     **** 		break;
 32564              		.loc 1 3819 4 is_stmt 1 view .LVU8843
 32565              	.LBB4131:
 32566              	.LBI4131:
1372:src/xeq.c     **** 	zero_X();
 32567              		.loc 1 1372 6 view .LVU8844
 32568              	.LBB4132:
1373:src/xeq.c     **** 	clr_lift();
 32569              		.loc 1 1373 2 view .LVU8845
 32570              	.LBB4133:
 32571              	.LBI4133:
1364:src/xeq.c     **** 	set_zero(StackBase);
 32572              		.loc 1 1364 6 view .LVU8846
 32573              	.LBB4134:
1365:src/xeq.c     **** }
 32574              		.loc 1 1365 2 view .LVU8847
 32575 0c70 384B     		ldr	r3, .L2357
 32576 0c72 D9F80000 		ldr	r0, [r9]
 32577 0c76 0593     		str	r3, [sp, #20]
 32578 0c78 FFF7FEFF 		bl	set_zero
 32579              	.LVL2560:
 32580              	.LBE4134:
 32581              	.LBE4133:
1374:src/xeq.c     **** }
ARM GAS  /tmp/ccjeMhND.s 			page 822


 32582              		.loc 1 1374 2 view .LVU8848
 32583              	.LBB4135:
 32584              	.LBI4135:
 752:src/xeq.c     ****     State2.state_lift = 0;
 32585              		.loc 1 752 13 view .LVU8849
 32586              	.LBB4136:
 753:src/xeq.c     **** }
 32587              		.loc 1 753 5 view .LVU8850
 753:src/xeq.c     **** }
 32588              		.loc 1 753 23 is_stmt 0 view .LVU8851
 32589 0c7c E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 32590 0c7e 059B     		ldr	r3, [sp, #20]
 32591 0c80 65F38612 		bfi	r2, r5, #6, #1
 32592 0c84 E275     		strb	r2, [r4, #23]
 32593 0c86 1A68     		ldr	r2, [r3]
 32594              	.LBE4136:
 32595              	.LBE4135:
1375:src/xeq.c     **** 
 32596              		.loc 1 1375 1 view .LVU8852
 32597 0c88 FFF79FBA 		b	.L2087
 32598              	.LVL2561:
 32599              	.L2141:
1375:src/xeq.c     **** 
 32600              		.loc 1 1375 1 view .LVU8853
 32601              	.LBE4132:
 32602              	.LBE4131:
 32603              	.LBB4137:
 32604              	.LBB4116:
3064:src/xeq.c     **** 			if (CmdLineLength > 1)
 32605              		.loc 1 3064 3 is_stmt 1 view .LVU8854
3064:src/xeq.c     **** 			if (CmdLineLength > 1)
 32606              		.loc 1 3064 6 is_stmt 0 view .LVU8855
 32607 0c8c 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 32608 0c90 2D2B     		cmp	r3, #45
 32609 0c92 38D0     		beq	.L2347
3068:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 32610              		.loc 1 3068 10 is_stmt 1 view .LVU8856
3068:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 32611              		.loc 1 3068 13 is_stmt 0 view .LVU8857
 32612 0c94 122A     		cmp	r2, #18
 32613 0c96 3FF6E5AC 		bhi	.L2084
3069:src/xeq.c     **** 			Cmdline[0] = '-';
 32614              		.loc 1 3069 4 is_stmt 1 view .LVU8858
 32615 0c9a 2F49     		ldr	r1, .L2357+4
 32616 0c9c 2D4B     		ldr	r3, .L2357
 32617 0c9e 0593     		str	r3, [sp, #20]
 32618 0ca0 481C     		adds	r0, r1, #1
 32619 0ca2 FFF7FEFF 		bl	xcopy
 32620              	.LVL2562:
3070:src/xeq.c     **** 			CmdLineLength++;
 32621              		.loc 1 3070 4 view .LVU8859
3071:src/xeq.c     **** 		}
 32622              		.loc 1 3071 17 is_stmt 0 view .LVU8860
 32623 0ca6 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 32624 0ca8 059B     		ldr	r3, [sp, #20]
 32625 0caa 0131     		adds	r1, r1, #1
3070:src/xeq.c     **** 			CmdLineLength++;
ARM GAS  /tmp/ccjeMhND.s 			page 823


 32626              		.loc 1 3070 15 view .LVU8861
 32627 0cac 2D20     		movs	r0, #45
 32628 0cae 1A68     		ldr	r2, [r3]
3071:src/xeq.c     **** 		}
 32629              		.loc 1 3071 17 view .LVU8862
 32630 0cb0 2177     		strb	r1, [r4, #28]
3070:src/xeq.c     **** 			CmdLineLength++;
 32631              		.loc 1 3070 15 view .LVU8863
 32632 0cb2 84F82000 		strb	r0, [r4, #32]
3071:src/xeq.c     **** 		}
 32633              		.loc 1 3071 4 is_stmt 1 view .LVU8864
 32634 0cb6 FFF788BA 		b	.L2087
 32635              	.LVL2563:
 32636              	.L2346:
3071:src/xeq.c     **** 		}
 32637              		.loc 1 3071 4 is_stmt 0 view .LVU8865
 32638              	.LBE4116:
 32639              	.LBE4137:
3838:src/xeq.c     **** 		else
 32640              		.loc 1 3838 4 is_stmt 1 view .LVU8866
 32641 0cba FFF7FEFF 		bl	sigma_plus
 32642              	.LVL2564:
 32643 0cbe C2E7     		b	.L2154
 32644              	.LVL2565:
 32645              	.L2345:
3815:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 32646              		.loc 1 3815 5 view .LVU8867
 32647 0cc0 244B     		ldr	r3, .L2357
3815:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 32648              		.loc 1 3815 16 is_stmt 0 view .LVU8868
 32649 0cc2 6277     		strb	r2, [r4, #29]
 32650 0cc4 1A68     		ldr	r2, [r3]
 32651 0cc6 FFF780BA 		b	.L2087
 32652              	.LVL2566:
 32653              	.L2142:
 32654              	.LBB4138:
 32655              	.LBB4117:
 32656              	.LBB4114:
3048:src/xeq.c     **** 			if (CmdLineLength != pos)
 32657              		.loc 1 3048 10 is_stmt 1 view .LVU8869
3048:src/xeq.c     **** 			if (CmdLineLength != pos)
 32658              		.loc 1 3048 21 is_stmt 0 view .LVU8870
 32659 0cca 04EB0C05 		add	r5, r4, ip
 32660              	.LVL2567:
3048:src/xeq.c     **** 			if (CmdLineLength != pos)
 32661              		.loc 1 3048 13 view .LVU8871
 32662 0cce 95F82030 		ldrb	r3, [r5, #32]	@ zero_extendqisi2
 32663 0cd2 2D2B     		cmp	r3, #45
 32664 0cd4 2CD0     		beq	.L2348
3052:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
 32665              		.loc 1 3052 10 is_stmt 1 view .LVU8872
3052:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
 32666              		.loc 1 3052 13 is_stmt 0 view .LVU8873
 32667 0cd6 122A     		cmp	r2, #18
 32668 0cd8 3FF6C4AC 		bhi	.L2084
3053:src/xeq.c     **** 			Cmdline[pos] = '-';
 32669              		.loc 1 3053 4 is_stmt 1 view .LVU8874
ARM GAS  /tmp/ccjeMhND.s 			page 824


 32670 0cdc 1E49     		ldr	r1, .L2357+4
 32671 0cde 1D4B     		ldr	r3, .L2357
 32672 0ce0 0593     		str	r3, [sp, #20]
3053:src/xeq.c     **** 			Cmdline[pos] = '-';
 32673              		.loc 1 3053 21 is_stmt 0 view .LVU8875
 32674 0ce2 0EF10200 		add	r0, lr, #2
3053:src/xeq.c     **** 			Cmdline[pos] = '-';
 32675              		.loc 1 3053 4 view .LVU8876
 32676 0ce6 A2EB0C02 		sub	r2, r2, ip
 32677 0cea 0844     		add	r0, r0, r1
 32678 0cec 6144     		add	r1, r1, ip
 32679 0cee FFF7FEFF 		bl	xcopy
 32680              	.LVL2568:
3054:src/xeq.c     **** 			CmdLineLength++;
 32681              		.loc 1 3054 4 is_stmt 1 view .LVU8877
3055:src/xeq.c     **** 		}
 32682              		.loc 1 3055 17 is_stmt 0 view .LVU8878
 32683 0cf2 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 32684 0cf4 059B     		ldr	r3, [sp, #20]
 32685 0cf6 0131     		adds	r1, r1, #1
3054:src/xeq.c     **** 			CmdLineLength++;
 32686              		.loc 1 3054 17 view .LVU8879
 32687 0cf8 2D20     		movs	r0, #45
 32688 0cfa 1A68     		ldr	r2, [r3]
3055:src/xeq.c     **** 		}
 32689              		.loc 1 3055 17 view .LVU8880
 32690 0cfc 2177     		strb	r1, [r4, #28]
3054:src/xeq.c     **** 			CmdLineLength++;
 32691              		.loc 1 3054 17 view .LVU8881
 32692 0cfe 85F82000 		strb	r0, [r5, #32]
3055:src/xeq.c     **** 		}
 32693              		.loc 1 3055 4 is_stmt 1 view .LVU8882
 32694 0d02 FFF762BA 		b	.L2087
 32695              	.LVL2569:
 32696              	.L2347:
3055:src/xeq.c     **** 		}
 32697              		.loc 1 3055 4 is_stmt 0 view .LVU8883
 32698              	.LBE4114:
3065:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 32699              		.loc 1 3065 4 is_stmt 1 view .LVU8884
3065:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 32700              		.loc 1 3065 7 is_stmt 0 view .LVU8885
 32701 0d06 012A     		cmp	r2, #1
 32702 0d08 03D9     		bls	.L2145
3066:src/xeq.c     **** 			CmdLineLength--;
 32703              		.loc 1 3066 5 is_stmt 1 view .LVU8886
 32704 0d0a 1449     		ldr	r1, .L2357+8
 32705 0d0c 481E     		subs	r0, r1, #1
 32706 0d0e FFF7FEFF 		bl	xcopy
 32707              	.LVL2570:
 32708              	.L2145:
3067:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 32709              		.loc 1 3067 4 view .LVU8887
3067:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 32710              		.loc 1 3067 17 is_stmt 0 view .LVU8888
 32711 0d12 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 32712 0d14 0F4B     		ldr	r3, .L2357
ARM GAS  /tmp/ccjeMhND.s 			page 825


 32713 0d16 013A     		subs	r2, r2, #1
 32714 0d18 2277     		strb	r2, [r4, #28]
 32715 0d1a 1A68     		ldr	r2, [r3]
 32716 0d1c FFF755BA 		b	.L2087
 32717              	.L2137:
 32718              	.LBE4117:
 32719              	.LBE4138:
3734:src/xeq.c     **** 			CmdLineDot++;
 32720              		.loc 1 3734 5 is_stmt 1 view .LVU8889
 32721 0d20 0020     		movs	r0, #0
 32722 0d22 FFF7FEFF 		bl	digit
 32723              	.LVL2571:
 32724 0d26 1DE6     		b	.L2138
 32725              	.LVL2572:
 32726              	.L2341:
 32727              	.LBB4139:
3781:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 32728              		.loc 1 3781 5 view .LVU8890
 32729 0d28 0120     		movs	r0, #1
 32730 0d2a FFF7FEFF 		bl	digit
 32731              	.LVL2573:
 32732 0d2e 56E6     		b	.L2139
 32733              	.LVL2574:
 32734              	.L2348:
3781:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 32735              		.loc 1 3781 5 is_stmt 0 view .LVU8891
 32736              	.LBE4139:
 32737              	.LBB4140:
 32738              	.LBB4118:
 32739              	.LBB4115:
3049:src/xeq.c     **** 				xcopy(Cmdline + pos, Cmdline + pos + 1, CmdLineLength-pos);
 32740              		.loc 1 3049 4 is_stmt 1 view .LVU8892
3050:src/xeq.c     **** 			CmdLineLength--;
 32741              		.loc 1 3050 5 view .LVU8893
 32742 0d30 0948     		ldr	r0, .L2357+4
 32743 0d32 084B     		ldr	r3, .L2357
 32744 0d34 0593     		str	r3, [sp, #20]
3050:src/xeq.c     **** 			CmdLineLength--;
 32745              		.loc 1 3050 40 is_stmt 0 view .LVU8894
 32746 0d36 0EF10201 		add	r1, lr, #2
3050:src/xeq.c     **** 			CmdLineLength--;
 32747              		.loc 1 3050 5 view .LVU8895
 32748 0d3a 0144     		add	r1, r1, r0
 32749 0d3c A2EB0C02 		sub	r2, r2, ip
 32750 0d40 6044     		add	r0, r0, ip
 32751 0d42 FFF7FEFF 		bl	xcopy
 32752              	.LVL2575:
3051:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 32753              		.loc 1 3051 4 is_stmt 1 view .LVU8896
3051:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 32754              		.loc 1 3051 17 is_stmt 0 view .LVU8897
 32755 0d46 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 32756 0d48 059B     		ldr	r3, [sp, #20]
 32757 0d4a 0139     		subs	r1, r1, #1
 32758 0d4c 1A68     		ldr	r2, [r3]
 32759 0d4e 2177     		strb	r1, [r4, #28]
 32760 0d50 FFF73BBA 		b	.L2087
ARM GAS  /tmp/ccjeMhND.s 			page 826


 32761              	.L2358:
 32762              		.align	2
 32763              	.L2357:
 32764 0d54 00000000 		.word	Error
 32765 0d58 20000000 		.word	StateWhileOn+32
 32766 0d5c 21000000 		.word	StateWhileOn+33
 32767              	.LBE4115:
 32768              	.LBE4118:
 32769              	.LBE4140:
 32770              	.LBE4145:
 32771              	.LBE4411:
 32772              		.cfi_endproc
 32773              	.LFE246:
 32775              		.section	.text.xeq_single,"ax",%progbits
 32776              		.align	1
 32777              		.p2align 2,,3
 32778              		.syntax unified
 32779              		.thumb
 32780              		.thumb_func
 32781              		.fpu fpv4-sp-d16
 32783              	xeq_single:
 32784              	.LFB247:
5231:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 32785              		.loc 1 5231 30 is_stmt 1 view -0
 32786              		.cfi_startproc
 32787              		@ args = 0, pretend = 0, frame = 0
 32788              		@ frame_needed = 0, uses_anonymous_args = 0
5232:src/xeq.c     **** 
 32789              		.loc 1 5232 2 view .LVU8899
5232:src/xeq.c     **** 
 32790              		.loc 1 5232 28 is_stmt 0 view .LVU8900
 32791 0000 074B     		ldr	r3, .L2361
 32792 0002 1B68     		ldr	r3, [r3]
5231:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 32793              		.loc 1 5231 30 view .LVU8901
 32794 0004 10B5     		push	{r4, lr}
 32795              		.cfi_def_cfa_offset 8
 32796              		.cfi_offset 4, -8
 32797              		.cfi_offset 14, -4
5232:src/xeq.c     **** 
 32798              		.loc 1 5232 20 view .LVU8902
 32799 0006 B3F8E007 		ldrh	r0, [r3, #2016]
 32800 000a FFF7FEFF 		bl	getprog
 32801              	.LVL2576:
 32802 000e 0446     		mov	r4, r0
 32803              	.LVL2577:
5234:src/xeq.c     **** 	xeq(op);
 32804              		.loc 1 5234 2 is_stmt 1 view .LVU8903
 32805 0010 FFF7FEFF 		bl	incpc
 32806              	.LVL2578:
5235:src/xeq.c     **** }
 32807              		.loc 1 5235 2 view .LVU8904
 32808 0014 2046     		mov	r0, r4
5236:src/xeq.c     **** 
 32809              		.loc 1 5236 1 is_stmt 0 view .LVU8905
 32810 0016 BDE81040 		pop	{r4, lr}
 32811              		.cfi_restore 14
ARM GAS  /tmp/ccjeMhND.s 			page 827


 32812              		.cfi_restore 4
 32813              		.cfi_def_cfa_offset 0
 32814              	.LVL2579:
5235:src/xeq.c     **** }
 32815              		.loc 1 5235 2 view .LVU8906
 32816 001a FFF7FEBF 		b	xeq
 32817              	.LVL2580:
 32818              	.L2362:
5235:src/xeq.c     **** }
 32819              		.loc 1 5235 2 view .LVU8907
 32820 001e 00BF     		.align	2
 32821              	.L2361:
 32822 0020 00000000 		.word	main_ram
 32823              		.cfi_endproc
 32824              	.LFE247:
 32826              		.section	.text.xeq_xrom2,"ax",%progbits
 32827              		.align	1
 32828              		.p2align 2,,3
 32829              		.syntax unified
 32830              		.thumb
 32831              		.thumb_func
 32832              		.fpu fpv4-sp-d16
 32834              	xeq_xrom2:
 32835              	.LFB248:
5243:src/xeq.c     **** #endif
 32836              		.loc 1 5243 29 is_stmt 1 view -0
 32837              		.cfi_startproc
 32838              		@ args = 0, pretend = 0, frame = 0
 32839              		@ frame_needed = 0, uses_anonymous_args = 0
5245:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
 32840              		.loc 1 5245 2 view .LVU8909
 32841              	.LVL2581:
5249:src/xeq.c     **** 		XromRunning = 1;
 32842              		.loc 1 5249 4 view .LVU8910
5249:src/xeq.c     **** 		XromRunning = 1;
 32843              		.loc 1 5249 10 view .LVU8911
5243:src/xeq.c     **** #endif
 32844              		.loc 1 5243 29 is_stmt 0 view .LVU8912
 32845 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 32846              		.cfi_def_cfa_offset 32
 32847              		.cfi_offset 4, -32
 32848              		.cfi_offset 5, -28
 32849              		.cfi_offset 6, -24
 32850              		.cfi_offset 7, -20
 32851              		.cfi_offset 8, -16
 32852              		.cfi_offset 9, -12
 32853              		.cfi_offset 10, -8
 32854              		.cfi_offset 14, -4
5249:src/xeq.c     **** 		XromRunning = 1;
 32855              		.loc 1 5249 11 view .LVU8913
 32856 0004 1A4D     		ldr	r5, .L2375
 32857 0006 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5249:src/xeq.c     **** 		XromRunning = 1;
 32858              		.loc 1 5249 10 view .LVU8914
 32859 0008 53BB     		cbnz	r3, .L2363
 32860 000a DFF87080 		ldr	r8, .L2375+12
5250:src/xeq.c     **** 		xeq_single();
ARM GAS  /tmp/ccjeMhND.s 			page 828


 32861              		.loc 1 5250 15 view .LVU8915
 32862 000e 194F     		ldr	r7, .L2375+4
 32863              	.LBB4418:
 32864              	.LBB4419:
4253:src/xeq.c     **** 		Busy = 1;
 32865              		.loc 1 4253 6 view .LVU8916
 32866 0010 DFF86CA0 		ldr	r10, .L2375+16
4253:src/xeq.c     **** 		Busy = 1;
 32867              		.loc 1 4253 15 view .LVU8917
 32868 0014 DFF86C90 		ldr	r9, .L2375+20
 32869 0018 03F0FF04 		and	r4, r3, #255
 32870              	.LVL2582:
 32871              	.L2364:
4253:src/xeq.c     **** 		Busy = 1;
 32872              		.loc 1 4253 15 view .LVU8918
 32873              	.LBE4419:
 32874              	.LBE4418:
5250:src/xeq.c     **** 		xeq_single();
 32875              		.loc 1 5250 3 is_stmt 1 view .LVU8919
 32876              	.LBB4426:
 32877              	.LBI4426:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 32878              		.loc 1 182 5 view .LVU8920
 32879              	.LBB4427:
 183:src/xeq.c     **** }
 32880              		.loc 1 183 2 view .LVU8921
 183:src/xeq.c     **** }
 32881              		.loc 1 183 9 is_stmt 0 view .LVU8922
 32882 001c D8F80020 		ldr	r2, [r8]
 32883 0020 B2F8E037 		ldrh	r3, [r2, #2016]
 32884              	.LBE4427:
 32885              	.LBE4426:
5249:src/xeq.c     **** 		XromRunning = 1;
 32886              		.loc 1 5249 18 view .LVU8923
 32887 0024 9B0B     		lsrs	r3, r3, #14
5250:src/xeq.c     **** 		xeq_single();
 32888              		.loc 1 5250 15 view .LVU8924
 32889 0026 0126     		movs	r6, #1
5249:src/xeq.c     **** 		XromRunning = 1;
 32890              		.loc 1 5249 18 view .LVU8925
 32891 0028 032B     		cmp	r3, #3
5253:src/xeq.c     **** 			busy();
 32892              		.loc 1 5253 6 view .LVU8926
 32893 002a 3444     		add	r4, r4, r6
 32894              	.LVL2583:
5249:src/xeq.c     **** 		XromRunning = 1;
 32895              		.loc 1 5249 18 view .LVU8927
 32896 002c 18D1     		bne	.L2363
5249:src/xeq.c     **** 		XromRunning = 1;
 32897              		.loc 1 5249 31 discriminator 2 view .LVU8928
 32898 002e B2F9E237 		ldrsh	r3, [r2, #2018]
 32899 0032 ABB1     		cbz	r3, .L2363
5250:src/xeq.c     **** 		xeq_single();
 32900              		.loc 1 5250 15 view .LVU8929
 32901 0034 3E60     		str	r6, [r7]
5251:src/xeq.c     **** 		XromRunning = 0;
 32902              		.loc 1 5251 3 is_stmt 1 view .LVU8930
ARM GAS  /tmp/ccjeMhND.s 			page 829


 32903 0036 FFF7FEFF 		bl	xeq_single
 32904              	.LVL2584:
5252:src/xeq.c     **** 		if ((++count & 31) == 0)
 32905              		.loc 1 5252 3 view .LVU8931
 32906              	.LBB4428:
 32907              	.LBB4422:
4253:src/xeq.c     **** 		Busy = 1;
 32908              		.loc 1 4253 12 is_stmt 0 view .LVU8932
 32909 003a D9F80030 		ldr	r3, [r9]
 32910 003e DAF80010 		ldr	r1, [r10]
 32911 0042 1943     		orrs	r1, r1, r3
 32912              	.LBE4422:
 32913              	.LBE4428:
5253:src/xeq.c     **** 			busy();
 32914              		.loc 1 5253 16 view .LVU8933
 32915 0044 04F01F03 		and	r3, r4, #31
5252:src/xeq.c     **** 		if ((++count & 31) == 0)
 32916              		.loc 1 5252 15 view .LVU8934
 32917 0048 0022     		movs	r2, #0
 32918              	.LBB4429:
 32919              	.LBB4423:
4253:src/xeq.c     **** 		Busy = 1;
 32920              		.loc 1 4253 12 view .LVU8935
 32921 004a 1943     		orrs	r1, r1, r3
 32922              	.LBE4423:
 32923              	.LBE4429:
5252:src/xeq.c     **** 		if ((++count & 31) == 0)
 32924              		.loc 1 5252 15 view .LVU8936
 32925 004c 3A60     		str	r2, [r7]
5253:src/xeq.c     **** 			busy();
 32926              		.loc 1 5253 3 is_stmt 1 view .LVU8937
 32927              	.LVL2585:
5254:src/xeq.c     **** 		  if (Pause)
 32928              		.loc 1 5254 4 view .LVU8938
 32929              	.LBB4430:
 32930              	.LBI4418:
4238:src/xeq.c     **** {
 32931              		.loc 1 4238 6 view .LVU8939
 32932              	.LBB4424:
4243:src/xeq.c     **** 
 32933              		.loc 1 4243 12 view .LVU8940
4248:src/xeq.c     **** 
 32934              		.loc 1 4248 17 view .LVU8941
4253:src/xeq.c     **** 		Busy = 1;
 32935              		.loc 1 4253 2 view .LVU8942
4253:src/xeq.c     **** 		Busy = 1;
 32936              		.loc 1 4253 12 is_stmt 0 view .LVU8943
 32937 004e 09D0     		beq	.L2374
 32938              	.L2365:
 32939              	.LBE4424:
 32940              	.LBE4430:
5255:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 32941              		.loc 1 5255 5 is_stmt 1 view .LVU8944
5258:src/xeq.c     **** 		
 32942              		.loc 1 5258 4 view .LVU8945
5249:src/xeq.c     **** 		XromRunning = 1;
 32943              		.loc 1 5249 10 view .LVU8946
ARM GAS  /tmp/ccjeMhND.s 			page 830


5255:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 32944              		.loc 1 5255 9 is_stmt 0 view .LVU8947
 32945 0050 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
5249:src/xeq.c     **** 		XromRunning = 1;
 32946              		.loc 1 5249 11 view .LVU8948
 32947 0052 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5255:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 32948              		.loc 1 5255 8 view .LVU8949
 32949 0054 12B1     		cbz	r2, .L2366
5258:src/xeq.c     **** 		
 32950              		.loc 1 5258 12 view .LVU8950
 32951 0056 0122     		movs	r2, #1
 32952 0058 C9F80020 		str	r2, [r9]
 32953              	.L2366:
5249:src/xeq.c     **** 		XromRunning = 1;
 32954              		.loc 1 5249 10 view .LVU8951
 32955 005c 002B     		cmp	r3, #0
 32956 005e DDD0     		beq	.L2364
 32957              	.LVL2586:
 32958              	.L2363:
5261:src/xeq.c     **** 
 32959              		.loc 1 5261 1 view .LVU8952
 32960 0060 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 32961              	.LVL2587:
 32962              	.L2374:
 32963              	.LBB4431:
 32964              	.LBB4425:
 32965              	.LBB4420:
 32966              	.LBI4420:
4238:src/xeq.c     **** {
 32967              		.loc 1 4238 6 is_stmt 1 view .LVU8953
 32968              	.LBB4421:
4254:src/xeq.c     **** 		message("Wait...", NULL);
 32969              		.loc 1 4254 3 view .LVU8954
4255:src/xeq.c     **** 	}
 32970              		.loc 1 4255 3 is_stmt 0 view .LVU8955
 32971 0064 0448     		ldr	r0, .L2375+8
4254:src/xeq.c     **** 		message("Wait...", NULL);
 32972              		.loc 1 4254 8 view .LVU8956
 32973 0066 CAF80060 		str	r6, [r10]
4255:src/xeq.c     **** 	}
 32974              		.loc 1 4255 3 is_stmt 1 view .LVU8957
 32975 006a FFF7FEFF 		bl	message
 32976              	.LVL2588:
4257:src/xeq.c     **** 
 32977              		.loc 1 4257 1 is_stmt 0 view .LVU8958
 32978 006e EFE7     		b	.L2365
 32979              	.L2376:
 32980              		.align	2
 32981              	.L2375:
 32982 0070 00000000 		.word	Pause
 32983 0074 00000000 		.word	XromRunning
 32984 0078 00000000 		.word	.LC7
 32985 007c 00000000 		.word	main_ram
 32986 0080 00000000 		.word	Busy
 32987 0084 00000000 		.word	Running
 32988              	.LBE4421:
ARM GAS  /tmp/ccjeMhND.s 			page 831


 32989              	.LBE4420:
 32990              	.LBE4425:
 32991              	.LBE4431:
 32992              		.cfi_endproc
 32993              	.LFE248:
 32995              		.section	.text.xeq_xrom,"ax",%progbits
 32996              		.align	1
 32997              		.p2align 2,,3
 32998              		.global	xeq_xrom
 32999              		.syntax unified
 33000              		.thumb
 33001              		.thumb_func
 33002              		.fpu fpv4-sp-d16
 33004              	xeq_xrom:
 33005              	.LFB249:
5264:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 33006              		.loc 1 5264 21 is_stmt 1 view -0
 33007              		.cfi_startproc
 33008              		@ args = 0, pretend = 0, frame = 0
 33009              		@ frame_needed = 0, uses_anonymous_args = 0
 33010              		@ link register save eliminated.
5266:src/xeq.c     **** 		xeq_xrom2();
 33011              		.loc 1 5266 2 view .LVU8960
5266:src/xeq.c     **** 		xeq_xrom2();
 33012              		.loc 1 5266 6 is_stmt 0 view .LVU8961
 33013 0000 034B     		ldr	r3, .L2380
5266:src/xeq.c     **** 		xeq_xrom2();
 33014              		.loc 1 5266 5 view .LVU8962
 33015 0002 93F91730 		ldrsb	r3, [r3, #23]
 33016 0006 002B     		cmp	r3, #0
 33017 0008 00DA     		bge	.L2379
5268:src/xeq.c     **** #endif
 33018              		.loc 1 5268 1 view .LVU8963
 33019 000a 7047     		bx	lr
 33020              	.L2379:
5267:src/xeq.c     **** }
 33021              		.loc 1 5267 3 is_stmt 1 view .LVU8964
 33022 000c FFF7FEBF 		b	xeq_xrom2
 33023              	.LVL2589:
 33024              	.L2381:
 33025              		.align	2
 33026              	.L2380:
 33027 0010 00000000 		.word	StateWhileOn
 33028              		.cfi_endproc
 33029              	.LFE249:
 33031              		.section	.text.dispatch_xrom,"ax",%progbits
 33032              		.align	1
 33033              		.p2align 2,,3
 33034              		.syntax unified
 33035              		.thumb
 33036              		.thumb_func
 33037              		.fpu fpv4-sp-d16
 33039              	dispatch_xrom:
 33040              	.LVL2590:
 33041              	.LFB233:
4290:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 33042              		.loc 1 4290 1 view -0
ARM GAS  /tmp/ccjeMhND.s 			page 832


 33043              		.cfi_startproc
 33044              		@ args = 0, pretend = 0, frame = 0
 33045              		@ frame_needed = 0, uses_anonymous_args = 0
4291:src/xeq.c     **** 	if (xp == NULL)
 33046              		.loc 1 4291 2 view .LVU8966
 33047              	.LBB4432:
 33048              	.LBI4432:
4273:src/xeq.c     **** {
 33049              		.loc 1 4273 24 view .LVU8967
 33050              	.LBB4433:
4275:src/xeq.c     **** 	if (xp < xrom)
 33051              		.loc 1 4275 2 view .LVU8968
4276:src/xeq.c     **** 		return NULL;
 33052              		.loc 1 4276 5 is_stmt 0 view .LVU8969
 33053 0000 1649     		ldr	r1, .L2393
4275:src/xeq.c     **** 	if (xp < xrom)
 33054              		.loc 1 4275 59 view .LVU8970
 33055 0002 20F00100 		bic	r0, r0, #1
 33056              	.LVL2591:
4276:src/xeq.c     **** 		return NULL;
 33057              		.loc 1 4276 2 is_stmt 1 view .LVU8971
4276:src/xeq.c     **** 		return NULL;
 33058              		.loc 1 4276 5 is_stmt 0 view .LVU8972
 33059 0006 8842     		cmp	r0, r1
 33060 0008 22D3     		bcc	.L2385
4280:src/xeq.c     **** 		return NULL;
 33061              		.loc 1 4280 2 is_stmt 1 view .LVU8973
4280:src/xeq.c     **** 		return NULL;
 33062              		.loc 1 4280 17 is_stmt 0 view .LVU8974
 33063 000a 154B     		ldr	r3, .L2393+4
 33064 000c 1B88     		ldrh	r3, [r3]
 33065 000e 01EB4303 		add	r3, r1, r3, lsl #1
4280:src/xeq.c     **** 		return NULL;
 33066              		.loc 1 4280 5 view .LVU8975
 33067 0012 9842     		cmp	r0, r3
 33068 0014 1CD2     		bcs	.L2385
 33069              	.LVL2592:
4280:src/xeq.c     **** 		return NULL;
 33070              		.loc 1 4280 5 view .LVU8976
 33071              	.LBE4433:
 33072              	.LBE4432:
4292:src/xeq.c     **** 		return 0;
 33073              		.loc 1 4292 2 is_stmt 1 view .LVU8977
4292:src/xeq.c     **** 		return 0;
 33074              		.loc 1 4292 5 is_stmt 0 view .LVU8978
 33075 0016 D0B1     		cbz	r0, .L2389
4295:src/xeq.c     **** 	XromRunning = 1;
 33076              		.loc 1 4295 2 is_stmt 1 view .LVU8979
4295:src/xeq.c     **** 	XromRunning = 1;
 33077              		.loc 1 4295 18 is_stmt 0 view .LVU8980
 33078 0018 124B     		ldr	r3, .L2393+8
 33079 001a 1B68     		ldr	r3, [r3]
4290:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 33080              		.loc 1 4290 1 view .LVU8981
 33081 001c 70B5     		push	{r4, r5, r6, lr}
 33082              		.cfi_def_cfa_offset 16
 33083              		.cfi_offset 4, -16
ARM GAS  /tmp/ccjeMhND.s 			page 833


 33084              		.cfi_offset 5, -12
 33085              		.cfi_offset 6, -8
 33086              		.cfi_offset 14, -4
4297:src/xeq.c     **** 	xeq_xrom();
 33087              		.loc 1 4297 9 view .LVU8982
 33088 001e 401A     		subs	r0, r0, r1
 33089              	.LVL2593:
4295:src/xeq.c     **** 	XromRunning = 1;
 33090              		.loc 1 4295 16 view .LVU8983
 33091 0020 114C     		ldr	r4, .L2393+12
4295:src/xeq.c     **** 	XromRunning = 1;
 33092              		.loc 1 4295 18 view .LVU8984
 33093 0022 B3F9DE67 		ldrsh	r6, [r3, #2014]
 33094 0026 2660     		str	r6, [r4]
4296:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 33095              		.loc 1 4296 2 is_stmt 1 view .LVU8985
4297:src/xeq.c     **** 	xeq_xrom();
 33096              		.loc 1 4297 9 is_stmt 0 view .LVU8986
 33097 0028 4010     		asrs	r0, r0, #1
 33098              	.LVL2594:
4296:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 33099              		.loc 1 4296 14 view .LVU8987
 33100 002a 0124     		movs	r4, #1
 33101 002c 0F4D     		ldr	r5, .L2393+16
4297:src/xeq.c     **** 	xeq_xrom();
 33102              		.loc 1 4297 2 view .LVU8988
 33103 002e B3F8E027 		ldrh	r2, [r3, #2016]
4296:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 33104              		.loc 1 4296 14 view .LVU8989
 33105 0032 2C60     		str	r4, [r5]
4297:src/xeq.c     **** 	xeq_xrom();
 33106              		.loc 1 4297 2 is_stmt 1 view .LVU8990
4297:src/xeq.c     **** 	xeq_xrom();
 33107              		.loc 1 4297 9 is_stmt 0 view .LVU8991
 33108 0034 0130     		adds	r0, r0, #1
4297:src/xeq.c     **** 	xeq_xrom();
 33109              		.loc 1 4297 2 view .LVU8992
 33110 0036 40F44040 		orr	r0, r0, #49152
 33111 003a 2146     		mov	r1, r4
 33112 003c FFF7FEFF 		bl	gsbgto
 33113              	.LVL2595:
4298:src/xeq.c     **** 	return 1;
 33114              		.loc 1 4298 2 is_stmt 1 view .LVU8993
 33115              	.LBB4434:
 33116              	.LBI4434:
5264:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 33117              		.loc 1 5264 6 view .LVU8994
 33118              	.LBB4435:
5266:src/xeq.c     **** 		xeq_xrom2();
 33119              		.loc 1 5266 2 view .LVU8995
5266:src/xeq.c     **** 		xeq_xrom2();
 33120              		.loc 1 5266 6 is_stmt 0 view .LVU8996
 33121 0040 0B4B     		ldr	r3, .L2393+20
5266:src/xeq.c     **** 		xeq_xrom2();
 33122              		.loc 1 5266 5 view .LVU8997
 33123 0042 93F91730 		ldrsb	r3, [r3, #23]
 33124 0046 002B     		cmp	r3, #0
ARM GAS  /tmp/ccjeMhND.s 			page 834


 33125 0048 04DA     		bge	.L2392
 33126              	.LBE4435:
 33127              	.LBE4434:
4299:src/xeq.c     **** }
 33128              		.loc 1 4299 9 view .LVU8998
 33129 004a 2046     		mov	r0, r4
 33130              	.LVL2596:
4300:src/xeq.c     **** 
 33131              		.loc 1 4300 1 view .LVU8999
 33132 004c 70BD     		pop	{r4, r5, r6, pc}
 33133              	.LVL2597:
 33134              	.L2389:
 33135              		.cfi_def_cfa_offset 0
 33136              		.cfi_restore 4
 33137              		.cfi_restore 5
 33138              		.cfi_restore 6
 33139              		.cfi_restore 14
4300:src/xeq.c     **** 
 33140              		.loc 1 4300 1 view .LVU9000
 33141 004e 7047     		bx	lr
 33142              	.LVL2598:
 33143              	.L2385:
4293:src/xeq.c     **** 	// set_lift();
 33144              		.loc 1 4293 10 view .LVU9001
 33145 0050 0020     		movs	r0, #0
 33146              	.LVL2599:
4293:src/xeq.c     **** 	// set_lift();
 33147              		.loc 1 4293 10 view .LVU9002
 33148 0052 7047     		bx	lr
 33149              	.LVL2600:
 33150              	.L2392:
 33151              		.cfi_def_cfa_offset 16
 33152              		.cfi_offset 4, -16
 33153              		.cfi_offset 5, -12
 33154              		.cfi_offset 6, -8
 33155              		.cfi_offset 14, -4
 33156              	.LBB4437:
 33157              	.LBB4436:
5267:src/xeq.c     **** }
 33158              		.loc 1 5267 3 is_stmt 1 view .LVU9003
 33159 0054 FFF7FEFF 		bl	xeq_xrom2
 33160              	.LVL2601:
 33161              	.LBE4436:
 33162              	.LBE4437:
4299:src/xeq.c     **** }
 33163              		.loc 1 4299 9 is_stmt 0 view .LVU9004
 33164 0058 2046     		mov	r0, r4
4300:src/xeq.c     **** 
 33165              		.loc 1 4300 1 view .LVU9005
 33166 005a 70BD     		pop	{r4, r5, r6, pc}
 33167              	.L2394:
 33168              		.align	2
 33169              	.L2393:
 33170 005c 00000000 		.word	xrom
 33171 0060 00000000 		.word	xrom_size
 33172 0064 00000000 		.word	main_ram
 33173 0068 00000000 		.word	UserLocalRegs
ARM GAS  /tmp/ccjeMhND.s 			page 835


 33174 006c 00000000 		.word	XromRunning
 33175 0070 00000000 		.word	StateWhileOn
 33176              		.cfi_endproc
 33177              	.LFE233:
 33179              		.section	.text.op_rs,"ax",%progbits
 33180              		.align	1
 33181              		.p2align 2,,3
 33182              		.global	op_rs
 33183              		.syntax unified
 33184              		.thumb
 33185              		.thumb_func
 33186              		.fpu fpv4-sp-d16
 33188              	op_rs:
 33189              	.LVL2602:
 33190              	.LFB252:
5363:src/xeq.c     **** #ifndef REALBUILD
 33191              		.loc 1 5363 27 is_stmt 1 view -0
 33192              		.cfi_startproc
 33193              		@ args = 0, pretend = 0, frame = 0
 33194              		@ frame_needed = 0, uses_anonymous_args = 0
5367:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 33195              		.loc 1 5367 2 view .LVU9007
 33196              	.LBB4438:
 33197              	.LBI4438:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 33198              		.loc 1 182 5 view .LVU9008
 33199              	.LBB4439:
 183:src/xeq.c     **** }
 33200              		.loc 1 183 2 view .LVU9009
 33201              	.LBE4439:
 33202              	.LBE4438:
5363:src/xeq.c     **** #ifndef REALBUILD
 33203              		.loc 1 5363 27 is_stmt 0 view .LVU9010
 33204 0000 10B5     		push	{r4, lr}
 33205              		.cfi_def_cfa_offset 8
 33206              		.cfi_offset 4, -8
 33207              		.cfi_offset 14, -4
 33208              	.LBB4441:
 33209              	.LBB4440:
 183:src/xeq.c     **** }
 33210              		.loc 1 183 9 view .LVU9011
 33211 0002 1D4C     		ldr	r4, .L2405
 33212 0004 2268     		ldr	r2, [r4]
 33213 0006 B2F8E037 		ldrh	r3, [r2, #2016]
 33214              	.LBE4440:
 33215              	.LBE4441:
5367:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 33216              		.loc 1 5367 5 view .LVU9012
 33217 000a 9B0B     		lsrs	r3, r3, #14
 33218 000c 032B     		cmp	r3, #3
 33219 000e 20D0     		beq	.L2404
5377:src/xeq.c     **** 		set_running_off();
 33220              		.loc 1 5377 2 is_stmt 1 view .LVU9013
5377:src/xeq.c     **** 		set_running_off();
 33221              		.loc 1 5377 6 is_stmt 0 view .LVU9014
 33222 0010 1A4B     		ldr	r3, .L2405+4
5377:src/xeq.c     **** 		set_running_off();
ARM GAS  /tmp/ccjeMhND.s 			page 836


 33223              		.loc 1 5377 5 view .LVU9015
 33224 0012 1968     		ldr	r1, [r3]
 33225 0014 61B1     		cbz	r1, .L2399
5378:src/xeq.c     **** 	else {
 33226              		.loc 1 5378 3 is_stmt 1 view .LVU9016
 33227              	.LBB4442:
 33228              	.LBI4442:
5580:src/xeq.c     **** 	set_running_off_sst();
 33229              		.loc 1 5580 6 view .LVU9017
 33230              	.LBB4443:
5581:src/xeq.c     **** 	State.entryp = 0;
 33231              		.loc 1 5581 2 view .LVU9018
 33232              	.LBB4444:
 33233              	.LBI4444:
5572:src/xeq.c     **** 	Running = 0;
 33234              		.loc 1 5572 6 view .LVU9019
 33235              	.LBB4445:
5573:src/xeq.c     **** }
 33236              		.loc 1 5573 2 view .LVU9020
5573:src/xeq.c     **** }
 33237              		.loc 1 5573 10 is_stmt 0 view .LVU9021
 33238 0016 0021     		movs	r1, #0
 33239 0018 1960     		str	r1, [r3]
 33240              	.LBE4445:
 33241              	.LBE4444:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 33242              		.loc 1 5582 2 is_stmt 1 view .LVU9022
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 33243              		.loc 1 5582 15 is_stmt 0 view .LVU9023
 33244 001a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 33245 001e 61F30413 		bfi	r3, r1, #4, #1
 33246 0022 82F8DD37 		strb	r3, [r2, #2013]
5583:src/xeq.c     **** }
 33247              		.loc 1 5583 2 is_stmt 1 view .LVU9024
 33248              	.LBE4443:
 33249              	.LBE4442:
5384:src/xeq.c     **** 
 33250              		.loc 1 5384 1 is_stmt 0 view .LVU9025
 33251 0026 BDE81040 		pop	{r4, lr}
 33252              		.cfi_remember_state
 33253              		.cfi_restore 14
 33254              		.cfi_restore 4
 33255              		.cfi_def_cfa_offset 0
 33256              	.LBB4447:
 33257              	.LBB4446:
5583:src/xeq.c     **** }
 33258              		.loc 1 5583 2 view .LVU9026
 33259 002a 8A20     		movs	r0, #138
 33260              	.LVL2603:
5583:src/xeq.c     **** }
 33261              		.loc 1 5583 2 view .LVU9027
 33262 002c FFF7FEBF 		b	dot
 33263              	.LVL2604:
 33264              	.L2399:
 33265              		.cfi_restore_state
5583:src/xeq.c     **** }
 33266              		.loc 1 5583 2 view .LVU9028
ARM GAS  /tmp/ccjeMhND.s 			page 837


 33267              	.LBE4446:
 33268              	.LBE4447:
5380:src/xeq.c     **** 		if (RetStkPtr == 0)
 33269              		.loc 1 5380 3 is_stmt 1 view .LVU9029
 33270 0030 FFF7FEFF 		bl	set_running_on
 33271              	.LVL2605:
5381:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 33272              		.loc 1 5381 3 view .LVU9030
5381:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 33273              		.loc 1 5381 7 is_stmt 0 view .LVU9031
 33274 0034 2368     		ldr	r3, [r4]
5381:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 33275              		.loc 1 5381 6 view .LVU9032
 33276 0036 B3F9E227 		ldrsh	r2, [r3, #2018]
 33277 003a 4AB9     		cbnz	r2, .L2395
5382:src/xeq.c     **** 	}
 33278              		.loc 1 5382 4 is_stmt 1 view .LVU9033
5382:src/xeq.c     **** 	}
 33279              		.loc 1 5382 10 is_stmt 0 view .LVU9034
 33280 003c 104A     		ldr	r2, .L2405+8
5382:src/xeq.c     **** 	}
 33281              		.loc 1 5382 26 view .LVU9035
 33282 003e B3F8E017 		ldrh	r1, [r3, #2016]
5382:src/xeq.c     **** 	}
 33283              		.loc 1 5382 10 view .LVU9036
 33284 0042 1268     		ldr	r2, [r2]
5382:src/xeq.c     **** 	}
 33285              		.loc 1 5382 24 view .LVU9037
 33286 0044 4FF6FF70 		movw	r0, #65535
 33287 0048 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 33288 004c 22F8021C 		strh	r1, [r2, #-2]	@ movhi
 33289              	.L2395:
5384:src/xeq.c     **** 
 33290              		.loc 1 5384 1 view .LVU9038
 33291 0050 10BD     		pop	{r4, pc}
 33292              	.LVL2606:
 33293              	.L2404:
5368:src/xeq.c     **** 			Running = XromRunning = 0;
 33294              		.loc 1 5368 3 is_stmt 1 view .LVU9039
5368:src/xeq.c     **** 			Running = XromRunning = 0;
 33295              		.loc 1 5368 7 is_stmt 0 view .LVU9040
 33296 0052 0C4B     		ldr	r3, .L2405+12
5368:src/xeq.c     **** 			Running = XromRunning = 0;
 33297              		.loc 1 5368 6 view .LVU9041
 33298 0054 93F91730 		ldrsb	r3, [r3, #23]
 33299 0058 002B     		cmp	r3, #0
 33300 005a 09DA     		bge	.L2397
5368:src/xeq.c     **** 			Running = XromRunning = 0;
 33301              		.loc 1 5368 24 discriminator 1 view .LVU9042
 33302 005c 074B     		ldr	r3, .L2405+4
5368:src/xeq.c     **** 			Running = XromRunning = 0;
 33303              		.loc 1 5368 32 discriminator 1 view .LVU9043
 33304 005e 0A4A     		ldr	r2, .L2405+16
 33305 0060 1868     		ldr	r0, [r3]
 33306              	.LVL2607:
5368:src/xeq.c     **** 			Running = XromRunning = 0;
 33307              		.loc 1 5368 32 discriminator 1 view .LVU9044
ARM GAS  /tmp/ccjeMhND.s 			page 838


 33308 0062 1168     		ldr	r1, [r2]
 33309 0064 0143     		orrs	r1, r0, r1
 33310 0066 03D0     		beq	.L2397
5369:src/xeq.c     **** 		}
 33311              		.loc 1 5369 4 is_stmt 1 view .LVU9045
5369:src/xeq.c     **** 		}
 33312              		.loc 1 5369 26 is_stmt 0 view .LVU9046
 33313 0068 0021     		movs	r1, #0
 33314 006a 1160     		str	r1, [r2]
5369:src/xeq.c     **** 		}
 33315              		.loc 1 5369 12 view .LVU9047
 33316 006c 1960     		str	r1, [r3]
5384:src/xeq.c     **** 
 33317              		.loc 1 5384 1 view .LVU9048
 33318 006e 10BD     		pop	{r4, pc}
 33319              	.L2397:
5372:src/xeq.c     **** 		}
 33320              		.loc 1 5372 4 is_stmt 1 view .LVU9049
5384:src/xeq.c     **** 
 33321              		.loc 1 5384 1 is_stmt 0 view .LVU9050
 33322 0070 BDE81040 		pop	{r4, lr}
 33323              		.cfi_restore 14
 33324              		.cfi_restore 4
 33325              		.cfi_def_cfa_offset 0
5372:src/xeq.c     **** 		}
 33326              		.loc 1 5372 4 view .LVU9051
 33327 0074 FFF7FEBF 		b	xeq_xrom2
 33328              	.LVL2608:
 33329              	.L2406:
 33330              		.align	2
 33331              	.L2405:
 33332 0078 00000000 		.word	main_ram
 33333 007c 00000000 		.word	Running
 33334 0080 00000000 		.word	RetStk
 33335 0084 00000000 		.word	StateWhileOn
 33336 0088 00000000 		.word	XromRunning
 33337              		.cfi_endproc
 33338              	.LFE252:
 33340              		.section	.text.xeqprog,"ax",%progbits
 33341              		.align	1
 33342              		.p2align 2,,3
 33343              		.global	xeqprog
 33344              		.syntax unified
 33345              		.thumb
 33346              		.thumb_func
 33347              		.fpu fpv4-sp-d16
 33349              	xeqprog:
 33350              	.LFB250:
5280:src/xeq.c     ****    int state = 0;
 33351              		.loc 1 5280 2 is_stmt 1 view -0
 33352              		.cfi_startproc
 33353              		@ args = 0, pretend = 0, frame = 0
 33354              		@ frame_needed = 0, uses_anonymous_args = 0
5281:src/xeq.c     ****    if (Running || Pause) {
 33355              		.loc 1 5281 4 view .LVU9053
 33356              	.LVL2609:
5282:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 839


 33357              		.loc 1 5282 4 view .LVU9054
5280:src/xeq.c     ****    int state = 0;
 33358              		.loc 1 5280 2 is_stmt 0 view .LVU9055
 33359 0000 38B5     		push	{r3, r4, r5, lr}
 33360              		.cfi_def_cfa_offset 16
 33361              		.cfi_offset 3, -16
 33362              		.cfi_offset 4, -12
 33363              		.cfi_offset 5, -8
 33364              		.cfi_offset 14, -4
5282:src/xeq.c     **** 
 33365              		.loc 1 5282 8 view .LVU9056
 33366 0002 184C     		ldr	r4, .L2432
 33367 0004 184D     		ldr	r5, .L2432+4
5282:src/xeq.c     **** 
 33368              		.loc 1 5282 7 view .LVU9057
 33369 0006 2368     		ldr	r3, [r4]
 33370 0008 0BB9     		cbnz	r3, .L2408
5282:src/xeq.c     **** 
 33371              		.loc 1 5282 16 discriminator 1 view .LVU9058
 33372 000a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 33373 000c 9BB1     		cbz	r3, .L2413
 33374              	.L2408:
5288:src/xeq.c     **** #endif
 33375              		.loc 1 5288 6 is_stmt 1 view .LVU9059
 33376              	.LVL2610:
5292:src/xeq.c     ****      finish_RPN(); // RPN
 33377              		.loc 1 5292 6 view .LVU9060
 33378 000e 0121     		movs	r1, #1
 33379 0010 8A20     		movs	r0, #138
 33380 0012 FFF7FEFF 		bl	dot
 33381              	.LVL2611:
5293:src/xeq.c     **** 
 33382              		.loc 1 5293 6 view .LVU9061
 33383 0016 FFF7FEFF 		bl	finish_RPN
 33384              	.LVL2612:
5295:src/xeq.c     ****        xeq_single();
 33385              		.loc 1 5295 6 view .LVU9062
5295:src/xeq.c     ****        xeq_single();
 33386              		.loc 1 5295 12 is_stmt 0 view .LVU9063
 33387 001a 06E0     		b	.L2410
 33388              	.L2430:
5295:src/xeq.c     ****        xeq_single();
 33389              		.loc 1 5295 21 discriminator 1 view .LVU9064
 33390 001c 2368     		ldr	r3, [r4]
 33391 001e 53B1     		cbz	r3, .L2413
5296:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 33392              		.loc 1 5296 8 view .LVU9065
 33393 0020 FFF7FEFF 		bl	xeq_single
 33394              	.LVL2613:
5298:src/xeq.c     **** 	 {
 33395              		.loc 1 5298 8 is_stmt 1 view .LVU9066
5298:src/xeq.c     **** 	 {
 33396              		.loc 1 5298 12 is_stmt 0 view .LVU9067
 33397 0024 FFF7FEFF 		bl	is_key_pressed
 33398              	.LVL2614:
5298:src/xeq.c     **** 	 {
 33399              		.loc 1 5298 11 view .LVU9068
ARM GAS  /tmp/ccjeMhND.s 			page 840


 33400 0028 10B9     		cbnz	r0, .L2411
 33401              	.L2410:
5296:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 33402              		.loc 1 5296 8 is_stmt 1 view .LVU9069
5295:src/xeq.c     ****        xeq_single();
 33403              		.loc 1 5295 12 view .LVU9070
5295:src/xeq.c     ****        xeq_single();
 33404              		.loc 1 5295 13 is_stmt 0 view .LVU9071
 33405 002a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5295:src/xeq.c     ****        xeq_single();
 33406              		.loc 1 5295 12 view .LVU9072
 33407 002c 002B     		cmp	r3, #0
 33408 002e F5D0     		beq	.L2430
 33409              	.L2411:
5307:src/xeq.c     ****      // Program has terminated
 33410              		.loc 1 5307 4 is_stmt 1 view .LVU9073
5307:src/xeq.c     ****      // Program has terminated
 33411              		.loc 1 5307 7 is_stmt 0 view .LVU9074
 33412 0030 2368     		ldr	r3, [r4]
 33413 0032 03B1     		cbz	r3, .L2413
 33414              	.LVL2615:
 33415              	.L2407:
5321:src/xeq.c     **** 
 33416              		.loc 1 5321 2 view .LVU9075
 33417 0034 38BD     		pop	{r3, r4, r5, pc}
 33418              	.L2413:
5307:src/xeq.c     ****      // Program has terminated
 33419              		.loc 1 5307 4 is_stmt 1 view .LVU9076
5307:src/xeq.c     ****      // Program has terminated
 33420              		.loc 1 5307 21 is_stmt 0 view .LVU9077
 33421 0036 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5307:src/xeq.c     ****      // Program has terminated
 33422              		.loc 1 5307 18 view .LVU9078
 33423 0038 002B     		cmp	r3, #0
 33424 003a FBD1     		bne	.L2407
5309:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
 33425              		.loc 1 5309 6 is_stmt 1 view .LVU9079
5310:src/xeq.c     ****      display();
 33426              		.loc 1 5310 14 is_stmt 0 view .LVU9080
 33427 003c 0B4C     		ldr	r4, .L2432+8
5309:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
 33428              		.loc 1 5309 6 view .LVU9081
 33429 003e 8A20     		movs	r0, #138
 33430 0040 FFF7FEFF 		bl	clr_dot
 33431              	.LVL2616:
5310:src/xeq.c     ****      display();
 33432              		.loc 1 5310 6 is_stmt 1 view .LVU9082
5310:src/xeq.c     ****      display();
 33433              		.loc 1 5310 14 is_stmt 0 view .LVU9083
 33434 0044 0123     		movs	r3, #1
 33435 0046 2360     		str	r3, [r4]
5311:src/xeq.c     ****      if (ShowRPN) {
 33436              		.loc 1 5311 6 is_stmt 1 view .LVU9084
 33437 0048 FFF7FEFF 		bl	display
 33438              	.LVL2617:
5312:src/xeq.c     ****        set_dot(RPN);
 33439              		.loc 1 5312 6 view .LVU9085
ARM GAS  /tmp/ccjeMhND.s 			page 841


5312:src/xeq.c     ****        set_dot(RPN);
 33440              		.loc 1 5312 9 is_stmt 0 view .LVU9086
 33441 004c 2368     		ldr	r3, [r4]
 33442 004e 1BB9     		cbnz	r3, .L2431
 33443              	.L2415:
5318:src/xeq.c     **** #endif
 33444              		.loc 1 5318 6 is_stmt 1 view .LVU9087
5318:src/xeq.c     **** #endif
 33445              		.loc 1 5318 18 is_stmt 0 view .LVU9088
 33446 0050 074B     		ldr	r3, .L2432+12
 33447 0052 0122     		movs	r2, #1
 33448 0054 1A60     		str	r2, [r3]
5321:src/xeq.c     **** 
 33449              		.loc 1 5321 2 view .LVU9089
 33450 0056 38BD     		pop	{r3, r4, r5, pc}
 33451              	.L2431:
5313:src/xeq.c     ****        finish_RPN(); // RPN
 33452              		.loc 1 5313 8 is_stmt 1 view .LVU9090
 33453 0058 8D20     		movs	r0, #141
 33454 005a FFF7FEFF 		bl	set_dot
 33455              	.LVL2618:
5314:src/xeq.c     ****      }
 33456              		.loc 1 5314 8 view .LVU9091
 33457 005e FFF7FEFF 		bl	finish_RPN
 33458              	.LVL2619:
 33459 0062 F5E7     		b	.L2415
 33460              	.L2433:
 33461              		.align	2
 33462              	.L2432:
 33463 0064 00000000 		.word	Running
 33464 0068 00000000 		.word	Pause
 33465 006c 00000000 		.word	ShowRPN
 33466 0070 00000000 		.word	JustStopped
 33467              		.cfi_endproc
 33468              	.LFE250:
 33470              		.section	.text.xeq_sst_bst,"ax",%progbits
 33471              		.align	1
 33472              		.p2align 2,,3
 33473              		.global	xeq_sst_bst
 33474              		.syntax unified
 33475              		.thumb
 33476              		.thumb_func
 33477              		.fpu fpv4-sp-d16
 33479              	xeq_sst_bst:
 33480              	.LVL2620:
 33481              	.LFB251:
5326:src/xeq.c     **** 	opcode op;
 33482              		.loc 1 5326 1 view -0
 33483              		.cfi_startproc
 33484              		@ args = 0, pretend = 0, frame = 0
 33485              		@ frame_needed = 0, uses_anonymous_args = 0
5327:src/xeq.c     **** 
 33486              		.loc 1 5327 2 view .LVU9093
5329:src/xeq.c     **** 	if (kind == -1)
 33487              		.loc 1 5329 2 view .LVU9094
 33488              	.LBB4448:
 33489              	.LBI4448:
ARM GAS  /tmp/ccjeMhND.s 			page 842


4227:src/xeq.c     **** 	// extern int IntMaxWindow;
 33490              		.loc 1 4227 6 view .LVU9095
 33491              	.LBB4449:
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 33492              		.loc 1 4230 2 view .LVU9096
 33493              	.LBE4449:
 33494              	.LBE4448:
5326:src/xeq.c     **** 	opcode op;
 33495              		.loc 1 5326 1 is_stmt 0 view .LVU9097
 33496 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 33497              		.cfi_def_cfa_offset 24
 33498              		.cfi_offset 4, -24
 33499              		.cfi_offset 5, -20
 33500              		.cfi_offset 6, -16
 33501              		.cfi_offset 7, -12
 33502              		.cfi_offset 8, -8
 33503              		.cfi_offset 14, -4
 33504              	.LBB4452:
 33505              	.LBB4450:
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 33506              		.loc 1 4230 16 view .LVU9098
 33507 0004 254C     		ldr	r4, .L2447
 33508 0006 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4231:src/xeq.c     **** }
 33509              		.loc 1 4231 15 view .LVU9099
 33510 0008 0026     		movs	r6, #0
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 33511              		.loc 1 4230 16 view .LVU9100
 33512 000a 6FF3C503 		bfc	r3, #3, #3
 33513              	.LBE4450:
 33514              	.LBE4452:
5330:src/xeq.c     **** 		decpc();
 33515              		.loc 1 5330 5 view .LVU9101
 33516 000e 411C     		adds	r1, r0, #1
 33517              	.LBB4453:
 33518              	.LBB4451:
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 33519              		.loc 1 4230 16 view .LVU9102
 33520 0010 2375     		strb	r3, [r4, #20]
4231:src/xeq.c     **** }
 33521              		.loc 1 4231 2 is_stmt 1 view .LVU9103
4231:src/xeq.c     **** }
 33522              		.loc 1 4231 15 is_stmt 0 view .LVU9104
 33523 0012 6674     		strb	r6, [r4, #17]
 33524              	.LBE4451:
 33525              	.LBE4453:
5330:src/xeq.c     **** 		decpc();
 33526              		.loc 1 5330 2 is_stmt 1 view .LVU9105
5330:src/xeq.c     **** 		decpc();
 33527              		.loc 1 5330 5 is_stmt 0 view .LVU9106
 33528 0014 30D0     		beq	.L2443
5333:src/xeq.c     **** 		// Display the step
 33529              		.loc 1 5333 2 is_stmt 1 view .LVU9107
5333:src/xeq.c     **** 		// Display the step
 33530              		.loc 1 5333 6 is_stmt 0 view .LVU9108
 33531 0016 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5333:src/xeq.c     **** 		// Display the step
ARM GAS  /tmp/ccjeMhND.s 			page 843


 33532              		.loc 1 5333 5 view .LVU9109
 33533 0018 5B06     		lsls	r3, r3, #25
 33534 001a 0546     		mov	r5, r0
 33535 001c 08D4     		bmi	.L2444
5352:src/xeq.c     **** 		// Key down in program mode
 33536              		.loc 1 5352 7 is_stmt 1 view .LVU9110
5352:src/xeq.c     **** 		// Key down in program mode
 33537              		.loc 1 5352 10 is_stmt 0 view .LVU9111
 33538 001e 08B1     		cbz	r0, .L2445
 33539              	.LVL2621:
 33540              	.L2434:
5357:src/xeq.c     **** 
 33541              		.loc 1 5357 1 view .LVU9112
 33542 0020 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 33543              	.LVL2622:
 33544              	.L2445:
5354:src/xeq.c     **** 		OpCode = 0;
 33545              		.loc 1 5354 3 is_stmt 1 view .LVU9113
 33546 0024 FFF7FEFF 		bl	incpc
 33547              	.LVL2623:
5355:src/xeq.c     **** 	}
 33548              		.loc 1 5355 3 view .LVU9114
5355:src/xeq.c     **** 	}
 33549              		.loc 1 5355 10 is_stmt 0 view .LVU9115
 33550 0028 1D4B     		ldr	r3, .L2447+4
 33551 002a 1D60     		str	r5, [r3]
5357:src/xeq.c     **** 
 33552              		.loc 1 5357 1 view .LVU9116
 33553 002c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 33554              	.LVL2624:
 33555              	.L2444:
5335:src/xeq.c     **** 		print_step(op);
 33556              		.loc 1 5335 3 is_stmt 1 view .LVU9117
5335:src/xeq.c     **** 		print_step(op);
 33557              		.loc 1 5335 16 is_stmt 0 view .LVU9118
 33558 0030 1C4B     		ldr	r3, .L2447+8
 33559 0032 1B68     		ldr	r3, [r3]
5335:src/xeq.c     **** 		print_step(op);
 33560              		.loc 1 5335 8 view .LVU9119
 33561 0034 B3F8E007 		ldrh	r0, [r3, #2016]
 33562              	.LVL2625:
5335:src/xeq.c     **** 		print_step(op);
 33563              		.loc 1 5335 8 view .LVU9120
 33564 0038 FFF7FEFF 		bl	getprog
 33565              	.LVL2626:
 33566 003c 0746     		mov	r7, r0
 33567              	.LVL2627:
5336:src/xeq.c     **** 		if (kind == 1) {
 33568              		.loc 1 5336 3 is_stmt 1 view .LVU9121
 33569 003e FFF7FEFF 		bl	print_step
 33570              	.LVL2628:
5337:src/xeq.c     **** 			// Execute the step on key up
 33571              		.loc 1 5337 3 view .LVU9122
5337:src/xeq.c     **** 			// Execute the step on key up
 33572              		.loc 1 5337 6 is_stmt 0 view .LVU9123
 33573 0042 012D     		cmp	r5, #1
 33574 0044 ECD1     		bne	.L2434
ARM GAS  /tmp/ccjeMhND.s 			page 844


5340:src/xeq.c     **** #endif
 33575              		.loc 1 5340 4 is_stmt 1 view .LVU9124
5340:src/xeq.c     **** #endif
 33576              		.loc 1 5340 15 is_stmt 0 view .LVU9125
 33577 0046 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 33578              	.LBB4454:
 33579              	.LBB4455:
5577:src/xeq.c     **** }
 33580              		.loc 1 5577 10 view .LVU9126
 33581 0048 DFF85C80 		ldr	r8, .L2447+12
 33582              	.LBE4455:
 33583              	.LBE4454:
5340:src/xeq.c     **** #endif
 33584              		.loc 1 5340 15 view .LVU9127
 33585 004c 43F00203 		orr	r3, r3, #2
 33586 0050 2376     		strb	r3, [r4, #24]
5342:src/xeq.c     **** 			incpc();
 33587              		.loc 1 5342 4 is_stmt 1 view .LVU9128
 33588              	.LBB4457:
 33589              	.LBI4454:
5576:src/xeq.c     **** 	Running = 1;
 33590              		.loc 1 5576 6 view .LVU9129
 33591              	.LBB4456:
5577:src/xeq.c     **** }
 33592              		.loc 1 5577 2 view .LVU9130
5577:src/xeq.c     **** }
 33593              		.loc 1 5577 10 is_stmt 0 view .LVU9131
 33594 0052 C8F80050 		str	r5, [r8]
 33595              	.LBE4456:
 33596              	.LBE4457:
5343:src/xeq.c     **** 			xeq(op);
 33597              		.loc 1 5343 4 is_stmt 1 view .LVU9132
 33598 0056 FFF7FEFF 		bl	incpc
 33599              	.LVL2629:
5344:src/xeq.c     **** #ifndef REALBUILD
 33600              		.loc 1 5344 4 view .LVU9133
 33601 005a 3846     		mov	r0, r7
 33602 005c FFF7FEFF 		bl	xeq
 33603              	.LVL2630:
5346:src/xeq.c     **** #endif
 33604              		.loc 1 5346 4 view .LVU9134
5346:src/xeq.c     **** #endif
 33605              		.loc 1 5346 15 is_stmt 0 view .LVU9135
 33606 0060 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 33607              	.LBB4458:
 33608              	.LBB4459:
5266:src/xeq.c     **** 		xeq_xrom2();
 33609              		.loc 1 5266 5 view .LVU9136
 33610 0062 94F91720 		ldrsb	r2, [r4, #23]
 33611              	.LBE4459:
 33612              	.LBE4458:
5346:src/xeq.c     **** #endif
 33613              		.loc 1 5346 15 view .LVU9137
 33614 0066 66F34103 		bfi	r3, r6, #1, #1
 33615              	.LBB4463:
 33616              	.LBB4460:
5266:src/xeq.c     **** 		xeq_xrom2();
ARM GAS  /tmp/ccjeMhND.s 			page 845


 33617              		.loc 1 5266 5 view .LVU9138
 33618 006a 002A     		cmp	r2, #0
 33619              	.LBE4460:
 33620              	.LBE4463:
5346:src/xeq.c     **** #endif
 33621              		.loc 1 5346 15 view .LVU9139
 33622 006c 2376     		strb	r3, [r4, #24]
5348:src/xeq.c     **** 			set_running_off_sst();
 33623              		.loc 1 5348 4 is_stmt 1 view .LVU9140
 33624              	.LBB4464:
 33625              	.LBI4458:
5264:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 33626              		.loc 1 5264 6 view .LVU9141
 33627              	.LBB4461:
5266:src/xeq.c     **** 		xeq_xrom2();
 33628              		.loc 1 5266 2 view .LVU9142
5266:src/xeq.c     **** 		xeq_xrom2();
 33629              		.loc 1 5266 5 is_stmt 0 view .LVU9143
 33630 006e 12DA     		bge	.L2446
 33631              	.L2441:
 33632              	.LBE4461:
 33633              	.LBE4464:
5349:src/xeq.c     **** 		}
 33634              		.loc 1 5349 4 is_stmt 1 view .LVU9144
 33635              	.LBB4465:
 33636              	.LBI4465:
5572:src/xeq.c     **** 	Running = 0;
 33637              		.loc 1 5572 6 view .LVU9145
 33638              	.LBB4466:
5573:src/xeq.c     **** }
 33639              		.loc 1 5573 2 view .LVU9146
5573:src/xeq.c     **** }
 33640              		.loc 1 5573 10 is_stmt 0 view .LVU9147
 33641 0070 0023     		movs	r3, #0
 33642 0072 C8F80030 		str	r3, [r8]
5574:src/xeq.c     **** 
 33643              		.loc 1 5574 1 view .LVU9148
 33644 0076 D3E7     		b	.L2434
 33645              	.LVL2631:
 33646              	.L2443:
5574:src/xeq.c     **** 
 33647              		.loc 1 5574 1 view .LVU9149
 33648              	.LBE4466:
 33649              	.LBE4465:
5331:src/xeq.c     **** 
 33650              		.loc 1 5331 3 is_stmt 1 view .LVU9150
 33651 0078 FFF7FEFF 		bl	decpc
 33652              	.LVL2632:
5333:src/xeq.c     **** 		// Display the step
 33653              		.loc 1 5333 2 view .LVU9151
5333:src/xeq.c     **** 		// Display the step
 33654              		.loc 1 5333 6 is_stmt 0 view .LVU9152
 33655 007c A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5333:src/xeq.c     **** 		// Display the step
 33656              		.loc 1 5333 5 view .LVU9153
 33657 007e 5A06     		lsls	r2, r3, #25
 33658 0080 CED5     		bpl	.L2434
ARM GAS  /tmp/ccjeMhND.s 			page 846


5335:src/xeq.c     **** 		print_step(op);
 33659              		.loc 1 5335 3 is_stmt 1 view .LVU9154
5335:src/xeq.c     **** 		print_step(op);
 33660              		.loc 1 5335 16 is_stmt 0 view .LVU9155
 33661 0082 084B     		ldr	r3, .L2447+8
 33662 0084 1B68     		ldr	r3, [r3]
5335:src/xeq.c     **** 		print_step(op);
 33663              		.loc 1 5335 8 view .LVU9156
 33664 0086 B3F8E007 		ldrh	r0, [r3, #2016]
 33665 008a FFF7FEFF 		bl	getprog
 33666              	.LVL2633:
5336:src/xeq.c     **** 		if (kind == 1) {
 33667              		.loc 1 5336 3 is_stmt 1 view .LVU9157
5357:src/xeq.c     **** 
 33668              		.loc 1 5357 1 is_stmt 0 view .LVU9158
 33669 008e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 33670              		.cfi_remember_state
 33671              		.cfi_restore 14
 33672              		.cfi_restore 8
 33673              		.cfi_restore 7
 33674              		.cfi_restore 6
 33675              		.cfi_restore 5
 33676              		.cfi_restore 4
 33677              		.cfi_def_cfa_offset 0
5336:src/xeq.c     **** 		if (kind == 1) {
 33678              		.loc 1 5336 3 view .LVU9159
 33679 0092 FFF7FEBF 		b	print_step
 33680              	.LVL2634:
 33681              	.L2446:
 33682              		.cfi_restore_state
 33683              	.LBB4467:
 33684              	.LBB4462:
5267:src/xeq.c     **** }
 33685              		.loc 1 5267 3 is_stmt 1 view .LVU9160
 33686 0096 FFF7FEFF 		bl	xeq_xrom2
 33687              	.LVL2635:
 33688 009a E9E7     		b	.L2441
 33689              	.L2448:
 33690              		.align	2
 33691              	.L2447:
 33692 009c 00000000 		.word	StateWhileOn
 33693 00a0 00000000 		.word	OpCode
 33694 00a4 00000000 		.word	main_ram
 33695 00a8 00000000 		.word	Running
 33696              	.LBE4462:
 33697              	.LBE4467:
 33698              		.cfi_endproc
 33699              	.LFE251:
 33701              		.section	.text.init_34s,"ax",%progbits
 33702              		.align	1
 33703              		.p2align 2,,3
 33704              		.global	init_34s
 33705              		.syntax unified
 33706              		.thumb
 33707              		.thumb_func
 33708              		.fpu fpv4-sp-d16
 33710              	init_34s:
ARM GAS  /tmp/ccjeMhND.s 			page 847


 33711              	.LFB268:
6102:src/xeq.c     **** 
6103:src/xeq.c     **** 
6104:src/xeq.c     **** /*
6105:src/xeq.c     ****  *  Debugging output for the console version
6106:src/xeq.c     ****  */
6107:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE) && !defined(WP34STEST)
6108:src/xeq.c     **** extern unsigned char remap_chars(unsigned char ch);
6109:src/xeq.c     **** 
6110:src/xeq.c     **** static int compare(s_opcode a1, s_opcode a2, int cata) {
6111:src/xeq.c     **** 	char b1[16], b2[16];
6112:src/xeq.c     **** 	const unsigned char *s1, *s2;
6113:src/xeq.c     **** 	int i;
6114:src/xeq.c     **** 
6115:src/xeq.c     **** 	xset(b1, 0, sizeof(b1));
6116:src/xeq.c     **** 	xset(b2, 0, sizeof(b2));
6117:src/xeq.c     **** 	s1 = (unsigned char *)catcmd(a1, b1);
6118:src/xeq.c     **** 	s2 = (unsigned char *)catcmd(a2, b2);
6119:src/xeq.c     **** 	if (*s1 == COMPLEX_PREFIX) s1++;
6120:src/xeq.c     **** 	if (*s2 == COMPLEX_PREFIX) s2++;
6121:src/xeq.c     **** 
6122:src/xeq.c     **** 	for (i=0;;i++) {
6123:src/xeq.c     **** 		unsigned char c1 = *s1++;
6124:src/xeq.c     **** 		unsigned char c2 = *s2++;
6125:src/xeq.c     **** 		c1 = remap_chars(c1);
6126:src/xeq.c     **** 		c2 = remap_chars(c2);
6127:src/xeq.c     **** 
6128:src/xeq.c     **** 		if (c1 != c2) {
6129:src/xeq.c     **** 			if (c1 > c2) {
6130:src/xeq.c     **** 				return 1;
6131:src/xeq.c     **** 			}
6132:src/xeq.c     **** 			return 0;
6133:src/xeq.c     **** 		} else if (c1 == '\0')
6134:src/xeq.c     **** 			break;
6135:src/xeq.c     **** 	}
6136:src/xeq.c     **** 	return 0;
6137:src/xeq.c     **** }
6138:src/xeq.c     **** 
6139:src/xeq.c     **** static void check_cat(const enum catalogues cata, const char *name) {
6140:src/xeq.c     **** 	int i;
6141:src/xeq.c     **** 	char b1[16], b2[16];
6142:src/xeq.c     **** 	const int oldcata = State2.catalogue;
6143:src/xeq.c     **** 	int n;
6144:src/xeq.c     **** 
6145:src/xeq.c     **** 	State2.catalogue = cata;
6146:src/xeq.c     **** 	n = current_catalogue_max();
6147:src/xeq.c     **** 	for (i=1; i<n; i++) {
6148:src/xeq.c     **** 		opcode cold = current_catalogue(i-1);
6149:src/xeq.c     **** 		opcode c = current_catalogue(i);
6150:src/xeq.c     **** 		if (compare(cold, c, cata))
6151:src/xeq.c     **** 			error("catalogue %s row %04x / %04x  %d / %d: %04o / %04o (%s / %s)", name, cold, c, i-1, i,
6152:src/xeq.c     **** 					0xff & cold, 0xff & c,
6153:src/xeq.c     **** 					catcmd(cold, b1), catcmd(c, b2));
6154:src/xeq.c     **** 	}
6155:src/xeq.c     **** 	State2.catalogue = oldcata;
6156:src/xeq.c     **** }
6157:src/xeq.c     **** 
ARM GAS  /tmp/ccjeMhND.s 			page 848


6158:src/xeq.c     **** static void check_const_cat(void) {
6159:src/xeq.c     **** 	int i;
6160:src/xeq.c     **** 	char b1[16], b2[16];
6161:src/xeq.c     **** 	char p1[64], p2[64];
6162:src/xeq.c     **** 
6163:src/xeq.c     **** 	for (i=1; i<NUM_CONSTS_CAT; i++) {
6164:src/xeq.c     **** 		if (compare(CONST(i-1), CONST(i), 0)) {
6165:src/xeq.c     **** 			prettify(catcmd(CONST(i-1), b1), p1, 0);
6166:src/xeq.c     **** 			prettify(catcmd(CONST(i), b2), p2, 0);
6167:src/xeq.c     **** 			error("constants row %d / %d: %s / %s", i, i+1, p1, p2);
6168:src/xeq.c     **** 		}
6169:src/xeq.c     **** 	}
6170:src/xeq.c     **** }
6171:src/xeq.c     **** 
6172:src/xeq.c     **** static void bad_table(const char *t, int row, const char *n, int nlen) {
6173:src/xeq.c     **** 	char buf[64], name[20];
6174:src/xeq.c     **** 	int i;
6175:src/xeq.c     **** 
6176:src/xeq.c     **** 	for (i=0; i<nlen; i++)
6177:src/xeq.c     **** 		name[i] = n[i];
6178:src/xeq.c     **** 	name[nlen] = '\0';
6179:src/xeq.c     **** 	prettify(name, buf, 0);
6180:src/xeq.c     **** 	error("%s table row %d: %6s", t, row, buf);
6181:src/xeq.c     **** }
6182:src/xeq.c     **** 
6183:src/xeq.c     **** #endif
6184:src/xeq.c     **** 
6185:src/xeq.c     **** /* Main initialisation routine that sets things up for us.
6186:src/xeq.c     ****  * Returns a nonzero result if it has cleared ram.
6187:src/xeq.c     ****  */
6188:src/xeq.c     **** int init_34s(void)
6189:src/xeq.c     **** {
 33712              		.loc 1 6189 1 view -0
 33713              		.cfi_startproc
 33714              		@ args = 0, pretend = 0, frame = 0
 33715              		@ frame_needed = 0, uses_anonymous_args = 0
6190:src/xeq.c     **** 	const int cleared = checksum_all();
 33716              		.loc 1 6190 2 view .LVU9162
6189:src/xeq.c     **** 	const int cleared = checksum_all();
 33717              		.loc 1 6189 1 is_stmt 0 view .LVU9163
 33718 0000 10B5     		push	{r4, lr}
 33719              		.cfi_def_cfa_offset 8
 33720              		.cfi_offset 4, -8
 33721              		.cfi_offset 14, -4
 33722              		.loc 1 6190 22 view .LVU9164
 33723 0002 FFF7FEFF 		bl	checksum_ram
 33724              	.LVL2636:
6191:src/xeq.c     **** 	if (cleared) {
 33725              		.loc 1 6191 2 is_stmt 1 view .LVU9165
 33726              		.loc 1 6191 5 is_stmt 0 view .LVU9166
 33727 0006 0446     		mov	r4, r0
 33728 0008 58B9     		cbnz	r0, .L2455
 33729              	.LVL2637:
 33730              	.L2450:
6192:src/xeq.c     **** 		reset();
6193:src/xeq.c     **** 	}
6194:src/xeq.c     **** 	init_state();
ARM GAS  /tmp/ccjeMhND.s 			page 849


 33731              		.loc 1 6194 2 is_stmt 1 view .LVU9167
 33732 000a FFF7FEFF 		bl	init_state
 33733              	.LVL2638:
6195:src/xeq.c     **** 	xeq_init_contexts();
 33734              		.loc 1 6195 2 view .LVU9168
 33735 000e FFF7FEFF 		bl	xeq_init_contexts
 33736              	.LVL2639:
6196:src/xeq.c     **** 	ShowRPN = 1;
 33737              		.loc 1 6196 2 view .LVU9169
 33738              		.loc 1 6196 10 is_stmt 0 view .LVU9170
 33739 0012 054B     		ldr	r3, .L2456
 33740 0014 0122     		movs	r2, #1
6197:src/xeq.c     **** 	set_dot(RPN);
 33741              		.loc 1 6197 2 view .LVU9171
 33742 0016 8D20     		movs	r0, #141
6196:src/xeq.c     **** 	ShowRPN = 1;
 33743              		.loc 1 6196 10 view .LVU9172
 33744 0018 1A60     		str	r2, [r3]
 33745              		.loc 1 6197 2 is_stmt 1 view .LVU9173
 33746 001a FFF7FEFF 		bl	set_dot
 33747              	.LVL2640:
6198:src/xeq.c     **** 
6199:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
6200:src/xeq.c     **** 	StopWatchRunning = 0;
6201:src/xeq.c     **** #endif
6202:src/xeq.c     **** #if defined(CONSOLE) && !defined(WP34STEST) && defined(DEBUG)
6203:src/xeq.c     **** 	{
6204:src/xeq.c     **** 		int i;
6205:src/xeq.c     **** 	/* Sanity check the function table indices.
6206:src/xeq.c     **** 	 * These indicies must correspond exactly with the enum definition.
6207:src/xeq.c     **** 	 * This code validates that this is true and prints error messages
6208:src/xeq.c     **** 	 * if it isn't.
6209:src/xeq.c     **** 	 */
6210:src/xeq.c     **** 	for (i=0; i<NUM_MONADIC; i++)
6211:src/xeq.c     **** 		if (monfuncs[i].n != i)
6212:src/xeq.c     **** 			bad_table("monadic function", i, monfuncs[i].fname, NAME_LEN);
6213:src/xeq.c     **** 	for (i=0; i<NUM_DYADIC; i++)
6214:src/xeq.c     **** 		if (dyfuncs[i].n != i)
6215:src/xeq.c     **** 			bad_table("dyadic function", i, dyfuncs[i].fname, NAME_LEN);
6216:src/xeq.c     **** 	for (i=0; i<NUM_TRIADIC; i++)
6217:src/xeq.c     **** 		if (trifuncs[i].n != i)
6218:src/xeq.c     **** 			bad_table("triadic function", i, trifuncs[i].fname, NAME_LEN);
6219:src/xeq.c     **** 	for (i=0; i<NUM_NILADIC; i++)
6220:src/xeq.c     **** 		if (niladics[i].n != i)
6221:src/xeq.c     **** 			bad_table("niladic function", i, niladics[i].nname, NAME_LEN);
6222:src/xeq.c     **** 	for (i=0; i<NUM_RARG; i++)
6223:src/xeq.c     **** 		if (argcmds[i].n != i)
6224:src/xeq.c     **** 			bad_table("argument command", i, argcmds[i].cmd, NAME_LEN);
6225:src/xeq.c     **** 	for (i=0; i<NUM_MULTI; i++)
6226:src/xeq.c     **** 		if (multicmds[i].n != i)
6227:src/xeq.c     **** 			bad_table("multi command", i, multicmds[i].cmd, NAME_LEN);
6228:src/xeq.c     **** 	check_const_cat();
6229:src/xeq.c     **** 	check_cat(CATALOGUE_COMPLEX, "complex");
6230:src/xeq.c     **** 	check_cat(CATALOGUE_STATS, "statistics");
6231:src/xeq.c     **** 	check_cat(CATALOGUE_SUMS, "summations");
6232:src/xeq.c     **** 	check_cat(CATALOGUE_PROB, "probability");
6233:src/xeq.c     **** 	check_cat(CATALOGUE_PROG, "programme");
ARM GAS  /tmp/ccjeMhND.s 			page 850


6234:src/xeq.c     **** 	check_cat(CATALOGUE_MODE, "mode");
6235:src/xeq.c     **** 	check_cat(CATALOGUE_TEST, "tests");
6236:src/xeq.c     **** 	check_cat(CATALOGUE_INT, "int");
6237:src/xeq.c     **** 	check_cat(CATALOGUE_MATRIX, "matrix");
6238:src/xeq.c     **** 	/*
6239:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA, "alpha");
6240:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_LETTERS, "alpha special upper case letters");
6241:src/xeq.c     **** 	// check_cat(CATALOGUE_ALPHA_LETTERS_LOWER, "alpha special lower letters");
6242:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SUBSCRIPTS, "alpha subscripts");
6243:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SYMBOLS, "alpha symbols");
6244:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_COMPARES, "alpha compares");
6245:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_ARROWS, "alpha arrows");
6246:src/xeq.c     **** 	*/
6247:src/xeq.c     **** 	check_cat(CATALOGUE_CONV, "conversion");
6248:src/xeq.c     **** 	check_cat(CATALOGUE_NORMAL, "float");
6249:src/xeq.c     **** #ifdef INCLUDE_INTERNAL_CATALOGUE
6250:src/xeq.c     **** 	check_cat(CATALOGUE_INTERNAL, "internal");
6251:src/xeq.c     **** #endif
6252:src/xeq.c     ****         if (sizeof(unsigned long long int) != sizeof(UState))
6253:src/xeq.c     ****             error("sizeof register (%u) != sizeof user state (%u)\n", sizeof(unsigned long long int
6254:src/xeq.c     **** 	}
6255:src/xeq.c     **** #endif
6256:src/xeq.c     **** 	return cleared;
 33748              		.loc 1 6256 2 view .LVU9174
6257:src/xeq.c     **** }
 33749              		.loc 1 6257 1 is_stmt 0 view .LVU9175
 33750 001e 2046     		mov	r0, r4
 33751 0020 10BD     		pop	{r4, pc}
 33752              	.LVL2641:
 33753              	.L2455:
6192:src/xeq.c     **** 	}
 33754              		.loc 1 6192 3 is_stmt 1 view .LVU9176
 33755 0022 FFF7FEFF 		bl	reset
 33756              	.LVL2642:
6192:src/xeq.c     **** 	}
 33757              		.loc 1 6192 3 is_stmt 0 view .LVU9177
 33758 0026 F0E7     		b	.L2450
 33759              	.L2457:
 33760              		.align	2
 33761              	.L2456:
 33762 0028 00000000 		.word	ShowRPN
 33763              		.cfi_endproc
 33764              	.LFE268:
 33766              		.section	.rodata.paste_raw_x.str1.4,"aMS",%progbits,1
 33767              		.align	2
 33768              	.LC9:
 33769 0000 0D0A0920 		.ascii	"\015\012\011 :;\000"
 33769      3A3B00
 33770              		.section	.text.paste_raw_x,"ax",%progbits
 33771              		.align	1
 33772              		.p2align 2,,3
 33773              		.global	paste_raw_x
 33774              		.syntax unified
 33775              		.thumb
 33776              		.thumb_func
 33777              		.fpu fpv4-sp-d16
 33779              	paste_raw_x:
ARM GAS  /tmp/ccjeMhND.s 			page 851


 33780              	.LVL2643:
 33781              	.LFB269:
6258:src/xeq.c     **** 
6259:src/xeq.c     **** #ifndef REALBUILD
6260:src/xeq.c     **** 
6261:src/xeq.c     **** #include "string.h"
6262:src/xeq.c     **** 
6263:src/xeq.c     **** void paste_raw_x(const char *in)
6264:src/xeq.c     **** {
 33782              		.loc 1 6264 1 is_stmt 1 view -0
 33783              		.cfi_startproc
 33784              		@ args = 0, pretend = 0, frame = 40
 33785              		@ frame_needed = 0, uses_anonymous_args = 0
6265:src/xeq.c     **** 	char *buffer = strdup( in );
 33786              		.loc 1 6265 2 view .LVU9179
6264:src/xeq.c     **** 	char *buffer = strdup( in );
 33787              		.loc 1 6264 1 is_stmt 0 view .LVU9180
 33788 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 33789              		.cfi_def_cfa_offset 32
 33790              		.cfi_offset 4, -32
 33791              		.cfi_offset 5, -28
 33792              		.cfi_offset 6, -24
 33793              		.cfi_offset 7, -20
 33794              		.cfi_offset 8, -16
 33795              		.cfi_offset 9, -12
 33796              		.cfi_offset 10, -8
 33797              		.cfi_offset 14, -4
 33798 0004 8AB0     		sub	sp, sp, #40
 33799              		.cfi_def_cfa_offset 72
 33800              		.loc 1 6265 17 view .LVU9181
 33801 0006 FFF7FEFF 		bl	strdup
 33802              	.LVL2644:
6266:src/xeq.c     **** 
6267:src/xeq.c     **** 	if ( buffer ) {
 33803              		.loc 1 6267 2 is_stmt 1 view .LVU9182
 33804              		.loc 1 6267 5 is_stmt 0 view .LVU9183
 33805 000a 0028     		cmp	r0, #0
 33806 000c 5BD0     		beq	.L2459
 33807              	.LBB4468:
6268:src/xeq.c     **** 		static const char *delim = "\r\n\t :;";
 33808              		.loc 1 6268 3 is_stmt 1 view .LVU9184
6269:src/xeq.c     **** 		char *p = strtok( buffer, delim );
 33809              		.loc 1 6269 3 view .LVU9185
 33810              		.loc 1 6269 13 is_stmt 0 view .LVU9186
 33811 000e 3749     		ldr	r1, .L2489
 33812 0010 8146     		mov	r9, r0
 33813 0012 FFF7FEFF 		bl	strtok
 33814              	.LVL2645:
 33815              		.loc 1 6269 13 view .LVU9187
 33816 0016 0446     		mov	r4, r0
 33817              	.LVL2646:
6270:src/xeq.c     **** 		process_cmdline();
 33818              		.loc 1 6270 3 is_stmt 1 view .LVU9188
 33819 0018 FFF7FEFF 		bl	process_cmdline
 33820              	.LVL2647:
6271:src/xeq.c     **** 		while ( p ) {
 33821              		.loc 1 6271 3 view .LVU9189
ARM GAS  /tmp/ccjeMhND.s 			page 852


 33822              		.loc 1 6271 9 view .LVU9190
 33823 001c 002C     		cmp	r4, #0
 33824 001e 4FD0     		beq	.L2467
 33825 0020 334E     		ldr	r6, .L2489+4
 33826              	.LBB4469:
 33827              	.LBB4470:
6272:src/xeq.c     **** 			char *pp = strchr( p, ',' );
6273:src/xeq.c     **** 			if ( pp ) {
6274:src/xeq.c     **** 				*pp = '.';
6275:src/xeq.c     **** 			}
6276:src/xeq.c     **** 			if (is_intmode()) {
6277:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
6278:src/xeq.c     **** 				lift_if_enabled();
6279:src/xeq.c     **** 				set_lift();
6280:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
6281:src/xeq.c     **** 			} else {
6282:src/xeq.c     **** 				decNumber x;
6283:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 33828              		.loc 1 6283 5 is_stmt 0 view .LVU9191
 33829 0022 DFF8D880 		ldr	r8, .L2489+16
 33830              	.LBB4471:
 33831              	.LBB4472:
 33832              	.LBB4473:
 33833              	.LBB4474:
 735:src/xeq.c     **** }
 33834              		.loc 1 735 15 view .LVU9192
 33835 0026 334D     		ldr	r5, .L2489+8
 33836              	.LBE4474:
 33837              	.LBE4473:
 33838              	.LBE4472:
 33839              	.LBE4471:
 33840              	.LBE4470:
6284:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
6285:src/xeq.c     **** 					lift_if_enabled();
6286:src/xeq.c     **** 					set_lift();
6287:src/xeq.c     **** 					setX(&x);
6288:src/xeq.c     **** 				}
6289:src/xeq.c     **** 				else {
6290:src/xeq.c     **** 					error_message(Error);
6291:src/xeq.c     **** 					Error = 0;
6292:src/xeq.c     **** 					break;
6293:src/xeq.c     **** 				}
6294:src/xeq.c     **** 			}
6295:src/xeq.c     **** 			p = strtok( NULL, delim );
 33841              		.loc 1 6295 8 view .LVU9193
 33842 0028 304F     		ldr	r7, .L2489
 33843 002a 21E0     		b	.L2468
 33844              	.LVL2648:
 33845              	.L2487:
 33846              	.LBB4493:
6277:src/xeq.c     **** 				lift_if_enabled();
 33847              		.loc 1 6277 5 is_stmt 1 view .LVU9194
6277:src/xeq.c     **** 				lift_if_enabled();
 33848              		.loc 1 6277 31 is_stmt 0 view .LVU9195
 33849 002c 94F800A0 		ldrb	r10, [r4]	@ zero_extendqisi2
 33850              	.LBB4494:
 33851              	.LBB4495:
ARM GAS  /tmp/ccjeMhND.s 			page 853


 33852              	.LBB4496:
 33853              	.LBB4497:
 735:src/xeq.c     **** }
 33854              		.loc 1 735 15 view .LVU9196
 33855 0030 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 33856              	.LBE4497:
 33857              	.LBE4496:
 33858              	.LBE4495:
 33859              	.LBE4494:
6277:src/xeq.c     **** 				lift_if_enabled();
 33860              		.loc 1 6277 31 view .LVU9197
 33861 0032 AAF12D0A 		sub	r10, r10, #45
 33862 0036 BAFA8AFA 		clz	r10, r10
 33863              	.LBB4503:
 33864              	.LBB4500:
 739:src/xeq.c     **** 		lift();
 33865              		.loc 1 739 5 view .LVU9198
 33866 003a 5A06     		lsls	r2, r3, #25
 33867              	.LBE4500:
 33868              	.LBE4503:
6277:src/xeq.c     **** 				lift_if_enabled();
 33869              		.loc 1 6277 31 view .LVU9199
 33870 003c 4FEA5A1A 		lsr	r10, r10, #5
 33871              	.LVL2649:
6278:src/xeq.c     **** 				set_lift();
 33872              		.loc 1 6278 5 is_stmt 1 view .LVU9200
 33873              	.LBB4504:
 33874              	.LBI4494:
 738:src/xeq.c     **** 	if (get_lift())
 33875              		.loc 1 738 6 view .LVU9201
 33876              	.LBB4501:
 739:src/xeq.c     **** 		lift();
 33877              		.loc 1 739 2 view .LVU9202
 33878              	.LBB4499:
 33879              	.LBI4496:
 734:src/xeq.c     **** 	return State2.state_lift;
 33880              		.loc 1 734 12 view .LVU9203
 33881              	.LBB4498:
 735:src/xeq.c     **** }
 33882              		.loc 1 735 2 view .LVU9204
 33883              	.LBE4498:
 33884              	.LBE4499:
 739:src/xeq.c     **** 		lift();
 33885              		.loc 1 739 5 is_stmt 0 view .LVU9205
 33886 0040 46D4     		bmi	.L2486
 33887              	.LVL2650:
 33888              	.L2463:
 739:src/xeq.c     **** 		lift();
 33889              		.loc 1 739 5 view .LVU9206
 33890              	.LBE4501:
 33891              	.LBE4504:
6279:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
 33892              		.loc 1 6279 5 is_stmt 1 view .LVU9207
 33893              	.LBB4505:
 33894              	.LBI4505:
 748:src/xeq.c     ****     State2.state_lift = 1;
 33895              		.loc 1 748 6 view .LVU9208
ARM GAS  /tmp/ccjeMhND.s 			page 854


 33896              	.LBB4506:
 749:src/xeq.c     **** }
 33897              		.loc 1 749 5 view .LVU9209
 749:src/xeq.c     **** }
 33898              		.loc 1 749 23 is_stmt 0 view .LVU9210
 33899 0042 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 33900 0044 43F04003 		orr	r3, r3, #64
 33901 0048 EB75     		strb	r3, [r5, #23]
 33902              	.LBE4506:
 33903              	.LBE4505:
6280:src/xeq.c     **** 			} else {
 33904              		.loc 1 6280 5 is_stmt 1 view .LVU9211
6280:src/xeq.c     **** 			} else {
 33905              		.loc 1 6280 50 is_stmt 0 view .LVU9212
 33906 004a FFF7FEFF 		bl	int_base
 33907              	.LVL2651:
6280:src/xeq.c     **** 			} else {
 33908              		.loc 1 6280 37 view .LVU9213
 33909 004e 5444     		add	r4, r4, r10
 33910              	.LVL2652:
6280:src/xeq.c     **** 			} else {
 33911              		.loc 1 6280 50 view .LVU9214
 33912 0050 0246     		mov	r2, r0
6280:src/xeq.c     **** 			} else {
 33913              		.loc 1 6280 5 view .LVU9215
 33914 0052 0021     		movs	r1, #0
 33915 0054 2046     		mov	r0, r4
 33916 0056 FFF7FEFF 		bl	strtoull
 33917              	.LVL2653:
 33918 005a 5246     		mov	r2, r10
 33919 005c FFF7FEFF 		bl	build_value
 33920              	.LVL2654:
 33921 0060 FFF7FEFF 		bl	setX_int
 33922              	.LVL2655:
 33923              	.LBE4493:
 33924              		.loc 1 6295 4 is_stmt 1 view .LVU9216
 33925              		.loc 1 6295 8 is_stmt 0 view .LVU9217
 33926 0064 3946     		mov	r1, r7
 33927 0066 0020     		movs	r0, #0
 33928 0068 FFF7FEFF 		bl	strtok
 33929              	.LVL2656:
 33930              		.loc 1 6295 8 view .LVU9218
 33931              	.LBE4469:
6271:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 33932              		.loc 1 6271 9 is_stmt 1 view .LVU9219
 33933 006c 0446     		mov	r4, r0
 33934 006e 38B3     		cbz	r0, .L2467
 33935              	.LVL2657:
 33936              	.L2468:
 33937              	.LBB4511:
6272:src/xeq.c     **** 			if ( pp ) {
 33938              		.loc 1 6272 4 view .LVU9220
6272:src/xeq.c     **** 			if ( pp ) {
 33939              		.loc 1 6272 15 is_stmt 0 view .LVU9221
 33940 0070 2C21     		movs	r1, #44
 33941 0072 2046     		mov	r0, r4
 33942 0074 FFF7FEFF 		bl	strchr
ARM GAS  /tmp/ccjeMhND.s 			page 855


 33943              	.LVL2658:
6273:src/xeq.c     **** 				*pp = '.';
 33944              		.loc 1 6273 4 is_stmt 1 view .LVU9222
6273:src/xeq.c     **** 				*pp = '.';
 33945              		.loc 1 6273 7 is_stmt 0 view .LVU9223
 33946 0078 08B1     		cbz	r0, .L2461
6274:src/xeq.c     **** 			}
 33947              		.loc 1 6274 5 is_stmt 1 view .LVU9224
6274:src/xeq.c     **** 			}
 33948              		.loc 1 6274 9 is_stmt 0 view .LVU9225
 33949 007a 2E23     		movs	r3, #46
 33950 007c 0370     		strb	r3, [r0]
 33951              	.L2461:
6276:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 33952              		.loc 1 6276 4 is_stmt 1 view .LVU9226
6276:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 33953              		.loc 1 6276 8 is_stmt 0 view .LVU9227
 33954 007e 3368     		ldr	r3, [r6]
 33955 0080 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
6276:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 33956              		.loc 1 6276 7 view .LVU9228
 33957 0084 13F0010A 		ands	r10, r3, #1
 33958 0088 D0D1     		bne	.L2487
 33959              	.LBB4508:
6282:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 33960              		.loc 1 6282 5 is_stmt 1 view .LVU9229
6283:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 33961              		.loc 1 6283 5 view .LVU9230
 33962 008a 2146     		mov	r1, r4
 33963 008c 01A8     		add	r0, sp, #4
 33964              	.LVL2659:
6283:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 33965              		.loc 1 6283 5 is_stmt 0 view .LVU9231
 33966 008e 4246     		mov	r2, r8
 33967 0090 FFF7FEFF 		bl	decNumberFromString
 33968              	.LVL2660:
6284:src/xeq.c     **** 					lift_if_enabled();
 33969              		.loc 1 6284 5 is_stmt 1 view .LVU9232
6284:src/xeq.c     **** 					lift_if_enabled();
 33970              		.loc 1 6284 11 is_stmt 0 view .LVU9233
 33971 0094 01A8     		add	r0, sp, #4
 33972 0096 FFF7FEFF 		bl	check_special
 33973              	.LVL2661:
6284:src/xeq.c     **** 					lift_if_enabled();
 33974              		.loc 1 6284 8 view .LVU9234
 33975 009a F8B9     		cbnz	r0, .L2465
6285:src/xeq.c     **** 					set_lift();
 33976              		.loc 1 6285 6 is_stmt 1 view .LVU9235
 33977              	.LBB4479:
 33978              	.LBI4471:
 738:src/xeq.c     **** 	if (get_lift())
 33979              		.loc 1 738 6 view .LVU9236
 33980              	.LBB4477:
 739:src/xeq.c     **** 		lift();
 33981              		.loc 1 739 2 view .LVU9237
 33982              	.LBB4476:
 33983              	.LBI4473:
ARM GAS  /tmp/ccjeMhND.s 			page 856


 734:src/xeq.c     **** 	return State2.state_lift;
 33984              		.loc 1 734 12 view .LVU9238
 33985              	.LBB4475:
 735:src/xeq.c     **** }
 33986              		.loc 1 735 2 view .LVU9239
 735:src/xeq.c     **** }
 33987              		.loc 1 735 15 is_stmt 0 view .LVU9240
 33988 009c EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 33989              	.LBE4475:
 33990              	.LBE4476:
 739:src/xeq.c     **** 		lift();
 33991              		.loc 1 739 5 view .LVU9241
 33992 009e 5B06     		lsls	r3, r3, #25
 33993 00a0 19D4     		bmi	.L2488
 33994              	.L2466:
 33995              	.LBE4477:
 33996              	.LBE4479:
6286:src/xeq.c     **** 					setX(&x);
 33997              		.loc 1 6286 6 is_stmt 1 view .LVU9242
 33998              	.LBB4480:
 33999              	.LBI4480:
 748:src/xeq.c     ****     State2.state_lift = 1;
 34000              		.loc 1 748 6 view .LVU9243
 34001              	.LBB4481:
 749:src/xeq.c     **** }
 34002              		.loc 1 749 5 view .LVU9244
 749:src/xeq.c     **** }
 34003              		.loc 1 749 23 is_stmt 0 view .LVU9245
 34004 00a2 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34005              	.LBE4481:
 34006              	.LBE4480:
 34007              	.LBB4484:
 34008              	.LBB4485:
 810:src/xeq.c     **** }
 34009              		.loc 1 810 2 view .LVU9246
 34010 00a4 01A9     		add	r1, sp, #4
 34011              	.LBE4485:
 34012              	.LBE4484:
 34013              	.LBB4488:
 34014              	.LBB4482:
 749:src/xeq.c     **** }
 34015              		.loc 1 749 23 view .LVU9247
 34016 00a6 43F04003 		orr	r3, r3, #64
 34017              	.LBE4482:
 34018              	.LBE4488:
 34019              	.LBB4489:
 34020              	.LBB4486:
 810:src/xeq.c     **** }
 34021              		.loc 1 810 2 view .LVU9248
 34022 00aa 6420     		movs	r0, #100
 34023              	.LBE4486:
 34024              	.LBE4489:
 34025              	.LBB4490:
 34026              	.LBB4483:
 749:src/xeq.c     **** }
 34027              		.loc 1 749 23 view .LVU9249
 34028 00ac EB75     		strb	r3, [r5, #23]
ARM GAS  /tmp/ccjeMhND.s 			page 857


 34029              	.LBE4483:
 34030              	.LBE4490:
6287:src/xeq.c     **** 				}
 34031              		.loc 1 6287 6 is_stmt 1 view .LVU9250
 34032              	.LVL2662:
 34033              	.LBB4491:
 34034              	.LBI4484:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 34035              		.loc 1 809 6 view .LVU9251
 34036              	.LBB4487:
 810:src/xeq.c     **** }
 34037              		.loc 1 810 2 view .LVU9252
 34038 00ae FFF7FEFF 		bl	setRegister
 34039              	.LVL2663:
 810:src/xeq.c     **** }
 34040              		.loc 1 810 2 is_stmt 0 view .LVU9253
 34041              	.LBE4487:
 34042              	.LBE4491:
 34043              	.LBE4508:
 34044              		.loc 1 6295 4 is_stmt 1 view .LVU9254
 34045              		.loc 1 6295 8 is_stmt 0 view .LVU9255
 34046 00b2 3946     		mov	r1, r7
 34047 00b4 0020     		movs	r0, #0
 34048 00b6 FFF7FEFF 		bl	strtok
 34049              	.LVL2664:
 34050              		.loc 1 6295 8 view .LVU9256
 34051              	.LBE4511:
6271:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 34052              		.loc 1 6271 9 is_stmt 1 view .LVU9257
 34053 00ba 0446     		mov	r4, r0
 34054 00bc 0028     		cmp	r0, #0
 34055 00be D7D1     		bne	.L2468
 34056              	.LVL2665:
 34057              	.L2467:
6296:src/xeq.c     **** 		}
6297:src/xeq.c     **** 		free( buffer );
 34058              		.loc 1 6297 3 view .LVU9258
 34059 00c0 4846     		mov	r0, r9
 34060 00c2 FFF7FEFF 		bl	free
 34061              	.LVL2666:
 34062              	.L2459:
 34063              		.loc 1 6297 3 is_stmt 0 view .LVU9259
 34064              	.LBE4468:
6298:src/xeq.c     **** 	}
6299:src/xeq.c     **** 	display();
 34065              		.loc 1 6299 2 is_stmt 1 view .LVU9260
 34066 00c6 FFF7FEFF 		bl	display
 34067              	.LVL2667:
6300:src/xeq.c     **** }
 34068              		.loc 1 6300 1 is_stmt 0 view .LVU9261
 34069 00ca 0AB0     		add	sp, sp, #40
 34070              		.cfi_remember_state
 34071              		.cfi_def_cfa_offset 32
 34072              		@ sp needed
 34073 00cc BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 34074              	.LVL2668:
 34075              	.L2486:
ARM GAS  /tmp/ccjeMhND.s 			page 858


 34076              		.cfi_restore_state
 34077              	.LBB4513:
 34078              	.LBB4512:
 34079              	.LBB4509:
 34080              	.LBB4507:
 34081              	.LBB4502:
 740:src/xeq.c     **** }
 34082              		.loc 1 740 3 is_stmt 1 view .LVU9262
 34083 00d0 FFF7FEFF 		bl	lift
 34084              	.LVL2669:
 740:src/xeq.c     **** }
 34085              		.loc 1 740 3 is_stmt 0 view .LVU9263
 34086 00d4 B5E7     		b	.L2463
 34087              	.LVL2670:
 34088              	.L2488:
 740:src/xeq.c     **** }
 34089              		.loc 1 740 3 view .LVU9264
 34090              	.LBE4502:
 34091              	.LBE4507:
 34092              	.LBE4509:
 34093              	.LBB4510:
 34094              	.LBB4492:
 34095              	.LBB4478:
 740:src/xeq.c     **** }
 34096              		.loc 1 740 3 is_stmt 1 view .LVU9265
 34097 00d6 FFF7FEFF 		bl	lift
 34098              	.LVL2671:
 34099 00da E2E7     		b	.L2466
 34100              	.L2465:
 34101              	.LBE4478:
 34102              	.LBE4492:
6290:src/xeq.c     **** 					Error = 0;
 34103              		.loc 1 6290 6 view .LVU9266
 34104 00dc 064C     		ldr	r4, .L2489+12
 34105              	.LVL2672:
6290:src/xeq.c     **** 					Error = 0;
 34106              		.loc 1 6290 6 is_stmt 0 view .LVU9267
 34107 00de 2068     		ldr	r0, [r4]
 34108 00e0 FFF7FEFF 		bl	error_message
 34109              	.LVL2673:
6291:src/xeq.c     **** 					break;
 34110              		.loc 1 6291 6 is_stmt 1 view .LVU9268
6291:src/xeq.c     **** 					break;
 34111              		.loc 1 6291 12 is_stmt 0 view .LVU9269
 34112 00e4 C4F800A0 		str	r10, [r4]
6292:src/xeq.c     **** 				}
 34113              		.loc 1 6292 6 is_stmt 1 view .LVU9270
 34114 00e8 EAE7     		b	.L2467
 34115              	.L2490:
 34116 00ea 00BF     		.align	2
 34117              	.L2489:
 34118 00ec 00000000 		.word	.LC9
 34119 00f0 00000000 		.word	main_ram
 34120 00f4 00000000 		.word	StateWhileOn
 34121 00f8 00000000 		.word	Error
 34122 00fc 00000000 		.word	Ctx
 34123              	.LBE4510:
ARM GAS  /tmp/ccjeMhND.s 			page 859


 34124              	.LBE4512:
 34125              	.LBE4513:
 34126              		.cfi_endproc
 34127              	.LFE269:
 34129              		.global	__aeabi_uldivmod
 34130              		.section	.rodata.fill_buffer_from_raw_x.str1.4,"aMS",%progbits,1
 34131              		.align	2
 34132              	.LC10:
 34133 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 34133      34353637 
 34133      38394142 
 34133      43444546 
 34133      00
 34134              		.section	.text.fill_buffer_from_raw_x,"ax",%progbits
 34135              		.align	1
 34136              		.p2align 2,,3
 34137              		.global	fill_buffer_from_raw_x
 34138              		.syntax unified
 34139              		.thumb
 34140              		.thumb_func
 34141              		.fpu fpv4-sp-d16
 34143              	fill_buffer_from_raw_x:
 34144              	.LVL2674:
 34145              	.LFB270:
6301:src/xeq.c     **** 
6302:src/xeq.c     **** char* fill_buffer_from_raw_x(char *buffer)
6303:src/xeq.c     **** {
 34146              		.loc 1 6303 1 view -0
 34147              		.cfi_startproc
 34148              		@ args = 0, pretend = 0, frame = 40
 34149              		@ frame_needed = 0, uses_anonymous_args = 0
6304:src/xeq.c     **** 	process_cmdline();
 34150              		.loc 1 6304 2 view .LVU9272
6303:src/xeq.c     **** 	process_cmdline();
 34151              		.loc 1 6303 1 is_stmt 0 view .LVU9273
 34152 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 34153              		.cfi_def_cfa_offset 36
 34154              		.cfi_offset 4, -36
 34155              		.cfi_offset 5, -32
 34156              		.cfi_offset 6, -28
 34157              		.cfi_offset 7, -24
 34158              		.cfi_offset 8, -20
 34159              		.cfi_offset 9, -16
 34160              		.cfi_offset 10, -12
 34161              		.cfi_offset 11, -8
 34162              		.cfi_offset 14, -4
6305:src/xeq.c     **** 	if (is_intmode()) {
 34163              		.loc 1 6305 6 view .LVU9274
 34164 0004 2C4D     		ldr	r5, .L2510
6303:src/xeq.c     **** 	process_cmdline();
 34165              		.loc 1 6303 1 view .LVU9275
 34166 0006 8BB0     		sub	sp, sp, #44
 34167              		.cfi_def_cfa_offset 80
6303:src/xeq.c     **** 	process_cmdline();
 34168              		.loc 1 6303 1 view .LVU9276
 34169 0008 0446     		mov	r4, r0
6304:src/xeq.c     **** 	process_cmdline();
ARM GAS  /tmp/ccjeMhND.s 			page 860


 34170              		.loc 1 6304 2 view .LVU9277
 34171 000a FFF7FEFF 		bl	process_cmdline
 34172              	.LVL2675:
 34173              		.loc 1 6305 2 is_stmt 1 view .LVU9278
 34174              		.loc 1 6305 6 is_stmt 0 view .LVU9279
 34175 000e 2B68     		ldr	r3, [r5]
 34176 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 34177              		.loc 1 6305 5 view .LVU9280
 34178 0014 DA07     		lsls	r2, r3, #31
 34179 0016 2CD5     		bpl	.L2492
 34180              	.LBB4514:
6306:src/xeq.c     **** 		int sgn;
 34181              		.loc 1 6306 3 is_stmt 1 view .LVU9281
6307:src/xeq.c     **** 		unsigned long long int x = extract_value(get_reg_n_int(regX_idx), &sgn);
 34182              		.loc 1 6307 3 view .LVU9282
 34183              		.loc 1 6307 30 is_stmt 0 view .LVU9283
 34184 0018 6420     		movs	r0, #100
 34185 001a FFF7FEFF 		bl	get_reg_n_int
 34186              	.LVL2676:
 34187 001e 01AA     		add	r2, sp, #4
 34188 0020 FFF7FEFF 		bl	extract_value
 34189              	.LVL2677:
 34190 0024 0646     		mov	r6, r0
 34191 0026 0F46     		mov	r7, r1
 34192              	.LVL2678:
6308:src/xeq.c     **** 		const int base = int_base();
 34193              		.loc 1 6308 3 is_stmt 1 view .LVU9284
 34194              		.loc 1 6308 20 is_stmt 0 view .LVU9285
 34195 0028 FFF7FEFF 		bl	int_base
 34196              	.LVL2679:
6309:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
6310:src/xeq.c     **** 
6311:src/xeq.c     **** 		*p-- = '\0';
 34197              		.loc 1 6311 8 view .LVU9286
 34198 002c 0023     		movs	r3, #0
 34199              	.LVL2680:
6309:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
 34200              		.loc 1 6309 3 is_stmt 1 view .LVU9287
 34201              		.loc 1 6311 3 view .LVU9288
 34202              		.loc 1 6311 8 is_stmt 0 view .LVU9289
 34203 002e E370     		strb	r3, [r4, #3]
6312:src/xeq.c     **** 		if (x == 0)
 34204              		.loc 1 6312 3 is_stmt 1 view .LVU9290
 34205              		.loc 1 6312 6 is_stmt 0 view .LVU9291
 34206 0030 56EA0703 		orrs	r3, r6, r7
 34207 0034 35D0     		beq	.L2508
 34208 0036 214D     		ldr	r5, .L2510+4
6311:src/xeq.c     **** 		if (x == 0)
 34209              		.loc 1 6311 5 view .LVU9292
 34210 0038 0234     		adds	r4, r4, #2
 34211              	.LVL2681:
6311:src/xeq.c     **** 		if (x == 0)
 34212              		.loc 1 6311 5 view .LVU9293
 34213 003a 8046     		mov	r8, r0
 34214 003c 4FEAE079 		asr	r9, r0, #31
 34215              	.LVL2682:
 34216              	.L2495:
ARM GAS  /tmp/ccjeMhND.s 			page 861


 34217              	.LBB4515:
6313:src/xeq.c     **** 			*p-- = '0'; 
6314:src/xeq.c     **** 		else {
6315:src/xeq.c     **** 			while (x != 0) {
6316:src/xeq.c     **** 				const int n = x % base;
 34218              		.loc 1 6316 5 is_stmt 1 view .LVU9294
 34219 0040 3046     		mov	r0, r6
 34220 0042 3946     		mov	r1, r7
 34221 0044 4246     		mov	r2, r8
 34222 0046 4B46     		mov	r3, r9
 34223 0048 FFF7FEFF 		bl	__aeabi_uldivmod
 34224              	.LVL2683:
6317:src/xeq.c     **** 				x /= base;
 34225              		.loc 1 6317 5 view .LVU9295
 34226 004c BB46     		mov	fp, r7
 34227 004e B246     		mov	r10, r6
 34228              	.LBE4515:
6315:src/xeq.c     **** 				const int n = x % base;
 34229              		.loc 1 6315 10 is_stmt 0 view .LVU9296
 34230 0050 CB45     		cmp	fp, r9
 34231              	.LBB4516:
6318:src/xeq.c     **** 				*p-- = n["0123456789ABCDEF"];
 34232              		.loc 1 6318 10 view .LVU9297
 34233 0052 AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 34234 0054 04F80139 		strb	r3, [r4], #-1
 34235              	.LVL2684:
 34236              		.loc 1 6318 10 view .LVU9298
 34237              	.LBE4516:
6315:src/xeq.c     **** 				const int n = x % base;
 34238              		.loc 1 6315 10 view .LVU9299
 34239 0058 08BF     		it	eq
 34240 005a C245     		cmpeq	r10, r8
 34241              	.LBB4517:
6317:src/xeq.c     **** 				x /= base;
 34242              		.loc 1 6317 7 view .LVU9300
 34243 005c 0646     		mov	r6, r0
 34244              	.LVL2685:
6317:src/xeq.c     **** 				x /= base;
 34245              		.loc 1 6317 7 view .LVU9301
 34246 005e 0F46     		mov	r7, r1
 34247              	.LVL2686:
 34248              		.loc 1 6318 5 is_stmt 1 view .LVU9302
 34249              		.loc 1 6318 5 is_stmt 0 view .LVU9303
 34250              	.LBE4517:
6315:src/xeq.c     **** 				const int n = x % base;
 34251              		.loc 1 6315 10 is_stmt 1 view .LVU9304
 34252 0060 EED2     		bcs	.L2495
6319:src/xeq.c     **** 			}
6320:src/xeq.c     **** 		}
6321:src/xeq.c     **** 		if (sgn)
 34253              		.loc 1 6321 3 view .LVU9305
 34254              		.loc 1 6321 6 is_stmt 0 view .LVU9306
 34255 0062 019B     		ldr	r3, [sp, #4]
 34256 0064 1BB3     		cbz	r3, .L2496
 34257              	.LVL2687:
 34258              	.L2509:
6322:src/xeq.c     **** 			*p = '-';
ARM GAS  /tmp/ccjeMhND.s 			page 862


 34259              		.loc 1 6322 4 is_stmt 1 view .LVU9307
 34260              		.loc 1 6322 7 is_stmt 0 view .LVU9308
 34261 0066 2D23     		movs	r3, #45
 34262 0068 2370     		strb	r3, [r4]
 34263              	.LVL2688:
 34264              	.L2491:
 34265              		.loc 1 6322 7 view .LVU9309
 34266              	.LBE4514:
6323:src/xeq.c     **** 		else
6324:src/xeq.c     **** 			p++;
6325:src/xeq.c     **** 		return p;
6326:src/xeq.c     **** 	} else {
6327:src/xeq.c     **** 		decNumber x;
6328:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
6329:src/xeq.c     **** 		if (UState.fraccomma) {
6330:src/xeq.c     **** 			char *p = strchr(buffer, '.');
6331:src/xeq.c     **** 			if (p != NULL)
6332:src/xeq.c     **** 				*p = ',';
6333:src/xeq.c     **** 		}
6334:src/xeq.c     **** 
6335:src/xeq.c     **** 		return buffer;
6336:src/xeq.c     **** 	}
6337:src/xeq.c     **** }
 34267              		.loc 1 6337 1 view .LVU9310
 34268 006a 2046     		mov	r0, r4
 34269 006c 0BB0     		add	sp, sp, #44
 34270              		.cfi_remember_state
 34271              		.cfi_def_cfa_offset 36
 34272              		@ sp needed
 34273 006e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 34274              	.LVL2689:
 34275              	.L2492:
 34276              		.cfi_restore_state
 34277              	.LBB4518:
6327:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
 34278              		.loc 1 6327 3 is_stmt 1 view .LVU9311
6328:src/xeq.c     **** 		if (UState.fraccomma) {
 34279              		.loc 1 6328 3 view .LVU9312
 34280              	.LBB4519:
 34281              	.LBI4519:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 34282              		.loc 1 805 12 view .LVU9313
 34283              	.LBB4520:
 806:src/xeq.c     **** }
 34284              		.loc 1 806 2 view .LVU9314
 806:src/xeq.c     **** }
 34285              		.loc 1 806 9 is_stmt 0 view .LVU9315
 34286 0072 6421     		movs	r1, #100
 34287 0074 01A8     		add	r0, sp, #4
 34288              	.LVL2690:
 806:src/xeq.c     **** }
 34289              		.loc 1 806 9 view .LVU9316
 34290 0076 FFF7FEFF 		bl	getRegister
 34291              	.LVL2691:
 806:src/xeq.c     **** }
 34292              		.loc 1 806 9 view .LVU9317
 34293              	.LBE4520:
ARM GAS  /tmp/ccjeMhND.s 			page 863


 34294              	.LBE4519:
6328:src/xeq.c     **** 		if (UState.fraccomma) {
 34295              		.loc 1 6328 3 view .LVU9318
 34296 007a 2146     		mov	r1, r4
 34297 007c FFF7FEFF 		bl	decNumberToString
 34298              	.LVL2692:
6329:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 34299              		.loc 1 6329 3 is_stmt 1 view .LVU9319
6329:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 34300              		.loc 1 6329 7 is_stmt 0 view .LVU9320
 34301 0080 2B68     		ldr	r3, [r5]
 34302 0082 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
6329:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 34303              		.loc 1 6329 6 view .LVU9321
 34304 0086 9B06     		lsls	r3, r3, #26
 34305 0088 EFD5     		bpl	.L2491
 34306              	.LBB4521:
6330:src/xeq.c     **** 			if (p != NULL)
 34307              		.loc 1 6330 4 is_stmt 1 view .LVU9322
6330:src/xeq.c     **** 			if (p != NULL)
 34308              		.loc 1 6330 14 is_stmt 0 view .LVU9323
 34309 008a 2E21     		movs	r1, #46
 34310 008c 2046     		mov	r0, r4
 34311 008e FFF7FEFF 		bl	strchr
 34312              	.LVL2693:
6331:src/xeq.c     **** 				*p = ',';
 34313              		.loc 1 6331 4 is_stmt 1 view .LVU9324
6331:src/xeq.c     **** 				*p = ',';
 34314              		.loc 1 6331 7 is_stmt 0 view .LVU9325
 34315 0092 0028     		cmp	r0, #0
 34316 0094 E9D0     		beq	.L2491
6332:src/xeq.c     **** 		}
 34317              		.loc 1 6332 5 is_stmt 1 view .LVU9326
6332:src/xeq.c     **** 		}
 34318              		.loc 1 6332 8 is_stmt 0 view .LVU9327
 34319 0096 2C23     		movs	r3, #44
 34320 0098 0370     		strb	r3, [r0]
 34321              	.LBE4521:
6335:src/xeq.c     **** 	}
 34322              		.loc 1 6335 3 is_stmt 1 view .LVU9328
 34323              	.LBE4518:
 34324              		.loc 1 6337 1 is_stmt 0 view .LVU9329
 34325 009a 2046     		mov	r0, r4
 34326              	.LVL2694:
 34327              		.loc 1 6337 1 view .LVU9330
 34328 009c 0BB0     		add	sp, sp, #44
 34329              		.cfi_remember_state
 34330              		.cfi_def_cfa_offset 36
 34331              		@ sp needed
 34332 009e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 34333              	.LVL2695:
 34334              	.L2508:
 34335              		.cfi_restore_state
 34336              	.LBB4522:
6313:src/xeq.c     **** 		else {
 34337              		.loc 1 6313 4 is_stmt 1 view .LVU9331
6313:src/xeq.c     **** 		else {
ARM GAS  /tmp/ccjeMhND.s 			page 864


 34338              		.loc 1 6313 9 is_stmt 0 view .LVU9332
 34339 00a2 3023     		movs	r3, #48
 34340 00a4 A370     		strb	r3, [r4, #2]
6321:src/xeq.c     **** 			*p = '-';
 34341              		.loc 1 6321 6 view .LVU9333
 34342 00a6 019B     		ldr	r3, [sp, #4]
6313:src/xeq.c     **** 		else {
 34343              		.loc 1 6313 6 view .LVU9334
 34344 00a8 0134     		adds	r4, r4, #1
 34345              	.LVL2696:
6321:src/xeq.c     **** 			*p = '-';
 34346              		.loc 1 6321 3 is_stmt 1 view .LVU9335
6321:src/xeq.c     **** 			*p = '-';
 34347              		.loc 1 6321 6 is_stmt 0 view .LVU9336
 34348 00aa 002B     		cmp	r3, #0
 34349 00ac DBD1     		bne	.L2509
 34350              	.LVL2697:
 34351              	.L2496:
6324:src/xeq.c     **** 		return p;
 34352              		.loc 1 6324 4 is_stmt 1 view .LVU9337
6324:src/xeq.c     **** 		return p;
 34353              		.loc 1 6324 5 is_stmt 0 view .LVU9338
 34354 00ae 0134     		adds	r4, r4, #1
 34355              	.LVL2698:
6325:src/xeq.c     **** 	} else {
 34356              		.loc 1 6325 3 is_stmt 1 view .LVU9339
 34357              	.LBE4522:
 34358              		.loc 1 6337 1 is_stmt 0 view .LVU9340
 34359 00b0 2046     		mov	r0, r4
 34360 00b2 0BB0     		add	sp, sp, #44
 34361              		.cfi_def_cfa_offset 36
 34362              		@ sp needed
 34363 00b4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 34364              	.LVL2699:
 34365              	.L2511:
 34366              		.loc 1 6337 1 view .LVU9341
 34367              		.align	2
 34368              	.L2510:
 34369 00b8 00000000 		.word	main_ram
 34370 00bc 00000000 		.word	.LC10
 34371              		.cfi_endproc
 34372              	.LFE270:
 34374              		.comm	RectPolConv,4,4
 34375              		.comm	StackBase,4,4
 34376              		.comm	RetStk,4,4
 34377              		.comm	ProgFree,4,4
 34378              		.comm	RetStkSize,4,4
 34379              		.comm	TraceBuffer,25,4
 34380              		.comm	Ctx,24,4
 34381              		.comm	UserLocalRegs,4,4
 34382              		.comm	XromUserPc,4,4
 34383              		.comm	ShowRegister,4,4
 34384              		.comm	XeqOpCode,2,2
 34385              		.comm	PcWrapped,4,4
 34386              		.comm	Error,4,4
 34387              		.comm	Busy,4,4
 34388              		.comm	Pause,1,1
ARM GAS  /tmp/ccjeMhND.s 			page 865


 34389              		.comm	JustStopped,4,4
 34390              		.comm	XromRunning,4,4
 34391              		.comm	Running,4,4
 34392              		.global	xrom_targets
 34393              		.section	.rodata
 34394              		.align	2
 34395              		.set	.LANCHOR5,. + 0
 34396              	.LC1:
 34397 0000 0C0C0C0C 		.ascii	"\014\014\014\014\014\014\014\014\014\013\013\013\014"
 34397      0C0C0C0C 
 34397      0C0B0B0B 
 34397      0C
 34398 000d 0C0A0A0C 		.ascii	"\014\012\012\014\014\014\007\010\011\014\014\014\004"
 34398      0C0C0708 
 34398      090C0C0C 
 34398      04
 34399 001a 05060C0C 		.ascii	"\005\006\014\014\014\001\002\003\014\014\014\000\012"
 34399      0C010203 
 34399      0C0C0C00 
 34399      0A
 34400 0027 0C0C     		.ascii	"\014\014"
 34401              		.section	.bss.result.11341,"aw",%nobits
 34402              		.align	2
 34403              		.set	.LANCHOR2,. + 0
 34406              	result.11341:
 34407 0000 00000000 		.space	16
 34407      00000000 
 34407      00000000 
 34407      00000000 
 34408              		.section	.data.RegionTab,"aw"
 34409              		.align	2
 34410              		.set	.LANCHOR0,. + 0
 34413              	RegionTab:
 34414 0000 00000000 		.word	0
 34415 0004 00000000 		.word	0
 34416 0008 00000000 		.word	0
 34417 000c 00000000 		.word	xrom
 34418              		.section	.rodata.StackRegMask,"a"
 34419              		.align	2
 34420              		.set	.LANCHOR3,. + 0
 34423              	StackRegMask:
 34424 0000 0F01     		.short	271
 34425 0002 FF01     		.short	511
 34426              		.section	.rodata.convergence_tolerances,"a"
 34427              		.align	2
 34428              		.set	.LANCHOR7,. + 0
 34431              	convergence_tolerances:
 34432 0000 00000000 		.word	const_1e_14
 34433 0004 00000000 		.word	const_1e_24
 34434 0008 00000000 		.word	const_1e_32
 34435              		.section	.rodata.modes.11081,"a"
 34436              		.align	2
 34437              		.set	.LANCHOR1,. + 0
 34440              	modes.11081:
 34441 0000 03020401 		.ascii	"\003\002\004\001\005\000\006"
 34441      050006
 34442              		.section	.rodata.modes.11551,"a"
ARM GAS  /tmp/ccjeMhND.s 			page 866


 34443              		.align	2
 34444              		.set	.LANCHOR4,. + 0
 34447              	modes.11551:
 34448 0000 02010081 		.ascii	"\002\001\000\201"
 34449              		.section	.rodata.xrom_targets,"a"
 34450              		.align	2
 34451              		.set	.LANCHOR6,. + 0
 34454              	xrom_targets:
 34455 0000 9107     		.short	1937
 34456 0002 B70B     		.short	2999
 34457 0004 4602     		.short	582
 34458 0006 4402     		.short	580
 34459 0008 420A     		.short	2626
 34460 000a 340A     		.short	2612
 34461 000c 100C     		.short	3088
 34462 000e 9C05     		.short	1436
 34463 0010 3B0A     		.short	2619
 34464 0012 5A06     		.short	1626
 34465 0014 6F06     		.short	1647
 34466 0016 6B06     		.short	1643
 34467 0018 6406     		.short	1636
 34468 001a 390A     		.short	2617
 34469 001c 7206     		.short	1650
 34470 001e 7506     		.short	1653
 34471 0020 7706     		.short	1655
 34472 0022 5D06     		.short	1629
 34473 0024 5707     		.short	1879
 34474 0026 4F08     		.short	2127
 34475 0028 EB05     		.short	1515
 34476 002a 0405     		.short	1284
 34477 002c 2907     		.short	1833
 34478 002e 8205     		.short	1410
 34479 0030 9A05     		.short	1434
 34480 0032 EC05     		.short	1516
 34481              		.text
 34482              	.Letext0:
 34483              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 34484              		.file 3 "dmcp/dmcp.h"
 34485              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 34486              		.file 5 "/usr/include/newlib/sys/_types.h"
 34487              		.file 6 "/usr/include/newlib/sys/reent.h"
 34488              		.file 7 "/usr/include/newlib/sys/lock.h"
 34489              		.file 8 "/usr/include/newlib/stdlib.h"
 34490              		.file 9 "src/decNumber/decContext.h"
 34491              		.file 10 "src/decNumber/decNumber.h"
 34492              		.file 11 "src/decNumber/decimal64.h"
 34493              		.file 12 "src/decNumber/decimal128.h"
 34494              		.file 13 "src/xeq.h"
 34495              		.file 14 "src/data.h"
 34496              		.file 15 "src/storage.h"
 34497              		.file 16 "src/stats.h"
 34498              		.file 17 "src/display.h"
 34499              		.file 18 "src/consts.h"
 34500              		.file 19 "src/xrom.h"
 34501              		.file 20 "src/pretty.h"
 34502              		.file 21 "src/xrom_targets.c"
 34503              		.file 22 "src/int.h"
ARM GAS  /tmp/ccjeMhND.s 			page 867


 34504              		.file 23 "/usr/include/newlib/string.h"
 34505              		.file 24 "src/lcd.h"
 34506              		.file 25 "src/decn.h"
 34507              		.file 26 "src/complex.h"
 34508              		.file 27 "/usr/include/newlib/stdio.h"
 34509              		.file 28 "src/alpha.h"
ARM GAS  /tmp/ccjeMhND.s 			page 868


DEFINED SYMBOLS
                            *ABS*:0000000000000000 xeq.c
     /tmp/ccjeMhND.s:18     .text.find_section_bounds:0000000000000000 $t
     /tmp/ccjeMhND.s:26     .text.find_section_bounds:0000000000000000 find_section_bounds
     /tmp/ccjeMhND.s:164    .text.find_section_bounds:0000000000000068 $d
     /tmp/ccjeMhND.s:172    .text.reg_address:0000000000000000 $t
     /tmp/ccjeMhND.s:179    .text.reg_address:0000000000000000 reg_address
     /tmp/ccjeMhND.s:293    .text.reg_address:0000000000000058 $d
     /tmp/ccjeMhND.s:300    .text.retstk_up:0000000000000000 $t
     /tmp/ccjeMhND.s:307    .text.retstk_up:0000000000000000 retstk_up
     /tmp/ccjeMhND.s:440    .text.retstk_up:000000000000006c $d
                            *COM*:0000000000000004 RetStk
     /tmp/ccjeMhND.s:447    .text.flag_word:0000000000000000 $t
     /tmp/ccjeMhND.s:454    .text.flag_word:0000000000000000 flag_word
     /tmp/ccjeMhND.s:574    .text.flag_word:000000000000006c $d
     /tmp/ccjeMhND.s:581    .text.set_zero:0000000000000000 $t
     /tmp/ccjeMhND.s:588    .text.set_zero:0000000000000000 set_zero
     /tmp/ccjeMhND.s:627    .text.set_zero:0000000000000020 $d
     /tmp/ccjeMhND.s:634    .text.intResult:0000000000000000 $t
     /tmp/ccjeMhND.s:641    .text.intResult:0000000000000000 intResult
     /tmp/ccjeMhND.s:841    .text.intResult:00000000000000a4 $d
                            *COM*:0000000000000004 Error
     /tmp/ccjeMhND.s:847    .text.check_stack_overlap:0000000000000000 $t
     /tmp/ccjeMhND.s:854    .text.check_stack_overlap:0000000000000000 check_stack_overlap
     /tmp/ccjeMhND.s:1068   .text.check_stack_overlap:0000000000000068 $d
     /tmp/ccjeMhND.s:1075   .text.is_xrom:0000000000000000 $t
     /tmp/ccjeMhND.s:1083   .text.is_xrom:0000000000000000 is_xrom
     /tmp/ccjeMhND.s:1104   .text.is_xrom:0000000000000018 $d
     /tmp/ccjeMhND.s:1109   .text.move_retstk:0000000000000000 $t
     /tmp/ccjeMhND.s:1117   .text.move_retstk:0000000000000000 move_retstk
     /tmp/ccjeMhND.s:1300   .text.move_retstk:000000000000006c $d
                            *COM*:0000000000000004 RetStkSize
     /tmp/ccjeMhND.s:1309   .text.local_levels:0000000000000000 $t
     /tmp/ccjeMhND.s:1317   .text.local_levels:0000000000000000 local_levels
     /tmp/ccjeMhND.s:1346   .text.local_levels:0000000000000020 $d
     /tmp/ccjeMhND.s:1352   .text.local_regs_rarg:0000000000000000 $t
     /tmp/ccjeMhND.s:1360   .text.local_regs_rarg:0000000000000000 local_regs_rarg
     /tmp/ccjeMhND.s:1460   .text.local_regs_rarg:0000000000000058 $d
     /tmp/ccjeMhND.s:1466   .text.get_reg_limit:0000000000000000 $t
     /tmp/ccjeMhND.s:1473   .text.get_reg_limit:0000000000000000 get_reg_limit
     /tmp/ccjeMhND.s:1711   .text.get_reg_limit:00000000000000b0 $d
     /tmp/ccjeMhND.s:1720   .text.local_regs:0000000000000000 $t
     /tmp/ccjeMhND.s:1728   .text.local_regs:0000000000000000 local_regs
     /tmp/ccjeMhND.s:1826   .text.local_regs:0000000000000038 $d
     /tmp/ccjeMhND.s:1836   .text.global_regs_rarg:0000000000000000 $t
     /tmp/ccjeMhND.s:1844   .text.global_regs_rarg:0000000000000000 global_regs_rarg
     /tmp/ccjeMhND.s:1917   .text.global_regs_rarg:000000000000003c $d
     /tmp/ccjeMhND.s:1922   .text.global_regs:0000000000000000 $t
     /tmp/ccjeMhND.s:1930   .text.global_regs:0000000000000000 global_regs
     /tmp/ccjeMhND.s:1988   .text.global_regs:0000000000000020 $d
     /tmp/ccjeMhND.s:1993   .text.version:0000000000000000 $t
     /tmp/ccjeMhND.s:2001   .text.version:0000000000000000 version
     /tmp/ccjeMhND.s:2032   .text.version:0000000000000018 $d
     /tmp/ccjeMhND.s:2037   .text.cmd_off:0000000000000000 $t
     /tmp/ccjeMhND.s:2045   .text.cmd_off:0000000000000000 cmd_off
     /tmp/ccjeMhND.s:2061   .text.init_RegionTab:0000000000000000 $t
     /tmp/ccjeMhND.s:2069   .text.init_RegionTab:0000000000000000 init_RegionTab
ARM GAS  /tmp/ccjeMhND.s 			page 869


     /tmp/ccjeMhND.s:2107   .text.init_RegionTab:000000000000001c $d
     /tmp/ccjeMhND.s:2115   .text.sizeLIB:0000000000000000 $t
     /tmp/ccjeMhND.s:2123   .text.sizeLIB:0000000000000000 sizeLIB
     /tmp/ccjeMhND.s:2157   .text.sizeLIB:0000000000000018 $d
     /tmp/ccjeMhND.s:2163   .text.getprog:0000000000000000 $t
     /tmp/ccjeMhND.s:2171   .text.getprog:0000000000000000 getprog
     /tmp/ccjeMhND.s:2275   .text.getprog:0000000000000048 $d
     /tmp/ccjeMhND.s:2283   .text.get_current_prog:0000000000000000 $t
     /tmp/ccjeMhND.s:2291   .text.get_current_prog:0000000000000000 get_current_prog
     /tmp/ccjeMhND.s:2323   .text.get_current_prog:0000000000000020 $d
     /tmp/ccjeMhND.s:2329   .text.do_inc:0000000000000000 $t
     /tmp/ccjeMhND.s:2337   .text.do_inc:0000000000000000 do_inc
     /tmp/ccjeMhND.s:2417   .text.do_inc:0000000000000044 $d
                            *COM*:0000000000000004 PcWrapped
     /tmp/ccjeMhND.s:2422   .text.user_pc.part.0:0000000000000000 $t
     /tmp/ccjeMhND.s:2429   .text.user_pc.part.0:0000000000000000 user_pc.part.0
     /tmp/ccjeMhND.s:2499   .text.user_pc.part.0:0000000000000034 $d
     /tmp/ccjeMhND.s:2504   .rodata.print_step.str1.4:0000000000000000 $d
     /tmp/ccjeMhND.s:2508   .text.print_step:0000000000000000 $t
     /tmp/ccjeMhND.s:2515   .text.print_step:0000000000000000 print_step
     /tmp/ccjeMhND.s:2684   .text.print_step:0000000000000098 $d
                            *COM*:0000000000000019 TraceBuffer
     /tmp/ccjeMhND.s:2695   .text.do_dec:0000000000000000 $t
     /tmp/ccjeMhND.s:2703   .text.do_dec:0000000000000000 do_dec
     /tmp/ccjeMhND.s:2785   .text.do_dec:0000000000000048 $d
     /tmp/ccjeMhND.s:2790   .text.update_program_bounds:0000000000000000 $t
     /tmp/ccjeMhND.s:2798   .text.update_program_bounds:0000000000000000 update_program_bounds
     /tmp/ccjeMhND.s:2951   .text.update_program_bounds:000000000000008c $d
     /tmp/ccjeMhND.s:2958   .text.set_pc:0000000000000000 $t
     /tmp/ccjeMhND.s:2966   .text.set_pc:0000000000000000 set_pc
     /tmp/ccjeMhND.s:3200   .text.set_pc:00000000000000a4 $d
     /tmp/ccjeMhND.s:3209   .text.incpc:0000000000000000 $t
     /tmp/ccjeMhND.s:3217   .text.incpc:0000000000000000 incpc
     /tmp/ccjeMhND.s:3271   .text.incpc:0000000000000024 $d
     /tmp/ccjeMhND.s:3277   .text.decpc:0000000000000000 $t
     /tmp/ccjeMhND.s:3285   .text.decpc:0000000000000000 decpc
     /tmp/ccjeMhND.s:3340   .text.decpc:0000000000000024 $d
     /tmp/ccjeMhND.s:3347   .text.fin_tst.part.0:0000000000000000 $t
     /tmp/ccjeMhND.s:3354   .text.fin_tst.part.0:0000000000000000 fin_tst.part.0
     /tmp/ccjeMhND.s:3387   .text.do_rtn:0000000000000000 $t
     /tmp/ccjeMhND.s:3394   .text.do_rtn:0000000000000000 do_rtn
     /tmp/ccjeMhND.s:3572   .text.do_rtn:000000000000008c $d
                            *COM*:0000000000000004 Running
     /tmp/ccjeMhND.s:3581   .text.user_pc:0000000000000000 $t
     /tmp/ccjeMhND.s:3589   .text.user_pc:0000000000000000 user_pc
     /tmp/ccjeMhND.s:3621   .text.find_user_pc:0000000000000000 $t
     /tmp/ccjeMhND.s:3629   .text.find_user_pc:0000000000000000 find_user_pc
     /tmp/ccjeMhND.s:3737   .text.find_user_pc:000000000000004c $d
     /tmp/ccjeMhND.s:3743   .text.report_err:0000000000000000 $t
     /tmp/ccjeMhND.s:3751   .text.report_err:0000000000000000 report_err
     /tmp/ccjeMhND.s:3810   .text.report_err:000000000000001c $d
     /tmp/ccjeMhND.s:3815   .text.report_warn:0000000000000000 $t
     /tmp/ccjeMhND.s:3823   .text.report_warn:0000000000000000 report_warn
     /tmp/ccjeMhND.s:3943   .text.report_warn:0000000000000048 $d
     /tmp/ccjeMhND.s:3952   .text.bad_mode_error:0000000000000000 $t
     /tmp/ccjeMhND.s:3960   .text.bad_mode_error:0000000000000000 bad_mode_error
     /tmp/ccjeMhND.s:4001   .text.bad_mode_error:000000000000000c $d
ARM GAS  /tmp/ccjeMhND.s 			page 870


     /tmp/ccjeMhND.s:4006   .text.cmderr:0000000000000000 $t
     /tmp/ccjeMhND.s:4014   .text.cmderr:0000000000000000 cmderr
     /tmp/ccjeMhND.s:4071   .text.cmderr:0000000000000010 $d
     /tmp/ccjeMhND.s:4080   .text.cmdmsg:0000000000000000 $t
     /tmp/ccjeMhND.s:4088   .text.cmdmsg:0000000000000000 cmdmsg
     /tmp/ccjeMhND.s:4104   .text.rarg_roundingmode:0000000000000000 $t
     /tmp/ccjeMhND.s:4112   .text.rarg_roundingmode:0000000000000000 rarg_roundingmode
     /tmp/ccjeMhND.s:4134   .text.rarg_roundingmode:0000000000000014 $d
     /tmp/ccjeMhND.s:4139   .text.packed_from_number:0000000000000000 $t
     /tmp/ccjeMhND.s:4147   .text.packed_from_number:0000000000000000 packed_from_number
     /tmp/ccjeMhND.s:4214   .text.packed_from_number:0000000000000034 $d
     /tmp/ccjeMhND.s:4220   .text.packed128_from_number:0000000000000000 $t
     /tmp/ccjeMhND.s:4228   .text.packed128_from_number:0000000000000000 packed128_from_number
     /tmp/ccjeMhND.s:4295   .text.packed128_from_number:0000000000000034 $d
     /tmp/ccjeMhND.s:4301   .text.check_special:0000000000000000 $t
     /tmp/ccjeMhND.s:4308   .text.check_special:0000000000000000 check_special
     /tmp/ccjeMhND.s:4535   .text.check_special:00000000000000a0 $d
     /tmp/ccjeMhND.s:4541   .text.packed_from_packed128:0000000000000000 $t
     /tmp/ccjeMhND.s:4549   .text.packed_from_packed128:0000000000000000 packed_from_packed128
     /tmp/ccjeMhND.s:4592   .text.packed128_from_packed:0000000000000000 $t
     /tmp/ccjeMhND.s:4600   .text.packed128_from_packed:0000000000000000 packed128_from_packed
     /tmp/ccjeMhND.s:4643   .text.stack_size:0000000000000000 $t
     /tmp/ccjeMhND.s:4651   .text.stack_size:0000000000000000 stack_size
     /tmp/ccjeMhND.s:4702   .text.stack_size:0000000000000030 $d
     /tmp/ccjeMhND.s:4708   .text.copyreg:0000000000000000 $t
     /tmp/ccjeMhND.s:4716   .text.copyreg:0000000000000000 copyreg
     /tmp/ccjeMhND.s:4749   .text.copyreg:000000000000001c $d
     /tmp/ccjeMhND.s:4754   .text.set_lift:0000000000000000 $t
     /tmp/ccjeMhND.s:4762   .text.set_lift:0000000000000000 set_lift
     /tmp/ccjeMhND.s:4780   .text.set_lift:000000000000000c $d
     /tmp/ccjeMhND.s:4785   .text.is_dblmode:0000000000000000 $t
     /tmp/ccjeMhND.s:4793   .text.is_dblmode:0000000000000000 is_dblmode
     /tmp/ccjeMhND.s:4815   .text.is_dblmode:000000000000001c $d
     /tmp/ccjeMhND.s:4820   .text.is_usrdblmode:0000000000000000 $t
     /tmp/ccjeMhND.s:4828   .text.is_usrdblmode:0000000000000000 is_usrdblmode
     /tmp/ccjeMhND.s:4870   .text.is_usrdblmode:000000000000002c $d
     /tmp/ccjeMhND.s:4876   .text.s_to_i:0000000000000000 $t
     /tmp/ccjeMhND.s:4884   .text.s_to_i:0000000000000000 s_to_i
     /tmp/ccjeMhND.s:5032   .text.digit:0000000000000000 $t
     /tmp/ccjeMhND.s:5039   .text.digit:0000000000000000 digit
     /tmp/ccjeMhND.s:5608   .text.digit:000000000000018c $d
     /tmp/ccjeMhND.s:5617   .text.s_to_ull:0000000000000000 $t
     /tmp/ccjeMhND.s:5625   .text.s_to_ull:0000000000000000 s_to_ull
     /tmp/ccjeMhND.s:5719   .text.get_cmdline:0000000000000000 $t
     /tmp/ccjeMhND.s:5727   .text.get_cmdline:0000000000000000 get_cmdline
     /tmp/ccjeMhND.s:5755   .text.get_cmdline:0000000000000014 $d
     /tmp/ccjeMhND.s:5760   .text.is_bad_cmdline:0000000000000000 $t
     /tmp/ccjeMhND.s:5768   .text.is_bad_cmdline:0000000000000000 is_bad_cmdline
     /tmp/ccjeMhND.s:5843   .text.is_bad_cmdline:000000000000003c $d
     /tmp/ccjeMhND.s:5848   .text.get_flash_reg_n:0000000000000000 $t
     /tmp/ccjeMhND.s:5856   .text.get_flash_reg_n:0000000000000000 get_flash_reg_n
     /tmp/ccjeMhND.s:5883   .text.get_flash_reg_n:000000000000001c $d
     /tmp/ccjeMhND.s:5888   .text.get_const:0000000000000000 $t
     /tmp/ccjeMhND.s:5896   .text.get_const:0000000000000000 get_const
     /tmp/ccjeMhND.s:6044   .text.get_const:0000000000000074 $d
     /tmp/ccjeMhND.s:6052   .text.get_reg_n:0000000000000000 $t
     /tmp/ccjeMhND.s:6060   .text.get_reg_n:0000000000000000 get_reg_n
ARM GAS  /tmp/ccjeMhND.s 			page 871


     /tmp/ccjeMhND.s:6280   .text.get_reg_n:00000000000000a8 $d
     /tmp/ccjeMhND.s:6287   .text.get_stack:0000000000000000 $t
     /tmp/ccjeMhND.s:6295   .text.get_stack:0000000000000000 get_stack
     /tmp/ccjeMhND.s:6315   .text.lift:0000000000000000 $t
     /tmp/ccjeMhND.s:6323   .text.lift:0000000000000000 lift
     /tmp/ccjeMhND.s:6502   .text.lift:0000000000000064 $d
     /tmp/ccjeMhND.s:6510   .text.lift_if_enabled:0000000000000000 $t
     /tmp/ccjeMhND.s:6518   .text.lift_if_enabled:0000000000000000 lift_if_enabled
     /tmp/ccjeMhND.s:6548   .text.lift_if_enabled:0000000000000010 $d
     /tmp/ccjeMhND.s:6553   .text.lower:0000000000000000 $t
     /tmp/ccjeMhND.s:6560   .text.lower:0000000000000000 lower
     /tmp/ccjeMhND.s:6742   .text.lower:000000000000006c $d
     /tmp/ccjeMhND.s:6750   .text.get_stack_top:0000000000000000 $t
     /tmp/ccjeMhND.s:6757   .text.get_stack_top:0000000000000000 get_stack_top
     /tmp/ccjeMhND.s:6842   .text.get_stack_top:0000000000000034 $d
     /tmp/ccjeMhND.s:6850   .text.roll_down:0000000000000000 $t
     /tmp/ccjeMhND.s:6858   .text.roll_down:0000000000000000 roll_down
     /tmp/ccjeMhND.s:6976   .text.roll_down:000000000000004c $d
                            *COM*:0000000000000004 StackBase
     /tmp/ccjeMhND.s:6982   .text.cpx_roll_down:0000000000000000 $t
     /tmp/ccjeMhND.s:6990   .text.cpx_roll_down:0000000000000000 cpx_roll_down
     /tmp/ccjeMhND.s:7032   .text.cpx_roll_down:000000000000001c $d
     /tmp/ccjeMhND.s:7037   .text.roll_up:0000000000000000 $t
     /tmp/ccjeMhND.s:7045   .text.roll_up:0000000000000000 roll_up
     /tmp/ccjeMhND.s:7172   .text.roll_up:000000000000004c $d
     /tmp/ccjeMhND.s:7178   .text.cpx_roll_up:0000000000000000 $t
     /tmp/ccjeMhND.s:7186   .text.cpx_roll_up:0000000000000000 cpx_roll_up
     /tmp/ccjeMhND.s:7228   .text.cpx_roll_up:000000000000001c $d
     /tmp/ccjeMhND.s:7233   .text.fill:0000000000000000 $t
     /tmp/ccjeMhND.s:7241   .text.fill:0000000000000000 fill
     /tmp/ccjeMhND.s:7396   .text.fill:0000000000000064 $d
     /tmp/ccjeMhND.s:7405   .text.lower2:0000000000000000 $t
     /tmp/ccjeMhND.s:7412   .text.lower2:0000000000000000 lower2
     /tmp/ccjeMhND.s:7594   .text.lower2:000000000000006c $d
     /tmp/ccjeMhND.s:7602   .text.drop:0000000000000000 $t
     /tmp/ccjeMhND.s:7610   .text.drop:0000000000000000 drop
     /tmp/ccjeMhND.s:7653   .text.drop:000000000000001c $d
     /tmp/ccjeMhND.s:7658   .text.copyreg_n:0000000000000000 $t
     /tmp/ccjeMhND.s:7666   .text.copyreg_n:0000000000000000 copyreg_n
     /tmp/ccjeMhND.s:7750   .text.copyreg_n:0000000000000038 $d
     /tmp/ccjeMhND.s:7757   .text.setlastX:0000000000000000 $t
     /tmp/ccjeMhND.s:7765   .text.setlastX:0000000000000000 setlastX
     /tmp/ccjeMhND.s:7781   .text.setlastXY:0000000000000000 $t
     /tmp/ccjeMhND.s:7788   .text.setlastXY:0000000000000000 setlastXY
     /tmp/ccjeMhND.s:7831   .text.getRegister:0000000000000000 $t
     /tmp/ccjeMhND.s:7839   .text.getRegister:0000000000000000 getRegister
     /tmp/ccjeMhND.s:7901   .text.getRegister:0000000000000030 $d
     /tmp/ccjeMhND.s:7906   .text.getX:0000000000000000 $t
     /tmp/ccjeMhND.s:7914   .text.getX:0000000000000000 getX
     /tmp/ccjeMhND.s:7932   .text.getY:0000000000000000 $t
     /tmp/ccjeMhND.s:7940   .text.getY:0000000000000000 getY
     /tmp/ccjeMhND.s:7957   .text.getXY:0000000000000000 $t
     /tmp/ccjeMhND.s:7965   .text.getXY:0000000000000000 getXY
     /tmp/ccjeMhND.s:8026   .text.getXYZ:0000000000000000 $t
     /tmp/ccjeMhND.s:8034   .text.getXYZ:0000000000000000 getXYZ
     /tmp/ccjeMhND.s:8127   .text.getYZ:0000000000000000 $t
     /tmp/ccjeMhND.s:8135   .text.getYZ:0000000000000000 getYZ
ARM GAS  /tmp/ccjeMhND.s 			page 872


     /tmp/ccjeMhND.s:8196   .text.getXYZT:0000000000000000 $t
     /tmp/ccjeMhND.s:8204   .text.getXYZT:0000000000000000 getXYZT
     /tmp/ccjeMhND.s:8250   .text.storcl_op:0000000000000000 $t
     /tmp/ccjeMhND.s:8257   .text.storcl_op:0000000000000000 storcl_op
     /tmp/ccjeMhND.s:8331   .text.storcl_op:000000000000002c $d
     /tmp/ccjeMhND.s:8338   .text.storcl_op:0000000000000032 $t
     /tmp/ccjeMhND.s:8450   .text.storcl_cop:0000000000000000 $t
     /tmp/ccjeMhND.s:8457   .text.storcl_cop:0000000000000000 storcl_cop
     /tmp/ccjeMhND.s:8567   .text.storcl_cop:0000000000000040 $d
     /tmp/ccjeMhND.s:8572   .text.storcl_cop:0000000000000044 $t
     /tmp/ccjeMhND.s:8685   .text.cpx_enter:0000000000000000 $t
     /tmp/ccjeMhND.s:8693   .text.cpx_enter:0000000000000000 cpx_enter
     /tmp/ccjeMhND.s:8783   .text.cpx_enter:0000000000000048 $d
     /tmp/ccjeMhND.s:8789   .text.cpx_fill:0000000000000000 $t
     /tmp/ccjeMhND.s:8797   .text.cpx_fill:0000000000000000 cpx_fill
     /tmp/ccjeMhND.s:8998   .text.cpx_fill:0000000000000084 $d
     /tmp/ccjeMhND.s:9008   .text.setRegister:0000000000000000 $t
     /tmp/ccjeMhND.s:9016   .text.setRegister:0000000000000000 setRegister
     /tmp/ccjeMhND.s:9111   .text.setRegister:000000000000004c $d
                            *COM*:0000000000000018 Ctx
     /tmp/ccjeMhND.s:9117   .text.setX:0000000000000000 $t
     /tmp/ccjeMhND.s:9125   .text.setX:0000000000000000 setX
     /tmp/ccjeMhND.s:9147   .text.rarg_round:0000000000000000 $t
     /tmp/ccjeMhND.s:9155   .text.rarg_round:0000000000000000 rarg_round
     /tmp/ccjeMhND.s:9336   .text.rarg_round:0000000000000064 $d
     /tmp/ccjeMhND.s:9343   .text.setY:0000000000000000 $t
     /tmp/ccjeMhND.s:9351   .text.setY:0000000000000000 setY
     /tmp/ccjeMhND.s:9373   .text.setXY:0000000000000000 $t
     /tmp/ccjeMhND.s:9381   .text.setXY:0000000000000000 setXY
     /tmp/ccjeMhND.s:9445   .text.get_reg_n_int:0000000000000000 $t
     /tmp/ccjeMhND.s:9453   .text.get_reg_n_int:0000000000000000 get_reg_n_int
     /tmp/ccjeMhND.s:9490   .text.storcl_intop:0000000000000000 $t
     /tmp/ccjeMhND.s:9497   .text.storcl_intop:0000000000000000 storcl_intop
     /tmp/ccjeMhND.s:9589   .text.storcl_intop:0000000000000038 $d
     /tmp/ccjeMhND.s:9595   .text.storcl_intop:000000000000003e $t
     /tmp/ccjeMhND.s:9697   .text.incdec:0000000000000000 $t
     /tmp/ccjeMhND.s:9704   .text.incdec:0000000000000000 incdec
     /tmp/ccjeMhND.s:9885   .text.incdec:0000000000000094 $d
     /tmp/ccjeMhND.s:9892   .text.set_reg_n_int:0000000000000000 $t
     /tmp/ccjeMhND.s:9900   .text.set_reg_n_int:0000000000000000 set_reg_n_int
     /tmp/ccjeMhND.s:9933   .text.get_reg_n_int_sgn:0000000000000000 $t
     /tmp/ccjeMhND.s:9941   .text.get_reg_n_int_sgn:0000000000000000 get_reg_n_int_sgn
     /tmp/ccjeMhND.s:10021  .text.get_reg_n_int_sgn:0000000000000034 $d
     /tmp/ccjeMhND.s:10026  .text.get_keycode_from_reg:0000000000000000 $t
     /tmp/ccjeMhND.s:10033  .text.get_keycode_from_reg:0000000000000000 get_keycode_from_reg
     /tmp/ccjeMhND.s:10113  .text.get_keycode_from_reg:000000000000002c $d
     /tmp/ccjeMhND.s:10118  .text.getX_int:0000000000000000 $t
     /tmp/ccjeMhND.s:10126  .text.getX_int:0000000000000000 getX_int
     /tmp/ccjeMhND.s:10142  .text.getX_int_sgn:0000000000000000 $t
     /tmp/ccjeMhND.s:10150  .text.getX_int_sgn:0000000000000000 getX_int_sgn
     /tmp/ccjeMhND.s:10172  .text.set_reg_n_int_sgn:0000000000000000 $t
     /tmp/ccjeMhND.s:10180  .text.set_reg_n_int_sgn:0000000000000000 set_reg_n_int_sgn
     /tmp/ccjeMhND.s:10306  .text.set_reg_n_int_sgn:0000000000000060 $d
     /tmp/ccjeMhND.s:10312  .text.op_roundingmode:0000000000000000 $t
     /tmp/ccjeMhND.s:10320  .text.op_roundingmode:0000000000000000 op_roundingmode
     /tmp/ccjeMhND.s:10384  .text.op_roundingmode:0000000000000024 $d
     /tmp/ccjeMhND.s:10389  .text.register_from_int:0000000000000000 $t
ARM GAS  /tmp/ccjeMhND.s 			page 873


     /tmp/ccjeMhND.s:10396  .text.register_from_int:0000000000000000 register_from_int
     /tmp/ccjeMhND.s:10493  .text.register_from_int:000000000000005c $d
     /tmp/ccjeMhND.s:10499  .text.int_from_register:0000000000000000 $t
     /tmp/ccjeMhND.s:10506  .text.int_from_register:0000000000000000 int_from_register
     /tmp/ccjeMhND.s:10577  .text.int_from_register:0000000000000044 $d
     /tmp/ccjeMhND.s:10582  .text.switch_to_int:0000000000000000 $t
     /tmp/ccjeMhND.s:10589  .text.switch_to_int:0000000000000000 switch_to_int
     /tmp/ccjeMhND.s:10740  .text.switch_to_int:0000000000000078 $d
     /tmp/ccjeMhND.s:10748  .text.process_cmdline:0000000000000000 $t
     /tmp/ccjeMhND.s:10756  .text.process_cmdline:0000000000000000 process_cmdline
     /tmp/ccjeMhND.s:11353  .text.process_cmdline:0000000000000200 $d
                            *COM*:0000000000000004 XromRunning
     /tmp/ccjeMhND.s:11364  .text.process_cmdline_set_lift:0000000000000000 $t
     /tmp/ccjeMhND.s:11372  .text.process_cmdline_set_lift:0000000000000000 process_cmdline_set_lift
     /tmp/ccjeMhND.s:11405  .text.process_cmdline_set_lift:0000000000000014 $d
     /tmp/ccjeMhND.s:11410  .text.setX_int:0000000000000000 $t
     /tmp/ccjeMhND.s:11418  .text.setX_int:0000000000000000 setX_int
     /tmp/ccjeMhND.s:11469  .text.do_rcl:0000000000000000 $t
     /tmp/ccjeMhND.s:11476  .text.do_rcl:0000000000000000 do_rcl
     /tmp/ccjeMhND.s:11814  .text.do_rcl:00000000000000cc $d
     /tmp/ccjeMhND.s:11825  .text.setX_int_sgn:0000000000000000 $t
     /tmp/ccjeMhND.s:11833  .text.setX_int_sgn:0000000000000000 setX_int_sgn
     /tmp/ccjeMhND.s:11867  .text.zero_regs:0000000000000000 $t
     /tmp/ccjeMhND.s:11875  .text.zero_regs:0000000000000000 zero_regs
     /tmp/ccjeMhND.s:11913  .text.zero_regs:0000000000000024 $d
     /tmp/ccjeMhND.s:11918  .text.move_regs:0000000000000000 $t
     /tmp/ccjeMhND.s:11926  .text.move_regs:0000000000000000 move_regs
     /tmp/ccjeMhND.s:11979  .text.move_regs:0000000000000024 $d
     /tmp/ccjeMhND.s:11984  .text.zero_X:0000000000000000 $t
     /tmp/ccjeMhND.s:11992  .text.zero_X:0000000000000000 zero_X
     /tmp/ccjeMhND.s:12007  .text.zero_X:0000000000000008 $d
     /tmp/ccjeMhND.s:12012  .text.zero_Y:0000000000000000 $t
     /tmp/ccjeMhND.s:12020  .text.zero_Y:0000000000000000 zero_Y
     /tmp/ccjeMhND.s:12048  .text.clrx:0000000000000000 $t
     /tmp/ccjeMhND.s:12056  .text.clrx:0000000000000000 clrx
     /tmp/ccjeMhND.s:12105  .text.clrx:0000000000000018 $d
     /tmp/ccjeMhND.s:12111  .text.clrstk:0000000000000000 $t
     /tmp/ccjeMhND.s:12119  .text.clrstk:0000000000000000 clrstk
     /tmp/ccjeMhND.s:12244  .text.clrstk:000000000000005c $d
     /tmp/ccjeMhND.s:12254  .text.clrreg:0000000000000000 $t
     /tmp/ccjeMhND.s:12262  .text.clrreg:0000000000000000 clrreg
     /tmp/ccjeMhND.s:12698  .text.clrreg:000000000000010c $d
     /tmp/ccjeMhND.s:12708  .text.clrretstk:0000000000000000 $t
     /tmp/ccjeMhND.s:12716  .text.clrretstk:0000000000000000 clrretstk
     /tmp/ccjeMhND.s:12737  .text.clrretstk:0000000000000010 $d
     /tmp/ccjeMhND.s:12742  .text.clrretstk_pc:0000000000000000 $t
     /tmp/ccjeMhND.s:12750  .text.clrretstk_pc:0000000000000000 clrretstk_pc
     /tmp/ccjeMhND.s:12815  .text.clrretstk_pc:0000000000000020 $d
     /tmp/ccjeMhND.s:12820  .text.cmdconst:0000000000000000 $t
     /tmp/ccjeMhND.s:12828  .text.cmdconst:0000000000000000 cmdconst
     /tmp/ccjeMhND.s:13151  .text.cmdconst:00000000000000bc $d
     /tmp/ccjeMhND.s:13159  .text.cmdsto:0000000000000000 $t
     /tmp/ccjeMhND.s:13167  .text.cmdsto:0000000000000000 cmdsto
     /tmp/ccjeMhND.s:13357  .text.cmdsto:0000000000000078 $d
     /tmp/ccjeMhND.s:13363  .text.cmdrcl:0000000000000000 $t
     /tmp/ccjeMhND.s:13371  .text.cmdrcl:0000000000000000 cmdrcl
     /tmp/ccjeMhND.s:13387  .text.cmdcsto:0000000000000000 $t
ARM GAS  /tmp/ccjeMhND.s 			page 874


     /tmp/ccjeMhND.s:13395  .text.cmdcsto:0000000000000000 cmdcsto
     /tmp/ccjeMhND.s:13672  .text.cmdcsto:00000000000000c0 $d
     /tmp/ccjeMhND.s:13680  .text.cmdcrcl:0000000000000000 $t
     /tmp/ccjeMhND.s:13688  .text.cmdcrcl:0000000000000000 cmdcrcl
     /tmp/ccjeMhND.s:14161  .text.cmdcrcl:0000000000000108 $d
     /tmp/ccjeMhND.s:14176  .text.cmdircl:0000000000000000 $t
     /tmp/ccjeMhND.s:14184  .text.cmdircl:0000000000000000 cmdircl
     /tmp/ccjeMhND.s:14228  .text.cmdircl:000000000000001c $d
     /tmp/ccjeMhND.s:14233  .text.cmdrrcl:0000000000000000 $t
     /tmp/ccjeMhND.s:14241  .text.cmdrrcl:0000000000000000 cmdrrcl
     /tmp/ccjeMhND.s:14399  .text.cmdrrcl:0000000000000080 $d
     /tmp/ccjeMhND.s:14409  .text.swap_reg:0000000000000000 $t
     /tmp/ccjeMhND.s:14417  .text.swap_reg:0000000000000000 swap_reg
     /tmp/ccjeMhND.s:14558  .text.swap_reg:0000000000000060 $d
     /tmp/ccjeMhND.s:14563  .text.cmdswap:0000000000000000 $t
     /tmp/ccjeMhND.s:14571  .text.cmdswap:0000000000000000 cmdswap
     /tmp/ccjeMhND.s:14700  .text.cmdswap:0000000000000088 $d
     /tmp/ccjeMhND.s:14705  .text.cmdview:0000000000000000 $t
     /tmp/ccjeMhND.s:14713  .text.cmdview:0000000000000000 cmdview
     /tmp/ccjeMhND.s:14797  .text.cmdview:0000000000000050 $d
                            *COM*:0000000000000004 ShowRegister
     /tmp/ccjeMhND.s:14804  .text.get_stack_size:0000000000000000 $t
     /tmp/ccjeMhND.s:14812  .text.get_stack_size:0000000000000000 get_stack_size
     /tmp/ccjeMhND.s:14910  .text.get_stack_size:0000000000000040 $d
     /tmp/ccjeMhND.s:14918  .text.get_word_size:0000000000000000 $t
     /tmp/ccjeMhND.s:14926  .text.get_word_size:0000000000000000 get_word_size
     /tmp/ccjeMhND.s:14969  .text.get_sign_mode:0000000000000000 $t
     /tmp/ccjeMhND.s:14977  .text.get_sign_mode:0000000000000000 get_sign_mode
     /tmp/ccjeMhND.s:15033  .text.get_sign_mode:0000000000000024 $d
     /tmp/ccjeMhND.s:15038  .text.get_base:0000000000000000 $t
     /tmp/ccjeMhND.s:15046  .text.get_base:0000000000000000 get_base
     /tmp/ccjeMhND.s:15089  .text.DM42_Ticker:0000000000000000 $t
     /tmp/ccjeMhND.s:15097  .text.DM42_Ticker:0000000000000000 DM42_Ticker
     /tmp/ccjeMhND.s:15127  .text.DM42_Ticker:0000000000000014 $d
     /tmp/ccjeMhND.s:15132  .text.op_ticks:0000000000000000 $t
     /tmp/ccjeMhND.s:15140  .text.op_ticks:0000000000000000 op_ticks
     /tmp/ccjeMhND.s:15217  .text.op_ticks:0000000000000024 $d
     /tmp/ccjeMhND.s:15222  .text.op_voltage:0000000000000000 $t
     /tmp/ccjeMhND.s:15230  .text.op_voltage:0000000000000000 op_voltage
     /tmp/ccjeMhND.s:15333  .text.op_voltage:0000000000000058 $d
     /tmp/ccjeMhND.s:15340  .text.free_mem:0000000000000000 $t
     /tmp/ccjeMhND.s:15348  .text.free_mem:0000000000000000 free_mem
     /tmp/ccjeMhND.s:15372  .text.free_mem:0000000000000010 $d
     /tmp/ccjeMhND.s:15378  .text.free_flash:0000000000000000 $t
     /tmp/ccjeMhND.s:15386  .text.free_flash:0000000000000000 free_flash
     /tmp/ccjeMhND.s:15405  .text.free_flash:0000000000000010 $d
     /tmp/ccjeMhND.s:15410  .text.get_mem:0000000000000000 $t
     /tmp/ccjeMhND.s:15418  .text.get_mem:0000000000000000 get_mem
     /tmp/ccjeMhND.s:15669  .text.get_mem:000000000000009c $d
     /tmp/ccjeMhND.s:15677  .text.cmdputkey:0000000000000000 $t
     /tmp/ccjeMhND.s:15685  .text.cmdputkey:0000000000000000 cmdputkey
     /tmp/ccjeMhND.s:15767  .text.cmdputkey:0000000000000034 $d
     /tmp/ccjeMhND.s:15773  .text.cmdkeytype:0000000000000000 $t
     /tmp/ccjeMhND.s:15781  .text.cmdkeytype:0000000000000000 cmdkeytype
     /tmp/ccjeMhND.s:15915  .text.cmdkeytype:0000000000000048 $d
     /tmp/ccjeMhND.s:15924  .rodata.op_query_xtal.str1.4:0000000000000000 $d
     /tmp/ccjeMhND.s:15928  .text.op_query_xtal:0000000000000000 $t
ARM GAS  /tmp/ccjeMhND.s 			page 875


     /tmp/ccjeMhND.s:15936  .text.op_query_xtal:0000000000000000 op_query_xtal
     /tmp/ccjeMhND.s:15974  .text.op_query_xtal:0000000000000014 $d
     /tmp/ccjeMhND.s:15982  .rodata.op_query_print.str1.4:0000000000000000 $d
     /tmp/ccjeMhND.s:15986  .text.op_query_print:0000000000000000 $t
     /tmp/ccjeMhND.s:15994  .text.op_query_print:0000000000000000 op_query_print
     /tmp/ccjeMhND.s:16039  .text.op_query_print:0000000000000018 $d
     /tmp/ccjeMhND.s:16049  .text.cmdstostk:0000000000000000 $t
     /tmp/ccjeMhND.s:16057  .text.cmdstostk:0000000000000000 cmdstostk
     /tmp/ccjeMhND.s:16107  .text.cmdrclstk:0000000000000000 $t
     /tmp/ccjeMhND.s:16115  .text.cmdrclstk:0000000000000000 cmdrclstk
     /tmp/ccjeMhND.s:16168  .text.find_opcode_from:0000000000000000 $t
     /tmp/ccjeMhND.s:16176  .text.find_opcode_from:0000000000000000 find_opcode_from
     /tmp/ccjeMhND.s:16348  .text.find_opcode_from:000000000000006c $d
     /tmp/ccjeMhND.s:16353  .text.find_label_from:0000000000000000 $t
     /tmp/ccjeMhND.s:16361  .text.find_label_from:0000000000000000 find_label_from
     /tmp/ccjeMhND.s:16381  .text.op_rtn:0000000000000000 $t
     /tmp/ccjeMhND.s:16389  .text.op_rtn:0000000000000000 op_rtn
     /tmp/ccjeMhND.s:16423  .text.op_rtn:0000000000000020 $d
     /tmp/ccjeMhND.s:16429  .text.op_popusr:0000000000000000 $t
     /tmp/ccjeMhND.s:16437  .text.op_popusr:0000000000000000 op_popusr
     /tmp/ccjeMhND.s:16512  .text.op_popusr:0000000000000050 $d
                            *COM*:0000000000000004 XromUserPc
                            *COM*:0000000000000004 UserLocalRegs
     /tmp/ccjeMhND.s:16520  .text.findmultilbl:0000000000000000 $t
     /tmp/ccjeMhND.s:16528  .text.findmultilbl:0000000000000000 findmultilbl
     /tmp/ccjeMhND.s:16641  .text.findmultilbl:0000000000000048 $d
     /tmp/ccjeMhND.s:16646  .text.get_dispmode_digs:0000000000000000 $t
     /tmp/ccjeMhND.s:16654  .text.get_dispmode_digs:0000000000000000 get_dispmode_digs
     /tmp/ccjeMhND.s:16716  .text.get_dispmode_digs:000000000000002c $d
     /tmp/ccjeMhND.s:16721  .text.set_dispmode_digs:0000000000000000 $t
     /tmp/ccjeMhND.s:16729  .text.set_dispmode_digs:0000000000000000 set_dispmode_digs
     /tmp/ccjeMhND.s:16787  .text.set_dispmode_digs:0000000000000038 $d
     /tmp/ccjeMhND.s:16792  .text.convC2F:0000000000000000 $t
     /tmp/ccjeMhND.s:16800  .text.convC2F:0000000000000000 convC2F
     /tmp/ccjeMhND.s:16842  .text.convC2F:000000000000001c $d
     /tmp/ccjeMhND.s:16848  .text.convF2C:0000000000000000 $t
     /tmp/ccjeMhND.s:16856  .text.convF2C:0000000000000000 convF2C
     /tmp/ccjeMhND.s:16898  .text.convF2C:000000000000001c $d
     /tmp/ccjeMhND.s:16904  .text.convDB2AR:0000000000000000 $t
     /tmp/ccjeMhND.s:16912  .text.convDB2AR:0000000000000000 convDB2AR
     /tmp/ccjeMhND.s:16954  .text.convDB2AR:000000000000001c $d
     /tmp/ccjeMhND.s:16959  .text.convAR2DB:0000000000000000 $t
     /tmp/ccjeMhND.s:16967  .text.convAR2DB:0000000000000000 convAR2DB
     /tmp/ccjeMhND.s:17008  .text.convAR2DB:000000000000001c $d
     /tmp/ccjeMhND.s:17013  .text.convDB2PR:0000000000000000 $t
     /tmp/ccjeMhND.s:17021  .text.convDB2PR:0000000000000000 convDB2PR
     /tmp/ccjeMhND.s:17062  .text.convPR2DB:0000000000000000 $t
     /tmp/ccjeMhND.s:17070  .text.convPR2DB:0000000000000000 convPR2DB
     /tmp/ccjeMhND.s:17111  .text.do_conv:0000000000000000 $t
     /tmp/ccjeMhND.s:17119  .text.do_conv:0000000000000000 do_conv
     /tmp/ccjeMhND.s:17211  .text.do_conv:0000000000000040 $d
     /tmp/ccjeMhND.s:17216  .text.cmdconv:0000000000000000 $t
     /tmp/ccjeMhND.s:17224  .text.cmdconv:0000000000000000 cmdconv
     /tmp/ccjeMhND.s:17312  .text.cmdconv:000000000000003c $d
     /tmp/ccjeMhND.s:17317  .text.fin_tst:0000000000000000 $t
     /tmp/ccjeMhND.s:17325  .text.fin_tst:0000000000000000 fin_tst
     /tmp/ccjeMhND.s:17383  .text.fin_tst:000000000000002c $d
ARM GAS  /tmp/ccjeMhND.s 			page 876


     /tmp/ccjeMhND.s:17392  .text.check_mode:0000000000000000 $t
     /tmp/ccjeMhND.s:17400  .text.check_mode:0000000000000000 check_mode
     /tmp/ccjeMhND.s:17435  .text.check_mode:0000000000000024 $d
     /tmp/ccjeMhND.s:17440  .text.check_dblmode:0000000000000000 $t
     /tmp/ccjeMhND.s:17448  .text.check_dblmode:0000000000000000 check_dblmode
     /tmp/ccjeMhND.s:17481  .text.check_dblmode:000000000000001c $d
     /tmp/ccjeMhND.s:17486  .text.isTop:0000000000000000 $t
     /tmp/ccjeMhND.s:17494  .text.isTop:0000000000000000 isTop
     /tmp/ccjeMhND.s:17558  .text.isTop:0000000000000038 $d
     /tmp/ccjeMhND.s:17567  .text.cmdlblp:0000000000000000 $t
     /tmp/ccjeMhND.s:17575  .text.cmdlblp:0000000000000000 cmdlblp
     /tmp/ccjeMhND.s:17627  .text.cmdlblp:0000000000000024 $d
     /tmp/ccjeMhND.s:17632  .text.cmdmultilblp:0000000000000000 $t
     /tmp/ccjeMhND.s:17640  .text.cmdmultilblp:0000000000000000 cmdmultilblp
     /tmp/ccjeMhND.s:17675  .text.cmdkeyp:0000000000000000 $t
     /tmp/ccjeMhND.s:17683  .text.cmdkeyp:0000000000000000 cmdkeyp
     /tmp/ccjeMhND.s:17778  .text.cmdkeyp:0000000000000044 $d
     /tmp/ccjeMhND.s:17783  .text.do_tst:0000000000000000 $t
     /tmp/ccjeMhND.s:17790  .text.do_tst:0000000000000000 do_tst
     /tmp/ccjeMhND.s:17934  .text.do_tst:0000000000000062 $d
     /tmp/ccjeMhND.s:18208  .text.do_tst:0000000000000160 $d
     /tmp/ccjeMhND.s:18215  .text.do_ztst:0000000000000000 $t
     /tmp/ccjeMhND.s:18222  .text.do_ztst:0000000000000000 do_ztst
     /tmp/ccjeMhND.s:18476  .text.do_ztst:00000000000000ac $d
     /tmp/ccjeMhND.s:18487  .text.check_zero:0000000000000000 $t
     /tmp/ccjeMhND.s:18495  .text.check_zero:0000000000000000 check_zero
     /tmp/ccjeMhND.s:18639  .text.check_zero:000000000000006c $d
     /tmp/ccjeMhND.s:18644  .text.cmdtest:0000000000000000 $t
     /tmp/ccjeMhND.s:18652  .text.cmdtest:0000000000000000 cmdtest
     /tmp/ccjeMhND.s:18673  .text.cmdztest:0000000000000000 $t
     /tmp/ccjeMhND.s:18681  .text.cmdztest:0000000000000000 cmdztest
     /tmp/ccjeMhND.s:18734  .text.cmdlincdec:0000000000000000 $t
     /tmp/ccjeMhND.s:18742  .text.cmdlincdec:0000000000000000 cmdlincdec
     /tmp/ccjeMhND.s:18763  .text.cmdloopz:0000000000000000 $t
     /tmp/ccjeMhND.s:18771  .text.cmdloopz:0000000000000000 cmdloopz
     /tmp/ccjeMhND.s:18804  .text.cmdloop:0000000000000000 $t
     /tmp/ccjeMhND.s:18812  .text.cmdloop:0000000000000000 cmdloop
     /tmp/ccjeMhND.s:19301  .text.cmdloop:00000000000001f4 $d
     /tmp/ccjeMhND.s:19307  .text.op_shift_digit:0000000000000000 $t
     /tmp/ccjeMhND.s:19315  .text.op_shift_digit:0000000000000000 op_shift_digit
     /tmp/ccjeMhND.s:19479  .text.op_shift_digit:0000000000000060 $d
     /tmp/ccjeMhND.s:19485  .text.get_user_flag:0000000000000000 $t
     /tmp/ccjeMhND.s:19493  .text.get_user_flag:0000000000000000 get_user_flag
     /tmp/ccjeMhND.s:19531  .text.cmdflag:0000000000000000 $t
     /tmp/ccjeMhND.s:19539  .text.cmdflag:0000000000000000 cmdflag
     /tmp/ccjeMhND.s:19584  .text.cmdflag:0000000000000028 $d
     /tmp/ccjeMhND.s:19741  .text.put_user_flag:0000000000000000 $t
     /tmp/ccjeMhND.s:19749  .text.put_user_flag:0000000000000000 put_user_flag
     /tmp/ccjeMhND.s:19778  .text.clrflags:0000000000000000 $t
     /tmp/ccjeMhND.s:19786  .text.clrflags:0000000000000000 clrflags
     /tmp/ccjeMhND.s:19833  .text.clrflags:000000000000002c $d
     /tmp/ccjeMhND.s:19838  .text.intws:0000000000000000 $t
     /tmp/ccjeMhND.s:19846  .text.intws:0000000000000000 intws
     /tmp/ccjeMhND.s:20069  .text.intws:00000000000000e4 $d
     /tmp/ccjeMhND.s:20078  .text.get_maxdenom:0000000000000000 $t
     /tmp/ccjeMhND.s:20086  .text.get_maxdenom:0000000000000000 get_maxdenom
     /tmp/ccjeMhND.s:20114  .text.get_maxdenom:000000000000001c $d
ARM GAS  /tmp/ccjeMhND.s 			page 877


     /tmp/ccjeMhND.s:20119  .rodata.op_2frac.str1.4:0000000000000000 $d
     /tmp/ccjeMhND.s:20129  .text.op_2frac:0000000000000000 $t
     /tmp/ccjeMhND.s:20137  .text.op_2frac:0000000000000000 op_2frac
     /tmp/ccjeMhND.s:20309  .text.op_2frac:0000000000000090 $d
     /tmp/ccjeMhND.s:20319  .text.op_fracdenom:0000000000000000 $t
     /tmp/ccjeMhND.s:20327  .text.op_fracdenom:0000000000000000 op_fracdenom
     /tmp/ccjeMhND.s:20482  .text.op_fracdenom:0000000000000080 $d
     /tmp/ccjeMhND.s:20487  .text.op_float:0000000000000000 $t
     /tmp/ccjeMhND.s:20495  .text.op_float:0000000000000000 op_float
     /tmp/ccjeMhND.s:20690  .text.op_float:00000000000000c4 $d
     /tmp/ccjeMhND.s:20701  .text.cmddisp:0000000000000000 $t
     /tmp/ccjeMhND.s:20709  .text.cmddisp:0000000000000000 cmddisp
     /tmp/ccjeMhND.s:20786  .text.cmddisp:0000000000000036 $d
     /tmp/ccjeMhND.s:20974  .text.cmddisp:00000000000000bc $d
     /tmp/ccjeMhND.s:20980  .text.set_int_base:0000000000000000 $t
     /tmp/ccjeMhND.s:20988  .text.set_int_base:0000000000000000 set_int_base
     /tmp/ccjeMhND.s:21095  .text.set_int_base:000000000000004c $d
     /tmp/ccjeMhND.s:21102  .text.op_fract:0000000000000000 $t
     /tmp/ccjeMhND.s:21110  .text.op_fract:0000000000000000 op_fract
     /tmp/ccjeMhND.s:21169  .text.op_fract:0000000000000040 $d
     /tmp/ccjeMhND.s:21174  .text.cmdsavem:0000000000000000 $t
     /tmp/ccjeMhND.s:21182  .text.cmdsavem:0000000000000000 cmdsavem
     /tmp/ccjeMhND.s:21216  .text.cmdsavem:0000000000000018 $d
     /tmp/ccjeMhND.s:21221  .text.set_entry:0000000000000000 $t
     /tmp/ccjeMhND.s:21229  .text.set_entry:0000000000000000 set_entry
     /tmp/ccjeMhND.s:21267  .text.set_entry:0000000000000020 $d
     /tmp/ccjeMhND.s:21274  .text.get_trig_mode:0000000000000000 $t
     /tmp/ccjeMhND.s:21282  .text.get_trig_mode:0000000000000000 get_trig_mode
     /tmp/ccjeMhND.s:21317  .text.get_trig_mode:0000000000000024 $d
     /tmp/ccjeMhND.s:21324  .text.cmdpause:0000000000000000 $t
     /tmp/ccjeMhND.s:21332  .text.cmdpause:0000000000000000 cmdpause
     /tmp/ccjeMhND.s:21372  .text.cmdpause:000000000000001c $d
                            *COM*:0000000000000001 Pause
     /tmp/ccjeMhND.s:21378  .text.op_setspeed:0000000000000000 $t
     /tmp/ccjeMhND.s:21386  .text.op_setspeed:0000000000000000 op_setspeed
     /tmp/ccjeMhND.s:21415  .text.op_setspeed:000000000000001c $d
     /tmp/ccjeMhND.s:21420  .text.op_prompt:0000000000000000 $t
     /tmp/ccjeMhND.s:21428  .text.op_prompt:0000000000000000 op_prompt
     /tmp/ccjeMhND.s:21500  .text.op_prompt:0000000000000028 $d
     /tmp/ccjeMhND.s:21506  .text.XisInt:0000000000000000 $t
     /tmp/ccjeMhND.s:21514  .text.XisInt:0000000000000000 XisInt
     /tmp/ccjeMhND.s:21626  .text.XisInt:000000000000005c $d
     /tmp/ccjeMhND.s:21631  .text.XisEvenOrOdd:0000000000000000 $t
     /tmp/ccjeMhND.s:21639  .text.XisEvenOrOdd:0000000000000000 XisEvenOrOdd
     /tmp/ccjeMhND.s:21753  .text.XisEvenOrOdd:0000000000000060 $d
     /tmp/ccjeMhND.s:21758  .text.XisPrime:0000000000000000 $t
     /tmp/ccjeMhND.s:21766  .text.XisPrime:0000000000000000 XisPrime
     /tmp/ccjeMhND.s:21926  .text.XisPrime:000000000000007c $d
     /tmp/ccjeMhND.s:21932  .text.isInfinite:0000000000000000 $t
     /tmp/ccjeMhND.s:21940  .text.isInfinite:0000000000000000 isInfinite
     /tmp/ccjeMhND.s:21992  .text.isInfinite:000000000000002c $d
     /tmp/ccjeMhND.s:21997  .text.isNan:0000000000000000 $t
     /tmp/ccjeMhND.s:22005  .text.isNan:0000000000000000 isNan
     /tmp/ccjeMhND.s:22072  .text.isNan:000000000000003c $d
     /tmp/ccjeMhND.s:22077  .text.isSpecial:0000000000000000 $t
     /tmp/ccjeMhND.s:22085  .text.isSpecial:0000000000000000 isSpecial
     /tmp/ccjeMhND.s:22152  .text.isSpecial:000000000000003c $d
ARM GAS  /tmp/ccjeMhND.s 			page 878


     /tmp/ccjeMhND.s:22157  .text.op_entryp:0000000000000000 $t
     /tmp/ccjeMhND.s:22165  .text.op_entryp:0000000000000000 op_entryp
     /tmp/ccjeMhND.s:22186  .text.op_entryp:0000000000000010 $d
     /tmp/ccjeMhND.s:22191  .text.reg_decode:0000000000000000 $t
     /tmp/ccjeMhND.s:22199  .text.reg_decode:0000000000000000 reg_decode
     /tmp/ccjeMhND.s:23003  .text.reg_decode:0000000000000218 $d
     /tmp/ccjeMhND.s:23017  .text.op_regcopy:0000000000000000 $t
     /tmp/ccjeMhND.s:23025  .text.op_regcopy:0000000000000000 op_regcopy
     /tmp/ccjeMhND.s:23128  .text.op_regcopy:0000000000000048 $d
     /tmp/ccjeMhND.s:23133  .text.op_regswap:0000000000000000 $t
     /tmp/ccjeMhND.s:23141  .text.op_regswap:0000000000000000 op_regswap
     /tmp/ccjeMhND.s:23275  .text.op_regswap:000000000000006c $d
     /tmp/ccjeMhND.s:23280  .text.op_regclr:0000000000000000 $t
     /tmp/ccjeMhND.s:23288  .text.op_regclr:0000000000000000 op_regclr
     /tmp/ccjeMhND.s:23369  .text.op_regclr:0000000000000044 $d
     /tmp/ccjeMhND.s:23374  .text.op_regsort:0000000000000000 $t
     /tmp/ccjeMhND.s:23382  .text.op_regsort:0000000000000000 op_regsort
     /tmp/ccjeMhND.s:23666  .text.reset_volatile_state:0000000000000000 $t
     /tmp/ccjeMhND.s:23674  .text.reset_volatile_state:0000000000000000 reset_volatile_state
     /tmp/ccjeMhND.s:23698  .text.reset_volatile_state:0000000000000010 $d
     /tmp/ccjeMhND.s:23703  .rodata.busy.str1.4:0000000000000000 $d
     /tmp/ccjeMhND.s:23707  .text.busy:0000000000000000 $t
     /tmp/ccjeMhND.s:23715  .text.busy:0000000000000000 busy
     /tmp/ccjeMhND.s:23754  .text.busy:0000000000000018 $d
                            *COM*:0000000000000004 Busy
     /tmp/ccjeMhND.s:23763  .text.intMonadic:0000000000000000 $t
     /tmp/ccjeMhND.s:23771  .text.intMonadic:0000000000000000 intMonadic
     /tmp/ccjeMhND.s:24000  .text.intMonadic:0000000000000084 $d
                            *COM*:0000000000000002 XeqOpCode
     /tmp/ccjeMhND.s:24010  .text.intDyadic:0000000000000000 $t
     /tmp/ccjeMhND.s:24018  .text.intDyadic:0000000000000000 intDyadic
     /tmp/ccjeMhND.s:24302  .text.intDyadic:00000000000000c0 $d
     /tmp/ccjeMhND.s:24312  .text.xeq_init_contexts:0000000000000000 $t
     /tmp/ccjeMhND.s:24320  .text.xeq_init_contexts:0000000000000000 xeq_init_contexts
     /tmp/ccjeMhND.s:24439  .text.xeq_init_contexts:0000000000000078 $d
                            *COM*:0000000000000004 ProgFree
     /tmp/ccjeMhND.s:24452  .text.not_running:0000000000000000 $t
     /tmp/ccjeMhND.s:24460  .text.not_running:0000000000000000 not_running
     /tmp/ccjeMhND.s:24515  .text.not_running:000000000000001c $d
     /tmp/ccjeMhND.s:24521  .text.set_running_off_sst:0000000000000000 $t
     /tmp/ccjeMhND.s:24529  .text.set_running_off_sst:0000000000000000 set_running_off_sst
     /tmp/ccjeMhND.s:24546  .text.set_running_off_sst:0000000000000008 $d
     /tmp/ccjeMhND.s:24551  .text.set_running_on_sst:0000000000000000 $t
     /tmp/ccjeMhND.s:24559  .text.set_running_on_sst:0000000000000000 set_running_on_sst
     /tmp/ccjeMhND.s:24576  .text.set_running_on_sst:0000000000000008 $d
     /tmp/ccjeMhND.s:24581  .text.set_running_off:0000000000000000 $t
     /tmp/ccjeMhND.s:24589  .text.set_running_off:0000000000000000 set_running_off
     /tmp/ccjeMhND.s:24633  .text.set_running_off:000000000000001c $d
     /tmp/ccjeMhND.s:24639  .text.set_running_on:0000000000000000 $t
     /tmp/ccjeMhND.s:24647  .text.set_running_on:0000000000000000 set_running_on
     /tmp/ccjeMhND.s:24746  .text.set_running_on:0000000000000034 $d
     /tmp/ccjeMhND.s:24754  .text.gsbgto:0000000000000000 $t
     /tmp/ccjeMhND.s:24761  .text.gsbgto:0000000000000000 gsbgto
     /tmp/ccjeMhND.s:24940  .text.gsbgto:000000000000008c $d
     /tmp/ccjeMhND.s:24951  .text.cmdgtocommon:0000000000000000 $t
     /tmp/ccjeMhND.s:24959  .text.cmdgtocommon:0000000000000000 cmdgtocommon
     /tmp/ccjeMhND.s:25045  .text.cmdgtocommon:000000000000002c $d
ARM GAS  /tmp/ccjeMhND.s 			page 879


     /tmp/ccjeMhND.s:25051  .text.cmdgto:0000000000000000 $t
     /tmp/ccjeMhND.s:25059  .text.cmdgto:0000000000000000 cmdgto
     /tmp/ccjeMhND.s:25140  .text.cmdgto:000000000000003c $d
     /tmp/ccjeMhND.s:25148  .text.branchtoalpha:0000000000000000 $t
     /tmp/ccjeMhND.s:25155  .text.branchtoalpha:0000000000000000 branchtoalpha
     /tmp/ccjeMhND.s:25212  .text.cmdalphagto:0000000000000000 $t
     /tmp/ccjeMhND.s:25220  .text.cmdalphagto:0000000000000000 cmdalphagto
     /tmp/ccjeMhND.s:25272  .text.op_gtoalpha:0000000000000000 $t
     /tmp/ccjeMhND.s:25280  .text.op_gtoalpha:0000000000000000 op_gtoalpha
     /tmp/ccjeMhND.s:25344  .text.op_gtoalpha:0000000000000030 $d
     /tmp/ccjeMhND.s:25349  .text.cmdskip:0000000000000000 $t
     /tmp/ccjeMhND.s:25357  .text.cmdskip:0000000000000000 cmdskip
     /tmp/ccjeMhND.s:25540  .text.cmdskip:0000000000000078 $d
     /tmp/ccjeMhND.s:25548  .text.cmdback:0000000000000000 $t
     /tmp/ccjeMhND.s:25556  .text.cmdback:0000000000000000 cmdback
     /tmp/ccjeMhND.s:25709  .text.cmdback:0000000000000064 $d
     /tmp/ccjeMhND.s:25717  .text.usergsb_common:0000000000000000 $t
     /tmp/ccjeMhND.s:25724  .text.usergsb_common:0000000000000000 usergsb_common
     /tmp/ccjeMhND.s:25835  .text.usergsb_common:0000000000000078 $d
     /tmp/ccjeMhND.s:25844  .text.do_usergsb:0000000000000000 $t
     /tmp/ccjeMhND.s:25852  .text.do_usergsb:0000000000000000 do_usergsb
     /tmp/ccjeMhND.s:25885  .text.do_usergsb:0000000000000014 $d
     /tmp/ccjeMhND.s:25890  .text.cmdmultigto:0000000000000000 $t
     /tmp/ccjeMhND.s:25898  .text.cmdmultigto:0000000000000000 cmdmultigto
     /tmp/ccjeMhND.s:26002  .text.cmdmultigto:000000000000004c $d
     /tmp/ccjeMhND.s:26008  .text.store_a_to_d:0000000000000000 $t
     /tmp/ccjeMhND.s:26016  .text.store_a_to_d:0000000000000000 store_a_to_d
     /tmp/ccjeMhND.s:26064  .text.store_a_to_d:0000000000000020 $d
     /tmp/ccjeMhND.s:26069  .text.cmdlocr:0000000000000000 $t
     /tmp/ccjeMhND.s:26077  .text.cmdlocr:0000000000000000 cmdlocr
     /tmp/ccjeMhND.s:26413  .text.cmdlocr:000000000000015c $d
     /tmp/ccjeMhND.s:26421  .text.cmdxout:0000000000000000 $t
     /tmp/ccjeMhND.s:26429  .text.cmdxout:0000000000000000 cmdxout
     /tmp/ccjeMhND.s:26951  .text.cmdxout:00000000000001e4 $d
     /tmp/ccjeMhND.s:26966  .text.cmdconverged:0000000000000000 $t
     /tmp/ccjeMhND.s:26974  .text.cmdconverged:0000000000000000 cmdconverged
     /tmp/ccjeMhND.s:27203  .text.cmdconverged:00000000000000e0 $d
     /tmp/ccjeMhND.s:27213  .text.cmdshuffle:0000000000000000 $t
     /tmp/ccjeMhND.s:27221  .text.cmdshuffle:0000000000000000 cmdshuffle
     /tmp/ccjeMhND.s:27454  .text.cmdshuffle:0000000000000084 $d
     /tmp/ccjeMhND.s:27460  .text.cmdmode:0000000000000000 $t
     /tmp/ccjeMhND.s:27468  .text.cmdmode:0000000000000000 cmdmode
     /tmp/ccjeMhND.s:27549  .text.cmdmode:0000000000000050 $d
     /tmp/ccjeMhND.s:27554  .text.cmdlpop:0000000000000000 $t
     /tmp/ccjeMhND.s:27562  .text.cmdlpop:0000000000000000 cmdlpop
     /tmp/ccjeMhND.s:27634  .text.cmdlpop:0000000000000034 $d
     /tmp/ccjeMhND.s:27640  .text.cmdregs:0000000000000000 $t
     /tmp/ccjeMhND.s:27648  .text.cmdregs:0000000000000000 cmdregs
     /tmp/ccjeMhND.s:27828  .text.cmdregs:00000000000000ac $d
     /tmp/ccjeMhND.s:27835  .text.op_double:0000000000000000 $t
     /tmp/ccjeMhND.s:27843  .text.op_double:0000000000000000 op_double
     /tmp/ccjeMhND.s:28143  .text.op_double:000000000000011c $d
     /tmp/ccjeMhND.s:28150  .text.cmdrestm:0000000000000000 $t
     /tmp/ccjeMhND.s:28158  .text.cmdrestm:0000000000000000 cmdrestm
     /tmp/ccjeMhND.s:28352  .text.cmdrestm:00000000000000a8 $d
     /tmp/ccjeMhND.s:28357  .text.cmdxin:0000000000000000 $t
     /tmp/ccjeMhND.s:28365  .text.cmdxin:0000000000000000 cmdxin
ARM GAS  /tmp/ccjeMhND.s 			page 880


     /tmp/ccjeMhND.s:28791  .text.cmdxin:00000000000001b0 $d
     /tmp/ccjeMhND.s:28804  .rodata.xeq.str1.4:0000000000000000 $d
     /tmp/ccjeMhND.s:28808  .text.xeq:0000000000000000 $t
     /tmp/ccjeMhND.s:28816  .text.xeq:0000000000000000 xeq
     /tmp/ccjeMhND.s:28961  .text.xeq:0000000000000086 $d
     /tmp/ccjeMhND.s:28968  .text.xeq:0000000000000094 $t
     /tmp/ccjeMhND.s:33039  .text.dispatch_xrom:0000000000000000 dispatch_xrom
     /tmp/ccjeMhND.s:29454  .text.xeq:0000000000000244 $d
     /tmp/ccjeMhND.s:29485  .text.xeq:0000000000000280 $t
     /tmp/ccjeMhND.s:29870  .text.xeq:00000000000003e0 $d
     /tmp/ccjeMhND.s:29914  .text.xeq:0000000000000436 $t
     /tmp/ccjeMhND.s:30432  .text.xeq:0000000000000564 $d
     /tmp/ccjeMhND.s:30459  .text.xeq:0000000000000584 $t
     /tmp/ccjeMhND.s:31361  .text.xeq:0000000000000864 $d
     /tmp/ccjeMhND.s:31375  .text.xeq:0000000000000890 $t
     /tmp/ccjeMhND.s:32255  .text.xeq:0000000000000b7c $d
     /tmp/ccjeMhND.s:32270  .text.xeq:0000000000000b98 $t
     /tmp/ccjeMhND.s:32764  .text.xeq:0000000000000d54 $d
     /tmp/ccjeMhND.s:32776  .text.xeq_single:0000000000000000 $t
     /tmp/ccjeMhND.s:32783  .text.xeq_single:0000000000000000 xeq_single
     /tmp/ccjeMhND.s:32822  .text.xeq_single:0000000000000020 $d
     /tmp/ccjeMhND.s:32827  .text.xeq_xrom2:0000000000000000 $t
     /tmp/ccjeMhND.s:32834  .text.xeq_xrom2:0000000000000000 xeq_xrom2
     /tmp/ccjeMhND.s:32982  .text.xeq_xrom2:0000000000000070 $d
     /tmp/ccjeMhND.s:32996  .text.xeq_xrom:0000000000000000 $t
     /tmp/ccjeMhND.s:33004  .text.xeq_xrom:0000000000000000 xeq_xrom
     /tmp/ccjeMhND.s:33027  .text.xeq_xrom:0000000000000010 $d
     /tmp/ccjeMhND.s:33032  .text.dispatch_xrom:0000000000000000 $t
     /tmp/ccjeMhND.s:33170  .text.dispatch_xrom:000000000000005c $d
     /tmp/ccjeMhND.s:33180  .text.op_rs:0000000000000000 $t
     /tmp/ccjeMhND.s:33188  .text.op_rs:0000000000000000 op_rs
     /tmp/ccjeMhND.s:33332  .text.op_rs:0000000000000078 $d
     /tmp/ccjeMhND.s:33341  .text.xeqprog:0000000000000000 $t
     /tmp/ccjeMhND.s:33349  .text.xeqprog:0000000000000000 xeqprog
     /tmp/ccjeMhND.s:33463  .text.xeqprog:0000000000000064 $d
                            *COM*:0000000000000004 JustStopped
     /tmp/ccjeMhND.s:33471  .text.xeq_sst_bst:0000000000000000 $t
     /tmp/ccjeMhND.s:33479  .text.xeq_sst_bst:0000000000000000 xeq_sst_bst
     /tmp/ccjeMhND.s:33692  .text.xeq_sst_bst:000000000000009c $d
     /tmp/ccjeMhND.s:33702  .text.init_34s:0000000000000000 $t
     /tmp/ccjeMhND.s:33710  .text.init_34s:0000000000000000 init_34s
     /tmp/ccjeMhND.s:33762  .text.init_34s:0000000000000028 $d
     /tmp/ccjeMhND.s:33767  .rodata.paste_raw_x.str1.4:0000000000000000 $d
     /tmp/ccjeMhND.s:33771  .text.paste_raw_x:0000000000000000 $t
     /tmp/ccjeMhND.s:33779  .text.paste_raw_x:0000000000000000 paste_raw_x
     /tmp/ccjeMhND.s:34118  .text.paste_raw_x:00000000000000ec $d
     /tmp/ccjeMhND.s:34131  .rodata.fill_buffer_from_raw_x.str1.4:0000000000000000 $d
     /tmp/ccjeMhND.s:34135  .text.fill_buffer_from_raw_x:0000000000000000 $t
     /tmp/ccjeMhND.s:34143  .text.fill_buffer_from_raw_x:0000000000000000 fill_buffer_from_raw_x
     /tmp/ccjeMhND.s:34369  .text.fill_buffer_from_raw_x:00000000000000b8 $d
                            *COM*:0000000000000004 RectPolConv
     /tmp/ccjeMhND.s:34454  .rodata.xrom_targets:0000000000000000 xrom_targets
     /tmp/ccjeMhND.s:34394  .rodata:0000000000000000 $d
     /tmp/ccjeMhND.s:34402  .bss.result.11341:0000000000000000 $d
     /tmp/ccjeMhND.s:34406  .bss.result.11341:0000000000000000 result.11341
     /tmp/ccjeMhND.s:34409  .data.RegionTab:0000000000000000 $d
     /tmp/ccjeMhND.s:34413  .data.RegionTab:0000000000000000 RegionTab
ARM GAS  /tmp/ccjeMhND.s 			page 881


     /tmp/ccjeMhND.s:34419  .rodata.StackRegMask:0000000000000000 $d
     /tmp/ccjeMhND.s:34423  .rodata.StackRegMask:0000000000000000 StackRegMask
     /tmp/ccjeMhND.s:34427  .rodata.convergence_tolerances:0000000000000000 $d
     /tmp/ccjeMhND.s:34431  .rodata.convergence_tolerances:0000000000000000 convergence_tolerances
     /tmp/ccjeMhND.s:34436  .rodata.modes.11081:0000000000000000 $d
     /tmp/ccjeMhND.s:34440  .rodata.modes.11081:0000000000000000 modes.11081
     /tmp/ccjeMhND.s:34443  .rodata.modes.11551:0000000000000000 $d
     /tmp/ccjeMhND.s:34447  .rodata.modes.11551:0000000000000000 modes.11551
     /tmp/ccjeMhND.s:34450  .rodata.xrom_targets:0000000000000000 $d
     /tmp/ccjeMhND.s:17941  .text.do_tst:0000000000000069 $d
     /tmp/ccjeMhND.s:17941  .text.do_tst:000000000000006a $t
     /tmp/ccjeMhND.s:19595  .text.cmdflag:0000000000000033 $d
     /tmp/ccjeMhND.s:19595  .text.cmdflag:0000000000000034 $t
     /tmp/ccjeMhND.s:20789  .text.cmddisp:0000000000000039 $d
     /tmp/ccjeMhND.s:20789  .text.cmddisp:000000000000003a $t

UNDEFINED SYMBOLS
StateWhileOn
main_ram
xrom_size
XromParams
XromLocal
xset
decNumberRoundDigits
decNumberTrunc
dn_eq
set_carry
dn_to_ull
dn_abs
check_overflow
set_overflow
build_value
dn_lt
const_2pow64
xcopy
argcmds
display
shutdown
library_ram
backup_ram
scopy
num_arg_0
prt
scopy_char
DispMsg
dot
error_message
JustDisplayed
ShowRPN
decContextDefault
decimal64FromNumber
decimal128FromNumber
decimal64ToNumber
decimal128ToNumber
int_base
reset_shift
cnsts
ARM GAS  /tmp/ccjeMhND.s 			page 882


cnsts_d128
cnsts_d64
dn_max
dn_add
dn_subtract
dn_multiply
dn_divide
dn_min
cmplxDivide
cmplxAdd
cmplxSubtract
cmplxMultiply
decNumberNormalize
decNumberRoundDecimals
intMax
intAdd
intSubtract
intMultiply
intDivide
intMin
extract_value
dn_dec
dn_eq0
dn_inc
row_column_to_keycode
ullint_to_dn
dn_minus
find_char
decNumberFromString
decNumberCopy
decNumberZero
word_size
int_mode
dn_mulpow10
put_key
const_9on5
const_32
decNumberPow10
const_0_05
dn_log10
const_20
cnsts_conv
keycode_to_row_column
dn_compare
decNumberRnd
dn_mul100
dn_le0
dn_lt0
dn_1
finish_display
mask_value
int_to_dn
decNumber2Fraction
GoFast
alpha_view_common
is_int
is_even
ARM GAS  /tmp/ccjeMhND.s 			page 883


isPrime
dn_to_int
message
monfuncs
xrom
dyfuncs
SizeStatRegs
alpha_rcl_s
XromA2D
relative_error
cmplxR
absolute_error
const_1e_14
const_1e_32
const_1e_24
const_NaN
sprintf
niladics
multicmds
trifuncs
intChs
const_1
const_0
sigma_minus
sigma_val
set_NaN
sigma_plus
finish_RPN
is_key_pressed
clr_dot
set_dot
OpCode
checksum_ram
init_state
reset
strdup
strtok
strtoull
strchr
free
__aeabi_uldivmod
decNumberToString
